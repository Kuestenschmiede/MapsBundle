/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./Resources/public/js/c4g-maps-main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Resources/public/js/c4g-baselayer-controller.js":
/*!*********************************************************!*\
  !*** ./Resources/public/js/c4g-baselayer-controller.js ***!
  \*********************************************************/
/*! exports provided: C4gBaselayerController */
/*! exports used: C4gBaselayerController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gBaselayerController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_baselayer__ = __webpack_require__(/*! ./c4g-baselayer */ "./Resources/public/js/c4g-baselayer.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_overlay__ = __webpack_require__(/*! ./c4g-overlay */ "./Resources/public/js/c4g-overlay.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__ = __webpack_require__(/*! ./c4g-maps-config */ "./Resources/public/js/c4g-maps-config.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








var C4gBaselayerController = function () {
    function C4gBaselayerController(proxy) {
        _classCallCheck(this, C4gBaselayerController);

        this.proxy = proxy;
        this.mapController = proxy.options.mapController;
        this.arrBaselayers = {};
        this.baselayerIds = [];
    }

    _createClass(C4gBaselayerController, [{
        key: "loadBaseLayers",
        value: function loadBaseLayers() {
            var self;

            self = this;

            jQuery.ajax(this.proxy.api_baselayer_url, {
                dataType: this.mapController.data.jsonp ? "jsonp" : "json"
            }).done(function (data) {
                if (data.baselayer) {
                    self.addBaseLayers(data.baselayer);
                }
                return true;
            }).fail(function () {
                // @TODO error-messages
                //   1) Visible message 4 users (i18n)
                //   2) Technical console.warn
                console.warn('An error occured while trying to load the baselayers. Do you have configured a default profile with baselayers?');
                self.mapController.spinner.hide();
                return false;
            }).always(function () {
                //self.mapController.spinner.hide();
            });
        } // end of "loadBaseLayers()"

    }, {
        key: "addBaseLayers",
        value: function addBaseLayers(baselayers) {
            var baselayer, uid, i, j;

            // sort baselayer (for internal list)
            baselayers.sort(function (a, b) {
                if (!a.sort && !b.sort || parseInt(a.sort, 10) === parseInt(b.sort, 10)) {
                    if (!a.name || !b.name) {
                        return !b.name ? -1 : 1;
                    }
                    return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;
                }
                if (!a.sort || !b.sort) {
                    return !b.sort ? -1 : 1;
                }
                return parseInt(a.sort, 10) > parseInt(b.sort, 10) ? 1 : -1;
            });

            // build baselayer-list
            if (baselayers.length > 0) {
                for (i = 0; i < baselayers.length; i += 1) {

                    baselayer = baselayers[i];

                    uid = baselayer.id || __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].getUniqueId();
                    this.baselayerIds.push(uid);
                    if (!this.arrBaselayers[uid]) {
                        this.arrBaselayers[uid] = new __WEBPACK_IMPORTED_MODULE_0__c4g_baselayer__["a" /* C4gBaselayer */](baselayer, this);
                    }

                    // @TODO: check initial baselayer-handling
                    if (this.mapController.data.baselayer && parseInt(uid, 10) === parseInt(this.mapController.data.baselayer, 10)) {
                        this.showBaseLayer(uid);
                    }

                    if (this.arrBaselayers[uid].hasOverlays) {
                        for (j = 0; j < this.arrBaselayers[uid].overlays.length; j++) {
                            if (!this.arrBaselayers[uid].overlayController.arrOverlays[this.arrBaselayers[uid].overlays[j].id]) {
                                this.arrBaselayers[uid].overlayController.arrOverlays[this.arrBaselayers[uid].overlays[j].id] = new __WEBPACK_IMPORTED_MODULE_1__c4g_overlay__["a" /* C4gOverlay */](this.arrBaselayers[uid].overlays[j], this.mapController);
                                this.arrBaselayers[uid].overlayController.arrOverlays[this.arrBaselayers[uid].overlays[j].id].layer = this.arrBaselayers[uid].overlayController.showOverlayLayer(this.arrBaselayers[uid].overlays[j].id);
                            }
                        }
                    }
                }
            }

            if (!this.activeBaselayerId) {
                // no baselayer was activated
                if (baselayers.length > 0 && baselayers[0].id) {
                    // take first baselayer if possible
                    uid = baselayers[0].id;
                } else {
                    // otherwise build default baselayer
                    uid = 0;
                    this.baselayerIds.push(uid);
                    if (!this.arrBaselayers[uid]) {
                        this.arrBaselayers[uid] = {
                            id: 0,
                            name: 'c4g_default',
                            provider: 'osm',
                            style: 'Mapnik'
                        };
                    }
                }
                this.showBaseLayer(uid);
            }
            this.proxy.baselayers_loaded = true;

            __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_baselayer_loaded, this.baselayerIds);
        } // end of "addBaseLayers()"

    }, {
        key: "createBaseLayer",
        value: function createBaseLayer(layerOptions, baseLayerConfig, sourceConfigs) {
            var newBaselayer;
            layerOptions = layerOptions || {};
            switch (baseLayerConfig.provider) {
                case 'custom':
                    // custom
                    var noUrl = true;
                    if (baseLayerConfig.url) {
                        if (baseLayerConfig.url.indexOf('https') !== -1) {
                            layerOptions.crossOrigin = 'anonymous';
                        }
                        layerOptions.url = baseLayerConfig.url;
                        noUrl = false;
                    } else if (baseLayerConfig.urls) {
                        layerOptions.urls = baseLayerConfig.urls;
                        noUrl = false;
                    }
                    if (!noUrl) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ(layerOptions),
                            extent: baseLayerConfig.extend
                        });
                    } else {
                        console.warn('custom url(s) missing -> switch to default');
                    }
                case 'osm':
                    if (sourceConfigs.osm[baseLayerConfig.style]) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.OSM($.extend(sourceConfigs.osm[baseLayerConfig.style], layerOptions))
                        });
                    } else if (sourceConfigs.stamen[baseLayerConfig.style]) {
                        // Stamen
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.Stamen($.extend(sourceConfigs.stamen[baseLayerConfig.style], layerOptions))
                        });
                        // } else if (mapQuestSourceConfigs[baseLayerConfig.style]) {
                        //   // mapQuest
                        //   newBaselayer = new ol.layer.Tile({
                        //     source: new ol.source.MapQuest(mapQuestSourceConfigs[baseLayerConfig.style])
                        //   });
                    } else if (baseLayerConfig.style === 'osm_custom') {
                        // custom
                        var _noUrl = true;
                        if (baseLayerConfig.url) {
                            layerOptions.url = baseLayerConfig.url;
                            _noUrl = false;
                        } else if (baseLayerConfig.urls) {
                            layerOptions.urls = baseLayerConfig.urls;
                            _noUrl = false;
                        }
                        if (!_noUrl) {
                            newBaselayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(layerOptions)
                            });
                        } else {
                            console.warn('custom url(s) missing -> switch to default');
                        }
                    } else {
                        console.warn('unsupported osm-style -> switch to default');
                    }
                    break;
                case 'mapbox':
                    if (baseLayerConfig.api_key && baseLayerConfig.app_id && baseLayerConfig.mapbox_type) {

                        if (baseLayerConfig.mapbox_type === 'Mapbox') {
                            layerOptions.url = baseLayerConfig.url + baseLayerConfig.app_id + '/tiles/{z}/{x}/{y}?access_token=' + baseLayerConfig.api_key;
                            newBaselayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions))
                            });
                        } else {
                            layerOptions.url = baseLayerConfig.url_classic + baseLayerConfig.app_id + '/{z}/{x}/{y}.png?access_token=' + baseLayerConfig.api_key;

                            newBaselayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions))
                            });
                        }
                    } else if (baseLayerConfig.hide_in_be) {
                        layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ($.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions))
                        });
                    } else {
                        console.warn('wrong mapbox configuration!');
                    }
                    break;
                case 'klokan':
                    if (baseLayerConfig.api_key && baseLayerConfig.klokan_type) {

                        if (baseLayerConfig.klokan_type === 'OpenMapTiles') {
                            layerOptions.url = baseLayerConfig.url + '{z}/{x}/{y}.pbf';
                            newBaselayer = new ol.layer.VectorTile({
                                source: new ol.source.VectorTile(jQuery.extend(sourceConfigs.klokan[baseLayerConfig.klokan_type], layerOptions))
                            });

                            //ToDo style url
                            fetch(baseLayerConfig.url + '/styles/' + baseLayerConfig.style + '/style.json').then(function (response) {
                                response.json().then(function (glStyle) {
                                    olms.applyStyle(newBaselayer, glStyle, 'openmaptiles');
                                });
                            });
                        } else {
                            layerOptions.url = baseLayerConfig.url + '/data/v3/{z}/{x}/{y}.pbf?key=' + baseLayerConfig.api_key;
                            newBaselayer = new ol.layer.VectorTile({
                                source: new ol.source.VectorTile(jQuery.extend(sourceConfigs.klokan[baseLayerConfig.klokan_type], layerOptions))
                            });

                            fetch(baseLayerConfig.url + '/styles/' + baseLayerConfig.style + '/style.json?key=' + baseLayerConfig.api_key).then(function (response) {
                                response.json().then(function (glStyle) {
                                    olms.applyStyle(newBaselayer, glStyle, 'openmaptiles');
                                });
                            });
                        }
                    } else {
                        console.warn('wrong klokan configuration!');
                    }
                    break;
                case 'here':
                    if (baseLayerConfig.api_key && baseLayerConfig.app_id && baseLayerConfig.here_type) {

                        if (baseLayerConfig.style == 'normal') {
                            layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/normal.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'transit') {
                            layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/normal.day.transit/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'pedestrian') {
                            layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/pedestrian.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'terrain') {
                            layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/terrain.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'satellite') {
                            layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/satellite.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'hybrid') {
                            layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/hybrid.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        }

                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ($.extend(sourceConfigs.here[baseLayerConfig.here_type], layerOptions))
                        });
                    } else if (baseLayerConfig.hide_in_be) {
                        layerOptions.url = layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ($.extend(sourceConfigs.mapbox[baseLayerConfig.here_type], layerOptions))
                        });
                    } else {
                        console.warn('wrong HERE configuration!');
                    }
                    break;
                case 'thunder':
                    if (baseLayerConfig.api_key && baseLayerConfig.thunderforest_type) {

                        if (baseLayerConfig.style) {
                            layerOptions.url = "https://tile.thunderforest.com/" + baseLayerConfig.style + "/{z}/{x}/{y}.png?apikey=" + baseLayerConfig.api_key;
                        }

                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ(jQuery.extend(sourceConfigs.thunderforest[baseLayerConfig.thunderforest_type], layerOptions))
                        });
                    } else if (baseLayerConfig.hide_in_be) {
                        layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.thunderforest_type], layerOptions))
                        });
                    } else {
                        console.warn('wrong Thunderforest configuration!');
                    }
                    break;
                case 'google':
                    //@todo
                    console.warn('google-maps are currently unsupported');
                    break;
                case 'bing':
                    if (baseLayerConfig.api_key && baseLayerConfig.style) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.BingMaps({
                                culture: navigator.languages ? navigator.languages[0] : navigator.language || navigator.userLanguage,
                                key: baseLayerConfig.api_key,
                                imagerySet: baseLayerConfig.style
                            })
                        });
                    } else {
                        console.warn('wrong bing-key or invalid imagery-set!');
                    }
                    break;
                case 'wms':
                    if (baseLayerConfig.url.indexOf('https') !== -1) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.TileWMS({
                                url: baseLayerConfig.url,
                                params: {
                                    LAYERS: baseLayerConfig.params.layers,
                                    VERSION: baseLayerConfig.params.version,
                                    //FORMAT: baseLayerConfig.params.format,
                                    TRANSPARENT: baseLayerConfig.params.transparent
                                },
                                gutter: baseLayerConfig.gutter,
                                attributions: baseLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION,
                                crossOrigin: 'anonymous'
                            })
                            //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                        });
                    } else {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.TileWMS({
                                url: baseLayerConfig.url,
                                params: {
                                    LAYERS: baseLayerConfig.params.layers,
                                    VERSION: baseLayerConfig.params.version,
                                    //FORMAT: baseLayerConfig.params.format,
                                    TRANSPARENT: baseLayerConfig.params.transparent
                                },
                                gutter: baseLayerConfig.gutter,
                                attributions: baseLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                            })
                            //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                        });
                    }

                    break;
                case 'owm':
                    newBaselayer = new ol.layer.Tile({
                        source: new ol.source.XYZ({
                            url: baseLayerConfig.url + baseLayerConfig.app_id + '/{z}/{x}/{y}?hash=' + baseLayerConfig.api_key,
                            attributions: baseLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                        })
                        //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                    });
                    break;
                case 'group':
                    var baseLayerGroup = [];
                    for (var index in baseLayerConfig['layerGroup']) {
                        if (baseLayerConfig['layerGroup'].hasOwnProperty(index)) {

                            var element = this.createBaseLayer(null, baseLayerConfig['layerGroup'][index], sourceConfigs);
                            var maxZoom = this.proxy.options.mapController.map.getView().getResolutionForZoom(baseLayerConfig['layerGroup'][index]['minZoom']);
                            var minZoom = this.proxy.options.mapController.map.getView().getResolutionForZoom(baseLayerConfig['layerGroup'][index]['maxZoom']);
                            element.setMinResolution(minZoom);
                            element.setMaxResolution(maxZoom);
                            baseLayerGroup.push(element);
                        }
                    }
                    newBaselayer = new ol.layer.Group({
                        layers: baseLayerGroup
                    });
                    break;

                default:
                    console.warn('unsupported provider');
                    break;
            }
            return newBaselayer;
        }
    }, {
        key: "showBaseLayer",
        value: function showBaseLayer(baseLayerUid) {

            var self = this,
                layers = void 0,
                baselayer = void 0,
                addBaselayer = void 0,
                baseLayers = void 0,
                sourceConfigs = [],
                newBaselayer = void 0,
                layerOptions = void 0,
                i = void 0,
                view = void 0;

            var baseLayerConfig = this.arrBaselayers[baseLayerUid];

            if (typeof baseLayerConfig !== "undefined" && !baseLayerConfig.layer) {
                // create layer
                sourceConfigs.osm = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].osm;
                sourceConfigs.stamen = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].stamen;
                //mapQuestSourceConfigs = c4g.maps.config.mapquest;
                sourceConfigs.mapbox = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].mapbox;
                sourceConfigs.klokan = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].klokan;
                sourceConfigs.here = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].here;
                sourceConfigs.thunderforest = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].thunderforest;

                //newBaselayer = new ol.layer.Tile({
                //  source: new ol.source.OSM()
                //});

                layerOptions = {};

                if (baseLayerConfig.attribution) {
                    if (layerOptions.attributions) {
                        layerOptions.attributions = layerOptions.attributions + ' ' + baseLayerConfig.attribution;
                    } else {
                        layerOptions.attributions = ol.source.OSM.ATTRIBUTION + ' ' + baseLayerConfig.attribution;
                    }
                } else if (!layerOptions.attributions) {
                    switch (baseLayerConfig.provider) {
                        case 'osm':
                            if (sourceConfigs.stamen[baseLayerConfig.style]) {
                                layerOptions.attributions = sourceConfigs.stamen[baseLayerConfig.style].attributions;
                                /*
                                              } else if (mapQuestSourceConfigs[baseLayerConfig.style]) {
                                                layerOptions.attributions = mapQuestSourceConfigs[baseLayerConfig.style].attributions;
                                */
                            } else if (sourceConfigs.osm[baseLayerConfig.style]) {
                                layerOptions.attributions = sourceConfigs.osm[baseLayerConfig.style].attributions;
                            } else {
                                layerOptions.attributions = ol.source.OSM.ATTRIBUTION;
                            }
                            break;
                        case 'mapbox':
                            layerOptions.attributions = sourceConfigs.mapbox[baseLayerConfig.mapbox_type].attributions;
                            break;
                        case 'klokan':
                            layerOptions.attributions = sourceConfigs.klokan[baseLayerConfig.klokan_type].attributions;
                            break;
                        case 'here':
                            layerOptions.attributions = sourceConfigs.here[baseLayerConfig.here_type].attributions;
                            break;
                        case 'thunder':
                            layerOptions.attributions = sourceConfigs.thunderforest[baseLayerConfig.thunderforest_type].attributions;
                            break;
                        default:
                            layerOptions.attributions = ol.source.OSM.ATTRIBUTION;
                            break;
                    }
                }

                //ToDo helper class for attributions

                //additional attribution
                if (this.mapController.data && this.mapController.data.attribution && this.mapController.data.attribution.additional) {
                    if (layerOptions.attributions) {
                        var additionalAttribution = this.mapController.data.attribution.additional;

                        exists = false;
                        for (i = 0; i < layerOptions.attributions.length; i += 1) {
                            if (layerOptions.attributions[i] == additionalAttribution) {
                                exists = true;
                                break;
                            }
                        }

                        if (!exists) {
                            layerOptions.attributions = layerOptions.attributions + ' ' + additionalAttribution;
                        }
                    } else {
                        layerOptions.attributions = this.mapController.data.attribution.additional;
                    }
                }

                //ToDo type class for geosearch_engine
                //geosearch attribution
                var geosearch_attribution = '';
                if (this.mapController.data.geosearch) {
                    var geosearch_engine = this.mapController.data.geosearch.geosearch_engine;

                    if (this.mapController.data && this.mapController.data.attribution) {

                        switch (geosearch_engine) {
                            case '4':
                                geosearch_attribution = ''; //con4gis mapservices
                                break;
                            case '3':
                                if (this.mapController.data.geosearch.custom_attribution) {
                                    geosearch_attribution = this.mapController.data.geosearch.custom_attribution;
                                }
                                break;
                            case '2':
                                geosearch_attribution = 'Nominatim Search Courtesy of <a href="http://www.mapquest.com/" target="_blank">MapQuest</a> <img src="http://developer.mapquest.com/content/osm/mq_logo.png" alt="" />';
                                break;
                            case '1':
                            default:
                                geosearch_attribution = 'Nominatim Search Courtesy of <a href="http://wiki.openstreetmap.org/wiki/Nominatim_usage_policy" target="_blank">OpenStreetMap</a>';
                                break;
                        }

                        var geosearchAttribution = geosearch_attribution;

                        var exists = false;
                        if (!layerOptions.attributions) {
                            layerOptions.attributions = [];
                        }
                        for (i = 0; i < layerOptions.attributions.length; i += 1) {
                            if (layerOptions.attributions[i] == geosearchAttribution) {
                                exists = true;
                                break;
                            }
                        }

                        if (!exists) {
                            layerOptions.attributions = layerOptions.attributions + ' ' + geosearchAttribution;
                        } else {
                            layerOptions.attributions = geosearchAttribution;
                        }
                    }
                }

                if (baseLayerConfig.sorting) {
                    layerOptions.sort = baseLayerConfig.sorting;
                }
                if (baseLayerConfig.minZoom && baseLayerConfig.minZoom >= 0) {
                    layerOptions.minZoom = baseLayerConfig.minZoom;
                }
                if (baseLayerConfig.maxZoom && baseLayerConfig.maxZoom >= 0) {
                    layerOptions.maxZoom = baseLayerConfig.maxZoom;
                }

                newBaselayer = this.createBaseLayer(layerOptions, baseLayerConfig, sourceConfigs);
                if (baseLayerConfig.hasOverlays) {
                    for (i = 0; i < baseLayerConfig.overlays.length; i++) {
                        if (!baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id]) {
                            baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id] = new __WEBPACK_IMPORTED_MODULE_1__c4g_overlay__["a" /* C4gOverlay */](baseLayerConfig.overlays[i], this.mapController);
                            baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id].layer = baseLayerConfig.overlayController.showOverlayLayer(baseLayerConfig.overlays[i].id);
                        }
                    }
                }
                // if (baseLayerConfig.hasOverlays) {
                //
                //     for (i = 0; i < baseLayerConfig.overlays.length; i += 1) {
                //         if(!c4g.maps.overlays){
                //             c4g.maps.overlays = [];
                //         }
                //         c4g.maps.overlays[baseLayerConfig.overlays[i].id] = baseLayerConfig.overlays[i];
                //         if(this.mapController.data.baselayer && parseInt(baseLayerConfig.id, 10) === parseInt(this.proxy.activeBaselayerId, 10)) {
                //             self.mapController.map.addLayer(self.showOverlayLayer(baseLayerConfig.overlays[i].id));
                //         }
                //     }
                //
                // }

                this.arrBaselayers[baseLayerUid].layer = newBaselayer;
            }

            layers = this.mapController.map.getLayers();

            // secure
            if (layers.item(0).get('checkSum') === "baseMapsLayer") {
                baseLayers = layers.item(0).getLayers();

                if (typeof this.arrBaselayers[baseLayerUid] !== "undefined") {
                    baselayer = this.arrBaselayers[baseLayerUid].layer;

                    if (baselayer) {
                        addBaselayer = true;
                        baseLayers.forEach(function (element, index, array) {
                            if (element && element === baselayer) {
                                element.setVisible(true);
                                addBaselayer = false;
                            } else if (element) {
                                element.setVisible(false);
                            } else {
                                addBaselayer = false;
                            }
                        }, this);

                        if (addBaselayer) {
                            baseLayers.push(baselayer);
                        }
                    }

                    view = this.mapController.map.getView();
                    var zoom = view.getZoom();
                    var center = view.getCenter();
                    if (baseLayerConfig.minZoom && baseLayerConfig.minZoom >= 0 || baseLayerConfig.maxZoom && baseLayerConfig.maxZoom >= 0) {
                        if (baseLayerConfig.minZoom && view.getZoom() < baseLayerConfig.minZoom) {
                            view.setZoom(baseLayerConfig.minZoom);
                        } else if (baseLayerConfig.maxZoom && view.getZoom() > baseLayerConfig.maxZoom) {
                            view.setZoom(baseLayerConfig.maxZoom);
                        }

                        var mapData = this.mapController.data;
                        if (mapData.zoomlevel || mapData.mouseposition) {
                            var controlContainerTopLeft = document.createElement('div');
                            controlContainerTopLeft.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TL + ' ' + __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
                            this.mapController.$overlaycontainer_stopevent.prepend(controlContainerTopLeft);

                            var controlContainerBottomLeft = document.createElement('div');
                            controlContainerBottomLeft.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL + ' ' + __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
                            $(controlContainerTopLeft).after(controlContainerBottomLeft);
                            this.mapController.leftSlideElements.push(controlContainerBottomLeft);

                            var controlContainerBottomLeftSub = document.createElement('div');
                            controlContainerBottomLeftSub.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL_SUB + ' ' + __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;

                            var newView = new ol.View({
                                center: center,
                                projection: view.getProjection(),
                                zoom: zoom,
                                minZoom: parseInt(baseLayerConfig.minZoom, 10) || 0,
                                maxZoom: parseInt(baseLayerConfig.maxZoom, 10) || 19,
                                rotation: view.getRotation(),
                                resolution: view.getResolution()
                            });

                            this.mapController.map.setView(newView);
                            __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].redrawMapView(this.mapController);

                            // if (mapData.scaleline) {
                            //   this.mapController.map.removeControl(this.mapController.controls.scaleline);
                            //   this.mapController.controls.scaleline = new ol.control.ScaleLine({
                            //     mapView: this.mapController.map.getView(),
                            //     target: controlContainerBottomLeft,
                            //     undefinedHTML: 'N/A'
                            //   });
                            //   this.mapController.map.addControl(this.mapController.controls.scaleline);
                            // }
                            //
                            // $(controlContainerBottomLeft).append(controlContainerBottomLeftSub);
                            //
                            // if (mapData.zoomlevel) {
                            //   this.mapController.map.removeControl(this.mapController.controls.zoomlevel);
                            //   this.mapController.controls.zoomlevel = new c4g.maps.control.Zoomlevel({
                            //     mapView: this.mapController.map.getView(),
                            //     target: controlContainerBottomLeftSub,
                            //     undefinedHTML: 'N/A'
                            //   });
                            //   this.mapController.map.addControl(this.mapController.controls.zoomlevel);
                            // }
                            //
                            // if (mapData.mouseposition) {
                            //   this.mapController.map.removeControl(this.mapController.controls.mouseposition);
                            //   this.mapController.controls.mouseposition = new ol.control.MousePosition({
                            //     projection: 'EPSG:4326',
                            //     coordinateFormat: ol.coordinate.toStringHDMS,
                            //     target: controlContainerBottomLeftSub,
                            //     undefinedHTML: 'N/A'
                            //   });
                            //   this.mapController.map.addControl(this.mapController.controls.mouseposition);
                            // }
                        }
                    }
                }
            }

            if (typeof baseLayerConfig !== "undefined") {
                this.proxy.activeBaselayerId = baseLayerConfig.id;

                __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_baselayer_visibility, baseLayerConfig);

                /**
                 * Cesium integration
                 */
                if (typeof baseLayerConfig !== "undefined") {
                    var mapData = this.mapController.data;
                    if (mapData.cesium && mapData.cesium.enable && (mapData.cesium.always || baseLayerConfig.cesium)) {
                        if (!this.ol3d) {
                            this.ol3d = new olcs.OLCesium({
                                map: this.mapController.map,
                                createSynchronizers: false /*,
                                                           time() {
                                                           const val = timeElt.value;
                                                           if (ol3d.getCesiumScene().globe.enableLighting && val) {
                                                           const d = new Date();
                                                           d.setUTCHours(val);
                                                           return Cesium.JulianDate.fromDate(d);
                                                           }
                                                           return Cesium.JulianDate.now();
                                                           }*/ });
                        }
                        /*const scene = ol3d.getCesiumScene();
                        const terrainProvider = new Cesium.CesiumTerrainProvider({
                            url: '//assets.agi.com/stk-terrain/world',
                            requestVertexNormals: true
                        });
                        scene.terrainProvider = terrainProvider;*/
                        this.ol3d.setEnabled(true);
                        /*window['toggleTime'] = function() {
                            scene.globe.enableLighting = !scene.globe.enableLighting;
                            if (timeElt.style.display == 'none') {
                                timeElt.style.display = 'inline-block';
                            } else {
                                timeElt.style.display = 'none';
                            }
                        };*/
                    } else {
                        if (this.ol3d && this.ol3d.getEnabled()) {
                            this.ol3d.setEnabled(false);
                            __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].redrawMapView(this.mapController);
                        }
                    }
                }
            }
        } // end of "showBaseLayer()"

    }]);

    return C4gBaselayerController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-baselayer.js":
/*!**********************************************!*\
  !*** ./Resources/public/js/c4g-baselayer.js ***!
  \**********************************************/
/*! exports provided: C4gBaselayer */
/*! exports used: C4gBaselayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gBaselayer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_overlay_controller__ = __webpack_require__(/*! ./c4g-overlay-controller */ "./Resources/public/js/c4g-overlay-controller.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var C4gBaselayer = function C4gBaselayer(baselayerArr, controller) {
    _classCallCheck(this, C4gBaselayer);

    this.id = baselayerArr['id'];
    this.pid = baselayerArr['pid'];
    this.name = baselayerArr['name'];
    this.display_name = baselayerArr['display_name'];
    this.provider = baselayerArr['provider'];
    this.osm_style = baselayerArr['osm_style'];
    this.osm_style_url1 = baselayerArr['osm_style_url1'];
    this.osm_style_url2 = baselayerArr['osm_style_url2'];
    this.osm_style_url3 = baselayerArr['osm_style_url3'];
    this.osm_style_url4 = baselayerArr['osm_style_url4'];
    this.osm_keyname = baselayerArr['osm_keyname'];
    this.mapbox_type = baselayerArr['mapbox_type'];
    this.bing_style = baselayerArr['bing_style'];
    this.style = baselayerArr['style'];
    this.attribution = baselayerArr['attribution'];
    this.params = baselayerArr['params'];
    this.wms_gutter = baselayerArr['wms_gutter'];
    this.minZoom = baselayerArr['minZoom'];
    this.maxZoom = baselayerArr['maxZoom'];
    this.protect_baselayer = baselayerArr['protect_baselayer'];
    this.permitted_groups = baselayerArr['permitted_groups'];
    this.api_key = baselayerArr['apiKey'] ? baselayerArr['apiKey'] : baselayerArr['api_key'];
    this.app_id = baselayerArr['app_id'];
    this.thunderforest_type = baselayerArr['thunderforest_type'];
    this.here_type = baselayerArr['here_type'];
    this.cesium = baselayerArr['cesium'];
    this.hide_in_be = baselayerArr['hide_in_be'];
    this.url = baselayerArr['url'];
    this.urls = baselayerArr['urls'];
    this.klokan_type = baselayerArr['klokan_type'];
    this.style_url = baselayerArr['style_url'];
    this.hasOverlays = baselayerArr['hasOverlays'];
    this.overlays = baselayerArr['overlays'];
    if (baselayerArr['layerGroup']) {
        var layerGroup = [];
        for (var index in baselayerArr['layerGroup']) {
            if (baselayerArr['layerGroup'].hasOwnProperty(index)) {
                layerGroup[index] = new C4gBaselayer(baselayerArr['layerGroup'][index]['entry']);
                layerGroup[index]['minZoom'] = baselayerArr['layerGroup'][index]['minZoom'];
                layerGroup[index]['maxZoom'] = baselayerArr['layerGroup'][index]['maxZoom'];
            }
        }
        this.layerGroup = layerGroup;
    }
    this.overlayController = new __WEBPACK_IMPORTED_MODULE_0__c4g_overlay_controller__["a" /* C4gOverlayController */](this);
    this.layer = false;
    this.controller = controller;
};

/***/ }),

/***/ "./Resources/public/js/c4g-layer-controller.js":
/*!*****************************************************!*\
  !*** ./Resources/public/js/c4g-layer-controller.js ***!
  \*****************************************************/
/*! exports provided: C4gLayerController */
/*! exports used: C4gLayerController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLayerController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_layer__ = __webpack_require__(/*! ./c4g-layer */ "./Resources/public/js/c4g-layer.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_starboardplugin_customtab__ = __webpack_require__(/*! ./c4g-maps-control-starboardplugin-customtab */ "./Resources/public/js/c4g-maps-control-starboardplugin-customtab.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }







var C4gLayerController = function () {
  function C4gLayerController(proxy) {
    _classCallCheck(this, C4gLayerController);

    this.proxy = proxy;
    this.mapController = proxy.options.mapController;
    this.arrLayers = {};
    this.layerRequests = {};
  }

  _createClass(C4gLayerController, [{
    key: "loadLayers",
    value: function loadLayers() {
      var self = this;
      if (this.mapId === 0) {
        return false;
      }

      //jQuery.ajax("maps/layerService",{//this.proxy.api_layer_url,{
      jQuery.ajax(this.proxy.api_layer_url, {
        dataType: this.mapController.data.jsonp ? "jsonp" : "json"

      }).done(function (data) {
        self.addLayers(data.layer, data.foreignLayers);
        self.proxy.layers_loaded = true;
        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.proxy.hook_layer_loaded, self.proxy.layerIds);
        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_layer_loaded, { layerIds: self.proxy.layerIds, proxy: self.proxy });
        self.proxy.checkLocationStyles({
          done: function done() {
            self.drawLayerInitial();
          }
        });
        return true;
      }).fail(function () {
        // @TODO: error-messages
        //   1) Visible message 4 users (i18n)
        //   2) Technical console.warn
        console.warn('An error occured while trying to load the layers...');
        return false;
      }).always(function () {
        // this.proxy.starboard.spinner.hide();
      });
    } // end of "loadLayer()"

  }, {
    key: "addLayers",
    value: function addLayers(layers, foreignLayers) {
      var i, j, k, p, isVisible, layer, storedItem, linkItems, uid, currentZoom, fnHandleAndAppendLayerChilds, endlessLoopId, parentId, parentIds, permalinkedLayers, child, _fnHandleChilds, key, starboard, fnAddToHook;

      var self = this;
      isVisible = false;

      permalinkedLayers = this.mapController.data.layers || [];

      fnHandleAndAppendLayerChilds = function fnHandleAndAppendLayerChilds(objItem) {
        var toggle, entryWrapper;

        if (objItem.hasChilds) {
          objItem.visibleChilds = self.addLayers(objItem.childs, foreignLayers);
        }
      }; // end of "fnHandleAndAppendLayerChilds()"

      // wrapper function to avoid closure accessibility
      fnAddToHook = function fnAddToHook(layer) {
        var layername, layerid, layericon;

        if (layer.childs && layer.childs.length > 0) {
          layername = layer.name;
          layerid = layer.tabId;
          layericon = layer.awesomeicon;
          starboard = self.proxy.options.mapController.controls.starboard;
          if (!starboard) {
            self.proxy.options.mapController.initializeStarboard();
            starboard = self.proxy.options.mapController.controls.starboard;
          }
          starboard.hook_layerswitcher_loaded.push(function () {
            starboard.starboardTabs = starboard.starboardTabs || {};
            starboard.starboardTabs[layerid] = new __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_starboardplugin_customtab__["a" /* Customtab */](starboard, {
              name: layername,
              tabId: layerid,
              awesomeicon: layericon
            });
          });
        }
      };

      if (layers && layers.length > 0) {
        for (i = 0; i < layers.length; i += 1) {
          if (this.arrLayers[layers[i].id]) {
            layer = this.arrLayers[layers[i].id];
          } else {
            layer = new __WEBPACK_IMPORTED_MODULE_0__c4g_layer__["a" /* C4gLayer */](layers[i]); //layers[i];
          }

          linkItems = false;
          //console.log(layer);
          if (_typeof(layer.content) === "object") {
            layer.content = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].objectToArray(layer.content);
          }

          // endless-loop prevention
          //
          parentId = layer.pid;
          parentIds = {};
          // build parent-ids chain
          while (self.arrLayers[parentId]) {
            if (parentIds[parentId]) {
              console.warn('Caught endless-loop (ID: ' + layer.id + ')');
              break;
            }
            parentIds[parentId] = true;
            parentId = this.arrLayers[parentId].pid;
          }

          if (layer.content && layer.content[0] && layer.content[0].cssClass) {
            layer.cssClass = layer.content[0].cssClass;
          }

          if (!parentIds[parentId]) {

            // prepare layer data if they are a new starboard tab
            if (layer.type === "startab") {
              layer.editable = true;
              layer.renderSpecial = true;
              layer.tabId = layer.id;
              if (!layer.layername) {
                layer.display = true;
              }
              // iterate childs and tell them to not load in layerswitcher
              _fnHandleChilds = function fnHandleChilds(fLayer) {
                for (var count = 0; count < fLayer.childs.length; count++) {
                  var childArr = fLayer.childs[count];
                  childArr.editable = true;
                  childArr.tabId = fLayer.tabId;
                  childArr.renderSpecial = true;
                  if (self.arrLayers[childArr.id]) {
                    child = self.arrLayers[childArr.id];
                  } else {
                    child = new __WEBPACK_IMPORTED_MODULE_0__c4g_layer__["a" /* C4gLayer */](childArr); //layers[i];
                  }
                  // set renderSpecial to remove it from normal layerswitcher
                  self.arrLayers[child.id] = child;
                  fLayer.childs[count] = child;
                  if (child.hasChilds) {
                    // recursive call
                    _fnHandleChilds(child);
                  }
                }
              }; // end of fnHandleChilds

              if (layer.hasChilds) {
                _fnHandleChilds(layer);
              }
              fnAddToHook(layer);
            }

            uid = layer.id || __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getUniqueId();
            this.arrLayers[uid] = layer;
            if (this.proxy.checkLayerIsActiveForZoom(layer.id)) {
              layer.isInactive = false;
            } else {
              layer.isInactive = true;
            }

            this.proxy.layerIds.push(layer.id);

            if (layer.display) {
              isVisible = true;
              fnHandleAndAppendLayerChilds(layer);
            } else if (layer.pid && this.arrLayers[layer.pid]) {
              // set hide when layers are not displayed in the starboard
              layer.hide = this.arrLayers[layer.pid].hide;
            }

            var visible = false;
            if (permalinkedLayers.length > 0) {
              for (p = 0; p < permalinkedLayers.length; p += 1) {
                if (permalinkedLayers[p] == layer.id) {
                  visible = true;
                  break;
                }
              }
            }

            if (layer.hide !== "1" || visible) {
              this.proxy.activeLayerIds[layer.id] = 'invisible';
            }
          }
        } // end of for-loop

        // wrapperElement.appendChild(wrapper);
      }

      return isVisible;
    } // end of "addLayers()"

  }, {
    key: "loadLayerContent",
    value: function loadLayerContent(itemUid) {

      var self = this,
          i,
          layers,
          features,
          featureProjection,
          dataProjection,
          layerGroup,
          contentData,
          requestData,
          requestContentData,
          requestVectorSource,
          vectorLayer,
          vectorSource,
          vectorStyle,
          clusterSource,
          styleForCluster,
          refreshInterval,
          refreshAjaxVars,
          fnAttachDataToLayer;

      refreshAjaxVars = {};

      fnAttachDataToLayer = function fnAttachDataToLayer(layer, data) {
        data.properties = data.properties || {};

        layer.popup = data.popup || data.properties.popup || false;
        layer.tooltip = data.tooltip || data.properties.tooltip || false;
        layer.tooltip_length = data.tooltip_length || data.properties.tooltip_length || false;
        layer.label = data.label || data.properties.label || false;
        layer.zoom_onclick = data.zoom_onclick || data.properties.zoom_onclick || false;
      };

      if (this.arrLayers[itemUid].content) {
        layers = [];

        var contentFeatures = [];
        for (i = 0; i < this.arrLayers[itemUid].content.length; i += 1) {
          contentData = this.arrLayers[itemUid].content[i];
          styleForCluster = function styleForCluster(feature, resolution) {

            var size, style, fFeatures, iconOffset, radius, k, fillcolor, fontcolor;

            if (contentData && contentData.locationStyle && self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle]) {
              style = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style(feature, resolution);

              if (!style) {
                style = [];
                self.fittingExtends[itemUid] = vectorSource.getExtent();
              }

              if (feature !== undefined && feature !== null && feature.self !== window) {
                if (feature.get('features')) {
                  fFeatures = feature.get('features');
                } else {
                  fFeatures = [];
                  fFeatures[0] = feature;
                }
                size = fFeatures.length;
                if (size > 1) {
                  if (fFeatures[0].getStyle() && size < 1000) {
                    // limit for performance
                    style[0] = fFeatures[0].getStyle()[0];
                    for (k = 0; k < fFeatures.length; k += 1) {
                      if (!fFeatures[k].getStyle()) {
                        style = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style(fFeatures[0], resolution);
                        break;
                      }
                    }
                  } else {
                    style = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style(fFeatures[0], resolution);
                  }
                  if (!style) {
                    style = [];
                  }

                  // calculate bubble-offset
                  iconOffset = [0, 0];
                  if (style[0]) {
                    if (_typeof(style[0].getImage()) && style[0].getImage().getRadius && typeof style[0].getImage().getRadius === "function") {
                      radius = parseInt(style[0].getImage().getRadius(), 10);
                      if (radius) {
                        iconOffset = [0, radius];
                      }
                    } else if (style[0].getImage() && style[0].getImage().getAnchor && typeof style[0].getImage().getAnchor === "function") {
                      iconOffset = style[0].getImage().getAnchor() || [0, 0];
                    }
                  }

                  fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity('4975A8', {
                    unit: '%',
                    value: 70
                  });

                  if (contentData.cluster_fillcolor) {
                    fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fillcolor, {
                      unit: '%',
                      value: 70
                    });
                  }
                  fontcolor = '#FFFFFF';
                  if (contentData.cluster_fontcolor) {
                    fontcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fontcolor, {
                      unit: '%',
                      value: 100
                    });
                  }

                  style.push(new ol.style.Style({
                    text: new ol.style.Text({
                      text: "●",
                      font: "60px sans-serif",
                      offsetX: -1 * iconOffset[0],
                      offsetY: -1 * iconOffset[1],
                      fill: new ol.style.Fill({
                        color: fillcolor
                      })
                    })
                  }));
                  style.push(new ol.style.Style({
                    text: new ol.style.Text({
                      text: size.toString(),
                      offsetX: -1 * iconOffset[0],
                      offsetY: -1 * iconOffset[1] + 3,
                      fill: new ol.style.Fill({
                        color: fontcolor
                      })
                    })
                  }));
                } else if (size === 1 && fFeatures[0].getStyle()) {
                  return fFeatures[0].getStyle();
                }
              }
            }
            return style;
          }; // end of styleForCluster()

          if (contentData && contentData.type === "urlData") {

            requestData = {};
            requestData.url = contentData.data.url;
            if (contentData.data.params) {
              requestData.params = decodeURIComponent(contentData.data.params);
            }

            if (contentData.settings.boundingBox) {
              requestContentData = contentData;
              requestVectorSource = new ol.source.Vector({
                loader: function loader(extent, resolution, projection) {
                  var boundingArray, strBoundingBox, url;

                  boundingArray = ol.proj.transformExtent(extent, projection, 'EPSG:4326');
                  //different cases for Overpass_QL and old Overpass
                  if (requestData.params.substr(0, 1) == "<") {
                    strBoundingBox = '<bbox-query s="' + boundingArray[1] + '" n="' + boundingArray[3] + '" w="' + boundingArray[0] + '" e="' + boundingArray[2] + '"/>';
                  } else {
                    strBoundingBox = boundingArray[1] + ',' + boundingArray[0] + ',' + boundingArray[3] + ',' + boundingArray[2];
                  }

                  url = requestData.url;
                  var bboxTag = requestData.params.indexOf('(bbox)') >= 0 ? /\(bbox\)/g : /\{{bbox\}}/g;

                  if (requestData.params) {

                    url += '?data=' + encodeURIComponent(requestData.params.replace(bboxTag, strBoundingBox));
                  }

                  if (self.layerRequests === undefined) {
                    self.layerRequests = {};
                  }
                  if (self.layerRequests['layerRequest' + itemUid] !== undefined) {
                    self.layerRequests['layerRequest' + itemUid].abort();
                  }

                  self.layerRequests['layerRequest' + itemUid] = jQuery.ajax({
                    url: url
                  }).done(function (response) {
                    var j, format, feature, rFeatures, osmNodes, osmNds, nodeIdx, ndIdx, infoNodes, newTag, ref;

                    delete self.layerRequests['layerRequest' + itemUid];

                    // preprocessing the osm_xml to find relation-nodes with information
                    if (response && response.children && response.children[0]) {
                      // 1) find nodes with data
                      osmNodes = response.children[0].getElementsByTagName('node');
                      if (osmNodes) {
                        infoNodes = {};
                        for (nodeIdx in osmNodes) {
                          if (osmNodes.hasOwnProperty(nodeIdx) && osmNodes[nodeIdx] && osmNodes[nodeIdx].children && osmNodes[nodeIdx].children.length > 0) {
                            infoNodes[osmNodes[nodeIdx].getAttribute('id')] = osmNodes[nodeIdx];
                            // infoNodes[osmNodes[nodeIdx].getAttribute('id')] = nodeIdx;
                          }
                        }
                      }

                      // 2) check and handle relations
                      osmNds = response.children[0].getElementsByTagName('nd');
                      if (osmNds) {
                        for (ndIdx in osmNds) {
                          if (ndIdx) {
                            if (osmNds.hasOwnProperty(ndIdx) && osmNds[ndIdx]) {
                              try {

                                ref = osmNds[ndIdx].getAttribute('ref');
                                if (infoNodes && ref && infoNodes[ref]) {
                                  if (requestContentData && requestContentData.settings) {
                                    if (requestContentData.settings.showAdditionalGeometries) {
                                      // mark as additional information
                                      if (response) {
                                        newTag = response.createElement('tag');
                                        if (newTag && osmNds[ndIdx].parentElement && osmNds[ndIdx].parentElement.getAttribute('id')) {
                                          newTag.setAttribute('k', 'c4g_osm_ref');
                                          newTag.setAttribute('v', osmNds[ndIdx].parentElement.getAttribute('id'));
                                          infoNodes[ref].appendChild(newTag);
                                        }
                                      }
                                    } else {
                                      // remove additional information
                                      infoNodes[ref].innerHTML = '';
                                    }
                                  }
                                }
                              } catch (e) {
                                console.warn('Could not check and handle relations.');
                              }
                            }
                          }
                        }
                      }
                      // import osm_xml
                      format = new ol.format.OSMXML();
                      if (format && response) {
                        try {
                          rFeatures = format.readFeatures(response, { featureProjection: projection });
                        } catch (e) {
                          console.warn('Can not read feature.');
                          //console.log(e.stack);
                        }
                      }

                      // postprocessing features
                      if (rFeatures && rFeatures.length > 0) {
                        for (j = 0; j < rFeatures.length; j += 1) {

                          if (rFeatures[j].getGeometry().getType() === "Point") {
                            rFeatures[j].set('osm_type', 'node');
                          } else {
                            rFeatures[j].set('osm_type', 'way');
                          }
                          rFeatures[j].set('c4g_type', 'osm');
                          rFeatures[j].set('cluster_zoom', contentData.cluster_zoom);
                          rFeatures[j].set('cluster_popup', contentData.cluster_popup);
                          rFeatures[j].set('loc_linkurl', contentData.loc_linkurl);
                          rFeatures[j].set('hover_location', contentData.hover_location);
                          rFeatures[j].set('hover_style', contentData.hover_style);
                          rFeatures[j].set('zoom_onclick', contentData.data.zoom_onclick);
                          rFeatures[j].set('label', contentData.data.label);

                          if (requestContentData.settings.forceNodes) {
                            // convert tracks and areas to points
                            if (rFeatures[j].getGeometry().getType() === "Polygon") {
                              var _centerPoint = rFeatures[j].getGeometry().getInteriorPoint().getCoordinates();
                              rFeatures[j].setGeometry(new ol.geom.Point(_centerPoint));
                            } else if (rFeatures[j].getGeometry().getType() === "LineString") {
                              // @TODO: prüfen ob dies korrekter mittelpunkt ist
                              var lineExtent = rFeatures[j].getGeometry().getExtent();
                              centerPoint = ol.extent.getCenter(lineExtent);
                              rFeatures[j].setGeometry(new ol.geom.Point(centerPoint));
                            }
                          }
                          if (rFeatures[j].get('c4g_osm_ref')) {
                            // if (requestContentData.settings.showAdditionalGeometries) {
                            if (requestContentData.settings.additionalStyle) {
                              // @TODO: load and attach style
                            } else {
                              rFeatures[j].setStyle(c4g.maps.utils.reduceStyle(requestContentData.locationStyle));
                            }
                          }
                        }
                      }
                    } else if (response && response.elements) {
                      rFeatures = [];

                      var _loop = function _loop(elementId) {
                        var element = response.elements[elementId];

                        if (element.type == "node") {
                          if (!element.tags) {
                            //not a feature, but part of a way or relation
                            return "continue";
                          }
                          var point = new ol.geom.Point([element.lon, element.lat]).transform('EPSG:4326', 'EPSG:3857');
                          feature = new ol.Feature({
                            geometry: point
                          });
                          feature.setId(element.id);
                          feature.set('osm_type', 'node');
                        } else if (element.type == "way") {
                          var arrCoords = [];

                          var _loop2 = function _loop2(_i) {
                            var node = response.elements.find(function (objNode) {
                              return objNode.id === element.nodes[_i];
                            });
                            arrCoords.push([node.lon, node.lat]);
                          };

                          for (var _i = 0; _i < element.nodes.length; _i++) {
                            _loop2(_i);
                          }
                          if (arrCoords[0][0] == arrCoords[arrCoords.length - 1][0] && arrCoords[0][1] == arrCoords[arrCoords.length - 1][1]) {
                            //polygon
                            delete arrCoords[arrCoords.length - 1];
                            arrCoords.length = arrCoords.length - 1;
                            var polygon = new ol.geom.Polygon([arrCoords]);
                            polygon.transform('EPSG:4326', 'EPSG:3857');
                            if (requestContentData.settings.forceNodes) {
                              // convert tracks and areas to points
                              var _centerPoint2 = feature.getGeometry().getInteriorPoint().getCoordinates();
                              feature.setGeometry(new ol.geom.Point(_centerPoint2));
                            }
                            feature = new ol.Feature({
                              geometry: polygon,
                              id: element.id
                            });
                          } else {
                            //linestring
                            var lineString = new ol.geom.LineString([arrCoords]);
                            lineString.transform('EPSG:4326', 'EPSG:3857');
                            feature = new ol.Feature({
                              geometry: lineString,
                              id: element.id
                            });
                            if (requestContentData.settings.forceNodes) {
                              var _lineExtent = feature.getGeometry().getExtent();
                              centerPoint = ol.extent.getCenter(_lineExtent);
                              feature.setGeometry(new ol.geom.Point(centerPoint));
                            }
                          }
                          feature.set('osm_type', 'way');
                        }
                        feature.set('c4g_type', 'osm');
                        feature.set('cluster_zoom', contentData.cluster_zoom);
                        feature.set('cluster_popup', contentData.cluster_popup);
                        feature.set('loc_linkurl', contentData.loc_linkurl);
                        feature.set('hover_location', contentData.hover_location);
                        feature.set('hover_style', contentData.hover_style);
                        feature.set('zoom_onclick', contentData.data.zoom_onclick);
                        feature.set('label', contentData.data.label);
                        for (var tags in element.tags) {
                          feature.set(tags, element.tags[tags]);
                        }
                        rFeatures.push(feature);
                      };

                      for (var elementId = 0; elementId < response.elements.length; elementId++) {
                        var _ret = _loop(elementId);

                        if (_ret === "continue") continue;
                      }
                    }
                    try {
                      requestVectorSource.addFeatures(rFeatures);
                    } catch (e) {
                      console.warn('Could not add features to source. The "forceNodes"-option should be used.');
                    }
                    //self.combineLayers(self);
                  }); // end of AJAX
                },
                strategy: ol.loadingstrategy.bbox
              });

              vectorSource = requestVectorSource;
            } else {

              if (typeof ol.format[contentData.format] === "function") {

                //StaticVector
                vectorSource = new ol.source.Vector({
                  format: new ol.format[contentData.format](),
                  url: requestData.url,
                  projection: 'EPSG:3857',
                  strategy: ol.loadingstrategy.all
                });

                if (contentData.settings && contentData.settings.refresh === true) {
                  if (self.layerRequests === undefined) {
                    self.layerRequests = {};
                  }

                  refreshInterval = typeof contentData.settings.interval === 'number' ? contentData.settings.interval : 10000;
                  /* do it with better ajax-handling
                   self.layerRequests['layerRequest' + itemUid] = window.setInterval(function () {
                   vectorSource.clear();
                   }, refreshInterval);
                   */

                  // Anfang Einschub neue AJAX-Layer
                  refreshAjaxVars.blnHasPositionIds = false;
                  refreshAjaxVars.arrPositionIds = [];
                  refreshAjaxVars.objFeatures = {};

                  vectorSource.set('refreshInterval', refreshInterval);

                  vectorSource.set('refreshFunction', function () {

                    if (!vectorSource.get('hasIds')) {
                      vectorSource.forEachFeature(function (feature) {
                        if (feature.get('positionId')) {
                          refreshAjaxVars.blnHasPositionIds = true;
                          refreshAjaxVars.arrPositionIds.push(feature.get('positionId'));
                          refreshAjaxVars.objFeatures[feature.get('positionId')] = feature;
                        }
                      });
                      if (refreshAjaxVars.blnHasPositionIds) {
                        vectorSource.set('hasIds', true);
                      }
                    }

                    jQuery.ajax({
                      url: requestData.url,
                      done: function done(data) {

                        if (data.renewableResponse) {
                          // update of stations
                          jQuery.each(data.features, function (index, featureData) {
                            if (featureData.type && featureData.type === "Feature") {
                              var feature = new ol.format[contentData.format]().readFeature(featureData, {
                                dataProjection: 'EPSG:4326',
                                featureProjection: 'EPSG:3857'
                              });
                              var layer = self.arrLayers[featureData.properties.id];
                              var popupContent = featureData.properties.popup;
                              layer.vectorLayer.getLayers().forEach(function (element, index, array) {
                                if (!self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId]) {
                                  self.proxy.locationStyleController.loadLocationStyles([featureData.properties.styleId], { done: function done() {
                                      element.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                                    } });
                                } else {
                                  element.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                                }
                                element.getSource().forEachFeature(function (nestedFeature) {
                                  nestedFeature.set('popup', popupContent);
                                });
                              });
                              layer.content[0].locationStyle = featureData.properties.styleId;

                              if (!self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId]) {
                                self.proxy.locationStyleController.loadLocationStyles([featureData.properties.styleId], { done: function done() {
                                    feature.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                                  } });
                              } else {
                                feature.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                              }

                              if (self.proxy.activeLayerIds[layer.id]) {
                                self.hideLayer(layer.id);
                                self.showLayer(layer.id);
                              }
                              // vectorSource.addFeature(feature);
                            }
                          });
                        }

                        if (data.features) {

                          refreshAjaxVars.arrNewPositionIds = [];
                          refreshAjaxVars.objNewFeatures = {};

                          jQuery.each(data.features, function (index, featureData) {
                            if (featureData.type && featureData.type == "Feature") {
                              refreshAjaxVars.feature = new ol.format[contentData.format]().readFeature(featureData, {
                                dataProjection: 'EPSG:4326',
                                featureProjection: 'EPSG:3857'
                              });
                              refreshAjaxVars.feature.set('cluster_zoom', contentData.cluster_zoom);
                              refreshAjaxVars.feature.set('loc_linkurl', contentData.loc_linkurl);
                              refreshAjaxVars.feature.set('hover_location', contentData.hover_location);
                              refreshAjaxVars.feature.set('hover_style', contentData.hover_style);
                              if (refreshAjaxVars.feature.get('positionId')) {
                                refreshAjaxVars.arrNewPositionIds.push(refreshAjaxVars.feature.get('positionId'));
                                refreshAjaxVars.objNewFeatures[refreshAjaxVars.feature.get('positionId')] = refreshAjaxVars.feature;
                              }
                            }
                          });

                          jQuery.each(refreshAjaxVars.arrPositionIds, function (index, positionId) {
                            if (refreshAjaxVars.arrNewPositionIds.indexOf(positionId) == -1) {
                              // positions id in neuer antwort nicht mehr enthalten -> lösche feature
                              if (typeof refreshAjaxVars.objFeatures[positionId] !== "undefined") {
                                vectorSource.removeFeature(refreshAjaxVars.objFeatures[positionId]);
                                delete refreshAjaxVars.arrPositionIds[index];
                              }
                            }
                          });

                          jQuery.each(refreshAjaxVars.arrNewPositionIds, function (index, positionId) {
                            if (refreshAjaxVars.arrPositionIds.indexOf(positionId) == -1) {
                              // positions id ist noch nicht vorhanden -> neues feature
                              refreshAjaxVars.arrPositionIds.push(positionId);
                              refreshAjaxVars.objFeatures[positionId] = refreshAjaxVars.objNewFeatures[positionId];
                              vectorSource.addFeature(refreshAjaxVars.objNewFeatures[positionId]);
                            }
                          });
                        }
                      }
                    });
                  });

                  self.proxy.requestFunctions['request_' + itemUid] = {
                    'function': vectorSource.get('refreshFunction'),
                    'interval': refreshInterval
                  };

                  // Ende Einschub neue AJAX-Layer
                }
              } else {
                console.warn('Format type ' + contentData.format + ' in ol.format not found.');
              }
            }

            if (contentData.settings.cluster) {

              clusterSource = new ol.source.Cluster({
                distance: 40,
                //threshold: 2, //minimum element count
                source: vectorSource,
                zoom: contentData.cluster_zoom
              });
              //console.log(clusterSource);
              this.styleForCluster = styleForCluster;

              //vectorLayer = utils.getVectorLayer(clusterSource, styleForCluster);

              vectorLayer = new ol.layer.AnimatedCluster({ name: 'Cluster',
                source: clusterSource,
                // Use a style function for cluster symbolisation
                style: styleForCluster
              });
            } else {
              vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle] ? self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style : null);
            }

            /* Fit to extend */
            if (contentData.settings && contentData.settings.fitToExtend) {

              self.fittingExtends = self.fittingExtends || {};

              vectorSource.on('change', function () {

                // check currently stored id's
                for (i in self.fittingExtends) {
                  if (self.fittingExtends.hasOwnProperty(i)) {
                    if (typeof self.proxy.activeLayerIds[i] === "undefined" || self.proxy.activeLayerIds[0] == "invisible") {
                      delete self.fittingExtends[i];
                    }
                  }
                }

                self.fittingExtends[itemUid] = vectorSource.getExtent(); //vectorSource.getFeatures();
                __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].fitToExtents(self.fittingExtends, self.mapController.map);
              });
            }
            // end of fit to extend

            fnAttachDataToLayer(vectorLayer, contentData.data);
            layers.push(vectorLayer);
          } else if (this.arrLayers[itemUid].type === "table" || this.arrLayers[itemUid].type === "link") {
            var layerContent = this.arrLayers[itemUid].content;
            contentData = layerContent[0];
            if (contentData && contentData.data.properties && contentData.data.properties.projection) {
              dataProjection = contentData.data.properties.projection;
              featureProjection = this.mapController.map.getView().getProjection();
            } else {
              dataProjection = undefined;
            }

            // force all nodes into one layer


            var contentFeature = new ol.format[layerContent[i].format]({}).readFeatures(layerContent[i].data, {
              featureProjection: featureProjection,
              dataProjection: dataProjection
            })[0];
            contentFeature.set('cluster_zoom', contentData.cluster_zoom);
            contentFeature.set('cluster_popup', contentData.cluster_popup);
            contentFeature.set('loc_linkurl', contentData.loc_linkurl);
            contentFeature.set('hover_location', contentData.hover_location);
            contentFeature.set('hover_style', contentData.hover_style);
            contentFeature.set('popup', layerContent[i].data.properties.popup);
            contentFeature.set('zoom_onclick', contentData.zoom_onclick);
            contentFeatures.push(contentFeature);

            if (i + 1 === this.arrLayers[itemUid].content.length) {
              vectorSource = new ol.source.Vector({
                features: contentFeatures,
                projection: 'EPSG:3857',
                format: new ol.format.GeoJSON()

              });
              if (contentData && contentData.settings && contentData.settings.cluster) {
                clusterSource = new ol.source.Cluster({
                  distance: 40,
                  zoom: contentData.cluster_zoom,

                  //threshold: 2, //minimum element count
                  source: vectorSource
                });
                //vectorLayer = utils.getVectorLayer(clusterSource, styleForCluster);

                vectorLayer = new ol.layer.AnimatedCluster({ name: 'Cluster',
                  source: clusterSource,
                  // Use a style function for cluster symbolisation
                  style: styleForCluster
                });
              } else {
                vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, contentData && self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle] ? self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style : null);
              }
              layers.push(vectorLayer);
            }
            //return;
          } else {
            if (this.arrLayers[itemUid].content.length > 1) {
              //TODO: refactoren und kürzen!
              // we have overpass request with reassigned forum layers
              // forum layers can not be drawn via the normal drawLayer, because they do not have a Uid
              if (contentData && typeof ol.format[contentData.format] === "function") {
                if (contentData.data.properties && contentData.data.properties.projection) {
                  dataProjection = contentData.data.properties.projection;
                  featureProjection = this.mapController.map.getView().getProjection();
                } else {
                  dataProjection = undefined;
                }

                features = new ol.format[contentData.format]({}).readFeatures(contentData.data, {
                  featureProjection: featureProjection,
                  dataProjection: dataProjection
                });

                var missingStyles = [];
                var unstyledFeatures = [];
                for (var j = 0; j < features.length; j += 1) {
                  if (features[j].get('styleId')) {
                    if (self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')] && self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style) {
                      features[j].setStyle(self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style);
                    } else {
                      missingStyles.push(features[j].get('styleId'));
                      unstyledFeatures.push(features[j]);
                    }
                  }
                }

                vectorStyle = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle] && self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style;

                if (missingStyles.length > 0) {
                  //TODO there are unstyled features because some styles were not loaded
                } else {
                  vectorSource = new ol.source.Vector({
                    features: features,
                    projection: 'EPSG:3857',
                    format: new ol.format.GeoJSON()
                  });
                  clusterSource = new ol.source.Cluster({
                    distance: 40,
                    zoom: contentData.cluster_zoom,

                    //threshold: 2, //minimum element count
                    source: vectorSource
                  });

                  vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(clusterSource, vectorStyle);
                  if (contentData.data && contentData.data.properties) {
                    if (contentData.data.properties.popup) {
                      vectorLayer.popup = contentData.data.properties.popup;
                    }
                    if (contentData.data.properties.tooltip) {
                      vectorLayer.tooltip = contentData.data.properties.tooltip;
                    }
                    if (contentData.data.properties.label) {
                      vectorLayer.label = contentData.data.properties.label;
                    }
                    if (contentData.data.properties.onclick_zoom) {
                      vectorLayer.onclick_zoom = contentData.data.properties.onclick_zoom;
                    }
                  }
                  layers.push(vectorLayer);
                }
              } else {
                if (contentData) {
                  console.warn('Format type ' + contentData.format + ' in ol.format not found.');
                } else {
                  //no contentData, maybe a link
                }
              }
            } else {
              // normal, not overpass layer
              self.drawLayer(itemUid);
              return;
            }
          }
        }

        // add vector layer group
        layerGroup = new ol.layer.Group({
          layers: layers
        });
        this.arrLayers[itemUid].vectorLayer = layerGroup;
        self.mapController.map.addLayer(layerGroup);
        //self.combine(self);
      } else if (this.arrLayers[itemUid].async_content == 1) {
        styleForCluster = function styleForCluster(feature, resolution) {
          var styleId, style, iconOffset, radius, fillcolor, fontcolor;
          if (feature && feature.get('features')) {
            if (styleId = feature.get('features')[0].get('locationStyle')) {
              if (self.proxy.locationStyleController.arrLocStyles[styleId] && self.proxy.locationStyleController.arrLocStyles[styleId].style) {
                style = self.proxy.locationStyleController.arrLocStyles[styleId].style(feature.get('features')[0], resolution);
              }
            }
            if (!style) {
              style = [];
            }
            if (feature.get('features').length > 1) {
              // calculate bubble-offset
              iconOffset = [0, 0];
              if (style[0]) {
                if (typeof style[0].getImage().getRadius === "function") {
                  radius = parseInt(style[0].getImage().getRadius(), 10);
                  if (radius) {
                    iconOffset = [0, radius];
                  }
                } else if (typeof style[0].getImage().getAnchor === "function") {
                  iconOffset = style[0].getImage().getAnchor() || [0, 0];
                }
              }

              fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity('4975A8', {
                unit: '%',
                value: 70
              });

              if (contentData.cluster_fillcolor) {
                fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fillcolor, {
                  unit: '%',
                  value: 70
                });
              }
              if (feature.get('features')[0].get('cluster_fillcolor')) {
                fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(feature.get('features')[0].get('cluster_fillcolor'), {
                  unit: '%',
                  value: 70
                });
              }
              fontcolor = '#FFFFFF';
              if (feature.get('features')[0].get('cluster_fontcolor')) {
                fontcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(feature.get('features')[0].get('cluster_fontcolor'), {
                  unit: '%',
                  value: 100
                });
              }

              style.push(new ol.style.Style({
                text: new ol.style.Text({
                  text: "●",
                  font: "60px sans-serif",
                  offsetX: -1 * iconOffset[0],
                  offsetY: -1 * iconOffset[1],
                  fill: new ol.style.Fill({
                    color: fillcolor
                  })
                })
              }));
              style.push(new ol.style.Style({
                text: new ol.style.Text({
                  text: feature.get('features').length.toString(),
                  offsetX: -1 * iconOffset[0],
                  offsetY: -1 * iconOffset[1] + 3,
                  fill: new ol.style.Fill({
                    color: fontcolor
                  })
                })
              }));
            }
          }

          if (style) {
            return style;
          }
        };
        requestVectorSource = new ol.source.Vector({
          loader: function loader(extent, resolution, projection) {
            var boundingArray, strBoundingBox, url;
            self.mapController.spinner.show();
            boundingArray = ol.proj.transformExtent(extent, projection, 'EPSG:4326');
            strBoundingBox = boundingArray[0] + ',' + boundingArray[1] + ';' + boundingArray[2] + ',' + boundingArray[3];
            if (self.layerRequests === undefined) {
              self.layerRequests = {};
            }
            if (self.layerRequests['layerDataRequest' + itemUid] !== undefined) {
              self.layerRequests['layerDataRequest' + itemUid].abort();
            }
            if (!self.proxy.locationStyleController.arrLocStyles[self.arrLayers[itemUid].locstyle]) {
              self.proxy.locationStyleController.loadLocationStyles([self.arrLayers[itemUid].locstyle], { done: function done() {} });
            }

            self.layerRequests['layerDataRequest' + itemUid] = jQuery.ajax({
              url: self.proxy.api_layercontentdata_url + '/' + self.arrLayers[itemUid].id + '/' + strBoundingBox
            }).done(function (data) {
              if (data.length > 0 && !contentFeatures) {
                contentFeatures = [];
              }
              var layer = self.arrLayers[itemUid];
              loopData: for (var _i2 = 0; _i2 < data.length; _i2++) {
                contentData = data[_i2];
                for (var _j = 0; _j < contentFeatures.length; _j++) {
                  if (contentData.id === contentFeatures[_j].id) continue loopData;
                }
                var resultCoordinate = ol.proj.transform([parseFloat(contentData['geox']), parseFloat(contentData['geoy'])], 'EPSG:4326', 'EPSG:3857');
                var point = new ol.geom.Point(resultCoordinate);
                contentFeature = new ol.Feature(point);
                contentFeature.setId(contentData.id);
                contentFeature.set('cluster_zoom', layer.cluster.zoom);
                contentFeature.set('cluster_popup', layer.cluster.popup);
                contentFeature.set('cluster_fillcolor', layer.cluster.fillcolor);
                contentFeature.set('cluster_fontcolor', layer.cluster.fontcolor);
                contentFeature.set('loc_linkurl', layer.loc_linkurl);
                contentFeature.set('hover_location', layer.hover_location);
                contentFeature.set('hover_style', layer.hover_style);
                var popup = contentData['popup'] ? contentData['popup'] : $.extend({}, layer.popup);
                if (popup && popup.content && popup.content.search && popup.content.search('itemId')) {
                  popup.content = popup.content.replace('itemId', contentData['id']);
                }
                if (contentData['label']) {
                  contentFeature.set('label', contentData['label']);
                }
                if (contentData['tooltip']) {
                  contentFeature.set('tooltip', contentData['tooltip']);
                }
                contentFeature.set('popup', popup);
                contentFeature.set('zoom_onclick', layer.zoom_onclick);
                contentFeature.set('tid', contentData['id']);
                var locstyle = contentData['locstyle'] || layer.locstyle;
                contentFeature.set('locationStyle', locstyle);
                if (locstyle && self.proxy.locationStyleController.arrLocStyles[locstyle] && self.proxy.locationStyleController.arrLocStyles[locstyle].style) {
                  contentFeature.setStyle(self.proxy.locationStyleController.arrLocStyles[locstyle].style);
                  contentFeatures.push(contentFeature);
                } else {
                  if (!unstyledFeatures) {
                    unstyledFeatures = [];
                  }
                  if (!missingStyles) {
                    missingStyles = [];
                  }
                  contentFeature.set('styleId', locstyle);
                  unstyledFeatures.push(contentFeature);
                  missingStyles[locstyle] = locstyle;
                }
              }
              if (missingStyles) {
                self.proxy.locationStyleController.loadLocationStyles(missingStyles, { done: function done() {
                    for (i = 0; i < unstyledFeatures.length; i++) {
                      var styleId = unstyledFeatures[i].get('styleId');
                      unstyledFeatures[i].setStyle(self.proxy.locationStyleController.arrLocStyles[styleId].style);
                      requestVectorSource.addFeature(unstyledFeatures[i]);
                    }
                    missingStyles = undefined;
                  } });
              }

              if (data.length > 0) {
                requestVectorSource.addFeatures(contentFeatures);
              }
            }).always(function () {
              self.mapController.spinner.hide();
            });
          },
          strategy: ol.loadingstrategy.bbox
        });

        if (this.arrLayers[itemUid].cluster) {
          var layer = self.arrLayers[itemUid];
          var map = self.mapController.map;
          var currentZoom = map.getView().getZoom();
          var clusterDistance = this.arrLayers[itemUid].cluster.distance || 20;
          if (currentZoom >= layer.cluster.zoom) {
            clusterDistance = 0;
          }

          clusterSource = new ol.source.Cluster({
            distance: clusterDistance,
            //threshold: 2, //minimum element count
            source: requestVectorSource
          });
          vectorLayer = new ol.layer.AnimatedCluster({ name: 'Cluster',
            source: clusterSource,
            // Use a style function for cluster symbolisation
            style: styleForCluster
          });
        } else {
          vectorLayer = new ol.layer.Vector({
            name: 'Layer',
            source: requestVectorSource
          });
        }
        layers = layers || [];
        layers.push(vectorLayer);
        layerGroup = new ol.layer.Group({
          layers: layers
        });
        this.arrLayers[itemUid].vectorLayer = layerGroup;
        self.mapController.map.addLayer(layerGroup);
      } else {
        self.mapController.spinner.show();
        jQuery.ajax({
          dataType: self.mapController.data.jsonp ? "jsonp" : "json",
          url: self.proxy.api_layercontent_url + '/' + self.arrLayers[itemUid].id
        }).done(function (data) {
          var j = void 0,
              newLocationStyles = void 0;

          if (data.length > 0) {
            newLocationStyles = [];

            for (j = 0; j < data.length; j += 1) {

              self.arrLayers[itemUid].content = self.arrLayers[itemUid].content || [];

              self.arrLayers[itemUid].content.push(data[j]);
              newLocationStyles.push(data[j].locationStyle);
            }

            self.proxy.checkLocationStyles({
              done: function done() {
                // @TODO: check this!
                self.loadLayerContent(itemUid);
              }
            });
          }
        }).always(function () {
          self.mapController.spinner.hide();
        });
      }
    } // end of "loadLayerContent()"

  }, {
    key: "hideLayer",
    value: function hideLayer(layerUid, keepLayer) {

      var layer, i, j;

      layer = this.arrLayers[layerUid];
      if (!layer) {
        //console.warn('Cannot hide unknown layer (' + layerUid + ')');
        return false;
      }

      // check if layer is listed as "active"
      // otherwise there is nothing to remove or change
      if (this.proxy.activeLayerIds[layerUid]) {
        // remove layer from map (if it was visible before)
        if (this.proxy.activeLayerIds[layerUid] === 'visible' && layer.vectorLayer) {
          // [info]: do not use "layer.vectorLayer.setVisible(false);"
          //         see "showLayer()" for more information
          this.mapController.map.removeLayer(layer.vectorLayer);
        }
        // only mark as "invisible" if "keepLayer" is "true"
        // this is needed for the zoom-bounds
        if (keepLayer) {
          this.proxy.activeLayerIds[layerUid] = 'invisible';
        } else {
          delete this.proxy.activeLayerIds[layerUid];
        }
      }

      // childs needed to be checked independent from its parents state


      //ToDo loading problem
      if (layer && layer.hasChilds) {
        for (i = 0; i < layer.childs.length; i += 1) {
          this.hideLayer(layer.childs[i].id);
        }
      }
      if (layer.isInactive) {
        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_layer_visibility, layerUid);
        return;
      }
      layer.isInactive = true;

      if (this.layerRequests && typeof this.layerRequests['layer_request_' + layerUid] !== "undefined") {
        if (typeof this.layerRequests['layer_request_' + layerUid] == "number") {
          try {
            window.clearInterval(this.layerRequests['layer_request_' + layerUid]);
            delete this.layerRequests['layer_request_' + layerUid];
          } catch (e) {}
        }
      }
      //this.combineLayers(this);
      this.mapController.map.getView().setCenter([this.mapController.map.getView().getCenter()[0] + 0.001, this.mapController.map.getView().getCenter()[1]]);
      // hooks
      __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_layer_visibility, layerUid);
    } // end of "hideLayer()"

  }, {
    key: "hideChildLayer",
    value: function hideChildLayer(layerUid, childUid) {
      var layer = this.arrLayers[layerUid];
      childUid = childUid.replace(layerUid, '');
      var childLayer = layer.vectorLayer.getLayers().getArray()[childUid];
      childLayer.set('visible', false);
    }
  }, {
    key: "showChildLayer",
    value: function showChildLayer(layerUid, childUid) {
      var layer = this.arrLayers[layerUid];
      childUid = childUid.replace(layerUid, '');
      var childLayer = layer.vectorLayer.getLayers().getArray()[childUid];
      childLayer.set('visible', true);
    }
  }, {
    key: "showLayer",
    value: function showLayer(layerUid) {
      var layer, mapLayers, addLayer, i, j, activeForZoom;

      activeForZoom = this.proxy.checkLayerIsActiveForZoom(layerUid);
      layer = this.arrLayers[layerUid];

      if (activeForZoom) {
        if (this.proxy.activeLayerIds[layerUid] !== 'visible') {
          //if (layer.link_id) {
          //  this.proxy.activeLayerIds[layer.link_id] = 'visible';
          //} else
          if (layer && layer.vectorLayer) {
            // [info]: do not use: "layer.vectorLayer.setVisible(true);"
            //         Always add and remove Layers, so that the last
            //         clicked layer is always ontop of the others.

            // check if layer is really not already on the map
            // to prevent adding the same layer multiple times
            addLayer = true;
            mapLayers = this.mapController.map.getLayers();
            mapLayers.forEach(function (element, index, array) {
              if (element === layer.vectorLayer) {
                addLayer = false;
              }
            });
            if (addLayer) {
              if (layer.vectorLayer.getLayers().getArray()[0] && layer.vectorLayer.getLayers().getArray()[0].popup && layer.vectorLayer.getLayers().getArray()[0].popup.showPopupOnActive) {

                this.proxy.currentPopup.$content.html('');
                this.proxy.currentPopup.$popup.addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].LOADING);
                this.proxy.currentPopup.spinner.show();
                var popupInfos = layer.vectorLayer.getLayers().getArray()[0].popup;
                var features = layer.vectorLayer.getLayers().getArray()[0].getSource().getFeatures();
                var coord = features['0'].getGeometry().getCoordinates();
                if (popupInfos.async === false) {
                  var objPopup = {};
                  objPopup.popup = popupInfos;
                  objPopup.feature = features['0'];
                  objPopup.layer = layer.vectorLayer.getLayers().getArray()[0];
                  // Call the popup hook for plugin specific popup content
                  if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                    __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                  }
                  this.proxy.setPopup(objPopup);
                } else {
                  var self = this;
                  jQuery.ajax({
                    dataType: "json",
                    url: self.api_infowindow_url + '/' + popupInfos.content,
                    done: function done(data) {
                      var popupInfo = {
                        async: popupInfos.async,
                        content: data.content,
                        popup: popupInfos.popup,
                        routing_link: popupInfos.routing_link
                      };

                      var objPopup = {};
                      objPopup.popup = popupInfo;
                      objPopup.feature = features['0'];
                      objPopup.layer = layer;

                      // Call the popup hook for plugin specific popup content
                      if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                      }

                      self.proxy.setPopup(objPopup);
                    }
                  });
                }
              }
              this.mapController.map.addLayer(layer.vectorLayer);
            }
          } else {
            this.loadLayerContent(layerUid);
          }
          this.proxy.activeLayerIds[layerUid] = 'visible';
        } else {
          //if (layer.link_id) {
          //  this.proxy.activeLayerIds[layer.link_id] = 'invisible';
          //} else {
          //this.proxy.activeLayerIds[layerUid] = 'invisible';
          //}
        }
      }

      if (layer && layer.hasChilds && activeForZoom) {
        for (i = 0; i < layer.childs.length; i += 1) {
          this.showLayer(layer.childs[i].id);
        }
      }

      if (layer && activeForZoom) {
        layer.isInactive = false;
      }

      if (typeof this.proxy.requestFunctions['request_' + layerUid] !== "undefined") {

        if (this.layerRequests && typeof this.layerRequests['layer_request_' + layerUid] === "undefined") {
          this.layerRequests['layer_request_' + layerUid] = window.setInterval(this.proxy.requestFunctions['request_' + layerUid].function, this.proxy.requestFunctions['request_' + layerUid].interval);
        }
      }
      //this.combineLayers(this);
      // hooks
      __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_layer_visibility, layerUid);
    } // end of "showLayer()"

  }, {
    key: "drawLayer",
    value: function drawLayer(itemUid) {

      var self, element, elementContent, layers, i, j, missingStyles, unstyledFeatures, features, dataProjection, featureProjection, vectorSource, vectorLayer, vectorStyle, layerGroup;

      self = this;
      element = this.arrLayers[itemUid];

      // if (!element.hide) {

      layers = [];
      if (element.content && element.content.length > 0) {
        for (i = 0; i < element.content.length; i += 1) {

          elementContent = element.content[i];
          if (!elementContent) {
            continue;
          }
          if (typeof ol.format[elementContent.format] === "function") {

            // if (element.content[i].origType === 'single') {
            //   featureProjection = this.mapController.map.getView().getProjection();
            // } else {
            //   featureProjection = undefined;
            // }
            if (elementContent.data.properties && elementContent.data.properties.projection) {
              dataProjection = elementContent.data.properties.projection;
              featureProjection = this.mapController.map.getView().getProjection();
            } else {
              dataProjection = undefined;
            }

            if (elementContent.format === "OSMXML") {
              continue;
            }
            if (elementContent.data.geometry && elementContent.data.geometry.type === "Circle") {
              // draw circle geometries
              features = [];
              var feature = new ol.Feature(new ol.geom.Circle(ol.proj.fromLonLat(elementContent.data.geometry.center), parseFloat(elementContent.data.geometry.radius)));
              feature.set('styleId', elementContent.locationStyle);
              features.push(feature);
            } else {
              // remaining geometries
              features = new ol.format[elementContent.format]({}).readFeatures(elementContent.data, {
                featureProjection: featureProjection,
                dataProjection: dataProjection
              });
            }

            missingStyles = [];
            unstyledFeatures = [];
            for (j = 0; j < features.length; j += 1) {
              // features[j].setId(utils.getUniqueId());
              // features[j].set('projection', this.mapController.map.getView().getProjection());
              // features[j].set('projection', "EPSG:4326");
              features[j].set('hover_location', elementContent.hover_location);
              features[j].set('hover_style', elementContent.hover_style);
              if (features[j].get('styleId')) {
                if (self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')] && self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style) {
                  features[j].setStyle(self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style);
                } else {
                  missingStyles.push(features[j].get('styleId'));
                  unstyledFeatures.push(features[j]);
                }
              } else if (elementContent.locationStyle) {
                // feature has no property styleId, but elementContent has locationstyle
                if (self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle] && self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].style) {
                  //features[j].setStyle(self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].style);
                } else {
                  missingStyles.push(elementContent.locationStyle);
                  unstyledFeatures.push(features[j]);
                  features[j].set('styleId', elementContent.locationStyle);
                }
              }
            }

            vectorStyle = self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle] && self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].style;
            if (self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle] && self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].fnStyleFunction) {

              vectorStyle = Function("feature", "data", "map", self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].fnStyleFunction);
            }
            if (missingStyles.length > 0) {
              this.proxy.locationStyleController.loadLocationStyles(missingStyles, {
                done: function done() {
                  var f, fLayerGroup, fLayers, fVectorLayer, fVectorSource;
                  for (f = 0; f < unstyledFeatures.length; f += 1) {
                    if (self.proxy.locationStyleController.arrLocStyles[unstyledFeatures[f].get('styleId')]) {
                      unstyledFeatures[f].setStyle(self.proxy.locationStyleController.arrLocStyles[unstyledFeatures[f].get('styleId')].style);
                    }
                  }

                  fVectorSource = new ol.source.Vector({
                    features: features,
                    projection: 'EPSG:3857',
                    format: new ol.format.GeoJSON()
                  });

                  fVectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(fVectorSource, vectorStyle);

                  // layers.push(vectorLayer);
                  if (self.arrLayers[itemUid].fVectorLayer) {
                    fLayerGroup = self.arrLayers[itemUid].vectorLayer;
                    fLayers = fLayerGroup.getLayers();

                    if (elementContent.data && elementContent.data.properties) {
                      if (elementContent.data.properties.popup) {
                        fVectorLayer.popup = elementContent.data.properties.popup;
                      }
                      if (elementContent.data.properties.tooltip) {
                        fVectorLayer.tooltip = elementContent.data.properties.tooltip;
                      }
                      if (elementContent.data.properties.label) {
                        fVectorLayer.label = elementContent.data.properties.label;
                      }
                      if (elementContent.data.properties.zoom_onclick) {
                        fVectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                      }
                    }

                    fLayers.push(fVectorLayer);
                    fLayerGroup.setLayers(fLayers);
                  } else {
                    if (elementContent.data && elementContent.data.properties) {
                      if (elementContent.data.properties.popup) {
                        fVectorLayer.popup = elementContent.data.properties.popup;
                      }
                      if (elementContent.data.properties.tooltip) {
                        fVectorLayer.tooltip = elementContent.data.properties.tooltip;
                      }
                      if (elementContent.data.properties.label) {
                        fVectorLayer.label = elementContent.data.properties.label;
                      }
                      if (elementContent.data.properties.zoom_onclick) {
                        fVectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                      }
                    }
                    fLayerGroup = new ol.layer.Group({
                      layers: [fVectorLayer]
                    });
                    self.arrLayers[itemUid].vectorLayer = fLayerGroup;
                    self.mapController.map.addLayer(fLayerGroup);
                  }
                }
              });
            } else {
              if (element.split_geojson) {
                for (var _i3 = 0; _i3 < features.length; _i3++) {
                  vectorSource = new ol.source.Vector({
                    projection: 'EPSG:3857',
                    format: new ol.format.GeoJSON()
                  });
                  vectorSource.addFeature(features[_i3]);
                  vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, vectorStyle);
                  for (var _j2 = 0; _j2 < element.geojson_attributes.split(',').length; _j2++) {
                    vectorLayer.set(element.geojson_attributes.split(',')[_j2], features[_i3].get(element.geojson_attributes.split(',')[_j2]));
                  }
                  layers.push(vectorLayer);
                  if (elementContent.data.properties.popup) {
                    vectorLayer.popup = elementContent.data.properties.popup;
                  }
                  if (elementContent.data.properties.tooltip) {
                    vectorLayer.tooltip = elementContent.data.properties.tooltip;
                  }
                  if (elementContent.data.properties.label) {
                    vectorLayer.label = elementContent.data.properties.label;
                  }
                  if (elementContent.data.properties.zoom_onclick) {
                    vectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                  }
                }
              } else {
                vectorSource = new ol.source.Vector({
                  features: features,
                  projection: 'EPSG:3857',
                  format: new ol.format.GeoJSON()
                });
                vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, vectorStyle);

                if (elementContent.data && elementContent.data.properties) {
                  if (elementContent.data.properties.popup) {
                    vectorLayer.popup = elementContent.data.properties.popup;
                  }
                  if (elementContent.data.properties.tooltip) {
                    vectorLayer.tooltip = elementContent.data.properties.tooltip;
                  }
                  if (elementContent.data.properties.label) {
                    vectorLayer.label = elementContent.data.properties.label;
                  }
                  if (elementContent.data.properties.zoom_onclick) {
                    vectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                  }
                }

                layers.push(vectorLayer);
              }
            }
          } else {
            console.warn('Format type ' + elementContent.format + ' in ol.format not found.');
          }
        }
      }

      layerGroup = new ol.layer.Group({
        layers: layers
      });

      this.arrLayers[itemUid].vectorLayer = layerGroup;
      this.mapController.map.addLayer(layerGroup);
      if (layerGroup.getLayers().getArray()[0] && layerGroup.getLayers().getArray()[0].popup && layerGroup.getLayers().getArray()[0].popup.showPopupOnActive) {
        this.proxy.currentPopup.$content.html('');
        this.proxy.currentPopup.$popup.addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].LOADING);
        this.proxy.currentPopup.spinner.show();
        var popupInfos = layerGroup.getLayers().getArray()[0].popup;
        var layer = layerGroup.getLayers().getArray()[0];
        var coord = features['0'].getGeometry().getCoordinates();
        if (popupInfos.async === false) {
          var objPopup = {};
          objPopup.popup = popupInfos;
          objPopup.feature = features['0'];
          objPopup.layer = layer;
          // Call the popup hook for plugin specific popup content
          if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
            __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
          }
          self.proxy.setPopup(objPopup);
        } else {
          jQuery.ajax({
            dataType: "json",
            url: self.api_infowindow_url + '/' + popupInfos.content,
            done: function done(data) {
              var popupInfo = {
                async: popupInfos.async,
                content: data.content,
                popup: popupInfos.popup,
                routing_link: popupInfos.routing_link
              };

              var objPopup = {};
              objPopup.popup = popupInfo;
              objPopup.feature = features['0'];
              objPopup.layer = layer;

              // Call the popup hook for plugin specific popup content
              if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
              }

              self.proxy.setPopup(objPopup);
            }
          });
        }
      }

      //hooks
      // }
    } // end of "drawLayer()"

  }, {
    key: "drawLayerInitial",
    value: function drawLayerInitial() {
      var layerId, layer;

      for (layerId in this.proxy.activeLayerIds) {
        if (this.proxy.activeLayerIds.hasOwnProperty(layerId)) {
          this.showLayer(layerId);
        }
      }
      for (var l in this.arrLayers) {
        if (this.arrLayers.hasOwnProperty(l)) {
          layer = this.arrLayers[l];
          if (layer.hide === "1") {
            this.hideLayer(layer.id);
          }
        }
      }
    } // end of "drawLayerInitial()"

  }]);

  return C4gLayerController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-layer.js":
/*!******************************************!*\
  !*** ./Resources/public/js/c4g-layer.js ***!
  \******************************************/
/*! exports provided: C4gLayer */
/*! exports used: C4gLayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLayer; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var C4gLayer = function C4gLayer(layerArr) {
  _classCallCheck(this, C4gLayer);

  this.id = layerArr['id'];
  this.pid = layerArr['pid'];
  this.async_content = layerArr['async_content'];
  this.content = layerArr['content'];
  this.cssClass = layerArr['cssClass'];
  this.hide = layerArr['hide'];
  this.hide_child = layerArr['hide_child'];
  this.type = layerArr['type'];
  this.cluster = layerArr['cluster'];
  this.zoom = layerArr['zoom'];
  this.zoom_locations = layerArr['zoom_locations'];
  this.display = layerArr['display'];
  this.hasChilds = layerArr['hasChilds'];
  this.childs = layerArr['childs'];
  this.childsCount = layerArr['childsCount'];
  this.renderSpecial = layerArr['renderSpecial'];
  this.editable = true;
  this.type = layerArr['type'];
  this.locstyle = layerArr['locstyle'];
  this.name = layerArr['name'];
  this.tabId = layerArr['tabId'];
  this.split_geojson = layerArr['split_geojson'];
  this.geojson_attributes = layerArr['geojson_attributes'];
  this.geojson_zoom = layerArr['geojson_zoom'];
  this.layername = layerArr['layername'];
  this.visibleChilds = false;
  this.vectorLayer = null;
  this.hideWhenInTab = layerArr['hide_when_in_tab'];
  this.noFilter = layerArr['noFilter'];

  if (layerArr.projectId) {
    this.projectId = layerArr.projectId;
  }
  if (layerArr.popup) {
    this.popup = layerArr.popup;
  }
  this.awesomeicon = layerArr['awesomeicon'];
};

/***/ }),

/***/ "./Resources/public/js/c4g-locationstyle-controller.js":
/*!*************************************************************!*\
  !*** ./Resources/public/js/c4g-locationstyle-controller.js ***!
  \*************************************************************/
/*! exports provided: C4gLocationStyleController */
/*! exports used: C4gLocationStyleController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLocationStyleController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_locationstyle__ = __webpack_require__(/*! ./c4g-locationstyle */ "./Resources/public/js/c4g-locationstyle.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var C4gLocationStyleController = function () {
    function C4gLocationStyleController(proxy) {
        _classCallCheck(this, C4gLocationStyleController);

        this.proxy = proxy;
        this.mapController = proxy.options.mapController;
        this.arrLocStyles = {};
    }

    _createClass(C4gLocationStyleController, [{
        key: "loadLocationStyles",
        value: function loadLocationStyles(arrIds, opt_options) {
            var options = void 0,
                complete = {},
                success = {},
                self = this,
                count = 1,
                makeAjax = void 0;

            if (opt_options && (typeof opt_options === "undefined" ? "undefined" : _typeof(opt_options)) === "object") {
                options = opt_options;
            } else {
                options = {};
            }

            // this.proxy.options.mapController.spinner.show();

            makeAjax = function makeAjax(styleIds, index) {
                if (index) {
                    complete[index] = false;
                    success[index] = false;
                }
                // get locationstyles over API
                jQuery.ajax({
                    dataType: self.proxy.options.mapController.data.jsonp ? "jsonp" : "json",
                    url: self.proxy.api_locstyle_url,
                    data: {
                        ids: styleIds
                    }
                }).done(function (data) {
                    var i = void 0,
                        styleData = void 0,
                        successful = true;

                    if (data.length > 0) {
                        for (i = 0; i < data.length; i += 1) {
                            styleData = data[i];
                            self.arrLocStyles[styleData.id] = new __WEBPACK_IMPORTED_MODULE_0__c4g_locationstyle__["a" /* C4gLocationStyle */](styleData, self);
                        }
                    }
                    if (index) {
                        success[index] = true;
                        for (var key in success) {
                            if (success.hasOwnProperty(key)) {
                                if (!success[key]) {
                                    successful = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (options.done && typeof options.done === "function" && (index ? successful : true)) {
                        options.done();
                    }
                }).always(function (jXhr, strStatus) {
                    var completed = true;

                    if (index) {
                        complete[index] = true;
                        for (var key in complete) {
                            if (complete.hasOwnProperty(key)) {
                                if (!complete[key]) {
                                    completed = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (options.always && typeof options.always === "function" && (index ? completed : true)) {
                        options.always();
                    }
                    if (!$(self.proxy.options.mapController.spinner.element).hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
                        self.proxy.options.mapController.spinner.hide();
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    console.warn(errorThrown);
                });
            };

            // split arrIds if it's too long
            if (arrIds.length > 100) {
                var n = 100;
                while (arrIds.length > 0) {
                    makeAjax(arrIds.splice(0, n), count);
                    count++;
                }
            } else {
                makeAjax(arrIds);
            }
            //});
        } // end of "loadLocationStyles()"

    }]);

    return C4gLocationStyleController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-locationstyle.js":
/*!**************************************************!*\
  !*** ./Resources/public/js/c4g-locationstyle.js ***!
  \**************************************************/
/*! exports provided: C4gLocationStyle */
/*! exports used: C4gLocationStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLocationStyle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var C4gLocationStyle = function () {
    function C4gLocationStyle(locStyleArr, controller) {
        _classCallCheck(this, C4gLocationStyle);

        this.id = locStyleArr['id'];
        this.style = this.getStyleFunction(locStyleArr);
        this.editor = this.getStyleEditorConfig(locStyleArr);
        this.name = locStyleArr['name'];
        this.tooltip = locStyleArr['tooltip'];
        this.label = locStyleArr['label'];
        this.minzoom = locStyleArr['minzoom'];
        this.maxzoom = locStyleArr['maxzoom'];
        this.fnStyleFunction = locStyleArr['style_function_js'];
        this.controller = controller;
        this.locStyleArr = locStyleArr;
    }

    _createClass(C4gLocationStyle, [{
        key: 'getStyleFunction',
        value: function getStyleFunction(styleData) {
            var self, styleFunction, imageStyle, strokeStyle, fillStyle, textStyle, textStyleOutline, backgroundFill, backgroundStroke;

            self = this;

            // general
            strokeStyle = new ol.style.Stroke({
                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.strokecolor, styleData.strokeopacity),
                width: parseInt(styleData.strokewidth.value, 10)
            });
            fillStyle = new ol.style.Fill({
                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.fillcolor, styleData.fillopacity)
            });

            // image
            switch (styleData.styletype) {
                case 'square':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 4,
                        radius: styleData.radius.value || 10,
                        angle: Math.PI / 4
                    });
                    break;
                case 'star':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        radius1: styleData.radius.value || 10,
                        radius2: styleData.radius.value ? Math.floor(styleData.radius.value * 0.5) : 4,
                        points: 5,
                        angle: 0
                    });
                    break;
                case 'x':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 4,
                        radius: styleData.radius.value || 10,
                        radius2: 0,
                        angle: Math.PI / 4
                    });
                    break;
                case 'cross':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 4,
                        radius: styleData.radius.value || 10,
                        radius2: 0,
                        angle: 0
                    });
                    break;
                case 'triangle':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 3,
                        radius: styleData.radius.value || 10,
                        rotation: Math.PI / 4,
                        angle: 0
                    });
                    break;
                case 'ol_icon': // fallthrough
                case 'cust_icon':
                    if (styleData.icon_src) {
                        imageStyle = new ol.style.Icon({
                            offset: [styleData.icon_offset[0], styleData.icon_offset[1]],
                            opacity: parseFloat(styleData.icon_opacity.value, 10) / 100,
                            src: styleData.icon_src,
                            size: [parseInt(styleData.icon_size[0], 10), parseInt(styleData.icon_size[1], 10)],
                            scale: parseFloat(styleData.icon_scale, 10)
                        });
                    }
                    break;
                case 'cust_icon_svg':
                    if (styleData.svgSrc && styleData.icon_scale && styleData.icon_size) {
                        var canvas = document.createElement('canvas');
                        var ctx = canvas.getContext("2d");
                        var width = styleData.icon_size[0] * styleData.icon_scale;
                        var height = styleData.icon_size[1] * styleData.icon_scale;

                        var strokewidth = 0;
                        if (styleData.strokewidth && styleData.strokewidth.value) {
                            strokewidth = styleData.strokewidth.value;
                        }
                        canvas.width = width + 2 * strokewidth;
                        canvas.height = height + 2 * strokewidth;
                        ctx.clearRect(0, 0, canvas.width, canvas.height);

                        if (styleData.fillcolor) {
                            ctx.fillStyle = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.fillcolor, styleData.fillopacity.value);
                            ctx.fillRect(0, 0, canvas.width, canvas.height);
                        }

                        if (strokewidth && styleData.strokecolor) {
                            ctx.strokeStyle = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.strokecolor, styleData.strokeopacity.value);
                            ctx.lineWidth = styleData.strokewidth.value;
                            ctx.strokeRect(0, 0, canvas.width, canvas.height);
                            ctx.translate(0.5, 0.5);
                        }

                        // if (styleData.icon_opacity.value && (styleData.icon_opacity.value > 0)) {
                        //     ctx.globalAlpha = (styleData.icon_opacity.value / 100);
                        // }

                        var img = new Image();
                        img.src = styleData.svgSrc;
                        img.zIndex = 100; //Test

                        img.onload = function () {
                            ctx.drawImage(img, strokewidth, strokewidth, width, height);
                        };

                        imageStyle = new ol.style.Icon({
                            img: canvas,
                            imgSize: [canvas.width, canvas.height] /*,
                                                                   opacity: (styleData.icon_opacity.value / 100)*/
                        });
                    }

                    break;
                case 'photo':
                    imageStyle = new ol.style.Photo({
                        kind: styleData.photoKind,
                        crop: true,
                        opacity: parseFloat(styleData.icon_opacity.value, 10) / 100,
                        radius: parseFloat(styleData.radius.value, 10),
                        shadow: true,
                        stroke: strokeStyle,
                        src: styleData.icon_src
                    });
                    break;
                case 'point':
                    imageStyle = new ol.style.Circle({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        radius: styleData.radius.value || 7
                    });
                    break;
                default:
                    imageStyle = new ol.style.Circle({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        radius: styleData.radius.value || 7
                    });
            }

            // build function
            styleFunction = function styleFunction(feature, projection, getId) {
                var stylesArray, label, arrowSize, arrowSizeUnit, segmentLength, arrows_minzoom, start_pixel, end_pixel;

                if (getId) {
                    return styleData.id;
                }

                // check if this is a feature.styleFunction
                if (!(feature instanceof ol.Feature)) {
                    projection = feature;
                    feature = this;
                }

                stylesArray = [];

                if (feature && typeof feature.get === 'function' && feature.get('label')) {
                    label = feature.get('label');
                } else if (styleData.label) {
                    label = styleData.label;
                } else {
                    label = false;
                }
                var defaultColor = self.controller.mapController.data.default_label_color;
                // label
                if (label) {
                    if (styleData.label_outl_color && styleData.label_outl_width.value) {
                        textStyleOutline = new ol.style.Stroke({
                            color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.label_outl_color || defaultColor, {
                                unit: '%',
                                value: 100
                            }),
                            width: parseInt(styleData.label_outl_width.value, 10)
                        });
                        if (styleData.label_outl_box === "1") {
                            backgroundFill = new ol.style.Fill({
                                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.label_outl_color || defaultColor, {
                                    unit: '%',
                                    value: 100
                                })
                            });
                        }
                    }
                    if (!styleData.label_offset) {
                        styleData.label_offset = [0, 0, "px"];
                    }
                    if (styleData.label_outl_box === "1") {
                        textStyle = new ol.style.Text({
                            text: label,
                            font: (styleData.font_weight || 'normal') + ' ' + (styleData.font_style || 'normal') + ' ' + (styleData.font_size || '13') + 'px ' + (styleData.font_family || 'sans-serif'),
                            // scale: parseInt(styleData.font_size || 0, 10) || undefined,
                            offsetX: parseInt(styleData.label_offset[0] || 0, 10),
                            offsetY: parseInt(styleData.label_offset[1] || 0, 10),
                            textAlign: styleData.label_align_hor,
                            textBaseline: styleData.label_align_ver,
                            fill: new ol.style.Fill({
                                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.font_color || defaultColor, styleData.font_opacity)
                            }),
                            backgroundFill: backgroundFill,
                            backgroundStroke: textStyleOutline
                        });
                    } else {
                        textStyle = new ol.style.Text({
                            text: label,
                            font: (styleData.font_weight || 'normal') + ' ' + (styleData.font_style || 'normal') + ' ' + (styleData.font_size || '13') + 'px ' + (styleData.font_family || 'sans-serif'),
                            // scale: parseInt(styleData.font_size || 0, 10) || undefined,
                            offsetX: parseInt(styleData.label_offset[0] || 0, 10),
                            offsetY: parseInt(styleData.label_offset[1] || 0, 10),
                            textAlign: styleData.label_align_hor,
                            textBaseline: styleData.label_align_ver,
                            fill: new ol.style.Fill({
                                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.font_color || defaultColor, styleData.font_opacity)
                            }),
                            stroke: textStyleOutline
                        });
                    }
                }

                // create style-object
                // we need this check because textStyle is a var accessible from closure and will be set even if no label is set
                if (label) {
                    var zIndex = void 0;
                    if (feature && feature.get && typeof feature.get === "function" && feature.get('zIndex')) {
                        zIndex = feature.get('zIndex');
                    }
                    stylesArray.push(new ol.style.Style({
                        image: imageStyle,
                        text: textStyle,
                        stroke: strokeStyle,
                        fill: fillStyle,
                        zIndex: zIndex
                    }));
                } else {
                    stylesArray.push(new ol.style.Style({
                        image: imageStyle,
                        stroke: strokeStyle,
                        fill: fillStyle
                    }));
                }

                // add line-arrows
                if (styleData.line_arrows && feature && typeof feature.getGeometry === 'function' && !(feature.getGeometry() instanceof ol.geom.Point) && typeof feature.getGeometry().forEachSegment === 'function') {
                    arrowSize = styleData.line_arrows_radius ? parseInt(styleData.line_arrows_radius.value, 10) * 2 : 0;
                    arrowSizeUnit = arrowSize + styleData.line_arrows_radius.unit;
                    feature.getGeometry().forEachSegment(function (start, end) {
                        //if minzoom is 0 (unlimited), hide arrows if they are bigger than the segment
                        arrows_minzoom = parseInt(styleData.line_arrows_minzoom, 10);
                        start_pixel = self.controller.mapController.map.getPixelFromCoordinate(start);
                        end_pixel = self.controller.mapController.map.getPixelFromCoordinate(end);
                        // euclid-distance between start and end
                        segmentLength = Math.sqrt(Math.pow(end_pixel[1] - start_pixel[1], 2) + Math.pow(end_pixel[0] - start_pixel[0], 2));

                        if (arrows_minzoom < 0 && arrowSize + parseInt(styleData.strokewidth.value, 10) < segmentLength || arrows_minzoom >= 0 && self.controller.mapController.map.getView().getZoom() >= arrows_minzoom) {
                            // forward arrows
                            stylesArray.push(new ol.style.Style({
                                geometry: new ol.geom.Point(end),
                                text: new ol.style.Text({
                                    text: "ᐳ",
                                    font: arrowSizeUnit + " sans-serif",
                                    offsetX: 0,
                                    offsetY: 1,
                                    fill: fillStyle,
                                    stroke: strokeStyle,
                                    textAlign: 'right',
                                    rotateWithView: true,
                                    rotation: -Math.atan2(end[1] - start[1], end[0] - start[0])
                                })
                            }));
                            // backward arrows (if wanted)
                            if (styleData.line_arrows_back) {
                                stylesArray.push(new ol.style.Style({
                                    geometry: new ol.geom.Point(start),
                                    text: new ol.style.Text({
                                        text: "ᐳ",
                                        font: arrowSizeUnit + " sans-serif",
                                        offsetX: 0,
                                        offsetY: -1,
                                        fill: fillStyle,
                                        stroke: strokeStyle,
                                        textAlign: 'right',
                                        rotateWithView: true,
                                        rotation: -Math.atan2(start[1] - end[1], start[0] - end[0])
                                    })
                                }));
                            }
                        }
                    });
                }

                return stylesArray;
            };

            return styleFunction;
        } // end of "getStyleFunction()"


    }, {
        key: 'getStyleEditorConfig',
        value: function getStyleEditorConfig(styleData) {
            var editorConfig;

            // create editor-config
            editorConfig = {};
            editorConfig.collect = styleData.editor_collect || undefined;
            editorConfig.iconSrc = styleData.editor_icon || undefined;
            editorConfig.vars = styleData.editor_vars || undefined;

            editorConfig.sort = styleData.editor_sort || false;
            if (editorConfig.sort) {
                editorConfig.sort = parseInt(editorConfig.sort, 10) || false;
            }

            return editorConfig;
        } // end of "getStyleEditorConfig()"

    }]);

    return C4gLocationStyle;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-maps-config.js":
/*!************************************************!*\
  !*** ./Resources/public/js/c4g-maps-config.js ***!
  \************************************************/
/*! exports provided: config */
/*! exports used: config */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return config; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.config = this.c4g.maps.config || {};

(function ($, c4g) {
  'use strict';

  /**
   * osmSourceDefinitions
   */

  c4g.maps.config.osm = $.extend(c4g.maps.config.osm, {

    CycleMap: {
      attributions: 'Style by <a target="_blank" href="http://www.opencyclemap.org/">OpenCycleMap</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.opencyclemap.org/cycle/{z}/{x}/{y}.png'
    },

    German: {
      attributions: 'Style by <a target="_blank" href="http://www.openstreetmap.de/germanstyle.html">openstreetmap.de</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png'
    },

    GermanTransport: {
      attributions: 'Style by <a target="_blank" href="http://www.memomaps.de">Memomaps</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 19,
      url: 'https://tile.memomaps.de/tilegen/{z}/{x}/{y}.png'
    },

    LandscapeMap: {
      attributions: 'Style by <a target="_blank" href="http://www.opencyclemap.org/">OpenCycleMap</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.opencyclemap.org/landscape/{z}/{x}/{y}.png'
    },

    Mapnik: {
      attributions: ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous'
    },

    NONE: '' // last line
  }); // end of "osmSourceDefinitions" ---

  /**
   * stamenSourceDefinitions
   */
  c4g.maps.config.stamen = $.extend(c4g.maps.config.stamen, {

    Toner: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'toner',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    TonerLabels: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'toner-labels',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    TonerLines: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'toner-lines',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    Terrain: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'terrain',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    Watercolor: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'watercolor',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    NONE: ''
  });

  /**
   * mapquestSourceDefinitions
   */
  c4g.maps.config.mapquest = $.extend(c4g.maps.config.mapquest, {

    MapQuestOpen: {
      layer: 'osm'
    },

    MapQuestHyb: {
      layer: 'hyb'
    },

    MapQuestSat: {
      layer: 'sat'
    },

    NONE: ''
  });

  /**
   * mapboxSourceDefinitions
   */
  c4g.maps.config.mapbox = {

    Mapbox: {
      tileSize: [512, 512],
      attributions: '© <a target="_blank" href="https://www.mapbox.com/about/maps/">Mapbox</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    },

    MapboxClassic: {
      attributions: '© <a target="_blank" href="https://www.mapbox.com/about/maps/">Mapbox</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }
  };

  /**
   * klokanSourceDefinitions
   */
  //ToDo not ready
  c4g.maps.config.klokan = {

    OpenMapTiles: {
      format: new ol.format.MVT(),
      tileGrid: ol.tilegrid.createXYZ({ tileSize: 512, maxZoom: 22 }), //ToDo maxZoom from configuration
      tilePixelRatio: 8,
      attributions: '© <a target="_blank" href="https://openmaptiles.org/">OpenMapTiles</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    },

    TileHosting: {
      format: new ol.format.MVT(),
      tileGrid: ol.tilegrid.createXYZ({ tileSize: 512, maxZoom: 22 }), //ToDo maxZoom from configuration
      tilePixelRatio: 8,
      attributions: '© <a target="_blank" href="https://tilehosting.com/">TileHosting</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }
  };

  /**
   * hereSourceDefinitions
   */
  c4g.maps.config.here = {

    HERE: {
      tileSize: [512, 512],
      attributions: 'Map Tiles © <a target="_blank" href="https://developer.here.com">HERE</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }

  };

  /**
   * thunderforestSourceDefinitions
   */
  c4g.maps.config.thunderforest = {

    Thunderforest: {
      tileSize: [512, 512],
      attributions: 'Map Tiles © <a target="_blank" href="https://www.thunderforest.com/">Thunderforest</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 19,
      crossOrigin: 'anonymous'
    }

  };
})(jQuery, this.c4g);

var config = this.c4g.maps.config;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-constant-i18n-de.js":
/*!**********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-constant-i18n-de.js ***!
  \**********************************************************/
/*! exports provided: langConstantsGerman */
/*! exports used: langConstantsGerman */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return langConstantsGerman; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.constant = this.c4g.maps.constant || {};

(function ($, c4g) {
  'use strict';

  /**
   * Language constants (en)
   */

  c4g.maps.constant.i18n = $.extend(c4g.maps.constant.i18n, {

    LANG: 'de',

    NAME: 'Name',
    HIDE: 'Zuklappen',
    CLOSE: 'Schließen',
    POINT: 'POI',
    FREEHAND: 'Freihand',
    LINE: 'Linie',
    POLYGON: 'Fläche',
    CIRCLE: 'Radius',
    PERIMETER: 'Umfang',
    LENGTH: 'Länge',
    SURFACEAREA: 'Flächeninhalt',
    RADIUS: 'Radius',
    REFRESH: 'Aktualisieren',
    COPY_TO_CLIPBOARD: 'In Zwischenablage kopieren',

    CTRL_ZOOM_IN: 'Vergrößern',
    CTRL_ZOOM_OUT: 'Verkleinern',
    CTRL_ZOOM_EXT: 'Maximal verkleinern',
    CTRL_ZOOM_HOME: 'Zur ursprünglichen Position',
    CTRL_ZOOM_POS: 'Zum aktuellen Standort',
    CTRL_ZOOM_SLIDER: 'Zoom Slider',
    CTRL_RESET_ROTATION: 'Rotation (touch, alt+mouse) zurücksetzen',
    CTRL_PORTSIDE: 'Portside ein-/ausblenden',
    CTRL_ROUTER: 'Router ein-/ausblenden',
    CTRL_EDITOR: 'Editor ein-/ausblenden',
    CTRL_MEASURETOOLS: 'Messwerkzeuge ein-/ausblenden',
    CTRL_INFOPAGE: 'Infoseite ein-/ausblenden',
    CTRL_ADDITIONALPANEL: 'Panel ein-/ausblenden',
    CTRL_ACCOUNT: 'Account ein-/ausblenden',
    CTRL_ZOOMLEVEL: 'Zoom',
    CTRL_MOUSECOORDS: 'Lon/Lat',
    CTRL_GEOSEARCH: 'Suche ein-/ausblenden',
    CTRL_START_SEARCH: 'Suche starten',
    CTRL_OVERVIEWMAP: 'Übersichtskarte ein-/ausblenden',
    CTRL_GEOBOOKMARKS: 'Favoriten verwalten',
    CTRL_SIDEBOARD: 'Sideboard ein-/ausblenden',
    CTRL_STARBOARD: 'Starboard ein-/ausblenden',
    CTRL_ATTRIBUTION: 'Attribution anzeigen',
    CTRL_GRID: 'Gitter ein-/ausblenden',
    CTRL_PERMALINK: 'Permalink generieren',
    CTRL_FULLSCREEN: 'Vollbildmodus ein-/ausschalten',
    CTRL_PRINT: 'Karte exportieren',

    EDITOR: 'Editor',
    EDITOR_ENABLE_INSTANT_MEASURE: 'Messen während des Zeichnens',
    EDITOR_ENABLE_FREEHAND_DRAW: 'Freihand zeichnen',
    EDITOR_FEATURE_APPLY: 'Editieren beenden',
    EDITOR_FEATURE_DELETE: 'Element löschen',
    EDITOR_FEATURE_MODIFY: 'Element editieren / verschieben',
    EDITOR_SELECT_INFO: 'Zur Auswahl ein Element auf der Karte anklicken.',
    EDITOR_SELECT_INFO_ADDITIONAL: '[Strg] + [Klick] für Mehrfachauswahl <br>[Shift] halten für Auswahlbox',
    EDITOR_VIEW_TRIGGER_SELECT: 'Auswahl Modus',
    EDITOR_VIEW_TRIGGER_DRAW_POINT: 'Kartenelemente',
    EDITOR_VIEW_TRIGGER_DRAW_FREEHAND: 'Freihandwerkzeuge',
    EDITOR_VIEW_TRIGGER_DRAW_LINESTRING: 'Streckenwerkzeuge',
    EDITOR_VIEW_TRIGGER_DRAW_POLYGON: 'Flächenwerkzeuge',
    EDITOR_VIEW_TRIGGER_DRAW_CIRCLE: 'Kreiswerkzeuge',

    POPUP_ROUTE_FROM: 'Route von hier',
    POPUP_ROUTE_TO: 'Route hierhin',

    STARBOARD: 'Starboard',
    STARBOARD_BASELAYER: 'Basiskarten',
    STARBOARD_LAYER: 'Ebenen',
    STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER: 'Basiskarten',
    STARBOARD_VIEW_TRIGGER_LAYERSWITCHER: 'Kartenelemente',

    SIDEBOARD: 'Sideboard',

    MEASURETOOLS: 'Messwerkzeuge',
    MEASURETOOLS_INFO: 'Wählen Sie weiter unten einen Messtyp aus und starten Sie die Messung durch das Klicken auf der Karte.',
    MEASURETOOLS_INFO_ADDITIONAL: '(Einzelne Messungen können mit einem Doppelklick beendet werden.)',
    MEASURETOOLS_VIEW_TRIGGER_SELECT: 'Auswahl Modus',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_LINESTRING: 'Strecken messen',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_POLYGON: 'Flächen messen',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_CIRCLE: 'Radius messen',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_FREEHAND: 'Freihand messen',

    GEOBOOKMARKS_PLACEHOLDER: 'Neue Bezeichnung',

    INFOPAGE: 'Informationen',
    ADDITIONALPANEL: 'Panel',
    ADDITIONALPANEL_VIEW_TRIGGER: 'Panel anzeigen',
    ACCOUNT: 'Account',
    ACCOUNT_VIEW_TRIGGER: 'Account anzeigen',

    SEARCH_NOT_FOUND: 'Die Lokation konnte nicht gefunden werden. Bitte versuchen Sie eine andere Eingabe.',

    NONE: '' // last line
  }); // end of "language constants" ---
})(jQuery, this.c4g);

var langConstantsGerman = this.c4g.maps.constant.i18n;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-constant-i18n-en.js":
/*!**********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-constant-i18n-en.js ***!
  \**********************************************************/
/*! exports provided: langConstantsEnglish */
/*! exports used: langConstantsEnglish */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return langConstantsEnglish; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.constant = this.c4g.maps.constant || {};

(function ($, c4g) {
  'use strict';

  /**
   * Language constants (en)
   */

  c4g.maps.constant.i18n = $.extend(c4g.maps.constant.i18n, {

    LANG: 'en',

    NAME: 'Name',
    HIDE: 'Hide',
    CLOSE: 'Close',
    POINT: 'POI',
    FREEHAND: 'freehand',
    LINE: 'Line',
    POLYGON: 'Area',
    CIRCLE: 'Radius',
    PERIMETER: 'Perimeter',
    LENGTH: 'Length',
    SURFACEAREA: 'Surface area',
    RADIUS: 'Radius',
    REFRESH: 'Refresh',
    COPY_TO_CLIPBOARD: 'Copy to clipboard',

    CTRL_ZOOM_IN: 'Zoom in',
    CTRL_ZOOM_OUT: 'Zoom out',
    CTRL_ZOOM_EXT: 'Fit to extent',
    CTRL_ZOOM_HOME: 'jump to initial position',
    CTRL_ZOOM_POS: 'jump to browser/device position',
    CTRL_ZOOM_SLIDER: 'Zoom slider',
    CTRL_RESET_ROTATION: 'Reset rotation (touch, alt+mouse)',
    CTRL_PORTSIDE: 'Toggle portside',
    CTRL_ROUTER: 'Toggle router',
    CTRL_EDITOR: 'Toggle editor',
    CTRL_MEASURETOOLS: 'Toggle measuretools',
    CTRL_INFOPAGE: 'Toggle infopage',
    CTRL_ADDITIONALPANEL: 'Toggle panel',
    CTRL_ACCOUNT: 'Toggle account',
    CTRL_ZOOMLEVEL: 'Zoom',
    CTRL_MOUSECOORDS: 'Lon/Lat',
    CTRL_GEOSEARCH: 'Toggle geosearch',
    CTRL_START_SEARCH: 'start search',
    CTRL_OVERVIEWMAP: 'Toggle overviewmap',
    CTRL_GEOBOOKMARKS: 'Manage favorites',
    CTRL_SIDEBOARD: 'Toggle sideboard',
    CTRL_STARBOARD: 'Toggle starboard',
    CTRL_ATTRIBUTION: 'Show attribution',
    CTRL_GRID: 'Toggle grid',
    CTRL_PERMALINK: 'Generate Permalink',
    CTRL_FULLSCREEN: 'Toggle fullscreen-mode',
    CTRL_PRINT: 'Export map',

    EDITOR: 'Editor',
    EDITOR_ENABLE_INSTANT_MEASURE: 'Measure while drawing',
    EDITOR_ENABLE_FREEHAND_DRAW: 'Freehand draw',
    EDITOR_FEATURE_APPLY: 'End modification',
    EDITOR_FEATURE_DELETE: 'Delete feature',
    EDITOR_FEATURE_MODIFY: 'Modify feature',
    EDITOR_SELECT_INFO: 'Click an element on the map to select it.',
    EDITOR_SELECT_INFO_ADDITIONAL: '[ctrl] + [click] for multiselect <br>[shift] for boxselect',
    EDITOR_VIEW_TRIGGER_SELECT: 'Select-mode',
    EDITOR_VIEW_TRIGGER_DRAW_POINT: 'Add POIs',
    EDITOR_VIEW_TRIGGER_DRAW_FREEHAND: 'Draw freehand',
    EDITOR_VIEW_TRIGGER_DRAW_LINESTRING: 'Add tracks',
    EDITOR_VIEW_TRIGGER_DRAW_POLYGON: 'Add areas',
    EDITOR_VIEW_TRIGGER_DRAW_CIRCLE: 'Add circles',

    STARBOARD: 'Starboard',
    STARBOARD_BASELAYER: 'Baselayer',
    STARBOARD_LAYER: 'Layer',
    STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER: 'Baselayerswitcher',
    STARBOARD_VIEW_TRIGGER_LAYERSWITCHER: 'Layerswitcher',

    MEASURETOOLS: 'Measuretools',
    MEASURETOOLS_INFO: 'Select a measuretype below and start measuring by clicking on the map.',
    MEASURETOOLS_INFO_ADDITIONAL: '(To stop a measurement, double-click on the map.)',
    MEASURETOOLS_VIEW_TRIGGER_SELECT: 'Select-mode',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_LINESTRING: 'Measure tracks',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_POLYGON: 'Measure areas',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_CIRCLE: 'Measure radius',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_FREEHAND: 'Measure freehand',

    GEOBOOKMARKS_PLACEHOLDER: 'Enter new caption',

    INFOPAGE: 'Infopage',
    INFOPAGE_VIEW_TRIGGER: 'Show informations',

    ADDITIONALPANEL: 'Panel',
    ADDITIONALPANEL_VIEW_TRIGGER: 'Show panel',

    ACCOUNT: 'Account',
    ACCOUNT_VIEW_TRIGGER: 'Show account',

    SEARCH_NOT_FOUND: 'Location not found. Sorry... :(',

    NONE: '' // last line
  }); // end of "language constants" ---
})(jQuery, this.c4g);

var langConstantsEnglish = this.c4g.maps.constant.i18n;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-constant.js":
/*!**************************************************!*\
  !*** ./Resources/public/js/c4g-maps-constant.js ***!
  \**************************************************/
/*! exports provided: cssConstants */
/*! exports used: cssConstants */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cssConstants; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.constant = this.c4g.maps.constant || {};

(function ($, c4g) {
  'use strict';

  /**
   * CSS constants
   */

  c4g.maps.constant.css = $.extend(c4g.maps.constant.css, {

    OPEN: 'c4g-open',
    CLOSE: 'c4g-close',
    CLOSEABLE: 'c4g-closeable',
    ENABLED: 'c4g-enabled',
    DISABLED: 'c4g-disabled',
    HIDE: 'c4g-hide',
    ICON: 'c4g-icon',
    CONTROL: 'c4g-control',
    COPY: 'c4g-copy',
    REFRESH: 'c4g-refresh',
    ACTIVE: 'c4g-active',
    INACTIVE: 'c4g-inactive',
    LOADING: 'c4g-loading',
    ANIMATION_SPIN: 'c4g-animation-spin',
    LARGE: 'c4g-large',
    SMALL: 'c4g-small',
    HORIZONTAL: 'c4g-horizontal',
    VERTICAL: 'c4g-vertical',

    ATTRIBUTION_LOGO: 'c4g-attribution-logo',
    CONTROL_CONTAINER_TL: 'c4g-control-container-top-left',
    CONTROL_CONTAINER_TR: 'c4g-control-container-top-right',
    CONTROL_CONTAINER_BL: 'c4g-control-container-bottom-left',
    CONTROL_CONTAINER_BL_SUB: 'c4g-control-container-bottom-left-sub',
    CONTROL_CONTAINER_BR: 'c4g-control-container-bottom-right',
    EDITOR_DRAW_CONTENT_POINT: 'c4g-draw-content-point',
    EDITOR_DRAW_CONTENT_FREEHAND: 'c4g-draw-content-freehand',
    EDITOR_DRAW_CONTENT_LINESTRING: 'c4g-draw-content-line',
    EDITOR_DRAW_CONTENT_POLYGON: 'c4g-draw-content-polygon',
    EDITOR_DRAW_CONTENT_CIRCLE: 'c4g-draw-content-circle',
    EDITOR_DRAW_CONTENT_PROJECT: 'c4g-draw-content-project',
    EDITOR_DRAW_TRIGGER: 'c4g-draw-trigger',
    EDITOR_CONTENT_SELECT: 'c4g-content-select',
    EDITOR_DRAW_OPTIONS: 'c4g-editor-draw-options',
    EDITOR_FEATURE_APPLY: 'c4g-editor-feature-apply',
    EDITOR_FEATURE_DELETE: 'c4g-editor-feature-delete',
    EDITOR_FEATURE_MODIFY: 'c4g-editor-feature-modify',
    EDITOR_VIEW_TRIGGER_SELECT: 'c4g-editor-view-trigger-select',
    EDITOR_VIEW_TRIGGER_DRAW_POINT: 'c4g-editor-view-trigger-draw-point',
    EDITOR_VIEW_TRIGGER_DRAW_FREEHAND: 'c4g-editor-view-trigger-draw-freehand',
    EDITOR_VIEW_TRIGGER_DRAW_LINESTRING: 'c4g-editor-view-trigger-draw-line',
    EDITOR_VIEW_TRIGGER_DRAW_POLYGON: 'c4g-editor-view-trigger-draw-polygon',
    EDITOR_VIEW_TRIGGER_DRAW_CIRCLE: 'c4g-editor-view-trigger-draw-circle',
    GEOSEARCH: 'c4g-geosearch',
    GEOSEARCH_WRAPPER: 'c4g-geosearch-wrapper',
    GEOSEARCH_TRIGGER: 'c4g-geosearch-trigger',
    GEOSEARCH_START: 'c4g-geosearch-start',
    GRATICULE: 'c4g-graticule',
    MEASURETOOLS_VIEW_TRIGGER_SELECT: 'c4g-measuretools-view-trigger-select',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_LINESTRING: 'c4g-measuretools-view-trigger-draw-line',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_POLYGON: 'c4g-measuretools-view-trigger-draw-polygon',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_CIRCLE: 'c4g-measuretools-view-trigger-draw-circle',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_FREEHAND: 'c4g-measuretools-view-trigger-draw-freehand',
    PRINT: 'c4g-print',
    INFOPAGE_VIEW_TRIGGER: 'c4g-infopage-view-trigger',
    INFOPAGE: 'c4g-infopage',
    ADDITIONALPANEL_VIEW_TRIGGER: 'c4g-additionalpanel-view-trigger',
    ADDITIONALPANEL: 'c4g-additionalpanel',
    ACCOUNT_VIEW_TRIGGER: 'c4g-account-view-trigger',
    ACCOUNT: 'c4g-account',
    OVERVIEWMAP: 'c4g-overviewmap',
    OVERVIEWMAP_WRAPPER: 'c4g-overviewmap-wrapper',
    GEOBOOKMARKS: 'c4g-geobookmarks',
    PERMALINK: 'c4g-permalink',
    PERMALINK_POPUP: 'c4g-permalink-popup',
    POPUP_CLOSE: 'c4g-popup-close',
    POPUP_ROUTE_WRAPPER: 'c4g-popup-route-wrapper',
    POPUP_ROUTE_FROM: 'c4g-popup-route-from',
    POPUP_ROUTE_TO: 'c4g-popup-route-to',
    PORTSIDE: 'c4g-portside',
    PORTSIDE_CONTAINER: 'c4g-portside-container',
    PORTSIDE_CONTROL: 'c4g-portside-control',
    PORTSIDE_WRAPPER: 'c4g-portside-wrapper',
    PORTSIDE_TITLEBAR: 'c4g-portside-titlebar',
    PORTSIDE_TOP_TOOLBAR: 'c4g-portside-top-toolbar',
    PORTSIDE_CONTENT_CONTAINER: 'c4g-portside-content-container',
    PORTSIDE_BOTTOM_TOOLBAR: 'c4g-portside-bottom-toolbar',
    PORTSIDE_STATUSBAR: 'c4g-portside-statusbar',
    PORTSIDE_VIEWTRIGGERBAR: 'c4g-portside-viewtriggerbar',
    PORTSIDE_HEADLINE: 'c4g-portside-headline',
    PORTSIDE_BUTTONBAR: 'c4g-portside-buttonbar',
    PORTSIDE_BUTTON: 'c4g-portside-button',
    PORTSIDE_HIDE: 'c4g-portside-hide',
    PORTSIDE_CLOSE: 'c4g-portside-close',
    SPINNER: 'c4g-spinner',
    STARBOARD: 'c4g-starboard',
    STARBOARD_CONTAINER: 'c4g-starboard-container',
    STARBOARD_CONTROL: 'c4g-starboard-control',
    STARBOARD_WRAPPER: 'c4g-starboard-wrapper',
    STARBOARD_TITLEBAR: 'c4g-starboard-titlebar',
    STARBOARD_CONTENT_CONTAINER: 'c4g-starboard-content-container',
    STARBOARD_BOTTOM_TOOLBAR: 'c4g-starboard-bottom-toolbar',
    STARBOARD_STATUSBAR: 'c4g-starboard-statusbar',
    STARBOARD_VIEWTRIGGERBAR: 'c4g-starboard-viewtriggerbar',
    STARBOARD_HEADLINE: 'c4g-starboard-headline',
    STARBOARD_BUTTONBAR: 'c4g-starboard-buttonbar',
    STARBOARD_BUTTON: 'c4g-starboard-button',
    STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER: 'c4g-starboard-view-trigger-baselayerswitcher',
    STARBOARD_VIEW_TRIGGER_LAYERSWITCHER: 'c4g-starboard-view-trigger-layerswitcher',
    STARBOARD_CLOSE: 'c4g-starboard-close',
    STARBOARD_CONTENT_BASELAYERSWITCHER: 'c4g-content-baselayerswitcher',
    STARBOARD_BASELAYERTREE: 'c4g-baselayertree',
    STARBOARD_LAYERTREE: 'c4g-layertree',
    STARBOARD_CONTENT_LAYERSWITCHER: 'c4g-content-layerswitcher',
    TOOLTIP_POPUP: 'c4g-tooltip-popup',
    ZOOM_LEVEL: 'c4g-zoom-level',

    ROUTER_INPUT_WRAPPER: 'c4g-router-input-wrapper',
    ROUTER_PROFILE_WRAPPER: 'c4g-router-profile-wrapper',
    ROUTER_INPUT_FROM: 'c4g-router-input-from',
    ROUTER_INPUT_TO: 'c4g-router-input-to',
    ROUTER_INPUT_CLEAR: 'c4g-router-input-clear',
    ROUTER_BUTTONBAR: 'c4g-router-buttonbar',
    ROUTER_ATTRIBUTION_WRAPPER: 'c4g-router-attribution-wrapper',
    ROUTER_INSTRUCTIONS_WRAPPER: 'c4g-router-instructions-wrapper',
    ROUTER_INSTRUCTIONS_HEADER: 'c4g-router-instructions-header',

    ROUTER_SWITCH: 'c4g-router-switch',
    ROUTER_OVER: 'c4g-router-over',
    ROUTER_PRINT: 'c4g-router-print',

    ROUTER_PROFILE_CAR: 'c4g-router-profile-car',
    ROUTER_PROFILE_HGV: 'c4g-router-profile-hgv',
    ROUTER_PROFILE_BIKE: 'c4g-router-profile-bike',
    ROUTER_PROFILE_FOOT: 'c4g-router-profile-foot',
    ROUTER_PROFILE_WHEELCHAIR: 'c4g-router-profile-wheelchair',

    ROUTER_INSTRUCTIONS_TABLE: 'c4g-router-instruction-table',
    ROUTER_INSTRUCTIONS_ITEM: 'c4g-router-instruction-item',
    ROUTER_INSTRUCTIONS_ITEM_ODD: 'c4g-router-instruction-item--odd',
    ROUTER_INSTRUCTIONS_ITEM_EVEN: 'c4g-router-instruction-item--even',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION: 'c4g-router-instruction-item_direction',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION_ICON: 'c4g-router-instruction-item_direction-icon',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT: 'c4g-router-instruction-item_text',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION_DISTANCE: 'c4g-router-instruction-item_distance',

    OL_CONTROL: 'ol-control',
    OL_UNSELECTABLE: 'ol-unselectable',

    OL_OVERLAYCONTAINER: 'ol-overlaycontainer',
    OL_OVERLAYCONTAINER_SE: 'ol-overlaycontainer-stopevent',
    OL_VIEWPORT: 'ol-viewport',
    OL_ZOOM: 'ol-zoom',
    OL_ZOOM_IN: 'ol-zoom-in',
    OL_ZOOM_EXT: 'ol-zoom-extent',
    OL_ZOOM_HOME: 'ol-zoom-home',
    OL_ZOOM_POS: 'ol-zoom-position',
    OL_ZOOM_WITH_EXT: 'ol-zoom-with-extent',
    OL_ZOOM_WITH_HOME: 'ol-zoom-with-home',
    OL_ZOOM_WITH_POS: 'ol-zoom-with-position',
    OL_ZOOM_SLIDER: 'ol-zoom-slider',
    OL_ZOOM_WITH_SLIDER: 'ol-zoom-with-slider',

    NONE: '' // last line
  }); // end of "css constants" ---
})(jQuery, this.c4g);

var cssConstants = this.c4g.maps.constant.css;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-geosearch.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-geosearch.js ***!
  \***********************************************************/
/*! exports provided: GeoSearch */
/*! exports used: GeoSearch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GeoSearch; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
    if (mapData.lang === "de") {
        langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
    } else if (mapData.lang === "en") {
        langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
    } else {
        // fallback
        langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
    }
}

(function ($, c4g) {
    'use strict';

    /**
     * @TODO description
     *
     * @constructor
     * @extends  {ol.control.Control}
     *
     * @param    {Object}              opt_options  *optional* control options.
     */

    c4g.maps.control.GeoSearch = function (opt_options) {

        var self, options, element, button, searchWrapper, searchInput, searchButton, resultTrigger, resultWrapper;

        self = this;
        // this.element = element;
        // this.searchWrapper = searchWrapper;
        // this.resultWrapper = resultWrapper;

        options = opt_options || {};

        // default options
        options = $.extend({
            mapController: undefined,
            className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].GEOSEARCH,
            extDiv: false,
            collapsible: true,
            collapsed: true,
            tipLabel: langConstants.CTRL_GEOSEARCH,
            label: '>>',
            collapsedLabel: '(?)',
            attribution: true,
            // customAttribution: '',
            // engineUrl: false,
            searchZoom: 12,
            zoomBounds: false,
            results: false,
            quicksearch: true,
            animate: true,
            markResult: true,
            popup: true,
            caching: 0,
            autopick: false
        }, options);

        // prepare search-configuration
        //
        this.config = {};
        // searchEngineUrl
        // if (typeof options.engineUrl === 'string') {
        //   // if it is a string, then it is (hopefully) a URL, that we can use directly
        //   // @TODO add a URL-check
        //   this.config.url = options.engineUrl;
        // } else {
        //   // if it is none of the above, then use the default URL
        //   this.config.url = 'https://nominatim.openstreetmap.org/search';
        // }
        this.config.url = options.mapController.data.api.geosearch + "/" + options.mapController.data.profile;
        // zoomlevel when centering the found location
        this.config.zoomlevel = options.searchZoom;
        // zoom to bounds instead of zoomlevel when centering the found location
        this.config.zoombounds = options.zoomBounds;
        // quicksearch-option (instantly jump to the first found location)
        this.config.quicksearch = options.quicksearch;
        // animation (animate flight to targeted location)
        this.config.animate = options.animate;
        // highlight the result location
        this.config.markResult = options.markResult;
        this.config.popup = options.popup;

        this.config.autopick = options.autopick;
        this.config.mapController = options.mapController;
        this.config.results = options.results;

        this.config.collapsed = options.collapsed;

        this.config.caching = options.caching;

        // @TODO
        // Attribution

        // check extDiv
        if (options.extDiv && document.getElementById(options.extDiv)) {
            options.extDiv = document.getElementById(options.extDiv);
        } else {
            options.extDiv = false;
        }

        // controlwrapper div
        element = document.createElement('div');
        element.className = options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL;

        if ((options.collapsed && !options.extDiv) & !(this.config.caching && c4g.maps.utils.getValue('geosearch') == '1')) {
            $(element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
        } else {
            $(element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        }

        // wrapper div
        this.searchWrapper = document.createElement('div');
        this.searchWrapper.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].GEOSEARCH_WRAPPER;
        element.appendChild(this.searchWrapper);

        // search-field
        searchInput = document.createElement('input');
        searchInput.type = 'text';
        this.searchWrapper.appendChild(searchInput);

        // @TODO
        // // result-trigger
        // resultTrigger = document.createElement('button');
        // resultTrigger.className = 'RT';
        // searchWrapper.appendChild(resultTrigger);

        // $(resultTrigger).click(function () {
        //   try {
        //     this.blur();
        //   } catch (ignore) {}
        //   self.toggleResults();
        // });

        // // result-wrapper
        // resultWrapper = document.createElement('div');
        // resultWrapper.className = 'RESULTS ' + cssConstants.CLOSE;
        // resultWrapper.innerHTML = 'no results';
        // searchWrapper.appendChild(resultWrapper);
        // this.resultWrapper = resultWrapper;

        // search-button
        searchButton = document.createElement('button');
        searchButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].GEOSEARCH_START;
        searchButton.title = langConstants.CTRL_START_SEARCH;
        this.searchWrapper.appendChild(searchButton);

        $(searchButton).click(function () {
            try {
                this.blur();
            } catch (ignore) {}
            if (searchInput.value) {

                self.findLocation(searchInput.value);
            }
        });

        $(searchInput).keypress(function (e) {
            if (e.which === 13) {
                if (searchInput.value) {

                    self.findLocation(searchInput.value);

                    if (document.getElementById("resultcontainer")) {
                        document.getElementById("resultcontainer").parentNode.removeChild(document.getElementById("resultcontainer"));
                    }
                    if (self.config.results) {

                        var searchResultContainer = document.createElement('ul');
                        searchResultContainer.setAttribute("id", "resultcontainer");
                        if (self.results) {
                            for (var i = 0; i < self.results.length; i++) {
                                var searchResult = document.createElement('li');
                                var searchResultButton = document.createElement('button');
                                searchResultButton.setAttribute("id", i);
                                searchResultButton.setAttribute('class', 'searchResultButton');
                                searchResultButton.addEventListener('click', function () {
                                    self.zoomTo(this.getAttribute("id"));
                                });

                                searchResultButton.setAttribute("name", self.results[i].display_name);
                                searchResultButton.innerHTML = self.results[i].display_name;
                                searchResult.appendChild(searchResultButton);
                                searchResultContainer.appendChild(searchResult);
                            }
                            if (searchWrapper) {
                                searchWrapper.appendChild(searchResultContainer);
                            }
                        }
                    }
                }
                return false;
            }
        });

        if (options.collapsible && !options.extDiv) {
            // button
            button = document.createElement('button');
            button.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].GEOSEARCH_TRIGGER;
            button.title = options.tipLabel;
            element.appendChild(button);

            // set onClick to the toggle-function
            $(button).click(function () {
                try {
                    this.blur();
                } catch (ignore) {}
                self.toggle();
            });
        } else if (options.extDiv) {
            options.target = options.extDiv;
        }

        // inheritance-stuff
        ol.control.Control.call(this, {
            element: element,
            target: options.target
        });
    };
    ol.inherits(c4g.maps.control.GeoSearch, ol.control.Control);

    /*
     * Add methods
     */
    c4g.maps.control.GeoSearch.prototype = $.extend(c4g.maps.control.GeoSearch.prototype, {

        /**
         * @TODO
         *
         * @return  {[type]}  [description]
         */
        open: function open() {
            if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
                $(this.element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).find('input')[0].focus();
                if (this.config.caching) {
                    c4g.maps.utils.storeValue('geosearch', '1');
                }
            }
        },

        /**
         * @TODO
         *
         * @return  {[type]}  [description]
         */
        close: function close() {
            if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN)) {
                $(this.element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
                // this.closeResults();
                if (document.getElementById("resultcontainer")) {
                    document.getElementById("resultcontainer").parentNode.removeChild(document.getElementById("resultcontainer"));
                }
                if (this.config.caching) {
                    c4g.maps.utils.storeValue('geosearch', '0');
                }
            }
        },

        /**
         * @TODO
         *
         * @return  {[type]}  [description]
         */
        toggle: function toggle() {
            if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
                this.open();
            } else {
                this.close();
            }
        },

        // /**
        //  * @TODO
        //  *
        //  * @return  {[type]}  [description]
        //  */
        // openResults: function () {
        //   if ($(this.resultWrapper).hasClass(cssConstants.CLOSE)) {
        //     $(this.resultWrapper).addClass(cssConstants.OPEN)
        //       .removeClass(cssConstants.CLOSE);
        //   }
        // },

        // /**
        //  * @TODO
        //  *
        //  * @return  {[type]}  [description]
        //  */
        // closeResults: function () {
        //   if ($(this.resultWrapper).hasClass(cssConstants.OPEN)) {
        //     $(this.resultWrapper).addClass(cssConstants.CLOSE)
        //       .removeClass(cssConstants.OPEN);
        //   }
        // },

        // /**
        //  * @TODO
        //  *
        //  * @return  {[type]}  [description]
        //  */
        // toggleResults: function () {
        //   if ($(this.resultWrapper).hasClass(cssConstants.CLOSE)) {
        //     this.openResults();
        //   } else {
        //     this.closeResults();
        //   }
        // },

        /**
         * @TODO
         *
         * @return  {[type]}  [description]
         */
        clearResults: function clearResults() {
            this.resultWrapper.innerHTML = '';
        },

        /**
         * @TODO
         *
         * @param   {[type]}  location  [description]
         *
         * @return  {[type]}            [description]
         */
        zoomTo: function zoomTo(index) {
            var self, map, animate, markResult, result, resultCoordinate, flyTo, completeSearch, animationDuration, zoomType;

            flyTo = function flyTo(map, location, zoomlevel, zoombounds, boundingbox, markResult, animate) {
                var duration = 2000;
                var zoom = zoomlevel; //mapView.getZoom();
                var parts = 2;
                var called = false;

                function callback(complete) {
                    --parts;
                    if (called) {
                        return;
                    }
                    if (parts === 0 || !complete) {
                        called = true;

                        if (zoombounds && boundingbox) {
                            // translate osm-extent to ol3-extent

                            osmExtent = [];
                            osmExtent.push(parseFloat(boundingbox[2]));
                            osmExtent.push(parseFloat(boundingbox[0]));
                            osmExtent.push(parseFloat(boundingbox[3]));
                            osmExtent.push(parseFloat(boundingbox[1]));

                            window.setTimeout(function () {
                                mapView.fit(ol.proj.transformExtent(osmExtent, 'EPSG:4326', 'EPSG:3857'), map.getSize(), {
                                    minZoom: mapView.get('minZoom') || 0,
                                    maxZoom: mapView.get('maxZoom') || 19,
                                    duration: duration / 2,
                                    easing: ol.easing.easeOut
                                });
                            }, duration);
                        }

                        completeSearch(markResult, animate);
                    }
                }

                map.getView().animate({
                    center: location,
                    duration: duration
                }, callback);
                map.getView().animate({
                    zoom: zoom - 1,
                    duration: duration / 2
                }, {
                    zoom: zoom,
                    duration: duration / 2
                }, callback);
            };

            completeSearch = function completeSearch(markResult, animate) {
                var addMarker, markerSource, animateMarker;

                markerSource = new ol.source.Vector();
                map.addLayer(new ol.layer.Vector({
                    style: new ol.style.Style(),
                    source: markerSource
                }));

                addMarker = function addMarker() {
                    markerSource.addFeature(new ol.Feature(new ol.geom.Point(resultCoordinate)));
                };

                animateMarker = function animateMarker(feature) {
                    var animationStep, start, duration, listenerKey;

                    start = new Date().getTime();
                    duration = 3000;

                    animationStep = function animationStep(event) {
                        var vectorContext, frameState, elapsed, elapsedRatio, radius, opacity, marker, flashGeom;

                        vectorContext = event.vectorContext;
                        frameState = event.frameState;
                        flashGeom = feature.getGeometry().clone();
                        elapsed = frameState.time - start;
                        elapsedRatio = elapsed / duration;
                        radius = ol.easing.linear(1 - elapsedRatio) * 100;
                        if (radius < 0) {
                            radius = 0;
                        }
                        opacity = ol.easing.linear(elapsedRatio);

                        marker = new ol.style.Style({
                            image: new ol.style.Circle({
                                radius: radius,
                                snapToPixel: false,
                                stroke: new ol.style.Stroke({
                                    color: 'rgba(200, 0, 0, ' + opacity + ')',
                                    width: 3,
                                    opacity: opacity
                                })
                            })
                        });

                        vectorContext.setStyle(marker);
                        vectorContext.drawGeometry(flashGeom, null);

                        if (elapsed > duration) {
                            markerSource.clear();
                            ol.Observable.unByKey(listenerKey);
                            return;
                        }
                        // continue postcompose animation
                        frameState.animate = true;
                    }; // end of "animationStep"

                    listenerKey = map.on('postcompose', animationStep);
                }; // end of "animateMarker"

                markerSource.on('addfeature', function (event) {
                    animateMarker(event.feature);
                });

                if (animate) {
                    if (zoomType === 'zoom') {
                        window.setTimeout(addMarker, animationDuration / 2);
                    } else {
                        window.setTimeout(addMarker, animationDuration);
                    }
                } else {
                    addMarker();
                }
            };

            self = this;
            map = this.getMap();

            result = self.results[index];
            resultCoordinate = ol.proj.transform([parseFloat(result.lon), parseFloat(result.lat)], 'EPSG:4326', 'EPSG:3857');

            if (animate) {
                resolution = mapView.getResolution();
                viewExtent = mapView.calculateExtent(map.getSize());
                if (ol.extent.containsCoordinate(viewExtent, resultCoordinate)) {
                    zoomType = 'zoom';
                } else {
                    if (Math.abs(currentCoordinate[0] - resultCoordinate[0]) > Math.abs(currentCoordinate[1] - resultCoordinate[1])) {
                        coordDif = Math.abs(currentCoordinate[0] - resultCoordinate[0]);
                        difContext = ol.extent.getWidth(viewExtent);
                    } else {
                        coordDif = Math.abs(currentCoordinate[1] - resultCoordinate[1]);
                        difContext = ol.extent.getHeight(viewExtent);
                    }
                    if (coordDif > 0) {
                        resolution *= coordDif / difContext;
                    }
                    zoomType = 'bounce';
                }

                flyTo(map, resultCoordinate, self.config.zoomlevel, self.config.zoombounds, result.boundingbox, this.config.markResult, this.config.animate);
            } else {
                completeSearch(this.config.markResult, this.config.animate);
                map.getView().setCenter(resultCoordinate);
                if (self.config.zoomlevel >= 0) {
                    map.getView().setZoom(self.config.zoomlevel);
                }
            }
        },

        findLocation: function findLocation(location, opt_options) {
            var self, map, animate, animationDuration, markResult;

            self = this;
            map = this.getMap();

            // show spinner
            this.config.mapController.spinner.show();

            animate = this.config.animate;
            animationDuration = 2000;
            markResult = this.config.markResult;

            if ((typeof opt_options === "undefined" ? "undefined" : _typeof(opt_options)) === 'object') {
                if (opt_options.animate !== undefined) {
                    animate = opt_options.animate;
                }
                if (opt_options.markResult !== undefined) {
                    markResult = opt_options.markResult;
                }
            }

            // @TODO
            // check bounds
            //   are there restriction-bounds on the map?
            //   -> else use extent-bounds

            // @TODO
            // highlight found area/location


            if (this.config.quicksearch) {

                // AJAX -> @nominatim
                $.ajax({
                    crossDomain: true,
                    dataType: "json",
                    url: this.config.url,
                    data: {
                        format: "json",
                        q: location
                    }
                }).done(function (results) {

                    var mapView, currentCoordinate, resultCoordinate, coordDif, difContext, viewExtent, result, osmExtent, resolution, zoomType, flyTo, completeSearch;

                    mapView = map.getView();

                    flyTo = function flyTo(map, location, zoomlevel, zoombounds, boundingbox, markResult, animate) {
                        var duration = 2000;
                        var zoom = zoomlevel; //mapView.getZoom();
                        var parts = 2;
                        var called = false;

                        function callback(complete) {
                            --parts;
                            if (called) {
                                return;
                            }
                            if (parts === 0 || !complete) {
                                called = true;

                                if (zoombounds && boundingbox) {
                                    // translate osm-extent to ol3-extent

                                    osmExtent = [];
                                    osmExtent.push(parseFloat(boundingbox[2]));
                                    osmExtent.push(parseFloat(boundingbox[0]));
                                    osmExtent.push(parseFloat(boundingbox[3]));
                                    osmExtent.push(parseFloat(boundingbox[1]));

                                    window.setTimeout(function () {
                                        mapView.fit(ol.proj.transformExtent(osmExtent, 'EPSG:4326', 'EPSG:3857'), map.getSize(), {
                                            minZoom: mapView.get('minZoom') || 0,
                                            maxZoom: mapView.get('maxZoom') || 19,
                                            duration: duration / 2,
                                            easing: ol.easing.easeOut
                                        });
                                    }, duration);
                                }

                                completeSearch(markResult, animate);
                            }
                        }

                        map.getView().animate({
                            center: location,
                            duration: duration
                        }, callback);
                        map.getView().animate({
                            zoom: zoom - 1,
                            duration: duration / 2
                        }, {
                            zoom: zoom,
                            duration: duration / 2
                        }, callback);
                    };

                    completeSearch = function completeSearch(markResult, animate) {
                        // result marker & animation
                        if (markResult) {
                            var addMarker, markerSource, animateMarker;

                            markerSource = new ol.source.Vector();
                            map.addLayer(new ol.layer.Vector({
                                style: new ol.style.Style(),
                                source: markerSource
                            }));

                            addMarker = function addMarker() {
                                markerSource.addFeature(new ol.Feature(new ol.geom.Point(resultCoordinate)));
                            };

                            animateMarker = function animateMarker(feature) {
                                var animationStep, start, duration, listenerKey;

                                start = new Date().getTime();
                                duration = 3000;

                                animationStep = function animationStep(event) {
                                    var vectorContext, frameState, elapsed, elapsedRatio, radius, opacity, marker, flashGeom;

                                    vectorContext = event.vectorContext;
                                    frameState = event.frameState;
                                    flashGeom = feature.getGeometry().clone();
                                    elapsed = frameState.time - start;
                                    elapsedRatio = elapsed / duration;
                                    radius = ol.easing.linear(1 - elapsedRatio) * 100;
                                    if (radius < 0) {
                                        radius = 0;
                                    }
                                    opacity = ol.easing.linear(elapsedRatio);

                                    var marker = new ol.style.Style({
                                        image: new ol.style.Circle({
                                            radius: radius,
                                            snapToPixel: false,
                                            stroke: new ol.style.Stroke({
                                                color: 'rgba(200, 0, 0, ' + opacity + ')',
                                                width: 3,
                                                opacity: opacity
                                            })
                                        })
                                    });

                                    vectorContext.setStyle(marker);
                                    vectorContext.drawGeometry(flashGeom, null);

                                    if (elapsed > duration) {
                                        markerSource.clear();
                                        ol.Observable.unByKey(listenerKey);
                                        return;
                                    }
                                    // continue postcompose animation
                                    frameState.animate = true;
                                }; // end of "animationStep"

                                listenerKey = map.on('postcompose', animationStep);
                            }; // end of "animateMarker"

                            markerSource.on('addfeature', function (event) {
                                animateMarker(event.feature);
                            });

                            if (animate) {
                                if (zoomType === 'zoom') {
                                    window.setTimeout(addMarker, animationDuration / 2);
                                } else {
                                    window.setTimeout(addMarker, animationDuration);
                                }
                            } else {
                                addMarker();
                            }
                        } // end of result marker & animation handling
                    };

                    if (results[0]) {
                        result = results[0];
                        self.results = results;
                        currentCoordinate = mapView.getCenter();
                        resultCoordinate = ol.proj.transform([parseFloat(result.lon), parseFloat(result.lat)], 'EPSG:4326', 'EPSG:3857');

                        if (animate) {
                            flyTo(map, resultCoordinate, self.config.zoomlevel, self.config.zoombounds, result.boundingbox, markResult, animate);
                        } else {
                            completeSearch(self.config.markResult, self.config.animate);
                            mapView.setCenter(resultCoordinate);
                            if (self.config.zoomlevel >= 0) {
                                map.getView().setZoom(self.config.zoomlevel);
                            }
                        }

                        var pixel = map.getPixelFromCoordinate(resultCoordinate);
                        var feature = map.forEachFeatureAtPixel(pixel, function (feature, layer) {
                            return feature;
                        });
                        var layer = map.forEachFeatureAtPixel(pixel, function (feature, layer) {
                            return layer;
                        });
                        if (self.config.popup) {
                            var popupInfos = {};
                            if (feature && feature.get('popup')) {
                                // single POI
                                popupInfos = feature.get('popup');
                            } else if (layer && layer.popup) {
                                popupInfos = layer.popup;
                            } else {
                                feature = false;
                            }
                            if (feature) {
                                var geometry = feature.getGeometry();
                                if (geometry instanceof ol.geom.Point) {
                                    var coord = geometry.getCoordinates();
                                } else {
                                    var coord = resultCoordinate;
                                }

                                c4g.maps.popup.popup.setPosition(coord);
                                if (popupInfos.content) {
                                    c4g.maps.popup.$content.html('');
                                    c4g.maps.popup.popup.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].LOADING);
                                    c4g.maps.popup.spinner.show();

                                    if (popupInfos.async === false || popupInfos.async == '0') {
                                        var objPopup = {};
                                        objPopup.popup = popupInfos;
                                        objPopup.feature = feature;
                                        objPopup.layer = layer;
                                        // Call the popup hook for plugin specific popup content
                                        if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                                            c4g.maps.utils.callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                                        }
                                        self.config.mapController.proxy.setPopup(objPopup);
                                    } else {
                                        $.ajax({
                                            dataType: "json",
                                            url: self.api_infowindow_url + '/' + popupInfos.content,
                                            done: function done(data) {
                                                var popupInfo = {
                                                    async: popupInfos.async,
                                                    content: data.content,
                                                    popup: popupInfos.popup,
                                                    routing_link: popupInfos.routing_link
                                                };

                                                objPopup = {};
                                                objPopup.popup = popupInfo;
                                                objPopup.feature = feature;
                                                objPopup.layer = layer;

                                                // Call the popup hook for plugin specific popup content
                                                if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                                                    c4g.maps.utils.callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                                                }

                                                self.setPopup(objPopup);
                                            }
                                        });
                                    }
                                } else {
                                    c4g.maps.popup.popup.removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                                }
                            } else if (c4g.maps && c4g.maps.popup && c4g.maps.popup.popup) {
                                c4g.maps.popup.popup.removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                            }
                        }

                        if (self.config.autopick && self.config.mapController.geopicker && typeof self.config.mapController.geopicker.pick === 'function') {
                            self.config.mapController.geopicker.pick(resultCoordinate);
                        }
                    } else {
                        alert(langConstants.SEARCH_NOT_FOUND);
                    }
                    // self.resultWrapper.innerHTML = '@ console';

                    if (document.getElementById("resultcontainer")) {
                        document.getElementById("resultcontainer").parentNode.removeChild(document.getElementById("resultcontainer"));
                    }
                    if (self.config.results) {

                        var searchResultContainer = document.createElement('ul');
                        searchResultContainer.setAttribute("id", "resultcontainer");
                        if (self.results) {
                            for (var i = 0; i < self.results.length; i++) {
                                var searchResult = document.createElement('li');
                                var searchResultButton = document.createElement('button');
                                searchResultButton.setAttribute("id", i);
                                searchResultButton.setAttribute('class', 'searchResultButton');
                                searchResultButton.addEventListener('click', function () {
                                    self.zoomTo(this.getAttribute("id"));
                                });

                                searchResultButton.setAttribute("name", self.results[i].display_name);
                                searchResultButton.innerHTML = self.results[i].display_name;
                                searchResult.appendChild(searchResultButton);
                                searchResultContainer.appendChild(searchResult);
                            }
                            self.searchWrapper.appendChild(searchResultContainer);
                        }
                    }
                })

                // AJAX-failure
                //
                .fail(function () {
                    // @TODO
                    // self.resultWrapper.innerHTML = 'ohoh!';
                })

                // AJAX-always
                //
                .always(function () {
                    self.config.mapController.spinner.hide();
                });
            } else {
                // @TODO
            }
        }

    }); // end of "add methods" ---
})(jQuery, this.c4g);

var GeoSearch = this.c4g.maps.control.GeoSearch;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-grid.js":
/*!******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-grid.js ***!
  \******************************************************/
/*! exports provided: Grid */
/*! exports used: Grid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Grid; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
// "namespace"

this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}
(function ($, c4g) {
  'use strict';

  /**
   * Control to toggle a grid on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Grid = function (opt_options) {

    var self = this;
    var options = opt_options || {};

    var element, button;

    var objGrid = new ol.Graticule({
      /*
      strokeStyle: new ol.style.Stroke({
          width: 2,
          lineDash: [0.5, 4]
      }),*/
      showLabels: true
    });

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].GRATICULE,
      switchable: true,
      tipLabel: langConstants.CTRL_GRID,
      label: '#',
      disableLabel: '[]'
    }, options);

    // @TODO move functions to prototype?
    //
    // function to enable the grid
    var enable = function enable() {
      objGrid.setMap(self.getMap());
      $(element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ENABLED);
      // if (options.caching) {
      //     c4g.maps.utils.storeValue('grid', '1');
      // }
    };

    // function to disable the grid
    var disable = function disable() {
      objGrid.setMap(null);
      $(element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ENABLED);
      // if (options.caching) {
      //     c4g.maps.utils.storeValue('grid', '0');
      // }
    };

    // function to toggle the grid
    var toggle = function toggle(event) {
      event.stopPropagation();
      // loose focus, otherwise it looks messy
      this.blur();
      if (objGrid.getMap()) {
        disable();
      } else {
        enable();
      }
    };

    // wrapper div
    element = document.createElement('div');
    element.className = options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL;

    if (options.switchable) {
      // button
      button = document.createElement('button');
      button.title = options.tipLabel;
      element.appendChild(button);

      // set onClick to the toggle-function
      button.addEventListener('click', toggle, false);
      button.addEventListener('touchstart', toggle, false);
    }

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });

    // if (options.caching && (c4g.maps.utils.getValue('grid') == '1')) {
    //     objGrid.setMap(self.getMap());
    //     $(element).addClass(cssConstants.ENABLED);
    // }
  };
  ol.inherits(c4g.maps.control.Grid, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Grid.prototype = $.extend(c4g.maps.control.Grid.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Grid = this.c4g.maps.control.Grid;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-home.js":
/*!******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-home.js ***!
  \******************************************************/
/*! exports provided: Home */
/*! exports used: Home */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Home; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Control to toggle the intial map position on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Home = function (opt_options) {

    var self = this;
    var options = opt_options || {};

    var element, button;

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_HOME,
      switchable: true,
      enabled: true,
      mapController: undefined
    }, options);

    if (!options.mapController) {
      return false;
    }

    var view = options.mapController.map.getView();
    var mapData = options.mapController.data;

    var toggle = function toggle(event) {
      event.stopPropagation();
      // loose focus, otherwise it looks messy
      this.blur();

      view.setCenter(ol.proj.transform([parseFloat(mapData.center.lon), parseFloat(mapData.center.lat)], 'EPSG:4326', 'EPSG:3857'));
      view.setZoom(parseInt(mapData.center.zoom, 10));
      view.setRotation(parseFloat(mapData.center.rotation));

      // check userposition
      var geoLocation;
      if (mapData.geolocation) {
        geoLocation = new ol.Geolocation({
          tracking: true,
          projection: view.getProjection()
        });

        geoLocation.on('change', function (evt) {
          view.setCenter(geoLocation.getPosition());
          if (mapData.geolocation_zoom) {
            view.setZoom(parseInt(mapData.geolocation_zoom, 10));
          }
          geoLocation.setTracking(false);
        });
      }

      options.mapController.map.setView(view);
      __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].redrawMapView(options.mapController);
    };

    // wrapper div
    element = document.createElement('div');
    element.className = options.className + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' button';

    if (options.switchable) {
      // button
      button = document.createElement('button');
      button.title = options.tipLabel;
      element.appendChild(button);

      // set onClick to the toggle-function
      button.addEventListener('click', toggle, false);
      button.addEventListener('touchstart', toggle, false);
    }

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });
  };
  ol.inherits(c4g.maps.control.Home, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Home.prototype = $.extend(c4g.maps.control.Home.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Home = this.c4g.maps.control.Home;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-overviewmap.js":
/*!*************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-overviewmap.js ***!
  \*************************************************************/
/*! exports provided: OverviewMap */
/*! exports used: OverviewMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OverviewMap; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Displays a overviewmap on the map.
   *   This class wraps the ovm a bit differently than
   *   the standard ol-overviemap, to allow proper css-transitions.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.OverviewMap = function (options) {

    var element, trigger, triggerIcon, ovm;

    // default options
    options = $.extend({
      collapsed: true,
      tipLabel: langConstants.CTRL_OVERVIEWMAP,
      layers: [new ol.layer.Tile({ source: new ol.source.OSM() })]
    }, options);

    element = document.createElement('div');
    element.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OVERVIEWMAP + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
    if (options.collapsed) {
      element.className += ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE;
    } else {
      element.className += ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN;
    }
    options.target.appendChild(element);

    trigger = document.createElement('button');
    trigger.title = options.tipLabel;
    element.appendChild(trigger);

    triggerIcon = document.createElement('span');
    triggerIcon.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON;
    trigger.appendChild(triggerIcon);

    $(trigger).click(function () {
      if ($(element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
        $(element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      } else {
        $(element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      }
      try {
        this.blur();
      } catch (ignore) {}
    });

    ovm = new ol.control.OverviewMap({
      collapsible: false,
      collapsed: false,
      target: element,
      layers: options.layers
    });

    return ovm;
  };

  /*
   * Add methods
   */
  c4g.maps.control.OverviewMap.prototype = $.extend(c4g.maps.control.OverviewMap.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var OverviewMap = this.c4g.maps.control.OverviewMap;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-permalink.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-permalink.js ***!
  \***********************************************************/
/*! exports provided: Permalink */
/*! exports used: Permalink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Permalink; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
// "namespace"

this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};






var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Control to generate a permalink to the current Map state.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              options  control options.
   */

  c4g.maps.control.Permalink = function (options) {

    var self, button, copyButton, refreshButton;

    this.config = options || {};
    self = this;

    // default options
    this.config = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PERMALINK,
      // mapController: undefined,
      tipLabel: langConstants.CTRL_PERMALINK,
      getParameter: false,
      label: 'P',
      target: undefined
    }, this.config);

    if (!this.config.mapController) {
      return false;
    }

    // wrapper div
    this.element = document.createElement('div');
    this.element.className = this.config.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL;

    // button
    button = document.createElement('button');
    button.title = this.config.tipLabel;
    this.element.appendChild(button);

    // set onClick to the toggle-function
    // button.addEventListener('click', this.toggle, false);
    // button.addEventListener('touchstart', this.toggle, false);
    $(button).click(function () {
      try {
        this.blur();
      } catch (ignore) {}
      self.toggle();
    });

    // popup
    // will be attached when opened the first time
    // to make sure its really the last element in the container
    this.popupAttached = false;
    this.popup = document.createElement('div');
    this.popup.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CONTROL + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PERMALINK_POPUP + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE;

    // textfield
    this.textfield = document.createElement('input');
    this.textfield.type = 'text';
    this.popup.appendChild(this.textfield);

    // copy button
    copyButton = document.createElement('button');
    copyButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].COPY + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON;
    copyButton.title = langConstants.COPY_TO_CLIPBOARD;
    copyButton.setAttribute('data-clipboard-target', '.' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PERMALINK_POPUP + ' > input[type="text"]');
    this.popup.appendChild(copyButton);
    new Clipboard(copyButton);

    // refresh button
    refreshButton = document.createElement('button');
    refreshButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].REFRESH + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON;
    refreshButton.title = langConstants.REFRESH;
    $(refreshButton).click(function () {
      self.generateLinkFromCurrentState({ target: self.textfield });
    });
    this.popup.appendChild(refreshButton);

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: this.element,
      target: this.config.target
    });
  };
  ol.inherits(c4g.maps.control.Permalink, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Permalink.prototype = $.extend(c4g.maps.control.Permalink.prototype, {

    open: function open() {
      if (!this.popupAttached) {
        $(this.popup).slideDown(1);
        this.config.target.appendChild(this.popup);
        this.popupAttached = true;
      }
      $(this.popup).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      $(this.element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      this.generateLinkFromCurrentState({ target: this.textfield });
    },

    close: function close() {
      $(this.popup).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
      $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
    },

    toggle: function toggle() {
      if ($(this.popup).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
        this.open();
      } else {
        this.close();
      }
    },

    generateLinkFromCurrentState: function generateLinkFromCurrentState(opt_options) {
      var options, proxy, mapView, parameters, link, center, baseLayerIdx, layerIdx, layers;

      options = opt_options || {};
      if (!options.paramCount || !(options.paramCount === 6 || options.paramCount === 2 || options.paramCount === 1)) {
        options.paramCount = 6;
      }

      parameters = [];
      mapView = this.config.mapController.map.getView();
      proxy = this.config.mapController.proxy;

      center = mapView.getCenter();
      center = ol.proj.transform([center[0], center[1]], 'EPSG:3857', 'EPSG:4326');

      parameters.push(+center[0].toFixed(5));
      parameters.push(+center[1].toFixed(5));
      parameters.push(mapView.getZoom());
      parameters.push(+mapView.getRotation().toFixed(2));

      // find active baselayer
      if (proxy.activeBaselayerId) {
        parameters.push(proxy.activeBaselayerId);
      } else {
        parameters.push(0);
      }

      // find active layers
      layers = [];
      for (layerIdx in proxy.activeLayerIds) {
        if (proxy.activeLayerIds.hasOwnProperty(layerIdx)) {
          layers.push(parseInt(layerIdx, 10));
        }
      }
      // delta-decode if there are more than one layer
      if (layers.length > 1) {
        layers = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].deltaEncode(layers);
        layers = layers.join(':');
      } else {
        layers = layers[0] || '0';
      }
      parameters.push(layers);
      parameters = parameters.join('/');

      // build link
      link = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].setUrlParam(parameters, this.config.getParameter);

      if (options.target) {
        options.target.value = link;
      } else {
        return link;
      }
    }, // end of generateLinkFromCurrentState

    generateLink: function generateLink(parameters) {
      if (!parameters || !(parameters.length === 6 || parameters.length === 2 || parameters.length === 1)) {
        return false;
      }

      // build and return link
      return __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].setUrlParam(parameters.join('/'), this.config.getParameter);
    } // end of generateLink

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Permalink = this.c4g.maps.control.Permalink;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-account.js":
/*!******************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-account.js ***!
  \******************************************************************/
/*! exports provided: Account */
/*! exports used: Account */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Account; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {c4g.maps.control.Sideboard}
   *
   * @param  {[type]}  mapController  [description]
   * @param  {[type]}  config         [description]
   */

  c4g.maps.control.Account = function (opt_options) {

    // extend options
    this.options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ACCOUNT,
      name: 'account',
      headline: langConstants.ACCOUNT,
      create: true,
      mapController: undefined,
      direction: 'left'
    }, opt_options);

    if (!this.options.mapController) {
      return false;
    }

    this.mainSection = document.createElement('div');

    // call parent constructor
    __WEBPACK_IMPORTED_MODULE_1__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Account, __WEBPACK_IMPORTED_MODULE_1__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  /**
   * Methods
   */
  c4g.maps.control.Account.prototype = $.extend(c4g.maps.control.Account.prototype, {

    /**
     * Executed when the panel will be opened for the first time.
     * [init description]
     *
     * @return  {boolean}  Returns |true| on success
     */
    init: function init() {
      var self = this;

      this.spinner.show();

      this.viewAccount = this.addAccountView();
      this.viewAccount.activate();

      var proxy = self.options.mapController.proxy;
      var map = self.options.mapController.map;

      this.mainSectionAccount = document.createElement('p');
      this.mainSectionAccount.innerHTML = self.options.mapController.data.account;
      this.mainSection.appendChild(this.mainSectionAccount);
      this.contentContainer.setElement(this.mainSection);

      this.spinner.hide();
      return true;
    }, // end of "init()"


    addAccountView: function addAccountView() {
      var accountView;

      accountView = this.addView({
        name: 'account',
        triggerConfig: {
          tipLabel: langConstants.ACCOUNT_VIEW_TRIGGER,
          className: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ACCOUNT_VIEW_TRIGGER,
          withHeadline: false
        },
        sectionElements: [{ section: this.contentContainer, element: this.mainSection }, { section: this.topToolbar, element: this.viewTriggerBar }]
      });

      return accountView;
    }, // end of "addAccountView()"

    addAccount: function addAccount(options) {
      var self, TRIGGER_ACCOUNT, viewAccount, source, interaction, features;

      self = this;

      //TRIGGER_ACCOUNT = 'ACCOUNT_VIEW_TRIGGER_' + options.type.toUpperCase();

      viewAccount = self.addAccount({
        name: 'Account',
        triggerConfig: {
          tipLabel: 'Account', //langConstants[TRIGGER_DRAW],
          className: 'c4g_account_trigger', //cssConstants[TRIGGER_DRAW]
          withHeadline: false
        },
        sectionElements: [{ section: self.topToolbar, element: self.viewTriggerBar }],
        initFunction: function initFunction() {

          // Show loading animation
          self.spinner.show();

          // printFunction = function (event) {
          //   var infoButton,
          //       featureGeometry,
          //       translateInteraction,
          //       modifyInteraction,
          //       modifyButton,
          //       applyButton;
          //
          //
          //     infoButton = event.target;
          //
          //   // add apply button
          //   applyButton = document.createElement('button');
          //   applyButton.className = cssConstants.ICON + ' ' + cssConstants.EDITOR_FEATURE_APPLY;
          //   applyButton.title = langConstants.EDITOR_FEATURE_APPLY;
          //   applyButton.setAttribute('feat_id', i);
          //
          // }; // end of "modifyFeatureFunction()"

          features = new ol.Collection();

          self.spinner.hide();
          return true;
        },
        activateFunction: function activateFunction() {},
        deactivateFunction: function deactivateFunction() {}
      });

      return viewAccount;
    } // end of "addAccount()"

  });
})(jQuery, this.c4g);

var Account = this.c4g.maps.control.Account;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-editor.js":
/*!*****************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-editor.js ***!
  \*****************************************************************/
/*! exports provided: Editor */
/*! exports used: Editor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Editor; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_tooltippopup__ = __webpack_require__(/*! ./c4g-maps-misc-tooltippopup */ "./Resources/public/js/c4g-maps-misc-tooltippopup.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"

this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};








var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @constructor
   * @extend {c4g.maps.control.Sideboard}
   *
   * @param  {[type]}  mapController  [description]
   */

  c4g.maps.control.Editor = function (options) {

    // extend options
    this.options = $.extend({
      name: 'editor',
      type: 'frontend',
      dataField: false,
      create: true,
      mapController: undefined,
      drawModes: ['Point', 'Line', 'Polygon', 'Circle', 'Freehand'],
      direction: 'left',
      headline: langConstants.EDITOR
      // initMode: 'select'
    }, options);

    if (!this.options.mapController) {
      console.warn('Coul not initiallize Editor, without valid mapController.');
      return false;
    }

    //window.c4gMapsHooks.editor_loadTabs = [];
    //window.c4gMapsHooks.editor_featureChanged = [];
    this.tabs = [];
    // @TODO
    // this.typeLayer = undefined;
    // this.activeMode = this.options.initMode;
    // this.vectorSource = new ol.source.Vector();
    // this.activeDrawInteraction = undefined;
    this.lastDrawInteraction = undefined;
    this.proxy = this.options.mapController.proxy;

    if (this.options.dataField && typeof this.options.dataField === 'string') {
      this.options.dataField = $(this.options.dataField) || false;
    }

    // call parent constructor
    __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Editor, __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  /**
   * Methods
   */
  c4g.maps.control.Editor.prototype = $.extend(c4g.maps.control.Editor.prototype, {

    /**
     * Executed when the editor will be opened for the first time.
     * [init description]
     *
     * @return  {boolean}  Returns |true| on success
     */
    init: function init(opt_externalinit) {
      var self, layerStyleFunction, viewSelect;

      self = this;
      this.spinner.show();

      layerStyleFunction = function layerStyleFunction(feature, projection) {
        var styleId;

        if (feature && typeof feature.get === 'function') {
          // get the styleId of the current feature
          styleId = feature.get('styleId');
          // and execute the appropriate function
          if (self.proxy.locationStyleController.arrLocStyles[styleId]) {
            return self.proxy.locationStyleController.arrLocStyles[styleId].style(feature, projection);
          }
        }
        return false;
      };

      // Add editor layers
      this.editPointLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editLineLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editPolygonLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editCircleLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editFreehandLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });

      this.editLayerGroup = new ol.layer.Group({
        layers: new ol.Collection([this.editFreehandLayer, this.editCircleLayer, this.editPolygonLayer, this.editLineLayer, this.editPointLayer]),
        visible: true
      });
      this.options.mapController.map.addLayer(this.editLayerGroup);

      // Add and activate select view
      this.tabs.push(this.addSelectView());
      this.tabs[0].activate();

      //   AJAX: get editor config
      $.getJSON(self.options.mapController.data.api.editor + '/' + self.options.mapController.data.profile)
      // Create views for draw-features with at least one locationstyle
      .done(function (data) {

        // Draw-point view
        if (data.styles_point.length && data.styles_point.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Point', styleIds: data.styles_point }));
        }
        // Draw-line view
        if (data.styles_line.length && data.styles_line.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'LineString', styleIds: data.styles_line }));
        }
        // Draw-polygon view
        if (data.styles_polygon.length && data.styles_polygon.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Polygon', styleIds: data.styles_polygon }));
        }
        // Draw-circle view
        if (data.styles_circle.length && data.styles_circle.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Circle', styleIds: data.styles_circle }));
        }
        // Draw-freehand view
        if (data.styles_freehand.length && data.styles_freehand.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Freehand', styleIds: data.styles_freehand }));
        }
        // Call hook function for dynamically added tabs
        if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_loadTabs) === 'object') {
          __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_loadTabs, self);
        }

        return true;
      }).fail(function () {
        // @TODO error-messages
        //   1) Visible message 4 users (i18n)
        //   2) Technical console.warn
        console.warn('An error occured while trying to load the editor configuration...');
        return false;
      }).always(function () {
        var layers;
        if (self.options.type === 'backend') {
          // import GeoJSON when in backend mode
          self.importGeoJSON();
        } else {
          // load session-features when in frontend mode
          self.load();
        }
        // Add autosave to the layers when a feature is added
        layers = self.editLayerGroup.getLayers();
        layers.forEach(function (element, index, array) {
          element.getSource().on('addfeature', function () {
            self.save();
          });
        });

        //self.editPointLayer.getSource().on('addfeature', function () {self.save(); });
        //self.editLineLayer.getSource().on('addfeature', function () {self.save(); });
        //self.editPolygonLayer.getSource().on('addfeature', function () {self.save(); });
        self.spinner.hide();
      });
      if (opt_externalinit) {
        this.initialized = true;
      }

      return true;
    },

    /**
     * Executed before editor will be closed
     *
     * @return  {[type]}  [description]
     */
    preCloseFunction: function preCloseFunction() {
      if (this.editLayerGroup.getVisible()) {
        this.editLayerGroup.setVisible(false);
        this.options.mapController.map.removeLayer(this.editLayerGroup);
      }
    },

    /**
     * Executed before editor will be open
     *
     * @return  {[type]}  [description]
     */
    preOpenFunction: function preOpenFunction() {
      if (!this.editLayerGroup.getVisible()) {
        this.editLayerGroup.setVisible(true);
        this.options.mapController.map.addLayer(this.editLayerGroup);
      }
    },

    addSelectView: function addSelectView() {
      var self, selectInteraction, selectBoxInteraction, selectedFeatures, selectContentWrapper, selectContentHeadline, selectContent, selectContentInfo, selectView, fnHandleSelection;

      self = this;

      selectContentWrapper = document.createElement('div');

      selectContentHeadline = document.createElement('div');
      selectContentHeadline.innerHTML = langConstants.EDITOR_VIEW_TRIGGER_SELECT;
      selectContentHeadline.className = 'contentHeadline';
      selectContentWrapper.appendChild(selectContentHeadline);

      selectContent = document.createElement('div');
      selectContent.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_CONTENT_SELECT;
      selectContentInfo = document.createElement('p');
      selectContentInfo.innerHTML = langConstants.EDITOR_SELECT_INFO;
      selectContentInfo.innerHTML += '<br><br><sub>' + langConstants.EDITOR_SELECT_INFO_ADDITIONAL + '</sub>';
      selectContent.appendChild(selectContentInfo);
      selectContentWrapper.appendChild(selectContent);

      selectView = this.addView({
        name: 'select',
        triggerConfig: {
          tipLabel: langConstants.EDITOR_VIEW_TRIGGER_SELECT,
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_VIEW_TRIGGER_SELECT,
          withHeadline: true
        },
        sectionElements: [{ section: this.contentContainer, element: selectContentWrapper }, { section: this.topToolbar, element: this.viewTriggerBar }],
        initFunction: function initFunction() {
          selectInteraction = new ol.interaction.Select({
            layers: self.editLayerGroup.getLayers().getArray(),
            toggleCondition: ol.events.condition.platformModifierKeyOnly,
            style: function style(feature, projection) {
              var styleId, styleArray, styleRadius;

              if (feature && typeof feature.get === 'function') {
                // get the styleId of the current feature
                styleId = feature.get('styleId');
                // and execute the appropriate function
                if (self.proxy.locationStyleController.arrLocStyles[styleId]) {
                  styleArray = self.proxy.locationStyleController.arrLocStyles[styleId].style(feature, projection);

                  if (typeof styleArray[0].getImage === 'function' && styleArray[0].getImage() instanceof ol.style.Icon) {
                    styleRadius = 5;
                  } else {
                    styleRadius = parseInt(styleArray[0].getImage().getRadius(), 10) + 4;
                  }

                  styleArray.push(new ol.style.Style({
                    image: new ol.style.Circle({
                      stroke: new ol.style.Stroke({
                        color: 'rgba(255,255,255,.7)',
                        width: 5
                      }),
                      radius: styleRadius
                    }),
                    stroke: new ol.style.Stroke({
                      color: 'rgba(255,255,255,.7)',
                      width: 5
                    }),
                    fill: new ol.style.Fill({
                      color: 'rgba(255,255,255,.5)'
                    })
                  }));

                  return styleArray;
                }
              }
              return false;
            }
          }); // selectInteraction

          selectedFeatures = selectInteraction.getFeatures();

          selectBoxInteraction = new ol.interaction.DragBox({ condition: ol.events.condition.shiftKeyOnly });

          selectBoxInteraction.on('boxend', function (e) {
            var extent = selectBoxInteraction.getGeometry().getExtent();

            self.editLayerGroup.getLayers().forEach(function (layer) {
              layer.getSource().forEachFeatureIntersectingExtent(extent, function (feature) {
                selectedFeatures.push(feature);
              });
            });

            fnHandleSelection();
          });

          // clear selection when drawing a new box and when clicking on the map
          selectBoxInteraction.on('boxstart', function (e) {
            selectedFeatures.clear();
            fnHandleSelection();
          });

          fnHandleSelection = function fnHandleSelection() {
            var i, j, label, editorVars, headlineElement, inputNameElement, modifyButtonElement, deleteButtonElement, paragraphElement, strongElement, inputElement, featureCount, selectedFeature, blurOnEnter, inputChangeHandler, nameChangeHandler, modifyFeatureFunction, deleteFeatureFunction, renderSelectedFeaturesList;

            if (typeof self.applyFeatureModification === 'function') {
              self.applyFeatureModification();
            }

            blurOnEnter = function blurOnEnter(event) {
              if (event.which === 13) {
                try {
                  event.target.blur();
                } catch (ignore) {}
              }
            }; // end of "blurOnEnter()"

            nameChangeHandler = function nameChangeHandler(event) {
              var changedFeature;
              changedFeature = selectedFeatures.item(event.target.getAttribute('feat_id'));
              changedFeature.set('tooltip', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].encodeGeoJsonProperty(event.target.value || ''));
              self.save();
              // Call hook to notify the feature change
              if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_featureChanged) === 'object') {
                __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_featureChanged, {
                  feature: changedFeature,
                  action: 'renamed'
                });
              }
            }; // end of "nameChangeHandler()"

            inputChangeHandler = function inputChangeHandler(event) {
              var currentVars, changedFeature;
              changedFeature = selectedFeatures.item(event.target.getAttribute('feat_id'));
              currentVars = changedFeature.get('editorVars');
              currentVars[event.target.getAttribute('var_id')].value = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].encodeGeoJsonProperty(event.target.value || '');
              changedFeature.set('editorVars', currentVars);
              self.save();
              // Call hook to notify the feature change
              if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_featureChanged) === 'object') {
                __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_featureChanged, {
                  feature: changedFeature,
                  action: 'changed_var'
                });
              }
            }; // end of "inputChangeHandler()"

            modifyFeatureFunction = function modifyFeatureFunction(event) {
              var modifyFeature, featureGeometry, translateInteraction, modifyInteraction, modifyButton, applyButton;

              if (typeof self.applyFeatureModification === 'function') {
                self.applyFeatureModification();
              }

              modifyButton = event.target;

              // get feature that should be modified
              modifyFeature = selectedFeatures.item(modifyButton.getAttribute('feat_id'));
              if (!modifyFeature || typeof modifyFeature.getGeometry !== 'function') {
                return false;
              }

              featureGeometry = modifyFeature.getGeometry();
              translateInteraction = false;
              modifyInteraction = false;

              if (!(featureGeometry instanceof ol.geom.LineString)) {
                translateInteraction = new ol.interaction.Translate({
                  features: new ol.Collection([modifyFeature])
                });
                self.options.mapController.map.addInteraction(translateInteraction);
              }
              if (!(featureGeometry instanceof ol.geom.Point)) {
                modifyInteraction = new ol.interaction.Modify({
                  features: new ol.Collection([modifyFeature])
                });
                self.options.mapController.map.addInteraction(modifyInteraction);
              }

              selectInteraction.setActive(false);

              // add apply button
              applyButton = document.createElement('button');
              applyButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_FEATURE_APPLY;
              applyButton.title = langConstants.EDITOR_FEATURE_APPLY;
              applyButton.setAttribute('feat_id', i);

              self.applyFeatureModification = function (event) {
                if (translateInteraction) {
                  translateInteraction.setActive(false);
                  self.options.mapController.map.removeInteraction(translateInteraction);
                  translateInteraction = false;
                }
                if (modifyInteraction) {
                  self.options.mapController.map.removeInteraction(modifyInteraction);
                  modifyInteraction.setActive(false);
                  modifyInteraction = false;
                }
                selectInteraction.setActive(true);

                applyButton = applyButton.parentNode.replaceChild(modifyButton, applyButton);
                self.save();
                self.applyFeatureModification = false;
                // Call hook to notify the feature change
                if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_featureChanged) === 'object') {
                  __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_featureChanged, {
                    feature: modifyFeature,
                    action: 'edited'
                  });
                }
              };

              $(applyButton).click(self.applyFeatureModification);
              modifyButton = modifyButton.parentNode.replaceChild(applyButton, modifyButton);
            }; // end of "modifyFeatureFunction()"

            deleteFeatureFunction = function deleteFeatureFunction(event) {
              var featureIndex, featureGeometry, featureSource, deleteFeature;

              if (typeof self.applyFeatureModification === 'function') {
                self.applyFeatureModification();
              }

              featureIndex = event.target.getAttribute('feat_id');
              deleteFeature = selectedFeatures.item(featureIndex);
              featureGeometry = deleteFeature.getGeometry();

              // find right source
              if (featureGeometry instanceof ol.geom.Point) {
                featureSource = self.editPointLayer.getSource();
              } else if (featureGeometry instanceof ol.geom.LineString) {
                featureSource = self.editLineLayer.getSource();
              } else if (featureGeometry instanceof ol.geom.Polygon) {
                featureSource = self.editPolygonLayer.getSource();
              } else if (featureGeometry instanceof ol.geom.Circle) {
                featureSource = self.editCircleLayer.getSource();
              } else {
                // could not find right source
                console.warn('Could not delete the feature. Unable to find appropriate source.');
                return false;
              }

              // remove Feature from the source
              try {
                featureSource.removeFeature(deleteFeature);
              } catch (ignore) {
                if (featureGeometry instanceof ol.geom.LineString) {
                  featureSource = self.editFreehandLayer.getSource();
                  featureSource.removeFeature(deleteFeature);
                }
              }
              // and from the selection
              selectedFeatures.remove(deleteFeature);

              // rerender the selectionList
              renderSelectedFeaturesList();
              self.save();
              // Call hook to notify the feature change
              // Maybe pass the remaining features instead of the deletedFeature ?
              // Or maybe a second hook for deletion, where both is passed ?
              if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_featureChanged) === 'object') {
                __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_featureChanged, {
                  feature: deleteFeature,
                  action: 'deleted'
                });
              }
            }; // end of "deleteFeatureFunction()"

            renderSelectedFeaturesList = function renderSelectedFeaturesList() {
              featureCount = selectedFeatures.getLength();
              selectContent.innerHTML = '';
              if (featureCount > 0) {
                for (i = 0; i < featureCount; i += 1) {
                  selectedFeature = selectedFeatures.item(i);
                  headlineElement = document.createElement('h4');
                  // add name inputfield
                  inputNameElement = document.createElement('input');
                  inputNameElement.type = 'text';
                  inputNameElement.id = i;
                  inputNameElement.setAttribute('value', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].decodeGeoJsonProperty(selectedFeature.get('tooltip') || ''));
                  inputNameElement.setAttribute('feat_id', i);
                  $(inputNameElement).keydown(blurOnEnter);
                  inputNameElement.onchange = nameChangeHandler;
                  headlineElement.appendChild(inputNameElement);
                  // add modify button
                  modifyButtonElement = document.createElement('button');
                  modifyButtonElement.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_FEATURE_MODIFY;
                  modifyButtonElement.title = langConstants.EDITOR_FEATURE_MODIFY;
                  modifyButtonElement.setAttribute('feat_id', i);
                  $(modifyButtonElement).click(modifyFeatureFunction);
                  headlineElement.appendChild(modifyButtonElement);
                  // add delete button
                  deleteButtonElement = document.createElement('button');
                  deleteButtonElement.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_FEATURE_DELETE;
                  deleteButtonElement.title = langConstants.EDITOR_FEATURE_DELETE;
                  deleteButtonElement.setAttribute('feat_id', i);
                  $(deleteButtonElement).click(deleteFeatureFunction);
                  headlineElement.appendChild(deleteButtonElement);

                  selectContent.appendChild(headlineElement);
                  if (selectedFeature.get('measuredLength')) {
                    if (selectedFeature.getGeometry() instanceof ol.geom.LineString) {
                      label = langConstants.LENGTH;
                    } else if (selectedFeature.getGeometry() instanceof ol.geom.Polygon) {
                      label = langConstants.PERIMETER;
                    } else {
                      label = langConstants.RADIUS;
                    }
                    paragraphElement = document.createElement('p');
                    paragraphElement.innerHTML += '<strong>' + label + ':</strong> ' + selectedFeature.get('measuredLength').htmlValue;
                    selectContent.appendChild(paragraphElement);
                  }
                  if (selectedFeature.get('measuredArea')) {
                    paragraphElement = document.createElement('p');
                    paragraphElement.innerHTML += '<strong>' + langConstants.SURFACEAREA + ':</strong> ' + selectedFeature.get('measuredArea').htmlValue;
                    selectContent.appendChild(paragraphElement);
                  }
                  if (selectedFeature.get('measuredRadius')) {
                    paragraphElement = document.createElement('p');
                    paragraphElement.innerHTML += '<strong>' + langConstants.RADIUS + ':</strong> ' + selectedFeature.get('measuredRadius').htmlValue;
                    selectContent.appendChild(paragraphElement);
                  }
                  // check and append editor-vars
                  editorVars = selectedFeature.get('editorVars');
                  for (j = 0; j < editorVars.length; j += 1) {
                    paragraphElement = document.createElement('p');
                    strongElement = document.createElement('strong');
                    strongElement.innerHTML = editorVars[j].label;

                    inputElement = document.createElement('input');
                    inputElement.type = 'text';
                    inputElement.id = i + '-' + j;
                    inputElement.setAttribute('value', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].decodeGeoJsonProperty(editorVars[j].value || ''));
                    inputElement.setAttribute('feat_id', i);
                    inputElement.setAttribute('var_id', j);
                    $(inputElement).keydown(blurOnEnter);
                    inputElement.onchange = inputChangeHandler;

                    paragraphElement.appendChild(strongElement);
                    paragraphElement.appendChild(document.createElement('br'));
                    paragraphElement.appendChild(inputElement);
                    selectContent.appendChild(paragraphElement);
                  }
                }
                selectContentHeadline.style.display = 'none';
                // self.statusBar.innerHTML = featureCount;
              } else {
                selectContent.appendChild(selectContentInfo);
                // self.statusBar.innerHTML = 0;
                selectContentHeadline.style.display = '';
              }
              self.update();
            }; // end of "renderSelectedFeaturesList"

            renderSelectedFeaturesList();
          }; // end of "fnHandleSelection"

          selectInteraction.on('select', function (event) {
            fnHandleSelection(event.target.getFeatures());
          });

          self.options.mapController.map.addInteraction(selectInteraction);
          self.options.mapController.map.addInteraction(selectBoxInteraction);
          return true;
        },
        activateFunction: function activateFunction() {

          // Disable mapHover
          self.options.mapController.mapHover.deactivate();

          // Reset display, if no features are selected
          if (selectInteraction.getFeatures().getLength() < 1) {
            selectContent.innerHTML = '';
            selectContent.appendChild(selectContentInfo);
            // self.statusBar.innerHTML = 0;
            selectContentHeadline.style.display = '';
          }

          // Enable interaction
          selectInteraction.setActive(true);
          self.options.mapController.map.addInteraction(selectInteraction);
          selectBoxInteraction.setActive(true);
          self.options.mapController.map.addInteraction(selectBoxInteraction);

          return true;
        },
        deactivateFunction: function deactivateFunction() {
          if (typeof self.applyFeatureModification === 'function') {
            self.applyFeatureModification();
          }
          // Disable interaction
          selectInteraction.setActive(false);
          self.options.mapController.map.removeInteraction(selectInteraction);
          selectBoxInteraction.setActive(false);
          self.options.mapController.map.removeInteraction(selectBoxInteraction);

          // enable mapHover
          self.options.mapController.mapHover.activate();

          return true;
        }
      });

      return selectView;
    },

    addDrawView: function addDrawView(options) {
      var self, TRIGGER_DRAW, drawContent, optionsDiv, enableInstantMeasureCheckbox, enableInstantMeasureCheckboxLabel,
      // enableFreehandDrawCheckbox,
      // enableFreehandDrawCheckboxLabel,
      checkboxChangeHandler, drawView, addDrawStyle, olType;

      self = this;

      options = $.extend({
        type: 'Point',
        styleIds: []
      }, options);

      checkboxChangeHandler = function checkboxChangeHandler(event) {
        // var interaction = self.options.mapController.map.interaction;
        // self.options.mapController.map.removeInteraction(interaction);
        // //self.options.mapController.map.addInteraction(interaction);

      };

      TRIGGER_DRAW = 'EDITOR_VIEW_TRIGGER_DRAW_' + options.type.toUpperCase();

      drawContent = document.createElement('div');
      drawContent.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */]['EDITOR_DRAW_CONTENT_' + options.type.toUpperCase()];
      drawContent.innerHTML = '<h4>' + langConstants[TRIGGER_DRAW] + '</h4>';

      if (options.type.toLowerCase() !== 'point') {
        optionsDiv = document.createElement('div');
        optionsDiv.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_DRAW_OPTIONS;
        drawContent.appendChild(optionsDiv);

        enableInstantMeasureCheckbox = document.createElement('input');
        enableInstantMeasureCheckbox.type = 'checkbox';
        enableInstantMeasureCheckbox.id = 'enableInstantMeasureFor' + options.type;
        optionsDiv.appendChild(enableInstantMeasureCheckbox);

        enableInstantMeasureCheckboxLabel = document.createElement('label');
        enableInstantMeasureCheckboxLabel.setAttribute('for', 'enableInstantMeasureFor' + options.type);
        enableInstantMeasureCheckboxLabel.innerHTML = langConstants.EDITOR_ENABLE_INSTANT_MEASURE;
        optionsDiv.appendChild(enableInstantMeasureCheckboxLabel);

        optionsDiv.appendChild(document.createElement('br'));

        // enableFreehandDrawCheckbox = document.createElement('input');
        // enableFreehandDrawCheckbox.type = 'checkbox';
        // enableFreehandDrawCheckbox.id = 'enableFreehandDrawFor' + options.type;
        // enableFreehandDrawCheckbox.onchange = checkboxChangeHandler;
        // optionsDiv.appendChild(enableFreehandDrawCheckbox);
        //
        // enableFreehandDrawCheckboxLabel = document.createElement('label');
        // enableFreehandDrawCheckboxLabel.setAttribute('for', 'enableFreehandDrawFor' + options.type);
        // enableFreehandDrawCheckboxLabel.innerHTML = langConstants.EDITOR_ENABLE_FREEHAND_DRAW;
        // optionsDiv.appendChild(enableFreehandDrawCheckboxLabel);
      }

      addDrawStyle = function addDrawStyle(styleId) {
        var interactionView, source, interaction, features, editorStyle, style, styleData, styleIcon, svgSrc, styleImage, styleTriggerLabel, featureIdCount, name;

        // Style "shortcut"
        style = self.proxy.locationStyleController.arrLocStyles[styleId].style()[0];
        editorStyle = self.proxy.locationStyleController.arrLocStyles[styleId].editor;
        styleData = self.proxy.locationStyleController.arrLocStyles[styleId].locStyleArr;
        svgSrc = styleData.svgSrc;

        featureIdCount = 0;

        // Create label for interaction-trigger
        styleTriggerLabel = document.createElement('span');
        // @TODO use css-class for dimensions
        styleTriggerLabel.style.display = 'block';
        styleTriggerLabel.style.minWidth = '30px';
        styleTriggerLabel.style.minHeight = '30px';
        styleTriggerLabel.style.margin = '2px';
        // "style.getImage().getImage()", does not work in every case
        styleImage = style.getImage() || undefined;
        if (editorStyle.iconSrc || styleImage instanceof ol.style.Icon) {
          styleIcon = document.createElement('img');

          if (editorStyle.iconSrc && editorStyle.iconSrc.indexOf('.') != -1) {
            styleIcon.src = editorStyle.iconSrc;
            if (styleData.editor_icon_size) {
              styleIcon.height = styleData.editor_icon_size[0];
              styleIcon.width = styleData.editor_icon_size[1];
            } else {
              styleIcon.height = '32';
              styleIcon.width = '32';
            }
          } else {
            styleIcon.src = styleImage.getSrc();
            styleIcon.scale = styleImage.getScale();
          }
          styleTriggerLabel.appendChild(styleIcon);
        } else if (svgSrc) {
          if (styleData.svgSrc && styleData.icon_scale && styleData.icon_size) {
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext("2d");
            var height = styleData.icon_size[0] * styleData.icon_scale;
            var width = styleData.icon_size[1] * styleData.icon_scale;

            var strokewidth = 0;
            if (styleData.strokewidth && styleData.strokewidth.value) {
              strokewidth = styleData.strokewidth.value;
            }

            canvas.height = height + 2 * strokewidth;
            canvas.width = width + 2 * strokewidth;
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (styleData.fillcolor) {
              ctx.fillStyle = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.fillcolor, styleData.fillopacity.value);
              ctx.fillRect(0, 0, canvas.width, canvas.height);
            }

            if (strokewidth && styleData.strokecolor) {
              ctx.strokeStyle = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.strokecolor, styleData.strokeopacity.value);
              ctx.lineWidth = strokewidth;
              ctx.strokeRect(0, 0, canvas.width, canvas.height);
              ctx.translate(0.5, 0.5);
            }

            // if (styleData.icon_opacity.value && (styleData.icon_opacity.value > 0)) {
            //     ctx.globalAlpha = (styleData.icon_opacity.value / 100);
            // }

            var img = new Image();
            img.src = styleData.svgSrc;
            img.zIndex = 100;

            img.onload = function () {
              ctx.drawImage(img, strokewidth, strokewidth, width, height);
            };

            styleIcon = canvas;

            styleTriggerLabel.style.width = width * scale + 'px';
            styleTriggerLabel.style.height = height * scale + 'px';
          }
        } else {
          styleTriggerLabel.style.background = style.getFill().getColor();
          styleTriggerLabel.style.border = '1px solid ' + style.getStroke().getColor();
        }

        // Create interactionView
        //   "addView" will be used for this, because the functionality
        //   ist mostly equal
        name = self.proxy.locationStyleController.arrLocStyles[styleId].name.replace("&#40;", "(").replace("&#41;", ")");
        interactionView = self.addView({
          name: 'draw:' + (self.proxy.locationStyleController.arrLocStyles[styleId].tooltip || name),
          triggerConfig: {
            label: styleTriggerLabel,
            tipLabel: self.proxy.locationStyleController.arrLocStyles[styleId].tooltip || name,
            className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_DRAW_TRIGGER,
            target: drawContent,
            withHeadline: true
          },
          sectionElements: [{ section: self.contentContainer, element: drawContent }, { section: self.topToolbar, element: self.viewTriggerBar }],
          initFunction: function initFunction() {
            var interactionStyleImage, activeSketch, activeTooltip;

            // Only show original icon, when the drawing POIs
            if (options.type.toLowerCase() === 'point' && style.getImage()) {
              interactionStyleImage = style.getImage();
            } else {
              interactionStyleImage = new ol.style.Circle({
                fill: style.getFill(),
                stroke: style.getStroke(),
                radius: 5
              });
            }

            // Get appropriate source
            switch (options.type.toLowerCase()) {
              case 'freehand':
                source = self.editFreehandLayer.getSource();
                break;
              case 'circle':
                source = self.editCircleLayer.getSource();
                break;
              case 'polygon':
                source = self.editPolygonLayer.getSource();
                break;
              case 'linestring':
                source = self.editLineLayer.getSource();
                break;
              case 'point':
              default:
                source = self.editPointLayer.getSource();
                break;
            }

            olType = options.type;
            if (olType == 'Freehand') {
              olType = 'LineString';
            }

            features = new ol.Collection();
            interaction = new ol.interaction.Draw({
              features: features,
              source: source,
              type: olType,
              freehand: options.type == 'Freehand',
              style: [new ol.style.Style({
                stroke: new ol.style.Stroke({
                  color: 'rgba(255,255,255,.5)',
                  width: style.getStroke().getWidth() + 2
                }),
                image: interactionStyleImage
              }), new ol.style.Style({
                geometry: style.getGeometry(),
                fill: style.getFill(),
                stroke: style.getStroke()
              })]
            });

            // @TODO doku
            //
            interaction.on('drawstart', function (event) {
              activeSketch = event.feature;
              activeSketch.set('styleId', styleId);

              if (enableInstantMeasureCheckbox && enableInstantMeasureCheckbox.checked) {
                activeTooltip = new __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
                  map: self.options.mapController.map,
                  position: event.coordinate,
                  horizontal: true
                });
              }
            }, self);

            // @TODO doku
            //
            self.options.mapController.map.on('pointermove', function (event) {
              if (enableInstantMeasureCheckbox && enableInstantMeasureCheckbox.checked && activeSketch) {
                if (activeTooltip && __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue && __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue == "0.00") {
                  activeTooltip.close();
                  activeTooltip = null;
                } else if (!activeTooltip && __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue && __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue != "0.00") {
                  activeTooltip = new __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
                    map: self.options.mapController.map,
                    position: event.coordinate,
                    horizontal: true
                  });
                }
                if (activeTooltip) {
                  activeTooltip.setPosition(event.coordinate);
                  activeTooltip.setContent(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).htmlValue);
                }
              }
            }, self);

            // @TODO doku
            //
            interaction.on('drawend', function (event) {
              var i, vars, editorVars, name;

              // name the feature
              featureIdCount += 1;
              name = self.proxy.locationStyleController.arrLocStyles[styleId].name.replace("&#40;", "(").replace("&#41;", ")");
              activeSketch.set('tooltip', (self.proxy.locationStyleController.arrLocStyles[styleId].tooltip || name) + ' (' + featureIdCount + ')');
              // add styleId
              activeSketch.set('styleId', styleId);
              // add measurements to the feature
              activeSketch.set('measuredLength', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true));
              if (options.type.toLowerCase() === 'polygon') {
                activeSketch.set('measuredArea', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry()));
              }
              if (options.type.toLowerCase() === 'circle') {
                activeSketch.set('measuredRadius', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry()));
              }
              //activeSketch.setStyle(self.proxy.locationStyleController.arrLocStyles[styleId].style);
              // add editor-vars
              vars = editorStyle.vars;
              editorVars = [];
              for (i = 0; i < vars.length; i += 1) {
                editorVars[i] = {};
                editorVars[i].key = vars[i].key;
                editorVars[i].label = vars[i].value;
                editorVars[i].value = '';
              }
              activeSketch.set('editorVars', editorVars);
              // reset active-element variables
              activeSketch = null;
              if (activeTooltip) {
                activeTooltip.close();
                activeTooltip = null;
              }
            }, self);

            self.options.mapController.map.addInteraction(interaction);
            return true;
          }, // end of "initFunction()"

          activateFunction: function activateFunction() {

            // deactivate mapHover
            self.options.mapController.mapHover.deactivate();

            // Reset feature-list
            features.clear();

            // Enable interaction
            // self.options.mapController.map.addInteraction(interaction);
            interaction.setActive(true);
            return true;
          },

          deactivateFunction: function deactivateFunction() {

            // reactivate mapHover
            self.options.mapController.mapHover.activate();

            // finish drawings, if not already done
            if (options.type.toLowerCase() !== 'point') {
              try {
                interaction.finishDrawing();
              } catch (ignore) {
                // 0_o
              }
            }

            // Remove from map
            // self.options.mapController.map.removeInteraction(interaction);
            interaction.setActive(false);
            return true;
          }
        }, drawView);

        return interactionView;
      };

      drawView = self.addView({
        name: 'draw:' + options.type.toLowerCase(),
        triggerConfig: {
          tipLabel: langConstants[TRIGGER_DRAW],
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */][TRIGGER_DRAW],
          withHeadline: true
        },
        sectionElements: [{ section: self.contentContainer, element: drawContent }, { section: self.topToolbar, element: self.viewTriggerBar }],
        initFunction: function initFunction() {
          var i, styleId, neededStyles, sortAndAddStyles;

          // Show loading animation
          self.spinner.show();

          neededStyles = [];

          /**
           * @TODO
           * [sortAndAddStyles description]
           *
           * @return  {[type]}  [description]
           */
          sortAndAddStyles = function sortAndAddStyles(arrStyleIds) {
            var j, locationStyles, drawInteraction, styleIds;

            // prepare
            locationStyles = self.proxy.locationStyleController.arrLocStyles;
            styleIds = arrStyleIds || options.styleIds;
            if (!styleIds || !locationStyles) {
              return false;
            }

            // sort
            styleIds.sort(function (a, b) {

              //ToDo check
              if (locationStyles[a] && locationStyles[b] && locationStyles[a].editor) {
                if (!locationStyles[a].editor.sort && !locationStyles[b].editor.sort || locationStyles[a].editor.sort === locationStyles[b].editor.sort) {
                  if (!locationStyles[a].name || !locationStyles[b].name) {
                    return !locationStyles[b].name ? -1 : 1;
                  }
                  return locationStyles[a].name.toLowerCase() > locationStyles[b].name.toLowerCase() ? 1 : -1;
                }
                if (!locationStyles[a].editor.sort || !locationStyles[b].editor.sort) {
                  return !locationStyles[b].editor.sort ? -1 : 1;
                }

                return locationStyles[a].editor.sort > locationStyles[b].editor.sort ? 1 : -1;
              } else {
                return -1;
              }
            }); // end sort

            // create
            for (j = 0; j < styleIds.length; j += 1) {
              drawInteraction = addDrawStyle(styleIds[j]);
              // activate the first drawStyle
              if (j === 0) {
                drawInteraction.activate();
              }
            }

            // success
            self.update();
            return true;
          }; // end of "sortAndAddStyles"

          // Make sure that all needed styles are loaded
          if (!self.proxy.locationStyleController.arrLocStyles) {
            // no styles are loaded, so load all styles
            self.proxy.locationStyleController.arrLocStyles = {};
            neededStyles = options.styleIds;
          } else {
            // check wich styles are missing
            for (i = 0; i < options.styleIds.length; i += 1) {
              styleId = options.styleIds[i];
              if (!self.proxy.locationStyleController.arrLocStyles[styleId] || !self.proxy.locationStyleController.arrLocStyles[styleId].style) {
                neededStyles.push(styleId);
              }
            }
          }

          if (neededStyles.length > 0) {
            if (!self.proxy) {
              console.warn('Could not load locStyles, as the map-proxy was not initiallized.');
            }
            self.proxy.locationStyleController.loadLocationStyles(neededStyles, {
              done: function done() {
                sortAndAddStyles();
              },
              always: function always() {
                // Hide loading-animation
                self.spinner.hide();
                self.update();
              }
            });
          } else {
            sortAndAddStyles();
            self.update();
            self.spinner.hide();
          }

          return true;
        },
        activateFunction: function activateFunction() {
          return true;
        },
        deactivateFunction: function deactivateFunction() {
          return true;
        }
      });

      return drawView;
    },

    /**
     * If opt_slot is empty, the function will just save the data in the sessionStorage.
     * [save description]
     *
     * @param   {[type]}  opt_slot  [description]
     *
     * @return  {[type]}            [description]
     */
    save: function save(opt_slot) {
      var format, saveData, slotName, storage;

      if (this.options.type === 'backend') {
        return this.exportGeoJSON();
      }

      format = new ol.format.GeoJSON();
      saveData = {};

      saveData.points = format.writeFeatures(this.editPointLayer.getSource().getFeatures());
      saveData.lines = format.writeFeatures(this.editLineLayer.getSource().getFeatures());
      saveData.polygons = format.writeFeatures(this.editPolygonLayer.getSource().getFeatures());
      saveData.circles = format.writeFeatures(this.editCircleLayer.getSource().getFeatures());
      saveData.freehand = format.writeFeatures(this.editFreehandLayer.getSource().getFeatures());

      slotName = 'c4gMaps_';
      slotName += this.options.mapController.data.mapId;
      slotName += '_' + window.location.pathname;
      if (!opt_slot) {
        storage = window.sessionStorage;
      } else {
        slotName += '_' + opt_slot;
        storage = window.localStorage;
      }
      // Call hook functions before save
      if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_onSave) === 'object') {
        __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_onSave, saveData);
      }
      storage.setItem(slotName, JSON.stringify(saveData));
    },

    /**
     * If opt_slot is empty, the function will just load the data from the sessionStorage.
     * [load description]
     *
     * @param   {[type]}  opt_slot  [description]
     *
     * @return  {boolean}            [description]
     */
    load: function load(opt_slot) {
      var i, self, format, loadData, featureCollection, slotName, storage, neededStyles, styleId, importFeatures;

      self = this;
      format = new ol.format.GeoJSON();
      self.spinner.show();

      slotName = 'c4gMaps_';
      slotName += this.options.mapController.data.mapId;
      slotName += '_' + window.location.pathname;
      if (!opt_slot) {
        storage = window.sessionStorage;
      } else {
        slotName += '_' + opt_slot;
        storage = window.localStorage;
      }
      loadData = storage.getItem(slotName);
      if (!loadData) {
        self.spinner.hide();
        return false;
      }
      loadData = JSON.parse(loadData);

      featureCollection = [];
      neededStyles = [];

      featureCollection = format.readFeatures(loadData.points).concat(format.readFeatures(loadData.lines), format.readFeatures(loadData.polygons), format.readFeatures(loadData.circles), format.readFeatures(loadData.freehand));
      for (i = 0; i < featureCollection.length; i += 1) {
        styleId = featureCollection[i].get('styleId');

        if ((!self.proxy.locationStyleController.arrLocStyles[styleId] || !self.proxy.locationStyleController.arrLocStyles[styleId].style) && $.inArray(styleId, neededStyles) === -1) {
          neededStyles.push(styleId);
        }
      }

      importFeatures = function importFeatures() {
        self.editPointLayer.getSource().addFeatures(format.readFeatures(loadData.points));
        self.editLineLayer.getSource().addFeatures(format.readFeatures(loadData.lines));
        self.editPolygonLayer.getSource().addFeatures(format.readFeatures(loadData.polygons));
        self.editCircleLayer.getSource().addFeatures(format.readFeatures(loadData.circles));
        self.editFreehandLayer.getSource().addFeatures(format.readFeatures(loadData.freehand));
      };

      if (neededStyles.length > 0) {
        if (!self.proxy) {
          console.warn('Could not load locStyles, as the map-proxy was not initiallized.');
          return false;
        }
        self.proxy.locationStyleController.loadLocationStyles(neededStyles, {
          done: function done() {
            importFeatures();
            // Call hook functions on load
            if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_onLoad) === 'object') {
              __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_onLoad, loadData);
            }
          },
          always: function always() {
            // Hide loading-animation
            self.spinner.hide();
          }
        });
      } else {
        importFeatures();
        self.spinner.hide();
        // Call hook functions on load
        if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_onLoad) === 'object') {
          __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_onLoad, loadData);
        }
      }
    }, // End of "load"

    /**
     * @TODO: [export description]
     *
     * @return  {[type]}  [description]
     */
    exportGeoJSON: function exportGeoJSON() {
      var format, features;

      format = new ol.format.GeoJSON();

      features = this.editPointLayer.getSource().getFeatures();
      features = features.concat(this.editLineLayer.getSource().getFeatures());
      features = features.concat(this.editPolygonLayer.getSource().getFeatures());
      features = features.concat(this.editCircleLayer.getSource().getFeatures());
      features = features.concat(this.editFreehandLayer.getSource().getFeatures());

      features = format.writeFeatures(features);
      // features = JSON.stringify(features);

      if (this.options.type === 'backend' && this.options.dataField) {
        this.options.dataField.val(features);
        return true;
      } else {
        return features;
      }
    }, // end of "export"

    /**
     * @TODO: [import description]
     *
     * @return  {[type]}  [description]
     */
    importGeoJSON: function importGeoJSON(opt_geojson) {
      var self, styleId, format, features, points, freehand, lines, polygons, circles, neededStyles, importFeatures, i;

      self = this;

      if (this.options.type === 'backend' && this.options.dataField) {
        features = this.options.dataField.val();
      } else if (opt_geojson) {
        features = opt_geojson;
      } else {
        return false;
      }

      if (!features) {
        // no features to load
        return false;
      }

      // try {
      //   features = JSON.parse(features);
      // } catch (ignore) {}

      format = new ol.format.GeoJSON();
      try {
        features = format.readFeatures(features);
      } catch (ignore) {
        console.warn('Could not load features: Invalid JSON string...');
        return false;
      }

      neededStyles = [];
      points = [];
      freehand = [];
      lines = [];
      polygons = [];
      circles = [];
      for (i = 0; i < features.length; i += 1) {
        styleId = features[i].get('styleId') || features[i].get('locstyle') || false;

        if (features[i] && typeof features[i].getGeometry === 'function') {
          if (features[i].getGeometry() instanceof ol.geom.Point) {
            points.push(features[i]);
          } else if (features[i].getGeometry() instanceof ol.geom.LineString) {
            if (features.options && features.options.type && features.options.type.toLowerCase() == 'freehand') {
              freehand.push(features[i]);
            } else {
              lines.push(features[i]);
            }
          } else if (features[i].getGeometry() instanceof ol.geom.Polygon) {
            polygons.push(features[i]);
          } else if (features[i].getGeometry() instanceof ol.geom.Circle) {
            circles.push(features[i]);
          }
        } else {
          console.warn('Cannot load feature without geometry.');
          return false;
        }

        if (styleId && (!self.proxy.locationStyleController.arrLocStyles[styleId] || !self.proxy.locationStyleController.arrLocStyles[styleId].style) && $.inArray(styleId, neededStyles) === -1) {
          neededStyles.push(styleId);
        }
      }

      importFeatures = function importFeatures() {
        self.editPointLayer.getSource().addFeatures(points);
        self.editLineLayer.getSource().addFeatures(lines);
        self.editPolygonLayer.getSource().addFeatures(polygons);
        self.editCircleLayer.getSource().addFeatures(circles);
        self.editFreehandLayer.getSource().addFeatures(freehand);
        __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].fitToExtent(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].getExtentForGeometries(points.concat(lines, polygons, circles, freehand)), self.options.mapController.map, [25, 25, 25, self.container.offsetWidth + 25], 1000);
      };

      self.spinner.show();
      if (neededStyles.length > 0) {
        if (!self.proxy) {
          console.warn('Could not load locStyles, as the map-proxy was not initiallized.');
          return false;
        }
        self.proxy.locationStyleController.loadLocationStyles(neededStyles, {
          done: function done() {
            importFeatures();
          },
          always: function always() {
            // Hide loading-animation
            self.spinner.hide();
          }
        });
      } else {
        importFeatures();
        self.spinner.hide();
      }
    } // end of "import"

  });
})(jQuery, this.c4g);

var Editor = this.c4g.maps.control.Editor;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-infopage.js":
/*!*******************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-infopage.js ***!
  \*******************************************************************/
/*! exports provided: Infopage */
/*! exports used: Infopage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Infopage; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {c4g.maps.control.Sideboard}
   *
   * @param  {[type]}  mapController  [description]
   * @param  {[type]}  config         [description]
   */

  c4g.maps.control.Infopage = function (opt_options) {

    // extend options
    this.options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INFOPAGE,
      name: 'infopage',
      headline: langConstants.INFOPAGE,
      create: true,
      mapController: undefined,
      direction: 'left'
    }, opt_options);

    if (!this.options.mapController) {
      return false;
    }

    this.mainSection = document.createElement('div');

    // call parent constructor
    __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Infopage, __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  /**
   * Methods
   */
  c4g.maps.control.Infopage.prototype = $.extend(c4g.maps.control.Infopage.prototype, {

    /**
     * Executed when the panel will be opened for the first time.
     * [init description]
     *
     * @return  {boolean}  Returns |true| on success
     */
    init: function init() {
      //var infoButton;
      var self = this;

      this.spinner.show();

      this.viewInfopage = this.addInfoView();
      this.viewInfopage.activate();

      var proxy = self.options.mapController.proxy;
      var map = self.options.mapController.map;

      this.mainSectionInfo = document.createElement('p');
      this.mainSectionInfo.innerHTML = self.options.mapController.data.infopage;
      this.mainSection.appendChild(this.mainSectionInfo);
      this.contentContainer.setElement(this.mainSection);

      this.spinner.hide();
      return true;
    }, // end of "init()"


    addInfoView: function addInfoView() {
      var infoView;

      infoView = this.addView({
        name: 'info',
        triggerConfig: {
          tipLabel: langConstants.INFOPAGE_VIEW_TRIGGER,
          className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INFOPAGE_VIEW_TRIGGER,
          withHeadline: false
        },
        sectionElements: [{ section: this.contentContainer, element: this.mainSection }, { section: this.topToolbar, element: this.viewTriggerBar }]
      });

      return infoView;
    }, // end of "addInfoView()"

    addInfopage: function addInfopage(options) {
      var self, TRIGGER_INFOPAGE, viewInfopage, source, interaction, features;

      self = this;

      //TRIGGER_INFOPAGE = 'INFOPAGE_VIEW_TRIGGER_' + options.type.toUpperCase();

      viewInfopage = self.addInfopage({
        name: 'Infopage',
        triggerConfig: {
          tipLabel: 'Infopage', //langConstants[TRIGGER_DRAW],
          className: 'c4g_infopage_trigger', //cssConstants[TRIGGER_DRAW]
          withHeadline: false
        },
        sectionElements: [{ section: self.topToolbar, element: self.viewTriggerBar }],
        initFunction: function initFunction() {

          // Show loading animation
          self.spinner.show();

          // printFunction = function (event) {
          //   var infoButton,
          //       featureGeometry,
          //       translateInteraction,
          //       modifyInteraction,
          //       modifyButton,
          //       applyButton;
          //
          //
          //     infoButton = event.target;
          //
          //   // add apply button
          //   applyButton = document.createElement('button');
          //   applyButton.className = cssConstants.ICON + ' ' + cssConstants.EDITOR_FEATURE_APPLY;
          //   applyButton.title = langConstants.EDITOR_FEATURE_APPLY;
          //   applyButton.setAttribute('feat_id', i);
          //
          // }; // end of "modifyFeatureFunction()"

          features = new ol.Collection();

          self.spinner.hide();
          return true;
        },
        activateFunction: function activateFunction() {},
        deactivateFunction: function deactivateFunction() {}
      });

      return viewInfopage;
    } // end of "addInfopage()"

  });
})(jQuery, this.c4g);

var Infopage = this.c4g.maps.control.Infopage;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-measuretools.js":
/*!***********************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-measuretools.js ***!
  \***********************************************************************/
/*! exports provided: Measuretools */
/*! exports used: Measuretools */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Measuretools; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_tooltippopup__ = __webpack_require__(/*! ./c4g-maps-misc-tooltippopup */ "./Resources/public/js/c4g-maps-misc-tooltippopup.js");
// "namespace"

this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};







var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @constructor
   * @extend {c4g.maps.control.Sideboard}
   *
   * @param  {[type]}  mapController  [description]
   */

  c4g.maps.control.Measuretools = function (opt_options) {

    // extend options
    this.options = $.extend({
      name: 'measure',
      headline: langConstants.MEASURETOOLS,
      create: true,
      mapController: undefined,
      direction: 'left',
      firstElement: true
    }, opt_options);

    this.mainSection = document.createElement('div');

    // call parent constructor
    __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Measuretools, __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  /**
   * Methods
   */
  c4g.maps.control.Measuretools.prototype = $.extend(c4g.maps.control.Measuretools.prototype, {

    /**
     * Executed when the panel will be opened for the first time.
     * [init description]
     *
     * @return  {boolean}  Returns |true| on success
     */
    init: function init() {

      this.spinner.show();

      // Add measure layers
      this.measureLineLayer = new ol.layer.Vector({ source: new ol.source.Vector() });
      this.measurePolygonLayer = new ol.layer.Vector({ source: new ol.source.Vector() });
      this.measureCircleLayer = new ol.layer.Vector({ source: new ol.source.Vector() });
      this.measureFreehandLayer = new ol.layer.Vector({ source: new ol.source.Vector() });

      this.measureLayerGroup = new ol.layer.Group({
        layers: new ol.Collection([this.measureFreehandLayer, this.measureCircleLayer, this.measurePolygonLayer, this.measureLineLayer]),
        visible: true
      });
      this.options.mapController.map.addLayer(this.measureLayerGroup);

      // Add and activate measure-Views
      this.viewMeasureSelect = this.addSelectView();
      this.viewMeasureSelect.activate();
      this.viewMeasureLine = this.addMeasureView({ type: 'LineString' });
      this.viewMeasureArea = this.addMeasureView({ type: 'Polygon' });
      this.viewMeasureRadius = this.addMeasureView({ type: 'Circle' });
      this.viewMeasureFreehand = this.addMeasureView({ type: 'Freehand' });

      // set content-section
      this.mainSectionInfo = document.createElement('p');
      this.mainSectionInfo.innerHTML = langConstants.MEASURETOOLS_INFO;
      this.mainSectionInfo.innerHTML += '<br><br><sub>' + langConstants.MEASURETOOLS_INFO_ADDITIONAL + '<sub>';
      this.mainSection.appendChild(this.mainSectionInfo);
      this.contentContainer.appendChild(this.mainSection);

      this.spinner.hide();
      return true;
    }, // end of "init()"

    /**
     * Executed before panel will be closed
     *
     * @return  {[type]}  [description]
     */
    preCloseFunction: function preCloseFunction() {
      var lineFeatures, polygonFeatures, circleFeatures, freehandFeatures, i;

      if (this.measureLayerGroup.getVisible()) {
        this.measureLayerGroup.setVisible(false);

        // hide line-feature tooltips
        lineFeatures = this.measureLineLayer.getSource().getFeatures();
        for (i = 0; i < lineFeatures.length; i += 1) {
          lineFeatures[i].get('tooltip').hide();
        }
        // hide polygon-feature tooltips
        polygonFeatures = this.measurePolygonLayer.getSource().getFeatures();
        for (i = 0; i < polygonFeatures.length; i += 1) {
          polygonFeatures[i].get('tooltip').hide();
        }
        // hide circle-feature tooltips
        circleFeatures = this.measureCircleLayer.getSource().getFeatures();
        for (i = 0; i < circleFeatures.length; i += 1) {
          circleFeatures[i].get('tooltip').hide();
        }
        // hide freehand-feature tooltips
        freehandFeatures = this.measureFreehandLayer.getSource().getFeatures();
        for (i = 0; i < freehandFeatures.length; i += 1) {
          freehandFeatures[i].get('tooltip').hide();
        }
      }
    }, // end of "preCloseFunction()"

    /**
     * Executed before panel will be opened
     *
     * @return  {[type]}  [description]
     */
    preOpenFunction: function preOpenFunction() {
      var lineFeatures, polygonFeatures, circleFeatures, freehandFeatures, i;

      if (!this.measureLayerGroup.getVisible()) {
        this.measureLayerGroup.setVisible(true);

        // show line-feature tooltips
        lineFeatures = this.measureLineLayer.getSource().getFeatures();
        for (i = 0; i < lineFeatures.length; i += 1) {
          lineFeatures[i].get('tooltip').show();
        }
        // show polygon-feature tooltips
        polygonFeatures = this.measurePolygonLayer.getSource().getFeatures();
        for (i = 0; i < polygonFeatures.length; i += 1) {
          polygonFeatures[i].get('tooltip').show();
        }
        // show circle-feature tooltips
        circleFeatures = this.measureCircleLayer.getSource().getFeatures();
        for (i = 0; i < circleFeatures.length; i += 1) {
          circleFeatures[i].get('tooltip').show();
        }
        // show freehand-feature tooltips
        freehandFeatures = this.measureFreehandLayer.getSource().getFeatures();
        for (i = 0; i < freehandFeatures.length; i += 1) {
          freehandFeatures[i].get('tooltip').show();
        }
      }
    }, // end of "preOpenFunction()"

    /**
     * @TODO: [addSelectView description]
     */
    addSelectView: function addSelectView() {
      var selectView;

      selectView = this.addView({
        name: 'select',
        triggerConfig: {
          tipLabel: langConstants.MEASURETOOLS_VIEW_TRIGGER_SELECT,
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].MEASURETOOLS_VIEW_TRIGGER_SELECT,
          withHeadline: true
        },
        sectionElements: [{ section: this.contentContainer, element: this.mainSection }, { section: this.topToolbar, element: this.viewTriggerBar }]
      });

      return selectView;
    }, // end of "addSelectView()"

    /**
     * @TODO: [addMeasureView description]
     *
     * @param  {[type]}  options  [description]
     */
    addMeasureView: function addMeasureView(options) {
      var self, TRIGGER_DRAW, measureView, source, interaction, features, olType;

      self = this;

      options = $.extend({
        type: 'LineString'
      }, options);

      TRIGGER_DRAW = 'MEASURETOOLS_VIEW_TRIGGER_DRAW_' + options.type.toUpperCase();

      measureView = self.addView({
        name: 'draw:' + options.type.toLowerCase(),
        triggerConfig: {
          tipLabel: langConstants[TRIGGER_DRAW],
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */][TRIGGER_DRAW],
          withHeadline: true
        },
        sectionElements: [{ section: self.topToolbar, element: self.viewTriggerBar }],
        initFunction: function initFunction() {
          var featureIdCount, activeSketch, activeTooltip, addMeasureFeature, updateMeasureFeature, getValueOfGeometry, getLengthOfMeasure, removeMeasureFeature;

          // Show loading animation
          self.spinner.show();

          featureIdCount = 1;

          if (options.type.toLowerCase() === 'freehand') {
            source = self.measureFreehandLayer.getSource();
          } else if (options.type.toLowerCase() === 'circle') {
            source = self.measureCircleLayer.getSource();
          } else if (options.type.toLowerCase() === 'polygon') {
            source = self.measurePolygonLayer.getSource();
          } else {
            source = self.measureLineLayer.getSource();
          }

          features = new ol.Collection();

          olType = options.type;
          if (olType == 'Freehand') {
            olType = 'LineString';
          }
          interaction = new ol.interaction.Draw({
            features: features,
            source: source,
            type: olType,
            freehand: options.type == 'Freehand'
            // @TODO: use custom style? (BE-option)
            // style: use default style
          });

          addMeasureFeature = function addMeasureFeature(feature) {
            var listElement, headlineElement, labelElement, inputElement, paragraphElement, strongElement, spanElement, strLabel, strType, measureArea, measureRadius;

            if (!feature instanceof ol.Feature) {
              return false;
            }

            // check if the infomessage needs to be removed
            if (self.mainSection.childElementCount === 1 && self.mainSection.children[0] === self.mainSectionInfo) {
              self.mainSection.removeChild(self.mainSectionInfo);
            }

            // check feature-type
            if (feature.getGeometry() instanceof ol.geom.LineString) {
              strLabel = langConstants.LENGTH;
              strType = langConstants.LINE;
              measureArea = false;
              measureRadius = false;
            } else if (feature.getGeometry() instanceof ol.geom.Polygon) {
              strLabel = langConstants.PERIMETER;
              strType = langConstants.POLYGON;
              measureArea = true;
              measureRadius = false;
            } else if (feature.getGeometry() instanceof ol.geom.Circle) {
              strLabel = langConstants.RADIUS;
              strType = langConstants.CIRCLE;
              measureArea = true;
              measureRadius = true;
            } else {
              //freehand ist LineString too
              strLabel = langConstants.LENGTH;
              strType = langConstants.FREEHAND;
              measureArea = false;
              measureRadius = false;
            }

            // create list element
            listElement = document.createElement('div');

            // create and append headline
            headlineElement = document.createElement('div');
            headlineElement.className = 'c4g_maps_portside_measure_element';
            if (self.options.firstElement) {
              headlineElement.className = 'c4g_maps_portside_measure_element c4g_maps_portside_measure_element_first';
              self.options.firstElement = false;
            }
            listElement.appendChild(headlineElement);

            // create and append label for name-inputfield
            labelElement = document.createElement('label');
            labelElement.setAttribute('for', 'measureElement_' + featureIdCount);
            labelElement.innerHTML = langConstants.NAME + ': ';
            headlineElement.appendChild(labelElement);

            // create and append name-inputfield
            inputElement = document.createElement('input');
            inputElement.type = 'text';
            inputElement.name = 'measureElement_' + featureIdCount;
            inputElement.value = strType + ' ' + featureIdCount;
            // attach-change-handler
            $(inputElement).change(function (event) {
              updateMeasureFeature(feature);
            });
            headlineElement.appendChild(inputElement);
            feature.set('listElementValueName', inputElement);

            // create and append paragraphs
            paragraphElement = document.createElement('p');
            paragraphElement.className = 'c4g_maps_portside_measure_paragraph';
            strongElement = document.createElement('strong');
            strongElement.innerHTML = strLabel + ': ';
            paragraphElement.appendChild(strongElement);
            spanElement = document.createElement('span');
            spanElement.innerHTML = '...';
            paragraphElement.appendChild(spanElement);
            listElement.appendChild(paragraphElement);
            feature.set('listElementValueLine', spanElement);

            if (measureArea) {
              paragraphElement = document.createElement('p');
              paragraphElement.className = 'c4g_maps_portside_measure_paragraph_surfacearea';
              strongElement = document.createElement('strong');
              strongElement.innerHTML = langConstants.SURFACEAREA + ': ';
              paragraphElement.appendChild(strongElement);
              spanElement = document.createElement('span');
              spanElement.innerHTML = '...';
              paragraphElement.appendChild(spanElement);
              listElement.appendChild(paragraphElement);
              feature.set('listElementValueArea', spanElement);
            }

            if (measureRadius) {
              // paragraphElement = document.createElement('p');
              // paragraphElement.className = 'c4g_maps_portside_measure_paragraph_surfacearea';
              // strongElement = document.createElement('strong');
              // strongElement.innerHTML = langConstants.SURFACEAREA + ': ';
              // paragraphElement.appendChild(strongElement);
              // spanElement = document.createElement('span');
              // spanElement.innerHTML = '...';
              // paragraphElement.appendChild(spanElement);
              // listElement.appendChild(paragraphElement);
              feature.set('listElementValueRadius', spanElement);
            }

            // increase the id-counter
            featureIdCount += 1;

            // append element to the list
            self.mainSection.appendChild(listElement);
            // attach element to the feature
            feature.set('listElement', listElement);

            self.update();
          }; // end of "addMeasureFeature()"

          updateMeasureFeature = function updateMeasureFeature(feature) {
            var featureTooltip, newContent, name, length, area, radius;

            featureTooltip = feature.get('tooltip');
            name = feature.get('listElementValueName').value;
            length = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry(), true);
            newContent = '<strong>' + name + '</strong><br>';

            feature.set('measuredLength', length);
            feature.get('listElementValueLine').innerHTML = length.htmlValue;
            if (feature.get('geometryType') === 'circle') {
              radius = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry());
              feature.set('measuredRadius', radius);
              feature.get('listElementValueRadius').innerHTML = radius.htmlValue;
              newContent += radius.htmlValue;

              area = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry(), false, true);
              feature.set('measuredArea', area);
              feature.get('listElementValueArea').innerHTML = area.htmlValue;
              // newContent += area.htmlValue;
            } else if (feature.get('geometryType') === 'polygon') {
              area = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry());
              feature.set('measuredArea', area);
              feature.get('listElementValueArea').innerHTML = area.htmlValue;
              newContent += area.htmlValue;
            } else {
              newContent += length.htmlValue;
            }
            featureTooltip.setContent(newContent);
          }; // end of "updateMeasureFeature()"

          removeMeasureFeature = function removeMeasureFeature(feature) {
            self.mainSection.removeChild(feature.get('listElement'));

            // last element? -> add infomessage
            if (self.mainSection.childElementCount < 1) {
              self.mainSection.appendChild(self.mainSectionInfo);
              self.update();
            }
          }; // end of "removeMeasureFeature()"

          //Start Workaround
          getValueOfGeometry = function getValueOfGeometry(feature) {
            var leng = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry(), true);
            // feature.set('measuredLength', length);
            var val = leng.htmlValue;
            var valuenumb = val.match(/\d/g);
            valuenumb = valuenumb.join("");
            return valuenumb;
          };

          getLengthOfMeasure = function getLengthOfMeasure() {
            var length = '0.00 m';
            var lengthnumb = length.match(/\d/g);
            lengthnumb = lengthnumb.join("");
            lengthnumb = +8;
            return lengthnumb;
          }; // End Workaround

          interaction.on('drawstart', function (event) {
            activeSketch = event.feature;
            // create tooltip
            activeTooltip = new __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
              map: self.options.mapController.map,
              position: event.coordinate,
              horizontal: true,
              closeable: true,
              closeFunction: function closeFunction() {
                //Workaround, for small or zero values of Freehand
                var val = getValueOfGeometry(event.feature);
                var leng = getLengthOfMeasure();
                if (val != leng && val > leng) {
                  removeMeasureFeature(event.feature);
                  source.removeFeature(event.feature);
                } else {
                  removeMeasureFeature(event.feature);
                }
              }
            });

            activeSketch.set('tooltip', activeTooltip);
            activeSketch.set('geometryType', options.type.toLowerCase());
            addMeasureFeature(activeSketch);
          }, self);

          self.options.mapController.map.on('pointermove', function (event) {
            if (activeSketch && activeTooltip) {
              activeTooltip.setPosition(event.coordinate);
              updateMeasureFeature(activeSketch);
            }
          }, self);

          interaction.on('drawend', function (event) {
            if (activeSketch && activeTooltip) {
              updateMeasureFeature(activeSketch);
              activeSketch = null;
              activeTooltip = null;
            }
          }, self);

          self.spinner.hide();
          return true;
        },
        activateFunction: function activateFunction() {

          // disable mapHover
          self.options.mapController.mapHover.deactivate();

          features.clear();

          // Enable interaction
          self.options.mapController.map.addInteraction(interaction);
        },
        deactivateFunction: function deactivateFunction() {

          // reactivate mapHover
          self.options.mapController.mapHover.activate();

          if (options.type.toLowerCase() !== 'point') {
            try {
              interaction.finishDrawing();
            } catch (ignore) {
              // 0_o
            }
          }

          // Remove from map
          self.options.mapController.map.removeInteraction(interaction);
        }
      });

      return measureView;
    } // end of "addMeasureView()"

  });
})(jQuery, this.c4g);

var Measuretools = this.c4g.maps.control.Measuretools;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-position.js":
/*!**********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-position.js ***!
  \**********************************************************/
/*! exports provided: Position */
/*! exports used: Position */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Position; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};




(function ($, c4g) {
  'use strict';

  /**
   * Control to toggle the browser/desvice position on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Position = function (opt_options) {

    var self = this;
    var options = opt_options || {};

    var element, button;

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS,
      switchable: true,
      enabled: true,
      mapController: undefined
    }, options);

    if (!options.mapController) {
      return false;
    }

    var view = options.mapController.map.getView();
    var mapData = options.mapController.data;

    var enable = function enable() {
      $(element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ENABLED);
    };

    var disable = function disable() {
      $(element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ENABLED);
    };

    var toggle = function toggle(event) {
      event.stopPropagation();
      // loose focus, otherwise it looks messy
      this.blur();

      var geoLocation = new ol.Geolocation({
        tracking: true,
        projection: view.getProjection()
      });

      geoLocation.on('change', function (evt) {
        view.setCenter(geoLocation.getPosition());
        // if (mapData.geolocation_zoom) {
        //    view.setZoom(mapData.geolocation_zoom);
        // } else {
        view.setZoom(18);
        //}
        geoLocation.setTracking(false);
        options.mapController.map.setView(view);
        c4g.maps.utils.redrawMapView(options.mapController);
      });
    };

    // wrapper div
    element = document.createElement('div');
    element.className = options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' button';

    if (options.switchable) {
      // button
      button = document.createElement('button');
      button.title = options.tipLabel;
      element.appendChild(button);

      // set onClick to the toggle-function
      button.addEventListener('click', toggle, false);
      button.addEventListener('touchstart', toggle, false);
    }

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });
  };
  ol.inherits(c4g.maps.control.Position, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Position.prototype = $.extend(c4g.maps.control.Position.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Position = this.c4g.maps.control.Position;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-print.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-print.js ***!
  \*******************************************************/
/*! exports provided: Print */
/*! exports used: Print */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Print; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};



(function ($, c4g) {
  'use strict';

  /**
   * Control to toggle the browser/desvice position on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Print = function (opt_options) {

    var self = this;
    var options = opt_options || {};

    var element, button;

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PRINT,
      switchable: true,
      enabled: true,
      mapController: undefined
    }, options);

    if (!options.mapController) {
      return false;
    }

    var view = options.mapController.map.getView();
    var mapData = options.mapController.data;

    var toggle = function toggle(event) {
      event.stopPropagation();
      var canvas = document.getElementsByClassName("ol-unselectable")[0];

      canvas.toBlob(function (blob) {
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'map.png';
        a.click();
        window.URL.revokeObjectURL(url);
      });
    };

    // wrapper div
    element = document.createElement('div');
    element.className = options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' c4g-portside-control ol-control';

    if (options.switchable) {
      // button
      button = document.createElement('button');
      button.title = options.tipLabel;
      button.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PRINT;
      element.appendChild(button);

      // set onClick to the toggle-function
      button.addEventListener('click', toggle, false);
      button.addEventListener('touchstart', toggle, false);
    }

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });
  };
  ol.inherits(c4g.maps.control.Print, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Print.prototype = $.extend(c4g.maps.control.Print.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Print = this.c4g.maps.control.Print;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-sideboard.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-sideboard.js ***!
  \***********************************************************/
/*! exports provided: Sideboard */
/*! exports used: Sideboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Sideboard; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__ = __webpack_require__(/*! ./c4g-maps-misc-spinner */ "./Resources/public/js/c4g-maps-misc-spinner.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"

this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};







var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

/**
 * Base class for sideboard structures. Provides standard configurations which are equal for each sideboard element.
 */
(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {ol.control.Control}
   * @param   {object}              options  misc configuration options
   *
   */

  c4g.maps.control.Sideboard = function (options) {

    this.options = $.extend({
      create: true,
      extDiv: false,
      defaultOpen: false,
      mapController: undefined,
      name: 'sideboard',
      direction: 'right'
    }, options);

    //active Identifier (which side is this element on?)
    //cssname needed to set the css class correctly
    switch (this.options.direction) {
      case 'left':
        this.identifier = 'Portside';
        this.cssname = 'portside';
        break;
      case 'right':
        this.identifier = 'Starboard';
        this.cssname = 'starboard';
        break;
    }
    //this.cssname = this.identifier.charAt(0).toLowerCase() + this.identifier.slice(1);
    this.initialized = false;
    this.options.tipLabel = this.options.tipLabel || this.options.headline || langConstants.CTRL_SIDEBOARD;
    this.container = document.createElement('div');
    this.element = document.createElement('div');
    this.button = undefined;
    this.spinner = undefined;
    // mainstructure elements
    this.wrapper = undefined;
    this.titleBar = undefined;
    this.headline = undefined;
    this.topToolbar = undefined;
    this.contentContainer = undefined;
    this.bottomToolbar = undefined;
    this.statusBar = undefined;

    this.sections = [];
    this.viewTriggerBar = undefined;
    this.views = [];
    this.activeView = undefined;
    this.pausedView = undefined;

    if (this.options.create && this.options.mapController) {
      this.create();
    }

    if (!this.options.extDiv) {
      ol.control.Control.call(this, {
        element: this.element,
        target: this.options.target || undefined
      });
    }
  };
  ol.inherits(c4g.maps.control.Sideboard, ol.control.Control);

  // Add methods
  c4g.maps.control.Sideboard.prototype = $.extend(c4g.maps.control.Sideboard.prototype, {

    /**
     * Creates the basic html-elements for the sideboard
     *
     * @return  {boolean}  'true' on success
     */
    create: function create() {
      var self, initClass, titleButtonBar, closeButton, capitalizedName, hideButton, caching;

      caching = this.options.caching;
      capitalizedName = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].capitalizeFirstLetter(this.options.name);
      self = this;

      // Do not hide when it is initialized open, or in an external div
      if (this.options.extDiv) {
        initClass = ' ' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN;
        // if (caching) {
        //     utils.storeValue(this.options.name, '1');
        // }
      } else {
        initClass = ' ' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE;
        // if (caching) {
        //     utils.storeValue(this.options.name, '0');
        // }
        this.options.mapController["active" + this.identifier] = this.options.mapController["active" + this.identifier] || false;

        this.button = document.createElement('button');
        $(this.button).on('click', function (event) {
          event.stopPropagation();
          // loose focus, otherwise it looks messy
          try {
            this.blur();
          } catch (e) {
            // [note] "this.blur()" does not work in IE-fullscreen-mode
            console.warn(e.name + ': ' + e.message);
          }
          if (capitalizedName == "Router" || capitalizedName == "Measure" || capitalizedName == "Editor") {
            self.toggle(true);
          } else {
            self.toggle();
          }
        });
        this.button.title = this.options.tipLabel;
        this.element.appendChild(this.button);
      }

      // Set attributes
      $(this.container).addClass('c4g-' + this.options.name + ' ' + 'c4g-' + this.cssname + '-container' + ' ' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + initClass);
      $(this.element).addClass('c4g-' + this.options.name + ' ' + 'c4g-' + this.cssname + '-control' + ' ' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' ' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL + initClass);

      // Set initial dimensions
      if (this.options.direction === 'right') {
        //this.container.style.minWidth = '250px';
        //this.container.style[this.options.direction] = '-1920px';
        this.container.style[this.options.direction] = '-100%';
      } else {
        //this.container.style.minWidth = '250px';
        //this.container.style[this.options.direction] = '-1920px';
        this.container.style[this.options.direction] = '-100%';
      }

      // Place container
      if (this.options.extDiv) {
        document.getElementById(this.options.extDiv).appendChild(this.container);
        //     this.options.mapController["active" + this.identifier] = this;
      } else {
        if (this.options.direction === 'left') {
          $('#' + this.options.mapController.map.getTarget() + ' .' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OL_OVERLAYCONTAINER_SE).append(this.container);
        } else {
          this.options.mapController.$overlaycontainer_stopevent.append(this.container);
        }
      }

      // Build content-area
      //
      // Wrapper
      this.wrapper = document.createElement('div');
      this.wrapper.className = 'c4g-' + this.cssname + '-wrapper';
      this.container.appendChild(this.wrapper);
      // Titlebar
      this.titleBar = document.createElement('div');
      this.titleBar.className = 'c4g-' + this.cssname + '-titlebar';
      this.wrapper.appendChild(this.titleBar);

      // Triggerbar
      this.viewTriggerBar = document.createElement('div');
      this.viewTriggerBar.className = 'c4g-' + this.cssname + '-viewtriggerbar';

      // Top-Toolbar
      this.topToolbar = this.addSection({
        className: 'c4g-' + this.cssname + '-top-toolbar',
        target: this.wrapper
      });

      // Content-Container
      this.contentContainer = this.addSection({
        className: 'c4g-' + this.cssname + '-content-container',
        target: this.wrapper
      });

      // add content headline
      this.contentHeadline = document.createElement('div');
      this.contentHeadline.className = 'contentHeadline';
      this.contentHeadline.innerHTML = '';
      this.contentContainer.appendChild(this.contentHeadline);

      // Bottom-Toolbar
      this.bottomToolbar = this.addSection({
        className: 'c4g-' + this.cssname + '-bottom-toolbar c4g-close',
        target: this.wrapper
      });

      // Statusbar
      this.statusBar = document.createElement('div');
      this.statusBar.className = 'c4g-' + this.cssname + '-statusbar c4g-close';
      this.wrapper.appendChild(this.statusBar);

      // Add spinner
      this.spinner = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__["a" /* Spinner */]({
        target: this.contentContainer,
        className: __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].LARGE
      });

      // Fill titlebar
      //
      // Headline
      this.headline = document.createElement('span');
      this.headline.className = 'c4g-' + this.cssname + '-headline';
      this.headline.innerHTML = this.options.headline;
      this.titleBar.appendChild(this.headline);
      // Buttonbar
      titleButtonBar = document.createElement('div');
      titleButtonBar.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CONTROL + ' ' + 'c4g-' + this.cssname + '-buttonbar';
      this.titleBar.appendChild(titleButtonBar);

      if (this.options.direction === 'left') {
        // Hidebutton
        hideButton = document.createElement('button');
        hideButton.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].PORTSIDE_HIDE;
        hideButton.title = langConstants.HIDE;
        $(hideButton).click(function (event) {
          event.preventDefault();
          self.close(true);
          return false;
        });
        titleButtonBar.appendChild(hideButton);
      }

      // Closebutton
      closeButton = document.createElement('button');
      closeButton.className = 'c4g-' + this.cssname + '-close';
      closeButton.title = langConstants.CLOSE;
      $(closeButton).click(function (event) {
        event.preventDefault();
        self.close();
        return false;
      });
      titleButtonBar.appendChild(closeButton);

      //Add spinner for left sided sideboard elements
      this.spinner = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__["a" /* Spinner */]({
        target: this.contentContainer,
        className: __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].LARGE
      });

      // Handle external DIV and default state
      // catch touch events and stop their propagation
      // otherwise touch-scrolling will be stopped by ol3
      $(this.container).on('touchstart touchmove touchend', function (event) {
        event.stopPropagation();
      });

      // Bind the update method to the map-resize event
      this.options.mapController.map.on('change:size', this.update, this);

      // Show open if desired
      if (this.options.defaultOpen || this.options.caching && __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getValue(this.options.name) == '1') {
        this.open();
      }

      return true;
    }, // end of "create"

    /**
     *   Update the sideboards html-elements
     *   resizes the content-container
     *   and the top-toolbar
     *
     * @param  {event-object}  opt_event  *optional*  Just needed by the ol-bind-method,
     *                                                but not used in the function
     */
    update: function update(opt_event) {

      var self, contentContainerOuterHeight, containerOffsetWidth;

      self = this;

      /*
      if (this.options && this.options.name) {
          capitalizedName = utils.capitalizeFirstLetter(this.options.name);
      }*/

      contentContainerOuterHeight = $(this.wrapper).height() - ($(this.titleBar).outerHeight(true) + $(this.statusBar).outerHeight(true));
      if (this.options && this.options.direction && this.options.direction != "undefined" && this.options.direction === 'left') {
        if (this !== this.options.mapController["active" + this.identifier]) {
          containerOffsetWidth = 0;
        }
      }

      // Top-Toolbar
      if (this.topToolbar) {
        if (this.topToolbar.innerHTML) {
          // this.topToolbar.style.display = 'block';
          this.topToolbar.style.display = '';
          contentContainerOuterHeight -= $(this.topToolbar).outerHeight(true);
        } else {
          this.topToolbar.style.display = 'none';
        }
      }

      // Bottom-toolbar
      if (this.bottomToolbar) {
        if (this.bottomToolbar.innerHTML) {
          // this.bottomToolbar.style.display = 'block';
          this.bottomToolbar.style.display = '';
          contentContainerOuterHeight -= $(this.bottomToolbar).outerHeight(true);
        } else {
          this.bottomToolbar.style.display = 'none';
        }
      }

      // Content-container
      $(this.contentContainer).outerHeight(contentContainerOuterHeight);

      // Correct width
      if (this.options) {
        if (this.options.mapController["active" + this.identifier] === this) {
          //this.container.style.width = 'auto';
          containerOffsetWidth = this.container.offsetWidth;
          this.options.mapController[this.options.direction + "SlideElements"].forEach(function (element) {
            $(element).css(self.options.direction, containerOffsetWidth);
          });

          //only move the toggle button on starboard elements
          if (this.options.direction === 'right') {
            $(this.element).css(this.options.direction, containerOffsetWidth);
          }
        }
      }
    }, // end of "update"

    /**
     * Opens this sideboard element
     *
     * @param   {object}    *optional* options to be passed to the initialize-function if it exists
     * @return  {boolean}  'true' an success
     */
    open: function open(opt_options) {
      var containerOffsetWidth, self;

      self = this;

      // Call initialize-functions, if existent
      if (!this.initialized) {
        if (typeof this.init === 'function') {
          this.initialized = this.init(opt_options);
        } else {
          this.initialized = true;
        }
      }

      // call preOpenFunctions
      if (typeof this.preOpenFunction === 'function') {
        this.preOpenFunction();
      }

      containerOffsetWidth = this.container.offsetWidth;

      if (this.options.extDiv) {
        // Not available on external divs
        console.warn('You cannot use this function on external embedded sideboard.');
      } else {
        if (this.options.mapController["active" + this.identifier]) {
          if (this.options.mapController["active" + this.identifier] === this) {
            return false;
          }
          //close other active sideboard on this side
          this.options.mapController["active" + this.identifier].close(true, true);
        } else {
          // slide other elements when no other sideboard was active on this side
          this.options.mapController[this.options.direction + "SlideElements"].forEach(function (element) {
            $(element).css(self.options.direction, containerOffsetWidth);
          });
        }

        $(this.container).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN).css(this.options.direction, 0);
        if (this.options.direction === 'left') {
          $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        } else {
          $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN).css(this.options.direction, containerOffsetWidth);
        }

        // set this as active Sideboard
        this.options.mapController["active" + this.identifier] = this;

        // check if a view needs to be reactivated
        if (this.activeView) {
          this.activeView.activate();
        }

        if ($(this.statusBar).hasClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
          $(this.statusBar).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        }

        if ($(this.bottomToolbar).hasClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
          $(this.bottomToolbar).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        }

        // show container to fix resizing issue
        $(this.container).css('visibility', 'visible');

        this.update();
        if (this.options.caching) {
          __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].storeValue(this.options.name, '1');
        }

        // call postOpenFunctions
        if (typeof this.postOpenFunction === 'function') {
          this.postOpenFunction();
        }

        return true;
      }
      return false;
    }, // end of "open"

    isOpen: function isOpen() {
      return this.options.mapController["active" + this.identifier] && this.options.mapController["active" + this.identifier] === this;
    },

    /**
     * Closes this sideboard element
     *
     * @param   {boolean}  opt_hide               *optional* Choose if this function should trigger |preHideFunction|
     *                                            instead of |preCloseFunction|. Default is |false|.
     * @param   {boolean}  opt_openOtherSideboard  *optional* Indicates if another sideboard element will be opened instead.
     *                                            Default is |false|.
     *
     * @return  {boolean}                         |true| on success.
     */
    close: function close(opt_hide, opt_openOtherSideboard) {
      var containerOffsetWidth, direction;

      direction = this.options.direction;

      if (opt_hide) {
        if (typeof this.preHideFunction === 'function') {
          this.preHideFunction();
        }
      } else {
        if (typeof this.preCloseFunction === 'function') {
          this.preCloseFunction();
        }
      }

      containerOffsetWidth = this.container.offsetWidth;

      if (this.options.extDiv) {
        // Not available on external divs
        console.warn('You cannot use this function on external embedded sideboard.');
      } else {
        if (this.options.mapController["active" + this.identifier] !== this) {
          console.warn('This ' + this.options.name + '-element (' + this.options.name + ') is already closed.');
          return false;
        }
        $(this.container).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).css(direction, -containerOffsetWidth);
        $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).css(direction, 0);

        if (!opt_openOtherSideboard) {
          // slide other elements
          this.options.mapController[direction + "SlideElements"].forEach(function (element) {
            $(element).css(direction, 0);
          });
        }

        // hide container to fix resizing issue
        $(this.container).css('visibility', 'hidden');

        // check if a view needs to be deactivated
        if (this.activeView) {
          this.activeView.deactivate(true);
        }

        // Remove active Sideboardentry
        this.options.mapController["active" + this.identifier] = false;

        if (this.options.caching) {
          __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].storeValue(this.options.name, '0');
        }
        return true;
      }
      return false;
    }, // end of "close"

    /**
     * Toggle this sideboard element
     *
     * @return  {boolean}  Returns |true| on success.
     */
    toggle: function toggle(opt_hide) {
      var capitalizedName;
      capitalizedName = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].capitalizeFirstLetter(this.options.name);
      if (this.options.mapController["active" + this.identifier] === this) {
        return this.close(opt_hide);
      }
      return this.open();
    }, // end of "toggle"

    /**
     * Creates a button which characteristics are defined by the options parameter
     * These options include e.g. the target container where the button will be appended and the click action of the button
     *
     * @param   {object}  opt_options  The button configuration
     *
     * @return  {[type]}           [description]
     */
    makeButton: function makeButton(opt_options) {

      var options, button;

      options = $.extend({
        label: undefined,
        tipLabel: undefined,
        className: '',
        target: undefined,
        clickAction: undefined
      }, opt_options);

      if (options.className) {
        options.className = ' ' + options.className;
      }

      button = document.createElement('button');
      button.className = 'c4g-' + this.options.name + '-button' + options.className;
      if (options.id) {
        button.id = options.id;
      }

      if (typeof options.tipLabel === 'string') {
        button.title = options.tipLabel;
      }

      if (typeof options.label === 'string') {
        button.innerHTML = options.label;
      } else if (_typeof(options.label) === 'object') {
        button.appendChild(options.label);
      }

      if (typeof options.clickAction === 'function') {
        $(button).click(function () {
          try {
            this.blur();
          } catch (e) {
            console.warn(e.message);
          }
          options.clickAction();
        });
      }

      if (options.target) {
        $(options.target).append(button);
      }

      return button;
    }, // end of "makeButton"

    /**
     * @TODO
     * [addSection description]
     *
     * @param  {[type]}  opt_options  [description]
     */
    addSection: function addSection(opt_options) {

      var options, section, element;

      options = $.extend({
        type: 'div',
        className: '',
        target: undefined
      }, opt_options);

      // try to create the new section
      try {
        section = document.createElement(options.type);
      } catch (e) {
        console.warn('Cannot create section. "' + options.type + ' is not a valid HTML-node.');
        return false;
      }

      section.className = options.className;

      // try to append the section to the given target
      if (options.target) {
        try {
          options.target.appendChild(section);
        } catch (e) {
          console.warn(e.message);
        }
      }

      section.getElement = function () {
        return element || false;
      };

      section.setElement = function (newElement) {
        if (newElement && (typeof newElement === "undefined" ? "undefined" : _typeof(newElement)) === 'object') {
          if (!(element && element === newElement)) {
            if (element) {
              this.removeChild(element);
            }
            this.appendChild(newElement);
            element = newElement;
          }
        }
      };

      // add to sections-array
      this.sections.push(section);
      return section;
    }, // end of "addSection"

    /**
     * @TODO
     * [addView description]
     *
     * @param  {[type]}  options  [description]
     */
    addView: function addView(options, opt_viewScope) {

      var self, viewScope, additionalTriggerClass, trigger, view;

      self = this;
      viewScope = opt_viewScope || this;

      options = $.extend({
        // name: undefined,
        triggerConfig: undefined, // @TODO doku format: {opt_target: [string|htmlObject], opt_className: [string], opt_tipLabel: [string]}
        sectionElements: [], // @TODO doku format: [{section: [sectionObject], element: [elementObject]}]
        initFunction: undefined,
        activateFunction: undefined,
        deactivateFunction: undefined
      }, options);

      if (typeof options.name !== 'string') {
        console.warn('Cannot add a view without a name (of type "string").');
        return false;
      }

      view = {};

      view.initialized = false;
      view.paused = false;

      view.activate = function (opt_openSideboard) {
        var i;

        if (options.triggerConfig.withHeadline) {
          self.contentHeadline.innerHTML = options.triggerConfig.tipLabel;
        }

        // open Sideboard if closed
        if (opt_openSideboard && !self.isOpen()) {
          self.open();
        }

        // Deactivate current activeView, if existent
        if (_typeof(viewScope.activeView) === 'object' && viewScope.activeView !== view) {
          viewScope.activeView.deactivate();
        }
        viewScope.activeView = view;

        // Handle sub-views
        if (view.activeView) {
          view.activeView.activate();
        }

        // Call initialize-functions, if existent
        if (!view.initialized) {
          if (typeof options.initFunction === 'function') {
            view.initialized = options.initFunction();
          } else {
            view.initialized = true;
          }
        }

        // Display elements in given sections
        if (options.sectionElements && options.sectionElements.length > 0) {
          for (i = 0; i < options.sectionElements.length; i += 1) {
            options.sectionElements[i].section.setElement(options.sectionElements[i].element);
          }
        }

        // Change trigger-state, if existent
        if (trigger) {
          $(trigger).addClass('c4g-active');
        }

        // Call activate function, if existent
        if (typeof options.activateFunction === 'function') {
          if (!options.activateFunction(view.paused)) {
            return false;
          }
        }

        view.paused = false;
        self.update();
        return true;
      };

      view.deactivate = function (opt_pause) {

        view.paused = opt_pause || false;

        if (_typeof(viewScope.activeView) === 'object' && viewScope.activeView === view) {
          if (trigger && !view.paused) {
            $(trigger).removeClass('c4g-active');
          }

          // Handle sub-views
          if (view.activeView) {
            view.activeView.deactivate(view.paused);
          }

          // Call deactivate function, if existent
          if (typeof options.deactivateFunction === 'function') {
            return options.deactivateFunction(view.paused);
          }
        }

        return true;
      };

      if (_typeof(options.triggerConfig) === 'object') {
        options.triggerConfig = $.extend({
          target: this.viewTriggerBar,
          tipLabel: options.name
        }, options.triggerConfig);

        options.triggerConfig.clickAction = view.activate;
        if (options.triggerConfig.className) {
          additionalTriggerClass = ' ' + options.triggerConfig.className;
        } else {
          additionalTriggerClass = '';
        }
        options.triggerConfig.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ICON + additionalTriggerClass;
        // @TODO check: trigger = this.makeButton(options.triggerConfig);
        trigger = this.makeButton(options.triggerConfig);
      }

      this.views.push(view);
      return view;
    } // end of "addView"

  }); // end of "add methods"
})(jQuery, this.c4g);

var Sideboard = this.c4g.maps.control.Sideboard;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboard.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboard.js ***!
  \***********************************************************/
/*! exports provided: Starboard */
/*! exports used: Starboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Starboard; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_starboardplugin_baselayerswitcher__ = __webpack_require__(/*! ./c4g-maps-control-starboardplugin-baselayerswitcher */ "./Resources/public/js/c4g-maps-control-starboardplugin-baselayerswitcher.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_starboardplugin_layerswitcher__ = __webpack_require__(/*! ./c4g-maps-control-starboardplugin-layerswitcher */ "./Resources/public/js/c4g-maps-control-starboardplugin-layerswitcher.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_starboardplugin_customtab__ = __webpack_require__(/*! ./c4g-maps-control-starboardplugin-customtab */ "./Resources/public/js/c4g-maps-control-starboardplugin-customtab.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};

var c4g = this.c4g;







(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {c4g.maps.control.Sideboard}
   * @param   {object}              opt_options  *optional* misc configuration options
   */

  c4g.maps.control.Starboard = function (opt_options) {

    this.options = $.extend({
      create: true,
      extDiv: false,
      defaultOpen: false,
      mapController: undefined,
      name: 'starboard',
      direction: 'right',
      filter: false
    }, opt_options);

    //window.c4gMapsHooks.starboard_loadPlugins = [];

    //set headline, since the definition above does not work for headline
    if (!this.options.headline || this.options.headline.length === 0) {
      //this.options.headline = c4g.maps.constant.i18n.STARBOARD;
    }

    this.hook_layerswitcher_loaded = this.hook_layerswitcher_loaded || [];

    //call Sideboard (parent) constructor
    __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Starboard, __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  // Add methods
  c4g.maps.control.Starboard.prototype = $.extend(c4g.maps.control.Starboard.prototype, {

    /**
     * Creates the basic html-elements for the starboard
     *
     * @return  {boolean}  'true' on success
     */
    init: function init() {

      var plugin,
          renderLayertree,
          key,
          layer,
          self,
          fnRender,
          displayLayerswitcher = false;

      if (this.initialized) {
        return true;
      }

      self = this;

      // Load Starboard plugins
      this.plugins = {};

      // creates and renders the starboard plugins
      fnRender = function fnRender() {
        // loop through layers and check if there is any normal layertree to render
        for (key in self.options.mapController.proxy.layerController.arrLayers) {
          if (self.options.mapController.proxy.layerController.arrLayers.hasOwnProperty(key)) {
            layer = self.options.mapController.proxy.layerController.arrLayers[key];
            if (!layer.renderSpecial) {
              renderLayertree = true;
              break;
            }
          }
        }

        if (renderLayertree) {
          // do not display layerswitcher if there is nothing to switch
          if (self.options.mapController.proxy.layerController.arrLayers) {
            for (var id in self.options.mapController.proxy.layerController.arrLayers) {
              if (self.options.mapController.proxy.layerController.arrLayers[id].display) {
                displayLayerswitcher = true;
              }
            }
          }
        }

        // - load "Layerswitcher"
        if (self.options.layerSwitcherCreate && renderLayertree && displayLayerswitcher) {
          self.plugins.layerswitcher = new __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_starboardplugin_layerswitcher__["a" /* Layerswitcher */](self);
        }

        // call hook to load additional starboard tabs (layers)
        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.hook_layerswitcher_loaded);

        // - check & load other Starboard-plugins (via hook)
        // called functions have to add themselves to this.plugins
        if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.starboard_loadPlugins) === 'object') {
          __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.starboard_loadPlugins, self);
          // - activate new plugins if they are not activated already
          for (plugin in self.plugins) {
            // Check if plugin is a real plugin and not a property of the object prototype
            if (self.plugins.hasOwnProperty(plugin)) {
              self.plugins[plugin].activate();
            }
          }
        }

        // - load "Baselayerswitcher"
        if (self.options.baselayerSwitcherCreate) {
          self.plugins.baselayerswitcher = new __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_starboardplugin_baselayerswitcher__["a" /* Baselayerswitcher */](self);
          self.plugins.baselayerswitcher.activate();
        }
        if (self.plugins.layerswitcher) {
          self.plugins.layerswitcher.activate();
        }
      }; // end of "fnRender()"


      if (!this.options.mapController.proxy.layers_loaded) {
        this.spinner.show();
        this.options.mapController.proxy.hook_layer_loaded.push(function (layerIds) {
          self.spinner.hide();
          fnRender();
        });
      } else {
        // layers are already loaded
        fnRender();
      }

      this.initialized = true;

      return true;
    } // end of "init"

  }); // End of add methods
})(jQuery, c4g);

var Starboard = this.c4g.maps.control.Starboard;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboardplugin-baselayerswitcher.js":
/*!***********************************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboardplugin-baselayerswitcher.js ***!
  \***********************************************************************************/
/*! exports provided: Baselayerswitcher */
/*! exports used: Baselayerswitcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Baselayerswitcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};
this.c4g.maps.control.starboardplugin = this.c4g.maps.control.starboardplugin || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {ol.control.Control}
   * @param   {object}              starboard
   */

  c4g.maps.control.starboardplugin.Baselayerswitcher = function (starboard) {
    if (!starboard) {
      console.warn('Cannot initialize Baselayerswitcher without a starboard.');
      return false;
    }

    this.initialized = false;
    this.baselayers = {};

    this.starboard = starboard;
    this.proxy = starboard.options.mapController.proxy;

    this.create();
    this.loadContent();
  };

  // Add methods
  c4g.maps.control.starboardplugin.Baselayerswitcher.prototype = $.extend(c4g.maps.control.starboardplugin.Baselayerswitcher.prototype, {

    /**
     * @TODO: [create description]
     *
     * @return  {[type]}  [description]
     */
    create: function create() {
      var self, contentWrapper, contentHeadline, contentInfo;

      self = this;

      contentWrapper = document.createElement('div');

      contentHeadline = document.createElement('div');
      contentHeadline.innerHTML = this.starboard.options.baselayerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER;
      contentHeadline.className = 'contentHeadline';
      contentWrapper.appendChild(contentHeadline);

      this.contentDiv = document.createElement('div');
      this.contentDiv.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_CONTENT_BASELAYERSWITCHER;
      contentInfo = document.createElement('p');
      this.contentDiv.appendChild(contentInfo);
      contentWrapper.appendChild(this.contentDiv);

      self.view = self.starboard.addView({
        name: 'layerswitcher',
        triggerConfig: {
          tipLabel: this.starboard.options.baselayerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER,
          className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER,
          withHeadline: false
        },
        sectionElements: [{ section: self.starboard.contentContainer, element: contentWrapper }, { section: self.starboard.topToolbar, element: self.starboard.viewTriggerBar }]
      });
    },

    /**
     * @TODO: [activate description]
     *
     * @return  {[type]}  [description]
     */
    activate: function activate() {
      this.view.activate();
    },

    /**
     * @TODO: [setContent description]
     *
     * @param  {[type]}  newContent  [description]
     */
    setContent: function setContent(newContent) {
      if (newContent) {
        if (typeof newContent === "string") {
          this.contentDiv.innerHTML = newContent;
        } else {
          try {
            if (this.contentDiv.firstChild) {
              this.contentDiv.replaceChild(newContent, this.contentDiv.firstChild);
            } else {
              this.contentDiv.appendChild(newContent);
            }
          } catch (e) {
            // @TODO
            console.warn(e.message);
            // return false;
          }
        }
      }
      return this.contentDiv.innerHTML;
    },

    loadContent: function loadContent() {
      var self, fnDrawContent;

      self = this;
      this.starboard.spinner.show();

      fnDrawContent = function fnDrawContent(baselayerIds) {
        self.baseLayerControl = document.createElement('div');
        $(self.baseLayerControl).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_BASELAYERTREE);
        self.setContent(self.baseLayerControl);

        self.addItems(baselayerIds, self.baseLayerControl);

        self.initialized = true;
        self.starboard.spinner.hide();
        self.starboard.update();
      }; // end of "fnDrawContent()"

      if (this.proxy.baselayers_loaded) {
        fnDrawContent(this.proxy.baselayerController.baselayerIds);
      } else {
        this.proxy.hook_baselayer_loaded.push(fnDrawContent);
      }
    }, // end of "loadContent()"

    /**
     * @TODO: [drawContent description]
     *
     * @param   {[type]}  contentData  [description]
     */
    drawContent: function drawContent(contentData) {
      // PASS
    }, // end of "drawContent()"

    /**
     * @TODO: [addItems description]
     *
     * @param  {[type]}  itemData        [description]
     * @param  {[type]}  wrapperElement  [description]
     * @param  {[type]}  options         [description]
     */
    addItems: function addItems(itemData, wrapperElement, options) {
      var i, j, self, wrapper, item, uid, listItem, childList, childItem, childEntry, toggle, entry, $entry, filter, handleEntryClick, handleChangeBaselayerVisibility;

      self = this;

      if ((typeof options === "undefined" ? "undefined" : _typeof(options)) !== "object") {
        options = {
          parseAsList: true
        };
      }

      handleEntryClick = function handleEntryClick(event) {
        event.preventDefault();

        var itemUid, siblings, baselayerItem;
        siblings = $(this).parent().siblings();
        for (var i = 0; i < siblings.length; i++) {
          if (siblings[i] && $(siblings[i]).hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN)) {
            if (self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId] && self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].hasOverlays) {
              for (var _j in self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].overlayController.arrOverlays) {
                if (self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].overlayController.arrOverlays.hasOwnProperty(_j)) self.proxy.options.mapController.map.removeLayer(self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].overlayController.arrOverlays[_j].layer);
              }
            }
            $(siblings[i]).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
          }
        }
        itemUid = $(this).data('uid');

        if (self.starboard.options.caching) {
          __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].storeValue('baselayer', itemUid);
        }

        if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
          $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        } else {
          $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
        }

        if (self.proxy.options.mapController.rightSlideElements) {
          self.proxy.options.mapController.rightSlideElements.forEach(function (element) {
            $(element).css('right', self.starboard.container.offsetWidth);
          });
        }
        $(self.starboard.element).css('right', self.starboard.container.offsetWidth);

        if (self.proxy.activeBaselayerId !== itemUid) {
          self.proxy.baselayerController.showBaseLayer(itemUid);
          if (self.proxy.baselayerController.arrBaselayers[itemUid].hasOverlays) {
            for (var _j2 in self.proxy.baselayerController.arrBaselayers[itemUid].overlayController.arrOverlays) {
              if (self.proxy.baselayerController.arrBaselayers[itemUid].overlayController.arrOverlays.hasOwnProperty(_j2)) {
                self.proxy.options.mapController.map.addLayer(self.proxy.baselayerController.arrBaselayers[itemUid].overlayController.arrOverlays[_j2].layer);
              }
            }
          }
          $(this).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);

          // if(this.nextSibling){
          //     var children = this.nextSibling.childNodes;
          //     for(i = 0; i < children.length; i++){
          //         $(children[i].firstChild).addClass(cssConstants.ACTIVE).removeClass(cssConstants.INACTIVE);
          //     }
          // }
          window.c4gMapsHooks.baselayer_changed = window.c4gMapsHooks.baselayer_changed || [];
          __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.baselayer_changed, itemUid);
        }
      }; // end of "handleEntryClick()"

      handleChangeBaselayerVisibility = function handleChangeBaselayerVisibility(baselayerConfig) {
        var id;

        for (id in self.baselayers) {
          if (self.baselayers.hasOwnProperty(id)) {
            if (id === baselayerConfig.id) {
              self.baselayers[id].$entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            } else {
              self.baselayers[id].$entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
          }
        }
      };

      wrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');

      if (itemData.length > 0) {

        for (i = 0; i < itemData.length; i += 1) {

          uid = itemData[i];
          this.baselayers[uid] = {};

          listItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
          this.baselayers[uid].entryWrapper = listItem;
          entry = document.createElement('a');
          entry.setAttribute('href', '#');
          entry.appendChild(document.createTextNode(self.proxy.baselayerController.arrBaselayers[uid].name));
          $(entry).data('id', uid);
          if (self.proxy.baselayerController.arrBaselayers[uid].hasOverlays) {

            childList = document.createElement('ul');options.parseAsList ? document.createElement('ul') : document.createElement('div');
            for (j = 0; j < self.proxy.baselayerController.arrBaselayers[uid].overlays.length; j++) {
              childItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
              childEntry = document.createElement('a');
              if (self.proxy.activeBaselayerId == uid) {
                $(childEntry).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                var overlayId = self.proxy.baselayerController.arrBaselayers[uid].overlays[j].id;
                self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays[overlayId].changeOpacity(self.proxy.baselayerController.arrBaselayers[uid].overlays[j].opacity);
              } else {
                $(childEntry).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
              }

              childEntry.appendChild(document.createTextNode(self.proxy.baselayerController.arrBaselayers[uid].overlays[j].name));
              $(childEntry).data('id', self.proxy.baselayerController.arrBaselayers[uid].overlays[j].id);
              $(childEntry).data('pid', uid);
              toggle = document.createElement('input');
              toggle.className = 'c4g-overlay-toggle';
              toggle.setAttribute('type', 'range');
              toggle.setAttribute('min', 0);
              toggle.setAttribute('max', 100);
              toggle.setAttribute('value', self.proxy.baselayerController.arrBaselayers[uid].overlays[j].opacity);
              toggle.setAttribute('steps', 10);
              $(toggle).on('input', function (event) {
                self.proxy.baselayerController.arrBaselayers[$(this).parent().data('pid')].overlayController.arrOverlays[$(this).parent().data('id')].changeOpacity(this.value);
              });

              childEntry.appendChild(toggle);
              childItem.appendChild(childEntry);
              childList.appendChild(childItem);
            }
          }
          listItem.appendChild(entry);
          if (childList) {
            listItem.appendChild(childList);
            childList = undefined;
          }

          $entry = $(entry);
          this.baselayers[uid].$entry = $entry;

          if (this.starboard.options.mapController.data.default_baselayer && parseInt(uid, 10) === parseInt(self.starboard.options.mapController.data.default_baselayer, 10)) {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
            if (self.proxy.baselayerController.arrBaselayers[uid].hasOverlays) {
              for (var _j3 in self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays) {
                if (self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays.hasOwnProperty(_j3)) {
                  self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays[_j3].changeOpacity(self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays[_j3].opacity);
                }
              }
            }
          } else {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
          }

          $entry.data('uid', uid);
          $entry.click(handleEntryClick);

          wrapper.appendChild(listItem);
        }
        // Starboard Filter
        if (this.starboard.options.filter) {
          var dv = document.createElement('div');
          dv.className = "c4g-starboard-filter c4g-content-select";
          var filter = document.createElement('input');
          filter.type = 'text';
          filter.placeholder = ""; //Font Awesome
          var i = document.createElement('i');
          i.className = 'fas fa-filter';
          i.setAttribute("aria-hidden", "true");
          dv.appendChild(filter);
          dv.appendChild(i);
          filter.onkeyup = function () {
            function filter_ulli(element, showSubtree) {

              // do not apply filter for short search terms

              showSubtree = showSubtree || false; // used while traversing down the tree

              /**
               * Returns an array (modified: first element) of the given elements. Only finds children of the given parent element, but
               * no further descendants like getElementsByTagName does.
               */
              function getChildrenByTagName(element, tagName) {
                var found = [];
                for (var i = 0; i < element.children.length; i++) {
                  if (element.children[i].tagName.toUpperCase() == tagName.toUpperCase()) {
                    found.push(element.children[i]);
                  }
                }
                if (found.length > 0) {
                  return found[0]; // !!!
                } else {
                  return false;
                }
              }

              var matchFlagUl = false;
              var subtreeMatches = false;
              // for each LI do
              if (element.children) {
                for (var i = 0; i < element.children.length; i++) {
                  element.children[i].style.display = "block";

                  var isMatch = false;

                  // search current LI for filter term
                  if (element.children[i].getElementsByTagName('a')[0].innerHTML.toUpperCase().indexOf(filter.value.toUpperCase()) >= 0) {
                    // it's a match
                    isMatch = true;
                  }

                  // recurse if a subtree (UL) exists in current LI (max 1 expected)
                  var ul = getChildrenByTagName(element.children[i], "ul");

                  if (ul) {
                    // recursion
                    var hasSubtree = true;
                    subtreeMatches = filter_ulli(ul, showSubtree || isMatch);
                  } else {
                    var hasSubtree = false;
                  }

                  if (isMatch || subtreeMatches || showSubtree) {
                    matchFlagUl = true; // used while traversing up the tree again
                    // set current LI visible and open
                    element.children[i].style.display = "";

                    if (filter.value.length > 2) {
                      element.children[i].classList.remove("c4g-close");
                      element.children[i].classList.add("c4g-open");
                    }

                    element.children[i].classList.remove("c4g-starboard-filter-match"); // always remove
                    if (isMatch && filter.value.length > 0) {
                      element.children[i].classList.add("c4g-starboard-filter-match");
                    }
                    ;
                  } else {
                    // set current LI invisible
                    element.children[i].style.display = "none";
                    element.children[i].classList.remove("c4g-open");
                    element.children[i].classList.add("c4g-close");
                    element.children[i].classList.remove("c4g-starboard-filter-match");
                  }
                }

                if (matchFlagUl) {
                  return true;
                } else {
                  return false;
                }
              }
            }

            // do not react immediately but allow for some keystrokes
            setTimeout(function () {
              // two or zero letters are required
              if (filter.value.length != 1) filter_ulli(document.querySelector('.c4g-baselayertree > ul:nth-child(2)'));
            }, 350);
          };

          wrapperElement.appendChild(dv);
        }

        this.proxy.hook_baselayer_visibility.push(handleChangeBaselayerVisibility);
      }
      wrapperElement.appendChild(wrapper);
    } // end of "addItems()"

  }); // end of "add methods"
})(jQuery, this.c4g);

var Baselayerswitcher = this.c4g.maps.control.starboardplugin.Baselayerswitcher;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboardplugin-customtab.js":
/*!***************************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboardplugin-customtab.js ***!
  \***************************************************************************/
/*! exports provided: Customtab */
/*! exports used: Customtab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Customtab; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};
this.c4g.maps.control.starboardplugin = this.c4g.maps.control.starboardplugin || {};




var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   *
   * @param starboard
   * @param plugin
   * @param projectConf
   * @returns {boolean}
   * @constructor
   */

  c4g.maps.control.starboardplugin.Customtab = function (starboard, projectConf) {
    if (!starboard) {
      console.warn('Cannot initialize Project-tab without a starboard.');
      return false;
    }
    projectConf = $.extend({
      tabId: null,
      name: "Customtab",
      awesomeicon: ''
    }, projectConf);

    if (!projectConf.tabId) {
      console.warn('Cannot initialize Project-tab without an id.');
      return false;
    }

    this.initialized = false;
    //this.plugin = plugin || false;
    this.contentLoaded = false;
    this.starboard = starboard;
    this.proxy = starboard.options.mapController.proxy;
    this.map = this.proxy.options.mapController.map;
    this.layers = {};
    this.tabId = projectConf.tabId;
    this.name = projectConf.name;
    this.awesomeicon = projectConf.awesomeicon.replace('&#92;', "\\");
    starboard.plugins["customTab" + this.tabId] = this;
    this.create();
  };

  // Add methods
  c4g.maps.control.starboardplugin.Customtab.prototype = $.extend(c4g.maps.control.starboardplugin.Customtab.prototype, {

    /**
     * @TODO: [create description]
     *
     * @return  {[type]}  [description]
     */
    create: function create() {
      var self, contentWrapper, contentHeadline, contentHeadlineLink, selector, layerSwitcherTitle;

      self = this;
      contentWrapper = document.createElement('div');
      contentHeadline = document.createElement('div');
      contentHeadline.className = 'contentHeadline';

      layerSwitcherTitle = this.starboard.options.layerSwitcherTitle;

      if (self.name) {
        layerSwitcherTitle = self.name;
      }

      if (!this.starboard.options.button) {
        contentHeadline.innerHTML = layerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
      } else {
        $(contentHeadline).addClass("c4g-starboard-headline");
        contentHeadlineLink = document.createElement('a');
        contentHeadlineLink.onclick = function () {
          if ($(this).hasClass("c4g-active") !== false) {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.hideLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-active");
            $(this).addClass("c4g-inactive");
          } else {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.showLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-inactive");
            $(this).addClass("c4g-active");
          }
        };
        $(contentHeadlineLink).addClass("c4g-inactive c4g-starboard-headline-link");
        contentHeadlineLink.innerHTML = layerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
        contentHeadlineLink.innerHTML = contentHeadlineLink.innerHTML + ' ';
        contentHeadline.appendChild(contentHeadlineLink);
      }

      contentWrapper.appendChild(contentHeadline);

      this.contentDiv = document.createElement('div');
      this.contentDiv.className = 'c4g_starboardplugin_content';
      contentWrapper.appendChild(this.contentDiv);

      self.view = self.starboard.addView({
        name: self.name,
        triggerConfig: {
          tipLabel: self.name,
          className: 'c4g-starboard-view-trigger-starboardplugin-' + self.tabId,
          withHeadline: false
        },
        sectionElements: [{ section: self.starboard.contentContainer, element: contentWrapper }, { section: self.starboard.topToolbar, element: self.starboard.viewTriggerBar }]
      });
      if (this.awesomeicon.substring(0, 1) === "\\") {
        this.awesomeicon = this.awesomeicon.substring(1, this.awesomeicon.length);
      }
      selector = 'button.c4g-starboard-view-trigger-starboardplugin-' + self.tabId;
      //ToDo möglicherweise standard icon ?
      if (this.awesomeicon.length > 0) {
        var styleEl = document.createElement('style'),
            styleSheet;

        // Append style element to head
        document.head.appendChild(styleEl);

        // Grab style sheet
        styleSheet = styleEl.sheet;
        // catch firefox, because FF does not know "addRule"
        if (styleSheet.addRule && typeof document.styleSheets[0].addRule === 'function') {
          styleSheet.addRule(selector + ':before', 'content: "\\' + this.awesomeicon + '";');
        } else {
          styleSheet.insertRule(selector + ':before { content: "\\' + this.awesomeicon + '";}', 0);
        }
      }
      this.activate();
    },

    /**
     * @TODO: [activate description]
     *
     * @return  {[type]}  [description]
     */
    activate: function activate() {
      this.view.activate();
      if (!this.contentLoaded) {
        this.loadContent();
      }
    },

    /**
     * @TODO: [setContent description]
     *
     * @param  {Node}  newContent  [description]
     */
    setContent: function setContent(newContent) {
      if (newContent) {
        if (typeof newContent === "string") {
          this.contentDiv.innerHTML = newContent;
        } else {
          try {
            if (this.contentDiv.firstChild) {
              this.contentDiv.replaceChild(newContent, this.contentDiv.firstChild);
            } else {
              this.contentDiv.appendChild(newContent);
            }
          } catch (e) {
            // @TODO
            console.warn(e.message);
            // return false;
          }
        }
      }
      return this.contentDiv.innerHTML;
    },

    /**
     * @TODO: [loadContent description]
     *
     * @return  {[type]}  [description]
     */
    loadContent: function loadContent() {
      var self, fnDrawContent;

      self = this;
      this.starboard.spinner.show();

      fnDrawContent = function fnDrawContent(layerIds) {
        self.treeControl = document.createElement('div');
        $(self.treeControl).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_LAYERTREE);
        self.setContent(self.treeControl);
        self.addItems(layerIds, self.treeControl, { parseAsList: true });
        self.initialized = true;
        self.contentLoaded = true;
        self.starboard.spinner.hide();
        self.starboard.update();
      }; // end of "fnDrawContent()"

      fnDrawContent(this.proxy.layerIds);
    }, // end of "loadContent()"

    /**
     * @TODO: [addItems description]
     *
     * @param  {[type]}  itemData        [description]
     * @param  {[type]}  wrapperElement  [description]
     * @param  {[type]}  options         [description]
     */
    addItems: function addItems(itemData, wrapperElement, options) {
      var i, wrapper, item, layer, uid, listItem, entry, $entry, handleEntryClick, self, pWrapper, toggle, childWrapper;

      options = options || {};
      options = $.extend({
        parseAsList: true
      }, options);

      self = this;

      handleEntryClick = function handleEntryClick(event) {
        var itemUid;

        event.preventDefault();
        // "this" is the event sending entry
        itemUid = $(this).data('uid');
        if (self.proxy.activeLayerIds[itemUid]) {
          // hide layer
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          $(this).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
          self.hideLayer(itemUid);
        } else {
          // show layer
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
          $(this).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          self.showLayer(itemUid);
        }
      };

      // register hook to switch childs of layers as well
      this.proxy.hook_layer_visibility.push(function (layerId) {
        var j, changedLayer;

        changedLayer = self.layers[layerId];
        if (changedLayer && changedLayer.$entries) {
          for (j = 0; j < changedLayer.$entries.length; j += 1) {
            if (self.proxy.activeLayerIds[layerId]) {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            } else {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
          }
        }
      }); // end of hook

      // add hook function for changed zoom
      //   needed to change the entry-classes
      this.proxy.hook_map_zoom.push(function () {
        var j, id, layer;

        for (id in self.layers) {
          if (self.layers.hasOwnProperty(id)) {
            layer = self.layers[id];
            if (layer && layer.$entries) {
              for (j = 0; j < layer.$entries.length; j += 1) {
                if (self.proxy.checkLayerIsActiveForZoom(id)) {
                  layer.$entries[j].removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                } else {
                  layer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                }
              }
            }
          }
        }
      }); // end of hook

      // build the layer tree
      wrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
      if (itemData && itemData.length > 0) {
        for (i = 0; i < itemData.length; i += 1) {
          uid = itemData[i];
          //layer = this.plugin.customTabs[this.tabId].drawnFeatures[uid];
          layer = this.proxy.layerController.arrLayers[uid];
          // skip layer if it doesn't belong to this tab
          if (!(layer.renderSpecial == true && layer.tabId == this.tabId)) {
            continue;
          }
          // do not render the startab layer itself as parent level
          if (layer.type === "startab") {
            continue;
          }
          // check if layer wants to be displayed in starboard tab
          if (layer.hideWhenInTab === true) {
            continue;
          }
          if (layer.hide === "1") {
            if (this.proxy.activeLayerIds[layer.id]) {
              // this.hideLayer(layer.id);
            }
          }
          // check if the layer should be displayed
          if (!layer.display) {
            continue;
          }
          item = {};
          this.layers[uid] = item;
          listItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
          item.entryWrappers = item.entryWrappers || [];
          item.entryWrappers.push(listItem);
          entry = document.createElement('a');
          entry.setAttribute('href', '#');
          entry.appendChild(document.createTextNode(layer.layername || layer.name));
          listItem.appendChild(entry);
          $entry = $(entry);
          item.$entries = item.$entries || [];
          item.$entries.push($entry);
          $entry.data('uid', uid);
          $entry.click(handleEntryClick);

          // prepare insertion of childs
          if (layer.visibleChilds) {
            toggle = document.createElement('span');
            $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
            $(toggle).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ICON);
            $(toggle).click(function () {
              if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
                $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
              } else {
                $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
              }
              if (self.proxy.options.mapController.rightSlideElements) {
                self.proxy.options.mapController.rightSlideElements.forEach(function (element) {
                  $(element).css('right', self.starboard.container.offsetWidth);
                });
              }
              $(self.starboard.element).css('right', self.starboard.container.offsetWidth);
            });
            $(toggle).insertBefore($entry);
            childWrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
            item.childWrappers = item.childWrappers || [];
            item.childWrappers.push(childWrapper);
            listItem.appendChild(childWrapper);
          }

          if (this.proxy.activeLayerIds[uid]) {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          } else {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
          }
          if (this.layers[layer.pid]) {
            // is child-element
            pWrapper = this.layers[layer.pid].childWrappers;
            if (pWrapper) {
              pWrapper[pWrapper.length - 1].appendChild(listItem);
            }
          } else {
            wrapper.appendChild(listItem);
          }
        } // end of for-loop
        // Starboard Filter
        if (this.starboard.options.filter) {
          var dv = document.createElement('div');
          dv.className = "c4g-starboard-filter c4g-content-select";
          var filter = document.createElement('input');
          filter.type = 'text';
          filter.placeholder = ""; //Font Awesome
          var i = document.createElement('i');
          i.className = 'fas fa-filter';
          i.setAttribute("aria-hidden", "true");
          dv.appendChild(filter);
          dv.appendChild(i);
          filter.onkeyup = function () {
            function filter_ulli(element, showSubtree) {

              // do not apply filter for short search terms

              showSubtree = showSubtree || false; // used while traversing down the tree

              /**
               * Returns an array (modified: first element) of the given elements. Only finds children of the given parent element, but
               * no further descendants like getElementsByTagName does.
               */
              function getChildrenByTagName(element, tagName) {
                var found = [];
                for (var i = 0; i < element.children.length; i++) {
                  if (element.children[i].tagName.toUpperCase() == tagName.toUpperCase()) {
                    found.push(element.children[i]);
                  }
                }
                if (found.length > 0) {
                  return found[0]; // !!!
                } else {
                  return false;
                }
              }

              var matchFlagUl = false;
              var subtreeMatches = false;
              // for each LI do
              for (var i = 0; i < element.children.length; i++) {
                element.children[i].style.display = "block";

                var isMatch = false;

                // search current LI for filter term
                if (element.children[i].getElementsByTagName('a')[0].innerHTML.toUpperCase().indexOf(filter.value.toUpperCase()) >= 0) {
                  // it's a match
                  isMatch = true;
                }

                // recurse if a subtree (UL) exists in current LI (max 1 expected)
                var ul = getChildrenByTagName(element.children[i], "ul");

                if (ul) {
                  // recursion
                  var hasSubtree = true;
                  subtreeMatches = filter_ulli(ul, showSubtree || isMatch);
                } else {
                  var hasSubtree = false;
                }

                if (isMatch || subtreeMatches || showSubtree) {
                  matchFlagUl = true; // used while traversing up the tree again
                  // set current LI visible and open
                  element.children[i].style.display = "";

                  if (filter.value.length > 2) {
                    element.children[i].classList.remove("c4g-close");
                    element.children[i].classList.add("c4g-open");
                  }

                  element.children[i].classList.remove("c4g-starboard-filter-match"); // always remove
                  if (isMatch && filter.value.length > 0) {
                    element.children[i].classList.add("c4g-starboard-filter-match");
                  }
                } else {
                  // set current LI invisible
                  element.children[i].style.display = "none";
                  element.children[i].classList.remove("c4g-open");
                  element.children[i].classList.add("c4g-close");
                  element.children[i].classList.remove("c4g-starboard-filter-match");
                }
              }

              if (matchFlagUl) {
                return true;
              } else {
                return false;
              }
            }

            // do not react immediately but allow for some keystrokes
            setTimeout(function () {
              // two or zero letters are required
              if (filter.value.length != 1) filter_ulli(document.querySelector('.c4g-layertree > ul:nth-child(2)'));
            }, 350);
          };

          wrapperElement.appendChild(dv);
        }
        wrapperElement.appendChild(wrapper);
      }
    }, // end of "addItems()"

    showLayer: function showLayer(itemUid) {
      if (this.proxy.activeLayerIds[itemUid]) {
        return true;
      } else {
        this.proxy.layerController.showLayer(itemUid);
      }
    }, // end of "showLayer()"

    hideLayer: function hideLayer(itemUid) {
      if (!this.proxy.activeLayerIds[itemUid]) {
        return true;
      } else {
        this.proxy.layerController.hideLayer(itemUid);
      }
    } // end of "hideLayer()"


  }); // end of "add methods"
})(jQuery, this.c4g);

var Customtab = this.c4g.maps.control.starboardplugin.Customtab;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboardplugin-layerswitcher.js":
/*!*******************************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboardplugin-layerswitcher.js ***!
  \*******************************************************************************/
/*! exports provided: Layerswitcher */
/*! exports used: Layerswitcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Layerswitcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};
this.c4g.maps.control.starboardplugin = this.c4g.maps.control.starboardplugin || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {ol.control.Control}
   * @param   {object}              starboard
   */

  c4g.maps.control.starboardplugin.Layerswitcher = function (starboard) {
    if (!starboard) {
      console.warn('Cannot initialize Layerswitcher without a starboard.');
      return false;
    }

    this.initialized = false;
    this.layers = {};

    this.starboard = starboard;
    this.proxy = starboard.options.mapController.proxy;
    this.create();
    this.loadContent();
  };

  // Add methods
  c4g.maps.control.starboardplugin.Layerswitcher.prototype = $.extend(c4g.maps.control.starboardplugin.Layerswitcher.prototype, {

    create: function create() {
      var self, contentWrapper, contentHeadline, contentHeadlineLink, contentInfo, layerSwitcherTitle;

      layerSwitcherTitle = this.starboard.options.layerSwitcherTitle;

      self = this;

      contentWrapper = document.createElement('div');
      contentHeadline = document.createElement('div');
      contentHeadline.className = 'contentHeadline';

      if (!this.starboard.options.button) {
        contentHeadline.innerHTML = layerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
      } else {
        $(contentHeadline).addClass("c4g-starboard-headline");
        contentHeadlineLink = document.createElement('a');
        contentHeadlineLink.onclick = function () {
          if ($(this).hasClass("c4g-active") !== false) {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.hideLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-active");
            $(this).addClass("c4g-inactive");
          } else {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.showLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-inactive");
            $(this).addClass("c4g-active");
          }
        };
        $(contentHeadlineLink).addClass("c4g-inactive c4g-starboard-headline-link");
        contentHeadlineLink.innerHTML = layerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
        contentHeadlineLink.innerHTML = contentHeadlineLink.innerHTML + ' ';
        contentHeadline.appendChild(contentHeadlineLink);
      }

      contentWrapper.appendChild(contentHeadline);

      this.contentDiv = document.createElement('div');
      this.contentDiv.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_CONTENT_LAYERSWITCHER;
      contentInfo = document.createElement('p');
      this.contentDiv.appendChild(contentInfo);
      contentWrapper.appendChild(this.contentDiv);

      self.view = self.starboard.addView({
        name: 'layerswitcher',
        triggerConfig: {
          tipLabel: layerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_LAYERSWITCHER,
          className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_VIEW_TRIGGER_LAYERSWITCHER,
          withHeadline: false
        },
        sectionElements: [{ section: self.starboard.contentContainer, element: contentWrapper }, { section: self.starboard.topToolbar, element: self.starboard.viewTriggerBar }]
      });
    },

    /**
     * @TODO: [activate description]
     *
     * @return  {[type]}  [description]
     */
    activate: function activate() {
      this.view.activate();
    }, // end of "activate()"

    /**
     * @TODO: [setContent description]
     *
     * @param  {[type]}  newContent  [description]
     */
    setContent: function setContent(newContent) {
      if (newContent) {
        if (typeof newContent === "string") {
          this.contentDiv.innerHTML = newContent;
        } else {
          try {
            if (this.contentDiv.firstChild) {
              this.contentDiv.replaceChild(newContent, this.contentDiv.firstChild);
            } else {
              this.contentDiv.appendChild(newContent);
            }
          } catch (e) {
            // @TODO
            console.warn(e.message);
            // return false;
          }
        }
      }
      return this.contentDiv.innerHTML;
    }, // end of "setContent()"

    /**
     * @TODO: [loadContent description]
     *
     * @return  {[type]}  [description]
     */
    loadContent: function loadContent() {
      var self, fnDrawContent;

      self = this;
      this.starboard.spinner.show();

      fnDrawContent = function fnDrawContent(layerIds) {
        self.treeControl = document.createElement('div');
        $(self.treeControl).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_LAYERTREE);
        self.setContent(self.treeControl);

        self.addItems(layerIds, self.treeControl);

        self.initialized = true;
        self.starboard.spinner.hide();
        self.starboard.update();
      }; // end of "fnDrawContent()"

      if (this.proxy.layers_loaded) {
        fnDrawContent(this.proxy.layerIds);
      } else {
        this.proxy.hook_layer_loaded.push(fnDrawContent);
      }
    }, // end of "loadContent()"

    /**
     * @TODO: [drawContent description]
     */
    drawContent: function drawContent(contentData) {
      // PASS
    }, // end of "drawContent()"

    /**
     * @TODO: [addItems description]
     *
     * @param  {[type]}  itemData        [description]
     * @param  {[type]}  wrapperElement  [description]
     * @param  {[type]}  options         [description]
     */
    addItems: function addItems(itemData, wrapperElement, options) {
      var i, self, filter, wrapper, childWrapper, pWrapper, item, layer, uid, listItem, entry, $entry, toggle, fnHandleEntryClick, fnChildEntryClick, fnChildEntryShow, zoomToExtent, layerClass;

      self = this;

      options = options || {};
      options = $.extend({
        parseAsList: true
      }, options);

      wrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');

      // create handler for entry-clicks
      fnHandleEntryClick = function fnHandleEntryClick(event) {
        var itemUid, layerItem;

        event.preventDefault();

        itemUid = $(this).data('uid');
        layerItem = self.proxy.layerController.arrLayers[itemUid];

        if (self.proxy.activeLayerIds[itemUid]) {
          // hide layer
          self.proxy.layerController.hideLayer(itemUid);
          if (parseInt(layer.pid, 10) == 0) {
            // hide all childs, because clicked layer is the map itself
            for (var id in self.proxy.activeLayerIds) {
              if (self.proxy.activeLayerIds.hasOwnProperty(id)) {
                self.proxy.layerController.hideLayer(id);
              }
            }
          }
        } else {
          // show layer
          self.proxy.layerController.showLayer(itemUid);
          //zooom to extent
          zoomToExtent(itemUid);
        }
        if (self.handleSelectedChilds(this)) {
          self.updateParentLayers(this, itemUid, layerItem);
        }

        // c4g.maps.layers[itemUid] = layerItem;
      }; // end of "fnHandleEntryClick()"
      fnChildEntryClick = function fnChildEntryClick(event) {
        event.preventDefault();
        var itemUid = $(this).data('uid');
        var parent = $(this).parent().parent().parent();
        var childs = $(parent).children();
        var parentUid = $(childs[1]).data('uid');
        if ($(this).hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE)) {
          self.proxy.layerController.hideChildLayer(parentUid, itemUid);
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
        } else if ($(this).hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE)) {
          self.proxy.layerController.showChildLayer(parentUid, itemUid);
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
        }
      };
      fnChildEntryShow = function fnChildEntryShow(event) {
        event.preventDefault();
        var parent = this.parentElement;
        var uid = $(parent.firstChild).data('uid');
        parent = $(this).parent().parent().parent();
        var childs = $(parent).children();
        var parentUid = $(childs[1]).data('uid');
        uid = uid.replace(parentUid, '');
        var layer = self.proxy.layerController.arrLayers[parentUid].vectorLayer;
        if (layer) {
          var singleLayer = layer.getLayers().getArray()[uid];
          var feature = singleLayer.getSource().getFeatures()[0];
          self.proxy.options.mapController.map.getView().fit(feature.getGeometry());
        }
      };

      zoomToExtent = function zoomToExtent(itemUid) {
        //function to zoom to the extent of a map structure and its children
        var layerItem,
            vectorArray,
            layerGroup,
            coords,
            geometry,
            featureList,
            featureArray,
            coordinates = [],
            extent,
            center,
            key;
        layerItem = self.proxy.layerController.arrLayers[itemUid];
        if (layerItem && layerItem.zoom_locations === "1") {
          if (layerItem.hasChilds) {
            for (key in layerItem.childs) {
              if (layerItem.childs.hasOwnProperty(key)) {
                layer = layerItem.childs[key];
                if (layer.type == "overpass") {
                  continue;
                }
                vectorArray = layer.content;
                if (vectorArray === undefined) {
                  // catch case of linked layers
                  continue;
                }
                if ((typeof vectorArray === "undefined" ? "undefined" : _typeof(vectorArray)) === "object") {
                  vectorArray = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].objectToArray(vectorArray);
                }
                layerGroup = layer.vectorLayer;
                if (vectorArray && vectorArray.forEach && typeof vectorArray.forEach === 'function') {
                  vectorArray.forEach(function (vectorLayer) {
                    if (vectorLayer && vectorLayer.data && vectorLayer.data.geometry && vectorLayer.data.geometry.coordinates) {
                      if (vectorLayer.data.geometry.type === "Point") {
                        coords = ol.proj.transform([parseFloat(vectorLayer.data.geometry.coordinates[0]), parseFloat(vectorLayer.data.geometry.coordinates[1])], 'EPSG:4326', 'EPSG:3857');
                        geometry = new ol.geom.Point(coords);
                        coordinates.push(geometry.getCoordinates());
                      }
                    }
                  });
                }
                if (layerGroup) {
                  // handle more complex geometries
                  featureList = layerGroup.getLayers();
                  featureArray = featureList.getArray();
                  featureArray.forEach(function (feature) {
                    if (layer.type === "kml") {
                      var source = feature.getSource();
                      //var sourceFeatures = source.getFeatures();
                      source.getExtent().forEach(function (coordinate) {
                        coordinates.push(coordinate);
                      });
                    } else {
                      if (ol.extent.getTopRight(feature.getSource().getExtent())['0'] != "Infinity" && ol.extent.getTopRight(feature.getSource().getExtent())['0'] != "-Infinity") {

                        coordinates.push(ol.extent.getTopRight(feature.getSource().getExtent()));
                        coordinates.push(ol.extent.getTopLeft(feature.getSource().getExtent()));
                        coordinates.push(ol.extent.getBottomRight(feature.getSource().getExtent()));
                        coordinates.push(ol.extent.getBottomLeft(feature.getSource().getExtent()));
                      }
                    }
                  });
                }
              }
            }
          }

          if (layerItem.type !== "overpass" && layerItem.vectorLayer) {
            vectorArray = layer.content;
            if (vectorArray !== undefined) {
              // catch case of linked layers
              if ((typeof vectorArray === "undefined" ? "undefined" : _typeof(vectorArray)) === "object") {
                vectorArray = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].objectToArray(vectorArray);
              }
              layerGroup = layer.vectorLayer;
              if (vectorArray && vectorArray.forEach && typeof vectorArray.forEach === 'function') {
                vectorArray.forEach(function (vectorLayer) {
                  if (vectorLayer && vectorLayer.data && vectorLayer.data.geometry && vectorLayer.data.geometry.coordinates) {
                    if (vectorLayer.data.geometry.type === "Point") {
                      coords = ol.proj.transform([parseFloat(vectorLayer.data.geometry.coordinates[0]), parseFloat(vectorLayer.data.geometry.coordinates[1])], 'EPSG:4326', 'EPSG:3857');
                      geometry = new ol.geom.Point(coords);
                      coordinates.push(geometry.getCoordinates());
                    }
                  }
                });
              }
              if (layerGroup) {
                // handle more complex geometries
                featureList = layerGroup.getLayers();
                featureArray = featureList.getArray();
                featureArray.forEach(function (feature) {
                  if (layer.type !== "overpass") {
                    if (layer.type === "kml") {
                      var source = feature.getSource();
                      //var sourceFeatures = source.getFeatures();
                      source.getExtent().forEach(function (coordinate) {
                        coordinates.push(coordinate);
                      });
                    } else {
                      coordinates.push(ol.extent.getTopRight(feature.getSource().getExtent()));
                      coordinates.push(ol.extent.getTopLeft(feature.getSource().getExtent()));
                      coordinates.push(ol.extent.getBottomRight(feature.getSource().getExtent()));
                      coordinates.push(ol.extent.getBottomLeft(feature.getSource().getExtent()));
                    }
                  }
                });
              }
            }
          }

          extent = ol.extent.boundingExtent(coordinates);
          if (extent[0] === Infinity || extent[0] === -Infinity) {
            return;
          }
          self.proxy.options.mapController.map.getView().fit(extent, self.proxy.options.mapController.map.getSize());
          center = self.proxy.options.mapController.map.getView().getCenter();
          if (isNaN(center[0])) {
            self.proxy.options.mapController.map.getView().setCenter([50, 10]);
            self.proxy.options.mapController.map.getView().setZoom(mapData.minZoom || 10);
          }
        }
      }; //end of zoom to extent
      // add hook function for changed layer-visibility
      //   needed to change the entry-classes
      this.proxy.hook_layer_visibility.push(function (layerId) {
        var j, changedLayer;

        changedLayer = self.layers[layerId];
        if (changedLayer && changedLayer.$entries) {
          for (j = 0; j < changedLayer.$entries.length; j += 1) {
            if (self.proxy.activeLayerIds[layerId]) {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            } else {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
            self.handleSelectedChilds(changedLayer.$entries[j]);
          }
        }
      });

      // add hook function for changed zoom
      //   needed to change the entry-classes
      this.proxy.hook_map_zoom.push(function () {
        var j, id, layer;

        for (id in self.layers) {
          if (self.layers.hasOwnProperty(id)) {
            layer = self.layers[id];
            if (layer && layer.$entries) {
              for (j = 0; j < layer.$entries.length; j += 1) {
                if (self.proxy.checkLayerIsActiveForZoom(id)) {
                  layer.$entries[j].removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                } else {
                  layer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                }
              }
            }
          }
        }
      }); // end of hook

      if (itemData && itemData.length > 0) {
        for (i = 0; i < itemData.length; i += 1) {
          uid = itemData[i];
          layer = self.proxy.layerController.arrLayers[uid];
          item = {};
          this.layers[uid] = item;
          // renderSpecial is set when a layer is rendered in its own tab
          if (layer.renderSpecial) {
            continue;
          }

          if (layer && layer.display) {
            listItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
            $(listItem).data('noFilter', layer['noFilter']);
            item.entryWrappers = item.entryWrappers || [];
            item.entryWrappers.push(listItem);

            entry = document.createElement('a');
            entry.setAttribute('href', '#');
            entry.appendChild(document.createTextNode(layer.name));
            listItem.appendChild(entry);

            $entry = $(entry);
            item.$entries = item.$entries || [];
            item.$entries.push($entry);

            if (!this.proxy.checkLayerIsActiveForZoom(uid)) {
              $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
            }

            $entry.data('uid', uid);
            $entry.click(fnHandleEntryClick);

            if (layer.visibleChilds || layer.split_geojson) {
              toggle = document.createElement('span');

              if (layer.hide_child !== '1') {
                $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
                $(toggle).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ICON);
              }
              $(toggle).click(function () {
                if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
                } else {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
                }
                if (self.proxy.options.mapController.rightSlideElements) {
                  self.proxy.options.mapController.rightSlideElements.forEach(function (element) {
                    $(element).css('right', self.starboard.container.offsetWidth);
                  });
                }
                $(self.starboard.element).css('right', self.starboard.container.offsetWidth);
              });
              $(toggle).insertBefore($entry);
              childWrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
              item.childWrappers = item.childWrappers || [];
              item.childWrappers.push(childWrapper);
              if (layer.hide_child !== '1') {
                listItem.appendChild(childWrapper);
              }
              if (layer.split_geojson && layer.content[0]) {
                var data = layer.content[0].data;
                if (data && data.features) {
                  for (var _i = 0; _i < data.features.length; _i++) {
                    var feature = data.features[_i];
                    var childListItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
                    var childItem = {};
                    childItem.entryWrappers = childItem.entryWrappers || [];
                    childItem.entryWrappers.push(childListItem);
                    var childEntry = document.createElement('a');
                    childEntry.setAttribute('href', '#');
                    childEntry.appendChild(document.createTextNode(feature.properties[layer.geojson_attributes.split(',')[0]]));
                    childListItem.appendChild(childEntry);
                    var childUid = uid + "" + _i;
                    var $childEntry = $(childEntry);
                    childItem.$entries = item.$entries || [];
                    childItem.$entries.push($entry);
                    childWrapper.appendChild(childListItem);
                    $childEntry.data('uid', childUid);
                    if (layer.geojson_zoom) {
                      $childEntry.click(fnChildEntryShow);
                      $childEntry.addClass('c4g-geojson-button');
                    } else {
                      $childEntry.click(fnChildEntryClick);
                      if (this.proxy.activeLayerIds[uid]) {
                        $childEntry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                      } else {
                        $childEntry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
                      }
                    }

                    if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.addChilds) === 'object') {
                      __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.addChilds);
                    }

                    if (window.c4gMapsHooks.starboard_layer_activate && window.c4gMapsHooks.starboard_layer_activate.length > 0) {
                      var paramObj = { 'feature': feature, 'parentItem': childListItem, 'entry': $childEntry };
                      __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.starboard_layer_activate, paramObj);
                    }
                  }
                }
              }
            }

            if (this.proxy.activeLayerIds[uid]) {
              $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            } else {
              $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            }

            // [info]:  In order for this to work,
            //          the parent layers need to be
            //          listed before their childs
            if (this.layers[layer.pid]) {
              // is child-element
              pWrapper = this.layers[layer.pid].childWrappers;
              pWrapper[pWrapper.length - 1].appendChild(listItem);
            } else if (parseInt(layer.pid, 10) == 0) {
              // layer is map itself with a layer
              toggle = document.createElement('span');
              if (layer.hide_child !== '1') {
                $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
              }
              $(toggle).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ICON);
              $(toggle).click(function () {
                if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
                } else {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
                }
              });
              $(toggle).insertBefore($entry);
              childWrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
              item.childWrappers = item.childWrappers || [];
              item.childWrappers.push(childWrapper);
              listItem.appendChild(childWrapper);
              wrapper.appendChild(listItem);
            } else {
              // is not a child-element (pid == mapId)
              wrapper.appendChild(listItem);
            }

            if (layer.id) {
              var idstr = layer.id.toString();
              layerClass = encodeURIComponent(idstr.toLowerCase()).replace(/%[0-9A-F]{2}/gi, '');
              $(listItem).addClass('c4g_starboard_item_' + layerClass);
            }

            if (layer.cssClass) {
              $(listItem).addClass(layer.cssClass);
            }

            // call hook "layerswitcher_forEachItem"
            if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.layerswitcher_forEachItem) === "object") {
              __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.layerswitcher_forEachItem, { that: this, item: item, entry: $entry });
            }
          }
        } // end of for-loop

        // Starboard Filter
        if (this.starboard.options.filter) {
          var dv = document.createElement('div');
          dv.className = "c4g-starboard-filter c4g-content-select";
          var filter = document.createElement('input');
          filter.type = 'text';
          filter.placeholder = ""; //Font Awesome
          var i = document.createElement('i');
          i.className = 'fas fa-filter';
          i.setAttribute("aria-hidden", "true");
          dv.appendChild(filter);
          dv.appendChild(i);
          filter.onkeyup = function () {
            function filter_ulli(element, showSubtree) {

              // do not apply filter for short search terms

              showSubtree = showSubtree || false; // used while traversing down the tree

              /**
               * Returns an array (modified: first element) of the given elements. Only finds children of the given parent element, but
               * no further descendants like getElementsByTagName does.
               */
              function getChildrenByTagName(element, tagName) {
                var found = [];
                for (var i = 0; i < element.children.length; i++) {
                  if (element.children[i].tagName.toUpperCase() == tagName.toUpperCase()) {
                    found.push(element.children[i]);
                  }
                }
                if (found.length > 0) {
                  return found[0]; // !!!
                } else {
                  return false;
                }
              }

              var matchFlagUl = false;
              var subtreeMatches = false;
              // for each LI do
              for (var i = 0; i < element.children.length; i++) {
                element.children[i].style.display = "block";

                var isMatch = false;

                // search current LI for filter term
                if (element.children[i].getElementsByTagName('a')[0].innerHTML.toUpperCase().indexOf(filter.value.toUpperCase()) >= 0 || $(element.children[i]).data('noFilter')) {
                  // it's a match
                  isMatch = true;
                }

                // recurse if a subtree (UL) exists in current LI (max 1 expected)
                var ul = getChildrenByTagName(element.children[i], "ul");

                if (ul) {
                  // recursion
                  var hasSubtree = true;
                  subtreeMatches = filter_ulli(ul, showSubtree || isMatch);
                } else {
                  var hasSubtree = false;
                }

                if (isMatch || subtreeMatches || showSubtree) {
                  matchFlagUl = true; // used while traversing up the tree again
                  // set current LI visible and open
                  element.children[i].style.display = "";

                  if (filter.value.length > 2) {
                    element.children[i].classList.remove("c4g-close");
                    element.children[i].classList.add("c4g-open");
                  }

                  element.children[i].classList.remove("c4g-starboard-filter-match"); // always remove
                  if (isMatch && filter.value.length > 0) {
                    element.children[i].classList.add("c4g-starboard-filter-match");
                  };
                } else {
                  // set current LI invisible
                  element.children[i].style.display = "none";
                  element.children[i].classList.remove("c4g-open");
                  element.children[i].classList.add("c4g-close");
                  element.children[i].classList.remove("c4g-starboard-filter-match");
                }
              }

              if (matchFlagUl) {
                return true;
              } else {
                return false;
              }
            }
            // do not react immediately but allow for some keystrokes 
            setTimeout(function () {
              // two or zero letters are required
              if (filter.value.length != 1) filter_ulli(document.querySelector('.c4g-layertree > ul:nth-child(2)'));
            }, 350);
          };

          wrapperElement.appendChild(dv);
        }
        wrapperElement.appendChild(wrapper);
      }
    }, // end of "addItems()"
    /**
     * Function which checks for a given layer id, if any of the childs are currently selected.
     * @param layerUid
     * @returns {boolean}
     */
    checkChildSelections: function checkChildSelections(layerUid) {
      var layer, childActive, self;
      self = this;
      childActive = 0;
      layer = self.proxy.layerController.arrLayers[layerUid];
      if (layer && layer.childs && layer.childs.length > 0) {
        // layer has childs
        layer.childs.forEach(function (child) {
          if (self.proxy.activeLayerIds[child.id]) {
            childActive = childActive + 1;
          } else {
            // check if any childs of childs are active
            childActive = childActive + self.checkChildSelections(child.uid);
          }
        });
      }
      return childActive;
    }, // end of "checkChildSelections()"

    /**
     * Function for coloring the layerswitcher entries, if there are any sublayers selected
     * @param entry
     */
    handleSelectedChilds: function handleSelectedChilds(entry) {
      if (this.checkChildSelections($(entry).data('uid')) >= 1) {
        $(entry).css('font-weight', 'bold');
      } else {
        $(entry).css('font-weight', 'normal');
      }
      this.starboard.update();
      return true;
    },

    updateParentLayers: function updateParentLayers(entry, layerUid, clickedLayer) {
      var layer, parentEntry, parentLayer;

      layer = this.proxy.layerController.arrLayers[layerUid];
      if (layer.pid != this.starboard.options.mapController.data.mapId) {
        // the layer has parents
        // by this we can access only the single span where the parent entry is in
        parentLayer = this.proxy.layerController.arrLayers[layer.pid];
        if (parentLayer) {
          parentEntry = entry.parentNode.parentNode.parentNode.getElementsByTagName('a')[0];
          if (parentEntry) {
            if (this.proxy.activeLayerIds[clickedLayer.id]) {
              $(parentEntry).css('font-weight', 'bold');
            } else {
              if (this.checkChildSelections($(parentEntry).data('uid')) >= 1) {
                $(parentEntry).css('font-weight', 'bold');
              } else {
                $(parentEntry).css('font-weight', 'normal');
                //$(parentEntry).addClass(cssConstants.INACTIVE);
              }
            }
            this.updateParentLayers(parentEntry, parentLayer.id, parentLayer);
          }
        }
      } else {
        return false;
      }
    }

  }); // end of "add methods"
})(jQuery, this.c4g);

var Layerswitcher = this.c4g.maps.control.starboardplugin.Layerswitcher;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-zoomlevel.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-zoomlevel.js ***!
  \***********************************************************/
/*! exports provided: Zoomlevel */
/*! exports used: Zoomlevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Zoomlevel; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};



(function ($, c4g) {
  'use strict';

  /**
   * Displays the current zoomlevel on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Zoomlevel = function (options) {

    var self, element, updateZoomlevel;

    self = this;

    if (!options || !options.mapView) {
      console.warn('Zoomlevel control needs to know the map.');
      return false;
    }

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ZOOM_LEVEL,
      undefinedHTML: ''
    }, options);

    element = document.createElement('div');
    element.className = options.className;
    element.innerHTML = options.mapView.getZoom();

    updateZoomlevel = function updateZoomlevel() {
      element.innerHTML = parseInt(options.mapView.getZoom());
    };

    options.mapView.on('change:resolution', updateZoomlevel);
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });
  };
  ol.inherits(c4g.maps.control.Zoomlevel, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Zoomlevel.prototype = $.extend(c4g.maps.control.Zoomlevel.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Zoomlevel = this.c4g.maps.control.Zoomlevel;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-interaction-geopicker.js":
/*!***************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-interaction-geopicker.js ***!
  \***************************************************************/
/*! exports provided: GeoPicker */
/*! exports used: GeoPicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GeoPicker; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.interaction = this.c4g.maps.interaction || {};

(function ($, c4g) {
    'use strict';

    /**
     *
     * @param options
     * @returns {boolean}
     * @constructor
     */

    c4g.maps.interaction.GeoPicker = function (options) {
        var mapData, mapContainer, lat, lon, latIdx, lonIdx, latRnd, lonRnd;

        this.options = options || {};

        if (!this.options.mapContainer || !this.options.mapContainer.data) {
            console.warn('The GeoPicker needs a "mapContainer" in order to work.');
            return false;
        }

        mapData = this.options.mapContainer.data;
        mapContainer = this.options.mapContainer;
        // configurate geopicker
        this.$fieldGeoX = $(mapData.geopicker.input_geo_x);
        this.$fieldGeoY = $(mapData.geopicker.input_geo_y);

        this.opticLayerSource = new ol.source.Vector({});
        this.opticLayerVector = new ol.layer.Vector({
            source: this.opticLayerSource,
            style: this.geoPickerStyleFunction
        });
        this.opticLayerFeature = null;

        if (this.$fieldGeoX.val() && this.$fieldGeoY.val()) {
            lat = this.$fieldGeoY.val();
            lon = this.$fieldGeoX.val();

            if (mapData.geopicker.anonymous) {
                this.$fieldGeoY.remove();
                this.$fieldGeoX.remove();

                latIdx = lat.indexOf('.');
                lonIdx = lon.indexOf('.');
                lat = lat.replace(/\D/g, "");
                lon = lon.replace(/\D/g, "");
                latRnd = Math.round(Math.random() * (99999999999 - 1) + 1);
                lonRnd = Math.round(Math.random() * (99999999999 - 1) + 1);
                if (latRnd > 49999999999) {
                    lat = parseInt(lat) - latRnd;
                } else {
                    lat = parseInt(lat) + latRnd;
                }
                if (lonRnd < 50000000000) {
                    lon = parseInt(lon) - lonRnd;
                } else {
                    lon = parseInt(lon) + lonRnd;
                }
                lat = lat + "";
                lon = lon + "";
                lat = lat.substr(0, latIdx) + '.' + lat.substr(latIdx, lat.length - latIdx);
                lon = lon.substr(0, lonIdx) + '.' + lon.substr(lonIdx, lon.length - lonIdx);
            }

            this.opticLayerFeature = new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.fromLonLat([parseFloat(lon), parseFloat(lat)])),
                pickerColor: [0, 180, 100, 1],
                anonymous: mapData.geopicker.anonymous
            });

            this.opticLayerSource.addFeature(this.opticLayerFeature);

            mapContainer.map.getView().fit(this.opticLayerSource.getExtent(), mapContainer.map.getSize());
            // set zoom so we can see some tiles without error
            mapContainer.map.getView().setZoom(15);
        } else if (mapData.geoLocation && typeof mapData.geoLocation.setTracking === 'function') {
            mapData.geoLocation.setTracking(true);
        }
        mapContainer.map.addLayer(this.opticLayerVector);

        //TODO wenn geopicker.clickDisabled (oder so) gesetzt ist, this.options.handleEvent = function(){}

        // inheritance-stuff
        ol.interaction.Interaction.call(this, {
            handleEvent: this.options.handleEvent || this.handleEvent
            // handleEvent: this.options.handleEvent || c4g.maps.interaction.GeoPicker.handleEvent
        });
    };
    ol.inherits(c4g.maps.interaction.GeoPicker, ol.interaction.Interaction);

    /*
     * Add methods
     */
    c4g.maps.interaction.GeoPicker.prototype = $.extend(c4g.maps.interaction.GeoPicker.prototype, {

        geoPickerStyleFunction: function geoPickerStyleFunction(feature, projection, getId) {
            var color, white, result;

            if (getId) {
                return -1;
            }

            white = [255, 255, 255, 1];
            if (feature && typeof feature.get === 'function' && feature.get('pickerColor')) {
                color = feature.get('pickerColor');
            } else {
                color = [200, 0, 0, 0.7];
            }

            result = [];
            if (feature && typeof feature.get === 'function' && !feature.get('anonymous')) {
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 2,
                        fill: new ol.style.Fill({
                            color: color
                        }),
                        stroke: new ol.style.Stroke({
                            color: white,
                            width: 2
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 20,
                        stroke: new ol.style.Stroke({
                            color: white,
                            width: 4
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 20,
                        stroke: new ol.style.Stroke({
                            color: color,
                            width: 2
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 40,
                        stroke: new ol.style.Stroke({
                            color: white,
                            width: 4
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 40,
                        stroke: new ol.style.Stroke({
                            color: color,
                            width: 2
                        })
                    }),
                    zIndex: Infinity
                }));
            }

            result.push(new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 60,
                    stroke: new ol.style.Stroke({
                        color: white,
                        width: 4
                    })
                }),
                zIndex: Infinity
            }));

            result.push(new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 60,
                    stroke: new ol.style.Stroke({
                        color: color,
                        width: 2
                    })
                }),
                zIndex: Infinity
            }));

            return result;
        },

        handleEvent: function handleEvent(mapBrowserEvent) {
            if (mapBrowserEvent.type === "singleclick") {
                if (!this.options.disableClickEvent && !this.options.mapContainer.data.geopicker.disabled) {
                    return !this.pick(mapBrowserEvent.coordinate);
                }
            }

            return true;
        },

        pick: function pick(coordinate) {
            var arrLatLon;

            arrLatLon = ol.proj.toLonLat(coordinate);

            this.opticLayerFeature = new ol.Feature({
                geometry: new ol.geom.Point(coordinate)
            });

            this.opticLayerSource.clear();
            this.opticLayerSource.addFeature(this.opticLayerFeature);

            this.$fieldGeoX.val(arrLatLon[0]);
            this.$fieldGeoY.val(arrLatLon[1]);
            this.$fieldGeoX.change();
            this.$fieldGeoY.change();

            return true;
        }

    }); // end of "add methods" ---
})(jQuery, this.c4g);

var GeoPicker = this.c4g.maps.interaction.GeoPicker;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-main.js":
/*!**********************************************!*\
  !*** ./Resources/public/js/c4g-maps-main.js ***!
  \**********************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps__ = __webpack_require__(/*! ./c4g-maps */ "./Resources/public/js/c4g-maps.js");


jQuery(document).ready(function () {
  if (typeof mapData !== "undefined") {
    window.initMaps(mapData);
  }
});

window.initMaps = function (mapData) {
  var mapController = new __WEBPACK_IMPORTED_MODULE_0__c4g_maps__["a" /* MapController */](mapData);
};

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-maphover.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-maphover.js ***!
  \*******************************************************/
/*! exports provided: MapHover */
/*! exports used: MapHover */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MapHover; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_misc_tooltippopup__ = __webpack_require__(/*! ./c4g-maps-misc-tooltippopup */ "./Resources/public/js/c4g-maps-misc-tooltippopup.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.misc = this.c4g.maps.misc || {};




(function ($, c4g) {
    'use strict';

    /**
     * @TODO
     * [MapHover description]
     *
     * @constructor
     *
     * @param {Object=} opt_options Control options.
     */

    c4g.maps.misc.MapHover = function (options) {

        this.options = options || {};

        // default options
        this.options = $.extend({
            // mapController: undefined,
            activate: true
        }, this.options);

        if (!this.options.mapController) {
            console.warn('MapHover needs a mapController');
            return false;
        }

        // set needed vars
        this.listenerKey = false;
        this.map = this.options.mapController.map;
        this.lastFeatureStyle = null;
        this.lastHoveredFeature = null;

        // create tooltip
        this.hoverTooltip = new __WEBPACK_IMPORTED_MODULE_0__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
            map: this.map,
            offset: [10, 10],
            horizontal: true,
            closeable: false
        });
        this.hoverTooltip.hide();

        if (this.options.activate) {
            this.activate();
        }
    };

    // Add methods to MapHover
    c4g.maps.misc.MapHover.prototype = $.extend(c4g.maps.misc.MapHover.prototype, {

        /**
         * @TODO: [activate description]
         *
         * @return  {[type]}  [description]
         */
        activate: function activate() {
            if (!this.listenerKey) {
                this.listenerKey = this.map.on('pointermove', this.getHoverFunction(), this);
                //this.map.on('pointermove', this.changeFeatureStyles(), this);
            }
        }, // end of "activate()"


        /**
         * @TODO: [deactivate description]
         *
         * @return  {[type]}  [description]
         */
        deactivate: function deactivate() {
            if (this.listenerKey) {
                ol.Observable.unByKey(this.listenerKey);
                this.listenerKey = false;
            }
        }, // end of "deactivate()"


        /**
         * @TODO: [isActive description]
         *
         * @return  {[type]}  [description]
         */
        isActive: function isActive() {
            if (this.listenerKey) {
                return true;
            }
            return false;
        }, // end of "getState()"


        /**
         * @TODO: [getHoverFunction description]
         *
         * @return  {[type]}  [description]
         */
        getHoverFunction: function getHoverFunction() {

            var self = this;

            return function (event) {

                var hovered,
                    clustered,
                    tooltipContent,
                    tooltipHelper,
                    features,
                    tooltipLength,
                    resolution,
                    canvas,
                    mapData = self.options.mapController.data,
                    proxy = self.options.mapController.proxy;

                clustered = false;
                hovered = self.map.forEachFeatureAtPixel(event.pixel, function (feature, layer) {
                    return {
                        feature: feature,
                        layer: layer
                    };
                });
                resolution = self.map.getView().getResolution();

                if (!hovered) {
                    self.hoverTooltip.hide();
                    canvas = document.querySelector("canvas");
                    $(canvas).css('cursor', 'default');
                    if (mapData.hover_popups === '1' && mapData.hover_popups_stay != '1') {
                        c4g.maps.popup.$popup.removeClass(c4g.maps.constant.css.ACTIVE);
                    }

                    if (self.lastHoveredFeature && self.lastFeatureStyle) {
                        self.lastHoveredFeature.setStyle(self.lastFeatureStyle);
                        self.lastHoveredFeature = null;
                    }
                    return false;
                }

                canvas = document.querySelector("canvas");
                $(canvas).css('cursor', 'pointer');

                if (hovered.feature && typeof hovered.feature.get === 'function' && hovered.feature.get('features')) {
                    if (hovered.feature.get('features')[1]) {
                        clustered = true;
                    } else {
                        hovered.feature = hovered.feature.get('features')[0];
                    }
                }
                if (hovered.feature.getGeometry() && hovered.feature.getGeometry() instanceof ol.geom.LineString) {
                    return false;
                }
                if (hovered.feature.get("hover_location") || self.lastHoveredFeature && self.lastHoveredFeature.get("hover_location")) {
                    if (self.lastHoveredFeature && hovered.feature === self.lastHoveredFeature) {
                        return false;
                    }

                    //set back styles when the features are not hovered anymore
                    if (self.lastFeatureStyle) {
                        if (self.lastHoveredFeature) {
                            if (hovered.feature !== self.lastHoveredFeature) {
                                if (self.lastFeatureStyle) {
                                    self.lastHoveredFeature.setStyle(self.lastFeatureStyle);
                                    //console.log("Changed back feature style");
                                } else if (self.lastLayerStyle) {
                                    self.lastHoveredFeature.setStyle(self.lastLayerStyle);
                                    //console.log("Changed back layer-feature style");
                                }
                            }
                        }
                    }

                    if (hovered.feature && _typeof(hovered.feature.getStyleFunction) && typeof hovered.feature.getStyleFunction === 'function' && typeof hovered.feature.getStyleFunction() === 'function') {
                        self.lastHoveredFeature = hovered.feature;

                        self.lastLayerStyle = hovered.layer.getStyle();
                        self.lastFeatureStyle = self.lastLayerStyle(self.lastHoveredFeature);
                        //TODO get onhover style from db (vllt schon in proxy drin?)
                        if (hovered.feature.get('hover_style') && proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")]) {
                            if (proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction) {
                                hovered.feature.setStyle(Function("feature", "data", "map", proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction)(hovered.feature));
                            } else {
                                hovered.feature.setStyle(proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].style(hovered.feature));
                            }
                        }
                    } else if (hovered.layer && _typeof(hovered.layer.getStyleFunction) && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function') {

                        if (hovered.feature) {
                            self.lastHoveredFeature = hovered.feature;
                        } else {
                            self.lastHoveredFeature = hovered.layer.getSource().getFeatures()[0];
                            self.lastHoveredFeature = self.lastHoveredFeature.get('features')[0];
                        }

                        self.lastLayerStyle = hovered.layer.getStyle();
                        self.lastFeatureStyle = self.lastLayerStyle(self.lastHoveredFeature);
                        if (hovered.feature.get('hover_style')) {
                            if (!proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")]) {
                                var arrIds = [];
                                arrIds.push(hovered.feature.get("hover_style"));
                                proxy.locationStyleController.loadLocationStyles(arrIds);
                                self.lastHoveredFeature = null;
                                return null;
                            }
                            if (proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction) {
                                hovered.feature.setStyle(Function("feature", "data", "map", proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction)(hovered.feature));
                            } else {
                                hovered.feature.setStyle(proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].style(hovered.feature));
                            }
                        }
                    }
                }

                if (hovered && hovered.feature && hovered.feature.get('styleUrl')) {
                    //if this property is set, we have a feature that has none of our styles => no tooltip
                    return false;
                }
                // catch the case the layer is a baselayer (vector tiles)
                if (hovered && hovered.layer && hovered.layer.type === "VECTOR_TILE") {
                    return false;
                }

                // set hover tooltips
                tooltipContent = false;
                if (!clustered && hovered.feature && typeof hovered.feature.get === 'function' && (hovered.feature.get('tooltip') || hovered.feature.get('graphicTitle'))) {
                    tooltipContent = hovered.feature.get('tooltip');
                    if (!tooltipContent) {
                        tooltipContent = hovered.feature.get('graphicTitle');
                    } else if ((typeof tooltipContent === "undefined" ? "undefined" : _typeof(tooltipContent)) === 'object' && tooltipContent.element && tooltipContent.element.childNodes[1]) {
                        tooltipContent = tooltipContent.element.childNodes[1].innerHTML;
                    }
                    // @TODO: Check & fix
                } else if (hovered.feature && _typeof(hovered.feature.getStyleFunction) && typeof hovered.feature.getStyleFunction === 'function' && typeof hovered.feature.getStyleFunction() === 'function' && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.feature.getStyleFunction()(resolution)] && proxy.locationStyleController.arrLocStyles[hovered.feature.getStyleFunction()(resolution)].tooltip) {
                    tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.feature.getStyleFunction()(resolution)].tooltip;
                    // @TODO: Check
                } else if (hovered.layer && _typeof(hovered.layer.getStyleFunction) && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function' && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()] && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()].tooltip) {
                    tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()].tooltip;
                } else if (hovered.layer && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function' && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)] && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)].tooltip) {
                    tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)].tooltip;
                } else if (hovered.layer && hovered.layer.tooltip) {
                    tooltipContent = hovered.layer.tooltip;
                }
                if (clustered && hovered.feature.get('features')) {
                    features = hovered.feature.get('features');
                    if (features[0].get('tooltip') && features[0].get('tooltip_length')) {
                        tooltipContent = features[0].get('tooltip');
                        tooltipLength = parseInt(features[0].get('tooltip_length'));
                        for (var i = 1; i < features.length; i++) {
                            if (features[i].get('tooltip') && features[i].get('tooltip') != '') {
                                tooltipContent = tooltipContent + ', ' + features[i].get('tooltip');
                            }
                        }
                        if (tooltipContent.length > tooltipLength + 3) {
                            if (tooltipContent = tooltipContent.slice(0, tooltipLength)) {
                                tooltipContent = tooltipContent + '...';
                            }
                        }
                    } else if (hovered.layer.tooltip && hovered.layer.tooltip_length) {
                        tooltipHelper = tooltipContent;
                        tooltipContent = '';
                        tooltipLength = parseInt(hovered.layer.tooltip_length);
                        for (i = 0; i < features.length; i++) {
                            var singleTooltip = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].replaceAllPlaceholders(tooltipHelper, features[i], hovered.layer);
                            if (singleTooltip != '') {
                                if (tooltipContent == '') tooltipContent = singleTooltip;else tooltipContent = tooltipContent + ', ' + singleTooltip;
                            }
                        }
                        if (tooltipContent.length > tooltipLength + 3) {
                            if (tooltipContent = tooltipContent.slice(0, tooltipLength)) {
                                tooltipContent = tooltipContent + '...';
                            }
                        }
                    }
                }

                if (tooltipContent) {
                    tooltipContent = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].decodeGeoJsonProperty(tooltipContent);

                    // replace placeholders if possible
                    if (hovered.feature.get('features')) {}
                    tooltipContent = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].replaceAllPlaceholders(tooltipContent, hovered.feature, hovered.layer);

                    if (tooltipContent.trim()) {
                        // popup config
                        self.hoverTooltip.setPosition(event.coordinate);
                        self.hoverTooltip.setContent(tooltipContent);
                        self.hoverTooltip.show();
                    } else {
                        self.hoverTooltip.hide();
                    }
                } else {
                    self.hoverTooltip.hide();
                }
                if (mapData.hover_popups === '1' && !clustered && hovered.feature) {
                    var popupInfos = {};

                    if (hovered.feature.get('popup')) {
                        popupInfos = hovered.feature.get('popup');
                    } else if (hovered.feature.get('loc_linkurl')) {
                        return;
                    } else if (hovered.layer && hovered.layer.popup) {
                        popupInfos = hovered.layer.popup;
                    } else {
                        return;
                    }
                    var coord = hovered.feature.getGeometry().getCoordinates();
                    if (!coord || coord && coord[0] && coord[0].length) {
                        var extent = hovered.feature.getGeometry().getExtent();
                        coord = self.map.getCoordinateFromPixel(event.pixel);
                        coord = [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
                    }

                    c4g.maps.popup.popup.setPosition(coord);

                    if (popupInfos.content) {
                        c4g.maps.popup.$content.html('');
                        c4g.maps.popup.$popup.addClass(c4g.maps.constant.css.ACTIVE).addClass(c4g.maps.constant.css.LOADING);
                        c4g.maps.popup.spinner.show();

                        if (popupInfos.async === false) {
                            var objPopup = {};
                            objPopup.popup = popupInfos;
                            objPopup.feature = hovered.feature;
                            objPopup.layer = hovered.layer;
                            // Call the popup hook for plugin specific popup content
                            if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                                __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                            }
                            proxy.setPopup(objPopup, proxy);
                        } else {
                            $.ajax({
                                dataType: "json",
                                url: proxy.api_infowindow_url + '/' + popupInfos.content,
                                done: function done(data) {
                                    var popupInfo = {
                                        async: popupInfos.async,
                                        content: data.content,
                                        popup: popupInfos.popup,
                                        routing_link: popupInfos.routing_link
                                    };

                                    var objPopup = {};
                                    objPopup.popup = popupInfo;
                                    objPopup.feature = hovered.feature;
                                    objPopup.layer = hovered.layer;

                                    // Call the popup hook for plugin specific popup content
                                    if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                                        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                                    }

                                    proxy.setPopup(objPopup, proxy);
                                }
                            });
                        }
                    } else {
                        c4g.maps.popup.$popup.removeClass(c4g.maps.constant.css.ACTIVE);
                    }
                }
            };
        }, // end of "getHoverFunction()"

        changeFeatureStyles: function changeFeatureStyles() {
            //TODO: change style of features which are hovered and have the option to change style on hover enabled
        }

    }); // End of "add methods to TooltipPopUp"
})(jQuery, this.c4g);

var MapHover = this.c4g.maps.misc.MapHover;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-spinner.js":
/*!******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-spinner.js ***!
  \******************************************************/
/*! exports provided: Spinner */
/*! exports used: Spinner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Spinner; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.misc = this.c4g.maps.misc || {};



(function ($, c4g) {
  'use strict';

  /**
   * @TODO
   * [Spinner description]
   *
   * @constructor
   *
   * @param {Object=} opt_options Control options.
   */

  c4g.maps.misc.Spinner = function (opt_options) {

    var options, target, spinnerSpan;

    options = opt_options || {};

    // default options
    options = $.extend({
      className: '',
      target: '.' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_VIEWPORT
    }, options);

    if (options.className) {
      options.className = ' ' + options.className;
    }

    this.element = document.createElement('div');
    this.element.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].SPINNER + options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE;
    $(options.target).append(this.element);

    spinnerSpan = document.createElement('span');
    spinnerSpan.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ANIMATION_SPIN;
    this.element.appendChild(spinnerSpan);

    this.additionalActivationCounter = 0;
  };

  // Add methods to spinner
  c4g.maps.misc.Spinner.prototype = $.extend(c4g.maps.misc.Spinner.prototype, {

    /**
     * @TODO
     * [show description]
     *
     * @return  {[type]}  [description]
     */
    show: function show() {
      if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
      } else {
        this.additionalActivationCounter += 1;
      }
    },

    /**
     * @TODO
     * [hide description]
     *
     * @return  {[type]}  [description]
     */
    hide: function hide() {
      if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        //console.warn('Spinner is already hidden.');
      } else {
        if (this.additionalActivationCounter === 0) {
          $(this.element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
        } else {
          this.additionalActivationCounter -= 1;
        }
      }
    }

  }); // End of "add methods to spinner"
})(jQuery, this.c4g);

var Spinner = this.c4g.maps.misc.Spinner;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-tooltippopup.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-tooltippopup.js ***!
  \***********************************************************/
/*! exports provided: TooltipPopUp */
/*! exports used: TooltipPopUp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TooltipPopUp; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.misc = this.c4g.maps.misc || {};



(function ($, c4g) {
  'use strict';

  /**
   * @TODO
   * [TooltipPopUp description]
   *
   * @constructor
   *
   * @param {Object=} opt_options Control options.
   */

  c4g.maps.misc.TooltipPopUp = function (opt_options) {

    var self, addClassName, closeButton;

    self = this;
    this.options = opt_options || {};

    // default options
    this.options = $.extend({
      // className: ''
      // closeFunction: null
      // map: null
      horizontal: false,
      closeable: false,
      offset: [1, -1],
      position: [0, 0]
    }, this.options);

    // prepare additional classes
    addClassName = '';
    if (this.options.className) {
      addClassName = ' ' + this.options.className;
    }
    if (this.options.horizontal) {
      addClassName += ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HORIZONTAL;
    }
    if (this.options.closeable) {
      addClassName += ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSEABLE;
    }

    this.element = document.createElement('div');
    this.element.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].TOOLTIP_POPUP + addClassName;

    if (this.options.closeable) {
      closeButton = document.createElement('button');
      closeButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].POPUP_CLOSE;
      this.element.appendChild(closeButton);

      $(closeButton).click(function () {
        self.close();
      });
    }

    this.contentContainer = document.createElement('div');
    this.element.appendChild(this.contentContainer);

    this.overlay = new ol.Overlay({
      element: this.element,
      insertFirst: false,
      offset: this.options.offset,
      positioning: 'bottom-left'
    });

    if (this.options.map) {
      this.options.map.addOverlay(this.overlay);
    }

    if (this.options.position) {
      this.overlay.setPosition(this.options.position);
    }
  };

  // Add methods to TooltipPopUp
  c4g.maps.misc.TooltipPopUp.prototype = $.extend(c4g.maps.misc.TooltipPopUp.prototype, {

    close: function close() {
      if (typeof this.options.closeFunction === 'function') {
        this.options.closeFunction();
      }

      if (this.options.map) {
        this.options.map.removeOverlay(this.overlay);
      }
    },

    /**
     * @TODO
     * [show description]
     *
     * @return  {[type]}  [description]
     */
    show: function show() {
      if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
      }
    },

    /**
     * @TODO
     * [hide description]
     *
     * @return  {[type]}  [description]
     */
    hide: function hide() {
      if (!$(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        $(this.element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
      }
    },

    /**
     * @TODO
     * [getContent description]
     *
     */
    getContent: function getContent() {
      return this.contentContainer.innerHTML;
    },

    /**
     * @TODO
     * [getPosition description]
     *
     */
    getPosition: function getPosition() {
      return this.overlay.getPosition();
    },

    /**
     * @TODO
     * [setContent description]
     *
     * @param  {[type]}  content  [description]
     */
    setContent: function setContent(content) {
      this.contentContainer.innerHTML = content;
    },

    /**
     * @TODO
     * [setPosition description]
     *
     * @param  {[type]}  coordinates  [description]
     */
    setPosition: function setPosition(coordinates) {
      this.overlay.setPosition(coordinates);
    }

  }); // End of "add methods to TooltipPopUp"
})(jQuery, this.c4g);

var TooltipPopUp = this.c4g.maps.misc.TooltipPopUp;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-popup-info-de.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-popup-info-de.js ***!
  \*******************************************************/
/*! exports provided: trim, isMobile, fnStandardInfoPopup, fnReducedInfoPopup, fnHeader, fnFooter, fnGetTranslate_Type, fnContent, fnContentAerodrome, fnContentNatural, fnContentProtectedArea, fnContentLanduse, fnMessstation, fnContentRoute, fnContentPetrol, fnContentHistoric, fnContentBarriers, fnContentTourism, fnContentAmenity, fnContentStorage, fnContentInformationCity, fnContentEmergency, fnContentCuisine, fnContentShipping, fnContentHydrants, fnContentStreetsTraffic, fnContentSports, fnArztInfo, fnKraftwerkInfo, fnWertstoffinfo, fnAdditionalBuildingInfos, fnSicherheitAdditional, fnWreckInfo, fnKlosterAdditional */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["trim"] = trim;
/* harmony export (immutable) */ __webpack_exports__["isMobile"] = isMobile;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnStandardInfoPopup", function() { return fnStandardInfoPopup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnReducedInfoPopup", function() { return fnReducedInfoPopup; });
/* harmony export (immutable) */ __webpack_exports__["fnHeader"] = fnHeader;
/* harmony export (immutable) */ __webpack_exports__["fnFooter"] = fnFooter;
/* harmony export (immutable) */ __webpack_exports__["fnGetTranslate_Type"] = fnGetTranslate_Type;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContent", function() { return fnContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentAerodrome", function() { return fnContentAerodrome; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentNatural", function() { return fnContentNatural; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentProtectedArea", function() { return fnContentProtectedArea; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentLanduse", function() { return fnContentLanduse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnMessstation", function() { return fnMessstation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentRoute", function() { return fnContentRoute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentPetrol", function() { return fnContentPetrol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentHistoric", function() { return fnContentHistoric; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentBarriers", function() { return fnContentBarriers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentTourism", function() { return fnContentTourism; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentAmenity", function() { return fnContentAmenity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentStorage", function() { return fnContentStorage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentInformationCity", function() { return fnContentInformationCity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentEmergency", function() { return fnContentEmergency; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentCuisine", function() { return fnContentCuisine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentShipping", function() { return fnContentShipping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentHydrants", function() { return fnContentHydrants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentStreetsTraffic", function() { return fnContentStreetsTraffic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentSports", function() { return fnContentSports; });
/* harmony export (immutable) */ __webpack_exports__["fnArztInfo"] = fnArztInfo;
/* harmony export (immutable) */ __webpack_exports__["fnKraftwerkInfo"] = fnKraftwerkInfo;
/* harmony export (immutable) */ __webpack_exports__["fnWertstoffinfo"] = fnWertstoffinfo;
/* harmony export (immutable) */ __webpack_exports__["fnAdditionalBuildingInfos"] = fnAdditionalBuildingInfos;
/* harmony export (immutable) */ __webpack_exports__["fnSicherheitAdditional"] = fnSicherheitAdditional;
/* harmony export (immutable) */ __webpack_exports__["fnWreckInfo"] = fnWreckInfo;
/* harmony export (immutable) */ __webpack_exports__["fnKlosterAdditional"] = fnKlosterAdditional;
/*
  K?stenschmiede GmbH Software & Design 2011 - 2018
 @author     K?stenschmiede <http://www.kuestenschmiede.de>
 @license    http://opensource.org/licenses/lgpl-3.0.html
*/
function trim(b) {
    return b.replace(/^\s+/, "").replace(/\s+$/, "");
}
function isMobile() {
    return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4))
    );
}function translate(b) {
    var a = trim(b);return "yes" == a || "Yes" == a ? "Ja" : "no" == a ? "Nein" : "No" == a ? "nein" : "limited" == a ? "Eingeschr\xE4nkt" : "designated" == a ? "Ja" : "wood" == a ? "Holz" : "metal" == a ? "Metall" : "concrete" == a ? "Beton" : "plastic" == a ? "Plastik" : "stone" == a ? "Stein" : "steel" == a ? "Stahl" : "brick" == a ? "Ziegel" : "reinforced_concrete" == a ? "Stahlbeton" : "masonry" == a ? "Mauerwerk" : b;
}
var fnStandardInfoPopup = function fnStandardInfoPopup(b, a) {
    var c = b.getProperties(),
        d = "",
        e;if ("function" === typeof a) {
        var f = a.call(b)[0].getImage();if (f) try {
            e = f.getSrc();
        } catch (g) {
            e = "";
        }
    } else {
        f = a.getImage();try {
            e = f.getSrc();
        } catch (h) {
            e = "";
        }
    }d += fnHeader(c, e);d += fnContent(c);d += fnFooter(c, b.get("osm_type") + "/" + b.getId());return '<div class="c4g_popup_text">' + d + "</div>";
},
    fnReducedInfoPopup = function fnReducedInfoPopup(b, a) {
    var c = b.getProperties(),
        d = "",
        e = !1,
        f;f = "function" === typeof a ? a.call(b)[0].getImage().getSrc() : a.getImage().getSrc();if ("restaurant" == c.amenity || "pub" == c.amenity || "biergarten" == c.amenity) e = !0;"hotel" == c.tourism && (e = !0);"guest_house" == c.tourism && (e = !0);"chalet" == c.tourism && (e = !0);"hostel" == c.tourism && (e = !0);"alpine_hut" == c.tourism && (e = !0);if ("artwork" == c.tourism || "artwork" == c.amenity) e = !0;if ("museum" == c.tourism || "museum" == c.amenity) e = !0;"cinema" == c.amenity && (e = !0);"theatre" == c.amenity && (e = !0);if ("attraction" == c.amenity || "fountain" == c.amenity || "monument" == c.historic || "city_gate" == c.historic || "ruins" == c.historic || "castle" == c.historic || "attraction" == c.tourism) e = !0;"playground" == c.leisure && (e = !0);c.aerialway && (e = !0);if ("swimming_pool" == c.amenity || "swimming_pool" == c.leisure || "swimming" == c.sport) e = !0;"station" == c.railway && (e = !0);"swimming" == c.sport && (e = !0);"swimming_pool" == c.leisure && (e = !0);"swimming_pool" == c.amenity && (e = !0);"waterpark" == c.leisure && (e = !0);c.water_park && (e = !0);"sports_centre" == c.leisure && (e = !0);switch (e) {case !1:
            d += fnHeader(c, f);d += fnContent(c);d += fnFooter(c, b.get("osm_type") + "/" + b.getId());break;case !0:
            d += fnHeader(c, f);}return '<div class="c4g_popup_text">' + d + "</div>";
};
function fnHeader(b, a) {
    var c = "",
        d = "32px";a && -1 != a.indexOf("icon_mapcil") && (d = "250px", a = a.replace("icon_mapcil", "logo_mapcil"));if (b.name || b["piste:name"] || b["xmas:name"] || b["xmas:location"]) {
        if (b.name) var e = b.name;b["piste:name"] && (e = b["piste:name"]);b["xmas:name"] && (e = b["xmas:name"]);b["xmas:location"] && (e = b["xmas:location"]);c += a ? '<img src="' + a + '" width="' + d + '" name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>" : '<name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>";
    } else a && (c += '<img src="' + a + '" width="' + d + '" name="' + a + '" alt="' + a + '">');c += fnGetTranslate_Type(b);return '<div class="c4g_popup_header">' + c + "</div>";
}
function fnFooter(b, a) {
    var c = "",
        d = !1;b["addr:housename"] && (c += "Geb\xE4udename: " + b["addr:housename"] + "<br/>", d = !0);b["addr:floor"] ? (c += "Etage: " + b["addr:floor"] + "<br/>", d = !0) : b["addr:level"] && (c += "Etage: " + b["addr:level"] + "<br/>", d = !0);b["addr:street"] && (c += b["addr:street"], c = b["addr:housenumber"] ? c + (" " + b["addr:housenumber"] + "<br/>") : c + "<br/>", d = !0);b["addr:postcode"] && (c += b["addr:postcode"] + " ");b["addr:city"] && (c += b["addr:city"] + "<br/>", d = !0);if (b.sqkm) if (b.sqkm = "" + b.sqkm, 3 < b.sqkm.length) {
        var e = b.sqkm.length % 3,
            f = 0 < e ? b.sqkm.substring(0, e) : "";for (i = 0; i < Math.floor(b.sqkm.length / 3); i++) {
            f = 0 == e && 0 == i ? f + b.sqkm.substring(e + 3 * i, e + 3 * i + 3) : f + ("." + b.sqkm.substring(e + 3 * i, e + 3 * i + 3));
        }c += "Fl\xE4che: " + f + " Km\xB2<br/>";
    } else c += "Fl\xE4che " + b.sqkm + "<br/>";b["contact:phone"] && (c = isMobile() ? c + ('Telefon: <a href="tel:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>") : c + ('Telefon: <a href="callto:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>"), d = !0);b.phone && (c = isMobile() ? c + ('Telefon: <a href="tel:' + b.phone + '">' + b.phone + "</a><br/>") : c + ('Telefon: <a href="callto:' + b.phone + '">' + b.phone + "</a><br/>"), d = !0);b["contact:fax"] ? (c += "Telefax: " + b["contact:fax"] + "<br/>", d = !0) : b.fax && (c += "Telefax: " + b.fax + "<br/>", d = !0);b["contact:email"] ? (c += 'E-Mail-Adresse: <a href="mailto:' + b["contact:email"] + '">' + b["contact:email"] + "</a><br/>", d = !0) : b.email && (c += 'E-Mail-Adresse: <a href="mailto:' + b.email + '">' + b.email + "</a><br/>", d = !0);d && (c += "<br/>");if (b.opening_hours) {
        d = b.opening_hours;for (e = 0; 0 == e || 0 < d.indexOf(";");) {
            d = d.replace("PH", "FT"), d = d.replace("Tu", "Di"), d = d.replace("We", "Mi"), d = d.replace("Th", "Do"), d = d.replace("Su", "So"), d = d.replace("Mar", "M\xE4r"), d = d.replace("May", "Mai"), d = d.replace("Oct", "Okt"), d = d.replace("Dec", "Dez"), d = d.replace('"Please make a reservation"', '"Bitte vereinbaren Sie einen Termin"'), d = d.replace("off", "ausgenommen"), 0 < e && (d = d.replace(";", "<br/>")), e++;
        }c += "\xD6ffnungszeiten: <br/><div class=\"c4g_open_text\">" + d + "</div>";c = 0 < d.indexOf("FT") ? c + "(FT = Feiertag)<br/>" : c + "<br/>";
    }if (b["xmas:opening_hours"]) {
        d = b["xmas:opening_hours"];for (e = 0; 0 == e || 0 < d.indexOf(";");) {
            d = d.replace("PH", "FT"), d = d.replace("Tu", "Di"), d = d.replace("We", "Mi"), d = d.replace("Th", "Do"), d = d.replace("Su", "So"), d = d.replace("Mar", "M\xE4r"), d = d.replace("May", "Mai"), d = d.replace("Oct", "Okt"), d = d.replace("Dec", "Dez"), 0 < e && (d = d.replace(";", "<br/>")), e++;
        }c += "\xD6ffnungszeiten: <br/><div class=\"c4g_open_text\">" + d + "</div>";c = 0 < d.indexOf("FT") ? c + "(FT = Feiertag)<br/>" : c + "<br/>";
    }b["xmas:url"] && (d = "", d = b["xmas:url"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Website: <a href="' + d + '" target="_blank">Link zur Website</a><br/>');b["contact:website"] ? (d = b["contact:website"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Website: <a href="' + d + '" target="_blank">Link zur Website</a><br/>') : b.website && (d = b.website, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Website: <a href="' + d + '" target="_blank">Link zur Website</a><br/>');b.wikipedia && (d = b.wikipedia, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://wikipedia.org/wiki/" + d), c += 'Wikipedia: <a href="' + d + '" target="_blank">Link zu Wikipedia</a><br/>');b.wikimedia_commons && (d = b.wikimedia_commons, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://commons.wikimedia.org/wiki/" + d), c += 'Wikimedia: <a href="' + d + '" target="_blank">Link zu Wikimedia</a><br/>');b["contact:webcam"] && (d = b["contact:webcam"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Webcam: <a href="' + d + '" target="_blank">Link zur Webcam</a><br/>');b.image && (c += '<img src="' + b.image + '" width="200px" name="' + b.name + '" alt="' + b.name + '"><br/>');d = "";b.internet_access && (d += "Internetzugriff: " + translate(b.internet_access) + "<br/>");b["internet_access:fee"] && (d += "Internet Geb\xFChr: " + translate(b["internet_access:fee"]) + "<br/>");b["wifi_access:operator"] && (d += "wifi Betreiber: " + b["wifi_access:operator"] + "<br/>");b["wifi_access:technology"] && (d += "wifi Technologie: " + b["wifi_access:technology"] + "<br/>");b["wifi_access:ssid"] && (d += "wifi ssid: " + b["wifi_access:ssid"] + "<br/>");"" != d && (c += 'Internetzugang vorhanden<br/><div class="c4g_shop_internet_access">' + d + "</div><br/>");b.wheelchair && (c += "rollstuhlgeeignet: " + translate(b.wheelchair) + "<br/>");b["wheelchair:description"] && (c += "Beschreibung: " + b["wheelchair:description"] + "<br/>");b["wheelchair:entrance_width"] && (c += "Breite des Eingangs in CM: " + b["wheelchair:entrance_width"] + "<br/>");b["wheelchair:step_height"] && (c += "H\xF6he der Stufe am Eingang in CM: " + b["wheelchair:step_height"] + "<br/>");b["wheelchair:rooms"] && (c += "Anzahl rollstuhlgerechter R\xE4ume: " + b["wheelchair:rooms"] + "<br/>");b["wheelchair:places"] && (c += "Anzahl der Rollstuhlpl\xE4tze: " + b["wheelchair:places"] + "<br/>");b["cent:places"] && (c += "Anzahl der Rollstuhlpl\xE4tze: " + b["wheelchair:places"] + "<br/>");b["ramp:wheelchair"] && (c += "Rampe f\xFCr Rollstuhlfahrer: " + b["ramp:wheelchair"] + "<br/>");b["capacity:disabled"] && (c += "Behindertenparkpl\xE4tze: " + translate(b["capacity:disabled"]) + "<br/>");b["toilets:wheelchair"] && (c += "Behinderdengerechte Toilette: " + translate(b["toilets:wheelchair"]) + "<br/>");b.centralkey && (c += "Zentralschl\xFCssel: " + b.centralkey + "<br/>");b.note && (c += b.note + "<br/>");b.description && (c += b.description + "<br/>");b.operator && (c += "Betreiber: " + b.operator + "<br/>");b.ref && (c += "Referenz: " + b.ref + "<br/>");"yes" == b.lit && (c += "Dieses Objekt ist beleuchtet.<br/>");b.shop && (d = "", b.brand && (d += "Markenzeichen: " + b.brand + "<br/>"), b.sells && (d += "Verkaufs: " + b.sells + "<br/>"), b.origin && (d += "Herkunftsl\xE4nder: " + b.origin + "<br/>"), "yes" == b.wholesale && (d += "Gro\xDFh\xE4ndler: Ja<br/>"), "" != d && (c += 'Weitere Angaben zum Shop: <br/><div class="c4g_shop_text">' + d + "</div><br/>"));a && (d = a, trim(d), d = d.replace(/\./, "/"), c = c + "<br/>" + ('OSM:    <a href="http://www.openstreetmap.org/' + d + '" target="_blank">Link zur OpenStreetMap</a><br/>'));return c = '<div class="c4g_popup_footer">' + c + "</div>";
}
function fnGetTranslate_Type(b) {
    var a = "";if ("doctors" == b.amenity || "doctor" == b.healthcare) a += "Arzt<br/>";if ("hospital" == b.amenity || "clinic" == b.amenity || "hospital" == b.healthcare || "clinic" == b.healthcare) a = "yes" == b.emergency ? a + "Krankenhaus mit Notaufnahme<br/>" : a + "Krankenhaus<br/>";"dentist" == b.amenity && (a += "Zahnarzt<br/>");if ("pharmacy" == b.amenity || "pharmacy" == b["health_facility:type"]) a += "Apotheke<br/>";if ("physiotherapist" == b.healthcare || "yes" == b["health_speciality:physiotherapy"]) a += "Physiotherapeut<br/>";
    if ("occupational_therapist" == b.healthcare || "yes" == b["health_speciality:occupational_therapy"] || "yes" == b["health_specialty:occupational_therapy"]) a += "Ergotherapeut<br/>";if ("psychotherapist" == b.healthcare || "yes" == b["health_speciality:psychotherapy"]) a += "Psychotherapeut<br/>";"alternative" == b.healthcare && (a += "Alternativ- und Komplement\xE4rmediziner<br/>");"midwife" == b.healthcare && (a += "Hebamme<br/>");if ("speech_therapist" == b.healthcare || "yes" == b["health_speciality:speech_therapy"]) a += "Logop\xE4de<br/>";
    "yes" == b["health_speciality:music_therapy"] && (a += "Musiktherapeut<br/>");"veterinary" == b.amenity && (a += "Tierarzt<br/>");"fire_station" == b.amenity && (a += "Feuerwehrhaus<br/>");"fire_extinguisher" == b.emergency && (a += "Feuerl\xF6scher<br/>");"aed" == b.emergency && (a += "Mobiler Defibrilator<br/>");"defibrillator" == b.emergency && (a += "Mobiler Defibrilator<br/>");"phone" == b.emergency && (a += "Notrufs\xE4ule<br/>");"police" == b.amenity && (a += "Polizeiwache<br/>");"ambulance_station" == b.emergency && (a += "Rettungswache<br/>");
    "technical" == b.emergency_service && (a += "Technisches Hilfswerk<br/>");"water" == b.emergency_service && (a += "Wasserrettungsstation<br/>");"baywatch" == b.waterway && (a += "Wasserwacht<br/>");"air" == b.emergency_service && (a += "Rettungshubschrauber<br/>");"emergency_access_point" == b.highway && (a += "Notfallpunkt<br/>");if ("lifeboat_station" == b.amenity || "lifeboat_station" == b.emergency) a += "Rettungsbootstation<br/>";"life_ring" == b.emergency && (a += "Rettungsring<br/>");"siren" == b.emergency && (a += "Sirene<br/>");"life_ring" == b.amenity && (a += "Rettungsring<br/>");"rescue_station" == b.amenity && (a += "Rettungsstation<br/>");"fire_hydrant" == b.emergency && ("underground" == b["fire_hydrant:type"] ? a += "Unterflurhydrant<br/>" : "pillar" == b["fire_hydrant:type"] ? a += "\xDCberflurhydrant<br/>" : "wall" == b["fire_hydrant:type"] ? a += "Wandhydrant<br/>" : "pond" == b["fire_hydrant:type"] && (a += "Saugstelle<br/>"));"suction_point" == b.emergency && (a += "Saugstelle<br/>");"fire_water_pond" == b.emergency && (a += "L\xF6schteich<br/>");"mountain" == b.emergency_service && (a += "Bergrettungsstation<br/>");"water_tank" == b.emergency && (a += "L\xF6schwassertank<br/>");"container" == b.recycling_type && (a += "Recycling Container<br/>");"recycling" == b.amenity && "yes" == b["recycling:excrement"] || "pump-out" == b["seamark:small_craft_facility:category"] ? a += "Absaugstation<br/>" : "recycling" == b.amenity && (a += "Wertstoffhof<br/>");"yes" == b["diet:pescetarian"] ? a += "pescetarische Gerichte vorhanden<br/>" : "only" == b["diet:pescetarian"] && (a += "nur pescetarische Gerichte<br/>");"yes" == b["diet:vegetarian"] ? a += "vegetarische Gerichte vorhanden<br/>" : "only" == b["diet:vegetarian"] && (a += "nur vegetarische Gerichte<br/>");"yes" == b["diet:lacto_vegetarian"] ? a += "lacto-vegetarische Gerichte vorhanden<br/>" : "only" == b["diet:lacto_vegetarian"] && (a += "nur lacto-vegetarische Gerichte<br/>");"yes" == b["diet:ovo_vegetarian"] ? a += "ovo-vegetarische Gerichte vorhanden<br/>" : "only" == b["diet:ovo_vegetarian"] && (a += "nur ovo-vegetarische Gerichte<br/>");"yes" == b["diet:vegan"] ? a += "vegane Gerichte vorhanden<br/>" : "only" == b["diet:vegan"] && (a += "nur vegane Gerichte<br/>");"yes" == b["diet:fruitarian"] ? a += "frutarische Gerichte vorhanden<br/>" : "only" == b["diet:fruitarian"] && (a += "nur frutarische Gerichte<br/>");"yes" == b["diet:raw"] ? a += "rohk\xF6stliche Gerichte vorhanden<br/>" : "only" == b["diet:raw"] && (a += "nur rohk\xF6stliche Gerichte<br/>");"yes" == b["diet:gluten_free"] ? a += "glutenfreie Gerichte vorhanden<br/>" : "only" == b["diet:gluten_free"] && (a += "nur glutenfreie Gerichte<br/>");"yes" == b["diet:dairy_free"] ? a += "milchfreie Gerichte vorhanden<br/>" : "only" == b["diet:dairy_free"] && (a += "nur milchfreie Gerichte<br/>");"yes" == b["diet:lactose_free"] ? a += "laktosefreie Gerichte vorhanden<br/>" : "only" == b["diet:lactose_free"] && (a += "nur laktosefreie Gerichte<br/>");"yes" == b["diet:halal"] ? a += "Hal\u0101l Gerichte vorhanden<br/>" : "only" == b["diet:halal"] && (a += "nur Hal\u0101l Gerichte<br/>");"yes" == b["diet:kosher"] ? a += "koschere Gerichte vorhanden<br/>" : "only" == b["diet:kosher"] && (a += "nur koschere Gerichte<br/>");"pub" == b.amenity && (a += "Gastst\xE4tte<br/>");"bar" == b.amenity && (a += "Bar<br/>");"yes" == b.frozen_yogurt && (a += "Frozen Yogurt im Angebot<br/>");"yes" == b.slush_ice && (a += "Slush Ice im Angebot<br/>");"yes" == b.cake && (a += "Kuchenteilchen, Geb\xE4ck etc. im Angebot<br/>");"yes" == b.coffee && (a += "Kaffeegetr\xE4nke im Angebot<br/>");"yes" == b.drinks && (a += "Getr\xE4nke im Angebot<br/>");"biergarten" == b.amenity && (a += "Biergarten<br/>");"restaurant" == b.amenity && (a += "Restaurant<br/>");"fast_food" == b.amenity && (a += "Fast Food Restaurant<br/>");if (("cafe" == b.amenity || "coffee_shop" == b.amenity) && "ice_cream" != b.cuisine) a += "Caf\xE9, Bistro<br/>";if ("cafe" == b.amenity && "ice_cream" == b.cuisine || "ice_cream" == b.amenity) a += "Eiscafe<br/>";"alpine_hut" == b.tourism && (a += "Bergh\xFCtte<br/>");"aquarium" == b.tourism && (a += "Aquarium<br/>");"apartment" == b.tourism && (a += "Ferienwohnung<br/>");"attraction" == b.tourism && (a += "Sehensw\xFCrdigkeit<br/>");"artwork" == b.tourism && (a += "Skulptur<br/>");"camp_site" == b.tourism && (a += "Campingplatz<br/>");"caravan_site" == b.tourism && (a += "Wohnmobilstellplatz<br/>");
    "chalet" == b.tourism && (a += "Ferienwohnung /-haus<br/>");"gallery" == b.tourism && (a += "Kunstgalerie<br/>");"guest_house" == b.tourism && (a += "Pension, Gasthaus, Bed & Breakfast<br/>");"hostel" == b.tourism && (a += "Jugendherberge, Hostel<br/>");"hotel" == b.tourism && (a += "Hotel<br/>");"motel" == b.tourism && (a += "Motel<br/>");"museum" == b.tourism && (a += "Museum<br/>");"picnic_site" == b.tourism && (a += "Rast- und Picknickplatz<br/>");"theme_park" == b.tourism && (a += "Freizeit- oder Themenpark<br/>");"viewpoint" == b.tourism && (a += "Aussichtspunkt<br/>");
    "wilderness_hut" == b.tourism && (a += "Schutzh\xFCtte<br/>");"wine_cellar" == b.tourism && (a += "Weinkeller<br/>");"zoo" == b.tourism && (a += "Zoo / Tierpark<br/>", "enclosure" == b.zoo && (a += "mit Wildgehege<br/>"), "petting_zoo" == b.zoo && (a += "mit Streichelzoo<br/>"), "falconry" == b.zoo && (a += "mit Falknerei<br/>"));"trail_riding_station" == b.tourism && (a += "Wanderreitstation<br/>");"fishing" == b.club && (a += "Angelverein<br/>");"sport" == b.club && "fishing" == b.sport && (a += "fishing club<br/>");"amateur_radio" == b.club && (a += "Amateurfunker<br/>");
    "art" == b.club && (a += "Kunstverein<br/>");"astronomy" == b.club && (a += "Astronomieverein<br/>");"automobile" == b.club && (a += "Automobilverein<br/>");"board_games" == b.club && (a += "Brettspielverein<br/>");"card_games" == b.club && (a += "Kartenspielverein<br/>");"charity" == b.club && (a += "Charity-Verein<br/>");"chess" == b.club && (a += "Schachverein<br/>");"cinema" == b.club && (a += "Kinoverein<br/>");"cooking" == b.club && (a += "Kochverein<br/>");"culture" == b.club && (a += "Kulturverein<br/>");"doityourself" == b.club && (a += "doityourself-Verein<br/>");
    "equestrian" == b.club && (a += "Reitverein<br/>");"ethnic" == b.club && (a += "Ethnischer Verein<br/>");"fan" == b.club && (a += "Fanverein<br/>");"freemasonry" == b.club && (a += "Freimaurer-Verein<br/>");"game" == b.club && (a += "Spieleverein<br/>");"history" == b.club && (a += "Historischer-Verein / Verein f\xFCr Geschichte<br/>");"hunting" == b.club && (a += "Jagdverein<br/>");"linux" == b.club && (a += "Linux-Verein<br/>");"motorcycle" == b.club && (a += "Motorradverein<br/>");"music" == b.club && (a += "Musikverein<br/>");"nature" == b.club && (a += "Naturverein<br/>");
    "nudism" == b.club && (a += "Nudisten-Verein / FKK-Verein<br/>");"photography" == b.club && (a += "Fotografieverein<br/>");"politics" == b.club && (a += "Verein f\xFCr Politik<br/>");"relegion" == b.club && (a += "Politischer-Verein<br/>");"scout" == b.club && (a += "Pfadfinderin/Pfadfinder<br/>");"smoke" == b.club && (a += "Raucherverein<br/>");"sport" == b.club && (a += "Sportverein<br/>");"theatre" == b.club && (a += "Theaterverein<br/>");"veterans" == b.club && (a += "Veteranen<br/>");"amusement_arcade" == b.leisure && (a += "Spielhalle<br/>");"beach_resort" == b.leisure && (a += "Standbad<br/>");"bird_hide" == b.leisure && (a += "Vogelbeobachtungspunkt<br/>");"common" == b.leisure && (a += "\xD6ffentliche Gr\xFCnfl\xE4chen<br/>");"club" == b.leisure && (a += "Club/Verein<br/>");"dance" == b.leisure && (a += "Tanzen<br/>");"dog_park" == b.leisure && (a += "Hundepark<br/>");"firepit" == b.leisure && (a += "Feuerstelle<br/>");"fishing" == b.leisure && (a += "Angelstelle<br/>");"garden" == b.leisure && (a += "Garten<br/>");"golf_course" == b.leisure && (a += "Golfplatz<br/>");"hackerspace" == b.leisure && (a += "Ort f\xFCr Hackertreffen<br/>");
    "horse_riding" == b.leisure && (a += "Reitstall / Reiterhof<br/>");"ice_rink" == b.leisure && (a += "Eislaufbahn<br/>");"nature_reserve" == b.leisure && (a += "Naturschutzgebiet (NSG)<br/>");"park" == b.leisure && (a += "Gr\xFCnanlage<br/>");"miniature_golf" == b.leisure && (a += "Minigolf<br/>");"pitch" == b.leisure && (a += "Spielfeld<br/>");"pitch" == b.leisure && "yes" == b.building && (a += "Sporthalle<br/>");"playground" == b.leisure && "yes" == b.building ? a += "Spielscheune<br/>" : "playground" == b.leisure && (a += "Spielplatz<br/>");"social_club" == b.leisure && (a += "Treffpunkt f\xFCr Freizeitgruppen<br/>");"spa" == b.leisure && (a += "Heilbad / Spa<br/>");"sports_centre" == b.leisure && (a += "Sportzentrum<br/>");"climbing_adventure" == b.sport && (a += "Seilgarten<br/>");"stadium" == b.leisure && (a += "Stadion<br/>");"swimming_pool" == b.leisure && (a += "Schwimmbecken<br/>");"track" == b.leisure && (a += "Rennbahn<br/>");"water_park" == b.leisure && (a += "Wasserpark<br/>");"wildlife_hide" == b.leisure && (a += "Wildbeobachtungspunkt<br/>");"adult_gaming_centre" == b.leisure && (a += "Spielothek<br/>");
    "bowling_alley" == b.leisure && "10pin" == b.sport && (a += "Bowlingcenter<br/>");"bowling_alley" == b.leisure && "9pin" == b.sport && (a += "Kegelbahn<br/>");if ("karting" == b.sport || "motor" == b.sport) a += "Kart-/Motorsport<br/>";if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";if (b["piste:type"]) switch (b["piste:type"]) {case "skitour":
            a += "Piste f\xFCr Skitouren<br/>";break;case "downhill":
            a += "Skiabfahrt<br/>";break;case "sled":
            a += "Rodelberg / Rodelstrecke<br/>";break;case "nordic":
            a += "Langlauf Piste<br/>";break;case "hike":
            a += "Schneeschuh- und Winterwanderweg<br/>";break;case "snow_park":
            a += "Snow-Park<br/>";}if (b.sport) switch (b.sport) {case "surfing":
            a += "Surfen<br/>";break;case "kitesurfing":
            a += "Kitesurfen<br/>";break;case "water_ski":
            a += "Wasserski<br/>";}if (b.aerialway) switch (b.aerialway) {case "cable_bar":
            a += "Lift mit Gondeln<br/>";break;case "gondola":
            a += "Lift mit Gondeln<br/>";break;case "chair_lift":
            a += "Sessellift<br/>";break;case "mixed_lift":
            a += "Lift mit Sesseln und Gondeln<br/>";break;case "drag_lift":
            a += "Skilift<br/>";
            break;case "t-bar":
            a += "T-Lift<br/>";break;case "t-bar":
            a += "T-Lift (einseitig)<br/>";break;case "platter":
            a += "Lift mit Sitzscheibe<br/>";break;case "rope_tow":
            a += "B\xFCgellift<br/>";break;case "magic_carpet":
            a += "Bef\xF6rderungsband<br/>";break;default:
            a += "unbekannt";}"mosque" == b.building && (a += "Moschee<br/>");"synagogue" == b.building && (a += "Synagoge<br/>");"apartments" == b.building && (a += "Wohnung<br/>");"farm" == b.building && (a += "Farm<br/>");"hotel" == b.building && (a += "Hotel<br/>");"house" == b.building && (a += "Haus<br/>");"detached" == b.building && (a += "Freistehend<br/>");"residential" == b.building && (a += "Residenz<br/>");if ("domitory" == b.building || "residential plus" == b.building) a += "Wohnheim<br/>";"terrace" == b.building && (a += "Terrasse<br/>");"houseboat" == b.building && (a += "Hausboot<br/>");"bungalow" == b.building && (a += "Bungalow<br/>");"static_caravan" == b.building && (a += "Stehender Wohnwagen<br/>");"commercial" == b.building && (a += "Kommerziell<br/>");"retail" == b.building && (a += "Verkauf<br/>");"warehouse" == b.building && (a += "Lagerhaus<br/>");"bakehouse" == b.building && (a += "Backstube<br/>");"temple" == b.building && (a += "Tempel<br/>");"shrine" == b.building && (a += "Schrein<br/>");"civic" == b.building && (a += "B\xFCrgerlich<br/>");"stadium" == b.building && (a += "Stadium<br/>");"train_station" == b.building && (a += "Bahnhof<br/>");"university" == b.building && (a += "Universit\xE4t<br/>");"public" == b.building && (a += "\xD6ffentliches Geb\xE4ude<br/>");"bridge" == b.building && (a += "Br\xFCcke<br/>");"bunker" == b.building && (a += "Bunker<br/>");"cabin" == b.building && (a += "H\xFCtte<br/>");"conservatory" == b.building && (a += "Wintergarten<br/>");"construction" == b.building && (a += "Im Bau<br/>");"garage" == b.building && (a += "Garage<br/>");"garages" == b.building && (a += "Garagen<br/>");"greenhouse" == b.building && (a += "Gew\xE4chshaus<br/>");"hangar" == b.building && (a += "Hangar<br/>");"hut" == b.building && (a += "H\xFCtte<br/>");"pavillion" == b.building && (a += "Pavillion<br/>");"roof" == b.building && (a += "\xDCberdacht<br/>");"shed" == b.building && (a += "Gartenh\xE4uschen<br/>");
    "transformer_tower" == b.building && (a += "Transformator Turm<br/>");"service" == b.building && (a += "Service-Stelle<br/>");"kiosk" == b.building && (a += "Kiosk<br/>");"carport" == b.building && (a += "Carport<br/>");"ruins" == b.building && (a += "Ruinen<br/>");"gambling" == b.amenity && (a += "Spielhalle<br/>");"library" == b.amenity && (a += "B\xFCcherei<br/>");"fountain" == b.amenity && (a += "Brunnen<br/>");"attraction" == b.amenity && (a += "Sehensw\xFCrdigkeit<br/>");if ("social_centre" == b.amenity || "club" == b.amenity) a += "Verein / Club<br/>";
    "townhall" == b.amenity && (a += "Rathaus / B\xFCrgerhaus<br/>");"bench" == b.amenity && (a += "Parkbank<br/>");if ("grave_yard" == b.amenity || "cemetery" == b.landuse) a += "Friedhof<br/>";"post_box" == b.amenity && (a += "Briefkasten<br/>");"post_office" == b.amenity && (a += "Postamt<br/>");"telephone" == b.amenity && (a += "Telefon<br/>");"atm" == b.amenity && (a += "Geldautomat<br/>");"bank" == b.amenity && (a += "Bankfiliale<br/>");"toilets" == b.amenity && "yes" == b.diaper ? a += "\xD6ffentliche Toilette mit Wickeltisch<br/>" : "toilets" == b.amenity && (a += "\xD6ffentliche Toilette<br/>");"school" == b.amenity && "1" == b["isced:level"] ? a += "Grundschule<br/>" : "school" == b.amenity && "2" == b["isced:level"] ? a += "Sekundarstufe I<br/>" : "school" == b.amenity && "3" == b["isced:level"] ? a += "Sekundarstufe II<br/>" : "school" == b.amenity && (a += "Schule<br/>");"kindergarten" == b.amenity && (a += "Kindergarten<br/>");"internet_cafe" == b.amenity && (a += "Internetcaf\xE9<br/>");"daycare" == b.amenity && (a += "Kinder- und Jugendtagesst\xE4tte<br/>");"childcare" == b.amenity && (a += "Kinder- und Jugendtagesst\xE4tte<br/>");
    "university" == b.amenity && (a += "Universit\xE4t/Hochschule<br/>");"college" == b.amenity && (a += "Universit\xE4t/Hochschule<br/>");"shelter" == b.amenity && (a += "Unterstand<br/>");"bbq" == b.amenity && (a += "Grillplatz<br/>");"nightclub" == b.amenity && (a += "Diskothek / Nachtklub<br/>");"bicycle_parking" == b.amenity && (a += "Fahrradparkplatz<br/>");"bicycle_rental" == b.amenity && (a += "Fahrradverleih<br/>");"boat_sharing" == b.amenity && (a += "Bootsverleih<br/>");"car_sharing" == b.amenity && (a += "Car-Sharing<br/>");"cinema" == b.amenity && (a += "Kino<br/>");"swimming_pool" == b.amenity && (a += "Schwimmbad<br/>");if ("embassy" == b.amenity || "embassy" == b.diplomatic) a += "Botschaft<br/>";"embassy" == b.amenity && "consulate" == b.diplomatic && (a += "Konsulate<br/>");"embassy" == b.amenity && "consulate_general" == b.diplomatic && (a += "Generalkonsulate<br/>");"embassy" == b.amenity && "honorary_consulate" == b.diplomatic && (a += "Honorarkonsulate<br/>");"embassy" == b.amenity && "permanent_mission" == b.diplomatic && (a += "St\xE4ndige Vertretung<br/>");"embassy" == b.amenity && "delegation" == b.diplomatic && (a += "Delegation<br/>");"embassy" == b.amenity && "high_commission" == b.diplomatic && (a += "Hochkommissariat<br/>");"Barfusspfad" == b.amenity && (a += "Barfu\xDFpfad<br/>");"casino" == b.amenity && (a += "Casino<br/>");"spa" == b.amenity && (a += "Heilbad / Spa<br/>");"stables" == b.amenity && (a += "Reitstall / Reiterhof<br/>");"watering_place" == b.amenity && (a += "Wasserstelle / Tr\xE4nke<br/>");"yes" == b.watering_place && (a += "Wasserstelle / Tr\xE4nke<br/>");"water_point" == b.amenity && (a += "gro\xDFe Trinkwasserstelle<br/>");
    "taxi" == b.amenity && (a += "Taxi<br/>");"car_wash" == b.amenity && (a += "Autowaschanlage<br/>");"brothel" == b.amenity && (a += "Bordell, Freudenhaus<br/>");"stripclub" == b.amenity && (a += "Stripclub<br/>");"swingerclub" == b.amenity && (a += "Swingerclub<br/>");"planetarium" == b.amenity && (a += "Planetarium<br/>");"courthouse" == b.amenity && (a += "Gericht<br/>");"crematorium" == b.amenity && (a += "Krematorium<br/>");if ("crypt" == b.amenity || "crypt" == b.building) a += "Krypta<br/>";"hunting_stand" == b.amenity && (a += "Hochsitz<br/>");"photo_booth" == b.amenity && (a += "Fotoautomat<br/>");"prison" == b.amenity && (a += "Gef\xE4ngnis<br/>");"ranger_station" == b.amenity && (a += "National Park Ranger Station<br/>");"register_office" == b.amenity && (a += "Standesamt<br/>");"marketplace" == b.amenity && (a += "Marktplatz / Wochenmarkt<br/>");"solarium" == b.amenity && (a += "Solarium<br/>");"sauna" == b.amenity && (a += "Sauna<br/>");"shower" == b.amenity && (a += "\xF6ffentliche Dusche<br/>");if ("waste_disposal" == b.amenity && (a += "M\xFCllentsorgung auf \xF6ffentlichen Pl\xE4tzen<br/>", b.waste)) switch (a += "Art: ", b.waste) {case "trash":
            a += "Allgemeiner M\xFCll<br/>";break;case "oil":
            a += "Oil<br/>";break;case "drugs":
            a += "Pharmazeutisch<br/>";break;case "organic":
            a += "Kompost<br/>";break;case "plastic":
            a += "Plastik<br/>";break;case "rubble":
            a += "Schutt<br/>";break;case "cigarettes":
            a += "Zigaretten<br/>";break;default:
            a += "Allgemeiner M\xFCll<br/>";}if ("waste_basket" == b.amenity || "dog_excrement" == b.waste) a += "Hunde-Code M\xFCllcontainer<br/>";if ("scout_camp" == b.amenity || "scout_hut" == b.amenity || "scout_hall" == b.amenity) a += "Pfadfinderheim<br/>";"ferry_terminal" == b.amenity && (a += "F\xE4hrhafen<br/>");"bureau_de_change" == b.amenity && (a += "Geldwechselstube<br/>");"youth_club" == b.amenity && (a += "Jugendzentrum<br/>");"festival_grounds" == b.amenity && (a += "Festivalgel\xE4nde<br/>");if ("yes" == b.openfire || "yes" == b.fireplace) a += "Offene Feuerstelle<br/>";if ("vending_machine" == b.amenity) if (b.vending) switch (b.vending) {case "admission_tickets":
            a += "Eintrittskartenautomat<br/>";break;case "animal_feed":
            a += "Tierfutterautomat<br/>";
            break;case "bicycle_tube":
            a += "Fahrradschlauchautomat<br/>";break;case "books":
            a += "B\xFCcherautomat<br/>";break;case "candles":
            a += "Kerzenautomat<br/>";break;case "cigarettes":
            a += "Zigarettenautomat<br/>";break;case "chemist":
            a += "Apotheken/Drogerie Automat<br/>";break;case "condoms":
            a += "Kondomautomat<br/>";break;case "drinks":
            a += "Getr\xE4nkeautomat<br/>";break;case "electronics":
            a += "Automat f\xFCr Elektro-Zubeh\xF6r<br/>";break;case "elongated_coin":
            a += "M\xFCnzpr\xE4gungsautomat<br/>";break;
        case "excrement_bags":
            a += "Hundet\xFCtenspender<br/>";break;case "feminine_hygiene":
            a += "Automat f\xFCr Damenhygieneprodukte<br/>";break;case "first_aid":
            a += "Erste-Hilfe-Automat<br/>";break;case "fishing_tackle":
            a += "Automat f\xFCr Angelzubeh\xF6r<br/>";break;case "fishing_bait":
            a += "Angelk\xF6derautomat<br/>";break;case "flowers":
            a += "Blumenautomat<br/>";break;case "food":
            a += "Lebensmittel-Automat<br/>";break;case "ice_cubes":
            a += "Eisw\xFCrfelautomat<br/>";break;case "ice_cream":
            a += "Automat f\xFCr Speiseeis<br/>";
            break;case "ink_cartridges":
            a += "Druckerpatronen Automat<br/>";break;case "laundry_detergent":
            a += "Waschmittelautomat<br/>";break;case "public_transport_tickets":
            a += "Fahrkartenautomat<br/>";break;case "newspaper":
            a += "Zeitungsautomat<br/>";break;case "parcel_pickup":
            a += "Packstation<br/>";break;case "parcel_mail_in":
            a += "Paketstation<br/>";break;case "parking_tickets":
            a += "Parkscheinautomat<br/>";break;case "photos":
            a += "Fotoautomat<br/>";break;case "sex_toys":
            a += "Automat f\xFCr Sexspielzeug<br/>";break;
        case "SIM_cards":
            a += "Automat f\xFCr SIM Karten<br/>";break;case "stamps":
            a += "Briefmarkenautomat<br/>";break;case "sweets":
            a += "S\xFC\xDFigkeitenautomat<br/>";break;case "syringes":
            a += "Spritzenautomat<br/>";break;case "toll":
            a += "Maut-Automat<br/>";break;case "toys":
            a += "Spielzeugautomat<br/>";break;case "umbrellas":
            a += "Regenschirmautomat<br/>";break;default:
            a += "Verkaufsautomat<br/>";} else a += "Verkaufsautomat<br/>";"arts_centre" == b.amenity && (a += "Kulturzentrum<br/>");"artwork" == b.amenity && (a += "Kunstwerk / Kunstobjekt<br/>");
    "museum" == b.amenity && (a += "Museum<br/>");"theatre" == b.amenity && (a += "Theater<br/>");"cathedral" == b.building && (a += "Kathedrale<br/>");"church" == b.building && (a += "Kirche<br/>");"chapel" == b.building && (a += "Kapelle<br/>");"place_of_worship" == b.amenity && (a += "Kirche / Kultst\xE4tte<br/>");"village" == b.abandoned && (a += "Verlassene Stadt<br/>");"theme_park" == b["abandoned:tourism"] && (a += "Verlassener Vergn\xFCgungspark<br/>");"prison_camp" == b["abandoned:amenity"] && "concentration_camp" == ["concentration_camp"] && (a += "KZ Gedenkst\xE4tte<br/>");"yes" == b.abandoned && "bunker" == b.military && (a += "Verlassene Bunkeranlage<br/>");"yes" == b.abandoned && "barracks" == b.military && (a += "Verlassene Milit\xE4rbaracken<br/>");"yes" == b.abandoned && "airfield" == b.military && (a += "Verlassene Milit\xE4rflugplatz<br/>");"monastery" == b.historic && (a += "Historisches Kloster<br/>");"monastery" == b.amenity && (a += "Kloster<br/>");"monastery" == b.building && (a += "Kloster<br/>");"manor" == b.historic && (a += "Gutshaus / Herrenhaus<br/>");"boundary_stone" == b.historic && (a += "Historischer Grenzstein<br/>");"milestone" == b.historic && (a += "Historischer Meilenstein<br/>");"monument" == b.historic && (a += "Monument<br/>");"palace" == b.historic && (a += "Palast<br/>");"mine" == b.historic && (a += "Verlassene Mine<br/>");"ruins" == b.historic && (a += "Ruine<br/>");"harbour" == b.historic_usage && (a += "historischer Hafen<br/>");"rune_stone" == b.historic && (a += "Runenstein<br/>");"battlefield" == b.historic && (a += "Schlachtfeld<br/>");"blacksmith" == b.historic && (a += "Historische Schmiede<br/>");
    if ("tree_shrine" == b.historic || "wayside_shrine" == b.historic) a += "Schrein / Bildstock<br/>";"city_gate" == b.historic && (a += "Stadttor<br/>");"wayside_cross" == b.historic && (a += "Wegkreuz<br/>");"monument" == b.amenity && (a += "Denkmal<br/>");"memorial" == b.historic && (a += "Denkmal<br/>");"optical_telegraph" == b.historic && (a += "Optischer Telegraph<br/>");if ("castle" == b.historic) if (b.castle_type) switch (b.castle_type) {case "defensive":
            a += "Burg<br/>";break;case "palace":
            a += "Palast<br/>";break;case "stately":
            a += "Schloss<br/>";
            break;case "manor":
            a += "Herrenhaus<br/>";break;case "fortress":
            a += "Festung<br/>";break;case "castrum":
            a += "R\xF6misches Milit\xE4rlager<br/>";break;case "shiro":
            a += "Shiro<br/>";break;case "kremlin":
            a += "Kreml<br/>";break;default:
            a += "Schloss / Burg<br/>";} else a += "Schloss / Burg<br/>";"archaeological_site" == b.historic && (a += "Arch\xE4ologische Fundst\xE4tte<br/>");if ("tomb" == b.historic) if (b.tomb) switch (b.tomb) {case "tumulus":
            a += "H\xFCgelgrab<br/>";break;case "rock-cut":
            a += "Felsgrab<br/>";break;
        case "hypogeum":
            a += "Hypog\xE4um<br/>";break;case "war_grave":
            a += "Soldatenfriedhof<br/>";break;case "mausoleum":
            a += "Mausoleum<br/>";break;case "columbarium":
            a += "Kolumbarium<br/>";break;case "crypt":
            a += "Krypta<br/>";break;case "pyramid":
            a += "Pyramide<br/>";break;case "sarcophagus":
            a += "Sarkophag<br/>";break;case "vault":
            a += "Gruft<br/>";break;case "tombstone":
            a += "Grabstein<br/>";break;default:
            a += "Historische Grabst\xE4tte<br/>";} else a += "Historische Grabst\xE4tte<br/>";"accountant" == b.office && (a += "Buchhalter / Wirtschaftpr\xFCfer<br/>");"administrative" == b.office && (a += "Kreis- bzw. Gemeindebeh\xF6rde<br/>");"architect" == b.office && (a += "Architekturb\xFCro<br/>");"association" == b.office && (a += "Verein, Vereinigung bzw. Interessengemeinschaft<br/>");"physician" == b.office && (a += "Arzt<br/>");"camping" == b.office && (a += "Rezeption Campingplatz oder B\xFCro Freizeitpark<br/>");"company" == b.office && (a += "Sitz einer privaten Firma<br/>");"educational_institution" == b.office && (a += "Bildungseinrichtung<br/>");
    "employment_agency" == b.office && (a += "Job-Center / Arbeitsvermittlung<br/>");"estate_agent" == b.office && (a += "Immobilienmakler / Wohnungsbaugenossenschaft<br/>");"forestry" == b.office && (a += "Forstamt<br/>");"foundation" == b.office && (a += "Gesch\xE4ftsstelle einer Stiftung<br/>");"government" == b.office && (a += "Beh\xF6rde / Regierungseinrichtung<br/>");"guide" == b.office && (a += "B\xFCro f\xFCr Touristenf\xFChrungen<br/>");"insurance" == b.office && (a += "Versicherungsb\xFCro<br/>");"it" == b.office && (a += "IT-Unternehmen<br/>");
    "lawyer" == b.office && (a += "Rechtsanwaltskanzlei<br/>");"newspaper" == b.office && (a += "Zeitungsredaktion<br/>");"ngo" == b.office && (a += "B\xFCro einer Nichtregierungsorganisation<br/>");"notary" == b.office && (a += "Notar<br/>");"political_party" == b.office && (a += "B\xFCro einer politischen Partei<br/>");"quango" == b.office && (a += "B\xFCro einer halbstaatlichen Organisation<br/>");"realtor" == b.office && (a += "Immobilienmakler / Wohnungsbaugenossenschaft<br/>");"real_estate_agent" == b.office && (a += "Immobilienmakler / Wohnungsbaugenossenschaft<br/>");
    "register" == b.office && (a += "Standesamt<br/>");"religion" == b.office && (a += "B\xFCro einer religi\xF6sen Instanz<br/>");"research" == b.office && (a += "Forschungsunternehmen oder -institut<br/>");"tax" == b.office && (a += "Finanzamt<br/>");"telecommunication" == b.office && (a += "Telekommunikationsfirma<br/>");"travel_agent" == b.office && (a += "Sitz eines Reiseunternehmens<br/>");"water_utility" == b.office && (a += "Wasserwirtschaftsamt<br/>");"therapist" == b.office && (a += "Therapeut<br/>");"city" == b.place && (a += "Gro\xDFstadt<br/>");
    "town" == b.place && (a += "Stadt/Kleinstadt<br/>");"village" == b.place && (a += "Dorf<br/>");"continent" == b.place && (a += "Kontinent<br/>");"ocean" == b.place && (a += "Ozean</br>");"track" == b.highway && (a += "Forst-, Wald und Feldweg<br/>");"raceway" == b.highway && (a += "Motorsportbahn<br/>");"designated" == b.bicycle && (a += "Radweg<br/>");"path" == b.highway && (a += "Fu\xDFweg<br/>");"parking" == b.amenity && (a += "Parkplatz<br/>");"services" == b.highway && (a += "Rastst\xE4tte<br/>");"rest_area" == b.highway && (a += "Rastplatz<br/>");"turning_circle" == b.highway && (a += "Wendeplatz/Wendehammer<br/>");"service" == b.highway && (a += "Zufahrtsstra\xDFe / Erschlie\xDFungsweg<br/>");"motorway" == b.highway && (a += "Autobahn<br/>");"motorway_junction" == b.highway && (a += "Autobahnauffahrt<br/>");"bridleway" == b.highway && (a += "Reitweg<br/>");"yes" == b.oneway && (a += "Einbahnstra\xDFe<br/>");"yes" == b.park_ride && (a += "Park and Ride<br/>");"unknown" == b.park_ride && (a += "Park and Ride<br/>");"bus" == b.park_ride && (a += "Park and Ride<br/>");"tram" == b.park_ride && (a += "Park and Ride<br/>");
    "bus_stop" == b.highway && (a += "Bushaltestelle<br/>");"pedestrian" == b.highway && (a += "Fu\xDFg\xE4ngerzone<br/>");"street_lamp" == b.highway && (a += "Strassenlaterne<br/>");"traffic_signals" == b.highway && (a += "Ampel<br/>");"traffic_signals" == b.crossing && (a += "Fu\xDFg\xE4ngerampel<br/>");"speed_camera" == b.highway && (a += "Blitzer<br/>");"yes" == b.traffic_calming && (ret += "Verkehrsberuhigter Bereich</br>");"bump" == b.traffic_calming && (a += "Kurze Bodenwelle</br>");"chicane" == b.traffic_calming && (a += "Zu umfahrendenes Hinderniss</br>");
    "choker" == b.traffic_calming && (a += "Fahrbahnverengung, zu umfahrende Hindernisse m\xF6glich</br>");"cushion" == b.traffic_calming && (a += "Bodenwelle mit L\xFCcken aus mehreren rechteckigen Huckeln</br>");"hump" == b.traffic_calming && (a += "vergleichbare Bodenwelle mit etwar einer L\xE4nge von 2-4M</br>");"island" == b.traffic_calming && (a += "Eine Verkehrsinsel</br>");"rumble_strip" == b.traffic_calming && (a += "Holperstreifen</br>");"table" == b.traffic_calming && (a += "lange Bodenwellen mit flachen Mittelst\xFCck</br>");
    "buoy_cardinal" == b["seamark:type"] && (a += "Kardinalstonne<br/>");"buoy_lateral" == b["seamark:type"] && (a += "Lateraltonne<br/>");"buoy_isolated_danger" == b["seamark:type"] && (a += "Gefahrentonne<br/>");"perch" == b["seamark:beacon_lateral:shape"] && (a += "Pricke<br/>");"fuel" == b.amenity && "fuel_station" == b["seamark:small_craft_facility:category"] ? a += "Schiffstankstelle<br/>" : "fuel" == b.amenity && (a += "Tankstelle<br/>");if ("charging_station" == b.amenity) {
        var a = a + "Ladestation / Stromtankstelle<br/>",
            c = b.voltage;if (b.car) {
            switch (b.car) {case "yes":
                    a += "F\xFCr Autos: Ja";break;case "no":
                    a += "F\xFCr Autos: Nein";break;default:
                    a += "F\xFCr Autos: Unbekannt";}a += "<br/>";
        } else a += "F\xFCr Autos: Unbekannt<br/>";if (b.bicycle) {
            switch (b.bicycle) {case "yes":
                    a += "F\xFCr E-Bike: Ja";break;case "no":
                    a += "F\xFCr E-Bike: Nein";break;default:
                    a += "F\xFCr E-Bike: Unbekannt";}a += "<br/>";
        } else a += "F\xFCr E-Bike: Unbekannt<br/>";"no" == b["socket:schuko"] && (a += "Stecker Schuko: Nein<br/>");"yes" == b["socket:schuko"] && (a += "Stecker Schuko: Ja<br/>");"no" == b["socket:cee_blue"] && (a += "Stecker CEE Blau: Nein<br/>");"yes" == b["socket:cee_blue"] && (a += "Stecker CEE Blau: Ja<br/>");"no" == b["socket:cee_red_16a"] && (a += "Stecker CEE Rot 16a: Nein<br/>");"yes" == b["socket:cee_red_16a"] && (a += "Stecker CEE Rot 16a: Ja<br/>");"no" == b["socket:cee_red_32a"] && (a += "Stecker CEE Rot 32a: Nein<br/>");"yes" == b["socket:cee_red_32a"] && (a += "Stecker CEE Rot 32a: Ja<br/>");"no" == b["socket:cee_red_64a"] && (a += "Stecker CEE Rot 64a: Nein<br/>");"yes" == b["socket:cee_red_64a"] && (a += "Stecker CEE Rot 64a: Ja<br/>");
        "no" == b["socket:cee_red_125a"] && (a += "Stecker CEE Rot 125a: Nein<br/>");"yes" == b["socket:cee_red_125a"] && (a += "Stecker CEE Rot 125a: Ja<br/>");"no" == b["socket:nema_5_15"] && (a += "Stecker Nema 5 15: Nein<br/>");"yes" == b["socket:nema_5_15"] && (a += "Stecker Nema 5 15: Ja<br/>");"no" == b["socket:nema_5_20"] && (a += "Stecker Nema 5 20: Nein<br/>");"yes" == b["socket:nema_5_20"] && (a += "Stecker Nema 5 20: Ja<br/>");"no" == b["socket:nema_14_30"] && (a += "Stecker Nema 14 30: Nein<br/>");"yes" == b["socket:nema_14_30"] && (a += "Stecker Nema 14 30: Ja<br/>");"Nein" == b["socket:nema_14_50"] && (a += "Stecker Nema 14  50: Nein<br/>");"yes" == b["socket:nema_14_50"] && (a += "Stecker Nema 14 50: Ja<br/>");"nein" == b["socket:bs1363"] && (a += "Stecker BS 1363: Nein<br/>");"yes" == b["socket:bs1363"] && (a += "Stecker BS 1363: Ja<br/>");"no" == b["socket:type1"] && (a += "Stecker Typ 1:Nein<br/>");"yes" == b["socket:type1"] && (a += "Stecker Typ 1: Ja<br/>");"no" == b["socket:type1_combo"] && (a += "Stecker Typ 1 Kombo: Nein<br/>");"yes" == b["socket:type1_combo"] && (a += "Stecker Typ 1 Kombo: Ja<br/>");"Nein" == b["socket:type2"] && (a += "Stecker Typ 2: Nein<br/>");"yes" == b["socket:type2"] && (a += "Stecker Typ 2: Ja<br/>");"no" == b["socket:type2_combo"] && (a += "Stecker Typ 2 Kombo: Nein<br/>");"yes" == b["socket:type2_combo"] && (a += "Stecker Typ 2 Kombo: Ja<br/>");"no" == b["socket:type3"] && (a += "Stecker Typ: Nein<br/>");"yes" == b["socket:type3"] && (a += "Stecker Typ 3: Ja<br/>");"no" == b["socket:chademo"] && (a += "Stecker CHAdeMO: Nein<br/>");"yes" == b["socket:chademo"] && (a += "Stecker CHAdeMO: Ja<br/>");
        "no" == b["socket:magne_charge"] && (a += "Stecker Magne : Nein<br/>");"yes" == b["socket:magne_charge"] && (a += "Stecker Magne : Ja<br/>");"no" == b["socket:tesla_standard"] && (a += "Stecker Tesla Standard: Nein<br/>");"yes" == b["socket:tesla_standard"] && (a += "Stecker Tesla Standard: Nein<br/>");"no" == b["socket:tesla_supercharge"] && (a += "Stecker Tesla Schnellladestation: Nein<br/>");"yes" == b["socket:tesla_supercharge"] && (a += "Stecker Tesla Schnellladestation: Ja<br/>");"no" == b["socket:tesla_roadster"] && (a += "Stecker Tesla Roadster: Nein<br/>");
        "yes" == b["socket:tesla_roadster"] && (a += "Stecker Tesla Roadster: Ja<br/>");b["socket:schuko"] && (a += "Stecker Schuko: " + b["socket:schuko"] + "<br/>");b["socket:cee_blue"] && (a += "Stecker CEE Blau: " + b["socket:cee_blue"] + "<br/>");b["socket:cee_red_16a"] && (a += "Stecker CEE Rot 16a: " + b["socket:cee_red_16a"] + "<br/>");b["socket:cee_red_32a"] && (a += "Stecker CEE Rot 32a: " + b["socket:cee_red_32a"] + "<br/>");b["socket:cee_red_64a"] && (a += "Stecker CEE Rot 64a: " + b["socket:cee_red_64a"] + "<br/>");b["socket:cee_red_125a"] && (a += "Stecker CEE Rot 125a: " + b["socket:cee_red_125a"] + "<br/>");b["socket:nema_5_15"] && (a += "Stecker Nema 5 15: " + b["socket:nema_5_15"] + "<br/>");b["socket:nema_5_20"] && (a += "Stecker Nema 5 20: " + b["socket:nema_5_20"] + "<br/>");b["socket:nema_14_30"] && (a += "Stecker Nema 14 30: " + b["socket:nema_14_30"] + "<br/>");b["socket:nema_14_50"] && (a += "Stecker Nema 14 50: " + b["socket:nema_14_50"] + "<br/>");b["socket:bs1363"] && (a += "Stecker BS 1363: " + b["socket:bs1363"] + "<br/>");b["socket:type1"] && (a += "Stecker Typ 1: " + b["socket:type1"] + "<br/>");b["socket:type1_combo"] && (a += "Stecker Typ 1 Kombo: " + b["socket:schuko"] + "<br/>");b["socket:type2"] && (a += "Stecker Typ 2: " + b["socket:type2"] + "<br/>");b["socket:type2_combo"] && (a += "Stecker Typ 2 Kombo: " + b["socket:type2_combo"] + "<br/>");b["socket:type3"] && (a += "Stecker Typ 3: " + b["socket:type3"] + "<br/>");b["socket:chademo"] && (a += "Stecker CHAdeMO: " + b["socket:chademo"] + "<br/>");b["socket:magne_charge"] && (a += "Stecker Magne : " + b["socket:magne_charge"] + "<br/>");b["socket:tesla_standard"] && (a += "Stecker Tesla Standard: " + b["socket:tesla_standard"] + "<br/>");b["socket:tesla_supercharge"] && (a += "Stecker Tesla Schnellladestation: " + b["socket:tesla_supercharge"] + "<br/>");b["socket:tesla_roadster"] && (a += "Stecker Tesla Roadster: " + b["socket:tesla_roadster"] + "<br/>");a += "<br/>";b.voltage && (a += "Volt: " + c + "<br/>");
    }"yes" == b.tunnel && (a += "Tunnel<br/>");if (b.bridge) switch (a += "Br\xFCcken-Typ: ", b.bridge) {case "swing":
            a += "Drehbr\xFCcke";break;case "aqueduct":
            a += "Historische Wasserpipeline";break;
        case "bascule":
            a += "Klapp bzw. Wippbr\xFCcke";break;case "boardwalk":
            a += "Bohlenweg";break;case "cantilever":
            a += "Auslegerbr\xFCcke";break;case "covered":
            a += "gedeckte Br\xFCcke";break;case "drawbridge":
            a += "Klappbr\xFCcke";break;case "humpback":
            a += "Drehbr\xFCcke";break;case "lift":
            a += "Hubbr\xFCcke";break;case "low_water_crossing":
            a += "Irische Br\xFCcke";break;case "moveable":
            a += "Bewegliche Br\xFCcken";break;case "pontoon":
            a += "Schwimmbr\xFCcke";break;case "suspension":
            a += "H\xE4ngebr\xFCcke";
            break;case "trestle":
            a += "Trestle-Br\xFCcke";break;case "viaduct":
            a += "Viadukt";}if (b["bridge:movable"]) switch (b["bridge:movable"]) {case "swing":
            a += "Drehbr\xFCcke";break;case "bascule":
            a += "Klapp bzw. Wippbr\xFCcke";break;case "drawbridge":
            a += "Klappbr\xFCcke";break;case "lift":
            a += "Hubbr\xFCcke";break;case "submersible":
            a += "Senkbr\xFCcke";break;case "transporter":
            a += "Schwebef\xE4hre";break;case "retractable":
            a += "Schubbr\xFCcke";}if ("nursing_home" == b.amenity || "retirement_home" == b.amenity) a += "Seniorenheim / Pflegeheim<br/>";"social_facility" == b.amenity && (a += "Allg. soziale Einrichtung<br/>");if (b.social_facility) {
        "group_home" == b.social_facility && "senior" == b["social_facility:for"] && (a += "Seniorenheim<br/>");"assisted_living" == b.social_facility && (a += "Betreutes Wohnen<br/>");"outreach" == b.social_facility && (a += "Beratungsstelle<br/>");"workshop" == b.social_facility && (a += "soziale Werkstatt<br/>");if ("ambulatory_care" == b.social_facility || "healthcare" == b.social_facility) a += "Ambulanter Pflegedienst<br/>";
        "shelter" == b.social_facility && "senior" == b["social_facility:for"] && (a += "Tages- u. Kurzzeitpflege<br/>");"shelter" == b.social_facility && "abused" == b["social_facility:for"] && (a += "Notunterkunft<br/>");"food_bank" == b.social_facility && (a += "Lebensmittelhilfe<br/>");"hospice" == b.social_facility && (a += "Hospiz<br/>");
    }b.brewery && (a += "Ausgeschenkte Biersorten: " + b.brewery + "<br/>");"alcohol" == b.shop && (a += "Spirituosenladen<br/>");"bakery" == b.shop && (a += "B\xE4ckerei<br/>");"beverages" == b.shop && (a += "Getr\xE4nkehandel<br/>");
    "butcher" == b.shop && (a += "Fleischerei<br/>");"cheese" == b.shop && (a += "K\xE4sefachgesch\xE4ft<br/>");"chocolate" == b.shop && (a += "Schokoladenfachgesch\xE4ft<br/>");"coffee" == b.shop && (a += "Kaffeefachgesch\xE4ft<br/>");"confectionery" == b.shop && (a += "S\xFC\xDFwarenladen<br/>");"convenience" == b.shop && (a += "Lebensmittelgesch\xE4ft<br/>");"deli" == b.shop && (a += "Feinkostladen<br/>");"dairy" == b.shop && (a += "Milchladen<br/>");"farm" == b.shop && (a += "Hofladen<br/>");"greengrocer" == b.shop && (a += "Gem\xFCseh\xE4ndler<br/>");
    "grocery" == b.shop && (a += "Lebensmittelgesch\xE4ft<br/>");"organic" == b.shop && (a += "Bio-Laden, Reformhaus<br/>");"pasta" == b.shop && (a += "Pastagesch\xE4ft<br/>");"seafood" == b.shop && (a += "Fischfachgesch\xE4ft<br/>");"tea" == b.shop && (a += "Teefachgesch\xE4ft<br/>");"wine" == b.shop && (a += "Weinhandlung<br/>");"department_store" == b.shop && (a += "Kaufhaus<br/>");"general" == b.shop && (a += "Gemischtwarenhandlung<br/>");"kiosk" == b.shop && (a += "Kiosk<br/>");"mall" == b.shop && (a += "Einkaufszentrum<br/>");"supermarket" == b.shop && (a += "Supermarkt<br/>");"baby_goods" == b.shop && (a += "Babyfachmarkt<br/>");"bag" == b.shop && (a += "Taschen und Koffer<br/>");"boutique" == b.shop && (a += "Boutique<br/>");"clothes" == b.shop && (a += "Bekleidung<br/>");"fabric" == b.shop && (a += "Textilgesch\xE4ft<br/>");"fashion" == b.shop && (a += "Fashion<br/>");"jewelry" == b.shop && (a += "Juwelier<br/>");"leather" == b.shop && (a += "Lederwaren<br/>");"shoes" == b.shop && (a += "Schuhfachgesch\xE4ft<br/>");"variety_store" == b.shop && (a += "Ein-Euro-Laden<br/>");"chemist" == b.shop && (a += "Drogerie<br/>");
    "cosmetics" == b.shop && (a += "Kosmetikfachgesch\xE4ft<br/>");"drugstore" == b.shop && (a += "Drogerie oder Apotheke (veraltet)<br/>");"perfumery" == b.shop && (a += "Parf\xFCmerie<br/>");"erotic" == b.shop && (a += "Erotikhandel<br/>");"hairdresser" == b.shop && (a += "Friseur<br/>");"hearing_aids" == b.shop && (a += "H\xF6rger\xE4te<br/>");"herbalist" == b.shop && (a += "Kr\xE4uterhandel<br/>");"massage" == b.shop && (a += "Massagesalon<br/>");"medical_supply" == b.shop && (a += "Sanit\xE4tshaus<br/>");"optician" == b.shop && (a += "Optiker<br/>");
    "tattoo" == b.shop && (a += "T\xE4towierer<br/>");"bathroom_furnishing" == b.shop && (a += "Badm\xF6bel und -accessoires<br/>");"doityourself" == b.shop && (a += "Baumarkt/Baustoffhandel<br/>");"energy" == b.shop && (a += "Energiehandel<br/>");"florist" == b.shop && (a += "Blumengesch\xE4ft<br/>");"furnace" == b.shop && (a += "Ofenfachgesch\xE4ft<br/>");"garden_centre" == b.shop && (a += "Gartencenter<br/>");"gas" == b.shop && (a += "Fachgesch\xE4ft f\xFCr technische Gase<br/>");"glaziery" == b.shop && (a += "Glaserei<br/>");"hardware" == b.shop && (a += "Eisenwaren<br/>");"houseware" == b.shop && (a += "Haushaltswaren und Inneneinrichtung<br/>");"locksmith" == b.shop && (a += "Schl\xFCsseldienst<br/>");"paint" == b.shop && (a += "Farbenfachgesch\xE4ft<br/>");"trade" == b.shop && (a += "Baustoffhandel<br/>");"antiques" == b.shop && (a += "Antiquit\xE4ten<br/>");"bed" == b.shop && (a += "Betten- und Matratzengesch\xE4ft<br/>");"candles" == b.shop && (a += "Kerzengesch\xE4ft<br/>");"carpet" == b.shop && (a += "Teppichfachhandel<br/>");"curtain" == b.shop && (a += "Gardinenfachgesch\xE4ft<br/>");
    "furniture" == b.shop && (a += "M\xF6bel- und Einrichtungshaus<br/>");"interior_decoration" == b.shop && (a += "Innendekoration / Raumausstattung<br/>");"kitchen" == b.shop && (a += "K\xFCchen<br/>");"window_blind" == b.shop && (a += "Jalousien und Roll\xE4den<br/>");"computer" == b.shop && (a += "Computer-Fachh\xE4ndler<br/>");"electronics" == b.shop && (a += "Elektronikmarkt<br/>");"hifi" == b.shop && (a += "Hifi-Fachh\xE4ndler<br/>");"mobile_phone" == b.shop && (a += "Handy-Shop<br/>");"radiotechnics" == b.shop && (a += "Radio- und Fernsehtechnik<br/>");
    "vacuum_cleaner" == b.shop && (a += "Staubsaugerfachgesch\xE4ft<br/>");"bicycle" == b.shop && (a += "Fahrradfachgesch\xE4ft<br/>");"car" == b.shop && (a += "Autohaus<br/>");"car_repair" == b.shop && (a += "Autowerkstatt<br/>");"car_parts" == b.shop && (a += "Autoteilefachgesch\xE4ft<br/>");if ("dive" == b.shop || "scuba_diving" == b.shop) a += "Tauchausr\xFCstung<br/>";"fishing" == b.shop && (a += "Angelfachgesch\xE4ft<br/>");"free_flying" == b.shop && (a += "Fallschirmausr\xFCstung<br/>");"hunting" == b.shop && (a += "Jagdausr\xFCstung<br/>");
    "motorcycle" == b.shop && (a += "Motorradgesch\xE4ft<br/>");"outdoor" == b.shop && (a += "Trekking-/Outdoorladen<br/>");"sports" == b.shop && (a += "Sportgesch\xE4ft<br/>");"tyres" == b.shop && (a += "Reifenfachhandel<br/>");"water_sports" == b.shop && (a += "Wassersportbedarf<br/>");"art" == b.shop && (a += "Kunstladen<br/>");"craft" == b.shop && (a += "Kunsthandwerk<br/>");"frame" == b.shop && (a += "Bilderrahmengesch\xE4ft<br/>");"music" == b.shop && (a += "Musikgesch\xE4ft<br/>");"music_instrument" == b.shop && (a += "Musikhaus<br/>");"photo" == b.shop && (a += "Fotofachgesch\xE4ft<br/>");"video" == b.shop && (a += "Videothek<br/>");"video_games" == b.shop && (a += "Videospiele<br/>");"anime" == b.shop && (a += "Anime<br/>");"books" == b.shop && (a += "Buchhandlung<br/>");"gift" == b.shop && (a += "Andenken, Reisemitbringsel, Souveniershop<br/>");"newsagent" == b.shop && (a += "Zeitungsh\xE4ndler<br/>");"stationery" == b.shop && (a += "Schreibwaren<br/>");"ticket" == b.shop && (a += "Ticketshop<br/>");"copyshop" == b.shop && (a += "Kopierladen<br/>");"funeral_directors" == b.shop && (a += "Bestattungsunternehmen<br/>");
    "laundry" == b.shop && (a += "Waschsalon / W\xE4scherei<br/>");"dry_cleaning" == b.shop && (a += "chemische Reinigung<br/>");"money_lender" == b.shop && (a += "Geldverleiher<br/>");"pawnbroker" == b.shop && (a += "Pfandhaus / Pfandleiher<br/>");"pet" == b.shop && (a += "Zoo- und Tierhandlung<br/>");"pyrotechnics" == b.shop && (a += "Feuerwerk<br/>");"religion" == b.shop && (a += "Religi\xF6se Artikel<br/>");"beauty" == b.shop && (a += "Sch\xF6nheitssalon<br/>");"solarium" == b.shop && (a += "Solarium<br/>");"tobacco" == b.shop && (a += "Tabakwaren<br/>");
    "toys" == b.shop && (a += "Spielwaren<br/>");"travel_agency" == b.shop && (a += "Reiseb\xFCro<br/>");"market_hall" == b.shop && (a += "Markthalle<br/>");"vacant" == b.shop && (a += "leerstehendes Ladenlokal<br/>");"weapons" == b.shop && (a += "Waffenladen<br/>");"lottery" == b.gambling && (a += "Lottoannahmestelle<br/>");"fish" == b.pet && (a += "Aquaristik<br/>");"agriucultural_engines" == b.craft && (a += "Landmaschinenbau<br/>");"basket_maker" == b.craft && (a += "Korbmacher<br/>");"beekeeper" == b.craft && (a += "Imker<br/>");"blacksmith" == b.craft && (a += "Schmied<br/>");"brewery" == b.craft && (a += "Brauerei<br/>");"yes" == b.microbrewery && (a += "Hausbrauerei<br/>");"boatbuilder" == b.craft && (a += "Bootsbauer<br/>");"bookbinder" == b.craft && (a += "Buchbinder<br/>");"builder" == b.craft && (a += "Hausbau<br/>");"carpenter" == b.craft && (a += "Tischler/Schreiner, Zimmermann<br/>");"carpet_layer" == b.craft && (a += "Teppichleger<br/>");"caterer" == b.craft && (a += "Catering<br/>");"clockmaker" == b.craft && (a += "Uhrmacher<br/>");"confectionery" == b.craft && (a += "Konditorei<br/>");"dressmaker" == b.craft && (a += "Schneider<br/>");"electrician" == b.craft && (a += "Elektriker<br/>");"gardener" == b.craft && (a += "Garten- und Landschaftsbauer<br/>");"glaziery" == b.craft && (a += "Glaserei<br/>");"handicraft" == b.craft && (a += "Handwerkskunst<br/>");"hvac" == b.craft && (a += "K\xE4lteanlagenbauer f\xFCr L\xFCftungs-, Heizungs- und Klimatechnik<br/>");"insulation" == b.craft && (a += "W\xE4rmed\xE4mmung von Geb\xE4uden<br/>");"jeweller" == b.craft && (a += "Juwelier, Gold-/Silber-Schmied<br/>");"key_cutter" == b.craft && (a += "Schl\xFCsselmacher<br/>");"locksmith" == b.craft && (a += "Schl\xFCsseldienst<br/>");"metal_construction" == b.craft && (a += "Metallbauer<br/>");"optician" == b.craft && (a += "Optiker<br/>");"painter" == b.craft && (a += "Maler<br/>");"parquet_layer" == b.craft && (a += "Parkettverleger<br/>");"photographer" == b.craft && (a += "Fotograf<br/>");"photographic_laboratory" == b.craft && (a += "Fotolabor<br/>");"plasterer" == b.craft && (a += "Gipser, Verputzer, Stuckateur<br/>");"plumber" == b.craft && (a += "Anlagenmechaniker Sanit\xE4r-, Heizungs- und Klimatechnik.<br/>");
    "pottery" == b.craft && (a += "T\xF6pferei<br/>");"rigger" == b.craft && (a += "Riggemacher (Takelage f\xFCr Segelschiffe)<br/>");"roofer" == b.craft && (a += "Dachdecker<br/>");"saddler" == b.craft && (a += "Sattler<br/>");"sailmaker" == b.craft && (a += "Segelmacher<br/>");"sawmill" == b.craft && (a += "Holzverarbeitungsbetrieb<br/>");"scaffolder" == b.craft && (a += "Ger\xFCstbauer<br/>");"sculptor" == b.craft && (a += "Bildhauer<br/>");"shoemaker" == b.craft && (a += "Schuhmacher<br/>");"stand_builder" == b.craft && (a += "Messe- / Standbauer<br/>");
    "stonemason" == b.craft && (a += "Steinmetz<br/>");"sun_protection" == b.craft && (a += "Rolladen- und Jalousiebauer<br/>");"sweep" == b.craft && (a += "Schornsteinfeger<br/>");"tailor" == b.craft && (a += "Schneider<br/>");"tiler" == b.craft && (a += "Fliesen-, Platten- und Mosaikleger<br/>");"tinsmith" == b.craft && (a += "Spengler, Klempner<br/>");"upholsterer" == b.craft && (a += "Polsterer<br/>");"watchmaker" == b.craft && (a += "Uhrmacher<br/>");"window_construction" == b.craft && (a += "Fensterbauer<br/>");"machines" == b.rental && (a += "Maschinenverleih<br/>");
    "car_rental" == b.amenity && (a += "Autoverleih<br/>");"allotments" == b.landuse && (a += "Schrebergarten<br/>");"basin" == b.landuse && (a += "Regenwasserr\xFCckhaltebecken<br/>");"brownfield" == b.landuse && (a += "Vorher bebautes Land<br/>");"commercial" == b.landuse && (a += "Industriegebiet<br/>");"construction" == b.landuse && (a += "Baugebiet<br/>");"farmland" == b.landuse && (a += "Ackerfl\xE4che<br/>");"farmyard" == b.landuse && (a += "landwirtschaftlicher Betrieb<br/>");"forest" == b.landuse && (a += "Forst<br/>");"garages" == b.landuse && (a += "Garagenkomplex<br/>");"grass" == b.landuse && (a += "Rasenfl\xE4chen<br/>");"greenfield" == b.landuse && (a += "Bauerwartungsland<br/>");"greenhouse_horticulture" == b.landuse && (a += "Gew\xE4chshaus-Fl\xE4che<br/>");"industrial" == b.landuse && (a += "Gewerbe-/Industriegebiet<br/>");"landfill" == b.landuse && (a += "M\xFClldeponie<br/>");"meadow" == b.landuse && (a += "Gr\xFCnfl\xE4che<br/>");"orchard" == b.landuse && (a += "Obstplantage<br/>");"plant_nursery" == b.landuse && (a += "Baumschule<br/>");"quarry" == b.landuse && (a += "Sand- und Kiesgrube<br/>");"railway" == b.landuse && (a += "Gebiet f\xFCr Eisenbahnnutzung<br/>");"recreation_ground" == b.landuse && (a += "Erholungsgebiet<br/>");"reservoir" == b.landuse && (a += "Wasserreservoir<br/>");"residential" == b.landuse && (a += "Wohngebiet<br/>");"retail" == b.landuse && (a += "Einkaufszentrum<br/>");"salt_pond" == b.landuse && (a += "Saline<br/>");"village_green" == b.landuse && (a += "Gr\xFCnfl\xE4che<br/>");"vineyard" == b.landuse && (a += "Weinberg<br/>");"pond" == b.landuse && (a += "kleiner Teich<br/>");"salt_pond" == b.landuse && (a += "Saline<br/>");"animal_keeping" == b.landuse && (a += "Weide, Paddock f\xFCr Tierhaltung<br/>");"yes" == b.entrance && (a += "Eingang zum Geb\xE4ude<br/>");"main" == b.entrance && (a += "Haupteingang<br/>");"service" == b.entrance && (a += "Hinterausgang f\xFCr Angestellte oder Zulieferer<br/>");"exit" == b.entrance && (a += "Ausgang des Geb\xE4udes<br/>");"emergency" == b.entrance && (a += "Notausgang<br/>");"bay" == b.natural && (a += "Bucht<br/>");"beach" == b.natural && (a += "Strand<br/>");"wood" == b.natural && (a += "nat\xFCrlicher Wald<br/>");
    "glacier" == b.natural && (a += "Gletscher<br/>");"cave_entrance" == b.natural && (a += "H\xF6hle<br/>");"spring" == b.natural && (a += "nat\xFCrliche Quelle<br/>");"waterfall" == b.natural && (a += "Wasserfall<br/>");"scrub" == b.natural && (a += "unkultiviertes Buschland<br/>");"grassland" == b.natural && (a += "unkultiviertes Grasland<br/>");"wetland" == b.natural && (a += "Feuchtgebiet<br/>");"tree" == b.natural && (a += "Baum");"peak" == b.natural && "yes" == b["summit:cross"] && (a += "Gipfelkreuz<br/>");"tree_row" == b.natural && (a += "Baumreihe / Allee<br/>");
    "heath" == b.natural && (a += "Heide<br/>");"moor" == b.natural && (a += "Hochmoor<br/>");"grassland" == b.natural && (a += "unkultiviertes Grasland<br/>");"fell" == b.natural && (a += "Grasland oberhalb der Baumgrenze<br/>");"bare_rock" == b.natural && (a += "Nackter Fels<br/>");"scree" == b.natural && (a += "Schutt (Hangschutt)<br/>");"volcano" == b.natural && (a += "Vulkan<br/>");"valley" == b.natural && (a += "Tal<br/>");"stone" == b.natural && (a += "Findling<br/>");"sea" == b.natural && (a += "Meer<br/>");"national_park" == b.boundary && (a += "Nationalpark<br/>");
    "protected_area" == b.boundary && (a += "Schutzgebiet<br/>");"yes" == b.mountain_pass && (a += "Gebirgspass<br/>");"waterfall" == b.waterway && (a += "Wasserfall<br/>");"canal" == b.waterway && (a += "Kanal<br/>");"canal" == b.water && (a += "Kanal<br/>");"river" == b.waterway && (a += "Fluss<br/>");"river" == b.water && (a += "Fluss<br/>");"riverbank" == b.waterway && (a += "Fluss<br/>");"ditch" == b.waterway && (a += "Entw\xE4sserungsgraben<br/>");"stream" == b.waterway && (a += "Bach<br/>");"ferry" == b.route && (a += "F\xE4hrverbindung<br/>");"turning_point" == b.waterway && (a += "Wendestelle<br/>");if ("lake" == b.water || "water" == b.natural) a += "See<br/>";"cove" == b.water && (a += "kleine Bucht<br/>");"lagoon" == b.water && (a += "Lagune<br/>");"pond" == b.water && (a += "Teich<br/>");"reservoir" == b.water && (a += "Wasserreservoir<br/>");"oxbow" == b.water && (a += "Altwassersee<br/>");"lock" == b.water && (a += "Schleusenkammer<br/>");"moat" == b.water && (a += "Burggraben<br/>");"wastewater" == b.water && (a += "Kl\xE4ranlage<br/>");"guest" == b.mooring && "pier" == b.man_made || "visitor_berth" == b["seamark:small_craft_facility:category"] ? a += "Gastliegeplatz<br/>" : "pier" == b.man_made && (a += "Anlegestelle<br/>");"boatyard" == b.waterway && (a += "Schiffswerft<br/>");"mooring" == b["seamark:type"] && "dolphin" == b["seamark:mooring:category"] && (a += "Dalben<br/>");"foot" == b.route && (a += "Wanderweg<br/>");"hiking" == b.route && (a += "Wanderweg<br/>");if ("yes" == b.hiking && "information" == b.tourism) a += "Wegweiser<br/>";else if ("information" == b.tourism && "information" == b.tourism) if (b.information) switch (b.information) {case "board":
            a += "Informationstafel<br/>";break;case "map":
            a += "Informationstafel mit Karte<br/>";break;case "office":
            a += "Touristeninformation<br/>";break;case "terminal":
            a += "Informationsterminal<br/>";break;case "audioguide":
            a += "Audioguide<br/>";break;case "guidepost":
            a += "Wegweiser<br/>";break;case "tactile_map":
            a += "Blindenkarte 2D<br/>";break;case "tactile_model":
            a += "Blindenkarte 3D<br/>";break;case "route_marker":
            a += "Wegerkennungsmarker<br/>";break;default:
            a += "Informationstafel<br/>";} else a += "Informationstafel<br/>";"bicycle" == b.route && (a += "Radwanderweg<br/>");
    "mtb" == b.route && (a += "Mountainbikeroute<br/>");"horse" == b.route && (a += "Reitwanderweg<br/>");"coastline" == b.natural && (a += "K\xFCstenlinie<br/>");"cliff" == b.natural && (a += "Klippe<br/>");"dam" == b.waterway && (a += "Staudamm<br/>");"weir" == b.waterway && (a += "Wehr<br/>");"lock_gate" == b.waterway && (a += "Schleusentor<br/>");"yes" == b.lock && (a += "Schleuse<br/>");"sluice_gate" == b.waterway && (a += "Siel<br/>");"pumping_station" == b.man_made && (a += "Sch\xF6pfwerk<br/>");"groyne" == b.man_made && (a += "Buhne<br/>");"dyke" == b.man_made && (a += "Deich<br/>");"levee" == b.man_made && (a += "Deich<br/>");"watermill" == b.man_made && (a += "Wasserm\xFChle<br/>");"airfield" == b.military && (a += "Milit\xE4rflugplatz<br/>");"naval_base" == b.military && (a += "Marinest\xFCtzpunkt<br/>");"range" == b.military && (a += "Waffen\xFCbungsplatz<br/>");"military" == b.landuse && (a += "milit\xE4risch genutztes Gebiet<br/>");"training_area" == b.military && (a += "Truppen\xFCbungsplatz<br/>");"exclusion_zone" == b.military && (a += "milit\xE4risch genutztes Gebiet<br/>");"danger_area" == b.military && (a += "milit\xE4rische Gefahrenzone<br/>");"barracks" == b.military && (a += "Kaserne<br/>");"nuclear_explosion_site" == b.military && (a += "Atomwaffentestgel\xE4nde<br/>");"yes" == b.construction ? a += "Baustelle<br/>" : "construction" == b.highway && (a += "Baustelle<br/>");"petroleum_well" == b.man_made && (a += "Erd\xF6lpumpe<br/>");"storage_tank" == b.man_made && (a += "Speichertank<br/>");"wastewater_plant" == b.man_made && (a += "Kl\xE4ranlage<br/>");"silo" == b.man_made && (a += "Silo<br/>");"water_tower" == b.man_made && (a += "Wasserturm<br/>");"windmill" == b.man_made && (a += "Windm\xFChle<br/>");"monitoring_station" == b.man_made && (a += "Messstation");"crane" == b.man_made && (a += "Kran");"lighthouse" == b.man_made && (a += "Leuchtturm");"beacon" == b.man_made && (a += "Leuchtfeuer");"breakwater" == b.man_made && (a += "Wellenbrecher");"lamp" == b.man_made && "street_lamp" == b["lamp:type"] && (a += "Strassenlaterne<br/>");"lantern" == b.light_source && (a += "Strassenlaterne<br/>");"floodlight" == b.light_source && (a += "Flutlicht<br/>");"signal_lamp" == b.light_source && (a += "Signallicht<br/>");"aviation" == b.light_source && (a += "Befeuerung<br/>");"warning" == b.light_source && (a += "Warnlicht<br/>");if (b.light_source && b["light:method"]) switch (a += "Licht Art: ", b["light:method"]) {case "gas":
            a += "Gas";break;case "electric":
            a += "Elektrisch";break;case "incandescent":
            a += "strahlend";break;case "halogen":
            a += "Halogen";break;case "discharge":
            a += "Entladungslicht";break;case "metal-halide":
            a += "Halogen-Metalldampflampe";break;case "neon":
            a += "Neon";break;case "sodium":
            a += "Natriumdampflampe";
            break;case "high_pressure_sodium":
            a += "Hochdruck Natriumdampflampe";break;case "low_pressure_sodium":
            a += "Niedrigdruck Natriumdampflampe";break;case "fluorescent":
            a += "Fluoreszenzlampe";break;case "mercury":
            a += "Quecksilberlampe";break;case "LED":
            a += "LED";break;case "laser":
            a += "Laser";break;case "arc":
            a += "Lichtbogen";break;default:
            a += "Unbekannt";}"drinking_water" == b.amenity && (a += "Trinkwasser<br/>");"yes" == b.drinking_water && (a += "Trinkwasser<br/>");"works" == b.man_made ? a += "Industriegeb\xE4ude<br/>" : "industrial" == b.building ? a += "Industriegeb\xE4ude<br/>" : "industrial" == b.landuse ? a += "Industriegebiet<br/>" : "industrial" == b.abutters ? a += "Industriegebiet<br/>" : "commercial" == b.abutters && (a += "Gewerbegebiet<br/>");if (b["generator:source"]) switch (a += "Anlagen-Typ: ", b["generator:source"]) {case "biomass":
            a += "Biogasanlage";break;case "biofuel":
            a += "Biogasanlage";break;case "biogas":
            a += "Biogasanlage";break;case "coal":
            a += "Kohlekraftwerk";break;case "oil":
            a += "\xD6lraffinerie";break;case "waste":
            a += "M\xFCllverbrennungsanlage";
            break;case "wind":
            a += "Windkraftwerk";break;case "solar":
            a += "Solarkraftwerk";break;case "hydro":
            a += "Wasserkraftwerk";break;case "tidal":
            a += "Gezeitenkraftwerk";break;case "wave":
            a += "Wellenkraftwerk";break;case "geothermal":
            a += "Geothermie";break;case "osmotic":
            a += "Osmosekraftwerk";break;case "nuclear":
            a += "Atomkraftwerk";break;default:
            a += "unbekannt<br/>";}"photovoltaic" == b.power_source && (a += "Solarkraftwerk");"line" == b.power && (a += "Hochspannungs-\xDCbertragungsleitung<br/>");"cable" == b.power && (a += "Untergrundkabel<br/>");
    "cable_distribution_cabinet" == b.power && (a += "Kabelverteilerschrank<br/>");"plant" == b.power && (a += "Elektrizit\xE4tskraftwerk<br/>");"station" == b.power && (a += "Elektrizit\xE4tskraftwerk<br/>");"sub_station" == b.power && (a += "Elektrizit\xE4tskraftwerk<br/>");"compensator" == b.power && (a += "Kompensator<br/>");"converter" == b.power && (a += "Konverter<br/>");"generator" == b.power && (a += "Generator<br/>");"heliostat" == b.power && (a += "Heliostat<br/>");"insulator" == b.power && (a += "Isulator<br/>");"busbar" == b.line && (a += "Sammelschiene<br/>");
    "bay" == b.line && (a += "Verbindung Schaltung und Sammelschiene<br/>");"minor_line" == b.power && (a += "Nebenlinie<br/>");"pole" == b.power && (a += "Pfahl<br/>");"portal" == b.power && (a += "H-f\xF6rmiger Mast<br/>");"catenary_mast" == b.power && (a += "Fahrleitungsmast<br/>");"substation" == b.power && (a += "Umspannwerk<br/>");"switch" == b.power && (a += "Lastschalter<br/>");"terminal" == b.power && (a += "Terminal / Anschluss<br/>");"tower" == b.power && (a += "Hochspannungsleitungs<br/>");"transformer" == b.power && (a += "Nebenlinie<br/>");if (b.barrier) switch (b.barrier) {case "bollard":
            a += "Poller, Pfosten<br/>";break;case "cycle_barrier":
            a += "Umlaufsperre, Dr\xE4ngelgitter<br/>";break;case "gate":
            a += "Tor, Schranke<br/>";break;case "chain":
            a += "Kette<br/>";break;case "lift_gate":
            a += "Schlagbaum<br/>";break;case "wall":
            a += "L\xE4rmschutzwand<br/>";break;case "toll_booth":
            a += "Mautstelle<br/>";break;case "fence":
            switch (b.fence_type) {case "barbed_wire":
                    a += "Stacheldrahtzaun<br/>";break;case "wood":
                    a += "Holzzaun<br/>";break;case "chain_link":
                    a += "Maschendrahtzaun<br/>";break;case "electric":
                    a += "Weidezaun<br/>";break;case "railing":
                    a += "Gel\xE4nder<br/>";break;case "wire":
                    a += "einfacher Drahtzaun<br/>";break;case "metal":
                    a += "Metallzaun<br/>";break;case "pole":
                    a += "Holzpf\xE4hle<br/>";break;default:
                    a += "Zaun<br/>";}break;case "block":
            a += "Block<br/>";break;case "ditch":
            a += "Graben<br/>";break;case "border_control":
            a += "Grenzkontrolle<br/>";break;case "hedge":
            a += "Hecke<br/>";break;case "retaining_wall":
            a += "St\xFCtzmauer<br/>";break;case "cattle_grid":
            a += "Weiderost<br/>";break;case "horse_stile":
            a += "Zaun\xFCbertritt<br/>";break;default:
            a += "unbekannt<br/>";}"noise_barrier" == b.wall && (a += "L\xE4rmschutzwand<br/>");"retaining_wall" == b.designation && (a += "L\xE4rmschutzwand<br/>");"noise_barrier" == b.designation && (a += "L\xE4rmschutzwand<br/>");"surveillance" == b.man_made && (a += "\xDCberwachter Bereich<br/>");if (b.aeroway) switch (a += "Flughafen: ", b.aeroway) {case "aerodrome":
            a += "Flugplatz";break;case "apron":
            a += "Vorfeld";break;case "gate":
            a += "gate";break;case "helipad":
            a += "Hubschrauberlandeplatz";break;
        case "hangar":
            a += "Hangar";break;case "runway":
            a += "Start-/Landebahn";break;case "taxiway":
            a += "Rollweg";break;case "terminal":
            a += "Flughafengeb\xE4ude";break;default:
            a += "unbekannt<br/>";}"halt" == b.railway && (a += "Bahn-Haltepunkt<br/>");"crossing" == b.railway && (a += "Bahn\xFCbergang<br/>");"level_crossing" == b.railway && (a += "Bahn\xFCbergang<br/>");"station" == b.railway && (a += "Bahnhof<br/>");"bus_station" == b.amenity && (a += "Busbahnhof<br/>");"bus_station" == !b.amenity && "station" == b.public_transport && "yes" == b.bus && (a += "Busbahnhof<br/>");"rail" == b.railway && (a += "Bahnlinie<br/>", "contact_line" == b.electrified && (a += "elektrifizierte Bahntrasse mit Oberleitung<br/>"));"tram" == b.railway && (a += "Stra\xDFenbahnlinie<br/>");if ("slipway" == b["seamark:small_craft_facility:category"] || "slipway" == b.harbour || "slipway" == b.leisure) a += "Slipanlage<br/>";if ("harbour" == b["seamark:type"]) if (b["seamark:harbour:category"]) switch (b["seamark:harbour:category"]) {case "ferry":
            a += "F\xE4hrhafen<br/>";break;case "container":
            a += "Containerhafen<br/>";
            break;case "marina":
            "marina" != b.leisure && (a += "Jachthafen<br/>");break;case "navel_base":
            a += "Marine-Hafen<br/>";break;case "tanker":
            a += "Hafen f\xFCr \xD6ltanker<br/>";break;case "passenger":
            a += "Personenschifffahrt<br/>";break;case "bulk":
            a += "Sch\xFCttgut-Hafen<br/>";break;default:
            a += "Hafen<br/>";} else a += "Hafen<br/>";"marina" == b.leisure && (a += "Jachthafen<br/>");"wreck" == b.historic && (a += "Wrack<br/>");"animal_shelter" == b.amenity && (a += "Tierheim<br/>");"shelter" == b.animal && (a += "Tierheim<br/>");"horse_walker" == b.animal && (a += "Pferdelauftrainer<br/>");"yes" == b.animal_shelter && (a += "Tierheim<br/>");"dog" == b.animal_shelter && (a += "Tierheim<br/>");"cat" == b.animal_shelter && (a += "Tierheim<br/>");"animal_boarding" == b.amenity && (a += "Tierpension<br/>");"yes" == b.animal_boarding && (a += "Tierpension<br/>");"dog" == b.animal_boarding && (a += "Tierpension<br/>");"horse" == b.animal_boarding && (a += "Tierpension<br/>");"cat" == b.animal_boarding && (a += "Tierpension<br/>");"dog;cat" == b.animal_boarding && (a += "Tierpension<br/>");"cat;dog" == b.animal_boarding && (a += "Tierpension<br/>");if ("school" == b.animal || "sport" == b.animal || "animal_training" == b.amenity) a += "Tiertraining<br/>";"swimming" == b.animal && (a += "Badestelle f\xFCr Hunde<br/>");if ("feeding_place" == b.amenity || "animal_feeding" == b.man_made || "animal_feeding" == b.amenity) a += "F\xFCtterungsstelle<br/>";if ("wildlife_feeding" == b.amenity || "deer_feeding" == b.amenity || "game_feeding" == b.amenity) a += "Wildf\xFCtterung<br/>";if ("cratch" == b.amenity || "cratch" == b.man_made || "feeding_rack" == b.amenity) a += "Futterraufe<br/>";
    "manger" == b.amenity && (a += "Krippe<br/>");"birdhouse" == b.man_made && (a += "Vogelhaus<br/>");"stork" == b.birds_nest && (a += "Storchennest<br/>");"nest_box" == b.amenity && (a += "Nistkasten<br/>");"wellness" == b.animal && (a += "Hundesalon<br/>");"cemetery" == b.animal && (a += "Kleintierfriedhof<br/>");if ("stable" == b.building || "stable" == b["building:use"]) a += "Pferdestall<br/>";"cowshed" == b.building && (a += "Kuhstall<br/>");"sty" == b.building && (a += "Schweinestall<br/>");"barn" == b.building && (a += "Scheune / landwirtsch. Lagerhalle<br/>");
    "farm_auxiliary" == b.building && (a += "landwirtschaftl. Nebengeb\xE4ude<br/>");if (b["river:waterway_distance"] || "milestone" == b.waterway) a += "Flusskilometer<br/>";"milestone" == b.highway && (a += "Strassenkilometer<br/>");"market" == b["xmas:feature"] && (a += "Weihnachtsmarkt<br/>");"tree" == b["xmas:feature"] && (a += "Weihnachtsbaumverkauf<br/>");"event" == b["xmas:feature"] && (a += "Weihnachtsevent<br/>");"pyramid" == b["xmas:feature"] && (a += "Weihnachtspyramide<br/>");return '<div class="c4g_popup_header_featuretype">' + a + "<br/> </div>";
}
var fnContent = function fnContent(b) {
    var a;a = "" + fnContentGeneralInformations(b);a += fnContentHealthcare(b);a += fnContentAerodrome(b);a += fnContentCuisine(b);a += fnContentShipping(b);a += fnContentHydrants(b);a += fnContentSports(b);a += fnContentStreetsTraffic(b);a += fnContentInformationCity(b);a += fnContentEmergency(b);a += fnContentStorage(b);a += fnContentAmenity(b);a += fnContentTourism(b);a += fnContentRoute(b);a += fnContentPetrol(b);a += fnContentBarriers(b);a += fnContentLanduse(b);a += fnContentNatural(b);a += fnKlosterAdditional(b);a += fnSicherheitAdditional(b);a += fnAdditionalBuildingInfos(b);a += fnKraftwerkInfo(b);a += fnMessstation(b);a += fnWertstoffinfo(b);(a += fnContentProtectedArea(b)) && (a = "<br/>" + a);return '<div class="c4g_popup_content">' + a + "</div>";
},
    fnContentAerodrome = function fnContentAerodrome(b) {
    var a = "";b.aerodrome && ("international" == b.aerodrome && (a += "Flughafentype: internationaler Flugplatz<br/>"), "regional" == b.aerodrome && (a += "Flughafentype: regionaler Flugplatz<br/>"), "gliding" == b.aerodrome && (a += "Flughafentype: Segelflugplatz<br/>"), "private" == b.aerodrome && (a += "Flughafentype: Privatflugplatz<br/>"));b.iata && (a += "IATA-Code: " + b.iata + "<br/>");b.icao && (a += "ICAO-Code: " + b.icao + "<br/>");return a;
},
    fnContentNatural = function fnContentNatural(b) {
    var a = "";if (b.forest || b.wood) {
        if ("broadleaved" == b.leaf_type || "deciduous" == b.wood) a += "Laubwald<br/>";if ("needleleaved" == b.leaf_type || "coniferous" == b.wood) a += "Nadelwald<br/>";if ("mixed" == b.leaf_type || "mixed" == b.wood) a += "Mischwald<br/>";"leafless" == b.leaf_type && (a += "Blattlose Vegetation<br/>");"evergreen" == b.wood && (a += "immergr\xFCn<br/>");
        "palm" == b.wood && (a += "Palmen<br/>");"nipa_palm" == b.wood && (a += "Nipapalmen<br/>");"eucalypt" == b.wood && (a += "Eukalypten<br/>");if ("filao" == b.wood || "casuarina" == b.wood) a += "Kasuarinengew\xE4chse<br/>";
    }if ("tree" == b.natural && (!b["genus:de"] && !b["species:de"] && b.leaf_type && (a = "broadleaved" == b.leaf_type || "deciduous" == b.leaf_type || "broadleafed" == b.leaf_type ? a + "Laubbaum<br/>" : a + "Nadelbaum<br/>"), b.genus && (a += b.genus + "<br/>"), b["genus:de"] && (a += b["genus:de"] + "<br/>"), b.species && (a += b.species + "<br/>"), b["species:de"] && (a += b["species:de"] + "<br/>"), "landmark" == b.denotation && (a += "durch Gr\xF6\xDFe und herausragender Position sich deutlich aus seinem Umfeld hervorhebender Baum.<br/>"), "natural_monument" == b.denotation || "yes" == b.monument)) a += "alter, unter besonderem Schutz stehender Baum.<br/>";"manger" == b["feeding:type"] && (a += "Futterbeh\xE4lter: Futterraufe<br/>");"automated" == b["feeding:type"] && (a += "Automat<br/>");if (b["feeding:for"]) switch (b["feeding:for"]) {case "sheep":
            a += "Tier: Schaaf<br/>";break;case "horse":
            a += "Tier: Pferd<br/>";break;case "cow":
            a += "Tier: Kuh<br/>";break;case "rabbit":
            a += "Tier: Kaninchen<br/>";break;case "bunny":
            a += "Tier: Hase<br/>";break;case "cat":
            a += "Tier: Katze </br>";break;case "swan":
            a += "Tier: Schwan </br>";break;case "guinea pig":
            a += "Tier: Meerschweinchen </br>";break;case "donkey":
            a += "Tier: Esel </br>";break;case "squirrel":
            a += "Tier: Eichh\xF6rnchen </br>";break;case "pig":
            a += "Tier: Schwein </br>";break;case "deer":
            a += "Tier: Reh </br>";break;case "guinea pig":
            a += "Tier: Meerschweinchen </br>";
            break;case "monkey":
            a += "Tier: Affe </br>";break;case "camel":
            a += "Tier: Kamel </br>";break;case "goat":
            a += "Tier: Ziege </br>";break;case "hamster":
            a += "Tier: Hamster </br>";break;case "alpaca":
            a += "Tier: Alpaka </br>";break;default:
            a += "Tiere: nicht bekannt<br/>";}if (b["feeding:fodder"]) switch (b["feeding:fodder"]) {case "hay":
            a += "F\xFCttern mit: Heu</br>";break;case "grain":
            a += "F\xFCttern mit: Getreide</br>";break;case "corn":
            a += "F\xFCttern mit: Korn</*br>";break;default:
            a += "F\xFCttern mit: nicht bekannt</br>";}"volcano" == b.natural && "active" == b.status && (a += "Aktiver Vulkan<br/>");"volcano" == b.natural && "dormant" == b.status && (a += "Ruhender Vulkan<br/>");"volcano" == b.natural && "extinct" == b.status && (a += "Erloschener Vulkan<br/>");"volcano" == b.natural && "stratovolcano" == b.type && (a += "Vulkantyp:Schichtvulkan<br/>");"volcano" == b.natural && "shield" == b.type && (a += "Vulkantyp:Schildvulkan<br/>");"volcano" == b.natural && "scoria" == b.type && (a += "Vulkantyp:Schlacken- und Aschenkegel<br/>");return a;
},
    fnContentProtectedArea = function fnContentProtectedArea(b) {
    var a = "",
        c = "";"protected_area" == b.boundary && (b.protect_class && (c = b.protect_class), b.protect_id && (c = b.protect_id), "1" == c && (a = "Beschreibung: Strenges Naturreservat, Wildnisgebiet<br/>"), "2" == c && (a = "Beschreibung: Nationalpark<br/>"), "3" == c && (a = "Beschreibung: Naturmonument<br/>"), "4" == c && (a = "Beschreibung: Biotop/Artenschutzgebiet mit Management<br/>"), "5" == c && (a = "Beschreibung: Gesch\xFCtzte Landschaft/Gesch\xFCtztes marines Gebiet<br/>"), "6" == c && (a = "Beschreibung: Ressourcenschutzgebiet mit Management<br/>"), "7" == c && (a = "Beschreibung: Lokal gesch\xFCtzte Bereiche<br/>"), "97" == c && (a = "Beschreibung: Gesch\xFCtzt oder ausgezeichnet durch Vereinbarungen auf kontinentaler Ebene<br/>"), "98" == c && (a = "Beschreibung: Gesch\xFCtzt oder ausgezeichnet durch zwischenstaatliche- oder internationale Vereinbarungen<br/>"), "99" == c && (a = "andere <br/>"), "21" == c && (a = "Beschreibung: Gemeindebefinden (heilige Orte, assoziatice Orte)<br/>"), "22" == c && (a = "Beschreibung: Kulturelle Werte (Kulturg\xFCter, historisches Erbe, Denkmalschutz)<br/>"), "23" == c && (a = "Beschreibung: Schutz zu Gundsten der Wirtschaft<br/>"), "24" == c && (a = "Beschreibung: Politische Schutzgebiete<br/>"), "25" == c && (a = "Beschreibung: Milit\xE4rische Schutzgebiete<br/>"), "26" == c && (a = "Beschreibung: Historische Schutzgebiete<br/>"), "29" == c && (a = "Beschreibung: Weitere gesellschaftliche Schutzgebiete<br/>"), "11" == c && (a = "Beschreibung: Bodenschutz (Vorgabe zum Fruchtbarkeitserhalt und Erosionsschutz)<br/>"), "12" == c && (a = "Beschreibung: Wasserschutzgebiet (Trinkwasserschutzgebiet, Heilquellenschutzgebiet,..)<br/>"), "13" == c && (a = "Beschreibung: Klima und Luft (Kaltluftenstehung/Frischluftversorgung, Immissionsschutz,..)<br/>"), "14" == c && (a = "Beschreibung: Artenschutzgebiet (Angelverbot, Fischereischutzzone, Jagdschutzgebiet, Vogelschutzgebiet,..)<br/>"), "15" == c && (a = "Beschreibung: \"Standortausstattung\": Retentionsraum (gesetzlich gesch\xFCtztes \xDCberschwemmungsgebiet) <br/>"), "16" == c && (a = "Beschreibung: Dauerhafte Gefahrenbereiche (Lebensschutz, Bodenbewegungsgebiet,..)<br/>"), "19" == c && (a = "Beschreibung: Weitere nationale Gebiete<br/>"));
    return a;
},
    fnContentLanduse = function fnContentLanduse(b) {
    var a = "";"quarry" == b.landuse && b.resource && (a += "Resource: " + b.resource + "<br/>");"open_stable" == b["animal_keeping:type"] && (a += "Offenstall<br/>");"field_shelter" == b["animal_keeping:type"] && (a += "Weide mit Unterstand<br/>");"paddock" == b["animal_keeping:type"] && (a += "Paddock<br/>");b.animal_keeping && (a += "Tiere: Perde<br/>");return a;
},
    fnMessstation = function fnMessstation(b) {
    var a = "";"yes" == b["monitoring:water_level"] && (a += "Pegelstand<br/>");"yes" == b["monitoring:seismic_activity"] && (a += "seismische Aktivit\xE4ten<br/>");"yes" == b["monitoring:tide_gauge"] && (a += "Tidestand<br/>");"yes" == b["monitoring:weather"] && (a += "Wetterdaten<br/>");"yes" == b["monitoring:air_quality"] && (a += "Luftqualit\xE4t<br/>");return a;
},
    fnContentRoute = function fnContentRoute(b) {
    var a = "";b.route && ("yes" == b.roundtrip && (a += "Rundweg<br/>"), b.length && (a += "L\xE4nge/Distanz: " + b.length + "<br/>"), b.distance && (a += "L\xE4nge/Distanz: " + b.distance + "<br/>"), b.symbol && (a += "Symbol: " + b.symbol + "<br/>"));return a;
},
    fnContentPetrol = function fnContentPetrol(b) {
    var a = "";"fuel" == b.amenity && ("yes" == b["fuel:biodiesel"] && (a += "Biodiesel<br/>"), "yes" == b["fuel:e85"] && (a += "Ethanol<br/>"), "yes" == b["fuel:e10"] && (a += "E10<br/>"), "yes" == b["fuel:lpg"] && (a += "Autogas<br/>"), "yes" == b["fuel:cng"] && (a += "Erdgas<br/>"), "diesel" == b.fuel && (a += "Diesel<br/>"), "lpg" == b.fuel && (a += "Autogas<br/>"), "yes" == b["fuel:octane_95"] && (a += "Super Bleifrei<br/>"), "yes" == b["fuel:octane_98"] && (a += "Super Plus<br/>"), "yes" == b["fuel:octane_100"] && (a += "V-Power Racing<br/>"), "yes" == b["fuel:octane_102"] && (a += "Ultimate<br/>"), "yes" == b["fuel:diesel"] && (a += "Diesel<br/>"), "yes" == b["fuel:electricity"] && (a += "Ladestation / Stromtankstelle<br/>"));return a;
},
    fnContentHistoric = function fnContentHistoric(b) {
    var a = "";if ("archaeological_site" == b.historic && b.site_type) switch (b.site_type) {case "megalith":
            a += "Megalith<br/>";break;case "bigstone":
            a += "Findling<br/>";break;case "tumulus":
            a += "H\xFCgelgrab<br/>";break;case "fortification":
            a += "historischer Graben / Wall<br/>";break;default:
            a += "unbekannt<br/>";}return a;
},
    fnContentBarriers = function fnContentBarriers(b, a) {
    var c = "";if ("wall" == b.barrier || "bollard" == b.barrier) b.material && (c += "Material: " + translate(b.material) + "<br/>");return c;
},
    fnContentTourism = function fnContentTourism(b) {
    var a = "";if ("camp_site" == b.tourism) {
        "yes" == b.dog && (a += "Hunde erlaubt<br/>");"no" == b.dog && (a += "Hunde nicht erlaubt<br/>");b.stars && (a += b.stars + "Sterne<br/>");b.caravans && (a += "Wohnmobilstellpl\xE4tze<br/>");if ("yes" == b.openfire || "yes" == b.fireplace) a += "Feuerstellen vorhanden<br/>";"yes" == b.washing_machine && (a += "Waschmaschinen<br/>");"yes" == b.dryer && (a += "Trockner<br/>");"yes" == b.group_only && (a += "Nutzung nur durch Gruppen<br/>");"reception" == b.camp_site && (a += "Reception vorhanden<br/>");
    }"information" == b.tourism && "map" == b.information && ("topo" == b.map_type && (a += "Topografische Karte</br>"), "street" == b.map_type && (a += "Stra\xDFenkarte</br>"), "scheme" == b.map_type && (a += "Schematische Karte</br>"), "toposcope" == b.map_type && (a += "Schematische Karte</br>"));"information" == b.tourism && "map" == b.information && ("site" == b.map_size && (a += "Karte einer Anlage</br>"), "city" == b.map_size && (a += "Stadtplan</br>"), "region" == b.map_size && (a += "Karte der Region</br>"));"geology" == b.board_type && (a += "Geologische Informationen<br/>");"history" == b.board_type && (a += "Historische Informationen<br/>");"nature" == b.board_type && (a += "Informationen \xFCber Natur<br/>");"notice" == b.board_type && (a += "Allgemeine Information<br/>");"plants" == b.board_type && (a += "Informationen \xFCber Pflanzen<br/>");"wildlife" == b.board_type && (a += "Informationen \xFCber Wild<br/>");return a;
},
    fnContentAmenity = function fnContentAmenity(b) {
    var a = "";"boat_sharing" == b.amenity && (a += b.boattype + "<br/>");"embassy" == b.amenity && (a += b.country + "<br/>");if (b.vending) switch (b.vending) {case "admission_tickets":
            a += "Tickets<br/>";break;case "animal_feed":
            a += "Tierfutter<br/>";break;case "books":
            a += "B\xFCcher<br/>";break;case "candles":
            a += "Kerzen<br/>";break;case "cigarettes":
            a += "Zigaretten<br/>";break;case "condoms":
            a += "Kondome<br/>";break;case "drinks":
            a += "Getr\xE4nke<br/>";break;case "first_aid":
            a += "Erste Hilfe Artikel<br/>";break;
        case "fishing_tackle":
            a += "Angelequipment<br/>";break;case "flowers":
            a += "Blumen<br/>";break;case "ice_cream":
            a += "Eis<br/>";break;case "laundry_detergent":
            a += "Waschmittel<br/>";break;case "newspapers":
            a += "Zeitung<br/>";break;case "SIM_cards":
            a += "SIM-Karten<br/>";break;case "sweets":
            a += "S\xFC\xDFigkeiten<br/>";break;case "parcel_pickup":
            a += "Paketstation<br/>";break;case "ice_cubes":
            a += "Eisw\xFCrfel<br/>";break;case "public_transport_tickets":
            a += "Tickets f\xFCr \xF6ffentliche Verkehrsmittel<br/>";
            break;case "parking_ticket":
            a += "Parkticket<br/>";break;case "sex_toys":
            a += "Sexspielzeug<br/>";break;case "stamps":
            a += "Briefmarken<br/>";break;case "toll":
            a += "Mauttickets<br/>";break;case "umbrellas":
            a += "Regenschirme<br/>";break;default:
            a += "Inhalt unbekannt<br/>";}"post_box" == b.amenity && (b.collection_times && (a += "Leerungszeiten: " + b.collection_times + "<br/>"), "yes" == b.drive_through && (a += "Vom Auto aus erreichbar. <br/>"));return a;
},
    fnContentStorage = function fnContentStorage(b) {
    var a = "";if ("storage_tank" == b.man_made) {
        if (b.content) {
            var c = b.content;switch (c) {case "fuel":
                    c = "Diesel";break;case "oil":
                    c = "\xD6l";break;case "gas":
                    c = "Gas";break;case "slurry":
                    c = "G\xFClle";break;case "cement":
                    c = "Zement";break;case "water":
                    c = "Wasser";break;case "manure":
                    c = "D\xFCnger";break;case "silage":
                    c = "Silage";}a += "Inhalt: " + c + "<br/>";
        }if (b.contents) {
            c = b.contents;switch (c) {case "fuel":
                    c = "Diesel";break;case "oil":
                    c = "\xD6l";break;case "gas":
                    c = "Gas";break;case "slurry":
                    c = "G\xFClle";break;case "cement":
                    c = "Zement";break;case "water":
                    c = "Wasser";break;
                case "manure":
                    c = "D\xFCnger";break;case "silage":
                    c = "Silage";}a += "Inhalt: " + c + "<br/>";
        }
    }b.storage && ("gas" == b.storage && (a += "Inhalt: Gas<br/>"), "oil" == b.storage && (a += "Inhalt: \xD6l<br/>"));return a;
},
    fnContentInformationCity = function fnContentInformationCity(b) {
    var a = "";b["name:de"] && (a += "deutscher Name: " + b["name:de"] + "<br/>");if (1E4 <= b.population) if (b.population = "" + b.population, 3 < b.population.length) {
        var c = b.population.length % 3,
            d = 0 < c ? b.population.substring(0, c) : "";for (i = 0; i < Math.floor(b.population.length / 3); i++) {
            d = 0 == c && 0 == i ? d + b.population.substring(c + 3 * i, c + 3 * i + 3) : d + ("." + b.population.substring(c + 3 * i, c + 3 * i + 3));
        }a += "Einwohnerzahl: " + d + "<br/>";
    } else a += "Einwohnerzahl " + b.population + "<br/>";1E4 >= b.population && (a += "Einwohnerzahl: " + b.population + "<br/>");return a;
},
    fnContentEmergency = function fnContentEmergency(b) {
    var a = "";b.lifeboat && ("inshore" == b.lifeboat ? a += "Einsatzgebiet: Inshore (Binnen)<br/>" : "offshore" == b.lifeboat && (a += "Einsatzgebiet: Offshore (Buten)<br/>"));b["lifeboat:class"] && (a += "Bootstyp: " + b["lifeboat:class"] + "<br/>");if (b["siren:type"]) {
        var c = b["siren:type"];switch (c) {case "mechanical":
                c = "mechanisch";break;case "electronic":
                c = "elektronisch";break;case "pneumatic":
                c = "pneumatisch";break;case "electromechanic":
                c = "elektromechanisch";}a += "Typ: " + c + "<br/>";
    }if (b["siren:purpose"]) {
        c = b["siren:purpose"];switch (c) {case "air_raid":
                c = "Luftschutz";break;case "tornado":
                c = "Tornado";break;case "storm":
                c = "Sturm";break;case "civil_defense":
                c = "Bev\xF6lkerungsschutz";break;case "fire":
                c = "Feuer";}a += "Nutzung: " + c + "<br/>";
    }b["siren:model"] && (a += "Model: " + b["siren:model"] + "<br/>");b["siren:range"] && (a += "H\xF6rweite: " + b["siren:range"] + "<br/>");return a;
},
    fnContentCuisine = function fnContentCuisine(b) {
    var a = "";if (b.cuisine) {
        var c = "",
            a = ("supermarket" == b.shop || "convenience" == b.shop || "deli" == b.shop || "organic" == b.shop) && "restaurant" != b.amenity ? a + "Spezialit\xE4ten: " : a + "K\xFCche: ";"arabic" == b.cuisine && (c += "arabisch<br/>");"italian" == b.cuisine && (c += " italienisch<br/>");"international" == b.cuisine && (c += " international<br/>");"regional" == b.cuisine && (c += " regional<br/>");"chinese" == b.cuisine && (c += " chinesisch<br/>");"greek" == b.cuisine && (c += " griechisch<br/>");"african" == b.cuisine && (c += " afrikanisch<br/>");"german" == b.cuisine && (c += " deutsch<br/>");"mexican" == b.cuisine && (c += " mexikanisch<br/>");"french" == b.cuisine && (c += " franz\xF6sisch<br/>");"indian" == b.cuisine && (c += " indisch<br/>");"iranian" == b.cuisine && (c += " iranisch<br/>");"lebanese" == b.cuisine && (c += " libanesisch<br/>");"thai" == b.cuisine && (c += " thail\xE4ndisch<br/>");"balkan" == b.cuisine && (c += " balkan<br/>");"turkish" == b.cuisine && (c += " t\xFCrkisch<br/>");"bavarian" == b.cuisine && (c += " bayrisch<br/>");"czech" == b.cuisine && (c += " tschechisch<br/>");"portuguese" == b.cuisine && (c += " portugiesisch<br/>");"spanish" == b.cuisine && (c += " spanisch<br/>");"japanese" == b.cuisine && (c += " japanisch<br/>");"fish" == b.cuisine && (c += " Fisch<br/>");"brazilian" == b.cuisine && (c += " brasilianisch<br/>");"asian" == b.cuisine && (c += " asiatisch<br/>");"mediterranean" == b.cuisine && (c += " mediterran<br/>");"seafood" == b.cuisine && (c += " Meeresfr\xFCchte<br/>");"ice_cream" == b.cuisine && (c += " Eiscrem<br/>");"burger" == b.cuisine && (c += " Fast Food<br/>");"frozen_yogurt" == b.cuisine && (c += " Frozen Yogurt<br/>");"" == c && (c = b.cuisine + "<br/>");a += c;
    }return a;
},
    fnContentShipping = function fnContentShipping(b) {
    var a = "";b.harbour = "yes";"yes" == b["access:tide"] && (a += "Zufahrtsbeschr\xE4nkung durch Tide</br>");"yes" == b["access:swell"] && (a += "Zufahrtsbeschr\xE4nkung durch Schwell</br>");"yes" == b["access:ice"] && (a += "Zufahrtsbeschr\xE4nkung durch Eis</br>");b.vhf_channel && (a += "UKW-Kanal: " + b.vhf_channel + "</br>");b.mmsi && (a += "MMSI-Nummer: " + b.mmsi + "</br>");b["harbour:information"] && (a += "Information :" + b["harbour:information"] + "</br>");"yes" == b.motorboat && (a += "Fahren mit Motor erlaubt</br>");"no" == b.motorboat && (a += "Fahren mit Motor nicht erlaubt</br>");b.CEMT && (a += "CEMT: " + b.CEMT + "</br>");"yes" == b.intermittent && (a += "Fluss zeitweise ausgetrocknet</br>");"yes" == b.tidal && (a += "Gezeiten beeinflussen die Str\xF6mung</br>");b.draft && (a += "Fahrwassertiefe: " + b.draft + " m</br>");if ("slipway" == b.leisure || "slipway" == b.harbour) "hand" == b.operating && (a += "Funktionsweise: Handbetrieb, Slipwagen<br/>"), "car" == b.operating && (a += "Funktionsweise: mit Auto, Bootsanh\xE4nger<br/>"), "cable_winch" == b.operating && (a += "Funktionsweise: Seilwinde<br/>"), "travellift" == b.operating && (a += "Funktionsweise: Travellift<br/>"), "crane" == b.man_made && (a += "mit Kran<br/>", b["crane:maxload"] && (a += "Maximale Last: " + b["crane:maxload"] + "<br/>"), b["ship:maxdraft"] && (a += "Maximaler Tiefgang: " + b["ship:maxdraft"] + "<br/>"), b["ship:maxlength"] && (a += "Maximale Bootsl\xE4nge: " + b["ship:maxlength"] + "<br/>")), "yes" == b.vehicle && (a += "Mit Fahrzeug erreichbar<br/>");a += fnWreckInfo(b);if ("ferry" == b.route || "ferry_terminal" == b.amenity || "yes" == b.ferry) {
        var c = b.duration;"" != c && "undefined" != c && null != c && (a += "Fahrtzeit in Std. : " + c + "<br/>");"yes" == b.motorcar && (a += "Autos erlaubt <br/>");"no" == b.motorcar && (a += "Autos nicht erlaubt <br/>");"no" == b.motor_vehicle && (a += "Fahrzeuge nicht erlaubt <br/>");"yes" == b.motor_vehicle && (a += "Fahrzeuge erlaubt <br/>");"yes" == b.vehicle && (a += "Fahrzeuge erlaubt <br/>");"no" == b.vehicle && (a += "Keine Fahrzeuge<br/>");"no" == b.bicycle && (a += "Keine Fahrr\xE4der<br/>");"no" == b.bicycle && (a += "Fahrr\xE4der erlaubt<br/>");"yes" == b.hgv && (a += "LKW erlaubt <br/>");"no" == b.hgv && (a += "LKW nicht erlaubt <br/>");"yes" == b.foot && (a += "Fussg\xE4nger erlaubt <br/>");"no" == b.foot && (a += "Fussg\xE4nger nicht erlaubt <br/>");"yes" == b.bicycle && (a += "Fahrradfahrer erlaubt <br/>");"no" == b.bicycle && (a += "Fahrradfahrer nicht erlaubt <br/>");"yes" == b["ferry:cable"] && (a += "Seilf\xE4hre<br/>");
    }if (b["seamark:light:1:colour"]) {
        c = b["seamark:light:1:colour"];switch (c) {case "white":
                c = "Wei\xDF";break;case "red":
                c = "Rot";break;case "green":
                c = "Gr\xFCn";break;case "blue":
                c = "Blau";break;case "yellow":
                c = "Gelb";break;case "amber":
                c = "Bernsteinfarben";}a += "Farbe des Lichts: " + c + "<br/>";
    }"lighthouse" == b.man_made && (b["seamark:light:1:character"] && (a += "Rhytmus des Lichtes: " + b["seamark:light:1:character"] + "<br/>"), b["seamark:light:1:period"] && (a += "Periode: " + b["seamark:light:1:period"] + "<br/>"), b["seamark:light:1:height"] && (a += "H\xF6he: " + b["seamark:light:1:height"] + " m<br/>"), b["seamark:light:1:range"] && (a += "Reichweite: " + b["seamark:light:1:range"] + " sm<br/>"));if (b["seamark:light:colour"]) {
        c = b["seamark:light:colour"];switch (c) {case "white":
                c = "Wei\xDF";break;case "red":
                c = "Rot";break;case "green":
                c = "Gr\xFCn";break;case "blue":
                c = "Blau";break;case "yellow":
                c = "Gelb";break;case "amber":
                c = "Bernsteinfarben";}a += "Farbe des Lichts: " + c + "<br/>";
    }"lighthouse" == b.man_made && (b["seamark:light:character"] && (a += "Rhytmus des Lichtes: " + b["seamark:light:character"] + "<br/>"), b["seamark:light:height"] && (a += "H\xF6he: " + b["seamark:light:height"] + " m<br/>"), b["seamark:light:range"] && (a += "Reichweite: " + b["seamark:light:range"] + " sm<br/>"), b["seamark:light:period"] && (a += "Periode: " + b["seamark:light:period"] + "<br/>"));return a;
},
    fnContentHydrants = function fnContentHydrants(b) {
    var a = "";if ("fire_hydrant" == b.emergency) {
        var c = b["fire_hydrant:count"];"undefined" != c && null != c && "" != c && (a += "Anzahl: " + c + "<br/>");c = b["fire_hydrant:diameter"];
        "undefined" != c && null != c && "" != c && (a += "Rohrdurchmesser: " + c + " mm<br/>");c = b["fire_hydrant:pressure"];"undefined" != c && null != c && "" != c && (a = "suction" == c ? a + "Druck in bar / Saugleitung: Saugleitung<br/>" : a + ("Druck in bar / Saugleitung: " + c + "<br/>"));c = b["fire_hydrant:position"];"undefined" != c && null != c && "" != c && ("lane" == c ? a += "Position: Fahrbahn<br/>" : "parking_lot" == c ? a += "Position: Parkbucht<br/>" : "sidewalk" == c ? a += "Position: B\xFCrgersteig<br/>" : "green" == c && (a += "Position: Wiese<br/>"));c = b.water_volume;
        "undefined" != c && null != c && "" != c && (a += "Volumen: " + c + "<br/>");c = b["fire_hydrant:awwa_class"];"undefined" != c && null != c && "" != c ? a += "AWWA Klasse: " + c + "<br/>" : (c = b.flow_rate, "undefined" != c && null != c && "" != c && (a += "Durchfluss: " + c + "<br/>"));c = b.water_source;"undefined" != c && null != c && "" != c && "main" != c && (a += "Wasserquelle: " + c + "<br/>");c = b["couplings:type"];"undefined" != c && null != c && "" != c && (a += "Kopplungstyp: " + c + "<br/>");c = b["couplings:diameter"];"undefined" != c && null != c && "" != c && (a += "Kopplungsdurchmesser: " + c + "<br/>");c = b["pillar:type"];"dry_barrel" === c && (a += "Typ \xDCberflurhydrant: " + c + "<br/>");"fire_hydrant" === b["disused:emergency"] && (a += "Aktuell unbrauchbar.");"" == a && (a = "Keine Details vorhanden.");
    }return a;
},
    fnContentStreetsTraffic = function fnContentStreetsTraffic(b) {
    var a = "";"yes" == b["red_turn:right"] && (a += "Ampel mit Gr\xFCnpfeil<br/>");"no" == b["red_turn:right"] && (a += "Ampel ohne Gr\xFCnpfeil<br/>");b.bridge && (b.height && (a += "H\xF6he \xFCber dem Grund: " + b.height + " m<br/>"), b.length && (a += "L\xE4nge der Br\xFCcke: " + b.length + " m<br/>"), b.bridge_ref && (a += "Bauwerksnummer: " + b.bridge_ref + "<br/>"), b.start_date && (a += "Baujahr: " + b.start_date + "</br>;"), b.maxweight && (a += "Tragf\xE4higkeit: " + b.maxweight + " t</br>"));b.highway && "yes" == b.toll && (a += "Mautpflichtige Stra\xDFe<br/>");"yes" == b["toll:hgv"] && (a += "Mautpflichtige Stra\xDFe f\xFCr LKWs<br/>");if (b.surface) {
        var c = b.surface,
            a = a + "Oberfl\xE4che: ";switch (c) {case "grass":
                a += "Gras<br/>";break;case "paved":
                a += "versiegelt<br/>";break;case "asphalt":
                a += "Asphalt<br/>";
                break;case "cobblestone":
                a += "Naturstein unbehauen<br/>";break;case "sett":
                a += "behauenes Steinpflaster<br/>";break;case "concrete":
                a += "Beton<br/>";break;case "unpaved":
                a += "ohne Stra\xDFenbelag<br/>";break;case "paving_stones":
                a += "Pflastersteine<br/>";break;case "compacted":
                a += "verdichtete Deckschicht aus Natursteinmaterial<br/>";break;case "dirt":
                a += "unbefestigt<br/>";break;case "fine_gravel":
                a += "Splitt/Kies<br/>";break;case "grass_paver":
                a += "Rasengittersteine<br/>";break;case "gravel":
                a += "Schotter<br/>";
                break;case "earth":
                a += "naturbelassene Oberfl\xE4che<br/>";break;case "ground":
                a += "naturbelassene Oberfl\xE4che<br/>";break;case "metal":
                a += "Metall<br/>";break;case "mud":
                a += "Matsch, Morast<br/>";break;case "sand":
                a += "Sand<br/>";break;case "wood":
                a += "Holz<br/>";break;case "tartan":
                a += "Tartan- oder Kunststoffbelag<br/>";break;case "artificial_turf":
                a += "Kunstrasen<br/>";break;case "clay":
                a += "Ascheplatz<br/>";break;default:
                a += "unbekannt<br/>";}
    }"grade1" == b.tracktype && (a += "Wegbeschaffenheit: Befestigter Weg (Asphalt, Beton oder Pflastersteine)<br/>");
    "grade2" == b.tracktype && (a += "Wegbeschaffenheit: Befestigter Weg (Schotter oder andere verdichtete Materialien)<br/>");"grade3" == b.tracktype && (a += "Wegbeschaffenheit: Befestigter oder ausgebesserter Weg, der harten und weichen Untergrund enth\xE4lt (z. B. Feinschotter-, Sand- oder Erdweg)<br/>");"grade4" == b.tracktype && (a += "Wegbeschaffenheit: Unbefestigter Weg, haupts\xE4chlich weiche Materialien, Pflanzenwuchs entlang der Spurmitte (z. B. Gras-, Sand- oder Erdweg)<br/>");"grade5" == b.tracktype && (a += "Wegbeschaffenheit: Unbefestigter Weg, Oberfl\xE4che besteht aus Sand, Erde etc., oft nur Abdruck in Gras, teilweise schwer von umgebendem Gel\xE4nde unterscheidbar<br/>");"yes" == b.motorcycle && (a += "<br/>mit dem Auto befahrbar.<br/>");"no" == b.motorcycle && (a += "<br/>keine motorisierten Fahrzeuge zugelassen.<br/>");"excellent" == b.trail_visibility && (a += "Wegerkennbarkeit: Gut ausgewiesener Weg<br/>");"good" == b.trail_visibility && (a += "Wegerkennbarkeit: Wegmarkierung sichbar, aber manchmal etwas schwer zu finden<br/>");
    "intermediate" == b.trail_visibility && (a += "Wegerkennbarkeit: Weg nicht durchgegend sichbar<br/>");"bad" == b.trail_visibility && (a += "Wegerkennbarkeit: Wegspur ist kaum zu erkennen<br/>");"horrible" == b.trail_visibility && (a += "Wegerkennbarkeit: Oft kein Weg vorhanden<br/>");"no" == b.trail_visibility && (a += "Wegerkennbarkeit: Meistens keine Wegspur zu erkennen<br/>");"hiking" == b.sac_scale && (a += "Weg: Weg gut gebahnt. (Schwierigskeitstyp: 1)</br>");"mountain_hiking" == b.sac_scale && (a += "Weg: Durchgehend gut ersichtlicher und gut begehbarer Weg (Schwierigskeitstyp: 2)</br>");
    "demanding_mountain_hiking" == b.sac_scale && (a += "Weg: Heikle Stellen k\xF6nnen mit Seilen oder Ketten gesichert sein. Leitern sind m\xF6glich. Eventuell sind die H\xE4nde f\xFCrs Gleichgewicht n\xF6tig. (Schwierigskeitstyp: 3)</br>");"alphine_hiking" == b.sac_scale && (a += "Weg: Wegspur kaum vorhanden. An gewissen Stellen ben\xF6tigt man die H\xE4nde zum weiterkommen (Schwierigskeitstyp: 4)</br>");"demanding_alphine_hiking" == b.sac_scale && (a += "Weg: Oft weglos, einzelne einfache Kletterstellen bis II. (Schwierigskeitstyp: 5)</br>");
    "difficult_alpine_hiking" == b.sac_scale && (a += "Weg: Schwieriges Alpinenwandern,Kletterstellen bis II. Schwierigskeitstyp: 6</br>");b["mtb:name"] && (a += "Fahrradstrecke :" + b["mtb:name"] + "</br>");"0" == b["mtb:scale"] && (a += "Mountainbikestrecke: Keine besondere Schwierigkeiten.</br>Wegbeschaffenheit: fester und griffiger Untergrund.</br>Hindernisse: Keine Hindernisse</br>Gef\xE4lle: Leicht bis m\xE4\xDFig</br>Kurven: weit</br>Fahrtechnik: keine besonderes fahrtechnisches K\xF6nnen n\xF6tig</br>");
    "1" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der Weg enth\xE4lt flache Wurzeln und kleinere Steine. H\xE4ufig auch vereizelte Wasserrinnen und Erosionssch\xE4den</br>Wegbeschaffenheit: loserer Untergrund m\xF6glich, kleine Wurzeln und Steine</br>Hindernisse: kleine Hindernisse, Wasserrinnen, Erosionssch\xE4den</br>Gef\xE4lle: bis zu 40%</br>Kurven: eng</br>Fahrtechnik: Fahrtechnische Grundkentnisse n\xF6tig. Hindernisse k\xF6nnen \xFCberrollt werden</br>");"2" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der Weg enth\xE4lt gr\xF6\xDFere Wurzeln und Steine. H\xE4ufig auch vereizelte Wasserrinnen und Erosionssch\xE4den</br>Wegbeschaffenheit: Untergrund meist nicht verfestigt, gr\xF6\xDFere Wurzeln und Steine</br>Hindernisse:  flache Abs\xE4tze und Treppen</br>Gef\xE4lle: bis zu 70%</br>Kurven: leichte Spitzkehren</br>Fahrtechnik: Fortgeschrittene Fahrtechnik n\xF6tig.</br>");"3" == b["mtb:scale"] && (a += "Mountainbikestrecke: Auf dem Weg findet man verblockte Singletrails mit vielen gr\xF6\xDFeren Felsbrocken und/oder Wurzelpassagen</br>Wegbeschaffenheit: verblockt, viele gro\xDFe Wurzeln/Felsen - rutschiger Untergrund, loses Ger\xF6ll</br>Hindernisse:  hohe Abs\xE4tze</br>Gef\xE4lle: 70% oder mehr</br>Kurven: enge Spitzkehren</br>Fahrtechnik: Sehr gute Bike-Beherrschung n\xF6tig.</br>");
    "4" == b["mtb:scale"] && (a += "Mountainbikestrecke: Auf dem Weg sind sehr steile und stark verblockte Singletrails mit gro\xDFen Felsbrocken und/oder anspruchsvollen Wurzelpassagen, dazwischen h\xE4ufig loses Ger\xF6ll und extreme Steilrampen</br>Wegbeschaffenheit: verblockt, viele gro\xDFe Wurzeln/Felsen - rutschiger Untergrund, loses Ger\xF6ll</br>Hindernisse:  Steilrampen, kaum fahrbare Abs\xE4tze</br>Gef\xE4lle: 70% oder mehr</br>Kurven:  \xD6senartige Spitzkehren</br>Fahrtechnik: Perfekte Bike-Beherrschung mit Trial-Techniken n\xF6tig.</br>");
    "5" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der weg wird charakterisiert durch blockartiges Gel\xE4nde mit Gegenanstiegen, Ger\xF6llfeldern und Erdrutschen, \xF6senartigen Spitzkehren, mehreren hohen, direkt aufeinanderfolgenden Abs\xE4tzen und Hindernissen wie umgefallenen B\xE4umen</br>Wegbeschaffenheit: verblockt mit Gegenanstiegen / rutschiger Untergrund, loses Ger\xF6ll / der Weg ist eher ein Wandersteig</br>Hindernisse:  Steilrampen, kaum fahrbare Abs\xE4tze</br>Gef\xE4lle: 70% oder mehr</br>Kurven:  \xD6senartige Spitzkehren mit Hindernissen</br>Fahrtechnik: excellente Bike-Beherrschung spezieller Trial-Techniken n\xF6tig.</br>");
    "6" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der weg ist hochanspruchsvoll, und selbst f\xFCr Profis und Trial-Fahrer nicht passierbar</br>Wegbeschaffenheit:  Gro\xDFteils nur noch kletterbar</br>Hindernisse: Abs\xE4tze > 2 m, Leitern, Trittstufen, Kletterstellen bei denen man beide H\xE4nde braucht.</br>Gef\xE4lle: 100% oder mehr</br>Kurven: - </br>Fahrtechnik:  hier reicht auch die beste Fahrtechnik nicht mehr</br>");"10" == b.maxspeed && (a += "Vekehrsber\xFChigter Bereich. Hier gilt eine maximale Fahrgeschwindigkeit von 10 Km/h sowie die Regel rechts vor links.</br>");
    "30" == b.maxspeed && (a += "Vekehrsber\xFChigter Bereich. Hier gilt rechts vor links sowie eine maximale Geschwindigkeit von 30 Km/h</br>");"50" == b.maxspeed && (a += "Maximal erlaubte Geschwindigkeit von 50 Km/h darf nicht \xFCberschritten werden </br>");"70" == b.maxspeed && (a += "Maximal erlaubte Geschwindigkeit von 50 Km/h darf nicht \xFCberschritten werden </br>");"80" == b.maxspeed && (a += "Maximale Geschwindigkeit von 80 Km/h darf nicht \xFCberschritten werden.</br>");"100" == b.maxspeed && (a += "Maximale Geschwindigkeit von 100 Km/h darf nicht \xFCberschritten werden.</br>");
    "no" == b.overtaking && (a += "\xDCberholverbot, Fahrzeuge d\xFCrfen nicht \xFCberholen !</br>");"yes" == b.noexit && (a += "Die Stra\xDFe endet hier, es handelt sich um eine Sackgasse</br>");"yes" == b.oneway && (a += "Es handelt sich hier um eine Einbahnstra\xDFe, sie d\xFCrfen diese Stra\xDFe nur in eine Richtung befahren</br>");"designated" == b.priority_road && (a += "Es handelt sich hierbei um eine Vorfahrtsstra\xDFe, derjenige, der sich auf dieser befindet, hat gegen\xFCber anderen Fahrzeugen die Vorfahrt!</br>");
    "end" == b.priority_road && (a += "Die Vorfahrtsstra\xDFe endet hier und die Regelung wird aufgehoben</br>");"emergency_bay" == b.highway && (a += "Hier befindet sich eine Bucht die nur in Notf\xE4llen zur Benuzung zur Verf\xFCgung steht</br>");"yes" == b.traffic_calming && (a += "Verkehrsberuhigter Bereich</br>");"bump" == b.traffic_calming && (a += "Kurze Bodenwelle</br>");"chicane" == b.traffic_calming && (a += "Zu umfahrendenes Hinderniss</br>");"choker" == b.traffic_calming && (a += "Fahrbahnverengung, zu umfahrende Hindernisse m\xF6glich</br>");
    "cushion" == b.traffic_calming && (a += "Bodenwelle mit L\xFCcken aus mehreren rechteckigen Huckeln</br>");"hump" == b.traffic_calming && (a += "vergleichbare Bodenwelle mit etwar einer L\xE4nge von 2-4M</br>");"island" == b.traffic_calming && (a += "Eine Verkehrsinsel</br>");"rumble_strip" == b.traffic_calming && (a += "Holperstreifen</br>");"table" == b.traffic_calming && (a += "lange Bodenwellen mit flachen Mittelst\xFCck</br>");if ("parking" == b.amenity && ("yes" == b.fee && (a += "kostenpflichtig<br/>"), c = b["capacity:women"], "" != c && "no" != c && null != c)) {
        var d = "unbekannt";"yes" != c && (d = c);a += "Frauenparkpl\xE4tze (Anzahl: " + d + ") <br/>";
    }b.park_ride && ("bus" == b.park_ride && (a += "Busanbindung<br/>"), "tram" == b.park_ride && (a += "Bahnanbindung<br/>"), "unknown" == b.park_ride && (a += "Verkehrsmittel unbekannt<br/>"));b["railway:position"] && (a += "Streckenkilometer<br/>Position: " + b["railway:position"] + "<br/>");b.uic_ref && (a += "UIC: " + b.uic_ref + "<br/>");return a;
},
    fnContentSports = function fnContentSports(b) {
    var a = "";"9pin" == b.sport && (a += "M\xF6gliche Sportart: Kegeln<br/>");
    "10pin" == b.sport && (a += "M\xF6gliche Sportart: Bowling<br/>");"american_football" == b.sport && (a += "M\xF6gliche Sportart: American Football<br/>");"aikido" == b.sport && (a += "M\xF6gliche Sportart: Aikido<br/>");"archery" == b.sport && (a += "M\xF6gliche Sportart: Bogenschie\xDFen<br/>");"athletics" == b.sport && (a += "M\xF6gliche Sportart: Leichtathletik<br/>");"australian_football" == b.sport && (a += "M\xF6gliche Sportart: Australian Football<br/>");"base" == b.sport && (a += "M\xF6gliche Sportart: Objektspringen<br/>");
    "badminton" == b.sport && (a += "M\xF6gliche Sportart: Badminton<br/>");"baseball" == b.sport && (a += "M\xF6gliche Sportart: Baseball<br/>");"basketball" == b.sport && (a += "M\xF6gliche Sportart: Basketball<br/>");"beachvolleyball" == b.sport && (a += "M\xF6gliche Sportart: Beachvolleyball<br/>");"bmx" == b.sport && (a += "M\xF6gliche Sportart: BMX<br/>");"boules" == b.sport && (a += "M\xF6gliche Sportart: Boccia<br/>");"boule" == b.sport && (a += "M\xF6gliche Sportart: Boccia<br/>");"bowls" == b.sport && (a += "M\xF6gliche Sportart: Bowls<br/>");
    "boxing" == b.sport && (a += "M\xF6gliche Sportart: Boxen<br/>");"canadian_football" == b.sport && (a += "M\xF6gliche Sportart: Canadian Football<br/>");"canoe" == b.sport && (a += "M\xF6gliche Sportart: Paddeln<br/>");"chess" == b.sport && (a += "M\xF6gliche Sportart: Schach<br/>");"cliff_diving" == b.sport && (a += "M\xF6gliche Sportart: Klippenspringen<br/>");"climbing" == b.sport && (a += "M\xF6gliche Sportart: Klettern<br/>");"climbing_adventure" == b.sport && (a += "M\xF6gliche Sportart: Klettern<br/>");"cricket" == b.sport && (a += "M\xF6gliche Sportart: Cricket<br/>");"cricket_nets" == b.sport && (a += "M\xF6gliche Sportart: Cricket Netz<br/>");"croquet" == b.sport && (a += "M\xF6gliche Sportart: Croquet<br/>");"curling" == b.sport && (a += "M\xF6gliche Sportart: Curling<br/>");"cycling" == b.sport && (a += "M\xF6gliche Sportart: Radrennen, Radsport<br/>");"dog_racing" == b.sport && (a += "M\xF6gliche Sportart: Hunderennen<br/>");if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";"fencing" == b.sport && (a += "M\xF6gliche Sportart: Fechten<br/>");
    "equestrian" == b.sport && (a += "M\xF6gliche Sportart: Reiten<br/>");"football" == b.sport && (a += "M\xF6gliche Sportart: American Football<br/>");"free_flying" == b.sport && (a += "M\xF6gliche Sportart: Freeflying<br/>");"gaelic_games" == b.sport && (a += "M\xF6gliche Sportart: Gaelic games<br/>");"golf" == b.sport && (a += "M\xF6gliche Sportart: Golf<br/>");"gymnastics" == b.sport && (a += "M\xF6gliche Sportart: Gymnastik<br/>");"hockey" == b.sport && (a += "M\xF6gliche Sportart: Hockey<br/>");"horseshoes" == b.sport && (a += "M\xF6gliche Sportart: Hufeisenwerfen<br/>");"horse_racing" == b.sport && (a += "M\xF6gliche Sportart: Pferderennen<br/>");"ice_stock" == b.sport && (a += "M\xF6gliche Sportart: Eisstockschie\xDFen<br/>");"judo" == b.sport && (a += "M\xF6gliche Sportart: Judo<br/>");"karting" == b.sport && (a += "M\xF6gliche Sportart: Kartfahren<br/>");"kitesurfing" == b.sport && (a += "M\xF6gliche Sportart: Kitesurfing<br/>");"korfball" == b.sport && (a += "M\xF6gliche Sportart: Korfball<br/>");"motor" == b.sport && (a += "M\xF6gliche Sportart: Motorsport<br/>");
    "multi" == b.sport && (a += "M\xF6gliche Sportart: Mehrfachsport<br/>");"obstacle_course" == b.sport && (a += "M\xF6gliche Sportart: Hindernislauf<br/>");"orienteering" == b.sport && (a += "M\xF6gliche Sportart: Orientierungslauf<br/>");"paddle_tennis" == b.sport && (a += "M\xF6gliche Sportart: Paddle-Tennis<br/>");"paragliding" == b.sport && (a += "M\xF6gliche Sportart: Gleitschirmfliegen<br/>");"Pelota" == b.sport && (a += "M\xF6gliche Sportart: Pelota<br/>");"rasquet" == b.sport && (a += "M\xF6gliche Sportart: Racquetball<br/>");
    "rowing" == b.sport && (a += "M\xF6gliche Sportart: Rudern<br/>");"rugby_league" == b.sport && (a += "M\xF6gliche Sportart: Rugby League<br/>");"rugby_union" == b.sport && (a += "M\xF6gliche Sportart: Rugby Union<br/>");"running" == b.sport && (a += "M\xF6gliche Sportart: Laufsport<br/>");"scuba_diving" == b.sport && (a += "M\xF6gliche Sportart: Sporttauchen<br/>");"shooting" == b.sport && (a += "M\xF6gliche Sportart: Sportschie\xDFen<br/>");"skating" == b.sport && (a += "M\xF6gliche Sportart: Eislaufsport<br/>");"skateboard" == b.sport && (a += "M\xF6gliche Sportart: Skateboard<br/>");"skiing" == b.sport && (a += "M\xF6gliche Sportart: Skifahren<br/>");"soccer" == b.sport && (a += "M\xF6gliche Sportart: Fu\xDFball<br/>");"surfing" == b.sport && (a += "M\xF6gliche Sportart: Surfen<br/>");"swimming" == b.sport && (a += "M\xF6gliche Sportart: Schwimmen<br/>");"table_tennis" == b.sport && (a += "M\xF6gliche Sportart: Tischtennis<br/>");"taekwondo" == b.sport && (a += "M\xF6gliche Sportart: Taekwondo<br/>");"team_handball" == b.sport && (a += "M\xF6gliche Sportart: Handball<br/>");
    "tennis" == b.sport && (a += "M\xF6gliche Sportart: Tennis<br/>");"toboggan" == b.sport && (a += "M\xF6gliche Sportart: Rodeln<br/>");"volleyball" == b.sport && (a += "M\xF6gliche Sportart: Volleyball<br/>");"water_ski" == b.sport && (a += "M\xF6gliche Sportart: Wasserski<br/>");"weightlifting" == b.sport && (a += "M\xF6gliche Sportart: Gewichtheben<br/>");"wrestling" == b.sport && (a += "M\xF6gliche Sportart: Ringen<br/>");return a;
};
function fnArztInfo(b) {
    var a = "",
        c = "",
        d = b["healthcare:speciality"];"" != d && ("general" == d && (c += "Allgemeinmedizin<br/>"), "allergology" == d && (c += "Allergologie<br/>"), "anaesthetics" == d && (c += "An\xE4sthesiologie<br/>"), "biochemistry" == d && (c += "Medizinische und chemische Labordiagnostik<br/>"), "biological_haematology" == d && (c += "Biologische H\xE4matologie<br/>"), "biology" == d && (c += "Medizinische Biologie<br/>"), "cardiology" == d && (c += "Kardiologie<br/>"), "cardiac_surgery" == d && (c += "Kardiovaskularchirurgie<br/>"), "child_psychiatry" == d && (c += "Kinder- u. Jugendpsychatrie<br/>"), "dental_oral_maxillo_facial_surgery" == d && (c += "Zahn-, Mund-, Kiefer- und Gesichtschirurgie<br/>"), "dermatology" == d && (c += "Hautkrankheiten<br/>"), "dermatovenereology" == d && (c += "Haut- und Geschlechtskrankheiten<br/>"), "diagnostic_radiology" == d && (c += "Diagnostische Radiologie<br/>"), "emergency" == d && (c += "Unfall- und Notfallmedizin<br/>"), "endocrinology" == d && (c += "Endokrinologie<br/>"), "gastroenterological_surgery" == d && (c += "Gastroenterologische Chirurgie<br/>"), "gastroenterology" == d && (c += "Gastroenterologie<br/>"), "geriatrics" == d && (c += "Geriatrie<br/>"), "gynaecology" == d && (c += "Geburtshilfe und Frauenheilkunde<br/>"), "haematology" == d && (c += "Allgemeine H\xE4matologie<br/>"), "hepatology" == d && (c += "Hepatologie<br/>"), "immunology" == d && (c += "Immunologie<br/>"), "infectious_diseases" == d && (c += "Ansteckende Krankheiten<br/>"), "intensive" == d && (c += "Intensivmedizin<br/>"), "internal" == d && (c += "Allgemeine (innere) Medizin<br/>"), "maxillofacial_surgery" == d && (c += "Mund-Kiefer-Gesichtschirurgie<br/>"), "nephrology" == d && (c += "Nierenkrankheiten<br/>"), "neurology" == d && (c += "Neurologie<br/>"), "neurophysiology" == d && (c += "Klinische Neurophysiologie<br/>"), "neuropsychiatry" == d && (c += "Neuropsychiatrie(Neurologie und Psychiatrie)<br/>"), "neurosurgery" == d && (c += "Neurochirurgie<br/>"), "nuclear" == d && (c += "Nuklearmedizin<br/>"), "occupational" == d && (c += "Arbeitsmedizin <br/>"), "oncology" == d && (c += "Onkologie<br/>"), "ophthalmology" == d && (c += "Augenheilkunde<br/>"), "orthopaedics" == d && (c += "Orthop\xE4die<br/>"), "otolaryngology" == d && (c += "Hals-Nasen-Ohren-Heilkunde<br/>"), "paediatric_surgery" == d && (c += "Kinderchirurgie<br/>"), "paediatrics" == d && (c += "Kinderheilkunde<br/>"), "palliative" == d && (c += "Palliativmedizin<br/>"), "physiatry" == d && (c += "Physikalischeund Rehabilitative Medizin<br/>"), "plastic_surgery" == d && (c += "Plastische Chirurgie<br/>"), "proctology" == d && (c += "Proktologie<br/>"), "psychiatry" == d && (c += "Psychiatrie<br/>"), "pulmonology" == d && (c += "Lungen- und Bronchialheilkunde<br/>"), "radiology" == d && (c += "Radiologie<br/>"), "radiotherapy" == d && (c += "Strahlentherapie<br/>"), "rheumatology" == d && (c += "Rheumatologie<br/>"), "stomatology" == d && (c += "Stomatologie<br/>"), "surgery" == d && (c += "Chirurgie<br/>"), "surgical_oncology" == d && (c += "Krebschirurgie<br/>"), "thoracic_surgery" == d && (c += "Thoraxchirurgie<br/>"), "transplant" == d && (c += "Transplantationsmedizin<br/>"), "trauma" == d && (c += "Unfallchirurgie<br/>"), "tropical" == d && (c += "Tropenmedizin<br/>"), "urology" == d && (c += "Urologie<br/>"), "vascular_surgery" == d && (c += "Gef\xE4\xDFchirurgie<br/>"), "venereology" == d && (c += "Geschlechtskrankheiten<br/>"), "acupuncture" == d && (c += "Akupunktur<br/>"), "naturopathy" == d && (c += "Naturheilkunde<br/>"), "chiropractic" == d && (c += "Chiropraktik <br/>"), "homeopathy" == d && (c += "Hom\xF6opathie<br/>"), "osteopathy" == d && (c += "Osteopathie<br/>"));"" != b.health_specialty && ("yes" == b["health_specialty:family_medicine"] && (c += "Allgemeinmedizin<br/>"), "yes" == b["health_specialty:emergency_medicine"] && (c += "Notfallmedizin<br/>"), "yes" == b["health_specialty:anaesthesiology"] && (c += "An\xE4sthesie<br/>"), "yes" == b["health_specialty:dermatology"] && (c += "Dermatologie<br/>"), "yes" == b["health_specialty:ear_nose_throat"] && (c += "Hals, Nasen, Ohren (HNO)<br/>"), "yes" == b["health_specialty:occupational_medicine"] && (c += "Arbeitsnmedizin<br/>"), "yes" == b["health_specialty:internal_medicine"] && (c += "innere Medizin<br/>"), "yes" == b["health_specialty:neurology"] && (c += "Neurologie<br/>"), "yes" == b["health_specialty:ophthalmology"] && (c += "Augenheilkunde<br/>"), "yes" == b["health_specialty:palliative_medicine"] && (c += "Palliativmedizin<br/>"), "yes" == b["health_specialty:psychiatry"] && (c += "Psychatrie<br/>"), "yes" == b["health_specialty:gynaecology"] && (c += "Gyn\xE4kologie<br/>"), "yes" == b["health_specialty:urology"] && (c += "Urologie<br/>"), "yes" == b["health_specialty:pain_medicine"] && (c += "Schmerzmedizin<br/>"), "yes" == b["health_specialty:environmental_medicine"] && (c += "Umweltmedizin<br/>"), "yes" == b["health_specialty:intensive_care_medicin"] && (c += "Intensivmedizin<br/>"), "yes" == b["health_specialty:paediatrics"] && (c += "Kinder- u. Jugendmedizin<br/>"), "yes" == b["health_specialty:physiatry"] && (c += "Physikalische und Rehabilitative Medizin<br/>"), "yes" == b["health_specialty:radiology"] && (c += "Radiologie<br/>"), "yes" == b["health_specialty:general"] && (c += "Allgemeinmedizin<br/>"), "yes" == b["health_specialty:occupational_therapy"] && (c += "Ergotherapie<br/>"), "yes" == b["health_specialty:pulmonology"] && (c += "Pneumologie<br/>"), "yes" == b["health_specialty:acupuncture"] && (c += "Akupunktur<br/>"), "yes" == b["health_specialty:orthopaedics"] && (c += "Orthop\xE4die<br/>"), "yes" == b["health_specialty:chiropractic"] && (c += "Chiropraktik<br/>"), "yes" == b["health_specialty:sports_medicine"] && (c += "Sportmedizin<br/>"));"" != c && (a = a + "Fachgebiete: " + ('<div class="c4g_open_text">' + c + "</div>"));return a;
}
function fnKraftwerkInfo(b) {
    var a = "";if (b["generator:method"]) {
        a += "Erzeugungsart: ";switch (b["generator:method"]) {case "combustion":
                a += "Verbrennung";break;case "thermal":
                a += "thermische Nutzung (z.B. Solarthermie)";break;case "pumping":
                a += "durch Pumpen (z.B. die Nutzung von Geothermie)";break;case "photovoltaic":
                a += "Photovoltaik";break;case "gasification":
                a += "Vergasung, danach Verbrennung";break;case "anaerobic_digestion":
                a += "Erzeugung von Biogas durch Verg\xE4rung";break;case "pyrolysis":
                a += "Pyrolyse, Aufspaltung durch hohe Temperaturen";
                break;case "fission":
                a += "Kernspaltung";break;case "fusion":
                a += "Kernfusion";break;default:
                a += "unbekannt<br/>";}a += "<br/>";
    }if (b.power_source) {
        a += "Erzeugungsart: ";switch (b.power_source) {case "photovoltaic":
                a += "Photovoltaik";break;default:
                a += "unbekannt<br/>";}a += "<br/>";
    }b["generator:output:electricity"] && (a += "elekt. Energieerzeugung: " + b["generator:output:electricity"] + "<br/>");b["generator:output:heat"] && (a += "therm. Energieerzeugung: " + b["generator:output:heat"] + "<br/>");b["generator:output:cold"] && (a += "therm. Energieerzeugung: " + b["generator:output:cold"] + "<br/>");b["generator:output"] && (a += "Nennleistung: " + b["generator:output"] + "<br/>");b["generator:output:hot_air"] && (a += "Art des Transportmediums: " + b["generator:output:hot_air"] + "<br/>");b["generator:output:cold_water"] && (a += "Art des Transportmediums: " + b["generator:output:cold_water"] + "<br/>");b["generator:output:cold_air"] && (a += "Art des Transportmediums: " + b["generator:output:cold_air"] + "<br/>");b["generator:output:compressed_air"] && (a += "Art des Transportmediums: " + b["generator:output:compressed_air"] + "<br/>");b["generator:output:steam"] && (a += "Art des Transportmediums: " + b["generator:output:steam"] + "<br/>");b["generator:output:vacuum"] && (a += "Art des Transportmediums: " + b["generator:output:vacuum"] + "<br/>");b["generator:output:battery_charging"] && (a += "Art des Transportmediums: " + b["generator:output:battery_charging"] + "<br/>");"PWR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-1" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-2" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-3" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-4" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-5" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-6" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"PHWR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"GCR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"FBR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"RBMK-1000" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"RBMK-1500" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"VVER" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"CANDU" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"CPR-1000" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"EPR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"tokamak" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"stellarator" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"ICF" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"cold-fusion" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"wind_turbine" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "Generatortyp: Horizontal-Achsen Windenergieanlage<br/>");"wind_turbine" == b["generator:method"] && "vertical_turbine" == b["generator:type"] && (a += "Generatortyp: Vertikalrotor<br/>");"francis_turbine" == b["generator:type"] && (a += "Generatortyp: Francis-Turbine<br/>");"kaplan_turbine" == b["generator:type"] && (a += "Generatortyp: Kaplan-Turbine<br/>");"pelton_turbine" == b["generator:type"] && (a += "Generatortyp: Pelton-Turbine<br/>");"stream" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "Generatortyp: Gezeitenstromgenerator mit horizontaler Achse<br/>");"stream" == b["generator:method"] && "vertical_axis" == b["generator:type"] && (a += "Generatortyp: Gezeitenstromgenerator mit vertikaler Achse<br/>");"steam_turbine" == b["generator:type"] && (a += "Generatortyp: Dampfturbine<br/>");"heat_pump" == b["generator:type"] && (a += "Generatortyp: W\xE4rmepumpe<br/>");"solar_thermal_collector" == b["generator:type"] && (a += "Generatortyp: Sonnenkollektor<br/>");"solar_photovoltaic_panel" == b["generator:type"] && (a += "Generatortyp: Photovoltaic-System<br/>");"steam_generator" == b["generator:type"] && (a += "Generatortyp: Dampfgenerator<br/>");"gas_turbine" == b["generator:type"] && (a += "Generatortyp: Gasturbine<br/>");"combined_cycle" == b["generator:type"] && (a += "Generatortyp: Dampfgenerator<br/>");"reciprocating_engine" == b["generator:type"] && (a += "Generatortyp: Verbrennungsmotor/Blockheizkraftwerk<br/>");return a;
}
function fnWertstoffinfo(b) {
    var a = "";if ("container" == b.recycling_type || "centre" == b.recycling_type || "recycling" == b.amenity) "yes" == b["recycling:glass"] && (a += "Altglascontainer</br>"), "yes" == b["recycling:shoes"] && (a += "Schuhentsorgung</br>"), "yes" == b["recycling:cooking_oil"] && (a += "Speise-\xD6l-Entsorgung</br>"), "yes" == b["recycling:paper"] && (a += "Papierentsorgung</br>"), "yes" == b["recycling:engine_oil"] && (a += "\xD6l-Entsorgung (Maschinen-, Alt-und Motor\xF6l)</br>"), "yes" == b["recycling:clothes"] && (a += "Altkleidercontainer</br>"), "yes" == b["recycling:car_batteries"] && (a += "Auto-Batterien-Entsorgung</br>"), "yes" == b["recycling:cans"] && (a += "Blechdosenentsorgung</br>"), "yes" == b["recycling:scrap_metal"] && (a += "Altmetallentsorgung</br>"), "yes" == b["recycling:plastic"] && (a += "Plastikentsorgung</br>"), "yes" == b["recycling:batterries"] && (a += "Batterieentsorgung</br>"), "yes" == b["recycling:plastic_bottles"] && (a += "Plastikflaschenentsorgung</br>"), "yes" == b["recycling:green_waste"] && (a += "Gr\xFCnabf\xE4lle</br>"), "yes" == b["recycling:hardcore"] && (a += "Bauschutt und Stra\xDFenmaterial Entsorgung</br>");return a;
}
var fnContentGeneralInformations = function fnContentGeneralInformations(b) {
    var a = "";b.width && (a += "Breite: " + b.width + " m<br/>");b.height && (a += "H\xF6he: " + b.height + " m<br/>");b.maxwidth && (a += "Maximalbreite: " + b.maxwidth + " m<br/>");b.maxheight && (a += "Maximalh\xF6he: " + b.maxheight + " m<br/>");b.maxweight && (a += "Maximalgewicht: " + b.maxweight + " t<br/>");b.maxspeed && (a += "H\xF6chstgeschwindigkeit: " + b.maxspeed + " km/h<br/>");b.min_age && (a += "Mindestalter: " + b.min_age + "<br/>");b.max_age && (a += "Maximalalter: " + b.max_age + "<br/>");"yes" == b.nudism && (a += "Freik\xF6rperkultur<br/>");"yes" == b.ruins && (a += "Ruine<br/>");b.ele && (a += "H\xF6he \xFCber NN: " + b.ele + " m<br/>");b["xmas:day_date"] && (a += "Dauer von - bis: " + b["xmas:day_date"] + "<br/>");b["rotor:diameter"] && (a += "Rotordurchmesser: " + b["rotor:diameter"] + " m<br/>");b["xmas:note"] && (a += "Hinweis: " + b["xmas:note"] + "<br/>");"port" == b["seamark:beacon_lateral:category"] && (a += "Backbord<br/>");"starboard" == b["seamark:beacon_lateral:category"] && (a += "Steuerbord<br/>");"yes" == b["service:bicycle:retail"] && (a += "Fahrradverkauf<br/>");"yes" == b["service:bicycle:repair"] && (a += "Fahrradreparatur<br/>");"yes" == b["service:bicycle:rental"] && (a += "Fahrradverleih<br/>");"yes" == b["service:bicycle:pump"] && (a += "Benutzung einer Luftpumpe m\xF6glich<br/>");"yes" == b["service:bicycle:diy"] && (a += "Benutzung von Werkzeug m\xF6glich<br/>");"yes" == b["service:bicycle:cleaning"] && (a += "Fahrr\xE4der werden gewaschen<br/>");"yes" == b["service:bicycle:second_hand"] && (a += "Verkauf von gebrauchten Fahrr\xE4dern<br/>");"yes" == b["service:bicycle:charging"] && (a += "Elektro-Fahrr\xE4der k\xF6nnen geladen werden<br/>");"yes" == b.cafe && (a += "Kleine Caf\xE9-Ecke<br/>");"yes" == b.breakfast && (a += "Besonderes Fr\xFChst\xFCcksangebot<br/>");"yes" == b.snack && (a += "Back-Snacks warm oder kalt<br/>");"yes" == b.indoor_seating && (a += "Sitzm\xF6glichkeiten im Innenbereich<br/>");"yes" == b.outdoor_seating && (a += "Sitzm\xF6glichkeiten im Au\xDFenbereich<br/>");"yes" == b.self_service && (a += "Selbstbedienungsb\xE4ckerei<br/>");"yes" == b.bakehouse && (a += "Backstube<br/>");"yes" == b.pastry_shop && (a += "Geb\xE4ck aus der Konditorei<br/>");"yes" == b.fair_trade && (a += "einige Fair-Trade-Produkte im Sortiment<br/>");"only" == b.fair_trade && (a += "fast ausschlie\xDFlich Fair-Trade-Produkte im Sortiment<br/>");"no" == b.fair_trade && (a += "keine Fair-Trade-Produkte im Sortiment<br/>");return a;
},
    fnContentHealthcare = function fnContentHealthcare(b) {
    var a = "";if ("doctors" == b.amenity || "physician" == b.office || "doctor" == b.healthcare) a += fnArztInfo(b), b.medical_area && (a += b.medical_area + "<br/>"), b.type && (a += b.type + "<br/>"), b["doctors:de"] && (a += b["doctors:de"] + "<br/>"), b["note:de"] && (a += b["note:de"] + "<br/>");"yes" == b.dispensing && (a += "Apotheke mit Rezepteinl\xF6sung<br/>");"abused" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen die Misshandlung erlitten haben<br/>");"child" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Kinder<br/>");"disabled" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen mit k\xF6rperlicher oder geistiger Behinderung<br/>");"diseased" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Erkrankte Menschen<br/>");"drug_addicted" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Drogens\xFCchtige<br/>");"homeless" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Obdachlose<br/>");"juvenile" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Jugendliche und Teenager<br/>");"mental_health" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen mit psychischen Problemen<br/>");"migrant" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen mit Migrationshintergrund<br/>");"orphan" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Waisen<br/>");"senior" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Senioren<br/>");"underprivileged" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Arme oder benachteiligte Menschen<br/>");"unemployed" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Arbeitslose<br/>");"victim" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Opfer eines Verbrechens<br/>");
    return a;
};
function fnAdditionalBuildingInfos(b) {
    var a = "";b["building:color"] && (a += "Geb\xE4udenfarbe: " + b["building:color"] + "</br>");b["building:height"] && (a += "Geb\xE4udenh\xF6he: " + b["building:height"] + " m</br>");b["building:level"] && (a += "Etage: " + b["building:level"] + "</br>");b["building:part"] && (a += "Geb\xE4udeteile: " + b["building:part"] + "</br>");b["roof:color"] && (a += "Dachfarbe: " + b["roof:colour"] + "</br>");b["roof:shape"] && (a += "Dachform: " + b["roof:shape"] + "</br>");b["roof:height"] && (a += "Dachh\xF6he: " + b["roof:height"] + " m</br>");b["roof:material"] && (a += "Dachmaterial: " + b["roof:material"] + " </br>");b["roof:orientation"] && (a += "Dachausrichtung: " + b["roof:orientation"] + " </br>");b["roof:direction"] && (a += "Dachausrichtung: " + b["roof:direction"] + " </br>");b["building:type"] && (a += "Geb\xE4udentyp: " + b["building:type"] + "</br>");return a;
}
function fnSicherheitAdditional(b) {
    var a = "";"surveillance" == b.man_made && ("indoor" == b.surveillance && (a += "Innenbereich wird \xFCberwacht"), "outdoor" == b.surveillance && (a += "Au\xDFenbereich wird \xFCberwacht"), "public" == b.surveillance && (a += "\xD6ffentliche \xDCberwachung"), "camera" == b["surveillance:type"] && (a += "\xDCberwachungstyp: Kamera"), "guard" == b["surveillance:type"] && (a += "\xDCberwachungstyp: W\xE4chter"), "ALPR" == b["surveillance:type"] && (a += "\xDCberwachungstyp: ALPR"), "town" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Ort"), "parking" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Parkplatz"), "traffic" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Verkehr"), "shop" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Shops"), "bank" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Bank"), "building" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Geb\xE4ude"));return a;
}
function fnWreckInfo(b) {
    var a = "";"wreck" == b.historic && (b["wreck:date_sunk"] && (a += "Gesunken am: " + b["wreck:date_sunk"] + "<br/>"), b["wreck:depth"] && (a += "Tiefe: " + b["wreck:depth"] + "<br/>"), b["wreck:clearance"] && (a += "Freiraum: " + b["wreck:clearance"] + "<br/>"), b["wreck:date_commissioned"] && (a += "Anerkannt seit: " + b["wreck:date_commissioned"] + "<br/>"), b["wreck:gross_tonnage"] && (a += "Gewicht: " + b["wreck:gross_tonnage"] + "<br/>"), b["wreck:length"] && (a += "L\xE4nge: " + b["wreck:length"] + "<br/>"), b["wreck:width"] && (a += "Breite: " + b["wreck:width"] + "<br/>"), b["wreck:cargo"] && (a = "timber" == b["wreck:cargo"] ? a + "Ladung: Holz<br/>" : "coal" == b["wreck:cargo"] ? a + "Ladung: Kohle<br/>" : a + ("Ladung: " + b["wreck:cargo"] + "<br/>")), "yes" == b["wreck:visible_at_low_tide"] && (a += "Sichtbar bei Niedrigwasser: Ja<br/>"), "no" == b["wreck:visible_at_low_tide"] && (a += "Sichtbar bei Niedrigwasser: Nein<br/>"), "yes" == b["wreck:visible_at_high_tide"] && (a += "Sichtbar bei Hochwasser: Ja<br/>"), "no" == b["wreck:visible_at_high_tide"] && (a += "Sichtbar bei Hochwasser: Nein<br/>"), "yes" == b.access && (a += "Zutritt m\xF6glich<br/>"), "no" == b.access && (a += "Zutritt nicht m\xF6glich<br/>"), "permit_required" == b.access && (a += "Zutritt nur mit Genehmigung<br/>"));return a;
}
function fnKlosterAdditional(b) {
    var a = "";if (b["monastery:type"]) switch (b["monastery:type"]) {case "monastery":
            a += "Typ: Kl\xF6sterliche Gemeinschaft (monastery)<br/>";break;case "convent":
            a += "Typ: Bettelm\xF6nch Gemeinschaft (convent)<br/>";break;case "canonry":
            a += "Typ: Kanonikat (canonry)<br/>";break;case "commandry":
            a += "Typ: Milit\xE4r gef\xFChrt (commandry)<br/>";break;case "hermitage":
            a += "Typ: Einsiedelei (hermitage)<br/>";break;default:
            a += "Typ: unbekannt<br/>";}b["community:gender"] && ("male" == b["community:gender"] && (a += "Geschlecht: M\xE4nnergemeinschaft<br/>"), "female" == b["community:gender"] && (a += "Geschlecht: Frauengemeinschaft<br/>"));b.religious_rank && ("abbey" == b.religious_rank ? a += "Religi\xF6ser Rang: Abtei<br/>" : "abbey" == b.religious_rank && (a += "Religi\xF6ser Rang: Erzabtei<br/>"));"yes" == b.shrine && (a += "Besonderheit: Heiligengrab / Reliquienschrein<br/>");"yes" == b.sanctuary && (a += "Besonderheit: Heiligtum / Altarraum (Sanktuar)<br/>");if (b.religion) switch (b.religion) {case "animist":
            a += "Religion: animistisch<br/><br/>";break;case "bahai":
            a += "Religion: bahai<br/>";break;case "buddhist":
            a += "Religion: buddhistisch<br/>";break;case "christian":
            a += "Religion: christlich<br/>";break;case "hindu":
            a += "Religion: hinduistisch<br/>";break;case "IglesiaNiCristo":
            a += "Religion: IglesiaNiCristo<br/>";break;case "jain":
            a += "Religion: jain<br/>";break;case "jewish":
            a += "Religion: j\xFCdisch<br/>";break;case "multifaith":
            a += "Religion: pluralistisch<br/>";break;case "muslim":
            a += "Religion: muslimisch<br/>";
            type += "Moschee<br/>";break;case "pagan":
            a += "Religion: heidnisch<br/>";break;case "pastafarian":
            a += "Religion: pastafarisch<br/>";break;case "scientologist":
            a += "Religion: scientologisch<br/>";break;case "shinto":
            a += "Religion: schintoistisch<br/>";break;case "sikh":
            a += "Religion: sikh<br/>";break;case "spiritualist":
            a += "Religion: spiritistisch<br/>";break;case "taoist":
            a += "Religion: taoistisch<br/>";break;case "unitarian":
            a += "Religion: unitarian<br/>";break;case "yazidi":
            a += "Religion: yazidi<br/>";break;
        case "zoroastrian":
            a += "Religion: zoroastrisch<br/>";break;default:
            a += "Religion: unbekannt<br/>";}if (b.denomination) switch (b.denomination) {case "anglican":
            a += "Konfession: Anglikanische Gemeinschaft<br/><br/>";break;case "baptist":
            a += "Konfession: Baptisten<br/>";break;case "catholic":
            a += "Konfession: Katholische Kirche, ohne genauere Spezifizierung<br/>";break;case "roman_catholic":
            a += "Konfession: R\xF6misch-Katholische Kirche<br/>";break;case "old_catholic":
            a += "Konfession: Altkatholische Kirche (Schweiz: Christ-Katholisch)<br/>";
            break;case "greek_catholic":
            a += "Konfession: Griechisch-Katholische Kirche, Sammelbezeichnung f\xFCr die mit Rom unierten Ostkirchen des byzantinischen Ritus<br/>";break;case "evangelical":
            a += "Konfession: Evangelikalismus ist eine theologische Richtung innerhalb des Protestantismus. Achtung! Nicht verwechseln mit der evangelischen (= protestantischen) Kirche<br/>";break;case "jehovahs_witness":
            a += "Konfession: Zeugen Jehovas<br/>";break;case "lutheran":
            a += "Konfession: Lutheraner, evangelisch-lutherisch<br/>";
            break;case "mennonite":
            a += "Konfession: Mennoniten<br/>";break;case "messianic_jewish":
            a += "Konfession: Messianische Juden, stehen theologisch den evangelikalen Christen nahe.<br/>";break;case "methodist":
            a += "Konfession: Methodist Church (engl. Methodism)<br/>";break;case "mormon":
            a += "Konfession: Mormonen<br/>";break;case "new_apostolic":
            a += "Konfession: Neuapostolische Kirche<br/>";break;case "orthodox":
            a += "Konfession: Orthodox, ohne genauere Spezifizierung<br/>";break;case "greek_orthodox":
            a += "Konfession: Griechisch-Orthodox<br/>";
            break;case "coptic_orthodox":
            a += "Konfession: Koptische Kirche, ist die christliche altorientalische Kirche \xC4gyptens.<br/>";break;case "pentecostal":
            a += "Konfession: Pfingstbewegung<br/>";break;case "presbyterian":
            a += "Konfession: Presbyterianische Kirchen<br/>";break;case "protestant":
            a += "Konfession: Evangelische Kirchen<br/>";break;case "quaker":
            a += "Konfession: Qu\xE4ker<br/>";break;case "reformed":
            a += "Konfession: Evangelisch-reformierte<br/>";break;case "russian_orthodox":
            a += "Konfession: Russisch-Orthodox<br/>";
            break;case "seventh_day_adventist":
            a += "Konfession: Siebenten-Tags-Adventisten<br/>";break;case "christian_community":
            a += "Konfession: Die Christengemeinschaft ist eine christliche Kirche, die sich als selbst\xE4ndige Kultusgemeinschaft versteht.<br/>";break;case "adventist":
            a += "Konfession: Adventisten, nicht alle Adventisten sind Siebenten-Tags-Adventisten.<br/>";break;case "alliance":
            a += "Konfession: Christian and Missionary Alliance (C&MA) is an evangelical Protestant denomination within Christianity.<br/>";
            break;case "assemblies_of_god":
            a += "Konfession: Assemblies of God, ist eine pfingstlerische Denomination.<br/>";break;case "apostolic":
            a += "Konfession: Apostolische Kirche<br/>";break;case "armenian_apostolic":
            a += "Konfession: Armenische Apostolische Kirche, ist eine altorientalische Kirche.<br/>";break;case "assyrian":
            a += "Konfession: Assyrische Kirche des Ostens, auch Apostolische Kirche des Ostens, ist eine autokephale und v\xF6llig eigenst\xE4ndige Ostkirche syrischer Tradition in Nachfolge des altchristlichen Katholikats von Seleukia-Ktesiphon.<br/>";
            break;case "christ_scientist":
            a += "Konfession: Christian Science (deutsch: Christliche Wissenschaft) ging aus der Neugeist-Bewegung hervor.<br/>";break;case "church_of_scotland":
            a += "Konfession: Church of Scotland (dt. Kirche Schottlands) ist die Nationalkirche in Schottland. Im Sprachgebrauch auch \u201Ethe Kirk\u201C genannt.<br/>";break;case "czechoslovak_hussite":
            a += "Konfession: Tschechoslowakische Hussitische Kirche, ist eine christliche Kirche, die durch Abspaltung von der R\xF6misch-Katholischen Kirche entstanden ist. Oft auch Neuhussitische Kirche genannt, vornehmlich in Tschechien verbreitet, aber auch in der Slowakei<br/>";
            break;case "dutch_reformed":
            a += "Konfession: Niederl\xE4ndisch-reformierte Kirche, (einschlie\xDFlich NGK und \xE4hnliche Kirchen in S\xFCdafrika)<br/>";break;case "exclusive_brethren":
            a += "Konfession: Exclusive Brethren<br/>";break;case "foursquare":
            a += "Konfession: International Church of the Foursquare Gospel<br/>";break;case "kimbanguist":
            a += "Konfession: Kimbanguistenkirche, ist eine afrikanische, unabh\xE4ngige, christliche Kirche.<br/>";break;case "living_waters_church":
            a += "Konfession: Living Waters Christian Church<br/>";
            break;case "mariavite":
            a += "Konfession: Mariavitismus<br/>";break;case "maronite":
            a += "Konfession: Syrisch-maronitische Kirche, ist eine mit Rom unierte, christliche Kirche, die den r\xF6mischen Papst als Oberhaupt anerkennt.<br/>";break;case "moravian":
            a += "Konfession: Herrnhuter Br\xFCdergemeine, (auch: Unitas Fratrum, Evangelische oder Erneuerte Br\xFCder-Unit\xE4t, engl. Moravian Church) ist eine aus der b\xF6hmischen Reformation herkommende \xFCberkonfessionell-christliche Glaubensbewegung.<br/>";
            break;case "nazarene":
            a += "Konfession: Kirche des Nazareners, ist eine Freikirche und Heiligungsgemeinde in methodistischer Tradition.<br/>";break;case "nondenominational":
            a += "Konfession: Nondenominational Christianity<br/>";break;case "old_believers":
            a += "Konfession: Altorthodoxe, (h\xE4ufiger Altgl\xE4ubige) ist eine Sammelbezeichnung f\xFCr religi\xF6se Str\xF6mungen und Gruppen innerhalb der russisch-orthodoxen Tradition.<br/>";break;case "polish_catholic":
            a += "Konfession: Polnisch-Katholische Kirche<br/>";
            break;case "salvation_army":
            a += "Konfession: Heilsarmee, ist eine christliche Freikirche mit ausgepr\xE4gter sozialer T\xE4tigkeit.<br/>";break;case "santo_daime":
            a += "Konfession: Santo Daime, ist einer synkretistischen religi\xF6se Bewegung aus Brasilien.<br/>";break;case "serbian_orthodox":
            a += "Konfession: Serbisch-Orthodoxe Kirche, bezeichnet die orthodoxe Kirche von Serbien und die ihr nachgeordneten Kirchen.<br/>";break;case "spiritism":
            a += "Konfession: Spiritismus, oder Spiritualismus die Lehre des Spiritisten Allan Kardec<br/>";
            break;case "united":
            a += "Konfession: United Church of Canada, ist die zweitgr\xF6\xDFte Kirche in Kanada.<br/>";break;case "united_church_of_christ":
            a += "Konfession: United Church of Christ, ist eine Kirche in den USA.<br/>";break;case "united_free_church_of_scotland":
            a += "Konfession: United Free Church of Scotland, ist eine presbyterianische Freikirche in Schottland.<br/>";break;case "united_methodist":
            a += "Konfession: Evangelisch-methodistische Kirche, (engl. United Methodist Church (UMC)) ist eine christliche Kirche in der wesleyanischen Tradition.<br/>";
            break;case "united_reformed":
            a += "Konfession: United Reformed Church, (Vereinigte Reformierte Kirche, URC) ist eine reformierte Kirche in Gro\xDFbritannien.<br/>";break;case "uniting":
            a += "Konfession: Uniting Church in Australia (UCA) ist die drittgr\xF6\xDFte christliche Denomination in Australien.<br/>";break;case "church_of_sweden":
            a += "Konfession: Schwedische Kirche, ist die evangelisch-lutherische Kirche und ehemalige Staatskirche Schwedens.<br/>";break;case "mission_covenant_church_of_sweden":
            a += "Konfession: Schwedische Missionskirche ist eine reformierte Kirche in Schweden.<br/>";break;case "alternative":
            a += "Konfession: alternative<br/>";break;case "ashkenazi":
            a += "Konfession: ashkenazi<br/>";break;case "buchari":
            a += "Konfession: buchari<br/>";break;case "conservative":
            a += "Konfession: conservative<br/>";break;case "egalitarian":
            a += "Konfession: egalitarian<br/>";break;case "hasidic":
            a += "Konfession: hasidic<br/>";break;case "humanistic":
            a += "Konfession: humanistic<br/>";break;case "kabbalah":
            a += "Konfession: kabbalah<br/>";break;case "kabbalistic":
            a += "Konfession: kabbalistic<br/>";break;case "karaite":
            a += "Konfession: karaite<br/>";break;case "liberal":
            a += "Konfession: liberal<br/>";break;case "lubavitch":
            a += "Konfession: lubavitch<br/>";break;case "lubavitch_messianic":
            a += "Konfession: lubavitch_messianic<br/>";break;case "mizrachi_baghdadi":
            a += "Konfession: mizrachi_baghdadi<br/>";break;case "mizrachi_chida":
            a += "Konfession: mizrachi_chida<br/>";break;case "mizrachi_jerusalemite":
            a += "Konfession: mizrachi_jerusalemite<br/>";
            break;case "mizrachi_livorno":
            a += "Konfession: mizrachi_livorno<br/>";break;case "mizrachi_moroccan":
            a += "Konfession: mizrachi_moroccan<br/>";break;case "modern_orthodox":
            a += "Konfession: modern_orthodox<br/>";break;case "neo_orthodox":
            a += "Konfession: neo_orthodox<br/>";break;case "nondenominational":
            a += "Konfession: nondenominational<br/>";break;case "orthodox":
            a += "Konfession: orthodox<br/>";break;case "orthodox_ashkenaz":
            a += "Konfession: orthodox_ashkenaz<br/>";break;case "orthodox_sefard":
            a += "Konfession: orthodox_sefard<br/>";
            break;case "progressive":
            a += "Konfession: progressive<br/>";break;case "reconstructionist":
            a += "Konfession: reconstructionist<br/>";break;case "reform":
            a += "Konfession: reform<br/>";break;case "renewal":
            a += "Konfession: renewal<br/>";break;case "samaritan":
            a += "Konfession: samaritan<br/>";break;case "sefardi":
            a += "Konfession: sefardi<br/>";break;case "sefardi_amsterdam":
            a += "Konfession: sefardi_amsterdam<br/>";break;case "sefardi_london":
            a += "Konfession: sefardi_london<br/>";break;case "traditional":
            a += "Konfession: traditional<br/>";
            break;case "ultra_orthodox":
            a += "Konfession: ultra_orthodox<br/>";break;case "unaffiliated":
            a += "Konfession: unaffiliated<br/>";break;case "yemenite":
            a += "Konfession: yemenite<br/>";break;case "yemenite_baladi":
            a += "Konfession: yemenite_baladi<br/>";break;case "yemenite_shami":
            a += "Konfession: yemenite_shami<br/>";break;case "ahmadiya":
            a += "Konfession: ahmadiya<br/>";break;case "alaouite":
            a += "Konfession: alaouite<br/>";break;case "druze":
            a += "Konfession: druze<br/>";break;case "ibadi":
            a += "Konfession: ibadi<br/>";
            break;case "ismaili":
            a += "Konfession: ismaili<br/>";break;case "shia":
            a += "Konfession: shia<br/>";break;case "sunni":
            a += "Konfession: sunni<br/>";break;case "nichiren":
            a += "Konfession: nichiren<br/>";break;case "jodo_shinshu":
            a += "Konfession: jodo_shinshu<br/>";break;case "jodo_shu":
            a += "Konfession: jodo_shu<br/>";break;case "vajrayana":
            a += "Konfession: vajrayana<br/>";break;case "shingon_shu":
            a += "Konfession: shingon_shu<br/>";break;case "zen":
            a += "Konfession: zen<br/>";break;case "thai_mahanikaya":
            a += "Konfession: thai_mahanikaya<br/>";
            break;case "thai_thammayut":
            a += "Konfession: thai_thammayut<br/>";break;case "asatru":
            a += "Konfession: asatru<br/>";break;case "celtic":
            a += "Konfession: celtic<br/>";break;case "greco-roman":
            a += "Konfession: greco-roman<br/>";break;case "wicca":
            a += "Konfession: wicca<br/>";break;case "irani":
            a += "Konfession: irani<br/>";break;case "parsi":
            a += "Konfession: parsi<br/>";break;default:
            a += "unbekannt<br/>";}if (b.community) switch (b.community) {case "AA":
            a += "Ordensgemeinschaft (AA): Augustinians of the Assumption <br/>";
            break;case "BSCM":
            a += "Ordensgemeinschaft (BSCM): Adorers of the Sacred Heart of Jesus of Montmartre <br/>";break;case "CBMV":
            a += "Ordensgemeinschaft (CBMV): Augustiner-Chorfrauen B.M.V.<br/>";break;case "CO":
            a += "Ordensgemeinschaft (CO): Oratorians<br/>";break;case "CMC":
            a += "Ordensgemeinschaft (CMC): Congregation of the Mother Co-Redemptrix<br/>";break;case "CRSP":
            a += "Ordensgemeinschaft (CRSP): Kongregation der Regularkleriker vom hl. Paulus (Barnabiten)<br/>";break;case "CSJ":
            a += "Ordensgemeinschaft (CSJ): Carmel Saint-Joseph<br/>";
            break;case "CSSP":
            a += "Ordensgemeinschaft (CSSP): Congr\xE9gation du Saint-Esprit<br/>";break;case "CSSR":
            a += "Ordensgemeinschaft (CSSR): Congr\xE9gation du Tr\xE8s Saint R\xE9dempteur<br/>";break;case "FCJM":
            a += "Ordensgemeinschaft (FCJM): Franciscan Sisters, Daughters of the Sacred Heart of Jesus and Mary<br/>";break;case "FMGB":
            a += "Ordensgemeinschaft (FMGB): Suore Francescane Missionarie di Ges\xF9 Bambino<br/>";break;case "FMH":
            a += "Ordensgemeinschaft (FMH): Congregatio Filiarum Mariae Sanctissimae ab Horto<br/>";
            break;case "FMM":
            a += "Ordensgemeinschaft (FMM): Franciscaines missionnaires de Marie<br/>";break;case "FSC":
            a += "Ordensgemeinschaft (FSC): Fr\xE8res des \xC9coles chr\xE9tiennes<br/>";break;case "MCCI":
            a += "Ordensgemeinschaft (MCCI): Missionnaires comboniens du Sacr\xE9-C\u0153ur<br/>";break;case "MSFS":
            a += "Ordensgemeinschaft (MSFS): Missionnaires de Saint Fran\xE7ois de Sales<br/>";break;case "OCart":
            a += "Ordensgemeinschaft (OCart): Order of the Carthusians<br/>";break;case "OCC":
            a += "Ordensgemeinschaft (OCC): Ordre de Notre Dame du Mont-Carmel<br/>";
            break;case "OCD":
            a += "Ordensgemeinschaft (OCD): Ordre des Carmes d\xE9chaux<br/>";break;case "OCSO":
            a += "Ordensgemeinschaft (OCSO): Zisterzienserorden der strengeren Observanz (Trappisten)<br/>";break;case "OFM":
            a += "Ordensgemeinschaft (OFM): Ordre des Fr\xE8res Mineurs (Franziskaner)<br/>";break;case "OFMCap":
            a += "Ordensgemeinschaft (OFMCap): Ordre des Fr\xE8res Mineurs Capucins<br/>";break;case "OFMConv":
            a += "Ordensgemeinschaft (OFMConv): Ordre des Fr\xE8res Mineurs Conventuels<br/>";break;case "OFS":
            a += "Ordensgemeinschaft (OFS): Franciscans secular Third Order<br/>";break;case "OMI":
            a += "Ordensgemeinschaft (OMI): Oblats de Marie<br/>";break;case "OP":
            a += "Ordensgemeinschaft (OP): Ordre des Fr\xE8res Pr\xEAcheurs<br/>";break;case "OPraem":
            a += "Ordensgemeinschaft (OPraem): Ordre des chanoines r\xE9guliers de Pr\xE9montr\xE9<br/>";break;case "OSB":
            a += "Ordensgemeinschaft (OSB): Order of Saint Benedict<br/>";break;case "OSC":
            a += "Ordensgemeinschaft (OSC): Ordre de Sainte-Claire ou Ordre des Pauvres Dames<br/>";
            break;case "OSSS":
            a += "Ordensgemeinschaft (OSSS): Ordre de Sainte-Brigitte<br/>";break;case "OVM":
            a += "Ordensgemeinschaft (OVM): Order of the Visitation of Holy Mary (Salesianerinnen)<br/>";break;case "PSDP":
            a += "Ordensgemeinschaft (PSDP): Petites s\u0153urs des pauvres (Kleinen Schwestern der Armen)<br/>";break;case "PFJ":
            a += "Ordensgemeinschaft (PFJ): Petits Fr\xE8res de J\xE9sus<br/>";break;case "SDB":
            a += "Ordensgemeinschaft (SDB): Soci\xE9t\xE9 de Saint Fran\xE7ois de Sales<br/>";break;case "SJ":
            a += "Ordensgemeinschaft (SJ): Compagnie de J\xE9sus<br/>";break;case "SOC":
            a += "Ordensgemeinschaft (SOC): Order of Cistercians<br/>";break;case "SSCC":
            a += "Ordensgemeinschaft (SSCC): Congregation of the Sacred Hearts of Jesus and Mary<br/>";break;case "SSF":
            a += "Ordensgemeinschaft (SSF): Society of St Francis<br/>";break;case "SSJE":
            a += "Ordensgemeinschaft (SSJE): Society of St John the Evangelist<br/>";break;case "SSpS":
            a += "Ordensgemeinschaft (SSpS): Steyler Missionsschwestern<br/>";break;case "TOR":
            a += "Ordensgemeinschaft (TOR): Terzo Ordine Regolare di San Francesco<br/>";break;default:
            a += "unbekannt<br/>";}return a;
}var fnTestInfoPopup = function fnTestInfoPopup(b) {
    b = b.getProperties();var a = "",
        c;for (c in b) {
        a = a + c + "=" + b[c] + "<br/>";
    }return '<div class="c4g_popup_text" style="width:300px;">' + a + "</div>";
};

/***/ }),

/***/ "./Resources/public/js/c4g-maps-popup-info-en.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-popup-info-en.js ***!
  \*******************************************************/
/*! exports provided: trim, isMobile, fnStandardInfoPopup, fnReducedInfoPopup, fnHeader, fnFooter, fnGetTranslate_Type, fnContent, fnContentAerodrome, fnContentNatural, fnContentProtectedArea, fnContentLanduse, fnMessstation, fnContentRoute, fnContentPetrol, fnContentHistoric, fnContentBarriers, fnContentTourism, fnContentAmenity, fnContentStorage, fnContentInformationCity, fnContentEmergency, fnContentCuisine, fnContentShipping, fnContentHydrants, fnContentStreetsTraffic, fnContentSports, fnArztInfo, fnKraftwerkInfo, fnWertstoffinfo, fnAdditionalBuildingInfos, fnSicherheitAdditional, fnWreckInfo, fnKlosterAdditional */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["trim"] = trim;
/* harmony export (immutable) */ __webpack_exports__["isMobile"] = isMobile;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnStandardInfoPopup", function() { return fnStandardInfoPopup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnReducedInfoPopup", function() { return fnReducedInfoPopup; });
/* harmony export (immutable) */ __webpack_exports__["fnHeader"] = fnHeader;
/* harmony export (immutable) */ __webpack_exports__["fnFooter"] = fnFooter;
/* harmony export (immutable) */ __webpack_exports__["fnGetTranslate_Type"] = fnGetTranslate_Type;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContent", function() { return fnContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentAerodrome", function() { return fnContentAerodrome; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentNatural", function() { return fnContentNatural; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentProtectedArea", function() { return fnContentProtectedArea; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentLanduse", function() { return fnContentLanduse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnMessstation", function() { return fnMessstation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentRoute", function() { return fnContentRoute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentPetrol", function() { return fnContentPetrol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentHistoric", function() { return fnContentHistoric; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentBarriers", function() { return fnContentBarriers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentTourism", function() { return fnContentTourism; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentAmenity", function() { return fnContentAmenity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentStorage", function() { return fnContentStorage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentInformationCity", function() { return fnContentInformationCity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentEmergency", function() { return fnContentEmergency; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentCuisine", function() { return fnContentCuisine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentShipping", function() { return fnContentShipping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentHydrants", function() { return fnContentHydrants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentStreetsTraffic", function() { return fnContentStreetsTraffic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentSports", function() { return fnContentSports; });
/* harmony export (immutable) */ __webpack_exports__["fnArztInfo"] = fnArztInfo;
/* harmony export (immutable) */ __webpack_exports__["fnKraftwerkInfo"] = fnKraftwerkInfo;
/* harmony export (immutable) */ __webpack_exports__["fnWertstoffinfo"] = fnWertstoffinfo;
/* harmony export (immutable) */ __webpack_exports__["fnAdditionalBuildingInfos"] = fnAdditionalBuildingInfos;
/* harmony export (immutable) */ __webpack_exports__["fnSicherheitAdditional"] = fnSicherheitAdditional;
/* harmony export (immutable) */ __webpack_exports__["fnWreckInfo"] = fnWreckInfo;
/* harmony export (immutable) */ __webpack_exports__["fnKlosterAdditional"] = fnKlosterAdditional;
/*
  K?stenschmiede GmbH Software & Design 2011 - 2018
 @author     K?stenschmiede <http://www.kuestenschmiede.de>
 @license    http://opensource.org/licenses/lgpl-3.0.html
*/
function trim(b) {
    return b.replace(/^\s+/, "").replace(/\s+$/, "");
}
function isMobile() {
    return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4))
    );
}function translate(b) {
    var a = trim(b);return "yes" == a || "Yes" == a ? "yes" : "no" == a || "No" == a ? "no" : "limited" == a ? "limited" : "designated" == a ? "designated" : "wood" == a ? "wood" : "metal" == a ? "metal" : "concrete" == a ? "concrete" : "plastic" == a ? "plastic" : "stone" == a ? "stone" : "steel" == a ? "steel" : "brick" == a ? "brick" : "reinforced_concrete" == a ? "reinforced_concrete" : "masonry" == a ? "masonry" : b;
}
var fnStandardInfoPopup = function fnStandardInfoPopup(b, a) {
    var c = b.getProperties(),
        d = "",
        e;if ("function" === typeof a) {
        var f = a.call(b)[0].getImage();if (f) try {
            e = f.getSrc();
        } catch (g) {
            e = "";
        }
    } else {
        f = a.getImage();try {
            e = f.getSrc();
        } catch (h) {
            e = "";
        }
    }d += fnHeader(c, e);d += fnContent(c);d += fnFooter(c, b.get("osm_type") + "/" + b.getId());return '<div class="c4g_popup_text">' + d + "</div>";
},
    fnReducedInfoPopup = function fnReducedInfoPopup(b, a) {
    var c = b.getProperties(),
        d = "",
        e = !1,
        f;f = "function" === typeof a ? a.call(b)[0].getImage().getSrc() : a.getImage().getSrc();if ("restaurant" == c.amenity || "pub" == c.amenity || "biergarten" == c.amenity) e = !0;"hotel" == c.tourism && (e = !0);"guest_house" == c.tourism && (e = !0);"chalet" == c.tourism && (e = !0);"hostel" == c.tourism && (e = !0);"alpine_hut" == c.tourism && (e = !0);if ("artwork" == c.tourism || "artwork" == c.amenity) e = !0;if ("museum" == c.tourism || "museum" == c.amenity) e = !0;"cinema" == c.amenity && (e = !0);"theatre" == c.amenity && (e = !0);if ("attraction" == c.amenity || "fountain" == c.amenity || "monument" == c.historic || "city_gate" == c.historic || "ruins" == c.historic || "castle" == c.historic || "attraction" == c.tourism) e = !0;"playground" == c.leisure && (e = !0);c.aerialway && (e = !0);if ("swimming_pool" == c.amenity || "swimming_pool" == c.leisure || "swimming" == c.sport) e = !0;"station" == c.railway && (e = !0);"swimming" == c.sport && (e = !0);"swimming_pool" == c.leisure && (e = !0);"swimming_pool" == c.amenity && (e = !0);"waterpark" == c.leisure && (e = !0);c.water_park && (e = !0);"sports_centre" == c.leisure && (e = !0);switch (e) {case !1:
            d += fnHeader(c, f);d += fnContent(c);d += fnFooter(c, b.get("osm_type") + "/" + b.getId());break;case !0:
            d += fnHeader(c, f);}return '<div class="c4g_popup_text">' + d + "</div>";
};
function fnHeader(b, a) {
    var c = "",
        d = "32px";a && -1 != a.indexOf("icon_mapcil") && (d = "250px", a = a.replace("icon_mapcil", "logo_mapcil"));if (b.name || b["piste:name"] || b["xmas:name"] || b["xmas:location"]) {
        if (b.name) var e = b.name;b["piste:name"] && (e = b["piste:name"]);b["xmas:name"] && (e = b["xmas:name"]);b["xmas:location"] && (e = b["xmas:location"]);c += a ? '<img src="' + a + '" width="' + d + '" name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>" : '<name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>";
    } else a && (c += '<img src="' + a + '" width="' + d + '" name="' + a + '" alt="' + a + '">');c += fnGetTranslate_Type(b);return '<div class="c4g_popup_header">' + c + "</div>";
}
function fnFooter(b, a) {
    var c = "",
        d = !1;b["addr:housename"] && (c += "housename: " + b["addr:housename"] + "<br/>", d = !0);b["addr:floor"] ? (c += "floor: " + b["addr:floor"] + "<br/>", d = !0) : b["addr:level"] && (c += "level: " + b["addr:level"] + "<br/>", d = !0);b["addr:street"] && (c += b["addr:street"], c = b["addr:housenumber"] ? c + (" " + b["addr:housenumber"] + "<br/>") : c + "<br/>", d = !0);b["addr:postcode"] && (c += b["addr:postcode"] + " ");b["addr:city"] && (c += b["addr:city"] + "<br/>", d = !0);if (b.sqkm) if (b.sqkm = "" + b.sqkm, 3 < b.sqkm.length) {
        var e = b.sqkm.length % 3,
            f = 0 < e ? b.sqkm.substring(0, e) : "";for (i = 0; i < Math.floor(b.sqkm.length / 3); i++) {
            f = 0 == e && 0 == i ? f + b.sqkm.substring(e + 3 * i, e + 3 * i + 3) : f + ("." + b.sqkm.substring(e + 3 * i, e + 3 * i + 3));
        }c += "area: " + f + " Km\xB2<br/>";
    } else c += "area " + b.sqkm + "<br/>";b["contact:phone"] && (c = isMobile() ? c + ('phone: <a href="tel:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>") : c + ('phone: <a href="callto:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>"), d = !0);b.phone && (c = isMobile() ? c + ('phone: <a href="tel:' + b.phone + '">' + b.phone + "</a><br/>") : c + ('phone: <a href="callto:' + b.phone + '">' + b.phone + "</a><br/>"), d = !0);b["contact:fax"] ? (c += "fax: " + b["contact:fax"] + "<br/>", d = !0) : b.fax && (c += "fax: " + b.fax + "<br/>", d = !0);b["contact:email"] ? (c += 'email: <a href="mailto:' + b["contact:email"] + '">' + b["contact:email"] + "</a><br/>", d = !0) : b.email && (c += 'email: <a href="mailto:' + b.email + '">' + b.email + "</a><br/>", d = !0);d && (c += "<br/>");if (b.opening_hours) {
        d = b.opening_hours;for (e = 0; 0 == e || 0 < d.indexOf(";");) {
            0 < e && (d = d.replace(";", "<br/>")), e++;
        }c += 'opening hours: <br/><div class="c4g_open_text">' + d + "</div>";c = 0 < d.indexOf("PH") ? c + "(PH = public holiday)<br/>" : c + "<br/>";
    }if (b["xmas:opening_hours"]) {
        d = b["xmas:opening_hours"];for (e = 0; 0 == e || 0 < d.indexOf(";");) {
            0 < e && (d = d.replace(";", "<br/>")), e++;
        }c += 'opening hours: <br/><div class="c4g_open_text">' + d + "</div>";c = 0 < d.indexOf("PH") ? c + "(PH = public holiday)<br/>" : c + "<br/>";
    }b["xmas:url"] && (d = "", d = b["xmas:url"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'website: <a href="' + d + '" target="_blank">website link</a><br/>');
    b["contact:website"] ? (d = b["contact:website"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'website: <a href="' + d + '" target="_blank">website link</a><br/>') : b.website && (d = b.website, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'website: <a href="' + d + '" target="_blank">website link</a><br/>');b.wikipedia && (d = b.wikipedia, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://wikipedia.org/wiki/" + d), c += 'Wikipedia: <a href="' + d + '" target="_blank">Wikipedia link</a><br/>');b.wikimedia_commons && (d = b.wikimedia_commons, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://commons.wikimedia.org/wiki/" + d), c += 'Wikimedia: <a href="' + d + '" target="_blank">Wikimedia link</a><br/>');b["contact:webcam"] && (d = b["contact:webcam"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'webcam: <a href="' + d + '" target="_blank">webcam link</a><br/>');b.image && (c += '<img src="' + b.image + '" width="200px" name="' + b.name + '" alt="' + b.name + '"><br/>');d = "";b.internet_access && (d += "internet access: " + translate(b.internet_access) + "<br/>");b["internet_access:fee"] && (d += "fee: " + translate(b["internet_access:fee"]) + "<br/>");b["wifi_access:operator"] && (d += "wifi operator: " + b["wifi_access:operator"] + "<br/>");b["wifi_access:technology"] && (d += "wifi technology: " + b["wifi_access:technology"] + "<br/>");b["wifi_access:ssid"] && (d += "wifi ssid: " + b["wifi_access:ssid"] + "<br/>");"" != d && (c += 'internet access available<br/><div class="c4g_shop_internet_access">' + d + "</div><br/>");b.wheelchair && (c += "wheelchair: " + translate(b.wheelchair) + "<br/>");b["wheelchair:description"] && (c += "description: " + b["wheelchair:description"] + "<br/>");b["wheelchair:entrance_width"] && (c += "entrance width (cm): " + b["wheelchair:entrance_width"] + "<br/>");b["wheelchair:step_height"] && (c += "step height (cm): " + b["wheelchair:step_height"] + "<br/>");b["wheelchair:rooms"] && (c += "rooms: " + b["wheelchair:rooms"] + "<br/>");
    b["wheelchair:places"] && (c += "places: " + b["wheelchair:places"] + "<br/>");b["cent:places"] && (c += "places: " + b["wheelchair:places"] + "<br/>");b["ramp:wheelchair"] && (c += "ramp: " + b["ramp:wheelchair"] + "<br/>");b["capacity:disabled"] && (c += "capacity parking: " + translate(b["capacity:disabled"]) + "<br/>");b["toilets:wheelchair"] && (c += "toilets: " + translate(b["toilets:wheelchair"]) + "<br/>");b.centralkey && (c += "centralkey: " + b.centralkey + "<br/>");b.note && (c += b.note + "<br/>");b.description && (c += b.description + "<br/>");
    b.operator && (c += "operator: " + b.operator + "<br/>");b.ref && (c += "reference: " + b.ref + "<br/>");"yes" == b.lit && (c += "This object is illuimanted.<br/>");b.shop && (d = "", b.brand && (d += "brand: " + b.brand + "<br/>"), b.sells && (d += "sells: " + b.sells + "<br/>"), b.origin && (d += "source market: " + b.origin + "<br/>"), "yes" == b.wholesale && (d += "distributor: yes<br/>"), "" != d && (c += 'further particulars: <br/><div class="c4g_shop_text">' + d + "</div><br/>"));a && (d = a, trim(d), d = d.replace(/\./, "/"), c = c + "<br/>" + ('OSM:    <a href="http://www.openstreetmap.org/' + d + '" target="_blank">OpenStreetMap link</a><br/>'));return c = '<div class="c4g_popup_footer">' + c + "</div>";
}
function fnGetTranslate_Type(b) {
    var a = "";if ("doctors" == b.amenity || "doctor" == b.healthcare) a += "doctor<br/>";if ("hospital" == b.amenity || "clinic" == b.amenity || "hospital" == b.healthcare || "clinic" == b.healthcare) a = "yes" == b.emergency ? a + "hospital with emergency facilities<br/>" : a + "hospital<br/>";"dentist" == b.amenity && (a += "dentist<br/>");if ("pharmacy" == b.amenity || "pharmacy" == b["health_facility:type"]) a += "pharmacy<br/>";if ("physiotherapist" == b.healthcare || "yes" == b["health_speciality:physiotherapy"]) a += "physiotherapist<br/>";
    if ("occupational_therapist" == b.healthcare || "yes" == b["health_speciality:occupational_therapy"] || "yes" == b["health_specialty:occupational_therapy"]) a += "occupational_therapist<br/>";if ("psychotherapist" == b.healthcare || "yes" == b["health_speciality:psychotherapy"]) a += "psychotherapist<br/>";"alternative" == b.healthcare && (a += "alternative<br/>");"midwife" == b.healthcare && (a += "midwife<br/>");if ("speech_therapist" == b.healthcare || "yes" == b["health_speciality:speech_therapy"]) a += "speech_therapist<br/>";"yes" == b["health_speciality:music_therapy"] && (a += "music_therapy<br/>");"veterinary" == b.amenity && (a += "veterinary<br/>");"fire_station" == b.amenity && (a += "fire station<br/>");"fire_extinguisher" == b.emergency && (a += "fire extinguisher<br/>");"aed" == b.emergency && (a += "aed<br/>");"defibrillator" == b.emergency && (a += "defibrillator<br/>");"phone" == b.emergency && (a += "call box<br/>");"police" == b.amenity && (a += "police<br/>");"ambulance_station" == b.emergency && (a += "ambulance station<br/>");"technical" == b.emergency_service && (a += "technical<br/>");"water" == b.emergency_service && (a += "water<br/>");"baywatch" == b.waterway && (a += "baywatch<br/>");"air" == b.emergency_service && (a += "rescue helicopter<br/>");"emergency_access_point" == b.highway && (a += "emergency access point<br/>");if ("lifeboat_station" == b.amenity || "lifeboat_station" == b.emergency) a += "lifeboat station<br/>";"life_ring" == b.emergency && (a += "life ring<br/>");"siren" == b.emergency && (a += "siren<br/>");"life_ring" == b.amenity && (a += "life ring<br/>");"rescue_station" == b.amenity && (a += "rescue station<br/>");"fire_hydrant" == b.emergency && ("underground" == b["fire_hydrant:type"] ? a += "underground hydrant<br/>" : "pillar" == b["fire_hydrant:type"] ? a += "pillar hydrant<br/>" : "wall" == b["fire_hydrant:type"] ? a += "wall hydrant<br/>" : "pond" == b["fire_hydrant:type"] && (a += "suction point<br/>"));"suction_point" == b.emergency && (a += "suction point<br/>");"fire_water_pond" == b.emergency && (a += "fire protection pond<br/>");"mountain" == b.emergency_service && (a += "mountain rescue service<br/>");"water_tank" == b.emergency && (a += "fire water tank<br/>");"container" == b.recycling_type && (a += "Recycling container<br/>");"recycling" == b.amenity && "yes" == b["recycling:excrement"] || "pump-out" == b["seamark:small_craft_facility:category"] ? a += "suction station<br/>" : "recycling" == b.amenity && (a += " buyback centre<br/>");"yes" == b["diet:pescetarian"] ? a += "pescetarian available<br/>" : "only" == b["diet:pescetarian"] && (a += "just pescetarian<br/>");"yes" == b["diet:vegetarian"] ? a += "vegetarian vorhanden<br/>" : "only" == b["diet:vegetarian"] && (a += "just vegetarian<br/>");"yes" == b["diet:lacto_vegetarian"] ? a += "lacto_vegetarian available<br/>" : "only" == b["diet:lacto_vegetarian"] && (a += "just lacto vegetarian<br/>");"yes" == b["diet:ovo_vegetarian"] ? a += "ovo vegetarian available<br/>" : "only" == b["diet:ovo_vegetarian"] && (a += "just ovo_vegetarian<br/>");"yes" == b["diet:vegan"] ? a += "vegan available<br/>" : "only" == b["diet:vegan"] && (a += "just vegan<br/>");"yes" == b["diet:fruitarian"] ? a += "fruitarian available<br/>" : "only" == b["diet:fruitarian"] && (a += "hust fruitarian<br/>");"yes" == b["diet:raw"] ? a += "raw availaibe<br/>" : "only" == b["diet:raw"] && (a += "just raw<br/>");
    "yes" == b["diet:gluten_free"] ? a += "gluten free available<br/>" : "only" == b["diet:gluten_free"] && (a += "just gluten free<br/>");"yes" == b["diet:dairy_free"] ? a += "dairy free available<br/>" : "only" == b["diet:dairy_free"] && (a += "just dairy free<br/>");"yes" == b["diet:lactose_free"] ? a += "lactose free available<br/>" : "only" == b["diet:lactose_free"] && (a += "just lactose free<br/>");"yes" == b["diet:halal"] ? a += "halal available<br/>" : "only" == b["diet:halal"] && (a += "just halal<br/>");"yes" == b["diet:kosher"] ? a += "kosher available<br/>" : "only" == b["diet:kosher"] && (a += "just kosher<br/>");"pub" == b.amenity && (a += "pub<br/>");"bar" == b.amenity && (a += "bar<br/>");"yes" == b.frozen_yogurt && (a += "frozen yogurt<br/>");"yes" == b.slush_ice && (a += "slush ice<br/>");"yes" == b.cake && (a += "cake<br/>");"yes" == b.coffee && (a += "coffee<br/>");"yes" == b.drinks && (a += "drinks<br/>");"biergarten" == b.amenity && (a += "biergarten<br/>");"restaurant" == b.amenity && (a += "restaurant<br/>");"fast_food" == b.amenity && (a += "fast food<br/>");if (("cafe" == b.amenity || "coffee_shop" == b.amenity) && "ice_cream" != b.cuisine) a += "cafe<br/>";if ("cafe" == b.amenity && "ice_cream" == b.cuisine || "ice_cream" == b.amenity) a += "ice cream<br/>";"alpine_hut" == b.tourism && (a += "alpine hut<br/>");"aquarium" == b.tourism && (a += "aquarium<br/>");"apartment" == b.tourism && (a += "apartment<br/>");"attraction" == b.tourism && (a += "attraction<br/>");"artwork" == b.tourism && (a += "artwork<br/>");"camp_site" == b.tourism && (a += "camp site<br/>");"caravan_site" == b.tourism && (a += "caravan site<br/>");"chalet" == b.tourism && (a += "chalet<br/>");"gallery" == b.tourism && (a += "gallery<br/>");"guest_house" == b.tourism && (a += "guest house<br/>");"hostel" == b.tourism && (a += "hostel<br/>");"hotel" == b.tourism && (a += "hotel<br/>");"motel" == b.tourism && (a += "motel<br/>");"museum" == b.tourism && (a += "museum<br/>");"picnic_site" == b.tourism && (a += "picnic site<br/>");"theme_park" == b.tourism && (a += "theme park<br/>");"viewpoint" == b.tourism && (a += "viewpoint<br/>");"wilderness_hut" == b.tourism && (a += "wilderness_hut<br/>");"wine_cellar" == b.tourism && (a += "wine cellar<br/>");"zoo" == b.tourism && (a += "zoo<br/>", "enclosure" == b.zoo && (a += "enclosure<br/>"), "petting_zoo" == b.zoo && (a += "petting zoo<br/>"), "falconry" == b.zoo && (a += "falconry<br/>"));"trail_riding_station" == b.tourism && (a += "trail riding station<br/>");"fishing" == b.club && (a += "fishing club<br/>");"sport" == b.club && "fishing" == b.sport && (a += "fishing club<br/>");"amateur_radio" == b.club && (a += "amateur radio club<br/>");"art" == b.club && (a += "art club<br/>");"astronomy" == b.club && (a += "astronomy club<br/>");"automobile" == b.club && (a += "automobile club<br/>");
    "board_games" == b.club && (a += "board games club<br/>");"card_games" == b.club && (a += "card games club<br/>");"charity" == b.club && (a += "charity club<br/>");"chess" == b.club && (a += "chess club<br/>");"cinema" == b.club && (a += "cinema club<br/>");"cooking" == b.club && (a += "cooking club<br/>");"culture" == b.club && (a += "culture club<br/>");"doityourself" == b.club && (a += "doityourself club<br/>");"equestrian" == b.club && (a += "equestrian club<br/>");"ethnic" == b.club && (a += "ethnic club<br/>");"fan" == b.club && (a += "fan club<br/>");"freemasonry" == b.club && (a += "freemasonry club<br/>");"game" == b.club && (a += "game club<br/>");"history" == b.club && (a += "history club<br/>");"hunting" == b.club && (a += "hunting club<br/>");"linux" == b.club && (a += "linux club<br/>");"motorcycle" == b.club && (a += "motorcycle club<br/>");"music" == b.club && (a += "music club<br/>");"nature" == b.club && (a += "nature club<br/>");"nudism" == b.club && (a += "nudism club<br/>");"photography" == b.club && (a += "photography club<br/>");"politics" == b.club && (a += "politics club<br/>");"religion" == b.club && (a += "religion club<br/>");
    "scout" == b.club && (a += "scout club<br/>");"smoke" == b.club && (a += "smoke club<br/>");"sport" == b.club && (a += "sport club<br/>");"theatre" == b.club && (a += "theatre club<br/>");"veterans" == b.club && (a += "veterans club<br/>");"amusement_arcade" == b.leisure && (a += "penny arcade / gambling hall<br/>");"beach_resort" == b.leisure && (a += "beach resort<br/>");"bird_hide" == b.leisure && (a += "bird hide<br/>");"common" == b.leisure && (a += "common<br/>");"club" == b.leisure && (a += "club<br/>");"dance" == b.leisure && (a += "dance<br/>");"dog_park" == b.leisure && (a += "dog_park<br/>");"firepit" == b.leisure && (a += "firepit<br/>");"fishing" == b.leisure && (a += "fishing<br/>");"garden" == b.leisure && (a += "garden<br/>");"golf_course" == b.leisure && (a += "golf course<br/>");"hackerspace" == b.leisure && (a += "hackerspace<br/>");"horse_riding" == b.leisure && (a += "horse riding<br/>");"ice_rink" == b.leisure && (a += "ice rink<br/>");"nature_reserve" == b.leisure && (a += "nature reserve<br/>");"park" == b.leisure && (a += "park<br/>");"miniature_golf" == b.leisure && (a += "miniature golf<br/>");"pitch" == b.leisure && (a += "pitch<br/>");"pitch" == b.leisure && "yes" == b.building && (a += "gym<br/>");"playground" == b.leisure && "yes" == b.building ? a += "playground<br/>" : "playground" == b.leisure && (a += "playground<br/>");"social_club" == b.leisure && (a += "social club<br/>");"spa" == b.leisure && (a += "spa<br/>");"sports_centre" == b.leisure && (a += "sports centre<br/>");"climbing_adventure" == b.sport && (a += "climbing adventure<br/>");"stadium" == b.leisure && (a += "stadium<br/>");"swimming_pool" == b.leisure && (a += "swimming pool<br/>");"track" == b.leisure && (a += "track<br/>");"water_park" == b.leisure && (a += "water park<br/>");"wildlife_hide" == b.leisure && (a += "wildlife hide<br/>");"adult_gaming_centre" == b.leisure && (a += "adult gaming_centre<br/>");"bowling_alley" == b.leisure && "10pin" == b.sport && (a += "10pin bowling_alley<br/>");"bowling_alley" == b.leisure && "9pin" == b.sport && (a += "9pin bowling_alley<br/>");if ("karting" == b.sport || "motor" == b.sport) a += "karting<br/>";if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";if (b["piste:type"]) switch (b["piste:type"]) {case "skitour":
            a += "skitour<br/>";break;case "downhill":
            a += "downhill<br/>";break;case "sled":
            a += "sled<br/>";break;case "nordic":
            a += "nordic<br/>";break;case "hike":
            a += "hike<br/>";break;case "snow_park":
            a += "snow park<br/>";}if (b.sport) switch (b.sport) {case "surfing":
            a += "surfing<br/>";break;case "kitesurfing":
            a += "kitesurfing<br/>";break;case "water_ski":
            a += "water ski<br/>";}if (b.aerialway) switch (b.aerialway) {case "cable_bar":
            a += "cable bar<br/>";break;case "gondola":
            a += "gondola<br/>";break;case "chair_lift":
            a += "chair lift<br/>";
            break;case "mixed_lift":
            a += "mixed lift<br/>";break;case "drag_lift":
            a += "drag lift<br/>";break;case "t-bar":
            a += "t-bar<br/>";break;case "t-bar":
            a += "t-bar<br/>";break;case "platter":
            a += "platter<br/>";break;case "rope_tow":
            a += "rope tow<br/>";break;case "magic_carpet":
            a += "magic carpet<br/>";break;default:
            a += "unknown";}"mosque" == b.building && (a += "mosque<br/>");"synagogue" == b.building && (a += "synagogue<br/>");"temple" == b.building && (a += "temple<br/>");"apartments" == b.building && (a += "apartments<br/>");"farm" == b.building && (a += "farm<br/>");"hotel" == b.building && (a += "hotel<br/>");"house" == b.building && (a += "house<br/>");"detached" == b.building && (a += "detached<br/>");"residential" == b.building && (a += "residential<br/>");if ("domitory" == b.building || "residential plus" == b.building) a += "domitory<br/>";"terrace" == b.building && (a += "terrace<br/>");"houseboat" == b.building && (a += "houseboat<br/>");"bungalow" == b.building && (a += "bungalow<br/>");"static_caravan" == b.building && (a += "static caravan<br/>");"commercial" == b.building && (a += "commercial<br/>");
    "retail" == b.building && (a += "retail<br/>");"warehouse" == b.building && (a += "warehouse<br/>");"bakehouse" == b.building && (a += "bakehouse<br/>");"shrine" == b.building && (a += "shrine<br/>");"civic" == b.building && (a += "civic<br/>");"stadium" == b.building && (a += "stadium<br/>");"train_station" == b.building && (a += "train station<br/>");"university" == b.building && (a += "university<br/>");"public" == b.building && (a += "public<br/>");"bridge" == b.building && (a += "bridge<br/>");"bunker" == b.building && (a += "bunker<br/>");"cabin" == b.building && (a += "cabin<br/>");"conservatory" == b.building && (a += "conservatory<br/>");"construction" == b.building && (a += "construction<br/>");"garage" == b.building && (a += "garage<br/>");"garages" == b.building && (a += "garages<br/>");"greenhouse" == b.building && (a += "greenhouse<br/>");"hangar" == b.building && (a += "hangar<br/>");"hut" == b.building && (a += "hut<br/>");"pavillion" == b.building && (a += "pavillion<br/>");"roof" == b.building && (a += "roof<br/>");"shed" == b.building && (a += "shed<br/>");"transformer_tower" == b.building && (a += "transformer tower<br/>");
    "service" == b.building && (a += "service<br/>");"kiosk" == b.building && (a += "kiosk<br/>");"carport" == b.building && (a += "carport<br/>");"ruins" == b.building && (a += "ruins<br/>");"gambling" == b.amenity && (a += "penny arcade<br/>");"library" == b.amenity && (a += "library<br/>");"fountain" == b.amenity && (a += "fountain<br/>");"attraction" == b.amenity && (a += "attraction<br/>");if ("social_centre" == b.amenity || "club" == b.amenity) a += "social centre<br/>";"townhall" == b.amenity && (a += "townhall<br/>");"bench" == b.amenity && (a += "bench<br/>");
    if ("grave_yard" == b.amenity || "cemetery" == b.landuse) a += "grave yard<br/>";"post_box" == b.amenity && (a += "post box<br/>");"post_office" == b.amenity && (a += "post office<br/>");"telephone" == b.amenity && (a += "telephone<br/>");"atm" == b.amenity && (a += "atm<br/>");"bank" == b.amenity && (a += "bank<br/>");"toilets" == b.amenity && "yes" == b.diaper ? a += "toilets with diaper changing table<br/>" : "toilets" == b.amenity && (a += "toilets<br/>");"school" == b.amenity && "1" == b["isced:level"] ? a += "primary school<br/>" : "school" == b.amenity && "2" == b["isced:level"] ? a += "secondary school<br/>" : "school" == b.amenity && "3" == b["isced:level"] ? a += "secondary schools<br/>" : "school" == b.amenity && (a += "school<br/>");"kindergarten" == b.amenity && (a += "kindergarten<br/>");"internet_cafe" == b.amenity && (a += "internet cafe<br/>");"daycare" == b.amenity && (a += "daycare<br/>");"childcare" == b.amenity && (a += "childcare<br/>");"university" == b.amenity && (a += "university<br/>");"college" == b.amenity && (a += "college<br/>");"shelter" == b.amenity && (a += "shelter<br/>");"bbq" == b.amenity && (a += "bbq<br/>");"nightclub" == b.amenity && (a += "nightclub<br/>");"bicycle_parking" == b.amenity && (a += "bicycle parking<br/>");"bicycle_rental" == b.amenity && (a += "bicycle rental<br/>");"boat_sharing" == b.amenity && (a += "boat sharing<br/>");"car_sharing" == b.amenity && (a += "car sharing<br/>");"cinema" == b.amenity && (a += "cinema<br/>");"swimming_pool" == b.amenity && (a += "swimming pool<br/>");if ("embassy" == b.amenity || "embassy" == b.diplomatic) a += "embassy<br/>";"embassy" == b.amenity && "consulate" == b.diplomatic && (a += "consulate<br/>");"embassy" == b.amenity && "consulate_general" == b.diplomatic && (a += "consulate general<br/>");"embassy" == b.amenity && "honorary_consulate" == b.diplomatic && (a += "honorary consulate<br/>");"embassy" == b.amenity && "permanent_mission" == b.diplomatic && (a += "permanent mission<br/>");"embassy" == b.amenity && "delegation" == b.diplomatic && (a += "delegation<br/>");"embassy" == b.amenity && "high_commission" == b.diplomatic && (a += "high commission<br/>");"Barfusspfad" == b.amenity && (a += "barefoodpath<br/>");"casino" == b.amenity && (a += "casino<br/>");"spa" == b.amenity && (a += "spa<br/>");"stables" == b.amenity && (a += "stables<br/>");"watering_place" == b.amenity && (a += "watering place<br/>");"yes" == b.watering_place && (a += "watering place<br/>");"water_point" == b.amenity && (a += "water point<br/>");"taxi" == b.amenity && (a += "taxi<br/>");"car_wash" == b.amenity && (a += "car wash<br/>");"brothel" == b.amenity && (a += "brothel<br/>");"stripclub" == b.amenity && (a += "stripclub<br/>");"swingerclub" == b.amenity && (a += "swingerclub<br/>");"planetarium" == b.amenity && (a += "planetarium<br/>");"courthouse" == b.amenity && (a += "court house<br/>");"crematorium" == b.amenity && (a += "crematorium<br/>");if ("crypt" == b.amenity || "crypt" == b.building) a += "crypt<br/>";"hunting_stand" == b.amenity && (a += "hunting stand<br/>");"photo_booth" == b.amenity && (a += "photo booth<br/>");"prison" == b.amenity && (a += "prison<br/>");"ranger_station" == b.amenity && (a += "ranger station<br/>");"register_office" == b.amenity && (a += "register office<br/>");"marketplace" == b.amenity && (a += "marketplace<br/>");"solarium" == b.amenity && (a += "solarium<br/>");"sauna" == b.amenity && (a += "sauna<br/>");"shower" == b.amenity && (a += "shower<br/>");if ("waste_disposal" == b.amenity && (a += "waste disposal<br/>", b.waste)) switch (a += "Typ: ", b.waste) {case "trash":
            a += "General<br/>";break;case "oil":
            a += "Oil<br/>";break;case "drugs":
            a += "Pharmaceutical<br/>";break;case "organic":
            a += "Organic<br/>";break;case "plastic":
            a += "Plastic<br/>";break;case "rubble":
            a += "Rubble<br/>";break;case "cigarettes":
            a += "Cigarettes<br/>";break;default:
            a += "General<br/>";}if ("waste_basket" == b.amenity || "dog_excrement" == b.waste) a += "dog waste station<br/>";if ("scout_camp" == b.amenity || "scout_hut" == b.amenity || "scout_hall" == b.amenity) a += "scout camp<br/>";"ferry_terminal" == b.amenity && (a += "ferry terminal<br/>");"bureau_de_change" == b.amenity && (a += "bureau de change<br/>");"youth_club" == b.amenity && (a += "youth club<br/>");"festival_grounds" == b.amenity && (a += "festival grounds<br/>");if ("yes" == b.openfire || "yes" == b.fireplace) a += "fireplace<br/>";if ("vending_machine" == b.amenity) if (b.vending) switch (b.vending) {case "admission_tickets":
            a += "vending machine admission tickets<br/>";
            break;case "animal_feed":
            a += "vending machine animal feed<br/>";break;case "bicycle_tube":
            a += "vending machine bicycle tube<br/>";break;case "books":
            a += "vending machine books<br/>";break;case "candles":
            a += "vending machine candles<br/>";break;case "cigarettes":
            a += "vending machine cigarettes<br/>";break;case "chemist":
            a += "vending machine chemist<br/>";break;case "condoms":
            a += "vending machine condoms<br/>";break;case "drinks":
            a += "vending machine drinks<br/>";break;case "electronics":
            a += "vending machine electronics<br/>";
            break;case "elongated_coin":
            a += "vending machine elongated_coin<br/>";break;case "excrement_bags":
            a += "vending machine excrement_bags<br/>";break;case "feminine_hygiene":
            a += "vending machine feminine_hygiene<br/>";break;case "first_aid":
            a += "vending machine first_aid<br/>";break;case "fishing_tackle":
            a += "vending machine fishing tackle<br/>";break;case "fishing_bait":
            a += "vending machine fishing bait<br/>";break;case "flowers":
            a += "vending machine flowers<br/>";break;case "food":
            a += "vending machine food<br/>";
            break;case "ice_cubes":
            a += "vending machine ice cubes<br/>";break;case "ice_cream":
            a += "vending machine ice cream<br/>";break;case "ink_cartridges":
            a += "vending machine ink cartridges<br/>";break;case "laundry_detergent":
            a += "vending machine laundry detergent<br/>";break;case "public_transport_tickets":
            a += "vending machine public transport tickets<br/>";break;case "newspaper":
            a += "vending machine newspaper<br/>";break;case "parcel_pickup":
            a += "vending machine parcel pickup<br/>";break;case "parcel_mail_in":
            a += "Packege station<br/>";break;case "parking_tickets":
            a += "vending machine parking tickets<br/>";break;case "photos":
            a += "vending machine photos<br/>";break;case "sex_toys":
            a += "vending machine sex_toys<br/>";break;case "SIM_cards":
            a += "vending machine SIM_cards<br/>";break;case "stamps":
            a += "vending machine stamps<br/>";break;case "sweets":
            a += "vending machine sweets<br/>";break;case "syringes":
            a += "vending machine syringes<br/>";break;case "toll":
            a += "vending machine toll<br/>";break;case "toys":
            a += "vending machine toys<br/>";
            break;case "umbrellas":
            a += "vending machine umbrellas<br/>";break;default:
            a += "vending machine<br/>";} else a += "vending machine<br/>";"arts_centre" == b.amenity && (a += "arts centre<br/>");"artwork" == b.amenity && (a += "artwork<br/>");"museum" == b.amenity && (a += "museum<br/>");"theatre" == b.amenity && (a += "theatre<br/>");"cathedral" == b.building && (a += "cathedral<br/>");"church" == b.building && (a += "church<br/>");"chapel" == b.building && (a += "chapel<br/>");"place_of_worship" == b.amenity && (a += "place of worship<br/>");"village" == b.abandoned && (a += "abandoned village<br/>");"theme_park" == b["abandoned:tourism"] && (a += "abandoned theme park<br/>");"prison_camp" == b["abandoned:amenity"] && "concentration_camp" == ["concentration_camp"] && (a += "abandoned concentration camp<br/>");"yes" == b.abandoned && "bunker" == b.military && (a += "abandoned bunker<br/>");"yes" == b.abandoned && "barracks" == b.military && (a += "abandoned barracks<br/>");"yes" == b.abandoned && "airfield" == b.military && (a += "abandoned airfield<br/>");"monastery" == b.historic && (a += "historic monastery<br/>");
    "monastery" == b.amenity && (a += "monastery<br/>");"monastery" == b.building && (a += "monastery<br/>");"manor" == b.historic && (a += "historic manor<br/>");"boundary_stone" == b.historic && (a += "historic boundary stone<br/>");"milestone" == b.historic && (a += "historic milestone<br/>");"monument" == b.historic && (a += "monument<br/>");"palace" == b.historic && (a += "historic palace<br/>");"mine" == b.historic && (a += "historic mine<br/>");"ruins" == b.historic && (a += "ruins<br/>");"harbour" == b.historic_usage && (a += "historic harbour<br/>");
    "rune stone" == b.historic && (a += "rune stone<br/>");"battlefield" == b.historic && (a += "historic battlefield<br/>");"blacksmith" == b.historic && (a += "historic blacksmith<br/>");if ("tree_shrine" == b.historic || "wayside_shrine" == b.historic) a += "shrine<br/>";"city_gate" == b.historic && (a += "historic city gate<br/>");"wayside_cross" == b.historic && (a += "historic wayside cross<br/>");"monument" == b.amenity && (a += "monument<br/>");"memorial" == b.historic && (a += "memorial<br/>");"optical_telegraph" == b.historic && (a += "historic optical telegraph<br/>");
    if ("castle" == b.historic) if (b.castle_type) switch (b.castle_type) {case "defensive":
            a += "defensive castle<br/>";break;case "palace":
            a += "palace<br/>";break;case "stately":
            a += "stately castle<br/>";break;case "manor":
            a += "manor<br/>";break;case "fortress":
            a += "fortress<br/>";break;case "castrum":
            a += "castrum<br/>";break;case "shiro":
            a += "shiro<br/>";break;case "kremlin":
            a += "kremlin<br/>";break;default:
            a += "castle<br/>";} else a += "castle<br/>";"archaeological_site" == b.historic && (a += "archaeological site<br/>");if ("tomb" == b.historic) if (b.tomb) switch (b.tomb) {case "tumulus":
            a += "tumulus<br/>";break;case "rock-cut":
            a += "rock<br/>";break;case "hypogeum":
            a += "hypogeum<br/>";break;case "war_grave":
            a += "war grave<br/>";break;case "mausoleum":
            a += "mausoleum<br/>";break;case "columbarium":
            a += "columbarium<br/>";break;case "crypt":
            a += "crypt<br/>";break;case "pyramid":
            a += "pyramid<br/>";break;case "sarcophagus":
            a += "sarcophagus<br/>";break;case "vault":
            a += "vault<br/>";break;case "tombstone":
            a += "tombstone<br/>";break;default:
            a += "historic tomb<br/>";} else a += "historic tomb<br/>";"accountant" == b.office && (a += "accountant<br/>");"administrative" == b.office && (a += "administrative<br/>");"architect" == b.office && (a += "architect<br/>");"association" == b.office && (a += "association<br/>");"physician" == b.office && (a += "physician<br/>");"camping" == b.office && (a += "camping office<br/>");"company" == b.office && (a += "company<br/>");"educational_institution" == b.office && (a += "educational institution<br/>");"employment_agency" == b.office && (a += "employment agency<br/>");"estate_agent" == b.office && (a += "estate agent<br/>");"forestry" == b.office && (a += "forestry<br/>");"foundation" == b.office && (a += "foundation<br/>");"government" == b.office && (a += "government<br/>");"guide" == b.office && (a += "guide office<br/>");"insurance" == b.office && (a += "insurance<br/>");"it" == b.office && (a += "it office<br/>");"lawyer" == b.office && (a += "lawyer<br/>");"newspaper" == b.office && (a += "newspaper<br/>");"ngo" == b.office && (a += "ngo office<br/>");"notary" == b.office && (a += "notary<br/>");"political_party" == b.office && (a += "political party<br/>");
    "quango" == b.office && (a += "quango office<br/>");"realtor" == b.office && (a += "realtor<br/>");"real_estate_agent" == b.office && (a += "real estate agent<br/>");"register" == b.office && (a += "register<br/>");"religion" == b.office && (a += "religious office<br/>");"research" == b.office && (a += "research office<br/>");"tax" == b.office && (a += "tax office<br/>");"telecommunication" == b.office && (a += "telecommunication office<br/>");"travel_agent" == b.office && (a += "travel agent<br/>");"water_utility" == b.office && (a += "water utility office<br/>");
    "therapist" == b.office && (a += "therapist<br/>");"city" == b.place && (a += "city<br/>");"town" == b.place && (a += "town<br/>");"village" == b.place && (a += "village<br/>");"continent" == b.place && (a += "continent<br/>");"ocean" == b.place && (a += "ocean</br>");"track" == b.highway && (a += "track<br/>");"raceway" == b.highway && (a += "raceway<br/>");"designated" == b.bicycle && (a += "cycle path<br/>");"path" == b.highway && (a += "food path<br/>");"parking" == b.amenity && (a += "parking<br/>");"services" == b.highway && (a += "services<br/>");"rest_area" == b.highway && (a += "rest area<br/>");"turning_circle" == b.highway && (a += "turning circle<br/>");"service" == b.highway && (a += "service road<br/>");"motorway" == b.highway && (a += "motorway<br/>");"motorway_junction" == b.highway && (a += "motorway junction<br/>");"bridleway" == b.highway && (a += "bridleway<br/>");"yes" == b.oneway && (a += "oneway<br/>");"yes" == b.park_ride && (a += "park and ride<br/>");"unknown" == b.park_ride && (a += "park and ride<br/>");"bus" == b.park_ride && (a += "park and ride<br/>");"tram" == b.park_ride && (a += "park and ride<br/>");
    "bus_stop" == b.highway && (a += "bus stop<br/>");"pedestrian" == b.highway && (a += "pedestrian<br/>");"street_lamp" == b.highway && (a += "street lamp<br/>");"traffic_signals" == b.highway && (a += "traffic signals<br/>");"traffic_signals" == b.crossing && (a += "traffic signals<br/>");"speed_camera" == b.highway && (a += "speed camera<br/>");"yes" == b.traffic_calming && (ret += "traffic calming</br>");"bump" == b.traffic_calming && (a += "bump</br>");"chicane" == b.traffic_calming && (a += "chicane</br>");"choker" == b.traffic_calming && (a += "choker</br>");
    "cushion" == b.traffic_calming && (a += "cushion</br>");"hump" == b.traffic_calming && (a += "hump</br>");"island" == b.traffic_calming && (a += "island</br>");"rumble_strip" == b.traffic_calming && (a += "rumble_strip</br>");"table" == b.traffic_calming && (a += "table</br>");"buoy_cardinal" == b["seamark:type"] && (a += "buoy cardinal<br/>");"buoy_lateral" == b["seamark:type"] && (a += "buoy lateral<br/>");"buoy_isolated_danger" == b["seamark:type"] && (a += "buoy isolated_danger<br/>");"perch" == b["seamark:beacon_lateral:shape"] && (a += "perch<br/>");
    "fuel" == b.amenity && "fuel_station" == b["seamark:small_craft_facility:category"] ? a += "fuel station<br/>" : "fuel" == b.amenity && (a += "fuel<br/>");if ("charging_station" == b.amenity) {
        var a = a + "charging station<br/>",
            c = b.voltage;if (b.car) {
            switch (b.car) {case "yes":
                    a += "Car: yes";break;case "no":
                    a += "Car: No";break;default:
                    a += "Cars: unkown";}a += "<br/>";
        } else a += "Cars: unkown<br/>";if (b.bicycle) {
            switch (b.bicycle) {case "yes":
                    a += "E-Bike: yes";break;case "no":
                    a += "E-Bike: no";break;default:
                    a += "E-Bike: unkown";}a += "<br/>";
        } else a += "E-Bike: unkown<br/>";b["socket:schuko"] && (a += "Schuko socket: " + b["socket:schuko"] + "<br/>");b["socket:cee_blue"] && (a += "Cee blue socket " + b["socket:cee_blue"] + "<br/>");b["socket:cee_red_16a"] && (a += "Cee red 16a socket " + b["socket:cee_red_16a"] + "<br/>");b["socket:cee_red_32a"] && (a += "Cee red 32a socket " + b["socket:cee_red_32a"] + "<br/>");b["socket:cee_red_64a"] && (a += "Cee red 64a socket " + b["socket:cee_red_64a"] + "<br/>");b["socket:cee_red_125a"] && (a += "Cee red 125a socket " + b["socket:cee_red_125a"] + "<br/>");
        b["socket:nema_5_15"] && (a += "Nema 5 15 socket " + b["socket:nema_5_15"] + "<br/>");b["socket:nema_5_20"] && (a += "Nema 5 20 socket " + b["socket:nema_5_20"] + "<br/>");b["socket:nema_14_30"] && (a += "Nema 14 30 socket " + b["socket:nema_14_30"] + "<br/>");b["socket:nema_14_50"] && (a += "Nema 14 50 socket " + b["socket:nema_14_50"] + "<br/>");b["socket:bs1363"] && (a += "Bs1363 socket " + b["socket:bs1363"] + "<br/>");b["socket:type1"] && (a += "Type 1 socket " + b["socket:type1"] + "<br/>");b["socket:type1_combo"] && (a += "Type 1 combo socket " + b["socket:schuko"] + "<br/>");b["socket:type2"] && (a += "Type 2 socket " + b["socket:type2"] + "<br/>");b["socket:type2_combo"] && (a += "Type 2 combo socket " + b["socket:type2_combo"] + "<br/>");b["socket:type3"] && (a += "Type 3 socket " + b["socket:type3"] + "<br/>");b["socket:chademo"] && (a += "Chademo socket " + b["socket:chademo"] + "<br/>");b["socket:magne_charge"] && (a += "Magne charge socket " + b["socket:magne_charge"] + "<br/>");b["socket:tesla_standard"] && (a += "Tesla standard socket " + b["socket:tesla_standard"] + "<br/>");b["socket:tesla_supercharge"] && (a += "Tesla supercharge: " + b["socket:tesla_supercharge"] + "<br/>");b["socket:tesla_roadster"] && (a += "Tesla_roadster socket " + b["socket:tesla_roadster"] + "<br/>");a += "<br/>";b.voltage && (a += "Volt: " + c + "<br/>");
    }"yes" == b.tunnel && (a += "tunnel<br/>");if (b.bridge) switch (a += "bridge: ", b.bridge) {case "swing":
            a += "swing";break;case "aqueduct":
            a += "aqueduct";break;case "bascule":
            a += "flap bridge";break;case "boardwalk":
            a += "boardwalk";break;case "cantilever":
            a += "cantilever";break;case "covered":
            a += "covered";break;case "drawbridge":
            a += "drawbridge";break;case "humpback":
            a += "humpback";break;case "lift":
            a += "lift";break;case "low_water_crossing":
            a += "low water crossing";break;case "moveable":
            a += "moveable";break;case "pontoon":
            a += "pontoon";break;case "suspension":
            a += "suspension";break;case "trestle":
            a += "trestle";break;case "viaduct":
            a += "viaduct";}if (b["bridge:movable"]) switch (b["bridge:movable"]) {case "swing":
            a += "swing";break;case "bascule":
            a += "bascule";break;case "drawbridge":
            a += "drawbridge";break;case "lift":
            a += "lift";break;case "submersible":
            a += "submersible";break;case "transporter":
            a += "transporter";break;case "retractable":
            a += "retractable";}if ("nursing_home" == b.amenity || "retirement_home" == b.amenity) a += "nursing home / retirement home<br/>";"social_facility" == b.amenity && (a += "social facility<br/>");if (b.social_facility) {
        "group_home" == b.social_facility && "senior" == b["social_facility:for"] && (a += "senior group home<br/>");"assisted_living" == b.social_facility && (a += "assisted living<br/>");"outreach" == b.social_facility && (a += "outreach<br/>");"workshop" == b.social_facility && (a += "workshop<br/>");if ("ambulatory_care" == b.social_facility || "healthcare" == b.social_facility) a += "ambulatory care<br/>";"shelter" == b.social_facility && "senior" == b["social_facility:for"] && (a += "senior shelter<br/>");"shelter" == b.social_facility && "abused" == b["social_facility:for"] && (a += "abused shelter<br/>");"food_bank" == b.social_facility && (a += "food bank<br/>");"hospice" == b.social_facility && (a += "hospice<br/>");
    }b.brewery && (a += "brand of beer: " + b.brewery + "<br/>");"alcohol" == b.shop && (a += "alcohol shop<br/>");"bakery" == b.shop && (a += "bakery shop<br/>");"beverages" == b.shop && (a += "beverages shop<br/>");"butcher" == b.shop && (a += "butcher shop<br/>");"cheese" == b.shop && (a += "cheese shop<br/>");"chocolate" == b.shop && (a += "chocolate shop<br/>");"coffee" == b.shop && (a += "coffee shop<br/>");"confectionery" == b.shop && (a += "confectionery shop<br/>");"convenience" == b.shop && (a += "convenience shop<br/>");"deli" == b.shop && (a += "deli shop<br/>");"dairy" == b.shop && (a += "dairy shop<br/>");"farm" == b.shop && (a += "farm shop<br/>");
    "greengrocer" == b.shop && (a += "greengrocer shop<br/>");"grocery" == b.shop && (a += "grocery shop<br/>");"organic" == b.shop && (a += "organic shop<br/>");"pasta" == b.shop && (a += "pasta shop<br/>");"seafood" == b.shop && (a += "seafood shop<br/>");"tea" == b.shop && (a += "tea shop<br/>");"wine" == b.shop && (a += "wine shop<br/>");"department_store" == b.shop && (a += "department store<br/>");"general" == b.shop && (a += "general shop<br/>");"kiosk" == b.shop && (a += "kiosk<br/>");"mall" == b.shop && (a += "mall<br/>");"supermarket" == b.shop && (a += "supermarket<br/>");
    "baby_goods" == b.shop && (a += "baby goods shop<br/>");"bag" == b.shop && (a += "bag shop<br/>");"boutique" == b.shop && (a += "boutique<br/>");"clothes" == b.shop && (a += "clothes shop<br/>");"fabric" == b.shop && (a += "fabric shop<br/>");"fashion" == b.shop && (a += "fashion shop<br/>");"jewelry" == b.shop && (a += "jewelry shop<br/>");"leather" == b.shop && (a += "leather shop<br/>");"shoes" == b.shop && (a += "shoes shop<br/>");"variety_store" == b.shop && (a += "variety store<br/>");"chemist" == b.shop && (a += "chemist<br/>");"cosmetics" == b.shop && (a += "cosmetics shop<br/>");
    "drugstore" == b.shop && (a += "drugstore<br/>");"perfumery" == b.shop && (a += "perfumery<br/>");"erotic" == b.shop && (a += "erotic shop<br/>");"hairdresser" == b.shop && (a += "hairdresser<br/>");"hearing_aids" == b.shop && (a += "hearing aids<br/>");"herbalist" == b.shop && (a += "herbalist<br/>");"massage" == b.shop && (a += "massage<br/>");"medical_supply" == b.shop && (a += "medical supply shop<br/>");"optician" == b.shop && (a += "optician<br/>");"tattoo" == b.shop && (a += "tattoo<br/>");"bathroom_furnishing" == b.shop && (a += "bathroom furnishing<br/>");
    "doityourself" == b.shop && (a += "doityourself<br/>");"energy" == b.shop && (a += "energy<br/>");"florist" == b.shop && (a += "florist<br/>");"furnace" == b.shop && (a += "furnace shop<br/>");"garden_centre" == b.shop && (a += "garden centre<br/>");"gas" == b.shop && (a += "gas<br/>");"glaziery" == b.shop && (a += "glaziery<br/>");"hardware" == b.shop && (a += "hardware shop<br/>");"houseware" == b.shop && (a += "houseware shop<br/>");"locksmith" == b.shop && (a += "locksmith<br/>");"paint" == b.shop && (a += "paint shop<br/>");"trade" == b.shop && (a += "trade<br/>");
    "antiques" == b.shop && (a += "antiques shop<br/>");"bed" == b.shop && (a += "bed shop<br/>");"candles" == b.shop && (a += "candles shop<br/>");"carpet" == b.shop && (a += "carpet shop<br/>");"curtain" == b.shop && (a += "curtain shop<br/>");"furniture" == b.shop && (a += "furniture store<br/>");"interior_decoration" == b.shop && (a += "interior decoration company<br/>");"kitchen" == b.shop && (a += "kitchen shop<br/>");"window_blind" == b.shop && (a += "window blind shop<br/>");"computer" == b.shop && (a += "computer shop<br/>");"electronics" == b.shop && (a += "electronics shop<br/>");"hifi" == b.shop && (a += "hifi shop<br/>");"mobile_phone" == b.shop && (a += "mobile phone shop<br/>");"radiotechnics" == b.shop && (a += "radiotechnics shop<br/>");"vacuum_cleaner" == b.shop && (a += "vacuum cleaner shop<br/>");"bicycle" == b.shop && (a += "bicycle shop<br/>");"car" == b.shop && (a += "car shop<br/>");"car repair" == b.shop && (a += "car repair<br/>");"car_parts" == b.shop && (a += "car parts shop<br/>");if ("dive" == b.shop || "scuba_diving" == b.shop) a += "scuba diving shop<br/>";"fishing" == b.shop && (a += "fishing shop<br/>");
    "free_flying" == b.shop && (a += "free flying shop<br/>");"hunting" == b.shop && (a += "hunting shop<br/>");"motorcycle" == b.shop && (a += "motorcycle shop<br/>");"outdoor" == b.shop && (a += "outdoor shop<br/>");"sports" == b.shop && (a += "sports shop<br/>");"tyres" == b.shop && (a += "tyres<br/>");"water_sports" == b.shop && (a += "water sports shop<br/>");"art" == b.shop && (a += "art<br/>");"craft" == b.shop && (a += "craft<br/>");"frame" == b.shop && (a += "frame shop<br/>");"music" == b.shop && (a += "music shop<br/>");"music_instrument" == b.shop && (a += "music instruments shop<br/>");
    "photo" == b.shop && (a += "photo shop<br/>");"video" == b.shop && (a += "video<br/>");"video_games" == b.shop && (a += "video games<br/>");"anime" == b.shop && (a += "anime<br/>");"books" == b.shop && (a += "books shop<br/>");"gift" == b.shop && (a += "gift shop<br/>");"newsagent" == b.shop && (a += "newsagent<br/>");"stationery" == b.shop && (a += "stationery<br/>");"ticket" == b.shop && (a += "ticket shop<br/>");"copyshop" == b.shop && (a += "copyshop<br/>");"funeral_directors" == b.shop && (a += "funeral directors<br/>");"laundry" == b.shop && (a += "laundry<br/>");
    "dry_cleaning" == b.shop && (a += "dry cleaning<br/>");"money_lender" == b.shop && (a += "money lender<br/>");"pawnbroker" == b.shop && (a += "pawnbroker<br/>");"pet" == b.shop && (a += "pet shop<br/>");"pyrotechnics" == b.shop && (a += "pyrotechnics shop<br/>");"religion" == b.shop && (a += "religion<br/>");"beauty" == b.shop && (a += "beauty<br/>");"solarium" == b.shop && (a += "solarium<br/>");"tobacco" == b.shop && (a += "tobacco shop<br/>");"toys" == b.shop && (a += "toys shop<br/>");"travel_agency" == b.shop && (a += "travel agency<br/>");"market_hall" == b.shop && (a += "market hall<br/>");"vacant" == b.shop && (a += "vacant<br/>");"weapons" == b.shop && (a += "weapons shop<br/>");"lottery" == b.gambling && (a += "lottery<br/>");"fish" == b.pet && (a += "fishkeeping<br/>");"agriucultural_engines" == b.craft && (a += "agriucultural engines<br/>");"basket_maker" == b.craft && (a += "basket maker<br/>");"beekeeper" == b.craft && (a += "beekeeper<br/>");"blacksmith" == b.craft && (a += "blacksmith<br/>");"brewery" == b.craft && (a += "brewery<br/>");"yes" == b.microbrewery && (a += "micro-brewery<br/>");"boatbuilder" == b.craft && (a += "boatbuilder<br/>");"bookbinder" == b.craft && (a += "bookbinder<br/>");"builder" == b.craft && (a += "housebuilding<br/>");"carpenter" == b.craft && (a += "carpenter, woodworker, joiner<br/>");"carpet_layer" == b.craft && (a += "carpet layer<br/>");"caterer" == b.craft && (a += "caterer<br/>");"clockmaker" == b.craft && (a += "clockmaker<br/>");"confectionery" == b.craft && (a += "confectionery<br/>");"dressmaker" == b.craft && (a += "dressmaker<br/>");"electrician" == b.craft && (a += "electrician<br/>");"gardener" == b.craft && (a += "gardener, landscaper<br/>");
    "glaziery" == b.craft && (a += "glaziery<br/>");"handicraft" == b.craft && (a += "handicraft<br/>");"hvac" == b.craft && (a += "heating, ventilation and air-conditioning technology (HVAC)<br/>");"insulation" == b.craft && (a += "thermal insulation<br/>");"jeweller" == b.craft && (a += "jeweller, gold-/silversmiths<br/>");"key_cutter" == b.craft && (a += "key cutter<br/>");"locksmith" == b.craft && (a += "locksmith<br/>");"metal_construction" == b.craft && (a += "metalworker<br/>");"optician" == b.craft && (a += "optician<br/>");"painter" == b.craft && (a += "painter<br/>");"parquet_layer" == b.craft && (a += "parquet layer<br/>");"photographer" == b.craft && (a += "photographer<br/>");"photographic_laboratory" == b.craft && (a += "photographic laboratory<br/>");"plasterer" == b.craft && (a += "plasterer<br/>");"plumber" == b.craft && (a += "plumber<br/>");"pottery" == b.craft && (a += "pottery<br/>");"rigger" == b.craft && (a += "ship rigger<br/>");"roofer" == b.craft && (a += "roofer<br/>");"saddler" == b.craft && (a += "saddler<br/>");"sailmaker" == b.craft && (a += "sailmaker<br/>");"sawmill" == b.craft && (a += "sawmill<br/>");"scaffolder" == b.craft && (a += "scaffolder<br/>");"sculptor" == b.craft && (a += "sculptor<br/>");"shoemaker" == b.craft && (a += "shoemaker<br/>");"stand_builder" == b.craft && (a += "exhibition stand builder<br/>");"stonemason" == b.craft && (a += "stonemason<br/>");"sun_protection" == b.craft && (a += "constructor for sun protection, venetian blind, shutter<br/>");"sweep" == b.craft && (a += "chimney sweep<br/>");"tailor" == b.craft && (a += "tailor<br/>");"tiler" == b.craft && (a += "tiler<br/>");"tinsmith" == b.craft && (a += "tinsmith, metalworker<br/>");
    "upholsterer" == b.craft && (a += "upholsterer<br/>");"watchmaker" == b.craft && (a += "watchmaker<br/>");"window_construction" == b.craft && (a += "window constructor<br/>");"machines" == b.rental && (a += "rental park for machines<br/>");"car_rental" == b.amenity && (a += "car rental company<br/>");"allotments" == b.landuse && (a += "allotment garden<br/>");"basin" == b.landuse && (a += "holding reservoir<br/>");"brownfield" == b.landuse && (a += "brownfield<br/>");"commercial" == b.landuse && (a += "commercial area<br/>");"construction" == b.landuse && (a += "construction area<br/>");"farmland" == b.landuse && (a += "farmland<br/>");"farmyard" == b.landuse && (a += "farmyard<br/>");"forest" == b.landuse && (a += "forest<br/>");"garages" == b.landuse && (a += "garages<br/>");"grass" == b.landuse && (a += "grass<br/>");"greenfield" == b.landuse && (a += "greenfield<br/>");"greenhouse_horticulture" == b.landuse && (a += "greenhouse horticulture<br/>");"industrial" == b.landuse && (a += "industry area<br/>");"landfill" == b.landuse && (a += "landfill<br/>");"meadow" == b.landuse && (a += "meadow<br/>");"orchard" == b.landuse && (a += "orchard<br/>");"plant_nursery" == b.landuse && (a += "plant nursery<br/>");"quarry" == b.landuse && (a += "quarry<br/>");"railway" == b.landuse && (a += "railway<br/>");"recreation_ground" == b.landuse && (a += "recreation ground<br/>");"reservoir" == b.landuse && (a += "reservoir<br/>");"residential" == b.landuse && (a += "residential<br/>");"retail" == b.landuse && (a += "retrail<br/>");"salt_pond" == b.landuse && (a += "salt pond<br/>");"village_green" == b.landuse && (a += "village green<br/>");"vineyard" == b.landuse && (a += "vineyard<br/>");
    "pond" == b.landuse && (a += "pond<br/>");"salt_pond" == b.landuse && (a += "salt pond<br/>");"animal_keeping" == b.landuse && (a += "animal keeping<br/>");"yes" == b.entrance && (a += "entrance<br/>");"main" == b.entrance && (a += "main-entrance<br/>");"service" == b.entrance && (a += "rear exit for staffing and suppliers<br/>");"exit" == b.entrance && (a += "exit<br/>");"emergency" == b.entrance && (a += "emergency<br/>");"bay" == b.natural && (a += "bay<br/>");"beach" == b.natural && (a += "beach<br/>");"wood" == b.natural && (a += "wood<br/>");"glacier" == b.natural && (a += "glacier<br/>");"cave_entrance" == b.natural && (a += "cave entrance<br/>");"spring" == b.natural && (a += "spring<br/>");"waterfall" == b.natural && (a += "waterfall<br/>");"scrub" == b.natural && (a += "scrub<br/>");"grassland" == b.natural && (a += "grassland<br/>");"wetland" == b.natural && (a += "wetland<br/>");"tree" == b.natural && (a += "tree");"peak" == b.natural && "yes" == b["summit:cross"] && (a += "cross on the summit of a mountain<br/>");"tree_row" == b.natural && (a += "tree row, alley of trees<br/>");"heath" == b.natural && (a += "heath<br/>");
    "moor" == b.natural && (a += "moor<br/>");"grassland" == b.natural && (a += "grassland<br/>");"fell" == b.natural && (a += "grasland above the tree land<br/>");"bare_rock" == b.natural && (a += "bare rock<br/>");"scree" == b.natural && (a += "scree<br/>");"volcano" == b.natural && (a += "volcano<br/>");"valley" == b.natural && (a += "valley<br/>");"stone" == b.natural && (a += "stone<br/>");"sea" == b.natural && (a += "sea<br/>");"national_park" == b.boundary && (a += "national park<br/>");"protected_area" == b.boundary && (a += "protected area<br/>");"yes" == b.mountain_pass && (a += "mountain pass<br/>");"waterfall" == b.waterway && (a += "waterfall<br/>");"canal" == b.waterway && (a += "canal<br/>");"canal" == b.water && (a += "canal<br/>");"river" == b.waterway && (a += "river<br/>");"river" == b.water && (a += "river<br/>");"riverbank" == b.waterway && (a += "river<br/>");"ditch" == b.waterway && (a += "ditch<br/>");"stream" == b.waterway && (a += "stream<br/>");"ferry" == b.route && (a += "ferry<br/>");"turning_point" == b.waterway && (a += "turning point<br/>");if ("lake" == b.water || "water" == b.natural) a += "lake<br/>";"cove" == b.water && (a += "cove<br/>");"lagoon" == b.water && (a += "lagoon<br/>");"pond" == b.water && (a += "pond<br/>");"reservoir" == b.water && (a += "waterreservoir<br/>");"oxbow" == b.water && (a += "oxbow lake<br/>");"lock" == b.water && (a += "lock chamber<br/>");"moat" == b.water && (a += "castle moat<br/>");"wastewater" == b.water && (a += "wastewater treatment plant<br/>");"guest" == b.mooring && "pier" == b.man_made || "visitor_berth" == b["seamark:small_craft_facility:category"] ? a += "gastrointestinal<br/>" : "pier" == b.man_made && (a += "pier<br/>");"boatyard" == b.waterway && (a += "boatyard<br/>");"mooring" == b["seamark:type"] && "dolphin" == b["seamark:mooring:category"] && (a += "dolphin<br/>");"foot" == b.route && (a += "footpath<br/>");"hiking" == b.route && (a += "hiking trail<br/>");if ("yes" == b.hiking && "information" == b.tourism) a += "direction board<br/>";else if ("information" == b.tourism && "information" == b.tourism) if (b.information) switch (b.information) {case "board":
            a += "direction board<br/>";break;case "map":
            a += "direction board with a map<br/>";break;case "office":
            a += "tourist information office<br/>";
            break;case "terminal":
            a += "tourist information terminal<br/>";break;case "audioguide":
            a += "audioguide<br/>";break;case "guidepost":
            a += "guidepost<br/>";break;case "tactile_map":
            a += "tactile map<br/>";break;case "tactile_model":
            a += "tactile model<br/>";break;case "route_marker":
            a += "route marker<br/>";break;default:
            a += "direction board<br/>";} else a += "direction board<br/>";"bicycle" == b.route && (a += "cycle track<br/>");"mtb" == b.route && (a += "mountain bike route<br/>");"horse" == b.route && (a += "bridleway<br/>");"coastline" == b.natural && (a += "coastline<br/>");"cliff" == b.natural && (a += "cliff<br/>");"dam" == b.waterway && (a += "dam<br/>");"weir" == b.waterway && (a += "weir<br/>");"lock_gate" == b.waterway && (a += "lock gate<br/>");"yes" == b.lock && (a += "lock<br/>");"sluice_gate" == b.waterway && (a += "sluice gate<br/>");"pumping_station" == b.man_made && (a += "pumping station<br/>");"groyne" == b.man_made && (a += "groyne<br/>");"dyke" == b.man_made && (a += "dyke<br/>");"levee" == b.man_made && (a += "levee<br/>");"watermill" == b.man_made && (a += "watermill<br/>");"airfield" == b.military && (a += "military airfield<br/>");"naval_base" == b.military && (a += "naval base<br/>");"range" == b.military && (a += "military range<br/>");"military" == b.landuse && (a += "military land use<br/>");"training_area" == b.military && (a += "military training area<br/>");"exclusion_zone" == b.military && (a += "military exclusion zone<br/>");"danger_area" == b.military && (a += "military danger area<br/>");"barracks" == b.military && (a += "barracks<br/>");"nuclear_explosion_site" == b.military && (a += "military nuclear explosion site<br/>");
    "yes" == b.construction ? a += "construction<br/>" : "construction" == b.highway && (a += "construction<br/>");"petroleum_well" == b.man_made && (a += "petroleum well<br/>");"storage_tank" == b.man_made && (a += "storage tank<br/>");"wastewater_plant" == b.man_made && (a += "wastewater plant<br/>");"silo" == b.man_made && (a += "silo<br/>");"water_tower" == b.man_made && (a += "water tower<br/>");"windmill" == b.man_made && (a += "windmill<br/>");"monitoring_station" == b.man_made && (a += "monitoring station");"crane" == b.man_made && (a += "crane");"lighthouse" == b.man_made && (a += "lighthouse");"beacon" == b.man_made && (a += "beacon");"breakwater" == b.man_made && (a += "breakwater");"lamp" == b.man_made && "street_lamp" == b["lamp:type"] && (a += "street lamp<br/>");"lantern" == b.light_source && (a += "street lamp");"floodlight" == b.light_source && (a += "floodlight<br/>");"signal_lamp" == b.light_source && (a += "signal lamp<br/>");"aviation" == b.light_source && (a += "aviation<br/>");"warning" == b.light_source && (a += "warning<br/>");if (b.light_source && b["light:method"]) switch (a += "Light Typ: ", b["light:method"]) {case "gas":
            a += "Gas";break;case "electric":
            a += "electric";break;case "incandescent":
            a += "incandescent";break;case "halogen":
            a += "halogen";break;case "discharge":
            a += "discharge";break;case "metal-halide":
            a += "metal-halide";break;case "neon":
            a += "neon";break;case "sodium":
            a += "Natriumdampflampe";break;case "high_pressure_sodium":
            a += "high pressure sodium";break;case "low_pressure_sodium":
            a += "low pressure sodium";break;case "fluorescent":
            a += "Fluorescent";break;case "mercury":
            a += "Mercury";break;case "LED":
            a += "LED";break;case "laser":
            a += "Laser";break;case "arc":
            a += "Arc";break;default:
            a += "Unkown";}"drinking_water" == b.amenity && (a += "drinking water<br/>");"yes" == b.drinking_water && (a += "drinking water<br/>");"works" == b.man_made ? a += "industrial building<br/>" : "industrial" == b.building ? a += "industrial building<br/>" : "industrial" == b.landuse ? a += "industrial area<br/>" : "industrial" == b.abutters ? a += "industrial area<br/>" : "commercial" == b.abutters && (a += "commercial<br/>");if (b["generator:source"]) switch (a += "installation: ", b["generator:source"]) {case "biomass":
            a += "biomass";break;case "biofuel":
            a += "biofuel";break;case "biogas":
            a += "biogas";break;case "coal":
            a += "coal";break;case "oil":
            a += "oil";break;case "waste":
            a += "waste";break;case "wind":
            a += "wind";break;case "solar":
            a += "solar";break;case "hydro":
            a += "hydro";break;case "tidal":
            a += "tidal";break;case "wave":
            a += "wave";break;case "geothermal":
            a += "geothermal";break;case "osmotic":
            a += "osmotic";break;case "nuclear":
            a += "nuclear";break;default:
            a += "unknown<br/>";}"photovoltaic" == b.power_source && (a += "photovoltaic");"line" == b.power && (a += "power line<br/>");"cable" == b.power && (a += "cable<br/>");"cable_distribution_cabinet" == b.power && (a += "cable distribution cabinet<br/>");"plant" == b.power && (a += "plant<br/>");"station" == b.power && (a += "station<br/>");"sub_station" == b.power && (a += "substation<br/>");"compensator" == b.power && (a += "compensator<br/>");"converter" == b.power && (a += "converter<br/>");"generator" == b.power && (a += "generator<br/>");"heliostat" == b.power && (a += "heliostat<br/>");"insulator" == b.power && (a += "insulator<br/>");"busbar" == b.line && (a += "busbar<br/>");"bay" == b.line && (a += "bay<br/>");"minor_line" == b.power && (a += "minor line<br/>");"pole" == b.power && (a += "pole<br/>");"portal" == b.power && (a += "portal<br/>");"catenary_mast" == b.power && (a += "catenary mast<br/>");"substation" == b.power && (a += "substation<br/>");"switch" == b.power && (a += "switch<br/>");"terminal" == b.power && (a += "terminal<br/>");"tower" == b.power && (a += "tower<br/>");"transformer" == b.power && (a += "transformer<br/>");if (b.barrier) switch (b.barrier) {case "bollard":
            a += "bollard<br/>";
            break;case "cycle_barrier":
            a += "cycle barrier<br/>";break;case "gate":
            a += "gate<br/>";break;case "chain":
            a += "chain<br/>";break;case "lift_gate":
            a += "lift gate<br/>";break;case "wall":
            a += "wall<br/>";break;case "toll_booth":
            a += "toll booth<br/>";break;case "fence":
            switch (b.fence_type) {case "barbed_wire":
                    a += "barbed wire<br/>";break;case "wood":
                    a += "wood<br/>";break;case "chain_link":
                    a += "chain link<br/>";break;case "electric":
                    a += "electric<br/>";break;case "railing":
                    a += "railing<br/>";break;case "wire":
                    a += "wire<br/>";
                    break;case "metal":
                    a += "metal<br/>";break;case "pole":
                    a += "pole<br/>";break;default:
                    a += "fence<br/>";}break;case "block":
            a += "block<br/>";break;case "ditch":
            a += "ditch<br/>";break;case "border_control":
            a += "border control<br/>";break;case "hedge":
            a += "hedge<br/>";break;case "retaining_wall":
            a += "retaining wall<br/>";break;case "cattle_grid":
            a += "cattle grid<br/>";break;case "horse_stile":
            a += "horse stile<br/>";break;default:
            a += "unknown<br/>";}"noise_barrier" == b.wall && (a += "noise barrier<br/>");"retaining_wall" == b.designation && (a += "noise barrier<br/>");"noise_barrier" == b.designation && (a += "noise barrier<br/>");"surveillance" == b.man_made && (a += "surveillance<br/>");if (b.aeroway) switch (a += "airport: ", b.aeroway) {case "aerodrome":
            a += "airport";break;case "apron":
            a += "apron";break;case "gate":
            a += "gate";break;case "helipad":
            a += "helipad";break;case "hangar":
            a += "hangar";break;case "runway":
            a += "runway";break;case "taxiway":
            a += "taxiway";break;case "terminal":
            a += "terminal";break;default:
            a += "unknown<br/>";}"stop" == b.railway && (a += "railway stop<br/>");"crossing" == b.railway && (a += "crossing<br/>");"level_crossing" == b.railway && (a += "lvel crossing<br/>");"station" == b.railway && (a += "station<br/>");"bus_station" == b.amenity && (a += "bus station<br/>");"bus_station" == !b.amenity && "station" == b.public_transport && "yes" == b.bus && (a += "bus station<br/>");"rail" == b.railway && (a += "railway<br/>", "contact_line" == b.electrified && (a += "overhead contact line<br/>"));"tram" == b.railway && (a += "tram<br/>");if ("slipway" == b["seamark:small_craft_facility:category"] || "slipway" == b.harbour || "slipway" == b.leisure) a += "slipway<br/>";if ("harbour" == b["seamark:type"]) if (b["seamark:harbour:category"]) switch (b["seamark:harbour:category"]) {case "ferry":
            a += "ferry<br/>";break;case "container":
            a += "container<br/>";break;case "marina":
            "marina" != b.leisure && (a += "marina<br/>");break;case "navel_base":
            a += "navel base<br/>";break;case "tanker":
            a += "tanker<br/>";break;case "passenger":
            a += "passenger<br/>";break;case "bulk":
            a += "bulk<br/>";break;default:
            a += "habour<br/>";} else a += "habour<br/>";
    "marina" == b.leisure && (a += "marina<br/>");"wreck" == b.historic && (a += "wreck<br/>");"animal_shelter" == b.amenity && (a += "animal shelter<br/>");"shelter" == b.animal && (a += "shelter<br/>");"horse_walker" == b.animal && (a += "horse walker<br/>");"yes" == b.animal_shelter && (a += "animal shelter<br/>");"dog" == b.animal_shelter && (a += "animal shelter<br/>");"cat" == b.animal_shelter && (a += "animal shelter<br/>");"animal_boarding" == b.amenity && (a += "animal boarding<br/>");"yes" == b.animal_boarding && (a += "animal boarding<br/>");"dog" == b.animal_boarding && (a += "animal boarding<br/>");"horse" == b.animal_boarding && (a += "animal boarding<br/>");"cat" == b.animal_boarding && (a += "animal boarding<br/>");"dog;cat" == b.animal_boarding && (a += "animal boarding<br/>");"cat;dog" == b.animal_boarding && (a += "animal boarding<br/>");if ("school" == b.animal || "sport" == b.animal || "animal_training" == b.amenity) a += "animal training<br/>";"swimming" == b.animal && (a += "swimming for dogs<br/>");if ("feeding_place" == b.amenity || "animal_feeding" == b.man_made || "animal_feeding" == b.amenity) a += "animal feeding<br/>";if ("wildlife_feeding" == b.amenity || "deer_feeding" == b.amenity || "game_feeding" == b.amenity) a += "wildlife feeding<br/>";if ("cratch" == b.amenity || "cratch" == b.man_made || "feeding_rack" == b.amenity) a += "feeding rack<br/>";"manger" == b.amenity && (a += "manger<br/>");"birdhouse" == b.man_made && (a += "birdhouse<br/>");"stork" == b.birds_nest && (a += "storck<br/>");"nest_box" == b.amenity && (a += "nest box<br/>");"wellness" == b.animal && (a += "dog parlour<br/>");"cemetery" == b.animal && (a += "small animal cemetery<br/>");
    if ("stable" == b.building || "stable" == b["building:use"]) a += "stable<br/>";"cowshed" == b.building && (a += "cowshed<br/>");"sty" == b.building && (a += "sty<br/>");"barn" == b.building && (a += "barn<br/>");"farm_auxiliary" == b.building && (a += "farm auxiliary<br/>");if (b["river:waterway_distance"] || "milestone" == b.waterway) a += "milestone of waterway distance<br/>";"milestone" == b.highway && (a += "milestone<br/>");"market" == b["xmas:feature"] && (a += "Christmas fair<br/>");"tree" == b["xmas:feature"] && (a += "sale of Chrismas trees<br/>");
    "event" == b["xmas:feature"] && (a += "Chrismas event<br/>");"pyramid" == b["xmas:feature"] && (a += "Chrismas pyramid<br/>");return '<div class="c4g_popup_header_featuretype">' + a + "<br/> </div>";
}
var fnContent = function fnContent(b) {
    var a;a = "" + fnContentGeneralInformations(b);a += fnContentHealthcare(b);a += fnContentAerodrome(b);a += fnContentCuisine(b);a += fnContentShipping(b);a += fnContentHydrants(b);a += fnContentSports(b);a += fnContentStreetsTraffic(b);a += fnContentInformationCity(b);a += fnContentEmergency(b);a += fnContentStorage(b);a += fnContentAmenity(b);a += fnContentTourism(b);a += fnContentRoute(b);a += fnContentPetrol(b);a += fnContentBarriers(b);a += fnContentLanduse(b);a += fnContentNatural(b);a += fnKlosterAdditional(b);
    a += fnSicherheitAdditional(b);a += fnAdditionalBuildingInfos(b);a += fnKraftwerkInfo(b);a += fnMessstation(b);a += fnWertstoffinfo(b);(a += fnContentProtectedArea(b)) && (a = "<br/>" + a);return '<div class="c4g_popup_content">' + a + "</div>";
},
    fnContentAerodrome = function fnContentAerodrome(b) {
    var a = "";b.aerodrome && ("international" == b.aerodrome && (a += "type of airport: international<br/>"), "regional" == b.aerodrome && (a += "type of airport: regional<br/>"), "gliding" == b.aerodrome && (a += "type of airport: gliding<br/>"), "private" == b.aerodrome && (a += "type of airport: private<br/>"));b.iata && (a += "IATA-Code: " + b.iata + "<br/>");b.icao && (a += "ICAO-Code: " + b.icao + "<br/>");return a;
},
    fnContentNatural = function fnContentNatural(b) {
    var a = "";if (b.forest || b.wood) {
        if ("broadleaved" == b.leaf_type || "deciduous" == b.wood) a += "broadleaved<br/>";if ("needleleaved" == b.leaf_type || "coniferous" == b.wood) a += "needleleaved<br/>";if ("mixed" == b.leaf_type || "mixed" == b.wood) a += "mixed<br/>";"leafless" == b.leaf_type && (a += "leafless<br/>");"evergreen" == b.wood && (a += "evergreen<br/>");"palm" == b.wood && (a += "palm<br/>");"nipa_palm" == b.wood && (a += "nipa palm<br/>");"eucalypt" == b.wood && (a += "eucalypt<br/>");if ("filao" == b.wood || "casuarina" == b.wood) a += "casuarina<br/>";
    }if ("tree" == b.natural && (!b["genus:de"] && !b["species:de"] && b.leaf_type && (a = "broadleaved" == b.leaf_type || "deciduous" == b.leaf_type || "broadleafed" == b.leaf_type ? a + "broad-leaved<br/>" : a + "conifer<br/>"), b.genus && (a += b.genus + "<br/>"), b["genus:de"] && (a += b["genus:de"] + "<br/>"), b.species && (a += b.species + "<br/>"), b["species:de"] && (a += b["species:de"] + "<br/>"), "landmark" == b.denotation && (a += "landmark<br/>"), "natural_monument" == b.denotation || "yes" == b.monument)) a += "natural monument<br/>";"manger" == b["feeding:type"] && (a += "manger:rack for fodder<br/>");"automated" == b["feeding:type"] && (a += "automated<br/>");if (b["feeding:for"]) switch (b["feeding:for"]) {case "sheep":
            a += "animal: sheep<br/>";break;case "horse":
            a += "animal: horse<br/>";break;case "cow":
            a += "animal: cow<br/>";break;case "rabbit":
            a += "animal: rabbit<br/>";break;case "bunny":
            a += "animal: bunny<br/>";break;
        case "cat":
            a += "animal: cat </br>";break;case "swan":
            a += "animal: swan </br>";break;case "guinea pig":
            a += "animal: guinea pig </br>";break;case "donkey":
            a += "animal: donkey </br>";break;case "squirrel":
            a += "animal: squirrel </br>";break;case "pig":
            a += "animal: pig </br>";break;case "deer":
            a += "animal: deer </br>";break;case "guinea pig":
            a += "animal: guinea pig </br>";break;case "monkey":
            a += "animal: monkey </br>";break;case "camel":
            a += "animal: camel </br>";break;case "goat":
            a += "animal: goat </br>";break;case "hamster":
            a += "animal: hamster </br>";break;case "alpaca":
            a += "animal: alpaca </br>";break;default:
            a += "animal: unknown<br/>";}if (b["feeding:fodder"]) switch (b["feeding:fodder"]) {case "hay":
            a += "feed with: hay</br>";break;case "grain":
            a += "feed with: grain</br>";break;case "corn":
            a += "feed with: corn</*br>";break;default:
            a += "feed with: unknown</br>";}"volcano" == b.natural && "active" == b.status && (a += "active volcano<br/>");"volcano" == b.natural && "dormant" == b.status && (a += "dormant volcano<br/>");"volcano" == b.natural && "extinct" == b.status && (a += "extinct volcano<br/>");"volcano" == b.natural && "stratovolcano" == b.type && (a += "type of volcanism:stratovolcano<br/>");"volcano" == b.natural && "shield" == b.type && (a += "type of volcanism:shield<br/>");"volcano" == b.natural && "scoria" == b.type && (a += "type of volcanism:scoria<br/>");return a;
},
    fnContentProtectedArea = function fnContentProtectedArea(b) {
    var a = "",
        c = "";"protected_area" == b.boundary && (b.protect_class && (c = b.protect_class), b.protect_id && (c = b.protect_id), "1" == c && (a = "description: Strict Nature Reserve, Wilderness Area<br/>"), "2" == c && (a = "description: National Park<br/>"), "3" == c && (a = "description: Natural Monument or Feature<br/>"), "4" == c && (a = "description: Habitat/Species Management Area<br/>"), "5" == c && (a = "description: Protected Landscape/ Seascape<br/>"), "6" == c && (a = "description: Protected area with sustainable use of natural resources<br/>"), "7" == c && (a = "description: nature-feature area<br/>"), "97" == c && (a = "description: protected by continental agreements<br/>"), "98" == c && (a = "description: protected by interstate- or international conventions<br/>"), "99" == c && (a = "other continental or international national protected areas <br/>"), "21" == c && (a = "description: Community life: religious, sacred areas, associative locations, recreation<br/>"), "22" == c && (a = "description: Cultural assets (cultural assets and - efforts, districts historical heritage, monument conservation)<br/>"), "23" == c && (a = "description: Protection in favor of economics<br/>"), "24" == c && (a = "description: Political protection<br/>"), "25" == c && (a = "description: Military areas (military refuges, test area)<br/>"), "26" == c && (a = "description: Historic: for colonial-stuff and protectorates.<br/>"), "29" == c && (a = "description: other social protected areas<br/>"), "11" == c && (a = "description: soil: crop yield, erosion protection, ...<br/>"), "12" == c && (a = "description: water: water protection area, fresh water, drinking water, springs, ...<br/>"), "13" == c && (a = 'description: climate and -air: gasper supply/cold air, ...for emission-, immission control in OSM existent, see "Low Emission Zone" (LEZ)<br/>'), "14" == c && (a = "description: species: no fishing, protected for fishery, protected for hunting, plants, ...<br/>"), "15" == c && (a = "description: location condition: floodwater retention area, protection forest, grazing land, ...<br/>"), "16" == c && (a = 'description: longtime hazard area: contamination, earth-moving area, "problem sites" ...<br/>'), "19" == c && (a = "description: other national resources protected areas<br/>"));return a;
},
    fnContentLanduse = function fnContentLanduse(b) {
    var a = "";"quarry" == b.landuse && b.resource && (a += "Resource: " + b.resource + "<br/>");"open_stable" == b["animal_keeping:type"] && (a += "open stable<br/>");"field_shelter" == b["animal_keeping:type"] && (a += "field shelter<br/>");"paddock" == b["animal_keeping:type"] && (a += "paddock<br/>");b.animal_keeping && (a += "animals: horses<br/>");return a;
},
    fnMessstation = function fnMessstation(b) {
    var a = "";"yes" == b["monitoring:water_level"] && (a += "water level<br/>");"yes" == b["monitoring:seismic_activity"] && (a += "seismic activity<br/>");"yes" == b["monitoring:tide_gauge"] && (a += "tide gauge<br/>");"yes" == b["monitoring:weather"] && (a += "weather<br/>");"yes" == b["monitoring:air_quality"] && (a += "air quality<br/>");return a;
},
    fnContentRoute = function fnContentRoute(b) {
    var a = "";b.route && ("yes" == b.roundtrip && (a += "roundtrip<br/>"), b.length && (a += "length: " + b.length + "<br/>"), b.distance && (a += "distance: " + b.distance + "<br/>"), b.symbol && (a += "symbol: " + b.symbol + "<br/>"));return a;
},
    fnContentPetrol = function fnContentPetrol(b) {
    var a = "";"fuel" == b.amenity && ("yes" == b["fuel:biodiesel"] && (a += "biodiesel<br/>"), "yes" == b["fuel:e85"] && (a += "e85<br/>"), "yes" == b["fuel:e10"] && (a += "e10<br/>"), "yes" == b["fuel:lpg"] && (a += "lpg<br/>"), "yes" == b["fuel:cng"] && (a += "cng<br/>"), "diesel" == b.fuel && (a += "diesel<br/>"), "lpg" == b.fuel && (a += "lpg<br/>"), "yes" == b["fuel:octane_95"] && (a += "octane 95<br/>"), "yes" == b["fuel:octane_98"] && (a += "octane 98<br/>"), "yes" == b["fuel:octane_100"] && (a += "octane 100<br/>"), "yes" == b["fuel:octane_102"] && (a += "octane 102<br/>"), "yes" == b["fuel:diesel"] && (a += "diesel<br/>"), "yes" == b["fuel:electricity"] && (a += "charging station / loading station<br/>"));return a;
},
    fnContentHistoric = function fnContentHistoric(b) {
    var a = "";if ("archaeological_site" == b.historic && b.site_type) switch (b.site_type) {case "megalith":
            a += "megalith<br/>";break;case "bigstone":
            a += "bigstone<br/>";break;case "tumulus":
            a += "tumulus<br/>";break;case "fortification":
            a += "fortification<br/>";break;default:
            a += "unknown<br/>";}return a;
},
    fnContentBarriers = function fnContentBarriers(b, a) {
    var c = "";if ("wall" == b.barrier || "bollard" == b.barrier) b.material && (c += "material: " + translate(b.material) + "<br/>");return c;
},
    fnContentTourism = function fnContentTourism(b) {
    var a = "";if ("camp_site" == b.tourism) {
        "yes" == b.dog && (a += "dogs allowed<br/>");"no" == b.dog && (a += "dogs forbidden<br/>");b.stars && (a += b.stars + "stars<br/>");b.caravans && (a += "caravan sites<br/>");if ("yes" == b.openfire || "yes" == b.fireplace) a += "Thers is an openfire. <br/>";"yes" == b.washing_machine && (a += "washing machine<br/>");"yes" == b.dryer && (a += "dryer<br/>");"yes" == b.group_only && (a += "use for groups only<br/>");"reception" == b.camp_site && (a += "reception available<br/>");
    }"information" == b.tourism && "map" == b.information && ("topo" == b.map_type && (a += "topo</br>"), "street" == b.map_type && (a += "street</br>"), "scheme" == b.map_type && (a += "scheme</br>"), "toposcope" == b.map_type && (a += "toposcope</br>"));"information" == b.tourism && "map" == b.information && ("site" == b.map_size && (a += "map of site</br>"), "city" == b.map_size && (a += "city map</br>"), "region" == b.map_size && (a += "map of region</br>"));"geology" == b.board_type && (a += "geologic information<br/>");"history" == b.board_type && (a += "historic information<br/>");"nature" == b.board_type && (a += "information about nature<br/>");"notice" == b.board_type && (a += "general information<br/>");"plants" == b.board_type && (a += "information about plants<br/>");
    "wildlife" == b.board_type && (a += "information about wildlife<br/>");return a;
},
    fnContentAmenity = function fnContentAmenity(b) {
    var a = "";"boat_sharing" == b.amenity && (a += b.boattype + "<br/>");"embassy" == b.amenity && (a += b.country + "<br/>");if (b.vending) switch (b.vending) {case "admission_tickets":
            a += "tickets<br/>";break;case "animal_feed":
            a += "animal feed<br/>";break;case "books":
            a += "books<br/>";break;case "candles":
            a += "candles<br/>";break;case "cigarettes":
            a += "cigarettes<br/>";break;case "condoms":
            a += "condoms<br/>";break;case "drinks":
            a += "drinks<br/>";break;case "first_aid":
            a += "first aid articles<br/>";break;case "fishing_tackle":
            a += "fishing tackle<br/>";break;case "flowers":
            a += "flowers<br/>";break;case "ice_cream":
            a += "ice cream<br/>";break;case "laundry_detergent":
            a += "laundry detergent<br/>";break;case "newspapers":
            a += "newspapers<br/>";break;case "SIM_cards":
            a += "sIM-cards<br/>";break;case "sweets":
            a += "sweets<br/>";break;case "parcel_pickup":
            a += "parcel pickup<br/>";break;case "ice_cubes":
            a += "ice cubes<br/>";break;case "public_transport_tickets":
            a += "public transport tickets<br/>";break;case "parking_ticket":
            a += "parking tickets<br/>";break;case "sex_toys":
            a += "sex toys<br/>";break;case "stamps":
            a += "stamps<br/>";break;case "toll":
            a += "toll<br/>";break;case "umbrellas":
            a += "umbrellas<br/>";break;default:
            a += "content unknown<br/>";}"post_box" == b.amenity && (b.collection_times && (a += "collection times: " + b.collection_times + "<br/>"), "yes" == b.drive_through && (a += "accessible by car. <br/>"));return a;
},
    fnContentStorage = function fnContentStorage(b) {
    var a = "";if ("storage_tank" == b.man_made) {
        if (b.content) {
            var c = b.content;switch (c) {case "fuel":
                    c = "fuel";break;case "oil":
                    c = "oil";break;case "gas":
                    c = "gas";break;case "slurry":
                    c = "slurry";break;case "cement":
                    c = "cement";break;case "water":
                    c = "water";break;case "manure":
                    c = "manure";break;case "silage":
                    c = "silage";}a += "content: " + c + "<br/>";
        }if (b.contents) {
            c = b.contents;switch (c) {case "fuel":
                    c = "fuel";break;case "oil":
                    c = "oil";break;case "gas":
                    c = "gas";break;case "slurry":
                    c = "slurry";break;case "cement":
                    c = "cement";break;case "water":
                    c = "water";
                    break;case "manure":
                    c = "manure";break;case "silage":
                    c = "silage";}a += "content: " + c + "<br/>";
        }
    }b.storage && ("gas" == b.storage && (a += "content: gas<br/>"), "oil" == b.storage && (a += "content: oil<br/>"));return a;
},
    fnContentInformationCity = function fnContentInformationCity(b) {
    var a = "";b["name:de"] && (a += "german name: " + b["name:de"] + "<br/>");if (1E4 <= b.population) if (b.population = "" + b.population, 3 < b.population.length) {
        var c = b.population.length % 3,
            d = 0 < c ? b.population.substring(0, c) : "";for (i = 0; i < Math.floor(b.population.length / 3); i++) {
            d = 0 == c && 0 == i ? d + b.population.substring(c + 3 * i, c + 3 * i + 3) : d + ("." + b.population.substring(c + 3 * i, c + 3 * i + 3));
        }a += "population: " + d + "<br/>";
    } else a += "population " + b.population + "<br/>";1E4 >= b.population && (a += "population: " + b.population + "<br/>");return a;
},
    fnContentEmergency = function fnContentEmergency(b) {
    var a = "";b.lifeboat && ("inshore" == b.lifeboat ? a += "application: inshore<br/>" : "offshore" == b.lifeboat && (a += "application: offshore<br/>"));b["lifeboat:class"] && (a += "type of boat: " + b["lifeboat:class"] + "<br/>");if (b["siren:type"]) {
        var c = b["siren:type"];
        switch (c) {case "mechanical":
                c = "mechanical";break;case "electronic":
                c = "electronic";break;case "pneumatic":
                c = "pneumatic";break;case "electromechanic":
                c = "electromechanic";}a += "Typ: " + c + "<br/>";
    }if (b["siren:purpose"]) {
        c = b["siren:purpose"];switch (c) {case "air_raid":
                c = "air raid";break;case "tornado":
                c = "tornado";break;case "storm":
                c = "storm";break;case "civil_defense":
                c = "civil defence";break;case "fire":
                c = "fire";}a += "use: " + c + "<br/>";
    }b["siren:model"] && (a += "model: " + b["siren:model"] + "<br/>");b["siren:range"] && (a += "range of siren: " + b["siren:range"] + "<br/>");return a;
},
    fnContentCuisine = function fnContentCuisine(b) {
    var a = "";if (b.cuisine) {
        var c = "",
            a = ("supermarket" == b.shop || "convenience" == b.shop || "deli" == b.shop || "organic" == b.shop) && "restaurant" != b.amenity ? a + "specialties: " : a + "cuisine: ";"arabic" == b.cuisine && (c += "arabic<br/>");"italian" == b.cuisine && (c += " italian<br/>");"international" == b.cuisine && (c += " international<br/>");"regional" == b.cuisine && (c += " regional<br/>");"chinese" == b.cuisine && (c += " chinese<br/>");"greek" == b.cuisine && (c += " greek<br/>");"african" == b.cuisine && (c += " african<br/>");"german" == b.cuisine && (c += " german<br/>");"mexican" == b.cuisine && (c += " mexican<br/>");"french" == b.cuisine && (c += " french<br/>");"indian" == b.cuisine && (c += " indian<br/>");"iranian" == b.cuisine && (c += " iranian<br/>");"lebanese" == b.cuisine && (c += " lebanese<br/>");"thai" == b.cuisine && (c += " thai<br/>");"balkan" == b.cuisine && (c += " balkan<br/>");"turkish" == b.cuisine && (c += " turkish<br/>");"bavarian" == b.cuisine && (c += " bavarian<br/>");"czech" == b.cuisine && (c += " czech<br/>");"portuguese" == b.cuisine && (c += " portuguese<br/>");"spanish" == b.cuisine && (c += " spanish<br/>");"japanese" == b.cuisine && (c += " japanese<br/>");"fish" == b.cuisine && (c += " fish<br/>");"brazilian" == b.cuisine && (c += " brazilian<br/>");"asian" == b.cuisine && (c += " asian<br/>");"mediterranean" == b.cuisine && (c += "mediterranean<br/>");"seafood" == b.cuisine && (c += " seafood<br/>");"ice_cream" == b.cuisine && (c += " ice cream<br/>");"burger" == b.cuisine && (c += " burger<br/>");"frozen_yogurt" == b.cuisine && (c += " frozen yogurt<br/>");
        "" == c && (c = b.cuisine + "<br/>");a += c;
    }return a;
},
    fnContentShipping = function fnContentShipping(b) {
    var a = "";b.harbour = "yes";"yes" == b["access:tide"] && (a += "Access restricted by tide</br>");"yes" == b["access:swell"] && (a += "access restricted by swell</br>");"yes" == b["access:ice"] && (a += "access restricted by ice</br>");b.vhf_channel && (a += "UKW-Channel: " + b.vhf_channel + "</br>");b.mmsi && (a += "MMSI-Number: " + b.mmsi + "</br>");b["harbour:information"] && (a += "information :" + b["harbour:information"] + "</br>");"yes" == b.motorboat && (a += "motorboat allowed</br>");
    "no" == b.motorboat && (a += "motorboat prohibited </br>");b.CEMT && (a += "CEMT: " + b.CEMT + "</br>");"yes" == b.intermittent && (a += "river intermittent dried out</br>");"yes" == b.tidal && (a += "tidal influence the flow</br>");b.draft && (a += " driving depth of water: " + b.draft + " m</br>");if ("slipway" == b.leisure || "slipway" == b.harbour) "hand" == b.operating && (a += "operating: by hand<br/>"), "car" == b.operating && (a += "operating: by car, boat trailer<br/>"), "cable_winch" == b.operating && (a += "operating: with cable winch<br/>"), "travellift" == b.operating && (a += "operating: by travellift<br/>"), "crane" == b.man_made && (a += "by crane<br/>", b["crane:maxload"] && (a += "maxload: " + b["crane:maxload"] + "<br/>"), b["ship:maxdraft"] && (a += "maximum permissible draught: " + b["ship:maxdraft"] + "<br/>"), b["ship:maxlength"] && (a += "maximum permissible length of a ship: " + b["ship:maxlength"] + "<br/>")), "yes" == b.vehicle && (a += "accessible by vehicle<br/>");a += fnWreckInfo(b);if ("ferry" == b.route || "ferry_terminal" == b.amenity || "yes" == b.ferry) fahrzeit = b.duration, "" != fahrzeit && "undefined" != fahrzeit && null != fahrzeit && (a += "duration in hours : " + fahrzeit + "<br/>"), "yes" == b.motorcar && (a += "motorcars allowed<br/>"), "no" == b.motorcar && (a += "motorcars prohibited<br/>"), "no" == b.motor_vehicle && (a += "motor vehicles prohibited<br/>"), "yes" == b.motor_vehicle && (a += "motor vehicles allowed<br/>"), "yes" == b.vehicle && (a += "vehicles allowed<br/>"), "no" == b.vehicle && (a += "no vehicles<br/>"), "no" == b.bicycle && (a += "no bicycles<br/>"), "no" == b.bicycle && (a += "bicycles allowed<br/>"), "yes" == b.hgv && (a += "hgv allowed<br/>"), "no" == b.hgv && (a += "hgv prohibited<br/>"), "yes" == b.foot && (a += "pedestrian allowed<br/>"), "no" == b.foot && (a += "pedestrian prohibited <br/>"), "yes" == b.bicycle && (a += "cyclist allowed <br/>"), "no" == b.bicycle && (a += "cyclist prohibited <br/>"), "yes" == b["ferry:cable"] && (a += "cable ferry<br/>");if (b["seamark:light:1:colour"]) {
        var c = b["seamark:light:1:colour"];switch (c) {case "white":
                c = "white";break;case "red":
                c = "red";break;case "green":
                c = "green";break;case "blue":
                c = "blue";break;case "yellow":
                c = "yellow";break;case "amber":
                c = "amber";}a += "colour of light: " + c + "<br/>";
    }"lighthouse" == b.man_made && (b["seamark:light:1:character"] && (a += "light character: " + b["seamark:light:1:character"] + "<br/>"), b["seamark:light:1:period"] && (a += "period: " + b["seamark:light:1:period"] + "<br/>"), b["seamark:light:1:height"] && (a += "height: " + b["seamark:light:1:height"] + " m<br/>"), b["seamark:light:1:range"] && (a += "range: " + b["seamark:light:1:range"] + " sm<br/>"));if (b["seamark:light:colour"]) {
        c = b["seamark:light:colour"];switch (c) {case "white":
                c = "white";
                break;case "red":
                c = "red";break;case "green":
                c = "green";break;case "blue":
                c = "blue";break;case "yellow":
                c = "yellow";break;case "amber":
                c = "amber";}a += "colour of light: " + c + "<br/>";
    }"lighthouse" == b.man_made && (b["seamark:light:character"] && (a += "light character: " + b["seamark:light:character"] + "<br/>"), b["seamark:light:height"] && (a += "height: " + b["seamark:light:height"] + " m<br/>"), b["seamark:light:range"] && (a += "range: " + b["seamark:light:range"] + " sm<br/>"), b["seamark:light:period"] && (a += "period: " + b["seamark:light:period"] + "<br/>"));return a;
},
    fnContentHydrants = function fnContentHydrants(b) {
    var a = "";if ("fire_hydrant" == b.emergency) {
        var c = b["fire_hydrant:count"];"undefined" != c && null != c && "" != c && (a += "Number: " + c + "<br/>");c = b["fire_hydrant:diameter"];"undefined" != c && null != c && "" != c && (a += "Pipe diameter: " + c + " mm<br/>");c = b["fire_hydrant:pressure"];"undefined" != c && null != c && "" != c && (a = "suction" == c ? a + "Pressure in bar / Suction: Suction<br/>" : a + ("Pressure in bar / Suction: " + c + "<br/>"));c = b["fire_hydrant:position"];"undefined" != c && null != c && "" != c && ("lane" == c ? a += "Position: Lane<br/>" : "parking_lot" == c ? a += "Position: Parking Lot<br/>" : "sidewalk" == c ? a += "Position: Sidewalk<br/>" : "green" == c && (a += "Position: Green<br/>"));c = b.water_volume;"undefined" != c && null != c && "" != c && (a += "Volume: " + c + "<br/>");c = b["fire_hydrant:awwa_class"];"undefined" != c && null != c && "" != c ? a += "AWWA Class: " + c + "<br/>" : (c = b.flow_rate, "undefined" != c && null != c && "" != c && (a += "Flow rate: " + c + "<br/>"));c = b.water_source;"undefined" != c && null != c && "" != c && "main" != c && (a += "Water source: " + c + "<br/>");c = b["couplings:type"];"undefined" != c && null != c && "" != c && (a += "Couplings type: " + c + "<br/>");c = b["couplings:diameter"];"undefined" != c && null != c && "" != c && (a += "Couplings diameter: " + c + "<br/>");c = b["pillar:type"];"dry_barrel" === c && (a += "Pillar type: " + c + "<br/>");"fire_hydrant" === b["disused:emergency"] && (a += "Currently disused");"" == a && (a = "No details available.");
    }return a;
},
    fnContentStreetsTraffic = function fnContentStreetsTraffic(b) {
    var a = "";"yes" == b["red_turn:right"] && (a += "red turn: allowed to turn to the right<br/>");
    "no" == b["red_turn:right"] && (a += "red turn: prohibited to turn to the right<br/>");b.bridge && (b.height && (a += "height: " + b.height + " m<br/>"), b.length && (a += "length: " + b.length + " m<br/>"), b.bridge_ref && (a += "bridge ref: " + b.bridge_ref + "<br/>"), b.start_date && (a += "start date: " + b.start_date + "</br>;"), b.maxweight && (a += "maxweight: " + b.maxweight + " t</br>"));b.highway && "yes" == b.toll && (a += "toll highway<br/>");"yes" == b["toll:hgv"] && (a += "HGV toll<br/>");if (b.surface) {
        var c = b.surface,
            a = a + "surface: ";switch (c) {case "grass":
                a += "grass<br/>";break;case "paved":
                a += "paved<br/>";break;case "asphalt":
                a += "asphalt<br/>";break;case "cobblestone":
                a += "cobblestone<br/>";break;case "sett":
                a += "sett<br/>";break;case "concrete":
                a += "concrete<br/>";break;case "unpaved":
                a += "unpaved<br/>";break;case "paving_stones":
                a += "paving stones<br/>";break;case "compacted":
                a += "compacted<br/>";break;case "dirt":
                a += "dirt<br/>";break;case "fine_gravel":
                a += "fine gravel<br/>";break;case "grass_paver":
                a += "grass paver<br/>";break;case "gravel":
                a += "gravel<br/>";
                break;case "earth":
                a += "earth<br/>";break;case "ground":
                a += "ground<br/>";break;case "metal":
                a += "metal<br/>";break;case "mud":
                a += "mud<br/>";break;case "sand":
                a += "sand<br/>";break;case "wood":
                a += "wood<br/>";break;case "tartan":
                a += "tartan<br/>";break;case "artificial_turf":
                a += "artificial turf<br/>";break;case "clay":
                a += "clay<br/>";break;default:
                a += "unknown<br/>";}
    }"grade1" == b.tracktype && (a += "path surface: Solid. Usually a paved or heavily compacted hardcore surface.<br/>");"grade2" == b.tracktype && (a += "path surface: Mostly solid. Usually an unpaved track with surface of gravel mixed with a varying amount of sand, silt, and clay.<br/>");
    "grade3" == b.tracktype && (a += "path surface: Even mixture of hard and soft materials. Almost always an unpaved track.<br/>");"grade4" == b.tracktype && (a += "path surface: Mostly soft. Almost always an unpaved track prominently with soil/sand/grass, but with some hard materials, or compressed materials mixed in.<br/>");"grade5" == b.tracktype && (a += "path surface: Soft. Almost always an unpaved track lacking hard materials, uncompacted, with surface of soil/sand/grass.<br/>");"yes" == b.motorcycle && (a += "<br/>motorcyle allowed.<br/>");
    "no" == b.motorcycle && (a += "<br/>motorcycles prohibited.<br/>");"excellent" == b.trail_visibility && (a += "trail visibility: Unambiguous path or markers everywhere<br/>");"good" == b.trail_visibility && (a += "trail visibility: Next marker always visible, but sometimes has to be searched for.<br/>");"intermediate" == b.trail_visibility && (a += "trail visibility: Track mostly visible<br/>");"bad" == b.trail_visibility && (a += "trail visibility: Path sometimes invisible, route partly pathless<br/>");"horrible" == b.trail_visibility && (a += "trail visibility: Often pathless<br/>");"no" == b.trail_visibility && (a += "trail visibility: Mostly pathless<br/>");"hiking" == b.sac_scale && (a += "trail: Trail well cleared. (SAC Scale: T1 (yellow))</br>");"mountain_hiking" == b.sac_scale && (a += "trail: Trail with continuous line and balanced ascent (SAC Scale: T2 (red))</br>");"demanding_mountain_hiking" == b.sac_scale && (a += "trail: exposed sites may be secured with ropes or chains, possible need to use hands for balance (SAC Scale: T3 (red))</br>");"alphine_hiking" == b.sac_scale && (a += "trail: sometimes need for hand use to get ahead (SAC Scale: T4 (blue))</br>");"demanding_alphine_hiking" == b.sac_scale && (a += "trail: single plainly climbing up to second grade (SAC Scale: T5 (blue))</br>");"difficult_alpine_hiking" == b.sac_scale && (a += "trail: climbing up to second grade (SAC Scale: T6 (blue))</br>");b["mtb:name"] && (a += "cycleway :" + b["mtb:name"] + "</br>");"0" == b["mtb:scale"] && (a += "Mountainbikeroute: Very easy way - Gravel or packed earth. No particular difficulties. Mostly forest and meadow paths (highway=path). Sections with steps, rocks, or roots are not expected. Wide curves, easy to moderate slope. No special skills are needed to ride this. Easy to ride uphill.</br>Surface: solid and handy</br>Obstacles: no obstacles</br>Gradient: mild to moderate</br>Bends: wide</br>Driving skills: no special driving skills required</br>");
    "1" == b["mtb:scale"] && (a += "Mountainbikeroute: Smaller obstacles like roots and small stones. Erosion damage may increase difficulty. Soil may be loose in places. Tight turns, but no hairpin turns. Riding requires care and attention, but no special skill. Obstacles can be ridden over. Difficult to ride uphill.</br>Surface: loose surface possible, small roots and stones</br>Obstacles: small obstacles, water gutter, erosion damage</br>Gradient: < 40%</br>Bends: wide</br>Driving skills: basic driving skills required, obstacles can be passed over</br>");
    "2" == b["mtb:scale"] && (a += "Mountainbikeroute: Obstacles such as large rocks and stones. Soil is often loose.  Steps are expected. Wider hairpin turns, steepness of up to 70%. Requires some advanced riding skills. Only very skilled riders can go uphill on this.</br>Surface: surface usually not compacted, larger roots and stones.</br>Obstacles: plain steps and stairs</br>Gradient: < 70%</br>Bends: easy hairpins</br>Driving skills: advanced driving skills required</br>");"3" == b["mtb:scale"] && (a += "Mountainbikeroute: Many sections with large obstacles such as boulders and large roots. Many hairpin and off-balance turns. Slippery surface and talus sections may be found. The surface may be very slippery. Constant concentration and very good skills needed. Nearly impossible to ride uphill.</br>Surface: many large roots / rocks or slippery ground, loose scree</br>Obstacles: drags, hardly driveable steps</br>Gradient: >70%</br>Bends: bail like hairpins</br>Driving skills: perfect bike control with trial skills required, like moving the rear wheel only in hairpins</br>");
    "4" == b["mtb:scale"] && (a += "Mountainbikeroute: Very steep and difficult, with sections having large boulders and roots. Frequent loose debris. Very steep sections with very tight hairpin turns and high steps that will cause the chainring to hit the ground. Some trials techniques will be necessary. Nearly impossible to ride uphill.</br>Surface: many large roots / rocks or slippery ground, loose scree</br>Obstacles: drags, hardly driveable steps</br>Gradient: >70%</br>Bends: bail like hairpins</br>Driving skills: perfect bike control with trial skills required, like moving the rear wheel only in hairpins</br>");
    "5" == b["mtb:scale"] && (a += "Mountainbikeroute: Very steep and difficult with big boulder fields and debris, and landslides. Speed must be carried for counter-ascents. If at all only short passages are available for accelerating and braking. Fallen trees may make very steep passages even more difficult. Very few Mountainbikers can actually ride at this level. Most will have to push.</br>Surface: counter-ascents / rocks or slippery ground, loose scree / path is rather a Alpine hiking (>T4) path</br>Obstacles: drags, combinations of hardly driveable steps</br>Gradient: >70%</br>Bends: bail like hairpins with obstacles</br>Driving skills: excellent bike control with special trial skills required, moving the front and rear wheel is limited</br>");
    "6" == b["mtb:scale"] && (a += "Mountainbikeroute: Classify ways with 6 that are not rideable at all for a mtbiker. E.g. Chains or stemples (metal rungs) on a via ferrata or simply unsecured alpine pathes that are not even partly rideable for the very best mtbikers (using trial techniques). Steepness is often >45\xB0. If used for single points, then this highlights exceptionally difficult spots. Often spotting is impossible and falling may be lethal.</br>Surface: Path is rather a Alpine hiking (T5 or T6) path or bare rock without visible path.</br>Obstacles: Steps over 2m, rock faces,...</br>Gradient: >100%</br>Bends: no bends can be distinguished as such.</br>Driving skills: only the very best trial specialists or vertriders will try to ride these spots. Walking the place first to find a way to clear is needed.</br>");
    "10" == b.maxspeed && (a += 'traffic-calmed sector: maxspeed 10 Km/h and "right over left"</br>');"30" == b.maxspeed && (a += 'traffic-calmed sector: "right over left" and maxspeed 30 Km/h</br>');"50" == b.maxspeed && (a += "maxspeed 50 Km/h</br>");"70" == b.maxspeed && (a += "maxspeed 50 Km/h</br>");"80" == b.maxspeed && (a += "maxspeed 80 Km/h</br>");"100" == b.maxspeed && (a += "maxspeed  100 Km/h</br>");"no" == b.overtaking && (a += "No overtaking!</br>");"yes" == b.noexit && (a += "noexit</br>");"yes" == b.oneway && (a += "oneway</br>");"designated" == b.priority_road && (a += "priority road designated</br>");"end" == b.priority_road && (a += "priority road ends</br>");"emergency_bay" == b.highway && (a += "emergency bay</br>");"yes" == b.traffic_calming && (a += "traffic calming</br>");"bump" == b.traffic_calming && (a += "bump</br>");"chicane" == b.traffic_calming && (a += "chicane</br>");"choker" == b.traffic_calming && (a += "choker</br>");"cushion" == b.traffic_calming && (a += "cushion</br>");"hump" == b.traffic_calming && (a += "hump</br>");"island" == b.traffic_calming && (a += "island</br>");
    "rumble_strip" == b.traffic_calming && (a += "rumble strip</br>");"table" == b.traffic_calming && (a += "table</br>");if ("parking" == b.amenity && ("yes" == b.fee && (a += "fee required<br/>"), c = b["capacity:women"], "" != c && "no" != c && null != c)) {
        var d = "unkown";"yes" != c && (d = c);a += "ladies parking spaces (numbers: " + d + ") <br/>";
    }b.park_ride && ("bus" == b.park_ride && (a += "bus connection<br/>"), "tram" == b.park_ride && (a += "tram connection<br/>"), "unknown" == b.park_ride && (a += "park ride unkown<br/>"));b["railway:position"] && (a += "railway<br/>position: " + b["railway:position"] + "<br/>");b.uic_ref && (a += "UIC: " + b.uic_ref + "<br/>");return a;
},
    fnContentSports = function fnContentSports(b) {
    var a = "";"9pin" == b.sport && (a += "possible sport : 9pin<br/>");"10pin" == b.sport && (a += "possible sport : 10pin<br/>");"american_football" == b.sport && (a += "possible sport : american football<br/>");"aikido" == b.sport && (a += "possible sport : aikido<br/>");"archery" == b.sport && (a += "possible sport : archery<br/>");"athletics" == b.sport && (a += "possible sport : athletics<br/>");"australian_football" == b.sport && (a += "possible sport : australian football<br/>");"base" == b.sport && (a += "possible sport : base<br/>");"badminton" == b.sport && (a += "possible sport : badminton<br/>");"baseball" == b.sport && (a += "possible sport : baseball<br/>");"basketball" == b.sport && (a += "possible sport : basketball<br/>");"beachvolleyball" == b.sport && (a += "possible sport : beachvolleyball<br/>");"bmx" == b.sport && (a += "possible sport : bmx<br/>");"boules" == b.sport && (a += "possible sport : boules<br/>");"boule" == b.sport && (a += "possible sport : boule<br/>");
    "bowls" == b.sport && (a += "possible sport : bowls<br/>");"boxing" == b.sport && (a += "possible sport : boxing<br/>");"canadian_football" == b.sport && (a += "possible sport : canadian football<br/>");"canoe" == b.sport && (a += "possible sport : canoe<br/>");"chess" == b.sport && (a += "possible sport : chess<br/>");"cliff_diving" == b.sport && (a += "possible sport : cliff diving<br/>");"climbing" == b.sport && (a += "possible sport : climbing<br/>");"climbing_adventure" == b.sport && (a += "possible sport : adventure climbing<br/>");"cricket" == b.sport && (a += "possible sport : cricket<br/>");"cricket_nets" == b.sport && (a += "possible sport : cricket nets<br/>");"croquet" == b.sport && (a += "possible sport : croquet<br/>");"curling" == b.sport && (a += "possible sport : curling<br/>");"cycling" == b.sport && (a += "possible sport : cycling<br/>");if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";"dog_racing" == b.sport && (a += "possible sport : dog racing<br/>");"fencing" == b.sport && (a += "possible sport : fencing<br/>");"equestrian" == b.sport && (a += "possible sport : equestrian<br/>");
    "football" == b.sport && (a += "possible sport: american football<br/>");"free_flying" == b.sport && (a += "possible sport: free flying<br/>");"gaelic_games" == b.sport && (a += "possible sport: gaelic games<br/>");"golf" == b.sport && (a += "possible sport: golf<br/>");"gymnastics" == b.sport && (a += "possible sport: gymnastik<br/>");"hockey" == b.sport && (a += "possible sport: hockey<br/>");"horseshoes" == b.sport && (a += "possible sport: horseshoes<br/>");"horse_racing" == b.sport && (a += "possible sport: horse racing<br/>");"ice_stock" == b.sport && (a += "possible sport: ice stock<br/>");"judo" == b.sport && (a += "possible sport: judo<br/>");"karting" == b.sport && (a += "possible sport: karting<br/>");"kitesurfing" == b.sport && (a += "possible sport: kitesurfing<br/>");"korfball" == b.sport && (a += "possible sport: korfball<br/>");"motor" == b.sport && (a += "possible sport: motor<br/>");"multi" == b.sport && (a += "possible sport: multi<br/>");"obstacle_course" == b.sport && (a += "possible sport: obstacle course<br/>");"orienteering" == b.sport && (a += "possible sport: orienteering<br/>");
    "paddle_tennis" == b.sport && (a += "possible sport: paddle-tennis<br/>");"paragliding" == b.sport && (a += "possible sport: paragliding<br/>");"Pelota" == b.sport && (a += "possible sport: Pelota<br/>");"rasquet" == b.sport && (a += "possible sport: racquet<br/>");"rowing" == b.sport && (a += "possible sport: rowing<br/>");"rugby_league" == b.sport && (a += "possible sport: rugby league<br/>");"rugby_union" == b.sport && (a += "possible sport: rugby union<br/>");"running" == b.sport && (a += "possible sport: running<br/>");"scuba_diving" == b.sport && (a += "possible sport: scuba diving<br/>");"shooting" == b.sport && (a += "possible sport: shooting<br/>");"skating" == b.sport && (a += "possible sport: skating<br/>");"skateboard" == b.sport && (a += "possible sport: skateboard<br/>");"skiing" == b.sport && (a += "possible sport: skiing<br/>");"soccer" == b.sport && (a += "possible sport: soccer<br/>");"surfing" == b.sport && (a += "possible sport: surfing<br/>");"swimming" == b.sport && (a += "possible sport: swimming<br/>");"table_tennis" == b.sport && (a += "possible sport: table tennis<br/>");
    "taekwondo" == b.sport && (a += "possible sport: taekwondo<br/>");"team_handball" == b.sport && (a += "possible sport: team handball<br/>");"tennis" == b.sport && (a += "possible sport: tennis<br/>");"toboggan" == b.sport && (a += "possible sport: toboggan<br/>");"volleyball" == b.sport && (a += "possible sport: volleyball<br/>");"water_ski" == b.sport && (a += "possible sport: water ski<br/>");"weightlifting" == b.sport && (a += "possible sport: weightlifting<br/>");"wrestling" == b.sport && (a += "possible sport: wrestling<br/>");return a;
};
function fnArztInfo(b) {
    var a = "",
        c = "",
        d = b["healthcare:speciality"];"" != d && ("general" == d && (c += "general<br/>"), "allergology" == d && (c += "allergology<br/>"), "anaesthetics" == d && (c += "anaesthetics<br/>"), "biochemistry" == d && (c += "biochemistry<br/>"), "biological_haematology" == d && (c += "biological haematology<br/>"), "biology" == d && (c += "biology<br/>"), "cardiology" == d && (c += "cardiology<br/>"), "cardiac_surgery" == d && (c += "cardiac surgery<br/>"), "child_psychiatry" == d && (c += "child psychiatry<br/>"), "dental_oral_maxillo_facial_surgery" == d && (c += "dental-, oral-, maxillo- and facial-surgery<br/>"), "dermatology" == d && (c += "dermatology<br/>"), "dermatovenereology" == d && (c += "dermatovenereology<br/>"), "diagnostic_radiology" == d && (c += "diagnostic radiology<br/>"), "emergency" == d && (c += "emergency<br/>"), "endocrinology" == d && (c += "endocrinology<br/>"), "gastroenterological_surgery" == d && (c += "gastroenterological surgery<br/>"), "gastroenterology" == d && (c += "gastroenterology<br/>"), "geriatrics" == d && (c += "geriatrics<br/>"), "gynaecology" == d && (c += "gynaecology<br/>"), "haematology" == d && (c += "haematology<br/>"), "hepatology" == d && (c += "hepatology<br/>"), "immunology" == d && (c += "immunology<br/>"), "infectious_diseases" == d && (c += "infectious diseases<br/>"), "intensive" == d && (c += "intensive<br/>"), "internal" == d && (c += "internal<br/>"), "maxillofacial_surgery" == d && (c += "maxillofacial surgery<br/>"), "nephrology" == d && (c += "nephrology<br/>"), "neurology" == d && (c += "neurology<br/>"), "neurophysiology" == d && (c += "neurophysiology<br/>"), "neuropsychiatry" == d && (c += "neuropsychiatry<br/>"), "neurosurgery" == d && (c += "neurosurgery<br/>"), "nuclear" == d && (c += "nuclear<br/>"), "occupational" == d && (c += "occupational <br/>"), "oncology" == d && (c += "oncology<br/>"), "ophthalmology" == d && (c += "ophthalmology<br/>"), "orthopaedics" == d && (c += "orthopaedics<br/>"), "otolaryngology" == d && (c += "otolaryngology<br/>"), "paediatric_surgery" == d && (c += "paediatric surgery<br/>"), "paediatrics" == d && (c += "paediatrics<br/>"), "palliative" == d && (c += "palliative<br/>"), "physiatry" == d && (c += "physiatry<br/>"), "plastic_surgery" == d && (c += "plastic surgery<br/>"), "proctology" == d && (c += "proctology<br/>"), "psychiatry" == d && (c += "psychiatry<br/>"), "pulmonology" == d && (c += "pulmonology<br/>"), "radiology" == d && (c += "radiology<br/>"), "radiotherapy" == d && (c += "radiotherapy<br/>"), "rheumatology" == d && (c += "rheumatology<br/>"), "stomatology" == d && (c += "stomatology<br/>"), "surgery" == d && (c += "surgery<br/>"), "surgical_oncology" == d && (c += "surgical oncology<br/>"), "thoracic_surgery" == d && (c += "thoracic surgery<br/>"), "transplant" == d && (c += "transplant<br/>"), "trauma" == d && (c += "trauma<br/>"), "tropical" == d && (c += "tropical<br/>"), "urology" == d && (c += "urology<br/>"), "vascular_surgery" == d && (c += "vascular surgery<br/>"), "venereology" == d && (c += "venereology<br/>"), "acupuncture" == d && (c += "acupuncture<br/>"), "naturopathy" == d && (c += "naturopathy<br/>"), "chiropractic" == d && (c += "chiropractic <br/>"), "homeopathy" == d && (c += "homeopathy<br/>"), "osteopathy" == d && (c += "osteopathy<br/>"));"" != b.health_specialty && ("yes" == b["health_specialty:family_medicine"] && (c += "family medicine<br/>"), "yes" == b["health_specialty:emergency_medicine"] && (c += "emergency medicine<br/>"), "yes" == b["health_specialty:anaesthesiology"] && (c += "anaesthesiology<br/>"), "yes" == b["health_specialty:dermatology"] && (c += "dermatology<br/>"), "yes" == b["health_specialty:ear_nose_throat"] && (c += "ear, nose, throat (ENT specialist)<br/>"), "yes" == b["health_specialty:occupational_medicine"] && (c += "occupational medicine<br/>"), "yes" == b["health_specialty:internal_medicine"] && (c += "internal medicine<br/>"), "yes" == b["health_specialty:neurology"] && (c += "neurology<br/>"), "yes" == b["health_specialty:ophthalmology"] && (c += "ophthalmology<br/>"), "yes" == b["health_specialty:palliative_medicine"] && (c += "palliative medicine<br/>"), "yes" == b["health_specialty:psychiatry"] && (c += "psychiatry<br/>"), "yes" == b["health_specialty:gynaecology"] && (c += "gynaecology<br/>"), "yes" == b["health_specialty:urology"] && (c += "urology<br/>"), "yes" == b["health_specialty:pain_medicine"] && (c += "pain medicine<br/>"), "yes" == b["health_specialty:environmental_medicine"] && (c += "environmental medicine<br/>"), "yes" == b["health_specialty:intensive_care_medicin"] && (c += "intensive care medicin<br/>"), "yes" == b["health_specialty:paediatrics"] && (c += "paediatrics<br/>"), "yes" == b["health_specialty:physiatry"] && (c += "physiatry<br/>"), "yes" == b["health_specialty:radiology"] && (c += "radiology<br/>"), "yes" == b["health_specialty:general"] && (c += "general<br/>"), "yes" == b["health_specialty:occupational_therapy"] && (c += "occupational therapy<br/>"), "yes" == b["health_specialty:pulmonology"] && (c += "pulmonology<br/>"), "yes" == b["health_specialty:acupuncture"] && (c += "acupuncture<br/>"), "yes" == b["health_specialty:orthopaedics"] && (c += "orthopaedics<br/>"), "yes" == b["health_specialty:chiropractic"] && (c += "chiropractic<br/>"), "yes" == b["health_specialty:sports_medicine"] && (c += "sports medicine<br/>"));"" != c && (a = a + "subjects: " + ('<div class="c4g_open_text">' + c + "</div>"));return a;
}
function fnKraftwerkInfo(b) {
    var a = "";if (b["generator:method"]) {
        a += "method of generation: ";switch (b["generator:method"]) {case "combustion":
                a += "combustion";break;case "thermal":
                a += "thermal";break;case "pumping":
                a += "pumping";break;case "photovoltaic":
                a += "photovoltaic";break;case "gasification":
                a += "gasification";break;case "anaerobic_digestion":
                a += "anaerobic digestion";break;case "pyrolysis":
                a += "pyrolysis";break;case "fission":
                a += "fission";break;case "fusion":
                a += "fusion";break;default:
                a += "unknown<br/>";}a += "<br/>";
    }if (b.power_source) {
        a += "power source: ";switch (b.power_source) {case "photovoltaic":
                a += "photovoltaic";break;default:
                a += "unknown<br/>";}a += "<br/>";
    }b["generator:output:electricity"] && (a += "electricity generation: " + b["generator:output:electricity"] + "<br/>");b["generator:output:heat"] && (a += "heat generation: " + b["generator:output:heat"] + "<br/>");b["generator:output:cold"] && (a += "cold generation: " + b["generator:output:cold"] + "<br/>");b["generator:output"] && (a += "output: " + b["generator:output"] + "<br/>");
    b["generator:output:hot_air"] && (a += "hot-air generation: " + b["generator:output:hot_air"] + "<br/>");b["generator:output:cold_water"] && (a += "cold water generation: " + b["generator:output:cold_water"] + "<br/>");b["generator:output:cold_air"] && (a += "cold air generation: " + b["generator:output:cold_air"] + "<br/>");b["generator:output:compressed_air"] && (a += "compressed air generation: " + b["generator:output:compressed_air"] + "<br/>");b["generator:output:steam"] && (a += "steam generation: " + b["generator:output:steam"] + "<br/>");b["generator:output:vacuum"] && (a += "vacuum generation: " + b["generator:output:vacuum"] + "<br/>");b["generator:output:battery_charging"] && (a += "battery charging: " + b["generator:output:battery_charging"] + "<br/>");"PWR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-1" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-2" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-3" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-4" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-5" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-6" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"PHWR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"GCR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"FBR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"RBMK-1000" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"RBMK-1500" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"VVER" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"CANDU" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"CPR-1000" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"EPR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
    "tokamak" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"stellarator" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"ICF" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"cold-fusion" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"wind_turbine" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "generator method: horizontal axis wind turbine<br/>");"wind_turbine" == b["generator:method"] && "vertical_axis" == b["generator:type"] && (a += "generator method: vertical axis wind turbine<br/>");"francis_turbine" == b["generator:type"] && (a += "generator type: francis-turbine<br/>");"kaplan_turbine" == b["generator:type"] && (a += "generator type: kaplan-turbine<br/>");"pelton_turbine" == b["generator:type"] && (a += "generator type: pelton-turbine<br/>");"stream" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "generator method: horizontal axis sea current power station<br/>");"stream" == b["generator:method"] && "vertical_axis" == b["generator:type"] && (a += "generator type: vertical axis sea current power station<br/>");"steam_turbine" == b["generator:type"] && (a += "generator type: steam turbine<br/>");"heat_pump" == b["generator:type"] && (a += "generator type: heat pump<br/>");"solar_thermal_collector" == b["generator:type"] && (a += "generator type: solar thermal collector<br/>");"solar_photovoltaic_panel" == b["generator:type"] && (a += "generator type: solar photovoltaic panel<br/>");"steam_generator" == b["generator:type"] && (a += "generator type: steam generator<br/>");"gas_turbine" == b["generator:type"] && (a += "generator type: gas turbine<br/>");"combined_cycle" == b["generator:type"] && (a += "generator type: combined cycle<br/>");"reciprocating_engine" == b["generator:type"] && (a += "generator type: reciprocating engine<br/>");return a;
}
function fnWertstoffinfo(b) {
    var a = "";if ("container" == b.recycling_type || "centre" == b.recycling_type || "recycling" == b.amenity) "yes" == b["recycling:glass"] && (a += "glass container</br>"), "yes" == b["recycling:shoes"] && (a += "shoe container</br>"), "yes" == b["recycling:cooking_oil"] && (a += "recycling of cooking oil</br>"), "yes" == b["recycling:paper"] && (a += "recycling of paper</br>"), "yes" == b["recycling:engine_oil"] && (a += "recycling of engine oil</br>"), "yes" == b["recycling:clothes"] && (a += "recycling of clothes</br>"), "yes" == b["recycling:car_batteries"] && (a += "recycling of car batteries</br>"), "yes" == b["recycling:cans"] && (a += "recycling of cans</br>"), "yes" == b["recycling:scrap_metal"] && (a += "recycling of scrap metal</br>"), "yes" == b["recycling:plastic"] && (a += "recycling of plastic</br>"), "yes" == b["recycling:batterries"] && (a += "recycling of batterries</br>"), "yes" == b["recycling:plastic_bottles"] && (a += "recycling of plastic bottles</br>"), "yes" == b["recycling:green_waste"] && (a += "recycling of green waste</br>"), "yes" == b["recycling:hardcore"] && (a += "recycling of hardcore</br>");return a;
}
var fnContentGeneralInformations = function fnContentGeneralInformations(b) {
    var a = "";b.width && (a += "width: " + b.width + " m<br/>");b.height && (a += "height: " + b.height + " m<br/>");b.maxwidth && (a += "maxwidth: " + b.maxwidth + " m<br/>");b.maxheight && (a += "maxheight: " + b.maxheight + " m<br/>");b.maxweight && (a += "maxweight: " + b.maxweight + " t<br/>");b.maxspeed && (a += "maxspeed: " + b.maxspeed + " km/h<br/>");b.min_age && (a += "minimum age: " + b.min_age + "<br/>");b.max_age && (a += "maximum age: " + b.max_age + "<br/>");"yes" == b.nudism && (a += "nudism<br/>");"yes" == b.ruins && (a += "ruins<br/>");b.ele && (a += "height above sea level: " + b.ele + " m<br/>");b["xmas:day_date"] && (a += "period from - till: " + b["xmas:day_date"] + "<br/>");b["rotor:diameter"] && (a += "diameter of rotor: " + b["rotor:diameter"] + " m<br/>");b["xmas:note"] && (a += "information: " + b["xmas:note"] + "<br/>");"port" == b["seamark:beacon_lateral:category"] && (a += "port<br/>");"starboard" == b["seamark:beacon_lateral:category"] && (a += "starboard<br/>");"yes" == b["service:bicycle:retail"] && (a += "retail bicycles<br/>");"yes" == b["service:bicycle:repair"] && (a += "repair bicycles<br/>");"yes" == b["service:bicycle:rental"] && (a += "rental bicycles<br/>");"yes" == b["service:bicycle:pump"] && (a += "use of a pump is possible<br/>");"yes" == b["service:bicycle:diy"] && (a += "diy is possible<br/>");"yes" == b["service:bicycle:cleaning"] && (a += "cleaning bicycles<br/>");"yes" == b["service:bicycle:second_hand"] && (a += "sale of second hand bicycles<br/>");"yes" == b["service:bicycle:charging"] && (a += "charging electric bikes is possible<br/>");"yes" == b.cafe && (a += "cafe<br/>");"yes" == b.breakfast && (a += "breakfast<br/>");"yes" == b.snack && (a += "snack<br/>");"yes" == b.indoor_seating && (a += "indoor seating<br/>");"yes" == b.outdoor_seating && (a += "outdoor seating<br/>");"yes" == b.self_service && (a += "self service<br/>");"yes" == b.bakehouse && (a += "bakehouse<br/>");"yes" == b.pastry_shop && (a += "pastry shop<br/>");"yes" == b.fair_trade && (a += "fair trade<br/>");"only" == b.fair_trade && (a += "only fair trade<br/>");"no" == b.fair_trade && (a += "no fair trade<br/>");return a;
},
    fnContentHealthcare = function fnContentHealthcare(b) {
    var a = "";if ("doctors" == b.amenity || "physician" == b.office || "doctor" == b.healthcare) a += fnArztInfo(b), b.medical_area && (a += b.medical_area + "<br/>"), b.type && (a += b.type + "<br/>"), b["doctors:de"] && (a += b["doctors:de"] + "<br/>"), b["note:de"] && (a += b["note:de"] + "<br/>");"yes" == b.dispensing && (a += "pharmacy with dispensing<br/>");"abused" == b["social_facility:for"] && (a += "social facility for: abused people<br/>");"child" == b["social_facility:for"] && (a += "social facility for: children<br/>");"disabled" == b["social_facility:for"] && (a += "social facility for: disabled people<br/>");
    "diseased" == b["social_facility:for"] && (a += "social facility for: diseased people<br/>");"drug_addicted" == b["social_facility:for"] && (a += "social facility for: drug addicted people<br/>");"homeless" == b["social_facility:for"] && (a += "social facility for: homeless<br/>");"juvenile" == b["social_facility:for"] && (a += "social facility for: juvenile and teenager<br/>");"mental_health" == b["social_facility:for"] && (a += "social facility for: people with mental health problems<br/>");"migrant" == b["social_facility:for"] && (a += "social facility for: migrants<br/>");"orphan" == b["social_facility:for"] && (a += "social facility for: orphans<br/>");"senior" == b["social_facility:for"] && (a += "social facility for: seniors<br/>");"underprivileged" == b["social_facility:for"] && (a += "social facility for: underprivileged people<br/>");"unemployed" == b["social_facility:for"] && (a += "social facility for: unemployed<br/>");"victim" == b["social_facility:for"] && (a += "social facility for: victims<br/>");return a;
};
function fnAdditionalBuildingInfos(b) {
    var a = "";b["building:color"] && (a += "building color: " + b["building:color"] + "</br>");b["building:height"] && (a += "building height: " + b["building:height"] + " m</br>");b["building:level"] && (a += "level: " + b["building:level"] + "</br>");b["building:part"] && (a += "building part: " + b["building:part"] + "</br>");b["roof:color"] && (a += "roof color: " + b["roof:colour"] + "</br>");b["roof:shape"] && (a += "roof shape: " + b["roof:shape"] + "</br>");b["roof:height"] && (a += "roof height: " + b["roof:height"] + " m</br>");b["roof:material"] && (a += "roof material: " + b["roof:material"] + " </br>");b["roof:orientation"] && (a += "roof orientation: " + b["roof:orientation"] + " </br>");b["roof:direction"] && (a += "roof direction: " + b["roof:direction"] + " </br>");b["building:type"] && (a += "building type: " + b["building:type"] + "</br>");return a;
}
function fnSicherheitAdditional(b) {
    var a = "";"surveillance" == b.man_made && ("indoor" == b.surveillance && (a += "indoor surveillance"), "outdoor" == b.surveillance && (a += "outdoor surveillance"), "public" == b.surveillance && (a += "public surveillance"), "camera" == b["surveillance:type"] && (a += "type of surveillance: camera"), "guard" == b["surveillance:type"] && (a += "type of surveillance: guard"), "ALPR" == b["surveillance:type"] && (a += "type of surveillance: ALPR"), "town" == b["surveillance:zone"] && (a += "zone of surveillance: town"), "parking" == b["surveillance:zone"] && (a += "zone of surveillance: parking"), "traffic" == b["surveillance:zone"] && (a += "zone of surveillance: traffic"), "shop" == b["surveillance:zone"] && (a += "zone of surveillance: shop"), "bank" == b["surveillance:zone"] && (a += "zone of surveillance: bank"), "building" == b["surveillance:zone"] && (a += "zone of surveillance: building"));return a;
}
function fnWreckInfo(b) {
    var a = "";"wreck" == b.historic && (b["wreck:date_sunk"] && (a += "sunk: " + b["wreck:date_sunk"] + "<br/>"), b["wreck:depth"] && (a += "depth: " + b["wreck:depth"] + "<br/>"), b["wreck:clearance"] && (a += "clearance: " + b["wreck:clearance"] + "<br/>"), b["wreck:date_commissioned"] && (a += "commissioned: " + b["wreck:date_commissioned"] + "<br/>"), b["wreck:gross_tonnage"] && (a += "gross tonnage: " + b["wreck:gross_tonnage"] + "<br/>"), b["wreck:length"] && (a += "length: " + b["wreck:length"] + "<br/>"), b["wreck:width"] && (a += "width: " + b["wreck:width"] + "<br/>"), b["wreck:cargo"] && (a = "timber" == b["wreck:cargo"] ? a + "cargo: timber<br/>" : "coal" == b["wreck:cargo"] ? a + "cargo: coal<br/>" : a + ("cargo: " + b["wreck:cargo"] + "<br/>")), "yes" == b["wreck:visible_at_low_tide"] && (a += "visible at low tide: yes<br/>"), "no" == b["wreck:visible_at_low_tide"] && (a += "visible at low tide: no<br/>"), "yes" == b["wreck:visible_at_high_tide"] && (a += "visible at high tide: yes<br/>"), "no" == b["wreck:visible_at_high_tide"] && (a += "visible at high tide: no<br/>"), "yes" == b.access && (a += "accessible<br/>"), "no" == b.access && (a += "no access possible<br/>"), "permit_required" == b.access && (a += "permit required for acces<br/>"));return a;
}
function fnKlosterAdditional(b) {
    var a = "";if (b["monastery:type"]) switch (b["monastery:type"]) {case "monastery":
            a += "type: monastery<br/>";break;case "convent":
            a += "type: convent<br/>";break;case "canonry":
            a += "type: canonry<br/>";break;case "commandry":
            a += "type: commandry<br/>";break;case "hermitage":
            a += "type: hermitage<br/>";break;default:
            a += "type: unknown<br/>";}b["community:gender"] && ("male" == b["community:gender"] && (a += "gender: male<br/>"), "female" == b["community:gender"] && (a += "gender: female<br/>"));
    b.religious_rank && ("abbey" == b.religious_rank ? a += "religious rank: abbey<br/>" : "abbey" == b.religious_rank && (a += "religious rank: abbey<br/>"));"yes" == b.shrine && (a += "feature: shrine<br/>");"yes" == b.sanctuary && (a += "feature: sanctuary<br/>");if (b.religion) switch (b.religion) {case "animist":
            a += "religion: animist<br/><br/>";break;case "bahai":
            a += "religion: bahai<br/>";break;case "buddhist":
            a += "religion: buddhist<br/>";break;case "christian":
            a += "religion: christian<br/>";break;case "hindu":
            a += "religion: hindu<br/>";
            break;case "IglesiaNiCristo":
            a += "religion: IglesiaNiCristo<br/>";break;case "jain":
            a += "religion: jain<br/>";break;case "jewish":
            a += "religion: jewish<br/>";break;case "multifaith":
            a += "religion: multifaith<br/>";break;case "muslim":
            a += "religion: muslim<br/>";type += "Mosque<br/>";break;case "pagan":
            a += "religion: pagan<br/>";break;case "pastafarian":
            a += "religion: pastafarian<br/>";break;case "scientologist":
            a += "religion: scientologist<br/>";break;case "shinto":
            a += "religion: shinto<br/>";break;case "sikh":
            a += "religion: sikh<br/>";break;case "spiritualist":
            a += "religion: spiritualist<br/>";break;case "taoist":
            a += "religion: taoist<br/>";break;case "unitarian":
            a += "religion: unitarian<br/>";break;case "yazidi":
            a += "religion: yazidi<br/>";break;case "zoroastrian":
            a += "eligion: zoroastrian<br/>";break;default:
            a += "religion: unknown<br/>";}if (b.denomination) switch (b.denomination) {case "anglican":
            a += "denomination: Anglican<br/><br/>";break;case "baptist":
            a += "denomination: Baptist<br/>";break;case "catholic":
            a += "denomination: Catholic<br/>";
            break;case "roman_catholic":
            a += "denomination: Roman Catholic<br/>";break;case "old_catholic":
            a += "denomination: Old Catholic<br/>";break;case "greek_catholic":
            a += "denomination: Greek Catholic<br/>";break;case "evangelical":
            a += "denomination: Evangelical";case "jehovahs_witness":
            a += "denomination: Jehovahs Witness<br/>";break;case "lutheran":
            a += "denomination: Lutheran<br/>";break;case "mennonite":
            a += "denomination: Mennonite<br/>";break;case "messianic_jewish":
            a += "denomination: Messianic Jewish<br/>";
            break;case "methodist":
            a += "denomination: Methodist<br/>";break;case "mormon":
            a += "denomination: Mormon<br/>";break;case "new_apostolic":
            a += "denomination: New Apostolic<br/>";break;case "orthodox":
            a += "denomination: Orthodox<br/>";break;case "greek_orthodox":
            a += "denomination: Greek Orthodox<br/>";break;case "coptic_orthodox":
            a += "denomination: coptic orthodox<br/>";break;case "pentecostal":
            a += "denomination: pentecostal<br/>";break;case "presbyterian":
            a += "denomination: Presbyterian<br/>";break;case "protestant":
            a += "denomination: Protestant<br/>";break;case "quaker":
            a += "denomination: Quaker<br/>";break;case "reformed":
            a += "denomination: Reformed<br/>";break;case "russian_orthodox":
            a += "denomination: Russian-Orthodox<br/>";break;case "seventh_day_adventist":
            a += "denomination: Seventh Day Adventist<br/>";break;case "christian_community":
            a += "denomination: Christian Community<br/>";break;case "adventist":
            a += "denomination: Adventist<br/>";break;case "alliance":
            a += "denomination: Alliance<br/>";break;case "assemblies_of_god":
            a += "denomination: Assemblies of God<br/>";break;case "apostolic":
            a += "denomination: Apostolic<br/>";break;case "armenian_apostolic":
            a += "denomination: Armenian Apostolic<br/>";break;case "assyrian":
            a += "denomination: Assyrian<br/>";break;case "christ_scientist":
            a += "denomination: Christ Scientist<br/>";break;case "church_of_scotland":
            a += "denomination: Church of Scotland<br/>";break;case "czechoslovak_hussite":
            a += "denomination: Czechoslovak Hussite<br/>";break;case "dutch_reformed":
            a += "denomination: Dutch Reformed<br/>";
            break;case "exclusive_brethren":
            a += "denomination: Exclusive Brethren<br/>";break;case "foursquare":
            a += "denomination: Foursquare<br/>";break;case "kimbanguist":
            a += "denomination: Kimbanguist<br/>";break;case "living_waters_church":
            a += "denomination: Living Waters Church<br/>";break;case "mariavite":
            a += "denomination: Mariavite<br/>";break;case "maronite":
            a += "denomination: Maronite<br/>";break;case "moravian":
            a += "denomination: Moravian<br/>";break;case "nazarene":
            a += "denomination: Nazarene<br/>";break;
        case "nondenominational":
            a += "denomination: Nondenominational<br/>";break;case "old_believers":
            a += "denomination: Old Believers<br/>";break;case "polish_catholic":
            a += "denomination: Polish-Catholic<br/>";break;case "salvation_army":
            a += "denomination: Salvation Army<br/>";break;case "santo_daime":
            a += "denomination: Santo Daime<br/>";break;case "serbian_orthodox":
            a += "denomination: Serbisch-Orthodox<br/>";break;case "spiritism":
            a += "denomination: Spiritism<br/>";break;case "united":
            a += "denomination: United<br/>";
            break;case "united_church_of_christ":
            a += "denomination: United Church of Christ<br/>";break;case "united_free_church_of_scotland":
            a += "denomination: United Free Church of Scotland<br/>";break;case "united_methodist":
            a += "denomination: United Methodist<br/>";break;case "united_reformed":
            a += "denomination: United Reformed<br/>";break;case "uniting":
            a += "denomination: Uniting<br/>";break;case "church_of_sweden":
            a += "denomination: Church of Sweden<br/>";break;case "mission_covenant_church_of_sweden":
            a += "denomination: Mission Covenant Church Of Sweden<br/>";
            break;case "alternative":
            a += "denomination: alternative<br/>";break;case "ashkenazi":
            a += "denomination: ashkenazi<br/>";break;case "buchari":
            a += "denomination: buchari<br/>";break;case "conservative":
            a += "denomination: conservative<br/>";break;case "egalitarian":
            a += "denomination: egalitarian<br/>";break;case "hasidic":
            a += "denomination: hasidic<br/>";break;case "humanistic":
            a += "denomination: humanistic<br/>";break;case "kabbalah":
            a += "denomination: kabbalah<br/>";break;case "kabbalistic":
            a += "denomination: kabbalistic<br/>";
            break;case "karaite":
            a += "denomination: karaite<br/>";break;case "liberal":
            a += "denomination: liberal<br/>";break;case "lubavitch":
            a += "denomination: lubavitch<br/>";break;case "lubavitch_messianic":
            a += "denomination: lubavitch messianic<br/>";break;case "mizrachi_baghdadi":
            a += "denomination: mizrachi baghdadi<br/>";break;case "mizrachi_chida":
            a += "denomination: mizrachi chida<br/>";break;case "mizrachi_jerusalemite":
            a += "denomination: mizrachi jerusalemite<br/>";break;case "mizrachi_livorno":
            a += "denomination: mizrachi livorno<br/>";
            break;case "mizrachi_moroccan":
            a += "denomination: mizrachi moroccan<br/>";break;case "modern_orthodox":
            a += "denomination: modern orthodox<br/>";break;case "neo_orthodox":
            a += "denomination: neo orthodox<br/>";break;case "nondenominational":
            a += "denomination: nondenominational<br/>";break;case "orthodox":
            a += "denomination: orthodox<br/>";break;case "orthodox_ashkenaz":
            a += "denomination: orthodox ashkenaz<br/>";break;case "orthodox_sefard":
            a += "denomination: orthodox sefard<br/>";break;case "progressive":
            a += "denomination: progressive<br/>";break;case "reconstructionist":
            a += "denomination: reconstructionist<br/>";break;case "reform":
            a += "denomination: reform<br/>";break;case "renewal":
            a += "denomination: renewal<br/>";break;case "samaritan":
            a += "denomination: samaritan<br/>";break;case "sefardi":
            a += "denomination: sefardi<br/>";break;case "sefardi_amsterdam":
            a += "denomination: sefardi amsterdam<br/>";break;case "sefardi_london":
            a += "denomination: sefardi london<br/>";break;case "traditional":
            a += "denomination: traditional<br/>";
            break;case "ultra_orthodox":
            a += "denomination: ultra orthodox<br/>";break;case "unaffiliated":
            a += "denomination: unaffiliated<br/>";break;case "yemenite":
            a += "denomination: yemenite<br/>";break;case "yemenite_baladi":
            a += "denomination: yemenite baladi<br/>";break;case "yemenite_shami":
            a += "denomination: yemenite shami<br/>";break;case "ahmadiya":
            a += "denomination: ahmadiya<br/>";break;case "alaouite":
            a += "denomination: alaouite<br/>";break;case "druze":
            a += "denomination: druze<br/>";break;case "ibadi":
            a += "denomination: ibadi<br/>";break;case "ismaili":
            a += "denomination: ismaili<br/>";break;case "shia":
            a += "denomination: shia<br/>";break;case "sunni":
            a += "denomination: sunni<br/>";break;case "nichiren":
            a += "denomination: nichiren<br/>";break;case "jodo_shinshu":
            a += "denomination: jodo shinshu<br/>";break;case "jodo_shu":
            a += "denomination: jodo shu<br/>";break;case "vajrayana":
            a += "denomination: vajrayana<br/>";break;case "shingon_shu":
            a += "denomination: shingon shu<br/>";break;case "zen":
            a += "denomination: zen<br/>";
            break;case "thai_mahanikaya":
            a += "denomination: thai mahanikaya<br/>";break;case "thai_thammayut":
            a += "denomination: thai thammayut<br/>";break;case "asatru":
            a += "denomination: asatru<br/>";break;case "celtic":
            a += "denomination: celtic<br/>";break;case "greco_roman":
            a += "denomination: greco roman<br/>";break;case "wicca":
            a += "denomination: wicca<br/>";break;case "irani":
            a += "denomination: irani<br/>";break;case "parsi":
            a += "denomination: parsi<br/>";break;default:
            a += "unknown<br/>";}if (b.community) switch (b.community) {case "AA":
            a += "community (AA): Augustinians of the Assumption <br/>";break;case "BSCM":
            a += "community (BSCM): Adorers of the Sacred Heart of Jesus of Montmartre <br/>";break;case "CBMV":
            a += "community (CBMV): Augustiner-Chorfrauen B.M.V.<br/>";break;case "CO":
            a += "community (CO): Oratorians<br/>";break;case "CMC":
            a += "community (CMC): Congregation of the Mother Co-Redemptrix<br/>";break;case "CRSP":
            a += "community (CRSP): Kongregation der Regularkleriker vom hl. Paulus (Barnabiten)<br/>";break;case "CSJ":
            a += "community (CSJ): Carmel Saint-Joseph<br/>";
            break;case "CSSP":
            a += "community (CSSP): Congr\xE9gation du Saint-Esprit<br/>";break;case "CSSR":
            a += "community (CSSR): Congr\xE9gation du Tr\xE8s Saint R\xE9dempteur<br/>";break;case "FCJM":
            a += "community (FCJM): Franciscan Sisters, Daughters of the Sacred Heart of Jesus and Mary<br/>";break;case "FMGB":
            a += "community (FMGB): Suore Francescane Missionarie di Ges\xF9 Bambino<br/>";break;case "FMH":
            a += "community(FMH): Congregatio Filiarum Mariae Sanctissimae ab Horto<br/>";break;case "FMM":
            a += "community (FMM): Franciscaines missionnaires de Marie<br/>";break;case "FSC":
            a += "community (FSC): Fr\xE8res des \xC9coles chr\xE9tiennes<br/>";break;case "MCCI":
            a += "community (MCCI): Missionnaires comboniens du Sacr\xE9-C\u0153ur<br/>";break;case "MSFS":
            a += "community (MSFS): Missionnaires de Saint Fran\xE7ois de Sales<br/>";break;case "OCart":
            a += "community (OCart): Order of the Carthusians<br/>";break;case "OCC":
            a += "community (OCC): Ordre de Notre Dame du Mont-Carmel<br/>";break;case "OCD":
            a += "community (OCD): Ordre des Carmes d\xE9chaux<br/>";break;case "OCSO":
            a += "community (OCSO): Trappists (lat. Ordo Cisterciensis Strictioris Observantiae)<br/>";break;case "OFM":
            a += "community (OFM): Ordre des Fr\xE8res Mineurs (Franziskaner)<br/>";break;case "OFMCap":
            a += "community (OFMCap): Ordre des Fr\xE8res Mineurs Capucins<br/>";break;case "OFMConv":
            a += "community (OFMConv): Ordre des Fr\xE8res Mineurs Conventuels<br/>";break;case "OFS":
            a += "community (OFS): Franciscans secular Third Order<br/>";
            break;case "OMI":
            a += "community (OMI): Oblats de Marie<br/>";break;case "OP":
            a += "community (OP): Ordre des Fr\xE8res Pr\xEAcheurs<br/>";break;case "OPraem":
            a += "community (OPraem): Ordre des chanoines r\xE9guliers de Pr\xE9montr\xE9<br/>";break;case "OSB":
            a += "community (OSB): Order of Saint Benedict<br/>";break;case "OSC":
            a += "community (OSC): Ordre de Sainte-Claire ou Ordre des Pauvres Dames<br/>";break;case "OSSS":
            a += "community (OSSS): Ordre de Sainte-Brigitte<br/>";break;case "OVM":
            a += "community (OVM): Order of the Visitation of Holy Mary (Salesianerinnen)<br/>";
            break;case "PSDP":
            a += "community (PSDP): Petites s\u0153urs des pauvres (Kleinen Schwestern der Armen)<br/>";break;case "PFJ":
            a += "community (PFJ): Petits Fr\xE8res de J\xE9sus<br/>";break;case "SDB":
            a += "community (SDB): Soci\xE9t\xE9 de Saint Fran\xE7ois de Sales<br/>";break;case "SJ":
            a += "community (SJ): Compagnie de J\xE9sus<br/>";break;case "SOC":
            a += "community (SOC): Order of Cistercians<br/>";break;case "SSCC":
            a += "community (SSCC): Congregation of the Sacred Hearts of Jesus and Mary<br/>";
            break;case "SSF":
            a += "community (SSF): Society of St Francis<br/>";break;case "SSJE":
            a += "community (SSJE): Society of St John the Evangelist<br/>";break;case "SSpS":
            a += "community (SSpS): Steyler Missionsschwestern<br/>";break;case "TOR":
            a += "community (TOR): Terzo Ordine Regolare di San Francesco<br/>";break;default:
            a += "unknown<br/>";}return a;
}var fnTestInfoPopup = function fnTestInfoPopup(b) {
    b = b.getProperties();var a = "",
        c;for (c in b) {
        a = a + c + "=" + b[c] + "<br/>";
    }return '<div class="c4g_popup_text" style="width:300px;">' + a + "</div>";
};

/***/ }),

/***/ "./Resources/public/js/c4g-maps-proxy.js":
/*!***********************************************!*\
  !*** ./Resources/public/js/c4g-maps-proxy.js ***!
  \***********************************************/
/*! exports provided: MapProxy */
/*! exports used: MapProxy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MapProxy; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_baselayer_controller__ = __webpack_require__(/*! ./c4g-baselayer-controller */ "./Resources/public/js/c4g-baselayer-controller.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_layer_controller__ = __webpack_require__(/*! ./c4g-layer-controller */ "./Resources/public/js/c4g-layer-controller.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_locationstyle_controller__ = __webpack_require__(/*! ./c4g-locationstyle-controller */ "./Resources/public/js/c4g-locationstyle-controller.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__ = __webpack_require__(/*! ./c4g-maps-misc-spinner */ "./Resources/public/js/c4g-maps-misc-spinner.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// 'namespace'


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};

'use strict';









var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_7__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_7__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

var c4g = this.c4g;
var MapProxy = function () {
  function MapProxy(options) {
    _classCallCheck(this, MapProxy);

    var mapData;

    this.options = jQuery.extend({
      mapController: false
    }, options);
    if (!this.options.mapController) {
      return false;
    }

    c4g.maps.editorStyles = c4g.maps.editorStyles || {};

    //window.c4gMapsHooks.proxy_fillPopup = [];

    this.hook_baselayer_loaded = [];
    this.hook_baselayer_visibility = [];
    this.hook_layer_loaded = [];
    this.hook_layer_visibility = [];
    this.hook_map_click = [];
    this.hook_map_zoom = [];

    // add global hook for accessibility when there is no proxy reference
    window.c4gMapsHooks = window.c4gMapsHooks || {};
    window.c4gMapsHooks.proxy_layer_loaded = window.c4gMapsHooks.proxy_layer_loaded || [];

    this.baselayerIds = [];
    this.activeBaselayerId = undefined;
    this.layerIds = [];
    this.activeLayerIds = {};

    this.requestFunctions = {};
    this.request = {};

    this.baselayers_loaded = false;
    this.layers_loaded = false;

    mapData = this.options.mapController.data;

    this.mapId = mapData.id;

    this.api_baselayer_url = this.options.mapController.data.api.baselayer + '/' + mapData.profile;
    this.api_layer_url = this.options.mapController.data.api.layer + '/' + this.mapId;
    this.api_layercontent_url = this.options.mapController.data.api.layercontent;
    //this.api_layercontentdata_url = this.options.mapController.data.api.layercontentdata;
    this.api_layercontentdata_url = "con4gis/layerContentDataService";
    this.api_locstyle_url = this.options.mapController.data.api.locstyle;
    this.api_infowindow_url = this.options.mapController.data.api.infowindow;
    this.options = options;

    // this.initialize();
  }

  _createClass(MapProxy, [{
    key: "initialize",
    value: function initialize() {
      var self, map;

      self = this;
      map = this.options.mapController.map;

      this.baselayerController = new __WEBPACK_IMPORTED_MODULE_1__c4g_baselayer_controller__["a" /* C4gBaselayerController */](this);
      this.baselayerController.loadBaseLayers();
      this.layerController = new __WEBPACK_IMPORTED_MODULE_2__c4g_layer_controller__["a" /* C4gLayerController */](this);
      this.layerController.loadLayers();
      this.locationStyleController = new __WEBPACK_IMPORTED_MODULE_3__c4g_locationstyle_controller__["a" /* C4gLocationStyleController */](this);
      this.addPopUp();

      //TODO check this, nearly the same as below
      map.on('change:view', function () {
        // zoom-observer
        //
        map.getView().on('change:resolution', function () {
          var layerId, layer;

          // check layer zoom-bounds
          // @TODO: Use "self.activeLayerIds = false" ?
          for (layerId in self.activeLayerIds) {
            if (self.activeLayerIds.hasOwnProperty(layerId)) {
              layer = self.layerController.arrLayers[layerId];
              if (self.checkLayerIsActiveForZoom(layerId)) {
                if (layer.isInactive) {
                  self.layerController.showLayer(layerId);
                }
              } else {
                self.layerController.hideLayer(layerId, true);
              }
            }
          }

          // hooks
          __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.hook_map_zoom);

          if (self.options.mapController.data.caching && map.getView().getZoom()) {
            __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].storeValue('zoom', map.getView().getZoom());
          }
        }); // end of "zoom-observer"
      }); // end of "zoom-observer"

      // zoom-observer
      //
      map.getView().on('change:resolution', function () {
        var layerId, layer;

        // check layer zoom-bounds
        // @TODO: Use "self.activeLayerIds = false" ?
        for (layerId in self.activeLayerIds) {
          if (self.activeLayerIds.hasOwnProperty(layerId)) {
            layer = self.layerController.arrLayers[layerId];
            if (self.checkLayerIsActiveForZoom(layerId)) {
              if (layer.isInactive) {
                self.layerController.showLayer(layerId);
              }
            } else {
              self.layerController.hideLayer(layerId, true);
            }
          }
        }

        // hooks
        __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.hook_map_zoom, self);

        if (self.options.mapController.data.caching && map.getView().getZoom()) {
          __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].storeValue('zoom', map.getView().getZoom());
        }
      }); // end of "zoom-observer"

      map.getView().on('change:center', function (evt) {
        if (self.options.mapController.data.caching) {
          var coordinate = ol.proj.toLonLat(map.getView().getCenter());
          if (coordinate) {
            __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].storeValue('lon', coordinate[0]);
            __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].storeValue('lat', coordinate[1]);
          }
        }
        window.c4gMapsHooks.map_center_changed = window.c4gMapsHooks.map_center_changed || [];
        __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.map_center_changed, map.getView().getCenter());
      }); // end of "center-observer"

      // click-observer
      //
      map.on('click', function (clickEvent) {

        var feature, fFeatures, layer, popupInfos, currentZoom, minZoom, newCenter, geometry, coord, setPopup, styleFunc, styleCluster, objPopup;

        //ToDo check new function call with ol 4.3
        feature = map.forEachFeatureAtPixel(clickEvent.pixel, function (feature, layer) {
          return feature;
        });

        layer = map.forEachFeatureAtPixel(clickEvent.pixel, function (feature, layer) {
          return layer;
        });

        if (layer && layer.getStyle()) {
          styleFunc = layer.getStyle();
          if (typeof styleFunc === "function" && styleFunc(feature, currentZoom) && styleFunc(feature, currentZoom)['0']) {
            styleCluster = styleFunc(feature, currentZoom)['0'].clone();
            if (styleCluster && styleCluster.getImage()) {
              styleCluster.getImage().setScale(styleCluster.getImage().getScale() * 0.7);
            }
          }
        }

        fFeatures = feature ? feature.get('features') : false;
        if (!(fFeatures && fFeatures.length === 1)) {
          // cluster multiple POI
          if (fFeatures) {
            if (fFeatures[0].get('cluster_popup') == 1) {
              map.getView().setCenter(clickEvent.coordinate);
              currentZoom = map.getView().getZoom();
              minZoom = self.options.mapController.data.cluster_all ? self.options.mapController.data.cluster_zoom : fFeatures['0'].get('cluster_zoom');
              if (currentZoom >= minZoom) {
                setPopup = [];
                setPopup.content = '';
                setPopup.async = false;
                for (var i = 0; i < fFeatures.length; i++) {
                  setPopup.content = setPopup.content.concat(fFeatures[i].get('popup').content);
                }
                feature = fFeatures[0].clone();
                feature.set('popup', setPopup);
              } else {
                map.getView().setZoom(currentZoom + 1);
              }
            } else {

              feature.setStyle(new ol.style.Style({
                image: new ol.style.Circle({
                  fill: new ol.style.Fill({
                    opacity: 0
                  }),
                  radius: 0
                })
              }));
              feature = false;

              // animation
              map.getView().animate({
                start: +new Date(),
                duration: 1000,
                resolution: map.getView().getResolution(),
                center: [0, 0]
                //rotation: Math.PI
              });

              currentZoom = map.getView().getZoom();
              newCenter = map.getCoordinateFromPixel(clickEvent.pixel);
              minZoom = self.options.mapController.data.cluster_all ? self.options.mapController.data.cluster_zoom : fFeatures['0'].get('cluster_zoom');

              //ToDo remove with structure element param
              if (currentZoom >= minZoom) {

                //if (currentZoom >= map.getView().getMaxZoom()) {
                //open the cluster after zooming
                var pix = map.getView().getResolution();
                var max = fFeatures.length;
                var r = pix * 12 * (0.5 + max / 4);
                for (var i = 0; i < max; i++) {
                  var a = 2 * Math.PI * i / max;
                  if (max == 2 || max == 4) a += Math.PI / 4;
                  var p = [newCenter[0] + r * Math.sin(a), newCenter[1] + r * Math.cos(a)];
                  var coordinate = ol.proj.toLonLat(p);
                  var f = [];
                  f.push(fFeatures[i]);
                  var cf = new ol.Feature({
                    geometry: new ol.geom.Point(p),
                    features: f,
                    style: fFeatures[i].get('style')
                  });
                  layer.getSource().addFeature(cf);
                  map.getView().setCenter(newCenter);
                }
              } else {
                currentZoom += 1;
              }

              map.getView().setCenter(newCenter);
              map.getView().setZoom(currentZoom);
            }
          }
        } else if (fFeatures && fFeatures.length === 1) {
          feature = fFeatures[0];
        }

        if (self.options.mapController.controls.editor && self.options.mapController.controls.editor.isOpen()) {
          // do not show popup when editor is open
          if (feature && feature.get('projectId')) {
            // but call click hooks
            var result = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.hook_map_click, clickEvent);
            return false;
          }
        }
        popupInfos = {};
        if (feature && feature.get('popup')) {
          // single POI
          popupInfos = feature.get('popup');
        } else if (layer && layer.popup) {
          popupInfos = layer.popup;
        } else {
          feature = false;
        }
        if (feature && feature.get('loc_linkurl')) {
          if (self.options.mapController.data.link_newwindow === '1') {
            window.open(feature.get('loc_linkurl'));
          } else {
            window.open(feature.get('loc_linkurl'), "_self");
          }
        } else {
          if (feature && feature.get('zoom_onclick') && feature.get('zoom_onclick') != 0) {
            map.getView().setZoom(feature.get('zoom_onclick'));
            map.getView().setCenter(feature.getGeometry().getCoordinates());
          } else if (layer && layer.zoom_onclick && layer.zoom_onclick != 0) {
            map.getView().setZoom(layer.zoom_onclick);
            map.getView().setCenter(clickEvent.coordinate);
          }

          if (feature) {
            geometry = feature.getGeometry();
            if (geometry instanceof ol.geom.Point) {
              coord = geometry.getCoordinates();
            } else {
              coord = clickEvent.coordinate;
            }
            c4g.maps.popup.popup.setPosition(coord);

            if (popupInfos.content) {
              c4g.maps.popup.$content.html('');
              c4g.maps.popup.$popup.addClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].LOADING);
              c4g.maps.popup.spinner.show();

              if (popupInfos.async === false || popupInfos.async == '0') {
                objPopup = {};
                objPopup.popup = popupInfos;
                objPopup.feature = feature;
                objPopup.layer = layer;
                // Call the popup hook for plugin specific popup content
                if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                  __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                }
                self.setPopup(objPopup);
              } else {
                jQuery.ajax({
                  dataType: "json",
                  url: self.api_infowindow_url + '/' + popupInfos.content
                }).done(function (data) {
                  var popupInfo = {
                    async: popupInfos.async,
                    content: data.content,
                    popup: popupInfos.popup,
                    routing_link: popupInfos.routing_link
                  };

                  objPopup = {};
                  objPopup.popup = popupInfo;
                  objPopup.feature = feature;
                  objPopup.layer = layer;

                  // Call the popup hook for plugin specific popup content
                  if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                    __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                  }

                  self.setPopup(objPopup);
                });
              }
            } else {
              c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
          } else {
            c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          }

          // hooks
          __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.hook_map_click, clickEvent);
        }
      }); // end of "click-observer"


      // this.options.mapController.map.getLayers().on('change:length', function(event) {
      //     ;
      // });

    } // end of "initial"*

  }, {
    key: "combine",
    value: function combine(proxy) {
      var func = function func(event) {
        proxy.combineLayers(proxy);
        proxy.options.mapController.map.un('postrender', func);
      };
      proxy.options.mapController.map.on('postrender', func);
    }
  }, {
    key: "setPopup",
    value: function setPopup(popupConfig) {
      var feature,
          layer,
          popupContent,
          router,
          routeButtonWrapper,
          routeFromButton,
          routeFromButtonSpan,
          routeToButton,
          routeToButtonSpan,
          routingHandler,
          self = this;

      feature = popupConfig.feature;
      layer = popupConfig.layer;

      popupContent = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].replaceAllPlaceholders(popupConfig.popup.content, feature, layer);
      // @TODO: check for route-option & display "route-to"
      // NOTE: does not work async this way
      if (this.options.mapController.controls.router && popupConfig.popup.routing_link) {
        router = this.options.mapController.controls.router;

        routingHandler = function routingHandler(event) {
          if (self.options.mapController.activePortside !== router) {
            router.open();
          }

          router.setInput($(event.currentTarget).hasClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_FROM), feature.getGeometry().getCoordinates());
        }; // end of "routingHandler()"

        routeButtonWrapper = document.createElement('div');
        routeButtonWrapper.className = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_WRAPPER;

        routeFromButton = document.createElement('button');
        routeFromButton.className = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_FROM;
        jQuery(routeFromButton).click(routingHandler);
        routeButtonWrapper.appendChild(routeFromButton);

        routeFromButtonSpan = document.createElement('span');
        routeFromButtonSpan.innerHTML = langConstants.POPUP_ROUTE_FROM;
        routeFromButton.appendChild(routeFromButtonSpan);

        routeToButton = document.createElement('button');
        routeToButton.className = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_TO;
        jQuery(routeToButton).click(routingHandler);
        routeButtonWrapper.appendChild(routeToButton);

        routeToButtonSpan = document.createElement('span');
        routeToButtonSpan.innerHTML = langConstants.POPUP_ROUTE_TO;
        routeToButton.appendChild(routeToButtonSpan);
      }

      if (popupContent.trim() || router) {
        c4g.maps.popup.$content.html(popupContent);
        if (router) {
          c4g.maps.popup.$content.append(routeButtonWrapper);
        }
        if (feature.getGeometry() && feature.getGeometry() instanceof ol.geom.Point) {
          c4g.maps.popup.popup.setPosition(feature.getGeometry().getCoordinates());
        }
      } else {
        // hide popup if there is no valid content left
        c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
      }

      c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].LOADING);
      c4g.maps.popup.spinner.hide();
    } // end of "setPopup()"


  }, {
    key: "addPopUp",
    value: function addPopUp() {

      var popUpElement = void 0,
          popUpCloseElement = void 0,
          popUpContent = void 0,
          popup = void 0;

      popUpElement = document.createElement('div');
      popUpElement.setAttribute('id', 'c4g_popup_' + this.options.mapController.data.mapId);
      popUpElement.className = 'c4g-popup-wrapper';

      popUpCloseElement = document.createElement('button');
      popUpCloseElement.className = "c4g-popup-close c4g-icon";

      popUpContent = document.createElement('div');
      popUpContent.className = "c4g-popup-content";

      popUpElement.appendChild(popUpCloseElement);
      popUpElement.appendChild(popUpContent);

      jQuery(popUpCloseElement).click(function (event) {
        event.preventDefault();
        c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
      });

      popup = new ol.Overlay({
        element: popUpElement,
        positioning: 'bottom-left',
        offset: [-50, 0],
        autoPan: mapData.popupAutoPan ? true : false,
        autoPanAnimation: {
          duration: 0
        },
        autoPanMargin: 100
      });

      c4g.maps.popup = {};
      c4g.maps.popup.popup = popup;
      // attach a spinner to the popup
      c4g.maps.popup.spinner = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__["a" /* Spinner */]({ target: popUpElement });

      this.options.mapController.map.addOverlay(popup);

      c4g.maps.popup.$popup = jQuery(c4g.maps.popup.popup.getElement());
      c4g.maps.popup.$content = jQuery('.c4g-popup-content', c4g.maps.popup.$popup);
      this.currentPopup = c4g.maps.popup;
    } // end of "addPopUp()"


    /**
     * @TODO: [checkLocationStyles description]
     *
     * @param   {[type]}  opt_options  [description]
     *
     * @return  {[type]}               [description]
     */

  }, {
    key: "checkLocationStyles",
    value: function checkLocationStyles(opt_options) {

      var options,
          neededLayerStyles,
          getLayerStyles,
          self = this;

      if (opt_options && (typeof opt_options === "undefined" ? "undefined" : _typeof(opt_options)) === "object") {
        options = opt_options;
      } else {
        options = {};
      }

      this.locationStyleController.arrLocStyles = this.locationStyleController.arrLocStyles || {};

      neededLayerStyles = [];
      getLayerStyles = function getLayerStyles(layers) {
        var i, element, index;

        // ToDo: Rekursion integrieren (test mit forum)
        for (index in layers) {
          if (layers.hasOwnProperty(index)) {
            element = layers[index];

            if (element.content) {
              for (i = 0; i < element.content.length; i += 1) {

                if (element.content[i]) {
                  if (element.content[i].locationStyle && element.content[i].locationStyle !== "0" && neededLayerStyles.indexOf(element.content[i].locationStyle) === -1 && (!self.locationStyleController.arrLocStyles[element.content[i].locationStyle] || self.locationStyleController.arrLocStyles[element.content[i].locationStyle].style === undefined)) {
                    neededLayerStyles.push(element.content[i].locationStyle);
                  }
                }
              }
            }
          }
        }
      };

      getLayerStyles(this.layerController.arrLayers);

      if (neededLayerStyles.length > 0) {
        this.locationStyleController.loadLocationStyles(neededLayerStyles, options);
      } else {
        if (options.done && typeof options.done === "function") {
          options.done();
        }
      }
    } // end of "checkLocationStyles()"

  }, {
    key: "combineLayers",
    value: function combineLayers(proxy) {

      var i,
          j,
          k,
          layerId,
          layers,
          contentDataLayer,
          contentData,
          layer,
          layerGroups = [],
          source,
          style,
          features = [],
          styles = [],
          oneFeature,
          feature,
          vectorSource,
          clusterSource,
          vectorLayer;

      if (proxy.options.mapController.data.cluster_all === '1') {
        contentData = proxy.options.mapController.data;
        for (i in proxy.activeLayerIds) {
          //loop to get all layers
          layers = c4g.maps.layers[i];

          if (layers.type === "gpx") {
            continue;
          }

          if (layers && layers.vectorLayer) {
            if (layers.vectorLayer.getLayers() && layers.vectorLayer.getLayers().getArray()[0] && layers.vectorLayer.getLayers().getArray()[0].getSource() && layers.vectorLayer.getLayers().getArray()[0].getSource().getFeatures().length > 0) {
              proxy.options.mapController.map.removeLayer(layers.vectorLayer);
            }

            contentDataLayer = layers.content;
            layers.vectorLayer.getLayers().content = contentDataLayer;
            layerGroups.push(layers.vectorLayer.getLayers());
          }
        }
        for (k = 0; k < layerGroups.length; k++) {
          //loop to extract features from layers
          if (layerGroups[k].getArray().length > 0) {
            layer = layerGroups[k].getArray();
            source = layer["0"].getSource();
            style = layer["0"].getStyle();

            oneFeature = true;
            feature = source.getFeatures();
            for (j = 0; j < feature.length; j++) {
              //loop over all features from a source
              if (feature[j].get("features")) {
                for (i = 0; i < feature[j].get("features").length; i++) {
                  //loop for clustered features
                  if (layerGroups[k].content[j]) {
                    style = this.locationStyleController.arrLocStyles[layerGroups[k].content[j].locationStyle];
                  } else if (layerGroups[k].content[0]) {
                    style = this.locationStyleController.arrLocStyles[layerGroups[k].content[0].locationStyle];
                  }

                  feature[j].get("features")[i].setStyle(style.style);
                  if (!feature[j].get("features")[i].get('popup')) {
                    feature[j].get("features")[i].set('popup', layer['0'].popup);
                  }
                }
                features.push(feature[j].get("features"));

                oneFeature = false;
              }
            }
            if (oneFeature) {
              //single not clustered feature
              if (feature.length >= 1) {
                if (!feature['0'].get('popup')) {
                  feature['0'].set('popup', layer.popup);
                }
                features.push(feature);
              }
            }
          }
        }

        vectorSource = new ol.source.Vector({
          projection: 'EPSG:3857'

        });

        for (i = 0; i < features.length; i++) {
          vectorSource.addFeatures(features[i]);
        }

        clusterSource = new ol.source.Cluster({
          distance: 40,
          //threshold: 2, //minimum element count
          source: vectorSource
        });
        var styleForCluster = function styleForCluster(feature, resolution) {
          if (feature && feature.get('features') && feature.get('features')['0'].getStyle()) {
            style = feature.get('features')['0'].getStyle()(feature);
            if (feature !== undefined && feature !== null && feature.self !== window) {
              var fFeatures = feature.get('features');
              var size = fFeatures.length;
              if (size > 1) {
                if (!style) {
                  style = [];
                }

                // calculate bubble-offset
                var iconOffset = [0, 0];
                if (style[0]) {
                  if (typeof style[0].getImage().getRadius === "function") {
                    var radius = parseInt(style[0].getImage().getRadius(), 10);
                    if (radius) {
                      iconOffset = [0, radius];
                    }
                  } else if (typeof style[0].getImage().getAnchor === "function") {
                    iconOffset = style[0].getImage().getAnchor() || [0, 0];
                  }
                }

                var fillcolor = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity('4975A8', {
                  unit: '%',
                  value: 70
                });

                if (contentData.cluster_fillcolor) {
                  fillcolor = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fillcolor, {
                    unit: '%',
                    value: 70
                  });
                }
                var fontcolor = contentData.cluster_fontcolor ? '#' + contentData.cluster_fontcolor : '#FFFFFF';

                style.push(new ol.style.Style({
                  text: new ol.style.Text({
                    text: "●",
                    font: "60px sans-serif",
                    offsetX: -1 * iconOffset[0],
                    offsetY: -1 * iconOffset[1],
                    fill: new ol.style.Fill({
                      color: fillcolor
                    })
                  })
                }));
                style.push(new ol.style.Style({
                  text: new ol.style.Text({
                    text: size.toString(),
                    offsetX: -1 * iconOffset[0],
                    offsetY: -1 * iconOffset[1] + 3,
                    fill: new ol.style.Fill({
                      color: fontcolor
                    })
                  })
                }));
              }
            }
          } else {
            if (feature && feature.get('features') && feature.get('features')['0'].getStyle()) {
              return feature.get('features')['0'].getStyle()(feature);
            } else {
              return null;
            }
          }
          return style;
        };

        //vectorLayer = self.getVectorLayer(clusterSource, styleForCluster);

        vectorLayer = new ol.layer.Vector({
          name: 'Cluster',
          source: clusterSource,
          style: styleForCluster

        });

        var allLayers = proxy.options.mapController.map.getLayers().getArray();
        var missingLayer = true;
        for (i = 0; i < allLayers.length; i++) {

          if (allLayers[i].clusters) {
            allLayers[i] = vectorLayer;
            missingLayer = false;
          }
        }
        if (missingLayer) {
          proxy.options.mapController.map.addLayer(vectorLayer);
        }
      }
    } //end of combineLayers


  }, {
    key: "checkLayerIsActiveForZoom",
    value: function checkLayerIsActiveForZoom(layerId, opt_zoom) {
      var layer, zoom, layerContent, locstyle;

      if (!this.layerController.arrLayers[layerId]) {
        return false;
      }

      layer = this.layerController.arrLayers[layerId];

      if (opt_zoom) {
        zoom = opt_zoom;
      } else if (this.options.mapController.map.getView().getZoom() > -1) {
        zoom = this.options.mapController.map.getView().getZoom();
      } else {
        zoom = false;
      }
      if (layer.zoom === undefined) {
        if (layer.content && layer.content.length > 0) {
          for (var i = 0; i < layer.content.length; i++) {
            layerContent = layer.content[i];
            if (layerContent.locationStyle) {
              locstyle = this.locationStyleController.arrLocStyles[layerContent.locationStyle];
              // TODO check all locstyles and take the most constraining zoom value
              if (locstyle) {
                layer.zoom = {};
                if (locstyle.maxzoom) {
                  layer.zoom.max = locstyle.maxzoom;
                }
                if (locstyle.minzoom) {
                  layer.zoom.min = locstyle.minzoom;
                }
                if (layer.zoom.max || layer.zoom.min) {
                  break;
                }
              }
            }
          }
        }
      }
      if (typeof zoom === "number" && layer.zoom && (layer.zoom.min > zoom || layer.zoom.max > 0 && layer.zoom.max < zoom)) {
        return false;
      }

      return true;
    } // end of "checkLayerIsActive()"

  }]);

  return MapProxy;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-maps-utils.js":
/*!***********************************************!*\
  !*** ./Resources/public/js/c4g-maps-utils.js ***!
  \***********************************************/
/*! exports provided: utils */
/*! exports used: utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return utils; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_zoomlevel__ = __webpack_require__(/*! ./c4g-maps-control-zoomlevel */ "./Resources/public/js/c4g-maps-control-zoomlevel.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_popup_info_de__ = __webpack_require__(/*! ./c4g-maps-popup-info-de */ "./Resources/public/js/c4g-maps-popup-info-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_popup_info_en__ = __webpack_require__(/*! ./c4g-maps-popup-info-en */ "./Resources/public/js/c4g-maps-popup-info-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};







var popupFunctions = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    popupFunctions = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_popup_info_de__;
  } else if (mapData.lang === "en") {
    popupFunctions = __WEBPACK_IMPORTED_MODULE_4__c4g_maps_popup_info_en__;
  } else {
    // fallback
    popupFunctions = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_popup_info_de__;
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * c4g-Maps utility functions
   */

  c4g.maps.utils = $.extend(c4g.maps.utils, {
    /**
     *  Converts the first letter of a given string to uppercase, leaving the remaining string untouched.
     *
     *  @param    {string}    the string to capitalize
     *
     *  @return   {string}    the capitalized string
     */
    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    },

    /**
     * Generate an unique id.
     *
     * The id is 9 characters long and prefixed with an underscore.
     *
     * @return  {string}  The generated id.
     */
    getUniqueId: function getUniqueId() {
      // Math.random should be unique because of its seeding algorithm.
      // Convert it to base 36 (numbers + letters), and grab the first 9 characters
      // after the decimal.
      return '_' + Math.random().toString(36).substr(2, 9);
    },

    /**
     * Encode input strings for GeoJSON-Objects properly,
     * so they will not break the Code.
     * Transforms:
     *   \ -> \\;
     *   " -> '';
     *   Ä -> &Auml;
     *   ä -> &auml;
     *   Ö -> &Ouml;
     *   ö -> &ouml;
     *   Ü -> &Uuml;
     *   ü -> &uuml;
     *
     * @param   {string}  input  [description]
     *
     * @return  {string}         [description]
     */
    encodeGeoJsonProperty: function encodeGeoJsonProperty(input) {
      var output;

      if (!input) {
        return '';
      }

      output = input.replace(/\\/g, '\\\\').replace(/\"/g, '\'\'').replace(/Ä/g, '&Auml;').replace(/ä/g, '&auml;').replace(/Ö/g, '&Ouml;').replace(/ö/g, '&ouml;').replace(/Ü/g, '&Uuml;').replace(/ü/g, '&uuml;');

      return output;
    }, // end of encodeGeoJsonProperty()

    /**
     * Decode input strings for GeoJSON-Objects properly,
     * so they will be displayed correctly.
     * Transforms:
     *   \\     -> \;
     *   ''     -> ";
     *   &Auml; -> Ä
     *   &auml; -> ä
     *   &Ouml; -> Ö
     *   &ouml; -> ö
     *   &Uuml; -> Ü
     *   &uuml; -> ü
     *
     * @param   {string}  input  [description]
     *
     * @return  {string}         [description]
     */
    decodeGeoJsonProperty: function decodeGeoJsonProperty(input) {
      var output;

      if (!input) {
        return '';
      }
      if (typeof input !== "string") {
        input = input + "";
      }

      output = input.replace(/\\\\/g, '\\').replace(/\'\'/g, '\"').replace(/&Auml;/g, 'Ä').replace(/&auml;/g, 'ä').replace(/&Ouml;/g, 'Ö').replace(/&ouml;/g, 'ö').replace(/&Uuml;/g, 'Ü;').replace(/&uuml;/g, 'ü');

      return output;
    }, // end of decodeGeoJsonProperty()

    /**
     * Create or replace an URL-parameter.
     *
     * If `opt_getKey` is `false` or `undefined` the given parameter, `param`,
     * will be applied as "hash-parameter".
     * e.g.:
     *   https://myurl.de:port/path/to/maps#param
     * Note, that already existing "hash-parameters" will be overriden,
     * whereas existing "GET-parameters" stay untouched.
     *
     * If `opt_getKey` is set, it will be applied as "GET-parameter".
     * e.g.:
     *   https://myurl.de:port/path/to/maps?opt_getKey=param
     * If the key described by `opt_getKey` is already existing, its value will be overriden,
     * otherwise the key-value-pair will be appended appropriatly.
     * Already existing "hash-parameters" will stay untouched.
     *
     * If `opt_execute` is `false` or `undefined`, the function will return the new link as `string`,
     * otherwise the "href/location" will be changed directly in the browser, which can cause a pagereload.
     *
     * @param  {string}                    param        [description]
     * @param  {undefined|boolean|string}  opt_getKey   Default: `undefined`
     * @param  {undefined|boolean}         opt_execute  Default: `undefined`
     */
    setUrlParam: function setUrlParam(param, opt_getKey, opt_execute) {
      var link, searchParam, paramReplaced, i;

      if ((typeof param === "undefined" ? "undefined" : _typeof(param)) === undefined) {
        return false;
      }

      link = location.origin + location.pathname;

      if (!opt_getKey) {
        // use hash-parameter
        if (opt_execute) {
          location.hash = param;
          return true;
        }
        link += location.search + '#' + param;
      } else {
        // use GET-parameter
        if (location.search) {
          // there are already search-parameters
          paramReplaced = false;
          opt_getKey = opt_getKey.toLowerCase();
          // replace parameter if already existent
          searchParam = location.search.replace(/([^=\?\&]+)=([^&]+)/gi, function (match, key, value, offset, originString) {
            if (key === opt_getKey) {
              paramReplaced = true;
              return key + '=' + param;
            }
            return match;
          });
          // otherwise append as new parameter
          if (!paramReplaced) {
            searchParam += '&' + opt_getKey + '=' + param;
          }
        } else {
          // this will be the only search-parameter in the URL
          searchParam = '?' + opt_getKey + '=' + param;
        }
        if (opt_execute) {
          location.search = searchParam;
          return true;
        }
        link += searchParam + location.hash;
      }

      return link;
    }, // end of setUrlParam()

    /**
     * Get search or hash URL-parameter as string.
     *
     * If `opt_getKey` is `false` or `undefined`, the hash-parameter of the URL is returned,
     * otherwise it will search for a GET-parameter and return its value.
     *
     * If a parameter is not existent, or empty, an empty string will be returned.
     *
     * @param   {undefined|string}  opt_getKey  Default: `undefined`
     *
     * @return  {string}                        The found parameter.
     */
    getUrlParam: function getUrlParam(opt_getKey) {
      var param, regEx;

      if (!opt_getKey) {
        param = location.hash.substring(1);
      } else {
        if (!location.search) {
          param = '';
        } else {
          regEx = new RegExp('[\?\&]' + opt_getKey + '=([^&]+)', 'i');
          param = regEx.exec(location.search);
          param = param ? param[1] : '';
        }
      }

      return param;
    }, // end of getUrlParam()

    /**
     * Delta-encode an array of numbers.
     * Note that the array will be sorted (lowest to highest)
     * before encoding.
     *
     * So after the encoding the first value of the output contains
     * the smallest number of the set and each following number just
     * represents the offset to its previous neighbor.
     *
     * This is mostly efficient for high numbers, that are "close to each other".
     *
     * Example:
     *   [1337, 11, 101, 123, 96, 69, 42, 42]
     *   will be sorted
     *   [11, 42, 42, 69, 96, 101, 123, 1337]
     *   and encoded to
     *   [11, 31, 0, 27, 27, 5, 22, 1214]
     *
     * @param   {array<numbers>}  arrInput  [description]
     *
     * @return  {array<numbers>}            [description]
     */
    deltaEncode: function deltaEncode(arrInput) {
      var arrOutput, i;

      if (!arrInput) {
        return [];
      }
      if (arrInput.length === 1) {
        return arrInput;
      }

      arrInput.sort(function (a, b) {
        return a - b;
      });

      arrOutput = [];
      arrOutput[0] = arrInput[0];
      for (i = 1; i < arrInput.length; i += 1) {
        arrOutput[i] = arrInput[i] - arrInput[i - 1];
      }

      return arrOutput;
    }, // end of deltaEncode()

    /**
     * Decode a delta-encoded array.
     * See `deltaEncode` function for more detailed information.
     *
     * @param   {array<numbers>}  arrInput  [description]
     *
     * @return  {array<numbers>}            [description]
     */
    deltaDecode: function deltaDecode(arrInput) {
      var arrOutput, i;

      if (!arrInput) {
        return [];
      }

      arrOutput = [];
      arrOutput[0] = parseInt(arrInput[0], 10);
      if (isNaN(arrInput[0])) {
        return [];
      }
      for (i = 1; i < arrInput.length; i += 1) {
        arrOutput[i] = parseInt(arrInput[i], 10) + arrOutput[i - 1];
        if (isNaN(arrOutput[i])) {
          return [];
        }
      }

      return arrOutput;
    }, // end of deltaDecode()

    /**
     * Check and call functions in `arrHookFunctions` with given `parameters`.
     *
     * @param   {array<function>}   arrHookFunctions  [description]
     * @param   {mixed}             parameters        [description]
     */
    callHookFunctions: function callHookFunctions(arrHookFunctions, parameters) {
      var j;

      if (arrHookFunctions && arrHookFunctions.length > 0) {
        for (j = 0; j < arrHookFunctions.length; j += 1) {
          if (typeof arrHookFunctions[j] === 'function') {
            arrHookFunctions[j](parameters);
          }
        }
      }
    }, // end of "callHookFunctions()"

    /**
     * Convert a hex-formated color value into rgba()-format.
     *
     * @param   {string|number}  hex          [description]
     * @param   {string|number}  opt_opacity  [description]
     *
     * @return  {string}                      [description]
     */
    getRgbaFromHexAndOpacity: function getRgbaFromHexAndOpacity(hex, opt_opacity, opt_array) {

      var bigint, r, g, b, a;

      bigint = parseInt(hex, 16);
      if (opt_opacity && opt_opacity.value) {
        opt_opacity.value = parseInt(opt_opacity.value);
      }

      if (opt_opacity && typeof opt_opacity !== 'number') {
        if ((typeof opt_opacity === "undefined" ? "undefined" : _typeof(opt_opacity)) === 'object' && opt_opacity.value) {
          opt_opacity = opt_opacity.value;
        } else {
          opt_opacity = 100;
        }
      }

      r = bigint >> 16 & 255;
      g = bigint >> 8 & 255;
      b = bigint & 255;
      a = opt_opacity ? opt_opacity / 100 : 1;
      if (opt_array) {
        return [r, g, b, a];
      }

      return "rgba(" + r + "," + g + "," + b + "," + a + ")";
    },

    /**
     * Reduce a defined style, to a simpler version.
     *
     * The reduced style is the first style of the defined styleset,
     * with a 1px thick stroke and a circle with a 5px radius.
     *
     * This can be used to display additional geometries with a main-geometry,
     * without having to define a whole new style.
     *
     * @param   {number|string}           styleId  [description]
     *
     * @return  {array<ol.style.Style>}            [description]
     */
    reduceStyle: function reduceStyle(styleId) {
      var style, reducedStyle, fillStyle, strokeStyle;

      if (!c4g.maps.locationStyles[styleId] || !c4g.maps.locationStyles[styleId].style) {
        return [];
      }

      style = c4g.maps.locationStyles[styleId].style()[0];

      fillStyle = style.getFill();
      strokeStyle = style.getStroke();
      strokeStyle.setWidth(1);

      reducedStyle = new ol.style.Style({
        image: new ol.style.Circle({
          fill: fillStyle,
          stroke: strokeStyle,
          radius: 5
        }),
        // text: style.getText(),
        stroke: strokeStyle,
        fill: fillStyle
      });

      return [reducedStyle];
    }, // end of "reduceStyle"

    /**
     * Measure the dimensions of the given geometry.
     *
     * If the geometry is a `LineString` the function will measure its length,
     * is it a `Polygon` it will measure the acreage,
     * otherwise it will return `0`.
     *
     * If the optional `opt_forceLineMeasure` parameter is `true`
     * and the geometry is a `Polygon` it will measure its perimeter instead
     * of its acreage.
     *
     * @param   {ol.geom.LineString|ol.geom.Polygon}   geometry              [description]
     * @param   {undefined|boolean}                    opt_forceLineMeasure  [description]
     *
     * @return  {array<string>|number}                                       [description]
     */
    measureGeometry: function measureGeometry(geometry, opt_forceLineMeasure, opt_forceSurfaceMeasure) {
      var value, sphere, coordinates, coord1, coord2, result, i;

      if (!geometry) {
        return false;
      }

      //sphere = new ol.Sphere(6378137);
      result = {};

      if (geometry instanceof ol.geom.LineString || geometry instanceof ol.geom.Polygon && opt_forceLineMeasure) {

        coordinates = geometry.getCoordinates();
        if (geometry instanceof ol.geom.Polygon) {
          coordinates = coordinates[0];
        }
        value = 0;
        for (i = 0; i < coordinates.length - 1; i += 1) {
          coord1 = ol.proj.transform(coordinates[i], 'EPSG:3857', 'EPSG:4326');
          coord2 = ol.proj.transform(coordinates[i + 1], 'EPSG:3857', 'EPSG:4326');
          value += ol.sphere.getDistance(coord1, coord2, 6378137);
        }
        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (value > 1000) {
          result.htmlValue = (Math.round(value / 1000 * 100) / 100).toFixed(2) + ' ' + 'km';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm';
        }
      } else if (geometry instanceof ol.geom.Polygon) {
        //geometry = /** @type {ol.geom.Polygon} */(geometry.clone().transform('EPSG:3857', 'EPSG:4326'));
        //coordinates = geometry.getLinearRing(0).getCoordinates();
        value = Math.abs(ol.sphere.getArea(geometry));
        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (value > 10000) {
          result.htmlValue = (Math.round(value / 1000000 * 100) / 100).toFixed(2) + ' ' + 'km<sup>2</sup>';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm<sup>2</sup>';
        }
      } else if (geometry instanceof ol.geom.Circle && opt_forceSurfaceMeasure) {
        var center = geometry.getCenter();
        var radius = geometry.getRadius();
        var edgeCoordinate = [center[0] + radius, center[1]];
        //var wgs84Sphere = new ol.Sphere(6378137);
        var value = ol.sphere.getDistance(ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'), ol.proj.transform(edgeCoordinate, 'EPSG:3857', 'EPSG:4326'), 6378137);

        value = Math.PI * Math.sqrt(value);

        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (value > 10000) {
          result.htmlValue = (Math.round(value / 1000000 * 100) / 100).toFixed(2) + ' ' + 'km<sup>2</sup>';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm<sup>2</sup>';
        }
      } else if (geometry instanceof ol.geom.Circle) {
        var center = geometry.getCenter();
        var radius = geometry.getRadius();
        var edgeCoordinate = [center[0] + radius, center[1]];
        //var wgs84Sphere = new ol.Sphere(6378137);
        var value = ol.sphere.getDistance(ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'), ol.proj.transform(edgeCoordinate, 'EPSG:3857', 'EPSG:4326'), 6378137);

        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (result.rawValue > 10000) {
          result.htmlValue = (Math.round(value * 100 / 100) / 1000).toFixed(2) + ' ' + 'km';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm';
        }
      } else {
        result = 0;
      }

      return result;
    },

    /**
     * Calculate extent for an array of geometries.
     *
     * @param   {Array.<ol.geom.simpleGeometry>}  arrGeometries  [description]
     *
     * @return  {ol.Extent}                                      [description]
     */
    getExtentForGeometries: function getExtentForGeometries(arrGeometries) {
      var extentSource;

      if (!arrGeometries) {
        console.warn('Geometries missing for extent calculation');
        return false;
      }

      extentSource = new ol.source.Vector();
      extentSource.addFeatures(arrGeometries);

      return extentSource.getExtent() || ol.Extent([0, 0, 0, 0]);
    }, // end of getExtentForGeometries()

    /**
     * Fit view of `map` to a given array of `extents`.
     * Animated if `opt_animationDuration` is an integer > 0.
     *
     * @param   {object}     extents                 [description]
     * @param   {ol.Map}     map                    [description]
     * @param   {integer}    opt_animationDuration  [description]
     *
     * @return  {boolean}                           [description]
     */
    fitToExtents: function fitToExtents(extents, map, opt_padding, opt_animationDuration) {
      var view, padding, extent, key;

      if (!extents || !map) {
        console.warn('Missing extent or map for fitExtent');
        return false;
      }
      //extent = ol.extent.createEmpty();

      for (key in extents) {
        if (extents.hasOwnProperty(key)) {
          if (typeof extent === "undefined") {
            extent = extents[key];
          } else {
            ol.extent.extend(extent, extents[key]);
          }
        }
      }

      this.fitToExtent(extent, map, opt_padding, 5, 0, 0, 2);
    }, // end of fitToExtents

    /**
     * Fit view of `map` to a given `extent`.
     * Animated if `opt_animationDuration` is an integer > 0.
     *
     * @param   {ol.Extent}  extent                 [description]
     * @param   {ol.Map}     map                    [description]
     * @param   {array}      opt_padding            [description]
     * @param   {integer}    opt_animationDuration  [description]
     * @param   {integer}    opt_minZoom            [description]
     * @param   {integer}    opt_maxZoom            [description]
     * @param   {integer}    opt_minResolution      [description]
     *
     * @return  {boolean}                           [description]
     */
    fitToExtent: function fitToExtent(extent, map, opt_padding, opt_animationDuration, opt_minZoom, opt_maxZoom, opt_minResolution) {
      var view, padding, fitOptions;

      if (!extent || !map) {
        console.warn('Missing extent or map for fitExtent');
        return false;
      }

      view = map.getView();

      fitOptions = {
        'padding': opt_padding || [25, 25, 25, 25]
      };

      if (opt_minResolution && opt_minResolution > 0) {
        fitOptions.minResolution = opt_minResolution;
      }

      if (opt_minZoom && opt_minZoom >= 0) {
        fitOptions.minZoom = opt_minZoom;
      }

      if (opt_maxZoom && opt_maxZoom >= 0) {
        fitOptions.maxZoom = opt_maxZoom;
      }

      // animate the "fitting" when a duration is given and its greater than 0
      if (opt_animationDuration && opt_animationDuration > 0) {
        view.animate({
          start: +new Date(),
          duration: opt_animationDuration,
          resolution: view.getResolution(),
          center: [0, 0]
          //rotation: Math.PI
        });
        // map.beforeRender(
        //     ol.animation.pan({
        //       start: +new Date(),
        //       duration: opt_animationDuration,
        //       source: view.getCenter()
        //     }),
        //     ol.animation.zoom({
        //       start: +new Date(),
        //       duration: opt_animationDuration,
        //       resolution: view.getResolution()
        //     })
        // );
      }

      try {
        view.fit(extent, map.getSize(), { padding: [25, 25, 25, 25] });
        //view.fit(extent, map.getSize());
        //view.setZoom(view.getZoom()-1);
        return true;
      } catch (e) {
        return false;
      }
    }, // end of fitToExtent()

    /**
     * Convenience function to run all placeholder functions at once.
     *
     * @param   {string}                      strInput   [description]
     * @param   {ol.Feature}                  feature    [description]
     * @param   {ol.layer.Layer | undefined}  opt_layer  [description]
     *
     * @return  {string}                                 [description]
     */
    replaceAllPlaceholders: function replaceAllPlaceholders(strInput, feature, opt_layer) {
      var strOutput;

      // only check the first two parameters as they will be used by all placeholder-functions
      // -> for performance
      if (!strInput || !feature) {
        return strInput;
      }

      strOutput = this.replaceFunctionPlaceholders(strInput, feature, opt_layer);
      strOutput = this.replaceEditorVarsPlaceholders(strOutput, feature);
      strOutput = this.replaceAttributePlaceholders(strOutput, feature);

      return strOutput;
    }, // end of replaceAllPlaceholders()

    /**
     * Replace every occurance of `${FNfunctionName}`, in `strInput`,
     * with the result of `window.functionName(feature, style)`, if it exist.
     * Otherwise the placeholder will be simply removed (/replaced with '').
     * Style will be taken either from the feature, or the layer.
     *
     * @param   {string}          strInput  [description]
     * @param   {ol.Feature}      feature   [description]
     * @param   {ol.layer.Layer}  layer     [description]
     *
     * @return  {string}                    [description]
     */
    replaceFunctionPlaceholders: function replaceFunctionPlaceholders(strInput, feature, layer) {
      var strOutput;

      if (!strInput || !feature || !layer) {
        return strInput;
      }

      strOutput = strInput.replace(/\$\{FN([^\}]*)\}/g, function (match, functionName, offset, originString) {
        var style;

        // check if function exists
        if (typeof popupFunctions[functionName] === 'function') {
          // search style
          if (typeof feature.getStyle === 'function' && feature.getStyle() && typeof feature.getStyle() === 'function') {
            style = feature.getStyle();
          } else if (typeof layer.getStyle === 'function' && layer.getStyle()) {
            style = layer.getStyle();
          } else {
            return '';
          }
          return popupFunctions[functionName](feature, style);
        }
        return '';
      }); // end of replace()

      return strOutput;
    }, // end of replaceFunctionPlaceholders()

    /**
     * Replace placeholders, in `strInput`, for variables set by the geoEditor.
     * Valid placeholders are: ([key] represents the stringname of the variables key)
     *   `${EL[key]}`   =>  Label for the variable
     *   `${EVL[key]}`  =>  Label for the variable, if a value is set too
     *   `${EV[key]}`   =>  Value of the variable
     *   `${EVV[key]}`  =>  Same as `${EV[key]}`
     *
     * If no appropriate value can be found for a placeholder
     * it will simply be removed (/replaced with '').
     *
     * @param   {string}      strInput  [description]
     * @param   {ol.Feature}  feature   [description]
     *
     * @return  {string}                [description]
     */
    replaceEditorVarsPlaceholders: function replaceEditorVarsPlaceholders(strInput, feature) {
      var strOutput;

      if (!strInput || !feature || typeof feature.get !== 'function') {
        return strInput;
      }

      strOutput = strInput.replace(/\$\{(EV?[LV])([^\}]*)\}/g, function (match, type, evKey, offset, originString) {
        var editorVars, i;

        // check if feature has editorVars
        if (feature.get('editorVars')) {
          editorVars = feature.get('editorVars');
          // search for editorVar with key == evKey
          for (i = 0; i < editorVars.length; i += 1) {
            if (editorVars[i].key === evKey) {
              // if type is 'EVL' display label only if a value is set too
              if (type === 'EL' || type === 'EVL' && editorVars[i].value) {
                return editorVars[i].label;
              } else {
                return editorVars[i].value;
              }
            }
          }
        }
        return '';
      }); // end of replace()

      return strOutput;
    }, // end of replaceEditorVarsPlaceholders()

    /**
     * Replace every occurance of `${attr}`, in `strInput`,
     * with the result of `feature.get(attr)`, if it exist.
     * Otherwise the placeholder will be simply removed (/replaced with '').
     *
     * @param   {string}      strInput  [description]
     * @param   {ol.Feature}  feature   [description]
     *
     * @return  {string}                [description]
     */
    replaceAttributePlaceholders: function replaceAttributePlaceholders(strInput, feature) {
      var strOutput;

      if (!strInput || !feature || typeof feature.get !== 'function') {
        return strInput;
      }

      strOutput = strInput.replace(/\$\{([^\}]*)\}/g, function (match, attr, offset, originString) {
        return feature.get(attr) || '';
      }); // end of replace()

      return strOutput;
    }, // end of replaceAttributePlaceholders()

    objectToArray: function objectToArray(object) {
      if (object && (typeof object === "undefined" ? "undefined" : _typeof(object)) === 'object') {
        object = Object.keys(object).map(function (key) {
          return object[key];
        });
      }
      return object;
    }, // end of objectToArray()

    getVectorLayer: function getVectorLayer(source, style) {
      var fnStyle;

      // make sure that the style is a function
      if (typeof style === 'function') {
        fnStyle = style;
      } else if (style !== undefined) {
        fnStyle = function fnStyle() {
          return style;
        };
      }

      return new ol.layer.Vector({
        source: source,
        style: fnStyle
      });
    },
    // end of "getVectorLayer()"

    /**
     * Extracts the subdomain from the current request host and returns it.
     * @returns {string | *}
     */
    getCurrentSubdomain: function getCurrentSubdomain() {
      return window.location.href;
    },


    redrawMapView: function redrawMapView(mapController) {
      var mapData = mapController.data;
      var controlContainerTopLeft = document.createElement('div');
      controlContainerTopLeft.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TL + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
      mapController.$overlaycontainer_stopevent.prepend(controlContainerTopLeft);

      var controlContainerBottomLeft = document.createElement('div');
      controlContainerBottomLeft.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
      $(controlContainerTopLeft).after(controlContainerBottomLeft);
      mapController.leftSlideElements.push(controlContainerBottomLeft);

      var controlContainerBottomLeftSub = document.createElement('div');
      controlContainerBottomLeftSub.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL_SUB + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;

      if (mapData.scaleline) {
        mapController.map.removeControl(mapController.controls.scaleline);
        mapController.controls.scaleline = new ol.control.ScaleLine({
          mapView: mapController.map.getView(),
          target: controlContainerBottomLeft,
          undefinedHTML: 'N/A'
        });
        mapController.map.addControl(mapController.controls.scaleline);
      }

      $(controlContainerBottomLeft).append(controlContainerBottomLeftSub);

      if (mapData.zoomlevel) {
        mapController.map.removeControl(mapController.controls.zoomlevel);
        mapController.controls.zoomlevel = new __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_zoomlevel__["a" /* Zoomlevel */]({
          mapView: mapController.map.getView(),
          target: controlContainerBottomLeftSub,
          undefinedHTML: 'N/A'
        });
        mapController.map.addControl(mapController.controls.zoomlevel);
      }

      if (mapData.mouseposition) {
        mapController.map.removeControl(mapController.controls.mouseposition);
        mapController.controls.mouseposition = new ol.control.MousePosition({
          projection: 'EPSG:4326',
          coordinateFormat: ol.coordinate.toStringHDMS,
          target: controlContainerBottomLeftSub,
          undefinedHTML: 'N/A'
        });
        mapController.map.addControl(mapController.controls.mouseposition);
      }
    },
    getValue: function getValue(key) {
      return localStorage[key] || '';
    },
    storeValue: function storeValue(key, value) {
      localStorage[key] = value; // only strings
    }
  });
})(jQuery, this.c4g);

var utils = this.c4g.maps.utils;

/***/ }),

/***/ "./Resources/public/js/c4g-maps.js":
/*!*****************************************!*\
  !*** ./Resources/public/js/c4g-maps.js ***!
  \*****************************************/
/*! exports provided: MapController */
/*! exports used: MapController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MapController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_proxy__ = __webpack_require__(/*! ./c4g-maps-proxy */ "./Resources/public/js/c4g-maps-proxy.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__ = __webpack_require__(/*! ./c4g-maps-misc-spinner */ "./Resources/public/js/c4g-maps-misc-spinner.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_maphover__ = __webpack_require__(/*! ./c4g-maps-misc-maphover */ "./Resources/public/js/c4g-maps-misc-maphover.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__c4g_maps_control_portside_measuretools__ = __webpack_require__(/*! ./c4g-maps-control-portside-measuretools */ "./Resources/public/js/c4g-maps-control-portside-measuretools.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__c4g_maps_control_print__ = __webpack_require__(/*! ./c4g-maps-control-print */ "./Resources/public/js/c4g-maps-control-print.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__c4g_maps_control_grid__ = __webpack_require__(/*! ./c4g-maps-control-grid */ "./Resources/public/js/c4g-maps-control-grid.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__c4g_maps_control_zoomlevel__ = __webpack_require__(/*! ./c4g-maps-control-zoomlevel */ "./Resources/public/js/c4g-maps-control-zoomlevel.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__c4g_maps_control_overviewmap__ = __webpack_require__(/*! ./c4g-maps-control-overviewmap */ "./Resources/public/js/c4g-maps-control-overviewmap.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__c4g_maps_control_geosearch__ = __webpack_require__(/*! ./c4g-maps-control-geosearch */ "./Resources/public/js/c4g-maps-control-geosearch.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__c4g_maps_control_permalink__ = __webpack_require__(/*! ./c4g-maps-control-permalink */ "./Resources/public/js/c4g-maps-control-permalink.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__c4g_maps_control_starboard__ = __webpack_require__(/*! ./c4g-maps-control-starboard */ "./Resources/public/js/c4g-maps-control-starboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__c4g_maps_control_portside_editor__ = __webpack_require__(/*! ./c4g-maps-control-portside-editor */ "./Resources/public/js/c4g-maps-control-portside-editor.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__c4g_maps_control_portside_account__ = __webpack_require__(/*! ./c4g-maps-control-portside-account */ "./Resources/public/js/c4g-maps-control-portside-account.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__c4g_maps_interaction_geopicker__ = __webpack_require__(/*! ./c4g-maps-interaction-geopicker */ "./Resources/public/js/c4g-maps-interaction-geopicker.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__c4g_maps_control_home__ = __webpack_require__(/*! ./c4g-maps-control-home */ "./Resources/public/js/c4g-maps-control-home.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__c4g_maps_control_position__ = __webpack_require__(/*! ./c4g-maps-control-position */ "./Resources/public/js/c4g-maps-control-position.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__c4g_maps_control_portside_infopage__ = __webpack_require__(/*! ./c4g-maps-control-portside-infopage */ "./Resources/public/js/c4g-maps-control-portside-infopage.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};

//for jslint
/*jslint browser:true*/
/*jslint todo:true */
/*global window*/
/*global ol*/
/*global Browser*/
/*global Document:true */
/*global jQuery*/
var c4g = this.c4g;























var langConstants = {};

if (typeof mapData !== "undefined") {
    if (mapData.lang === "de") {
        langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
    } else if (mapData.lang === "en") {
        langConstants = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
    } else {
        // fallback
        langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
    }
}

(function ($, c4g) {
    'use strict';

    /**
     * [MapController description]
     * @param {json-object}  mapData  Object to configure con4gis-maps.
     *                                See "docs/mapData-values.md"
     *                                to get a list of valid values for this object.
     */

    c4g.maps.MapController = function (mapData) {

        //---
        this.map = null;
        // this.controls = null;
        this.leftSlideElements = [];
        this.rightSlideElements = [];

        var self = this,
            permalink = false,
            minZoom,
            maxZoom,
            view,
            geoLocation,
            controls = [],
            interactions = [],
            _displayAllLocations,
            domMapDiv,
            kinetic,
            controlContainerTopLeft,
            controlContainerBottomLeft,
            controlContainerTopRight,
            controlContainerBottomRight,
            controlContainerBottomLeftSub,
            starboard_label,
            logoLink,
            logoGraphic,
            removeElement,
            enableStarboard = true;

        //--
        mapData = $.extend({
            api: {},
            addIdToDiv: false,
            mapId: 1,
            mapDiv: 'c4g_map',
            center: {},
            calc_extent: 'CENTERZOOM',
            attribution: {},
            editor: {},
            measuretools: {},
            infopage: {},
            account: '',
            starboard: {},
            layerswitcher: {},
            baselayerswitcher: {},
            geosearch: {}
        }, mapData);
        if (mapData.calc_extent === 'LOCATIONS') {
            mapData = $.extend({
                min_gap: 25
            }, mapData);
        }

        // center
        mapData.center = $.extend({
            lat: 52.22,
            lon: 9.43,
            rotation: 0,
            zoom: 6
        }, mapData.center);
        // attribution
        mapData.attribution = $.extend({
            enable: true,
            collapsed: false,
            collapsible: true
        }, mapData.attribution);
        // geosearch
        mapData.geosearch = $.extend({
            enable: false,
            div: false
        }, mapData.geosearch);
        // permalink
        mapData.permalink = $.extend({
            enable: false,
            get_parameter: false
        }, mapData.permalink);
        this.data = mapData;
        if (mapData.addIdToDiv) {
            mapData.mapDiv += '_' + mapData.mapId;
        }
        // PHPStorm marks this as error, but it is none
        // This is needed for preventing an error with the OSM-Overpass API
        // which occurs when MooTools is loaded
        if (window.MooTools && Browser.Document) {
            Document = Browser.Document;
        }
        this.proxy = new __WEBPACK_IMPORTED_MODULE_0__c4g_maps_proxy__["a" /* MapProxy */]({ mapController: this });

        // check permalink
        if (mapData.permalink.enable) {
            permalink = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getUrlParam(mapData.permalink.get_parameter);

            if (permalink) {
                permalink = permalink.split('/');
                switch (permalink.length) {
                    case 6:
                        permalink[0] = parseFloat(permalink[0]);
                        mapData.center.lon = !isNaN(permalink[0]) ? permalink[0] : mapData.center.lon;
                        permalink[1] = parseFloat(permalink[1]);
                        mapData.center.lat = !isNaN(permalink[1]) ? permalink[1] : mapData.center.lat;
                        permalink[2] = parseInt(permalink[2], 10);
                        mapData.center.zoom = !isNaN(permalink[2]) ? permalink[2] : mapData.center.zoom;
                        permalink[3] = parseFloat(permalink[3]);
                        mapData.center.rotation = !isNaN(permalink[3]) ? permalink[3] : mapData.center.rotation;
                        permalink[4] = parseInt(permalink[4], 10);
                        mapData.baselayer = !isNaN(permalink[4]) ? permalink[4] : mapData.baselayer;
                        mapData.layers = permalink[5].split(':');
                        // decode deltaEncoding
                        mapData.layers = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].deltaDecode(mapData.layers);
                        break;
                    case 2:
                        // baselayer and layers only
                        permalink[0] = parseInt(permalink[0], 10);
                        mapData.baselayer = !isNaN(permalink[0]) ? permalink[0] : mapData.baselayer;
                        mapData.layers = permalink[1].split(':');
                        // decode deltaEncoding
                        mapData.layers = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].deltaDecode(mapData.layers);
                        break;
                    case 1:
                        // layers only
                        mapData.layers = permalink[0].split(':');
                        // decode deltaEncoding
                        mapData.layers = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].deltaDecode(mapData.layers);
                        break;
                    default:
                        // invalid count of permalink parameters
                        permalink = false;
                }
                if (mapData.layers.length < 1) {
                    mapData.layers = false;
                    permalink = false;
                }
            } else {
                // just to make sure this var is really "false"
                permalink = false;
            }
        }

        if (mapData.minZoom && mapData.minZoom > 0) {
            minZoom = mapData.minZoom;
        } else {
            minZoom = 0;
        }

        if (mapData.maxZoom && mapData.maxZoom > 0) {
            maxZoom = mapData.maxZoom;
        } else {
            maxZoom = 19;
        }

        if (mapData.caching) {
            if (__WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('lon') && __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('lat')) {
                mapData.center.lon = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('lon');
                mapData.center.lat = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('lat');
            }

            if (__WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('zoom')) {
                mapData.center.zoom = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('zoom');
            }
        }

        view = new ol.View({
            // projection: ol.proj.get('EPSG:4326'),
            // center: [parseFloat(mapData.center_lon), parseFloat(mapData.center_lat)],
            // minResolution: undefined,
            // maxResolution: undefined,
            center: ol.proj.transform([parseFloat(mapData.center.lon), parseFloat(mapData.center.lat)], 'EPSG:4326', 'EPSG:3857'),
            zoom: parseInt(mapData.center.zoom, 10),
            minZoom: parseInt(minZoom, 10),
            maxZoom: parseInt(maxZoom, 10),
            rotation: parseFloat(mapData.center.rotation)
        });

        // check userposition
        if (mapData.geolocation && !permalink) {
            geoLocation = new ol.Geolocation({
                //tracking: !mapData.geopicker,
                tracking: true,
                projection: view.getProjection()
            });
            geoLocation.on('change', function (evt) {
                if (geoLocation) {
                    view.setCenter(geoLocation.getPosition());
                    if (mapData.geolocation_zoom) {
                        view.setZoom(parseInt(mapData.geolocation_zoom, 10));
                    }
                    geoLocation.setTracking(false);
                    if (self.map) {
                        self.map.setView(view);
                        if (self.$overlaycontainer_stopevent) {
                            __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].redrawMapView(self);
                        }
                    }
                }
            });
        }

        // enable default Controls/Interactions if there is no profile
        // [note]: maybe change this in the future? -> "no default"-option?
        if (!mapData.profile) {
            controls = ol.control.defaults();
            interactions = ol.interaction.defaults();
        }

        // set default base layer when backend geopicker is enabled
        if (mapData.geopicker && mapData.geopicker.type === "backend") {
            if (mapData.default_baselayer) {
                this.proxy.hook_baselayer_loaded.push(function (baselayerIds) {
                    self.proxy.baselayerController.showBaseLayer(mapData.default_baselayer);
                });
            } // end inner if
            this.map = new ol.Map({
                controls: controls,
                interactions: interactions,
                layers: [new ol.layer.Group({
                    title: 'Base maps',
                    layers: [],
                    checkSum: 'baseMapsLayer'
                })],
                loadTilesWhileAnimating: true,
                target: mapData.mapDiv,
                view: view
            });
        } else {
            // initialize Map
            //

            if (mapData.default_baselayer) {
                this.proxy.hook_baselayer_loaded.push(function (baselayerIds) {
                    if (mapData.baselayer && baselayerIds.indexOf(mapData.baselayer.toString()) > -1) {
                        mapData.default_baselayer = mapData.baselayer;
                    }

                    if (mapData.caching) {
                        if (__WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('baselayer')) {
                            mapData.default_baselayer = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('baselayer');
                        }
                    }

                    self.proxy.baselayerController.showBaseLayer(mapData.default_baselayer);
                });
            }
            this.map = new ol.Map({
                controls: controls,
                interactions: interactions,
                layers: [new ol.layer.Group({
                    title: 'Base maps',
                    layers: [],
                    checkSum: 'baseMapsLayer'
                })],
                loadTilesWhileAnimating: true,
                target: mapData.mapDiv,
                view: view
            });
        }

        mapData.map = this.map;

        // set extent to make all locations visible if wanted
        if (mapData.calc_extent === "LOCATIONS") {
            _displayAllLocations = function displayAllLocations(layerIds) {
                var layers = self.proxy.layerController.arrLayers,
                    layer,
                    geometry,
                    coords,
                    padding,
                    coordinates,
                    extent,
                    featureList,
                    featureArray,
                    key,
                    vectorArray,
                    layerGroup,
                    center;
                // delete function from hook array
                delete this[this.indexOf(_displayAllLocations)];
                coordinates = [];
                // calculate resulting extent of all geometries
                for (key in layers) {
                    if (layers.hasOwnProperty(key)) {
                        layer = layers[key];
                        if (layer.type == "overpass") {
                            continue;
                        }
                        vectorArray = layer.content;
                        if (vectorArray === undefined) {
                            // catch case of linked layers
                            continue;
                        }
                        if ((typeof vectorArray === "undefined" ? "undefined" : _typeof(vectorArray)) === "object") {
                            vectorArray = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].objectToArray(vectorArray);
                        }
                        layerGroup = layer.vectorLayer;
                        if (vectorArray && vectorArray.forEach && typeof vectorArray.forEach === 'function') {
                            vectorArray.forEach(function (vectorLayer) {
                                if (vectorLayer && vectorLayer.data && vectorLayer.data.geometry && vectorLayer.data.geometry.coordinates) {
                                    if (vectorLayer.data.geometry.type === "Point") {
                                        coords = ol.proj.transform([parseFloat(vectorLayer.data.geometry.coordinates[0]), parseFloat(vectorLayer.data.geometry.coordinates[1])], 'EPSG:4326', 'EPSG:3857');
                                        if (coords[0] == "Infinity" || coords[0] == "-Infinity") {
                                            return;
                                        }
                                        geometry = new ol.geom.Point(coords);
                                        coordinates.push(geometry.getCoordinates());
                                    }
                                }
                            });
                        }
                        if (layerGroup) {
                            // handle more complex geometries
                            featureList = layerGroup.getLayers();
                            featureArray = featureList.getArray();
                            featureArray.forEach(function (feature) {
                                if (layer.type === "kml") {
                                    var source = feature.getSource();
                                    //var sourceFeatures = source.getFeatures();
                                    source.getExtent().forEach(function (coordinate) {
                                        coordinates.push(coordinate);
                                    });
                                } else {
                                    coordinates.push(ol.extent.getTopRight(feature.getSource().getExtent()));
                                    coordinates.push(ol.extent.getTopLeft(feature.getSource().getExtent()));
                                    coordinates.push(ol.extent.getBottomRight(feature.getSource().getExtent()));
                                    coordinates.push(ol.extent.getBottomLeft(feature.getSource().getExtent()));
                                }
                            });
                        }
                    }
                }
                extent = ol.extent.boundingExtent(coordinates);
                if (extent[0] == "Infinity" || extent[0] == "-Infinity") {
                    return;
                }
                //TODO: catch case min_gap is already an array
                padding = [mapData.min_gap, mapData.min_gap, mapData.min_gap, mapData.min_gap];
                self.map.getView().fit(extent, self.map.getSize(), { padding: padding });
                center = self.map.getView().getCenter();
                if (isNaN(center[0])) {
                    self.map.getView().setCenter([50, 10]);
                    self.map.getView().setZoom(mapData.minZoom || 10);
                }
            };
            this.proxy.hook_layer_visibility.push(_displayAllLocations);
        }

        // set map-size and -margin
        domMapDiv = document.getElementById(mapData.mapDiv);

        if (domMapDiv && domMapDiv.style) {
            if (mapData.width) {
                domMapDiv.style.width = mapData.width;
            }
            if (mapData.height) {
                domMapDiv.style.height = mapData.height;
            }
            if (mapData.margin) {
                domMapDiv.style.margin = mapData.margin;
            }
        } else {
            console.warn('can not get element by id mapData.mapDiv');
            return;
        }

        this.map.updateSize();
        this.proxy.initialize();
        // this.proxy.loadBaseLayers();
        // this.proxy.loadLayers();
        // ---

        // save overlaycontainer
        this.$overlaycontainer_stopevent = $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_OVERLAYCONTAINER_SE);
        // add Spinner
        this.spinner = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__["a" /* Spinner */]({ className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].LARGE });
        // add mapHover
        this.mapHover = new __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_maphover__["a" /* MapHover */]({ mapController: this });

        // add interactions ===
        //

        // mouse navigation
        if (mapData.mouse_nav) {
            // drag pan and kinetic scrolling
            if (mapData.mouse_nav.drag_pan) {
                kinetic = mapData.mouse_nav.kinetic ? new ol.Kinetic(-0.005, 0.05, 100) : null;
                this.map.addInteraction(new ol.interaction.DragPan({ kinetic: kinetic }));
            }
            // mousewheel zoom
            if (mapData.mouse_nav.wheel_zoom) {
                this.map.addInteraction(new ol.interaction.MouseWheelZoom());
            }
            // doubleclick zoom
            if (mapData.mouse_nav.doubleclick_zoom) {
                this.map.addInteraction(new ol.interaction.DoubleClickZoom());
            }
            // box zoom
            if (mapData.mouse_nav.drag_zoom) {
                this.map.addInteraction(new ol.interaction.DragZoom({ condition: ol.events.condition.shiftKeyOnly }));
            }
            // drag rotate (& zoom)
            if (mapData.mouse_nav.drag_rotate_zoom) {
                this.map.addInteraction(new ol.interaction.DragRotateAndZoom({ condition: ol.events.condition.altKeyOnly }));
            } else if (mapData.mouse_nav.drag_rotate) {
                this.map.addInteraction(new ol.interaction.DragRotate({ condition: ol.events.condition.altKeyOnly }));
            }
        }
        // touch navigation
        if (mapData.touch_nav) {
            // rotate (pinch)
            if (mapData.touch_nav.rotate) {
                this.map.addInteraction(new ol.interaction.PinchRotate());
            }
            // zoom (pinch)
            if (mapData.touch_nav.zoom) {
                this.map.addInteraction(new ol.interaction.PinchZoom({ constrainResolution: true }));
            }
        }
        // keyboard navigation
        if (mapData.keyboard_nav) {
            // pan (arrow keys)
            if (mapData.keyboard_nav.pan) {
                this.map.addInteraction(new ol.interaction.KeyboardPan());
            }
            // zoom ("+" and "-" key)
            if (mapData.keyboard_nav.zoom) {
                this.map.addInteraction(new ol.interaction.KeyboardZoom());
            }
        }
        // ===

        // add control-containers ===
        //
        // top-left
        controlContainerTopLeft = document.createElement('div');
        controlContainerTopLeft.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TL + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        this.$overlaycontainer_stopevent.prepend(controlContainerTopLeft);
        // bottom-left
        controlContainerBottomLeft = document.createElement('div');
        controlContainerBottomLeft.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        $(controlContainerTopLeft).after(controlContainerBottomLeft);
        // element needs to be moved when Portside will be opened
        this.leftSlideElements.push(controlContainerBottomLeft);
        // top-right
        controlContainerTopRight = document.createElement('div');
        controlContainerTopRight.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TR + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        $(controlContainerBottomLeft).after(controlContainerTopRight);
        // element needs to be moved when Starboard will be opened
        this.rightSlideElements.push(controlContainerTopRight);
        // bottom-right
        controlContainerBottomRight = document.createElement('div');
        controlContainerBottomRight.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BR + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        $(controlContainerTopRight).after(controlContainerBottomRight);
        // element needs to be moved when Starboard will be opened
        this.rightSlideElements.push(controlContainerBottomRight);
        // ===
        // add controls ===
        this.controls = {};
        //


        // account
        if (mapData.account && typeof __WEBPACK_IMPORTED_MODULE_16__c4g_maps_control_portside_account__["a" /* Account */] === 'function') {
            this.controls.account = new __WEBPACK_IMPORTED_MODULE_16__c4g_maps_control_portside_account__["a" /* Account */]({
                tipLabel: langConstants.CTRL_ACCOUNT,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.account);
        }

        // zoom-controls
        if (mapData.zoom_panel || mapData.zoom_slider) {
            this.controls.zoom = new ol.control.Zoom({
                zoomInLabel: ' ',
                zoomOutLabel: ' ',
                zoomInTipLabel: langConstants.CTRL_ZOOM_IN,
                zoomOutTipLabel: langConstants.CTRL_ZOOM_OUT,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.zoom);

            if (mapData.zoom_slider) {
                this.controls.zoomslider = new ol.control.ZoomSlider({
                    label: ' ',
                    tipLabel: langConstants.CTRL_ZOOM_SLIDER,
                    target: controlContainerTopLeft
                });
                this.map.addControl(this.controls.zoomslider);
            }
        }
        if (mapData.zoom_extent & !mapData.zoom_slider) {
            this.controls.zoom_extent = new ol.control.ZoomToExtent({
                label: ' ',
                tipLabel: langConstants.CTRL_ZOOM_EXT,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.zoom_extent);
        }
        if (mapData.zoom_home & !mapData.zoom_slider) {
            this.controls.zoom_home = new __WEBPACK_IMPORTED_MODULE_18__c4g_maps_control_home__["a" /* Home */]({
                label: ' ',
                disableLabel: ' ',
                tipLabel: langConstants.CTRL_ZOOM_HOME,
                target: controlContainerTopLeft,
                mapController: this
            });
            this.map.addControl(this.controls.zoom_home);
        }

        if (mapData.zoom_position & !mapData.zoom_slider) {
            this.controls.zoom_position = new __WEBPACK_IMPORTED_MODULE_19__c4g_maps_control_position__["a" /* Position */]({
                label: ' ',
                disableLabel: ' ',
                tipLabel: langConstants.CTRL_ZOOM_POS,
                target: controlContainerTopLeft,
                mapController: this
            });
            this.map.addControl(this.controls.zoom_position);
        }

        // combined zoom-controls
        if (mapData.zoom_slider) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_SLIDER).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_SLIDER + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_SLIDER));
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_SLIDER + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL).remove();
        }

        if (mapData.zoom_panel && mapData.zoom_extent) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_EXT).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_EXT + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_EXT));
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_EXT + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL).remove();
        }

        if (mapData.zoom_panel && mapData.zoom_home) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_HOME).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_HOME + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_HOME));
            removeElement = controlContainerTopLeft.querySelector('.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_HOME + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + '.button');
            if (removeElement) {
                try {
                    removeElement.remove();
                } catch (err) {
                    //ie 11 error
                }
            }
        }

        if (mapData.zoom_panel && mapData.zoom_position) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_POS).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS));
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL).remove();
            removeElement = controlContainerTopLeft.querySelector('.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + '.button');
            if (removeElement) {
                try {
                    removeElement.remove();
                } catch (err) {
                    //ie 11 error
                }
            }
        }

        // fullscreen
        if (mapData.fullscreen) {
            this.controls.fullscreen = new ol.control.FullScreen({
                label: ' ',
                labelActive: ' ',
                tipLabel: langConstants.CTRL_FULLSCREEN,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.fullscreen);
        }

        // router
        if (mapData.router_enable && typeof Router === 'function') {
            this.controls.router = new Router({
                tipLabel: langConstants.CTRL_ROUTER,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.router);
        }
        // editor
        if (mapData.editor.enable && typeof __WEBPACK_IMPORTED_MODULE_15__c4g_maps_control_portside_editor__["a" /* Editor */] === 'function') {
            this.controls.editor = new __WEBPACK_IMPORTED_MODULE_15__c4g_maps_control_portside_editor__["a" /* Editor */]({
                tipLabel: langConstants.CTRL_EDITOR,
                type: mapData.editor.type || 'frontend',
                target: mapData.editor.target || controlContainerTopLeft,
                initOpen: mapData.editor.open || false,
                dataField: mapData.editor.data_field || false,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.editor);
        }
        // measuretools
        if (mapData.measuretools.enable && typeof __WEBPACK_IMPORTED_MODULE_7__c4g_maps_control_portside_measuretools__["a" /* Measuretools */] === 'function') {
            this.controls.measuretools = new __WEBPACK_IMPORTED_MODULE_7__c4g_maps_control_portside_measuretools__["a" /* Measuretools */]({
                tipLabel: langConstants.CTRL_MEASURETOOLS,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.measuretools);
        }
        //
        if (mapData.print) {
            this.controls.print = new __WEBPACK_IMPORTED_MODULE_8__c4g_maps_control_print__["a" /* Print */]({
                label: "",
                tipLabel: langConstants.CTRL_PRINT,
                target: controlContainerTopLeft,
                mapController: this
            });
            this.map.addControl(this.controls.print);
        }

        // show graticule (grid)
        if (mapData.graticule) {
            this.controls.graticule = new __WEBPACK_IMPORTED_MODULE_9__c4g_maps_control_grid__["a" /* Grid */]({
                label: ' ',
                disableLabel: ' ',
                tipLabel: langConstants.CTRL_GRID,
                caching: mapData.caching,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.graticule);
        }
        // rotate-control
        //TODO: use something like "mapData.rotate"
        //   Check: mapData.mouse_nav (defined?)
        if (mapData.mouse_nav && (mapData.mouse_nav.drag_rotate || mapData.mouse_nav.drag_rotate && mapData.mouse_nav.drag_rotate_zoom)) {
            this.controls.rotate = new ol.control.Rotate({
                label: ' ',
                tipLabel: langConstants.CTRL_RESET_ROTATION,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.rotate);
        }
        // infopage
        if (mapData.infopage && typeof __WEBPACK_IMPORTED_MODULE_20__c4g_maps_control_portside_infopage__["a" /* Infopage */] === 'function') {
            this.controls.infopage = new __WEBPACK_IMPORTED_MODULE_20__c4g_maps_control_portside_infopage__["a" /* Infopage */]({
                tipLabel: langConstants.CTRL_INFOPAGE,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.infopage);
        }
        // @ToDo mapData.additionalPanel is always true, because it is set as an new object in the beginning. Therefore the second parameter of the boolean is requested, which throws an error
        // additionalPanel is furthermore not found anywhere in Maps and should be loaded over a hook

        // if (mapData.additionalPanel && typeof c4g.maps.control.additionalPanel === 'function') {
        //   this.controls.additionalPanel = new c4g.maps.control.additionalPanel({
        //     tipLabel: langConstants.CTRL_ADDITIONALPANEL,
        //     target: controlContainerTopLeft,
        //     caching: mapData.caching,
        //     mapController: this
        //   });
        //   this.map.addControl(this.controls.additionalPanel);
        // }


        // scaleline
        if (mapData.scaleline) {
            this.controls.scaleline = new ol.control.ScaleLine({
                target: controlContainerBottomLeft
            });
            this.map.addControl(this.controls.scaleline);
        }

        // zoom-level & mouse-position
        if (mapData.zoomlevel || mapData.mouseposition) {
            // wrapper for zoom-level and mouse-position
            controlContainerBottomLeftSub = document.createElement('div');
            controlContainerBottomLeftSub.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL_SUB + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
            $(controlContainerBottomLeft).append(controlContainerBottomLeftSub);
            // display zoom-level
            if (mapData.zoomlevel) {
                this.controls.zoomlevel = new __WEBPACK_IMPORTED_MODULE_10__c4g_maps_control_zoomlevel__["a" /* Zoomlevel */]({
                    mapView: view,
                    target: controlContainerBottomLeftSub,
                    undefinedHTML: 'N/A'
                });
                this.map.addControl(this.controls.zoomlevel);
            }
            // display mouse-position
            if (mapData.mouseposition) {
                this.controls.mouseposition = new ol.control.MousePosition({
                    projection: 'EPSG:4326',
                    coordinateFormat: ol.coordinate.toStringHDMS,
                    target: controlContainerBottomLeftSub,
                    undefinedHTML: 'N/A'
                });
                this.map.addControl(this.controls.mouseposition);
            }
        }

        // geosearch
        if (mapData.geosearch.enable) {
            this.controls.geosearch = new __WEBPACK_IMPORTED_MODULE_12__c4g_maps_control_geosearch__["a" /* GeoSearch */]({
                mapController: this,
                target: controlContainerTopRight,
                extDiv: mapData.geosearch.div || false,
                collapsible: true,
                collapsed: mapData.geosearch.collapsed,
                label: ' ',
                collapsedLabel: '',
                // engineUrl: mapData.geosearch.engine,
                searchZoom: mapData.geosearch.searchzoom,
                zoomBounds: mapData.geosearch.zoombounds,
                quicksearch: true,
                animate: mapData.geosearch.animate,
                markResult: mapData.geosearch.markresult,
                popup: mapData.geosearch.popup,
                autopick: mapData.geopicker,
                caching: mapData.caching,
                results: mapData.geosearch.results
            });
            this.map.addControl(this.controls.geosearch);
        }

        // geobookmarks - not ready
        if (mapData.geobookmarks) {
            this.controls.geobookmarks = new ol.control.GeoBookmark({
                //target: controlContainerTopRight
                label: ' ',
                tipLabel: langConstants.CTRL_GEOBOOKMARKS,
                placeholder: langConstants.GEOBOOKMARKS_PLACEHOLDER,
                namespace: 'c4g_geobookmarks' /*,
                                              className: cssConstants.GEOBOOKMARKS*/ //ToDo implement for own styling
            });
            this.map.addControl(this.controls.geobookmarks);
            this.rightSlideElements.push('.ol-bookmark');
        }

        // overview-map
        if (mapData.overviewmap) {
            this.controls.overviewmap = new __WEBPACK_IMPORTED_MODULE_11__c4g_maps_control_overviewmap__["a" /* OverviewMap */]({
                target: controlContainerTopRight
            });
            this.map.addControl(this.controls.overviewmap);
        }

        // starboard
        if (mapData.geopicker && mapData.geopicker.type === "backend") {
            enableStarboard = false;
        }

        // popup margin
        //this.leftSlideElements.push('.ol-overlay-container');
        //this.rightSlideElements.push('.ol-overlay-container');

        if (typeof __WEBPACK_IMPORTED_MODULE_14__c4g_maps_control_starboard__["a" /* Starboard */] === 'function' && enableStarboard) {
            this.initializeStarboard();
        }

        // backend-geopicker
        if (mapData.geopicker && (mapData.geopicker.type === "backend" || mapData.geopicker.type === "frontend")) {
            this.controls.geopicker = new __WEBPACK_IMPORTED_MODULE_17__c4g_maps_interaction_geopicker__["a" /* GeoPicker */]({
                mapContainer: this
            });
            this.map.addInteraction(this.controls.geopicker);
            if (mapData.geopicker.type === "frontend") {
                // substring is needed here for taking out the #
                if (mapData.geopicker.input_geo_x && mapData.geopicker.input_geo_x) {
                    var geoxField = document.getElementById(mapData.geopicker.input_geo_x.substring(1));
                    var geoyField = document.getElementById(mapData.geopicker.input_geo_y.substring(1));
                    if (geoxField && geoyField) {
                        var locGeox = geoxField.value;
                        var locGeoy = geoyField.value;
                        if (locGeox && locGeoy) {
                            var numerized = [parseFloat(locGeox, 10), parseFloat(locGeoy, 10)];
                            var transformed = ol.proj.transform(numerized, ol.proj.get('EPSG:4326'), ol.proj.get('EPSG:3857'));
                            geoLocation = null;
                            this.map.getView().setCenter(transformed);
                        }
                    }
                }
            }
        }

        // show attribution
        if (mapData.attribution.enable) {
            // @TODO: create own attribution-control
            if (mapData.attribution.cfg_logo) {
                logoLink = document.createElement('a');
                logoLink.href = 'https://con4gis.org';
                logoLink.title = 'built with con4gis';
                logoLink.target = '_blank';
                logoLink.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ATTRIBUTION_LOGO;
                logoGraphic = document.createElement('img');
                logoGraphic.src = 'bundles/con4gismaps/images/logo_con4gis.svg';
                logoLink.appendChild(logoGraphic);
                controlContainerBottomRight.appendChild(logoLink);
            }
            this.controls.attribution = new ol.control.Attribution({
                label: ' ',
                tipLabel: langConstants.CTRL_ATTRIBUTION,
                collapseLabel: ' ',
                target: controlContainerBottomRight,
                collapsible: true
            });
            this.controls.attribution.setCollapsed(mapData.attribution.collapsed === '1');
            this.map.addControl(this.controls.attribution);
        }

        // show permalink
        if (mapData.permalink.enable) {
            this.controls.permalink = new __WEBPACK_IMPORTED_MODULE_13__c4g_maps_control_permalink__["a" /* Permalink */]({
                label: ' ',
                tipLabel: langConstants.CTRL_PERMALINK,
                mapController: this,
                getParameter: mapData.permalink.get_parameter,
                target: controlContainerBottomRight
            });
            this.map.addControl(this.controls.permalink);
        }

        //themeData
        if (mapData.themeData) {
            domMapDiv = document.getElementById(mapData.mapDiv);
            if (mapData.themeData['useglobal']) {
                domMapDiv = document.getElementById('wrapper');
            };

            if (mapData.themeData['maincolor']) {
                var mainColor = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(mapData.themeData['maincolor'], mapData.themeData['mainopacity']);
                var fontColor = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(mapData.themeData['fontcolor'], mapData.themeData['fontopacity']);
                var shadowColor = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(mapData.themeData['shadowcolor'], mapData.themeData['shadowopacity']);

                if (domMapDiv && domMapDiv.style) {
                    domMapDiv.style.setProperty('--main-color', mainColor);
                    domMapDiv.style.setProperty('--font-color', fontColor);
                    domMapDiv.style.setProperty('--shadow-color', shadowColor);
                }
            }

            if (mapData.themeData['buttonradius']) {
                domMapDiv.style.setProperty('--button-radius-percent', mapData.themeData['buttonradius'] + '%');
                domMapDiv.style.setProperty('--button-radius-pixel', mapData.themeData['buttonradius'] + 'px');
            }
        }
        if (window.c4gMapsHooks !== undefined && Array.isArray(window.c4gMapsHooks.mapController_addControls)) {
            __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.mapController_addControls, { mapController: this, Container: controlContainerTopLeft });
        }
    };
    // Add methods
    c4g.maps.MapController.prototype = $.extend(c4g.maps.MapController.prototype, {
        initializeStarboard: function initializeStarboard() {
            var mapData = this.data;
            var starboard_label = void 0;
            if (mapData.starboard.label) {
                starboard_label = langConstants.CTRL_STARBOARD.replace('Starboard', mapData.starboard.label).replace('starboard', mapData.starboard.label);
            }

            this.controls.starboard = new __WEBPACK_IMPORTED_MODULE_14__c4g_maps_control_starboard__["a" /* Starboard */]({
                create: mapData.starboard.enable || false,
                headline: mapData.starboard.label,
                tipLabel: starboard_label || false,
                caching: mapData.caching,
                mapController: this,
                extDiv: mapData.starboard.div,
                defaultOpen: mapData.starboard.open,
                filter: mapData.starboard.filter,
                button: mapData.starboard.button,
                baselayerSwitcherCreate: mapData.baselayerswitcher.enable,
                baselayerSwitcherTitle: mapData.baselayerswitcher.label,
                layerSwitcherCreate: mapData.layerswitcher.enable,
                layerSwitcherTitle: mapData.layerswitcher.label
            });
            this.map.addControl(this.controls.starboard);
        }
    });
})(jQuery, this.c4g); // 'The End' :)    - ! Do not write stuff after this line ! -

var MapController = this.c4g.maps.MapController;

/***/ }),

/***/ "./Resources/public/js/c4g-overlay-controller.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-overlay-controller.js ***!
  \*******************************************************/
/*! exports provided: C4gOverlayController */
/*! exports used: C4gOverlayController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gOverlayController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_overlay__ = __webpack_require__(/*! ./c4g-overlay */ "./Resources/public/js/c4g-overlay.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_config__ = __webpack_require__(/*! ./c4g-maps-config */ "./Resources/public/js/c4g-maps-config.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var C4gOverlayController = function () {
    function C4gOverlayController(baselayer) {
        _classCallCheck(this, C4gOverlayController);

        this.baselayer = baselayer;
        this.arrOverlays = [];
    }

    _createClass(C4gOverlayController, [{
        key: "showOverlayLayer",
        value: function showOverlayLayer(overlayId) {
            var self = this,
                overlayLayerConfig,
                osmSourceConfigs = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_config__["a" /* config */].osm,
                stamenSourceConfigs = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_config__["a" /* config */].stamen,
                layerOptions,
                overlayLayer,
                noUrl;

            layerOptions = {};
            overlayLayer = new ol.layer.Tile({
                source: new ol.source.OSM()
            });

            overlayLayerConfig = this.arrOverlays[overlayId];

            switch (overlayLayerConfig.provider) {
                case 'osm':
                    if (osmSourceConfigs[overlayLayerConfig.style]) {
                        overlayLayer = new ol.layer.Tile({
                            source: new ol.source.OSM(jQuery.extend(osmSourceConfigs[overlayLayerConfig.style], layerOptions))
                        });
                    } else if (stamenSourceConfigs[overlayLayerConfig.style]) {
                        // Stamen
                        overlayLayer = new ol.layer.Tile({
                            source: new ol.source.Stamen(jQuery.extend(stamenSourceConfigs[overlayLayerConfig.style], layerOptions))
                        });
                        // } else if (mapQuestSourceConfigs[overlayLayerConfig.style]) {
                        //   // mapQuest
                        //   overlayLayer = new ol.layer.Tile({
                        //     source: new ol.source.MapQuest(mapQuestSourceConfigs[overlayLayerConfig.style])
                        //   });
                    } else if (overlayLayerConfig.style === 'osm_custom') {
                        // custom
                        noUrl = true;
                        if (overlayLayerConfig.attribution) {
                            layerOptions.attributions = overlayLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION;
                        }

                        if (overlayLayerConfig.url) {
                            layerOptions.url = overlayLayerConfig.url;
                            noUrl = false;
                        } else if (overlayLayerConfig.urls) {
                            layerOptions.urls = overlayLayerConfig.urls;
                            noUrl = false;
                        }
                        if (!noUrl) {
                            overlayLayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(layerOptions)
                            });
                        } else {
                            console.warn('custom url(s) missing -> switch to default');
                        }
                    } else {
                        console.warn('unsupported osm-style -> switch to default');
                    }
                    break;
                case 'google':
                    //@todo
                    console.warn('google-maps are currently unsupported');
                    break;
                case 'bing':
                    if (baseLayerConfig.apiKey && overlayLayerConfig.style) {
                        overlayLayer = new ol.layer.Tile({
                            source: new ol.source.BingMaps({
                                culture: navigator.languages ? navigator.languages[0] : navigator.language || navigator.userLanguage,
                                key: overlayLayerConfig.apiKey,
                                imagerySet: overlayLayerConfig.style
                            })
                        });
                    } else {
                        console.warn('wrong bing-key or invalid imagery-set!');
                    }
                    break;
                case 'wms':
                    overlayLayer = new ol.layer.Tile({
                        source: new ol.source.TileWMS({
                            url: overlayLayerConfig.url,
                            params: {
                                LAYERS: overlayLayerConfig.params.layers,
                                VERSION: overlayLayerConfig.params.version,
                                //FORMAT: overlayLayerConfig.params.format,
                                TRANSPARENT: overlayLayerConfig.params.transparent
                            },
                            gutter: overlayLayerConfig.gutter,
                            attributions: overlayLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                        })
                        //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                    });
                    break;
                case 'owm':
                    overlayLayer = new ol.layer.Tile({
                        source: new ol.source.XYZ({
                            url: overlayLayerConfig.url + overlayLayerConfig.app_id + '/{z}/{x}/{y}?hash=' + overlayLayerConfig.api_key,
                            attributions: overlayLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                        })
                        //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                    });
                    break;
                default:
                    console.warn('unsupported provider');
                    break;
            }
            overlayLayer.setOpacity(parseInt(overlayLayerConfig.opacity) / 100);
            this.arrOverlays[overlayId].layer = overlayLayer;
            return this.arrOverlays[overlayId].layer;
        }
    }]);

    return C4gOverlayController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-overlay.js":
/*!********************************************!*\
  !*** ./Resources/public/js/c4g-overlay.js ***!
  \********************************************/
/*! exports provided: C4gOverlay */
/*! exports used: C4gOverlay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gOverlay; });
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var C4gOverlay = function () {
    function C4gOverlay(overlayArr, mapController) {
        _classCallCheck(this, C4gOverlay);

        this.id = overlayArr['id'];
        this.pid = overlayArr['pid'];
        this.name = overlayArr['name'];
        this.provider = overlayArr['provider'];
        this.style = overlayArr['style'];
        this.url = overlayArr['url'];
        this.urls = overlayArr['urls'];
        this.opacity = overlayArr['opacity'];
        this.attribution = overlayArr['attribution'];
        this.gutter = overlayArr['gutter'];
        this.params = overlayArr['params'];
        this.layer = false;
        this.overlayArr = overlayArr;
        this.mapController = mapController;
    }

    _createClass(C4gOverlay, [{
        key: 'changeOpacity',
        value: function changeOpacity(value) {
            var layer;

            layer = this.layer;
            if (layer) {
                this.mapController.map.removeLayer(layer);
                layer.setOpacity(value / 100);
                this.mapController.map.addLayer(layer);
            }
        }
    }]);

    return C4gOverlay;
}();

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgY2MwMTdkZDZkMzBhMjExN2NhODAiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctYmFzZWxheWVyLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctYmFzZWxheWVyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWxheWVyLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbG9jYXRpb25zdHlsZS1jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWxvY2F0aW9uc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lbi5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnN0YW50LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1nZW9zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLWdyaWQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLWhvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLW92ZXJ2aWV3bWFwLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wZXJtYWxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLWFjY291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLWVkaXRvci5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtcG9ydHNpZGUtaW5mb3BhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLW1lYXN1cmV0b29scy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtcG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXByaW50LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zaWRlYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXN0YXJib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWJhc2VsYXllcnN3aXRjaGVyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRwbHVnaW4tY3VzdG9tdGFiLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRwbHVnaW4tbGF5ZXJzd2l0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtem9vbWxldmVsLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtaW50ZXJhY3Rpb24tZ2VvcGlja2VyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLW1pc2MtbWFwaG92ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1taXNjLXNwaW5uZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1taXNjLXRvb2x0aXBwb3B1cC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLXBvcHVwLWluZm8tZGUuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1wb3B1cC1pbmZvLWVuLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtcHJveHkuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy11dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW92ZXJsYXktY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1vdmVybGF5LmpzIl0sIm5hbWVzIjpbIkM0Z0Jhc2VsYXllckNvbnRyb2xsZXIiLCJwcm94eSIsIm1hcENvbnRyb2xsZXIiLCJvcHRpb25zIiwiYXJyQmFzZWxheWVycyIsImJhc2VsYXllcklkcyIsInNlbGYiLCJqUXVlcnkiLCJhamF4IiwiYXBpX2Jhc2VsYXllcl91cmwiLCJkYXRhVHlwZSIsImRhdGEiLCJqc29ucCIsImRvbmUiLCJiYXNlbGF5ZXIiLCJhZGRCYXNlTGF5ZXJzIiwiZmFpbCIsImNvbnNvbGUiLCJ3YXJuIiwic3Bpbm5lciIsImhpZGUiLCJhbHdheXMiLCJiYXNlbGF5ZXJzIiwidWlkIiwiaSIsImoiLCJzb3J0IiwiYSIsImIiLCJwYXJzZUludCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsImxlbmd0aCIsImlkIiwidXRpbHMiLCJnZXRVbmlxdWVJZCIsInB1c2giLCJDNGdCYXNlbGF5ZXIiLCJzaG93QmFzZUxheWVyIiwiaGFzT3ZlcmxheXMiLCJvdmVybGF5cyIsIm92ZXJsYXlDb250cm9sbGVyIiwiYXJyT3ZlcmxheXMiLCJDNGdPdmVybGF5IiwibGF5ZXIiLCJzaG93T3ZlcmxheUxheWVyIiwiYWN0aXZlQmFzZWxheWVySWQiLCJwcm92aWRlciIsInN0eWxlIiwiYmFzZWxheWVyc19sb2FkZWQiLCJjYWxsSG9va0Z1bmN0aW9ucyIsImhvb2tfYmFzZWxheWVyX2xvYWRlZCIsImxheWVyT3B0aW9ucyIsImJhc2VMYXllckNvbmZpZyIsInNvdXJjZUNvbmZpZ3MiLCJuZXdCYXNlbGF5ZXIiLCJub1VybCIsInVybCIsImluZGV4T2YiLCJjcm9zc09yaWdpbiIsInVybHMiLCJvbCIsIlRpbGUiLCJzb3VyY2UiLCJYWVoiLCJleHRlbnQiLCJleHRlbmQiLCJvc20iLCJPU00iLCIkIiwic3RhbWVuIiwiU3RhbWVuIiwiYXBpX2tleSIsImFwcF9pZCIsIm1hcGJveF90eXBlIiwibWFwYm94IiwidXJsX2NsYXNzaWMiLCJoaWRlX2luX2JlIiwia2xva2FuX3R5cGUiLCJWZWN0b3JUaWxlIiwia2xva2FuIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwiZ2xTdHlsZSIsIm9sbXMiLCJhcHBseVN0eWxlIiwiaGVyZV90eXBlIiwiaGVyZSIsInRodW5kZXJmb3Jlc3RfdHlwZSIsInRodW5kZXJmb3Jlc3QiLCJCaW5nTWFwcyIsImN1bHR1cmUiLCJuYXZpZ2F0b3IiLCJsYW5ndWFnZXMiLCJsYW5ndWFnZSIsInVzZXJMYW5ndWFnZSIsImtleSIsImltYWdlcnlTZXQiLCJUaWxlV01TIiwicGFyYW1zIiwiTEFZRVJTIiwibGF5ZXJzIiwiVkVSU0lPTiIsInZlcnNpb24iLCJUUkFOU1BBUkVOVCIsInRyYW5zcGFyZW50IiwiZ3V0dGVyIiwiYXR0cmlidXRpb25zIiwiYXR0cmlidXRpb24iLCJBVFRSSUJVVElPTiIsImJhc2VMYXllckdyb3VwIiwiaW5kZXgiLCJoYXNPd25Qcm9wZXJ0eSIsImVsZW1lbnQiLCJjcmVhdGVCYXNlTGF5ZXIiLCJtYXhab29tIiwibWFwIiwiZ2V0VmlldyIsImdldFJlc29sdXRpb25Gb3Jab29tIiwibWluWm9vbSIsInNldE1pblJlc29sdXRpb24iLCJzZXRNYXhSZXNvbHV0aW9uIiwiR3JvdXAiLCJiYXNlTGF5ZXJVaWQiLCJhZGRCYXNlbGF5ZXIiLCJiYXNlTGF5ZXJzIiwidmlldyIsImNvbmZpZyIsImFkZGl0aW9uYWwiLCJhZGRpdGlvbmFsQXR0cmlidXRpb24iLCJleGlzdHMiLCJnZW9zZWFyY2hfYXR0cmlidXRpb24iLCJnZW9zZWFyY2giLCJnZW9zZWFyY2hfZW5naW5lIiwiY3VzdG9tX2F0dHJpYnV0aW9uIiwiZ2Vvc2VhcmNoQXR0cmlidXRpb24iLCJzb3J0aW5nIiwiZ2V0TGF5ZXJzIiwiaXRlbSIsImdldCIsImZvckVhY2giLCJhcnJheSIsInNldFZpc2libGUiLCJ6b29tIiwiZ2V0Wm9vbSIsImNlbnRlciIsImdldENlbnRlciIsInNldFpvb20iLCJtYXBEYXRhIiwiem9vbWxldmVsIiwibW91c2Vwb3NpdGlvbiIsImNvbnRyb2xDb250YWluZXJUb3BMZWZ0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiY3NzQ29uc3RhbnRzIiwiQ09OVFJPTF9DT05UQUlORVJfVEwiLCJPTF9VTlNFTEVDVEFCTEUiLCIkb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQiLCJwcmVwZW5kIiwiY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQiLCJDT05UUk9MX0NPTlRBSU5FUl9CTCIsImFmdGVyIiwibGVmdFNsaWRlRWxlbWVudHMiLCJjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YiIsIkNPTlRST0xfQ09OVEFJTkVSX0JMX1NVQiIsIm5ld1ZpZXciLCJWaWV3IiwicHJvamVjdGlvbiIsImdldFByb2plY3Rpb24iLCJyb3RhdGlvbiIsImdldFJvdGF0aW9uIiwicmVzb2x1dGlvbiIsImdldFJlc29sdXRpb24iLCJzZXRWaWV3IiwicmVkcmF3TWFwVmlldyIsImhvb2tfYmFzZWxheWVyX3Zpc2liaWxpdHkiLCJjZXNpdW0iLCJlbmFibGUiLCJvbDNkIiwib2xjcyIsIk9MQ2VzaXVtIiwiY3JlYXRlU3luY2hyb25pemVycyIsInNldEVuYWJsZWQiLCJnZXRFbmFibGVkIiwiYmFzZWxheWVyQXJyIiwiY29udHJvbGxlciIsInBpZCIsImRpc3BsYXlfbmFtZSIsIm9zbV9zdHlsZSIsIm9zbV9zdHlsZV91cmwxIiwib3NtX3N0eWxlX3VybDIiLCJvc21fc3R5bGVfdXJsMyIsIm9zbV9zdHlsZV91cmw0Iiwib3NtX2tleW5hbWUiLCJiaW5nX3N0eWxlIiwid21zX2d1dHRlciIsInByb3RlY3RfYmFzZWxheWVyIiwicGVybWl0dGVkX2dyb3VwcyIsInN0eWxlX3VybCIsImxheWVyR3JvdXAiLCJDNGdPdmVybGF5Q29udHJvbGxlciIsIkM0Z0xheWVyQ29udHJvbGxlciIsImFyckxheWVycyIsImxheWVyUmVxdWVzdHMiLCJtYXBJZCIsImFwaV9sYXllcl91cmwiLCJhZGRMYXllcnMiLCJmb3JlaWduTGF5ZXJzIiwibGF5ZXJzX2xvYWRlZCIsImhvb2tfbGF5ZXJfbG9hZGVkIiwibGF5ZXJJZHMiLCJ3aW5kb3ciLCJjNGdNYXBzSG9va3MiLCJwcm94eV9sYXllcl9sb2FkZWQiLCJjaGVja0xvY2F0aW9uU3R5bGVzIiwiZHJhd0xheWVySW5pdGlhbCIsImsiLCJwIiwiaXNWaXNpYmxlIiwic3RvcmVkSXRlbSIsImxpbmtJdGVtcyIsImN1cnJlbnRab29tIiwiZm5IYW5kbGVBbmRBcHBlbmRMYXllckNoaWxkcyIsImVuZGxlc3NMb29wSWQiLCJwYXJlbnRJZCIsInBhcmVudElkcyIsInBlcm1hbGlua2VkTGF5ZXJzIiwiY2hpbGQiLCJmbkhhbmRsZUNoaWxkcyIsInN0YXJib2FyZCIsImZuQWRkVG9Ib29rIiwib2JqSXRlbSIsInRvZ2dsZSIsImVudHJ5V3JhcHBlciIsImhhc0NoaWxkcyIsInZpc2libGVDaGlsZHMiLCJjaGlsZHMiLCJsYXllcm5hbWUiLCJsYXllcmlkIiwibGF5ZXJpY29uIiwidGFiSWQiLCJhd2Vzb21laWNvbiIsImNvbnRyb2xzIiwiaW5pdGlhbGl6ZVN0YXJib2FyZCIsImhvb2tfbGF5ZXJzd2l0Y2hlcl9sb2FkZWQiLCJzdGFyYm9hcmRUYWJzIiwiQ3VzdG9tdGFiIiwiQzRnTGF5ZXIiLCJjb250ZW50Iiwib2JqZWN0VG9BcnJheSIsImNzc0NsYXNzIiwidHlwZSIsImVkaXRhYmxlIiwicmVuZGVyU3BlY2lhbCIsImRpc3BsYXkiLCJmTGF5ZXIiLCJjb3VudCIsImNoaWxkQXJyIiwiY2hlY2tMYXllcklzQWN0aXZlRm9yWm9vbSIsImlzSW5hY3RpdmUiLCJ2aXNpYmxlIiwiYWN0aXZlTGF5ZXJJZHMiLCJpdGVtVWlkIiwiZmVhdHVyZXMiLCJmZWF0dXJlUHJvamVjdGlvbiIsImRhdGFQcm9qZWN0aW9uIiwiY29udGVudERhdGEiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RDb250ZW50RGF0YSIsInJlcXVlc3RWZWN0b3JTb3VyY2UiLCJ2ZWN0b3JMYXllciIsInZlY3RvclNvdXJjZSIsInZlY3RvclN0eWxlIiwiY2x1c3RlclNvdXJjZSIsInN0eWxlRm9yQ2x1c3RlciIsInJlZnJlc2hJbnRlcnZhbCIsInJlZnJlc2hBamF4VmFycyIsImZuQXR0YWNoRGF0YVRvTGF5ZXIiLCJwcm9wZXJ0aWVzIiwicG9wdXAiLCJ0b29sdGlwIiwidG9vbHRpcF9sZW5ndGgiLCJsYWJlbCIsInpvb21fb25jbGljayIsImNvbnRlbnRGZWF0dXJlcyIsImZlYXR1cmUiLCJzaXplIiwiZkZlYXR1cmVzIiwiaWNvbk9mZnNldCIsInJhZGl1cyIsImZpbGxjb2xvciIsImZvbnRjb2xvciIsImxvY2F0aW9uU3R5bGUiLCJsb2NhdGlvblN0eWxlQ29udHJvbGxlciIsImFyckxvY1N0eWxlcyIsImZpdHRpbmdFeHRlbmRzIiwiZ2V0RXh0ZW50IiwidW5kZWZpbmVkIiwiZ2V0U3R5bGUiLCJnZXRJbWFnZSIsImdldFJhZGl1cyIsImdldEFuY2hvciIsImdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eSIsInVuaXQiLCJ2YWx1ZSIsImNsdXN0ZXJfZmlsbGNvbG9yIiwiY2x1c3Rlcl9mb250Y29sb3IiLCJTdHlsZSIsInRleHQiLCJUZXh0IiwiZm9udCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZmlsbCIsIkZpbGwiLCJjb2xvciIsInRvU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2V0dGluZ3MiLCJib3VuZGluZ0JveCIsIlZlY3RvciIsImxvYWRlciIsImJvdW5kaW5nQXJyYXkiLCJzdHJCb3VuZGluZ0JveCIsInByb2oiLCJ0cmFuc2Zvcm1FeHRlbnQiLCJzdWJzdHIiLCJiYm94VGFnIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsImFib3J0IiwiZm9ybWF0IiwickZlYXR1cmVzIiwib3NtTm9kZXMiLCJvc21OZHMiLCJub2RlSWR4IiwibmRJZHgiLCJpbmZvTm9kZXMiLCJuZXdUYWciLCJyZWYiLCJjaGlsZHJlbiIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0QXR0cmlidXRlIiwic2hvd0FkZGl0aW9uYWxHZW9tZXRyaWVzIiwicGFyZW50RWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwiZSIsIk9TTVhNTCIsInJlYWRGZWF0dXJlcyIsImdldEdlb21ldHJ5IiwiZ2V0VHlwZSIsInNldCIsImNsdXN0ZXJfem9vbSIsImNsdXN0ZXJfcG9wdXAiLCJsb2NfbGlua3VybCIsImhvdmVyX2xvY2F0aW9uIiwiaG92ZXJfc3R5bGUiLCJmb3JjZU5vZGVzIiwiY2VudGVyUG9pbnQiLCJnZXRJbnRlcmlvclBvaW50IiwiZ2V0Q29vcmRpbmF0ZXMiLCJzZXRHZW9tZXRyeSIsImdlb20iLCJQb2ludCIsImxpbmVFeHRlbnQiLCJhZGRpdGlvbmFsU3R5bGUiLCJzZXRTdHlsZSIsImM0ZyIsIm1hcHMiLCJyZWR1Y2VTdHlsZSIsImVsZW1lbnRzIiwiZWxlbWVudElkIiwidGFncyIsInBvaW50IiwibG9uIiwibGF0IiwidHJhbnNmb3JtIiwiRmVhdHVyZSIsImdlb21ldHJ5Iiwic2V0SWQiLCJhcnJDb29yZHMiLCJub2RlIiwiZmluZCIsIm9iak5vZGUiLCJub2RlcyIsInBvbHlnb24iLCJQb2x5Z29uIiwibGluZVN0cmluZyIsIkxpbmVTdHJpbmciLCJhZGRGZWF0dXJlcyIsInN0cmF0ZWd5IiwibG9hZGluZ3N0cmF0ZWd5IiwiYmJveCIsImFsbCIsInJlZnJlc2giLCJpbnRlcnZhbCIsImJsbkhhc1Bvc2l0aW9uSWRzIiwiYXJyUG9zaXRpb25JZHMiLCJvYmpGZWF0dXJlcyIsImZvckVhY2hGZWF0dXJlIiwicmVuZXdhYmxlUmVzcG9uc2UiLCJlYWNoIiwiZmVhdHVyZURhdGEiLCJyZWFkRmVhdHVyZSIsInBvcHVwQ29udGVudCIsInN0eWxlSWQiLCJsb2FkTG9jYXRpb25TdHlsZXMiLCJnZXRTb3VyY2UiLCJuZXN0ZWRGZWF0dXJlIiwiaGlkZUxheWVyIiwic2hvd0xheWVyIiwiYXJyTmV3UG9zaXRpb25JZHMiLCJvYmpOZXdGZWF0dXJlcyIsInBvc2l0aW9uSWQiLCJyZW1vdmVGZWF0dXJlIiwiYWRkRmVhdHVyZSIsInJlcXVlc3RGdW5jdGlvbnMiLCJjbHVzdGVyIiwiQ2x1c3RlciIsImRpc3RhbmNlIiwiQW5pbWF0ZWRDbHVzdGVyIiwiZ2V0VmVjdG9yTGF5ZXIiLCJmaXRUb0V4dGVuZCIsIm9uIiwiZml0VG9FeHRlbnRzIiwibGF5ZXJDb250ZW50IiwiY29udGVudEZlYXR1cmUiLCJHZW9KU09OIiwibWlzc2luZ1N0eWxlcyIsInVuc3R5bGVkRmVhdHVyZXMiLCJvbmNsaWNrX3pvb20iLCJkcmF3TGF5ZXIiLCJhZGRMYXllciIsImFzeW5jX2NvbnRlbnQiLCJzaG93IiwibG9jc3R5bGUiLCJhcGlfbGF5ZXJjb250ZW50ZGF0YV91cmwiLCJsb29wRGF0YSIsInJlc3VsdENvb3JkaW5hdGUiLCJwYXJzZUZsb2F0Iiwic2VhcmNoIiwiY2x1c3RlckRpc3RhbmNlIiwiYXBpX2xheWVyY29udGVudF91cmwiLCJuZXdMb2NhdGlvblN0eWxlcyIsImxvYWRMYXllckNvbnRlbnQiLCJsYXllclVpZCIsImtlZXBMYXllciIsInJlbW92ZUxheWVyIiwiaG9va19sYXllcl92aXNpYmlsaXR5IiwiY2xlYXJJbnRlcnZhbCIsInNldENlbnRlciIsImNoaWxkVWlkIiwiY2hpbGRMYXllciIsImdldEFycmF5IiwibWFwTGF5ZXJzIiwiYWN0aXZlRm9yWm9vbSIsInNob3dQb3B1cE9uQWN0aXZlIiwiY3VycmVudFBvcHVwIiwiJGNvbnRlbnQiLCJodG1sIiwiJHBvcHVwIiwiYWRkQ2xhc3MiLCJBQ1RJVkUiLCJMT0FESU5HIiwicG9wdXBJbmZvcyIsImdldEZlYXR1cmVzIiwiY29vcmQiLCJhc3luYyIsIm9ialBvcHVwIiwicHJveHlfZmlsbFBvcHVwIiwic2V0UG9wdXAiLCJhcGlfaW5mb3dpbmRvd191cmwiLCJwb3B1cEluZm8iLCJyb3V0aW5nX2xpbmsiLCJzZXRJbnRlcnZhbCIsImZ1bmN0aW9uIiwiZWxlbWVudENvbnRlbnQiLCJDaXJjbGUiLCJmcm9tTG9uTGF0IiwiZm5TdHlsZUZ1bmN0aW9uIiwiRnVuY3Rpb24iLCJmIiwiZkxheWVyR3JvdXAiLCJmTGF5ZXJzIiwiZlZlY3RvckxheWVyIiwiZlZlY3RvclNvdXJjZSIsInNldExheWVycyIsInNwbGl0X2dlb2pzb24iLCJnZW9qc29uX2F0dHJpYnV0ZXMiLCJzcGxpdCIsImxheWVySWQiLCJsIiwibGF5ZXJBcnIiLCJoaWRlX2NoaWxkIiwiem9vbV9sb2NhdGlvbnMiLCJjaGlsZHNDb3VudCIsImdlb2pzb25fem9vbSIsImhpZGVXaGVuSW5UYWIiLCJub0ZpbHRlciIsInByb2plY3RJZCIsIkM0Z0xvY2F0aW9uU3R5bGVDb250cm9sbGVyIiwiYXJySWRzIiwib3B0X29wdGlvbnMiLCJjb21wbGV0ZSIsInN1Y2Nlc3MiLCJtYWtlQWpheCIsInN0eWxlSWRzIiwiYXBpX2xvY3N0eWxlX3VybCIsImlkcyIsInN0eWxlRGF0YSIsInN1Y2Nlc3NmdWwiLCJDNGdMb2NhdGlvblN0eWxlIiwialhociIsInN0clN0YXR1cyIsImNvbXBsZXRlZCIsImhhc0NsYXNzIiwiSElERSIsImpxWEhSIiwidGV4dFN0YXR1cyIsImVycm9yVGhyb3duIiwibiIsInNwbGljZSIsImxvY1N0eWxlQXJyIiwiZ2V0U3R5bGVGdW5jdGlvbiIsImVkaXRvciIsImdldFN0eWxlRWRpdG9yQ29uZmlnIiwibWluem9vbSIsIm1heHpvb20iLCJzdHlsZUZ1bmN0aW9uIiwiaW1hZ2VTdHlsZSIsInN0cm9rZVN0eWxlIiwiZmlsbFN0eWxlIiwidGV4dFN0eWxlIiwidGV4dFN0eWxlT3V0bGluZSIsImJhY2tncm91bmRGaWxsIiwiYmFja2dyb3VuZFN0cm9rZSIsIlN0cm9rZSIsInN0cm9rZWNvbG9yIiwic3Ryb2tlb3BhY2l0eSIsIndpZHRoIiwic3Ryb2tld2lkdGgiLCJmaWxsb3BhY2l0eSIsInN0eWxldHlwZSIsIlJlZ3VsYXJTaGFwZSIsInN0cm9rZSIsInBvaW50cyIsImFuZ2xlIiwiTWF0aCIsIlBJIiwicmFkaXVzMSIsInJhZGl1czIiLCJmbG9vciIsImljb25fc3JjIiwiSWNvbiIsIm9mZnNldCIsImljb25fb2Zmc2V0Iiwib3BhY2l0eSIsImljb25fb3BhY2l0eSIsInNyYyIsImljb25fc2l6ZSIsInNjYWxlIiwiaWNvbl9zY2FsZSIsInN2Z1NyYyIsImNhbnZhcyIsImN0eCIsImdldENvbnRleHQiLCJoZWlnaHQiLCJjbGVhclJlY3QiLCJmaWxsUmVjdCIsImxpbmVXaWR0aCIsInN0cm9rZVJlY3QiLCJ0cmFuc2xhdGUiLCJpbWciLCJJbWFnZSIsInpJbmRleCIsIm9ubG9hZCIsImRyYXdJbWFnZSIsImltZ1NpemUiLCJQaG90byIsImtpbmQiLCJwaG90b0tpbmQiLCJjcm9wIiwic2hhZG93IiwiZ2V0SWQiLCJzdHlsZXNBcnJheSIsImFycm93U2l6ZSIsImFycm93U2l6ZVVuaXQiLCJzZWdtZW50TGVuZ3RoIiwiYXJyb3dzX21pbnpvb20iLCJzdGFydF9waXhlbCIsImVuZF9waXhlbCIsImRlZmF1bHRDb2xvciIsImRlZmF1bHRfbGFiZWxfY29sb3IiLCJsYWJlbF9vdXRsX2NvbG9yIiwibGFiZWxfb3V0bF93aWR0aCIsImxhYmVsX291dGxfYm94IiwibGFiZWxfb2Zmc2V0IiwiZm9udF93ZWlnaHQiLCJmb250X3N0eWxlIiwiZm9udF9zaXplIiwiZm9udF9mYW1pbHkiLCJ0ZXh0QWxpZ24iLCJsYWJlbF9hbGlnbl9ob3IiLCJ0ZXh0QmFzZWxpbmUiLCJsYWJlbF9hbGlnbl92ZXIiLCJmb250X2NvbG9yIiwiZm9udF9vcGFjaXR5IiwiaW1hZ2UiLCJsaW5lX2Fycm93cyIsImZvckVhY2hTZWdtZW50IiwibGluZV9hcnJvd3NfcmFkaXVzIiwic3RhcnQiLCJlbmQiLCJsaW5lX2Fycm93c19taW56b29tIiwiZ2V0UGl4ZWxGcm9tQ29vcmRpbmF0ZSIsInNxcnQiLCJwb3ciLCJyb3RhdGVXaXRoVmlldyIsImF0YW4yIiwibGluZV9hcnJvd3NfYmFjayIsImVkaXRvckNvbmZpZyIsImNvbGxlY3QiLCJlZGl0b3JfY29sbGVjdCIsImljb25TcmMiLCJlZGl0b3JfaWNvbiIsInZhcnMiLCJlZGl0b3JfdmFycyIsImVkaXRvcl9zb3J0IiwiQ3ljbGVNYXAiLCJHZXJtYW4iLCJHZXJtYW5UcmFuc3BvcnQiLCJMYW5kc2NhcGVNYXAiLCJNYXBuaWsiLCJOT05FIiwiVG9uZXIiLCJUb25lckxhYmVscyIsIlRvbmVyTGluZXMiLCJUZXJyYWluIiwiV2F0ZXJjb2xvciIsIm1hcHF1ZXN0IiwiTWFwUXVlc3RPcGVuIiwiTWFwUXVlc3RIeWIiLCJNYXBRdWVzdFNhdCIsIk1hcGJveCIsInRpbGVTaXplIiwiTWFwYm94Q2xhc3NpYyIsIk9wZW5NYXBUaWxlcyIsIk1WVCIsInRpbGVHcmlkIiwidGlsZWdyaWQiLCJjcmVhdGVYWVoiLCJ0aWxlUGl4ZWxSYXRpbyIsIlRpbGVIb3N0aW5nIiwiSEVSRSIsIlRodW5kZXJmb3Jlc3QiLCJjb25zdGFudCIsImkxOG4iLCJMQU5HIiwiTkFNRSIsIkNMT1NFIiwiUE9JTlQiLCJGUkVFSEFORCIsIkxJTkUiLCJQT0xZR09OIiwiQ0lSQ0xFIiwiUEVSSU1FVEVSIiwiTEVOR1RIIiwiU1VSRkFDRUFSRUEiLCJSQURJVVMiLCJSRUZSRVNIIiwiQ09QWV9UT19DTElQQk9BUkQiLCJDVFJMX1pPT01fSU4iLCJDVFJMX1pPT01fT1VUIiwiQ1RSTF9aT09NX0VYVCIsIkNUUkxfWk9PTV9IT01FIiwiQ1RSTF9aT09NX1BPUyIsIkNUUkxfWk9PTV9TTElERVIiLCJDVFJMX1JFU0VUX1JPVEFUSU9OIiwiQ1RSTF9QT1JUU0lERSIsIkNUUkxfUk9VVEVSIiwiQ1RSTF9FRElUT1IiLCJDVFJMX01FQVNVUkVUT09MUyIsIkNUUkxfSU5GT1BBR0UiLCJDVFJMX0FERElUSU9OQUxQQU5FTCIsIkNUUkxfQUNDT1VOVCIsIkNUUkxfWk9PTUxFVkVMIiwiQ1RSTF9NT1VTRUNPT1JEUyIsIkNUUkxfR0VPU0VBUkNIIiwiQ1RSTF9TVEFSVF9TRUFSQ0giLCJDVFJMX09WRVJWSUVXTUFQIiwiQ1RSTF9HRU9CT09LTUFSS1MiLCJDVFJMX1NJREVCT0FSRCIsIkNUUkxfU1RBUkJPQVJEIiwiQ1RSTF9BVFRSSUJVVElPTiIsIkNUUkxfR1JJRCIsIkNUUkxfUEVSTUFMSU5LIiwiQ1RSTF9GVUxMU0NSRUVOIiwiQ1RSTF9QUklOVCIsIkVESVRPUiIsIkVESVRPUl9FTkFCTEVfSU5TVEFOVF9NRUFTVVJFIiwiRURJVE9SX0VOQUJMRV9GUkVFSEFORF9EUkFXIiwiRURJVE9SX0ZFQVRVUkVfQVBQTFkiLCJFRElUT1JfRkVBVFVSRV9ERUxFVEUiLCJFRElUT1JfRkVBVFVSRV9NT0RJRlkiLCJFRElUT1JfU0VMRUNUX0lORk8iLCJFRElUT1JfU0VMRUNUX0lORk9fQURESVRJT05BTCIsIkVESVRPUl9WSUVXX1RSSUdHRVJfU0VMRUNUIiwiRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX1BPSU5UIiwiRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0ZSRUVIQU5EIiwiRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0xJTkVTVFJJTkciLCJFRElUT1JfVklFV19UUklHR0VSX0RSQVdfUE9MWUdPTiIsIkVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19DSVJDTEUiLCJQT1BVUF9ST1VURV9GUk9NIiwiUE9QVVBfUk9VVEVfVE8iLCJTVEFSQk9BUkQiLCJTVEFSQk9BUkRfQkFTRUxBWUVSIiwiU1RBUkJPQVJEX0xBWUVSIiwiU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9CQVNFTEFZRVJTV0lUQ0hFUiIsIlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUiIsIlNJREVCT0FSRCIsIk1FQVNVUkVUT09MUyIsIk1FQVNVUkVUT09MU19JTkZPIiwiTUVBU1VSRVRPT0xTX0lORk9fQURESVRJT05BTCIsIk1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfU0VMRUNUIiwiTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0xJTkVTVFJJTkciLCJNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfUE9MWUdPTiIsIk1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19DSVJDTEUiLCJNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfRlJFRUhBTkQiLCJHRU9CT09LTUFSS1NfUExBQ0VIT0xERVIiLCJJTkZPUEFHRSIsIkFERElUSU9OQUxQQU5FTCIsIkFERElUSU9OQUxQQU5FTF9WSUVXX1RSSUdHRVIiLCJBQ0NPVU5UIiwiQUNDT1VOVF9WSUVXX1RSSUdHRVIiLCJTRUFSQ0hfTk9UX0ZPVU5EIiwibGFuZ0NvbnN0YW50c0dlcm1hbiIsIklORk9QQUdFX1ZJRVdfVFJJR0dFUiIsImxhbmdDb25zdGFudHNFbmdsaXNoIiwiY3NzIiwiT1BFTiIsIkNMT1NFQUJMRSIsIkVOQUJMRUQiLCJESVNBQkxFRCIsIklDT04iLCJDT05UUk9MIiwiQ09QWSIsIklOQUNUSVZFIiwiQU5JTUFUSU9OX1NQSU4iLCJMQVJHRSIsIlNNQUxMIiwiSE9SSVpPTlRBTCIsIlZFUlRJQ0FMIiwiQVRUUklCVVRJT05fTE9HTyIsIkNPTlRST0xfQ09OVEFJTkVSX1RSIiwiQ09OVFJPTF9DT05UQUlORVJfQlIiLCJFRElUT1JfRFJBV19DT05URU5UX1BPSU5UIiwiRURJVE9SX0RSQVdfQ09OVEVOVF9GUkVFSEFORCIsIkVESVRPUl9EUkFXX0NPTlRFTlRfTElORVNUUklORyIsIkVESVRPUl9EUkFXX0NPTlRFTlRfUE9MWUdPTiIsIkVESVRPUl9EUkFXX0NPTlRFTlRfQ0lSQ0xFIiwiRURJVE9SX0RSQVdfQ09OVEVOVF9QUk9KRUNUIiwiRURJVE9SX0RSQVdfVFJJR0dFUiIsIkVESVRPUl9DT05URU5UX1NFTEVDVCIsIkVESVRPUl9EUkFXX09QVElPTlMiLCJHRU9TRUFSQ0giLCJHRU9TRUFSQ0hfV1JBUFBFUiIsIkdFT1NFQVJDSF9UUklHR0VSIiwiR0VPU0VBUkNIX1NUQVJUIiwiR1JBVElDVUxFIiwiUFJJTlQiLCJPVkVSVklFV01BUCIsIk9WRVJWSUVXTUFQX1dSQVBQRVIiLCJHRU9CT09LTUFSS1MiLCJQRVJNQUxJTksiLCJQRVJNQUxJTktfUE9QVVAiLCJQT1BVUF9DTE9TRSIsIlBPUFVQX1JPVVRFX1dSQVBQRVIiLCJQT1JUU0lERSIsIlBPUlRTSURFX0NPTlRBSU5FUiIsIlBPUlRTSURFX0NPTlRST0wiLCJQT1JUU0lERV9XUkFQUEVSIiwiUE9SVFNJREVfVElUTEVCQVIiLCJQT1JUU0lERV9UT1BfVE9PTEJBUiIsIlBPUlRTSURFX0NPTlRFTlRfQ09OVEFJTkVSIiwiUE9SVFNJREVfQk9UVE9NX1RPT0xCQVIiLCJQT1JUU0lERV9TVEFUVVNCQVIiLCJQT1JUU0lERV9WSUVXVFJJR0dFUkJBUiIsIlBPUlRTSURFX0hFQURMSU5FIiwiUE9SVFNJREVfQlVUVE9OQkFSIiwiUE9SVFNJREVfQlVUVE9OIiwiUE9SVFNJREVfSElERSIsIlBPUlRTSURFX0NMT1NFIiwiU1BJTk5FUiIsIlNUQVJCT0FSRF9DT05UQUlORVIiLCJTVEFSQk9BUkRfQ09OVFJPTCIsIlNUQVJCT0FSRF9XUkFQUEVSIiwiU1RBUkJPQVJEX1RJVExFQkFSIiwiU1RBUkJPQVJEX0NPTlRFTlRfQ09OVEFJTkVSIiwiU1RBUkJPQVJEX0JPVFRPTV9UT09MQkFSIiwiU1RBUkJPQVJEX1NUQVRVU0JBUiIsIlNUQVJCT0FSRF9WSUVXVFJJR0dFUkJBUiIsIlNUQVJCT0FSRF9IRUFETElORSIsIlNUQVJCT0FSRF9CVVRUT05CQVIiLCJTVEFSQk9BUkRfQlVUVE9OIiwiU1RBUkJPQVJEX0NMT1NFIiwiU1RBUkJPQVJEX0NPTlRFTlRfQkFTRUxBWUVSU1dJVENIRVIiLCJTVEFSQk9BUkRfQkFTRUxBWUVSVFJFRSIsIlNUQVJCT0FSRF9MQVlFUlRSRUUiLCJTVEFSQk9BUkRfQ09OVEVOVF9MQVlFUlNXSVRDSEVSIiwiVE9PTFRJUF9QT1BVUCIsIlpPT01fTEVWRUwiLCJST1VURVJfSU5QVVRfV1JBUFBFUiIsIlJPVVRFUl9QUk9GSUxFX1dSQVBQRVIiLCJST1VURVJfSU5QVVRfRlJPTSIsIlJPVVRFUl9JTlBVVF9UTyIsIlJPVVRFUl9JTlBVVF9DTEVBUiIsIlJPVVRFUl9CVVRUT05CQVIiLCJST1VURVJfQVRUUklCVVRJT05fV1JBUFBFUiIsIlJPVVRFUl9JTlNUUlVDVElPTlNfV1JBUFBFUiIsIlJPVVRFUl9JTlNUUlVDVElPTlNfSEVBREVSIiwiUk9VVEVSX1NXSVRDSCIsIlJPVVRFUl9PVkVSIiwiUk9VVEVSX1BSSU5UIiwiUk9VVEVSX1BST0ZJTEVfQ0FSIiwiUk9VVEVSX1BST0ZJTEVfSEdWIiwiUk9VVEVSX1BST0ZJTEVfQklLRSIsIlJPVVRFUl9QUk9GSUxFX0ZPT1QiLCJST1VURVJfUFJPRklMRV9XSEVFTENIQUlSIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19UQUJMRSIsIlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTSIsIlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9PREQiLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRVZFTiIsIlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT04iLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0lDT04iLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX1RFWFQiLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0RJU1RBTkNFIiwiT0xfQ09OVFJPTCIsIk9MX09WRVJMQVlDT05UQUlORVIiLCJPTF9PVkVSTEFZQ09OVEFJTkVSX1NFIiwiT0xfVklFV1BPUlQiLCJPTF9aT09NIiwiT0xfWk9PTV9JTiIsIk9MX1pPT01fRVhUIiwiT0xfWk9PTV9IT01FIiwiT0xfWk9PTV9QT1MiLCJPTF9aT09NX1dJVEhfRVhUIiwiT0xfWk9PTV9XSVRIX0hPTUUiLCJPTF9aT09NX1dJVEhfUE9TIiwiT0xfWk9PTV9TTElERVIiLCJPTF9aT09NX1dJVEhfU0xJREVSIiwiY29udHJvbCIsImxhbmdDb25zdGFudHMiLCJsYW5nIiwiR2VvU2VhcmNoIiwiYnV0dG9uIiwic2VhcmNoV3JhcHBlciIsInNlYXJjaElucHV0Iiwic2VhcmNoQnV0dG9uIiwicmVzdWx0VHJpZ2dlciIsInJlc3VsdFdyYXBwZXIiLCJleHREaXYiLCJjb2xsYXBzaWJsZSIsImNvbGxhcHNlZCIsInRpcExhYmVsIiwiY29sbGFwc2VkTGFiZWwiLCJzZWFyY2hab29tIiwiem9vbUJvdW5kcyIsInJlc3VsdHMiLCJxdWlja3NlYXJjaCIsImFuaW1hdGUiLCJtYXJrUmVzdWx0IiwiY2FjaGluZyIsImF1dG9waWNrIiwiYXBpIiwicHJvZmlsZSIsInpvb21ib3VuZHMiLCJnZXRFbGVtZW50QnlJZCIsImdldFZhbHVlIiwidGl0bGUiLCJjbGljayIsImJsdXIiLCJpZ25vcmUiLCJmaW5kTG9jYXRpb24iLCJrZXlwcmVzcyIsIndoaWNoIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwic2VhcmNoUmVzdWx0Q29udGFpbmVyIiwic2VhcmNoUmVzdWx0Iiwic2VhcmNoUmVzdWx0QnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsInpvb21UbyIsInRhcmdldCIsIkNvbnRyb2wiLCJjYWxsIiwiaW5oZXJpdHMiLCJwcm90b3R5cGUiLCJvcGVuIiwicmVtb3ZlQ2xhc3MiLCJmb2N1cyIsInN0b3JlVmFsdWUiLCJjbG9zZSIsImNsZWFyUmVzdWx0cyIsInJlc3VsdCIsImZseVRvIiwiY29tcGxldGVTZWFyY2giLCJhbmltYXRpb25EdXJhdGlvbiIsInpvb21UeXBlIiwibG9jYXRpb24iLCJib3VuZGluZ2JveCIsImR1cmF0aW9uIiwicGFydHMiLCJjYWxsZWQiLCJjYWxsYmFjayIsIm9zbUV4dGVudCIsInNldFRpbWVvdXQiLCJtYXBWaWV3IiwiZml0IiwiZ2V0U2l6ZSIsImVhc2luZyIsImVhc2VPdXQiLCJhZGRNYXJrZXIiLCJtYXJrZXJTb3VyY2UiLCJhbmltYXRlTWFya2VyIiwiYW5pbWF0aW9uU3RlcCIsImxpc3RlbmVyS2V5IiwiRGF0ZSIsImdldFRpbWUiLCJldmVudCIsInZlY3RvckNvbnRleHQiLCJmcmFtZVN0YXRlIiwiZWxhcHNlZCIsImVsYXBzZWRSYXRpbyIsIm1hcmtlciIsImZsYXNoR2VvbSIsImNsb25lIiwidGltZSIsImxpbmVhciIsInNuYXBUb1BpeGVsIiwiZHJhd0dlb21ldHJ5IiwiY2xlYXIiLCJPYnNlcnZhYmxlIiwidW5CeUtleSIsImdldE1hcCIsInZpZXdFeHRlbnQiLCJjYWxjdWxhdGVFeHRlbnQiLCJjb250YWluc0Nvb3JkaW5hdGUiLCJhYnMiLCJjdXJyZW50Q29vcmRpbmF0ZSIsImNvb3JkRGlmIiwiZGlmQ29udGV4dCIsImdldFdpZHRoIiwiZ2V0SGVpZ2h0IiwiY3Jvc3NEb21haW4iLCJxIiwicGl4ZWwiLCJmb3JFYWNoRmVhdHVyZUF0UGl4ZWwiLCJzZXRQb3NpdGlvbiIsImdlb3BpY2tlciIsInBpY2siLCJhbGVydCIsIkdyaWQiLCJvYmpHcmlkIiwiR3JhdGljdWxlIiwic2hvd0xhYmVscyIsInN3aXRjaGFibGUiLCJkaXNhYmxlTGFiZWwiLCJzZXRNYXAiLCJkaXNhYmxlIiwic3RvcFByb3BhZ2F0aW9uIiwiSG9tZSIsImVuYWJsZWQiLCJzZXRSb3RhdGlvbiIsImdlb0xvY2F0aW9uIiwiZ2VvbG9jYXRpb24iLCJHZW9sb2NhdGlvbiIsInRyYWNraW5nIiwiZXZ0IiwiZ2V0UG9zaXRpb24iLCJnZW9sb2NhdGlvbl96b29tIiwic2V0VHJhY2tpbmciLCJPdmVydmlld01hcCIsInRyaWdnZXIiLCJ0cmlnZ2VySWNvbiIsIm92bSIsIlBlcm1hbGluayIsImNvcHlCdXR0b24iLCJyZWZyZXNoQnV0dG9uIiwiZ2V0UGFyYW1ldGVyIiwicG9wdXBBdHRhY2hlZCIsInRleHRmaWVsZCIsIkNsaXBib2FyZCIsImdlbmVyYXRlTGlua0Zyb21DdXJyZW50U3RhdGUiLCJzbGlkZURvd24iLCJwYXJhbWV0ZXJzIiwibGluayIsImJhc2VMYXllcklkeCIsImxheWVySWR4IiwicGFyYW1Db3VudCIsInRvRml4ZWQiLCJkZWx0YUVuY29kZSIsImpvaW4iLCJzZXRVcmxQYXJhbSIsImdlbmVyYXRlTGluayIsIkFjY291bnQiLCJoZWFkbGluZSIsImNyZWF0ZSIsImRpcmVjdGlvbiIsIm1haW5TZWN0aW9uIiwiU2lkZWJvYXJkIiwiaW5pdCIsInZpZXdBY2NvdW50IiwiYWRkQWNjb3VudFZpZXciLCJhY3RpdmF0ZSIsIm1haW5TZWN0aW9uQWNjb3VudCIsImFjY291bnQiLCJjb250ZW50Q29udGFpbmVyIiwic2V0RWxlbWVudCIsImFjY291bnRWaWV3IiwiYWRkVmlldyIsInRyaWdnZXJDb25maWciLCJ3aXRoSGVhZGxpbmUiLCJzZWN0aW9uRWxlbWVudHMiLCJzZWN0aW9uIiwidG9wVG9vbGJhciIsInZpZXdUcmlnZ2VyQmFyIiwiYWRkQWNjb3VudCIsIlRSSUdHRVJfQUNDT1VOVCIsImludGVyYWN0aW9uIiwiaW5pdEZ1bmN0aW9uIiwiQ29sbGVjdGlvbiIsImFjdGl2YXRlRnVuY3Rpb24iLCJkZWFjdGl2YXRlRnVuY3Rpb24iLCJFZGl0b3IiLCJkYXRhRmllbGQiLCJkcmF3TW9kZXMiLCJ0YWJzIiwibGFzdERyYXdJbnRlcmFjdGlvbiIsIm9wdF9leHRlcm5hbGluaXQiLCJsYXllclN0eWxlRnVuY3Rpb24iLCJ2aWV3U2VsZWN0IiwiZWRpdFBvaW50TGF5ZXIiLCJlZGl0TGluZUxheWVyIiwiZWRpdFBvbHlnb25MYXllciIsImVkaXRDaXJjbGVMYXllciIsImVkaXRGcmVlaGFuZExheWVyIiwiZWRpdExheWVyR3JvdXAiLCJhZGRTZWxlY3RWaWV3IiwiZ2V0SlNPTiIsInN0eWxlc19wb2ludCIsImFkZERyYXdWaWV3Iiwic3R5bGVzX2xpbmUiLCJzdHlsZXNfcG9seWdvbiIsInN0eWxlc19jaXJjbGUiLCJzdHlsZXNfZnJlZWhhbmQiLCJlZGl0b3JfbG9hZFRhYnMiLCJpbXBvcnRHZW9KU09OIiwibG9hZCIsInNhdmUiLCJpbml0aWFsaXplZCIsInByZUNsb3NlRnVuY3Rpb24iLCJnZXRWaXNpYmxlIiwicHJlT3BlbkZ1bmN0aW9uIiwic2VsZWN0SW50ZXJhY3Rpb24iLCJzZWxlY3RCb3hJbnRlcmFjdGlvbiIsInNlbGVjdGVkRmVhdHVyZXMiLCJzZWxlY3RDb250ZW50V3JhcHBlciIsInNlbGVjdENvbnRlbnRIZWFkbGluZSIsInNlbGVjdENvbnRlbnQiLCJzZWxlY3RDb250ZW50SW5mbyIsInNlbGVjdFZpZXciLCJmbkhhbmRsZVNlbGVjdGlvbiIsIlNlbGVjdCIsInRvZ2dsZUNvbmRpdGlvbiIsImV2ZW50cyIsImNvbmRpdGlvbiIsInBsYXRmb3JtTW9kaWZpZXJLZXlPbmx5Iiwic3R5bGVBcnJheSIsInN0eWxlUmFkaXVzIiwiRHJhZ0JveCIsInNoaWZ0S2V5T25seSIsImZvckVhY2hGZWF0dXJlSW50ZXJzZWN0aW5nRXh0ZW50IiwiZWRpdG9yVmFycyIsImhlYWRsaW5lRWxlbWVudCIsImlucHV0TmFtZUVsZW1lbnQiLCJtb2RpZnlCdXR0b25FbGVtZW50IiwiZGVsZXRlQnV0dG9uRWxlbWVudCIsInBhcmFncmFwaEVsZW1lbnQiLCJzdHJvbmdFbGVtZW50IiwiaW5wdXRFbGVtZW50IiwiZmVhdHVyZUNvdW50Iiwic2VsZWN0ZWRGZWF0dXJlIiwiYmx1ck9uRW50ZXIiLCJpbnB1dENoYW5nZUhhbmRsZXIiLCJuYW1lQ2hhbmdlSGFuZGxlciIsIm1vZGlmeUZlYXR1cmVGdW5jdGlvbiIsImRlbGV0ZUZlYXR1cmVGdW5jdGlvbiIsInJlbmRlclNlbGVjdGVkRmVhdHVyZXNMaXN0IiwiYXBwbHlGZWF0dXJlTW9kaWZpY2F0aW9uIiwiY2hhbmdlZEZlYXR1cmUiLCJlbmNvZGVHZW9Kc29uUHJvcGVydHkiLCJlZGl0b3JfZmVhdHVyZUNoYW5nZWQiLCJhY3Rpb24iLCJjdXJyZW50VmFycyIsIm1vZGlmeUZlYXR1cmUiLCJmZWF0dXJlR2VvbWV0cnkiLCJ0cmFuc2xhdGVJbnRlcmFjdGlvbiIsIm1vZGlmeUludGVyYWN0aW9uIiwibW9kaWZ5QnV0dG9uIiwiYXBwbHlCdXR0b24iLCJUcmFuc2xhdGUiLCJhZGRJbnRlcmFjdGlvbiIsIk1vZGlmeSIsInNldEFjdGl2ZSIsInJlbW92ZUludGVyYWN0aW9uIiwicmVwbGFjZUNoaWxkIiwiZmVhdHVyZUluZGV4IiwiZmVhdHVyZVNvdXJjZSIsImRlbGV0ZUZlYXR1cmUiLCJyZW1vdmUiLCJnZXRMZW5ndGgiLCJkZWNvZGVHZW9Kc29uUHJvcGVydHkiLCJrZXlkb3duIiwib25jaGFuZ2UiLCJodG1sVmFsdWUiLCJ1cGRhdGUiLCJtYXBIb3ZlciIsImRlYWN0aXZhdGUiLCJUUklHR0VSX0RSQVciLCJkcmF3Q29udGVudCIsIm9wdGlvbnNEaXYiLCJlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94IiwiZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveExhYmVsIiwiY2hlY2tib3hDaGFuZ2VIYW5kbGVyIiwiZHJhd1ZpZXciLCJhZGREcmF3U3R5bGUiLCJvbFR5cGUiLCJ0b1VwcGVyQ2FzZSIsImludGVyYWN0aW9uVmlldyIsImVkaXRvclN0eWxlIiwic3R5bGVJY29uIiwic3R5bGVJbWFnZSIsInN0eWxlVHJpZ2dlckxhYmVsIiwiZmVhdHVyZUlkQ291bnQiLCJtaW5XaWR0aCIsIm1pbkhlaWdodCIsIm1hcmdpbiIsImVkaXRvcl9pY29uX3NpemUiLCJnZXRTcmMiLCJnZXRTY2FsZSIsImJhY2tncm91bmQiLCJnZXRGaWxsIiwiZ2V0Q29sb3IiLCJib3JkZXIiLCJnZXRTdHJva2UiLCJpbnRlcmFjdGlvblN0eWxlSW1hZ2UiLCJhY3RpdmVTa2V0Y2giLCJhY3RpdmVUb29sdGlwIiwiRHJhdyIsImZyZWVoYW5kIiwiY2hlY2tlZCIsIlRvb2x0aXBQb3BVcCIsInBvc2l0aW9uIiwiY29vcmRpbmF0ZSIsImhvcml6b250YWwiLCJtZWFzdXJlR2VvbWV0cnkiLCJyYXdWYWx1ZSIsInNldENvbnRlbnQiLCJmaW5pc2hEcmF3aW5nIiwibmVlZGVkU3R5bGVzIiwic29ydEFuZEFkZFN0eWxlcyIsImFyclN0eWxlSWRzIiwibG9jYXRpb25TdHlsZXMiLCJkcmF3SW50ZXJhY3Rpb24iLCJvcHRfc2xvdCIsInNhdmVEYXRhIiwic2xvdE5hbWUiLCJzdG9yYWdlIiwiZXhwb3J0R2VvSlNPTiIsIndyaXRlRmVhdHVyZXMiLCJsaW5lcyIsInBvbHlnb25zIiwiY2lyY2xlcyIsInBhdGhuYW1lIiwic2Vzc2lvblN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJlZGl0b3Jfb25TYXZlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJsb2FkRGF0YSIsImZlYXR1cmVDb2xsZWN0aW9uIiwiaW1wb3J0RmVhdHVyZXMiLCJnZXRJdGVtIiwicGFyc2UiLCJjb25jYXQiLCJpbkFycmF5IiwiZWRpdG9yX29uTG9hZCIsInZhbCIsIm9wdF9nZW9qc29uIiwiZml0VG9FeHRlbnQiLCJnZXRFeHRlbnRGb3JHZW9tZXRyaWVzIiwiY29udGFpbmVyIiwib2Zmc2V0V2lkdGgiLCJJbmZvcGFnZSIsInZpZXdJbmZvcGFnZSIsImFkZEluZm9WaWV3IiwibWFpblNlY3Rpb25JbmZvIiwiaW5mb3BhZ2UiLCJpbmZvVmlldyIsImFkZEluZm9wYWdlIiwiVFJJR0dFUl9JTkZPUEFHRSIsIk1lYXN1cmV0b29scyIsImZpcnN0RWxlbWVudCIsIm1lYXN1cmVMaW5lTGF5ZXIiLCJtZWFzdXJlUG9seWdvbkxheWVyIiwibWVhc3VyZUNpcmNsZUxheWVyIiwibWVhc3VyZUZyZWVoYW5kTGF5ZXIiLCJtZWFzdXJlTGF5ZXJHcm91cCIsInZpZXdNZWFzdXJlU2VsZWN0Iiwidmlld01lYXN1cmVMaW5lIiwiYWRkTWVhc3VyZVZpZXciLCJ2aWV3TWVhc3VyZUFyZWEiLCJ2aWV3TWVhc3VyZVJhZGl1cyIsInZpZXdNZWFzdXJlRnJlZWhhbmQiLCJsaW5lRmVhdHVyZXMiLCJwb2x5Z29uRmVhdHVyZXMiLCJjaXJjbGVGZWF0dXJlcyIsImZyZWVoYW5kRmVhdHVyZXMiLCJtZWFzdXJlVmlldyIsImFkZE1lYXN1cmVGZWF0dXJlIiwidXBkYXRlTWVhc3VyZUZlYXR1cmUiLCJnZXRWYWx1ZU9mR2VvbWV0cnkiLCJnZXRMZW5ndGhPZk1lYXN1cmUiLCJyZW1vdmVNZWFzdXJlRmVhdHVyZSIsImxpc3RFbGVtZW50IiwibGFiZWxFbGVtZW50Iiwic3BhbkVsZW1lbnQiLCJzdHJMYWJlbCIsInN0clR5cGUiLCJtZWFzdXJlQXJlYSIsIm1lYXN1cmVSYWRpdXMiLCJjaGlsZEVsZW1lbnRDb3VudCIsImNoYW5nZSIsImZlYXR1cmVUb29sdGlwIiwibmV3Q29udGVudCIsImFyZWEiLCJsZW5nIiwidmFsdWVudW1iIiwibWF0Y2giLCJsZW5ndGhudW1iIiwiY2xvc2VhYmxlIiwiY2xvc2VGdW5jdGlvbiIsIlBvc2l0aW9uIiwiUHJpbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwidG9CbG9iIiwiYmxvYiIsImJvZHkiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJocmVmIiwiZG93bmxvYWQiLCJyZXZva2VPYmplY3RVUkwiLCJkZWZhdWx0T3BlbiIsImlkZW50aWZpZXIiLCJjc3NuYW1lIiwid3JhcHBlciIsInRpdGxlQmFyIiwiYm90dG9tVG9vbGJhciIsInN0YXR1c0JhciIsInNlY3Rpb25zIiwidmlld3MiLCJhY3RpdmVWaWV3IiwicGF1c2VkVmlldyIsImluaXRDbGFzcyIsInRpdGxlQnV0dG9uQmFyIiwiY2xvc2VCdXR0b24iLCJjYXBpdGFsaXplZE5hbWUiLCJoaWRlQnV0dG9uIiwiY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIiwibWVzc2FnZSIsImdldFRhcmdldCIsImFwcGVuZCIsImFkZFNlY3Rpb24iLCJjb250ZW50SGVhZGxpbmUiLCJTcGlubmVyIiwicHJldmVudERlZmF1bHQiLCJvcHRfZXZlbnQiLCJjb250ZW50Q29udGFpbmVyT3V0ZXJIZWlnaHQiLCJjb250YWluZXJPZmZzZXRXaWR0aCIsIm91dGVySGVpZ2h0IiwicG9zdE9wZW5GdW5jdGlvbiIsImlzT3BlbiIsIm9wdF9oaWRlIiwib3B0X29wZW5PdGhlclNpZGVib2FyZCIsInByZUhpZGVGdW5jdGlvbiIsIm1ha2VCdXR0b24iLCJjbGlja0FjdGlvbiIsImdldEVsZW1lbnQiLCJuZXdFbGVtZW50Iiwib3B0X3ZpZXdTY29wZSIsInZpZXdTY29wZSIsImFkZGl0aW9uYWxUcmlnZ2VyQ2xhc3MiLCJwYXVzZWQiLCJvcHRfb3BlblNpZGVib2FyZCIsIm9wdF9wYXVzZSIsIlN0YXJib2FyZCIsImZpbHRlciIsInBsdWdpbiIsInJlbmRlckxheWVydHJlZSIsImZuUmVuZGVyIiwiZGlzcGxheUxheWVyc3dpdGNoZXIiLCJwbHVnaW5zIiwibGF5ZXJDb250cm9sbGVyIiwibGF5ZXJTd2l0Y2hlckNyZWF0ZSIsImxheWVyc3dpdGNoZXIiLCJMYXllcnN3aXRjaGVyIiwic3RhcmJvYXJkX2xvYWRQbHVnaW5zIiwiYmFzZWxheWVyU3dpdGNoZXJDcmVhdGUiLCJiYXNlbGF5ZXJzd2l0Y2hlciIsIkJhc2VsYXllcnN3aXRjaGVyIiwic3RhcmJvYXJkcGx1Z2luIiwibG9hZENvbnRlbnQiLCJjb250ZW50V3JhcHBlciIsImNvbnRlbnRJbmZvIiwiYmFzZWxheWVyU3dpdGNoZXJUaXRsZSIsImNvbnRlbnREaXYiLCJmaXJzdENoaWxkIiwiZm5EcmF3Q29udGVudCIsImJhc2VMYXllckNvbnRyb2wiLCJhZGRJdGVtcyIsImJhc2VsYXllckNvbnRyb2xsZXIiLCJpdGVtRGF0YSIsIndyYXBwZXJFbGVtZW50IiwibGlzdEl0ZW0iLCJjaGlsZExpc3QiLCJjaGlsZEl0ZW0iLCJjaGlsZEVudHJ5IiwiZW50cnkiLCIkZW50cnkiLCJoYW5kbGVFbnRyeUNsaWNrIiwiaGFuZGxlQ2hhbmdlQmFzZWxheWVyVmlzaWJpbGl0eSIsInBhcnNlQXNMaXN0Iiwic2libGluZ3MiLCJiYXNlbGF5ZXJJdGVtIiwicGFyZW50IiwicmlnaHRTbGlkZUVsZW1lbnRzIiwiYmFzZWxheWVyX2NoYW5nZWQiLCJiYXNlbGF5ZXJDb25maWciLCJjcmVhdGVUZXh0Tm9kZSIsIm92ZXJsYXlJZCIsImNoYW5nZU9wYWNpdHkiLCJkZWZhdWx0X2Jhc2VsYXllciIsImR2IiwicGxhY2Vob2xkZXIiLCJvbmtleXVwIiwiZmlsdGVyX3VsbGkiLCJzaG93U3VidHJlZSIsImdldENoaWxkcmVuQnlUYWdOYW1lIiwidGFnTmFtZSIsImZvdW5kIiwibWF0Y2hGbGFnVWwiLCJzdWJ0cmVlTWF0Y2hlcyIsImlzTWF0Y2giLCJ1bCIsImhhc1N1YnRyZWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJxdWVyeVNlbGVjdG9yIiwicHJvamVjdENvbmYiLCJjb250ZW50TG9hZGVkIiwiY29udGVudEhlYWRsaW5lTGluayIsInNlbGVjdG9yIiwibGF5ZXJTd2l0Y2hlclRpdGxlIiwib25jbGljayIsInN1YnN0cmluZyIsInN0eWxlRWwiLCJzdHlsZVNoZWV0IiwiaGVhZCIsInNoZWV0IiwiYWRkUnVsZSIsInN0eWxlU2hlZXRzIiwiaW5zZXJ0UnVsZSIsInRyZWVDb250cm9sIiwicFdyYXBwZXIiLCJjaGlsZFdyYXBwZXIiLCJjaGFuZ2VkTGF5ZXIiLCIkZW50cmllcyIsImhvb2tfbWFwX3pvb20iLCJlbnRyeVdyYXBwZXJzIiwiaW5zZXJ0QmVmb3JlIiwiY2hpbGRXcmFwcGVycyIsImZuSGFuZGxlRW50cnlDbGljayIsImZuQ2hpbGRFbnRyeUNsaWNrIiwiZm5DaGlsZEVudHJ5U2hvdyIsInpvb21Ub0V4dGVudCIsImxheWVyQ2xhc3MiLCJsYXllckl0ZW0iLCJoYW5kbGVTZWxlY3RlZENoaWxkcyIsInVwZGF0ZVBhcmVudExheWVycyIsInBhcmVudFVpZCIsImhpZGVDaGlsZExheWVyIiwic2hvd0NoaWxkTGF5ZXIiLCJzaW5nbGVMYXllciIsInZlY3RvckFycmF5IiwiY29vcmRzIiwiZmVhdHVyZUxpc3QiLCJmZWF0dXJlQXJyYXkiLCJjb29yZGluYXRlcyIsImdldFRvcFJpZ2h0IiwiZ2V0VG9wTGVmdCIsImdldEJvdHRvbVJpZ2h0IiwiZ2V0Qm90dG9tTGVmdCIsImJvdW5kaW5nRXh0ZW50IiwiSW5maW5pdHkiLCJpc05hTiIsImNoaWxkTGlzdEl0ZW0iLCIkY2hpbGRFbnRyeSIsImFkZENoaWxkcyIsInN0YXJib2FyZF9sYXllcl9hY3RpdmF0ZSIsInBhcmFtT2JqIiwiaWRzdHIiLCJsYXllcnN3aXRjaGVyX2ZvckVhY2hJdGVtIiwidGhhdCIsImNoZWNrQ2hpbGRTZWxlY3Rpb25zIiwiY2hpbGRBY3RpdmUiLCJjbGlja2VkTGF5ZXIiLCJwYXJlbnRFbnRyeSIsInBhcmVudExheWVyIiwiWm9vbWxldmVsIiwidXBkYXRlWm9vbWxldmVsIiwidW5kZWZpbmVkSFRNTCIsIkdlb1BpY2tlciIsIm1hcENvbnRhaW5lciIsImxhdElkeCIsImxvbklkeCIsImxhdFJuZCIsImxvblJuZCIsIiRmaWVsZEdlb1giLCJpbnB1dF9nZW9feCIsIiRmaWVsZEdlb1kiLCJpbnB1dF9nZW9feSIsIm9wdGljTGF5ZXJTb3VyY2UiLCJvcHRpY0xheWVyVmVjdG9yIiwiZ2VvUGlja2VyU3R5bGVGdW5jdGlvbiIsIm9wdGljTGF5ZXJGZWF0dXJlIiwiYW5vbnltb3VzIiwicm91bmQiLCJyYW5kb20iLCJwaWNrZXJDb2xvciIsIkludGVyYWN0aW9uIiwiaGFuZGxlRXZlbnQiLCJ3aGl0ZSIsIm1hcEJyb3dzZXJFdmVudCIsImRpc2FibGVDbGlja0V2ZW50IiwiZGlzYWJsZWQiLCJhcnJMYXRMb24iLCJ0b0xvbkxhdCIsInJlYWR5IiwiaW5pdE1hcHMiLCJNYXBDb250cm9sbGVyIiwibWlzYyIsIk1hcEhvdmVyIiwibGFzdEZlYXR1cmVTdHlsZSIsImxhc3RIb3ZlcmVkRmVhdHVyZSIsImhvdmVyVG9vbHRpcCIsImdldEhvdmVyRnVuY3Rpb24iLCJpc0FjdGl2ZSIsImhvdmVyZWQiLCJjbHVzdGVyZWQiLCJ0b29sdGlwQ29udGVudCIsInRvb2x0aXBIZWxwZXIiLCJ0b29sdGlwTGVuZ3RoIiwiaG92ZXJfcG9wdXBzIiwiaG92ZXJfcG9wdXBzX3N0YXkiLCJsYXN0TGF5ZXJTdHlsZSIsImNoaWxkTm9kZXMiLCJzbGljZSIsInNpbmdsZVRvb2x0aXAiLCJyZXBsYWNlQWxsUGxhY2Vob2xkZXJzIiwidHJpbSIsImdldENvb3JkaW5hdGVGcm9tUGl4ZWwiLCJjaGFuZ2VGZWF0dXJlU3R5bGVzIiwic3Bpbm5lclNwYW4iLCJhZGRpdGlvbmFsQWN0aXZhdGlvbkNvdW50ZXIiLCJhZGRDbGFzc05hbWUiLCJvdmVybGF5IiwiT3ZlcmxheSIsImluc2VydEZpcnN0IiwicG9zaXRpb25pbmciLCJhZGRPdmVybGF5IiwicmVtb3ZlT3ZlcmxheSIsImdldENvbnRlbnQiLCJpc01vYmlsZSIsInRlc3QiLCJ1c2VyQWdlbnQiLCJ2ZW5kb3IiLCJvcGVyYSIsImZuU3RhbmRhcmRJbmZvUG9wdXAiLCJjIiwiZ2V0UHJvcGVydGllcyIsImQiLCJnIiwiaCIsImZuSGVhZGVyIiwiZm5Db250ZW50IiwiZm5Gb290ZXIiLCJmblJlZHVjZWRJbmZvUG9wdXAiLCJhbWVuaXR5IiwidG91cmlzbSIsImhpc3RvcmljIiwibGVpc3VyZSIsImFlcmlhbHdheSIsInNwb3J0IiwicmFpbHdheSIsIndhdGVyX3BhcmsiLCJmbkdldFRyYW5zbGF0ZV9UeXBlIiwic3FrbSIsInBob25lIiwiZmF4IiwiZW1haWwiLCJvcGVuaW5nX2hvdXJzIiwid2Vic2l0ZSIsIndpa2lwZWRpYSIsIndpa2ltZWRpYV9jb21tb25zIiwiaW50ZXJuZXRfYWNjZXNzIiwid2hlZWxjaGFpciIsImNlbnRyYWxrZXkiLCJub3RlIiwiZGVzY3JpcHRpb24iLCJvcGVyYXRvciIsImxpdCIsInNob3AiLCJicmFuZCIsInNlbGxzIiwib3JpZ2luIiwid2hvbGVzYWxlIiwiaGVhbHRoY2FyZSIsImVtZXJnZW5jeSIsImVtZXJnZW5jeV9zZXJ2aWNlIiwid2F0ZXJ3YXkiLCJoaWdod2F5IiwicmVjeWNsaW5nX3R5cGUiLCJmcm96ZW5feW9ndXJ0Iiwic2x1c2hfaWNlIiwiY2FrZSIsImNvZmZlZSIsImRyaW5rcyIsImN1aXNpbmUiLCJ6b28iLCJjbHViIiwiYnVpbGRpbmciLCJsYW5kdXNlIiwiZGlhcGVyIiwiZGlwbG9tYXRpYyIsIndhdGVyaW5nX3BsYWNlIiwid2FzdGUiLCJvcGVuZmlyZSIsImZpcmVwbGFjZSIsInZlbmRpbmciLCJhYmFuZG9uZWQiLCJtaWxpdGFyeSIsImhpc3RvcmljX3VzYWdlIiwiY2FzdGxlX3R5cGUiLCJ0b21iIiwib2ZmaWNlIiwicGxhY2UiLCJiaWN5Y2xlIiwib25ld2F5IiwicGFya19yaWRlIiwiY3Jvc3NpbmciLCJ0cmFmZmljX2NhbG1pbmciLCJyZXQiLCJ2b2x0YWdlIiwiY2FyIiwidHVubmVsIiwiYnJpZGdlIiwic29jaWFsX2ZhY2lsaXR5IiwiYnJld2VyeSIsImdhbWJsaW5nIiwicGV0IiwiY3JhZnQiLCJtaWNyb2JyZXdlcnkiLCJyZW50YWwiLCJlbnRyYW5jZSIsIm5hdHVyYWwiLCJib3VuZGFyeSIsIm1vdW50YWluX3Bhc3MiLCJ3YXRlciIsInJvdXRlIiwibW9vcmluZyIsIm1hbl9tYWRlIiwiaGlraW5nIiwiaW5mb3JtYXRpb24iLCJsb2NrIiwiY29uc3RydWN0aW9uIiwibGlnaHRfc291cmNlIiwiZHJpbmtpbmdfd2F0ZXIiLCJhYnV0dGVycyIsInBvd2VyX3NvdXJjZSIsInBvd2VyIiwibGluZSIsImJhcnJpZXIiLCJmZW5jZV90eXBlIiwid2FsbCIsImRlc2lnbmF0aW9uIiwiYWVyb3dheSIsInB1YmxpY190cmFuc3BvcnQiLCJidXMiLCJlbGVjdHJpZmllZCIsImhhcmJvdXIiLCJhbmltYWwiLCJhbmltYWxfc2hlbHRlciIsImFuaW1hbF9ib2FyZGluZyIsImJpcmRzX25lc3QiLCJmbkNvbnRlbnRHZW5lcmFsSW5mb3JtYXRpb25zIiwiZm5Db250ZW50SGVhbHRoY2FyZSIsImZuQ29udGVudEFlcm9kcm9tZSIsImZuQ29udGVudEN1aXNpbmUiLCJmbkNvbnRlbnRTaGlwcGluZyIsImZuQ29udGVudEh5ZHJhbnRzIiwiZm5Db250ZW50U3BvcnRzIiwiZm5Db250ZW50U3RyZWV0c1RyYWZmaWMiLCJmbkNvbnRlbnRJbmZvcm1hdGlvbkNpdHkiLCJmbkNvbnRlbnRFbWVyZ2VuY3kiLCJmbkNvbnRlbnRTdG9yYWdlIiwiZm5Db250ZW50QW1lbml0eSIsImZuQ29udGVudFRvdXJpc20iLCJmbkNvbnRlbnRSb3V0ZSIsImZuQ29udGVudFBldHJvbCIsImZuQ29udGVudEJhcnJpZXJzIiwiZm5Db250ZW50TGFuZHVzZSIsImZuQ29udGVudE5hdHVyYWwiLCJmbktsb3N0ZXJBZGRpdGlvbmFsIiwiZm5TaWNoZXJoZWl0QWRkaXRpb25hbCIsImZuQWRkaXRpb25hbEJ1aWxkaW5nSW5mb3MiLCJmbktyYWZ0d2Vya0luZm8iLCJmbk1lc3NzdGF0aW9uIiwiZm5XZXJ0c3RvZmZpbmZvIiwiZm5Db250ZW50UHJvdGVjdGVkQXJlYSIsImFlcm9kcm9tZSIsImlhdGEiLCJpY2FvIiwiZm9yZXN0Iiwid29vZCIsImxlYWZfdHlwZSIsImdlbnVzIiwic3BlY2llcyIsImRlbm90YXRpb24iLCJtb251bWVudCIsInN0YXR1cyIsInByb3RlY3RfY2xhc3MiLCJwcm90ZWN0X2lkIiwicmVzb3VyY2UiLCJhbmltYWxfa2VlcGluZyIsInJvdW5kdHJpcCIsInN5bWJvbCIsImZ1ZWwiLCJmbkNvbnRlbnRIaXN0b3JpYyIsInNpdGVfdHlwZSIsIm1hdGVyaWFsIiwiZG9nIiwic3RhcnMiLCJjYXJhdmFucyIsIndhc2hpbmdfbWFjaGluZSIsImRyeWVyIiwiZ3JvdXBfb25seSIsImNhbXBfc2l0ZSIsIm1hcF90eXBlIiwibWFwX3NpemUiLCJib2FyZF90eXBlIiwiYm9hdHR5cGUiLCJjb3VudHJ5IiwiY29sbGVjdGlvbl90aW1lcyIsImRyaXZlX3Rocm91Z2giLCJjb250ZW50cyIsInBvcHVsYXRpb24iLCJsaWZlYm9hdCIsInZoZl9jaGFubmVsIiwibW1zaSIsIm1vdG9yYm9hdCIsIkNFTVQiLCJpbnRlcm1pdHRlbnQiLCJ0aWRhbCIsImRyYWZ0Iiwib3BlcmF0aW5nIiwidmVoaWNsZSIsImZuV3JlY2tJbmZvIiwiZmVycnkiLCJtb3RvcmNhciIsIm1vdG9yX3ZlaGljbGUiLCJoZ3YiLCJmb290Iiwid2F0ZXJfdm9sdW1lIiwiZmxvd19yYXRlIiwid2F0ZXJfc291cmNlIiwiYnJpZGdlX3JlZiIsInN0YXJ0X2RhdGUiLCJtYXh3ZWlnaHQiLCJ0b2xsIiwic3VyZmFjZSIsInRyYWNrdHlwZSIsIm1vdG9yY3ljbGUiLCJ0cmFpbF92aXNpYmlsaXR5Iiwic2FjX3NjYWxlIiwibWF4c3BlZWQiLCJvdmVydGFraW5nIiwibm9leGl0IiwicHJpb3JpdHlfcm9hZCIsImZlZSIsInVpY19yZWYiLCJmbkFyenRJbmZvIiwiaGVhbHRoX3NwZWNpYWx0eSIsIm1heHdpZHRoIiwibWF4aGVpZ2h0IiwibWluX2FnZSIsIm1heF9hZ2UiLCJudWRpc20iLCJydWlucyIsImVsZSIsImNhZmUiLCJicmVha2Zhc3QiLCJzbmFjayIsImluZG9vcl9zZWF0aW5nIiwib3V0ZG9vcl9zZWF0aW5nIiwic2VsZl9zZXJ2aWNlIiwiYmFrZWhvdXNlIiwicGFzdHJ5X3Nob3AiLCJmYWlyX3RyYWRlIiwibWVkaWNhbF9hcmVhIiwiZGlzcGVuc2luZyIsInN1cnZlaWxsYW5jZSIsImFjY2VzcyIsInJlbGlnaW91c19yYW5rIiwic2hyaW5lIiwic2FuY3R1YXJ5IiwicmVsaWdpb24iLCJkZW5vbWluYXRpb24iLCJjb21tdW5pdHkiLCJmblRlc3RJbmZvUG9wdXAiLCJmYWhyemVpdCIsIk1hcFByb3h5IiwiZWRpdG9yU3R5bGVzIiwiaG9va19tYXBfY2xpY2siLCJyZXF1ZXN0IiwibGF5ZXJjb250ZW50IiwiaW5mb3dpbmRvdyIsImxvYWRCYXNlTGF5ZXJzIiwibG9hZExheWVycyIsImFkZFBvcFVwIiwibWFwX2NlbnRlcl9jaGFuZ2VkIiwiY2xpY2tFdmVudCIsIm5ld0NlbnRlciIsInN0eWxlRnVuYyIsInN0eWxlQ2x1c3RlciIsInNldFNjYWxlIiwiY2x1c3Rlcl9hbGwiLCJwaXgiLCJtYXgiLCJyIiwic2luIiwiY29zIiwiY2YiLCJsaW5rX25ld3dpbmRvdyIsImZ1bmMiLCJjb21iaW5lTGF5ZXJzIiwidW4iLCJwb3B1cENvbmZpZyIsInJvdXRlciIsInJvdXRlQnV0dG9uV3JhcHBlciIsInJvdXRlRnJvbUJ1dHRvbiIsInJvdXRlRnJvbUJ1dHRvblNwYW4iLCJyb3V0ZVRvQnV0dG9uIiwicm91dGVUb0J1dHRvblNwYW4iLCJyb3V0aW5nSGFuZGxlciIsImFjdGl2ZVBvcnRzaWRlIiwic2V0SW5wdXQiLCJjdXJyZW50VGFyZ2V0IiwicG9wVXBFbGVtZW50IiwicG9wVXBDbG9zZUVsZW1lbnQiLCJwb3BVcENvbnRlbnQiLCJhdXRvUGFuIiwicG9wdXBBdXRvUGFuIiwiYXV0b1BhbkFuaW1hdGlvbiIsImF1dG9QYW5NYXJnaW4iLCJuZWVkZWRMYXllclN0eWxlcyIsImdldExheWVyU3R5bGVzIiwiY29udGVudERhdGFMYXllciIsImxheWVyR3JvdXBzIiwic3R5bGVzIiwib25lRmVhdHVyZSIsImFsbExheWVycyIsIm1pc3NpbmdMYXllciIsImNsdXN0ZXJzIiwib3B0X3pvb20iLCJtaW4iLCJwb3B1cEZ1bmN0aW9ucyIsInBvcHVwRnVuY3Rpb25zREUiLCJwb3B1cEZ1bmN0aW9uc0VOIiwic3RyaW5nIiwiY2hhckF0IiwiaW5wdXQiLCJvdXRwdXQiLCJwYXJhbSIsIm9wdF9nZXRLZXkiLCJvcHRfZXhlY3V0ZSIsInNlYXJjaFBhcmFtIiwicGFyYW1SZXBsYWNlZCIsImhhc2giLCJvcmlnaW5TdHJpbmciLCJnZXRVcmxQYXJhbSIsInJlZ0V4IiwiUmVnRXhwIiwiZXhlYyIsImFycklucHV0IiwiYXJyT3V0cHV0IiwiZGVsdGFEZWNvZGUiLCJhcnJIb29rRnVuY3Rpb25zIiwiaGV4Iiwib3B0X29wYWNpdHkiLCJvcHRfYXJyYXkiLCJiaWdpbnQiLCJyZWR1Y2VkU3R5bGUiLCJzZXRXaWR0aCIsIm9wdF9mb3JjZUxpbmVNZWFzdXJlIiwib3B0X2ZvcmNlU3VyZmFjZU1lYXN1cmUiLCJzcGhlcmUiLCJjb29yZDEiLCJjb29yZDIiLCJnZXREaXN0YW5jZSIsImdldEFyZWEiLCJlZGdlQ29vcmRpbmF0ZSIsImFyckdlb21ldHJpZXMiLCJleHRlbnRTb3VyY2UiLCJFeHRlbnQiLCJleHRlbnRzIiwib3B0X3BhZGRpbmciLCJvcHRfYW5pbWF0aW9uRHVyYXRpb24iLCJwYWRkaW5nIiwib3B0X21pblpvb20iLCJvcHRfbWF4Wm9vbSIsIm9wdF9taW5SZXNvbHV0aW9uIiwiZml0T3B0aW9ucyIsIm1pblJlc29sdXRpb24iLCJzdHJJbnB1dCIsIm9wdF9sYXllciIsInN0ck91dHB1dCIsInJlcGxhY2VGdW5jdGlvblBsYWNlaG9sZGVycyIsInJlcGxhY2VFZGl0b3JWYXJzUGxhY2Vob2xkZXJzIiwicmVwbGFjZUF0dHJpYnV0ZVBsYWNlaG9sZGVycyIsImZ1bmN0aW9uTmFtZSIsImV2S2V5IiwiYXR0ciIsIm9iamVjdCIsIk9iamVjdCIsImtleXMiLCJmblN0eWxlIiwiZ2V0Q3VycmVudFN1YmRvbWFpbiIsInNjYWxlbGluZSIsInJlbW92ZUNvbnRyb2wiLCJTY2FsZUxpbmUiLCJhZGRDb250cm9sIiwiTW91c2VQb3NpdGlvbiIsImNvb3JkaW5hdGVGb3JtYXQiLCJ0b1N0cmluZ0hETVMiLCJwZXJtYWxpbmsiLCJpbnRlcmFjdGlvbnMiLCJkaXNwbGF5QWxsTG9jYXRpb25zIiwiZG9tTWFwRGl2Iiwia2luZXRpYyIsImNvbnRyb2xDb250YWluZXJUb3BSaWdodCIsImNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodCIsInN0YXJib2FyZF9sYWJlbCIsImxvZ29MaW5rIiwibG9nb0dyYXBoaWMiLCJyZW1vdmVFbGVtZW50IiwiZW5hYmxlU3RhcmJvYXJkIiwiYWRkSWRUb0RpdiIsIm1hcERpdiIsImNhbGNfZXh0ZW50IiwibWVhc3VyZXRvb2xzIiwibWluX2dhcCIsImRpdiIsImdldF9wYXJhbWV0ZXIiLCJNb29Ub29scyIsIkJyb3dzZXIiLCJEb2N1bWVudCIsImRlZmF1bHRzIiwiTWFwIiwiY2hlY2tTdW0iLCJsb2FkVGlsZXNXaGlsZUFuaW1hdGluZyIsInVwZGF0ZVNpemUiLCJpbml0aWFsaXplIiwibW91c2VfbmF2IiwiZHJhZ19wYW4iLCJLaW5ldGljIiwiRHJhZ1BhbiIsIndoZWVsX3pvb20iLCJNb3VzZVdoZWVsWm9vbSIsImRvdWJsZWNsaWNrX3pvb20iLCJEb3VibGVDbGlja1pvb20iLCJkcmFnX3pvb20iLCJEcmFnWm9vbSIsImRyYWdfcm90YXRlX3pvb20iLCJEcmFnUm90YXRlQW5kWm9vbSIsImFsdEtleU9ubHkiLCJkcmFnX3JvdGF0ZSIsIkRyYWdSb3RhdGUiLCJ0b3VjaF9uYXYiLCJyb3RhdGUiLCJQaW5jaFJvdGF0ZSIsIlBpbmNoWm9vbSIsImNvbnN0cmFpblJlc29sdXRpb24iLCJrZXlib2FyZF9uYXYiLCJwYW4iLCJLZXlib2FyZFBhbiIsIktleWJvYXJkWm9vbSIsInpvb21fcGFuZWwiLCJ6b29tX3NsaWRlciIsIlpvb20iLCJ6b29tSW5MYWJlbCIsInpvb21PdXRMYWJlbCIsInpvb21JblRpcExhYmVsIiwiem9vbU91dFRpcExhYmVsIiwiem9vbXNsaWRlciIsIlpvb21TbGlkZXIiLCJ6b29tX2V4dGVudCIsIlpvb21Ub0V4dGVudCIsInpvb21faG9tZSIsInpvb21fcG9zaXRpb24iLCJlcnIiLCJmdWxsc2NyZWVuIiwiRnVsbFNjcmVlbiIsImxhYmVsQWN0aXZlIiwicm91dGVyX2VuYWJsZSIsIlJvdXRlciIsImluaXRPcGVuIiwiZGF0YV9maWVsZCIsInByaW50IiwiZ3JhdGljdWxlIiwiUm90YXRlIiwic2VhcmNoem9vbSIsIm1hcmtyZXN1bHQiLCJnZW9ib29rbWFya3MiLCJHZW9Cb29rbWFyayIsIm5hbWVzcGFjZSIsIm92ZXJ2aWV3bWFwIiwiZ2VveEZpZWxkIiwiZ2VveUZpZWxkIiwibG9jR2VveCIsImxvY0dlb3kiLCJudW1lcml6ZWQiLCJ0cmFuc2Zvcm1lZCIsImNmZ19sb2dvIiwiQXR0cmlidXRpb24iLCJjb2xsYXBzZUxhYmVsIiwic2V0Q29sbGFwc2VkIiwidGhlbWVEYXRhIiwibWFpbkNvbG9yIiwiZm9udENvbG9yIiwic2hhZG93Q29sb3IiLCJzZXRQcm9wZXJ0eSIsIkFycmF5IiwiaXNBcnJheSIsIm1hcENvbnRyb2xsZXJfYWRkQ29udHJvbHMiLCJDb250YWluZXIiLCJvdmVybGF5TGF5ZXJDb25maWciLCJvc21Tb3VyY2VDb25maWdzIiwic3RhbWVuU291cmNlQ29uZmlncyIsIm92ZXJsYXlMYXllciIsImFwaUtleSIsInNldE9wYWNpdHkiLCJvdmVybGF5QXJyIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5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O0FBQUEsc0NBcUJrQmlULEtBckJsQixFQXFCd0I7QUFDaEIsZ0JBQUl2USxLQUFKOztBQUVBQSxvQkFBUSxLQUFLQSxLQUFiO0FBQ0EsZ0JBQUlBLEtBQUosRUFBVztBQUNQLHFCQUFLMUMsYUFBTCxDQUFtQm9ILEdBQW5CLENBQXVCOFUsV0FBdkIsQ0FBbUN4WixLQUFuQztBQUNBQSxzQkFBTTY0RCxVQUFOLENBQWlCdG9ELFFBQU0sR0FBdkI7QUFDQSxxQkFBS2pULGFBQUwsQ0FBbUJvSCxHQUFuQixDQUF1QitULFFBQXZCLENBQWdDelksS0FBaEM7QUFDSDtBQUNKO0FBOUJMOztBQUFBO0FBQUEsSSIsImZpbGUiOiJjNGctbWFwcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9idWlsZC9cIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1tYWluLmpzXCIpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGNjMDE3ZGQ2ZDMwYTIxMTdjYTgwIiwiaW1wb3J0IHtDNGdCYXNlbGF5ZXJ9IGZyb20gXCIuL2M0Zy1iYXNlbGF5ZXJcIjtcbmltcG9ydCB7QzRnT3ZlcmxheX0gZnJvbSBcIi4vYzRnLW92ZXJsYXlcIjtcbmltcG9ydCB7Y29uZmlnfSBmcm9tIFwiLi9jNGctbWFwcy1jb25maWdcIjtcbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuXG5leHBvcnQgY2xhc3MgQzRnQmFzZWxheWVyQ29udHJvbGxlciB7XG4gICAgY29uc3RydWN0b3IocHJveHkpIHtcbiAgICAgICAgdGhpcy5wcm94eSA9IHByb3h5O1xuICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIgPSBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXI7XG4gICAgICAgIHRoaXMuYXJyQmFzZWxheWVycyA9IHt9O1xuICAgICAgICB0aGlzLmJhc2VsYXllcklkcyA9IFtdO1xuICAgIH1cblxuICAgIGxvYWRCYXNlTGF5ZXJzKCkge1xuICAgICAgICB2YXIgc2VsZjtcblxuICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgICBqUXVlcnkuYWpheCh0aGlzLnByb3h5LmFwaV9iYXNlbGF5ZXJfdXJsLHtcbiAgICAgICAgICAgIGRhdGFUeXBlOiB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5qc29ucCA/IFwianNvbnBcIiA6IFwianNvblwiXG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmJhc2VsYXllcikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZEJhc2VMYXllcnMoZGF0YS5iYXNlbGF5ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmFpbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gQFRPRE8gZXJyb3ItbWVzc2FnZXNcbiAgICAgICAgICAgICAgICAvLyAgIDEpIFZpc2libGUgbWVzc2FnZSA0IHVzZXJzIChpMThuKVxuICAgICAgICAgICAgICAgIC8vICAgMikgVGVjaG5pY2FsIGNvbnNvbGUud2FyblxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSB0cnlpbmcgdG8gbG9hZCB0aGUgYmFzZWxheWVycy4gRG8geW91IGhhdmUgY29uZmlndXJlZCBhIGRlZmF1bHQgcHJvZmlsZSB3aXRoIGJhc2VsYXllcnM/Jyk7XG4gICAgICAgICAgICAgICAgc2VsZi5tYXBDb250cm9sbGVyLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvL3NlbGYubWFwQ29udHJvbGxlci5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgfS8vIGVuZCBvZiBcImxvYWRCYXNlTGF5ZXJzKClcIlxuXG4gICAgYWRkQmFzZUxheWVycyhiYXNlbGF5ZXJzKSB7XG4gICAgICAgIHZhciBiYXNlbGF5ZXIsXG4gICAgICAgICAgICB1aWQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgajtcblxuICAgICAgICAvLyBzb3J0IGJhc2VsYXllciAoZm9yIGludGVybmFsIGxpc3QpXG4gICAgICAgIGJhc2VsYXllcnMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgaWYgKCghYS5zb3J0ICYmICFiLnNvcnQpIHx8IChwYXJzZUludChhLnNvcnQsIDEwKSA9PT0gcGFyc2VJbnQoYi5zb3J0LCAxMCkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhLm5hbWUgfHwgIWIubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCFiLm5hbWUpID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKGEubmFtZS50b0xvd2VyQ2FzZSgpID4gYi5uYW1lLnRvTG93ZXJDYXNlKCkpID8gMSA6IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhLnNvcnQgfHwgIWIuc29ydCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoIWIuc29ydCkgPyAtMSA6IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKHBhcnNlSW50KGEuc29ydCwgMTApID4gcGFyc2VJbnQoYi5zb3J0LCAxMCkpID8gMSA6IC0xO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBidWlsZCBiYXNlbGF5ZXItbGlzdFxuICAgICAgICBpZiAoYmFzZWxheWVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYmFzZWxheWVycy5sZW5ndGg7IGkgKz0gMSkge1xuXG4gICAgICAgICAgICAgICAgYmFzZWxheWVyID0gYmFzZWxheWVyc1tpXTtcblxuICAgICAgICAgICAgICAgIHVpZCA9IGJhc2VsYXllci5pZCB8fCB1dGlscy5nZXRVbmlxdWVJZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZWxheWVySWRzLnB1c2godWlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYXJyQmFzZWxheWVyc1t1aWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdID0gbmV3IEM0Z0Jhc2VsYXllcihiYXNlbGF5ZXIsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBjaGVjayBpbml0aWFsIGJhc2VsYXllci1oYW5kbGluZ1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5iYXNlbGF5ZXIgJiYgcGFyc2VJbnQodWlkLCAxMCkgPT09IHBhcnNlSW50KHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmJhc2VsYXllciwgMTApKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Jhc2VMYXllcih1aWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLmhhc092ZXJsYXlzKXtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgajwgdGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXMubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW3RoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLmlkXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbdGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXNbal0uaWRdID0gbmV3IEM0Z092ZXJsYXkodGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXNbal0sIHRoaXMubWFwQ29udHJvbGxlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbdGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXNbal0uaWRdLmxheWVyID0gdGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheUNvbnRyb2xsZXIuc2hvd092ZXJsYXlMYXllcih0aGlzLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5c1tqXS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlQmFzZWxheWVySWQpIHtcbiAgICAgICAgICAgIC8vIG5vIGJhc2VsYXllciB3YXMgYWN0aXZhdGVkXG4gICAgICAgICAgICBpZiAoYmFzZWxheWVycy5sZW5ndGggPiAwICYmIGJhc2VsYXllcnNbMF0uaWQpIHtcbiAgICAgICAgICAgICAgICAvLyB0YWtlIGZpcnN0IGJhc2VsYXllciBpZiBwb3NzaWJsZVxuICAgICAgICAgICAgICAgIHVpZCA9IGJhc2VsYXllcnNbMF0uaWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBidWlsZCBkZWZhdWx0IGJhc2VsYXllclxuICAgICAgICAgICAgICAgIHVpZCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlbGF5ZXJJZHMucHVzaCh1aWQpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdjNGdfZGVmYXVsdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcjogJ29zbScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ01hcG5paydcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNob3dCYXNlTGF5ZXIodWlkKTtcblxuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJveHkuYmFzZWxheWVyc19sb2FkZWQgPSB0cnVlO1xuXG4gICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfbG9hZGVkLCB0aGlzLmJhc2VsYXllcklkcyk7XG4gICAgfSAvLyBlbmQgb2YgXCJhZGRCYXNlTGF5ZXJzKClcIlxuICAgIGNyZWF0ZUJhc2VMYXllcihsYXllck9wdGlvbnMsIGJhc2VMYXllckNvbmZpZywgc291cmNlQ29uZmlncyl7XG4gICAgICAgIHZhciBuZXdCYXNlbGF5ZXI7XG4gICAgICAgIGxheWVyT3B0aW9ucyA9IGxheWVyT3B0aW9ucyB8fCB7fTtcbiAgICAgICAgc3dpdGNoIChiYXNlTGF5ZXJDb25maWcucHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGNhc2UgJ2N1c3RvbSc6XG4gICAgICAgICAgICAgIC8vIGN1c3RvbVxuICAgICAgICAgICAgICBsZXQgbm9VcmwgPSB0cnVlO1xuICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLnVybCkge1xuICAgICAgICAgICAgICAgIGlmKGJhc2VMYXllckNvbmZpZy51cmwuaW5kZXhPZignaHR0cHMnKSAhPT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IGJhc2VMYXllckNvbmZpZy51cmw7XG4gICAgICAgICAgICAgICAgbm9VcmwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChiYXNlTGF5ZXJDb25maWcudXJscykge1xuICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmxzID0gYmFzZUxheWVyQ29uZmlnLnVybHM7XG4gICAgICAgICAgICAgICAgbm9VcmwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIW5vVXJsKSB7XG4gICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlhZWihsYXllck9wdGlvbnMpLFxuICAgICAgICAgICAgICAgICAgZXh0ZW50OiBiYXNlTGF5ZXJDb25maWcuZXh0ZW5kXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjdXN0b20gdXJsKHMpIG1pc3NpbmcgLT4gc3dpdGNoIHRvIGRlZmF1bHQnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnb3NtJzpcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlQ29uZmlncy5vc21bYmFzZUxheWVyQ29uZmlnLnN0eWxlXSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuT1NNKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb25maWdzLm9zbVtiYXNlTGF5ZXJDb25maWcuc3R5bGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlQ29uZmlncy5zdGFtZW5bYmFzZUxheWVyQ29uZmlnLnN0eWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTdGFtZW5cbiAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlN0YW1lbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5zdGFtZW5bYmFzZUxheWVyQ29uZmlnLnN0eWxlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIGlmIChtYXBRdWVzdFNvdXJjZUNvbmZpZ3NbYmFzZUxheWVyQ29uZmlnLnN0eWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgIC8vIG1hcFF1ZXN0XG4gICAgICAgICAgICAgICAgICAgIC8vICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLk1hcFF1ZXN0KG1hcFF1ZXN0U291cmNlQ29uZmlnc1tiYXNlTGF5ZXJDb25maWcuc3R5bGVdKVxuICAgICAgICAgICAgICAgICAgICAvLyAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYmFzZUxheWVyQ29uZmlnLnN0eWxlID09PSAnb3NtX2N1c3RvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY3VzdG9tXG4gICAgICAgICAgICAgICAgICAgIGxldCBub1VybCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcudXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vVXJsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYmFzZUxheWVyQ29uZmlnLnVybHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmxzID0gYmFzZUxheWVyQ29uZmlnLnVybHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBub1VybCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9VcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKGxheWVyT3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjdXN0b20gdXJsKHMpIG1pc3NpbmcgLT4gc3dpdGNoIHRvIGRlZmF1bHQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigndW5zdXBwb3J0ZWQgb3NtLXN0eWxlIC0+IHN3aXRjaCB0byBkZWZhdWx0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWFwYm94JzpcbiAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmFwaV9rZXkgJiYgYmFzZUxheWVyQ29uZmlnLmFwcF9pZCAmJiBiYXNlTGF5ZXJDb25maWcubWFwYm94X3R5cGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLm1hcGJveF90eXBlID09PSAnTWFwYm94Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IGJhc2VMYXllckNvbmZpZy51cmwgKyBiYXNlTGF5ZXJDb25maWcuYXBwX2lkICsgJy90aWxlcy97en0ve3h9L3t5fT9hY2Nlc3NfdG9rZW49JyArIGJhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5YWVooXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoc291cmNlQ29uZmlncy5tYXBib3hbYmFzZUxheWVyQ29uZmlnLm1hcGJveF90eXBlXSwgbGF5ZXJPcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IGJhc2VMYXllckNvbmZpZy51cmxfY2xhc3NpYyArIGJhc2VMYXllckNvbmZpZy5hcHBfaWQgKyAnL3t6fS97eH0ve3l9LnBuZz9hY2Nlc3NfdG9rZW49JyArIGJhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlhZWihqUXVlcnkuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb25maWdzLm1hcGJveFtiYXNlTGF5ZXJDb25maWcubWFwYm94X3R5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihiYXNlTGF5ZXJDb25maWcuaGlkZV9pbl9iZSl7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBcImNvbjRnaXMvYmFzZUxheWVyVGlsZVNlcnZpY2UvXCIgKyBiYXNlTGF5ZXJDb25maWcuaWQgKyBcIi97en0ve3h9L3t5fVwiO1xuICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKCQuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MubWFwYm94W2Jhc2VMYXllckNvbmZpZy5tYXBib3hfdHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3dyb25nIG1hcGJveCBjb25maWd1cmF0aW9uIScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2tsb2thbic6XG4gICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5hcGlfa2V5ICYmIGJhc2VMYXllckNvbmZpZy5rbG9rYW5fdHlwZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcua2xva2FuX3R5cGUgPT09ICdPcGVuTWFwVGlsZXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybCArICd7en0ve3h9L3t5fS5wYmYnO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlZlY3RvclRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3JUaWxlKGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3Mua2xva2FuW2Jhc2VMYXllckNvbmZpZy5rbG9rYW5fdHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucykpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9Ub0RvIHN0eWxlIHVybFxuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2goYmFzZUxheWVyQ29uZmlnLnVybCArICcvc3R5bGVzLycrYmFzZUxheWVyQ29uZmlnLnN0eWxlKycvc3R5bGUuanNvbicpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5qc29uKCkudGhlbihmdW5jdGlvbihnbFN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sbXMuYXBwbHlTdHlsZShuZXdCYXNlbGF5ZXIsIGdsU3R5bGUsICdvcGVubWFwdGlsZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IGJhc2VMYXllckNvbmZpZy51cmwgKyAnL2RhdGEvdjMve3p9L3t4fS97eX0ucGJmP2tleT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlZlY3RvclRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3JUaWxlKGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3Mua2xva2FuW2Jhc2VMYXllckNvbmZpZy5rbG9rYW5fdHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucykpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2goYmFzZUxheWVyQ29uZmlnLnVybCArICcvc3R5bGVzLycrYmFzZUxheWVyQ29uZmlnLnN0eWxlKycvc3R5bGUuanNvbj9rZXk9JytiYXNlTGF5ZXJDb25maWcuYXBpX2tleSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKGZ1bmN0aW9uKGdsU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xtcy5hcHBseVN0eWxlKG5ld0Jhc2VsYXllciwgZ2xTdHlsZSwgJ29wZW5tYXB0aWxlcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3dyb25nIGtsb2thbiBjb25maWd1cmF0aW9uIScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hlcmUnOlxuICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuYXBpX2tleSAmJiBiYXNlTGF5ZXJDb25maWcuYXBwX2lkICYmIGJhc2VMYXllckNvbmZpZy5oZXJlX3R5cGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLnN0eWxlID09ICdub3JtYWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gJ2h0dHBzOi8vezEtNH0uYmFzZS5tYXBzLmNpdC5hcGkuaGVyZS5jb20vbWFwdGlsZS8yLjEvbWFwdGlsZS9uZXdlc3Qvbm9ybWFsLmRheS97en0ve3h9L3t5fS8yNTYvcG5nJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJz9hcHBfaWQ9JytiYXNlTGF5ZXJDb25maWcuYXBwX2lkKycmYXBwX2NvZGU9JytiYXNlTGF5ZXJDb25maWcuYXBpX2tleTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUgPT0gJ3RyYW5zaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gJ2h0dHBzOi8vezEtNH0uYmFzZS5tYXBzLmNpdC5hcGkuaGVyZS5jb20vbWFwdGlsZS8yLjEvbWFwdGlsZS9uZXdlc3Qvbm9ybWFsLmRheS50cmFuc2l0L3t6fS97eH0ve3l9LzI1Ni9wbmcnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnP2FwcF9pZD0nK2Jhc2VMYXllckNvbmZpZy5hcHBfaWQrJyZhcHBfY29kZT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSA9PSAncGVkZXN0cmlhbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5iYXNlLm1hcHMuY2l0LmFwaS5oZXJlLmNvbS9tYXB0aWxlLzIuMS9tYXB0aWxlL25ld2VzdC9wZWRlc3RyaWFuLmRheS97en0ve3h9L3t5fS8yNTYvcG5nJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJz9hcHBfaWQ9JytiYXNlTGF5ZXJDb25maWcuYXBwX2lkKycmYXBwX2NvZGU9JytiYXNlTGF5ZXJDb25maWcuYXBpX2tleTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUgPT0gJ3RlcnJhaW4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gJ2h0dHBzOi8vezEtNH0uYWVyaWFsLm1hcHMuY2l0LmFwaS5oZXJlLmNvbS9tYXB0aWxlLzIuMS9tYXB0aWxlL25ld2VzdC90ZXJyYWluLmRheS97en0ve3h9L3t5fS8yNTYvcG5nJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJz9hcHBfaWQ9JytiYXNlTGF5ZXJDb25maWcuYXBwX2lkKycmYXBwX2NvZGU9JytiYXNlTGF5ZXJDb25maWcuYXBpX2tleTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUgPT0gJ3NhdGVsbGl0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5hZXJpYWwubWFwcy5jaXQuYXBpLmhlcmUuY29tL21hcHRpbGUvMi4xL21hcHRpbGUvbmV3ZXN0L3NhdGVsbGl0ZS5kYXkve3p9L3t4fS97eX0vMjU2L3BuZycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc/YXBwX2lkPScrYmFzZUxheWVyQ29uZmlnLmFwcF9pZCsnJmFwcF9jb2RlPScrYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLnN0eWxlID09ICdoeWJyaWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gJ2h0dHBzOi8vezEtNH0uYWVyaWFsLm1hcHMuY2l0LmFwaS5oZXJlLmNvbS9tYXB0aWxlLzIuMS9tYXB0aWxlL25ld2VzdC9oeWJyaWQuZGF5L3t6fS97eH0ve3l9LzI1Ni9wbmcnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnP2FwcF9pZD0nK2Jhc2VMYXllckNvbmZpZy5hcHBfaWQrJyZhcHBfY29kZT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlhZWigkLmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb25maWdzLmhlcmVbYmFzZUxheWVyQ29uZmlnLmhlcmVfdHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoYmFzZUxheWVyQ29uZmlnLmhpZGVfaW5fYmUpe1xuICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gbGF5ZXJPcHRpb25zLnVybCA9IFwiY29uNGdpcy9iYXNlTGF5ZXJUaWxlU2VydmljZS9cIiArIGJhc2VMYXllckNvbmZpZy5pZCArIFwiL3t6fS97eH0ve3l9XCI7XG4gICAgICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5YWVooJC5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5tYXBib3hbYmFzZUxheWVyQ29uZmlnLmhlcmVfdHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3dyb25nIEhFUkUgY29uZmlndXJhdGlvbiEnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0aHVuZGVyJzpcbiAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmFwaV9rZXkgJiYgYmFzZUxheWVyQ29uZmlnLnRodW5kZXJmb3Jlc3RfdHlwZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBcImh0dHBzOi8vdGlsZS50aHVuZGVyZm9yZXN0LmNvbS9cIitiYXNlTGF5ZXJDb25maWcuc3R5bGUrXCIve3p9L3t4fS97eX0ucG5nP2FwaWtleT1cIitiYXNlTGF5ZXJDb25maWcuYXBpX2tleTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5YWVooalF1ZXJ5LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb25maWdzLnRodW5kZXJmb3Jlc3RbYmFzZUxheWVyQ29uZmlnLnRodW5kZXJmb3Jlc3RfdHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoYmFzZUxheWVyQ29uZmlnLmhpZGVfaW5fYmUpe1xuICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gXCJjb240Z2lzL2Jhc2VMYXllclRpbGVTZXJ2aWNlL1wiICsgYmFzZUxheWVyQ29uZmlnLmlkICsgXCIve3p9L3t4fS97eX1cIjtcbiAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlhZWihqUXVlcnkuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MubWFwYm94W2Jhc2VMYXllckNvbmZpZy50aHVuZGVyZm9yZXN0X3R5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucykpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd3cm9uZyBUaHVuZGVyZm9yZXN0IGNvbmZpZ3VyYXRpb24hJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZ29vZ2xlJzpcbiAgICAgICAgICAgICAgICAvL0B0b2RvXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdnb29nbGUtbWFwcyBhcmUgY3VycmVudGx5IHVuc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdiaW5nJzpcbiAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmFwaV9rZXkgJiYgYmFzZUxheWVyQ29uZmlnLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5CaW5nTWFwcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VsdHVyZTogbmF2aWdhdG9yLmxhbmd1YWdlcyA/IG5hdmlnYXRvci5sYW5ndWFnZXNbMF0gOiAobmF2aWdhdG9yLmxhbmd1YWdlIHx8IG5hdmlnYXRvci51c2VyTGFuZ3VhZ2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogYmFzZUxheWVyQ29uZmlnLmFwaV9rZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VyeVNldDogYmFzZUxheWVyQ29uZmlnLnN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3dyb25nIGJpbmcta2V5IG9yIGludmFsaWQgaW1hZ2VyeS1zZXQhJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd21zJzpcbiAgICAgICAgICAgICAgICBpZihiYXNlTGF5ZXJDb25maWcudXJsLmluZGV4T2YoJ2h0dHBzJykgIT09IC0xKXtcbiAgICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlRpbGVXTVMoe1xuICAgICAgICAgICAgICAgICAgICAgIHVybDogYmFzZUxheWVyQ29uZmlnLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExBWUVSUzogYmFzZUxheWVyQ29uZmlnLnBhcmFtcy5sYXllcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBWRVJTSU9OOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0ZPUk1BVDogYmFzZUxheWVyQ29uZmlnLnBhcmFtcy5mb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBUUkFOU1BBUkVOVDogYmFzZUxheWVyQ29uZmlnLnBhcmFtcy50cmFuc3BhcmVudFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgZ3V0dGVyOiBiYXNlTGF5ZXJDb25maWcuZ3V0dGVyLFxuICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uczogYmFzZUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uICsgJyAnICsgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgICAgICAgICAgICAgICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cydcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIC8vZXh0ZW50OiBvbC5wcm9qLnRyYW5zZm9ybUV4dGVudChbNS41OTMzNCwgNTAuMDU3OCwgOS43NDE1OCwgNTIuNzk5OF0sICdFUFNHOjQzMjYnLCAnRVBTRzozODU3JylcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuVGlsZVdNUyh7XG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiBiYXNlTGF5ZXJDb25maWcudXJsLFxuICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgTEFZRVJTOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLmxheWVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFZFUlNJT046IGJhc2VMYXllckNvbmZpZy5wYXJhbXMudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vRk9STUFUOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFRSQU5TUEFSRU5UOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLnRyYW5zcGFyZW50XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBndXR0ZXI6IGJhc2VMYXllckNvbmZpZy5ndXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRpb25zOiBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgLy9leHRlbnQ6IG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KFs1LjU5MzM0LCA1MC4wNTc4LCA5Ljc0MTU4LCA1Mi43OTk4XSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdvd20nOlxuICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlhZWih7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGJhc2VMYXllckNvbmZpZy51cmwgKyBiYXNlTGF5ZXJDb25maWcuYXBwX2lkICsgJy97en0ve3h9L3t5fT9oYXNoPScgKyBiYXNlTGF5ZXJDb25maWcuYXBpX2tleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uczogYmFzZUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uICsgJyAnICsgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTlxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgLy9leHRlbnQ6IG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KFs1LjU5MzM0LCA1MC4wNTc4LCA5Ljc0MTU4LCA1Mi43OTk4XSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZ3JvdXAnOlxuICAgICAgICAgICAgICAgIGxldCBiYXNlTGF5ZXJHcm91cCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaW5kZXggaW4gYmFzZUxheWVyQ29uZmlnWydsYXllckdyb3VwJ10pe1xuICAgICAgICAgICAgICAgICAgaWYoYmFzZUxheWVyQ29uZmlnWydsYXllckdyb3VwJ10uaGFzT3duUHJvcGVydHkoaW5kZXgpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSB0aGlzLmNyZWF0ZUJhc2VMYXllcihudWxsLCBiYXNlTGF5ZXJDb25maWdbJ2xheWVyR3JvdXAnXVtpbmRleF0sIHNvdXJjZUNvbmZpZ3MpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWF4Wm9vbSA9IHRoaXMucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0UmVzb2x1dGlvbkZvclpvb20oYmFzZUxheWVyQ29uZmlnWydsYXllckdyb3VwJ11baW5kZXhdWydtaW5ab29tJ10pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWluWm9vbSA9IHRoaXMucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0UmVzb2x1dGlvbkZvclpvb20oYmFzZUxheWVyQ29uZmlnWydsYXllckdyb3VwJ11baW5kZXhdWydtYXhab29tJ10pO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldE1pblJlc29sdXRpb24obWluWm9vbSk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0TWF4UmVzb2x1dGlvbihtYXhab29tKTtcbiAgICAgICAgICAgICAgICAgICAgYmFzZUxheWVyR3JvdXAucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBiYXNlTGF5ZXJHcm91cFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd1bnN1cHBvcnRlZCBwcm92aWRlcicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdCYXNlbGF5ZXI7XG5cbiAgICB9XG4gICAgc2hvd0Jhc2VMYXllcihiYXNlTGF5ZXJVaWQpIHtcblxuICAgICAgICBsZXQgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBsYXllcnMsXG4gICAgICAgICAgICBiYXNlbGF5ZXIsXG4gICAgICAgICAgICBhZGRCYXNlbGF5ZXIsXG4gICAgICAgICAgICBiYXNlTGF5ZXJzLFxuICAgICAgICAgICAgc291cmNlQ29uZmlncyA9IFtdLFxuICAgICAgICAgICAgbmV3QmFzZWxheWVyLFxuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHZpZXc7XG5cbiAgICAgICAgbGV0IGJhc2VMYXllckNvbmZpZyA9IHRoaXMuYXJyQmFzZWxheWVyc1tiYXNlTGF5ZXJVaWRdO1xuXG5cbiAgICAgICAgaWYgKCh0eXBlb2YgYmFzZUxheWVyQ29uZmlnICE9PSBcInVuZGVmaW5lZFwiKSAmJiAhYmFzZUxheWVyQ29uZmlnLmxheWVyKSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgbGF5ZXJcbiAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3Mub3NtID0gY29uZmlnLm9zbTtcbiAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3Muc3RhbWVuID0gY29uZmlnLnN0YW1lbjtcbiAgICAgICAgICAgIC8vbWFwUXVlc3RTb3VyY2VDb25maWdzID0gYzRnLm1hcHMuY29uZmlnLm1hcHF1ZXN0O1xuICAgICAgICAgICAgc291cmNlQ29uZmlncy5tYXBib3ggPSBjb25maWcubWFwYm94O1xuICAgICAgICAgICAgc291cmNlQ29uZmlncy5rbG9rYW4gPSBjb25maWcua2xva2FuO1xuICAgICAgICAgICAgc291cmNlQ29uZmlncy5oZXJlID0gY29uZmlnLmhlcmU7XG4gICAgICAgICAgICBzb3VyY2VDb25maWdzLnRodW5kZXJmb3Jlc3QgPSBjb25maWcudGh1bmRlcmZvcmVzdDtcblxuICAgICAgICAgICAgLy9uZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAvLyAgc291cmNlOiBuZXcgb2wuc291cmNlLk9TTSgpXG4gICAgICAgICAgICAvL30pO1xuXG4gICAgICAgICAgICBsYXllck9wdGlvbnMgPSB7fTtcblxuICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5hdHRyaWJ1dGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChsYXllck9wdGlvbnMuYXR0cmlidXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zICsgJyAnICsgYmFzZUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OICsgJyAnICsgYmFzZUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGJhc2VMYXllckNvbmZpZy5wcm92aWRlcikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdvc20nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZUNvbmZpZ3Muc3RhbWVuW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gc291cmNlQ29uZmlncy5zdGFtZW5bYmFzZUxheWVyQ29uZmlnLnN0eWxlXS5hdHRyaWJ1dGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWFwUXVlc3RTb3VyY2VDb25maWdzW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IG1hcFF1ZXN0U291cmNlQ29uZmlnc1tiYXNlTGF5ZXJDb25maWcuc3R5bGVdLmF0dHJpYnV0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VDb25maWdzLm9zbVtiYXNlTGF5ZXJDb25maWcuc3R5bGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IHNvdXJjZUNvbmZpZ3Mub3NtW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0uYXR0cmlidXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtYXBib3gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IHNvdXJjZUNvbmZpZ3MubWFwYm94W2Jhc2VMYXllckNvbmZpZy5tYXBib3hfdHlwZV0uYXR0cmlidXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2tsb2thbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gc291cmNlQ29uZmlncy5rbG9rYW5bYmFzZUxheWVyQ29uZmlnLmtsb2thbl90eXBlXS5hdHRyaWJ1dGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVyZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gc291cmNlQ29uZmlncy5oZXJlW2Jhc2VMYXllckNvbmZpZy5oZXJlX3R5cGVdLmF0dHJpYnV0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0aHVuZGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBzb3VyY2VDb25maWdzLnRodW5kZXJmb3Jlc3RbYmFzZUxheWVyQ29uZmlnLnRodW5kZXJmb3Jlc3RfdHlwZV0uYXR0cmlidXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9Ub0RvIGhlbHBlciBjbGFzcyBmb3IgYXR0cmlidXRpb25zXG5cbiAgICAgICAgICAgIC8vYWRkaXRpb25hbCBhdHRyaWJ1dGlvblxuICAgICAgICAgICAgaWYgKHRoaXMubWFwQ29udHJvbGxlci5kYXRhICYmIHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmF0dHJpYnV0aW9uICYmIHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmF0dHJpYnV0aW9uLmFkZGl0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICBpZiAobGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYWRkaXRpb25hbEF0dHJpYnV0aW9uID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYXR0cmlidXRpb24uYWRkaXRpb25hbDtcblxuICAgICAgICAgICAgICAgICAgICBleGlzdHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllck9wdGlvbnMuYXR0cmlidXRpb25zW2ldID09IGFkZGl0aW9uYWxBdHRyaWJ1dGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgKyAnICcgKyBhZGRpdGlvbmFsQXR0cmlidXRpb247XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYXR0cmlidXRpb24uYWRkaXRpb25hbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vVG9EbyB0eXBlIGNsYXNzIGZvciBnZW9zZWFyY2hfZW5naW5lXG4gICAgICAgICAgICAvL2dlb3NlYXJjaCBhdHRyaWJ1dGlvblxuICAgICAgICAgICAgdmFyIGdlb3NlYXJjaF9hdHRyaWJ1dGlvbiA9ICcnO1xuICAgICAgICAgICAgaWYgKHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmdlb3NlYXJjaCkge1xuICAgICAgICAgICAgICAgIHZhciBnZW9zZWFyY2hfZW5naW5lID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuZ2Vvc2VhcmNoLmdlb3NlYXJjaF9lbmdpbmU7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXBDb250cm9sbGVyLmRhdGEgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYXR0cmlidXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGdlb3NlYXJjaF9lbmdpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb3NlYXJjaF9hdHRyaWJ1dGlvbiA9ICcnOyAvL2NvbjRnaXMgbWFwc2VydmljZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5nZW9zZWFyY2guY3VzdG9tX2F0dHJpYnV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb3NlYXJjaF9hdHRyaWJ1dGlvbiA9IHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmdlb3NlYXJjaC5jdXN0b21fYXR0cmlidXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vbWluYXRpbSBTZWFyY2ggQ291cnRlc3kgb2YgPGEgaHJlZj1cImh0dHA6Ly93d3cubWFwcXVlc3QuY29tL1wiIHRhcmdldD1cIl9ibGFua1wiPk1hcFF1ZXN0PC9hPiA8aW1nIHNyYz1cImh0dHA6Ly9kZXZlbG9wZXIubWFwcXVlc3QuY29tL2NvbnRlbnQvb3NtL21xX2xvZ28ucG5nXCIgYWx0PVwiXCIgLz4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb3NlYXJjaF9hdHRyaWJ1dGlvbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdOb21pbmF0aW0gU2VhcmNoIENvdXJ0ZXN5IG9mIDxhIGhyZWY9XCJodHRwOi8vd2lraS5vcGVuc3RyZWV0bWFwLm9yZy93aWtpL05vbWluYXRpbV91c2FnZV9wb2xpY3lcIiB0YXJnZXQ9XCJfYmxhbmtcIj5PcGVuU3RyZWV0TWFwPC9hPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBnZW9zZWFyY2hBdHRyaWJ1dGlvbiA9IGdlb3NlYXJjaF9hdHRyaWJ1dGlvbjtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZXhpc3RzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9uc1tpXSA9PSBnZW9zZWFyY2hBdHRyaWJ1dGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgKyAnICcgKyBnZW9zZWFyY2hBdHRyaWJ1dGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBnZW9zZWFyY2hBdHRyaWJ1dGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5zb3J0aW5nKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnNvcnQgPSBiYXNlTGF5ZXJDb25maWcuc29ydGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcubWluWm9vbSAmJiBiYXNlTGF5ZXJDb25maWcubWluWm9vbSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLm1pblpvb20gPSBiYXNlTGF5ZXJDb25maWcubWluWm9vbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcubWF4Wm9vbSAmJiBiYXNlTGF5ZXJDb25maWcubWF4Wm9vbSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLm1heFpvb20gPSBiYXNlTGF5ZXJDb25maWcubWF4Wm9vbTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gdGhpcy5jcmVhdGVCYXNlTGF5ZXIobGF5ZXJPcHRpb25zLCBiYXNlTGF5ZXJDb25maWcsIHNvdXJjZUNvbmZpZ3MpO1xuICAgICAgICAgICAgaWYoYmFzZUxheWVyQ29uZmlnLmhhc092ZXJsYXlzKXtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpPCBiYXNlTGF5ZXJDb25maWcub3ZlcmxheXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICBpZighYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW2Jhc2VMYXllckNvbmZpZy5vdmVybGF5c1tpXS5pZF0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW2Jhc2VMYXllckNvbmZpZy5vdmVybGF5c1tpXS5pZF0gPSBuZXcgQzRnT3ZlcmxheShiYXNlTGF5ZXJDb25maWcub3ZlcmxheXNbaV0sdGhpcy5tYXBDb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VMYXllckNvbmZpZy5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5c1tiYXNlTGF5ZXJDb25maWcub3ZlcmxheXNbaV0uaWRdLmxheWVyID0gYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlDb250cm9sbGVyLnNob3dPdmVybGF5TGF5ZXIoYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlzW2ldLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIChiYXNlTGF5ZXJDb25maWcuaGFzT3ZlcmxheXMpIHtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgZm9yIChpID0gMDsgaSA8IGJhc2VMYXllckNvbmZpZy5vdmVybGF5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgLy8gICAgICAgICBpZighYzRnLm1hcHMub3ZlcmxheXMpe1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgYzRnLm1hcHMub3ZlcmxheXMgPSBbXTtcbiAgICAgICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgICAgICBjNGcubWFwcy5vdmVybGF5c1tiYXNlTGF5ZXJDb25maWcub3ZlcmxheXNbaV0uaWRdID0gYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlzW2ldO1xuICAgICAgICAgICAgLy8gICAgICAgICBpZih0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5iYXNlbGF5ZXIgJiYgcGFyc2VJbnQoYmFzZUxheWVyQ29uZmlnLmlkLCAxMCkgPT09IHBhcnNlSW50KHRoaXMucHJveHkuYWN0aXZlQmFzZWxheWVySWQsIDEwKSkge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgc2VsZi5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihzZWxmLnNob3dPdmVybGF5TGF5ZXIoYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlzW2ldLmlkKSk7XG4gICAgICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICB0aGlzLmFyckJhc2VsYXllcnNbYmFzZUxheWVyVWlkXS5sYXllciA9IG5ld0Jhc2VsYXllcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxheWVycyA9IHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0TGF5ZXJzKCk7XG5cbiAgICAgICAgLy8gc2VjdXJlXG4gICAgICAgIGlmIChsYXllcnMuaXRlbSgwKS5nZXQoJ2NoZWNrU3VtJykgPT09IFwiYmFzZU1hcHNMYXllclwiKSB7XG4gICAgICAgICAgICBiYXNlTGF5ZXJzID0gbGF5ZXJzLml0ZW0oMCkuZ2V0TGF5ZXJzKCk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5hcnJCYXNlbGF5ZXJzW2Jhc2VMYXllclVpZF0gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBiYXNlbGF5ZXIgPSB0aGlzLmFyckJhc2VsYXllcnNbYmFzZUxheWVyVWlkXS5sYXllcjtcblxuICAgICAgICAgICAgICAgIGlmIChiYXNlbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkQmFzZWxheWVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYmFzZUxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICYmIChlbGVtZW50ID09PSBiYXNlbGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEJhc2VsYXllciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQmFzZWxheWVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGRCYXNlbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VMYXllcnMucHVzaChiYXNlbGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmlldyA9IHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpO1xuICAgICAgICAgICAgICAgIHZhciB6b29tID0gdmlldy5nZXRab29tKCk7XG4gICAgICAgICAgICAgICAgdmFyIGNlbnRlciA9IHZpZXcuZ2V0Q2VudGVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKChiYXNlTGF5ZXJDb25maWcubWluWm9vbSAmJiBiYXNlTGF5ZXJDb25maWcubWluWm9vbSA+PSAwKSB8fFxuICAgICAgICAgICAgICAgICAgICAoYmFzZUxheWVyQ29uZmlnLm1heFpvb20gJiYgYmFzZUxheWVyQ29uZmlnLm1heFpvb20gPj0gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5taW5ab29tICYmICh2aWV3LmdldFpvb20oKSA8IGJhc2VMYXllckNvbmZpZy5taW5ab29tKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5zZXRab29tKGJhc2VMYXllckNvbmZpZy5taW5ab29tKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChiYXNlTGF5ZXJDb25maWcubWF4Wm9vbSAmJiAodmlldy5nZXRab29tKCkgPiBiYXNlTGF5ZXJDb25maWcubWF4Wm9vbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuc2V0Wm9vbShiYXNlTGF5ZXJDb25maWcubWF4Wm9vbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWFwRGF0YSA9IHRoaXMubWFwQ29udHJvbGxlci5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFwRGF0YS56b29tbGV2ZWwgfHwgbWFwRGF0YS5tb3VzZXBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbENvbnRhaW5lclRvcExlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9UTCArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIuJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50LnByZXBlbmQoY29udHJvbENvbnRhaW5lclRvcExlZnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9CTCArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGNvbnRyb2xDb250YWluZXJUb3BMZWZ0KS5hZnRlcihjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIubGVmdFNsaWRlRWxlbWVudHMucHVzaChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX0JMX1NVQiArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdWaWV3ID0gbmV3IG9sLlZpZXcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjogY2VudGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Rpb246IHZpZXcuZ2V0UHJvamVjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IHpvb20sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluWm9vbTogcGFyc2VJbnQoYmFzZUxheWVyQ29uZmlnLm1pblpvb20sIDEwKSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFpvb206IHBhcnNlSW50KGJhc2VMYXllckNvbmZpZy5tYXhab29tLCAxMCkgfHwgMTksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IHZpZXcuZ2V0Um90YXRpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9uOiB2aWV3LmdldFJlc29sdXRpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLnNldFZpZXcobmV3Vmlldyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5yZWRyYXdNYXBWaWV3KHRoaXMubWFwQ29udHJvbGxlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChtYXBEYXRhLnNjYWxlbGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUNvbnRyb2wodGhpcy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnNjYWxlbGluZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoaXMubWFwQ29udHJvbGxlci5jb250cm9scy5zY2FsZWxpbmUgPSBuZXcgb2wuY29udHJvbC5TY2FsZUxpbmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIG1hcFZpZXc6IHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgdW5kZWZpbmVkSFRNTDogJ04vQSdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAuYWRkQ29udHJvbCh0aGlzLm1hcENvbnRyb2xsZXIuY29udHJvbHMuc2NhbGVsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAkKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KS5hcHBlbmQoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChtYXBEYXRhLnpvb21sZXZlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUNvbnRyb2wodGhpcy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnpvb21sZXZlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoaXMubWFwQ29udHJvbGxlci5jb250cm9scy56b29tbGV2ZWwgPSBuZXcgYzRnLm1hcHMuY29udHJvbC5ab29tbGV2ZWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIG1hcFZpZXc6IHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgdW5kZWZpbmVkSFRNTDogJ04vQSdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAuYWRkQ29udHJvbCh0aGlzLm1hcENvbnRyb2xsZXIuY29udHJvbHMuem9vbWxldmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAobWFwRGF0YS5tb3VzZXBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlQ29udHJvbCh0aGlzLm1hcENvbnRyb2xsZXIuY29udHJvbHMubW91c2Vwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoaXMubWFwQ29udHJvbGxlci5jb250cm9scy5tb3VzZXBvc2l0aW9uID0gbmV3IG9sLmNvbnRyb2wuTW91c2VQb3NpdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgcHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29vcmRpbmF0ZUZvcm1hdDogb2wuY29vcmRpbmF0ZS50b1N0cmluZ0hETVMsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB1bmRlZmluZWRIVE1MOiAnTi9BJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5hZGRDb250cm9sKHRoaXMubWFwQ29udHJvbGxlci5jb250cm9scy5tb3VzZXBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBiYXNlTGF5ZXJDb25maWcgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMucHJveHkuYWN0aXZlQmFzZWxheWVySWQgPSBiYXNlTGF5ZXJDb25maWcuaWQ7XG5cbiAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfdmlzaWJpbGl0eSwgYmFzZUxheWVyQ29uZmlnKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDZXNpdW0gaW50ZWdyYXRpb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBiYXNlTGF5ZXJDb25maWcgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFwRGF0YSA9IHRoaXMubWFwQ29udHJvbGxlci5kYXRhO1xuICAgICAgICAgICAgICAgIGlmIChtYXBEYXRhLmNlc2l1bSAmJiBtYXBEYXRhLmNlc2l1bS5lbmFibGUgJiYgKG1hcERhdGEuY2VzaXVtLmFsd2F5cyB8fCBiYXNlTGF5ZXJDb25maWcuY2VzaXVtKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMub2wzZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbDNkID0gbmV3IG9sY3MuT0xDZXNpdW0oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogdGhpcy5tYXBDb250cm9sbGVyLm1hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVTeW5jaHJvbml6ZXJzOiBmYWxzZS8qLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IHRpbWVFbHQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbDNkLmdldENlc2l1bVNjZW5lKCkuZ2xvYmUuZW5hYmxlTGlnaHRpbmcgJiYgdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuc2V0VVRDSG91cnModmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDZXNpdW0uSnVsaWFuRGF0ZS5mcm9tRGF0ZShkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2VzaXVtLkp1bGlhbkRhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLypjb25zdCBzY2VuZSA9IG9sM2QuZ2V0Q2VzaXVtU2NlbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVycmFpblByb3ZpZGVyID0gbmV3IENlc2l1bS5DZXNpdW1UZXJyYWluUHJvdmlkZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnLy9hc3NldHMuYWdpLmNvbS9zdGstdGVycmFpbi93b3JsZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VmVydGV4Tm9ybWFsczogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc2NlbmUudGVycmFpblByb3ZpZGVyID0gdGVycmFpblByb3ZpZGVyOyovXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2wzZC5zZXRFbmFibGVkKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAvKndpbmRvd1sndG9nZ2xlVGltZSddID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2VuZS5nbG9iZS5lbmFibGVMaWdodGluZyA9ICFzY2VuZS5nbG9iZS5lbmFibGVMaWdodGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lRWx0LnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZUVsdC5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVFbHQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTsqL1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9sM2QgJiYgdGhpcy5vbDNkLmdldEVuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbDNkLnNldEVuYWJsZWQoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMucmVkcmF3TWFwVmlldyh0aGlzLm1hcENvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSAvLyBlbmQgb2YgXCJzaG93QmFzZUxheWVyKClcIlxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWJhc2VsYXllci1jb250cm9sbGVyLmpzIiwiaW1wb3J0IHtDNGdPdmVybGF5Q29udHJvbGxlcn0gZnJvbSBcIi4vYzRnLW92ZXJsYXktY29udHJvbGxlclwiXG5cbmV4cG9ydCBjbGFzcyBDNGdCYXNlbGF5ZXJ7XG4gICAgY29uc3RydWN0b3IoYmFzZWxheWVyQXJyLCBjb250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMuaWQgPSBiYXNlbGF5ZXJBcnJbJ2lkJ107XG4gICAgICAgIHRoaXMucGlkID0gYmFzZWxheWVyQXJyWydwaWQnXTtcbiAgICAgICAgdGhpcy5uYW1lID0gYmFzZWxheWVyQXJyWyduYW1lJ107XG4gICAgICAgIHRoaXMuZGlzcGxheV9uYW1lID0gYmFzZWxheWVyQXJyWydkaXNwbGF5X25hbWUnXTtcbiAgICAgICAgdGhpcy5wcm92aWRlciA9IGJhc2VsYXllckFyclsncHJvdmlkZXInXTtcbiAgICAgICAgdGhpcy5vc21fc3R5bGUgPSBiYXNlbGF5ZXJBcnJbJ29zbV9zdHlsZSddO1xuICAgICAgICB0aGlzLm9zbV9zdHlsZV91cmwxID0gYmFzZWxheWVyQXJyWydvc21fc3R5bGVfdXJsMSddO1xuICAgICAgICB0aGlzLm9zbV9zdHlsZV91cmwyID0gYmFzZWxheWVyQXJyWydvc21fc3R5bGVfdXJsMiddO1xuICAgICAgICB0aGlzLm9zbV9zdHlsZV91cmwzID0gYmFzZWxheWVyQXJyWydvc21fc3R5bGVfdXJsMyddO1xuICAgICAgICB0aGlzLm9zbV9zdHlsZV91cmw0ID0gYmFzZWxheWVyQXJyWydvc21fc3R5bGVfdXJsNCddO1xuICAgICAgICB0aGlzLm9zbV9rZXluYW1lID0gYmFzZWxheWVyQXJyWydvc21fa2V5bmFtZSddO1xuICAgICAgICB0aGlzLm1hcGJveF90eXBlID0gYmFzZWxheWVyQXJyWydtYXBib3hfdHlwZSddO1xuICAgICAgICB0aGlzLmJpbmdfc3R5bGUgPSBiYXNlbGF5ZXJBcnJbJ2Jpbmdfc3R5bGUnXTtcbiAgICAgICAgdGhpcy5zdHlsZSA9IGJhc2VsYXllckFyclsnc3R5bGUnXTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGlvbiA9IGJhc2VsYXllckFyclsnYXR0cmlidXRpb24nXTtcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBiYXNlbGF5ZXJBcnJbJ3BhcmFtcyddO1xuICAgICAgICB0aGlzLndtc19ndXR0ZXIgPSBiYXNlbGF5ZXJBcnJbJ3dtc19ndXR0ZXInXTtcbiAgICAgICAgdGhpcy5taW5ab29tID0gYmFzZWxheWVyQXJyWydtaW5ab29tJ107XG4gICAgICAgIHRoaXMubWF4Wm9vbSA9IGJhc2VsYXllckFyclsnbWF4Wm9vbSddO1xuICAgICAgICB0aGlzLnByb3RlY3RfYmFzZWxheWVyID0gYmFzZWxheWVyQXJyWydwcm90ZWN0X2Jhc2VsYXllciddO1xuICAgICAgICB0aGlzLnBlcm1pdHRlZF9ncm91cHMgPSBiYXNlbGF5ZXJBcnJbJ3Blcm1pdHRlZF9ncm91cHMnXTtcbiAgICAgICAgdGhpcy5hcGlfa2V5ID0gYmFzZWxheWVyQXJyWydhcGlLZXknXSA/IGJhc2VsYXllckFyclsnYXBpS2V5J10gOiBiYXNlbGF5ZXJBcnJbJ2FwaV9rZXknXTtcbiAgICAgICAgdGhpcy5hcHBfaWQgPSBiYXNlbGF5ZXJBcnJbJ2FwcF9pZCddO1xuICAgICAgICB0aGlzLnRodW5kZXJmb3Jlc3RfdHlwZSA9IGJhc2VsYXllckFyclsndGh1bmRlcmZvcmVzdF90eXBlJ107XG4gICAgICAgIHRoaXMuaGVyZV90eXBlID0gYmFzZWxheWVyQXJyWydoZXJlX3R5cGUnXTtcbiAgICAgICAgdGhpcy5jZXNpdW0gPSBiYXNlbGF5ZXJBcnJbJ2Nlc2l1bSddO1xuICAgICAgICB0aGlzLmhpZGVfaW5fYmUgPSBiYXNlbGF5ZXJBcnJbJ2hpZGVfaW5fYmUnXTtcbiAgICAgICAgdGhpcy51cmwgPSBiYXNlbGF5ZXJBcnJbJ3VybCddO1xuICAgICAgICB0aGlzLnVybHMgPSBiYXNlbGF5ZXJBcnJbJ3VybHMnXTtcbiAgICAgICAgdGhpcy5rbG9rYW5fdHlwZSA9IGJhc2VsYXllckFyclsna2xva2FuX3R5cGUnXTtcbiAgICAgICAgdGhpcy5zdHlsZV91cmwgPSBiYXNlbGF5ZXJBcnJbJ3N0eWxlX3VybCddO1xuICAgICAgICB0aGlzLmhhc092ZXJsYXlzID0gYmFzZWxheWVyQXJyWydoYXNPdmVybGF5cyddO1xuICAgICAgICB0aGlzLm92ZXJsYXlzID0gYmFzZWxheWVyQXJyWydvdmVybGF5cyddO1xuICAgICAgICBpZihiYXNlbGF5ZXJBcnJbJ2xheWVyR3JvdXAnXSl7XG4gICAgICAgICAgICBsZXQgbGF5ZXJHcm91cCA9IFtdO1xuICAgICAgICAgICAgZm9yKGxldCBpbmRleCBpbiBiYXNlbGF5ZXJBcnJbJ2xheWVyR3JvdXAnXSApe1xuICAgICAgICAgICAgICAgIGlmKGJhc2VsYXllckFyclsnbGF5ZXJHcm91cCddLmhhc093blByb3BlcnR5KGluZGV4KSl7XG4gICAgICAgICAgICAgICAgICBsYXllckdyb3VwW2luZGV4XSA9IG5ldyBDNGdCYXNlbGF5ZXIoYmFzZWxheWVyQXJyWydsYXllckdyb3VwJ11baW5kZXhdWydlbnRyeSddKTtcbiAgICAgICAgICAgICAgICAgIGxheWVyR3JvdXBbaW5kZXhdWydtaW5ab29tJ10gPSBiYXNlbGF5ZXJBcnJbJ2xheWVyR3JvdXAnXVtpbmRleF1bJ21pblpvb20nXTtcbiAgICAgICAgICAgICAgICAgIGxheWVyR3JvdXBbaW5kZXhdWydtYXhab29tJ10gPSBiYXNlbGF5ZXJBcnJbJ2xheWVyR3JvdXAnXVtpbmRleF1bJ21heFpvb20nXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxheWVyR3JvdXAgPSBsYXllckdyb3VwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3ZlcmxheUNvbnRyb2xsZXIgPSBuZXcgQzRnT3ZlcmxheUNvbnRyb2xsZXIodGhpcyk7XG4gICAgICAgIHRoaXMubGF5ZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlclxuICAgIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1iYXNlbGF5ZXIuanMiLCJpbXBvcnQge0M0Z0xheWVyfSBmcm9tIFwiLi9jNGctbGF5ZXJcIlxuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIlxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5cblxuXG5pbXBvcnQge0N1c3RvbXRhYn0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRwbHVnaW4tY3VzdG9tdGFiXCI7XG5cbmV4cG9ydCBjbGFzcyBDNGdMYXllckNvbnRyb2xsZXJ7XG4gIGNvbnN0cnVjdG9yKHByb3h5KXtcbiAgICB0aGlzLnByb3h5ID0gcHJveHk7XG4gICAgdGhpcy5tYXBDb250cm9sbGVyID0gcHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyO1xuICAgIHRoaXMuYXJyTGF5ZXJzID0ge307XG4gICAgdGhpcy5sYXllclJlcXVlc3RzID0ge307XG4gIH1cbiAgXG4gIGxvYWRMYXllcnMgKCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBpZiAodGhpcy5tYXBJZCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8valF1ZXJ5LmFqYXgoXCJtYXBzL2xheWVyU2VydmljZVwiLHsvL3RoaXMucHJveHkuYXBpX2xheWVyX3VybCx7XG4gICAgalF1ZXJ5LmFqYXgodGhpcy5wcm94eS5hcGlfbGF5ZXJfdXJsLHtcbiAgICAgIGRhdGFUeXBlOiB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5qc29ucCA/IFwianNvbnBcIiA6IFwianNvblwiXG5cbiAgICB9KS5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBzZWxmLmFkZExheWVycyhkYXRhLmxheWVyLCBkYXRhLmZvcmVpZ25MYXllcnMpO1xuICAgICAgc2VsZi5wcm94eS5sYXllcnNfbG9hZGVkID0gdHJ1ZTtcbiAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHNlbGYucHJveHkuaG9va19sYXllcl9sb2FkZWQsIHNlbGYucHJveHkubGF5ZXJJZHMpO1xuICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9sYXllcl9sb2FkZWQsIHtsYXllcklkczogc2VsZi5wcm94eS5sYXllcklkcywgcHJveHk6IHNlbGYucHJveHl9KTtcbiAgICAgIHNlbGYucHJveHkuY2hlY2tMb2NhdGlvblN0eWxlcyh7XG4gICAgICAgIGRvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLmRyYXdMYXllckluaXRpYWwoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5mYWlsKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEBUT0RPOiBlcnJvci1tZXNzYWdlc1xuICAgICAgLy8gICAxKSBWaXNpYmxlIG1lc3NhZ2UgNCB1c2VycyAoaTE4bilcbiAgICAgIC8vICAgMikgVGVjaG5pY2FsIGNvbnNvbGUud2FyblxuICAgICAgY29uc29sZS53YXJuKCdBbiBlcnJvciBvY2N1cmVkIHdoaWxlIHRyeWluZyB0byBsb2FkIHRoZSBsYXllcnMuLi4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KS5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gdGhpcy5wcm94eS5zdGFyYm9hcmQuc3Bpbm5lci5oaWRlKCk7XG4gICAgfSk7XG4gIH0gLy8gZW5kIG9mIFwibG9hZExheWVyKClcIlxuICBhZGRMYXllcnMobGF5ZXJzLCBmb3JlaWduTGF5ZXJzKSB7XG4gICAgdmFyIGksXG4gICAgICBqLFxuICAgICAgayxcbiAgICAgIHAsXG4gICAgICBpc1Zpc2libGUsXG4gICAgICBsYXllcixcbiAgICAgIHN0b3JlZEl0ZW0sXG4gICAgICBsaW5rSXRlbXMsXG4gICAgICB1aWQsXG4gICAgICBjdXJyZW50Wm9vbSxcbiAgICAgIGZuSGFuZGxlQW5kQXBwZW5kTGF5ZXJDaGlsZHMsXG4gICAgICBlbmRsZXNzTG9vcElkLFxuICAgICAgcGFyZW50SWQsXG4gICAgICBwYXJlbnRJZHMsXG4gICAgICBwZXJtYWxpbmtlZExheWVycyxcbiAgICAgIGNoaWxkLFxuICAgICAgZm5IYW5kbGVDaGlsZHMsXG4gICAgICBrZXksXG4gICAgICBzdGFyYm9hcmQsXG4gICAgICBmbkFkZFRvSG9vaztcblxuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBpc1Zpc2libGUgPSBmYWxzZTtcblxuICAgIHBlcm1hbGlua2VkTGF5ZXJzID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGEubGF5ZXJzIHx8IFtdO1xuXG4gICAgZm5IYW5kbGVBbmRBcHBlbmRMYXllckNoaWxkcyA9IGZ1bmN0aW9uIChvYmpJdGVtKSB7XG4gICAgICB2YXIgdG9nZ2xlLFxuICAgICAgICBlbnRyeVdyYXBwZXI7XG5cbiAgICAgIGlmIChvYmpJdGVtLmhhc0NoaWxkcykge1xuICAgICAgICBvYmpJdGVtLnZpc2libGVDaGlsZHMgPSBzZWxmLmFkZExheWVycyhvYmpJdGVtLmNoaWxkcywgZm9yZWlnbkxheWVycyk7XG4gICAgICB9XG4gICAgfTsgLy8gZW5kIG9mIFwiZm5IYW5kbGVBbmRBcHBlbmRMYXllckNoaWxkcygpXCJcblxuICAgIC8vIHdyYXBwZXIgZnVuY3Rpb24gdG8gYXZvaWQgY2xvc3VyZSBhY2Nlc3NpYmlsaXR5XG4gICAgZm5BZGRUb0hvb2sgPSBmdW5jdGlvbihsYXllcikge1xuICAgICAgdmFyIGxheWVybmFtZSwgbGF5ZXJpZCwgbGF5ZXJpY29uO1xuXG4gICAgICBpZiAobGF5ZXIuY2hpbGRzICYmIGxheWVyLmNoaWxkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxheWVybmFtZSA9IGxheWVyLm5hbWU7XG4gICAgICAgIGxheWVyaWQgPSBsYXllci50YWJJZDtcbiAgICAgICAgbGF5ZXJpY29uID0gbGF5ZXIuYXdlc29tZWljb247XG4gICAgICAgIHN0YXJib2FyZCA9IHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnN0YXJib2FyZDtcbiAgICAgICAgaWYgKCFzdGFyYm9hcmQpIHtcbiAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5pbml0aWFsaXplU3RhcmJvYXJkKCk7XG4gICAgICAgICAgc3RhcmJvYXJkID0gc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIuY29udHJvbHMuc3RhcmJvYXJkO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJib2FyZC5ob29rX2xheWVyc3dpdGNoZXJfbG9hZGVkLnB1c2goZnVuY3Rpb24oKXtcbiAgICAgICAgICBzdGFyYm9hcmQuc3RhcmJvYXJkVGFicyA9IHN0YXJib2FyZC5zdGFyYm9hcmRUYWJzIHx8IHt9O1xuICAgICAgICAgIHN0YXJib2FyZC5zdGFyYm9hcmRUYWJzW2xheWVyaWRdID0gbmV3IEN1c3RvbXRhYihzdGFyYm9hcmQsIHtcbiAgICAgICAgICAgIG5hbWU6IGxheWVybmFtZSxcbiAgICAgICAgICAgIHRhYklkOiBsYXllcmlkLFxuICAgICAgICAgICAgYXdlc29tZWljb246IGxheWVyaWNvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGxheWVycyAmJiBsYXllcnMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxheWVycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAodGhpcy5hcnJMYXllcnNbbGF5ZXJzW2ldLmlkXSkge1xuICAgICAgICAgIGxheWVyID0gdGhpcy5hcnJMYXllcnNbbGF5ZXJzW2ldLmlkXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXllciA9IG5ldyBDNGdMYXllcihsYXllcnNbaV0pOy8vbGF5ZXJzW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlua0l0ZW1zID0gZmFsc2U7XG4gICAgICAgIC8vY29uc29sZS5sb2cobGF5ZXIpO1xuICAgICAgICBpZiAodHlwZW9mIGxheWVyLmNvbnRlbnQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICBsYXllci5jb250ZW50ID0gdXRpbHMub2JqZWN0VG9BcnJheShsYXllci5jb250ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVuZGxlc3MtbG9vcCBwcmV2ZW50aW9uXG4gICAgICAgIC8vXG4gICAgICAgIHBhcmVudElkID0gbGF5ZXIucGlkO1xuICAgICAgICBwYXJlbnRJZHMgPSB7fTtcbiAgICAgICAgLy8gYnVpbGQgcGFyZW50LWlkcyBjaGFpblxuICAgICAgICB3aGlsZSAoc2VsZi5hcnJMYXllcnNbcGFyZW50SWRdKSB7XG4gICAgICAgICAgaWYgKHBhcmVudElkc1twYXJlbnRJZF0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ2F1Z2h0IGVuZGxlc3MtbG9vcCAoSUQ6ICcgKyBsYXllci5pZCArICcpJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50SWRzW3BhcmVudElkXSA9IHRydWU7XG4gICAgICAgICAgcGFyZW50SWQgPSB0aGlzLmFyckxheWVyc1twYXJlbnRJZF0ucGlkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxheWVyLmNvbnRlbnQgJiYgbGF5ZXIuY29udGVudFswXSAmJiBsYXllci5jb250ZW50WzBdLmNzc0NsYXNzKSB7XG4gICAgICAgICAgbGF5ZXIuY3NzQ2xhc3MgPSBsYXllci5jb250ZW50WzBdLmNzc0NsYXNzO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoIXBhcmVudElkc1twYXJlbnRJZF0pIHtcblxuICAgICAgICAgIC8vIHByZXBhcmUgbGF5ZXIgZGF0YSBpZiB0aGV5IGFyZSBhIG5ldyBzdGFyYm9hcmQgdGFiXG4gICAgICAgICAgaWYgKGxheWVyLnR5cGUgPT09IFwic3RhcnRhYlwiKSB7XG4gICAgICAgICAgICBsYXllci5lZGl0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICBsYXllci5yZW5kZXJTcGVjaWFsID0gdHJ1ZTtcbiAgICAgICAgICAgIGxheWVyLnRhYklkID0gbGF5ZXIuaWQ7XG4gICAgICAgICAgICBpZiAoIWxheWVyLmxheWVybmFtZSkge1xuICAgICAgICAgICAgICBsYXllci5kaXNwbGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgY2hpbGRzIGFuZCB0ZWxsIHRoZW0gdG8gbm90IGxvYWQgaW4gbGF5ZXJzd2l0Y2hlclxuICAgICAgICAgICAgZm5IYW5kbGVDaGlsZHMgPSBmdW5jdGlvbihmTGF5ZXIpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgY291bnQgPSAwOyBjb3VudCA8IGZMYXllci5jaGlsZHMubGVuZ3RoOyBjb3VudCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkQXJyID0gZkxheWVyLmNoaWxkc1tjb3VudF07XG4gICAgICAgICAgICAgICAgY2hpbGRBcnIuZWRpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNoaWxkQXJyLnRhYklkID0gZkxheWVyLnRhYklkO1xuICAgICAgICAgICAgICAgIGNoaWxkQXJyLnJlbmRlclNwZWNpYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmFyckxheWVyc1tjaGlsZEFyci5pZF0pIHtcbiAgICAgICAgICAgICAgICAgIGNoaWxkID0gc2VsZi5hcnJMYXllcnNbY2hpbGRBcnIuaWRdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjaGlsZCA9IG5ldyBDNGdMYXllcihjaGlsZEFycik7Ly9sYXllcnNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHNldCByZW5kZXJTcGVjaWFsIHRvIHJlbW92ZSBpdCBmcm9tIG5vcm1hbCBsYXllcnN3aXRjaGVyXG4gICAgICAgICAgICAgICAgc2VsZi5hcnJMYXllcnNbY2hpbGQuaWRdID0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgZkxheWVyLmNoaWxkc1tjb3VudF0gPSBjaGlsZDtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQuaGFzQ2hpbGRzKSB7XG4gICAgICAgICAgICAgICAgICAvLyByZWN1cnNpdmUgY2FsbFxuICAgICAgICAgICAgICAgICAgZm5IYW5kbGVDaGlsZHMoY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIGZuSGFuZGxlQ2hpbGRzXG5cbiAgICAgICAgICAgIGlmIChsYXllci5oYXNDaGlsZHMpIHtcbiAgICAgICAgICAgICAgZm5IYW5kbGVDaGlsZHMobGF5ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm5BZGRUb0hvb2sobGF5ZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHVpZCA9IGxheWVyLmlkIHx8IHV0aWxzLmdldFVuaXF1ZUlkKCk7XG4gICAgICAgICAgdGhpcy5hcnJMYXllcnNbdWlkXSA9IGxheWVyO1xuICAgICAgICAgIGlmKHRoaXMucHJveHkuY2hlY2tMYXllcklzQWN0aXZlRm9yWm9vbShsYXllci5pZCkpe1xuICAgICAgICAgICAgbGF5ZXIuaXNJbmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgbGF5ZXIuaXNJbmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5wcm94eS5sYXllcklkcy5wdXNoKGxheWVyLmlkKTtcblxuICAgICAgICAgIGlmIChsYXllci5kaXNwbGF5KSB7XG4gICAgICAgICAgICBpc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgZm5IYW5kbGVBbmRBcHBlbmRMYXllckNoaWxkcyhsYXllcik7XG4gICAgICAgICAgfSBlbHNlIGlmIChsYXllci5waWQgJiYgdGhpcy5hcnJMYXllcnNbbGF5ZXIucGlkXSkge1xuICAgICAgICAgICAgLy8gc2V0IGhpZGUgd2hlbiBsYXllcnMgYXJlIG5vdCBkaXNwbGF5ZWQgaW4gdGhlIHN0YXJib2FyZFxuICAgICAgICAgICAgbGF5ZXIuaGlkZSA9IHRoaXMuYXJyTGF5ZXJzW2xheWVyLnBpZF0uaGlkZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgIGlmIChwZXJtYWxpbmtlZExheWVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHAgPSAwOyBwIDwgcGVybWFsaW5rZWRMYXllcnMubGVuZ3RoOyBwICs9IDEpIHtcbiAgICAgICAgICAgICAgaWYgKHBlcm1hbGlua2VkTGF5ZXJzW3BdID09IGxheWVyLmlkKSB7XG4gICAgICAgICAgICAgICAgdmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoKGxheWVyLmhpZGUgIT09IFwiMVwiKSB8fCAodmlzaWJsZSkpIHtcbiAgICAgICAgICAgIHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXIuaWRdID0gJ2ludmlzaWJsZSc7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgIH0gLy8gZW5kIG9mIGZvci1sb29wXG5cbiAgICAgIC8vIHdyYXBwZXJFbGVtZW50LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBpc1Zpc2libGU7XG4gIH0gLy8gZW5kIG9mIFwiYWRkTGF5ZXJzKClcIlxuICBsb2FkTGF5ZXJDb250ZW50KGl0ZW1VaWQpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIGksXG4gICAgICBsYXllcnMsXG4gICAgICBmZWF0dXJlcyxcbiAgICAgIGZlYXR1cmVQcm9qZWN0aW9uLFxuICAgICAgZGF0YVByb2plY3Rpb24sXG4gICAgICBsYXllckdyb3VwLFxuICAgICAgY29udGVudERhdGEsXG4gICAgICByZXF1ZXN0RGF0YSxcbiAgICAgIHJlcXVlc3RDb250ZW50RGF0YSxcbiAgICAgIHJlcXVlc3RWZWN0b3JTb3VyY2UsXG4gICAgICB2ZWN0b3JMYXllcixcbiAgICAgIHZlY3RvclNvdXJjZSxcbiAgICAgIHZlY3RvclN0eWxlLFxuICAgICAgY2x1c3RlclNvdXJjZSxcbiAgICAgIHN0eWxlRm9yQ2x1c3RlcixcbiAgICAgIHJlZnJlc2hJbnRlcnZhbCxcbiAgICAgIHJlZnJlc2hBamF4VmFycyxcbiAgICAgIGZuQXR0YWNoRGF0YVRvTGF5ZXI7XG5cbiAgICByZWZyZXNoQWpheFZhcnMgPSB7fTtcblxuICAgIGZuQXR0YWNoRGF0YVRvTGF5ZXIgPSBmdW5jdGlvbiAobGF5ZXIsIGRhdGEpIHtcbiAgICAgIGRhdGEucHJvcGVydGllcyA9IGRhdGEucHJvcGVydGllcyB8fCB7fTtcblxuICAgICAgbGF5ZXIucG9wdXAgPSBkYXRhLnBvcHVwIHx8IGRhdGEucHJvcGVydGllcy5wb3B1cCB8fCBmYWxzZTtcbiAgICAgIGxheWVyLnRvb2x0aXAgPSBkYXRhLnRvb2x0aXAgfHwgZGF0YS5wcm9wZXJ0aWVzLnRvb2x0aXAgfHwgZmFsc2U7XG4gICAgICBsYXllci50b29sdGlwX2xlbmd0aCA9IGRhdGEudG9vbHRpcF9sZW5ndGggfHwgZGF0YS5wcm9wZXJ0aWVzLnRvb2x0aXBfbGVuZ3RoIHx8IGZhbHNlO1xuICAgICAgbGF5ZXIubGFiZWwgPSBkYXRhLmxhYmVsIHx8IGRhdGEucHJvcGVydGllcy5sYWJlbCB8fCBmYWxzZTtcbiAgICAgIGxheWVyLnpvb21fb25jbGljayA9IGRhdGEuem9vbV9vbmNsaWNrIHx8IGRhdGEucHJvcGVydGllcy56b29tX29uY2xpY2sgfHwgZmFsc2U7XG4gICAgfTtcblxuICAgIGlmICh0aGlzLmFyckxheWVyc1tpdGVtVWlkXS5jb250ZW50KSB7XG4gICAgICBsYXllcnMgPSBbXTtcblxuICAgICAgICAgIHZhciBjb250ZW50RmVhdHVyZXMgPSBbXTtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5hcnJMYXllcnNbaXRlbVVpZF0uY29udGVudC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnRlbnREYXRhID0gdGhpcy5hcnJMYXllcnNbaXRlbVVpZF0uY29udGVudFtpXTtcbiAgICAgICAgICBzdHlsZUZvckNsdXN0ZXIgPSBmdW5jdGlvbiAoZmVhdHVyZSwgcmVzb2x1dGlvbikge1xuXG4gICAgICAgICAgICB2YXIgc2l6ZSxcbiAgICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICAgIGZGZWF0dXJlcyxcbiAgICAgICAgICAgICAgaWNvbk9mZnNldCxcbiAgICAgICAgICAgICAgcmFkaXVzLFxuICAgICAgICAgICAgICBrLFxuICAgICAgICAgICAgICBmaWxsY29sb3IsXG4gICAgICAgICAgICAgIGZvbnRjb2xvcjtcblxuICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhICYmIGNvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGUgJiYgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbY29udGVudERhdGEubG9jYXRpb25TdHlsZV0pIHtcbiAgICAgICAgICAgICAgc3R5bGUgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tjb250ZW50RGF0YS5sb2NhdGlvblN0eWxlXS5zdHlsZShmZWF0dXJlLCByZXNvbHV0aW9uKTtcblxuICAgICAgICAgICAgICBpZiAoIXN0eWxlKSB7XG4gICAgICAgICAgICAgICAgc3R5bGUgPSBbXTtcbiAgICAgICAgICAgICAgICBzZWxmLmZpdHRpbmdFeHRlbmRzW2l0ZW1VaWRdID0gdmVjdG9yU291cmNlLmdldEV4dGVudCgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGZlYXR1cmUgIT09IHVuZGVmaW5lZCAmJiBmZWF0dXJlICE9PSBudWxsICYmIGZlYXR1cmUuc2VsZiAhPT0gd2luZG93KSB7XG4gICAgICAgICAgICAgICAgaWYoZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykpe1xuICAgICAgICAgICAgICAgICAgZkZlYXR1cmVzID0gZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICBmRmVhdHVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIGZGZWF0dXJlc1swXSA9IGZlYXR1cmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNpemUgPSBmRmVhdHVyZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChzaXplID4gMSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGZGZWF0dXJlc1swXS5nZXRTdHlsZSgpICYmIHNpemUgPCAxMDAwKSB7IC8vIGxpbWl0IGZvciBwZXJmb3JtYW5jZVxuICAgICAgICAgICAgICAgICAgICBzdHlsZVswXSA9IGZGZWF0dXJlc1swXS5nZXRTdHlsZSgpWzBdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgZkZlYXR1cmVzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCFmRmVhdHVyZXNba10uZ2V0U3R5bGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tjb250ZW50RGF0YS5sb2NhdGlvblN0eWxlXS5zdHlsZShmRmVhdHVyZXNbMF0sIHJlc29sdXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2NvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGVdLnN0eWxlKGZGZWF0dXJlc1swXSwgcmVzb2x1dGlvbik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoIXN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0gW107XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBidWJibGUtb2Zmc2V0XG4gICAgICAgICAgICAgICAgICBpY29uT2Zmc2V0ID0gWzAsIDBdO1xuICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVbMF0uZ2V0SW1hZ2UoKSAmJiBzdHlsZVswXS5nZXRJbWFnZSgpLmdldFJhZGl1cyAmJiB0eXBlb2Ygc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgIHJhZGl1cyA9IHBhcnNlSW50KHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzKCksIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uT2Zmc2V0ID0gWzAsIHJhZGl1c107XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0eWxlWzBdLmdldEltYWdlKCkgJiYgc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRBbmNob3IgJiYgdHlwZW9mIHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0QW5jaG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpY29uT2Zmc2V0ID0gc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRBbmNob3IoKSB8fCBbMCwgMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgZmlsbGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KCc0OTc1QTgnLHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogNzBcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEuY2x1c3Rlcl9maWxsY29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KGNvbnRlbnREYXRhLmNsdXN0ZXJfZmlsbGNvbG9yLHtcbiAgICAgICAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDcwXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZm9udGNvbG9yID0gJyNGRkZGRkYnO1xuICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLmNsdXN0ZXJfZm9udGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShjb250ZW50RGF0YS5jbHVzdGVyX2ZvbnRjb2xvcix7XG4gICAgICAgICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAxMDBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgdGV4dDogbmV3IG9sLnN0eWxlLlRleHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCLil49cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IFwiNjBweCBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiAtMSAqIGljb25PZmZzZXRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtMSAqIGljb25PZmZzZXRbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBmaWxsY29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBzdHlsZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG5ldyBvbC5zdHlsZS5UZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHNpemUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IC0xICogaWNvbk9mZnNldFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IC0xICogaWNvbk9mZnNldFsxXSArIDMsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBmb250Y29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzaXplID09PSAxICYmIGZGZWF0dXJlc1swXS5nZXRTdHlsZSgpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZkZlYXR1cmVzWzBdLmdldFN0eWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgICAgICB9OyAvLyBlbmQgb2Ygc3R5bGVGb3JDbHVzdGVyKClcblxuICAgICAgICAgIGlmIChjb250ZW50RGF0YSAmJiAoY29udGVudERhdGEudHlwZSA9PT0gXCJ1cmxEYXRhXCIpKSB7XG5cbiAgICAgICAgICAgIHJlcXVlc3REYXRhID0ge307XG4gICAgICAgICAgICByZXF1ZXN0RGF0YS51cmwgPSBjb250ZW50RGF0YS5kYXRhLnVybDtcbiAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5kYXRhLnBhcmFtcykge1xuICAgICAgICAgICAgICByZXF1ZXN0RGF0YS5wYXJhbXMgPSBkZWNvZGVVUklDb21wb25lbnQoY29udGVudERhdGEuZGF0YS5wYXJhbXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29udGVudERhdGEuc2V0dGluZ3MuYm91bmRpbmdCb3gpIHtcbiAgICAgICAgICAgICAgcmVxdWVzdENvbnRlbnREYXRhID0gY29udGVudERhdGE7XG4gICAgICAgICAgICAgIHJlcXVlc3RWZWN0b3JTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3Rvcih7XG4gICAgICAgICAgICAgICAgbG9hZGVyOiBmdW5jdGlvbiAoZXh0ZW50LCByZXNvbHV0aW9uLCBwcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYm91bmRpbmdBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgc3RyQm91bmRpbmdCb3gsXG4gICAgICAgICAgICAgICAgICAgIHVybDtcblxuICAgICAgICAgICAgICAgICAgYm91bmRpbmdBcnJheSA9IG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KGV4dGVudCwgcHJvamVjdGlvbiwgJ0VQU0c6NDMyNicpO1xuICAgICAgICAgICAgICAgICAgLy9kaWZmZXJlbnQgY2FzZXMgZm9yIE92ZXJwYXNzX1FMIGFuZCBvbGQgT3ZlcnBhc3NcbiAgICAgICAgICAgICAgICAgIGlmKHJlcXVlc3REYXRhLnBhcmFtcy5zdWJzdHIoMCwgMSkgPT0gXCI8XCIpe1xuICAgICAgICAgICAgICAgICAgICBzdHJCb3VuZGluZ0JveCA9ICc8YmJveC1xdWVyeSBzPVwiJyArIGJvdW5kaW5nQXJyYXlbMV0gKyAnXCIgbj1cIicgKyBib3VuZGluZ0FycmF5WzNdICsgJ1wiIHc9XCInICsgYm91bmRpbmdBcnJheVswXSArICdcIiBlPVwiJyArIGJvdW5kaW5nQXJyYXlbMl0gKyAnXCIvPic7XG5cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHN0ckJvdW5kaW5nQm94ID1ib3VuZGluZ0FycmF5WzFdICsgJywnICsgYm91bmRpbmdBcnJheVswXSArICcsJyArIGJvdW5kaW5nQXJyYXlbM10gKyAnLCcgKyBib3VuZGluZ0FycmF5WzJdO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB1cmwgPSByZXF1ZXN0RGF0YS51cmw7XG4gICAgICAgICAgICAgICAgICBjb25zdCBiYm94VGFnID0gcmVxdWVzdERhdGEucGFyYW1zLmluZGV4T2YoJyhiYm94KScpID49IDAgPyAvXFwoYmJveFxcKS9nIDogL1xce3tiYm94XFx9fS9nXG5cbiAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0RGF0YS5wYXJhbXMpIHtcblxuICAgICAgICAgICAgICAgICAgICB1cmwgKz0gJz9kYXRhPScgKyBlbmNvZGVVUklDb21wb25lbnQocmVxdWVzdERhdGEucGFyYW1zLnJlcGxhY2UoYmJveFRhZywgc3RyQm91bmRpbmdCb3gpKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYubGF5ZXJSZXF1ZXN0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGF5ZXJSZXF1ZXN0cyA9IHt9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYubGF5ZXJSZXF1ZXN0c1snbGF5ZXJSZXF1ZXN0JyArIGl0ZW1VaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sYXllclJlcXVlc3RzWydsYXllclJlcXVlc3QnICsgaXRlbVVpZF0uYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgc2VsZi5sYXllclJlcXVlc3RzWydsYXllclJlcXVlc3QnICsgaXRlbVVpZF0gPSBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgICAgICAgICB9KS5kb25lKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaixcbiAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXMsXG4gICAgICAgICAgICAgICAgICAgICAgb3NtTm9kZXMsXG4gICAgICAgICAgICAgICAgICAgICAgb3NtTmRzLFxuICAgICAgICAgICAgICAgICAgICAgIG5vZGVJZHgsXG4gICAgICAgICAgICAgICAgICAgICAgbmRJZHgsXG4gICAgICAgICAgICAgICAgICAgICAgaW5mb05vZGVzLFxuICAgICAgICAgICAgICAgICAgICAgIG5ld1RhZyxcbiAgICAgICAgICAgICAgICAgICAgICByZWY7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYubGF5ZXJSZXF1ZXN0c1snbGF5ZXJSZXF1ZXN0JyArIGl0ZW1VaWRdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXByb2Nlc3NpbmcgdGhlIG9zbV94bWwgdG8gZmluZCByZWxhdGlvbi1ub2RlcyB3aXRoIGluZm9ybWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5jaGlsZHJlbiAmJiByZXNwb25zZS5jaGlsZHJlblswXSkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIDEpIGZpbmQgbm9kZXMgd2l0aCBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgb3NtTm9kZXMgPSByZXNwb25zZS5jaGlsZHJlblswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbm9kZScpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChvc21Ob2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mb05vZGVzID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG5vZGVJZHggaW4gb3NtTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9zbU5vZGVzLmhhc093blByb3BlcnR5KG5vZGVJZHgpICYmIG9zbU5vZGVzW25vZGVJZHhdICYmIG9zbU5vZGVzW25vZGVJZHhdLmNoaWxkcmVuICYmIG9zbU5vZGVzW25vZGVJZHhdLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvTm9kZXNbb3NtTm9kZXNbbm9kZUlkeF0uZ2V0QXR0cmlidXRlKCdpZCcpXSA9IG9zbU5vZGVzW25vZGVJZHhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluZm9Ob2Rlc1tvc21Ob2Rlc1tub2RlSWR4XS5nZXRBdHRyaWJ1dGUoJ2lkJyldID0gbm9kZUlkeDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIC8vIDIpIGNoZWNrIGFuZCBoYW5kbGUgcmVsYXRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgb3NtTmRzID0gcmVzcG9uc2UuY2hpbGRyZW5bMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ25kJyk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKG9zbU5kcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChuZElkeCBpbiBvc21OZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5kSWR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9zbU5kcy5oYXNPd25Qcm9wZXJ0eShuZElkeCkgJiYgb3NtTmRzW25kSWR4XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSBvc21OZHNbbmRJZHhdLmdldEF0dHJpYnV0ZSgncmVmJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvTm9kZXMgJiYgcmVmICYmIGluZm9Ob2Rlc1tyZWZdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RDb250ZW50RGF0YSAmJiByZXF1ZXN0Q29udGVudERhdGEuc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0Q29udGVudERhdGEuc2V0dGluZ3Muc2hvd0FkZGl0aW9uYWxHZW9tZXRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hcmsgYXMgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdUYWcgPSByZXNwb25zZS5jcmVhdGVFbGVtZW50KCd0YWcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3VGFnICYmIG9zbU5kc1tuZElkeF0ucGFyZW50RWxlbWVudCAmJiBvc21OZHNbbmRJZHhdLnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdUYWcuc2V0QXR0cmlidXRlKCdrJywgJ2M0Z19vc21fcmVmJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdUYWcuc2V0QXR0cmlidXRlKCd2Jywgb3NtTmRzW25kSWR4XS5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvTm9kZXNbcmVmXS5hcHBlbmRDaGlsZChuZXdUYWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb05vZGVzW3JlZl0uaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGNoZWNrIGFuZCBoYW5kbGUgcmVsYXRpb25zLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAvLyBpbXBvcnQgb3NtX3htbFxuICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IG5ldyBvbC5mb3JtYXQuT1NNWE1MKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdCAmJiByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzID0gZm9ybWF0LnJlYWRGZWF0dXJlcyhyZXNwb25zZSwge2ZlYXR1cmVQcm9qZWN0aW9uOiBwcm9qZWN0aW9ufSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ2FuIG5vdCByZWFkIGZlYXR1cmUuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZS5zdGFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gcG9zdHByb2Nlc3NpbmcgZmVhdHVyZXNcbiAgICAgICAgICAgICAgICAgICAgICBpZiAockZlYXR1cmVzICYmIHJGZWF0dXJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgckZlYXR1cmVzLmxlbmd0aDsgaiArPSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJGZWF0dXJlc1tqXS5nZXRHZW9tZXRyeSgpLmdldFR5cGUoKSA9PT0gXCJQb2ludFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldCgnb3NtX3R5cGUnLCAnbm9kZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXQoJ29zbV90eXBlJywgJ3dheScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXQoJ2M0Z190eXBlJywgJ29zbScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0KCdjbHVzdGVyX3pvb20nLCBjb250ZW50RGF0YS5jbHVzdGVyX3pvb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0KCdjbHVzdGVyX3BvcHVwJywgY29udGVudERhdGEuY2x1c3Rlcl9wb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXQoJ2xvY19saW5rdXJsJywgY29udGVudERhdGEubG9jX2xpbmt1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0KCdob3Zlcl9sb2NhdGlvbicsIGNvbnRlbnREYXRhLmhvdmVyX2xvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldCgnaG92ZXJfc3R5bGUnLCBjb250ZW50RGF0YS5ob3Zlcl9zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXQoJ3pvb21fb25jbGljaycsIGNvbnRlbnREYXRhLmRhdGEuem9vbV9vbmNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldCgnbGFiZWwnLCBjb250ZW50RGF0YS5kYXRhLmxhYmVsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdENvbnRlbnREYXRhLnNldHRpbmdzLmZvcmNlTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHRyYWNrcyBhbmQgYXJlYXMgdG8gcG9pbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJGZWF0dXJlc1tqXS5nZXRHZW9tZXRyeSgpLmdldFR5cGUoKSA9PT0gXCJQb2x5Z29uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZW50ZXJQb2ludCA9IHJGZWF0dXJlc1tqXS5nZXRHZW9tZXRyeSgpLmdldEludGVyaW9yUG9pbnQoKS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldEdlb21ldHJ5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuZ2VvbS5Qb2ludChjZW50ZXJQb2ludClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyRmVhdHVyZXNbal0uZ2V0R2VvbWV0cnkoKS5nZXRUeXBlKCkgPT09IFwiTGluZVN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBAVE9ETzogcHLDvGZlbiBvYiBkaWVzIGtvcnJla3RlciBtaXR0ZWxwdW5rdCBpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaW5lRXh0ZW50ID0gckZlYXR1cmVzW2pdLmdldEdlb21ldHJ5KCkuZ2V0RXh0ZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQb2ludCA9IG9sLmV4dGVudC5nZXRDZW50ZXIobGluZUV4dGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0R2VvbWV0cnkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBvbC5nZW9tLlBvaW50KGNlbnRlclBvaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJGZWF0dXJlc1tqXS5nZXQoJ2M0Z19vc21fcmVmJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAocmVxdWVzdENvbnRlbnREYXRhLnNldHRpbmdzLnNob3dBZGRpdGlvbmFsR2VvbWV0cmllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0Q29udGVudERhdGEuc2V0dGluZ3MuYWRkaXRpb25hbFN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBAVE9ETzogbG9hZCBhbmQgYXR0YWNoIHN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXRTdHlsZShjNGcubWFwcy51dGlscy5yZWR1Y2VTdHlsZShyZXF1ZXN0Q29udGVudERhdGEubG9jYXRpb25TdHlsZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYocmVzcG9uc2UgJiYgcmVzcG9uc2UuZWxlbWVudHMpe1xuICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgZWxlbWVudElkID0gMDsgZWxlbWVudElkIDwgcmVzcG9uc2UuZWxlbWVudHMubGVuZ3RoOyBlbGVtZW50SWQrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWxlbWVudCA9IHJlc3BvbnNlLmVsZW1lbnRzW2VsZW1lbnRJZF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQudHlwZSA9PSBcIm5vZGVcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFlbGVtZW50LnRhZ3Mpey8vbm90IGEgZmVhdHVyZSwgYnV0IHBhcnQgb2YgYSB3YXkgb3IgcmVsYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9pbnQgPSBuZXcgb2wuZ2VvbS5Qb2ludChbZWxlbWVudC5sb24sZWxlbWVudC5sYXRdKS50cmFuc2Zvcm0oJ0VQU0c6NDMyNicsJ0VQU0c6Mzg1NycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBwb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXRJZChlbGVtZW50LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ29zbV90eXBlJywgJ25vZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoZWxlbWVudC50eXBlID09IFwid2F5XCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJyQ29vcmRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBlbGVtZW50Lm5vZGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZSA9IHJlc3BvbnNlLmVsZW1lbnRzLmZpbmQoZnVuY3Rpb24ob2JqTm9kZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqTm9kZS5pZCA9PT0gZWxlbWVudC5ub2Rlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJDb29yZHMucHVzaChbbm9kZS5sb24sbm9kZS5sYXRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZihhcnJDb29yZHNbMF1bMF0gPT0gYXJyQ29vcmRzW2FyckNvb3Jkcy5sZW5ndGgtMV1bMF0gJiYgYXJyQ29vcmRzWzBdWzFdID09IGFyckNvb3Jkc1thcnJDb29yZHMubGVuZ3RoLTFdWzFdKXsgLy9wb2x5Z29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGFyckNvb3Jkc1thcnJDb29yZHMubGVuZ3RoLTFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyckNvb3Jkcy5sZW5ndGggPSBhcnJDb29yZHMubGVuZ3RoLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvbHlnb24gPSBuZXcgb2wuZ2VvbS5Qb2x5Z29uKFthcnJDb29yZHNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2x5Z29uLnRyYW5zZm9ybSgnRVBTRzo0MzI2JywnRVBTRzozODU3Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RDb250ZW50RGF0YS5zZXR0aW5ncy5mb3JjZU5vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHRyYWNrcyBhbmQgYXJlYXMgdG8gcG9pbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VudGVyUG9pbnQgPSBmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0SW50ZXJpb3JQb2ludCgpLmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldEdlb21ldHJ5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuZ2VvbS5Qb2ludChjZW50ZXJQb2ludClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogcG9seWdvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXsgLy9saW5lc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmVTdHJpbmcgPSBuZXcgb2wuZ2VvbS5MaW5lU3RyaW5nKFthcnJDb29yZHNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RyaW5nLnRyYW5zZm9ybSgnRVBTRzo0MzI2JywnRVBTRzozODU3Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBsaW5lU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdENvbnRlbnREYXRhLnNldHRpbmdzLmZvcmNlTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaW5lRXh0ZW50ID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldEV4dGVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyUG9pbnQgPSBvbC5leHRlbnQuZ2V0Q2VudGVyKGxpbmVFeHRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXRHZW9tZXRyeShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IG9sLmdlb20uUG9pbnQoY2VudGVyUG9pbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdvc21fdHlwZScsICd3YXknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdjNGdfdHlwZScsICdvc20nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdjbHVzdGVyX3pvb20nLCBjb250ZW50RGF0YS5jbHVzdGVyX3pvb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2NsdXN0ZXJfcG9wdXAnLCBjb250ZW50RGF0YS5jbHVzdGVyX3BvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdsb2NfbGlua3VybCcsIGNvbnRlbnREYXRhLmxvY19saW5rdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdob3Zlcl9sb2NhdGlvbicsIGNvbnRlbnREYXRhLmhvdmVyX2xvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdob3Zlcl9zdHlsZScsIGNvbnRlbnREYXRhLmhvdmVyX3N0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCd6b29tX29uY2xpY2snLCBjb250ZW50RGF0YS5kYXRhLnpvb21fb25jbGljayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbGFiZWwnLCBjb250ZW50RGF0YS5kYXRhLmxhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgdGFncyBpbiBlbGVtZW50LnRhZ3Mpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCh0YWdzLCBlbGVtZW50LnRhZ3NbdGFnc10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RWZWN0b3JTb3VyY2UuYWRkRmVhdHVyZXMockZlYXR1cmVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGFkZCBmZWF0dXJlcyB0byBzb3VyY2UuIFRoZSBcImZvcmNlTm9kZXNcIi1vcHRpb24gc2hvdWxkIGJlIHVzZWQuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9zZWxmLmNvbWJpbmVMYXllcnMoc2VsZik7XG4gICAgICAgICAgICAgICAgICB9KTsgLy8gZW5kIG9mIEFKQVhcblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RyYXRlZ3k6IG9sLmxvYWRpbmdzdHJhdGVneS5iYm94XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIHZlY3RvclNvdXJjZSA9IHJlcXVlc3RWZWN0b3JTb3VyY2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2wuZm9ybWF0W2NvbnRlbnREYXRhLmZvcm1hdF0gPT09IFwiZnVuY3Rpb25cIikge1xuXG4gICAgICAgICAgICAgICAgLy9TdGF0aWNWZWN0b3JcbiAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3Rvcih7XG4gICAgICAgICAgICAgICAgICBmb3JtYXQ6IG5ldyBvbC5mb3JtYXRbY29udGVudERhdGEuZm9ybWF0XSgpLFxuICAgICAgICAgICAgICAgICAgdXJsOiByZXF1ZXN0RGF0YS51cmwsXG4gICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiAnRVBTRzozODU3JyxcbiAgICAgICAgICAgICAgICAgIHN0cmF0ZWd5OiBvbC5sb2FkaW5nc3RyYXRlZ3kuYWxsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEuc2V0dGluZ3MgJiYgY29udGVudERhdGEuc2V0dGluZ3MucmVmcmVzaCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYubGF5ZXJSZXF1ZXN0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGF5ZXJSZXF1ZXN0cyA9IHt9O1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICByZWZyZXNoSW50ZXJ2YWwgPSAodHlwZW9mIGNvbnRlbnREYXRhLnNldHRpbmdzLmludGVydmFsID09PSAnbnVtYmVyJykgPyBjb250ZW50RGF0YS5zZXR0aW5ncy5pbnRlcnZhbCA6IDEwMDAwO1xuICAgICAgICAgICAgICAgICAgLyogZG8gaXQgd2l0aCBiZXR0ZXIgYWpheC1oYW5kbGluZ1xuICAgICAgICAgICAgICAgICAgIHNlbGYubGF5ZXJSZXF1ZXN0c1snbGF5ZXJSZXF1ZXN0JyArIGl0ZW1VaWRdID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICB9LCByZWZyZXNoSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICAgIC8vIEFuZmFuZyBFaW5zY2h1YiBuZXVlIEFKQVgtTGF5ZXJcbiAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5ibG5IYXNQb3NpdGlvbklkcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmFyclBvc2l0aW9uSWRzID0gW107XG4gICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMub2JqRmVhdHVyZXMgPSB7fTtcblxuICAgICAgICAgICAgICAgICAgdmVjdG9yU291cmNlLnNldCgncmVmcmVzaEludGVydmFsJywgcmVmcmVzaEludGVydmFsKTtcblxuICAgICAgICAgICAgICAgICAgdmVjdG9yU291cmNlLnNldCgncmVmcmVzaEZ1bmN0aW9uJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdmVjdG9yU291cmNlLmdldCgnaGFzSWRzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UuZm9yRWFjaEZlYXR1cmUoZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlLmdldCgncG9zaXRpb25JZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5ibG5IYXNQb3NpdGlvbklkcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5hcnJQb3NpdGlvbklkcy5wdXNoKGZlYXR1cmUuZ2V0KCdwb3NpdGlvbklkJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMub2JqRmVhdHVyZXNbZmVhdHVyZS5nZXQoJ3Bvc2l0aW9uSWQnKV0gPSBmZWF0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWZyZXNoQWpheFZhcnMuYmxuSGFzUG9zaXRpb25JZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvclNvdXJjZS5zZXQoJ2hhc0lkcycsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICB1cmw6IHJlcXVlc3REYXRhLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5yZW5ld2FibGVSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgb2Ygc3RhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmVhY2goZGF0YS5mZWF0dXJlcywgZnVuY3Rpb24gKGluZGV4LCBmZWF0dXJlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlRGF0YS50eXBlICYmIGZlYXR1cmVEYXRhLnR5cGUgPT09IFwiRmVhdHVyZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZSA9IChuZXcgb2wuZm9ybWF0W2NvbnRlbnREYXRhLmZvcm1hdF0oKSkucmVhZEZlYXR1cmUoZmVhdHVyZURhdGEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb246ICdFUFNHOjQzMjYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogJ0VQU0c6Mzg1NydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxheWVyID0gc2VsZi5hcnJMYXllcnNbZmVhdHVyZURhdGEucHJvcGVydGllcy5pZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9wdXBDb250ZW50ID0gZmVhdHVyZURhdGEucHJvcGVydGllcy5wb3B1cDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLnZlY3RvckxheWVyLmdldExheWVycygpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZURhdGEucHJvcGVydGllcy5zdHlsZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIubG9hZExvY2F0aW9uU3R5bGVzKFtmZWF0dXJlRGF0YS5wcm9wZXJ0aWVzLnN0eWxlSWRdLCB7ZG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZURhdGEucHJvcGVydGllcy5zdHlsZUlkXS5zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRTdHlsZShzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tmZWF0dXJlRGF0YS5wcm9wZXJ0aWVzLnN0eWxlSWRdLnN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmdldFNvdXJjZSgpLmZvckVhY2hGZWF0dXJlKGZ1bmN0aW9uKG5lc3RlZEZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXN0ZWRGZWF0dXJlLnNldCgncG9wdXAnLCBwb3B1cENvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuY29udGVudFswXS5sb2NhdGlvblN0eWxlID0gZmVhdHVyZURhdGEucHJvcGVydGllcy5zdHlsZUlkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2ZlYXR1cmVEYXRhLnByb3BlcnRpZXMuc3R5bGVJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMoW2ZlYXR1cmVEYXRhLnByb3BlcnRpZXMuc3R5bGVJZF0sIHtkb25lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZURhdGEucHJvcGVydGllcy5zdHlsZUlkXS5zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXRTdHlsZShzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tmZWF0dXJlRGF0YS5wcm9wZXJ0aWVzLnN0eWxlSWRdLnN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXIuaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGlkZUxheWVyKGxheWVyLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zaG93TGF5ZXIobGF5ZXIuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmVjdG9yU291cmNlLmFkZEZlYXR1cmUoZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZmVhdHVyZXMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuYXJyTmV3UG9zaXRpb25JZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLm9iak5ld0ZlYXR1cmVzID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmVhY2goZGF0YS5mZWF0dXJlcywgZnVuY3Rpb24gKGluZGV4LCBmZWF0dXJlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlRGF0YS50eXBlICYmIGZlYXR1cmVEYXRhLnR5cGUgPT0gXCJGZWF0dXJlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5mZWF0dXJlID0gKG5ldyBvbC5mb3JtYXRbY29udGVudERhdGEuZm9ybWF0XSgpKS5yZWFkRmVhdHVyZShmZWF0dXJlRGF0YSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiAnRVBTRzozODU3J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuZmVhdHVyZS5zZXQoJ2NsdXN0ZXJfem9vbScsIGNvbnRlbnREYXRhLmNsdXN0ZXJfem9vbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuZmVhdHVyZS5zZXQoJ2xvY19saW5rdXJsJywgY29udGVudERhdGEubG9jX2xpbmt1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmZlYXR1cmUuc2V0KCdob3Zlcl9sb2NhdGlvbicsIGNvbnRlbnREYXRhLmhvdmVyX2xvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5mZWF0dXJlLnNldCgnaG92ZXJfc3R5bGUnLCBjb250ZW50RGF0YS5ob3Zlcl9zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVmcmVzaEFqYXhWYXJzLmZlYXR1cmUuZ2V0KCdwb3NpdGlvbklkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmFyck5ld1Bvc2l0aW9uSWRzLnB1c2gocmVmcmVzaEFqYXhWYXJzLmZlYXR1cmUuZ2V0KCdwb3NpdGlvbklkJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMub2JqTmV3RmVhdHVyZXNbcmVmcmVzaEFqYXhWYXJzLmZlYXR1cmUuZ2V0KCdwb3NpdGlvbklkJyldID0gcmVmcmVzaEFqYXhWYXJzLmZlYXR1cmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZWFjaChyZWZyZXNoQWpheFZhcnMuYXJyUG9zaXRpb25JZHMsIGZ1bmN0aW9uIChpbmRleCwgcG9zaXRpb25JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWZyZXNoQWpheFZhcnMuYXJyTmV3UG9zaXRpb25JZHMuaW5kZXhPZihwb3NpdGlvbklkKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9zaXRpb25zIGlkIGluIG5ldWVyIGFudHdvcnQgbmljaHQgbWVociBlbnRoYWx0ZW4gLT4gbMO2c2NoZSBmZWF0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlZnJlc2hBamF4VmFycy5vYmpGZWF0dXJlc1twb3NpdGlvbklkXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UucmVtb3ZlRmVhdHVyZShyZWZyZXNoQWpheFZhcnMub2JqRmVhdHVyZXNbcG9zaXRpb25JZF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUocmVmcmVzaEFqYXhWYXJzLmFyclBvc2l0aW9uSWRzW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZWFjaChyZWZyZXNoQWpheFZhcnMuYXJyTmV3UG9zaXRpb25JZHMsIGZ1bmN0aW9uIChpbmRleCwgcG9zaXRpb25JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWZyZXNoQWpheFZhcnMuYXJyUG9zaXRpb25JZHMuaW5kZXhPZihwb3NpdGlvbklkKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9zaXRpb25zIGlkIGlzdCBub2NoIG5pY2h0IHZvcmhhbmRlbiAtPiBuZXVlcyBmZWF0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuYXJyUG9zaXRpb25JZHMucHVzaChwb3NpdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5vYmpGZWF0dXJlc1twb3NpdGlvbklkXSA9IHJlZnJlc2hBamF4VmFycy5vYmpOZXdGZWF0dXJlc1twb3NpdGlvbklkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvclNvdXJjZS5hZGRGZWF0dXJlKHJlZnJlc2hBamF4VmFycy5vYmpOZXdGZWF0dXJlc1twb3NpdGlvbklkXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5yZXF1ZXN0RnVuY3Rpb25zWydyZXF1ZXN0XycgKyBpdGVtVWlkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2Z1bmN0aW9uJzogdmVjdG9yU291cmNlLmdldCgncmVmcmVzaEZ1bmN0aW9uJyksXG4gICAgICAgICAgICAgICAgICAgICdpbnRlcnZhbCc6IHJlZnJlc2hJbnRlcnZhbFxuICAgICAgICAgICAgICAgICAgfTtcblxuXG4gICAgICAgICAgICAgICAgICAvLyBFbmRlIEVpbnNjaHViIG5ldWUgQUpBWC1MYXllclxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdGb3JtYXQgdHlwZSAnICsgY29udGVudERhdGEuZm9ybWF0ICsgJyBpbiBvbC5mb3JtYXQgbm90IGZvdW5kLicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5zZXR0aW5ncy5jbHVzdGVyKSB7XG5cbiAgICAgICAgICAgICAgY2x1c3RlclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuQ2x1c3Rlcih7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2U6IDQwLFxuICAgICAgICAgICAgICAgIC8vdGhyZXNob2xkOiAyLCAvL21pbmltdW0gZWxlbWVudCBjb3VudFxuICAgICAgICAgICAgICAgIHNvdXJjZTogdmVjdG9yU291cmNlLFxuICAgICAgICAgICAgICAgIHpvb206IGNvbnRlbnREYXRhLmNsdXN0ZXJfem9vbVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhjbHVzdGVyU291cmNlKTtcbiAgICAgICAgICAgICAgdGhpcy5zdHlsZUZvckNsdXN0ZXIgPSBzdHlsZUZvckNsdXN0ZXI7XG5cbiAgICAgICAgICAgICAgLy92ZWN0b3JMYXllciA9IHV0aWxzLmdldFZlY3RvckxheWVyKGNsdXN0ZXJTb3VyY2UsIHN0eWxlRm9yQ2x1c3Rlcik7XG5cbiAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIgPSBuZXcgb2wubGF5ZXIuQW5pbWF0ZWRDbHVzdGVyKFxuICAgICAgICAgICAgICAgIHtcdG5hbWU6ICdDbHVzdGVyJyxcbiAgICAgICAgICAgICAgICAgIHNvdXJjZTogY2x1c3RlclNvdXJjZSxcbiAgICAgICAgICAgICAgICAgIC8vIFVzZSBhIHN0eWxlIGZ1bmN0aW9uIGZvciBjbHVzdGVyIHN5bWJvbGlzYXRpb25cbiAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZUZvckNsdXN0ZXJcbiAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2ZWN0b3JMYXllciA9IHV0aWxzLmdldFZlY3RvckxheWVyKHZlY3RvclNvdXJjZSwgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbY29udGVudERhdGEubG9jYXRpb25TdHlsZV0gPyBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tjb250ZW50RGF0YS5sb2NhdGlvblN0eWxlXS5zdHlsZSA6IG51bGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBGaXQgdG8gZXh0ZW5kICovXG4gICAgICAgICAgICBpZiAoY29udGVudERhdGEuc2V0dGluZ3MgJiYgY29udGVudERhdGEuc2V0dGluZ3MuZml0VG9FeHRlbmQpIHtcblxuICAgICAgICAgICAgICBzZWxmLmZpdHRpbmdFeHRlbmRzID0gc2VsZi5maXR0aW5nRXh0ZW5kcyB8fCB7fTtcblxuICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2Uub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGN1cnJlbnRseSBzdG9yZWQgaWQnc1xuICAgICAgICAgICAgICAgIGZvciAoaSBpbiBzZWxmLmZpdHRpbmdFeHRlbmRzKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5maXR0aW5nRXh0ZW5kcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHNbaV0gPT09IFwidW5kZWZpbmVkXCIgfHwgc2VsZi5wcm94eS5hY3RpdmVMYXllcklkc1swXSA9PSBcImludmlzaWJsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYuZml0dGluZ0V4dGVuZHNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLmZpdHRpbmdFeHRlbmRzW2l0ZW1VaWRdID0gdmVjdG9yU291cmNlLmdldEV4dGVudCgpOy8vdmVjdG9yU291cmNlLmdldEZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgICAgdXRpbHMuZml0VG9FeHRlbnRzKHNlbGYuZml0dGluZ0V4dGVuZHMsIHNlbGYubWFwQ29udHJvbGxlci5tYXApO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZW5kIG9mIGZpdCB0byBleHRlbmRcblxuICAgICAgICAgICAgZm5BdHRhY2hEYXRhVG9MYXllcih2ZWN0b3JMYXllciwgY29udGVudERhdGEuZGF0YSk7XG4gICAgICAgICAgICBsYXllcnMucHVzaCh2ZWN0b3JMYXllcik7XG4gICAgICAgICAgfSBlbHNlIGlmICgodGhpcy5hcnJMYXllcnNbaXRlbVVpZF0udHlwZSA9PT0gXCJ0YWJsZVwiKSB8fCAodGhpcy5hcnJMYXllcnNbaXRlbVVpZF0udHlwZSA9PT0gXCJsaW5rXCIpKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXJDb250ZW50ID0gdGhpcy5hcnJMYXllcnNbaXRlbVVpZF0uY29udGVudDtcbiAgICAgICAgICAgIGNvbnRlbnREYXRhID0gbGF5ZXJDb250ZW50WzBdO1xuICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhICYmIGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcyAmJiBjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMucHJvamVjdGlvbikge1xuICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbiA9IGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy5wcm9qZWN0aW9uO1xuICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbiA9IHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFByb2plY3Rpb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmb3JjZSBhbGwgbm9kZXMgaW50byBvbmUgbGF5ZXJcblxuXG4gICAgICAgICAgICB2YXIgY29udGVudEZlYXR1cmUgPSBuZXcgb2wuZm9ybWF0W2xheWVyQ29udGVudFtpXS5mb3JtYXRdKHt9KS5yZWFkRmVhdHVyZXMobGF5ZXJDb250ZW50W2ldLmRhdGEsIHtcbiAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246IGZlYXR1cmVQcm9qZWN0aW9uLFxuICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogZGF0YVByb2plY3Rpb25cbiAgICAgICAgICAgIH0pWzBdO1xuICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdjbHVzdGVyX3pvb20nLCBjb250ZW50RGF0YS5jbHVzdGVyX3pvb20pO1xuICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdjbHVzdGVyX3BvcHVwJywgY29udGVudERhdGEuY2x1c3Rlcl9wb3B1cCk7XG4gICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2xvY19saW5rdXJsJywgY29udGVudERhdGEubG9jX2xpbmt1cmwpO1xuICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdob3Zlcl9sb2NhdGlvbicsIGNvbnRlbnREYXRhLmhvdmVyX2xvY2F0aW9uKTtcbiAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnaG92ZXJfc3R5bGUnLCBjb250ZW50RGF0YS5ob3Zlcl9zdHlsZSk7XG4gICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ3BvcHVwJywgbGF5ZXJDb250ZW50W2ldLmRhdGEucHJvcGVydGllcy5wb3B1cCk7XG4gICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ3pvb21fb25jbGljaycsIGNvbnRlbnREYXRhLnpvb21fb25jbGljayk7XG4gICAgICAgICAgICBjb250ZW50RmVhdHVyZXMucHVzaChjb250ZW50RmVhdHVyZSk7XG5cblxuICAgICAgICAgICAgaWYoaSsxID09PSB0aGlzLmFyckxheWVyc1tpdGVtVWlkXS5jb250ZW50Lmxlbmd0aCl7XG4gICAgICAgICAgICAgIHZlY3RvclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlczogY29udGVudEZlYXR1cmVzLFxuICAgICAgICAgICAgICAgIHByb2plY3Rpb246ICdFUFNHOjM4NTcnLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogbmV3IG9sLmZvcm1hdC5HZW9KU09OKCksXG5cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YSAmJiBjb250ZW50RGF0YS5zZXR0aW5ncyAmJiBjb250ZW50RGF0YS5zZXR0aW5ncy5jbHVzdGVyKSB7XG4gICAgICAgICAgICAgICAgY2x1c3RlclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuQ2x1c3Rlcih7XG4gICAgICAgICAgICAgICAgICBkaXN0YW5jZTogNDAsXG4gICAgICAgICAgICAgICAgICB6b29tOiBjb250ZW50RGF0YS5jbHVzdGVyX3pvb20sXG5cbiAgICAgICAgICAgICAgICAgIC8vdGhyZXNob2xkOiAyLCAvL21pbmltdW0gZWxlbWVudCBjb3VudFxuICAgICAgICAgICAgICAgICAgc291cmNlOiB2ZWN0b3JTb3VyY2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvL3ZlY3RvckxheWVyID0gdXRpbHMuZ2V0VmVjdG9yTGF5ZXIoY2x1c3RlclNvdXJjZSwgc3R5bGVGb3JDbHVzdGVyKTtcblxuICAgICAgICAgICAgICAgIHZlY3RvckxheWVyID0gbmV3IG9sLmxheWVyLkFuaW1hdGVkQ2x1c3RlcihcbiAgICAgICAgICAgICAgICAgIHtcdG5hbWU6ICdDbHVzdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBjbHVzdGVyU291cmNlLFxuICAgICAgICAgICAgICAgICAgICAvLyBVc2UgYSBzdHlsZSBmdW5jdGlvbiBmb3IgY2x1c3RlciBzeW1ib2xpc2F0aW9uXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZUZvckNsdXN0ZXJcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIgPSB1dGlscy5nZXRWZWN0b3JMYXllcih2ZWN0b3JTb3VyY2UsIGNvbnRlbnREYXRhICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2NvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGVdID8gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbY29udGVudERhdGEubG9jYXRpb25TdHlsZV0uc3R5bGUgOiBudWxsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXllcnMucHVzaCh2ZWN0b3JMYXllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3JldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNvbnRlbnQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAvL1RPRE86IHJlZmFjdG9yZW4gdW5kIGvDvHJ6ZW4hXG4gICAgICAgICAgICAgIC8vIHdlIGhhdmUgb3ZlcnBhc3MgcmVxdWVzdCB3aXRoIHJlYXNzaWduZWQgZm9ydW0gbGF5ZXJzXG4gICAgICAgICAgICAgIC8vIGZvcnVtIGxheWVycyBjYW4gbm90IGJlIGRyYXduIHZpYSB0aGUgbm9ybWFsIGRyYXdMYXllciwgYmVjYXVzZSB0aGV5IGRvIG5vdCBoYXZlIGEgVWlkXG4gICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YSAmJiAodHlwZW9mIG9sLmZvcm1hdFtjb250ZW50RGF0YS5mb3JtYXRdID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcyAmJiBjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMucHJvamVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb24gPSBjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMucHJvamVjdGlvbjtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uID0gdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0UHJvamVjdGlvbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmZWF0dXJlcyA9IChuZXcgb2wuZm9ybWF0W2NvbnRlbnREYXRhLmZvcm1hdF0oe30pKS5yZWFkRmVhdHVyZXMoY29udGVudERhdGEuZGF0YSwge1xuICAgICAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246IGZlYXR1cmVQcm9qZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb246IGRhdGFQcm9qZWN0aW9uXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbWlzc2luZ1N0eWxlcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciB1bnN0eWxlZEZlYXR1cmVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBmZWF0dXJlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVzW2pdLmdldCgnc3R5bGVJZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tmZWF0dXJlc1tqXS5nZXQoJ3N0eWxlSWQnKV0gJiYgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJyldLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXNbal0uc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJyldLnN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nU3R5bGVzLnB1c2goZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJykpO1xuICAgICAgICAgICAgICAgICAgICAgIHVuc3R5bGVkRmVhdHVyZXMucHVzaChmZWF0dXJlc1tqXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2ZWN0b3JTdHlsZSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2NvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGVdICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2NvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGVdLnN0eWxlO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1pc3NpbmdTdHlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgLy9UT0RPIHRoZXJlIGFyZSB1bnN0eWxlZCBmZWF0dXJlcyBiZWNhdXNlIHNvbWUgc3R5bGVzIHdlcmUgbm90IGxvYWRlZFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3Rvcih7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlcyxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbjogJ0VQU0c6Mzg1NycsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogbmV3IG9sLmZvcm1hdC5HZW9KU09OKClcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgY2x1c3RlclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuQ2x1c3Rlcih7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlOiA0MCxcbiAgICAgICAgICAgICAgICAgICAgem9vbTogY29udGVudERhdGEuY2x1c3Rlcl96b29tLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vdGhyZXNob2xkOiAyLCAvL21pbmltdW0gZWxlbWVudCBjb3VudFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHZlY3RvclNvdXJjZVxuICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyID0gdXRpbHMuZ2V0VmVjdG9yTGF5ZXIoY2x1c3RlclNvdXJjZSwgdmVjdG9yU3R5bGUpO1xuICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLmRhdGEgJiYgY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy5wb3B1cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5wb3B1cCA9IGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy5wb3B1cDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy50b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLnRvb2x0aXAgPSBjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMudG9vbHRpcDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5sYWJlbCA9IGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy5sYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy5vbmNsaWNrX3pvb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIub25jbGlja196b29tID0gY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLm9uY2xpY2tfem9vbTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBsYXllcnMucHVzaCh2ZWN0b3JMYXllcik7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRm9ybWF0IHR5cGUgJyArIGNvbnRlbnREYXRhLmZvcm1hdCArICcgaW4gb2wuZm9ybWF0IG5vdCBmb3VuZC4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy9ubyBjb250ZW50RGF0YSwgbWF5YmUgYSBsaW5rXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBub3JtYWwsIG5vdCBvdmVycGFzcyBsYXllclxuICAgICAgICAgICAgICBzZWxmLmRyYXdMYXllcihpdGVtVWlkKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cblxuXG4gICAgICAvLyBhZGQgdmVjdG9yIGxheWVyIGdyb3VwXG4gICAgICBsYXllckdyb3VwID0gbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgbGF5ZXJzOiBsYXllcnNcbiAgICAgIH0pO1xuICAgICAgdGhpcy5hcnJMYXllcnNbaXRlbVVpZF0udmVjdG9yTGF5ZXIgPSBsYXllckdyb3VwO1xuICAgICAgc2VsZi5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihsYXllckdyb3VwKTtcbiAgICAgIC8vc2VsZi5jb21iaW5lKHNlbGYpO1xuXG4gICAgfVxuICAgIGVsc2UgaWYodGhpcy5hcnJMYXllcnNbaXRlbVVpZF0uYXN5bmNfY29udGVudCA9PSAxKXtcbiAgICAgICAgICBzdHlsZUZvckNsdXN0ZXIgPSBmdW5jdGlvbihmZWF0dXJlLCByZXNvbHV0aW9uKXtcbiAgICAgICAgICAgICAgdmFyIHN0eWxlSWQsXG4gICAgICAgICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQsXG4gICAgICAgICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICAgICAgICBmaWxsY29sb3IsXG4gICAgICAgICAgICAgICAgICBmb250Y29sb3I7XG4gICAgICAgICAgICAgIGlmKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykpe1xuICAgICAgICAgICAgICAgICAgaWYoc3R5bGVJZCA9IGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWzBdLmdldCgnbG9jYXRpb25TdHlsZScpKXtcbiAgICAgICAgICAgICAgICAgICAgICBpZihzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXSAmJiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS5zdHlsZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUoZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbMF0scmVzb2x1dGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYoIXN0eWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYoZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykubGVuZ3RoID4gMSl7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIGJ1YmJsZS1vZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgICBpY29uT2Zmc2V0ID0gWzAsIDBdO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1cyA9IHBhcnNlSW50KHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzKCksIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uT2Zmc2V0ID0gWzAsIHJhZGl1c107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0QW5jaG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSBzdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvcigpIHx8IFswLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGZpbGxjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eSgnNDk3NUE4Jyx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDcwXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZihjb250ZW50RGF0YS5jbHVzdGVyX2ZpbGxjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsY29sb3IgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoY29udGVudERhdGEuY2x1c3Rlcl9maWxsY29sb3Ise1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDcwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZihmZWF0dXJlLmdldCgnZmVhdHVyZXMnKVswXS5nZXQoJ2NsdXN0ZXJfZmlsbGNvbG9yJykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsY29sb3IgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbMF0uZ2V0KCdjbHVzdGVyX2ZpbGxjb2xvcicpLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiA3MFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgZm9udGNvbG9yID0gJyNGRkZGRkYnO1xuICAgICAgICAgICAgICAgICAgICAgIGlmKGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWzBdLmdldCgnY2x1c3Rlcl9mb250Y29sb3InKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShmZWF0dXJlLmdldCgnZmVhdHVyZXMnKVswXS5nZXQoJ2NsdXN0ZXJfZm9udGNvbG9yJykse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDEwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbmV3IG9sLnN0eWxlLlRleHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwi4pePXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udDogXCI2MHB4IHNhbnMtc2VyaWZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiAtMSAqIGljb25PZmZzZXRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEgKiBpY29uT2Zmc2V0WzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZpbGxjb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGUucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG5ldyBvbC5zdHlsZS5UZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKS5sZW5ndGgudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiAtMSAqIGljb25PZmZzZXRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEgKiBpY29uT2Zmc2V0WzFdICsgMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBmb250Y29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZihzdHlsZSl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlcXVlc3RWZWN0b3JTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3Rvcih7XG4gICAgICAgICAgICAgIGxvYWRlcjogZnVuY3Rpb24gKGV4dGVudCwgcmVzb2x1dGlvbiwgcHJvamVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgdmFyIGJvdW5kaW5nQXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgc3RyQm91bmRpbmdCb3gsXG4gICAgICAgICAgICAgICAgICAgICAgdXJsO1xuICAgICAgICAgICAgICAgICAgc2VsZi5tYXBDb250cm9sbGVyLnNwaW5uZXIuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgYm91bmRpbmdBcnJheSA9IG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KGV4dGVudCwgcHJvamVjdGlvbiwgJ0VQU0c6NDMyNicpO1xuICAgICAgICAgICAgICAgICAgc3RyQm91bmRpbmdCb3ggPSBib3VuZGluZ0FycmF5WzBdKycsJytib3VuZGluZ0FycmF5WzFdKyc7Jytib3VuZGluZ0FycmF5WzJdKycsJytib3VuZGluZ0FycmF5WzNdO1xuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYubGF5ZXJSZXF1ZXN0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5sYXllclJlcXVlc3RzID0ge307XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5sYXllclJlcXVlc3RzWydsYXllckRhdGFSZXF1ZXN0JyArIGl0ZW1VaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxheWVyUmVxdWVzdHNbJ2xheWVyRGF0YVJlcXVlc3QnICsgaXRlbVVpZF0uYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmKCFzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzZWxmLmFyckxheWVyc1tpdGVtVWlkXS5sb2NzdHlsZV0pe1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIubG9hZExvY2F0aW9uU3R5bGVzKFtzZWxmLmFyckxheWVyc1tpdGVtVWlkXS5sb2NzdHlsZV0sIHtkb25lOiBmdW5jdGlvbigpIHt9fSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHNlbGYubGF5ZXJSZXF1ZXN0c1snbGF5ZXJEYXRhUmVxdWVzdCcgKyBpdGVtVWlkXSA9IGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNlbGYucHJveHkuYXBpX2xheWVyY29udGVudGRhdGFfdXJsICsgJy8nICsgc2VsZi5hcnJMYXllcnNbaXRlbVVpZF0uaWQgKycvJytzdHJCb3VuZGluZ0JveCxcbiAgICAgICAgICAgICAgICAgIH0pLmRvbmUoIGZ1bmN0aW9uIChkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmxlbmd0aCA+IDAgJiYgIWNvbnRlbnRGZWF0dXJlcyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBsZXQgbGF5ZXIgPSBzZWxmLmFyckxheWVyc1tpdGVtVWlkXTtcbiAgICAgICAgICAgICAgICAgICAgICBsb29wRGF0YTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudERhdGEgPSBkYXRhW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IGNvbnRlbnRGZWF0dXJlcy5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29udGVudERhdGEuaWQgPT09IGNvbnRlbnRGZWF0dXJlc1tqXS5pZCkgY29udGludWUgbG9vcERhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0Q29vcmRpbmF0ZSA9IG9sLnByb2oudHJhbnNmb3JtKFtwYXJzZUZsb2F0KGNvbnRlbnREYXRhWydnZW94J10pLCBwYXJzZUZsb2F0KGNvbnRlbnREYXRhWydnZW95J10pXSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50ID0gbmV3IG9sLmdlb20uUG9pbnQocmVzdWx0Q29vcmRpbmF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKHBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldElkKGNvbnRlbnREYXRhLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnY2x1c3Rlcl96b29tJywgbGF5ZXIuY2x1c3Rlci56b29tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnY2x1c3Rlcl9wb3B1cCcsIGxheWVyLmNsdXN0ZXIucG9wdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdjbHVzdGVyX2ZpbGxjb2xvcicsIGxheWVyLmNsdXN0ZXIuZmlsbGNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnY2x1c3Rlcl9mb250Y29sb3InLCBsYXllci5jbHVzdGVyLmZvbnRjb2xvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2xvY19saW5rdXJsJywgbGF5ZXIubG9jX2xpbmt1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdob3Zlcl9sb2NhdGlvbicsIGxheWVyLmhvdmVyX2xvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnaG92ZXJfc3R5bGUnLCBsYXllci5ob3Zlcl9zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9wdXAgPSBjb250ZW50RGF0YVsncG9wdXAnXSA/IGNvbnRlbnREYXRhWydwb3B1cCddIDogJC5leHRlbmQoe30sbGF5ZXIucG9wdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocG9wdXAgJiYgcG9wdXAuY29udGVudCAmJiBwb3B1cC5jb250ZW50LnNlYXJjaCAmJiBwb3B1cC5jb250ZW50LnNlYXJjaCgnaXRlbUlkJykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cC5jb250ZW50ID0gcG9wdXAuY29udGVudC5yZXBsYWNlKCdpdGVtSWQnLGNvbnRlbnREYXRhWydpZCddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNvbnRlbnREYXRhWydsYWJlbCddKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdsYWJlbCcsY29udGVudERhdGFbJ2xhYmVsJ10pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb250ZW50RGF0YVsndG9vbHRpcCddKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ3Rvb2x0aXAnLGNvbnRlbnREYXRhWyd0b29sdGlwJ10pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ3BvcHVwJywgcG9wdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCd6b29tX29uY2xpY2snLCBsYXllci56b29tX29uY2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCd0aWQnLCBjb250ZW50RGF0YVsnaWQnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG9jc3R5bGUgPSBjb250ZW50RGF0YVsnbG9jc3R5bGUnXSB8fCBsYXllci5sb2NzdHlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnbG9jYXRpb25TdHlsZScsIGxvY3N0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxvY3N0eWxlICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2xvY3N0eWxlXSAmJiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsb2NzdHlsZV0uc3R5bGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldFN0eWxlKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2xvY3N0eWxlXS5zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmVzLnB1c2goY29udGVudEZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighdW5zdHlsZWRGZWF0dXJlcyl7dW5zdHlsZWRGZWF0dXJlcyA9W107fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFtaXNzaW5nU3R5bGVzKXttaXNzaW5nU3R5bGVzID0gW107fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnc3R5bGVJZCcsbG9jc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc3R5bGVkRmVhdHVyZXMucHVzaChjb250ZW50RmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZ1N0eWxlc1tsb2NzdHlsZV0gPSBsb2NzdHlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYobWlzc2luZ1N0eWxlcyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIubG9hZExvY2F0aW9uU3R5bGVzKG1pc3NpbmdTdHlsZXMsIHtkb25lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCB1bnN0eWxlZEZlYXR1cmVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0eWxlSWQgPXVuc3R5bGVkRmVhdHVyZXNbaV0uZ2V0KCdzdHlsZUlkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc3R5bGVkRmVhdHVyZXNbaV0uc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VmVjdG9yU291cmNlLmFkZEZlYXR1cmUodW5zdHlsZWRGZWF0dXJlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NpbmdTdHlsZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFZlY3RvclNvdXJjZS5hZGRGZWF0dXJlcyhjb250ZW50RmVhdHVyZXMpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFwQ29udHJvbGxlci5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN0cmF0ZWd5OiBvbC5sb2FkaW5nc3RyYXRlZ3kuYmJveFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYodGhpcy5hcnJMYXllcnNbaXRlbVVpZF0uY2x1c3Rlcil7XG4gICAgICAgICAgICBsZXQgbGF5ZXIgPSBzZWxmLmFyckxheWVyc1tpdGVtVWlkXTtcbiAgICAgICAgICAgIGxldCBtYXAgPSBzZWxmLm1hcENvbnRyb2xsZXIubWFwO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRab29tID0gbWFwLmdldFZpZXcoKS5nZXRab29tKCk7XG4gICAgICAgICAgICBsZXQgY2x1c3RlckRpc3RhbmNlID0gdGhpcy5hcnJMYXllcnNbaXRlbVVpZF0uY2x1c3Rlci5kaXN0YW5jZSB8fCAyMDtcbiAgICAgICAgICAgIGlmIChjdXJyZW50Wm9vbSA+PSBsYXllci5jbHVzdGVyLnpvb20pIHtcbiAgICAgICAgICAgICAgY2x1c3RlckRpc3RhbmNlID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2x1c3RlclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuQ2x1c3Rlcih7XG4gICAgICAgICAgICAgIGRpc3RhbmNlOiBjbHVzdGVyRGlzdGFuY2UsXG4gICAgICAgICAgICAgIC8vdGhyZXNob2xkOiAyLCAvL21pbmltdW0gZWxlbWVudCBjb3VudFxuICAgICAgICAgICAgICBzb3VyY2U6IHJlcXVlc3RWZWN0b3JTb3VyY2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB2ZWN0b3JMYXllciA9IG5ldyBvbC5sYXllci5BbmltYXRlZENsdXN0ZXIoXG4gICAgICAgICAgICAgICAgICB7XHRuYW1lOiAnQ2x1c3RlcicsXG4gICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBjbHVzdGVyU291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZSBhIHN0eWxlIGZ1bmN0aW9uIGZvciBjbHVzdGVyIHN5bWJvbGlzYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVGb3JDbHVzdGVyXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yKFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdMYXllcicsXG4gICAgICAgICAgICAgICAgICAgICAgc291cmNlOiByZXF1ZXN0VmVjdG9yU291cmNlXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxheWVycyA9IGxheWVycyB8fCBbXTtcbiAgICAgICAgICBsYXllcnMucHVzaCh2ZWN0b3JMYXllcik7XG4gICAgICAgIGxheWVyR3JvdXAgPSBuZXcgb2wubGF5ZXIuR3JvdXAoe1xuICAgICAgICAgICAgbGF5ZXJzOiBsYXllcnNcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLnZlY3RvckxheWVyID0gbGF5ZXJHcm91cDtcbiAgICAgICAgc2VsZi5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihsYXllckdyb3VwKTtcblxuXG4gICAgICB9XG4gICAgICAgZWxzZXtcbiAgICAgICAgc2VsZi5tYXBDb250cm9sbGVyLnNwaW5uZXIuc2hvdygpO1xuICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgZGF0YVR5cGU6IHNlbGYubWFwQ29udHJvbGxlci5kYXRhLmpzb25wID8gXCJqc29ucFwiIDogXCJqc29uXCIsXG4gICAgICAgICAgdXJsOiBzZWxmLnByb3h5LmFwaV9sYXllcmNvbnRlbnRfdXJsICsgJy8nICsgc2VsZi5hcnJMYXllcnNbaXRlbVVpZF0uaWQsXG4gICAgICAgIH0pLmRvbmUoZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICBsZXQgaixcbiAgICAgICAgICAgICAgICBuZXdMb2NhdGlvblN0eWxlcztcblxuICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG5ld0xvY2F0aW9uU3R5bGVzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZGF0YS5sZW5ndGg7IGogKz0gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNvbnRlbnQgPSBzZWxmLmFyckxheWVyc1tpdGVtVWlkXS5jb250ZW50IHx8IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNvbnRlbnQucHVzaChkYXRhW2pdKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3TG9jYXRpb25TdHlsZXMucHVzaChkYXRhW2pdLmxvY2F0aW9uU3R5bGUpO1xuICBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmNoZWNrTG9jYXRpb25TdHlsZXMoe1xuICAgICAgICAgICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAVE9ETzogY2hlY2sgdGhpcyFcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9hZExheWVyQ29udGVudChpdGVtVWlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm1hcENvbnRyb2xsZXIuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG5cbiAgfSAvLyBlbmQgb2YgXCJsb2FkTGF5ZXJDb250ZW50KClcIlxuXG4gIGhpZGVMYXllcihsYXllclVpZCwga2VlcExheWVyKSB7XG5cbiAgICB2YXIgbGF5ZXIsXG4gICAgICBpLFxuICAgICAgajtcblxuICAgIGxheWVyID0gdGhpcy5hcnJMYXllcnNbbGF5ZXJVaWRdO1xuICAgIGlmICghbGF5ZXIpIHtcbiAgICAgIC8vY29uc29sZS53YXJuKCdDYW5ub3QgaGlkZSB1bmtub3duIGxheWVyICgnICsgbGF5ZXJVaWQgKyAnKScpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGxheWVyIGlzIGxpc3RlZCBhcyBcImFjdGl2ZVwiXG4gICAgLy8gb3RoZXJ3aXNlIHRoZXJlIGlzIG5vdGhpbmcgdG8gcmVtb3ZlIG9yIGNoYW5nZVxuICAgIGlmICh0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW2xheWVyVWlkXSkge1xuICAgICAgLy8gcmVtb3ZlIGxheWVyIGZyb20gbWFwIChpZiBpdCB3YXMgdmlzaWJsZSBiZWZvcmUpXG4gICAgICBpZiAodGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllclVpZF0gPT09ICd2aXNpYmxlJyAmJiBsYXllci52ZWN0b3JMYXllcikge1xuICAgICAgICAvLyBbaW5mb106IGRvIG5vdCB1c2UgXCJsYXllci52ZWN0b3JMYXllci5zZXRWaXNpYmxlKGZhbHNlKTtcIlxuICAgICAgICAvLyAgICAgICAgIHNlZSBcInNob3dMYXllcigpXCIgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVMYXllcihsYXllci52ZWN0b3JMYXllcik7XG4gICAgICB9XG4gICAgICAvLyBvbmx5IG1hcmsgYXMgXCJpbnZpc2libGVcIiBpZiBcImtlZXBMYXllclwiIGlzIFwidHJ1ZVwiXG4gICAgICAvLyB0aGlzIGlzIG5lZWRlZCBmb3IgdGhlIHpvb20tYm91bmRzXG4gICAgICBpZiAoa2VlcExheWVyKSB7XG4gICAgICAgIHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJVaWRdID0gJ2ludmlzaWJsZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgdGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllclVpZF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY2hpbGRzIG5lZWRlZCB0byBiZSBjaGVja2VkIGluZGVwZW5kZW50IGZyb20gaXRzIHBhcmVudHMgc3RhdGVcblxuXG4gICAgLy9Ub0RvIGxvYWRpbmcgcHJvYmxlbVxuICAgIGlmIChsYXllciAmJiBsYXllci5oYXNDaGlsZHMpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsYXllci5jaGlsZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5oaWRlTGF5ZXIobGF5ZXIuY2hpbGRzW2ldLmlkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYobGF5ZXIuaXNJbmFjdGl2ZSl7XG4gICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh0aGlzLnByb3h5Lmhvb2tfbGF5ZXJfdmlzaWJpbGl0eSwgbGF5ZXJVaWQpO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGxheWVyLmlzSW5hY3RpdmUgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMubGF5ZXJSZXF1ZXN0cyAmJiB0eXBlb2YgdGhpcy5sYXllclJlcXVlc3RzWydsYXllcl9yZXF1ZXN0XycgKyBsYXllclVpZF0gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5sYXllclJlcXVlc3RzWydsYXllcl9yZXF1ZXN0XycgKyBsYXllclVpZF0gPT0gXCJudW1iZXJcIikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMubGF5ZXJSZXF1ZXN0c1snbGF5ZXJfcmVxdWVzdF8nICsgbGF5ZXJVaWRdKTtcbiAgICAgICAgICBkZWxldGUgdGhpcy5sYXllclJlcXVlc3RzWydsYXllcl9yZXF1ZXN0XycgKyBsYXllclVpZF07XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vdGhpcy5jb21iaW5lTGF5ZXJzKHRoaXMpO1xuICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLnNldENlbnRlcihbdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0Q2VudGVyKClbMF0rMC4wMDEsdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0Q2VudGVyKClbMV1dKTtcbiAgICAvLyBob29rc1xuICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHRoaXMucHJveHkuaG9va19sYXllcl92aXNpYmlsaXR5LCBsYXllclVpZCk7XG4gIH0gLy8gZW5kIG9mIFwiaGlkZUxheWVyKClcIlxuICBoaWRlQ2hpbGRMYXllcihsYXllclVpZCwgY2hpbGRVaWQpe1xuICAgIGxldCBsYXllciA9IHRoaXMuYXJyTGF5ZXJzW2xheWVyVWlkXVxuICAgIGNoaWxkVWlkID0gY2hpbGRVaWQucmVwbGFjZShsYXllclVpZCwnJyk7XG4gICAgbGV0IGNoaWxkTGF5ZXIgPSBsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpW2NoaWxkVWlkXVxuICAgIGNoaWxkTGF5ZXIuc2V0KCd2aXNpYmxlJywgZmFsc2UpO1xuICB9XG4gIHNob3dDaGlsZExheWVyKGxheWVyVWlkLCBjaGlsZFVpZCl7XG4gICAgICBsZXQgbGF5ZXIgPSB0aGlzLmFyckxheWVyc1tsYXllclVpZF1cbiAgICAgIGNoaWxkVWlkID0gY2hpbGRVaWQucmVwbGFjZShsYXllclVpZCwnJyk7XG4gICAgICBsZXQgY2hpbGRMYXllciA9IGxheWVyLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbY2hpbGRVaWRdXG4gICAgICBjaGlsZExheWVyLnNldCgndmlzaWJsZScsIHRydWUpO1xuICB9XG5cbiAgc2hvd0xheWVyKGxheWVyVWlkKSB7XG4gICAgdmFyIGxheWVyLFxuICAgICAgbWFwTGF5ZXJzLFxuICAgICAgYWRkTGF5ZXIsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIGFjdGl2ZUZvclpvb207XG5cbiAgICBhY3RpdmVGb3Jab29tID0gdGhpcy5wcm94eS5jaGVja0xheWVySXNBY3RpdmVGb3Jab29tKGxheWVyVWlkKTtcbiAgICBsYXllciA9IHRoaXMuYXJyTGF5ZXJzW2xheWVyVWlkXTtcblxuICAgIGlmIChhY3RpdmVGb3Jab29tKSB7XG4gICAgICBpZiAodGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllclVpZF0gIT09ICd2aXNpYmxlJykge1xuICAgICAgICAvL2lmIChsYXllci5saW5rX2lkKSB7XG4gICAgICAgIC8vICB0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW2xheWVyLmxpbmtfaWRdID0gJ3Zpc2libGUnO1xuICAgICAgICAvL30gZWxzZVxuICAgICAgICBpZiAobGF5ZXIgJiYgbGF5ZXIudmVjdG9yTGF5ZXIpIHtcbiAgICAgICAgICAvLyBbaW5mb106IGRvIG5vdCB1c2U6IFwibGF5ZXIudmVjdG9yTGF5ZXIuc2V0VmlzaWJsZSh0cnVlKTtcIlxuICAgICAgICAgIC8vICAgICAgICAgQWx3YXlzIGFkZCBhbmQgcmVtb3ZlIExheWVycywgc28gdGhhdCB0aGUgbGFzdFxuICAgICAgICAgIC8vICAgICAgICAgY2xpY2tlZCBsYXllciBpcyBhbHdheXMgb250b3Agb2YgdGhlIG90aGVycy5cblxuICAgICAgICAgIC8vIGNoZWNrIGlmIGxheWVyIGlzIHJlYWxseSBub3QgYWxyZWFkeSBvbiB0aGUgbWFwXG4gICAgICAgICAgLy8gdG8gcHJldmVudCBhZGRpbmcgdGhlIHNhbWUgbGF5ZXIgbXVsdGlwbGUgdGltZXNcbiAgICAgICAgICBhZGRMYXllciA9IHRydWU7XG4gICAgICAgICAgbWFwTGF5ZXJzID0gdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRMYXllcnMoKTtcbiAgICAgICAgICBtYXBMYXllcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gbGF5ZXIudmVjdG9yTGF5ZXIpIHtcbiAgICAgICAgICAgICAgYWRkTGF5ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoYWRkTGF5ZXIpIHtcbiAgICAgICAgICAgIGlmKGxheWVyLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0gJiYgbGF5ZXIudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXS5wb3B1cCAmJiBsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdLnBvcHVwLnNob3dQb3B1cE9uQWN0aXZlKXtcblxuICAgICAgICAgICAgICB0aGlzLnByb3h5LmN1cnJlbnRQb3B1cC4kY29udGVudC5odG1sKCcnKTtcbiAgICAgICAgICAgICAgdGhpcy5wcm94eS5jdXJyZW50UG9wdXAuJHBvcHVwLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5MT0FESU5HKTtcbiAgICAgICAgICAgICAgdGhpcy5wcm94eS5jdXJyZW50UG9wdXAuc3Bpbm5lci5zaG93KCk7XG4gICAgICAgICAgICAgIHZhciBwb3B1cEluZm9zID0gbGF5ZXIudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXS5wb3B1cDtcbiAgICAgICAgICAgICAgdmFyIGZlYXR1cmVzID0gbGF5ZXIudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXS5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICAgICAgICAgICAgICB2YXIgY29vcmQgPSBmZWF0dXJlc1snMCddLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICAgICAgaWYgKHBvcHVwSW5mb3MuYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9ialBvcHVwID0ge307XG4gICAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm9zO1xuICAgICAgICAgICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBmZWF0dXJlc1snMCddO1xuICAgICAgICAgICAgICAgIG9ialBvcHVwLmxheWVyID0gbGF5ZXIudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXTtcbiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBwb3B1cCBob29rIGZvciBwbHVnaW4gc3BlY2lmaWMgcG9wdXAgY29udGVudFxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAsIG9ialBvcHVwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wcm94eS5zZXRQb3B1cChvYmpQb3B1cCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgICAgICAgIHVybDogc2VsZi5hcGlfaW5mb3dpbmRvd191cmwgKyAnLycgKyBwb3B1cEluZm9zLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9wdXBJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBwb3B1cEluZm9zLmFzeW5jLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGRhdGEuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICBwb3B1cDogcG9wdXBJbmZvcy5wb3B1cCxcbiAgICAgICAgICAgICAgICAgICAgICByb3V0aW5nX2xpbms6IHBvcHVwSW5mb3Mucm91dGluZ19saW5rXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9ialBvcHVwID0ge307XG4gICAgICAgICAgICAgICAgICAgIG9ialBvcHVwLnBvcHVwID0gcG9wdXBJbmZvO1xuICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gZmVhdHVyZXNbJzAnXTtcbiAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAubGF5ZXIgPSBsYXllcjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBwb3B1cCBob29rIGZvciBwbHVnaW4gc3BlY2lmaWMgcG9wdXAgY29udGVudFxuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCwgb2JqUG9wdXApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5zZXRQb3B1cChvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIobGF5ZXIudmVjdG9yTGF5ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxvYWRMYXllckNvbnRlbnQobGF5ZXJVaWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJVaWRdID0gJ3Zpc2libGUnO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vaWYgKGxheWVyLmxpbmtfaWQpIHtcbiAgICAgICAgLy8gIHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXIubGlua19pZF0gPSAnaW52aXNpYmxlJztcbiAgICAgICAgLy99IGVsc2Uge1xuICAgICAgICAvL3RoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJVaWRdID0gJ2ludmlzaWJsZSc7XG4gICAgICAgIC8vfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsYXllciAmJiBsYXllci5oYXNDaGlsZHMgJiYgYWN0aXZlRm9yWm9vbSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxheWVyLmNoaWxkcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnNob3dMYXllcihsYXllci5jaGlsZHNbaV0uaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsYXllciAmJiBhY3RpdmVGb3Jab29tKSB7XG4gICAgICBsYXllci5pc0luYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLnByb3h5LnJlcXVlc3RGdW5jdGlvbnNbJ3JlcXVlc3RfJyArIGxheWVyVWlkXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXG4gICAgICBpZiAodGhpcy5sYXllclJlcXVlc3RzICYmIHR5cGVvZiB0aGlzLmxheWVyUmVxdWVzdHNbJ2xheWVyX3JlcXVlc3RfJyArIGxheWVyVWlkXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB0aGlzLmxheWVyUmVxdWVzdHNbJ2xheWVyX3JlcXVlc3RfJyArIGxheWVyVWlkXSA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLnByb3h5LnJlcXVlc3RGdW5jdGlvbnNbJ3JlcXVlc3RfJyArIGxheWVyVWlkXS5mdW5jdGlvbiwgdGhpcy5wcm94eS5yZXF1ZXN0RnVuY3Rpb25zWydyZXF1ZXN0XycgKyBsYXllclVpZF0uaW50ZXJ2YWwpO1xuICAgICAgfVxuXG4gICAgfVxuICAgIC8vdGhpcy5jb21iaW5lTGF5ZXJzKHRoaXMpO1xuICAgIC8vIGhvb2tzXG4gICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnModGhpcy5wcm94eS5ob29rX2xheWVyX3Zpc2liaWxpdHksIGxheWVyVWlkKTtcbiAgfSAvLyBlbmQgb2YgXCJzaG93TGF5ZXIoKVwiXG5cbiAgZHJhd0xheWVyKGl0ZW1VaWQpIHtcblxuICAgIHZhciBzZWxmLFxuICAgICAgZWxlbWVudCxcbiAgICAgIGVsZW1lbnRDb250ZW50LFxuICAgICAgbGF5ZXJzLFxuICAgICAgaSxcbiAgICAgIGosXG4gICAgICBtaXNzaW5nU3R5bGVzLFxuICAgICAgdW5zdHlsZWRGZWF0dXJlcyxcbiAgICAgIGZlYXR1cmVzLFxuICAgICAgZGF0YVByb2plY3Rpb24sXG4gICAgICBmZWF0dXJlUHJvamVjdGlvbixcbiAgICAgIHZlY3RvclNvdXJjZSxcbiAgICAgIHZlY3RvckxheWVyLFxuICAgICAgdmVjdG9yU3R5bGUsXG4gICAgICBsYXllckdyb3VwO1xuXG4gICAgc2VsZiA9IHRoaXM7XG4gICAgZWxlbWVudCA9IHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdO1xuXG4gICAgLy8gaWYgKCFlbGVtZW50LmhpZGUpIHtcblxuICAgIGxheWVycyA9IFtdO1xuICAgIGlmIChlbGVtZW50LmNvbnRlbnQgJiYgZWxlbWVudC5jb250ZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50LmNvbnRlbnQubGVuZ3RoOyBpICs9IDEpIHtcblxuICAgICAgICBlbGVtZW50Q29udGVudCA9IGVsZW1lbnQuY29udGVudFtpXTtcbiAgICAgICAgaWYgKCFlbGVtZW50Q29udGVudCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb2wuZm9ybWF0W2VsZW1lbnRDb250ZW50LmZvcm1hdF0gPT09IFwiZnVuY3Rpb25cIikge1xuXG4gICAgICAgICAgLy8gaWYgKGVsZW1lbnQuY29udGVudFtpXS5vcmlnVHlwZSA9PT0gJ3NpbmdsZScpIHtcbiAgICAgICAgICAvLyAgIGZlYXR1cmVQcm9qZWN0aW9uID0gdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0UHJvamVjdGlvbigpO1xuICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgLy8gICBmZWF0dXJlUHJvamVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAvLyB9XG4gICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcyAmJiBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMucHJvamVjdGlvbikge1xuICAgICAgICAgICAgZGF0YVByb2plY3Rpb24gPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMucHJvamVjdGlvbjtcbiAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uID0gdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0UHJvamVjdGlvbigpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhUHJvamVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZm9ybWF0ID09PSBcIk9TTVhNTFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEuZ2VvbWV0cnkgJiYgZWxlbWVudENvbnRlbnQuZGF0YS5nZW9tZXRyeS50eXBlID09PSBcIkNpcmNsZVwiKSB7XG4gICAgICAgICAgICAvLyBkcmF3IGNpcmNsZSBnZW9tZXRyaWVzXG4gICAgICAgICAgICBmZWF0dXJlcyA9IFtdO1xuICAgICAgICAgICAgbGV0IGZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZShcbiAgICAgICAgICAgICAgbmV3IG9sLmdlb20uQ2lyY2xlKFxuICAgICAgICAgICAgICAgIG9sLnByb2ouZnJvbUxvbkxhdChlbGVtZW50Q29udGVudC5kYXRhLmdlb21ldHJ5LmNlbnRlciksXG4gICAgICAgICAgICAgICAgcGFyc2VGbG9hdChlbGVtZW50Q29udGVudC5kYXRhLmdlb21ldHJ5LnJhZGl1cylcbiAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICBmZWF0dXJlLnNldCgnc3R5bGVJZCcsIGVsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGUpO1xuICAgICAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcmVtYWluaW5nIGdlb21ldHJpZXNcbiAgICAgICAgICAgIGZlYXR1cmVzID0gKG5ldyBvbC5mb3JtYXRbZWxlbWVudENvbnRlbnQuZm9ybWF0XSh7fSkpLnJlYWRGZWF0dXJlcyhlbGVtZW50Q29udGVudC5kYXRhLCB7XG4gICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBmZWF0dXJlUHJvamVjdGlvbixcbiAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb246IGRhdGFQcm9qZWN0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtaXNzaW5nU3R5bGVzID0gW107XG4gICAgICAgICAgdW5zdHlsZWRGZWF0dXJlcyA9IFtdO1xuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBmZWF0dXJlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgLy8gZmVhdHVyZXNbal0uc2V0SWQodXRpbHMuZ2V0VW5pcXVlSWQoKSk7XG4gICAgICAgICAgICAvLyBmZWF0dXJlc1tqXS5zZXQoJ3Byb2plY3Rpb24nLCB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRQcm9qZWN0aW9uKCkpO1xuICAgICAgICAgICAgLy8gZmVhdHVyZXNbal0uc2V0KCdwcm9qZWN0aW9uJywgXCJFUFNHOjQzMjZcIik7XG4gICAgICAgICAgICBmZWF0dXJlc1tqXS5zZXQoJ2hvdmVyX2xvY2F0aW9uJywgZWxlbWVudENvbnRlbnQuaG92ZXJfbG9jYXRpb24pO1xuICAgICAgICAgICAgZmVhdHVyZXNbal0uc2V0KCdob3Zlcl9zdHlsZScsIGVsZW1lbnRDb250ZW50LmhvdmVyX3N0eWxlKTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlc1tqXS5nZXQoJ3N0eWxlSWQnKSkge1xuICAgICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJyldICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2ZlYXR1cmVzW2pdLmdldCgnc3R5bGVJZCcpXS5zdHlsZSkge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVzW2pdLnNldFN0eWxlKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2ZlYXR1cmVzW2pdLmdldCgnc3R5bGVJZCcpXS5zdHlsZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWlzc2luZ1N0eWxlcy5wdXNoKGZlYXR1cmVzW2pdLmdldCgnc3R5bGVJZCcpKTtcbiAgICAgICAgICAgICAgICB1bnN0eWxlZEZlYXR1cmVzLnB1c2goZmVhdHVyZXNbal0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGUpIHtcbiAgICAgICAgICAgICAgLy8gZmVhdHVyZSBoYXMgbm8gcHJvcGVydHkgc3R5bGVJZCwgYnV0IGVsZW1lbnRDb250ZW50IGhhcyBsb2NhdGlvbnN0eWxlXG4gICAgICAgICAgICAgIGlmIChzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tlbGVtZW50Q29udGVudC5sb2NhdGlvblN0eWxlXSAmJiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tlbGVtZW50Q29udGVudC5sb2NhdGlvblN0eWxlXS5zdHlsZSkge1xuICAgICAgICAgICAgICAgIC8vZmVhdHVyZXNbal0uc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZWxlbWVudENvbnRlbnQubG9jYXRpb25TdHlsZV0uc3R5bGUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pc3NpbmdTdHlsZXMucHVzaChlbGVtZW50Q29udGVudC5sb2NhdGlvblN0eWxlKTtcbiAgICAgICAgICAgICAgICB1bnN0eWxlZEZlYXR1cmVzLnB1c2goZmVhdHVyZXNbal0pO1xuICAgICAgICAgICAgICAgIGZlYXR1cmVzW2pdLnNldCgnc3R5bGVJZCcsIGVsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmVjdG9yU3R5bGUgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tlbGVtZW50Q29udGVudC5sb2NhdGlvblN0eWxlXSAmJiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tlbGVtZW50Q29udGVudC5sb2NhdGlvblN0eWxlXS5zdHlsZTtcbiAgICAgICAgICBpZihzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tlbGVtZW50Q29udGVudC5sb2NhdGlvblN0eWxlXSAmJiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tlbGVtZW50Q29udGVudC5sb2NhdGlvblN0eWxlXS5mblN0eWxlRnVuY3Rpb24pIHtcblxuICAgICAgICAgICAgdmVjdG9yU3R5bGUgPSBGdW5jdGlvbihcImZlYXR1cmVcIixcImRhdGFcIixcIm1hcFwiLHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdLmZuU3R5bGVGdW5jdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtaXNzaW5nU3R5bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIubG9hZExvY2F0aW9uU3R5bGVzKG1pc3NpbmdTdHlsZXMsIHtcbiAgICAgICAgICAgICAgZG9uZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBmLFxuICAgICAgICAgICAgICAgICAgZkxheWVyR3JvdXAsXG4gICAgICAgICAgICAgICAgICBmTGF5ZXJzLFxuICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyLFxuICAgICAgICAgICAgICAgICAgZlZlY3RvclNvdXJjZTtcbiAgICAgICAgICAgICAgICBmb3IgKGYgPSAwOyBmIDwgdW5zdHlsZWRGZWF0dXJlcy5sZW5ndGg7IGYgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3Vuc3R5bGVkRmVhdHVyZXNbZl0uZ2V0KCdzdHlsZUlkJyldKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuc3R5bGVkRmVhdHVyZXNbZl0uc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbdW5zdHlsZWRGZWF0dXJlc1tmXS5nZXQoJ3N0eWxlSWQnKV0uc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgZlZlY3RvclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHtcbiAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlczogZmVhdHVyZXMsXG4gICAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbjogJ0VQU0c6Mzg1NycsXG4gICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBuZXcgb2wuZm9ybWF0Lkdlb0pTT04oKVxuICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgIGZWZWN0b3JMYXllciA9IHV0aWxzLmdldFZlY3RvckxheWVyKGZWZWN0b3JTb3VyY2UsIHZlY3RvclN0eWxlKTtcblxuICAgICAgICAgICAgICAgICAgLy8gbGF5ZXJzLnB1c2godmVjdG9yTGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuYXJyTGF5ZXJzW2l0ZW1VaWRdLmZWZWN0b3JMYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgIGZMYXllckdyb3VwID0gc2VsZi5hcnJMYXllcnNbaXRlbVVpZF0udmVjdG9yTGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgZkxheWVycyA9IGZMYXllckdyb3VwLmdldExheWVycygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEgJiYgZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMucG9wdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZWZWN0b3JMYXllci5wb3B1cCA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wb3B1cDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZWZWN0b3JMYXllci50b29sdGlwID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnRvb2x0aXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyLmxhYmVsID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmVmVjdG9yTGF5ZXIuem9vbV9vbmNsaWNrID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnpvb21fb25jbGljaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGZMYXllcnMucHVzaChmVmVjdG9yTGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgIGZMYXllckdyb3VwLnNldExheWVycyhmTGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEgJiYgZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMucG9wdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZWZWN0b3JMYXllci5wb3B1cCA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wb3B1cDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZWZWN0b3JMYXllci50b29sdGlwID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnRvb2x0aXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyLmxhYmVsID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmVmVjdG9yTGF5ZXIuem9vbV9vbmNsaWNrID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnpvb21fb25jbGljaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBmTGF5ZXJHcm91cCA9IG5ldyBvbC5sYXllci5Hcm91cCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyczogW2ZWZWN0b3JMYXllcl1cbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFyckxheWVyc1tpdGVtVWlkXS52ZWN0b3JMYXllciA9IGZMYXllckdyb3VwO1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIoZkxheWVyR3JvdXApO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihlbGVtZW50LnNwbGl0X2dlb2pzb24pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlY3RvclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Rpb246ICdFUFNHOjM4NTcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBuZXcgb2wuZm9ybWF0Lkdlb0pTT04oKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdmVjdG9yU291cmNlLmFkZEZlYXR1cmUoZmVhdHVyZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllciA9IHV0aWxzLmdldFZlY3RvckxheWVyKHZlY3RvclNvdXJjZSwgdmVjdG9yU3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqPCBlbGVtZW50Lmdlb2pzb25fYXR0cmlidXRlcy5zcGxpdCgnLCcpLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5zZXQoZWxlbWVudC5nZW9qc29uX2F0dHJpYnV0ZXMuc3BsaXQoJywnKVtqXSxmZWF0dXJlc1tpXS5nZXQoZWxlbWVudC5nZW9qc29uX2F0dHJpYnV0ZXMuc3BsaXQoJywnKVtqXSkpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJzLnB1c2godmVjdG9yTGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5wb3B1cCA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wb3B1cDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLnRvb2x0aXAgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5sYWJlbCA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5sYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnpvb21fb25jbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuem9vbV9vbmNsaWNrID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnpvb21fb25jbGljaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlczogZmVhdHVyZXMsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Rpb246ICdFUFNHOjM4NTcnLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IG5ldyBvbC5mb3JtYXQuR2VvSlNPTigpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIgPSB1dGlscy5nZXRWZWN0b3JMYXllcih2ZWN0b3JTb3VyY2UsIHZlY3RvclN0eWxlKTtcblxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhICYmIGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5wb3B1cCA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wb3B1cDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLnRvb2x0aXAgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5sYWJlbCA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5sYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnpvb21fb25jbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuem9vbV9vbmNsaWNrID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnpvb21fb25jbGljaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxheWVycy5wdXNoKHZlY3RvckxheWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH1cblxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0Zvcm1hdCB0eXBlICcgKyBlbGVtZW50Q29udGVudC5mb3JtYXQgKyAnIGluIG9sLmZvcm1hdCBub3QgZm91bmQuJyk7XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH1cblxuICAgIGxheWVyR3JvdXAgPSBuZXcgb2wubGF5ZXIuR3JvdXAoe1xuICAgICAgbGF5ZXJzOiBsYXllcnNcbiAgICB9KTtcblxuICAgIHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLnZlY3RvckxheWVyID0gbGF5ZXJHcm91cDtcbiAgICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKGxheWVyR3JvdXApO1xuICAgIGlmKGxheWVyR3JvdXAuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXSAmJiBsYXllckdyb3VwLmdldExheWVycygpLmdldEFycmF5KClbMF0ucG9wdXAgJiYgbGF5ZXJHcm91cC5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdLnBvcHVwLnNob3dQb3B1cE9uQWN0aXZlKXtcbiAgICAgIHRoaXMucHJveHkuY3VycmVudFBvcHVwLiRjb250ZW50Lmh0bWwoJycpO1xuICAgICAgdGhpcy5wcm94eS5jdXJyZW50UG9wdXAuJHBvcHVwLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5MT0FESU5HKTtcbiAgICAgIHRoaXMucHJveHkuY3VycmVudFBvcHVwLnNwaW5uZXIuc2hvdygpO1xuICAgICAgdmFyIHBvcHVwSW5mb3MgPSBsYXllckdyb3VwLmdldExheWVycygpLmdldEFycmF5KClbMF0ucG9wdXA7XG4gICAgICB2YXIgbGF5ZXIgPSBsYXllckdyb3VwLmdldExheWVycygpLmdldEFycmF5KClbMF07XG4gICAgICB2YXIgY29vcmQgPSBmZWF0dXJlc1snMCddLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgIGlmIChwb3B1cEluZm9zLmFzeW5jID09PSBmYWxzZSkge1xuICAgICAgICB2YXIgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm9zO1xuICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gZmVhdHVyZXNbJzAnXTtcbiAgICAgICAgb2JqUG9wdXAubGF5ZXIgPSBsYXllcjtcbiAgICAgICAgLy8gQ2FsbCB0aGUgcG9wdXAgaG9vayBmb3IgcGx1Z2luIHNwZWNpZmljIHBvcHVwIGNvbnRlbnRcbiAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAsIG9ialBvcHVwKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnByb3h5LnNldFBvcHVwKG9ialBvcHVwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgdXJsOiBzZWxmLmFwaV9pbmZvd2luZG93X3VybCArICcvJyArIHBvcHVwSW5mb3MuY29udGVudCxcbiAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgdmFyIHBvcHVwSW5mbyA9IHtcbiAgICAgICAgICAgICAgYXN5bmM6IHBvcHVwSW5mb3MuYXN5bmMsXG4gICAgICAgICAgICAgIGNvbnRlbnQ6IGRhdGEuY29udGVudCxcbiAgICAgICAgICAgICAgcG9wdXA6IHBvcHVwSW5mb3MucG9wdXAsXG4gICAgICAgICAgICAgIHJvdXRpbmdfbGluazogcG9wdXBJbmZvcy5yb3V0aW5nX2xpbmtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBvYmpQb3B1cCA9IHt9O1xuICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm87XG4gICAgICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gZmVhdHVyZXNbJzAnXTtcbiAgICAgICAgICAgIG9ialBvcHVwLmxheWVyID0gbGF5ZXI7XG5cbiAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAsIG9ialBvcHVwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5wcm94eS5zZXRQb3B1cChvYmpQb3B1cCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL2hvb2tzXG4gICAgLy8gfVxuICB9IC8vIGVuZCBvZiBcImRyYXdMYXllcigpXCJcblxuICBkcmF3TGF5ZXJJbml0aWFsKCkge1xuICAgIHZhciBsYXllcklkLFxuICAgICAgbGF5ZXI7XG5cbiAgICBmb3IgKGxheWVySWQgaW4gdGhpcy5wcm94eS5hY3RpdmVMYXllcklkcykge1xuICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHMuaGFzT3duUHJvcGVydHkobGF5ZXJJZCkpIHtcbiAgICAgICAgdGhpcy5zaG93TGF5ZXIobGF5ZXJJZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGwgaW4gdGhpcy5hcnJMYXllcnMpIHtcbiAgICAgIGlmICh0aGlzLmFyckxheWVycy5oYXNPd25Qcm9wZXJ0eShsKSkge1xuICAgICAgICBsYXllciA9IHRoaXMuYXJyTGF5ZXJzW2xdO1xuICAgICAgICBpZiAobGF5ZXIuaGlkZSA9PT0gXCIxXCIpIHtcbiAgICAgICAgICB0aGlzLmhpZGVMYXllcihsYXllci5pZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gZW5kIG9mIFwiZHJhd0xheWVySW5pdGlhbCgpXCJcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWxheWVyLWNvbnRyb2xsZXIuanMiLCJleHBvcnQgY2xhc3MgQzRnTGF5ZXJ7XG4gIFxuICBjb25zdHJ1Y3RvcihsYXllckFycikge1xuICAgIHRoaXMuaWQgPSBsYXllckFyclsnaWQnXTtcbiAgICB0aGlzLnBpZCA9IGxheWVyQXJyWydwaWQnXTtcbiAgICB0aGlzLmFzeW5jX2NvbnRlbnQgPSBsYXllckFyclsnYXN5bmNfY29udGVudCddO1xuICAgIHRoaXMuY29udGVudCA9IGxheWVyQXJyWydjb250ZW50J107XG4gICAgdGhpcy5jc3NDbGFzcyA9IGxheWVyQXJyWydjc3NDbGFzcyddO1xuICAgIHRoaXMuaGlkZSA9IGxheWVyQXJyWydoaWRlJ107XG4gICAgdGhpcy5oaWRlX2NoaWxkID0gbGF5ZXJBcnJbJ2hpZGVfY2hpbGQnXTtcbiAgICB0aGlzLnR5cGUgPSBsYXllckFyclsndHlwZSddO1xuICAgIHRoaXMuY2x1c3RlciA9IGxheWVyQXJyWydjbHVzdGVyJ107XG4gICAgdGhpcy56b29tID0gbGF5ZXJBcnJbJ3pvb20nXTtcbiAgICB0aGlzLnpvb21fbG9jYXRpb25zID0gbGF5ZXJBcnJbJ3pvb21fbG9jYXRpb25zJ107XG4gICAgdGhpcy5kaXNwbGF5ID0gbGF5ZXJBcnJbJ2Rpc3BsYXknXTtcbiAgICB0aGlzLmhhc0NoaWxkcyA9IGxheWVyQXJyWydoYXNDaGlsZHMnXTtcbiAgICB0aGlzLmNoaWxkcyA9IGxheWVyQXJyWydjaGlsZHMnXTtcbiAgICB0aGlzLmNoaWxkc0NvdW50ID0gbGF5ZXJBcnJbJ2NoaWxkc0NvdW50J107XG4gICAgdGhpcy5yZW5kZXJTcGVjaWFsID0gbGF5ZXJBcnJbJ3JlbmRlclNwZWNpYWwnXTtcbiAgICB0aGlzLmVkaXRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnR5cGUgPSBsYXllckFyclsndHlwZSddO1xuICAgIHRoaXMubG9jc3R5bGUgPSBsYXllckFyclsnbG9jc3R5bGUnXTtcbiAgICB0aGlzLm5hbWUgPSBsYXllckFyclsnbmFtZSddO1xuICAgIHRoaXMudGFiSWQgPSBsYXllckFyclsndGFiSWQnXTtcbiAgICB0aGlzLnNwbGl0X2dlb2pzb24gPSBsYXllckFyclsnc3BsaXRfZ2VvanNvbiddO1xuICAgIHRoaXMuZ2VvanNvbl9hdHRyaWJ1dGVzID0gbGF5ZXJBcnJbJ2dlb2pzb25fYXR0cmlidXRlcyddO1xuICAgIHRoaXMuZ2VvanNvbl96b29tID0gbGF5ZXJBcnJbJ2dlb2pzb25fem9vbSddO1xuICAgIHRoaXMubGF5ZXJuYW1lID0gbGF5ZXJBcnJbJ2xheWVybmFtZSddO1xuICAgIHRoaXMudmlzaWJsZUNoaWxkcyA9IGZhbHNlO1xuICAgIHRoaXMudmVjdG9yTGF5ZXIgPSBudWxsO1xuICAgIHRoaXMuaGlkZVdoZW5JblRhYiA9IGxheWVyQXJyWydoaWRlX3doZW5faW5fdGFiJ107XG4gICAgdGhpcy5ub0ZpbHRlciA9IGxheWVyQXJyWydub0ZpbHRlciddO1xuXG4gICAgaWYgKGxheWVyQXJyLnByb2plY3RJZCkge1xuICAgICAgdGhpcy5wcm9qZWN0SWQgPSBsYXllckFyci5wcm9qZWN0SWQ7XG4gICAgfVxuICAgIGlmKGxheWVyQXJyLnBvcHVwKXtcbiAgICAgIHRoaXMucG9wdXAgPSBsYXllckFyci5wb3B1cDtcbiAgICB9XG4gICAgdGhpcy5hd2Vzb21laWNvbiA9IGxheWVyQXJyWydhd2Vzb21laWNvbiddXG4gIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1sYXllci5qcyIsImltcG9ydCB7QzRnTG9jYXRpb25TdHlsZX0gZnJvbSBcIi4vYzRnLWxvY2F0aW9uc3R5bGVcIjtcbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuXG5leHBvcnQgY2xhc3MgQzRnTG9jYXRpb25TdHlsZUNvbnRyb2xsZXJ7XG4gICAgY29uc3RydWN0b3IocHJveHkpe1xuICAgICAgICB0aGlzLnByb3h5ID0gcHJveHk7XG4gICAgICAgIHRoaXMubWFwQ29udHJvbGxlciA9IHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlcjtcbiAgICAgICAgdGhpcy5hcnJMb2NTdHlsZXMgPSB7fTtcbiAgICB9XG5cbiAgICBsb2FkTG9jYXRpb25TdHlsZXMoYXJySWRzLCBvcHRfb3B0aW9ucykge1xuICAgICAgICBsZXQgb3B0aW9ucyxcbiAgICAgICAgICAgIGNvbXBsZXRlID0ge30sXG4gICAgICAgICAgICBzdWNjZXNzID0ge30sXG4gICAgICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgIGNvdW50ID0gMSxcbiAgICAgICAgICAgIG1ha2VBamF4O1xuXG4gICAgICAgIGlmIChvcHRfb3B0aW9ucyAmJiB0eXBlb2Ygb3B0X29wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRfb3B0aW9ucztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgIG1ha2VBamF4ID0gZnVuY3Rpb24oc3R5bGVJZHMsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZVtpbmRleF0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdWNjZXNzW2luZGV4XSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZ2V0IGxvY2F0aW9uc3R5bGVzIG92ZXIgQVBJXG4gICAgICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuanNvbnAgPyBcImpzb25wXCIgOiBcImpzb25cIixcbiAgICAgICAgICAgICAgICB1cmw6IHNlbGYucHJveHkuYXBpX2xvY3N0eWxlX3VybCxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGlkczogc3R5bGVJZHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgbGV0IGksXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZURhdGEgPSBkYXRhW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hcnJMb2NTdHlsZXNbc3R5bGVEYXRhLmlkXSA9IG5ldyBDNGdMb2NhdGlvblN0eWxlKHN0eWxlRGF0YSwgc2VsZik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NbaW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN1Y2Nlc3Nba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kb25lICYmIHR5cGVvZiBvcHRpb25zLmRvbmUgPT09IFwiZnVuY3Rpb25cIiAmJiAoaW5kZXggPyBzdWNjZXNzZnVsIDogdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5kb25lKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuYWx3YXlzKGZ1bmN0aW9uIChqWGhyLCBzdHJTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29tcGxldGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZVtpbmRleF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wbGV0ZVtrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWx3YXlzICYmIHR5cGVvZiBvcHRpb25zLmFsd2F5cyA9PT0gXCJmdW5jdGlvblwiICYmIChpbmRleCA/IGNvbXBsZXRlZCA6IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuYWx3YXlzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghJChzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5zcGlubmVyLmVsZW1lbnQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5ISURFKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uIChqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24gKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycm9yVGhyb3duKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHNwbGl0IGFycklkcyBpZiBpdCdzIHRvbyBsb25nXG4gICAgICAgIGlmIChhcnJJZHMubGVuZ3RoID4gMTAwKSB7XG4gICAgICAgICAgICB2YXIgbiA9IDEwMDtcbiAgICAgICAgICAgIHdoaWxlKGFycklkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbWFrZUFqYXgoYXJySWRzLnNwbGljZSgwLCBuKSwgY291bnQpO1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYWtlQWpheChhcnJJZHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vfSk7XG4gICAgfSAvLyBlbmQgb2YgXCJsb2FkTG9jYXRpb25TdHlsZXMoKVwiXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbG9jYXRpb25zdHlsZS1jb250cm9sbGVyLmpzIiwiaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIEM0Z0xvY2F0aW9uU3R5bGV7XG4gICAgY29uc3RydWN0b3IobG9jU3R5bGVBcnIsIGNvbnRyb2xsZXIpe1xuICAgICAgICB0aGlzLmlkICAgICAgICA9IGxvY1N0eWxlQXJyWydpZCddO1xuICAgICAgICB0aGlzLnN0eWxlICAgICA9IHRoaXMuZ2V0U3R5bGVGdW5jdGlvbihsb2NTdHlsZUFycik7XG4gICAgICAgIHRoaXMuZWRpdG9yICAgID0gdGhpcy5nZXRTdHlsZUVkaXRvckNvbmZpZyhsb2NTdHlsZUFycik7XG4gICAgICAgIHRoaXMubmFtZSAgICAgID0gbG9jU3R5bGVBcnJbJ25hbWUnXTtcbiAgICAgICAgdGhpcy50b29sdGlwICAgPSBsb2NTdHlsZUFyclsndG9vbHRpcCddO1xuICAgICAgICB0aGlzLmxhYmVsICAgICA9IGxvY1N0eWxlQXJyWydsYWJlbCddO1xuICAgICAgICB0aGlzLm1pbnpvb20gICA9IGxvY1N0eWxlQXJyWydtaW56b29tJ107XG4gICAgICAgIHRoaXMubWF4em9vbSAgID0gbG9jU3R5bGVBcnJbJ21heHpvb20nXTtcbiAgICAgICAgdGhpcy5mblN0eWxlRnVuY3Rpb24gPSBsb2NTdHlsZUFyclsnc3R5bGVfZnVuY3Rpb25fanMnXTtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyPSBjb250cm9sbGVyO1xuICAgICAgICB0aGlzLmxvY1N0eWxlQXJyID0gbG9jU3R5bGVBcnI7XG4gICAgfVxuXG4gICAgZ2V0U3R5bGVGdW5jdGlvbihzdHlsZURhdGEpIHtcbiAgICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgICBzdHlsZUZ1bmN0aW9uLFxuICAgICAgICAgICAgaW1hZ2VTdHlsZSxcbiAgICAgICAgICAgIHN0cm9rZVN0eWxlLFxuICAgICAgICAgICAgZmlsbFN0eWxlLFxuICAgICAgICAgICAgdGV4dFN0eWxlLFxuICAgICAgICAgICAgdGV4dFN0eWxlT3V0bGluZSxcbiAgICAgICAgICAgIGJhY2tncm91bmRGaWxsLFxuICAgICAgICAgICAgYmFja2dyb3VuZFN0cm9rZTtcblxuICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgICAvLyBnZW5lcmFsXG4gICAgICAgIHN0cm9rZVN0eWxlID0gbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICBjb2xvcjogdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5zdHJva2Vjb2xvciwgc3R5bGVEYXRhLnN0cm9rZW9wYWNpdHkpLFxuICAgICAgICAgICAgd2lkdGg6IHBhcnNlSW50KHN0eWxlRGF0YS5zdHJva2V3aWR0aC52YWx1ZSwgMTApXG4gICAgICAgIH0pO1xuICAgICAgICBmaWxsU3R5bGUgPSBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICBjb2xvcjogdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5maWxsY29sb3IsIHN0eWxlRGF0YS5maWxsb3BhY2l0eSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gaW1hZ2VcbiAgICAgICAgc3dpdGNoIChzdHlsZURhdGEuc3R5bGV0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzcXVhcmUnOlxuICAgICAgICAgICAgICAgIGltYWdlU3R5bGUgPSBuZXcgb2wuc3R5bGUuUmVndWxhclNoYXBlKHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogZmlsbFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBwb2ludHM6IDQsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogc3R5bGVEYXRhLnJhZGl1cy52YWx1ZSB8fCAxMCxcbiAgICAgICAgICAgICAgICAgICAgYW5nbGU6IE1hdGguUEkgLyA0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzdGFyJzpcbiAgICAgICAgICAgICAgICBpbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLlJlZ3VsYXJTaGFwZSh7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzMTogc3R5bGVEYXRhLnJhZGl1cy52YWx1ZSB8fCAxMCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzMjogc3R5bGVEYXRhLnJhZGl1cy52YWx1ZSA/IE1hdGguZmxvb3Ioc3R5bGVEYXRhLnJhZGl1cy52YWx1ZSAqIDAuNSkgOiA0LFxuICAgICAgICAgICAgICAgICAgICBwb2ludHM6IDUsXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgICAgICBpbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLlJlZ3VsYXJTaGFwZSh7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiA0LFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgMTAsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czI6IDAsXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiBNYXRoLlBJIC8gNFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY3Jvc3MnOlxuICAgICAgICAgICAgICAgIGltYWdlU3R5bGUgPSBuZXcgb2wuc3R5bGUuUmVndWxhclNoYXBlKHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogZmlsbFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBwb2ludHM6IDQsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogc3R5bGVEYXRhLnJhZGl1cy52YWx1ZSB8fCAxMCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzMjogMCxcbiAgICAgICAgICAgICAgICAgICAgYW5nbGU6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RyaWFuZ2xlJzpcbiAgICAgICAgICAgICAgICBpbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLlJlZ3VsYXJTaGFwZSh7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiAzLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgMTAsXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBNYXRoLlBJIC8gNCxcbiAgICAgICAgICAgICAgICAgICAgYW5nbGU6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ29sX2ljb24nOiAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSAnY3VzdF9pY29uJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlRGF0YS5pY29uX3NyYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5JY29uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IFtzdHlsZURhdGEuaWNvbl9vZmZzZXRbMF0sc3R5bGVEYXRhLmljb25fb2Zmc2V0WzFdXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBwYXJzZUZsb2F0KHN0eWxlRGF0YS5pY29uX29wYWNpdHkudmFsdWUsIDEwKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHN0eWxlRGF0YS5pY29uX3NyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBbcGFyc2VJbnQoc3R5bGVEYXRhLmljb25fc2l6ZVswXSwgMTApLCBwYXJzZUludChzdHlsZURhdGEuaWNvbl9zaXplWzFdLCAxMCldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlOiBwYXJzZUZsb2F0KHN0eWxlRGF0YS5pY29uX3NjYWxlLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2N1c3RfaWNvbl9zdmcnOlxuICAgICAgICAgICAgICAgICAgICBpZihzdHlsZURhdGEuc3ZnU3JjICYmIHN0eWxlRGF0YS5pY29uX3NjYWxlICYmIHN0eWxlRGF0YS5pY29uX3NpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gKHN0eWxlRGF0YS5pY29uX3NpemVbMF0qc3R5bGVEYXRhLmljb25fc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhlaWdodCA9IChzdHlsZURhdGEuaWNvbl9zaXplWzFdKnN0eWxlRGF0YS5pY29uX3NjYWxlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0cm9rZXdpZHRoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZURhdGEuc3Ryb2tld2lkdGggJiYgc3R5bGVEYXRhLnN0cm9rZXdpZHRoLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tld2lkdGggPSBzdHlsZURhdGEuc3Ryb2tld2lkdGgudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggID0gd2lkdGgrKDIqc3Ryb2tld2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodCsoMipzdHJva2V3aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZURhdGEuZmlsbGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShzdHlsZURhdGEuZmlsbGNvbG9yLCBzdHlsZURhdGEuZmlsbG9wYWNpdHkudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Ryb2tld2lkdGggJiYgc3R5bGVEYXRhLnN0cm9rZWNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5zdHJva2Vjb2xvciwgc3R5bGVEYXRhLnN0cm9rZW9wYWNpdHkudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBzdHlsZURhdGEuc3Ryb2tld2lkdGgudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKDAuNSwgMC41KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHN0eWxlRGF0YS5pY29uX29wYWNpdHkudmFsdWUgJiYgKHN0eWxlRGF0YS5pY29uX29wYWNpdHkudmFsdWUgPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGN0eC5nbG9iYWxBbHBoYSA9IChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNyYyA9IHN0eWxlRGF0YS5zdmdTcmM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuekluZGV4ID0gMTAwOyAvL1Rlc3RcblxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBzdHJva2V3aWR0aCwgc3Ryb2tld2lkdGgsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLkljb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZzogY2FudmFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZ1NpemU6IFtjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHRdLyosXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogKHN0eWxlRGF0YS5pY29uX29wYWNpdHkudmFsdWUgLyAxMDApKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3Bob3RvJyA6XG4gICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5QaG90byh7XG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6IHN0eWxlRGF0YS5waG90b0tpbmQsXG4gICAgICAgICAgICAgICAgICAgIGNyb3A6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IHBhcnNlRmxvYXQoc3R5bGVEYXRhLmljb25fb3BhY2l0eS52YWx1ZSwgMTApIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHBhcnNlRmxvYXQoc3R5bGVEYXRhLnJhZGl1cy52YWx1ZSwxMCksXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3JjOiBzdHlsZURhdGEuaWNvbl9zcmNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3BvaW50JzpcbiAgICAgICAgICAgICAgICBpbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBzdHlsZURhdGEucmFkaXVzLnZhbHVlIHx8IDdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogc3R5bGVEYXRhLnJhZGl1cy52YWx1ZSB8fCA3XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBidWlsZCBmdW5jdGlvblxuICAgICAgICBzdHlsZUZ1bmN0aW9uID0gZnVuY3Rpb24gKGZlYXR1cmUsIHByb2plY3Rpb24sIGdldElkKSB7XG4gICAgICAgICAgICB2YXIgc3R5bGVzQXJyYXksXG4gICAgICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgICAgICAgYXJyb3dTaXplLFxuICAgICAgICAgICAgICAgIGFycm93U2l6ZVVuaXQsXG4gICAgICAgICAgICAgICAgc2VnbWVudExlbmd0aCxcbiAgICAgICAgICAgICAgICBhcnJvd3NfbWluem9vbSxcbiAgICAgICAgICAgICAgICBzdGFydF9waXhlbCxcbiAgICAgICAgICAgICAgICBlbmRfcGl4ZWw7XG5cbiAgICAgICAgICAgIGlmIChnZXRJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZURhdGEuaWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgYSBmZWF0dXJlLnN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghKGZlYXR1cmUgaW5zdGFuY2VvZiBvbC5GZWF0dXJlKSkge1xuICAgICAgICAgICAgICAgIHByb2plY3Rpb24gPSBmZWF0dXJlO1xuICAgICAgICAgICAgICAgIGZlYXR1cmUgPSB0aGlzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdHlsZXNBcnJheSA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoZmVhdHVyZSAmJiB0eXBlb2YgZmVhdHVyZS5nZXQgPT09ICdmdW5jdGlvbicgJiYgZmVhdHVyZS5nZXQoJ2xhYmVsJykpIHtcbiAgICAgICAgICAgICAgICBsYWJlbCA9IGZlYXR1cmUuZ2V0KCdsYWJlbCcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHlsZURhdGEubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBsYWJlbCA9IHN0eWxlRGF0YS5sYWJlbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGFiZWwgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBkZWZhdWx0Q29sb3IgPSBzZWxmLmNvbnRyb2xsZXIubWFwQ29udHJvbGxlci5kYXRhLmRlZmF1bHRfbGFiZWxfY29sb3I7XG4gICAgICAgICAgICAvLyBsYWJlbFxuICAgICAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlRGF0YS5sYWJlbF9vdXRsX2NvbG9yICYmIHN0eWxlRGF0YS5sYWJlbF9vdXRsX3dpZHRoLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRTdHlsZU91dGxpbmUgPSBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLmxhYmVsX291dGxfY29sb3IgfHwgZGVmYXVsdENvbG9yLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAxMDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHBhcnNlSW50KHN0eWxlRGF0YS5sYWJlbF9vdXRsX3dpZHRoLnZhbHVlLCAxMClcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHN0eWxlRGF0YS5sYWJlbF9vdXRsX2JveCA9PT0gXCIxXCIpe1xuICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRGaWxsID0gbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShzdHlsZURhdGEubGFiZWxfb3V0bF9jb2xvciB8fCBkZWZhdWx0Q29sb3IsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMTAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghc3R5bGVEYXRhLmxhYmVsX29mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZURhdGEubGFiZWxfb2Zmc2V0ID0gWzAsIDAsIFwicHhcIl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHN0eWxlRGF0YS5sYWJlbF9vdXRsX2JveCA9PT0gXCIxXCIpe1xuICAgICAgICAgICAgICAgICAgdGV4dFN0eWxlID0gbmV3IG9sLnN0eWxlLlRleHQoe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgZm9udDogKHN0eWxlRGF0YS5mb250X3dlaWdodCB8fCAnbm9ybWFsJykgKyAnICcgKyAoc3R5bGVEYXRhLmZvbnRfc3R5bGUgfHwgJ25vcm1hbCcpICsgJyAnICsgKHN0eWxlRGF0YS5mb250X3NpemUgfHwgJzEzJykgKyAncHggJyArIChzdHlsZURhdGEuZm9udF9mYW1pbHkgfHwgJ3NhbnMtc2VyaWYnKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gc2NhbGU6IHBhcnNlSW50KHN0eWxlRGF0YS5mb250X3NpemUgfHwgMCwgMTApIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogcGFyc2VJbnQoc3R5bGVEYXRhLmxhYmVsX29mZnNldFswXSB8fCAwLCAxMCksXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IHBhcnNlSW50KHN0eWxlRGF0YS5sYWJlbF9vZmZzZXRbMV0gfHwgMCwgMTApLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IHN0eWxlRGF0YS5sYWJlbF9hbGlnbl9ob3IsXG4gICAgICAgICAgICAgICAgICAgIHRleHRCYXNlbGluZTogc3R5bGVEYXRhLmxhYmVsX2FsaWduX3ZlcixcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLmZvbnRfY29sb3IgfHwgZGVmYXVsdENvbG9yLCBzdHlsZURhdGEuZm9udF9vcGFjaXR5KVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEZpbGw6IGJhY2tncm91bmRGaWxsLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kU3Ryb2tlOiB0ZXh0U3R5bGVPdXRsaW5lXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgIHRleHRTdHlsZSA9IG5ldyBvbC5zdHlsZS5UZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogbGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIGZvbnQ6IChzdHlsZURhdGEuZm9udF93ZWlnaHQgfHwgJ25vcm1hbCcpICsgJyAnICsgKHN0eWxlRGF0YS5mb250X3N0eWxlIHx8ICdub3JtYWwnKSArICcgJyArIChzdHlsZURhdGEuZm9udF9zaXplIHx8ICcxMycpICsgJ3B4ICcgKyAoc3R5bGVEYXRhLmZvbnRfZmFtaWx5IHx8ICdzYW5zLXNlcmlmJyksXG4gICAgICAgICAgICAgICAgICAgIC8vIHNjYWxlOiBwYXJzZUludChzdHlsZURhdGEuZm9udF9zaXplIHx8IDAsIDEwKSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IHBhcnNlSW50KHN0eWxlRGF0YS5sYWJlbF9vZmZzZXRbMF0gfHwgMCwgMTApLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiBwYXJzZUludChzdHlsZURhdGEubGFiZWxfb2Zmc2V0WzFdIHx8IDAsIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiBzdHlsZURhdGEubGFiZWxfYWxpZ25faG9yLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0QmFzZWxpbmU6IHN0eWxlRGF0YS5sYWJlbF9hbGlnbl92ZXIsXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5mb250X2NvbG9yIHx8IGRlZmF1bHRDb2xvciwgc3R5bGVEYXRhLmZvbnRfb3BhY2l0eSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogdGV4dFN0eWxlT3V0bGluZVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBzdHlsZS1vYmplY3RcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyBjaGVjayBiZWNhdXNlIHRleHRTdHlsZSBpcyBhIHZhciBhY2Nlc3NpYmxlIGZyb20gY2xvc3VyZSBhbmQgd2lsbCBiZSBzZXQgZXZlbiBpZiBubyBsYWJlbCBpcyBzZXRcbiAgICAgICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgICAgIGxldCB6SW5kZXg7XG4gICAgICAgICAgICAgICAgaWYoZmVhdHVyZSAmJiBmZWF0dXJlLmdldCAmJiB0eXBlb2YgZmVhdHVyZS5nZXQgPT09IFwiZnVuY3Rpb25cIiAmJiBmZWF0dXJlLmdldCgnekluZGV4Jykpe1xuICAgICAgICAgICAgICAgIHpJbmRleCA9IGZlYXR1cmUuZ2V0KCd6SW5kZXgnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0eWxlc0FycmF5LnB1c2goXG4gICAgICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogaW1hZ2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IHpJbmRleFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0eWxlc0FycmF5LnB1c2goXG4gICAgICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogaW1hZ2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGVcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vIGFkZCBsaW5lLWFycm93c1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHN0eWxlRGF0YS5saW5lX2Fycm93c1xuICAgICAgICAgICAgICAgICYmIGZlYXR1cmVcbiAgICAgICAgICAgICAgICAmJiAodHlwZW9mIGZlYXR1cmUuZ2V0R2VvbWV0cnkgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgJiYgIShmZWF0dXJlLmdldEdlb21ldHJ5KCkgaW5zdGFuY2VvZiBvbC5nZW9tLlBvaW50KVxuICAgICAgICAgICAgICAgICYmIHR5cGVvZiBmZWF0dXJlLmdldEdlb21ldHJ5KCkuZm9yRWFjaFNlZ21lbnQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGFycm93U2l6ZSA9IChzdHlsZURhdGEubGluZV9hcnJvd3NfcmFkaXVzKSA/IChwYXJzZUludChzdHlsZURhdGEubGluZV9hcnJvd3NfcmFkaXVzLnZhbHVlLCAxMCkgKiAyKSA6IDA7XG4gICAgICAgICAgICAgICAgYXJyb3dTaXplVW5pdCA9IGFycm93U2l6ZSArIHN0eWxlRGF0YS5saW5lX2Fycm93c19yYWRpdXMudW5pdDtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLmdldEdlb21ldHJ5KCkuZm9yRWFjaFNlZ21lbnQoZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBtaW56b29tIGlzIDAgKHVubGltaXRlZCksIGhpZGUgYXJyb3dzIGlmIHRoZXkgYXJlIGJpZ2dlciB0aGFuIHRoZSBzZWdtZW50XG4gICAgICAgICAgICAgICAgICAgIGFycm93c19taW56b29tID0gcGFyc2VJbnQoc3R5bGVEYXRhLmxpbmVfYXJyb3dzX21pbnpvb20sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRfcGl4ZWwgPSBzZWxmLmNvbnRyb2xsZXIubWFwQ29udHJvbGxlci5tYXAuZ2V0UGl4ZWxGcm9tQ29vcmRpbmF0ZShzdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIGVuZF9waXhlbCA9IHNlbGYuY29udHJvbGxlci5tYXBDb250cm9sbGVyLm1hcC5nZXRQaXhlbEZyb21Db29yZGluYXRlKGVuZCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV1Y2xpZC1kaXN0YW5jZSBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmRcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudExlbmd0aCA9IE1hdGguc3FydChNYXRoLnBvdyhlbmRfcGl4ZWxbMV0gLSBzdGFydF9waXhlbFsxXSwgMikgKyBNYXRoLnBvdyhlbmRfcGl4ZWxbMF0gLSBzdGFydF9waXhlbFswXSwgMikpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIChhcnJvd3NfbWluem9vbSA8IDAgJiYgYXJyb3dTaXplICsgcGFyc2VJbnQoc3R5bGVEYXRhLnN0cm9rZXdpZHRoLnZhbHVlLCAxMCkgPCBzZWdtZW50TGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgKGFycm93c19taW56b29tID49IDAgJiYgc2VsZi5jb250cm9sbGVyLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRab29tKCkgPj0gYXJyb3dzX21pbnpvb20pXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yd2FyZCBhcnJvd3NcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlc0FycmF5LnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IG5ldyBvbC5nZW9tLlBvaW50KGVuZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG5ldyBvbC5zdHlsZS5UZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwi4ZCzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiBhcnJvd1NpemVVbml0ICsgXCIgc2Fucy1zZXJpZlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlV2l0aFZpZXc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogLU1hdGguYXRhbjIoKGVuZFsxXSAtIHN0YXJ0WzFdKSwgKGVuZFswXSAtIHN0YXJ0WzBdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJhY2t3YXJkIGFycm93cyAoaWYgd2FudGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlRGF0YS5saW5lX2Fycm93c19iYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzQXJyYXkucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBuZXcgb2wuZ2VvbS5Qb2ludChzdGFydCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgb2wuc3R5bGUuVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCLhkLNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiBhcnJvd1NpemVVbml0ICsgXCIgc2Fucy1zZXJpZlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogZmlsbFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZVdpdGhWaWV3OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAtTWF0aC5hdGFuMigoc3RhcnRbMV0gLSBlbmRbMV0pLCAoc3RhcnRbMF0gLSBlbmRbMF0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHN0eWxlc0FycmF5O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uO1xuICAgIH0gLy8gZW5kIG9mIFwiZ2V0U3R5bGVGdW5jdGlvbigpXCJcblxuXG4gICAgZ2V0U3R5bGVFZGl0b3JDb25maWcoc3R5bGVEYXRhKSB7XG4gICAgICAgIHZhciBlZGl0b3JDb25maWc7XG5cbiAgICAgICAgLy8gY3JlYXRlIGVkaXRvci1jb25maWdcbiAgICAgICAgZWRpdG9yQ29uZmlnID0ge307XG4gICAgICAgIGVkaXRvckNvbmZpZy5jb2xsZWN0ID0gc3R5bGVEYXRhLmVkaXRvcl9jb2xsZWN0IHx8IHVuZGVmaW5lZDtcbiAgICAgICAgZWRpdG9yQ29uZmlnLmljb25TcmMgPSBzdHlsZURhdGEuZWRpdG9yX2ljb24gfHwgdW5kZWZpbmVkO1xuICAgICAgICBlZGl0b3JDb25maWcudmFycyA9IHN0eWxlRGF0YS5lZGl0b3JfdmFycyB8fCB1bmRlZmluZWQ7XG5cbiAgICAgICAgZWRpdG9yQ29uZmlnLnNvcnQgPSBzdHlsZURhdGEuZWRpdG9yX3NvcnQgfHwgZmFsc2U7XG4gICAgICAgIGlmIChlZGl0b3JDb25maWcuc29ydCkge1xuICAgICAgICAgICAgZWRpdG9yQ29uZmlnLnNvcnQgPSBwYXJzZUludChlZGl0b3JDb25maWcuc29ydCwgMTApIHx8IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVkaXRvckNvbmZpZztcbiAgICB9Ly8gZW5kIG9mIFwiZ2V0U3R5bGVFZGl0b3JDb25maWcoKVwiXG4gICAgXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbG9jYXRpb25zdHlsZS5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29uZmlnID0gdGhpcy5jNGcubWFwcy5jb25maWcgfHwge307XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogb3NtU291cmNlRGVmaW5pdGlvbnNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbmZpZy5vc20gPSAkLmV4dGVuZChjNGcubWFwcy5jb25maWcub3NtLCB7XG5cbiAgICBDeWNsZU1hcDoge1xuICAgICAgYXR0cmlidXRpb25zOiAnU3R5bGUgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHA6Ly93d3cub3BlbmN5Y2xlbWFwLm9yZy9cIj5PcGVuQ3ljbGVNYXA8L2E+JyArICcgJyArXG4gICAgICAgIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTksXG4gICAgICB1cmw6ICdodHRwczovL3thLWN9LnRpbGUub3BlbmN5Y2xlbWFwLm9yZy9jeWNsZS97en0ve3h9L3t5fS5wbmcnXG4gICAgfSxcblxuICAgIEdlcm1hbjoge1xuICAgICAgYXR0cmlidXRpb25zOiAnU3R5bGUgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHA6Ly93d3cub3BlbnN0cmVldG1hcC5kZS9nZXJtYW5zdHlsZS5odG1sXCI+b3BlbnN0cmVldG1hcC5kZTwvYT4nICsgJyAnICtcbiAgICAgICAgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOSxcbiAgICAgIHVybDogJ2h0dHBzOi8ve2EtY30udGlsZS5vcGVuc3RyZWV0bWFwLmRlL3RpbGVzL29zbWRlL3t6fS97eH0ve3l9LnBuZydcbiAgICB9LFxuXG4gICAgR2VybWFuVHJhbnNwb3J0OiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6ICdTdHlsZSBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL3d3dy5tZW1vbWFwcy5kZVwiPk1lbW9tYXBzPC9hPicgKyAnICcgK1xuICAgICAgICBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDE5LFxuICAgICAgdXJsOiAnaHR0cHM6Ly90aWxlLm1lbW9tYXBzLmRlL3RpbGVnZW4ve3p9L3t4fS97eX0ucG5nJ1xuICAgIH0sXG5cbiAgICBMYW5kc2NhcGVNYXA6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogJ1N0eWxlIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vd3d3Lm9wZW5jeWNsZW1hcC5vcmcvXCI+T3BlbkN5Y2xlTWFwPC9hPicgKyAnICcgK1xuICAgICAgICBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDE5LFxuICAgICAgdXJsOiAnaHR0cHM6Ly97YS1jfS50aWxlLm9wZW5jeWNsZW1hcC5vcmcvbGFuZHNjYXBlL3t6fS97eH0ve3l9LnBuZydcbiAgICB9LFxuXG4gICAgTWFwbmlrOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6IG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgfSxcblxuICAgIE5PTkU6ICcnIC8vIGxhc3QgbGluZVxuICB9KTsgLy8gZW5kIG9mIFwib3NtU291cmNlRGVmaW5pdGlvbnNcIiAtLS1cblxuICAvKipcbiAgICogc3RhbWVuU291cmNlRGVmaW5pdGlvbnNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbmZpZy5zdGFtZW4gPSAkLmV4dGVuZChjNGcubWFwcy5jb25maWcuc3RhbWVuLCB7XG5cbiAgICBUb25lcjoge1xuICAgICAgYXR0cmlidXRpb25zOiBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgbGF5ZXI6ICd0b25lcicsXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTgsXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgfSxcblxuICAgIFRvbmVyTGFiZWxzOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6IG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBsYXllcjogJ3RvbmVyLWxhYmVscycsXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTgsXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgfSxcblxuICAgIFRvbmVyTGluZXM6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIGxheWVyOiAndG9uZXItbGluZXMnLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDE4LFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH0sXG5cbiAgICBUZXJyYWluOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6IG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBsYXllcjogJ3RlcnJhaW4nLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDE4LFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH0sXG5cbiAgICBXYXRlcmNvbG9yOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6IG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBsYXllcjogJ3dhdGVyY29sb3InLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDE4LFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH0sXG5cbiAgICBOT05FOiAnJ1xuICB9KTtcblxuICAvKipcbiAgICogbWFwcXVlc3RTb3VyY2VEZWZpbml0aW9uc1xuICAgKi9cbiAgYzRnLm1hcHMuY29uZmlnLm1hcHF1ZXN0ID0gJC5leHRlbmQoYzRnLm1hcHMuY29uZmlnLm1hcHF1ZXN0LCB7XG5cbiAgICBNYXBRdWVzdE9wZW46IHtcbiAgICAgIGxheWVyOiAnb3NtJ1xuICAgIH0sXG5cbiAgICBNYXBRdWVzdEh5Yjoge1xuICAgICAgbGF5ZXI6ICdoeWInXG4gICAgfSxcblxuICAgIE1hcFF1ZXN0U2F0OiB7XG4gICAgICBsYXllcjogJ3NhdCdcbiAgICB9LFxuXG4gICAgTk9ORTogJydcbiAgfSk7XG5cbiAgLyoqXG4gICAqIG1hcGJveFNvdXJjZURlZmluaXRpb25zXG4gICAqL1xuICBjNGcubWFwcy5jb25maWcubWFwYm94ID0ge1xuXG4gICAgTWFwYm94OiB7XG4gICAgICB0aWxlU2l6ZTogWzUxMiwgNTEyXSxcbiAgICAgIGF0dHJpYnV0aW9uczogJ8KpIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5tYXBib3guY29tL2Fib3V0L21hcHMvXCI+TWFwYm94PC9hPicgKyAnICcgK1xuICAgICAgICBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDIyLFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH0sXG5cbiAgICBNYXBib3hDbGFzc2ljOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6ICfCqSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cubWFwYm94LmNvbS9hYm91dC9tYXBzL1wiPk1hcGJveDwvYT4nICsgJyAnICtcbiAgICAgICAgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAyMixcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9XG4gIH07XG5cbiAgICAvKipcbiAgICAgKiBrbG9rYW5Tb3VyY2VEZWZpbml0aW9uc1xuICAgICAqL1xuICAgIC8vVG9EbyBub3QgcmVhZHlcbiAgICBjNGcubWFwcy5jb25maWcua2xva2FuID0ge1xuXG4gICAgICAgIE9wZW5NYXBUaWxlczoge1xuICAgICAgICAgICAgZm9ybWF0OiBuZXcgb2wuZm9ybWF0Lk1WVCgpLFxuICAgICAgICAgICAgdGlsZUdyaWQ6ICBvbC50aWxlZ3JpZC5jcmVhdGVYWVooe3RpbGVTaXplOiA1MTIsIG1heFpvb206IDIyfSksIC8vVG9EbyBtYXhab29tIGZyb20gY29uZmlndXJhdGlvblxuICAgICAgICAgICAgdGlsZVBpeGVsUmF0aW86IDgsXG4gICAgICAgICAgICBhdHRyaWJ1dGlvbnM6ICfCqSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9vcGVubWFwdGlsZXMub3JnL1wiPk9wZW5NYXBUaWxlczwvYT4nICsgJyAnICtcbiAgICAgICAgICAgIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICAgICAgICBtaW5ab29tOiAwLFxuICAgICAgICAgICAgbWF4Wm9vbTogMjIsXG4gICAgICAgICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cydcbiAgICAgICAgfSxcblxuICAgICAgICBUaWxlSG9zdGluZzoge1xuICAgICAgICAgICAgZm9ybWF0OiBuZXcgb2wuZm9ybWF0Lk1WVCgpLFxuICAgICAgICAgICAgdGlsZUdyaWQ6ICBvbC50aWxlZ3JpZC5jcmVhdGVYWVooe3RpbGVTaXplOiA1MTIsIG1heFpvb206IDIyfSksIC8vVG9EbyBtYXhab29tIGZyb20gY29uZmlndXJhdGlvblxuICAgICAgICAgICAgdGlsZVBpeGVsUmF0aW86IDgsXG4gICAgICAgICAgICBhdHRyaWJ1dGlvbnM6ICfCqSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly90aWxlaG9zdGluZy5jb20vXCI+VGlsZUhvc3Rpbmc8L2E+JyArICcgJyArXG4gICAgICAgICAgICBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgICAgICAgbWluWm9vbTogMCxcbiAgICAgICAgICAgIG1heFpvb206IDIyLFxuICAgICAgICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIGhlcmVTb3VyY2VEZWZpbml0aW9uc1xuICAgICAqL1xuICAgIGM0Zy5tYXBzLmNvbmZpZy5oZXJlID0ge1xuXG4gICAgICAgIEhFUkU6IHtcbiAgICAgICAgICAgIHRpbGVTaXplOiBbNTEyLCA1MTJdLFxuICAgICAgICAgICAgYXR0cmlidXRpb25zOiAnTWFwIFRpbGVzIMKpIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2RldmVsb3Blci5oZXJlLmNvbVwiPkhFUkU8L2E+JysgJyAnICtcbiAgICAgICAgICAgICAgICBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgICAgICAgbWluWm9vbTogMCxcbiAgICAgICAgICAgIG1heFpvb206IDIyLFxuICAgICAgICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogdGh1bmRlcmZvcmVzdFNvdXJjZURlZmluaXRpb25zXG4gICAgICovXG4gICAgYzRnLm1hcHMuY29uZmlnLnRodW5kZXJmb3Jlc3QgPSB7XG5cbiAgICAgICAgVGh1bmRlcmZvcmVzdDoge1xuICAgICAgICAgICAgdGlsZVNpemU6IFs1MTIsIDUxMl0sXG4gICAgICAgICAgICBhdHRyaWJ1dGlvbnM6ICdNYXAgVGlsZXMgwqkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LnRodW5kZXJmb3Jlc3QuY29tL1wiPlRodW5kZXJmb3Jlc3Q8L2E+JyArICcgJyArXG4gICAgICAgICAgICAgICAgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgICAgICAgIG1pblpvb206IDAsXG4gICAgICAgICAgICBtYXhab29tOiAxOSxcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICAgICAgfVxuXG4gICAgfTtcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgY29uZmlnID0gdGhpcy5jNGcubWFwcy5jb25maWc7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb25maWcuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnN0YW50ID0gdGhpcy5jNGcubWFwcy5jb25zdGFudCB8fCB7fTtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBMYW5ndWFnZSBjb25zdGFudHMgKGVuKVxuICAgKi9cbiAgYzRnLm1hcHMuY29uc3RhbnQuaTE4biA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnN0YW50LmkxOG4sIHtcblxuICAgIExBTkc6ICdkZScsXG5cbiAgICBOQU1FOiAnTmFtZScsXG4gICAgSElERTogJ1p1a2xhcHBlbicsXG4gICAgQ0xPU0U6ICdTY2hsaWXDn2VuJyxcbiAgICBQT0lOVDogJ1BPSScsXG4gICAgRlJFRUhBTkQ6ICdGcmVpaGFuZCcsXG4gICAgTElORTogJ0xpbmllJyxcbiAgICBQT0xZR09OOiAnRmzDpGNoZScsXG4gICAgQ0lSQ0xFOiAnUmFkaXVzJyxcbiAgICBQRVJJTUVURVI6ICdVbWZhbmcnLFxuICAgIExFTkdUSDogJ0zDpG5nZScsXG4gICAgU1VSRkFDRUFSRUE6ICdGbMOkY2hlbmluaGFsdCcsXG4gICAgUkFESVVTOiAnUmFkaXVzJyxcbiAgICBSRUZSRVNIOiAnQWt0dWFsaXNpZXJlbicsXG4gICAgQ09QWV9UT19DTElQQk9BUkQ6ICdJbiBad2lzY2hlbmFibGFnZSBrb3BpZXJlbicsXG5cbiAgICBDVFJMX1pPT01fSU46ICdWZXJncsO2w59lcm4nLFxuICAgIENUUkxfWk9PTV9PVVQ6ICdWZXJrbGVpbmVybicsXG4gICAgQ1RSTF9aT09NX0VYVDogJ01heGltYWwgdmVya2xlaW5lcm4nLFxuICAgIENUUkxfWk9PTV9IT01FOiAnWnVyIHVyc3Byw7xuZ2xpY2hlbiBQb3NpdGlvbicsXG4gICAgQ1RSTF9aT09NX1BPUzogJ1p1bSBha3R1ZWxsZW4gU3RhbmRvcnQnLFxuICAgIENUUkxfWk9PTV9TTElERVI6ICdab29tIFNsaWRlcicsXG4gICAgQ1RSTF9SRVNFVF9ST1RBVElPTjogJ1JvdGF0aW9uICh0b3VjaCwgYWx0K21vdXNlKSB6dXLDvGNrc2V0emVuJyxcbiAgICBDVFJMX1BPUlRTSURFOiAnUG9ydHNpZGUgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX1JPVVRFUjogJ1JvdXRlciBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfRURJVE9SOiAnRWRpdG9yIGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9NRUFTVVJFVE9PTFM6ICdNZXNzd2Vya3pldWdlIGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9JTkZPUEFHRTogJ0luZm9zZWl0ZSBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfQURESVRJT05BTFBBTkVMOiAnUGFuZWwgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX0FDQ09VTlQ6ICdBY2NvdW50IGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9aT09NTEVWRUw6ICdab29tJyxcbiAgICBDVFJMX01PVVNFQ09PUkRTOiAnTG9uL0xhdCcsXG4gICAgQ1RSTF9HRU9TRUFSQ0g6ICdTdWNoZSBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfU1RBUlRfU0VBUkNIOiAnU3VjaGUgc3RhcnRlbicsXG4gICAgQ1RSTF9PVkVSVklFV01BUDogJ8OcYmVyc2ljaHRza2FydGUgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX0dFT0JPT0tNQVJLUzogJ0Zhdm9yaXRlbiB2ZXJ3YWx0ZW4nLFxuICAgIENUUkxfU0lERUJPQVJEOiAnU2lkZWJvYXJkIGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9TVEFSQk9BUkQ6ICdTdGFyYm9hcmQgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX0FUVFJJQlVUSU9OOiAnQXR0cmlidXRpb24gYW56ZWlnZW4nLFxuICAgIENUUkxfR1JJRDogJ0dpdHRlciBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfUEVSTUFMSU5LOiAnUGVybWFsaW5rIGdlbmVyaWVyZW4nLFxuICAgIENUUkxfRlVMTFNDUkVFTjogJ1ZvbGxiaWxkbW9kdXMgZWluLS9hdXNzY2hhbHRlbicsXG4gICAgQ1RSTF9QUklOVDogJ0thcnRlIGV4cG9ydGllcmVuJyxcblxuICAgIEVESVRPUjogJ0VkaXRvcicsXG4gICAgRURJVE9SX0VOQUJMRV9JTlNUQU5UX01FQVNVUkU6ICdNZXNzZW4gd8OkaHJlbmQgZGVzIFplaWNobmVucycsXG4gICAgRURJVE9SX0VOQUJMRV9GUkVFSEFORF9EUkFXOiAnRnJlaWhhbmQgemVpY2huZW4nLFxuICAgIEVESVRPUl9GRUFUVVJFX0FQUExZOiAnRWRpdGllcmVuIGJlZW5kZW4nLFxuICAgIEVESVRPUl9GRUFUVVJFX0RFTEVURTogJ0VsZW1lbnQgbMO2c2NoZW4nLFxuICAgIEVESVRPUl9GRUFUVVJFX01PRElGWTogJ0VsZW1lbnQgZWRpdGllcmVuIC8gdmVyc2NoaWViZW4nLFxuICAgIEVESVRPUl9TRUxFQ1RfSU5GTzogJ1p1ciBBdXN3YWhsIGVpbiBFbGVtZW50IGF1ZiBkZXIgS2FydGUgYW5rbGlja2VuLicsXG4gICAgRURJVE9SX1NFTEVDVF9JTkZPX0FERElUSU9OQUw6ICdbU3RyZ10gKyBbS2xpY2tdIGbDvHIgTWVocmZhY2hhdXN3YWhsIDxicj5bU2hpZnRdIGhhbHRlbiBmw7xyIEF1c3dhaGxib3gnLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfU0VMRUNUOiAnQXVzd2FobCBNb2R1cycsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX1BPSU5UOiAnS2FydGVuZWxlbWVudGUnLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19GUkVFSEFORDogJ0ZyZWloYW5kd2Vya3pldWdlJyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfTElORVNUUklORzogJ1N0cmVja2Vud2Vya3pldWdlJyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfUE9MWUdPTjogJ0Zsw6RjaGVud2Vya3pldWdlJyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfQ0lSQ0xFOiAnS3JlaXN3ZXJremV1Z2UnLFxuXG4gICAgUE9QVVBfUk9VVEVfRlJPTTogJ1JvdXRlIHZvbiBoaWVyJyxcbiAgICBQT1BVUF9ST1VURV9UTzogJ1JvdXRlIGhpZXJoaW4nLFxuXG4gICAgU1RBUkJPQVJEOiAnU3RhcmJvYXJkJyxcbiAgICBTVEFSQk9BUkRfQkFTRUxBWUVSOiAnQmFzaXNrYXJ0ZW4nLFxuICAgIFNUQVJCT0FSRF9MQVlFUjogJ0ViZW5lbicsXG4gICAgU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9CQVNFTEFZRVJTV0lUQ0hFUjogJ0Jhc2lza2FydGVuJyxcbiAgICBTVEFSQk9BUkRfVklFV19UUklHR0VSX0xBWUVSU1dJVENIRVI6ICdLYXJ0ZW5lbGVtZW50ZScsXG5cbiAgICBTSURFQk9BUkQ6ICdTaWRlYm9hcmQnLFxuXG5cblxuICAgIE1FQVNVUkVUT09MUzogJ01lc3N3ZXJremV1Z2UnLFxuICAgIE1FQVNVUkVUT09MU19JTkZPOiAnV8OkaGxlbiBTaWUgd2VpdGVyIHVudGVuIGVpbmVuIE1lc3N0eXAgYXVzIHVuZCBzdGFydGVuIFNpZSBkaWUgTWVzc3VuZyBkdXJjaCBkYXMgS2xpY2tlbiBhdWYgZGVyIEthcnRlLicsXG4gICAgTUVBU1VSRVRPT0xTX0lORk9fQURESVRJT05BTDogJyhFaW56ZWxuZSBNZXNzdW5nZW4ga8O2bm5lbiBtaXQgZWluZW0gRG9wcGVsa2xpY2sgYmVlbmRldCB3ZXJkZW4uKScsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9TRUxFQ1Q6ICdBdXN3YWhsIE1vZHVzJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfTElORVNUUklORzogJ1N0cmVja2VuIG1lc3NlbicsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX1BPTFlHT046ICdGbMOkY2hlbiBtZXNzZW4nLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19DSVJDTEU6ICdSYWRpdXMgbWVzc2VuJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfRlJFRUhBTkQ6ICdGcmVpaGFuZCBtZXNzZW4nLFxuXG4gICAgR0VPQk9PS01BUktTX1BMQUNFSE9MREVSOiAnTmV1ZSBCZXplaWNobnVuZycsXG5cbiAgICBJTkZPUEFHRTogJ0luZm9ybWF0aW9uZW4nLFxuICAgIEFERElUSU9OQUxQQU5FTDogJ1BhbmVsJyxcbiAgICBBRERJVElPTkFMUEFORUxfVklFV19UUklHR0VSOiAnUGFuZWwgYW56ZWlnZW4nLFxuICAgIEFDQ09VTlQ6ICdBY2NvdW50JyxcbiAgICBBQ0NPVU5UX1ZJRVdfVFJJR0dFUjogJ0FjY291bnQgYW56ZWlnZW4nLFxuXG4gICAgU0VBUkNIX05PVF9GT1VORDogJ0RpZSBMb2thdGlvbiBrb25udGUgbmljaHQgZ2VmdW5kZW4gd2VyZGVuLiBCaXR0ZSB2ZXJzdWNoZW4gU2llIGVpbmUgYW5kZXJlIEVpbmdhYmUuJyxcblxuICAgIE5PTkU6ICcnIC8vIGxhc3QgbGluZVxuICB9KTsgLy8gZW5kIG9mIFwibGFuZ3VhZ2UgY29uc3RhbnRzXCIgLS0tXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIGxhbmdDb25zdGFudHNHZXJtYW4gPSB0aGlzLmM0Zy5tYXBzLmNvbnN0YW50LmkxOG47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb25zdGFudCA9IHRoaXMuYzRnLm1hcHMuY29uc3RhbnQgfHwge307XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogTGFuZ3VhZ2UgY29uc3RhbnRzIChlbilcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnN0YW50LmkxOG4gPSAkLmV4dGVuZChjNGcubWFwcy5jb25zdGFudC5pMThuLCB7XG5cbiAgICBMQU5HOiAnZW4nLFxuXG4gICAgTkFNRTogJ05hbWUnLFxuICAgIEhJREU6ICdIaWRlJyxcbiAgICBDTE9TRTogJ0Nsb3NlJyxcbiAgICBQT0lOVDogJ1BPSScsXG4gICAgRlJFRUhBTkQ6ICdmcmVlaGFuZCcsXG4gICAgTElORTogJ0xpbmUnLFxuICAgIFBPTFlHT046ICdBcmVhJyxcbiAgICBDSVJDTEU6ICdSYWRpdXMnLFxuICAgIFBFUklNRVRFUjogJ1BlcmltZXRlcicsXG4gICAgTEVOR1RIOiAnTGVuZ3RoJyxcbiAgICBTVVJGQUNFQVJFQTogJ1N1cmZhY2UgYXJlYScsXG4gICAgUkFESVVTOiAnUmFkaXVzJyxcbiAgICBSRUZSRVNIOiAnUmVmcmVzaCcsXG4gICAgQ09QWV9UT19DTElQQk9BUkQ6ICdDb3B5IHRvIGNsaXBib2FyZCcsXG5cbiAgICBDVFJMX1pPT01fSU46ICdab29tIGluJyxcbiAgICBDVFJMX1pPT01fT1VUOiAnWm9vbSBvdXQnLFxuICAgIENUUkxfWk9PTV9FWFQ6ICdGaXQgdG8gZXh0ZW50JyxcbiAgICBDVFJMX1pPT01fSE9NRTogJ2p1bXAgdG8gaW5pdGlhbCBwb3NpdGlvbicsXG4gICAgQ1RSTF9aT09NX1BPUzogJ2p1bXAgdG8gYnJvd3Nlci9kZXZpY2UgcG9zaXRpb24nLFxuICAgIENUUkxfWk9PTV9TTElERVI6ICdab29tIHNsaWRlcicsXG4gICAgQ1RSTF9SRVNFVF9ST1RBVElPTjogJ1Jlc2V0IHJvdGF0aW9uICh0b3VjaCwgYWx0K21vdXNlKScsXG4gICAgQ1RSTF9QT1JUU0lERTogJ1RvZ2dsZSBwb3J0c2lkZScsXG4gICAgQ1RSTF9ST1VURVI6ICdUb2dnbGUgcm91dGVyJyxcbiAgICBDVFJMX0VESVRPUjogJ1RvZ2dsZSBlZGl0b3InLFxuICAgIENUUkxfTUVBU1VSRVRPT0xTOiAnVG9nZ2xlIG1lYXN1cmV0b29scycsXG4gICAgQ1RSTF9JTkZPUEFHRTogJ1RvZ2dsZSBpbmZvcGFnZScsXG4gICAgQ1RSTF9BRERJVElPTkFMUEFORUw6ICdUb2dnbGUgcGFuZWwnLFxuICAgIENUUkxfQUNDT1VOVDogJ1RvZ2dsZSBhY2NvdW50JyxcbiAgICBDVFJMX1pPT01MRVZFTDogJ1pvb20nLFxuICAgIENUUkxfTU9VU0VDT09SRFM6ICdMb24vTGF0JyxcbiAgICBDVFJMX0dFT1NFQVJDSDogJ1RvZ2dsZSBnZW9zZWFyY2gnLFxuICAgIENUUkxfU1RBUlRfU0VBUkNIOiAnc3RhcnQgc2VhcmNoJyxcbiAgICBDVFJMX09WRVJWSUVXTUFQOiAnVG9nZ2xlIG92ZXJ2aWV3bWFwJyxcbiAgICBDVFJMX0dFT0JPT0tNQVJLUzogJ01hbmFnZSBmYXZvcml0ZXMnLFxuICAgIENUUkxfU0lERUJPQVJEOiAnVG9nZ2xlIHNpZGVib2FyZCcsXG4gICAgQ1RSTF9TVEFSQk9BUkQ6ICdUb2dnbGUgc3RhcmJvYXJkJyxcbiAgICBDVFJMX0FUVFJJQlVUSU9OOiAnU2hvdyBhdHRyaWJ1dGlvbicsXG4gICAgQ1RSTF9HUklEOiAnVG9nZ2xlIGdyaWQnLFxuICAgIENUUkxfUEVSTUFMSU5LOiAnR2VuZXJhdGUgUGVybWFsaW5rJyxcbiAgICBDVFJMX0ZVTExTQ1JFRU46ICdUb2dnbGUgZnVsbHNjcmVlbi1tb2RlJyxcbiAgICBDVFJMX1BSSU5UOiAnRXhwb3J0IG1hcCcsXG5cbiAgICBFRElUT1I6ICdFZGl0b3InLFxuICAgIEVESVRPUl9FTkFCTEVfSU5TVEFOVF9NRUFTVVJFOiAnTWVhc3VyZSB3aGlsZSBkcmF3aW5nJyxcbiAgICBFRElUT1JfRU5BQkxFX0ZSRUVIQU5EX0RSQVc6ICdGcmVlaGFuZCBkcmF3JyxcbiAgICBFRElUT1JfRkVBVFVSRV9BUFBMWTogJ0VuZCBtb2RpZmljYXRpb24nLFxuICAgIEVESVRPUl9GRUFUVVJFX0RFTEVURTogJ0RlbGV0ZSBmZWF0dXJlJyxcbiAgICBFRElUT1JfRkVBVFVSRV9NT0RJRlk6ICdNb2RpZnkgZmVhdHVyZScsXG4gICAgRURJVE9SX1NFTEVDVF9JTkZPOiAnQ2xpY2sgYW4gZWxlbWVudCBvbiB0aGUgbWFwIHRvIHNlbGVjdCBpdC4nLFxuICAgIEVESVRPUl9TRUxFQ1RfSU5GT19BRERJVElPTkFMOiAnW2N0cmxdICsgW2NsaWNrXSBmb3IgbXVsdGlzZWxlY3QgPGJyPltzaGlmdF0gZm9yIGJveHNlbGVjdCcsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9TRUxFQ1Q6ICdTZWxlY3QtbW9kZScsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX1BPSU5UOiAnQWRkIFBPSXMnLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19GUkVFSEFORDogJ0RyYXcgZnJlZWhhbmQnLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19MSU5FU1RSSU5HOiAnQWRkIHRyYWNrcycsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX1BPTFlHT046ICdBZGQgYXJlYXMnLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19DSVJDTEU6ICdBZGQgY2lyY2xlcycsXG5cbiAgICBTVEFSQk9BUkQ6ICdTdGFyYm9hcmQnLFxuICAgIFNUQVJCT0FSRF9CQVNFTEFZRVI6ICdCYXNlbGF5ZXInLFxuICAgIFNUQVJCT0FSRF9MQVlFUjogJ0xheWVyJyxcbiAgICBTVEFSQk9BUkRfVklFV19UUklHR0VSX0JBU0VMQVlFUlNXSVRDSEVSOiAnQmFzZWxheWVyc3dpdGNoZXInLFxuICAgIFNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUjogJ0xheWVyc3dpdGNoZXInLFxuXG4gICAgTUVBU1VSRVRPT0xTOiAnTWVhc3VyZXRvb2xzJyxcbiAgICBNRUFTVVJFVE9PTFNfSU5GTzogJ1NlbGVjdCBhIG1lYXN1cmV0eXBlIGJlbG93IGFuZCBzdGFydCBtZWFzdXJpbmcgYnkgY2xpY2tpbmcgb24gdGhlIG1hcC4nLFxuICAgIE1FQVNVUkVUT09MU19JTkZPX0FERElUSU9OQUw6ICcoVG8gc3RvcCBhIG1lYXN1cmVtZW50LCBkb3VibGUtY2xpY2sgb24gdGhlIG1hcC4pJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX1NFTEVDVDogJ1NlbGVjdC1tb2RlJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfTElORVNUUklORzogJ01lYXN1cmUgdHJhY2tzJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfUE9MWUdPTjogJ01lYXN1cmUgYXJlYXMnLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19DSVJDTEU6ICdNZWFzdXJlIHJhZGl1cycsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0ZSRUVIQU5EOiAnTWVhc3VyZSBmcmVlaGFuZCcsXG5cbiAgICBHRU9CT09LTUFSS1NfUExBQ0VIT0xERVI6ICdFbnRlciBuZXcgY2FwdGlvbicsXG5cbiAgICBJTkZPUEFHRTogJ0luZm9wYWdlJyxcbiAgICBJTkZPUEFHRV9WSUVXX1RSSUdHRVI6ICdTaG93IGluZm9ybWF0aW9ucycsXG5cbiAgICBBRERJVElPTkFMUEFORUw6ICdQYW5lbCcsXG4gICAgQURESVRJT05BTFBBTkVMX1ZJRVdfVFJJR0dFUjogJ1Nob3cgcGFuZWwnLFxuXG4gICAgQUNDT1VOVDogJ0FjY291bnQnLFxuICAgIEFDQ09VTlRfVklFV19UUklHR0VSOiAnU2hvdyBhY2NvdW50JyxcblxuICAgIFNFQVJDSF9OT1RfRk9VTkQ6ICdMb2NhdGlvbiBub3QgZm91bmQuIFNvcnJ5Li4uIDooJyxcblxuICAgIE5PTkU6ICcnIC8vIGxhc3QgbGluZVxuICB9KTsgLy8gZW5kIG9mIFwibGFuZ3VhZ2UgY29uc3RhbnRzXCIgLS0tXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIGxhbmdDb25zdGFudHNFbmdsaXNoID0gdGhpcy5jNGcubWFwcy5jb25zdGFudC5pMThuO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lbi5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29uc3RhbnQgPSB0aGlzLmM0Zy5tYXBzLmNvbnN0YW50IHx8IHt9O1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENTUyBjb25zdGFudHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnN0YW50LmNzcyA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnN0YW50LmNzcywge1xuXG4gICAgT1BFTjogJ2M0Zy1vcGVuJyxcbiAgICBDTE9TRTogJ2M0Zy1jbG9zZScsXG4gICAgQ0xPU0VBQkxFOiAnYzRnLWNsb3NlYWJsZScsXG4gICAgRU5BQkxFRDogJ2M0Zy1lbmFibGVkJyxcbiAgICBESVNBQkxFRDogJ2M0Zy1kaXNhYmxlZCcsXG4gICAgSElERTogJ2M0Zy1oaWRlJyxcbiAgICBJQ09OOiAnYzRnLWljb24nLFxuICAgIENPTlRST0w6ICdjNGctY29udHJvbCcsXG4gICAgQ09QWTogJ2M0Zy1jb3B5JyxcbiAgICBSRUZSRVNIOiAnYzRnLXJlZnJlc2gnLFxuICAgIEFDVElWRTogJ2M0Zy1hY3RpdmUnLFxuICAgIElOQUNUSVZFOiAnYzRnLWluYWN0aXZlJyxcbiAgICBMT0FESU5HOiAnYzRnLWxvYWRpbmcnLFxuICAgIEFOSU1BVElPTl9TUElOOiAnYzRnLWFuaW1hdGlvbi1zcGluJyxcbiAgICBMQVJHRTogJ2M0Zy1sYXJnZScsXG4gICAgU01BTEw6ICdjNGctc21hbGwnLFxuICAgIEhPUklaT05UQUw6ICdjNGctaG9yaXpvbnRhbCcsXG4gICAgVkVSVElDQUw6ICdjNGctdmVydGljYWwnLFxuXG4gICAgQVRUUklCVVRJT05fTE9HTzogJ2M0Zy1hdHRyaWJ1dGlvbi1sb2dvJyxcbiAgICBDT05UUk9MX0NPTlRBSU5FUl9UTDogJ2M0Zy1jb250cm9sLWNvbnRhaW5lci10b3AtbGVmdCcsXG4gICAgQ09OVFJPTF9DT05UQUlORVJfVFI6ICdjNGctY29udHJvbC1jb250YWluZXItdG9wLXJpZ2h0JyxcbiAgICBDT05UUk9MX0NPTlRBSU5FUl9CTDogJ2M0Zy1jb250cm9sLWNvbnRhaW5lci1ib3R0b20tbGVmdCcsXG4gICAgQ09OVFJPTF9DT05UQUlORVJfQkxfU1VCOiAnYzRnLWNvbnRyb2wtY29udGFpbmVyLWJvdHRvbS1sZWZ0LXN1YicsXG4gICAgQ09OVFJPTF9DT05UQUlORVJfQlI6ICdjNGctY29udHJvbC1jb250YWluZXItYm90dG9tLXJpZ2h0JyxcbiAgICBFRElUT1JfRFJBV19DT05URU5UX1BPSU5UOiAnYzRnLWRyYXctY29udGVudC1wb2ludCcsXG4gICAgRURJVE9SX0RSQVdfQ09OVEVOVF9GUkVFSEFORDogJ2M0Zy1kcmF3LWNvbnRlbnQtZnJlZWhhbmQnLFxuICAgIEVESVRPUl9EUkFXX0NPTlRFTlRfTElORVNUUklORzogJ2M0Zy1kcmF3LWNvbnRlbnQtbGluZScsXG4gICAgRURJVE9SX0RSQVdfQ09OVEVOVF9QT0xZR09OOiAnYzRnLWRyYXctY29udGVudC1wb2x5Z29uJyxcbiAgICBFRElUT1JfRFJBV19DT05URU5UX0NJUkNMRTogJ2M0Zy1kcmF3LWNvbnRlbnQtY2lyY2xlJyxcbiAgICBFRElUT1JfRFJBV19DT05URU5UX1BST0pFQ1Q6ICdjNGctZHJhdy1jb250ZW50LXByb2plY3QnLFxuICAgIEVESVRPUl9EUkFXX1RSSUdHRVI6ICdjNGctZHJhdy10cmlnZ2VyJyxcbiAgICBFRElUT1JfQ09OVEVOVF9TRUxFQ1Q6ICdjNGctY29udGVudC1zZWxlY3QnLFxuICAgIEVESVRPUl9EUkFXX09QVElPTlM6ICdjNGctZWRpdG9yLWRyYXctb3B0aW9ucycsXG4gICAgRURJVE9SX0ZFQVRVUkVfQVBQTFk6ICdjNGctZWRpdG9yLWZlYXR1cmUtYXBwbHknLFxuICAgIEVESVRPUl9GRUFUVVJFX0RFTEVURTogJ2M0Zy1lZGl0b3ItZmVhdHVyZS1kZWxldGUnLFxuICAgIEVESVRPUl9GRUFUVVJFX01PRElGWTogJ2M0Zy1lZGl0b3ItZmVhdHVyZS1tb2RpZnknLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfU0VMRUNUOiAnYzRnLWVkaXRvci12aWV3LXRyaWdnZXItc2VsZWN0JyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfUE9JTlQ6ICdjNGctZWRpdG9yLXZpZXctdHJpZ2dlci1kcmF3LXBvaW50JyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfRlJFRUhBTkQ6ICdjNGctZWRpdG9yLXZpZXctdHJpZ2dlci1kcmF3LWZyZWVoYW5kJyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfTElORVNUUklORzogJ2M0Zy1lZGl0b3Itdmlldy10cmlnZ2VyLWRyYXctbGluZScsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX1BPTFlHT046ICdjNGctZWRpdG9yLXZpZXctdHJpZ2dlci1kcmF3LXBvbHlnb24nLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19DSVJDTEU6ICdjNGctZWRpdG9yLXZpZXctdHJpZ2dlci1kcmF3LWNpcmNsZScsXG4gICAgR0VPU0VBUkNIOiAnYzRnLWdlb3NlYXJjaCcsXG4gICAgR0VPU0VBUkNIX1dSQVBQRVI6ICdjNGctZ2Vvc2VhcmNoLXdyYXBwZXInLFxuICAgIEdFT1NFQVJDSF9UUklHR0VSOiAnYzRnLWdlb3NlYXJjaC10cmlnZ2VyJyxcbiAgICBHRU9TRUFSQ0hfU1RBUlQ6ICdjNGctZ2Vvc2VhcmNoLXN0YXJ0JyxcbiAgICBHUkFUSUNVTEU6ICdjNGctZ3JhdGljdWxlJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX1NFTEVDVDogJ2M0Zy1tZWFzdXJldG9vbHMtdmlldy10cmlnZ2VyLXNlbGVjdCcsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0xJTkVTVFJJTkc6ICdjNGctbWVhc3VyZXRvb2xzLXZpZXctdHJpZ2dlci1kcmF3LWxpbmUnLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19QT0xZR09OOiAnYzRnLW1lYXN1cmV0b29scy12aWV3LXRyaWdnZXItZHJhdy1wb2x5Z29uJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfQ0lSQ0xFOiAnYzRnLW1lYXN1cmV0b29scy12aWV3LXRyaWdnZXItZHJhdy1jaXJjbGUnLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19GUkVFSEFORDogJ2M0Zy1tZWFzdXJldG9vbHMtdmlldy10cmlnZ2VyLWRyYXctZnJlZWhhbmQnLFxuICAgIFBSSU5UOidjNGctcHJpbnQnLFxuICAgIElORk9QQUdFX1ZJRVdfVFJJR0dFUjogJ2M0Zy1pbmZvcGFnZS12aWV3LXRyaWdnZXInLFxuICAgIElORk9QQUdFOiAnYzRnLWluZm9wYWdlJyxcbiAgICBBRERJVElPTkFMUEFORUxfVklFV19UUklHR0VSOiAnYzRnLWFkZGl0aW9uYWxwYW5lbC12aWV3LXRyaWdnZXInLFxuICAgIEFERElUSU9OQUxQQU5FTDogJ2M0Zy1hZGRpdGlvbmFscGFuZWwnLFxuICAgIEFDQ09VTlRfVklFV19UUklHR0VSOiAnYzRnLWFjY291bnQtdmlldy10cmlnZ2VyJyxcbiAgICBBQ0NPVU5UOiAnYzRnLWFjY291bnQnLFxuICAgIE9WRVJWSUVXTUFQOiAnYzRnLW92ZXJ2aWV3bWFwJyxcbiAgICBPVkVSVklFV01BUF9XUkFQUEVSOiAnYzRnLW92ZXJ2aWV3bWFwLXdyYXBwZXInLFxuICAgIEdFT0JPT0tNQVJLUzogJ2M0Zy1nZW9ib29rbWFya3MnLFxuICAgIFBFUk1BTElOSzogJ2M0Zy1wZXJtYWxpbmsnLFxuICAgIFBFUk1BTElOS19QT1BVUDogJ2M0Zy1wZXJtYWxpbmstcG9wdXAnLFxuICAgIFBPUFVQX0NMT1NFOiAnYzRnLXBvcHVwLWNsb3NlJyxcbiAgICBQT1BVUF9ST1VURV9XUkFQUEVSOiAnYzRnLXBvcHVwLXJvdXRlLXdyYXBwZXInLFxuICAgIFBPUFVQX1JPVVRFX0ZST006ICdjNGctcG9wdXAtcm91dGUtZnJvbScsXG4gICAgUE9QVVBfUk9VVEVfVE86ICdjNGctcG9wdXAtcm91dGUtdG8nLFxuICAgIFBPUlRTSURFOiAnYzRnLXBvcnRzaWRlJyxcbiAgICBQT1JUU0lERV9DT05UQUlORVI6ICdjNGctcG9ydHNpZGUtY29udGFpbmVyJyxcbiAgICBQT1JUU0lERV9DT05UUk9MOiAnYzRnLXBvcnRzaWRlLWNvbnRyb2wnLFxuICAgIFBPUlRTSURFX1dSQVBQRVI6ICdjNGctcG9ydHNpZGUtd3JhcHBlcicsXG4gICAgUE9SVFNJREVfVElUTEVCQVI6ICdjNGctcG9ydHNpZGUtdGl0bGViYXInLFxuICAgIFBPUlRTSURFX1RPUF9UT09MQkFSOiAnYzRnLXBvcnRzaWRlLXRvcC10b29sYmFyJyxcbiAgICBQT1JUU0lERV9DT05URU5UX0NPTlRBSU5FUjogJ2M0Zy1wb3J0c2lkZS1jb250ZW50LWNvbnRhaW5lcicsXG4gICAgUE9SVFNJREVfQk9UVE9NX1RPT0xCQVI6ICdjNGctcG9ydHNpZGUtYm90dG9tLXRvb2xiYXInLFxuICAgIFBPUlRTSURFX1NUQVRVU0JBUjogJ2M0Zy1wb3J0c2lkZS1zdGF0dXNiYXInLFxuICAgIFBPUlRTSURFX1ZJRVdUUklHR0VSQkFSOiAnYzRnLXBvcnRzaWRlLXZpZXd0cmlnZ2VyYmFyJyxcbiAgICBQT1JUU0lERV9IRUFETElORTogJ2M0Zy1wb3J0c2lkZS1oZWFkbGluZScsXG4gICAgUE9SVFNJREVfQlVUVE9OQkFSOiAnYzRnLXBvcnRzaWRlLWJ1dHRvbmJhcicsXG4gICAgUE9SVFNJREVfQlVUVE9OOiAnYzRnLXBvcnRzaWRlLWJ1dHRvbicsXG4gICAgUE9SVFNJREVfSElERTogJ2M0Zy1wb3J0c2lkZS1oaWRlJyxcbiAgICBQT1JUU0lERV9DTE9TRTogJ2M0Zy1wb3J0c2lkZS1jbG9zZScsXG4gICAgU1BJTk5FUjogJ2M0Zy1zcGlubmVyJyxcbiAgICBTVEFSQk9BUkQ6ICdjNGctc3RhcmJvYXJkJyxcbiAgICBTVEFSQk9BUkRfQ09OVEFJTkVSOiAnYzRnLXN0YXJib2FyZC1jb250YWluZXInLFxuICAgIFNUQVJCT0FSRF9DT05UUk9MOiAnYzRnLXN0YXJib2FyZC1jb250cm9sJyxcbiAgICBTVEFSQk9BUkRfV1JBUFBFUjogJ2M0Zy1zdGFyYm9hcmQtd3JhcHBlcicsXG4gICAgU1RBUkJPQVJEX1RJVExFQkFSOiAnYzRnLXN0YXJib2FyZC10aXRsZWJhcicsXG4gICAgU1RBUkJPQVJEX0NPTlRFTlRfQ09OVEFJTkVSOiAnYzRnLXN0YXJib2FyZC1jb250ZW50LWNvbnRhaW5lcicsXG4gICAgU1RBUkJPQVJEX0JPVFRPTV9UT09MQkFSOiAnYzRnLXN0YXJib2FyZC1ib3R0b20tdG9vbGJhcicsXG4gICAgU1RBUkJPQVJEX1NUQVRVU0JBUjogJ2M0Zy1zdGFyYm9hcmQtc3RhdHVzYmFyJyxcbiAgICBTVEFSQk9BUkRfVklFV1RSSUdHRVJCQVI6ICdjNGctc3RhcmJvYXJkLXZpZXd0cmlnZ2VyYmFyJyxcbiAgICBTVEFSQk9BUkRfSEVBRExJTkU6ICdjNGctc3RhcmJvYXJkLWhlYWRsaW5lJyxcbiAgICBTVEFSQk9BUkRfQlVUVE9OQkFSOiAnYzRnLXN0YXJib2FyZC1idXR0b25iYXInLFxuICAgIFNUQVJCT0FSRF9CVVRUT046ICdjNGctc3RhcmJvYXJkLWJ1dHRvbicsXG4gICAgU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9CQVNFTEFZRVJTV0lUQ0hFUjogJ2M0Zy1zdGFyYm9hcmQtdmlldy10cmlnZ2VyLWJhc2VsYXllcnN3aXRjaGVyJyxcbiAgICBTVEFSQk9BUkRfVklFV19UUklHR0VSX0xBWUVSU1dJVENIRVI6ICdjNGctc3RhcmJvYXJkLXZpZXctdHJpZ2dlci1sYXllcnN3aXRjaGVyJyxcbiAgICBTVEFSQk9BUkRfQ0xPU0U6ICdjNGctc3RhcmJvYXJkLWNsb3NlJyxcbiAgICBTVEFSQk9BUkRfQ09OVEVOVF9CQVNFTEFZRVJTV0lUQ0hFUjogJ2M0Zy1jb250ZW50LWJhc2VsYXllcnN3aXRjaGVyJyxcbiAgICBTVEFSQk9BUkRfQkFTRUxBWUVSVFJFRTogJ2M0Zy1iYXNlbGF5ZXJ0cmVlJyxcbiAgICBTVEFSQk9BUkRfTEFZRVJUUkVFOiAnYzRnLWxheWVydHJlZScsXG4gICAgU1RBUkJPQVJEX0NPTlRFTlRfTEFZRVJTV0lUQ0hFUjogJ2M0Zy1jb250ZW50LWxheWVyc3dpdGNoZXInLFxuICAgIFRPT0xUSVBfUE9QVVA6ICdjNGctdG9vbHRpcC1wb3B1cCcsXG4gICAgWk9PTV9MRVZFTDogJ2M0Zy16b29tLWxldmVsJyxcblxuICAgIFJPVVRFUl9JTlBVVF9XUkFQUEVSOiAnYzRnLXJvdXRlci1pbnB1dC13cmFwcGVyJyxcbiAgICBST1VURVJfUFJPRklMRV9XUkFQUEVSOiAnYzRnLXJvdXRlci1wcm9maWxlLXdyYXBwZXInLFxuICAgIFJPVVRFUl9JTlBVVF9GUk9NOiAnYzRnLXJvdXRlci1pbnB1dC1mcm9tJyxcbiAgICBST1VURVJfSU5QVVRfVE86ICdjNGctcm91dGVyLWlucHV0LXRvJyxcbiAgICBST1VURVJfSU5QVVRfQ0xFQVI6ICdjNGctcm91dGVyLWlucHV0LWNsZWFyJyxcbiAgICBST1VURVJfQlVUVE9OQkFSOiAnYzRnLXJvdXRlci1idXR0b25iYXInLFxuICAgIFJPVVRFUl9BVFRSSUJVVElPTl9XUkFQUEVSOiAnYzRnLXJvdXRlci1hdHRyaWJ1dGlvbi13cmFwcGVyJyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX1dSQVBQRVI6ICdjNGctcm91dGVyLWluc3RydWN0aW9ucy13cmFwcGVyJyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX0hFQURFUjogJ2M0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb25zLWhlYWRlcicsXG5cbiAgICBST1VURVJfU1dJVENIOiAnYzRnLXJvdXRlci1zd2l0Y2gnLFxuICAgIFJPVVRFUl9PVkVSOiAnYzRnLXJvdXRlci1vdmVyJyxcbiAgICBST1VURVJfUFJJTlQ6ICdjNGctcm91dGVyLXByaW50JyxcblxuICAgIFJPVVRFUl9QUk9GSUxFX0NBUjogJ2M0Zy1yb3V0ZXItcHJvZmlsZS1jYXInLFxuICAgIFJPVVRFUl9QUk9GSUxFX0hHVjogJ2M0Zy1yb3V0ZXItcHJvZmlsZS1oZ3YnLFxuICAgIFJPVVRFUl9QUk9GSUxFX0JJS0U6ICdjNGctcm91dGVyLXByb2ZpbGUtYmlrZScsXG4gICAgUk9VVEVSX1BST0ZJTEVfRk9PVDogJ2M0Zy1yb3V0ZXItcHJvZmlsZS1mb290JyxcbiAgICBST1VURVJfUFJPRklMRV9XSEVFTENIQUlSOiAnYzRnLXJvdXRlci1wcm9maWxlLXdoZWVsY2hhaXInLFxuXG5cblxuICAgIFJPVVRFUl9JTlNUUlVDVElPTlNfVEFCTEU6ICdjNGctcm91dGVyLWluc3RydWN0aW9uLXRhYmxlJyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU06ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW0nLFxuICAgIFJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9PREQ6ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW0tLW9kZCcsXG4gICAgUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0VWRU46ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW0tLWV2ZW4nLFxuICAgIFJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT046ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW1fZGlyZWN0aW9uJyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0lDT046ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW1fZGlyZWN0aW9uLWljb24nLFxuICAgIFJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT05fVEVYVDogJ2M0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb24taXRlbV90ZXh0JyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0RJU1RBTkNFOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi1pdGVtX2Rpc3RhbmNlJyxcblxuICAgIE9MX0NPTlRST0w6ICdvbC1jb250cm9sJyxcbiAgICBPTF9VTlNFTEVDVEFCTEU6ICdvbC11bnNlbGVjdGFibGUnLFxuXG4gICAgT0xfT1ZFUkxBWUNPTlRBSU5FUjogJ29sLW92ZXJsYXljb250YWluZXInLFxuICAgIE9MX09WRVJMQVlDT05UQUlORVJfU0U6ICdvbC1vdmVybGF5Y29udGFpbmVyLXN0b3BldmVudCcsXG4gICAgT0xfVklFV1BPUlQ6ICdvbC12aWV3cG9ydCcsXG4gICAgT0xfWk9PTTogJ29sLXpvb20nLFxuICAgIE9MX1pPT01fSU46ICdvbC16b29tLWluJyxcbiAgICBPTF9aT09NX0VYVDogJ29sLXpvb20tZXh0ZW50JyxcbiAgICBPTF9aT09NX0hPTUU6ICdvbC16b29tLWhvbWUnLFxuICAgIE9MX1pPT01fUE9TOiAnb2wtem9vbS1wb3NpdGlvbicsXG4gICAgT0xfWk9PTV9XSVRIX0VYVDogJ29sLXpvb20td2l0aC1leHRlbnQnLFxuICAgIE9MX1pPT01fV0lUSF9IT01FOiAnb2wtem9vbS13aXRoLWhvbWUnLFxuICAgIE9MX1pPT01fV0lUSF9QT1M6ICdvbC16b29tLXdpdGgtcG9zaXRpb24nLFxuICAgIE9MX1pPT01fU0xJREVSOiAnb2wtem9vbS1zbGlkZXInLFxuICAgIE9MX1pPT01fV0lUSF9TTElERVI6ICdvbC16b29tLXdpdGgtc2xpZGVyJyxcblxuICAgIE5PTkU6ICcnIC8vIGxhc3QgbGluZVxuICB9KTsgLy8gZW5kIG9mIFwiY3NzIGNvbnN0YW50c1wiIC0tLVxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBjc3NDb25zdGFudHMgPSB0aGlzLmM0Zy5tYXBzLmNvbnN0YW50LmNzcztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnN0YW50LmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0dlcm1hbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIEBUT0RPIGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyAge29sLmNvbnRyb2wuQ29udHJvbH1cbiAgICpcbiAgICogQHBhcmFtICAgIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRfb3B0aW9ucyAgKm9wdGlvbmFsKiBjb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLkdlb1NlYXJjaCA9IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuXG4gICAgdmFyIHNlbGYsXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgc2VhcmNoV3JhcHBlcixcbiAgICAgICAgc2VhcmNoSW5wdXQsXG4gICAgICAgIHNlYXJjaEJ1dHRvbixcbiAgICAgICAgcmVzdWx0VHJpZ2dlcixcbiAgICAgICAgcmVzdWx0V3JhcHBlcjtcblxuICAgIHNlbGYgPSB0aGlzO1xuICAgIC8vIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgLy8gdGhpcy5zZWFyY2hXcmFwcGVyID0gc2VhcmNoV3JhcHBlcjtcbiAgICAvLyB0aGlzLnJlc3VsdFdyYXBwZXIgPSByZXN1bHRXcmFwcGVyO1xuXG4gICAgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgbWFwQ29udHJvbGxlcjogdW5kZWZpbmVkLFxuICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuR0VPU0VBUkNILFxuICAgICAgZXh0RGl2OiBmYWxzZSxcbiAgICAgIGNvbGxhcHNpYmxlOiB0cnVlLFxuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9HRU9TRUFSQ0gsXG4gICAgICBsYWJlbDogJz4+JyxcbiAgICAgIGNvbGxhcHNlZExhYmVsOiAnKD8pJyxcbiAgICAgIGF0dHJpYnV0aW9uOiB0cnVlLFxuICAgICAgLy8gY3VzdG9tQXR0cmlidXRpb246ICcnLFxuICAgICAgLy8gZW5naW5lVXJsOiBmYWxzZSxcbiAgICAgIHNlYXJjaFpvb206IDEyLFxuICAgICAgem9vbUJvdW5kczogZmFsc2UsXG4gICAgICByZXN1bHRzOiBmYWxzZSxcbiAgICAgIHF1aWNrc2VhcmNoOiB0cnVlLFxuICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgIG1hcmtSZXN1bHQ6IHRydWUsXG4gICAgICBwb3B1cDogdHJ1ZSxcbiAgICAgIGNhY2hpbmc6IDAsXG4gICAgICBhdXRvcGljazogZmFsc2VcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIC8vIHByZXBhcmUgc2VhcmNoLWNvbmZpZ3VyYXRpb25cbiAgICAvL1xuICAgIHRoaXMuY29uZmlnID0ge307XG4gICAgLy8gc2VhcmNoRW5naW5lVXJsXG4gICAgLy8gaWYgKHR5cGVvZiBvcHRpb25zLmVuZ2luZVVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyAgIC8vIGlmIGl0IGlzIGEgc3RyaW5nLCB0aGVuIGl0IGlzIChob3BlZnVsbHkpIGEgVVJMLCB0aGF0IHdlIGNhbiB1c2UgZGlyZWN0bHlcbiAgICAvLyAgIC8vIEBUT0RPIGFkZCBhIFVSTC1jaGVja1xuICAgIC8vICAgdGhpcy5jb25maWcudXJsID0gb3B0aW9ucy5lbmdpbmVVcmw7XG4gICAgLy8gfSBlbHNlIHtcbiAgICAvLyAgIC8vIGlmIGl0IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGVuIHVzZSB0aGUgZGVmYXVsdCBVUkxcbiAgICAvLyAgIHRoaXMuY29uZmlnLnVybCA9ICdodHRwczovL25vbWluYXRpbS5vcGVuc3RyZWV0bWFwLm9yZy9zZWFyY2gnO1xuICAgIC8vIH1cbiAgICB0aGlzLmNvbmZpZy51cmwgPSBvcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkuZ2Vvc2VhcmNoICsgXCIvXCIgKyBvcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5wcm9maWxlO1xuICAgIC8vIHpvb21sZXZlbCB3aGVuIGNlbnRlcmluZyB0aGUgZm91bmQgbG9jYXRpb25cbiAgICB0aGlzLmNvbmZpZy56b29tbGV2ZWwgPSBvcHRpb25zLnNlYXJjaFpvb207XG4gICAgLy8gem9vbSB0byBib3VuZHMgaW5zdGVhZCBvZiB6b29tbGV2ZWwgd2hlbiBjZW50ZXJpbmcgdGhlIGZvdW5kIGxvY2F0aW9uXG4gICAgdGhpcy5jb25maWcuem9vbWJvdW5kcyA9IG9wdGlvbnMuem9vbUJvdW5kcztcbiAgICAvLyBxdWlja3NlYXJjaC1vcHRpb24gKGluc3RhbnRseSBqdW1wIHRvIHRoZSBmaXJzdCBmb3VuZCBsb2NhdGlvbilcbiAgICB0aGlzLmNvbmZpZy5xdWlja3NlYXJjaCA9IG9wdGlvbnMucXVpY2tzZWFyY2g7XG4gICAgLy8gYW5pbWF0aW9uIChhbmltYXRlIGZsaWdodCB0byB0YXJnZXRlZCBsb2NhdGlvbilcbiAgICB0aGlzLmNvbmZpZy5hbmltYXRlID0gb3B0aW9ucy5hbmltYXRlO1xuICAgIC8vIGhpZ2hsaWdodCB0aGUgcmVzdWx0IGxvY2F0aW9uXG4gICAgdGhpcy5jb25maWcubWFya1Jlc3VsdCA9IG9wdGlvbnMubWFya1Jlc3VsdDtcbiAgICB0aGlzLmNvbmZpZy5wb3B1cCA9IG9wdGlvbnMucG9wdXA7XG5cbiAgICB0aGlzLmNvbmZpZy5hdXRvcGljayA9IG9wdGlvbnMuYXV0b3BpY2s7XG4gICAgdGhpcy5jb25maWcubWFwQ29udHJvbGxlciA9IG9wdGlvbnMubWFwQ29udHJvbGxlcjtcbiAgICB0aGlzLmNvbmZpZy5yZXN1bHRzID0gb3B0aW9ucy5yZXN1bHRzO1xuXG4gICAgdGhpcy5jb25maWcuY29sbGFwc2VkID0gb3B0aW9ucy5jb2xsYXBzZWQ7XG5cbiAgICB0aGlzLmNvbmZpZy5jYWNoaW5nID0gb3B0aW9ucy5jYWNoaW5nO1xuXG4gICAgLy8gQFRPRE9cbiAgICAvLyBBdHRyaWJ1dGlvblxuXG4gICAgLy8gY2hlY2sgZXh0RGl2XG4gICAgaWYgKG9wdGlvbnMuZXh0RGl2ICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG9wdGlvbnMuZXh0RGl2KSkge1xuICAgICAgb3B0aW9ucy5leHREaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvcHRpb25zLmV4dERpdik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMuZXh0RGl2ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gY29udHJvbHdyYXBwZXIgZGl2XG4gICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc05hbWUgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX0NPTlRST0w7XG5cbiAgICBpZiAoKG9wdGlvbnMuY29sbGFwc2VkICYmICFvcHRpb25zLmV4dERpdikgJiEgKHRoaXMuY29uZmlnLmNhY2hpbmcgJiYgYzRnLm1hcHMudXRpbHMuZ2V0VmFsdWUoJ2dlb3NlYXJjaCcpID09ICcxJykpXG4gICAge1xuICAgICAgJChlbGVtZW50KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICB9XG5cbiAgICAvLyB3cmFwcGVyIGRpdlxuICAgIHRoaXMuc2VhcmNoV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuc2VhcmNoV3JhcHBlci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuR0VPU0VBUkNIX1dSQVBQRVI7XG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnNlYXJjaFdyYXBwZXIpO1xuXG4gICAgLy8gc2VhcmNoLWZpZWxkXG4gICAgc2VhcmNoSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIHNlYXJjaElucHV0LnR5cGUgPSAndGV4dCc7XG4gICAgdGhpcy5zZWFyY2hXcmFwcGVyLmFwcGVuZENoaWxkKHNlYXJjaElucHV0KTtcblxuICAgIC8vIEBUT0RPXG4gICAgLy8gLy8gcmVzdWx0LXRyaWdnZXJcbiAgICAvLyByZXN1bHRUcmlnZ2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgLy8gcmVzdWx0VHJpZ2dlci5jbGFzc05hbWUgPSAnUlQnO1xuICAgIC8vIHNlYXJjaFdyYXBwZXIuYXBwZW5kQ2hpbGQocmVzdWx0VHJpZ2dlcik7XG5cbiAgICAvLyAkKHJlc3VsdFRyaWdnZXIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgIHRyeSB7XG4gICAgLy8gICAgIHRoaXMuYmx1cigpO1xuICAgIC8vICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgIC8vICAgc2VsZi50b2dnbGVSZXN1bHRzKCk7XG4gICAgLy8gfSk7XG5cbiAgICAvLyAvLyByZXN1bHQtd3JhcHBlclxuICAgIC8vIHJlc3VsdFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAvLyByZXN1bHRXcmFwcGVyLmNsYXNzTmFtZSA9ICdSRVNVTFRTICcgKyBjc3NDb25zdGFudHMuQ0xPU0U7XG4gICAgLy8gcmVzdWx0V3JhcHBlci5pbm5lckhUTUwgPSAnbm8gcmVzdWx0cyc7XG4gICAgLy8gc2VhcmNoV3JhcHBlci5hcHBlbmRDaGlsZChyZXN1bHRXcmFwcGVyKTtcbiAgICAvLyB0aGlzLnJlc3VsdFdyYXBwZXIgPSByZXN1bHRXcmFwcGVyO1xuXG4gICAgLy8gc2VhcmNoLWJ1dHRvblxuICAgIHNlYXJjaEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIHNlYXJjaEJ1dHRvbi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuR0VPU0VBUkNIX1NUQVJUO1xuICAgIHNlYXJjaEJ1dHRvbi50aXRsZSA9IGxhbmdDb25zdGFudHMuQ1RSTF9TVEFSVF9TRUFSQ0g7XG4gICAgdGhpcy5zZWFyY2hXcmFwcGVyLmFwcGVuZENoaWxkKHNlYXJjaEJ1dHRvbik7XG5cbiAgICAgICQoc2VhcmNoQnV0dG9uKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWFyY2hJbnB1dC52YWx1ZSkge1xuXG4gICAgICAgICAgICAgIHNlbGYuZmluZExvY2F0aW9uKHNlYXJjaElucHV0LnZhbHVlKTtcblxuICAgICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgJChzZWFyY2hJbnB1dCkua2V5cHJlc3MoZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLndoaWNoID09PSAxMykge1xuICAgICAgICAgIGlmIChzZWFyY2hJbnB1dC52YWx1ZSkge1xuXG4gICAgICAgICAgICAgIHNlbGYuZmluZExvY2F0aW9uKHNlYXJjaElucHV0LnZhbHVlKTtcblxuICAgICAgICAgICAgICBpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc3VsdGNvbnRhaW5lclwiKSl7XG4gICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc3VsdGNvbnRhaW5lclwiKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzdWx0Y29udGFpbmVyXCIpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZihzZWxmLmNvbmZpZy5yZXN1bHRzKXtcblxuICAgICAgICAgICAgICAgICAgdmFyIHNlYXJjaFJlc3VsdENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgICAgICAgICAgICAgICBzZWFyY2hSZXN1bHRDb250YWluZXIuc2V0QXR0cmlidXRlKFwiaWRcIixcInJlc3VsdGNvbnRhaW5lclwiKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYucmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VhcmNoUmVzdWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlYXJjaFJlc3VsdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hSZXN1bHRCdXR0b24uc2V0QXR0cmlidXRlKFwiaWRcIiwgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFJlc3VsdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3NlYXJjaFJlc3VsdEJ1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hSZXN1bHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuem9vbVRvKHRoaXMuZ2V0QXR0cmlidXRlKFwiaWRcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFJlc3VsdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsc2VsZi5yZXN1bHRzW2ldLmRpc3BsYXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFJlc3VsdEJ1dHRvbi5pbm5lckhUTUwgPXNlbGYucmVzdWx0c1tpXS5kaXNwbGF5X25hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFJlc3VsdC5hcHBlbmRDaGlsZChzZWFyY2hSZXN1bHRCdXR0b24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hSZXN1bHRDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VhcmNoUmVzdWx0KTtcblxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZihzZWFyY2hXcmFwcGVyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VhcmNoUmVzdWx0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgaWYgKG9wdGlvbnMuY29sbGFwc2libGUgJiYgIW9wdGlvbnMuZXh0RGl2KSB7XG4gICAgICAvLyBidXR0b25cbiAgICAgIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5HRU9TRUFSQ0hfVFJJR0dFUjtcbiAgICAgIGJ1dHRvbi50aXRsZSA9IG9wdGlvbnMudGlwTGFiZWw7XG4gICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGJ1dHRvbik7XG5cbiAgICAgIC8vIHNldCBvbkNsaWNrIHRvIHRoZSB0b2dnbGUtZnVuY3Rpb25cbiAgICAgICQoYnV0dG9uKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgICAgICB9XG4gICAgICAgIHNlbGYudG9nZ2xlKCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZXh0RGl2KSB7XG4gICAgICBvcHRpb25zLnRhcmdldCA9IG9wdGlvbnMuZXh0RGl2O1xuICAgIH1cblxuICAgIC8vIGluaGVyaXRhbmNlLXN0dWZmXG4gICAgb2wuY29udHJvbC5Db250cm9sLmNhbGwodGhpcywge1xuICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIHRhcmdldDogb3B0aW9ucy50YXJnZXRcbiAgICB9KTtcbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5HZW9TZWFyY2gsIG9sLmNvbnRyb2wuQ29udHJvbCk7XG5cblxuICAvKlxuICAgKiBBZGQgbWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5HZW9TZWFyY2gucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5HZW9TZWFyY2gucHJvdG90eXBlLCB7XG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBvcGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoJCh0aGlzLmVsZW1lbnQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSlcbiAgICAgICAgICAgIC5maW5kKCdpbnB1dCcpWzBdLmZvY3VzKCk7XG4gICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNhY2hpbmcpIHtcbiAgICAgICAgICAgICAgYzRnLm1hcHMudXRpbHMuc3RvcmVWYWx1ZSgnZ2Vvc2VhcmNoJywgJzEnKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoJCh0aGlzLmVsZW1lbnQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5PUEVOKSkge1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICAgLy8gdGhpcy5jbG9zZVJlc3VsdHMoKTtcbiAgICAgICAgICBpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc3VsdGNvbnRhaW5lclwiKSl7XG4gICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzdWx0Y29udGFpbmVyXCIpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRjb250YWluZXJcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5jb25maWcuY2FjaGluZykge1xuICAgICAgICAgICAgICBjNGcubWFwcy51dGlscy5zdG9yZVZhbHVlKCdnZW9zZWFyY2gnLCAnMCcpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQFRPRE9cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgdG9nZ2xlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoJCh0aGlzLmVsZW1lbnQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIC8qKlxuICAgIC8vICAqIEBUT0RPXG4gICAgLy8gICpcbiAgICAvLyAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgIC8vICAqL1xuICAgIC8vIG9wZW5SZXN1bHRzOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gICBpZiAoJCh0aGlzLnJlc3VsdFdyYXBwZXIpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAvLyAgICAgJCh0aGlzLnJlc3VsdFdyYXBwZXIpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKVxuICAgIC8vICAgICAgIC5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpO1xuICAgIC8vICAgfVxuICAgIC8vIH0sXG5cbiAgICAvLyAvKipcbiAgICAvLyAgKiBAVE9ET1xuICAgIC8vICAqXG4gICAgLy8gICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAvLyAgKi9cbiAgICAvLyBjbG9zZVJlc3VsdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgIGlmICgkKHRoaXMucmVzdWx0V3JhcHBlcikuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pKSB7XG4gICAgLy8gICAgICQodGhpcy5yZXN1bHRXcmFwcGVyKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpXG4gICAgLy8gICAgICAgLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9LFxuXG4gICAgLy8gLyoqXG4gICAgLy8gICogQFRPRE9cbiAgICAvLyAgKlxuICAgIC8vICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgLy8gICovXG4gICAgLy8gdG9nZ2xlUmVzdWx0czogZnVuY3Rpb24gKCkge1xuICAgIC8vICAgaWYgKCQodGhpcy5yZXN1bHRXcmFwcGVyKS5oYXNDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpKSB7XG4gICAgLy8gICAgIHRoaXMub3BlblJlc3VsdHMoKTtcbiAgICAvLyAgIH0gZWxzZSB7XG4gICAgLy8gICAgIHRoaXMuY2xvc2VSZXN1bHRzKCk7XG4gICAgLy8gICB9XG4gICAgLy8gfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGNsZWFyUmVzdWx0czogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5yZXN1bHRXcmFwcGVyLmlubmVySFRNTCA9ICcnO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7W3R5cGVdfSAgbG9jYXRpb24gIFtkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHpvb21UbzogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBzZWxmLFxuICAgICAgICAgICAgbWFwLFxuICAgICAgICAgICAgYW5pbWF0ZSxcbiAgICAgICAgICAgIG1hcmtSZXN1bHQsXG4gICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICByZXN1bHRDb29yZGluYXRlLFxuICAgICAgICAgICAgZmx5VG8sXG4gICAgICAgICAgICBjb21wbGV0ZVNlYXJjaCxcbiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgICAgem9vbVR5cGU7XG5cbiAgICAgICAgZmx5VG8gPSBmdW5jdGlvbiAobWFwLCBsb2NhdGlvbiwgem9vbWxldmVsLCB6b29tYm91bmRzLCBib3VuZGluZ2JveCwgbWFya1Jlc3VsdCwgYW5pbWF0ZSkge1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gMjAwMDtcbiAgICAgICAgICAgIHZhciB6b29tID0gem9vbWxldmVsOy8vbWFwVmlldy5nZXRab29tKCk7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSAyO1xuICAgICAgICAgICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFjayhjb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIC0tcGFydHM7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJ0cyA9PT0gMCB8fCAhY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoem9vbWJvdW5kcyAmJiBib3VuZGluZ2JveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJhbnNsYXRlIG9zbS1leHRlbnQgdG8gb2wzLWV4dGVudFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBvc21FeHRlbnQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9zbUV4dGVudC5wdXNoKHBhcnNlRmxvYXQoYm91bmRpbmdib3hbMl0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9zbUV4dGVudC5wdXNoKHBhcnNlRmxvYXQoYm91bmRpbmdib3hbMF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9zbUV4dGVudC5wdXNoKHBhcnNlRmxvYXQoYm91bmRpbmdib3hbM10pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9zbUV4dGVudC5wdXNoKHBhcnNlRmxvYXQoYm91bmRpbmdib3hbMV0pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcFZpZXcuZml0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbC5wcm9qLnRyYW5zZm9ybUV4dGVudChvc21FeHRlbnQsICdFUFNHOjQzMjYnLCAnRVBTRzozODU3JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5nZXRTaXplKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblpvb206IG1hcFZpZXcuZ2V0KCdtaW5ab29tJykgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFpvb206IG1hcFZpZXcuZ2V0KCdtYXhab29tJykgfHwgMTksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gLyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBvbC5lYXNpbmcuZWFzZU91dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGR1cmF0aW9uKVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVTZWFyY2gobWFya1Jlc3VsdCwgYW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYXAuZ2V0VmlldygpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIGNlbnRlcjogbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uXG4gICAgICAgICAgICB9LCBjYWxsYmFjayk7XG4gICAgICAgICAgICBtYXAuZ2V0VmlldygpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIHpvb206IHpvb20gLSAxLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAvIDJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB6b29tOiB6b29tLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAvIDJcbiAgICAgICAgICAgIH0sIGNhbGxiYWNrKTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbXBsZXRlU2VhcmNoID0gZnVuY3Rpb24obWFya1Jlc3VsdCwgYW5pbWF0ZSkge1xuICAgICAgICAgICAgdmFyIGFkZE1hcmtlcixcbiAgICAgICAgICAgICAgICBtYXJrZXJTb3VyY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0ZU1hcmtlcjtcblxuICAgICAgICAgICAgbWFya2VyU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3IoKTtcbiAgICAgICAgICAgIG1hcC5hZGRMYXllcihuZXcgb2wubGF5ZXIuVmVjdG9yKHtcbiAgICAgICAgICAgICAgICBzdHlsZTogbmV3IG9sLnN0eWxlLlN0eWxlKCksXG4gICAgICAgICAgICAgICAgc291cmNlOiBtYXJrZXJTb3VyY2VcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgYWRkTWFya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG1hcmtlclNvdXJjZS5hZGRGZWF0dXJlKFxuICAgICAgICAgICAgICAgICAgICBuZXcgb2wuRmVhdHVyZShcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBvbC5nZW9tLlBvaW50KHJlc3VsdENvb3JkaW5hdGUpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgYW5pbWF0ZU1hcmtlciA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0ZXAsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJLZXk7XG5cbiAgICAgICAgICAgICAgICBzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gMzAwMDtcblxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0ZXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZlY3RvckNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZVN0YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWxhcHNlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsYXBzZWRSYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFzaEdlb207XG5cbiAgICAgICAgICAgICAgICAgICAgdmVjdG9yQ29udGV4dCA9IGV2ZW50LnZlY3RvckNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lU3RhdGUgPSBldmVudC5mcmFtZVN0YXRlO1xuICAgICAgICAgICAgICAgICAgICBmbGFzaEdlb20gPSBmZWF0dXJlLmdldEdlb21ldHJ5KCkuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgZWxhcHNlZCA9IGZyYW1lU3RhdGUudGltZSAtIHN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBlbGFwc2VkUmF0aW8gPSBlbGFwc2VkIC8gZHVyYXRpb247XG4gICAgICAgICAgICAgICAgICAgIHJhZGl1cyA9IG9sLmVhc2luZy5saW5lYXIoMSAtIGVsYXBzZWRSYXRpbykgKiAxMDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYWRpdXMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHkgPSBvbC5lYXNpbmcubGluZWFyKGVsYXBzZWRSYXRpbyk7XG5cbiAgICAgICAgICAgICAgICAgICAgbWFya2VyID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbmFwVG9QaXhlbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDIwMCwgMCwgMCwgJyArIG9wYWNpdHkgKyAnKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHZlY3RvckNvbnRleHQuc2V0U3R5bGUobWFya2VyKTtcbiAgICAgICAgICAgICAgICAgICAgdmVjdG9yQ29udGV4dC5kcmF3R2VvbWV0cnkoZmxhc2hHZW9tLCBudWxsKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxhcHNlZCA+IGR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJTb3VyY2UuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sLk9ic2VydmFibGUudW5CeUtleShsaXN0ZW5lcktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gY29udGludWUgcG9zdGNvbXBvc2UgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGZyYW1lU3RhdGUuYW5pbWF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwiYW5pbWF0aW9uU3RlcFwiXG5cbiAgICAgICAgICAgICAgICBsaXN0ZW5lcktleSA9IG1hcC5vbigncG9zdGNvbXBvc2UnLCBhbmltYXRpb25TdGVwKTtcblxuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwiYW5pbWF0ZU1hcmtlclwiXG5cbiAgICAgICAgICAgIG1hcmtlclNvdXJjZS5vbignYWRkZmVhdHVyZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGFuaW1hdGVNYXJrZXIoZXZlbnQuZmVhdHVyZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoem9vbVR5cGUgPT09ICd6b29tJykge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChhZGRNYXJrZXIsIGFuaW1hdGlvbkR1cmF0aW9uIC8gMik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoYWRkTWFya2VyLCBhbmltYXRpb25EdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRNYXJrZXIoKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICAgIG1hcCA9IHRoaXMuZ2V0TWFwKCk7XG5cbiAgICAgICAgcmVzdWx0ID0gc2VsZi5yZXN1bHRzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0Q29vcmRpbmF0ZSA9IG9sLnByb2oudHJhbnNmb3JtKFtwYXJzZUZsb2F0KHJlc3VsdC5sb24pLCBwYXJzZUZsb2F0KHJlc3VsdC5sYXQpXSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuXG4gICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgICByZXNvbHV0aW9uID0gbWFwVmlldy5nZXRSZXNvbHV0aW9uKCk7XG4gICAgICAgICAgICB2aWV3RXh0ZW50ID0gbWFwVmlldy5jYWxjdWxhdGVFeHRlbnQobWFwLmdldFNpemUoKSk7XG4gICAgICAgICAgICBpZiAob2wuZXh0ZW50LmNvbnRhaW5zQ29vcmRpbmF0ZSh2aWV3RXh0ZW50LCByZXN1bHRDb29yZGluYXRlKSkge1xuICAgICAgICAgICAgICAgIHpvb21UeXBlID0gJ3pvb20nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoY3VycmVudENvb3JkaW5hdGVbMF0gLSByZXN1bHRDb29yZGluYXRlWzBdKSA+IE1hdGguYWJzKGN1cnJlbnRDb29yZGluYXRlWzFdIC0gcmVzdWx0Q29vcmRpbmF0ZVsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29vcmREaWYgPSBNYXRoLmFicyhjdXJyZW50Q29vcmRpbmF0ZVswXSAtIHJlc3VsdENvb3JkaW5hdGVbMF0pO1xuICAgICAgICAgICAgICAgICAgICBkaWZDb250ZXh0ID0gb2wuZXh0ZW50LmdldFdpZHRoKHZpZXdFeHRlbnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvb3JkRGlmID0gTWF0aC5hYnMoY3VycmVudENvb3JkaW5hdGVbMV0gLSByZXN1bHRDb29yZGluYXRlWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgZGlmQ29udGV4dCA9IG9sLmV4dGVudC5nZXRIZWlnaHQodmlld0V4dGVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb29yZERpZiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiAqPSBjb29yZERpZiAvIGRpZkNvbnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHpvb21UeXBlID0gJ2JvdW5jZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZseVRvKG1hcCwgcmVzdWx0Q29vcmRpbmF0ZSwgc2VsZi5jb25maWcuem9vbWxldmVsLCBzZWxmLmNvbmZpZy56b29tYm91bmRzLCByZXN1bHQuYm91bmRpbmdib3gsIHRoaXMuY29uZmlnLm1hcmtSZXN1bHQsIHRoaXMuY29uZmlnLmFuaW1hdGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29tcGxldGVTZWFyY2godGhpcy5jb25maWcubWFya1Jlc3VsdCwgdGhpcy5jb25maWcuYW5pbWF0ZSk7XG4gICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihyZXN1bHRDb29yZGluYXRlKTtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy56b29tbGV2ZWwgPj0gMCkge1xuICAgICAgICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Wm9vbShzZWxmLmNvbmZpZy56b29tbGV2ZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgZmluZExvY2F0aW9uOiBmdW5jdGlvbiAobG9jYXRpb24sIG9wdF9vcHRpb25zKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBtYXAsXG4gICAgICAgICAgYW5pbWF0ZSxcbiAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgICBtYXJrUmVzdWx0O1xuXG4gICAgICBzZWxmID0gdGhpcztcbiAgICAgIG1hcCA9IHRoaXMuZ2V0TWFwKCk7XG5cbiAgICAgIC8vIHNob3cgc3Bpbm5lclxuICAgICAgdGhpcy5jb25maWcubWFwQ29udHJvbGxlci5zcGlubmVyLnNob3coKTtcblxuICAgICAgYW5pbWF0ZSA9IHRoaXMuY29uZmlnLmFuaW1hdGU7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbiA9IDIwMDA7XG4gICAgICBtYXJrUmVzdWx0ID0gdGhpcy5jb25maWcubWFya1Jlc3VsdDtcblxuICAgICAgaWYgKHR5cGVvZiBvcHRfb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKG9wdF9vcHRpb25zLmFuaW1hdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGFuaW1hdGUgPSBvcHRfb3B0aW9ucy5hbmltYXRlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRfb3B0aW9ucy5tYXJrUmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBtYXJrUmVzdWx0ID0gb3B0X29wdGlvbnMubWFya1Jlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8vIEBUT0RPXG4gICAgICAvLyBjaGVjayBib3VuZHNcbiAgICAgIC8vICAgYXJlIHRoZXJlIHJlc3RyaWN0aW9uLWJvdW5kcyBvbiB0aGUgbWFwP1xuICAgICAgLy8gICAtPiBlbHNlIHVzZSBleHRlbnQtYm91bmRzXG5cbiAgICAgIC8vIEBUT0RPXG4gICAgICAvLyBoaWdobGlnaHQgZm91bmQgYXJlYS9sb2NhdGlvblxuXG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5xdWlja3NlYXJjaCkge1xuXG4gICAgICAgIC8vIEFKQVggLT4gQG5vbWluYXRpbVxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICBjcm9zc0RvbWFpbjogdHJ1ZSxcbiAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICB1cmw6IHRoaXMuY29uZmlnLnVybCxcbiAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGZvcm1hdDogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgcTogbG9jYXRpb25cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG5cbiAgICAgICAgICAgICAgdmFyIG1hcFZpZXcsXG4gICAgICAgICAgICAgICAgICBjdXJyZW50Q29vcmRpbmF0ZSxcbiAgICAgICAgICAgICAgICAgIHJlc3VsdENvb3JkaW5hdGUsXG4gICAgICAgICAgICAgICAgICBjb29yZERpZixcbiAgICAgICAgICAgICAgICAgIGRpZkNvbnRleHQsXG4gICAgICAgICAgICAgICAgICB2aWV3RXh0ZW50LFxuICAgICAgICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgb3NtRXh0ZW50LFxuICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbixcbiAgICAgICAgICAgICAgICAgIHpvb21UeXBlLFxuICAgICAgICAgICAgICAgICAgZmx5VG8sXG4gICAgICAgICAgICAgICAgICBjb21wbGV0ZVNlYXJjaDtcblxuICAgICAgICAgICAgICBtYXBWaWV3ID0gbWFwLmdldFZpZXcoKTtcblxuICAgICAgICAgICAgICBmbHlUbyA9IGZ1bmN0aW9uIChtYXAsIGxvY2F0aW9uLCB6b29tbGV2ZWwsIHpvb21ib3VuZHMsIGJvdW5kaW5nYm94LCBtYXJrUmVzdWx0LCBhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSAyMDAwO1xuICAgICAgICAgICAgICAgICAgdmFyIHpvb20gPSB6b29tbGV2ZWw7Ly9tYXBWaWV3LmdldFpvb20oKTtcbiAgICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IDI7XG4gICAgICAgICAgICAgICAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLS1wYXJ0cztcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRzID09PSAwIHx8ICFjb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh6b29tYm91bmRzICYmIGJvdW5kaW5nYm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmFuc2xhdGUgb3NtLWV4dGVudCB0byBvbDMtZXh0ZW50XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zbUV4dGVudCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3NtRXh0ZW50LnB1c2gocGFyc2VGbG9hdChib3VuZGluZ2JveFsyXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3NtRXh0ZW50LnB1c2gocGFyc2VGbG9hdChib3VuZGluZ2JveFswXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3NtRXh0ZW50LnB1c2gocGFyc2VGbG9hdChib3VuZGluZ2JveFszXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3NtRXh0ZW50LnB1c2gocGFyc2VGbG9hdChib3VuZGluZ2JveFsxXSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwVmlldy5maXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KG9zbUV4dGVudCwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLmdldFNpemUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluWm9vbTogbWFwVmlldy5nZXQoJ21pblpvb20nKSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4Wm9vbTogbWFwVmlldy5nZXQoJ21heFpvb20nKSB8fCAxOSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IG9sLmVhc2luZy5lYXNlT3V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZVNlYXJjaChtYXJrUmVzdWx0LCBhbmltYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIG1hcC5nZXRWaWV3KCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBsb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb25cbiAgICAgICAgICAgICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgIG1hcC5nZXRWaWV3KCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgem9vbTogem9vbSAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uIC8gMlxuICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgIHpvb206IHpvb20sXG4gICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uIC8gMlxuICAgICAgICAgICAgICAgICAgfSwgY2FsbGJhY2spO1xuXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgY29tcGxldGVTZWFyY2ggPSBmdW5jdGlvbihtYXJrUmVzdWx0LCBhbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgICAvLyByZXN1bHQgbWFya2VyICYgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICBpZiAobWFya1Jlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGRNYXJrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZU1hcmtlcjtcblxuICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgbWFwLmFkZExheWVyKG5ldyBvbC5sYXllci5WZWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbmV3IG9sLnN0eWxlLlN0eWxlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbWFya2VyU291cmNlXG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgYWRkTWFya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJTb3VyY2UuYWRkRmVhdHVyZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBvbC5GZWF0dXJlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBvbC5nZW9tLlBvaW50KHJlc3VsdENvb3JkaW5hdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGVNYXJrZXIgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uU3RlcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcktleTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IDMwMDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uU3RlcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZlY3RvckNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVTdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGFwc2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsYXBzZWRSYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhc2hHZW9tO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JDb250ZXh0ID0gZXZlbnQudmVjdG9yQ29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lU3RhdGUgPSBldmVudC5mcmFtZVN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhc2hHZW9tID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGFwc2VkID0gZnJhbWVTdGF0ZS50aW1lIC0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGFwc2VkUmF0aW8gPSBlbGFwc2VkIC8gZHVyYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXMgPSBvbC5lYXNpbmcubGluZWFyKDEgLSBlbGFwc2VkUmF0aW8pICogMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl1cyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eSA9IG9sLmVhc2luZy5saW5lYXIoZWxhcHNlZFJhdGlvKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc25hcFRvUGl4ZWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDIwMCwgMCwgMCwgJyArIG9wYWNpdHkgKyAnKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckNvbnRleHQuc2V0U3R5bGUobWFya2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckNvbnRleHQuZHJhd0dlb21ldHJ5KGZsYXNoR2VvbSwgbnVsbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGFwc2VkID4gZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJTb3VyY2UuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbC5PYnNlcnZhYmxlLnVuQnlLZXkobGlzdGVuZXJLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnRpbnVlIHBvc3Rjb21wb3NlIGFuaW1hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVTdGF0ZS5hbmltYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwiYW5pbWF0aW9uU3RlcFwiXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJLZXkgPSBtYXAub24oJ3Bvc3Rjb21wb3NlJywgYW5pbWF0aW9uU3RlcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICB9OyAvLyBlbmQgb2YgXCJhbmltYXRlTWFya2VyXCJcblxuICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclNvdXJjZS5vbignYWRkZmVhdHVyZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlTWFya2VyKGV2ZW50LmZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHpvb21UeXBlID09PSAnem9vbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGFkZE1hcmtlciwgYW5pbWF0aW9uRHVyYXRpb24gLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGFkZE1hcmtlciwgYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkTWFya2VyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9Ly8gZW5kIG9mIHJlc3VsdCBtYXJrZXIgJiBhbmltYXRpb24gaGFuZGxpbmdcblxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdHNbMF0pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRzWzBdO1xuICAgICAgICAgICAgICAgIHNlbGYucmVzdWx0cz1yZXN1bHRzO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDb29yZGluYXRlID0gbWFwVmlldy5nZXRDZW50ZXIoKTtcbiAgICAgICAgICAgICAgICByZXN1bHRDb29yZGluYXRlID0gb2wucHJvai50cmFuc2Zvcm0oW3BhcnNlRmxvYXQocmVzdWx0LmxvbiksIHBhcnNlRmxvYXQocmVzdWx0LmxhdCldLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZmx5VG8obWFwLCByZXN1bHRDb29yZGluYXRlLCBzZWxmLmNvbmZpZy56b29tbGV2ZWwsIHNlbGYuY29uZmlnLnpvb21ib3VuZHMsIHJlc3VsdC5ib3VuZGluZ2JveCwgbWFya1Jlc3VsdCwgYW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvbXBsZXRlU2VhcmNoKHNlbGYuY29uZmlnLm1hcmtSZXN1bHQsIHNlbGYuY29uZmlnLmFuaW1hdGUpO1xuICAgICAgICAgICAgICAgICAgbWFwVmlldy5zZXRDZW50ZXIocmVzdWx0Q29vcmRpbmF0ZSk7XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuem9vbWxldmVsID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Wm9vbShzZWxmLmNvbmZpZy56b29tbGV2ZWwpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwaXhlbCA9IG1hcC5nZXRQaXhlbEZyb21Db29yZGluYXRlKHJlc3VsdENvb3JkaW5hdGUpO1xuICAgICAgICAgICAgICAgIHZhciBmZWF0dXJlID0gbWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChwaXhlbCxcbiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGxheWVyID0gbWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChwaXhlbCxcbiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxheWVyO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmKHNlbGYuY29uZmlnLnBvcHVwKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHVwSW5mb3MgPXt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZSAmJiBmZWF0dXJlLmdldCgncG9wdXAnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2luZ2xlIFBPSVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBJbmZvcyA9IGZlYXR1cmUuZ2V0KCdwb3B1cCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxheWVyICYmIGxheWVyLnBvcHVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cEluZm9zID0gbGF5ZXIucG9wdXA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmQgPSBnZW9tZXRyeS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmQgPSByZXN1bHRDb29yZGluYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjNGcubWFwcy5wb3B1cC5wb3B1cC5zZXRQb3NpdGlvbihjb29yZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wdXBJbmZvcy5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJGNvbnRlbnQuaHRtbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAucG9wdXAuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkxPQURJTkcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM0Zy5tYXBzLnBvcHVwLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcHVwSW5mb3MuYXN5bmMgPT09IGZhbHNlIHx8IHBvcHVwSW5mb3MuYXN5bmMgPT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmpQb3B1cCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBmZWF0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5sYXllciA9IGxheWVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBwb3B1cCBob29rIGZvciBwbHVnaW4gc3BlY2lmaWMgcG9wdXAgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM0Zy5tYXBzLnV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwLCBvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWFwQ29udHJvbGxlci5wcm94eS5zZXRQb3B1cChvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc2VsZi5hcGlfaW5mb3dpbmRvd191cmwgKyAnLycgKyBwb3B1cEluZm9zLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3B1cEluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBwb3B1cEluZm9zLmFzeW5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBkYXRhLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwOiBwb3B1cEluZm9zLnBvcHVwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0aW5nX2xpbms6IHBvcHVwSW5mb3Mucm91dGluZ19saW5rXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialBvcHVwID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAuZmVhdHVyZSA9IGZlYXR1cmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAubGF5ZXIgPSBsYXllcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM0Zy5tYXBzLnV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwLCBvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRQb3B1cChvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAucG9wdXAucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGM0Zy5tYXBzICYmIGM0Zy5tYXBzLnBvcHVwICYmIGM0Zy5tYXBzLnBvcHVwLnBvcHVwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGM0Zy5tYXBzLnBvcHVwLnBvcHVwLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuYXV0b3BpY2sgJiYgc2VsZi5jb25maWcubWFwQ29udHJvbGxlci5nZW9waWNrZXIgJiYgdHlwZW9mIHNlbGYuY29uZmlnLm1hcENvbnRyb2xsZXIuZ2VvcGlja2VyLnBpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1hcENvbnRyb2xsZXIuZ2VvcGlja2VyLnBpY2socmVzdWx0Q29vcmRpbmF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWxlcnQobGFuZ0NvbnN0YW50cy5TRUFSQ0hfTk9UX0ZPVU5EKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBzZWxmLnJlc3VsdFdyYXBwZXIuaW5uZXJIVE1MID0gJ0AgY29uc29sZSc7XG5cbiAgICAgICAgICAgICAgaWYoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRjb250YWluZXJcIikpe1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzdWx0Y29udGFpbmVyXCIpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRjb250YWluZXJcIikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKHNlbGYuY29uZmlnLnJlc3VsdHMpe1xuXG4gICAgICAgICAgICAgICAgdmFyIHNlYXJjaFJlc3VsdENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0Q29udGFpbmVyLnNldEF0dHJpYnV0ZShcImlkXCIsXCJyZXN1bHRjb250YWluZXJcIik7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYucmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLnJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlYXJjaFJlc3VsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWFyY2hSZXN1bHRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0QnV0dG9uLnNldEF0dHJpYnV0ZShcImlkXCIsIGkpO1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hSZXN1bHRCdXR0b24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdzZWFyY2hSZXN1bHRCdXR0b24nKTtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi56b29tVG8odGhpcy5nZXRBdHRyaWJ1dGUoXCJpZFwiKSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0QnV0dG9uLnNldEF0dHJpYnV0ZShcIm5hbWVcIixzZWxmLnJlc3VsdHNbaV0uZGlzcGxheV9uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0QnV0dG9uLmlubmVySFRNTCA9c2VsZi5yZXN1bHRzW2ldLmRpc3BsYXlfbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0LmFwcGVuZENoaWxkKHNlYXJjaFJlc3VsdEJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFJlc3VsdENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWFyY2hSZXN1bHQpO1xuXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBzZWxmLnNlYXJjaFdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VhcmNoUmVzdWx0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC8vIEFKQVgtZmFpbHVyZVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgLy8gQFRPRE9cbiAgICAgICAgICAgICAgLy8gc2VsZi5yZXN1bHRXcmFwcGVyLmlubmVySFRNTCA9ICdvaG9oISc7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAvLyBBSkFYLWFsd2F5c1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tYXBDb250cm9sbGVyLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEBUT0RPXG4gICAgICB9XG5cbiAgICB9XG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCIgLS0tXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIEdlb1NlYXJjaCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5HZW9TZWFyY2ggO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1nZW9zZWFyY2guanMiLCIvLyBcIm5hbWVzcGFjZVwiXG5cbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNFbmdsaXNofSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWVuXCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcblxubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9IGVsc2UgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJlblwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNFbmdsaXNoO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrXG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH1cbn1cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQ29udHJvbCB0byB0b2dnbGUgYSBncmlkIG9uIHRoZSBtYXAuXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyAge29sLmNvbnRyb2wuQ29udHJvbH1cbiAgICpcbiAgICogQHBhcmFtICAgIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRfb3B0aW9ucyAgKm9wdGlvbmFsKiBjb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLkdyaWQgPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIGVsZW1lbnQsXG4gICAgICAgIGJ1dHRvbjtcblxuICAgIHZhciBvYmpHcmlkID0gbmV3IG9sLkdyYXRpY3VsZSh7XG4gICAgICAgIC8qXG4gICAgICAgIHN0cm9rZVN0eWxlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgIHdpZHRoOiAyLFxuICAgICAgICAgICAgbGluZURhc2g6IFswLjUsIDRdXG4gICAgICAgIH0pLCovXG4gICAgICAgIHNob3dMYWJlbHM6IHRydWVcbiAgICB9KTtcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5HUkFUSUNVTEUsXG4gICAgICBzd2l0Y2hhYmxlOiB0cnVlLFxuICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9HUklELFxuICAgICAgbGFiZWw6ICcjJyxcbiAgICAgIGRpc2FibGVMYWJlbDogJ1tdJ1xuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgLy8gQFRPRE8gbW92ZSBmdW5jdGlvbnMgdG8gcHJvdG90eXBlP1xuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gdG8gZW5hYmxlIHRoZSBncmlkXG4gICAgdmFyIGVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG9iakdyaWQuc2V0TWFwKHNlbGYuZ2V0TWFwKCkpO1xuICAgICAgJChlbGVtZW50KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuRU5BQkxFRCk7XG4gICAgICAvLyBpZiAob3B0aW9ucy5jYWNoaW5nKSB7XG4gICAgICAvLyAgICAgYzRnLm1hcHMudXRpbHMuc3RvcmVWYWx1ZSgnZ3JpZCcsICcxJyk7XG4gICAgICAvLyB9XG4gICAgfTtcblxuICAgIC8vIGZ1bmN0aW9uIHRvIGRpc2FibGUgdGhlIGdyaWRcbiAgICB2YXIgZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG9iakdyaWQuc2V0TWFwKG51bGwpO1xuICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuRU5BQkxFRCk7XG4gICAgICAvLyBpZiAob3B0aW9ucy5jYWNoaW5nKSB7XG4gICAgICAvLyAgICAgYzRnLm1hcHMudXRpbHMuc3RvcmVWYWx1ZSgnZ3JpZCcsICcwJyk7XG4gICAgICAvLyB9XG4gICAgfTtcblxuICAgIC8vIGZ1bmN0aW9uIHRvIHRvZ2dsZSB0aGUgZ3JpZFxuICAgIHZhciB0b2dnbGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgLy8gbG9vc2UgZm9jdXMsIG90aGVyd2lzZSBpdCBsb29rcyBtZXNzeVxuICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICBpZiAob2JqR3JpZC5nZXRNYXAoKSkge1xuICAgICAgICBkaXNhYmxlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmFibGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gd3JhcHBlciBkaXZcbiAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSBvcHRpb25zLmNsYXNzTmFtZSArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEUgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfQ09OVFJPTDtcblxuICAgIGlmIChvcHRpb25zLnN3aXRjaGFibGUpIHtcbiAgICAgIC8vIGJ1dHRvblxuICAgICAgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b24udGl0bGUgPSBvcHRpb25zLnRpcExhYmVsO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChidXR0b24pO1xuXG4gICAgICAvLyBzZXQgb25DbGljayB0byB0aGUgdG9nZ2xlLWZ1bmN0aW9uXG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGUsIGZhbHNlKTtcbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdG9nZ2xlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gaW5oZXJpdGFuY2Utc3R1ZmZcbiAgICBvbC5jb250cm9sLkNvbnRyb2wuY2FsbCh0aGlzLCB7XG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgdGFyZ2V0OiBvcHRpb25zLnRhcmdldFxuICAgIH0pO1xuXG4gICAgLy8gaWYgKG9wdGlvbnMuY2FjaGluZyAmJiAoYzRnLm1hcHMudXRpbHMuZ2V0VmFsdWUoJ2dyaWQnKSA9PSAnMScpKSB7XG4gICAgLy8gICAgIG9iakdyaWQuc2V0TWFwKHNlbGYuZ2V0TWFwKCkpO1xuICAgIC8vICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5FTkFCTEVEKTtcbiAgICAvLyB9XG5cbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5HcmlkLCBvbC5jb250cm9sLkNvbnRyb2wpO1xuXG5cbiAgLypcbiAgICogQWRkIG1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuR3JpZC5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLkdyaWQucHJvdG90eXBlLCB7XG5cbiAgICAvLyBub3RoaW5nIHRvIGFkZCBoZXJlXG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCIgLS0tXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIEdyaWQgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuR3JpZDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtZ3JpZC5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcblxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0dlcm1hbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcblxubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9IGVsc2UgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJlblwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNFbmdsaXNoO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrXG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH1cbn1cblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb250cm9sIHRvIHRvZ2dsZSB0aGUgaW50aWFsIG1hcCBwb3NpdGlvbiBvbiB0aGUgbWFwLlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgIHtvbC5jb250cm9sLkNvbnRyb2x9XG4gICAqXG4gICAqIEBwYXJhbSAgICB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0X29wdGlvbnMgICpvcHRpb25hbCogY29udHJvbCBvcHRpb25zLlxuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5Ib21lID0gZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRfb3B0aW9ucyB8fCB7fTtcblxuICAgIHZhciBlbGVtZW50LFxuICAgICAgICBidXR0b247XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuT0xfWk9PTV9IT01FLFxuICAgICAgc3dpdGNoYWJsZTogdHJ1ZSxcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBtYXBDb250cm9sbGVyOiB1bmRlZmluZWRcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGlmICghb3B0aW9ucy5tYXBDb250cm9sbGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZpZXcgPSBvcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKTtcbiAgICB2YXIgbWFwRGF0YSA9IG9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhO1xuXG4gICAgdmFyIHRvZ2dsZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAvLyBsb29zZSBmb2N1cywgb3RoZXJ3aXNlIGl0IGxvb2tzIG1lc3N5XG4gICAgICB0aGlzLmJsdXIoKTtcblxuICAgICAgdmlldy5zZXRDZW50ZXIob2wucHJvai50cmFuc2Zvcm0oW3BhcnNlRmxvYXQobWFwRGF0YS5jZW50ZXIubG9uKSwgcGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlci5sYXQpXSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKSk7XG4gICAgICB2aWV3LnNldFpvb20ocGFyc2VJbnQobWFwRGF0YS5jZW50ZXIuem9vbSwgMTApKTtcbiAgICAgIHZpZXcuc2V0Um90YXRpb24ocGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlci5yb3RhdGlvbikpO1xuXG4gICAgICAvLyBjaGVjayB1c2VycG9zaXRpb25cbiAgICAgIHZhciBnZW9Mb2NhdGlvbjtcbiAgICAgIGlmIChtYXBEYXRhLmdlb2xvY2F0aW9uKSB7XG4gICAgICAgIGdlb0xvY2F0aW9uID0gbmV3IG9sLkdlb2xvY2F0aW9uKHtcbiAgICAgICAgICB0cmFja2luZzogdHJ1ZSxcbiAgICAgICAgICBwcm9qZWN0aW9uOiB2aWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgICB9KTtcblxuICAgICAgICBnZW9Mb2NhdGlvbi5vbignY2hhbmdlJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgIHZpZXcuc2V0Q2VudGVyKGdlb0xvY2F0aW9uLmdldFBvc2l0aW9uKCkpO1xuICAgICAgICAgIGlmIChtYXBEYXRhLmdlb2xvY2F0aW9uX3pvb20pIHtcbiAgICAgICAgICAgIHZpZXcuc2V0Wm9vbShwYXJzZUludChtYXBEYXRhLmdlb2xvY2F0aW9uX3pvb20sIDEwKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGdlb0xvY2F0aW9uLnNldFRyYWNraW5nKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuc2V0Vmlldyh2aWV3KTtcbiAgICAgIHV0aWxzLnJlZHJhd01hcFZpZXcob3B0aW9ucy5tYXBDb250cm9sbGVyKTtcbiAgICB9O1xuXG4gICAgLy8gd3JhcHBlciBkaXZcbiAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSBvcHRpb25zLmNsYXNzTmFtZSArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEUgKyAnIGJ1dHRvbic7XG5cbiAgICBpZiAob3B0aW9ucy5zd2l0Y2hhYmxlKSB7XG4gICAgICAvLyBidXR0b25cbiAgICAgIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uLnRpdGxlID0gb3B0aW9ucy50aXBMYWJlbDtcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcblxuICAgICAgLy8gc2V0IG9uQ2xpY2sgdG8gdGhlIHRvZ2dsZS1mdW5jdGlvblxuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlLCBmYWxzZSk7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRvZ2dsZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIGluaGVyaXRhbmNlLXN0dWZmXG4gICAgb2wuY29udHJvbC5Db250cm9sLmNhbGwodGhpcywge1xuICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIHRhcmdldDogb3B0aW9ucy50YXJnZXRcbiAgICB9KTtcbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5Ib21lLCBvbC5jb250cm9sLkNvbnRyb2wpO1xuXG5cbiAgLypcbiAgICogQWRkIG1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuSG9tZS5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLkhvbWUucHJvdG90eXBlLCB7XG5cbiAgICAvLyBub3RoaW5nIHRvIGFkZCBoZXJlXG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCIgLS0tXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIEhvbWUgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuSG9tZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtaG9tZS5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcblxubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9IGVsc2UgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJlblwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNFbmdsaXNoO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrXG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH1cbn1cblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBhIG92ZXJ2aWV3bWFwIG9uIHRoZSBtYXAuXG4gICAqICAgVGhpcyBjbGFzcyB3cmFwcyB0aGUgb3ZtIGEgYml0IGRpZmZlcmVudGx5IHRoYW5cbiAgICogICB0aGUgc3RhbmRhcmQgb2wtb3ZlcnZpZW1hcCwgdG8gYWxsb3cgcHJvcGVyIGNzcy10cmFuc2l0aW9ucy5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzICB7b2wuY29udHJvbC5Db250cm9sfVxuICAgKlxuICAgKiBAcGFyYW0gICAge09iamVjdH0gICAgICAgICAgICAgIG9wdF9vcHRpb25zICAqb3B0aW9uYWwqIGNvbnRyb2wgb3B0aW9ucy5cbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuT3ZlcnZpZXdNYXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgdmFyIGVsZW1lbnQsXG4gICAgICAgIHRyaWdnZXIsXG4gICAgICAgIHRyaWdnZXJJY29uLFxuICAgICAgICBvdm07XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9PVkVSVklFV01BUCxcbiAgICAgIGxheWVyczogW25ldyBvbC5sYXllci5UaWxlKHtzb3VyY2U6IG5ldyBvbC5zb3VyY2UuT1NNKCl9KV1cbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5PTF9DT05UUk9MICsgJyAnICsgY3NzQ29uc3RhbnRzLk9WRVJWSUVXTUFQICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcbiAgICBpZiAob3B0aW9ucy5jb2xsYXBzZWQpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9ICcgJyArIGNzc0NvbnN0YW50cy5DTE9TRTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5jbGFzc05hbWUgKz0gJyAnICsgY3NzQ29uc3RhbnRzLk9QRU47XG4gICAgfVxuICAgIG9wdGlvbnMudGFyZ2V0LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgdHJpZ2dlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIHRyaWdnZXIudGl0bGUgPSBvcHRpb25zLnRpcExhYmVsO1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodHJpZ2dlcik7XG5cbiAgICB0cmlnZ2VySWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICB0cmlnZ2VySWNvbi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuSUNPTjtcbiAgICB0cmlnZ2VyLmFwcGVuZENoaWxkKHRyaWdnZXJJY29uKTtcblxuICAgICQodHJpZ2dlcikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQoZWxlbWVudCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKSkge1xuICAgICAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSlcbiAgICAgICAgICAgIC5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSlcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmJsdXIoKTtcbiAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgb3ZtID0gbmV3IG9sLmNvbnRyb2wuT3ZlcnZpZXdNYXAoe1xuICAgICAgY29sbGFwc2libGU6IGZhbHNlLFxuICAgICAgY29sbGFwc2VkOiBmYWxzZSxcbiAgICAgIHRhcmdldDogZWxlbWVudCxcbiAgICAgIGxheWVyczogb3B0aW9ucy5sYXllcnNcbiAgICB9KTtcblxuICAgIHJldHVybiBvdm07XG4gIH07XG5cblxuICAvKlxuICAgKiBBZGQgbWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5PdmVydmlld01hcC5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLk92ZXJ2aWV3TWFwLnByb3RvdHlwZSwge1xuXG4gICAgLy8gbm90aGluZyB0byBhZGQgaGVyZVxuXG4gIH0pOyAvLyBlbmQgb2YgXCJhZGQgbWV0aG9kc1wiIC0tLVxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBPdmVydmlld01hcCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5PdmVydmlld01hcDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtb3ZlcnZpZXdtYXAuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG5cbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5cbmxldCBsYW5nQ29uc3RhbnRzID0ge307XG5cbmlmICh0eXBlb2YgbWFwRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBpZiAobWFwRGF0YS5sYW5nID09PSBcImRlXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfSBlbHNlIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzRW5nbGlzaDtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9XG59XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQ29udHJvbCB0byBnZW5lcmF0ZSBhIHBlcm1hbGluayB0byB0aGUgY3VycmVudCBNYXAgc3RhdGUuXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyAge29sLmNvbnRyb2wuQ29udHJvbH1cbiAgICpcbiAgICogQHBhcmFtICAgIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zICBjb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLlBlcm1hbGluayA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICB2YXIgc2VsZixcbiAgICAgICAgYnV0dG9uLFxuICAgICAgICBjb3B5QnV0dG9uLFxuICAgICAgICByZWZyZXNoQnV0dG9uO1xuXG4gICAgdGhpcy5jb25maWcgPSBvcHRpb25zIHx8IHt9O1xuICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXG4gICAgdGhpcy5jb25maWcgPSAkLmV4dGVuZCh7XG4gICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5QRVJNQUxJTkssXG4gICAgICAvLyBtYXBDb250cm9sbGVyOiB1bmRlZmluZWQsXG4gICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX1BFUk1BTElOSyxcbiAgICAgIGdldFBhcmFtZXRlcjogZmFsc2UsXG4gICAgICBsYWJlbDogJ1AnLFxuICAgICAgdGFyZ2V0OiB1bmRlZmluZWRcbiAgICB9LCB0aGlzLmNvbmZpZyk7XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLm1hcENvbnRyb2xsZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyB3cmFwcGVyIGRpdlxuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSB0aGlzLmNvbmZpZy5jbGFzc05hbWUgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX0NPTlRST0w7XG5cbiAgICAvLyBidXR0b25cbiAgICBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBidXR0b24udGl0bGUgPSB0aGlzLmNvbmZpZy50aXBMYWJlbDtcbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcblxuICAgIC8vIHNldCBvbkNsaWNrIHRvIHRoZSB0b2dnbGUtZnVuY3Rpb25cbiAgICAvLyBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnRvZ2dsZSwgZmFsc2UpO1xuICAgIC8vIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy50b2dnbGUsIGZhbHNlKTtcbiAgICAkKGJ1dHRvbikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICB9IGNhdGNoIChpZ25vcmUpIHtcblxuICAgICAgfVxuICAgICAgc2VsZi50b2dnbGUoKTtcbiAgICB9KTtcblxuICAgIC8vIHBvcHVwXG4gICAgLy8gd2lsbCBiZSBhdHRhY2hlZCB3aGVuIG9wZW5lZCB0aGUgZmlyc3QgdGltZVxuICAgIC8vIHRvIG1ha2Ugc3VyZSBpdHMgcmVhbGx5IHRoZSBsYXN0IGVsZW1lbnQgaW4gdGhlIGNvbnRhaW5lclxuICAgIHRoaXMucG9wdXBBdHRhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMucG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLnBvcHVwLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MICsgJyAnICsgY3NzQ29uc3RhbnRzLlBFUk1BTElOS19QT1BVUCArICcgJyArIGNzc0NvbnN0YW50cy5DTE9TRTtcblxuICAgIC8vIHRleHRmaWVsZFxuICAgIHRoaXMudGV4dGZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICB0aGlzLnRleHRmaWVsZC50eXBlID0gJ3RleHQnO1xuICAgIHRoaXMucG9wdXAuYXBwZW5kQ2hpbGQodGhpcy50ZXh0ZmllbGQpO1xuXG4gICAgLy8gY29weSBidXR0b25cbiAgICBjb3B5QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgY29weUJ1dHRvbi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09QWSArICcgJyArIGNzc0NvbnN0YW50cy5JQ09OO1xuICAgIGNvcHlCdXR0b24udGl0bGUgPSBsYW5nQ29uc3RhbnRzLkNPUFlfVE9fQ0xJUEJPQVJEO1xuICAgIGNvcHlCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWNsaXBib2FyZC10YXJnZXQnLCAnLicgKyBjc3NDb25zdGFudHMuUEVSTUFMSU5LX1BPUFVQICsgJyA+IGlucHV0W3R5cGU9XCJ0ZXh0XCJdJyk7XG4gICAgdGhpcy5wb3B1cC5hcHBlbmRDaGlsZChjb3B5QnV0dG9uKTtcbiAgICBuZXcgQ2xpcGJvYXJkKGNvcHlCdXR0b24pO1xuXG4gICAgLy8gcmVmcmVzaCBidXR0b25cbiAgICByZWZyZXNoQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgcmVmcmVzaEJ1dHRvbi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUkVGUkVTSCArICcgJyArIGNzc0NvbnN0YW50cy5JQ09OO1xuICAgIHJlZnJlc2hCdXR0b24udGl0bGUgPSBsYW5nQ29uc3RhbnRzLlJFRlJFU0g7XG4gICAgJChyZWZyZXNoQnV0dG9uKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmdlbmVyYXRlTGlua0Zyb21DdXJyZW50U3RhdGUoe3RhcmdldDogc2VsZi50ZXh0ZmllbGR9KTtcbiAgICB9KTtcbiAgICB0aGlzLnBvcHVwLmFwcGVuZENoaWxkKHJlZnJlc2hCdXR0b24pO1xuXG4gICAgLy8gaW5oZXJpdGFuY2Utc3R1ZmZcbiAgICBvbC5jb250cm9sLkNvbnRyb2wuY2FsbCh0aGlzLCB7XG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICB0YXJnZXQ6IHRoaXMuY29uZmlnLnRhcmdldFxuICAgIH0pO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLlBlcm1hbGluaywgb2wuY29udHJvbC5Db250cm9sKTtcblxuXG4gIC8qXG4gICAqIEFkZCBtZXRob2RzXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLlBlcm1hbGluay5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLlBlcm1hbGluay5wcm90b3R5cGUsIHtcblxuICAgIG9wZW46IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5wb3B1cEF0dGFjaGVkKSB7XG4gICAgICAgICQodGhpcy5wb3B1cCkuc2xpZGVEb3duKDEpO1xuICAgICAgICB0aGlzLmNvbmZpZy50YXJnZXQuYXBwZW5kQ2hpbGQodGhpcy5wb3B1cCk7XG4gICAgICAgIHRoaXMucG9wdXBBdHRhY2hlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICAkKHRoaXMucG9wdXApLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pO1xuICAgICAgJCh0aGlzLmVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgIHRoaXMuZ2VuZXJhdGVMaW5rRnJvbUN1cnJlbnRTdGF0ZSh7dGFyZ2V0OiB0aGlzLnRleHRmaWVsZH0pO1xuICAgIH0sXG5cbiAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgJCh0aGlzLnBvcHVwKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKTtcbiAgICAgICQodGhpcy5lbGVtZW50KS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgfSxcblxuICAgIHRvZ2dsZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQodGhpcy5wb3B1cCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKSkge1xuICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2VuZXJhdGVMaW5rRnJvbUN1cnJlbnRTdGF0ZTogZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG4gICAgICB2YXIgb3B0aW9ucyxcbiAgICAgICAgICBwcm94eSxcbiAgICAgICAgICBtYXBWaWV3LFxuICAgICAgICAgIHBhcmFtZXRlcnMsXG4gICAgICAgICAgbGluayxcbiAgICAgICAgICBjZW50ZXIsXG4gICAgICAgICAgYmFzZUxheWVySWR4LFxuICAgICAgICAgIGxheWVySWR4LFxuICAgICAgICAgIGxheWVycztcblxuICAgICAgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuICAgICAgaWYgKCFvcHRpb25zLnBhcmFtQ291bnQgfHwgIShvcHRpb25zLnBhcmFtQ291bnQgPT09IDYgfHwgb3B0aW9ucy5wYXJhbUNvdW50ID09PSAyIHx8IG9wdGlvbnMucGFyYW1Db3VudCA9PT0gMSkpIHtcbiAgICAgICAgb3B0aW9ucy5wYXJhbUNvdW50ID0gNjtcbiAgICAgIH1cblxuICAgICAgcGFyYW1ldGVycyA9IFtdO1xuICAgICAgbWFwVmlldyA9IHRoaXMuY29uZmlnLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKTtcbiAgICAgIHByb3h5ID0gdGhpcy5jb25maWcubWFwQ29udHJvbGxlci5wcm94eTtcblxuICAgICAgY2VudGVyID0gbWFwVmlldy5nZXRDZW50ZXIoKTtcbiAgICAgIGNlbnRlciA9IG9sLnByb2oudHJhbnNmb3JtKFtjZW50ZXJbMF0sIGNlbnRlclsxXV0sICdFUFNHOjM4NTcnLCAnRVBTRzo0MzI2Jyk7XG5cbiAgICAgIHBhcmFtZXRlcnMucHVzaCgrY2VudGVyWzBdLnRvRml4ZWQoNSkpO1xuICAgICAgcGFyYW1ldGVycy5wdXNoKCtjZW50ZXJbMV0udG9GaXhlZCg1KSk7XG4gICAgICBwYXJhbWV0ZXJzLnB1c2gobWFwVmlldy5nZXRab29tKCkpO1xuICAgICAgcGFyYW1ldGVycy5wdXNoKCttYXBWaWV3LmdldFJvdGF0aW9uKCkudG9GaXhlZCgyKSk7XG5cbiAgICAgIC8vIGZpbmQgYWN0aXZlIGJhc2VsYXllclxuICAgICAgaWYgKHByb3h5LmFjdGl2ZUJhc2VsYXllcklkKSB7XG4gICAgICAgIHBhcmFtZXRlcnMucHVzaChwcm94eS5hY3RpdmVCYXNlbGF5ZXJJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbWV0ZXJzLnB1c2goMCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGZpbmQgYWN0aXZlIGxheWVyc1xuICAgICAgbGF5ZXJzID0gW107XG4gICAgICBmb3IgKGxheWVySWR4IGluIHByb3h5LmFjdGl2ZUxheWVySWRzKSB7XG4gICAgICAgIGlmIChwcm94eS5hY3RpdmVMYXllcklkcy5oYXNPd25Qcm9wZXJ0eShsYXllcklkeCkpIHtcbiAgICAgICAgICBsYXllcnMucHVzaChwYXJzZUludChsYXllcklkeCwgMTApKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZGVsdGEtZGVjb2RlIGlmIHRoZXJlIGFyZSBtb3JlIHRoYW4gb25lIGxheWVyXG4gICAgICBpZiAobGF5ZXJzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbGF5ZXJzID0gdXRpbHMuZGVsdGFFbmNvZGUobGF5ZXJzKTtcbiAgICAgICAgbGF5ZXJzID0gbGF5ZXJzLmpvaW4oJzonKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxheWVycyA9IGxheWVyc1swXSB8fCAnMCc7XG4gICAgICB9XG4gICAgICBwYXJhbWV0ZXJzLnB1c2gobGF5ZXJzKTtcbiAgICAgIHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzLmpvaW4oJy8nKTtcblxuICAgICAgLy8gYnVpbGQgbGlua1xuICAgICAgbGluayA9IHV0aWxzLnNldFVybFBhcmFtKHBhcmFtZXRlcnMsIHRoaXMuY29uZmlnLmdldFBhcmFtZXRlcik7XG5cbiAgICAgIGlmIChvcHRpb25zLnRhcmdldCkge1xuICAgICAgICBvcHRpb25zLnRhcmdldC52YWx1ZSA9IGxpbms7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbGluaztcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgZ2VuZXJhdGVMaW5rRnJvbUN1cnJlbnRTdGF0ZVxuXG4gICAgZ2VuZXJhdGVMaW5rOiBmdW5jdGlvbiAocGFyYW1ldGVycykge1xuICAgICAgaWYgKCFwYXJhbWV0ZXJzIHx8ICEocGFyYW1ldGVycy5sZW5ndGggPT09IDYgfHwgcGFyYW1ldGVycy5sZW5ndGggPT09IDIgfHwgcGFyYW1ldGVycy5sZW5ndGggPT09IDEpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gYnVpbGQgYW5kIHJldHVybiBsaW5rXG4gICAgICByZXR1cm4gdXRpbHMuc2V0VXJsUGFyYW0ocGFyYW1ldGVycy5qb2luKCcvJyksIHRoaXMuY29uZmlnLmdldFBhcmFtZXRlcik7XG4gICAgfSAvLyBlbmQgb2YgZ2VuZXJhdGVMaW5rXG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCIgLS0tXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIFBlcm1hbGluayA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5QZXJtYWxpbms7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBlcm1hbGluay5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0dlcm1hbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7U2lkZWJvYXJkfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXNpZGVib2FyZFwiO1xuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNFbmdsaXNofSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWVuXCI7XG5cbmxldCBsYW5nQ29uc3RhbnRzID0ge307XG5cbmlmICh0eXBlb2YgbWFwRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBpZiAobWFwRGF0YS5sYW5nID09PSBcImRlXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfSBlbHNlIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzRW5nbGlzaDtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9XG59XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICpcbiAgICogQGV4dGVuZHMge2M0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkfVxuICAgKlxuICAgKiBAcGFyYW0gIHtbdHlwZV19ICBtYXBDb250cm9sbGVyICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gIGNvbmZpZyAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuQWNjb3VudCA9IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuXG4gICAgLy8gZXh0ZW5kIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5BQ0NPVU5ULFxuICAgICAgbmFtZTogJ2FjY291bnQnLFxuICAgICAgaGVhZGxpbmU6IGxhbmdDb25zdGFudHMuQUNDT1VOVCxcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgIGRpcmVjdGlvbjogJ2xlZnQnXG4gICAgfSwgb3B0X29wdGlvbnMpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMubWFpblNlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIC8vIGNhbGwgcGFyZW50IGNvbnN0cnVjdG9yXG4gICAgU2lkZWJvYXJkLmNhbGwodGhpcywgdGhpcy5vcHRpb25zKTtcbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5BY2NvdW50LCBTaWRlYm9hcmQpO1xuXG4gIC8qKlxuICAgKiBNZXRob2RzXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLkFjY291bnQucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5BY2NvdW50LnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZWQgd2hlbiB0aGUgcGFuZWwgd2lsbCBiZSBvcGVuZWQgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICAgICAqIFtpbml0IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICBSZXR1cm5zIHx0cnVlfCBvbiBzdWNjZXNzXG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICB0aGlzLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICB0aGlzLnZpZXdBY2NvdW50ID0gdGhpcy5hZGRBY2NvdW50VmlldygpO1xuICAgICAgdGhpcy52aWV3QWNjb3VudC5hY3RpdmF0ZSgpO1xuXG4gICAgICB2YXIgcHJveHkgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eTtcbiAgICAgIHZhciBtYXAgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXA7XG5cbiAgICAgIHRoaXMubWFpblNlY3Rpb25BY2NvdW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgdGhpcy5tYWluU2VjdGlvbkFjY291bnQuaW5uZXJIVE1MID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hY2NvdW50O1xuICAgICAgdGhpcy5tYWluU2VjdGlvbi5hcHBlbmRDaGlsZCh0aGlzLm1haW5TZWN0aW9uQWNjb3VudCk7XG4gICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIuc2V0RWxlbWVudCh0aGlzLm1haW5TZWN0aW9uKTtcblxuICAgICAgdGhpcy5zcGlubmVyLmhpZGUoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sIC8vIGVuZCBvZiBcImluaXQoKVwiXG5cblxuICAgIGFkZEFjY291bnRWaWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYWNjb3VudFZpZXc7XG5cbiAgICAgICAgYWNjb3VudFZpZXcgPSB0aGlzLmFkZFZpZXcoe1xuICAgICAgICBuYW1lOiAnYWNjb3VudCcsXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5BQ0NPVU5UX1ZJRVdfVFJJR0dFUixcbiAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5BQ0NPVU5UX1ZJRVdfVFJJR0dFUixcbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiB0aGlzLmNvbnRlbnRDb250YWluZXIsIGVsZW1lbnQ6IHRoaXMubWFpblNlY3Rpb259LFxuICAgICAgICAgIHtzZWN0aW9uOiB0aGlzLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHRoaXMudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYWNjb3VudFZpZXc7XG4gICAgfSwgLy8gZW5kIG9mIFwiYWRkQWNjb3VudFZpZXcoKVwiXG5cbiAgICBhZGRBY2NvdW50OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgVFJJR0dFUl9BQ0NPVU5ULFxuICAgICAgICAgIHZpZXdBY2NvdW50LFxuICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICBpbnRlcmFjdGlvbixcbiAgICAgICAgICBmZWF0dXJlcztcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vVFJJR0dFUl9BQ0NPVU5UID0gJ0FDQ09VTlRfVklFV19UUklHR0VSXycgKyBvcHRpb25zLnR5cGUudG9VcHBlckNhc2UoKTtcblxuICAgICAgdmlld0FjY291bnQgPSBzZWxmLmFkZEFjY291bnQoe1xuICAgICAgICBuYW1lOiAnQWNjb3VudCcsXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogJ0FjY291bnQnLC8vbGFuZ0NvbnN0YW50c1tUUklHR0VSX0RSQVddLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ2M0Z19hY2NvdW50X3RyaWdnZXInLC8vY3NzQ29uc3RhbnRzW1RSSUdHRVJfRFJBV11cbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiBzZWxmLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHNlbGYudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF0sXG4gICAgICAgIGluaXRGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgLy8gU2hvdyBsb2FkaW5nIGFuaW1hdGlvblxuICAgICAgICAgIHNlbGYuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgICAgICAvLyBwcmludEZ1bmN0aW9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgLy8gICB2YXIgaW5mb0J1dHRvbixcbiAgICAgICAgICAvLyAgICAgICBmZWF0dXJlR2VvbWV0cnksXG4gICAgICAgICAgLy8gICAgICAgdHJhbnNsYXRlSW50ZXJhY3Rpb24sXG4gICAgICAgICAgLy8gICAgICAgbW9kaWZ5SW50ZXJhY3Rpb24sXG4gICAgICAgICAgLy8gICAgICAgbW9kaWZ5QnV0dG9uLFxuICAgICAgICAgIC8vICAgICAgIGFwcGx5QnV0dG9uO1xuICAgICAgICAgIC8vXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyAgICAgaW5mb0J1dHRvbiA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vICAgLy8gYWRkIGFwcGx5IGJ1dHRvblxuICAgICAgICAgIC8vICAgYXBwbHlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAvLyAgIGFwcGx5QnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLkVESVRPUl9GRUFUVVJFX0FQUExZO1xuICAgICAgICAgIC8vICAgYXBwbHlCdXR0b24udGl0bGUgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9GRUFUVVJFX0FQUExZO1xuICAgICAgICAgIC8vICAgYXBwbHlCdXR0b24uc2V0QXR0cmlidXRlKCdmZWF0X2lkJywgaSk7XG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyB9OyAvLyBlbmQgb2YgXCJtb2RpZnlGZWF0dXJlRnVuY3Rpb24oKVwiXG5cbiAgICAgICAgICBmZWF0dXJlcyA9IG5ldyBvbC5Db2xsZWN0aW9uKCk7XG5cbiAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBhY3RpdmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIH0sXG4gICAgICAgIGRlYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHZpZXdBY2NvdW50O1xuICAgIH0gLy8gZW5kIG9mIFwiYWRkQWNjb3VudCgpXCJcblxuICB9KTtcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCBsZXQgQWNjb3VudCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5BY2NvdW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1hY2NvdW50LmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzR2VybWFufSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNFbmdsaXNofSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWVuXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtTaWRlYm9hcmR9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc2lkZWJvYXJkXCI7XG5pbXBvcnQge1Rvb2x0aXBQb3BVcH0gZnJvbSBcIi4vYzRnLW1hcHMtbWlzYy10b29sdGlwcG9wdXBcIjtcblxubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9IGVsc2UgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJlblwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNFbmdsaXNoO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrXG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH1cbn1cblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZCB7YzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmR9XG4gICAqXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gIG1hcENvbnRyb2xsZXIgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuRWRpdG9yID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgIC8vIGV4dGVuZCBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgbmFtZTogJ2VkaXRvcicsXG4gICAgICB0eXBlOiAnZnJvbnRlbmQnLFxuICAgICAgZGF0YUZpZWxkOiBmYWxzZSxcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgIGRyYXdNb2RlczogW1xuICAgICAgICAnUG9pbnQnLFxuICAgICAgICAnTGluZScsXG4gICAgICAgICdQb2x5Z29uJyxcbiAgICAgICAgJ0NpcmNsZScsXG4gICAgICAgICdGcmVlaGFuZCdcbiAgICAgIF0sXG4gICAgICBkaXJlY3Rpb246ICdsZWZ0JyxcbiAgICAgIGhlYWRsaW5lOiBsYW5nQ29uc3RhbnRzLkVESVRPUlxuICAgICAgLy8gaW5pdE1vZGU6ICdzZWxlY3QnXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0NvdWwgbm90IGluaXRpYWxsaXplIEVkaXRvciwgd2l0aG91dCB2YWxpZCBtYXBDb250cm9sbGVyLicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vd2luZG93LmM0Z01hcHNIb29rcy5lZGl0b3JfbG9hZFRhYnMgPSBbXTtcbiAgICAvL3dpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkID0gW107XG4gICAgdGhpcy50YWJzID0gW107XG4gICAgLy8gQFRPRE9cbiAgICAvLyB0aGlzLnR5cGVMYXllciA9IHVuZGVmaW5lZDtcbiAgICAvLyB0aGlzLmFjdGl2ZU1vZGUgPSB0aGlzLm9wdGlvbnMuaW5pdE1vZGU7XG4gICAgLy8gdGhpcy52ZWN0b3JTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3RvcigpO1xuICAgIC8vIHRoaXMuYWN0aXZlRHJhd0ludGVyYWN0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFzdERyYXdJbnRlcmFjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnByb3h5ID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmRhdGFGaWVsZCAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmRhdGFGaWVsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5kYXRhRmllbGQgPSAkKHRoaXMub3B0aW9ucy5kYXRhRmllbGQpIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGNhbGwgcGFyZW50IGNvbnN0cnVjdG9yXG4gICAgU2lkZWJvYXJkLmNhbGwodGhpcywgdGhpcy5vcHRpb25zKTtcbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5FZGl0b3IsIFNpZGVib2FyZCk7XG5cbiAgLyoqXG4gICAqIE1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuRWRpdG9yLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuRWRpdG9yLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZWQgd2hlbiB0aGUgZWRpdG9yIHdpbGwgYmUgb3BlbmVkIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICAgKiBbaW5pdCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgUmV0dXJucyB8dHJ1ZXwgb24gc3VjY2Vzc1xuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uIChvcHRfZXh0ZXJuYWxpbml0KSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBsYXllclN0eWxlRnVuY3Rpb24sXG4gICAgICAgICAgdmlld1NlbGVjdDtcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICBsYXllclN0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbiAoZmVhdHVyZSwgcHJvamVjdGlvbikge1xuICAgICAgICB2YXIgc3R5bGVJZDtcblxuICAgICAgICBpZiAoZmVhdHVyZSAmJiB0eXBlb2YgZmVhdHVyZS5nZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBnZXQgdGhlIHN0eWxlSWQgb2YgdGhlIGN1cnJlbnQgZmVhdHVyZVxuICAgICAgICAgIHN0eWxlSWQgPSBmZWF0dXJlLmdldCgnc3R5bGVJZCcpO1xuICAgICAgICAgIC8vIGFuZCBleGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBmdW5jdGlvblxuICAgICAgICAgIGlmIChzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKGZlYXR1cmUsIHByb2plY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICAvLyBBZGQgZWRpdG9yIGxheWVyc1xuICAgICAgdGhpcy5lZGl0UG9pbnRMYXllciA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe3NvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3IoKSwgc3R5bGU6IGxheWVyU3R5bGVGdW5jdGlvbn0pO1xuICAgICAgdGhpcy5lZGl0TGluZUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpLCBzdHlsZTogbGF5ZXJTdHlsZUZ1bmN0aW9ufSk7XG4gICAgICB0aGlzLmVkaXRQb2x5Z29uTGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yKHtzb3VyY2U6IG5ldyBvbC5zb3VyY2UuVmVjdG9yKCksIHN0eWxlOiBsYXllclN0eWxlRnVuY3Rpb259KTtcbiAgICAgIHRoaXMuZWRpdENpcmNsZUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpLCBzdHlsZTogbGF5ZXJTdHlsZUZ1bmN0aW9ufSk7XG4gICAgICB0aGlzLmVkaXRGcmVlaGFuZExheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpLCBzdHlsZTogbGF5ZXJTdHlsZUZ1bmN0aW9ufSk7XG5cbiAgICAgIHRoaXMuZWRpdExheWVyR3JvdXAgPSBuZXcgb2wubGF5ZXIuR3JvdXAoe1xuICAgICAgICBsYXllcnM6IG5ldyBvbC5Db2xsZWN0aW9uKFtcbiAgICAgICAgICB0aGlzLmVkaXRGcmVlaGFuZExheWVyLFxuICAgICAgICAgIHRoaXMuZWRpdENpcmNsZUxheWVyLFxuICAgICAgICAgIHRoaXMuZWRpdFBvbHlnb25MYXllcixcbiAgICAgICAgICB0aGlzLmVkaXRMaW5lTGF5ZXIsXG4gICAgICAgICAgdGhpcy5lZGl0UG9pbnRMYXllclxuICAgICAgICBdKSxcbiAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIodGhpcy5lZGl0TGF5ZXJHcm91cCk7XG5cbiAgICAgIC8vIEFkZCBhbmQgYWN0aXZhdGUgc2VsZWN0IHZpZXdcbiAgICAgIHRoaXMudGFicy5wdXNoKHRoaXMuYWRkU2VsZWN0VmlldygpKTtcbiAgICAgIHRoaXMudGFic1swXS5hY3RpdmF0ZSgpO1xuXG4gICAgICAvLyAgIEFKQVg6IGdldCBlZGl0b3IgY29uZmlnXG4gICAgICAkLmdldEpTT04oc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkuZWRpdG9yICsgJy8nICsgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5wcm9maWxlKVxuICAgICAgICAgIC8vIENyZWF0ZSB2aWV3cyBmb3IgZHJhdy1mZWF0dXJlcyB3aXRoIGF0IGxlYXN0IG9uZSBsb2NhdGlvbnN0eWxlXG4gICAgICAgICAgLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcblxuICAgICAgICAgICAgLy8gRHJhdy1wb2ludCB2aWV3XG4gICAgICAgICAgICBpZiAoZGF0YS5zdHlsZXNfcG9pbnQubGVuZ3RoICYmIGRhdGEuc3R5bGVzX3BvaW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgc2VsZi50YWJzLnB1c2goc2VsZi5hZGREcmF3Vmlldyh7dHlwZTogJ1BvaW50Jywgc3R5bGVJZHM6IGRhdGEuc3R5bGVzX3BvaW50fSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRHJhdy1saW5lIHZpZXdcbiAgICAgICAgICAgIGlmIChkYXRhLnN0eWxlc19saW5lLmxlbmd0aCAmJiBkYXRhLnN0eWxlc19saW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgc2VsZi50YWJzLnB1c2goc2VsZi5hZGREcmF3Vmlldyh7dHlwZTogJ0xpbmVTdHJpbmcnLCBzdHlsZUlkczogZGF0YS5zdHlsZXNfbGluZX0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERyYXctcG9seWdvbiB2aWV3XG4gICAgICAgICAgICBpZiAoZGF0YS5zdHlsZXNfcG9seWdvbi5sZW5ndGggJiYgZGF0YS5zdHlsZXNfcG9seWdvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHNlbGYudGFicy5wdXNoKHNlbGYuYWRkRHJhd1ZpZXcoe3R5cGU6ICdQb2x5Z29uJywgc3R5bGVJZHM6IGRhdGEuc3R5bGVzX3BvbHlnb259KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEcmF3LWNpcmNsZSB2aWV3XG4gICAgICAgICAgICBpZiAoZGF0YS5zdHlsZXNfY2lyY2xlLmxlbmd0aCAmJiBkYXRhLnN0eWxlc19jaXJjbGUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNlbGYudGFicy5wdXNoKHNlbGYuYWRkRHJhd1ZpZXcoe3R5cGU6ICdDaXJjbGUnLCBzdHlsZUlkczogZGF0YS5zdHlsZXNfY2lyY2xlfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRHJhdy1mcmVlaGFuZCB2aWV3XG4gICAgICAgICAgICBpZiAoZGF0YS5zdHlsZXNfZnJlZWhhbmQubGVuZ3RoICYmIGRhdGEuc3R5bGVzX2ZyZWVoYW5kLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzZWxmLnRhYnMucHVzaChzZWxmLmFkZERyYXdWaWV3KHt0eXBlOiAnRnJlZWhhbmQnLCBzdHlsZUlkczogZGF0YS5zdHlsZXNfZnJlZWhhbmR9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDYWxsIGhvb2sgZnVuY3Rpb24gZm9yIGR5bmFtaWNhbGx5IGFkZGVkIHRhYnNcbiAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX2xvYWRUYWJzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9sb2FkVGFicywgc2VsZik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZhaWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQFRPRE8gZXJyb3ItbWVzc2FnZXNcbiAgICAgICAgICAgIC8vICAgMSkgVmlzaWJsZSBtZXNzYWdlIDQgdXNlcnMgKGkxOG4pXG4gICAgICAgICAgICAvLyAgIDIpIFRlY2huaWNhbCBjb25zb2xlLndhcm5cbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSB0cnlpbmcgdG8gbG9hZCB0aGUgZWRpdG9yIGNvbmZpZ3VyYXRpb24uLi4nKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxheWVycztcbiAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMudHlwZSA9PT0gJ2JhY2tlbmQnKSB7XG4gICAgICAgICAgICAgIC8vIGltcG9ydCBHZW9KU09OIHdoZW4gaW4gYmFja2VuZCBtb2RlXG4gICAgICAgICAgICAgIHNlbGYuaW1wb3J0R2VvSlNPTigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbG9hZCBzZXNzaW9uLWZlYXR1cmVzIHdoZW4gaW4gZnJvbnRlbmQgbW9kZVxuICAgICAgICAgICAgICBzZWxmLmxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFkZCBhdXRvc2F2ZSB0byB0aGUgbGF5ZXJzIHdoZW4gYSBmZWF0dXJlIGlzIGFkZGVkXG4gICAgICAgICAgICBsYXllcnMgPSBzZWxmLmVkaXRMYXllckdyb3VwLmdldExheWVycygpO1xuICAgICAgICAgICAgbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICBlbGVtZW50LmdldFNvdXJjZSgpLm9uKCdhZGRmZWF0dXJlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuc2F2ZSgpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vc2VsZi5lZGl0UG9pbnRMYXllci5nZXRTb3VyY2UoKS5vbignYWRkZmVhdHVyZScsIGZ1bmN0aW9uICgpIHtzZWxmLnNhdmUoKTsgfSk7XG4gICAgICAgICAgICAvL3NlbGYuZWRpdExpbmVMYXllci5nZXRTb3VyY2UoKS5vbignYWRkZmVhdHVyZScsIGZ1bmN0aW9uICgpIHtzZWxmLnNhdmUoKTsgfSk7XG4gICAgICAgICAgICAvL3NlbGYuZWRpdFBvbHlnb25MYXllci5nZXRTb3VyY2UoKS5vbignYWRkZmVhdHVyZScsIGZ1bmN0aW9uICgpIHtzZWxmLnNhdmUoKTsgfSk7XG4gICAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgaWYgKG9wdF9leHRlcm5hbGluaXQpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlZCBiZWZvcmUgZWRpdG9yIHdpbGwgYmUgY2xvc2VkXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHByZUNsb3NlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmVkaXRMYXllckdyb3VwLmdldFZpc2libGUoKSkge1xuICAgICAgICB0aGlzLmVkaXRMYXllckdyb3VwLnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlTGF5ZXIodGhpcy5lZGl0TGF5ZXJHcm91cCk7XG4gICAgICB9XG5cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZWQgYmVmb3JlIGVkaXRvciB3aWxsIGJlIG9wZW5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcHJlT3BlbkZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuZWRpdExheWVyR3JvdXAuZ2V0VmlzaWJsZSgpKSB7XG4gICAgICAgIHRoaXMuZWRpdExheWVyR3JvdXAuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKHRoaXMuZWRpdExheWVyR3JvdXApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGRTZWxlY3RWaWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBzZWxlY3RJbnRlcmFjdGlvbixcbiAgICAgICAgICBzZWxlY3RCb3hJbnRlcmFjdGlvbixcbiAgICAgICAgICBzZWxlY3RlZEZlYXR1cmVzLFxuICAgICAgICAgIHNlbGVjdENvbnRlbnRXcmFwcGVyLFxuICAgICAgICAgIHNlbGVjdENvbnRlbnRIZWFkbGluZSxcbiAgICAgICAgICBzZWxlY3RDb250ZW50LFxuICAgICAgICAgIHNlbGVjdENvbnRlbnRJbmZvLFxuICAgICAgICAgIHNlbGVjdFZpZXcsXG4gICAgICAgICAgZm5IYW5kbGVTZWxlY3Rpb247XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICBzZWxlY3RDb250ZW50V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICBzZWxlY3RDb250ZW50SGVhZGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHNlbGVjdENvbnRlbnRIZWFkbGluZS5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9WSUVXX1RSSUdHRVJfU0VMRUNUO1xuICAgICAgc2VsZWN0Q29udGVudEhlYWRsaW5lLmNsYXNzTmFtZSA9ICdjb250ZW50SGVhZGxpbmUnO1xuICAgICAgc2VsZWN0Q29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZWN0Q29udGVudEhlYWRsaW5lKTtcblxuICAgICAgc2VsZWN0Q29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc2VsZWN0Q29udGVudC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuRURJVE9SX0NPTlRFTlRfU0VMRUNUO1xuICAgICAgc2VsZWN0Q29udGVudEluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICBzZWxlY3RDb250ZW50SW5mby5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9TRUxFQ1RfSU5GTztcbiAgICAgIHNlbGVjdENvbnRlbnRJbmZvLmlubmVySFRNTCArPSAnPGJyPjxicj48c3ViPicgKyBsYW5nQ29uc3RhbnRzLkVESVRPUl9TRUxFQ1RfSU5GT19BRERJVElPTkFMICsgJzwvc3ViPic7XG4gICAgICBzZWxlY3RDb250ZW50LmFwcGVuZENoaWxkKHNlbGVjdENvbnRlbnRJbmZvKTtcbiAgICAgIHNlbGVjdENvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKHNlbGVjdENvbnRlbnQpO1xuXG4gICAgICBzZWxlY3RWaWV3ID0gdGhpcy5hZGRWaWV3KHtcbiAgICAgICAgbmFtZTogJ3NlbGVjdCcsXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5FRElUT1JfVklFV19UUklHR0VSX1NFTEVDVCxcbiAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5FRElUT1JfVklFV19UUklHR0VSX1NFTEVDVCxcbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMuY29udGVudENvbnRhaW5lciwgZWxlbWVudDogc2VsZWN0Q29udGVudFdyYXBwZXJ9LFxuICAgICAgICAgIHtzZWN0aW9uOiB0aGlzLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHRoaXMudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF0sXG4gICAgICAgIGluaXRGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGVjdEludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLlNlbGVjdCh7XG4gICAgICAgICAgICBsYXllcnM6IHNlbGYuZWRpdExheWVyR3JvdXAuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKSxcbiAgICAgICAgICAgIHRvZ2dsZUNvbmRpdGlvbjogb2wuZXZlbnRzLmNvbmRpdGlvbi5wbGF0Zm9ybU1vZGlmaWVyS2V5T25seSxcbiAgICAgICAgICAgIHN0eWxlOiBmdW5jdGlvbiAoZmVhdHVyZSwgcHJvamVjdGlvbikge1xuICAgICAgICAgICAgICB2YXIgc3R5bGVJZCxcbiAgICAgICAgICAgICAgICAgIHN0eWxlQXJyYXksXG4gICAgICAgICAgICAgICAgICBzdHlsZVJhZGl1cztcblxuICAgICAgICAgICAgICBpZiAoZmVhdHVyZSAmJiB0eXBlb2YgZmVhdHVyZS5nZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIHN0eWxlSWQgb2YgdGhlIGN1cnJlbnQgZmVhdHVyZVxuICAgICAgICAgICAgICAgIHN0eWxlSWQgPSBmZWF0dXJlLmdldCgnc3R5bGVJZCcpO1xuICAgICAgICAgICAgICAgIC8vIGFuZCBleGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBmdW5jdGlvblxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXSkge1xuICAgICAgICAgICAgICAgICAgc3R5bGVBcnJheSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKGZlYXR1cmUsIHByb2plY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlQXJyYXlbMF0uZ2V0SW1hZ2UgPT09ICdmdW5jdGlvbicgJiYgc3R5bGVBcnJheVswXS5nZXRJbWFnZSgpIGluc3RhbmNlb2Ygb2wuc3R5bGUuSWNvbikge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZVJhZGl1cyA9IDU7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZVJhZGl1cyA9IHBhcnNlSW50KHN0eWxlQXJyYXlbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMoKSwgMTApICsgNDtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgc3R5bGVBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LC43KScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogc3R5bGVSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LC43KScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA1XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LC41KSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZUFycmF5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7IC8vIHNlbGVjdEludGVyYWN0aW9uXG5cbiAgICAgICAgICBzZWxlY3RlZEZlYXR1cmVzID0gc2VsZWN0SW50ZXJhY3Rpb24uZ2V0RmVhdHVyZXMoKTtcblxuICAgICAgICAgIHNlbGVjdEJveEludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLkRyYWdCb3goe2NvbmRpdGlvbjogb2wuZXZlbnRzLmNvbmRpdGlvbi5zaGlmdEtleU9ubHl9KTtcblxuICAgICAgICAgIHNlbGVjdEJveEludGVyYWN0aW9uLm9uKCdib3hlbmQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIGV4dGVudCA9IHNlbGVjdEJveEludGVyYWN0aW9uLmdldEdlb21ldHJ5KCkuZ2V0RXh0ZW50KCk7XG5cbiAgICAgICAgICAgIHNlbGYuZWRpdExheWVyR3JvdXAuZ2V0TGF5ZXJzKCkuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgICAgbGF5ZXIuZ2V0U291cmNlKCkuZm9yRWFjaEZlYXR1cmVJbnRlcnNlY3RpbmdFeHRlbnQoZXh0ZW50LCBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmbkhhbmRsZVNlbGVjdGlvbigpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gY2xlYXIgc2VsZWN0aW9uIHdoZW4gZHJhd2luZyBhIG5ldyBib3ggYW5kIHdoZW4gY2xpY2tpbmcgb24gdGhlIG1hcFxuICAgICAgICAgIHNlbGVjdEJveEludGVyYWN0aW9uLm9uKCdib3hzdGFydCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBzZWxlY3RlZEZlYXR1cmVzLmNsZWFyKCk7XG4gICAgICAgICAgICBmbkhhbmRsZVNlbGVjdGlvbigpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm5IYW5kbGVTZWxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICBqLFxuICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgIGVkaXRvclZhcnMsXG4gICAgICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LFxuICAgICAgICAgICAgICAgIGlucHV0TmFtZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgbW9kaWZ5QnV0dG9uRWxlbWVudCxcbiAgICAgICAgICAgICAgICBkZWxldGVCdXR0b25FbGVtZW50LFxuICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgc3Ryb25nRWxlbWVudCxcbiAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZmVhdHVyZUNvdW50LFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZSxcbiAgICAgICAgICAgICAgICBibHVyT25FbnRlcixcbiAgICAgICAgICAgICAgICBpbnB1dENoYW5nZUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgbmFtZUNoYW5nZUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgbW9kaWZ5RmVhdHVyZUZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgIGRlbGV0ZUZlYXR1cmVGdW5jdGlvbixcbiAgICAgICAgICAgICAgICByZW5kZXJTZWxlY3RlZEZlYXR1cmVzTGlzdDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLmFwcGx5RmVhdHVyZU1vZGlmaWNhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBzZWxmLmFwcGx5RmVhdHVyZU1vZGlmaWNhdGlvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBibHVyT25FbnRlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5ibHVyKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9OyAvLyBlbmQgb2YgXCJibHVyT25FbnRlcigpXCJcblxuICAgICAgICAgICAgbmFtZUNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGNoYW5nZWRGZWF0dXJlO1xuICAgICAgICAgICAgICBjaGFuZ2VkRmVhdHVyZSA9IHNlbGVjdGVkRmVhdHVyZXMuaXRlbShldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdmZWF0X2lkJykpO1xuICAgICAgICAgICAgICBjaGFuZ2VkRmVhdHVyZS5zZXQoXG4gICAgICAgICAgICAgICAgICAndG9vbHRpcCcsXG4gICAgICAgICAgICAgICAgICB1dGlscy5lbmNvZGVHZW9Kc29uUHJvcGVydHkoZXZlbnQudGFyZ2V0LnZhbHVlIHx8ICcnKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBzZWxmLnNhdmUoKTtcbiAgICAgICAgICAgICAgLy8gQ2FsbCBob29rIHRvIG5vdGlmeSB0aGUgZmVhdHVyZSBjaGFuZ2VcbiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5lZGl0b3JfZmVhdHVyZUNoYW5nZWQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5lZGl0b3JfZmVhdHVyZUNoYW5nZWQsIHtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmU6IGNoYW5nZWRGZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncmVuYW1lZCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwibmFtZUNoYW5nZUhhbmRsZXIoKVwiXG5cbiAgICAgICAgICAgIGlucHV0Q2hhbmdlSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICB2YXIgY3VycmVudFZhcnMsXG4gICAgICAgICAgICAgICAgICBjaGFuZ2VkRmVhdHVyZTtcbiAgICAgICAgICAgICAgY2hhbmdlZEZlYXR1cmUgPSBzZWxlY3RlZEZlYXR1cmVzLml0ZW0oZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZmVhdF9pZCcpKTtcbiAgICAgICAgICAgICAgY3VycmVudFZhcnMgPSBjaGFuZ2VkRmVhdHVyZS5nZXQoJ2VkaXRvclZhcnMnKTtcbiAgICAgICAgICAgICAgY3VycmVudFZhcnNbZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgndmFyX2lkJyldLnZhbHVlID0gdXRpbHMuZW5jb2RlR2VvSnNvblByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlIHx8ICcnXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGNoYW5nZWRGZWF0dXJlLnNldCgnZWRpdG9yVmFycycsIGN1cnJlbnRWYXJzKTtcbiAgICAgICAgICAgICAgc2VsZi5zYXZlKCk7XG4gICAgICAgICAgICAgIC8vIENhbGwgaG9vayB0byBub3RpZnkgdGhlIGZlYXR1cmUgY2hhbmdlXG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkLCB7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlOiBjaGFuZ2VkRmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2NoYW5nZWRfdmFyJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9OyAvLyBlbmQgb2YgXCJpbnB1dENoYW5nZUhhbmRsZXIoKVwiXG5cbiAgICAgICAgICAgIG1vZGlmeUZlYXR1cmVGdW5jdGlvbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICB2YXIgbW9kaWZ5RmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVHZW9tZXRyeSxcbiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUludGVyYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgbW9kaWZ5SW50ZXJhY3Rpb24sXG4gICAgICAgICAgICAgICAgICBtb2RpZnlCdXR0b24sXG4gICAgICAgICAgICAgICAgICBhcHBseUJ1dHRvbjtcblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlbGYuYXBwbHlGZWF0dXJlTW9kaWZpY2F0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG1vZGlmeUJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgICAgICAgICAvLyBnZXQgZmVhdHVyZSB0aGF0IHNob3VsZCBiZSBtb2RpZmllZFxuICAgICAgICAgICAgICBtb2RpZnlGZWF0dXJlID0gc2VsZWN0ZWRGZWF0dXJlcy5pdGVtKG1vZGlmeUJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2ZlYXRfaWQnKSk7XG4gICAgICAgICAgICAgIGlmICghbW9kaWZ5RmVhdHVyZSB8fCB0eXBlb2YgbW9kaWZ5RmVhdHVyZS5nZXRHZW9tZXRyeSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZlYXR1cmVHZW9tZXRyeSA9IG1vZGlmeUZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcbiAgICAgICAgICAgICAgdHJhbnNsYXRlSW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgbW9kaWZ5SW50ZXJhY3Rpb24gPSBmYWxzZTtcblxuICAgICAgICAgICAgICBpZiAoIShmZWF0dXJlR2VvbWV0cnkgaW5zdGFuY2VvZiBvbC5nZW9tLkxpbmVTdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlSW50ZXJhY3Rpb24gPSBuZXcgb2wuaW50ZXJhY3Rpb24uVHJhbnNsYXRlKHtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBuZXcgb2wuQ29sbGVjdGlvbihbbW9kaWZ5RmVhdHVyZV0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZEludGVyYWN0aW9uKHRyYW5zbGF0ZUludGVyYWN0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIShmZWF0dXJlR2VvbWV0cnkgaW5zdGFuY2VvZiBvbC5nZW9tLlBvaW50KSkge1xuICAgICAgICAgICAgICAgIG1vZGlmeUludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLk1vZGlmeSh7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlczogbmV3IG9sLkNvbGxlY3Rpb24oW21vZGlmeUZlYXR1cmVdKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihtb2RpZnlJbnRlcmFjdGlvbik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzZWxlY3RJbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuXG4gICAgICAgICAgICAgIC8vIGFkZCBhcHBseSBidXR0b25cbiAgICAgICAgICAgICAgYXBwbHlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgYXBwbHlCdXR0b24uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyAnICcgKyBjc3NDb25zdGFudHMuRURJVE9SX0ZFQVRVUkVfQVBQTFk7XG4gICAgICAgICAgICAgIGFwcGx5QnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5FRElUT1JfRkVBVFVSRV9BUFBMWTtcbiAgICAgICAgICAgICAgYXBwbHlCdXR0b24uc2V0QXR0cmlidXRlKCdmZWF0X2lkJywgaSk7XG5cbiAgICAgICAgICAgICAgc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRlSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlSW50ZXJhY3Rpb24odHJhbnNsYXRlSW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlSW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1vZGlmeUludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlSW50ZXJhY3Rpb24obW9kaWZ5SW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgbW9kaWZ5SW50ZXJhY3Rpb24uc2V0QWN0aXZlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIG1vZGlmeUludGVyYWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGVjdEludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcblxuICAgICAgICAgICAgICAgIGFwcGx5QnV0dG9uID0gYXBwbHlCdXR0b24ucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobW9kaWZ5QnV0dG9uLCBhcHBseUJ1dHRvbik7XG4gICAgICAgICAgICAgICAgc2VsZi5zYXZlKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBDYWxsIGhvb2sgdG8gbm90aWZ5IHRoZSBmZWF0dXJlIGNoYW5nZVxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5lZGl0b3JfZmVhdHVyZUNoYW5nZWQsIHtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZTogbW9kaWZ5RmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnZWRpdGVkJ1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICQoYXBwbHlCdXR0b24pLmNsaWNrKHNlbGYuYXBwbHlGZWF0dXJlTW9kaWZpY2F0aW9uKTtcbiAgICAgICAgICAgICAgbW9kaWZ5QnV0dG9uID0gbW9kaWZ5QnV0dG9uLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGFwcGx5QnV0dG9uLCBtb2RpZnlCdXR0b24pO1xuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwibW9kaWZ5RmVhdHVyZUZ1bmN0aW9uKClcIlxuXG4gICAgICAgICAgICBkZWxldGVGZWF0dXJlRnVuY3Rpb24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVHZW9tZXRyeSxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UsXG4gICAgICAgICAgICAgICAgICBkZWxldGVGZWF0dXJlO1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmFwcGx5RmVhdHVyZU1vZGlmaWNhdGlvbigpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZmVhdHVyZUluZGV4ID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZmVhdF9pZCcpO1xuICAgICAgICAgICAgICBkZWxldGVGZWF0dXJlID0gc2VsZWN0ZWRGZWF0dXJlcy5pdGVtKGZlYXR1cmVJbmRleCk7XG4gICAgICAgICAgICAgIGZlYXR1cmVHZW9tZXRyeSA9IGRlbGV0ZUZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcblxuICAgICAgICAgICAgICAvLyBmaW5kIHJpZ2h0IHNvdXJjZVxuICAgICAgICAgICAgICBpZiAoZmVhdHVyZUdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5Qb2ludCkge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UgPSBzZWxmLmVkaXRQb2ludExheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmVHZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uTGluZVN0cmluZykge1xuICAgICAgICAgICAgICAgICBmZWF0dXJlU291cmNlID0gc2VsZi5lZGl0TGluZUxheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmVHZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbikge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UgPSBzZWxmLmVkaXRQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmVhdHVyZUdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5DaXJjbGUpIHtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UgPSBzZWxmLmVkaXRDaXJjbGVMYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjb3VsZCBub3QgZmluZCByaWdodCBzb3VyY2VcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBkZWxldGUgdGhlIGZlYXR1cmUuIFVuYWJsZSB0byBmaW5kIGFwcHJvcHJpYXRlIHNvdXJjZS4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyByZW1vdmUgRmVhdHVyZSBmcm9tIHRoZSBzb3VyY2VcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UucmVtb3ZlRmVhdHVyZShkZWxldGVGZWF0dXJlKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZUdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5MaW5lU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVNvdXJjZSA9IHNlbGYuZWRpdEZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVNvdXJjZS5yZW1vdmVGZWF0dXJlKGRlbGV0ZUZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIGFuZCBmcm9tIHRoZSBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgc2VsZWN0ZWRGZWF0dXJlcy5yZW1vdmUoZGVsZXRlRmVhdHVyZSk7XG5cbiAgICAgICAgICAgICAgLy8gcmVyZW5kZXIgdGhlIHNlbGVjdGlvbkxpc3RcbiAgICAgICAgICAgICAgcmVuZGVyU2VsZWN0ZWRGZWF0dXJlc0xpc3QoKTtcbiAgICAgICAgICAgICAgc2VsZi5zYXZlKCk7XG4gICAgICAgICAgICAgIC8vIENhbGwgaG9vayB0byBub3RpZnkgdGhlIGZlYXR1cmUgY2hhbmdlXG4gICAgICAgICAgICAgIC8vIE1heWJlIHBhc3MgdGhlIHJlbWFpbmluZyBmZWF0dXJlcyBpbnN0ZWFkIG9mIHRoZSBkZWxldGVkRmVhdHVyZSA/XG4gICAgICAgICAgICAgIC8vIE9yIG1heWJlIGEgc2Vjb25kIGhvb2sgZm9yIGRlbGV0aW9uLCB3aGVyZSBib3RoIGlzIHBhc3NlZCA/XG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkLCB7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlOiBkZWxldGVGZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnZGVsZXRlZCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwiZGVsZXRlRmVhdHVyZUZ1bmN0aW9uKClcIlxuXG4gICAgICAgICAgICByZW5kZXJTZWxlY3RlZEZlYXR1cmVzTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZmVhdHVyZUNvdW50ID0gc2VsZWN0ZWRGZWF0dXJlcy5nZXRMZW5ndGgoKTtcbiAgICAgICAgICAgICAgc2VsZWN0Q29udGVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgaWYgKGZlYXR1cmVDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZmVhdHVyZUNvdW50OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZSA9IHNlbGVjdGVkRmVhdHVyZXMuaXRlbShpKTtcbiAgICAgICAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2g0Jyk7XG4gICAgICAgICAgICAgICAgICAvLyBhZGQgbmFtZSBpbnB1dGZpZWxkXG4gICAgICAgICAgICAgICAgICBpbnB1dE5hbWVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgIGlucHV0TmFtZUVsZW1lbnQudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgICAgICAgICAgIGlucHV0TmFtZUVsZW1lbnQuaWQgPSBpO1xuICAgICAgICAgICAgICAgICAgaW5wdXROYW1lRWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJyxcbiAgICAgICAgICAgICAgICAgICAgICB1dGlscy5kZWNvZGVHZW9Kc29uUHJvcGVydHkoc2VsZWN0ZWRGZWF0dXJlLmdldCgndG9vbHRpcCcpIHx8ICcnKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGlucHV0TmFtZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdmZWF0X2lkJywgaSk7XG4gICAgICAgICAgICAgICAgICAkKGlucHV0TmFtZUVsZW1lbnQpLmtleWRvd24oYmx1ck9uRW50ZXIpO1xuICAgICAgICAgICAgICAgICAgaW5wdXROYW1lRWxlbWVudC5vbmNoYW5nZSA9IG5hbWVDaGFuZ2VIYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LmFwcGVuZENoaWxkKGlucHV0TmFtZUVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgLy8gYWRkIG1vZGlmeSBidXR0b25cbiAgICAgICAgICAgICAgICAgIG1vZGlmeUJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICAgIG1vZGlmeUJ1dHRvbkVsZW1lbnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyAnICcgKyBjc3NDb25zdGFudHMuRURJVE9SX0ZFQVRVUkVfTU9ESUZZO1xuICAgICAgICAgICAgICAgICAgbW9kaWZ5QnV0dG9uRWxlbWVudC50aXRsZSA9IGxhbmdDb25zdGFudHMuRURJVE9SX0ZFQVRVUkVfTU9ESUZZO1xuICAgICAgICAgICAgICAgICAgbW9kaWZ5QnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZlYXRfaWQnLCBpKTtcbiAgICAgICAgICAgICAgICAgICQobW9kaWZ5QnV0dG9uRWxlbWVudCkuY2xpY2sobW9kaWZ5RmVhdHVyZUZ1bmN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudC5hcHBlbmRDaGlsZChtb2RpZnlCdXR0b25FbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgIC8vIGFkZCBkZWxldGUgYnV0dG9uXG4gICAgICAgICAgICAgICAgICBkZWxldGVCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgICBkZWxldGVCdXR0b25FbGVtZW50LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLkVESVRPUl9GRUFUVVJFX0RFTEVURTtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbkVsZW1lbnQudGl0bGUgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9GRUFUVVJFX0RFTEVURTtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdmZWF0X2lkJywgaSk7XG4gICAgICAgICAgICAgICAgICAkKGRlbGV0ZUJ1dHRvbkVsZW1lbnQpLmNsaWNrKGRlbGV0ZUZlYXR1cmVGdW5jdGlvbik7XG4gICAgICAgICAgICAgICAgICBoZWFkbGluZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZGVsZXRlQnV0dG9uRWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQoaGVhZGxpbmVFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEZlYXR1cmUuZ2V0KCdtZWFzdXJlZExlbmd0aCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEZlYXR1cmUuZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uTGluZVN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gbGFuZ0NvbnN0YW50cy5MRU5HVEg7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRGZWF0dXJlLmdldEdlb21ldHJ5KCkgaW5zdGFuY2VvZiBvbC5nZW9tLlBvbHlnb24pe1xuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gbGFuZ0NvbnN0YW50cy5QRVJJTUVURVI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IGxhbmdDb25zdGFudHMuUkFESVVTO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQuaW5uZXJIVE1MICs9ICc8c3Ryb25nPicgKyBsYWJlbCArICc6PC9zdHJvbmc+ICcgKyBzZWxlY3RlZEZlYXR1cmUuZ2V0KCdtZWFzdXJlZExlbmd0aCcpLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0Q29udGVudC5hcHBlbmRDaGlsZChwYXJhZ3JhcGhFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEZlYXR1cmUuZ2V0KCdtZWFzdXJlZEFyZWEnKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmlubmVySFRNTCArPSAnPHN0cm9uZz4nICsgbGFuZ0NvbnN0YW50cy5TVVJGQUNFQVJFQSArICc6PC9zdHJvbmc+ICcgKyBzZWxlY3RlZEZlYXR1cmUuZ2V0KCdtZWFzdXJlZEFyZWEnKS5odG1sVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQocGFyYWdyYXBoRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGZWF0dXJlLmdldCgnbWVhc3VyZWRSYWRpdXMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5pbm5lckhUTUwgKz0gJzxzdHJvbmc+JyArIGxhbmdDb25zdGFudHMuUkFESVVTICsgJzo8L3N0cm9uZz4gJyArIHNlbGVjdGVkRmVhdHVyZS5nZXQoJ21lYXN1cmVkUmFkaXVzJykuaHRtbFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQocGFyYWdyYXBoRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvLyBjaGVjayBhbmQgYXBwZW5kIGVkaXRvci12YXJzXG4gICAgICAgICAgICAgICAgICBlZGl0b3JWYXJzID0gc2VsZWN0ZWRGZWF0dXJlLmdldCgnZWRpdG9yVmFycycpO1xuICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGVkaXRvclZhcnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgICAgICAgc3Ryb25nRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0cm9uZycpO1xuICAgICAgICAgICAgICAgICAgICBzdHJvbmdFbGVtZW50LmlubmVySFRNTCA9IGVkaXRvclZhcnNbal0ubGFiZWw7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5pZCA9IGkgKyAnLScgKyBqO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmRlY29kZUdlb0pzb25Qcm9wZXJ0eShlZGl0b3JWYXJzW2pdLnZhbHVlIHx8ICcnKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKCdmZWF0X2lkJywgaSk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3Zhcl9pZCcsIGopO1xuICAgICAgICAgICAgICAgICAgICAkKGlucHV0RWxlbWVudCkua2V5ZG93bihibHVyT25FbnRlcik7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5vbmNoYW5nZSA9IGlucHV0Q2hhbmdlSGFuZGxlcjtcblxuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKHN0cm9uZ0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJykpO1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQocGFyYWdyYXBoRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnRIZWFkbGluZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIC8vIHNlbGYuc3RhdHVzQmFyLmlubmVySFRNTCA9IGZlYXR1cmVDb3VudDtcblxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQoc2VsZWN0Q29udGVudEluZm8pO1xuICAgICAgICAgICAgICAgIC8vIHNlbGYuc3RhdHVzQmFyLmlubmVySFRNTCA9IDA7XG4gICAgICAgICAgICAgICAgc2VsZWN0Q29udGVudEhlYWRsaW5lLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwicmVuZGVyU2VsZWN0ZWRGZWF0dXJlc0xpc3RcIlxuXG4gICAgICAgICAgICByZW5kZXJTZWxlY3RlZEZlYXR1cmVzTGlzdCgpO1xuICAgICAgICAgIH07IC8vIGVuZCBvZiBcImZuSGFuZGxlU2VsZWN0aW9uXCJcblxuICAgICAgICAgIHNlbGVjdEludGVyYWN0aW9uLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGZuSGFuZGxlU2VsZWN0aW9uKGV2ZW50LnRhcmdldC5nZXRGZWF0dXJlcygpKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihzZWxlY3RJbnRlcmFjdGlvbik7XG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZEludGVyYWN0aW9uKHNlbGVjdEJveEludGVyYWN0aW9uKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgLy8gRGlzYWJsZSBtYXBIb3ZlclxuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcEhvdmVyLmRlYWN0aXZhdGUoKTtcblxuICAgICAgICAgIC8vIFJlc2V0IGRpc3BsYXksIGlmIG5vIGZlYXR1cmVzIGFyZSBzZWxlY3RlZFxuICAgICAgICAgIGlmIChzZWxlY3RJbnRlcmFjdGlvbi5nZXRGZWF0dXJlcygpLmdldExlbmd0aCgpIDwgMSkge1xuICAgICAgICAgICAgc2VsZWN0Q29udGVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQoc2VsZWN0Q29udGVudEluZm8pO1xuICAgICAgICAgICAgLy8gc2VsZi5zdGF0dXNCYXIuaW5uZXJIVE1MID0gMDtcbiAgICAgICAgICAgIHNlbGVjdENvbnRlbnRIZWFkbGluZS5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRW5hYmxlIGludGVyYWN0aW9uXG4gICAgICAgICAgc2VsZWN0SW50ZXJhY3Rpb24uc2V0QWN0aXZlKHRydWUpO1xuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihzZWxlY3RJbnRlcmFjdGlvbik7XG4gICAgICAgICAgc2VsZWN0Qm94SW50ZXJhY3Rpb24uc2V0QWN0aXZlKHRydWUpO1xuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihzZWxlY3RCb3hJbnRlcmFjdGlvbik7XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVhY3RpdmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLmFwcGx5RmVhdHVyZU1vZGlmaWNhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRGlzYWJsZSBpbnRlcmFjdGlvblxuICAgICAgICAgIHNlbGVjdEludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUludGVyYWN0aW9uKHNlbGVjdEludGVyYWN0aW9uKTtcbiAgICAgICAgICBzZWxlY3RCb3hJbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVJbnRlcmFjdGlvbihzZWxlY3RCb3hJbnRlcmFjdGlvbik7XG5cbiAgICAgICAgICAvLyBlbmFibGUgbWFwSG92ZXJcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXBIb3Zlci5hY3RpdmF0ZSgpO1xuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2VsZWN0VmlldztcbiAgICB9LFxuXG4gICAgYWRkRHJhd1ZpZXc6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBUUklHR0VSX0RSQVcsXG4gICAgICAgICAgZHJhd0NvbnRlbnQsXG4gICAgICAgICAgb3B0aW9uc0RpdixcbiAgICAgICAgICBlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94LFxuICAgICAgICAgIGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3hMYWJlbCxcbiAgICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveCxcbiAgICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveExhYmVsLFxuICAgICAgICAgIGNoZWNrYm94Q2hhbmdlSGFuZGxlcixcbiAgICAgICAgICBkcmF3VmlldyxcbiAgICAgICAgICBhZGREcmF3U3R5bGUsXG4gICAgICAgICAgb2xUeXBlO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgdHlwZTogJ1BvaW50JyxcbiAgICAgICAgc3R5bGVJZHM6IFtdXG4gICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgY2hlY2tib3hDaGFuZ2VIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgLy8gdmFyIGludGVyYWN0aW9uID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmludGVyYWN0aW9uO1xuICAgICAgICAgIC8vIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVJbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgICAgICAgLy8gLy9zZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkSW50ZXJhY3Rpb24oaW50ZXJhY3Rpb24pO1xuXG4gICAgICB9XG5cbiAgICAgIFRSSUdHRVJfRFJBVyA9ICdFRElUT1JfVklFV19UUklHR0VSX0RSQVdfJyArIG9wdGlvbnMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBkcmF3Q29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZHJhd0NvbnRlbnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzWydFRElUT1JfRFJBV19DT05URU5UXycgKyBvcHRpb25zLnR5cGUudG9VcHBlckNhc2UoKV07XG4gICAgICBkcmF3Q29udGVudC5pbm5lckhUTUwgPSAnPGg0PicgKyBsYW5nQ29uc3RhbnRzW1RSSUdHRVJfRFJBV10gKyAnPC9oND4nO1xuXG4gICAgICBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgIT09ICdwb2ludCcpIHtcbiAgICAgICAgb3B0aW9uc0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBvcHRpb25zRGl2LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5FRElUT1JfRFJBV19PUFRJT05TO1xuICAgICAgICBkcmF3Q29udGVudC5hcHBlbmRDaGlsZChvcHRpb25zRGl2KTtcblxuICAgICAgICBlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveC5pZCA9ICdlbmFibGVJbnN0YW50TWVhc3VyZUZvcicgKyBvcHRpb25zLnR5cGU7XG4gICAgICAgIG9wdGlvbnNEaXYuYXBwZW5kQ2hpbGQoZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveCk7XG5cbiAgICAgICAgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveExhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ2VuYWJsZUluc3RhbnRNZWFzdXJlRm9yJyArIG9wdGlvbnMudHlwZSk7XG4gICAgICAgIGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3hMYWJlbC5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9FTkFCTEVfSU5TVEFOVF9NRUFTVVJFO1xuICAgICAgICBvcHRpb25zRGl2LmFwcGVuZENoaWxkKGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3hMYWJlbCk7XG5cbiAgICAgICAgb3B0aW9uc0Rpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKTtcblxuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIC8vIGVuYWJsZUZyZWVoYW5kRHJhd0NoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveC5pZCA9ICdlbmFibGVGcmVlaGFuZERyYXdGb3InICsgb3B0aW9ucy50eXBlO1xuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveC5vbmNoYW5nZSA9IGNoZWNrYm94Q2hhbmdlSGFuZGxlcjtcbiAgICAgICAgLy8gb3B0aW9uc0Rpdi5hcHBlbmRDaGlsZChlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveCk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGVuYWJsZUZyZWVoYW5kRHJhd0NoZWNrYm94TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveExhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ2VuYWJsZUZyZWVoYW5kRHJhd0ZvcicgKyBvcHRpb25zLnR5cGUpO1xuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveExhYmVsLmlubmVySFRNTCA9IGxhbmdDb25zdGFudHMuRURJVE9SX0VOQUJMRV9GUkVFSEFORF9EUkFXO1xuICAgICAgICAvLyBvcHRpb25zRGl2LmFwcGVuZENoaWxkKGVuYWJsZUZyZWVoYW5kRHJhd0NoZWNrYm94TGFiZWwpO1xuICAgICAgfVxuXG4gICAgICBhZGREcmF3U3R5bGUgPSBmdW5jdGlvbiAoc3R5bGVJZCkge1xuICAgICAgICB2YXIgaW50ZXJhY3Rpb25WaWV3LFxuICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgaW50ZXJhY3Rpb24sXG4gICAgICAgICAgICBmZWF0dXJlcyxcbiAgICAgICAgICAgIGVkaXRvclN0eWxlLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBzdHlsZURhdGEsXG4gICAgICAgICAgICBzdHlsZUljb24sXG4gICAgICAgICAgICBzdmdTcmMsXG4gICAgICAgICAgICBzdHlsZUltYWdlLFxuICAgICAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwsXG4gICAgICAgICAgICBmZWF0dXJlSWRDb3VudCxcbiAgICAgICAgICAgIG5hbWU7XG5cbiAgICAgICAgLy8gU3R5bGUgXCJzaG9ydGN1dFwiXG4gICAgICAgIHN0eWxlID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUoKVswXTtcbiAgICAgICAgZWRpdG9yU3R5bGUgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS5lZGl0b3I7XG4gICAgICAgIHN0eWxlRGF0YSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLmxvY1N0eWxlQXJyO1xuICAgICAgICBzdmdTcmMgPSBzdHlsZURhdGEuc3ZnU3JjO1xuXG4gICAgICAgIGZlYXR1cmVJZENvdW50ID0gMDtcblxuICAgICAgICAvLyBDcmVhdGUgbGFiZWwgZm9yIGludGVyYWN0aW9uLXRyaWdnZXJcbiAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIC8vIEBUT0RPIHVzZSBjc3MtY2xhc3MgZm9yIGRpbWVuc2lvbnNcbiAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIHN0eWxlVHJpZ2dlckxhYmVsLnN0eWxlLm1pbldpZHRoID0gJzMwcHgnO1xuICAgICAgICBzdHlsZVRyaWdnZXJMYWJlbC5zdHlsZS5taW5IZWlnaHQgPSAnMzBweCc7XG4gICAgICAgIHN0eWxlVHJpZ2dlckxhYmVsLnN0eWxlLm1hcmdpbiA9ICcycHgnO1xuICAgICAgICAvLyBcInN0eWxlLmdldEltYWdlKCkuZ2V0SW1hZ2UoKVwiLCBkb2VzIG5vdCB3b3JrIGluIGV2ZXJ5IGNhc2VcbiAgICAgICAgc3R5bGVJbWFnZSA9IHN0eWxlLmdldEltYWdlKCkgfHwgdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZWRpdG9yU3R5bGUuaWNvblNyYyB8fCBzdHlsZUltYWdlIGluc3RhbmNlb2Ygb2wuc3R5bGUuSWNvbikge1xuICAgICAgICAgIHN0eWxlSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgaWYgKGVkaXRvclN0eWxlLmljb25TcmMgJiYgKGVkaXRvclN0eWxlLmljb25TcmMuaW5kZXhPZignLicpICE9IC0xKSkge1xuICAgICAgICAgICAgc3R5bGVJY29uLnNyYyA9IGVkaXRvclN0eWxlLmljb25TcmM7XG4gICAgICAgICAgICBpZiAoc3R5bGVEYXRhLmVkaXRvcl9pY29uX3NpemUpIHtcbiAgICAgICAgICAgICAgICBzdHlsZUljb24uaGVpZ2h0ID0gc3R5bGVEYXRhLmVkaXRvcl9pY29uX3NpemVbMF07XG4gICAgICAgICAgICAgICAgc3R5bGVJY29uLndpZHRoID0gc3R5bGVEYXRhLmVkaXRvcl9pY29uX3NpemVbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0eWxlSWNvbi5oZWlnaHQgPSAnMzInO1xuICAgICAgICAgICAgICAgIHN0eWxlSWNvbi53aWR0aCA9ICczMic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlSWNvbi5zcmMgPSBzdHlsZUltYWdlLmdldFNyYygpO1xuICAgICAgICAgICAgc3R5bGVJY29uLnNjYWxlID0gc3R5bGVJbWFnZS5nZXRTY2FsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHlsZVRyaWdnZXJMYWJlbC5hcHBlbmRDaGlsZChzdHlsZUljb24pO1xuICAgICAgICB9IGVsc2UgaWYgKHN2Z1NyYykge1xuICAgICAgICAgICAgaWYgKHN0eWxlRGF0YS5zdmdTcmMgJiYgc3R5bGVEYXRhLmljb25fc2NhbGUgJiYgc3R5bGVEYXRhLmljb25fc2l6ZSkge1xuICAgICAgICAgICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgICAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgICAgICBsZXQgaGVpZ2h0ID0gKHN0eWxlRGF0YS5pY29uX3NpemVbMF0gKiBzdHlsZURhdGEuaWNvbl9zY2FsZSk7XG4gICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gKHN0eWxlRGF0YS5pY29uX3NpemVbMV0gKiBzdHlsZURhdGEuaWNvbl9zY2FsZSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgc3Ryb2tld2lkdGggPSAwO1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZURhdGEuc3Ryb2tld2lkdGggJiYgc3R5bGVEYXRhLnN0cm9rZXdpZHRoLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZXdpZHRoID0gc3R5bGVEYXRhLnN0cm9rZXdpZHRoLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKyAoMiAqIHN0cm9rZXdpZHRoKTtcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aCArICgyICogc3Ryb2tld2lkdGgpO1xuICAgICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIGlmIChzdHlsZURhdGEuZmlsbGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLmZpbGxjb2xvciwgc3R5bGVEYXRhLmZpbGxvcGFjaXR5LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHN0cm9rZXdpZHRoICYmIHN0eWxlRGF0YS5zdHJva2Vjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLnN0cm9rZWNvbG9yLCBzdHlsZURhdGEuc3Ryb2tlb3BhY2l0eS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBzdHJva2V3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLjUsIDAuNSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaWYgKHN0eWxlRGF0YS5pY29uX29wYWNpdHkudmFsdWUgJiYgKHN0eWxlRGF0YS5pY29uX29wYWNpdHkudmFsdWUgPiAwKSkge1xuICAgICAgICAgICAgICAgIC8vICAgICBjdHguZ2xvYmFsQWxwaGEgPSAoc3R5bGVEYXRhLmljb25fb3BhY2l0eS52YWx1ZSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgICAgIGltZy5zcmMgPSBzdHlsZURhdGEuc3ZnU3JjO1xuICAgICAgICAgICAgICAgIGltZy56SW5kZXggPSAxMDA7XG5cbiAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgc3Ryb2tld2lkdGgsIHN0cm9rZXdpZHRoLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHlsZUljb24gPSBjYW52YXM7XG5cbiAgICAgICAgICAgICAgICBzdHlsZVRyaWdnZXJMYWJlbC5zdHlsZS53aWR0aCA9ICh3aWR0aCAqIHNjYWxlKSArICdweCc7XG4gICAgICAgICAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwuc3R5bGUuaGVpZ2h0ID0gKGhlaWdodCAqIHNjYWxlKSArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwuc3R5bGUuYmFja2dyb3VuZCA9IHN0eWxlLmdldEZpbGwoKS5nZXRDb2xvcigpO1xuICAgICAgICAgIHN0eWxlVHJpZ2dlckxhYmVsLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgJyArIHN0eWxlLmdldFN0cm9rZSgpLmdldENvbG9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgaW50ZXJhY3Rpb25WaWV3XG4gICAgICAgIC8vICAgXCJhZGRWaWV3XCIgd2lsbCBiZSB1c2VkIGZvciB0aGlzLCBiZWNhdXNlIHRoZSBmdW5jdGlvbmFsaXR5XG4gICAgICAgIC8vICAgaXN0IG1vc3RseSBlcXVhbFxuICAgICAgICBuYW1lID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0ubmFtZS5yZXBsYWNlKFwiJiM0MDtcIiwgXCIoXCIpLnJlcGxhY2UoXCImIzQxO1wiLCBcIilcIik7XG4gICAgICAgIGludGVyYWN0aW9uVmlldyA9IHNlbGYuYWRkVmlldyh7XG4gICAgICAgICAgbmFtZTogJ2RyYXc6JyArIChzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS50b29sdGlwIHx8IG5hbWUpLFxuICAgICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICAgIGxhYmVsOiBzdHlsZVRyaWdnZXJMYWJlbCxcbiAgICAgICAgICAgIHRpcExhYmVsOiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS50b29sdGlwIHx8IG5hbWUsXG4gICAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5FRElUT1JfRFJBV19UUklHR0VSLFxuICAgICAgICAgICAgdGFyZ2V0OiBkcmF3Q29udGVudCxcbiAgICAgICAgICAgIHdpdGhIZWFkbGluZTogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAgICB7c2VjdGlvbjogc2VsZi5jb250ZW50Q29udGFpbmVyLCBlbGVtZW50OiBkcmF3Q29udGVudH0sXG4gICAgICAgICAgICB7c2VjdGlvbjogc2VsZi50b3BUb29sYmFyLCBlbGVtZW50OiBzZWxmLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgaW5pdEZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25TdHlsZUltYWdlLFxuICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaCxcbiAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwO1xuXG4gICAgICAgICAgICAvLyBPbmx5IHNob3cgb3JpZ2luYWwgaWNvbiwgd2hlbiB0aGUgZHJhd2luZyBQT0lzXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdwb2ludCcgJiYgc3R5bGUuZ2V0SW1hZ2UoKSkge1xuICAgICAgICAgICAgICBpbnRlcmFjdGlvblN0eWxlSW1hZ2UgPSBzdHlsZS5nZXRJbWFnZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaW50ZXJhY3Rpb25TdHlsZUltYWdlID0gbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgZmlsbDogc3R5bGUuZ2V0RmlsbCgpLFxuICAgICAgICAgICAgICAgIHN0cm9rZTogc3R5bGUuZ2V0U3Ryb2tlKCksXG4gICAgICAgICAgICAgICAgcmFkaXVzOiA1LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IGFwcHJvcHJpYXRlIHNvdXJjZVxuICAgICAgICAgICAgc3dpdGNoIChvcHRpb25zLnR5cGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICBjYXNlICdmcmVlaGFuZCc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLmVkaXRGcmVlaGFuZExheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2NpcmNsZSc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLmVkaXRDaXJjbGVMYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdwb2x5Z29uJzpcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLmVkaXRQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2xpbmVzdHJpbmcnOlxuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHNlbGYuZWRpdExpbmVMYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAncG9pbnQnOlxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHNlbGYuZWRpdFBvaW50TGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9sVHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICAgICAgICAgIGlmIChvbFR5cGUgPT0gJ0ZyZWVoYW5kJykge1xuICAgICAgICAgICAgICBvbFR5cGUgPSAnTGluZVN0cmluZydcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmVhdHVyZXMgPSBuZXcgb2wuQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgaW50ZXJhY3Rpb24gPSBuZXcgb2wuaW50ZXJhY3Rpb24uRHJhdyh7XG4gICAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlcyxcbiAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICAgIHR5cGU6IG9sVHlwZSxcbiAgICAgICAgICAgICAgZnJlZWhhbmQ6IG9wdGlvbnMudHlwZSA9PSAnRnJlZWhhbmQnLFxuICAgICAgICAgICAgICBzdHlsZTogW1xuICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsLjUpJyxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHN0eWxlLmdldFN0cm9rZSgpLmdldFdpZHRoKCkgKyAyXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIGltYWdlOiBpbnRlcmFjdGlvblN0eWxlSW1hZ2VcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IHN0eWxlLmdldEdlb21ldHJ5KCksXG4gICAgICAgICAgICAgICAgICBmaWxsOiBzdHlsZS5nZXRGaWxsKCksXG4gICAgICAgICAgICAgICAgICBzdHJva2U6IHN0eWxlLmdldFN0cm9rZSgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEBUT0RPIGRva3VcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICBpbnRlcmFjdGlvbi5vbignZHJhd3N0YXJ0JyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaCA9IGV2ZW50LmZlYXR1cmU7XG4gICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCdzdHlsZUlkJywgc3R5bGVJZCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94ICYmIGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwID0gbmV3IFRvb2x0aXBQb3BVcCh7XG4gICAgICAgICAgICAgICAgICAgICAgbWFwOiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAsXG4gICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGV2ZW50LmNvb3JkaW5hdGUsXG4gICAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBzZWxmKTtcblxuICAgICAgICAgICAgLy8gQFRPRE8gZG9rdVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5vbigncG9pbnRlcm1vdmUnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3ggJiYgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveC5jaGVja2VkICYmIGFjdGl2ZVNrZXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmKGFjdGl2ZVRvb2x0aXAgJiYgdXRpbHMubWVhc3VyZUdlb21ldHJ5KGFjdGl2ZVNrZXRjaC5nZXRHZW9tZXRyeSgpLCB0cnVlKS5yYXdWYWx1ZSAmJiB1dGlscy5tZWFzdXJlR2VvbWV0cnkoYWN0aXZlU2tldGNoLmdldEdlb21ldHJ5KCksIHRydWUpLnJhd1ZhbHVlID09IFwiMC4wMFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZighYWN0aXZlVG9vbHRpcCAmJiB1dGlscy5tZWFzdXJlR2VvbWV0cnkoYWN0aXZlU2tldGNoLmdldEdlb21ldHJ5KCksIHRydWUpLnJhd1ZhbHVlICYmIHV0aWxzLm1lYXN1cmVHZW9tZXRyeShhY3RpdmVTa2V0Y2guZ2V0R2VvbWV0cnkoKSwgdHJ1ZSkucmF3VmFsdWUgIT0gXCIwLjAwXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwID0gbmV3IFRvb2x0aXBQb3BVcCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXA6IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBldmVudC5jb29yZGluYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYoYWN0aXZlVG9vbHRpcCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXAuc2V0UG9zaXRpb24oZXZlbnQuY29vcmRpbmF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXAuc2V0Q29udGVudCh1dGlscy5tZWFzdXJlR2VvbWV0cnkoYWN0aXZlU2tldGNoLmdldEdlb21ldHJ5KCksIHRydWUpLmh0bWxWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHNlbGYpO1xuXG4gICAgICAgICAgICAvLyBAVE9ETyBkb2t1XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgaW50ZXJhY3Rpb24ub24oJ2RyYXdlbmQnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgICAgdmFycyxcbiAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JWYXJzLFxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU7XG5cbiAgICAgICAgICAgICAgICAgIC8vIG5hbWUgdGhlIGZlYXR1cmVcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVJZENvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICBuYW1lID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0ubmFtZS5yZXBsYWNlKFwiJiM0MDtcIiwgXCIoXCIpLnJlcGxhY2UoXCImIzQxO1wiLCBcIilcIik7XG4gICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCd0b29sdGlwJywgKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnRvb2x0aXAgfHwgbmFtZSkgKyAnICgnICsgZmVhdHVyZUlkQ291bnQgKyAnKScpO1xuICAgICAgICAgICAgICAgICAgLy8gYWRkIHN0eWxlSWRcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaC5zZXQoJ3N0eWxlSWQnLCBzdHlsZUlkKTtcbiAgICAgICAgICAgICAgICAgIC8vIGFkZCBtZWFzdXJlbWVudHMgdG8gdGhlIGZlYXR1cmVcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaC5zZXQoJ21lYXN1cmVkTGVuZ3RoJywgdXRpbHMubWVhc3VyZUdlb21ldHJ5KGFjdGl2ZVNrZXRjaC5nZXRHZW9tZXRyeSgpLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdwb2x5Z29uJykge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCdtZWFzdXJlZEFyZWEnLCB1dGlscy5tZWFzdXJlR2VvbWV0cnkoYWN0aXZlU2tldGNoLmdldEdlb21ldHJ5KCkpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2NpcmNsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCdtZWFzdXJlZFJhZGl1cycsIHV0aWxzLm1lYXN1cmVHZW9tZXRyeShhY3RpdmVTa2V0Y2guZ2V0R2VvbWV0cnkoKSkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy9hY3RpdmVTa2V0Y2guc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgLy8gYWRkIGVkaXRvci12YXJzXG4gICAgICAgICAgICAgICAgICB2YXJzID0gZWRpdG9yU3R5bGUudmFycztcbiAgICAgICAgICAgICAgICAgIGVkaXRvclZhcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvclZhcnNbaV0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yVmFyc1tpXS5rZXkgPSB2YXJzW2ldLmtleTtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yVmFyc1tpXS5sYWJlbCA9IHZhcnNbaV0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvclZhcnNbaV0udmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaC5zZXQoJ2VkaXRvclZhcnMnLCBlZGl0b3JWYXJzKTtcbiAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IGFjdGl2ZS1lbGVtZW50IHZhcmlhYmxlc1xuICAgICAgICAgICAgICAgICAgYWN0aXZlU2tldGNoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVUb29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXAuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgc2VsZik7XG5cbiAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAgIH0sIC8vIGVuZCBvZiBcImluaXRGdW5jdGlvbigpXCJcblxuICAgICAgICAgIGFjdGl2YXRlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgLy8gZGVhY3RpdmF0ZSBtYXBIb3ZlclxuICAgICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwSG92ZXIuZGVhY3RpdmF0ZSgpO1xuXG4gICAgICAgICAgICAvLyBSZXNldCBmZWF0dXJlLWxpc3RcbiAgICAgICAgICAgIGZlYXR1cmVzLmNsZWFyKCk7XG5cbiAgICAgICAgICAgIC8vIEVuYWJsZSBpbnRlcmFjdGlvblxuICAgICAgICAgICAgLy8gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZEludGVyYWN0aW9uKGludGVyYWN0aW9uKTtcbiAgICAgICAgICAgIGludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBkZWFjdGl2YXRlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgLy8gcmVhY3RpdmF0ZSBtYXBIb3ZlclxuICAgICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwSG92ZXIuYWN0aXZhdGUoKTtcblxuICAgICAgICAgICAgLy8gZmluaXNoIGRyYXdpbmdzLCBpZiBub3QgYWxyZWFkeSBkb25lXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgIT09ICdwb2ludCcpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5maW5pc2hEcmF3aW5nKCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgICAgICAgICAgICAgIC8vIDBfb1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBmcm9tIG1hcFxuICAgICAgICAgICAgLy8gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUludGVyYWN0aW9uKGludGVyYWN0aW9uKTtcbiAgICAgICAgICAgIGludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGRyYXdWaWV3KTtcblxuICAgICAgICByZXR1cm4gaW50ZXJhY3Rpb25WaWV3O1xuICAgICAgfTtcblxuICAgICAgZHJhd1ZpZXcgPSBzZWxmLmFkZFZpZXcoe1xuICAgICAgICBuYW1lOiAnZHJhdzonICsgb3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50c1tUUklHR0VSX0RSQVddLFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzW1RSSUdHRVJfRFJBV10sXG4gICAgICAgICAgd2l0aEhlYWRsaW5lOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiBzZWxmLmNvbnRlbnRDb250YWluZXIsIGVsZW1lbnQ6IGRyYXdDb250ZW50fSxcbiAgICAgICAgICB7c2VjdGlvbjogc2VsZi50b3BUb29sYmFyLCBlbGVtZW50OiBzZWxmLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICBdLFxuICAgICAgICBpbml0RnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgc3R5bGVJZCxcbiAgICAgICAgICAgICAgbmVlZGVkU3R5bGVzLFxuICAgICAgICAgICAgICBzb3J0QW5kQWRkU3R5bGVzO1xuXG4gICAgICAgICAgLy8gU2hvdyBsb2FkaW5nIGFuaW1hdGlvblxuICAgICAgICAgIHNlbGYuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgICAgICBuZWVkZWRTdHlsZXMgPSBbXTtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBUT0RPXG4gICAgICAgICAgICogW3NvcnRBbmRBZGRTdHlsZXMgZGVzY3JpcHRpb25dXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHNvcnRBbmRBZGRTdHlsZXMgPSBmdW5jdGlvbiAoYXJyU3R5bGVJZHMpIHtcbiAgICAgICAgICAgIHZhciBqLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uU3R5bGVzLFxuICAgICAgICAgICAgICAgIGRyYXdJbnRlcmFjdGlvbixcbiAgICAgICAgICAgICAgICBzdHlsZUlkcztcblxuICAgICAgICAgICAgLy8gcHJlcGFyZVxuICAgICAgICAgICAgbG9jYXRpb25TdHlsZXMgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlcztcbiAgICAgICAgICAgIHN0eWxlSWRzID0gYXJyU3R5bGVJZHMgfHwgb3B0aW9ucy5zdHlsZUlkcztcbiAgICAgICAgICAgIGlmICghc3R5bGVJZHMgfHwgIWxvY2F0aW9uU3R5bGVzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc29ydFxuICAgICAgICAgICAgc3R5bGVJZHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgICAgICAgICAgIC8vVG9EbyBjaGVja1xuICAgICAgICAgICAgICBpZiAobG9jYXRpb25TdHlsZXNbYV0gJiYgbG9jYXRpb25TdHlsZXNbYl0gJiYgbG9jYXRpb25TdHlsZXNbYV0uZWRpdG9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKCghbG9jYXRpb25TdHlsZXNbYV0uZWRpdG9yLnNvcnQgJiYgIWxvY2F0aW9uU3R5bGVzW2JdLmVkaXRvci5zb3J0KSB8fCAobG9jYXRpb25TdHlsZXNbYV0uZWRpdG9yLnNvcnQgPT09IGxvY2F0aW9uU3R5bGVzW2JdLmVkaXRvci5zb3J0KSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhdGlvblN0eWxlc1thXS5uYW1lIHx8ICFsb2NhdGlvblN0eWxlc1tiXS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoIWxvY2F0aW9uU3R5bGVzW2JdLm5hbWUpID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIChsb2NhdGlvblN0eWxlc1thXS5uYW1lLnRvTG93ZXJDYXNlKCkgPiBsb2NhdGlvblN0eWxlc1tiXS5uYW1lLnRvTG93ZXJDYXNlKCkpID8gMSA6IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWxvY2F0aW9uU3R5bGVzW2FdLmVkaXRvci5zb3J0IHx8ICFsb2NhdGlvblN0eWxlc1tiXS5lZGl0b3Iuc29ydCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuICghbG9jYXRpb25TdHlsZXNbYl0uZWRpdG9yLnNvcnQpID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiAobG9jYXRpb25TdHlsZXNbYV0uZWRpdG9yLnNvcnQgPiBsb2NhdGlvblN0eWxlc1tiXS5lZGl0b3Iuc29ydCkgPyAxIDogLTE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pOyAvLyBlbmQgc29ydFxuXG4gICAgICAgICAgICAvLyBjcmVhdGVcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBzdHlsZUlkcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICBkcmF3SW50ZXJhY3Rpb24gPSBhZGREcmF3U3R5bGUoc3R5bGVJZHNbal0pO1xuICAgICAgICAgICAgICAvLyBhY3RpdmF0ZSB0aGUgZmlyc3QgZHJhd1N0eWxlXG4gICAgICAgICAgICAgIGlmIChqID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZHJhd0ludGVyYWN0aW9uLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH07IC8vIGVuZCBvZiBcInNvcnRBbmRBZGRTdHlsZXNcIlxuXG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgYWxsIG5lZWRlZCBzdHlsZXMgYXJlIGxvYWRlZFxuICAgICAgICAgIGlmICghc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXMpIHtcbiAgICAgICAgICAgIC8vIG5vIHN0eWxlcyBhcmUgbG9hZGVkLCBzbyBsb2FkIGFsbCBzdHlsZXNcbiAgICAgICAgICAgIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzID0ge307XG4gICAgICAgICAgICBuZWVkZWRTdHlsZXMgPSBvcHRpb25zLnN0eWxlSWRzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBjaGVjayB3aWNoIHN0eWxlcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG9wdGlvbnMuc3R5bGVJZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgc3R5bGVJZCA9IG9wdGlvbnMuc3R5bGVJZHNbaV07XG4gICAgICAgICAgICAgIGlmICghc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0gfHwgIXNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgbmVlZGVkU3R5bGVzLnB1c2goc3R5bGVJZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobmVlZGVkU3R5bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICghc2VsZi5wcm94eSkge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBsb2FkIGxvY1N0eWxlcywgYXMgdGhlIG1hcC1wcm94eSB3YXMgbm90IGluaXRpYWxsaXplZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIubG9hZExvY2F0aW9uU3R5bGVzKFxuICAgICAgICAgICAgICAgIG5lZWRlZFN0eWxlcyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvcnRBbmRBZGRTdHlsZXMoKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBhbHdheXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGlkZSBsb2FkaW5nLWFuaW1hdGlvblxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvcnRBbmRBZGRTdHlsZXMoKTtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBhY3RpdmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGRlYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRyYXdWaWV3O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJZiBvcHRfc2xvdCBpcyBlbXB0eSwgdGhlIGZ1bmN0aW9uIHdpbGwganVzdCBzYXZlIHRoZSBkYXRhIGluIHRoZSBzZXNzaW9uU3RvcmFnZS5cbiAgICAgKiBbc2F2ZSBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtbdHlwZV19ICBvcHRfc2xvdCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2F2ZTogZnVuY3Rpb24gKG9wdF9zbG90KSB7XG4gICAgICB2YXIgZm9ybWF0LFxuICAgICAgICAgIHNhdmVEYXRhLFxuICAgICAgICAgIHNsb3ROYW1lLFxuICAgICAgICAgIHN0b3JhZ2U7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gJ2JhY2tlbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cG9ydEdlb0pTT04oKTtcbiAgICAgIH1cblxuICAgICAgZm9ybWF0ID0gbmV3IG9sLmZvcm1hdC5HZW9KU09OKCk7XG4gICAgICBzYXZlRGF0YSA9IHt9O1xuXG4gICAgICBzYXZlRGF0YS5wb2ludHMgPSBmb3JtYXQud3JpdGVGZWF0dXJlcyh0aGlzLmVkaXRQb2ludExheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCkpO1xuICAgICAgc2F2ZURhdGEubGluZXMgPSBmb3JtYXQud3JpdGVGZWF0dXJlcyh0aGlzLmVkaXRMaW5lTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG4gICAgICBzYXZlRGF0YS5wb2x5Z29ucyA9IGZvcm1hdC53cml0ZUZlYXR1cmVzKHRoaXMuZWRpdFBvbHlnb25MYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpKTtcbiAgICAgIHNhdmVEYXRhLmNpcmNsZXMgPSBmb3JtYXQud3JpdGVGZWF0dXJlcyh0aGlzLmVkaXRDaXJjbGVMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpKTtcbiAgICAgIHNhdmVEYXRhLmZyZWVoYW5kID0gZm9ybWF0LndyaXRlRmVhdHVyZXModGhpcy5lZGl0RnJlZWhhbmRMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpKTtcblxuICAgICAgc2xvdE5hbWUgPSAnYzRnTWFwc18nO1xuICAgICAgc2xvdE5hbWUgKz0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5tYXBJZDtcbiAgICAgIHNsb3ROYW1lICs9ICdfJyArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgIGlmICghb3B0X3Nsb3QpIHtcbiAgICAgICAgc3RvcmFnZSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3ROYW1lICs9ICdfJyArIG9wdF9zbG90O1xuICAgICAgICBzdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgICAgIH1cbiAgICAgIC8vIENhbGwgaG9vayBmdW5jdGlvbnMgYmVmb3JlIHNhdmVcbiAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX29uU2F2ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5lZGl0b3Jfb25TYXZlLCBzYXZlRGF0YSk7XG4gICAgICB9XG4gICAgICBzdG9yYWdlLnNldEl0ZW0oc2xvdE5hbWUsIEpTT04uc3RyaW5naWZ5KHNhdmVEYXRhKSk7XG5cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSWYgb3B0X3Nsb3QgaXMgZW1wdHksIHRoZSBmdW5jdGlvbiB3aWxsIGp1c3QgbG9hZCB0aGUgZGF0YSBmcm9tIHRoZSBzZXNzaW9uU3RvcmFnZS5cbiAgICAgKiBbbG9hZCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtbdHlwZV19ICBvcHRfc2xvdCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGxvYWQ6IGZ1bmN0aW9uIChvcHRfc2xvdCkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgc2VsZixcbiAgICAgICAgICBmb3JtYXQsXG4gICAgICAgICAgbG9hZERhdGEsXG4gICAgICAgICAgZmVhdHVyZUNvbGxlY3Rpb24sXG4gICAgICAgICAgc2xvdE5hbWUsXG4gICAgICAgICAgc3RvcmFnZSxcbiAgICAgICAgICBuZWVkZWRTdHlsZXMsXG4gICAgICAgICAgc3R5bGVJZCxcbiAgICAgICAgICBpbXBvcnRGZWF0dXJlcztcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICBmb3JtYXQgPSBuZXcgb2wuZm9ybWF0Lkdlb0pTT04oKTtcbiAgICAgIHNlbGYuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgIHNsb3ROYW1lID0gJ2M0Z01hcHNfJztcbiAgICAgIHNsb3ROYW1lICs9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEubWFwSWQ7XG4gICAgICBzbG90TmFtZSArPSAnXycgKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICBpZiAoIW9wdF9zbG90KSB7XG4gICAgICAgIHN0b3JhZ2UgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90TmFtZSArPSAnXycgKyBvcHRfc2xvdDtcbiAgICAgICAgc3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gICAgICB9XG4gICAgICBsb2FkRGF0YSA9IHN0b3JhZ2UuZ2V0SXRlbShzbG90TmFtZSk7XG4gICAgICBpZiAoIWxvYWREYXRhKSB7XG4gICAgICAgIHNlbGYuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGxvYWREYXRhID0gSlNPTi5wYXJzZShsb2FkRGF0YSk7XG5cbiAgICAgIGZlYXR1cmVDb2xsZWN0aW9uID0gW107XG4gICAgICBuZWVkZWRTdHlsZXMgPSBbXTtcblxuICAgICAgZmVhdHVyZUNvbGxlY3Rpb24gPSBmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLnBvaW50cykuY29uY2F0KGZvcm1hdC5yZWFkRmVhdHVyZXMobG9hZERhdGEubGluZXMpLCBmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLnBvbHlnb25zKSwgZm9ybWF0LnJlYWRGZWF0dXJlcyhsb2FkRGF0YS5jaXJjbGVzKSwgZm9ybWF0LnJlYWRGZWF0dXJlcyhsb2FkRGF0YS5mcmVlaGFuZCkpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGZlYXR1cmVDb2xsZWN0aW9uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0eWxlSWQgPSBmZWF0dXJlQ29sbGVjdGlvbltpXS5nZXQoJ3N0eWxlSWQnKTtcblxuICAgICAgICBpZiAoKCFzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXSB8fCAhc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUpICYmICQuaW5BcnJheShzdHlsZUlkLCBuZWVkZWRTdHlsZXMpID09PSAtMSkge1xuICAgICAgICAgIG5lZWRlZFN0eWxlcy5wdXNoKHN0eWxlSWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGltcG9ydEZlYXR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLmVkaXRQb2ludExheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGZvcm1hdC5yZWFkRmVhdHVyZXMobG9hZERhdGEucG9pbnRzKSk7XG4gICAgICAgIHNlbGYuZWRpdExpbmVMYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLmxpbmVzKSk7XG4gICAgICAgIHNlbGYuZWRpdFBvbHlnb25MYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLnBvbHlnb25zKSk7XG4gICAgICAgIHNlbGYuZWRpdENpcmNsZUxheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGZvcm1hdC5yZWFkRmVhdHVyZXMobG9hZERhdGEuY2lyY2xlcykpO1xuICAgICAgICBzZWxmLmVkaXRGcmVlaGFuZExheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGZvcm1hdC5yZWFkRmVhdHVyZXMobG9hZERhdGEuZnJlZWhhbmQpKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChuZWVkZWRTdHlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoIXNlbGYucHJveHkpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBsb2FkIGxvY1N0eWxlcywgYXMgdGhlIG1hcC1wcm94eSB3YXMgbm90IGluaXRpYWxsaXplZC4nKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMoXG4gICAgICAgICAgICBuZWVkZWRTdHlsZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbXBvcnRGZWF0dXJlcygpO1xuICAgICAgICAgICAgICAgIC8vIENhbGwgaG9vayBmdW5jdGlvbnMgb24gbG9hZFxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX29uTG9hZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX29uTG9hZCwgbG9hZERhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYWx3YXlzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gSGlkZSBsb2FkaW5nLWFuaW1hdGlvblxuICAgICAgICAgICAgICAgIHNlbGYuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltcG9ydEZlYXR1cmVzKCk7XG4gICAgICAgIHNlbGYuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgIC8vIENhbGwgaG9vayBmdW5jdGlvbnMgb24gbG9hZFxuICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9vbkxvYWQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5lZGl0b3Jfb25Mb2FkLCBsb2FkRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAvLyBFbmQgb2YgXCJsb2FkXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbZXhwb3J0IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBleHBvcnRHZW9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZm9ybWF0LFxuICAgICAgICAgIGZlYXR1cmVzO1xuXG4gICAgICBmb3JtYXQgPSBuZXcgb2wuZm9ybWF0Lkdlb0pTT04oKTtcblxuICAgICAgZmVhdHVyZXMgPSB0aGlzLmVkaXRQb2ludExheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICBmZWF0dXJlcyA9IGZlYXR1cmVzLmNvbmNhdCh0aGlzLmVkaXRMaW5lTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG4gICAgICBmZWF0dXJlcyA9IGZlYXR1cmVzLmNvbmNhdCh0aGlzLmVkaXRQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG4gICAgICBmZWF0dXJlcyA9IGZlYXR1cmVzLmNvbmNhdCh0aGlzLmVkaXRDaXJjbGVMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpKTtcbiAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXMuY29uY2F0KHRoaXMuZWRpdEZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG5cbiAgICAgIGZlYXR1cmVzID0gZm9ybWF0LndyaXRlRmVhdHVyZXMoZmVhdHVyZXMpO1xuICAgICAgLy8gZmVhdHVyZXMgPSBKU09OLnN0cmluZ2lmeShmZWF0dXJlcyk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gJ2JhY2tlbmQnICYmIHRoaXMub3B0aW9ucy5kYXRhRmllbGQpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmRhdGFGaWVsZC52YWwoZmVhdHVyZXMpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJleHBvcnRcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtpbXBvcnQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGltcG9ydEdlb0pTT046IGZ1bmN0aW9uIChvcHRfZ2VvanNvbikge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgc3R5bGVJZCxcbiAgICAgICAgICBmb3JtYXQsXG4gICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgcG9pbnRzLFxuICAgICAgICAgIGZyZWVoYW5kLFxuICAgICAgICAgIGxpbmVzLFxuICAgICAgICAgIHBvbHlnb25zLFxuICAgICAgICAgIGNpcmNsZXMsXG4gICAgICAgICAgbmVlZGVkU3R5bGVzLFxuICAgICAgICAgIGltcG9ydEZlYXR1cmVzLFxuICAgICAgICAgIGk7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnR5cGUgPT09ICdiYWNrZW5kJyAmJiB0aGlzLm9wdGlvbnMuZGF0YUZpZWxkKSB7XG4gICAgICAgIGZlYXR1cmVzID0gdGhpcy5vcHRpb25zLmRhdGFGaWVsZC52YWwoKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0X2dlb2pzb24pIHtcbiAgICAgICAgZmVhdHVyZXMgPSBvcHRfZ2VvanNvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmZWF0dXJlcykge1xuICAgICAgICAvLyBubyBmZWF0dXJlcyB0byBsb2FkXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gdHJ5IHtcbiAgICAgIC8vICAgZmVhdHVyZXMgPSBKU09OLnBhcnNlKGZlYXR1cmVzKTtcbiAgICAgIC8vIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgZm9ybWF0ID0gbmV3IG9sLmZvcm1hdC5HZW9KU09OKCk7XG4gICAgICB0cnkge1xuICAgICAgICBmZWF0dXJlcyA9IGZvcm1hdC5yZWFkRmVhdHVyZXMoZmVhdHVyZXMpO1xuICAgICAgfSBjYXRjaCAoaWdub3JlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGxvYWQgZmVhdHVyZXM6IEludmFsaWQgSlNPTiBzdHJpbmcuLi4nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBuZWVkZWRTdHlsZXMgPSBbXTtcbiAgICAgIHBvaW50cyA9IFtdO1xuICAgICAgZnJlZWhhbmQgPSBbXTtcbiAgICAgIGxpbmVzID0gW107XG4gICAgICBwb2x5Z29ucyA9IFtdO1xuICAgICAgY2lyY2xlcyA9IFtdO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGZlYXR1cmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0eWxlSWQgPSBmZWF0dXJlc1tpXS5nZXQoJ3N0eWxlSWQnKSB8fCBmZWF0dXJlc1tpXS5nZXQoJ2xvY3N0eWxlJykgfHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKGZlYXR1cmVzW2ldICYmIHR5cGVvZiBmZWF0dXJlc1tpXS5nZXRHZW9tZXRyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGlmIChmZWF0dXJlc1tpXS5nZXRHZW9tZXRyeSgpIGluc3RhbmNlb2Ygb2wuZ2VvbS5Qb2ludCkge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goZmVhdHVyZXNbaV0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZmVhdHVyZXNbaV0uZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uTGluZVN0cmluZykge1xuICAgICAgICAgICAgaWYgKGZlYXR1cmVzLm9wdGlvbnMgJiYgZmVhdHVyZXMub3B0aW9ucy50eXBlICYmIGZlYXR1cmVzLm9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpID09ICdmcmVlaGFuZCcpIHtcbiAgICAgICAgICAgICAgICBmcmVlaGFuZC5wdXNoKGZlYXR1cmVzW2ldKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChmZWF0dXJlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlc1tpXS5nZXRHZW9tZXRyeSgpIGluc3RhbmNlb2Ygb2wuZ2VvbS5Qb2x5Z29uKSB7XG4gICAgICAgICAgICBwb2x5Z29ucy5wdXNoKGZlYXR1cmVzW2ldKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmVzW2ldLmdldEdlb21ldHJ5KCkgaW5zdGFuY2VvZiBvbC5nZW9tLkNpcmNsZSkge1xuICAgICAgICAgICAgY2lyY2xlcy5wdXNoKGZlYXR1cmVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdDYW5ub3QgbG9hZCBmZWF0dXJlIHdpdGhvdXQgZ2VvbWV0cnkuJyk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0eWxlSWQgJiYgKCFzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXSB8fCAhc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUpICYmICQuaW5BcnJheShzdHlsZUlkLCBuZWVkZWRTdHlsZXMpID09PSAtMSkge1xuICAgICAgICAgIG5lZWRlZFN0eWxlcy5wdXNoKHN0eWxlSWQpO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgaW1wb3J0RmVhdHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuZWRpdFBvaW50TGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZXMocG9pbnRzKTtcbiAgICAgICAgc2VsZi5lZGl0TGluZUxheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGxpbmVzKTtcbiAgICAgICAgc2VsZi5lZGl0UG9seWdvbkxheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKHBvbHlnb25zKTtcbiAgICAgICAgc2VsZi5lZGl0Q2lyY2xlTGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZXMoY2lyY2xlcyk7XG4gICAgICAgIHNlbGYuZWRpdEZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZXMoZnJlZWhhbmQpO1xuICAgICAgICB1dGlscy5maXRUb0V4dGVudChcbiAgICAgICAgICAgIHV0aWxzLmdldEV4dGVudEZvckdlb21ldHJpZXMocG9pbnRzLmNvbmNhdChsaW5lcywgcG9seWdvbnMsIGNpcmNsZXMsIGZyZWVoYW5kKSksXG4gICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAsXG4gICAgICAgICAgICBbMjUsIDI1LCAyNSwgc2VsZi5jb250YWluZXIub2Zmc2V0V2lkdGggKyAyNV0sXG4gICAgICAgICAgICAxMDAwXG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnNwaW5uZXIuc2hvdygpO1xuICAgICAgaWYgKG5lZWRlZFN0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICghc2VsZi5wcm94eSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGxvYWQgbG9jU3R5bGVzLCBhcyB0aGUgbWFwLXByb3h5IHdhcyBub3QgaW5pdGlhbGxpemVkLicpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhcbiAgICAgICAgICAgIG5lZWRlZFN0eWxlcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZG9uZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGltcG9ydEZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFsd2F5czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIEhpZGUgbG9hZGluZy1hbmltYXRpb25cbiAgICAgICAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbXBvcnRGZWF0dXJlcygpO1xuICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgfVxuXG4gICAgfSAvLyBlbmQgb2YgXCJpbXBvcnRcIlxuXG4gIH0pO1xuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBFZGl0b3IgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuRWRpdG9yO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1lZGl0b3IuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG5pbXBvcnQge2xhbmdDb25zdGFudHNFbmdsaXNofSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWVuXCI7XG5cbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcbmltcG9ydCB7U2lkZWJvYXJkfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXNpZGVib2FyZFwiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBleHRlbmRzIHtjNGcubWFwcy5jb250cm9sLlNpZGVib2FyZH1cbiAgICpcbiAgICogQHBhcmFtICB7W3R5cGVdfSAgbWFwQ29udHJvbGxlciAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIHtbdHlwZV19ICBjb25maWcgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLkluZm9wYWdlID0gZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICAvLyBleHRlbmQgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLklORk9QQUdFLFxuICAgICAgbmFtZTogJ2luZm9wYWdlJyxcbiAgICAgIGhlYWRsaW5lOiBsYW5nQ29uc3RhbnRzLklORk9QQUdFLFxuICAgICAgY3JlYXRlOiB0cnVlLFxuICAgICAgbWFwQ29udHJvbGxlcjogdW5kZWZpbmVkLFxuICAgICAgZGlyZWN0aW9uOiAnbGVmdCdcbiAgICB9LCBvcHRfb3B0aW9ucyk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5tYWluU2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgLy8gY2FsbCBwYXJlbnQgY29uc3RydWN0b3JcbiAgICBTaWRlYm9hcmQuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMpO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLkluZm9wYWdlLCBTaWRlYm9hcmQpO1xuXG4gIC8qKlxuICAgKiBNZXRob2RzXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLkluZm9wYWdlLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuSW5mb3BhZ2UucHJvdG90eXBlLCB7XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlZCB3aGVuIHRoZSBwYW5lbCB3aWxsIGJlIG9wZW5lZCBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gICAgICogW2luaXQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gIFJldHVybnMgfHRydWV8IG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAvL3ZhciBpbmZvQnV0dG9uO1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICB0aGlzLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICB0aGlzLnZpZXdJbmZvcGFnZSA9IHRoaXMuYWRkSW5mb1ZpZXcoKTtcbiAgICAgIHRoaXMudmlld0luZm9wYWdlLmFjdGl2YXRlKCk7XG5cbiAgICAgIHZhciBwcm94eSA9IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5O1xuICAgICAgdmFyIG1hcCA9IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcDtcblxuICAgICAgdGhpcy5tYWluU2VjdGlvbkluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICB0aGlzLm1haW5TZWN0aW9uSW5mby5pbm5lckhUTUwgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmluZm9wYWdlO1xuICAgICAgdGhpcy5tYWluU2VjdGlvbi5hcHBlbmRDaGlsZCh0aGlzLm1haW5TZWN0aW9uSW5mbyk7XG4gICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIuc2V0RWxlbWVudCh0aGlzLm1haW5TZWN0aW9uKTtcblxuICAgICAgdGhpcy5zcGlubmVyLmhpZGUoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sIC8vIGVuZCBvZiBcImluaXQoKVwiXG5cblxuICAgIGFkZEluZm9WaWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW5mb1ZpZXc7XG5cbiAgICAgICAgaW5mb1ZpZXcgPSB0aGlzLmFkZFZpZXcoe1xuICAgICAgICBuYW1lOiAnaW5mbycsXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5JTkZPUEFHRV9WSUVXX1RSSUdHRVIsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuSU5GT1BBR0VfVklFV19UUklHR0VSLFxuICAgICAgICAgIHdpdGhIZWFkbGluZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMuY29udGVudENvbnRhaW5lciwgZWxlbWVudDogdGhpcy5tYWluU2VjdGlvbn0sXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMudG9wVG9vbGJhciwgZWxlbWVudDogdGhpcy52aWV3VHJpZ2dlckJhcn1cbiAgICAgICAgXVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBpbmZvVmlldztcbiAgICB9LCAvLyBlbmQgb2YgXCJhZGRJbmZvVmlldygpXCJcblxuICAgIGFkZEluZm9wYWdlOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgVFJJR0dFUl9JTkZPUEFHRSxcbiAgICAgICAgICB2aWV3SW5mb3BhZ2UsXG4gICAgICAgICAgc291cmNlLFxuICAgICAgICAgIGludGVyYWN0aW9uLFxuICAgICAgICAgIGZlYXR1cmVzO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgLy9UUklHR0VSX0lORk9QQUdFID0gJ0lORk9QQUdFX1ZJRVdfVFJJR0dFUl8nICsgb3B0aW9ucy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIHZpZXdJbmZvcGFnZSA9IHNlbGYuYWRkSW5mb3BhZ2Uoe1xuICAgICAgICBuYW1lOiAnSW5mb3BhZ2UnLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6ICdJbmZvcGFnZScsLy9sYW5nQ29uc3RhbnRzW1RSSUdHRVJfRFJBV10sXG4gICAgICAgICAgY2xhc3NOYW1lOiAnYzRnX2luZm9wYWdlX3RyaWdnZXInLC8vY3NzQ29uc3RhbnRzW1RSSUdHRVJfRFJBV11cbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiBzZWxmLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHNlbGYudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF0sXG4gICAgICAgIGluaXRGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgLy8gU2hvdyBsb2FkaW5nIGFuaW1hdGlvblxuICAgICAgICAgIHNlbGYuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgICAgICAvLyBwcmludEZ1bmN0aW9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgLy8gICB2YXIgaW5mb0J1dHRvbixcbiAgICAgICAgICAvLyAgICAgICBmZWF0dXJlR2VvbWV0cnksXG4gICAgICAgICAgLy8gICAgICAgdHJhbnNsYXRlSW50ZXJhY3Rpb24sXG4gICAgICAgICAgLy8gICAgICAgbW9kaWZ5SW50ZXJhY3Rpb24sXG4gICAgICAgICAgLy8gICAgICAgbW9kaWZ5QnV0dG9uLFxuICAgICAgICAgIC8vICAgICAgIGFwcGx5QnV0dG9uO1xuICAgICAgICAgIC8vXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyAgICAgaW5mb0J1dHRvbiA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vICAgLy8gYWRkIGFwcGx5IGJ1dHRvblxuICAgICAgICAgIC8vICAgYXBwbHlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAvLyAgIGFwcGx5QnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLkVESVRPUl9GRUFUVVJFX0FQUExZO1xuICAgICAgICAgIC8vICAgYXBwbHlCdXR0b24udGl0bGUgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9GRUFUVVJFX0FQUExZO1xuICAgICAgICAgIC8vICAgYXBwbHlCdXR0b24uc2V0QXR0cmlidXRlKCdmZWF0X2lkJywgaSk7XG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyB9OyAvLyBlbmQgb2YgXCJtb2RpZnlGZWF0dXJlRnVuY3Rpb24oKVwiXG5cbiAgICAgICAgICBmZWF0dXJlcyA9IG5ldyBvbC5Db2xsZWN0aW9uKCk7XG5cbiAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBhY3RpdmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIH0sXG4gICAgICAgIGRlYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHZpZXdJbmZvcGFnZTtcbiAgICB9IC8vIGVuZCBvZiBcImFkZEluZm9wYWdlKClcIlxuXG4gIH0pO1xuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBJbmZvcGFnZSA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5JbmZvcGFnZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtcG9ydHNpZGUtaW5mb3BhZ2UuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG5cbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5pbXBvcnQge1NpZGVib2FyZH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1zaWRlYm9hcmRcIjtcbmltcG9ydCB7VG9vbHRpcFBvcFVwfSBmcm9tIFwiLi9jNGctbWFwcy1taXNjLXRvb2x0aXBwb3B1cFwiO1xubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9IGVsc2UgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJlblwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNFbmdsaXNoO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrXG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH1cbn1cblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZCB7YzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmR9XG4gICAqXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gIG1hcENvbnRyb2xsZXIgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuTWVhc3VyZXRvb2xzID0gZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICAvLyBleHRlbmQgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIG5hbWU6ICdtZWFzdXJlJyxcbiAgICAgIGhlYWRsaW5lOiBsYW5nQ29uc3RhbnRzLk1FQVNVUkVUT09MUyxcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgIGRpcmVjdGlvbjogJ2xlZnQnLFxuICAgICAgZmlyc3RFbGVtZW50OiB0cnVlXG4gICAgfSwgb3B0X29wdGlvbnMpO1xuXG4gICAgdGhpcy5tYWluU2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgLy8gY2FsbCBwYXJlbnQgY29uc3RydWN0b3JcbiAgICBTaWRlYm9hcmQuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMpO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLk1lYXN1cmV0b29scywgU2lkZWJvYXJkKTtcblxuICAvKipcbiAgICogTWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5NZWFzdXJldG9vbHMucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5NZWFzdXJldG9vbHMucHJvdG90eXBlLCB7XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlZCB3aGVuIHRoZSBwYW5lbCB3aWxsIGJlIG9wZW5lZCBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gICAgICogW2luaXQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gIFJldHVybnMgfHRydWV8IG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHRoaXMuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgIC8vIEFkZCBtZWFzdXJlIGxheWVyc1xuICAgICAgdGhpcy5tZWFzdXJlTGluZUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpfSk7XG4gICAgICB0aGlzLm1lYXN1cmVQb2x5Z29uTGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yKHtzb3VyY2U6IG5ldyBvbC5zb3VyY2UuVmVjdG9yKCl9KTtcbiAgICAgIHRoaXMubWVhc3VyZUNpcmNsZUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpfSk7XG4gICAgICB0aGlzLm1lYXN1cmVGcmVlaGFuZExheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpfSk7XG5cbiAgICAgIHRoaXMubWVhc3VyZUxheWVyR3JvdXAgPSBuZXcgb2wubGF5ZXIuR3JvdXAoe1xuICAgICAgICBsYXllcnM6IG5ldyBvbC5Db2xsZWN0aW9uKFtcbiAgICAgICAgICB0aGlzLm1lYXN1cmVGcmVlaGFuZExheWVyLFxuICAgICAgICAgIHRoaXMubWVhc3VyZUNpcmNsZUxheWVyLFxuICAgICAgICAgIHRoaXMubWVhc3VyZVBvbHlnb25MYXllcixcbiAgICAgICAgICB0aGlzLm1lYXN1cmVMaW5lTGF5ZXIsXG4gICAgICAgIF0pLFxuICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcih0aGlzLm1lYXN1cmVMYXllckdyb3VwKTtcblxuICAgICAgLy8gQWRkIGFuZCBhY3RpdmF0ZSBtZWFzdXJlLVZpZXdzXG4gICAgICB0aGlzLnZpZXdNZWFzdXJlU2VsZWN0ID0gdGhpcy5hZGRTZWxlY3RWaWV3KCk7XG4gICAgICB0aGlzLnZpZXdNZWFzdXJlU2VsZWN0LmFjdGl2YXRlKCk7XG4gICAgICB0aGlzLnZpZXdNZWFzdXJlTGluZSA9IHRoaXMuYWRkTWVhc3VyZVZpZXcoe3R5cGU6ICdMaW5lU3RyaW5nJ30pO1xuICAgICAgdGhpcy52aWV3TWVhc3VyZUFyZWEgPSB0aGlzLmFkZE1lYXN1cmVWaWV3KHt0eXBlOiAnUG9seWdvbid9KTtcbiAgICAgIHRoaXMudmlld01lYXN1cmVSYWRpdXMgPSB0aGlzLmFkZE1lYXN1cmVWaWV3KHt0eXBlOiAnQ2lyY2xlJ30pO1xuICAgICAgdGhpcy52aWV3TWVhc3VyZUZyZWVoYW5kID0gdGhpcy5hZGRNZWFzdXJlVmlldyh7dHlwZTogJ0ZyZWVoYW5kJ30pO1xuXG4gICAgICAvLyBzZXQgY29udGVudC1zZWN0aW9uXG4gICAgICB0aGlzLm1haW5TZWN0aW9uSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgIHRoaXMubWFpblNlY3Rpb25JbmZvLmlubmVySFRNTCA9IGxhbmdDb25zdGFudHMuTUVBU1VSRVRPT0xTX0lORk87XG4gICAgICB0aGlzLm1haW5TZWN0aW9uSW5mby5pbm5lckhUTUwgKz0gJzxicj48YnI+PHN1Yj4nICsgbGFuZ0NvbnN0YW50cy5NRUFTVVJFVE9PTFNfSU5GT19BRERJVElPTkFMICsgJzxzdWI+JztcbiAgICAgIHRoaXMubWFpblNlY3Rpb24uYXBwZW5kQ2hpbGQodGhpcy5tYWluU2VjdGlvbkluZm8pO1xuICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMubWFpblNlY3Rpb24pO1xuXG4gICAgICB0aGlzLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgLy8gZW5kIG9mIFwiaW5pdCgpXCJcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVkIGJlZm9yZSBwYW5lbCB3aWxsIGJlIGNsb3NlZFxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBwcmVDbG9zZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbGluZUZlYXR1cmVzLFxuICAgICAgICAgIHBvbHlnb25GZWF0dXJlcyxcbiAgICAgICAgICBjaXJjbGVGZWF0dXJlcyxcbiAgICAgICAgICBmcmVlaGFuZEZlYXR1cmVzLFxuICAgICAgICAgIGk7XG5cbiAgICAgIGlmICh0aGlzLm1lYXN1cmVMYXllckdyb3VwLmdldFZpc2libGUoKSkge1xuICAgICAgICB0aGlzLm1lYXN1cmVMYXllckdyb3VwLnNldFZpc2libGUoZmFsc2UpO1xuXG4gICAgICAgIC8vIGhpZGUgbGluZS1mZWF0dXJlIHRvb2x0aXBzXG4gICAgICAgIGxpbmVGZWF0dXJlcyA9IHRoaXMubWVhc3VyZUxpbmVMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGluZUZlYXR1cmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgbGluZUZlYXR1cmVzW2ldLmdldCgndG9vbHRpcCcpLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBoaWRlIHBvbHlnb24tZmVhdHVyZSB0b29sdGlwc1xuICAgICAgICBwb2x5Z29uRmVhdHVyZXMgPSB0aGlzLm1lYXN1cmVQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvbHlnb25GZWF0dXJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHBvbHlnb25GZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGlkZSBjaXJjbGUtZmVhdHVyZSB0b29sdGlwc1xuICAgICAgICBjaXJjbGVGZWF0dXJlcyA9IHRoaXMubWVhc3VyZUNpcmNsZUxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaXJjbGVGZWF0dXJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY2lyY2xlRmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJykuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGhpZGUgZnJlZWhhbmQtZmVhdHVyZSB0b29sdGlwc1xuICAgICAgICBmcmVlaGFuZEZlYXR1cmVzID0gdGhpcy5tZWFzdXJlRnJlZWhhbmRMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZnJlZWhhbmRGZWF0dXJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgZnJlZWhhbmRGZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJwcmVDbG9zZUZ1bmN0aW9uKClcIlxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZWQgYmVmb3JlIHBhbmVsIHdpbGwgYmUgb3BlbmVkXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHByZU9wZW5GdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGxpbmVGZWF0dXJlcyxcbiAgICAgICAgICBwb2x5Z29uRmVhdHVyZXMsXG4gICAgICAgICAgY2lyY2xlRmVhdHVyZXMsXG4gICAgICAgICAgZnJlZWhhbmRGZWF0dXJlcyxcbiAgICAgICAgICBpO1xuXG4gICAgICBpZiAoIXRoaXMubWVhc3VyZUxheWVyR3JvdXAuZ2V0VmlzaWJsZSgpKSB7XG4gICAgICAgIHRoaXMubWVhc3VyZUxheWVyR3JvdXAuc2V0VmlzaWJsZSh0cnVlKTtcblxuICAgICAgICAvLyBzaG93IGxpbmUtZmVhdHVyZSB0b29sdGlwc1xuICAgICAgICBsaW5lRmVhdHVyZXMgPSB0aGlzLm1lYXN1cmVMaW5lTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpbmVGZWF0dXJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGxpbmVGZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKS5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2hvdyBwb2x5Z29uLWZlYXR1cmUgdG9vbHRpcHNcbiAgICAgICAgcG9seWdvbkZlYXR1cmVzID0gdGhpcy5tZWFzdXJlUG9seWdvbkxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwb2x5Z29uRmVhdHVyZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBwb2x5Z29uRmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJykuc2hvdygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNob3cgY2lyY2xlLWZlYXR1cmUgdG9vbHRpcHNcbiAgICAgICAgY2lyY2xlRmVhdHVyZXMgPSB0aGlzLm1lYXN1cmVDaXJjbGVMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2lyY2xlRmVhdHVyZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNpcmNsZUZlYXR1cmVzW2ldLmdldCgndG9vbHRpcCcpLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzaG93IGZyZWVoYW5kLWZlYXR1cmUgdG9vbHRpcHNcbiAgICAgICAgZnJlZWhhbmRGZWF0dXJlcyA9IHRoaXMubWVhc3VyZUZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGZyZWVoYW5kRmVhdHVyZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGZyZWVoYW5kRmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJykuc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwicHJlT3BlbkZ1bmN0aW9uKClcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthZGRTZWxlY3RWaWV3IGRlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFkZFNlbGVjdFZpZXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxlY3RWaWV3O1xuXG4gICAgICBzZWxlY3RWaWV3ID0gdGhpcy5hZGRWaWV3KHtcbiAgICAgICAgbmFtZTogJ3NlbGVjdCcsXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5NRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX1NFTEVDVCxcbiAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5NRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX1NFTEVDVCxcbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMuY29udGVudENvbnRhaW5lciwgZWxlbWVudDogdGhpcy5tYWluU2VjdGlvbn0sXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMudG9wVG9vbGJhciwgZWxlbWVudDogdGhpcy52aWV3VHJpZ2dlckJhcn1cbiAgICAgICAgXVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzZWxlY3RWaWV3O1xuICAgIH0sIC8vIGVuZCBvZiBcImFkZFNlbGVjdFZpZXcoKVwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2FkZE1lYXN1cmVWaWV3IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgb3B0aW9ucyAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFkZE1lYXN1cmVWaWV3OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgVFJJR0dFUl9EUkFXLFxuICAgICAgICAgIG1lYXN1cmVWaWV3LFxuICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICBpbnRlcmFjdGlvbixcbiAgICAgICAgICBmZWF0dXJlcyxcbiAgICAgICAgICBvbFR5cGU7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgICB0eXBlOiAnTGluZVN0cmluZydcbiAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICBUUklHR0VSX0RSQVcgPSAnTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXXycgKyBvcHRpb25zLnR5cGUudG9VcHBlckNhc2UoKTtcblxuICAgICAgbWVhc3VyZVZpZXcgPSBzZWxmLmFkZFZpZXcoe1xuICAgICAgICBuYW1lOiAnZHJhdzonICsgb3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50c1tUUklHR0VSX0RSQVddLFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzW1RSSUdHRVJfRFJBV10sXG4gICAgICAgICAgd2l0aEhlYWRsaW5lOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiBzZWxmLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHNlbGYudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF0sXG4gICAgICAgIGluaXRGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBmZWF0dXJlSWRDb3VudCxcbiAgICAgICAgICAgICAgYWN0aXZlU2tldGNoLFxuICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwLFxuICAgICAgICAgICAgICBhZGRNZWFzdXJlRmVhdHVyZSxcbiAgICAgICAgICAgICAgdXBkYXRlTWVhc3VyZUZlYXR1cmUsXG4gICAgICAgICAgICAgIGdldFZhbHVlT2ZHZW9tZXRyeSxcbiAgICAgICAgICAgICAgZ2V0TGVuZ3RoT2ZNZWFzdXJlLFxuICAgICAgICAgICAgICByZW1vdmVNZWFzdXJlRmVhdHVyZTtcblxuICAgICAgICAgIC8vIFNob3cgbG9hZGluZyBhbmltYXRpb25cbiAgICAgICAgICBzZWxmLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgICAgZmVhdHVyZUlkQ291bnQgPSAxO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZnJlZWhhbmQnKSB7XG4gICAgICAgICAgICAgIHNvdXJjZSA9IHNlbGYubWVhc3VyZUZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2NpcmNsZScpIHtcbiAgICAgICAgICAgICAgc291cmNlID0gc2VsZi5tZWFzdXJlQ2lyY2xlTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3BvbHlnb24nKSB7XG4gICAgICAgICAgICAgIHNvdXJjZSA9IHNlbGYubWVhc3VyZVBvbHlnb25MYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLm1lYXN1cmVMaW5lTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmVhdHVyZXMgPSBuZXcgb2wuQ29sbGVjdGlvbigpO1xuXG4gICAgICAgICAgb2xUeXBlID0gb3B0aW9ucy50eXBlO1xuICAgICAgICAgIGlmIChvbFR5cGUgPT0gJ0ZyZWVoYW5kJykge1xuICAgICAgICAgICAgICBvbFR5cGUgPSAnTGluZVN0cmluZyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLkRyYXcoe1xuICAgICAgICAgICAgZmVhdHVyZXM6IGZlYXR1cmVzLFxuICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICB0eXBlOiBvbFR5cGUsXG4gICAgICAgICAgICBmcmVlaGFuZDogb3B0aW9ucy50eXBlID09ICdGcmVlaGFuZCcsXG4gICAgICAgICAgICAvLyBAVE9ETzogdXNlIGN1c3RvbSBzdHlsZT8gKEJFLW9wdGlvbilcbiAgICAgICAgICAgIC8vIHN0eWxlOiB1c2UgZGVmYXVsdCBzdHlsZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYWRkTWVhc3VyZUZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgdmFyIGxpc3RFbGVtZW50LFxuICAgICAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudCxcbiAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LFxuICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgc3Ryb25nRWxlbWVudCxcbiAgICAgICAgICAgICAgICBzcGFuRWxlbWVudCxcbiAgICAgICAgICAgICAgICBzdHJMYWJlbCxcbiAgICAgICAgICAgICAgICBzdHJUeXBlLFxuICAgICAgICAgICAgICAgIG1lYXN1cmVBcmVhLFxuICAgICAgICAgICAgICAgIG1lYXN1cmVSYWRpdXM7XG5cbiAgICAgICAgICAgIGlmICghZmVhdHVyZSBpbnN0YW5jZW9mIG9sLkZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgaW5mb21lc3NhZ2UgbmVlZHMgdG8gYmUgcmVtb3ZlZFxuICAgICAgICAgICAgaWYgKHNlbGYubWFpblNlY3Rpb24uY2hpbGRFbGVtZW50Q291bnQgPT09IDEgJiYgc2VsZi5tYWluU2VjdGlvbi5jaGlsZHJlblswXSA9PT0gc2VsZi5tYWluU2VjdGlvbkluZm8pIHtcbiAgICAgICAgICAgICAgc2VsZi5tYWluU2VjdGlvbi5yZW1vdmVDaGlsZChzZWxmLm1haW5TZWN0aW9uSW5mbyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGZlYXR1cmUtdHlwZVxuICAgICAgICAgICAgaWYgKGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uTGluZVN0cmluZykge1xuICAgICAgICAgICAgICBzdHJMYWJlbCA9IGxhbmdDb25zdGFudHMuTEVOR1RIO1xuICAgICAgICAgICAgICBzdHJUeXBlID0gbGFuZ0NvbnN0YW50cy5MSU5FO1xuICAgICAgICAgICAgICBtZWFzdXJlQXJlYSA9IGZhbHNlO1xuICAgICAgICAgICAgICBtZWFzdXJlUmFkaXVzID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbikge1xuICAgICAgICAgICAgICBzdHJMYWJlbCA9IGxhbmdDb25zdGFudHMuUEVSSU1FVEVSO1xuICAgICAgICAgICAgICBzdHJUeXBlID0gbGFuZ0NvbnN0YW50cy5QT0xZR09OO1xuICAgICAgICAgICAgICBtZWFzdXJlQXJlYSA9IHRydWU7XG4gICAgICAgICAgICAgIG1lYXN1cmVSYWRpdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmVhdHVyZS5nZXRHZW9tZXRyeSgpIGluc3RhbmNlb2Ygb2wuZ2VvbS5DaXJjbGUpIHtcbiAgICAgICAgICAgICAgc3RyTGFiZWwgPSBsYW5nQ29uc3RhbnRzLlJBRElVUztcbiAgICAgICAgICAgICAgc3RyVHlwZSA9IGxhbmdDb25zdGFudHMuQ0lSQ0xFO1xuICAgICAgICAgICAgICBtZWFzdXJlQXJlYSA9IHRydWU7XG4gICAgICAgICAgICAgIG1lYXN1cmVSYWRpdXMgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy9mcmVlaGFuZCBpc3QgTGluZVN0cmluZyB0b29cbiAgICAgICAgICAgICAgc3RyTGFiZWwgPSBsYW5nQ29uc3RhbnRzLkxFTkdUSDtcbiAgICAgICAgICAgICAgc3RyVHlwZSA9IGxhbmdDb25zdGFudHMuRlJFRUhBTkQ7XG4gICAgICAgICAgICAgIG1lYXN1cmVBcmVhID0gZmFsc2U7XG4gICAgICAgICAgICAgIG1lYXN1cmVSYWRpdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY3JlYXRlIGxpc3QgZWxlbWVudFxuICAgICAgICAgICAgbGlzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIGFuZCBhcHBlbmQgaGVhZGxpbmVcbiAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LmNsYXNzTmFtZSA9ICdjNGdfbWFwc19wb3J0c2lkZV9tZWFzdXJlX2VsZW1lbnQnO1xuICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5maXJzdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBoZWFkbGluZUVsZW1lbnQuY2xhc3NOYW1lID0gJ2M0Z19tYXBzX3BvcnRzaWRlX21lYXN1cmVfZWxlbWVudCBjNGdfbWFwc19wb3J0c2lkZV9tZWFzdXJlX2VsZW1lbnRfZmlyc3QnO1xuICAgICAgICAgICAgICAgIHNlbGYub3B0aW9ucy5maXJzdEVsZW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpc3RFbGVtZW50LmFwcGVuZENoaWxkKGhlYWRsaW5lRWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbmQgYXBwZW5kIGxhYmVsIGZvciBuYW1lLWlucHV0ZmllbGRcbiAgICAgICAgICAgIGxhYmVsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgICAgICBsYWJlbEVsZW1lbnQuc2V0QXR0cmlidXRlKCdmb3InLCAnbWVhc3VyZUVsZW1lbnRfJyArIGZlYXR1cmVJZENvdW50KTtcbiAgICAgICAgICAgIGxhYmVsRWxlbWVudC5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLk5BTUUgKyAnOiAnO1xuICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LmFwcGVuZENoaWxkKGxhYmVsRWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbmQgYXBwZW5kIG5hbWUtaW5wdXRmaWVsZFxuICAgICAgICAgICAgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGlucHV0RWxlbWVudC50eXBlID0gJ3RleHQnO1xuICAgICAgICAgICAgaW5wdXRFbGVtZW50Lm5hbWUgPSAnbWVhc3VyZUVsZW1lbnRfJyArIGZlYXR1cmVJZENvdW50O1xuICAgICAgICAgICAgaW5wdXRFbGVtZW50LnZhbHVlID0gc3RyVHlwZSArICcgJyArIGZlYXR1cmVJZENvdW50O1xuICAgICAgICAgICAgLy8gYXR0YWNoLWNoYW5nZS1oYW5kbGVyXG4gICAgICAgICAgICAkKGlucHV0RWxlbWVudCkuY2hhbmdlKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICB1cGRhdGVNZWFzdXJlRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LmFwcGVuZENoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgICAgICBmZWF0dXJlLnNldCgnbGlzdEVsZW1lbnRWYWx1ZU5hbWUnLCBpbnB1dEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAvLyBjcmVhdGUgYW5kIGFwcGVuZCBwYXJhZ3JhcGhzXG4gICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5jbGFzc05hbWUgPSAnYzRnX21hcHNfcG9ydHNpZGVfbWVhc3VyZV9wYXJhZ3JhcGgnO1xuICAgICAgICAgICAgc3Ryb25nRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0cm9uZycpO1xuICAgICAgICAgICAgc3Ryb25nRWxlbWVudC5pbm5lckhUTUwgPSBzdHJMYWJlbCArICc6ICc7XG4gICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKHN0cm9uZ0VsZW1lbnQpO1xuICAgICAgICAgICAgc3BhbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBzcGFuRWxlbWVudC5pbm5lckhUTUwgPSAnLi4uJztcbiAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQuYXBwZW5kQ2hpbGQoc3BhbkVsZW1lbnQpO1xuICAgICAgICAgICAgbGlzdEVsZW1lbnQuYXBwZW5kQ2hpbGQocGFyYWdyYXBoRWxlbWVudCk7XG4gICAgICAgICAgICBmZWF0dXJlLnNldCgnbGlzdEVsZW1lbnRWYWx1ZUxpbmUnLCBzcGFuRWxlbWVudCk7XG5cbiAgICAgICAgICAgIGlmIChtZWFzdXJlQXJlYSkge1xuICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmNsYXNzTmFtZSA9ICdjNGdfbWFwc19wb3J0c2lkZV9tZWFzdXJlX3BhcmFncmFwaF9zdXJmYWNlYXJlYSc7XG4gICAgICAgICAgICAgIHN0cm9uZ0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHJvbmcnKTtcbiAgICAgICAgICAgICAgc3Ryb25nRWxlbWVudC5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLlNVUkZBQ0VBUkVBICsgJzogJztcbiAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5hcHBlbmRDaGlsZChzdHJvbmdFbGVtZW50KTtcbiAgICAgICAgICAgICAgc3BhbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgIHNwYW5FbGVtZW50LmlubmVySFRNTCA9ICcuLi4nO1xuICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKHNwYW5FbGVtZW50KTtcbiAgICAgICAgICAgICAgbGlzdEVsZW1lbnQuYXBwZW5kQ2hpbGQocGFyYWdyYXBoRWxlbWVudCk7XG4gICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdsaXN0RWxlbWVudFZhbHVlQXJlYScsIHNwYW5FbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1lYXN1cmVSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAvLyBwYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgICAgIC8vIHBhcmFncmFwaEVsZW1lbnQuY2xhc3NOYW1lID0gJ2M0Z19tYXBzX3BvcnRzaWRlX21lYXN1cmVfcGFyYWdyYXBoX3N1cmZhY2VhcmVhJztcbiAgICAgICAgICAgICAgICAvLyBzdHJvbmdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3Ryb25nJyk7XG4gICAgICAgICAgICAgICAgLy8gc3Ryb25nRWxlbWVudC5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLlNVUkZBQ0VBUkVBICsgJzogJztcbiAgICAgICAgICAgICAgICAvLyBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKHN0cm9uZ0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vIHNwYW5FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgIC8vIHNwYW5FbGVtZW50LmlubmVySFRNTCA9ICcuLi4nO1xuICAgICAgICAgICAgICAgIC8vIHBhcmFncmFwaEVsZW1lbnQuYXBwZW5kQ2hpbGQoc3BhbkVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vIGxpc3RFbGVtZW50LmFwcGVuZENoaWxkKHBhcmFncmFwaEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdsaXN0RWxlbWVudFZhbHVlUmFkaXVzJywgc3BhbkVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vIGluY3JlYXNlIHRoZSBpZC1jb3VudGVyXG4gICAgICAgICAgICBmZWF0dXJlSWRDb3VudCArPSAxO1xuXG4gICAgICAgICAgICAvLyBhcHBlbmQgZWxlbWVudCB0byB0aGUgbGlzdFxuICAgICAgICAgICAgc2VsZi5tYWluU2VjdGlvbi5hcHBlbmRDaGlsZChsaXN0RWxlbWVudCk7XG4gICAgICAgICAgICAvLyBhdHRhY2ggZWxlbWVudCB0byB0aGUgZmVhdHVyZVxuICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2xpc3RFbGVtZW50JywgbGlzdEVsZW1lbnQpO1xuXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgIH07IC8vIGVuZCBvZiBcImFkZE1lYXN1cmVGZWF0dXJlKClcIlxuXG4gICAgICAgICAgdXBkYXRlTWVhc3VyZUZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgdmFyIGZlYXR1cmVUb29sdGlwLFxuICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQsXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgICAgICAgYXJlYSxcbiAgICAgICAgICAgICAgICByYWRpdXM7XG5cbiAgICAgICAgICAgIGZlYXR1cmVUb29sdGlwID0gZmVhdHVyZS5nZXQoJ3Rvb2x0aXAnKTtcbiAgICAgICAgICAgIG5hbWUgPSBmZWF0dXJlLmdldCgnbGlzdEVsZW1lbnRWYWx1ZU5hbWUnKS52YWx1ZTtcbiAgICAgICAgICAgIGxlbmd0aCA9IHV0aWxzLm1lYXN1cmVHZW9tZXRyeShmZWF0dXJlLmdldEdlb21ldHJ5KCksIHRydWUpO1xuICAgICAgICAgICAgbmV3Q29udGVudCA9ICc8c3Ryb25nPicgKyBuYW1lICsgJzwvc3Ryb25nPjxicj4nO1xuXG4gICAgICAgICAgICBmZWF0dXJlLnNldCgnbWVhc3VyZWRMZW5ndGgnLCBsZW5ndGgpO1xuICAgICAgICAgICAgZmVhdHVyZS5nZXQoJ2xpc3RFbGVtZW50VmFsdWVMaW5lJykuaW5uZXJIVE1MID0gbGVuZ3RoLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlLmdldCgnZ2VvbWV0cnlUeXBlJykgPT09ICdjaXJjbGUnKSB7XG4gICAgICAgICAgICAgIHJhZGl1cyA9IHV0aWxzLm1lYXN1cmVHZW9tZXRyeShmZWF0dXJlLmdldEdlb21ldHJ5KCkpO1xuICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbWVhc3VyZWRSYWRpdXMnLCByYWRpdXMpO1xuICAgICAgICAgICAgICBmZWF0dXJlLmdldCgnbGlzdEVsZW1lbnRWYWx1ZVJhZGl1cycpLmlubmVySFRNTCA9IHJhZGl1cy5odG1sVmFsdWU7XG4gICAgICAgICAgICAgIG5ld0NvbnRlbnQgKz0gcmFkaXVzLmh0bWxWYWx1ZTtcblxuICAgICAgICAgICAgICBhcmVhID0gdXRpbHMubWVhc3VyZUdlb21ldHJ5KGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbWVhc3VyZWRBcmVhJywgYXJlYSk7XG4gICAgICAgICAgICAgIGZlYXR1cmUuZ2V0KCdsaXN0RWxlbWVudFZhbHVlQXJlYScpLmlubmVySFRNTCA9IGFyZWEuaHRtbFZhbHVlO1xuICAgICAgICAgICAgICAvLyBuZXdDb250ZW50ICs9IGFyZWEuaHRtbFZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlLmdldCgnZ2VvbWV0cnlUeXBlJykgPT09ICdwb2x5Z29uJykge1xuICAgICAgICAgICAgICAgIGFyZWEgPSB1dGlscy5tZWFzdXJlR2VvbWV0cnkoZmVhdHVyZS5nZXRHZW9tZXRyeSgpKTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbWVhc3VyZWRBcmVhJywgYXJlYSk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5nZXQoJ2xpc3RFbGVtZW50VmFsdWVBcmVhJykuaW5uZXJIVE1MID0gYXJlYS5odG1sVmFsdWU7XG4gICAgICAgICAgICAgICAgbmV3Q29udGVudCArPSBhcmVhLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld0NvbnRlbnQgKz0gbGVuZ3RoLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZlYXR1cmVUb29sdGlwLnNldENvbnRlbnQobmV3Q29udGVudCk7XG4gICAgICAgICAgfTsgLy8gZW5kIG9mIFwidXBkYXRlTWVhc3VyZUZlYXR1cmUoKVwiXG5cbiAgICAgICAgICByZW1vdmVNZWFzdXJlRmVhdHVyZSA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICBzZWxmLm1haW5TZWN0aW9uLnJlbW92ZUNoaWxkKGZlYXR1cmUuZ2V0KCdsaXN0RWxlbWVudCcpKTtcblxuICAgICAgICAgICAgLy8gbGFzdCBlbGVtZW50PyAtPiBhZGQgaW5mb21lc3NhZ2VcbiAgICAgICAgICAgIGlmIChzZWxmLm1haW5TZWN0aW9uLmNoaWxkRWxlbWVudENvdW50IDwgMSkge1xuICAgICAgICAgICAgICBzZWxmLm1haW5TZWN0aW9uLmFwcGVuZENoaWxkKHNlbGYubWFpblNlY3Rpb25JbmZvKTtcbiAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9OyAvLyBlbmQgb2YgXCJyZW1vdmVNZWFzdXJlRmVhdHVyZSgpXCJcblxuICAgICAgICAgICAgLy9TdGFydCBXb3JrYXJvdW5kXG4gICAgICAgICAgICBnZXRWYWx1ZU9mR2VvbWV0cnkgPSBmdW5jdGlvbiAoZmVhdHVyZSl7XG4gICAgICAgICAgICAgICAgdmFyIGxlbmcgPSB1dGlscy5tZWFzdXJlR2VvbWV0cnkoZmVhdHVyZS5nZXRHZW9tZXRyeSgpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAvLyBmZWF0dXJlLnNldCgnbWVhc3VyZWRMZW5ndGgnLCBsZW5ndGgpO1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBsZW5nLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVudW1iID0gdmFsLm1hdGNoKC9cXGQvZyk7XG4gICAgICAgICAgICAgICAgdmFsdWVudW1iID0gdmFsdWVudW1iLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlbnVtYjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0TGVuZ3RoT2ZNZWFzdXJlID0gZnVuY3Rpb24gKCl7XG4gICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9ICcwLjAwIG0nO1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGhudW1iID0gbGVuZ3RoLm1hdGNoKC9cXGQvZyk7XG4gICAgICAgICAgICAgICAgbGVuZ3RobnVtYiA9IGxlbmd0aG51bWIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBsZW5ndGhudW1iID0rODtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVuZ3RobnVtYjtcbiAgICAgICAgICAgIH0vLyBFbmQgV29ya2Fyb3VuZFxuXG4gICAgICAgICAgaW50ZXJhY3Rpb24ub24oJ2RyYXdzdGFydCcsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaCA9IGV2ZW50LmZlYXR1cmU7XG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIHRvb2x0aXBcbiAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwID0gbmV3IFRvb2x0aXBQb3BVcCh7XG4gICAgICAgICAgICAgICAgICBtYXA6IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcCxcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBldmVudC5jb29yZGluYXRlLFxuICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGNsb3NlYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGNsb3NlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvL1dvcmthcm91bmQsIGZvciBzbWFsbCBvciB6ZXJvIHZhbHVlcyBvZiBGcmVlaGFuZFxuICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSBnZXRWYWx1ZU9mR2VvbWV0cnkoZXZlbnQuZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmcgPSBnZXRMZW5ndGhPZk1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsICE9IGxlbmcgJiYgdmFsID4gbGVuZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVNZWFzdXJlRmVhdHVyZShldmVudC5mZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLnJlbW92ZUZlYXR1cmUoZXZlbnQuZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVNZWFzdXJlRmVhdHVyZShldmVudC5mZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCd0b29sdGlwJywgYWN0aXZlVG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlU2tldGNoLnNldCgnZ2VvbWV0cnlUeXBlJywgb3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgIGFkZE1lYXN1cmVGZWF0dXJlKGFjdGl2ZVNrZXRjaCk7XG4gICAgICAgICAgICAgIH0sIHNlbGYpO1xuXG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLm9uKCdwb2ludGVybW92ZScsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVTa2V0Y2ggJiYgYWN0aXZlVG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcC5zZXRQb3NpdGlvbihldmVudC5jb29yZGluYXRlKTtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZU1lYXN1cmVGZWF0dXJlKGFjdGl2ZVNrZXRjaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LCBzZWxmKTtcblxuICAgICAgICAgIGludGVyYWN0aW9uLm9uKCdkcmF3ZW5kJyxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVNrZXRjaCAmJiBhY3RpdmVUb29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGVNZWFzdXJlRmVhdHVyZShhY3RpdmVTa2V0Y2gpO1xuICAgICAgICAgICAgICAgICAgYWN0aXZlU2tldGNoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXAgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgc2VsZik7XG5cbiAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBhY3RpdmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAvLyBkaXNhYmxlIG1hcEhvdmVyXG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwSG92ZXIuZGVhY3RpdmF0ZSgpO1xuXG4gICAgICAgICAgZmVhdHVyZXMuY2xlYXIoKTtcblxuICAgICAgICAgIC8vIEVuYWJsZSBpbnRlcmFjdGlvblxuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgICAgIH0sXG4gICAgICAgIGRlYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgLy8gcmVhY3RpdmF0ZSBtYXBIb3ZlclxuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcEhvdmVyLmFjdGl2YXRlKCk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgIT09ICdwb2ludCcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGludGVyYWN0aW9uLmZpbmlzaERyYXdpbmcoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgICAgICAgICAgICAvLyAwX29cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBSZW1vdmUgZnJvbSBtYXBcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlSW50ZXJhY3Rpb24oaW50ZXJhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG1lYXN1cmVWaWV3O1xuICAgIH0gLy8gZW5kIG9mIFwiYWRkTWVhc3VyZVZpZXcoKVwiXG5cbiAgfSk7XG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIE1lYXN1cmV0b29scyA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5NZWFzdXJldG9vbHM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLW1lYXN1cmV0b29scy5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb250cm9sIHRvIHRvZ2dsZSB0aGUgYnJvd3Nlci9kZXN2aWNlIHBvc2l0aW9uIG9uIHRoZSBtYXAuXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyAge29sLmNvbnRyb2wuQ29udHJvbH1cbiAgICpcbiAgICogQHBhcmFtICAgIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRfb3B0aW9ucyAgKm9wdGlvbmFsKiBjb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLlBvc2l0aW9uID0gZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRfb3B0aW9ucyB8fCB7fTtcblxuICAgIHZhciBlbGVtZW50LFxuICAgICAgICBidXR0b247XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuT0xfWk9PTV9QT1MsXG4gICAgICBzd2l0Y2hhYmxlOiB0cnVlLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZFxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgaWYgKCFvcHRpb25zLm1hcENvbnRyb2xsZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmlldyA9IG9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpO1xuICAgIHZhciBtYXBEYXRhID0gb3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGE7XG5cbiAgICB2YXIgZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgJChlbGVtZW50KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuRU5BQkxFRCk7XG4gICAgfTtcblxuICAgIHZhciBkaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuRU5BQkxFRCk7XG4gICAgfTtcblxuICAgIHZhciB0b2dnbGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgLy8gbG9vc2UgZm9jdXMsIG90aGVyd2lzZSBpdCBsb29rcyBtZXNzeVxuICAgICAgdGhpcy5ibHVyKCk7XG5cbiAgICAgIHZhciBnZW9Mb2NhdGlvbiA9IG5ldyBvbC5HZW9sb2NhdGlvbih7XG4gICAgICAgIHRyYWNraW5nOiB0cnVlLFxuICAgICAgICBwcm9qZWN0aW9uOiB2aWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgfSk7XG5cbiAgICAgIGdlb0xvY2F0aW9uLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZpZXcuc2V0Q2VudGVyKGdlb0xvY2F0aW9uLmdldFBvc2l0aW9uKCkpO1xuICAgICAgICAvLyBpZiAobWFwRGF0YS5nZW9sb2NhdGlvbl96b29tKSB7XG4gICAgICAgIC8vICAgIHZpZXcuc2V0Wm9vbShtYXBEYXRhLmdlb2xvY2F0aW9uX3pvb20pO1xuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICB2aWV3LnNldFpvb20oMTgpO1xuICAgICAgICAvL31cbiAgICAgICAgZ2VvTG9jYXRpb24uc2V0VHJhY2tpbmcoZmFsc2UpO1xuICAgICAgICBvcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnNldFZpZXcodmlldyk7XG4gICAgICAgIGM0Zy5tYXBzLnV0aWxzLnJlZHJhd01hcFZpZXcob3B0aW9ucy5tYXBDb250cm9sbGVyKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyB3cmFwcGVyIGRpdlxuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRSArICcgYnV0dG9uJztcblxuICAgIGlmIChvcHRpb25zLnN3aXRjaGFibGUpIHtcbiAgICAgIC8vIGJ1dHRvblxuICAgICAgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b24udGl0bGUgPSBvcHRpb25zLnRpcExhYmVsO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChidXR0b24pO1xuXG4gICAgICAvLyBzZXQgb25DbGljayB0byB0aGUgdG9nZ2xlLWZ1bmN0aW9uXG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGUsIGZhbHNlKTtcbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdG9nZ2xlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gaW5oZXJpdGFuY2Utc3R1ZmZcbiAgICBvbC5jb250cm9sLkNvbnRyb2wuY2FsbCh0aGlzLCB7XG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgdGFyZ2V0OiBvcHRpb25zLnRhcmdldFxuICAgIH0pO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLlBvc2l0aW9uLCBvbC5jb250cm9sLkNvbnRyb2wpO1xuXG5cbiAgLypcbiAgICogQWRkIG1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuUG9zaXRpb24ucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5Qb3NpdGlvbi5wcm90b3R5cGUsIHtcblxuICAgIC8vIG5vdGhpbmcgdG8gYWRkIGhlcmVcblxuICB9KTsgLy8gZW5kIG9mIFwiYWRkIG1ldGhvZHNcIiAtLS1cblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgUG9zaXRpb24gPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuUG9zaXRpb247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvc2l0aW9uLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb250cm9sIHRvIHRvZ2dsZSB0aGUgYnJvd3Nlci9kZXN2aWNlIHBvc2l0aW9uIG9uIHRoZSBtYXAuXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyAge29sLmNvbnRyb2wuQ29udHJvbH1cbiAgICpcbiAgICogQHBhcmFtICAgIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRfb3B0aW9ucyAgKm9wdGlvbmFsKiBjb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLlByaW50ID0gZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRfb3B0aW9ucyB8fCB7fTtcblxuICAgIHZhciBlbGVtZW50LFxuICAgICAgYnV0dG9uO1xuXG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLlBSSU5ULFxuICAgICAgc3dpdGNoYWJsZTogdHJ1ZSxcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBtYXBDb250cm9sbGVyOiB1bmRlZmluZWRcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGlmICghb3B0aW9ucy5tYXBDb250cm9sbGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZpZXcgPSBvcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKTtcbiAgICB2YXIgbWFwRGF0YSA9IG9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhO1xuXG4gICAgdmFyIHRvZ2dsZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm9sLXVuc2VsZWN0YWJsZVwiKVswXTtcblxuICAgICAgY2FudmFzLnRvQmxvYihmdW5jdGlvbihibG9iKSB7XG4gICAgICAgIGxldCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgIGEuc3R5bGUgPSBcImRpc3BsYXk6IG5vbmVcIjtcbiAgICAgICAgbGV0IHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICBhLmhyZWYgPSB1cmw7XG4gICAgICAgIGEuZG93bmxvYWQgPSAnbWFwLnBuZyc7XG4gICAgICAgIGEuY2xpY2soKTtcbiAgICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyB3cmFwcGVyIGRpdlxuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRSArICcgYzRnLXBvcnRzaWRlLWNvbnRyb2wgb2wtY29udHJvbCc7XG5cbiAgICBpZiAob3B0aW9ucy5zd2l0Y2hhYmxlKSB7XG4gICAgICAvLyBidXR0b25cbiAgICAgIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uLnRpdGxlID0gb3B0aW9ucy50aXBMYWJlbDtcbiAgICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUFJJTlRcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcblxuICAgICAgLy8gc2V0IG9uQ2xpY2sgdG8gdGhlIHRvZ2dsZS1mdW5jdGlvblxuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlLCBmYWxzZSk7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRvZ2dsZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIGluaGVyaXRhbmNlLXN0dWZmXG4gICAgb2wuY29udHJvbC5Db250cm9sLmNhbGwodGhpcywge1xuICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIHRhcmdldDogb3B0aW9ucy50YXJnZXRcbiAgICB9KTtcbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5QcmludCwgb2wuY29udHJvbC5Db250cm9sKTtcblxuXG4gIC8qXG4gICAqIEFkZCBtZXRob2RzXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLlByaW50LnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuUHJpbnQucHJvdG90eXBlLCB7XG5cbiAgICAvLyBub3RoaW5nIHRvIGFkZCBoZXJlXG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCIgLS0tXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIFByaW50ID0gdGhpcy5jNGcubWFwcy5jb250cm9sLlByaW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wcmludC5qcyIsIi8vIFwibmFtZXNwYWNlXCJcblxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzR2VybWFufSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNFbmdsaXNofSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWVuXCI7XG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7U3Bpbm5lcn0gZnJvbSBcIi4vYzRnLW1hcHMtbWlzYy1zcGlubmVyXCI7XG5cbmxldCBsYW5nQ29uc3RhbnRzID0ge307XG5cbmlmICh0eXBlb2YgbWFwRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBpZiAobWFwRGF0YS5sYW5nID09PSBcImRlXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfSBlbHNlIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzRW5nbGlzaDtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9XG59XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3Igc2lkZWJvYXJkIHN0cnVjdHVyZXMuIFByb3ZpZGVzIHN0YW5kYXJkIGNvbmZpZ3VyYXRpb25zIHdoaWNoIGFyZSBlcXVhbCBmb3IgZWFjaCBzaWRlYm9hcmQgZWxlbWVudC5cbiAqL1xuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAZXh0ZW5kcyB7b2wuY29udHJvbC5Db250cm9sfVxuICAgKiBAcGFyYW0gICB7b2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9ucyAgbWlzYyBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICpcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIGV4dERpdjogZmFsc2UsXG4gICAgICBkZWZhdWx0T3BlbjogZmFsc2UsXG4gICAgICBtYXBDb250cm9sbGVyOiB1bmRlZmluZWQsXG4gICAgICBuYW1lOiAnc2lkZWJvYXJkJyxcbiAgICAgIGRpcmVjdGlvbjogJ3JpZ2h0JyxcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIC8vYWN0aXZlIElkZW50aWZpZXIgKHdoaWNoIHNpZGUgaXMgdGhpcyBlbGVtZW50IG9uPylcbiAgICAvL2Nzc25hbWUgbmVlZGVkIHRvIHNldCB0aGUgY3NzIGNsYXNzIGNvcnJlY3RseVxuICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLmRpcmVjdGlvbikge1xuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9ICdQb3J0c2lkZSc7XG4gICAgICAgIHRoaXMuY3NzbmFtZSA9ICdwb3J0c2lkZSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSAnU3RhcmJvYXJkJztcbiAgICAgICAgdGhpcy5jc3NuYW1lID0gJ3N0YXJib2FyZCc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvL3RoaXMuY3NzbmFtZSA9IHRoaXMuaWRlbnRpZmllci5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHRoaXMuaWRlbnRpZmllci5zbGljZSgxKTtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zLnRpcExhYmVsID0gdGhpcy5vcHRpb25zLnRpcExhYmVsIHx8IHRoaXMub3B0aW9ucy5oZWFkbGluZSB8fCBsYW5nQ29uc3RhbnRzLkNUUkxfU0lERUJPQVJEO1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5idXR0b24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zcGlubmVyID0gdW5kZWZpbmVkO1xuICAgIC8vIG1haW5zdHJ1Y3R1cmUgZWxlbWVudHNcbiAgICB0aGlzLndyYXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50aXRsZUJhciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlYWRsaW5lID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudG9wVG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbnRlbnRDb250YWluZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib3R0b21Ub29sYmFyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc3RhdHVzQmFyID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5zZWN0aW9ucyA9IFtdO1xuICAgIHRoaXMudmlld1RyaWdnZXJCYXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52aWV3cyA9IFtdO1xuICAgIHRoaXMuYWN0aXZlVmlldyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhdXNlZFZpZXcgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNyZWF0ZSAmJiB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcikge1xuICAgICAgdGhpcy5jcmVhdGUoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5leHREaXYpIHtcbiAgICAgIG9sLmNvbnRyb2wuQ29udHJvbC5jYWxsKHRoaXMsIHtcbiAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgICB0YXJnZXQ6IHRoaXMub3B0aW9ucy50YXJnZXQgfHwgdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIG9sLmluaGVyaXRzKGM0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkLCBvbC5jb250cm9sLkNvbnRyb2wpO1xuXG4gIC8vIEFkZCBtZXRob2RzXG4gIGM0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgYmFzaWMgaHRtbC1lbGVtZW50cyBmb3IgdGhlIHNpZGVib2FyZFxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICAndHJ1ZScgb24gc3VjY2Vzc1xuICAgICAqL1xuICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgaW5pdENsYXNzLFxuICAgICAgICAgIHRpdGxlQnV0dG9uQmFyLFxuICAgICAgICAgIGNsb3NlQnV0dG9uLFxuICAgICAgICAgIGNhcGl0YWxpemVkTmFtZSxcbiAgICAgICAgICBoaWRlQnV0dG9uLFxuICAgICAgICAgIGNhY2hpbmc7XG5cbiAgICAgIGNhY2hpbmcgPSB0aGlzLm9wdGlvbnMuY2FjaGluZztcbiAgICAgIGNhcGl0YWxpemVkTmFtZSA9IHV0aWxzLmNhcGl0YWxpemVGaXJzdExldHRlcih0aGlzLm9wdGlvbnMubmFtZSk7XG4gICAgICBzZWxmID0gdGhpcztcblxuXG4gICAgICAvLyBEbyBub3QgaGlkZSB3aGVuIGl0IGlzIGluaXRpYWxpemVkIG9wZW4sIG9yIGluIGFuIGV4dGVybmFsIGRpdlxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHREaXYpIHtcbiAgICAgICAgaW5pdENsYXNzID0gJyAnICsgY3NzQ29uc3RhbnRzLk9QRU47XG4gICAgICAgIC8vIGlmIChjYWNoaW5nKSB7XG4gICAgICAgIC8vICAgICB1dGlscy5zdG9yZVZhbHVlKHRoaXMub3B0aW9ucy5uYW1lLCAnMScpO1xuICAgICAgICAvLyB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0Q2xhc3MgPSAnICcgKyBjc3NDb25zdGFudHMuQ0xPU0U7XG4gICAgICAgIC8vIGlmIChjYWNoaW5nKSB7XG4gICAgICAgIC8vICAgICB1dGlscy5zdG9yZVZhbHVlKHRoaXMub3B0aW9ucy5uYW1lLCAnMCcpO1xuICAgICAgICAvLyB9XG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0gfHwgZmFsc2U7XG5cbiAgICAgICAgdGhpcy5idXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgJCh0aGlzLmJ1dHRvbikub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgLy8gbG9vc2UgZm9jdXMsIG90aGVyd2lzZSBpdCBsb29rcyBtZXNzeVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmJsdXIoKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBbbm90ZV0gXCJ0aGlzLmJsdXIoKVwiIGRvZXMgbm90IHdvcmsgaW4gSUUtZnVsbHNjcmVlbi1tb2RlXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZS5uYW1lICsgJzogJyArIGUubWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGNhcGl0YWxpemVkTmFtZSA9PSBcIlJvdXRlclwiIHx8IGNhcGl0YWxpemVkTmFtZSA9PSBcIk1lYXN1cmVcIiB8fCBjYXBpdGFsaXplZE5hbWUgPT0gXCJFZGl0b3JcIil7XG4gICAgICAgICAgICAgIHNlbGYudG9nZ2xlKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICBzZWxmLnRvZ2dsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYnV0dG9uLnRpdGxlID0gdGhpcy5vcHRpb25zLnRpcExhYmVsO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5idXR0b24pO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgYXR0cmlidXRlc1xuICAgICAgJCh0aGlzLmNvbnRhaW5lcikuYWRkQ2xhc3MoJ2M0Zy0nICsgdGhpcy5vcHRpb25zLm5hbWUgKyAnICcgKyAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLWNvbnRhaW5lcicgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFICsgaW5pdENsYXNzKTtcbiAgICAgICQodGhpcy5lbGVtZW50KS5hZGRDbGFzcygnYzRnLScgKyB0aGlzLm9wdGlvbnMubmFtZSArICcgJyArICdjNGctJyArIHRoaXMuY3NzbmFtZSArICctY29udHJvbCcgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX0NPTlRST0wgKyBpbml0Q2xhc3MpO1xuXG4gICAgICAvLyBTZXQgaW5pdGlhbCBkaW1lbnNpb25zXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAvL3RoaXMuY29udGFpbmVyLnN0eWxlLm1pbldpZHRoID0gJzI1MHB4JztcbiAgICAgICAgLy90aGlzLmNvbnRhaW5lci5zdHlsZVt0aGlzLm9wdGlvbnMuZGlyZWN0aW9uXSA9ICctMTkyMHB4JztcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGVbdGhpcy5vcHRpb25zLmRpcmVjdGlvbl0gPSAnLTEwMCUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy90aGlzLmNvbnRhaW5lci5zdHlsZS5taW5XaWR0aCA9ICcyNTBweCc7XG4gICAgICAgIC8vdGhpcy5jb250YWluZXIuc3R5bGVbdGhpcy5vcHRpb25zLmRpcmVjdGlvbl0gPSAnLTE5MjBweCc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlW3RoaXMub3B0aW9ucy5kaXJlY3Rpb25dID0gJy0xMDAlJztcbiAgICAgIH1cblxuICAgICAgLy8gUGxhY2UgY29udGFpbmVyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dERpdikge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm9wdGlvbnMuZXh0RGl2KS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIC8vICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSA9IHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgJCgnIycgKyB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VGFyZ2V0KCkgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX09WRVJMQVlDT05UQUlORVJfU0UpLmFwcGVuZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50LmFwcGVuZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQnVpbGQgY29udGVudC1hcmVhXG4gICAgICAvL1xuICAgICAgLy8gV3JhcHBlclxuICAgICAgdGhpcy53cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLndyYXBwZXIuY2xhc3NOYW1lID0gJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy13cmFwcGVyJztcbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMud3JhcHBlcik7XG4gICAgICAvLyBUaXRsZWJhclxuICAgICAgdGhpcy50aXRsZUJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy50aXRsZUJhci5jbGFzc05hbWUgPSAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLXRpdGxlYmFyJztcbiAgICAgIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnRpdGxlQmFyKTtcblxuICAgICAgLy8gVHJpZ2dlcmJhclxuICAgICAgdGhpcy52aWV3VHJpZ2dlckJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy52aWV3VHJpZ2dlckJhci5jbGFzc05hbWUgPSAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLXZpZXd0cmlnZ2VyYmFyJztcblxuICAgICAgLy8gVG9wLVRvb2xiYXJcbiAgICAgIHRoaXMudG9wVG9vbGJhciA9IHRoaXMuYWRkU2VjdGlvbih7XG4gICAgICAgIGNsYXNzTmFtZTogJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy10b3AtdG9vbGJhcicsXG4gICAgICAgIHRhcmdldDogdGhpcy53cmFwcGVyXG4gICAgICB9KTtcblxuICAgICAgLy8gQ29udGVudC1Db250YWluZXJcbiAgICAgIHRoaXMuY29udGVudENvbnRhaW5lciA9IHRoaXMuYWRkU2VjdGlvbih7XG4gICAgICAgIGNsYXNzTmFtZTogJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy1jb250ZW50LWNvbnRhaW5lcicsXG4gICAgICAgIHRhcmdldDogdGhpcy53cmFwcGVyXG4gICAgICB9KTtcblxuICAgICAgLy8gYWRkIGNvbnRlbnQgaGVhZGxpbmVcbiAgICAgIHRoaXMuY29udGVudEhlYWRsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmNvbnRlbnRIZWFkbGluZS5jbGFzc05hbWUgPSAnY29udGVudEhlYWRsaW5lJztcbiAgICAgIHRoaXMuY29udGVudEhlYWRsaW5lLmlubmVySFRNTCA9ICcnO1xuICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuY29udGVudEhlYWRsaW5lKTtcblxuICAgICAgLy8gQm90dG9tLVRvb2xiYXJcbiAgICAgIHRoaXMuYm90dG9tVG9vbGJhciA9IHRoaXMuYWRkU2VjdGlvbih7XG4gICAgICAgICAgY2xhc3NOYW1lOiAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLWJvdHRvbS10b29sYmFyIGM0Zy1jbG9zZScsXG4gICAgICAgICAgdGFyZ2V0OiB0aGlzLndyYXBwZXJcbiAgICAgIH0pO1xuXG4gICAgICAgLy8gU3RhdHVzYmFyXG4gICAgICB0aGlzLnN0YXR1c0JhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy5zdGF0dXNCYXIuY2xhc3NOYW1lID0gJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy1zdGF0dXNiYXIgYzRnLWNsb3NlJztcbiAgICAgIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnN0YXR1c0Jhcik7XG5cbiAgICAgIC8vIEFkZCBzcGlubmVyXG4gICAgICB0aGlzLnNwaW5uZXIgPSBuZXcgU3Bpbm5lcih7XG4gICAgICAgIHRhcmdldDogdGhpcy5jb250ZW50Q29udGFpbmVyLFxuICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5MQVJHRVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEZpbGwgdGl0bGViYXJcbiAgICAgIC8vXG4gICAgICAvLyBIZWFkbGluZVxuICAgICAgdGhpcy5oZWFkbGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIHRoaXMuaGVhZGxpbmUuY2xhc3NOYW1lID0gJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy1oZWFkbGluZSc7XG4gICAgICB0aGlzLmhlYWRsaW5lLmlubmVySFRNTCA9IHRoaXMub3B0aW9ucy5oZWFkbGluZTtcbiAgICAgIHRoaXMudGl0bGVCYXIuYXBwZW5kQ2hpbGQodGhpcy5oZWFkbGluZSk7XG4gICAgICAvLyBCdXR0b25iYXJcbiAgICAgIHRpdGxlQnV0dG9uQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aXRsZUJ1dHRvbkJhci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTCArICcgJyArICdjNGctJyArIHRoaXMuY3NzbmFtZSArICctYnV0dG9uYmFyJztcbiAgICAgIHRoaXMudGl0bGVCYXIuYXBwZW5kQ2hpbGQodGl0bGVCdXR0b25CYXIpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIC8vIEhpZGVidXR0b25cbiAgICAgICAgaGlkZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBoaWRlQnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5QT1JUU0lERV9ISURFO1xuICAgICAgICBoaWRlQnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5ISURFO1xuICAgICAgICAkKGhpZGVCdXR0b24pLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgc2VsZi5jbG9zZSh0cnVlKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICB0aXRsZUJ1dHRvbkJhci5hcHBlbmRDaGlsZChoaWRlQnV0dG9uKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xvc2VidXR0b25cbiAgICAgIGNsb3NlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBjbG9zZUJ1dHRvbi5jbGFzc05hbWUgPSAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLWNsb3NlJztcbiAgICAgIGNsb3NlQnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5DTE9TRTtcbiAgICAgICQoY2xvc2VCdXR0b24pLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgdGl0bGVCdXR0b25CYXIuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b24pO1xuXG4gICAgICAvL0FkZCBzcGlubmVyIGZvciBsZWZ0IHNpZGVkIHNpZGVib2FyZCBlbGVtZW50c1xuICAgICAgdGhpcy5zcGlubmVyID0gbmV3IFNwaW5uZXIoe1xuICAgICAgICB0YXJnZXQ6IHRoaXMuY29udGVudENvbnRhaW5lcixcbiAgICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuTEFSR0VcbiAgICAgIH0pO1xuXG4gICAgICAvLyBIYW5kbGUgZXh0ZXJuYWwgRElWIGFuZCBkZWZhdWx0IHN0YXRlXG4gICAgICAvLyBjYXRjaCB0b3VjaCBldmVudHMgYW5kIHN0b3AgdGhlaXIgcHJvcGFnYXRpb25cbiAgICAgIC8vIG90aGVyd2lzZSB0b3VjaC1zY3JvbGxpbmcgd2lsbCBiZSBzdG9wcGVkIGJ5IG9sM1xuICAgICAgJCh0aGlzLmNvbnRhaW5lcikub24oJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEJpbmQgdGhlIHVwZGF0ZSBtZXRob2QgdG8gdGhlIG1hcC1yZXNpemUgZXZlbnRcbiAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5vbignY2hhbmdlOnNpemUnLCB0aGlzLnVwZGF0ZSwgdGhpcyk7XG5cbiAgICAgIC8vIFNob3cgb3BlbiBpZiBkZXNpcmVkXG4gICAgICBpZiAoKHRoaXMub3B0aW9ucy5kZWZhdWx0T3BlbikgfHwgKHRoaXMub3B0aW9ucy5jYWNoaW5nICYmICh1dGlscy5nZXRWYWx1ZSh0aGlzLm9wdGlvbnMubmFtZSkgPT0gJzEnKSkpIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sIC8vIGVuZCBvZiBcImNyZWF0ZVwiXG5cbiAgICAvKipcbiAgICAgKiAgIFVwZGF0ZSB0aGUgc2lkZWJvYXJkcyBodG1sLWVsZW1lbnRzXG4gICAgICogICByZXNpemVzIHRoZSBjb250ZW50LWNvbnRhaW5lclxuICAgICAqICAgYW5kIHRoZSB0b3AtdG9vbGJhclxuICAgICAqXG4gICAgICogQHBhcmFtICB7ZXZlbnQtb2JqZWN0fSAgb3B0X2V2ZW50ICAqb3B0aW9uYWwqICBKdXN0IG5lZWRlZCBieSB0aGUgb2wtYmluZC1tZXRob2QsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXQgbm90IHVzZWQgaW4gdGhlIGZ1bmN0aW9uXG4gICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAob3B0X2V2ZW50KSB7XG5cbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIGNvbnRlbnRDb250YWluZXJPdXRlckhlaWdodCxcbiAgICAgICAgICBjb250YWluZXJPZmZzZXRXaWR0aDtcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8qXG4gICAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5uYW1lKSB7XG4gICAgICAgICAgY2FwaXRhbGl6ZWROYW1lID0gdXRpbHMuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHRoaXMub3B0aW9ucy5uYW1lKTtcbiAgICAgIH0qL1xuXG4gICAgICBjb250ZW50Q29udGFpbmVyT3V0ZXJIZWlnaHQgPSAkKHRoaXMud3JhcHBlcikuaGVpZ2h0KCkgLSAoJCh0aGlzLnRpdGxlQmFyKS5vdXRlckhlaWdodCh0cnVlKSArICQodGhpcy5zdGF0dXNCYXIpLm91dGVySGVpZ2h0KHRydWUpKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmRpcmVjdGlvbiAmJiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uICE9IFwidW5kZWZpbmVkXCIgJiYgdGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIGlmICh0aGlzICE9PSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSkge1xuICAgICAgICAgIGNvbnRhaW5lck9mZnNldFdpZHRoID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUb3AtVG9vbGJhclxuICAgICAgaWYgKHRoaXMudG9wVG9vbGJhcikge1xuICAgICAgICAgIGlmICh0aGlzLnRvcFRvb2xiYXIuaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAgIC8vIHRoaXMudG9wVG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgdGhpcy50b3BUb29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgICAgY29udGVudENvbnRhaW5lck91dGVySGVpZ2h0IC09ICQodGhpcy50b3BUb29sYmFyKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnRvcFRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEJvdHRvbS10b29sYmFyXG4gICAgICBpZiAodGhpcy5ib3R0b21Ub29sYmFyKSB7XG4gICAgICAgICAgaWYgKHRoaXMuYm90dG9tVG9vbGJhci5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLy8gdGhpcy5ib3R0b21Ub29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICB0aGlzLmJvdHRvbVRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgICAgICBjb250ZW50Q29udGFpbmVyT3V0ZXJIZWlnaHQgLT0gJCh0aGlzLmJvdHRvbVRvb2xiYXIpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuYm90dG9tVG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ29udGVudC1jb250YWluZXJcbiAgICAgICQodGhpcy5jb250ZW50Q29udGFpbmVyKS5vdXRlckhlaWdodChjb250ZW50Q29udGFpbmVyT3V0ZXJIZWlnaHQpO1xuXG4gICAgICAvLyBDb3JyZWN0IHdpZHRoXG4gICAgICBpZiAodGhpcy5vcHRpb25zKSB7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdID09PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vdGhpcy5jb250YWluZXIuc3R5bGUud2lkdGggPSAnYXV0byc7XG4gICAgICAgICAgICAgIGNvbnRhaW5lck9mZnNldFdpZHRoID0gdGhpcy5jb250YWluZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW3RoaXMub3B0aW9ucy5kaXJlY3Rpb24gKyBcIlNsaWRlRWxlbWVudHNcIl0uZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moc2VsZi5vcHRpb25zLmRpcmVjdGlvbiwgY29udGFpbmVyT2Zmc2V0V2lkdGgpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAvL29ubHkgbW92ZSB0aGUgdG9nZ2xlIGJ1dHRvbiBvbiBzdGFyYm9hcmQgZWxlbWVudHNcbiAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICAgICQodGhpcy5lbGVtZW50KS5jc3ModGhpcy5vcHRpb25zLmRpcmVjdGlvbiwgY29udGFpbmVyT2Zmc2V0V2lkdGgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9LCAvLyBlbmQgb2YgXCJ1cGRhdGVcIlxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhpcyBzaWRlYm9hcmQgZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtICAge29iamVjdH0gICAgKm9wdGlvbmFsKiBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byB0aGUgaW5pdGlhbGl6ZS1mdW5jdGlvbiBpZiBpdCBleGlzdHNcbiAgICAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gICd0cnVlJyBhbiBzdWNjZXNzXG4gICAgICovXG4gICAgb3BlbjogZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG4gICAgICB2YXIgY29udGFpbmVyT2Zmc2V0V2lkdGgsXG4gICAgICAgICAgc2VsZjtcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIENhbGwgaW5pdGlhbGl6ZS1mdW5jdGlvbnMsIGlmIGV4aXN0ZW50XG4gICAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmluaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdGhpcy5pbml0KG9wdF9vcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBjYWxsIHByZU9wZW5GdW5jdGlvbnNcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcmVPcGVuRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5wcmVPcGVuRnVuY3Rpb24oKTtcbiAgICAgIH1cblxuICAgICAgY29udGFpbmVyT2Zmc2V0V2lkdGggPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aDtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHREaXYpIHtcbiAgICAgICAgLy8gTm90IGF2YWlsYWJsZSBvbiBleHRlcm5hbCBkaXZzXG4gICAgICAgIGNvbnNvbGUud2FybignWW91IGNhbm5vdCB1c2UgdGhpcyBmdW5jdGlvbiBvbiBleHRlcm5hbCBlbWJlZGRlZCBzaWRlYm9hcmQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0pIHtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0gPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9jbG9zZSBvdGhlciBhY3RpdmUgc2lkZWJvYXJkIG9uIHRoaXMgc2lkZVxuICAgICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdLmNsb3NlKHRydWUsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHNsaWRlIG90aGVyIGVsZW1lbnRzIHdoZW4gbm8gb3RoZXIgc2lkZWJvYXJkIHdhcyBhY3RpdmUgb24gdGhpcyBzaWRlXG4gICAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbdGhpcy5vcHRpb25zLmRpcmVjdGlvbiArIFwiU2xpZGVFbGVtZW50c1wiXS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyhzZWxmLm9wdGlvbnMuZGlyZWN0aW9uLCBjb250YWluZXJPZmZzZXRXaWR0aCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuY29udGFpbmVyKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKS5jc3ModGhpcy5vcHRpb25zLmRpcmVjdGlvbiwgMCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAkKHRoaXMuZWxlbWVudCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJCh0aGlzLmVsZW1lbnQpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmNzcyh0aGlzLm9wdGlvbnMuZGlyZWN0aW9uLCBjb250YWluZXJPZmZzZXRXaWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgdGhpcyBhcyBhY3RpdmUgU2lkZWJvYXJkXG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdID0gdGhpcztcblxuICAgICAgICAvLyBjaGVjayBpZiBhIHZpZXcgbmVlZHMgdG8gYmUgcmVhY3RpdmF0ZWRcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlVmlldykge1xuICAgICAgICAgIHRoaXMuYWN0aXZlVmlldy5hY3RpdmF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCQodGhpcy5zdGF0dXNCYXIpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgICAkKHRoaXMuc3RhdHVzQmFyKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkKHRoaXMuYm90dG9tVG9vbGJhcikuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKSkge1xuICAgICAgICAgICQodGhpcy5ib3R0b21Ub29sYmFyKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3cgY29udGFpbmVyIHRvIGZpeCByZXNpemluZyBpc3N1ZVxuICAgICAgICAkKHRoaXMuY29udGFpbmVyKS5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2FjaGluZykge1xuICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUodGhpcy5vcHRpb25zLm5hbWUsICcxJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjYWxsIHBvc3RPcGVuRnVuY3Rpb25zXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wb3N0T3BlbkZ1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5wb3N0T3BlbkZ1bmN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCAvLyBlbmQgb2YgXCJvcGVuXCJcblxuICAgIGlzT3BlbjogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSAmJiB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSA9PT0gdGhpcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGlzIHNpZGVib2FyZCBlbGVtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7Ym9vbGVhbn0gIG9wdF9oaWRlICAgICAgICAgICAgICAgKm9wdGlvbmFsKiBDaG9vc2UgaWYgdGhpcyBmdW5jdGlvbiBzaG91bGQgdHJpZ2dlciB8cHJlSGlkZUZ1bmN0aW9ufFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIHxwcmVDbG9zZUZ1bmN0aW9ufC4gRGVmYXVsdCBpcyB8ZmFsc2V8LlxuICAgICAqIEBwYXJhbSAgIHtib29sZWFufSAgb3B0X29wZW5PdGhlclNpZGVib2FyZCAgKm9wdGlvbmFsKiBJbmRpY2F0ZXMgaWYgYW5vdGhlciBzaWRlYm9hcmQgZWxlbWVudCB3aWxsIGJlIG9wZW5lZCBpbnN0ZWFkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIHxmYWxzZXwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgICAgICAgICAgfHRydWV8IG9uIHN1Y2Nlc3MuXG4gICAgICovXG4gICAgY2xvc2U6IGZ1bmN0aW9uIChvcHRfaGlkZSwgb3B0X29wZW5PdGhlclNpZGVib2FyZCkge1xuICAgICAgdmFyIGNvbnRhaW5lck9mZnNldFdpZHRoLFxuICAgICAgICAgIGRpcmVjdGlvbjtcblxuICAgICAgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcblxuICAgICAgaWYgKG9wdF9oaWRlICkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucHJlSGlkZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5wcmVIaWRlRnVuY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByZUNsb3NlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLnByZUNsb3NlRnVuY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb250YWluZXJPZmZzZXRXaWR0aCA9IHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dERpdikge1xuICAgICAgICAvLyBOb3QgYXZhaWxhYmxlIG9uIGV4dGVybmFsIGRpdnNcbiAgICAgICAgY29uc29sZS53YXJuKCdZb3UgY2Fubm90IHVzZSB0aGlzIGZ1bmN0aW9uIG9uIGV4dGVybmFsIGVtYmVkZGVkIHNpZGVib2FyZC4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSAhPT0gdGhpcykge1xuICAgICAgICAgIGNvbnNvbGUud2FybignVGhpcyAnICsgdGhpcy5vcHRpb25zLm5hbWUgKyAnLWVsZW1lbnQgKCcgKyB0aGlzLm9wdGlvbnMubmFtZSArICcpIGlzIGFscmVhZHkgY2xvc2VkLicpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAkKHRoaXMuY29udGFpbmVyKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5jc3MoZGlyZWN0aW9uLCAtY29udGFpbmVyT2Zmc2V0V2lkdGgpO1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkuY3NzKGRpcmVjdGlvbiwgMCk7XG5cbiAgICAgICAgaWYgKCFvcHRfb3Blbk90aGVyU2lkZWJvYXJkKSB7XG4gICAgICAgICAgLy8gc2xpZGUgb3RoZXIgZWxlbWVudHNcbiAgICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltkaXJlY3Rpb24gKyBcIlNsaWRlRWxlbWVudHNcIl0uZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KS5jc3MoZGlyZWN0aW9uLCAwKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhpZGUgY29udGFpbmVyIHRvIGZpeCByZXNpemluZyBpc3N1ZVxuICAgICAgICAkKHRoaXMuY29udGFpbmVyKS5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG5cbiAgICAgICAgLy8gY2hlY2sgaWYgYSB2aWV3IG5lZWRzIHRvIGJlIGRlYWN0aXZhdGVkXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZVZpZXcpIHtcbiAgICAgICAgICB0aGlzLmFjdGl2ZVZpZXcuZGVhY3RpdmF0ZSh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBhY3RpdmUgU2lkZWJvYXJkZW50cnlcbiAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0gPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNhY2hpbmcpIHtcbiAgICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUodGhpcy5vcHRpb25zLm5hbWUsICcwJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSwgLy8gZW5kIG9mIFwiY2xvc2VcIlxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIHRoaXMgc2lkZWJvYXJkIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgUmV0dXJucyB8dHJ1ZXwgb24gc3VjY2Vzcy5cbiAgICAgKi9cbiAgICB0b2dnbGU6IGZ1bmN0aW9uIChvcHRfaGlkZSkge1xuICAgICAgdmFyIGNhcGl0YWxpemVkTmFtZTtcbiAgICAgIGNhcGl0YWxpemVkTmFtZSA9IHV0aWxzLmNhcGl0YWxpemVGaXJzdExldHRlcih0aGlzLm9wdGlvbnMubmFtZSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0gPT09IHRoaXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2Uob3B0X2hpZGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMub3BlbigpO1xuICAgIH0sIC8vIGVuZCBvZiBcInRvZ2dsZVwiXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYnV0dG9uIHdoaWNoIGNoYXJhY3RlcmlzdGljcyBhcmUgZGVmaW5lZCBieSB0aGUgb3B0aW9ucyBwYXJhbWV0ZXJcbiAgICAgKiBUaGVzZSBvcHRpb25zIGluY2x1ZGUgZS5nLiB0aGUgdGFyZ2V0IGNvbnRhaW5lciB3aGVyZSB0aGUgYnV0dG9uIHdpbGwgYmUgYXBwZW5kZWQgYW5kIHRoZSBjbGljayBhY3Rpb24gb2YgdGhlIGJ1dHRvblxuICAgICAqXG4gICAgICogQHBhcmFtICAge29iamVjdH0gIG9wdF9vcHRpb25zICBUaGUgYnV0dG9uIGNvbmZpZ3VyYXRpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgbWFrZUJ1dHRvbjogZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICAgIHZhciBvcHRpb25zLFxuICAgICAgICAgIGJ1dHRvbjtcblxuICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgbGFiZWw6IHVuZGVmaW5lZCxcbiAgICAgICAgdGlwTGFiZWw6IHVuZGVmaW5lZCxcbiAgICAgICAgY2xhc3NOYW1lOiAnJyxcbiAgICAgICAgdGFyZ2V0OiB1bmRlZmluZWQsXG4gICAgICAgIGNsaWNrQWN0aW9uOiB1bmRlZmluZWRcbiAgICAgIH0sIG9wdF9vcHRpb25zKTtcblxuICAgICAgaWYgKG9wdGlvbnMuY2xhc3NOYW1lKSB7XG4gICAgICAgIG9wdGlvbnMuY2xhc3NOYW1lID0gJyAnICsgb3B0aW9ucy5jbGFzc05hbWU7XG4gICAgICB9XG5cbiAgICAgIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9ICdjNGctJyArIHRoaXMub3B0aW9ucy5uYW1lICsgJy1idXR0b24nICsgb3B0aW9ucy5jbGFzc05hbWU7XG4gICAgICBpZihvcHRpb25zLmlkKSB7XG4gICAgICAgIGJ1dHRvbi5pZCA9IG9wdGlvbnMuaWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50aXBMYWJlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYnV0dG9uLnRpdGxlID0gb3B0aW9ucy50aXBMYWJlbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJykge1xuICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gb3B0aW9ucy5sYWJlbDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGJ1dHRvbi5hcHBlbmRDaGlsZChvcHRpb25zLmxhYmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNsaWNrQWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICQoYnV0dG9uKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlLm1lc3NhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcHRpb25zLmNsaWNrQWN0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgJChvcHRpb25zLnRhcmdldCkuYXBwZW5kKGJ1dHRvbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidXR0b247XG4gICAgfSwgLy8gZW5kIG9mIFwibWFrZUJ1dHRvblwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFthZGRTZWN0aW9uIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgb3B0X29wdGlvbnMgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhZGRTZWN0aW9uOiBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgICAgdmFyIG9wdGlvbnMsXG4gICAgICAgICAgc2VjdGlvbixcbiAgICAgICAgICBlbGVtZW50O1xuXG4gICAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgICB0eXBlOiAnZGl2JyxcbiAgICAgICAgY2xhc3NOYW1lOiAnJyxcbiAgICAgICAgdGFyZ2V0OiB1bmRlZmluZWRcbiAgICAgIH0sIG9wdF9vcHRpb25zKTtcblxuICAgICAgLy8gdHJ5IHRvIGNyZWF0ZSB0aGUgbmV3IHNlY3Rpb25cbiAgICAgIHRyeSB7XG4gICAgICAgIHNlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG9wdGlvbnMudHlwZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IGNyZWF0ZSBzZWN0aW9uLiBcIicgKyBvcHRpb25zLnR5cGUgKyAnIGlzIG5vdCBhIHZhbGlkIEhUTUwtbm9kZS4nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBzZWN0aW9uLmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lO1xuXG4gICAgICAvLyB0cnkgdG8gYXBwZW5kIHRoZSBzZWN0aW9uIHRvIHRoZSBnaXZlbiB0YXJnZXRcbiAgICAgIGlmIChvcHRpb25zLnRhcmdldCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG9wdGlvbnMudGFyZ2V0LmFwcGVuZENoaWxkKHNlY3Rpb24pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGUubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VjdGlvbi5nZXRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudCB8fCBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIHNlY3Rpb24uc2V0RWxlbWVudCA9IGZ1bmN0aW9uIChuZXdFbGVtZW50KSB7XG4gICAgICAgIGlmIChuZXdFbGVtZW50ICYmIHR5cGVvZiBuZXdFbGVtZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGlmICghKGVsZW1lbnQgJiYgZWxlbWVudCA9PT0gbmV3RWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKG5ld0VsZW1lbnQpO1xuICAgICAgICAgICAgZWxlbWVudCA9IG5ld0VsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG5cbiAgICAgIC8vIGFkZCB0byBzZWN0aW9ucy1hcnJheVxuICAgICAgdGhpcy5zZWN0aW9ucy5wdXNoKHNlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNlY3Rpb247XG4gICAgfSwgLy8gZW5kIG9mIFwiYWRkU2VjdGlvblwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFthZGRWaWV3IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgb3B0aW9ucyAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFkZFZpZXc6IGZ1bmN0aW9uIChvcHRpb25zLCBvcHRfdmlld1Njb3BlKSB7XG5cbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIHZpZXdTY29wZSxcbiAgICAgICAgICBhZGRpdGlvbmFsVHJpZ2dlckNsYXNzLFxuICAgICAgICAgIHRyaWdnZXIsXG4gICAgICAgICAgdmlldztcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB2aWV3U2NvcGUgPSBvcHRfdmlld1Njb3BlIHx8IHRoaXM7XG5cbiAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAgIC8vIG5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgdHJpZ2dlckNvbmZpZzogdW5kZWZpbmVkLCAvLyBAVE9ETyBkb2t1IGZvcm1hdDoge29wdF90YXJnZXQ6IFtzdHJpbmd8aHRtbE9iamVjdF0sIG9wdF9jbGFzc05hbWU6IFtzdHJpbmddLCBvcHRfdGlwTGFiZWw6IFtzdHJpbmddfVxuICAgICAgICBzZWN0aW9uRWxlbWVudHM6IFtdLCAvLyBAVE9ETyBkb2t1IGZvcm1hdDogW3tzZWN0aW9uOiBbc2VjdGlvbk9iamVjdF0sIGVsZW1lbnQ6IFtlbGVtZW50T2JqZWN0XX1dXG4gICAgICAgIGluaXRGdW5jdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBhY3RpdmF0ZUZ1bmN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGRlYWN0aXZhdGVGdW5jdGlvbjogdW5kZWZpbmVkXG4gICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IGFkZCBhIHZpZXcgd2l0aG91dCBhIG5hbWUgKG9mIHR5cGUgXCJzdHJpbmdcIikuJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmlldyA9IHt9O1xuXG4gICAgICB2aWV3LmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICB2aWV3LnBhdXNlZCA9IGZhbHNlO1xuXG4gICAgICB2aWV3LmFjdGl2YXRlID0gZnVuY3Rpb24gKG9wdF9vcGVuU2lkZWJvYXJkKSB7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnRyaWdnZXJDb25maWcud2l0aEhlYWRsaW5lKSB7XG4gICAgICAgICAgICBzZWxmLmNvbnRlbnRIZWFkbGluZS5pbm5lckhUTUwgPSBvcHRpb25zLnRyaWdnZXJDb25maWcudGlwTGFiZWw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvcGVuIFNpZGVib2FyZCBpZiBjbG9zZWRcbiAgICAgICAgaWYgKG9wdF9vcGVuU2lkZWJvYXJkICYmICFzZWxmLmlzT3BlbigpKSB7XG4gICAgICAgICAgc2VsZi5vcGVuKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWFjdGl2YXRlIGN1cnJlbnQgYWN0aXZlVmlldywgaWYgZXhpc3RlbnRcbiAgICAgICAgaWYgKHR5cGVvZiB2aWV3U2NvcGUuYWN0aXZlVmlldyA9PT0gJ29iamVjdCcgJiYgdmlld1Njb3BlLmFjdGl2ZVZpZXcgIT09IHZpZXcpIHtcbiAgICAgICAgICB2aWV3U2NvcGUuYWN0aXZlVmlldy5kZWFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmlld1Njb3BlLmFjdGl2ZVZpZXcgPSB2aWV3O1xuXG4gICAgICAgIC8vIEhhbmRsZSBzdWItdmlld3NcbiAgICAgICAgaWYgKHZpZXcuYWN0aXZlVmlldykge1xuICAgICAgICAgIHZpZXcuYWN0aXZlVmlldy5hY3RpdmF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FsbCBpbml0aWFsaXplLWZ1bmN0aW9ucywgaWYgZXhpc3RlbnRcbiAgICAgICAgaWYgKCF2aWV3LmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmluaXRGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmlldy5pbml0aWFsaXplZCA9IG9wdGlvbnMuaW5pdEZ1bmN0aW9uKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZpZXcuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc3BsYXkgZWxlbWVudHMgaW4gZ2l2ZW4gc2VjdGlvbnNcbiAgICAgICAgaWYgKG9wdGlvbnMuc2VjdGlvbkVsZW1lbnRzICYmIG9wdGlvbnMuc2VjdGlvbkVsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb3B0aW9ucy5zZWN0aW9uRWxlbWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2VjdGlvbkVsZW1lbnRzW2ldLnNlY3Rpb24uc2V0RWxlbWVudChvcHRpb25zLnNlY3Rpb25FbGVtZW50c1tpXS5lbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGFuZ2UgdHJpZ2dlci1zdGF0ZSwgaWYgZXhpc3RlbnRcbiAgICAgICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgICAgICAkKHRyaWdnZXIpLmFkZENsYXNzKCdjNGctYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxsIGFjdGl2YXRlIGZ1bmN0aW9uLCBpZiBleGlzdGVudFxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYWN0aXZhdGVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGlmICghb3B0aW9ucy5hY3RpdmF0ZUZ1bmN0aW9uKHZpZXcucGF1c2VkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZpZXcucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcblxuICAgICAgdmlldy5kZWFjdGl2YXRlID0gZnVuY3Rpb24gKG9wdF9wYXVzZSkge1xuXG4gICAgICAgIHZpZXcucGF1c2VkID0gb3B0X3BhdXNlIHx8IGZhbHNlO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygdmlld1Njb3BlLmFjdGl2ZVZpZXcgPT09ICdvYmplY3QnICYmIHZpZXdTY29wZS5hY3RpdmVWaWV3ID09PSB2aWV3KSB7XG4gICAgICAgICAgaWYgKHRyaWdnZXIgJiYgIXZpZXcucGF1c2VkKSB7XG4gICAgICAgICAgICAkKHRyaWdnZXIpLnJlbW92ZUNsYXNzKCdjNGctYWN0aXZlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSGFuZGxlIHN1Yi12aWV3c1xuICAgICAgICAgIGlmICh2aWV3LmFjdGl2ZVZpZXcpIHtcbiAgICAgICAgICAgIHZpZXcuYWN0aXZlVmlldy5kZWFjdGl2YXRlKHZpZXcucGF1c2VkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDYWxsIGRlYWN0aXZhdGUgZnVuY3Rpb24sIGlmIGV4aXN0ZW50XG4gICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlYWN0aXZhdGVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGVhY3RpdmF0ZUZ1bmN0aW9uKHZpZXcucGF1c2VkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG5cblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyaWdnZXJDb25maWcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG9wdGlvbnMudHJpZ2dlckNvbmZpZyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMudmlld1RyaWdnZXJCYXIsXG4gICAgICAgICAgdGlwTGFiZWw6IG9wdGlvbnMubmFtZSxcbiAgICAgICAgfSwgb3B0aW9ucy50cmlnZ2VyQ29uZmlnKTtcblxuICAgICAgICBvcHRpb25zLnRyaWdnZXJDb25maWcuY2xpY2tBY3Rpb24gPSB2aWV3LmFjdGl2YXRlO1xuICAgICAgICBpZiAob3B0aW9ucy50cmlnZ2VyQ29uZmlnLmNsYXNzTmFtZSkge1xuICAgICAgICAgIGFkZGl0aW9uYWxUcmlnZ2VyQ2xhc3MgPSAnICcgKyBvcHRpb25zLnRyaWdnZXJDb25maWcuY2xhc3NOYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZGl0aW9uYWxUcmlnZ2VyQ2xhc3MgPSAnJztcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnRyaWdnZXJDb25maWcuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyBhZGRpdGlvbmFsVHJpZ2dlckNsYXNzO1xuICAgICAgICAvLyBAVE9ETyBjaGVjazogdHJpZ2dlciA9IHRoaXMubWFrZUJ1dHRvbihvcHRpb25zLnRyaWdnZXJDb25maWcpO1xuICAgICAgICB0cmlnZ2VyID0gdGhpcy5tYWtlQnV0dG9uKG9wdGlvbnMudHJpZ2dlckNvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudmlld3MucHVzaCh2aWV3KTtcbiAgICAgIHJldHVybiB2aWV3O1xuICAgIH0gLy8gZW5kIG9mIFwiYWRkVmlld1wiXG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCJcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgU2lkZWJvYXJkID0gdGhpcy5jNGcubWFwcy5jb250cm9sLlNpZGVib2FyZDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtc2lkZWJvYXJkLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG52YXIgYzRnID0gdGhpcy5jNGc7XG5cbmltcG9ydCB7U2lkZWJvYXJkfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXNpZGVib2FyZFwiO1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcbmltcG9ydCB7QmFzZWxheWVyc3dpdGNoZXJ9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWJhc2VsYXllcnN3aXRjaGVyXCI7XG5pbXBvcnQge0xheWVyc3dpdGNoZXJ9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWxheWVyc3dpdGNoZXJcIjtcbmltcG9ydCB7Q3VzdG9tdGFifSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXN0YXJib2FyZHBsdWdpbi1jdXN0b210YWJcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAZXh0ZW5kcyB7YzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmR9XG4gICAqIEBwYXJhbSAgIHtvYmplY3R9ICAgICAgICAgICAgICBvcHRfb3B0aW9ucyAgKm9wdGlvbmFsKiBtaXNjIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5TdGFyYm9hcmQgPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIGV4dERpdjogZmFsc2UsXG4gICAgICBkZWZhdWx0T3BlbjogZmFsc2UsXG4gICAgICBtYXBDb250cm9sbGVyOiB1bmRlZmluZWQsXG4gICAgICBuYW1lOiAnc3RhcmJvYXJkJyxcbiAgICAgIGRpcmVjdGlvbjogJ3JpZ2h0JyxcbiAgICAgIGZpbHRlcjogZmFsc2VcbiAgICB9LCBvcHRfb3B0aW9ucyk7XG5cbiAgICAvL3dpbmRvdy5jNGdNYXBzSG9va3Muc3RhcmJvYXJkX2xvYWRQbHVnaW5zID0gW107XG5cbiAgICAvL3NldCBoZWFkbGluZSwgc2luY2UgdGhlIGRlZmluaXRpb24gYWJvdmUgZG9lcyBub3Qgd29yayBmb3IgaGVhZGxpbmVcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5oZWFkbGluZSB8fCB0aGlzLm9wdGlvbnMuaGVhZGxpbmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAvL3RoaXMub3B0aW9ucy5oZWFkbGluZSA9IGM0Zy5tYXBzLmNvbnN0YW50LmkxOG4uU1RBUkJPQVJEO1xuICAgIH1cblxuICAgIHRoaXMuaG9va19sYXllcnN3aXRjaGVyX2xvYWRlZCA9IHRoaXMuaG9va19sYXllcnN3aXRjaGVyX2xvYWRlZCB8fCBbXTtcblxuICAgIC8vY2FsbCBTaWRlYm9hcmQgKHBhcmVudCkgY29uc3RydWN0b3JcbiAgICBTaWRlYm9hcmQuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMpO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLlN0YXJib2FyZCwgU2lkZWJvYXJkKTtcblxuICAvLyBBZGQgbWV0aG9kc1xuICBjNGcubWFwcy5jb250cm9sLlN0YXJib2FyZC5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLlN0YXJib2FyZC5wcm90b3R5cGUsIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIGJhc2ljIGh0bWwtZWxlbWVudHMgZm9yIHRoZSBzdGFyYm9hcmRcbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgJ3RydWUnIG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHZhciBwbHVnaW4sXG4gICAgICAgICAgcmVuZGVyTGF5ZXJ0cmVlLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBsYXllcixcbiAgICAgICAgICBzZWxmLFxuICAgICAgICAgIGZuUmVuZGVyLFxuICAgICAgICAgIGRpc3BsYXlMYXllcnN3aXRjaGVyID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgLy8gTG9hZCBTdGFyYm9hcmQgcGx1Z2luc1xuICAgICAgdGhpcy5wbHVnaW5zID0ge307XG5cbiAgICAgIC8vIGNyZWF0ZXMgYW5kIHJlbmRlcnMgdGhlIHN0YXJib2FyZCBwbHVnaW5zXG4gICAgICBmblJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBsb29wIHRocm91Z2ggbGF5ZXJzIGFuZCBjaGVjayBpZiB0aGVyZSBpcyBhbnkgbm9ybWFsIGxheWVydHJlZSB0byByZW5kZXJcbiAgICAgICAgZm9yIChrZXkgaW4gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVycykge1xuICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGxheWVyID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1trZXldO1xuICAgICAgICAgICAgaWYgKCFsYXllci5yZW5kZXJTcGVjaWFsKSB7XG4gICAgICAgICAgICAgIHJlbmRlckxheWVydHJlZSA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJMYXllcnRyZWUpIHtcbiAgICAgICAgICAvLyBkbyBub3QgZGlzcGxheSBsYXllcnN3aXRjaGVyIGlmIHRoZXJlIGlzIG5vdGhpbmcgdG8gc3dpdGNoXG4gICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnMpIHtcbiAgICAgICAgICAgIGZvcihsZXQgaWQgaW4gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVycykge1xuICAgICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1tpZF0uZGlzcGxheSkge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlMYXllcnN3aXRjaGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC0gbG9hZCBcIkxheWVyc3dpdGNoZXJcIlxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmxheWVyU3dpdGNoZXJDcmVhdGUgJiYgcmVuZGVyTGF5ZXJ0cmVlICYmIGRpc3BsYXlMYXllcnN3aXRjaGVyKSB7XG4gICAgICAgICAgc2VsZi5wbHVnaW5zLmxheWVyc3dpdGNoZXIgPSBuZXcgTGF5ZXJzd2l0Y2hlcihzZWxmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbGwgaG9vayB0byBsb2FkIGFkZGl0aW9uYWwgc3RhcmJvYXJkIHRhYnMgKGxheWVycylcbiAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoc2VsZi5ob29rX2xheWVyc3dpdGNoZXJfbG9hZGVkKTtcblxuXG4gICAgICAgIC8vIC0gY2hlY2sgJiBsb2FkIG90aGVyIFN0YXJib2FyZC1wbHVnaW5zICh2aWEgaG9vaylcbiAgICAgICAgLy8gY2FsbGVkIGZ1bmN0aW9ucyBoYXZlIHRvIGFkZCB0aGVtc2VsdmVzIHRvIHRoaXMucGx1Z2luc1xuICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLnN0YXJib2FyZF9sb2FkUGx1Z2lucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLnN0YXJib2FyZF9sb2FkUGx1Z2lucywgc2VsZik7XG4gICAgICAgICAgLy8gLSBhY3RpdmF0ZSBuZXcgcGx1Z2lucyBpZiB0aGV5IGFyZSBub3QgYWN0aXZhdGVkIGFscmVhZHlcbiAgICAgICAgICBmb3IgKHBsdWdpbiBpbiBzZWxmLnBsdWdpbnMpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHBsdWdpbiBpcyBhIHJlYWwgcGx1Z2luIGFuZCBub3QgYSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0IHByb3RvdHlwZVxuICAgICAgICAgICAgaWYgKHNlbGYucGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW4pKSB7XG4gICAgICAgICAgICAgIHNlbGYucGx1Z2luc1twbHVnaW5dLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gLSBsb2FkIFwiQmFzZWxheWVyc3dpdGNoZXJcIlxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmJhc2VsYXllclN3aXRjaGVyQ3JlYXRlKSB7XG4gICAgICAgICAgc2VsZi5wbHVnaW5zLmJhc2VsYXllcnN3aXRjaGVyID0gbmV3IEJhc2VsYXllcnN3aXRjaGVyKHNlbGYpO1xuICAgICAgICAgIHNlbGYucGx1Z2lucy5iYXNlbGF5ZXJzd2l0Y2hlci5hY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLnBsdWdpbnMubGF5ZXJzd2l0Y2hlcikge1xuICAgICAgICAgIHNlbGYucGx1Z2lucy5sYXllcnN3aXRjaGVyLmFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIGVuZCBvZiBcImZuUmVuZGVyKClcIlxuXG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubGF5ZXJzX2xvYWRlZCkge1xuICAgICAgICB0aGlzLnNwaW5uZXIuc2hvdygpO1xuICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5ob29rX2xheWVyX2xvYWRlZC5wdXNoKGZ1bmN0aW9uKGxheWVySWRzKSB7XG4gICAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICBmblJlbmRlcigpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGxheWVycyBhcmUgYWxyZWFkeSBsb2FkZWRcbiAgICAgICAgZm5SZW5kZXIoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cblxuXG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gZW5kIG9mIFwiaW5pdFwiXG5cbiAgfSk7IC8vIEVuZCBvZiBhZGQgbWV0aG9kc1xufShqUXVlcnksIGM0ZykpO1xuXG5leHBvcnQgdmFyIFN0YXJib2FyZCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5TdGFyYm9hcmQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXN0YXJib2FyZC5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0dlcm1hbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luID0gdGhpcy5jNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbiB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBleHRlbmRzIHtvbC5jb250cm9sLkNvbnRyb2x9XG4gICAqIEBwYXJhbSAgIHtvYmplY3R9ICAgICAgICAgICAgICBzdGFyYm9hcmRcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luLkJhc2VsYXllcnN3aXRjaGVyID0gZnVuY3Rpb24gKHN0YXJib2FyZCkge1xuICAgIGlmICghc3RhcmJvYXJkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCBpbml0aWFsaXplIEJhc2VsYXllcnN3aXRjaGVyIHdpdGhvdXQgYSBzdGFyYm9hcmQuJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMuYmFzZWxheWVycyA9IHt9O1xuXG4gICAgdGhpcy5zdGFyYm9hcmQgPSBzdGFyYm9hcmQ7XG4gICAgdGhpcy5wcm94eSA9IHN0YXJib2FyZC5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHk7XG5cbiAgICB0aGlzLmNyZWF0ZSgpO1xuICAgIHRoaXMubG9hZENvbnRlbnQoKTtcbiAgfTtcblxuICAvLyBBZGQgbWV0aG9kc1xuICBjNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5CYXNlbGF5ZXJzd2l0Y2hlci5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5CYXNlbGF5ZXJzd2l0Y2hlci5wcm90b3R5cGUsIHtcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbY3JlYXRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIGNvbnRlbnRXcmFwcGVyLFxuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZSxcbiAgICAgICAgICBjb250ZW50SW5mbztcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGNvbnRlbnRXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgIGNvbnRlbnRIZWFkbGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udGVudEhlYWRsaW5lLmlubmVySFRNTCA9ICh0aGlzLnN0YXJib2FyZC5vcHRpb25zLmJhc2VsYXllclN3aXRjaGVyVGl0bGUgfHwgbGFuZ0NvbnN0YW50cy5TVEFSQk9BUkRfVklFV19UUklHR0VSX0JBU0VMQVlFUlNXSVRDSEVSKTtcbiAgICAgIGNvbnRlbnRIZWFkbGluZS5jbGFzc05hbWUgPSAnY29udGVudEhlYWRsaW5lJztcbiAgICAgIGNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKGNvbnRlbnRIZWFkbGluZSk7XG5cbiAgICAgIHRoaXMuY29udGVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy5jb250ZW50RGl2LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5TVEFSQk9BUkRfQ09OVEVOVF9CQVNFTEFZRVJTV0lUQ0hFUjtcbiAgICAgIGNvbnRlbnRJbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgdGhpcy5jb250ZW50RGl2LmFwcGVuZENoaWxkKGNvbnRlbnRJbmZvKTtcbiAgICAgIGNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuY29udGVudERpdik7XG5cbiAgICAgIHNlbGYudmlldyA9IHNlbGYuc3RhcmJvYXJkLmFkZFZpZXcoe1xuICAgICAgICBuYW1lOiAnbGF5ZXJzd2l0Y2hlcicsXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogKHRoaXMuc3RhcmJvYXJkLm9wdGlvbnMuYmFzZWxheWVyU3dpdGNoZXJUaXRsZSB8fCBsYW5nQ29uc3RhbnRzLlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfQkFTRUxBWUVSU1dJVENIRVIpLFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfQkFTRUxBWUVSU1dJVENIRVIsXG4gICAgICAgICAgd2l0aEhlYWRsaW5lOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBzZWN0aW9uRWxlbWVudHM6IFtcbiAgICAgICAgICB7c2VjdGlvbjogc2VsZi5zdGFyYm9hcmQuY29udGVudENvbnRhaW5lciwgZWxlbWVudDogY29udGVudFdyYXBwZXJ9LFxuICAgICAgICAgIHtzZWN0aW9uOiBzZWxmLnN0YXJib2FyZC50b3BUb29sYmFyLCBlbGVtZW50OiBzZWxmLnN0YXJib2FyZC52aWV3VHJpZ2dlckJhcn1cbiAgICAgICAgXVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbYWN0aXZhdGUgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFjdGl2YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnZpZXcuYWN0aXZhdGUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtzZXRDb250ZW50IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgbmV3Q29udGVudCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uIChuZXdDb250ZW50KSB7XG4gICAgICBpZiAobmV3Q29udGVudCkge1xuICAgICAgICBpZiAodHlwZW9mIG5ld0NvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MID0gbmV3Q29udGVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgIHRoaXMuY29udGVudERpdi5yZXBsYWNlQ2hpbGQobmV3Q29udGVudCwgdGhpcy5jb250ZW50RGl2LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5jb250ZW50RGl2LmFwcGVuZENoaWxkKG5ld0NvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIEBUT0RPXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZS5tZXNzYWdlKTtcbiAgICAgICAgICAgIC8vIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MO1xuICAgIH0sXG5cbiAgICBsb2FkQ29udGVudDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgZm5EcmF3Q29udGVudDtcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLnN0YXJib2FyZC5zcGlubmVyLnNob3coKTtcblxuICAgICAgZm5EcmF3Q29udGVudCA9IGZ1bmN0aW9uIChiYXNlbGF5ZXJJZHMpIHtcbiAgICAgICAgc2VsZi5iYXNlTGF5ZXJDb250cm9sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICQoc2VsZi5iYXNlTGF5ZXJDb250cm9sKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuU1RBUkJPQVJEX0JBU0VMQVlFUlRSRUUpO1xuICAgICAgICBzZWxmLnNldENvbnRlbnQoc2VsZi5iYXNlTGF5ZXJDb250cm9sKTtcblxuICAgICAgICBzZWxmLmFkZEl0ZW1zKGJhc2VsYXllcklkcywgc2VsZi5iYXNlTGF5ZXJDb250cm9sKTtcblxuICAgICAgICBzZWxmLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5zdGFyYm9hcmQuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgIHNlbGYuc3RhcmJvYXJkLnVwZGF0ZSgpO1xuICAgICAgfSAvLyBlbmQgb2YgXCJmbkRyYXdDb250ZW50KClcIlxuXG4gICAgICBpZiAodGhpcy5wcm94eS5iYXNlbGF5ZXJzX2xvYWRlZCkge1xuICAgICAgICBmbkRyYXdDb250ZW50KHRoaXMucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5iYXNlbGF5ZXJJZHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm94eS5ob29rX2Jhc2VsYXllcl9sb2FkZWQucHVzaChmbkRyYXdDb250ZW50KTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJsb2FkQ29udGVudCgpXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbZHJhd0NvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7W3R5cGVdfSAgY29udGVudERhdGEgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBkcmF3Q29udGVudDogZnVuY3Rpb24gKGNvbnRlbnREYXRhKSB7XG4gICAgICAvLyBQQVNTXG4gICAgfSwgLy8gZW5kIG9mIFwiZHJhd0NvbnRlbnQoKVwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2FkZEl0ZW1zIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgaXRlbURhdGEgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICB3cmFwcGVyRWxlbWVudCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIG9wdGlvbnMgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgYWRkSXRlbXM6IGZ1bmN0aW9uIChpdGVtRGF0YSwgd3JhcHBlckVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIGosXG4gICAgICAgICAgc2VsZixcbiAgICAgICAgICB3cmFwcGVyLFxuICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgdWlkLFxuICAgICAgICAgIGxpc3RJdGVtLFxuICAgICAgICAgIGNoaWxkTGlzdCxcbiAgICAgICAgICBjaGlsZEl0ZW0sXG4gICAgICAgICAgY2hpbGRFbnRyeSxcbiAgICAgICAgICB0b2dnbGUsXG4gICAgICAgICAgZW50cnksXG4gICAgICAgICAgJGVudHJ5LFxuICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICBoYW5kbGVFbnRyeUNsaWNrLFxuICAgICAgICAgIGhhbmRsZUNoYW5nZUJhc2VsYXllclZpc2liaWxpdHk7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICBwYXJzZUFzTGlzdDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVFbnRyeUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIHZhciBpdGVtVWlkLFxuICAgICAgICAgICAgc2libGluZ3MsXG4gICAgICAgICAgICBiYXNlbGF5ZXJJdGVtO1xuICAgICAgICAgIHNpYmxpbmdzID0gJCh0aGlzKS5wYXJlbnQoKS5zaWJsaW5ncygpO1xuICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGk8IHNpYmxpbmdzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgaWYgKHNpYmxpbmdzW2ldICYmICQoc2libGluZ3NbaV0pLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5PUEVOKSkge1xuICAgICAgICAgICAgICAgICAgaWYoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbc2VsZi5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZF0gJiYgc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbc2VsZi5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZF0uaGFzT3ZlcmxheXMpe1xuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGogaW4gc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbc2VsZi5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXMpe1xuICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3NlbGYucHJveHkuYWN0aXZlQmFzZWxheWVySWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzLmhhc093blByb3BlcnR5KGopKVxuICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVMYXllcihzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1tzZWxmLnByb3h5LmFjdGl2ZUJhc2VsYXllcklkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5c1tqXS5sYXllcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICQoc2libGluZ3NbaV0pLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PUEVOKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGl0ZW1VaWQgPSAkKHRoaXMpLmRhdGEoJ3VpZCcpO1xuXG4gICAgICAgICAgaWYgKHNlbGYuc3RhcmJvYXJkLm9wdGlvbnMuY2FjaGluZykge1xuICAgICAgICAgICAgICB1dGlscy5zdG9yZVZhbHVlKCdiYXNlbGF5ZXInLCBpdGVtVWlkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkKHRoaXMpLnBhcmVudCgpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PUEVOKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIucmlnaHRTbGlkZUVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIucmlnaHRTbGlkZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3MoJ3JpZ2h0Jywgc2VsZi5zdGFyYm9hcmQuY29udGFpbmVyLm9mZnNldFdpZHRoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQoc2VsZi5zdGFyYm9hcmQuZWxlbWVudCkuY3NzKCdyaWdodCcsIHNlbGYuc3RhcmJvYXJkLmNvbnRhaW5lci5vZmZzZXRXaWR0aCk7XG5cbiAgICAgICAgICBpZiAoc2VsZi5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZCAhPT0gaXRlbVVpZCkge1xuICAgICAgICAgICAgc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLnNob3dCYXNlTGF5ZXIoaXRlbVVpZCk7XG4gICAgICAgICAgICBpZihzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1tpdGVtVWlkXS5oYXNPdmVybGF5cyl7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBqIGluIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW2l0ZW1VaWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzKXtcbiAgICAgICAgICAgICAgICAgIGlmKHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW2l0ZW1VaWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzLmhhc093blByb3BlcnR5KGopKXtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbaXRlbVVpZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbal0ubGF5ZXIpOyAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG5cbiAgICAgICAgICAgIC8vIGlmKHRoaXMubmV4dFNpYmxpbmcpe1xuICAgICAgICAgICAgLy8gICAgIHZhciBjaGlsZHJlbiA9IHRoaXMubmV4dFNpYmxpbmcuY2hpbGROb2RlcztcbiAgICAgICAgICAgIC8vICAgICBmb3IoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAvLyAgICAgICAgICQoY2hpbGRyZW5baV0uZmlyc3RDaGlsZCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB3aW5kb3cuYzRnTWFwc0hvb2tzLmJhc2VsYXllcl9jaGFuZ2VkID0gd2luZG93LmM0Z01hcHNIb29rcy5iYXNlbGF5ZXJfY2hhbmdlZCB8fCBbXTtcbiAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MuYmFzZWxheWVyX2NoYW5nZWQsIGl0ZW1VaWQpO1xuICAgICAgICAgIH1cbiAgICAgIH07IC8vIGVuZCBvZiBcImhhbmRsZUVudHJ5Q2xpY2soKVwiXG5cbiAgICAgIGhhbmRsZUNoYW5nZUJhc2VsYXllclZpc2liaWxpdHkgPSBmdW5jdGlvbiAoYmFzZWxheWVyQ29uZmlnKSB7XG4gICAgICAgIHZhciBpZDtcblxuICAgICAgICBmb3IgKGlkIGluIHNlbGYuYmFzZWxheWVycykge1xuICAgICAgICAgIGlmIChzZWxmLmJhc2VsYXllcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICBpZiAoaWQgPT09IGJhc2VsYXllckNvbmZpZy5pZCkge1xuICAgICAgICAgICAgICBzZWxmLmJhc2VsYXllcnNbaWRdLiRlbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VsZi5iYXNlbGF5ZXJzW2lkXS4kZW50cnkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cblxuICAgICAgd3JhcHBlciA9IG9wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgIGlmIChpdGVtRGF0YS5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW1EYXRhLmxlbmd0aDsgaSArPSAxKSB7XG5cbiAgICAgICAgICB1aWQgPSBpdGVtRGF0YVtpXTtcbiAgICAgICAgICB0aGlzLmJhc2VsYXllcnNbdWlkXSA9IHt9O1xuXG4gICAgICAgICAgbGlzdEl0ZW0gPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIHRoaXMuYmFzZWxheWVyc1t1aWRdLmVudHJ5V3JhcHBlciA9IGxpc3RJdGVtO1xuICAgICAgICAgIGVudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgIGVudHJ5LnNldEF0dHJpYnV0ZSgnaHJlZicsICcjJyk7XG4gICAgICAgICAgZW50cnkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5uYW1lKSk7XG4gICAgICAgICAgJChlbnRyeSkuZGF0YSgnaWQnLCB1aWQpO1xuICAgICAgICAgIGlmKHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0uaGFzT3ZlcmxheXMpe1xuXG5cbiAgICAgICAgICAgIGNoaWxkTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7b3B0aW9ucy5wYXJzZUFzTGlzdCA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJykgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGZvcihqID0gMDsgaiA8IHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXMubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICBjaGlsZEl0ZW0gPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICBjaGlsZEVudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICBpZihzZWxmLnByb3h5LmFjdGl2ZUJhc2VsYXllcklkID09IHVpZCl7XG4gICAgICAgICAgICAgICAgICAkKGNoaWxkRW50cnkpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgICAgICAgICAgbGV0IG92ZXJsYXlJZCA9IHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXNbal0uaWQ7XG4gICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW292ZXJsYXlJZF0uY2hhbmdlT3BhY2l0eShzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLm9wYWNpdHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAkKGNoaWxkRW50cnkpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjaGlsZEVudHJ5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXNbal0ubmFtZSkpO1xuICAgICAgICAgICAgICAkKGNoaWxkRW50cnkpLmRhdGEoJ2lkJyxzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLmlkKTtcbiAgICAgICAgICAgICAgJChjaGlsZEVudHJ5KS5kYXRhKCdwaWQnLHVpZCk7XG4gICAgICAgICAgICAgIHRvZ2dsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICAgIHRvZ2dsZS5jbGFzc05hbWUgPSAnYzRnLW92ZXJsYXktdG9nZ2xlJztcbiAgICAgICAgICAgICAgdG9nZ2xlLnNldEF0dHJpYnV0ZSgndHlwZScsJ3JhbmdlJyk7XG4gICAgICAgICAgICAgIHRvZ2dsZS5zZXRBdHRyaWJ1dGUoJ21pbicsMCk7XG4gICAgICAgICAgICAgIHRvZ2dsZS5zZXRBdHRyaWJ1dGUoJ21heCcsMTAwKTtcbiAgICAgICAgICAgICAgdG9nZ2xlLnNldEF0dHJpYnV0ZSgndmFsdWUnLHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXNbal0ub3BhY2l0eSk7XG4gICAgICAgICAgICAgIHRvZ2dsZS5zZXRBdHRyaWJ1dGUoJ3N0ZXBzJywxMCk7XG4gICAgICAgICAgICAgICQodG9nZ2xlKS5vbignaW5wdXQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzWyQodGhpcykucGFyZW50KCkuZGF0YSgncGlkJyldLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzWyQodGhpcykucGFyZW50KCkuZGF0YSgnaWQnKV0uY2hhbmdlT3BhY2l0eSh0aGlzLnZhbHVlKVxuICAgICAgICAgICAgICB9KTtcblxuXG5cbiAgICAgICAgICAgICAgY2hpbGRFbnRyeS5hcHBlbmRDaGlsZCh0b2dnbGUpO1xuICAgICAgICAgICAgICBjaGlsZEl0ZW0uYXBwZW5kQ2hpbGQoY2hpbGRFbnRyeSk7XG4gICAgICAgICAgICAgIGNoaWxkTGlzdC5hcHBlbmRDaGlsZChjaGlsZEl0ZW0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuICAgICAgICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGVudHJ5KTtcbiAgICAgICAgICBpZihjaGlsZExpc3Qpe1xuICAgICAgICAgICAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChjaGlsZExpc3QpO1xuICAgICAgICAgICAgICBjaGlsZExpc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJGVudHJ5ID0gJChlbnRyeSk7XG4gICAgICAgICAgdGhpcy5iYXNlbGF5ZXJzW3VpZF0uJGVudHJ5ID0gJGVudHJ5O1xuXG4gICAgICAgICAgaWYgKHRoaXMuc3RhcmJvYXJkLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmRlZmF1bHRfYmFzZWxheWVyICYmIHBhcnNlSW50KHVpZCwgMTApID09PSBwYXJzZUludChzZWxmLnN0YXJib2FyZC5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5kZWZhdWx0X2Jhc2VsYXllciwgMTApKSB7XG4gICAgICAgICAgICAkZW50cnkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgICAkKGxpc3RJdGVtKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICAgICAgICAgIGlmKHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0uaGFzT3ZlcmxheXMpe1xuICAgICAgICAgICAgICAgICAgZm9yKGxldCBqIGluIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5cy5oYXNPd25Qcm9wZXJ0eShqKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5c1tqXS5jaGFuZ2VPcGFjaXR5KHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbal0ub3BhY2l0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkZW50cnkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcbiAgICAgICAgICAgICQobGlzdEl0ZW0pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJGVudHJ5LmRhdGEoJ3VpZCcsIHVpZCk7XG4gICAgICAgICAgJGVudHJ5LmNsaWNrKGhhbmRsZUVudHJ5Q2xpY2spO1xuXG4gICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcbiAgICAgICAgfVxuICAgICAgICAgIC8vIFN0YXJib2FyZCBGaWx0ZXJcbiAgICAgICAgICBpZiAodGhpcy5zdGFyYm9hcmQub3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgICAgICAgICAgdmFyIGR2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgIGR2LmNsYXNzTmFtZSA9IFwiYzRnLXN0YXJib2FyZC1maWx0ZXIgYzRnLWNvbnRlbnQtc2VsZWN0XCI7XG4gICAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgICBmaWx0ZXIudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgICAgICAgZmlsdGVyLnBsYWNlaG9sZGVyID0gXCJcIjsgLy9Gb250IEF3ZXNvbWVcbiAgICAgICAgICAgICAgdmFyIGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gICAgICAgICAgICAgIGkuY2xhc3NOYW1lID0gJ2ZhcyBmYS1maWx0ZXInO1xuICAgICAgICAgICAgICBpLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICAgICAgZHYuYXBwZW5kQ2hpbGQoZmlsdGVyKTtcbiAgICAgICAgICAgICAgZHYuYXBwZW5kQ2hpbGQoaSk7XG4gICAgICAgICAgICAgIGZpbHRlci5vbmtleXVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZmlsdGVyX3VsbGkoZWxlbWVudCwgc2hvd1N1YnRyZWUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgIC8vIGRvIG5vdCBhcHBseSBmaWx0ZXIgZm9yIHNob3J0IHNlYXJjaCB0ZXJtc1xuXG4gICAgICAgICAgICAgICAgICAgICAgc2hvd1N1YnRyZWUgPSBzaG93U3VidHJlZSB8fCBmYWxzZTsgIC8vIHVzZWQgd2hpbGUgdHJhdmVyc2luZyBkb3duIHRoZSB0cmVlXG5cbiAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIGFuIGFycmF5IChtb2RpZmllZDogZmlyc3QgZWxlbWVudCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRzLiBPbmx5IGZpbmRzIGNoaWxkcmVuIG9mIHRoZSBnaXZlbiBwYXJlbnQgZWxlbWVudCwgYnV0XG4gICAgICAgICAgICAgICAgICAgICAgICogbm8gZnVydGhlciBkZXNjZW5kYW50cyBsaWtlIGdldEVsZW1lbnRzQnlUYWdOYW1lIGRvZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q2hpbGRyZW5CeVRhZ05hbWUoZWxlbWVudCwgdGFnTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jaGlsZHJlbltpXS50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQucHVzaChlbGVtZW50LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kWzBdOyAvLyAhISFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaEZsYWdVbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJ0cmVlTWF0Y2hlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBlYWNoIExJIGRvXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc01hdGNoID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBjdXJyZW50IExJIGZvciBmaWx0ZXIgdGVybVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGRyZW5baV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXS5pbm5lckhUTUwudG9VcHBlckNhc2UoKS5pbmRleE9mKGZpbHRlci52YWx1ZS50b1VwcGVyQ2FzZSgpKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQncyBhIG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2UgaWYgYSBzdWJ0cmVlIChVTCkgZXhpc3RzIGluIGN1cnJlbnQgTEkgKG1heCAxIGV4cGVjdGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVsID0gZ2V0Q2hpbGRyZW5CeVRhZ05hbWUoZWxlbWVudC5jaGlsZHJlbltpXSwgXCJ1bFwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVjdXJzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc1N1YnRyZWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRyZWVNYXRjaGVzID0gZmlsdGVyX3VsbGkodWwsIHNob3dTdWJ0cmVlIHx8IGlzTWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzU3VidHJlZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXRjaCB8fCBzdWJ0cmVlTWF0Y2hlcyB8fCBzaG93U3VidHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoRmxhZ1VsID0gdHJ1ZTsgLy8gdXNlZCB3aGlsZSB0cmF2ZXJzaW5nIHVwIHRoZSB0cmVlIGFnYWluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgTEkgdmlzaWJsZSBhbmQgb3BlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyLnZhbHVlLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYzRnLWNsb3NlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoXCJjNGctb3BlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKTsgLy8gYWx3YXlzIHJlbW92ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc01hdGNoICYmIGZpbHRlci52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZChcImM0Zy1zdGFyYm9hcmQtZmlsdGVyLW1hdGNoXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgTEkgaW52aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYzRnLW9wZW5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QuYWRkKFwiYzRnLWNsb3NlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1zdGFyYm9hcmQtZmlsdGVyLW1hdGNoXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hGbGFnVWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgIC8vIGRvIG5vdCByZWFjdCBpbW1lZGlhdGVseSBidXQgYWxsb3cgZm9yIHNvbWUga2V5c3Ryb2tlc1xuICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gdHdvIG9yIHplcm8gbGV0dGVycyBhcmUgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyLnZhbHVlLmxlbmd0aCAhPSAxKSBmaWx0ZXJfdWxsaShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYzRnLWJhc2VsYXllcnRyZWUgPiB1bDpudGgtY2hpbGQoMiknKSlcbiAgICAgICAgICAgICAgICAgIH0sIDM1MCk7XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3cmFwcGVyRWxlbWVudC5hcHBlbmRDaGlsZChkdik7XG4gICAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfdmlzaWJpbGl0eS5wdXNoKGhhbmRsZUNoYW5nZUJhc2VsYXllclZpc2liaWxpdHkpO1xuICAgICAgfVxuICAgICAgd3JhcHBlckVsZW1lbnQuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG4gICAgfSAvLyBlbmQgb2YgXCJhZGRJdGVtcygpXCJcblxuICB9KTsgLy8gZW5kIG9mIFwiYWRkIG1ldGhvZHNcIlxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBCYXNlbGF5ZXJzd2l0Y2hlciA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uQmFzZWxheWVyc3dpdGNoZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXN0YXJib2FyZHBsdWdpbi1iYXNlbGF5ZXJzd2l0Y2hlci5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcblxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbiA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4gfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzR2VybWFufSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5cbmxldCBsYW5nQ29uc3RhbnRzID0ge307XG5cbmlmICh0eXBlb2YgbWFwRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBpZiAobWFwRGF0YS5sYW5nID09PSBcImRlXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfSBlbHNlIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzRW5nbGlzaDtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9XG59XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHN0YXJib2FyZFxuICAgKiBAcGFyYW0gcGx1Z2luXG4gICAqIEBwYXJhbSBwcm9qZWN0Q29uZlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5DdXN0b210YWIgPSBmdW5jdGlvbiAoc3RhcmJvYXJkLCBwcm9qZWN0Q29uZikge1xuICAgIGlmICghc3RhcmJvYXJkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCBpbml0aWFsaXplIFByb2plY3QtdGFiIHdpdGhvdXQgYSBzdGFyYm9hcmQuJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHByb2plY3RDb25mID0gJC5leHRlbmQoe1xuICAgICAgdGFiSWQ6IG51bGwsXG4gICAgICBuYW1lOiBcIkN1c3RvbXRhYlwiLFxuICAgICAgYXdlc29tZWljb246ICcnXG4gICAgfSwgcHJvamVjdENvbmYpO1xuXG4gICAgaWYgKCFwcm9qZWN0Q29uZi50YWJJZCkge1xuICAgICAgY29uc29sZS53YXJuKCdDYW5ub3QgaW5pdGlhbGl6ZSBQcm9qZWN0LXRhYiB3aXRob3V0IGFuIGlkLicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuXG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIC8vdGhpcy5wbHVnaW4gPSBwbHVnaW4gfHwgZmFsc2U7XG4gICAgdGhpcy5jb250ZW50TG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy5zdGFyYm9hcmQgPSBzdGFyYm9hcmQ7XG4gICAgdGhpcy5wcm94eSA9IHN0YXJib2FyZC5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHk7XG4gICAgdGhpcy5tYXAgPSB0aGlzLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXA7XG4gICAgdGhpcy5sYXllcnMgPSB7fTtcbiAgICB0aGlzLnRhYklkID0gcHJvamVjdENvbmYudGFiSWQ7XG4gICAgdGhpcy5uYW1lID0gcHJvamVjdENvbmYubmFtZTtcbiAgICB0aGlzLmF3ZXNvbWVpY29uID0gcHJvamVjdENvbmYuYXdlc29tZWljb24ucmVwbGFjZSgnJiM5MjsnLCBcIlxcXFxcIik7XG4gICAgc3RhcmJvYXJkLnBsdWdpbnNbXCJjdXN0b21UYWJcIisgdGhpcy50YWJJZF0gPSB0aGlzO1xuICAgIHRoaXMuY3JlYXRlKCk7XG4gIH07XG5cbiAgLy8gQWRkIG1ldGhvZHNcbiAgYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uQ3VzdG9tdGFiLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luLkN1c3RvbXRhYi5wcm90b3R5cGUsIHtcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbY3JlYXRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxmLFxuICAgICAgICBjb250ZW50V3JhcHBlcixcbiAgICAgICAgY29udGVudEhlYWRsaW5lLFxuICAgICAgICBjb250ZW50SGVhZGxpbmVMaW5rLFxuICAgICAgICBzZWxlY3RvcixcbiAgICAgICAgbGF5ZXJTd2l0Y2hlclRpdGxlO1xuXG4gICAgICBzZWxmID0gdGhpcztcbiAgICAgIGNvbnRlbnRXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250ZW50SGVhZGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRlbnRIZWFkbGluZS5jbGFzc05hbWUgPSAnY29udGVudEhlYWRsaW5lJztcblxuICAgICAgbGF5ZXJTd2l0Y2hlclRpdGxlID0gdGhpcy5zdGFyYm9hcmQub3B0aW9ucy5sYXllclN3aXRjaGVyVGl0bGU7XG5cbiAgICAgIGlmIChzZWxmLm5hbWUpIHtcbiAgICAgICAgICBsYXllclN3aXRjaGVyVGl0bGUgPSBzZWxmLm5hbWU7XG4gICAgICB9XG5cbiAgICAgIGlmKCF0aGlzLnN0YXJib2FyZC5vcHRpb25zLmJ1dHRvbikge1xuICAgICAgICBjb250ZW50SGVhZGxpbmUuaW5uZXJIVE1MID0gKGxheWVyU3dpdGNoZXJUaXRsZSB8fCBsYW5nQ29uc3RhbnRzLlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgICAkKGNvbnRlbnRIZWFkbGluZSkuYWRkQ2xhc3MoXCJjNGctc3RhcmJvYXJkLWhlYWRsaW5lXCIpO1xuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lTGluay5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcyhcImM0Zy1hY3RpdmVcIikgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYucHJveHkubGF5ZXJJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5oaWRlTGF5ZXIoc2VsZi5wcm94eS5sYXllcklkc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwiYzRnLWFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJjNGctaW5hY3RpdmVcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYucHJveHkubGF5ZXJJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5zaG93TGF5ZXIoc2VsZi5wcm94eS5sYXllcklkc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwiYzRnLWluYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImM0Zy1hY3RpdmVcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgICQoY29udGVudEhlYWRsaW5lTGluaykuYWRkQ2xhc3MoXCJjNGctaW5hY3RpdmUgYzRnLXN0YXJib2FyZC1oZWFkbGluZS1saW5rXCIpO1xuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmsuaW5uZXJIVE1MID0gKGxheWVyU3dpdGNoZXJUaXRsZSB8fCBsYW5nQ29uc3RhbnRzLlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUik7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lTGluay5pbm5lckhUTUwgPSBjb250ZW50SGVhZGxpbmVMaW5rLmlubmVySFRNTCsnICc7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lLmFwcGVuZENoaWxkKGNvbnRlbnRIZWFkbGluZUxpbmspO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZChjb250ZW50SGVhZGxpbmUpO1xuXG4gICAgICB0aGlzLmNvbnRlbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMuY29udGVudERpdi5jbGFzc05hbWUgPSAnYzRnX3N0YXJib2FyZHBsdWdpbl9jb250ZW50JztcbiAgICAgIGNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuY29udGVudERpdik7XG5cbiAgICAgIHNlbGYudmlldyA9IHNlbGYuc3RhcmJvYXJkLmFkZFZpZXcoe1xuICAgICAgICBuYW1lOiBzZWxmLm5hbWUsXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogc2VsZi5uYW1lLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ2M0Zy1zdGFyYm9hcmQtdmlldy10cmlnZ2VyLXN0YXJib2FyZHBsdWdpbi0nICsgc2VsZi50YWJJZCxcbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiBzZWxmLnN0YXJib2FyZC5jb250ZW50Q29udGFpbmVyLCBlbGVtZW50OiBjb250ZW50V3JhcHBlcn0sXG4gICAgICAgICAge3NlY3Rpb246IHNlbGYuc3RhcmJvYXJkLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHNlbGYuc3RhcmJvYXJkLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLmF3ZXNvbWVpY29uLnN1YnN0cmluZygwLCAxKSA9PT0gXCJcXFxcXCIpIHtcbiAgICAgICAgdGhpcy5hd2Vzb21laWNvbiA9IHRoaXMuYXdlc29tZWljb24uc3Vic3RyaW5nKDEsIHRoaXMuYXdlc29tZWljb24ubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHNlbGVjdG9yID0gJ2J1dHRvbi5jNGctc3RhcmJvYXJkLXZpZXctdHJpZ2dlci1zdGFyYm9hcmRwbHVnaW4tJyArIHNlbGYudGFiSWQ7XG4gICAgICAvL1RvRG8gbcO2Z2xpY2hlcndlaXNlIHN0YW5kYXJkIGljb24gP1xuICAgICAgaWYgKHRoaXMuYXdlc29tZWljb24ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBzdHlsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKSxcbiAgICAgICAgICAgICAgc3R5bGVTaGVldDtcblxuICAgICAgICAgIC8vIEFwcGVuZCBzdHlsZSBlbGVtZW50IHRvIGhlYWRcbiAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlRWwpO1xuXG4gICAgICAgICAgLy8gR3JhYiBzdHlsZSBzaGVldFxuICAgICAgICAgIHN0eWxlU2hlZXQgPSBzdHlsZUVsLnNoZWV0O1xuICAgICAgICAvLyBjYXRjaCBmaXJlZm94LCBiZWNhdXNlIEZGIGRvZXMgbm90IGtub3cgXCJhZGRSdWxlXCJcbiAgICAgICAgaWYgKHN0eWxlU2hlZXQuYWRkUnVsZSAmJiB0eXBlb2YgZG9jdW1lbnQuc3R5bGVTaGVldHNbMF0uYWRkUnVsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3R5bGVTaGVldC5hZGRSdWxlKHNlbGVjdG9yICsgJzpiZWZvcmUnLCAnY29udGVudDogXCJcXFxcJysgdGhpcy5hd2Vzb21laWNvbiArJ1wiOycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVTaGVldC5pbnNlcnRSdWxlKHNlbGVjdG9yICsgJzpiZWZvcmUgeyBjb250ZW50OiBcIlxcXFwnKyB0aGlzLmF3ZXNvbWVpY29uICsnXCI7fScsIDApO1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthY3RpdmF0ZSBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudmlldy5hY3RpdmF0ZSgpO1xuICAgICAgaWYgKCF0aGlzLmNvbnRlbnRMb2FkZWQpIHtcbiAgICAgICAgdGhpcy5sb2FkQ29udGVudCgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW3NldENvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtOb2RlfSAgbmV3Q29udGVudCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uIChuZXdDb250ZW50KSB7XG4gICAgICBpZiAobmV3Q29udGVudCkge1xuICAgICAgICBpZiAodHlwZW9mIG5ld0NvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MID0gbmV3Q29udGVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgIHRoaXMuY29udGVudERpdi5yZXBsYWNlQ2hpbGQobmV3Q29udGVudCwgdGhpcy5jb250ZW50RGl2LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5jb250ZW50RGl2LmFwcGVuZENoaWxkKG5ld0NvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIEBUT0RPXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZS5tZXNzYWdlKTtcbiAgICAgICAgICAgIC8vIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2xvYWRDb250ZW50IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBsb2FkQ29udGVudDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgIGZuRHJhd0NvbnRlbnQ7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5zdGFyYm9hcmQuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgIGZuRHJhd0NvbnRlbnQgPSBmdW5jdGlvbiAobGF5ZXJJZHMpIHtcbiAgICAgICAgc2VsZi50cmVlQ29udHJvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAkKHNlbGYudHJlZUNvbnRyb2wpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5TVEFSQk9BUkRfTEFZRVJUUkVFKTtcbiAgICAgICAgc2VsZi5zZXRDb250ZW50KHNlbGYudHJlZUNvbnRyb2wpO1xuICAgICAgICBzZWxmLmFkZEl0ZW1zKGxheWVySWRzLCBzZWxmLnRyZWVDb250cm9sLCB7cGFyc2VBc0xpc3Q6IHRydWV9KTtcbiAgICAgICAgc2VsZi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHNlbGYuY29udGVudExvYWRlZCA9IHRydWU7XG4gICAgICAgIHNlbGYuc3RhcmJvYXJkLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICBzZWxmLnN0YXJib2FyZC51cGRhdGUoKTtcbiAgICAgIH07IC8vIGVuZCBvZiBcImZuRHJhd0NvbnRlbnQoKVwiXG5cbiAgICAgIGZuRHJhd0NvbnRlbnQodGhpcy5wcm94eS5sYXllcklkcyk7XG4gICAgfSwgLy8gZW5kIG9mIFwibG9hZENvbnRlbnQoKVwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2FkZEl0ZW1zIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgaXRlbURhdGEgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICB3cmFwcGVyRWxlbWVudCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIG9wdGlvbnMgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgYWRkSXRlbXM6IGZ1bmN0aW9uIChpdGVtRGF0YSwgd3JhcHBlckVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICB3cmFwcGVyLFxuICAgICAgICBpdGVtLFxuICAgICAgICBsYXllcixcbiAgICAgICAgdWlkLFxuICAgICAgICBsaXN0SXRlbSxcbiAgICAgICAgZW50cnksXG4gICAgICAgICRlbnRyeSxcbiAgICAgICAgaGFuZGxlRW50cnlDbGljayxcbiAgICAgICAgc2VsZixcbiAgICAgICAgcFdyYXBwZXIsXG4gICAgICAgIHRvZ2dsZSxcbiAgICAgICAgY2hpbGRXcmFwcGVyO1xuXG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAgIHBhcnNlQXNMaXN0OiB0cnVlXG4gICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGhhbmRsZUVudHJ5Q2xpY2sgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgaXRlbVVpZDtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyBcInRoaXNcIiBpcyB0aGUgZXZlbnQgc2VuZGluZyBlbnRyeVxuICAgICAgICBpdGVtVWlkID0gJCh0aGlzKS5kYXRhKCd1aWQnKTtcbiAgICAgICAgaWYgKHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHNbaXRlbVVpZF0pIHtcbiAgICAgICAgICAvLyBoaWRlIGxheWVyXG4gICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgc2VsZi5oaWRlTGF5ZXIoaXRlbVVpZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gc2hvdyBsYXllclxuICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcbiAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgIHNlbGYuc2hvd0xheWVyKGl0ZW1VaWQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyByZWdpc3RlciBob29rIHRvIHN3aXRjaCBjaGlsZHMgb2YgbGF5ZXJzIGFzIHdlbGxcbiAgICAgIHRoaXMucHJveHkuaG9va19sYXllcl92aXNpYmlsaXR5LnB1c2goZnVuY3Rpb24gKGxheWVySWQpIHtcbiAgICAgICAgdmFyIGosXG4gICAgICAgICAgY2hhbmdlZExheWVyO1xuXG4gICAgICAgIGNoYW5nZWRMYXllciA9IHNlbGYubGF5ZXJzW2xheWVySWRdO1xuICAgICAgICBpZiAoY2hhbmdlZExheWVyICYmIGNoYW5nZWRMYXllci4kZW50cmllcykge1xuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjaGFuZ2VkTGF5ZXIuJGVudHJpZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLnByb3h5LmFjdGl2ZUxheWVySWRzW2xheWVySWRdKSB7XG4gICAgICAgICAgICAgIGNoYW5nZWRMYXllci4kZW50cmllc1tqXS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hhbmdlZExheWVyLiRlbnRyaWVzW2pdLmFkZENsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTsgLy8gZW5kIG9mIGhvb2tcblxuICAgICAgLy8gYWRkIGhvb2sgZnVuY3Rpb24gZm9yIGNoYW5nZWQgem9vbVxuICAgICAgLy8gICBuZWVkZWQgdG8gY2hhbmdlIHRoZSBlbnRyeS1jbGFzc2VzXG4gICAgICB0aGlzLnByb3h5Lmhvb2tfbWFwX3pvb20ucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBqLFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIGxheWVyO1xuXG4gICAgICAgIGZvciAoaWQgaW4gc2VsZi5sYXllcnMpIHtcbiAgICAgICAgICBpZiAoc2VsZi5sYXllcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICBsYXllciA9IHNlbGYubGF5ZXJzW2lkXTtcbiAgICAgICAgICAgIGlmIChsYXllciAmJiBsYXllci4kZW50cmllcykge1xuICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGF5ZXIuJGVudHJpZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5jaGVja0xheWVySXNBY3RpdmVGb3Jab29tKGlkKSkge1xuICAgICAgICAgICAgICAgICAgbGF5ZXIuJGVudHJpZXNbal0ucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkRJU0FCTEVEKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbGF5ZXIuJGVudHJpZXNbal0uYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkRJU0FCTEVEKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBlbmQgb2YgaG9va1xuXG4gICAgICAvLyBidWlsZCB0aGUgbGF5ZXIgdHJlZVxuICAgICAgd3JhcHBlciA9IG9wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBpZiAoaXRlbURhdGEgJiYgaXRlbURhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbURhdGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICB1aWQgPSBpdGVtRGF0YVtpXTtcbiAgICAgICAgICAvL2xheWVyID0gdGhpcy5wbHVnaW4uY3VzdG9tVGFic1t0aGlzLnRhYklkXS5kcmF3bkZlYXR1cmVzW3VpZF07XG4gICAgICAgICAgbGF5ZXIgPSB0aGlzLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbdWlkXTtcbiAgICAgICAgICAvLyBza2lwIGxheWVyIGlmIGl0IGRvZXNuJ3QgYmVsb25nIHRvIHRoaXMgdGFiXG4gICAgICAgICAgaWYgKCEobGF5ZXIucmVuZGVyU3BlY2lhbCA9PSB0cnVlICYmIChsYXllci50YWJJZCA9PSB0aGlzLnRhYklkKSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBkbyBub3QgcmVuZGVyIHRoZSBzdGFydGFiIGxheWVyIGl0c2VsZiBhcyBwYXJlbnQgbGV2ZWxcbiAgICAgICAgICBpZiAobGF5ZXIudHlwZSA9PT0gXCJzdGFydGFiXCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBjaGVjayBpZiBsYXllciB3YW50cyB0byBiZSBkaXNwbGF5ZWQgaW4gc3RhcmJvYXJkIHRhYlxuICAgICAgICAgIGlmIChsYXllci5oaWRlV2hlbkluVGFiID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGxheWVyLmhpZGUgPT09IFwiMVwiKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllci5pZF0pIHtcbiAgICAgICAgICAgICAgLy8gdGhpcy5oaWRlTGF5ZXIobGF5ZXIuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgbGF5ZXIgc2hvdWxkIGJlIGRpc3BsYXllZFxuICAgICAgICAgIGlmICghbGF5ZXIuZGlzcGxheSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGl0ZW0gPSB7fTtcbiAgICAgICAgICB0aGlzLmxheWVyc1t1aWRdID0gaXRlbTtcbiAgICAgICAgICBsaXN0SXRlbSA9IG9wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgaXRlbS5lbnRyeVdyYXBwZXJzID0gaXRlbS5lbnRyeVdyYXBwZXJzIHx8IFtdO1xuICAgICAgICAgIGl0ZW0uZW50cnlXcmFwcGVycy5wdXNoKGxpc3RJdGVtKTtcbiAgICAgICAgICBlbnRyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICBlbnRyeS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnIycpO1xuICAgICAgICAgIGVudHJ5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxheWVyLmxheWVybmFtZSB8fCBsYXllci5uYW1lKSk7XG4gICAgICAgICAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZW50cnkpO1xuICAgICAgICAgICRlbnRyeSA9ICQoZW50cnkpO1xuICAgICAgICAgIGl0ZW0uJGVudHJpZXMgPSBpdGVtLiRlbnRyaWVzIHx8IFtdO1xuICAgICAgICAgIGl0ZW0uJGVudHJpZXMucHVzaCgkZW50cnkpO1xuICAgICAgICAgICRlbnRyeS5kYXRhKCd1aWQnLCB1aWQpO1xuICAgICAgICAgICRlbnRyeS5jbGljayhoYW5kbGVFbnRyeUNsaWNrKTtcblxuICAgICAgICAgIC8vIHByZXBhcmUgaW5zZXJ0aW9uIG9mIGNoaWxkc1xuICAgICAgICAgIGlmIChsYXllci52aXNpYmxlQ2hpbGRzKSB7XG4gICAgICAgICAgICB0b2dnbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAkKGxpc3RJdGVtKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpO1xuICAgICAgICAgICAgJCh0b2dnbGUpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5JQ09OKTtcbiAgICAgICAgICAgICQodG9nZ2xlKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmICgkKHRoaXMpLnBhcmVudCgpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLnJpZ2h0U2xpZGVFbGVtZW50cykge1xuICAgICAgICAgICAgICAgIHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLnJpZ2h0U2xpZGVFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcygncmlnaHQnLCBzZWxmLnN0YXJib2FyZC5jb250YWluZXIub2Zmc2V0V2lkdGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICQoc2VsZi5zdGFyYm9hcmQuZWxlbWVudCkuY3NzKCdyaWdodCcsIHNlbGYuc3RhcmJvYXJkLmNvbnRhaW5lci5vZmZzZXRXaWR0aCk7XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJCh0b2dnbGUpLmluc2VydEJlZm9yZSgkZW50cnkpO1xuICAgICAgICAgICAgY2hpbGRXcmFwcGVyID0gb3B0aW9ucy5wYXJzZUFzTGlzdCA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJykgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGl0ZW0uY2hpbGRXcmFwcGVycyA9IGl0ZW0uY2hpbGRXcmFwcGVycyB8fCBbXTtcbiAgICAgICAgICAgIGl0ZW0uY2hpbGRXcmFwcGVycy5wdXNoKGNoaWxkV3JhcHBlcik7XG4gICAgICAgICAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChjaGlsZFdyYXBwZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW3VpZF0pIHtcbiAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGVudHJ5LmFkZENsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLmxheWVyc1tsYXllci5waWRdKSB7XG4gICAgICAgICAgICAvLyBpcyBjaGlsZC1lbGVtZW50XG4gICAgICAgICAgICBwV3JhcHBlciA9IHRoaXMubGF5ZXJzW2xheWVyLnBpZF0uY2hpbGRXcmFwcGVycztcbiAgICAgICAgICAgIGlmIChwV3JhcHBlcikge1xuICAgICAgICAgICAgICBwV3JhcHBlcltwV3JhcHBlci5sZW5ndGggLSAxXS5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBlbmQgb2YgZm9yLWxvb3BcbiAgICAgICAgLy8gU3RhcmJvYXJkIEZpbHRlclxuICAgICAgICBpZiAodGhpcy5zdGFyYm9hcmQub3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgICAgICB2YXIgZHYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBkdi5jbGFzc05hbWUgPSBcImM0Zy1zdGFyYm9hcmQtZmlsdGVyIGM0Zy1jb250ZW50LXNlbGVjdFwiO1xuICAgICAgICAgIHZhciBmaWx0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgIGZpbHRlci50eXBlID0gJ3RleHQnO1xuICAgICAgICAgIGZpbHRlci5wbGFjZWhvbGRlciA9IFwiXCI7IC8vRm9udCBBd2Vzb21lXG4gICAgICAgICAgdmFyIGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gICAgICAgICAgaS5jbGFzc05hbWUgPSAnZmFzIGZhLWZpbHRlcic7XG4gICAgICAgICAgaS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gICAgICAgICAgZHYuYXBwZW5kQ2hpbGQoZmlsdGVyKTtcbiAgICAgICAgICBkdi5hcHBlbmRDaGlsZChpKTtcbiAgICAgICAgICBmaWx0ZXIub25rZXl1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZpbHRlcl91bGxpKGVsZW1lbnQsIHNob3dTdWJ0cmVlKSB7XG5cbiAgICAgICAgICAgICAgLy8gZG8gbm90IGFwcGx5IGZpbHRlciBmb3Igc2hvcnQgc2VhcmNoIHRlcm1zXG5cbiAgICAgICAgICAgICAgc2hvd1N1YnRyZWUgPSBzaG93U3VidHJlZSB8fCBmYWxzZTsgIC8vIHVzZWQgd2hpbGUgdHJhdmVyc2luZyBkb3duIHRoZSB0cmVlXG5cbiAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAqIFJldHVybnMgYW4gYXJyYXkgKG1vZGlmaWVkOiBmaXJzdCBlbGVtZW50KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudHMuIE9ubHkgZmluZHMgY2hpbGRyZW4gb2YgdGhlIGdpdmVuIHBhcmVudCBlbGVtZW50LCBidXRcbiAgICAgICAgICAgICAgICogbm8gZnVydGhlciBkZXNjZW5kYW50cyBsaWtlIGdldEVsZW1lbnRzQnlUYWdOYW1lIGRvZXMuXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRDaGlsZHJlbkJ5VGFnTmFtZShlbGVtZW50LCB0YWdOYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jaGlsZHJlbltpXS50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kLnB1c2goZWxlbWVudC5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmb3VuZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZm91bmRbMF07IC8vICEhIVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgbWF0Y2hGbGFnVWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdmFyIHN1YnRyZWVNYXRjaGVzID0gZmFsc2U7XG4gICAgICAgICAgICAgIC8vIGZvciBlYWNoIExJIGRvXG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuICAgICAgICAgICAgICAgIHZhciBpc01hdGNoID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBzZWFyY2ggY3VycmVudCBMSSBmb3IgZmlsdGVyIHRlcm1cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jaGlsZHJlbltpXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpWzBdLmlubmVySFRNTC50b1VwcGVyQ2FzZSgpLmluZGV4T2YoZmlsdGVyLnZhbHVlLnRvVXBwZXJDYXNlKCkpID49IDApIHtcbiAgICAgICAgICAgICAgICAgIC8vIGl0J3MgYSBtYXRjaFxuICAgICAgICAgICAgICAgICAgaXNNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcmVjdXJzZSBpZiBhIHN1YnRyZWUgKFVMKSBleGlzdHMgaW4gY3VycmVudCBMSSAobWF4IDEgZXhwZWN0ZWQpXG4gICAgICAgICAgICAgICAgdmFyIHVsID0gZ2V0Q2hpbGRyZW5CeVRhZ05hbWUoZWxlbWVudC5jaGlsZHJlbltpXSwgXCJ1bFwiKTtcblxuICAgICAgICAgICAgICAgIGlmICh1bCkge1xuICAgICAgICAgICAgICAgICAgLy8gcmVjdXJzaW9uXG4gICAgICAgICAgICAgICAgICB2YXIgaGFzU3VidHJlZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBzdWJ0cmVlTWF0Y2hlcyA9IGZpbHRlcl91bGxpKHVsLCBzaG93U3VidHJlZSB8fCBpc01hdGNoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIGhhc1N1YnRyZWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNNYXRjaCB8fCBzdWJ0cmVlTWF0Y2hlcyB8fCBzaG93U3VidHJlZSkge1xuICAgICAgICAgICAgICAgICAgbWF0Y2hGbGFnVWwgPSB0cnVlOyAvLyB1c2VkIHdoaWxlIHRyYXZlcnNpbmcgdXAgdGhlIHRyZWUgYWdhaW5cbiAgICAgICAgICAgICAgICAgIC8vIHNldCBjdXJyZW50IExJIHZpc2libGUgYW5kIG9wZW5cbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIudmFsdWUubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZChcImM0Zy1vcGVuXCIpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKTsgLy8gYWx3YXlzIHJlbW92ZVxuICAgICAgICAgICAgICAgICAgaWYgKGlzTWF0Y2ggJiYgZmlsdGVyLnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QuYWRkKFwiYzRnLXN0YXJib2FyZC1maWx0ZXItbWF0Y2hcIilcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgTEkgaW52aXNpYmxlXG4gICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1vcGVuXCIpO1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QuYWRkKFwiYzRnLWNsb3NlXCIpO1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYzRnLXN0YXJib2FyZC1maWx0ZXItbWF0Y2hcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAobWF0Y2hGbGFnVWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZG8gbm90IHJlYWN0IGltbWVkaWF0ZWx5IGJ1dCBhbGxvdyBmb3Igc29tZSBrZXlzdHJva2VzXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgLy8gdHdvIG9yIHplcm8gbGV0dGVycyBhcmUgcmVxdWlyZWRcbiAgICAgICAgICAgICAgaWYgKGZpbHRlci52YWx1ZS5sZW5ndGggIT0gMSkgZmlsdGVyX3VsbGkoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmM0Zy1sYXllcnRyZWUgPiB1bDpudGgtY2hpbGQoMiknKSlcbiAgICAgICAgICAgIH0sIDM1MCk7XG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3cmFwcGVyRWxlbWVudC5hcHBlbmRDaGlsZChkdik7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlckVsZW1lbnQuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwiYWRkSXRlbXMoKVwiXG5cbiAgICBzaG93TGF5ZXI6IGZ1bmN0aW9uKGl0ZW1VaWQpIHtcbiAgICAgIGlmICh0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW2l0ZW1VaWRdKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm94eS5sYXllckNvbnRyb2xsZXIuc2hvd0xheWVyKGl0ZW1VaWQpO1xuICAgICAgfVxuICAgIH0sIC8vIGVuZCBvZiBcInNob3dMYXllcigpXCJcblxuICAgIGhpZGVMYXllcjogZnVuY3Rpb24oaXRlbVVpZCkge1xuICAgICAgaWYgKCF0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW2l0ZW1VaWRdKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm94eS5sYXllckNvbnRyb2xsZXIuaGlkZUxheWVyKGl0ZW1VaWQpO1xuICAgICAgfVxuICAgIH0sIC8vIGVuZCBvZiBcImhpZGVMYXllcigpXCJcblxuXG4gIH0pOyAvLyBlbmQgb2YgXCJhZGQgbWV0aG9kc1wiXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIEN1c3RvbXRhYiA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uQ3VzdG9tdGFiO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXN0YXJib2FyZHBsdWdpbi1jdXN0b210YWIuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcblxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbiA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4gfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcblxubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9IGVsc2UgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJlblwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNFbmdsaXNoO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrXG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH1cbn1cblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAZXh0ZW5kcyB7b2wuY29udHJvbC5Db250cm9sfVxuICAgKiBAcGFyYW0gICB7b2JqZWN0fSAgICAgICAgICAgICAgc3RhcmJvYXJkXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5MYXllcnN3aXRjaGVyID0gZnVuY3Rpb24gKHN0YXJib2FyZCkge1xuICAgIGlmICghc3RhcmJvYXJkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCBpbml0aWFsaXplIExheWVyc3dpdGNoZXIgd2l0aG91dCBhIHN0YXJib2FyZC4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5sYXllcnMgPSB7fTtcblxuICAgIHRoaXMuc3RhcmJvYXJkID0gc3RhcmJvYXJkO1xuICAgIHRoaXMucHJveHkgPSBzdGFyYm9hcmQub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5O1xuICAgIHRoaXMuY3JlYXRlKCk7XG4gICAgdGhpcy5sb2FkQ29udGVudCgpO1xuICB9O1xuXG4gIC8vIEFkZCBtZXRob2RzXG4gIGM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luLkxheWVyc3dpdGNoZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uTGF5ZXJzd2l0Y2hlci5wcm90b3R5cGUsIHtcblxuICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgY29udGVudFdyYXBwZXIsXG4gICAgICAgICAgY29udGVudEhlYWRsaW5lLFxuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmssXG4gICAgICAgICAgY29udGVudEluZm8sXG4gICAgICAgICAgbGF5ZXJTd2l0Y2hlclRpdGxlO1xuXG4gICAgICBsYXllclN3aXRjaGVyVGl0bGUgPSB0aGlzLnN0YXJib2FyZC5vcHRpb25zLmxheWVyU3dpdGNoZXJUaXRsZTtcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGNvbnRlbnRXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250ZW50SGVhZGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRlbnRIZWFkbGluZS5jbGFzc05hbWUgPSAnY29udGVudEhlYWRsaW5lJztcblxuICAgICAgaWYoIXRoaXMuc3RhcmJvYXJkLm9wdGlvbnMuYnV0dG9uKSB7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lLmlubmVySFRNTCA9IChsYXllclN3aXRjaGVyVGl0bGUgfHwgbGFuZ0NvbnN0YW50cy5TVEFSQk9BUkRfVklFV19UUklHR0VSX0xBWUVSU1dJVENIRVIpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICAgJChjb250ZW50SGVhZGxpbmUpLmFkZENsYXNzKFwiYzRnLXN0YXJib2FyZC1oZWFkbGluZVwiKTtcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmVMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmsub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoXCJjNGctYWN0aXZlXCIpICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLnByb3h5LmxheWVySWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuaGlkZUxheWVyKHNlbGYucHJveHkubGF5ZXJJZHNbaV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcImM0Zy1hY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwiYzRnLWluYWN0aXZlXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLnByb3h5LmxheWVySWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuc2hvd0xheWVyKHNlbGYucHJveHkubGF5ZXJJZHNbaV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcImM0Zy1pbmFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJjNGctYWN0aXZlXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICAkKGNvbnRlbnRIZWFkbGluZUxpbmspLmFkZENsYXNzKFwiYzRnLWluYWN0aXZlIGM0Zy1zdGFyYm9hcmQtaGVhZGxpbmUtbGlua1wiKTtcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmVMaW5rLmlubmVySFRNTCA9IChsYXllclN3aXRjaGVyVGl0bGUgfHwgbGFuZ0NvbnN0YW50cy5TVEFSQk9BUkRfVklFV19UUklHR0VSX0xBWUVSU1dJVENIRVIpO1xuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmsuaW5uZXJIVE1MID0gY29udGVudEhlYWRsaW5lTGluay5pbm5lckhUTUwrJyAnO1xuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZS5hcHBlbmRDaGlsZChjb250ZW50SGVhZGxpbmVMaW5rKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQoY29udGVudEhlYWRsaW5lKTtcblxuICAgICAgdGhpcy5jb250ZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmNvbnRlbnREaXYuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlNUQVJCT0FSRF9DT05URU5UX0xBWUVSU1dJVENIRVI7XG4gICAgICBjb250ZW50SW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgIHRoaXMuY29udGVudERpdi5hcHBlbmRDaGlsZChjb250ZW50SW5mbyk7XG4gICAgICBjb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnREaXYpO1xuXG4gICAgICBzZWxmLnZpZXcgPSBzZWxmLnN0YXJib2FyZC5hZGRWaWV3KHtcbiAgICAgICAgbmFtZTogJ2xheWVyc3dpdGNoZXInLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6IChsYXllclN3aXRjaGVyVGl0bGUgfHwgbGFuZ0NvbnN0YW50cy5TVEFSQk9BUkRfVklFV19UUklHR0VSX0xBWUVSU1dJVENIRVIpLFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUixcbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiBzZWxmLnN0YXJib2FyZC5jb250ZW50Q29udGFpbmVyLCBlbGVtZW50OiBjb250ZW50V3JhcHBlcn0sXG4gICAgICAgICAge3NlY3Rpb246IHNlbGYuc3RhcmJvYXJkLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHNlbGYuc3RhcmJvYXJkLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthY3RpdmF0ZSBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudmlldy5hY3RpdmF0ZSgpO1xuICAgIH0sIC8vIGVuZCBvZiBcImFjdGl2YXRlKClcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtzZXRDb250ZW50IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgbmV3Q29udGVudCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uIChuZXdDb250ZW50KSB7XG4gICAgICBpZiAobmV3Q29udGVudCkge1xuICAgICAgICBpZiAodHlwZW9mIG5ld0NvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MID0gbmV3Q29udGVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgIHRoaXMuY29udGVudERpdi5yZXBsYWNlQ2hpbGQobmV3Q29udGVudCwgdGhpcy5jb250ZW50RGl2LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5jb250ZW50RGl2LmFwcGVuZENoaWxkKG5ld0NvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIEBUT0RPXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZS5tZXNzYWdlKTtcbiAgICAgICAgICAgIC8vIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MO1xuICAgIH0sIC8vIGVuZCBvZiBcInNldENvbnRlbnQoKVwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2xvYWRDb250ZW50IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBsb2FkQ29udGVudDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgZm5EcmF3Q29udGVudDtcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLnN0YXJib2FyZC5zcGlubmVyLnNob3coKTtcblxuICAgICAgZm5EcmF3Q29udGVudCA9IGZ1bmN0aW9uIChsYXllcklkcykge1xuICAgICAgICBzZWxmLnRyZWVDb250cm9sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICQoc2VsZi50cmVlQ29udHJvbCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLlNUQVJCT0FSRF9MQVlFUlRSRUUpO1xuICAgICAgICBzZWxmLnNldENvbnRlbnQoc2VsZi50cmVlQ29udHJvbCk7XG5cbiAgICAgICAgc2VsZi5hZGRJdGVtcyhsYXllcklkcywgc2VsZi50cmVlQ29udHJvbCk7XG5cbiAgICAgICAgc2VsZi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHNlbGYuc3RhcmJvYXJkLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICBzZWxmLnN0YXJib2FyZC51cGRhdGUoKTtcbiAgICAgIH07IC8vIGVuZCBvZiBcImZuRHJhd0NvbnRlbnQoKVwiXG5cbiAgICAgIGlmICh0aGlzLnByb3h5LmxheWVyc19sb2FkZWQpIHtcbiAgICAgICAgZm5EcmF3Q29udGVudCh0aGlzLnByb3h5LmxheWVySWRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJveHkuaG9va19sYXllcl9sb2FkZWQucHVzaChmbkRyYXdDb250ZW50KTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJsb2FkQ29udGVudCgpXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbZHJhd0NvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgZHJhd0NvbnRlbnQ6IGZ1bmN0aW9uIChjb250ZW50RGF0YSkge1xuICAgICAgLy8gUEFTU1xuICAgIH0sIC8vIGVuZCBvZiBcImRyYXdDb250ZW50KClcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthZGRJdGVtcyBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIGl0ZW1EYXRhICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgd3JhcHBlckVsZW1lbnQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBvcHRpb25zICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFkZEl0ZW1zOiBmdW5jdGlvbiAoaXRlbURhdGEsIHdyYXBwZXJFbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBzZWxmLFxuICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICB3cmFwcGVyLFxuICAgICAgICAgIGNoaWxkV3JhcHBlcixcbiAgICAgICAgICBwV3JhcHBlcixcbiAgICAgICAgICBpdGVtLFxuICAgICAgICAgIGxheWVyLFxuICAgICAgICAgIHVpZCxcbiAgICAgICAgICBsaXN0SXRlbSxcbiAgICAgICAgICBlbnRyeSxcbiAgICAgICAgICAkZW50cnksXG4gICAgICAgICAgdG9nZ2xlLFxuICAgICAgICAgIGZuSGFuZGxlRW50cnlDbGljayxcbiAgICAgICAgICBmbkNoaWxkRW50cnlDbGljayxcbiAgICAgICAgICBmbkNoaWxkRW50cnlTaG93LFxuICAgICAgICAgIHpvb21Ub0V4dGVudCxcbiAgICAgICAgICBsYXllckNsYXNzO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgICBwYXJzZUFzTGlzdDogdHJ1ZVxuICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgIHdyYXBwZXIgPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICAvLyBjcmVhdGUgaGFuZGxlciBmb3IgZW50cnktY2xpY2tzXG4gICAgICBmbkhhbmRsZUVudHJ5Q2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGl0ZW1VaWQsXG4gICAgICAgICAgICBsYXllckl0ZW07XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpdGVtVWlkID0gJCh0aGlzKS5kYXRhKCd1aWQnKTtcbiAgICAgICAgbGF5ZXJJdGVtID0gc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2l0ZW1VaWRdO1xuXG4gICAgICAgIGlmIChzZWxmLnByb3h5LmFjdGl2ZUxheWVySWRzW2l0ZW1VaWRdKSB7XG4gICAgICAgICAgLy8gaGlkZSBsYXllclxuICAgICAgICAgIHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLmhpZGVMYXllcihpdGVtVWlkKTtcbiAgICAgICAgICBpZiAocGFyc2VJbnQobGF5ZXIucGlkLCAxMCkgPT0gMCkge1xuICAgICAgICAgICAgLy8gaGlkZSBhbGwgY2hpbGRzLCBiZWNhdXNlIGNsaWNrZWQgbGF5ZXIgaXMgdGhlIG1hcCBpdHNlbGZcbiAgICAgICAgICAgIGZvciAodmFyIGlkIGluIHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHMpIHtcbiAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuaGlkZUxheWVyKGlkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBzaG93IGxheWVyXG4gICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuc2hvd0xheWVyKGl0ZW1VaWQpO1xuICAgICAgICAgIC8vem9vb20gdG8gZXh0ZW50XG4gICAgICAgICAgem9vbVRvRXh0ZW50KGl0ZW1VaWQpO1xuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYuaGFuZGxlU2VsZWN0ZWRDaGlsZHModGhpcykpIHtcbiAgICAgICAgICBzZWxmLnVwZGF0ZVBhcmVudExheWVycyh0aGlzLCBpdGVtVWlkLCBsYXllckl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYzRnLm1hcHMubGF5ZXJzW2l0ZW1VaWRdID0gbGF5ZXJJdGVtO1xuICAgICAgfTsgLy8gZW5kIG9mIFwiZm5IYW5kbGVFbnRyeUNsaWNrKClcIlxuICAgICAgICBmbkNoaWxkRW50cnlDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGxldCBpdGVtVWlkID0gJCh0aGlzKS5kYXRhKCd1aWQnKTtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSAkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLnBhcmVudCgpO1xuICAgICAgICAgICAgbGV0IGNoaWxkcyA9ICQocGFyZW50KS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgbGV0IHBhcmVudFVpZCA9ICQoY2hpbGRzWzFdKS5kYXRhKCd1aWQnKTtcbiAgICAgICAgICAgIGlmKCQodGhpcykuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSkpe1xuICAgICAgICAgICAgICAgIHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLmhpZGVDaGlsZExheWVyKHBhcmVudFVpZCwgaXRlbVVpZCk7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZigkKHRoaXMpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSkpe1xuICAgICAgICAgICAgICAgIHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLnNob3dDaGlsZExheWVyKHBhcmVudFVpZCwgaXRlbVVpZCk7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGZuQ2hpbGRFbnRyeVNob3cgPSBmdW5jdGlvbiAoZXZlbnQpe1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbGV0IHBhcmVudCA9IHRoaXMucGFyZW50RWxlbWVudDtcbiAgICAgICAgICBsZXQgdWlkID0gJChwYXJlbnQuZmlyc3RDaGlsZCkuZGF0YSgndWlkJyk7XG4gICAgICAgICAgcGFyZW50ID0gJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5wYXJlbnQoKTtcbiAgICAgICAgICBsZXQgY2hpbGRzID0gJChwYXJlbnQpLmNoaWxkcmVuKCk7XG4gICAgICAgICAgbGV0IHBhcmVudFVpZCA9ICQoY2hpbGRzWzFdKS5kYXRhKCd1aWQnKTtcbiAgICAgICAgICB1aWQgPSB1aWQucmVwbGFjZShwYXJlbnRVaWQsJycpXG4gICAgICAgICAgbGV0IGxheWVyID0gc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW3BhcmVudFVpZF0udmVjdG9yTGF5ZXI7XG4gICAgICAgICAgaWYgKGxheWVyKSB7XG4gICAgICAgICAgICBsZXQgc2luZ2xlTGF5ZXIgPSBsYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpW3VpZF07XG4gICAgICAgICAgICBsZXQgZmVhdHVyZSA9IHNpbmdsZUxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKClbMF07XG4gICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmZpdChmZWF0dXJlLmdldEdlb21ldHJ5KCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgem9vbVRvRXh0ZW50ID0gZnVuY3Rpb24oaXRlbVVpZCl7IC8vZnVuY3Rpb24gdG8gem9vbSB0byB0aGUgZXh0ZW50IG9mIGEgbWFwIHN0cnVjdHVyZSBhbmQgaXRzIGNoaWxkcmVuXG4gICAgICAgICAgICB2YXIgbGF5ZXJJdGVtLFxuICAgICAgICAgICAgICAgIHZlY3RvckFycmF5LFxuICAgICAgICAgICAgICAgIGxheWVyR3JvdXAsXG4gICAgICAgICAgICAgICAgY29vcmRzLFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5LFxuICAgICAgICAgICAgICAgIGZlYXR1cmVMaXN0LFxuICAgICAgICAgICAgICAgIGZlYXR1cmVBcnJheSxcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlcyA9IFtdLFxuICAgICAgICAgICAgICAgIGV4dGVudCxcbiAgICAgICAgICAgICAgICBjZW50ZXIsXG4gICAgICAgICAgICAgICAga2V5O1xuICAgICAgICAgICAgbGF5ZXJJdGVtID0gc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2l0ZW1VaWRdO1xuICAgICAgICAgICAgaWYgKGxheWVySXRlbSAmJiBsYXllckl0ZW0uem9vbV9sb2NhdGlvbnMgPT09IFwiMVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVySXRlbS5oYXNDaGlsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gbGF5ZXJJdGVtLmNoaWxkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVySXRlbS5jaGlsZHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyID0gbGF5ZXJJdGVtLmNoaWxkc1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxheWVyLnR5cGUgPT0gXCJvdmVycGFzc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXkgPSBsYXllci5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JBcnJheSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhdGNoIGNhc2Ugb2YgbGlua2VkIGxheWVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ZWN0b3JBcnJheSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JBcnJheSA9IHV0aWxzLm9iamVjdFRvQXJyYXkodmVjdG9yQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllckdyb3VwID0gbGF5ZXIudmVjdG9yTGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckFycmF5ICYmIHZlY3RvckFycmF5LmZvckVhY2ggJiYgdHlwZW9mIHZlY3RvckFycmF5LmZvckVhY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodmVjdG9yTGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JMYXllciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmRhdGEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeS5jb29yZGluYXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LnR5cGUgPT09IFwiUG9pbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZHMgPSBvbC5wcm9qLnRyYW5zZm9ybShbcGFyc2VGbG9hdCh2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQodmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeS5jb29yZGluYXRlc1sxXSldLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IG5ldyBvbC5nZW9tLlBvaW50KGNvb3Jkcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2goZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIG1vcmUgY29tcGxleCBnZW9tZXRyaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVMaXN0ID0gbGF5ZXJHcm91cC5nZXRMYXllcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUFycmF5ID0gZmVhdHVyZUxpc3QuZ2V0QXJyYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUFycmF5LmZvckVhY2goZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci50eXBlID09PSBcImttbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZlYXR1cmUuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgc291cmNlRmVhdHVyZXMgPSBzb3VyY2UuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UuZ2V0RXh0ZW50KCkuZm9yRWFjaChmdW5jdGlvbiAoY29vcmRpbmF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKGNvb3JkaW5hdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihvbC5leHRlbnQuZ2V0VG9wUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSlbJzAnXSAhPVwiSW5maW5pdHlcIiAmJiBvbC5leHRlbnQuZ2V0VG9wUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSlbJzAnXSAhPVwiLUluZmluaXR5XCIpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2gob2wuZXh0ZW50LmdldFRvcFJpZ2h0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wTGVmdChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2gob2wuZXh0ZW50LmdldEJvdHRvbVJpZ2h0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0Qm90dG9tTGVmdChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihsYXllckl0ZW0udHlwZSAhPT0gXCJvdmVycGFzc1wiICYmIGxheWVySXRlbS52ZWN0b3JMYXllcil7XG4gICAgICAgICAgICAgICAgICAgIHZlY3RvckFycmF5ID0gbGF5ZXIuY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckFycmF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhdGNoIGNhc2Ugb2YgbGlua2VkIGxheWVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ZWN0b3JBcnJheSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckFycmF5ID0gdXRpbHMub2JqZWN0VG9BcnJheSh2ZWN0b3JBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllckdyb3VwID0gbGF5ZXIudmVjdG9yTGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVjdG9yQXJyYXkgJiYgdmVjdG9yQXJyYXkuZm9yRWFjaCAmJiB0eXBlb2YgdmVjdG9yQXJyYXkuZm9yRWFjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckFycmF5LmZvckVhY2goZnVuY3Rpb24gKHZlY3RvckxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JMYXllciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeS5jb29yZGluYXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkudHlwZSA9PT0gXCJQb2ludFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRzID0gb2wucHJvai50cmFuc2Zvcm0oW3BhcnNlRmxvYXQodmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeS5jb29yZGluYXRlc1swXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQodmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeS5jb29yZGluYXRlc1sxXSldLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5ID0gbmV3IG9sLmdlb20uUG9pbnQoY29vcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBtb3JlIGNvbXBsZXggZ2VvbWV0cmllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVMaXN0ID0gbGF5ZXJHcm91cC5nZXRMYXllcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlQXJyYXkgPSBmZWF0dXJlTGlzdC5nZXRBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxheWVyLnR5cGUgIT09IFwib3ZlcnBhc3NcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIudHlwZSA9PT0gXCJrbWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBmZWF0dXJlLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHNvdXJjZUZlYXR1cmVzID0gc291cmNlLmdldEZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmdldEV4dGVudCgpLmZvckVhY2goZnVuY3Rpb24gKGNvb3JkaW5hdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChjb29yZGluYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2gob2wuZXh0ZW50LmdldFRvcExlZnQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2gob2wuZXh0ZW50LmdldEJvdHRvbVJpZ2h0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKG9sLmV4dGVudC5nZXRCb3R0b21MZWZ0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBleHRlbnQgPSBvbC5leHRlbnQuYm91bmRpbmdFeHRlbnQoY29vcmRpbmF0ZXMpO1xuICAgICAgICAgICAgICAgIGlmIChleHRlbnRbMF0gPT09IEluZmluaXR5IHx8IGV4dGVudFswXSA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmZpdChleHRlbnQsIHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRTaXplKCkpO1xuICAgICAgICAgICAgICAgIGNlbnRlciA9IHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0Q2VudGVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKGNlbnRlclswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5zZXRDZW50ZXIoWzUwLCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLnNldFpvb20obWFwRGF0YS5taW5ab29tIHx8IDEwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07IC8vZW5kIG9mIHpvb20gdG8gZXh0ZW50XG4gICAgICAvLyBhZGQgaG9vayBmdW5jdGlvbiBmb3IgY2hhbmdlZCBsYXllci12aXNpYmlsaXR5XG4gICAgICAvLyAgIG5lZWRlZCB0byBjaGFuZ2UgdGhlIGVudHJ5LWNsYXNzZXNcbiAgICAgIHRoaXMucHJveHkuaG9va19sYXllcl92aXNpYmlsaXR5LnB1c2goZnVuY3Rpb24gKGxheWVySWQpIHtcbiAgICAgICAgdmFyIGosXG4gICAgICAgICAgICBjaGFuZ2VkTGF5ZXI7XG5cbiAgICAgICAgY2hhbmdlZExheWVyID0gc2VsZi5sYXllcnNbbGF5ZXJJZF07XG4gICAgICAgIGlmIChjaGFuZ2VkTGF5ZXIgJiYgY2hhbmdlZExheWVyLiRlbnRyaWVzKSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNoYW5nZWRMYXllci4kZW50cmllcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJJZF0pIHtcbiAgICAgICAgICAgICAgY2hhbmdlZExheWVyLiRlbnRyaWVzW2pdLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGFuZ2VkTGF5ZXIuJGVudHJpZXNbal0uYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuaGFuZGxlU2VsZWN0ZWRDaGlsZHMoIGNoYW5nZWRMYXllci4kZW50cmllc1tqXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gYWRkIGhvb2sgZnVuY3Rpb24gZm9yIGNoYW5nZWQgem9vbVxuICAgICAgLy8gICBuZWVkZWQgdG8gY2hhbmdlIHRoZSBlbnRyeS1jbGFzc2VzXG4gICAgICB0aGlzLnByb3h5Lmhvb2tfbWFwX3pvb20ucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBqLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBsYXllcjtcblxuICAgICAgICBmb3IgKGlkIGluIHNlbGYubGF5ZXJzKSB7XG4gICAgICAgICAgaWYgKHNlbGYubGF5ZXJzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgICAgbGF5ZXIgPSBzZWxmLmxheWVyc1tpZF07XG4gICAgICAgICAgICBpZiAobGF5ZXIgJiYgbGF5ZXIuJGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxheWVyLiRlbnRyaWVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkuY2hlY2tMYXllcklzQWN0aXZlRm9yWm9vbShpZCkpIHtcbiAgICAgICAgICAgICAgICAgIGxheWVyLiRlbnRyaWVzW2pdLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5ESVNBQkxFRCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGxheWVyLiRlbnRyaWVzW2pdLmFkZENsYXNzKGNzc0NvbnN0YW50cy5ESVNBQkxFRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfSk7IC8vIGVuZCBvZiBob29rXG5cbiAgICAgIGlmIChpdGVtRGF0YSAmJiBpdGVtRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtRGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHVpZCA9IGl0ZW1EYXRhW2ldO1xuICAgICAgICAgIGxheWVyID0gc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW3VpZF07XG4gICAgICAgICAgaXRlbSA9IHt9O1xuICAgICAgICAgIHRoaXMubGF5ZXJzW3VpZF0gPSBpdGVtO1xuICAgICAgICAgIC8vIHJlbmRlclNwZWNpYWwgaXMgc2V0IHdoZW4gYSBsYXllciBpcyByZW5kZXJlZCBpbiBpdHMgb3duIHRhYlxuICAgICAgICAgIGlmIChsYXllci5yZW5kZXJTcGVjaWFsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGF5ZXIgJiYgbGF5ZXIuZGlzcGxheSkge1xuICAgICAgICAgICAgbGlzdEl0ZW0gPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgJChsaXN0SXRlbSkuZGF0YSgnbm9GaWx0ZXInLCBsYXllclsnbm9GaWx0ZXInXSk7XG4gICAgICAgICAgICBpdGVtLmVudHJ5V3JhcHBlcnMgPSBpdGVtLmVudHJ5V3JhcHBlcnMgfHwgW107XG4gICAgICAgICAgICBpdGVtLmVudHJ5V3JhcHBlcnMucHVzaChsaXN0SXRlbSk7XG5cbiAgICAgICAgICAgIGVudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgZW50cnkuc2V0QXR0cmlidXRlKCdocmVmJywgJyMnKTtcbiAgICAgICAgICAgIGVudHJ5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxheWVyLm5hbWUpKTtcbiAgICAgICAgICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGVudHJ5KTtcblxuICAgICAgICAgICAgJGVudHJ5ID0gJChlbnRyeSk7XG4gICAgICAgICAgICBpdGVtLiRlbnRyaWVzID0gaXRlbS4kZW50cmllcyB8fCBbXTtcbiAgICAgICAgICAgIGl0ZW0uJGVudHJpZXMucHVzaCgkZW50cnkpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMucHJveHkuY2hlY2tMYXllcklzQWN0aXZlRm9yWm9vbSh1aWQpKSB7XG4gICAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuRElTQUJMRUQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkZW50cnkuZGF0YSgndWlkJywgdWlkKTtcbiAgICAgICAgICAgICRlbnRyeS5jbGljayhmbkhhbmRsZUVudHJ5Q2xpY2spO1xuXG4gICAgICAgICAgICBpZiAobGF5ZXIudmlzaWJsZUNoaWxkcyB8fCBsYXllci5zcGxpdF9nZW9qc29uKSB7XG4gICAgICAgICAgICAgIHRvZ2dsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblxuICAgICAgICAgICAgICBpZiAobGF5ZXIuaGlkZV9jaGlsZCAhPT0gJzEnKSB7XG4gICAgICAgICAgICAgICAgICAkKGxpc3RJdGVtKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpO1xuICAgICAgICAgICAgICAgICAgJCh0b2dnbGUpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5JQ09OKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAkKHRvZ2dsZSkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnBhcmVudCgpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLnJpZ2h0U2xpZGVFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLnJpZ2h0U2xpZGVFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKCdyaWdodCcsIHNlbGYuc3RhcmJvYXJkLmNvbnRhaW5lci5vZmZzZXRXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAkKHNlbGYuc3RhcmJvYXJkLmVsZW1lbnQpLmNzcygncmlnaHQnLCBzZWxmLnN0YXJib2FyZC5jb250YWluZXIub2Zmc2V0V2lkdGgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgJCh0b2dnbGUpLmluc2VydEJlZm9yZSgkZW50cnkpO1xuICAgICAgICAgICAgICBjaGlsZFdyYXBwZXIgPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICBpdGVtLmNoaWxkV3JhcHBlcnMgPSBpdGVtLmNoaWxkV3JhcHBlcnMgfHwgW107XG4gICAgICAgICAgICAgIGl0ZW0uY2hpbGRXcmFwcGVycy5wdXNoKGNoaWxkV3JhcHBlcik7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVyLmhpZGVfY2hpbGQgIT09ICcxJykge1xuICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChjaGlsZFdyYXBwZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihsYXllci5zcGxpdF9nZW9qc29uICYmIGxheWVyLmNvbnRlbnRbMF0pe1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IGxheWVyLmNvbnRlbnRbMF0uZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5mZWF0dXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGRhdGEuZmVhdHVyZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlID0gZGF0YS5mZWF0dXJlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGRMaXN0SXRlbSA9IG9wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkSXRlbSA9e307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRJdGVtLmVudHJ5V3JhcHBlcnMgPSBjaGlsZEl0ZW0uZW50cnlXcmFwcGVycyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEl0ZW0uZW50cnlXcmFwcGVycy5wdXNoKGNoaWxkTGlzdEl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZEVudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkRW50cnkuc2V0QXR0cmlidXRlKCdocmVmJywgJyMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEVudHJ5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGZlYXR1cmUucHJvcGVydGllc1tsYXllci5nZW9qc29uX2F0dHJpYnV0ZXMuc3BsaXQoJywnKVswXV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZExpc3RJdGVtLmFwcGVuZENoaWxkKGNoaWxkRW50cnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZFVpZCA9IHVpZCArIFwiXCIgKyBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCAkY2hpbGRFbnRyeSA9ICQoY2hpbGRFbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRJdGVtLiRlbnRyaWVzID0gaXRlbS4kZW50cmllcyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEl0ZW0uJGVudHJpZXMucHVzaCgkZW50cnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkV3JhcHBlci5hcHBlbmRDaGlsZChjaGlsZExpc3RJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2hpbGRFbnRyeS5kYXRhKCd1aWQnLCBjaGlsZFVpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobGF5ZXIuZ2VvanNvbl96b29tKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjaGlsZEVudHJ5LmNsaWNrKGZuQ2hpbGRFbnRyeVNob3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNoaWxkRW50cnkuYWRkQ2xhc3MoJ2M0Zy1nZW9qc29uLWJ1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNoaWxkRW50cnkuY2xpY2soZm5DaGlsZEVudHJ5Q2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbdWlkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2hpbGRFbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjaGlsZEVudHJ5LmFkZENsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5hZGRDaGlsZHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLmFkZENoaWxkcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYod2luZG93LmM0Z01hcHNIb29rcy5zdGFyYm9hcmRfbGF5ZXJfYWN0aXZhdGUgJiYgd2luZG93LmM0Z01hcHNIb29rcy5zdGFyYm9hcmRfbGF5ZXJfYWN0aXZhdGUubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXJhbU9iaiA9IHsnZmVhdHVyZSc6IGZlYXR1cmUsICdwYXJlbnRJdGVtJzogY2hpbGRMaXN0SXRlbSwgJ2VudHJ5JzokY2hpbGRFbnRyeX07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3Muc3RhcmJvYXJkX2xheWVyX2FjdGl2YXRlLCBwYXJhbU9iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1t1aWRdKSB7XG4gICAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBbaW5mb106ICBJbiBvcmRlciBmb3IgdGhpcyB0byB3b3JrLFxuICAgICAgICAgICAgLy8gICAgICAgICAgdGhlIHBhcmVudCBsYXllcnMgbmVlZCB0byBiZVxuICAgICAgICAgICAgLy8gICAgICAgICAgbGlzdGVkIGJlZm9yZSB0aGVpciBjaGlsZHNcbiAgICAgICAgICAgIGlmICh0aGlzLmxheWVyc1tsYXllci5waWRdKSB7XG4gICAgICAgICAgICAgIC8vIGlzIGNoaWxkLWVsZW1lbnRcbiAgICAgICAgICAgICAgcFdyYXBwZXIgPSB0aGlzLmxheWVyc1tsYXllci5waWRdLmNoaWxkV3JhcHBlcnM7XG4gICAgICAgICAgICAgIHBXcmFwcGVyW3BXcmFwcGVyLmxlbmd0aCAtIDFdLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChsYXllci5waWQsIDEwKSA9PSAwKSB7XG4gICAgICAgICAgICAgIC8vIGxheWVyIGlzIG1hcCBpdHNlbGYgd2l0aCBhIGxheWVyXG4gICAgICAgICAgICAgIHRvZ2dsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgICAgaWYobGF5ZXIuaGlkZV9jaGlsZCAhPT0gJzEnKSB7XG4gICAgICAgICAgICAgICAgICAkKGxpc3RJdGVtKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICQodG9nZ2xlKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSUNPTik7XG4gICAgICAgICAgICAgICQodG9nZ2xlKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQodGhpcykucGFyZW50KCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKSkge1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAkKHRvZ2dsZSkuaW5zZXJ0QmVmb3JlKCRlbnRyeSk7XG4gICAgICAgICAgICAgIGNoaWxkV3JhcHBlciA9IG9wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgIGl0ZW0uY2hpbGRXcmFwcGVycyA9IGl0ZW0uY2hpbGRXcmFwcGVycyB8fCBbXTtcbiAgICAgICAgICAgICAgaXRlbS5jaGlsZFdyYXBwZXJzLnB1c2goY2hpbGRXcmFwcGVyKTtcbiAgICAgICAgICAgICAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoY2hpbGRXcmFwcGVyKTtcbiAgICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBpcyBub3QgYSBjaGlsZC1lbGVtZW50IChwaWQgPT0gbWFwSWQpXG4gICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobGF5ZXIuaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWRzdHIgPSBsYXllci5pZC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGxheWVyQ2xhc3MgPSBlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgICAgICAgICAgIGlkc3RyLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICApLnJlcGxhY2UoLyVbMC05QS1GXXsyfS9naSwnJyk7XG4gICAgICAgICAgICAgICAgJChsaXN0SXRlbSkuYWRkQ2xhc3MoJ2M0Z19zdGFyYm9hcmRfaXRlbV8nK2xheWVyQ2xhc3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobGF5ZXIuY3NzQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAkKGxpc3RJdGVtKS5hZGRDbGFzcyhsYXllci5jc3NDbGFzcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNhbGwgaG9vayBcImxheWVyc3dpdGNoZXJfZm9yRWFjaEl0ZW1cIlxuICAgICAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5sYXllcnN3aXRjaGVyX2ZvckVhY2hJdGVtID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKFxuICAgICAgICAgICAgICAgICAgd2luZG93LmM0Z01hcHNIb29rcy5sYXllcnN3aXRjaGVyX2ZvckVhY2hJdGVtLFxuICAgICAgICAgICAgICAgICAge3RoYXQ6IHRoaXMsIGl0ZW06IGl0ZW0sIGVudHJ5OiAkZW50cnl9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGVuZCBvZiBmb3ItbG9vcFxuXG4gICAgICAgIC8vIFN0YXJib2FyZCBGaWx0ZXJcbiAgICAgICAgaWYgKHRoaXMuc3RhcmJvYXJkLm9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICAgICAgICB2YXIgZHYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGR2LmNsYXNzTmFtZSA9IFwiYzRnLXN0YXJib2FyZC1maWx0ZXIgYzRnLWNvbnRlbnQtc2VsZWN0XCI7XG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGZpbHRlci50eXBlID0gJ3RleHQnO1xuICAgICAgICAgICAgZmlsdGVyLnBsYWNlaG9sZGVyID0gXCJcIjsgLy9Gb250IEF3ZXNvbWVcbiAgICAgICAgICAgIHZhciBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICAgICAgICAgICAgaS5jbGFzc05hbWUgPSAnZmFzIGZhLWZpbHRlcic7XG4gICAgICAgICAgICBpLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICAgIGR2LmFwcGVuZENoaWxkKGZpbHRlcik7XG4gICAgICAgICAgICBkdi5hcHBlbmRDaGlsZChpKTtcbiAgICAgICAgICAgIGZpbHRlci5vbmtleXVwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZmlsdGVyX3VsbGkoZWxlbWVudCwgc2hvd1N1YnRyZWUpIHtcblxuICAgICAgICAgICAgICAgICAgLy8gZG8gbm90IGFwcGx5IGZpbHRlciBmb3Igc2hvcnQgc2VhcmNoIHRlcm1zXG5cbiAgICAgICAgICAgICAgICAgICAgc2hvd1N1YnRyZWUgPSBzaG93U3VidHJlZSB8fCBmYWxzZTsgIC8vIHVzZWQgd2hpbGUgdHJhdmVyc2luZyBkb3duIHRoZSB0cmVlXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFJldHVybnMgYW4gYXJyYXkgKG1vZGlmaWVkOiBmaXJzdCBlbGVtZW50KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudHMuIE9ubHkgZmluZHMgY2hpbGRyZW4gb2YgdGhlIGdpdmVuIHBhcmVudCBlbGVtZW50LCBidXRcbiAgICAgICAgICAgICAgICAgICAgICogbm8gZnVydGhlciBkZXNjZW5kYW50cyBsaWtlIGdldEVsZW1lbnRzQnlUYWdOYW1lIGRvZXMuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRDaGlsZHJlbkJ5VGFnTmFtZShlbGVtZW50LCB0YWdOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuW2ldLnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PSB0YWdOYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQucHVzaChlbGVtZW50LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihmb3VuZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kWzBdOyAvLyAhISFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoRmxhZ1VsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJ0cmVlTWF0Y2hlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgZWFjaCBMSSBkb1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc01hdGNoID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBjdXJyZW50IExJIGZvciBmaWx0ZXIgdGVybVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGRyZW5baV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXS5pbm5lckhUTUwudG9VcHBlckNhc2UoKS5pbmRleE9mKGZpbHRlci52YWx1ZS50b1VwcGVyQ2FzZSgpKSA+PSAwIHx8ICQoZWxlbWVudC5jaGlsZHJlbltpXSkuZGF0YSgnbm9GaWx0ZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgYSBtYXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZWN1cnNlIGlmIGEgc3VidHJlZSAoVUwpIGV4aXN0cyBpbiBjdXJyZW50IExJIChtYXggMSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bCA9IGdldENoaWxkcmVuQnlUYWdOYW1lKGVsZW1lbnQuY2hpbGRyZW5baV0sXCJ1bFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWN1cnNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzU3VidHJlZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VidHJlZU1hdGNoZXMgPSBmaWx0ZXJfdWxsaSh1bCwgc2hvd1N1YnRyZWUgfHwgaXNNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNTdWJ0cmVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc01hdGNoIHx8IHN1YnRyZWVNYXRjaGVzIHx8IHNob3dTdWJ0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hGbGFnVWwgPSB0cnVlOyAvLyB1c2VkIHdoaWxlIHRyYXZlcnNpbmcgdXAgdGhlIHRyZWUgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY3VycmVudCBMSSB2aXNpYmxlIGFuZCBvcGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIudmFsdWUubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZChcImM0Zy1vcGVuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1zdGFyYm9hcmQtZmlsdGVyLW1hdGNoXCIpOyAvLyBhbHdheXMgcmVtb3ZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWF0Y2ggJiYgZmlsdGVyLnZhbHVlLmxlbmd0aCA+IDApIHtlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKX07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjdXJyZW50IExJIGludmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1vcGVuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZChcImM0Zy1jbG9zZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoRmxhZ1VsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBkbyBub3QgcmVhY3QgaW1tZWRpYXRlbHkgYnV0IGFsbG93IGZvciBzb21lIGtleXN0cm9rZXMgXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgIC8vIHR3byBvciB6ZXJvIGxldHRlcnMgYXJlIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyLnZhbHVlLmxlbmd0aCAhPSAxKSBmaWx0ZXJfdWxsaShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYzRnLWxheWVydHJlZSA+IHVsOm50aC1jaGlsZCgyKScpKVxuICAgICAgICAgICAgICAgIH0sIDM1MCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdyYXBwZXJFbGVtZW50LmFwcGVuZENoaWxkKGR2KTtcblxuICAgICAgICB9XG4gICAgICAgIHdyYXBwZXJFbGVtZW50LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgICAgfVxuICAgIH0sIC8vIGVuZCBvZiBcImFkZEl0ZW1zKClcIlxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHdoaWNoIGNoZWNrcyBmb3IgYSBnaXZlbiBsYXllciBpZCwgaWYgYW55IG9mIHRoZSBjaGlsZHMgYXJlIGN1cnJlbnRseSBzZWxlY3RlZC5cbiAgICAgKiBAcGFyYW0gbGF5ZXJVaWRcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBjaGVja0NoaWxkU2VsZWN0aW9uczogZnVuY3Rpb24gKGxheWVyVWlkKSB7XG4gICAgICB2YXIgbGF5ZXIsXG4gICAgICAgICAgY2hpbGRBY3RpdmUsXG4gICAgICAgICAgc2VsZjtcbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgY2hpbGRBY3RpdmUgPSAwO1xuICAgICAgbGF5ZXIgPSBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbbGF5ZXJVaWRdO1xuICAgICAgaWYgKGxheWVyICYmIGxheWVyLmNoaWxkcyAmJiBsYXllci5jaGlsZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBsYXllciBoYXMgY2hpbGRzXG4gICAgICAgIGxheWVyLmNoaWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgIGlmIChzZWxmLnByb3h5LmFjdGl2ZUxheWVySWRzW2NoaWxkLmlkXSkge1xuICAgICAgICAgICAgY2hpbGRBY3RpdmUgPSBjaGlsZEFjdGl2ZSArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFueSBjaGlsZHMgb2YgY2hpbGRzIGFyZSBhY3RpdmVcbiAgICAgICAgICAgIGNoaWxkQWN0aXZlID0gY2hpbGRBY3RpdmUgKyBzZWxmLmNoZWNrQ2hpbGRTZWxlY3Rpb25zKGNoaWxkLnVpZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGlsZEFjdGl2ZTtcbiAgICB9LCAvLyBlbmQgb2YgXCJjaGVja0NoaWxkU2VsZWN0aW9ucygpXCJcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGZvciBjb2xvcmluZyB0aGUgbGF5ZXJzd2l0Y2hlciBlbnRyaWVzLCBpZiB0aGVyZSBhcmUgYW55IHN1YmxheWVycyBzZWxlY3RlZFxuICAgICAqIEBwYXJhbSBlbnRyeVxuICAgICAqL1xuICAgIGhhbmRsZVNlbGVjdGVkQ2hpbGRzOiBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIGlmICh0aGlzLmNoZWNrQ2hpbGRTZWxlY3Rpb25zKCQoZW50cnkpLmRhdGEoJ3VpZCcpKSA+PSAxKSB7XG4gICAgICAgICQoZW50cnkpLmNzcygnZm9udC13ZWlnaHQnLCAnYm9sZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChlbnRyeSkuY3NzKCdmb250LXdlaWdodCcsICdub3JtYWwnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhcmJvYXJkLnVwZGF0ZSgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIHVwZGF0ZVBhcmVudExheWVyczogZnVuY3Rpb24gKGVudHJ5LCBsYXllclVpZCwgY2xpY2tlZExheWVyKSB7XG4gICAgICB2YXIgbGF5ZXIsXG4gICAgICAgICAgcGFyZW50RW50cnksXG4gICAgICAgICAgcGFyZW50TGF5ZXI7XG5cbiAgICAgIGxheWVyID0gdGhpcy5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2xheWVyVWlkXTtcbiAgICAgIGlmIChsYXllci5waWQgIT0gdGhpcy5zdGFyYm9hcmQub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEubWFwSWQpIHtcbiAgICAgICAgLy8gdGhlIGxheWVyIGhhcyBwYXJlbnRzXG4gICAgICAgIC8vIGJ5IHRoaXMgd2UgY2FuIGFjY2VzcyBvbmx5IHRoZSBzaW5nbGUgc3BhbiB3aGVyZSB0aGUgcGFyZW50IGVudHJ5IGlzIGluXG4gICAgICAgIHBhcmVudExheWVyID0gdGhpcy5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2xheWVyLnBpZF07XG4gICAgICAgIGlmIChwYXJlbnRMYXllcikge1xuICAgICAgICAgIHBhcmVudEVudHJ5ID0gZW50cnkucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXTtcbiAgICAgICAgICBpZiAocGFyZW50RW50cnkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW2NsaWNrZWRMYXllci5pZF0pIHtcbiAgICAgICAgICAgICAgJChwYXJlbnRFbnRyeSkuY3NzKCdmb250LXdlaWdodCcsICdib2xkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja0NoaWxkU2VsZWN0aW9ucygkKHBhcmVudEVudHJ5KS5kYXRhKCd1aWQnKSkgPj0gMSkge1xuICAgICAgICAgICAgICAgICQocGFyZW50RW50cnkpLmNzcygnZm9udC13ZWlnaHQnLCAnYm9sZCcpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQocGFyZW50RW50cnkpLmNzcygnZm9udC13ZWlnaHQnLCAnbm9ybWFsJyk7XG4gICAgICAgICAgICAgICAgLy8kKHBhcmVudEVudHJ5KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBhcmVudExheWVycyhwYXJlbnRFbnRyeSwgcGFyZW50TGF5ZXIuaWQsIHBhcmVudExheWVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCJcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgTGF5ZXJzd2l0Y2hlciA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uTGF5ZXJzd2l0Y2hlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWxheWVyc3dpdGNoZXIuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIHRoZSBjdXJyZW50IHpvb21sZXZlbCBvbiB0aGUgbWFwLlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgIHtvbC5jb250cm9sLkNvbnRyb2x9XG4gICAqXG4gICAqIEBwYXJhbSAgICB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0X29wdGlvbnMgICpvcHRpb25hbCogY29udHJvbCBvcHRpb25zLlxuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5ab29tbGV2ZWwgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgdmFyIHNlbGYsXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIHVwZGF0ZVpvb21sZXZlbDtcblxuICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLm1hcFZpZXcpIHtcbiAgICAgIGNvbnNvbGUud2FybignWm9vbWxldmVsIGNvbnRyb2wgbmVlZHMgdG8ga25vdyB0aGUgbWFwLicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5aT09NX0xFVkVMLFxuICAgICAgdW5kZWZpbmVkSFRNTDogJydcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lO1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gb3B0aW9ucy5tYXBWaWV3LmdldFpvb20oKTtcblxuICAgIHVwZGF0ZVpvb21sZXZlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gcGFyc2VJbnQob3B0aW9ucy5tYXBWaWV3LmdldFpvb20oKSk7XG4gICAgfTtcblxuICAgIG9wdGlvbnMubWFwVmlldy5vbignY2hhbmdlOnJlc29sdXRpb24nLCB1cGRhdGVab29tbGV2ZWwpO1xuICAgIG9sLmNvbnRyb2wuQ29udHJvbC5jYWxsKHRoaXMsIHtcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICB0YXJnZXQ6IG9wdGlvbnMudGFyZ2V0XG4gICAgfSk7XG4gIH07XG4gIG9sLmluaGVyaXRzKGM0Zy5tYXBzLmNvbnRyb2wuWm9vbWxldmVsLCBvbC5jb250cm9sLkNvbnRyb2wpO1xuXG5cbiAgLypcbiAgICogQWRkIG1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuWm9vbWxldmVsLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuWm9vbWxldmVsLnByb3RvdHlwZSwge1xuXG4gICAgLy8gbm90aGluZyB0byBhZGQgaGVyZVxuXG4gIH0pOyAvLyBlbmQgb2YgXCJhZGQgbWV0aG9kc1wiIC0tLVxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBab29tbGV2ZWwgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuWm9vbWxldmVsO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC16b29tbGV2ZWwuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmludGVyYWN0aW9uID0gdGhpcy5jNGcubWFwcy5pbnRlcmFjdGlvbiB8fCB7fTtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjNGcubWFwcy5pbnRlcmFjdGlvbi5HZW9QaWNrZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBtYXBEYXRhLFxuICAgICAgICBtYXBDb250YWluZXIsXG4gICAgICAgIGxhdCxcbiAgICAgICAgbG9uLFxuICAgICAgICBsYXRJZHgsXG4gICAgICAgIGxvbklkeCxcbiAgICAgICAgbGF0Um5kLFxuICAgICAgICBsb25SbmQ7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubWFwQ29udGFpbmVyIHx8ICF0aGlzLm9wdGlvbnMubWFwQ29udGFpbmVyLmRhdGEpIHtcbiAgICAgIGNvbnNvbGUud2FybignVGhlIEdlb1BpY2tlciBuZWVkcyBhIFwibWFwQ29udGFpbmVyXCIgaW4gb3JkZXIgdG8gd29yay4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBtYXBEYXRhID0gdGhpcy5vcHRpb25zLm1hcENvbnRhaW5lci5kYXRhO1xuICAgIG1hcENvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5tYXBDb250YWluZXI7XG4gICAgLy8gY29uZmlndXJhdGUgZ2VvcGlja2VyXG4gICAgdGhpcy4kZmllbGRHZW9YID0gJChtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feCk7XG4gICAgdGhpcy4kZmllbGRHZW9ZID0gJChtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feSk7XG5cbiAgICB0aGlzLm9wdGljTGF5ZXJTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3Rvcih7fSk7XG4gICAgdGhpcy5vcHRpY0xheWVyVmVjdG9yID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgICBzb3VyY2U6IHRoaXMub3B0aWNMYXllclNvdXJjZSxcbiAgICAgIHN0eWxlOiB0aGlzLmdlb1BpY2tlclN0eWxlRnVuY3Rpb25cbiAgICB9KTtcbiAgICB0aGlzLm9wdGljTGF5ZXJGZWF0dXJlID0gbnVsbDtcblxuICAgIGlmICh0aGlzLiRmaWVsZEdlb1gudmFsKCkgJiYgdGhpcy4kZmllbGRHZW9ZLnZhbCgpKSB7XG4gICAgICBsYXQgPSB0aGlzLiRmaWVsZEdlb1kudmFsKCk7XG4gICAgICBsb24gPSB0aGlzLiRmaWVsZEdlb1gudmFsKCk7XG5cbiAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlci5hbm9ueW1vdXMpIHtcbiAgICAgICAgICB0aGlzLiRmaWVsZEdlb1kucmVtb3ZlKCk7XG4gICAgICAgICAgdGhpcy4kZmllbGRHZW9YLnJlbW92ZSgpO1xuXG4gICAgICAgICAgbGF0SWR4ID0gbGF0LmluZGV4T2YoJy4nKTtcbiAgICAgICAgICBsb25JZHggPSBsb24uaW5kZXhPZignLicpO1xuICAgICAgICAgIGxhdCA9IGxhdC5yZXBsYWNlKC9cXEQvZywgXCJcIik7XG4gICAgICAgICAgbG9uID0gbG9uLnJlcGxhY2UoL1xcRC9nLCBcIlwiKTtcbiAgICAgICAgICBsYXRSbmQgPSBNYXRoLnJvdW5kKChNYXRoLnJhbmRvbSgpICogKDk5OTk5OTk5OTk5IC0gMSkpICsgMSk7XG4gICAgICAgICAgbG9uUm5kID0gTWF0aC5yb3VuZCgoTWF0aC5yYW5kb20oKSAqICg5OTk5OTk5OTk5OSAtIDEpKSArIDEpO1xuICAgICAgICAgIGlmIChsYXRSbmQgPiA0OTk5OTk5OTk5OSkge1xuICAgICAgICAgICAgICBsYXQgPSBwYXJzZUludChsYXQpIC0gbGF0Um5kO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxhdCA9IHBhcnNlSW50KGxhdCkgKyBsYXRSbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsb25SbmQgPCA1MDAwMDAwMDAwMCkge1xuICAgICAgICAgICAgICBsb24gPSBwYXJzZUludChsb24pIC0gbG9uUm5kO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxvbiA9IHBhcnNlSW50KGxvbikgKyBsb25SbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhdCA9IGxhdCArIFwiXCI7XG4gICAgICAgICAgbG9uID0gbG9uICsgXCJcIjtcbiAgICAgICAgICBsYXQgPSBsYXQuc3Vic3RyKDAsIGxhdElkeCkgKyAnLicgKyBsYXQuc3Vic3RyKGxhdElkeCwgbGF0Lmxlbmd0aCAtIGxhdElkeCk7XG4gICAgICAgICAgbG9uID0gbG9uLnN1YnN0cigwLCBsb25JZHgpICsgJy4nICsgbG9uLnN1YnN0cihsb25JZHgsIGxvbi5sZW5ndGggLSBsb25JZHgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9wdGljTGF5ZXJGZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoe1xuICAgICAgICBnZW9tZXRyeTogbmV3IG9sLmdlb20uUG9pbnQob2wucHJvai5mcm9tTG9uTGF0KFtwYXJzZUZsb2F0KGxvbiksIHBhcnNlRmxvYXQobGF0KV0pKSxcbiAgICAgICAgcGlja2VyQ29sb3I6IFswLCAxODAsIDEwMCwgMV0sXG4gICAgICAgIGFub255bW91czogbWFwRGF0YS5nZW9waWNrZXIuYW5vbnltb3VzXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5vcHRpY0xheWVyU291cmNlLmFkZEZlYXR1cmUodGhpcy5vcHRpY0xheWVyRmVhdHVyZSk7XG5cbiAgICAgIG1hcENvbnRhaW5lci5tYXAuZ2V0VmlldygpLmZpdCh0aGlzLm9wdGljTGF5ZXJTb3VyY2UuZ2V0RXh0ZW50KCksIG1hcENvbnRhaW5lci5tYXAuZ2V0U2l6ZSgpKTtcbiAgICAgIC8vIHNldCB6b29tIHNvIHdlIGNhbiBzZWUgc29tZSB0aWxlcyB3aXRob3V0IGVycm9yXG4gICAgICBtYXBDb250YWluZXIubWFwLmdldFZpZXcoKS5zZXRab29tKDE1KTtcbiAgICB9IGVsc2UgaWYgKG1hcERhdGEuZ2VvTG9jYXRpb24gJiYgdHlwZW9mIG1hcERhdGEuZ2VvTG9jYXRpb24uc2V0VHJhY2tpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1hcERhdGEuZ2VvTG9jYXRpb24uc2V0VHJhY2tpbmcodHJ1ZSk7XG4gICAgfVxuICAgIG1hcENvbnRhaW5lci5tYXAuYWRkTGF5ZXIodGhpcy5vcHRpY0xheWVyVmVjdG9yKTtcblxuICAgIC8vVE9ETyB3ZW5uIGdlb3BpY2tlci5jbGlja0Rpc2FibGVkIChvZGVyIHNvKSBnZXNldHp0IGlzdCwgdGhpcy5vcHRpb25zLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oKXt9XG5cbiAgICAvLyBpbmhlcml0YW5jZS1zdHVmZlxuICAgIG9sLmludGVyYWN0aW9uLkludGVyYWN0aW9uLmNhbGwodGhpcywge1xuICAgICAgaGFuZGxlRXZlbnQ6IHRoaXMub3B0aW9ucy5oYW5kbGVFdmVudCB8fCB0aGlzLmhhbmRsZUV2ZW50XG4gICAgICAvLyBoYW5kbGVFdmVudDogdGhpcy5vcHRpb25zLmhhbmRsZUV2ZW50IHx8IGM0Zy5tYXBzLmludGVyYWN0aW9uLkdlb1BpY2tlci5oYW5kbGVFdmVudFxuICAgIH0pO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5pbnRlcmFjdGlvbi5HZW9QaWNrZXIsIG9sLmludGVyYWN0aW9uLkludGVyYWN0aW9uKTtcblxuXG4gIC8qXG4gICAqIEFkZCBtZXRob2RzXG4gICAqL1xuICBjNGcubWFwcy5pbnRlcmFjdGlvbi5HZW9QaWNrZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuaW50ZXJhY3Rpb24uR2VvUGlja2VyLnByb3RvdHlwZSwge1xuXG4gICAgZ2VvUGlja2VyU3R5bGVGdW5jdGlvbjogZnVuY3Rpb24gKGZlYXR1cmUsIHByb2plY3Rpb24sIGdldElkKSB7XG4gICAgICB2YXIgY29sb3IsXG4gICAgICAgICAgd2hpdGUsXG4gICAgICAgICAgcmVzdWx0O1xuXG4gICAgICBpZiAoZ2V0SWQpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuXG4gICAgICB3aGl0ZSA9IFsyNTUsIDI1NSwgMjU1LCAxXTtcbiAgICAgIGlmIChmZWF0dXJlICYmIHR5cGVvZiBmZWF0dXJlLmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiBmZWF0dXJlLmdldCgncGlja2VyQ29sb3InKSkge1xuICAgICAgICBjb2xvciA9IGZlYXR1cmUuZ2V0KCdwaWNrZXJDb2xvcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sb3IgPSBbMjAwLCAwLCAwLCAwLjddO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChmZWF0dXJlICYmIHR5cGVvZiBmZWF0dXJlLmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiAhZmVhdHVyZS5nZXQoJ2Fub255bW91cycpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyLFxuICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHdoaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHdoaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogNDAsXG4gICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHdoaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogNDAsXG4gICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQucHVzaChcbiAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICByYWRpdXM6IDYwLFxuICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgY29sb3I6IHdoaXRlLFxuICAgICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB6SW5kZXg6IEluZmluaXR5XG4gICAgICAgIH0pKTtcblxuICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgcmFkaXVzOiA2MCxcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgd2lkdGg6IDJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgekluZGV4OiBJbmZpbml0eVxuICAgICAgICB9KSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiAobWFwQnJvd3NlckV2ZW50KSB7XG4gICAgICBpZiAobWFwQnJvd3NlckV2ZW50LnR5cGUgPT09IFwic2luZ2xlY2xpY2tcIikge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlQ2xpY2tFdmVudCAmJiAhdGhpcy5vcHRpb25zLm1hcENvbnRhaW5lci5kYXRhLmdlb3BpY2tlci5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybiAhdGhpcy5waWNrKG1hcEJyb3dzZXJFdmVudC5jb29yZGluYXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgcGljazogZnVuY3Rpb24gKGNvb3JkaW5hdGUpIHtcbiAgICAgIHZhciBhcnJMYXRMb247XG5cbiAgICAgIGFyckxhdExvbiA9IG9sLnByb2oudG9Mb25MYXQoY29vcmRpbmF0ZSk7XG5cbiAgICAgIHRoaXMub3B0aWNMYXllckZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgIGdlb21ldHJ5OiBuZXcgb2wuZ2VvbS5Qb2ludChjb29yZGluYXRlKVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMub3B0aWNMYXllclNvdXJjZS5jbGVhcigpO1xuICAgICAgdGhpcy5vcHRpY0xheWVyU291cmNlLmFkZEZlYXR1cmUodGhpcy5vcHRpY0xheWVyRmVhdHVyZSk7XG5cbiAgICAgIHRoaXMuJGZpZWxkR2VvWC52YWwoYXJyTGF0TG9uWzBdKTtcbiAgICAgIHRoaXMuJGZpZWxkR2VvWS52YWwoYXJyTGF0TG9uWzFdKTtcbiAgICAgIHRoaXMuJGZpZWxkR2VvWC5jaGFuZ2UoKTtcbiAgICAgIHRoaXMuJGZpZWxkR2VvWS5jaGFuZ2UoKTtcblxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCIgLS0tXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgbGV0IEdlb1BpY2tlciA9IHRoaXMuYzRnLm1hcHMuaW50ZXJhY3Rpb24uR2VvUGlja2VyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtaW50ZXJhY3Rpb24tZ2VvcGlja2VyLmpzIiwiaW1wb3J0IHtNYXBDb250cm9sbGVyfSBmcm9tIFwiLi9jNGctbWFwc1wiXG5cbmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gIGlmICh0eXBlb2YgbWFwRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdpbmRvdy5pbml0TWFwcyhtYXBEYXRhKTtcbiAgfVxufSk7XG5cbndpbmRvdy5pbml0TWFwcyA9IGZ1bmN0aW9uKG1hcERhdGEpIHtcbiAgbGV0IG1hcENvbnRyb2xsZXIgPSBuZXcgTWFwQ29udHJvbGxlcihtYXBEYXRhKTtcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1tYWluLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5taXNjID0gdGhpcy5jNGcubWFwcy5taXNjIHx8IHt9O1xuXG5pbXBvcnQge1Rvb2x0aXBQb3BVcH0gZnJvbSBcIi4vYzRnLW1hcHMtbWlzYy10b29sdGlwcG9wdXBcIjtcbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQFRPRE9cbiAgICogW01hcEhvdmVyIGRlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfb3B0aW9ucyBDb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5taXNjLk1hcEhvdmVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAvLyBtYXBDb250cm9sbGVyOiB1bmRlZmluZWQsXG4gICAgICBhY3RpdmF0ZTogdHJ1ZVxuICAgIH0sIHRoaXMub3B0aW9ucyk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ01hcEhvdmVyIG5lZWRzIGEgbWFwQ29udHJvbGxlcicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHNldCBuZWVkZWQgdmFyc1xuICAgIHRoaXMubGlzdGVuZXJLZXkgPSBmYWxzZTtcbiAgICB0aGlzLm1hcCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcDtcbiAgICB0aGlzLmxhc3RGZWF0dXJlU3R5bGUgPSBudWxsO1xuICAgIHRoaXMubGFzdEhvdmVyZWRGZWF0dXJlID0gbnVsbDtcblxuICAgIC8vIGNyZWF0ZSB0b29sdGlwXG4gICAgdGhpcy5ob3ZlclRvb2x0aXAgPSBuZXcgVG9vbHRpcFBvcFVwKHtcbiAgICAgIG1hcDogdGhpcy5tYXAsXG4gICAgICBvZmZzZXQ6IFsxMCwgMTBdLFxuICAgICAgaG9yaXpvbnRhbDogdHJ1ZSxcbiAgICAgIGNsb3NlYWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICB0aGlzLmhvdmVyVG9vbHRpcC5oaWRlKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmFjdGl2YXRlKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEFkZCBtZXRob2RzIHRvIE1hcEhvdmVyXG4gIGM0Zy5tYXBzLm1pc2MuTWFwSG92ZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMubWlzYy5NYXBIb3Zlci5wcm90b3R5cGUsIHtcblxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthY3RpdmF0ZSBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5saXN0ZW5lcktleSkge1xuICAgICAgICB0aGlzLmxpc3RlbmVyS2V5ID0gdGhpcy5tYXAub24oJ3BvaW50ZXJtb3ZlJywgdGhpcy5nZXRIb3ZlckZ1bmN0aW9uKCksIHRoaXMpO1xuICAgICAgICAvL3RoaXMubWFwLm9uKCdwb2ludGVybW92ZScsIHRoaXMuY2hhbmdlRmVhdHVyZVN0eWxlcygpLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJhY3RpdmF0ZSgpXCJcblxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtkZWFjdGl2YXRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBkZWFjdGl2YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5saXN0ZW5lcktleSkge1xuICAgICAgICBvbC5PYnNlcnZhYmxlLnVuQnlLZXkodGhpcy5saXN0ZW5lcktleSk7XG4gICAgICAgIHRoaXMubGlzdGVuZXJLZXkgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJkZWFjdGl2YXRlKClcIlxuXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2lzQWN0aXZlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBpc0FjdGl2ZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMubGlzdGVuZXJLZXkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSwgLy8gZW5kIG9mIFwiZ2V0U3RhdGUoKVwiXG5cblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbZ2V0SG92ZXJGdW5jdGlvbiBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgZ2V0SG92ZXJGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICB2YXIgaG92ZXJlZCxcbiAgICAgICAgICAgIGNsdXN0ZXJlZCxcbiAgICAgICAgICAgIHRvb2x0aXBDb250ZW50LFxuICAgICAgICAgICAgdG9vbHRpcEhlbHBlcixcbiAgICAgICAgICAgIGZlYXR1cmVzLFxuICAgICAgICAgICAgdG9vbHRpcExlbmd0aCxcbiAgICAgICAgICAgIHJlc29sdXRpb24sXG4gICAgICAgICAgICBjYW52YXMsXG4gICAgICAgICAgICBtYXBEYXRhID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YSxcbiAgICAgICAgICAgIHByb3h5ID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHk7XG5cblxuICAgICAgICBjbHVzdGVyZWQgPSBmYWxzZTtcbiAgICAgICAgaG92ZXJlZCA9IHNlbGYubWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChldmVudC5waXhlbCxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChmZWF0dXJlLCBsYXllcikge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGZlYXR1cmU6IGZlYXR1cmUsXG4gICAgICAgICAgICAgICAgbGF5ZXI6IGxheWVyXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmVzb2x1dGlvbiA9IHNlbGYubWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uKCk7XG5cbiAgICAgICAgaWYgKCFob3ZlcmVkKSB7XG4gICAgICAgICAgc2VsZi5ob3ZlclRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJjYW52YXNcIik7XG4gICAgICAgICAgJChjYW52YXMpLmNzcygnY3Vyc29yJywgJ2RlZmF1bHQnKTtcbiAgICAgICAgICBpZihtYXBEYXRhLmhvdmVyX3BvcHVwcyA9PT0gJzEnICYmIG1hcERhdGEuaG92ZXJfcG9wdXBzX3N0YXkgIT0gJzEnKXtcbiAgICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGM0Zy5tYXBzLmNvbnN0YW50LmNzcy5BQ1RJVkUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZSAmJiBzZWxmLmxhc3RGZWF0dXJlU3R5bGUpIHtcbiAgICAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZS5zZXRTdHlsZShzZWxmLmxhc3RGZWF0dXJlU3R5bGUpO1xuICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cblxuXG4gICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJjYW52YXNcIik7XG4gICAgICAgICQoY2FudmFzKS5jc3MoJ2N1cnNvcicsICdwb2ludGVyJyk7XG5cbiAgICAgICAgaWYgKGhvdmVyZWQuZmVhdHVyZSAmJiB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpKSB7XG4gICAgICAgICAgaWYgKGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbMV0pIHtcbiAgICAgICAgICAgIGNsdXN0ZXJlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgIGhvdmVyZWQuZmVhdHVyZSA9IGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKGhvdmVyZWQuZmVhdHVyZS5nZXRHZW9tZXRyeSgpICYmIGhvdmVyZWQuZmVhdHVyZS5nZXRHZW9tZXRyeSgpIGluc3RhbmNlb2Ygb2wuZ2VvbS5MaW5lU3RyaW5nKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZihob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfbG9jYXRpb25cIikgfHwgKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlICYmIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlLmdldChcImhvdmVyX2xvY2F0aW9uXCIpKSkge1xuICAgICAgICAgICAgaWYgKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlICYmIGhvdmVyZWQuZmVhdHVyZSA9PT0gc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc2V0IGJhY2sgc3R5bGVzIHdoZW4gdGhlIGZlYXR1cmVzIGFyZSBub3QgaG92ZXJlZCBhbnltb3JlXG4gICAgICAgICAgICBpZiAoc2VsZi5sYXN0RmVhdHVyZVN0eWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChob3ZlcmVkLmZlYXR1cmUgIT09IHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5sYXN0RmVhdHVyZVN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUuc2V0U3R5bGUoc2VsZi5sYXN0RmVhdHVyZVN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiQ2hhbmdlZCBiYWNrIGZlYXR1cmUgc3R5bGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGYubGFzdExheWVyU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZS5zZXRTdHlsZShzZWxmLmxhc3RMYXllclN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiQ2hhbmdlZCBiYWNrIGxheWVyLWZlYXR1cmUgc3R5bGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgaWYgKGhvdmVyZWQuZmVhdHVyZSAmJiB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24gJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24oKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlID0gaG92ZXJlZC5mZWF0dXJlO1xuXG4gICAgICAgICAgICAgICAgc2VsZi5sYXN0TGF5ZXJTdHlsZSA9IGhvdmVyZWQubGF5ZXIuZ2V0U3R5bGUoKTtcbiAgICAgICAgICAgICAgICBzZWxmLmxhc3RGZWF0dXJlU3R5bGUgPSBzZWxmLmxhc3RMYXllclN0eWxlKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAvL1RPRE8gZ2V0IG9uaG92ZXIgc3R5bGUgZnJvbSBkYiAodmxsdCBzY2hvbiBpbiBwcm94eSBkcmluPylcbiAgICAgICAgICAgICAgICBpZihob3ZlcmVkLmZlYXR1cmUuZ2V0KCdob3Zlcl9zdHlsZScpICYmIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildKXtcbiAgICAgICAgICAgICAgICAgICAgaWYocHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKV0uZm5TdHlsZUZ1bmN0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyZWQuZmVhdHVyZS5zZXRTdHlsZShGdW5jdGlvbihcImZlYXR1cmVcIixcImRhdGFcIixcIm1hcFwiLHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildLmZuU3R5bGVGdW5jdGlvbikoaG92ZXJlZC5mZWF0dXJlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyZWQuZmVhdHVyZS5zZXRTdHlsZShwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldChcImhvdmVyX3N0eWxlXCIpXS5zdHlsZShob3ZlcmVkLmZlYXR1cmUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaG92ZXJlZC5sYXllciAmJiB0eXBlb2YgaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGhvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgICAgICAgaWYgKGhvdmVyZWQuZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZSA9IGhvdmVyZWQuZmVhdHVyZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlID0gaG92ZXJlZC5sYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpWzBdO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZSA9IHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlLmdldCgnZmVhdHVyZXMnKVswXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLmxhc3RMYXllclN0eWxlID0gaG92ZXJlZC5sYXllci5nZXRTdHlsZSgpO1xuICAgICAgICAgICAgICAgIHNlbGYubGFzdEZlYXR1cmVTdHlsZSA9IHNlbGYubGFzdExheWVyU3R5bGUoc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIGlmKGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2hvdmVyX3N0eWxlJykgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoIXByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJJZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycklkcy5wdXNoKGhvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMoYXJySWRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildLmZuU3R5bGVGdW5jdGlvbil7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3ZlcmVkLmZlYXR1cmUuc2V0U3R5bGUoRnVuY3Rpb24oXCJmZWF0dXJlXCIsXCJkYXRhXCIsXCJtYXBcIixwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldChcImhvdmVyX3N0eWxlXCIpXS5mblN0eWxlRnVuY3Rpb24pKGhvdmVyZWQuZmVhdHVyZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3ZlcmVkLmZlYXR1cmUuc2V0U3R5bGUocHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKV0uc3R5bGUoaG92ZXJlZC5mZWF0dXJlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChob3ZlcmVkICYmIGhvdmVyZWQuZmVhdHVyZSAmJiBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdzdHlsZVVybCcpKSB7XG4gICAgICAgICAgLy9pZiB0aGlzIHByb3BlcnR5IGlzIHNldCwgd2UgaGF2ZSBhIGZlYXR1cmUgdGhhdCBoYXMgbm9uZSBvZiBvdXIgc3R5bGVzID0+IG5vIHRvb2x0aXBcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2F0Y2ggdGhlIGNhc2UgdGhlIGxheWVyIGlzIGEgYmFzZWxheWVyICh2ZWN0b3IgdGlsZXMpXG4gICAgICAgIGlmIChob3ZlcmVkICYmIGhvdmVyZWQubGF5ZXIgJiYgaG92ZXJlZC5sYXllci50eXBlID09PSBcIlZFQ1RPUl9USUxFXCIpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgaG92ZXIgdG9vbHRpcHNcbiAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFjbHVzdGVyZWQgJiYgaG92ZXJlZC5mZWF0dXJlICYmIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nICYmIChob3ZlcmVkLmZlYXR1cmUuZ2V0KCd0b29sdGlwJykgfHwgaG92ZXJlZC5mZWF0dXJlLmdldCgnZ3JhcGhpY1RpdGxlJykpKSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0KCd0b29sdGlwJyk7XG4gICAgICAgICAgaWYgKCF0b29sdGlwQ29udGVudCkge1xuICAgICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdncmFwaGljVGl0bGUnKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0b29sdGlwQ29udGVudCA9PT0gJ29iamVjdCcgJiYgdG9vbHRpcENvbnRlbnQuZWxlbWVudCAmJiB0b29sdGlwQ29udGVudC5lbGVtZW50LmNoaWxkTm9kZXNbMV0pIHtcbiAgICAgICAgICAgIHRvb2x0aXBDb250ZW50ID0gdG9vbHRpcENvbnRlbnQuZWxlbWVudC5jaGlsZE5vZGVzWzFdLmlubmVySFRNTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQFRPRE86IENoZWNrICYgZml4XG4gICAgICAgIH0gZWxzZSBpZiAoaG92ZXJlZC5mZWF0dXJlICYmIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbiAmJlxuICAgICAgICAgICAgdHlwZW9mIGhvdmVyZWQuZmVhdHVyZS5nZXRTdHlsZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24oKSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzICYmXG4gICAgICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24oKShyZXNvbHV0aW9uKV0gJiZcbiAgICAgICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbigpKHJlc29sdXRpb24pXS50b29sdGlwKSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24oKShyZXNvbHV0aW9uKV0udG9vbHRpcDtcbiAgICAgICAgICAvLyBAVE9ETzogQ2hlY2tcbiAgICAgICAgfSBlbHNlIGlmIChob3ZlcmVkLmxheWVyICYmIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24gJiZcbiAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzICYmXG4gICAgICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkoKV0gJiZcbiAgICAgICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSgpXS50b29sdGlwKSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkoKV0udG9vbHRpcDtcbiAgICAgICAgfSBlbHNlIGlmIChob3ZlcmVkLmxheWVyICYmXG4gICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlcyAmJlxuICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbigpKG51bGwsIG51bGwsIDEpXSAmJlxuICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbigpKG51bGwsIG51bGwsIDEpXS50b29sdGlwKSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkobnVsbCwgbnVsbCwgMSldLnRvb2x0aXA7XG4gICAgICAgIH0gZWxzZSBpZiAoaG92ZXJlZC5sYXllciAmJiBob3ZlcmVkLmxheWVyLnRvb2x0aXApIHtcbiAgICAgICAgICB0b29sdGlwQ29udGVudCA9IGhvdmVyZWQubGF5ZXIudG9vbHRpcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2x1c3RlcmVkICYmIGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykpe1xuICAgICAgICAgICAgZmVhdHVyZXMgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpO1xuICAgICAgICAgICAgaWYoZmVhdHVyZXNbMF0uZ2V0KCd0b29sdGlwJykgJiYgZmVhdHVyZXNbMF0uZ2V0KCd0b29sdGlwX2xlbmd0aCcpKXtcbiAgICAgICAgICAgICAgICB0b29sdGlwQ29udGVudCA9IGZlYXR1cmVzWzBdLmdldCgndG9vbHRpcCcpO1xuICAgICAgICAgICAgICAgIHRvb2x0aXBMZW5ndGggPSBwYXJzZUludChmZWF0dXJlc1swXS5nZXQoJ3Rvb2x0aXBfbGVuZ3RoJykpO1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDE7IGk8ZmVhdHVyZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICBpZihmZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKSAmJiBmZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKSAhPSAnJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHRvb2x0aXBDb250ZW50ICsgJywgJyArIGZlYXR1cmVzW2ldLmdldCgndG9vbHRpcCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRvb2x0aXBDb250ZW50Lmxlbmd0aCA+IHRvb2x0aXBMZW5ndGggKyAzKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYodG9vbHRpcENvbnRlbnQgPSB0b29sdGlwQ29udGVudC5zbGljZSgwLCB0b29sdGlwTGVuZ3RoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHRvb2x0aXBDb250ZW50ICsgJy4uLic7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoaG92ZXJlZC5sYXllci50b29sdGlwICYmIGhvdmVyZWQubGF5ZXIudG9vbHRpcF9sZW5ndGgpe1xuICAgICAgICAgICAgICAgIHRvb2x0aXBIZWxwZXIgPSB0b29sdGlwQ29udGVudDtcbiAgICAgICAgICAgICAgICB0b29sdGlwQ29udGVudCA9ICcnO1xuICAgICAgICAgICAgICAgIHRvb2x0aXBMZW5ndGggPSBwYXJzZUludChob3ZlcmVkLmxheWVyLnRvb2x0aXBfbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBmb3IoaSA9IDA7IGk8ZmVhdHVyZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2luZ2xlVG9vbHRpcCA9IHV0aWxzLnJlcGxhY2VBbGxQbGFjZWhvbGRlcnModG9vbHRpcEhlbHBlciwgZmVhdHVyZXNbaV0sIGhvdmVyZWQubGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZihzaW5nbGVUb29sdGlwICE9ICcnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRvb2x0aXBDb250ZW50ID09ICcnKSB0b29sdGlwQ29udGVudCA9IHNpbmdsZVRvb2x0aXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHRvb2x0aXBDb250ZW50ID0gdG9vbHRpcENvbnRlbnQgKyAnLCAnICsgc2luZ2xlVG9vbHRpcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih0b29sdGlwQ29udGVudC5sZW5ndGggPiB0b29sdGlwTGVuZ3RoICszKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYodG9vbHRpcENvbnRlbnQgPSB0b29sdGlwQ29udGVudC5zbGljZSgwLCB0b29sdGlwTGVuZ3RoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHRvb2x0aXBDb250ZW50ICsgJy4uLic7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvb2x0aXBDb250ZW50KSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSB1dGlscy5kZWNvZGVHZW9Kc29uUHJvcGVydHkodG9vbHRpcENvbnRlbnQpO1xuXG4gICAgICAgICAgLy8gcmVwbGFjZSBwbGFjZWhvbGRlcnMgaWYgcG9zc2libGVcbiAgICAgICAgICAgIGlmKGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykpe1xuXG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHV0aWxzLnJlcGxhY2VBbGxQbGFjZWhvbGRlcnModG9vbHRpcENvbnRlbnQsIGhvdmVyZWQuZmVhdHVyZSwgaG92ZXJlZC5sYXllcik7XG5cblxuICAgICAgICAgIGlmICh0b29sdGlwQ29udGVudC50cmltKCkpIHtcbiAgICAgICAgICAgIC8vIHBvcHVwIGNvbmZpZ1xuICAgICAgICAgICAgc2VsZi5ob3ZlclRvb2x0aXAuc2V0UG9zaXRpb24oZXZlbnQuY29vcmRpbmF0ZSk7XG4gICAgICAgICAgICBzZWxmLmhvdmVyVG9vbHRpcC5zZXRDb250ZW50KHRvb2x0aXBDb250ZW50KTtcbiAgICAgICAgICAgIHNlbGYuaG92ZXJUb29sdGlwLnNob3coKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5ob3ZlclRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLmhvdmVyVG9vbHRpcC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYobWFwRGF0YS5ob3Zlcl9wb3B1cHMgPT09ICcxJyAmJiAhY2x1c3RlcmVkICYmIGhvdmVyZWQuZmVhdHVyZSApe1xuICAgICAgICAgIHZhciBwb3B1cEluZm9zID0ge307XG5cbiAgICAgICAgICBpZihob3ZlcmVkLmZlYXR1cmUuZ2V0KCdwb3B1cCcpKSB7XG4gICAgICAgICAgICBwb3B1cEluZm9zID0gaG92ZXJlZC5mZWF0dXJlLmdldCgncG9wdXAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihob3ZlcmVkLmZlYXR1cmUuZ2V0KCdsb2NfbGlua3VybCcpKXtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKGhvdmVyZWQubGF5ZXIgJiYgaG92ZXJlZC5sYXllci5wb3B1cCl7XG4gICAgICAgICAgICBwb3B1cEluZm9zID0gaG92ZXJlZC5sYXllci5wb3B1cDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNvb3JkID0gaG92ZXJlZC5mZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICBpZighY29vcmQgfHwoY29vcmQgJiYgY29vcmRbMF0gJiYgY29vcmRbMF0ubGVuZ3RoKSl7XG4gICAgICAgICAgICAgIHZhciBleHRlbnQgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRFeHRlbnQoKTtcbiAgICAgICAgICAgICAgY29vcmQgPSBzZWxmLm1hcC5nZXRDb29yZGluYXRlRnJvbVBpeGVsKGV2ZW50LnBpeGVsKTtcbiAgICAgICAgICAgICAgY29vcmQgPSBbKGV4dGVudFswXStleHRlbnRbMl0pLzIsKGV4dGVudFsxXStleHRlbnRbM10pLzJdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAucG9wdXAuc2V0UG9zaXRpb24oY29vcmQpO1xuXG4gICAgICAgICAgICBpZiAocG9wdXBJbmZvcy5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJGNvbnRlbnQuaHRtbCgnJyk7XG4gICAgICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLmFkZENsYXNzKGM0Zy5tYXBzLmNvbnN0YW50LmNzcy5BQ1RJVkUpLmFkZENsYXNzKGM0Zy5tYXBzLmNvbnN0YW50LmNzcy5MT0FESU5HKTtcbiAgICAgICAgICAgICAgICBjNGcubWFwcy5wb3B1cC5zcGlubmVyLnNob3coKTtcblxuICAgICAgICAgICAgICAgIGlmIChwb3B1cEluZm9zLmFzeW5jID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm9zO1xuICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gaG92ZXJlZC5mZWF0dXJlO1xuICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5sYXllciA9IGhvdmVyZWQubGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAsIG9ialBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwcm94eS5zZXRQb3B1cChvYmpQb3B1cCwgcHJveHkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHByb3h5LmFwaV9pbmZvd2luZG93X3VybCArICcvJyArIHBvcHVwSW5mb3MuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHVwSW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHBvcHVwSW5mb3MuYXN5bmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGRhdGEuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXA6IHBvcHVwSW5mb3MucG9wdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRpbmdfbGluazogcG9wdXBJbmZvcy5yb3V0aW5nX2xpbmtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9ialBvcHVwID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAuZmVhdHVyZSA9IGhvdmVyZWQuZmVhdHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5sYXllciA9IGhvdmVyZWQubGF5ZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBwb3B1cCBob29rIGZvciBwbHVnaW4gc3BlY2lmaWMgcG9wdXAgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCwgb2JqUG9wdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5LnNldFBvcHVwKG9ialBvcHVwLCBwcm94eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGM0Zy5tYXBzLmNvbnN0YW50LmNzcy5BQ1RJVkUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuXG5cblxuICAgICAgfTtcbiAgICB9LCAvLyBlbmQgb2YgXCJnZXRIb3ZlckZ1bmN0aW9uKClcIlxuXG4gICAgY2hhbmdlRmVhdHVyZVN0eWxlczogZnVuY3Rpb24gKCkge1xuICAgICAgLy9UT0RPOiBjaGFuZ2Ugc3R5bGUgb2YgZmVhdHVyZXMgd2hpY2ggYXJlIGhvdmVyZWQgYW5kIGhhdmUgdGhlIG9wdGlvbiB0byBjaGFuZ2Ugc3R5bGUgb24gaG92ZXIgZW5hYmxlZFxuICAgIH1cblxuICB9KTsgLy8gRW5kIG9mIFwiYWRkIG1ldGhvZHMgdG8gVG9vbHRpcFBvcFVwXCJcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgTWFwSG92ZXIgPSB0aGlzLmM0Zy5tYXBzLm1pc2MuTWFwSG92ZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1taXNjLW1hcGhvdmVyLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5taXNjID0gdGhpcy5jNGcubWFwcy5taXNjIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBAVE9ET1xuICAgKiBbU3Bpbm5lciBkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29wdGlvbnMgQ29udHJvbCBvcHRpb25zLlxuICAgKi9cbiAgYzRnLm1hcHMubWlzYy5TcGlubmVyID0gZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICB2YXIgb3B0aW9ucyxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBzcGlubmVyU3BhbjtcblxuICAgIG9wdGlvbnMgPSBvcHRfb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBjbGFzc05hbWU6ICcnLFxuICAgICAgdGFyZ2V0OiAnLicgKyBjc3NDb25zdGFudHMuT0xfVklFV1BPUlRcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGlmIChvcHRpb25zLmNsYXNzTmFtZSkge1xuICAgICAgb3B0aW9ucy5jbGFzc05hbWUgPSAnICcgKyBvcHRpb25zLmNsYXNzTmFtZTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlNQSU5ORVIgKyBvcHRpb25zLmNsYXNzTmFtZSArICcgJyArIGNzc0NvbnN0YW50cy5ISURFO1xuICAgICQob3B0aW9ucy50YXJnZXQpLmFwcGVuZCh0aGlzLmVsZW1lbnQpO1xuXG4gICAgc3Bpbm5lclNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgc3Bpbm5lclNwYW4uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyAnICcgKyBjc3NDb25zdGFudHMuQU5JTUFUSU9OX1NQSU47XG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHNwaW5uZXJTcGFuKTtcblxuICAgIHRoaXMuYWRkaXRpb25hbEFjdGl2YXRpb25Db3VudGVyID0gMDtcblxuICB9O1xuXG4gIC8vIEFkZCBtZXRob2RzIHRvIHNwaW5uZXJcbiAgYzRnLm1hcHMubWlzYy5TcGlubmVyLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLm1pc2MuU3Bpbm5lci5wcm90b3R5cGUsIHtcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICogW3Nob3cgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgkKHRoaXMuZWxlbWVudCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkhJREUpKSB7XG4gICAgICAgICQodGhpcy5lbGVtZW50KS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSElERSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFkZGl0aW9uYWxBY3RpdmF0aW9uQ291bnRlciArPSAxO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFtoaWRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoJCh0aGlzLmVsZW1lbnQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5ISURFKSkge1xuICAgICAgICAvL2NvbnNvbGUud2FybignU3Bpbm5lciBpcyBhbHJlYWR5IGhpZGRlbi4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmFkZGl0aW9uYWxBY3RpdmF0aW9uQ291bnRlciA9PT0gMCkge1xuICAgICAgICAgICQodGhpcy5lbGVtZW50KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSElERSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hZGRpdGlvbmFsQWN0aXZhdGlvbkNvdW50ZXIgLT0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfSxcblxuICB9KTsgLy8gRW5kIG9mIFwiYWRkIG1ldGhvZHMgdG8gc3Bpbm5lclwiXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIFNwaW5uZXIgPSB0aGlzLmM0Zy5tYXBzLm1pc2MuU3Bpbm5lcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLW1pc2Mtc3Bpbm5lci5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMubWlzYyA9IHRoaXMuYzRnLm1hcHMubWlzYyB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQFRPRE9cbiAgICogW1Rvb2x0aXBQb3BVcCBkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29wdGlvbnMgQ29udHJvbCBvcHRpb25zLlxuICAgKi9cbiAgYzRnLm1hcHMubWlzYy5Ub29sdGlwUG9wVXAgPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBzZWxmLFxuICAgICAgICBhZGRDbGFzc05hbWUsXG4gICAgICAgIGNsb3NlQnV0dG9uO1xuXG4gICAgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0X29wdGlvbnMgfHwge307XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAvLyBjbGFzc05hbWU6ICcnXG4gICAgICAvLyBjbG9zZUZ1bmN0aW9uOiBudWxsXG4gICAgICAvLyBtYXA6IG51bGxcbiAgICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgICAgY2xvc2VhYmxlOiBmYWxzZSxcbiAgICAgIG9mZnNldDogWzEsIC0xXSxcbiAgICAgIHBvc2l0aW9uOiBbMCwgMF1cbiAgICB9LCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgLy8gcHJlcGFyZSBhZGRpdGlvbmFsIGNsYXNzZXNcbiAgICBhZGRDbGFzc05hbWUgPSAnJztcbiAgICBpZiAodGhpcy5vcHRpb25zLmNsYXNzTmFtZSkge1xuICAgICAgYWRkQ2xhc3NOYW1lID0gJyAnICsgdGhpcy5vcHRpb25zLmNsYXNzTmFtZTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5ob3Jpem9udGFsKSB7XG4gICAgICBhZGRDbGFzc05hbWUgKz0gJyAnICsgY3NzQ29uc3RhbnRzLkhPUklaT05UQUw7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VhYmxlKSB7XG4gICAgICBhZGRDbGFzc05hbWUgKz0gJyAnICsgY3NzQ29uc3RhbnRzLkNMT1NFQUJMRTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlRPT0xUSVBfUE9QVVAgKyBhZGRDbGFzc05hbWU7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlYWJsZSkge1xuICAgICAgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGNsb3NlQnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLlBPUFVQX0NMT1NFO1xuICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uKTtcblxuICAgICAgJChjbG9zZUJ1dHRvbikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRlbnRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50Q29udGFpbmVyKTtcblxuICAgIHRoaXMub3ZlcmxheSA9IG5ldyBvbC5PdmVybGF5KHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgIGluc2VydEZpcnN0OiBmYWxzZSxcbiAgICAgIG9mZnNldDogdGhpcy5vcHRpb25zLm9mZnNldCxcbiAgICAgIHBvc2l0aW9uaW5nOiAnYm90dG9tLWxlZnQnXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLm1hcCkge1xuICAgICAgdGhpcy5vcHRpb25zLm1hcC5hZGRPdmVybGF5KHRoaXMub3ZlcmxheSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wb3NpdGlvbikge1xuICAgICAgdGhpcy5vdmVybGF5LnNldFBvc2l0aW9uKHRoaXMub3B0aW9ucy5wb3NpdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIC8vIEFkZCBtZXRob2RzIHRvIFRvb2x0aXBQb3BVcFxuICBjNGcubWFwcy5taXNjLlRvb2x0aXBQb3BVcC5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5taXNjLlRvb2x0aXBQb3BVcC5wcm90b3R5cGUsIHtcblxuICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5jbG9zZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5jbG9zZUZ1bmN0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXAucmVtb3ZlT3ZlcmxheSh0aGlzLm92ZXJsYXkpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFtzaG93IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoJCh0aGlzLmVsZW1lbnQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5ISURFKSkge1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkhJREUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFtoaWRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoISQodGhpcy5lbGVtZW50KS5oYXNDbGFzcyhjc3NDb25zdGFudHMuSElERSkpIHtcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5ISURFKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQFRPRE9cbiAgICAgKiBbZ2V0Q29udGVudCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqL1xuICAgIGdldENvbnRlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRDb250YWluZXIuaW5uZXJIVE1MO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFtnZXRQb3NpdGlvbiBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqL1xuICAgIGdldFBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vdmVybGF5LmdldFBvc2l0aW9uKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICogW3NldENvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBjb250ZW50ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2V0Q29udGVudDogZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgIHRoaXMuY29udGVudENvbnRhaW5lci5pbm5lckhUTUwgPSBjb250ZW50O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFtzZXRQb3NpdGlvbiBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIGNvb3JkaW5hdGVzICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2V0UG9zaXRpb246IGZ1bmN0aW9uIChjb29yZGluYXRlcykge1xuICAgICAgdGhpcy5vdmVybGF5LnNldFBvc2l0aW9uKGNvb3JkaW5hdGVzKTtcbiAgICB9XG5cbiAgfSk7IC8vIEVuZCBvZiBcImFkZCBtZXRob2RzIHRvIFRvb2x0aXBQb3BVcFwiXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIFRvb2x0aXBQb3BVcCA9IHRoaXMuYzRnLm1hcHMubWlzYy5Ub29sdGlwUG9wVXA7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1taXNjLXRvb2x0aXBwb3B1cC5qcyIsIi8qXG4gIEs/c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ24gMjAxMSAtIDIwMThcbiBAYXV0aG9yICAgICBLP3N0ZW5zY2htaWVkZSA8aHR0cDovL3d3dy5rdWVzdGVuc2NobWllZGUuZGU+XG4gQGxpY2Vuc2UgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL2xncGwtMy4wLmh0bWxcbiovXG5leHBvcnQgZnVuY3Rpb24gdHJpbShiKXtyZXR1cm4gYi5yZXBsYWNlKC9eXFxzKy8sXCJcIikucmVwbGFjZSgvXFxzKyQvLFwiXCIpfVxuZXhwb3J0IGZ1bmN0aW9uIGlzTW9iaWxlKCl7cmV0dXJuLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgKGNlfHBob25lKXx4ZGF8eGlpbm98YW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnR8fG5hdmlnYXRvci52ZW5kb3J8fHdpbmRvdy5vcGVyYSl8fC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLnRlc3QoKG5hdmlnYXRvci51c2VyQWdlbnR8fG5hdmlnYXRvci52ZW5kb3J8fFxuICAgIHdpbmRvdy5vcGVyYSkuc3Vic3RyKDAsNCkpfWZ1bmN0aW9uIHRyYW5zbGF0ZShiKXt2YXIgYT10cmltKGIpO3JldHVyblwieWVzXCI9PWF8fFwiWWVzXCI9PWE/XCJKYVwiOlwibm9cIj09YT9cIk5laW5cIjpcIk5vXCI9PWE/XCJuZWluXCI6XCJsaW1pdGVkXCI9PWE/XCJFaW5nZXNjaHJcXHUwMGU0bmt0XCI6XCJkZXNpZ25hdGVkXCI9PWE/XCJKYVwiOlwid29vZFwiPT1hP1wiSG9selwiOlwibWV0YWxcIj09YT9cIk1ldGFsbFwiOlwiY29uY3JldGVcIj09YT9cIkJldG9uXCI6XCJwbGFzdGljXCI9PWE/XCJQbGFzdGlrXCI6XCJzdG9uZVwiPT1hP1wiU3RlaW5cIjpcInN0ZWVsXCI9PWE/XCJTdGFobFwiOlwiYnJpY2tcIj09YT9cIlppZWdlbFwiOlwicmVpbmZvcmNlZF9jb25jcmV0ZVwiPT1hP1wiU3RhaGxiZXRvblwiOlwibWFzb25yeVwiPT1hP1wiTWF1ZXJ3ZXJrXCI6Yn1cbmV4cG9ydCB2YXIgZm5TdGFuZGFyZEluZm9Qb3B1cD1mdW5jdGlvbihiLGEpe3ZhciBjPWIuZ2V0UHJvcGVydGllcygpLGQ9XCJcIixlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXt2YXIgZj1hLmNhbGwoYilbMF0uZ2V0SW1hZ2UoKTtpZihmKXRyeXtlPWYuZ2V0U3JjKCl9Y2F0Y2goZyl7ZT1cIlwifX1lbHNle2Y9YS5nZXRJbWFnZSgpO3RyeXtlPWYuZ2V0U3JjKCl9Y2F0Y2goaCl7ZT1cIlwifX1kKz1mbkhlYWRlcihjLGUpO2QrPWZuQ29udGVudChjKTtkKz1mbkZvb3RlcihjLGIuZ2V0KFwib3NtX3R5cGVcIikrXCIvXCIrYi5nZXRJZCgpKTtyZXR1cm4nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF90ZXh0XCI+JytkK1wiPC9kaXY+XCJ9LGZuUmVkdWNlZEluZm9Qb3B1cD1mdW5jdGlvbihiLGEpe3ZhciBjPWIuZ2V0UHJvcGVydGllcygpLGQ9XCJcIixlPSExLGY7Zj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoYilbMF0uZ2V0SW1hZ2UoKS5nZXRTcmMoKTphLmdldEltYWdlKCkuZ2V0U3JjKCk7aWYoXCJyZXN0YXVyYW50XCI9PVxuICAgIGMuYW1lbml0eXx8XCJwdWJcIj09Yy5hbWVuaXR5fHxcImJpZXJnYXJ0ZW5cIj09Yy5hbWVuaXR5KWU9ITA7XCJob3RlbFwiPT1jLnRvdXJpc20mJihlPSEwKTtcImd1ZXN0X2hvdXNlXCI9PWMudG91cmlzbSYmKGU9ITApO1wiY2hhbGV0XCI9PWMudG91cmlzbSYmKGU9ITApO1wiaG9zdGVsXCI9PWMudG91cmlzbSYmKGU9ITApO1wiYWxwaW5lX2h1dFwiPT1jLnRvdXJpc20mJihlPSEwKTtpZihcImFydHdvcmtcIj09Yy50b3VyaXNtfHxcImFydHdvcmtcIj09Yy5hbWVuaXR5KWU9ITA7aWYoXCJtdXNldW1cIj09Yy50b3VyaXNtfHxcIm11c2V1bVwiPT1jLmFtZW5pdHkpZT0hMDtcImNpbmVtYVwiPT1jLmFtZW5pdHkmJihlPSEwKTtcInRoZWF0cmVcIj09Yy5hbWVuaXR5JiYoZT0hMCk7aWYoXCJhdHRyYWN0aW9uXCI9PWMuYW1lbml0eXx8XCJmb3VudGFpblwiPT1jLmFtZW5pdHl8fFwibW9udW1lbnRcIj09Yy5oaXN0b3JpY3x8XCJjaXR5X2dhdGVcIj09Yy5oaXN0b3JpY3x8XCJydWluc1wiPT1jLmhpc3RvcmljfHxcImNhc3RsZVwiPT1jLmhpc3RvcmljfHxcbiAgICBcImF0dHJhY3Rpb25cIj09Yy50b3VyaXNtKWU9ITA7XCJwbGF5Z3JvdW5kXCI9PWMubGVpc3VyZSYmKGU9ITApO2MuYWVyaWFsd2F5JiYoZT0hMCk7aWYoXCJzd2ltbWluZ19wb29sXCI9PWMuYW1lbml0eXx8XCJzd2ltbWluZ19wb29sXCI9PWMubGVpc3VyZXx8XCJzd2ltbWluZ1wiPT1jLnNwb3J0KWU9ITA7XCJzdGF0aW9uXCI9PWMucmFpbHdheSYmKGU9ITApO1wic3dpbW1pbmdcIj09Yy5zcG9ydCYmKGU9ITApO1wic3dpbW1pbmdfcG9vbFwiPT1jLmxlaXN1cmUmJihlPSEwKTtcInN3aW1taW5nX3Bvb2xcIj09Yy5hbWVuaXR5JiYoZT0hMCk7XCJ3YXRlcnBhcmtcIj09Yy5sZWlzdXJlJiYoZT0hMCk7Yy53YXRlcl9wYXJrJiYoZT0hMCk7XCJzcG9ydHNfY2VudHJlXCI9PWMubGVpc3VyZSYmKGU9ITApO3N3aXRjaChlKXtjYXNlICExOmQrPWZuSGVhZGVyKGMsZik7ZCs9Zm5Db250ZW50KGMpO2QrPWZuRm9vdGVyKGMsYi5nZXQoXCJvc21fdHlwZVwiKStcIi9cIitiLmdldElkKCkpO2JyZWFrO2Nhc2UgITA6ZCs9Zm5IZWFkZXIoYyxcbiAgICBmKX1yZXR1cm4nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF90ZXh0XCI+JytkK1wiPC9kaXY+XCJ9O1xuZXhwb3J0IGZ1bmN0aW9uIGZuSGVhZGVyKGIsYSl7dmFyIGM9XCJcIixkPVwiMzJweFwiO2EmJi0xIT1hLmluZGV4T2YoXCJpY29uX21hcGNpbFwiKSYmKGQ9XCIyNTBweFwiLGE9YS5yZXBsYWNlKFwiaWNvbl9tYXBjaWxcIixcImxvZ29fbWFwY2lsXCIpKTtpZihiLm5hbWV8fGJbXCJwaXN0ZTpuYW1lXCJdfHxiW1wieG1hczpuYW1lXCJdfHxiW1wieG1hczpsb2NhdGlvblwiXSl7aWYoYi5uYW1lKXZhciBlPWIubmFtZTtiW1wicGlzdGU6bmFtZVwiXSYmKGU9YltcInBpc3RlOm5hbWVcIl0pO2JbXCJ4bWFzOm5hbWVcIl0mJihlPWJbXCJ4bWFzOm5hbWVcIl0pO2JbXCJ4bWFzOmxvY2F0aW9uXCJdJiYoZT1iW1wieG1hczpsb2NhdGlvblwiXSk7Yys9YT8nPGltZyBzcmM9XCInK2ErJ1wiIHdpZHRoPVwiJytkKydcIiBuYW1lPVwiJytlKydcIiBhbHQ9XCInK2UrJ1wiPjxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfaGVhZGVyX2ZlYXR1cmVuYW1lXCI+JytlK1wiPC9kaXY+XCI6JzxuYW1lPVwiJytlKydcIiBhbHQ9XCInK2UrJ1wiPjxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfaGVhZGVyX2ZlYXR1cmVuYW1lXCI+JytcbiAgICBlK1wiPC9kaXY+XCJ9ZWxzZSBhJiYoYys9JzxpbWcgc3JjPVwiJythKydcIiB3aWR0aD1cIicrZCsnXCIgbmFtZT1cIicrYSsnXCIgYWx0PVwiJythKydcIj4nKTtjKz1mbkdldFRyYW5zbGF0ZV9UeXBlKGIpO3JldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2hlYWRlclwiPicrYytcIjwvZGl2PlwifVxuZXhwb3J0IGZ1bmN0aW9uIGZuRm9vdGVyKGIsYSl7dmFyIGM9XCJcIixkPSExO2JbXCJhZGRyOmhvdXNlbmFtZVwiXSYmKGMrPVwiR2ViXFx1MDBlNHVkZW5hbWU6IFwiK2JbXCJhZGRyOmhvdXNlbmFtZVwiXStcIjxici8+XCIsZD0hMCk7YltcImFkZHI6Zmxvb3JcIl0/KGMrPVwiRXRhZ2U6IFwiK2JbXCJhZGRyOmZsb29yXCJdK1wiPGJyLz5cIixkPSEwKTpiW1wiYWRkcjpsZXZlbFwiXSYmKGMrPVwiRXRhZ2U6IFwiK2JbXCJhZGRyOmxldmVsXCJdK1wiPGJyLz5cIixkPSEwKTtiW1wiYWRkcjpzdHJlZXRcIl0mJihjKz1iW1wiYWRkcjpzdHJlZXRcIl0sYz1iW1wiYWRkcjpob3VzZW51bWJlclwiXT9jKyhcIiBcIitiW1wiYWRkcjpob3VzZW51bWJlclwiXStcIjxici8+XCIpOmMrXCI8YnIvPlwiLGQ9ITApO2JbXCJhZGRyOnBvc3Rjb2RlXCJdJiYoYys9YltcImFkZHI6cG9zdGNvZGVcIl0rXCIgXCIpO2JbXCJhZGRyOmNpdHlcIl0mJihjKz1iW1wiYWRkcjpjaXR5XCJdK1wiPGJyLz5cIixkPSEwKTtpZihiLnNxa20paWYoYi5zcWttPVwiXCIrYi5zcWttLDM8Yi5zcWttLmxlbmd0aCl7dmFyIGU9XG4gICAgYi5zcWttLmxlbmd0aCUzLGY9MDxlP2Iuc3FrbS5zdWJzdHJpbmcoMCxlKTpcIlwiO2ZvcihpPTA7aTxNYXRoLmZsb29yKGIuc3FrbS5sZW5ndGgvMyk7aSsrKWY9MD09ZSYmMD09aT9mK2Iuc3FrbS5zdWJzdHJpbmcoZSszKmksZSszKmkrMyk6ZisoXCIuXCIrYi5zcWttLnN1YnN0cmluZyhlKzMqaSxlKzMqaSszKSk7Yys9XCJGbFxcdTAwZTRjaGU6IFwiK2YrXCIgS21cXHUwMGIyPGJyLz5cIn1lbHNlIGMrPVwiRmxcXHUwMGU0Y2hlIFwiK2Iuc3FrbStcIjxici8+XCI7YltcImNvbnRhY3Q6cGhvbmVcIl0mJihjPWlzTW9iaWxlKCk/YysoJ1RlbGVmb246IDxhIGhyZWY9XCJ0ZWw6JytiW1wiY29udGFjdDpwaG9uZVwiXSsnXCI+JytiW1wiY29udGFjdDpwaG9uZVwiXStcIjwvYT48YnIvPlwiKTpjKygnVGVsZWZvbjogPGEgaHJlZj1cImNhbGx0bzonK2JbXCJjb250YWN0OnBob25lXCJdKydcIj4nK2JbXCJjb250YWN0OnBob25lXCJdK1wiPC9hPjxici8+XCIpLGQ9ITApO2IucGhvbmUmJihjPWlzTW9iaWxlKCk/YysoJ1RlbGVmb246IDxhIGhyZWY9XCJ0ZWw6JytcbiAgICBiLnBob25lKydcIj4nK2IucGhvbmUrXCI8L2E+PGJyLz5cIik6YysoJ1RlbGVmb246IDxhIGhyZWY9XCJjYWxsdG86JytiLnBob25lKydcIj4nK2IucGhvbmUrXCI8L2E+PGJyLz5cIiksZD0hMCk7YltcImNvbnRhY3Q6ZmF4XCJdPyhjKz1cIlRlbGVmYXg6IFwiK2JbXCJjb250YWN0OmZheFwiXStcIjxici8+XCIsZD0hMCk6Yi5mYXgmJihjKz1cIlRlbGVmYXg6IFwiK2IuZmF4K1wiPGJyLz5cIixkPSEwKTtiW1wiY29udGFjdDplbWFpbFwiXT8oYys9J0UtTWFpbC1BZHJlc3NlOiA8YSBocmVmPVwibWFpbHRvOicrYltcImNvbnRhY3Q6ZW1haWxcIl0rJ1wiPicrYltcImNvbnRhY3Q6ZW1haWxcIl0rXCI8L2E+PGJyLz5cIixkPSEwKTpiLmVtYWlsJiYoYys9J0UtTWFpbC1BZHJlc3NlOiA8YSBocmVmPVwibWFpbHRvOicrYi5lbWFpbCsnXCI+JytiLmVtYWlsK1wiPC9hPjxici8+XCIsZD0hMCk7ZCYmKGMrPVwiPGJyLz5cIik7aWYoYi5vcGVuaW5nX2hvdXJzKXtkPWIub3BlbmluZ19ob3Vycztmb3IoZT0wOzA9PWV8fDA8ZC5pbmRleE9mKFwiO1wiKTspZD1cbiAgICBkLnJlcGxhY2UoXCJQSFwiLFwiRlRcIiksZD1kLnJlcGxhY2UoXCJUdVwiLFwiRGlcIiksZD1kLnJlcGxhY2UoXCJXZVwiLFwiTWlcIiksZD1kLnJlcGxhY2UoXCJUaFwiLFwiRG9cIiksZD1kLnJlcGxhY2UoXCJTdVwiLFwiU29cIiksZD1kLnJlcGxhY2UoXCJNYXJcIixcIk1cXHUwMGU0clwiKSxkPWQucmVwbGFjZShcIk1heVwiLFwiTWFpXCIpLGQ9ZC5yZXBsYWNlKFwiT2N0XCIsXCJPa3RcIiksZD1kLnJlcGxhY2UoXCJEZWNcIixcIkRlelwiKSxkPWQucmVwbGFjZSgnXCJQbGVhc2UgbWFrZSBhIHJlc2VydmF0aW9uXCInLCdcIkJpdHRlIHZlcmVpbmJhcmVuIFNpZSBlaW5lbiBUZXJtaW5cIicpLGQ9ZC5yZXBsYWNlKFwib2ZmXCIsXCJhdXNnZW5vbW1lblwiKSwwPGUmJihkPWQucmVwbGFjZShcIjtcIixcIjxici8+XCIpKSxlKys7Yys9J1xcdTAwZDZmZm51bmdzemVpdGVuOiA8YnIvPjxkaXYgY2xhc3M9XCJjNGdfb3Blbl90ZXh0XCI+JytkK1wiPC9kaXY+XCI7Yz0wPGQuaW5kZXhPZihcIkZUXCIpP2MrXCIoRlQgPSBGZWllcnRhZyk8YnIvPlwiOmMrXCI8YnIvPlwifWlmKGJbXCJ4bWFzOm9wZW5pbmdfaG91cnNcIl0pe2Q9XG4gICAgYltcInhtYXM6b3BlbmluZ19ob3Vyc1wiXTtmb3IoZT0wOzA9PWV8fDA8ZC5pbmRleE9mKFwiO1wiKTspZD1kLnJlcGxhY2UoXCJQSFwiLFwiRlRcIiksZD1kLnJlcGxhY2UoXCJUdVwiLFwiRGlcIiksZD1kLnJlcGxhY2UoXCJXZVwiLFwiTWlcIiksZD1kLnJlcGxhY2UoXCJUaFwiLFwiRG9cIiksZD1kLnJlcGxhY2UoXCJTdVwiLFwiU29cIiksZD1kLnJlcGxhY2UoXCJNYXJcIixcIk1cXHUwMGU0clwiKSxkPWQucmVwbGFjZShcIk1heVwiLFwiTWFpXCIpLGQ9ZC5yZXBsYWNlKFwiT2N0XCIsXCJPa3RcIiksZD1kLnJlcGxhY2UoXCJEZWNcIixcIkRlelwiKSwwPGUmJihkPWQucmVwbGFjZShcIjtcIixcIjxici8+XCIpKSxlKys7Yys9J1xcdTAwZDZmZm51bmdzemVpdGVuOiA8YnIvPjxkaXYgY2xhc3M9XCJjNGdfb3Blbl90ZXh0XCI+JytkK1wiPC9kaXY+XCI7Yz0wPGQuaW5kZXhPZihcIkZUXCIpP2MrXCIoRlQgPSBGZWllcnRhZyk8YnIvPlwiOmMrXCI8YnIvPlwifWJbXCJ4bWFzOnVybFwiXSYmKGQ9XCJcIixkPWJbXCJ4bWFzOnVybFwiXSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLFxuICAgIDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHA6Ly9cIitkKSxjKz0nV2Vic2l0ZTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+TGluayB6dXIgV2Vic2l0ZTwvYT48YnIvPicpO2JbXCJjb250YWN0OndlYnNpdGVcIl0/KGQ9YltcImNvbnRhY3Q6d2Vic2l0ZVwiXSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHA6Ly9cIitkKSxjKz0nV2Vic2l0ZTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+TGluayB6dXIgV2Vic2l0ZTwvYT48YnIvPicpOmIud2Vic2l0ZSYmKGQ9Yi53ZWJzaXRlLHRyaW0oZCksLTE9PWQuaW5kZXhPZihcImh0dHBzOi8vXCIsMCkmJi0xPT1kLmluZGV4T2YoXCJodHRwOi8vXCIsMCkmJihkPVwiaHR0cDovL1wiK2QpLGMrPSdXZWJzaXRlOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rIHp1ciBXZWJzaXRlPC9hPjxici8+Jyk7Yi53aWtpcGVkaWEmJlxuKGQ9Yi53aWtpcGVkaWEsdHJpbShkKSwtMT09ZC5pbmRleE9mKFwiaHR0cHM6Ly9cIiwwKSYmLTE9PWQuaW5kZXhPZihcImh0dHA6Ly9cIiwwKSYmKGQ9XCJodHRwczovL3dpa2lwZWRpYS5vcmcvd2lraS9cIitkKSxjKz0nV2lraXBlZGlhOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rIHp1IFdpa2lwZWRpYTwvYT48YnIvPicpO2Iud2lraW1lZGlhX2NvbW1vbnMmJihkPWIud2lraW1lZGlhX2NvbW1vbnMsdHJpbShkKSwtMT09ZC5pbmRleE9mKFwiaHR0cHM6Ly9cIiwwKSYmLTE9PWQuaW5kZXhPZihcImh0dHA6Ly9cIiwwKSYmKGQ9XCJodHRwczovL2NvbW1vbnMud2lraW1lZGlhLm9yZy93aWtpL1wiK2QpLGMrPSdXaWtpbWVkaWE6IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPkxpbmsgenUgV2lraW1lZGlhPC9hPjxici8+Jyk7YltcImNvbnRhY3Q6d2ViY2FtXCJdJiYoZD1iW1wiY29udGFjdDp3ZWJjYW1cIl0sdHJpbShkKSwtMT09ZC5pbmRleE9mKFwiaHR0cHM6Ly9cIiwwKSYmXG4tMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHA6Ly9cIitkKSxjKz0nV2ViY2FtOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rIHp1ciBXZWJjYW08L2E+PGJyLz4nKTtiLmltYWdlJiYoYys9JzxpbWcgc3JjPVwiJytiLmltYWdlKydcIiB3aWR0aD1cIjIwMHB4XCIgbmFtZT1cIicrYi5uYW1lKydcIiBhbHQ9XCInK2IubmFtZSsnXCI+PGJyLz4nKTtkPVwiXCI7Yi5pbnRlcm5ldF9hY2Nlc3MmJihkKz1cIkludGVybmV0enVncmlmZjogXCIrdHJhbnNsYXRlKGIuaW50ZXJuZXRfYWNjZXNzKStcIjxici8+XCIpO2JbXCJpbnRlcm5ldF9hY2Nlc3M6ZmVlXCJdJiYoZCs9XCJJbnRlcm5ldCBHZWJcXHUwMGZjaHI6IFwiK3RyYW5zbGF0ZShiW1wiaW50ZXJuZXRfYWNjZXNzOmZlZVwiXSkrXCI8YnIvPlwiKTtiW1wid2lmaV9hY2Nlc3M6b3BlcmF0b3JcIl0mJihkKz1cIndpZmkgQmV0cmVpYmVyOiBcIitiW1wid2lmaV9hY2Nlc3M6b3BlcmF0b3JcIl0rXCI8YnIvPlwiKTtiW1wid2lmaV9hY2Nlc3M6dGVjaG5vbG9neVwiXSYmXG4oZCs9XCJ3aWZpIFRlY2hub2xvZ2llOiBcIitiW1wid2lmaV9hY2Nlc3M6dGVjaG5vbG9neVwiXStcIjxici8+XCIpO2JbXCJ3aWZpX2FjY2Vzczpzc2lkXCJdJiYoZCs9XCJ3aWZpIHNzaWQ6IFwiK2JbXCJ3aWZpX2FjY2Vzczpzc2lkXCJdK1wiPGJyLz5cIik7XCJcIiE9ZCYmKGMrPSdJbnRlcm5ldHp1Z2FuZyB2b3JoYW5kZW48YnIvPjxkaXYgY2xhc3M9XCJjNGdfc2hvcF9pbnRlcm5ldF9hY2Nlc3NcIj4nK2QrXCI8L2Rpdj48YnIvPlwiKTtiLndoZWVsY2hhaXImJihjKz1cInJvbGxzdHVobGdlZWlnbmV0OiBcIit0cmFuc2xhdGUoYi53aGVlbGNoYWlyKStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOmRlc2NyaXB0aW9uXCJdJiYoYys9XCJCZXNjaHJlaWJ1bmc6IFwiK2JbXCJ3aGVlbGNoYWlyOmRlc2NyaXB0aW9uXCJdK1wiPGJyLz5cIik7YltcIndoZWVsY2hhaXI6ZW50cmFuY2Vfd2lkdGhcIl0mJihjKz1cIkJyZWl0ZSBkZXMgRWluZ2FuZ3MgaW4gQ006IFwiK2JbXCJ3aGVlbGNoYWlyOmVudHJhbmNlX3dpZHRoXCJdK1wiPGJyLz5cIik7YltcIndoZWVsY2hhaXI6c3RlcF9oZWlnaHRcIl0mJlxuKGMrPVwiSFxcdTAwZjZoZSBkZXIgU3R1ZmUgYW0gRWluZ2FuZyBpbiBDTTogXCIrYltcIndoZWVsY2hhaXI6c3RlcF9oZWlnaHRcIl0rXCI8YnIvPlwiKTtiW1wid2hlZWxjaGFpcjpyb29tc1wiXSYmKGMrPVwiQW56YWhsIHJvbGxzdHVobGdlcmVjaHRlciBSXFx1MDBlNHVtZTogXCIrYltcIndoZWVsY2hhaXI6cm9vbXNcIl0rXCI8YnIvPlwiKTtiW1wid2hlZWxjaGFpcjpwbGFjZXNcIl0mJihjKz1cIkFuemFobCBkZXIgUm9sbHN0dWhscGxcXHUwMGU0dHplOiBcIitiW1wid2hlZWxjaGFpcjpwbGFjZXNcIl0rXCI8YnIvPlwiKTtiW1wiY2VudDpwbGFjZXNcIl0mJihjKz1cIkFuemFobCBkZXIgUm9sbHN0dWhscGxcXHUwMGU0dHplOiBcIitiW1wid2hlZWxjaGFpcjpwbGFjZXNcIl0rXCI8YnIvPlwiKTtiW1wicmFtcDp3aGVlbGNoYWlyXCJdJiYoYys9XCJSYW1wZSBmXFx1MDBmY3IgUm9sbHN0dWhsZmFocmVyOiBcIitiW1wicmFtcDp3aGVlbGNoYWlyXCJdK1wiPGJyLz5cIik7YltcImNhcGFjaXR5OmRpc2FibGVkXCJdJiYoYys9XCJCZWhpbmRlcnRlbnBhcmtwbFxcdTAwZTR0emU6IFwiK1xuICAgIHRyYW5zbGF0ZShiW1wiY2FwYWNpdHk6ZGlzYWJsZWRcIl0pK1wiPGJyLz5cIik7YltcInRvaWxldHM6d2hlZWxjaGFpclwiXSYmKGMrPVwiQmVoaW5kZXJkZW5nZXJlY2h0ZSBUb2lsZXR0ZTogXCIrdHJhbnNsYXRlKGJbXCJ0b2lsZXRzOndoZWVsY2hhaXJcIl0pK1wiPGJyLz5cIik7Yi5jZW50cmFsa2V5JiYoYys9XCJaZW50cmFsc2NobFxcdTAwZmNzc2VsOiBcIitiLmNlbnRyYWxrZXkrXCI8YnIvPlwiKTtiLm5vdGUmJihjKz1iLm5vdGUrXCI8YnIvPlwiKTtiLmRlc2NyaXB0aW9uJiYoYys9Yi5kZXNjcmlwdGlvbitcIjxici8+XCIpO2Iub3BlcmF0b3ImJihjKz1cIkJldHJlaWJlcjogXCIrYi5vcGVyYXRvcitcIjxici8+XCIpO2IucmVmJiYoYys9XCJSZWZlcmVuejogXCIrYi5yZWYrXCI8YnIvPlwiKTtcInllc1wiPT1iLmxpdCYmKGMrPVwiRGllc2VzIE9iamVrdCBpc3QgYmVsZXVjaHRldC48YnIvPlwiKTtiLnNob3AmJihkPVwiXCIsYi5icmFuZCYmKGQrPVwiTWFya2VuemVpY2hlbjogXCIrYi5icmFuZCtcIjxici8+XCIpLGIuc2VsbHMmJlxuKGQrPVwiVmVya2F1ZnM6IFwiK2Iuc2VsbHMrXCI8YnIvPlwiKSxiLm9yaWdpbiYmKGQrPVwiSGVya3VuZnRzbFxcdTAwZTRuZGVyOiBcIitiLm9yaWdpbitcIjxici8+XCIpLFwieWVzXCI9PWIud2hvbGVzYWxlJiYoZCs9XCJHcm9cXHUwMGRmaFxcdTAwZTRuZGxlcjogSmE8YnIvPlwiKSxcIlwiIT1kJiYoYys9J1dlaXRlcmUgQW5nYWJlbiB6dW0gU2hvcDogPGJyLz48ZGl2IGNsYXNzPVwiYzRnX3Nob3BfdGV4dFwiPicrZCtcIjwvZGl2Pjxici8+XCIpKTthJiYoZD1hLHRyaW0oZCksZD1kLnJlcGxhY2UoL1xcLi8sXCIvXCIpLGM9YytcIjxici8+XCIrKCdPU006ICAgIDxhIGhyZWY9XCJodHRwOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnLycrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+TGluayB6dXIgT3BlblN0cmVldE1hcDwvYT48YnIvPicpKTtyZXR1cm4gYz0nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF9mb290ZXJcIj4nK2MrXCI8L2Rpdj5cIn1cbmV4cG9ydCBmdW5jdGlvbiBmbkdldFRyYW5zbGF0ZV9UeXBlKGIpe3ZhciBhPVwiXCI7aWYoXCJkb2N0b3JzXCI9PWIuYW1lbml0eXx8XCJkb2N0b3JcIj09Yi5oZWFsdGhjYXJlKWErPVwiQXJ6dDxici8+XCI7aWYoXCJob3NwaXRhbFwiPT1iLmFtZW5pdHl8fFwiY2xpbmljXCI9PWIuYW1lbml0eXx8XCJob3NwaXRhbFwiPT1iLmhlYWx0aGNhcmV8fFwiY2xpbmljXCI9PWIuaGVhbHRoY2FyZSlhPVwieWVzXCI9PWIuZW1lcmdlbmN5P2ErXCJLcmFua2VuaGF1cyBtaXQgTm90YXVmbmFobWU8YnIvPlwiOmErXCJLcmFua2VuaGF1czxici8+XCI7XCJkZW50aXN0XCI9PWIuYW1lbml0eSYmKGErPVwiWmFobmFyenQ8YnIvPlwiKTtpZihcInBoYXJtYWN5XCI9PWIuYW1lbml0eXx8XCJwaGFybWFjeVwiPT1iW1wiaGVhbHRoX2ZhY2lsaXR5OnR5cGVcIl0pYSs9XCJBcG90aGVrZTxici8+XCI7aWYoXCJwaHlzaW90aGVyYXBpc3RcIj09Yi5oZWFsdGhjYXJlfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6cGh5c2lvdGhlcmFweVwiXSlhKz1cIlBoeXNpb3RoZXJhcGV1dDxici8+XCI7XG4gICAgaWYoXCJvY2N1cGF0aW9uYWxfdGhlcmFwaXN0XCI9PWIuaGVhbHRoY2FyZXx8XCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsaXR5Om9jY3VwYXRpb25hbF90aGVyYXB5XCJdfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvY2N1cGF0aW9uYWxfdGhlcmFweVwiXSlhKz1cIkVyZ290aGVyYXBldXQ8YnIvPlwiO2lmKFwicHN5Y2hvdGhlcmFwaXN0XCI9PWIuaGVhbHRoY2FyZXx8XCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsaXR5OnBzeWNob3RoZXJhcHlcIl0pYSs9XCJQc3ljaG90aGVyYXBldXQ8YnIvPlwiO1wiYWx0ZXJuYXRpdmVcIj09Yi5oZWFsdGhjYXJlJiYoYSs9XCJBbHRlcm5hdGl2LSB1bmQgS29tcGxlbWVudFxcdTAwZTRybWVkaXppbmVyPGJyLz5cIik7XCJtaWR3aWZlXCI9PWIuaGVhbHRoY2FyZSYmKGErPVwiSGViYW1tZTxici8+XCIpO2lmKFwic3BlZWNoX3RoZXJhcGlzdFwiPT1iLmhlYWx0aGNhcmV8fFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbGl0eTpzcGVlY2hfdGhlcmFweVwiXSlhKz1cIkxvZ29wXFx1MDBlNGRlPGJyLz5cIjtcbiAgICBcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6bXVzaWNfdGhlcmFweVwiXSYmKGErPVwiTXVzaWt0aGVyYXBldXQ8YnIvPlwiKTtcInZldGVyaW5hcnlcIj09Yi5hbWVuaXR5JiYoYSs9XCJUaWVyYXJ6dDxici8+XCIpO1wiZmlyZV9zdGF0aW9uXCI9PWIuYW1lbml0eSYmKGErPVwiRmV1ZXJ3ZWhyaGF1czxici8+XCIpO1wiZmlyZV9leHRpbmd1aXNoZXJcIj09Yi5lbWVyZ2VuY3kmJihhKz1cIkZldWVybFxcdTAwZjZzY2hlcjxici8+XCIpO1wiYWVkXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJNb2JpbGVyIERlZmlicmlsYXRvcjxici8+XCIpO1wiZGVmaWJyaWxsYXRvclwiPT1iLmVtZXJnZW5jeSYmKGErPVwiTW9iaWxlciBEZWZpYnJpbGF0b3I8YnIvPlwiKTtcInBob25lXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJOb3RydWZzXFx1MDBlNHVsZTxici8+XCIpO1wicG9saWNlXCI9PWIuYW1lbml0eSYmKGErPVwiUG9saXplaXdhY2hlPGJyLz5cIik7XCJhbWJ1bGFuY2Vfc3RhdGlvblwiPT1iLmVtZXJnZW5jeSYmKGErPVwiUmV0dHVuZ3N3YWNoZTxici8+XCIpO1xuICAgIFwidGVjaG5pY2FsXCI9PWIuZW1lcmdlbmN5X3NlcnZpY2UmJihhKz1cIlRlY2huaXNjaGVzIEhpbGZzd2Vyazxici8+XCIpO1wid2F0ZXJcIj09Yi5lbWVyZ2VuY3lfc2VydmljZSYmKGErPVwiV2Fzc2VycmV0dHVuZ3NzdGF0aW9uPGJyLz5cIik7XCJiYXl3YXRjaFwiPT1iLndhdGVyd2F5JiYoYSs9XCJXYXNzZXJ3YWNodDxici8+XCIpO1wiYWlyXCI9PWIuZW1lcmdlbmN5X3NlcnZpY2UmJihhKz1cIlJldHR1bmdzaHVic2NocmF1YmVyPGJyLz5cIik7XCJlbWVyZ2VuY3lfYWNjZXNzX3BvaW50XCI9PWIuaGlnaHdheSYmKGErPVwiTm90ZmFsbHB1bmt0PGJyLz5cIik7aWYoXCJsaWZlYm9hdF9zdGF0aW9uXCI9PWIuYW1lbml0eXx8XCJsaWZlYm9hdF9zdGF0aW9uXCI9PWIuZW1lcmdlbmN5KWErPVwiUmV0dHVuZ3Nib290c3RhdGlvbjxici8+XCI7XCJsaWZlX3JpbmdcIj09Yi5lbWVyZ2VuY3kmJihhKz1cIlJldHR1bmdzcmluZzxici8+XCIpO1wic2lyZW5cIj09Yi5lbWVyZ2VuY3kmJihhKz1cIlNpcmVuZTxici8+XCIpO1wibGlmZV9yaW5nXCI9PVxuICAgIGIuYW1lbml0eSYmKGErPVwiUmV0dHVuZ3NyaW5nPGJyLz5cIik7XCJyZXNjdWVfc3RhdGlvblwiPT1iLmFtZW5pdHkmJihhKz1cIlJldHR1bmdzc3RhdGlvbjxici8+XCIpO1wiZmlyZV9oeWRyYW50XCI9PWIuZW1lcmdlbmN5JiYoXCJ1bmRlcmdyb3VuZFwiPT1iW1wiZmlyZV9oeWRyYW50OnR5cGVcIl0/YSs9XCJVbnRlcmZsdXJoeWRyYW50PGJyLz5cIjpcInBpbGxhclwiPT1iW1wiZmlyZV9oeWRyYW50OnR5cGVcIl0/YSs9XCJcXHUwMGRjYmVyZmx1cmh5ZHJhbnQ8YnIvPlwiOlwid2FsbFwiPT1iW1wiZmlyZV9oeWRyYW50OnR5cGVcIl0/YSs9XCJXYW5kaHlkcmFudDxici8+XCI6XCJwb25kXCI9PWJbXCJmaXJlX2h5ZHJhbnQ6dHlwZVwiXSYmKGErPVwiU2F1Z3N0ZWxsZTxici8+XCIpKTtcInN1Y3Rpb25fcG9pbnRcIj09Yi5lbWVyZ2VuY3kmJihhKz1cIlNhdWdzdGVsbGU8YnIvPlwiKTtcImZpcmVfd2F0ZXJfcG9uZFwiPT1iLmVtZXJnZW5jeSYmKGErPVwiTFxcdTAwZjZzY2h0ZWljaDxici8+XCIpO1wibW91bnRhaW5cIj09Yi5lbWVyZ2VuY3lfc2VydmljZSYmXG4gICAgKGErPVwiQmVyZ3JldHR1bmdzc3RhdGlvbjxici8+XCIpO1wid2F0ZXJfdGFua1wiPT1iLmVtZXJnZW5jeSYmKGErPVwiTFxcdTAwZjZzY2h3YXNzZXJ0YW5rPGJyLz5cIik7XCJjb250YWluZXJcIj09Yi5yZWN5Y2xpbmdfdHlwZSYmKGErPVwiUmVjeWNsaW5nIENvbnRhaW5lcjxici8+XCIpO1wicmVjeWNsaW5nXCI9PWIuYW1lbml0eSYmXCJ5ZXNcIj09YltcInJlY3ljbGluZzpleGNyZW1lbnRcIl18fFwicHVtcC1vdXRcIj09YltcInNlYW1hcms6c21hbGxfY3JhZnRfZmFjaWxpdHk6Y2F0ZWdvcnlcIl0/YSs9XCJBYnNhdWdzdGF0aW9uPGJyLz5cIjpcInJlY3ljbGluZ1wiPT1iLmFtZW5pdHkmJihhKz1cIldlcnRzdG9mZmhvZjxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OnBlc2NldGFyaWFuXCJdP2ErPVwicGVzY2V0YXJpc2NoZSBHZXJpY2h0ZSB2b3JoYW5kZW48YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpwZXNjZXRhcmlhblwiXSYmKGErPVwibnVyIHBlc2NldGFyaXNjaGUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDp2ZWdldGFyaWFuXCJdP1xuICAgICAgICBhKz1cInZlZ2V0YXJpc2NoZSBHZXJpY2h0ZSB2b3JoYW5kZW48YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDp2ZWdldGFyaWFuXCJdJiYoYSs9XCJudXIgdmVnZXRhcmlzY2hlIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6bGFjdG9fdmVnZXRhcmlhblwiXT9hKz1cImxhY3RvLXZlZ2V0YXJpc2NoZSBHZXJpY2h0ZSB2b3JoYW5kZW48YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpsYWN0b192ZWdldGFyaWFuXCJdJiYoYSs9XCJudXIgbGFjdG8tdmVnZXRhcmlzY2hlIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6b3ZvX3ZlZ2V0YXJpYW5cIl0/YSs9XCJvdm8tdmVnZXRhcmlzY2hlIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0Om92b192ZWdldGFyaWFuXCJdJiYoYSs9XCJudXIgb3ZvLXZlZ2V0YXJpc2NoZSBHZXJpY2h0ZTxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OnZlZ2FuXCJdP2ErPVwidmVnYW5lIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnZlZ2FuXCJdJiZcbiAgICAgICAgKGErPVwibnVyIHZlZ2FuZSBHZXJpY2h0ZTxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OmZydWl0YXJpYW5cIl0/YSs9XCJmcnV0YXJpc2NoZSBHZXJpY2h0ZSB2b3JoYW5kZW48YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpmcnVpdGFyaWFuXCJdJiYoYSs9XCJudXIgZnJ1dGFyaXNjaGUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpyYXdcIl0/YSs9XCJyb2hrXFx1MDBmNnN0bGljaGUgR2VyaWNodGUgdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6cmF3XCJdJiYoYSs9XCJudXIgcm9oa1xcdTAwZjZzdGxpY2hlIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6Z2x1dGVuX2ZyZWVcIl0/YSs9XCJnbHV0ZW5mcmVpZSBHZXJpY2h0ZSB2b3JoYW5kZW48YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpnbHV0ZW5fZnJlZVwiXSYmKGErPVwibnVyIGdsdXRlbmZyZWllIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6ZGFpcnlfZnJlZVwiXT9hKz1cIm1pbGNoZnJlaWUgR2VyaWNodGUgdm9yaGFuZGVuPGJyLz5cIjpcbiAgICAgICAgXCJvbmx5XCI9PWJbXCJkaWV0OmRhaXJ5X2ZyZWVcIl0mJihhKz1cIm51ciBtaWxjaGZyZWllIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6bGFjdG9zZV9mcmVlXCJdP2ErPVwibGFrdG9zZWZyZWllIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmxhY3Rvc2VfZnJlZVwiXSYmKGErPVwibnVyIGxha3Rvc2VmcmVpZSBHZXJpY2h0ZTxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OmhhbGFsXCJdP2ErPVwiSGFsXFx1MDEwMWwgR2VyaWNodGUgdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6aGFsYWxcIl0mJihhKz1cIm51ciBIYWxcXHUwMTAxbCBHZXJpY2h0ZTxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0Omtvc2hlclwiXT9hKz1cImtvc2NoZXJlIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0Omtvc2hlclwiXSYmKGErPVwibnVyIGtvc2NoZXJlIEdlcmljaHRlPGJyLz5cIik7XCJwdWJcIj09Yi5hbWVuaXR5JiYoYSs9XCJHYXN0c3RcXHUwMGU0dHRlPGJyLz5cIik7XCJiYXJcIj09XG4gICAgYi5hbWVuaXR5JiYoYSs9XCJCYXI8YnIvPlwiKTtcInllc1wiPT1iLmZyb3plbl95b2d1cnQmJihhKz1cIkZyb3plbiBZb2d1cnQgaW0gQW5nZWJvdDxici8+XCIpO1wieWVzXCI9PWIuc2x1c2hfaWNlJiYoYSs9XCJTbHVzaCBJY2UgaW0gQW5nZWJvdDxici8+XCIpO1wieWVzXCI9PWIuY2FrZSYmKGErPVwiS3VjaGVudGVpbGNoZW4sIEdlYlxcdTAwZTRjayBldGMuIGltIEFuZ2Vib3Q8YnIvPlwiKTtcInllc1wiPT1iLmNvZmZlZSYmKGErPVwiS2FmZmVlZ2V0clxcdTAwZTRua2UgaW0gQW5nZWJvdDxici8+XCIpO1wieWVzXCI9PWIuZHJpbmtzJiYoYSs9XCJHZXRyXFx1MDBlNG5rZSBpbSBBbmdlYm90PGJyLz5cIik7XCJiaWVyZ2FydGVuXCI9PWIuYW1lbml0eSYmKGErPVwiQmllcmdhcnRlbjxici8+XCIpO1wicmVzdGF1cmFudFwiPT1iLmFtZW5pdHkmJihhKz1cIlJlc3RhdXJhbnQ8YnIvPlwiKTtcImZhc3RfZm9vZFwiPT1iLmFtZW5pdHkmJihhKz1cIkZhc3QgRm9vZCBSZXN0YXVyYW50PGJyLz5cIik7aWYoKFwiY2FmZVwiPT1iLmFtZW5pdHl8fFxuICAgICAgICBcImNvZmZlZV9zaG9wXCI9PWIuYW1lbml0eSkmJlwiaWNlX2NyZWFtXCIhPWIuY3Vpc2luZSlhKz1cIkNhZlxcdTAwZTksIEJpc3Rybzxici8+XCI7aWYoXCJjYWZlXCI9PWIuYW1lbml0eSYmXCJpY2VfY3JlYW1cIj09Yi5jdWlzaW5lfHxcImljZV9jcmVhbVwiPT1iLmFtZW5pdHkpYSs9XCJFaXNjYWZlPGJyLz5cIjtcImFscGluZV9odXRcIj09Yi50b3VyaXNtJiYoYSs9XCJCZXJnaFxcdTAwZmN0dGU8YnIvPlwiKTtcImFxdWFyaXVtXCI9PWIudG91cmlzbSYmKGErPVwiQXF1YXJpdW08YnIvPlwiKTtcImFwYXJ0bWVudFwiPT1iLnRvdXJpc20mJihhKz1cIkZlcmllbndvaG51bmc8YnIvPlwiKTtcImF0dHJhY3Rpb25cIj09Yi50b3VyaXNtJiYoYSs9XCJTZWhlbnN3XFx1MDBmY3JkaWdrZWl0PGJyLz5cIik7XCJhcnR3b3JrXCI9PWIudG91cmlzbSYmKGErPVwiU2t1bHB0dXI8YnIvPlwiKTtcImNhbXBfc2l0ZVwiPT1iLnRvdXJpc20mJihhKz1cIkNhbXBpbmdwbGF0ejxici8+XCIpO1wiY2FyYXZhbl9zaXRlXCI9PWIudG91cmlzbSYmKGErPVwiV29obm1vYmlsc3RlbGxwbGF0ejxici8+XCIpO1xuICAgIFwiY2hhbGV0XCI9PWIudG91cmlzbSYmKGErPVwiRmVyaWVud29obnVuZyAvLWhhdXM8YnIvPlwiKTtcImdhbGxlcnlcIj09Yi50b3VyaXNtJiYoYSs9XCJLdW5zdGdhbGVyaWU8YnIvPlwiKTtcImd1ZXN0X2hvdXNlXCI9PWIudG91cmlzbSYmKGErPVwiUGVuc2lvbiwgR2FzdGhhdXMsIEJlZCAmIEJyZWFrZmFzdDxici8+XCIpO1wiaG9zdGVsXCI9PWIudG91cmlzbSYmKGErPVwiSnVnZW5kaGVyYmVyZ2UsIEhvc3RlbDxici8+XCIpO1wiaG90ZWxcIj09Yi50b3VyaXNtJiYoYSs9XCJIb3RlbDxici8+XCIpO1wibW90ZWxcIj09Yi50b3VyaXNtJiYoYSs9XCJNb3RlbDxici8+XCIpO1wibXVzZXVtXCI9PWIudG91cmlzbSYmKGErPVwiTXVzZXVtPGJyLz5cIik7XCJwaWNuaWNfc2l0ZVwiPT1iLnRvdXJpc20mJihhKz1cIlJhc3QtIHVuZCBQaWNrbmlja3BsYXR6PGJyLz5cIik7XCJ0aGVtZV9wYXJrXCI9PWIudG91cmlzbSYmKGErPVwiRnJlaXplaXQtIG9kZXIgVGhlbWVucGFyazxici8+XCIpO1widmlld3BvaW50XCI9PWIudG91cmlzbSYmKGErPVwiQXVzc2ljaHRzcHVua3Q8YnIvPlwiKTtcbiAgICBcIndpbGRlcm5lc3NfaHV0XCI9PWIudG91cmlzbSYmKGErPVwiU2NodXR6aFxcdTAwZmN0dGU8YnIvPlwiKTtcIndpbmVfY2VsbGFyXCI9PWIudG91cmlzbSYmKGErPVwiV2VpbmtlbGxlcjxici8+XCIpO1wiem9vXCI9PWIudG91cmlzbSYmKGErPVwiWm9vIC8gVGllcnBhcms8YnIvPlwiLFwiZW5jbG9zdXJlXCI9PWIuem9vJiYoYSs9XCJtaXQgV2lsZGdlaGVnZTxici8+XCIpLFwicGV0dGluZ196b29cIj09Yi56b28mJihhKz1cIm1pdCBTdHJlaWNoZWx6b288YnIvPlwiKSxcImZhbGNvbnJ5XCI9PWIuem9vJiYoYSs9XCJtaXQgRmFsa25lcmVpPGJyLz5cIikpO1widHJhaWxfcmlkaW5nX3N0YXRpb25cIj09Yi50b3VyaXNtJiYoYSs9XCJXYW5kZXJyZWl0c3RhdGlvbjxici8+XCIpO1wiZmlzaGluZ1wiPT1iLmNsdWImJihhKz1cIkFuZ2VsdmVyZWluPGJyLz5cIik7XCJzcG9ydFwiPT1iLmNsdWImJlwiZmlzaGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJmaXNoaW5nIGNsdWI8YnIvPlwiKTtcImFtYXRldXJfcmFkaW9cIj09Yi5jbHViJiYoYSs9XCJBbWF0ZXVyZnVua2VyPGJyLz5cIik7XG4gICAgXCJhcnRcIj09Yi5jbHViJiYoYSs9XCJLdW5zdHZlcmVpbjxici8+XCIpO1wiYXN0cm9ub215XCI9PWIuY2x1YiYmKGErPVwiQXN0cm9ub21pZXZlcmVpbjxici8+XCIpO1wiYXV0b21vYmlsZVwiPT1iLmNsdWImJihhKz1cIkF1dG9tb2JpbHZlcmVpbjxici8+XCIpO1wiYm9hcmRfZ2FtZXNcIj09Yi5jbHViJiYoYSs9XCJCcmV0dHNwaWVsdmVyZWluPGJyLz5cIik7XCJjYXJkX2dhbWVzXCI9PWIuY2x1YiYmKGErPVwiS2FydGVuc3BpZWx2ZXJlaW48YnIvPlwiKTtcImNoYXJpdHlcIj09Yi5jbHViJiYoYSs9XCJDaGFyaXR5LVZlcmVpbjxici8+XCIpO1wiY2hlc3NcIj09Yi5jbHViJiYoYSs9XCJTY2hhY2h2ZXJlaW48YnIvPlwiKTtcImNpbmVtYVwiPT1iLmNsdWImJihhKz1cIktpbm92ZXJlaW48YnIvPlwiKTtcImNvb2tpbmdcIj09Yi5jbHViJiYoYSs9XCJLb2NodmVyZWluPGJyLz5cIik7XCJjdWx0dXJlXCI9PWIuY2x1YiYmKGErPVwiS3VsdHVydmVyZWluPGJyLz5cIik7XCJkb2l0eW91cnNlbGZcIj09Yi5jbHViJiYoYSs9XCJkb2l0eW91cnNlbGYtVmVyZWluPGJyLz5cIik7XG4gICAgXCJlcXVlc3RyaWFuXCI9PWIuY2x1YiYmKGErPVwiUmVpdHZlcmVpbjxici8+XCIpO1wiZXRobmljXCI9PWIuY2x1YiYmKGErPVwiRXRobmlzY2hlciBWZXJlaW48YnIvPlwiKTtcImZhblwiPT1iLmNsdWImJihhKz1cIkZhbnZlcmVpbjxici8+XCIpO1wiZnJlZW1hc29ucnlcIj09Yi5jbHViJiYoYSs9XCJGcmVpbWF1cmVyLVZlcmVpbjxici8+XCIpO1wiZ2FtZVwiPT1iLmNsdWImJihhKz1cIlNwaWVsZXZlcmVpbjxici8+XCIpO1wiaGlzdG9yeVwiPT1iLmNsdWImJihhKz1cIkhpc3RvcmlzY2hlci1WZXJlaW4gLyBWZXJlaW4gZlxcdTAwZmNyIEdlc2NoaWNodGU8YnIvPlwiKTtcImh1bnRpbmdcIj09Yi5jbHViJiYoYSs9XCJKYWdkdmVyZWluPGJyLz5cIik7XCJsaW51eFwiPT1iLmNsdWImJihhKz1cIkxpbnV4LVZlcmVpbjxici8+XCIpO1wibW90b3JjeWNsZVwiPT1iLmNsdWImJihhKz1cIk1vdG9ycmFkdmVyZWluPGJyLz5cIik7XCJtdXNpY1wiPT1iLmNsdWImJihhKz1cIk11c2lrdmVyZWluPGJyLz5cIik7XCJuYXR1cmVcIj09Yi5jbHViJiYoYSs9XCJOYXR1cnZlcmVpbjxici8+XCIpO1xuICAgIFwibnVkaXNtXCI9PWIuY2x1YiYmKGErPVwiTnVkaXN0ZW4tVmVyZWluIC8gRktLLVZlcmVpbjxici8+XCIpO1wicGhvdG9ncmFwaHlcIj09Yi5jbHViJiYoYSs9XCJGb3RvZ3JhZmlldmVyZWluPGJyLz5cIik7XCJwb2xpdGljc1wiPT1iLmNsdWImJihhKz1cIlZlcmVpbiBmXFx1MDBmY3IgUG9saXRpazxici8+XCIpO1wicmVsZWdpb25cIj09Yi5jbHViJiYoYSs9XCJQb2xpdGlzY2hlci1WZXJlaW48YnIvPlwiKTtcInNjb3V0XCI9PWIuY2x1YiYmKGErPVwiUGZhZGZpbmRlcmluL1BmYWRmaW5kZXI8YnIvPlwiKTtcInNtb2tlXCI9PWIuY2x1YiYmKGErPVwiUmF1Y2hlcnZlcmVpbjxici8+XCIpO1wic3BvcnRcIj09Yi5jbHViJiYoYSs9XCJTcG9ydHZlcmVpbjxici8+XCIpO1widGhlYXRyZVwiPT1iLmNsdWImJihhKz1cIlRoZWF0ZXJ2ZXJlaW48YnIvPlwiKTtcInZldGVyYW5zXCI9PWIuY2x1YiYmKGErPVwiVmV0ZXJhbmVuPGJyLz5cIik7XCJhbXVzZW1lbnRfYXJjYWRlXCI9PWIubGVpc3VyZSYmKGErPVwiU3BpZWxoYWxsZTxici8+XCIpO1wiYmVhY2hfcmVzb3J0XCI9PVxuICAgIGIubGVpc3VyZSYmKGErPVwiU3RhbmRiYWQ8YnIvPlwiKTtcImJpcmRfaGlkZVwiPT1iLmxlaXN1cmUmJihhKz1cIlZvZ2VsYmVvYmFjaHR1bmdzcHVua3Q8YnIvPlwiKTtcImNvbW1vblwiPT1iLmxlaXN1cmUmJihhKz1cIlxcdTAwZDZmZmVudGxpY2hlIEdyXFx1MDBmY25mbFxcdTAwZTRjaGVuPGJyLz5cIik7XCJjbHViXCI9PWIubGVpc3VyZSYmKGErPVwiQ2x1Yi9WZXJlaW48YnIvPlwiKTtcImRhbmNlXCI9PWIubGVpc3VyZSYmKGErPVwiVGFuemVuPGJyLz5cIik7XCJkb2dfcGFya1wiPT1iLmxlaXN1cmUmJihhKz1cIkh1bmRlcGFyazxici8+XCIpO1wiZmlyZXBpdFwiPT1iLmxlaXN1cmUmJihhKz1cIkZldWVyc3RlbGxlPGJyLz5cIik7XCJmaXNoaW5nXCI9PWIubGVpc3VyZSYmKGErPVwiQW5nZWxzdGVsbGU8YnIvPlwiKTtcImdhcmRlblwiPT1iLmxlaXN1cmUmJihhKz1cIkdhcnRlbjxici8+XCIpO1wiZ29sZl9jb3Vyc2VcIj09Yi5sZWlzdXJlJiYoYSs9XCJHb2xmcGxhdHo8YnIvPlwiKTtcImhhY2tlcnNwYWNlXCI9PWIubGVpc3VyZSYmKGErPVwiT3J0IGZcXHUwMGZjciBIYWNrZXJ0cmVmZmVuPGJyLz5cIik7XG4gICAgXCJob3JzZV9yaWRpbmdcIj09Yi5sZWlzdXJlJiYoYSs9XCJSZWl0c3RhbGwgLyBSZWl0ZXJob2Y8YnIvPlwiKTtcImljZV9yaW5rXCI9PWIubGVpc3VyZSYmKGErPVwiRWlzbGF1ZmJhaG48YnIvPlwiKTtcIm5hdHVyZV9yZXNlcnZlXCI9PWIubGVpc3VyZSYmKGErPVwiTmF0dXJzY2h1dHpnZWJpZXQgKE5TRyk8YnIvPlwiKTtcInBhcmtcIj09Yi5sZWlzdXJlJiYoYSs9XCJHclxcdTAwZmNuYW5sYWdlPGJyLz5cIik7XCJtaW5pYXR1cmVfZ29sZlwiPT1iLmxlaXN1cmUmJihhKz1cIk1pbmlnb2xmPGJyLz5cIik7XCJwaXRjaFwiPT1iLmxlaXN1cmUmJihhKz1cIlNwaWVsZmVsZDxici8+XCIpO1wicGl0Y2hcIj09Yi5sZWlzdXJlJiZcInllc1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJTcG9ydGhhbGxlPGJyLz5cIik7XCJwbGF5Z3JvdW5kXCI9PWIubGVpc3VyZSYmXCJ5ZXNcIj09Yi5idWlsZGluZz9hKz1cIlNwaWVsc2NoZXVuZTxici8+XCI6XCJwbGF5Z3JvdW5kXCI9PWIubGVpc3VyZSYmKGErPVwiU3BpZWxwbGF0ejxici8+XCIpO1wic29jaWFsX2NsdWJcIj09XG4gICAgYi5sZWlzdXJlJiYoYSs9XCJUcmVmZnB1bmt0IGZcXHUwMGZjciBGcmVpemVpdGdydXBwZW48YnIvPlwiKTtcInNwYVwiPT1iLmxlaXN1cmUmJihhKz1cIkhlaWxiYWQgLyBTcGE8YnIvPlwiKTtcInNwb3J0c19jZW50cmVcIj09Yi5sZWlzdXJlJiYoYSs9XCJTcG9ydHplbnRydW08YnIvPlwiKTtcImNsaW1iaW5nX2FkdmVudHVyZVwiPT1iLnNwb3J0JiYoYSs9XCJTZWlsZ2FydGVuPGJyLz5cIik7XCJzdGFkaXVtXCI9PWIubGVpc3VyZSYmKGErPVwiU3RhZGlvbjxici8+XCIpO1wic3dpbW1pbmdfcG9vbFwiPT1iLmxlaXN1cmUmJihhKz1cIlNjaHdpbW1iZWNrZW48YnIvPlwiKTtcInRyYWNrXCI9PWIubGVpc3VyZSYmKGErPVwiUmVubmJhaG48YnIvPlwiKTtcIndhdGVyX3BhcmtcIj09Yi5sZWlzdXJlJiYoYSs9XCJXYXNzZXJwYXJrPGJyLz5cIik7XCJ3aWxkbGlmZV9oaWRlXCI9PWIubGVpc3VyZSYmKGErPVwiV2lsZGJlb2JhY2h0dW5nc3B1bmt0PGJyLz5cIik7XCJhZHVsdF9nYW1pbmdfY2VudHJlXCI9PWIubGVpc3VyZSYmKGErPVwiU3BpZWxvdGhlazxici8+XCIpO1xuICAgIFwiYm93bGluZ19hbGxleVwiPT1iLmxlaXN1cmUmJlwiMTBwaW5cIj09Yi5zcG9ydCYmKGErPVwiQm93bGluZ2NlbnRlcjxici8+XCIpO1wiYm93bGluZ19hbGxleVwiPT1iLmxlaXN1cmUmJlwiOXBpblwiPT1iLnNwb3J0JiYoYSs9XCJLZWdlbGJhaG48YnIvPlwiKTtpZihcImthcnRpbmdcIj09Yi5zcG9ydHx8XCJtb3RvclwiPT1iLnNwb3J0KWErPVwiS2FydC0vTW90b3JzcG9ydDxici8+XCI7aWYoXCJkYXJ0c1wiPT1iLnNwb3J0fHxcImRhcnRcIj09Yi5zcG9ydClhKz1cIkRhcnRzPGJyLz5cIjtpZihiW1wicGlzdGU6dHlwZVwiXSlzd2l0Y2goYltcInBpc3RlOnR5cGVcIl0pe2Nhc2UgXCJza2l0b3VyXCI6YSs9XCJQaXN0ZSBmXFx1MDBmY3IgU2tpdG91cmVuPGJyLz5cIjticmVhaztjYXNlIFwiZG93bmhpbGxcIjphKz1cIlNraWFiZmFocnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzbGVkXCI6YSs9XCJSb2RlbGJlcmcgLyBSb2RlbHN0cmVja2U8YnIvPlwiO2JyZWFrO2Nhc2UgXCJub3JkaWNcIjphKz1cIkxhbmdsYXVmIFBpc3RlPGJyLz5cIjticmVhaztjYXNlIFwiaGlrZVwiOmErPVxuICAgICAgICBcIlNjaG5lZXNjaHVoLSB1bmQgV2ludGVyd2FuZGVyd2VnPGJyLz5cIjticmVhaztjYXNlIFwic25vd19wYXJrXCI6YSs9XCJTbm93LVBhcms8YnIvPlwifWlmKGIuc3BvcnQpc3dpdGNoKGIuc3BvcnQpe2Nhc2UgXCJzdXJmaW5nXCI6YSs9XCJTdXJmZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJraXRlc3VyZmluZ1wiOmErPVwiS2l0ZXN1cmZlbjxici8+XCI7YnJlYWs7Y2FzZSBcIndhdGVyX3NraVwiOmErPVwiV2Fzc2Vyc2tpPGJyLz5cIn1pZihiLmFlcmlhbHdheSlzd2l0Y2goYi5hZXJpYWx3YXkpe2Nhc2UgXCJjYWJsZV9iYXJcIjphKz1cIkxpZnQgbWl0IEdvbmRlbG48YnIvPlwiO2JyZWFrO2Nhc2UgXCJnb25kb2xhXCI6YSs9XCJMaWZ0IG1pdCBHb25kZWxuPGJyLz5cIjticmVhaztjYXNlIFwiY2hhaXJfbGlmdFwiOmErPVwiU2Vzc2VsbGlmdDxici8+XCI7YnJlYWs7Y2FzZSBcIm1peGVkX2xpZnRcIjphKz1cIkxpZnQgbWl0IFNlc3NlbG4gdW5kIEdvbmRlbG48YnIvPlwiO2JyZWFrO2Nhc2UgXCJkcmFnX2xpZnRcIjphKz1cIlNraWxpZnQ8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwidC1iYXJcIjphKz1cIlQtTGlmdDxici8+XCI7YnJlYWs7Y2FzZSBcInQtYmFyXCI6YSs9XCJULUxpZnQgKGVpbnNlaXRpZyk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwbGF0dGVyXCI6YSs9XCJMaWZ0IG1pdCBTaXR6c2NoZWliZTxici8+XCI7YnJlYWs7Y2FzZSBcInJvcGVfdG93XCI6YSs9XCJCXFx1MDBmY2dlbGxpZnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtYWdpY19jYXJwZXRcIjphKz1cIkJlZlxcdTAwZjZyZGVydW5nc2JhbmQ8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnRcIn1cIm1vc3F1ZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJNb3NjaGVlPGJyLz5cIik7XCJzeW5hZ29ndWVcIj09Yi5idWlsZGluZyYmKGErPVwiU3luYWdvZ2U8YnIvPlwiKTtcImFwYXJ0bWVudHNcIj09Yi5idWlsZGluZyYmKGErPVwiV29obnVuZzxici8+XCIpO1wiZmFybVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJGYXJtPGJyLz5cIik7XCJob3RlbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJIb3RlbDxici8+XCIpO1wiaG91c2VcIj09Yi5idWlsZGluZyYmXG4gICAgKGErPVwiSGF1czxici8+XCIpO1wiZGV0YWNoZWRcIj09Yi5idWlsZGluZyYmKGErPVwiRnJlaXN0ZWhlbmQ8YnIvPlwiKTtcInJlc2lkZW50aWFsXCI9PWIuYnVpbGRpbmcmJihhKz1cIlJlc2lkZW56PGJyLz5cIik7aWYoXCJkb21pdG9yeVwiPT1iLmJ1aWxkaW5nfHxcInJlc2lkZW50aWFsIHBsdXNcIj09Yi5idWlsZGluZylhKz1cIldvaG5oZWltPGJyLz5cIjtcInRlcnJhY2VcIj09Yi5idWlsZGluZyYmKGErPVwiVGVycmFzc2U8YnIvPlwiKTtcImhvdXNlYm9hdFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJIYXVzYm9vdDxici8+XCIpO1wiYnVuZ2Fsb3dcIj09Yi5idWlsZGluZyYmKGErPVwiQnVuZ2Fsb3c8YnIvPlwiKTtcInN0YXRpY19jYXJhdmFuXCI9PWIuYnVpbGRpbmcmJihhKz1cIlN0ZWhlbmRlciBXb2hud2FnZW48YnIvPlwiKTtcImNvbW1lcmNpYWxcIj09Yi5idWlsZGluZyYmKGErPVwiS29tbWVyemllbGw8YnIvPlwiKTtcInJldGFpbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJWZXJrYXVmPGJyLz5cIik7XCJ3YXJlaG91c2VcIj09Yi5idWlsZGluZyYmXG4gICAgKGErPVwiTGFnZXJoYXVzPGJyLz5cIik7XCJiYWtlaG91c2VcIj09Yi5idWlsZGluZyYmKGErPVwiQmFja3N0dWJlPGJyLz5cIik7XCJ0ZW1wbGVcIj09Yi5idWlsZGluZyYmKGErPVwiVGVtcGVsPGJyLz5cIik7XCJzaHJpbmVcIj09Yi5idWlsZGluZyYmKGErPVwiU2NocmVpbjxici8+XCIpO1wiY2l2aWNcIj09Yi5idWlsZGluZyYmKGErPVwiQlxcdTAwZmNyZ2VybGljaDxici8+XCIpO1wic3RhZGl1bVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJTdGFkaXVtPGJyLz5cIik7XCJ0cmFpbl9zdGF0aW9uXCI9PWIuYnVpbGRpbmcmJihhKz1cIkJhaG5ob2Y8YnIvPlwiKTtcInVuaXZlcnNpdHlcIj09Yi5idWlsZGluZyYmKGErPVwiVW5pdmVyc2l0XFx1MDBlNHQ8YnIvPlwiKTtcInB1YmxpY1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJcXHUwMGQ2ZmZlbnRsaWNoZXMgR2ViXFx1MDBlNHVkZTxici8+XCIpO1wiYnJpZGdlXCI9PWIuYnVpbGRpbmcmJihhKz1cIkJyXFx1MDBmY2NrZTxici8+XCIpO1wiYnVua2VyXCI9PWIuYnVpbGRpbmcmJihhKz1cIkJ1bmtlcjxici8+XCIpO1wiY2FiaW5cIj09XG4gICAgYi5idWlsZGluZyYmKGErPVwiSFxcdTAwZmN0dGU8YnIvPlwiKTtcImNvbnNlcnZhdG9yeVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJXaW50ZXJnYXJ0ZW48YnIvPlwiKTtcImNvbnN0cnVjdGlvblwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJJbSBCYXU8YnIvPlwiKTtcImdhcmFnZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJHYXJhZ2U8YnIvPlwiKTtcImdhcmFnZXNcIj09Yi5idWlsZGluZyYmKGErPVwiR2FyYWdlbjxici8+XCIpO1wiZ3JlZW5ob3VzZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJHZXdcXHUwMGU0Y2hzaGF1czxici8+XCIpO1wiaGFuZ2FyXCI9PWIuYnVpbGRpbmcmJihhKz1cIkhhbmdhcjxici8+XCIpO1wiaHV0XCI9PWIuYnVpbGRpbmcmJihhKz1cIkhcXHUwMGZjdHRlPGJyLz5cIik7XCJwYXZpbGxpb25cIj09Yi5idWlsZGluZyYmKGErPVwiUGF2aWxsaW9uPGJyLz5cIik7XCJyb29mXCI9PWIuYnVpbGRpbmcmJihhKz1cIlxcdTAwZGNiZXJkYWNodDxici8+XCIpO1wic2hlZFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJHYXJ0ZW5oXFx1MDBlNHVzY2hlbjxici8+XCIpO1xuICAgIFwidHJhbnNmb3JtZXJfdG93ZXJcIj09Yi5idWlsZGluZyYmKGErPVwiVHJhbnNmb3JtYXRvciBUdXJtPGJyLz5cIik7XCJzZXJ2aWNlXCI9PWIuYnVpbGRpbmcmJihhKz1cIlNlcnZpY2UtU3RlbGxlPGJyLz5cIik7XCJraW9za1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLaW9zazxici8+XCIpO1wiY2FycG9ydFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJDYXJwb3J0PGJyLz5cIik7XCJydWluc1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJSdWluZW48YnIvPlwiKTtcImdhbWJsaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiU3BpZWxoYWxsZTxici8+XCIpO1wibGlicmFyeVwiPT1iLmFtZW5pdHkmJihhKz1cIkJcXHUwMGZjY2hlcmVpPGJyLz5cIik7XCJmb3VudGFpblwiPT1iLmFtZW5pdHkmJihhKz1cIkJydW5uZW48YnIvPlwiKTtcImF0dHJhY3Rpb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJTZWhlbnN3XFx1MDBmY3JkaWdrZWl0PGJyLz5cIik7aWYoXCJzb2NpYWxfY2VudHJlXCI9PWIuYW1lbml0eXx8XCJjbHViXCI9PWIuYW1lbml0eSlhKz1cIlZlcmVpbiAvIENsdWI8YnIvPlwiO1xuICAgIFwidG93bmhhbGxcIj09Yi5hbWVuaXR5JiYoYSs9XCJSYXRoYXVzIC8gQlxcdTAwZmNyZ2VyaGF1czxici8+XCIpO1wiYmVuY2hcIj09Yi5hbWVuaXR5JiYoYSs9XCJQYXJrYmFuazxici8+XCIpO2lmKFwiZ3JhdmVfeWFyZFwiPT1iLmFtZW5pdHl8fFwiY2VtZXRlcnlcIj09Yi5sYW5kdXNlKWErPVwiRnJpZWRob2Y8YnIvPlwiO1wicG9zdF9ib3hcIj09Yi5hbWVuaXR5JiYoYSs9XCJCcmllZmthc3Rlbjxici8+XCIpO1wicG9zdF9vZmZpY2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJQb3N0YW10PGJyLz5cIik7XCJ0ZWxlcGhvbmVcIj09Yi5hbWVuaXR5JiYoYSs9XCJUZWxlZm9uPGJyLz5cIik7XCJhdG1cIj09Yi5hbWVuaXR5JiYoYSs9XCJHZWxkYXV0b21hdDxici8+XCIpO1wiYmFua1wiPT1iLmFtZW5pdHkmJihhKz1cIkJhbmtmaWxpYWxlPGJyLz5cIik7XCJ0b2lsZXRzXCI9PWIuYW1lbml0eSYmXCJ5ZXNcIj09Yi5kaWFwZXI/YSs9XCJcXHUwMGQ2ZmZlbnRsaWNoZSBUb2lsZXR0ZSBtaXQgV2lja2VsdGlzY2g8YnIvPlwiOlwidG9pbGV0c1wiPT1iLmFtZW5pdHkmJlxuICAgICAgICAoYSs9XCJcXHUwMGQ2ZmZlbnRsaWNoZSBUb2lsZXR0ZTxici8+XCIpO1wic2Nob29sXCI9PWIuYW1lbml0eSYmXCIxXCI9PWJbXCJpc2NlZDpsZXZlbFwiXT9hKz1cIkdydW5kc2NodWxlPGJyLz5cIjpcInNjaG9vbFwiPT1iLmFtZW5pdHkmJlwiMlwiPT1iW1wiaXNjZWQ6bGV2ZWxcIl0/YSs9XCJTZWt1bmRhcnN0dWZlIEk8YnIvPlwiOlwic2Nob29sXCI9PWIuYW1lbml0eSYmXCIzXCI9PWJbXCJpc2NlZDpsZXZlbFwiXT9hKz1cIlNla3VuZGFyc3R1ZmUgSUk8YnIvPlwiOlwic2Nob29sXCI9PWIuYW1lbml0eSYmKGErPVwiU2NodWxlPGJyLz5cIik7XCJraW5kZXJnYXJ0ZW5cIj09Yi5hbWVuaXR5JiYoYSs9XCJLaW5kZXJnYXJ0ZW48YnIvPlwiKTtcImludGVybmV0X2NhZmVcIj09Yi5hbWVuaXR5JiYoYSs9XCJJbnRlcm5ldGNhZlxcdTAwZTk8YnIvPlwiKTtcImRheWNhcmVcIj09Yi5hbWVuaXR5JiYoYSs9XCJLaW5kZXItIHVuZCBKdWdlbmR0YWdlc3N0XFx1MDBlNHR0ZTxici8+XCIpO1wiY2hpbGRjYXJlXCI9PWIuYW1lbml0eSYmKGErPVwiS2luZGVyLSB1bmQgSnVnZW5kdGFnZXNzdFxcdTAwZTR0dGU8YnIvPlwiKTtcbiAgICBcInVuaXZlcnNpdHlcIj09Yi5hbWVuaXR5JiYoYSs9XCJVbml2ZXJzaXRcXHUwMGU0dC9Ib2Noc2NodWxlPGJyLz5cIik7XCJjb2xsZWdlXCI9PWIuYW1lbml0eSYmKGErPVwiVW5pdmVyc2l0XFx1MDBlNHQvSG9jaHNjaHVsZTxici8+XCIpO1wic2hlbHRlclwiPT1iLmFtZW5pdHkmJihhKz1cIlVudGVyc3RhbmQ8YnIvPlwiKTtcImJicVwiPT1iLmFtZW5pdHkmJihhKz1cIkdyaWxscGxhdHo8YnIvPlwiKTtcIm5pZ2h0Y2x1YlwiPT1iLmFtZW5pdHkmJihhKz1cIkRpc2tvdGhlayAvIE5hY2h0a2x1Yjxici8+XCIpO1wiYmljeWNsZV9wYXJraW5nXCI9PWIuYW1lbml0eSYmKGErPVwiRmFocnJhZHBhcmtwbGF0ejxici8+XCIpO1wiYmljeWNsZV9yZW50YWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJGYWhycmFkdmVybGVpaDxici8+XCIpO1wiYm9hdF9zaGFyaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiQm9vdHN2ZXJsZWloPGJyLz5cIik7XCJjYXJfc2hhcmluZ1wiPT1iLmFtZW5pdHkmJihhKz1cIkNhci1TaGFyaW5nPGJyLz5cIik7XCJjaW5lbWFcIj09Yi5hbWVuaXR5JiZcbiAgICAoYSs9XCJLaW5vPGJyLz5cIik7XCJzd2ltbWluZ19wb29sXCI9PWIuYW1lbml0eSYmKGErPVwiU2Nod2ltbWJhZDxici8+XCIpO2lmKFwiZW1iYXNzeVwiPT1iLmFtZW5pdHl8fFwiZW1iYXNzeVwiPT1iLmRpcGxvbWF0aWMpYSs9XCJCb3RzY2hhZnQ8YnIvPlwiO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwiY29uc3VsYXRlXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwiS29uc3VsYXRlPGJyLz5cIik7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmXCJjb25zdWxhdGVfZ2VuZXJhbFwiPT1iLmRpcGxvbWF0aWMmJihhKz1cIkdlbmVyYWxrb25zdWxhdGU8YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcImhvbm9yYXJ5X2NvbnN1bGF0ZVwiPT1iLmRpcGxvbWF0aWMmJihhKz1cIkhvbm9yYXJrb25zdWxhdGU8YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcInBlcm1hbmVudF9taXNzaW9uXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwiU3RcXHUwMGU0bmRpZ2UgVmVydHJldHVuZzxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwiZGVsZWdhdGlvblwiPT1cbiAgICBiLmRpcGxvbWF0aWMmJihhKz1cIkRlbGVnYXRpb248YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcImhpZ2hfY29tbWlzc2lvblwiPT1iLmRpcGxvbWF0aWMmJihhKz1cIkhvY2hrb21taXNzYXJpYXQ8YnIvPlwiKTtcIkJhcmZ1c3NwZmFkXCI9PWIuYW1lbml0eSYmKGErPVwiQmFyZnVcXHUwMGRmcGZhZDxici8+XCIpO1wiY2FzaW5vXCI9PWIuYW1lbml0eSYmKGErPVwiQ2FzaW5vPGJyLz5cIik7XCJzcGFcIj09Yi5hbWVuaXR5JiYoYSs9XCJIZWlsYmFkIC8gU3BhPGJyLz5cIik7XCJzdGFibGVzXCI9PWIuYW1lbml0eSYmKGErPVwiUmVpdHN0YWxsIC8gUmVpdGVyaG9mPGJyLz5cIik7XCJ3YXRlcmluZ19wbGFjZVwiPT1iLmFtZW5pdHkmJihhKz1cIldhc3NlcnN0ZWxsZSAvIFRyXFx1MDBlNG5rZTxici8+XCIpO1wieWVzXCI9PWIud2F0ZXJpbmdfcGxhY2UmJihhKz1cIldhc3NlcnN0ZWxsZSAvIFRyXFx1MDBlNG5rZTxici8+XCIpO1wid2F0ZXJfcG9pbnRcIj09Yi5hbWVuaXR5JiYoYSs9XCJncm9cXHUwMGRmZSBUcmlua3dhc3NlcnN0ZWxsZTxici8+XCIpO1xuICAgIFwidGF4aVwiPT1iLmFtZW5pdHkmJihhKz1cIlRheGk8YnIvPlwiKTtcImNhcl93YXNoXCI9PWIuYW1lbml0eSYmKGErPVwiQXV0b3dhc2NoYW5sYWdlPGJyLz5cIik7XCJicm90aGVsXCI9PWIuYW1lbml0eSYmKGErPVwiQm9yZGVsbCwgRnJldWRlbmhhdXM8YnIvPlwiKTtcInN0cmlwY2x1YlwiPT1iLmFtZW5pdHkmJihhKz1cIlN0cmlwY2x1Yjxici8+XCIpO1wic3dpbmdlcmNsdWJcIj09Yi5hbWVuaXR5JiYoYSs9XCJTd2luZ2VyY2x1Yjxici8+XCIpO1wicGxhbmV0YXJpdW1cIj09Yi5hbWVuaXR5JiYoYSs9XCJQbGFuZXRhcml1bTxici8+XCIpO1wiY291cnRob3VzZVwiPT1iLmFtZW5pdHkmJihhKz1cIkdlcmljaHQ8YnIvPlwiKTtcImNyZW1hdG9yaXVtXCI9PWIuYW1lbml0eSYmKGErPVwiS3JlbWF0b3JpdW08YnIvPlwiKTtpZihcImNyeXB0XCI9PWIuYW1lbml0eXx8XCJjcnlwdFwiPT1iLmJ1aWxkaW5nKWErPVwiS3J5cHRhPGJyLz5cIjtcImh1bnRpbmdfc3RhbmRcIj09Yi5hbWVuaXR5JiYoYSs9XCJIb2Noc2l0ejxici8+XCIpO1wicGhvdG9fYm9vdGhcIj09XG4gICAgYi5hbWVuaXR5JiYoYSs9XCJGb3RvYXV0b21hdDxici8+XCIpO1wicHJpc29uXCI9PWIuYW1lbml0eSYmKGErPVwiR2VmXFx1MDBlNG5nbmlzPGJyLz5cIik7XCJyYW5nZXJfc3RhdGlvblwiPT1iLmFtZW5pdHkmJihhKz1cIk5hdGlvbmFsIFBhcmsgUmFuZ2VyIFN0YXRpb248YnIvPlwiKTtcInJlZ2lzdGVyX29mZmljZVwiPT1iLmFtZW5pdHkmJihhKz1cIlN0YW5kZXNhbXQ8YnIvPlwiKTtcIm1hcmtldHBsYWNlXCI9PWIuYW1lbml0eSYmKGErPVwiTWFya3RwbGF0eiAvIFdvY2hlbm1hcmt0PGJyLz5cIik7XCJzb2xhcml1bVwiPT1iLmFtZW5pdHkmJihhKz1cIlNvbGFyaXVtPGJyLz5cIik7XCJzYXVuYVwiPT1iLmFtZW5pdHkmJihhKz1cIlNhdW5hPGJyLz5cIik7XCJzaG93ZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJcXHUwMGY2ZmZlbnRsaWNoZSBEdXNjaGU8YnIvPlwiKTtpZihcIndhc3RlX2Rpc3Bvc2FsXCI9PWIuYW1lbml0eSYmKGErPVwiTVxcdTAwZmNsbGVudHNvcmd1bmcgYXVmIFxcdTAwZjZmZmVudGxpY2hlbiBQbFxcdTAwZTR0emVuPGJyLz5cIixcbiAgICAgICAgYi53YXN0ZSkpc3dpdGNoKGErPVwiQXJ0OiBcIixiLndhc3RlKXtjYXNlIFwidHJhc2hcIjphKz1cIkFsbGdlbWVpbmVyIE1cXHUwMGZjbGw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvaWxcIjphKz1cIk9pbDxici8+XCI7YnJlYWs7Y2FzZSBcImRydWdzXCI6YSs9XCJQaGFybWF6ZXV0aXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcIm9yZ2FuaWNcIjphKz1cIktvbXBvc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwbGFzdGljXCI6YSs9XCJQbGFzdGlrPGJyLz5cIjticmVhaztjYXNlIFwicnViYmxlXCI6YSs9XCJTY2h1dHQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaWdhcmV0dGVzXCI6YSs9XCJaaWdhcmV0dGVuPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiQWxsZ2VtZWluZXIgTVxcdTAwZmNsbDxici8+XCJ9aWYoXCJ3YXN0ZV9iYXNrZXRcIj09Yi5hbWVuaXR5fHxcImRvZ19leGNyZW1lbnRcIj09Yi53YXN0ZSlhKz1cIkh1bmRlLUNvZGUgTVxcdTAwZmNsbGNvbnRhaW5lcjxici8+XCI7aWYoXCJzY291dF9jYW1wXCI9PWIuYW1lbml0eXx8XCJzY291dF9odXRcIj09Yi5hbWVuaXR5fHxcbiAgICAgICAgXCJzY291dF9oYWxsXCI9PWIuYW1lbml0eSlhKz1cIlBmYWRmaW5kZXJoZWltPGJyLz5cIjtcImZlcnJ5X3Rlcm1pbmFsXCI9PWIuYW1lbml0eSYmKGErPVwiRlxcdTAwZTRocmhhZmVuPGJyLz5cIik7XCJidXJlYXVfZGVfY2hhbmdlXCI9PWIuYW1lbml0eSYmKGErPVwiR2VsZHdlY2hzZWxzdHViZTxici8+XCIpO1wieW91dGhfY2x1YlwiPT1iLmFtZW5pdHkmJihhKz1cIkp1Z2VuZHplbnRydW08YnIvPlwiKTtcImZlc3RpdmFsX2dyb3VuZHNcIj09Yi5hbWVuaXR5JiYoYSs9XCJGZXN0aXZhbGdlbFxcdTAwZTRuZGU8YnIvPlwiKTtpZihcInllc1wiPT1iLm9wZW5maXJlfHxcInllc1wiPT1iLmZpcmVwbGFjZSlhKz1cIk9mZmVuZSBGZXVlcnN0ZWxsZTxici8+XCI7aWYoXCJ2ZW5kaW5nX21hY2hpbmVcIj09Yi5hbWVuaXR5KWlmKGIudmVuZGluZylzd2l0Y2goYi52ZW5kaW5nKXtjYXNlIFwiYWRtaXNzaW9uX3RpY2tldHNcIjphKz1cIkVpbnRyaXR0c2thcnRlbmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhbmltYWxfZmVlZFwiOmErPVwiVGllcmZ1dHRlcmF1dG9tYXQ8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwiYmljeWNsZV90dWJlXCI6YSs9XCJGYWhycmFkc2NobGF1Y2hhdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiYm9va3NcIjphKz1cIkJcXHUwMGZjY2hlcmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYW5kbGVzXCI6YSs9XCJLZXJ6ZW5hdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiY2lnYXJldHRlc1wiOmErPVwiWmlnYXJldHRlbmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaGVtaXN0XCI6YSs9XCJBcG90aGVrZW4vRHJvZ2VyaWUgQXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImNvbmRvbXNcIjphKz1cIktvbmRvbWF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkcmlua3NcIjphKz1cIkdldHJcXHUwMGU0bmtlYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImVsZWN0cm9uaWNzXCI6YSs9XCJBdXRvbWF0IGZcXHUwMGZjciBFbGVrdHJvLVp1YmVoXFx1MDBmNnI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJlbG9uZ2F0ZWRfY29pblwiOmErPVwiTVxcdTAwZmNuenByXFx1MDBlNGd1bmdzYXV0b21hdDxici8+XCI7YnJlYWs7XG4gICAgICAgIGNhc2UgXCJleGNyZW1lbnRfYmFnc1wiOmErPVwiSHVuZGV0XFx1MDBmY3RlbnNwZW5kZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmZW1pbmluZV9oeWdpZW5lXCI6YSs9XCJBdXRvbWF0IGZcXHUwMGZjciBEYW1lbmh5Z2llbmVwcm9kdWt0ZTxici8+XCI7YnJlYWs7Y2FzZSBcImZpcnN0X2FpZFwiOmErPVwiRXJzdGUtSGlsZmUtQXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImZpc2hpbmdfdGFja2xlXCI6YSs9XCJBdXRvbWF0IGZcXHUwMGZjciBBbmdlbHp1YmVoXFx1MDBmNnI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmaXNoaW5nX2JhaXRcIjphKz1cIkFuZ2Vsa1xcdTAwZjZkZXJhdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiZmxvd2Vyc1wiOmErPVwiQmx1bWVuYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImZvb2RcIjphKz1cIkxlYmVuc21pdHRlbC1BdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiaWNlX2N1YmVzXCI6YSs9XCJFaXN3XFx1MDBmY3JmZWxhdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiaWNlX2NyZWFtXCI6YSs9XCJBdXRvbWF0IGZcXHUwMGZjciBTcGVpc2VlaXM8YnIvPlwiO1xuICAgICAgICAgICAgYnJlYWs7Y2FzZSBcImlua19jYXJ0cmlkZ2VzXCI6YSs9XCJEcnVja2VycGF0cm9uZW4gQXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImxhdW5kcnlfZGV0ZXJnZW50XCI6YSs9XCJXYXNjaG1pdHRlbGF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwdWJsaWNfdHJhbnNwb3J0X3RpY2tldHNcIjphKz1cIkZhaHJrYXJ0ZW5hdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwibmV3c3BhcGVyXCI6YSs9XCJaZWl0dW5nc2F1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXJjZWxfcGlja3VwXCI6YSs9XCJQYWNrc3RhdGlvbjxici8+XCI7YnJlYWs7Y2FzZSBcInBhcmNlbF9tYWlsX2luXCI6YSs9XCJQYWtldHN0YXRpb248YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXJraW5nX3RpY2tldHNcIjphKz1cIlBhcmtzY2hlaW5hdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwicGhvdG9zXCI6YSs9XCJGb3RvYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInNleF90b3lzXCI6YSs9XCJBdXRvbWF0IGZcXHUwMGZjciBTZXhzcGllbHpldWc8YnIvPlwiO2JyZWFrO1xuICAgICAgICBjYXNlIFwiU0lNX2NhcmRzXCI6YSs9XCJBdXRvbWF0IGZcXHUwMGZjciBTSU0gS2FydGVuPGJyLz5cIjticmVhaztjYXNlIFwic3RhbXBzXCI6YSs9XCJCcmllZm1hcmtlbmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzd2VldHNcIjphKz1cIlNcXHUwMGZjXFx1MDBkZmlna2VpdGVuYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInN5cmluZ2VzXCI6YSs9XCJTcHJpdHplbmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b2xsXCI6YSs9XCJNYXV0LUF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b3lzXCI6YSs9XCJTcGllbHpldWdhdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwidW1icmVsbGFzXCI6YSs9XCJSZWdlbnNjaGlybWF1dG9tYXQ8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJWZXJrYXVmc2F1dG9tYXQ8YnIvPlwifWVsc2UgYSs9XCJWZXJrYXVmc2F1dG9tYXQ8YnIvPlwiO1wiYXJ0c19jZW50cmVcIj09Yi5hbWVuaXR5JiYoYSs9XCJLdWx0dXJ6ZW50cnVtPGJyLz5cIik7XCJhcnR3b3JrXCI9PWIuYW1lbml0eSYmKGErPVwiS3Vuc3R3ZXJrIC8gS3Vuc3RvYmpla3Q8YnIvPlwiKTtcbiAgICBcIm11c2V1bVwiPT1iLmFtZW5pdHkmJihhKz1cIk11c2V1bTxici8+XCIpO1widGhlYXRyZVwiPT1iLmFtZW5pdHkmJihhKz1cIlRoZWF0ZXI8YnIvPlwiKTtcImNhdGhlZHJhbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLYXRoZWRyYWxlPGJyLz5cIik7XCJjaHVyY2hcIj09Yi5idWlsZGluZyYmKGErPVwiS2lyY2hlPGJyLz5cIik7XCJjaGFwZWxcIj09Yi5idWlsZGluZyYmKGErPVwiS2FwZWxsZTxici8+XCIpO1wicGxhY2Vfb2Zfd29yc2hpcFwiPT1iLmFtZW5pdHkmJihhKz1cIktpcmNoZSAvIEt1bHRzdFxcdTAwZTR0dGU8YnIvPlwiKTtcInZpbGxhZ2VcIj09Yi5hYmFuZG9uZWQmJihhKz1cIlZlcmxhc3NlbmUgU3RhZHQ8YnIvPlwiKTtcInRoZW1lX3BhcmtcIj09YltcImFiYW5kb25lZDp0b3VyaXNtXCJdJiYoYSs9XCJWZXJsYXNzZW5lciBWZXJnblxcdTAwZmNndW5nc3Bhcms8YnIvPlwiKTtcInByaXNvbl9jYW1wXCI9PWJbXCJhYmFuZG9uZWQ6YW1lbml0eVwiXSYmXCJjb25jZW50cmF0aW9uX2NhbXBcIj09W1wiY29uY2VudHJhdGlvbl9jYW1wXCJdJiZcbiAgICAoYSs9XCJLWiBHZWRlbmtzdFxcdTAwZTR0dGU8YnIvPlwiKTtcInllc1wiPT1iLmFiYW5kb25lZCYmXCJidW5rZXJcIj09Yi5taWxpdGFyeSYmKGErPVwiVmVybGFzc2VuZSBCdW5rZXJhbmxhZ2U8YnIvPlwiKTtcInllc1wiPT1iLmFiYW5kb25lZCYmXCJiYXJyYWNrc1wiPT1iLm1pbGl0YXJ5JiYoYSs9XCJWZXJsYXNzZW5lIE1pbGl0XFx1MDBlNHJiYXJhY2tlbjxici8+XCIpO1wieWVzXCI9PWIuYWJhbmRvbmVkJiZcImFpcmZpZWxkXCI9PWIubWlsaXRhcnkmJihhKz1cIlZlcmxhc3NlbmUgTWlsaXRcXHUwMGU0cmZsdWdwbGF0ejxici8+XCIpO1wibW9uYXN0ZXJ5XCI9PWIuaGlzdG9yaWMmJihhKz1cIkhpc3RvcmlzY2hlcyBLbG9zdGVyPGJyLz5cIik7XCJtb25hc3RlcnlcIj09Yi5hbWVuaXR5JiYoYSs9XCJLbG9zdGVyPGJyLz5cIik7XCJtb25hc3RlcnlcIj09Yi5idWlsZGluZyYmKGErPVwiS2xvc3Rlcjxici8+XCIpO1wibWFub3JcIj09Yi5oaXN0b3JpYyYmKGErPVwiR3V0c2hhdXMgLyBIZXJyZW5oYXVzPGJyLz5cIik7XCJib3VuZGFyeV9zdG9uZVwiPT1cbiAgICBiLmhpc3RvcmljJiYoYSs9XCJIaXN0b3Jpc2NoZXIgR3JlbnpzdGVpbjxici8+XCIpO1wibWlsZXN0b25lXCI9PWIuaGlzdG9yaWMmJihhKz1cIkhpc3RvcmlzY2hlciBNZWlsZW5zdGVpbjxici8+XCIpO1wibW9udW1lbnRcIj09Yi5oaXN0b3JpYyYmKGErPVwiTW9udW1lbnQ8YnIvPlwiKTtcInBhbGFjZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJQYWxhc3Q8YnIvPlwiKTtcIm1pbmVcIj09Yi5oaXN0b3JpYyYmKGErPVwiVmVybGFzc2VuZSBNaW5lPGJyLz5cIik7XCJydWluc1wiPT1iLmhpc3RvcmljJiYoYSs9XCJSdWluZTxici8+XCIpO1wiaGFyYm91clwiPT1iLmhpc3RvcmljX3VzYWdlJiYoYSs9XCJoaXN0b3Jpc2NoZXIgSGFmZW48YnIvPlwiKTtcInJ1bmVfc3RvbmVcIj09Yi5oaXN0b3JpYyYmKGErPVwiUnVuZW5zdGVpbjxici8+XCIpO1wiYmF0dGxlZmllbGRcIj09Yi5oaXN0b3JpYyYmKGErPVwiU2NobGFjaHRmZWxkPGJyLz5cIik7XCJibGFja3NtaXRoXCI9PWIuaGlzdG9yaWMmJihhKz1cIkhpc3RvcmlzY2hlIFNjaG1pZWRlPGJyLz5cIik7XG4gICAgaWYoXCJ0cmVlX3NocmluZVwiPT1iLmhpc3RvcmljfHxcIndheXNpZGVfc2hyaW5lXCI9PWIuaGlzdG9yaWMpYSs9XCJTY2hyZWluIC8gQmlsZHN0b2NrPGJyLz5cIjtcImNpdHlfZ2F0ZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJTdGFkdHRvcjxici8+XCIpO1wid2F5c2lkZV9jcm9zc1wiPT1iLmhpc3RvcmljJiYoYSs9XCJXZWdrcmV1ejxici8+XCIpO1wibW9udW1lbnRcIj09Yi5hbWVuaXR5JiYoYSs9XCJEZW5rbWFsPGJyLz5cIik7XCJtZW1vcmlhbFwiPT1iLmhpc3RvcmljJiYoYSs9XCJEZW5rbWFsPGJyLz5cIik7XCJvcHRpY2FsX3RlbGVncmFwaFwiPT1iLmhpc3RvcmljJiYoYSs9XCJPcHRpc2NoZXIgVGVsZWdyYXBoPGJyLz5cIik7aWYoXCJjYXN0bGVcIj09Yi5oaXN0b3JpYylpZihiLmNhc3RsZV90eXBlKXN3aXRjaChiLmNhc3RsZV90eXBlKXtjYXNlIFwiZGVmZW5zaXZlXCI6YSs9XCJCdXJnPGJyLz5cIjticmVhaztjYXNlIFwicGFsYWNlXCI6YSs9XCJQYWxhc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzdGF0ZWx5XCI6YSs9XCJTY2hsb3NzPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcIm1hbm9yXCI6YSs9XCJIZXJyZW5oYXVzPGJyLz5cIjticmVhaztjYXNlIFwiZm9ydHJlc3NcIjphKz1cIkZlc3R1bmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYXN0cnVtXCI6YSs9XCJSXFx1MDBmNm1pc2NoZXMgTWlsaXRcXHUwMGU0cmxhZ2VyPGJyLz5cIjticmVhaztjYXNlIFwic2hpcm9cIjphKz1cIlNoaXJvPGJyLz5cIjticmVhaztjYXNlIFwia3JlbWxpblwiOmErPVwiS3JlbWw8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJTY2hsb3NzIC8gQnVyZzxici8+XCJ9ZWxzZSBhKz1cIlNjaGxvc3MgLyBCdXJnPGJyLz5cIjtcImFyY2hhZW9sb2dpY2FsX3NpdGVcIj09Yi5oaXN0b3JpYyYmKGErPVwiQXJjaFxcdTAwZTRvbG9naXNjaGUgRnVuZHN0XFx1MDBlNHR0ZTxici8+XCIpO2lmKFwidG9tYlwiPT1iLmhpc3RvcmljKWlmKGIudG9tYilzd2l0Y2goYi50b21iKXtjYXNlIFwidHVtdWx1c1wiOmErPVwiSFxcdTAwZmNnZWxncmFiPGJyLz5cIjticmVhaztjYXNlIFwicm9jay1jdXRcIjphKz1cIkZlbHNncmFiPGJyLz5cIjticmVhaztcbiAgICAgICAgY2FzZSBcImh5cG9nZXVtXCI6YSs9XCJIeXBvZ1xcdTAwZTR1bTxici8+XCI7YnJlYWs7Y2FzZSBcIndhcl9ncmF2ZVwiOmErPVwiU29sZGF0ZW5mcmllZGhvZjxici8+XCI7YnJlYWs7Y2FzZSBcIm1hdXNvbGV1bVwiOmErPVwiTWF1c29sZXVtPGJyLz5cIjticmVhaztjYXNlIFwiY29sdW1iYXJpdW1cIjphKz1cIktvbHVtYmFyaXVtPGJyLz5cIjticmVhaztjYXNlIFwiY3J5cHRcIjphKz1cIktyeXB0YTxici8+XCI7YnJlYWs7Y2FzZSBcInB5cmFtaWRcIjphKz1cIlB5cmFtaWRlPGJyLz5cIjticmVhaztjYXNlIFwic2FyY29waGFndXNcIjphKz1cIlNhcmtvcGhhZzxici8+XCI7YnJlYWs7Y2FzZSBcInZhdWx0XCI6YSs9XCJHcnVmdDxici8+XCI7YnJlYWs7Y2FzZSBcInRvbWJzdG9uZVwiOmErPVwiR3JhYnN0ZWluPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiSGlzdG9yaXNjaGUgR3JhYnN0XFx1MDBlNHR0ZTxici8+XCJ9ZWxzZSBhKz1cIkhpc3RvcmlzY2hlIEdyYWJzdFxcdTAwZTR0dGU8YnIvPlwiO1wiYWNjb3VudGFudFwiPT1iLm9mZmljZSYmKGErPVxuICAgICAgICBcIkJ1Y2hoYWx0ZXIgLyBXaXJ0c2NoYWZ0cHJcXHUwMGZjZmVyPGJyLz5cIik7XCJhZG1pbmlzdHJhdGl2ZVwiPT1iLm9mZmljZSYmKGErPVwiS3JlaXMtIGJ6dy4gR2VtZWluZGViZWhcXHUwMGY2cmRlPGJyLz5cIik7XCJhcmNoaXRlY3RcIj09Yi5vZmZpY2UmJihhKz1cIkFyY2hpdGVrdHVyYlxcdTAwZmNybzxici8+XCIpO1wiYXNzb2NpYXRpb25cIj09Yi5vZmZpY2UmJihhKz1cIlZlcmVpbiwgVmVyZWluaWd1bmcgYnp3LiBJbnRlcmVzc2VuZ2VtZWluc2NoYWZ0PGJyLz5cIik7XCJwaHlzaWNpYW5cIj09Yi5vZmZpY2UmJihhKz1cIkFyenQ8YnIvPlwiKTtcImNhbXBpbmdcIj09Yi5vZmZpY2UmJihhKz1cIlJlemVwdGlvbiBDYW1waW5ncGxhdHogb2RlciBCXFx1MDBmY3JvIEZyZWl6ZWl0cGFyazxici8+XCIpO1wiY29tcGFueVwiPT1iLm9mZmljZSYmKGErPVwiU2l0eiBlaW5lciBwcml2YXRlbiBGaXJtYTxici8+XCIpO1wiZWR1Y2F0aW9uYWxfaW5zdGl0dXRpb25cIj09Yi5vZmZpY2UmJihhKz1cIkJpbGR1bmdzZWlucmljaHR1bmc8YnIvPlwiKTtcbiAgICBcImVtcGxveW1lbnRfYWdlbmN5XCI9PWIub2ZmaWNlJiYoYSs9XCJKb2ItQ2VudGVyIC8gQXJiZWl0c3Zlcm1pdHRsdW5nPGJyLz5cIik7XCJlc3RhdGVfYWdlbnRcIj09Yi5vZmZpY2UmJihhKz1cIkltbW9iaWxpZW5tYWtsZXIgLyBXb2hudW5nc2JhdWdlbm9zc2Vuc2NoYWZ0PGJyLz5cIik7XCJmb3Jlc3RyeVwiPT1iLm9mZmljZSYmKGErPVwiRm9yc3RhbXQ8YnIvPlwiKTtcImZvdW5kYXRpb25cIj09Yi5vZmZpY2UmJihhKz1cIkdlc2NoXFx1MDBlNGZ0c3N0ZWxsZSBlaW5lciBTdGlmdHVuZzxici8+XCIpO1wiZ292ZXJubWVudFwiPT1iLm9mZmljZSYmKGErPVwiQmVoXFx1MDBmNnJkZSAvIFJlZ2llcnVuZ3NlaW5yaWNodHVuZzxici8+XCIpO1wiZ3VpZGVcIj09Yi5vZmZpY2UmJihhKz1cIkJcXHUwMGZjcm8gZlxcdTAwZmNyIFRvdXJpc3RlbmZcXHUwMGZjaHJ1bmdlbjxici8+XCIpO1wiaW5zdXJhbmNlXCI9PWIub2ZmaWNlJiYoYSs9XCJWZXJzaWNoZXJ1bmdzYlxcdTAwZmNybzxici8+XCIpO1wiaXRcIj09Yi5vZmZpY2UmJihhKz1cIklULVVudGVybmVobWVuPGJyLz5cIik7XG4gICAgXCJsYXd5ZXJcIj09Yi5vZmZpY2UmJihhKz1cIlJlY2h0c2Fud2FsdHNrYW56bGVpPGJyLz5cIik7XCJuZXdzcGFwZXJcIj09Yi5vZmZpY2UmJihhKz1cIlplaXR1bmdzcmVkYWt0aW9uPGJyLz5cIik7XCJuZ29cIj09Yi5vZmZpY2UmJihhKz1cIkJcXHUwMGZjcm8gZWluZXIgTmljaHRyZWdpZXJ1bmdzb3JnYW5pc2F0aW9uPGJyLz5cIik7XCJub3RhcnlcIj09Yi5vZmZpY2UmJihhKz1cIk5vdGFyPGJyLz5cIik7XCJwb2xpdGljYWxfcGFydHlcIj09Yi5vZmZpY2UmJihhKz1cIkJcXHUwMGZjcm8gZWluZXIgcG9saXRpc2NoZW4gUGFydGVpPGJyLz5cIik7XCJxdWFuZ29cIj09Yi5vZmZpY2UmJihhKz1cIkJcXHUwMGZjcm8gZWluZXIgaGFsYnN0YWF0bGljaGVuIE9yZ2FuaXNhdGlvbjxici8+XCIpO1wicmVhbHRvclwiPT1iLm9mZmljZSYmKGErPVwiSW1tb2JpbGllbm1ha2xlciAvIFdvaG51bmdzYmF1Z2Vub3NzZW5zY2hhZnQ8YnIvPlwiKTtcInJlYWxfZXN0YXRlX2FnZW50XCI9PWIub2ZmaWNlJiYoYSs9XCJJbW1vYmlsaWVubWFrbGVyIC8gV29obnVuZ3NiYXVnZW5vc3NlbnNjaGFmdDxici8+XCIpO1xuICAgIFwicmVnaXN0ZXJcIj09Yi5vZmZpY2UmJihhKz1cIlN0YW5kZXNhbXQ8YnIvPlwiKTtcInJlbGlnaW9uXCI9PWIub2ZmaWNlJiYoYSs9XCJCXFx1MDBmY3JvIGVpbmVyIHJlbGlnaVxcdTAwZjZzZW4gSW5zdGFuejxici8+XCIpO1wicmVzZWFyY2hcIj09Yi5vZmZpY2UmJihhKz1cIkZvcnNjaHVuZ3N1bnRlcm5laG1lbiBvZGVyIC1pbnN0aXR1dDxici8+XCIpO1widGF4XCI9PWIub2ZmaWNlJiYoYSs9XCJGaW5hbnphbXQ8YnIvPlwiKTtcInRlbGVjb21tdW5pY2F0aW9uXCI9PWIub2ZmaWNlJiYoYSs9XCJUZWxla29tbXVuaWthdGlvbnNmaXJtYTxici8+XCIpO1widHJhdmVsX2FnZW50XCI9PWIub2ZmaWNlJiYoYSs9XCJTaXR6IGVpbmVzIFJlaXNldW50ZXJuZWhtZW5zPGJyLz5cIik7XCJ3YXRlcl91dGlsaXR5XCI9PWIub2ZmaWNlJiYoYSs9XCJXYXNzZXJ3aXJ0c2NoYWZ0c2FtdDxici8+XCIpO1widGhlcmFwaXN0XCI9PWIub2ZmaWNlJiYoYSs9XCJUaGVyYXBldXQ8YnIvPlwiKTtcImNpdHlcIj09Yi5wbGFjZSYmKGErPVwiR3JvXFx1MDBkZnN0YWR0PGJyLz5cIik7XG4gICAgXCJ0b3duXCI9PWIucGxhY2UmJihhKz1cIlN0YWR0L0tsZWluc3RhZHQ8YnIvPlwiKTtcInZpbGxhZ2VcIj09Yi5wbGFjZSYmKGErPVwiRG9yZjxici8+XCIpO1wiY29udGluZW50XCI9PWIucGxhY2UmJihhKz1cIktvbnRpbmVudDxici8+XCIpO1wib2NlYW5cIj09Yi5wbGFjZSYmKGErPVwiT3plYW48L2JyPlwiKTtcInRyYWNrXCI9PWIuaGlnaHdheSYmKGErPVwiRm9yc3QtLCBXYWxkIHVuZCBGZWxkd2VnPGJyLz5cIik7XCJyYWNld2F5XCI9PWIuaGlnaHdheSYmKGErPVwiTW90b3JzcG9ydGJhaG48YnIvPlwiKTtcImRlc2lnbmF0ZWRcIj09Yi5iaWN5Y2xlJiYoYSs9XCJSYWR3ZWc8YnIvPlwiKTtcInBhdGhcIj09Yi5oaWdod2F5JiYoYSs9XCJGdVxcdTAwZGZ3ZWc8YnIvPlwiKTtcInBhcmtpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJQYXJrcGxhdHo8YnIvPlwiKTtcInNlcnZpY2VzXCI9PWIuaGlnaHdheSYmKGErPVwiUmFzdHN0XFx1MDBlNHR0ZTxici8+XCIpO1wicmVzdF9hcmVhXCI9PWIuaGlnaHdheSYmKGErPVwiUmFzdHBsYXR6PGJyLz5cIik7XCJ0dXJuaW5nX2NpcmNsZVwiPT1cbiAgICBiLmhpZ2h3YXkmJihhKz1cIldlbmRlcGxhdHovV2VuZGVoYW1tZXI8YnIvPlwiKTtcInNlcnZpY2VcIj09Yi5oaWdod2F5JiYoYSs9XCJadWZhaHJ0c3N0cmFcXHUwMGRmZSAvIEVyc2NobGllXFx1MDBkZnVuZ3N3ZWc8YnIvPlwiKTtcIm1vdG9yd2F5XCI9PWIuaGlnaHdheSYmKGErPVwiQXV0b2JhaG48YnIvPlwiKTtcIm1vdG9yd2F5X2p1bmN0aW9uXCI9PWIuaGlnaHdheSYmKGErPVwiQXV0b2JhaG5hdWZmYWhydDxici8+XCIpO1wiYnJpZGxld2F5XCI9PWIuaGlnaHdheSYmKGErPVwiUmVpdHdlZzxici8+XCIpO1wieWVzXCI9PWIub25ld2F5JiYoYSs9XCJFaW5iYWhuc3RyYVxcdTAwZGZlPGJyLz5cIik7XCJ5ZXNcIj09Yi5wYXJrX3JpZGUmJihhKz1cIlBhcmsgYW5kIFJpZGU8YnIvPlwiKTtcInVua25vd25cIj09Yi5wYXJrX3JpZGUmJihhKz1cIlBhcmsgYW5kIFJpZGU8YnIvPlwiKTtcImJ1c1wiPT1iLnBhcmtfcmlkZSYmKGErPVwiUGFyayBhbmQgUmlkZTxici8+XCIpO1widHJhbVwiPT1iLnBhcmtfcmlkZSYmKGErPVwiUGFyayBhbmQgUmlkZTxici8+XCIpO1xuICAgIFwiYnVzX3N0b3BcIj09Yi5oaWdod2F5JiYoYSs9XCJCdXNoYWx0ZXN0ZWxsZTxici8+XCIpO1wicGVkZXN0cmlhblwiPT1iLmhpZ2h3YXkmJihhKz1cIkZ1XFx1MDBkZmdcXHUwMGU0bmdlcnpvbmU8YnIvPlwiKTtcInN0cmVldF9sYW1wXCI9PWIuaGlnaHdheSYmKGErPVwiU3RyYXNzZW5sYXRlcm5lPGJyLz5cIik7XCJ0cmFmZmljX3NpZ25hbHNcIj09Yi5oaWdod2F5JiYoYSs9XCJBbXBlbDxici8+XCIpO1widHJhZmZpY19zaWduYWxzXCI9PWIuY3Jvc3NpbmcmJihhKz1cIkZ1XFx1MDBkZmdcXHUwMGU0bmdlcmFtcGVsPGJyLz5cIik7XCJzcGVlZF9jYW1lcmFcIj09Yi5oaWdod2F5JiYoYSs9XCJCbGl0emVyPGJyLz5cIik7XCJ5ZXNcIj09Yi50cmFmZmljX2NhbG1pbmcmJihyZXQrPVwiVmVya2VocnNiZXJ1aGlndGVyIEJlcmVpY2g8L2JyPlwiKTtcImJ1bXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkt1cnplIEJvZGVud2VsbGU8L2JyPlwiKTtcImNoaWNhbmVcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIlp1IHVtZmFocmVuZGVuZXMgSGluZGVybmlzczwvYnI+XCIpO1xuICAgIFwiY2hva2VyXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJGYWhyYmFobnZlcmVuZ3VuZywgenUgdW1mYWhyZW5kZSBIaW5kZXJuaXNzZSBtXFx1MDBmNmdsaWNoPC9icj5cIik7XCJjdXNoaW9uXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJCb2RlbndlbGxlIG1pdCBMXFx1MDBmY2NrZW4gYXVzIG1laHJlcmVuIHJlY2h0ZWNraWdlbiBIdWNrZWxuPC9icj5cIik7XCJodW1wXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJ2ZXJnbGVpY2hiYXJlIEJvZGVud2VsbGUgbWl0IGV0d2FyIGVpbmVyIExcXHUwMGU0bmdlIHZvbiAyLTRNPC9icj5cIik7XCJpc2xhbmRcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkVpbmUgVmVya2VocnNpbnNlbDwvYnI+XCIpO1wicnVtYmxlX3N0cmlwXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJIb2xwZXJzdHJlaWZlbjwvYnI+XCIpO1widGFibGVcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImxhbmdlIEJvZGVud2VsbGVuIG1pdCBmbGFjaGVuIE1pdHRlbHN0XFx1MDBmY2NrPC9icj5cIik7XG4gICAgXCJidW95X2NhcmRpbmFsXCI9PWJbXCJzZWFtYXJrOnR5cGVcIl0mJihhKz1cIkthcmRpbmFsc3Rvbm5lPGJyLz5cIik7XCJidW95X2xhdGVyYWxcIj09YltcInNlYW1hcms6dHlwZVwiXSYmKGErPVwiTGF0ZXJhbHRvbm5lPGJyLz5cIik7XCJidW95X2lzb2xhdGVkX2RhbmdlclwiPT1iW1wic2VhbWFyazp0eXBlXCJdJiYoYSs9XCJHZWZhaHJlbnRvbm5lPGJyLz5cIik7XCJwZXJjaFwiPT1iW1wic2VhbWFyazpiZWFjb25fbGF0ZXJhbDpzaGFwZVwiXSYmKGErPVwiUHJpY2tlPGJyLz5cIik7XCJmdWVsXCI9PWIuYW1lbml0eSYmXCJmdWVsX3N0YXRpb25cIj09YltcInNlYW1hcms6c21hbGxfY3JhZnRfZmFjaWxpdHk6Y2F0ZWdvcnlcIl0/YSs9XCJTY2hpZmZzdGFua3N0ZWxsZTxici8+XCI6XCJmdWVsXCI9PWIuYW1lbml0eSYmKGErPVwiVGFua3N0ZWxsZTxici8+XCIpO2lmKFwiY2hhcmdpbmdfc3RhdGlvblwiPT1iLmFtZW5pdHkpe3ZhciBhPWErXCJMYWRlc3RhdGlvbiAvIFN0cm9tdGFua3N0ZWxsZTxici8+XCIsYz1iLnZvbHRhZ2U7aWYoYi5jYXIpe3N3aXRjaChiLmNhcil7Y2FzZSBcInllc1wiOmErPVxuICAgICAgICBcIkZcXHUwMGZjciBBdXRvczogSmFcIjticmVhaztjYXNlIFwibm9cIjphKz1cIkZcXHUwMGZjciBBdXRvczogTmVpblwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJGXFx1MDBmY3IgQXV0b3M6IFVuYmVrYW5udFwifWErPVwiPGJyLz5cIn1lbHNlIGErPVwiRlxcdTAwZmNyIEF1dG9zOiBVbmJla2FubnQ8YnIvPlwiO2lmKGIuYmljeWNsZSl7c3dpdGNoKGIuYmljeWNsZSl7Y2FzZSBcInllc1wiOmErPVwiRlxcdTAwZmNyIEUtQmlrZTogSmFcIjticmVhaztjYXNlIFwibm9cIjphKz1cIkZcXHUwMGZjciBFLUJpa2U6IE5laW5cIjticmVhaztkZWZhdWx0OmErPVwiRlxcdTAwZmNyIEUtQmlrZTogVW5iZWthbm50XCJ9YSs9XCI8YnIvPlwifWVsc2UgYSs9XCJGXFx1MDBmY3IgRS1CaWtlOiBVbmJla2FubnQ8YnIvPlwiO1wibm9cIj09YltcInNvY2tldDpzY2h1a29cIl0mJihhKz1cIlN0ZWNrZXIgU2NodWtvOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDpzY2h1a29cIl0mJihhKz1cIlN0ZWNrZXIgU2NodWtvOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDpjZWVfYmx1ZVwiXSYmXG4gICAgKGErPVwiU3RlY2tlciBDRUUgQmxhdTogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6Y2VlX2JsdWVcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIEJsYXU6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OmNlZV9yZWRfMTZhXCJdJiYoYSs9XCJTdGVja2VyIENFRSBSb3QgMTZhOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDpjZWVfcmVkXzE2YVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDE2YTogSmE8YnIvPlwiKTtcIm5vXCI9PWJbXCJzb2NrZXQ6Y2VlX3JlZF8zMmFcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIFJvdCAzMmE6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OmNlZV9yZWRfMzJhXCJdJiYoYSs9XCJTdGVja2VyIENFRSBSb3QgMzJhOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDpjZWVfcmVkXzY0YVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDY0YTogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6Y2VlX3JlZF82NGFcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIFJvdCA2NGE6IEphPGJyLz5cIik7XG4gICAgICAgIFwibm9cIj09YltcInNvY2tldDpjZWVfcmVkXzEyNWFcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIFJvdCAxMjVhOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDpjZWVfcmVkXzEyNWFcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIFJvdCAxMjVhOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDpuZW1hXzVfMTVcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSA1IDE1OiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDpuZW1hXzVfMTVcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSA1IDE1OiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDpuZW1hXzVfMjBcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSA1IDIwOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDpuZW1hXzVfMjBcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSA1IDIwOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDpuZW1hXzE0XzMwXCJdJiYoYSs9XCJTdGVja2VyIE5lbWEgMTQgMzA6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0Om5lbWFfMTRfMzBcIl0mJihhKz1cbiAgICAgICAgICAgIFwiU3RlY2tlciBOZW1hIDE0IDMwOiBKYTxici8+XCIpO1wiTmVpblwiPT1iW1wic29ja2V0Om5lbWFfMTRfNTBcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSAxNCAgNTA6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0Om5lbWFfMTRfNTBcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSAxNCA1MDogSmE8YnIvPlwiKTtcIm5laW5cIj09YltcInNvY2tldDpiczEzNjNcIl0mJihhKz1cIlN0ZWNrZXIgQlMgMTM2MzogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6YnMxMzYzXCJdJiYoYSs9XCJTdGVja2VyIEJTIDEzNjM6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OnR5cGUxXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAxOk5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OnR5cGUxXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAxOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDp0eXBlMV9jb21ib1wiXSYmKGErPVwiU3RlY2tlciBUeXAgMSBLb21ibzogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6dHlwZTFfY29tYm9cIl0mJlxuICAgICAgICAoYSs9XCJTdGVja2VyIFR5cCAxIEtvbWJvOiBKYTxici8+XCIpO1wiTmVpblwiPT1iW1wic29ja2V0OnR5cGUyXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAyOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDp0eXBlMlwiXSYmKGErPVwiU3RlY2tlciBUeXAgMjogSmE8YnIvPlwiKTtcIm5vXCI9PWJbXCJzb2NrZXQ6dHlwZTJfY29tYm9cIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDIgS29tYm86IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OnR5cGUyX2NvbWJvXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAyIEtvbWJvOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDp0eXBlM1wiXSYmKGErPVwiU3RlY2tlciBUeXA6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OnR5cGUzXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAzOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDpjaGFkZW1vXCJdJiYoYSs9XCJTdGVja2VyIENIQWRlTU86IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OmNoYWRlbW9cIl0mJihhKz1cIlN0ZWNrZXIgQ0hBZGVNTzogSmE8YnIvPlwiKTtcbiAgICAgICAgXCJub1wiPT1iW1wic29ja2V0Om1hZ25lX2NoYXJnZVwiXSYmKGErPVwiU3RlY2tlciBNYWduZSA6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0Om1hZ25lX2NoYXJnZVwiXSYmKGErPVwiU3RlY2tlciBNYWduZSA6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OnRlc2xhX3N0YW5kYXJkXCJdJiYoYSs9XCJTdGVja2VyIFRlc2xhIFN0YW5kYXJkOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDp0ZXNsYV9zdGFuZGFyZFwiXSYmKGErPVwiU3RlY2tlciBUZXNsYSBTdGFuZGFyZDogTmVpbjxici8+XCIpO1wibm9cIj09YltcInNvY2tldDp0ZXNsYV9zdXBlcmNoYXJnZVwiXSYmKGErPVwiU3RlY2tlciBUZXNsYSBTY2huZWxsbGFkZXN0YXRpb246IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OnRlc2xhX3N1cGVyY2hhcmdlXCJdJiYoYSs9XCJTdGVja2VyIFRlc2xhIFNjaG5lbGxsYWRlc3RhdGlvbjogSmE8YnIvPlwiKTtcIm5vXCI9PWJbXCJzb2NrZXQ6dGVzbGFfcm9hZHN0ZXJcIl0mJihhKz1cIlN0ZWNrZXIgVGVzbGEgUm9hZHN0ZXI6IE5laW48YnIvPlwiKTtcbiAgICAgICAgXCJ5ZXNcIj09YltcInNvY2tldDp0ZXNsYV9yb2Fkc3RlclwiXSYmKGErPVwiU3RlY2tlciBUZXNsYSBSb2Fkc3RlcjogSmE8YnIvPlwiKTtiW1wic29ja2V0OnNjaHVrb1wiXSYmKGErPVwiU3RlY2tlciBTY2h1a286IFwiK2JbXCJzb2NrZXQ6c2NodWtvXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfYmx1ZVwiXSYmKGErPVwiU3RlY2tlciBDRUUgQmxhdTogXCIrYltcInNvY2tldDpjZWVfYmx1ZVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6Y2VlX3JlZF8xNmFcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIFJvdCAxNmE6IFwiK2JbXCJzb2NrZXQ6Y2VlX3JlZF8xNmFcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmNlZV9yZWRfMzJhXCJdJiYoYSs9XCJTdGVja2VyIENFRSBSb3QgMzJhOiBcIitiW1wic29ja2V0OmNlZV9yZWRfMzJhXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfcmVkXzY0YVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDY0YTogXCIrYltcInNvY2tldDpjZWVfcmVkXzY0YVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6Y2VlX3JlZF8xMjVhXCJdJiZcbiAgICAgICAgKGErPVwiU3RlY2tlciBDRUUgUm90IDEyNWE6IFwiK2JbXCJzb2NrZXQ6Y2VlX3JlZF8xMjVhXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpuZW1hXzVfMTVcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSA1IDE1OiBcIitiW1wic29ja2V0Om5lbWFfNV8xNVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6bmVtYV81XzIwXCJdJiYoYSs9XCJTdGVja2VyIE5lbWEgNSAyMDogXCIrYltcInNvY2tldDpuZW1hXzVfMjBcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om5lbWFfMTRfMzBcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSAxNCAzMDogXCIrYltcInNvY2tldDpuZW1hXzE0XzMwXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpuZW1hXzE0XzUwXCJdJiYoYSs9XCJTdGVja2VyIE5lbWEgMTQgNTA6IFwiK2JbXCJzb2NrZXQ6bmVtYV8xNF81MFwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6YnMxMzYzXCJdJiYoYSs9XCJTdGVja2VyIEJTIDEzNjM6IFwiK2JbXCJzb2NrZXQ6YnMxMzYzXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlMVwiXSYmKGErPVwiU3RlY2tlciBUeXAgMTogXCIrXG4gICAgICAgICAgICBiW1wic29ja2V0OnR5cGUxXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlMV9jb21ib1wiXSYmKGErPVwiU3RlY2tlciBUeXAgMSBLb21ibzogXCIrYltcInNvY2tldDpzY2h1a29cIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OnR5cGUyXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAyOiBcIitiW1wic29ja2V0OnR5cGUyXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlMl9jb21ib1wiXSYmKGErPVwiU3RlY2tlciBUeXAgMiBLb21ibzogXCIrYltcInNvY2tldDp0eXBlMl9jb21ib1wiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dHlwZTNcIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDM6IFwiK2JbXCJzb2NrZXQ6dHlwZTNcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmNoYWRlbW9cIl0mJihhKz1cIlN0ZWNrZXIgQ0hBZGVNTzogXCIrYltcInNvY2tldDpjaGFkZW1vXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDptYWduZV9jaGFyZ2VcIl0mJihhKz1cIlN0ZWNrZXIgTWFnbmUgOiBcIitiW1wic29ja2V0Om1hZ25lX2NoYXJnZVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dGVzbGFfc3RhbmRhcmRcIl0mJlxuICAgICAgICAoYSs9XCJTdGVja2VyIFRlc2xhIFN0YW5kYXJkOiBcIitiW1wic29ja2V0OnRlc2xhX3N0YW5kYXJkXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0ZXNsYV9zdXBlcmNoYXJnZVwiXSYmKGErPVwiU3RlY2tlciBUZXNsYSBTY2huZWxsbGFkZXN0YXRpb246IFwiK2JbXCJzb2NrZXQ6dGVzbGFfc3VwZXJjaGFyZ2VcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OnRlc2xhX3JvYWRzdGVyXCJdJiYoYSs9XCJTdGVja2VyIFRlc2xhIFJvYWRzdGVyOiBcIitiW1wic29ja2V0OnRlc2xhX3JvYWRzdGVyXCJdK1wiPGJyLz5cIik7YSs9XCI8YnIvPlwiO2Iudm9sdGFnZSYmKGErPVwiVm9sdDogXCIrYytcIjxici8+XCIpfVwieWVzXCI9PWIudHVubmVsJiYoYSs9XCJUdW5uZWw8YnIvPlwiKTtpZihiLmJyaWRnZSlzd2l0Y2goYSs9XCJCclxcdTAwZmNja2VuLVR5cDogXCIsYi5icmlkZ2Upe2Nhc2UgXCJzd2luZ1wiOmErPVwiRHJlaGJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJhcXVlZHVjdFwiOmErPVwiSGlzdG9yaXNjaGUgV2Fzc2VycGlwZWxpbmVcIjticmVhaztcbiAgICAgICAgY2FzZSBcImJhc2N1bGVcIjphKz1cIktsYXBwIGJ6dy4gV2lwcGJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJib2FyZHdhbGtcIjphKz1cIkJvaGxlbndlZ1wiO2JyZWFrO2Nhc2UgXCJjYW50aWxldmVyXCI6YSs9XCJBdXNsZWdlcmJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJjb3ZlcmVkXCI6YSs9XCJnZWRlY2t0ZSBCclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwiZHJhd2JyaWRnZVwiOmErPVwiS2xhcHBiclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwiaHVtcGJhY2tcIjphKz1cIkRyZWhiclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwibGlmdFwiOmErPVwiSHViYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcImxvd193YXRlcl9jcm9zc2luZ1wiOmErPVwiSXJpc2NoZSBCclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwibW92ZWFibGVcIjphKz1cIkJld2VnbGljaGUgQnJcXHUwMGZjY2tlblwiO2JyZWFrO2Nhc2UgXCJwb250b29uXCI6YSs9XCJTY2h3aW1tYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcInN1c3BlbnNpb25cIjphKz1cIkhcXHUwMGU0bmdlYnJcXHUwMGZjY2tlXCI7XG4gICAgICAgICAgICBicmVhaztjYXNlIFwidHJlc3RsZVwiOmErPVwiVHJlc3RsZS1CclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwidmlhZHVjdFwiOmErPVwiVmlhZHVrdFwifWlmKGJbXCJicmlkZ2U6bW92YWJsZVwiXSlzd2l0Y2goYltcImJyaWRnZTptb3ZhYmxlXCJdKXtjYXNlIFwic3dpbmdcIjphKz1cIkRyZWhiclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwiYmFzY3VsZVwiOmErPVwiS2xhcHAgYnp3LiBXaXBwYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcImRyYXdicmlkZ2VcIjphKz1cIktsYXBwYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcImxpZnRcIjphKz1cIkh1YmJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJzdWJtZXJzaWJsZVwiOmErPVwiU2Vua2JyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJ0cmFuc3BvcnRlclwiOmErPVwiU2Nod2ViZWZcXHUwMGU0aHJlXCI7YnJlYWs7Y2FzZSBcInJldHJhY3RhYmxlXCI6YSs9XCJTY2h1YmJyXFx1MDBmY2NrZVwifWlmKFwibnVyc2luZ19ob21lXCI9PWIuYW1lbml0eXx8XCJyZXRpcmVtZW50X2hvbWVcIj09Yi5hbWVuaXR5KWErPVxuICAgICAgICBcIlNlbmlvcmVuaGVpbSAvIFBmbGVnZWhlaW08YnIvPlwiO1wic29jaWFsX2ZhY2lsaXR5XCI9PWIuYW1lbml0eSYmKGErPVwiQWxsZy4gc296aWFsZSBFaW5yaWNodHVuZzxici8+XCIpO2lmKGIuc29jaWFsX2ZhY2lsaXR5KXtcImdyb3VwX2hvbWVcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJlwic2VuaW9yXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJTZW5pb3JlbmhlaW08YnIvPlwiKTtcImFzc2lzdGVkX2xpdmluZ1wiPT1iLnNvY2lhbF9mYWNpbGl0eSYmKGErPVwiQmV0cmV1dGVzIFdvaG5lbjxici8+XCIpO1wib3V0cmVhY2hcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJihhKz1cIkJlcmF0dW5nc3N0ZWxsZTxici8+XCIpO1wid29ya3Nob3BcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJihhKz1cInNvemlhbGUgV2Vya3N0YXR0PGJyLz5cIik7aWYoXCJhbWJ1bGF0b3J5X2NhcmVcIj09Yi5zb2NpYWxfZmFjaWxpdHl8fFwiaGVhbHRoY2FyZVwiPT1iLnNvY2lhbF9mYWNpbGl0eSlhKz1cIkFtYnVsYW50ZXIgUGZsZWdlZGllbnN0PGJyLz5cIjtcbiAgICAgICAgXCJzaGVsdGVyXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiZcInNlbmlvclwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiVGFnZXMtIHUuIEt1cnp6ZWl0cGZsZWdlPGJyLz5cIik7XCJzaGVsdGVyXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiZcImFidXNlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiTm90dW50ZXJrdW5mdDxici8+XCIpO1wiZm9vZF9iYW5rXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJMZWJlbnNtaXR0ZWxoaWxmZTxici8+XCIpO1wiaG9zcGljZVwiPT1iLnNvY2lhbF9mYWNpbGl0eSYmKGErPVwiSG9zcGl6PGJyLz5cIil9Yi5icmV3ZXJ5JiYoYSs9XCJBdXNnZXNjaGVua3RlIEJpZXJzb3J0ZW46IFwiK2IuYnJld2VyeStcIjxici8+XCIpO1wiYWxjb2hvbFwiPT1iLnNob3AmJihhKz1cIlNwaXJpdHVvc2VubGFkZW48YnIvPlwiKTtcImJha2VyeVwiPT1iLnNob3AmJihhKz1cIkJcXHUwMGU0Y2tlcmVpPGJyLz5cIik7XCJiZXZlcmFnZXNcIj09Yi5zaG9wJiYoYSs9XCJHZXRyXFx1MDBlNG5rZWhhbmRlbDxici8+XCIpO1xuICAgIFwiYnV0Y2hlclwiPT1iLnNob3AmJihhKz1cIkZsZWlzY2hlcmVpPGJyLz5cIik7XCJjaGVlc2VcIj09Yi5zaG9wJiYoYSs9XCJLXFx1MDBlNHNlZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJjaG9jb2xhdGVcIj09Yi5zaG9wJiYoYSs9XCJTY2hva29sYWRlbmZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1wiY29mZmVlXCI9PWIuc2hvcCYmKGErPVwiS2FmZmVlZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJjb25mZWN0aW9uZXJ5XCI9PWIuc2hvcCYmKGErPVwiU1xcdTAwZmNcXHUwMGRmd2FyZW5sYWRlbjxici8+XCIpO1wiY29udmVuaWVuY2VcIj09Yi5zaG9wJiYoYSs9XCJMZWJlbnNtaXR0ZWxnZXNjaFxcdTAwZTRmdDxici8+XCIpO1wiZGVsaVwiPT1iLnNob3AmJihhKz1cIkZlaW5rb3N0bGFkZW48YnIvPlwiKTtcImRhaXJ5XCI9PWIuc2hvcCYmKGErPVwiTWlsY2hsYWRlbjxici8+XCIpO1wiZmFybVwiPT1iLnNob3AmJihhKz1cIkhvZmxhZGVuPGJyLz5cIik7XCJncmVlbmdyb2NlclwiPT1iLnNob3AmJihhKz1cIkdlbVxcdTAwZmNzZWhcXHUwMGU0bmRsZXI8YnIvPlwiKTtcbiAgICBcImdyb2NlcnlcIj09Yi5zaG9wJiYoYSs9XCJMZWJlbnNtaXR0ZWxnZXNjaFxcdTAwZTRmdDxici8+XCIpO1wib3JnYW5pY1wiPT1iLnNob3AmJihhKz1cIkJpby1MYWRlbiwgUmVmb3JtaGF1czxici8+XCIpO1wicGFzdGFcIj09Yi5zaG9wJiYoYSs9XCJQYXN0YWdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJzZWFmb29kXCI9PWIuc2hvcCYmKGErPVwiRmlzY2hmYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcInRlYVwiPT1iLnNob3AmJihhKz1cIlRlZWZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1wid2luZVwiPT1iLnNob3AmJihhKz1cIldlaW5oYW5kbHVuZzxici8+XCIpO1wiZGVwYXJ0bWVudF9zdG9yZVwiPT1iLnNob3AmJihhKz1cIkthdWZoYXVzPGJyLz5cIik7XCJnZW5lcmFsXCI9PWIuc2hvcCYmKGErPVwiR2VtaXNjaHR3YXJlbmhhbmRsdW5nPGJyLz5cIik7XCJraW9za1wiPT1iLnNob3AmJihhKz1cIktpb3NrPGJyLz5cIik7XCJtYWxsXCI9PWIuc2hvcCYmKGErPVwiRWlua2F1ZnN6ZW50cnVtPGJyLz5cIik7XCJzdXBlcm1hcmtldFwiPT1iLnNob3AmJlxuICAgIChhKz1cIlN1cGVybWFya3Q8YnIvPlwiKTtcImJhYnlfZ29vZHNcIj09Yi5zaG9wJiYoYSs9XCJCYWJ5ZmFjaG1hcmt0PGJyLz5cIik7XCJiYWdcIj09Yi5zaG9wJiYoYSs9XCJUYXNjaGVuIHVuZCBLb2ZmZXI8YnIvPlwiKTtcImJvdXRpcXVlXCI9PWIuc2hvcCYmKGErPVwiQm91dGlxdWU8YnIvPlwiKTtcImNsb3RoZXNcIj09Yi5zaG9wJiYoYSs9XCJCZWtsZWlkdW5nPGJyLz5cIik7XCJmYWJyaWNcIj09Yi5zaG9wJiYoYSs9XCJUZXh0aWxnZXNjaFxcdTAwZTRmdDxici8+XCIpO1wiZmFzaGlvblwiPT1iLnNob3AmJihhKz1cIkZhc2hpb248YnIvPlwiKTtcImpld2VscnlcIj09Yi5zaG9wJiYoYSs9XCJKdXdlbGllcjxici8+XCIpO1wibGVhdGhlclwiPT1iLnNob3AmJihhKz1cIkxlZGVyd2FyZW48YnIvPlwiKTtcInNob2VzXCI9PWIuc2hvcCYmKGErPVwiU2NodWhmYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcInZhcmlldHlfc3RvcmVcIj09Yi5zaG9wJiYoYSs9XCJFaW4tRXVyby1MYWRlbjxici8+XCIpO1wiY2hlbWlzdFwiPT1iLnNob3AmJihhKz1cIkRyb2dlcmllPGJyLz5cIik7XG4gICAgXCJjb3NtZXRpY3NcIj09Yi5zaG9wJiYoYSs9XCJLb3NtZXRpa2ZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1wiZHJ1Z3N0b3JlXCI9PWIuc2hvcCYmKGErPVwiRHJvZ2VyaWUgb2RlciBBcG90aGVrZSAodmVyYWx0ZXQpPGJyLz5cIik7XCJwZXJmdW1lcnlcIj09Yi5zaG9wJiYoYSs9XCJQYXJmXFx1MDBmY21lcmllPGJyLz5cIik7XCJlcm90aWNcIj09Yi5zaG9wJiYoYSs9XCJFcm90aWtoYW5kZWw8YnIvPlwiKTtcImhhaXJkcmVzc2VyXCI9PWIuc2hvcCYmKGErPVwiRnJpc2V1cjxici8+XCIpO1wiaGVhcmluZ19haWRzXCI9PWIuc2hvcCYmKGErPVwiSFxcdTAwZjZyZ2VyXFx1MDBlNHRlPGJyLz5cIik7XCJoZXJiYWxpc3RcIj09Yi5zaG9wJiYoYSs9XCJLclxcdTAwZTR1dGVyaGFuZGVsPGJyLz5cIik7XCJtYXNzYWdlXCI9PWIuc2hvcCYmKGErPVwiTWFzc2FnZXNhbG9uPGJyLz5cIik7XCJtZWRpY2FsX3N1cHBseVwiPT1iLnNob3AmJihhKz1cIlNhbml0XFx1MDBlNHRzaGF1czxici8+XCIpO1wib3B0aWNpYW5cIj09Yi5zaG9wJiYoYSs9XCJPcHRpa2VyPGJyLz5cIik7XG4gICAgXCJ0YXR0b29cIj09Yi5zaG9wJiYoYSs9XCJUXFx1MDBlNHRvd2llcmVyPGJyLz5cIik7XCJiYXRocm9vbV9mdXJuaXNoaW5nXCI9PWIuc2hvcCYmKGErPVwiQmFkbVxcdTAwZjZiZWwgdW5kIC1hY2Nlc3NvaXJlczxici8+XCIpO1wiZG9pdHlvdXJzZWxmXCI9PWIuc2hvcCYmKGErPVwiQmF1bWFya3QvQmF1c3RvZmZoYW5kZWw8YnIvPlwiKTtcImVuZXJneVwiPT1iLnNob3AmJihhKz1cIkVuZXJnaWVoYW5kZWw8YnIvPlwiKTtcImZsb3Jpc3RcIj09Yi5zaG9wJiYoYSs9XCJCbHVtZW5nZXNjaFxcdTAwZTRmdDxici8+XCIpO1wiZnVybmFjZVwiPT1iLnNob3AmJihhKz1cIk9mZW5mYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcImdhcmRlbl9jZW50cmVcIj09Yi5zaG9wJiYoYSs9XCJHYXJ0ZW5jZW50ZXI8YnIvPlwiKTtcImdhc1wiPT1iLnNob3AmJihhKz1cIkZhY2hnZXNjaFxcdTAwZTRmdCBmXFx1MDBmY3IgdGVjaG5pc2NoZSBHYXNlPGJyLz5cIik7XCJnbGF6aWVyeVwiPT1iLnNob3AmJihhKz1cIkdsYXNlcmVpPGJyLz5cIik7XCJoYXJkd2FyZVwiPT1cbiAgICBiLnNob3AmJihhKz1cIkVpc2Vud2FyZW48YnIvPlwiKTtcImhvdXNld2FyZVwiPT1iLnNob3AmJihhKz1cIkhhdXNoYWx0c3dhcmVuIHVuZCBJbm5lbmVpbnJpY2h0dW5nPGJyLz5cIik7XCJsb2Nrc21pdGhcIj09Yi5zaG9wJiYoYSs9XCJTY2hsXFx1MDBmY3NzZWxkaWVuc3Q8YnIvPlwiKTtcInBhaW50XCI9PWIuc2hvcCYmKGErPVwiRmFyYmVuZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJ0cmFkZVwiPT1iLnNob3AmJihhKz1cIkJhdXN0b2ZmaGFuZGVsPGJyLz5cIik7XCJhbnRpcXVlc1wiPT1iLnNob3AmJihhKz1cIkFudGlxdWl0XFx1MDBlNHRlbjxici8+XCIpO1wiYmVkXCI9PWIuc2hvcCYmKGErPVwiQmV0dGVuLSB1bmQgTWF0cmF0emVuZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcImNhbmRsZXNcIj09Yi5zaG9wJiYoYSs9XCJLZXJ6ZW5nZXNjaFxcdTAwZTRmdDxici8+XCIpO1wiY2FycGV0XCI9PWIuc2hvcCYmKGErPVwiVGVwcGljaGZhY2hoYW5kZWw8YnIvPlwiKTtcImN1cnRhaW5cIj09Yi5zaG9wJiYoYSs9XCJHYXJkaW5lbmZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1xuICAgIFwiZnVybml0dXJlXCI9PWIuc2hvcCYmKGErPVwiTVxcdTAwZjZiZWwtIHVuZCBFaW5yaWNodHVuZ3NoYXVzPGJyLz5cIik7XCJpbnRlcmlvcl9kZWNvcmF0aW9uXCI9PWIuc2hvcCYmKGErPVwiSW5uZW5kZWtvcmF0aW9uIC8gUmF1bWF1c3N0YXR0dW5nPGJyLz5cIik7XCJraXRjaGVuXCI9PWIuc2hvcCYmKGErPVwiS1xcdTAwZmNjaGVuPGJyLz5cIik7XCJ3aW5kb3dfYmxpbmRcIj09Yi5zaG9wJiYoYSs9XCJKYWxvdXNpZW4gdW5kIFJvbGxcXHUwMGU0ZGVuPGJyLz5cIik7XCJjb21wdXRlclwiPT1iLnNob3AmJihhKz1cIkNvbXB1dGVyLUZhY2hoXFx1MDBlNG5kbGVyPGJyLz5cIik7XCJlbGVjdHJvbmljc1wiPT1iLnNob3AmJihhKz1cIkVsZWt0cm9uaWttYXJrdDxici8+XCIpO1wiaGlmaVwiPT1iLnNob3AmJihhKz1cIkhpZmktRmFjaGhcXHUwMGU0bmRsZXI8YnIvPlwiKTtcIm1vYmlsZV9waG9uZVwiPT1iLnNob3AmJihhKz1cIkhhbmR5LVNob3A8YnIvPlwiKTtcInJhZGlvdGVjaG5pY3NcIj09Yi5zaG9wJiYoYSs9XCJSYWRpby0gdW5kIEZlcm5zZWh0ZWNobmlrPGJyLz5cIik7XG4gICAgXCJ2YWN1dW1fY2xlYW5lclwiPT1iLnNob3AmJihhKz1cIlN0YXVic2F1Z2VyZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJiaWN5Y2xlXCI9PWIuc2hvcCYmKGErPVwiRmFocnJhZGZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1wiY2FyXCI9PWIuc2hvcCYmKGErPVwiQXV0b2hhdXM8YnIvPlwiKTtcImNhcl9yZXBhaXJcIj09Yi5zaG9wJiYoYSs9XCJBdXRvd2Vya3N0YXR0PGJyLz5cIik7XCJjYXJfcGFydHNcIj09Yi5zaG9wJiYoYSs9XCJBdXRvdGVpbGVmYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtpZihcImRpdmVcIj09Yi5zaG9wfHxcInNjdWJhX2RpdmluZ1wiPT1iLnNob3ApYSs9XCJUYXVjaGF1c3JcXHUwMGZjc3R1bmc8YnIvPlwiO1wiZmlzaGluZ1wiPT1iLnNob3AmJihhKz1cIkFuZ2VsZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJmcmVlX2ZseWluZ1wiPT1iLnNob3AmJihhKz1cIkZhbGxzY2hpcm1hdXNyXFx1MDBmY3N0dW5nPGJyLz5cIik7XCJodW50aW5nXCI9PWIuc2hvcCYmKGErPVwiSmFnZGF1c3JcXHUwMGZjc3R1bmc8YnIvPlwiKTtcbiAgICBcIm1vdG9yY3ljbGVcIj09Yi5zaG9wJiYoYSs9XCJNb3RvcnJhZGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJvdXRkb29yXCI9PWIuc2hvcCYmKGErPVwiVHJla2tpbmctL091dGRvb3JsYWRlbjxici8+XCIpO1wic3BvcnRzXCI9PWIuc2hvcCYmKGErPVwiU3BvcnRnZXNjaFxcdTAwZTRmdDxici8+XCIpO1widHlyZXNcIj09Yi5zaG9wJiYoYSs9XCJSZWlmZW5mYWNoaGFuZGVsPGJyLz5cIik7XCJ3YXRlcl9zcG9ydHNcIj09Yi5zaG9wJiYoYSs9XCJXYXNzZXJzcG9ydGJlZGFyZjxici8+XCIpO1wiYXJ0XCI9PWIuc2hvcCYmKGErPVwiS3Vuc3RsYWRlbjxici8+XCIpO1wiY3JhZnRcIj09Yi5zaG9wJiYoYSs9XCJLdW5zdGhhbmR3ZXJrPGJyLz5cIik7XCJmcmFtZVwiPT1iLnNob3AmJihhKz1cIkJpbGRlcnJhaG1lbmdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJtdXNpY1wiPT1iLnNob3AmJihhKz1cIk11c2lrZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcIm11c2ljX2luc3RydW1lbnRcIj09Yi5zaG9wJiYoYSs9XCJNdXNpa2hhdXM8YnIvPlwiKTtcInBob3RvXCI9PVxuICAgIGIuc2hvcCYmKGErPVwiRm90b2ZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1widmlkZW9cIj09Yi5zaG9wJiYoYSs9XCJWaWRlb3RoZWs8YnIvPlwiKTtcInZpZGVvX2dhbWVzXCI9PWIuc2hvcCYmKGErPVwiVmlkZW9zcGllbGU8YnIvPlwiKTtcImFuaW1lXCI9PWIuc2hvcCYmKGErPVwiQW5pbWU8YnIvPlwiKTtcImJvb2tzXCI9PWIuc2hvcCYmKGErPVwiQnVjaGhhbmRsdW5nPGJyLz5cIik7XCJnaWZ0XCI9PWIuc2hvcCYmKGErPVwiQW5kZW5rZW4sIFJlaXNlbWl0YnJpbmdzZWwsIFNvdXZlbmllcnNob3A8YnIvPlwiKTtcIm5ld3NhZ2VudFwiPT1iLnNob3AmJihhKz1cIlplaXR1bmdzaFxcdTAwZTRuZGxlcjxici8+XCIpO1wic3RhdGlvbmVyeVwiPT1iLnNob3AmJihhKz1cIlNjaHJlaWJ3YXJlbjxici8+XCIpO1widGlja2V0XCI9PWIuc2hvcCYmKGErPVwiVGlja2V0c2hvcDxici8+XCIpO1wiY29weXNob3BcIj09Yi5zaG9wJiYoYSs9XCJLb3BpZXJsYWRlbjxici8+XCIpO1wiZnVuZXJhbF9kaXJlY3RvcnNcIj09Yi5zaG9wJiYoYSs9XCJCZXN0YXR0dW5nc3VudGVybmVobWVuPGJyLz5cIik7XG4gICAgXCJsYXVuZHJ5XCI9PWIuc2hvcCYmKGErPVwiV2FzY2hzYWxvbiAvIFdcXHUwMGU0c2NoZXJlaTxici8+XCIpO1wiZHJ5X2NsZWFuaW5nXCI9PWIuc2hvcCYmKGErPVwiY2hlbWlzY2hlIFJlaW5pZ3VuZzxici8+XCIpO1wibW9uZXlfbGVuZGVyXCI9PWIuc2hvcCYmKGErPVwiR2VsZHZlcmxlaWhlcjxici8+XCIpO1wicGF3bmJyb2tlclwiPT1iLnNob3AmJihhKz1cIlBmYW5kaGF1cyAvIFBmYW5kbGVpaGVyPGJyLz5cIik7XCJwZXRcIj09Yi5zaG9wJiYoYSs9XCJab28tIHVuZCBUaWVyaGFuZGx1bmc8YnIvPlwiKTtcInB5cm90ZWNobmljc1wiPT1iLnNob3AmJihhKz1cIkZldWVyd2Vyazxici8+XCIpO1wicmVsaWdpb25cIj09Yi5zaG9wJiYoYSs9XCJSZWxpZ2lcXHUwMGY2c2UgQXJ0aWtlbDxici8+XCIpO1wiYmVhdXR5XCI9PWIuc2hvcCYmKGErPVwiU2NoXFx1MDBmNm5oZWl0c3NhbG9uPGJyLz5cIik7XCJzb2xhcml1bVwiPT1iLnNob3AmJihhKz1cIlNvbGFyaXVtPGJyLz5cIik7XCJ0b2JhY2NvXCI9PWIuc2hvcCYmKGErPVwiVGFiYWt3YXJlbjxici8+XCIpO1xuICAgIFwidG95c1wiPT1iLnNob3AmJihhKz1cIlNwaWVsd2FyZW48YnIvPlwiKTtcInRyYXZlbF9hZ2VuY3lcIj09Yi5zaG9wJiYoYSs9XCJSZWlzZWJcXHUwMGZjcm88YnIvPlwiKTtcIm1hcmtldF9oYWxsXCI9PWIuc2hvcCYmKGErPVwiTWFya3RoYWxsZTxici8+XCIpO1widmFjYW50XCI9PWIuc2hvcCYmKGErPVwibGVlcnN0ZWhlbmRlcyBMYWRlbmxva2FsPGJyLz5cIik7XCJ3ZWFwb25zXCI9PWIuc2hvcCYmKGErPVwiV2FmZmVubGFkZW48YnIvPlwiKTtcImxvdHRlcnlcIj09Yi5nYW1ibGluZyYmKGErPVwiTG90dG9hbm5haG1lc3RlbGxlPGJyLz5cIik7XCJmaXNoXCI9PWIucGV0JiYoYSs9XCJBcXVhcmlzdGlrPGJyLz5cIik7XCJhZ3JpdWN1bHR1cmFsX2VuZ2luZXNcIj09Yi5jcmFmdCYmKGErPVwiTGFuZG1hc2NoaW5lbmJhdTxici8+XCIpO1wiYmFza2V0X21ha2VyXCI9PWIuY3JhZnQmJihhKz1cIktvcmJtYWNoZXI8YnIvPlwiKTtcImJlZWtlZXBlclwiPT1iLmNyYWZ0JiYoYSs9XCJJbWtlcjxici8+XCIpO1wiYmxhY2tzbWl0aFwiPT1iLmNyYWZ0JiZcbiAgICAoYSs9XCJTY2htaWVkPGJyLz5cIik7XCJicmV3ZXJ5XCI9PWIuY3JhZnQmJihhKz1cIkJyYXVlcmVpPGJyLz5cIik7XCJ5ZXNcIj09Yi5taWNyb2JyZXdlcnkmJihhKz1cIkhhdXNicmF1ZXJlaTxici8+XCIpO1wiYm9hdGJ1aWxkZXJcIj09Yi5jcmFmdCYmKGErPVwiQm9vdHNiYXVlcjxici8+XCIpO1wiYm9va2JpbmRlclwiPT1iLmNyYWZ0JiYoYSs9XCJCdWNoYmluZGVyPGJyLz5cIik7XCJidWlsZGVyXCI9PWIuY3JhZnQmJihhKz1cIkhhdXNiYXU8YnIvPlwiKTtcImNhcnBlbnRlclwiPT1iLmNyYWZ0JiYoYSs9XCJUaXNjaGxlci9TY2hyZWluZXIsIFppbW1lcm1hbm48YnIvPlwiKTtcImNhcnBldF9sYXllclwiPT1iLmNyYWZ0JiYoYSs9XCJUZXBwaWNobGVnZXI8YnIvPlwiKTtcImNhdGVyZXJcIj09Yi5jcmFmdCYmKGErPVwiQ2F0ZXJpbmc8YnIvPlwiKTtcImNsb2NrbWFrZXJcIj09Yi5jcmFmdCYmKGErPVwiVWhybWFjaGVyPGJyLz5cIik7XCJjb25mZWN0aW9uZXJ5XCI9PWIuY3JhZnQmJihhKz1cIktvbmRpdG9yZWk8YnIvPlwiKTtcImRyZXNzbWFrZXJcIj09XG4gICAgYi5jcmFmdCYmKGErPVwiU2NobmVpZGVyPGJyLz5cIik7XCJlbGVjdHJpY2lhblwiPT1iLmNyYWZ0JiYoYSs9XCJFbGVrdHJpa2VyPGJyLz5cIik7XCJnYXJkZW5lclwiPT1iLmNyYWZ0JiYoYSs9XCJHYXJ0ZW4tIHVuZCBMYW5kc2NoYWZ0c2JhdWVyPGJyLz5cIik7XCJnbGF6aWVyeVwiPT1iLmNyYWZ0JiYoYSs9XCJHbGFzZXJlaTxici8+XCIpO1wiaGFuZGljcmFmdFwiPT1iLmNyYWZ0JiYoYSs9XCJIYW5kd2Vya3NrdW5zdDxici8+XCIpO1wiaHZhY1wiPT1iLmNyYWZ0JiYoYSs9XCJLXFx1MDBlNGx0ZWFubGFnZW5iYXVlciBmXFx1MDBmY3IgTFxcdTAwZmNmdHVuZ3MtLCBIZWl6dW5ncy0gdW5kIEtsaW1hdGVjaG5pazxici8+XCIpO1wiaW5zdWxhdGlvblwiPT1iLmNyYWZ0JiYoYSs9XCJXXFx1MDBlNHJtZWRcXHUwMGU0bW11bmcgdm9uIEdlYlxcdTAwZTR1ZGVuPGJyLz5cIik7XCJqZXdlbGxlclwiPT1iLmNyYWZ0JiYoYSs9XCJKdXdlbGllciwgR29sZC0vU2lsYmVyLVNjaG1pZWQ8YnIvPlwiKTtcImtleV9jdXR0ZXJcIj09Yi5jcmFmdCYmKGErPVxuICAgICAgICBcIlNjaGxcXHUwMGZjc3NlbG1hY2hlcjxici8+XCIpO1wibG9ja3NtaXRoXCI9PWIuY3JhZnQmJihhKz1cIlNjaGxcXHUwMGZjc3NlbGRpZW5zdDxici8+XCIpO1wibWV0YWxfY29uc3RydWN0aW9uXCI9PWIuY3JhZnQmJihhKz1cIk1ldGFsbGJhdWVyPGJyLz5cIik7XCJvcHRpY2lhblwiPT1iLmNyYWZ0JiYoYSs9XCJPcHRpa2VyPGJyLz5cIik7XCJwYWludGVyXCI9PWIuY3JhZnQmJihhKz1cIk1hbGVyPGJyLz5cIik7XCJwYXJxdWV0X2xheWVyXCI9PWIuY3JhZnQmJihhKz1cIlBhcmtldHR2ZXJsZWdlcjxici8+XCIpO1wicGhvdG9ncmFwaGVyXCI9PWIuY3JhZnQmJihhKz1cIkZvdG9ncmFmPGJyLz5cIik7XCJwaG90b2dyYXBoaWNfbGFib3JhdG9yeVwiPT1iLmNyYWZ0JiYoYSs9XCJGb3RvbGFib3I8YnIvPlwiKTtcInBsYXN0ZXJlclwiPT1iLmNyYWZ0JiYoYSs9XCJHaXBzZXIsIFZlcnB1dHplciwgU3R1Y2thdGV1cjxici8+XCIpO1wicGx1bWJlclwiPT1iLmNyYWZ0JiYoYSs9XCJBbmxhZ2VubWVjaGFuaWtlciBTYW5pdFxcdTAwZTRyLSwgSGVpenVuZ3MtIHVuZCBLbGltYXRlY2huaWsuPGJyLz5cIik7XG4gICAgXCJwb3R0ZXJ5XCI9PWIuY3JhZnQmJihhKz1cIlRcXHUwMGY2cGZlcmVpPGJyLz5cIik7XCJyaWdnZXJcIj09Yi5jcmFmdCYmKGErPVwiUmlnZ2VtYWNoZXIgKFRha2VsYWdlIGZcXHUwMGZjciBTZWdlbHNjaGlmZmUpPGJyLz5cIik7XCJyb29mZXJcIj09Yi5jcmFmdCYmKGErPVwiRGFjaGRlY2tlcjxici8+XCIpO1wic2FkZGxlclwiPT1iLmNyYWZ0JiYoYSs9XCJTYXR0bGVyPGJyLz5cIik7XCJzYWlsbWFrZXJcIj09Yi5jcmFmdCYmKGErPVwiU2VnZWxtYWNoZXI8YnIvPlwiKTtcInNhd21pbGxcIj09Yi5jcmFmdCYmKGErPVwiSG9senZlcmFyYmVpdHVuZ3NiZXRyaWViPGJyLz5cIik7XCJzY2FmZm9sZGVyXCI9PWIuY3JhZnQmJihhKz1cIkdlclxcdTAwZmNzdGJhdWVyPGJyLz5cIik7XCJzY3VscHRvclwiPT1iLmNyYWZ0JiYoYSs9XCJCaWxkaGF1ZXI8YnIvPlwiKTtcInNob2VtYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJTY2h1aG1hY2hlcjxici8+XCIpO1wic3RhbmRfYnVpbGRlclwiPT1iLmNyYWZ0JiYoYSs9XCJNZXNzZS0gLyBTdGFuZGJhdWVyPGJyLz5cIik7XG4gICAgXCJzdG9uZW1hc29uXCI9PWIuY3JhZnQmJihhKz1cIlN0ZWlubWV0ejxici8+XCIpO1wic3VuX3Byb3RlY3Rpb25cIj09Yi5jcmFmdCYmKGErPVwiUm9sbGFkZW4tIHVuZCBKYWxvdXNpZWJhdWVyPGJyLz5cIik7XCJzd2VlcFwiPT1iLmNyYWZ0JiYoYSs9XCJTY2hvcm5zdGVpbmZlZ2VyPGJyLz5cIik7XCJ0YWlsb3JcIj09Yi5jcmFmdCYmKGErPVwiU2NobmVpZGVyPGJyLz5cIik7XCJ0aWxlclwiPT1iLmNyYWZ0JiYoYSs9XCJGbGllc2VuLSwgUGxhdHRlbi0gdW5kIE1vc2Fpa2xlZ2VyPGJyLz5cIik7XCJ0aW5zbWl0aFwiPT1iLmNyYWZ0JiYoYSs9XCJTcGVuZ2xlciwgS2xlbXBuZXI8YnIvPlwiKTtcInVwaG9sc3RlcmVyXCI9PWIuY3JhZnQmJihhKz1cIlBvbHN0ZXJlcjxici8+XCIpO1wid2F0Y2htYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJVaHJtYWNoZXI8YnIvPlwiKTtcIndpbmRvd19jb25zdHJ1Y3Rpb25cIj09Yi5jcmFmdCYmKGErPVwiRmVuc3RlcmJhdWVyPGJyLz5cIik7XCJtYWNoaW5lc1wiPT1iLnJlbnRhbCYmKGErPVwiTWFzY2hpbmVudmVybGVpaDxici8+XCIpO1xuICAgIFwiY2FyX3JlbnRhbFwiPT1iLmFtZW5pdHkmJihhKz1cIkF1dG92ZXJsZWloPGJyLz5cIik7XCJhbGxvdG1lbnRzXCI9PWIubGFuZHVzZSYmKGErPVwiU2NocmViZXJnYXJ0ZW48YnIvPlwiKTtcImJhc2luXCI9PWIubGFuZHVzZSYmKGErPVwiUmVnZW53YXNzZXJyXFx1MDBmY2NraGFsdGViZWNrZW48YnIvPlwiKTtcImJyb3duZmllbGRcIj09Yi5sYW5kdXNlJiYoYSs9XCJWb3JoZXIgYmViYXV0ZXMgTGFuZDxici8+XCIpO1wiY29tbWVyY2lhbFwiPT1iLmxhbmR1c2UmJihhKz1cIkluZHVzdHJpZWdlYmlldDxici8+XCIpO1wiY29uc3RydWN0aW9uXCI9PWIubGFuZHVzZSYmKGErPVwiQmF1Z2ViaWV0PGJyLz5cIik7XCJmYXJtbGFuZFwiPT1iLmxhbmR1c2UmJihhKz1cIkFja2VyZmxcXHUwMGU0Y2hlPGJyLz5cIik7XCJmYXJteWFyZFwiPT1iLmxhbmR1c2UmJihhKz1cImxhbmR3aXJ0c2NoYWZ0bGljaGVyIEJldHJpZWI8YnIvPlwiKTtcImZvcmVzdFwiPT1iLmxhbmR1c2UmJihhKz1cIkZvcnN0PGJyLz5cIik7XCJnYXJhZ2VzXCI9PWIubGFuZHVzZSYmXG4gICAgKGErPVwiR2FyYWdlbmtvbXBsZXg8YnIvPlwiKTtcImdyYXNzXCI9PWIubGFuZHVzZSYmKGErPVwiUmFzZW5mbFxcdTAwZTRjaGVuPGJyLz5cIik7XCJncmVlbmZpZWxkXCI9PWIubGFuZHVzZSYmKGErPVwiQmF1ZXJ3YXJ0dW5nc2xhbmQ8YnIvPlwiKTtcImdyZWVuaG91c2VfaG9ydGljdWx0dXJlXCI9PWIubGFuZHVzZSYmKGErPVwiR2V3XFx1MDBlNGNoc2hhdXMtRmxcXHUwMGU0Y2hlPGJyLz5cIik7XCJpbmR1c3RyaWFsXCI9PWIubGFuZHVzZSYmKGErPVwiR2V3ZXJiZS0vSW5kdXN0cmllZ2ViaWV0PGJyLz5cIik7XCJsYW5kZmlsbFwiPT1iLmxhbmR1c2UmJihhKz1cIk1cXHUwMGZjbGxkZXBvbmllPGJyLz5cIik7XCJtZWFkb3dcIj09Yi5sYW5kdXNlJiYoYSs9XCJHclxcdTAwZmNuZmxcXHUwMGU0Y2hlPGJyLz5cIik7XCJvcmNoYXJkXCI9PWIubGFuZHVzZSYmKGErPVwiT2JzdHBsYW50YWdlPGJyLz5cIik7XCJwbGFudF9udXJzZXJ5XCI9PWIubGFuZHVzZSYmKGErPVwiQmF1bXNjaHVsZTxici8+XCIpO1wicXVhcnJ5XCI9PWIubGFuZHVzZSYmKGErPVxuICAgICAgICBcIlNhbmQtIHVuZCBLaWVzZ3J1YmU8YnIvPlwiKTtcInJhaWx3YXlcIj09Yi5sYW5kdXNlJiYoYSs9XCJHZWJpZXQgZlxcdTAwZmNyIEVpc2VuYmFobm51dHp1bmc8YnIvPlwiKTtcInJlY3JlYXRpb25fZ3JvdW5kXCI9PWIubGFuZHVzZSYmKGErPVwiRXJob2x1bmdzZ2ViaWV0PGJyLz5cIik7XCJyZXNlcnZvaXJcIj09Yi5sYW5kdXNlJiYoYSs9XCJXYXNzZXJyZXNlcnZvaXI8YnIvPlwiKTtcInJlc2lkZW50aWFsXCI9PWIubGFuZHVzZSYmKGErPVwiV29obmdlYmlldDxici8+XCIpO1wicmV0YWlsXCI9PWIubGFuZHVzZSYmKGErPVwiRWlua2F1ZnN6ZW50cnVtPGJyLz5cIik7XCJzYWx0X3BvbmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJTYWxpbmU8YnIvPlwiKTtcInZpbGxhZ2VfZ3JlZW5cIj09Yi5sYW5kdXNlJiYoYSs9XCJHclxcdTAwZmNuZmxcXHUwMGU0Y2hlPGJyLz5cIik7XCJ2aW5leWFyZFwiPT1iLmxhbmR1c2UmJihhKz1cIldlaW5iZXJnPGJyLz5cIik7XCJwb25kXCI9PWIubGFuZHVzZSYmKGErPVwia2xlaW5lciBUZWljaDxici8+XCIpO1wic2FsdF9wb25kXCI9PVxuICAgIGIubGFuZHVzZSYmKGErPVwiU2FsaW5lPGJyLz5cIik7XCJhbmltYWxfa2VlcGluZ1wiPT1iLmxhbmR1c2UmJihhKz1cIldlaWRlLCBQYWRkb2NrIGZcXHUwMGZjciBUaWVyaGFsdHVuZzxici8+XCIpO1wieWVzXCI9PWIuZW50cmFuY2UmJihhKz1cIkVpbmdhbmcgenVtIEdlYlxcdTAwZTR1ZGU8YnIvPlwiKTtcIm1haW5cIj09Yi5lbnRyYW5jZSYmKGErPVwiSGF1cHRlaW5nYW5nPGJyLz5cIik7XCJzZXJ2aWNlXCI9PWIuZW50cmFuY2UmJihhKz1cIkhpbnRlcmF1c2dhbmcgZlxcdTAwZmNyIEFuZ2VzdGVsbHRlIG9kZXIgWnVsaWVmZXJlcjxici8+XCIpO1wiZXhpdFwiPT1iLmVudHJhbmNlJiYoYSs9XCJBdXNnYW5nIGRlcyBHZWJcXHUwMGU0dWRlczxici8+XCIpO1wiZW1lcmdlbmN5XCI9PWIuZW50cmFuY2UmJihhKz1cIk5vdGF1c2dhbmc8YnIvPlwiKTtcImJheVwiPT1iLm5hdHVyYWwmJihhKz1cIkJ1Y2h0PGJyLz5cIik7XCJiZWFjaFwiPT1iLm5hdHVyYWwmJihhKz1cIlN0cmFuZDxici8+XCIpO1wid29vZFwiPT1iLm5hdHVyYWwmJihhKz1cIm5hdFxcdTAwZmNybGljaGVyIFdhbGQ8YnIvPlwiKTtcbiAgICBcImdsYWNpZXJcIj09Yi5uYXR1cmFsJiYoYSs9XCJHbGV0c2NoZXI8YnIvPlwiKTtcImNhdmVfZW50cmFuY2VcIj09Yi5uYXR1cmFsJiYoYSs9XCJIXFx1MDBmNmhsZTxici8+XCIpO1wic3ByaW5nXCI9PWIubmF0dXJhbCYmKGErPVwibmF0XFx1MDBmY3JsaWNoZSBRdWVsbGU8YnIvPlwiKTtcIndhdGVyZmFsbFwiPT1iLm5hdHVyYWwmJihhKz1cIldhc3NlcmZhbGw8YnIvPlwiKTtcInNjcnViXCI9PWIubmF0dXJhbCYmKGErPVwidW5rdWx0aXZpZXJ0ZXMgQnVzY2hsYW5kPGJyLz5cIik7XCJncmFzc2xhbmRcIj09Yi5uYXR1cmFsJiYoYSs9XCJ1bmt1bHRpdmllcnRlcyBHcmFzbGFuZDxici8+XCIpO1wid2V0bGFuZFwiPT1iLm5hdHVyYWwmJihhKz1cIkZldWNodGdlYmlldDxici8+XCIpO1widHJlZVwiPT1iLm5hdHVyYWwmJihhKz1cIkJhdW1cIik7XCJwZWFrXCI9PWIubmF0dXJhbCYmXCJ5ZXNcIj09YltcInN1bW1pdDpjcm9zc1wiXSYmKGErPVwiR2lwZmVsa3JldXo8YnIvPlwiKTtcInRyZWVfcm93XCI9PWIubmF0dXJhbCYmKGErPVwiQmF1bXJlaWhlIC8gQWxsZWU8YnIvPlwiKTtcbiAgICBcImhlYXRoXCI9PWIubmF0dXJhbCYmKGErPVwiSGVpZGU8YnIvPlwiKTtcIm1vb3JcIj09Yi5uYXR1cmFsJiYoYSs9XCJIb2NobW9vcjxici8+XCIpO1wiZ3Jhc3NsYW5kXCI9PWIubmF0dXJhbCYmKGErPVwidW5rdWx0aXZpZXJ0ZXMgR3Jhc2xhbmQ8YnIvPlwiKTtcImZlbGxcIj09Yi5uYXR1cmFsJiYoYSs9XCJHcmFzbGFuZCBvYmVyaGFsYiBkZXIgQmF1bWdyZW56ZTxici8+XCIpO1wiYmFyZV9yb2NrXCI9PWIubmF0dXJhbCYmKGErPVwiTmFja3RlciBGZWxzPGJyLz5cIik7XCJzY3JlZVwiPT1iLm5hdHVyYWwmJihhKz1cIlNjaHV0dCAoSGFuZ3NjaHV0dCk8YnIvPlwiKTtcInZvbGNhbm9cIj09Yi5uYXR1cmFsJiYoYSs9XCJWdWxrYW48YnIvPlwiKTtcInZhbGxleVwiPT1iLm5hdHVyYWwmJihhKz1cIlRhbDxici8+XCIpO1wic3RvbmVcIj09Yi5uYXR1cmFsJiYoYSs9XCJGaW5kbGluZzxici8+XCIpO1wic2VhXCI9PWIubmF0dXJhbCYmKGErPVwiTWVlcjxici8+XCIpO1wibmF0aW9uYWxfcGFya1wiPT1iLmJvdW5kYXJ5JiYoYSs9XCJOYXRpb25hbHBhcms8YnIvPlwiKTtcbiAgICBcInByb3RlY3RlZF9hcmVhXCI9PWIuYm91bmRhcnkmJihhKz1cIlNjaHV0emdlYmlldDxici8+XCIpO1wieWVzXCI9PWIubW91bnRhaW5fcGFzcyYmKGErPVwiR2ViaXJnc3Bhc3M8YnIvPlwiKTtcIndhdGVyZmFsbFwiPT1iLndhdGVyd2F5JiYoYSs9XCJXYXNzZXJmYWxsPGJyLz5cIik7XCJjYW5hbFwiPT1iLndhdGVyd2F5JiYoYSs9XCJLYW5hbDxici8+XCIpO1wiY2FuYWxcIj09Yi53YXRlciYmKGErPVwiS2FuYWw8YnIvPlwiKTtcInJpdmVyXCI9PWIud2F0ZXJ3YXkmJihhKz1cIkZsdXNzPGJyLz5cIik7XCJyaXZlclwiPT1iLndhdGVyJiYoYSs9XCJGbHVzczxici8+XCIpO1wicml2ZXJiYW5rXCI9PWIud2F0ZXJ3YXkmJihhKz1cIkZsdXNzPGJyLz5cIik7XCJkaXRjaFwiPT1iLndhdGVyd2F5JiYoYSs9XCJFbnR3XFx1MDBlNHNzZXJ1bmdzZ3JhYmVuPGJyLz5cIik7XCJzdHJlYW1cIj09Yi53YXRlcndheSYmKGErPVwiQmFjaDxici8+XCIpO1wiZmVycnlcIj09Yi5yb3V0ZSYmKGErPVwiRlxcdTAwZTRocnZlcmJpbmR1bmc8YnIvPlwiKTtcInR1cm5pbmdfcG9pbnRcIj09XG4gICAgYi53YXRlcndheSYmKGErPVwiV2VuZGVzdGVsbGU8YnIvPlwiKTtpZihcImxha2VcIj09Yi53YXRlcnx8XCJ3YXRlclwiPT1iLm5hdHVyYWwpYSs9XCJTZWU8YnIvPlwiO1wiY292ZVwiPT1iLndhdGVyJiYoYSs9XCJrbGVpbmUgQnVjaHQ8YnIvPlwiKTtcImxhZ29vblwiPT1iLndhdGVyJiYoYSs9XCJMYWd1bmU8YnIvPlwiKTtcInBvbmRcIj09Yi53YXRlciYmKGErPVwiVGVpY2g8YnIvPlwiKTtcInJlc2Vydm9pclwiPT1iLndhdGVyJiYoYSs9XCJXYXNzZXJyZXNlcnZvaXI8YnIvPlwiKTtcIm94Ym93XCI9PWIud2F0ZXImJihhKz1cIkFsdHdhc3NlcnNlZTxici8+XCIpO1wibG9ja1wiPT1iLndhdGVyJiYoYSs9XCJTY2hsZXVzZW5rYW1tZXI8YnIvPlwiKTtcIm1vYXRcIj09Yi53YXRlciYmKGErPVwiQnVyZ2dyYWJlbjxici8+XCIpO1wid2FzdGV3YXRlclwiPT1iLndhdGVyJiYoYSs9XCJLbFxcdTAwZTRyYW5sYWdlPGJyLz5cIik7XCJndWVzdFwiPT1iLm1vb3JpbmcmJlwicGllclwiPT1iLm1hbl9tYWRlfHxcInZpc2l0b3JfYmVydGhcIj09YltcInNlYW1hcms6c21hbGxfY3JhZnRfZmFjaWxpdHk6Y2F0ZWdvcnlcIl0/XG4gICAgICAgIGErPVwiR2FzdGxpZWdlcGxhdHo8YnIvPlwiOlwicGllclwiPT1iLm1hbl9tYWRlJiYoYSs9XCJBbmxlZ2VzdGVsbGU8YnIvPlwiKTtcImJvYXR5YXJkXCI9PWIud2F0ZXJ3YXkmJihhKz1cIlNjaGlmZnN3ZXJmdDxici8+XCIpO1wibW9vcmluZ1wiPT1iW1wic2VhbWFyazp0eXBlXCJdJiZcImRvbHBoaW5cIj09YltcInNlYW1hcms6bW9vcmluZzpjYXRlZ29yeVwiXSYmKGErPVwiRGFsYmVuPGJyLz5cIik7XCJmb290XCI9PWIucm91dGUmJihhKz1cIldhbmRlcndlZzxici8+XCIpO1wiaGlraW5nXCI9PWIucm91dGUmJihhKz1cIldhbmRlcndlZzxici8+XCIpO2lmKFwieWVzXCI9PWIuaGlraW5nJiZcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSlhKz1cIldlZ3dlaXNlcjxici8+XCI7ZWxzZSBpZihcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSYmXCJpbmZvcm1hdGlvblwiPT1iLnRvdXJpc20paWYoYi5pbmZvcm1hdGlvbilzd2l0Y2goYi5pbmZvcm1hdGlvbil7Y2FzZSBcImJvYXJkXCI6YSs9XCJJbmZvcm1hdGlvbnN0YWZlbDxici8+XCI7YnJlYWs7Y2FzZSBcIm1hcFwiOmErPVxuICAgICAgICBcIkluZm9ybWF0aW9uc3RhZmVsIG1pdCBLYXJ0ZTxici8+XCI7YnJlYWs7Y2FzZSBcIm9mZmljZVwiOmErPVwiVG91cmlzdGVuaW5mb3JtYXRpb248YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0ZXJtaW5hbFwiOmErPVwiSW5mb3JtYXRpb25zdGVybWluYWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhdWRpb2d1aWRlXCI6YSs9XCJBdWRpb2d1aWRlPGJyLz5cIjticmVhaztjYXNlIFwiZ3VpZGVwb3N0XCI6YSs9XCJXZWd3ZWlzZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0YWN0aWxlX21hcFwiOmErPVwiQmxpbmRlbmthcnRlIDJEPGJyLz5cIjticmVhaztjYXNlIFwidGFjdGlsZV9tb2RlbFwiOmErPVwiQmxpbmRlbmthcnRlIDNEPGJyLz5cIjticmVhaztjYXNlIFwicm91dGVfbWFya2VyXCI6YSs9XCJXZWdlcmtlbm51bmdzbWFya2VyPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiSW5mb3JtYXRpb25zdGFmZWw8YnIvPlwifWVsc2UgYSs9XCJJbmZvcm1hdGlvbnN0YWZlbDxici8+XCI7XCJiaWN5Y2xlXCI9PWIucm91dGUmJihhKz1cIlJhZHdhbmRlcndlZzxici8+XCIpO1xuICAgIFwibXRiXCI9PWIucm91dGUmJihhKz1cIk1vdW50YWluYmlrZXJvdXRlPGJyLz5cIik7XCJob3JzZVwiPT1iLnJvdXRlJiYoYSs9XCJSZWl0d2FuZGVyd2VnPGJyLz5cIik7XCJjb2FzdGxpbmVcIj09Yi5uYXR1cmFsJiYoYSs9XCJLXFx1MDBmY3N0ZW5saW5pZTxici8+XCIpO1wiY2xpZmZcIj09Yi5uYXR1cmFsJiYoYSs9XCJLbGlwcGU8YnIvPlwiKTtcImRhbVwiPT1iLndhdGVyd2F5JiYoYSs9XCJTdGF1ZGFtbTxici8+XCIpO1wid2VpclwiPT1iLndhdGVyd2F5JiYoYSs9XCJXZWhyPGJyLz5cIik7XCJsb2NrX2dhdGVcIj09Yi53YXRlcndheSYmKGErPVwiU2NobGV1c2VudG9yPGJyLz5cIik7XCJ5ZXNcIj09Yi5sb2NrJiYoYSs9XCJTY2hsZXVzZTxici8+XCIpO1wic2x1aWNlX2dhdGVcIj09Yi53YXRlcndheSYmKGErPVwiU2llbDxici8+XCIpO1wicHVtcGluZ19zdGF0aW9uXCI9PWIubWFuX21hZGUmJihhKz1cIlNjaFxcdTAwZjZwZndlcms8YnIvPlwiKTtcImdyb3luZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJCdWhuZTxici8+XCIpO1wiZHlrZVwiPT1iLm1hbl9tYWRlJiZcbiAgICAoYSs9XCJEZWljaDxici8+XCIpO1wibGV2ZWVcIj09Yi5tYW5fbWFkZSYmKGErPVwiRGVpY2g8YnIvPlwiKTtcIndhdGVybWlsbFwiPT1iLm1hbl9tYWRlJiYoYSs9XCJXYXNzZXJtXFx1MDBmY2hsZTxici8+XCIpO1wiYWlyZmllbGRcIj09Yi5taWxpdGFyeSYmKGErPVwiTWlsaXRcXHUwMGU0cmZsdWdwbGF0ejxici8+XCIpO1wibmF2YWxfYmFzZVwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJNYXJpbmVzdFxcdTAwZmN0enB1bmt0PGJyLz5cIik7XCJyYW5nZVwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJXYWZmZW5cXHUwMGZjYnVuZ3NwbGF0ejxici8+XCIpO1wibWlsaXRhcnlcIj09Yi5sYW5kdXNlJiYoYSs9XCJtaWxpdFxcdTAwZTRyaXNjaCBnZW51dHp0ZXMgR2ViaWV0PGJyLz5cIik7XCJ0cmFpbmluZ19hcmVhXCI9PWIubWlsaXRhcnkmJihhKz1cIlRydXBwZW5cXHUwMGZjYnVuZ3NwbGF0ejxici8+XCIpO1wiZXhjbHVzaW9uX3pvbmVcIj09Yi5taWxpdGFyeSYmKGErPVwibWlsaXRcXHUwMGU0cmlzY2ggZ2VudXR6dGVzIEdlYmlldDxici8+XCIpO1wiZGFuZ2VyX2FyZWFcIj09XG4gICAgYi5taWxpdGFyeSYmKGErPVwibWlsaXRcXHUwMGU0cmlzY2hlIEdlZmFocmVuem9uZTxici8+XCIpO1wiYmFycmFja3NcIj09Yi5taWxpdGFyeSYmKGErPVwiS2FzZXJuZTxici8+XCIpO1wibnVjbGVhcl9leHBsb3Npb25fc2l0ZVwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJBdG9td2FmZmVudGVzdGdlbFxcdTAwZTRuZGU8YnIvPlwiKTtcInllc1wiPT1iLmNvbnN0cnVjdGlvbj9hKz1cIkJhdXN0ZWxsZTxici8+XCI6XCJjb25zdHJ1Y3Rpb25cIj09Yi5oaWdod2F5JiYoYSs9XCJCYXVzdGVsbGU8YnIvPlwiKTtcInBldHJvbGV1bV93ZWxsXCI9PWIubWFuX21hZGUmJihhKz1cIkVyZFxcdTAwZjZscHVtcGU8YnIvPlwiKTtcInN0b3JhZ2VfdGFua1wiPT1iLm1hbl9tYWRlJiYoYSs9XCJTcGVpY2hlcnRhbms8YnIvPlwiKTtcIndhc3Rld2F0ZXJfcGxhbnRcIj09Yi5tYW5fbWFkZSYmKGErPVwiS2xcXHUwMGU0cmFubGFnZTxici8+XCIpO1wic2lsb1wiPT1iLm1hbl9tYWRlJiYoYSs9XCJTaWxvPGJyLz5cIik7XCJ3YXRlcl90b3dlclwiPT1iLm1hbl9tYWRlJiZcbiAgICAoYSs9XCJXYXNzZXJ0dXJtPGJyLz5cIik7XCJ3aW5kbWlsbFwiPT1iLm1hbl9tYWRlJiYoYSs9XCJXaW5kbVxcdTAwZmNobGU8YnIvPlwiKTtcIm1vbml0b3Jpbmdfc3RhdGlvblwiPT1iLm1hbl9tYWRlJiYoYSs9XCJNZXNzc3RhdGlvblwiKTtcImNyYW5lXCI9PWIubWFuX21hZGUmJihhKz1cIktyYW5cIik7XCJsaWdodGhvdXNlXCI9PWIubWFuX21hZGUmJihhKz1cIkxldWNodHR1cm1cIik7XCJiZWFjb25cIj09Yi5tYW5fbWFkZSYmKGErPVwiTGV1Y2h0ZmV1ZXJcIik7XCJicmVha3dhdGVyXCI9PWIubWFuX21hZGUmJihhKz1cIldlbGxlbmJyZWNoZXJcIik7XCJsYW1wXCI9PWIubWFuX21hZGUmJlwic3RyZWV0X2xhbXBcIj09YltcImxhbXA6dHlwZVwiXSYmKGErPVwiU3RyYXNzZW5sYXRlcm5lPGJyLz5cIik7XCJsYW50ZXJuXCI9PWIubGlnaHRfc291cmNlJiYoYSs9XCJTdHJhc3NlbmxhdGVybmU8YnIvPlwiKTtcImZsb29kbGlnaHRcIj09Yi5saWdodF9zb3VyY2UmJihhKz1cIkZsdXRsaWNodDxici8+XCIpO1wic2lnbmFsX2xhbXBcIj09Yi5saWdodF9zb3VyY2UmJlxuICAgIChhKz1cIlNpZ25hbGxpY2h0PGJyLz5cIik7XCJhdmlhdGlvblwiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwiQmVmZXVlcnVuZzxici8+XCIpO1wid2FybmluZ1wiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwiV2FybmxpY2h0PGJyLz5cIik7aWYoYi5saWdodF9zb3VyY2UmJmJbXCJsaWdodDptZXRob2RcIl0pc3dpdGNoKGErPVwiTGljaHQgQXJ0OiBcIixiW1wibGlnaHQ6bWV0aG9kXCJdKXtjYXNlIFwiZ2FzXCI6YSs9XCJHYXNcIjticmVhaztjYXNlIFwiZWxlY3RyaWNcIjphKz1cIkVsZWt0cmlzY2hcIjticmVhaztjYXNlIFwiaW5jYW5kZXNjZW50XCI6YSs9XCJzdHJhaGxlbmRcIjticmVhaztjYXNlIFwiaGFsb2dlblwiOmErPVwiSGFsb2dlblwiO2JyZWFrO2Nhc2UgXCJkaXNjaGFyZ2VcIjphKz1cIkVudGxhZHVuZ3NsaWNodFwiO2JyZWFrO2Nhc2UgXCJtZXRhbC1oYWxpZGVcIjphKz1cIkhhbG9nZW4tTWV0YWxsZGFtcGZsYW1wZVwiO2JyZWFrO2Nhc2UgXCJuZW9uXCI6YSs9XCJOZW9uXCI7YnJlYWs7Y2FzZSBcInNvZGl1bVwiOmErPVwiTmF0cml1bWRhbXBmbGFtcGVcIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcImhpZ2hfcHJlc3N1cmVfc29kaXVtXCI6YSs9XCJIb2NoZHJ1Y2sgTmF0cml1bWRhbXBmbGFtcGVcIjticmVhaztjYXNlIFwibG93X3ByZXNzdXJlX3NvZGl1bVwiOmErPVwiTmllZHJpZ2RydWNrIE5hdHJpdW1kYW1wZmxhbXBlXCI7YnJlYWs7Y2FzZSBcImZsdW9yZXNjZW50XCI6YSs9XCJGbHVvcmVzemVuemxhbXBlXCI7YnJlYWs7Y2FzZSBcIm1lcmN1cnlcIjphKz1cIlF1ZWNrc2lsYmVybGFtcGVcIjticmVhaztjYXNlIFwiTEVEXCI6YSs9XCJMRURcIjticmVhaztjYXNlIFwibGFzZXJcIjphKz1cIkxhc2VyXCI7YnJlYWs7Y2FzZSBcImFyY1wiOmErPVwiTGljaHRib2dlblwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJVbmJla2FubnRcIn1cImRyaW5raW5nX3dhdGVyXCI9PWIuYW1lbml0eSYmKGErPVwiVHJpbmt3YXNzZXI8YnIvPlwiKTtcInllc1wiPT1iLmRyaW5raW5nX3dhdGVyJiYoYSs9XCJUcmlua3dhc3Nlcjxici8+XCIpO1wid29ya3NcIj09Yi5tYW5fbWFkZT9hKz1cIkluZHVzdHJpZWdlYlxcdTAwZTR1ZGU8YnIvPlwiOlwiaW5kdXN0cmlhbFwiPT1cbiAgICBiLmJ1aWxkaW5nP2ErPVwiSW5kdXN0cmllZ2ViXFx1MDBlNHVkZTxici8+XCI6XCJpbmR1c3RyaWFsXCI9PWIubGFuZHVzZT9hKz1cIkluZHVzdHJpZWdlYmlldDxici8+XCI6XCJpbmR1c3RyaWFsXCI9PWIuYWJ1dHRlcnM/YSs9XCJJbmR1c3RyaWVnZWJpZXQ8YnIvPlwiOlwiY29tbWVyY2lhbFwiPT1iLmFidXR0ZXJzJiYoYSs9XCJHZXdlcmJlZ2ViaWV0PGJyLz5cIik7aWYoYltcImdlbmVyYXRvcjpzb3VyY2VcIl0pc3dpdGNoKGErPVwiQW5sYWdlbi1UeXA6IFwiLGJbXCJnZW5lcmF0b3I6c291cmNlXCJdKXtjYXNlIFwiYmlvbWFzc1wiOmErPVwiQmlvZ2FzYW5sYWdlXCI7YnJlYWs7Y2FzZSBcImJpb2Z1ZWxcIjphKz1cIkJpb2dhc2FubGFnZVwiO2JyZWFrO2Nhc2UgXCJiaW9nYXNcIjphKz1cIkJpb2dhc2FubGFnZVwiO2JyZWFrO2Nhc2UgXCJjb2FsXCI6YSs9XCJLb2hsZWtyYWZ0d2Vya1wiO2JyZWFrO2Nhc2UgXCJvaWxcIjphKz1cIlxcdTAwZDZscmFmZmluZXJpZVwiO2JyZWFrO2Nhc2UgXCJ3YXN0ZVwiOmErPVwiTVxcdTAwZmNsbHZlcmJyZW5udW5nc2FubGFnZVwiO1xuICAgICAgICBicmVhaztjYXNlIFwid2luZFwiOmErPVwiV2luZGtyYWZ0d2Vya1wiO2JyZWFrO2Nhc2UgXCJzb2xhclwiOmErPVwiU29sYXJrcmFmdHdlcmtcIjticmVhaztjYXNlIFwiaHlkcm9cIjphKz1cIldhc3NlcmtyYWZ0d2Vya1wiO2JyZWFrO2Nhc2UgXCJ0aWRhbFwiOmErPVwiR2V6ZWl0ZW5rcmFmdHdlcmtcIjticmVhaztjYXNlIFwid2F2ZVwiOmErPVwiV2VsbGVua3JhZnR3ZXJrXCI7YnJlYWs7Y2FzZSBcImdlb3RoZXJtYWxcIjphKz1cIkdlb3RoZXJtaWVcIjticmVhaztjYXNlIFwib3Ntb3RpY1wiOmErPVwiT3Ntb3Nla3JhZnR3ZXJrXCI7YnJlYWs7Y2FzZSBcIm51Y2xlYXJcIjphKz1cIkF0b21rcmFmdHdlcmtcIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn1cInBob3Rvdm9sdGFpY1wiPT1iLnBvd2VyX3NvdXJjZSYmKGErPVwiU29sYXJrcmFmdHdlcmtcIik7XCJsaW5lXCI9PWIucG93ZXImJihhKz1cIkhvY2hzcGFubnVuZ3MtXFx1MDBkY2JlcnRyYWd1bmdzbGVpdHVuZzxici8+XCIpO1wiY2FibGVcIj09Yi5wb3dlciYmKGErPVwiVW50ZXJncnVuZGthYmVsPGJyLz5cIik7XG4gICAgXCJjYWJsZV9kaXN0cmlidXRpb25fY2FiaW5ldFwiPT1iLnBvd2VyJiYoYSs9XCJLYWJlbHZlcnRlaWxlcnNjaHJhbms8YnIvPlwiKTtcInBsYW50XCI9PWIucG93ZXImJihhKz1cIkVsZWt0cml6aXRcXHUwMGU0dHNrcmFmdHdlcms8YnIvPlwiKTtcInN0YXRpb25cIj09Yi5wb3dlciYmKGErPVwiRWxla3RyaXppdFxcdTAwZTR0c2tyYWZ0d2Vyazxici8+XCIpO1wic3ViX3N0YXRpb25cIj09Yi5wb3dlciYmKGErPVwiRWxla3RyaXppdFxcdTAwZTR0c2tyYWZ0d2Vyazxici8+XCIpO1wiY29tcGVuc2F0b3JcIj09Yi5wb3dlciYmKGErPVwiS29tcGVuc2F0b3I8YnIvPlwiKTtcImNvbnZlcnRlclwiPT1iLnBvd2VyJiYoYSs9XCJLb252ZXJ0ZXI8YnIvPlwiKTtcImdlbmVyYXRvclwiPT1iLnBvd2VyJiYoYSs9XCJHZW5lcmF0b3I8YnIvPlwiKTtcImhlbGlvc3RhdFwiPT1iLnBvd2VyJiYoYSs9XCJIZWxpb3N0YXQ8YnIvPlwiKTtcImluc3VsYXRvclwiPT1iLnBvd2VyJiYoYSs9XCJJc3VsYXRvcjxici8+XCIpO1wiYnVzYmFyXCI9PWIubGluZSYmKGErPVwiU2FtbWVsc2NoaWVuZTxici8+XCIpO1xuICAgIFwiYmF5XCI9PWIubGluZSYmKGErPVwiVmVyYmluZHVuZyBTY2hhbHR1bmcgdW5kIFNhbW1lbHNjaGllbmU8YnIvPlwiKTtcIm1pbm9yX2xpbmVcIj09Yi5wb3dlciYmKGErPVwiTmViZW5saW5pZTxici8+XCIpO1wicG9sZVwiPT1iLnBvd2VyJiYoYSs9XCJQZmFobDxici8+XCIpO1wicG9ydGFsXCI9PWIucG93ZXImJihhKz1cIkgtZlxcdTAwZjZybWlnZXIgTWFzdDxici8+XCIpO1wiY2F0ZW5hcnlfbWFzdFwiPT1iLnBvd2VyJiYoYSs9XCJGYWhybGVpdHVuZ3NtYXN0PGJyLz5cIik7XCJzdWJzdGF0aW9uXCI9PWIucG93ZXImJihhKz1cIlVtc3Bhbm53ZXJrPGJyLz5cIik7XCJzd2l0Y2hcIj09Yi5wb3dlciYmKGErPVwiTGFzdHNjaGFsdGVyPGJyLz5cIik7XCJ0ZXJtaW5hbFwiPT1iLnBvd2VyJiYoYSs9XCJUZXJtaW5hbCAvIEFuc2NobHVzczxici8+XCIpO1widG93ZXJcIj09Yi5wb3dlciYmKGErPVwiSG9jaHNwYW5udW5nc2xlaXR1bmdzPGJyLz5cIik7XCJ0cmFuc2Zvcm1lclwiPT1iLnBvd2VyJiYoYSs9XCJOZWJlbmxpbmllPGJyLz5cIik7aWYoYi5iYXJyaWVyKXN3aXRjaChiLmJhcnJpZXIpe2Nhc2UgXCJib2xsYXJkXCI6YSs9XG4gICAgICAgIFwiUG9sbGVyLCBQZm9zdGVuPGJyLz5cIjticmVhaztjYXNlIFwiY3ljbGVfYmFycmllclwiOmErPVwiVW1sYXVmc3BlcnJlLCBEclxcdTAwZTRuZ2VsZ2l0dGVyPGJyLz5cIjticmVhaztjYXNlIFwiZ2F0ZVwiOmErPVwiVG9yLCBTY2hyYW5rZTxici8+XCI7YnJlYWs7Y2FzZSBcImNoYWluXCI6YSs9XCJLZXR0ZTxici8+XCI7YnJlYWs7Y2FzZSBcImxpZnRfZ2F0ZVwiOmErPVwiU2NobGFnYmF1bTxici8+XCI7YnJlYWs7Y2FzZSBcIndhbGxcIjphKz1cIkxcXHUwMGU0cm1zY2h1dHp3YW5kPGJyLz5cIjticmVhaztjYXNlIFwidG9sbF9ib290aFwiOmErPVwiTWF1dHN0ZWxsZTxici8+XCI7YnJlYWs7Y2FzZSBcImZlbmNlXCI6c3dpdGNoKGIuZmVuY2VfdHlwZSl7Y2FzZSBcImJhcmJlZF93aXJlXCI6YSs9XCJTdGFjaGVsZHJhaHR6YXVuPGJyLz5cIjticmVhaztjYXNlIFwid29vZFwiOmErPVwiSG9senphdW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaGFpbl9saW5rXCI6YSs9XCJNYXNjaGVuZHJhaHR6YXVuPGJyLz5cIjticmVhaztjYXNlIFwiZWxlY3RyaWNcIjphKz1cbiAgICAgICAgXCJXZWlkZXphdW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJyYWlsaW5nXCI6YSs9XCJHZWxcXHUwMGU0bmRlcjxici8+XCI7YnJlYWs7Y2FzZSBcIndpcmVcIjphKz1cImVpbmZhY2hlciBEcmFodHphdW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJtZXRhbFwiOmErPVwiTWV0YWxsemF1bjxici8+XCI7YnJlYWs7Y2FzZSBcInBvbGVcIjphKz1cIkhvbHpwZlxcdTAwZTRobGU8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJaYXVuPGJyLz5cIn1icmVhaztjYXNlIFwiYmxvY2tcIjphKz1cIkJsb2NrPGJyLz5cIjticmVhaztjYXNlIFwiZGl0Y2hcIjphKz1cIkdyYWJlbjxici8+XCI7YnJlYWs7Y2FzZSBcImJvcmRlcl9jb250cm9sXCI6YSs9XCJHcmVuemtvbnRyb2xsZTxici8+XCI7YnJlYWs7Y2FzZSBcImhlZGdlXCI6YSs9XCJIZWNrZTxici8+XCI7YnJlYWs7Y2FzZSBcInJldGFpbmluZ193YWxsXCI6YSs9XCJTdFxcdTAwZmN0em1hdWVyPGJyLz5cIjticmVhaztjYXNlIFwiY2F0dGxlX2dyaWRcIjphKz1cIldlaWRlcm9zdDxici8+XCI7YnJlYWs7Y2FzZSBcImhvcnNlX3N0aWxlXCI6YSs9XG4gICAgICAgIFwiWmF1blxcdTAwZmNiZXJ0cml0dDxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVuYmVrYW5udDxici8+XCJ9XCJub2lzZV9iYXJyaWVyXCI9PWIud2FsbCYmKGErPVwiTFxcdTAwZTRybXNjaHV0endhbmQ8YnIvPlwiKTtcInJldGFpbmluZ193YWxsXCI9PWIuZGVzaWduYXRpb24mJihhKz1cIkxcXHUwMGU0cm1zY2h1dHp3YW5kPGJyLz5cIik7XCJub2lzZV9iYXJyaWVyXCI9PWIuZGVzaWduYXRpb24mJihhKz1cIkxcXHUwMGU0cm1zY2h1dHp3YW5kPGJyLz5cIik7XCJzdXJ2ZWlsbGFuY2VcIj09Yi5tYW5fbWFkZSYmKGErPVwiXFx1MDBkY2JlcndhY2h0ZXIgQmVyZWljaDxici8+XCIpO2lmKGIuYWVyb3dheSlzd2l0Y2goYSs9XCJGbHVnaGFmZW46IFwiLGIuYWVyb3dheSl7Y2FzZSBcImFlcm9kcm9tZVwiOmErPVwiRmx1Z3BsYXR6XCI7YnJlYWs7Y2FzZSBcImFwcm9uXCI6YSs9XCJWb3JmZWxkXCI7YnJlYWs7Y2FzZSBcImdhdGVcIjphKz1cImdhdGVcIjticmVhaztjYXNlIFwiaGVsaXBhZFwiOmErPVwiSHVic2NocmF1YmVybGFuZGVwbGF0elwiO2JyZWFrO1xuICAgICAgICBjYXNlIFwiaGFuZ2FyXCI6YSs9XCJIYW5nYXJcIjticmVhaztjYXNlIFwicnVud2F5XCI6YSs9XCJTdGFydC0vTGFuZGViYWhuXCI7YnJlYWs7Y2FzZSBcInRheGl3YXlcIjphKz1cIlJvbGx3ZWdcIjticmVhaztjYXNlIFwidGVybWluYWxcIjphKz1cIkZsdWdoYWZlbmdlYlxcdTAwZTR1ZGVcIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn1cImhhbHRcIj09Yi5yYWlsd2F5JiYoYSs9XCJCYWhuLUhhbHRlcHVua3Q8YnIvPlwiKTtcImNyb3NzaW5nXCI9PWIucmFpbHdheSYmKGErPVwiQmFoblxcdTAwZmNiZXJnYW5nPGJyLz5cIik7XCJsZXZlbF9jcm9zc2luZ1wiPT1iLnJhaWx3YXkmJihhKz1cIkJhaG5cXHUwMGZjYmVyZ2FuZzxici8+XCIpO1wic3RhdGlvblwiPT1iLnJhaWx3YXkmJihhKz1cIkJhaG5ob2Y8YnIvPlwiKTtcImJ1c19zdGF0aW9uXCI9PWIuYW1lbml0eSYmKGErPVwiQnVzYmFobmhvZjxici8+XCIpO1wiYnVzX3N0YXRpb25cIj09IWIuYW1lbml0eSYmKFwic3RhdGlvblwiPT1iLnB1YmxpY190cmFuc3BvcnQmJlwieWVzXCI9PVxuICAgICAgICBiLmJ1cykmJihhKz1cIkJ1c2JhaG5ob2Y8YnIvPlwiKTtcInJhaWxcIj09Yi5yYWlsd2F5JiYoYSs9XCJCYWhubGluaWU8YnIvPlwiLFwiY29udGFjdF9saW5lXCI9PWIuZWxlY3RyaWZpZWQmJihhKz1cImVsZWt0cmlmaXppZXJ0ZSBCYWhudHJhc3NlIG1pdCBPYmVybGVpdHVuZzxici8+XCIpKTtcInRyYW1cIj09Yi5yYWlsd2F5JiYoYSs9XCJTdHJhXFx1MDBkZmVuYmFobmxpbmllPGJyLz5cIik7aWYoXCJzbGlwd2F5XCI9PWJbXCJzZWFtYXJrOnNtYWxsX2NyYWZ0X2ZhY2lsaXR5OmNhdGVnb3J5XCJdfHxcInNsaXB3YXlcIj09Yi5oYXJib3VyfHxcInNsaXB3YXlcIj09Yi5sZWlzdXJlKWErPVwiU2xpcGFubGFnZTxici8+XCI7aWYoXCJoYXJib3VyXCI9PWJbXCJzZWFtYXJrOnR5cGVcIl0paWYoYltcInNlYW1hcms6aGFyYm91cjpjYXRlZ29yeVwiXSlzd2l0Y2goYltcInNlYW1hcms6aGFyYm91cjpjYXRlZ29yeVwiXSl7Y2FzZSBcImZlcnJ5XCI6YSs9XCJGXFx1MDBlNGhyaGFmZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb250YWluZXJcIjphKz1cIkNvbnRhaW5lcmhhZmVuPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcIm1hcmluYVwiOlwibWFyaW5hXCIhPWIubGVpc3VyZSYmKGErPVwiSmFjaHRoYWZlbjxici8+XCIpO2JyZWFrO2Nhc2UgXCJuYXZlbF9iYXNlXCI6YSs9XCJNYXJpbmUtSGFmZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0YW5rZXJcIjphKz1cIkhhZmVuIGZcXHUwMGZjciBcXHUwMGQ2bHRhbmtlcjxici8+XCI7YnJlYWs7Y2FzZSBcInBhc3NlbmdlclwiOmErPVwiUGVyc29uZW5zY2hpZmZmYWhydDxici8+XCI7YnJlYWs7Y2FzZSBcImJ1bGtcIjphKz1cIlNjaFxcdTAwZmN0dGd1dC1IYWZlbjxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIkhhZmVuPGJyLz5cIn1lbHNlIGErPVwiSGFmZW48YnIvPlwiO1wibWFyaW5hXCI9PWIubGVpc3VyZSYmKGErPVwiSmFjaHRoYWZlbjxici8+XCIpO1wid3JlY2tcIj09Yi5oaXN0b3JpYyYmKGErPVwiV3JhY2s8YnIvPlwiKTtcImFuaW1hbF9zaGVsdGVyXCI9PWIuYW1lbml0eSYmKGErPVwiVGllcmhlaW08YnIvPlwiKTtcInNoZWx0ZXJcIj09Yi5hbmltYWwmJihhKz1cIlRpZXJoZWltPGJyLz5cIik7XCJob3JzZV93YWxrZXJcIj09XG4gICAgYi5hbmltYWwmJihhKz1cIlBmZXJkZWxhdWZ0cmFpbmVyPGJyLz5cIik7XCJ5ZXNcIj09Yi5hbmltYWxfc2hlbHRlciYmKGErPVwiVGllcmhlaW08YnIvPlwiKTtcImRvZ1wiPT1iLmFuaW1hbF9zaGVsdGVyJiYoYSs9XCJUaWVyaGVpbTxici8+XCIpO1wiY2F0XCI9PWIuYW5pbWFsX3NoZWx0ZXImJihhKz1cIlRpZXJoZWltPGJyLz5cIik7XCJhbmltYWxfYm9hcmRpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJUaWVycGVuc2lvbjxici8+XCIpO1wieWVzXCI9PWIuYW5pbWFsX2JvYXJkaW5nJiYoYSs9XCJUaWVycGVuc2lvbjxici8+XCIpO1wiZG9nXCI9PWIuYW5pbWFsX2JvYXJkaW5nJiYoYSs9XCJUaWVycGVuc2lvbjxici8+XCIpO1wiaG9yc2VcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cIlRpZXJwZW5zaW9uPGJyLz5cIik7XCJjYXRcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cIlRpZXJwZW5zaW9uPGJyLz5cIik7XCJkb2c7Y2F0XCI9PWIuYW5pbWFsX2JvYXJkaW5nJiYoYSs9XCJUaWVycGVuc2lvbjxici8+XCIpO1wiY2F0O2RvZ1wiPT1iLmFuaW1hbF9ib2FyZGluZyYmXG4gICAgKGErPVwiVGllcnBlbnNpb248YnIvPlwiKTtpZihcInNjaG9vbFwiPT1iLmFuaW1hbHx8XCJzcG9ydFwiPT1iLmFuaW1hbHx8XCJhbmltYWxfdHJhaW5pbmdcIj09Yi5hbWVuaXR5KWErPVwiVGllcnRyYWluaW5nPGJyLz5cIjtcInN3aW1taW5nXCI9PWIuYW5pbWFsJiYoYSs9XCJCYWRlc3RlbGxlIGZcXHUwMGZjciBIdW5kZTxici8+XCIpO2lmKFwiZmVlZGluZ19wbGFjZVwiPT1iLmFtZW5pdHl8fFwiYW5pbWFsX2ZlZWRpbmdcIj09Yi5tYW5fbWFkZXx8XCJhbmltYWxfZmVlZGluZ1wiPT1iLmFtZW5pdHkpYSs9XCJGXFx1MDBmY3R0ZXJ1bmdzc3RlbGxlPGJyLz5cIjtpZihcIndpbGRsaWZlX2ZlZWRpbmdcIj09Yi5hbWVuaXR5fHxcImRlZXJfZmVlZGluZ1wiPT1iLmFtZW5pdHl8fFwiZ2FtZV9mZWVkaW5nXCI9PWIuYW1lbml0eSlhKz1cIldpbGRmXFx1MDBmY3R0ZXJ1bmc8YnIvPlwiO2lmKFwiY3JhdGNoXCI9PWIuYW1lbml0eXx8XCJjcmF0Y2hcIj09Yi5tYW5fbWFkZXx8XCJmZWVkaW5nX3JhY2tcIj09Yi5hbWVuaXR5KWErPVwiRnV0dGVycmF1ZmU8YnIvPlwiO1xuICAgIFwibWFuZ2VyXCI9PWIuYW1lbml0eSYmKGErPVwiS3JpcHBlPGJyLz5cIik7XCJiaXJkaG91c2VcIj09Yi5tYW5fbWFkZSYmKGErPVwiVm9nZWxoYXVzPGJyLz5cIik7XCJzdG9ya1wiPT1iLmJpcmRzX25lc3QmJihhKz1cIlN0b3JjaGVubmVzdDxici8+XCIpO1wibmVzdF9ib3hcIj09Yi5hbWVuaXR5JiYoYSs9XCJOaXN0a2FzdGVuPGJyLz5cIik7XCJ3ZWxsbmVzc1wiPT1iLmFuaW1hbCYmKGErPVwiSHVuZGVzYWxvbjxici8+XCIpO1wiY2VtZXRlcnlcIj09Yi5hbmltYWwmJihhKz1cIktsZWludGllcmZyaWVkaG9mPGJyLz5cIik7aWYoXCJzdGFibGVcIj09Yi5idWlsZGluZ3x8XCJzdGFibGVcIj09YltcImJ1aWxkaW5nOnVzZVwiXSlhKz1cIlBmZXJkZXN0YWxsPGJyLz5cIjtcImNvd3NoZWRcIj09Yi5idWlsZGluZyYmKGErPVwiS3Voc3RhbGw8YnIvPlwiKTtcInN0eVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJTY2h3ZWluZXN0YWxsPGJyLz5cIik7XCJiYXJuXCI9PWIuYnVpbGRpbmcmJihhKz1cIlNjaGV1bmUgLyBsYW5kd2lydHNjaC4gTGFnZXJoYWxsZTxici8+XCIpO1xuICAgIFwiZmFybV9hdXhpbGlhcnlcIj09Yi5idWlsZGluZyYmKGErPVwibGFuZHdpcnRzY2hhZnRsLiBOZWJlbmdlYlxcdTAwZTR1ZGU8YnIvPlwiKTtpZihiW1wicml2ZXI6d2F0ZXJ3YXlfZGlzdGFuY2VcIl18fFwibWlsZXN0b25lXCI9PWIud2F0ZXJ3YXkpYSs9XCJGbHVzc2tpbG9tZXRlcjxici8+XCI7XCJtaWxlc3RvbmVcIj09Yi5oaWdod2F5JiYoYSs9XCJTdHJhc3NlbmtpbG9tZXRlcjxici8+XCIpO1wibWFya2V0XCI9PWJbXCJ4bWFzOmZlYXR1cmVcIl0mJihhKz1cIldlaWhuYWNodHNtYXJrdDxici8+XCIpO1widHJlZVwiPT1iW1wieG1hczpmZWF0dXJlXCJdJiYoYSs9XCJXZWlobmFjaHRzYmF1bXZlcmthdWY8YnIvPlwiKTtcImV2ZW50XCI9PWJbXCJ4bWFzOmZlYXR1cmVcIl0mJihhKz1cIldlaWhuYWNodHNldmVudDxici8+XCIpO1wicHlyYW1pZFwiPT1iW1wieG1hczpmZWF0dXJlXCJdJiYoYSs9XCJXZWlobmFjaHRzcHlyYW1pZGU8YnIvPlwiKTtyZXR1cm4nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF9oZWFkZXJfZmVhdHVyZXR5cGVcIj4nK2ErXG4gICAgICAgIFwiPGJyLz4gPC9kaXY+XCJ9XG5leHBvcnQgdmFyIGZuQ29udGVudD1mdW5jdGlvbihiKXt2YXIgYTthPVwiXCIrZm5Db250ZW50R2VuZXJhbEluZm9ybWF0aW9ucyhiKTthKz1mbkNvbnRlbnRIZWFsdGhjYXJlKGIpO2ErPWZuQ29udGVudEFlcm9kcm9tZShiKTthKz1mbkNvbnRlbnRDdWlzaW5lKGIpO2ErPWZuQ29udGVudFNoaXBwaW5nKGIpO2ErPWZuQ29udGVudEh5ZHJhbnRzKGIpO2ErPWZuQ29udGVudFNwb3J0cyhiKTthKz1mbkNvbnRlbnRTdHJlZXRzVHJhZmZpYyhiKTthKz1mbkNvbnRlbnRJbmZvcm1hdGlvbkNpdHkoYik7YSs9Zm5Db250ZW50RW1lcmdlbmN5KGIpO2ErPWZuQ29udGVudFN0b3JhZ2UoYik7YSs9Zm5Db250ZW50QW1lbml0eShiKTthKz1mbkNvbnRlbnRUb3VyaXNtKGIpO2ErPWZuQ29udGVudFJvdXRlKGIpO2ErPWZuQ29udGVudFBldHJvbChiKTthKz1mbkNvbnRlbnRCYXJyaWVycyhiKTthKz1mbkNvbnRlbnRMYW5kdXNlKGIpO2ErPWZuQ29udGVudE5hdHVyYWwoYik7YSs9Zm5LbG9zdGVyQWRkaXRpb25hbChiKTthKz1cbiAgICBmblNpY2hlcmhlaXRBZGRpdGlvbmFsKGIpO2ErPWZuQWRkaXRpb25hbEJ1aWxkaW5nSW5mb3MoYik7YSs9Zm5LcmFmdHdlcmtJbmZvKGIpO2ErPWZuTWVzc3N0YXRpb24oYik7YSs9Zm5XZXJ0c3RvZmZpbmZvKGIpOyhhKz1mbkNvbnRlbnRQcm90ZWN0ZWRBcmVhKGIpKSYmKGE9XCI8YnIvPlwiK2EpO3JldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2NvbnRlbnRcIj4nK2ErXCI8L2Rpdj5cIn0sZm5Db250ZW50QWVyb2Ryb21lPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7Yi5hZXJvZHJvbWUmJihcImludGVybmF0aW9uYWxcIj09Yi5hZXJvZHJvbWUmJihhKz1cIkZsdWdoYWZlbnR5cGU6IGludGVybmF0aW9uYWxlciBGbHVncGxhdHo8YnIvPlwiKSxcInJlZ2lvbmFsXCI9PWIuYWVyb2Ryb21lJiYoYSs9XCJGbHVnaGFmZW50eXBlOiByZWdpb25hbGVyIEZsdWdwbGF0ejxici8+XCIpLFwiZ2xpZGluZ1wiPT1iLmFlcm9kcm9tZSYmKGErPVwiRmx1Z2hhZmVudHlwZTogU2VnZWxmbHVncGxhdHo8YnIvPlwiKSxcInByaXZhdGVcIj09XG5iLmFlcm9kcm9tZSYmKGErPVwiRmx1Z2hhZmVudHlwZTogUHJpdmF0Zmx1Z3BsYXR6PGJyLz5cIikpO2IuaWF0YSYmKGErPVwiSUFUQS1Db2RlOiBcIitiLmlhdGErXCI8YnIvPlwiKTtiLmljYW8mJihhKz1cIklDQU8tQ29kZTogXCIrYi5pY2FvK1wiPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudE5hdHVyYWw9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihiLmZvcmVzdHx8Yi53b29kKXtpZihcImJyb2FkbGVhdmVkXCI9PWIubGVhZl90eXBlfHxcImRlY2lkdW91c1wiPT1iLndvb2QpYSs9XCJMYXVid2FsZDxici8+XCI7aWYoXCJuZWVkbGVsZWF2ZWRcIj09Yi5sZWFmX3R5cGV8fFwiY29uaWZlcm91c1wiPT1iLndvb2QpYSs9XCJOYWRlbHdhbGQ8YnIvPlwiO2lmKFwibWl4ZWRcIj09Yi5sZWFmX3R5cGV8fFwibWl4ZWRcIj09Yi53b29kKWErPVwiTWlzY2h3YWxkPGJyLz5cIjtcImxlYWZsZXNzXCI9PWIubGVhZl90eXBlJiYoYSs9XCJCbGF0dGxvc2UgVmVnZXRhdGlvbjxici8+XCIpO1wiZXZlcmdyZWVuXCI9PWIud29vZCYmKGErPVwiaW1tZXJnclxcdTAwZmNuPGJyLz5cIik7XG4gICAgXCJwYWxtXCI9PWIud29vZCYmKGErPVwiUGFsbWVuPGJyLz5cIik7XCJuaXBhX3BhbG1cIj09Yi53b29kJiYoYSs9XCJOaXBhcGFsbWVuPGJyLz5cIik7XCJldWNhbHlwdFwiPT1iLndvb2QmJihhKz1cIkV1a2FseXB0ZW48YnIvPlwiKTtpZihcImZpbGFvXCI9PWIud29vZHx8XCJjYXN1YXJpbmFcIj09Yi53b29kKWErPVwiS2FzdWFyaW5lbmdld1xcdTAwZTRjaHNlPGJyLz5cIn1pZihcInRyZWVcIj09Yi5uYXR1cmFsJiYoIWJbXCJnZW51czpkZVwiXSYmIWJbXCJzcGVjaWVzOmRlXCJdJiZiLmxlYWZfdHlwZSYmKGE9XCJicm9hZGxlYXZlZFwiPT1iLmxlYWZfdHlwZXx8XCJkZWNpZHVvdXNcIj09Yi5sZWFmX3R5cGV8fFwiYnJvYWRsZWFmZWRcIj09Yi5sZWFmX3R5cGU/YStcIkxhdWJiYXVtPGJyLz5cIjphK1wiTmFkZWxiYXVtPGJyLz5cIiksYi5nZW51cyYmKGErPWIuZ2VudXMrXCI8YnIvPlwiKSxiW1wiZ2VudXM6ZGVcIl0mJihhKz1iW1wiZ2VudXM6ZGVcIl0rXCI8YnIvPlwiKSxiLnNwZWNpZXMmJihhKz1iLnNwZWNpZXMrXCI8YnIvPlwiKSxiW1wic3BlY2llczpkZVwiXSYmXG4oYSs9YltcInNwZWNpZXM6ZGVcIl0rXCI8YnIvPlwiKSxcImxhbmRtYXJrXCI9PWIuZGVub3RhdGlvbiYmKGErPVwiZHVyY2ggR3JcXHUwMGY2XFx1MDBkZmUgdW5kIGhlcmF1c3JhZ2VuZGVyIFBvc2l0aW9uIHNpY2ggZGV1dGxpY2ggYXVzIHNlaW5lbSBVbWZlbGQgaGVydm9yaGViZW5kZXIgQmF1bS48YnIvPlwiKSxcIm5hdHVyYWxfbW9udW1lbnRcIj09Yi5kZW5vdGF0aW9ufHxcInllc1wiPT1iLm1vbnVtZW50KSlhKz1cImFsdGVyLCB1bnRlciBiZXNvbmRlcmVtIFNjaHV0eiBzdGVoZW5kZXIgQmF1bS48YnIvPlwiO1wibWFuZ2VyXCI9PWJbXCJmZWVkaW5nOnR5cGVcIl0mJihhKz1cIkZ1dHRlcmJlaFxcdTAwZTRsdGVyOiBGdXR0ZXJyYXVmZTxici8+XCIpO1wiYXV0b21hdGVkXCI9PWJbXCJmZWVkaW5nOnR5cGVcIl0mJihhKz1cIkF1dG9tYXQ8YnIvPlwiKTtpZihiW1wiZmVlZGluZzpmb3JcIl0pc3dpdGNoKGJbXCJmZWVkaW5nOmZvclwiXSl7Y2FzZSBcInNoZWVwXCI6YSs9XCJUaWVyOiBTY2hhYWY8YnIvPlwiO2JyZWFrO2Nhc2UgXCJob3JzZVwiOmErPVxuICAgIFwiVGllcjogUGZlcmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb3dcIjphKz1cIlRpZXI6IEt1aDxici8+XCI7YnJlYWs7Y2FzZSBcInJhYmJpdFwiOmErPVwiVGllcjogS2FuaW5jaGVuPGJyLz5cIjticmVhaztjYXNlIFwiYnVubnlcIjphKz1cIlRpZXI6IEhhc2U8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYXRcIjphKz1cIlRpZXI6IEthdHplIDwvYnI+XCI7YnJlYWs7Y2FzZSBcInN3YW5cIjphKz1cIlRpZXI6IFNjaHdhbiA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJndWluZWEgcGlnXCI6YSs9XCJUaWVyOiBNZWVyc2Nod2VpbmNoZW4gPC9icj5cIjticmVhaztjYXNlIFwiZG9ua2V5XCI6YSs9XCJUaWVyOiBFc2VsIDwvYnI+XCI7YnJlYWs7Y2FzZSBcInNxdWlycmVsXCI6YSs9XCJUaWVyOiBFaWNoaFxcdTAwZjZybmNoZW4gPC9icj5cIjticmVhaztjYXNlIFwicGlnXCI6YSs9XCJUaWVyOiBTY2h3ZWluIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImRlZXJcIjphKz1cIlRpZXI6IFJlaCA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJndWluZWEgcGlnXCI6YSs9XCJUaWVyOiBNZWVyc2Nod2VpbmNoZW4gPC9icj5cIjtcbiAgICBicmVhaztjYXNlIFwibW9ua2V5XCI6YSs9XCJUaWVyOiBBZmZlIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImNhbWVsXCI6YSs9XCJUaWVyOiBLYW1lbCA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJnb2F0XCI6YSs9XCJUaWVyOiBaaWVnZSA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJoYW1zdGVyXCI6YSs9XCJUaWVyOiBIYW1zdGVyIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImFscGFjYVwiOmErPVwiVGllcjogQWxwYWthIDwvYnI+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIlRpZXJlOiBuaWNodCBiZWthbm50PGJyLz5cIn1pZihiW1wiZmVlZGluZzpmb2RkZXJcIl0pc3dpdGNoKGJbXCJmZWVkaW5nOmZvZGRlclwiXSl7Y2FzZSBcImhheVwiOmErPVwiRlxcdTAwZmN0dGVybiBtaXQ6IEhldTwvYnI+XCI7YnJlYWs7Y2FzZSBcImdyYWluXCI6YSs9XCJGXFx1MDBmY3R0ZXJuIG1pdDogR2V0cmVpZGU8L2JyPlwiO2JyZWFrO2Nhc2UgXCJjb3JuXCI6YSs9XCJGXFx1MDBmY3R0ZXJuIG1pdDogS29ybjwvKmJyPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJGXFx1MDBmY3R0ZXJuIG1pdDogbmljaHQgYmVrYW5udDwvYnI+XCJ9XCJ2b2xjYW5vXCI9PVxuYi5uYXR1cmFsJiZcImFjdGl2ZVwiPT1iLnN0YXR1cyYmKGErPVwiQWt0aXZlciBWdWxrYW48YnIvPlwiKTtcInZvbGNhbm9cIj09Yi5uYXR1cmFsJiZcImRvcm1hbnRcIj09Yi5zdGF0dXMmJihhKz1cIlJ1aGVuZGVyIFZ1bGthbjxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwiZXh0aW5jdFwiPT1iLnN0YXR1cyYmKGErPVwiRXJsb3NjaGVuZXIgVnVsa2FuPGJyLz5cIik7XCJ2b2xjYW5vXCI9PWIubmF0dXJhbCYmXCJzdHJhdG92b2xjYW5vXCI9PWIudHlwZSYmKGErPVwiVnVsa2FudHlwOlNjaGljaHR2dWxrYW48YnIvPlwiKTtcInZvbGNhbm9cIj09Yi5uYXR1cmFsJiZcInNoaWVsZFwiPT1iLnR5cGUmJihhKz1cIlZ1bGthbnR5cDpTY2hpbGR2dWxrYW48YnIvPlwiKTtcInZvbGNhbm9cIj09Yi5uYXR1cmFsJiZcInNjb3JpYVwiPT1iLnR5cGUmJihhKz1cIlZ1bGthbnR5cDpTY2hsYWNrZW4tIHVuZCBBc2NoZW5rZWdlbDxici8+XCIpO3JldHVybiBhfSxmbkNvbnRlbnRQcm90ZWN0ZWRBcmVhPWZ1bmN0aW9uKGIpe3ZhciBhPVxuICAgIFwiXCIsYz1cIlwiO1wicHJvdGVjdGVkX2FyZWFcIj09Yi5ib3VuZGFyeSYmKGIucHJvdGVjdF9jbGFzcyYmKGM9Yi5wcm90ZWN0X2NsYXNzKSxiLnByb3RlY3RfaWQmJihjPWIucHJvdGVjdF9pZCksXCIxXCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBTdHJlbmdlcyBOYXR1cnJlc2VydmF0LCBXaWxkbmlzZ2ViaWV0PGJyLz5cIiksXCIyXCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBOYXRpb25hbHBhcms8YnIvPlwiKSxcIjNcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IE5hdHVybW9udW1lbnQ8YnIvPlwiKSxcIjRcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IEJpb3RvcC9BcnRlbnNjaHV0emdlYmlldCBtaXQgTWFuYWdlbWVudDxici8+XCIpLFwiNVwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogR2VzY2hcXHUwMGZjdHp0ZSBMYW5kc2NoYWZ0L0dlc2NoXFx1MDBmY3R6dGVzIG1hcmluZXMgR2ViaWV0PGJyLz5cIiksXCI2XCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBSZXNzb3VyY2Vuc2NodXR6Z2ViaWV0IG1pdCBNYW5hZ2VtZW50PGJyLz5cIiksXG5cIjdcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IExva2FsIGdlc2NoXFx1MDBmY3R6dGUgQmVyZWljaGU8YnIvPlwiKSxcIjk3XCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBHZXNjaFxcdTAwZmN0enQgb2RlciBhdXNnZXplaWNobmV0IGR1cmNoIFZlcmVpbmJhcnVuZ2VuIGF1ZiBrb250aW5lbnRhbGVyIEViZW5lPGJyLz5cIiksXCI5OFwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogR2VzY2hcXHUwMGZjdHp0IG9kZXIgYXVzZ2V6ZWljaG5ldCBkdXJjaCB6d2lzY2hlbnN0YWF0bGljaGUtIG9kZXIgaW50ZXJuYXRpb25hbGUgVmVyZWluYmFydW5nZW48YnIvPlwiKSxcIjk5XCI9PWMmJihhPVwiYW5kZXJlIDxici8+XCIpLFwiMjFcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IEdlbWVpbmRlYmVmaW5kZW4gKGhlaWxpZ2UgT3J0ZSwgYXNzb3ppYXRpY2UgT3J0ZSk8YnIvPlwiKSxcIjIyXCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBLdWx0dXJlbGxlIFdlcnRlIChLdWx0dXJnXFx1MDBmY3RlciwgaGlzdG9yaXNjaGVzIEVyYmUsIERlbmttYWxzY2h1dHopPGJyLz5cIiksXG5cIjIzXCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBTY2h1dHogenUgR3VuZHN0ZW4gZGVyIFdpcnRzY2hhZnQ8YnIvPlwiKSxcIjI0XCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBQb2xpdGlzY2hlIFNjaHV0emdlYmlldGU8YnIvPlwiKSxcIjI1XCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBNaWxpdFxcdTAwZTRyaXNjaGUgU2NodXR6Z2ViaWV0ZTxici8+XCIpLFwiMjZcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IEhpc3RvcmlzY2hlIFNjaHV0emdlYmlldGU8YnIvPlwiKSxcIjI5XCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBXZWl0ZXJlIGdlc2VsbHNjaGFmdGxpY2hlIFNjaHV0emdlYmlldGU8YnIvPlwiKSxcIjExXCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBCb2RlbnNjaHV0eiAoVm9yZ2FiZSB6dW0gRnJ1Y2h0YmFya2VpdHNlcmhhbHQgdW5kIEVyb3Npb25zc2NodXR6KTxici8+XCIpLFwiMTJcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFdhc3NlcnNjaHV0emdlYmlldCAoVHJpbmt3YXNzZXJzY2h1dHpnZWJpZXQsIEhlaWxxdWVsbGVuc2NodXR6Z2ViaWV0LC4uKTxici8+XCIpLFxuXCIxM1wiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogS2xpbWEgdW5kIEx1ZnQgKEthbHRsdWZ0ZW5zdGVodW5nL0ZyaXNjaGx1ZnR2ZXJzb3JndW5nLCBJbW1pc3Npb25zc2NodXR6LC4uKTxici8+XCIpLFwiMTRcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IEFydGVuc2NodXR6Z2ViaWV0IChBbmdlbHZlcmJvdCwgRmlzY2hlcmVpc2NodXR6em9uZSwgSmFnZHNjaHV0emdlYmlldCwgVm9nZWxzY2h1dHpnZWJpZXQsLi4pPGJyLz5cIiksXCIxNVwiPT1jJiYoYT0nQmVzY2hyZWlidW5nOiBcIlN0YW5kb3J0YXVzc3RhdHR1bmdcIjogUmV0ZW50aW9uc3JhdW0gKGdlc2V0emxpY2ggZ2VzY2hcXHUwMGZjdHp0ZXMgXFx1MDBkY2JlcnNjaHdlbW11bmdzZ2ViaWV0KSA8YnIvPicpLFwiMTZcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IERhdWVyaGFmdGUgR2VmYWhyZW5iZXJlaWNoZSAoTGViZW5zc2NodXR6LCBCb2RlbmJld2VndW5nc2dlYmlldCwuLik8YnIvPlwiKSxcIjE5XCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBXZWl0ZXJlIG5hdGlvbmFsZSBHZWJpZXRlPGJyLz5cIikpO1xuICAgIHJldHVybiBhfSxmbkNvbnRlbnRMYW5kdXNlPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJxdWFycnlcIj09Yi5sYW5kdXNlJiZiLnJlc291cmNlJiYoYSs9XCJSZXNvdXJjZTogXCIrYi5yZXNvdXJjZStcIjxici8+XCIpO1wib3Blbl9zdGFibGVcIj09YltcImFuaW1hbF9rZWVwaW5nOnR5cGVcIl0mJihhKz1cIk9mZmVuc3RhbGw8YnIvPlwiKTtcImZpZWxkX3NoZWx0ZXJcIj09YltcImFuaW1hbF9rZWVwaW5nOnR5cGVcIl0mJihhKz1cIldlaWRlIG1pdCBVbnRlcnN0YW5kPGJyLz5cIik7XCJwYWRkb2NrXCI9PWJbXCJhbmltYWxfa2VlcGluZzp0eXBlXCJdJiYoYSs9XCJQYWRkb2NrPGJyLz5cIik7Yi5hbmltYWxfa2VlcGluZyYmKGErPVwiVGllcmU6IFBlcmRlPGJyLz5cIik7cmV0dXJuIGF9LGZuTWVzc3N0YXRpb249ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtcInllc1wiPT1iW1wibW9uaXRvcmluZzp3YXRlcl9sZXZlbFwiXSYmKGErPVwiUGVnZWxzdGFuZDxici8+XCIpO1wieWVzXCI9PWJbXCJtb25pdG9yaW5nOnNlaXNtaWNfYWN0aXZpdHlcIl0mJlxuKGErPVwic2Vpc21pc2NoZSBBa3Rpdml0XFx1MDBlNHRlbjxici8+XCIpO1wieWVzXCI9PWJbXCJtb25pdG9yaW5nOnRpZGVfZ2F1Z2VcIl0mJihhKz1cIlRpZGVzdGFuZDxici8+XCIpO1wieWVzXCI9PWJbXCJtb25pdG9yaW5nOndlYXRoZXJcIl0mJihhKz1cIldldHRlcmRhdGVuPGJyLz5cIik7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6YWlyX3F1YWxpdHlcIl0mJihhKz1cIkx1ZnRxdWFsaXRcXHUwMGU0dDxici8+XCIpO3JldHVybiBhfSxmbkNvbnRlbnRSb3V0ZT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2Iucm91dGUmJihcInllc1wiPT1iLnJvdW5kdHJpcCYmKGErPVwiUnVuZHdlZzxici8+XCIpLGIubGVuZ3RoJiYoYSs9XCJMXFx1MDBlNG5nZS9EaXN0YW56OiBcIitiLmxlbmd0aCtcIjxici8+XCIpLGIuZGlzdGFuY2UmJihhKz1cIkxcXHUwMGU0bmdlL0Rpc3Rhbno6IFwiK2IuZGlzdGFuY2UrXCI8YnIvPlwiKSxiLnN5bWJvbCYmKGErPVwiU3ltYm9sOiBcIitiLnN5bWJvbCtcIjxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50UGV0cm9sPWZ1bmN0aW9uKGIpe3ZhciBhPVxuICAgIFwiXCI7XCJmdWVsXCI9PWIuYW1lbml0eSYmKFwieWVzXCI9PWJbXCJmdWVsOmJpb2RpZXNlbFwiXSYmKGErPVwiQmlvZGllc2VsPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6ZTg1XCJdJiYoYSs9XCJFdGhhbm9sPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6ZTEwXCJdJiYoYSs9XCJFMTA8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpscGdcIl0mJihhKz1cIkF1dG9nYXM8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpjbmdcIl0mJihhKz1cIkVyZGdhczxici8+XCIpLFwiZGllc2VsXCI9PWIuZnVlbCYmKGErPVwiRGllc2VsPGJyLz5cIiksXCJscGdcIj09Yi5mdWVsJiYoYSs9XCJBdXRvZ2FzPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6b2N0YW5lXzk1XCJdJiYoYSs9XCJTdXBlciBCbGVpZnJlaTxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOm9jdGFuZV85OFwiXSYmKGErPVwiU3VwZXIgUGx1czxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOm9jdGFuZV8xMDBcIl0mJihhKz1cIlYtUG93ZXIgUmFjaW5nPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6b2N0YW5lXzEwMlwiXSYmKGErPVxuICAgIFwiVWx0aW1hdGU8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpkaWVzZWxcIl0mJihhKz1cIkRpZXNlbDxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmVsZWN0cmljaXR5XCJdJiYoYSs9XCJMYWRlc3RhdGlvbiAvIFN0cm9tdGFua3N0ZWxsZTxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50SGlzdG9yaWM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImFyY2hhZW9sb2dpY2FsX3NpdGVcIj09Yi5oaXN0b3JpYyYmYi5zaXRlX3R5cGUpc3dpdGNoKGIuc2l0ZV90eXBlKXtjYXNlIFwibWVnYWxpdGhcIjphKz1cIk1lZ2FsaXRoPGJyLz5cIjticmVhaztjYXNlIFwiYmlnc3RvbmVcIjphKz1cIkZpbmRsaW5nPGJyLz5cIjticmVhaztjYXNlIFwidHVtdWx1c1wiOmErPVwiSFxcdTAwZmNnZWxncmFiPGJyLz5cIjticmVhaztjYXNlIFwiZm9ydGlmaWNhdGlvblwiOmErPVwiaGlzdG9yaXNjaGVyIEdyYWJlbiAvIFdhbGw8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnQ8YnIvPlwifXJldHVybiBhfSxmbkNvbnRlbnRCYXJyaWVycz1cbiAgICBmdW5jdGlvbihiLGEpe3ZhciBjPVwiXCI7aWYoXCJ3YWxsXCI9PWIuYmFycmllcnx8XCJib2xsYXJkXCI9PWIuYmFycmllciliLm1hdGVyaWFsJiYoYys9XCJNYXRlcmlhbDogXCIrdHJhbnNsYXRlKGIubWF0ZXJpYWwpK1wiPGJyLz5cIik7cmV0dXJuIGN9LGZuQ29udGVudFRvdXJpc209ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImNhbXBfc2l0ZVwiPT1iLnRvdXJpc20pe1wieWVzXCI9PWIuZG9nJiYoYSs9XCJIdW5kZSBlcmxhdWJ0PGJyLz5cIik7XCJub1wiPT1iLmRvZyYmKGErPVwiSHVuZGUgbmljaHQgZXJsYXVidDxici8+XCIpO2Iuc3RhcnMmJihhKz1iLnN0YXJzK1wiU3Rlcm5lPGJyLz5cIik7Yi5jYXJhdmFucyYmKGErPVwiV29obm1vYmlsc3RlbGxwbFxcdTAwZTR0emU8YnIvPlwiKTtpZihcInllc1wiPT1iLm9wZW5maXJlfHxcInllc1wiPT1iLmZpcmVwbGFjZSlhKz1cIkZldWVyc3RlbGxlbiB2b3JoYW5kZW48YnIvPlwiO1wieWVzXCI9PWIud2FzaGluZ19tYWNoaW5lJiYoYSs9XCJXYXNjaG1hc2NoaW5lbjxici8+XCIpO1wieWVzXCI9PVxuYi5kcnllciYmKGErPVwiVHJvY2tuZXI8YnIvPlwiKTtcInllc1wiPT1iLmdyb3VwX29ubHkmJihhKz1cIk51dHp1bmcgbnVyIGR1cmNoIEdydXBwZW48YnIvPlwiKTtcInJlY2VwdGlvblwiPT1iLmNhbXBfc2l0ZSYmKGErPVwiUmVjZXB0aW9uIHZvcmhhbmRlbjxici8+XCIpfVwiaW5mb3JtYXRpb25cIj09Yi50b3VyaXNtJiZcIm1hcFwiPT1iLmluZm9ybWF0aW9uJiYoXCJ0b3BvXCI9PWIubWFwX3R5cGUmJihhKz1cIlRvcG9ncmFmaXNjaGUgS2FydGU8L2JyPlwiKSxcInN0cmVldFwiPT1iLm1hcF90eXBlJiYoYSs9XCJTdHJhXFx1MDBkZmVua2FydGU8L2JyPlwiKSxcInNjaGVtZVwiPT1iLm1hcF90eXBlJiYoYSs9XCJTY2hlbWF0aXNjaGUgS2FydGU8L2JyPlwiKSxcInRvcG9zY29wZVwiPT1iLm1hcF90eXBlJiYoYSs9XCJTY2hlbWF0aXNjaGUgS2FydGU8L2JyPlwiKSk7XCJpbmZvcm1hdGlvblwiPT1iLnRvdXJpc20mJlwibWFwXCI9PWIuaW5mb3JtYXRpb24mJihcInNpdGVcIj09Yi5tYXBfc2l6ZSYmKGErPVwiS2FydGUgZWluZXIgQW5sYWdlPC9icj5cIiksXG5cImNpdHlcIj09Yi5tYXBfc2l6ZSYmKGErPVwiU3RhZHRwbGFuPC9icj5cIiksXCJyZWdpb25cIj09Yi5tYXBfc2l6ZSYmKGErPVwiS2FydGUgZGVyIFJlZ2lvbjwvYnI+XCIpKTtcImdlb2xvZ3lcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJHZW9sb2dpc2NoZSBJbmZvcm1hdGlvbmVuPGJyLz5cIik7XCJoaXN0b3J5XCI9PWIuYm9hcmRfdHlwZSYmKGErPVwiSGlzdG9yaXNjaGUgSW5mb3JtYXRpb25lbjxici8+XCIpO1wibmF0dXJlXCI9PWIuYm9hcmRfdHlwZSYmKGErPVwiSW5mb3JtYXRpb25lbiBcXHUwMGZjYmVyIE5hdHVyPGJyLz5cIik7XCJub3RpY2VcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJBbGxnZW1laW5lIEluZm9ybWF0aW9uPGJyLz5cIik7XCJwbGFudHNcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJJbmZvcm1hdGlvbmVuIFxcdTAwZmNiZXIgUGZsYW56ZW48YnIvPlwiKTtcIndpbGRsaWZlXCI9PWIuYm9hcmRfdHlwZSYmKGErPVwiSW5mb3JtYXRpb25lbiBcXHUwMGZjYmVyIFdpbGQ8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50QW1lbml0eT1cbiAgICBmdW5jdGlvbihiKXt2YXIgYT1cIlwiO1wiYm9hdF9zaGFyaW5nXCI9PWIuYW1lbml0eSYmKGErPWIuYm9hdHR5cGUrXCI8YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiYoYSs9Yi5jb3VudHJ5K1wiPGJyLz5cIik7aWYoYi52ZW5kaW5nKXN3aXRjaChiLnZlbmRpbmcpe2Nhc2UgXCJhZG1pc3Npb25fdGlja2V0c1wiOmErPVwiVGlja2V0czxici8+XCI7YnJlYWs7Y2FzZSBcImFuaW1hbF9mZWVkXCI6YSs9XCJUaWVyZnV0dGVyPGJyLz5cIjticmVhaztjYXNlIFwiYm9va3NcIjphKz1cIkJcXHUwMGZjY2hlcjxici8+XCI7YnJlYWs7Y2FzZSBcImNhbmRsZXNcIjphKz1cIktlcnplbjxici8+XCI7YnJlYWs7Y2FzZSBcImNpZ2FyZXR0ZXNcIjphKz1cIlppZ2FyZXR0ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb25kb21zXCI6YSs9XCJLb25kb21lPGJyLz5cIjticmVhaztjYXNlIFwiZHJpbmtzXCI6YSs9XCJHZXRyXFx1MDBlNG5rZTxici8+XCI7YnJlYWs7Y2FzZSBcImZpcnN0X2FpZFwiOmErPVwiRXJzdGUgSGlsZmUgQXJ0aWtlbDxici8+XCI7YnJlYWs7XG4gICAgICAgIGNhc2UgXCJmaXNoaW5nX3RhY2tsZVwiOmErPVwiQW5nZWxlcXVpcG1lbnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmbG93ZXJzXCI6YSs9XCJCbHVtZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJpY2VfY3JlYW1cIjphKz1cIkVpczxici8+XCI7YnJlYWs7Y2FzZSBcImxhdW5kcnlfZGV0ZXJnZW50XCI6YSs9XCJXYXNjaG1pdHRlbDxici8+XCI7YnJlYWs7Y2FzZSBcIm5ld3NwYXBlcnNcIjphKz1cIlplaXR1bmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTSU1fY2FyZHNcIjphKz1cIlNJTS1LYXJ0ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJzd2VldHNcIjphKz1cIlNcXHUwMGZjXFx1MDBkZmlna2VpdGVuPGJyLz5cIjticmVhaztjYXNlIFwicGFyY2VsX3BpY2t1cFwiOmErPVwiUGFrZXRzdGF0aW9uPGJyLz5cIjticmVhaztjYXNlIFwiaWNlX2N1YmVzXCI6YSs9XCJFaXN3XFx1MDBmY3JmZWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwdWJsaWNfdHJhbnNwb3J0X3RpY2tldHNcIjphKz1cIlRpY2tldHMgZlxcdTAwZmNyIFxcdTAwZjZmZmVudGxpY2hlIFZlcmtlaHJzbWl0dGVsPGJyLz5cIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJwYXJraW5nX3RpY2tldFwiOmErPVwiUGFya3RpY2tldDxici8+XCI7YnJlYWs7Y2FzZSBcInNleF90b3lzXCI6YSs9XCJTZXhzcGllbHpldWc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzdGFtcHNcIjphKz1cIkJyaWVmbWFya2VuPGJyLz5cIjticmVhaztjYXNlIFwidG9sbFwiOmErPVwiTWF1dHRpY2tldHM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bWJyZWxsYXNcIjphKz1cIlJlZ2Vuc2NoaXJtZTxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIkluaGFsdCB1bmJla2FubnQ8YnIvPlwifVwicG9zdF9ib3hcIj09Yi5hbWVuaXR5JiYoYi5jb2xsZWN0aW9uX3RpbWVzJiYoYSs9XCJMZWVydW5nc3plaXRlbjogXCIrYi5jb2xsZWN0aW9uX3RpbWVzK1wiPGJyLz5cIiksXCJ5ZXNcIj09Yi5kcml2ZV90aHJvdWdoJiYoYSs9XCJWb20gQXV0byBhdXMgZXJyZWljaGJhci4gPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRTdG9yYWdlPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7aWYoXCJzdG9yYWdlX3RhbmtcIj09Yi5tYW5fbWFkZSl7aWYoYi5jb250ZW50KXt2YXIgYz1cbiAgICBiLmNvbnRlbnQ7c3dpdGNoKGMpe2Nhc2UgXCJmdWVsXCI6Yz1cIkRpZXNlbFwiO2JyZWFrO2Nhc2UgXCJvaWxcIjpjPVwiXFx1MDBkNmxcIjticmVhaztjYXNlIFwiZ2FzXCI6Yz1cIkdhc1wiO2JyZWFrO2Nhc2UgXCJzbHVycnlcIjpjPVwiR1xcdTAwZmNsbGVcIjticmVhaztjYXNlIFwiY2VtZW50XCI6Yz1cIlplbWVudFwiO2JyZWFrO2Nhc2UgXCJ3YXRlclwiOmM9XCJXYXNzZXJcIjticmVhaztjYXNlIFwibWFudXJlXCI6Yz1cIkRcXHUwMGZjbmdlclwiO2JyZWFrO2Nhc2UgXCJzaWxhZ2VcIjpjPVwiU2lsYWdlXCJ9YSs9XCJJbmhhbHQ6IFwiK2MrXCI8YnIvPlwifWlmKGIuY29udGVudHMpe2M9Yi5jb250ZW50cztzd2l0Y2goYyl7Y2FzZSBcImZ1ZWxcIjpjPVwiRGllc2VsXCI7YnJlYWs7Y2FzZSBcIm9pbFwiOmM9XCJcXHUwMGQ2bFwiO2JyZWFrO2Nhc2UgXCJnYXNcIjpjPVwiR2FzXCI7YnJlYWs7Y2FzZSBcInNsdXJyeVwiOmM9XCJHXFx1MDBmY2xsZVwiO2JyZWFrO2Nhc2UgXCJjZW1lbnRcIjpjPVwiWmVtZW50XCI7YnJlYWs7Y2FzZSBcIndhdGVyXCI6Yz1cIldhc3NlclwiO2JyZWFrO1xuICAgIGNhc2UgXCJtYW51cmVcIjpjPVwiRFxcdTAwZmNuZ2VyXCI7YnJlYWs7Y2FzZSBcInNpbGFnZVwiOmM9XCJTaWxhZ2VcIn1hKz1cIkluaGFsdDogXCIrYytcIjxici8+XCJ9fWIuc3RvcmFnZSYmKFwiZ2FzXCI9PWIuc3RvcmFnZSYmKGErPVwiSW5oYWx0OiBHYXM8YnIvPlwiKSxcIm9pbFwiPT1iLnN0b3JhZ2UmJihhKz1cIkluaGFsdDogXFx1MDBkNmw8YnIvPlwiKSk7cmV0dXJuIGF9LGZuQ29udGVudEluZm9ybWF0aW9uQ2l0eT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2JbXCJuYW1lOmRlXCJdJiYoYSs9XCJkZXV0c2NoZXIgTmFtZTogXCIrYltcIm5hbWU6ZGVcIl0rXCI8YnIvPlwiKTtpZigxRTQ8PWIucG9wdWxhdGlvbilpZihiLnBvcHVsYXRpb249XCJcIitiLnBvcHVsYXRpb24sMzxiLnBvcHVsYXRpb24ubGVuZ3RoKXt2YXIgYz1iLnBvcHVsYXRpb24ubGVuZ3RoJTMsZD0wPGM/Yi5wb3B1bGF0aW9uLnN1YnN0cmluZygwLGMpOlwiXCI7Zm9yKGk9MDtpPE1hdGguZmxvb3IoYi5wb3B1bGF0aW9uLmxlbmd0aC8zKTtpKyspZD0wPT1jJiYwPT1cbmk/ZCtiLnBvcHVsYXRpb24uc3Vic3RyaW5nKGMrMyppLGMrMyppKzMpOmQrKFwiLlwiK2IucG9wdWxhdGlvbi5zdWJzdHJpbmcoYyszKmksYyszKmkrMykpO2ErPVwiRWlud29obmVyemFobDogXCIrZCtcIjxici8+XCJ9ZWxzZSBhKz1cIkVpbndvaG5lcnphaGwgXCIrYi5wb3B1bGF0aW9uK1wiPGJyLz5cIjsxRTQ+PWIucG9wdWxhdGlvbiYmKGErPVwiRWlud29obmVyemFobDogXCIrYi5wb3B1bGF0aW9uK1wiPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEVtZXJnZW5jeT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2IubGlmZWJvYXQmJihcImluc2hvcmVcIj09Yi5saWZlYm9hdD9hKz1cIkVpbnNhdHpnZWJpZXQ6IEluc2hvcmUgKEJpbm5lbik8YnIvPlwiOlwib2Zmc2hvcmVcIj09Yi5saWZlYm9hdCYmKGErPVwiRWluc2F0emdlYmlldDogT2Zmc2hvcmUgKEJ1dGVuKTxici8+XCIpKTtiW1wibGlmZWJvYXQ6Y2xhc3NcIl0mJihhKz1cIkJvb3RzdHlwOiBcIitiW1wibGlmZWJvYXQ6Y2xhc3NcIl0rXCI8YnIvPlwiKTtpZihiW1wic2lyZW46dHlwZVwiXSl7dmFyIGM9XG4gICAgYltcInNpcmVuOnR5cGVcIl07c3dpdGNoKGMpe2Nhc2UgXCJtZWNoYW5pY2FsXCI6Yz1cIm1lY2hhbmlzY2hcIjticmVhaztjYXNlIFwiZWxlY3Ryb25pY1wiOmM9XCJlbGVrdHJvbmlzY2hcIjticmVhaztjYXNlIFwicG5ldW1hdGljXCI6Yz1cInBuZXVtYXRpc2NoXCI7YnJlYWs7Y2FzZSBcImVsZWN0cm9tZWNoYW5pY1wiOmM9XCJlbGVrdHJvbWVjaGFuaXNjaFwifWErPVwiVHlwOiBcIitjK1wiPGJyLz5cIn1pZihiW1wic2lyZW46cHVycG9zZVwiXSl7Yz1iW1wic2lyZW46cHVycG9zZVwiXTtzd2l0Y2goYyl7Y2FzZSBcImFpcl9yYWlkXCI6Yz1cIkx1ZnRzY2h1dHpcIjticmVhaztjYXNlIFwidG9ybmFkb1wiOmM9XCJUb3JuYWRvXCI7YnJlYWs7Y2FzZSBcInN0b3JtXCI6Yz1cIlN0dXJtXCI7YnJlYWs7Y2FzZSBcImNpdmlsX2RlZmVuc2VcIjpjPVwiQmV2XFx1MDBmNmxrZXJ1bmdzc2NodXR6XCI7YnJlYWs7Y2FzZSBcImZpcmVcIjpjPVwiRmV1ZXJcIn1hKz1cIk51dHp1bmc6IFwiK2MrXCI8YnIvPlwifWJbXCJzaXJlbjptb2RlbFwiXSYmKGErPVwiTW9kZWw6IFwiK2JbXCJzaXJlbjptb2RlbFwiXStcbiAgICBcIjxici8+XCIpO2JbXCJzaXJlbjpyYW5nZVwiXSYmKGErPVwiSFxcdTAwZjZyd2VpdGU6IFwiK2JbXCJzaXJlbjpyYW5nZVwiXStcIjxici8+XCIpO3JldHVybiBhfSxmbkNvbnRlbnRDdWlzaW5lPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7aWYoYi5jdWlzaW5lKXt2YXIgYz1cIlwiLGE9KFwic3VwZXJtYXJrZXRcIj09Yi5zaG9wfHxcImNvbnZlbmllbmNlXCI9PWIuc2hvcHx8XCJkZWxpXCI9PWIuc2hvcHx8XCJvcmdhbmljXCI9PWIuc2hvcCkmJlwicmVzdGF1cmFudFwiIT1iLmFtZW5pdHk/YStcIlNwZXppYWxpdFxcdTAwZTR0ZW46IFwiOmErXCJLXFx1MDBmY2NoZTogXCI7XCJhcmFiaWNcIj09Yi5jdWlzaW5lJiYoYys9XCJhcmFiaXNjaDxici8+XCIpO1wiaXRhbGlhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBpdGFsaWVuaXNjaDxici8+XCIpO1wiaW50ZXJuYXRpb25hbFwiPT1iLmN1aXNpbmUmJihjKz1cIiBpbnRlcm5hdGlvbmFsPGJyLz5cIik7XCJyZWdpb25hbFwiPT1iLmN1aXNpbmUmJihjKz1cIiByZWdpb25hbDxici8+XCIpO1wiY2hpbmVzZVwiPT1iLmN1aXNpbmUmJlxuKGMrPVwiIGNoaW5lc2lzY2g8YnIvPlwiKTtcImdyZWVrXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGdyaWVjaGlzY2g8YnIvPlwiKTtcImFmcmljYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgYWZyaWthbmlzY2g8YnIvPlwiKTtcImdlcm1hblwiPT1iLmN1aXNpbmUmJihjKz1cIiBkZXV0c2NoPGJyLz5cIik7XCJtZXhpY2FuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIG1leGlrYW5pc2NoPGJyLz5cIik7XCJmcmVuY2hcIj09Yi5jdWlzaW5lJiYoYys9XCIgZnJhbnpcXHUwMGY2c2lzY2g8YnIvPlwiKTtcImluZGlhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBpbmRpc2NoPGJyLz5cIik7XCJpcmFuaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGlyYW5pc2NoPGJyLz5cIik7XCJsZWJhbmVzZVwiPT1iLmN1aXNpbmUmJihjKz1cIiBsaWJhbmVzaXNjaDxici8+XCIpO1widGhhaVwiPT1iLmN1aXNpbmUmJihjKz1cIiB0aGFpbFxcdTAwZTRuZGlzY2g8YnIvPlwiKTtcImJhbGthblwiPT1iLmN1aXNpbmUmJihjKz1cIiBiYWxrYW48YnIvPlwiKTtcInR1cmtpc2hcIj09Yi5jdWlzaW5lJiZcbihjKz1cIiB0XFx1MDBmY3JraXNjaDxici8+XCIpO1wiYmF2YXJpYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgYmF5cmlzY2g8YnIvPlwiKTtcImN6ZWNoXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHRzY2hlY2hpc2NoPGJyLz5cIik7XCJwb3J0dWd1ZXNlXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHBvcnR1Z2llc2lzY2g8YnIvPlwiKTtcInNwYW5pc2hcIj09Yi5jdWlzaW5lJiYoYys9XCIgc3BhbmlzY2g8YnIvPlwiKTtcImphcGFuZXNlXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGphcGFuaXNjaDxici8+XCIpO1wiZmlzaFwiPT1iLmN1aXNpbmUmJihjKz1cIiBGaXNjaDxici8+XCIpO1wiYnJhemlsaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGJyYXNpbGlhbmlzY2g8YnIvPlwiKTtcImFzaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGFzaWF0aXNjaDxici8+XCIpO1wibWVkaXRlcnJhbmVhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBtZWRpdGVycmFuPGJyLz5cIik7XCJzZWFmb29kXCI9PWIuY3Vpc2luZSYmKGMrPVwiIE1lZXJlc2ZyXFx1MDBmY2NodGU8YnIvPlwiKTtcImljZV9jcmVhbVwiPT1cbmIuY3Vpc2luZSYmKGMrPVwiIEVpc2NyZW08YnIvPlwiKTtcImJ1cmdlclwiPT1iLmN1aXNpbmUmJihjKz1cIiBGYXN0IEZvb2Q8YnIvPlwiKTtcImZyb3plbl95b2d1cnRcIj09Yi5jdWlzaW5lJiYoYys9XCIgRnJvemVuIFlvZ3VydDxici8+XCIpO1wiXCI9PWMmJihjPWIuY3Vpc2luZStcIjxici8+XCIpO2ErPWN9cmV0dXJuIGF9LGZuQ29udGVudFNoaXBwaW5nPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7Yi5oYXJib3VyPVwieWVzXCI7XCJ5ZXNcIj09YltcImFjY2Vzczp0aWRlXCJdJiYoYSs9XCJadWZhaHJ0c2Jlc2NoclxcdTAwZTRua3VuZyBkdXJjaCBUaWRlPC9icj5cIik7XCJ5ZXNcIj09YltcImFjY2Vzczpzd2VsbFwiXSYmKGErPVwiWnVmYWhydHNiZXNjaHJcXHUwMGU0bmt1bmcgZHVyY2ggU2Nod2VsbDwvYnI+XCIpO1wieWVzXCI9PWJbXCJhY2Nlc3M6aWNlXCJdJiYoYSs9XCJadWZhaHJ0c2Jlc2NoclxcdTAwZTRua3VuZyBkdXJjaCBFaXM8L2JyPlwiKTtiLnZoZl9jaGFubmVsJiYoYSs9XCJVS1ctS2FuYWw6IFwiK2IudmhmX2NoYW5uZWwrXG4gICAgXCI8L2JyPlwiKTtiLm1tc2kmJihhKz1cIk1NU0ktTnVtbWVyOiBcIitiLm1tc2krXCI8L2JyPlwiKTtiW1wiaGFyYm91cjppbmZvcm1hdGlvblwiXSYmKGErPVwiSW5mb3JtYXRpb24gOlwiK2JbXCJoYXJib3VyOmluZm9ybWF0aW9uXCJdK1wiPC9icj5cIik7XCJ5ZXNcIj09Yi5tb3RvcmJvYXQmJihhKz1cIkZhaHJlbiBtaXQgTW90b3IgZXJsYXVidDwvYnI+XCIpO1wibm9cIj09Yi5tb3RvcmJvYXQmJihhKz1cIkZhaHJlbiBtaXQgTW90b3IgbmljaHQgZXJsYXVidDwvYnI+XCIpO2IuQ0VNVCYmKGErPVwiQ0VNVDogXCIrYi5DRU1UK1wiPC9icj5cIik7XCJ5ZXNcIj09Yi5pbnRlcm1pdHRlbnQmJihhKz1cIkZsdXNzIHplaXR3ZWlzZSBhdXNnZXRyb2NrbmV0PC9icj5cIik7XCJ5ZXNcIj09Yi50aWRhbCYmKGErPVwiR2V6ZWl0ZW4gYmVlaW5mbHVzc2VuIGRpZSBTdHJcXHUwMGY2bXVuZzwvYnI+XCIpO2IuZHJhZnQmJihhKz1cIkZhaHJ3YXNzZXJ0aWVmZTogXCIrYi5kcmFmdCtcIiBtPC9icj5cIik7aWYoXCJzbGlwd2F5XCI9PWIubGVpc3VyZXx8XCJzbGlwd2F5XCI9PVxuICAgIGIuaGFyYm91cilcImhhbmRcIj09Yi5vcGVyYXRpbmcmJihhKz1cIkZ1bmt0aW9uc3dlaXNlOiBIYW5kYmV0cmllYiwgU2xpcHdhZ2VuPGJyLz5cIiksXCJjYXJcIj09Yi5vcGVyYXRpbmcmJihhKz1cIkZ1bmt0aW9uc3dlaXNlOiBtaXQgQXV0bywgQm9vdHNhbmhcXHUwMGU0bmdlcjxici8+XCIpLFwiY2FibGVfd2luY2hcIj09Yi5vcGVyYXRpbmcmJihhKz1cIkZ1bmt0aW9uc3dlaXNlOiBTZWlsd2luZGU8YnIvPlwiKSxcInRyYXZlbGxpZnRcIj09Yi5vcGVyYXRpbmcmJihhKz1cIkZ1bmt0aW9uc3dlaXNlOiBUcmF2ZWxsaWZ0PGJyLz5cIiksXCJjcmFuZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJtaXQgS3Jhbjxici8+XCIsYltcImNyYW5lOm1heGxvYWRcIl0mJihhKz1cIk1heGltYWxlIExhc3Q6IFwiK2JbXCJjcmFuZTptYXhsb2FkXCJdK1wiPGJyLz5cIiksYltcInNoaXA6bWF4ZHJhZnRcIl0mJihhKz1cIk1heGltYWxlciBUaWVmZ2FuZzogXCIrYltcInNoaXA6bWF4ZHJhZnRcIl0rXCI8YnIvPlwiKSxiW1wic2hpcDptYXhsZW5ndGhcIl0mJihhKz1cbiAgICBcIk1heGltYWxlIEJvb3RzbFxcdTAwZTRuZ2U6IFwiK2JbXCJzaGlwOm1heGxlbmd0aFwiXStcIjxici8+XCIpKSxcInllc1wiPT1iLnZlaGljbGUmJihhKz1cIk1pdCBGYWhyemV1ZyBlcnJlaWNoYmFyPGJyLz5cIik7YSs9Zm5XcmVja0luZm8oYik7aWYoXCJmZXJyeVwiPT1iLnJvdXRlfHxcImZlcnJ5X3Rlcm1pbmFsXCI9PWIuYW1lbml0eXx8XCJ5ZXNcIj09Yi5mZXJyeSl7dmFyIGM9Yi5kdXJhdGlvbjtcIlwiIT1jJiYoXCJ1bmRlZmluZWRcIiE9YyYmbnVsbCE9YykmJihhKz1cIkZhaHJ0emVpdCBpbiBTdGQuIDogXCIrYytcIjxici8+XCIpO1wieWVzXCI9PWIubW90b3JjYXImJihhKz1cIkF1dG9zIGVybGF1YnQgPGJyLz5cIik7XCJub1wiPT1iLm1vdG9yY2FyJiYoYSs9XCJBdXRvcyBuaWNodCBlcmxhdWJ0IDxici8+XCIpO1wibm9cIj09Yi5tb3Rvcl92ZWhpY2xlJiYoYSs9XCJGYWhyemV1Z2UgbmljaHQgZXJsYXVidCA8YnIvPlwiKTtcInllc1wiPT1iLm1vdG9yX3ZlaGljbGUmJihhKz1cIkZhaHJ6ZXVnZSBlcmxhdWJ0IDxici8+XCIpO1wieWVzXCI9PVxuYi52ZWhpY2xlJiYoYSs9XCJGYWhyemV1Z2UgZXJsYXVidCA8YnIvPlwiKTtcIm5vXCI9PWIudmVoaWNsZSYmKGErPVwiS2VpbmUgRmFocnpldWdlPGJyLz5cIik7XCJub1wiPT1iLmJpY3ljbGUmJihhKz1cIktlaW5lIEZhaHJyXFx1MDBlNGRlcjxici8+XCIpO1wibm9cIj09Yi5iaWN5Y2xlJiYoYSs9XCJGYWhyclxcdTAwZTRkZXIgZXJsYXVidDxici8+XCIpO1wieWVzXCI9PWIuaGd2JiYoYSs9XCJMS1cgZXJsYXVidCA8YnIvPlwiKTtcIm5vXCI9PWIuaGd2JiYoYSs9XCJMS1cgbmljaHQgZXJsYXVidCA8YnIvPlwiKTtcInllc1wiPT1iLmZvb3QmJihhKz1cIkZ1c3NnXFx1MDBlNG5nZXIgZXJsYXVidCA8YnIvPlwiKTtcIm5vXCI9PWIuZm9vdCYmKGErPVwiRnVzc2dcXHUwMGU0bmdlciBuaWNodCBlcmxhdWJ0IDxici8+XCIpO1wieWVzXCI9PWIuYmljeWNsZSYmKGErPVwiRmFocnJhZGZhaHJlciBlcmxhdWJ0IDxici8+XCIpO1wibm9cIj09Yi5iaWN5Y2xlJiYoYSs9XCJGYWhycmFkZmFocmVyIG5pY2h0IGVybGF1YnQgPGJyLz5cIik7XCJ5ZXNcIj09YltcImZlcnJ5OmNhYmxlXCJdJiZcbihhKz1cIlNlaWxmXFx1MDBlNGhyZTxici8+XCIpfWlmKGJbXCJzZWFtYXJrOmxpZ2h0OjE6Y29sb3VyXCJdKXtjPWJbXCJzZWFtYXJrOmxpZ2h0OjE6Y29sb3VyXCJdO3N3aXRjaChjKXtjYXNlIFwid2hpdGVcIjpjPVwiV2VpXFx1MDBkZlwiO2JyZWFrO2Nhc2UgXCJyZWRcIjpjPVwiUm90XCI7YnJlYWs7Y2FzZSBcImdyZWVuXCI6Yz1cIkdyXFx1MDBmY25cIjticmVhaztjYXNlIFwiYmx1ZVwiOmM9XCJCbGF1XCI7YnJlYWs7Y2FzZSBcInllbGxvd1wiOmM9XCJHZWxiXCI7YnJlYWs7Y2FzZSBcImFtYmVyXCI6Yz1cIkJlcm5zdGVpbmZhcmJlblwifWErPVwiRmFyYmUgZGVzIExpY2h0czogXCIrYytcIjxici8+XCJ9XCJsaWdodGhvdXNlXCI9PWIubWFuX21hZGUmJihiW1wic2VhbWFyazpsaWdodDoxOmNoYXJhY3RlclwiXSYmKGErPVwiUmh5dG11cyBkZXMgTGljaHRlczogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpjaGFyYWN0ZXJcIl0rXCI8YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDoxOnBlcmlvZFwiXSYmKGErPVwiUGVyaW9kZTogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpwZXJpb2RcIl0rXG4gICAgXCI8YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDoxOmhlaWdodFwiXSYmKGErPVwiSFxcdTAwZjZoZTogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpoZWlnaHRcIl0rXCIgbTxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OjE6cmFuZ2VcIl0mJihhKz1cIlJlaWNod2VpdGU6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OjE6cmFuZ2VcIl0rXCIgc208YnIvPlwiKSk7aWYoYltcInNlYW1hcms6bGlnaHQ6Y29sb3VyXCJdKXtjPWJbXCJzZWFtYXJrOmxpZ2h0OmNvbG91clwiXTtzd2l0Y2goYyl7Y2FzZSBcIndoaXRlXCI6Yz1cIldlaVxcdTAwZGZcIjticmVhaztjYXNlIFwicmVkXCI6Yz1cIlJvdFwiO2JyZWFrO2Nhc2UgXCJncmVlblwiOmM9XCJHclxcdTAwZmNuXCI7YnJlYWs7Y2FzZSBcImJsdWVcIjpjPVwiQmxhdVwiO2JyZWFrO2Nhc2UgXCJ5ZWxsb3dcIjpjPVwiR2VsYlwiO2JyZWFrO2Nhc2UgXCJhbWJlclwiOmM9XCJCZXJuc3RlaW5mYXJiZW5cIn1hKz1cIkZhcmJlIGRlcyBMaWNodHM6IFwiK2MrXCI8YnIvPlwifVwibGlnaHRob3VzZVwiPT1iLm1hbl9tYWRlJiYoYltcInNlYW1hcms6bGlnaHQ6Y2hhcmFjdGVyXCJdJiZcbihhKz1cIlJoeXRtdXMgZGVzIExpY2h0ZXM6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OmNoYXJhY3RlclwiXStcIjxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OmhlaWdodFwiXSYmKGErPVwiSFxcdTAwZjZoZTogXCIrYltcInNlYW1hcms6bGlnaHQ6aGVpZ2h0XCJdK1wiIG08YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDpyYW5nZVwiXSYmKGErPVwiUmVpY2h3ZWl0ZTogXCIrYltcInNlYW1hcms6bGlnaHQ6cmFuZ2VcIl0rXCIgc208YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDpwZXJpb2RcIl0mJihhKz1cIlBlcmlvZGU6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OnBlcmlvZFwiXStcIjxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50SHlkcmFudHM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImZpcmVfaHlkcmFudFwiPT1iLmVtZXJnZW5jeSl7dmFyIGM9YltcImZpcmVfaHlkcmFudDpjb3VudFwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIkFuemFobDogXCIrYytcIjxici8+XCIpO2M9YltcImZpcmVfaHlkcmFudDpkaWFtZXRlclwiXTtcbiAgICBcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIlJvaHJkdXJjaG1lc3NlcjogXCIrYytcIiBtbTxici8+XCIpO2M9YltcImZpcmVfaHlkcmFudDpwcmVzc3VyZVwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhPVwic3VjdGlvblwiPT1jP2ErXCJEcnVjayBpbiBiYXIgLyBTYXVnbGVpdHVuZzogU2F1Z2xlaXR1bmc8YnIvPlwiOmErKFwiRHJ1Y2sgaW4gYmFyIC8gU2F1Z2xlaXR1bmc6IFwiK2MrXCI8YnIvPlwiKSk7Yz1iW1wiZmlyZV9oeWRyYW50OnBvc2l0aW9uXCJdO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKFwibGFuZVwiPT1jP2ErPVwiUG9zaXRpb246IEZhaHJiYWhuPGJyLz5cIjpcInBhcmtpbmdfbG90XCI9PWM/YSs9XCJQb3NpdGlvbjogUGFya2J1Y2h0PGJyLz5cIjpcInNpZGV3YWxrXCI9PWM/YSs9XCJQb3NpdGlvbjogQlxcdTAwZmNyZ2Vyc3RlaWc8YnIvPlwiOlwiZ3JlZW5cIj09YyYmKGErPVwiUG9zaXRpb246IFdpZXNlPGJyLz5cIikpO2M9Yi53YXRlcl92b2x1bWU7XG4gICAgXCJ1bmRlZmluZWRcIiE9YyYmKG51bGwhPWMmJlwiXCIhPWMpJiYoYSs9XCJWb2x1bWVuOiBcIitjK1wiPGJyLz5cIik7Yz1iW1wiZmlyZV9oeWRyYW50OmF3d2FfY2xhc3NcIl07XCJ1bmRlZmluZWRcIiE9YyYmbnVsbCE9YyYmXCJcIiE9Yz9hKz1cIkFXV0EgS2xhc3NlOiBcIitjK1wiPGJyLz5cIjooYz1iLmZsb3dfcmF0ZSxcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIkR1cmNoZmx1c3M6IFwiK2MrXCI8YnIvPlwiKSk7Yz1iLndhdGVyX3NvdXJjZTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YyYmXCJtYWluXCIhPWMpJiYoYSs9XCJXYXNzZXJxdWVsbGU6IFwiK2MrXCI8YnIvPlwiKTtjPWJbXCJjb3VwbGluZ3M6dHlwZVwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIktvcHBsdW5nc3R5cDogXCIrYytcIjxici8+XCIpO2M9YltcImNvdXBsaW5nczpkaWFtZXRlclwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIktvcHBsdW5nc2R1cmNobWVzc2VyOiBcIitcbiAgICAgICAgYytcIjxici8+XCIpO2M9YltcInBpbGxhcjp0eXBlXCJdO1wiZHJ5X2JhcnJlbFwiPT09YyYmKGErPVwiVHlwIFxcdTAwZGNiZXJmbHVyaHlkcmFudDogXCIrYytcIjxici8+XCIpO1wiZmlyZV9oeWRyYW50XCI9PT1iW1wiZGlzdXNlZDplbWVyZ2VuY3lcIl0mJihhKz1cIkFrdHVlbGwgdW5icmF1Y2hiYXIuXCIpO1wiXCI9PWEmJihhPVwiS2VpbmUgRGV0YWlscyB2b3JoYW5kZW4uXCIpfXJldHVybiBhfSxmbkNvbnRlbnRTdHJlZXRzVHJhZmZpYz1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO1wieWVzXCI9PWJbXCJyZWRfdHVybjpyaWdodFwiXSYmKGErPVwiQW1wZWwgbWl0IEdyXFx1MDBmY25wZmVpbDxici8+XCIpO1wibm9cIj09YltcInJlZF90dXJuOnJpZ2h0XCJdJiYoYSs9XCJBbXBlbCBvaG5lIEdyXFx1MDBmY25wZmVpbDxici8+XCIpO2IuYnJpZGdlJiYoYi5oZWlnaHQmJihhKz1cIkhcXHUwMGY2aGUgXFx1MDBmY2JlciBkZW0gR3J1bmQ6IFwiK2IuaGVpZ2h0K1wiIG08YnIvPlwiKSxiLmxlbmd0aCYmKGErPVwiTFxcdTAwZTRuZ2UgZGVyIEJyXFx1MDBmY2NrZTogXCIrXG4gICAgYi5sZW5ndGgrXCIgbTxici8+XCIpLGIuYnJpZGdlX3JlZiYmKGErPVwiQmF1d2Vya3NudW1tZXI6IFwiK2IuYnJpZGdlX3JlZitcIjxici8+XCIpLGIuc3RhcnRfZGF0ZSYmKGErPVwiQmF1amFocjogXCIrYi5zdGFydF9kYXRlK1wiPC9icj47XCIpLGIubWF4d2VpZ2h0JiYoYSs9XCJUcmFnZlxcdTAwZTRoaWdrZWl0OiBcIitiLm1heHdlaWdodCtcIiB0PC9icj5cIikpO2IuaGlnaHdheSYmXCJ5ZXNcIj09Yi50b2xsJiYoYSs9XCJNYXV0cGZsaWNodGlnZSBTdHJhXFx1MDBkZmU8YnIvPlwiKTtcInllc1wiPT1iW1widG9sbDpoZ3ZcIl0mJihhKz1cIk1hdXRwZmxpY2h0aWdlIFN0cmFcXHUwMGRmZSBmXFx1MDBmY3IgTEtXczxici8+XCIpO2lmKGIuc3VyZmFjZSl7dmFyIGM9Yi5zdXJmYWNlLGE9YStcIk9iZXJmbFxcdTAwZTRjaGU6IFwiO3N3aXRjaChjKXtjYXNlIFwiZ3Jhc3NcIjphKz1cIkdyYXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXZlZFwiOmErPVwidmVyc2llZ2VsdDxici8+XCI7YnJlYWs7Y2FzZSBcImFzcGhhbHRcIjphKz1cIkFzcGhhbHQ8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJjb2JibGVzdG9uZVwiOmErPVwiTmF0dXJzdGVpbiB1bmJlaGF1ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZXR0XCI6YSs9XCJiZWhhdWVuZXMgU3RlaW5wZmxhc3Rlcjxici8+XCI7YnJlYWs7Y2FzZSBcImNvbmNyZXRlXCI6YSs9XCJCZXRvbjxici8+XCI7YnJlYWs7Y2FzZSBcInVucGF2ZWRcIjphKz1cIm9obmUgU3RyYVxcdTAwZGZlbmJlbGFnPGJyLz5cIjticmVhaztjYXNlIFwicGF2aW5nX3N0b25lc1wiOmErPVwiUGZsYXN0ZXJzdGVpbmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb21wYWN0ZWRcIjphKz1cInZlcmRpY2h0ZXRlIERlY2tzY2hpY2h0IGF1cyBOYXR1cnN0ZWlubWF0ZXJpYWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkaXJ0XCI6YSs9XCJ1bmJlZmVzdGlndDxici8+XCI7YnJlYWs7Y2FzZSBcImZpbmVfZ3JhdmVsXCI6YSs9XCJTcGxpdHQvS2llczxici8+XCI7YnJlYWs7Y2FzZSBcImdyYXNzX3BhdmVyXCI6YSs9XCJSYXNlbmdpdHRlcnN0ZWluZTxici8+XCI7YnJlYWs7Y2FzZSBcImdyYXZlbFwiOmErPVwiU2Nob3R0ZXI8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJlYXJ0aFwiOmErPVwibmF0dXJiZWxhc3NlbmUgT2JlcmZsXFx1MDBlNGNoZTxici8+XCI7YnJlYWs7Y2FzZSBcImdyb3VuZFwiOmErPVwibmF0dXJiZWxhc3NlbmUgT2JlcmZsXFx1MDBlNGNoZTxici8+XCI7YnJlYWs7Y2FzZSBcIm1ldGFsXCI6YSs9XCJNZXRhbGw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtdWRcIjphKz1cIk1hdHNjaCwgTW9yYXN0PGJyLz5cIjticmVhaztjYXNlIFwic2FuZFwiOmErPVwiU2FuZDxici8+XCI7YnJlYWs7Y2FzZSBcIndvb2RcIjphKz1cIkhvbHo8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0YXJ0YW5cIjphKz1cIlRhcnRhbi0gb2RlciBLdW5zdHN0b2ZmYmVsYWc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhcnRpZmljaWFsX3R1cmZcIjphKz1cIkt1bnN0cmFzZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjbGF5XCI6YSs9XCJBc2NoZXBsYXR6PGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn19XCJncmFkZTFcIj09Yi50cmFja3R5cGUmJihhKz1cIldlZ2Jlc2NoYWZmZW5oZWl0OiBCZWZlc3RpZ3RlciBXZWcgKEFzcGhhbHQsIEJldG9uIG9kZXIgUGZsYXN0ZXJzdGVpbmUpPGJyLz5cIik7XG4gICAgXCJncmFkZTJcIj09Yi50cmFja3R5cGUmJihhKz1cIldlZ2Jlc2NoYWZmZW5oZWl0OiBCZWZlc3RpZ3RlciBXZWcgKFNjaG90dGVyIG9kZXIgYW5kZXJlIHZlcmRpY2h0ZXRlIE1hdGVyaWFsaWVuKTxici8+XCIpO1wiZ3JhZGUzXCI9PWIudHJhY2t0eXBlJiYoYSs9XCJXZWdiZXNjaGFmZmVuaGVpdDogQmVmZXN0aWd0ZXIgb2RlciBhdXNnZWJlc3NlcnRlciBXZWcsIGRlciBoYXJ0ZW4gdW5kIHdlaWNoZW4gVW50ZXJncnVuZCBlbnRoXFx1MDBlNGx0ICh6LiBCLiBGZWluc2Nob3R0ZXItLCBTYW5kLSBvZGVyIEVyZHdlZyk8YnIvPlwiKTtcImdyYWRlNFwiPT1iLnRyYWNrdHlwZSYmKGErPVwiV2VnYmVzY2hhZmZlbmhlaXQ6IFVuYmVmZXN0aWd0ZXIgV2VnLCBoYXVwdHNcXHUwMGU0Y2hsaWNoIHdlaWNoZSBNYXRlcmlhbGllbiwgUGZsYW56ZW53dWNocyBlbnRsYW5nIGRlciBTcHVybWl0dGUgKHouIEIuIEdyYXMtLCBTYW5kLSBvZGVyIEVyZHdlZyk8YnIvPlwiKTtcImdyYWRlNVwiPT1iLnRyYWNrdHlwZSYmKGErPVxuICAgICAgICBcIldlZ2Jlc2NoYWZmZW5oZWl0OiBVbmJlZmVzdGlndGVyIFdlZywgT2JlcmZsXFx1MDBlNGNoZSBiZXN0ZWh0IGF1cyBTYW5kLCBFcmRlIGV0Yy4sIG9mdCBudXIgQWJkcnVjayBpbiBHcmFzLCB0ZWlsd2Vpc2Ugc2Nod2VyIHZvbiB1bWdlYmVuZGVtIEdlbFxcdTAwZTRuZGUgdW50ZXJzY2hlaWRiYXI8YnIvPlwiKTtcInllc1wiPT1iLm1vdG9yY3ljbGUmJihhKz1cIjxici8+bWl0IGRlbSBBdXRvIGJlZmFocmJhci48YnIvPlwiKTtcIm5vXCI9PWIubW90b3JjeWNsZSYmKGErPVwiPGJyLz5rZWluZSBtb3RvcmlzaWVydGVuIEZhaHJ6ZXVnZSB6dWdlbGFzc2VuLjxici8+XCIpO1wiZXhjZWxsZW50XCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwiV2VnZXJrZW5uYmFya2VpdDogR3V0IGF1c2dld2llc2VuZXIgV2VnPGJyLz5cIik7XCJnb29kXCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwiV2VnZXJrZW5uYmFya2VpdDogV2VnbWFya2llcnVuZyBzaWNoYmFyLCBhYmVyIG1hbmNobWFsIGV0d2FzIHNjaHdlciB6dSBmaW5kZW48YnIvPlwiKTtcbiAgICBcImludGVybWVkaWF0ZVwiPT1iLnRyYWlsX3Zpc2liaWxpdHkmJihhKz1cIldlZ2Vya2VubmJhcmtlaXQ6IFdlZyBuaWNodCBkdXJjaGdlZ2VuZCBzaWNoYmFyPGJyLz5cIik7XCJiYWRcIj09Yi50cmFpbF92aXNpYmlsaXR5JiYoYSs9XCJXZWdlcmtlbm5iYXJrZWl0OiBXZWdzcHVyIGlzdCBrYXVtIHp1IGVya2VubmVuPGJyLz5cIik7XCJob3JyaWJsZVwiPT1iLnRyYWlsX3Zpc2liaWxpdHkmJihhKz1cIldlZ2Vya2VubmJhcmtlaXQ6IE9mdCBrZWluIFdlZyB2b3JoYW5kZW48YnIvPlwiKTtcIm5vXCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwiV2VnZXJrZW5uYmFya2VpdDogTWVpc3RlbnMga2VpbmUgV2Vnc3B1ciB6dSBlcmtlbm5lbjxici8+XCIpO1wiaGlraW5nXCI9PWIuc2FjX3NjYWxlJiYoYSs9XCJXZWc6IFdlZyBndXQgZ2ViYWhudC4gKFNjaHdpZXJpZ3NrZWl0c3R5cDogMSk8L2JyPlwiKTtcIm1vdW50YWluX2hpa2luZ1wiPT1iLnNhY19zY2FsZSYmKGErPVwiV2VnOiBEdXJjaGdlaGVuZCBndXQgZXJzaWNodGxpY2hlciB1bmQgZ3V0IGJlZ2VoYmFyZXIgV2VnIChTY2h3aWVyaWdza2VpdHN0eXA6IDIpPC9icj5cIik7XG4gICAgXCJkZW1hbmRpbmdfbW91bnRhaW5faGlraW5nXCI9PWIuc2FjX3NjYWxlJiYoYSs9XCJXZWc6IEhlaWtsZSBTdGVsbGVuIGtcXHUwMGY2bm5lbiBtaXQgU2VpbGVuIG9kZXIgS2V0dGVuIGdlc2ljaGVydCBzZWluLiBMZWl0ZXJuIHNpbmQgbVxcdTAwZjZnbGljaC4gRXZlbnR1ZWxsIHNpbmQgZGllIEhcXHUwMGU0bmRlIGZcXHUwMGZjcnMgR2xlaWNoZ2V3aWNodCBuXFx1MDBmNnRpZy4gKFNjaHdpZXJpZ3NrZWl0c3R5cDogMyk8L2JyPlwiKTtcImFscGhpbmVfaGlraW5nXCI9PWIuc2FjX3NjYWxlJiYoYSs9XCJXZWc6IFdlZ3NwdXIga2F1bSB2b3JoYW5kZW4uIEFuIGdld2lzc2VuIFN0ZWxsZW4gYmVuXFx1MDBmNnRpZ3QgbWFuIGRpZSBIXFx1MDBlNG5kZSB6dW0gd2VpdGVya29tbWVuIChTY2h3aWVyaWdza2VpdHN0eXA6IDQpPC9icj5cIik7XCJkZW1hbmRpbmdfYWxwaGluZV9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cIldlZzogT2Z0IHdlZ2xvcywgZWluemVsbmUgZWluZmFjaGUgS2xldHRlcnN0ZWxsZW4gYmlzIElJLiAoU2Nod2llcmlnc2tlaXRzdHlwOiA1KTwvYnI+XCIpO1xuICAgIFwiZGlmZmljdWx0X2FscGluZV9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cIldlZzogU2Nod2llcmlnZXMgQWxwaW5lbndhbmRlcm4sS2xldHRlcnN0ZWxsZW4gYmlzIElJLiBTY2h3aWVyaWdza2VpdHN0eXA6IDY8L2JyPlwiKTtiW1wibXRiOm5hbWVcIl0mJihhKz1cIkZhaHJyYWRzdHJlY2tlIDpcIitiW1wibXRiOm5hbWVcIl0rXCI8L2JyPlwiKTtcIjBcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogS2VpbmUgYmVzb25kZXJlIFNjaHdpZXJpZ2tlaXRlbi48L2JyPldlZ2Jlc2NoYWZmZW5oZWl0OiBmZXN0ZXIgdW5kIGdyaWZmaWdlciBVbnRlcmdydW5kLjwvYnI+SGluZGVybmlzc2U6IEtlaW5lIEhpbmRlcm5pc3NlPC9icj5HZWZcXHUwMGU0bGxlOiBMZWljaHQgYmlzIG1cXHUwMGU0XFx1MDBkZmlnPC9icj5LdXJ2ZW46IHdlaXQ8L2JyPkZhaHJ0ZWNobmlrOiBrZWluZSBiZXNvbmRlcmVzIGZhaHJ0ZWNobmlzY2hlcyBLXFx1MDBmNm5uZW4gblxcdTAwZjZ0aWc8L2JyPlwiKTtcbiAgICBcIjFcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogRGVyIFdlZyBlbnRoXFx1MDBlNGx0IGZsYWNoZSBXdXJ6ZWxuIHVuZCBrbGVpbmVyZSBTdGVpbmUuIEhcXHUwMGU0dWZpZyBhdWNoIHZlcmVpemVsdGUgV2Fzc2VycmlubmVuIHVuZCBFcm9zaW9uc3NjaFxcdTAwZTRkZW48L2JyPldlZ2Jlc2NoYWZmZW5oZWl0OiBsb3NlcmVyIFVudGVyZ3J1bmQgbVxcdTAwZjZnbGljaCwga2xlaW5lIFd1cnplbG4gdW5kIFN0ZWluZTwvYnI+SGluZGVybmlzc2U6IGtsZWluZSBIaW5kZXJuaXNzZSwgV2Fzc2VycmlubmVuLCBFcm9zaW9uc3NjaFxcdTAwZTRkZW48L2JyPkdlZlxcdTAwZTRsbGU6IGJpcyB6dSA0MCU8L2JyPkt1cnZlbjogZW5nPC9icj5GYWhydGVjaG5pazogRmFocnRlY2huaXNjaGUgR3J1bmRrZW50bmlzc2UgblxcdTAwZjZ0aWcuIEhpbmRlcm5pc3NlIGtcXHUwMGY2bm5lbiBcXHUwMGZjYmVycm9sbHQgd2VyZGVuPC9icj5cIik7XCIyXCI9PWJbXCJtdGI6c2NhbGVcIl0mJlxuICAgIChhKz1cIk1vdW50YWluYmlrZXN0cmVja2U6IERlciBXZWcgZW50aFxcdTAwZTRsdCBnclxcdTAwZjZcXHUwMGRmZXJlIFd1cnplbG4gdW5kIFN0ZWluZS4gSFxcdTAwZTR1ZmlnIGF1Y2ggdmVyZWl6ZWx0ZSBXYXNzZXJyaW5uZW4gdW5kIEVyb3Npb25zc2NoXFx1MDBlNGRlbjwvYnI+V2VnYmVzY2hhZmZlbmhlaXQ6IFVudGVyZ3J1bmQgbWVpc3QgbmljaHQgdmVyZmVzdGlndCwgZ3JcXHUwMGY2XFx1MDBkZmVyZSBXdXJ6ZWxuIHVuZCBTdGVpbmU8L2JyPkhpbmRlcm5pc3NlOiAgZmxhY2hlIEFic1xcdTAwZTR0emUgdW5kIFRyZXBwZW48L2JyPkdlZlxcdTAwZTRsbGU6IGJpcyB6dSA3MCU8L2JyPkt1cnZlbjogbGVpY2h0ZSBTcGl0emtlaHJlbjwvYnI+RmFocnRlY2huaWs6IEZvcnRnZXNjaHJpdHRlbmUgRmFocnRlY2huaWsgblxcdTAwZjZ0aWcuPC9icj5cIik7XCIzXCI9PWJbXCJtdGI6c2NhbGVcIl0mJihhKz1cIk1vdW50YWluYmlrZXN0cmVja2U6IEF1ZiBkZW0gV2VnIGZpbmRldCBtYW4gdmVyYmxvY2t0ZSBTaW5nbGV0cmFpbHMgbWl0IHZpZWxlbiBnclxcdTAwZjZcXHUwMGRmZXJlbiBGZWxzYnJvY2tlbiB1bmQvb2RlciBXdXJ6ZWxwYXNzYWdlbjwvYnI+V2VnYmVzY2hhZmZlbmhlaXQ6IHZlcmJsb2NrdCwgdmllbGUgZ3JvXFx1MDBkZmUgV3VyemVsbi9GZWxzZW4gLSBydXRzY2hpZ2VyIFVudGVyZ3J1bmQsIGxvc2VzIEdlclxcdTAwZjZsbDwvYnI+SGluZGVybmlzc2U6ICBob2hlIEFic1xcdTAwZTR0emU8L2JyPkdlZlxcdTAwZTRsbGU6IDcwJSBvZGVyIG1laHI8L2JyPkt1cnZlbjogZW5nZSBTcGl0emtlaHJlbjwvYnI+RmFocnRlY2huaWs6IFNlaHIgZ3V0ZSBCaWtlLUJlaGVycnNjaHVuZyBuXFx1MDBmNnRpZy48L2JyPlwiKTtcbiAgICBcIjRcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogQXVmIGRlbSBXZWcgc2luZCBzZWhyIHN0ZWlsZSB1bmQgc3RhcmsgdmVyYmxvY2t0ZSBTaW5nbGV0cmFpbHMgbWl0IGdyb1xcdTAwZGZlbiBGZWxzYnJvY2tlbiB1bmQvb2RlciBhbnNwcnVjaHN2b2xsZW4gV3VyemVscGFzc2FnZW4sIGRhendpc2NoZW4gaFxcdTAwZTR1ZmlnIGxvc2VzIEdlclxcdTAwZjZsbCB1bmQgZXh0cmVtZSBTdGVpbHJhbXBlbjwvYnI+V2VnYmVzY2hhZmZlbmhlaXQ6IHZlcmJsb2NrdCwgdmllbGUgZ3JvXFx1MDBkZmUgV3VyemVsbi9GZWxzZW4gLSBydXRzY2hpZ2VyIFVudGVyZ3J1bmQsIGxvc2VzIEdlclxcdTAwZjZsbDwvYnI+SGluZGVybmlzc2U6ICBTdGVpbHJhbXBlbiwga2F1bSBmYWhyYmFyZSBBYnNcXHUwMGU0dHplPC9icj5HZWZcXHUwMGU0bGxlOiA3MCUgb2RlciBtZWhyPC9icj5LdXJ2ZW46ICBcXHUwMGQ2c2VuYXJ0aWdlIFNwaXR6a2VocmVuPC9icj5GYWhydGVjaG5pazogUGVyZmVrdGUgQmlrZS1CZWhlcnJzY2h1bmcgbWl0IFRyaWFsLVRlY2huaWtlbiBuXFx1MDBmNnRpZy48L2JyPlwiKTtcbiAgICBcIjVcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogRGVyIHdlZyB3aXJkIGNoYXJha3RlcmlzaWVydCBkdXJjaCBibG9ja2FydGlnZXMgR2VsXFx1MDBlNG5kZSBtaXQgR2VnZW5hbnN0aWVnZW4sIEdlclxcdTAwZjZsbGZlbGRlcm4gdW5kIEVyZHJ1dHNjaGVuLCBcXHUwMGY2c2VuYXJ0aWdlbiBTcGl0emtlaHJlbiwgbWVocmVyZW4gaG9oZW4sIGRpcmVrdCBhdWZlaW5hbmRlcmZvbGdlbmRlbiBBYnNcXHUwMGU0dHplbiB1bmQgSGluZGVybmlzc2VuIHdpZSB1bWdlZmFsbGVuZW4gQlxcdTAwZTR1bWVuPC9icj5XZWdiZXNjaGFmZmVuaGVpdDogdmVyYmxvY2t0IG1pdCBHZWdlbmFuc3RpZWdlbiAvIHJ1dHNjaGlnZXIgVW50ZXJncnVuZCwgbG9zZXMgR2VyXFx1MDBmNmxsIC8gZGVyIFdlZyBpc3QgZWhlciBlaW4gV2FuZGVyc3RlaWc8L2JyPkhpbmRlcm5pc3NlOiAgU3RlaWxyYW1wZW4sIGthdW0gZmFocmJhcmUgQWJzXFx1MDBlNHR6ZTwvYnI+R2VmXFx1MDBlNGxsZTogNzAlIG9kZXIgbWVocjwvYnI+S3VydmVuOiAgXFx1MDBkNnNlbmFydGlnZSBTcGl0emtlaHJlbiBtaXQgSGluZGVybmlzc2VuPC9icj5GYWhydGVjaG5pazogZXhjZWxsZW50ZSBCaWtlLUJlaGVycnNjaHVuZyBzcGV6aWVsbGVyIFRyaWFsLVRlY2huaWtlbiBuXFx1MDBmNnRpZy48L2JyPlwiKTtcbiAgICBcIjZcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogRGVyIHdlZyBpc3QgaG9jaGFuc3BydWNoc3ZvbGwsIHVuZCBzZWxic3QgZlxcdTAwZmNyIFByb2ZpcyB1bmQgVHJpYWwtRmFocmVyIG5pY2h0IHBhc3NpZXJiYXI8L2JyPldlZ2Jlc2NoYWZmZW5oZWl0OiAgR3JvXFx1MDBkZnRlaWxzIG51ciBub2NoIGtsZXR0ZXJiYXI8L2JyPkhpbmRlcm5pc3NlOiBBYnNcXHUwMGU0dHplID4gMiBtLCBMZWl0ZXJuLCBUcml0dHN0dWZlbiwgS2xldHRlcnN0ZWxsZW4gYmVpIGRlbmVuIG1hbiBiZWlkZSBIXFx1MDBlNG5kZSBicmF1Y2h0LjwvYnI+R2VmXFx1MDBlNGxsZTogMTAwJSBvZGVyIG1laHI8L2JyPkt1cnZlbjogLSA8L2JyPkZhaHJ0ZWNobmlrOiAgaGllciByZWljaHQgYXVjaCBkaWUgYmVzdGUgRmFocnRlY2huaWsgbmljaHQgbWVocjwvYnI+XCIpO1wiMTBcIj09Yi5tYXhzcGVlZCYmKGErPVwiVmVrZWhyc2JlclxcdTAwZmNoaWd0ZXIgQmVyZWljaC4gSGllciBnaWx0IGVpbmUgbWF4aW1hbGUgRmFocmdlc2Nod2luZGlna2VpdCB2b24gMTAgS20vaCBzb3dpZSBkaWUgUmVnZWwgcmVjaHRzIHZvciBsaW5rcy48L2JyPlwiKTtcbiAgICBcIjMwXCI9PWIubWF4c3BlZWQmJihhKz1cIlZla2VocnNiZXJcXHUwMGZjaGlndGVyIEJlcmVpY2guIEhpZXIgZ2lsdCByZWNodHMgdm9yIGxpbmtzIHNvd2llIGVpbmUgbWF4aW1hbGUgR2VzY2h3aW5kaWdrZWl0IHZvbiAzMCBLbS9oPC9icj5cIik7XCI1MFwiPT1iLm1heHNwZWVkJiYoYSs9XCJNYXhpbWFsIGVybGF1YnRlIEdlc2Nod2luZGlna2VpdCB2b24gNTAgS20vaCBkYXJmIG5pY2h0IFxcdTAwZmNiZXJzY2hyaXR0ZW4gd2VyZGVuIDwvYnI+XCIpO1wiNzBcIj09Yi5tYXhzcGVlZCYmKGErPVwiTWF4aW1hbCBlcmxhdWJ0ZSBHZXNjaHdpbmRpZ2tlaXQgdm9uIDUwIEttL2ggZGFyZiBuaWNodCBcXHUwMGZjYmVyc2Nocml0dGVuIHdlcmRlbiA8L2JyPlwiKTtcIjgwXCI9PWIubWF4c3BlZWQmJihhKz1cIk1heGltYWxlIEdlc2Nod2luZGlna2VpdCB2b24gODAgS20vaCBkYXJmIG5pY2h0IFxcdTAwZmNiZXJzY2hyaXR0ZW4gd2VyZGVuLjwvYnI+XCIpO1wiMTAwXCI9PWIubWF4c3BlZWQmJihhKz1cIk1heGltYWxlIEdlc2Nod2luZGlna2VpdCB2b24gMTAwIEttL2ggZGFyZiBuaWNodCBcXHUwMGZjYmVyc2Nocml0dGVuIHdlcmRlbi48L2JyPlwiKTtcbiAgICBcIm5vXCI9PWIub3ZlcnRha2luZyYmKGErPVwiXFx1MDBkY2JlcmhvbHZlcmJvdCwgRmFocnpldWdlIGRcXHUwMGZjcmZlbiBuaWNodCBcXHUwMGZjYmVyaG9sZW4gITwvYnI+XCIpO1wieWVzXCI9PWIubm9leGl0JiYoYSs9XCJEaWUgU3RyYVxcdTAwZGZlIGVuZGV0IGhpZXIsIGVzIGhhbmRlbHQgc2ljaCB1bSBlaW5lIFNhY2tnYXNzZTwvYnI+XCIpO1wieWVzXCI9PWIub25ld2F5JiYoYSs9XCJFcyBoYW5kZWx0IHNpY2ggaGllciB1bSBlaW5lIEVpbmJhaG5zdHJhXFx1MDBkZmUsIHNpZSBkXFx1MDBmY3JmZW4gZGllc2UgU3RyYVxcdTAwZGZlIG51ciBpbiBlaW5lIFJpY2h0dW5nIGJlZmFocmVuPC9icj5cIik7XCJkZXNpZ25hdGVkXCI9PWIucHJpb3JpdHlfcm9hZCYmKGErPVwiRXMgaGFuZGVsdCBzaWNoIGhpZXJiZWkgdW0gZWluZSBWb3JmYWhydHNzdHJhXFx1MDBkZmUsIGRlcmplbmlnZSwgZGVyIHNpY2ggYXVmIGRpZXNlciBiZWZpbmRldCwgaGF0IGdlZ2VuXFx1MDBmY2JlciBhbmRlcmVuIEZhaHJ6ZXVnZW4gZGllIFZvcmZhaHJ0ITwvYnI+XCIpO1xuICAgIFwiZW5kXCI9PWIucHJpb3JpdHlfcm9hZCYmKGErPVwiRGllIFZvcmZhaHJ0c3N0cmFcXHUwMGRmZSBlbmRldCBoaWVyIHVuZCBkaWUgUmVnZWx1bmcgd2lyZCBhdWZnZWhvYmVuPC9icj5cIik7XCJlbWVyZ2VuY3lfYmF5XCI9PWIuaGlnaHdheSYmKGErPVwiSGllciBiZWZpbmRldCBzaWNoIGVpbmUgQnVjaHQgZGllIG51ciBpbiBOb3RmXFx1MDBlNGxsZW4genVyIEJlbnV6dW5nIHp1ciBWZXJmXFx1MDBmY2d1bmcgc3RlaHQ8L2JyPlwiKTtcInllc1wiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiVmVya2VocnNiZXJ1aGlndGVyIEJlcmVpY2g8L2JyPlwiKTtcImJ1bXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkt1cnplIEJvZGVud2VsbGU8L2JyPlwiKTtcImNoaWNhbmVcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIlp1IHVtZmFocmVuZGVuZXMgSGluZGVybmlzczwvYnI+XCIpO1wiY2hva2VyXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJGYWhyYmFobnZlcmVuZ3VuZywgenUgdW1mYWhyZW5kZSBIaW5kZXJuaXNzZSBtXFx1MDBmNmdsaWNoPC9icj5cIik7XG4gICAgXCJjdXNoaW9uXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJCb2RlbndlbGxlIG1pdCBMXFx1MDBmY2NrZW4gYXVzIG1laHJlcmVuIHJlY2h0ZWNraWdlbiBIdWNrZWxuPC9icj5cIik7XCJodW1wXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJ2ZXJnbGVpY2hiYXJlIEJvZGVud2VsbGUgbWl0IGV0d2FyIGVpbmVyIExcXHUwMGU0bmdlIHZvbiAyLTRNPC9icj5cIik7XCJpc2xhbmRcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkVpbmUgVmVya2VocnNpbnNlbDwvYnI+XCIpO1wicnVtYmxlX3N0cmlwXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJIb2xwZXJzdHJlaWZlbjwvYnI+XCIpO1widGFibGVcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImxhbmdlIEJvZGVud2VsbGVuIG1pdCBmbGFjaGVuIE1pdHRlbHN0XFx1MDBmY2NrPC9icj5cIik7aWYoXCJwYXJraW5nXCI9PWIuYW1lbml0eSYmKFwieWVzXCI9PWIuZmVlJiYoYSs9XCJrb3N0ZW5wZmxpY2h0aWc8YnIvPlwiKSxjPWJbXCJjYXBhY2l0eTp3b21lblwiXSxcbiAgICBcIlwiIT1jJiZcIm5vXCIhPWMmJm51bGwhPWMpKXt2YXIgZD1cInVuYmVrYW5udFwiO1wieWVzXCIhPWMmJihkPWMpO2ErPVwiRnJhdWVucGFya3BsXFx1MDBlNHR6ZSAoQW56YWhsOiBcIitkK1wiKSA8YnIvPlwifWIucGFya19yaWRlJiYoXCJidXNcIj09Yi5wYXJrX3JpZGUmJihhKz1cIkJ1c2FuYmluZHVuZzxici8+XCIpLFwidHJhbVwiPT1iLnBhcmtfcmlkZSYmKGErPVwiQmFobmFuYmluZHVuZzxici8+XCIpLFwidW5rbm93blwiPT1iLnBhcmtfcmlkZSYmKGErPVwiVmVya2VocnNtaXR0ZWwgdW5iZWthbm50PGJyLz5cIikpO2JbXCJyYWlsd2F5OnBvc2l0aW9uXCJdJiYoYSs9XCJTdHJlY2tlbmtpbG9tZXRlcjxici8+UG9zaXRpb246IFwiK2JbXCJyYWlsd2F5OnBvc2l0aW9uXCJdK1wiPGJyLz5cIik7Yi51aWNfcmVmJiYoYSs9XCJVSUM6IFwiK2IudWljX3JlZitcIjxici8+XCIpO3JldHVybiBhfSxmbkNvbnRlbnRTcG9ydHM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtcIjlwaW5cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEtlZ2Vsbjxici8+XCIpO1xuICAgIFwiMTBwaW5cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJvd2xpbmc8YnIvPlwiKTtcImFtZXJpY2FuX2Zvb3RiYWxsXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBBbWVyaWNhbiBGb290YmFsbDxici8+XCIpO1wiYWlraWRvXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBBaWtpZG88YnIvPlwiKTtcImFyY2hlcnlcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJvZ2Vuc2NoaWVcXHUwMGRmZW48YnIvPlwiKTtcImF0aGxldGljc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogTGVpY2h0YXRobGV0aWs8YnIvPlwiKTtcImF1c3RyYWxpYW5fZm9vdGJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEF1c3RyYWxpYW4gRm9vdGJhbGw8YnIvPlwiKTtcImJhc2VcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IE9iamVrdHNwcmluZ2VuPGJyLz5cIik7XG4gICAgXCJiYWRtaW50b25cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJhZG1pbnRvbjxici8+XCIpO1wiYmFzZWJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJhc2ViYWxsPGJyLz5cIik7XCJiYXNrZXRiYWxsXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBCYXNrZXRiYWxsPGJyLz5cIik7XCJiZWFjaHZvbGxleWJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJlYWNodm9sbGV5YmFsbDxici8+XCIpO1wiYm14XCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBCTVg8YnIvPlwiKTtcImJvdWxlc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQm9jY2lhPGJyLz5cIik7XCJib3VsZVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQm9jY2lhPGJyLz5cIik7XCJib3dsc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQm93bHM8YnIvPlwiKTtcbiAgICBcImJveGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQm94ZW48YnIvPlwiKTtcImNhbmFkaWFuX2Zvb3RiYWxsXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBDYW5hZGlhbiBGb290YmFsbDxici8+XCIpO1wiY2Fub2VcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFBhZGRlbG48YnIvPlwiKTtcImNoZXNzXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBTY2hhY2g8YnIvPlwiKTtcImNsaWZmX2RpdmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogS2xpcHBlbnNwcmluZ2VuPGJyLz5cIik7XCJjbGltYmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogS2xldHRlcm48YnIvPlwiKTtcImNsaW1iaW5nX2FkdmVudHVyZVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogS2xldHRlcm48YnIvPlwiKTtcImNyaWNrZXRcIj09Yi5zcG9ydCYmXG4gICAgKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IENyaWNrZXQ8YnIvPlwiKTtcImNyaWNrZXRfbmV0c1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQ3JpY2tldCBOZXR6PGJyLz5cIik7XCJjcm9xdWV0XCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBDcm9xdWV0PGJyLz5cIik7XCJjdXJsaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBDdXJsaW5nPGJyLz5cIik7XCJjeWNsaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBSYWRyZW5uZW4sIFJhZHNwb3J0PGJyLz5cIik7XCJkb2dfcmFjaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBIdW5kZXJlbm5lbjxici8+XCIpO2lmKFwiZGFydHNcIj09Yi5zcG9ydHx8XCJkYXJ0XCI9PWIuc3BvcnQpYSs9XCJEYXJ0czxici8+XCI7XCJmZW5jaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBGZWNodGVuPGJyLz5cIik7XG4gICAgXCJlcXVlc3RyaWFuXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBSZWl0ZW48YnIvPlwiKTtcImZvb3RiYWxsXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBBbWVyaWNhbiBGb290YmFsbDxici8+XCIpO1wiZnJlZV9mbHlpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEZyZWVmbHlpbmc8YnIvPlwiKTtcImdhZWxpY19nYW1lc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogR2FlbGljIGdhbWVzPGJyLz5cIik7XCJnb2xmXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBHb2xmPGJyLz5cIik7XCJneW1uYXN0aWNzXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBHeW1uYXN0aWs8YnIvPlwiKTtcImhvY2tleVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogSG9ja2V5PGJyLz5cIik7XCJob3JzZXNob2VzXCI9PWIuc3BvcnQmJihhKz1cbiAgICAgICAgXCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogSHVmZWlzZW53ZXJmZW48YnIvPlwiKTtcImhvcnNlX3JhY2luZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogUGZlcmRlcmVubmVuPGJyLz5cIik7XCJpY2Vfc3RvY2tcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEVpc3N0b2Nrc2NoaWVcXHUwMGRmZW48YnIvPlwiKTtcImp1ZG9cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEp1ZG88YnIvPlwiKTtcImthcnRpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEthcnRmYWhyZW48YnIvPlwiKTtcImtpdGVzdXJmaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBLaXRlc3VyZmluZzxici8+XCIpO1wia29yZmJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEtvcmZiYWxsPGJyLz5cIik7XCJtb3RvclwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogTW90b3JzcG9ydDxici8+XCIpO1xuICAgIFwibXVsdGlcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IE1laHJmYWNoc3BvcnQ8YnIvPlwiKTtcIm9ic3RhY2xlX2NvdXJzZVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogSGluZGVybmlzbGF1Zjxici8+XCIpO1wib3JpZW50ZWVyaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBPcmllbnRpZXJ1bmdzbGF1Zjxici8+XCIpO1wicGFkZGxlX3Rlbm5pc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogUGFkZGxlLVRlbm5pczxici8+XCIpO1wicGFyYWdsaWRpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEdsZWl0c2NoaXJtZmxpZWdlbjxici8+XCIpO1wiUGVsb3RhXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBQZWxvdGE8YnIvPlwiKTtcInJhc3F1ZXRcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFJhY3F1ZXRiYWxsPGJyLz5cIik7XG4gICAgXCJyb3dpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFJ1ZGVybjxici8+XCIpO1wicnVnYnlfbGVhZ3VlXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBSdWdieSBMZWFndWU8YnIvPlwiKTtcInJ1Z2J5X3VuaW9uXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBSdWdieSBVbmlvbjxici8+XCIpO1wicnVubmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogTGF1ZnNwb3J0PGJyLz5cIik7XCJzY3ViYV9kaXZpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFNwb3J0dGF1Y2hlbjxici8+XCIpO1wic2hvb3RpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFNwb3J0c2NoaWVcXHUwMGRmZW48YnIvPlwiKTtcInNrYXRpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEVpc2xhdWZzcG9ydDxici8+XCIpO1wic2thdGVib2FyZFwiPT1cbiAgICBiLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogU2thdGVib2FyZDxici8+XCIpO1wic2tpaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBTa2lmYWhyZW48YnIvPlwiKTtcInNvY2NlclwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogRnVcXHUwMGRmYmFsbDxici8+XCIpO1wic3VyZmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogU3VyZmVuPGJyLz5cIik7XCJzd2ltbWluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogU2Nod2ltbWVuPGJyLz5cIik7XCJ0YWJsZV90ZW5uaXNcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFRpc2NodGVubmlzPGJyLz5cIik7XCJ0YWVrd29uZG9cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFRhZWt3b25kbzxici8+XCIpO1widGVhbV9oYW5kYmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogSGFuZGJhbGw8YnIvPlwiKTtcbiAgICBcInRlbm5pc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogVGVubmlzPGJyLz5cIik7XCJ0b2JvZ2dhblwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogUm9kZWxuPGJyLz5cIik7XCJ2b2xsZXliYWxsXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBWb2xsZXliYWxsPGJyLz5cIik7XCJ3YXRlcl9za2lcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFdhc3NlcnNraTxici8+XCIpO1wid2VpZ2h0bGlmdGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogR2V3aWNodGhlYmVuPGJyLz5cIik7XCJ3cmVzdGxpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFJpbmdlbjxici8+XCIpO3JldHVybiBhfTtcbmV4cG9ydCBmdW5jdGlvbiBmbkFyenRJbmZvKGIpe3ZhciBhPVwiXCIsYz1cIlwiLGQ9YltcImhlYWx0aGNhcmU6c3BlY2lhbGl0eVwiXTtcIlwiIT1kJiYoXCJnZW5lcmFsXCI9PWQmJihjKz1cIkFsbGdlbWVpbm1lZGl6aW48YnIvPlwiKSxcImFsbGVyZ29sb2d5XCI9PWQmJihjKz1cIkFsbGVyZ29sb2dpZTxici8+XCIpLFwiYW5hZXN0aGV0aWNzXCI9PWQmJihjKz1cIkFuXFx1MDBlNHN0aGVzaW9sb2dpZTxici8+XCIpLFwiYmlvY2hlbWlzdHJ5XCI9PWQmJihjKz1cIk1lZGl6aW5pc2NoZSB1bmQgY2hlbWlzY2hlIExhYm9yZGlhZ25vc3Rpazxici8+XCIpLFwiYmlvbG9naWNhbF9oYWVtYXRvbG9neVwiPT1kJiYoYys9XCJCaW9sb2dpc2NoZSBIXFx1MDBlNG1hdG9sb2dpZTxici8+XCIpLFwiYmlvbG9neVwiPT1kJiYoYys9XCJNZWRpemluaXNjaGUgQmlvbG9naWU8YnIvPlwiKSxcImNhcmRpb2xvZ3lcIj09ZCYmKGMrPVwiS2FyZGlvbG9naWU8YnIvPlwiKSxcImNhcmRpYWNfc3VyZ2VyeVwiPT1kJiYoYys9XCJLYXJkaW92YXNrdWxhcmNoaXJ1cmdpZTxici8+XCIpLFxuXCJjaGlsZF9wc3ljaGlhdHJ5XCI9PWQmJihjKz1cIktpbmRlci0gdS4gSnVnZW5kcHN5Y2hhdHJpZTxici8+XCIpLFwiZGVudGFsX29yYWxfbWF4aWxsb19mYWNpYWxfc3VyZ2VyeVwiPT1kJiYoYys9XCJaYWhuLSwgTXVuZC0sIEtpZWZlci0gdW5kIEdlc2ljaHRzY2hpcnVyZ2llPGJyLz5cIiksXCJkZXJtYXRvbG9neVwiPT1kJiYoYys9XCJIYXV0a3JhbmtoZWl0ZW48YnIvPlwiKSxcImRlcm1hdG92ZW5lcmVvbG9neVwiPT1kJiYoYys9XCJIYXV0LSB1bmQgR2VzY2hsZWNodHNrcmFua2hlaXRlbjxici8+XCIpLFwiZGlhZ25vc3RpY19yYWRpb2xvZ3lcIj09ZCYmKGMrPVwiRGlhZ25vc3Rpc2NoZSBSYWRpb2xvZ2llPGJyLz5cIiksXCJlbWVyZ2VuY3lcIj09ZCYmKGMrPVwiVW5mYWxsLSB1bmQgTm90ZmFsbG1lZGl6aW48YnIvPlwiKSxcImVuZG9jcmlub2xvZ3lcIj09ZCYmKGMrPVwiRW5kb2tyaW5vbG9naWU8YnIvPlwiKSxcImdhc3Ryb2VudGVyb2xvZ2ljYWxfc3VyZ2VyeVwiPT1kJiYoYys9XCJHYXN0cm9lbnRlcm9sb2dpc2NoZSBDaGlydXJnaWU8YnIvPlwiKSxcblwiZ2FzdHJvZW50ZXJvbG9neVwiPT1kJiYoYys9XCJHYXN0cm9lbnRlcm9sb2dpZTxici8+XCIpLFwiZ2VyaWF0cmljc1wiPT1kJiYoYys9XCJHZXJpYXRyaWU8YnIvPlwiKSxcImd5bmFlY29sb2d5XCI9PWQmJihjKz1cIkdlYnVydHNoaWxmZSB1bmQgRnJhdWVuaGVpbGt1bmRlPGJyLz5cIiksXCJoYWVtYXRvbG9neVwiPT1kJiYoYys9XCJBbGxnZW1laW5lIEhcXHUwMGU0bWF0b2xvZ2llPGJyLz5cIiksXCJoZXBhdG9sb2d5XCI9PWQmJihjKz1cIkhlcGF0b2xvZ2llPGJyLz5cIiksXCJpbW11bm9sb2d5XCI9PWQmJihjKz1cIkltbXVub2xvZ2llPGJyLz5cIiksXCJpbmZlY3Rpb3VzX2Rpc2Vhc2VzXCI9PWQmJihjKz1cIkFuc3RlY2tlbmRlIEtyYW5raGVpdGVuPGJyLz5cIiksXCJpbnRlbnNpdmVcIj09ZCYmKGMrPVwiSW50ZW5zaXZtZWRpemluPGJyLz5cIiksXCJpbnRlcm5hbFwiPT1kJiYoYys9XCJBbGxnZW1laW5lIChpbm5lcmUpIE1lZGl6aW48YnIvPlwiKSxcIm1heGlsbG9mYWNpYWxfc3VyZ2VyeVwiPT1kJiYoYys9XCJNdW5kLUtpZWZlci1HZXNpY2h0c2NoaXJ1cmdpZTxici8+XCIpLFxuXCJuZXBocm9sb2d5XCI9PWQmJihjKz1cIk5pZXJlbmtyYW5raGVpdGVuPGJyLz5cIiksXCJuZXVyb2xvZ3lcIj09ZCYmKGMrPVwiTmV1cm9sb2dpZTxici8+XCIpLFwibmV1cm9waHlzaW9sb2d5XCI9PWQmJihjKz1cIktsaW5pc2NoZSBOZXVyb3BoeXNpb2xvZ2llPGJyLz5cIiksXCJuZXVyb3BzeWNoaWF0cnlcIj09ZCYmKGMrPVwiTmV1cm9wc3ljaGlhdHJpZShOZXVyb2xvZ2llIHVuZCBQc3ljaGlhdHJpZSk8YnIvPlwiKSxcIm5ldXJvc3VyZ2VyeVwiPT1kJiYoYys9XCJOZXVyb2NoaXJ1cmdpZTxici8+XCIpLFwibnVjbGVhclwiPT1kJiYoYys9XCJOdWtsZWFybWVkaXppbjxici8+XCIpLFwib2NjdXBhdGlvbmFsXCI9PWQmJihjKz1cIkFyYmVpdHNtZWRpemluIDxici8+XCIpLFwib25jb2xvZ3lcIj09ZCYmKGMrPVwiT25rb2xvZ2llPGJyLz5cIiksXCJvcGh0aGFsbW9sb2d5XCI9PWQmJihjKz1cIkF1Z2VuaGVpbGt1bmRlPGJyLz5cIiksXCJvcnRob3BhZWRpY3NcIj09ZCYmKGMrPVwiT3J0aG9wXFx1MDBlNGRpZTxici8+XCIpLFwib3RvbGFyeW5nb2xvZ3lcIj09XG5kJiYoYys9XCJIYWxzLU5hc2VuLU9ocmVuLUhlaWxrdW5kZTxici8+XCIpLFwicGFlZGlhdHJpY19zdXJnZXJ5XCI9PWQmJihjKz1cIktpbmRlcmNoaXJ1cmdpZTxici8+XCIpLFwicGFlZGlhdHJpY3NcIj09ZCYmKGMrPVwiS2luZGVyaGVpbGt1bmRlPGJyLz5cIiksXCJwYWxsaWF0aXZlXCI9PWQmJihjKz1cIlBhbGxpYXRpdm1lZGl6aW48YnIvPlwiKSxcInBoeXNpYXRyeVwiPT1kJiYoYys9XCJQaHlzaWthbGlzY2hldW5kIFJlaGFiaWxpdGF0aXZlIE1lZGl6aW48YnIvPlwiKSxcInBsYXN0aWNfc3VyZ2VyeVwiPT1kJiYoYys9XCJQbGFzdGlzY2hlIENoaXJ1cmdpZTxici8+XCIpLFwicHJvY3RvbG9neVwiPT1kJiYoYys9XCJQcm9rdG9sb2dpZTxici8+XCIpLFwicHN5Y2hpYXRyeVwiPT1kJiYoYys9XCJQc3ljaGlhdHJpZTxici8+XCIpLFwicHVsbW9ub2xvZ3lcIj09ZCYmKGMrPVwiTHVuZ2VuLSB1bmQgQnJvbmNoaWFsaGVpbGt1bmRlPGJyLz5cIiksXCJyYWRpb2xvZ3lcIj09ZCYmKGMrPVwiUmFkaW9sb2dpZTxici8+XCIpLFwicmFkaW90aGVyYXB5XCI9PVxuZCYmKGMrPVwiU3RyYWhsZW50aGVyYXBpZTxici8+XCIpLFwicmhldW1hdG9sb2d5XCI9PWQmJihjKz1cIlJoZXVtYXRvbG9naWU8YnIvPlwiKSxcInN0b21hdG9sb2d5XCI9PWQmJihjKz1cIlN0b21hdG9sb2dpZTxici8+XCIpLFwic3VyZ2VyeVwiPT1kJiYoYys9XCJDaGlydXJnaWU8YnIvPlwiKSxcInN1cmdpY2FsX29uY29sb2d5XCI9PWQmJihjKz1cIktyZWJzY2hpcnVyZ2llPGJyLz5cIiksXCJ0aG9yYWNpY19zdXJnZXJ5XCI9PWQmJihjKz1cIlRob3JheGNoaXJ1cmdpZTxici8+XCIpLFwidHJhbnNwbGFudFwiPT1kJiYoYys9XCJUcmFuc3BsYW50YXRpb25zbWVkaXppbjxici8+XCIpLFwidHJhdW1hXCI9PWQmJihjKz1cIlVuZmFsbGNoaXJ1cmdpZTxici8+XCIpLFwidHJvcGljYWxcIj09ZCYmKGMrPVwiVHJvcGVubWVkaXppbjxici8+XCIpLFwidXJvbG9neVwiPT1kJiYoYys9XCJVcm9sb2dpZTxici8+XCIpLFwidmFzY3VsYXJfc3VyZ2VyeVwiPT1kJiYoYys9XCJHZWZcXHUwMGU0XFx1MDBkZmNoaXJ1cmdpZTxici8+XCIpLFwidmVuZXJlb2xvZ3lcIj09XG5kJiYoYys9XCJHZXNjaGxlY2h0c2tyYW5raGVpdGVuPGJyLz5cIiksXCJhY3VwdW5jdHVyZVwiPT1kJiYoYys9XCJBa3VwdW5rdHVyPGJyLz5cIiksXCJuYXR1cm9wYXRoeVwiPT1kJiYoYys9XCJOYXR1cmhlaWxrdW5kZTxici8+XCIpLFwiY2hpcm9wcmFjdGljXCI9PWQmJihjKz1cIkNoaXJvcHJha3RpayA8YnIvPlwiKSxcImhvbWVvcGF0aHlcIj09ZCYmKGMrPVwiSG9tXFx1MDBmNm9wYXRoaWU8YnIvPlwiKSxcIm9zdGVvcGF0aHlcIj09ZCYmKGMrPVwiT3N0ZW9wYXRoaWU8YnIvPlwiKSk7XCJcIiE9Yi5oZWFsdGhfc3BlY2lhbHR5JiYoXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZmFtaWx5X21lZGljaW5lXCJdJiYoYys9XCJBbGxnZW1laW5tZWRpemluPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZW1lcmdlbmN5X21lZGljaW5lXCJdJiYoYys9XCJOb3RmYWxsbWVkaXppbjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmFuYWVzdGhlc2lvbG9neVwiXSYmKGMrPVwiQW5cXHUwMGU0c3RoZXNpZTxici8+XCIpLFxuXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZGVybWF0b2xvZ3lcIl0mJihjKz1cIkRlcm1hdG9sb2dpZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmVhcl9ub3NlX3Rocm9hdFwiXSYmKGMrPVwiSGFscywgTmFzZW4sIE9ocmVuIChITk8pPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6b2NjdXBhdGlvbmFsX21lZGljaW5lXCJdJiYoYys9XCJBcmJlaXRzbm1lZGl6aW48YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTppbnRlcm5hbF9tZWRpY2luZVwiXSYmKGMrPVwiaW5uZXJlIE1lZGl6aW48YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpuZXVyb2xvZ3lcIl0mJihjKz1cIk5ldXJvbG9naWU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvcGh0aGFsbW9sb2d5XCJdJiYoYys9XCJBdWdlbmhlaWxrdW5kZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBhbGxpYXRpdmVfbWVkaWNpbmVcIl0mJihjKz1cIlBhbGxpYXRpdm1lZGl6aW48YnIvPlwiKSxcblwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBzeWNoaWF0cnlcIl0mJihjKz1cIlBzeWNoYXRyaWU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpneW5hZWNvbG9neVwiXSYmKGMrPVwiR3luXFx1MDBlNGtvbG9naWU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTp1cm9sb2d5XCJdJiYoYys9XCJVcm9sb2dpZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBhaW5fbWVkaWNpbmVcIl0mJihjKz1cIlNjaG1lcnptZWRpemluPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZW52aXJvbm1lbnRhbF9tZWRpY2luZVwiXSYmKGMrPVwiVW13ZWx0bWVkaXppbjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmludGVuc2l2ZV9jYXJlX21lZGljaW5cIl0mJihjKz1cIkludGVuc2l2bWVkaXppbjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBhZWRpYXRyaWNzXCJdJiYoYys9XCJLaW5kZXItIHUuIEp1Z2VuZG1lZGl6aW48YnIvPlwiKSxcblwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBoeXNpYXRyeVwiXSYmKGMrPVwiUGh5c2lrYWxpc2NoZSB1bmQgUmVoYWJpbGl0YXRpdmUgTWVkaXppbjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnJhZGlvbG9neVwiXSYmKGMrPVwiUmFkaW9sb2dpZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmdlbmVyYWxcIl0mJihjKz1cIkFsbGdlbWVpbm1lZGl6aW48YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvY2N1cGF0aW9uYWxfdGhlcmFweVwiXSYmKGMrPVwiRXJnb3RoZXJhcGllPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cHVsbW9ub2xvZ3lcIl0mJihjKz1cIlBuZXVtb2xvZ2llPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6YWN1cHVuY3R1cmVcIl0mJihjKz1cIkFrdXB1bmt0dXI8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvcnRob3BhZWRpY3NcIl0mJihjKz1cIk9ydGhvcFxcdTAwZTRkaWU8YnIvPlwiKSxcblwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmNoaXJvcHJhY3RpY1wiXSYmKGMrPVwiQ2hpcm9wcmFrdGlrPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6c3BvcnRzX21lZGljaW5lXCJdJiYoYys9XCJTcG9ydG1lZGl6aW48YnIvPlwiKSk7XCJcIiE9YyYmKGE9YStcIkZhY2hnZWJpZXRlOiBcIisoJzxkaXYgY2xhc3M9XCJjNGdfb3Blbl90ZXh0XCI+JytjK1wiPC9kaXY+XCIpKTtyZXR1cm4gYX1cbmV4cG9ydCBmdW5jdGlvbiBmbktyYWZ0d2Vya0luZm8oYil7dmFyIGE9XCJcIjtpZihiW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSl7YSs9XCJFcnpldWd1bmdzYXJ0OiBcIjtzd2l0Y2goYltcImdlbmVyYXRvcjptZXRob2RcIl0pe2Nhc2UgXCJjb21idXN0aW9uXCI6YSs9XCJWZXJicmVubnVuZ1wiO2JyZWFrO2Nhc2UgXCJ0aGVybWFsXCI6YSs9XCJ0aGVybWlzY2hlIE51dHp1bmcgKHouQi4gU29sYXJ0aGVybWllKVwiO2JyZWFrO2Nhc2UgXCJwdW1waW5nXCI6YSs9XCJkdXJjaCBQdW1wZW4gKHouQi4gZGllIE51dHp1bmcgdm9uIEdlb3RoZXJtaWUpXCI7YnJlYWs7Y2FzZSBcInBob3Rvdm9sdGFpY1wiOmErPVwiUGhvdG92b2x0YWlrXCI7YnJlYWs7Y2FzZSBcImdhc2lmaWNhdGlvblwiOmErPVwiVmVyZ2FzdW5nLCBkYW5hY2ggVmVyYnJlbm51bmdcIjticmVhaztjYXNlIFwiYW5hZXJvYmljX2RpZ2VzdGlvblwiOmErPVwiRXJ6ZXVndW5nIHZvbiBCaW9nYXMgZHVyY2ggVmVyZ1xcdTAwZTRydW5nXCI7YnJlYWs7Y2FzZSBcInB5cm9seXNpc1wiOmErPVwiUHlyb2x5c2UsIEF1ZnNwYWx0dW5nIGR1cmNoIGhvaGUgVGVtcGVyYXR1cmVuXCI7XG4gICAgYnJlYWs7Y2FzZSBcImZpc3Npb25cIjphKz1cIktlcm5zcGFsdHVuZ1wiO2JyZWFrO2Nhc2UgXCJmdXNpb25cIjphKz1cIktlcm5mdXNpb25cIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn1hKz1cIjxici8+XCJ9aWYoYi5wb3dlcl9zb3VyY2Upe2ErPVwiRXJ6ZXVndW5nc2FydDogXCI7c3dpdGNoKGIucG93ZXJfc291cmNlKXtjYXNlIFwicGhvdG92b2x0YWljXCI6YSs9XCJQaG90b3ZvbHRhaWtcIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn1hKz1cIjxici8+XCJ9YltcImdlbmVyYXRvcjpvdXRwdXQ6ZWxlY3RyaWNpdHlcIl0mJihhKz1cImVsZWt0LiBFbmVyZ2llZXJ6ZXVndW5nOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDplbGVjdHJpY2l0eVwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmhlYXRcIl0mJihhKz1cInRoZXJtLiBFbmVyZ2llZXJ6ZXVndW5nOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpoZWF0XCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZFwiXSYmKGErPVxuICAgIFwidGhlcm0uIEVuZXJnaWVlcnpldWd1bmc6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRcIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dFwiXSYmKGErPVwiTmVubmxlaXN0dW5nOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dFwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmhvdF9haXJcIl0mJihhKz1cIkFydCBkZXMgVHJhbnNwb3J0bWVkaXVtczogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6aG90X2FpclwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRfd2F0ZXJcIl0mJihhKz1cIkFydCBkZXMgVHJhbnNwb3J0bWVkaXVtczogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZF93YXRlclwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRfYWlyXCJdJiYoYSs9XCJBcnQgZGVzIFRyYW5zcG9ydG1lZGl1bXM6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRfYWlyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29tcHJlc3NlZF9haXJcIl0mJihhKz1cIkFydCBkZXMgVHJhbnNwb3J0bWVkaXVtczogXCIrXG4gICAgYltcImdlbmVyYXRvcjpvdXRwdXQ6Y29tcHJlc3NlZF9haXJcIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dDpzdGVhbVwiXSYmKGErPVwiQXJ0IGRlcyBUcmFuc3BvcnRtZWRpdW1zOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpzdGVhbVwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OnZhY3V1bVwiXSYmKGErPVwiQXJ0IGRlcyBUcmFuc3BvcnRtZWRpdW1zOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDp2YWN1dW1cIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dDpiYXR0ZXJ5X2NoYXJnaW5nXCJdJiYoYSs9XCJBcnQgZGVzIFRyYW5zcG9ydG1lZGl1bXM6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmJhdHRlcnlfY2hhcmdpbmdcIl0rXCI8YnIvPlwiKTtcIlBXUlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItMVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1xuICAgIFwiPGJyLz5cIik7XCJCV1ItMlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItM1wiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItNFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItNVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItNlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJQSFdSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkdDUlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJlxuKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkZCUlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJSQk1LLTEwMDBcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiUkJNSy0xNTAwXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIlZWRVJcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiQ0FORFVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiQ1BSLTEwMDBcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK1xuICAgIGJbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiRVBSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcInRva2FtYWtcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wic3RlbGxhcmF0b3JcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiSUNGXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcImNvbGQtZnVzaW9uXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIndpbmRfdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSYmXCJob3Jpem9udGFsX2F4aXNcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiZcbihhKz1cIkdlbmVyYXRvcnR5cDogSG9yaXpvbnRhbC1BY2hzZW4gV2luZGVuZXJnaWVhbmxhZ2U8YnIvPlwiKTtcIndpbmRfdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSYmXCJ2ZXJ0aWNhbF90dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBWZXJ0aWthbHJvdG9yPGJyLz5cIik7XCJmcmFuY2lzX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IEZyYW5jaXMtVHVyYmluZTxici8+XCIpO1wia2FwbGFuX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IEthcGxhbi1UdXJiaW5lPGJyLz5cIik7XCJwZWx0b25fdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogUGVsdG9uLVR1cmJpbmU8YnIvPlwiKTtcInN0cmVhbVwiPT1iW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSYmXCJob3Jpem9udGFsX2F4aXNcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XG4gICAgXCJHZW5lcmF0b3J0eXA6IEdlemVpdGVuc3Ryb21nZW5lcmF0b3IgbWl0IGhvcml6b250YWxlciBBY2hzZTxici8+XCIpO1wic3RyZWFtXCI9PWJbXCJnZW5lcmF0b3I6bWV0aG9kXCJdJiZcInZlcnRpY2FsX2F4aXNcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IEdlemVpdGVuc3Ryb21nZW5lcmF0b3IgbWl0IHZlcnRpa2FsZXIgQWNoc2U8YnIvPlwiKTtcInN0ZWFtX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IERhbXBmdHVyYmluZTxici8+XCIpO1wiaGVhdF9wdW1wXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBXXFx1MDBlNHJtZXB1bXBlPGJyLz5cIik7XCJzb2xhcl90aGVybWFsX2NvbGxlY3RvclwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogU29ubmVua29sbGVrdG9yPGJyLz5cIik7XCJzb2xhcl9waG90b3ZvbHRhaWNfcGFuZWxcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiZcbihhKz1cIkdlbmVyYXRvcnR5cDogUGhvdG92b2x0YWljLVN5c3RlbTxici8+XCIpO1wic3RlYW1fZ2VuZXJhdG9yXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBEYW1wZmdlbmVyYXRvcjxici8+XCIpO1wiZ2FzX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IEdhc3R1cmJpbmU8YnIvPlwiKTtcImNvbWJpbmVkX2N5Y2xlXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBEYW1wZmdlbmVyYXRvcjxici8+XCIpO1wicmVjaXByb2NhdGluZ19lbmdpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFZlcmJyZW5udW5nc21vdG9yL0Jsb2NraGVpemtyYWZ0d2Vyazxici8+XCIpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuV2VydHN0b2ZmaW5mbyhiKXt2YXIgYT1cIlwiO2lmKFwiY29udGFpbmVyXCI9PWIucmVjeWNsaW5nX3R5cGV8fFwiY2VudHJlXCI9PWIucmVjeWNsaW5nX3R5cGV8fFwicmVjeWNsaW5nXCI9PWIuYW1lbml0eSlcInllc1wiPT1iW1wicmVjeWNsaW5nOmdsYXNzXCJdJiYoYSs9XCJBbHRnbGFzY29udGFpbmVyPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpzaG9lc1wiXSYmKGErPVwiU2NodWhlbnRzb3JndW5nPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjb29raW5nX29pbFwiXSYmKGErPVwiU3BlaXNlLVxcdTAwZDZsLUVudHNvcmd1bmc8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnBhcGVyXCJdJiYoYSs9XCJQYXBpZXJlbnRzb3JndW5nPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzplbmdpbmVfb2lsXCJdJiYoYSs9XCJcXHUwMGQ2bC1FbnRzb3JndW5nIChNYXNjaGluZW4tLCBBbHQtdW5kIE1vdG9yXFx1MDBmNmwpPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjbG90aGVzXCJdJiYoYSs9XG4gICAgXCJBbHRrbGVpZGVyY29udGFpbmVyPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjYXJfYmF0dGVyaWVzXCJdJiYoYSs9XCJBdXRvLUJhdHRlcmllbi1FbnRzb3JndW5nPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjYW5zXCJdJiYoYSs9XCJCbGVjaGRvc2VuZW50c29yZ3VuZzwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6c2NyYXBfbWV0YWxcIl0mJihhKz1cIkFsdG1ldGFsbGVudHNvcmd1bmc8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnBsYXN0aWNcIl0mJihhKz1cIlBsYXN0aWtlbnRzb3JndW5nPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpiYXR0ZXJyaWVzXCJdJiYoYSs9XCJCYXR0ZXJpZWVudHNvcmd1bmc8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnBsYXN0aWNfYm90dGxlc1wiXSYmKGErPVwiUGxhc3Rpa2ZsYXNjaGVuZW50c29yZ3VuZzwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6Z3JlZW5fd2FzdGVcIl0mJihhKz1cIkdyXFx1MDBmY25hYmZcXHUwMGU0bGxlPC9icj5cIiksXG5cInllc1wiPT1iW1wicmVjeWNsaW5nOmhhcmRjb3JlXCJdJiYoYSs9XCJCYXVzY2h1dHQgdW5kIFN0cmFcXHUwMGRmZW5tYXRlcmlhbCBFbnRzb3JndW5nPC9icj5cIik7cmV0dXJuIGF9XG52YXIgZm5Db250ZW50R2VuZXJhbEluZm9ybWF0aW9ucz1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2Iud2lkdGgmJihhKz1cIkJyZWl0ZTogXCIrYi53aWR0aCtcIiBtPGJyLz5cIik7Yi5oZWlnaHQmJihhKz1cIkhcXHUwMGY2aGU6IFwiK2IuaGVpZ2h0K1wiIG08YnIvPlwiKTtiLm1heHdpZHRoJiYoYSs9XCJNYXhpbWFsYnJlaXRlOiBcIitiLm1heHdpZHRoK1wiIG08YnIvPlwiKTtiLm1heGhlaWdodCYmKGErPVwiTWF4aW1hbGhcXHUwMGY2aGU6IFwiK2IubWF4aGVpZ2h0K1wiIG08YnIvPlwiKTtiLm1heHdlaWdodCYmKGErPVwiTWF4aW1hbGdld2ljaHQ6IFwiK2IubWF4d2VpZ2h0K1wiIHQ8YnIvPlwiKTtiLm1heHNwZWVkJiYoYSs9XCJIXFx1MDBmNmNoc3RnZXNjaHdpbmRpZ2tlaXQ6IFwiK2IubWF4c3BlZWQrXCIga20vaDxici8+XCIpO2IubWluX2FnZSYmKGErPVwiTWluZGVzdGFsdGVyOiBcIitiLm1pbl9hZ2UrXCI8YnIvPlwiKTtiLm1heF9hZ2UmJihhKz1cIk1heGltYWxhbHRlcjogXCIrYi5tYXhfYWdlK1wiPGJyLz5cIik7XCJ5ZXNcIj09XG5iLm51ZGlzbSYmKGErPVwiRnJlaWtcXHUwMGY2cnBlcmt1bHR1cjxici8+XCIpO1wieWVzXCI9PWIucnVpbnMmJihhKz1cIlJ1aW5lPGJyLz5cIik7Yi5lbGUmJihhKz1cIkhcXHUwMGY2aGUgXFx1MDBmY2JlciBOTjogXCIrYi5lbGUrXCIgbTxici8+XCIpO2JbXCJ4bWFzOmRheV9kYXRlXCJdJiYoYSs9XCJEYXVlciB2b24gLSBiaXM6IFwiK2JbXCJ4bWFzOmRheV9kYXRlXCJdK1wiPGJyLz5cIik7YltcInJvdG9yOmRpYW1ldGVyXCJdJiYoYSs9XCJSb3RvcmR1cmNobWVzc2VyOiBcIitiW1wicm90b3I6ZGlhbWV0ZXJcIl0rXCIgbTxici8+XCIpO2JbXCJ4bWFzOm5vdGVcIl0mJihhKz1cIkhpbndlaXM6IFwiK2JbXCJ4bWFzOm5vdGVcIl0rXCI8YnIvPlwiKTtcInBvcnRcIj09YltcInNlYW1hcms6YmVhY29uX2xhdGVyYWw6Y2F0ZWdvcnlcIl0mJihhKz1cIkJhY2tib3JkPGJyLz5cIik7XCJzdGFyYm9hcmRcIj09YltcInNlYW1hcms6YmVhY29uX2xhdGVyYWw6Y2F0ZWdvcnlcIl0mJihhKz1cIlN0ZXVlcmJvcmQ8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOnJldGFpbFwiXSYmXG4oYSs9XCJGYWhycmFkdmVya2F1Zjxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6cmVwYWlyXCJdJiYoYSs9XCJGYWhycmFkcmVwYXJhdHVyPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpyZW50YWxcIl0mJihhKz1cIkZhaHJyYWR2ZXJsZWloPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpwdW1wXCJdJiYoYSs9XCJCZW51dHp1bmcgZWluZXIgTHVmdHB1bXBlIG1cXHUwMGY2Z2xpY2g8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOmRpeVwiXSYmKGErPVwiQmVudXR6dW5nIHZvbiBXZXJremV1ZyBtXFx1MDBmNmdsaWNoPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpjbGVhbmluZ1wiXSYmKGErPVwiRmFocnJcXHUwMGU0ZGVyIHdlcmRlbiBnZXdhc2NoZW48YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOnNlY29uZF9oYW5kXCJdJiYoYSs9XCJWZXJrYXVmIHZvbiBnZWJyYXVjaHRlbiBGYWhyclxcdTAwZTRkZXJuPGJyLz5cIik7XCJ5ZXNcIj09XG5iW1wic2VydmljZTpiaWN5Y2xlOmNoYXJnaW5nXCJdJiYoYSs9XCJFbGVrdHJvLUZhaHJyXFx1MDBlNGRlciBrXFx1MDBmNm5uZW4gZ2VsYWRlbiB3ZXJkZW48YnIvPlwiKTtcInllc1wiPT1iLmNhZmUmJihhKz1cIktsZWluZSBDYWZcXHUwMGU5LUVja2U8YnIvPlwiKTtcInllc1wiPT1iLmJyZWFrZmFzdCYmKGErPVwiQmVzb25kZXJlcyBGclxcdTAwZmNoc3RcXHUwMGZjY2tzYW5nZWJvdDxici8+XCIpO1wieWVzXCI9PWIuc25hY2smJihhKz1cIkJhY2stU25hY2tzIHdhcm0gb2RlciBrYWx0PGJyLz5cIik7XCJ5ZXNcIj09Yi5pbmRvb3Jfc2VhdGluZyYmKGErPVwiU2l0em1cXHUwMGY2Z2xpY2hrZWl0ZW4gaW0gSW5uZW5iZXJlaWNoPGJyLz5cIik7XCJ5ZXNcIj09Yi5vdXRkb29yX3NlYXRpbmcmJihhKz1cIlNpdHptXFx1MDBmNmdsaWNoa2VpdGVuIGltIEF1XFx1MDBkZmVuYmVyZWljaDxici8+XCIpO1wieWVzXCI9PWIuc2VsZl9zZXJ2aWNlJiYoYSs9XCJTZWxic3RiZWRpZW51bmdzYlxcdTAwZTRja2VyZWk8YnIvPlwiKTtcInllc1wiPT1iLmJha2Vob3VzZSYmXG4oYSs9XCJCYWNrc3R1YmU8YnIvPlwiKTtcInllc1wiPT1iLnBhc3RyeV9zaG9wJiYoYSs9XCJHZWJcXHUwMGU0Y2sgYXVzIGRlciBLb25kaXRvcmVpPGJyLz5cIik7XCJ5ZXNcIj09Yi5mYWlyX3RyYWRlJiYoYSs9XCJlaW5pZ2UgRmFpci1UcmFkZS1Qcm9kdWt0ZSBpbSBTb3J0aW1lbnQ8YnIvPlwiKTtcIm9ubHlcIj09Yi5mYWlyX3RyYWRlJiYoYSs9XCJmYXN0IGF1c3NjaGxpZVxcdTAwZGZsaWNoIEZhaXItVHJhZGUtUHJvZHVrdGUgaW0gU29ydGltZW50PGJyLz5cIik7XCJub1wiPT1iLmZhaXJfdHJhZGUmJihhKz1cImtlaW5lIEZhaXItVHJhZGUtUHJvZHVrdGUgaW0gU29ydGltZW50PGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEhlYWx0aGNhcmU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImRvY3RvcnNcIj09Yi5hbWVuaXR5fHxcInBoeXNpY2lhblwiPT1iLm9mZmljZXx8XCJkb2N0b3JcIj09Yi5oZWFsdGhjYXJlKWErPWZuQXJ6dEluZm8oYiksYi5tZWRpY2FsX2FyZWEmJihhKz1iLm1lZGljYWxfYXJlYStcIjxici8+XCIpLFxuYi50eXBlJiYoYSs9Yi50eXBlK1wiPGJyLz5cIiksYltcImRvY3RvcnM6ZGVcIl0mJihhKz1iW1wiZG9jdG9yczpkZVwiXStcIjxici8+XCIpLGJbXCJub3RlOmRlXCJdJiYoYSs9YltcIm5vdGU6ZGVcIl0rXCI8YnIvPlwiKTtcInllc1wiPT1iLmRpc3BlbnNpbmcmJihhKz1cIkFwb3RoZWtlIG1pdCBSZXplcHRlaW5sXFx1MDBmNnN1bmc8YnIvPlwiKTtcImFidXNlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBNZW5zY2hlbiBkaWUgTWlzc2hhbmRsdW5nIGVybGl0dGVuIGhhYmVuPGJyLz5cIik7XCJjaGlsZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBLaW5kZXI8YnIvPlwiKTtcImRpc2FibGVkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IE1lbnNjaGVuIG1pdCBrXFx1MDBmNnJwZXJsaWNoZXIgb2RlciBnZWlzdGlnZXIgQmVoaW5kZXJ1bmc8YnIvPlwiKTtcImRpc2Vhc2VkXCI9PVxuYltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cIkVpbnJpY2h0dW5nIGZcXHUwMGZjcjogRXJrcmFua3RlIE1lbnNjaGVuPGJyLz5cIik7XCJkcnVnX2FkZGljdGVkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IERyb2dlbnNcXHUwMGZjY2h0aWdlPGJyLz5cIik7XCJob21lbGVzc1wiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBPYmRhY2hsb3NlPGJyLz5cIik7XCJqdXZlbmlsZVwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBKdWdlbmRsaWNoZSB1bmQgVGVlbmFnZXI8YnIvPlwiKTtcIm1lbnRhbF9oZWFsdGhcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cIkVpbnJpY2h0dW5nIGZcXHUwMGZjcjogTWVuc2NoZW4gbWl0IHBzeWNoaXNjaGVuIFByb2JsZW1lbjxici8+XCIpO1wibWlncmFudFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmXG4oYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IE1lbnNjaGVuIG1pdCBNaWdyYXRpb25zaGludGVyZ3J1bmQ8YnIvPlwiKTtcIm9ycGhhblwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBXYWlzZW48YnIvPlwiKTtcInNlbmlvclwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBTZW5pb3Jlbjxici8+XCIpO1widW5kZXJwcml2aWxlZ2VkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IEFybWUgb2RlciBiZW5hY2h0ZWlsaWd0ZSBNZW5zY2hlbjxici8+XCIpO1widW5lbXBsb3llZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBBcmJlaXRzbG9zZTxici8+XCIpO1widmljdGltXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IE9wZmVyIGVpbmVzIFZlcmJyZWNoZW5zPGJyLz5cIik7XG4gICAgcmV0dXJuIGF9O1xuZXhwb3J0IGZ1bmN0aW9uIGZuQWRkaXRpb25hbEJ1aWxkaW5nSW5mb3MoYil7dmFyIGE9XCJcIjtiW1wiYnVpbGRpbmc6Y29sb3JcIl0mJihhKz1cIkdlYlxcdTAwZTR1ZGVuZmFyYmU6IFwiK2JbXCJidWlsZGluZzpjb2xvclwiXStcIjwvYnI+XCIpO2JbXCJidWlsZGluZzpoZWlnaHRcIl0mJihhKz1cIkdlYlxcdTAwZTR1ZGVuaFxcdTAwZjZoZTogXCIrYltcImJ1aWxkaW5nOmhlaWdodFwiXStcIiBtPC9icj5cIik7YltcImJ1aWxkaW5nOmxldmVsXCJdJiYoYSs9XCJFdGFnZTogXCIrYltcImJ1aWxkaW5nOmxldmVsXCJdK1wiPC9icj5cIik7YltcImJ1aWxkaW5nOnBhcnRcIl0mJihhKz1cIkdlYlxcdTAwZTR1ZGV0ZWlsZTogXCIrYltcImJ1aWxkaW5nOnBhcnRcIl0rXCI8L2JyPlwiKTtiW1wicm9vZjpjb2xvclwiXSYmKGErPVwiRGFjaGZhcmJlOiBcIitiW1wicm9vZjpjb2xvdXJcIl0rXCI8L2JyPlwiKTtiW1wicm9vZjpzaGFwZVwiXSYmKGErPVwiRGFjaGZvcm06IFwiK2JbXCJyb29mOnNoYXBlXCJdK1wiPC9icj5cIik7YltcInJvb2Y6aGVpZ2h0XCJdJiYoYSs9XCJEYWNoaFxcdTAwZjZoZTogXCIrYltcInJvb2Y6aGVpZ2h0XCJdK1xuICAgIFwiIG08L2JyPlwiKTtiW1wicm9vZjptYXRlcmlhbFwiXSYmKGErPVwiRGFjaG1hdGVyaWFsOiBcIitiW1wicm9vZjptYXRlcmlhbFwiXStcIiA8L2JyPlwiKTtiW1wicm9vZjpvcmllbnRhdGlvblwiXSYmKGErPVwiRGFjaGF1c3JpY2h0dW5nOiBcIitiW1wicm9vZjpvcmllbnRhdGlvblwiXStcIiA8L2JyPlwiKTtiW1wicm9vZjpkaXJlY3Rpb25cIl0mJihhKz1cIkRhY2hhdXNyaWNodHVuZzogXCIrYltcInJvb2Y6ZGlyZWN0aW9uXCJdK1wiIDwvYnI+XCIpO2JbXCJidWlsZGluZzp0eXBlXCJdJiYoYSs9XCJHZWJcXHUwMGU0dWRlbnR5cDogXCIrYltcImJ1aWxkaW5nOnR5cGVcIl0rXCI8L2JyPlwiKTtyZXR1cm4gYX1cbmV4cG9ydCBmdW5jdGlvbiBmblNpY2hlcmhlaXRBZGRpdGlvbmFsKGIpe3ZhciBhPVwiXCI7XCJzdXJ2ZWlsbGFuY2VcIj09Yi5tYW5fbWFkZSYmKFwiaW5kb29yXCI9PWIuc3VydmVpbGxhbmNlJiYoYSs9XCJJbm5lbmJlcmVpY2ggd2lyZCBcXHUwMGZjYmVyd2FjaHRcIiksXCJvdXRkb29yXCI9PWIuc3VydmVpbGxhbmNlJiYoYSs9XCJBdVxcdTAwZGZlbmJlcmVpY2ggd2lyZCBcXHUwMGZjYmVyd2FjaHRcIiksXCJwdWJsaWNcIj09Yi5zdXJ2ZWlsbGFuY2UmJihhKz1cIlxcdTAwZDZmZmVudGxpY2hlIFxcdTAwZGNiZXJ3YWNodW5nXCIpLFwiY2FtZXJhXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6dHlwZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzdHlwOiBLYW1lcmFcIiksXCJndWFyZFwiPT1iW1wic3VydmVpbGxhbmNlOnR5cGVcIl0mJihhKz1cIlxcdTAwZGNiZXJ3YWNodW5nc3R5cDogV1xcdTAwZTRjaHRlclwiKSxcIkFMUFJcIj09YltcInN1cnZlaWxsYW5jZTp0eXBlXCJdJiYoYSs9XCJcXHUwMGRjYmVyd2FjaHVuZ3N0eXA6IEFMUFJcIiksXCJ0b3duXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmXG4oYSs9XCJcXHUwMGRjYmVyd2FjaHVuZ3NiZXJlaWNoOiBPcnRcIiksXCJwYXJraW5nXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzYmVyZWljaDogUGFya3BsYXR6XCIpLFwidHJhZmZpY1wiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cIlxcdTAwZGNiZXJ3YWNodW5nc2JlcmVpY2g6IFZlcmtlaHJcIiksXCJzaG9wXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzYmVyZWljaDogU2hvcHNcIiksXCJiYW5rXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzYmVyZWljaDogQmFua1wiKSxcImJ1aWxkaW5nXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzYmVyZWljaDogR2ViXFx1MDBlNHVkZVwiKSk7cmV0dXJuIGF9XG5leHBvcnQgZnVuY3Rpb24gZm5XcmVja0luZm8oYil7dmFyIGE9XCJcIjtcIndyZWNrXCI9PWIuaGlzdG9yaWMmJihiW1wid3JlY2s6ZGF0ZV9zdW5rXCJdJiYoYSs9XCJHZXN1bmtlbiBhbTogXCIrYltcIndyZWNrOmRhdGVfc3Vua1wiXStcIjxici8+XCIpLGJbXCJ3cmVjazpkZXB0aFwiXSYmKGErPVwiVGllZmU6IFwiK2JbXCJ3cmVjazpkZXB0aFwiXStcIjxici8+XCIpLGJbXCJ3cmVjazpjbGVhcmFuY2VcIl0mJihhKz1cIkZyZWlyYXVtOiBcIitiW1wid3JlY2s6Y2xlYXJhbmNlXCJdK1wiPGJyLz5cIiksYltcIndyZWNrOmRhdGVfY29tbWlzc2lvbmVkXCJdJiYoYSs9XCJBbmVya2FubnQgc2VpdDogXCIrYltcIndyZWNrOmRhdGVfY29tbWlzc2lvbmVkXCJdK1wiPGJyLz5cIiksYltcIndyZWNrOmdyb3NzX3Rvbm5hZ2VcIl0mJihhKz1cIkdld2ljaHQ6IFwiK2JbXCJ3cmVjazpncm9zc190b25uYWdlXCJdK1wiPGJyLz5cIiksYltcIndyZWNrOmxlbmd0aFwiXSYmKGErPVwiTFxcdTAwZTRuZ2U6IFwiK2JbXCJ3cmVjazpsZW5ndGhcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6d2lkdGhcIl0mJlxuKGErPVwiQnJlaXRlOiBcIitiW1wid3JlY2s6d2lkdGhcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6Y2FyZ29cIl0mJihhPVwidGltYmVyXCI9PWJbXCJ3cmVjazpjYXJnb1wiXT9hK1wiTGFkdW5nOiBIb2x6PGJyLz5cIjpcImNvYWxcIj09YltcIndyZWNrOmNhcmdvXCJdP2ErXCJMYWR1bmc6IEtvaGxlPGJyLz5cIjphKyhcIkxhZHVuZzogXCIrYltcIndyZWNrOmNhcmdvXCJdK1wiPGJyLz5cIikpLFwieWVzXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2xvd190aWRlXCJdJiYoYSs9XCJTaWNodGJhciBiZWkgTmllZHJpZ3dhc3NlcjogSmE8YnIvPlwiKSxcIm5vXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2xvd190aWRlXCJdJiYoYSs9XCJTaWNodGJhciBiZWkgTmllZHJpZ3dhc3NlcjogTmVpbjxici8+XCIpLFwieWVzXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2hpZ2hfdGlkZVwiXSYmKGErPVwiU2ljaHRiYXIgYmVpIEhvY2h3YXNzZXI6IEphPGJyLz5cIiksXCJub1wiPT1iW1wid3JlY2s6dmlzaWJsZV9hdF9oaWdoX3RpZGVcIl0mJihhKz1cIlNpY2h0YmFyIGJlaSBIb2Nod2Fzc2VyOiBOZWluPGJyLz5cIiksXG5cInllc1wiPT1iLmFjY2VzcyYmKGErPVwiWnV0cml0dCBtXFx1MDBmNmdsaWNoPGJyLz5cIiksXCJub1wiPT1iLmFjY2VzcyYmKGErPVwiWnV0cml0dCBuaWNodCBtXFx1MDBmNmdsaWNoPGJyLz5cIiksXCJwZXJtaXRfcmVxdWlyZWRcIj09Yi5hY2Nlc3MmJihhKz1cIlp1dHJpdHQgbnVyIG1pdCBHZW5laG1pZ3VuZzxici8+XCIpKTtyZXR1cm4gYX1cbmV4cG9ydCBmdW5jdGlvbiBmbktsb3N0ZXJBZGRpdGlvbmFsKGIpe3ZhciBhPVwiXCI7aWYoYltcIm1vbmFzdGVyeTp0eXBlXCJdKXN3aXRjaChiW1wibW9uYXN0ZXJ5OnR5cGVcIl0pe2Nhc2UgXCJtb25hc3RlcnlcIjphKz1cIlR5cDogS2xcXHUwMGY2c3RlcmxpY2hlIEdlbWVpbnNjaGFmdCAobW9uYXN0ZXJ5KTxici8+XCI7YnJlYWs7Y2FzZSBcImNvbnZlbnRcIjphKz1cIlR5cDogQmV0dGVsbVxcdTAwZjZuY2ggR2VtZWluc2NoYWZ0IChjb252ZW50KTxici8+XCI7YnJlYWs7Y2FzZSBcImNhbm9ucnlcIjphKz1cIlR5cDogS2Fub25pa2F0IChjYW5vbnJ5KTxici8+XCI7YnJlYWs7Y2FzZSBcImNvbW1hbmRyeVwiOmErPVwiVHlwOiBNaWxpdFxcdTAwZTRyIGdlZlxcdTAwZmNocnQgKGNvbW1hbmRyeSk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJoZXJtaXRhZ2VcIjphKz1cIlR5cDogRWluc2llZGVsZWkgKGhlcm1pdGFnZSk8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJUeXA6IHVuYmVrYW5udDxici8+XCJ9YltcImNvbW11bml0eTpnZW5kZXJcIl0mJihcIm1hbGVcIj09XG5iW1wiY29tbXVuaXR5OmdlbmRlclwiXSYmKGErPVwiR2VzY2hsZWNodDogTVxcdTAwZTRubmVyZ2VtZWluc2NoYWZ0PGJyLz5cIiksXCJmZW1hbGVcIj09YltcImNvbW11bml0eTpnZW5kZXJcIl0mJihhKz1cIkdlc2NobGVjaHQ6IEZyYXVlbmdlbWVpbnNjaGFmdDxici8+XCIpKTtiLnJlbGlnaW91c19yYW5rJiYoXCJhYmJleVwiPT1iLnJlbGlnaW91c19yYW5rP2ErPVwiUmVsaWdpXFx1MDBmNnNlciBSYW5nOiBBYnRlaTxici8+XCI6XCJhYmJleVwiPT1iLnJlbGlnaW91c19yYW5rJiYoYSs9XCJSZWxpZ2lcXHUwMGY2c2VyIFJhbmc6IEVyemFidGVpPGJyLz5cIikpO1wieWVzXCI9PWIuc2hyaW5lJiYoYSs9XCJCZXNvbmRlcmhlaXQ6IEhlaWxpZ2VuZ3JhYiAvIFJlbGlxdWllbnNjaHJlaW48YnIvPlwiKTtcInllc1wiPT1iLnNhbmN0dWFyeSYmKGErPVwiQmVzb25kZXJoZWl0OiBIZWlsaWd0dW0gLyBBbHRhcnJhdW0gKFNhbmt0dWFyKTxici8+XCIpO2lmKGIucmVsaWdpb24pc3dpdGNoKGIucmVsaWdpb24pe2Nhc2UgXCJhbmltaXN0XCI6YSs9XG4gICAgXCJSZWxpZ2lvbjogYW5pbWlzdGlzY2g8YnIvPjxici8+XCI7YnJlYWs7Y2FzZSBcImJhaGFpXCI6YSs9XCJSZWxpZ2lvbjogYmFoYWk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJidWRkaGlzdFwiOmErPVwiUmVsaWdpb246IGJ1ZGRoaXN0aXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcImNocmlzdGlhblwiOmErPVwiUmVsaWdpb246IGNocmlzdGxpY2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJoaW5kdVwiOmErPVwiUmVsaWdpb246IGhpbmR1aXN0aXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcIklnbGVzaWFOaUNyaXN0b1wiOmErPVwiUmVsaWdpb246IElnbGVzaWFOaUNyaXN0bzxici8+XCI7YnJlYWs7Y2FzZSBcImphaW5cIjphKz1cIlJlbGlnaW9uOiBqYWluPGJyLz5cIjticmVhaztjYXNlIFwiamV3aXNoXCI6YSs9XCJSZWxpZ2lvbjogalxcdTAwZmNkaXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcIm11bHRpZmFpdGhcIjphKz1cIlJlbGlnaW9uOiBwbHVyYWxpc3Rpc2NoPGJyLz5cIjticmVhaztjYXNlIFwibXVzbGltXCI6YSs9XCJSZWxpZ2lvbjogbXVzbGltaXNjaDxici8+XCI7XG4gICAgdHlwZSs9XCJNb3NjaGVlPGJyLz5cIjticmVhaztjYXNlIFwicGFnYW5cIjphKz1cIlJlbGlnaW9uOiBoZWlkbmlzY2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXN0YWZhcmlhblwiOmErPVwiUmVsaWdpb246IHBhc3RhZmFyaXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcInNjaWVudG9sb2dpc3RcIjphKz1cIlJlbGlnaW9uOiBzY2llbnRvbG9naXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcInNoaW50b1wiOmErPVwiUmVsaWdpb246IHNjaGludG9pc3Rpc2NoPGJyLz5cIjticmVhaztjYXNlIFwic2lraFwiOmErPVwiUmVsaWdpb246IHNpa2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzcGlyaXR1YWxpc3RcIjphKz1cIlJlbGlnaW9uOiBzcGlyaXRpc3Rpc2NoPGJyLz5cIjticmVhaztjYXNlIFwidGFvaXN0XCI6YSs9XCJSZWxpZ2lvbjogdGFvaXN0aXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRhcmlhblwiOmErPVwiUmVsaWdpb246IHVuaXRhcmlhbjxici8+XCI7YnJlYWs7Y2FzZSBcInlhemlkaVwiOmErPVwiUmVsaWdpb246IHlhemlkaTxici8+XCI7YnJlYWs7XG4gICAgY2FzZSBcInpvcm9hc3RyaWFuXCI6YSs9XCJSZWxpZ2lvbjogem9yb2FzdHJpc2NoPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiUmVsaWdpb246IHVuYmVrYW5udDxici8+XCJ9aWYoYi5kZW5vbWluYXRpb24pc3dpdGNoKGIuZGVub21pbmF0aW9uKXtjYXNlIFwiYW5nbGljYW5cIjphKz1cIktvbmZlc3Npb246IEFuZ2xpa2FuaXNjaGUgR2VtZWluc2NoYWZ0PGJyLz48YnIvPlwiO2JyZWFrO2Nhc2UgXCJiYXB0aXN0XCI6YSs9XCJLb25mZXNzaW9uOiBCYXB0aXN0ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYXRob2xpY1wiOmErPVwiS29uZmVzc2lvbjogS2F0aG9saXNjaGUgS2lyY2hlLCBvaG5lIGdlbmF1ZXJlIFNwZXppZml6aWVydW5nPGJyLz5cIjticmVhaztjYXNlIFwicm9tYW5fY2F0aG9saWNcIjphKz1cIktvbmZlc3Npb246IFJcXHUwMGY2bWlzY2gtS2F0aG9saXNjaGUgS2lyY2hlPGJyLz5cIjticmVhaztjYXNlIFwib2xkX2NhdGhvbGljXCI6YSs9XCJLb25mZXNzaW9uOiBBbHRrYXRob2xpc2NoZSBLaXJjaGUgKFNjaHdlaXo6IENocmlzdC1LYXRob2xpc2NoKTxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImdyZWVrX2NhdGhvbGljXCI6YSs9XCJLb25mZXNzaW9uOiBHcmllY2hpc2NoLUthdGhvbGlzY2hlIEtpcmNoZSwgU2FtbWVsYmV6ZWljaG51bmcgZlxcdTAwZmNyIGRpZSBtaXQgUm9tIHVuaWVydGVuIE9zdGtpcmNoZW4gZGVzIGJ5emFudGluaXNjaGVuIFJpdHVzPGJyLz5cIjticmVhaztjYXNlIFwiZXZhbmdlbGljYWxcIjphKz1cIktvbmZlc3Npb246IEV2YW5nZWxpa2FsaXNtdXMgaXN0IGVpbmUgdGhlb2xvZ2lzY2hlIFJpY2h0dW5nIGlubmVyaGFsYiBkZXMgUHJvdGVzdGFudGlzbXVzLiBBY2h0dW5nISBOaWNodCB2ZXJ3ZWNoc2VsbiBtaXQgZGVyIGV2YW5nZWxpc2NoZW4gKD0gcHJvdGVzdGFudGlzY2hlbikgS2lyY2hlPGJyLz5cIjticmVhaztjYXNlIFwiamVob3ZhaHNfd2l0bmVzc1wiOmErPVwiS29uZmVzc2lvbjogWmV1Z2VuIEplaG92YXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsdXRoZXJhblwiOmErPVwiS29uZmVzc2lvbjogTHV0aGVyYW5lciwgZXZhbmdlbGlzY2gtbHV0aGVyaXNjaDxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcIm1lbm5vbml0ZVwiOmErPVwiS29uZmVzc2lvbjogTWVubm9uaXRlbjxici8+XCI7YnJlYWs7Y2FzZSBcIm1lc3NpYW5pY19qZXdpc2hcIjphKz1cIktvbmZlc3Npb246IE1lc3NpYW5pc2NoZSBKdWRlbiwgc3RlaGVuIHRoZW9sb2dpc2NoIGRlbiBldmFuZ2VsaWthbGVuIENocmlzdGVuIG5haGUuPGJyLz5cIjticmVhaztjYXNlIFwibWV0aG9kaXN0XCI6YSs9XCJLb25mZXNzaW9uOiBNZXRob2Rpc3QgQ2h1cmNoIChlbmdsLiBNZXRob2Rpc20pPGJyLz5cIjticmVhaztjYXNlIFwibW9ybW9uXCI6YSs9XCJLb25mZXNzaW9uOiBNb3Jtb25lbjxici8+XCI7YnJlYWs7Y2FzZSBcIm5ld19hcG9zdG9saWNcIjphKz1cIktvbmZlc3Npb246IE5ldWFwb3N0b2xpc2NoZSBLaXJjaGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvcnRob2RveFwiOmErPVwiS29uZmVzc2lvbjogT3J0aG9kb3gsIG9obmUgZ2VuYXVlcmUgU3BlemlmaXppZXJ1bmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJncmVla19vcnRob2RveFwiOmErPVwiS29uZmVzc2lvbjogR3JpZWNoaXNjaC1PcnRob2RveDxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImNvcHRpY19vcnRob2RveFwiOmErPVwiS29uZmVzc2lvbjogS29wdGlzY2hlIEtpcmNoZSwgaXN0IGRpZSBjaHJpc3RsaWNoZSBhbHRvcmllbnRhbGlzY2hlIEtpcmNoZSBcXHUwMGM0Z3lwdGVucy48YnIvPlwiO2JyZWFrO2Nhc2UgXCJwZW50ZWNvc3RhbFwiOmErPVwiS29uZmVzc2lvbjogUGZpbmdzdGJld2VndW5nPGJyLz5cIjticmVhaztjYXNlIFwicHJlc2J5dGVyaWFuXCI6YSs9XCJLb25mZXNzaW9uOiBQcmVzYnl0ZXJpYW5pc2NoZSBLaXJjaGVuPGJyLz5cIjticmVhaztjYXNlIFwicHJvdGVzdGFudFwiOmErPVwiS29uZmVzc2lvbjogRXZhbmdlbGlzY2hlIEtpcmNoZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJxdWFrZXJcIjphKz1cIktvbmZlc3Npb246IFF1XFx1MDBlNGtlcjxici8+XCI7YnJlYWs7Y2FzZSBcInJlZm9ybWVkXCI6YSs9XCJLb25mZXNzaW9uOiBFdmFuZ2VsaXNjaC1yZWZvcm1pZXJ0ZTxici8+XCI7YnJlYWs7Y2FzZSBcInJ1c3NpYW5fb3J0aG9kb3hcIjphKz1cIktvbmZlc3Npb246IFJ1c3Npc2NoLU9ydGhvZG94PGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwic2V2ZW50aF9kYXlfYWR2ZW50aXN0XCI6YSs9XCJLb25mZXNzaW9uOiBTaWViZW50ZW4tVGFncy1BZHZlbnRpc3Rlbjxici8+XCI7YnJlYWs7Y2FzZSBcImNocmlzdGlhbl9jb21tdW5pdHlcIjphKz1cIktvbmZlc3Npb246IERpZSBDaHJpc3RlbmdlbWVpbnNjaGFmdCBpc3QgZWluZSBjaHJpc3RsaWNoZSBLaXJjaGUsIGRpZSBzaWNoIGFscyBzZWxic3RcXHUwMGU0bmRpZ2UgS3VsdHVzZ2VtZWluc2NoYWZ0IHZlcnN0ZWh0Ljxici8+XCI7YnJlYWs7Y2FzZSBcImFkdmVudGlzdFwiOmErPVwiS29uZmVzc2lvbjogQWR2ZW50aXN0ZW4sIG5pY2h0IGFsbGUgQWR2ZW50aXN0ZW4gc2luZCBTaWViZW50ZW4tVGFncy1BZHZlbnRpc3Rlbi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJhbGxpYW5jZVwiOmErPVwiS29uZmVzc2lvbjogQ2hyaXN0aWFuIGFuZCBNaXNzaW9uYXJ5IEFsbGlhbmNlIChDJk1BKSBpcyBhbiBldmFuZ2VsaWNhbCBQcm90ZXN0YW50IGRlbm9taW5hdGlvbiB3aXRoaW4gQ2hyaXN0aWFuaXR5Ljxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImFzc2VtYmxpZXNfb2ZfZ29kXCI6YSs9XCJLb25mZXNzaW9uOiBBc3NlbWJsaWVzIG9mIEdvZCwgaXN0IGVpbmUgcGZpbmdzdGxlcmlzY2hlIERlbm9taW5hdGlvbi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJhcG9zdG9saWNcIjphKz1cIktvbmZlc3Npb246IEFwb3N0b2xpc2NoZSBLaXJjaGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhcm1lbmlhbl9hcG9zdG9saWNcIjphKz1cIktvbmZlc3Npb246IEFybWVuaXNjaGUgQXBvc3RvbGlzY2hlIEtpcmNoZSwgaXN0IGVpbmUgYWx0b3JpZW50YWxpc2NoZSBLaXJjaGUuPGJyLz5cIjticmVhaztjYXNlIFwiYXNzeXJpYW5cIjphKz1cIktvbmZlc3Npb246IEFzc3lyaXNjaGUgS2lyY2hlIGRlcyBPc3RlbnMsIGF1Y2ggQXBvc3RvbGlzY2hlIEtpcmNoZSBkZXMgT3N0ZW5zLCBpc3QgZWluZSBhdXRva2VwaGFsZSB1bmQgdlxcdTAwZjZsbGlnIGVpZ2Vuc3RcXHUwMGU0bmRpZ2UgT3N0a2lyY2hlIHN5cmlzY2hlciBUcmFkaXRpb24gaW4gTmFjaGZvbGdlIGRlcyBhbHRjaHJpc3RsaWNoZW4gS2F0aG9saWthdHMgdm9uIFNlbGV1a2lhLUt0ZXNpcGhvbi48YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJjaHJpc3Rfc2NpZW50aXN0XCI6YSs9XCJLb25mZXNzaW9uOiBDaHJpc3RpYW4gU2NpZW5jZSAoZGV1dHNjaDogQ2hyaXN0bGljaGUgV2lzc2Vuc2NoYWZ0KSBnaW5nIGF1cyBkZXIgTmV1Z2Vpc3QtQmV3ZWd1bmcgaGVydm9yLjxici8+XCI7YnJlYWs7Y2FzZSBcImNodXJjaF9vZl9zY290bGFuZFwiOmErPVwiS29uZmVzc2lvbjogQ2h1cmNoIG9mIFNjb3RsYW5kIChkdC4gS2lyY2hlIFNjaG90dGxhbmRzKSBpc3QgZGllIE5hdGlvbmFsa2lyY2hlIGluIFNjaG90dGxhbmQuIEltIFNwcmFjaGdlYnJhdWNoIGF1Y2ggXFx1MjAxZXRoZSBLaXJrXFx1MjAxYyBnZW5hbm50Ljxici8+XCI7YnJlYWs7Y2FzZSBcImN6ZWNob3Nsb3Zha19odXNzaXRlXCI6YSs9XCJLb25mZXNzaW9uOiBUc2NoZWNob3Nsb3dha2lzY2hlIEh1c3NpdGlzY2hlIEtpcmNoZSwgaXN0IGVpbmUgY2hyaXN0bGljaGUgS2lyY2hlLCBkaWUgZHVyY2ggQWJzcGFsdHVuZyB2b24gZGVyIFJcXHUwMGY2bWlzY2gtS2F0aG9saXNjaGVuIEtpcmNoZSBlbnRzdGFuZGVuIGlzdC4gT2Z0IGF1Y2ggTmV1aHVzc2l0aXNjaGUgS2lyY2hlIGdlbmFubnQsIHZvcm5laG1saWNoIGluIFRzY2hlY2hpZW4gdmVyYnJlaXRldCwgYWJlciBhdWNoIGluIGRlciBTbG93YWtlaTxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImR1dGNoX3JlZm9ybWVkXCI6YSs9XCJLb25mZXNzaW9uOiBOaWVkZXJsXFx1MDBlNG5kaXNjaC1yZWZvcm1pZXJ0ZSBLaXJjaGUsIChlaW5zY2hsaWVcXHUwMGRmbGljaCBOR0sgdW5kIFxcdTAwZTRobmxpY2hlIEtpcmNoZW4gaW4gU1xcdTAwZmNkYWZyaWthKTxici8+XCI7YnJlYWs7Y2FzZSBcImV4Y2x1c2l2ZV9icmV0aHJlblwiOmErPVwiS29uZmVzc2lvbjogRXhjbHVzaXZlIEJyZXRocmVuPGJyLz5cIjticmVhaztjYXNlIFwiZm91cnNxdWFyZVwiOmErPVwiS29uZmVzc2lvbjogSW50ZXJuYXRpb25hbCBDaHVyY2ggb2YgdGhlIEZvdXJzcXVhcmUgR29zcGVsPGJyLz5cIjticmVhaztjYXNlIFwia2ltYmFuZ3Vpc3RcIjphKz1cIktvbmZlc3Npb246IEtpbWJhbmd1aXN0ZW5raXJjaGUsIGlzdCBlaW5lIGFmcmlrYW5pc2NoZSwgdW5hYmhcXHUwMGU0bmdpZ2UsIGNocmlzdGxpY2hlIEtpcmNoZS48YnIvPlwiO2JyZWFrO2Nhc2UgXCJsaXZpbmdfd2F0ZXJzX2NodXJjaFwiOmErPVwiS29uZmVzc2lvbjogTGl2aW5nIFdhdGVycyBDaHJpc3RpYW4gQ2h1cmNoPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwibWFyaWF2aXRlXCI6YSs9XCJLb25mZXNzaW9uOiBNYXJpYXZpdGlzbXVzPGJyLz5cIjticmVhaztjYXNlIFwibWFyb25pdGVcIjphKz1cIktvbmZlc3Npb246IFN5cmlzY2gtbWFyb25pdGlzY2hlIEtpcmNoZSwgaXN0IGVpbmUgbWl0IFJvbSB1bmllcnRlLCBjaHJpc3RsaWNoZSBLaXJjaGUsIGRpZSBkZW4gclxcdTAwZjZtaXNjaGVuIFBhcHN0IGFscyBPYmVyaGF1cHQgYW5lcmtlbm50Ljxici8+XCI7YnJlYWs7Y2FzZSBcIm1vcmF2aWFuXCI6YSs9XCJLb25mZXNzaW9uOiBIZXJybmh1dGVyIEJyXFx1MDBmY2RlcmdlbWVpbmUsIChhdWNoOiBVbml0YXMgRnJhdHJ1bSwgRXZhbmdlbGlzY2hlIG9kZXIgRXJuZXVlcnRlIEJyXFx1MDBmY2Rlci1Vbml0XFx1MDBlNHQsIGVuZ2wuIE1vcmF2aWFuIENodXJjaCkgaXN0IGVpbmUgYXVzIGRlciBiXFx1MDBmNmhtaXNjaGVuIFJlZm9ybWF0aW9uIGhlcmtvbW1lbmRlIFxcdTAwZmNiZXJrb25mZXNzaW9uZWxsLWNocmlzdGxpY2hlIEdsYXViZW5zYmV3ZWd1bmcuPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwibmF6YXJlbmVcIjphKz1cIktvbmZlc3Npb246IEtpcmNoZSBkZXMgTmF6YXJlbmVycywgaXN0IGVpbmUgRnJlaWtpcmNoZSB1bmQgSGVpbGlndW5nc2dlbWVpbmRlIGluIG1ldGhvZGlzdGlzY2hlciBUcmFkaXRpb24uPGJyLz5cIjticmVhaztjYXNlIFwibm9uZGVub21pbmF0aW9uYWxcIjphKz1cIktvbmZlc3Npb246IE5vbmRlbm9taW5hdGlvbmFsIENocmlzdGlhbml0eTxici8+XCI7YnJlYWs7Y2FzZSBcIm9sZF9iZWxpZXZlcnNcIjphKz1cIktvbmZlc3Npb246IEFsdG9ydGhvZG94ZSwgKGhcXHUwMGU0dWZpZ2VyIEFsdGdsXFx1MDBlNHViaWdlKSBpc3QgZWluZSBTYW1tZWxiZXplaWNobnVuZyBmXFx1MDBmY3IgcmVsaWdpXFx1MDBmNnNlIFN0clxcdTAwZjZtdW5nZW4gdW5kIEdydXBwZW4gaW5uZXJoYWxiIGRlciBydXNzaXNjaC1vcnRob2RveGVuIFRyYWRpdGlvbi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJwb2xpc2hfY2F0aG9saWNcIjphKz1cIktvbmZlc3Npb246IFBvbG5pc2NoLUthdGhvbGlzY2hlIEtpcmNoZTxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcInNhbHZhdGlvbl9hcm15XCI6YSs9XCJLb25mZXNzaW9uOiBIZWlsc2FybWVlLCBpc3QgZWluZSBjaHJpc3RsaWNoZSBGcmVpa2lyY2hlIG1pdCBhdXNnZXByXFx1MDBlNGd0ZXIgc296aWFsZXIgVFxcdTAwZTR0aWdrZWl0Ljxici8+XCI7YnJlYWs7Y2FzZSBcInNhbnRvX2RhaW1lXCI6YSs9XCJLb25mZXNzaW9uOiBTYW50byBEYWltZSwgaXN0IGVpbmVyIHN5bmtyZXRpc3Rpc2NoZW4gcmVsaWdpXFx1MDBmNnNlIEJld2VndW5nIGF1cyBCcmFzaWxpZW4uPGJyLz5cIjticmVhaztjYXNlIFwic2VyYmlhbl9vcnRob2RveFwiOmErPVwiS29uZmVzc2lvbjogU2VyYmlzY2gtT3J0aG9kb3hlIEtpcmNoZSwgYmV6ZWljaG5ldCBkaWUgb3J0aG9kb3hlIEtpcmNoZSB2b24gU2VyYmllbiB1bmQgZGllIGlociBuYWNoZ2VvcmRuZXRlbiBLaXJjaGVuLjxici8+XCI7YnJlYWs7Y2FzZSBcInNwaXJpdGlzbVwiOmErPVwiS29uZmVzc2lvbjogU3Bpcml0aXNtdXMsIG9kZXIgU3Bpcml0dWFsaXNtdXMgZGllIExlaHJlIGRlcyBTcGlyaXRpc3RlbiBBbGxhbiBLYXJkZWM8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJ1bml0ZWRcIjphKz1cIktvbmZlc3Npb246IFVuaXRlZCBDaHVyY2ggb2YgQ2FuYWRhLCBpc3QgZGllIHp3ZWl0Z3JcXHUwMGY2XFx1MDBkZnRlIEtpcmNoZSBpbiBLYW5hZGEuPGJyLz5cIjticmVhaztjYXNlIFwidW5pdGVkX2NodXJjaF9vZl9jaHJpc3RcIjphKz1cIktvbmZlc3Npb246IFVuaXRlZCBDaHVyY2ggb2YgQ2hyaXN0LCBpc3QgZWluZSBLaXJjaGUgaW4gZGVuIFVTQS48YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bml0ZWRfZnJlZV9jaHVyY2hfb2Zfc2NvdGxhbmRcIjphKz1cIktvbmZlc3Npb246IFVuaXRlZCBGcmVlIENodXJjaCBvZiBTY290bGFuZCwgaXN0IGVpbmUgcHJlc2J5dGVyaWFuaXNjaGUgRnJlaWtpcmNoZSBpbiBTY2hvdHRsYW5kLjxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRlZF9tZXRob2Rpc3RcIjphKz1cIktvbmZlc3Npb246IEV2YW5nZWxpc2NoLW1ldGhvZGlzdGlzY2hlIEtpcmNoZSwgKGVuZ2wuIFVuaXRlZCBNZXRob2Rpc3QgQ2h1cmNoIChVTUMpKSBpc3QgZWluZSBjaHJpc3RsaWNoZSBLaXJjaGUgaW4gZGVyIHdlc2xleWFuaXNjaGVuIFRyYWRpdGlvbi48YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJ1bml0ZWRfcmVmb3JtZWRcIjphKz1cIktvbmZlc3Npb246IFVuaXRlZCBSZWZvcm1lZCBDaHVyY2gsIChWZXJlaW5pZ3RlIFJlZm9ybWllcnRlIEtpcmNoZSwgVVJDKSBpc3QgZWluZSByZWZvcm1pZXJ0ZSBLaXJjaGUgaW4gR3JvXFx1MDBkZmJyaXRhbm5pZW4uPGJyLz5cIjticmVhaztjYXNlIFwidW5pdGluZ1wiOmErPVwiS29uZmVzc2lvbjogVW5pdGluZyBDaHVyY2ggaW4gQXVzdHJhbGlhIChVQ0EpIGlzdCBkaWUgZHJpdHRnclxcdTAwZjZcXHUwMGRmdGUgY2hyaXN0bGljaGUgRGVub21pbmF0aW9uIGluIEF1c3RyYWxpZW4uPGJyLz5cIjticmVhaztjYXNlIFwiY2h1cmNoX29mX3N3ZWRlblwiOmErPVwiS29uZmVzc2lvbjogU2Nod2VkaXNjaGUgS2lyY2hlLCBpc3QgZGllIGV2YW5nZWxpc2NoLWx1dGhlcmlzY2hlIEtpcmNoZSB1bmQgZWhlbWFsaWdlIFN0YWF0c2tpcmNoZSBTY2h3ZWRlbnMuPGJyLz5cIjticmVhaztjYXNlIFwibWlzc2lvbl9jb3ZlbmFudF9jaHVyY2hfb2Zfc3dlZGVuXCI6YSs9XG4gICAgXCJLb25mZXNzaW9uOiBTY2h3ZWRpc2NoZSBNaXNzaW9uc2tpcmNoZSBpc3QgZWluZSByZWZvcm1pZXJ0ZSBLaXJjaGUgaW4gU2Nod2VkZW4uPGJyLz5cIjticmVhaztjYXNlIFwiYWx0ZXJuYXRpdmVcIjphKz1cIktvbmZlc3Npb246IGFsdGVybmF0aXZlPGJyLz5cIjticmVhaztjYXNlIFwiYXNoa2VuYXppXCI6YSs9XCJLb25mZXNzaW9uOiBhc2hrZW5hemk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJidWNoYXJpXCI6YSs9XCJLb25mZXNzaW9uOiBidWNoYXJpPGJyLz5cIjticmVhaztjYXNlIFwiY29uc2VydmF0aXZlXCI6YSs9XCJLb25mZXNzaW9uOiBjb25zZXJ2YXRpdmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJlZ2FsaXRhcmlhblwiOmErPVwiS29uZmVzc2lvbjogZWdhbGl0YXJpYW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJoYXNpZGljXCI6YSs9XCJLb25mZXNzaW9uOiBoYXNpZGljPGJyLz5cIjticmVhaztjYXNlIFwiaHVtYW5pc3RpY1wiOmErPVwiS29uZmVzc2lvbjogaHVtYW5pc3RpYzxici8+XCI7YnJlYWs7Y2FzZSBcImthYmJhbGFoXCI6YSs9XG4gICAgXCJLb25mZXNzaW9uOiBrYWJiYWxhaDxici8+XCI7YnJlYWs7Y2FzZSBcImthYmJhbGlzdGljXCI6YSs9XCJLb25mZXNzaW9uOiBrYWJiYWxpc3RpYzxici8+XCI7YnJlYWs7Y2FzZSBcImthcmFpdGVcIjphKz1cIktvbmZlc3Npb246IGthcmFpdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsaWJlcmFsXCI6YSs9XCJLb25mZXNzaW9uOiBsaWJlcmFsPGJyLz5cIjticmVhaztjYXNlIFwibHViYXZpdGNoXCI6YSs9XCJLb25mZXNzaW9uOiBsdWJhdml0Y2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsdWJhdml0Y2hfbWVzc2lhbmljXCI6YSs9XCJLb25mZXNzaW9uOiBsdWJhdml0Y2hfbWVzc2lhbmljPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfYmFnaGRhZGlcIjphKz1cIktvbmZlc3Npb246IG1penJhY2hpX2JhZ2hkYWRpPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfY2hpZGFcIjphKz1cIktvbmZlc3Npb246IG1penJhY2hpX2NoaWRhPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfamVydXNhbGVtaXRlXCI6YSs9XCJLb25mZXNzaW9uOiBtaXpyYWNoaV9qZXJ1c2FsZW1pdGU8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJtaXpyYWNoaV9saXZvcm5vXCI6YSs9XCJLb25mZXNzaW9uOiBtaXpyYWNoaV9saXZvcm5vPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfbW9yb2NjYW5cIjphKz1cIktvbmZlc3Npb246IG1penJhY2hpX21vcm9jY2FuPGJyLz5cIjticmVhaztjYXNlIFwibW9kZXJuX29ydGhvZG94XCI6YSs9XCJLb25mZXNzaW9uOiBtb2Rlcm5fb3J0aG9kb3g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJuZW9fb3J0aG9kb3hcIjphKz1cIktvbmZlc3Npb246IG5lb19vcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcIm5vbmRlbm9taW5hdGlvbmFsXCI6YSs9XCJLb25mZXNzaW9uOiBub25kZW5vbWluYXRpb25hbDxici8+XCI7YnJlYWs7Y2FzZSBcIm9ydGhvZG94XCI6YSs9XCJLb25mZXNzaW9uOiBvcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcIm9ydGhvZG94X2FzaGtlbmF6XCI6YSs9XCJLb25mZXNzaW9uOiBvcnRob2RveF9hc2hrZW5hejxici8+XCI7YnJlYWs7Y2FzZSBcIm9ydGhvZG94X3NlZmFyZFwiOmErPVwiS29uZmVzc2lvbjogb3J0aG9kb3hfc2VmYXJkPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwicHJvZ3Jlc3NpdmVcIjphKz1cIktvbmZlc3Npb246IHByb2dyZXNzaXZlPGJyLz5cIjticmVhaztjYXNlIFwicmVjb25zdHJ1Y3Rpb25pc3RcIjphKz1cIktvbmZlc3Npb246IHJlY29uc3RydWN0aW9uaXN0PGJyLz5cIjticmVhaztjYXNlIFwicmVmb3JtXCI6YSs9XCJLb25mZXNzaW9uOiByZWZvcm08YnIvPlwiO2JyZWFrO2Nhc2UgXCJyZW5ld2FsXCI6YSs9XCJLb25mZXNzaW9uOiByZW5ld2FsPGJyLz5cIjticmVhaztjYXNlIFwic2FtYXJpdGFuXCI6YSs9XCJLb25mZXNzaW9uOiBzYW1hcml0YW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZWZhcmRpXCI6YSs9XCJLb25mZXNzaW9uOiBzZWZhcmRpPGJyLz5cIjticmVhaztjYXNlIFwic2VmYXJkaV9hbXN0ZXJkYW1cIjphKz1cIktvbmZlc3Npb246IHNlZmFyZGlfYW1zdGVyZGFtPGJyLz5cIjticmVhaztjYXNlIFwic2VmYXJkaV9sb25kb25cIjphKz1cIktvbmZlc3Npb246IHNlZmFyZGlfbG9uZG9uPGJyLz5cIjticmVhaztjYXNlIFwidHJhZGl0aW9uYWxcIjphKz1cIktvbmZlc3Npb246IHRyYWRpdGlvbmFsPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwidWx0cmFfb3J0aG9kb3hcIjphKz1cIktvbmZlc3Npb246IHVsdHJhX29ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwidW5hZmZpbGlhdGVkXCI6YSs9XCJLb25mZXNzaW9uOiB1bmFmZmlsaWF0ZWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ5ZW1lbml0ZVwiOmErPVwiS29uZmVzc2lvbjogeWVtZW5pdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ5ZW1lbml0ZV9iYWxhZGlcIjphKz1cIktvbmZlc3Npb246IHllbWVuaXRlX2JhbGFkaTxici8+XCI7YnJlYWs7Y2FzZSBcInllbWVuaXRlX3NoYW1pXCI6YSs9XCJLb25mZXNzaW9uOiB5ZW1lbml0ZV9zaGFtaTxici8+XCI7YnJlYWs7Y2FzZSBcImFobWFkaXlhXCI6YSs9XCJLb25mZXNzaW9uOiBhaG1hZGl5YTxici8+XCI7YnJlYWs7Y2FzZSBcImFsYW91aXRlXCI6YSs9XCJLb25mZXNzaW9uOiBhbGFvdWl0ZTxici8+XCI7YnJlYWs7Y2FzZSBcImRydXplXCI6YSs9XCJLb25mZXNzaW9uOiBkcnV6ZTxici8+XCI7YnJlYWs7Y2FzZSBcImliYWRpXCI6YSs9XCJLb25mZXNzaW9uOiBpYmFkaTxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImlzbWFpbGlcIjphKz1cIktvbmZlc3Npb246IGlzbWFpbGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzaGlhXCI6YSs9XCJLb25mZXNzaW9uOiBzaGlhPGJyLz5cIjticmVhaztjYXNlIFwic3VubmlcIjphKz1cIktvbmZlc3Npb246IHN1bm5pPGJyLz5cIjticmVhaztjYXNlIFwibmljaGlyZW5cIjphKz1cIktvbmZlc3Npb246IG5pY2hpcmVuPGJyLz5cIjticmVhaztjYXNlIFwiam9kb19zaGluc2h1XCI6YSs9XCJLb25mZXNzaW9uOiBqb2RvX3NoaW5zaHU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJqb2RvX3NodVwiOmErPVwiS29uZmVzc2lvbjogam9kb19zaHU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ2YWpyYXlhbmFcIjphKz1cIktvbmZlc3Npb246IHZhanJheWFuYTxici8+XCI7YnJlYWs7Y2FzZSBcInNoaW5nb25fc2h1XCI6YSs9XCJLb25mZXNzaW9uOiBzaGluZ29uX3NodTxici8+XCI7YnJlYWs7Y2FzZSBcInplblwiOmErPVwiS29uZmVzc2lvbjogemVuPGJyLz5cIjticmVhaztjYXNlIFwidGhhaV9tYWhhbmlrYXlhXCI6YSs9XCJLb25mZXNzaW9uOiB0aGFpX21haGFuaWtheWE8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJ0aGFpX3RoYW1tYXl1dFwiOmErPVwiS29uZmVzc2lvbjogdGhhaV90aGFtbWF5dXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhc2F0cnVcIjphKz1cIktvbmZlc3Npb246IGFzYXRydTxici8+XCI7YnJlYWs7Y2FzZSBcImNlbHRpY1wiOmErPVwiS29uZmVzc2lvbjogY2VsdGljPGJyLz5cIjticmVhaztjYXNlIFwiZ3JlY28tcm9tYW5cIjphKz1cIktvbmZlc3Npb246IGdyZWNvLXJvbWFuPGJyLz5cIjticmVhaztjYXNlIFwid2ljY2FcIjphKz1cIktvbmZlc3Npb246IHdpY2NhPGJyLz5cIjticmVhaztjYXNlIFwiaXJhbmlcIjphKz1cIktvbmZlc3Npb246IGlyYW5pPGJyLz5cIjticmVhaztjYXNlIFwicGFyc2lcIjphKz1cIktvbmZlc3Npb246IHBhcnNpPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn1pZihiLmNvbW11bml0eSlzd2l0Y2goYi5jb21tdW5pdHkpe2Nhc2UgXCJBQVwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChBQSk6IEF1Z3VzdGluaWFucyBvZiB0aGUgQXNzdW1wdGlvbiA8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJCU0NNXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKEJTQ00pOiBBZG9yZXJzIG9mIHRoZSBTYWNyZWQgSGVhcnQgb2YgSmVzdXMgb2YgTW9udG1hcnRyZSA8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDQk1WXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKENCTVYpOiBBdWd1c3RpbmVyLUNob3JmcmF1ZW4gQi5NLlYuPGJyLz5cIjticmVhaztjYXNlIFwiQ09cIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoQ08pOiBPcmF0b3JpYW5zPGJyLz5cIjticmVhaztjYXNlIFwiQ01DXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKENNQyk6IENvbmdyZWdhdGlvbiBvZiB0aGUgTW90aGVyIENvLVJlZGVtcHRyaXg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDUlNQXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKENSU1ApOiBLb25ncmVnYXRpb24gZGVyIFJlZ3VsYXJrbGVyaWtlciB2b20gaGwuIFBhdWx1cyAoQmFybmFiaXRlbik8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDU0pcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoQ1NKKTogQ2FybWVsIFNhaW50LUpvc2VwaDxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcIkNTU1BcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoQ1NTUCk6IENvbmdyXFx1MDBlOWdhdGlvbiBkdSBTYWludC1Fc3ByaXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDU1NSXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKENTU1IpOiBDb25nclxcdTAwZTlnYXRpb24gZHUgVHJcXHUwMGU4cyBTYWludCBSXFx1MDBlOWRlbXB0ZXVyPGJyLz5cIjticmVhaztjYXNlIFwiRkNKTVwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChGQ0pNKTogRnJhbmNpc2NhbiBTaXN0ZXJzLCBEYXVnaHRlcnMgb2YgdGhlIFNhY3JlZCBIZWFydCBvZiBKZXN1cyBhbmQgTWFyeTxici8+XCI7YnJlYWs7Y2FzZSBcIkZNR0JcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoRk1HQik6IFN1b3JlIEZyYW5jZXNjYW5lIE1pc3Npb25hcmllIGRpIEdlc1xcdTAwZjkgQmFtYmlubzxici8+XCI7YnJlYWs7Y2FzZSBcIkZNSFwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChGTUgpOiBDb25ncmVnYXRpbyBGaWxpYXJ1bSBNYXJpYWUgU2FuY3Rpc3NpbWFlIGFiIEhvcnRvPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwiRk1NXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKEZNTSk6IEZyYW5jaXNjYWluZXMgbWlzc2lvbm5haXJlcyBkZSBNYXJpZTxici8+XCI7YnJlYWs7Y2FzZSBcIkZTQ1wiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChGU0MpOiBGclxcdTAwZThyZXMgZGVzIFxcdTAwYzljb2xlcyBjaHJcXHUwMGU5dGllbm5lczxici8+XCI7YnJlYWs7Y2FzZSBcIk1DQ0lcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoTUNDSSk6IE1pc3Npb25uYWlyZXMgY29tYm9uaWVucyBkdSBTYWNyXFx1MDBlOS1DXFx1MDE1M3VyPGJyLz5cIjticmVhaztjYXNlIFwiTVNGU1wiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChNU0ZTKTogTWlzc2lvbm5haXJlcyBkZSBTYWludCBGcmFuXFx1MDBlN29pcyBkZSBTYWxlczxici8+XCI7YnJlYWs7Y2FzZSBcIk9DYXJ0XCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9DYXJ0KTogT3JkZXIgb2YgdGhlIENhcnRodXNpYW5zPGJyLz5cIjticmVhaztjYXNlIFwiT0NDXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9DQyk6IE9yZHJlIGRlIE5vdHJlIERhbWUgZHUgTW9udC1DYXJtZWw8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJPQ0RcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT0NEKTogT3JkcmUgZGVzIENhcm1lcyBkXFx1MDBlOWNoYXV4PGJyLz5cIjticmVhaztjYXNlIFwiT0NTT1wiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChPQ1NPKTogWmlzdGVyemllbnNlcm9yZGVuIGRlciBzdHJlbmdlcmVuIE9ic2VydmFueiAoVHJhcHBpc3Rlbik8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPRk1cIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT0ZNKTogT3JkcmUgZGVzIEZyXFx1MDBlOHJlcyBNaW5ldXJzIChGcmFuemlza2FuZXIpPGJyLz5cIjticmVhaztjYXNlIFwiT0ZNQ2FwXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9GTUNhcCk6IE9yZHJlIGRlcyBGclxcdTAwZThyZXMgTWluZXVycyBDYXB1Y2luczxici8+XCI7YnJlYWs7Y2FzZSBcIk9GTUNvbnZcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT0ZNQ29udik6IE9yZHJlIGRlcyBGclxcdTAwZThyZXMgTWluZXVycyBDb252ZW50dWVsczxici8+XCI7YnJlYWs7Y2FzZSBcIk9GU1wiOmErPVxuICAgIFwiT3JkZW5zZ2VtZWluc2NoYWZ0IChPRlMpOiBGcmFuY2lzY2FucyBzZWN1bGFyIFRoaXJkIE9yZGVyPGJyLz5cIjticmVhaztjYXNlIFwiT01JXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9NSSk6IE9ibGF0cyBkZSBNYXJpZTxici8+XCI7YnJlYWs7Y2FzZSBcIk9QXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9QKTogT3JkcmUgZGVzIEZyXFx1MDBlOHJlcyBQclxcdTAwZWFjaGV1cnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPUHJhZW1cIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT1ByYWVtKTogT3JkcmUgZGVzIGNoYW5vaW5lcyByXFx1MDBlOWd1bGllcnMgZGUgUHJcXHUwMGU5bW9udHJcXHUwMGU5PGJyLz5cIjticmVhaztjYXNlIFwiT1NCXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9TQik6IE9yZGVyIG9mIFNhaW50IEJlbmVkaWN0PGJyLz5cIjticmVhaztjYXNlIFwiT1NDXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9TQyk6IE9yZHJlIGRlIFNhaW50ZS1DbGFpcmUgb3UgT3JkcmUgZGVzIFBhdXZyZXMgRGFtZXM8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJPU1NTXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9TU1MpOiBPcmRyZSBkZSBTYWludGUtQnJpZ2l0dGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPVk1cIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT1ZNKTogT3JkZXIgb2YgdGhlIFZpc2l0YXRpb24gb2YgSG9seSBNYXJ5IChTYWxlc2lhbmVyaW5uZW4pPGJyLz5cIjticmVhaztjYXNlIFwiUFNEUFwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChQU0RQKTogUGV0aXRlcyBzXFx1MDE1M3VycyBkZXMgcGF1dnJlcyAoS2xlaW5lbiBTY2h3ZXN0ZXJuIGRlciBBcm1lbik8YnIvPlwiO2JyZWFrO2Nhc2UgXCJQRkpcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoUEZKKTogUGV0aXRzIEZyXFx1MDBlOHJlcyBkZSBKXFx1MDBlOXN1czxici8+XCI7YnJlYWs7Y2FzZSBcIlNEQlwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChTREIpOiBTb2NpXFx1MDBlOXRcXHUwMGU5IGRlIFNhaW50IEZyYW5cXHUwMGU3b2lzIGRlIFNhbGVzPGJyLz5cIjticmVhaztjYXNlIFwiU0pcIjphKz1cbiAgICBcIk9yZGVuc2dlbWVpbnNjaGFmdCAoU0opOiBDb21wYWduaWUgZGUgSlxcdTAwZTlzdXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTT0NcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoU09DKTogT3JkZXIgb2YgQ2lzdGVyY2lhbnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTU0NDXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKFNTQ0MpOiBDb25ncmVnYXRpb24gb2YgdGhlIFNhY3JlZCBIZWFydHMgb2YgSmVzdXMgYW5kIE1hcnk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTU0ZcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoU1NGKTogU29jaWV0eSBvZiBTdCBGcmFuY2lzPGJyLz5cIjticmVhaztjYXNlIFwiU1NKRVwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChTU0pFKTogU29jaWV0eSBvZiBTdCBKb2huIHRoZSBFdmFuZ2VsaXN0PGJyLz5cIjticmVhaztjYXNlIFwiU1NwU1wiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChTU3BTKTogU3RleWxlciBNaXNzaW9uc3NjaHdlc3Rlcm48YnIvPlwiO2JyZWFrO2Nhc2UgXCJUT1JcIjphKz1cbiAgICBcIk9yZGVuc2dlbWVpbnNjaGFmdCAoVE9SKTogVGVyem8gT3JkaW5lIFJlZ29sYXJlIGRpIFNhbiBGcmFuY2VzY288YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnQ8YnIvPlwifXJldHVybiBhfXZhciBmblRlc3RJbmZvUG9wdXA9ZnVuY3Rpb24oYil7Yj1iLmdldFByb3BlcnRpZXMoKTt2YXIgYT1cIlwiLGM7Zm9yKGMgaW4gYilhPWErYytcIj1cIitiW2NdK1wiPGJyLz5cIjtyZXR1cm4nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF90ZXh0XCIgc3R5bGU9XCJ3aWR0aDozMDBweDtcIj4nK2ErXCI8L2Rpdj5cIn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLXBvcHVwLWluZm8tZGUuanMiLCIvKlxuICBLP3N0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduIDIwMTEgLSAyMDE4XG4gQGF1dGhvciAgICAgSz9zdGVuc2NobWllZGUgPGh0dHA6Ly93d3cua3Vlc3RlbnNjaG1pZWRlLmRlPlxuIEBsaWNlbnNlICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9sZ3BsLTMuMC5odG1sXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaW0oYil7cmV0dXJuIGIucmVwbGFjZSgvXlxccysvLFwiXCIpLnJlcGxhY2UoL1xccyskLyxcIlwiKX1cbmV4cG9ydCBmdW5jdGlvbiBpc01vYmlsZSgpe3JldHVybi8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIChjZXxwaG9uZSl8eGRhfHhpaW5vfGFuZHJvaWR8aXBhZHxwbGF5Ym9va3xzaWxrL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHx3aW5kb3cub3BlcmEpfHwvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaS50ZXN0KChuYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHxcbiAgICB3aW5kb3cub3BlcmEpLnN1YnN0cigwLDQpKX1mdW5jdGlvbiB0cmFuc2xhdGUoYil7dmFyIGE9dHJpbShiKTtyZXR1cm5cInllc1wiPT1hfHxcIlllc1wiPT1hP1wieWVzXCI6XCJub1wiPT1hfHxcIk5vXCI9PWE/XCJub1wiOlwibGltaXRlZFwiPT1hP1wibGltaXRlZFwiOlwiZGVzaWduYXRlZFwiPT1hP1wiZGVzaWduYXRlZFwiOlwid29vZFwiPT1hP1wid29vZFwiOlwibWV0YWxcIj09YT9cIm1ldGFsXCI6XCJjb25jcmV0ZVwiPT1hP1wiY29uY3JldGVcIjpcInBsYXN0aWNcIj09YT9cInBsYXN0aWNcIjpcInN0b25lXCI9PWE/XCJzdG9uZVwiOlwic3RlZWxcIj09YT9cInN0ZWVsXCI6XCJicmlja1wiPT1hP1wiYnJpY2tcIjpcInJlaW5mb3JjZWRfY29uY3JldGVcIj09YT9cInJlaW5mb3JjZWRfY29uY3JldGVcIjpcIm1hc29ucnlcIj09YT9cIm1hc29ucnlcIjpifVxuZXhwb3J0IHZhciBmblN0YW5kYXJkSW5mb1BvcHVwPWZ1bmN0aW9uKGIsYSl7dmFyIGM9Yi5nZXRQcm9wZXJ0aWVzKCksZD1cIlwiLGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpe3ZhciBmPWEuY2FsbChiKVswXS5nZXRJbWFnZSgpO2lmKGYpdHJ5e2U9Zi5nZXRTcmMoKX1jYXRjaChnKXtlPVwiXCJ9fWVsc2V7Zj1hLmdldEltYWdlKCk7dHJ5e2U9Zi5nZXRTcmMoKX1jYXRjaChoKXtlPVwiXCJ9fWQrPWZuSGVhZGVyKGMsZSk7ZCs9Zm5Db250ZW50KGMpO2QrPWZuRm9vdGVyKGMsYi5nZXQoXCJvc21fdHlwZVwiKStcIi9cIitiLmdldElkKCkpO3JldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX3RleHRcIj4nK2QrXCI8L2Rpdj5cIn0sZm5SZWR1Y2VkSW5mb1BvcHVwPWZ1bmN0aW9uKGIsYSl7dmFyIGM9Yi5nZXRQcm9wZXJ0aWVzKCksZD1cIlwiLGU9ITEsZjtmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChiKVswXS5nZXRJbWFnZSgpLmdldFNyYygpOmEuZ2V0SW1hZ2UoKS5nZXRTcmMoKTtpZihcInJlc3RhdXJhbnRcIj09XG4gICAgYy5hbWVuaXR5fHxcInB1YlwiPT1jLmFtZW5pdHl8fFwiYmllcmdhcnRlblwiPT1jLmFtZW5pdHkpZT0hMDtcImhvdGVsXCI9PWMudG91cmlzbSYmKGU9ITApO1wiZ3Vlc3RfaG91c2VcIj09Yy50b3VyaXNtJiYoZT0hMCk7XCJjaGFsZXRcIj09Yy50b3VyaXNtJiYoZT0hMCk7XCJob3N0ZWxcIj09Yy50b3VyaXNtJiYoZT0hMCk7XCJhbHBpbmVfaHV0XCI9PWMudG91cmlzbSYmKGU9ITApO2lmKFwiYXJ0d29ya1wiPT1jLnRvdXJpc218fFwiYXJ0d29ya1wiPT1jLmFtZW5pdHkpZT0hMDtpZihcIm11c2V1bVwiPT1jLnRvdXJpc218fFwibXVzZXVtXCI9PWMuYW1lbml0eSllPSEwO1wiY2luZW1hXCI9PWMuYW1lbml0eSYmKGU9ITApO1widGhlYXRyZVwiPT1jLmFtZW5pdHkmJihlPSEwKTtpZihcImF0dHJhY3Rpb25cIj09Yy5hbWVuaXR5fHxcImZvdW50YWluXCI9PWMuYW1lbml0eXx8XCJtb251bWVudFwiPT1jLmhpc3RvcmljfHxcImNpdHlfZ2F0ZVwiPT1jLmhpc3RvcmljfHxcInJ1aW5zXCI9PWMuaGlzdG9yaWN8fFwiY2FzdGxlXCI9PWMuaGlzdG9yaWN8fFxuICAgIFwiYXR0cmFjdGlvblwiPT1jLnRvdXJpc20pZT0hMDtcInBsYXlncm91bmRcIj09Yy5sZWlzdXJlJiYoZT0hMCk7Yy5hZXJpYWx3YXkmJihlPSEwKTtpZihcInN3aW1taW5nX3Bvb2xcIj09Yy5hbWVuaXR5fHxcInN3aW1taW5nX3Bvb2xcIj09Yy5sZWlzdXJlfHxcInN3aW1taW5nXCI9PWMuc3BvcnQpZT0hMDtcInN0YXRpb25cIj09Yy5yYWlsd2F5JiYoZT0hMCk7XCJzd2ltbWluZ1wiPT1jLnNwb3J0JiYoZT0hMCk7XCJzd2ltbWluZ19wb29sXCI9PWMubGVpc3VyZSYmKGU9ITApO1wic3dpbW1pbmdfcG9vbFwiPT1jLmFtZW5pdHkmJihlPSEwKTtcIndhdGVycGFya1wiPT1jLmxlaXN1cmUmJihlPSEwKTtjLndhdGVyX3BhcmsmJihlPSEwKTtcInNwb3J0c19jZW50cmVcIj09Yy5sZWlzdXJlJiYoZT0hMCk7c3dpdGNoKGUpe2Nhc2UgITE6ZCs9Zm5IZWFkZXIoYyxmKTtkKz1mbkNvbnRlbnQoYyk7ZCs9Zm5Gb290ZXIoYyxiLmdldChcIm9zbV90eXBlXCIpK1wiL1wiK2IuZ2V0SWQoKSk7YnJlYWs7Y2FzZSAhMDpkKz1mbkhlYWRlcihjLFxuICAgIGYpfXJldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX3RleHRcIj4nK2QrXCI8L2Rpdj5cIn07XG5leHBvcnQgZnVuY3Rpb24gZm5IZWFkZXIoYixhKXt2YXIgYz1cIlwiLGQ9XCIzMnB4XCI7YSYmLTEhPWEuaW5kZXhPZihcImljb25fbWFwY2lsXCIpJiYoZD1cIjI1MHB4XCIsYT1hLnJlcGxhY2UoXCJpY29uX21hcGNpbFwiLFwibG9nb19tYXBjaWxcIikpO2lmKGIubmFtZXx8YltcInBpc3RlOm5hbWVcIl18fGJbXCJ4bWFzOm5hbWVcIl18fGJbXCJ4bWFzOmxvY2F0aW9uXCJdKXtpZihiLm5hbWUpdmFyIGU9Yi5uYW1lO2JbXCJwaXN0ZTpuYW1lXCJdJiYoZT1iW1wicGlzdGU6bmFtZVwiXSk7YltcInhtYXM6bmFtZVwiXSYmKGU9YltcInhtYXM6bmFtZVwiXSk7YltcInhtYXM6bG9jYXRpb25cIl0mJihlPWJbXCJ4bWFzOmxvY2F0aW9uXCJdKTtjKz1hPyc8aW1nIHNyYz1cIicrYSsnXCIgd2lkdGg9XCInK2QrJ1wiIG5hbWU9XCInK2UrJ1wiIGFsdD1cIicrZSsnXCI+PGRpdiBjbGFzcz1cImM0Z19wb3B1cF9oZWFkZXJfZmVhdHVyZW5hbWVcIj4nK2UrXCI8L2Rpdj5cIjonPG5hbWU9XCInK2UrJ1wiIGFsdD1cIicrZSsnXCI+PGRpdiBjbGFzcz1cImM0Z19wb3B1cF9oZWFkZXJfZmVhdHVyZW5hbWVcIj4nK1xuICAgIGUrXCI8L2Rpdj5cIn1lbHNlIGEmJihjKz0nPGltZyBzcmM9XCInK2ErJ1wiIHdpZHRoPVwiJytkKydcIiBuYW1lPVwiJythKydcIiBhbHQ9XCInK2ErJ1wiPicpO2MrPWZuR2V0VHJhbnNsYXRlX1R5cGUoYik7cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfaGVhZGVyXCI+JytjK1wiPC9kaXY+XCJ9XG5leHBvcnQgZnVuY3Rpb24gZm5Gb290ZXIoYixhKXt2YXIgYz1cIlwiLGQ9ITE7YltcImFkZHI6aG91c2VuYW1lXCJdJiYoYys9XCJob3VzZW5hbWU6IFwiK2JbXCJhZGRyOmhvdXNlbmFtZVwiXStcIjxici8+XCIsZD0hMCk7YltcImFkZHI6Zmxvb3JcIl0/KGMrPVwiZmxvb3I6IFwiK2JbXCJhZGRyOmZsb29yXCJdK1wiPGJyLz5cIixkPSEwKTpiW1wiYWRkcjpsZXZlbFwiXSYmKGMrPVwibGV2ZWw6IFwiK2JbXCJhZGRyOmxldmVsXCJdK1wiPGJyLz5cIixkPSEwKTtiW1wiYWRkcjpzdHJlZXRcIl0mJihjKz1iW1wiYWRkcjpzdHJlZXRcIl0sYz1iW1wiYWRkcjpob3VzZW51bWJlclwiXT9jKyhcIiBcIitiW1wiYWRkcjpob3VzZW51bWJlclwiXStcIjxici8+XCIpOmMrXCI8YnIvPlwiLGQ9ITApO2JbXCJhZGRyOnBvc3Rjb2RlXCJdJiYoYys9YltcImFkZHI6cG9zdGNvZGVcIl0rXCIgXCIpO2JbXCJhZGRyOmNpdHlcIl0mJihjKz1iW1wiYWRkcjpjaXR5XCJdK1wiPGJyLz5cIixkPSEwKTtpZihiLnNxa20paWYoYi5zcWttPVwiXCIrYi5zcWttLDM8Yi5zcWttLmxlbmd0aCl7dmFyIGU9Yi5zcWttLmxlbmd0aCVcbiAgICAzLGY9MDxlP2Iuc3FrbS5zdWJzdHJpbmcoMCxlKTpcIlwiO2ZvcihpPTA7aTxNYXRoLmZsb29yKGIuc3FrbS5sZW5ndGgvMyk7aSsrKWY9MD09ZSYmMD09aT9mK2Iuc3FrbS5zdWJzdHJpbmcoZSszKmksZSszKmkrMyk6ZisoXCIuXCIrYi5zcWttLnN1YnN0cmluZyhlKzMqaSxlKzMqaSszKSk7Yys9XCJhcmVhOiBcIitmK1wiIEttXFx1MDBiMjxici8+XCJ9ZWxzZSBjKz1cImFyZWEgXCIrYi5zcWttK1wiPGJyLz5cIjtiW1wiY29udGFjdDpwaG9uZVwiXSYmKGM9aXNNb2JpbGUoKT9jKygncGhvbmU6IDxhIGhyZWY9XCJ0ZWw6JytiW1wiY29udGFjdDpwaG9uZVwiXSsnXCI+JytiW1wiY29udGFjdDpwaG9uZVwiXStcIjwvYT48YnIvPlwiKTpjKygncGhvbmU6IDxhIGhyZWY9XCJjYWxsdG86JytiW1wiY29udGFjdDpwaG9uZVwiXSsnXCI+JytiW1wiY29udGFjdDpwaG9uZVwiXStcIjwvYT48YnIvPlwiKSxkPSEwKTtiLnBob25lJiYoYz1pc01vYmlsZSgpP2MrKCdwaG9uZTogPGEgaHJlZj1cInRlbDonK2IucGhvbmUrJ1wiPicrYi5waG9uZStcbiAgICBcIjwvYT48YnIvPlwiKTpjKygncGhvbmU6IDxhIGhyZWY9XCJjYWxsdG86JytiLnBob25lKydcIj4nK2IucGhvbmUrXCI8L2E+PGJyLz5cIiksZD0hMCk7YltcImNvbnRhY3Q6ZmF4XCJdPyhjKz1cImZheDogXCIrYltcImNvbnRhY3Q6ZmF4XCJdK1wiPGJyLz5cIixkPSEwKTpiLmZheCYmKGMrPVwiZmF4OiBcIitiLmZheCtcIjxici8+XCIsZD0hMCk7YltcImNvbnRhY3Q6ZW1haWxcIl0/KGMrPSdlbWFpbDogPGEgaHJlZj1cIm1haWx0bzonK2JbXCJjb250YWN0OmVtYWlsXCJdKydcIj4nK2JbXCJjb250YWN0OmVtYWlsXCJdK1wiPC9hPjxici8+XCIsZD0hMCk6Yi5lbWFpbCYmKGMrPSdlbWFpbDogPGEgaHJlZj1cIm1haWx0bzonK2IuZW1haWwrJ1wiPicrYi5lbWFpbCtcIjwvYT48YnIvPlwiLGQ9ITApO2QmJihjKz1cIjxici8+XCIpO2lmKGIub3BlbmluZ19ob3Vycyl7ZD1iLm9wZW5pbmdfaG91cnM7Zm9yKGU9MDswPT1lfHwwPGQuaW5kZXhPZihcIjtcIik7KTA8ZSYmKGQ9ZC5yZXBsYWNlKFwiO1wiLFwiPGJyLz5cIikpLGUrKztjKz0nb3BlbmluZyBob3VyczogPGJyLz48ZGl2IGNsYXNzPVwiYzRnX29wZW5fdGV4dFwiPicrXG4gICAgZCtcIjwvZGl2PlwiO2M9MDxkLmluZGV4T2YoXCJQSFwiKT9jK1wiKFBIID0gcHVibGljIGhvbGlkYXkpPGJyLz5cIjpjK1wiPGJyLz5cIn1pZihiW1wieG1hczpvcGVuaW5nX2hvdXJzXCJdKXtkPWJbXCJ4bWFzOm9wZW5pbmdfaG91cnNcIl07Zm9yKGU9MDswPT1lfHwwPGQuaW5kZXhPZihcIjtcIik7KTA8ZSYmKGQ9ZC5yZXBsYWNlKFwiO1wiLFwiPGJyLz5cIikpLGUrKztjKz0nb3BlbmluZyBob3VyczogPGJyLz48ZGl2IGNsYXNzPVwiYzRnX29wZW5fdGV4dFwiPicrZCtcIjwvZGl2PlwiO2M9MDxkLmluZGV4T2YoXCJQSFwiKT9jK1wiKFBIID0gcHVibGljIGhvbGlkYXkpPGJyLz5cIjpjK1wiPGJyLz5cIn1iW1wieG1hczp1cmxcIl0mJihkPVwiXCIsZD1iW1wieG1hczp1cmxcIl0sdHJpbShkKSwtMT09ZC5pbmRleE9mKFwiaHR0cHM6Ly9cIiwwKSYmLTE9PWQuaW5kZXhPZihcImh0dHA6Ly9cIiwwKSYmKGQ9XCJodHRwOi8vXCIrZCksYys9J3dlYnNpdGU6IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPndlYnNpdGUgbGluazwvYT48YnIvPicpO1xuICAgIGJbXCJjb250YWN0OndlYnNpdGVcIl0/KGQ9YltcImNvbnRhY3Q6d2Vic2l0ZVwiXSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHA6Ly9cIitkKSxjKz0nd2Vic2l0ZTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+d2Vic2l0ZSBsaW5rPC9hPjxici8+Jyk6Yi53ZWJzaXRlJiYoZD1iLndlYnNpdGUsdHJpbShkKSwtMT09ZC5pbmRleE9mKFwiaHR0cHM6Ly9cIiwwKSYmLTE9PWQuaW5kZXhPZihcImh0dHA6Ly9cIiwwKSYmKGQ9XCJodHRwOi8vXCIrZCksYys9J3dlYnNpdGU6IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPndlYnNpdGUgbGluazwvYT48YnIvPicpO2Iud2lraXBlZGlhJiYoZD1iLndpa2lwZWRpYSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHBzOi8vd2lraXBlZGlhLm9yZy93aWtpL1wiK2QpLGMrPVxuICAgICAgICAnV2lraXBlZGlhOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj5XaWtpcGVkaWEgbGluazwvYT48YnIvPicpO2Iud2lraW1lZGlhX2NvbW1vbnMmJihkPWIud2lraW1lZGlhX2NvbW1vbnMsdHJpbShkKSwtMT09ZC5pbmRleE9mKFwiaHR0cHM6Ly9cIiwwKSYmLTE9PWQuaW5kZXhPZihcImh0dHA6Ly9cIiwwKSYmKGQ9XCJodHRwczovL2NvbW1vbnMud2lraW1lZGlhLm9yZy93aWtpL1wiK2QpLGMrPSdXaWtpbWVkaWE6IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPldpa2ltZWRpYSBsaW5rPC9hPjxici8+Jyk7YltcImNvbnRhY3Q6d2ViY2FtXCJdJiYoZD1iW1wiY29udGFjdDp3ZWJjYW1cIl0sdHJpbShkKSwtMT09ZC5pbmRleE9mKFwiaHR0cHM6Ly9cIiwwKSYmLTE9PWQuaW5kZXhPZihcImh0dHA6Ly9cIiwwKSYmKGQ9XCJodHRwOi8vXCIrZCksYys9J3dlYmNhbTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+d2ViY2FtIGxpbms8L2E+PGJyLz4nKTtiLmltYWdlJiYoYys9XG4gICAgICAgICc8aW1nIHNyYz1cIicrYi5pbWFnZSsnXCIgd2lkdGg9XCIyMDBweFwiIG5hbWU9XCInK2IubmFtZSsnXCIgYWx0PVwiJytiLm5hbWUrJ1wiPjxici8+Jyk7ZD1cIlwiO2IuaW50ZXJuZXRfYWNjZXNzJiYoZCs9XCJpbnRlcm5ldCBhY2Nlc3M6IFwiK3RyYW5zbGF0ZShiLmludGVybmV0X2FjY2VzcykrXCI8YnIvPlwiKTtiW1wiaW50ZXJuZXRfYWNjZXNzOmZlZVwiXSYmKGQrPVwiZmVlOiBcIit0cmFuc2xhdGUoYltcImludGVybmV0X2FjY2VzczpmZWVcIl0pK1wiPGJyLz5cIik7YltcIndpZmlfYWNjZXNzOm9wZXJhdG9yXCJdJiYoZCs9XCJ3aWZpIG9wZXJhdG9yOiBcIitiW1wid2lmaV9hY2Nlc3M6b3BlcmF0b3JcIl0rXCI8YnIvPlwiKTtiW1wid2lmaV9hY2Nlc3M6dGVjaG5vbG9neVwiXSYmKGQrPVwid2lmaSB0ZWNobm9sb2d5OiBcIitiW1wid2lmaV9hY2Nlc3M6dGVjaG5vbG9neVwiXStcIjxici8+XCIpO2JbXCJ3aWZpX2FjY2Vzczpzc2lkXCJdJiYoZCs9XCJ3aWZpIHNzaWQ6IFwiK2JbXCJ3aWZpX2FjY2Vzczpzc2lkXCJdK1wiPGJyLz5cIik7XCJcIiE9ZCYmXG4gICAgKGMrPSdpbnRlcm5ldCBhY2Nlc3MgYXZhaWxhYmxlPGJyLz48ZGl2IGNsYXNzPVwiYzRnX3Nob3BfaW50ZXJuZXRfYWNjZXNzXCI+JytkK1wiPC9kaXY+PGJyLz5cIik7Yi53aGVlbGNoYWlyJiYoYys9XCJ3aGVlbGNoYWlyOiBcIit0cmFuc2xhdGUoYi53aGVlbGNoYWlyKStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOmRlc2NyaXB0aW9uXCJdJiYoYys9XCJkZXNjcmlwdGlvbjogXCIrYltcIndoZWVsY2hhaXI6ZGVzY3JpcHRpb25cIl0rXCI8YnIvPlwiKTtiW1wid2hlZWxjaGFpcjplbnRyYW5jZV93aWR0aFwiXSYmKGMrPVwiZW50cmFuY2Ugd2lkdGggKGNtKTogXCIrYltcIndoZWVsY2hhaXI6ZW50cmFuY2Vfd2lkdGhcIl0rXCI8YnIvPlwiKTtiW1wid2hlZWxjaGFpcjpzdGVwX2hlaWdodFwiXSYmKGMrPVwic3RlcCBoZWlnaHQgKGNtKTogXCIrYltcIndoZWVsY2hhaXI6c3RlcF9oZWlnaHRcIl0rXCI8YnIvPlwiKTtiW1wid2hlZWxjaGFpcjpyb29tc1wiXSYmKGMrPVwicm9vbXM6IFwiK2JbXCJ3aGVlbGNoYWlyOnJvb21zXCJdK1wiPGJyLz5cIik7XG4gICAgYltcIndoZWVsY2hhaXI6cGxhY2VzXCJdJiYoYys9XCJwbGFjZXM6IFwiK2JbXCJ3aGVlbGNoYWlyOnBsYWNlc1wiXStcIjxici8+XCIpO2JbXCJjZW50OnBsYWNlc1wiXSYmKGMrPVwicGxhY2VzOiBcIitiW1wid2hlZWxjaGFpcjpwbGFjZXNcIl0rXCI8YnIvPlwiKTtiW1wicmFtcDp3aGVlbGNoYWlyXCJdJiYoYys9XCJyYW1wOiBcIitiW1wicmFtcDp3aGVlbGNoYWlyXCJdK1wiPGJyLz5cIik7YltcImNhcGFjaXR5OmRpc2FibGVkXCJdJiYoYys9XCJjYXBhY2l0eSBwYXJraW5nOiBcIit0cmFuc2xhdGUoYltcImNhcGFjaXR5OmRpc2FibGVkXCJdKStcIjxici8+XCIpO2JbXCJ0b2lsZXRzOndoZWVsY2hhaXJcIl0mJihjKz1cInRvaWxldHM6IFwiK3RyYW5zbGF0ZShiW1widG9pbGV0czp3aGVlbGNoYWlyXCJdKStcIjxici8+XCIpO2IuY2VudHJhbGtleSYmKGMrPVwiY2VudHJhbGtleTogXCIrYi5jZW50cmFsa2V5K1wiPGJyLz5cIik7Yi5ub3RlJiYoYys9Yi5ub3RlK1wiPGJyLz5cIik7Yi5kZXNjcmlwdGlvbiYmKGMrPWIuZGVzY3JpcHRpb24rXCI8YnIvPlwiKTtcbiAgICBiLm9wZXJhdG9yJiYoYys9XCJvcGVyYXRvcjogXCIrYi5vcGVyYXRvcitcIjxici8+XCIpO2IucmVmJiYoYys9XCJyZWZlcmVuY2U6IFwiK2IucmVmK1wiPGJyLz5cIik7XCJ5ZXNcIj09Yi5saXQmJihjKz1cIlRoaXMgb2JqZWN0IGlzIGlsbHVpbWFudGVkLjxici8+XCIpO2Iuc2hvcCYmKGQ9XCJcIixiLmJyYW5kJiYoZCs9XCJicmFuZDogXCIrYi5icmFuZCtcIjxici8+XCIpLGIuc2VsbHMmJihkKz1cInNlbGxzOiBcIitiLnNlbGxzK1wiPGJyLz5cIiksYi5vcmlnaW4mJihkKz1cInNvdXJjZSBtYXJrZXQ6IFwiK2Iub3JpZ2luK1wiPGJyLz5cIiksXCJ5ZXNcIj09Yi53aG9sZXNhbGUmJihkKz1cImRpc3RyaWJ1dG9yOiB5ZXM8YnIvPlwiKSxcIlwiIT1kJiYoYys9J2Z1cnRoZXIgcGFydGljdWxhcnM6IDxici8+PGRpdiBjbGFzcz1cImM0Z19zaG9wX3RleHRcIj4nK2QrXCI8L2Rpdj48YnIvPlwiKSk7YSYmKGQ9YSx0cmltKGQpLGQ9ZC5yZXBsYWNlKC9cXC4vLFwiL1wiKSxjPWMrXCI8YnIvPlwiKygnT1NNOiAgICA8YSBocmVmPVwiaHR0cDovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy8nK1xuICAgICAgICBkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj5PcGVuU3RyZWV0TWFwIGxpbms8L2E+PGJyLz4nKSk7cmV0dXJuIGM9JzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfZm9vdGVyXCI+JytjK1wiPC9kaXY+XCJ9XG5leHBvcnQgZnVuY3Rpb24gZm5HZXRUcmFuc2xhdGVfVHlwZShiKXt2YXIgYT1cIlwiO2lmKFwiZG9jdG9yc1wiPT1iLmFtZW5pdHl8fFwiZG9jdG9yXCI9PWIuaGVhbHRoY2FyZSlhKz1cImRvY3Rvcjxici8+XCI7aWYoXCJob3NwaXRhbFwiPT1iLmFtZW5pdHl8fFwiY2xpbmljXCI9PWIuYW1lbml0eXx8XCJob3NwaXRhbFwiPT1iLmhlYWx0aGNhcmV8fFwiY2xpbmljXCI9PWIuaGVhbHRoY2FyZSlhPVwieWVzXCI9PWIuZW1lcmdlbmN5P2ErXCJob3NwaXRhbCB3aXRoIGVtZXJnZW5jeSBmYWNpbGl0aWVzPGJyLz5cIjphK1wiaG9zcGl0YWw8YnIvPlwiO1wiZGVudGlzdFwiPT1iLmFtZW5pdHkmJihhKz1cImRlbnRpc3Q8YnIvPlwiKTtpZihcInBoYXJtYWN5XCI9PWIuYW1lbml0eXx8XCJwaGFybWFjeVwiPT1iW1wiaGVhbHRoX2ZhY2lsaXR5OnR5cGVcIl0pYSs9XCJwaGFybWFjeTxici8+XCI7aWYoXCJwaHlzaW90aGVyYXBpc3RcIj09Yi5oZWFsdGhjYXJlfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6cGh5c2lvdGhlcmFweVwiXSlhKz1cInBoeXNpb3RoZXJhcGlzdDxici8+XCI7XG4gICAgaWYoXCJvY2N1cGF0aW9uYWxfdGhlcmFwaXN0XCI9PWIuaGVhbHRoY2FyZXx8XCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsaXR5Om9jY3VwYXRpb25hbF90aGVyYXB5XCJdfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvY2N1cGF0aW9uYWxfdGhlcmFweVwiXSlhKz1cIm9jY3VwYXRpb25hbF90aGVyYXBpc3Q8YnIvPlwiO2lmKFwicHN5Y2hvdGhlcmFwaXN0XCI9PWIuaGVhbHRoY2FyZXx8XCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsaXR5OnBzeWNob3RoZXJhcHlcIl0pYSs9XCJwc3ljaG90aGVyYXBpc3Q8YnIvPlwiO1wiYWx0ZXJuYXRpdmVcIj09Yi5oZWFsdGhjYXJlJiYoYSs9XCJhbHRlcm5hdGl2ZTxici8+XCIpO1wibWlkd2lmZVwiPT1iLmhlYWx0aGNhcmUmJihhKz1cIm1pZHdpZmU8YnIvPlwiKTtpZihcInNwZWVjaF90aGVyYXBpc3RcIj09Yi5oZWFsdGhjYXJlfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6c3BlZWNoX3RoZXJhcHlcIl0pYSs9XCJzcGVlY2hfdGhlcmFwaXN0PGJyLz5cIjtcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6bXVzaWNfdGhlcmFweVwiXSYmXG4gICAgKGErPVwibXVzaWNfdGhlcmFweTxici8+XCIpO1widmV0ZXJpbmFyeVwiPT1iLmFtZW5pdHkmJihhKz1cInZldGVyaW5hcnk8YnIvPlwiKTtcImZpcmVfc3RhdGlvblwiPT1iLmFtZW5pdHkmJihhKz1cImZpcmUgc3RhdGlvbjxici8+XCIpO1wiZmlyZV9leHRpbmd1aXNoZXJcIj09Yi5lbWVyZ2VuY3kmJihhKz1cImZpcmUgZXh0aW5ndWlzaGVyPGJyLz5cIik7XCJhZWRcIj09Yi5lbWVyZ2VuY3kmJihhKz1cImFlZDxici8+XCIpO1wiZGVmaWJyaWxsYXRvclwiPT1iLmVtZXJnZW5jeSYmKGErPVwiZGVmaWJyaWxsYXRvcjxici8+XCIpO1wicGhvbmVcIj09Yi5lbWVyZ2VuY3kmJihhKz1cImNhbGwgYm94PGJyLz5cIik7XCJwb2xpY2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJwb2xpY2U8YnIvPlwiKTtcImFtYnVsYW5jZV9zdGF0aW9uXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJhbWJ1bGFuY2Ugc3RhdGlvbjxici8+XCIpO1widGVjaG5pY2FsXCI9PWIuZW1lcmdlbmN5X3NlcnZpY2UmJihhKz1cInRlY2huaWNhbDxici8+XCIpO1wid2F0ZXJcIj09Yi5lbWVyZ2VuY3lfc2VydmljZSYmXG4gICAgKGErPVwid2F0ZXI8YnIvPlwiKTtcImJheXdhdGNoXCI9PWIud2F0ZXJ3YXkmJihhKz1cImJheXdhdGNoPGJyLz5cIik7XCJhaXJcIj09Yi5lbWVyZ2VuY3lfc2VydmljZSYmKGErPVwicmVzY3VlIGhlbGljb3B0ZXI8YnIvPlwiKTtcImVtZXJnZW5jeV9hY2Nlc3NfcG9pbnRcIj09Yi5oaWdod2F5JiYoYSs9XCJlbWVyZ2VuY3kgYWNjZXNzIHBvaW50PGJyLz5cIik7aWYoXCJsaWZlYm9hdF9zdGF0aW9uXCI9PWIuYW1lbml0eXx8XCJsaWZlYm9hdF9zdGF0aW9uXCI9PWIuZW1lcmdlbmN5KWErPVwibGlmZWJvYXQgc3RhdGlvbjxici8+XCI7XCJsaWZlX3JpbmdcIj09Yi5lbWVyZ2VuY3kmJihhKz1cImxpZmUgcmluZzxici8+XCIpO1wic2lyZW5cIj09Yi5lbWVyZ2VuY3kmJihhKz1cInNpcmVuPGJyLz5cIik7XCJsaWZlX3JpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJsaWZlIHJpbmc8YnIvPlwiKTtcInJlc2N1ZV9zdGF0aW9uXCI9PWIuYW1lbml0eSYmKGErPVwicmVzY3VlIHN0YXRpb248YnIvPlwiKTtcImZpcmVfaHlkcmFudFwiPT1iLmVtZXJnZW5jeSYmXG4gICAgKFwidW5kZXJncm91bmRcIj09YltcImZpcmVfaHlkcmFudDp0eXBlXCJdP2ErPVwidW5kZXJncm91bmQgaHlkcmFudDxici8+XCI6XCJwaWxsYXJcIj09YltcImZpcmVfaHlkcmFudDp0eXBlXCJdP2ErPVwicGlsbGFyIGh5ZHJhbnQ8YnIvPlwiOlwid2FsbFwiPT1iW1wiZmlyZV9oeWRyYW50OnR5cGVcIl0/YSs9XCJ3YWxsIGh5ZHJhbnQ8YnIvPlwiOlwicG9uZFwiPT1iW1wiZmlyZV9oeWRyYW50OnR5cGVcIl0mJihhKz1cInN1Y3Rpb24gcG9pbnQ8YnIvPlwiKSk7XCJzdWN0aW9uX3BvaW50XCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJzdWN0aW9uIHBvaW50PGJyLz5cIik7XCJmaXJlX3dhdGVyX3BvbmRcIj09Yi5lbWVyZ2VuY3kmJihhKz1cImZpcmUgcHJvdGVjdGlvbiBwb25kPGJyLz5cIik7XCJtb3VudGFpblwiPT1iLmVtZXJnZW5jeV9zZXJ2aWNlJiYoYSs9XCJtb3VudGFpbiByZXNjdWUgc2VydmljZTxici8+XCIpO1wid2F0ZXJfdGFua1wiPT1iLmVtZXJnZW5jeSYmKGErPVwiZmlyZSB3YXRlciB0YW5rPGJyLz5cIik7XCJjb250YWluZXJcIj09Yi5yZWN5Y2xpbmdfdHlwZSYmXG4gICAgKGErPVwiUmVjeWNsaW5nIGNvbnRhaW5lcjxici8+XCIpO1wicmVjeWNsaW5nXCI9PWIuYW1lbml0eSYmXCJ5ZXNcIj09YltcInJlY3ljbGluZzpleGNyZW1lbnRcIl18fFwicHVtcC1vdXRcIj09YltcInNlYW1hcms6c21hbGxfY3JhZnRfZmFjaWxpdHk6Y2F0ZWdvcnlcIl0/YSs9XCJzdWN0aW9uIHN0YXRpb248YnIvPlwiOlwicmVjeWNsaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiIGJ1eWJhY2sgY2VudHJlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6cGVzY2V0YXJpYW5cIl0/YSs9XCJwZXNjZXRhcmlhbiBhdmFpbGFibGU8YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpwZXNjZXRhcmlhblwiXSYmKGErPVwianVzdCBwZXNjZXRhcmlhbjxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OnZlZ2V0YXJpYW5cIl0/YSs9XCJ2ZWdldGFyaWFuIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnZlZ2V0YXJpYW5cIl0mJihhKz1cImp1c3QgdmVnZXRhcmlhbjxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OmxhY3RvX3ZlZ2V0YXJpYW5cIl0/YSs9XCJsYWN0b192ZWdldGFyaWFuIGF2YWlsYWJsZTxici8+XCI6XG4gICAgICAgIFwib25seVwiPT1iW1wiZGlldDpsYWN0b192ZWdldGFyaWFuXCJdJiYoYSs9XCJqdXN0IGxhY3RvIHZlZ2V0YXJpYW48YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpvdm9fdmVnZXRhcmlhblwiXT9hKz1cIm92byB2ZWdldGFyaWFuIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0Om92b192ZWdldGFyaWFuXCJdJiYoYSs9XCJqdXN0IG92b192ZWdldGFyaWFuPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6dmVnYW5cIl0/YSs9XCJ2ZWdhbiBhdmFpbGFibGU8YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDp2ZWdhblwiXSYmKGErPVwianVzdCB2ZWdhbjxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OmZydWl0YXJpYW5cIl0/YSs9XCJmcnVpdGFyaWFuIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmZydWl0YXJpYW5cIl0mJihhKz1cImh1c3QgZnJ1aXRhcmlhbjxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OnJhd1wiXT9hKz1cInJhdyBhdmFpbGFpYmU8YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpyYXdcIl0mJihhKz1cImp1c3QgcmF3PGJyLz5cIik7XG4gICAgXCJ5ZXNcIj09YltcImRpZXQ6Z2x1dGVuX2ZyZWVcIl0/YSs9XCJnbHV0ZW4gZnJlZSBhdmFpbGFibGU8YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpnbHV0ZW5fZnJlZVwiXSYmKGErPVwianVzdCBnbHV0ZW4gZnJlZTxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OmRhaXJ5X2ZyZWVcIl0/YSs9XCJkYWlyeSBmcmVlIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmRhaXJ5X2ZyZWVcIl0mJihhKz1cImp1c3QgZGFpcnkgZnJlZTxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OmxhY3Rvc2VfZnJlZVwiXT9hKz1cImxhY3Rvc2UgZnJlZSBhdmFpbGFibGU8YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpsYWN0b3NlX2ZyZWVcIl0mJihhKz1cImp1c3QgbGFjdG9zZSBmcmVlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6aGFsYWxcIl0/YSs9XCJoYWxhbCBhdmFpbGFibGU8YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpoYWxhbFwiXSYmKGErPVwianVzdCBoYWxhbDxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0Omtvc2hlclwiXT9hKz1cImtvc2hlciBhdmFpbGFibGU8YnIvPlwiOlxuICAgICAgICBcIm9ubHlcIj09YltcImRpZXQ6a29zaGVyXCJdJiYoYSs9XCJqdXN0IGtvc2hlcjxici8+XCIpO1wicHViXCI9PWIuYW1lbml0eSYmKGErPVwicHViPGJyLz5cIik7XCJiYXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJiYXI8YnIvPlwiKTtcInllc1wiPT1iLmZyb3plbl95b2d1cnQmJihhKz1cImZyb3plbiB5b2d1cnQ8YnIvPlwiKTtcInllc1wiPT1iLnNsdXNoX2ljZSYmKGErPVwic2x1c2ggaWNlPGJyLz5cIik7XCJ5ZXNcIj09Yi5jYWtlJiYoYSs9XCJjYWtlPGJyLz5cIik7XCJ5ZXNcIj09Yi5jb2ZmZWUmJihhKz1cImNvZmZlZTxici8+XCIpO1wieWVzXCI9PWIuZHJpbmtzJiYoYSs9XCJkcmlua3M8YnIvPlwiKTtcImJpZXJnYXJ0ZW5cIj09Yi5hbWVuaXR5JiYoYSs9XCJiaWVyZ2FydGVuPGJyLz5cIik7XCJyZXN0YXVyYW50XCI9PWIuYW1lbml0eSYmKGErPVwicmVzdGF1cmFudDxici8+XCIpO1wiZmFzdF9mb29kXCI9PWIuYW1lbml0eSYmKGErPVwiZmFzdCBmb29kPGJyLz5cIik7aWYoKFwiY2FmZVwiPT1iLmFtZW5pdHl8fFwiY29mZmVlX3Nob3BcIj09Yi5hbWVuaXR5KSYmXG4gICAgICAgIFwiaWNlX2NyZWFtXCIhPWIuY3Vpc2luZSlhKz1cImNhZmU8YnIvPlwiO2lmKFwiY2FmZVwiPT1iLmFtZW5pdHkmJlwiaWNlX2NyZWFtXCI9PWIuY3Vpc2luZXx8XCJpY2VfY3JlYW1cIj09Yi5hbWVuaXR5KWErPVwiaWNlIGNyZWFtPGJyLz5cIjtcImFscGluZV9odXRcIj09Yi50b3VyaXNtJiYoYSs9XCJhbHBpbmUgaHV0PGJyLz5cIik7XCJhcXVhcml1bVwiPT1iLnRvdXJpc20mJihhKz1cImFxdWFyaXVtPGJyLz5cIik7XCJhcGFydG1lbnRcIj09Yi50b3VyaXNtJiYoYSs9XCJhcGFydG1lbnQ8YnIvPlwiKTtcImF0dHJhY3Rpb25cIj09Yi50b3VyaXNtJiYoYSs9XCJhdHRyYWN0aW9uPGJyLz5cIik7XCJhcnR3b3JrXCI9PWIudG91cmlzbSYmKGErPVwiYXJ0d29yazxici8+XCIpO1wiY2FtcF9zaXRlXCI9PWIudG91cmlzbSYmKGErPVwiY2FtcCBzaXRlPGJyLz5cIik7XCJjYXJhdmFuX3NpdGVcIj09Yi50b3VyaXNtJiYoYSs9XCJjYXJhdmFuIHNpdGU8YnIvPlwiKTtcImNoYWxldFwiPT1iLnRvdXJpc20mJihhKz1cImNoYWxldDxici8+XCIpO1wiZ2FsbGVyeVwiPT1cbiAgICBiLnRvdXJpc20mJihhKz1cImdhbGxlcnk8YnIvPlwiKTtcImd1ZXN0X2hvdXNlXCI9PWIudG91cmlzbSYmKGErPVwiZ3Vlc3QgaG91c2U8YnIvPlwiKTtcImhvc3RlbFwiPT1iLnRvdXJpc20mJihhKz1cImhvc3RlbDxici8+XCIpO1wiaG90ZWxcIj09Yi50b3VyaXNtJiYoYSs9XCJob3RlbDxici8+XCIpO1wibW90ZWxcIj09Yi50b3VyaXNtJiYoYSs9XCJtb3RlbDxici8+XCIpO1wibXVzZXVtXCI9PWIudG91cmlzbSYmKGErPVwibXVzZXVtPGJyLz5cIik7XCJwaWNuaWNfc2l0ZVwiPT1iLnRvdXJpc20mJihhKz1cInBpY25pYyBzaXRlPGJyLz5cIik7XCJ0aGVtZV9wYXJrXCI9PWIudG91cmlzbSYmKGErPVwidGhlbWUgcGFyazxici8+XCIpO1widmlld3BvaW50XCI9PWIudG91cmlzbSYmKGErPVwidmlld3BvaW50PGJyLz5cIik7XCJ3aWxkZXJuZXNzX2h1dFwiPT1iLnRvdXJpc20mJihhKz1cIndpbGRlcm5lc3NfaHV0PGJyLz5cIik7XCJ3aW5lX2NlbGxhclwiPT1iLnRvdXJpc20mJihhKz1cIndpbmUgY2VsbGFyPGJyLz5cIik7XCJ6b29cIj09Yi50b3VyaXNtJiZcbiAgICAoYSs9XCJ6b288YnIvPlwiLFwiZW5jbG9zdXJlXCI9PWIuem9vJiYoYSs9XCJlbmNsb3N1cmU8YnIvPlwiKSxcInBldHRpbmdfem9vXCI9PWIuem9vJiYoYSs9XCJwZXR0aW5nIHpvbzxici8+XCIpLFwiZmFsY29ucnlcIj09Yi56b28mJihhKz1cImZhbGNvbnJ5PGJyLz5cIikpO1widHJhaWxfcmlkaW5nX3N0YXRpb25cIj09Yi50b3VyaXNtJiYoYSs9XCJ0cmFpbCByaWRpbmcgc3RhdGlvbjxici8+XCIpO1wiZmlzaGluZ1wiPT1iLmNsdWImJihhKz1cImZpc2hpbmcgY2x1Yjxici8+XCIpO1wic3BvcnRcIj09Yi5jbHViJiZcImZpc2hpbmdcIj09Yi5zcG9ydCYmKGErPVwiZmlzaGluZyBjbHViPGJyLz5cIik7XCJhbWF0ZXVyX3JhZGlvXCI9PWIuY2x1YiYmKGErPVwiYW1hdGV1ciByYWRpbyBjbHViPGJyLz5cIik7XCJhcnRcIj09Yi5jbHViJiYoYSs9XCJhcnQgY2x1Yjxici8+XCIpO1wiYXN0cm9ub215XCI9PWIuY2x1YiYmKGErPVwiYXN0cm9ub215IGNsdWI8YnIvPlwiKTtcImF1dG9tb2JpbGVcIj09Yi5jbHViJiYoYSs9XCJhdXRvbW9iaWxlIGNsdWI8YnIvPlwiKTtcbiAgICBcImJvYXJkX2dhbWVzXCI9PWIuY2x1YiYmKGErPVwiYm9hcmQgZ2FtZXMgY2x1Yjxici8+XCIpO1wiY2FyZF9nYW1lc1wiPT1iLmNsdWImJihhKz1cImNhcmQgZ2FtZXMgY2x1Yjxici8+XCIpO1wiY2hhcml0eVwiPT1iLmNsdWImJihhKz1cImNoYXJpdHkgY2x1Yjxici8+XCIpO1wiY2hlc3NcIj09Yi5jbHViJiYoYSs9XCJjaGVzcyBjbHViPGJyLz5cIik7XCJjaW5lbWFcIj09Yi5jbHViJiYoYSs9XCJjaW5lbWEgY2x1Yjxici8+XCIpO1wiY29va2luZ1wiPT1iLmNsdWImJihhKz1cImNvb2tpbmcgY2x1Yjxici8+XCIpO1wiY3VsdHVyZVwiPT1iLmNsdWImJihhKz1cImN1bHR1cmUgY2x1Yjxici8+XCIpO1wiZG9pdHlvdXJzZWxmXCI9PWIuY2x1YiYmKGErPVwiZG9pdHlvdXJzZWxmIGNsdWI8YnIvPlwiKTtcImVxdWVzdHJpYW5cIj09Yi5jbHViJiYoYSs9XCJlcXVlc3RyaWFuIGNsdWI8YnIvPlwiKTtcImV0aG5pY1wiPT1iLmNsdWImJihhKz1cImV0aG5pYyBjbHViPGJyLz5cIik7XCJmYW5cIj09Yi5jbHViJiYoYSs9XCJmYW4gY2x1Yjxici8+XCIpO1wiZnJlZW1hc29ucnlcIj09XG4gICAgYi5jbHViJiYoYSs9XCJmcmVlbWFzb25yeSBjbHViPGJyLz5cIik7XCJnYW1lXCI9PWIuY2x1YiYmKGErPVwiZ2FtZSBjbHViPGJyLz5cIik7XCJoaXN0b3J5XCI9PWIuY2x1YiYmKGErPVwiaGlzdG9yeSBjbHViPGJyLz5cIik7XCJodW50aW5nXCI9PWIuY2x1YiYmKGErPVwiaHVudGluZyBjbHViPGJyLz5cIik7XCJsaW51eFwiPT1iLmNsdWImJihhKz1cImxpbnV4IGNsdWI8YnIvPlwiKTtcIm1vdG9yY3ljbGVcIj09Yi5jbHViJiYoYSs9XCJtb3RvcmN5Y2xlIGNsdWI8YnIvPlwiKTtcIm11c2ljXCI9PWIuY2x1YiYmKGErPVwibXVzaWMgY2x1Yjxici8+XCIpO1wibmF0dXJlXCI9PWIuY2x1YiYmKGErPVwibmF0dXJlIGNsdWI8YnIvPlwiKTtcIm51ZGlzbVwiPT1iLmNsdWImJihhKz1cIm51ZGlzbSBjbHViPGJyLz5cIik7XCJwaG90b2dyYXBoeVwiPT1iLmNsdWImJihhKz1cInBob3RvZ3JhcGh5IGNsdWI8YnIvPlwiKTtcInBvbGl0aWNzXCI9PWIuY2x1YiYmKGErPVwicG9saXRpY3MgY2x1Yjxici8+XCIpO1wicmVsaWdpb25cIj09Yi5jbHViJiYoYSs9XCJyZWxpZ2lvbiBjbHViPGJyLz5cIik7XG4gICAgXCJzY291dFwiPT1iLmNsdWImJihhKz1cInNjb3V0IGNsdWI8YnIvPlwiKTtcInNtb2tlXCI9PWIuY2x1YiYmKGErPVwic21va2UgY2x1Yjxici8+XCIpO1wic3BvcnRcIj09Yi5jbHViJiYoYSs9XCJzcG9ydCBjbHViPGJyLz5cIik7XCJ0aGVhdHJlXCI9PWIuY2x1YiYmKGErPVwidGhlYXRyZSBjbHViPGJyLz5cIik7XCJ2ZXRlcmFuc1wiPT1iLmNsdWImJihhKz1cInZldGVyYW5zIGNsdWI8YnIvPlwiKTtcImFtdXNlbWVudF9hcmNhZGVcIj09Yi5sZWlzdXJlJiYoYSs9XCJwZW5ueSBhcmNhZGUgLyBnYW1ibGluZyBoYWxsPGJyLz5cIik7XCJiZWFjaF9yZXNvcnRcIj09Yi5sZWlzdXJlJiYoYSs9XCJiZWFjaCByZXNvcnQ8YnIvPlwiKTtcImJpcmRfaGlkZVwiPT1iLmxlaXN1cmUmJihhKz1cImJpcmQgaGlkZTxici8+XCIpO1wiY29tbW9uXCI9PWIubGVpc3VyZSYmKGErPVwiY29tbW9uPGJyLz5cIik7XCJjbHViXCI9PWIubGVpc3VyZSYmKGErPVwiY2x1Yjxici8+XCIpO1wiZGFuY2VcIj09Yi5sZWlzdXJlJiYoYSs9XCJkYW5jZTxici8+XCIpO1wiZG9nX3BhcmtcIj09XG4gICAgYi5sZWlzdXJlJiYoYSs9XCJkb2dfcGFyazxici8+XCIpO1wiZmlyZXBpdFwiPT1iLmxlaXN1cmUmJihhKz1cImZpcmVwaXQ8YnIvPlwiKTtcImZpc2hpbmdcIj09Yi5sZWlzdXJlJiYoYSs9XCJmaXNoaW5nPGJyLz5cIik7XCJnYXJkZW5cIj09Yi5sZWlzdXJlJiYoYSs9XCJnYXJkZW48YnIvPlwiKTtcImdvbGZfY291cnNlXCI9PWIubGVpc3VyZSYmKGErPVwiZ29sZiBjb3Vyc2U8YnIvPlwiKTtcImhhY2tlcnNwYWNlXCI9PWIubGVpc3VyZSYmKGErPVwiaGFja2Vyc3BhY2U8YnIvPlwiKTtcImhvcnNlX3JpZGluZ1wiPT1iLmxlaXN1cmUmJihhKz1cImhvcnNlIHJpZGluZzxici8+XCIpO1wiaWNlX3JpbmtcIj09Yi5sZWlzdXJlJiYoYSs9XCJpY2Ugcmluazxici8+XCIpO1wibmF0dXJlX3Jlc2VydmVcIj09Yi5sZWlzdXJlJiYoYSs9XCJuYXR1cmUgcmVzZXJ2ZTxici8+XCIpO1wicGFya1wiPT1iLmxlaXN1cmUmJihhKz1cInBhcms8YnIvPlwiKTtcIm1pbmlhdHVyZV9nb2xmXCI9PWIubGVpc3VyZSYmKGErPVwibWluaWF0dXJlIGdvbGY8YnIvPlwiKTtcInBpdGNoXCI9PVxuICAgIGIubGVpc3VyZSYmKGErPVwicGl0Y2g8YnIvPlwiKTtcInBpdGNoXCI9PWIubGVpc3VyZSYmXCJ5ZXNcIj09Yi5idWlsZGluZyYmKGErPVwiZ3ltPGJyLz5cIik7XCJwbGF5Z3JvdW5kXCI9PWIubGVpc3VyZSYmXCJ5ZXNcIj09Yi5idWlsZGluZz9hKz1cInBsYXlncm91bmQ8YnIvPlwiOlwicGxheWdyb3VuZFwiPT1iLmxlaXN1cmUmJihhKz1cInBsYXlncm91bmQ8YnIvPlwiKTtcInNvY2lhbF9jbHViXCI9PWIubGVpc3VyZSYmKGErPVwic29jaWFsIGNsdWI8YnIvPlwiKTtcInNwYVwiPT1iLmxlaXN1cmUmJihhKz1cInNwYTxici8+XCIpO1wic3BvcnRzX2NlbnRyZVwiPT1iLmxlaXN1cmUmJihhKz1cInNwb3J0cyBjZW50cmU8YnIvPlwiKTtcImNsaW1iaW5nX2FkdmVudHVyZVwiPT1iLnNwb3J0JiYoYSs9XCJjbGltYmluZyBhZHZlbnR1cmU8YnIvPlwiKTtcInN0YWRpdW1cIj09Yi5sZWlzdXJlJiYoYSs9XCJzdGFkaXVtPGJyLz5cIik7XCJzd2ltbWluZ19wb29sXCI9PWIubGVpc3VyZSYmKGErPVwic3dpbW1pbmcgcG9vbDxici8+XCIpO1widHJhY2tcIj09XG4gICAgYi5sZWlzdXJlJiYoYSs9XCJ0cmFjazxici8+XCIpO1wid2F0ZXJfcGFya1wiPT1iLmxlaXN1cmUmJihhKz1cIndhdGVyIHBhcms8YnIvPlwiKTtcIndpbGRsaWZlX2hpZGVcIj09Yi5sZWlzdXJlJiYoYSs9XCJ3aWxkbGlmZSBoaWRlPGJyLz5cIik7XCJhZHVsdF9nYW1pbmdfY2VudHJlXCI9PWIubGVpc3VyZSYmKGErPVwiYWR1bHQgZ2FtaW5nX2NlbnRyZTxici8+XCIpO1wiYm93bGluZ19hbGxleVwiPT1iLmxlaXN1cmUmJlwiMTBwaW5cIj09Yi5zcG9ydCYmKGErPVwiMTBwaW4gYm93bGluZ19hbGxleTxici8+XCIpO1wiYm93bGluZ19hbGxleVwiPT1iLmxlaXN1cmUmJlwiOXBpblwiPT1iLnNwb3J0JiYoYSs9XCI5cGluIGJvd2xpbmdfYWxsZXk8YnIvPlwiKTtpZihcImthcnRpbmdcIj09Yi5zcG9ydHx8XCJtb3RvclwiPT1iLnNwb3J0KWErPVwia2FydGluZzxici8+XCI7aWYoXCJkYXJ0c1wiPT1iLnNwb3J0fHxcImRhcnRcIj09Yi5zcG9ydClhKz1cIkRhcnRzPGJyLz5cIjtpZihiW1wicGlzdGU6dHlwZVwiXSlzd2l0Y2goYltcInBpc3RlOnR5cGVcIl0pe2Nhc2UgXCJza2l0b3VyXCI6YSs9XG4gICAgICAgIFwic2tpdG91cjxici8+XCI7YnJlYWs7Y2FzZSBcImRvd25oaWxsXCI6YSs9XCJkb3duaGlsbDxici8+XCI7YnJlYWs7Y2FzZSBcInNsZWRcIjphKz1cInNsZWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJub3JkaWNcIjphKz1cIm5vcmRpYzxici8+XCI7YnJlYWs7Y2FzZSBcImhpa2VcIjphKz1cImhpa2U8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzbm93X3BhcmtcIjphKz1cInNub3cgcGFyazxici8+XCJ9aWYoYi5zcG9ydClzd2l0Y2goYi5zcG9ydCl7Y2FzZSBcInN1cmZpbmdcIjphKz1cInN1cmZpbmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJraXRlc3VyZmluZ1wiOmErPVwia2l0ZXN1cmZpbmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ3YXRlcl9za2lcIjphKz1cIndhdGVyIHNraTxici8+XCJ9aWYoYi5hZXJpYWx3YXkpc3dpdGNoKGIuYWVyaWFsd2F5KXtjYXNlIFwiY2FibGVfYmFyXCI6YSs9XCJjYWJsZSBiYXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJnb25kb2xhXCI6YSs9XCJnb25kb2xhPGJyLz5cIjticmVhaztjYXNlIFwiY2hhaXJfbGlmdFwiOmErPVwiY2hhaXIgbGlmdDxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJtaXhlZF9saWZ0XCI6YSs9XCJtaXhlZCBsaWZ0PGJyLz5cIjticmVhaztjYXNlIFwiZHJhZ19saWZ0XCI6YSs9XCJkcmFnIGxpZnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0LWJhclwiOmErPVwidC1iYXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0LWJhclwiOmErPVwidC1iYXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwbGF0dGVyXCI6YSs9XCJwbGF0dGVyPGJyLz5cIjticmVhaztjYXNlIFwicm9wZV90b3dcIjphKz1cInJvcGUgdG93PGJyLz5cIjticmVhaztjYXNlIFwibWFnaWNfY2FycGV0XCI6YSs9XCJtYWdpYyBjYXJwZXQ8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmtub3duXCJ9XCJtb3NxdWVcIj09Yi5idWlsZGluZyYmKGErPVwibW9zcXVlPGJyLz5cIik7XCJzeW5hZ29ndWVcIj09Yi5idWlsZGluZyYmKGErPVwic3luYWdvZ3VlPGJyLz5cIik7XCJ0ZW1wbGVcIj09Yi5idWlsZGluZyYmKGErPVwidGVtcGxlPGJyLz5cIik7XCJhcGFydG1lbnRzXCI9PWIuYnVpbGRpbmcmJihhKz1cImFwYXJ0bWVudHM8YnIvPlwiKTtcImZhcm1cIj09Yi5idWlsZGluZyYmXG4gICAgKGErPVwiZmFybTxici8+XCIpO1wiaG90ZWxcIj09Yi5idWlsZGluZyYmKGErPVwiaG90ZWw8YnIvPlwiKTtcImhvdXNlXCI9PWIuYnVpbGRpbmcmJihhKz1cImhvdXNlPGJyLz5cIik7XCJkZXRhY2hlZFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJkZXRhY2hlZDxici8+XCIpO1wicmVzaWRlbnRpYWxcIj09Yi5idWlsZGluZyYmKGErPVwicmVzaWRlbnRpYWw8YnIvPlwiKTtpZihcImRvbWl0b3J5XCI9PWIuYnVpbGRpbmd8fFwicmVzaWRlbnRpYWwgcGx1c1wiPT1iLmJ1aWxkaW5nKWErPVwiZG9taXRvcnk8YnIvPlwiO1widGVycmFjZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJ0ZXJyYWNlPGJyLz5cIik7XCJob3VzZWJvYXRcIj09Yi5idWlsZGluZyYmKGErPVwiaG91c2Vib2F0PGJyLz5cIik7XCJidW5nYWxvd1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJidW5nYWxvdzxici8+XCIpO1wic3RhdGljX2NhcmF2YW5cIj09Yi5idWlsZGluZyYmKGErPVwic3RhdGljIGNhcmF2YW48YnIvPlwiKTtcImNvbW1lcmNpYWxcIj09Yi5idWlsZGluZyYmKGErPVwiY29tbWVyY2lhbDxici8+XCIpO1xuICAgIFwicmV0YWlsXCI9PWIuYnVpbGRpbmcmJihhKz1cInJldGFpbDxici8+XCIpO1wid2FyZWhvdXNlXCI9PWIuYnVpbGRpbmcmJihhKz1cIndhcmVob3VzZTxici8+XCIpO1wiYmFrZWhvdXNlXCI9PWIuYnVpbGRpbmcmJihhKz1cImJha2Vob3VzZTxici8+XCIpO1wic2hyaW5lXCI9PWIuYnVpbGRpbmcmJihhKz1cInNocmluZTxici8+XCIpO1wiY2l2aWNcIj09Yi5idWlsZGluZyYmKGErPVwiY2l2aWM8YnIvPlwiKTtcInN0YWRpdW1cIj09Yi5idWlsZGluZyYmKGErPVwic3RhZGl1bTxici8+XCIpO1widHJhaW5fc3RhdGlvblwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJ0cmFpbiBzdGF0aW9uPGJyLz5cIik7XCJ1bml2ZXJzaXR5XCI9PWIuYnVpbGRpbmcmJihhKz1cInVuaXZlcnNpdHk8YnIvPlwiKTtcInB1YmxpY1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJwdWJsaWM8YnIvPlwiKTtcImJyaWRnZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJicmlkZ2U8YnIvPlwiKTtcImJ1bmtlclwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJidW5rZXI8YnIvPlwiKTtcImNhYmluXCI9PWIuYnVpbGRpbmcmJlxuICAgIChhKz1cImNhYmluPGJyLz5cIik7XCJjb25zZXJ2YXRvcnlcIj09Yi5idWlsZGluZyYmKGErPVwiY29uc2VydmF0b3J5PGJyLz5cIik7XCJjb25zdHJ1Y3Rpb25cIj09Yi5idWlsZGluZyYmKGErPVwiY29uc3RydWN0aW9uPGJyLz5cIik7XCJnYXJhZ2VcIj09Yi5idWlsZGluZyYmKGErPVwiZ2FyYWdlPGJyLz5cIik7XCJnYXJhZ2VzXCI9PWIuYnVpbGRpbmcmJihhKz1cImdhcmFnZXM8YnIvPlwiKTtcImdyZWVuaG91c2VcIj09Yi5idWlsZGluZyYmKGErPVwiZ3JlZW5ob3VzZTxici8+XCIpO1wiaGFuZ2FyXCI9PWIuYnVpbGRpbmcmJihhKz1cImhhbmdhcjxici8+XCIpO1wiaHV0XCI9PWIuYnVpbGRpbmcmJihhKz1cImh1dDxici8+XCIpO1wicGF2aWxsaW9uXCI9PWIuYnVpbGRpbmcmJihhKz1cInBhdmlsbGlvbjxici8+XCIpO1wicm9vZlwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJyb29mPGJyLz5cIik7XCJzaGVkXCI9PWIuYnVpbGRpbmcmJihhKz1cInNoZWQ8YnIvPlwiKTtcInRyYW5zZm9ybWVyX3Rvd2VyXCI9PWIuYnVpbGRpbmcmJihhKz1cInRyYW5zZm9ybWVyIHRvd2VyPGJyLz5cIik7XG4gICAgXCJzZXJ2aWNlXCI9PWIuYnVpbGRpbmcmJihhKz1cInNlcnZpY2U8YnIvPlwiKTtcImtpb3NrXCI9PWIuYnVpbGRpbmcmJihhKz1cImtpb3NrPGJyLz5cIik7XCJjYXJwb3J0XCI9PWIuYnVpbGRpbmcmJihhKz1cImNhcnBvcnQ8YnIvPlwiKTtcInJ1aW5zXCI9PWIuYnVpbGRpbmcmJihhKz1cInJ1aW5zPGJyLz5cIik7XCJnYW1ibGluZ1wiPT1iLmFtZW5pdHkmJihhKz1cInBlbm55IGFyY2FkZTxici8+XCIpO1wibGlicmFyeVwiPT1iLmFtZW5pdHkmJihhKz1cImxpYnJhcnk8YnIvPlwiKTtcImZvdW50YWluXCI9PWIuYW1lbml0eSYmKGErPVwiZm91bnRhaW48YnIvPlwiKTtcImF0dHJhY3Rpb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJhdHRyYWN0aW9uPGJyLz5cIik7aWYoXCJzb2NpYWxfY2VudHJlXCI9PWIuYW1lbml0eXx8XCJjbHViXCI9PWIuYW1lbml0eSlhKz1cInNvY2lhbCBjZW50cmU8YnIvPlwiO1widG93bmhhbGxcIj09Yi5hbWVuaXR5JiYoYSs9XCJ0b3duaGFsbDxici8+XCIpO1wiYmVuY2hcIj09Yi5hbWVuaXR5JiYoYSs9XCJiZW5jaDxici8+XCIpO1xuICAgIGlmKFwiZ3JhdmVfeWFyZFwiPT1iLmFtZW5pdHl8fFwiY2VtZXRlcnlcIj09Yi5sYW5kdXNlKWErPVwiZ3JhdmUgeWFyZDxici8+XCI7XCJwb3N0X2JveFwiPT1iLmFtZW5pdHkmJihhKz1cInBvc3QgYm94PGJyLz5cIik7XCJwb3N0X29mZmljZVwiPT1iLmFtZW5pdHkmJihhKz1cInBvc3Qgb2ZmaWNlPGJyLz5cIik7XCJ0ZWxlcGhvbmVcIj09Yi5hbWVuaXR5JiYoYSs9XCJ0ZWxlcGhvbmU8YnIvPlwiKTtcImF0bVwiPT1iLmFtZW5pdHkmJihhKz1cImF0bTxici8+XCIpO1wiYmFua1wiPT1iLmFtZW5pdHkmJihhKz1cImJhbms8YnIvPlwiKTtcInRvaWxldHNcIj09Yi5hbWVuaXR5JiZcInllc1wiPT1iLmRpYXBlcj9hKz1cInRvaWxldHMgd2l0aCBkaWFwZXIgY2hhbmdpbmcgdGFibGU8YnIvPlwiOlwidG9pbGV0c1wiPT1iLmFtZW5pdHkmJihhKz1cInRvaWxldHM8YnIvPlwiKTtcInNjaG9vbFwiPT1iLmFtZW5pdHkmJlwiMVwiPT1iW1wiaXNjZWQ6bGV2ZWxcIl0/YSs9XCJwcmltYXJ5IHNjaG9vbDxici8+XCI6XCJzY2hvb2xcIj09Yi5hbWVuaXR5JiZcIjJcIj09YltcImlzY2VkOmxldmVsXCJdP1xuICAgICAgICBhKz1cInNlY29uZGFyeSBzY2hvb2w8YnIvPlwiOlwic2Nob29sXCI9PWIuYW1lbml0eSYmXCIzXCI9PWJbXCJpc2NlZDpsZXZlbFwiXT9hKz1cInNlY29uZGFyeSBzY2hvb2xzPGJyLz5cIjpcInNjaG9vbFwiPT1iLmFtZW5pdHkmJihhKz1cInNjaG9vbDxici8+XCIpO1wia2luZGVyZ2FydGVuXCI9PWIuYW1lbml0eSYmKGErPVwia2luZGVyZ2FydGVuPGJyLz5cIik7XCJpbnRlcm5ldF9jYWZlXCI9PWIuYW1lbml0eSYmKGErPVwiaW50ZXJuZXQgY2FmZTxici8+XCIpO1wiZGF5Y2FyZVwiPT1iLmFtZW5pdHkmJihhKz1cImRheWNhcmU8YnIvPlwiKTtcImNoaWxkY2FyZVwiPT1iLmFtZW5pdHkmJihhKz1cImNoaWxkY2FyZTxici8+XCIpO1widW5pdmVyc2l0eVwiPT1iLmFtZW5pdHkmJihhKz1cInVuaXZlcnNpdHk8YnIvPlwiKTtcImNvbGxlZ2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJjb2xsZWdlPGJyLz5cIik7XCJzaGVsdGVyXCI9PWIuYW1lbml0eSYmKGErPVwic2hlbHRlcjxici8+XCIpO1wiYmJxXCI9PWIuYW1lbml0eSYmKGErPVwiYmJxPGJyLz5cIik7XCJuaWdodGNsdWJcIj09XG4gICAgYi5hbWVuaXR5JiYoYSs9XCJuaWdodGNsdWI8YnIvPlwiKTtcImJpY3ljbGVfcGFya2luZ1wiPT1iLmFtZW5pdHkmJihhKz1cImJpY3ljbGUgcGFya2luZzxici8+XCIpO1wiYmljeWNsZV9yZW50YWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJiaWN5Y2xlIHJlbnRhbDxici8+XCIpO1wiYm9hdF9zaGFyaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiYm9hdCBzaGFyaW5nPGJyLz5cIik7XCJjYXJfc2hhcmluZ1wiPT1iLmFtZW5pdHkmJihhKz1cImNhciBzaGFyaW5nPGJyLz5cIik7XCJjaW5lbWFcIj09Yi5hbWVuaXR5JiYoYSs9XCJjaW5lbWE8YnIvPlwiKTtcInN3aW1taW5nX3Bvb2xcIj09Yi5hbWVuaXR5JiYoYSs9XCJzd2ltbWluZyBwb29sPGJyLz5cIik7aWYoXCJlbWJhc3N5XCI9PWIuYW1lbml0eXx8XCJlbWJhc3N5XCI9PWIuZGlwbG9tYXRpYylhKz1cImVtYmFzc3k8YnIvPlwiO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwiY29uc3VsYXRlXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwiY29uc3VsYXRlPGJyLz5cIik7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmXG4gICAgXCJjb25zdWxhdGVfZ2VuZXJhbFwiPT1iLmRpcGxvbWF0aWMmJihhKz1cImNvbnN1bGF0ZSBnZW5lcmFsPGJyLz5cIik7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmXCJob25vcmFyeV9jb25zdWxhdGVcIj09Yi5kaXBsb21hdGljJiYoYSs9XCJob25vcmFyeSBjb25zdWxhdGU8YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcInBlcm1hbmVudF9taXNzaW9uXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwicGVybWFuZW50IG1pc3Npb248YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcImRlbGVnYXRpb25cIj09Yi5kaXBsb21hdGljJiYoYSs9XCJkZWxlZ2F0aW9uPGJyLz5cIik7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmXCJoaWdoX2NvbW1pc3Npb25cIj09Yi5kaXBsb21hdGljJiYoYSs9XCJoaWdoIGNvbW1pc3Npb248YnIvPlwiKTtcIkJhcmZ1c3NwZmFkXCI9PWIuYW1lbml0eSYmKGErPVwiYmFyZWZvb2RwYXRoPGJyLz5cIik7XCJjYXNpbm9cIj09Yi5hbWVuaXR5JiYoYSs9XCJjYXNpbm88YnIvPlwiKTtcInNwYVwiPT1iLmFtZW5pdHkmJlxuICAgIChhKz1cInNwYTxici8+XCIpO1wic3RhYmxlc1wiPT1iLmFtZW5pdHkmJihhKz1cInN0YWJsZXM8YnIvPlwiKTtcIndhdGVyaW5nX3BsYWNlXCI9PWIuYW1lbml0eSYmKGErPVwid2F0ZXJpbmcgcGxhY2U8YnIvPlwiKTtcInllc1wiPT1iLndhdGVyaW5nX3BsYWNlJiYoYSs9XCJ3YXRlcmluZyBwbGFjZTxici8+XCIpO1wid2F0ZXJfcG9pbnRcIj09Yi5hbWVuaXR5JiYoYSs9XCJ3YXRlciBwb2ludDxici8+XCIpO1widGF4aVwiPT1iLmFtZW5pdHkmJihhKz1cInRheGk8YnIvPlwiKTtcImNhcl93YXNoXCI9PWIuYW1lbml0eSYmKGErPVwiY2FyIHdhc2g8YnIvPlwiKTtcImJyb3RoZWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJicm90aGVsPGJyLz5cIik7XCJzdHJpcGNsdWJcIj09Yi5hbWVuaXR5JiYoYSs9XCJzdHJpcGNsdWI8YnIvPlwiKTtcInN3aW5nZXJjbHViXCI9PWIuYW1lbml0eSYmKGErPVwic3dpbmdlcmNsdWI8YnIvPlwiKTtcInBsYW5ldGFyaXVtXCI9PWIuYW1lbml0eSYmKGErPVwicGxhbmV0YXJpdW08YnIvPlwiKTtcImNvdXJ0aG91c2VcIj09Yi5hbWVuaXR5JiZcbiAgICAoYSs9XCJjb3VydCBob3VzZTxici8+XCIpO1wiY3JlbWF0b3JpdW1cIj09Yi5hbWVuaXR5JiYoYSs9XCJjcmVtYXRvcml1bTxici8+XCIpO2lmKFwiY3J5cHRcIj09Yi5hbWVuaXR5fHxcImNyeXB0XCI9PWIuYnVpbGRpbmcpYSs9XCJjcnlwdDxici8+XCI7XCJodW50aW5nX3N0YW5kXCI9PWIuYW1lbml0eSYmKGErPVwiaHVudGluZyBzdGFuZDxici8+XCIpO1wicGhvdG9fYm9vdGhcIj09Yi5hbWVuaXR5JiYoYSs9XCJwaG90byBib290aDxici8+XCIpO1wicHJpc29uXCI9PWIuYW1lbml0eSYmKGErPVwicHJpc29uPGJyLz5cIik7XCJyYW5nZXJfc3RhdGlvblwiPT1iLmFtZW5pdHkmJihhKz1cInJhbmdlciBzdGF0aW9uPGJyLz5cIik7XCJyZWdpc3Rlcl9vZmZpY2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJyZWdpc3RlciBvZmZpY2U8YnIvPlwiKTtcIm1hcmtldHBsYWNlXCI9PWIuYW1lbml0eSYmKGErPVwibWFya2V0cGxhY2U8YnIvPlwiKTtcInNvbGFyaXVtXCI9PWIuYW1lbml0eSYmKGErPVwic29sYXJpdW08YnIvPlwiKTtcInNhdW5hXCI9PWIuYW1lbml0eSYmXG4gICAgKGErPVwic2F1bmE8YnIvPlwiKTtcInNob3dlclwiPT1iLmFtZW5pdHkmJihhKz1cInNob3dlcjxici8+XCIpO2lmKFwid2FzdGVfZGlzcG9zYWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJ3YXN0ZSBkaXNwb3NhbDxici8+XCIsYi53YXN0ZSkpc3dpdGNoKGErPVwiVHlwOiBcIixiLndhc3RlKXtjYXNlIFwidHJhc2hcIjphKz1cIkdlbmVyYWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvaWxcIjphKz1cIk9pbDxici8+XCI7YnJlYWs7Y2FzZSBcImRydWdzXCI6YSs9XCJQaGFybWFjZXV0aWNhbDxici8+XCI7YnJlYWs7Y2FzZSBcIm9yZ2FuaWNcIjphKz1cIk9yZ2FuaWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwbGFzdGljXCI6YSs9XCJQbGFzdGljPGJyLz5cIjticmVhaztjYXNlIFwicnViYmxlXCI6YSs9XCJSdWJibGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaWdhcmV0dGVzXCI6YSs9XCJDaWdhcmV0dGVzPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiR2VuZXJhbDxici8+XCJ9aWYoXCJ3YXN0ZV9iYXNrZXRcIj09Yi5hbWVuaXR5fHxcImRvZ19leGNyZW1lbnRcIj09Yi53YXN0ZSlhKz1cbiAgICAgICAgXCJkb2cgd2FzdGUgc3RhdGlvbjxici8+XCI7aWYoXCJzY291dF9jYW1wXCI9PWIuYW1lbml0eXx8XCJzY291dF9odXRcIj09Yi5hbWVuaXR5fHxcInNjb3V0X2hhbGxcIj09Yi5hbWVuaXR5KWErPVwic2NvdXQgY2FtcDxici8+XCI7XCJmZXJyeV90ZXJtaW5hbFwiPT1iLmFtZW5pdHkmJihhKz1cImZlcnJ5IHRlcm1pbmFsPGJyLz5cIik7XCJidXJlYXVfZGVfY2hhbmdlXCI9PWIuYW1lbml0eSYmKGErPVwiYnVyZWF1IGRlIGNoYW5nZTxici8+XCIpO1wieW91dGhfY2x1YlwiPT1iLmFtZW5pdHkmJihhKz1cInlvdXRoIGNsdWI8YnIvPlwiKTtcImZlc3RpdmFsX2dyb3VuZHNcIj09Yi5hbWVuaXR5JiYoYSs9XCJmZXN0aXZhbCBncm91bmRzPGJyLz5cIik7aWYoXCJ5ZXNcIj09Yi5vcGVuZmlyZXx8XCJ5ZXNcIj09Yi5maXJlcGxhY2UpYSs9XCJmaXJlcGxhY2U8YnIvPlwiO2lmKFwidmVuZGluZ19tYWNoaW5lXCI9PWIuYW1lbml0eSlpZihiLnZlbmRpbmcpc3dpdGNoKGIudmVuZGluZyl7Y2FzZSBcImFkbWlzc2lvbl90aWNrZXRzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgYWRtaXNzaW9uIHRpY2tldHM8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwiYW5pbWFsX2ZlZWRcIjphKz1cInZlbmRpbmcgbWFjaGluZSBhbmltYWwgZmVlZDxici8+XCI7YnJlYWs7Y2FzZSBcImJpY3ljbGVfdHViZVwiOmErPVwidmVuZGluZyBtYWNoaW5lIGJpY3ljbGUgdHViZTxici8+XCI7YnJlYWs7Y2FzZSBcImJvb2tzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgYm9va3M8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYW5kbGVzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgY2FuZGxlczxici8+XCI7YnJlYWs7Y2FzZSBcImNpZ2FyZXR0ZXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBjaWdhcmV0dGVzPGJyLz5cIjticmVhaztjYXNlIFwiY2hlbWlzdFwiOmErPVwidmVuZGluZyBtYWNoaW5lIGNoZW1pc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb25kb21zXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgY29uZG9tczxici8+XCI7YnJlYWs7Y2FzZSBcImRyaW5rc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIGRyaW5rczxici8+XCI7YnJlYWs7Y2FzZSBcImVsZWN0cm9uaWNzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgZWxlY3Ryb25pY3M8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwiZWxvbmdhdGVkX2NvaW5cIjphKz1cInZlbmRpbmcgbWFjaGluZSBlbG9uZ2F0ZWRfY29pbjxici8+XCI7YnJlYWs7Y2FzZSBcImV4Y3JlbWVudF9iYWdzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgZXhjcmVtZW50X2JhZ3M8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmZW1pbmluZV9oeWdpZW5lXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgZmVtaW5pbmVfaHlnaWVuZTxici8+XCI7YnJlYWs7Y2FzZSBcImZpcnN0X2FpZFwiOmErPVwidmVuZGluZyBtYWNoaW5lIGZpcnN0X2FpZDxici8+XCI7YnJlYWs7Y2FzZSBcImZpc2hpbmdfdGFja2xlXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgZmlzaGluZyB0YWNrbGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmaXNoaW5nX2JhaXRcIjphKz1cInZlbmRpbmcgbWFjaGluZSBmaXNoaW5nIGJhaXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmbG93ZXJzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgZmxvd2Vyczxici8+XCI7YnJlYWs7Y2FzZSBcImZvb2RcIjphKz1cInZlbmRpbmcgbWFjaGluZSBmb29kPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcImljZV9jdWJlc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIGljZSBjdWJlczxici8+XCI7YnJlYWs7Y2FzZSBcImljZV9jcmVhbVwiOmErPVwidmVuZGluZyBtYWNoaW5lIGljZSBjcmVhbTxici8+XCI7YnJlYWs7Y2FzZSBcImlua19jYXJ0cmlkZ2VzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgaW5rIGNhcnRyaWRnZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsYXVuZHJ5X2RldGVyZ2VudFwiOmErPVwidmVuZGluZyBtYWNoaW5lIGxhdW5kcnkgZGV0ZXJnZW50PGJyLz5cIjticmVhaztjYXNlIFwicHVibGljX3RyYW5zcG9ydF90aWNrZXRzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgcHVibGljIHRyYW5zcG9ydCB0aWNrZXRzPGJyLz5cIjticmVhaztjYXNlIFwibmV3c3BhcGVyXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgbmV3c3BhcGVyPGJyLz5cIjticmVhaztjYXNlIFwicGFyY2VsX3BpY2t1cFwiOmErPVwidmVuZGluZyBtYWNoaW5lIHBhcmNlbCBwaWNrdXA8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXJjZWxfbWFpbF9pblwiOmErPVxuICAgICAgICBcIlBhY2tlZ2Ugc3RhdGlvbjxici8+XCI7YnJlYWs7Y2FzZSBcInBhcmtpbmdfdGlja2V0c1wiOmErPVwidmVuZGluZyBtYWNoaW5lIHBhcmtpbmcgdGlja2V0czxici8+XCI7YnJlYWs7Y2FzZSBcInBob3Rvc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIHBob3Rvczxici8+XCI7YnJlYWs7Y2FzZSBcInNleF90b3lzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgc2V4X3RveXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTSU1fY2FyZHNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBTSU1fY2FyZHM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzdGFtcHNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBzdGFtcHM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzd2VldHNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBzd2VldHM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzeXJpbmdlc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIHN5cmluZ2VzPGJyLz5cIjticmVhaztjYXNlIFwidG9sbFwiOmErPVwidmVuZGluZyBtYWNoaW5lIHRvbGw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b3lzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgdG95czxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJ1bWJyZWxsYXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSB1bWJyZWxsYXM8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ2ZW5kaW5nIG1hY2hpbmU8YnIvPlwifWVsc2UgYSs9XCJ2ZW5kaW5nIG1hY2hpbmU8YnIvPlwiO1wiYXJ0c19jZW50cmVcIj09Yi5hbWVuaXR5JiYoYSs9XCJhcnRzIGNlbnRyZTxici8+XCIpO1wiYXJ0d29ya1wiPT1iLmFtZW5pdHkmJihhKz1cImFydHdvcms8YnIvPlwiKTtcIm11c2V1bVwiPT1iLmFtZW5pdHkmJihhKz1cIm11c2V1bTxici8+XCIpO1widGhlYXRyZVwiPT1iLmFtZW5pdHkmJihhKz1cInRoZWF0cmU8YnIvPlwiKTtcImNhdGhlZHJhbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJjYXRoZWRyYWw8YnIvPlwiKTtcImNodXJjaFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJjaHVyY2g8YnIvPlwiKTtcImNoYXBlbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJjaGFwZWw8YnIvPlwiKTtcInBsYWNlX29mX3dvcnNoaXBcIj09Yi5hbWVuaXR5JiYoYSs9XCJwbGFjZSBvZiB3b3JzaGlwPGJyLz5cIik7XCJ2aWxsYWdlXCI9PVxuICAgIGIuYWJhbmRvbmVkJiYoYSs9XCJhYmFuZG9uZWQgdmlsbGFnZTxici8+XCIpO1widGhlbWVfcGFya1wiPT1iW1wiYWJhbmRvbmVkOnRvdXJpc21cIl0mJihhKz1cImFiYW5kb25lZCB0aGVtZSBwYXJrPGJyLz5cIik7XCJwcmlzb25fY2FtcFwiPT1iW1wiYWJhbmRvbmVkOmFtZW5pdHlcIl0mJlwiY29uY2VudHJhdGlvbl9jYW1wXCI9PVtcImNvbmNlbnRyYXRpb25fY2FtcFwiXSYmKGErPVwiYWJhbmRvbmVkIGNvbmNlbnRyYXRpb24gY2FtcDxici8+XCIpO1wieWVzXCI9PWIuYWJhbmRvbmVkJiZcImJ1bmtlclwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJhYmFuZG9uZWQgYnVua2VyPGJyLz5cIik7XCJ5ZXNcIj09Yi5hYmFuZG9uZWQmJlwiYmFycmFja3NcIj09Yi5taWxpdGFyeSYmKGErPVwiYWJhbmRvbmVkIGJhcnJhY2tzPGJyLz5cIik7XCJ5ZXNcIj09Yi5hYmFuZG9uZWQmJlwiYWlyZmllbGRcIj09Yi5taWxpdGFyeSYmKGErPVwiYWJhbmRvbmVkIGFpcmZpZWxkPGJyLz5cIik7XCJtb25hc3RlcnlcIj09Yi5oaXN0b3JpYyYmKGErPVwiaGlzdG9yaWMgbW9uYXN0ZXJ5PGJyLz5cIik7XG4gICAgXCJtb25hc3RlcnlcIj09Yi5hbWVuaXR5JiYoYSs9XCJtb25hc3Rlcnk8YnIvPlwiKTtcIm1vbmFzdGVyeVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJtb25hc3Rlcnk8YnIvPlwiKTtcIm1hbm9yXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIG1hbm9yPGJyLz5cIik7XCJib3VuZGFyeV9zdG9uZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJoaXN0b3JpYyBib3VuZGFyeSBzdG9uZTxici8+XCIpO1wibWlsZXN0b25lXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIG1pbGVzdG9uZTxici8+XCIpO1wibW9udW1lbnRcIj09Yi5oaXN0b3JpYyYmKGErPVwibW9udW1lbnQ8YnIvPlwiKTtcInBhbGFjZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJoaXN0b3JpYyBwYWxhY2U8YnIvPlwiKTtcIm1pbmVcIj09Yi5oaXN0b3JpYyYmKGErPVwiaGlzdG9yaWMgbWluZTxici8+XCIpO1wicnVpbnNcIj09Yi5oaXN0b3JpYyYmKGErPVwicnVpbnM8YnIvPlwiKTtcImhhcmJvdXJcIj09Yi5oaXN0b3JpY191c2FnZSYmKGErPVwiaGlzdG9yaWMgaGFyYm91cjxici8+XCIpO1xuICAgIFwicnVuZSBzdG9uZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJydW5lIHN0b25lPGJyLz5cIik7XCJiYXR0bGVmaWVsZFwiPT1iLmhpc3RvcmljJiYoYSs9XCJoaXN0b3JpYyBiYXR0bGVmaWVsZDxici8+XCIpO1wiYmxhY2tzbWl0aFwiPT1iLmhpc3RvcmljJiYoYSs9XCJoaXN0b3JpYyBibGFja3NtaXRoPGJyLz5cIik7aWYoXCJ0cmVlX3NocmluZVwiPT1iLmhpc3RvcmljfHxcIndheXNpZGVfc2hyaW5lXCI9PWIuaGlzdG9yaWMpYSs9XCJzaHJpbmU8YnIvPlwiO1wiY2l0eV9nYXRlXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIGNpdHkgZ2F0ZTxici8+XCIpO1wid2F5c2lkZV9jcm9zc1wiPT1iLmhpc3RvcmljJiYoYSs9XCJoaXN0b3JpYyB3YXlzaWRlIGNyb3NzPGJyLz5cIik7XCJtb251bWVudFwiPT1iLmFtZW5pdHkmJihhKz1cIm1vbnVtZW50PGJyLz5cIik7XCJtZW1vcmlhbFwiPT1iLmhpc3RvcmljJiYoYSs9XCJtZW1vcmlhbDxici8+XCIpO1wib3B0aWNhbF90ZWxlZ3JhcGhcIj09Yi5oaXN0b3JpYyYmKGErPVwiaGlzdG9yaWMgb3B0aWNhbCB0ZWxlZ3JhcGg8YnIvPlwiKTtcbiAgICBpZihcImNhc3RsZVwiPT1iLmhpc3RvcmljKWlmKGIuY2FzdGxlX3R5cGUpc3dpdGNoKGIuY2FzdGxlX3R5cGUpe2Nhc2UgXCJkZWZlbnNpdmVcIjphKz1cImRlZmVuc2l2ZSBjYXN0bGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYWxhY2VcIjphKz1cInBhbGFjZTxici8+XCI7YnJlYWs7Y2FzZSBcInN0YXRlbHlcIjphKz1cInN0YXRlbHkgY2FzdGxlPGJyLz5cIjticmVhaztjYXNlIFwibWFub3JcIjphKz1cIm1hbm9yPGJyLz5cIjticmVhaztjYXNlIFwiZm9ydHJlc3NcIjphKz1cImZvcnRyZXNzPGJyLz5cIjticmVhaztjYXNlIFwiY2FzdHJ1bVwiOmErPVwiY2FzdHJ1bTxici8+XCI7YnJlYWs7Y2FzZSBcInNoaXJvXCI6YSs9XCJzaGlybzxici8+XCI7YnJlYWs7Y2FzZSBcImtyZW1saW5cIjphKz1cImtyZW1saW48YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJjYXN0bGU8YnIvPlwifWVsc2UgYSs9XCJjYXN0bGU8YnIvPlwiO1wiYXJjaGFlb2xvZ2ljYWxfc2l0ZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJhcmNoYWVvbG9naWNhbCBzaXRlPGJyLz5cIik7aWYoXCJ0b21iXCI9PVxuICAgICAgICBiLmhpc3RvcmljKWlmKGIudG9tYilzd2l0Y2goYi50b21iKXtjYXNlIFwidHVtdWx1c1wiOmErPVwidHVtdWx1czxici8+XCI7YnJlYWs7Y2FzZSBcInJvY2stY3V0XCI6YSs9XCJyb2NrPGJyLz5cIjticmVhaztjYXNlIFwiaHlwb2dldW1cIjphKz1cImh5cG9nZXVtPGJyLz5cIjticmVhaztjYXNlIFwid2FyX2dyYXZlXCI6YSs9XCJ3YXIgZ3JhdmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtYXVzb2xldW1cIjphKz1cIm1hdXNvbGV1bTxici8+XCI7YnJlYWs7Y2FzZSBcImNvbHVtYmFyaXVtXCI6YSs9XCJjb2x1bWJhcml1bTxici8+XCI7YnJlYWs7Y2FzZSBcImNyeXB0XCI6YSs9XCJjcnlwdDxici8+XCI7YnJlYWs7Y2FzZSBcInB5cmFtaWRcIjphKz1cInB5cmFtaWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzYXJjb3BoYWd1c1wiOmErPVwic2FyY29waGFndXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ2YXVsdFwiOmErPVwidmF1bHQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b21ic3RvbmVcIjphKz1cInRvbWJzdG9uZTxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cImhpc3RvcmljIHRvbWI8YnIvPlwifWVsc2UgYSs9XG4gICAgICAgIFwiaGlzdG9yaWMgdG9tYjxici8+XCI7XCJhY2NvdW50YW50XCI9PWIub2ZmaWNlJiYoYSs9XCJhY2NvdW50YW50PGJyLz5cIik7XCJhZG1pbmlzdHJhdGl2ZVwiPT1iLm9mZmljZSYmKGErPVwiYWRtaW5pc3RyYXRpdmU8YnIvPlwiKTtcImFyY2hpdGVjdFwiPT1iLm9mZmljZSYmKGErPVwiYXJjaGl0ZWN0PGJyLz5cIik7XCJhc3NvY2lhdGlvblwiPT1iLm9mZmljZSYmKGErPVwiYXNzb2NpYXRpb248YnIvPlwiKTtcInBoeXNpY2lhblwiPT1iLm9mZmljZSYmKGErPVwicGh5c2ljaWFuPGJyLz5cIik7XCJjYW1waW5nXCI9PWIub2ZmaWNlJiYoYSs9XCJjYW1waW5nIG9mZmljZTxici8+XCIpO1wiY29tcGFueVwiPT1iLm9mZmljZSYmKGErPVwiY29tcGFueTxici8+XCIpO1wiZWR1Y2F0aW9uYWxfaW5zdGl0dXRpb25cIj09Yi5vZmZpY2UmJihhKz1cImVkdWNhdGlvbmFsIGluc3RpdHV0aW9uPGJyLz5cIik7XCJlbXBsb3ltZW50X2FnZW5jeVwiPT1iLm9mZmljZSYmKGErPVwiZW1wbG95bWVudCBhZ2VuY3k8YnIvPlwiKTtcImVzdGF0ZV9hZ2VudFwiPT1cbiAgICBiLm9mZmljZSYmKGErPVwiZXN0YXRlIGFnZW50PGJyLz5cIik7XCJmb3Jlc3RyeVwiPT1iLm9mZmljZSYmKGErPVwiZm9yZXN0cnk8YnIvPlwiKTtcImZvdW5kYXRpb25cIj09Yi5vZmZpY2UmJihhKz1cImZvdW5kYXRpb248YnIvPlwiKTtcImdvdmVybm1lbnRcIj09Yi5vZmZpY2UmJihhKz1cImdvdmVybm1lbnQ8YnIvPlwiKTtcImd1aWRlXCI9PWIub2ZmaWNlJiYoYSs9XCJndWlkZSBvZmZpY2U8YnIvPlwiKTtcImluc3VyYW5jZVwiPT1iLm9mZmljZSYmKGErPVwiaW5zdXJhbmNlPGJyLz5cIik7XCJpdFwiPT1iLm9mZmljZSYmKGErPVwiaXQgb2ZmaWNlPGJyLz5cIik7XCJsYXd5ZXJcIj09Yi5vZmZpY2UmJihhKz1cImxhd3llcjxici8+XCIpO1wibmV3c3BhcGVyXCI9PWIub2ZmaWNlJiYoYSs9XCJuZXdzcGFwZXI8YnIvPlwiKTtcIm5nb1wiPT1iLm9mZmljZSYmKGErPVwibmdvIG9mZmljZTxici8+XCIpO1wibm90YXJ5XCI9PWIub2ZmaWNlJiYoYSs9XCJub3Rhcnk8YnIvPlwiKTtcInBvbGl0aWNhbF9wYXJ0eVwiPT1iLm9mZmljZSYmKGErPVwicG9saXRpY2FsIHBhcnR5PGJyLz5cIik7XG4gICAgXCJxdWFuZ29cIj09Yi5vZmZpY2UmJihhKz1cInF1YW5nbyBvZmZpY2U8YnIvPlwiKTtcInJlYWx0b3JcIj09Yi5vZmZpY2UmJihhKz1cInJlYWx0b3I8YnIvPlwiKTtcInJlYWxfZXN0YXRlX2FnZW50XCI9PWIub2ZmaWNlJiYoYSs9XCJyZWFsIGVzdGF0ZSBhZ2VudDxici8+XCIpO1wicmVnaXN0ZXJcIj09Yi5vZmZpY2UmJihhKz1cInJlZ2lzdGVyPGJyLz5cIik7XCJyZWxpZ2lvblwiPT1iLm9mZmljZSYmKGErPVwicmVsaWdpb3VzIG9mZmljZTxici8+XCIpO1wicmVzZWFyY2hcIj09Yi5vZmZpY2UmJihhKz1cInJlc2VhcmNoIG9mZmljZTxici8+XCIpO1widGF4XCI9PWIub2ZmaWNlJiYoYSs9XCJ0YXggb2ZmaWNlPGJyLz5cIik7XCJ0ZWxlY29tbXVuaWNhdGlvblwiPT1iLm9mZmljZSYmKGErPVwidGVsZWNvbW11bmljYXRpb24gb2ZmaWNlPGJyLz5cIik7XCJ0cmF2ZWxfYWdlbnRcIj09Yi5vZmZpY2UmJihhKz1cInRyYXZlbCBhZ2VudDxici8+XCIpO1wid2F0ZXJfdXRpbGl0eVwiPT1iLm9mZmljZSYmKGErPVwid2F0ZXIgdXRpbGl0eSBvZmZpY2U8YnIvPlwiKTtcbiAgICBcInRoZXJhcGlzdFwiPT1iLm9mZmljZSYmKGErPVwidGhlcmFwaXN0PGJyLz5cIik7XCJjaXR5XCI9PWIucGxhY2UmJihhKz1cImNpdHk8YnIvPlwiKTtcInRvd25cIj09Yi5wbGFjZSYmKGErPVwidG93bjxici8+XCIpO1widmlsbGFnZVwiPT1iLnBsYWNlJiYoYSs9XCJ2aWxsYWdlPGJyLz5cIik7XCJjb250aW5lbnRcIj09Yi5wbGFjZSYmKGErPVwiY29udGluZW50PGJyLz5cIik7XCJvY2VhblwiPT1iLnBsYWNlJiYoYSs9XCJvY2VhbjwvYnI+XCIpO1widHJhY2tcIj09Yi5oaWdod2F5JiYoYSs9XCJ0cmFjazxici8+XCIpO1wicmFjZXdheVwiPT1iLmhpZ2h3YXkmJihhKz1cInJhY2V3YXk8YnIvPlwiKTtcImRlc2lnbmF0ZWRcIj09Yi5iaWN5Y2xlJiYoYSs9XCJjeWNsZSBwYXRoPGJyLz5cIik7XCJwYXRoXCI9PWIuaGlnaHdheSYmKGErPVwiZm9vZCBwYXRoPGJyLz5cIik7XCJwYXJraW5nXCI9PWIuYW1lbml0eSYmKGErPVwicGFya2luZzxici8+XCIpO1wic2VydmljZXNcIj09Yi5oaWdod2F5JiYoYSs9XCJzZXJ2aWNlczxici8+XCIpO1wicmVzdF9hcmVhXCI9PVxuICAgIGIuaGlnaHdheSYmKGErPVwicmVzdCBhcmVhPGJyLz5cIik7XCJ0dXJuaW5nX2NpcmNsZVwiPT1iLmhpZ2h3YXkmJihhKz1cInR1cm5pbmcgY2lyY2xlPGJyLz5cIik7XCJzZXJ2aWNlXCI9PWIuaGlnaHdheSYmKGErPVwic2VydmljZSByb2FkPGJyLz5cIik7XCJtb3RvcndheVwiPT1iLmhpZ2h3YXkmJihhKz1cIm1vdG9yd2F5PGJyLz5cIik7XCJtb3RvcndheV9qdW5jdGlvblwiPT1iLmhpZ2h3YXkmJihhKz1cIm1vdG9yd2F5IGp1bmN0aW9uPGJyLz5cIik7XCJicmlkbGV3YXlcIj09Yi5oaWdod2F5JiYoYSs9XCJicmlkbGV3YXk8YnIvPlwiKTtcInllc1wiPT1iLm9uZXdheSYmKGErPVwib25ld2F5PGJyLz5cIik7XCJ5ZXNcIj09Yi5wYXJrX3JpZGUmJihhKz1cInBhcmsgYW5kIHJpZGU8YnIvPlwiKTtcInVua25vd25cIj09Yi5wYXJrX3JpZGUmJihhKz1cInBhcmsgYW5kIHJpZGU8YnIvPlwiKTtcImJ1c1wiPT1iLnBhcmtfcmlkZSYmKGErPVwicGFyayBhbmQgcmlkZTxici8+XCIpO1widHJhbVwiPT1iLnBhcmtfcmlkZSYmKGErPVwicGFyayBhbmQgcmlkZTxici8+XCIpO1xuICAgIFwiYnVzX3N0b3BcIj09Yi5oaWdod2F5JiYoYSs9XCJidXMgc3RvcDxici8+XCIpO1wicGVkZXN0cmlhblwiPT1iLmhpZ2h3YXkmJihhKz1cInBlZGVzdHJpYW48YnIvPlwiKTtcInN0cmVldF9sYW1wXCI9PWIuaGlnaHdheSYmKGErPVwic3RyZWV0IGxhbXA8YnIvPlwiKTtcInRyYWZmaWNfc2lnbmFsc1wiPT1iLmhpZ2h3YXkmJihhKz1cInRyYWZmaWMgc2lnbmFsczxici8+XCIpO1widHJhZmZpY19zaWduYWxzXCI9PWIuY3Jvc3NpbmcmJihhKz1cInRyYWZmaWMgc2lnbmFsczxici8+XCIpO1wic3BlZWRfY2FtZXJhXCI9PWIuaGlnaHdheSYmKGErPVwic3BlZWQgY2FtZXJhPGJyLz5cIik7XCJ5ZXNcIj09Yi50cmFmZmljX2NhbG1pbmcmJihyZXQrPVwidHJhZmZpYyBjYWxtaW5nPC9icj5cIik7XCJidW1wXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJidW1wPC9icj5cIik7XCJjaGljYW5lXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJjaGljYW5lPC9icj5cIik7XCJjaG9rZXJcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImNob2tlcjwvYnI+XCIpO1xuICAgIFwiY3VzaGlvblwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiY3VzaGlvbjwvYnI+XCIpO1wiaHVtcFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiaHVtcDwvYnI+XCIpO1wiaXNsYW5kXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJpc2xhbmQ8L2JyPlwiKTtcInJ1bWJsZV9zdHJpcFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwicnVtYmxlX3N0cmlwPC9icj5cIik7XCJ0YWJsZVwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwidGFibGU8L2JyPlwiKTtcImJ1b3lfY2FyZGluYWxcIj09YltcInNlYW1hcms6dHlwZVwiXSYmKGErPVwiYnVveSBjYXJkaW5hbDxici8+XCIpO1wiYnVveV9sYXRlcmFsXCI9PWJbXCJzZWFtYXJrOnR5cGVcIl0mJihhKz1cImJ1b3kgbGF0ZXJhbDxici8+XCIpO1wiYnVveV9pc29sYXRlZF9kYW5nZXJcIj09YltcInNlYW1hcms6dHlwZVwiXSYmKGErPVwiYnVveSBpc29sYXRlZF9kYW5nZXI8YnIvPlwiKTtcInBlcmNoXCI9PWJbXCJzZWFtYXJrOmJlYWNvbl9sYXRlcmFsOnNoYXBlXCJdJiYoYSs9XCJwZXJjaDxici8+XCIpO1xuICAgIFwiZnVlbFwiPT1iLmFtZW5pdHkmJlwiZnVlbF9zdGF0aW9uXCI9PWJbXCJzZWFtYXJrOnNtYWxsX2NyYWZ0X2ZhY2lsaXR5OmNhdGVnb3J5XCJdP2ErPVwiZnVlbCBzdGF0aW9uPGJyLz5cIjpcImZ1ZWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJmdWVsPGJyLz5cIik7aWYoXCJjaGFyZ2luZ19zdGF0aW9uXCI9PWIuYW1lbml0eSl7dmFyIGE9YStcImNoYXJnaW5nIHN0YXRpb248YnIvPlwiLGM9Yi52b2x0YWdlO2lmKGIuY2FyKXtzd2l0Y2goYi5jYXIpe2Nhc2UgXCJ5ZXNcIjphKz1cIkNhcjogeWVzXCI7YnJlYWs7Y2FzZSBcIm5vXCI6YSs9XCJDYXI6IE5vXCI7YnJlYWs7ZGVmYXVsdDphKz1cIkNhcnM6IHVua293blwifWErPVwiPGJyLz5cIn1lbHNlIGErPVwiQ2FyczogdW5rb3duPGJyLz5cIjtpZihiLmJpY3ljbGUpe3N3aXRjaChiLmJpY3ljbGUpe2Nhc2UgXCJ5ZXNcIjphKz1cIkUtQmlrZTogeWVzXCI7YnJlYWs7Y2FzZSBcIm5vXCI6YSs9XCJFLUJpa2U6IG5vXCI7YnJlYWs7ZGVmYXVsdDphKz1cIkUtQmlrZTogdW5rb3duXCJ9YSs9XCI8YnIvPlwifWVsc2UgYSs9XG4gICAgICAgIFwiRS1CaWtlOiB1bmtvd248YnIvPlwiO2JbXCJzb2NrZXQ6c2NodWtvXCJdJiYoYSs9XCJTY2h1a28gc29ja2V0OiBcIitiW1wic29ja2V0OnNjaHVrb1wiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6Y2VlX2JsdWVcIl0mJihhKz1cIkNlZSBibHVlIHNvY2tldCBcIitiW1wic29ja2V0OmNlZV9ibHVlXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfcmVkXzE2YVwiXSYmKGErPVwiQ2VlIHJlZCAxNmEgc29ja2V0IFwiK2JbXCJzb2NrZXQ6Y2VlX3JlZF8xNmFcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmNlZV9yZWRfMzJhXCJdJiYoYSs9XCJDZWUgcmVkIDMyYSBzb2NrZXQgXCIrYltcInNvY2tldDpjZWVfcmVkXzMyYVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6Y2VlX3JlZF82NGFcIl0mJihhKz1cIkNlZSByZWQgNjRhIHNvY2tldCBcIitiW1wic29ja2V0OmNlZV9yZWRfNjRhXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfcmVkXzEyNWFcIl0mJihhKz1cIkNlZSByZWQgMTI1YSBzb2NrZXQgXCIrYltcInNvY2tldDpjZWVfcmVkXzEyNWFcIl0rXCI8YnIvPlwiKTtcbiAgICAgICAgYltcInNvY2tldDpuZW1hXzVfMTVcIl0mJihhKz1cIk5lbWEgNSAxNSBzb2NrZXQgXCIrYltcInNvY2tldDpuZW1hXzVfMTVcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om5lbWFfNV8yMFwiXSYmKGErPVwiTmVtYSA1IDIwIHNvY2tldCBcIitiW1wic29ja2V0Om5lbWFfNV8yMFwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6bmVtYV8xNF8zMFwiXSYmKGErPVwiTmVtYSAxNCAzMCBzb2NrZXQgXCIrYltcInNvY2tldDpuZW1hXzE0XzMwXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpuZW1hXzE0XzUwXCJdJiYoYSs9XCJOZW1hIDE0IDUwIHNvY2tldCBcIitiW1wic29ja2V0Om5lbWFfMTRfNTBcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmJzMTM2M1wiXSYmKGErPVwiQnMxMzYzIHNvY2tldCBcIitiW1wic29ja2V0OmJzMTM2M1wiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dHlwZTFcIl0mJihhKz1cIlR5cGUgMSBzb2NrZXQgXCIrYltcInNvY2tldDp0eXBlMVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dHlwZTFfY29tYm9cIl0mJihhKz1cIlR5cGUgMSBjb21ibyBzb2NrZXQgXCIrXG4gICAgICAgICAgICBiW1wic29ja2V0OnNjaHVrb1wiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dHlwZTJcIl0mJihhKz1cIlR5cGUgMiBzb2NrZXQgXCIrYltcInNvY2tldDp0eXBlMlwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dHlwZTJfY29tYm9cIl0mJihhKz1cIlR5cGUgMiBjb21ibyBzb2NrZXQgXCIrYltcInNvY2tldDp0eXBlMl9jb21ib1wiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dHlwZTNcIl0mJihhKz1cIlR5cGUgMyBzb2NrZXQgXCIrYltcInNvY2tldDp0eXBlM1wiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6Y2hhZGVtb1wiXSYmKGErPVwiQ2hhZGVtbyBzb2NrZXQgXCIrYltcInNvY2tldDpjaGFkZW1vXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDptYWduZV9jaGFyZ2VcIl0mJihhKz1cIk1hZ25lIGNoYXJnZSBzb2NrZXQgXCIrYltcInNvY2tldDptYWduZV9jaGFyZ2VcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OnRlc2xhX3N0YW5kYXJkXCJdJiYoYSs9XCJUZXNsYSBzdGFuZGFyZCBzb2NrZXQgXCIrYltcInNvY2tldDp0ZXNsYV9zdGFuZGFyZFwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dGVzbGFfc3VwZXJjaGFyZ2VcIl0mJlxuICAgICAgICAoYSs9XCJUZXNsYSBzdXBlcmNoYXJnZTogXCIrYltcInNvY2tldDp0ZXNsYV9zdXBlcmNoYXJnZVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dGVzbGFfcm9hZHN0ZXJcIl0mJihhKz1cIlRlc2xhX3JvYWRzdGVyIHNvY2tldCBcIitiW1wic29ja2V0OnRlc2xhX3JvYWRzdGVyXCJdK1wiPGJyLz5cIik7YSs9XCI8YnIvPlwiO2Iudm9sdGFnZSYmKGErPVwiVm9sdDogXCIrYytcIjxici8+XCIpfVwieWVzXCI9PWIudHVubmVsJiYoYSs9XCJ0dW5uZWw8YnIvPlwiKTtpZihiLmJyaWRnZSlzd2l0Y2goYSs9XCJicmlkZ2U6IFwiLGIuYnJpZGdlKXtjYXNlIFwic3dpbmdcIjphKz1cInN3aW5nXCI7YnJlYWs7Y2FzZSBcImFxdWVkdWN0XCI6YSs9XCJhcXVlZHVjdFwiO2JyZWFrO2Nhc2UgXCJiYXNjdWxlXCI6YSs9XCJmbGFwIGJyaWRnZVwiO2JyZWFrO2Nhc2UgXCJib2FyZHdhbGtcIjphKz1cImJvYXJkd2Fsa1wiO2JyZWFrO2Nhc2UgXCJjYW50aWxldmVyXCI6YSs9XCJjYW50aWxldmVyXCI7YnJlYWs7Y2FzZSBcImNvdmVyZWRcIjphKz1cImNvdmVyZWRcIjticmVhaztjYXNlIFwiZHJhd2JyaWRnZVwiOmErPVxuICAgICAgICBcImRyYXdicmlkZ2VcIjticmVhaztjYXNlIFwiaHVtcGJhY2tcIjphKz1cImh1bXBiYWNrXCI7YnJlYWs7Y2FzZSBcImxpZnRcIjphKz1cImxpZnRcIjticmVhaztjYXNlIFwibG93X3dhdGVyX2Nyb3NzaW5nXCI6YSs9XCJsb3cgd2F0ZXIgY3Jvc3NpbmdcIjticmVhaztjYXNlIFwibW92ZWFibGVcIjphKz1cIm1vdmVhYmxlXCI7YnJlYWs7Y2FzZSBcInBvbnRvb25cIjphKz1cInBvbnRvb25cIjticmVhaztjYXNlIFwic3VzcGVuc2lvblwiOmErPVwic3VzcGVuc2lvblwiO2JyZWFrO2Nhc2UgXCJ0cmVzdGxlXCI6YSs9XCJ0cmVzdGxlXCI7YnJlYWs7Y2FzZSBcInZpYWR1Y3RcIjphKz1cInZpYWR1Y3RcIn1pZihiW1wiYnJpZGdlOm1vdmFibGVcIl0pc3dpdGNoKGJbXCJicmlkZ2U6bW92YWJsZVwiXSl7Y2FzZSBcInN3aW5nXCI6YSs9XCJzd2luZ1wiO2JyZWFrO2Nhc2UgXCJiYXNjdWxlXCI6YSs9XCJiYXNjdWxlXCI7YnJlYWs7Y2FzZSBcImRyYXdicmlkZ2VcIjphKz1cImRyYXdicmlkZ2VcIjticmVhaztjYXNlIFwibGlmdFwiOmErPVwibGlmdFwiO2JyZWFrO2Nhc2UgXCJzdWJtZXJzaWJsZVwiOmErPVxuICAgICAgICBcInN1Ym1lcnNpYmxlXCI7YnJlYWs7Y2FzZSBcInRyYW5zcG9ydGVyXCI6YSs9XCJ0cmFuc3BvcnRlclwiO2JyZWFrO2Nhc2UgXCJyZXRyYWN0YWJsZVwiOmErPVwicmV0cmFjdGFibGVcIn1pZihcIm51cnNpbmdfaG9tZVwiPT1iLmFtZW5pdHl8fFwicmV0aXJlbWVudF9ob21lXCI9PWIuYW1lbml0eSlhKz1cIm51cnNpbmcgaG9tZSAvIHJldGlyZW1lbnQgaG9tZTxici8+XCI7XCJzb2NpYWxfZmFjaWxpdHlcIj09Yi5hbWVuaXR5JiYoYSs9XCJzb2NpYWwgZmFjaWxpdHk8YnIvPlwiKTtpZihiLnNvY2lhbF9mYWNpbGl0eSl7XCJncm91cF9ob21lXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiZcInNlbmlvclwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic2VuaW9yIGdyb3VwIGhvbWU8YnIvPlwiKTtcImFzc2lzdGVkX2xpdmluZ1wiPT1iLnNvY2lhbF9mYWNpbGl0eSYmKGErPVwiYXNzaXN0ZWQgbGl2aW5nPGJyLz5cIik7XCJvdXRyZWFjaFwiPT1iLnNvY2lhbF9mYWNpbGl0eSYmKGErPVwib3V0cmVhY2g8YnIvPlwiKTtcIndvcmtzaG9wXCI9PVxuICAgIGIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJ3b3Jrc2hvcDxici8+XCIpO2lmKFwiYW1idWxhdG9yeV9jYXJlXCI9PWIuc29jaWFsX2ZhY2lsaXR5fHxcImhlYWx0aGNhcmVcIj09Yi5zb2NpYWxfZmFjaWxpdHkpYSs9XCJhbWJ1bGF0b3J5IGNhcmU8YnIvPlwiO1wic2hlbHRlclwiPT1iLnNvY2lhbF9mYWNpbGl0eSYmXCJzZW5pb3JcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cInNlbmlvciBzaGVsdGVyPGJyLz5cIik7XCJzaGVsdGVyXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiZcImFidXNlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiYWJ1c2VkIHNoZWx0ZXI8YnIvPlwiKTtcImZvb2RfYmFua1wiPT1iLnNvY2lhbF9mYWNpbGl0eSYmKGErPVwiZm9vZCBiYW5rPGJyLz5cIik7XCJob3NwaWNlXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJob3NwaWNlPGJyLz5cIil9Yi5icmV3ZXJ5JiYoYSs9XCJicmFuZCBvZiBiZWVyOiBcIitiLmJyZXdlcnkrXCI8YnIvPlwiKTtcImFsY29ob2xcIj09Yi5zaG9wJiYoYSs9XG4gICAgICAgIFwiYWxjb2hvbCBzaG9wPGJyLz5cIik7XCJiYWtlcnlcIj09Yi5zaG9wJiYoYSs9XCJiYWtlcnkgc2hvcDxici8+XCIpO1wiYmV2ZXJhZ2VzXCI9PWIuc2hvcCYmKGErPVwiYmV2ZXJhZ2VzIHNob3A8YnIvPlwiKTtcImJ1dGNoZXJcIj09Yi5zaG9wJiYoYSs9XCJidXRjaGVyIHNob3A8YnIvPlwiKTtcImNoZWVzZVwiPT1iLnNob3AmJihhKz1cImNoZWVzZSBzaG9wPGJyLz5cIik7XCJjaG9jb2xhdGVcIj09Yi5zaG9wJiYoYSs9XCJjaG9jb2xhdGUgc2hvcDxici8+XCIpO1wiY29mZmVlXCI9PWIuc2hvcCYmKGErPVwiY29mZmVlIHNob3A8YnIvPlwiKTtcImNvbmZlY3Rpb25lcnlcIj09Yi5zaG9wJiYoYSs9XCJjb25mZWN0aW9uZXJ5IHNob3A8YnIvPlwiKTtcImNvbnZlbmllbmNlXCI9PWIuc2hvcCYmKGErPVwiY29udmVuaWVuY2Ugc2hvcDxici8+XCIpO1wiZGVsaVwiPT1iLnNob3AmJihhKz1cImRlbGkgc2hvcDxici8+XCIpO1wiZGFpcnlcIj09Yi5zaG9wJiYoYSs9XCJkYWlyeSBzaG9wPGJyLz5cIik7XCJmYXJtXCI9PWIuc2hvcCYmKGErPVwiZmFybSBzaG9wPGJyLz5cIik7XG4gICAgXCJncmVlbmdyb2NlclwiPT1iLnNob3AmJihhKz1cImdyZWVuZ3JvY2VyIHNob3A8YnIvPlwiKTtcImdyb2NlcnlcIj09Yi5zaG9wJiYoYSs9XCJncm9jZXJ5IHNob3A8YnIvPlwiKTtcIm9yZ2FuaWNcIj09Yi5zaG9wJiYoYSs9XCJvcmdhbmljIHNob3A8YnIvPlwiKTtcInBhc3RhXCI9PWIuc2hvcCYmKGErPVwicGFzdGEgc2hvcDxici8+XCIpO1wic2VhZm9vZFwiPT1iLnNob3AmJihhKz1cInNlYWZvb2Qgc2hvcDxici8+XCIpO1widGVhXCI9PWIuc2hvcCYmKGErPVwidGVhIHNob3A8YnIvPlwiKTtcIndpbmVcIj09Yi5zaG9wJiYoYSs9XCJ3aW5lIHNob3A8YnIvPlwiKTtcImRlcGFydG1lbnRfc3RvcmVcIj09Yi5zaG9wJiYoYSs9XCJkZXBhcnRtZW50IHN0b3JlPGJyLz5cIik7XCJnZW5lcmFsXCI9PWIuc2hvcCYmKGErPVwiZ2VuZXJhbCBzaG9wPGJyLz5cIik7XCJraW9za1wiPT1iLnNob3AmJihhKz1cImtpb3NrPGJyLz5cIik7XCJtYWxsXCI9PWIuc2hvcCYmKGErPVwibWFsbDxici8+XCIpO1wic3VwZXJtYXJrZXRcIj09Yi5zaG9wJiYoYSs9XCJzdXBlcm1hcmtldDxici8+XCIpO1xuICAgIFwiYmFieV9nb29kc1wiPT1iLnNob3AmJihhKz1cImJhYnkgZ29vZHMgc2hvcDxici8+XCIpO1wiYmFnXCI9PWIuc2hvcCYmKGErPVwiYmFnIHNob3A8YnIvPlwiKTtcImJvdXRpcXVlXCI9PWIuc2hvcCYmKGErPVwiYm91dGlxdWU8YnIvPlwiKTtcImNsb3RoZXNcIj09Yi5zaG9wJiYoYSs9XCJjbG90aGVzIHNob3A8YnIvPlwiKTtcImZhYnJpY1wiPT1iLnNob3AmJihhKz1cImZhYnJpYyBzaG9wPGJyLz5cIik7XCJmYXNoaW9uXCI9PWIuc2hvcCYmKGErPVwiZmFzaGlvbiBzaG9wPGJyLz5cIik7XCJqZXdlbHJ5XCI9PWIuc2hvcCYmKGErPVwiamV3ZWxyeSBzaG9wPGJyLz5cIik7XCJsZWF0aGVyXCI9PWIuc2hvcCYmKGErPVwibGVhdGhlciBzaG9wPGJyLz5cIik7XCJzaG9lc1wiPT1iLnNob3AmJihhKz1cInNob2VzIHNob3A8YnIvPlwiKTtcInZhcmlldHlfc3RvcmVcIj09Yi5zaG9wJiYoYSs9XCJ2YXJpZXR5IHN0b3JlPGJyLz5cIik7XCJjaGVtaXN0XCI9PWIuc2hvcCYmKGErPVwiY2hlbWlzdDxici8+XCIpO1wiY29zbWV0aWNzXCI9PWIuc2hvcCYmKGErPVwiY29zbWV0aWNzIHNob3A8YnIvPlwiKTtcbiAgICBcImRydWdzdG9yZVwiPT1iLnNob3AmJihhKz1cImRydWdzdG9yZTxici8+XCIpO1wicGVyZnVtZXJ5XCI9PWIuc2hvcCYmKGErPVwicGVyZnVtZXJ5PGJyLz5cIik7XCJlcm90aWNcIj09Yi5zaG9wJiYoYSs9XCJlcm90aWMgc2hvcDxici8+XCIpO1wiaGFpcmRyZXNzZXJcIj09Yi5zaG9wJiYoYSs9XCJoYWlyZHJlc3Nlcjxici8+XCIpO1wiaGVhcmluZ19haWRzXCI9PWIuc2hvcCYmKGErPVwiaGVhcmluZyBhaWRzPGJyLz5cIik7XCJoZXJiYWxpc3RcIj09Yi5zaG9wJiYoYSs9XCJoZXJiYWxpc3Q8YnIvPlwiKTtcIm1hc3NhZ2VcIj09Yi5zaG9wJiYoYSs9XCJtYXNzYWdlPGJyLz5cIik7XCJtZWRpY2FsX3N1cHBseVwiPT1iLnNob3AmJihhKz1cIm1lZGljYWwgc3VwcGx5IHNob3A8YnIvPlwiKTtcIm9wdGljaWFuXCI9PWIuc2hvcCYmKGErPVwib3B0aWNpYW48YnIvPlwiKTtcInRhdHRvb1wiPT1iLnNob3AmJihhKz1cInRhdHRvbzxici8+XCIpO1wiYmF0aHJvb21fZnVybmlzaGluZ1wiPT1iLnNob3AmJihhKz1cImJhdGhyb29tIGZ1cm5pc2hpbmc8YnIvPlwiKTtcbiAgICBcImRvaXR5b3Vyc2VsZlwiPT1iLnNob3AmJihhKz1cImRvaXR5b3Vyc2VsZjxici8+XCIpO1wiZW5lcmd5XCI9PWIuc2hvcCYmKGErPVwiZW5lcmd5PGJyLz5cIik7XCJmbG9yaXN0XCI9PWIuc2hvcCYmKGErPVwiZmxvcmlzdDxici8+XCIpO1wiZnVybmFjZVwiPT1iLnNob3AmJihhKz1cImZ1cm5hY2Ugc2hvcDxici8+XCIpO1wiZ2FyZGVuX2NlbnRyZVwiPT1iLnNob3AmJihhKz1cImdhcmRlbiBjZW50cmU8YnIvPlwiKTtcImdhc1wiPT1iLnNob3AmJihhKz1cImdhczxici8+XCIpO1wiZ2xhemllcnlcIj09Yi5zaG9wJiYoYSs9XCJnbGF6aWVyeTxici8+XCIpO1wiaGFyZHdhcmVcIj09Yi5zaG9wJiYoYSs9XCJoYXJkd2FyZSBzaG9wPGJyLz5cIik7XCJob3VzZXdhcmVcIj09Yi5zaG9wJiYoYSs9XCJob3VzZXdhcmUgc2hvcDxici8+XCIpO1wibG9ja3NtaXRoXCI9PWIuc2hvcCYmKGErPVwibG9ja3NtaXRoPGJyLz5cIik7XCJwYWludFwiPT1iLnNob3AmJihhKz1cInBhaW50IHNob3A8YnIvPlwiKTtcInRyYWRlXCI9PWIuc2hvcCYmKGErPVwidHJhZGU8YnIvPlwiKTtcbiAgICBcImFudGlxdWVzXCI9PWIuc2hvcCYmKGErPVwiYW50aXF1ZXMgc2hvcDxici8+XCIpO1wiYmVkXCI9PWIuc2hvcCYmKGErPVwiYmVkIHNob3A8YnIvPlwiKTtcImNhbmRsZXNcIj09Yi5zaG9wJiYoYSs9XCJjYW5kbGVzIHNob3A8YnIvPlwiKTtcImNhcnBldFwiPT1iLnNob3AmJihhKz1cImNhcnBldCBzaG9wPGJyLz5cIik7XCJjdXJ0YWluXCI9PWIuc2hvcCYmKGErPVwiY3VydGFpbiBzaG9wPGJyLz5cIik7XCJmdXJuaXR1cmVcIj09Yi5zaG9wJiYoYSs9XCJmdXJuaXR1cmUgc3RvcmU8YnIvPlwiKTtcImludGVyaW9yX2RlY29yYXRpb25cIj09Yi5zaG9wJiYoYSs9XCJpbnRlcmlvciBkZWNvcmF0aW9uIGNvbXBhbnk8YnIvPlwiKTtcImtpdGNoZW5cIj09Yi5zaG9wJiYoYSs9XCJraXRjaGVuIHNob3A8YnIvPlwiKTtcIndpbmRvd19ibGluZFwiPT1iLnNob3AmJihhKz1cIndpbmRvdyBibGluZCBzaG9wPGJyLz5cIik7XCJjb21wdXRlclwiPT1iLnNob3AmJihhKz1cImNvbXB1dGVyIHNob3A8YnIvPlwiKTtcImVsZWN0cm9uaWNzXCI9PWIuc2hvcCYmKGErPVxuICAgICAgICBcImVsZWN0cm9uaWNzIHNob3A8YnIvPlwiKTtcImhpZmlcIj09Yi5zaG9wJiYoYSs9XCJoaWZpIHNob3A8YnIvPlwiKTtcIm1vYmlsZV9waG9uZVwiPT1iLnNob3AmJihhKz1cIm1vYmlsZSBwaG9uZSBzaG9wPGJyLz5cIik7XCJyYWRpb3RlY2huaWNzXCI9PWIuc2hvcCYmKGErPVwicmFkaW90ZWNobmljcyBzaG9wPGJyLz5cIik7XCJ2YWN1dW1fY2xlYW5lclwiPT1iLnNob3AmJihhKz1cInZhY3V1bSBjbGVhbmVyIHNob3A8YnIvPlwiKTtcImJpY3ljbGVcIj09Yi5zaG9wJiYoYSs9XCJiaWN5Y2xlIHNob3A8YnIvPlwiKTtcImNhclwiPT1iLnNob3AmJihhKz1cImNhciBzaG9wPGJyLz5cIik7XCJjYXIgcmVwYWlyXCI9PWIuc2hvcCYmKGErPVwiY2FyIHJlcGFpcjxici8+XCIpO1wiY2FyX3BhcnRzXCI9PWIuc2hvcCYmKGErPVwiY2FyIHBhcnRzIHNob3A8YnIvPlwiKTtpZihcImRpdmVcIj09Yi5zaG9wfHxcInNjdWJhX2RpdmluZ1wiPT1iLnNob3ApYSs9XCJzY3ViYSBkaXZpbmcgc2hvcDxici8+XCI7XCJmaXNoaW5nXCI9PWIuc2hvcCYmKGErPVwiZmlzaGluZyBzaG9wPGJyLz5cIik7XG4gICAgXCJmcmVlX2ZseWluZ1wiPT1iLnNob3AmJihhKz1cImZyZWUgZmx5aW5nIHNob3A8YnIvPlwiKTtcImh1bnRpbmdcIj09Yi5zaG9wJiYoYSs9XCJodW50aW5nIHNob3A8YnIvPlwiKTtcIm1vdG9yY3ljbGVcIj09Yi5zaG9wJiYoYSs9XCJtb3RvcmN5Y2xlIHNob3A8YnIvPlwiKTtcIm91dGRvb3JcIj09Yi5zaG9wJiYoYSs9XCJvdXRkb29yIHNob3A8YnIvPlwiKTtcInNwb3J0c1wiPT1iLnNob3AmJihhKz1cInNwb3J0cyBzaG9wPGJyLz5cIik7XCJ0eXJlc1wiPT1iLnNob3AmJihhKz1cInR5cmVzPGJyLz5cIik7XCJ3YXRlcl9zcG9ydHNcIj09Yi5zaG9wJiYoYSs9XCJ3YXRlciBzcG9ydHMgc2hvcDxici8+XCIpO1wiYXJ0XCI9PWIuc2hvcCYmKGErPVwiYXJ0PGJyLz5cIik7XCJjcmFmdFwiPT1iLnNob3AmJihhKz1cImNyYWZ0PGJyLz5cIik7XCJmcmFtZVwiPT1iLnNob3AmJihhKz1cImZyYW1lIHNob3A8YnIvPlwiKTtcIm11c2ljXCI9PWIuc2hvcCYmKGErPVwibXVzaWMgc2hvcDxici8+XCIpO1wibXVzaWNfaW5zdHJ1bWVudFwiPT1iLnNob3AmJihhKz1cIm11c2ljIGluc3RydW1lbnRzIHNob3A8YnIvPlwiKTtcbiAgICBcInBob3RvXCI9PWIuc2hvcCYmKGErPVwicGhvdG8gc2hvcDxici8+XCIpO1widmlkZW9cIj09Yi5zaG9wJiYoYSs9XCJ2aWRlbzxici8+XCIpO1widmlkZW9fZ2FtZXNcIj09Yi5zaG9wJiYoYSs9XCJ2aWRlbyBnYW1lczxici8+XCIpO1wiYW5pbWVcIj09Yi5zaG9wJiYoYSs9XCJhbmltZTxici8+XCIpO1wiYm9va3NcIj09Yi5zaG9wJiYoYSs9XCJib29rcyBzaG9wPGJyLz5cIik7XCJnaWZ0XCI9PWIuc2hvcCYmKGErPVwiZ2lmdCBzaG9wPGJyLz5cIik7XCJuZXdzYWdlbnRcIj09Yi5zaG9wJiYoYSs9XCJuZXdzYWdlbnQ8YnIvPlwiKTtcInN0YXRpb25lcnlcIj09Yi5zaG9wJiYoYSs9XCJzdGF0aW9uZXJ5PGJyLz5cIik7XCJ0aWNrZXRcIj09Yi5zaG9wJiYoYSs9XCJ0aWNrZXQgc2hvcDxici8+XCIpO1wiY29weXNob3BcIj09Yi5zaG9wJiYoYSs9XCJjb3B5c2hvcDxici8+XCIpO1wiZnVuZXJhbF9kaXJlY3RvcnNcIj09Yi5zaG9wJiYoYSs9XCJmdW5lcmFsIGRpcmVjdG9yczxici8+XCIpO1wibGF1bmRyeVwiPT1iLnNob3AmJihhKz1cImxhdW5kcnk8YnIvPlwiKTtcbiAgICBcImRyeV9jbGVhbmluZ1wiPT1iLnNob3AmJihhKz1cImRyeSBjbGVhbmluZzxici8+XCIpO1wibW9uZXlfbGVuZGVyXCI9PWIuc2hvcCYmKGErPVwibW9uZXkgbGVuZGVyPGJyLz5cIik7XCJwYXduYnJva2VyXCI9PWIuc2hvcCYmKGErPVwicGF3bmJyb2tlcjxici8+XCIpO1wicGV0XCI9PWIuc2hvcCYmKGErPVwicGV0IHNob3A8YnIvPlwiKTtcInB5cm90ZWNobmljc1wiPT1iLnNob3AmJihhKz1cInB5cm90ZWNobmljcyBzaG9wPGJyLz5cIik7XCJyZWxpZ2lvblwiPT1iLnNob3AmJihhKz1cInJlbGlnaW9uPGJyLz5cIik7XCJiZWF1dHlcIj09Yi5zaG9wJiYoYSs9XCJiZWF1dHk8YnIvPlwiKTtcInNvbGFyaXVtXCI9PWIuc2hvcCYmKGErPVwic29sYXJpdW08YnIvPlwiKTtcInRvYmFjY29cIj09Yi5zaG9wJiYoYSs9XCJ0b2JhY2NvIHNob3A8YnIvPlwiKTtcInRveXNcIj09Yi5zaG9wJiYoYSs9XCJ0b3lzIHNob3A8YnIvPlwiKTtcInRyYXZlbF9hZ2VuY3lcIj09Yi5zaG9wJiYoYSs9XCJ0cmF2ZWwgYWdlbmN5PGJyLz5cIik7XCJtYXJrZXRfaGFsbFwiPT1iLnNob3AmJlxuICAgIChhKz1cIm1hcmtldCBoYWxsPGJyLz5cIik7XCJ2YWNhbnRcIj09Yi5zaG9wJiYoYSs9XCJ2YWNhbnQ8YnIvPlwiKTtcIndlYXBvbnNcIj09Yi5zaG9wJiYoYSs9XCJ3ZWFwb25zIHNob3A8YnIvPlwiKTtcImxvdHRlcnlcIj09Yi5nYW1ibGluZyYmKGErPVwibG90dGVyeTxici8+XCIpO1wiZmlzaFwiPT1iLnBldCYmKGErPVwiZmlzaGtlZXBpbmc8YnIvPlwiKTtcImFncml1Y3VsdHVyYWxfZW5naW5lc1wiPT1iLmNyYWZ0JiYoYSs9XCJhZ3JpdWN1bHR1cmFsIGVuZ2luZXM8YnIvPlwiKTtcImJhc2tldF9tYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJiYXNrZXQgbWFrZXI8YnIvPlwiKTtcImJlZWtlZXBlclwiPT1iLmNyYWZ0JiYoYSs9XCJiZWVrZWVwZXI8YnIvPlwiKTtcImJsYWNrc21pdGhcIj09Yi5jcmFmdCYmKGErPVwiYmxhY2tzbWl0aDxici8+XCIpO1wiYnJld2VyeVwiPT1iLmNyYWZ0JiYoYSs9XCJicmV3ZXJ5PGJyLz5cIik7XCJ5ZXNcIj09Yi5taWNyb2JyZXdlcnkmJihhKz1cIm1pY3JvLWJyZXdlcnk8YnIvPlwiKTtcImJvYXRidWlsZGVyXCI9PWIuY3JhZnQmJlxuICAgIChhKz1cImJvYXRidWlsZGVyPGJyLz5cIik7XCJib29rYmluZGVyXCI9PWIuY3JhZnQmJihhKz1cImJvb2tiaW5kZXI8YnIvPlwiKTtcImJ1aWxkZXJcIj09Yi5jcmFmdCYmKGErPVwiaG91c2VidWlsZGluZzxici8+XCIpO1wiY2FycGVudGVyXCI9PWIuY3JhZnQmJihhKz1cImNhcnBlbnRlciwgd29vZHdvcmtlciwgam9pbmVyPGJyLz5cIik7XCJjYXJwZXRfbGF5ZXJcIj09Yi5jcmFmdCYmKGErPVwiY2FycGV0IGxheWVyPGJyLz5cIik7XCJjYXRlcmVyXCI9PWIuY3JhZnQmJihhKz1cImNhdGVyZXI8YnIvPlwiKTtcImNsb2NrbWFrZXJcIj09Yi5jcmFmdCYmKGErPVwiY2xvY2ttYWtlcjxici8+XCIpO1wiY29uZmVjdGlvbmVyeVwiPT1iLmNyYWZ0JiYoYSs9XCJjb25mZWN0aW9uZXJ5PGJyLz5cIik7XCJkcmVzc21ha2VyXCI9PWIuY3JhZnQmJihhKz1cImRyZXNzbWFrZXI8YnIvPlwiKTtcImVsZWN0cmljaWFuXCI9PWIuY3JhZnQmJihhKz1cImVsZWN0cmljaWFuPGJyLz5cIik7XCJnYXJkZW5lclwiPT1iLmNyYWZ0JiYoYSs9XCJnYXJkZW5lciwgbGFuZHNjYXBlcjxici8+XCIpO1xuICAgIFwiZ2xhemllcnlcIj09Yi5jcmFmdCYmKGErPVwiZ2xhemllcnk8YnIvPlwiKTtcImhhbmRpY3JhZnRcIj09Yi5jcmFmdCYmKGErPVwiaGFuZGljcmFmdDxici8+XCIpO1wiaHZhY1wiPT1iLmNyYWZ0JiYoYSs9XCJoZWF0aW5nLCB2ZW50aWxhdGlvbiBhbmQgYWlyLWNvbmRpdGlvbmluZyB0ZWNobm9sb2d5IChIVkFDKTxici8+XCIpO1wiaW5zdWxhdGlvblwiPT1iLmNyYWZ0JiYoYSs9XCJ0aGVybWFsIGluc3VsYXRpb248YnIvPlwiKTtcImpld2VsbGVyXCI9PWIuY3JhZnQmJihhKz1cImpld2VsbGVyLCBnb2xkLS9zaWx2ZXJzbWl0aHM8YnIvPlwiKTtcImtleV9jdXR0ZXJcIj09Yi5jcmFmdCYmKGErPVwia2V5IGN1dHRlcjxici8+XCIpO1wibG9ja3NtaXRoXCI9PWIuY3JhZnQmJihhKz1cImxvY2tzbWl0aDxici8+XCIpO1wibWV0YWxfY29uc3RydWN0aW9uXCI9PWIuY3JhZnQmJihhKz1cIm1ldGFsd29ya2VyPGJyLz5cIik7XCJvcHRpY2lhblwiPT1iLmNyYWZ0JiYoYSs9XCJvcHRpY2lhbjxici8+XCIpO1wicGFpbnRlclwiPT1iLmNyYWZ0JiYoYSs9XG4gICAgICAgIFwicGFpbnRlcjxici8+XCIpO1wicGFycXVldF9sYXllclwiPT1iLmNyYWZ0JiYoYSs9XCJwYXJxdWV0IGxheWVyPGJyLz5cIik7XCJwaG90b2dyYXBoZXJcIj09Yi5jcmFmdCYmKGErPVwicGhvdG9ncmFwaGVyPGJyLz5cIik7XCJwaG90b2dyYXBoaWNfbGFib3JhdG9yeVwiPT1iLmNyYWZ0JiYoYSs9XCJwaG90b2dyYXBoaWMgbGFib3JhdG9yeTxici8+XCIpO1wicGxhc3RlcmVyXCI9PWIuY3JhZnQmJihhKz1cInBsYXN0ZXJlcjxici8+XCIpO1wicGx1bWJlclwiPT1iLmNyYWZ0JiYoYSs9XCJwbHVtYmVyPGJyLz5cIik7XCJwb3R0ZXJ5XCI9PWIuY3JhZnQmJihhKz1cInBvdHRlcnk8YnIvPlwiKTtcInJpZ2dlclwiPT1iLmNyYWZ0JiYoYSs9XCJzaGlwIHJpZ2dlcjxici8+XCIpO1wicm9vZmVyXCI9PWIuY3JhZnQmJihhKz1cInJvb2Zlcjxici8+XCIpO1wic2FkZGxlclwiPT1iLmNyYWZ0JiYoYSs9XCJzYWRkbGVyPGJyLz5cIik7XCJzYWlsbWFrZXJcIj09Yi5jcmFmdCYmKGErPVwic2FpbG1ha2VyPGJyLz5cIik7XCJzYXdtaWxsXCI9PWIuY3JhZnQmJihhKz1cbiAgICAgICAgXCJzYXdtaWxsPGJyLz5cIik7XCJzY2FmZm9sZGVyXCI9PWIuY3JhZnQmJihhKz1cInNjYWZmb2xkZXI8YnIvPlwiKTtcInNjdWxwdG9yXCI9PWIuY3JhZnQmJihhKz1cInNjdWxwdG9yPGJyLz5cIik7XCJzaG9lbWFrZXJcIj09Yi5jcmFmdCYmKGErPVwic2hvZW1ha2VyPGJyLz5cIik7XCJzdGFuZF9idWlsZGVyXCI9PWIuY3JhZnQmJihhKz1cImV4aGliaXRpb24gc3RhbmQgYnVpbGRlcjxici8+XCIpO1wic3RvbmVtYXNvblwiPT1iLmNyYWZ0JiYoYSs9XCJzdG9uZW1hc29uPGJyLz5cIik7XCJzdW5fcHJvdGVjdGlvblwiPT1iLmNyYWZ0JiYoYSs9XCJjb25zdHJ1Y3RvciBmb3Igc3VuIHByb3RlY3Rpb24sIHZlbmV0aWFuIGJsaW5kLCBzaHV0dGVyPGJyLz5cIik7XCJzd2VlcFwiPT1iLmNyYWZ0JiYoYSs9XCJjaGltbmV5IHN3ZWVwPGJyLz5cIik7XCJ0YWlsb3JcIj09Yi5jcmFmdCYmKGErPVwidGFpbG9yPGJyLz5cIik7XCJ0aWxlclwiPT1iLmNyYWZ0JiYoYSs9XCJ0aWxlcjxici8+XCIpO1widGluc21pdGhcIj09Yi5jcmFmdCYmKGErPVwidGluc21pdGgsIG1ldGFsd29ya2VyPGJyLz5cIik7XG4gICAgXCJ1cGhvbHN0ZXJlclwiPT1iLmNyYWZ0JiYoYSs9XCJ1cGhvbHN0ZXJlcjxici8+XCIpO1wid2F0Y2htYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJ3YXRjaG1ha2VyPGJyLz5cIik7XCJ3aW5kb3dfY29uc3RydWN0aW9uXCI9PWIuY3JhZnQmJihhKz1cIndpbmRvdyBjb25zdHJ1Y3Rvcjxici8+XCIpO1wibWFjaGluZXNcIj09Yi5yZW50YWwmJihhKz1cInJlbnRhbCBwYXJrIGZvciBtYWNoaW5lczxici8+XCIpO1wiY2FyX3JlbnRhbFwiPT1iLmFtZW5pdHkmJihhKz1cImNhciByZW50YWwgY29tcGFueTxici8+XCIpO1wiYWxsb3RtZW50c1wiPT1iLmxhbmR1c2UmJihhKz1cImFsbG90bWVudCBnYXJkZW48YnIvPlwiKTtcImJhc2luXCI9PWIubGFuZHVzZSYmKGErPVwiaG9sZGluZyByZXNlcnZvaXI8YnIvPlwiKTtcImJyb3duZmllbGRcIj09Yi5sYW5kdXNlJiYoYSs9XCJicm93bmZpZWxkPGJyLz5cIik7XCJjb21tZXJjaWFsXCI9PWIubGFuZHVzZSYmKGErPVwiY29tbWVyY2lhbCBhcmVhPGJyLz5cIik7XCJjb25zdHJ1Y3Rpb25cIj09Yi5sYW5kdXNlJiZcbiAgICAoYSs9XCJjb25zdHJ1Y3Rpb24gYXJlYTxici8+XCIpO1wiZmFybWxhbmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJmYXJtbGFuZDxici8+XCIpO1wiZmFybXlhcmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJmYXJteWFyZDxici8+XCIpO1wiZm9yZXN0XCI9PWIubGFuZHVzZSYmKGErPVwiZm9yZXN0PGJyLz5cIik7XCJnYXJhZ2VzXCI9PWIubGFuZHVzZSYmKGErPVwiZ2FyYWdlczxici8+XCIpO1wiZ3Jhc3NcIj09Yi5sYW5kdXNlJiYoYSs9XCJncmFzczxici8+XCIpO1wiZ3JlZW5maWVsZFwiPT1iLmxhbmR1c2UmJihhKz1cImdyZWVuZmllbGQ8YnIvPlwiKTtcImdyZWVuaG91c2VfaG9ydGljdWx0dXJlXCI9PWIubGFuZHVzZSYmKGErPVwiZ3JlZW5ob3VzZSBob3J0aWN1bHR1cmU8YnIvPlwiKTtcImluZHVzdHJpYWxcIj09Yi5sYW5kdXNlJiYoYSs9XCJpbmR1c3RyeSBhcmVhPGJyLz5cIik7XCJsYW5kZmlsbFwiPT1iLmxhbmR1c2UmJihhKz1cImxhbmRmaWxsPGJyLz5cIik7XCJtZWFkb3dcIj09Yi5sYW5kdXNlJiYoYSs9XCJtZWFkb3c8YnIvPlwiKTtcIm9yY2hhcmRcIj09XG4gICAgYi5sYW5kdXNlJiYoYSs9XCJvcmNoYXJkPGJyLz5cIik7XCJwbGFudF9udXJzZXJ5XCI9PWIubGFuZHVzZSYmKGErPVwicGxhbnQgbnVyc2VyeTxici8+XCIpO1wicXVhcnJ5XCI9PWIubGFuZHVzZSYmKGErPVwicXVhcnJ5PGJyLz5cIik7XCJyYWlsd2F5XCI9PWIubGFuZHVzZSYmKGErPVwicmFpbHdheTxici8+XCIpO1wicmVjcmVhdGlvbl9ncm91bmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJyZWNyZWF0aW9uIGdyb3VuZDxici8+XCIpO1wicmVzZXJ2b2lyXCI9PWIubGFuZHVzZSYmKGErPVwicmVzZXJ2b2lyPGJyLz5cIik7XCJyZXNpZGVudGlhbFwiPT1iLmxhbmR1c2UmJihhKz1cInJlc2lkZW50aWFsPGJyLz5cIik7XCJyZXRhaWxcIj09Yi5sYW5kdXNlJiYoYSs9XCJyZXRyYWlsPGJyLz5cIik7XCJzYWx0X3BvbmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJzYWx0IHBvbmQ8YnIvPlwiKTtcInZpbGxhZ2VfZ3JlZW5cIj09Yi5sYW5kdXNlJiYoYSs9XCJ2aWxsYWdlIGdyZWVuPGJyLz5cIik7XCJ2aW5leWFyZFwiPT1iLmxhbmR1c2UmJihhKz1cInZpbmV5YXJkPGJyLz5cIik7XG4gICAgXCJwb25kXCI9PWIubGFuZHVzZSYmKGErPVwicG9uZDxici8+XCIpO1wic2FsdF9wb25kXCI9PWIubGFuZHVzZSYmKGErPVwic2FsdCBwb25kPGJyLz5cIik7XCJhbmltYWxfa2VlcGluZ1wiPT1iLmxhbmR1c2UmJihhKz1cImFuaW1hbCBrZWVwaW5nPGJyLz5cIik7XCJ5ZXNcIj09Yi5lbnRyYW5jZSYmKGErPVwiZW50cmFuY2U8YnIvPlwiKTtcIm1haW5cIj09Yi5lbnRyYW5jZSYmKGErPVwibWFpbi1lbnRyYW5jZTxici8+XCIpO1wic2VydmljZVwiPT1iLmVudHJhbmNlJiYoYSs9XCJyZWFyIGV4aXQgZm9yIHN0YWZmaW5nIGFuZCBzdXBwbGllcnM8YnIvPlwiKTtcImV4aXRcIj09Yi5lbnRyYW5jZSYmKGErPVwiZXhpdDxici8+XCIpO1wiZW1lcmdlbmN5XCI9PWIuZW50cmFuY2UmJihhKz1cImVtZXJnZW5jeTxici8+XCIpO1wiYmF5XCI9PWIubmF0dXJhbCYmKGErPVwiYmF5PGJyLz5cIik7XCJiZWFjaFwiPT1iLm5hdHVyYWwmJihhKz1cImJlYWNoPGJyLz5cIik7XCJ3b29kXCI9PWIubmF0dXJhbCYmKGErPVwid29vZDxici8+XCIpO1wiZ2xhY2llclwiPT1iLm5hdHVyYWwmJlxuICAgIChhKz1cImdsYWNpZXI8YnIvPlwiKTtcImNhdmVfZW50cmFuY2VcIj09Yi5uYXR1cmFsJiYoYSs9XCJjYXZlIGVudHJhbmNlPGJyLz5cIik7XCJzcHJpbmdcIj09Yi5uYXR1cmFsJiYoYSs9XCJzcHJpbmc8YnIvPlwiKTtcIndhdGVyZmFsbFwiPT1iLm5hdHVyYWwmJihhKz1cIndhdGVyZmFsbDxici8+XCIpO1wic2NydWJcIj09Yi5uYXR1cmFsJiYoYSs9XCJzY3J1Yjxici8+XCIpO1wiZ3Jhc3NsYW5kXCI9PWIubmF0dXJhbCYmKGErPVwiZ3Jhc3NsYW5kPGJyLz5cIik7XCJ3ZXRsYW5kXCI9PWIubmF0dXJhbCYmKGErPVwid2V0bGFuZDxici8+XCIpO1widHJlZVwiPT1iLm5hdHVyYWwmJihhKz1cInRyZWVcIik7XCJwZWFrXCI9PWIubmF0dXJhbCYmXCJ5ZXNcIj09YltcInN1bW1pdDpjcm9zc1wiXSYmKGErPVwiY3Jvc3Mgb24gdGhlIHN1bW1pdCBvZiBhIG1vdW50YWluPGJyLz5cIik7XCJ0cmVlX3Jvd1wiPT1iLm5hdHVyYWwmJihhKz1cInRyZWUgcm93LCBhbGxleSBvZiB0cmVlczxici8+XCIpO1wiaGVhdGhcIj09Yi5uYXR1cmFsJiYoYSs9XCJoZWF0aDxici8+XCIpO1xuICAgIFwibW9vclwiPT1iLm5hdHVyYWwmJihhKz1cIm1vb3I8YnIvPlwiKTtcImdyYXNzbGFuZFwiPT1iLm5hdHVyYWwmJihhKz1cImdyYXNzbGFuZDxici8+XCIpO1wiZmVsbFwiPT1iLm5hdHVyYWwmJihhKz1cImdyYXNsYW5kIGFib3ZlIHRoZSB0cmVlIGxhbmQ8YnIvPlwiKTtcImJhcmVfcm9ja1wiPT1iLm5hdHVyYWwmJihhKz1cImJhcmUgcm9jazxici8+XCIpO1wic2NyZWVcIj09Yi5uYXR1cmFsJiYoYSs9XCJzY3JlZTxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJihhKz1cInZvbGNhbm88YnIvPlwiKTtcInZhbGxleVwiPT1iLm5hdHVyYWwmJihhKz1cInZhbGxleTxici8+XCIpO1wic3RvbmVcIj09Yi5uYXR1cmFsJiYoYSs9XCJzdG9uZTxici8+XCIpO1wic2VhXCI9PWIubmF0dXJhbCYmKGErPVwic2VhPGJyLz5cIik7XCJuYXRpb25hbF9wYXJrXCI9PWIuYm91bmRhcnkmJihhKz1cIm5hdGlvbmFsIHBhcms8YnIvPlwiKTtcInByb3RlY3RlZF9hcmVhXCI9PWIuYm91bmRhcnkmJihhKz1cInByb3RlY3RlZCBhcmVhPGJyLz5cIik7XCJ5ZXNcIj09Yi5tb3VudGFpbl9wYXNzJiZcbiAgICAoYSs9XCJtb3VudGFpbiBwYXNzPGJyLz5cIik7XCJ3YXRlcmZhbGxcIj09Yi53YXRlcndheSYmKGErPVwid2F0ZXJmYWxsPGJyLz5cIik7XCJjYW5hbFwiPT1iLndhdGVyd2F5JiYoYSs9XCJjYW5hbDxici8+XCIpO1wiY2FuYWxcIj09Yi53YXRlciYmKGErPVwiY2FuYWw8YnIvPlwiKTtcInJpdmVyXCI9PWIud2F0ZXJ3YXkmJihhKz1cInJpdmVyPGJyLz5cIik7XCJyaXZlclwiPT1iLndhdGVyJiYoYSs9XCJyaXZlcjxici8+XCIpO1wicml2ZXJiYW5rXCI9PWIud2F0ZXJ3YXkmJihhKz1cInJpdmVyPGJyLz5cIik7XCJkaXRjaFwiPT1iLndhdGVyd2F5JiYoYSs9XCJkaXRjaDxici8+XCIpO1wic3RyZWFtXCI9PWIud2F0ZXJ3YXkmJihhKz1cInN0cmVhbTxici8+XCIpO1wiZmVycnlcIj09Yi5yb3V0ZSYmKGErPVwiZmVycnk8YnIvPlwiKTtcInR1cm5pbmdfcG9pbnRcIj09Yi53YXRlcndheSYmKGErPVwidHVybmluZyBwb2ludDxici8+XCIpO2lmKFwibGFrZVwiPT1iLndhdGVyfHxcIndhdGVyXCI9PWIubmF0dXJhbClhKz1cImxha2U8YnIvPlwiO1wiY292ZVwiPT1iLndhdGVyJiZcbiAgICAoYSs9XCJjb3ZlPGJyLz5cIik7XCJsYWdvb25cIj09Yi53YXRlciYmKGErPVwibGFnb29uPGJyLz5cIik7XCJwb25kXCI9PWIud2F0ZXImJihhKz1cInBvbmQ8YnIvPlwiKTtcInJlc2Vydm9pclwiPT1iLndhdGVyJiYoYSs9XCJ3YXRlcnJlc2Vydm9pcjxici8+XCIpO1wib3hib3dcIj09Yi53YXRlciYmKGErPVwib3hib3cgbGFrZTxici8+XCIpO1wibG9ja1wiPT1iLndhdGVyJiYoYSs9XCJsb2NrIGNoYW1iZXI8YnIvPlwiKTtcIm1vYXRcIj09Yi53YXRlciYmKGErPVwiY2FzdGxlIG1vYXQ8YnIvPlwiKTtcIndhc3Rld2F0ZXJcIj09Yi53YXRlciYmKGErPVwid2FzdGV3YXRlciB0cmVhdG1lbnQgcGxhbnQ8YnIvPlwiKTtcImd1ZXN0XCI9PWIubW9vcmluZyYmXCJwaWVyXCI9PWIubWFuX21hZGV8fFwidmlzaXRvcl9iZXJ0aFwiPT1iW1wic2VhbWFyazpzbWFsbF9jcmFmdF9mYWNpbGl0eTpjYXRlZ29yeVwiXT9hKz1cImdhc3Ryb2ludGVzdGluYWw8YnIvPlwiOlwicGllclwiPT1iLm1hbl9tYWRlJiYoYSs9XCJwaWVyPGJyLz5cIik7XCJib2F0eWFyZFwiPT1iLndhdGVyd2F5JiZcbiAgICAoYSs9XCJib2F0eWFyZDxici8+XCIpO1wibW9vcmluZ1wiPT1iW1wic2VhbWFyazp0eXBlXCJdJiZcImRvbHBoaW5cIj09YltcInNlYW1hcms6bW9vcmluZzpjYXRlZ29yeVwiXSYmKGErPVwiZG9scGhpbjxici8+XCIpO1wiZm9vdFwiPT1iLnJvdXRlJiYoYSs9XCJmb290cGF0aDxici8+XCIpO1wiaGlraW5nXCI9PWIucm91dGUmJihhKz1cImhpa2luZyB0cmFpbDxici8+XCIpO2lmKFwieWVzXCI9PWIuaGlraW5nJiZcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSlhKz1cImRpcmVjdGlvbiBib2FyZDxici8+XCI7ZWxzZSBpZihcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSYmXCJpbmZvcm1hdGlvblwiPT1iLnRvdXJpc20paWYoYi5pbmZvcm1hdGlvbilzd2l0Y2goYi5pbmZvcm1hdGlvbil7Y2FzZSBcImJvYXJkXCI6YSs9XCJkaXJlY3Rpb24gYm9hcmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtYXBcIjphKz1cImRpcmVjdGlvbiBib2FyZCB3aXRoIGEgbWFwPGJyLz5cIjticmVhaztjYXNlIFwib2ZmaWNlXCI6YSs9XCJ0b3VyaXN0IGluZm9ybWF0aW9uIG9mZmljZTxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJ0ZXJtaW5hbFwiOmErPVwidG91cmlzdCBpbmZvcm1hdGlvbiB0ZXJtaW5hbDxici8+XCI7YnJlYWs7Y2FzZSBcImF1ZGlvZ3VpZGVcIjphKz1cImF1ZGlvZ3VpZGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJndWlkZXBvc3RcIjphKz1cImd1aWRlcG9zdDxici8+XCI7YnJlYWs7Y2FzZSBcInRhY3RpbGVfbWFwXCI6YSs9XCJ0YWN0aWxlIG1hcDxici8+XCI7YnJlYWs7Y2FzZSBcInRhY3RpbGVfbW9kZWxcIjphKz1cInRhY3RpbGUgbW9kZWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyb3V0ZV9tYXJrZXJcIjphKz1cInJvdXRlIG1hcmtlcjxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cImRpcmVjdGlvbiBib2FyZDxici8+XCJ9ZWxzZSBhKz1cImRpcmVjdGlvbiBib2FyZDxici8+XCI7XCJiaWN5Y2xlXCI9PWIucm91dGUmJihhKz1cImN5Y2xlIHRyYWNrPGJyLz5cIik7XCJtdGJcIj09Yi5yb3V0ZSYmKGErPVwibW91bnRhaW4gYmlrZSByb3V0ZTxici8+XCIpO1wiaG9yc2VcIj09Yi5yb3V0ZSYmKGErPVwiYnJpZGxld2F5PGJyLz5cIik7XCJjb2FzdGxpbmVcIj09XG4gICAgYi5uYXR1cmFsJiYoYSs9XCJjb2FzdGxpbmU8YnIvPlwiKTtcImNsaWZmXCI9PWIubmF0dXJhbCYmKGErPVwiY2xpZmY8YnIvPlwiKTtcImRhbVwiPT1iLndhdGVyd2F5JiYoYSs9XCJkYW08YnIvPlwiKTtcIndlaXJcIj09Yi53YXRlcndheSYmKGErPVwid2Vpcjxici8+XCIpO1wibG9ja19nYXRlXCI9PWIud2F0ZXJ3YXkmJihhKz1cImxvY2sgZ2F0ZTxici8+XCIpO1wieWVzXCI9PWIubG9jayYmKGErPVwibG9jazxici8+XCIpO1wic2x1aWNlX2dhdGVcIj09Yi53YXRlcndheSYmKGErPVwic2x1aWNlIGdhdGU8YnIvPlwiKTtcInB1bXBpbmdfc3RhdGlvblwiPT1iLm1hbl9tYWRlJiYoYSs9XCJwdW1waW5nIHN0YXRpb248YnIvPlwiKTtcImdyb3luZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJncm95bmU8YnIvPlwiKTtcImR5a2VcIj09Yi5tYW5fbWFkZSYmKGErPVwiZHlrZTxici8+XCIpO1wibGV2ZWVcIj09Yi5tYW5fbWFkZSYmKGErPVwibGV2ZWU8YnIvPlwiKTtcIndhdGVybWlsbFwiPT1iLm1hbl9tYWRlJiYoYSs9XCJ3YXRlcm1pbGw8YnIvPlwiKTtcImFpcmZpZWxkXCI9PVxuICAgIGIubWlsaXRhcnkmJihhKz1cIm1pbGl0YXJ5IGFpcmZpZWxkPGJyLz5cIik7XCJuYXZhbF9iYXNlXCI9PWIubWlsaXRhcnkmJihhKz1cIm5hdmFsIGJhc2U8YnIvPlwiKTtcInJhbmdlXCI9PWIubWlsaXRhcnkmJihhKz1cIm1pbGl0YXJ5IHJhbmdlPGJyLz5cIik7XCJtaWxpdGFyeVwiPT1iLmxhbmR1c2UmJihhKz1cIm1pbGl0YXJ5IGxhbmQgdXNlPGJyLz5cIik7XCJ0cmFpbmluZ19hcmVhXCI9PWIubWlsaXRhcnkmJihhKz1cIm1pbGl0YXJ5IHRyYWluaW5nIGFyZWE8YnIvPlwiKTtcImV4Y2x1c2lvbl96b25lXCI9PWIubWlsaXRhcnkmJihhKz1cIm1pbGl0YXJ5IGV4Y2x1c2lvbiB6b25lPGJyLz5cIik7XCJkYW5nZXJfYXJlYVwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJtaWxpdGFyeSBkYW5nZXIgYXJlYTxici8+XCIpO1wiYmFycmFja3NcIj09Yi5taWxpdGFyeSYmKGErPVwiYmFycmFja3M8YnIvPlwiKTtcIm51Y2xlYXJfZXhwbG9zaW9uX3NpdGVcIj09Yi5taWxpdGFyeSYmKGErPVwibWlsaXRhcnkgbnVjbGVhciBleHBsb3Npb24gc2l0ZTxici8+XCIpO1xuICAgIFwieWVzXCI9PWIuY29uc3RydWN0aW9uP2ErPVwiY29uc3RydWN0aW9uPGJyLz5cIjpcImNvbnN0cnVjdGlvblwiPT1iLmhpZ2h3YXkmJihhKz1cImNvbnN0cnVjdGlvbjxici8+XCIpO1wicGV0cm9sZXVtX3dlbGxcIj09Yi5tYW5fbWFkZSYmKGErPVwicGV0cm9sZXVtIHdlbGw8YnIvPlwiKTtcInN0b3JhZ2VfdGFua1wiPT1iLm1hbl9tYWRlJiYoYSs9XCJzdG9yYWdlIHRhbms8YnIvPlwiKTtcIndhc3Rld2F0ZXJfcGxhbnRcIj09Yi5tYW5fbWFkZSYmKGErPVwid2FzdGV3YXRlciBwbGFudDxici8+XCIpO1wic2lsb1wiPT1iLm1hbl9tYWRlJiYoYSs9XCJzaWxvPGJyLz5cIik7XCJ3YXRlcl90b3dlclwiPT1iLm1hbl9tYWRlJiYoYSs9XCJ3YXRlciB0b3dlcjxici8+XCIpO1wid2luZG1pbGxcIj09Yi5tYW5fbWFkZSYmKGErPVwid2luZG1pbGw8YnIvPlwiKTtcIm1vbml0b3Jpbmdfc3RhdGlvblwiPT1iLm1hbl9tYWRlJiYoYSs9XCJtb25pdG9yaW5nIHN0YXRpb25cIik7XCJjcmFuZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJjcmFuZVwiKTtcImxpZ2h0aG91c2VcIj09XG4gICAgYi5tYW5fbWFkZSYmKGErPVwibGlnaHRob3VzZVwiKTtcImJlYWNvblwiPT1iLm1hbl9tYWRlJiYoYSs9XCJiZWFjb25cIik7XCJicmVha3dhdGVyXCI9PWIubWFuX21hZGUmJihhKz1cImJyZWFrd2F0ZXJcIik7XCJsYW1wXCI9PWIubWFuX21hZGUmJlwic3RyZWV0X2xhbXBcIj09YltcImxhbXA6dHlwZVwiXSYmKGErPVwic3RyZWV0IGxhbXA8YnIvPlwiKTtcImxhbnRlcm5cIj09Yi5saWdodF9zb3VyY2UmJihhKz1cInN0cmVldCBsYW1wXCIpO1wiZmxvb2RsaWdodFwiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwiZmxvb2RsaWdodDxici8+XCIpO1wic2lnbmFsX2xhbXBcIj09Yi5saWdodF9zb3VyY2UmJihhKz1cInNpZ25hbCBsYW1wPGJyLz5cIik7XCJhdmlhdGlvblwiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwiYXZpYXRpb248YnIvPlwiKTtcIndhcm5pbmdcIj09Yi5saWdodF9zb3VyY2UmJihhKz1cIndhcm5pbmc8YnIvPlwiKTtpZihiLmxpZ2h0X3NvdXJjZSYmYltcImxpZ2h0Om1ldGhvZFwiXSlzd2l0Y2goYSs9XCJMaWdodCBUeXA6IFwiLGJbXCJsaWdodDptZXRob2RcIl0pe2Nhc2UgXCJnYXNcIjphKz1cbiAgICAgICAgXCJHYXNcIjticmVhaztjYXNlIFwiZWxlY3RyaWNcIjphKz1cImVsZWN0cmljXCI7YnJlYWs7Y2FzZSBcImluY2FuZGVzY2VudFwiOmErPVwiaW5jYW5kZXNjZW50XCI7YnJlYWs7Y2FzZSBcImhhbG9nZW5cIjphKz1cImhhbG9nZW5cIjticmVhaztjYXNlIFwiZGlzY2hhcmdlXCI6YSs9XCJkaXNjaGFyZ2VcIjticmVhaztjYXNlIFwibWV0YWwtaGFsaWRlXCI6YSs9XCJtZXRhbC1oYWxpZGVcIjticmVhaztjYXNlIFwibmVvblwiOmErPVwibmVvblwiO2JyZWFrO2Nhc2UgXCJzb2RpdW1cIjphKz1cIk5hdHJpdW1kYW1wZmxhbXBlXCI7YnJlYWs7Y2FzZSBcImhpZ2hfcHJlc3N1cmVfc29kaXVtXCI6YSs9XCJoaWdoIHByZXNzdXJlIHNvZGl1bVwiO2JyZWFrO2Nhc2UgXCJsb3dfcHJlc3N1cmVfc29kaXVtXCI6YSs9XCJsb3cgcHJlc3N1cmUgc29kaXVtXCI7YnJlYWs7Y2FzZSBcImZsdW9yZXNjZW50XCI6YSs9XCJGbHVvcmVzY2VudFwiO2JyZWFrO2Nhc2UgXCJtZXJjdXJ5XCI6YSs9XCJNZXJjdXJ5XCI7YnJlYWs7Y2FzZSBcIkxFRFwiOmErPVwiTEVEXCI7YnJlYWs7Y2FzZSBcImxhc2VyXCI6YSs9XG4gICAgICAgIFwiTGFzZXJcIjticmVhaztjYXNlIFwiYXJjXCI6YSs9XCJBcmNcIjticmVhaztkZWZhdWx0OmErPVwiVW5rb3duXCJ9XCJkcmlua2luZ193YXRlclwiPT1iLmFtZW5pdHkmJihhKz1cImRyaW5raW5nIHdhdGVyPGJyLz5cIik7XCJ5ZXNcIj09Yi5kcmlua2luZ193YXRlciYmKGErPVwiZHJpbmtpbmcgd2F0ZXI8YnIvPlwiKTtcIndvcmtzXCI9PWIubWFuX21hZGU/YSs9XCJpbmR1c3RyaWFsIGJ1aWxkaW5nPGJyLz5cIjpcImluZHVzdHJpYWxcIj09Yi5idWlsZGluZz9hKz1cImluZHVzdHJpYWwgYnVpbGRpbmc8YnIvPlwiOlwiaW5kdXN0cmlhbFwiPT1iLmxhbmR1c2U/YSs9XCJpbmR1c3RyaWFsIGFyZWE8YnIvPlwiOlwiaW5kdXN0cmlhbFwiPT1iLmFidXR0ZXJzP2ErPVwiaW5kdXN0cmlhbCBhcmVhPGJyLz5cIjpcImNvbW1lcmNpYWxcIj09Yi5hYnV0dGVycyYmKGErPVwiY29tbWVyY2lhbDxici8+XCIpO2lmKGJbXCJnZW5lcmF0b3I6c291cmNlXCJdKXN3aXRjaChhKz1cImluc3RhbGxhdGlvbjogXCIsYltcImdlbmVyYXRvcjpzb3VyY2VcIl0pe2Nhc2UgXCJiaW9tYXNzXCI6YSs9XG4gICAgICAgIFwiYmlvbWFzc1wiO2JyZWFrO2Nhc2UgXCJiaW9mdWVsXCI6YSs9XCJiaW9mdWVsXCI7YnJlYWs7Y2FzZSBcImJpb2dhc1wiOmErPVwiYmlvZ2FzXCI7YnJlYWs7Y2FzZSBcImNvYWxcIjphKz1cImNvYWxcIjticmVhaztjYXNlIFwib2lsXCI6YSs9XCJvaWxcIjticmVhaztjYXNlIFwid2FzdGVcIjphKz1cIndhc3RlXCI7YnJlYWs7Y2FzZSBcIndpbmRcIjphKz1cIndpbmRcIjticmVhaztjYXNlIFwic29sYXJcIjphKz1cInNvbGFyXCI7YnJlYWs7Y2FzZSBcImh5ZHJvXCI6YSs9XCJoeWRyb1wiO2JyZWFrO2Nhc2UgXCJ0aWRhbFwiOmErPVwidGlkYWxcIjticmVhaztjYXNlIFwid2F2ZVwiOmErPVwid2F2ZVwiO2JyZWFrO2Nhc2UgXCJnZW90aGVybWFsXCI6YSs9XCJnZW90aGVybWFsXCI7YnJlYWs7Y2FzZSBcIm9zbW90aWNcIjphKz1cIm9zbW90aWNcIjticmVhaztjYXNlIFwibnVjbGVhclwiOmErPVwibnVjbGVhclwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmtub3duPGJyLz5cIn1cInBob3Rvdm9sdGFpY1wiPT1iLnBvd2VyX3NvdXJjZSYmKGErPVwicGhvdG92b2x0YWljXCIpO1wibGluZVwiPT1cbiAgICBiLnBvd2VyJiYoYSs9XCJwb3dlciBsaW5lPGJyLz5cIik7XCJjYWJsZVwiPT1iLnBvd2VyJiYoYSs9XCJjYWJsZTxici8+XCIpO1wiY2FibGVfZGlzdHJpYnV0aW9uX2NhYmluZXRcIj09Yi5wb3dlciYmKGErPVwiY2FibGUgZGlzdHJpYnV0aW9uIGNhYmluZXQ8YnIvPlwiKTtcInBsYW50XCI9PWIucG93ZXImJihhKz1cInBsYW50PGJyLz5cIik7XCJzdGF0aW9uXCI9PWIucG93ZXImJihhKz1cInN0YXRpb248YnIvPlwiKTtcInN1Yl9zdGF0aW9uXCI9PWIucG93ZXImJihhKz1cInN1YnN0YXRpb248YnIvPlwiKTtcImNvbXBlbnNhdG9yXCI9PWIucG93ZXImJihhKz1cImNvbXBlbnNhdG9yPGJyLz5cIik7XCJjb252ZXJ0ZXJcIj09Yi5wb3dlciYmKGErPVwiY29udmVydGVyPGJyLz5cIik7XCJnZW5lcmF0b3JcIj09Yi5wb3dlciYmKGErPVwiZ2VuZXJhdG9yPGJyLz5cIik7XCJoZWxpb3N0YXRcIj09Yi5wb3dlciYmKGErPVwiaGVsaW9zdGF0PGJyLz5cIik7XCJpbnN1bGF0b3JcIj09Yi5wb3dlciYmKGErPVwiaW5zdWxhdG9yPGJyLz5cIik7XCJidXNiYXJcIj09XG4gICAgYi5saW5lJiYoYSs9XCJidXNiYXI8YnIvPlwiKTtcImJheVwiPT1iLmxpbmUmJihhKz1cImJheTxici8+XCIpO1wibWlub3JfbGluZVwiPT1iLnBvd2VyJiYoYSs9XCJtaW5vciBsaW5lPGJyLz5cIik7XCJwb2xlXCI9PWIucG93ZXImJihhKz1cInBvbGU8YnIvPlwiKTtcInBvcnRhbFwiPT1iLnBvd2VyJiYoYSs9XCJwb3J0YWw8YnIvPlwiKTtcImNhdGVuYXJ5X21hc3RcIj09Yi5wb3dlciYmKGErPVwiY2F0ZW5hcnkgbWFzdDxici8+XCIpO1wic3Vic3RhdGlvblwiPT1iLnBvd2VyJiYoYSs9XCJzdWJzdGF0aW9uPGJyLz5cIik7XCJzd2l0Y2hcIj09Yi5wb3dlciYmKGErPVwic3dpdGNoPGJyLz5cIik7XCJ0ZXJtaW5hbFwiPT1iLnBvd2VyJiYoYSs9XCJ0ZXJtaW5hbDxici8+XCIpO1widG93ZXJcIj09Yi5wb3dlciYmKGErPVwidG93ZXI8YnIvPlwiKTtcInRyYW5zZm9ybWVyXCI9PWIucG93ZXImJihhKz1cInRyYW5zZm9ybWVyPGJyLz5cIik7aWYoYi5iYXJyaWVyKXN3aXRjaChiLmJhcnJpZXIpe2Nhc2UgXCJib2xsYXJkXCI6YSs9XCJib2xsYXJkPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcImN5Y2xlX2JhcnJpZXJcIjphKz1cImN5Y2xlIGJhcnJpZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJnYXRlXCI6YSs9XCJnYXRlPGJyLz5cIjticmVhaztjYXNlIFwiY2hhaW5cIjphKz1cImNoYWluPGJyLz5cIjticmVhaztjYXNlIFwibGlmdF9nYXRlXCI6YSs9XCJsaWZ0IGdhdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ3YWxsXCI6YSs9XCJ3YWxsPGJyLz5cIjticmVhaztjYXNlIFwidG9sbF9ib290aFwiOmErPVwidG9sbCBib290aDxici8+XCI7YnJlYWs7Y2FzZSBcImZlbmNlXCI6c3dpdGNoKGIuZmVuY2VfdHlwZSl7Y2FzZSBcImJhcmJlZF93aXJlXCI6YSs9XCJiYXJiZWQgd2lyZTxici8+XCI7YnJlYWs7Y2FzZSBcIndvb2RcIjphKz1cIndvb2Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaGFpbl9saW5rXCI6YSs9XCJjaGFpbiBsaW5rPGJyLz5cIjticmVhaztjYXNlIFwiZWxlY3RyaWNcIjphKz1cImVsZWN0cmljPGJyLz5cIjticmVhaztjYXNlIFwicmFpbGluZ1wiOmErPVwicmFpbGluZzxici8+XCI7YnJlYWs7Y2FzZSBcIndpcmVcIjphKz1cIndpcmU8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwibWV0YWxcIjphKz1cIm1ldGFsPGJyLz5cIjticmVhaztjYXNlIFwicG9sZVwiOmErPVwicG9sZTxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cImZlbmNlPGJyLz5cIn1icmVhaztjYXNlIFwiYmxvY2tcIjphKz1cImJsb2NrPGJyLz5cIjticmVhaztjYXNlIFwiZGl0Y2hcIjphKz1cImRpdGNoPGJyLz5cIjticmVhaztjYXNlIFwiYm9yZGVyX2NvbnRyb2xcIjphKz1cImJvcmRlciBjb250cm9sPGJyLz5cIjticmVhaztjYXNlIFwiaGVkZ2VcIjphKz1cImhlZGdlPGJyLz5cIjticmVhaztjYXNlIFwicmV0YWluaW5nX3dhbGxcIjphKz1cInJldGFpbmluZyB3YWxsPGJyLz5cIjticmVhaztjYXNlIFwiY2F0dGxlX2dyaWRcIjphKz1cImNhdHRsZSBncmlkPGJyLz5cIjticmVhaztjYXNlIFwiaG9yc2Vfc3RpbGVcIjphKz1cImhvcnNlIHN0aWxlPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidW5rbm93bjxici8+XCJ9XCJub2lzZV9iYXJyaWVyXCI9PWIud2FsbCYmKGErPVwibm9pc2UgYmFycmllcjxici8+XCIpO1wicmV0YWluaW5nX3dhbGxcIj09XG4gICAgYi5kZXNpZ25hdGlvbiYmKGErPVwibm9pc2UgYmFycmllcjxici8+XCIpO1wibm9pc2VfYmFycmllclwiPT1iLmRlc2lnbmF0aW9uJiYoYSs9XCJub2lzZSBiYXJyaWVyPGJyLz5cIik7XCJzdXJ2ZWlsbGFuY2VcIj09Yi5tYW5fbWFkZSYmKGErPVwic3VydmVpbGxhbmNlPGJyLz5cIik7aWYoYi5hZXJvd2F5KXN3aXRjaChhKz1cImFpcnBvcnQ6IFwiLGIuYWVyb3dheSl7Y2FzZSBcImFlcm9kcm9tZVwiOmErPVwiYWlycG9ydFwiO2JyZWFrO2Nhc2UgXCJhcHJvblwiOmErPVwiYXByb25cIjticmVhaztjYXNlIFwiZ2F0ZVwiOmErPVwiZ2F0ZVwiO2JyZWFrO2Nhc2UgXCJoZWxpcGFkXCI6YSs9XCJoZWxpcGFkXCI7YnJlYWs7Y2FzZSBcImhhbmdhclwiOmErPVwiaGFuZ2FyXCI7YnJlYWs7Y2FzZSBcInJ1bndheVwiOmErPVwicnVud2F5XCI7YnJlYWs7Y2FzZSBcInRheGl3YXlcIjphKz1cInRheGl3YXlcIjticmVhaztjYXNlIFwidGVybWluYWxcIjphKz1cInRlcm1pbmFsXCI7YnJlYWs7ZGVmYXVsdDphKz1cInVua25vd248YnIvPlwifVwic3RvcFwiPT1iLnJhaWx3YXkmJlxuICAgIChhKz1cInJhaWx3YXkgc3RvcDxici8+XCIpO1wiY3Jvc3NpbmdcIj09Yi5yYWlsd2F5JiYoYSs9XCJjcm9zc2luZzxici8+XCIpO1wibGV2ZWxfY3Jvc3NpbmdcIj09Yi5yYWlsd2F5JiYoYSs9XCJsdmVsIGNyb3NzaW5nPGJyLz5cIik7XCJzdGF0aW9uXCI9PWIucmFpbHdheSYmKGErPVwic3RhdGlvbjxici8+XCIpO1wiYnVzX3N0YXRpb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJidXMgc3RhdGlvbjxici8+XCIpO1wiYnVzX3N0YXRpb25cIj09IWIuYW1lbml0eSYmKFwic3RhdGlvblwiPT1iLnB1YmxpY190cmFuc3BvcnQmJlwieWVzXCI9PWIuYnVzKSYmKGErPVwiYnVzIHN0YXRpb248YnIvPlwiKTtcInJhaWxcIj09Yi5yYWlsd2F5JiYoYSs9XCJyYWlsd2F5PGJyLz5cIixcImNvbnRhY3RfbGluZVwiPT1iLmVsZWN0cmlmaWVkJiYoYSs9XCJvdmVyaGVhZCBjb250YWN0IGxpbmU8YnIvPlwiKSk7XCJ0cmFtXCI9PWIucmFpbHdheSYmKGErPVwidHJhbTxici8+XCIpO2lmKFwic2xpcHdheVwiPT1iW1wic2VhbWFyazpzbWFsbF9jcmFmdF9mYWNpbGl0eTpjYXRlZ29yeVwiXXx8XG4gICAgICAgIFwic2xpcHdheVwiPT1iLmhhcmJvdXJ8fFwic2xpcHdheVwiPT1iLmxlaXN1cmUpYSs9XCJzbGlwd2F5PGJyLz5cIjtpZihcImhhcmJvdXJcIj09YltcInNlYW1hcms6dHlwZVwiXSlpZihiW1wic2VhbWFyazpoYXJib3VyOmNhdGVnb3J5XCJdKXN3aXRjaChiW1wic2VhbWFyazpoYXJib3VyOmNhdGVnb3J5XCJdKXtjYXNlIFwiZmVycnlcIjphKz1cImZlcnJ5PGJyLz5cIjticmVhaztjYXNlIFwiY29udGFpbmVyXCI6YSs9XCJjb250YWluZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtYXJpbmFcIjpcIm1hcmluYVwiIT1iLmxlaXN1cmUmJihhKz1cIm1hcmluYTxici8+XCIpO2JyZWFrO2Nhc2UgXCJuYXZlbF9iYXNlXCI6YSs9XCJuYXZlbCBiYXNlPGJyLz5cIjticmVhaztjYXNlIFwidGFua2VyXCI6YSs9XCJ0YW5rZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXNzZW5nZXJcIjphKz1cInBhc3Nlbmdlcjxici8+XCI7YnJlYWs7Y2FzZSBcImJ1bGtcIjphKz1cImJ1bGs8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJoYWJvdXI8YnIvPlwifWVsc2UgYSs9XCJoYWJvdXI8YnIvPlwiO1xuICAgIFwibWFyaW5hXCI9PWIubGVpc3VyZSYmKGErPVwibWFyaW5hPGJyLz5cIik7XCJ3cmVja1wiPT1iLmhpc3RvcmljJiYoYSs9XCJ3cmVjazxici8+XCIpO1wiYW5pbWFsX3NoZWx0ZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJhbmltYWwgc2hlbHRlcjxici8+XCIpO1wic2hlbHRlclwiPT1iLmFuaW1hbCYmKGErPVwic2hlbHRlcjxici8+XCIpO1wiaG9yc2Vfd2Fsa2VyXCI9PWIuYW5pbWFsJiYoYSs9XCJob3JzZSB3YWxrZXI8YnIvPlwiKTtcInllc1wiPT1iLmFuaW1hbF9zaGVsdGVyJiYoYSs9XCJhbmltYWwgc2hlbHRlcjxici8+XCIpO1wiZG9nXCI9PWIuYW5pbWFsX3NoZWx0ZXImJihhKz1cImFuaW1hbCBzaGVsdGVyPGJyLz5cIik7XCJjYXRcIj09Yi5hbmltYWxfc2hlbHRlciYmKGErPVwiYW5pbWFsIHNoZWx0ZXI8YnIvPlwiKTtcImFuaW1hbF9ib2FyZGluZ1wiPT1iLmFtZW5pdHkmJihhKz1cImFuaW1hbCBib2FyZGluZzxici8+XCIpO1wieWVzXCI9PWIuYW5pbWFsX2JvYXJkaW5nJiYoYSs9XCJhbmltYWwgYm9hcmRpbmc8YnIvPlwiKTtcImRvZ1wiPT1cbiAgICBiLmFuaW1hbF9ib2FyZGluZyYmKGErPVwiYW5pbWFsIGJvYXJkaW5nPGJyLz5cIik7XCJob3JzZVwiPT1iLmFuaW1hbF9ib2FyZGluZyYmKGErPVwiYW5pbWFsIGJvYXJkaW5nPGJyLz5cIik7XCJjYXRcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cImFuaW1hbCBib2FyZGluZzxici8+XCIpO1wiZG9nO2NhdFwiPT1iLmFuaW1hbF9ib2FyZGluZyYmKGErPVwiYW5pbWFsIGJvYXJkaW5nPGJyLz5cIik7XCJjYXQ7ZG9nXCI9PWIuYW5pbWFsX2JvYXJkaW5nJiYoYSs9XCJhbmltYWwgYm9hcmRpbmc8YnIvPlwiKTtpZihcInNjaG9vbFwiPT1iLmFuaW1hbHx8XCJzcG9ydFwiPT1iLmFuaW1hbHx8XCJhbmltYWxfdHJhaW5pbmdcIj09Yi5hbWVuaXR5KWErPVwiYW5pbWFsIHRyYWluaW5nPGJyLz5cIjtcInN3aW1taW5nXCI9PWIuYW5pbWFsJiYoYSs9XCJzd2ltbWluZyBmb3IgZG9nczxici8+XCIpO2lmKFwiZmVlZGluZ19wbGFjZVwiPT1iLmFtZW5pdHl8fFwiYW5pbWFsX2ZlZWRpbmdcIj09Yi5tYW5fbWFkZXx8XCJhbmltYWxfZmVlZGluZ1wiPT1cbiAgICAgICAgYi5hbWVuaXR5KWErPVwiYW5pbWFsIGZlZWRpbmc8YnIvPlwiO2lmKFwid2lsZGxpZmVfZmVlZGluZ1wiPT1iLmFtZW5pdHl8fFwiZGVlcl9mZWVkaW5nXCI9PWIuYW1lbml0eXx8XCJnYW1lX2ZlZWRpbmdcIj09Yi5hbWVuaXR5KWErPVwid2lsZGxpZmUgZmVlZGluZzxici8+XCI7aWYoXCJjcmF0Y2hcIj09Yi5hbWVuaXR5fHxcImNyYXRjaFwiPT1iLm1hbl9tYWRlfHxcImZlZWRpbmdfcmFja1wiPT1iLmFtZW5pdHkpYSs9XCJmZWVkaW5nIHJhY2s8YnIvPlwiO1wibWFuZ2VyXCI9PWIuYW1lbml0eSYmKGErPVwibWFuZ2VyPGJyLz5cIik7XCJiaXJkaG91c2VcIj09Yi5tYW5fbWFkZSYmKGErPVwiYmlyZGhvdXNlPGJyLz5cIik7XCJzdG9ya1wiPT1iLmJpcmRzX25lc3QmJihhKz1cInN0b3Jjazxici8+XCIpO1wibmVzdF9ib3hcIj09Yi5hbWVuaXR5JiYoYSs9XCJuZXN0IGJveDxici8+XCIpO1wid2VsbG5lc3NcIj09Yi5hbmltYWwmJihhKz1cImRvZyBwYXJsb3VyPGJyLz5cIik7XCJjZW1ldGVyeVwiPT1iLmFuaW1hbCYmKGErPVwic21hbGwgYW5pbWFsIGNlbWV0ZXJ5PGJyLz5cIik7XG4gICAgaWYoXCJzdGFibGVcIj09Yi5idWlsZGluZ3x8XCJzdGFibGVcIj09YltcImJ1aWxkaW5nOnVzZVwiXSlhKz1cInN0YWJsZTxici8+XCI7XCJjb3dzaGVkXCI9PWIuYnVpbGRpbmcmJihhKz1cImNvd3NoZWQ8YnIvPlwiKTtcInN0eVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJzdHk8YnIvPlwiKTtcImJhcm5cIj09Yi5idWlsZGluZyYmKGErPVwiYmFybjxici8+XCIpO1wiZmFybV9hdXhpbGlhcnlcIj09Yi5idWlsZGluZyYmKGErPVwiZmFybSBhdXhpbGlhcnk8YnIvPlwiKTtpZihiW1wicml2ZXI6d2F0ZXJ3YXlfZGlzdGFuY2VcIl18fFwibWlsZXN0b25lXCI9PWIud2F0ZXJ3YXkpYSs9XCJtaWxlc3RvbmUgb2Ygd2F0ZXJ3YXkgZGlzdGFuY2U8YnIvPlwiO1wibWlsZXN0b25lXCI9PWIuaGlnaHdheSYmKGErPVwibWlsZXN0b25lPGJyLz5cIik7XCJtYXJrZXRcIj09YltcInhtYXM6ZmVhdHVyZVwiXSYmKGErPVwiQ2hyaXN0bWFzIGZhaXI8YnIvPlwiKTtcInRyZWVcIj09YltcInhtYXM6ZmVhdHVyZVwiXSYmKGErPVwic2FsZSBvZiBDaHJpc21hcyB0cmVlczxici8+XCIpO1xuICAgIFwiZXZlbnRcIj09YltcInhtYXM6ZmVhdHVyZVwiXSYmKGErPVwiQ2hyaXNtYXMgZXZlbnQ8YnIvPlwiKTtcInB5cmFtaWRcIj09YltcInhtYXM6ZmVhdHVyZVwiXSYmKGErPVwiQ2hyaXNtYXMgcHlyYW1pZDxici8+XCIpO3JldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2hlYWRlcl9mZWF0dXJldHlwZVwiPicrYStcIjxici8+IDwvZGl2PlwifVxuZXhwb3J0IHZhciBmbkNvbnRlbnQ9ZnVuY3Rpb24oYil7dmFyIGE7YT1cIlwiK2ZuQ29udGVudEdlbmVyYWxJbmZvcm1hdGlvbnMoYik7YSs9Zm5Db250ZW50SGVhbHRoY2FyZShiKTthKz1mbkNvbnRlbnRBZXJvZHJvbWUoYik7YSs9Zm5Db250ZW50Q3Vpc2luZShiKTthKz1mbkNvbnRlbnRTaGlwcGluZyhiKTthKz1mbkNvbnRlbnRIeWRyYW50cyhiKTthKz1mbkNvbnRlbnRTcG9ydHMoYik7YSs9Zm5Db250ZW50U3RyZWV0c1RyYWZmaWMoYik7YSs9Zm5Db250ZW50SW5mb3JtYXRpb25DaXR5KGIpO2ErPWZuQ29udGVudEVtZXJnZW5jeShiKTthKz1mbkNvbnRlbnRTdG9yYWdlKGIpO2ErPWZuQ29udGVudEFtZW5pdHkoYik7YSs9Zm5Db250ZW50VG91cmlzbShiKTthKz1mbkNvbnRlbnRSb3V0ZShiKTthKz1mbkNvbnRlbnRQZXRyb2woYik7YSs9Zm5Db250ZW50QmFycmllcnMoYik7YSs9Zm5Db250ZW50TGFuZHVzZShiKTthKz1mbkNvbnRlbnROYXR1cmFsKGIpO2ErPWZuS2xvc3RlckFkZGl0aW9uYWwoYik7XG4gICAgICAgIGErPWZuU2ljaGVyaGVpdEFkZGl0aW9uYWwoYik7YSs9Zm5BZGRpdGlvbmFsQnVpbGRpbmdJbmZvcyhiKTthKz1mbktyYWZ0d2Vya0luZm8oYik7YSs9Zm5NZXNzc3RhdGlvbihiKTthKz1mbldlcnRzdG9mZmluZm8oYik7KGErPWZuQ29udGVudFByb3RlY3RlZEFyZWEoYikpJiYoYT1cIjxici8+XCIrYSk7cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfY29udGVudFwiPicrYStcIjwvZGl2PlwifSxmbkNvbnRlbnRBZXJvZHJvbWU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtiLmFlcm9kcm9tZSYmKFwiaW50ZXJuYXRpb25hbFwiPT1iLmFlcm9kcm9tZSYmKGErPVwidHlwZSBvZiBhaXJwb3J0OiBpbnRlcm5hdGlvbmFsPGJyLz5cIiksXCJyZWdpb25hbFwiPT1iLmFlcm9kcm9tZSYmKGErPVwidHlwZSBvZiBhaXJwb3J0OiByZWdpb25hbDxici8+XCIpLFwiZ2xpZGluZ1wiPT1iLmFlcm9kcm9tZSYmKGErPVwidHlwZSBvZiBhaXJwb3J0OiBnbGlkaW5nPGJyLz5cIiksXCJwcml2YXRlXCI9PWIuYWVyb2Ryb21lJiYoYSs9XG4gICAgICAgIFwidHlwZSBvZiBhaXJwb3J0OiBwcml2YXRlPGJyLz5cIikpO2IuaWF0YSYmKGErPVwiSUFUQS1Db2RlOiBcIitiLmlhdGErXCI8YnIvPlwiKTtiLmljYW8mJihhKz1cIklDQU8tQ29kZTogXCIrYi5pY2FvK1wiPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudE5hdHVyYWw9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihiLmZvcmVzdHx8Yi53b29kKXtpZihcImJyb2FkbGVhdmVkXCI9PWIubGVhZl90eXBlfHxcImRlY2lkdW91c1wiPT1iLndvb2QpYSs9XCJicm9hZGxlYXZlZDxici8+XCI7aWYoXCJuZWVkbGVsZWF2ZWRcIj09Yi5sZWFmX3R5cGV8fFwiY29uaWZlcm91c1wiPT1iLndvb2QpYSs9XCJuZWVkbGVsZWF2ZWQ8YnIvPlwiO2lmKFwibWl4ZWRcIj09Yi5sZWFmX3R5cGV8fFwibWl4ZWRcIj09Yi53b29kKWErPVwibWl4ZWQ8YnIvPlwiO1wibGVhZmxlc3NcIj09Yi5sZWFmX3R5cGUmJihhKz1cImxlYWZsZXNzPGJyLz5cIik7XCJldmVyZ3JlZW5cIj09Yi53b29kJiYoYSs9XCJldmVyZ3JlZW48YnIvPlwiKTtcInBhbG1cIj09Yi53b29kJiYoYSs9XG4gICAgICAgIFwicGFsbTxici8+XCIpO1wibmlwYV9wYWxtXCI9PWIud29vZCYmKGErPVwibmlwYSBwYWxtPGJyLz5cIik7XCJldWNhbHlwdFwiPT1iLndvb2QmJihhKz1cImV1Y2FseXB0PGJyLz5cIik7aWYoXCJmaWxhb1wiPT1iLndvb2R8fFwiY2FzdWFyaW5hXCI9PWIud29vZClhKz1cImNhc3VhcmluYTxici8+XCJ9aWYoXCJ0cmVlXCI9PWIubmF0dXJhbCYmKCFiW1wiZ2VudXM6ZGVcIl0mJiFiW1wic3BlY2llczpkZVwiXSYmYi5sZWFmX3R5cGUmJihhPVwiYnJvYWRsZWF2ZWRcIj09Yi5sZWFmX3R5cGV8fFwiZGVjaWR1b3VzXCI9PWIubGVhZl90eXBlfHxcImJyb2FkbGVhZmVkXCI9PWIubGVhZl90eXBlP2ErXCJicm9hZC1sZWF2ZWQ8YnIvPlwiOmErXCJjb25pZmVyPGJyLz5cIiksYi5nZW51cyYmKGErPWIuZ2VudXMrXCI8YnIvPlwiKSxiW1wiZ2VudXM6ZGVcIl0mJihhKz1iW1wiZ2VudXM6ZGVcIl0rXCI8YnIvPlwiKSxiLnNwZWNpZXMmJihhKz1iLnNwZWNpZXMrXCI8YnIvPlwiKSxiW1wic3BlY2llczpkZVwiXSYmKGErPWJbXCJzcGVjaWVzOmRlXCJdK1wiPGJyLz5cIiksXG4gICAgXCJsYW5kbWFya1wiPT1iLmRlbm90YXRpb24mJihhKz1cImxhbmRtYXJrPGJyLz5cIiksXCJuYXR1cmFsX21vbnVtZW50XCI9PWIuZGVub3RhdGlvbnx8XCJ5ZXNcIj09Yi5tb251bWVudCkpYSs9XCJuYXR1cmFsIG1vbnVtZW50PGJyLz5cIjtcIm1hbmdlclwiPT1iW1wiZmVlZGluZzp0eXBlXCJdJiYoYSs9XCJtYW5nZXI6cmFjayBmb3IgZm9kZGVyPGJyLz5cIik7XCJhdXRvbWF0ZWRcIj09YltcImZlZWRpbmc6dHlwZVwiXSYmKGErPVwiYXV0b21hdGVkPGJyLz5cIik7aWYoYltcImZlZWRpbmc6Zm9yXCJdKXN3aXRjaChiW1wiZmVlZGluZzpmb3JcIl0pe2Nhc2UgXCJzaGVlcFwiOmErPVwiYW5pbWFsOiBzaGVlcDxici8+XCI7YnJlYWs7Y2FzZSBcImhvcnNlXCI6YSs9XCJhbmltYWw6IGhvcnNlPGJyLz5cIjticmVhaztjYXNlIFwiY293XCI6YSs9XCJhbmltYWw6IGNvdzxici8+XCI7YnJlYWs7Y2FzZSBcInJhYmJpdFwiOmErPVwiYW5pbWFsOiByYWJiaXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJidW5ueVwiOmErPVwiYW5pbWFsOiBidW5ueTxici8+XCI7YnJlYWs7XG4gICAgICAgIGNhc2UgXCJjYXRcIjphKz1cImFuaW1hbDogY2F0IDwvYnI+XCI7YnJlYWs7Y2FzZSBcInN3YW5cIjphKz1cImFuaW1hbDogc3dhbiA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJndWluZWEgcGlnXCI6YSs9XCJhbmltYWw6IGd1aW5lYSBwaWcgPC9icj5cIjticmVhaztjYXNlIFwiZG9ua2V5XCI6YSs9XCJhbmltYWw6IGRvbmtleSA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJzcXVpcnJlbFwiOmErPVwiYW5pbWFsOiBzcXVpcnJlbCA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJwaWdcIjphKz1cImFuaW1hbDogcGlnIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImRlZXJcIjphKz1cImFuaW1hbDogZGVlciA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJndWluZWEgcGlnXCI6YSs9XCJhbmltYWw6IGd1aW5lYSBwaWcgPC9icj5cIjticmVhaztjYXNlIFwibW9ua2V5XCI6YSs9XCJhbmltYWw6IG1vbmtleSA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJjYW1lbFwiOmErPVwiYW5pbWFsOiBjYW1lbCA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJnb2F0XCI6YSs9XCJhbmltYWw6IGdvYXQgPC9icj5cIjticmVhaztjYXNlIFwiaGFtc3RlclwiOmErPVxuICAgICAgICAgICAgXCJhbmltYWw6IGhhbXN0ZXIgPC9icj5cIjticmVhaztjYXNlIFwiYWxwYWNhXCI6YSs9XCJhbmltYWw6IGFscGFjYSA8L2JyPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJhbmltYWw6IHVua25vd248YnIvPlwifWlmKGJbXCJmZWVkaW5nOmZvZGRlclwiXSlzd2l0Y2goYltcImZlZWRpbmc6Zm9kZGVyXCJdKXtjYXNlIFwiaGF5XCI6YSs9XCJmZWVkIHdpdGg6IGhheTwvYnI+XCI7YnJlYWs7Y2FzZSBcImdyYWluXCI6YSs9XCJmZWVkIHdpdGg6IGdyYWluPC9icj5cIjticmVhaztjYXNlIFwiY29yblwiOmErPVwiZmVlZCB3aXRoOiBjb3JuPC8qYnI+XCI7YnJlYWs7ZGVmYXVsdDphKz1cImZlZWQgd2l0aDogdW5rbm93bjwvYnI+XCJ9XCJ2b2xjYW5vXCI9PWIubmF0dXJhbCYmXCJhY3RpdmVcIj09Yi5zdGF0dXMmJihhKz1cImFjdGl2ZSB2b2xjYW5vPGJyLz5cIik7XCJ2b2xjYW5vXCI9PWIubmF0dXJhbCYmXCJkb3JtYW50XCI9PWIuc3RhdHVzJiYoYSs9XCJkb3JtYW50IHZvbGNhbm88YnIvPlwiKTtcInZvbGNhbm9cIj09Yi5uYXR1cmFsJiZcImV4dGluY3RcIj09XG4gICAgYi5zdGF0dXMmJihhKz1cImV4dGluY3Qgdm9sY2Fubzxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwic3RyYXRvdm9sY2Fub1wiPT1iLnR5cGUmJihhKz1cInR5cGUgb2Ygdm9sY2FuaXNtOnN0cmF0b3ZvbGNhbm88YnIvPlwiKTtcInZvbGNhbm9cIj09Yi5uYXR1cmFsJiZcInNoaWVsZFwiPT1iLnR5cGUmJihhKz1cInR5cGUgb2Ygdm9sY2FuaXNtOnNoaWVsZDxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwic2NvcmlhXCI9PWIudHlwZSYmKGErPVwidHlwZSBvZiB2b2xjYW5pc206c2NvcmlhPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudFByb3RlY3RlZEFyZWE9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIixjPVwiXCI7XCJwcm90ZWN0ZWRfYXJlYVwiPT1iLmJvdW5kYXJ5JiYoYi5wcm90ZWN0X2NsYXNzJiYoYz1iLnByb3RlY3RfY2xhc3MpLGIucHJvdGVjdF9pZCYmKGM9Yi5wcm90ZWN0X2lkKSxcIjFcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogU3RyaWN0IE5hdHVyZSBSZXNlcnZlLCBXaWxkZXJuZXNzIEFyZWE8YnIvPlwiKSxcbiAgICBcIjJcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogTmF0aW9uYWwgUGFyazxici8+XCIpLFwiM1wiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBOYXR1cmFsIE1vbnVtZW50IG9yIEZlYXR1cmU8YnIvPlwiKSxcIjRcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogSGFiaXRhdC9TcGVjaWVzIE1hbmFnZW1lbnQgQXJlYTxici8+XCIpLFwiNVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBQcm90ZWN0ZWQgTGFuZHNjYXBlLyBTZWFzY2FwZTxici8+XCIpLFwiNlwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBQcm90ZWN0ZWQgYXJlYSB3aXRoIHN1c3RhaW5hYmxlIHVzZSBvZiBuYXR1cmFsIHJlc291cmNlczxici8+XCIpLFwiN1wiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBuYXR1cmUtZmVhdHVyZSBhcmVhPGJyLz5cIiksXCI5N1wiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBwcm90ZWN0ZWQgYnkgY29udGluZW50YWwgYWdyZWVtZW50czxici8+XCIpLFwiOThcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogcHJvdGVjdGVkIGJ5IGludGVyc3RhdGUtIG9yIGludGVybmF0aW9uYWwgY29udmVudGlvbnM8YnIvPlwiKSxcbiAgICBcIjk5XCI9PWMmJihhPVwib3RoZXIgY29udGluZW50YWwgb3IgaW50ZXJuYXRpb25hbCBuYXRpb25hbCBwcm90ZWN0ZWQgYXJlYXMgPGJyLz5cIiksXCIyMVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBDb21tdW5pdHkgbGlmZTogcmVsaWdpb3VzLCBzYWNyZWQgYXJlYXMsIGFzc29jaWF0aXZlIGxvY2F0aW9ucywgcmVjcmVhdGlvbjxici8+XCIpLFwiMjJcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogQ3VsdHVyYWwgYXNzZXRzIChjdWx0dXJhbCBhc3NldHMgYW5kIC0gZWZmb3J0cywgZGlzdHJpY3RzIGhpc3RvcmljYWwgaGVyaXRhZ2UsIG1vbnVtZW50IGNvbnNlcnZhdGlvbik8YnIvPlwiKSxcIjIzXCI9PWMmJihhPVwiZGVzY3JpcHRpb246IFByb3RlY3Rpb24gaW4gZmF2b3Igb2YgZWNvbm9taWNzPGJyLz5cIiksXCIyNFwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBQb2xpdGljYWwgcHJvdGVjdGlvbjxici8+XCIpLFwiMjVcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogTWlsaXRhcnkgYXJlYXMgKG1pbGl0YXJ5IHJlZnVnZXMsIHRlc3QgYXJlYSk8YnIvPlwiKSxcbiAgICBcIjI2XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IEhpc3RvcmljOiBmb3IgY29sb25pYWwtc3R1ZmYgYW5kIHByb3RlY3RvcmF0ZXMuPGJyLz5cIiksXCIyOVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBvdGhlciBzb2NpYWwgcHJvdGVjdGVkIGFyZWFzPGJyLz5cIiksXCIxMVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBzb2lsOiBjcm9wIHlpZWxkLCBlcm9zaW9uIHByb3RlY3Rpb24sIC4uLjxici8+XCIpLFwiMTJcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogd2F0ZXI6IHdhdGVyIHByb3RlY3Rpb24gYXJlYSwgZnJlc2ggd2F0ZXIsIGRyaW5raW5nIHdhdGVyLCBzcHJpbmdzLCAuLi48YnIvPlwiKSxcIjEzXCI9PWMmJihhPSdkZXNjcmlwdGlvbjogY2xpbWF0ZSBhbmQgLWFpcjogZ2FzcGVyIHN1cHBseS9jb2xkIGFpciwgLi4uZm9yIGVtaXNzaW9uLSwgaW1taXNzaW9uIGNvbnRyb2wgaW4gT1NNIGV4aXN0ZW50LCBzZWUgXCJMb3cgRW1pc3Npb24gWm9uZVwiIChMRVopPGJyLz4nKSxcIjE0XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IHNwZWNpZXM6IG5vIGZpc2hpbmcsIHByb3RlY3RlZCBmb3IgZmlzaGVyeSwgcHJvdGVjdGVkIGZvciBodW50aW5nLCBwbGFudHMsIC4uLjxici8+XCIpLFxuICAgIFwiMTVcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogbG9jYXRpb24gY29uZGl0aW9uOiBmbG9vZHdhdGVyIHJldGVudGlvbiBhcmVhLCBwcm90ZWN0aW9uIGZvcmVzdCwgZ3JhemluZyBsYW5kLCAuLi48YnIvPlwiKSxcIjE2XCI9PWMmJihhPSdkZXNjcmlwdGlvbjogbG9uZ3RpbWUgaGF6YXJkIGFyZWE6IGNvbnRhbWluYXRpb24sIGVhcnRoLW1vdmluZyBhcmVhLCBcInByb2JsZW0gc2l0ZXNcIiAuLi48YnIvPicpLFwiMTlcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogb3RoZXIgbmF0aW9uYWwgcmVzb3VyY2VzIHByb3RlY3RlZCBhcmVhczxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50TGFuZHVzZT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO1wicXVhcnJ5XCI9PWIubGFuZHVzZSYmYi5yZXNvdXJjZSYmKGErPVwiUmVzb3VyY2U6IFwiK2IucmVzb3VyY2UrXCI8YnIvPlwiKTtcIm9wZW5fc3RhYmxlXCI9PWJbXCJhbmltYWxfa2VlcGluZzp0eXBlXCJdJiYoYSs9XCJvcGVuIHN0YWJsZTxici8+XCIpO1wiZmllbGRfc2hlbHRlclwiPT1cbiAgICBiW1wiYW5pbWFsX2tlZXBpbmc6dHlwZVwiXSYmKGErPVwiZmllbGQgc2hlbHRlcjxici8+XCIpO1wicGFkZG9ja1wiPT1iW1wiYW5pbWFsX2tlZXBpbmc6dHlwZVwiXSYmKGErPVwicGFkZG9jazxici8+XCIpO2IuYW5pbWFsX2tlZXBpbmcmJihhKz1cImFuaW1hbHM6IGhvcnNlczxici8+XCIpO3JldHVybiBhfSxmbk1lc3NzdGF0aW9uPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6d2F0ZXJfbGV2ZWxcIl0mJihhKz1cIndhdGVyIGxldmVsPGJyLz5cIik7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6c2Vpc21pY19hY3Rpdml0eVwiXSYmKGErPVwic2Vpc21pYyBhY3Rpdml0eTxici8+XCIpO1wieWVzXCI9PWJbXCJtb25pdG9yaW5nOnRpZGVfZ2F1Z2VcIl0mJihhKz1cInRpZGUgZ2F1Z2U8YnIvPlwiKTtcInllc1wiPT1iW1wibW9uaXRvcmluZzp3ZWF0aGVyXCJdJiYoYSs9XCJ3ZWF0aGVyPGJyLz5cIik7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6YWlyX3F1YWxpdHlcIl0mJihhKz1cImFpciBxdWFsaXR5PGJyLz5cIik7cmV0dXJuIGF9LFxuICAgIGZuQ29udGVudFJvdXRlPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7Yi5yb3V0ZSYmKFwieWVzXCI9PWIucm91bmR0cmlwJiYoYSs9XCJyb3VuZHRyaXA8YnIvPlwiKSxiLmxlbmd0aCYmKGErPVwibGVuZ3RoOiBcIitiLmxlbmd0aCtcIjxici8+XCIpLGIuZGlzdGFuY2UmJihhKz1cImRpc3RhbmNlOiBcIitiLmRpc3RhbmNlK1wiPGJyLz5cIiksYi5zeW1ib2wmJihhKz1cInN5bWJvbDogXCIrYi5zeW1ib2wrXCI8YnIvPlwiKSk7cmV0dXJuIGF9LGZuQ29udGVudFBldHJvbD1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO1wiZnVlbFwiPT1iLmFtZW5pdHkmJihcInllc1wiPT1iW1wiZnVlbDpiaW9kaWVzZWxcIl0mJihhKz1cImJpb2RpZXNlbDxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmU4NVwiXSYmKGErPVwiZTg1PGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6ZTEwXCJdJiYoYSs9XCJlMTA8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpscGdcIl0mJihhKz1cImxwZzxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmNuZ1wiXSYmKGErPVwiY25nPGJyLz5cIiksXCJkaWVzZWxcIj09XG4gICAgYi5mdWVsJiYoYSs9XCJkaWVzZWw8YnIvPlwiKSxcImxwZ1wiPT1iLmZ1ZWwmJihhKz1cImxwZzxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOm9jdGFuZV85NVwiXSYmKGErPVwib2N0YW5lIDk1PGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6b2N0YW5lXzk4XCJdJiYoYSs9XCJvY3RhbmUgOTg8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpvY3RhbmVfMTAwXCJdJiYoYSs9XCJvY3RhbmUgMTAwPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6b2N0YW5lXzEwMlwiXSYmKGErPVwib2N0YW5lIDEwMjxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmRpZXNlbFwiXSYmKGErPVwiZGllc2VsPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6ZWxlY3RyaWNpdHlcIl0mJihhKz1cImNoYXJnaW5nIHN0YXRpb24gLyBsb2FkaW5nIHN0YXRpb248YnIvPlwiKSk7cmV0dXJuIGF9LGZuQ29udGVudEhpc3RvcmljPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7aWYoXCJhcmNoYWVvbG9naWNhbF9zaXRlXCI9PWIuaGlzdG9yaWMmJmIuc2l0ZV90eXBlKXN3aXRjaChiLnNpdGVfdHlwZSl7Y2FzZSBcIm1lZ2FsaXRoXCI6YSs9XG4gICAgICAgIFwibWVnYWxpdGg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJiaWdzdG9uZVwiOmErPVwiYmlnc3RvbmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0dW11bHVzXCI6YSs9XCJ0dW11bHVzPGJyLz5cIjticmVhaztjYXNlIFwiZm9ydGlmaWNhdGlvblwiOmErPVwiZm9ydGlmaWNhdGlvbjxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVua25vd248YnIvPlwifXJldHVybiBhfSxmbkNvbnRlbnRCYXJyaWVycz1mdW5jdGlvbihiLGEpe3ZhciBjPVwiXCI7aWYoXCJ3YWxsXCI9PWIuYmFycmllcnx8XCJib2xsYXJkXCI9PWIuYmFycmllciliLm1hdGVyaWFsJiYoYys9XCJtYXRlcmlhbDogXCIrdHJhbnNsYXRlKGIubWF0ZXJpYWwpK1wiPGJyLz5cIik7cmV0dXJuIGN9LGZuQ29udGVudFRvdXJpc209ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImNhbXBfc2l0ZVwiPT1iLnRvdXJpc20pe1wieWVzXCI9PWIuZG9nJiYoYSs9XCJkb2dzIGFsbG93ZWQ8YnIvPlwiKTtcIm5vXCI9PWIuZG9nJiYoYSs9XCJkb2dzIGZvcmJpZGRlbjxici8+XCIpO2Iuc3RhcnMmJihhKz1iLnN0YXJzK1xuICAgIFwic3RhcnM8YnIvPlwiKTtiLmNhcmF2YW5zJiYoYSs9XCJjYXJhdmFuIHNpdGVzPGJyLz5cIik7aWYoXCJ5ZXNcIj09Yi5vcGVuZmlyZXx8XCJ5ZXNcIj09Yi5maXJlcGxhY2UpYSs9XCJUaGVycyBpcyBhbiBvcGVuZmlyZS4gPGJyLz5cIjtcInllc1wiPT1iLndhc2hpbmdfbWFjaGluZSYmKGErPVwid2FzaGluZyBtYWNoaW5lPGJyLz5cIik7XCJ5ZXNcIj09Yi5kcnllciYmKGErPVwiZHJ5ZXI8YnIvPlwiKTtcInllc1wiPT1iLmdyb3VwX29ubHkmJihhKz1cInVzZSBmb3IgZ3JvdXBzIG9ubHk8YnIvPlwiKTtcInJlY2VwdGlvblwiPT1iLmNhbXBfc2l0ZSYmKGErPVwicmVjZXB0aW9uIGF2YWlsYWJsZTxici8+XCIpfVwiaW5mb3JtYXRpb25cIj09Yi50b3VyaXNtJiZcIm1hcFwiPT1iLmluZm9ybWF0aW9uJiYoXCJ0b3BvXCI9PWIubWFwX3R5cGUmJihhKz1cInRvcG88L2JyPlwiKSxcInN0cmVldFwiPT1iLm1hcF90eXBlJiYoYSs9XCJzdHJlZXQ8L2JyPlwiKSxcInNjaGVtZVwiPT1iLm1hcF90eXBlJiYoYSs9XCJzY2hlbWU8L2JyPlwiKSxcInRvcG9zY29wZVwiPT1cbiAgICBiLm1hcF90eXBlJiYoYSs9XCJ0b3Bvc2NvcGU8L2JyPlwiKSk7XCJpbmZvcm1hdGlvblwiPT1iLnRvdXJpc20mJlwibWFwXCI9PWIuaW5mb3JtYXRpb24mJihcInNpdGVcIj09Yi5tYXBfc2l6ZSYmKGErPVwibWFwIG9mIHNpdGU8L2JyPlwiKSxcImNpdHlcIj09Yi5tYXBfc2l6ZSYmKGErPVwiY2l0eSBtYXA8L2JyPlwiKSxcInJlZ2lvblwiPT1iLm1hcF9zaXplJiYoYSs9XCJtYXAgb2YgcmVnaW9uPC9icj5cIikpO1wiZ2VvbG9neVwiPT1iLmJvYXJkX3R5cGUmJihhKz1cImdlb2xvZ2ljIGluZm9ybWF0aW9uPGJyLz5cIik7XCJoaXN0b3J5XCI9PWIuYm9hcmRfdHlwZSYmKGErPVwiaGlzdG9yaWMgaW5mb3JtYXRpb248YnIvPlwiKTtcIm5hdHVyZVwiPT1iLmJvYXJkX3R5cGUmJihhKz1cImluZm9ybWF0aW9uIGFib3V0IG5hdHVyZTxici8+XCIpO1wibm90aWNlXCI9PWIuYm9hcmRfdHlwZSYmKGErPVwiZ2VuZXJhbCBpbmZvcm1hdGlvbjxici8+XCIpO1wicGxhbnRzXCI9PWIuYm9hcmRfdHlwZSYmKGErPVwiaW5mb3JtYXRpb24gYWJvdXQgcGxhbnRzPGJyLz5cIik7XG4gICAgICAgIFwid2lsZGxpZmVcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJpbmZvcm1hdGlvbiBhYm91dCB3aWxkbGlmZTxici8+XCIpO3JldHVybiBhfSxmbkNvbnRlbnRBbWVuaXR5PWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJib2F0X3NoYXJpbmdcIj09Yi5hbWVuaXR5JiYoYSs9Yi5ib2F0dHlwZStcIjxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJihhKz1iLmNvdW50cnkrXCI8YnIvPlwiKTtpZihiLnZlbmRpbmcpc3dpdGNoKGIudmVuZGluZyl7Y2FzZSBcImFkbWlzc2lvbl90aWNrZXRzXCI6YSs9XCJ0aWNrZXRzPGJyLz5cIjticmVhaztjYXNlIFwiYW5pbWFsX2ZlZWRcIjphKz1cImFuaW1hbCBmZWVkPGJyLz5cIjticmVhaztjYXNlIFwiYm9va3NcIjphKz1cImJvb2tzPGJyLz5cIjticmVhaztjYXNlIFwiY2FuZGxlc1wiOmErPVwiY2FuZGxlczxici8+XCI7YnJlYWs7Y2FzZSBcImNpZ2FyZXR0ZXNcIjphKz1cImNpZ2FyZXR0ZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb25kb21zXCI6YSs9XCJjb25kb21zPGJyLz5cIjticmVhaztjYXNlIFwiZHJpbmtzXCI6YSs9XG4gICAgICAgIFwiZHJpbmtzPGJyLz5cIjticmVhaztjYXNlIFwiZmlyc3RfYWlkXCI6YSs9XCJmaXJzdCBhaWQgYXJ0aWNsZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmaXNoaW5nX3RhY2tsZVwiOmErPVwiZmlzaGluZyB0YWNrbGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmbG93ZXJzXCI6YSs9XCJmbG93ZXJzPGJyLz5cIjticmVhaztjYXNlIFwiaWNlX2NyZWFtXCI6YSs9XCJpY2UgY3JlYW08YnIvPlwiO2JyZWFrO2Nhc2UgXCJsYXVuZHJ5X2RldGVyZ2VudFwiOmErPVwibGF1bmRyeSBkZXRlcmdlbnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJuZXdzcGFwZXJzXCI6YSs9XCJuZXdzcGFwZXJzPGJyLz5cIjticmVhaztjYXNlIFwiU0lNX2NhcmRzXCI6YSs9XCJzSU0tY2FyZHM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzd2VldHNcIjphKz1cInN3ZWV0czxici8+XCI7YnJlYWs7Y2FzZSBcInBhcmNlbF9waWNrdXBcIjphKz1cInBhcmNlbCBwaWNrdXA8YnIvPlwiO2JyZWFrO2Nhc2UgXCJpY2VfY3ViZXNcIjphKz1cImljZSBjdWJlczxici8+XCI7YnJlYWs7Y2FzZSBcInB1YmxpY190cmFuc3BvcnRfdGlja2V0c1wiOmErPVxuICAgICAgICBcInB1YmxpYyB0cmFuc3BvcnQgdGlja2V0czxici8+XCI7YnJlYWs7Y2FzZSBcInBhcmtpbmdfdGlja2V0XCI6YSs9XCJwYXJraW5nIHRpY2tldHM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZXhfdG95c1wiOmErPVwic2V4IHRveXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzdGFtcHNcIjphKz1cInN0YW1wczxici8+XCI7YnJlYWs7Y2FzZSBcInRvbGxcIjphKz1cInRvbGw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bWJyZWxsYXNcIjphKz1cInVtYnJlbGxhczxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cImNvbnRlbnQgdW5rbm93bjxici8+XCJ9XCJwb3N0X2JveFwiPT1iLmFtZW5pdHkmJihiLmNvbGxlY3Rpb25fdGltZXMmJihhKz1cImNvbGxlY3Rpb24gdGltZXM6IFwiK2IuY29sbGVjdGlvbl90aW1lcytcIjxici8+XCIpLFwieWVzXCI9PWIuZHJpdmVfdGhyb3VnaCYmKGErPVwiYWNjZXNzaWJsZSBieSBjYXIuIDxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50U3RvcmFnZT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKFwic3RvcmFnZV90YW5rXCI9PVxuICAgIGIubWFuX21hZGUpe2lmKGIuY29udGVudCl7dmFyIGM9Yi5jb250ZW50O3N3aXRjaChjKXtjYXNlIFwiZnVlbFwiOmM9XCJmdWVsXCI7YnJlYWs7Y2FzZSBcIm9pbFwiOmM9XCJvaWxcIjticmVhaztjYXNlIFwiZ2FzXCI6Yz1cImdhc1wiO2JyZWFrO2Nhc2UgXCJzbHVycnlcIjpjPVwic2x1cnJ5XCI7YnJlYWs7Y2FzZSBcImNlbWVudFwiOmM9XCJjZW1lbnRcIjticmVhaztjYXNlIFwid2F0ZXJcIjpjPVwid2F0ZXJcIjticmVhaztjYXNlIFwibWFudXJlXCI6Yz1cIm1hbnVyZVwiO2JyZWFrO2Nhc2UgXCJzaWxhZ2VcIjpjPVwic2lsYWdlXCJ9YSs9XCJjb250ZW50OiBcIitjK1wiPGJyLz5cIn1pZihiLmNvbnRlbnRzKXtjPWIuY29udGVudHM7c3dpdGNoKGMpe2Nhc2UgXCJmdWVsXCI6Yz1cImZ1ZWxcIjticmVhaztjYXNlIFwib2lsXCI6Yz1cIm9pbFwiO2JyZWFrO2Nhc2UgXCJnYXNcIjpjPVwiZ2FzXCI7YnJlYWs7Y2FzZSBcInNsdXJyeVwiOmM9XCJzbHVycnlcIjticmVhaztjYXNlIFwiY2VtZW50XCI6Yz1cImNlbWVudFwiO2JyZWFrO2Nhc2UgXCJ3YXRlclwiOmM9XCJ3YXRlclwiO1xuICAgICAgICBicmVhaztjYXNlIFwibWFudXJlXCI6Yz1cIm1hbnVyZVwiO2JyZWFrO2Nhc2UgXCJzaWxhZ2VcIjpjPVwic2lsYWdlXCJ9YSs9XCJjb250ZW50OiBcIitjK1wiPGJyLz5cIn19Yi5zdG9yYWdlJiYoXCJnYXNcIj09Yi5zdG9yYWdlJiYoYSs9XCJjb250ZW50OiBnYXM8YnIvPlwiKSxcIm9pbFwiPT1iLnN0b3JhZ2UmJihhKz1cImNvbnRlbnQ6IG9pbDxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50SW5mb3JtYXRpb25DaXR5PWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7YltcIm5hbWU6ZGVcIl0mJihhKz1cImdlcm1hbiBuYW1lOiBcIitiW1wibmFtZTpkZVwiXStcIjxici8+XCIpO2lmKDFFNDw9Yi5wb3B1bGF0aW9uKWlmKGIucG9wdWxhdGlvbj1cIlwiK2IucG9wdWxhdGlvbiwzPGIucG9wdWxhdGlvbi5sZW5ndGgpe3ZhciBjPWIucG9wdWxhdGlvbi5sZW5ndGglMyxkPTA8Yz9iLnBvcHVsYXRpb24uc3Vic3RyaW5nKDAsYyk6XCJcIjtmb3IoaT0wO2k8TWF0aC5mbG9vcihiLnBvcHVsYXRpb24ubGVuZ3RoLzMpO2krKylkPTA9PWMmJjA9PWk/XG4gICAgZCtiLnBvcHVsYXRpb24uc3Vic3RyaW5nKGMrMyppLGMrMyppKzMpOmQrKFwiLlwiK2IucG9wdWxhdGlvbi5zdWJzdHJpbmcoYyszKmksYyszKmkrMykpO2ErPVwicG9wdWxhdGlvbjogXCIrZCtcIjxici8+XCJ9ZWxzZSBhKz1cInBvcHVsYXRpb24gXCIrYi5wb3B1bGF0aW9uK1wiPGJyLz5cIjsxRTQ+PWIucG9wdWxhdGlvbiYmKGErPVwicG9wdWxhdGlvbjogXCIrYi5wb3B1bGF0aW9uK1wiPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEVtZXJnZW5jeT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2IubGlmZWJvYXQmJihcImluc2hvcmVcIj09Yi5saWZlYm9hdD9hKz1cImFwcGxpY2F0aW9uOiBpbnNob3JlPGJyLz5cIjpcIm9mZnNob3JlXCI9PWIubGlmZWJvYXQmJihhKz1cImFwcGxpY2F0aW9uOiBvZmZzaG9yZTxici8+XCIpKTtiW1wibGlmZWJvYXQ6Y2xhc3NcIl0mJihhKz1cInR5cGUgb2YgYm9hdDogXCIrYltcImxpZmVib2F0OmNsYXNzXCJdK1wiPGJyLz5cIik7aWYoYltcInNpcmVuOnR5cGVcIl0pe3ZhciBjPWJbXCJzaXJlbjp0eXBlXCJdO1xuICAgICAgICBzd2l0Y2goYyl7Y2FzZSBcIm1lY2hhbmljYWxcIjpjPVwibWVjaGFuaWNhbFwiO2JyZWFrO2Nhc2UgXCJlbGVjdHJvbmljXCI6Yz1cImVsZWN0cm9uaWNcIjticmVhaztjYXNlIFwicG5ldW1hdGljXCI6Yz1cInBuZXVtYXRpY1wiO2JyZWFrO2Nhc2UgXCJlbGVjdHJvbWVjaGFuaWNcIjpjPVwiZWxlY3Ryb21lY2hhbmljXCJ9YSs9XCJUeXA6IFwiK2MrXCI8YnIvPlwifWlmKGJbXCJzaXJlbjpwdXJwb3NlXCJdKXtjPWJbXCJzaXJlbjpwdXJwb3NlXCJdO3N3aXRjaChjKXtjYXNlIFwiYWlyX3JhaWRcIjpjPVwiYWlyIHJhaWRcIjticmVhaztjYXNlIFwidG9ybmFkb1wiOmM9XCJ0b3JuYWRvXCI7YnJlYWs7Y2FzZSBcInN0b3JtXCI6Yz1cInN0b3JtXCI7YnJlYWs7Y2FzZSBcImNpdmlsX2RlZmVuc2VcIjpjPVwiY2l2aWwgZGVmZW5jZVwiO2JyZWFrO2Nhc2UgXCJmaXJlXCI6Yz1cImZpcmVcIn1hKz1cInVzZTogXCIrYytcIjxici8+XCJ9YltcInNpcmVuOm1vZGVsXCJdJiYoYSs9XCJtb2RlbDogXCIrYltcInNpcmVuOm1vZGVsXCJdK1wiPGJyLz5cIik7YltcInNpcmVuOnJhbmdlXCJdJiZcbiAgICAoYSs9XCJyYW5nZSBvZiBzaXJlbjogXCIrYltcInNpcmVuOnJhbmdlXCJdK1wiPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEN1aXNpbmU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihiLmN1aXNpbmUpe3ZhciBjPVwiXCIsYT0oXCJzdXBlcm1hcmtldFwiPT1iLnNob3B8fFwiY29udmVuaWVuY2VcIj09Yi5zaG9wfHxcImRlbGlcIj09Yi5zaG9wfHxcIm9yZ2FuaWNcIj09Yi5zaG9wKSYmXCJyZXN0YXVyYW50XCIhPWIuYW1lbml0eT9hK1wic3BlY2lhbHRpZXM6IFwiOmErXCJjdWlzaW5lOiBcIjtcImFyYWJpY1wiPT1iLmN1aXNpbmUmJihjKz1cImFyYWJpYzxici8+XCIpO1wiaXRhbGlhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBpdGFsaWFuPGJyLz5cIik7XCJpbnRlcm5hdGlvbmFsXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGludGVybmF0aW9uYWw8YnIvPlwiKTtcInJlZ2lvbmFsXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHJlZ2lvbmFsPGJyLz5cIik7XCJjaGluZXNlXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGNoaW5lc2U8YnIvPlwiKTtcImdyZWVrXCI9PWIuY3Vpc2luZSYmXG4gICAgKGMrPVwiIGdyZWVrPGJyLz5cIik7XCJhZnJpY2FuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGFmcmljYW48YnIvPlwiKTtcImdlcm1hblwiPT1iLmN1aXNpbmUmJihjKz1cIiBnZXJtYW48YnIvPlwiKTtcIm1leGljYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgbWV4aWNhbjxici8+XCIpO1wiZnJlbmNoXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGZyZW5jaDxici8+XCIpO1wiaW5kaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGluZGlhbjxici8+XCIpO1wiaXJhbmlhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBpcmFuaWFuPGJyLz5cIik7XCJsZWJhbmVzZVwiPT1iLmN1aXNpbmUmJihjKz1cIiBsZWJhbmVzZTxici8+XCIpO1widGhhaVwiPT1iLmN1aXNpbmUmJihjKz1cIiB0aGFpPGJyLz5cIik7XCJiYWxrYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgYmFsa2FuPGJyLz5cIik7XCJ0dXJraXNoXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHR1cmtpc2g8YnIvPlwiKTtcImJhdmFyaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGJhdmFyaWFuPGJyLz5cIik7XCJjemVjaFwiPT1iLmN1aXNpbmUmJlxuICAgIChjKz1cIiBjemVjaDxici8+XCIpO1wicG9ydHVndWVzZVwiPT1iLmN1aXNpbmUmJihjKz1cIiBwb3J0dWd1ZXNlPGJyLz5cIik7XCJzcGFuaXNoXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHNwYW5pc2g8YnIvPlwiKTtcImphcGFuZXNlXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGphcGFuZXNlPGJyLz5cIik7XCJmaXNoXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGZpc2g8YnIvPlwiKTtcImJyYXppbGlhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBicmF6aWxpYW48YnIvPlwiKTtcImFzaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGFzaWFuPGJyLz5cIik7XCJtZWRpdGVycmFuZWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwibWVkaXRlcnJhbmVhbjxici8+XCIpO1wic2VhZm9vZFwiPT1iLmN1aXNpbmUmJihjKz1cIiBzZWFmb29kPGJyLz5cIik7XCJpY2VfY3JlYW1cIj09Yi5jdWlzaW5lJiYoYys9XCIgaWNlIGNyZWFtPGJyLz5cIik7XCJidXJnZXJcIj09Yi5jdWlzaW5lJiYoYys9XCIgYnVyZ2VyPGJyLz5cIik7XCJmcm96ZW5feW9ndXJ0XCI9PWIuY3Vpc2luZSYmKGMrPVwiIGZyb3plbiB5b2d1cnQ8YnIvPlwiKTtcbiAgICAgICAgXCJcIj09YyYmKGM9Yi5jdWlzaW5lK1wiPGJyLz5cIik7YSs9Y31yZXR1cm4gYX0sZm5Db250ZW50U2hpcHBpbmc9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtiLmhhcmJvdXI9XCJ5ZXNcIjtcInllc1wiPT1iW1wiYWNjZXNzOnRpZGVcIl0mJihhKz1cIkFjY2VzcyByZXN0cmljdGVkIGJ5IHRpZGU8L2JyPlwiKTtcInllc1wiPT1iW1wiYWNjZXNzOnN3ZWxsXCJdJiYoYSs9XCJhY2Nlc3MgcmVzdHJpY3RlZCBieSBzd2VsbDwvYnI+XCIpO1wieWVzXCI9PWJbXCJhY2Nlc3M6aWNlXCJdJiYoYSs9XCJhY2Nlc3MgcmVzdHJpY3RlZCBieSBpY2U8L2JyPlwiKTtiLnZoZl9jaGFubmVsJiYoYSs9XCJVS1ctQ2hhbm5lbDogXCIrYi52aGZfY2hhbm5lbCtcIjwvYnI+XCIpO2IubW1zaSYmKGErPVwiTU1TSS1OdW1iZXI6IFwiK2IubW1zaStcIjwvYnI+XCIpO2JbXCJoYXJib3VyOmluZm9ybWF0aW9uXCJdJiYoYSs9XCJpbmZvcm1hdGlvbiA6XCIrYltcImhhcmJvdXI6aW5mb3JtYXRpb25cIl0rXCI8L2JyPlwiKTtcInllc1wiPT1iLm1vdG9yYm9hdCYmKGErPVwibW90b3Jib2F0IGFsbG93ZWQ8L2JyPlwiKTtcbiAgICAgICAgXCJub1wiPT1iLm1vdG9yYm9hdCYmKGErPVwibW90b3Jib2F0IHByb2hpYml0ZWQgPC9icj5cIik7Yi5DRU1UJiYoYSs9XCJDRU1UOiBcIitiLkNFTVQrXCI8L2JyPlwiKTtcInllc1wiPT1iLmludGVybWl0dGVudCYmKGErPVwicml2ZXIgaW50ZXJtaXR0ZW50IGRyaWVkIG91dDwvYnI+XCIpO1wieWVzXCI9PWIudGlkYWwmJihhKz1cInRpZGFsIGluZmx1ZW5jZSB0aGUgZmxvdzwvYnI+XCIpO2IuZHJhZnQmJihhKz1cIiBkcml2aW5nIGRlcHRoIG9mIHdhdGVyOiBcIitiLmRyYWZ0K1wiIG08L2JyPlwiKTtpZihcInNsaXB3YXlcIj09Yi5sZWlzdXJlfHxcInNsaXB3YXlcIj09Yi5oYXJib3VyKVwiaGFuZFwiPT1iLm9wZXJhdGluZyYmKGErPVwib3BlcmF0aW5nOiBieSBoYW5kPGJyLz5cIiksXCJjYXJcIj09Yi5vcGVyYXRpbmcmJihhKz1cIm9wZXJhdGluZzogYnkgY2FyLCBib2F0IHRyYWlsZXI8YnIvPlwiKSxcImNhYmxlX3dpbmNoXCI9PWIub3BlcmF0aW5nJiYoYSs9XCJvcGVyYXRpbmc6IHdpdGggY2FibGUgd2luY2g8YnIvPlwiKSxcInRyYXZlbGxpZnRcIj09XG4gICAgICAgIGIub3BlcmF0aW5nJiYoYSs9XCJvcGVyYXRpbmc6IGJ5IHRyYXZlbGxpZnQ8YnIvPlwiKSxcImNyYW5lXCI9PWIubWFuX21hZGUmJihhKz1cImJ5IGNyYW5lPGJyLz5cIixiW1wiY3JhbmU6bWF4bG9hZFwiXSYmKGErPVwibWF4bG9hZDogXCIrYltcImNyYW5lOm1heGxvYWRcIl0rXCI8YnIvPlwiKSxiW1wic2hpcDptYXhkcmFmdFwiXSYmKGErPVwibWF4aW11bSBwZXJtaXNzaWJsZSBkcmF1Z2h0OiBcIitiW1wic2hpcDptYXhkcmFmdFwiXStcIjxici8+XCIpLGJbXCJzaGlwOm1heGxlbmd0aFwiXSYmKGErPVwibWF4aW11bSBwZXJtaXNzaWJsZSBsZW5ndGggb2YgYSBzaGlwOiBcIitiW1wic2hpcDptYXhsZW5ndGhcIl0rXCI8YnIvPlwiKSksXCJ5ZXNcIj09Yi52ZWhpY2xlJiYoYSs9XCJhY2Nlc3NpYmxlIGJ5IHZlaGljbGU8YnIvPlwiKTthKz1mbldyZWNrSW5mbyhiKTtpZihcImZlcnJ5XCI9PWIucm91dGV8fFwiZmVycnlfdGVybWluYWxcIj09Yi5hbWVuaXR5fHxcInllc1wiPT1iLmZlcnJ5KWZhaHJ6ZWl0PWIuZHVyYXRpb24sXCJcIiE9ZmFocnplaXQmJlxuICAgICAgICAoXCJ1bmRlZmluZWRcIiE9ZmFocnplaXQmJm51bGwhPWZhaHJ6ZWl0KSYmKGErPVwiZHVyYXRpb24gaW4gaG91cnMgOiBcIitmYWhyemVpdCtcIjxici8+XCIpLFwieWVzXCI9PWIubW90b3JjYXImJihhKz1cIm1vdG9yY2FycyBhbGxvd2VkPGJyLz5cIiksXCJub1wiPT1iLm1vdG9yY2FyJiYoYSs9XCJtb3RvcmNhcnMgcHJvaGliaXRlZDxici8+XCIpLFwibm9cIj09Yi5tb3Rvcl92ZWhpY2xlJiYoYSs9XCJtb3RvciB2ZWhpY2xlcyBwcm9oaWJpdGVkPGJyLz5cIiksXCJ5ZXNcIj09Yi5tb3Rvcl92ZWhpY2xlJiYoYSs9XCJtb3RvciB2ZWhpY2xlcyBhbGxvd2VkPGJyLz5cIiksXCJ5ZXNcIj09Yi52ZWhpY2xlJiYoYSs9XCJ2ZWhpY2xlcyBhbGxvd2VkPGJyLz5cIiksXCJub1wiPT1iLnZlaGljbGUmJihhKz1cIm5vIHZlaGljbGVzPGJyLz5cIiksXCJub1wiPT1iLmJpY3ljbGUmJihhKz1cIm5vIGJpY3ljbGVzPGJyLz5cIiksXCJub1wiPT1iLmJpY3ljbGUmJihhKz1cImJpY3ljbGVzIGFsbG93ZWQ8YnIvPlwiKSxcInllc1wiPT1iLmhndiYmKGErPVwiaGd2IGFsbG93ZWQ8YnIvPlwiKSxcbiAgICAgICAgXCJub1wiPT1iLmhndiYmKGErPVwiaGd2IHByb2hpYml0ZWQ8YnIvPlwiKSxcInllc1wiPT1iLmZvb3QmJihhKz1cInBlZGVzdHJpYW4gYWxsb3dlZDxici8+XCIpLFwibm9cIj09Yi5mb290JiYoYSs9XCJwZWRlc3RyaWFuIHByb2hpYml0ZWQgPGJyLz5cIiksXCJ5ZXNcIj09Yi5iaWN5Y2xlJiYoYSs9XCJjeWNsaXN0IGFsbG93ZWQgPGJyLz5cIiksXCJub1wiPT1iLmJpY3ljbGUmJihhKz1cImN5Y2xpc3QgcHJvaGliaXRlZCA8YnIvPlwiKSxcInllc1wiPT1iW1wiZmVycnk6Y2FibGVcIl0mJihhKz1cImNhYmxlIGZlcnJ5PGJyLz5cIik7aWYoYltcInNlYW1hcms6bGlnaHQ6MTpjb2xvdXJcIl0pe3ZhciBjPWJbXCJzZWFtYXJrOmxpZ2h0OjE6Y29sb3VyXCJdO3N3aXRjaChjKXtjYXNlIFwid2hpdGVcIjpjPVwid2hpdGVcIjticmVhaztjYXNlIFwicmVkXCI6Yz1cInJlZFwiO2JyZWFrO2Nhc2UgXCJncmVlblwiOmM9XCJncmVlblwiO2JyZWFrO2Nhc2UgXCJibHVlXCI6Yz1cImJsdWVcIjticmVhaztjYXNlIFwieWVsbG93XCI6Yz1cInllbGxvd1wiO2JyZWFrO2Nhc2UgXCJhbWJlclwiOmM9XG4gICAgICAgICAgICBcImFtYmVyXCJ9YSs9XCJjb2xvdXIgb2YgbGlnaHQ6IFwiK2MrXCI8YnIvPlwifVwibGlnaHRob3VzZVwiPT1iLm1hbl9tYWRlJiYoYltcInNlYW1hcms6bGlnaHQ6MTpjaGFyYWN0ZXJcIl0mJihhKz1cImxpZ2h0IGNoYXJhY3RlcjogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpjaGFyYWN0ZXJcIl0rXCI8YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDoxOnBlcmlvZFwiXSYmKGErPVwicGVyaW9kOiBcIitiW1wic2VhbWFyazpsaWdodDoxOnBlcmlvZFwiXStcIjxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OjE6aGVpZ2h0XCJdJiYoYSs9XCJoZWlnaHQ6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OjE6aGVpZ2h0XCJdK1wiIG08YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDoxOnJhbmdlXCJdJiYoYSs9XCJyYW5nZTogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpyYW5nZVwiXStcIiBzbTxici8+XCIpKTtpZihiW1wic2VhbWFyazpsaWdodDpjb2xvdXJcIl0pe2M9YltcInNlYW1hcms6bGlnaHQ6Y29sb3VyXCJdO3N3aXRjaChjKXtjYXNlIFwid2hpdGVcIjpjPVwid2hpdGVcIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJyZWRcIjpjPVwicmVkXCI7YnJlYWs7Y2FzZSBcImdyZWVuXCI6Yz1cImdyZWVuXCI7YnJlYWs7Y2FzZSBcImJsdWVcIjpjPVwiYmx1ZVwiO2JyZWFrO2Nhc2UgXCJ5ZWxsb3dcIjpjPVwieWVsbG93XCI7YnJlYWs7Y2FzZSBcImFtYmVyXCI6Yz1cImFtYmVyXCJ9YSs9XCJjb2xvdXIgb2YgbGlnaHQ6IFwiK2MrXCI8YnIvPlwifVwibGlnaHRob3VzZVwiPT1iLm1hbl9tYWRlJiYoYltcInNlYW1hcms6bGlnaHQ6Y2hhcmFjdGVyXCJdJiYoYSs9XCJsaWdodCBjaGFyYWN0ZXI6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OmNoYXJhY3RlclwiXStcIjxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OmhlaWdodFwiXSYmKGErPVwiaGVpZ2h0OiBcIitiW1wic2VhbWFyazpsaWdodDpoZWlnaHRcIl0rXCIgbTxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OnJhbmdlXCJdJiYoYSs9XCJyYW5nZTogXCIrYltcInNlYW1hcms6bGlnaHQ6cmFuZ2VcIl0rXCIgc208YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDpwZXJpb2RcIl0mJihhKz1cInBlcmlvZDogXCIrYltcInNlYW1hcms6bGlnaHQ6cGVyaW9kXCJdK1xuICAgICAgICBcIjxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50SHlkcmFudHM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImZpcmVfaHlkcmFudFwiPT1iLmVtZXJnZW5jeSl7dmFyIGM9YltcImZpcmVfaHlkcmFudDpjb3VudFwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIk51bWJlcjogXCIrYytcIjxici8+XCIpO2M9YltcImZpcmVfaHlkcmFudDpkaWFtZXRlclwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIlBpcGUgZGlhbWV0ZXI6IFwiK2MrXCIgbW08YnIvPlwiKTtjPWJbXCJmaXJlX2h5ZHJhbnQ6cHJlc3N1cmVcIl07XCJ1bmRlZmluZWRcIiE9YyYmKG51bGwhPWMmJlwiXCIhPWMpJiYoYT1cInN1Y3Rpb25cIj09Yz9hK1wiUHJlc3N1cmUgaW4gYmFyIC8gU3VjdGlvbjogU3VjdGlvbjxici8+XCI6YSsoXCJQcmVzc3VyZSBpbiBiYXIgLyBTdWN0aW9uOiBcIitjK1wiPGJyLz5cIikpO2M9YltcImZpcmVfaHlkcmFudDpwb3NpdGlvblwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXG4gICAgXCJcIiE9YykmJihcImxhbmVcIj09Yz9hKz1cIlBvc2l0aW9uOiBMYW5lPGJyLz5cIjpcInBhcmtpbmdfbG90XCI9PWM/YSs9XCJQb3NpdGlvbjogUGFya2luZyBMb3Q8YnIvPlwiOlwic2lkZXdhbGtcIj09Yz9hKz1cIlBvc2l0aW9uOiBTaWRld2Fsazxici8+XCI6XCJncmVlblwiPT1jJiYoYSs9XCJQb3NpdGlvbjogR3JlZW48YnIvPlwiKSk7Yz1iLndhdGVyX3ZvbHVtZTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIlZvbHVtZTogXCIrYytcIjxici8+XCIpO2M9YltcImZpcmVfaHlkcmFudDphd3dhX2NsYXNzXCJdO1widW5kZWZpbmVkXCIhPWMmJm51bGwhPWMmJlwiXCIhPWM/YSs9XCJBV1dBIENsYXNzOiBcIitjK1wiPGJyLz5cIjooYz1iLmZsb3dfcmF0ZSxcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIkZsb3cgcmF0ZTogXCIrYytcIjxici8+XCIpKTtjPWIud2F0ZXJfc291cmNlO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jJiZcIm1haW5cIiE9YykmJihhKz1cIldhdGVyIHNvdXJjZTogXCIrXG4gICAgYytcIjxici8+XCIpO2M9YltcImNvdXBsaW5nczp0eXBlXCJdO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGErPVwiQ291cGxpbmdzIHR5cGU6IFwiK2MrXCI8YnIvPlwiKTtjPWJbXCJjb3VwbGluZ3M6ZGlhbWV0ZXJcIl07XCJ1bmRlZmluZWRcIiE9YyYmKG51bGwhPWMmJlwiXCIhPWMpJiYoYSs9XCJDb3VwbGluZ3MgZGlhbWV0ZXI6IFwiK2MrXCI8YnIvPlwiKTtjPWJbXCJwaWxsYXI6dHlwZVwiXTtcImRyeV9iYXJyZWxcIj09PWMmJihhKz1cIlBpbGxhciB0eXBlOiBcIitjK1wiPGJyLz5cIik7XCJmaXJlX2h5ZHJhbnRcIj09PWJbXCJkaXN1c2VkOmVtZXJnZW5jeVwiXSYmKGErPVwiQ3VycmVudGx5IGRpc3VzZWRcIik7XCJcIj09YSYmKGE9XCJObyBkZXRhaWxzIGF2YWlsYWJsZS5cIil9cmV0dXJuIGF9LGZuQ29udGVudFN0cmVldHNUcmFmZmljPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJ5ZXNcIj09YltcInJlZF90dXJuOnJpZ2h0XCJdJiYoYSs9XCJyZWQgdHVybjogYWxsb3dlZCB0byB0dXJuIHRvIHRoZSByaWdodDxici8+XCIpO1xuICAgICAgICBcIm5vXCI9PWJbXCJyZWRfdHVybjpyaWdodFwiXSYmKGErPVwicmVkIHR1cm46IHByb2hpYml0ZWQgdG8gdHVybiB0byB0aGUgcmlnaHQ8YnIvPlwiKTtiLmJyaWRnZSYmKGIuaGVpZ2h0JiYoYSs9XCJoZWlnaHQ6IFwiK2IuaGVpZ2h0K1wiIG08YnIvPlwiKSxiLmxlbmd0aCYmKGErPVwibGVuZ3RoOiBcIitiLmxlbmd0aCtcIiBtPGJyLz5cIiksYi5icmlkZ2VfcmVmJiYoYSs9XCJicmlkZ2UgcmVmOiBcIitiLmJyaWRnZV9yZWYrXCI8YnIvPlwiKSxiLnN0YXJ0X2RhdGUmJihhKz1cInN0YXJ0IGRhdGU6IFwiK2Iuc3RhcnRfZGF0ZStcIjwvYnI+O1wiKSxiLm1heHdlaWdodCYmKGErPVwibWF4d2VpZ2h0OiBcIitiLm1heHdlaWdodCtcIiB0PC9icj5cIikpO2IuaGlnaHdheSYmXCJ5ZXNcIj09Yi50b2xsJiYoYSs9XCJ0b2xsIGhpZ2h3YXk8YnIvPlwiKTtcInllc1wiPT1iW1widG9sbDpoZ3ZcIl0mJihhKz1cIkhHViB0b2xsPGJyLz5cIik7aWYoYi5zdXJmYWNlKXt2YXIgYz1iLnN1cmZhY2UsYT1hK1wic3VyZmFjZTogXCI7c3dpdGNoKGMpe2Nhc2UgXCJncmFzc1wiOmErPVxuICAgICAgICAgICAgXCJncmFzczxici8+XCI7YnJlYWs7Y2FzZSBcInBhdmVkXCI6YSs9XCJwYXZlZDxici8+XCI7YnJlYWs7Y2FzZSBcImFzcGhhbHRcIjphKz1cImFzcGhhbHQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb2JibGVzdG9uZVwiOmErPVwiY29iYmxlc3RvbmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZXR0XCI6YSs9XCJzZXR0PGJyLz5cIjticmVhaztjYXNlIFwiY29uY3JldGVcIjphKz1cImNvbmNyZXRlPGJyLz5cIjticmVhaztjYXNlIFwidW5wYXZlZFwiOmErPVwidW5wYXZlZDxici8+XCI7YnJlYWs7Y2FzZSBcInBhdmluZ19zdG9uZXNcIjphKz1cInBhdmluZyBzdG9uZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb21wYWN0ZWRcIjphKz1cImNvbXBhY3RlZDxici8+XCI7YnJlYWs7Y2FzZSBcImRpcnRcIjphKz1cImRpcnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmaW5lX2dyYXZlbFwiOmErPVwiZmluZSBncmF2ZWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJncmFzc19wYXZlclwiOmErPVwiZ3Jhc3MgcGF2ZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJncmF2ZWxcIjphKz1cImdyYXZlbDxici8+XCI7XG4gICAgICAgICAgICBicmVhaztjYXNlIFwiZWFydGhcIjphKz1cImVhcnRoPGJyLz5cIjticmVhaztjYXNlIFwiZ3JvdW5kXCI6YSs9XCJncm91bmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtZXRhbFwiOmErPVwibWV0YWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtdWRcIjphKz1cIm11ZDxici8+XCI7YnJlYWs7Y2FzZSBcInNhbmRcIjphKz1cInNhbmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ3b29kXCI6YSs9XCJ3b29kPGJyLz5cIjticmVhaztjYXNlIFwidGFydGFuXCI6YSs9XCJ0YXJ0YW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJhcnRpZmljaWFsX3R1cmZcIjphKz1cImFydGlmaWNpYWwgdHVyZjxici8+XCI7YnJlYWs7Y2FzZSBcImNsYXlcIjphKz1cImNsYXk8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmtub3duPGJyLz5cIn19XCJncmFkZTFcIj09Yi50cmFja3R5cGUmJihhKz1cInBhdGggc3VyZmFjZTogU29saWQuIFVzdWFsbHkgYSBwYXZlZCBvciBoZWF2aWx5IGNvbXBhY3RlZCBoYXJkY29yZSBzdXJmYWNlLjxici8+XCIpO1wiZ3JhZGUyXCI9PWIudHJhY2t0eXBlJiYoYSs9XCJwYXRoIHN1cmZhY2U6IE1vc3RseSBzb2xpZC4gVXN1YWxseSBhbiB1bnBhdmVkIHRyYWNrIHdpdGggc3VyZmFjZSBvZiBncmF2ZWwgbWl4ZWQgd2l0aCBhIHZhcnlpbmcgYW1vdW50IG9mIHNhbmQsIHNpbHQsIGFuZCBjbGF5Ljxici8+XCIpO1xuICAgICAgICBcImdyYWRlM1wiPT1iLnRyYWNrdHlwZSYmKGErPVwicGF0aCBzdXJmYWNlOiBFdmVuIG1peHR1cmUgb2YgaGFyZCBhbmQgc29mdCBtYXRlcmlhbHMuIEFsbW9zdCBhbHdheXMgYW4gdW5wYXZlZCB0cmFjay48YnIvPlwiKTtcImdyYWRlNFwiPT1iLnRyYWNrdHlwZSYmKGErPVwicGF0aCBzdXJmYWNlOiBNb3N0bHkgc29mdC4gQWxtb3N0IGFsd2F5cyBhbiB1bnBhdmVkIHRyYWNrIHByb21pbmVudGx5IHdpdGggc29pbC9zYW5kL2dyYXNzLCBidXQgd2l0aCBzb21lIGhhcmQgbWF0ZXJpYWxzLCBvciBjb21wcmVzc2VkIG1hdGVyaWFscyBtaXhlZCBpbi48YnIvPlwiKTtcImdyYWRlNVwiPT1iLnRyYWNrdHlwZSYmKGErPVwicGF0aCBzdXJmYWNlOiBTb2Z0LiBBbG1vc3QgYWx3YXlzIGFuIHVucGF2ZWQgdHJhY2sgbGFja2luZyBoYXJkIG1hdGVyaWFscywgdW5jb21wYWN0ZWQsIHdpdGggc3VyZmFjZSBvZiBzb2lsL3NhbmQvZ3Jhc3MuPGJyLz5cIik7XCJ5ZXNcIj09Yi5tb3RvcmN5Y2xlJiYoYSs9XCI8YnIvPm1vdG9yY3lsZSBhbGxvd2VkLjxici8+XCIpO1xuICAgICAgICBcIm5vXCI9PWIubW90b3JjeWNsZSYmKGErPVwiPGJyLz5tb3RvcmN5Y2xlcyBwcm9oaWJpdGVkLjxici8+XCIpO1wiZXhjZWxsZW50XCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwidHJhaWwgdmlzaWJpbGl0eTogVW5hbWJpZ3VvdXMgcGF0aCBvciBtYXJrZXJzIGV2ZXJ5d2hlcmU8YnIvPlwiKTtcImdvb2RcIj09Yi50cmFpbF92aXNpYmlsaXR5JiYoYSs9XCJ0cmFpbCB2aXNpYmlsaXR5OiBOZXh0IG1hcmtlciBhbHdheXMgdmlzaWJsZSwgYnV0IHNvbWV0aW1lcyBoYXMgdG8gYmUgc2VhcmNoZWQgZm9yLjxici8+XCIpO1wiaW50ZXJtZWRpYXRlXCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwidHJhaWwgdmlzaWJpbGl0eTogVHJhY2sgbW9zdGx5IHZpc2libGU8YnIvPlwiKTtcImJhZFwiPT1iLnRyYWlsX3Zpc2liaWxpdHkmJihhKz1cInRyYWlsIHZpc2liaWxpdHk6IFBhdGggc29tZXRpbWVzIGludmlzaWJsZSwgcm91dGUgcGFydGx5IHBhdGhsZXNzPGJyLz5cIik7XCJob3JyaWJsZVwiPT1iLnRyYWlsX3Zpc2liaWxpdHkmJlxuICAgICAgICAoYSs9XCJ0cmFpbCB2aXNpYmlsaXR5OiBPZnRlbiBwYXRobGVzczxici8+XCIpO1wibm9cIj09Yi50cmFpbF92aXNpYmlsaXR5JiYoYSs9XCJ0cmFpbCB2aXNpYmlsaXR5OiBNb3N0bHkgcGF0aGxlc3M8YnIvPlwiKTtcImhpa2luZ1wiPT1iLnNhY19zY2FsZSYmKGErPVwidHJhaWw6IFRyYWlsIHdlbGwgY2xlYXJlZC4gKFNBQyBTY2FsZTogVDEgKHllbGxvdykpPC9icj5cIik7XCJtb3VudGFpbl9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cInRyYWlsOiBUcmFpbCB3aXRoIGNvbnRpbnVvdXMgbGluZSBhbmQgYmFsYW5jZWQgYXNjZW50IChTQUMgU2NhbGU6IFQyIChyZWQpKTwvYnI+XCIpO1wiZGVtYW5kaW5nX21vdW50YWluX2hpa2luZ1wiPT1iLnNhY19zY2FsZSYmKGErPVwidHJhaWw6IGV4cG9zZWQgc2l0ZXMgbWF5IGJlIHNlY3VyZWQgd2l0aCByb3BlcyBvciBjaGFpbnMsIHBvc3NpYmxlIG5lZWQgdG8gdXNlIGhhbmRzIGZvciBiYWxhbmNlIChTQUMgU2NhbGU6IFQzIChyZWQpKTwvYnI+XCIpO1wiYWxwaGluZV9oaWtpbmdcIj09XG4gICAgICAgIGIuc2FjX3NjYWxlJiYoYSs9XCJ0cmFpbDogc29tZXRpbWVzIG5lZWQgZm9yIGhhbmQgdXNlIHRvIGdldCBhaGVhZCAoU0FDIFNjYWxlOiBUNCAoYmx1ZSkpPC9icj5cIik7XCJkZW1hbmRpbmdfYWxwaGluZV9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cInRyYWlsOiBzaW5nbGUgcGxhaW5seSBjbGltYmluZyB1cCB0byBzZWNvbmQgZ3JhZGUgKFNBQyBTY2FsZTogVDUgKGJsdWUpKTwvYnI+XCIpO1wiZGlmZmljdWx0X2FscGluZV9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cInRyYWlsOiBjbGltYmluZyB1cCB0byBzZWNvbmQgZ3JhZGUgKFNBQyBTY2FsZTogVDYgKGJsdWUpKTwvYnI+XCIpO2JbXCJtdGI6bmFtZVwiXSYmKGErPVwiY3ljbGV3YXkgOlwiK2JbXCJtdGI6bmFtZVwiXStcIjwvYnI+XCIpO1wiMFwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2Vyb3V0ZTogVmVyeSBlYXN5IHdheSAtIEdyYXZlbCBvciBwYWNrZWQgZWFydGguIE5vIHBhcnRpY3VsYXIgZGlmZmljdWx0aWVzLiBNb3N0bHkgZm9yZXN0IGFuZCBtZWFkb3cgcGF0aHMgKGhpZ2h3YXk9cGF0aCkuIFNlY3Rpb25zIHdpdGggc3RlcHMsIHJvY2tzLCBvciByb290cyBhcmUgbm90IGV4cGVjdGVkLiBXaWRlIGN1cnZlcywgZWFzeSB0byBtb2RlcmF0ZSBzbG9wZS4gTm8gc3BlY2lhbCBza2lsbHMgYXJlIG5lZWRlZCB0byByaWRlIHRoaXMuIEVhc3kgdG8gcmlkZSB1cGhpbGwuPC9icj5TdXJmYWNlOiBzb2xpZCBhbmQgaGFuZHk8L2JyPk9ic3RhY2xlczogbm8gb2JzdGFjbGVzPC9icj5HcmFkaWVudDogbWlsZCB0byBtb2RlcmF0ZTwvYnI+QmVuZHM6IHdpZGU8L2JyPkRyaXZpbmcgc2tpbGxzOiBubyBzcGVjaWFsIGRyaXZpbmcgc2tpbGxzIHJlcXVpcmVkPC9icj5cIik7XG4gICAgICAgIFwiMVwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2Vyb3V0ZTogU21hbGxlciBvYnN0YWNsZXMgbGlrZSByb290cyBhbmQgc21hbGwgc3RvbmVzLiBFcm9zaW9uIGRhbWFnZSBtYXkgaW5jcmVhc2UgZGlmZmljdWx0eS4gU29pbCBtYXkgYmUgbG9vc2UgaW4gcGxhY2VzLiBUaWdodCB0dXJucywgYnV0IG5vIGhhaXJwaW4gdHVybnMuIFJpZGluZyByZXF1aXJlcyBjYXJlIGFuZCBhdHRlbnRpb24sIGJ1dCBubyBzcGVjaWFsIHNraWxsLiBPYnN0YWNsZXMgY2FuIGJlIHJpZGRlbiBvdmVyLiBEaWZmaWN1bHQgdG8gcmlkZSB1cGhpbGwuPC9icj5TdXJmYWNlOiBsb29zZSBzdXJmYWNlIHBvc3NpYmxlLCBzbWFsbCByb290cyBhbmQgc3RvbmVzPC9icj5PYnN0YWNsZXM6IHNtYWxsIG9ic3RhY2xlcywgd2F0ZXIgZ3V0dGVyLCBlcm9zaW9uIGRhbWFnZTwvYnI+R3JhZGllbnQ6IDwgNDAlPC9icj5CZW5kczogd2lkZTwvYnI+RHJpdmluZyBza2lsbHM6IGJhc2ljIGRyaXZpbmcgc2tpbGxzIHJlcXVpcmVkLCBvYnN0YWNsZXMgY2FuIGJlIHBhc3NlZCBvdmVyPC9icj5cIik7XG4gICAgICAgIFwiMlwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2Vyb3V0ZTogT2JzdGFjbGVzIHN1Y2ggYXMgbGFyZ2Ugcm9ja3MgYW5kIHN0b25lcy4gU29pbCBpcyBvZnRlbiBsb29zZS4gIFN0ZXBzIGFyZSBleHBlY3RlZC4gV2lkZXIgaGFpcnBpbiB0dXJucywgc3RlZXBuZXNzIG9mIHVwIHRvIDcwJS4gUmVxdWlyZXMgc29tZSBhZHZhbmNlZCByaWRpbmcgc2tpbGxzLiBPbmx5IHZlcnkgc2tpbGxlZCByaWRlcnMgY2FuIGdvIHVwaGlsbCBvbiB0aGlzLjwvYnI+U3VyZmFjZTogc3VyZmFjZSB1c3VhbGx5IG5vdCBjb21wYWN0ZWQsIGxhcmdlciByb290cyBhbmQgc3RvbmVzLjwvYnI+T2JzdGFjbGVzOiBwbGFpbiBzdGVwcyBhbmQgc3RhaXJzPC9icj5HcmFkaWVudDogPCA3MCU8L2JyPkJlbmRzOiBlYXN5IGhhaXJwaW5zPC9icj5Ecml2aW5nIHNraWxsczogYWR2YW5jZWQgZHJpdmluZyBza2lsbHMgcmVxdWlyZWQ8L2JyPlwiKTtcIjNcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlcm91dGU6IE1hbnkgc2VjdGlvbnMgd2l0aCBsYXJnZSBvYnN0YWNsZXMgc3VjaCBhcyBib3VsZGVycyBhbmQgbGFyZ2Ugcm9vdHMuIE1hbnkgaGFpcnBpbiBhbmQgb2ZmLWJhbGFuY2UgdHVybnMuIFNsaXBwZXJ5IHN1cmZhY2UgYW5kIHRhbHVzIHNlY3Rpb25zIG1heSBiZSBmb3VuZC4gVGhlIHN1cmZhY2UgbWF5IGJlIHZlcnkgc2xpcHBlcnkuIENvbnN0YW50IGNvbmNlbnRyYXRpb24gYW5kIHZlcnkgZ29vZCBza2lsbHMgbmVlZGVkLiBOZWFybHkgaW1wb3NzaWJsZSB0byByaWRlIHVwaGlsbC48L2JyPlN1cmZhY2U6IG1hbnkgbGFyZ2Ugcm9vdHMgLyByb2NrcyBvciBzbGlwcGVyeSBncm91bmQsIGxvb3NlIHNjcmVlPC9icj5PYnN0YWNsZXM6IGRyYWdzLCBoYXJkbHkgZHJpdmVhYmxlIHN0ZXBzPC9icj5HcmFkaWVudDogPjcwJTwvYnI+QmVuZHM6IGJhaWwgbGlrZSBoYWlycGluczwvYnI+RHJpdmluZyBza2lsbHM6IHBlcmZlY3QgYmlrZSBjb250cm9sIHdpdGggdHJpYWwgc2tpbGxzIHJlcXVpcmVkLCBsaWtlIG1vdmluZyB0aGUgcmVhciB3aGVlbCBvbmx5IGluIGhhaXJwaW5zPC9icj5cIik7XG4gICAgICAgIFwiNFwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2Vyb3V0ZTogVmVyeSBzdGVlcCBhbmQgZGlmZmljdWx0LCB3aXRoIHNlY3Rpb25zIGhhdmluZyBsYXJnZSBib3VsZGVycyBhbmQgcm9vdHMuIEZyZXF1ZW50IGxvb3NlIGRlYnJpcy4gVmVyeSBzdGVlcCBzZWN0aW9ucyB3aXRoIHZlcnkgdGlnaHQgaGFpcnBpbiB0dXJucyBhbmQgaGlnaCBzdGVwcyB0aGF0IHdpbGwgY2F1c2UgdGhlIGNoYWlucmluZyB0byBoaXQgdGhlIGdyb3VuZC4gU29tZSB0cmlhbHMgdGVjaG5pcXVlcyB3aWxsIGJlIG5lY2Vzc2FyeS4gTmVhcmx5IGltcG9zc2libGUgdG8gcmlkZSB1cGhpbGwuPC9icj5TdXJmYWNlOiBtYW55IGxhcmdlIHJvb3RzIC8gcm9ja3Mgb3Igc2xpcHBlcnkgZ3JvdW5kLCBsb29zZSBzY3JlZTwvYnI+T2JzdGFjbGVzOiBkcmFncywgaGFyZGx5IGRyaXZlYWJsZSBzdGVwczwvYnI+R3JhZGllbnQ6ID43MCU8L2JyPkJlbmRzOiBiYWlsIGxpa2UgaGFpcnBpbnM8L2JyPkRyaXZpbmcgc2tpbGxzOiBwZXJmZWN0IGJpa2UgY29udHJvbCB3aXRoIHRyaWFsIHNraWxscyByZXF1aXJlZCwgbGlrZSBtb3ZpbmcgdGhlIHJlYXIgd2hlZWwgb25seSBpbiBoYWlycGluczwvYnI+XCIpO1xuICAgICAgICBcIjVcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlcm91dGU6IFZlcnkgc3RlZXAgYW5kIGRpZmZpY3VsdCB3aXRoIGJpZyBib3VsZGVyIGZpZWxkcyBhbmQgZGVicmlzLCBhbmQgbGFuZHNsaWRlcy4gU3BlZWQgbXVzdCBiZSBjYXJyaWVkIGZvciBjb3VudGVyLWFzY2VudHMuIElmIGF0IGFsbCBvbmx5IHNob3J0IHBhc3NhZ2VzIGFyZSBhdmFpbGFibGUgZm9yIGFjY2VsZXJhdGluZyBhbmQgYnJha2luZy4gRmFsbGVuIHRyZWVzIG1heSBtYWtlIHZlcnkgc3RlZXAgcGFzc2FnZXMgZXZlbiBtb3JlIGRpZmZpY3VsdC4gVmVyeSBmZXcgTW91bnRhaW5iaWtlcnMgY2FuIGFjdHVhbGx5IHJpZGUgYXQgdGhpcyBsZXZlbC4gTW9zdCB3aWxsIGhhdmUgdG8gcHVzaC48L2JyPlN1cmZhY2U6IGNvdW50ZXItYXNjZW50cyAvIHJvY2tzIG9yIHNsaXBwZXJ5IGdyb3VuZCwgbG9vc2Ugc2NyZWUgLyBwYXRoIGlzIHJhdGhlciBhIEFscGluZSBoaWtpbmcgKD5UNCkgcGF0aDwvYnI+T2JzdGFjbGVzOiBkcmFncywgY29tYmluYXRpb25zIG9mIGhhcmRseSBkcml2ZWFibGUgc3RlcHM8L2JyPkdyYWRpZW50OiA+NzAlPC9icj5CZW5kczogYmFpbCBsaWtlIGhhaXJwaW5zIHdpdGggb2JzdGFjbGVzPC9icj5Ecml2aW5nIHNraWxsczogZXhjZWxsZW50IGJpa2UgY29udHJvbCB3aXRoIHNwZWNpYWwgdHJpYWwgc2tpbGxzIHJlcXVpcmVkLCBtb3ZpbmcgdGhlIGZyb250IGFuZCByZWFyIHdoZWVsIGlzIGxpbWl0ZWQ8L2JyPlwiKTtcbiAgICAgICAgXCI2XCI9PWJbXCJtdGI6c2NhbGVcIl0mJihhKz1cIk1vdW50YWluYmlrZXJvdXRlOiBDbGFzc2lmeSB3YXlzIHdpdGggNiB0aGF0IGFyZSBub3QgcmlkZWFibGUgYXQgYWxsIGZvciBhIG10YmlrZXIuIEUuZy4gQ2hhaW5zIG9yIHN0ZW1wbGVzIChtZXRhbCBydW5ncykgb24gYSB2aWEgZmVycmF0YSBvciBzaW1wbHkgdW5zZWN1cmVkIGFscGluZSBwYXRoZXMgdGhhdCBhcmUgbm90IGV2ZW4gcGFydGx5IHJpZGVhYmxlIGZvciB0aGUgdmVyeSBiZXN0IG10YmlrZXJzICh1c2luZyB0cmlhbCB0ZWNobmlxdWVzKS4gU3RlZXBuZXNzIGlzIG9mdGVuID40NVxcdTAwYjAuIElmIHVzZWQgZm9yIHNpbmdsZSBwb2ludHMsIHRoZW4gdGhpcyBoaWdobGlnaHRzIGV4Y2VwdGlvbmFsbHkgZGlmZmljdWx0IHNwb3RzLiBPZnRlbiBzcG90dGluZyBpcyBpbXBvc3NpYmxlIGFuZCBmYWxsaW5nIG1heSBiZSBsZXRoYWwuPC9icj5TdXJmYWNlOiBQYXRoIGlzIHJhdGhlciBhIEFscGluZSBoaWtpbmcgKFQ1IG9yIFQ2KSBwYXRoIG9yIGJhcmUgcm9jayB3aXRob3V0IHZpc2libGUgcGF0aC48L2JyPk9ic3RhY2xlczogU3RlcHMgb3ZlciAybSwgcm9jayBmYWNlcywuLi48L2JyPkdyYWRpZW50OiA+MTAwJTwvYnI+QmVuZHM6IG5vIGJlbmRzIGNhbiBiZSBkaXN0aW5ndWlzaGVkIGFzIHN1Y2guPC9icj5Ecml2aW5nIHNraWxsczogb25seSB0aGUgdmVyeSBiZXN0IHRyaWFsIHNwZWNpYWxpc3RzIG9yIHZlcnRyaWRlcnMgd2lsbCB0cnkgdG8gcmlkZSB0aGVzZSBzcG90cy4gV2Fsa2luZyB0aGUgcGxhY2UgZmlyc3QgdG8gZmluZCBhIHdheSB0byBjbGVhciBpcyBuZWVkZWQuPC9icj5cIik7XG4gICAgICAgIFwiMTBcIj09Yi5tYXhzcGVlZCYmKGErPSd0cmFmZmljLWNhbG1lZCBzZWN0b3I6IG1heHNwZWVkIDEwIEttL2ggYW5kIFwicmlnaHQgb3ZlciBsZWZ0XCI8L2JyPicpO1wiMzBcIj09Yi5tYXhzcGVlZCYmKGErPSd0cmFmZmljLWNhbG1lZCBzZWN0b3I6IFwicmlnaHQgb3ZlciBsZWZ0XCIgYW5kIG1heHNwZWVkIDMwIEttL2g8L2JyPicpO1wiNTBcIj09Yi5tYXhzcGVlZCYmKGErPVwibWF4c3BlZWQgNTAgS20vaDwvYnI+XCIpO1wiNzBcIj09Yi5tYXhzcGVlZCYmKGErPVwibWF4c3BlZWQgNTAgS20vaDwvYnI+XCIpO1wiODBcIj09Yi5tYXhzcGVlZCYmKGErPVwibWF4c3BlZWQgODAgS20vaDwvYnI+XCIpO1wiMTAwXCI9PWIubWF4c3BlZWQmJihhKz1cIm1heHNwZWVkICAxMDAgS20vaDwvYnI+XCIpO1wibm9cIj09Yi5vdmVydGFraW5nJiYoYSs9XCJObyBvdmVydGFraW5nITwvYnI+XCIpO1wieWVzXCI9PWIubm9leGl0JiYoYSs9XCJub2V4aXQ8L2JyPlwiKTtcInllc1wiPT1iLm9uZXdheSYmKGErPVwib25ld2F5PC9icj5cIik7XCJkZXNpZ25hdGVkXCI9PVxuICAgICAgICBiLnByaW9yaXR5X3JvYWQmJihhKz1cInByaW9yaXR5IHJvYWQgZGVzaWduYXRlZDwvYnI+XCIpO1wiZW5kXCI9PWIucHJpb3JpdHlfcm9hZCYmKGErPVwicHJpb3JpdHkgcm9hZCBlbmRzPC9icj5cIik7XCJlbWVyZ2VuY3lfYmF5XCI9PWIuaGlnaHdheSYmKGErPVwiZW1lcmdlbmN5IGJheTwvYnI+XCIpO1wieWVzXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJ0cmFmZmljIGNhbG1pbmc8L2JyPlwiKTtcImJ1bXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImJ1bXA8L2JyPlwiKTtcImNoaWNhbmVcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImNoaWNhbmU8L2JyPlwiKTtcImNob2tlclwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiY2hva2VyPC9icj5cIik7XCJjdXNoaW9uXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJjdXNoaW9uPC9icj5cIik7XCJodW1wXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJodW1wPC9icj5cIik7XCJpc2xhbmRcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImlzbGFuZDwvYnI+XCIpO1xuICAgICAgICBcInJ1bWJsZV9zdHJpcFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwicnVtYmxlIHN0cmlwPC9icj5cIik7XCJ0YWJsZVwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwidGFibGU8L2JyPlwiKTtpZihcInBhcmtpbmdcIj09Yi5hbWVuaXR5JiYoXCJ5ZXNcIj09Yi5mZWUmJihhKz1cImZlZSByZXF1aXJlZDxici8+XCIpLGM9YltcImNhcGFjaXR5OndvbWVuXCJdLFwiXCIhPWMmJlwibm9cIiE9YyYmbnVsbCE9Yykpe3ZhciBkPVwidW5rb3duXCI7XCJ5ZXNcIiE9YyYmKGQ9Yyk7YSs9XCJsYWRpZXMgcGFya2luZyBzcGFjZXMgKG51bWJlcnM6IFwiK2QrXCIpIDxici8+XCJ9Yi5wYXJrX3JpZGUmJihcImJ1c1wiPT1iLnBhcmtfcmlkZSYmKGErPVwiYnVzIGNvbm5lY3Rpb248YnIvPlwiKSxcInRyYW1cIj09Yi5wYXJrX3JpZGUmJihhKz1cInRyYW0gY29ubmVjdGlvbjxici8+XCIpLFwidW5rbm93blwiPT1iLnBhcmtfcmlkZSYmKGErPVwicGFyayByaWRlIHVua293bjxici8+XCIpKTtiW1wicmFpbHdheTpwb3NpdGlvblwiXSYmKGErPVwicmFpbHdheTxici8+cG9zaXRpb246IFwiK1xuICAgICAgICBiW1wicmFpbHdheTpwb3NpdGlvblwiXStcIjxici8+XCIpO2IudWljX3JlZiYmKGErPVwiVUlDOiBcIitiLnVpY19yZWYrXCI8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50U3BvcnRzPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCI5cGluXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogOXBpbjxici8+XCIpO1wiMTBwaW5cIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiAxMHBpbjxici8+XCIpO1wiYW1lcmljYW5fZm9vdGJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBhbWVyaWNhbiBmb290YmFsbDxici8+XCIpO1wiYWlraWRvXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYWlraWRvPGJyLz5cIik7XCJhcmNoZXJ5XCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYXJjaGVyeTxici8+XCIpO1wiYXRobGV0aWNzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYXRobGV0aWNzPGJyLz5cIik7XCJhdXN0cmFsaWFuX2Zvb3RiYWxsXCI9PWIuc3BvcnQmJlxuICAgIChhKz1cInBvc3NpYmxlIHNwb3J0IDogYXVzdHJhbGlhbiBmb290YmFsbDxici8+XCIpO1wiYmFzZVwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJhc2U8YnIvPlwiKTtcImJhZG1pbnRvblwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJhZG1pbnRvbjxici8+XCIpO1wiYmFzZWJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBiYXNlYmFsbDxici8+XCIpO1wiYmFza2V0YmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJhc2tldGJhbGw8YnIvPlwiKTtcImJlYWNodm9sbGV5YmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJlYWNodm9sbGV5YmFsbDxici8+XCIpO1wiYm14XCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYm14PGJyLz5cIik7XCJib3VsZXNcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBib3VsZXM8YnIvPlwiKTtcImJvdWxlXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYm91bGU8YnIvPlwiKTtcbiAgICAgICAgXCJib3dsc1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJvd2xzPGJyLz5cIik7XCJib3hpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBib3hpbmc8YnIvPlwiKTtcImNhbmFkaWFuX2Zvb3RiYWxsXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY2FuYWRpYW4gZm9vdGJhbGw8YnIvPlwiKTtcImNhbm9lXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY2Fub2U8YnIvPlwiKTtcImNoZXNzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY2hlc3M8YnIvPlwiKTtcImNsaWZmX2RpdmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGNsaWZmIGRpdmluZzxici8+XCIpO1wiY2xpbWJpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBjbGltYmluZzxici8+XCIpO1wiY2xpbWJpbmdfYWR2ZW50dXJlXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYWR2ZW50dXJlIGNsaW1iaW5nPGJyLz5cIik7XCJjcmlja2V0XCI9PVxuICAgICAgICBiLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGNyaWNrZXQ8YnIvPlwiKTtcImNyaWNrZXRfbmV0c1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGNyaWNrZXQgbmV0czxici8+XCIpO1wiY3JvcXVldFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGNyb3F1ZXQ8YnIvPlwiKTtcImN1cmxpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBjdXJsaW5nPGJyLz5cIik7XCJjeWNsaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY3ljbGluZzxici8+XCIpO2lmKFwiZGFydHNcIj09Yi5zcG9ydHx8XCJkYXJ0XCI9PWIuc3BvcnQpYSs9XCJEYXJ0czxici8+XCI7XCJkb2dfcmFjaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogZG9nIHJhY2luZzxici8+XCIpO1wiZmVuY2luZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGZlbmNpbmc8YnIvPlwiKTtcImVxdWVzdHJpYW5cIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBlcXVlc3RyaWFuPGJyLz5cIik7XG4gICAgICAgIFwiZm9vdGJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IGFtZXJpY2FuIGZvb3RiYWxsPGJyLz5cIik7XCJmcmVlX2ZseWluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogZnJlZSBmbHlpbmc8YnIvPlwiKTtcImdhZWxpY19nYW1lc1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogZ2FlbGljIGdhbWVzPGJyLz5cIik7XCJnb2xmXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBnb2xmPGJyLz5cIik7XCJneW1uYXN0aWNzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBneW1uYXN0aWs8YnIvPlwiKTtcImhvY2tleVwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogaG9ja2V5PGJyLz5cIik7XCJob3JzZXNob2VzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBob3JzZXNob2VzPGJyLz5cIik7XCJob3JzZV9yYWNpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IGhvcnNlIHJhY2luZzxici8+XCIpO1wiaWNlX3N0b2NrXCI9PVxuICAgICAgICBiLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogaWNlIHN0b2NrPGJyLz5cIik7XCJqdWRvXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBqdWRvPGJyLz5cIik7XCJrYXJ0aW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBrYXJ0aW5nPGJyLz5cIik7XCJraXRlc3VyZmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDoga2l0ZXN1cmZpbmc8YnIvPlwiKTtcImtvcmZiYWxsXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBrb3JmYmFsbDxici8+XCIpO1wibW90b3JcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IG1vdG9yPGJyLz5cIik7XCJtdWx0aVwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogbXVsdGk8YnIvPlwiKTtcIm9ic3RhY2xlX2NvdXJzZVwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogb2JzdGFjbGUgY291cnNlPGJyLz5cIik7XCJvcmllbnRlZXJpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IG9yaWVudGVlcmluZzxici8+XCIpO1xuICAgICAgICBcInBhZGRsZV90ZW5uaXNcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHBhZGRsZS10ZW5uaXM8YnIvPlwiKTtcInBhcmFnbGlkaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBwYXJhZ2xpZGluZzxici8+XCIpO1wiUGVsb3RhXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBQZWxvdGE8YnIvPlwiKTtcInJhc3F1ZXRcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHJhY3F1ZXQ8YnIvPlwiKTtcInJvd2luZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogcm93aW5nPGJyLz5cIik7XCJydWdieV9sZWFndWVcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHJ1Z2J5IGxlYWd1ZTxici8+XCIpO1wicnVnYnlfdW5pb25cIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHJ1Z2J5IHVuaW9uPGJyLz5cIik7XCJydW5uaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBydW5uaW5nPGJyLz5cIik7XCJzY3ViYV9kaXZpbmdcIj09Yi5zcG9ydCYmXG4gICAgICAgIChhKz1cInBvc3NpYmxlIHNwb3J0OiBzY3ViYSBkaXZpbmc8YnIvPlwiKTtcInNob290aW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBzaG9vdGluZzxici8+XCIpO1wic2thdGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogc2thdGluZzxici8+XCIpO1wic2thdGVib2FyZFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogc2thdGVib2FyZDxici8+XCIpO1wic2tpaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBza2lpbmc8YnIvPlwiKTtcInNvY2NlclwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogc29jY2VyPGJyLz5cIik7XCJzdXJmaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBzdXJmaW5nPGJyLz5cIik7XCJzd2ltbWluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogc3dpbW1pbmc8YnIvPlwiKTtcInRhYmxlX3Rlbm5pc1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogdGFibGUgdGVubmlzPGJyLz5cIik7XG4gICAgICAgIFwidGFla3dvbmRvXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiB0YWVrd29uZG88YnIvPlwiKTtcInRlYW1faGFuZGJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHRlYW0gaGFuZGJhbGw8YnIvPlwiKTtcInRlbm5pc1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogdGVubmlzPGJyLz5cIik7XCJ0b2JvZ2dhblwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogdG9ib2dnYW48YnIvPlwiKTtcInZvbGxleWJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHZvbGxleWJhbGw8YnIvPlwiKTtcIndhdGVyX3NraVwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogd2F0ZXIgc2tpPGJyLz5cIik7XCJ3ZWlnaHRsaWZ0aW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiB3ZWlnaHRsaWZ0aW5nPGJyLz5cIik7XCJ3cmVzdGxpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHdyZXN0bGluZzxici8+XCIpO3JldHVybiBhfTtcbmV4cG9ydCBmdW5jdGlvbiBmbkFyenRJbmZvKGIpe3ZhciBhPVwiXCIsYz1cIlwiLGQ9YltcImhlYWx0aGNhcmU6c3BlY2lhbGl0eVwiXTtcIlwiIT1kJiYoXCJnZW5lcmFsXCI9PWQmJihjKz1cImdlbmVyYWw8YnIvPlwiKSxcImFsbGVyZ29sb2d5XCI9PWQmJihjKz1cImFsbGVyZ29sb2d5PGJyLz5cIiksXCJhbmFlc3RoZXRpY3NcIj09ZCYmKGMrPVwiYW5hZXN0aGV0aWNzPGJyLz5cIiksXCJiaW9jaGVtaXN0cnlcIj09ZCYmKGMrPVwiYmlvY2hlbWlzdHJ5PGJyLz5cIiksXCJiaW9sb2dpY2FsX2hhZW1hdG9sb2d5XCI9PWQmJihjKz1cImJpb2xvZ2ljYWwgaGFlbWF0b2xvZ3k8YnIvPlwiKSxcImJpb2xvZ3lcIj09ZCYmKGMrPVwiYmlvbG9neTxici8+XCIpLFwiY2FyZGlvbG9neVwiPT1kJiYoYys9XCJjYXJkaW9sb2d5PGJyLz5cIiksXCJjYXJkaWFjX3N1cmdlcnlcIj09ZCYmKGMrPVwiY2FyZGlhYyBzdXJnZXJ5PGJyLz5cIiksXCJjaGlsZF9wc3ljaGlhdHJ5XCI9PWQmJihjKz1cImNoaWxkIHBzeWNoaWF0cnk8YnIvPlwiKSxcImRlbnRhbF9vcmFsX21heGlsbG9fZmFjaWFsX3N1cmdlcnlcIj09XG5kJiYoYys9XCJkZW50YWwtLCBvcmFsLSwgbWF4aWxsby0gYW5kIGZhY2lhbC1zdXJnZXJ5PGJyLz5cIiksXCJkZXJtYXRvbG9neVwiPT1kJiYoYys9XCJkZXJtYXRvbG9neTxici8+XCIpLFwiZGVybWF0b3ZlbmVyZW9sb2d5XCI9PWQmJihjKz1cImRlcm1hdG92ZW5lcmVvbG9neTxici8+XCIpLFwiZGlhZ25vc3RpY19yYWRpb2xvZ3lcIj09ZCYmKGMrPVwiZGlhZ25vc3RpYyByYWRpb2xvZ3k8YnIvPlwiKSxcImVtZXJnZW5jeVwiPT1kJiYoYys9XCJlbWVyZ2VuY3k8YnIvPlwiKSxcImVuZG9jcmlub2xvZ3lcIj09ZCYmKGMrPVwiZW5kb2NyaW5vbG9neTxici8+XCIpLFwiZ2FzdHJvZW50ZXJvbG9naWNhbF9zdXJnZXJ5XCI9PWQmJihjKz1cImdhc3Ryb2VudGVyb2xvZ2ljYWwgc3VyZ2VyeTxici8+XCIpLFwiZ2FzdHJvZW50ZXJvbG9neVwiPT1kJiYoYys9XCJnYXN0cm9lbnRlcm9sb2d5PGJyLz5cIiksXCJnZXJpYXRyaWNzXCI9PWQmJihjKz1cImdlcmlhdHJpY3M8YnIvPlwiKSxcImd5bmFlY29sb2d5XCI9PWQmJihjKz1cImd5bmFlY29sb2d5PGJyLz5cIiksXG5cImhhZW1hdG9sb2d5XCI9PWQmJihjKz1cImhhZW1hdG9sb2d5PGJyLz5cIiksXCJoZXBhdG9sb2d5XCI9PWQmJihjKz1cImhlcGF0b2xvZ3k8YnIvPlwiKSxcImltbXVub2xvZ3lcIj09ZCYmKGMrPVwiaW1tdW5vbG9neTxici8+XCIpLFwiaW5mZWN0aW91c19kaXNlYXNlc1wiPT1kJiYoYys9XCJpbmZlY3Rpb3VzIGRpc2Vhc2VzPGJyLz5cIiksXCJpbnRlbnNpdmVcIj09ZCYmKGMrPVwiaW50ZW5zaXZlPGJyLz5cIiksXCJpbnRlcm5hbFwiPT1kJiYoYys9XCJpbnRlcm5hbDxici8+XCIpLFwibWF4aWxsb2ZhY2lhbF9zdXJnZXJ5XCI9PWQmJihjKz1cIm1heGlsbG9mYWNpYWwgc3VyZ2VyeTxici8+XCIpLFwibmVwaHJvbG9neVwiPT1kJiYoYys9XCJuZXBocm9sb2d5PGJyLz5cIiksXCJuZXVyb2xvZ3lcIj09ZCYmKGMrPVwibmV1cm9sb2d5PGJyLz5cIiksXCJuZXVyb3BoeXNpb2xvZ3lcIj09ZCYmKGMrPVwibmV1cm9waHlzaW9sb2d5PGJyLz5cIiksXCJuZXVyb3BzeWNoaWF0cnlcIj09ZCYmKGMrPVwibmV1cm9wc3ljaGlhdHJ5PGJyLz5cIiksXCJuZXVyb3N1cmdlcnlcIj09XG5kJiYoYys9XCJuZXVyb3N1cmdlcnk8YnIvPlwiKSxcIm51Y2xlYXJcIj09ZCYmKGMrPVwibnVjbGVhcjxici8+XCIpLFwib2NjdXBhdGlvbmFsXCI9PWQmJihjKz1cIm9jY3VwYXRpb25hbCA8YnIvPlwiKSxcIm9uY29sb2d5XCI9PWQmJihjKz1cIm9uY29sb2d5PGJyLz5cIiksXCJvcGh0aGFsbW9sb2d5XCI9PWQmJihjKz1cIm9waHRoYWxtb2xvZ3k8YnIvPlwiKSxcIm9ydGhvcGFlZGljc1wiPT1kJiYoYys9XCJvcnRob3BhZWRpY3M8YnIvPlwiKSxcIm90b2xhcnluZ29sb2d5XCI9PWQmJihjKz1cIm90b2xhcnluZ29sb2d5PGJyLz5cIiksXCJwYWVkaWF0cmljX3N1cmdlcnlcIj09ZCYmKGMrPVwicGFlZGlhdHJpYyBzdXJnZXJ5PGJyLz5cIiksXCJwYWVkaWF0cmljc1wiPT1kJiYoYys9XCJwYWVkaWF0cmljczxici8+XCIpLFwicGFsbGlhdGl2ZVwiPT1kJiYoYys9XCJwYWxsaWF0aXZlPGJyLz5cIiksXCJwaHlzaWF0cnlcIj09ZCYmKGMrPVwicGh5c2lhdHJ5PGJyLz5cIiksXCJwbGFzdGljX3N1cmdlcnlcIj09ZCYmKGMrPVwicGxhc3RpYyBzdXJnZXJ5PGJyLz5cIiksXG5cInByb2N0b2xvZ3lcIj09ZCYmKGMrPVwicHJvY3RvbG9neTxici8+XCIpLFwicHN5Y2hpYXRyeVwiPT1kJiYoYys9XCJwc3ljaGlhdHJ5PGJyLz5cIiksXCJwdWxtb25vbG9neVwiPT1kJiYoYys9XCJwdWxtb25vbG9neTxici8+XCIpLFwicmFkaW9sb2d5XCI9PWQmJihjKz1cInJhZGlvbG9neTxici8+XCIpLFwicmFkaW90aGVyYXB5XCI9PWQmJihjKz1cInJhZGlvdGhlcmFweTxici8+XCIpLFwicmhldW1hdG9sb2d5XCI9PWQmJihjKz1cInJoZXVtYXRvbG9neTxici8+XCIpLFwic3RvbWF0b2xvZ3lcIj09ZCYmKGMrPVwic3RvbWF0b2xvZ3k8YnIvPlwiKSxcInN1cmdlcnlcIj09ZCYmKGMrPVwic3VyZ2VyeTxici8+XCIpLFwic3VyZ2ljYWxfb25jb2xvZ3lcIj09ZCYmKGMrPVwic3VyZ2ljYWwgb25jb2xvZ3k8YnIvPlwiKSxcInRob3JhY2ljX3N1cmdlcnlcIj09ZCYmKGMrPVwidGhvcmFjaWMgc3VyZ2VyeTxici8+XCIpLFwidHJhbnNwbGFudFwiPT1kJiYoYys9XCJ0cmFuc3BsYW50PGJyLz5cIiksXCJ0cmF1bWFcIj09ZCYmKGMrPVwidHJhdW1hPGJyLz5cIiksXG5cInRyb3BpY2FsXCI9PWQmJihjKz1cInRyb3BpY2FsPGJyLz5cIiksXCJ1cm9sb2d5XCI9PWQmJihjKz1cInVyb2xvZ3k8YnIvPlwiKSxcInZhc2N1bGFyX3N1cmdlcnlcIj09ZCYmKGMrPVwidmFzY3VsYXIgc3VyZ2VyeTxici8+XCIpLFwidmVuZXJlb2xvZ3lcIj09ZCYmKGMrPVwidmVuZXJlb2xvZ3k8YnIvPlwiKSxcImFjdXB1bmN0dXJlXCI9PWQmJihjKz1cImFjdXB1bmN0dXJlPGJyLz5cIiksXCJuYXR1cm9wYXRoeVwiPT1kJiYoYys9XCJuYXR1cm9wYXRoeTxici8+XCIpLFwiY2hpcm9wcmFjdGljXCI9PWQmJihjKz1cImNoaXJvcHJhY3RpYyA8YnIvPlwiKSxcImhvbWVvcGF0aHlcIj09ZCYmKGMrPVwiaG9tZW9wYXRoeTxici8+XCIpLFwib3N0ZW9wYXRoeVwiPT1kJiYoYys9XCJvc3Rlb3BhdGh5PGJyLz5cIikpO1wiXCIhPWIuaGVhbHRoX3NwZWNpYWx0eSYmKFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmZhbWlseV9tZWRpY2luZVwiXSYmKGMrPVwiZmFtaWx5IG1lZGljaW5lPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZW1lcmdlbmN5X21lZGljaW5lXCJdJiZcbihjKz1cImVtZXJnZW5jeSBtZWRpY2luZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmFuYWVzdGhlc2lvbG9neVwiXSYmKGMrPVwiYW5hZXN0aGVzaW9sb2d5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZGVybWF0b2xvZ3lcIl0mJihjKz1cImRlcm1hdG9sb2d5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZWFyX25vc2VfdGhyb2F0XCJdJiYoYys9XCJlYXIsIG5vc2UsIHRocm9hdCAoRU5UIHNwZWNpYWxpc3QpPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6b2NjdXBhdGlvbmFsX21lZGljaW5lXCJdJiYoYys9XCJvY2N1cGF0aW9uYWwgbWVkaWNpbmU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTppbnRlcm5hbF9tZWRpY2luZVwiXSYmKGMrPVwiaW50ZXJuYWwgbWVkaWNpbmU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpuZXVyb2xvZ3lcIl0mJihjKz1cIm5ldXJvbG9neTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om9waHRoYWxtb2xvZ3lcIl0mJlxuKGMrPVwib3BodGhhbG1vbG9neTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBhbGxpYXRpdmVfbWVkaWNpbmVcIl0mJihjKz1cInBhbGxpYXRpdmUgbWVkaWNpbmU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpwc3ljaGlhdHJ5XCJdJiYoYys9XCJwc3ljaGlhdHJ5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6Z3luYWVjb2xvZ3lcIl0mJihjKz1cImd5bmFlY29sb2d5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6dXJvbG9neVwiXSYmKGMrPVwidXJvbG9neTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBhaW5fbWVkaWNpbmVcIl0mJihjKz1cInBhaW4gbWVkaWNpbmU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTplbnZpcm9ubWVudGFsX21lZGljaW5lXCJdJiYoYys9XCJlbnZpcm9ubWVudGFsIG1lZGljaW5lPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6aW50ZW5zaXZlX2NhcmVfbWVkaWNpblwiXSYmXG4oYys9XCJpbnRlbnNpdmUgY2FyZSBtZWRpY2luPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cGFlZGlhdHJpY3NcIl0mJihjKz1cInBhZWRpYXRyaWNzPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cGh5c2lhdHJ5XCJdJiYoYys9XCJwaHlzaWF0cnk8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpyYWRpb2xvZ3lcIl0mJihjKz1cInJhZGlvbG9neTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmdlbmVyYWxcIl0mJihjKz1cImdlbmVyYWw8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvY2N1cGF0aW9uYWxfdGhlcmFweVwiXSYmKGMrPVwib2NjdXBhdGlvbmFsIHRoZXJhcHk8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpwdWxtb25vbG9neVwiXSYmKGMrPVwicHVsbW9ub2xvZ3k8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTphY3VwdW5jdHVyZVwiXSYmKGMrPVwiYWN1cHVuY3R1cmU8YnIvPlwiKSxcInllc1wiPT1cbmJbXCJoZWFsdGhfc3BlY2lhbHR5Om9ydGhvcGFlZGljc1wiXSYmKGMrPVwib3J0aG9wYWVkaWNzPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6Y2hpcm9wcmFjdGljXCJdJiYoYys9XCJjaGlyb3ByYWN0aWM8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpzcG9ydHNfbWVkaWNpbmVcIl0mJihjKz1cInNwb3J0cyBtZWRpY2luZTxici8+XCIpKTtcIlwiIT1jJiYoYT1hK1wic3ViamVjdHM6IFwiKygnPGRpdiBjbGFzcz1cImM0Z19vcGVuX3RleHRcIj4nK2MrXCI8L2Rpdj5cIikpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuS3JhZnR3ZXJrSW5mbyhiKXt2YXIgYT1cIlwiO2lmKGJbXCJnZW5lcmF0b3I6bWV0aG9kXCJdKXthKz1cIm1ldGhvZCBvZiBnZW5lcmF0aW9uOiBcIjtzd2l0Y2goYltcImdlbmVyYXRvcjptZXRob2RcIl0pe2Nhc2UgXCJjb21idXN0aW9uXCI6YSs9XCJjb21idXN0aW9uXCI7YnJlYWs7Y2FzZSBcInRoZXJtYWxcIjphKz1cInRoZXJtYWxcIjticmVhaztjYXNlIFwicHVtcGluZ1wiOmErPVwicHVtcGluZ1wiO2JyZWFrO2Nhc2UgXCJwaG90b3ZvbHRhaWNcIjphKz1cInBob3Rvdm9sdGFpY1wiO2JyZWFrO2Nhc2UgXCJnYXNpZmljYXRpb25cIjphKz1cImdhc2lmaWNhdGlvblwiO2JyZWFrO2Nhc2UgXCJhbmFlcm9iaWNfZGlnZXN0aW9uXCI6YSs9XCJhbmFlcm9iaWMgZGlnZXN0aW9uXCI7YnJlYWs7Y2FzZSBcInB5cm9seXNpc1wiOmErPVwicHlyb2x5c2lzXCI7YnJlYWs7Y2FzZSBcImZpc3Npb25cIjphKz1cImZpc3Npb25cIjticmVhaztjYXNlIFwiZnVzaW9uXCI6YSs9XCJmdXNpb25cIjticmVhaztkZWZhdWx0OmErPVwidW5rbm93bjxici8+XCJ9YSs9XG4gICAgXCI8YnIvPlwifWlmKGIucG93ZXJfc291cmNlKXthKz1cInBvd2VyIHNvdXJjZTogXCI7c3dpdGNoKGIucG93ZXJfc291cmNlKXtjYXNlIFwicGhvdG92b2x0YWljXCI6YSs9XCJwaG90b3ZvbHRhaWNcIjticmVhaztkZWZhdWx0OmErPVwidW5rbm93bjxici8+XCJ9YSs9XCI8YnIvPlwifWJbXCJnZW5lcmF0b3I6b3V0cHV0OmVsZWN0cmljaXR5XCJdJiYoYSs9XCJlbGVjdHJpY2l0eSBnZW5lcmF0aW9uOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDplbGVjdHJpY2l0eVwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmhlYXRcIl0mJihhKz1cImhlYXQgZ2VuZXJhdGlvbjogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6aGVhdFwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRcIl0mJihhKz1cImNvbGQgZ2VuZXJhdGlvbjogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZFwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0XCJdJiYoYSs9XCJvdXRwdXQ6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0XCJdK1wiPGJyLz5cIik7XG4gICAgYltcImdlbmVyYXRvcjpvdXRwdXQ6aG90X2FpclwiXSYmKGErPVwiaG90LWFpciBnZW5lcmF0aW9uOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpob3RfYWlyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZF93YXRlclwiXSYmKGErPVwiY29sZCB3YXRlciBnZW5lcmF0aW9uOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpjb2xkX3dhdGVyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZF9haXJcIl0mJihhKz1cImNvbGQgYWlyIGdlbmVyYXRpb246IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRfYWlyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29tcHJlc3NlZF9haXJcIl0mJihhKz1cImNvbXByZXNzZWQgYWlyIGdlbmVyYXRpb246IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbXByZXNzZWRfYWlyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6c3RlYW1cIl0mJihhKz1cInN0ZWFtIGdlbmVyYXRpb246IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OnN0ZWFtXCJdK1xuICAgICAgICBcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OnZhY3V1bVwiXSYmKGErPVwidmFjdXVtIGdlbmVyYXRpb246IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OnZhY3V1bVwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmJhdHRlcnlfY2hhcmdpbmdcIl0mJihhKz1cImJhdHRlcnkgY2hhcmdpbmc6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmJhdHRlcnlfY2hhcmdpbmdcIl0rXCI8YnIvPlwiKTtcIlBXUlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkJXUi0xXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiQldSLTJcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItM1wiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitcbiAgICAgICAgYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItNFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkJXUi01XCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiQldSLTZcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJQSFdSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiR0NSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiRkJSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcbiAgICAgICAgXCI8YnIvPlwiKTtcIlJCTUstMTAwMFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIlJCTUstMTUwMFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIlZWRVJcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJDQU5EVVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkNQUi0xMDAwXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiRVBSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1xuICAgIFwidG9rYW1ha1wiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcInN0ZWxsYXJhdG9yXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiSUNGXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiY29sZC1mdXNpb25cIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJ3aW5kX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjptZXRob2RcIl0mJlwiaG9yaXpvbnRhbF9heGlzXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIG1ldGhvZDogaG9yaXpvbnRhbCBheGlzIHdpbmQgdHVyYmluZTxici8+XCIpO1wid2luZF90dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6bWV0aG9kXCJdJiZcbiAgICBcInZlcnRpY2FsX2F4aXNcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgbWV0aG9kOiB2ZXJ0aWNhbCBheGlzIHdpbmQgdHVyYmluZTxici8+XCIpO1wiZnJhbmNpc190dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IGZyYW5jaXMtdHVyYmluZTxici8+XCIpO1wia2FwbGFuX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZToga2FwbGFuLXR1cmJpbmU8YnIvPlwiKTtcInBlbHRvbl90dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IHBlbHRvbi10dXJiaW5lPGJyLz5cIik7XCJzdHJlYW1cIj09YltcImdlbmVyYXRvcjptZXRob2RcIl0mJlwiaG9yaXpvbnRhbF9heGlzXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIG1ldGhvZDogaG9yaXpvbnRhbCBheGlzIHNlYSBjdXJyZW50IHBvd2VyIHN0YXRpb248YnIvPlwiKTtcInN0cmVhbVwiPT1iW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSYmXG4gICAgXCJ2ZXJ0aWNhbF9heGlzXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IHZlcnRpY2FsIGF4aXMgc2VhIGN1cnJlbnQgcG93ZXIgc3RhdGlvbjxici8+XCIpO1wic3RlYW1fdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBzdGVhbSB0dXJiaW5lPGJyLz5cIik7XCJoZWF0X3B1bXBcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogaGVhdCBwdW1wPGJyLz5cIik7XCJzb2xhcl90aGVybWFsX2NvbGxlY3RvclwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBzb2xhciB0aGVybWFsIGNvbGxlY3Rvcjxici8+XCIpO1wic29sYXJfcGhvdG92b2x0YWljX3BhbmVsXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IHNvbGFyIHBob3Rvdm9sdGFpYyBwYW5lbDxici8+XCIpO1wic3RlYW1fZ2VuZXJhdG9yXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVxuICAgICAgICBcImdlbmVyYXRvciB0eXBlOiBzdGVhbSBnZW5lcmF0b3I8YnIvPlwiKTtcImdhc190dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IGdhcyB0dXJiaW5lPGJyLz5cIik7XCJjb21iaW5lZF9jeWNsZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBjb21iaW5lZCBjeWNsZTxici8+XCIpO1wicmVjaXByb2NhdGluZ19lbmdpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogcmVjaXByb2NhdGluZyBlbmdpbmU8YnIvPlwiKTtyZXR1cm4gYX1cbmV4cG9ydCBmdW5jdGlvbiBmbldlcnRzdG9mZmluZm8oYil7dmFyIGE9XCJcIjtpZihcImNvbnRhaW5lclwiPT1iLnJlY3ljbGluZ190eXBlfHxcImNlbnRyZVwiPT1iLnJlY3ljbGluZ190eXBlfHxcInJlY3ljbGluZ1wiPT1iLmFtZW5pdHkpXCJ5ZXNcIj09YltcInJlY3ljbGluZzpnbGFzc1wiXSYmKGErPVwiZ2xhc3MgY29udGFpbmVyPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpzaG9lc1wiXSYmKGErPVwic2hvZSBjb250YWluZXI8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmNvb2tpbmdfb2lsXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgY29va2luZyBvaWw8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnBhcGVyXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgcGFwZXI8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmVuZ2luZV9vaWxcIl0mJihhKz1cInJlY3ljbGluZyBvZiBlbmdpbmUgb2lsPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjbG90aGVzXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgY2xvdGhlczwvYnI+XCIpLFxuXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjYXJfYmF0dGVyaWVzXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgY2FyIGJhdHRlcmllczwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6Y2Fuc1wiXSYmKGErPVwicmVjeWNsaW5nIG9mIGNhbnM8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnNjcmFwX21ldGFsXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2Ygc2NyYXAgbWV0YWw8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnBsYXN0aWNcIl0mJihhKz1cInJlY3ljbGluZyBvZiBwbGFzdGljPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpiYXR0ZXJyaWVzXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgYmF0dGVycmllczwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6cGxhc3RpY19ib3R0bGVzXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgcGxhc3RpYyBib3R0bGVzPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpncmVlbl93YXN0ZVwiXSYmKGErPVwicmVjeWNsaW5nIG9mIGdyZWVuIHdhc3RlPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpoYXJkY29yZVwiXSYmXG4oYSs9XCJyZWN5Y2xpbmcgb2YgaGFyZGNvcmU8L2JyPlwiKTtyZXR1cm4gYX1cbnZhciBmbkNvbnRlbnRHZW5lcmFsSW5mb3JtYXRpb25zPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7Yi53aWR0aCYmKGErPVwid2lkdGg6IFwiK2Iud2lkdGgrXCIgbTxici8+XCIpO2IuaGVpZ2h0JiYoYSs9XCJoZWlnaHQ6IFwiK2IuaGVpZ2h0K1wiIG08YnIvPlwiKTtiLm1heHdpZHRoJiYoYSs9XCJtYXh3aWR0aDogXCIrYi5tYXh3aWR0aCtcIiBtPGJyLz5cIik7Yi5tYXhoZWlnaHQmJihhKz1cIm1heGhlaWdodDogXCIrYi5tYXhoZWlnaHQrXCIgbTxici8+XCIpO2IubWF4d2VpZ2h0JiYoYSs9XCJtYXh3ZWlnaHQ6IFwiK2IubWF4d2VpZ2h0K1wiIHQ8YnIvPlwiKTtiLm1heHNwZWVkJiYoYSs9XCJtYXhzcGVlZDogXCIrYi5tYXhzcGVlZCtcIiBrbS9oPGJyLz5cIik7Yi5taW5fYWdlJiYoYSs9XCJtaW5pbXVtIGFnZTogXCIrYi5taW5fYWdlK1wiPGJyLz5cIik7Yi5tYXhfYWdlJiYoYSs9XCJtYXhpbXVtIGFnZTogXCIrYi5tYXhfYWdlK1wiPGJyLz5cIik7XCJ5ZXNcIj09Yi5udWRpc20mJihhKz1cIm51ZGlzbTxici8+XCIpO1wieWVzXCI9PWIucnVpbnMmJlxuKGErPVwicnVpbnM8YnIvPlwiKTtiLmVsZSYmKGErPVwiaGVpZ2h0IGFib3ZlIHNlYSBsZXZlbDogXCIrYi5lbGUrXCIgbTxici8+XCIpO2JbXCJ4bWFzOmRheV9kYXRlXCJdJiYoYSs9XCJwZXJpb2QgZnJvbSAtIHRpbGw6IFwiK2JbXCJ4bWFzOmRheV9kYXRlXCJdK1wiPGJyLz5cIik7YltcInJvdG9yOmRpYW1ldGVyXCJdJiYoYSs9XCJkaWFtZXRlciBvZiByb3RvcjogXCIrYltcInJvdG9yOmRpYW1ldGVyXCJdK1wiIG08YnIvPlwiKTtiW1wieG1hczpub3RlXCJdJiYoYSs9XCJpbmZvcm1hdGlvbjogXCIrYltcInhtYXM6bm90ZVwiXStcIjxici8+XCIpO1wicG9ydFwiPT1iW1wic2VhbWFyazpiZWFjb25fbGF0ZXJhbDpjYXRlZ29yeVwiXSYmKGErPVwicG9ydDxici8+XCIpO1wic3RhcmJvYXJkXCI9PWJbXCJzZWFtYXJrOmJlYWNvbl9sYXRlcmFsOmNhdGVnb3J5XCJdJiYoYSs9XCJzdGFyYm9hcmQ8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOnJldGFpbFwiXSYmKGErPVwicmV0YWlsIGJpY3ljbGVzPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpyZXBhaXJcIl0mJlxuKGErPVwicmVwYWlyIGJpY3ljbGVzPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpyZW50YWxcIl0mJihhKz1cInJlbnRhbCBiaWN5Y2xlczxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6cHVtcFwiXSYmKGErPVwidXNlIG9mIGEgcHVtcCBpcyBwb3NzaWJsZTxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6ZGl5XCJdJiYoYSs9XCJkaXkgaXMgcG9zc2libGU8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOmNsZWFuaW5nXCJdJiYoYSs9XCJjbGVhbmluZyBiaWN5Y2xlczxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6c2Vjb25kX2hhbmRcIl0mJihhKz1cInNhbGUgb2Ygc2Vjb25kIGhhbmQgYmljeWNsZXM8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOmNoYXJnaW5nXCJdJiYoYSs9XCJjaGFyZ2luZyBlbGVjdHJpYyBiaWtlcyBpcyBwb3NzaWJsZTxici8+XCIpO1wieWVzXCI9PWIuY2FmZSYmKGErPVwiY2FmZTxici8+XCIpO1wieWVzXCI9PWIuYnJlYWtmYXN0JiZcbihhKz1cImJyZWFrZmFzdDxici8+XCIpO1wieWVzXCI9PWIuc25hY2smJihhKz1cInNuYWNrPGJyLz5cIik7XCJ5ZXNcIj09Yi5pbmRvb3Jfc2VhdGluZyYmKGErPVwiaW5kb29yIHNlYXRpbmc8YnIvPlwiKTtcInllc1wiPT1iLm91dGRvb3Jfc2VhdGluZyYmKGErPVwib3V0ZG9vciBzZWF0aW5nPGJyLz5cIik7XCJ5ZXNcIj09Yi5zZWxmX3NlcnZpY2UmJihhKz1cInNlbGYgc2VydmljZTxici8+XCIpO1wieWVzXCI9PWIuYmFrZWhvdXNlJiYoYSs9XCJiYWtlaG91c2U8YnIvPlwiKTtcInllc1wiPT1iLnBhc3RyeV9zaG9wJiYoYSs9XCJwYXN0cnkgc2hvcDxici8+XCIpO1wieWVzXCI9PWIuZmFpcl90cmFkZSYmKGErPVwiZmFpciB0cmFkZTxici8+XCIpO1wib25seVwiPT1iLmZhaXJfdHJhZGUmJihhKz1cIm9ubHkgZmFpciB0cmFkZTxici8+XCIpO1wibm9cIj09Yi5mYWlyX3RyYWRlJiYoYSs9XCJubyBmYWlyIHRyYWRlPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEhlYWx0aGNhcmU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImRvY3RvcnNcIj09XG4gICAgYi5hbWVuaXR5fHxcInBoeXNpY2lhblwiPT1iLm9mZmljZXx8XCJkb2N0b3JcIj09Yi5oZWFsdGhjYXJlKWErPWZuQXJ6dEluZm8oYiksYi5tZWRpY2FsX2FyZWEmJihhKz1iLm1lZGljYWxfYXJlYStcIjxici8+XCIpLGIudHlwZSYmKGErPWIudHlwZStcIjxici8+XCIpLGJbXCJkb2N0b3JzOmRlXCJdJiYoYSs9YltcImRvY3RvcnM6ZGVcIl0rXCI8YnIvPlwiKSxiW1wibm90ZTpkZVwiXSYmKGErPWJbXCJub3RlOmRlXCJdK1wiPGJyLz5cIik7XCJ5ZXNcIj09Yi5kaXNwZW5zaW5nJiYoYSs9XCJwaGFybWFjeSB3aXRoIGRpc3BlbnNpbmc8YnIvPlwiKTtcImFidXNlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogYWJ1c2VkIHBlb3BsZTxici8+XCIpO1wiY2hpbGRcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cInNvY2lhbCBmYWNpbGl0eSBmb3I6IGNoaWxkcmVuPGJyLz5cIik7XCJkaXNhYmxlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogZGlzYWJsZWQgcGVvcGxlPGJyLz5cIik7XG4gICAgXCJkaXNlYXNlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogZGlzZWFzZWQgcGVvcGxlPGJyLz5cIik7XCJkcnVnX2FkZGljdGVkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBkcnVnIGFkZGljdGVkIHBlb3BsZTxici8+XCIpO1wiaG9tZWxlc3NcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cInNvY2lhbCBmYWNpbGl0eSBmb3I6IGhvbWVsZXNzPGJyLz5cIik7XCJqdXZlbmlsZVwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjoganV2ZW5pbGUgYW5kIHRlZW5hZ2VyPGJyLz5cIik7XCJtZW50YWxfaGVhbHRoXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBwZW9wbGUgd2l0aCBtZW50YWwgaGVhbHRoIHByb2JsZW1zPGJyLz5cIik7XCJtaWdyYW50XCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiZcbiAgICAoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBtaWdyYW50czxici8+XCIpO1wib3JwaGFuXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBvcnBoYW5zPGJyLz5cIik7XCJzZW5pb3JcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cInNvY2lhbCBmYWNpbGl0eSBmb3I6IHNlbmlvcnM8YnIvPlwiKTtcInVuZGVycHJpdmlsZWdlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogdW5kZXJwcml2aWxlZ2VkIHBlb3BsZTxici8+XCIpO1widW5lbXBsb3llZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogdW5lbXBsb3llZDxici8+XCIpO1widmljdGltXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiB2aWN0aW1zPGJyLz5cIik7cmV0dXJuIGF9O1xuZXhwb3J0IGZ1bmN0aW9uIGZuQWRkaXRpb25hbEJ1aWxkaW5nSW5mb3MoYil7dmFyIGE9XCJcIjtiW1wiYnVpbGRpbmc6Y29sb3JcIl0mJihhKz1cImJ1aWxkaW5nIGNvbG9yOiBcIitiW1wiYnVpbGRpbmc6Y29sb3JcIl0rXCI8L2JyPlwiKTtiW1wiYnVpbGRpbmc6aGVpZ2h0XCJdJiYoYSs9XCJidWlsZGluZyBoZWlnaHQ6IFwiK2JbXCJidWlsZGluZzpoZWlnaHRcIl0rXCIgbTwvYnI+XCIpO2JbXCJidWlsZGluZzpsZXZlbFwiXSYmKGErPVwibGV2ZWw6IFwiK2JbXCJidWlsZGluZzpsZXZlbFwiXStcIjwvYnI+XCIpO2JbXCJidWlsZGluZzpwYXJ0XCJdJiYoYSs9XCJidWlsZGluZyBwYXJ0OiBcIitiW1wiYnVpbGRpbmc6cGFydFwiXStcIjwvYnI+XCIpO2JbXCJyb29mOmNvbG9yXCJdJiYoYSs9XCJyb29mIGNvbG9yOiBcIitiW1wicm9vZjpjb2xvdXJcIl0rXCI8L2JyPlwiKTtiW1wicm9vZjpzaGFwZVwiXSYmKGErPVwicm9vZiBzaGFwZTogXCIrYltcInJvb2Y6c2hhcGVcIl0rXCI8L2JyPlwiKTtiW1wicm9vZjpoZWlnaHRcIl0mJihhKz1cInJvb2YgaGVpZ2h0OiBcIitiW1wicm9vZjpoZWlnaHRcIl0rXG4gICAgXCIgbTwvYnI+XCIpO2JbXCJyb29mOm1hdGVyaWFsXCJdJiYoYSs9XCJyb29mIG1hdGVyaWFsOiBcIitiW1wicm9vZjptYXRlcmlhbFwiXStcIiA8L2JyPlwiKTtiW1wicm9vZjpvcmllbnRhdGlvblwiXSYmKGErPVwicm9vZiBvcmllbnRhdGlvbjogXCIrYltcInJvb2Y6b3JpZW50YXRpb25cIl0rXCIgPC9icj5cIik7YltcInJvb2Y6ZGlyZWN0aW9uXCJdJiYoYSs9XCJyb29mIGRpcmVjdGlvbjogXCIrYltcInJvb2Y6ZGlyZWN0aW9uXCJdK1wiIDwvYnI+XCIpO2JbXCJidWlsZGluZzp0eXBlXCJdJiYoYSs9XCJidWlsZGluZyB0eXBlOiBcIitiW1wiYnVpbGRpbmc6dHlwZVwiXStcIjwvYnI+XCIpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuU2ljaGVyaGVpdEFkZGl0aW9uYWwoYil7dmFyIGE9XCJcIjtcInN1cnZlaWxsYW5jZVwiPT1iLm1hbl9tYWRlJiYoXCJpbmRvb3JcIj09Yi5zdXJ2ZWlsbGFuY2UmJihhKz1cImluZG9vciBzdXJ2ZWlsbGFuY2VcIiksXCJvdXRkb29yXCI9PWIuc3VydmVpbGxhbmNlJiYoYSs9XCJvdXRkb29yIHN1cnZlaWxsYW5jZVwiKSxcInB1YmxpY1wiPT1iLnN1cnZlaWxsYW5jZSYmKGErPVwicHVibGljIHN1cnZlaWxsYW5jZVwiKSxcImNhbWVyYVwiPT1iW1wic3VydmVpbGxhbmNlOnR5cGVcIl0mJihhKz1cInR5cGUgb2Ygc3VydmVpbGxhbmNlOiBjYW1lcmFcIiksXCJndWFyZFwiPT1iW1wic3VydmVpbGxhbmNlOnR5cGVcIl0mJihhKz1cInR5cGUgb2Ygc3VydmVpbGxhbmNlOiBndWFyZFwiKSxcIkFMUFJcIj09YltcInN1cnZlaWxsYW5jZTp0eXBlXCJdJiYoYSs9XCJ0eXBlIG9mIHN1cnZlaWxsYW5jZTogQUxQUlwiKSxcInRvd25cIj09YltcInN1cnZlaWxsYW5jZTp6b25lXCJdJiYoYSs9XCJ6b25lIG9mIHN1cnZlaWxsYW5jZTogdG93blwiKSxcblwicGFya2luZ1wiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cInpvbmUgb2Ygc3VydmVpbGxhbmNlOiBwYXJraW5nXCIpLFwidHJhZmZpY1wiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cInpvbmUgb2Ygc3VydmVpbGxhbmNlOiB0cmFmZmljXCIpLFwic2hvcFwiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cInpvbmUgb2Ygc3VydmVpbGxhbmNlOiBzaG9wXCIpLFwiYmFua1wiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cInpvbmUgb2Ygc3VydmVpbGxhbmNlOiBiYW5rXCIpLFwiYnVpbGRpbmdcIj09YltcInN1cnZlaWxsYW5jZTp6b25lXCJdJiYoYSs9XCJ6b25lIG9mIHN1cnZlaWxsYW5jZTogYnVpbGRpbmdcIikpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuV3JlY2tJbmZvKGIpe3ZhciBhPVwiXCI7XCJ3cmVja1wiPT1iLmhpc3RvcmljJiYoYltcIndyZWNrOmRhdGVfc3Vua1wiXSYmKGErPVwic3VuazogXCIrYltcIndyZWNrOmRhdGVfc3Vua1wiXStcIjxici8+XCIpLGJbXCJ3cmVjazpkZXB0aFwiXSYmKGErPVwiZGVwdGg6IFwiK2JbXCJ3cmVjazpkZXB0aFwiXStcIjxici8+XCIpLGJbXCJ3cmVjazpjbGVhcmFuY2VcIl0mJihhKz1cImNsZWFyYW5jZTogXCIrYltcIndyZWNrOmNsZWFyYW5jZVwiXStcIjxici8+XCIpLGJbXCJ3cmVjazpkYXRlX2NvbW1pc3Npb25lZFwiXSYmKGErPVwiY29tbWlzc2lvbmVkOiBcIitiW1wid3JlY2s6ZGF0ZV9jb21taXNzaW9uZWRcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6Z3Jvc3NfdG9ubmFnZVwiXSYmKGErPVwiZ3Jvc3MgdG9ubmFnZTogXCIrYltcIndyZWNrOmdyb3NzX3Rvbm5hZ2VcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6bGVuZ3RoXCJdJiYoYSs9XCJsZW5ndGg6IFwiK2JbXCJ3cmVjazpsZW5ndGhcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6d2lkdGhcIl0mJihhKz1cbiAgICBcIndpZHRoOiBcIitiW1wid3JlY2s6d2lkdGhcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6Y2FyZ29cIl0mJihhPVwidGltYmVyXCI9PWJbXCJ3cmVjazpjYXJnb1wiXT9hK1wiY2FyZ286IHRpbWJlcjxici8+XCI6XCJjb2FsXCI9PWJbXCJ3cmVjazpjYXJnb1wiXT9hK1wiY2FyZ286IGNvYWw8YnIvPlwiOmErKFwiY2FyZ286IFwiK2JbXCJ3cmVjazpjYXJnb1wiXStcIjxici8+XCIpKSxcInllc1wiPT1iW1wid3JlY2s6dmlzaWJsZV9hdF9sb3dfdGlkZVwiXSYmKGErPVwidmlzaWJsZSBhdCBsb3cgdGlkZTogeWVzPGJyLz5cIiksXCJub1wiPT1iW1wid3JlY2s6dmlzaWJsZV9hdF9sb3dfdGlkZVwiXSYmKGErPVwidmlzaWJsZSBhdCBsb3cgdGlkZTogbm88YnIvPlwiKSxcInllc1wiPT1iW1wid3JlY2s6dmlzaWJsZV9hdF9oaWdoX3RpZGVcIl0mJihhKz1cInZpc2libGUgYXQgaGlnaCB0aWRlOiB5ZXM8YnIvPlwiKSxcIm5vXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2hpZ2hfdGlkZVwiXSYmKGErPVwidmlzaWJsZSBhdCBoaWdoIHRpZGU6IG5vPGJyLz5cIiksXCJ5ZXNcIj09XG5iLmFjY2VzcyYmKGErPVwiYWNjZXNzaWJsZTxici8+XCIpLFwibm9cIj09Yi5hY2Nlc3MmJihhKz1cIm5vIGFjY2VzcyBwb3NzaWJsZTxici8+XCIpLFwicGVybWl0X3JlcXVpcmVkXCI9PWIuYWNjZXNzJiYoYSs9XCJwZXJtaXQgcmVxdWlyZWQgZm9yIGFjY2VzPGJyLz5cIikpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuS2xvc3RlckFkZGl0aW9uYWwoYil7dmFyIGE9XCJcIjtpZihiW1wibW9uYXN0ZXJ5OnR5cGVcIl0pc3dpdGNoKGJbXCJtb25hc3Rlcnk6dHlwZVwiXSl7Y2FzZSBcIm1vbmFzdGVyeVwiOmErPVwidHlwZTogbW9uYXN0ZXJ5PGJyLz5cIjticmVhaztjYXNlIFwiY29udmVudFwiOmErPVwidHlwZTogY29udmVudDxici8+XCI7YnJlYWs7Y2FzZSBcImNhbm9ucnlcIjphKz1cInR5cGU6IGNhbm9ucnk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb21tYW5kcnlcIjphKz1cInR5cGU6IGNvbW1hbmRyeTxici8+XCI7YnJlYWs7Y2FzZSBcImhlcm1pdGFnZVwiOmErPVwidHlwZTogaGVybWl0YWdlPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidHlwZTogdW5rbm93bjxici8+XCJ9YltcImNvbW11bml0eTpnZW5kZXJcIl0mJihcIm1hbGVcIj09YltcImNvbW11bml0eTpnZW5kZXJcIl0mJihhKz1cImdlbmRlcjogbWFsZTxici8+XCIpLFwiZmVtYWxlXCI9PWJbXCJjb21tdW5pdHk6Z2VuZGVyXCJdJiYoYSs9XCJnZW5kZXI6IGZlbWFsZTxici8+XCIpKTtcbiAgICBiLnJlbGlnaW91c19yYW5rJiYoXCJhYmJleVwiPT1iLnJlbGlnaW91c19yYW5rP2ErPVwicmVsaWdpb3VzIHJhbms6IGFiYmV5PGJyLz5cIjpcImFiYmV5XCI9PWIucmVsaWdpb3VzX3JhbmsmJihhKz1cInJlbGlnaW91cyByYW5rOiBhYmJleTxici8+XCIpKTtcInllc1wiPT1iLnNocmluZSYmKGErPVwiZmVhdHVyZTogc2hyaW5lPGJyLz5cIik7XCJ5ZXNcIj09Yi5zYW5jdHVhcnkmJihhKz1cImZlYXR1cmU6IHNhbmN0dWFyeTxici8+XCIpO2lmKGIucmVsaWdpb24pc3dpdGNoKGIucmVsaWdpb24pe2Nhc2UgXCJhbmltaXN0XCI6YSs9XCJyZWxpZ2lvbjogYW5pbWlzdDxici8+PGJyLz5cIjticmVhaztjYXNlIFwiYmFoYWlcIjphKz1cInJlbGlnaW9uOiBiYWhhaTxici8+XCI7YnJlYWs7Y2FzZSBcImJ1ZGRoaXN0XCI6YSs9XCJyZWxpZ2lvbjogYnVkZGhpc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaHJpc3RpYW5cIjphKz1cInJlbGlnaW9uOiBjaHJpc3RpYW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJoaW5kdVwiOmErPVwicmVsaWdpb246IGhpbmR1PGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcIklnbGVzaWFOaUNyaXN0b1wiOmErPVwicmVsaWdpb246IElnbGVzaWFOaUNyaXN0bzxici8+XCI7YnJlYWs7Y2FzZSBcImphaW5cIjphKz1cInJlbGlnaW9uOiBqYWluPGJyLz5cIjticmVhaztjYXNlIFwiamV3aXNoXCI6YSs9XCJyZWxpZ2lvbjogamV3aXNoPGJyLz5cIjticmVhaztjYXNlIFwibXVsdGlmYWl0aFwiOmErPVwicmVsaWdpb246IG11bHRpZmFpdGg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtdXNsaW1cIjphKz1cInJlbGlnaW9uOiBtdXNsaW08YnIvPlwiO3R5cGUrPVwiTW9zcXVlPGJyLz5cIjticmVhaztjYXNlIFwicGFnYW5cIjphKz1cInJlbGlnaW9uOiBwYWdhbjxici8+XCI7YnJlYWs7Y2FzZSBcInBhc3RhZmFyaWFuXCI6YSs9XCJyZWxpZ2lvbjogcGFzdGFmYXJpYW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJzY2llbnRvbG9naXN0XCI6YSs9XCJyZWxpZ2lvbjogc2NpZW50b2xvZ2lzdDxici8+XCI7YnJlYWs7Y2FzZSBcInNoaW50b1wiOmErPVwicmVsaWdpb246IHNoaW50bzxici8+XCI7YnJlYWs7Y2FzZSBcInNpa2hcIjphKz1cbiAgICAgICAgXCJyZWxpZ2lvbjogc2lraDxici8+XCI7YnJlYWs7Y2FzZSBcInNwaXJpdHVhbGlzdFwiOmErPVwicmVsaWdpb246IHNwaXJpdHVhbGlzdDxici8+XCI7YnJlYWs7Y2FzZSBcInRhb2lzdFwiOmErPVwicmVsaWdpb246IHRhb2lzdDxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRhcmlhblwiOmErPVwicmVsaWdpb246IHVuaXRhcmlhbjxici8+XCI7YnJlYWs7Y2FzZSBcInlhemlkaVwiOmErPVwicmVsaWdpb246IHlhemlkaTxici8+XCI7YnJlYWs7Y2FzZSBcInpvcm9hc3RyaWFuXCI6YSs9XCJlbGlnaW9uOiB6b3JvYXN0cmlhbjxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInJlbGlnaW9uOiB1bmtub3duPGJyLz5cIn1pZihiLmRlbm9taW5hdGlvbilzd2l0Y2goYi5kZW5vbWluYXRpb24pe2Nhc2UgXCJhbmdsaWNhblwiOmErPVwiZGVub21pbmF0aW9uOiBBbmdsaWNhbjxici8+PGJyLz5cIjticmVhaztjYXNlIFwiYmFwdGlzdFwiOmErPVwiZGVub21pbmF0aW9uOiBCYXB0aXN0PGJyLz5cIjticmVhaztjYXNlIFwiY2F0aG9saWNcIjphKz1cImRlbm9taW5hdGlvbjogQ2F0aG9saWM8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwicm9tYW5fY2F0aG9saWNcIjphKz1cImRlbm9taW5hdGlvbjogUm9tYW4gQ2F0aG9saWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvbGRfY2F0aG9saWNcIjphKz1cImRlbm9taW5hdGlvbjogT2xkIENhdGhvbGljPGJyLz5cIjticmVhaztjYXNlIFwiZ3JlZWtfY2F0aG9saWNcIjphKz1cImRlbm9taW5hdGlvbjogR3JlZWsgQ2F0aG9saWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJldmFuZ2VsaWNhbFwiOmErPVwiZGVub21pbmF0aW9uOiBFdmFuZ2VsaWNhbFwiO2Nhc2UgXCJqZWhvdmFoc193aXRuZXNzXCI6YSs9XCJkZW5vbWluYXRpb246IEplaG92YWhzIFdpdG5lc3M8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsdXRoZXJhblwiOmErPVwiZGVub21pbmF0aW9uOiBMdXRoZXJhbjxici8+XCI7YnJlYWs7Y2FzZSBcIm1lbm5vbml0ZVwiOmErPVwiZGVub21pbmF0aW9uOiBNZW5ub25pdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtZXNzaWFuaWNfamV3aXNoXCI6YSs9XCJkZW5vbWluYXRpb246IE1lc3NpYW5pYyBKZXdpc2g8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwibWV0aG9kaXN0XCI6YSs9XCJkZW5vbWluYXRpb246IE1ldGhvZGlzdDxici8+XCI7YnJlYWs7Y2FzZSBcIm1vcm1vblwiOmErPVwiZGVub21pbmF0aW9uOiBNb3Jtb248YnIvPlwiO2JyZWFrO2Nhc2UgXCJuZXdfYXBvc3RvbGljXCI6YSs9XCJkZW5vbWluYXRpb246IE5ldyBBcG9zdG9saWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvcnRob2RveFwiOmErPVwiZGVub21pbmF0aW9uOiBPcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcImdyZWVrX29ydGhvZG94XCI6YSs9XCJkZW5vbWluYXRpb246IEdyZWVrIE9ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwiY29wdGljX29ydGhvZG94XCI6YSs9XCJkZW5vbWluYXRpb246IGNvcHRpYyBvcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcInBlbnRlY29zdGFsXCI6YSs9XCJkZW5vbWluYXRpb246IHBlbnRlY29zdGFsPGJyLz5cIjticmVhaztjYXNlIFwicHJlc2J5dGVyaWFuXCI6YSs9XCJkZW5vbWluYXRpb246IFByZXNieXRlcmlhbjxici8+XCI7YnJlYWs7Y2FzZSBcInByb3Rlc3RhbnRcIjphKz1cbiAgICAgICAgXCJkZW5vbWluYXRpb246IFByb3Rlc3RhbnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJxdWFrZXJcIjphKz1cImRlbm9taW5hdGlvbjogUXVha2VyPGJyLz5cIjticmVhaztjYXNlIFwicmVmb3JtZWRcIjphKz1cImRlbm9taW5hdGlvbjogUmVmb3JtZWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJydXNzaWFuX29ydGhvZG94XCI6YSs9XCJkZW5vbWluYXRpb246IFJ1c3NpYW4tT3J0aG9kb3g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZXZlbnRoX2RheV9hZHZlbnRpc3RcIjphKz1cImRlbm9taW5hdGlvbjogU2V2ZW50aCBEYXkgQWR2ZW50aXN0PGJyLz5cIjticmVhaztjYXNlIFwiY2hyaXN0aWFuX2NvbW11bml0eVwiOmErPVwiZGVub21pbmF0aW9uOiBDaHJpc3RpYW4gQ29tbXVuaXR5PGJyLz5cIjticmVhaztjYXNlIFwiYWR2ZW50aXN0XCI6YSs9XCJkZW5vbWluYXRpb246IEFkdmVudGlzdDxici8+XCI7YnJlYWs7Y2FzZSBcImFsbGlhbmNlXCI6YSs9XCJkZW5vbWluYXRpb246IEFsbGlhbmNlPGJyLz5cIjticmVhaztjYXNlIFwiYXNzZW1ibGllc19vZl9nb2RcIjphKz1cbiAgICAgICAgXCJkZW5vbWluYXRpb246IEFzc2VtYmxpZXMgb2YgR29kPGJyLz5cIjticmVhaztjYXNlIFwiYXBvc3RvbGljXCI6YSs9XCJkZW5vbWluYXRpb246IEFwb3N0b2xpYzxici8+XCI7YnJlYWs7Y2FzZSBcImFybWVuaWFuX2Fwb3N0b2xpY1wiOmErPVwiZGVub21pbmF0aW9uOiBBcm1lbmlhbiBBcG9zdG9saWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhc3N5cmlhblwiOmErPVwiZGVub21pbmF0aW9uOiBBc3N5cmlhbjxici8+XCI7YnJlYWs7Y2FzZSBcImNocmlzdF9zY2llbnRpc3RcIjphKz1cImRlbm9taW5hdGlvbjogQ2hyaXN0IFNjaWVudGlzdDxici8+XCI7YnJlYWs7Y2FzZSBcImNodXJjaF9vZl9zY290bGFuZFwiOmErPVwiZGVub21pbmF0aW9uOiBDaHVyY2ggb2YgU2NvdGxhbmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjemVjaG9zbG92YWtfaHVzc2l0ZVwiOmErPVwiZGVub21pbmF0aW9uOiBDemVjaG9zbG92YWsgSHVzc2l0ZTxici8+XCI7YnJlYWs7Y2FzZSBcImR1dGNoX3JlZm9ybWVkXCI6YSs9XCJkZW5vbWluYXRpb246IER1dGNoIFJlZm9ybWVkPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcImV4Y2x1c2l2ZV9icmV0aHJlblwiOmErPVwiZGVub21pbmF0aW9uOiBFeGNsdXNpdmUgQnJldGhyZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJmb3Vyc3F1YXJlXCI6YSs9XCJkZW5vbWluYXRpb246IEZvdXJzcXVhcmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJraW1iYW5ndWlzdFwiOmErPVwiZGVub21pbmF0aW9uOiBLaW1iYW5ndWlzdDxici8+XCI7YnJlYWs7Y2FzZSBcImxpdmluZ193YXRlcnNfY2h1cmNoXCI6YSs9XCJkZW5vbWluYXRpb246IExpdmluZyBXYXRlcnMgQ2h1cmNoPGJyLz5cIjticmVhaztjYXNlIFwibWFyaWF2aXRlXCI6YSs9XCJkZW5vbWluYXRpb246IE1hcmlhdml0ZTxici8+XCI7YnJlYWs7Y2FzZSBcIm1hcm9uaXRlXCI6YSs9XCJkZW5vbWluYXRpb246IE1hcm9uaXRlPGJyLz5cIjticmVhaztjYXNlIFwibW9yYXZpYW5cIjphKz1cImRlbm9taW5hdGlvbjogTW9yYXZpYW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJuYXphcmVuZVwiOmErPVwiZGVub21pbmF0aW9uOiBOYXphcmVuZTxici8+XCI7YnJlYWs7XG4gICAgICAgIGNhc2UgXCJub25kZW5vbWluYXRpb25hbFwiOmErPVwiZGVub21pbmF0aW9uOiBOb25kZW5vbWluYXRpb25hbDxici8+XCI7YnJlYWs7Y2FzZSBcIm9sZF9iZWxpZXZlcnNcIjphKz1cImRlbm9taW5hdGlvbjogT2xkIEJlbGlldmVyczxici8+XCI7YnJlYWs7Y2FzZSBcInBvbGlzaF9jYXRob2xpY1wiOmErPVwiZGVub21pbmF0aW9uOiBQb2xpc2gtQ2F0aG9saWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzYWx2YXRpb25fYXJteVwiOmErPVwiZGVub21pbmF0aW9uOiBTYWx2YXRpb24gQXJteTxici8+XCI7YnJlYWs7Y2FzZSBcInNhbnRvX2RhaW1lXCI6YSs9XCJkZW5vbWluYXRpb246IFNhbnRvIERhaW1lPGJyLz5cIjticmVhaztjYXNlIFwic2VyYmlhbl9vcnRob2RveFwiOmErPVwiZGVub21pbmF0aW9uOiBTZXJiaXNjaC1PcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcInNwaXJpdGlzbVwiOmErPVwiZGVub21pbmF0aW9uOiBTcGlyaXRpc208YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bml0ZWRcIjphKz1cImRlbm9taW5hdGlvbjogVW5pdGVkPGJyLz5cIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJ1bml0ZWRfY2h1cmNoX29mX2NocmlzdFwiOmErPVwiZGVub21pbmF0aW9uOiBVbml0ZWQgQ2h1cmNoIG9mIENocmlzdDxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRlZF9mcmVlX2NodXJjaF9vZl9zY290bGFuZFwiOmErPVwiZGVub21pbmF0aW9uOiBVbml0ZWQgRnJlZSBDaHVyY2ggb2YgU2NvdGxhbmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bml0ZWRfbWV0aG9kaXN0XCI6YSs9XCJkZW5vbWluYXRpb246IFVuaXRlZCBNZXRob2Rpc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bml0ZWRfcmVmb3JtZWRcIjphKz1cImRlbm9taW5hdGlvbjogVW5pdGVkIFJlZm9ybWVkPGJyLz5cIjticmVhaztjYXNlIFwidW5pdGluZ1wiOmErPVwiZGVub21pbmF0aW9uOiBVbml0aW5nPGJyLz5cIjticmVhaztjYXNlIFwiY2h1cmNoX29mX3N3ZWRlblwiOmErPVwiZGVub21pbmF0aW9uOiBDaHVyY2ggb2YgU3dlZGVuPGJyLz5cIjticmVhaztjYXNlIFwibWlzc2lvbl9jb3ZlbmFudF9jaHVyY2hfb2Zfc3dlZGVuXCI6YSs9XCJkZW5vbWluYXRpb246IE1pc3Npb24gQ292ZW5hbnQgQ2h1cmNoIE9mIFN3ZWRlbjxici8+XCI7XG4gICAgICAgICAgICBicmVhaztjYXNlIFwiYWx0ZXJuYXRpdmVcIjphKz1cImRlbm9taW5hdGlvbjogYWx0ZXJuYXRpdmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhc2hrZW5hemlcIjphKz1cImRlbm9taW5hdGlvbjogYXNoa2VuYXppPGJyLz5cIjticmVhaztjYXNlIFwiYnVjaGFyaVwiOmErPVwiZGVub21pbmF0aW9uOiBidWNoYXJpPGJyLz5cIjticmVhaztjYXNlIFwiY29uc2VydmF0aXZlXCI6YSs9XCJkZW5vbWluYXRpb246IGNvbnNlcnZhdGl2ZTxici8+XCI7YnJlYWs7Y2FzZSBcImVnYWxpdGFyaWFuXCI6YSs9XCJkZW5vbWluYXRpb246IGVnYWxpdGFyaWFuPGJyLz5cIjticmVhaztjYXNlIFwiaGFzaWRpY1wiOmErPVwiZGVub21pbmF0aW9uOiBoYXNpZGljPGJyLz5cIjticmVhaztjYXNlIFwiaHVtYW5pc3RpY1wiOmErPVwiZGVub21pbmF0aW9uOiBodW1hbmlzdGljPGJyLz5cIjticmVhaztjYXNlIFwia2FiYmFsYWhcIjphKz1cImRlbm9taW5hdGlvbjoga2FiYmFsYWg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJrYWJiYWxpc3RpY1wiOmErPVwiZGVub21pbmF0aW9uOiBrYWJiYWxpc3RpYzxici8+XCI7XG4gICAgICAgICAgICBicmVhaztjYXNlIFwia2FyYWl0ZVwiOmErPVwiZGVub21pbmF0aW9uOiBrYXJhaXRlPGJyLz5cIjticmVhaztjYXNlIFwibGliZXJhbFwiOmErPVwiZGVub21pbmF0aW9uOiBsaWJlcmFsPGJyLz5cIjticmVhaztjYXNlIFwibHViYXZpdGNoXCI6YSs9XCJkZW5vbWluYXRpb246IGx1YmF2aXRjaDxici8+XCI7YnJlYWs7Y2FzZSBcImx1YmF2aXRjaF9tZXNzaWFuaWNcIjphKz1cImRlbm9taW5hdGlvbjogbHViYXZpdGNoIG1lc3NpYW5pYzxici8+XCI7YnJlYWs7Y2FzZSBcIm1penJhY2hpX2JhZ2hkYWRpXCI6YSs9XCJkZW5vbWluYXRpb246IG1penJhY2hpIGJhZ2hkYWRpPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfY2hpZGFcIjphKz1cImRlbm9taW5hdGlvbjogbWl6cmFjaGkgY2hpZGE8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtaXpyYWNoaV9qZXJ1c2FsZW1pdGVcIjphKz1cImRlbm9taW5hdGlvbjogbWl6cmFjaGkgamVydXNhbGVtaXRlPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfbGl2b3Jub1wiOmErPVwiZGVub21pbmF0aW9uOiBtaXpyYWNoaSBsaXZvcm5vPGJyLz5cIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJtaXpyYWNoaV9tb3JvY2NhblwiOmErPVwiZGVub21pbmF0aW9uOiBtaXpyYWNoaSBtb3JvY2Nhbjxici8+XCI7YnJlYWs7Y2FzZSBcIm1vZGVybl9vcnRob2RveFwiOmErPVwiZGVub21pbmF0aW9uOiBtb2Rlcm4gb3J0aG9kb3g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJuZW9fb3J0aG9kb3hcIjphKz1cImRlbm9taW5hdGlvbjogbmVvIG9ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwibm9uZGVub21pbmF0aW9uYWxcIjphKz1cImRlbm9taW5hdGlvbjogbm9uZGVub21pbmF0aW9uYWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvcnRob2RveFwiOmErPVwiZGVub21pbmF0aW9uOiBvcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcIm9ydGhvZG94X2FzaGtlbmF6XCI6YSs9XCJkZW5vbWluYXRpb246IG9ydGhvZG94IGFzaGtlbmF6PGJyLz5cIjticmVhaztjYXNlIFwib3J0aG9kb3hfc2VmYXJkXCI6YSs9XCJkZW5vbWluYXRpb246IG9ydGhvZG94IHNlZmFyZDxici8+XCI7YnJlYWs7Y2FzZSBcInByb2dyZXNzaXZlXCI6YSs9XG4gICAgICAgICAgICBcImRlbm9taW5hdGlvbjogcHJvZ3Jlc3NpdmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyZWNvbnN0cnVjdGlvbmlzdFwiOmErPVwiZGVub21pbmF0aW9uOiByZWNvbnN0cnVjdGlvbmlzdDxici8+XCI7YnJlYWs7Y2FzZSBcInJlZm9ybVwiOmErPVwiZGVub21pbmF0aW9uOiByZWZvcm08YnIvPlwiO2JyZWFrO2Nhc2UgXCJyZW5ld2FsXCI6YSs9XCJkZW5vbWluYXRpb246IHJlbmV3YWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzYW1hcml0YW5cIjphKz1cImRlbm9taW5hdGlvbjogc2FtYXJpdGFuPGJyLz5cIjticmVhaztjYXNlIFwic2VmYXJkaVwiOmErPVwiZGVub21pbmF0aW9uOiBzZWZhcmRpPGJyLz5cIjticmVhaztjYXNlIFwic2VmYXJkaV9hbXN0ZXJkYW1cIjphKz1cImRlbm9taW5hdGlvbjogc2VmYXJkaSBhbXN0ZXJkYW08YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZWZhcmRpX2xvbmRvblwiOmErPVwiZGVub21pbmF0aW9uOiBzZWZhcmRpIGxvbmRvbjxici8+XCI7YnJlYWs7Y2FzZSBcInRyYWRpdGlvbmFsXCI6YSs9XCJkZW5vbWluYXRpb246IHRyYWRpdGlvbmFsPGJyLz5cIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJ1bHRyYV9vcnRob2RveFwiOmErPVwiZGVub21pbmF0aW9uOiB1bHRyYSBvcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcInVuYWZmaWxpYXRlZFwiOmErPVwiZGVub21pbmF0aW9uOiB1bmFmZmlsaWF0ZWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ5ZW1lbml0ZVwiOmErPVwiZGVub21pbmF0aW9uOiB5ZW1lbml0ZTxici8+XCI7YnJlYWs7Y2FzZSBcInllbWVuaXRlX2JhbGFkaVwiOmErPVwiZGVub21pbmF0aW9uOiB5ZW1lbml0ZSBiYWxhZGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ5ZW1lbml0ZV9zaGFtaVwiOmErPVwiZGVub21pbmF0aW9uOiB5ZW1lbml0ZSBzaGFtaTxici8+XCI7YnJlYWs7Y2FzZSBcImFobWFkaXlhXCI6YSs9XCJkZW5vbWluYXRpb246IGFobWFkaXlhPGJyLz5cIjticmVhaztjYXNlIFwiYWxhb3VpdGVcIjphKz1cImRlbm9taW5hdGlvbjogYWxhb3VpdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkcnV6ZVwiOmErPVwiZGVub21pbmF0aW9uOiBkcnV6ZTxici8+XCI7YnJlYWs7Y2FzZSBcImliYWRpXCI6YSs9XG4gICAgICAgICAgICBcImRlbm9taW5hdGlvbjogaWJhZGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJpc21haWxpXCI6YSs9XCJkZW5vbWluYXRpb246IGlzbWFpbGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzaGlhXCI6YSs9XCJkZW5vbWluYXRpb246IHNoaWE8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzdW5uaVwiOmErPVwiZGVub21pbmF0aW9uOiBzdW5uaTxici8+XCI7YnJlYWs7Y2FzZSBcIm5pY2hpcmVuXCI6YSs9XCJkZW5vbWluYXRpb246IG5pY2hpcmVuPGJyLz5cIjticmVhaztjYXNlIFwiam9kb19zaGluc2h1XCI6YSs9XCJkZW5vbWluYXRpb246IGpvZG8gc2hpbnNodTxici8+XCI7YnJlYWs7Y2FzZSBcImpvZG9fc2h1XCI6YSs9XCJkZW5vbWluYXRpb246IGpvZG8gc2h1PGJyLz5cIjticmVhaztjYXNlIFwidmFqcmF5YW5hXCI6YSs9XCJkZW5vbWluYXRpb246IHZhanJheWFuYTxici8+XCI7YnJlYWs7Y2FzZSBcInNoaW5nb25fc2h1XCI6YSs9XCJkZW5vbWluYXRpb246IHNoaW5nb24gc2h1PGJyLz5cIjticmVhaztjYXNlIFwiemVuXCI6YSs9XCJkZW5vbWluYXRpb246IHplbjxici8+XCI7XG4gICAgICAgICAgICBicmVhaztjYXNlIFwidGhhaV9tYWhhbmlrYXlhXCI6YSs9XCJkZW5vbWluYXRpb246IHRoYWkgbWFoYW5pa2F5YTxici8+XCI7YnJlYWs7Y2FzZSBcInRoYWlfdGhhbW1heXV0XCI6YSs9XCJkZW5vbWluYXRpb246IHRoYWkgdGhhbW1heXV0PGJyLz5cIjticmVhaztjYXNlIFwiYXNhdHJ1XCI6YSs9XCJkZW5vbWluYXRpb246IGFzYXRydTxici8+XCI7YnJlYWs7Y2FzZSBcImNlbHRpY1wiOmErPVwiZGVub21pbmF0aW9uOiBjZWx0aWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJncmVjb19yb21hblwiOmErPVwiZGVub21pbmF0aW9uOiBncmVjbyByb21hbjxici8+XCI7YnJlYWs7Y2FzZSBcIndpY2NhXCI6YSs9XCJkZW5vbWluYXRpb246IHdpY2NhPGJyLz5cIjticmVhaztjYXNlIFwiaXJhbmlcIjphKz1cImRlbm9taW5hdGlvbjogaXJhbmk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXJzaVwiOmErPVwiZGVub21pbmF0aW9uOiBwYXJzaTxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVua25vd248YnIvPlwifWlmKGIuY29tbXVuaXR5KXN3aXRjaChiLmNvbW11bml0eSl7Y2FzZSBcIkFBXCI6YSs9XG4gICAgICAgIFwiY29tbXVuaXR5IChBQSk6IEF1Z3VzdGluaWFucyBvZiB0aGUgQXNzdW1wdGlvbiA8YnIvPlwiO2JyZWFrO2Nhc2UgXCJCU0NNXCI6YSs9XCJjb21tdW5pdHkgKEJTQ00pOiBBZG9yZXJzIG9mIHRoZSBTYWNyZWQgSGVhcnQgb2YgSmVzdXMgb2YgTW9udG1hcnRyZSA8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDQk1WXCI6YSs9XCJjb21tdW5pdHkgKENCTVYpOiBBdWd1c3RpbmVyLUNob3JmcmF1ZW4gQi5NLlYuPGJyLz5cIjticmVhaztjYXNlIFwiQ09cIjphKz1cImNvbW11bml0eSAoQ08pOiBPcmF0b3JpYW5zPGJyLz5cIjticmVhaztjYXNlIFwiQ01DXCI6YSs9XCJjb21tdW5pdHkgKENNQyk6IENvbmdyZWdhdGlvbiBvZiB0aGUgTW90aGVyIENvLVJlZGVtcHRyaXg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDUlNQXCI6YSs9XCJjb21tdW5pdHkgKENSU1ApOiBLb25ncmVnYXRpb24gZGVyIFJlZ3VsYXJrbGVyaWtlciB2b20gaGwuIFBhdWx1cyAoQmFybmFiaXRlbik8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDU0pcIjphKz1cImNvbW11bml0eSAoQ1NKKTogQ2FybWVsIFNhaW50LUpvc2VwaDxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJDU1NQXCI6YSs9XCJjb21tdW5pdHkgKENTU1ApOiBDb25nclxcdTAwZTlnYXRpb24gZHUgU2FpbnQtRXNwcml0PGJyLz5cIjticmVhaztjYXNlIFwiQ1NTUlwiOmErPVwiY29tbXVuaXR5IChDU1NSKTogQ29uZ3JcXHUwMGU5Z2F0aW9uIGR1IFRyXFx1MDBlOHMgU2FpbnQgUlxcdTAwZTlkZW1wdGV1cjxici8+XCI7YnJlYWs7Y2FzZSBcIkZDSk1cIjphKz1cImNvbW11bml0eSAoRkNKTSk6IEZyYW5jaXNjYW4gU2lzdGVycywgRGF1Z2h0ZXJzIG9mIHRoZSBTYWNyZWQgSGVhcnQgb2YgSmVzdXMgYW5kIE1hcnk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJGTUdCXCI6YSs9XCJjb21tdW5pdHkgKEZNR0IpOiBTdW9yZSBGcmFuY2VzY2FuZSBNaXNzaW9uYXJpZSBkaSBHZXNcXHUwMGY5IEJhbWJpbm88YnIvPlwiO2JyZWFrO2Nhc2UgXCJGTUhcIjphKz1cImNvbW11bml0eShGTUgpOiBDb25ncmVnYXRpbyBGaWxpYXJ1bSBNYXJpYWUgU2FuY3Rpc3NpbWFlIGFiIEhvcnRvPGJyLz5cIjticmVhaztjYXNlIFwiRk1NXCI6YSs9XG4gICAgICAgIFwiY29tbXVuaXR5IChGTU0pOiBGcmFuY2lzY2FpbmVzIG1pc3Npb25uYWlyZXMgZGUgTWFyaWU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJGU0NcIjphKz1cImNvbW11bml0eSAoRlNDKTogRnJcXHUwMGU4cmVzIGRlcyBcXHUwMGM5Y29sZXMgY2hyXFx1MDBlOXRpZW5uZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJNQ0NJXCI6YSs9XCJjb21tdW5pdHkgKE1DQ0kpOiBNaXNzaW9ubmFpcmVzIGNvbWJvbmllbnMgZHUgU2FjclxcdTAwZTktQ1xcdTAxNTN1cjxici8+XCI7YnJlYWs7Y2FzZSBcIk1TRlNcIjphKz1cImNvbW11bml0eSAoTVNGUyk6IE1pc3Npb25uYWlyZXMgZGUgU2FpbnQgRnJhblxcdTAwZTdvaXMgZGUgU2FsZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPQ2FydFwiOmErPVwiY29tbXVuaXR5IChPQ2FydCk6IE9yZGVyIG9mIHRoZSBDYXJ0aHVzaWFuczxici8+XCI7YnJlYWs7Y2FzZSBcIk9DQ1wiOmErPVwiY29tbXVuaXR5IChPQ0MpOiBPcmRyZSBkZSBOb3RyZSBEYW1lIGR1IE1vbnQtQ2FybWVsPGJyLz5cIjticmVhaztjYXNlIFwiT0NEXCI6YSs9XG4gICAgICAgIFwiY29tbXVuaXR5IChPQ0QpOiBPcmRyZSBkZXMgQ2FybWVzIGRcXHUwMGU5Y2hhdXg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPQ1NPXCI6YSs9XCJjb21tdW5pdHkgKE9DU08pOiBUcmFwcGlzdHMgKGxhdC4gT3JkbyBDaXN0ZXJjaWVuc2lzIFN0cmljdGlvcmlzIE9ic2VydmFudGlhZSk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPRk1cIjphKz1cImNvbW11bml0eSAoT0ZNKTogT3JkcmUgZGVzIEZyXFx1MDBlOHJlcyBNaW5ldXJzIChGcmFuemlza2FuZXIpPGJyLz5cIjticmVhaztjYXNlIFwiT0ZNQ2FwXCI6YSs9XCJjb21tdW5pdHkgKE9GTUNhcCk6IE9yZHJlIGRlcyBGclxcdTAwZThyZXMgTWluZXVycyBDYXB1Y2luczxici8+XCI7YnJlYWs7Y2FzZSBcIk9GTUNvbnZcIjphKz1cImNvbW11bml0eSAoT0ZNQ29udik6IE9yZHJlIGRlcyBGclxcdTAwZThyZXMgTWluZXVycyBDb252ZW50dWVsczxici8+XCI7YnJlYWs7Y2FzZSBcIk9GU1wiOmErPVwiY29tbXVuaXR5IChPRlMpOiBGcmFuY2lzY2FucyBzZWN1bGFyIFRoaXJkIE9yZGVyPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcIk9NSVwiOmErPVwiY29tbXVuaXR5IChPTUkpOiBPYmxhdHMgZGUgTWFyaWU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPUFwiOmErPVwiY29tbXVuaXR5IChPUCk6IE9yZHJlIGRlcyBGclxcdTAwZThyZXMgUHJcXHUwMGVhY2hldXJzPGJyLz5cIjticmVhaztjYXNlIFwiT1ByYWVtXCI6YSs9XCJjb21tdW5pdHkgKE9QcmFlbSk6IE9yZHJlIGRlcyBjaGFub2luZXMgclxcdTAwZTlndWxpZXJzIGRlIFByXFx1MDBlOW1vbnRyXFx1MDBlOTxici8+XCI7YnJlYWs7Y2FzZSBcIk9TQlwiOmErPVwiY29tbXVuaXR5IChPU0IpOiBPcmRlciBvZiBTYWludCBCZW5lZGljdDxici8+XCI7YnJlYWs7Y2FzZSBcIk9TQ1wiOmErPVwiY29tbXVuaXR5IChPU0MpOiBPcmRyZSBkZSBTYWludGUtQ2xhaXJlIG91IE9yZHJlIGRlcyBQYXV2cmVzIERhbWVzPGJyLz5cIjticmVhaztjYXNlIFwiT1NTU1wiOmErPVwiY29tbXVuaXR5IChPU1NTKTogT3JkcmUgZGUgU2FpbnRlLUJyaWdpdHRlPGJyLz5cIjticmVhaztjYXNlIFwiT1ZNXCI6YSs9XCJjb21tdW5pdHkgKE9WTSk6IE9yZGVyIG9mIHRoZSBWaXNpdGF0aW9uIG9mIEhvbHkgTWFyeSAoU2FsZXNpYW5lcmlubmVuKTxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJQU0RQXCI6YSs9XCJjb21tdW5pdHkgKFBTRFApOiBQZXRpdGVzIHNcXHUwMTUzdXJzIGRlcyBwYXV2cmVzIChLbGVpbmVuIFNjaHdlc3Rlcm4gZGVyIEFybWVuKTxici8+XCI7YnJlYWs7Y2FzZSBcIlBGSlwiOmErPVwiY29tbXVuaXR5IChQRkopOiBQZXRpdHMgRnJcXHUwMGU4cmVzIGRlIEpcXHUwMGU5c3VzPGJyLz5cIjticmVhaztjYXNlIFwiU0RCXCI6YSs9XCJjb21tdW5pdHkgKFNEQik6IFNvY2lcXHUwMGU5dFxcdTAwZTkgZGUgU2FpbnQgRnJhblxcdTAwZTdvaXMgZGUgU2FsZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTSlwiOmErPVwiY29tbXVuaXR5IChTSik6IENvbXBhZ25pZSBkZSBKXFx1MDBlOXN1czxici8+XCI7YnJlYWs7Y2FzZSBcIlNPQ1wiOmErPVwiY29tbXVuaXR5IChTT0MpOiBPcmRlciBvZiBDaXN0ZXJjaWFuczxici8+XCI7YnJlYWs7Y2FzZSBcIlNTQ0NcIjphKz1cImNvbW11bml0eSAoU1NDQyk6IENvbmdyZWdhdGlvbiBvZiB0aGUgU2FjcmVkIEhlYXJ0cyBvZiBKZXN1cyBhbmQgTWFyeTxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJTU0ZcIjphKz1cImNvbW11bml0eSAoU1NGKTogU29jaWV0eSBvZiBTdCBGcmFuY2lzPGJyLz5cIjticmVhaztjYXNlIFwiU1NKRVwiOmErPVwiY29tbXVuaXR5IChTU0pFKTogU29jaWV0eSBvZiBTdCBKb2huIHRoZSBFdmFuZ2VsaXN0PGJyLz5cIjticmVhaztjYXNlIFwiU1NwU1wiOmErPVwiY29tbXVuaXR5IChTU3BTKTogU3RleWxlciBNaXNzaW9uc3NjaHdlc3Rlcm48YnIvPlwiO2JyZWFrO2Nhc2UgXCJUT1JcIjphKz1cImNvbW11bml0eSAoVE9SKTogVGVyem8gT3JkaW5lIFJlZ29sYXJlIGRpIFNhbiBGcmFuY2VzY288YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmtub3duPGJyLz5cIn1yZXR1cm4gYX12YXIgZm5UZXN0SW5mb1BvcHVwPWZ1bmN0aW9uKGIpe2I9Yi5nZXRQcm9wZXJ0aWVzKCk7dmFyIGE9XCJcIixjO2ZvcihjIGluIGIpYT1hK2MrXCI9XCIrYltjXStcIjxici8+XCI7cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfdGV4dFwiIHN0eWxlPVwid2lkdGg6MzAwcHg7XCI+JythK1wiPC9kaXY+XCJ9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1wb3B1cC1pbmZvLWVuLmpzIiwiLy8gJ25hbWVzcGFjZSdcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcblxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7QzRnQmFzZWxheWVyQ29udHJvbGxlcn0gZnJvbSBcIi4vYzRnLWJhc2VsYXllci1jb250cm9sbGVyXCI7XG5pbXBvcnQge0M0Z0xheWVyQ29udHJvbGxlcn0gZnJvbSBcIi4vYzRnLWxheWVyLWNvbnRyb2xsZXJcIjtcbmltcG9ydCB7QzRnTG9jYXRpb25TdHlsZUNvbnRyb2xsZXJ9IGZyb20gXCIuL2M0Zy1sb2NhdGlvbnN0eWxlLWNvbnRyb2xsZXJcIjtcbmltcG9ydCB7U3Bpbm5lcn0gZnJvbSBcIi4vYzRnLW1hcHMtbWlzYy1zcGlubmVyXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcblxubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9IGVsc2UgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJlblwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNFbmdsaXNoO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrXG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH1cbn1cblxudmFyIGM0ZyA9IHRoaXMuYzRnO1xuZXhwb3J0IGNsYXNzIE1hcFByb3h5IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgdmFyIG1hcERhdGE7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHtcbiAgICAgIG1hcENvbnRyb2xsZXI6IGZhbHNlXG4gICAgfSwgb3B0aW9ucyk7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGM0Zy5tYXBzLmVkaXRvclN0eWxlcyA9IGM0Zy5tYXBzLmVkaXRvclN0eWxlcyB8fCB7fTtcblxuICAgIC8vd2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAgPSBbXTtcblxuICAgIHRoaXMuaG9va19iYXNlbGF5ZXJfbG9hZGVkID0gW107XG4gICAgdGhpcy5ob29rX2Jhc2VsYXllcl92aXNpYmlsaXR5ID0gW107XG4gICAgdGhpcy5ob29rX2xheWVyX2xvYWRlZCA9IFtdO1xuICAgIHRoaXMuaG9va19sYXllcl92aXNpYmlsaXR5ID0gW107XG4gICAgdGhpcy5ob29rX21hcF9jbGljayA9IFtdO1xuICAgIHRoaXMuaG9va19tYXBfem9vbSA9IFtdO1xuXG4gICAgLy8gYWRkIGdsb2JhbCBob29rIGZvciBhY2Nlc3NpYmlsaXR5IHdoZW4gdGhlcmUgaXMgbm8gcHJveHkgcmVmZXJlbmNlXG4gICAgd2luZG93LmM0Z01hcHNIb29rcyA9IHdpbmRvdy5jNGdNYXBzSG9va3MgfHwge307XG4gICAgd2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9sYXllcl9sb2FkZWQgPSB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2xheWVyX2xvYWRlZCB8fCBbXTtcblxuICAgIHRoaXMuYmFzZWxheWVySWRzID0gW107XG4gICAgdGhpcy5hY3RpdmVCYXNlbGF5ZXJJZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxheWVySWRzID0gW107XG4gICAgdGhpcy5hY3RpdmVMYXllcklkcyA9IHt9O1xuXG4gICAgdGhpcy5yZXF1ZXN0RnVuY3Rpb25zID0ge307XG4gICAgdGhpcy5yZXF1ZXN0ID0ge307XG5cbiAgICB0aGlzLmJhc2VsYXllcnNfbG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy5sYXllcnNfbG9hZGVkID0gZmFsc2U7XG5cbiAgICBtYXBEYXRhID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YTtcblxuICAgIHRoaXMubWFwSWQgPSBtYXBEYXRhLmlkO1xuXG4gICAgdGhpcy5hcGlfYmFzZWxheWVyX3VybCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmJhc2VsYXllciArICcvJyArIG1hcERhdGEucHJvZmlsZTtcbiAgICB0aGlzLmFwaV9sYXllcl91cmwgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmFwaS5sYXllciArICcvJyArIHRoaXMubWFwSWQ7XG4gICAgdGhpcy5hcGlfbGF5ZXJjb250ZW50X3VybCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmxheWVyY29udGVudDtcbiAgICAvL3RoaXMuYXBpX2xheWVyY29udGVudGRhdGFfdXJsID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkubGF5ZXJjb250ZW50ZGF0YTtcbiAgICB0aGlzLmFwaV9sYXllcmNvbnRlbnRkYXRhX3VybCA9IFwiY29uNGdpcy9sYXllckNvbnRlbnREYXRhU2VydmljZVwiO1xuICAgIHRoaXMuYXBpX2xvY3N0eWxlX3VybCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmxvY3N0eWxlO1xuICAgIHRoaXMuYXBpX2luZm93aW5kb3dfdXJsID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkuaW5mb3dpbmRvdztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG5cblxuICAgIC8vIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB2YXIgc2VsZixcbiAgICAgIG1hcDtcblxuICAgIHNlbGYgPSB0aGlzO1xuICAgIG1hcCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcDtcblxuICAgIHRoaXMuYmFzZWxheWVyQ29udHJvbGxlciA9IG5ldyBDNGdCYXNlbGF5ZXJDb250cm9sbGVyKHRoaXMpO1xuICAgIHRoaXMuYmFzZWxheWVyQ29udHJvbGxlci5sb2FkQmFzZUxheWVycygpO1xuICAgIHRoaXMubGF5ZXJDb250cm9sbGVyID0gbmV3IEM0Z0xheWVyQ29udHJvbGxlcih0aGlzKTtcbiAgICB0aGlzLmxheWVyQ29udHJvbGxlci5sb2FkTGF5ZXJzKCk7XG4gICAgdGhpcy5sb2NhdGlvblN0eWxlQ29udHJvbGxlciA9IG5ldyBDNGdMb2NhdGlvblN0eWxlQ29udHJvbGxlcih0aGlzKTtcbiAgICB0aGlzLmFkZFBvcFVwKCk7XG5cbiAgICAvL1RPRE8gY2hlY2sgdGhpcywgbmVhcmx5IHRoZSBzYW1lIGFzIGJlbG93XG4gICAgbWFwLm9uKCdjaGFuZ2U6dmlldycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHpvb20tb2JzZXJ2ZXJcbiAgICAgIC8vXG4gICAgICBtYXAuZ2V0VmlldygpLm9uKCdjaGFuZ2U6cmVzb2x1dGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxheWVySWQsXG4gICAgICAgICAgbGF5ZXI7XG5cbiAgICAgICAgLy8gY2hlY2sgbGF5ZXIgem9vbS1ib3VuZHNcbiAgICAgICAgLy8gQFRPRE86IFVzZSBcInNlbGYuYWN0aXZlTGF5ZXJJZHMgPSBmYWxzZVwiID9cbiAgICAgICAgZm9yIChsYXllcklkIGluIHNlbGYuYWN0aXZlTGF5ZXJJZHMpIHtcbiAgICAgICAgICBpZiAoc2VsZi5hY3RpdmVMYXllcklkcy5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICAgICAgbGF5ZXIgPSBzZWxmLmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbbGF5ZXJJZF07XG4gICAgICAgICAgICBpZiAoc2VsZi5jaGVja0xheWVySXNBY3RpdmVGb3Jab29tKGxheWVySWQpKSB7XG4gICAgICAgICAgICAgIGlmIChsYXllci5pc0luYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5sYXllckNvbnRyb2xsZXIuc2hvd0xheWVyKGxheWVySWQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZWxmLmxheWVyQ29udHJvbGxlci5oaWRlTGF5ZXIobGF5ZXJJZCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaG9va3NcbiAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoc2VsZi5ob29rX21hcF96b29tKTtcblxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jYWNoaW5nICYmIG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpKSB7XG4gICAgICAgICAgICB1dGlscy5zdG9yZVZhbHVlKCd6b29tJywgbWFwLmdldFZpZXcoKS5nZXRab29tKCkpO1xuICAgICAgICB9XG5cblxuICAgICAgfSk7IC8vIGVuZCBvZiBcInpvb20tb2JzZXJ2ZXJcIlxuICAgIH0pOyAvLyBlbmQgb2YgXCJ6b29tLW9ic2VydmVyXCJcblxuICAgIC8vIHpvb20tb2JzZXJ2ZXJcbiAgICAvL1xuICAgIG1hcC5nZXRWaWV3KCkub24oJ2NoYW5nZTpyZXNvbHV0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGxheWVySWQsXG4gICAgICAgIGxheWVyO1xuXG5cbiAgICAgIC8vIGNoZWNrIGxheWVyIHpvb20tYm91bmRzXG4gICAgICAvLyBAVE9ETzogVXNlIFwic2VsZi5hY3RpdmVMYXllcklkcyA9IGZhbHNlXCIgP1xuICAgICAgZm9yIChsYXllcklkIGluIHNlbGYuYWN0aXZlTGF5ZXJJZHMpIHtcbiAgICAgICAgaWYgKHNlbGYuYWN0aXZlTGF5ZXJJZHMuaGFzT3duUHJvcGVydHkobGF5ZXJJZCkpIHtcbiAgICAgICAgICBsYXllciA9IHNlbGYubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1tsYXllcklkXTtcbiAgICAgICAgICBpZiAoc2VsZi5jaGVja0xheWVySXNBY3RpdmVGb3Jab29tKGxheWVySWQpKSB7XG4gICAgICAgICAgICBpZiAobGF5ZXIuaXNJbmFjdGl2ZSkge1xuICAgICAgICAgICAgICBzZWxmLmxheWVyQ29udHJvbGxlci5zaG93TGF5ZXIobGF5ZXJJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYubGF5ZXJDb250cm9sbGVyLmhpZGVMYXllcihsYXllcklkLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gaG9va3NcbiAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MuaG9va19tYXBfem9vbSxzZWxmKTtcblxuICAgICAgaWYgKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuY2FjaGluZyAmJiBtYXAuZ2V0VmlldygpLmdldFpvb20oKSkge1xuICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUoJ3pvb20nLCBtYXAuZ2V0VmlldygpLmdldFpvb20oKSk7XG4gICAgICB9XG5cbiAgICB9KTsgLy8gZW5kIG9mIFwiem9vbS1vYnNlcnZlclwiXG5cbiAgICBtYXAuZ2V0VmlldygpLm9uKCdjaGFuZ2U6Y2VudGVyJywgZnVuY3Rpb24oZXZ0KXtcbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuY2FjaGluZykge1xuICAgICAgICAgICAgdmFyIGNvb3JkaW5hdGUgPSBvbC5wcm9qLnRvTG9uTGF0KG1hcC5nZXRWaWV3KCkuZ2V0Q2VudGVyKCkpO1xuICAgICAgICAgICAgaWYgKGNvb3JkaW5hdGUpIHtcbiAgICAgICAgICAgICAgICB1dGlscy5zdG9yZVZhbHVlKCdsb24nLCBjb29yZGluYXRlWzBdKTtcbiAgICAgICAgICAgICAgICB1dGlscy5zdG9yZVZhbHVlKCdsYXQnLCBjb29yZGluYXRlWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cuYzRnTWFwc0hvb2tzLm1hcF9jZW50ZXJfY2hhbmdlZCA9IHdpbmRvdy5jNGdNYXBzSG9va3MubWFwX2NlbnRlcl9jaGFuZ2VkIHx8IFtdO1xuICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLm1hcF9jZW50ZXJfY2hhbmdlZCwgbWFwLmdldFZpZXcoKS5nZXRDZW50ZXIoKSk7XG4gICAgfSk7IC8vIGVuZCBvZiBcImNlbnRlci1vYnNlcnZlclwiXG5cbiAgICAvLyBjbGljay1vYnNlcnZlclxuICAgIC8vXG4gICAgbWFwLm9uKCdjbGljaycsIGZ1bmN0aW9uIChjbGlja0V2ZW50KSB7XG5cbiAgICAgIHZhciBmZWF0dXJlLFxuICAgICAgICBmRmVhdHVyZXMsXG4gICAgICAgIGxheWVyLFxuICAgICAgICBwb3B1cEluZm9zLFxuICAgICAgICBjdXJyZW50Wm9vbSxcbiAgICAgICAgbWluWm9vbSxcbiAgICAgICAgbmV3Q2VudGVyLFxuICAgICAgICBnZW9tZXRyeSxcbiAgICAgICAgY29vcmQsXG4gICAgICAgIHNldFBvcHVwLFxuICAgICAgICBzdHlsZUZ1bmMsXG4gICAgICAgIHN0eWxlQ2x1c3RlcixcbiAgICAgICAgb2JqUG9wdXA7XG5cbiAgICAgIC8vVG9EbyBjaGVjayBuZXcgZnVuY3Rpb24gY2FsbCB3aXRoIG9sIDQuM1xuICAgICAgZmVhdHVyZSA9IG1hcC5mb3JFYWNoRmVhdHVyZUF0UGl4ZWwoY2xpY2tFdmVudC5waXhlbCxcbiAgICAgICAgZnVuY3Rpb24gKGZlYXR1cmUsIGxheWVyKSB7XG4gICAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgICAgIH0pO1xuXG4gICAgICBsYXllciA9IG1hcC5mb3JFYWNoRmVhdHVyZUF0UGl4ZWwoY2xpY2tFdmVudC5waXhlbCxcbiAgICAgICAgZnVuY3Rpb24gKGZlYXR1cmUsIGxheWVyKSB7XG4gICAgICAgICAgcmV0dXJuIGxheWVyO1xuICAgICAgICB9KTtcblxuICAgICAgaWYobGF5ZXIgJiYgbGF5ZXIuZ2V0U3R5bGUoKSkge1xuICAgICAgICBzdHlsZUZ1bmMgPSBsYXllci5nZXRTdHlsZSgpO1xuICAgICAgICBpZih0eXBlb2Ygc3R5bGVGdW5jID09PSBcImZ1bmN0aW9uXCIgJiYgc3R5bGVGdW5jKGZlYXR1cmUsIGN1cnJlbnRab29tKSAmJiBzdHlsZUZ1bmMoZmVhdHVyZSwgY3VycmVudFpvb20pWycwJ10pe1xuICAgICAgICAgIHN0eWxlQ2x1c3RlciA9IHN0eWxlRnVuYyhmZWF0dXJlLCBjdXJyZW50Wm9vbSlbJzAnXS5jbG9uZSgpO1xuICAgICAgICAgIGlmIChzdHlsZUNsdXN0ZXIgJiYgc3R5bGVDbHVzdGVyLmdldEltYWdlKCkpIHtcbiAgICAgICAgICAgICAgc3R5bGVDbHVzdGVyLmdldEltYWdlKCkuc2V0U2NhbGUoc3R5bGVDbHVzdGVyLmdldEltYWdlKCkuZ2V0U2NhbGUoKSowLjcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmRmVhdHVyZXMgPSBmZWF0dXJlID8gZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykgOiBmYWxzZTtcbiAgICAgIGlmICghKGZGZWF0dXJlcyAmJiBmRmVhdHVyZXMubGVuZ3RoID09PSAxKSkge1xuICAgICAgICAvLyBjbHVzdGVyIG11bHRpcGxlIFBPSVxuICAgICAgICBpZiAoZkZlYXR1cmVzKSB7XG4gICAgICAgICAgaWYoZkZlYXR1cmVzWzBdLmdldCgnY2x1c3Rlcl9wb3B1cCcpID09IDEpXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWFwLmdldFZpZXcoKS5zZXRDZW50ZXIoY2xpY2tFdmVudC5jb29yZGluYXRlKTtcbiAgICAgICAgICAgIGN1cnJlbnRab29tID0gbWFwLmdldFZpZXcoKS5nZXRab29tKCk7XG4gICAgICAgICAgICBtaW5ab29tID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jbHVzdGVyX2FsbCA/IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuY2x1c3Rlcl96b29tIDogZkZlYXR1cmVzWycwJ10uZ2V0KCdjbHVzdGVyX3pvb20nKTtcbiAgICAgICAgICAgIGlmKGN1cnJlbnRab29tID49IG1pblpvb20pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNldFBvcHVwID1bXTtcbiAgICAgICAgICAgICAgc2V0UG9wdXAuY29udGVudCA9ICcnO1xuICAgICAgICAgICAgICBzZXRQb3B1cC5hc3luYyA9IGZhbHNlO1xuICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZkZlYXR1cmVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBzZXRQb3B1cC5jb250ZW50ID0gc2V0UG9wdXAuY29udGVudC5jb25jYXQoZkZlYXR1cmVzW2ldLmdldCgncG9wdXAnKS5jb250ZW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmZWF0dXJlID0gZkZlYXR1cmVzWzBdLmNsb25lKCk7XG4gICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdwb3B1cCcsc2V0UG9wdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldFpvb20oY3VycmVudFpvb20rMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG5cblxuICAgICAgICAgICAgZmVhdHVyZS5zZXRTdHlsZShuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHJhZGl1czogMFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgZmVhdHVyZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBhbmltYXRpb25cbiAgICAgICAgICAgIG1hcC5nZXRWaWV3KCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgIHN0YXJ0OiArbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgZHVyYXRpb246IDEwMDAsXG4gICAgICAgICAgICAgIHJlc29sdXRpb246IG1hcC5nZXRWaWV3KCkuZ2V0UmVzb2x1dGlvbigpLFxuICAgICAgICAgICAgICBjZW50ZXI6IFswLCAwXVxuICAgICAgICAgICAgICAvL3JvdGF0aW9uOiBNYXRoLlBJXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY3VycmVudFpvb20gPSBtYXAuZ2V0VmlldygpLmdldFpvb20oKTtcbiAgICAgICAgICAgIG5ld0NlbnRlciA9IG1hcC5nZXRDb29yZGluYXRlRnJvbVBpeGVsKGNsaWNrRXZlbnQucGl4ZWwpO1xuICAgICAgICAgICAgbWluWm9vbSA9IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuY2x1c3Rlcl9hbGwgPyBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmNsdXN0ZXJfem9vbSA6IGZGZWF0dXJlc1snMCddLmdldCgnY2x1c3Rlcl96b29tJyk7XG5cbiAgICAgICAgICAgIC8vVG9EbyByZW1vdmUgd2l0aCBzdHJ1Y3R1cmUgZWxlbWVudCBwYXJhbVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRab29tID49IG1pblpvb20pIHtcblxuICAgICAgICAgICAgICAvL2lmIChjdXJyZW50Wm9vbSA+PSBtYXAuZ2V0VmlldygpLmdldE1heFpvb20oKSkge1xuICAgICAgICAgICAgICAvL29wZW4gdGhlIGNsdXN0ZXIgYWZ0ZXIgem9vbWluZ1xuICAgICAgICAgICAgICB2YXIgcGl4ID0gbWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uKCk7XG4gICAgICAgICAgICAgIHZhciBtYXggPSBmRmVhdHVyZXMubGVuZ3RoO1xuICAgICAgICAgICAgICB2YXIgciA9IHBpeCAqIDEyICogKDAuNSArIG1heCAvIDQpO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSAyICogTWF0aC5QSSAqIGkgLyBtYXg7XG4gICAgICAgICAgICAgICAgaWYgKG1heCA9PSAyIHx8IG1heCA9PSA0KSBhICs9IE1hdGguUEkgLyA0O1xuICAgICAgICAgICAgICAgIHZhciBwID0gW25ld0NlbnRlclswXSArIHIgKiBNYXRoLnNpbihhKSwgbmV3Q2VudGVyWzFdICsgciAqIE1hdGguY29zKGEpXTtcbiAgICAgICAgICAgICAgICB2YXIgY29vcmRpbmF0ZSA9IG9sLnByb2oudG9Mb25MYXQocCk7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBbXTtcbiAgICAgICAgICAgICAgICBmLnB1c2goZkZlYXR1cmVzW2ldKTtcbiAgICAgICAgICAgICAgICB2YXIgY2YgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgICBnZW9tZXRyeTogbmV3IG9sLmdlb20uUG9pbnQocCksXG4gICAgICAgICAgICAgICAgICBmZWF0dXJlczogZixcbiAgICAgICAgICAgICAgICAgIHN0eWxlOiBmRmVhdHVyZXNbaV0uZ2V0KCdzdHlsZScpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZShjZik7XG4gICAgICAgICAgICAgICAgbWFwLmdldFZpZXcoKS5zZXRDZW50ZXIobmV3Q2VudGVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3VycmVudFpvb20gKz0gMTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihuZXdDZW50ZXIpO1xuICAgICAgICAgICAgbWFwLmdldFZpZXcoKS5zZXRab29tKGN1cnJlbnRab29tKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKGZGZWF0dXJlcyAmJiBmRmVhdHVyZXMubGVuZ3RoID09PSAxKSkge1xuICAgICAgICBmZWF0dXJlID0gZkZlYXR1cmVzWzBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuY29udHJvbHMuZWRpdG9yICYmIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLmVkaXRvci5pc09wZW4oKSkge1xuICAgICAgICAvLyBkbyBub3Qgc2hvdyBwb3B1cCB3aGVuIGVkaXRvciBpcyBvcGVuXG4gICAgICAgIGlmIChmZWF0dXJlICYmIGZlYXR1cmUuZ2V0KCdwcm9qZWN0SWQnKSkge1xuICAgICAgICAgICAgLy8gYnV0IGNhbGwgY2xpY2sgaG9va3NcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhzZWxmLmhvb2tfbWFwX2NsaWNrLCBjbGlja0V2ZW50KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcG9wdXBJbmZvcyA9IHt9O1xuICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ3BvcHVwJykpIHtcbiAgICAgICAgLy8gc2luZ2xlIFBPSVxuICAgICAgICBwb3B1cEluZm9zID0gZmVhdHVyZS5nZXQoJ3BvcHVwJyk7XG4gICAgICB9IGVsc2UgaWYgKGxheWVyICYmIGxheWVyLnBvcHVwKSB7XG4gICAgICAgIHBvcHVwSW5mb3MgPSBsYXllci5wb3B1cDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZlYXR1cmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmZWF0dXJlICYmIGZlYXR1cmUuZ2V0KCdsb2NfbGlua3VybCcpKSB7XG4gICAgICAgIGlmKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEubGlua19uZXd3aW5kb3c9PT0nMScpIHtcbiAgICAgICAgICB3aW5kb3cub3BlbihmZWF0dXJlLmdldCgnbG9jX2xpbmt1cmwnKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICB3aW5kb3cub3BlbihmZWF0dXJlLmdldCgnbG9jX2xpbmt1cmwnKSxcIl9zZWxmXCIpO1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZihmZWF0dXJlICYmIGZlYXR1cmUuZ2V0KCd6b29tX29uY2xpY2snKSAmJiBmZWF0dXJlLmdldCgnem9vbV9vbmNsaWNrJykgIT0gMCl7XG4gICAgICAgICAgbWFwLmdldFZpZXcoKS5zZXRab29tKGZlYXR1cmUuZ2V0KCd6b29tX29uY2xpY2snKSk7XG4gICAgICAgICAgbWFwLmdldFZpZXcoKS5zZXRDZW50ZXIoZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYobGF5ZXIgJiYgbGF5ZXIuem9vbV9vbmNsaWNrICYmIGxheWVyLnpvb21fb25jbGljayAhPSAwKXtcbiAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldFpvb20obGF5ZXIuem9vbV9vbmNsaWNrKTtcbiAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihjbGlja0V2ZW50LmNvb3JkaW5hdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZlYXR1cmUpIHtcbiAgICAgICAgICBnZW9tZXRyeSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcbiAgICAgICAgICBpZiAoZ2VvbWV0cnkgaW5zdGFuY2VvZiBvbC5nZW9tLlBvaW50KSB7XG4gICAgICAgICAgICBjb29yZCA9IGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvb3JkID0gY2xpY2tFdmVudC5jb29yZGluYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjNGcubWFwcy5wb3B1cC5wb3B1cC5zZXRQb3NpdGlvbihjb29yZCk7XG5cbiAgICAgICAgICBpZiAocG9wdXBJbmZvcy5jb250ZW50KSB7XG4gICAgICAgICAgICBjNGcubWFwcy5wb3B1cC4kY29udGVudC5odG1sKCcnKTtcbiAgICAgICAgICAgIGM0Zy5tYXBzLnBvcHVwLiRwb3B1cC5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuTE9BRElORyk7XG4gICAgICAgICAgICBjNGcubWFwcy5wb3B1cC5zcGlubmVyLnNob3coKTtcblxuICAgICAgICAgICAgaWYgKHBvcHVwSW5mb3MuYXN5bmMgPT09IGZhbHNlIHx8IHBvcHVwSW5mb3MuYXN5bmMgPT0gJzAnKSB7XG4gICAgICAgICAgICAgIG9ialBvcHVwID0ge307XG4gICAgICAgICAgICAgIG9ialBvcHVwLnBvcHVwID0gcG9wdXBJbmZvcztcbiAgICAgICAgICAgICAgb2JqUG9wdXAuZmVhdHVyZSA9IGZlYXR1cmU7XG4gICAgICAgICAgICAgIG9ialBvcHVwLmxheWVyID0gbGF5ZXI7XG4gICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwLCBvYmpQb3B1cCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2VsZi5zZXRQb3B1cChvYmpQb3B1cCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICAgIHVybDogc2VsZi5hcGlfaW5mb3dpbmRvd191cmwgKyAnLycgKyBwb3B1cEluZm9zLmNvbnRlbnRcbiAgICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvcHVwSW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgIGFzeW5jOiBwb3B1cEluZm9zLmFzeW5jLFxuICAgICAgICAgICAgICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgcG9wdXA6IHBvcHVwSW5mb3MucG9wdXAsXG4gICAgICAgICAgICAgICAgICByb3V0aW5nX2xpbms6IHBvcHVwSW5mb3Mucm91dGluZ19saW5rXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIG9ialBvcHVwID0ge307XG4gICAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm87XG4gICAgICAgICAgICAgICAgb2JqUG9wdXAuZmVhdHVyZSA9IGZlYXR1cmU7XG4gICAgICAgICAgICAgICAgb2JqUG9wdXAubGF5ZXIgPSBsYXllcjtcblxuICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCwgb2JqUG9wdXApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNlbGYuc2V0UG9wdXAob2JqUG9wdXApO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGM0Zy5tYXBzLnBvcHVwLiRwb3B1cC5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhvb2tzXG4gICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MuaG9va19tYXBfY2xpY2ssIGNsaWNrRXZlbnQpO1xuICAgICAgfVxuICAgIH0pOyAvLyBlbmQgb2YgXCJjbGljay1vYnNlcnZlclwiXG5cblxuICAgIC8vIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRMYXllcnMoKS5vbignY2hhbmdlOmxlbmd0aCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgLy8gICAgIDtcbiAgICAvLyB9KTtcblxuXG4gIH0gLy8gZW5kIG9mIFwiaW5pdGlhbFwiKlxuICBjb21iaW5lKHByb3h5KXtcbiAgICB2YXIgZnVuYyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBwcm94eS5jb21iaW5lTGF5ZXJzKHByb3h5KTtcbiAgICAgIHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAudW4oJ3Bvc3RyZW5kZXInLGZ1bmMpO1xuICAgIH07XG4gICAgcHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5vbigncG9zdHJlbmRlcicsIGZ1bmMpXG4gIH1cblxuICBzZXRQb3B1cChwb3B1cENvbmZpZykge1xuICAgIHZhciBmZWF0dXJlLFxuICAgICAgbGF5ZXIsXG4gICAgICBwb3B1cENvbnRlbnQsXG4gICAgICByb3V0ZXIsXG4gICAgICByb3V0ZUJ1dHRvbldyYXBwZXIsXG4gICAgICByb3V0ZUZyb21CdXR0b24sXG4gICAgICByb3V0ZUZyb21CdXR0b25TcGFuLFxuICAgICAgcm91dGVUb0J1dHRvbixcbiAgICAgIHJvdXRlVG9CdXR0b25TcGFuLFxuICAgICAgcm91dGluZ0hhbmRsZXIsXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgIGZlYXR1cmUgPSBwb3B1cENvbmZpZy5mZWF0dXJlO1xuICAgIGxheWVyID0gcG9wdXBDb25maWcubGF5ZXI7XG5cbiAgICBwb3B1cENvbnRlbnQgPSB1dGlscy5yZXBsYWNlQWxsUGxhY2Vob2xkZXJzKHBvcHVwQ29uZmlnLnBvcHVwLmNvbnRlbnQsIGZlYXR1cmUsIGxheWVyKTtcbiAgICAvLyBAVE9ETzogY2hlY2sgZm9yIHJvdXRlLW9wdGlvbiAmIGRpc3BsYXkgXCJyb3V0ZS10b1wiXG4gICAgLy8gTk9URTogZG9lcyBub3Qgd29yayBhc3luYyB0aGlzIHdheVxuICAgIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5jb250cm9scy5yb3V0ZXIgJiYgcG9wdXBDb25maWcucG9wdXAucm91dGluZ19saW5rKSB7XG4gICAgICByb3V0ZXIgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5jb250cm9scy5yb3V0ZXI7XG5cbiAgICAgIHJvdXRpbmdIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5hY3RpdmVQb3J0c2lkZSAhPT0gcm91dGVyKSB7XG4gICAgICAgICAgcm91dGVyLm9wZW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJvdXRlci5zZXRJbnB1dChcbiAgICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5QT1BVUF9ST1VURV9GUk9NKSxcbiAgICAgICAgICBmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKVxuICAgICAgICApO1xuICAgICAgfTsgLy8gZW5kIG9mIFwicm91dGluZ0hhbmRsZXIoKVwiXG5cbiAgICAgIHJvdXRlQnV0dG9uV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcm91dGVCdXR0b25XcmFwcGVyLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5QT1BVUF9ST1VURV9XUkFQUEVSO1xuXG4gICAgICByb3V0ZUZyb21CdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIHJvdXRlRnJvbUJ1dHRvbi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuSUNPTiArICcgJyArIGNzc0NvbnN0YW50cy5QT1BVUF9ST1VURV9GUk9NO1xuICAgICAgalF1ZXJ5KHJvdXRlRnJvbUJ1dHRvbikuY2xpY2socm91dGluZ0hhbmRsZXIpO1xuICAgICAgcm91dGVCdXR0b25XcmFwcGVyLmFwcGVuZENoaWxkKHJvdXRlRnJvbUJ1dHRvbik7XG5cbiAgICAgIHJvdXRlRnJvbUJ1dHRvblNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICByb3V0ZUZyb21CdXR0b25TcGFuLmlubmVySFRNTCA9IGxhbmdDb25zdGFudHMuUE9QVVBfUk9VVEVfRlJPTTtcbiAgICAgIHJvdXRlRnJvbUJ1dHRvbi5hcHBlbmRDaGlsZChyb3V0ZUZyb21CdXR0b25TcGFuKTtcblxuICAgICAgcm91dGVUb0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgcm91dGVUb0J1dHRvbi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuSUNPTiArICcgJyArIGNzc0NvbnN0YW50cy5QT1BVUF9ST1VURV9UTztcbiAgICAgIGpRdWVyeShyb3V0ZVRvQnV0dG9uKS5jbGljayhyb3V0aW5nSGFuZGxlcik7XG4gICAgICByb3V0ZUJ1dHRvbldyYXBwZXIuYXBwZW5kQ2hpbGQocm91dGVUb0J1dHRvbik7XG5cbiAgICAgIHJvdXRlVG9CdXR0b25TcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgcm91dGVUb0J1dHRvblNwYW4uaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5QT1BVUF9ST1VURV9UTztcbiAgICAgIHJvdXRlVG9CdXR0b24uYXBwZW5kQ2hpbGQocm91dGVUb0J1dHRvblNwYW4pO1xuICAgIH1cblxuICAgIGlmIChwb3B1cENvbnRlbnQudHJpbSgpIHx8IHJvdXRlcikge1xuICAgICAgYzRnLm1hcHMucG9wdXAuJGNvbnRlbnQuaHRtbChwb3B1cENvbnRlbnQpO1xuICAgICAgaWYgKHJvdXRlcikge1xuICAgICAgICBjNGcubWFwcy5wb3B1cC4kY29udGVudC5hcHBlbmQocm91dGVCdXR0b25XcmFwcGVyKTtcbiAgICAgIH1cbiAgICAgIGlmKGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSAmJiBmZWF0dXJlLmdldEdlb21ldHJ5KCkgaW5zdGFuY2VvZiBvbC5nZW9tLlBvaW50KXtcbiAgICAgICAgYzRnLm1hcHMucG9wdXAucG9wdXAuc2V0UG9zaXRpb24oZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoaWRlIHBvcHVwIGlmIHRoZXJlIGlzIG5vIHZhbGlkIGNvbnRlbnQgbGVmdFxuICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgIH1cblxuICAgIGM0Zy5tYXBzLnBvcHVwLiRwb3B1cC5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuTE9BRElORyk7XG4gICAgYzRnLm1hcHMucG9wdXAuc3Bpbm5lci5oaWRlKCk7XG4gIH0gLy8gZW5kIG9mIFwic2V0UG9wdXAoKVwiXG5cblxuICBhZGRQb3BVcCgpIHtcblxuICAgIGxldCBwb3BVcEVsZW1lbnQsXG4gICAgICBwb3BVcENsb3NlRWxlbWVudCxcbiAgICAgIHBvcFVwQ29udGVudCxcbiAgICAgIHBvcHVwO1xuXG5cbiAgICBwb3BVcEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwb3BVcEVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsICdjNGdfcG9wdXBfJyArIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEubWFwSWQpO1xuICAgIHBvcFVwRWxlbWVudC5jbGFzc05hbWUgPSAnYzRnLXBvcHVwLXdyYXBwZXInO1xuXG4gICAgcG9wVXBDbG9zZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBwb3BVcENsb3NlRWxlbWVudC5jbGFzc05hbWUgPSBcImM0Zy1wb3B1cC1jbG9zZSBjNGctaWNvblwiO1xuXG4gICAgcG9wVXBDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcG9wVXBDb250ZW50LmNsYXNzTmFtZSA9IFwiYzRnLXBvcHVwLWNvbnRlbnRcIjtcblxuICAgIHBvcFVwRWxlbWVudC5hcHBlbmRDaGlsZChwb3BVcENsb3NlRWxlbWVudCk7XG4gICAgcG9wVXBFbGVtZW50LmFwcGVuZENoaWxkKHBvcFVwQ29udGVudCk7XG5cbiAgICBqUXVlcnkocG9wVXBDbG9zZUVsZW1lbnQpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGM0Zy5tYXBzLnBvcHVwLiRwb3B1cC5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICB9KTtcblxuICAgIHBvcHVwID0gbmV3IG9sLk92ZXJsYXkoe1xuICAgICAgZWxlbWVudDogcG9wVXBFbGVtZW50LFxuICAgICAgcG9zaXRpb25pbmc6ICdib3R0b20tbGVmdCcsXG4gICAgICBvZmZzZXQ6IFstNTAsIDBdLFxuICAgICAgICBhdXRvUGFuOiBtYXBEYXRhLnBvcHVwQXV0b1BhbiA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgYXV0b1BhbkFuaW1hdGlvbjoge1xuICAgICAgICAgICAgIGR1cmF0aW9uOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGF1dG9QYW5NYXJnaW46IDEwMFxuICAgIH0pO1xuXG4gICAgYzRnLm1hcHMucG9wdXAgPSB7fTtcbiAgICBjNGcubWFwcy5wb3B1cC5wb3B1cCA9IHBvcHVwO1xuICAgIC8vIGF0dGFjaCBhIHNwaW5uZXIgdG8gdGhlIHBvcHVwXG4gICAgYzRnLm1hcHMucG9wdXAuc3Bpbm5lciA9IG5ldyBTcGlubmVyKHt0YXJnZXQ6IHBvcFVwRWxlbWVudH0pO1xuXG4gICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZE92ZXJsYXkocG9wdXApO1xuXG4gICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwID0galF1ZXJ5KGM0Zy5tYXBzLnBvcHVwLnBvcHVwLmdldEVsZW1lbnQoKSk7XG4gICAgYzRnLm1hcHMucG9wdXAuJGNvbnRlbnQgPSBqUXVlcnkoJy5jNGctcG9wdXAtY29udGVudCcsIGM0Zy5tYXBzLnBvcHVwLiRwb3B1cCk7XG4gICAgdGhpcy5jdXJyZW50UG9wdXAgPSBjNGcubWFwcy5wb3B1cDtcbiAgfSAvLyBlbmQgb2YgXCJhZGRQb3BVcCgpXCJcblxuXG4gIC8qKlxuICAgKiBAVE9ETzogW2NoZWNrTG9jYXRpb25TdHlsZXMgZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEBwYXJhbSAgIHtbdHlwZV19ICBvcHRfb3B0aW9ucyAgW2Rlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNoZWNrTG9jYXRpb25TdHlsZXMob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBvcHRpb25zLFxuICAgICAgbmVlZGVkTGF5ZXJTdHlsZXMsXG4gICAgICBnZXRMYXllclN0eWxlcyxcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKG9wdF9vcHRpb25zICYmIHR5cGVvZiBvcHRfb3B0aW9ucyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgb3B0aW9ucyA9IG9wdF9vcHRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXM9IHRoaXMubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzIHx8IHt9O1xuXG4gICAgbmVlZGVkTGF5ZXJTdHlsZXMgPSBbXTtcbiAgICBnZXRMYXllclN0eWxlcyA9IGZ1bmN0aW9uIChsYXllcnMpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBpbmRleDtcblxuICAgICAgLy8gVG9EbzogUmVrdXJzaW9uIGludGVncmllcmVuICh0ZXN0IG1pdCBmb3J1bSlcbiAgICAgIGZvciAoaW5kZXggaW4gbGF5ZXJzKSB7XG4gICAgICAgIGlmIChsYXllcnMuaGFzT3duUHJvcGVydHkoaW5kZXgpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGxheWVyc1tpbmRleF07XG5cbiAgICAgICAgICBpZiAoZWxlbWVudC5jb250ZW50KSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudC5jb250ZW50Lmxlbmd0aDsgaSArPSAxKSB7XG5cbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY29udGVudFtpXSkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY29udGVudFtpXS5sb2NhdGlvblN0eWxlXG4gICAgICAgICAgICAgICAgICAmJiBlbGVtZW50LmNvbnRlbnRbaV0ubG9jYXRpb25TdHlsZSAhPT0gXCIwXCJcbiAgICAgICAgICAgICAgICAgICYmIG5lZWRlZExheWVyU3R5bGVzLmluZGV4T2YoZWxlbWVudC5jb250ZW50W2ldLmxvY2F0aW9uU3R5bGUpID09PSAtMVxuICAgICAgICAgICAgICAgICAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAhc2VsZi5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZWxlbWVudC5jb250ZW50W2ldLmxvY2F0aW9uU3R5bGVdXG4gICAgICAgICAgICAgICAgICAgIHx8IHNlbGYubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnQuY29udGVudFtpXS5sb2NhdGlvblN0eWxlXS5zdHlsZSA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBuZWVkZWRMYXllclN0eWxlcy5wdXNoKGVsZW1lbnQuY29udGVudFtpXS5sb2NhdGlvblN0eWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZ2V0TGF5ZXJTdHlsZXModGhpcy5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzKTtcblxuICAgIGlmIChuZWVkZWRMYXllclN0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhuZWVkZWRMYXllclN0eWxlcywgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvcHRpb25zLmRvbmUgJiYgdHlwZW9mIG9wdGlvbnMuZG9uZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIG9wdGlvbnMuZG9uZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBlbmQgb2YgXCJjaGVja0xvY2F0aW9uU3R5bGVzKClcIlxuXG4gIGNvbWJpbmVMYXllcnMocHJveHkpe1xuXG4gICAgdmFyIGksXG4gICAgICBqLFxuICAgICAgayxcbiAgICAgIGxheWVySWQsXG4gICAgICBsYXllcnMsXG4gICAgICBjb250ZW50RGF0YUxheWVyLFxuICAgICAgY29udGVudERhdGEsXG4gICAgICBsYXllcixcbiAgICAgIGxheWVyR3JvdXBzID1bXSxcbiAgICAgIHNvdXJjZSxcbiAgICAgIHN0eWxlLFxuICAgICAgZmVhdHVyZXM9W10sXG4gICAgICBzdHlsZXM9W10sXG4gICAgICBvbmVGZWF0dXJlLFxuICAgICAgZmVhdHVyZSxcbiAgICAgIHZlY3RvclNvdXJjZSxcbiAgICAgIGNsdXN0ZXJTb3VyY2UsXG4gICAgICB2ZWN0b3JMYXllcjtcblxuXG4gICAgaWYocHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuY2x1c3Rlcl9hbGwgPT09ICcxJyl7XG4gICAgICBjb250ZW50RGF0YSA9IHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhO1xuICAgICAgZm9yKCBpIGluIHByb3h5LmFjdGl2ZUxheWVySWRzKSB7Ly9sb29wIHRvIGdldCBhbGwgbGF5ZXJzXG4gICAgICAgIGxheWVycyA9IGM0Zy5tYXBzLmxheWVyc1tpXTtcblxuICAgICAgICBpZihsYXllcnMudHlwZSA9PT0gXCJncHhcIil7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGxheWVycyAmJiBsYXllcnMudmVjdG9yTGF5ZXIgKXtcbiAgICAgICAgICBpZihsYXllcnMudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkgJiYgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0gJiYgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0uZ2V0U291cmNlKCkgJiYgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0uZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKS5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlTGF5ZXIobGF5ZXJzLnZlY3RvckxheWVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZW50RGF0YUxheWVyID0gbGF5ZXJzLmNvbnRlbnQ7XG4gICAgICAgICAgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmNvbnRlbnQgPSBjb250ZW50RGF0YUxheWVyO1xuICAgICAgICAgIGxheWVyR3JvdXBzLnB1c2gobGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpKTtcblxuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvcihrID0wOyBrPGxheWVyR3JvdXBzLmxlbmd0aDtrKyspey8vbG9vcCB0byBleHRyYWN0IGZlYXR1cmVzIGZyb20gbGF5ZXJzXG4gICAgICAgIGlmKGxheWVyR3JvdXBzW2tdLmdldEFycmF5KCkubGVuZ3RoPjApe1xuICAgICAgICAgIGxheWVyID0gbGF5ZXJHcm91cHNba10uZ2V0QXJyYXkoKTtcbiAgICAgICAgICBzb3VyY2UgPSBsYXllcltcIjBcIl0uZ2V0U291cmNlKCk7XG4gICAgICAgICAgc3R5bGUgPSBsYXllcltcIjBcIl0uZ2V0U3R5bGUoKTtcblxuICAgICAgICAgIG9uZUZlYXR1cmUgPSB0cnVlO1xuICAgICAgICAgIGZlYXR1cmUgPSBzb3VyY2UuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgICBmb3IoaiA9IDA7IGogPCBmZWF0dXJlLmxlbmd0aDsgaiArKyl7Ly9sb29wIG92ZXIgYWxsIGZlYXR1cmVzIGZyb20gYSBzb3VyY2VcbiAgICAgICAgICAgIGlmKGZlYXR1cmVbal0uZ2V0KFwiZmVhdHVyZXNcIikpe1xuICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBmZWF0dXJlW2pdLmdldChcImZlYXR1cmVzXCIpLmxlbmd0aDsgaSsrKXsvL2xvb3AgZm9yIGNsdXN0ZXJlZCBmZWF0dXJlc1xuICAgICAgICAgICAgICAgIGlmKGxheWVyR3JvdXBzW2tdLmNvbnRlbnRbal0pe1xuICAgICAgICAgICAgICAgICAgc3R5bGUgPSB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsYXllckdyb3Vwc1trXS5jb250ZW50W2pdLmxvY2F0aW9uU3R5bGVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGxheWVyR3JvdXBzW2tdLmNvbnRlbnRbMF0pe1xuICAgICAgICAgICAgICAgICAgc3R5bGUgPSB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsYXllckdyb3Vwc1trXS5jb250ZW50WzBdLmxvY2F0aW9uU3R5bGVdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZlYXR1cmVbal0uZ2V0KFwiZmVhdHVyZXNcIilbaV0uc2V0U3R5bGUoc3R5bGUuc3R5bGUpO1xuICAgICAgICAgICAgICAgIGlmKCFmZWF0dXJlW2pdLmdldChcImZlYXR1cmVzXCIpW2ldLmdldCgncG9wdXAnKSl7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlW2pdLmdldChcImZlYXR1cmVzXCIpW2ldLnNldCgncG9wdXAnLGxheWVyWycwJ10ucG9wdXApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goZmVhdHVyZVtqXS5nZXQoXCJmZWF0dXJlc1wiKSk7XG5cbiAgICAgICAgICAgICAgb25lRmVhdHVyZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKG9uZUZlYXR1cmUpey8vc2luZ2xlIG5vdCBjbHVzdGVyZWQgZmVhdHVyZVxuICAgICAgICAgICAgaWYoZmVhdHVyZS5sZW5ndGggPj0gMSl7XG4gICAgICAgICAgICAgIGlmKCFmZWF0dXJlWycwJ10uZ2V0KCdwb3B1cCcpKXtcbiAgICAgICAgICAgICAgICBmZWF0dXJlWycwJ10uc2V0KCdwb3B1cCcsbGF5ZXIucG9wdXApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICBwcm9qZWN0aW9uOiAnRVBTRzozODU3J1xuXG4gICAgICB9KTtcblxuICAgICAgZm9yKGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpICsrKXtcbiAgICAgICAgdmVjdG9yU291cmNlLmFkZEZlYXR1cmVzKGZlYXR1cmVzW2ldKTtcbiAgICAgIH1cblxuICAgICAgY2x1c3RlclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuQ2x1c3Rlcih7XG4gICAgICAgIGRpc3RhbmNlOiA0MCxcbiAgICAgICAgLy90aHJlc2hvbGQ6IDIsIC8vbWluaW11bSBlbGVtZW50IGNvdW50XG4gICAgICAgIHNvdXJjZTogdmVjdG9yU291cmNlXG4gICAgICB9KTtcbiAgICAgIHZhciBzdHlsZUZvckNsdXN0ZXIgPSBmdW5jdGlvbihmZWF0dXJlLCByZXNvbHV0aW9uKXtcbiAgICAgICAgaWYoZmVhdHVyZSAmJiBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKSAmJiBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKVsnMCddLmdldFN0eWxlKCkpe1xuICAgICAgICAgIHN0eWxlID0gZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbJzAnXS5nZXRTdHlsZSgpKGZlYXR1cmUpO1xuICAgICAgICAgIGlmIChmZWF0dXJlICE9PSB1bmRlZmluZWQgJiYgZmVhdHVyZSAhPT0gbnVsbCAmJiBmZWF0dXJlLnNlbGYgIT09IHdpbmRvdykge1xuICAgICAgICAgICAgdmFyIGZGZWF0dXJlcyA9IGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpO1xuICAgICAgICAgICAgdmFyIHNpemUgPSBmRmVhdHVyZXMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNpemUgPiAxKSB7XG4gICAgICAgICAgICAgIGlmICghc3R5bGUpIHtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IFtdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIGJ1YmJsZS1vZmZzZXRcbiAgICAgICAgICAgICAgdmFyIGljb25PZmZzZXQgPSBbMCwgMF07XG4gICAgICAgICAgICAgIGlmIChzdHlsZVswXSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IHBhcnNlSW50KHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzKCksIDEwKTtcbiAgICAgICAgICAgICAgICAgIGlmIChyYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbk9mZnNldCA9IFswLCByYWRpdXNdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0QW5jaG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSBzdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvcigpIHx8IFswLCAwXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgZmlsbGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KCc0OTc1QTgnLHtcbiAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgdmFsdWU6IDcwXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5jbHVzdGVyX2ZpbGxjb2xvcikge1xuICAgICAgICAgICAgICAgIGZpbGxjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShjb250ZW50RGF0YS5jbHVzdGVyX2ZpbGxjb2xvcix7XG4gICAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogNzBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgZm9udGNvbG9yID0gY29udGVudERhdGEuY2x1c3Rlcl9mb250Y29sb3IgPyAnIycgKyBjb250ZW50RGF0YS5jbHVzdGVyX2ZvbnRjb2xvciA6ICcjRkZGRkZGJztcblxuICAgICAgICAgICAgICBzdHlsZS5wdXNoKFxuICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgb2wuc3R5bGUuVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IFwi4pePXCIsXG4gICAgICAgICAgICAgICAgICAgIGZvbnQ6IFwiNjBweCBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IC0xICogaWNvbk9mZnNldFswXSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEgKiBpY29uT2Zmc2V0WzFdLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZpbGxjb2xvclxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBzdHlsZS5wdXNoKFxuICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgb2wuc3R5bGUuVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHNpemUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogLTEgKiBpY29uT2Zmc2V0WzBdLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtMSAqIGljb25PZmZzZXRbMV0gKyAzLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZvbnRjb2xvclxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICBpZihmZWF0dXJlICYmIGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpICYmIGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWycwJ10uZ2V0U3R5bGUoKSl7XG4gICAgICAgICAgICByZXR1cm4gZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbJzAnXS5nZXRTdHlsZSgpKGZlYXR1cmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH07XG5cbiAgICAgIC8vdmVjdG9yTGF5ZXIgPSBzZWxmLmdldFZlY3RvckxheWVyKGNsdXN0ZXJTb3VyY2UsIHN0eWxlRm9yQ2x1c3Rlcik7XG5cbiAgICAgIHZlY3RvckxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgICAgIG5hbWU6ICdDbHVzdGVyJyxcbiAgICAgICAgc291cmNlOiBjbHVzdGVyU291cmNlLFxuICAgICAgICBzdHlsZTogc3R5bGVGb3JDbHVzdGVyXG5cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgYWxsTGF5ZXJzID0gcHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRMYXllcnMoKS5nZXRBcnJheSgpO1xuICAgICAgdmFyIG1pc3NpbmdMYXllciA9IHRydWU7XG4gICAgICBmb3IoaSA9IDA7IGkgPCBhbGxMYXllcnMubGVuZ3RoOyBpKyspe1xuXG4gICAgICAgIGlmKGFsbExheWVyc1tpXS5jbHVzdGVycykge1xuICAgICAgICAgIGFsbExheWVyc1tpXSA9IHZlY3RvckxheWVyO1xuICAgICAgICAgIG1pc3NpbmdMYXllciA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmKG1pc3NpbmdMYXllcil7XG4gICAgICAgIHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIodmVjdG9yTGF5ZXIpO1xuICAgICAgfVxuICAgIH1cblxuXG5cbiAgfS8vZW5kIG9mIGNvbWJpbmVMYXllcnNcblxuXG4gIGNoZWNrTGF5ZXJJc0FjdGl2ZUZvclpvb20obGF5ZXJJZCwgb3B0X3pvb20pIHtcbiAgICB2YXIgbGF5ZXIsXG4gICAgICB6b29tLFxuICAgICAgbGF5ZXJDb250ZW50LFxuICAgICAgbG9jc3R5bGU7XG5cbiAgICBpZiAoIXRoaXMubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1tsYXllcklkXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxheWVyID0gdGhpcy5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2xheWVySWRdO1xuXG4gICAgaWYgKG9wdF96b29tKSB7XG4gICAgICB6b29tID0gb3B0X3pvb207XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFpvb20oKSA+IC0xKSB7XG4gICAgICB6b29tID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRab29tKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHpvb20gPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGxheWVyLnpvb20gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGxheWVyLmNvbnRlbnQgJiYgbGF5ZXIuY29udGVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGF5ZXIuY29udGVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxheWVyQ29udGVudCA9IGxheWVyLmNvbnRlbnRbaV07XG4gICAgICAgICAgaWYgKGxheWVyQ29udGVudC5sb2NhdGlvblN0eWxlKSB7XG4gICAgICAgICAgICBsb2NzdHlsZSA9IHRoaXMubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2xheWVyQ29udGVudC5sb2NhdGlvblN0eWxlXTtcbiAgICAgICAgICAgIC8vIFRPRE8gY2hlY2sgYWxsIGxvY3N0eWxlcyBhbmQgdGFrZSB0aGUgbW9zdCBjb25zdHJhaW5pbmcgem9vbSB2YWx1ZVxuICAgICAgICAgICAgaWYgKGxvY3N0eWxlKSB7XG4gICAgICAgICAgICAgIGxheWVyLnpvb20gPSB7fTtcbiAgICAgICAgICAgICAgaWYgKGxvY3N0eWxlLm1heHpvb20pIHtcbiAgICAgICAgICAgICAgICBsYXllci56b29tLm1heCA9IGxvY3N0eWxlLm1heHpvb207XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxvY3N0eWxlLm1pbnpvb20pIHtcbiAgICAgICAgICAgICAgICBsYXllci56b29tLm1pbiA9IGxvY3N0eWxlLm1pbnpvb207XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxheWVyLnpvb20ubWF4IHx8IGxheWVyLnpvb20ubWluKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCh0eXBlb2Ygem9vbSA9PT0gXCJudW1iZXJcIikgJiYgbGF5ZXIuem9vbVxuICAgICAgJiYgKGxheWVyLnpvb20ubWluID4gem9vbSB8fCAobGF5ZXIuem9vbS5tYXggPiAwICYmIGxheWVyLnpvb20ubWF4IDwgem9vbSkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gZW5kIG9mIFwiY2hlY2tMYXllcklzQWN0aXZlKClcIlxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1wcm94eS5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0dlcm1hbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtab29tbGV2ZWx9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtem9vbWxldmVsXCI7XG5pbXBvcnQgKiBhcyBwb3B1cEZ1bmN0aW9uc0RFIGZyb20gXCIuL2M0Zy1tYXBzLXBvcHVwLWluZm8tZGVcIjtcbmltcG9ydCAqIGFzIHBvcHVwRnVuY3Rpb25zRU4gZnJvbSBcIi4vYzRnLW1hcHMtcG9wdXAtaW5mby1lblwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuXG5sZXQgcG9wdXBGdW5jdGlvbnMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIHBvcHVwRnVuY3Rpb25zID0gcG9wdXBGdW5jdGlvbnNERTtcbiAgfSBlbHNlIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgIHBvcHVwRnVuY3Rpb25zID0gcG9wdXBGdW5jdGlvbnNFTjtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIHBvcHVwRnVuY3Rpb25zID0gcG9wdXBGdW5jdGlvbnNERTtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIGM0Zy1NYXBzIHV0aWxpdHkgZnVuY3Rpb25zXG4gICAqL1xuICBjNGcubWFwcy51dGlscyA9ICQuZXh0ZW5kKGM0Zy5tYXBzLnV0aWxzLCB7XG4gICAgLyoqXG4gICAgICogIENvbnZlcnRzIHRoZSBmaXJzdCBsZXR0ZXIgb2YgYSBnaXZlbiBzdHJpbmcgdG8gdXBwZXJjYXNlLCBsZWF2aW5nIHRoZSByZW1haW5pbmcgc3RyaW5nIHVudG91Y2hlZC5cbiAgICAgKlxuICAgICAqICBAcGFyYW0gICAge3N0cmluZ30gICAgdGhlIHN0cmluZyB0byBjYXBpdGFsaXplXG4gICAgICpcbiAgICAgKiAgQHJldHVybiAgIHtzdHJpbmd9ICAgIHRoZSBjYXBpdGFsaXplZCBzdHJpbmdcbiAgICAgKi9cbiAgICBjYXBpdGFsaXplRmlyc3RMZXR0ZXI6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYW4gdW5pcXVlIGlkLlxuICAgICAqXG4gICAgICogVGhlIGlkIGlzIDkgY2hhcmFjdGVycyBsb25nIGFuZCBwcmVmaXhlZCB3aXRoIGFuIHVuZGVyc2NvcmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgVGhlIGdlbmVyYXRlZCBpZC5cbiAgICAgKi9cbiAgICBnZXRVbmlxdWVJZDogZnVuY3Rpb24gKCkge1xuICAgICAgLy8gTWF0aC5yYW5kb20gc2hvdWxkIGJlIHVuaXF1ZSBiZWNhdXNlIG9mIGl0cyBzZWVkaW5nIGFsZ29yaXRobS5cbiAgICAgIC8vIENvbnZlcnQgaXQgdG8gYmFzZSAzNiAobnVtYmVycyArIGxldHRlcnMpLCBhbmQgZ3JhYiB0aGUgZmlyc3QgOSBjaGFyYWN0ZXJzXG4gICAgICAvLyBhZnRlciB0aGUgZGVjaW1hbC5cbiAgICAgIHJldHVybiAnXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVuY29kZSBpbnB1dCBzdHJpbmdzIGZvciBHZW9KU09OLU9iamVjdHMgcHJvcGVybHksXG4gICAgICogc28gdGhleSB3aWxsIG5vdCBicmVhayB0aGUgQ29kZS5cbiAgICAgKiBUcmFuc2Zvcm1zOlxuICAgICAqICAgXFwgLT4gXFxcXDtcbiAgICAgKiAgIFwiIC0+ICcnO1xuICAgICAqICAgw4QgLT4gJkF1bWw7XG4gICAgICogICDDpCAtPiAmYXVtbDtcbiAgICAgKiAgIMOWIC0+ICZPdW1sO1xuICAgICAqICAgw7YgLT4gJm91bWw7XG4gICAgICogICDDnCAtPiAmVXVtbDtcbiAgICAgKiAgIMO8IC0+ICZ1dW1sO1xuICAgICAqXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gIGlucHV0ICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBlbmNvZGVHZW9Kc29uUHJvcGVydHk6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgdmFyIG91dHB1dDtcblxuICAgICAgaWYgKCFpbnB1dCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dCA9IGlucHV0LnJlcGxhY2UoXG4gICAgICAgICAgL1xcXFwvZywgJ1xcXFxcXFxcJ1xuICAgICAgKS5yZXBsYWNlKFxuICAgICAgICAgIC9cXFwiL2csICdcXCdcXCcnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OEL2csICcmQXVtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OkL2csICcmYXVtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OWL2csICcmT3VtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8O2L2csICcmb3VtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OcL2csICcmVXVtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8O8L2csICcmdXVtbDsnXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0sIC8vIGVuZCBvZiBlbmNvZGVHZW9Kc29uUHJvcGVydHkoKVxuXG4gICAgLyoqXG4gICAgICogRGVjb2RlIGlucHV0IHN0cmluZ3MgZm9yIEdlb0pTT04tT2JqZWN0cyBwcm9wZXJseSxcbiAgICAgKiBzbyB0aGV5IHdpbGwgYmUgZGlzcGxheWVkIGNvcnJlY3RseS5cbiAgICAgKiBUcmFuc2Zvcm1zOlxuICAgICAqICAgXFxcXCAgICAgLT4gXFw7XG4gICAgICogICAnJyAgICAgLT4gXCI7XG4gICAgICogICAmQXVtbDsgLT4gw4RcbiAgICAgKiAgICZhdW1sOyAtPiDDpFxuICAgICAqICAgJk91bWw7IC0+IMOWXG4gICAgICogICAmb3VtbDsgLT4gw7ZcbiAgICAgKiAgICZVdW1sOyAtPiDDnFxuICAgICAqICAgJnV1bWw7IC0+IMO8XG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgaW5wdXQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGRlY29kZUdlb0pzb25Qcm9wZXJ0eTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICB2YXIgb3V0cHV0O1xuXG4gICAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaW5wdXQgPSBpbnB1dCArIFwiXCI7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dCA9IGlucHV0LnJlcGxhY2UoXG4gICAgICAgICAgL1xcXFxcXFxcL2csICdcXFxcJ1xuICAgICAgKS5yZXBsYWNlKFxuICAgICAgICAgIC9cXCdcXCcvZywgJ1xcXCInXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZBdW1sOy9nLCAnw4QnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZhdW1sOy9nLCAnw6QnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZPdW1sOy9nLCAnw5YnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZvdW1sOy9nLCAnw7YnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZVdW1sOy9nLCAnw5w7J1xuICAgICAgKS5yZXBsYWNlKFxuICAgICAgICAgIC8mdXVtbDsvZywgJ8O8J1xuICAgICAgKTtcblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9LCAvLyBlbmQgb2YgZGVjb2RlR2VvSnNvblByb3BlcnR5KClcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBvciByZXBsYWNlIGFuIFVSTC1wYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBJZiBgb3B0X2dldEtleWAgaXMgYGZhbHNlYCBvciBgdW5kZWZpbmVkYCB0aGUgZ2l2ZW4gcGFyYW1ldGVyLCBgcGFyYW1gLFxuICAgICAqIHdpbGwgYmUgYXBwbGllZCBhcyBcImhhc2gtcGFyYW1ldGVyXCIuXG4gICAgICogZS5nLjpcbiAgICAgKiAgIGh0dHBzOi8vbXl1cmwuZGU6cG9ydC9wYXRoL3RvL21hcHMjcGFyYW1cbiAgICAgKiBOb3RlLCB0aGF0IGFscmVhZHkgZXhpc3RpbmcgXCJoYXNoLXBhcmFtZXRlcnNcIiB3aWxsIGJlIG92ZXJyaWRlbixcbiAgICAgKiB3aGVyZWFzIGV4aXN0aW5nIFwiR0VULXBhcmFtZXRlcnNcIiBzdGF5IHVudG91Y2hlZC5cbiAgICAgKlxuICAgICAqIElmIGBvcHRfZ2V0S2V5YCBpcyBzZXQsIGl0IHdpbGwgYmUgYXBwbGllZCBhcyBcIkdFVC1wYXJhbWV0ZXJcIi5cbiAgICAgKiBlLmcuOlxuICAgICAqICAgaHR0cHM6Ly9teXVybC5kZTpwb3J0L3BhdGgvdG8vbWFwcz9vcHRfZ2V0S2V5PXBhcmFtXG4gICAgICogSWYgdGhlIGtleSBkZXNjcmliZWQgYnkgYG9wdF9nZXRLZXlgIGlzIGFscmVhZHkgZXhpc3RpbmcsIGl0cyB2YWx1ZSB3aWxsIGJlIG92ZXJyaWRlbixcbiAgICAgKiBvdGhlcndpc2UgdGhlIGtleS12YWx1ZS1wYWlyIHdpbGwgYmUgYXBwZW5kZWQgYXBwcm9wcmlhdGx5LlxuICAgICAqIEFscmVhZHkgZXhpc3RpbmcgXCJoYXNoLXBhcmFtZXRlcnNcIiB3aWxsIHN0YXkgdW50b3VjaGVkLlxuICAgICAqXG4gICAgICogSWYgYG9wdF9leGVjdXRlYCBpcyBgZmFsc2VgIG9yIGB1bmRlZmluZWRgLCB0aGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gdGhlIG5ldyBsaW5rIGFzIGBzdHJpbmdgLFxuICAgICAqIG90aGVyd2lzZSB0aGUgXCJocmVmL2xvY2F0aW9uXCIgd2lsbCBiZSBjaGFuZ2VkIGRpcmVjdGx5IGluIHRoZSBicm93c2VyLCB3aGljaCBjYW4gY2F1c2UgYSBwYWdlcmVsb2FkLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgcGFyYW0gICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gIHt1bmRlZmluZWR8Ym9vbGVhbnxzdHJpbmd9ICBvcHRfZ2V0S2V5ICAgRGVmYXVsdDogYHVuZGVmaW5lZGBcbiAgICAgKiBAcGFyYW0gIHt1bmRlZmluZWR8Ym9vbGVhbn0gICAgICAgICBvcHRfZXhlY3V0ZSAgRGVmYXVsdDogYHVuZGVmaW5lZGBcbiAgICAgKi9cbiAgICBzZXRVcmxQYXJhbTogZnVuY3Rpb24gKHBhcmFtLCBvcHRfZ2V0S2V5LCBvcHRfZXhlY3V0ZSkge1xuICAgICAgdmFyIGxpbmssXG4gICAgICAgICAgc2VhcmNoUGFyYW0sXG4gICAgICAgICAgcGFyYW1SZXBsYWNlZCxcbiAgICAgICAgICBpO1xuXG4gICAgICBpZiAodHlwZW9mIHBhcmFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBsaW5rID0gbG9jYXRpb24ub3JpZ2luICsgbG9jYXRpb24ucGF0aG5hbWU7XG5cbiAgICAgIGlmICghb3B0X2dldEtleSkge1xuICAgICAgICAvLyB1c2UgaGFzaC1wYXJhbWV0ZXJcbiAgICAgICAgaWYgKG9wdF9leGVjdXRlKSB7XG4gICAgICAgICAgbG9jYXRpb24uaGFzaCA9IHBhcmFtO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxpbmsgKz0gbG9jYXRpb24uc2VhcmNoICsgJyMnICsgcGFyYW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1c2UgR0VULXBhcmFtZXRlclxuICAgICAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICAgICAgLy8gdGhlcmUgYXJlIGFscmVhZHkgc2VhcmNoLXBhcmFtZXRlcnNcbiAgICAgICAgICBwYXJhbVJlcGxhY2VkID0gZmFsc2U7XG4gICAgICAgICAgb3B0X2dldEtleSA9IG9wdF9nZXRLZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAvLyByZXBsYWNlIHBhcmFtZXRlciBpZiBhbHJlYWR5IGV4aXN0ZW50XG4gICAgICAgICAgc2VhcmNoUGFyYW0gPSBsb2NhdGlvbi5zZWFyY2gucmVwbGFjZShcbiAgICAgICAgICAgICAgLyhbXj1cXD9cXCZdKyk9KFteJl0rKS9naSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKG1hdGNoLCBrZXksIHZhbHVlLCBvZmZzZXQsIG9yaWdpblN0cmluZykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IG9wdF9nZXRLZXkpIHtcbiAgICAgICAgICAgICAgICAgIHBhcmFtUmVwbGFjZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleSArICc9JyArIHBhcmFtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIC8vIG90aGVyd2lzZSBhcHBlbmQgYXMgbmV3IHBhcmFtZXRlclxuICAgICAgICAgIGlmICghcGFyYW1SZXBsYWNlZCkge1xuICAgICAgICAgICAgc2VhcmNoUGFyYW0gKz0gJyYnICsgb3B0X2dldEtleSArICc9JyArIHBhcmFtO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB0aGlzIHdpbGwgYmUgdGhlIG9ubHkgc2VhcmNoLXBhcmFtZXRlciBpbiB0aGUgVVJMXG4gICAgICAgICAgc2VhcmNoUGFyYW0gPSAnPycgKyBvcHRfZ2V0S2V5ICsgJz0nICsgcGFyYW07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdF9leGVjdXRlKSB7XG4gICAgICAgICAgbG9jYXRpb24uc2VhcmNoID0gc2VhcmNoUGFyYW07XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGluayArPSBzZWFyY2hQYXJhbSArIGxvY2F0aW9uLmhhc2g7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaW5rO1xuICAgIH0sIC8vIGVuZCBvZiBzZXRVcmxQYXJhbSgpXG5cbiAgICAvKipcbiAgICAgKiBHZXQgc2VhcmNoIG9yIGhhc2ggVVJMLXBhcmFtZXRlciBhcyBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBJZiBgb3B0X2dldEtleWAgaXMgYGZhbHNlYCBvciBgdW5kZWZpbmVkYCwgdGhlIGhhc2gtcGFyYW1ldGVyIG9mIHRoZSBVUkwgaXMgcmV0dXJuZWQsXG4gICAgICogb3RoZXJ3aXNlIGl0IHdpbGwgc2VhcmNoIGZvciBhIEdFVC1wYXJhbWV0ZXIgYW5kIHJldHVybiBpdHMgdmFsdWUuXG4gICAgICpcbiAgICAgKiBJZiBhIHBhcmFtZXRlciBpcyBub3QgZXhpc3RlbnQsIG9yIGVtcHR5LCBhbiBlbXB0eSBzdHJpbmcgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHt1bmRlZmluZWR8c3RyaW5nfSAgb3B0X2dldEtleSAgRGVmYXVsdDogYHVuZGVmaW5lZGBcbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGZvdW5kIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBnZXRVcmxQYXJhbTogZnVuY3Rpb24gKG9wdF9nZXRLZXkpIHtcbiAgICAgIHZhciBwYXJhbSxcbiAgICAgICAgICByZWdFeDtcblxuICAgICAgaWYgKCFvcHRfZ2V0S2V5KSB7XG4gICAgICAgIHBhcmFtID0gbG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgICAgIHBhcmFtID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVnRXggPSBuZXcgUmVnRXhwKCdbXFw/XFwmXScgKyBvcHRfZ2V0S2V5ICsgJz0oW14mXSspJywgJ2knKTtcbiAgICAgICAgICBwYXJhbSA9IHJlZ0V4LmV4ZWMobG9jYXRpb24uc2VhcmNoKTtcbiAgICAgICAgICBwYXJhbSA9IHBhcmFtID8gcGFyYW1bMV0gOiAnJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfSwgLy8gZW5kIG9mIGdldFVybFBhcmFtKClcblxuICAgIC8qKlxuICAgICAqIERlbHRhLWVuY29kZSBhbiBhcnJheSBvZiBudW1iZXJzLlxuICAgICAqIE5vdGUgdGhhdCB0aGUgYXJyYXkgd2lsbCBiZSBzb3J0ZWQgKGxvd2VzdCB0byBoaWdoZXN0KVxuICAgICAqIGJlZm9yZSBlbmNvZGluZy5cbiAgICAgKlxuICAgICAqIFNvIGFmdGVyIHRoZSBlbmNvZGluZyB0aGUgZmlyc3QgdmFsdWUgb2YgdGhlIG91dHB1dCBjb250YWluc1xuICAgICAqIHRoZSBzbWFsbGVzdCBudW1iZXIgb2YgdGhlIHNldCBhbmQgZWFjaCBmb2xsb3dpbmcgbnVtYmVyIGp1c3RcbiAgICAgKiByZXByZXNlbnRzIHRoZSBvZmZzZXQgdG8gaXRzIHByZXZpb3VzIG5laWdoYm9yLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBtb3N0bHkgZWZmaWNpZW50IGZvciBoaWdoIG51bWJlcnMsIHRoYXQgYXJlIFwiY2xvc2UgdG8gZWFjaCBvdGhlclwiLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiAgIFsxMzM3LCAxMSwgMTAxLCAxMjMsIDk2LCA2OSwgNDIsIDQyXVxuICAgICAqICAgd2lsbCBiZSBzb3J0ZWRcbiAgICAgKiAgIFsxMSwgNDIsIDQyLCA2OSwgOTYsIDEwMSwgMTIzLCAxMzM3XVxuICAgICAqICAgYW5kIGVuY29kZWQgdG9cbiAgICAgKiAgIFsxMSwgMzEsIDAsIDI3LCAyNywgNSwgMjIsIDEyMTRdXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7YXJyYXk8bnVtYmVycz59ICBhcnJJbnB1dCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2FycmF5PG51bWJlcnM+fSAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBkZWx0YUVuY29kZTogZnVuY3Rpb24gKGFycklucHV0KSB7XG4gICAgICB2YXIgYXJyT3V0cHV0LFxuICAgICAgICAgIGk7XG5cbiAgICAgIGlmICghYXJySW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGFycklucHV0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gYXJySW5wdXQ7XG4gICAgICB9XG5cbiAgICAgIGFycklucHV0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgfSk7XG5cbiAgICAgIGFyck91dHB1dCA9IFtdO1xuICAgICAgYXJyT3V0cHV0WzBdID0gYXJySW5wdXRbMF07XG4gICAgICBmb3IgKGkgPSAxOyBpIDwgYXJySW5wdXQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyT3V0cHV0W2ldID0gYXJySW5wdXRbaV0gLSBhcnJJbnB1dFtpIC0gMV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnJPdXRwdXQ7XG5cbiAgICB9LCAvLyBlbmQgb2YgZGVsdGFFbmNvZGUoKVxuXG4gICAgLyoqXG4gICAgICogRGVjb2RlIGEgZGVsdGEtZW5jb2RlZCBhcnJheS5cbiAgICAgKiBTZWUgYGRlbHRhRW5jb2RlYCBmdW5jdGlvbiBmb3IgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHthcnJheTxudW1iZXJzPn0gIGFycklucHV0ICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7YXJyYXk8bnVtYmVycz59ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGRlbHRhRGVjb2RlOiBmdW5jdGlvbiAoYXJySW5wdXQpIHtcbiAgICAgIHZhciBhcnJPdXRwdXQsXG4gICAgICAgICAgaTtcblxuICAgICAgaWYgKCFhcnJJbnB1dCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIGFyck91dHB1dCA9IFtdO1xuICAgICAgYXJyT3V0cHV0WzBdID0gcGFyc2VJbnQoYXJySW5wdXRbMF0sIDEwKTtcbiAgICAgIGlmIChpc05hTihhcnJJbnB1dFswXSkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMTsgaSA8IGFycklucHV0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFyck91dHB1dFtpXSA9IHBhcnNlSW50KGFycklucHV0W2ldLCAxMCkgKyBhcnJPdXRwdXRbaSAtIDFdO1xuICAgICAgICBpZiAoaXNOYU4oYXJyT3V0cHV0W2ldKSkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyT3V0cHV0O1xuXG4gICAgfSwgLy8gZW5kIG9mIGRlbHRhRGVjb2RlKClcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGFuZCBjYWxsIGZ1bmN0aW9ucyBpbiBgYXJySG9va0Z1bmN0aW9uc2Agd2l0aCBnaXZlbiBgcGFyYW1ldGVyc2AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7YXJyYXk8ZnVuY3Rpb24+fSAgIGFyckhvb2tGdW5jdGlvbnMgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7bWl4ZWR9ICAgICAgICAgICAgIHBhcmFtZXRlcnMgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBjYWxsSG9va0Z1bmN0aW9uczogZnVuY3Rpb24gKGFyckhvb2tGdW5jdGlvbnMsIHBhcmFtZXRlcnMpIHtcbiAgICAgIHZhciBqO1xuXG4gICAgICBpZiAoYXJySG9va0Z1bmN0aW9ucyAmJiBhcnJIb29rRnVuY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGFyckhvb2tGdW5jdGlvbnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyckhvb2tGdW5jdGlvbnNbal0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyckhvb2tGdW5jdGlvbnNbal0ocGFyYW1ldGVycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwiY2FsbEhvb2tGdW5jdGlvbnMoKVwiXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgaGV4LWZvcm1hdGVkIGNvbG9yIHZhbHVlIGludG8gcmdiYSgpLWZvcm1hdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtzdHJpbmd8bnVtYmVyfSAgaGV4ICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7c3RyaW5nfG51bWJlcn0gIG9wdF9vcGFjaXR5ICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5OiBmdW5jdGlvbiAoaGV4LCBvcHRfb3BhY2l0eSwgb3B0X2FycmF5KSB7XG5cbiAgICAgIHZhciBiaWdpbnQsIHIsIGcsIGIsIGE7XG5cbiAgICAgIGJpZ2ludCA9IHBhcnNlSW50KGhleCwgMTYpO1xuICAgICAgaWYgKG9wdF9vcGFjaXR5ICYmIG9wdF9vcGFjaXR5LnZhbHVlKSB7XG4gICAgICAgIG9wdF9vcGFjaXR5LnZhbHVlID0gcGFyc2VJbnQob3B0X29wYWNpdHkudmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0X29wYWNpdHkgJiYgdHlwZW9mIG9wdF9vcGFjaXR5ICE9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdF9vcGFjaXR5ID09PSAnb2JqZWN0JyAmJiBvcHRfb3BhY2l0eS52YWx1ZSkge1xuICAgICAgICAgIG9wdF9vcGFjaXR5ID0gb3B0X29wYWNpdHkudmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0X29wYWNpdHkgPSAxMDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgciA9IChiaWdpbnQgPj4gMTYpICYgMjU1O1xuICAgICAgZyA9IChiaWdpbnQgPj4gOCkgJiAyNTU7XG4gICAgICBiID0gYmlnaW50ICYgMjU1O1xuICAgICAgYSA9IG9wdF9vcGFjaXR5ID8gKG9wdF9vcGFjaXR5IC8gMTAwKSA6IDE7XG4gICAgICBpZihvcHRfYXJyYXkpe1xuICAgICAgICByZXR1cm4gW3IsZyxiLGFdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJyZ2JhKFwiICsgciArIFwiLFwiICsgZyArIFwiLFwiICsgYiArIFwiLFwiICsgYSArIFwiKVwiO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgYSBkZWZpbmVkIHN0eWxlLCB0byBhIHNpbXBsZXIgdmVyc2lvbi5cbiAgICAgKlxuICAgICAqIFRoZSByZWR1Y2VkIHN0eWxlIGlzIHRoZSBmaXJzdCBzdHlsZSBvZiB0aGUgZGVmaW5lZCBzdHlsZXNldCxcbiAgICAgKiB3aXRoIGEgMXB4IHRoaWNrIHN0cm9rZSBhbmQgYSBjaXJjbGUgd2l0aCBhIDVweCByYWRpdXMuXG4gICAgICpcbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGRpc3BsYXkgYWRkaXRpb25hbCBnZW9tZXRyaWVzIHdpdGggYSBtYWluLWdlb21ldHJ5LFxuICAgICAqIHdpdGhvdXQgaGF2aW5nIHRvIGRlZmluZSBhIHdob2xlIG5ldyBzdHlsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtudW1iZXJ8c3RyaW5nfSAgICAgICAgICAgc3R5bGVJZCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2FycmF5PG9sLnN0eWxlLlN0eWxlPn0gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcmVkdWNlU3R5bGU6IGZ1bmN0aW9uIChzdHlsZUlkKSB7XG4gICAgICB2YXIgc3R5bGUsXG4gICAgICAgICAgcmVkdWNlZFN0eWxlLFxuICAgICAgICAgIGZpbGxTdHlsZSxcbiAgICAgICAgICBzdHJva2VTdHlsZTtcblxuICAgICAgaWYgKCFjNGcubWFwcy5sb2NhdGlvblN0eWxlc1tzdHlsZUlkXSB8fCAhYzRnLm1hcHMubG9jYXRpb25TdHlsZXNbc3R5bGVJZF0uc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICBzdHlsZSA9IGM0Zy5tYXBzLmxvY2F0aW9uU3R5bGVzW3N0eWxlSWRdLnN0eWxlKClbMF07XG5cbiAgICAgIGZpbGxTdHlsZSA9IHN0eWxlLmdldEZpbGwoKTtcbiAgICAgIHN0cm9rZVN0eWxlID0gc3R5bGUuZ2V0U3Ryb2tlKCk7XG4gICAgICBzdHJva2VTdHlsZS5zZXRXaWR0aCgxKTtcblxuICAgICAgcmVkdWNlZFN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgIHJhZGl1czogNVxuICAgICAgICB9KSxcbiAgICAgICAgLy8gdGV4dDogc3R5bGUuZ2V0VGV4dCgpLFxuICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICBmaWxsOiBmaWxsU3R5bGVcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gW3JlZHVjZWRTdHlsZV07XG4gICAgfSwgLy8gZW5kIG9mIFwicmVkdWNlU3R5bGVcIlxuXG4gICAgLyoqXG4gICAgICogTWVhc3VyZSB0aGUgZGltZW5zaW9ucyBvZiB0aGUgZ2l2ZW4gZ2VvbWV0cnkuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgZ2VvbWV0cnkgaXMgYSBgTGluZVN0cmluZ2AgdGhlIGZ1bmN0aW9uIHdpbGwgbWVhc3VyZSBpdHMgbGVuZ3RoLFxuICAgICAqIGlzIGl0IGEgYFBvbHlnb25gIGl0IHdpbGwgbWVhc3VyZSB0aGUgYWNyZWFnZSxcbiAgICAgKiBvdGhlcndpc2UgaXQgd2lsbCByZXR1cm4gYDBgLlxuICAgICAqXG4gICAgICogSWYgdGhlIG9wdGlvbmFsIGBvcHRfZm9yY2VMaW5lTWVhc3VyZWAgcGFyYW1ldGVyIGlzIGB0cnVlYFxuICAgICAqIGFuZCB0aGUgZ2VvbWV0cnkgaXMgYSBgUG9seWdvbmAgaXQgd2lsbCBtZWFzdXJlIGl0cyBwZXJpbWV0ZXIgaW5zdGVhZFxuICAgICAqIG9mIGl0cyBhY3JlYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtICAge29sLmdlb20uTGluZVN0cmluZ3xvbC5nZW9tLlBvbHlnb259ICAgZ2VvbWV0cnkgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7dW5kZWZpbmVkfGJvb2xlYW59ICAgICAgICAgICAgICAgICAgICBvcHRfZm9yY2VMaW5lTWVhc3VyZSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2FycmF5PHN0cmluZz58bnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBtZWFzdXJlR2VvbWV0cnk6IGZ1bmN0aW9uIChnZW9tZXRyeSwgb3B0X2ZvcmNlTGluZU1lYXN1cmUsIG9wdF9mb3JjZVN1cmZhY2VNZWFzdXJlKSB7XG4gICAgICB2YXIgdmFsdWUsXG4gICAgICAgICAgc3BoZXJlLFxuICAgICAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgICAgIGNvb3JkMSxcbiAgICAgICAgICBjb29yZDIsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIGk7XG5cbiAgICAgIGlmICghZ2VvbWV0cnkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvL3NwaGVyZSA9IG5ldyBvbC5TcGhlcmUoNjM3ODEzNyk7XG4gICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgaWYgKGdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5MaW5lU3RyaW5nIHx8IChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbiAmJiBvcHRfZm9yY2VMaW5lTWVhc3VyZSkpIHtcblxuICAgICAgICBjb29yZGluYXRlcyA9IGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgIGlmIChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbikge1xuICAgICAgICAgIGNvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXNbMF07XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29vcmRpbmF0ZXMubGVuZ3RoIC0gMTsgaSArPSAxKSB7XG4gICAgICAgICAgY29vcmQxID0gb2wucHJvai50cmFuc2Zvcm0oY29vcmRpbmF0ZXNbaV0sICdFUFNHOjM4NTcnLCAnRVBTRzo0MzI2Jyk7XG4gICAgICAgICAgY29vcmQyID0gb2wucHJvai50cmFuc2Zvcm0oY29vcmRpbmF0ZXNbaSArIDFdLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpO1xuICAgICAgICAgIHZhbHVlICs9IG9sLnNwaGVyZS5nZXREaXN0YW5jZShjb29yZDEsIGNvb3JkMiwgNjM3ODEzNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnJhd1ZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICBpZiAodmFsdWUgPiAxMDAwKSB7XG4gICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlIC8gMTAwMCAqIDEwMCkgLyAxMDApLnRvRml4ZWQoMikgK1xuICAgICAgICAgICAgICAnICcgKyAna20nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSByZXN1bHQucmF3VmFsdWUgK1xuICAgICAgICAgICAgICAnICcgKyAnbSc7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIGlmIChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbikge1xuICAgICAgICAvL2dlb21ldHJ5ID0gLyoqIEB0eXBlIHtvbC5nZW9tLlBvbHlnb259ICovKGdlb21ldHJ5LmNsb25lKCkudHJhbnNmb3JtKCdFUFNHOjM4NTcnLCAnRVBTRzo0MzI2JykpO1xuICAgICAgICAvL2Nvb3JkaW5hdGVzID0gZ2VvbWV0cnkuZ2V0TGluZWFyUmluZygwKS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgICB2YWx1ZSA9IE1hdGguYWJzKG9sLnNwaGVyZS5nZXRBcmVhKGdlb21ldHJ5KSk7XG4gICAgICAgIHJlc3VsdC5yYXdWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgaWYgKHZhbHVlID4gMTAwMDApIHtcbiAgICAgICAgICByZXN1bHQuaHRtbFZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgLyAxMDAwMDAwICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKSArXG4gICAgICAgICAgICAgICcgJyArICdrbTxzdXA+Mjwvc3VwPic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IHJlc3VsdC5yYXdWYWx1ZSArXG4gICAgICAgICAgICAgICcgJyArICdtPHN1cD4yPC9zdXA+JztcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5DaXJjbGUgJiYgb3B0X2ZvcmNlU3VyZmFjZU1lYXN1cmUpIHtcbiAgICAgICAgICB2YXIgY2VudGVyID0gZ2VvbWV0cnkuZ2V0Q2VudGVyKCk7XG4gICAgICAgICAgdmFyIHJhZGl1cyA9IGdlb21ldHJ5LmdldFJhZGl1cygpO1xuICAgICAgICAgIHZhciBlZGdlQ29vcmRpbmF0ZSA9IFtjZW50ZXJbMF0gKyByYWRpdXMsIGNlbnRlclsxXV07XG4gICAgICAgICAgLy92YXIgd2dzODRTcGhlcmUgPSBuZXcgb2wuU3BoZXJlKDYzNzgxMzcpO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9sLnNwaGVyZS5nZXREaXN0YW5jZShcbiAgICAgICAgICAgICAgb2wucHJvai50cmFuc2Zvcm0oY2VudGVyLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpLFxuICAgICAgICAgICAgICBvbC5wcm9qLnRyYW5zZm9ybShlZGdlQ29vcmRpbmF0ZSwgJ0VQU0c6Mzg1NycsICdFUFNHOjQzMjYnKSxcbiAgICAgICAgICAgICAgNjM3ODEzN1xuICAgICAgICAgICk7XG5cbiAgICAgICAgICB2YWx1ZSA9IE1hdGguUEkgKiBNYXRoLnNxcnQodmFsdWUpO1xuXG4gICAgICAgICAgcmVzdWx0LnJhd1ZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICAgIGlmICh2YWx1ZSA+IDEwMDAwKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSAoTWF0aC5yb3VuZCh2YWx1ZSAvIDEwMDAwMDAgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpICtcbiAgICAgICAgICAgICAgICAgICcgJyArICdrbTxzdXA+Mjwvc3VwPic7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IHJlc3VsdC5yYXdWYWx1ZSArXG4gICAgICAgICAgICAgICAgICAnICcgKyAnbTxzdXA+Mjwvc3VwPic7XG4gICAgICAgICAgfVxuXG5cbiAgICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkgaW5zdGFuY2VvZiBvbC5nZW9tLkNpcmNsZSkge1xuICAgICAgICAgIHZhciBjZW50ZXIgPSBnZW9tZXRyeS5nZXRDZW50ZXIoKTtcbiAgICAgICAgICB2YXIgcmFkaXVzID0gZ2VvbWV0cnkuZ2V0UmFkaXVzKCk7XG4gICAgICAgICAgdmFyIGVkZ2VDb29yZGluYXRlID0gW2NlbnRlclswXSArIHJhZGl1cywgY2VudGVyWzFdXTtcbiAgICAgICAgICAvL3ZhciB3Z3M4NFNwaGVyZSA9IG5ldyBvbC5TcGhlcmUoNjM3ODEzNyk7XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2wuc3BoZXJlLmdldERpc3RhbmNlKFxuICAgICAgICAgICAgICBvbC5wcm9qLnRyYW5zZm9ybShjZW50ZXIsICdFUFNHOjM4NTcnLCAnRVBTRzo0MzI2JyksXG4gICAgICAgICAgICAgIG9sLnByb2oudHJhbnNmb3JtKGVkZ2VDb29yZGluYXRlLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpLFxuICAgICAgICAgICAgICA2Mzc4MTM3XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHJlc3VsdC5yYXdWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgICBpZiAocmVzdWx0LnJhd1ZhbHVlID4gMTAwMDApIHtcbiAgICAgICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IChNYXRoLnJvdW5kKCh2YWx1ZSAqIDEwMCkgLyAxMDApIC8gMTAwMCkudG9GaXhlZCgyKSArXG4gICAgICAgICAgICAgICAgICAnICcgKyAna20nO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSByZXN1bHQucmF3VmFsdWUgK1xuICAgICAgICAgICAgICAgICAgJyAnICsgJ20nO1xuICAgICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBleHRlbnQgZm9yIGFuIGFycmF5IG9mIGdlb21ldHJpZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7QXJyYXkuPG9sLmdlb20uc2ltcGxlR2VvbWV0cnk+fSAgYXJyR2VvbWV0cmllcyAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge29sLkV4dGVudH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBnZXRFeHRlbnRGb3JHZW9tZXRyaWVzOiBmdW5jdGlvbiAoYXJyR2VvbWV0cmllcykge1xuICAgICAgdmFyIGV4dGVudFNvdXJjZTtcblxuICAgICAgaWYgKCFhcnJHZW9tZXRyaWVzKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignR2VvbWV0cmllcyBtaXNzaW5nIGZvciBleHRlbnQgY2FsY3VsYXRpb24nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBleHRlbnRTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3RvcigpO1xuICAgICAgZXh0ZW50U291cmNlLmFkZEZlYXR1cmVzKGFyckdlb21ldHJpZXMpO1xuXG4gICAgICByZXR1cm4gZXh0ZW50U291cmNlLmdldEV4dGVudCgpIHx8IG9sLkV4dGVudChbMCwgMCwgMCwgMF0pO1xuICAgIH0sIC8vIGVuZCBvZiBnZXRFeHRlbnRGb3JHZW9tZXRyaWVzKClcblxuICAgIC8qKlxuICAgICAqIEZpdCB2aWV3IG9mIGBtYXBgIHRvIGEgZ2l2ZW4gYXJyYXkgb2YgYGV4dGVudHNgLlxuICAgICAqIEFuaW1hdGVkIGlmIGBvcHRfYW5pbWF0aW9uRHVyYXRpb25gIGlzIGFuIGludGVnZXIgPiAwLlxuICAgICAqXG4gICAgICogQHBhcmFtICAge29iamVjdH0gICAgIGV4dGVudHMgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuTWFwfSAgICAgbWFwICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICAge2ludGVnZXJ9ICAgIG9wdF9hbmltYXRpb25EdXJhdGlvbiAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICAgICAgICAgICAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGZpdFRvRXh0ZW50czogZnVuY3Rpb24gKGV4dGVudHMsIG1hcCwgb3B0X3BhZGRpbmcsIG9wdF9hbmltYXRpb25EdXJhdGlvbikge1xuICAgICAgdmFyIHZpZXcsXG4gICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICBleHRlbnQsXG4gICAgICAgICAga2V5O1xuXG4gICAgICBpZiAoIWV4dGVudHMgfHwgIW1hcCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ01pc3NpbmcgZXh0ZW50IG9yIG1hcCBmb3IgZml0RXh0ZW50Jyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vZXh0ZW50ID0gb2wuZXh0ZW50LmNyZWF0ZUVtcHR5KCk7XG5cbiAgICAgIGZvciAoa2V5IGluIGV4dGVudHMpIHtcbiAgICAgICAgaWYgKGV4dGVudHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZXh0ZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBleHRlbnQgPSBleHRlbnRzW2tleV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9sLmV4dGVudC5leHRlbmQoZXh0ZW50LCBleHRlbnRzW2tleV0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZml0VG9FeHRlbnQoZXh0ZW50LCBtYXAsIG9wdF9wYWRkaW5nLCA1LCAwLCAwLCAyKTtcblxuXG4gICAgfSwgLy8gZW5kIG9mIGZpdFRvRXh0ZW50c1xuXG4gICAgLyoqXG4gICAgICogRml0IHZpZXcgb2YgYG1hcGAgdG8gYSBnaXZlbiBgZXh0ZW50YC5cbiAgICAgKiBBbmltYXRlZCBpZiBgb3B0X2FuaW1hdGlvbkR1cmF0aW9uYCBpcyBhbiBpbnRlZ2VyID4gMC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtvbC5FeHRlbnR9ICBleHRlbnQgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuTWFwfSAgICAgbWFwICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICAge2FycmF5fSAgICAgIG9wdF9wYWRkaW5nICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtpbnRlZ2VyfSAgICBvcHRfYW5pbWF0aW9uRHVyYXRpb24gIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7aW50ZWdlcn0gICAgb3B0X21pblpvb20gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICAge2ludGVnZXJ9ICAgIG9wdF9tYXhab29tICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtpbnRlZ2VyfSAgICBvcHRfbWluUmVzb2x1dGlvbiAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBmaXRUb0V4dGVudDogZnVuY3Rpb24gKGV4dGVudCwgbWFwLCBvcHRfcGFkZGluZywgb3B0X2FuaW1hdGlvbkR1cmF0aW9uLCBvcHRfbWluWm9vbSwgb3B0X21heFpvb20sIG9wdF9taW5SZXNvbHV0aW9uKSB7XG4gICAgICB2YXIgdmlldyxcbiAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgIGZpdE9wdGlvbnM7XG5cbiAgICAgIGlmICghZXh0ZW50IHx8ICFtYXApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdNaXNzaW5nIGV4dGVudCBvciBtYXAgZm9yIGZpdEV4dGVudCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZpZXcgPSBtYXAuZ2V0VmlldygpO1xuXG4gICAgICBmaXRPcHRpb25zID0ge1xuICAgICAgICAncGFkZGluZyc6IG9wdF9wYWRkaW5nIHx8IFsyNSwgMjUsIDI1LCAyNV1cbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRfbWluUmVzb2x1dGlvbiAmJiBvcHRfbWluUmVzb2x1dGlvbiA+IDApIHtcbiAgICAgICAgZml0T3B0aW9ucy5taW5SZXNvbHV0aW9uID0gb3B0X21pblJlc29sdXRpb247XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRfbWluWm9vbSAmJiBvcHRfbWluWm9vbSA+PSAwKSB7XG4gICAgICAgIGZpdE9wdGlvbnMubWluWm9vbSA9IG9wdF9taW5ab29tO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0X21heFpvb20gJiYgb3B0X21heFpvb20gPj0gMCkge1xuICAgICAgICBmaXRPcHRpb25zLm1heFpvb20gPSBvcHRfbWF4Wm9vbTtcbiAgICAgIH1cblxuICAgICAgLy8gYW5pbWF0ZSB0aGUgXCJmaXR0aW5nXCIgd2hlbiBhIGR1cmF0aW9uIGlzIGdpdmVuIGFuZCBpdHMgZ3JlYXRlciB0aGFuIDBcbiAgICAgIGlmIChvcHRfYW5pbWF0aW9uRHVyYXRpb24gJiYgb3B0X2FuaW1hdGlvbkR1cmF0aW9uID4gMCkge1xuICAgICAgICB2aWV3LmFuaW1hdGUoe1xuICAgICAgICAgIHN0YXJ0OiArbmV3IERhdGUoKSxcbiAgICAgICAgICBkdXJhdGlvbjogb3B0X2FuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgIHJlc29sdXRpb246IHZpZXcuZ2V0UmVzb2x1dGlvbigpLFxuICAgICAgICAgIGNlbnRlcjogWzAsIDBdXG4gICAgICAgICAgLy9yb3RhdGlvbjogTWF0aC5QSVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gbWFwLmJlZm9yZVJlbmRlcihcbiAgICAgICAgLy8gICAgIG9sLmFuaW1hdGlvbi5wYW4oe1xuICAgICAgICAvLyAgICAgICBzdGFydDogK25ldyBEYXRlKCksXG4gICAgICAgIC8vICAgICAgIGR1cmF0aW9uOiBvcHRfYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICAgIC8vICAgICAgIHNvdXJjZTogdmlldy5nZXRDZW50ZXIoKVxuICAgICAgICAvLyAgICAgfSksXG4gICAgICAgIC8vICAgICBvbC5hbmltYXRpb24uem9vbSh7XG4gICAgICAgIC8vICAgICAgIHN0YXJ0OiArbmV3IERhdGUoKSxcbiAgICAgICAgLy8gICAgICAgZHVyYXRpb246IG9wdF9hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgLy8gICAgICAgcmVzb2x1dGlvbjogdmlldy5nZXRSZXNvbHV0aW9uKClcbiAgICAgICAgLy8gICAgIH0pXG4gICAgICAgIC8vICk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZpZXcuZml0KGV4dGVudCwgbWFwLmdldFNpemUoKSwge3BhZGRpbmc6IFsyNSwgMjUsIDI1LCAyNV19KTtcbiAgICAgICAgLy92aWV3LmZpdChleHRlbnQsIG1hcC5nZXRTaXplKCkpO1xuICAgICAgICAvL3ZpZXcuc2V0Wm9vbSh2aWV3LmdldFpvb20oKS0xKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgZml0VG9FeHRlbnQoKVxuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgZnVuY3Rpb24gdG8gcnVuIGFsbCBwbGFjZWhvbGRlciBmdW5jdGlvbnMgYXQgb25jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgIHN0cklucHV0ICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtvbC5GZWF0dXJlfSAgICAgICAgICAgICAgICAgIGZlYXR1cmUgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtvbC5sYXllci5MYXllciB8IHVuZGVmaW5lZH0gIG9wdF9sYXllciAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge3N0cmluZ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcmVwbGFjZUFsbFBsYWNlaG9sZGVyczogZnVuY3Rpb24gKHN0cklucHV0LCBmZWF0dXJlLCBvcHRfbGF5ZXIpIHtcbiAgICAgIHZhciBzdHJPdXRwdXQ7XG5cbiAgICAgIC8vIG9ubHkgY2hlY2sgdGhlIGZpcnN0IHR3byBwYXJhbWV0ZXJzIGFzIHRoZXkgd2lsbCBiZSB1c2VkIGJ5IGFsbCBwbGFjZWhvbGRlci1mdW5jdGlvbnNcbiAgICAgIC8vIC0+IGZvciBwZXJmb3JtYW5jZVxuICAgICAgaWYgKCFzdHJJbnB1dCB8fCAhZmVhdHVyZSkge1xuICAgICAgICByZXR1cm4gc3RySW5wdXQ7XG4gICAgICB9XG5cbiAgICAgIHN0ck91dHB1dCA9IHRoaXMucmVwbGFjZUZ1bmN0aW9uUGxhY2Vob2xkZXJzKHN0cklucHV0LCBmZWF0dXJlLCBvcHRfbGF5ZXIpO1xuICAgICAgc3RyT3V0cHV0ID0gdGhpcy5yZXBsYWNlRWRpdG9yVmFyc1BsYWNlaG9sZGVycyhzdHJPdXRwdXQsIGZlYXR1cmUpO1xuICAgICAgc3RyT3V0cHV0ID0gdGhpcy5yZXBsYWNlQXR0cmlidXRlUGxhY2Vob2xkZXJzKHN0ck91dHB1dCwgZmVhdHVyZSk7XG5cbiAgICAgIHJldHVybiBzdHJPdXRwdXQ7XG4gICAgfSwgLy8gZW5kIG9mIHJlcGxhY2VBbGxQbGFjZWhvbGRlcnMoKVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZSBldmVyeSBvY2N1cmFuY2Ugb2YgYCR7Rk5mdW5jdGlvbk5hbWV9YCwgaW4gYHN0cklucHV0YCxcbiAgICAgKiB3aXRoIHRoZSByZXN1bHQgb2YgYHdpbmRvdy5mdW5jdGlvbk5hbWUoZmVhdHVyZSwgc3R5bGUpYCwgaWYgaXQgZXhpc3QuXG4gICAgICogT3RoZXJ3aXNlIHRoZSBwbGFjZWhvbGRlciB3aWxsIGJlIHNpbXBseSByZW1vdmVkICgvcmVwbGFjZWQgd2l0aCAnJykuXG4gICAgICogU3R5bGUgd2lsbCBiZSB0YWtlbiBlaXRoZXIgZnJvbSB0aGUgZmVhdHVyZSwgb3IgdGhlIGxheWVyLlxuICAgICAqXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gICAgICAgICAgc3RySW5wdXQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuRmVhdHVyZX0gICAgICBmZWF0dXJlICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtvbC5sYXllci5MYXllcn0gIGxheWVyICAgICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHJlcGxhY2VGdW5jdGlvblBsYWNlaG9sZGVyczogZnVuY3Rpb24gKHN0cklucHV0LCBmZWF0dXJlLCBsYXllcikge1xuICAgICAgdmFyIHN0ck91dHB1dDtcblxuICAgICAgaWYgKCFzdHJJbnB1dCB8fCAhZmVhdHVyZSB8fCAhbGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuIHN0cklucHV0O1xuICAgICAgfVxuXG4gICAgICBzdHJPdXRwdXQgPSBzdHJJbnB1dC5yZXBsYWNlKFxuICAgICAgICAgIC9cXCRcXHtGTihbXlxcfV0qKVxcfS9nLFxuICAgICAgICAgIGZ1bmN0aW9uIChtYXRjaCwgZnVuY3Rpb25OYW1lLCBvZmZzZXQsIG9yaWdpblN0cmluZykge1xuICAgICAgICAgICAgdmFyIHN0eWxlO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBmdW5jdGlvbiBleGlzdHNcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcG9wdXBGdW5jdGlvbnNbZnVuY3Rpb25OYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAvLyBzZWFyY2ggc3R5bGVcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmZWF0dXJlLmdldFN0eWxlID09PSAnZnVuY3Rpb24nICYmIGZlYXR1cmUuZ2V0U3R5bGUoKSAmJiB0eXBlb2YgZmVhdHVyZS5nZXRTdHlsZSgpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgc3R5bGUgPSBmZWF0dXJlLmdldFN0eWxlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxheWVyLmdldFN0eWxlID09PSAnZnVuY3Rpb24nICYmIGxheWVyLmdldFN0eWxlKCkpIHtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IGxheWVyLmdldFN0eWxlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBwb3B1cEZ1bmN0aW9uc1tmdW5jdGlvbk5hbWVdKGZlYXR1cmUsIHN0eWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9XG4gICAgICApOyAvLyBlbmQgb2YgcmVwbGFjZSgpXG5cbiAgICAgIHJldHVybiBzdHJPdXRwdXQ7XG4gICAgfSwgLy8gZW5kIG9mIHJlcGxhY2VGdW5jdGlvblBsYWNlaG9sZGVycygpXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIHBsYWNlaG9sZGVycywgaW4gYHN0cklucHV0YCwgZm9yIHZhcmlhYmxlcyBzZXQgYnkgdGhlIGdlb0VkaXRvci5cbiAgICAgKiBWYWxpZCBwbGFjZWhvbGRlcnMgYXJlOiAoW2tleV0gcmVwcmVzZW50cyB0aGUgc3RyaW5nbmFtZSBvZiB0aGUgdmFyaWFibGVzIGtleSlcbiAgICAgKiAgIGAke0VMW2tleV19YCAgID0+ICBMYWJlbCBmb3IgdGhlIHZhcmlhYmxlXG4gICAgICogICBgJHtFVkxba2V5XX1gICA9PiAgTGFiZWwgZm9yIHRoZSB2YXJpYWJsZSwgaWYgYSB2YWx1ZSBpcyBzZXQgdG9vXG4gICAgICogICBgJHtFVltrZXldfWAgICA9PiAgVmFsdWUgb2YgdGhlIHZhcmlhYmxlXG4gICAgICogICBgJHtFVlZba2V5XX1gICA9PiAgU2FtZSBhcyBgJHtFVltrZXldfWBcbiAgICAgKlxuICAgICAqIElmIG5vIGFwcHJvcHJpYXRlIHZhbHVlIGNhbiBiZSBmb3VuZCBmb3IgYSBwbGFjZWhvbGRlclxuICAgICAqIGl0IHdpbGwgc2ltcGx5IGJlIHJlbW92ZWQgKC9yZXBsYWNlZCB3aXRoICcnKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgc3RySW5wdXQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuRmVhdHVyZX0gIGZlYXR1cmUgICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcmVwbGFjZUVkaXRvclZhcnNQbGFjZWhvbGRlcnM6IGZ1bmN0aW9uIChzdHJJbnB1dCwgZmVhdHVyZSkge1xuICAgICAgdmFyIHN0ck91dHB1dDtcblxuICAgICAgaWYgKCFzdHJJbnB1dCB8fCAhZmVhdHVyZSB8fCB0eXBlb2YgZmVhdHVyZS5nZXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN0cklucHV0O1xuICAgICAgfVxuXG4gICAgICBzdHJPdXRwdXQgPSBzdHJJbnB1dC5yZXBsYWNlKFxuICAgICAgICAgIC9cXCRcXHsoRVY/W0xWXSkoW15cXH1dKilcXH0vZyxcbiAgICAgICAgICBmdW5jdGlvbiAobWF0Y2gsIHR5cGUsIGV2S2V5LCBvZmZzZXQsIG9yaWdpblN0cmluZykge1xuICAgICAgICAgICAgdmFyIGVkaXRvclZhcnMsXG4gICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgZmVhdHVyZSBoYXMgZWRpdG9yVmFyc1xuICAgICAgICAgICAgaWYgKGZlYXR1cmUuZ2V0KCdlZGl0b3JWYXJzJykpIHtcbiAgICAgICAgICAgICAgZWRpdG9yVmFycyA9IGZlYXR1cmUuZ2V0KCdlZGl0b3JWYXJzJyk7XG4gICAgICAgICAgICAgIC8vIHNlYXJjaCBmb3IgZWRpdG9yVmFyIHdpdGgga2V5ID09IGV2S2V5XG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBlZGl0b3JWYXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVkaXRvclZhcnNbaV0ua2V5ID09PSBldktleSkge1xuICAgICAgICAgICAgICAgICAgLy8gaWYgdHlwZSBpcyAnRVZMJyBkaXNwbGF5IGxhYmVsIG9ubHkgaWYgYSB2YWx1ZSBpcyBzZXQgdG9vXG4gICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ0VMJyB8fCAodHlwZSA9PT0gJ0VWTCcgJiYgZWRpdG9yVmFyc1tpXS52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVkaXRvclZhcnNbaV0ubGFiZWw7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWRpdG9yVmFyc1tpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9XG4gICAgICApOyAvLyBlbmQgb2YgcmVwbGFjZSgpXG5cbiAgICAgIHJldHVybiBzdHJPdXRwdXQ7XG4gICAgfSwgLy8gZW5kIG9mIHJlcGxhY2VFZGl0b3JWYXJzUGxhY2Vob2xkZXJzKClcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgZXZlcnkgb2NjdXJhbmNlIG9mIGAke2F0dHJ9YCwgaW4gYHN0cklucHV0YCxcbiAgICAgKiB3aXRoIHRoZSByZXN1bHQgb2YgYGZlYXR1cmUuZ2V0KGF0dHIpYCwgaWYgaXQgZXhpc3QuXG4gICAgICogT3RoZXJ3aXNlIHRoZSBwbGFjZWhvbGRlciB3aWxsIGJlIHNpbXBseSByZW1vdmVkICgvcmVwbGFjZWQgd2l0aCAnJykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgICAgIHN0cklucHV0ICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICAge29sLkZlYXR1cmV9ICBmZWF0dXJlICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge3N0cmluZ30gICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHJlcGxhY2VBdHRyaWJ1dGVQbGFjZWhvbGRlcnM6IGZ1bmN0aW9uIChzdHJJbnB1dCwgZmVhdHVyZSkge1xuICAgICAgdmFyIHN0ck91dHB1dDtcblxuICAgICAgaWYgKCFzdHJJbnB1dCB8fCAhZmVhdHVyZSB8fCB0eXBlb2YgZmVhdHVyZS5nZXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN0cklucHV0O1xuICAgICAgfVxuXG4gICAgICBzdHJPdXRwdXQgPSBzdHJJbnB1dC5yZXBsYWNlKFxuICAgICAgICAgIC9cXCRcXHsoW15cXH1dKilcXH0vZyxcbiAgICAgICAgICBmdW5jdGlvbiAobWF0Y2gsIGF0dHIsIG9mZnNldCwgb3JpZ2luU3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmVhdHVyZS5nZXQoYXR0cikgfHwgJyc7XG4gICAgICAgICAgfVxuICAgICAgKTsgLy8gZW5kIG9mIHJlcGxhY2UoKVxuXG4gICAgICByZXR1cm4gc3RyT3V0cHV0O1xuICAgIH0sIC8vIGVuZCBvZiByZXBsYWNlQXR0cmlidXRlUGxhY2Vob2xkZXJzKClcblxuICAgIG9iamVjdFRvQXJyYXk6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0LmtleXMob2JqZWN0KS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0sIC8vIGVuZCBvZiBvYmplY3RUb0FycmF5KClcblxuICAgIGdldFZlY3RvckxheWVyKHNvdXJjZSwgc3R5bGUpIHtcbiAgICAgICAgdmFyIGZuU3R5bGU7XG5cbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIHN0eWxlIGlzIGEgZnVuY3Rpb25cbiAgICAgICAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZm5TdHlsZSA9IHN0eWxlO1xuICAgICAgICB9IGVsc2UgaWYgKHN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZuU3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgb2wubGF5ZXIuVmVjdG9yKHtcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgc3R5bGU6IGZuU3R5bGVcbiAgICAgICAgfSk7XG4gICAgfSwvLyBlbmQgb2YgXCJnZXRWZWN0b3JMYXllcigpXCJcblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSBzdWJkb21haW4gZnJvbSB0aGUgY3VycmVudCByZXF1ZXN0IGhvc3QgYW5kIHJldHVybnMgaXQuXG4gICAgICogQHJldHVybnMge3N0cmluZyB8ICp9XG4gICAgICovXG4gICAgZ2V0Q3VycmVudFN1YmRvbWFpbigpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICB9LFxuXG4gICAgcmVkcmF3TWFwVmlldzogZnVuY3Rpb24gKG1hcENvbnRyb2xsZXIpIHtcbiAgICAgIHZhciBtYXBEYXRhID0gbWFwQ29udHJvbGxlci5kYXRhO1xuICAgICAgdmFyIGNvbnRyb2xDb250YWluZXJUb3BMZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250cm9sQ29udGFpbmVyVG9wTGVmdC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTF9DT05UQUlORVJfVEwgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFO1xuICAgICAgbWFwQ29udHJvbGxlci4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQucHJlcGVuZChjb250cm9sQ29udGFpbmVyVG9wTGVmdCk7XG5cbiAgICAgIHZhciBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX0JMICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcbiAgICAgICQoY29udHJvbENvbnRhaW5lclRvcExlZnQpLmFmdGVyKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KTtcbiAgICAgIG1hcENvbnRyb2xsZXIubGVmdFNsaWRlRWxlbWVudHMucHVzaChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCk7XG5cbiAgICAgIHZhciBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX0JMX1NVQiArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG5cbiAgICAgIGlmIChtYXBEYXRhLnNjYWxlbGluZSkge1xuICAgICAgICBtYXBDb250cm9sbGVyLm1hcC5yZW1vdmVDb250cm9sKG1hcENvbnRyb2xsZXIuY29udHJvbHMuc2NhbGVsaW5lKTtcbiAgICAgICAgbWFwQ29udHJvbGxlci5jb250cm9scy5zY2FsZWxpbmUgPSBuZXcgb2wuY29udHJvbC5TY2FsZUxpbmUoe1xuICAgICAgICAgIG1hcFZpZXc6IG1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKSxcbiAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0LFxuICAgICAgICAgIHVuZGVmaW5lZEhUTUw6ICdOL0EnXG4gICAgICAgIH0pO1xuICAgICAgICBtYXBDb250cm9sbGVyLm1hcC5hZGRDb250cm9sKG1hcENvbnRyb2xsZXIuY29udHJvbHMuc2NhbGVsaW5lKTtcbiAgICAgIH1cblxuICAgICAgJChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCkuYXBwZW5kKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViKTtcblxuICAgICAgaWYgKG1hcERhdGEuem9vbWxldmVsKSB7XG4gICAgICAgIG1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUNvbnRyb2wobWFwQ29udHJvbGxlci5jb250cm9scy56b29tbGV2ZWwpO1xuICAgICAgICBtYXBDb250cm9sbGVyLmNvbnRyb2xzLnpvb21sZXZlbCA9IG5ldyBab29tbGV2ZWwoe1xuICAgICAgICAgIG1hcFZpZXc6IG1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKSxcbiAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViLFxuICAgICAgICAgIHVuZGVmaW5lZEhUTUw6ICdOL0EnXG4gICAgICAgIH0pO1xuICAgICAgICBtYXBDb250cm9sbGVyLm1hcC5hZGRDb250cm9sKG1hcENvbnRyb2xsZXIuY29udHJvbHMuem9vbWxldmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1hcERhdGEubW91c2Vwb3NpdGlvbikge1xuICAgICAgICBtYXBDb250cm9sbGVyLm1hcC5yZW1vdmVDb250cm9sKG1hcENvbnRyb2xsZXIuY29udHJvbHMubW91c2Vwb3NpdGlvbik7XG4gICAgICAgIG1hcENvbnRyb2xsZXIuY29udHJvbHMubW91c2Vwb3NpdGlvbiA9IG5ldyBvbC5jb250cm9sLk1vdXNlUG9zaXRpb24oe1xuICAgICAgICAgIHByb2plY3Rpb246ICdFUFNHOjQzMjYnLFxuICAgICAgICAgIGNvb3JkaW5hdGVGb3JtYXQ6IG9sLmNvb3JkaW5hdGUudG9TdHJpbmdIRE1TLFxuICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIsXG4gICAgICAgICAgdW5kZWZpbmVkSFRNTDogJ04vQSdcbiAgICAgICAgfSk7XG4gICAgICAgIG1hcENvbnRyb2xsZXIubWFwLmFkZENvbnRyb2wobWFwQ29udHJvbGxlci5jb250cm9scy5tb3VzZXBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2Vba2V5XSB8fCAnJztcbiAgICB9LFxuICAgIHN0b3JlVmFsdWU6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBsb2NhbFN0b3JhZ2Vba2V5XSA9IHZhbHVlOyAvLyBvbmx5IHN0cmluZ3NcbiAgICB9XG4gIH0pO1xuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciB1dGlscyA9IHRoaXMuYzRnLm1hcHMudXRpbHM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy11dGlscy5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcblxuLy9mb3IganNsaW50XG4vKmpzbGludCBicm93c2VyOnRydWUqL1xuLypqc2xpbnQgdG9kbzp0cnVlICovXG4vKmdsb2JhbCB3aW5kb3cqL1xuLypnbG9iYWwgb2wqL1xuLypnbG9iYWwgQnJvd3NlciovXG4vKmdsb2JhbCBEb2N1bWVudDp0cnVlICovXG4vKmdsb2JhbCBqUXVlcnkqL1xudmFyIGM0ZyA9IHRoaXMuYzRnO1xuXG5pbXBvcnQge01hcFByb3h5fSBmcm9tIFwiLi9jNGctbWFwcy1wcm94eVwiO1xuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcbmltcG9ydCB7U3Bpbm5lcn0gZnJvbSBcIi4vYzRnLW1hcHMtbWlzYy1zcGlubmVyXCI7XG5pbXBvcnQge01hcEhvdmVyfSBmcm9tIFwiLi9jNGctbWFwcy1taXNjLW1hcGhvdmVyXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtNZWFzdXJldG9vbHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtcG9ydHNpZGUtbWVhc3VyZXRvb2xzXCI7XG5pbXBvcnQge1ByaW50fSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXByaW50XCI7XG5pbXBvcnQge0dyaWR9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtZ3JpZFwiO1xuaW1wb3J0IHtab29tbGV2ZWx9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtem9vbWxldmVsXCI7XG5pbXBvcnQge092ZXJ2aWV3TWFwfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLW92ZXJ2aWV3bWFwXCI7XG5pbXBvcnQge0dlb1NlYXJjaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1nZW9zZWFyY2hcIjtcbmltcG9ydCB7UGVybWFsaW5rfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXBlcm1hbGlua1wiO1xuaW1wb3J0IHtTdGFyYm9hcmR9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkXCI7XG5pbXBvcnQge0VkaXRvcn0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1lZGl0b3JcIjtcbmltcG9ydCB7QWNjb3VudH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1hY2NvdW50XCI7XG5pbXBvcnQge0dlb1BpY2tlcn0gZnJvbSBcIi4vYzRnLW1hcHMtaW50ZXJhY3Rpb24tZ2VvcGlja2VyXCI7XG5pbXBvcnQge0hvbWV9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtaG9tZVwiO1xuaW1wb3J0IHtQb3NpdGlvbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1wb3NpdGlvblwiO1xuaW1wb3J0IHtJbmZvcGFnZX0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1pbmZvcGFnZVwiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qKlxuICAgICAqIFtNYXBDb250cm9sbGVyIGRlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSB7anNvbi1vYmplY3R9ICBtYXBEYXRhICBPYmplY3QgdG8gY29uZmlndXJlIGNvbjRnaXMtbWFwcy5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VlIFwiZG9jcy9tYXBEYXRhLXZhbHVlcy5tZFwiXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGdldCBhIGxpc3Qgb2YgdmFsaWQgdmFsdWVzIGZvciB0aGlzIG9iamVjdC5cbiAgICAgKi9cbiAgICBjNGcubWFwcy5NYXBDb250cm9sbGVyID0gZnVuY3Rpb24gKG1hcERhdGEpIHtcblxuICAgICAgICAvLy0tLVxuICAgICAgICB0aGlzLm1hcCA9IG51bGw7XG4gICAgICAgIC8vIHRoaXMuY29udHJvbHMgPSBudWxsO1xuICAgICAgICB0aGlzLmxlZnRTbGlkZUVsZW1lbnRzID0gW107XG4gICAgICAgIHRoaXMucmlnaHRTbGlkZUVsZW1lbnRzID0gW107XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgcGVybWFsaW5rID0gZmFsc2UsXG4gICAgICAgICAgICBtaW5ab29tLFxuICAgICAgICAgICAgbWF4Wm9vbSxcbiAgICAgICAgICAgIHZpZXcsXG4gICAgICAgICAgICBnZW9Mb2NhdGlvbixcbiAgICAgICAgICAgIGNvbnRyb2xzID0gW10sXG4gICAgICAgICAgICBpbnRlcmFjdGlvbnMgPSBbXSxcbiAgICAgICAgICAgIGRpc3BsYXlBbGxMb2NhdGlvbnMsXG4gICAgICAgICAgICBkb21NYXBEaXYsXG4gICAgICAgICAgICBraW5ldGljLFxuICAgICAgICAgICAgY29udHJvbENvbnRhaW5lclRvcExlZnQsXG4gICAgICAgICAgICBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCxcbiAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJUb3BSaWdodCxcbiAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodCxcbiAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViLFxuICAgICAgICAgICAgc3RhcmJvYXJkX2xhYmVsLFxuICAgICAgICAgICAgbG9nb0xpbmssXG4gICAgICAgICAgICBsb2dvR3JhcGhpYyxcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQsXG4gICAgICAgICAgICBlbmFibGVTdGFyYm9hcmQgPSB0cnVlO1xuXG4gICAgICAgIC8vLS1cbiAgICAgICAgbWFwRGF0YSA9ICQuZXh0ZW5kKHtcbiAgICAgICAgICAgIGFwaToge30sXG4gICAgICAgICAgICBhZGRJZFRvRGl2OiBmYWxzZSxcbiAgICAgICAgICAgIG1hcElkOiAxLFxuICAgICAgICAgICAgbWFwRGl2OiAnYzRnX21hcCcsXG4gICAgICAgICAgICBjZW50ZXI6IHt9LFxuICAgICAgICAgICAgY2FsY19leHRlbnQ6ICdDRU5URVJaT09NJyxcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uOiB7fSxcbiAgICAgICAgICAgIGVkaXRvcjoge30sXG4gICAgICAgICAgICBtZWFzdXJldG9vbHM6IHt9LFxuICAgICAgICAgICAgaW5mb3BhZ2U6IHt9LFxuICAgICAgICAgICAgYWNjb3VudDogJycsXG4gICAgICAgICAgICBzdGFyYm9hcmQ6IHt9LFxuICAgICAgICAgICAgbGF5ZXJzd2l0Y2hlcjoge30sXG4gICAgICAgICAgICBiYXNlbGF5ZXJzd2l0Y2hlcjoge30sXG4gICAgICAgICAgICBnZW9zZWFyY2g6IHt9XG4gICAgICAgIH0sIG1hcERhdGEpO1xuICAgICAgICBpZiAobWFwRGF0YS5jYWxjX2V4dGVudCA9PT0gJ0xPQ0FUSU9OUycpIHtcbiAgICAgICAgICAgIG1hcERhdGEgPSAkLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgbWluX2dhcDogMjVcbiAgICAgICAgICAgIH0sIG1hcERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBjZW50ZXJcbiAgICAgICAgbWFwRGF0YS5jZW50ZXIgPSAkLmV4dGVuZCh7XG4gICAgICAgICAgICBsYXQ6IDUyLjIyLFxuICAgICAgICAgICAgbG9uOiA5LjQzLFxuICAgICAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgICAgICB6b29tOiA2XG4gICAgICAgIH0sIG1hcERhdGEuY2VudGVyKTtcbiAgICAgICAgLy8gYXR0cmlidXRpb25cbiAgICAgICAgbWFwRGF0YS5hdHRyaWJ1dGlvbiA9ICQuZXh0ZW5kKHtcbiAgICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbGxhcHNlZDogZmFsc2UsXG4gICAgICAgICAgICBjb2xsYXBzaWJsZTogdHJ1ZVxuICAgICAgICB9LCBtYXBEYXRhLmF0dHJpYnV0aW9uKTtcbiAgICAgICAgLy8gZ2Vvc2VhcmNoXG4gICAgICAgIG1hcERhdGEuZ2Vvc2VhcmNoID0gJC5leHRlbmQoe1xuICAgICAgICAgICAgZW5hYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGRpdjogZmFsc2VcbiAgICAgICAgfSwgbWFwRGF0YS5nZW9zZWFyY2gpO1xuICAgICAgICAvLyBwZXJtYWxpbmtcbiAgICAgICAgbWFwRGF0YS5wZXJtYWxpbmsgPSAkLmV4dGVuZCh7XG4gICAgICAgICAgICBlbmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0X3BhcmFtZXRlcjogZmFsc2VcbiAgICAgICAgfSwgbWFwRGF0YS5wZXJtYWxpbmspO1xuICAgICAgICB0aGlzLmRhdGEgPSBtYXBEYXRhO1xuICAgICAgICBpZiAobWFwRGF0YS5hZGRJZFRvRGl2KSB7XG4gICAgICAgICAgICBtYXBEYXRhLm1hcERpdiArPSAnXycgKyBtYXBEYXRhLm1hcElkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBIUFN0b3JtIG1hcmtzIHRoaXMgYXMgZXJyb3IsIGJ1dCBpdCBpcyBub25lXG4gICAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIGZvciBwcmV2ZW50aW5nIGFuIGVycm9yIHdpdGggdGhlIE9TTS1PdmVycGFzcyBBUElcbiAgICAgICAgLy8gd2hpY2ggb2NjdXJzIHdoZW4gTW9vVG9vbHMgaXMgbG9hZGVkXG4gICAgICAgIGlmICh3aW5kb3cuTW9vVG9vbHMgJiYgQnJvd3Nlci5Eb2N1bWVudCkge1xuICAgICAgICAgICAgRG9jdW1lbnQgPSBCcm93c2VyLkRvY3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJveHkgPSBuZXcgTWFwUHJveHkoe21hcENvbnRyb2xsZXI6IHRoaXN9KTtcblxuICAgICAgICAvLyBjaGVjayBwZXJtYWxpbmtcbiAgICAgICAgaWYgKG1hcERhdGEucGVybWFsaW5rLmVuYWJsZSkge1xuICAgICAgICAgICAgcGVybWFsaW5rID0gdXRpbHMuZ2V0VXJsUGFyYW0obWFwRGF0YS5wZXJtYWxpbmsuZ2V0X3BhcmFtZXRlcik7XG5cbiAgICAgICAgICAgIGlmIChwZXJtYWxpbmspIHtcbiAgICAgICAgICAgICAgICBwZXJtYWxpbmsgPSBwZXJtYWxpbmsuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBlcm1hbGluay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHBlcm1hbGlua1swXSA9IHBhcnNlRmxvYXQocGVybWFsaW5rWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIubG9uID0gIWlzTmFOKHBlcm1hbGlua1swXSkgPyBwZXJtYWxpbmtbMF0gOiBtYXBEYXRhLmNlbnRlci5sb247XG4gICAgICAgICAgICAgICAgICAgIHBlcm1hbGlua1sxXSA9IHBhcnNlRmxvYXQocGVybWFsaW5rWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIubGF0ID0gIWlzTmFOKHBlcm1hbGlua1sxXSkgPyBwZXJtYWxpbmtbMV0gOiBtYXBEYXRhLmNlbnRlci5sYXQ7XG4gICAgICAgICAgICAgICAgICAgIHBlcm1hbGlua1syXSA9IHBhcnNlSW50KHBlcm1hbGlua1syXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmNlbnRlci56b29tID0gIWlzTmFOKHBlcm1hbGlua1syXSkgPyBwZXJtYWxpbmtbMl0gOiBtYXBEYXRhLmNlbnRlci56b29tO1xuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmtbM10gPSBwYXJzZUZsb2F0KHBlcm1hbGlua1szXSk7XG4gICAgICAgICAgICAgICAgICAgIG1hcERhdGEuY2VudGVyLnJvdGF0aW9uID0gIWlzTmFOKHBlcm1hbGlua1szXSkgPyBwZXJtYWxpbmtbM10gOiBtYXBEYXRhLmNlbnRlci5yb3RhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgcGVybWFsaW5rWzRdID0gcGFyc2VJbnQocGVybWFsaW5rWzRdLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIG1hcERhdGEuYmFzZWxheWVyID0gIWlzTmFOKHBlcm1hbGlua1s0XSkgPyBwZXJtYWxpbmtbNF0gOiBtYXBEYXRhLmJhc2VsYXllcjtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5sYXllcnMgPSBwZXJtYWxpbmtbNV0uc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVjb2RlIGRlbHRhRW5jb2RpbmdcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5sYXllcnMgPSB1dGlscy5kZWx0YURlY29kZShtYXBEYXRhLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgLy8gYmFzZWxheWVyIGFuZCBsYXllcnMgb25seVxuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmtbMF0gPSBwYXJzZUludChwZXJtYWxpbmtbMF0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5iYXNlbGF5ZXIgPSAhaXNOYU4ocGVybWFsaW5rWzBdKSA/IHBlcm1hbGlua1swXSA6IG1hcERhdGEuYmFzZWxheWVyO1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHBlcm1hbGlua1sxXS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWNvZGUgZGVsdGFFbmNvZGluZ1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHV0aWxzLmRlbHRhRGVjb2RlKG1hcERhdGEubGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAvLyBsYXllcnMgb25seVxuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHBlcm1hbGlua1swXS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWNvZGUgZGVsdGFFbmNvZGluZ1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHV0aWxzLmRlbHRhRGVjb2RlKG1hcERhdGEubGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgLy8gaW52YWxpZCBjb3VudCBvZiBwZXJtYWxpbmsgcGFyYW1ldGVyc1xuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmsgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hcERhdGEubGF5ZXJzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5sYXllcnMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcGVybWFsaW5rID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBqdXN0IHRvIG1ha2Ugc3VyZSB0aGlzIHZhciBpcyByZWFsbHkgXCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgcGVybWFsaW5rID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwRGF0YS5taW5ab29tICYmIG1hcERhdGEubWluWm9vbSA+IDApIHtcbiAgICAgICAgICAgIG1pblpvb20gPSBtYXBEYXRhLm1pblpvb207XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtaW5ab29tID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXBEYXRhLm1heFpvb20gJiYgbWFwRGF0YS5tYXhab29tID4gMCkge1xuICAgICAgICAgICAgbWF4Wm9vbSA9IG1hcERhdGEubWF4Wm9vbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heFpvb20gPSAxOTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXBEYXRhLmNhY2hpbmcpIHtcbiAgICAgICAgICAgIGlmICgodXRpbHMuZ2V0VmFsdWUoJ2xvbicpKSAmJiAodXRpbHMuZ2V0VmFsdWUoJ2xhdCcpKSkge1xuICAgICAgICAgICAgICAgIG1hcERhdGEuY2VudGVyLmxvbiA9IHV0aWxzLmdldFZhbHVlKCdsb24nKTtcbiAgICAgICAgICAgICAgICBtYXBEYXRhLmNlbnRlci5sYXQgPSB1dGlscy5nZXRWYWx1ZSgnbGF0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1dGlscy5nZXRWYWx1ZSgnem9vbScpKSB7XG4gICAgICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIuem9vbSA9IHV0aWxzLmdldFZhbHVlKCd6b29tJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2aWV3ID0gbmV3IG9sLlZpZXcoe1xuICAgICAgICAgICAgLy8gcHJvamVjdGlvbjogb2wucHJvai5nZXQoJ0VQU0c6NDMyNicpLFxuICAgICAgICAgICAgLy8gY2VudGVyOiBbcGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlcl9sb24pLCBwYXJzZUZsb2F0KG1hcERhdGEuY2VudGVyX2xhdCldLFxuICAgICAgICAgICAgLy8gbWluUmVzb2x1dGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgLy8gbWF4UmVzb2x1dGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY2VudGVyOiBvbC5wcm9qLnRyYW5zZm9ybShbcGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlci5sb24pLCBwYXJzZUZsb2F0KG1hcERhdGEuY2VudGVyLmxhdCldLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpLFxuICAgICAgICAgICAgem9vbTogcGFyc2VJbnQobWFwRGF0YS5jZW50ZXIuem9vbSwgMTApLFxuICAgICAgICAgICAgbWluWm9vbTogcGFyc2VJbnQobWluWm9vbSwgMTApLFxuICAgICAgICAgICAgbWF4Wm9vbTogcGFyc2VJbnQobWF4Wm9vbSwgMTApLFxuICAgICAgICAgICAgcm90YXRpb246IHBhcnNlRmxvYXQobWFwRGF0YS5jZW50ZXIucm90YXRpb24pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNoZWNrIHVzZXJwb3NpdGlvblxuICAgICAgICBpZiAobWFwRGF0YS5nZW9sb2NhdGlvbiAmJiAhcGVybWFsaW5rICkge1xuICAgICAgICAgICAgZ2VvTG9jYXRpb24gPSBuZXcgb2wuR2VvbG9jYXRpb24oe1xuICAgICAgICAgICAgICAgIC8vdHJhY2tpbmc6ICFtYXBEYXRhLmdlb3BpY2tlcixcbiAgICAgICAgICAgICAgICB0cmFja2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiB2aWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBnZW9Mb2NhdGlvbi5vbignY2hhbmdlJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgICBpZiAoZ2VvTG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNldENlbnRlcihnZW9Mb2NhdGlvbi5nZXRQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICBpZiAobWFwRGF0YS5nZW9sb2NhdGlvbl96b29tKSB7XG4gICAgICAgICAgICAgICAgICB2aWV3LnNldFpvb20ocGFyc2VJbnQobWFwRGF0YS5nZW9sb2NhdGlvbl96b29tLCAxMCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnZW9Mb2NhdGlvbi5zZXRUcmFja2luZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYubWFwKSB7XG4gICAgICAgICAgICAgICAgICBzZWxmLm1hcC5zZXRWaWV3KHZpZXcpO1xuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLnJlZHJhd01hcFZpZXcoc2VsZik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVuYWJsZSBkZWZhdWx0IENvbnRyb2xzL0ludGVyYWN0aW9ucyBpZiB0aGVyZSBpcyBubyBwcm9maWxlXG4gICAgICAgIC8vIFtub3RlXTogbWF5YmUgY2hhbmdlIHRoaXMgaW4gdGhlIGZ1dHVyZT8gLT4gXCJubyBkZWZhdWx0XCItb3B0aW9uP1xuICAgICAgICBpZiAoIW1hcERhdGEucHJvZmlsZSkge1xuICAgICAgICAgICAgY29udHJvbHMgPSBvbC5jb250cm9sLmRlZmF1bHRzKCk7XG4gICAgICAgICAgICBpbnRlcmFjdGlvbnMgPSBvbC5pbnRlcmFjdGlvbi5kZWZhdWx0cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IGRlZmF1bHQgYmFzZSBsYXllciB3aGVuIGJhY2tlbmQgZ2VvcGlja2VyIGlzIGVuYWJsZWRcbiAgICAgICAgaWYgKG1hcERhdGEuZ2VvcGlja2VyICYmIG1hcERhdGEuZ2VvcGlja2VyLnR5cGUgPT09IFwiYmFja2VuZFwiKSB7XG4gICAgICAgICAgICBpZiAobWFwRGF0YS5kZWZhdWx0X2Jhc2VsYXllcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfbG9hZGVkLnB1c2goZnVuY3Rpb24gKGJhc2VsYXllcklkcykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuc2hvd0Jhc2VMYXllcihtYXBEYXRhLmRlZmF1bHRfYmFzZWxheWVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gLy8gZW5kIGlubmVyIGlmXG4gICAgICAgICAgICB0aGlzLm1hcCA9IG5ldyBvbC5NYXAoe1xuICAgICAgICAgICAgICAgIGNvbnRyb2xzOiBjb250cm9scyxcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbnM6IGludGVyYWN0aW9ucyxcbiAgICAgICAgICAgICAgICBsYXllcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQmFzZSBtYXBzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja1N1bTogJ2Jhc2VNYXBzTGF5ZXInXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBsb2FkVGlsZXNXaGlsZUFuaW1hdGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG1hcERhdGEubWFwRGl2LFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSBNYXBcbiAgICAgICAgICAgIC8vXG5cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLmRlZmF1bHRfYmFzZWxheWVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm94eS5ob29rX2Jhc2VsYXllcl9sb2FkZWQucHVzaChmdW5jdGlvbiAoYmFzZWxheWVySWRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXBEYXRhLmJhc2VsYXllciAmJiBiYXNlbGF5ZXJJZHMuaW5kZXhPZihtYXBEYXRhLmJhc2VsYXllci50b1N0cmluZygpKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmRlZmF1bHRfYmFzZWxheWVyID0gbWFwRGF0YS5iYXNlbGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobWFwRGF0YS5jYWNoaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbHMuZ2V0VmFsdWUoJ2Jhc2VsYXllcicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5kZWZhdWx0X2Jhc2VsYXllciA9IHV0aWxzLmdldFZhbHVlKCdiYXNlbGF5ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5zaG93QmFzZUxheWVyKG1hcERhdGEuZGVmYXVsdF9iYXNlbGF5ZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXAgPSBuZXcgb2wuTWFwKHtcbiAgICAgICAgICAgICAgICBjb250cm9sczogY29udHJvbHMsXG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25zOiBpbnRlcmFjdGlvbnMsXG4gICAgICAgICAgICAgICAgbGF5ZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBvbC5sYXllci5Hcm91cCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0Jhc2UgbWFwcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllcnM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tTdW06ICdiYXNlTWFwc0xheWVyJ1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgbG9hZFRpbGVzV2hpbGVBbmltYXRpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBtYXBEYXRhLm1hcERpdixcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcERhdGEubWFwID0gdGhpcy5tYXA7XG5cbiAgICAgIC8vIHNldCBleHRlbnQgdG8gbWFrZSBhbGwgbG9jYXRpb25zIHZpc2libGUgaWYgd2FudGVkXG4gICAgICAgIGlmIChtYXBEYXRhLmNhbGNfZXh0ZW50ID09PSBcIkxPQ0FUSU9OU1wiKSB7XG4gICAgICAgICAgICBkaXNwbGF5QWxsTG9jYXRpb25zID0gZnVuY3Rpb24gKGxheWVySWRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxheWVycyA9IHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVycyxcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LFxuICAgICAgICAgICAgICAgICAgICBjb29yZHMsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgICAgICAgICAgICAgICBleHRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVMaXN0LFxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGxheWVyR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjtcbiAgICAgICAgICAgICAgICAvLyBkZWxldGUgZnVuY3Rpb24gZnJvbSBob29rIGFycmF5XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNbdGhpcy5pbmRleE9mKGRpc3BsYXlBbGxMb2NhdGlvbnMpXTtcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlcyA9IFtdO1xuICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSByZXN1bHRpbmcgZXh0ZW50IG9mIGFsbCBnZW9tZXRyaWVzXG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gbGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIgPSBsYXllcnNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxheWVyLnR5cGUgPT0gXCJvdmVycGFzc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXkgPSBsYXllci5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckFycmF5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXRjaCBjYXNlIG9mIGxpbmtlZCBsYXllcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmVjdG9yQXJyYXkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JBcnJheSA9IHV0aWxzLm9iamVjdFRvQXJyYXkodmVjdG9yQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJHcm91cCA9IGxheWVyLnZlY3RvckxheWVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckFycmF5ICYmIHZlY3RvckFycmF5LmZvckVhY2ggJiYgdHlwZW9mIHZlY3RvckFycmF5LmZvckVhY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JBcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2ZWN0b3JMYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVjdG9yTGF5ZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5kYXRhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LnR5cGUgPT09IFwiUG9pbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkcyA9IG9sLnByb2oudHJhbnNmb3JtKFtwYXJzZUZsb2F0KHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0pXSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb29yZHNbMF09PVwiSW5maW5pdHlcInx8Y29vcmRzWzBdPT1cIi1JbmZpbml0eVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5ID0gbmV3IG9sLmdlb20uUG9pbnQoY29vcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgbW9yZSBjb21wbGV4IGdlb21ldHJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlTGlzdCA9IGxheWVyR3JvdXAuZ2V0TGF5ZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUFycmF5ID0gZmVhdHVyZUxpc3QuZ2V0QXJyYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIudHlwZSA9PT0gXCJrbWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZlYXR1cmUuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgc291cmNlRmVhdHVyZXMgPSBzb3VyY2UuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5nZXRFeHRlbnQoKS5mb3JFYWNoKGZ1bmN0aW9uIChjb29yZGluYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChjb29yZGluYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wTGVmdChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKG9sLmV4dGVudC5nZXRCb3R0b21SaWdodChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKG9sLmV4dGVudC5nZXRCb3R0b21MZWZ0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGV4dGVudCA9IG9sLmV4dGVudC5ib3VuZGluZ0V4dGVudChjb29yZGluYXRlcyk7XG4gICAgICAgICAgICAgICAgaWYoZXh0ZW50WzBdPT1cIkluZmluaXR5XCJ8fGV4dGVudFswXT09XCItSW5maW5pdHlcIil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL1RPRE86IGNhdGNoIGNhc2UgbWluX2dhcCBpcyBhbHJlYWR5IGFuIGFycmF5XG4gICAgICAgICAgICAgICAgcGFkZGluZyA9IFttYXBEYXRhLm1pbl9nYXAsIG1hcERhdGEubWluX2dhcCwgbWFwRGF0YS5taW5fZ2FwLCBtYXBEYXRhLm1pbl9nYXBdO1xuICAgICAgICAgICAgICAgIHNlbGYubWFwLmdldFZpZXcoKS5maXQoZXh0ZW50LCBzZWxmLm1hcC5nZXRTaXplKCksIHtwYWRkaW5nOiBwYWRkaW5nfSk7XG4gICAgICAgICAgICAgICAgY2VudGVyID0gc2VsZi5tYXAuZ2V0VmlldygpLmdldENlbnRlcigpO1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihjZW50ZXJbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLmdldFZpZXcoKS5zZXRDZW50ZXIoWzUwLCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm1hcC5nZXRWaWV3KCkuc2V0Wm9vbShtYXBEYXRhLm1pblpvb20gfHwgMTApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnByb3h5Lmhvb2tfbGF5ZXJfdmlzaWJpbGl0eS5wdXNoKGRpc3BsYXlBbGxMb2NhdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IG1hcC1zaXplIGFuZCAtbWFyZ2luXG4gICAgICAgIGRvbU1hcERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hcERhdGEubWFwRGl2KTtcblxuICAgICAgICBpZiAoZG9tTWFwRGl2ICYmIGRvbU1hcERpdi5zdHlsZSkge1xuICAgICAgICAgICAgaWYgKG1hcERhdGEud2lkdGgpIHtcbiAgICAgICAgICAgICAgICBkb21NYXBEaXYuc3R5bGUud2lkdGggPSBtYXBEYXRhLndpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcERhdGEuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLmhlaWdodCA9IG1hcERhdGEuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcERhdGEubWFyZ2luKSB7XG4gICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLm1hcmdpbiA9IG1hcERhdGEubWFyZ2luO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdjYW4gbm90IGdldCBlbGVtZW50IGJ5IGlkIG1hcERhdGEubWFwRGl2Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hcC51cGRhdGVTaXplKCk7XG4gICAgICAgIHRoaXMucHJveHkuaW5pdGlhbGl6ZSgpO1xuICAgICAgICAvLyB0aGlzLnByb3h5LmxvYWRCYXNlTGF5ZXJzKCk7XG4gICAgICAgIC8vIHRoaXMucHJveHkubG9hZExheWVycygpO1xuICAgICAgICAvLyAtLS1cblxuICAgICAgICAvLyBzYXZlIG92ZXJsYXljb250YWluZXJcbiAgICAgICAgdGhpcy4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQgPSAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9PVkVSTEFZQ09OVEFJTkVSX1NFKTtcbiAgICAgICAgLy8gYWRkIFNwaW5uZXJcbiAgICAgICAgdGhpcy5zcGlubmVyID0gbmV3IFNwaW5uZXIoe2NsYXNzTmFtZTogY3NzQ29uc3RhbnRzLkxBUkdFfSk7XG4gICAgICAgIC8vIGFkZCBtYXBIb3ZlclxuICAgICAgICB0aGlzLm1hcEhvdmVyID0gbmV3IE1hcEhvdmVyKHttYXBDb250cm9sbGVyOiB0aGlzfSk7XG5cbiAgICAgICAgLy8gYWRkIGludGVyYWN0aW9ucyA9PT1cbiAgICAgICAgLy9cblxuICAgICAgICAvLyBtb3VzZSBuYXZpZ2F0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLm1vdXNlX25hdikge1xuICAgICAgICAgICAgLy8gZHJhZyBwYW4gYW5kIGtpbmV0aWMgc2Nyb2xsaW5nXG4gICAgICAgICAgICBpZiAobWFwRGF0YS5tb3VzZV9uYXYuZHJhZ19wYW4pIHtcbiAgICAgICAgICAgICAgICBraW5ldGljID0gbWFwRGF0YS5tb3VzZV9uYXYua2luZXRpYyA/IG5ldyBvbC5LaW5ldGljKC0wLjAwNSwgMC4wNSwgMTAwKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IG9sLmludGVyYWN0aW9uLkRyYWdQYW4oe2tpbmV0aWM6IGtpbmV0aWN9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBtb3VzZXdoZWVsIHpvb21cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLm1vdXNlX25hdi53aGVlbF96b29tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IG9sLmludGVyYWN0aW9uLk1vdXNlV2hlZWxab29tKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG91YmxlY2xpY2sgem9vbVxuICAgICAgICAgICAgaWYgKG1hcERhdGEubW91c2VfbmF2LmRvdWJsZWNsaWNrX3pvb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uRG91YmxlQ2xpY2tab29tKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYm94IHpvb21cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLm1vdXNlX25hdi5kcmFnX3pvb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uRHJhZ1pvb20oe2NvbmRpdGlvbjogb2wuZXZlbnRzLmNvbmRpdGlvbi5zaGlmdEtleU9ubHl9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkcmFnIHJvdGF0ZSAoJiB6b29tKVxuICAgICAgICAgICAgaWYgKG1hcERhdGEubW91c2VfbmF2LmRyYWdfcm90YXRlX3pvb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uRHJhZ1JvdGF0ZUFuZFpvb20oe2NvbmRpdGlvbjogb2wuZXZlbnRzLmNvbmRpdGlvbi5hbHRLZXlPbmx5fSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXBEYXRhLm1vdXNlX25hdi5kcmFnX3JvdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBvbC5pbnRlcmFjdGlvbi5EcmFnUm90YXRlKHtjb25kaXRpb246IG9sLmV2ZW50cy5jb25kaXRpb24uYWx0S2V5T25seX0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB0b3VjaCBuYXZpZ2F0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLnRvdWNoX25hdikge1xuICAgICAgICAgICAgLy8gcm90YXRlIChwaW5jaClcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLnRvdWNoX25hdi5yb3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uUGluY2hSb3RhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB6b29tIChwaW5jaClcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLnRvdWNoX25hdi56b29tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IG9sLmludGVyYWN0aW9uLlBpbmNoWm9vbSh7Y29uc3RyYWluUmVzb2x1dGlvbjogdHJ1ZX0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBrZXlib2FyZCBuYXZpZ2F0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLmtleWJvYXJkX25hdikge1xuICAgICAgICAgICAgLy8gcGFuIChhcnJvdyBrZXlzKVxuICAgICAgICAgICAgaWYgKG1hcERhdGEua2V5Ym9hcmRfbmF2LnBhbikge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBvbC5pbnRlcmFjdGlvbi5LZXlib2FyZFBhbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHpvb20gKFwiK1wiIGFuZCBcIi1cIiBrZXkpXG4gICAgICAgICAgICBpZiAobWFwRGF0YS5rZXlib2FyZF9uYXYuem9vbSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBvbC5pbnRlcmFjdGlvbi5LZXlib2FyZFpvb20oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gPT09XG5cbiAgICAgICAgLy8gYWRkIGNvbnRyb2wtY29udGFpbmVycyA9PT1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gdG9wLWxlZnRcbiAgICAgICAgY29udHJvbENvbnRhaW5lclRvcExlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udHJvbENvbnRhaW5lclRvcExlZnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX1RMICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcbiAgICAgICAgdGhpcy4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQucHJlcGVuZChjb250cm9sQ29udGFpbmVyVG9wTGVmdCk7XG4gICAgICAgIC8vIGJvdHRvbS1sZWZ0XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9CTCArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgICQoY29udHJvbENvbnRhaW5lclRvcExlZnQpLmFmdGVyKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KTtcbiAgICAgICAgLy8gZWxlbWVudCBuZWVkcyB0byBiZSBtb3ZlZCB3aGVuIFBvcnRzaWRlIHdpbGwgYmUgb3BlbmVkXG4gICAgICAgIHRoaXMubGVmdFNsaWRlRWxlbWVudHMucHVzaChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCk7XG4gICAgICAgIC8vIHRvcC1yaWdodFxuICAgICAgICBjb250cm9sQ29udGFpbmVyVG9wUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udHJvbENvbnRhaW5lclRvcFJpZ2h0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9UUiArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgICQoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQpLmFmdGVyKGNvbnRyb2xDb250YWluZXJUb3BSaWdodCk7XG4gICAgICAgIC8vIGVsZW1lbnQgbmVlZHMgdG8gYmUgbW92ZWQgd2hlbiBTdGFyYm9hcmQgd2lsbCBiZSBvcGVuZWRcbiAgICAgICAgdGhpcy5yaWdodFNsaWRlRWxlbWVudHMucHVzaChjb250cm9sQ29udGFpbmVyVG9wUmlnaHQpO1xuICAgICAgICAvLyBib3R0b20tcmlnaHRcbiAgICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbVJpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTF9DT05UQUlORVJfQlIgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFO1xuICAgICAgICAkKGNvbnRyb2xDb250YWluZXJUb3BSaWdodCkuYWZ0ZXIoY29udHJvbENvbnRhaW5lckJvdHRvbVJpZ2h0KTtcbiAgICAgICAgLy8gZWxlbWVudCBuZWVkcyB0byBiZSBtb3ZlZCB3aGVuIFN0YXJib2FyZCB3aWxsIGJlIG9wZW5lZFxuICAgICAgICB0aGlzLnJpZ2h0U2xpZGVFbGVtZW50cy5wdXNoKGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodCk7XG4gICAgICAgIC8vID09PVxuICAgICAgICAvLyBhZGQgY29udHJvbHMgPT09XG4gICAgICAgIHRoaXMuY29udHJvbHMgPSB7fTtcbiAgICAgICAgLy9cblxuXG4gICAgICAgIC8vIGFjY291bnRcbiAgICAgICAgaWYgKG1hcERhdGEuYWNjb3VudCAmJiB0eXBlb2YgQWNjb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5hY2NvdW50ID0gbmV3IEFjY291bnQoe1xuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfQUNDT1VOVCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAgICAgICAgIGNhY2hpbmc6IG1hcERhdGEuY2FjaGluZyxcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5hY2NvdW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHpvb20tY29udHJvbHNcbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9wYW5lbCB8fCBtYXBEYXRhLnpvb21fc2xpZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnpvb20gPSBuZXcgb2wuY29udHJvbC5ab29tKHtcbiAgICAgICAgICAgICAgICB6b29tSW5MYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHpvb21PdXRMYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHpvb21JblRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfWk9PTV9JTixcbiAgICAgICAgICAgICAgICB6b29tT3V0VGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX09VVCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy56b29tKTtcblxuICAgICAgICAgICAgaWYgKG1hcERhdGEuem9vbV9zbGlkZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnpvb21zbGlkZXIgPSBuZXcgb2wuY29udHJvbC5ab29tU2xpZGVyKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX1NMSURFUixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcExlZnRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnpvb21zbGlkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtYXBEYXRhLnpvb21fZXh0ZW50ICYhIG1hcERhdGEuem9vbV9zbGlkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuem9vbV9leHRlbnQgPSBuZXcgb2wuY29udHJvbC5ab29tVG9FeHRlbnQoe1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX0VYVCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy56b29tX2V4dGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9ob21lICYhIG1hcERhdGEuem9vbV9zbGlkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuem9vbV9ob21lID0gbmV3IEhvbWUoe1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgZGlzYWJsZUxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX0hPTUUsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy56b29tX2hvbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9wb3NpdGlvbiAmISBtYXBEYXRhLnpvb21fc2xpZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnpvb21fcG9zaXRpb24gPSBuZXcgUG9zaXRpb24oe1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgZGlzYWJsZUxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX1BPUyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnpvb21fcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tYmluZWQgem9vbS1jb250cm9sc1xuICAgICAgICBpZiAobWFwRGF0YS56b29tX3NsaWRlcikge1xuICAgICAgICAgICAgJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT01fV0lUSF9TTElERVIpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fSU4pLmFmdGVyKCQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fU0xJREVSICsgJyBidXR0b24nKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTV9TTElERVIpKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fU0xJREVSICsgJy4nICsgY3NzQ29uc3RhbnRzLk9MX0NPTlRST0wpLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9wYW5lbCAmJiBtYXBEYXRhLnpvb21fZXh0ZW50KSB7XG4gICAgICAgICAgICAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTV9XSVRIX0VYVCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT00pO1xuICAgICAgICAgICAgJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTV9JTikuYWZ0ZXIoJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTV9FWFQgKyAnIGJ1dHRvbicpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NX0VYVCkpO1xuICAgICAgICAgICAgJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTV9FWFQgKyAnLicgKyBjc3NDb25zdGFudHMuT0xfQ09OVFJPTCkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwRGF0YS56b29tX3BhbmVsICYmIG1hcERhdGEuem9vbV9ob21lKSB7XG4gICAgICAgICAgICAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTV9XSVRIX0hPTUUpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fSU4pLmFmdGVyKCQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fSE9NRSArICcgYnV0dG9uJykuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT01fSE9NRSkpO1xuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCA9IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fSE9NRSArICcuJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEUgKyAnLmJ1dHRvbicpO1xuICAgICAgICAgICAgaWYgKHJlbW92ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWUgMTEgZXJyb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwRGF0YS56b29tX3BhbmVsICYmIG1hcERhdGEuem9vbV9wb3NpdGlvbikge1xuICAgICAgICAgICAgJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT01fV0lUSF9QT1MpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fSU4pLmFmdGVyKCQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fUE9TICsgJyBidXR0b24nKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTV9QT1MpKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fUE9TICsgJy4nICsgY3NzQ29uc3RhbnRzLk9MX0NPTlRST0wpLnJlbW92ZSgpO1xuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCA9IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fUE9TICsgJy4nICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRSArICcuYnV0dG9uJyk7XG4gICAgICAgICAgICBpZiAocmVtb3ZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZSAxMSBlcnJvclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZ1bGxzY3JlZW5cbiAgICAgICAgaWYgKG1hcERhdGEuZnVsbHNjcmVlbikge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5mdWxsc2NyZWVuID0gbmV3IG9sLmNvbnRyb2wuRnVsbFNjcmVlbih7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICcgJyxcbiAgICAgICAgICAgICAgICBsYWJlbEFjdGl2ZTogJyAnLFxuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfRlVMTFNDUkVFTixcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5mdWxsc2NyZWVuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJvdXRlclxuICAgICAgICBpZiAobWFwRGF0YS5yb3V0ZXJfZW5hYmxlICYmIHR5cGVvZiBSb3V0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMucm91dGVyID0gbmV3IFJvdXRlcih7XG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9ST1VURVIsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgICAgICBjYWNoaW5nOiBtYXBEYXRhLmNhY2hpbmcsXG4gICAgICAgICAgICAgICAgbWFwQ29udHJvbGxlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMucm91dGVyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlZGl0b3JcbiAgICAgICAgaWYgKG1hcERhdGEuZWRpdG9yLmVuYWJsZSAmJiB0eXBlb2YgRWRpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmVkaXRvciA9IG5ldyBFZGl0b3Ioe1xuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfRURJVE9SLFxuICAgICAgICAgICAgICAgIHR5cGU6IG1hcERhdGEuZWRpdG9yLnR5cGUgfHwgJ2Zyb250ZW5kJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG1hcERhdGEuZWRpdG9yLnRhcmdldCB8fCBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgICAgICBpbml0T3BlbjogbWFwRGF0YS5lZGl0b3Iub3BlbiB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICBkYXRhRmllbGQ6IG1hcERhdGEuZWRpdG9yLmRhdGFfZmllbGQgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgY2FjaGluZzogbWFwRGF0YS5jYWNoaW5nLFxuICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLmVkaXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVhc3VyZXRvb2xzXG4gICAgICAgIGlmIChtYXBEYXRhLm1lYXN1cmV0b29scy5lbmFibGUgJiYgdHlwZW9mIE1lYXN1cmV0b29scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5tZWFzdXJldG9vbHMgPSBuZXcgTWVhc3VyZXRvb2xzKHtcbiAgICAgICAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX01FQVNVUkVUT09MUyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAgICAgICAgIGNhY2hpbmc6IG1hcERhdGEuY2FjaGluZyxcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5tZWFzdXJldG9vbHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vXG4gICAgICAgIGlmIChtYXBEYXRhLnByaW50KXtcbiAgICAgICAgICB0aGlzLmNvbnRyb2xzLnByaW50ID0gbmV3IFByaW50KHtcbiAgICAgICAgICAgIGxhYmVsIDogXCJcIixcbiAgICAgICAgICAgIHRpcExhYmVsIDogbGFuZ0NvbnN0YW50cy5DVFJMX1BSSU5ULFxuICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXNcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5wcmludCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93IGdyYXRpY3VsZSAoZ3JpZClcbiAgICAgICAgaWYgKG1hcERhdGEuZ3JhdGljdWxlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmdyYXRpY3VsZSA9IG5ldyBHcmlkKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIGRpc2FibGVMYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfR1JJRCxcbiAgICAgICAgICAgICAgICBjYWNoaW5nOiBtYXBEYXRhLmNhY2hpbmcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuZ3JhdGljdWxlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByb3RhdGUtY29udHJvbFxuICAgICAgICAvL1RPRE86IHVzZSBzb21ldGhpbmcgbGlrZSBcIm1hcERhdGEucm90YXRlXCJcbiAgICAgICAgLy8gICBDaGVjazogbWFwRGF0YS5tb3VzZV9uYXYgKGRlZmluZWQ/KVxuICAgICAgICBpZiAobWFwRGF0YS5tb3VzZV9uYXYgJiYgKG1hcERhdGEubW91c2VfbmF2LmRyYWdfcm90YXRlIHx8IChtYXBEYXRhLm1vdXNlX25hdi5kcmFnX3JvdGF0ZSAmJiBtYXBEYXRhLm1vdXNlX25hdi5kcmFnX3JvdGF0ZV96b29tKSkpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMucm90YXRlID0gbmV3IG9sLmNvbnRyb2wuUm90YXRlKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfUkVTRVRfUk9UQVRJT04sXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMucm90YXRlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbmZvcGFnZVxuICAgICAgICBpZiAobWFwRGF0YS5pbmZvcGFnZSAmJiB0eXBlb2YgSW5mb3BhZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuaW5mb3BhZ2UgPSBuZXcgSW5mb3BhZ2Uoe1xuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfSU5GT1BBR0UsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgICAgICBjYWNoaW5nOiBtYXBEYXRhLmNhY2hpbmcsXG4gICAgICAgICAgICAgICAgbWFwQ29udHJvbGxlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuaW5mb3BhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEBUb0RvIG1hcERhdGEuYWRkaXRpb25hbFBhbmVsIGlzIGFsd2F5cyB0cnVlLCBiZWNhdXNlIGl0IGlzIHNldCBhcyBhbiBuZXcgb2JqZWN0IGluIHRoZSBiZWdpbm5pbmcuIFRoZXJlZm9yZSB0aGUgc2Vjb25kIHBhcmFtZXRlciBvZiB0aGUgYm9vbGVhbiBpcyByZXF1ZXN0ZWQsIHdoaWNoIHRocm93cyBhbiBlcnJvclxuICAgICAgICAvLyBhZGRpdGlvbmFsUGFuZWwgaXMgZnVydGhlcm1vcmUgbm90IGZvdW5kIGFueXdoZXJlIGluIE1hcHMgYW5kIHNob3VsZCBiZSBsb2FkZWQgb3ZlciBhIGhvb2tcblxuICAgICAgICAvLyBpZiAobWFwRGF0YS5hZGRpdGlvbmFsUGFuZWwgJiYgdHlwZW9mIGM0Zy5tYXBzLmNvbnRyb2wuYWRkaXRpb25hbFBhbmVsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vICAgdGhpcy5jb250cm9scy5hZGRpdGlvbmFsUGFuZWwgPSBuZXcgYzRnLm1hcHMuY29udHJvbC5hZGRpdGlvbmFsUGFuZWwoe1xuICAgICAgICAvLyAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9BRERJVElPTkFMUEFORUwsXG4gICAgICAgIC8vICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAvLyAgICAgY2FjaGluZzogbWFwRGF0YS5jYWNoaW5nLFxuICAgICAgICAvLyAgICAgbWFwQ29udHJvbGxlcjogdGhpc1xuICAgICAgICAvLyAgIH0pO1xuICAgICAgICAvLyAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5hZGRpdGlvbmFsUGFuZWwpO1xuICAgICAgICAvLyB9XG5cblxuICAgICAgLy8gc2NhbGVsaW5lXG4gICAgICAgIGlmIChtYXBEYXRhLnNjYWxlbGluZSkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5zY2FsZWxpbmUgPSBuZXcgb2wuY29udHJvbC5TY2FsZUxpbmUoe1xuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnNjYWxlbGluZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB6b29tLWxldmVsICYgbW91c2UtcG9zaXRpb25cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbWxldmVsIHx8IG1hcERhdGEubW91c2Vwb3NpdGlvbikge1xuICAgICAgICAgIC8vIHdyYXBwZXIgZm9yIHpvb20tbGV2ZWwgYW5kIG1vdXNlLXBvc2l0aW9uXG4gICAgICAgICAgICBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX0JMX1NVQiArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgICAgICAkKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KS5hcHBlbmQoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIpO1xuICAgICAgICAgICAgLy8gZGlzcGxheSB6b29tLWxldmVsXG4gICAgICAgICAgICBpZiAobWFwRGF0YS56b29tbGV2ZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnpvb21sZXZlbCA9IG5ldyBab29tbGV2ZWwoe1xuICAgICAgICAgICAgICAgICAgICBtYXBWaWV3OiB2aWV3LFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViLFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWRIVE1MOiAnTi9BJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy56b29tbGV2ZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZGlzcGxheSBtb3VzZS1wb3NpdGlvblxuICAgICAgICAgICAgaWYgKG1hcERhdGEubW91c2Vwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHMubW91c2Vwb3NpdGlvbiA9IG5ldyBvbC5jb250cm9sLk1vdXNlUG9zaXRpb24oe1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZUZvcm1hdDogb2wuY29vcmRpbmF0ZS50b1N0cmluZ0hETVMsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIsXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZEhUTUw6ICdOL0EnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLm1vdXNlcG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2Vvc2VhcmNoXG4gICAgICAgIGlmICgobWFwRGF0YS5nZW9zZWFyY2guZW5hYmxlKSkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5nZW9zZWFyY2ggPSBuZXcgR2VvU2VhcmNoKHtcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzLFxuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcFJpZ2h0LFxuICAgICAgICAgICAgICAgIGV4dERpdjogbWFwRGF0YS5nZW9zZWFyY2guZGl2IHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNlZDogIG1hcERhdGEuZ2Vvc2VhcmNoLmNvbGxhcHNlZCxcbiAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNlZExhYmVsOiAnJyxcbiAgICAgICAgICAgICAgICAvLyBlbmdpbmVVcmw6IG1hcERhdGEuZ2Vvc2VhcmNoLmVuZ2luZSxcbiAgICAgICAgICAgICAgICBzZWFyY2hab29tOiBtYXBEYXRhLmdlb3NlYXJjaC5zZWFyY2h6b29tLFxuICAgICAgICAgICAgICAgIHpvb21Cb3VuZHM6IG1hcERhdGEuZ2Vvc2VhcmNoLnpvb21ib3VuZHMsXG4gICAgICAgICAgICAgICAgcXVpY2tzZWFyY2g6IHRydWUsXG4gICAgICAgICAgICAgICAgYW5pbWF0ZTogbWFwRGF0YS5nZW9zZWFyY2guYW5pbWF0ZSxcbiAgICAgICAgICAgICAgICBtYXJrUmVzdWx0OiBtYXBEYXRhLmdlb3NlYXJjaC5tYXJrcmVzdWx0LFxuICAgICAgICAgICAgICAgIHBvcHVwOiBtYXBEYXRhLmdlb3NlYXJjaC5wb3B1cCxcbiAgICAgICAgICAgICAgICBhdXRvcGljazogbWFwRGF0YS5nZW9waWNrZXIsXG4gICAgICAgICAgICAgICAgY2FjaGluZzogbWFwRGF0YS5jYWNoaW5nLFxuICAgICAgICAgICAgICAgIHJlc3VsdHM6IG1hcERhdGEuZ2Vvc2VhcmNoLnJlc3VsdHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLmdlb3NlYXJjaCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBnZW9ib29rbWFya3MgLSBub3QgcmVhZHlcbiAgICAgICAgaWYgKG1hcERhdGEuZ2VvYm9va21hcmtzKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmdlb2Jvb2ttYXJrcyA9IG5ldyBvbC5jb250cm9sLkdlb0Jvb2ttYXJrKHtcbiAgICAgICAgICAgICAgICAvL3RhcmdldDogY29udHJvbENvbnRhaW5lclRvcFJpZ2h0XG4gICAgICAgICAgICAgICAgbGFiZWw6ICcgJyxcbiAgICAgICAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX0dFT0JPT0tNQVJLUyxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbGFuZ0NvbnN0YW50cy5HRU9CT09LTUFSS1NfUExBQ0VIT0xERVIsXG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlOiAnYzRnX2dlb2Jvb2ttYXJrcycvKixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5HRU9CT09LTUFSS1MqLyAvL1RvRG8gaW1wbGVtZW50IGZvciBvd24gc3R5bGluZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuZ2VvYm9va21hcmtzKTtcbiAgICAgICAgICAgIHRoaXMucmlnaHRTbGlkZUVsZW1lbnRzLnB1c2goJy5vbC1ib29rbWFyaycpO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBvdmVydmlldy1tYXBcbiAgICAgICAgaWYgKG1hcERhdGEub3ZlcnZpZXdtYXApIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMub3ZlcnZpZXdtYXAgPSBuZXcgT3ZlcnZpZXdNYXAoe1xuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcFJpZ2h0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5vdmVydmlld21hcCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdGFyYm9hcmRcbiAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlciAmJiBtYXBEYXRhLmdlb3BpY2tlci50eXBlID09PSBcImJhY2tlbmRcIikge1xuICAgICAgICBlbmFibGVTdGFyYm9hcmQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gcG9wdXAgbWFyZ2luXG4gICAgICAvL3RoaXMubGVmdFNsaWRlRWxlbWVudHMucHVzaCgnLm9sLW92ZXJsYXktY29udGFpbmVyJyk7XG4gICAgICAvL3RoaXMucmlnaHRTbGlkZUVsZW1lbnRzLnB1c2goJy5vbC1vdmVybGF5LWNvbnRhaW5lcicpO1xuXG4gICAgICBpZiAodHlwZW9mIFN0YXJib2FyZCA9PT0gJ2Z1bmN0aW9uJyAmJiBlbmFibGVTdGFyYm9hcmQpIHtcbiAgICAgICAgICB0aGlzLmluaXRpYWxpemVTdGFyYm9hcmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJhY2tlbmQtZ2VvcGlja2VyXG4gICAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlciAmJiAobWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJiYWNrZW5kXCIgfHwgbWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJmcm9udGVuZFwiKSkge1xuICAgICAgICAgIHRoaXMuY29udHJvbHMuZ2VvcGlja2VyID0gbmV3IEdlb1BpY2tlcih7XG4gICAgICAgICAgICAgIG1hcENvbnRhaW5lcjogdGhpc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKHRoaXMuY29udHJvbHMuZ2VvcGlja2VyKTtcbiAgICAgICAgICBpZiAobWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJmcm9udGVuZFwiKSB7XG4gICAgICAgICAgICAvLyBzdWJzdHJpbmcgaXMgbmVlZGVkIGhlcmUgZm9yIHRha2luZyBvdXQgdGhlICNcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feCAmJiBtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feCkge1xuICAgICAgICAgICAgICB2YXIgZ2VveEZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWFwRGF0YS5nZW9waWNrZXIuaW5wdXRfZ2VvX3guc3Vic3RyaW5nKDEpKTtcbiAgICAgICAgICAgICAgdmFyIGdlb3lGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hcERhdGEuZ2VvcGlja2VyLmlucHV0X2dlb195LnN1YnN0cmluZygxKSk7XG4gICAgICAgICAgICAgIGlmIChnZW94RmllbGQgJiYgZ2VveUZpZWxkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY0dlb3ggPSBnZW94RmllbGQudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGxvY0dlb3kgPSBnZW95RmllbGQudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGxvY0dlb3ggJiYgbG9jR2VveSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG51bWVyaXplZCA9IFtwYXJzZUZsb2F0KGxvY0dlb3gsIDEwKSwgcGFyc2VGbG9hdChsb2NHZW95LCAxMCldO1xuICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVkID0gb2wucHJvai50cmFuc2Zvcm0obnVtZXJpemVkLCBvbC5wcm9qLmdldCgnRVBTRzo0MzI2JyksIG9sLnByb2ouZ2V0KCdFUFNHOjM4NTcnKSk7XG4gICAgICAgICAgICAgICAgICBnZW9Mb2NhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB0aGlzLm1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKHRyYW5zZm9ybWVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93IGF0dHJpYnV0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLmF0dHJpYnV0aW9uLmVuYWJsZSkge1xuICAgICAgICAgICAgLy8gQFRPRE86IGNyZWF0ZSBvd24gYXR0cmlidXRpb24tY29udHJvbFxuICAgICAgICAgICAgaWYgKG1hcERhdGEuYXR0cmlidXRpb24uY2ZnX2xvZ28pIHtcbiAgICAgICAgICAgICAgICBsb2dvTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgICAgICBsb2dvTGluay5ocmVmID0gJ2h0dHBzOi8vY29uNGdpcy5vcmcnO1xuICAgICAgICAgICAgICAgIGxvZ29MaW5rLnRpdGxlID0gJ2J1aWx0IHdpdGggY29uNGdpcyc7XG4gICAgICAgICAgICAgICAgbG9nb0xpbmsudGFyZ2V0ID0gJ19ibGFuayc7XG4gICAgICAgICAgICAgICAgbG9nb0xpbmsuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkFUVFJJQlVUSU9OX0xPR087XG4gICAgICAgICAgICAgICAgbG9nb0dyYXBoaWMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgICAgICAgICBsb2dvR3JhcGhpYy5zcmMgPSAnYnVuZGxlcy9jb240Z2lzbWFwcy9pbWFnZXMvbG9nb19jb240Z2lzLnN2Zyc7XG4gICAgICAgICAgICAgICAgbG9nb0xpbmsuYXBwZW5kQ2hpbGQobG9nb0dyYXBoaWMpO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodC5hcHBlbmRDaGlsZChsb2dvTGluayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmF0dHJpYnV0aW9uID0gbmV3IG9sLmNvbnRyb2wuQXR0cmlidXRpb24oe1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9BVFRSSUJVVElPTixcbiAgICAgICAgICAgICAgICBjb2xsYXBzZUxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tUmlnaHQsXG4gICAgICAgICAgICAgICAgY29sbGFwc2libGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5hdHRyaWJ1dGlvbi5zZXRDb2xsYXBzZWQobWFwRGF0YS5hdHRyaWJ1dGlvbi5jb2xsYXBzZWQgPT09ICcxJyk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuYXR0cmlidXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hvdyBwZXJtYWxpbmtcbiAgICAgICAgaWYgKG1hcERhdGEucGVybWFsaW5rLmVuYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5wZXJtYWxpbmsgPSBuZXcgUGVybWFsaW5rKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfUEVSTUFMSU5LLFxuICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgZ2V0UGFyYW1ldGVyOiBtYXBEYXRhLnBlcm1hbGluay5nZXRfcGFyYW1ldGVyLFxuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbVJpZ2h0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5wZXJtYWxpbmspO1xuICAgICAgICB9XG5cbiAgICAgICAgLy90aGVtZURhdGFcbiAgICAgICAgaWYgKG1hcERhdGEudGhlbWVEYXRhKSB7XG4gICAgICAgICAgICBkb21NYXBEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXBEYXRhLm1hcERpdik7XG4gICAgICAgICAgICBpZiAobWFwRGF0YS50aGVtZURhdGFbJ3VzZWdsb2JhbCddKSB7XG4gICAgICAgICAgICAgIGRvbU1hcERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cmFwcGVyJyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAobWFwRGF0YS50aGVtZURhdGFbJ21haW5jb2xvciddKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1haW5Db2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShtYXBEYXRhLnRoZW1lRGF0YVsnbWFpbmNvbG9yJ10sIG1hcERhdGEudGhlbWVEYXRhWydtYWlub3BhY2l0eSddKTtcbiAgICAgICAgICAgICAgICB2YXIgZm9udENvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KG1hcERhdGEudGhlbWVEYXRhWydmb250Y29sb3InXSwgbWFwRGF0YS50aGVtZURhdGFbJ2ZvbnRvcGFjaXR5J10pO1xuICAgICAgICAgICAgICAgIHZhciBzaGFkb3dDb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShtYXBEYXRhLnRoZW1lRGF0YVsnc2hhZG93Y29sb3InXSwgbWFwRGF0YS50aGVtZURhdGFbJ3NoYWRvd29wYWNpdHknXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9tTWFwRGl2ICYmIGRvbU1hcERpdi5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICBkb21NYXBEaXYuc3R5bGUuc2V0UHJvcGVydHkoJy0tbWFpbi1jb2xvcicsIG1haW5Db2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGRvbU1hcERpdi5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1mb250LWNvbG9yJywgZm9udENvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLnNldFByb3BlcnR5KCctLXNoYWRvdy1jb2xvcicsIHNoYWRvd0NvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLnRoZW1lRGF0YVsnYnV0dG9ucmFkaXVzJ10pIHtcbiAgICAgICAgICAgICAgICBkb21NYXBEaXYuc3R5bGUuc2V0UHJvcGVydHkoJy0tYnV0dG9uLXJhZGl1cy1wZXJjZW50JywgbWFwRGF0YS50aGVtZURhdGFbJ2J1dHRvbnJhZGl1cyddKyclJyk7XG4gICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLnNldFByb3BlcnR5KCctLWJ1dHRvbi1yYWRpdXMtcGl4ZWwnLCBtYXBEYXRhLnRoZW1lRGF0YVsnYnV0dG9ucmFkaXVzJ10rJ3B4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgQXJyYXkuaXNBcnJheSh3aW5kb3cuYzRnTWFwc0hvb2tzLm1hcENvbnRyb2xsZXJfYWRkQ29udHJvbHMpKSB7XG4gICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MubWFwQ29udHJvbGxlcl9hZGRDb250cm9scywge21hcENvbnRyb2xsZXI6IHRoaXMsIENvbnRhaW5lcjogY29udHJvbENvbnRhaW5lclRvcExlZnR9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIEFkZCBtZXRob2RzXG4gIGM0Zy5tYXBzLk1hcENvbnRyb2xsZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuTWFwQ29udHJvbGxlci5wcm90b3R5cGUsIHtcbiAgICAgIGluaXRpYWxpemVTdGFyYm9hcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBtYXBEYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICAgIGxldCBzdGFyYm9hcmRfbGFiZWw7XG4gICAgICAgICAgaWYgKG1hcERhdGEuc3RhcmJvYXJkLmxhYmVsKSB7XG4gICAgICAgICAgc3RhcmJvYXJkX2xhYmVsID0gbGFuZ0NvbnN0YW50cy5DVFJMX1NUQVJCT0FSRC5yZXBsYWNlKCdTdGFyYm9hcmQnLCBtYXBEYXRhLnN0YXJib2FyZC5sYWJlbCkucmVwbGFjZSgnc3RhcmJvYXJkJywgbWFwRGF0YS5zdGFyYm9hcmQubGFiZWwpO1xuICAgICAgICB9XG5cblxuICAgICAgICB0aGlzLmNvbnRyb2xzLnN0YXJib2FyZCA9IG5ldyBTdGFyYm9hcmQoe1xuICAgICAgICAgIGNyZWF0ZTogbWFwRGF0YS5zdGFyYm9hcmQuZW5hYmxlIHx8IGZhbHNlLFxuICAgICAgICAgIGhlYWRsaW5lOiBtYXBEYXRhLnN0YXJib2FyZC5sYWJlbCxcbiAgICAgICAgICB0aXBMYWJlbDogc3RhcmJvYXJkX2xhYmVsIHx8IGZhbHNlLFxuICAgICAgICAgIGNhY2hpbmc6IG1hcERhdGEuY2FjaGluZyxcbiAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzLFxuICAgICAgICAgIGV4dERpdjogbWFwRGF0YS5zdGFyYm9hcmQuZGl2LFxuICAgICAgICAgIGRlZmF1bHRPcGVuOiBtYXBEYXRhLnN0YXJib2FyZC5vcGVuLFxuICAgICAgICAgIGZpbHRlcjogbWFwRGF0YS5zdGFyYm9hcmQuZmlsdGVyLFxuICAgICAgICAgIGJ1dHRvbjogbWFwRGF0YS5zdGFyYm9hcmQuYnV0dG9uLFxuICAgICAgICAgIGJhc2VsYXllclN3aXRjaGVyQ3JlYXRlOiBtYXBEYXRhLmJhc2VsYXllcnN3aXRjaGVyLmVuYWJsZSxcbiAgICAgICAgICBiYXNlbGF5ZXJTd2l0Y2hlclRpdGxlOiBtYXBEYXRhLmJhc2VsYXllcnN3aXRjaGVyLmxhYmVsLFxuICAgICAgICAgIGxheWVyU3dpdGNoZXJDcmVhdGU6IG1hcERhdGEubGF5ZXJzd2l0Y2hlci5lbmFibGUsXG4gICAgICAgICAgbGF5ZXJTd2l0Y2hlclRpdGxlOiBtYXBEYXRhLmxheWVyc3dpdGNoZXIubGFiZWxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5zdGFyYm9hcmQpO1xuICAgICAgfVxuICB9KTtcblxufShqUXVlcnksIHRoaXMuYzRnKSk7IC8vICdUaGUgRW5kJyA6KSAgICAtICEgRG8gbm90IHdyaXRlIHN0dWZmIGFmdGVyIHRoaXMgbGluZSAhIC1cblxuZXhwb3J0IGxldCBNYXBDb250cm9sbGVyID0gdGhpcy5jNGcubWFwcy5NYXBDb250cm9sbGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMuanMiLCJpbXBvcnQge0M0Z092ZXJsYXl9IGZyb20gXCIuL2M0Zy1vdmVybGF5XCJcbmltcG9ydCB7Y29uZmlnfSBmcm9tIFwiLi9jNGctbWFwcy1jb25maWdcIjtcblxuZXhwb3J0IGNsYXNzIEM0Z092ZXJsYXlDb250cm9sbGVye1xuICAgIGNvbnN0cnVjdG9yKGJhc2VsYXllcil7XG4gICAgICAgIHRoaXMuYmFzZWxheWVyID0gYmFzZWxheWVyO1xuICAgICAgICB0aGlzLmFyck92ZXJsYXlzID0gW107XG4gICAgfVxuICAgIFxuICAgIHNob3dPdmVybGF5TGF5ZXIob3ZlcmxheUlkKXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgb3ZlcmxheUxheWVyQ29uZmlnLFxuICAgICAgICAgICAgb3NtU291cmNlQ29uZmlncyA9IGNvbmZpZy5vc20sXG4gICAgICAgICAgICBzdGFtZW5Tb3VyY2VDb25maWdzID0gY29uZmlnLnN0YW1lbixcbiAgICAgICAgICAgIGxheWVyT3B0aW9ucyxcbiAgICAgICAgICAgIG92ZXJsYXlMYXllcixcbiAgICAgICAgICAgIG5vVXJsO1xuXG4gICAgICAgIGxheWVyT3B0aW9ucyA9IHt9O1xuICAgICAgICBvdmVybGF5TGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuT1NNKClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb3ZlcmxheUxheWVyQ29uZmlnID0gdGhpcy5hcnJPdmVybGF5c1tvdmVybGF5SWRdO1xuXG4gICAgICAgIHN3aXRjaCAob3ZlcmxheUxheWVyQ29uZmlnLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjYXNlICdvc20nOlxuICAgICAgICAgICAgICAgIGlmIChvc21Tb3VyY2VDb25maWdzW292ZXJsYXlMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLk9TTShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvc21Tb3VyY2VDb25maWdzW292ZXJsYXlMYXllckNvbmZpZy5zdHlsZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFtZW5Tb3VyY2VDb25maWdzW292ZXJsYXlMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RhbWVuXG4gICAgICAgICAgICAgICAgICAgIG92ZXJsYXlMYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5TdGFtZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhbWVuU291cmNlQ29uZmlnc1tvdmVybGF5TGF5ZXJDb25maWcuc3R5bGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2UgaWYgKG1hcFF1ZXN0U291cmNlQ29uZmlnc1tvdmVybGF5TGF5ZXJDb25maWcuc3R5bGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgLy8gbWFwUXVlc3RcbiAgICAgICAgICAgICAgICAgICAgLy8gICBvdmVybGF5TGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuTWFwUXVlc3QobWFwUXVlc3RTb3VyY2VDb25maWdzW292ZXJsYXlMYXllckNvbmZpZy5zdHlsZV0pXG4gICAgICAgICAgICAgICAgICAgIC8vICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvdmVybGF5TGF5ZXJDb25maWcuc3R5bGUgPT09ICdvc21fY3VzdG9tJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXN0b21cbiAgICAgICAgICAgICAgICAgICAgbm9VcmwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3ZlcmxheUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gb3ZlcmxheUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uICsgJyAnICsgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdmVybGF5TGF5ZXJDb25maWcudXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gb3ZlcmxheUxheWVyQ29uZmlnLnVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vVXJsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3ZlcmxheUxheWVyQ29uZmlnLnVybHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmxzID0gb3ZlcmxheUxheWVyQ29uZmlnLnVybHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBub1VybCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9VcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJsYXlMYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKGxheWVyT3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjdXN0b20gdXJsKHMpIG1pc3NpbmcgLT4gc3dpdGNoIHRvIGRlZmF1bHQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigndW5zdXBwb3J0ZWQgb3NtLXN0eWxlIC0+IHN3aXRjaCB0byBkZWZhdWx0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZ29vZ2xlJzpcbiAgICAgICAgICAgICAgICAvL0B0b2RvXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdnb29nbGUtbWFwcyBhcmUgY3VycmVudGx5IHVuc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdiaW5nJzpcbiAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmFwaUtleSAmJiBvdmVybGF5TGF5ZXJDb25maWcuc3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLkJpbmdNYXBzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdWx0dXJlOiBuYXZpZ2F0b3IubGFuZ3VhZ2VzID8gbmF2aWdhdG9yLmxhbmd1YWdlc1swXSA6IChuYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLnVzZXJMYW5ndWFnZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBvdmVybGF5TGF5ZXJDb25maWcuYXBpS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlcnlTZXQ6IG92ZXJsYXlMYXllckNvbmZpZy5zdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd3cm9uZyBiaW5nLWtleSBvciBpbnZhbGlkIGltYWdlcnktc2V0IScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dtcyc6XG4gICAgICAgICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuVGlsZVdNUyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG92ZXJsYXlMYXllckNvbmZpZy51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMQVlFUlM6IG92ZXJsYXlMYXllckNvbmZpZy5wYXJhbXMubGF5ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZFUlNJT046IG92ZXJsYXlMYXllckNvbmZpZy5wYXJhbXMudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0ZPUk1BVDogb3ZlcmxheUxheWVyQ29uZmlnLnBhcmFtcy5mb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVFJBTlNQQVJFTlQ6IG92ZXJsYXlMYXllckNvbmZpZy5wYXJhbXMudHJhbnNwYXJlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBndXR0ZXI6IG92ZXJsYXlMYXllckNvbmZpZy5ndXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGlvbnM6IG92ZXJsYXlMYXllckNvbmZpZy5hdHRyaWJ1dGlvbiArICcgJyArIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT05cbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIC8vZXh0ZW50OiBvbC5wcm9qLnRyYW5zZm9ybUV4dGVudChbNS41OTMzNCwgNTAuMDU3OCwgOS43NDE1OCwgNTIuNzk5OF0sICdFUFNHOjQzMjYnLCAnRVBTRzozODU3JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ293bSc6XG4gICAgICAgICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogb3ZlcmxheUxheWVyQ29uZmlnLnVybCArIG92ZXJsYXlMYXllckNvbmZpZy5hcHBfaWQgKyAnL3t6fS97eH0ve3l9P2hhc2g9JyArIG92ZXJsYXlMYXllckNvbmZpZy5hcGlfa2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRpb25zOiBvdmVybGF5TGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAvL2V4dGVudDogb2wucHJvai50cmFuc2Zvcm1FeHRlbnQoWzUuNTkzMzQsIDUwLjA1NzgsIDkuNzQxNTgsIDUyLjc5OThdLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigndW5zdXBwb3J0ZWQgcHJvdmlkZXInKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvdmVybGF5TGF5ZXIuc2V0T3BhY2l0eShwYXJzZUludChvdmVybGF5TGF5ZXJDb25maWcub3BhY2l0eSkvMTAwKTtcbiAgICAgICAgdGhpcy5hcnJPdmVybGF5c1tvdmVybGF5SWRdLmxheWVyID0gb3ZlcmxheUxheWVyO1xuICAgICAgICByZXR1cm4gdGhpcy5hcnJPdmVybGF5c1tvdmVybGF5SWRdLmxheWVyXG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW92ZXJsYXktY29udHJvbGxlci5qcyIsImV4cG9ydCBjbGFzcyBDNGdPdmVybGF5IHtcblxuICAgIGNvbnN0cnVjdG9yKG92ZXJsYXlBcnIsIG1hcENvbnRyb2xsZXIpe1xuICAgICAgICB0aGlzLmlkICAgICAgICAgICAgPSBvdmVybGF5QXJyWydpZCddO1xuICAgICAgICB0aGlzLnBpZCAgICAgICAgICAgPSBvdmVybGF5QXJyWydwaWQnXTtcbiAgICAgICAgdGhpcy5uYW1lICAgICAgICAgID0gb3ZlcmxheUFyclsnbmFtZSddO1xuICAgICAgICB0aGlzLnByb3ZpZGVyICAgICAgPSBvdmVybGF5QXJyWydwcm92aWRlciddO1xuICAgICAgICB0aGlzLnN0eWxlICAgICAgICAgPSBvdmVybGF5QXJyWydzdHlsZSddO1xuICAgICAgICB0aGlzLnVybCAgICAgICAgICAgPSBvdmVybGF5QXJyWyd1cmwnXTtcbiAgICAgICAgdGhpcy51cmxzICAgICAgICAgID0gb3ZlcmxheUFyclsndXJscyddO1xuICAgICAgICB0aGlzLm9wYWNpdHkgICAgICAgPSBvdmVybGF5QXJyWydvcGFjaXR5J107XG4gICAgICAgIHRoaXMuYXR0cmlidXRpb24gICA9IG92ZXJsYXlBcnJbJ2F0dHJpYnV0aW9uJ107XG4gICAgICAgIHRoaXMuZ3V0dGVyICAgICAgICA9IG92ZXJsYXlBcnJbJ2d1dHRlciddO1xuICAgICAgICB0aGlzLnBhcmFtcyAgICAgICAgPSBvdmVybGF5QXJyWydwYXJhbXMnXTtcbiAgICAgICAgdGhpcy5sYXllciAgICAgICAgID0gZmFsc2U7XG4gICAgICAgIHRoaXMub3ZlcmxheUFyciAgICA9IG92ZXJsYXlBcnI7XG4gICAgICAgIHRoaXMubWFwQ29udHJvbGxlciAgICA9IG1hcENvbnRyb2xsZXJcbiAgICB9XG5cbiAgICBcblxuICAgIGNoYW5nZU9wYWNpdHkodmFsdWUpe1xuICAgICAgICB2YXIgbGF5ZXI7XG5cbiAgICAgICAgbGF5ZXIgPSB0aGlzLmxheWVyO1xuICAgICAgICBpZiAobGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlTGF5ZXIobGF5ZXIpO1xuICAgICAgICAgICAgbGF5ZXIuc2V0T3BhY2l0eSh2YWx1ZS8xMDApO1xuICAgICAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihsYXllcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctb3ZlcmxheS5qcyJdLCJzb3VyY2VSb290IjoiIn0=