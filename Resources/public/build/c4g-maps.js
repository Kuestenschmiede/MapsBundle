/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./Resources/public/js/c4g-maps-main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Resources/public/js/c4g-baselayer-controller.js":
/*!*********************************************************!*\
  !*** ./Resources/public/js/c4g-baselayer-controller.js ***!
  \*********************************************************/
/*! exports provided: C4gBaselayerController */
/*! exports used: C4gBaselayerController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gBaselayerController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_baselayer__ = __webpack_require__(/*! ./c4g-baselayer */ "./Resources/public/js/c4g-baselayer.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_overlay__ = __webpack_require__(/*! ./c4g-overlay */ "./Resources/public/js/c4g-overlay.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__ = __webpack_require__(/*! ./c4g-maps-config */ "./Resources/public/js/c4g-maps-config.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








var C4gBaselayerController = function () {
    function C4gBaselayerController(proxy) {
        _classCallCheck(this, C4gBaselayerController);

        this.proxy = proxy;
        this.mapController = proxy.options.mapController;
        this.arrBaselayers = {};
        this.baselayerIds = [];
    }

    _createClass(C4gBaselayerController, [{
        key: "loadBaseLayers",
        value: function loadBaseLayers() {
            var self;

            self = this;

            jQuery.ajax(this.proxy.api_baselayer_url, {
                dataType: this.mapController.data.jsonp ? "jsonp" : "json"
            }).done(function (data) {
                if (data.baselayer) {
                    self.addBaseLayers(data.baselayer);
                }
                return true;
            }).fail(function () {
                // @TODO error-messages
                //   1) Visible message 4 users (i18n)
                //   2) Technical console.warn
                console.warn('An error occured while trying to load the baselayers. Do you have configured a default profile with baselayers?');
                self.mapController.spinner.hide();
                return false;
            }).always(function () {
                //self.mapController.spinner.hide();
            });
        } // end of "loadBaseLayers()"

    }, {
        key: "addBaseLayers",
        value: function addBaseLayers(baselayers) {
            var baselayer, uid, i, j;

            // sort baselayer (for internal list)
            baselayers.sort(function (a, b) {
                if (!a.sort && !b.sort || parseInt(a.sort, 10) === parseInt(b.sort, 10)) {
                    if (!a.name || !b.name) {
                        return !b.name ? -1 : 1;
                    }
                    return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;
                }
                if (!a.sort || !b.sort) {
                    return !b.sort ? -1 : 1;
                }
                return parseInt(a.sort, 10) > parseInt(b.sort, 10) ? 1 : -1;
            });

            // build baselayer-list
            if (baselayers.length > 0) {
                for (i = 0; i < baselayers.length; i += 1) {

                    baselayer = baselayers[i];

                    uid = baselayer.id || __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].getUniqueId();
                    this.baselayerIds.push(uid);
                    if (!this.arrBaselayers[uid]) {
                        this.arrBaselayers[uid] = new __WEBPACK_IMPORTED_MODULE_0__c4g_baselayer__["a" /* C4gBaselayer */](baselayer, this);
                    }

                    // @TODO: check initial baselayer-handling
                    if (this.mapController.data.baselayer && parseInt(uid, 10) === parseInt(this.mapController.data.baselayer, 10)) {
                        this.showBaseLayer(uid);
                    }

                    if (this.arrBaselayers[uid].hasOverlays) {
                        for (j = 0; j < this.arrBaselayers[uid].overlays.length; j++) {
                            if (!this.arrBaselayers[uid].overlayController.arrOverlays[this.arrBaselayers[uid].overlays[j].id]) {
                                this.arrBaselayers[uid].overlayController.arrOverlays[this.arrBaselayers[uid].overlays[j].id] = new __WEBPACK_IMPORTED_MODULE_1__c4g_overlay__["a" /* C4gOverlay */](this.arrBaselayers[uid].overlays[j], this.mapController);
                                this.arrBaselayers[uid].overlayController.arrOverlays[this.arrBaselayers[uid].overlays[j].id].layer = this.arrBaselayers[uid].overlayController.showOverlayLayer(this.arrBaselayers[uid].overlays[j].id);
                            }
                        }
                    }
                }
            }

            if (!this.activeBaselayerId) {
                // no baselayer was activated
                if (baselayers.length > 0 && baselayers[0].id) {
                    // take first baselayer if possible
                    uid = baselayers[0].id;
                } else {
                    // otherwise build default baselayer
                    uid = 0;
                    this.baselayerIds.push(uid);
                    if (!this.arrBaselayers[uid]) {
                        this.arrBaselayers[uid] = {
                            id: 0,
                            name: 'c4g_default',
                            provider: 'osm',
                            style: 'Mapnik'
                        };
                    }
                }
                this.showBaseLayer(uid);
            }
            this.proxy.baselayers_loaded = true;

            __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_baselayer_loaded, this.baselayerIds);
        } // end of "addBaseLayers()"

    }, {
        key: "createBaseLayer",
        value: function createBaseLayer(layerOptions, baseLayerConfig, sourceConfigs) {
            var newBaselayer;
            layerOptions = layerOptions || {};
            switch (baseLayerConfig.provider) {
                case 'custom':
                    // custom
                    var noUrl = true;
                    if (baseLayerConfig.url) {
                        layerOptions.url = baseLayerConfig.url;
                        noUrl = false;
                    } else if (baseLayerConfig.urls) {
                        layerOptions.urls = baseLayerConfig.urls;
                        noUrl = false;
                    }
                    if (!noUrl) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ(layerOptions),
                            extent: baseLayerConfig.extend
                        });
                    } else {
                        console.warn('custom url(s) missing -> switch to default');
                    }
                case 'osm':
                    if (sourceConfigs.osm[baseLayerConfig.style]) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.OSM($.extend(sourceConfigs.osm[baseLayerConfig.style], layerOptions))
                        });
                    } else if (sourceConfigs.stamen[baseLayerConfig.style]) {
                        // Stamen
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.Stamen($.extend(sourceConfigs.stamen[baseLayerConfig.style], layerOptions))
                        });
                        // } else if (mapQuestSourceConfigs[baseLayerConfig.style]) {
                        //   // mapQuest
                        //   newBaselayer = new ol.layer.Tile({
                        //     source: new ol.source.MapQuest(mapQuestSourceConfigs[baseLayerConfig.style])
                        //   });
                    } else if (baseLayerConfig.style === 'osm_custom') {
                        // custom
                        var _noUrl = true;
                        if (baseLayerConfig.url) {
                            layerOptions.url = baseLayerConfig.url;
                            _noUrl = false;
                        } else if (baseLayerConfig.urls) {
                            layerOptions.urls = baseLayerConfig.urls;
                            _noUrl = false;
                        }
                        if (!_noUrl) {
                            newBaselayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(layerOptions)
                            });
                        } else {
                            console.warn('custom url(s) missing -> switch to default');
                        }
                    } else {
                        console.warn('unsupported osm-style -> switch to default');
                    }
                    break;
                case 'mapbox':
                    if (baseLayerConfig.api_key && baseLayerConfig.app_id && baseLayerConfig.mapbox_type) {

                        if (baseLayerConfig.mapbox_type === 'Mapbox') {
                            layerOptions.url = baseLayerConfig.url + baseLayerConfig.app_id + '/tiles/{z}/{x}/{y}?access_token=' + baseLayerConfig.api_key;
                            newBaselayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions))
                            });
                        } else {
                            layerOptions.url = baseLayerConfig.url_classic + baseLayerConfig.app_id + '/{z}/{x}/{y}.png?access_token=' + baseLayerConfig.api_key;

                            newBaselayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions))
                            });
                        }
                    } else if (baseLayerConfig.hide_in_be) {
                        layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ($.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions))
                        });
                    } else {
                        console.warn('wrong mapbox configuration!');
                    }
                    break;
                case 'klokan':
                    if (baseLayerConfig.api_key && baseLayerConfig.klokan_type) {

                        if (baseLayerConfig.klokan_type === 'OpenMapTiles') {
                            layerOptions.url = baseLayerConfig.url + '{z}/{x}/{y}.pbf';
                            newBaselayer = new ol.layer.VectorTile({
                                source: new ol.source.VectorTile(jQuery.extend(sourceConfigs.klokan[baseLayerConfig.klokan_type], layerOptions))
                            });

                            //ToDo style url
                            fetch(baseLayerConfig.url + '/styles/' + baseLayerConfig.style + '/style.json').then(function (response) {
                                response.json().then(function (glStyle) {
                                    olms.applyStyle(newBaselayer, glStyle, 'openmaptiles');
                                });
                            });
                        } else {
                            layerOptions.url = baseLayerConfig.url + '/data/v3/{z}/{x}/{y}.pbf?key=' + baseLayerConfig.api_key;
                            newBaselayer = new ol.layer.VectorTile({
                                source: new ol.source.VectorTile(jQuery.extend(sourceConfigs.klokan[baseLayerConfig.klokan_type], layerOptions))
                            });

                            fetch(baseLayerConfig.url + '/styles/' + baseLayerConfig.style + '/style.json?key=' + baseLayerConfig.api_key).then(function (response) {
                                response.json().then(function (glStyle) {
                                    olms.applyStyle(newBaselayer, glStyle, 'openmaptiles');
                                });
                            });
                        }
                    } else {
                        console.warn('wrong klokan configuration!');
                    }
                    break;
                case 'here':
                    if (baseLayerConfig.api_key && baseLayerConfig.app_id && baseLayerConfig.here_type) {

                        if (baseLayerConfig.style == 'normal') {
                            layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/normal.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'transit') {
                            layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/normal.day.transit/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'pedestrian') {
                            layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/pedestrian.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'terrain') {
                            layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/terrain.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'satellite') {
                            layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/satellite.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'hybrid') {
                            layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/hybrid.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        }

                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ($.extend(sourceConfigs.here[baseLayerConfig.here_type], layerOptions))
                        });
                    } else if (baseLayerConfig.hide_in_be) {
                        layerOptions.url = layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ($.extend(sourceConfigs.mapbox[baseLayerConfig.here_type], layerOptions))
                        });
                    } else {
                        console.warn('wrong HERE configuration!');
                    }
                    break;
                case 'thunder':
                    if (baseLayerConfig.api_key && baseLayerConfig.thunderforest_type) {

                        if (baseLayerConfig.style) {
                            layerOptions.url = "https://tile.thunderforest.com/" + baseLayerConfig.style + "/{z}/{x}/{y}.png?apikey=" + baseLayerConfig.api_key;
                        }

                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ(jQuery.extend(sourceConfigs.thunderforest[baseLayerConfig.thunderforest_type], layerOptions))
                        });
                    } else if (baseLayerConfig.hide_in_be) {
                        layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.thunderforest_type], layerOptions))
                        });
                    } else {
                        console.warn('wrong Thunderforest configuration!');
                    }
                    break;
                case 'google':
                    //@todo
                    console.warn('google-maps are currently unsupported');
                    break;
                case 'bing':
                    if (baseLayerConfig.api_key && baseLayerConfig.style) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.BingMaps({
                                culture: navigator.languages ? navigator.languages[0] : navigator.language || navigator.userLanguage,
                                key: baseLayerConfig.api_key,
                                imagerySet: baseLayerConfig.style
                            })
                        });
                    } else {
                        console.warn('wrong bing-key or invalid imagery-set!');
                    }
                    break;
                case 'wms':
                    if (baseLayerConfig.url.indexOf('https') !== -1) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.TileWMS({
                                url: baseLayerConfig.url,
                                params: {
                                    LAYERS: baseLayerConfig.params.layers,
                                    VERSION: baseLayerConfig.params.version,
                                    //FORMAT: baseLayerConfig.params.format,
                                    TRANSPARENT: baseLayerConfig.params.transparent
                                },
                                gutter: baseLayerConfig.gutter,
                                attributions: baseLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION,
                                crossOrigin: 'anonymous'
                            })
                            //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                        });
                    } else {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.TileWMS({
                                url: baseLayerConfig.url,
                                params: {
                                    LAYERS: baseLayerConfig.params.layers,
                                    VERSION: baseLayerConfig.params.version,
                                    //FORMAT: baseLayerConfig.params.format,
                                    TRANSPARENT: baseLayerConfig.params.transparent
                                },
                                gutter: baseLayerConfig.gutter,
                                attributions: baseLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                            })
                            //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                        });
                    }

                    break;
                case 'owm':
                    newBaselayer = new ol.layer.Tile({
                        source: new ol.source.XYZ({
                            url: baseLayerConfig.url + baseLayerConfig.app_id + '/{z}/{x}/{y}?hash=' + baseLayerConfig.api_key,
                            attributions: baseLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                        })
                        //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                    });
                    break;
                case 'group':
                    var baseLayerGroup = [];
                    for (var index in baseLayerConfig['layerGroup']) {
                        if (baseLayerConfig['layerGroup'].hasOwnProperty(index)) {

                            var element = this.createBaseLayer(null, baseLayerConfig['layerGroup'][index], sourceConfigs);
                            var maxZoom = this.proxy.options.mapController.map.getView().getResolutionForZoom(baseLayerConfig['layerGroup'][index]['minZoom']);
                            var minZoom = this.proxy.options.mapController.map.getView().getResolutionForZoom(baseLayerConfig['layerGroup'][index]['maxZoom']);
                            element.setMinResolution(minZoom);
                            element.setMaxResolution(maxZoom);
                            baseLayerGroup.push(element);
                        }
                    }
                    newBaselayer = new ol.layer.Group({
                        layers: baseLayerGroup
                    });
                    break;

                default:
                    console.warn('unsupported provider');
                    break;
            }
            return newBaselayer;
        }
    }, {
        key: "showBaseLayer",
        value: function showBaseLayer(baseLayerUid) {

            var self = this,
                layers = void 0,
                baselayer = void 0,
                addBaselayer = void 0,
                baseLayers = void 0,
                sourceConfigs = [],
                newBaselayer = void 0,
                layerOptions = void 0,
                i = void 0,
                view = void 0;

            var baseLayerConfig = this.arrBaselayers[baseLayerUid];

            if (typeof baseLayerConfig !== "undefined" && !baseLayerConfig.layer) {
                // create layer
                sourceConfigs.osm = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].osm;
                sourceConfigs.stamen = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].stamen;
                //mapQuestSourceConfigs = c4g.maps.config.mapquest;
                sourceConfigs.mapbox = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].mapbox;
                sourceConfigs.klokan = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].klokan;
                sourceConfigs.here = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].here;
                sourceConfigs.thunderforest = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].thunderforest;

                //newBaselayer = new ol.layer.Tile({
                //  source: new ol.source.OSM()
                //});

                layerOptions = {};

                if (baseLayerConfig.attribution) {
                    if (layerOptions.attributions) {
                        layerOptions.attributions = layerOptions.attributions + ' ' + baseLayerConfig.attribution;
                    } else {
                        layerOptions.attributions = ol.source.OSM.ATTRIBUTION + ' ' + baseLayerConfig.attribution;
                    }
                } else if (!layerOptions.attributions) {
                    switch (baseLayerConfig.provider) {
                        case 'osm':
                            if (sourceConfigs.stamen[baseLayerConfig.style]) {
                                layerOptions.attributions = sourceConfigs.stamen[baseLayerConfig.style].attributions;
                                /*
                                              } else if (mapQuestSourceConfigs[baseLayerConfig.style]) {
                                                layerOptions.attributions = mapQuestSourceConfigs[baseLayerConfig.style].attributions;
                                */
                            } else if (sourceConfigs.osm[baseLayerConfig.style]) {
                                layerOptions.attributions = sourceConfigs.osm[baseLayerConfig.style].attributions;
                            } else {
                                layerOptions.attributions = ol.source.OSM.ATTRIBUTION;
                            }
                            break;
                        case 'mapbox':
                            layerOptions.attributions = sourceConfigs.mapbox[baseLayerConfig.mapbox_type].attributions;
                            break;
                        case 'klokan':
                            layerOptions.attributions = sourceConfigs.klokan[baseLayerConfig.klokan_type].attributions;
                            break;
                        case 'here':
                            layerOptions.attributions = sourceConfigs.here[baseLayerConfig.here_type].attributions;
                            break;
                        case 'thunder':
                            layerOptions.attributions = sourceConfigs.thunderforest[baseLayerConfig.thunderforest_type].attributions;
                            break;
                        default:
                            layerOptions.attributions = ol.source.OSM.ATTRIBUTION;
                            break;
                    }
                }

                //ToDo helper class for attributions

                //additional attribution
                if (this.mapController.data && this.mapController.data.attribution && this.mapController.data.attribution.additional) {
                    if (layerOptions.attributions) {
                        var additionalAttribution = this.mapController.data.attribution.additional;

                        exists = false;
                        for (i = 0; i < layerOptions.attributions.length; i += 1) {
                            if (layerOptions.attributions[i] == additionalAttribution) {
                                exists = true;
                                break;
                            }
                        }

                        if (!exists) {
                            layerOptions.attributions = layerOptions.attributions + ' ' + additionalAttribution;
                        }
                    } else {
                        layerOptions.attributions = this.mapController.data.attribution.additional;
                    }
                }

                //ToDo type class for geosearch_engine
                //geosearch attribution
                var geosearch_attribution = '';
                if (this.mapController.data.geosearch) {
                    var geosearch_engine = this.mapController.data.geosearch.geosearch_engine;

                    if (this.mapController.data && this.mapController.data.attribution) {

                        switch (geosearch_engine) {
                            case '4':
                                geosearch_attribution = ''; //con4gis mapservices
                                break;
                            case '3':
                                if (this.mapController.data.geosearch.custom_attribution) {
                                    geosearch_attribution = this.mapController.data.geosearch.custom_attribution;
                                }
                                break;
                            case '2':
                                geosearch_attribution = 'Nominatim Search Courtesy of <a href="http://www.mapquest.com/" target="_blank">MapQuest</a> <img src="http://developer.mapquest.com/content/osm/mq_logo.png" alt="" />';
                                break;
                            case '1':
                            default:
                                geosearch_attribution = 'Nominatim Search Courtesy of <a href="http://wiki.openstreetmap.org/wiki/Nominatim_usage_policy" target="_blank">OpenStreetMap</a>';
                                break;
                        }

                        var geosearchAttribution = geosearch_attribution;

                        var exists = false;
                        if (!layerOptions.attributions) {
                            layerOptions.attributions = [];
                        }
                        for (i = 0; i < layerOptions.attributions.length; i += 1) {
                            if (layerOptions.attributions[i] == geosearchAttribution) {
                                exists = true;
                                break;
                            }
                        }

                        if (!exists) {
                            layerOptions.attributions = layerOptions.attributions + ' ' + geosearchAttribution;
                        } else {
                            layerOptions.attributions = geosearchAttribution;
                        }
                    }
                }

                if (baseLayerConfig.sorting) {
                    layerOptions.sort = baseLayerConfig.sorting;
                }
                if (baseLayerConfig.minZoom && baseLayerConfig.minZoom >= 0) {
                    layerOptions.minZoom = baseLayerConfig.minZoom;
                }
                if (baseLayerConfig.maxZoom && baseLayerConfig.maxZoom >= 0) {
                    layerOptions.maxZoom = baseLayerConfig.maxZoom;
                }

                newBaselayer = this.createBaseLayer(layerOptions, baseLayerConfig, sourceConfigs);
                if (baseLayerConfig.hasOverlays) {
                    for (i = 0; i < baseLayerConfig.overlays.length; i++) {
                        if (!baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id]) {
                            baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id] = new __WEBPACK_IMPORTED_MODULE_1__c4g_overlay__["a" /* C4gOverlay */](baseLayerConfig.overlays[i], this.mapController);
                            baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id].layer = baseLayerConfig.overlayController.showOverlayLayer(baseLayerConfig.overlays[i].id);
                        }
                    }
                }
                // if (baseLayerConfig.hasOverlays) {
                //
                //     for (i = 0; i < baseLayerConfig.overlays.length; i += 1) {
                //         if(!c4g.maps.overlays){
                //             c4g.maps.overlays = [];
                //         }
                //         c4g.maps.overlays[baseLayerConfig.overlays[i].id] = baseLayerConfig.overlays[i];
                //         if(this.mapController.data.baselayer && parseInt(baseLayerConfig.id, 10) === parseInt(this.proxy.activeBaselayerId, 10)) {
                //             self.mapController.map.addLayer(self.showOverlayLayer(baseLayerConfig.overlays[i].id));
                //         }
                //     }
                //
                // }

                this.arrBaselayers[baseLayerUid].layer = newBaselayer;
            }

            layers = this.mapController.map.getLayers();

            // secure
            if (layers.item(0).get('checkSum') === "baseMapsLayer") {
                baseLayers = layers.item(0).getLayers();

                if (typeof this.arrBaselayers[baseLayerUid] !== "undefined") {
                    baselayer = this.arrBaselayers[baseLayerUid].layer;

                    if (baselayer) {
                        addBaselayer = true;
                        baseLayers.forEach(function (element, index, array) {
                            if (element && element === baselayer) {
                                element.setVisible(true);
                                addBaselayer = false;
                            } else if (element) {
                                element.setVisible(false);
                            } else {
                                addBaselayer = false;
                            }
                        }, this);

                        if (addBaselayer) {
                            baseLayers.push(baselayer);
                        }
                    }

                    view = this.mapController.map.getView();
                    var zoom = view.getZoom();
                    var center = view.getCenter();
                    if (baseLayerConfig.minZoom && baseLayerConfig.minZoom >= 0 || baseLayerConfig.maxZoom && baseLayerConfig.maxZoom >= 0) {
                        if (baseLayerConfig.minZoom && view.getZoom() < baseLayerConfig.minZoom) {
                            view.setZoom(baseLayerConfig.minZoom);
                        } else if (baseLayerConfig.maxZoom && view.getZoom() > baseLayerConfig.maxZoom) {
                            view.setZoom(baseLayerConfig.maxZoom);
                        }

                        var mapData = this.mapController.data;
                        if (mapData.zoomlevel || mapData.mouseposition) {
                            var controlContainerTopLeft = document.createElement('div');
                            controlContainerTopLeft.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TL + ' ' + __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
                            this.mapController.$overlaycontainer_stopevent.prepend(controlContainerTopLeft);

                            var controlContainerBottomLeft = document.createElement('div');
                            controlContainerBottomLeft.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL + ' ' + __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
                            $(controlContainerTopLeft).after(controlContainerBottomLeft);
                            this.mapController.leftSlideElements.push(controlContainerBottomLeft);

                            var controlContainerBottomLeftSub = document.createElement('div');
                            controlContainerBottomLeftSub.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL_SUB + ' ' + __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;

                            var newView = new ol.View({
                                center: center,
                                projection: view.getProjection(),
                                zoom: zoom,
                                minZoom: parseInt(baseLayerConfig.minZoom, 10) || 0,
                                maxZoom: parseInt(baseLayerConfig.maxZoom, 10) || 19,
                                rotation: view.getRotation(),
                                resolution: view.getResolution()
                            });

                            this.mapController.map.setView(newView);
                            __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].redrawMapView(this.mapController);

                            // if (mapData.scaleline) {
                            //   this.mapController.map.removeControl(this.mapController.controls.scaleline);
                            //   this.mapController.controls.scaleline = new ol.control.ScaleLine({
                            //     mapView: this.mapController.map.getView(),
                            //     target: controlContainerBottomLeft,
                            //     undefinedHTML: 'N/A'
                            //   });
                            //   this.mapController.map.addControl(this.mapController.controls.scaleline);
                            // }
                            //
                            // $(controlContainerBottomLeft).append(controlContainerBottomLeftSub);
                            //
                            // if (mapData.zoomlevel) {
                            //   this.mapController.map.removeControl(this.mapController.controls.zoomlevel);
                            //   this.mapController.controls.zoomlevel = new c4g.maps.control.Zoomlevel({
                            //     mapView: this.mapController.map.getView(),
                            //     target: controlContainerBottomLeftSub,
                            //     undefinedHTML: 'N/A'
                            //   });
                            //   this.mapController.map.addControl(this.mapController.controls.zoomlevel);
                            // }
                            //
                            // if (mapData.mouseposition) {
                            //   this.mapController.map.removeControl(this.mapController.controls.mouseposition);
                            //   this.mapController.controls.mouseposition = new ol.control.MousePosition({
                            //     projection: 'EPSG:4326',
                            //     coordinateFormat: ol.coordinate.toStringHDMS,
                            //     target: controlContainerBottomLeftSub,
                            //     undefinedHTML: 'N/A'
                            //   });
                            //   this.mapController.map.addControl(this.mapController.controls.mouseposition);
                            // }
                        }
                    }
                }
            }

            if (typeof baseLayerConfig !== "undefined") {
                this.proxy.activeBaselayerId = baseLayerConfig.id;

                __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_baselayer_visibility, baseLayerConfig);

                /**
                 * Cesium integration
                 */
                if (typeof baseLayerConfig !== "undefined") {
                    var mapData = this.mapController.data;
                    if (mapData.cesium && mapData.cesium.enable && (mapData.cesium.always || baseLayerConfig.cesium)) {
                        if (!this.ol3d) {
                            this.ol3d = new olcs.OLCesium({
                                map: this.mapController.map,
                                createSynchronizers: false /*,
                                                           time() {
                                                           const val = timeElt.value;
                                                           if (ol3d.getCesiumScene().globe.enableLighting && val) {
                                                           const d = new Date();
                                                           d.setUTCHours(val);
                                                           return Cesium.JulianDate.fromDate(d);
                                                           }
                                                           return Cesium.JulianDate.now();
                                                           }*/ });
                        }
                        /*const scene = ol3d.getCesiumScene();
                        const terrainProvider = new Cesium.CesiumTerrainProvider({
                            url: '//assets.agi.com/stk-terrain/world',
                            requestVertexNormals: true
                        });
                        scene.terrainProvider = terrainProvider;*/
                        this.ol3d.setEnabled(true);
                        /*window['toggleTime'] = function() {
                            scene.globe.enableLighting = !scene.globe.enableLighting;
                            if (timeElt.style.display == 'none') {
                                timeElt.style.display = 'inline-block';
                            } else {
                                timeElt.style.display = 'none';
                            }
                        };*/
                    } else {
                        if (this.ol3d && this.ol3d.getEnabled()) {
                            this.ol3d.setEnabled(false);
                            __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].redrawMapView(this.mapController);
                        }
                    }
                }
            }
        } // end of "showBaseLayer()"

    }]);

    return C4gBaselayerController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-baselayer.js":
/*!**********************************************!*\
  !*** ./Resources/public/js/c4g-baselayer.js ***!
  \**********************************************/
/*! exports provided: C4gBaselayer */
/*! exports used: C4gBaselayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gBaselayer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_overlay_controller__ = __webpack_require__(/*! ./c4g-overlay-controller */ "./Resources/public/js/c4g-overlay-controller.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var C4gBaselayer = function C4gBaselayer(baselayerArr, controller) {
    _classCallCheck(this, C4gBaselayer);

    this.id = baselayerArr['id'];
    this.pid = baselayerArr['pid'];
    this.name = baselayerArr['name'];
    this.display_name = baselayerArr['display_name'];
    this.provider = baselayerArr['provider'];
    this.osm_style = baselayerArr['osm_style'];
    this.osm_style_url1 = baselayerArr['osm_style_url1'];
    this.osm_style_url2 = baselayerArr['osm_style_url2'];
    this.osm_style_url3 = baselayerArr['osm_style_url3'];
    this.osm_style_url4 = baselayerArr['osm_style_url4'];
    this.osm_keyname = baselayerArr['osm_keyname'];
    this.mapbox_type = baselayerArr['mapbox_type'];
    this.bing_style = baselayerArr['bing_style'];
    this.style = baselayerArr['style'];
    this.attribution = baselayerArr['attribution'];
    this.params = baselayerArr['params'];
    this.wms_gutter = baselayerArr['wms_gutter'];
    this.minZoom = baselayerArr['minZoom'];
    this.maxZoom = baselayerArr['maxZoom'];
    this.protect_baselayer = baselayerArr['protect_baselayer'];
    this.permitted_groups = baselayerArr['permitted_groups'];
    this.api_key = baselayerArr['apiKey'] ? baselayerArr['apiKey'] : baselayerArr['api_key'];
    this.app_id = baselayerArr['app_id'];
    this.thunderforest_type = baselayerArr['thunderforest_type'];
    this.here_type = baselayerArr['here_type'];
    this.cesium = baselayerArr['cesium'];
    this.hide_in_be = baselayerArr['hide_in_be'];
    this.url = baselayerArr['url'];
    this.urls = baselayerArr['urls'];
    this.klokan_type = baselayerArr['klokan_type'];
    this.style_url = baselayerArr['style_url'];
    this.hasOverlays = baselayerArr['hasOverlays'];
    this.overlays = baselayerArr['overlays'];
    if (baselayerArr['layerGroup']) {
        var layerGroup = [];
        for (var index in baselayerArr['layerGroup']) {
            if (baselayerArr['layerGroup'].hasOwnProperty(index)) {
                layerGroup[index] = new C4gBaselayer(baselayerArr['layerGroup'][index]['entry']);
                layerGroup[index]['minZoom'] = baselayerArr['layerGroup'][index]['minZoom'];
                layerGroup[index]['maxZoom'] = baselayerArr['layerGroup'][index]['maxZoom'];
            }
        }
        this.layerGroup = layerGroup;
    }
    this.overlayController = new __WEBPACK_IMPORTED_MODULE_0__c4g_overlay_controller__["a" /* C4gOverlayController */](this);
    this.layer = false;
    this.controller = controller;
};

/***/ }),

/***/ "./Resources/public/js/c4g-layer-controller.js":
/*!*****************************************************!*\
  !*** ./Resources/public/js/c4g-layer-controller.js ***!
  \*****************************************************/
/*! exports provided: C4gLayerController */
/*! exports used: C4gLayerController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLayerController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_layer__ = __webpack_require__(/*! ./c4g-layer */ "./Resources/public/js/c4g-layer.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var c4g = this.c4g;

var C4gLayerController = function () {
  function C4gLayerController(proxy) {
    _classCallCheck(this, C4gLayerController);

    this.proxy = proxy;
    this.mapController = proxy.options.mapController;
    this.arrLayers = {};
    this.layerRequests = {};
  }

  _createClass(C4gLayerController, [{
    key: "loadLayers",
    value: function loadLayers() {
      var self = this;
      if (this.mapId === 0) {
        return false;
      }

      //jQuery.ajax("maps/layerService",{//this.proxy.api_layer_url,{
      jQuery.ajax(this.proxy.api_layer_url, {
        dataType: this.mapController.data.jsonp ? "jsonp" : "json"

      }).done(function (data) {
        self.addLayers(data.layer, data.foreignLayers);
        self.proxy.layers_loaded = true;
        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.proxy.hook_layer_loaded, self.proxy.layerIds);
        // utils.callHookFunctions(c4g.maps.hook.proxy_layer_loaded, {layerIds: self.proxy.layerIds, proxy: self.proxy});
        self.proxy.checkLocationStyles({
          done: function done() {
            self.drawLayerInitial();
          }
        });
        return true;
      }).fail(function () {
        // @TODO: error-messages
        //   1) Visible message 4 users (i18n)
        //   2) Technical console.warn
        console.warn('An error occured while trying to load the layers...');
        return false;
      }).always(function () {
        // this.proxy.starboard.spinner.hide();
      });
    } // end of "loadLayer()"

  }, {
    key: "addLayers",
    value: function addLayers(layers, foreignLayers) {
      var i, j, k, p, isVisible, layer, storedItem, linkItems, uid, currentZoom, fnHandleAndAppendLayerChilds, endlessLoopId, parentId, parentIds, permalinkedLayers, child, _fnHandleChilds, key, starboard, fnAddToHook;

      var self = this;
      isVisible = false;

      permalinkedLayers = this.mapController.data.layers || [];

      fnHandleAndAppendLayerChilds = function fnHandleAndAppendLayerChilds(objItem) {
        var toggle, entryWrapper;

        if (objItem.hasChilds) {
          objItem.visibleChilds = self.addLayers(objItem.childs, foreignLayers);
        }
      }; // end of "fnHandleAndAppendLayerChilds()"

      // wrapper function to avoid closure accessibility
      fnAddToHook = function fnAddToHook(layer) {
        var layername, layerid, layericon;

        if (layer.childs && layer.childs.length > 0) {
          layername = layer.name;
          layerid = layer.tabId;
          layericon = layer.awesomeicon;
          c4g.maps.starboardTabs = c4g.maps.starboardTabs || {};
          starboard = self.proxy.options.mapController.controls.starboard;
          starboard.hook_layerswitcher_loaded.push(function () {
            c4g.maps.starboardTabs[layerid] = new c4g.maps.control.starboardplugin.Customtab(starboard, {
              name: layername,
              tabId: layerid,
              awesomeicon: layericon
            });
          });
        }
      };

      if (layers && layers.length > 0) {
        for (i = 0; i < layers.length; i += 1) {
          if (this.arrLayers[layers[i].id]) {
            layer = this.arrLayers[layers[i].id];
          } else {
            layer = new __WEBPACK_IMPORTED_MODULE_0__c4g_layer__["a" /* C4gLayer */](layers[i]); //layers[i];
          }

          linkItems = false;
          //console.log(layer);
          if (_typeof(layer.content) === "object") {
            layer.content = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].objectToArray(layer.content);
          }

          // endless-loop prevention
          //
          parentId = layer.pid;
          parentIds = {};
          // build parent-ids chain
          while (self.arrLayers[parentId]) {
            if (parentIds[parentId]) {
              console.warn('Caught endless-loop (ID: ' + layer.id + ')');
              break;
            }
            parentIds[parentId] = true;
            parentId = this.arrLayers[parentId].pid;
          }

          if (layer.content && layer.content[0] && layer.content[0].cssClass) {
            layer.cssClass = layer.content[0].cssClass;
          }

          if (!parentIds[parentId]) {

            // prepare layer data if they are a new starboard tab
            if (layer.type === "startab") {
              layer.editable = true;
              layer.renderSpecial = true;
              layer.tabId = layer.id;
              if (!layer.layername) {
                layer.display = true;
              }
              // iterate childs and tell them to not load in layerswitcher
              _fnHandleChilds = function fnHandleChilds(fLayer) {
                for (var count = 0; count < fLayer.childs.length; count++) {
                  var childArr = fLayer.childs[count];
                  childArr.editable = true;
                  childArr.tabId = fLayer.tabId;
                  childArr.renderSpecial = true;
                  if (self.arrLayers[childArr.id]) {
                    child = self.arrLayers[childArr.id];
                  } else {
                    child = new __WEBPACK_IMPORTED_MODULE_0__c4g_layer__["a" /* C4gLayer */](childArr); //layers[i];
                  }
                  // set renderSpecial to remove it from normal layerswitcher
                  self.arrLayers[child.id] = child;
                  fLayer.childs[count] = child;
                  if (child.hasChilds) {
                    // recursive call
                    _fnHandleChilds(child);
                  }
                }
              }; // end of fnHandleChilds

              if (layer.hasChilds) {
                _fnHandleChilds(layer);
              }
              fnAddToHook(layer);
            }

            uid = layer.id || __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getUniqueId();
            this.arrLayers[uid] = layer;
            if (this.proxy.checkLayerIsActiveForZoom(layer.id)) {
              layer.isInactive = false;
            } else {
              layer.isInactive = true;
            }

            this.proxy.layerIds.push(layer.id);

            if (layer.display) {
              isVisible = true;
              fnHandleAndAppendLayerChilds(layer);
            } else if (layer.pid && this.arrLayers[layer.pid]) {
              // set hide when layers are not displayed in the starboard
              layer.hide = this.arrLayers[layer.pid].hide;
            }

            var visible = false;
            if (permalinkedLayers.length > 0) {
              for (p = 0; p < permalinkedLayers.length; p += 1) {
                if (permalinkedLayers[p] == layer.id) {
                  visible = true;
                  break;
                }
              }
            }

            if (layer.hide !== "1" || visible) {
              this.proxy.activeLayerIds[layer.id] = 'invisible';
            }
          }
        } // end of for-loop

        // wrapperElement.appendChild(wrapper);
      }

      return isVisible;
    } // end of "addLayers()"

  }, {
    key: "loadLayerContent",
    value: function loadLayerContent(itemUid) {

      var self = this,
          i,
          layers,
          features,
          featureProjection,
          dataProjection,
          layerGroup,
          contentData,
          requestData,
          requestContentData,
          requestVectorSource,
          vectorLayer,
          vectorSource,
          vectorStyle,
          clusterSource,
          styleForCluster,
          refreshInterval,
          refreshAjaxVars,
          fnAttachDataToLayer;

      refreshAjaxVars = {};

      fnAttachDataToLayer = function fnAttachDataToLayer(layer, data) {
        data.properties = data.properties || {};

        layer.popup = data.popup || data.properties.popup || false;
        layer.tooltip = data.tooltip || data.properties.tooltip || false;
        layer.tooltip_length = data.tooltip_length || data.properties.tooltip_length || false;
        layer.label = data.label || data.properties.label || false;
        layer.zoom_onclick = data.zoom_onclick || data.properties.zoom_onclick || false;
      };

      if (this.arrLayers[itemUid].content) {
        layers = [];

        var contentFeatures = [];
        for (i = 0; i < this.arrLayers[itemUid].content.length; i += 1) {
          contentData = this.arrLayers[itemUid].content[i];
          styleForCluster = function styleForCluster(feature, resolution) {

            var size, style, fFeatures, iconOffset, radius, k, fillcolor, fontcolor;

            if (contentData && contentData.locationStyle && self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle]) {
              style = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style(feature, resolution);

              if (!style) {
                style = [];
                self.fittingExtends[itemUid] = vectorSource.getExtent();
              }

              if (feature !== undefined && feature !== null && feature.self !== window) {
                if (feature.get('features')) {
                  fFeatures = feature.get('features');
                } else {
                  fFeatures = [];
                  fFeatures[0] = feature;
                }
                size = fFeatures.length;
                if (size > 1) {
                  if (fFeatures[0].getStyle() && size < 1000) {
                    // limit for performance
                    style[0] = fFeatures[0].getStyle()[0];
                    for (k = 0; k < fFeatures.length; k += 1) {
                      if (!fFeatures[k].getStyle()) {
                        style = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style(fFeatures[0], resolution);
                        break;
                      }
                    }
                  } else {
                    style = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style(fFeatures[0], resolution);
                  }
                  if (!style) {
                    style = [];
                  }

                  // calculate bubble-offset
                  iconOffset = [0, 0];
                  if (style[0]) {
                    if (_typeof(style[0].getImage()) && style[0].getImage().getRadius && typeof style[0].getImage().getRadius === "function") {
                      radius = parseInt(style[0].getImage().getRadius(), 10);
                      if (radius) {
                        iconOffset = [0, radius];
                      }
                    } else if (style[0].getImage() && style[0].getImage().getAnchor && typeof style[0].getImage().getAnchor === "function") {
                      iconOffset = style[0].getImage().getAnchor() || [0, 0];
                    }
                  }

                  fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity('4975A8', {
                    unit: '%',
                    value: 70
                  });

                  if (contentData.cluster_fillcolor) {
                    fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fillcolor, {
                      unit: '%',
                      value: 70
                    });
                  }
                  fontcolor = '#FFFFFF';
                  if (contentData.cluster_fontcolor) {
                    fontcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fontcolor, {
                      unit: '%',
                      value: 100
                    });
                  }

                  style.push(new ol.style.Style({
                    text: new ol.style.Text({
                      text: "●",
                      font: "60px sans-serif",
                      offsetX: -1 * iconOffset[0],
                      offsetY: -1 * iconOffset[1],
                      fill: new ol.style.Fill({
                        color: fillcolor
                      })
                    })
                  }));
                  style.push(new ol.style.Style({
                    text: new ol.style.Text({
                      text: size.toString(),
                      offsetX: -1 * iconOffset[0],
                      offsetY: -1 * iconOffset[1] + 3,
                      fill: new ol.style.Fill({
                        color: fontcolor
                      })
                    })
                  }));
                } else if (size === 1 && fFeatures[0].getStyle()) {
                  return fFeatures[0].getStyle();
                }
              }
            }
            return style;
          }; // end of styleForCluster()

          if (contentData && contentData.type === "urlData") {

            requestData = {};
            requestData.url = contentData.data.url;
            if (contentData.data.params) {
              requestData.params = decodeURIComponent(contentData.data.params);
            }

            if (contentData.settings.boundingBox) {
              requestContentData = contentData;
              requestVectorSource = new ol.source.Vector({
                loader: function loader(extent, resolution, projection) {
                  var boundingArray, strBoundingBox, url;

                  boundingArray = ol.proj.transformExtent(extent, projection, 'EPSG:4326');
                  //different cases for Overpass_QL and old Overpass
                  if (requestData.params.substr(0, 1) == "<") {
                    strBoundingBox = '<bbox-query s="' + boundingArray[1] + '" n="' + boundingArray[3] + '" w="' + boundingArray[0] + '" e="' + boundingArray[2] + '"/>';
                  } else {
                    strBoundingBox = boundingArray[1] + ',' + boundingArray[0] + ',' + boundingArray[3] + ',' + boundingArray[2];
                  }

                  url = requestData.url;
                  var bboxTag = requestData.params.indexOf('(bbox)') >= 0 ? /\(bbox\)/g : /\{{bbox\}}/g;

                  if (requestData.params) {

                    url += '?data=' + encodeURIComponent(requestData.params.replace(bboxTag, strBoundingBox));
                  }

                  if (self.layerRequests === undefined) {
                    self.layerRequests = {};
                  }
                  if (self.layerRequests['layerRequest' + itemUid] !== undefined) {
                    self.layerRequests['layerRequest' + itemUid].abort();
                  }

                  self.layerRequests['layerRequest' + itemUid] = jQuery.ajax({
                    url: url
                  }).done(function (response) {
                    var j, format, feature, rFeatures, osmNodes, osmNds, nodeIdx, ndIdx, infoNodes, newTag, ref;

                    delete self.layerRequests['layerRequest' + itemUid];

                    // preprocessing the osm_xml to find relation-nodes with information
                    if (response && response.children && response.children[0]) {
                      // 1) find nodes with data
                      osmNodes = response.children[0].getElementsByTagName('node');
                      if (osmNodes) {
                        infoNodes = {};
                        for (nodeIdx in osmNodes) {
                          if (osmNodes.hasOwnProperty(nodeIdx) && osmNodes[nodeIdx] && osmNodes[nodeIdx].children && osmNodes[nodeIdx].children.length > 0) {
                            infoNodes[osmNodes[nodeIdx].getAttribute('id')] = osmNodes[nodeIdx];
                            // infoNodes[osmNodes[nodeIdx].getAttribute('id')] = nodeIdx;
                          }
                        }
                      }

                      // 2) check and handle relations
                      osmNds = response.children[0].getElementsByTagName('nd');
                      if (osmNds) {
                        for (ndIdx in osmNds) {
                          if (ndIdx) {
                            if (osmNds.hasOwnProperty(ndIdx) && osmNds[ndIdx]) {
                              try {

                                ref = osmNds[ndIdx].getAttribute('ref');
                                if (infoNodes && ref && infoNodes[ref]) {
                                  if (requestContentData && requestContentData.settings) {
                                    if (requestContentData.settings.showAdditionalGeometries) {
                                      // mark as additional information
                                      if (response) {
                                        newTag = response.createElement('tag');
                                        if (newTag && osmNds[ndIdx].parentElement && osmNds[ndIdx].parentElement.getAttribute('id')) {
                                          newTag.setAttribute('k', 'c4g_osm_ref');
                                          newTag.setAttribute('v', osmNds[ndIdx].parentElement.getAttribute('id'));
                                          infoNodes[ref].appendChild(newTag);
                                        }
                                      }
                                    } else {
                                      // remove additional information
                                      infoNodes[ref].innerHTML = '';
                                    }
                                  }
                                }
                              } catch (e) {
                                console.warn('Could not check and handle relations.');
                              }
                            }
                          }
                        }
                      }
                      // import osm_xml
                      format = new ol.format.OSMXML();
                      if (format && response) {
                        try {
                          rFeatures = format.readFeatures(response, { featureProjection: projection });
                        } catch (e) {
                          console.warn('Can not read feature.');
                          //console.log(e.stack);
                        }
                      }

                      // postprocessing features
                      if (rFeatures && rFeatures.length > 0) {
                        for (j = 0; j < rFeatures.length; j += 1) {

                          if (rFeatures[j].getGeometry().getType() === "Point") {
                            rFeatures[j].set('osm_type', 'node');
                          } else {
                            rFeatures[j].set('osm_type', 'way');
                          }
                          rFeatures[j].set('c4g_type', 'osm');
                          rFeatures[j].set('cluster_zoom', contentData.cluster_zoom);
                          rFeatures[j].set('cluster_popup', contentData.cluster_popup);
                          rFeatures[j].set('loc_linkurl', contentData.loc_linkurl);
                          rFeatures[j].set('hover_location', contentData.hover_location);
                          rFeatures[j].set('hover_style', contentData.hover_style);
                          rFeatures[j].set('zoom_onclick', contentData.data.zoom_onclick);
                          rFeatures[j].set('label', contentData.data.label);

                          if (requestContentData.settings.forceNodes) {
                            // convert tracks and areas to points
                            if (rFeatures[j].getGeometry().getType() === "Polygon") {
                              var _centerPoint = rFeatures[j].getGeometry().getInteriorPoint().getCoordinates();
                              rFeatures[j].setGeometry(new ol.geom.Point(_centerPoint));
                            } else if (rFeatures[j].getGeometry().getType() === "LineString") {
                              // @TODO: prüfen ob dies korrekter mittelpunkt ist
                              var lineExtent = rFeatures[j].getGeometry().getExtent();
                              centerPoint = ol.extent.getCenter(lineExtent);
                              rFeatures[j].setGeometry(new ol.geom.Point(centerPoint));
                            }
                          }
                          if (rFeatures[j].get('c4g_osm_ref')) {
                            // if (requestContentData.settings.showAdditionalGeometries) {
                            if (requestContentData.settings.additionalStyle) {
                              // @TODO: load and attach style
                            } else {
                              rFeatures[j].setStyle(c4g.maps.utils.reduceStyle(requestContentData.locationStyle));
                            }
                          }
                        }
                      }
                    } else if (response && response.elements) {
                      rFeatures = [];

                      var _loop = function _loop(elementId) {
                        var element = response.elements[elementId];

                        if (element.type == "node") {
                          if (!element.tags) {
                            //not a feature, but part of a way or relation
                            return "continue";
                          }
                          var point = new ol.geom.Point([element.lon, element.lat]).transform('EPSG:4326', 'EPSG:3857');
                          feature = new ol.Feature({
                            geometry: point,
                            id: element.id
                          });
                          feature.set('osm_type', 'node');
                        } else if (element.type == "way") {
                          var arrCoords = [];

                          var _loop2 = function _loop2(_i) {
                            var node = response.elements.find(function (objNode) {
                              return objNode.id === element.nodes[_i];
                            });
                            arrCoords.push([node.lon, node.lat]);
                          };

                          for (var _i = 0; _i < element.nodes.length; _i++) {
                            _loop2(_i);
                          }
                          if (arrCoords[0][0] == arrCoords[arrCoords.length - 1][0] && arrCoords[0][1] == arrCoords[arrCoords.length - 1][1]) {
                            //polygon
                            delete arrCoords[arrCoords.length - 1];
                            arrCoords.length = arrCoords.length - 1;
                            var polygon = new ol.geom.Polygon([arrCoords]);
                            polygon.transform('EPSG:4326', 'EPSG:3857');
                            if (requestContentData.settings.forceNodes) {
                              // convert tracks and areas to points
                              var _centerPoint2 = feature.getGeometry().getInteriorPoint().getCoordinates();
                              feature.setGeometry(new ol.geom.Point(_centerPoint2));
                            }
                            feature = new ol.Feature({
                              geometry: polygon,
                              id: element.id
                            });
                          } else {
                            //linestring
                            var lineString = new ol.geom.LineString([arrCoords]);
                            lineString.transform('EPSG:4326', 'EPSG:3857');
                            feature = new ol.Feature({
                              geometry: lineString,
                              id: element.id
                            });
                            if (requestContentData.settings.forceNodes) {
                              var _lineExtent = feature.getGeometry().getExtent();
                              centerPoint = ol.extent.getCenter(_lineExtent);
                              feature.setGeometry(new ol.geom.Point(centerPoint));
                            }
                          }
                          feature.set('osm_type', 'way');
                        }
                        feature.set('c4g_type', 'osm');
                        feature.set('cluster_zoom', contentData.cluster_zoom);
                        feature.set('cluster_popup', contentData.cluster_popup);
                        feature.set('loc_linkurl', contentData.loc_linkurl);
                        feature.set('hover_location', contentData.hover_location);
                        feature.set('hover_style', contentData.hover_style);
                        feature.set('zoom_onclick', contentData.data.zoom_onclick);
                        feature.set('label', contentData.data.label);
                        for (var tags in element.tags) {
                          feature.set(tags, element.tags[tags]);
                        }
                        rFeatures.push(feature);
                      };

                      for (var elementId = 0; elementId < response.elements.length; elementId++) {
                        var _ret = _loop(elementId);

                        if (_ret === "continue") continue;
                      }
                    }
                    try {
                      requestVectorSource.addFeatures(rFeatures);
                    } catch (e) {
                      console.warn('Could not add features to source. The "forceNodes"-option should be used.');
                    }
                    //self.combineLayers(self);
                  }); // end of AJAX
                },
                strategy: ol.loadingstrategy.bbox
              });

              vectorSource = requestVectorSource;
            } else {

              if (typeof ol.format[contentData.format] === "function") {

                //StaticVector
                vectorSource = new ol.source.Vector({
                  format: new ol.format[contentData.format](),
                  url: requestData.url,
                  projection: 'EPSG:3857',
                  strategy: ol.loadingstrategy.all
                });

                if (contentData.settings && contentData.settings.refresh === true) {
                  if (self.layerRequests === undefined) {
                    self.layerRequests = {};
                  }

                  refreshInterval = typeof contentData.settings.interval === 'number' ? contentData.settings.interval : 10000;
                  /* do it with better ajax-handling
                   self.layerRequests['layerRequest' + itemUid] = window.setInterval(function () {
                   vectorSource.clear();
                   }, refreshInterval);
                   */

                  // Anfang Einschub neue AJAX-Layer
                  refreshAjaxVars.blnHasPositionIds = false;
                  refreshAjaxVars.arrPositionIds = [];
                  refreshAjaxVars.objFeatures = {};

                  vectorSource.set('refreshInterval', refreshInterval);

                  vectorSource.set('refreshFunction', function () {

                    if (!vectorSource.get('hasIds')) {
                      vectorSource.forEachFeature(function (feature) {
                        if (feature.get('positionId')) {
                          refreshAjaxVars.blnHasPositionIds = true;
                          refreshAjaxVars.arrPositionIds.push(feature.get('positionId'));
                          refreshAjaxVars.objFeatures[feature.get('positionId')] = feature;
                        }
                      });
                      if (refreshAjaxVars.blnHasPositionIds) {
                        vectorSource.set('hasIds', true);
                      }
                    }

                    jQuery.ajax({
                      url: requestData.url,
                      done: function done(data) {

                        if (data.renewableResponse) {
                          // update of stations
                          jQuery.each(data.features, function (index, featureData) {
                            if (featureData.type && featureData.type === "Feature") {
                              var feature = new ol.format[contentData.format]().readFeature(featureData, {
                                dataProjection: 'EPSG:4326',
                                featureProjection: 'EPSG:3857'
                              });
                              var layer = self.arrLayers[featureData.properties.id];
                              var popupContent = featureData.properties.popup;
                              layer.vectorLayer.getLayers().forEach(function (element, index, array) {
                                if (!self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId]) {
                                  self.proxy.locationStyleController.loadLocationStyles([featureData.properties.styleId], { done: function done() {
                                      element.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                                    } });
                                } else {
                                  element.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                                }
                                element.getSource().forEachFeature(function (nestedFeature) {
                                  nestedFeature.set('popup', popupContent);
                                });
                              });
                              layer.content[0].locationStyle = featureData.properties.styleId;

                              if (!self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId]) {
                                self.proxy.locationStyleController.loadLocationStyles([featureData.properties.styleId], { done: function done() {
                                    feature.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                                  } });
                              } else {
                                feature.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                              }

                              if (self.proxy.activeLayerIds[layer.id]) {
                                self.hideLayer(layer.id);
                                self.showLayer(layer.id);
                              }
                              // vectorSource.addFeature(feature);
                            }
                          });
                        }

                        if (data.features) {

                          refreshAjaxVars.arrNewPositionIds = [];
                          refreshAjaxVars.objNewFeatures = {};

                          jQuery.each(data.features, function (index, featureData) {
                            if (featureData.type && featureData.type == "Feature") {
                              refreshAjaxVars.feature = new ol.format[contentData.format]().readFeature(featureData, {
                                dataProjection: 'EPSG:4326',
                                featureProjection: 'EPSG:3857'
                              });
                              refreshAjaxVars.feature.set('cluster_zoom', contentData.cluster_zoom);
                              refreshAjaxVars.feature.set('loc_linkurl', contentData.loc_linkurl);
                              refreshAjaxVars.feature.set('hover_location', contentData.hover_location);
                              refreshAjaxVars.feature.set('hover_style', contentData.hover_style);
                              if (refreshAjaxVars.feature.get('positionId')) {
                                refreshAjaxVars.arrNewPositionIds.push(refreshAjaxVars.feature.get('positionId'));
                                refreshAjaxVars.objNewFeatures[refreshAjaxVars.feature.get('positionId')] = refreshAjaxVars.feature;
                              }
                            }
                          });

                          jQuery.each(refreshAjaxVars.arrPositionIds, function (index, positionId) {
                            if (refreshAjaxVars.arrNewPositionIds.indexOf(positionId) == -1) {
                              // positions id in neuer antwort nicht mehr enthalten -> lösche feature
                              if (typeof refreshAjaxVars.objFeatures[positionId] !== "undefined") {
                                vectorSource.removeFeature(refreshAjaxVars.objFeatures[positionId]);
                                delete refreshAjaxVars.arrPositionIds[index];
                              }
                            }
                          });

                          jQuery.each(refreshAjaxVars.arrNewPositionIds, function (index, positionId) {
                            if (refreshAjaxVars.arrPositionIds.indexOf(positionId) == -1) {
                              // positions id ist noch nicht vorhanden -> neues feature
                              refreshAjaxVars.arrPositionIds.push(positionId);
                              refreshAjaxVars.objFeatures[positionId] = refreshAjaxVars.objNewFeatures[positionId];
                              vectorSource.addFeature(refreshAjaxVars.objNewFeatures[positionId]);
                            }
                          });
                        }
                      }
                    });
                  });

                  self.proxy.requestFunctions['request_' + itemUid] = {
                    'function': vectorSource.get('refreshFunction'),
                    'interval': refreshInterval
                  };

                  // Ende Einschub neue AJAX-Layer
                }
              } else {
                console.warn('Format type ' + contentData.format + ' in ol.format not found.');
              }
            }

            if (contentData.settings.cluster) {

              clusterSource = new ol.source.Cluster({
                distance: 40,
                //threshold: 2, //minimum element count
                source: vectorSource,
                zoom: contentData.cluster_zoom
              });
              //console.log(clusterSource);
              this.styleForCluster = styleForCluster;

              //vectorLayer = utils.getVectorLayer(clusterSource, styleForCluster);

              vectorLayer = new ol.layer.AnimatedCluster({ name: 'Cluster',
                source: clusterSource,
                // Use a style function for cluster symbolisation
                style: styleForCluster
              });
            } else {
              vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle] ? self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style : null);
            }

            /* Fit to extend */
            if (contentData.settings && contentData.settings.fitToExtend) {

              self.fittingExtends = self.fittingExtends || {};

              vectorSource.on('change', function () {

                // check currently stored id's
                for (i in self.fittingExtends) {
                  if (self.fittingExtends.hasOwnProperty(i)) {
                    if (typeof self.proxy.activeLayerIds[i] === "undefined" || self.proxy.activeLayerIds[0] == "invisible") {
                      delete self.fittingExtends[i];
                    }
                  }
                }

                self.fittingExtends[itemUid] = vectorSource.getExtent(); //vectorSource.getFeatures();
                __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].fitToExtents(self.fittingExtends, self.mapController.map);
              });
            }
            // end of fit to extend

            fnAttachDataToLayer(vectorLayer, contentData.data);
            layers.push(vectorLayer);
          } else if (this.arrLayers[itemUid].type === "table" || this.arrLayers[itemUid].type === "link") {
            var layerContent = this.arrLayers[itemUid].content;
            contentData = layerContent[0];
            if (contentData && contentData.data.properties && contentData.data.properties.projection) {
              dataProjection = contentData.data.properties.projection;
              featureProjection = this.mapController.map.getView().getProjection();
            } else {
              dataProjection = undefined;
            }

            // force all nodes into one layer


            var contentFeature = new ol.format[layerContent[i].format]({}).readFeatures(layerContent[i].data, {
              featureProjection: featureProjection,
              dataProjection: dataProjection
            })[0];
            contentFeature.set('cluster_zoom', contentData.cluster_zoom);
            contentFeature.set('cluster_popup', contentData.cluster_popup);
            contentFeature.set('loc_linkurl', contentData.loc_linkurl);
            contentFeature.set('hover_location', contentData.hover_location);
            contentFeature.set('hover_style', contentData.hover_style);
            contentFeature.set('popup', layerContent[i].data.properties.popup);
            contentFeature.set('zoom_onclick', contentData.zoom_onclick);
            contentFeatures.push(contentFeature);

            if (i + 1 === this.arrLayers[itemUid].content.length) {
              vectorSource = new ol.source.Vector({
                features: contentFeatures,
                projection: 'EPSG:3857',
                format: new ol.format.GeoJSON()

              });
              if (contentData && contentData.settings && contentData.settings.cluster) {
                clusterSource = new ol.source.Cluster({
                  distance: 40,
                  zoom: contentData.cluster_zoom,

                  //threshold: 2, //minimum element count
                  source: vectorSource
                });
                //vectorLayer = utils.getVectorLayer(clusterSource, styleForCluster);

                vectorLayer = new ol.layer.AnimatedCluster({ name: 'Cluster',
                  source: clusterSource,
                  // Use a style function for cluster symbolisation
                  style: styleForCluster
                });
              } else {
                vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, contentData && self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle] ? self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style : null);
              }
              layers.push(vectorLayer);
            }
            //return;
          } else {
            if (this.arrLayers[itemUid].content.length > 1) {
              //TODO: refactoren und kürzen!
              // we have overpass request with reassigned forum layers
              // forum layers can not be drawn via the normal drawLayer, because they do not have a Uid
              if (contentData && typeof ol.format[contentData.format] === "function") {
                if (contentData.data.properties && contentData.data.properties.projection) {
                  dataProjection = contentData.data.properties.projection;
                  featureProjection = this.mapController.map.getView().getProjection();
                } else {
                  dataProjection = undefined;
                }

                features = new ol.format[contentData.format]({}).readFeatures(contentData.data, {
                  featureProjection: featureProjection,
                  dataProjection: dataProjection
                });

                var missingStyles = [];
                var unstyledFeatures = [];
                for (var j = 0; j < features.length; j += 1) {
                  if (features[j].get('styleId')) {
                    if (self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')] && self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style) {
                      features[j].setStyle(self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style);
                    } else {
                      missingStyles.push(features[j].get('styleId'));
                      unstyledFeatures.push(features[j]);
                    }
                  }
                }

                vectorStyle = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle] && self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style;

                if (missingStyles.length > 0) {
                  //TODO there are unstyled features because some styles were not loaded
                } else {
                  vectorSource = new ol.source.Vector({
                    features: features,
                    projection: 'EPSG:3857',
                    format: new ol.format.GeoJSON()
                  });
                  clusterSource = new ol.source.Cluster({
                    distance: 40,
                    zoom: contentData.cluster_zoom,

                    //threshold: 2, //minimum element count
                    source: vectorSource
                  });

                  vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(clusterSource, vectorStyle);
                  if (contentData.data && contentData.data.properties) {
                    if (contentData.data.properties.popup) {
                      vectorLayer.popup = contentData.data.properties.popup;
                    }
                    if (contentData.data.properties.tooltip) {
                      vectorLayer.tooltip = contentData.data.properties.tooltip;
                    }
                    if (contentData.data.properties.label) {
                      vectorLayer.label = contentData.data.properties.label;
                    }
                    if (contentData.data.properties.onclick_zoom) {
                      vectorLayer.onclick_zoom = contentData.data.properties.onclick_zoom;
                    }
                  }
                  layers.push(vectorLayer);
                }
              } else {
                if (contentData) {
                  console.warn('Format type ' + contentData.format + ' in ol.format not found.');
                } else {
                  //no contentData, maybe a link
                }
              }
            } else {
              // normal, not overpass layer
              self.drawLayer(itemUid);
              return;
            }
          }
        }

        // add vector layer group
        layerGroup = new ol.layer.Group({
          layers: layers
        });
        this.arrLayers[itemUid].vectorLayer = layerGroup;
        self.mapController.map.addLayer(layerGroup);
        //self.combine(self);
      } else if (this.arrLayers[itemUid].async_content == 1) {
        styleForCluster = function styleForCluster(feature, resolution) {
          var styleId, style, iconOffset, radius, fillcolor, fontcolor;
          if (feature && feature.get('features')) {
            if (styleId = feature.get('features')[0].get('locationStyle')) {
              if (self.proxy.locationStyleController.arrLocStyles[styleId] && self.proxy.locationStyleController.arrLocStyles[styleId].style) {
                style = self.proxy.locationStyleController.arrLocStyles[styleId].style(feature.get('features')[0], resolution);
              }
            }
            if (!style) {
              style = [];
            }
            if (feature.get('features').length > 1) {
              // calculate bubble-offset
              iconOffset = [0, 0];
              if (style[0]) {
                if (typeof style[0].getImage().getRadius === "function") {
                  radius = parseInt(style[0].getImage().getRadius(), 10);
                  if (radius) {
                    iconOffset = [0, radius];
                  }
                } else if (typeof style[0].getImage().getAnchor === "function") {
                  iconOffset = style[0].getImage().getAnchor() || [0, 0];
                }
              }

              fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity('4975A8', {
                unit: '%',
                value: 70
              });

              if (contentData.cluster_fillcolor) {
                fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fillcolor, {
                  unit: '%',
                  value: 70
                });
              }
              if (feature.get('features')[0].get('cluster_fillcolor')) {
                fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(feature.get('features')[0].get('cluster_fillcolor'), {
                  unit: '%',
                  value: 70
                });
              }
              fontcolor = '#FFFFFF';
              if (feature.get('features')[0].get('cluster_fontcolor')) {
                fontcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(feature.get('features')[0].get('cluster_fontcolor'), {
                  unit: '%',
                  value: 100
                });
              }

              style.push(new ol.style.Style({
                text: new ol.style.Text({
                  text: "●",
                  font: "60px sans-serif",
                  offsetX: -1 * iconOffset[0],
                  offsetY: -1 * iconOffset[1],
                  fill: new ol.style.Fill({
                    color: fillcolor
                  })
                })
              }));
              style.push(new ol.style.Style({
                text: new ol.style.Text({
                  text: feature.get('features').length.toString(),
                  offsetX: -1 * iconOffset[0],
                  offsetY: -1 * iconOffset[1] + 3,
                  fill: new ol.style.Fill({
                    color: fontcolor
                  })
                })
              }));
            }
          }

          if (style) {
            return style;
          }
        };
        requestVectorSource = new ol.source.Vector({
          loader: function loader(extent, resolution, projection) {
            var boundingArray, strBoundingBox, url;
            self.mapController.spinner.show();
            boundingArray = ol.proj.transformExtent(extent, projection, 'EPSG:4326');
            strBoundingBox = boundingArray[0] + ',' + boundingArray[1] + ';' + boundingArray[2] + ',' + boundingArray[3];
            if (self.layerRequests === undefined) {
              self.layerRequests = {};
            }
            if (self.layerRequests['layerDataRequest' + itemUid] !== undefined) {
              self.layerRequests['layerDataRequest' + itemUid].abort();
            }
            if (!self.proxy.locationStyleController.arrLocStyles[self.arrLayers[itemUid].locstyle]) {
              self.proxy.locationStyleController.loadLocationStyles([self.arrLayers[itemUid].locstyle], { done: function done() {} });
            }

            self.layerRequests['layerDataRequest' + itemUid] = jQuery.ajax({
              url: self.proxy.api_layercontentdata_url + '/' + self.arrLayers[itemUid].id + '/' + strBoundingBox
            }).done(function (data) {
              if (data.length > 0 && !contentFeatures) {
                contentFeatures = [];
              }
              var layer = self.arrLayers[itemUid];
              loopData: for (var _i2 = 0; _i2 < data.length; _i2++) {
                contentData = data[_i2];
                for (var _j = 0; _j < contentFeatures.length; _j++) {
                  if (contentData.id === contentFeatures[_j].id) continue loopData;
                }
                var resultCoordinate = ol.proj.transform([parseFloat(contentData['geox']), parseFloat(contentData['geoy'])], 'EPSG:4326', 'EPSG:3857');
                var point = new ol.geom.Point(resultCoordinate);
                contentFeature = new ol.Feature(point);
                contentFeature.setId(contentData.id);
                contentFeature.set('cluster_zoom', layer.cluster.zoom);
                contentFeature.set('cluster_popup', layer.cluster.popup);
                contentFeature.set('cluster_fillcolor', layer.cluster.fillcolor);
                contentFeature.set('cluster_fontcolor', layer.cluster.fontcolor);
                contentFeature.set('loc_linkurl', layer.loc_linkurl);
                contentFeature.set('hover_location', layer.hover_location);
                contentFeature.set('hover_style', layer.hover_style);
                var popup = contentData['popup'] ? contentData['popup'] : Object.assign({}, layer.popup);
                if (popup && popup.content && popup.content.search && popup.content.search('itemId')) {
                  popup.content = popup.content.replace('itemId', contentData['id']);
                }
                if (contentData['label']) {
                  contentFeature.set('label', contentData['label']);
                }
                if (contentData['tooltip']) {
                  contentFeature.set('tooltip', contentData['tooltip']);
                }
                contentFeature.set('popup', popup);
                contentFeature.set('zoom_onclick', layer.zoom_onclick);
                contentFeature.set('tid', contentData['id']);
                var locstyle = contentData['locstyle'] || layer.locstyle;
                contentFeature.set('locationStyle', locstyle);
                if (locstyle && self.proxy.locationStyleController.arrLocStyles[locstyle] && self.proxy.locationStyleController.arrLocStyles[locstyle].style) {
                  contentFeature.setStyle(self.proxy.locationStyleController.arrLocStyles[locstyle].style);
                  contentFeatures.push(contentFeature);
                } else {
                  if (!unstyledFeatures) {
                    unstyledFeatures = [];
                  }
                  if (!missingStyles) {
                    missingStyles = [];
                  }
                  contentFeature.set('styleId', locstyle);
                  unstyledFeatures.push(contentFeature);
                  missingStyles[locstyle] = locstyle;
                }
              }
              if (missingStyles) {
                self.proxy.locationStyleController.loadLocationStyles(missingStyles, { done: function done() {
                    for (i = 0; i < unstyledFeatures.length; i++) {
                      var styleId = unstyledFeatures[i].get('styleId');
                      unstyledFeatures[i].setStyle(self.proxy.locationStyleController.arrLocStyles[styleId].style);
                      requestVectorSource.addFeature(unstyledFeatures[i]);
                    }
                    missingStyles = undefined;
                  } });
              }

              if (data.length > 0) {
                requestVectorSource.addFeatures(contentFeatures);
              }
            }).always(function () {
              self.mapController.spinner.hide();
            });
          },
          strategy: ol.loadingstrategy.bbox
        });

        if (this.arrLayers[itemUid].cluster) {
          var layer = self.arrLayers[itemUid];
          var map = self.mapController.map;
          var currentZoom = map.getView().getZoom();
          var clusterDistance = this.arrLayers[itemUid].cluster.distance || 20;
          if (currentZoom >= layer.cluster.zoom) {
            clusterDistance = 0;
          }

          clusterSource = new ol.source.Cluster({
            distance: clusterDistance,
            //threshold: 2, //minimum element count
            source: requestVectorSource
          });
          vectorLayer = new ol.layer.AnimatedCluster({ name: 'Cluster',
            source: clusterSource,
            // Use a style function for cluster symbolisation
            style: styleForCluster
          });
        } else {
          vectorLayer = new ol.layer.Vector({
            name: 'Layer',
            source: requestVectorSource
          });
        }
        layers = layers || [];
        layers.push(vectorLayer);
        layerGroup = new ol.layer.Group({
          layers: layers
        });
        this.arrLayers[itemUid].vectorLayer = layerGroup;
        self.mapController.map.addLayer(layerGroup);
      } else {
        self.mapController.spinner.show();
        jQuery.ajax({
          dataType: self.mapController.data.jsonp ? "jsonp" : "json",
          url: self.proxy.api_layercontent_url + '/' + self.arrLayers[itemUid].id
        }).done(function (data) {
          var j = void 0,
              newLocationStyles = void 0;

          if (data.length > 0) {
            newLocationStyles = [];

            for (j = 0; j < data.length; j += 1) {

              self.arrLayers[itemUid].content = self.arrLayers[itemUid].content || [];

              self.arrLayers[itemUid].content.push(data[j]);
              newLocationStyles.push(data[j].locationStyle);
            }

            self.proxy.checkLocationStyles({
              done: function done() {
                // @TODO: check this!
                self.loadLayerContent(itemUid);
              }
            });
          }
        }).always(function () {
          self.mapController.spinner.hide();
        });
      }
    } // end of "loadLayerContent()"

  }, {
    key: "hideLayer",
    value: function hideLayer(layerUid, keepLayer) {

      var layer, i, j;

      layer = this.arrLayers[layerUid];
      if (!layer) {
        //console.warn('Cannot hide unknown layer (' + layerUid + ')');
        return false;
      }

      // check if layer is listed as "active"
      // otherwise there is nothing to remove or change
      if (this.proxy.activeLayerIds[layerUid]) {
        // remove layer from map (if it was visible before)
        if (this.proxy.activeLayerIds[layerUid] === 'visible' && layer.vectorLayer) {
          // [info]: do not use "layer.vectorLayer.setVisible(false);"
          //         see "showLayer()" for more information
          this.mapController.map.removeLayer(layer.vectorLayer);
        }
        // only mark as "invisible" if "keepLayer" is "true"
        // this is needed for the zoom-bounds
        if (keepLayer) {
          this.proxy.activeLayerIds[layerUid] = 'invisible';
        } else {
          delete this.proxy.activeLayerIds[layerUid];
        }
      }

      // childs needed to be checked independent from its parents state


      //ToDo loading problem
      if (layer && layer.hasChilds) {
        for (i = 0; i < layer.childs.length; i += 1) {
          this.hideLayer(layer.childs[i].id);
        }
      }
      if (layer.isInactive) {
        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_layer_visibility, layerUid);
        return;
      }
      layer.isInactive = true;

      if (this.layerRequests && typeof this.layerRequests['layer_request_' + layerUid] !== "undefined") {
        if (typeof this.layerRequests['layer_request_' + layerUid] == "number") {
          try {
            window.clearInterval(this.layerRequests['layer_request_' + layerUid]);
            delete this.layerRequests['layer_request_' + layerUid];
          } catch (e) {}
        }
      }
      //this.combineLayers(this);
      this.mapController.map.getView().setCenter([this.mapController.map.getView().getCenter()[0] + 0.001, this.mapController.map.getView().getCenter()[1]]);
      // hooks
      __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_layer_visibility, layerUid);
    } // end of "hideLayer()"

  }, {
    key: "hideChildLayer",
    value: function hideChildLayer(layerUid, childUid) {
      var layer = this.arrLayers[layerUid];
      childUid = childUid.replace(layerUid, '');
      var childLayer = layer.vectorLayer.getLayers().getArray()[childUid];
      childLayer.set('visible', false);
    }
  }, {
    key: "showChildLayer",
    value: function showChildLayer(layerUid, childUid) {
      var layer = this.arrLayers[layerUid];
      childUid = childUid.replace(layerUid, '');
      var childLayer = layer.vectorLayer.getLayers().getArray()[childUid];
      childLayer.set('visible', true);
    }
  }, {
    key: "showLayer",
    value: function showLayer(layerUid) {
      var layer, mapLayers, addLayer, i, j, activeForZoom;

      activeForZoom = this.proxy.checkLayerIsActiveForZoom(layerUid);
      layer = this.arrLayers[layerUid];

      if (activeForZoom) {
        if (this.proxy.activeLayerIds[layerUid] !== 'visible') {
          //if (layer.link_id) {
          //  this.proxy.activeLayerIds[layer.link_id] = 'visible';
          //} else
          if (layer && layer.vectorLayer) {
            // [info]: do not use: "layer.vectorLayer.setVisible(true);"
            //         Always add and remove Layers, so that the last
            //         clicked layer is always ontop of the others.

            // check if layer is really not already on the map
            // to prevent adding the same layer multiple times
            addLayer = true;
            mapLayers = this.mapController.map.getLayers();
            mapLayers.forEach(function (element, index, array) {
              if (element === layer.vectorLayer) {
                addLayer = false;
              }
            });
            if (addLayer) {
              if (layer.vectorLayer.getLayers().getArray()[0] && layer.vectorLayer.getLayers().getArray()[0].popup && layer.vectorLayer.getLayers().getArray()[0].popup.showPopupOnActive) {
                c4g.maps.popup.$content.html('');
                c4g.maps.popup.$popup.addClass(c4g.maps.constant.css.ACTIVE).addClass(c4g.maps.constant.css.LOADING);
                c4g.maps.popup.spinner.show();
                var popupInfos = layer.vectorLayer.getLayers().getArray()[0].popup;
                var features = layer.vectorLayer.getLayers().getArray()[0].getSource().getFeatures();
                var coord = features['0'].getGeometry().getCoordinates();
                if (popupInfos.async === false) {
                  var objPopup = {};
                  objPopup.popup = popupInfos;
                  objPopup.feature = features['0'];
                  objPopup.layer = layer.vectorLayer.getLayers().getArray()[0];
                  // Call the popup hook for plugin specific popup content
                  if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.proxy_fillPopup) === 'object') {
                    __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.proxy_fillPopup, objPopup);
                  }
                  this.proxy.setPopup(objPopup);
                } else {
                  var self = this;
                  jQuery.ajax({
                    dataType: "json",
                    url: self.api_infowindow_url + '/' + popupInfos.content,
                    done: function done(data) {
                      var popupInfo = {
                        async: popupInfos.async,
                        content: data.content,
                        popup: popupInfos.popup,
                        routing_link: popupInfos.routing_link
                      };

                      var objPopup = {};
                      objPopup.popup = popupInfo;
                      objPopup.feature = features['0'];
                      objPopup.layer = layer;

                      // Call the popup hook for plugin specific popup content
                      if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.proxy_fillPopup) === 'object') {
                        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.proxy_fillPopup, objPopup);
                      }

                      self.proxy.setPopup(objPopup);
                    }
                  });
                }
              }
              this.mapController.map.addLayer(layer.vectorLayer);
            }
          } else {
            this.loadLayerContent(layerUid);
          }
          this.proxy.activeLayerIds[layerUid] = 'visible';
        } else {
          //if (layer.link_id) {
          //  this.proxy.activeLayerIds[layer.link_id] = 'invisible';
          //} else {
          //this.proxy.activeLayerIds[layerUid] = 'invisible';
          //}
        }
      }

      if (layer && layer.hasChilds && activeForZoom) {
        for (i = 0; i < layer.childs.length; i += 1) {
          this.showLayer(layer.childs[i].id);
        }
      }

      if (layer && activeForZoom) {
        layer.isInactive = false;
      }

      if (typeof this.proxy.requestFunctions['request_' + layerUid] !== "undefined") {

        if (this.layerRequests && typeof this.layerRequests['layer_request_' + layerUid] === "undefined") {
          this.layerRequests['layer_request_' + layerUid] = window.setInterval(this.proxy.requestFunctions['request_' + layerUid].function, this.proxy.requestFunctions['request_' + layerUid].interval);
        }
      }
      //this.combineLayers(this);
      // hooks
      __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_layer_visibility, layerUid);
    } // end of "showLayer()"

  }, {
    key: "drawLayer",
    value: function drawLayer(itemUid) {

      var self, element, elementContent, layers, i, j, missingStyles, unstyledFeatures, features, dataProjection, featureProjection, vectorSource, vectorLayer, vectorStyle, layerGroup;

      self = this;
      element = this.arrLayers[itemUid];

      // if (!element.hide) {

      layers = [];
      if (element.content && element.content.length > 0) {
        for (i = 0; i < element.content.length; i += 1) {

          elementContent = element.content[i];
          if (!elementContent) {
            continue;
          }
          if (typeof ol.format[elementContent.format] === "function") {

            // if (element.content[i].origType === 'single') {
            //   featureProjection = this.mapController.map.getView().getProjection();
            // } else {
            //   featureProjection = undefined;
            // }
            if (elementContent.data.properties && elementContent.data.properties.projection) {
              dataProjection = elementContent.data.properties.projection;
              featureProjection = this.mapController.map.getView().getProjection();
            } else {
              dataProjection = undefined;
            }

            if (elementContent.format === "OSMXML") {
              continue;
            }
            if (elementContent.data.geometry && elementContent.data.geometry.type === "Circle") {
              // draw circle geometries
              features = [];
              var feature = new ol.Feature(new ol.geom.Circle(ol.proj.fromLonLat(elementContent.data.geometry.center), parseFloat(elementContent.data.geometry.radius)));
              feature.set('styleId', elementContent.locationStyle);
              features.push(feature);
            } else {
              // remaining geometries
              features = new ol.format[elementContent.format]({}).readFeatures(elementContent.data, {
                featureProjection: featureProjection,
                dataProjection: dataProjection
              });
            }

            missingStyles = [];
            unstyledFeatures = [];
            for (j = 0; j < features.length; j += 1) {
              // features[j].setId(utils.getUniqueId());
              // features[j].set('projection', this.mapController.map.getView().getProjection());
              // features[j].set('projection', "EPSG:4326");
              features[j].set('hover_location', elementContent.hover_location);
              features[j].set('hover_style', elementContent.hover_style);
              if (features[j].get('styleId')) {
                if (self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')] && self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style) {
                  features[j].setStyle(self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style);
                } else {
                  missingStyles.push(features[j].get('styleId'));
                  unstyledFeatures.push(features[j]);
                }
              } else if (elementContent.locationStyle) {
                // feature has no property styleId, but elementContent has locationstyle
                if (self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle] && self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].style) {
                  //features[j].setStyle(self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].style);
                } else {
                  missingStyles.push(elementContent.locationStyle);
                  unstyledFeatures.push(features[j]);
                  features[j].set('styleId', elementContent.locationStyle);
                }
              }
            }

            vectorStyle = self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle] && self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].style;
            if (self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle] && self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].fnStyleFunction) {

              vectorStyle = Function("feature", "data", "map", self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].fnStyleFunction);
            }
            if (missingStyles.length > 0) {
              this.proxy.locationStyleController.loadLocationStyles(missingStyles, {
                done: function done() {
                  var f, fLayerGroup, fLayers, fVectorLayer, fVectorSource;
                  for (f = 0; f < unstyledFeatures.length; f += 1) {
                    if (self.proxy.locationStyleController.arrLocStyles[unstyledFeatures[f].get('styleId')]) {
                      unstyledFeatures[f].setStyle(self.proxy.locationStyleController.arrLocStyles[unstyledFeatures[f].get('styleId')].style);
                    }
                  }

                  fVectorSource = new ol.source.Vector({
                    features: features,
                    projection: 'EPSG:3857',
                    format: new ol.format.GeoJSON()
                  });

                  fVectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(fVectorSource, vectorStyle);

                  // layers.push(vectorLayer);
                  if (self.arrLayers[itemUid].fVectorLayer) {
                    fLayerGroup = self.arrLayers[itemUid].vectorLayer;
                    fLayers = fLayerGroup.getLayers();

                    if (elementContent.data && elementContent.data.properties) {
                      if (elementContent.data.properties.popup) {
                        fVectorLayer.popup = elementContent.data.properties.popup;
                      }
                      if (elementContent.data.properties.tooltip) {
                        fVectorLayer.tooltip = elementContent.data.properties.tooltip;
                      }
                      if (elementContent.data.properties.label) {
                        fVectorLayer.label = elementContent.data.properties.label;
                      }
                      if (elementContent.data.properties.zoom_onclick) {
                        fVectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                      }
                    }

                    fLayers.push(fVectorLayer);
                    fLayerGroup.setLayers(fLayers);
                  } else {
                    if (elementContent.data && elementContent.data.properties) {
                      if (elementContent.data.properties.popup) {
                        fVectorLayer.popup = elementContent.data.properties.popup;
                      }
                      if (elementContent.data.properties.tooltip) {
                        fVectorLayer.tooltip = elementContent.data.properties.tooltip;
                      }
                      if (elementContent.data.properties.label) {
                        fVectorLayer.label = elementContent.data.properties.label;
                      }
                      if (elementContent.data.properties.zoom_onclick) {
                        fVectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                      }
                    }
                    fLayerGroup = new ol.layer.Group({
                      layers: [fVectorLayer]
                    });
                    self.arrLayers[itemUid].vectorLayer = fLayerGroup;
                    self.mapController.map.addLayer(fLayerGroup);
                  }
                }
              });
            } else {
              if (element.split_geojson) {
                for (var _i3 = 0; _i3 < features.length; _i3++) {
                  vectorSource = new ol.source.Vector({
                    projection: 'EPSG:3857',
                    format: new ol.format.GeoJSON()
                  });
                  vectorSource.addFeature(features[_i3]);
                  vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, vectorStyle);
                  for (var _j2 = 0; _j2 < element.geojson_attributes.split(',').length; _j2++) {
                    vectorLayer.set(element.geojson_attributes.split(',')[_j2], features[_i3].get(element.geojson_attributes.split(',')[_j2]));
                  }
                  layers.push(vectorLayer);
                  if (elementContent.data.properties.popup) {
                    vectorLayer.popup = elementContent.data.properties.popup;
                  }
                  if (elementContent.data.properties.tooltip) {
                    vectorLayer.tooltip = elementContent.data.properties.tooltip;
                  }
                  if (elementContent.data.properties.label) {
                    vectorLayer.label = elementContent.data.properties.label;
                  }
                  if (elementContent.data.properties.zoom_onclick) {
                    vectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                  }
                }
              } else {
                vectorSource = new ol.source.Vector({
                  features: features,
                  projection: 'EPSG:3857',
                  format: new ol.format.GeoJSON()
                });
                vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, vectorStyle);

                if (elementContent.data && elementContent.data.properties) {
                  if (elementContent.data.properties.popup) {
                    vectorLayer.popup = elementContent.data.properties.popup;
                  }
                  if (elementContent.data.properties.tooltip) {
                    vectorLayer.tooltip = elementContent.data.properties.tooltip;
                  }
                  if (elementContent.data.properties.label) {
                    vectorLayer.label = elementContent.data.properties.label;
                  }
                  if (elementContent.data.properties.zoom_onclick) {
                    vectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                  }
                }

                layers.push(vectorLayer);
              }
            }
          } else {
            console.warn('Format type ' + elementContent.format + ' in ol.format not found.');
          }
        }
      }

      layerGroup = new ol.layer.Group({
        layers: layers
      });

      this.arrLayers[itemUid].vectorLayer = layerGroup;
      this.mapController.map.addLayer(layerGroup);
      if (layerGroup.getLayers().getArray()[0] && layerGroup.getLayers().getArray()[0].popup && layerGroup.getLayers().getArray()[0].popup.showPopupOnActive) {
        c4g.maps.popup.$content.html('');
        c4g.maps.popup.$popup.addClass(c4g.maps.constant.css.ACTIVE).addClass(c4g.maps.constant.css.LOADING);
        c4g.maps.popup.spinner.show();
        var popupInfos = layerGroup.getLayers().getArray()[0].popup;
        var layer = layerGroup.getLayers().getArray()[0];
        var coord = features['0'].getGeometry().getCoordinates();
        if (popupInfos.async === false) {
          var objPopup = {};
          objPopup.popup = popupInfos;
          objPopup.feature = features['0'];
          objPopup.layer = layer;
          // Call the popup hook for plugin specific popup content
          if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.proxy_fillPopup) === 'object') {
            __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.proxy_fillPopup, objPopup);
          }
          self.proxy.setPopup(objPopup);
        } else {
          jQuery.ajax({
            dataType: "json",
            url: self.api_infowindow_url + '/' + popupInfos.content,
            done: function done(data) {
              var popupInfo = {
                async: popupInfos.async,
                content: data.content,
                popup: popupInfos.popup,
                routing_link: popupInfos.routing_link
              };

              var objPopup = {};
              objPopup.popup = popupInfo;
              objPopup.feature = features['0'];
              objPopup.layer = layer;

              // Call the popup hook for plugin specific popup content
              if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.proxy_fillPopup) === 'object') {
                __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.proxy_fillPopup, objPopup);
              }

              self.proxy.setPopup(objPopup);
            }
          });
        }
      }

      //hooks
      // }
    } // end of "drawLayer()"

  }, {
    key: "drawLayerInitial",
    value: function drawLayerInitial() {
      var layerId, layer;

      for (layerId in this.proxy.activeLayerIds) {
        if (this.proxy.activeLayerIds.hasOwnProperty(layerId)) {
          this.showLayer(layerId);
        }
      }
      for (var l in this.arrLayers) {
        if (this.arrLayers.hasOwnProperty(l)) {
          layer = this.arrLayers[l];
          if (layer.hide === "1") {
            this.hideLayer(layer.id);
          }
        }
      }
    } // end of "drawLayerInitial()"

  }]);

  return C4gLayerController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-layer.js":
/*!******************************************!*\
  !*** ./Resources/public/js/c4g-layer.js ***!
  \******************************************/
/*! exports provided: C4gLayer */
/*! exports used: C4gLayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLayer; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var C4gLayer = function C4gLayer(layerArr) {
  _classCallCheck(this, C4gLayer);

  this.id = layerArr['id'];
  this.pid = layerArr['pid'];
  this.async_content = layerArr['async_content'];
  this.content = layerArr['content'];
  this.cssClass = layerArr['cssClass'];
  this.hide = layerArr['hide'];
  this.hide_child = layerArr['hide_child'];
  this.type = layerArr['type'];
  this.cluster = layerArr['cluster'];
  this.zoom = layerArr['zoom'];
  this.zoom_locations = layerArr['zoom_locations'];
  this.display = layerArr['display'];
  this.hasChilds = layerArr['hasChilds'];
  this.childs = layerArr['childs'];
  this.childsCount = layerArr['childsCount'];
  this.renderSpecial = layerArr['renderSpecial'];
  this.editable = true;
  this.type = layerArr['type'];
  this.locstyle = layerArr['locstyle'];
  this.name = layerArr['name'];
  this.tabId = layerArr['tabId'];
  this.split_geojson = layerArr['split_geojson'];
  this.geojson_attributes = layerArr['geojson_attributes'];
  this.geojson_zoom = layerArr['geojson_zoom'];
  this.layername = layerArr['layername'];
  this.visibleChilds = false;
  this.vectorLayer = null;
  this.hideWhenInTab = layerArr['hide_when_in_tab'];

  if (layerArr.projectId) {
    this.projectId = layerArr.projectId;
  }
  if (layerArr.popup) {
    this.popup = layerArr.popup;
  }
  this.awesomeicon = layerArr['awesomeicon'];
};

/***/ }),

/***/ "./Resources/public/js/c4g-locationstyle-controller.js":
/*!*************************************************************!*\
  !*** ./Resources/public/js/c4g-locationstyle-controller.js ***!
  \*************************************************************/
/*! exports provided: C4gLocationStyleController */
/*! exports used: C4gLocationStyleController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLocationStyleController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_locationstyle__ = __webpack_require__(/*! ./c4g-locationstyle */ "./Resources/public/js/c4g-locationstyle.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var C4gLocationStyleController = function () {
    function C4gLocationStyleController(proxy) {
        _classCallCheck(this, C4gLocationStyleController);

        this.proxy = proxy;
        this.mapController = proxy.options.mapController;
        this.arrLocStyles = [];
    }

    _createClass(C4gLocationStyleController, [{
        key: "loadLocationStyles",
        value: function loadLocationStyles(arrIds, opt_options) {
            var options = void 0,
                complete = {},
                success = {},
                self = this,
                count = 1,
                makeAjax = void 0;

            if (opt_options && (typeof opt_options === "undefined" ? "undefined" : _typeof(opt_options)) === "object") {
                options = opt_options;
            } else {
                options = {};
            }

            // this.proxy.options.mapController.spinner.show();

            makeAjax = function makeAjax(styleIds, index) {
                if (index) {
                    complete[index] = false;
                    success[index] = false;
                }
                // get locationstyles over API
                jQuery.ajax({
                    dataType: self.proxy.options.mapController.data.jsonp ? "jsonp" : "json",
                    url: self.proxy.api_locstyle_url,
                    data: {
                        ids: styleIds
                    }
                }).done(function (data) {
                    var i = void 0,
                        styleData = void 0,
                        successful = true;

                    if (data.length > 0) {
                        for (i = 0; i < data.length; i += 1) {
                            styleData = data[i];
                            self.arrLocStyles[styleData.id] = new __WEBPACK_IMPORTED_MODULE_0__c4g_locationstyle__["a" /* C4gLocationStyle */](styleData, self);
                        }
                    }
                    if (index) {
                        success[index] = true;
                        for (var key in success) {
                            if (success.hasOwnProperty(key)) {
                                if (!success[key]) {
                                    successful = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (options.done && typeof options.done === "function" && (index ? successful : true)) {
                        options.done();
                    }
                }).always(function (jXhr, strStatus) {
                    var completed = true;

                    if (index) {
                        complete[index] = true;
                        for (var key in complete) {
                            if (complete.hasOwnProperty(key)) {
                                if (!complete[key]) {
                                    completed = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (options.always && typeof options.always === "function" && (index ? completed : true)) {
                        options.always();
                    }
                    if (!$(self.proxy.options.mapController.spinner.element).hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
                        self.proxy.options.mapController.spinner.hide();
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    console.warn(errorThrown);
                });
            };

            // split arrIds if it's too long
            if (arrIds.length > 100) {
                var n = 100;
                while (arrIds.length > 0) {
                    makeAjax(arrIds.splice(0, n), count);
                    count++;
                }
            } else {
                makeAjax(arrIds);
            }
            //});
        } // end of "loadLocationStyles()"

    }]);

    return C4gLocationStyleController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-locationstyle.js":
/*!**************************************************!*\
  !*** ./Resources/public/js/c4g-locationstyle.js ***!
  \**************************************************/
/*! exports provided: C4gLocationStyle */
/*! exports used: C4gLocationStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLocationStyle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var C4gLocationStyle = function () {
    function C4gLocationStyle(locStyleArr, controller) {
        _classCallCheck(this, C4gLocationStyle);

        this.id = locStyleArr['id'];
        this.style = this.getStyleFunction(locStyleArr);
        this.editor = this.getStyleEditorConfig(locStyleArr);
        this.name = locStyleArr['name'];
        this.tooltip = locStyleArr['tooltip'];
        this.label = locStyleArr['label'];
        this.minzoom = locStyleArr['minzoom'];
        this.maxzoom = locStyleArr['maxzoom'];
        this.fnStyleFunction = locStyleArr['style_function_js'];
        this.controller = controller;
        this.locStyleArr = locStyleArr;
    }

    _createClass(C4gLocationStyle, [{
        key: 'getStyleFunction',
        value: function getStyleFunction(styleData) {
            var self, styleFunction, imageStyle, strokeStyle, fillStyle, textStyle, textStyleOutline, backgroundFill, backgroundStroke;

            self = this;

            // general
            strokeStyle = new ol.style.Stroke({
                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.strokecolor, styleData.strokeopacity),
                width: parseInt(styleData.strokewidth.value, 10)
            });
            fillStyle = new ol.style.Fill({
                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.fillcolor, styleData.fillopacity)
            });

            // image
            switch (styleData.styletype) {
                case 'square':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 4,
                        radius: styleData.radius.value || 10,
                        angle: Math.PI / 4
                    });
                    break;
                case 'star':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        radius1: styleData.radius.value || 10,
                        radius2: styleData.radius.value ? Math.floor(styleData.radius.value * 0.5) : 4,
                        points: 5,
                        angle: 0
                    });
                    break;
                case 'x':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 4,
                        radius: styleData.radius.value || 10,
                        radius2: 0,
                        angle: Math.PI / 4
                    });
                    break;
                case 'cross':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 4,
                        radius: styleData.radius.value || 10,
                        radius2: 0,
                        angle: 0
                    });
                    break;
                case 'triangle':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 3,
                        radius: styleData.radius.value || 10,
                        rotation: Math.PI / 4,
                        angle: 0
                    });
                    break;
                case 'ol_icon': // fallthrough
                case 'cust_icon':
                    if (styleData.icon_src) {
                        imageStyle = new ol.style.Icon({
                            opacity: parseFloat(styleData.icon_opacity.value, 10) / 100,
                            src: styleData.icon_src,
                            size: [parseInt(styleData.icon_size[0], 10), parseInt(styleData.icon_size[1], 10)],
                            scale: parseFloat(styleData.icon_scale, 10)
                        });
                    }
                    break;
                case 'cust_icon_svg':
                    if (styleData.svgSrc && styleData.icon_scale && styleData.icon_size) {
                        var canvas = document.createElement('canvas');
                        var ctx = canvas.getContext("2d");
                        var width = styleData.icon_size[0] * styleData.icon_scale;
                        var height = styleData.icon_size[1] * styleData.icon_scale;

                        var strokewidth = 0;
                        if (styleData.strokewidth && styleData.strokewidth.value) {
                            strokewidth = styleData.strokewidth.value;
                        }
                        canvas.width = width + 2 * strokewidth;
                        canvas.height = height + 2 * strokewidth;
                        ctx.clearRect(0, 0, canvas.width, canvas.height);

                        if (styleData.fillcolor) {
                            ctx.fillStyle = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.fillcolor, styleData.fillopacity.value);
                            ctx.fillRect(0, 0, canvas.width, canvas.height);
                        }

                        if (strokewidth && styleData.strokecolor) {
                            ctx.strokeStyle = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.strokecolor, styleData.strokeopacity.value);
                            ctx.lineWidth = styleData.strokewidth.value;
                            ctx.strokeRect(0, 0, canvas.width, canvas.height);
                            ctx.translate(0.5, 0.5);
                        }

                        // if (styleData.icon_opacity.value && (styleData.icon_opacity.value > 0)) {
                        //     ctx.globalAlpha = (styleData.icon_opacity.value / 100);
                        // }

                        var img = new Image();
                        img.src = styleData.svgSrc;
                        img.zIndex = 100; //Test

                        img.onload = function () {
                            ctx.drawImage(img, strokewidth, strokewidth, width, height);
                        };

                        imageStyle = new ol.style.Icon({
                            img: canvas,
                            imgSize: [canvas.width, canvas.height] /*,
                                                                   opacity: (styleData.icon_opacity.value / 100)*/
                        });
                    }

                    break;
                case 'photo':
                    imageStyle = new ol.style.Photo({
                        kind: styleData.photoKind,
                        crop: true,
                        opacity: parseFloat(styleData.icon_opacity.value, 10) / 100,
                        radius: parseFloat(styleData.radius.value, 10),
                        shadow: true,
                        stroke: strokeStyle,
                        src: styleData.icon_src
                    });
                    break;
                case 'point':
                    imageStyle = new ol.style.Circle({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        radius: styleData.radius.value || 7
                    });
                    break;
                default:
                    imageStyle = new ol.style.Circle({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        radius: styleData.radius.value || 7
                    });
            }

            // build function
            styleFunction = function styleFunction(feature, projection, getId) {
                var stylesArray, label, arrowSize, arrowSizeUnit, segmentLength, arrows_minzoom, start_pixel, end_pixel;

                if (getId) {
                    return styleData.id;
                }

                // check if this is a feature.styleFunction
                if (!(feature instanceof ol.Feature)) {
                    projection = feature;
                    feature = this;
                }

                stylesArray = [];

                if (feature && typeof feature.get === 'function' && feature.get('label')) {
                    label = feature.get('label');
                } else if (styleData.label) {
                    label = styleData.label;
                } else {
                    label = false;
                }
                var defaultColor = self.controller.mapController.data.default_label_color;
                // label
                if (label) {
                    if (styleData.label_outl_color && styleData.label_outl_width.value) {
                        textStyleOutline = new ol.style.Stroke({
                            color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.label_outl_color || defaultColor, {
                                unit: '%',
                                value: 100
                            }),
                            width: parseInt(styleData.label_outl_width.value, 10)
                        });
                        if (styleData.label_outl_box === "1") {
                            backgroundFill = new ol.style.Fill({
                                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.label_outl_color || defaultColor, {
                                    unit: '%',
                                    value: 100
                                })
                            });
                        }
                    }
                    if (!styleData.label_offset) {
                        styleData.label_offset = [0, 0, "px"];
                    }
                    if (styleData.label_outl_box === "1") {
                        textStyle = new ol.style.Text({
                            text: label,
                            font: (styleData.font_weight || 'normal') + ' ' + (styleData.font_style || 'normal') + ' ' + (styleData.font_size || '13') + 'px ' + (styleData.font_family || 'sans-serif'),
                            // scale: parseInt(styleData.font_size || 0, 10) || undefined,
                            offsetX: parseInt(styleData.label_offset[0] || 0, 10),
                            offsetY: parseInt(styleData.label_offset[1] || 0, 10),
                            textAlign: styleData.label_align_hor,
                            textBaseline: styleData.label_align_ver,
                            fill: new ol.style.Fill({
                                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.font_color || defaultColor, styleData.font_opacity)
                            }),
                            backgroundFill: backgroundFill,
                            backgroundStroke: textStyleOutline
                        });
                    } else {
                        textStyle = new ol.style.Text({
                            text: label,
                            font: (styleData.font_weight || 'normal') + ' ' + (styleData.font_style || 'normal') + ' ' + (styleData.font_size || '13') + 'px ' + (styleData.font_family || 'sans-serif'),
                            // scale: parseInt(styleData.font_size || 0, 10) || undefined,
                            offsetX: parseInt(styleData.label_offset[0] || 0, 10),
                            offsetY: parseInt(styleData.label_offset[1] || 0, 10),
                            textAlign: styleData.label_align_hor,
                            textBaseline: styleData.label_align_ver,
                            fill: new ol.style.Fill({
                                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.font_color || defaultColor, styleData.font_opacity)
                            }),
                            stroke: textStyleOutline
                        });
                    }
                }

                // create style-object
                // we need this check because textStyle is a var accessible from closure and will be set even if no label is set
                if (label) {
                    stylesArray.push(new ol.style.Style({
                        image: imageStyle,
                        text: textStyle,
                        stroke: strokeStyle,
                        fill: fillStyle
                    }));
                } else {
                    stylesArray.push(new ol.style.Style({
                        image: imageStyle,
                        stroke: strokeStyle,
                        fill: fillStyle
                    }));
                }

                // add line-arrows
                if (styleData.line_arrows && feature && typeof feature.getGeometry === 'function' && !(feature.getGeometry() instanceof ol.geom.Point) && typeof feature.getGeometry().forEachSegment === 'function') {
                    arrowSize = styleData.line_arrows_radius ? parseInt(styleData.line_arrows_radius.value, 10) * 2 : 0;
                    arrowSizeUnit = arrowSize + styleData.line_arrows_radius.unit;
                    feature.getGeometry().forEachSegment(function (start, end) {
                        //if minzoom is 0 (unlimited), hide arrows if they are bigger than the segment
                        arrows_minzoom = parseInt(styleData.line_arrows_minzoom, 10);
                        start_pixel = self.controller.mapController.map.getPixelFromCoordinate(start);
                        end_pixel = self.controller.mapController.map.getPixelFromCoordinate(end);
                        // euclid-distance between start and end
                        segmentLength = Math.sqrt(Math.pow(end_pixel[1] - start_pixel[1], 2) + Math.pow(end_pixel[0] - start_pixel[0], 2));

                        if (arrows_minzoom < 0 && arrowSize + parseInt(styleData.strokewidth.value, 10) < segmentLength || arrows_minzoom >= 0 && self.controller.mapController.map.getView().getZoom() >= arrows_minzoom) {
                            // forward arrows
                            stylesArray.push(new ol.style.Style({
                                geometry: new ol.geom.Point(end),
                                text: new ol.style.Text({
                                    text: "ᐳ",
                                    font: arrowSizeUnit + " sans-serif",
                                    offsetX: 0,
                                    offsetY: 1,
                                    fill: fillStyle,
                                    stroke: strokeStyle,
                                    textAlign: 'right',
                                    rotateWithView: true,
                                    rotation: -Math.atan2(end[1] - start[1], end[0] - start[0])
                                })
                            }));
                            // backward arrows (if wanted)
                            if (styleData.line_arrows_back) {
                                stylesArray.push(new ol.style.Style({
                                    geometry: new ol.geom.Point(start),
                                    text: new ol.style.Text({
                                        text: "ᐳ",
                                        font: arrowSizeUnit + " sans-serif",
                                        offsetX: 0,
                                        offsetY: -1,
                                        fill: fillStyle,
                                        stroke: strokeStyle,
                                        textAlign: 'right',
                                        rotateWithView: true,
                                        rotation: -Math.atan2(start[1] - end[1], start[0] - end[0])
                                    })
                                }));
                            }
                        }
                    });
                }

                return stylesArray;
            };

            return styleFunction;
        } // end of "getStyleFunction()"


    }, {
        key: 'getStyleEditorConfig',
        value: function getStyleEditorConfig(styleData) {
            var editorConfig;

            // create editor-config
            editorConfig = {};
            editorConfig.collect = styleData.editor_collect || undefined;
            editorConfig.iconSrc = styleData.editor_icon || undefined;
            editorConfig.vars = styleData.editor_vars || undefined;

            editorConfig.sort = styleData.editor_sort || false;
            if (editorConfig.sort) {
                editorConfig.sort = parseInt(editorConfig.sort, 10) || false;
            }

            return editorConfig;
        } // end of "getStyleEditorConfig()"

    }]);

    return C4gLocationStyle;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-maps-config.js":
/*!************************************************!*\
  !*** ./Resources/public/js/c4g-maps-config.js ***!
  \************************************************/
/*! exports provided: config */
/*! exports used: config */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return config; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.config = this.c4g.maps.config || {};

(function ($, c4g) {
  'use strict';

  /**
   * osmSourceDefinitions
   */

  c4g.maps.config.osm = $.extend(c4g.maps.config.osm, {

    CycleMap: {
      attributions: 'Style by <a target="_blank" href="http://www.opencyclemap.org/">OpenCycleMap</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.opencyclemap.org/cycle/{z}/{x}/{y}.png'
    },

    German: {
      attributions: 'Style by <a target="_blank" href="http://www.openstreetmap.de/germanstyle.html">openstreetmap.de</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png'
    },

    GermanTransport: {
      attributions: 'Style by <a target="_blank" href="http://www.memomaps.de">Memomaps</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 19,
      url: 'http://tile.memomaps.de/tilegen/{z}/{x}/{y}.png'
    },

    LandscapeMap: {
      attributions: 'Style by <a target="_blank" href="http://www.opencyclemap.org/">OpenCycleMap</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.opencyclemap.org/landscape/{z}/{x}/{y}.png'
    },

    Mapnik: {
      attributions: ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous'
    },

    TransportMap: {
      attributions: 'Style by <a target="_blank" href="http://www.opencyclemap.org/">OpenCycleMap</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 19,
      crossOrigin: 'anonymous',
      url: 'http://{a-c}.tile2.opencyclemap.org/transport/{z}/{x}/{y}.png'
    },

    NONE: '' // last line
  }); // end of "osmSourceDefinitions" ---

  /**
   * stamenSourceDefinitions
   */
  c4g.maps.config.stamen = $.extend(c4g.maps.config.stamen, {

    Toner: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'toner',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    TonerLabels: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'toner-labels',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    TonerLines: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'toner-lines',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    Terrain: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'terrain',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    Watercolor: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'watercolor',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    NONE: ''
  });

  /**
   * mapquestSourceDefinitions
   */
  c4g.maps.config.mapquest = $.extend(c4g.maps.config.mapquest, {

    MapQuestOpen: {
      layer: 'osm'
    },

    MapQuestHyb: {
      layer: 'hyb'
    },

    MapQuestSat: {
      layer: 'sat'
    },

    NONE: ''
  });

  /**
   * mapboxSourceDefinitions
   */
  c4g.maps.config.mapbox = {

    Mapbox: {
      tileSize: [512, 512],
      attributions: '© <a target="_blank" href="https://www.mapbox.com/about/maps/">Mapbox</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    },

    MapboxClassic: {
      attributions: '© <a target="_blank" href="https://www.mapbox.com/about/maps/">Mapbox</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }
  };

  /**
   * klokanSourceDefinitions
   */
  //ToDo not ready
  c4g.maps.config.klokan = {

    OpenMapTiles: {
      format: new ol.format.MVT(),
      tileGrid: ol.tilegrid.createXYZ({ tileSize: 512, maxZoom: 22 }), //ToDo maxZoom from configuration
      tilePixelRatio: 8,
      attributions: '© <a target="_blank" href="https://openmaptiles.org/">OpenMapTiles</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    },

    TileHosting: {
      format: new ol.format.MVT(),
      tileGrid: ol.tilegrid.createXYZ({ tileSize: 512, maxZoom: 22 }), //ToDo maxZoom from configuration
      tilePixelRatio: 8,
      attributions: '© <a target="_blank" href="https://tilehosting.com/">TileHosting</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }
  };

  /**
   * hereSourceDefinitions
   */
  c4g.maps.config.here = {

    HERE: {
      tileSize: [512, 512],
      attributions: 'Map Tiles © <a target="_blank" href="https://developer.here.com">HERE</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }

  };

  /**
   * thunderforestSourceDefinitions
   */
  c4g.maps.config.thunderforest = {

    Thunderforest: {
      tileSize: [512, 512],
      attributions: 'Map Tiles © <a target="_blank" href="https://www.thunderforest.com/">Thunderforest</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 19,
      crossOrigin: 'anonymous'
    }

  };
})(jQuery, this.c4g);

var config = this.c4g.maps.config;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-constant-i18n-de.js":
/*!**********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-constant-i18n-de.js ***!
  \**********************************************************/
/*! exports provided: langConstants */
/*! exports used: langConstants */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return langConstants; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.constant = this.c4g.maps.constant || {};

(function ($, c4g) {
  'use strict';

  /**
   * Language constants (en)
   */

  c4g.maps.constant.i18n = $.extend(c4g.maps.constant.i18n, {

    LANG: 'de',

    NAME: 'Name',
    HIDE: 'Zuklappen',
    CLOSE: 'Schließen',
    POINT: 'POI',
    FREEHAND: 'Freihand',
    LINE: 'Linie',
    POLYGON: 'Fläche',
    CIRCLE: 'Radius',
    PERIMETER: 'Umfang',
    LENGTH: 'Länge',
    SURFACEAREA: 'Flächeninhalt',
    RADIUS: 'Radius',
    REFRESH: 'Aktualisieren',
    COPY_TO_CLIPBOARD: 'In Zwischenablage kopieren',

    CTRL_ZOOM_IN: 'Vergrößern',
    CTRL_ZOOM_OUT: 'Verkleinern',
    CTRL_ZOOM_EXT: 'Maximal verkleinern',
    CTRL_ZOOM_HOME: 'Zur ursprünglichen Position',
    CTRL_ZOOM_POS: 'Zum aktuellen Standort',
    CTRL_ZOOM_SLIDER: 'Zoom Slider',
    CTRL_RESET_ROTATION: 'Rotation (touch, alt+mouse) zurücksetzen',
    CTRL_PORTSIDE: 'Portside ein-/ausblenden',
    CTRL_ROUTER: 'Router ein-/ausblenden',
    CTRL_EDITOR: 'Editor ein-/ausblenden',
    CTRL_MEASURETOOLS: 'Messwerkzeuge ein-/ausblenden',
    CTRL_INFOPAGE: 'Infoseite ein-/ausblenden',
    CTRL_ADDITIONALPANEL: 'Panel ein-/ausblenden',
    CTRL_ACCOUNT: 'Account ein-/ausblenden',
    CTRL_ZOOMLEVEL: 'Zoom',
    CTRL_MOUSECOORDS: 'Lon/Lat',
    CTRL_GEOSEARCH: 'Suche ein-/ausblenden',
    CTRL_START_SEARCH: 'Suche starten',
    CTRL_OVERVIEWMAP: 'Übersichtskarte ein-/ausblenden',
    CTRL_GEOBOOKMARKS: 'Favoriten verwalten',
    CTRL_SIDEBOARD: 'Sideboard ein-/ausblenden',
    CTRL_STARBOARD: 'Starboard ein-/ausblenden',
    CTRL_ATTRIBUTION: 'Attribution anzeigen',
    CTRL_GRID: 'Gitter ein-/ausblenden',
    CTRL_PERMALINK: 'Permalink generieren',
    CTRL_FULLSCREEN: 'Vollbildmodus ein-/ausschalten',
    CTRL_PRINT: 'Karte exportieren',

    EDITOR: 'Editor',
    EDITOR_ENABLE_INSTANT_MEASURE: 'Messen während des Zeichnens',
    EDITOR_ENABLE_FREEHAND_DRAW: 'Freihand zeichnen',
    EDITOR_FEATURE_APPLY: 'Editieren beenden',
    EDITOR_FEATURE_DELETE: 'Element löschen',
    EDITOR_FEATURE_MODIFY: 'Element editieren / verschieben',
    EDITOR_SELECT_INFO: 'Zur Auswahl ein Element auf der Karte anklicken.',
    EDITOR_SELECT_INFO_ADDITIONAL: '[Strg] + [Klick] für Mehrfachauswahl <br>[Shift] halten für Auswahlbox',
    EDITOR_VIEW_TRIGGER_SELECT: 'Auswahl Modus',
    EDITOR_VIEW_TRIGGER_DRAW_POINT: 'Kartenelemente',
    EDITOR_VIEW_TRIGGER_DRAW_FREEHAND: 'Freihandwerkzeuge',
    EDITOR_VIEW_TRIGGER_DRAW_LINESTRING: 'Streckenwerkzeuge',
    EDITOR_VIEW_TRIGGER_DRAW_POLYGON: 'Flächenwerkzeuge',
    EDITOR_VIEW_TRIGGER_DRAW_CIRCLE: 'Kreiswerkzeuge',

    POPUP_ROUTE_FROM: 'Route von hier',
    POPUP_ROUTE_TO: 'Route hierhin',

    STARBOARD: 'Starboard',
    STARBOARD_BASELAYER: 'Basiskarten',
    STARBOARD_LAYER: 'Ebenen',
    STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER: 'Basiskarten',
    STARBOARD_VIEW_TRIGGER_LAYERSWITCHER: 'Kartenelemente',

    SIDEBOARD: 'Sideboard',

    ROUTER_VIEW_ADDRESS_INPUT: 'Route finden',
    ROUTER_FROM_LABEL: 'Start',
    ROUTER_OVER_LABEL: 'Zwischenziel',
    ROUTER_TO_LABEL: 'Ziel',
    ROUTER_CLEAR_TITLE: 'Löschen',
    ROUTER_CLEAR_HTML: '',
    ROUTER_Label_Interim: 'Zwischenziel',

    ROUTER_SWITCH: 'Wechsel von Start und Ziel',
    ROUTER_OVER: 'Zwischenziel hinzufügen',
    ROUTER_PRINT: 'Routenbeschreibung drucken',

    ROUTER_VIEW_LABEL_ROUTE: 'Route:',
    ROUTER_VIEW_LABEL_DISTANCE: 'Entfernung:',
    ROUTER_VIEW_LABEL_TIME: 'Zeit:',
    ROUTER_VIEW_LABEL_PROFILE: 'Profil:',

    ROUTER_VIEW_ALERT_ADDRESS: 'Adresse nicht gefunden.',
    ROUTER_VIEW_ALERT_GOCODING: 'Zugriff auf Geocoder fehlgeschlagen.',

    ROUTER: 'Router',
    ROUTER_N: 'Norden',
    ROUTER_E: 'Ost',
    ROUTER_S: 'Süden',
    ROUTER_W: 'Westen',
    ROUTER_NE: 'Nordost',
    ROUTER_SE: 'Südost',
    ROUTER_SW: 'Südwest',
    ROUTER_NW: 'Nordwest',
    ROUTER_DIRECTION_0: 'Unbekannte Anweisung[ auf <b>%s</b>]',
    ROUTER_DIRECTION_1: 'Geradeaus weiterfahren[ auf <b>%s</b>]',
    ROUTER_DIRECTION_2: 'Leicht rechts abbiegen [auf <b>%s</b>]',
    ROUTER_DIRECTION_3: 'Rechts abbiegen[ auf <b>%s</b>]',
    ROUTER_DIRECTION_4: 'Scharf rechts abbiegen[ auf <b>%s</b>]',
    ROUTER_DIRECTION_5: 'Wenden[ auf <b>%s</b>]',
    ROUTER_DIRECTION_6: 'Scharf links abbiegen[ auf <b>%s</b>]',
    ROUTER_DIRECTION_7: 'Links abbiegen[ auf <b>%s</b>]',
    ROUTER_DIRECTION_8: 'Leicht links abbiegen[ auf <b>%s</b>]',
    ROUTER_DIRECTION_10: 'Fahren Sie Richtung <b>%d</b>[ auf <b>%s</b>]',
    'ROUTER_DIRECTION_11-1': 'In den Kreisverkehr einfahren und bei erster Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-2': 'In den Kreisverkehr einfahren und bei zweiter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-3': 'In den Kreisverkehr einfahren und bei dritter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-4': 'In den Kreisverkehr einfahren und bei vierter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-5': 'In den Kreisverkehr einfahren und bei fünfter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-6': 'In den Kreisverkehr einfahren und bei sechster Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-7': 'In den Kreisverkehr einfahren und bei siebter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-8': 'In den Kreisverkehr einfahren und bei achter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-9': 'In den Kreisverkehr einfahren und bei neunter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-x': 'In den Kreisverkehr einfahren und bei einer der vielen Möglichkeiten[ in Richtung <b>%s</b>] verlassen',
    ROUTER_DIRECTION_15: 'Sie haben Ihr Ziel erreicht',

    'ROUTER_5.X_TYPE_0': ' %m fahren[ auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_1': ' %m dem Straßenverlauf folgen[ als <b>%s</b>]',
    'ROUTER_5.X_TYPE_2': ' Fahren Sie[ auf <b>%s</b>] los',
    'ROUTER_5.X_TYPE_3': ' Das Ziel befindet sich <b>%m</b>',
    'ROUTER_5.X_TYPE_4': ' Weiterfahren[ auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_5': ' %m [auf <b>%s</b> ]auffahren',
    'ROUTER_5.X_TYPE_6': ' %m [auf <b>%s</b> ]abfahren',
    'ROUTER_5.X_TYPE_7': ' Den Fahrstreifen %m benutzen [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_8': ' %m abbiegen [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_9': ' Den Fahrstreifen %m benutzen [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_10': ' %m fahren um auf der Straße zu bleiben',
    'ROUTER_5.X_TYPE_11': ' Im Kreisverkehr die <b>%z.</b> Ausfahrt nehmen [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_12': ' Im Kreisverkehr die <b>%z.</b> Ausfahrt nehmen [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_13': ' %m fahren [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_14': ' abbiegen[ auf <b>%s</b>]',

    'ROUTER_5.X_MOD_0': 'Uturn',
    'ROUTER_5.X_MOD_1': 'Scharf rechts',
    'ROUTER_5.X_MOD_2': 'Rechts',
    'ROUTER_5.X_MOD_3': 'Leicht rechts',
    'ROUTER_5.X_MOD_4': 'Geradeaus',
    'ROUTER_5.X_MOD_5': 'Leicht links',
    'ROUTER_5.X_MOD_6': 'Links',
    'ROUTER_5.X_MOD_7': 'Scharf links',
    'ROUTER_5.X_MOD_8': 'in der Nähe',

    ROUTER_FROM: 'Start',
    ROUTER_TO: 'Ziel',
    ROUTER_FIND_ROUTE: 'Route finden',
    ROUTER_LOC_ROUTE_TO: 'Route hierhin',
    ROUTER_ROUTEDESC: 'Routenbeschreibung',
    ROUTER_ROUTENAME: 'Route',
    ROUTER_DISTANCE: 'Distanz',
    ROUTER_TIME: 'Zeit',
    ROUTER_REV_GEOCODING: 'Ermittle Adresse...',
    ROUTER_ERROR_REV_GEOCODING: 'Fehler beim Ermitteln der Adresse',
    ROUTER_SEARCHING: 'Suche Adresse...',
    ROUTER_ERROR_SEARCHING: 'Fehler beim Suchen der Adresse',
    ROUTER_CALC_ROUTE: 'Berechne Route...',
    ROUTER_ERROR_CALC_ROUTE: 'Fehler beim Berechnen der Route',

    MEASURETOOLS: 'Messwerkzeuge',
    MEASURETOOLS_INFO: 'Wählen Sie weiter unten einen Messtyp aus und starten Sie die Messung durch das Klicken auf der Karte.',
    MEASURETOOLS_INFO_ADDITIONAL: '(Einzelne Messungen können mit einem Doppelklick beendet werden.)',
    MEASURETOOLS_VIEW_TRIGGER_SELECT: 'Auswahl Modus',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_LINESTRING: 'Strecken messen',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_POLYGON: 'Flächen messen',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_CIRCLE: 'Radius messen',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_FREEHAND: 'Freihand messen',

    GEOBOOKMARKS_PLACEHOLDER: 'Neue Bezeichnung',

    INFOPAGE: 'Informationen',
    ADDITIONALPANEL: 'Panel',
    ADDITIONALPANEL_VIEW_TRIGGER: 'Panel anzeigen',
    ACCOUNT: 'Account',
    ACCOUNT_VIEW_TRIGGER: 'Account anzeigen',

    SEARCH_NOT_FOUND: 'Die Lokation konnte nicht gefunden werden. Bitte versuchen Sie eine andere Eingabe.',

    NONE: '' // last line
  }); // end of "language constants" ---
})(jQuery, this.c4g);

var langConstants = this.c4g.maps.constant.i18n;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-constant.js":
/*!**************************************************!*\
  !*** ./Resources/public/js/c4g-maps-constant.js ***!
  \**************************************************/
/*! exports provided: cssConstants */
/*! exports used: cssConstants */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cssConstants; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.constant = this.c4g.maps.constant || {};

(function ($, c4g) {
  'use strict';

  /**
   * CSS constants
   */

  c4g.maps.constant.css = $.extend(c4g.maps.constant.css, {

    OPEN: 'c4g-open',
    CLOSE: 'c4g-close',
    CLOSEABLE: 'c4g-closeable',
    ENABLED: 'c4g-enabled',
    DISABLED: 'c4g-disabled',
    HIDE: 'c4g-hide',
    ICON: 'c4g-icon',
    CONTROL: 'c4g-control',
    COPY: 'c4g-copy',
    REFRESH: 'c4g-refresh',
    ACTIVE: 'c4g-active',
    INACTIVE: 'c4g-inactive',
    LOADING: 'c4g-loading',
    ANIMATION_SPIN: 'c4g-animation-spin',
    LARGE: 'c4g-large',
    SMALL: 'c4g-small',
    HORIZONTAL: 'c4g-horizontal',
    VERTICAL: 'c4g-vertical',

    ATTRIBUTION_LOGO: 'c4g-attribution-logo',
    CONTROL_CONTAINER_TL: 'c4g-control-container-top-left',
    CONTROL_CONTAINER_TR: 'c4g-control-container-top-right',
    CONTROL_CONTAINER_BL: 'c4g-control-container-bottom-left',
    CONTROL_CONTAINER_BL_SUB: 'c4g-control-container-bottom-left-sub',
    CONTROL_CONTAINER_BR: 'c4g-control-container-bottom-right',
    EDITOR_DRAW_CONTENT_POINT: 'c4g-draw-content-point',
    EDITOR_DRAW_CONTENT_FREEHAND: 'c4g-draw-content-freehand',
    EDITOR_DRAW_CONTENT_LINESTRING: 'c4g-draw-content-line',
    EDITOR_DRAW_CONTENT_POLYGON: 'c4g-draw-content-polygon',
    EDITOR_DRAW_CONTENT_CIRCLE: 'c4g-draw-content-circle',
    EDITOR_DRAW_CONTENT_PROJECT: 'c4g-draw-content-project',
    EDITOR_DRAW_TRIGGER: 'c4g-draw-trigger',
    EDITOR_CONTENT_SELECT: 'c4g-content-select',
    EDITOR_DRAW_OPTIONS: 'c4g-editor-draw-options',
    EDITOR_FEATURE_APPLY: 'c4g-editor-feature-apply',
    EDITOR_FEATURE_DELETE: 'c4g-editor-feature-delete',
    EDITOR_FEATURE_MODIFY: 'c4g-editor-feature-modify',
    EDITOR_VIEW_TRIGGER_SELECT: 'c4g-editor-view-trigger-select',
    EDITOR_VIEW_TRIGGER_DRAW_POINT: 'c4g-editor-view-trigger-draw-point',
    EDITOR_VIEW_TRIGGER_DRAW_FREEHAND: 'c4g-editor-view-trigger-draw-freehand',
    EDITOR_VIEW_TRIGGER_DRAW_LINESTRING: 'c4g-editor-view-trigger-draw-line',
    EDITOR_VIEW_TRIGGER_DRAW_POLYGON: 'c4g-editor-view-trigger-draw-polygon',
    EDITOR_VIEW_TRIGGER_DRAW_CIRCLE: 'c4g-editor-view-trigger-draw-circle',
    GEOSEARCH: 'c4g-geosearch',
    GEOSEARCH_WRAPPER: 'c4g-geosearch-wrapper',
    GEOSEARCH_TRIGGER: 'c4g-geosearch-trigger',
    GEOSEARCH_START: 'c4g-geosearch-start',
    GRATICULE: 'c4g-graticule',
    MEASURETOOLS_VIEW_TRIGGER_SELECT: 'c4g-measuretools-view-trigger-select',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_LINESTRING: 'c4g-measuretools-view-trigger-draw-line',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_POLYGON: 'c4g-measuretools-view-trigger-draw-polygon',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_CIRCLE: 'c4g-measuretools-view-trigger-draw-circle',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_FREEHAND: 'c4g-measuretools-view-trigger-draw-freehand',
    PRINT: 'c4g-print',
    INFOPAGE_VIEW_TRIGGER: 'c4g-infopage-view-trigger',
    INFOPAGE: 'c4g-infopage',
    ADDITIONALPANEL_VIEW_TRIGGER: 'c4g-additionalpanel-view-trigger',
    ADDITIONALPANEL: 'c4g-additionalpanel',
    ACCOUNT_VIEW_TRIGGER: 'c4g-account-view-trigger',
    ACCOUNT: 'c4g-account',
    OVERVIEWMAP: 'c4g-overviewmap',
    OVERVIEWMAP_WRAPPER: 'c4g-overviewmap-wrapper',
    GEOBOOKMARKS: 'c4g-geobookmarks',
    PERMALINK: 'c4g-permalink',
    PERMALINK_POPUP: 'c4g-permalink-popup',
    POPUP_CLOSE: 'c4g-popup-close',
    POPUP_ROUTE_WRAPPER: 'c4g-popup-route-wrapper',
    POPUP_ROUTE_FROM: 'c4g-popup-route-from',
    POPUP_ROUTE_TO: 'c4g-popup-route-to',
    PORTSIDE: 'c4g-portside',
    PORTSIDE_CONTAINER: 'c4g-portside-container',
    PORTSIDE_CONTROL: 'c4g-portside-control',
    PORTSIDE_WRAPPER: 'c4g-portside-wrapper',
    PORTSIDE_TITLEBAR: 'c4g-portside-titlebar',
    PORTSIDE_TOP_TOOLBAR: 'c4g-portside-top-toolbar',
    PORTSIDE_CONTENT_CONTAINER: 'c4g-portside-content-container',
    PORTSIDE_BOTTOM_TOOLBAR: 'c4g-portside-bottom-toolbar',
    PORTSIDE_STATUSBAR: 'c4g-portside-statusbar',
    PORTSIDE_VIEWTRIGGERBAR: 'c4g-portside-viewtriggerbar',
    PORTSIDE_HEADLINE: 'c4g-portside-headline',
    PORTSIDE_BUTTONBAR: 'c4g-portside-buttonbar',
    PORTSIDE_BUTTON: 'c4g-portside-button',
    PORTSIDE_HIDE: 'c4g-portside-hide',
    PORTSIDE_CLOSE: 'c4g-portside-close',
    SPINNER: 'c4g-spinner',
    STARBOARD: 'c4g-starboard',
    STARBOARD_CONTAINER: 'c4g-starboard-container',
    STARBOARD_CONTROL: 'c4g-starboard-control',
    STARBOARD_WRAPPER: 'c4g-starboard-wrapper',
    STARBOARD_TITLEBAR: 'c4g-starboard-titlebar',
    STARBOARD_CONTENT_CONTAINER: 'c4g-starboard-content-container',
    STARBOARD_BOTTOM_TOOLBAR: 'c4g-starboard-bottom-toolbar',
    STARBOARD_STATUSBAR: 'c4g-starboard-statusbar',
    STARBOARD_VIEWTRIGGERBAR: 'c4g-starboard-viewtriggerbar',
    STARBOARD_HEADLINE: 'c4g-starboard-headline',
    STARBOARD_BUTTONBAR: 'c4g-starboard-buttonbar',
    STARBOARD_BUTTON: 'c4g-starboard-button',
    STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER: 'c4g-starboard-view-trigger-baselayerswitcher',
    STARBOARD_VIEW_TRIGGER_LAYERSWITCHER: 'c4g-starboard-view-trigger-layerswitcher',
    STARBOARD_CLOSE: 'c4g-starboard-close',
    STARBOARD_CONTENT_BASELAYERSWITCHER: 'c4g-content-baselayerswitcher',
    STARBOARD_BASELAYERTREE: 'c4g-baselayertree',
    STARBOARD_LAYERTREE: 'c4g-layertree',
    STARBOARD_CONTENT_LAYERSWITCHER: 'c4g-content-layerswitcher',
    TOOLTIP_POPUP: 'c4g-tooltip-popup',
    ZOOM_LEVEL: 'c4g-zoom-level',

    ROUTER_INPUT_WRAPPER: 'c4g-router-input-wrapper',
    ROUTER_PROFILE_WRAPPER: 'c4g-router-profile-wrapper',
    ROUTER_INPUT_FROM: 'c4g-router-input-from',
    ROUTER_INPUT_TO: 'c4g-router-input-to',
    ROUTER_INPUT_CLEAR: 'c4g-router-input-clear',
    ROUTER_BUTTONBAR: 'c4g-router-buttonbar',
    ROUTER_ATTRIBUTION_WRAPPER: 'c4g-router-attribution-wrapper',
    ROUTER_INSTRUCTIONS_WRAPPER: 'c4g-router-instructions-wrapper',
    ROUTER_INSTRUCTIONS_HEADER: 'c4g-router-instructions-header',

    ROUTER_SWITCH: 'c4g-router-switch',
    ROUTER_OVER: 'c4g-router-over',
    ROUTER_PRINT: 'c4g-router-print',

    ROUTER_PROFILE_CAR: 'c4g-router-profile-car',
    ROUTER_PROFILE_HGV: 'c4g-router-profile-hgv',
    ROUTER_PROFILE_BIKE: 'c4g-router-profile-bike',
    ROUTER_PROFILE_FOOT: 'c4g-router-profile-foot',
    ROUTER_PROFILE_WHEELCHAIR: 'c4g-router-profile-wheelchair',

    ROUTER_INSTRUCTIONS_TABLE: 'c4g-router-instruction-table',
    ROUTER_INSTRUCTIONS_ITEM: 'c4g-router-instruction-item',
    ROUTER_INSTRUCTIONS_ITEM_ODD: 'c4g-router-instruction-item--odd',
    ROUTER_INSTRUCTIONS_ITEM_EVEN: 'c4g-router-instruction-item--even',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION: 'c4g-router-instruction-item_direction',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION_ICON: 'c4g-router-instruction-item_direction-icon',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT: 'c4g-router-instruction-item_text',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION_DISTANCE: 'c4g-router-instruction-item_distance',

    OL_CONTROL: 'ol-control',
    OL_UNSELECTABLE: 'ol-unselectable',

    OL_OVERLAYCONTAINER: 'ol-overlaycontainer',
    OL_OVERLAYCONTAINER_SE: 'ol-overlaycontainer-stopevent',
    OL_VIEWPORT: 'ol-viewport',
    OL_ZOOM: 'ol-zoom',
    OL_ZOOM_IN: 'ol-zoom-in',
    OL_ZOOM_EXT: 'ol-zoom-extent',
    OL_ZOOM_HOME: 'ol-zoom-home',
    OL_ZOOM_POS: 'ol-zoom-position',
    OL_ZOOM_WITH_EXT: 'ol-zoom-with-extent',
    OL_ZOOM_WITH_HOME: 'ol-zoom-with-home',
    OL_ZOOM_WITH_POS: 'ol-zoom-with-position',
    OL_ZOOM_SLIDER: 'ol-zoom-slider',
    OL_ZOOM_WITH_SLIDER: 'ol-zoom-with-slider',

    NONE: '' // last line
  }); // end of "css constants" ---
})(jQuery, this.c4g);

var cssConstants = this.c4g.maps.constant.css;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-grid.js":
/*!******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-grid.js ***!
  \******************************************************/
/*! exports provided: Grid */
/*! exports used: Grid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Grid; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};




(function ($, c4g) {
  'use strict';

  /**
   * Control to toggle a grid on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Grid = function (opt_options) {

    var self = this;
    var options = opt_options || {};

    var element, button;

    var objGrid = new ol.Graticule({
      /*
      strokeStyle: new ol.style.Stroke({
          width: 2,
          lineDash: [0.5, 4]
      }),*/
      showLabels: true
    });

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].GRATICULE,
      switchable: true,
      tipLabel: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_GRID,
      label: '#',
      disableLabel: '[]'
    }, options);

    // @TODO move functions to prototype?
    //
    // function to enable the grid
    var enable = function enable() {
      objGrid.setMap(self.getMap());
      $(element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ENABLED);
      // if (options.caching) {
      //     c4g.maps.utils.storeValue('grid', '1');
      // }
    };

    // function to disable the grid
    var disable = function disable() {
      objGrid.setMap(null);
      $(element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ENABLED);
      // if (options.caching) {
      //     c4g.maps.utils.storeValue('grid', '0');
      // }
    };

    // function to toggle the grid
    var toggle = function toggle(event) {
      event.stopPropagation();
      // loose focus, otherwise it looks messy
      this.blur();
      if (objGrid.getMap()) {
        disable();
      } else {
        enable();
      }
    };

    // wrapper div
    element = document.createElement('div');
    element.className = options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL;

    if (options.switchable) {
      // button
      button = document.createElement('button');
      button.title = options.tipLabel;
      element.appendChild(button);

      // set onClick to the toggle-function
      button.addEventListener('click', toggle, false);
      button.addEventListener('touchstart', toggle, false);
    }

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });

    // if (options.caching && (c4g.maps.utils.getValue('grid') == '1')) {
    //     objGrid.setMap(self.getMap());
    //     $(element).addClass(cssConstants.ENABLED);
    // }
  };
  ol.inherits(c4g.maps.control.Grid, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Grid.prototype = $.extend(c4g.maps.control.Grid.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Grid = this.c4g.maps.control.Grid;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-overviewmap.js":
/*!*************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-overviewmap.js ***!
  \*************************************************************/
/*! exports provided: OverviewMap */
/*! exports used: OverviewMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OverviewMap; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};




(function ($, c4g) {
  'use strict';

  /**
   * Displays a overviewmap on the map.
   *   This class wraps the ovm a bit differently than
   *   the standard ol-overviemap, to allow proper css-transitions.
   *
   *   Not clean, but unique ;)
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.OverviewMap = function (options) {

    var element, trigger, triggerIcon, ovm;

    // default options
    options = $.extend({
      collapsed: true,
      tipLabel: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_OVERVIEWMAP,
      layers: [new ol.layer.Tile({ source: new ol.source.OSM() })]
    }, options);

    element = document.createElement('div');
    element.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OVERVIEWMAP + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
    if (options.collapsed) {
      element.className += ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE;
    } else {
      element.className += ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN;
    }
    options.target.appendChild(element);

    trigger = document.createElement('button');
    trigger.title = options.tipLabel;
    element.appendChild(trigger);

    triggerIcon = document.createElement('span');
    triggerIcon.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON;
    trigger.appendChild(triggerIcon);

    $(trigger).click(function () {
      if ($(element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
        $(element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      } else {
        $(element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      }
      try {
        this.blur();
      } catch (ignore) {}
    });

    ovm = new ol.control.OverviewMap({
      collapsible: false,
      collapsed: false,
      target: element,
      layers: options.layers
    });

    return ovm;
  };

  /*
   * Add methods
   */
  c4g.maps.control.OverviewMap.prototype = $.extend(c4g.maps.control.OverviewMap.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var OverviewMap = this.c4g.maps.control.OverviewMap;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-permalink.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-permalink.js ***!
  \***********************************************************/
/*! exports provided: Permalink */
/*! exports used: Permalink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Permalink; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





(function ($, c4g) {
  'use strict';

  /**
   * Control to generate a permalink to the current Map state.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              options  control options.
   */

  c4g.maps.control.Permalink = function (options) {

    var self, button, copyButton, refreshButton;

    this.config = options || {};
    self = this;

    // default options
    this.config = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PERMALINK,
      // mapController: undefined,
      tipLabel: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_PERMALINK,
      getParameter: false,
      label: 'P',
      target: undefined
    }, this.config);

    if (!this.config.mapController) {
      return false;
    }

    // wrapper div
    this.element = document.createElement('div');
    this.element.className = this.config.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL;

    // button
    button = document.createElement('button');
    button.title = this.config.tipLabel;
    this.element.appendChild(button);

    // set onClick to the toggle-function
    // button.addEventListener('click', this.toggle, false);
    // button.addEventListener('touchstart', this.toggle, false);
    $(button).click(function () {
      try {
        this.blur();
      } catch (ignore) {}
      self.toggle();
    });

    // popup
    // will be attached when opened the first time
    // to make sure its really the last element in the container
    this.popupAttached = false;
    this.popup = document.createElement('div');
    this.popup.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CONTROL + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PERMALINK_POPUP + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE;

    // textfield
    this.textfield = document.createElement('input');
    this.textfield.type = 'text';
    this.popup.appendChild(this.textfield);

    // copy button
    copyButton = document.createElement('button');
    copyButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].COPY + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON;
    copyButton.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].COPY_TO_CLIPBOARD;
    copyButton.setAttribute('data-clipboard-target', '.' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PERMALINK_POPUP + ' > input[type="text"]');
    this.popup.appendChild(copyButton);
    new Clipboard(copyButton);

    // refresh button
    refreshButton = document.createElement('button');
    refreshButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].REFRESH + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON;
    refreshButton.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].REFRESH;
    $(refreshButton).click(function () {
      self.generateLinkFromCurrentState({ target: self.textfield });
    });
    this.popup.appendChild(refreshButton);

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: this.element,
      target: this.config.target
    });
  };
  ol.inherits(c4g.maps.control.Permalink, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Permalink.prototype = $.extend(c4g.maps.control.Permalink.prototype, {

    open: function open() {
      if (!this.popupAttached) {
        $(this.popup).slideDown(1);
        this.config.target.appendChild(this.popup);
        this.popupAttached = true;
      }
      $(this.popup).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      $(this.element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      this.generateLinkFromCurrentState({ target: this.textfield });
    },

    close: function close() {
      $(this.popup).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
      $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
    },

    toggle: function toggle() {
      if ($(this.popup).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
        this.open();
      } else {
        this.close();
      }
    },

    generateLinkFromCurrentState: function generateLinkFromCurrentState(opt_options) {
      var options, proxy, mapView, parameters, link, center, baseLayerIdx, layerIdx, layers;

      options = opt_options || {};
      if (!options.paramCount || !(options.paramCount === 6 || options.paramCount === 2 || options.paramCount === 1)) {
        options.paramCount = 6;
      }

      parameters = [];
      mapView = this.config.mapController.map.getView();
      proxy = this.config.mapController.proxy;

      center = mapView.getCenter();
      center = ol.proj.transform([center[0], center[1]], 'EPSG:3857', 'EPSG:4326');

      parameters.push(+center[0].toFixed(5));
      parameters.push(+center[1].toFixed(5));
      parameters.push(mapView.getZoom());
      parameters.push(+mapView.getRotation().toFixed(2));

      // find active baselayer
      if (proxy.activeBaselayerId) {
        parameters.push(proxy.activeBaselayerId);
      } else {
        parameters.push(0);
      }

      // find active layers
      layers = [];
      for (layerIdx in proxy.activeLayerIds) {
        if (proxy.activeLayerIds.hasOwnProperty(layerIdx)) {
          layers.push(parseInt(layerIdx, 10));
        }
      }
      // delta-decode if there are more than one layer
      if (layers.length > 1) {
        layers = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].deltaEncode(layers);
        layers = layers.join(':');
      } else {
        layers = layers[0] || '0';
      }
      parameters.push(layers);
      parameters = parameters.join('/');

      // build link
      link = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].setUrlParam(parameters, this.config.getParameter);

      if (options.target) {
        options.target.value = link;
      } else {
        return link;
      }
    }, // end of generateLinkFromCurrentState

    generateLink: function generateLink(parameters) {
      if (!parameters || !(parameters.length === 6 || parameters.length === 2 || parameters.length === 1)) {
        return false;
      }

      // build and return link
      return __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].setUrlParam(parameters.join('/'), this.config.getParameter);
    } // end of generateLink

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Permalink = this.c4g.maps.control.Permalink;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-account.js":
/*!******************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-account.js ***!
  \******************************************************************/
/*! exports provided: Account */
/*! exports used: Account */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Account; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {c4g.maps.control.Sideboard}
   *
   * @param  {[type]}  mapController  [description]
   * @param  {[type]}  config         [description]
   */

  c4g.maps.control.Account = function (opt_options) {

    // extend options
    this.options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACCOUNT,
      name: 'account',
      headline: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].ACCOUNT,
      create: true,
      mapController: undefined,
      direction: 'left'
    }, opt_options);

    if (!this.options.mapController) {
      return false;
    }

    this.mainSection = document.createElement('div');

    // call parent constructor
    __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Account, __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  /**
   * Methods
   */
  c4g.maps.control.Account.prototype = $.extend(c4g.maps.control.Account.prototype, {

    /**
     * Executed when the panel will be opened for the first time.
     * [init description]
     *
     * @return  {boolean}  Returns |true| on success
     */
    init: function init() {
      var self = this;

      this.spinner.show();

      this.viewAccount = this.addAccountView();
      this.viewAccount.activate();

      var proxy = self.options.mapController.proxy;
      var map = self.options.mapController.map;

      this.mainSectionAccount = document.createElement('p');
      this.mainSectionAccount.innerHTML = self.options.mapController.data.account;
      this.mainSection.appendChild(this.mainSectionAccount);
      this.contentContainer.setElement(this.mainSection);

      this.spinner.hide();
      return true;
    }, // end of "init()"


    addAccountView: function addAccountView() {
      var accountView;

      accountView = this.addView({
        name: 'account',
        triggerConfig: {
          tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].ACCOUNT_VIEW_TRIGGER,
          className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACCOUNT_VIEW_TRIGGER,
          withHeadline: false
        },
        sectionElements: [{ section: this.contentContainer, element: this.mainSection }, { section: this.topToolbar, element: this.viewTriggerBar }]
      });

      return accountView;
    }, // end of "addAccountView()"

    addAccount: function addAccount(options) {
      var self, TRIGGER_ACCOUNT, viewAccount, source, interaction, features;

      self = this;

      //TRIGGER_ACCOUNT = 'ACCOUNT_VIEW_TRIGGER_' + options.type.toUpperCase();

      viewAccount = self.addAccount({
        name: 'Account',
        triggerConfig: {
          tipLabel: 'Account', //langConstants[TRIGGER_DRAW],
          className: 'c4g_account_trigger', //cssConstants[TRIGGER_DRAW]
          withHeadline: false
        },
        sectionElements: [{ section: self.topToolbar, element: self.viewTriggerBar }],
        initFunction: function initFunction() {

          // Show loading animation
          self.spinner.show();

          // printFunction = function (event) {
          //   var infoButton,
          //       featureGeometry,
          //       translateInteraction,
          //       modifyInteraction,
          //       modifyButton,
          //       applyButton;
          //
          //
          //     infoButton = event.target;
          //
          //   // add apply button
          //   applyButton = document.createElement('button');
          //   applyButton.className = cssConstants.ICON + ' ' + cssConstants.EDITOR_FEATURE_APPLY;
          //   applyButton.title = langConstants.EDITOR_FEATURE_APPLY;
          //   applyButton.setAttribute('feat_id', i);
          //
          // }; // end of "modifyFeatureFunction()"

          features = new ol.Collection();

          self.spinner.hide();
          return true;
        },
        activateFunction: function activateFunction() {},
        deactivateFunction: function deactivateFunction() {}
      });

      return viewAccount;
    } // end of "addAccount()"

  });
})(jQuery, this.c4g);

var Account = this.c4g.maps.control.Account;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-editor.js":
/*!*****************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-editor.js ***!
  \*****************************************************************/
/*! exports provided: Editor */
/*! exports used: Editor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Editor; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_tooltippopup__ = __webpack_require__(/*! ./c4g-maps-misc-tooltippopup */ "./Resources/public/js/c4g-maps-misc-tooltippopup.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};







(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @constructor
   * @extend {c4g.maps.control.Sideboard}
   *
   * @param  {[type]}  mapController  [description]
   */

  c4g.maps.control.Editor = function (options) {

    // extend options
    this.options = $.extend({
      name: 'editor',
      type: 'frontend',
      dataField: false,
      create: true,
      mapController: undefined,
      drawModes: ['Point', 'Line', 'Polygon', 'Circle', 'Freehand'],
      direction: 'left',
      headline: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].EDITOR
      // initMode: 'select'
    }, options);

    if (!this.options.mapController) {
      console.warn('Coul not initiallize Editor, without valid mapController.');
      return false;
    }

    //c4g.maps.hook.editor_loadTabs = [];
    //c4g.maps.hook.editor_featureChanged = [];
    this.tabs = [];
    // @TODO
    // this.typeLayer = undefined;
    // this.activeMode = this.options.initMode;
    // this.vectorSource = new ol.source.Vector();
    // this.activeDrawInteraction = undefined;
    this.lastDrawInteraction = undefined;
    this.proxy = this.options.mapController.proxy;

    if (this.options.dataField && typeof this.options.dataField === 'string') {
      this.options.dataField = $(this.options.dataField) || false;
    }

    // call parent constructor
    __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Editor, __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  /**
   * Methods
   */
  c4g.maps.control.Editor.prototype = $.extend(c4g.maps.control.Editor.prototype, {

    /**
     * Executed when the editor will be opened for the first time.
     * [init description]
     *
     * @return  {boolean}  Returns |true| on success
     */
    init: function init(opt_externalinit) {
      var self, layerStyleFunction, viewSelect;

      self = this;
      this.spinner.show();

      layerStyleFunction = function layerStyleFunction(feature, projection) {
        var styleId;

        if (feature && typeof feature.get === 'function') {
          // get the styleId of the current feature
          styleId = feature.get('styleId');
          // and execute the appropriate function
          if (self.proxy.locationStyleController.arrLocStyles[styleId]) {
            return self.proxy.locationStyleController.arrLocStyles[styleId].style(feature, projection);
          }
        }
        return false;
      };

      // Add editor layers
      this.editPointLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editLineLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editPolygonLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editCircleLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editFreehandLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });

      this.editLayerGroup = new ol.layer.Group({
        layers: new ol.Collection([this.editFreehandLayer, this.editCircleLayer, this.editPolygonLayer, this.editLineLayer, this.editPointLayer]),
        visible: true
      });
      this.options.mapController.map.addLayer(this.editLayerGroup);

      // Add and activate select view
      this.tabs.push(this.addSelectView());
      this.tabs[0].activate();

      //   AJAX: get editor config
      $.getJSON(self.options.mapController.data.api.editor + '/' + self.options.mapController.data.profile)
      // Create views for draw-features with at least one locationstyle
      .done(function (data) {

        // Draw-point view
        if (data.styles_point.length && data.styles_point.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Point', styleIds: data.styles_point }));
        }
        // Draw-line view
        if (data.styles_line.length && data.styles_line.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'LineString', styleIds: data.styles_line }));
        }
        // Draw-polygon view
        if (data.styles_polygon.length && data.styles_polygon.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Polygon', styleIds: data.styles_polygon }));
        }
        // Draw-circle view
        if (data.styles_circle.length && data.styles_circle.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Circle', styleIds: data.styles_circle }));
        }
        // Draw-freehand view
        if (data.styles_freehand.length && data.styles_freehand.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Freehand', styleIds: data.styles_freehand }));
        }
        // Call hook function for dynamically added tabs
        if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.editor_loadTabs) === 'object') {
          __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.editor_loadTabs, self);
        }

        return true;
      }).fail(function () {
        // @TODO error-messages
        //   1) Visible message 4 users (i18n)
        //   2) Technical console.warn
        console.warn('An error occured while trying to load the editor configuration...');
        return false;
      }).always(function () {
        var layers;
        if (self.options.type === 'backend') {
          // import GeoJSON when in backend mode
          self.importGeoJSON();
        } else {
          // load session-features when in frontend mode
          self.load();
        }
        // Add autosave to the layers when a feature is added
        layers = self.editLayerGroup.getLayers();
        layers.forEach(function (element, index, array) {
          element.getSource().on('addfeature', function () {
            self.save();
          });
        });

        //self.editPointLayer.getSource().on('addfeature', function () {self.save(); });
        //self.editLineLayer.getSource().on('addfeature', function () {self.save(); });
        //self.editPolygonLayer.getSource().on('addfeature', function () {self.save(); });
        self.spinner.hide();
      });
      if (opt_externalinit) {
        this.initialized = true;
      }

      return true;
    },

    /**
     * Executed before editor will be closed
     *
     * @return  {[type]}  [description]
     */
    preCloseFunction: function preCloseFunction() {
      if (this.editLayerGroup.getVisible()) {
        this.editLayerGroup.setVisible(false);
        this.options.mapController.map.removeLayer(this.editLayerGroup);
      }
    },

    /**
     * Executed before editor will be open
     *
     * @return  {[type]}  [description]
     */
    preOpenFunction: function preOpenFunction() {
      if (!this.editLayerGroup.getVisible()) {
        this.editLayerGroup.setVisible(true);
        this.options.mapController.map.addLayer(this.editLayerGroup);
      }
    },

    addSelectView: function addSelectView() {
      var self, selectInteraction, selectBoxInteraction, selectedFeatures, selectContentWrapper, selectContentHeadline, selectContent, selectContentInfo, selectView, fnHandleSelection;

      self = this;

      selectContentWrapper = document.createElement('div');

      selectContentHeadline = document.createElement('div');
      selectContentHeadline.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].EDITOR_VIEW_TRIGGER_SELECT;
      selectContentHeadline.className = 'contentHeadline';
      selectContentWrapper.appendChild(selectContentHeadline);

      selectContent = document.createElement('div');
      selectContent.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_CONTENT_SELECT;
      selectContentInfo = document.createElement('p');
      selectContentInfo.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].EDITOR_SELECT_INFO;
      selectContentInfo.innerHTML += '<br><br><sub>' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].EDITOR_SELECT_INFO_ADDITIONAL + '</sub>';
      selectContent.appendChild(selectContentInfo);
      selectContentWrapper.appendChild(selectContent);

      selectView = this.addView({
        name: 'select',
        triggerConfig: {
          tipLabel: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].EDITOR_VIEW_TRIGGER_SELECT,
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_VIEW_TRIGGER_SELECT,
          withHeadline: true
        },
        sectionElements: [{ section: this.contentContainer, element: selectContentWrapper }, { section: this.topToolbar, element: this.viewTriggerBar }],
        initFunction: function initFunction() {
          selectInteraction = new ol.interaction.Select({
            layers: self.editLayerGroup.getLayers().getArray(),
            toggleCondition: ol.events.condition.platformModifierKeyOnly,
            style: function style(feature, projection) {
              var styleId, styleArray, styleRadius;

              if (feature && typeof feature.get === 'function') {
                // get the styleId of the current feature
                styleId = feature.get('styleId');
                // and execute the appropriate function
                if (self.proxy.locationStyleController.arrLocStyles[styleId]) {
                  styleArray = self.proxy.locationStyleController.arrLocStyles[styleId].style(feature, projection);

                  if (typeof styleArray[0].getImage === 'function' && styleArray[0].getImage() instanceof ol.style.Icon) {
                    styleRadius = 5;
                  } else {
                    styleRadius = parseInt(styleArray[0].getImage().getRadius(), 10) + 4;
                  }

                  styleArray.push(new ol.style.Style({
                    image: new ol.style.Circle({
                      stroke: new ol.style.Stroke({
                        color: 'rgba(255,255,255,.7)',
                        width: 5
                      }),
                      radius: styleRadius
                    }),
                    stroke: new ol.style.Stroke({
                      color: 'rgba(255,255,255,.7)',
                      width: 5
                    }),
                    fill: new ol.style.Fill({
                      color: 'rgba(255,255,255,.5)'
                    })
                  }));

                  return styleArray;
                }
              }
              return false;
            }
          }); // selectInteraction

          selectedFeatures = selectInteraction.getFeatures();

          selectBoxInteraction = new ol.interaction.DragBox({ condition: ol.events.condition.shiftKeyOnly });

          selectBoxInteraction.on('boxend', function (e) {
            var extent = selectBoxInteraction.getGeometry().getExtent();

            self.editLayerGroup.getLayers().forEach(function (layer) {
              layer.getSource().forEachFeatureIntersectingExtent(extent, function (feature) {
                selectedFeatures.push(feature);
              });
            });

            fnHandleSelection();
          });

          // clear selection when drawing a new box and when clicking on the map
          selectBoxInteraction.on('boxstart', function (e) {
            selectedFeatures.clear();
            fnHandleSelection();
          });

          fnHandleSelection = function fnHandleSelection() {
            var i, j, label, editorVars, headlineElement, inputNameElement, modifyButtonElement, deleteButtonElement, paragraphElement, strongElement, inputElement, featureCount, selectedFeature, blurOnEnter, inputChangeHandler, nameChangeHandler, modifyFeatureFunction, deleteFeatureFunction, renderSelectedFeaturesList;

            if (typeof self.applyFeatureModification === 'function') {
              self.applyFeatureModification();
            }

            blurOnEnter = function blurOnEnter(event) {
              if (event.which === 13) {
                try {
                  event.target.blur();
                } catch (ignore) {}
              }
            }; // end of "blurOnEnter()"

            nameChangeHandler = function nameChangeHandler(event) {
              var changedFeature;
              changedFeature = selectedFeatures.item(event.target.getAttribute('feat_id'));
              changedFeature.set('tooltip', __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].encodeGeoJsonProperty(event.target.value || ''));
              self.save();
              // Call hook to notify the feature change
              if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.editor_featureChanged) === 'object') {
                __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.editor_featureChanged, {
                  feature: changedFeature,
                  action: 'renamed'
                });
              }
            }; // end of "nameChangeHandler()"

            inputChangeHandler = function inputChangeHandler(event) {
              var currentVars, changedFeature;
              changedFeature = selectedFeatures.item(event.target.getAttribute('feat_id'));
              currentVars = changedFeature.get('editorVars');
              currentVars[event.target.getAttribute('var_id')].value = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].encodeGeoJsonProperty(event.target.value || '');
              changedFeature.set('editorVars', currentVars);
              self.save();
              // Call hook to notify the feature change
              if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.editor_featureChanged) === 'object') {
                __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.editor_featureChanged, {
                  feature: changedFeature,
                  action: 'changed_var'
                });
              }
            }; // end of "inputChangeHandler()"

            modifyFeatureFunction = function modifyFeatureFunction(event) {
              var modifyFeature, featureGeometry, translateInteraction, modifyInteraction, modifyButton, applyButton;

              if (typeof self.applyFeatureModification === 'function') {
                self.applyFeatureModification();
              }

              modifyButton = event.target;

              // get feature that should be modified
              modifyFeature = selectedFeatures.item(modifyButton.getAttribute('feat_id'));
              if (!modifyFeature || typeof modifyFeature.getGeometry !== 'function') {
                return false;
              }

              featureGeometry = modifyFeature.getGeometry();
              translateInteraction = false;
              modifyInteraction = false;

              if (!(featureGeometry instanceof ol.geom.LineString)) {
                translateInteraction = new ol.interaction.Translate({
                  features: new ol.Collection([modifyFeature])
                });
                self.options.mapController.map.addInteraction(translateInteraction);
              }
              if (!(featureGeometry instanceof ol.geom.Point)) {
                modifyInteraction = new ol.interaction.Modify({
                  features: new ol.Collection([modifyFeature])
                });
                self.options.mapController.map.addInteraction(modifyInteraction);
              }

              selectInteraction.setActive(false);

              // add apply button
              applyButton = document.createElement('button');
              applyButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_FEATURE_APPLY;
              applyButton.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].EDITOR_FEATURE_APPLY;
              applyButton.setAttribute('feat_id', i);

              self.applyFeatureModification = function (event) {
                if (translateInteraction) {
                  translateInteraction.setActive(false);
                  self.options.mapController.map.removeInteraction(translateInteraction);
                  translateInteraction = false;
                }
                if (modifyInteraction) {
                  self.options.mapController.map.removeInteraction(modifyInteraction);
                  modifyInteraction.setActive(false);
                  modifyInteraction = false;
                }
                selectInteraction.setActive(true);

                applyButton = applyButton.parentNode.replaceChild(modifyButton, applyButton);
                self.save();
                self.applyFeatureModification = false;
                // Call hook to notify the feature change
                if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.editor_featureChanged) === 'object') {
                  __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.editor_featureChanged, {
                    feature: modifyFeature,
                    action: 'edited'
                  });
                }
              };

              $(applyButton).click(self.applyFeatureModification);
              modifyButton = modifyButton.parentNode.replaceChild(applyButton, modifyButton);
            }; // end of "modifyFeatureFunction()"

            deleteFeatureFunction = function deleteFeatureFunction(event) {
              var featureIndex, featureGeometry, featureSource, deleteFeature;

              if (typeof self.applyFeatureModification === 'function') {
                self.applyFeatureModification();
              }

              featureIndex = event.target.getAttribute('feat_id');
              deleteFeature = selectedFeatures.item(featureIndex);
              featureGeometry = deleteFeature.getGeometry();

              // find right source
              if (featureGeometry instanceof ol.geom.Point) {
                featureSource = self.editPointLayer.getSource();
              } else if (featureGeometry instanceof ol.geom.LineString) {
                featureSource = self.editLineLayer.getSource();
              } else if (featureGeometry instanceof ol.geom.Polygon) {
                featureSource = self.editPolygonLayer.getSource();
              } else if (featureGeometry instanceof ol.geom.Circle) {
                featureSource = self.editCircleLayer.getSource();
              } else {
                // could not find right source
                console.warn('Could not delete the feature. Unable to find appropriate source.');
                return false;
              }

              // remove Feature from the source
              try {
                featureSource.removeFeature(deleteFeature);
              } catch (ignore) {
                if (featureGeometry instanceof ol.geom.LineString) {
                  featureSource = self.editFreehandLayer.getSource();
                  featureSource.removeFeature(deleteFeature);
                }
              }
              // and from the selection
              selectedFeatures.remove(deleteFeature);

              // rerender the selectionList
              renderSelectedFeaturesList();
              self.save();
              // Call hook to notify the feature change
              // Maybe pass the remaining features instead of the deletedFeature ?
              // Or maybe a second hook for deletion, where both is passed ?
              if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.editor_featureChanged) === 'object') {
                __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.editor_featureChanged, {
                  feature: deleteFeature,
                  action: 'deleted'
                });
              }
            }; // end of "deleteFeatureFunction()"

            renderSelectedFeaturesList = function renderSelectedFeaturesList() {
              featureCount = selectedFeatures.getLength();
              selectContent.innerHTML = '';
              if (featureCount > 0) {
                for (i = 0; i < featureCount; i += 1) {
                  selectedFeature = selectedFeatures.item(i);
                  headlineElement = document.createElement('h4');
                  // add name inputfield
                  inputNameElement = document.createElement('input');
                  inputNameElement.type = 'text';
                  inputNameElement.id = i;
                  inputNameElement.setAttribute('value', __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].decodeGeoJsonProperty(selectedFeature.get('tooltip') || ''));
                  inputNameElement.setAttribute('feat_id', i);
                  $(inputNameElement).keydown(blurOnEnter);
                  inputNameElement.onchange = nameChangeHandler;
                  headlineElement.appendChild(inputNameElement);
                  // add modify button
                  modifyButtonElement = document.createElement('button');
                  modifyButtonElement.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_FEATURE_MODIFY;
                  modifyButtonElement.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].EDITOR_FEATURE_MODIFY;
                  modifyButtonElement.setAttribute('feat_id', i);
                  $(modifyButtonElement).click(modifyFeatureFunction);
                  headlineElement.appendChild(modifyButtonElement);
                  // add delete button
                  deleteButtonElement = document.createElement('button');
                  deleteButtonElement.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_FEATURE_DELETE;
                  deleteButtonElement.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].EDITOR_FEATURE_DELETE;
                  deleteButtonElement.setAttribute('feat_id', i);
                  $(deleteButtonElement).click(deleteFeatureFunction);
                  headlineElement.appendChild(deleteButtonElement);

                  selectContent.appendChild(headlineElement);
                  if (selectedFeature.get('measuredLength')) {
                    if (selectedFeature.getGeometry() instanceof ol.geom.LineString) {
                      label = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].LENGTH;
                    } else if (selectedFeature.getGeometry() instanceof ol.geom.Polygon) {
                      label = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].PERIMETER;
                    } else {
                      label = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].RADIUS;
                    }
                    paragraphElement = document.createElement('p');
                    paragraphElement.innerHTML += '<strong>' + label + ':</strong> ' + selectedFeature.get('measuredLength').htmlValue;
                    selectContent.appendChild(paragraphElement);
                  }
                  if (selectedFeature.get('measuredArea')) {
                    paragraphElement = document.createElement('p');
                    paragraphElement.innerHTML += '<strong>' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].SURFACEAREA + ':</strong> ' + selectedFeature.get('measuredArea').htmlValue;
                    selectContent.appendChild(paragraphElement);
                  }
                  if (selectedFeature.get('measuredRadius')) {
                    paragraphElement = document.createElement('p');
                    paragraphElement.innerHTML += '<strong>' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].RADIUS + ':</strong> ' + selectedFeature.get('measuredRadius').htmlValue;
                    selectContent.appendChild(paragraphElement);
                  }
                  // check and append editor-vars
                  editorVars = selectedFeature.get('editorVars');
                  for (j = 0; j < editorVars.length; j += 1) {
                    paragraphElement = document.createElement('p');
                    strongElement = document.createElement('strong');
                    strongElement.innerHTML = editorVars[j].label;

                    inputElement = document.createElement('input');
                    inputElement.type = 'text';
                    inputElement.id = i + '-' + j;
                    inputElement.setAttribute('value', __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].decodeGeoJsonProperty(editorVars[j].value || ''));
                    inputElement.setAttribute('feat_id', i);
                    inputElement.setAttribute('var_id', j);
                    $(inputElement).keydown(blurOnEnter);
                    inputElement.onchange = inputChangeHandler;

                    paragraphElement.appendChild(strongElement);
                    paragraphElement.appendChild(document.createElement('br'));
                    paragraphElement.appendChild(inputElement);
                    selectContent.appendChild(paragraphElement);
                  }
                }
                selectContentHeadline.style.display = 'none';
                // self.statusBar.innerHTML = featureCount;
              } else {
                selectContent.appendChild(selectContentInfo);
                // self.statusBar.innerHTML = 0;
                selectContentHeadline.style.display = '';
              }
              self.update();
            }; // end of "renderSelectedFeaturesList"

            renderSelectedFeaturesList();
          }; // end of "fnHandleSelection"

          selectInteraction.on('select', function (event) {
            fnHandleSelection(event.target.getFeatures());
          });

          self.options.mapController.map.addInteraction(selectInteraction);
          self.options.mapController.map.addInteraction(selectBoxInteraction);
          return true;
        },
        activateFunction: function activateFunction() {

          // Disable mapHover
          self.options.mapController.mapHover.deactivate();

          // Reset display, if no features are selected
          if (selectInteraction.getFeatures().getLength() < 1) {
            selectContent.innerHTML = '';
            selectContent.appendChild(selectContentInfo);
            // self.statusBar.innerHTML = 0;
            selectContentHeadline.style.display = '';
          }

          // Enable interaction
          selectInteraction.setActive(true);
          self.options.mapController.map.addInteraction(selectInteraction);
          selectBoxInteraction.setActive(true);
          self.options.mapController.map.addInteraction(selectBoxInteraction);

          return true;
        },
        deactivateFunction: function deactivateFunction() {
          if (typeof self.applyFeatureModification === 'function') {
            self.applyFeatureModification();
          }
          // Disable interaction
          selectInteraction.setActive(false);
          self.options.mapController.map.removeInteraction(selectInteraction);
          selectBoxInteraction.setActive(false);
          self.options.mapController.map.removeInteraction(selectBoxInteraction);

          // enable mapHover
          self.options.mapController.mapHover.activate();

          return true;
        }
      });

      return selectView;
    },

    addDrawView: function addDrawView(options) {
      var self, TRIGGER_DRAW, drawContent, optionsDiv, enableInstantMeasureCheckbox, enableInstantMeasureCheckboxLabel,
      // enableFreehandDrawCheckbox,
      // enableFreehandDrawCheckboxLabel,
      checkboxChangeHandler, drawView, addDrawStyle, olType;

      self = this;

      options = $.extend({
        type: 'Point',
        styleIds: []
      }, options);

      checkboxChangeHandler = function checkboxChangeHandler(event) {
        // var interaction = self.options.mapController.map.interaction;
        // self.options.mapController.map.removeInteraction(interaction);
        // //self.options.mapController.map.addInteraction(interaction);

      };

      TRIGGER_DRAW = 'EDITOR_VIEW_TRIGGER_DRAW_' + options.type.toUpperCase();

      drawContent = document.createElement('div');
      drawContent.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */]['EDITOR_DRAW_CONTENT_' + options.type.toUpperCase()];
      drawContent.innerHTML = '<h4>' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */][TRIGGER_DRAW] + '</h4>';

      if (options.type.toLowerCase() !== 'point') {
        optionsDiv = document.createElement('div');
        optionsDiv.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_DRAW_OPTIONS;
        drawContent.appendChild(optionsDiv);

        enableInstantMeasureCheckbox = document.createElement('input');
        enableInstantMeasureCheckbox.type = 'checkbox';
        enableInstantMeasureCheckbox.id = 'enableInstantMeasureFor' + options.type;
        optionsDiv.appendChild(enableInstantMeasureCheckbox);

        enableInstantMeasureCheckboxLabel = document.createElement('label');
        enableInstantMeasureCheckboxLabel.setAttribute('for', 'enableInstantMeasureFor' + options.type);
        enableInstantMeasureCheckboxLabel.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].EDITOR_ENABLE_INSTANT_MEASURE;
        optionsDiv.appendChild(enableInstantMeasureCheckboxLabel);

        optionsDiv.appendChild(document.createElement('br'));

        // enableFreehandDrawCheckbox = document.createElement('input');
        // enableFreehandDrawCheckbox.type = 'checkbox';
        // enableFreehandDrawCheckbox.id = 'enableFreehandDrawFor' + options.type;
        // enableFreehandDrawCheckbox.onchange = checkboxChangeHandler;
        // optionsDiv.appendChild(enableFreehandDrawCheckbox);
        //
        // enableFreehandDrawCheckboxLabel = document.createElement('label');
        // enableFreehandDrawCheckboxLabel.setAttribute('for', 'enableFreehandDrawFor' + options.type);
        // enableFreehandDrawCheckboxLabel.innerHTML = langConstants.EDITOR_ENABLE_FREEHAND_DRAW;
        // optionsDiv.appendChild(enableFreehandDrawCheckboxLabel);
      }

      addDrawStyle = function addDrawStyle(styleId) {
        var interactionView, source, interaction, features, editorStyle, style, styleData, styleIcon, svgSrc, styleImage, styleTriggerLabel, featureIdCount, name;

        // Style "shortcut"
        style = self.proxy.locationStyleController.arrLocStyles[styleId].style()[0];
        editorStyle = self.proxy.locationStyleController.arrLocStyles[styleId].editor;
        styleData = self.proxy.locationStyleController.arrLocStyles[styleId].locStyleArr;
        svgSrc = styleData.svgSrc;

        featureIdCount = 0;

        // Create label for interaction-trigger
        styleTriggerLabel = document.createElement('span');
        // @TODO use css-class for dimensions
        styleTriggerLabel.style.display = 'block';
        styleTriggerLabel.style.minWidth = '30px';
        styleTriggerLabel.style.minHeight = '30px';
        styleTriggerLabel.style.margin = '2px';
        // "style.getImage().getImage()", does not work in every case
        styleImage = style.getImage() || undefined;
        if (editorStyle.iconSrc || styleImage instanceof ol.style.Icon) {
          styleIcon = document.createElement('img');

          if (editorStyle.iconSrc && editorStyle.iconSrc.indexOf('.') != -1) {
            styleIcon.src = editorStyle.iconSrc;
            if (styleData.editor_icon_size) {
              styleIcon.height = styleData.editor_icon_size[0];
              styleIcon.width = styleData.editor_icon_size[1];
            } else {
              styleIcon.height = '32';
              styleIcon.width = '32';
            }
          } else {
            styleIcon.src = styleImage.getSrc();
            styleIcon.scale = styleImage.getScale();
          }
          styleTriggerLabel.appendChild(styleIcon);
        } else if (svgSrc) {
          if (styleData.svgSrc && styleData.icon_scale && styleData.icon_size) {
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext("2d");
            var height = styleData.icon_size[0] * styleData.icon_scale;
            var width = styleData.icon_size[1] * styleData.icon_scale;

            var strokewidth = 0;
            if (styleData.strokewidth && styleData.strokewidth.value) {
              strokewidth = styleData.strokewidth.value;
            }

            canvas.height = height + 2 * strokewidth;
            canvas.width = width + 2 * strokewidth;
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (styleData.fillcolor) {
              ctx.fillStyle = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.fillcolor, styleData.fillopacity.value);
              ctx.fillRect(0, 0, canvas.width, canvas.height);
            }

            if (strokewidth && styleData.strokecolor) {
              ctx.strokeStyle = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.strokecolor, styleData.strokeopacity.value);
              ctx.lineWidth = strokewidth;
              ctx.strokeRect(0, 0, canvas.width, canvas.height);
              ctx.translate(0.5, 0.5);
            }

            // if (styleData.icon_opacity.value && (styleData.icon_opacity.value > 0)) {
            //     ctx.globalAlpha = (styleData.icon_opacity.value / 100);
            // }

            var img = new Image();
            img.src = styleData.svgSrc;
            img.zIndex = 100;

            img.onload = function () {
              ctx.drawImage(img, strokewidth, strokewidth, width, height);
            };

            styleIcon = canvas;

            styleTriggerLabel.style.width = width * scale + 'px';
            styleTriggerLabel.style.height = height * scale + 'px';
          }
        } else {
          styleTriggerLabel.style.background = style.getFill().getColor();
          styleTriggerLabel.style.border = '1px solid ' + style.getStroke().getColor();
        }

        // Create interactionView
        //   "addView" will be used for this, because the functionality
        //   ist mostly equal
        name = self.proxy.locationStyleController.arrLocStyles[styleId].name.replace("&#40;", "(").replace("&#41;", ")");
        interactionView = self.addView({
          name: 'draw:' + (self.proxy.locationStyleController.arrLocStyles[styleId].tooltip || name),
          triggerConfig: {
            label: styleTriggerLabel,
            tipLabel: self.proxy.locationStyleController.arrLocStyles[styleId].tooltip || name,
            className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_DRAW_TRIGGER,
            target: drawContent,
            withHeadline: true
          },
          sectionElements: [{ section: self.contentContainer, element: drawContent }, { section: self.topToolbar, element: self.viewTriggerBar }],
          initFunction: function initFunction() {
            var interactionStyleImage, activeSketch, activeTooltip;

            // Only show original icon, when the drawing POIs
            if (options.type.toLowerCase() === 'point' && style.getImage()) {
              interactionStyleImage = style.getImage();
            } else {
              interactionStyleImage = new ol.style.Circle({
                fill: style.getFill(),
                stroke: style.getStroke(),
                radius: 5
              });
            }

            // Get appropriate source
            switch (options.type.toLowerCase()) {
              case 'freehand':
                source = self.editFreehandLayer.getSource();
                break;
              case 'circle':
                source = self.editCircleLayer.getSource();
                break;
              case 'polygon':
                source = self.editPolygonLayer.getSource();
                break;
              case 'linestring':
                source = self.editLineLayer.getSource();
                break;
              case 'point':
              default:
                source = self.editPointLayer.getSource();
                break;
            }

            olType = options.type;
            if (olType == 'Freehand') {
              olType = 'LineString';
            }

            features = new ol.Collection();
            interaction = new ol.interaction.Draw({
              features: features,
              source: source,
              type: olType,
              freehand: options.type == 'Freehand',
              style: [new ol.style.Style({
                stroke: new ol.style.Stroke({
                  color: 'rgba(255,255,255,.5)',
                  width: style.getStroke().getWidth() + 2
                }),
                image: interactionStyleImage
              }), new ol.style.Style({
                geometry: style.getGeometry(),
                fill: style.getFill(),
                stroke: style.getStroke()
              })]
            });

            // @TODO doku
            //
            interaction.on('drawstart', function (event) {
              activeSketch = event.feature;
              activeSketch.set('styleId', styleId);

              if (enableInstantMeasureCheckbox && enableInstantMeasureCheckbox.checked) {
                activeTooltip = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
                  map: self.options.mapController.map,
                  position: event.coordinate,
                  horizontal: true
                });
              }
            }, self);

            // @TODO doku
            //
            self.options.mapController.map.on('pointermove', function (event) {
              if (enableInstantMeasureCheckbox && enableInstantMeasureCheckbox.checked && activeSketch) {
                if (activeTooltip && __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue && __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue == "0.00") {
                  activeTooltip.close();
                  activeTooltip = null;
                } else if (!activeTooltip && __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue && __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue != "0.00") {
                  activeTooltip = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
                    map: self.options.mapController.map,
                    position: event.coordinate,
                    horizontal: true
                  });
                }
                if (activeTooltip) {
                  activeTooltip.setPosition(event.coordinate);
                  activeTooltip.setContent(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).htmlValue);
                }
              }
            }, self);

            // @TODO doku
            //
            interaction.on('drawend', function (event) {
              var i, vars, editorVars, name;

              // name the feature
              featureIdCount += 1;
              name = self.proxy.locationStyleController.arrLocStyles[styleId].name.replace("&#40;", "(").replace("&#41;", ")");
              activeSketch.set('tooltip', (self.proxy.locationStyleController.arrLocStyles[styleId].tooltip || name) + ' (' + featureIdCount + ')');
              // add styleId
              activeSketch.set('styleId', styleId);
              // add measurements to the feature
              activeSketch.set('measuredLength', __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true));
              if (options.type.toLowerCase() === 'polygon') {
                activeSketch.set('measuredArea', __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry()));
              }
              if (options.type.toLowerCase() === 'circle') {
                activeSketch.set('measuredRadius', __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry()));
              }
              //activeSketch.setStyle(self.proxy.locationStyleController.arrLocStyles[styleId].style);
              // add editor-vars
              vars = editorStyle.vars;
              editorVars = [];
              for (i = 0; i < vars.length; i += 1) {
                editorVars[i] = {};
                editorVars[i].key = vars[i].key;
                editorVars[i].label = vars[i].value;
                editorVars[i].value = '';
              }
              activeSketch.set('editorVars', editorVars);
              // reset active-element variables
              activeSketch = null;
              if (activeTooltip) {
                activeTooltip.close();
                activeTooltip = null;
              }
            }, self);

            self.options.mapController.map.addInteraction(interaction);
            return true;
          }, // end of "initFunction()"

          activateFunction: function activateFunction() {

            // deactivate mapHover
            self.options.mapController.mapHover.deactivate();

            // Reset feature-list
            features.clear();

            // Enable interaction
            // self.options.mapController.map.addInteraction(interaction);
            interaction.setActive(true);
            return true;
          },

          deactivateFunction: function deactivateFunction() {

            // reactivate mapHover
            self.options.mapController.mapHover.activate();

            // finish drawings, if not already done
            if (options.type.toLowerCase() !== 'point') {
              try {
                interaction.finishDrawing();
              } catch (ignore) {
                // 0_o
              }
            }

            // Remove from map
            // self.options.mapController.map.removeInteraction(interaction);
            interaction.setActive(false);
            return true;
          }
        }, drawView);

        return interactionView;
      };

      drawView = self.addView({
        name: 'draw:' + options.type.toLowerCase(),
        triggerConfig: {
          tipLabel: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */][TRIGGER_DRAW],
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */][TRIGGER_DRAW],
          withHeadline: true
        },
        sectionElements: [{ section: self.contentContainer, element: drawContent }, { section: self.topToolbar, element: self.viewTriggerBar }],
        initFunction: function initFunction() {
          var i, styleId, neededStyles, sortAndAddStyles;

          // Show loading animation
          self.spinner.show();

          neededStyles = [];

          /**
           * @TODO
           * [sortAndAddStyles description]
           *
           * @return  {[type]}  [description]
           */
          sortAndAddStyles = function sortAndAddStyles(arrStyleIds) {
            var j, locationStyles, drawInteraction, styleIds;

            // prepare
            locationStyles = self.proxy.locationStyleController.arrLocStyles;
            styleIds = arrStyleIds || options.styleIds;
            if (!styleIds || !locationStyles) {
              return false;
            }

            // sort
            styleIds.sort(function (a, b) {

              //ToDo check
              if (locationStyles[a] && locationStyles[b] && locationStyles[a].editor) {
                if (!locationStyles[a].editor.sort && !locationStyles[b].editor.sort || locationStyles[a].editor.sort === locationStyles[b].editor.sort) {
                  if (!locationStyles[a].name || !locationStyles[b].name) {
                    return !locationStyles[b].name ? -1 : 1;
                  }
                  return locationStyles[a].name.toLowerCase() > locationStyles[b].name.toLowerCase() ? 1 : -1;
                }
                if (!locationStyles[a].editor.sort || !locationStyles[b].editor.sort) {
                  return !locationStyles[b].editor.sort ? -1 : 1;
                }

                return locationStyles[a].editor.sort > locationStyles[b].editor.sort ? 1 : -1;
              } else {
                return -1;
              }
            }); // end sort

            // create
            for (j = 0; j < styleIds.length; j += 1) {
              drawInteraction = addDrawStyle(styleIds[j]);
              // activate the first drawStyle
              if (j === 0) {
                drawInteraction.activate();
              }
            }

            // success
            self.update();
            return true;
          }; // end of "sortAndAddStyles"

          // Make sure that all needed styles are loaded
          if (!self.proxy.locationStyleController.arrLocStyles) {
            // no styles are loaded, so load all styles
            self.proxy.locationStyleController.arrLocStyles = {};
            neededStyles = options.styleIds;
          } else {
            // check wich styles are missing
            for (i = 0; i < options.styleIds.length; i += 1) {
              styleId = options.styleIds[i];
              if (!self.proxy.locationStyleController.arrLocStyles[styleId] || !self.proxy.locationStyleController.arrLocStyles[styleId].style) {
                neededStyles.push(styleId);
              }
            }
          }

          if (neededStyles.length > 0) {
            if (!self.proxy) {
              console.warn('Could not load locStyles, as the map-proxy was not initiallized.');
            }
            self.proxy.locationStyleController.loadLocationStyles(neededStyles, {
              done: function done() {
                sortAndAddStyles();
              },
              always: function always() {
                // Hide loading-animation
                self.spinner.hide();
                self.update();
              }
            });
          } else {
            sortAndAddStyles();
            self.update();
            self.spinner.hide();
          }

          return true;
        },
        activateFunction: function activateFunction() {
          return true;
        },
        deactivateFunction: function deactivateFunction() {
          return true;
        }
      });

      return drawView;
    },

    /**
     * If opt_slot is empty, the function will just save the data in the sessionStorage.
     * [save description]
     *
     * @param   {[type]}  opt_slot  [description]
     *
     * @return  {[type]}            [description]
     */
    save: function save(opt_slot) {
      var format, saveData, slotName, storage;

      if (this.options.type === 'backend') {
        return this.exportGeoJSON();
      }

      format = new ol.format.GeoJSON();
      saveData = {};

      saveData.points = format.writeFeatures(this.editPointLayer.getSource().getFeatures());
      saveData.lines = format.writeFeatures(this.editLineLayer.getSource().getFeatures());
      saveData.polygons = format.writeFeatures(this.editPolygonLayer.getSource().getFeatures());
      saveData.circles = format.writeFeatures(this.editCircleLayer.getSource().getFeatures());
      saveData.freehand = format.writeFeatures(this.editFreehandLayer.getSource().getFeatures());

      slotName = 'c4gMaps_';
      slotName += this.options.mapController.data.mapId;
      slotName += '_' + window.location.pathname;
      if (!opt_slot) {
        storage = window.sessionStorage;
      } else {
        slotName += '_' + opt_slot;
        storage = window.localStorage;
      }
      // Call hook functions before save
      if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.editor_onSave) === 'object') {
        __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.editor_onSave, saveData);
      }
      storage.setItem(slotName, JSON.stringify(saveData));
    },

    /**
     * If opt_slot is empty, the function will just load the data from the sessionStorage.
     * [load description]
     *
     * @param   {[type]}  opt_slot  [description]
     *
     * @return  {boolean}            [description]
     */
    load: function load(opt_slot) {
      var i, self, format, loadData, featureCollection, slotName, storage, neededStyles, styleId, importFeatures;

      self = this;
      format = new ol.format.GeoJSON();
      self.spinner.show();

      slotName = 'c4gMaps_';
      slotName += this.options.mapController.data.mapId;
      slotName += '_' + window.location.pathname;
      if (!opt_slot) {
        storage = window.sessionStorage;
      } else {
        slotName += '_' + opt_slot;
        storage = window.localStorage;
      }
      loadData = storage.getItem(slotName);
      if (!loadData) {
        self.spinner.hide();
        return false;
      }
      loadData = JSON.parse(loadData);

      featureCollection = [];
      neededStyles = [];

      featureCollection = format.readFeatures(loadData.points).concat(format.readFeatures(loadData.lines), format.readFeatures(loadData.polygons), format.readFeatures(loadData.circles), format.readFeatures(loadData.freehand));
      for (i = 0; i < featureCollection.length; i += 1) {
        styleId = featureCollection[i].get('styleId');

        if ((!self.proxy.locationStyleController.arrLocStyles[styleId] || !self.proxy.locationStyleController.arrLocStyles[styleId].style) && $.inArray(styleId, neededStyles) === -1) {
          neededStyles.push(styleId);
        }
      }

      importFeatures = function importFeatures() {
        self.editPointLayer.getSource().addFeatures(format.readFeatures(loadData.points));
        self.editLineLayer.getSource().addFeatures(format.readFeatures(loadData.lines));
        self.editPolygonLayer.getSource().addFeatures(format.readFeatures(loadData.polygons));
        self.editCircleLayer.getSource().addFeatures(format.readFeatures(loadData.circles));
        self.editFreehandLayer.getSource().addFeatures(format.readFeatures(loadData.freehand));
      };

      if (neededStyles.length > 0) {
        if (!self.proxy) {
          console.warn('Could not load locStyles, as the map-proxy was not initiallized.');
          return false;
        }
        self.proxy.locationStyleController.loadLocationStyles(neededStyles, {
          done: function done() {
            importFeatures();
            // Call hook functions on load
            if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.editor_onLoad) === 'object') {
              __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.editor_onLoad, loadData);
            }
          },
          always: function always() {
            // Hide loading-animation
            self.spinner.hide();
          }
        });
      } else {
        importFeatures();
        self.spinner.hide();
        // Call hook functions on load
        if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.editor_onLoad) === 'object') {
          __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.editor_onLoad, loadData);
        }
      }
    }, // End of "load"

    /**
     * @TODO: [export description]
     *
     * @return  {[type]}  [description]
     */
    exportGeoJSON: function exportGeoJSON() {
      var format, features;

      format = new ol.format.GeoJSON();

      features = this.editPointLayer.getSource().getFeatures();
      features = features.concat(this.editLineLayer.getSource().getFeatures());
      features = features.concat(this.editPolygonLayer.getSource().getFeatures());
      features = features.concat(this.editCircleLayer.getSource().getFeatures());
      features = features.concat(this.editFreehandLayer.getSource().getFeatures());

      features = format.writeFeatures(features);
      // features = JSON.stringify(features);

      if (this.options.type === 'backend' && this.options.dataField) {
        this.options.dataField.val(features);
        return true;
      } else {
        return features;
      }
    }, // end of "export"

    /**
     * @TODO: [import description]
     *
     * @return  {[type]}  [description]
     */
    importGeoJSON: function importGeoJSON(opt_geojson) {
      var self, styleId, format, features, points, freehand, lines, polygons, circles, neededStyles, importFeatures, i;

      self = this;

      if (this.options.type === 'backend' && this.options.dataField) {
        features = this.options.dataField.val();
      } else if (opt_geojson) {
        features = opt_geojson;
      } else {
        return false;
      }

      if (!features) {
        // no features to load
        return false;
      }

      // try {
      //   features = JSON.parse(features);
      // } catch (ignore) {}

      format = new ol.format.GeoJSON();
      try {
        features = format.readFeatures(features);
      } catch (ignore) {
        console.warn('Could not load features: Invalid JSON string...');
        return false;
      }

      neededStyles = [];
      points = [];
      freehand = [];
      lines = [];
      polygons = [];
      circles = [];
      for (i = 0; i < features.length; i += 1) {
        styleId = features[i].get('styleId') || features[i].get('locstyle') || false;

        if (features[i] && typeof features[i].getGeometry === 'function') {
          if (features[i].getGeometry() instanceof ol.geom.Point) {
            points.push(features[i]);
          } else if (features[i].getGeometry() instanceof ol.geom.LineString) {
            if (features.options && features.options.type && features.options.type.toLowerCase() == 'freehand') {
              freehand.push(features[i]);
            } else {
              lines.push(features[i]);
            }
          } else if (features[i].getGeometry() instanceof ol.geom.Polygon) {
            polygons.push(features[i]);
          } else if (features[i].getGeometry() instanceof ol.geom.Circle) {
            circles.push(features[i]);
          }
        } else {
          console.warn('Cannot load feature without geometry.');
          return false;
        }

        if (styleId && (!self.proxy.locationStyleController.arrLocStyles[styleId] || !self.proxy.locationStyleController.arrLocStyles[styleId].style) && $.inArray(styleId, neededStyles) === -1) {
          neededStyles.push(styleId);
        }
      }

      importFeatures = function importFeatures() {
        self.editPointLayer.getSource().addFeatures(points);
        self.editLineLayer.getSource().addFeatures(lines);
        self.editPolygonLayer.getSource().addFeatures(polygons);
        self.editCircleLayer.getSource().addFeatures(circles);
        self.editFreehandLayer.getSource().addFeatures(freehand);
        __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].fitToExtent(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].getExtentForGeometries(points.concat(lines, polygons, circles, freehand)), self.options.mapController.map, [25, 25, 25, self.container.offsetWidth + 25], 1000);
      };

      self.spinner.show();
      if (neededStyles.length > 0) {
        if (!self.proxy) {
          console.warn('Could not load locStyles, as the map-proxy was not initiallized.');
          return false;
        }
        self.proxy.locationStyleController.loadLocationStyles(neededStyles, {
          done: function done() {
            importFeatures();
          },
          always: function always() {
            // Hide loading-animation
            self.spinner.hide();
          }
        });
      } else {
        importFeatures();
        self.spinner.hide();
      }
    } // end of "import"

  });
})(jQuery, this.c4g);

var Editor = this.c4g.maps.control.Editor;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-measuretools.js":
/*!***********************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-measuretools.js ***!
  \***********************************************************************/
/*! exports provided: Measuretools */
/*! exports used: Measuretools */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Measuretools; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_tooltippopup__ = __webpack_require__(/*! ./c4g-maps-misc-tooltippopup */ "./Resources/public/js/c4g-maps-misc-tooltippopup.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};







(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @constructor
   * @extend {c4g.maps.control.Sideboard}
   *
   * @param  {[type]}  mapController  [description]
   */

  c4g.maps.control.Measuretools = function (opt_options) {

    // extend options
    this.options = $.extend({
      name: 'measure',
      headline: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].MEASURETOOLS,
      create: true,
      mapController: undefined,
      direction: 'left',
      firstElement: true
    }, opt_options);

    this.mainSection = document.createElement('div');

    // call parent constructor
    __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Measuretools, __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  /**
   * Methods
   */
  c4g.maps.control.Measuretools.prototype = $.extend(c4g.maps.control.Measuretools.prototype, {

    /**
     * Executed when the panel will be opened for the first time.
     * [init description]
     *
     * @return  {boolean}  Returns |true| on success
     */
    init: function init() {

      this.spinner.show();

      // Add measure layers
      this.measureLineLayer = new ol.layer.Vector({ source: new ol.source.Vector() });
      this.measurePolygonLayer = new ol.layer.Vector({ source: new ol.source.Vector() });
      this.measureCircleLayer = new ol.layer.Vector({ source: new ol.source.Vector() });
      this.measureFreehandLayer = new ol.layer.Vector({ source: new ol.source.Vector() });

      this.measureLayerGroup = new ol.layer.Group({
        layers: new ol.Collection([this.measureFreehandLayer, this.measureCircleLayer, this.measurePolygonLayer, this.measureLineLayer]),
        visible: true
      });
      this.options.mapController.map.addLayer(this.measureLayerGroup);

      // Add and activate measure-Views
      this.viewMeasureSelect = this.addSelectView();
      this.viewMeasureSelect.activate();
      this.viewMeasureLine = this.addMeasureView({ type: 'LineString' });
      this.viewMeasureArea = this.addMeasureView({ type: 'Polygon' });
      this.viewMeasureRadius = this.addMeasureView({ type: 'Circle' });
      this.viewMeasureFreehand = this.addMeasureView({ type: 'Freehand' });

      // set content-section
      this.mainSectionInfo = document.createElement('p');
      this.mainSectionInfo.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].MEASURETOOLS_INFO;
      this.mainSectionInfo.innerHTML += '<br><br><sub>' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].MEASURETOOLS_INFO_ADDITIONAL + '<sub>';
      this.mainSection.appendChild(this.mainSectionInfo);
      this.contentContainer.appendChild(this.mainSection);

      this.spinner.hide();
      return true;
    }, // end of "init()"

    /**
     * Executed before panel will be closed
     *
     * @return  {[type]}  [description]
     */
    preCloseFunction: function preCloseFunction() {
      var lineFeatures, polygonFeatures, circleFeatures, freehandFeatures, i;

      if (this.measureLayerGroup.getVisible()) {
        this.measureLayerGroup.setVisible(false);

        // hide line-feature tooltips
        lineFeatures = this.measureLineLayer.getSource().getFeatures();
        for (i = 0; i < lineFeatures.length; i += 1) {
          lineFeatures[i].get('tooltip').hide();
        }
        // hide polygon-feature tooltips
        polygonFeatures = this.measurePolygonLayer.getSource().getFeatures();
        for (i = 0; i < polygonFeatures.length; i += 1) {
          polygonFeatures[i].get('tooltip').hide();
        }
        // hide circle-feature tooltips
        circleFeatures = this.measureCircleLayer.getSource().getFeatures();
        for (i = 0; i < circleFeatures.length; i += 1) {
          circleFeatures[i].get('tooltip').hide();
        }
        // hide freehand-feature tooltips
        freehandFeatures = this.measureFreehandLayer.getSource().getFeatures();
        for (i = 0; i < freehandFeatures.length; i += 1) {
          freehandFeatures[i].get('tooltip').hide();
        }
      }
    }, // end of "preCloseFunction()"

    /**
     * Executed before panel will be opened
     *
     * @return  {[type]}  [description]
     */
    preOpenFunction: function preOpenFunction() {
      var lineFeatures, polygonFeatures, circleFeatures, freehandFeatures, i;

      if (!this.measureLayerGroup.getVisible()) {
        this.measureLayerGroup.setVisible(true);

        // show line-feature tooltips
        lineFeatures = this.measureLineLayer.getSource().getFeatures();
        for (i = 0; i < lineFeatures.length; i += 1) {
          lineFeatures[i].get('tooltip').show();
        }
        // show polygon-feature tooltips
        polygonFeatures = this.measurePolygonLayer.getSource().getFeatures();
        for (i = 0; i < polygonFeatures.length; i += 1) {
          polygonFeatures[i].get('tooltip').show();
        }
        // show circle-feature tooltips
        circleFeatures = this.measureCircleLayer.getSource().getFeatures();
        for (i = 0; i < circleFeatures.length; i += 1) {
          circleFeatures[i].get('tooltip').show();
        }
        // show freehand-feature tooltips
        freehandFeatures = this.measureFreehandLayer.getSource().getFeatures();
        for (i = 0; i < freehandFeatures.length; i += 1) {
          freehandFeatures[i].get('tooltip').show();
        }
      }
    }, // end of "preOpenFunction()"

    /**
     * @TODO: [addSelectView description]
     */
    addSelectView: function addSelectView() {
      var selectView;

      selectView = this.addView({
        name: 'select',
        triggerConfig: {
          tipLabel: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].MEASURETOOLS_VIEW_TRIGGER_SELECT,
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].MEASURETOOLS_VIEW_TRIGGER_SELECT,
          withHeadline: true
        },
        sectionElements: [{ section: this.contentContainer, element: this.mainSection }, { section: this.topToolbar, element: this.viewTriggerBar }]
      });

      return selectView;
    }, // end of "addSelectView()"

    /**
     * @TODO: [addMeasureView description]
     *
     * @param  {[type]}  options  [description]
     */
    addMeasureView: function addMeasureView(options) {
      var self, TRIGGER_DRAW, measureView, source, interaction, features, olType;

      self = this;

      options = $.extend({
        type: 'LineString'
      }, options);

      TRIGGER_DRAW = 'MEASURETOOLS_VIEW_TRIGGER_DRAW_' + options.type.toUpperCase();

      measureView = self.addView({
        name: 'draw:' + options.type.toLowerCase(),
        triggerConfig: {
          tipLabel: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */][TRIGGER_DRAW],
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */][TRIGGER_DRAW],
          withHeadline: true
        },
        sectionElements: [{ section: self.topToolbar, element: self.viewTriggerBar }],
        initFunction: function initFunction() {
          var featureIdCount, activeSketch, activeTooltip, addMeasureFeature, updateMeasureFeature, getValueOfGeometry, getLengthOfMeasure, removeMeasureFeature;

          // Show loading animation
          self.spinner.show();

          featureIdCount = 1;

          if (options.type.toLowerCase() === 'freehand') {
            source = self.measureFreehandLayer.getSource();
          } else if (options.type.toLowerCase() === 'circle') {
            source = self.measureCircleLayer.getSource();
          } else if (options.type.toLowerCase() === 'polygon') {
            source = self.measurePolygonLayer.getSource();
          } else {
            source = self.measureLineLayer.getSource();
          }

          features = new ol.Collection();

          olType = options.type;
          if (olType == 'Freehand') {
            olType = 'LineString';
          }
          interaction = new ol.interaction.Draw({
            features: features,
            source: source,
            type: olType,
            freehand: options.type == 'Freehand'
            // @TODO: use custom style? (BE-option)
            // style: use default style
          });

          addMeasureFeature = function addMeasureFeature(feature) {
            var listElement, headlineElement, labelElement, inputElement, paragraphElement, strongElement, spanElement, strLabel, strType, measureArea, measureRadius;

            if (!feature instanceof ol.Feature) {
              return false;
            }

            // check if the infomessage needs to be removed
            if (self.mainSection.childElementCount === 1 && self.mainSection.children[0] === self.mainSectionInfo) {
              self.mainSection.removeChild(self.mainSectionInfo);
            }

            // check feature-type
            if (feature.getGeometry() instanceof ol.geom.LineString) {
              strLabel = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].LENGTH;
              strType = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].LINE;
              measureArea = false;
              measureRadius = false;
            } else if (feature.getGeometry() instanceof ol.geom.Polygon) {
              strLabel = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].PERIMETER;
              strType = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].POLYGON;
              measureArea = true;
              measureRadius = false;
            } else if (feature.getGeometry() instanceof ol.geom.Circle) {
              strLabel = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].RADIUS;
              strType = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].CIRCLE;
              measureArea = true;
              measureRadius = true;
            } else {
              //freehand ist LineString too
              strLabel = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].LENGTH;
              strType = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].FREEHAND;
              measureArea = false;
              measureRadius = false;
            }

            // create list element
            listElement = document.createElement('div');

            // create and append headline
            headlineElement = document.createElement('div');
            headlineElement.className = 'c4g_maps_portside_measure_element';
            if (self.options.firstElement) {
              headlineElement.className = 'c4g_maps_portside_measure_element c4g_maps_portside_measure_element_first';
              self.options.firstElement = false;
            }
            listElement.appendChild(headlineElement);

            // create and append label for name-inputfield
            labelElement = document.createElement('label');
            labelElement.setAttribute('for', 'measureElement_' + featureIdCount);
            labelElement.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].NAME + ': ';
            headlineElement.appendChild(labelElement);

            // create and append name-inputfield
            inputElement = document.createElement('input');
            inputElement.type = 'text';
            inputElement.name = 'measureElement_' + featureIdCount;
            inputElement.value = strType + ' ' + featureIdCount;
            // attach-change-handler
            $(inputElement).change(function (event) {
              updateMeasureFeature(feature);
            });
            headlineElement.appendChild(inputElement);
            feature.set('listElementValueName', inputElement);

            // create and append paragraphs
            paragraphElement = document.createElement('p');
            paragraphElement.className = 'c4g_maps_portside_measure_paragraph';
            strongElement = document.createElement('strong');
            strongElement.innerHTML = strLabel + ': ';
            paragraphElement.appendChild(strongElement);
            spanElement = document.createElement('span');
            spanElement.innerHTML = '...';
            paragraphElement.appendChild(spanElement);
            listElement.appendChild(paragraphElement);
            feature.set('listElementValueLine', spanElement);

            if (measureArea) {
              paragraphElement = document.createElement('p');
              paragraphElement.className = 'c4g_maps_portside_measure_paragraph_surfacearea';
              strongElement = document.createElement('strong');
              strongElement.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].SURFACEAREA + ': ';
              paragraphElement.appendChild(strongElement);
              spanElement = document.createElement('span');
              spanElement.innerHTML = '...';
              paragraphElement.appendChild(spanElement);
              listElement.appendChild(paragraphElement);
              feature.set('listElementValueArea', spanElement);
            }

            if (measureRadius) {
              // paragraphElement = document.createElement('p');
              // paragraphElement.className = 'c4g_maps_portside_measure_paragraph_surfacearea';
              // strongElement = document.createElement('strong');
              // strongElement.innerHTML = langConstants.SURFACEAREA + ': ';
              // paragraphElement.appendChild(strongElement);
              // spanElement = document.createElement('span');
              // spanElement.innerHTML = '...';
              // paragraphElement.appendChild(spanElement);
              // listElement.appendChild(paragraphElement);
              feature.set('listElementValueRadius', spanElement);
            }

            // increase the id-counter
            featureIdCount += 1;

            // append element to the list
            self.mainSection.appendChild(listElement);
            // attach element to the feature
            feature.set('listElement', listElement);

            self.update();
          }; // end of "addMeasureFeature()"

          updateMeasureFeature = function updateMeasureFeature(feature) {
            var featureTooltip, newContent, name, length, area, radius;

            featureTooltip = feature.get('tooltip');
            name = feature.get('listElementValueName').value;
            length = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry(), true);
            newContent = '<strong>' + name + '</strong><br>';

            feature.set('measuredLength', length);
            feature.get('listElementValueLine').innerHTML = length.htmlValue;
            if (feature.get('geometryType') === 'circle') {
              radius = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry());
              feature.set('measuredRadius', radius);
              feature.get('listElementValueRadius').innerHTML = radius.htmlValue;
              newContent += radius.htmlValue;

              area = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry(), false, true);
              feature.set('measuredArea', area);
              feature.get('listElementValueArea').innerHTML = area.htmlValue;
              // newContent += area.htmlValue;
            } else if (feature.get('geometryType') === 'polygon') {
              area = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry());
              feature.set('measuredArea', area);
              feature.get('listElementValueArea').innerHTML = area.htmlValue;
              newContent += area.htmlValue;
            } else {
              newContent += length.htmlValue;
            }
            featureTooltip.setContent(newContent);
          }; // end of "updateMeasureFeature()"

          removeMeasureFeature = function removeMeasureFeature(feature) {
            self.mainSection.removeChild(feature.get('listElement'));

            // last element? -> add infomessage
            if (self.mainSection.childElementCount < 1) {
              self.mainSection.appendChild(self.mainSectionInfo);
              self.update();
            }
          }; // end of "removeMeasureFeature()"

          //Start Workaround
          getValueOfGeometry = function getValueOfGeometry(feature) {
            var leng = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry(), true);
            // feature.set('measuredLength', length);
            var val = leng.htmlValue;
            var valuenumb = val.match(/\d/g);
            valuenumb = valuenumb.join("");
            return valuenumb;
          };

          getLengthOfMeasure = function getLengthOfMeasure() {
            var length = '0.00 m';
            var lengthnumb = length.match(/\d/g);
            lengthnumb = lengthnumb.join("");
            lengthnumb = +8;
            return lengthnumb;
          }; // End Workaround

          interaction.on('drawstart', function (event) {
            activeSketch = event.feature;
            // create tooltip
            activeTooltip = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
              map: self.options.mapController.map,
              position: event.coordinate,
              horizontal: true,
              closeable: true,
              closeFunction: function closeFunction() {
                //Workaround, for small or zero values of Freehand
                var val = getValueOfGeometry(event.feature);
                var leng = getLengthOfMeasure();
                if (val != leng && val > leng) {
                  removeMeasureFeature(event.feature);
                  source.removeFeature(event.feature);
                } else {
                  removeMeasureFeature(event.feature);
                }
              }
            });

            activeSketch.set('tooltip', activeTooltip);
            activeSketch.set('geometryType', options.type.toLowerCase());
            addMeasureFeature(activeSketch);
          }, self);

          self.options.mapController.map.on('pointermove', function (event) {
            if (activeSketch && activeTooltip) {
              activeTooltip.setPosition(event.coordinate);
              updateMeasureFeature(activeSketch);
            }
          }, self);

          interaction.on('drawend', function (event) {
            if (activeSketch && activeTooltip) {
              updateMeasureFeature(activeSketch);
              activeSketch = null;
              activeTooltip = null;
            }
          }, self);

          self.spinner.hide();
          return true;
        },
        activateFunction: function activateFunction() {

          // disable mapHover
          self.options.mapController.mapHover.deactivate();

          features.clear();

          // Enable interaction
          self.options.mapController.map.addInteraction(interaction);
        },
        deactivateFunction: function deactivateFunction() {

          // reactivate mapHover
          self.options.mapController.mapHover.activate();

          if (options.type.toLowerCase() !== 'point') {
            try {
              interaction.finishDrawing();
            } catch (ignore) {
              // 0_o
            }
          }

          // Remove from map
          self.options.mapController.map.removeInteraction(interaction);
        }
      });

      return measureView;
    } // end of "addMeasureView()"

  });
})(jQuery, this.c4g);

var Measuretools = this.c4g.maps.control.Measuretools;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-router.js":
/*!*****************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-router.js ***!
  \*****************************************************************/
/*! exports provided: Router */
/*! exports used: Router */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Router; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





(function ($, c4g) {
    'use strict';

    /**
     * Constructor
     *
     * @extends {c4g.maps.control.Sideboard}
     *
     * @param  {[type]}  mapController  [description]
     * @param  {[type]}  config         [description]
     */

    c4g.maps.control.Router = function (opt_options) {

        // extend options
        this.options = $.extend({
            name: 'router',
            create: true,
            mapController: undefined,
            headline: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER,
            direction: 'left'
        }, opt_options);

        if (!this.options.mapController) {
            return false;
        }
        this.index = 0;

        // call parent constructor
        __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
    };

    /**
     * Inherit from "Sideboard"
     */
    ol.inherits(c4g.maps.control.Router, __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */]);

    /**
     * Methods
     */
    c4g.maps.control.Router.prototype = $.extend(c4g.maps.control.Router.prototype, {

        init: function init() {

            var self, viewRouter, selectInteraction, profileId;

            self = this;
            this.spinner.show();

            // check and load location styles via map-proxy
            this.options.mapController.proxy.locationStyleController.loadLocationStyles([this.options.mapController.data.router_from_locstyle, this.options.mapController.data.router_to_locstyle, this.options.mapController.data.router_point_locstyle]);

            // Add router layer(s)
            this.routingAltWaySource = new ol.source.Vector();
            this.routingWaySource = new ol.source.Vector();
            this.routerWayLayer = new ol.layer.Vector({
                source: this.routingWaySource,
                zIndex: 1,
                style: [new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255, 255, 255, 0.6)',
                        width: 8
                    })
                }), new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(0, 51, 119, 0.9)',
                        width: 4
                    })
                })]
            });
            this.routerAltWayLayer = new ol.layer.Vector({
                source: this.routingAltWaySource,
                zIndex: 0,
                style: [new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255, 255, 255, 0.6)',
                        width: 8
                    })
                }), new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(0, 51, 119, 0.4)',
                        width: 4
                    })
                })]
            });

            selectInteraction = new ol.interaction.Select({
                style: [new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255, 255, 255, 0.0)',
                        width: 8
                    })
                }), new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255, 51, 119, 0.0)',
                        width: 4
                    })
                })]

            });
            selectInteraction.on('select', function (event) {

                if (event.selected[0]) {
                    var geometry = event.selected[0].getGeometry();
                    if (geometry && geometry instanceof ol.geom.LineString) {
                        self.showAltRoute(self.response, event.selected[0].getId());
                    }
                }
            });

            self.options.mapController.map.addInteraction(selectInteraction);

            this.routingHintSource = new ol.source.Vector();
            this.routerHintLayer = new ol.layer.Vector({
                source: this.routingHintSource,
                style: function style(feature, resolution) {
                    // console.log(self.proxy.locationStyleController.arrLocStyles[self.options.mapController.data.router_point_locstyle].style);
                    return !self.options.mapController.proxy || self.options.mapController.proxy.locationStyleController.arrLocStyles[self.options.mapController.data.router_point_locstyle].style(feature, resolution);
                }
            });

            this.locationsSource = new ol.source.Vector();
            this.locationsLayer = new ol.layer.Vector({
                source: this.locationsSource,
                zIndex: 2
            });

            this.routerLayerGroup = new ol.layer.Group({
                layers: new ol.Collection([this.routerWayLayer, this.routerAltWayLayer, this.locationsLayer, this.routerHintLayer]),
                visible: true
            });
            this.options.mapController.map.addLayer(this.routerLayerGroup);

            viewRouter = this.addUserInterface();
            viewRouter.activate();

            // store some vars for ajax-requests
            profileId = this.options.mapController.data.profile;
            this.geoSearchApi = this.options.mapController.data.api.geosearch + '/' + profileId;
            this.geoReverseSearchApi = this.options.mapController.data.api.geosearch_reverse + '/' + profileId;
            this.routingApi = this.options.mapController.data.api.routing + '/' + profileId;

            this.spinner.hide();

            return true;
        },

        preOpenFunction: function preOpenFunction(opt_options) {

            this.addMapInputInteraction();

            if (opt_options && opt_options.toLonLat) {
                this.performReverseSearch(this.$toInput, opt_options.toLonLat);
                this.toValue = new ol.geom.Point([opt_options.toLonLat[1], opt_options.toLonLat[0]]);
            }
        },

        preHideFunction: function preHideFunction() {
            this.removeMapInputInteraction();
        },

        preCloseFunction: function preCloseFunction() {

            this.routingWaySource.clear();
            this.routingAltWaySource.clear();
            this.routingHintSource.clear();
            this.locationsSource.clear();

            $(this.routerInstructionsWrapper).empty();
            this.clearInput(this.$fromInput);
            if (this.overValue) {
                for (var id in this.overValue) {
                    this.clearOver(this.$overInput, id);
                    var elem = document.getElementById(id);
                    if (elem) {
                        elem.parentNode.parentNode.removeChild(elem.parentNode);
                    }
                }
            }
            this.clearInput(this.$toInput);

            this.removeMapInputInteraction();
        },

        removeMapInputInteraction: function removeMapInputInteraction() {

            var self = this;
            this.options.mapController.map.un('click', self.fnMapRouterInteraction);
        },

        addMapInputInteraction: function addMapInputInteraction() {

            var self = this,
                coordinate;

            self.fnMapRouterInteraction = function (evt) {

                coordinate = ol.proj.toLonLat(evt.coordinate);

                if (self.$fromInput.val() === "") {
                    //self.$fromInput.val(ol.proj.toLonLat(evt.coordinate));
                    self.performReverseSearch(self.$fromInput, coordinate);
                    self.fromValue = new ol.geom.Point(coordinate);

                    //self.$fromInput.trigger('change');
                } else if (self.$toInput.val() === "") {
                    //self.$toInput.val(ol.proj.toLonLat(evt.coordinate));
                    self.performReverseSearch(self.$toInput, coordinate);
                    self.toValue = new ol.geom.Point(coordinate);
                } else if (self.$overInput) {
                    if (self.$overInput.val() === "") {
                        self.performReverseSearch(self.$overInput, coordinate);
                        if (!self.overValue) {
                            self.overValue = {};
                        }
                        self.overValue[self.index] = new ol.geom.Point(coordinate);
                        self.$buttonOver.prop("disabled", false);
                    }
                }
            };

            this.options.mapController.map.on('click', self.fnMapRouterInteraction);
            if (self.options.mapController.map.getInteractions().getArray()['9']) {
                self.options.mapController.map.getInteractions().getArray()['9'].setActive(true);
            } else {
                self.options.mapController.map.getInteractions().getArray()['8'].setActive(true);
            }
        },

        addUserInterface: function addUserInterface() {
            var _this = this;

            var self = void 0,
                routerView = void 0,
                routerViewInputWrapper = void 0,
                routerViewContentWrapper = void 0,
                routerViewContentHeadline = void 0,
                print = void 0,
                routeProfile = [],
                routerFromLabel = void 0,
                routerOverLabel = void 0,
                routerToLabel = void 0,
                routerFromClear = void 0,
                routerOverClear = void 0,
                routerToClear = void 0,
                switchFromTo = void 0,
                buttonOver = void 0;

            self = this;

            routerViewInputWrapper = document.createElement('div');
            routerViewContentWrapper = document.createElement('div');

            self.routerViewContentWrapper = routerViewContentWrapper;

            // @TODO: Add router-info-text
            // routerViewContentHeadline = document.createElement('h4');
            // routerViewContentHeadline.innerHTML = langConstants.ROUTER_VIEW_ADDRESS_INPUT;
            // routerViewContentWrapper.appendChild(routerViewContentHeadline);

            this.fromInputWrapper = document.createElement('div');
            this.fromInputWrapper.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_WRAPPER;

            this.fromInput = document.createElement("input");
            this.fromInput.type = "text";
            this.fromInput.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_FROM;
            this.fromInput.id = this.fromInput.name = "routingFrom";

            routerFromLabel = document.createElement('label');
            routerFromLabel.setAttribute('for', 'routingFrom');
            routerFromLabel.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_FROM_LABEL;

            routerFromClear = document.createElement('button');
            routerFromClear.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_CLEAR;
            routerFromClear.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_CLEAR_TITLE;
            routerFromClear.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_CLEAR_HTML;
            this.$routerFromClear = $(routerFromClear);

            switchFromTo = document.createElement('button');
            switchFromTo.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_SWITCH;
            switchFromTo.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_SWITCH;
            this.$switchFromTo = $(switchFromTo);

            buttonOver = document.createElement('button');
            buttonOver.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_OVER;
            buttonOver.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_OVER;
            this.$buttonOver = $(buttonOver);

            print = document.createElement('button');
            print.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PRINT;
            print.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_PRINT;
            this.$print = $(print);

            this.routerButtonBar = document.createElement('div');
            this.routerButtonBar.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_BUTTONBAR;
            this.routerButtonBar.appendChild(switchFromTo);
            this.routerButtonBar.appendChild(buttonOver);
            this.routerButtonBar.appendChild(print);

            // $(print).insertBefore(document.getElementsByClassName("c4g-portside-hide")[0]);

            if (this.options.mapController.data.router_api_selection == '2') {
                //OpenRouteService
                if (Object.keys(this.options.mapController.data.router_profiles).length == 1) {
                    //check for single profile and set this as  active routing profile
                    this.routeProfile = [];
                    this.routeProfile.active = Object.keys(this.options.mapController.data.router_profiles)[0];
                } else if (Object.keys(this.options.mapController.data.router_profiles).length > 1) {
                    //check for multiple profiles and add profile-changer
                    this.routeProfile = document.createElement('div');
                    $(this.routeProfile).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_WRAPPER);
                    if (this.options.mapController.data.router_profiles['0']) {
                        //add button for profile driving-car
                        routeProfile.car = document.createElement('button');
                        $(routeProfile.car).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_CAR);
                        this.$routeProfileCar = $(routeProfile.car);
                        this.routeProfile.appendChild(routeProfile.car);
                        this.$routeProfileCar.click(function (event) {
                            self.clearSiblings(this);
                            self.routeProfile.active = '0';
                            self.recalculateRoute();
                        });
                    }

                    if (this.options.mapController.data.router_profiles['1']) {
                        //add button for profile driving-hgv
                        routeProfile.hgv = document.createElement('button');
                        $(routeProfile.hgv).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_HGV);
                        this.routeProfile.appendChild(routeProfile.hgv);
                        this.$routeProfileHgv = $(routeProfile.hgv);

                        this.$routeProfileHgv.click(function (event) {
                            self.clearSiblings(this);
                            self.routeProfile.active = '1';
                            self.recalculateRoute();
                        });
                    }
                    if (this.options.mapController.data.router_profiles['2'] || this.options.mapController.data.router_profiles['3'] || this.options.mapController.data.router_profiles['4'] || this.options.mapController.data.router_profiles['5'] || this.options.mapController.data.router_profiles['6'] || this.options.mapController.data.router_profiles['7']) {
                        //add button and dropdown for cycling profiles
                        var spanBike = document.createElement('span');
                        routeProfile.bike = document.createElement('button');
                        routeProfile.bike.list = document.createElement('ul');
                        this.$routeProfileBike = $(routeProfile.bike);
                        for (var i = 2; i < 8; i++) {
                            //iterate over all possible cycling profiles
                            if (this.options.mapController.data.router_profiles[i]) {
                                (function () {
                                    var child = document.createElement('li');
                                    child.innerHTML = _this.options.mapController.data.router_profiles[i];
                                    $(child).data('profile', [i]);
                                    $(child).click(function (event) {
                                        self.childClick($(child));
                                    });
                                    if (!_this.$routeProfileBike.data('profile')) {
                                        //add existing default profile to button
                                        _this.$routeProfileBike.data('profile', i);
                                        $(child).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                                    }
                                    routeProfile.bike.list.appendChild(child);
                                })();
                            }
                        }

                        $(routeProfile.bike).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_BIKE);

                        if (routeProfile.bike.list.children.length == 1) {
                            //ignore dropdown list, if only one cycling profile is enabled
                            this.routeProfile.appendChild(routeProfile.bike);
                            this.$routeProfileBike.click(function (event) {
                                self.clearSiblings(this);
                                self.routeProfile.active = $(this).data('profile');
                                self.recalculateRoute();
                            });
                        } else {
                            //append with dropdown, if multiple cycling profiles are enabled
                            spanBike.appendChild(routeProfile.bike);
                            spanBike.appendChild(routeProfile.bike.list);
                            this.routeProfile.appendChild(spanBike);
                            this.$routeProfileBike.click(function (event) {
                                self.clearSiblings($(this).parent());
                                self.routeProfile.active = $(this).data('profile');
                                self.recalculateRoute();
                            });
                        }
                    }
                    if (this.options.mapController.data.router_profiles['8'] || this.options.mapController.data.router_profiles['9']) {
                        //add button and dropdown for walking profiles
                        var spanFoot = document.createElement('span');
                        routeProfile.foot = document.createElement('button');
                        routeProfile.foot.list = document.createElement('ul');
                        this.$routeProfileFoot = $(routeProfile.foot);
                        for (var _i = 8; _i < 10; _i++) {
                            //iterate over possible profiles
                            if (this.options.mapController.data.router_profiles[_i]) {
                                var child = document.createElement('li');
                                child.innerHTML = this.options.mapController.data.router_profiles[_i];
                                $(child).data('profile', [_i]);
                                $(child).click(function (event) {
                                    self.childClick($(this));
                                });
                                if (!this.$routeProfileFoot.data('profile')) {
                                    //add existing default profile to button
                                    this.$routeProfileFoot.data('profile', _i);
                                    $(child).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                                }
                                routeProfile.foot.list.appendChild(child);
                            }
                        }

                        $(routeProfile.foot).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_FOOT);

                        if (routeProfile.foot.list.children.length == 1) {
                            //ignore dropdown list, if only one walking profile is enabled
                            this.routeProfile.appendChild(routeProfile.foot);
                            this.$routeProfileFoot.click(function (event) {
                                self.clearSiblings(this);
                                self.routeProfile.active = $(this).data('profile');
                                self.recalculateRoute();
                            });
                        } else {
                            //append with dropdown, if multiple walking profiles are enabled
                            spanFoot.appendChild(routeProfile.foot);
                            spanFoot.appendChild(routeProfile.foot.list);
                            this.routeProfile.appendChild(spanFoot);
                            this.$routeProfileFoot.click(function (event) {
                                self.clearSiblings($(this).parent());
                                self.routeProfile.active = $(this).data('profile');
                                self.recalculateRoute();
                            });
                        }
                    }
                    if (this.options.mapController.data.router_profiles['10']) {
                        //add button for profile wheelchair
                        routeProfile.wheelchair = document.createElement('button');
                        $(routeProfile.wheelchair).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_WHEELCHAIR);
                        this.$routeProfileWheelchair = $(routeProfile.wheelchair);
                        this.routeProfile.appendChild(routeProfile.wheelchair);
                        this.$routeProfileWheelchair.click(function (event) {
                            self.clearSiblings(this);
                            self.routeProfile.active = '10';
                            self.recalculateRoute();
                        });
                    }
                    this.childClick = function ($element) {
                        //handle the click inside the profile dropdown
                        self.routeProfile.active = $element.data('profile'); //activate selected profile
                        self.clearSiblings($element);
                        self.recalculateRoute(); //update the route
                    };
                    this.clearSiblings = function (element) {
                        //function to adjust css-classes after changing profile
                        var siblings = $(element).parent().children();
                        for (var _i2 = 0; _i2 < siblings.length; _i2++) {
                            $(siblings[_i2]).removeClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                        }
                        $(element).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                    };
                    for (var profile in this.options.mapController.data.router_profiles) {
                        //set default value for initial routing
                        if (this.options.mapController.data.router_profiles.hasOwnProperty(profile)) {
                            this.routeProfile.active = profile;
                            break;
                        }
                    }
                } else {
                    console.warn('No Router Profiles enabled');
                }
            }

            this.fromInputWrapper.appendChild(routerFromLabel);
            this.fromInputWrapper.appendChild(this.fromInput);
            this.fromInputWrapper.appendChild(routerFromClear);
            if (buttonOver && this.options.mapController.data.router_api_selection == '0') {
                this.$buttonOver.hide();
            }

            this.$routerFromClear.hide();

            this.$routerFromClear.click(function (event) {
                event.preventDefault();
                self.clearInput(self.$fromInput);
            });

            this.$buttonOver.click(function (event) {
                event.preventDefault();
                self.index++;
                self.$buttonOver.prop("disabled", true);

                self.overInputWrapper = document.createElement('div');
                self.overInputWrapper.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_WRAPPER;

                self.overInput = document.createElement("input");
                self.overInput.type = "text";
                self.overInput.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_FROM;
                self.overInput.id = self.overInput.name = "routingOver";

                routerOverLabel = document.createElement('label');
                routerOverLabel.setAttribute('for', 'routingFrom');
                routerOverLabel.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_Label_Interim;

                routerOverClear = document.createElement('button');
                routerOverClear.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_CLEAR;
                routerOverClear.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_CLEAR_TITLE;
                routerOverClear.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_CLEAR_HTML;
                routerOverClear.id = self.index;
                self.$routerOverClear = $(routerOverClear);

                self.overInputWrapper.appendChild(routerOverLabel);
                self.overInputWrapper.appendChild(self.overInput);
                self.overInputWrapper.appendChild(routerOverClear);

                routerViewInputWrapper.appendChild(self.overInputWrapper);
                self.$routerOverClear.click(function (event) {
                    event.preventDefault();
                    self.clearOver(self.$overInput, this.id);
                    $(this).parent().remove();
                    //buttonOver.show();
                });
                self.$overInput = $(self.overInput);
                self.$overInput.on('change', function () {
                    self.performSearch(self.$overInput, "overValue");
                });
            });

            this.$switchFromTo.click(function (event) {
                event.preventDefault();
                var switchVarName = document.getElementById("routingFrom").value;
                document.getElementById("routingFrom").value = document.getElementById("routingTo").value;
                document.getElementById("routingTo").value = switchVarName;
                var switchVarVal = self.fromValue;
                self.fromValue = self.toValue;
                self.toValue = switchVarVal;
                self.recalculateRoute();
            });
            this.$print.click(function (event) {
                event.preventDefault();
                var routingContent = document.getElementsByClassName("c4g-router-instructions-wrapper")[0];
                if (!routingContent) return;
                var WinPrint = window.open('', '', 'left=0,top=0,width=800,height=900,toolbar=0,scrollbars=0,status=0');
                WinPrint.document.write(routingContent.innerHTML);
                WinPrint.document.close();
                WinPrint.focus();
                WinPrint.print();
                WinPrint.close();
            });

            this.$fromInput = $(this.fromInput);
            this.$fromInput.on('change', function () {
                self.performSearch(self.$fromInput, "fromValue");
                if (self.$fromInput.val() !== "") {
                    self.$routerFromClear.show();
                } else {
                    self.$routerFromClear.hide();
                }
            });

            routerViewInputWrapper.appendChild(this.routerButtonBar);
            if (this.routeProfile && this.routeProfile.children) {
                routerViewInputWrapper.appendChild(this.routeProfile);
            }
            routerViewInputWrapper.appendChild(this.fromInputWrapper);

            this.toInputWrapper = document.createElement('div');
            this.toInputWrapper.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_WRAPPER;

            this.toInput = document.createElement("input");
            this.toInput.type = "text";
            this.toInput.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_TO;
            this.toInput.id = this.toInput.name = "routingTo";

            routerToLabel = document.createElement('label');
            routerToLabel.setAttribute('for', 'routingTo');
            routerToLabel.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_TO_LABEL;

            routerToClear = document.createElement('button');
            routerToClear.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_CLEAR;
            routerToClear.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_CLEAR_TITLE;
            routerToClear.innerHTML = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_CLEAR_HTML;
            this.$routerToClear = $(routerToClear);

            this.toInputWrapper.appendChild(routerToLabel);
            this.toInputWrapper.appendChild(this.toInput);
            this.toInputWrapper.appendChild(routerToClear);

            this.$routerToClear.hide();

            self.$routerToClear.click(function (event) {
                event.preventDefault();
                self.clearInput(self.$toInput);
            });

            this.$toInput = $(this.toInput);
            this.$toInput.on('change', function () {
                self.performSearch(self.$toInput, "toValue");
                if (self.$toInput.val() !== "") {
                    self.$routerToClear.show();
                } else {
                    self.$routerToClear.hide();
                }
            });

            routerViewInputWrapper.appendChild(this.toInputWrapper);

            self.statusBar.appendChild(this.getAttribution());

            routerView = this.addView({
                name: 'router-view',
                triggerConfig: {
                    tipLabel: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_VIEW_ADDRESS_INPUT,
                    className: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_VIEW_ADDRESS_INPUT,
                    withHeadline: false
                },
                sectionElements: [{ section: this.topToolbar, element: routerViewInputWrapper }, { section: this.contentContainer, element: routerViewContentWrapper }]
            });

            return routerView;
        },

        setInput: function setInput(from, coordinate) {
            // perform geoSearch on given location
            // fill from/to field
            //

            if (!coordinate) {
                return false;
            }

            coordinate = ol.proj.toLonLat(coordinate);

            if (from) {
                this.performReverseSearch(this.$fromInput, coordinate);
                this.fromValue = new ol.geom.Point(coordinate);

                //this.$fromInput.trigger('change');
            } else {
                this.performReverseSearch(this.$toInput, coordinate);
                this.toValue = new ol.geom.Point(coordinate);
            }

            this.recalculateRoute();
        },

        getAttribution: function getAttribution() {
            var self = this,
                attributionSearch = void 0,
                attributionRouter = void 0,
                attributionRouterHost = void 0,
                attributionWrapper = void 0,
                attributionHtml = void 0;
            switch (self.options.mapController.data.router_api_selection) {
                case "0":
                    attributionRouter = '<a target="_blank" href="http://project-osrm.org/">Project OSRM</a>';
                    break;
                case "1":
                    attributionRouter = '<a target="_blank" href="http://project-osrm.org/">Project OSRM</a>';
                    break;
                case "2":
                    attributionRouter = '<a target="_blank" href="https://openrouteservice.org/">openrouteservice</a>';
                    break;
            }
            switch (self.options.mapController.data.geosearch.geosearch_engine) {
                case "1":
                    //OSM
                    attributionSearch = '- Geocoder by <a target="_blank" href="https://nominatim.openstreetmap.org/">OpenStreetMap</a> ';
                    break;
                case "2":
                    //Mapquest
                    attributionSearch = '- Geocoder by <a target="_blank" href="http://www.mapquest.com/">MapQuest</a> ';
                    break;
                case "3":
                    //custom
                    attributionSearch = '- Nominatim-Geocoder ';
                    break;
                case "4":
                    //con4gis
                    attributionSearch = '- Geocoder by <a target="_blank" href="https://www.con4gis.org/kartendienste.html">con4gis</a> ';
                    break;
            }
            switch (self.options.mapController.data.router_api_selection) {
                case "0":
                    attributionRouterHost = '- OSRM hosting by <a target="_blank" href="http://algo2.iti.kit.edu/">KIT</a>';
                    break;
                case "1":
                    attributionRouterHost = '- OSRM hosting by <a target="_blank" href="http://algo2.iti.kit.edu/">KIT</a>';
                    break;
                case "2":
                    attributionRouterHost = '\'- ORS hosting by <a target="_blank" href="https://www.geog.uni-heidelberg.de/gis/heigit_en.html">HeiGIT</a>\'';
                    break;
            }

            //ToDo check params
            attributionHtml = attributionRouter + attributionSearch + attributionRouterHost;
            attributionWrapper = document.createElement('div');
            attributionWrapper.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_ATTRIBUTION_WRAPPER;

            attributionWrapper.innerHTML = attributionHtml;

            if (self.options.mapController.data.router_attribution) {
                attributionWrapper.innerHTML = self.options.mapController.data.router_attribution;
            }

            return attributionWrapper;
        },

        recalculateRoute: function recalculateRoute() {
            var tmpFeature,
                proxy = this.options.mapController.proxy;

            this.locationsSource.clear();
            if (this.fromValue) {
                tmpFeature = new ol.Feature({
                    geometry: this.fromValue.clone().transform('EPSG:4326', 'EPSG:3857')
                });
                if (this.options.mapController.data.router_from_locstyle && proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_from_locstyle]) {
                    tmpFeature.setStyle(proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_from_locstyle].style);
                }
                this.locationsSource.addFeature(tmpFeature);
            }
            if (this.toValue) {
                tmpFeature = new ol.Feature({
                    geometry: this.toValue.clone().transform('EPSG:4326', 'EPSG:3857')
                });
                if (this.options.mapController.data.router_to_locstyle && proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_to_locstyle]) {
                    tmpFeature.setStyle(proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_to_locstyle].style);
                }
                this.locationsSource.addFeature(tmpFeature);
            }
            if (this.overValue) {
                for (var propt in this.overValue) {
                    tmpFeature = new ol.Feature({
                        geometry: this.overValue[propt].clone().transform('EPSG:4326', 'EPSG:3857')
                    });
                    if (this.options.mapController.data.router_interim_locstyle && proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_interim_locstyle]) {
                        tmpFeature.setStyle(proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_interim_locstyle].style);
                    }
                    this.locationsSource.addFeature(tmpFeature);
                }
            }
            if (this.fromValue && this.toValue) {
                if (this.overValue) {
                    this.performViaRoute(this.fromValue, this.toValue, this.overValue);
                } else {
                    this.performViaRoute(this.fromValue, this.toValue);
                }
            }
        },

        performViaRoute: function performViaRoute(fromPoint, toPoint, overPoint) {

            var url, self, fromCoord, toCoord, overCoord;

            self = this;

            fromCoord = [fromPoint.getCoordinates()[1], fromPoint.getCoordinates()[0]];
            toCoord = [toPoint.getCoordinates()[1], toPoint.getCoordinates()[0]];
            if (overPoint) {
                overCoord = new Array();
                for (var propt in overPoint) {
                    overCoord.push([overPoint[propt].getCoordinates()[1], overPoint[propt].getCoordinates()[0]]);
                }
            }
            if (this.options.mapController.data.router_api_selection == '1' || this.options.mapController.data.router_api_selection == '2') {
                //OSRM-API:5.x or ORS- API
                url = self.routingApi + '/' + fromCoord;

                if (overPoint) {
                    for (var i = 0; i < overCoord.length; i++) {
                        url += '/' + overCoord[i];
                    }
                }
                url += '/' + toCoord;
                if (this.routeProfile && this.routeProfile.active) {
                    url += '?profile=' + this.routeProfile.active;
                }
                this.spinner.show();

                jQuery.ajax({
                    'url': url }).done(function (response) {
                    self.response = response;
                    if (response) {
                        self.showRoute(response);
                    }
                }).always(function () {
                    self.spinner.hide();
                    self.update();
                });

                return '';
            } else {
                //OSRM-API:<5
                url = self.routingApi + '?output=json&instructions=true&alt=false&loc_from=' + fromCoord + '&loc_to=' + toCoord;
                this.spinner.show();

                jQuery.ajax({
                    'url': url }).done(function (response) {

                    if (response) {
                        self.showRoute(response);
                    }
                }).always(function () {
                    self.spinner.hide();
                    self.update();
                });

                return '';
            }
        },

        showRoute: function showRoute(routeResponse) {

            this.showRouteLayer(routeResponse, 0);
            this.showRouteInstructions(routeResponse, 0);
        },
        showAltRoute: function showAltRoute(routeResponse, routeNumber) {
            this.showRouteLayer(routeResponse, routeNumber);
            this.showRouteInstructions(routeResponse, routeNumber);
        },

        showRouteLayer: function showRouteLayer(routeResponse, routeNumber) {

            var mapView,
                wayPolyline,
                routeFeatures,
                altRouteFeatures,
                rightPadding,
                leftPadding,
                routeNumber = routeNumber || 0;

            if (routeResponse) {
                this.routingWaySource.clear();
                this.routingAltWaySource.clear();
                mapView = this.options.mapController.map.getView();

                if (this.options.mapController.data.router_api_selection == '1' || this.options.mapController.data.router_api_selection == '2') {
                    //OSRM-API:5.x
                    wayPolyline = new ol.format.Polyline();

                    // add route

                    if (routeResponse.routes && routeResponse.routes[1]) {
                        //check for alternative route
                        if (routeNumber == 1) {
                            altRouteFeatures = wayPolyline.readFeatures(routeResponse.routes[0].geometry, {
                                dataProjection: 'EPSG:4326',
                                featureProjection: mapView.getProjection()
                            });
                            altRouteFeatures[0].setId(0);
                        } else {
                            altRouteFeatures = wayPolyline.readFeatures(routeResponse.routes[1].geometry, {
                                dataProjection: 'EPSG:4326',
                                featureProjection: mapView.getProjection()
                            });
                            altRouteFeatures[0].setId(1);
                        }
                    }
                    routeFeatures = wayPolyline.readFeatures(routeResponse.routes[routeNumber].geometry, {
                        dataProjection: 'EPSG:4326',
                        featureProjection: mapView.getProjection()
                    });
                    routeFeatures[0].setId(routeNumber);
                } else {
                    //OSRM-API:<5
                    wayPolyline = new ol.format.Polyline({
                        'factor': this.options.mapController.data.router_viaroute_precision || 1e6
                    });

                    // add route
                    routeFeatures = wayPolyline.readFeatures(routeResponse.route_geometry, {
                        dataProjection: 'EPSG:4326',
                        featureProjection: mapView.getProjection()
                    });
                }
                if (this.options.mapController.data.router_alternative == '1') {
                    if (routeResponse.routes && routeResponse.routes.length > 1 && routeResponse.routes[1]) {
                        this.routingAltWaySource.addFeatures(altRouteFeatures);
                    }
                }
                this.routingWaySource.addFeatures(routeFeatures);
                // render view
                // so the route gets drawn before the animation starts
                this.options.mapController.map.renderSync();

                // animation
                mapView.animate({
                    start: +new Date(),
                    duration: 2000,
                    resolution: mapView.getResolution(),
                    center: [0, 0]
                    //rotation: Math.PI
                });
                // this.options.mapController.map.beforeRender(
                //     ol.animation.pan({
                //       start: +new Date(),
                //       duration: 2000,
                //       source: mapView.getCenter()
                //     }),
                //     ol.animation.zoom({
                //       start: +new Date(),
                //       duration: 2000,
                //       resolution: mapView.getResolution()
                //     })
                // );

                // calculate padding
                leftPadding = 0;
                if (this.options.mapController.activePortside && this.options.mapController.activePortside.container) {
                    leftPadding = $(this.options.mapController.activePortside.container).outerWidth();
                }

                rightPadding = 0;
                if (this.options.mapController.activeStarboard && this.options.mapController.activeStarboard.container) {
                    rightPadding = $(this.options.mapController.activeStarboard.container).outerWidth();
                }

                // center on route
                mapView.fit(routeFeatures[0].getGeometry(), this.options.mapController.map.getSize(), {
                    padding: [0, rightPadding, 0, leftPadding]
                });
            }
        },

        getInstructionIcon: function getInstructionIcon(strMod, strType) {
            var image = "";

            switch (strMod) {
                case "right":
                    image = "turn-right.png";
                    break;
                case "left":
                    image = "turn-left.png";
                    break;
                case "sharp left":
                    image = "sharp-left.png";
                    break;
                case "sharp right":
                    image = "sharp-right.png";
                    break;
                case "slight left":
                    image = "slight-left.png";
                    break;
                case "slight right":
                    image = "slight-right.png";
                    break;
                case "uturn":
                    image = "u-turn.png";
                    break;
                case "straight":
                    image = "continue.png";
                    break;
                default:
                    image = "default.png";
                    break;
            }
            switch (strType) {
                case "depart":
                    image = "head.png";
                    break;
                case "arrive":
                    image = "target.png";
                    break;
                case "roundabout":
                    image = "round-about.png";
                    break;
                default:
                    break;
            }

            return "bundles/con4gismaps/vendor/osrm/images/" + image;
        },
        getInstructionIconORS: function getInstructionIconORS(intType) {
            var image = void 0;
            switch (intType) {
                case 0:
                    image = "turn-left.png";
                    break;
                case 1:
                    image = "turn-right.png";
                    break;
                case 2:
                    image = "sharp-left.png";
                    break;
                case 3:
                    image = "sharp-right.png";
                    break;
                case 4:
                    image = "slight-left.png";
                    break;
                case 5:
                    image = "slight-right.png";
                    break;
                case 6:
                    image = "continue.png";
                    break;
                case 7:
                    image = "round-about.png";
                    break;
                case 8:
                    image = "round-about.png";
                    break;
                case 9:
                    image = "u-turn.png";
                    break;
                case 10:
                    image = "target.png";
                    break;
                case 11:
                    image = "head.png";
                    break;
                case 12:
                    image = "slight-left.png";
                    break;
                case 13:
                    image = "slight-right.png";
                    break;

            }
            return document.getElementsByTagName('base')[0].href + "bundles/con4gismaps/vendor/osrm/images/" + image;
        },

        getTypeText: function getTypeText(strType) {
            var textID;

            switch (strType) {
                case "turn":
                    textID = "ROUTER_5.X_TYPE_0";
                    break;
                case "new name":
                    textID = "ROUTER_5.X_TYPE_1";
                    break;
                case "depart":
                    textID = "ROUTER_5.X_TYPE_2";
                    break;
                case "arrive":
                    textID = "ROUTER_5.X_TYPE_3";
                    break;
                case "merge":
                    textID = "ROUTER_5.X_TYPE_4";
                    break;
                case "on ramp":
                    textID = "ROUTER_5.X_TYPE_5";
                    break;
                case "off ramp":
                    textID = "ROUTER_5.X_TYPE_6";
                    break;
                case "fork":
                    textID = "ROUTER_5.X_TYPE_7";
                    break;
                case "end of road":
                    textID = "ROUTER_5.X_TYPE_8";
                    break;
                case "use lane":
                    textID = "ROUTER_5.X_TYPE_9";
                    break;
                case "continue":
                    textID = "ROUTER_5.X_TYPE_10";
                    break;
                case "roundabout":
                case "exit roundabout":
                    textID = "ROUTER_5.X_TYPE_11";
                    break;
                case "rotary":
                case "exit rotary":
                    textID = "ROUTER_5.X_TYPE_12";
                    break;
                case "roundabout turn":
                    textID = "ROUTER_5.X_TYPE_13";
                    break;
                case "notification":
                    textID = "ROUTER_5.X_TYPE_14";
                    break;
                default:
                    break;
            }
            return __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */][textID];
        },

        getModifierText: function getModifierText(strModifier) {
            var textID;

            switch (strModifier) {
                case "uturn":
                    textID = "ROUTER_5.X_MOD_0";
                    break;
                case "sharp right":
                    textID = "ROUTER_5.X_MOD_1";
                    break;
                case "right":
                    textID = "ROUTER_5.X_MOD_2";
                    break;
                case "slight right":
                    textID = "ROUTER_5.X_MOD_3";
                    break;
                case "straight":
                    textID = "ROUTER_5.X_MOD_4";
                    break;
                case "slight left":
                    textID = "ROUTER_5.X_MOD_5";
                    break;
                case "left":
                    textID = "ROUTER_5.X_MOD_6";
                    break;
                case "sharp left":
                    textID = "ROUTER_5.X_MOD_7";
                    break;
                default:
                    textID = "ROUTER_5.X_MOD_8";
            }
            return __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */][textID];
        },
        getDrivingInstructionIcon: function getDrivingInstructionIcon(instructionId) {
            var id, image;

            id = instructionId.replace(/^11-\d{1,}$/, "11"); // dumb check, if there is a roundabout (all have the same icon)

            image = 'default.png';

            switch (id) {
                case '1':
                    image = 'continue.png';
                    break;
                case '2':
                    image = 'slight-right.png';
                    break;
                case '3':
                    image = 'turn-right.png';
                    break;
                case '4':
                    image = 'sharp-right.png';
                    break;
                case '5':
                    image = 'u-turn.png';
                    break;
                case '6':
                    image = 'sharp-left.png';
                    break;
                case '7':
                    image = 'turn-left.png';
                    break;
                case '8':
                    image = 'slight-left.png';
                    break;
                case '10':
                    image = 'head.png';
                    break;
                case '11':
                    image = 'round-about.png';
                    break;
                case '15':
                    image = 'target.png';
                    break;
            }
            return document.getElementsByTagName('base')[0].href + "bundles/con4gismaps/vendor/osrm/images/" + image;
        },
        getText: function getText(id) {

            var text_id = "ROUTER_" + id;

            if (__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */][text_id] === undefined) {
                console.warn(text_id + " can't find in language files.");
            }
            return __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */][text_id];
        },

        getDrivingInstruction: function getDrivingInstruction(instructionId) {

            var id, description;

            id = "DIRECTION_" + instructionId.replace(/^11-\d{2,}$/, "11-x"); // dumb check, if there are 10+ exits on a roundabout (say the same for exit 10+)

            description = this.getText(id);
            if (!description) {
                description = this.getText('DIRECTION_0');
            }

            return description;
        },
        showRouteInstructions: function showRouteInstructions(routeResponse, routeNumber) {

            var self,
                routerInstruction,
                routerInstructionsHeader,
                routerInstructionsHtml,
                instr,
                strType,
                strMod,
                rowstyle,
                routeNumber = routeNumber || 0,
                i,
                j,
                route_name_0 = "",
                route_name_1 = "",
                total_distance = "",
                total_time = "";

            self = this;

            if (self.routerInstructionsWrapper === undefined) {
                self.routerInstructionsWrapper = document.createElement('div');
                self.routerInstructionsWrapper.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_WRAPPER;
                self.routerViewContentWrapper.appendChild(self.routerInstructionsWrapper);
            } else {
                $(self.routerInstructionsWrapper).empty();
            }

            routerInstructionsHeader = document.createElement('div');
            routerInstructionsHeader.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_HEADER;

            if (routeResponse) {
                if (this.options.mapController.data.router_api_selection == '1') {
                    //OSRM-API:5.x
                    if (routeResponse.routes[routeNumber].legs[0].summary) {
                        route_name_0 = routeResponse.routes[routeNumber].legs[0].summary.split(",")[0];
                        route_name_1 = routeResponse.routes[routeNumber].legs[0].summary.split(",")[1];
                        if (routeResponse.routes[routeNumber].legs[1]) {
                            route_name_1 = routeResponse.routes[routeNumber].legs[1].summary.split(",")[1];
                        }
                    }
                    total_distance = this.toHumanDistance(routeResponse.routes[routeNumber].distance);
                    total_time = this.toHumanTime(routeResponse.routes[routeNumber].duration);
                } else if (this.options.mapController.data.router_api_selection == '0') {
                    //OSRM-API:<5
                    if (routeResponse.route_name) {
                        route_name_0 = routeResponse.route_name[0];
                        route_name_1 = routeResponse.route_name[1];
                    }

                    if (routeResponse.route_summary) {
                        total_distance = this.toHumanDistance(routeResponse.route_summary.total_distance);
                        total_time = this.toHumanTime(routeResponse.route_summary.total_time);
                    }
                } else if (this.options.mapController.data.router_api_selection == '2') {
                    //OSR-API
                    total_time = this.toHumanTime(routeResponse.routes[routeNumber].summary.duration);
                    total_distance = this.toHumanDistance(routeResponse.routes[routeNumber].summary.distance);
                }

                if (route_name_0 && route_name_1) {
                    routerInstructionsHeader.innerHTML = '<label>' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_VIEW_LABEL_ROUTE + '</label> <em>' + route_name_0 + ' &#8594; ' + route_name_1 + '</em><br>' + '<label>' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_VIEW_LABEL_DISTANCE + '</label> <em>' + total_distance + '</em><br>' + '<label>' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_VIEW_LABEL_TIME + '</label> <em>' + total_time + '</em><br>';
                } else if (this.routeProfile.active) {
                    routerInstructionsHeader.innerHTML = '<label>' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_VIEW_LABEL_PROFILE + '</label> <em>' + this.options.mapController.data.router_profiles[this.routeProfile.active] + '</em><br>' + '<label>' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_VIEW_LABEL_DISTANCE + '</label> <em>' + total_distance + '</em><br>' + '<label>' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_VIEW_LABEL_TIME + '</label> <em>' + total_time + '</em><br>';
                }

                self.routerInstructionsWrapper.appendChild(routerInstructionsHeader);

                routerInstruction = document.createElement('div');

                routerInstructionsHtml = '<table class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_TABLE + '" cellpadding="0" cellspacing="0">';
                if (this.options.mapController.data.router_api_selection === '1') {
                    //OSRM-API:5.x
                    for (j = 0; j < routeResponse.routes[routeNumber].legs.length; j += 1) {
                        for (i = 0; i < routeResponse.routes[routeNumber].legs[j].steps.length; i += 1) {
                            instr = routeResponse.routes[routeNumber].legs[j].steps[i];

                            strType = instr.maneuver.type;
                            if (instr.maneuver.modifier) {
                                strMod = instr.maneuver.modifier;
                            }
                            rowstyle = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_ODD;

                            if (i % 2 === 0) {
                                rowstyle = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_EVEN;
                            }

                            rowstyle += " " + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM;

                            routerInstructionsHtml += '<tr class="' + rowstyle + '">';

                            routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION + '">';
                            routerInstructionsHtml += '<img class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_ICON + '" src="' + this.getInstructionIcon(strMod, strType) + '" alt=""/>';
                            routerInstructionsHtml += '</td>';

                            routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT + '" data-pos="' + instr.maneuver.location + '">';

                            // build route description
                            var instructiontext = this.getTypeText(instr.maneuver.type).replace(/%s/, instr.name).replace(/%m/, this.getModifierText(instr.maneuver.modifier)).replace(/%z/, instr.maneuver.exit);
                            if (instr.name.length < 1) {
                                instructiontext = instructiontext.replace(/\[.*?\]/g, '');
                            } else {
                                instructiontext = instructiontext.replace(/\[(.*)\]/, "$1");
                            }
                            routerInstructionsHtml += instructiontext;

                            routerInstructionsHtml += '</div>';
                            routerInstructionsHtml += "</td>";

                            routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_DISTANCE + '">';
                            if (i !== routeResponse.routes[routeNumber].legs[0].steps.length - 1) {
                                routerInstructionsHtml += this.toHumanDistance(instr.distance);
                            }
                            routerInstructionsHtml += "</td>";

                            routerInstructionsHtml += "</tr>";
                        }
                    }
                } else if (this.options.mapController.data.router_api_selection === '0') {
                    //OSRM-API:<5
                    for (i = 0; i < routeResponse.route_instructions.length; i += 1) {
                        instr = routeResponse.route_instructions[i];
                        rowstyle = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_ODD;

                        if (i % 2 === 0) {
                            rowstyle = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_EVEN;
                        }

                        rowstyle += " " + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM;

                        routerInstructionsHtml += '<tr class="' + rowstyle + '">';

                        routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION + '">';
                        routerInstructionsHtml += '<img class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_ICON + '" src="' + this.getDrivingInstructionIcon(instr[0]) + '" alt=""/>';
                        routerInstructionsHtml += '</td>';

                        routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT + '" data-pos="' + instr[3] + '">';

                        // build route description
                        if (instr[1] !== "") {
                            routerInstructionsHtml += this.getDrivingInstruction(instr[0]).replace(/\[(.*)\]/, "$1").replace(/%s/, instr[1]).replace(/%d/, this.getText(instr[6]));
                        } else {
                            routerInstructionsHtml += this.getDrivingInstruction(instr[0]).replace(/\[(.*)\]/, "").replace(/%d/, this.getText(instr[6]));
                        }

                        routerInstructionsHtml += '</div>';
                        routerInstructionsHtml += "</td>";

                        routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_DISTANCE + '">';
                        if (i !== routeResponse.route_instructions.length - 1) {
                            routerInstructionsHtml += this.toHumanDistance(instr[5]);
                        }
                        routerInstructionsHtml += "</td>";

                        routerInstructionsHtml += "</tr>";
                    }
                } else if (this.options.mapController.data.router_api_selection === '2') {
                    //OpenRouteService
                    for (j = 0; j < routeResponse.routes[routeNumber].segments.length; j += 1) {
                        for (i = 0; i < routeResponse.routes[routeNumber].segments[j].steps.length; i += 1) {
                            instr = routeResponse.routes[routeNumber].segments[j].steps[i];

                            strType = instr.type;

                            rowstyle = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_ODD;

                            if (i % 2 === 0) {
                                rowstyle = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_EVEN;
                            }

                            rowstyle += " " + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM;

                            routerInstructionsHtml += '<tr class="' + rowstyle + '">';

                            routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION + '">';
                            routerInstructionsHtml += '<img class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_ICON + '" src="' + this.getInstructionIconORS(strType) + '" alt=""/>';
                            routerInstructionsHtml += '</td>';

                            if (instr.maneuver) {
                                routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT + '" data-pos="' + instr.maneuver.location + '">';
                            } else {
                                routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT + '" data-pos="' + 0 + '">';
                            }

                            // build route description

                            routerInstructionsHtml += instr.instruction;

                            routerInstructionsHtml += '</div>';
                            routerInstructionsHtml += "</td>";

                            routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_DISTANCE + '">';
                            if (i !== routeResponse.routes[routeNumber].segments[0].steps.length - 1) {
                                routerInstructionsHtml += this.toHumanDistance(instr.distance);
                            }
                            routerInstructionsHtml += "</td>";

                            routerInstructionsHtml += "</tr>";
                        }
                    }
                }

                routerInstructionsHtml += '</table>';

                routerInstruction.innerHTML = routerInstructionsHtml;

                self.routerInstructionsWrapper.appendChild(routerInstruction);

                this.adjustInstructionMapInteraction();
            }
        },

        adjustInstructionMapInteraction: function adjustInstructionMapInteraction(routerInstruction) {
            var self = this,
                fnItemClick,
                fnItemOver,
                fnItemOut;

            fnItemClick = function fnItemClick(element) {
                if (self.routingWaySource && self.routingWaySource.getFeatures() && self.options.mapController.data.router_api_selection == '0') {
                    var feature = self.routingWaySource.getFeatures()[0];
                    if (feature) {
                        var currentCoordinates = feature.getGeometry().getCoordinates()[element.data('pos')];
                        self.routingHintSource.clear();
                        var currentHintFeature = new ol.Feature({
                            geometry: new ol.geom.Point(currentCoordinates)
                        });
                        self.routingHintSource.addFeature(currentHintFeature);
                        self.options.mapController.map.getView().setCenter(currentCoordinates);
                    }
                }
                if (self.routingWaySource && self.options.mapController.data.router_api_selection >= '1') {
                    self.routingHintSource.clear();
                    var coordLonLat = element.data('pos');
                    var stringlonlat = coordLonLat.split(",");
                    stringlonlat[0] = parseFloat(stringlonlat[0]);
                    stringlonlat[1] = parseFloat(stringlonlat[1]);
                    var newCoord = ol.proj.fromLonLat(stringlonlat);
                    var currentHintFeature = new ol.Feature({
                        geometry: new ol.geom.Point(newCoord)
                    });
                    self.routingHintSource.addFeature(currentHintFeature);
                    self.options.mapController.map.getView().setCenter(newCoord);
                }
            };

            fnItemOver = function fnItemOver(element) {
                if (self.routingWaySource && self.routingWaySource.getFeatures() && self.options.mapController.data.router_api_selection == '0') {
                    var feature = self.routingWaySource.getFeatures()[0];
                    if (feature) {
                        self.routingHintSource.clear();
                        var currentHintFeature = new ol.Feature({
                            geometry: new ol.geom.Point(feature.getGeometry().getCoordinates()[element.data('pos')])
                        });
                        self.routingHintSource.addFeature(currentHintFeature);
                    }
                }
                if (self.routingWaySource && self.routingWaySource.getFeatures() && self.options.mapController.data.router_api_selection >= '1') {
                    var feature = self.routingWaySource.getFeatures()[0];
                    if (feature) {
                        self.routingHintSource.clear();
                        var coordLonLat = element.data('pos');
                        var stringlonlat = coordLonLat.split(",");
                        stringlonlat[0] = parseFloat(stringlonlat[0]);
                        stringlonlat[1] = parseFloat(stringlonlat[1]);
                        var newCoord = ol.proj.fromLonLat(stringlonlat);
                        var currentHintFeature = new ol.Feature({
                            geometry: new ol.geom.Point(newCoord)
                        });
                        self.routingHintSource.addFeature(currentHintFeature);
                    }
                }
            };

            fnItemOut = function fnItemOut() {
                self.routingHintSource.clear();
            };

            $('[data-pos]', routerInstruction).each(function (index, element) {

                var $element = $(element);

                $element.click(function () {
                    fnItemClick($element);
                });

                $element.on('mouseenter', function () {
                    fnItemOver($element);
                });

                $element.on('mouseleave', function () {
                    fnItemOut();
                });
            });
        },

        clearInput: function clearInput($input) {

            $input.val('');
            $input.trigger('change');
            this.routingWaySource.clear();
            this.routingAltWaySource.clear();
            this.routingHintSource.clear();

            $(this.routerInstructionsWrapper).empty();
            this.recalculateRoute();
            this.update();
        },
        clearOver: function clearOver($input, index) {
            if (this.overValue) {
                delete this.overValue[index];
            }
            this.$buttonOver.prop("disabled", false);
            $(this.routerInstructionsWrapper).empty();
            this.recalculateRoute();
            this.update();
        },

        performReverseSearch: function performReverseSearch($input, value) {

            var self = this,
                url;

            url = this.geoReverseSearchApi + '?format=json&lat=' + value[1] + '&lon=' + value[0];
            this.spinner.show();

            jQuery.ajax({
                'url': url }).done(function (response) {

                if (response) {
                    var value = "";
                    if (response.address) {
                        if (response.address.city) {
                            value = response.address.city;
                            if (response.address.road) {
                                value = ', ' + value;
                            }
                        }
                        if (response.address.town) {
                            value = response.address.town;
                            if (response.address.road) {
                                value = ', ' + value;
                            }
                        }
                        if (response.address.road) {
                            if (response.address.house_number) {
                                value = ' ' + response.address.house_number + value;
                            }
                            value = response.address.road + value;
                        }
                    }

                    if (value === "") {
                        value = response.display_name;
                    }
                    $input.val(value);

                    if ($input.attr('name') === "routingFrom") {
                        self.$routerFromClear.show();
                    } else if ($input.attr('name') === "routingTo") {
                        self.$routerToClear.show();
                    }

                    self.recalculateRoute();
                }
            }).always(function () {
                self.spinner.hide();
            });
        },

        performSearch: function performSearch($input, value) {

            var map, bounds, viewbox, self, url;

            self = this;

            if ($input.val() === "") {
                //self.clearInput($input);
                delete self[value];
                return "";
            }

            map = self.options.mapController.map;
            bounds = map.getView().calculateExtent(map.getSize());
            bounds = ol.proj.transformExtent(bounds, map.getView().getProjection(), 'EPSG:4326');
            viewbox = '&viewbox=' + bounds[0] + ',' + bounds[1] + ',' + bounds[2] + ',' + bounds[3];

            url = self.geoSearchApi + '?format=json&limit=1&q=' + encodeURI($input.val()) + viewbox;

            jQuery.ajax({
                'url': url
            }).done(function (response) {

                if (response.length > 0) {
                    if (value === "overValue") {
                        if (!self.overValue) {
                            self.overValue = {};
                        }
                        self.overValue[self.index] = new ol.geom.Point([parseFloat(response[0].lon), parseFloat(response[0].lat)]);
                        self.$buttonOver.prop("disabled", false);
                    } else {
                        self[value] = new ol.geom.Point([parseFloat(response[0].lon), parseFloat(response[0].lat)]);
                    }
                } else {
                    alert(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_VIEW_ALERT_ADDRESS);
                    self.clearInput($input);
                    delete self[value];
                }

                self.recalculateRoute();
            }).error(function () {
                alert(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].ROUTER_VIEW_ALERT_GEOCODING);
            });

            return "";
        },

        toHumanDistance: function toHumanDistance(distanceInMeters) {

            // copied from old sources

            var distance, humanDistance;

            distance = parseInt(distanceInMeters, 10);
            distance = distance / 1000;

            if (distance >= 100) {
                humanDistance = distance.toFixed(0) + '&nbsp;' + 'km';
            } else if (distance >= 10) {
                humanDistance = distance.toFixed(1) + '&nbsp;' + 'km';
            } else if (distance >= 0.1) {
                humanDistance = distance.toFixed(2) + '&nbsp;' + 'km';
            } else {
                humanDistance = (distance * 1000).toFixed(0) + '&nbsp;' + 'm';
            }

            return humanDistance;
        },

        toHumanTime: function toHumanTime(timeInSeconds) {

            // copied from old sources

            var seconds, minutes, hours, humanTime;

            seconds = parseInt(timeInSeconds, 10);
            minutes = parseInt(seconds / 60, 10);
            seconds = seconds % 60;

            hours = parseInt(minutes / 60, 10);
            minutes = minutes % 60;

            if (hours === 0 && minutes === 0) {
                humanTime = seconds + '&nbsp;' + 's';
            } else if (hours === 0) {
                humanTime = minutes + '&nbsp;' + 'min';
            } else {
                humanTime = hours + '&nbsp;' + 'h' + '&nbsp;' + minutes + '&nbsp;' + 'min';
            }

            return humanTime;
        }

    });
})(jQuery, this.c4g);

var Router = this.c4g.maps.control.Router;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-print.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-print.js ***!
  \*******************************************************/
/*! exports provided: Print */
/*! exports used: Print */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Print; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};



(function ($, c4g) {
  'use strict';

  /**
   * Control to toggle the browser/desvice position on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Print = function (opt_options) {

    var self = this;
    var options = opt_options || {};

    var element, button;

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PRINT,
      switchable: true,
      enabled: true,
      mapController: undefined
    }, options);

    if (!options.mapController) {
      return false;
    }

    var view = options.mapController.map.getView();
    var mapData = options.mapController.data;

    var toggle = function toggle(event) {
      event.stopPropagation();
      var canvas = document.getElementsByClassName("ol-unselectable")[0];

      canvas.toBlob(function (blob) {
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'map.png';
        a.click();
        window.URL.revokeObjectURL(url);
      });
    };

    // wrapper div
    element = document.createElement('div');
    element.className = options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' c4g-portside-control ol-control';

    if (options.switchable) {
      // button
      button = document.createElement('button');
      button.title = options.tipLabel;
      button.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PRINT;
      element.appendChild(button);

      // set onClick to the toggle-function
      button.addEventListener('click', toggle, false);
      button.addEventListener('touchstart', toggle, false);
    }

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });
  };
  ol.inherits(c4g.maps.control.Print, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Print.prototype = $.extend(c4g.maps.control.Print.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Print = this.c4g.maps.control.Print;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-sideboard.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-sideboard.js ***!
  \***********************************************************/
/*! exports provided: Sideboard */
/*! exports used: Sideboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Sideboard; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_misc_spinner__ = __webpack_require__(/*! ./c4g-maps-misc-spinner */ "./Resources/public/js/c4g-maps-misc-spinner.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};






/**
 * Base class for sideboard structures. Provides standard configurations which are equal for each sideboard element.
 */
(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {ol.control.Control}
   * @param   {object}              options  misc configuration options
   *
   */

  c4g.maps.control.Sideboard = function (options) {

    this.options = $.extend({
      create: true,
      extDiv: false,
      defaultOpen: false,
      mapController: undefined,
      name: 'sideboard',
      direction: 'right'
    }, options);

    //active Identifier (which side is this element on?)
    //cssname needed to set the css class correctly
    switch (this.options.direction) {
      case 'left':
        this.identifier = 'Portside';
        this.cssname = 'portside';
        break;
      case 'right':
        this.identifier = 'Starboard';
        this.cssname = 'starboard';
        break;
    }
    //this.cssname = this.identifier.charAt(0).toLowerCase() + this.identifier.slice(1);
    this.initialized = false;
    this.options.tipLabel = this.options.tipLabel || this.options.headline || __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_SIDEBOARD;
    this.container = document.createElement('div');
    this.element = document.createElement('div');
    this.button = undefined;
    this.spinner = undefined;
    // mainstructure elements
    this.wrapper = undefined;
    this.titleBar = undefined;
    this.headline = undefined;
    this.topToolbar = undefined;
    this.contentContainer = undefined;
    this.bottomToolbar = undefined;
    this.statusBar = undefined;

    this.sections = [];
    this.viewTriggerBar = undefined;
    this.views = [];
    this.activeView = undefined;
    this.pausedView = undefined;

    if (this.options.create && this.options.mapController) {
      this.create();
    }

    if (!this.options.extDiv) {
      ol.control.Control.call(this, {
        element: this.element,
        target: this.options.target || undefined
      });
    }
  };
  ol.inherits(c4g.maps.control.Sideboard, ol.control.Control);

  // Add methods
  c4g.maps.control.Sideboard.prototype = $.extend(c4g.maps.control.Sideboard.prototype, {

    /**
     * Creates the basic html-elements for the sideboard
     *
     * @return  {boolean}  'true' on success
     */
    create: function create() {
      var self, initClass, titleButtonBar, closeButton, capitalizedName, hideButton, caching;

      caching = this.options.caching;
      capitalizedName = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].capitalizeFirstLetter(this.options.name);
      self = this;

      // Do not hide when it is initialized open, or in an external div
      if (this.options.extDiv) {
        initClass = ' ' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OPEN;
        // if (caching) {
        //     utils.storeValue(this.options.name, '1');
        // }
      } else {
        initClass = ' ' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].CLOSE;
        // if (caching) {
        //     utils.storeValue(this.options.name, '0');
        // }
        this.options.mapController["active" + this.identifier] = this.options.mapController["active" + this.identifier] || false;

        this.button = document.createElement('button');
        $(this.button).on('click', function (event) {
          event.stopPropagation();
          // loose focus, otherwise it looks messy
          try {
            this.blur();
          } catch (e) {
            // [note] "this.blur()" does not work in IE-fullscreen-mode
            console.warn(e.name + ': ' + e.message);
          }
          if (capitalizedName == "Router" || capitalizedName == "Measure" || capitalizedName == "Editor") {
            self.toggle(true);
          } else {
            self.toggle();
          }
        });
        this.button.title = this.options.tipLabel;
        this.element.appendChild(this.button);
      }

      // Set attributes
      $(this.container).addClass('c4g-' + this.options.name + ' ' + 'c4g-' + this.cssname + '-container' + ' ' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + initClass);
      $(this.element).addClass('c4g-' + this.options.name + ' ' + 'c4g-' + this.cssname + '-control' + ' ' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' ' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL + initClass);

      // Set initial dimensions
      if (this.options.direction === 'right') {
        //this.container.style.minWidth = '250px';
        //this.container.style[this.options.direction] = '-1920px';
        this.container.style[this.options.direction] = '-100%';
      } else {
        //this.container.style.minWidth = '250px';
        //this.container.style[this.options.direction] = '-1920px';
        this.container.style[this.options.direction] = '-100%';
      }

      // Place container
      if (this.options.extDiv) {
        document.getElementById(this.options.extDiv).appendChild(this.container);
        //     this.options.mapController["active" + this.identifier] = this;
      } else {
        if (this.options.direction === 'left') {
          $('#' + this.options.mapController.map.getTarget() + ' .' + __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OL_OVERLAYCONTAINER_SE).append(this.container);
        } else {
          this.options.mapController.$overlaycontainer_stopevent.append(this.container);
        }
      }

      // Build content-area
      //
      // Wrapper
      this.wrapper = document.createElement('div');
      this.wrapper.className = 'c4g-' + this.cssname + '-wrapper';
      this.container.appendChild(this.wrapper);
      // Titlebar
      this.titleBar = document.createElement('div');
      this.titleBar.className = 'c4g-' + this.cssname + '-titlebar';
      this.wrapper.appendChild(this.titleBar);

      // Triggerbar
      this.viewTriggerBar = document.createElement('div');
      this.viewTriggerBar.className = 'c4g-' + this.cssname + '-viewtriggerbar';

      // Top-Toolbar
      this.topToolbar = this.addSection({
        className: 'c4g-' + this.cssname + '-top-toolbar',
        target: this.wrapper
      });

      // Content-Container
      this.contentContainer = this.addSection({
        className: 'c4g-' + this.cssname + '-content-container',
        target: this.wrapper
      });

      // add content headline
      this.contentHeadline = document.createElement('div');
      this.contentHeadline.className = 'contentHeadline';
      this.contentHeadline.innerHTML = '';
      this.contentContainer.appendChild(this.contentHeadline);

      // Bottom-Toolbar
      this.bottomToolbar = this.addSection({
        className: 'c4g-' + this.cssname + '-bottom-toolbar c4g-close',
        target: this.wrapper
      });

      // Statusbar
      this.statusBar = document.createElement('div');
      this.statusBar.className = 'c4g-' + this.cssname + '-statusbar c4g-close';
      this.wrapper.appendChild(this.statusBar);

      // Add spinner
      this.spinner = new __WEBPACK_IMPORTED_MODULE_3__c4g_maps_misc_spinner__["a" /* Spinner */]({
        target: this.contentContainer,
        className: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].LARGE
      });

      // Fill titlebar
      //
      // Headline
      this.headline = document.createElement('span');
      this.headline.className = 'c4g-' + this.cssname + '-headline';
      this.headline.innerHTML = this.options.headline;
      this.titleBar.appendChild(this.headline);
      // Buttonbar
      titleButtonBar = document.createElement('div');
      titleButtonBar.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].CONTROL + ' ' + 'c4g-' + this.cssname + '-buttonbar';
      this.titleBar.appendChild(titleButtonBar);

      if (this.options.direction === 'left') {
        // Hidebutton
        hideButton = document.createElement('button');
        hideButton.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].PORTSIDE_HIDE;
        hideButton.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].HIDE;
        $(hideButton).click(function (event) {
          event.preventDefault();
          self.close(true);
          return false;
        });
        titleButtonBar.appendChild(hideButton);
      }

      // Closebutton
      closeButton = document.createElement('button');
      closeButton.className = 'c4g-' + this.cssname + '-close';
      closeButton.title = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].CLOSE;
      $(closeButton).click(function (event) {
        event.preventDefault();
        self.close();
        return false;
      });
      titleButtonBar.appendChild(closeButton);

      //Add spinner for left sided sideboard elements
      this.spinner = new __WEBPACK_IMPORTED_MODULE_3__c4g_maps_misc_spinner__["a" /* Spinner */]({
        target: this.contentContainer,
        className: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].LARGE
      });

      // Handle external DIV and default state
      // catch touch events and stop their propagation
      // otherwise touch-scrolling will be stopped by ol3
      $(this.container).on('touchstart touchmove touchend', function (event) {
        event.stopPropagation();
      });

      // Bind the update method to the map-resize event
      this.options.mapController.map.on('change:size', this.update, this);

      // Show open if desired
      if (this.options.defaultOpen || this.options.caching && __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getValue(this.options.name) == '1') {
        this.open();
      }

      return true;
    }, // end of "create"

    /**
     *   Update the sideboards html-elements
     *   resizes the content-container
     *   and the top-toolbar
     *
     * @param  {event-object}  opt_event  *optional*  Just needed by the ol-bind-method,
     *                                                but not used in the function
     */
    update: function update(opt_event) {

      var self, contentContainerOuterHeight, containerOffsetWidth;

      self = this;

      /*
      if (this.options && this.options.name) {
          capitalizedName = utils.capitalizeFirstLetter(this.options.name);
      }*/

      contentContainerOuterHeight = $(this.wrapper).height() - ($(this.titleBar).outerHeight(true) + $(this.statusBar).outerHeight(true));
      if (this.options && this.options.direction && this.options.direction != "undefined" && this.options.direction === 'left') {
        if (this !== this.options.mapController["active" + this.identifier]) {
          containerOffsetWidth = 0;
        }
      }

      // Top-Toolbar
      if (this.topToolbar) {
        if (this.topToolbar.innerHTML) {
          // this.topToolbar.style.display = 'block';
          this.topToolbar.style.display = '';
          contentContainerOuterHeight -= $(this.topToolbar).outerHeight(true);
        } else {
          this.topToolbar.style.display = 'none';
        }
      }

      // Bottom-toolbar
      if (this.bottomToolbar) {
        if (this.bottomToolbar.innerHTML) {
          // this.bottomToolbar.style.display = 'block';
          this.bottomToolbar.style.display = '';
          contentContainerOuterHeight -= $(this.bottomToolbar).outerHeight(true);
        } else {
          this.bottomToolbar.style.display = 'none';
        }
      }

      // Content-container
      $(this.contentContainer).outerHeight(contentContainerOuterHeight);

      // Correct width
      if (this.options) {
        if (this.options.mapController["active" + this.identifier] === this) {
          //this.container.style.width = 'auto';
          containerOffsetWidth = this.container.offsetWidth;
          this.options.mapController[this.options.direction + "SlideElements"].forEach(function (element) {
            $(element).css(self.options.direction, containerOffsetWidth);
          });

          //only move the toggle button on starboard elements
          if (this.options.direction === 'right') {
            $(this.element).css(this.options.direction, containerOffsetWidth);
          }
        }
      }
    }, // end of "update"

    /**
     * Opens this sideboard element
     *
     * @param   {object}    *optional* options to be passed to the initialize-function if it exists
     * @return  {boolean}  'true' an success
     */
    open: function open(opt_options) {
      var containerOffsetWidth, self;

      self = this;

      // Call initialize-functions, if existent
      if (!this.initialized) {
        if (typeof this.init === 'function') {
          this.initialized = this.init(opt_options);
        } else {
          this.initialized = true;
        }
      }

      // call preOpenFunctions
      if (typeof this.preOpenFunction === 'function') {
        this.preOpenFunction();
      }

      containerOffsetWidth = this.container.offsetWidth;

      if (this.options.extDiv) {
        // Not available on external divs
        console.warn('You cannot use this function on external embedded sideboard.');
      } else {
        if (this.options.mapController["active" + this.identifier]) {
          if (this.options.mapController["active" + this.identifier] === this) {
            return false;
          }
          //close other active sideboard on this side
          this.options.mapController["active" + this.identifier].close(true, true);
        } else {
          // slide other elements when no other sideboard was active on this side
          this.options.mapController[this.options.direction + "SlideElements"].forEach(function (element) {
            $(element).css(self.options.direction, containerOffsetWidth);
          });
        }

        $(this.container).removeClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OPEN).css(this.options.direction, 0);
        if (this.options.direction === 'left') {
          $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        } else {
          $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OPEN).css(this.options.direction, containerOffsetWidth);
        }

        // set this as active Sideboard
        this.options.mapController["active" + this.identifier] = this;

        // check if a view needs to be reactivated
        if (this.activeView) {
          this.activeView.activate();
        }

        if ($(this.statusBar).hasClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
          $(this.statusBar).removeClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        }

        if ($(this.bottomToolbar).hasClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
          $(this.bottomToolbar).removeClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        }

        // show container to fix resizing issue
        $(this.container).css('visibility', 'visible');

        this.update();
        if (this.options.caching) {
          __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].storeValue(this.options.name, '1');
        }

        // call postOpenFunctions
        if (typeof this.postOpenFunction === 'function') {
          this.postOpenFunction();
        }

        return true;
      }
      return false;
    }, // end of "open"

    isOpen: function isOpen() {
      return this.options.mapController["active" + this.identifier] && this.options.mapController["active" + this.identifier] === this;
    },

    /**
     * Closes this sideboard element
     *
     * @param   {boolean}  opt_hide               *optional* Choose if this function should trigger |preHideFunction|
     *                                            instead of |preCloseFunction|. Default is |false|.
     * @param   {boolean}  opt_openOtherSideboard  *optional* Indicates if another sideboard element will be opened instead.
     *                                            Default is |false|.
     *
     * @return  {boolean}                         |true| on success.
     */
    close: function close(opt_hide, opt_openOtherSideboard) {
      var containerOffsetWidth, direction;

      direction = this.options.direction;

      if (opt_hide) {
        if (typeof this.preHideFunction === 'function') {
          this.preHideFunction();
        }
      } else {
        if (typeof this.preCloseFunction === 'function') {
          this.preCloseFunction();
        }
      }

      containerOffsetWidth = this.container.offsetWidth;

      if (this.options.extDiv) {
        // Not available on external divs
        console.warn('You cannot use this function on external embedded sideboard.');
      } else {
        if (this.options.mapController["active" + this.identifier] !== this) {
          console.warn('This ' + this.options.name + '-element (' + this.options.name + ') is already closed.');
          return false;
        }
        $(this.container).removeClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].CLOSE).css(direction, -containerOffsetWidth);
        $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].CLOSE).css(direction, 0);

        if (!opt_openOtherSideboard) {
          // slide other elements
          this.options.mapController[direction + "SlideElements"].forEach(function (element) {
            $(element).css(direction, 0);
          });
        }

        // hide container to fix resizing issue
        $(this.container).css('visibility', 'hidden');

        // check if a view needs to be deactivated
        if (this.activeView) {
          this.activeView.deactivate(true);
        }

        // Remove active Sideboardentry
        this.options.mapController["active" + this.identifier] = false;

        if (this.options.caching) {
          __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].storeValue(this.options.name, '0');
        }
        return true;
      }
      return false;
    }, // end of "close"

    /**
     * Toggle this sideboard element
     *
     * @return  {boolean}  Returns |true| on success.
     */
    toggle: function toggle(opt_hide) {
      var capitalizedName;
      capitalizedName = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].capitalizeFirstLetter(this.options.name);
      if (this.options.mapController["active" + this.identifier] === this) {
        return this.close(opt_hide);
      }
      return this.open();
    }, // end of "toggle"

    /**
     * Creates a button which characteristics are defined by the options parameter
     * These options include e.g. the target container where the button will be appended and the click action of the button
     *
     * @param   {object}  opt_options  The button configuration
     *
     * @return  {[type]}           [description]
     */
    makeButton: function makeButton(opt_options) {

      var options, button;

      options = $.extend({
        label: undefined,
        tipLabel: undefined,
        className: '',
        target: undefined,
        clickAction: undefined
      }, opt_options);

      if (options.className) {
        options.className = ' ' + options.className;
      }

      button = document.createElement('button');
      button.className = 'c4g-' + this.options.name + '-button' + options.className;
      if (options.id) {
        button.id = options.id;
      }

      if (typeof options.tipLabel === 'string') {
        button.title = options.tipLabel;
      }

      if (typeof options.label === 'string') {
        button.innerHTML = options.label;
      } else if (_typeof(options.label) === 'object') {
        button.appendChild(options.label);
      }

      if (typeof options.clickAction === 'function') {
        $(button).click(function () {
          try {
            this.blur();
          } catch (e) {
            console.warn(e.message);
          }
          options.clickAction();
        });
      }

      if (options.target) {
        $(options.target).append(button);
      }

      return button;
    }, // end of "makeButton"

    /**
     * @TODO
     * [addSection description]
     *
     * @param  {[type]}  opt_options  [description]
     */
    addSection: function addSection(opt_options) {

      var options, section, element;

      options = $.extend({
        type: 'div',
        className: '',
        target: undefined
      }, opt_options);

      // try to create the new section
      try {
        section = document.createElement(options.type);
      } catch (e) {
        console.warn('Cannot create section. "' + options.type + ' is not a valid HTML-node.');
        return false;
      }

      section.className = options.className;

      // try to append the section to the given target
      if (options.target) {
        try {
          options.target.appendChild(section);
        } catch (e) {
          console.warn(e.message);
        }
      }

      section.getElement = function () {
        return element || false;
      };

      section.setElement = function (newElement) {
        if (newElement && (typeof newElement === "undefined" ? "undefined" : _typeof(newElement)) === 'object') {
          if (!(element && element === newElement)) {
            if (element) {
              this.removeChild(element);
            }
            this.appendChild(newElement);
            element = newElement;
          }
        }
      };

      // add to sections-array
      this.sections.push(section);
      return section;
    }, // end of "addSection"

    /**
     * @TODO
     * [addView description]
     *
     * @param  {[type]}  options  [description]
     */
    addView: function addView(options, opt_viewScope) {

      var self, viewScope, additionalTriggerClass, trigger, view;

      self = this;
      viewScope = opt_viewScope || this;

      options = $.extend({
        // name: undefined,
        triggerConfig: undefined, // @TODO doku format: {opt_target: [string|htmlObject], opt_className: [string], opt_tipLabel: [string]}
        sectionElements: [], // @TODO doku format: [{section: [sectionObject], element: [elementObject]}]
        initFunction: undefined,
        activateFunction: undefined,
        deactivateFunction: undefined
      }, options);

      if (typeof options.name !== 'string') {
        console.warn('Cannot add a view without a name (of type "string").');
        return false;
      }

      view = {};

      view.initialized = false;
      view.paused = false;

      view.activate = function (opt_openSideboard) {
        var i;

        if (options.triggerConfig.withHeadline) {
          self.contentHeadline.innerHTML = options.triggerConfig.tipLabel;
        }

        // open Sideboard if closed
        if (opt_openSideboard && !self.isOpen()) {
          self.open();
        }

        // Deactivate current activeView, if existent
        if (_typeof(viewScope.activeView) === 'object' && viewScope.activeView !== view) {
          viewScope.activeView.deactivate();
        }
        viewScope.activeView = view;

        // Handle sub-views
        if (view.activeView) {
          view.activeView.activate();
        }

        // Call initialize-functions, if existent
        if (!view.initialized) {
          if (typeof options.initFunction === 'function') {
            view.initialized = options.initFunction();
          } else {
            view.initialized = true;
          }
        }

        // Display elements in given sections
        if (options.sectionElements && options.sectionElements.length > 0) {
          for (i = 0; i < options.sectionElements.length; i += 1) {
            options.sectionElements[i].section.setElement(options.sectionElements[i].element);
          }
        }

        // Change trigger-state, if existent
        if (trigger) {
          $(trigger).addClass('c4g-active');
        }

        // Call activate function, if existent
        if (typeof options.activateFunction === 'function') {
          if (!options.activateFunction(view.paused)) {
            return false;
          }
        }

        view.paused = false;
        self.update();
        return true;
      };

      view.deactivate = function (opt_pause) {

        view.paused = opt_pause || false;

        if (_typeof(viewScope.activeView) === 'object' && viewScope.activeView === view) {
          if (trigger && !view.paused) {
            $(trigger).removeClass('c4g-active');
          }

          // Handle sub-views
          if (view.activeView) {
            view.activeView.deactivate(view.paused);
          }

          // Call deactivate function, if existent
          if (typeof options.deactivateFunction === 'function') {
            return options.deactivateFunction(view.paused);
          }
        }

        return true;
      };

      if (_typeof(options.triggerConfig) === 'object') {
        options.triggerConfig = $.extend({
          target: this.viewTriggerBar,
          tipLabel: options.name
        }, options.triggerConfig);

        options.triggerConfig.clickAction = view.activate;
        if (options.triggerConfig.className) {
          additionalTriggerClass = ' ' + options.triggerConfig.className;
        } else {
          additionalTriggerClass = '';
        }
        options.triggerConfig.className = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ICON + additionalTriggerClass;
        // @TODO check: trigger = this.makeButton(options.triggerConfig);
        trigger = this.makeButton(options.triggerConfig);
      }

      this.views.push(view);
      return view;
    } // end of "addView"

  }); // end of "add methods"
})(jQuery, this.c4g);

var Sideboard = this.c4g.maps.control.Sideboard;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboard.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboard.js ***!
  \***********************************************************/
/*! exports provided: Starboard */
/*! exports used: Starboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Starboard; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_starboardplugin_baselayerswitcher__ = __webpack_require__(/*! ./c4g-maps-control-starboardplugin-baselayerswitcher */ "./Resources/public/js/c4g-maps-control-starboardplugin-baselayerswitcher.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_starboardplugin_layerswitcher__ = __webpack_require__(/*! ./c4g-maps-control-starboardplugin-layerswitcher */ "./Resources/public/js/c4g-maps-control-starboardplugin-layerswitcher.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_starboardplugin_customtab__ = __webpack_require__(/*! ./c4g-maps-control-starboardplugin-customtab */ "./Resources/public/js/c4g-maps-control-starboardplugin-customtab.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};

var c4g = this.c4g;







(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {c4g.maps.control.Sideboard}
   * @param   {object}              opt_options  *optional* misc configuration options
   */

  c4g.maps.control.Starboard = function (opt_options) {

    this.options = $.extend({
      create: true,
      extDiv: false,
      defaultOpen: false,
      mapController: undefined,
      name: 'starboard',
      direction: 'right',
      filter: false
    }, opt_options);

    //c4g.maps.hook.starboard_loadPlugins = [];

    //set headline, since the definition above does not work for headline
    if (!this.options.headline || this.options.headline.length === 0) {
      //this.options.headline = c4g.maps.constant.i18n.STARBOARD;
    }

    this.hook_layerswitcher_loaded = this.hook_layerswitcher_loaded || [];

    //call Sideboard (parent) constructor
    __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Starboard, __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  // Add methods
  c4g.maps.control.Starboard.prototype = $.extend(c4g.maps.control.Starboard.prototype, {

    /**
     * Creates the basic html-elements for the starboard
     *
     * @return  {boolean}  'true' on success
     */
    init: function init() {

      var plugin,
          renderLayertree,
          key,
          layer,
          self,
          fnRender,
          displayLayerswitcher = false;

      if (this.initialized) {
        return true;
      }

      self = this;

      // Load Starboard plugins
      this.plugins = {};

      // creates and renders the starboard plugins
      fnRender = function fnRender() {
        // loop through layers and check if there is any normal layertree to render
        for (key in self.options.mapController.proxy.layerController.arrLayers) {
          if (self.options.mapController.proxy.layerController.arrLayers.hasOwnProperty(key)) {
            layer = self.options.mapController.proxy.layerController.arrLayers[key];
            if (!layer.renderSpecial) {
              renderLayertree = true;
              break;
            }
          }
        }

        if (renderLayertree) {
          // do not display layerswitcher if there is nothing to switch
          if (self.options.mapController.proxy.layerController.arrLayers) {
            for (var id in self.options.mapController.proxy.layerController.arrLayers) {
              if (self.options.mapController.proxy.layerController.arrLayers[id].display) {
                displayLayerswitcher = true;
              }
            }
          }
        }

        // - load "Layerswitcher"
        if (self.options.layerSwitcherCreate && renderLayertree && displayLayerswitcher) {
          self.plugins.layerswitcher = new __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_starboardplugin_layerswitcher__["a" /* Layerswitcher */](self);
        }

        // call hook to load additional starboard tabs (layers)
        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.hook_layerswitcher_loaded);

        // - check & load other Starboard-plugins (via hook)
        // called functions have to add themselves to this.plugins
        if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.starboard_loadPlugins) === 'object') {
          __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.starboard_loadPlugins, self);
          // - activate new plugins if they are not activated already
          for (plugin in self.plugins) {
            // Check if plugin is a real plugin and not a property of the object prototype
            if (self.plugins.hasOwnProperty(plugin)) {
              self.plugins[plugin].activate();
            }
          }
        }

        // - load "Baselayerswitcher"
        if (self.options.baselayerSwitcherCreate) {
          self.plugins.baselayerswitcher = new __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_starboardplugin_baselayerswitcher__["a" /* Baselayerswitcher */](self);
          self.plugins.baselayerswitcher.activate();
        }
        if (self.plugins.layerswitcher) {
          self.plugins.layerswitcher.activate();
        }
      }; // end of "fnRender()"


      if (!this.options.mapController.proxy.layers_loaded) {
        this.spinner.show();
        this.options.mapController.proxy.hook_layer_loaded.push(function (layerIds) {
          self.spinner.hide();
          fnRender();
        });
      } else {
        // layers are already loaded
        fnRender();
      }

      this.initialized = true;

      return true;
    } // end of "init"

  }); // End of add methods
})(jQuery, c4g);

var Starboard = this.c4g.maps.control.Starboard;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboardplugin-baselayerswitcher.js":
/*!***********************************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboardplugin-baselayerswitcher.js ***!
  \***********************************************************************************/
/*! exports provided: Baselayerswitcher */
/*! exports used: Baselayerswitcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Baselayerswitcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};
this.c4g.maps.control.starboardplugin = this.c4g.maps.control.starboardplugin || {};





(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {ol.control.Control}
   * @param   {object}              starboard
   */

  c4g.maps.control.starboardplugin.Baselayerswitcher = function (starboard) {
    if (!starboard) {
      console.warn('Cannot initialize Baselayerswitcher without a starboard.');
      return false;
    }

    this.initialized = false;
    this.baselayers = {};

    this.starboard = starboard;
    this.proxy = starboard.options.mapController.proxy;

    this.create();
    this.loadContent();
  };

  // Add methods
  c4g.maps.control.starboardplugin.Baselayerswitcher.prototype = $.extend(c4g.maps.control.starboardplugin.Baselayerswitcher.prototype, {

    /**
     * @TODO: [create description]
     *
     * @return  {[type]}  [description]
     */
    create: function create() {
      var self, contentWrapper, contentHeadline, contentInfo;

      self = this;

      contentWrapper = document.createElement('div');

      contentHeadline = document.createElement('div');
      contentHeadline.innerHTML = this.starboard.options.baselayerSwitcherTitle || __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER;
      contentHeadline.className = 'contentHeadline';
      contentWrapper.appendChild(contentHeadline);

      this.contentDiv = document.createElement('div');
      this.contentDiv.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_CONTENT_BASELAYERSWITCHER;
      contentInfo = document.createElement('p');
      this.contentDiv.appendChild(contentInfo);
      contentWrapper.appendChild(this.contentDiv);

      self.view = self.starboard.addView({
        name: 'layerswitcher',
        triggerConfig: {
          tipLabel: this.starboard.options.baselayerSwitcherTitle || __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER,
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER,
          withHeadline: false
        },
        sectionElements: [{ section: self.starboard.contentContainer, element: contentWrapper }, { section: self.starboard.topToolbar, element: self.starboard.viewTriggerBar }]
      });
    },

    /**
     * @TODO: [activate description]
     *
     * @return  {[type]}  [description]
     */
    activate: function activate() {
      this.view.activate();
    },

    /**
     * @TODO: [setContent description]
     *
     * @param  {[type]}  newContent  [description]
     */
    setContent: function setContent(newContent) {
      if (newContent) {
        if (typeof newContent === "string") {
          this.contentDiv.innerHTML = newContent;
        } else {
          try {
            if (this.contentDiv.firstChild) {
              this.contentDiv.replaceChild(newContent, this.contentDiv.firstChild);
            } else {
              this.contentDiv.appendChild(newContent);
            }
          } catch (e) {
            // @TODO
            console.warn(e.message);
            // return false;
          }
        }
      }
      return this.contentDiv.innerHTML;
    },

    loadContent: function loadContent() {
      var self, fnDrawContent;

      self = this;
      this.starboard.spinner.show();

      fnDrawContent = function fnDrawContent(baselayerIds) {
        self.baseLayerControl = document.createElement('div');
        $(self.baseLayerControl).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_BASELAYERTREE);
        self.setContent(self.baseLayerControl);

        self.addItems(baselayerIds, self.baseLayerControl);

        self.initialized = true;
        self.starboard.spinner.hide();
        self.starboard.update();
      }; // end of "fnDrawContent()"

      if (this.proxy.baselayers_loaded) {
        fnDrawContent(this.proxy.baselayerController.baselayerIds);
      } else {
        this.proxy.hook_baselayer_loaded.push(fnDrawContent);
      }
    }, // end of "loadContent()"

    /**
     * @TODO: [drawContent description]
     *
     * @param   {[type]}  contentData  [description]
     */
    drawContent: function drawContent(contentData) {
      // PASS
    }, // end of "drawContent()"

    /**
     * @TODO: [addItems description]
     *
     * @param  {[type]}  itemData        [description]
     * @param  {[type]}  wrapperElement  [description]
     * @param  {[type]}  options         [description]
     */
    addItems: function addItems(itemData, wrapperElement, options) {
      var i, j, self, wrapper, item, uid, listItem, childList, childItem, childEntry, toggle, entry, $entry, filter, handleEntryClick, handleChangeBaselayerVisibility;

      self = this;

      if ((typeof options === "undefined" ? "undefined" : _typeof(options)) !== "object") {
        options = {
          parseAsList: true
        };
      }

      handleEntryClick = function handleEntryClick(event) {
        event.preventDefault();

        var itemUid, siblings, baselayerItem;
        siblings = $(this).parent().siblings();
        for (var i = 0; i < siblings.length; i++) {
          if (siblings[i] && $(siblings[i]).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN)) {
            if (self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId] && self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].hasOverlays) {
              for (var _j in self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].overlayController.arrOverlays) {
                if (self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].overlayController.arrOverlays.hasOwnProperty(_j)) self.proxy.options.mapController.map.removeLayer(self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].overlayController.arrOverlays[_j].layer);
              }
            }
            $(siblings[i]).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
          }
        }
        itemUid = $(this).data('uid');

        if (self.starboard.options.caching) {
          __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].storeValue('baselayer', itemUid);
        }

        if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
          $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        } else {
          $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
        }

        if (self.proxy.options.mapController.rightSlideElements) {
          self.proxy.options.mapController.rightSlideElements.forEach(function (element) {
            $(element).css('right', self.starboard.container.offsetWidth);
          });
        }
        $(self.starboard.element).css('right', self.starboard.container.offsetWidth);

        if (self.proxy.activeBaselayerId !== itemUid) {
          self.proxy.baselayerController.showBaseLayer(itemUid);
          if (self.proxy.baselayerController.arrBaselayers[itemUid].hasOverlays) {
            for (var _j2 in self.proxy.baselayerController.arrBaselayers[itemUid].overlayController.arrOverlays) {
              if (self.proxy.baselayerController.arrBaselayers[itemUid].overlayController.arrOverlays.hasOwnProperty(_j2)) {
                self.proxy.options.mapController.map.addLayer(self.proxy.baselayerController.arrBaselayers[itemUid].overlayController.arrOverlays[_j2].layer);
              }
            }
          }
          $(this).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);

          // if(this.nextSibling){
          //     var children = this.nextSibling.childNodes;
          //     for(i = 0; i < children.length; i++){
          //         $(children[i].firstChild).addClass(cssConstants.ACTIVE).removeClass(cssConstants.INACTIVE);
          //     }
          // }
          c4g.maps.hook.baselayer_changed = c4g.maps.hook.baselayer_changed || [];
          __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.baselayer_changed, itemUid);
        }
      }; // end of "handleEntryClick()"

      handleChangeBaselayerVisibility = function handleChangeBaselayerVisibility(baselayerConfig) {
        var id;

        for (id in self.baselayers) {
          if (self.baselayers.hasOwnProperty(id)) {
            if (id === baselayerConfig.id) {
              self.baselayers[id].$entry.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            } else {
              self.baselayers[id].$entry.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
          }
        }
      };

      wrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');

      if (itemData.length > 0) {

        for (i = 0; i < itemData.length; i += 1) {

          uid = itemData[i];
          this.baselayers[uid] = {};

          listItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
          this.baselayers[uid].entryWrapper = listItem;
          entry = document.createElement('a');
          entry.setAttribute('href', '#');
          entry.appendChild(document.createTextNode(self.proxy.baselayerController.arrBaselayers[uid].name));
          $(entry).data('id', uid);
          if (self.proxy.baselayerController.arrBaselayers[uid].hasOverlays) {

            childList = document.createElement('ul');options.parseAsList ? document.createElement('ul') : document.createElement('div');
            for (j = 0; j < self.proxy.baselayerController.arrBaselayers[uid].overlays.length; j++) {
              childItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
              childEntry = document.createElement('a');
              if (self.proxy.activeBaselayerId == uid) {
                $(childEntry).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                var overlayId = self.proxy.baselayerController.arrBaselayers[uid].overlays[j].id;
                self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays[overlayId].changeOpacity(self.proxy.baselayerController.arrBaselayers[uid].overlays[j].opacity);
              } else {
                $(childEntry).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
              }

              childEntry.appendChild(document.createTextNode(self.proxy.baselayerController.arrBaselayers[uid].overlays[j].name));
              $(childEntry).data('id', self.proxy.baselayerController.arrBaselayers[uid].overlays[j].id);
              $(childEntry).data('pid', uid);
              toggle = document.createElement('input');
              toggle.className = 'c4g-overlay-toggle';
              toggle.setAttribute('type', 'range');
              toggle.setAttribute('min', 0);
              toggle.setAttribute('max', 100);
              toggle.setAttribute('value', self.proxy.baselayerController.arrBaselayers[uid].overlays[j].opacity);
              toggle.setAttribute('steps', 10);
              $(toggle).on('input', function (event) {
                self.proxy.baselayerController.arrBaselayers[$(this).parent().data('pid')].overlayController.arrOverlays[$(this).parent().data('id')].changeOpacity(this.value);
              });

              childEntry.appendChild(toggle);
              childItem.appendChild(childEntry);
              childList.appendChild(childItem);
            }
          }
          listItem.appendChild(entry);
          if (childList) {
            listItem.appendChild(childList);
            childList = undefined;
          }

          $entry = $(entry);
          this.baselayers[uid].$entry = $entry;

          if (this.starboard.options.mapController.data.default_baselayer && parseInt(uid, 10) === parseInt(self.starboard.options.mapController.data.default_baselayer, 10)) {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
            if (self.proxy.baselayerController.arrBaselayers[uid].hasOverlays) {
              for (var _j3 in self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays) {
                if (self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays.hasOwnProperty(_j3)) {
                  self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays[_j3].changeOpacity(self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays[_j3].opacity);
                }
              }
            }
          } else {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
          }

          $entry.data('uid', uid);
          $entry.click(handleEntryClick);

          wrapper.appendChild(listItem);
        }
        // Starboard Filter
        if (this.starboard.options.filter) {
          var dv = document.createElement('div');
          dv.className = "c4g-starboard-filter c4g-content-select";
          var filter = document.createElement('input');
          filter.type = 'text';
          filter.placeholder = ""; //Font Awesome
          var i = document.createElement('i');
          i.className = 'fas fa-filter';
          i.setAttribute("aria-hidden", "true");
          dv.appendChild(filter);
          dv.appendChild(i);
          filter.onkeyup = function () {
            function filter_ulli(element, showSubtree) {

              // do not apply filter for short search terms

              showSubtree = showSubtree || false; // used while traversing down the tree

              /**
               * Returns an array (modified: first element) of the given elements. Only finds children of the given parent element, but
               * no further descendants like getElementsByTagName does.
               */
              function getChildrenByTagName(element, tagName) {
                var found = [];
                for (var i = 0; i < element.children.length; i++) {
                  if (element.children[i].tagName.toUpperCase() == tagName.toUpperCase()) {
                    found.push(element.children[i]);
                  }
                }
                if (found.length > 0) {
                  return found[0]; // !!!
                } else {
                  return false;
                }
              }

              var matchFlagUl = false;
              var subtreeMatches = false;
              // for each LI do
              if (element.children) {
                for (var i = 0; i < element.children.length; i++) {
                  element.children[i].style.display = "block";

                  var isMatch = false;

                  // search current LI for filter term
                  if (element.children[i].getElementsByTagName('a')[0].innerHTML.toUpperCase().indexOf(filter.value.toUpperCase()) >= 0) {
                    // it's a match
                    isMatch = true;
                  }

                  // recurse if a subtree (UL) exists in current LI (max 1 expected)
                  var ul = getChildrenByTagName(element.children[i], "ul");

                  if (ul) {
                    // recursion
                    var hasSubtree = true;
                    subtreeMatches = filter_ulli(ul, showSubtree || isMatch);
                  } else {
                    var hasSubtree = false;
                  }

                  if (isMatch || subtreeMatches || showSubtree) {
                    matchFlagUl = true; // used while traversing up the tree again
                    // set current LI visible and open
                    element.children[i].style.display = "";

                    if (filter.value.length > 2) {
                      element.children[i].classList.remove("c4g-close");
                      element.children[i].classList.add("c4g-open");
                    }

                    element.children[i].classList.remove("c4g-starboard-filter-match"); // always remove
                    if (isMatch && filter.value.length > 0) {
                      element.children[i].classList.add("c4g-starboard-filter-match");
                    }
                    ;
                  } else {
                    // set current LI invisible
                    element.children[i].style.display = "none";
                    element.children[i].classList.remove("c4g-open");
                    element.children[i].classList.add("c4g-close");
                    element.children[i].classList.remove("c4g-starboard-filter-match");
                  }
                }

                if (matchFlagUl) {
                  return true;
                } else {
                  return false;
                }
              }
            }

            // do not react immediately but allow for some keystrokes
            setTimeout(function () {
              // two or zero letters are required
              if (filter.value.length != 1) filter_ulli(document.querySelector('.c4g-baselayertree > ul:nth-child(2)'));
            }, 350);
          };

          wrapperElement.appendChild(dv);
        }

        this.proxy.hook_baselayer_visibility.push(handleChangeBaselayerVisibility);
      }
      wrapperElement.appendChild(wrapper);
    } // end of "addItems()"

  }); // end of "add methods"
})(jQuery, this.c4g);

var Baselayerswitcher = this.c4g.maps.control.starboardplugin.Baselayerswitcher;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboardplugin-customtab.js":
/*!***************************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboardplugin-customtab.js ***!
  \***************************************************************************/
/*! exports provided: Customtab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Customtab */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};
this.c4g.maps.control.starboardplugin = this.c4g.maps.control.starboardplugin || {};




(function ($, c4g) {
  'use strict';

  /**
   *
   * @param starboard
   * @param plugin
   * @param projectConf
   * @returns {boolean}
   * @constructor
   */

  c4g.maps.control.starboardplugin.Customtab = function (starboard, projectConf) {
    if (!starboard) {
      console.warn('Cannot initialize Project-tab without a starboard.');
      return false;
    }
    projectConf = $.extend({
      tabId: null,
      name: "Customtab",
      awesomeicon: ''
    }, projectConf);

    if (!projectConf.tabId) {
      console.warn('Cannot initialize Project-tab without an id.');
      return false;
    }

    this.initialized = false;
    //this.plugin = plugin || false;
    this.contentLoaded = false;
    this.starboard = starboard;
    this.proxy = starboard.options.mapController.proxy;
    this.map = this.proxy.options.mapController.map;
    this.layers = {};
    this.tabId = projectConf.tabId;
    this.name = projectConf.name;
    this.awesomeicon = projectConf.awesomeicon.replace('&#92;', "\\");
    starboard.plugins["customTab" + this.tabId] = this;
    this.create();
  };

  // Add methods
  c4g.maps.control.starboardplugin.Customtab.prototype = $.extend(c4g.maps.control.starboardplugin.Customtab.prototype, {

    /**
     * @TODO: [create description]
     *
     * @return  {[type]}  [description]
     */
    create: function create() {
      var self, contentWrapper, contentHeadline, contentHeadlineLink, selector, layerSwitcherTitle;

      self = this;
      contentWrapper = document.createElement('div');
      contentHeadline = document.createElement('div');
      contentHeadline.className = 'contentHeadline';

      layerSwitcherTitle = this.starboard.options.layerSwitcherTitle;

      if (self.name) {
        layerSwitcherTitle = self.name;
      }

      if (!this.starboard.options.button) {
        contentHeadline.innerHTML = layerSwitcherTitle || __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
      } else {
        $(contentHeadline).addClass("c4g-starboard-headline");
        contentHeadlineLink = document.createElement('a');
        contentHeadlineLink.onclick = function () {
          if ($(this).hasClass("c4g-active") !== false) {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.hideLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-active");
            $(this).addClass("c4g-inactive");
          } else {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.showLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-inactive");
            $(this).addClass("c4g-active");
          }
        };
        $(contentHeadlineLink).addClass("c4g-inactive c4g-starboard-headline-link");
        contentHeadlineLink.innerHTML = layerSwitcherTitle || __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
        contentHeadlineLink.innerHTML = contentHeadlineLink.innerHTML + ' ';
        contentHeadline.appendChild(contentHeadlineLink);
      }

      contentWrapper.appendChild(contentHeadline);

      this.contentDiv = document.createElement('div');
      this.contentDiv.className = 'c4g_starboardplugin_content';
      contentWrapper.appendChild(this.contentDiv);

      self.view = self.starboard.addView({
        name: self.name,
        triggerConfig: {
          tipLabel: self.name,
          className: 'c4g-starboard-view-trigger-starboardplugin-' + self.tabId,
          withHeadline: false
        },
        sectionElements: [{ section: self.starboard.contentContainer, element: contentWrapper }, { section: self.starboard.topToolbar, element: self.starboard.viewTriggerBar }]
      });
      if (this.awesomeicon.substring(0, 1) === "\\") {
        this.awesomeicon = this.awesomeicon.substring(1, this.awesomeicon.length);
      }
      selector = 'button.c4g-starboard-view-trigger-starboardplugin-' + self.tabId;
      //ToDo möglicherweise standard icon ?
      if (this.awesomeicon.length > 0) {
        var styleEl = document.createElement('style'),
            styleSheet;

        // Append style element to head
        document.head.appendChild(styleEl);

        // Grab style sheet
        styleSheet = styleEl.sheet;
        // catch firefox, because FF does not know "addRule"
        if (styleSheet.addRule && typeof document.styleSheets[0].addRule === 'function') {
          styleSheet.addRule(selector + ':before', 'content: "\\' + this.awesomeicon + '";');
        } else {
          styleSheet.insertRule(selector + ':before { content: "\\' + this.awesomeicon + '";}', 0);
        }
      }
      this.activate();
    },

    /**
     * @TODO: [activate description]
     *
     * @return  {[type]}  [description]
     */
    activate: function activate() {
      this.view.activate();
      if (!this.contentLoaded) {
        this.loadContent();
      }
    },

    /**
     * @TODO: [setContent description]
     *
     * @param  {Node}  newContent  [description]
     */
    setContent: function setContent(newContent) {
      if (newContent) {
        if (typeof newContent === "string") {
          this.contentDiv.innerHTML = newContent;
        } else {
          try {
            if (this.contentDiv.firstChild) {
              this.contentDiv.replaceChild(newContent, this.contentDiv.firstChild);
            } else {
              this.contentDiv.appendChild(newContent);
            }
          } catch (e) {
            // @TODO
            console.warn(e.message);
            // return false;
          }
        }
      }
      return this.contentDiv.innerHTML;
    },

    /**
     * @TODO: [loadContent description]
     *
     * @return  {[type]}  [description]
     */
    loadContent: function loadContent() {
      var self, fnDrawContent;

      self = this;
      this.starboard.spinner.show();

      fnDrawContent = function fnDrawContent(layerIds) {
        self.treeControl = document.createElement('div');
        $(self.treeControl).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_LAYERTREE);
        self.setContent(self.treeControl);
        self.addItems(layerIds, self.treeControl, { parseAsList: true });
        self.initialized = true;
        self.contentLoaded = true;
        self.starboard.spinner.hide();
        self.starboard.update();
      }; // end of "fnDrawContent()"

      fnDrawContent(this.proxy.layerIds);
    }, // end of "loadContent()"

    /**
     * @TODO: [addItems description]
     *
     * @param  {[type]}  itemData        [description]
     * @param  {[type]}  wrapperElement  [description]
     * @param  {[type]}  options         [description]
     */
    addItems: function addItems(itemData, wrapperElement, options) {
      var i, wrapper, item, layer, uid, listItem, entry, $entry, handleEntryClick, self, pWrapper, toggle, childWrapper;

      options = options || {};
      options = $.extend({
        parseAsList: true
      }, options);

      self = this;

      handleEntryClick = function handleEntryClick(event) {
        var itemUid;

        event.preventDefault();
        // "this" is the event sending entry
        itemUid = $(this).data('uid');
        if (self.proxy.activeLayerIds[itemUid]) {
          // hide layer
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          $(this).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
          self.hideLayer(itemUid);
        } else {
          // show layer
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
          $(this).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          self.showLayer(itemUid);
        }
      };

      // register hook to switch childs of layers as well
      this.proxy.hook_layer_visibility.push(function (layerId) {
        var j, changedLayer;

        changedLayer = self.layers[layerId];
        if (changedLayer && changedLayer.$entries) {
          for (j = 0; j < changedLayer.$entries.length; j += 1) {
            if (self.proxy.activeLayerIds[layerId]) {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            } else {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
          }
        }
      }); // end of hook

      // add hook function for changed zoom
      //   needed to change the entry-classes
      this.proxy.hook_map_zoom.push(function () {
        var j, id, layer;

        for (id in self.layers) {
          if (self.layers.hasOwnProperty(id)) {
            layer = self.layers[id];
            if (layer && layer.$entries) {
              for (j = 0; j < layer.$entries.length; j += 1) {
                if (self.proxy.checkLayerIsActiveForZoom(id)) {
                  layer.$entries[j].removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                } else {
                  layer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                }
              }
            }
          }
        }
      }); // end of hook

      // build the layer tree
      wrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
      if (itemData && itemData.length > 0) {
        for (i = 0; i < itemData.length; i += 1) {
          uid = itemData[i];
          //layer = this.plugin.customTabs[this.tabId].drawnFeatures[uid];
          layer = this.proxy.layerController.arrLayers[uid];
          // skip layer if it doesn't belong to this tab
          if (!(layer.renderSpecial == true && layer.tabId == this.tabId)) {
            continue;
          }
          // do not render the startab layer itself as parent level
          if (layer.type === "startab") {
            continue;
          }
          // check if layer wants to be displayed in starboard tab
          if (layer.hideWhenInTab === true) {
            continue;
          }
          if (layer.hide === "1") {
            if (this.proxy.activeLayerIds[layer.id]) {
              // this.hideLayer(layer.id);
            }
          }
          // check if the layer should be displayed
          if (!layer.display) {
            continue;
          }
          item = {};
          this.layers[uid] = item;
          listItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
          item.entryWrappers = item.entryWrappers || [];
          item.entryWrappers.push(listItem);
          entry = document.createElement('a');
          entry.setAttribute('href', '#');
          entry.appendChild(document.createTextNode(layer.layername || layer.name));
          listItem.appendChild(entry);
          $entry = $(entry);
          item.$entries = item.$entries || [];
          item.$entries.push($entry);
          $entry.data('uid', uid);
          $entry.click(handleEntryClick);

          // prepare insertion of childs
          if (layer.visibleChilds) {
            toggle = document.createElement('span');
            $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
            $(toggle).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON);
            $(toggle).click(function () {
              if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
                $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
              } else {
                $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
              }
              if (self.proxy.options.mapController.rightSlideElements) {
                self.proxy.options.mapController.rightSlideElements.forEach(function (element) {
                  $(element).css('right', self.starboard.container.offsetWidth);
                });
              }
              $(self.starboard.element).css('right', self.starboard.container.offsetWidth);
            });
            $(toggle).insertBefore($entry);
            childWrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
            item.childWrappers = item.childWrappers || [];
            item.childWrappers.push(childWrapper);
            listItem.appendChild(childWrapper);
          }

          if (this.proxy.activeLayerIds[uid]) {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          } else {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
          }
          if (this.layers[layer.pid]) {
            // is child-element
            pWrapper = this.layers[layer.pid].childWrappers;
            if (pWrapper) {
              pWrapper[pWrapper.length - 1].appendChild(listItem);
            }
          } else {
            wrapper.appendChild(listItem);
          }
        } // end of for-loop
        // Starboard Filter
        if (this.starboard.options.filter) {
          var dv = document.createElement('div');
          dv.className = "c4g-starboard-filter c4g-content-select";
          var filter = document.createElement('input');
          filter.type = 'text';
          filter.placeholder = ""; //Font Awesome
          var i = document.createElement('i');
          i.className = 'fas fa-filter';
          i.setAttribute("aria-hidden", "true");
          dv.appendChild(filter);
          dv.appendChild(i);
          filter.onkeyup = function () {
            function filter_ulli(element, showSubtree) {

              // do not apply filter for short search terms

              showSubtree = showSubtree || false; // used while traversing down the tree

              /**
               * Returns an array (modified: first element) of the given elements. Only finds children of the given parent element, but
               * no further descendants like getElementsByTagName does.
               */
              function getChildrenByTagName(element, tagName) {
                var found = [];
                for (var i = 0; i < element.children.length; i++) {
                  if (element.children[i].tagName.toUpperCase() == tagName.toUpperCase()) {
                    found.push(element.children[i]);
                  }
                }
                if (found.length > 0) {
                  return found[0]; // !!!
                } else {
                  return false;
                }
              }

              var matchFlagUl = false;
              var subtreeMatches = false;
              // for each LI do
              for (var i = 0; i < element.children.length; i++) {
                element.children[i].style.display = "block";

                var isMatch = false;

                // search current LI for filter term
                if (element.children[i].getElementsByTagName('a')[0].innerHTML.toUpperCase().indexOf(filter.value.toUpperCase()) >= 0) {
                  // it's a match
                  isMatch = true;
                }

                // recurse if a subtree (UL) exists in current LI (max 1 expected)
                var ul = getChildrenByTagName(element.children[i], "ul");

                if (ul) {
                  // recursion
                  var hasSubtree = true;
                  subtreeMatches = filter_ulli(ul, showSubtree || isMatch);
                } else {
                  var hasSubtree = false;
                }

                if (isMatch || subtreeMatches || showSubtree) {
                  matchFlagUl = true; // used while traversing up the tree again
                  // set current LI visible and open
                  element.children[i].style.display = "";

                  if (filter.value.length > 2) {
                    element.children[i].classList.remove("c4g-close");
                    element.children[i].classList.add("c4g-open");
                  }

                  element.children[i].classList.remove("c4g-starboard-filter-match"); // always remove
                  if (isMatch && filter.value.length > 0) {
                    element.children[i].classList.add("c4g-starboard-filter-match");
                  }
                } else {
                  // set current LI invisible
                  element.children[i].style.display = "none";
                  element.children[i].classList.remove("c4g-open");
                  element.children[i].classList.add("c4g-close");
                  element.children[i].classList.remove("c4g-starboard-filter-match");
                }
              }

              if (matchFlagUl) {
                return true;
              } else {
                return false;
              }
            }

            // do not react immediately but allow for some keystrokes
            setTimeout(function () {
              // two or zero letters are required
              if (filter.value.length != 1) filter_ulli(document.querySelector('.c4g-layertree > ul:nth-child(2)'));
            }, 350);
          };

          wrapperElement.appendChild(dv);
        }
        wrapperElement.appendChild(wrapper);
      }
    }, // end of "addItems()"

    showLayer: function showLayer(itemUid) {
      if (this.proxy.activeLayerIds[itemUid]) {
        return true;
      } else {
        this.proxy.layerController.showLayer(itemUid);
      }
    }, // end of "showLayer()"

    hideLayer: function hideLayer(itemUid) {
      if (!this.proxy.activeLayerIds[itemUid]) {
        return true;
      } else {
        this.proxy.layerController.hideLayer(itemUid);
      }
    } // end of "hideLayer()"


  }); // end of "add methods"
})(jQuery, this.c4g);

var Customtab = this.c4g.maps.control.starboardplugin.Customtab;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboardplugin-layerswitcher.js":
/*!*******************************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboardplugin-layerswitcher.js ***!
  \*******************************************************************************/
/*! exports provided: Layerswitcher */
/*! exports used: Layerswitcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Layerswitcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};
this.c4g.maps.control.starboardplugin = this.c4g.maps.control.starboardplugin || {};





(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {ol.control.Control}
   * @param   {object}              starboard
   */

  c4g.maps.control.starboardplugin.Layerswitcher = function (starboard) {
    if (!starboard) {
      console.warn('Cannot initialize Layerswitcher without a starboard.');
      return false;
    }

    this.initialized = false;
    this.layers = {};

    this.starboard = starboard;
    this.proxy = starboard.options.mapController.proxy;
    this.create();
    this.loadContent();
  };

  // Add methods
  c4g.maps.control.starboardplugin.Layerswitcher.prototype = $.extend(c4g.maps.control.starboardplugin.Layerswitcher.prototype, {

    create: function create() {
      var self, contentWrapper, contentHeadline, contentHeadlineLink, contentInfo, layerSwitcherTitle;

      layerSwitcherTitle = this.starboard.options.layerSwitcherTitle;

      self = this;

      contentWrapper = document.createElement('div');
      contentHeadline = document.createElement('div');
      contentHeadline.className = 'contentHeadline';

      if (!this.starboard.options.button) {
        contentHeadline.innerHTML = layerSwitcherTitle || __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
      } else {
        $(contentHeadline).addClass("c4g-starboard-headline");
        contentHeadlineLink = document.createElement('a');
        contentHeadlineLink.onclick = function () {
          if ($(this).hasClass("c4g-active") !== false) {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.hideLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-active");
            $(this).addClass("c4g-inactive");
          } else {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.showLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-inactive");
            $(this).addClass("c4g-active");
          }
        };
        $(contentHeadlineLink).addClass("c4g-inactive c4g-starboard-headline-link");
        contentHeadlineLink.innerHTML = layerSwitcherTitle || __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
        contentHeadlineLink.innerHTML = contentHeadlineLink.innerHTML + ' ';
        contentHeadline.appendChild(contentHeadlineLink);
      }

      contentWrapper.appendChild(contentHeadline);

      this.contentDiv = document.createElement('div');
      this.contentDiv.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_CONTENT_LAYERSWITCHER;
      contentInfo = document.createElement('p');
      this.contentDiv.appendChild(contentInfo);
      contentWrapper.appendChild(this.contentDiv);

      self.view = self.starboard.addView({
        name: 'layerswitcher',
        triggerConfig: {
          tipLabel: layerSwitcherTitle || __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstants */].STARBOARD_VIEW_TRIGGER_LAYERSWITCHER,
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_VIEW_TRIGGER_LAYERSWITCHER,
          withHeadline: false
        },
        sectionElements: [{ section: self.starboard.contentContainer, element: contentWrapper }, { section: self.starboard.topToolbar, element: self.starboard.viewTriggerBar }]
      });
    },

    /**
     * @TODO: [activate description]
     *
     * @return  {[type]}  [description]
     */
    activate: function activate() {
      this.view.activate();
    }, // end of "activate()"

    /**
     * @TODO: [setContent description]
     *
     * @param  {[type]}  newContent  [description]
     */
    setContent: function setContent(newContent) {
      if (newContent) {
        if (typeof newContent === "string") {
          this.contentDiv.innerHTML = newContent;
        } else {
          try {
            if (this.contentDiv.firstChild) {
              this.contentDiv.replaceChild(newContent, this.contentDiv.firstChild);
            } else {
              this.contentDiv.appendChild(newContent);
            }
          } catch (e) {
            // @TODO
            console.warn(e.message);
            // return false;
          }
        }
      }
      return this.contentDiv.innerHTML;
    }, // end of "setContent()"

    /**
     * @TODO: [loadContent description]
     *
     * @return  {[type]}  [description]
     */
    loadContent: function loadContent() {
      var self, fnDrawContent;

      self = this;
      this.starboard.spinner.show();

      fnDrawContent = function fnDrawContent(layerIds) {
        self.treeControl = document.createElement('div');
        $(self.treeControl).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_LAYERTREE);
        self.setContent(self.treeControl);

        self.addItems(layerIds, self.treeControl);

        self.initialized = true;
        self.starboard.spinner.hide();
        self.starboard.update();
      }; // end of "fnDrawContent()"

      if (this.proxy.layers_loaded) {
        fnDrawContent(this.proxy.layerIds);
      } else {
        this.proxy.hook_layer_loaded.push(fnDrawContent);
      }
    }, // end of "loadContent()"

    /**
     * @TODO: [drawContent description]
     */
    drawContent: function drawContent(contentData) {
      // PASS
    }, // end of "drawContent()"

    /**
     * @TODO: [addItems description]
     *
     * @param  {[type]}  itemData        [description]
     * @param  {[type]}  wrapperElement  [description]
     * @param  {[type]}  options         [description]
     */
    addItems: function addItems(itemData, wrapperElement, options) {
      var i, self, filter, wrapper, childWrapper, pWrapper, item, layer, uid, listItem, entry, $entry, toggle, fnHandleEntryClick, fnChildEntryClick, fnChildEntryShow, zoomToExtent, layerClass;

      self = this;

      options = options || {};
      options = $.extend({
        parseAsList: true
      }, options);

      wrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');

      // create handler for entry-clicks
      fnHandleEntryClick = function fnHandleEntryClick(event) {
        var itemUid, layerItem;

        event.preventDefault();

        itemUid = $(this).data('uid');
        layerItem = self.proxy.layerController.arrLayers[itemUid];

        if (self.proxy.activeLayerIds[itemUid]) {
          // hide layer
          self.proxy.layerController.hideLayer(itemUid);
          if (parseInt(layer.pid, 10) == 0) {
            // hide all childs, because clicked layer is the map itself
            for (var id in self.proxy.activeLayerIds) {
              if (self.proxy.activeLayerIds.hasOwnProperty(id)) {
                self.proxy.layerController.hideLayer(id);
              }
            }
          }
        } else {
          // show layer
          self.proxy.layerController.showLayer(itemUid);
          //zooom to extent
          zoomToExtent(itemUid);
        }
        if (self.handleSelectedChilds(this)) {
          self.updateParentLayers(this, itemUid, layerItem);
        }

        // c4g.maps.layers[itemUid] = layerItem;
      }; // end of "fnHandleEntryClick()"
      fnChildEntryClick = function fnChildEntryClick(event) {
        event.preventDefault();
        var itemUid = $(this).data('uid');
        var parent = $(this).parent().parent().parent();
        var childs = $(parent).children();
        var parentUid = $(childs[1]).data('uid');
        if ($(this).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE)) {
          self.proxy.layerController.hideChildLayer(parentUid, itemUid);
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
        } else if ($(this).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE)) {
          self.proxy.layerController.showChildLayer(parentUid, itemUid);
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
        }
      };
      fnChildEntryShow = function fnChildEntryShow(event) {
        event.preventDefault();
        var parent = this.parentElement;
        var uid = $(parent.firstChild).data('uid');
        parent = $(this).parent().parent().parent();
        var childs = $(parent).children();
        var parentUid = $(childs[1]).data('uid');
        uid = uid.replace(parentUid, '');
        var layer = self.proxy.layerController.arrLayers[parentUid].vectorLayer;
        if (layer) {
          var singleLayer = layer.getLayers().getArray()[uid];
          var feature = singleLayer.getSource().getFeatures()[0];
          self.proxy.options.mapController.map.getView().fit(feature.getGeometry());
        }
      };

      zoomToExtent = function zoomToExtent(itemUid) {
        //function to zoom to the extent of a map structure and its children
        var layerItem,
            vectorArray,
            layerGroup,
            coords,
            geometry,
            featureList,
            featureArray,
            coordinates = [],
            extent,
            center,
            key;
        layerItem = self.proxy.layerController.arrLayers[itemUid];
        if (layerItem && layerItem.zoom_locations === "1") {
          if (layerItem.hasChilds) {
            for (key in layerItem.childs) {
              if (layerItem.childs.hasOwnProperty(key)) {
                layer = layerItem.childs[key];
                if (layer.type == "overpass") {
                  continue;
                }
                vectorArray = layer.content;
                if (vectorArray === undefined) {
                  // catch case of linked layers
                  continue;
                }
                if ((typeof vectorArray === "undefined" ? "undefined" : _typeof(vectorArray)) === "object") {
                  vectorArray = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].objectToArray(vectorArray);
                }
                layerGroup = layer.vectorLayer;
                if (vectorArray && vectorArray.forEach && typeof vectorArray.forEach === 'function') {
                  vectorArray.forEach(function (vectorLayer) {
                    if (vectorLayer && vectorLayer.data && vectorLayer.data.geometry && vectorLayer.data.geometry.coordinates) {
                      if (vectorLayer.data.geometry.type === "Point") {
                        coords = ol.proj.transform([parseFloat(vectorLayer.data.geometry.coordinates[0]), parseFloat(vectorLayer.data.geometry.coordinates[1])], 'EPSG:4326', 'EPSG:3857');
                        geometry = new ol.geom.Point(coords);
                        coordinates.push(geometry.getCoordinates());
                      }
                    }
                  });
                }
                if (layerGroup) {
                  // handle more complex geometries
                  featureList = layerGroup.getLayers();
                  featureArray = featureList.getArray();
                  featureArray.forEach(function (feature) {
                    if (layer.type === "kml") {
                      var source = feature.getSource();
                      //var sourceFeatures = source.getFeatures();
                      source.getExtent().forEach(function (coordinate) {
                        coordinates.push(coordinate);
                      });
                    } else {
                      if (ol.extent.getTopRight(feature.getSource().getExtent())['0'] != "Infinity" && ol.extent.getTopRight(feature.getSource().getExtent())['0'] != "-Infinity") {

                        coordinates.push(ol.extent.getTopRight(feature.getSource().getExtent()));
                        coordinates.push(ol.extent.getTopLeft(feature.getSource().getExtent()));
                        coordinates.push(ol.extent.getBottomRight(feature.getSource().getExtent()));
                        coordinates.push(ol.extent.getBottomLeft(feature.getSource().getExtent()));
                      }
                    }
                  });
                }
              }
            }
          }

          if (layerItem.type !== "overpass" && layerItem.vectorLayer) {
            vectorArray = layer.content;
            if (vectorArray !== undefined) {
              // catch case of linked layers
              if ((typeof vectorArray === "undefined" ? "undefined" : _typeof(vectorArray)) === "object") {
                vectorArray = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].objectToArray(vectorArray);
              }
              layerGroup = layer.vectorLayer;
              if (vectorArray && vectorArray.forEach && typeof vectorArray.forEach === 'function') {
                vectorArray.forEach(function (vectorLayer) {
                  if (vectorLayer && vectorLayer.data && vectorLayer.data.geometry && vectorLayer.data.geometry.coordinates) {
                    if (vectorLayer.data.geometry.type === "Point") {
                      coords = ol.proj.transform([parseFloat(vectorLayer.data.geometry.coordinates[0]), parseFloat(vectorLayer.data.geometry.coordinates[1])], 'EPSG:4326', 'EPSG:3857');
                      geometry = new ol.geom.Point(coords);
                      coordinates.push(geometry.getCoordinates());
                    }
                  }
                });
              }
              if (layerGroup) {
                // handle more complex geometries
                featureList = layerGroup.getLayers();
                featureArray = featureList.getArray();
                featureArray.forEach(function (feature) {
                  if (layer.type !== "overpass") {
                    if (layer.type === "kml") {
                      var source = feature.getSource();
                      //var sourceFeatures = source.getFeatures();
                      source.getExtent().forEach(function (coordinate) {
                        coordinates.push(coordinate);
                      });
                    } else {
                      coordinates.push(ol.extent.getTopRight(feature.getSource().getExtent()));
                      coordinates.push(ol.extent.getTopLeft(feature.getSource().getExtent()));
                      coordinates.push(ol.extent.getBottomRight(feature.getSource().getExtent()));
                      coordinates.push(ol.extent.getBottomLeft(feature.getSource().getExtent()));
                    }
                  }
                });
              }
            }
          }

          extent = ol.extent.boundingExtent(coordinates);
          if (extent[0] === Infinity || extent[0] === -Infinity) {
            return;
          }
          self.proxy.options.mapController.map.getView().fit(extent, self.proxy.options.mapController.map.getSize());
          center = self.proxy.options.mapController.map.getView().getCenter();
          if (isNaN(center[0])) {
            self.proxy.options.mapController.map.getView().setCenter([50, 10]);
            self.proxy.options.mapController.map.getView().setZoom(mapData.minZoom || 10);
          }
        }
      }; //end of zoom to extent
      // add hook function for changed layer-visibility
      //   needed to change the entry-classes
      this.proxy.hook_layer_visibility.push(function (layerId) {
        var j, changedLayer;

        changedLayer = self.layers[layerId];
        if (changedLayer && changedLayer.$entries) {
          for (j = 0; j < changedLayer.$entries.length; j += 1) {
            if (self.proxy.activeLayerIds[layerId]) {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            } else {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
            self.handleSelectedChilds(changedLayer.$entries[j]);
          }
        }
      });

      // add hook function for changed zoom
      //   needed to change the entry-classes
      this.proxy.hook_map_zoom.push(function () {
        var j, id, layer;

        for (id in self.layers) {
          if (self.layers.hasOwnProperty(id)) {
            layer = self.layers[id];
            if (layer && layer.$entries) {
              for (j = 0; j < layer.$entries.length; j += 1) {
                if (self.proxy.checkLayerIsActiveForZoom(id)) {
                  layer.$entries[j].removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                } else {
                  layer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                }
              }
            }
          }
        }
      }); // end of hook

      if (itemData && itemData.length > 0) {
        for (i = 0; i < itemData.length; i += 1) {
          uid = itemData[i];
          layer = self.proxy.layerController.arrLayers[uid];
          item = {};
          this.layers[uid] = item;
          // renderSpecial is set when a layer is rendered in its own tab
          if (layer.renderSpecial) {
            continue;
          }

          if (layer && layer.display) {
            listItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
            item.entryWrappers = item.entryWrappers || [];
            item.entryWrappers.push(listItem);

            entry = document.createElement('a');
            entry.setAttribute('href', '#');
            entry.appendChild(document.createTextNode(layer.name));
            listItem.appendChild(entry);

            $entry = $(entry);
            item.$entries = item.$entries || [];
            item.$entries.push($entry);

            if (!this.proxy.checkLayerIsActiveForZoom(uid)) {
              $entry.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
            }

            $entry.data('uid', uid);
            $entry.click(fnHandleEntryClick);

            if (layer.visibleChilds || layer.split_geojson) {
              toggle = document.createElement('span');

              if (layer.hide_child !== '1') {
                $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
                $(toggle).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON);
              }
              $(toggle).click(function () {
                if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
                } else {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
                }
                if (self.proxy.options.mapController.rightSlideElements) {
                  self.proxy.options.mapController.rightSlideElements.forEach(function (element) {
                    $(element).css('right', self.starboard.container.offsetWidth);
                  });
                }
                $(self.starboard.element).css('right', self.starboard.container.offsetWidth);
              });
              $(toggle).insertBefore($entry);
              childWrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
              item.childWrappers = item.childWrappers || [];
              item.childWrappers.push(childWrapper);
              if (layer.hide_child !== '1') {
                listItem.appendChild(childWrapper);
              }
              if (layer.split_geojson && layer.content[0]) {
                var data = layer.content[0].data;
                if (data && data.features) {
                  for (var _i = 0; _i < data.features.length; _i++) {
                    var feature = data.features[_i];
                    var childListItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
                    var childItem = {};
                    childItem.entryWrappers = childItem.entryWrappers || [];
                    childItem.entryWrappers.push(childListItem);
                    var childEntry = document.createElement('a');
                    childEntry.setAttribute('href', '#');
                    childEntry.appendChild(document.createTextNode(feature.properties[layer.geojson_attributes.split(',')[0]]));
                    childListItem.appendChild(childEntry);
                    var childUid = uid + "" + _i;
                    var $childEntry = $(childEntry);
                    childItem.$entries = item.$entries || [];
                    childItem.$entries.push($entry);
                    childWrapper.appendChild(childListItem);
                    $childEntry.data('uid', childUid);
                    if (layer.geojson_zoom) {
                      $childEntry.click(fnChildEntryShow);
                      $childEntry.addClass('c4g-geojson-button');
                    } else {
                      $childEntry.click(fnChildEntryClick);
                      if (this.proxy.activeLayerIds[uid]) {
                        $childEntry.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                      } else {
                        $childEntry.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
                      }
                    }
                    if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.addChilds) === 'object') {
                      __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.addChilds);
                    }

                    if (c4g.maps.hook.starboard_layer_activate && c4g.maps.hook.starboard_layer_activate.length > 0) {
                      var paramObj = { 'feature': feature, 'parentItem': childListItem, 'entry': $childEntry };
                      __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.starboard_layer_activate, paramObj);
                    }
                  }
                }
              }
            }

            if (this.proxy.activeLayerIds[uid]) {
              $entry.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            } else {
              $entry.addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            }

            // [info]:  In order for this to work,
            //          the parent layers need to be
            //          listed before their childs
            if (this.layers[layer.pid]) {
              // is child-element
              pWrapper = this.layers[layer.pid].childWrappers;
              pWrapper[pWrapper.length - 1].appendChild(listItem);
            } else if (parseInt(layer.pid, 10) == 0) {
              // layer is map itself with a layer
              toggle = document.createElement('span');
              if (layer.hide_child !== '1') {
                $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
              }
              $(toggle).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON);
              $(toggle).click(function () {
                if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
                } else {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
                }
              });
              $(toggle).insertBefore($entry);
              childWrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
              item.childWrappers = item.childWrappers || [];
              item.childWrappers.push(childWrapper);
              listItem.appendChild(childWrapper);
              wrapper.appendChild(listItem);
            } else {
              // is not a child-element (pid == mapId)
              wrapper.appendChild(listItem);
            }

            if (layer.id) {
              var idstr = layer.id.toString();
              layerClass = encodeURIComponent(idstr.toLowerCase()).replace(/%[0-9A-F]{2}/gi, '');
              $(listItem).addClass('c4g_starboard_item_' + layerClass);
            }

            if (layer.cssClass) {
              $(listItem).addClass(layer.cssClass);
            }

            // call hook "layerswitcher_forEachItem"
            if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.layerswitcher_forEachItem) === "object") {
              __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.layerswitcher_forEachItem, { that: this, item: item, entry: $entry });
            }
          }
        } // end of for-loop

        // Starboard Filter
        if (this.starboard.options.filter) {
          var dv = document.createElement('div');
          dv.className = "c4g-starboard-filter c4g-content-select";
          var filter = document.createElement('input');
          filter.type = 'text';
          filter.placeholder = ""; //Font Awesome
          var i = document.createElement('i');
          i.className = 'fas fa-filter';
          i.setAttribute("aria-hidden", "true");
          dv.appendChild(filter);
          dv.appendChild(i);
          filter.onkeyup = function () {
            function filter_ulli(element, showSubtree) {

              // do not apply filter for short search terms

              showSubtree = showSubtree || false; // used while traversing down the tree

              /**
               * Returns an array (modified: first element) of the given elements. Only finds children of the given parent element, but
               * no further descendants like getElementsByTagName does.
               */
              function getChildrenByTagName(element, tagName) {
                var found = [];
                for (var i = 0; i < element.children.length; i++) {
                  if (element.children[i].tagName.toUpperCase() == tagName.toUpperCase()) {
                    found.push(element.children[i]);
                  }
                }
                if (found.length > 0) {
                  return found[0]; // !!!
                } else {
                  return false;
                }
              }

              var matchFlagUl = false;
              var subtreeMatches = false;
              // for each LI do
              for (var i = 0; i < element.children.length; i++) {
                element.children[i].style.display = "block";

                var isMatch = false;

                // search current LI for filter term
                if (element.children[i].getElementsByTagName('a')[0].innerHTML.toUpperCase().indexOf(filter.value.toUpperCase()) >= 0) {
                  // it's a match
                  isMatch = true;
                }

                // recurse if a subtree (UL) exists in current LI (max 1 expected)
                var ul = getChildrenByTagName(element.children[i], "ul");

                if (ul) {
                  // recursion
                  var hasSubtree = true;
                  subtreeMatches = filter_ulli(ul, showSubtree || isMatch);
                } else {
                  var hasSubtree = false;
                }

                if (isMatch || subtreeMatches || showSubtree) {
                  matchFlagUl = true; // used while traversing up the tree again
                  // set current LI visible and open
                  element.children[i].style.display = "";

                  if (filter.value.length > 2) {
                    element.children[i].classList.remove("c4g-close");
                    element.children[i].classList.add("c4g-open");
                  }

                  element.children[i].classList.remove("c4g-starboard-filter-match"); // always remove
                  if (isMatch && filter.value.length > 0) {
                    element.children[i].classList.add("c4g-starboard-filter-match");
                  };
                } else {
                  // set current LI invisible
                  element.children[i].style.display = "none";
                  element.children[i].classList.remove("c4g-open");
                  element.children[i].classList.add("c4g-close");
                  element.children[i].classList.remove("c4g-starboard-filter-match");
                }
              }

              if (matchFlagUl) {
                return true;
              } else {
                return false;
              }
            }
            // do not react immediately but allow for some keystrokes 
            setTimeout(function () {
              // two or zero letters are required
              if (filter.value.length != 1) filter_ulli(document.querySelector('.c4g-layertree > ul:nth-child(2)'));
            }, 350);
          };

          wrapperElement.appendChild(dv);
        }
        wrapperElement.appendChild(wrapper);
      }
    }, // end of "addItems()"
    /**
     * Function which checks for a given layer id, if any of the childs are currently selected.
     * @param layerUid
     * @returns {boolean}
     */
    checkChildSelections: function checkChildSelections(layerUid) {
      var layer, childActive, self;
      self = this;
      childActive = 0;
      layer = self.proxy.layerController.arrLayers[layerUid];
      if (layer && layer.childs && layer.childs.length > 0) {
        // layer has childs
        layer.childs.forEach(function (child) {
          if (self.proxy.activeLayerIds[child.id]) {
            childActive = childActive + 1;
          } else {
            // check if any childs of childs are active
            childActive = childActive + self.checkChildSelections(child.uid);
          }
        });
      }
      return childActive;
    }, // end of "checkChildSelections()"

    /**
     * Function for coloring the layerswitcher entries, if there are any sublayers selected
     * @param entry
     */
    handleSelectedChilds: function handleSelectedChilds(entry) {
      if (this.checkChildSelections($(entry).data('uid')) >= 1) {
        $(entry).css('font-weight', 'bold');
      } else {
        $(entry).css('font-weight', 'normal');
      }
      this.starboard.update();
      return true;
    },

    updateParentLayers: function updateParentLayers(entry, layerUid, clickedLayer) {
      var layer, parentEntry, parentLayer;

      layer = this.proxy.layerController.arrLayers[layerUid];
      if (layer.pid != this.starboard.options.mapController.data.mapId) {
        // the layer has parents
        // by this we can access only the single span where the parent entry is in
        parentLayer = this.proxy.layerController.arrLayers[layer.pid];
        if (parentLayer) {
          parentEntry = entry.parentNode.parentNode.parentNode.getElementsByTagName('a')[0];
          if (parentEntry) {
            if (this.proxy.activeLayerIds[clickedLayer.id]) {
              $(parentEntry).css('font-weight', 'bold');
            } else {
              if (this.checkChildSelections($(parentEntry).data('uid')) >= 1) {
                $(parentEntry).css('font-weight', 'bold');
              } else {
                $(parentEntry).css('font-weight', 'normal');
                //$(parentEntry).addClass(cssConstants.INACTIVE);
              }
            }
            this.updateParentLayers(parentEntry, parentLayer.id, parentLayer);
          }
        }
      } else {
        return false;
      }
    }

  }); // end of "add methods"
})(jQuery, this.c4g);

var Layerswitcher = this.c4g.maps.control.starboardplugin.Layerswitcher;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-zoomlevel.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-zoomlevel.js ***!
  \***********************************************************/
/*! exports provided: Zoomlevel */
/*! exports used: Zoomlevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Zoomlevel; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};



(function ($, c4g) {
  'use strict';

  /**
   * Displays the current zoomlevel on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Zoomlevel = function (options) {

    var self, element, updateZoomlevel;

    self = this;

    if (!options || !options.mapView) {
      console.warn('Zoomlevel control needs to know the map.');
      return false;
    }

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ZOOM_LEVEL,
      undefinedHTML: ''
    }, options);

    element = document.createElement('div');
    element.className = options.className;
    element.innerHTML = options.mapView.getZoom();

    updateZoomlevel = function updateZoomlevel() {
      element.innerHTML = parseInt(options.mapView.getZoom());
    };

    options.mapView.on('change:resolution', updateZoomlevel);
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });
  };
  ol.inherits(c4g.maps.control.Zoomlevel, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Zoomlevel.prototype = $.extend(c4g.maps.control.Zoomlevel.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Zoomlevel = this.c4g.maps.control.Zoomlevel;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-interaction-geopicker.js":
/*!***************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-interaction-geopicker.js ***!
  \***************************************************************/
/*! exports provided: GeoPicker */
/*! exports used: GeoPicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GeoPicker; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.interaction = this.c4g.maps.interaction || {};

(function ($, c4g) {
    'use strict';

    /**
     *
     * @param options
     * @returns {boolean}
     * @constructor
     */

    c4g.maps.interaction.GeoPicker = function (options) {
        var mapData, mapContainer, lat, lon, latIdx, lonIdx, latRnd, lonRnd;

        this.options = options || {};

        if (!this.options.mapContainer || !this.options.mapContainer.data) {
            console.warn('The GeoPicker needs a "mapContainer" in order to work.');
            return false;
        }

        mapData = this.options.mapContainer.data;
        mapContainer = this.options.mapContainer;
        // configurate geopicker
        this.$fieldGeoX = $(mapData.geopicker.input_geo_x);
        this.$fieldGeoY = $(mapData.geopicker.input_geo_y);

        this.opticLayerSource = new ol.source.Vector({});
        this.opticLayerVector = new ol.layer.Vector({
            source: this.opticLayerSource,
            style: this.geoPickerStyleFunction
        });
        this.opticLayerFeature = null;

        if (this.$fieldGeoX.val() && this.$fieldGeoY.val()) {
            lat = this.$fieldGeoY.val();
            lon = this.$fieldGeoX.val();

            if (mapData.geopicker.anonymous) {
                this.$fieldGeoY.remove();
                this.$fieldGeoX.remove();

                latIdx = lat.indexOf('.');
                lonIdx = lon.indexOf('.');
                lat = lat.replace(/\D/g, "");
                lon = lon.replace(/\D/g, "");
                latRnd = Math.round(Math.random() * (99999999999 - 1) + 1);
                lonRnd = Math.round(Math.random() * (99999999999 - 1) + 1);
                if (latRnd > 49999999999) {
                    lat = parseInt(lat) - latRnd;
                } else {
                    lat = parseInt(lat) + latRnd;
                }
                if (lonRnd < 50000000000) {
                    lon = parseInt(lon) - lonRnd;
                } else {
                    lon = parseInt(lon) + lonRnd;
                }
                lat = lat + "";
                lon = lon + "";
                lat = lat.substr(0, latIdx) + '.' + lat.substr(latIdx, lat.length - latIdx);
                lon = lon.substr(0, lonIdx) + '.' + lon.substr(lonIdx, lon.length - lonIdx);
            }

            this.opticLayerFeature = new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.fromLonLat([parseFloat(lon), parseFloat(lat)])),
                pickerColor: [0, 180, 100, 1],
                anonymous: mapData.geopicker.anonymous
            });

            this.opticLayerSource.addFeature(this.opticLayerFeature);

            mapContainer.map.getView().fit(this.opticLayerSource.getExtent(), mapContainer.map.getSize());
            // set zoom so we can see some tiles without error
            mapContainer.map.getView().setZoom(15);
        } else if (mapData.geoLocation && typeof mapData.geoLocation.setTracking === 'function') {
            mapData.geoLocation.setTracking(true);
        }
        mapContainer.map.addLayer(this.opticLayerVector);

        //TODO wenn geopicker.clickDisabled (oder so) gesetzt ist, this.options.handleEvent = function(){}

        // inheritance-stuff
        ol.interaction.Interaction.call(this, {
            handleEvent: this.options.handleEvent || this.handleEvent
            // handleEvent: this.options.handleEvent || c4g.maps.interaction.GeoPicker.handleEvent
        });
    };
    ol.inherits(c4g.maps.interaction.GeoPicker, ol.interaction.Interaction);

    /*
     * Add methods
     */
    c4g.maps.interaction.GeoPicker.prototype = $.extend(c4g.maps.interaction.GeoPicker.prototype, {

        geoPickerStyleFunction: function geoPickerStyleFunction(feature, projection, getId) {
            var color, white, result;

            if (getId) {
                return -1;
            }

            white = [255, 255, 255, 1];
            if (feature && typeof feature.get === 'function' && feature.get('pickerColor')) {
                color = feature.get('pickerColor');
            } else {
                color = [200, 0, 0, 0.7];
            }

            result = [];
            if (feature && typeof feature.get === 'function' && !feature.get('anonymous')) {
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 2,
                        fill: new ol.style.Fill({
                            color: color
                        }),
                        stroke: new ol.style.Stroke({
                            color: white,
                            width: 2
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 20,
                        stroke: new ol.style.Stroke({
                            color: white,
                            width: 4
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 20,
                        stroke: new ol.style.Stroke({
                            color: color,
                            width: 2
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 40,
                        stroke: new ol.style.Stroke({
                            color: white,
                            width: 4
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 40,
                        stroke: new ol.style.Stroke({
                            color: color,
                            width: 2
                        })
                    }),
                    zIndex: Infinity
                }));
            }

            result.push(new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 60,
                    stroke: new ol.style.Stroke({
                        color: white,
                        width: 4
                    })
                }),
                zIndex: Infinity
            }));

            result.push(new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 60,
                    stroke: new ol.style.Stroke({
                        color: color,
                        width: 2
                    })
                }),
                zIndex: Infinity
            }));

            return result;
        },

        handleEvent: function handleEvent(mapBrowserEvent) {
            if (mapBrowserEvent.type === "singleclick") {
                if (!this.options.disableClickEvent && !this.options.mapContainer.data.geopicker.disabled) {
                    return !this.pick(mapBrowserEvent.coordinate);
                }
            }

            return true;
        },

        pick: function pick(coordinate) {
            var arrLatLon;

            arrLatLon = ol.proj.toLonLat(coordinate);

            this.opticLayerFeature = new ol.Feature({
                geometry: new ol.geom.Point(coordinate)
            });

            this.opticLayerSource.clear();
            this.opticLayerSource.addFeature(this.opticLayerFeature);

            this.$fieldGeoX.val(arrLatLon[0]);
            this.$fieldGeoY.val(arrLatLon[1]);
            this.$fieldGeoX.change();
            this.$fieldGeoY.change();

            return true;
        }

    }); // end of "add methods" ---
})(jQuery, this.c4g);

var GeoPicker = this.c4g.maps.interaction.GeoPicker;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-main.js":
/*!**********************************************!*\
  !*** ./Resources/public/js/c4g-maps-main.js ***!
  \**********************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps__ = __webpack_require__(/*! ./c4g-maps */ "./Resources/public/js/c4g-maps.js");


jQuery(document).ready(function () {
  // TODO wie komm ich an mapData?
  var mapController = new __WEBPACK_IMPORTED_MODULE_0__c4g_maps__["a" /* MapController */](mapData);
  console.log("Foo");
});

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-maphover.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-maphover.js ***!
  \*******************************************************/
/*! exports provided: MapHover */
/*! exports used: MapHover */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MapHover; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_misc_tooltippopup__ = __webpack_require__(/*! ./c4g-maps-misc-tooltippopup */ "./Resources/public/js/c4g-maps-misc-tooltippopup.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.misc = this.c4g.maps.misc || {};




(function ($, c4g) {
    'use strict';

    /**
     * @TODO
     * [MapHover description]
     *
     * @constructor
     *
     * @param {Object=} opt_options Control options.
     */

    c4g.maps.misc.MapHover = function (options) {

        this.options = options || {};

        // default options
        this.options = $.extend({
            // mapController: undefined,
            activate: true
        }, this.options);

        if (!this.options.mapController) {
            console.warn('MapHover needs a mapController');
            return false;
        }

        // set needed vars
        this.listenerKey = false;
        this.map = this.options.mapController.map;
        this.lastFeatureStyle = null;
        this.lastHoveredFeature = null;

        // create tooltip
        this.hoverTooltip = new __WEBPACK_IMPORTED_MODULE_0__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
            map: this.map,
            offset: [10, 10],
            horizontal: true,
            closeable: false
        });
        this.hoverTooltip.hide();

        if (this.options.activate) {
            this.activate();
        }
    };

    // Add methods to MapHover
    c4g.maps.misc.MapHover.prototype = $.extend(c4g.maps.misc.MapHover.prototype, {

        /**
         * @TODO: [activate description]
         *
         * @return  {[type]}  [description]
         */
        activate: function activate() {
            if (!this.listenerKey) {
                this.listenerKey = this.map.on('pointermove', this.getHoverFunction(), this);
                //this.map.on('pointermove', this.changeFeatureStyles(), this);
            }
        }, // end of "activate()"


        /**
         * @TODO: [deactivate description]
         *
         * @return  {[type]}  [description]
         */
        deactivate: function deactivate() {
            if (this.listenerKey) {
                ol.Observable.unByKey(this.listenerKey);
                this.listenerKey = false;
            }
        }, // end of "deactivate()"


        /**
         * @TODO: [isActive description]
         *
         * @return  {[type]}  [description]
         */
        isActive: function isActive() {
            if (this.listenerKey) {
                return true;
            }
            return false;
        }, // end of "getState()"


        /**
         * @TODO: [getHoverFunction description]
         *
         * @return  {[type]}  [description]
         */
        getHoverFunction: function getHoverFunction() {

            var self = this;

            return function (event) {

                var hovered,
                    clustered,
                    tooltipContent,
                    tooltipHelper,
                    features,
                    tooltipLength,
                    resolution,
                    canvas,
                    mapData = self.options.mapController.data,
                    proxy = self.options.mapController.proxy;

                clustered = false;
                hovered = self.map.forEachFeatureAtPixel(event.pixel, function (feature, layer) {
                    return {
                        feature: feature,
                        layer: layer
                    };
                });
                resolution = self.map.getView().getResolution();

                if (!hovered) {
                    self.hoverTooltip.hide();
                    canvas = document.querySelector("canvas");
                    $(canvas).css('cursor', 'default');
                    if (mapData.hover_popups === '1' && mapData.hover_popups_stay != '1') {
                        c4g.maps.popup.$popup.removeClass(c4g.maps.constant.css.ACTIVE);
                    }

                    if (self.lastHoveredFeature && self.lastFeatureStyle) {
                        self.lastHoveredFeature.setStyle(self.lastFeatureStyle);
                        self.lastHoveredFeature = null;
                    }
                    return false;
                }

                canvas = document.querySelector("canvas");
                $(canvas).css('cursor', 'pointer');

                if (hovered.feature && typeof hovered.feature.get === 'function' && hovered.feature.get('features')) {
                    if (hovered.feature.get('features')[1]) {
                        clustered = true;
                    } else {
                        hovered.feature = hovered.feature.get('features')[0];
                    }
                }
                if (hovered.feature.getGeometry() && hovered.feature.getGeometry() instanceof ol.geom.LineString) {
                    return false;
                }
                if (hovered.feature.get("hover_location") || self.lastHoveredFeature && self.lastHoveredFeature.get("hover_location")) {
                    if (self.lastHoveredFeature && hovered.feature === self.lastHoveredFeature) {
                        return false;
                    }

                    //set back styles when the features are not hovered anymore
                    if (self.lastFeatureStyle) {
                        if (self.lastHoveredFeature) {
                            if (hovered.feature !== self.lastHoveredFeature) {
                                if (self.lastFeatureStyle) {
                                    self.lastHoveredFeature.setStyle(self.lastFeatureStyle);
                                    //console.log("Changed back feature style");
                                } else if (self.lastLayerStyle) {
                                    self.lastHoveredFeature.setStyle(self.lastLayerStyle);
                                    //console.log("Changed back layer-feature style");
                                }
                            }
                        }
                    }

                    if (hovered.feature && _typeof(hovered.feature.getStyleFunction) && typeof hovered.feature.getStyleFunction === 'function' && typeof hovered.feature.getStyleFunction() === 'function') {
                        self.lastHoveredFeature = hovered.feature;

                        self.lastLayerStyle = hovered.layer.getStyle();
                        self.lastFeatureStyle = self.lastLayerStyle(self.lastHoveredFeature);
                        //TODO get onhover style from db (vllt schon in proxy drin?)
                        if (hovered.feature.get('hover_style') && proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")]) {
                            if (proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction) {
                                hovered.feature.setStyle(Function("feature", "data", "map", proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction)(hovered.feature));
                            } else {
                                hovered.feature.setStyle(proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].style(hovered.feature));
                            }
                        }
                    } else if (hovered.layer && _typeof(hovered.layer.getStyleFunction) && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function') {

                        if (hovered.feature) {
                            self.lastHoveredFeature = hovered.feature;
                        } else {
                            self.lastHoveredFeature = hovered.layer.getSource().getFeatures()[0];
                            self.lastHoveredFeature = self.lastHoveredFeature.get('features')[0];
                        }

                        self.lastLayerStyle = hovered.layer.getStyle();
                        self.lastFeatureStyle = self.lastLayerStyle(self.lastHoveredFeature);
                        if (hovered.feature.get('hover_style')) {
                            if (!proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")]) {
                                var arrIds = [];
                                arrIds.push(hovered.feature.get("hover_style"));
                                proxy.locationStyleController.loadLocationStyles(arrIds);
                                self.lastHoveredFeature = null;
                                return null;
                            }
                            if (proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction) {
                                hovered.feature.setStyle(Function("feature", "data", "map", proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction)(hovered.feature));
                            } else {
                                hovered.feature.setStyle(proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].style(hovered.feature));
                            }
                        }
                    }
                }

                if (hovered && hovered.feature && hovered.feature.get('styleUrl')) {
                    //if this property is set, we have a feature that has none of our styles => no tooltip
                    return false;
                }

                // set hover tooltips
                tooltipContent = false;
                if (!clustered && hovered.feature && typeof hovered.feature.get === 'function' && (hovered.feature.get('tooltip') || hovered.feature.get('graphicTitle'))) {
                    tooltipContent = hovered.feature.get('tooltip');
                    if (!tooltipContent) {
                        tooltipContent = hovered.feature.get('graphicTitle');
                    } else if ((typeof tooltipContent === "undefined" ? "undefined" : _typeof(tooltipContent)) === 'object' && tooltipContent.element && tooltipContent.element.childNodes[1]) {
                        tooltipContent = tooltipContent.element.childNodes[1].innerHTML;
                    }
                    // @TODO: Check & fix
                } else if (hovered.feature && _typeof(hovered.feature.getStyleFunction) && typeof hovered.feature.getStyleFunction === 'function' && typeof hovered.feature.getStyleFunction() === 'function' && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.feature.getStyleFunction()(resolution)] && proxy.locationStyleController.arrLocStyles[hovered.feature.getStyleFunction()(resolution)].tooltip) {
                    tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.feature.getStyleFunction()(resolution)].tooltip;
                    // @TODO: Check
                } else if (hovered.layer && _typeof(hovered.layer.getStyleFunction) && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function' && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()] && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()].tooltip) {
                    tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()].tooltip;
                } else if (hovered.layer && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function' && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)] && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)].tooltip) {
                    tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)].tooltip;
                } else if (hovered.layer && hovered.layer.tooltip) {
                    tooltipContent = hovered.layer.tooltip;
                }
                if (clustered && hovered.feature.get('features')) {
                    features = hovered.feature.get('features');
                    if (features[0].get('tooltip') && features[0].get('tooltip_length')) {
                        tooltipContent = features[0].get('tooltip');
                        tooltipLength = parseInt(features[0].get('tooltip_length'));
                        for (var i = 1; i < features.length; i++) {
                            if (features[i].get('tooltip') && features[i].get('tooltip') != '') {
                                tooltipContent = tooltipContent + ', ' + features[i].get('tooltip');
                            }
                        }
                        if (tooltipContent.length > tooltipLength + 3) {
                            if (tooltipContent = tooltipContent.slice(0, tooltipLength)) {
                                tooltipContent = tooltipContent + '...';
                            }
                        }
                    } else if (hovered.layer.tooltip && hovered.layer.tooltip_length) {
                        tooltipHelper = tooltipContent;
                        tooltipContent = '';
                        tooltipLength = parseInt(hovered.layer.tooltip_length);
                        for (i = 0; i < features.length; i++) {
                            var singleTooltip = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].replaceAllPlaceholders(tooltipHelper, features[i], hovered.layer);
                            if (singleTooltip != '') {
                                if (tooltipContent == '') tooltipContent = singleTooltip;else tooltipContent = tooltipContent + ', ' + singleTooltip;
                            }
                        }
                        if (tooltipContent.length > tooltipLength + 3) {
                            if (tooltipContent = tooltipContent.slice(0, tooltipLength)) {
                                tooltipContent = tooltipContent + '...';
                            }
                        }
                    }
                }

                if (tooltipContent) {
                    tooltipContent = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].decodeGeoJsonProperty(tooltipContent);

                    // replace placeholders if possible
                    if (hovered.feature.get('features')) {}
                    tooltipContent = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].replaceAllPlaceholders(tooltipContent, hovered.feature, hovered.layer);

                    if (tooltipContent.trim()) {
                        // popup config
                        self.hoverTooltip.setPosition(event.coordinate);
                        self.hoverTooltip.setContent(tooltipContent);
                        self.hoverTooltip.show();
                    } else {
                        self.hoverTooltip.hide();
                    }
                } else {
                    self.hoverTooltip.hide();
                }
                if (mapData.hover_popups === '1' && !clustered && hovered.feature) {
                    var popupInfos = {};

                    if (hovered.feature.get('popup')) {
                        popupInfos = hovered.feature.get('popup');
                    } else if (hovered.feature.get('loc_linkurl')) {
                        return;
                    } else if (hovered.layer && hovered.layer.popup) {
                        popupInfos = hovered.layer.popup;
                    } else {
                        return;
                    }
                    var coord = hovered.feature.getGeometry().getCoordinates();
                    if (!coord || coord && coord[0] && coord[0].length) {
                        var extent = hovered.feature.getGeometry().getExtent();
                        coord = self.map.getCoordinateFromPixel(event.pixel);
                        coord = [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
                    }

                    c4g.maps.popup.popup.setPosition(coord);

                    if (popupInfos.content) {
                        c4g.maps.popup.$content.html('');
                        c4g.maps.popup.$popup.addClass(c4g.maps.constant.css.ACTIVE).addClass(c4g.maps.constant.css.LOADING);
                        c4g.maps.popup.spinner.show();

                        if (popupInfos.async === false) {
                            var objPopup = {};
                            objPopup.popup = popupInfos;
                            objPopup.feature = hovered.feature;
                            objPopup.layer = hovered.layer;
                            // Call the popup hook for plugin specific popup content
                            if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.proxy_fillPopup) === 'object') {
                                __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.proxy_fillPopup, objPopup);
                            }
                            proxy.setPopup(objPopup, proxy);
                        } else {
                            $.ajax({
                                dataType: "json",
                                url: proxy.api_infowindow_url + '/' + popupInfos.content,
                                done: function done(data) {
                                    var popupInfo = {
                                        async: popupInfos.async,
                                        content: data.content,
                                        popup: popupInfos.popup,
                                        routing_link: popupInfos.routing_link
                                    };

                                    var objPopup = {};
                                    objPopup.popup = popupInfo;
                                    objPopup.feature = hovered.feature;
                                    objPopup.layer = hovered.layer;

                                    // Call the popup hook for plugin specific popup content
                                    if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.proxy_fillPopup) === 'object') {
                                        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.proxy_fillPopup, objPopup);
                                    }

                                    proxy.setPopup(objPopup, proxy);
                                }
                            });
                        }
                    } else {
                        c4g.maps.popup.$popup.removeClass(c4g.maps.constant.css.ACTIVE);
                    }
                }
            };
        }, // end of "getHoverFunction()"

        changeFeatureStyles: function changeFeatureStyles() {
            //TODO: change style of features which are hovered and have the option to change style on hover enabled
        }

    }); // End of "add methods to TooltipPopUp"
})(jQuery, this.c4g);

var MapHover = this.c4g.maps.misc.MapHover;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-spinner.js":
/*!******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-spinner.js ***!
  \******************************************************/
/*! exports provided: Spinner */
/*! exports used: Spinner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Spinner; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.misc = this.c4g.maps.misc || {};



(function ($, c4g) {
  'use strict';

  /**
   * @TODO
   * [Spinner description]
   *
   * @constructor
   *
   * @param {Object=} opt_options Control options.
   */

  c4g.maps.misc.Spinner = function (opt_options) {

    var options, target, spinnerSpan;

    options = opt_options || {};

    // default options
    options = $.extend({
      className: '',
      target: '.' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_VIEWPORT
    }, options);

    if (options.className) {
      options.className = ' ' + options.className;
    }

    this.element = document.createElement('div');
    this.element.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].SPINNER + options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE;
    $(options.target).append(this.element);

    spinnerSpan = document.createElement('span');
    spinnerSpan.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ANIMATION_SPIN;
    this.element.appendChild(spinnerSpan);

    this.additionalActivationCounter = 0;
  };

  // Add methods to spinner
  c4g.maps.misc.Spinner.prototype = $.extend(c4g.maps.misc.Spinner.prototype, {

    /**
     * @TODO
     * [show description]
     *
     * @return  {[type]}  [description]
     */
    show: function show() {
      if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
      } else {
        this.additionalActivationCounter += 1;
      }
    },

    /**
     * @TODO
     * [hide description]
     *
     * @return  {[type]}  [description]
     */
    hide: function hide() {
      if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        //console.warn('Spinner is already hidden.');
      } else {
        if (this.additionalActivationCounter === 0) {
          $(this.element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
        } else {
          this.additionalActivationCounter -= 1;
        }
      }
    }

  }); // End of "add methods to spinner"
})(jQuery, this.c4g);

var Spinner = this.c4g.maps.misc.Spinner;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-tooltippopup.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-tooltippopup.js ***!
  \***********************************************************/
/*! exports provided: TooltipPopUp */
/*! exports used: TooltipPopUp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TooltipPopUp; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.misc = this.c4g.maps.misc || {};



(function ($, c4g) {
  'use strict';

  /**
   * @TODO
   * [TooltipPopUp description]
   *
   * @constructor
   *
   * @param {Object=} opt_options Control options.
   */

  c4g.maps.misc.TooltipPopUp = function (opt_options) {

    var self, addClassName, closeButton;

    self = this;
    this.options = opt_options || {};

    // default options
    this.options = $.extend({
      // className: ''
      // closeFunction: null
      // map: null
      horizontal: false,
      closeable: false,
      offset: [1, -1],
      position: [0, 0]
    }, this.options);

    // prepare additional classes
    addClassName = '';
    if (this.options.className) {
      addClassName = ' ' + this.options.className;
    }
    if (this.options.horizontal) {
      addClassName += ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HORIZONTAL;
    }
    if (this.options.closeable) {
      addClassName += ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSEABLE;
    }

    this.element = document.createElement('div');
    this.element.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].TOOLTIP_POPUP + addClassName;

    if (this.options.closeable) {
      closeButton = document.createElement('button');
      closeButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].POPUP_CLOSE;
      this.element.appendChild(closeButton);

      $(closeButton).click(function () {
        self.close();
      });
    }

    this.contentContainer = document.createElement('div');
    this.element.appendChild(this.contentContainer);

    this.overlay = new ol.Overlay({
      element: this.element,
      insertFirst: false,
      offset: this.options.offset,
      positioning: 'bottom-left'
    });

    if (this.options.map) {
      this.options.map.addOverlay(this.overlay);
    }

    if (this.options.position) {
      this.overlay.setPosition(this.options.position);
    }
  };

  // Add methods to TooltipPopUp
  c4g.maps.misc.TooltipPopUp.prototype = $.extend(c4g.maps.misc.TooltipPopUp.prototype, {

    close: function close() {
      if (typeof this.options.closeFunction === 'function') {
        this.options.closeFunction();
      }

      if (this.options.map) {
        this.options.map.removeOverlay(this.overlay);
      }
    },

    /**
     * @TODO
     * [show description]
     *
     * @return  {[type]}  [description]
     */
    show: function show() {
      if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
      }
    },

    /**
     * @TODO
     * [hide description]
     *
     * @return  {[type]}  [description]
     */
    hide: function hide() {
      if (!$(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        $(this.element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
      }
    },

    /**
     * @TODO
     * [getContent description]
     *
     */
    getContent: function getContent() {
      return this.contentContainer.innerHTML;
    },

    /**
     * @TODO
     * [getPosition description]
     *
     */
    getPosition: function getPosition() {
      return this.overlay.getPosition();
    },

    /**
     * @TODO
     * [setContent description]
     *
     * @param  {[type]}  content  [description]
     */
    setContent: function setContent(content) {
      this.contentContainer.innerHTML = content;
    },

    /**
     * @TODO
     * [setPosition description]
     *
     * @param  {[type]}  coordinates  [description]
     */
    setPosition: function setPosition(coordinates) {
      this.overlay.setPosition(coordinates);
    }

  }); // End of "add methods to TooltipPopUp"
})(jQuery, this.c4g);

var TooltipPopUp = this.c4g.maps.misc.TooltipPopUp;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-proxy.js":
/*!***********************************************!*\
  !*** ./Resources/public/js/c4g-maps-proxy.js ***!
  \***********************************************/
/*! exports provided: MapProxy */
/*! exports used: MapProxy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MapProxy; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_baselayer_controller__ = __webpack_require__(/*! ./c4g-baselayer-controller */ "./Resources/public/js/c4g-baselayer-controller.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_layer_controller__ = __webpack_require__(/*! ./c4g-layer-controller */ "./Resources/public/js/c4g-layer-controller.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_locationstyle_controller__ = __webpack_require__(/*! ./c4g-locationstyle-controller */ "./Resources/public/js/c4g-locationstyle-controller.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_misc_spinner__ = __webpack_require__(/*! ./c4g-maps-misc-spinner */ "./Resources/public/js/c4g-maps-misc-spinner.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// 'namespace'
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.hook = this.c4g.maps.hook || {};

'use strict';









var c4g = this.c4g;
var MapProxy = function () {
  function MapProxy(options) {
    _classCallCheck(this, MapProxy);

    var mapData;

    this.options = jQuery.extend({
      mapController: false
    }, options);
    if (!this.options.mapController) {
      return false;
    }

    c4g.maps.editorStyles = c4g.maps.editorStyles || {};

    //c4g.maps.hook.proxy_fillPopup = [];

    this.hook_baselayer_loaded = [];
    this.hook_baselayer_visibility = [];
    this.hook_layer_loaded = [];
    this.hook_layer_visibility = [];
    this.hook_map_click = [];
    this.hook_map_zoom = [];

    // add global hook for accessibility when there is no proxy reference
    c4g.maps.hook.proxy_layer_loaded = c4g.maps.hook.proxy_layer_loaded || [];

    this.baselayerIds = [];
    this.activeBaselayerId = undefined;
    this.layerIds = [];
    this.activeLayerIds = {};

    this.requestFunctions = {};
    this.request = {};

    this.baselayers_loaded = false;
    this.layers_loaded = false;

    mapData = this.options.mapController.data;

    this.mapId = mapData.id;

    this.api_baselayer_url = this.options.mapController.data.api.baselayer + '/' + mapData.profile;
    this.api_layer_url = this.options.mapController.data.api.layer + '/' + this.mapId;
    this.api_layercontent_url = this.options.mapController.data.api.layercontent;
    //this.api_layercontentdata_url = this.options.mapController.data.api.layercontentdata;
    this.api_layercontentdata_url = "con4gis/layerContentDataService";
    this.api_locstyle_url = this.options.mapController.data.api.locstyle;
    this.api_infowindow_url = this.options.mapController.data.api.infowindow;
    this.options = options;

    // this.initialize();
  }

  _createClass(MapProxy, [{
    key: "initialize",
    value: function initialize() {
      var self, map;

      self = this;
      map = this.options.mapController.map;

      this.baselayerController = new __WEBPACK_IMPORTED_MODULE_0__c4g_baselayer_controller__["a" /* C4gBaselayerController */](this);
      this.baselayerController.loadBaseLayers();
      this.layerController = new __WEBPACK_IMPORTED_MODULE_1__c4g_layer_controller__["a" /* C4gLayerController */](this);
      this.layerController.loadLayers();
      this.locationStyleController = new __WEBPACK_IMPORTED_MODULE_2__c4g_locationstyle_controller__["a" /* C4gLocationStyleController */](this);
      this.addPopUp();

      //TODO check this, nearly the same as below
      map.on('change:view', function () {
        // zoom-observer
        //
        map.getView().on('change:resolution', function () {
          var layerId, layer;

          // check layer zoom-bounds
          // @TODO: Use "self.activeLayerIds = false" ?
          for (layerId in self.activeLayerIds) {
            if (self.activeLayerIds.hasOwnProperty(layerId)) {
              layer = self.layerController.arrLayers[layerId];
              if (self.checkLayerIsActiveForZoom(layerId)) {
                if (layer.isInactive) {
                  self.layerController.showLayer(layerId);
                }
              } else {
                self.layerController.hideLayer(layerId, true);
              }
            }
          }

          // hooks
          __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.hook_map_zoom);

          if (self.options.mapController.data.caching && map.getView().getZoom()) {
            __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].storeValue('zoom', map.getView().getZoom());
          }
        }); // end of "zoom-observer"
      }); // end of "zoom-observer"

      // zoom-observer
      //
      map.getView().on('change:resolution', function () {
        var layerId, layer;

        // check layer zoom-bounds
        // @TODO: Use "self.activeLayerIds = false" ?
        for (layerId in self.activeLayerIds) {
          if (self.activeLayerIds.hasOwnProperty(layerId)) {
            layer = self.layerController.arrLayers[layerId];
            if (self.checkLayerIsActiveForZoom(layerId)) {
              if (layer.isInactive) {
                self.layerController.showLayer(layerId);
              }
            } else {
              self.layerController.hideLayer(layerId, true);
            }
          }
        }

        // hooks
        __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.hook_map_zoom, self);

        if (self.options.mapController.data.caching && map.getView().getZoom()) {
          __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].storeValue('zoom', map.getView().getZoom());
        }
      }); // end of "zoom-observer"

      map.getView().on('change:center', function (evt) {
        if (self.options.mapController.data.caching) {
          var coordinate = ol.proj.toLonLat(map.getView().getCenter());
          if (coordinate) {
            __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].storeValue('lon', coordinate[0]);
            __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].storeValue('lat', coordinate[1]);
          }
        }
        c4g.maps.hook.map_center_changed = c4g.maps.hook.map_center_changed || [];
        __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.map_center_changed, map.getView().getCenter());
      }); // end of "center-observer"

      // click-observer
      //
      map.on('click', function (clickEvent) {

        var feature, fFeatures, layer, popupInfos, currentZoom, minZoom, newCenter, geometry, coord, setPopup, styleFunc, styleCluster, objPopup;

        //ToDo check new function call with ol 4.3
        feature = map.forEachFeatureAtPixel(clickEvent.pixel, function (feature, layer) {
          return feature;
        });

        layer = map.forEachFeatureAtPixel(clickEvent.pixel, function (feature, layer) {
          return layer;
        });

        if (layer && layer.getStyle()) {
          styleFunc = layer.getStyle();
          if (typeof styleFunc === "function" && styleFunc(feature, currentZoom) && styleFunc(feature, currentZoom)['0']) {
            styleCluster = styleFunc(feature, currentZoom)['0'].clone();
            if (styleCluster && styleCluster.getImage()) {
              styleCluster.getImage().setScale(styleCluster.getImage().getScale() * 0.7);
            }
          }
        }

        fFeatures = feature ? feature.get('features') : false;
        if (!(fFeatures && fFeatures.length === 1)) {
          // cluster multiple POI
          if (fFeatures) {
            if (fFeatures[0].get('cluster_popup') == 1) {
              map.getView().setCenter(clickEvent.coordinate);
              currentZoom = map.getView().getZoom();
              minZoom = self.options.mapController.data.cluster_all ? self.options.mapController.data.cluster_zoom : fFeatures['0'].get('cluster_zoom');
              if (currentZoom >= minZoom) {
                setPopup = [];
                setPopup.content = '';
                setPopup.async = false;
                for (var i = 0; i < fFeatures.length; i++) {
                  setPopup.content = setPopup.content.concat(fFeatures[i].get('popup').content);
                }
                feature = fFeatures[0].clone();
                feature.set('popup', setPopup);
              } else {
                map.getView().setZoom(currentZoom + 1);
              }
            } else {

              feature.setStyle(new ol.style.Style({
                image: new ol.style.Circle({
                  fill: new ol.style.Fill({
                    opacity: 0
                  }),
                  radius: 0
                })
              }));
              feature = false;

              // animation
              map.getView().animate({
                start: +new Date(),
                duration: 1000,
                resolution: map.getView().getResolution(),
                center: [0, 0]
                //rotation: Math.PI
              });

              currentZoom = map.getView().getZoom();
              newCenter = map.getCoordinateFromPixel(clickEvent.pixel);
              minZoom = self.options.mapController.data.cluster_all ? self.options.mapController.data.cluster_zoom : fFeatures['0'].get('cluster_zoom');

              //ToDo remove with structure element param
              if (currentZoom >= minZoom) {

                //if (currentZoom >= map.getView().getMaxZoom()) {
                //open the cluster after zooming
                var pix = map.getView().getResolution();
                var max = fFeatures.length;
                var r = pix * 12 * (0.5 + max / 4);
                for (var i = 0; i < max; i++) {
                  var a = 2 * Math.PI * i / max;
                  if (max == 2 || max == 4) a += Math.PI / 4;
                  var p = [newCenter[0] + r * Math.sin(a), newCenter[1] + r * Math.cos(a)];
                  var coordinate = ol.proj.toLonLat(p);
                  var f = [];
                  f.push(fFeatures[i]);
                  var cf = new ol.Feature({
                    geometry: new ol.geom.Point(p),
                    features: f,
                    style: fFeatures[i].get('style')
                  });
                  layer.getSource().addFeature(cf);
                  map.getView().setCenter(newCenter);
                }
              } else {
                currentZoom += 1;
              }

              map.getView().setCenter(newCenter);
              map.getView().setZoom(currentZoom);
            }
          }
        } else if (fFeatures && fFeatures.length === 1) {
          feature = fFeatures[0];
        }

        if (self.options.mapController.controls.editor && self.options.mapController.controls.editor.isOpen()) {
          // do not show popup when editor is open
          if (feature && feature.get('projectId')) {
            // but call click hooks
            var result = __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.hook_map_click, clickEvent);
            return false;
          }
        }
        popupInfos = {};
        if (feature && feature.get('popup')) {
          // single POI
          popupInfos = feature.get('popup');
        } else if (layer && layer.popup) {
          popupInfos = layer.popup;
        } else {
          feature = false;
        }
        if (feature && feature.get('loc_linkurl')) {
          if (self.options.mapController.data.link_newwindow === '1') {
            window.open(feature.get('loc_linkurl'));
          } else {
            window.open(feature.get('loc_linkurl'), "_self");
          }
        } else {
          if (feature && feature.get('zoom_onclick') && feature.get('zoom_onclick') != 0) {
            map.getView().setZoom(feature.get('zoom_onclick'));
            map.getView().setCenter(feature.getGeometry().getCoordinates());
          } else if (layer && layer.zoom_onclick && layer.zoom_onclick != 0) {
            map.getView().setZoom(layer.zoom_onclick);
            map.getView().setCenter(clickEvent.coordinate);
          }

          if (feature) {
            geometry = feature.getGeometry();
            if (geometry instanceof ol.geom.Point) {
              coord = geometry.getCoordinates();
            } else {
              coord = clickEvent.coordinate;
            }

            c4g.maps.popup.popup.setPosition(coord);
            if (popupInfos.content) {
              c4g.maps.popup.$content.html('');
              c4g.maps.popup.$popup.addClass(__WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].LOADING);
              c4g.maps.popup.spinner.show();

              if (popupInfos.async === false || popupInfos.async == '0') {
                objPopup = {};
                objPopup.popup = popupInfos;
                objPopup.feature = feature;
                objPopup.layer = layer;
                // Call the popup hook for plugin specific popup content
                if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.proxy_fillPopup) === 'object') {
                  __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.proxy_fillPopup, objPopup);
                }
                self.setPopup(objPopup);
              } else {
                jQuery.ajax({
                  dataType: "json",
                  url: self.api_infowindow_url + '/' + popupInfos.content
                }).done(function (data) {
                  var popupInfo = {
                    async: popupInfos.async,
                    content: data.content,
                    popup: popupInfos.popup,
                    routing_link: popupInfos.routing_link
                  };

                  objPopup = {};
                  objPopup.popup = popupInfo;
                  objPopup.feature = feature;
                  objPopup.layer = layer;

                  // Call the popup hook for plugin specific popup content
                  if (c4g.maps.hook !== undefined && _typeof(c4g.maps.hook.proxy_fillPopup) === 'object') {
                    __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.proxy_fillPopup, objPopup);
                  }

                  self.setPopup(objPopup);
                });
              }
            } else {
              c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
          } else {
            c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          }

          // hooks
          __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].callHookFunctions(c4g.maps.hook.hook_map_click, clickEvent);
        }
      }); // end of "click-observer"


      // this.options.mapController.map.getLayers().on('change:length', function(event) {
      //     ;
      // });

    } // end of "initial"*

  }, {
    key: "combine",
    value: function combine(proxy) {
      var func = function func(event) {
        proxy.combineLayers(proxy);
        proxy.options.mapController.map.un('postrender', func);
      };
      proxy.options.mapController.map.on('postrender', func);
    }
  }, {
    key: "setPopup",
    value: function setPopup(popupConfig) {
      var feature,
          layer,
          popupContent,
          router,
          routeButtonWrapper,
          routeFromButton,
          routeFromButtonSpan,
          routeToButton,
          routeToButtonSpan,
          routingHandler,
          self = this;

      feature = popupConfig.feature;
      layer = popupConfig.layer;

      popupContent = __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].replaceAllPlaceholders(popupConfig.popup.content, feature, layer);
      // @TODO: check for route-option & display "route-to"
      // NOTE: does not work async this way
      if (this.options.mapController.controls.router && popupConfig.popup.routing_link) {
        router = this.options.mapController.controls.router;

        routingHandler = function routingHandler(event) {
          if (self.options.mapController.activePortside !== router) {
            router.open();
          }

          router.setInput($(event.currentTarget).hasClass(__WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_FROM), feature.getGeometry().getCoordinates());
        }; // end of "routingHandler()"

        routeButtonWrapper = document.createElement('div');
        routeButtonWrapper.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_WRAPPER;

        routeFromButton = document.createElement('button');
        routeFromButton.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_FROM;
        jQuery(routeFromButton).click(routingHandler);
        routeButtonWrapper.appendChild(routeFromButton);

        routeFromButtonSpan = document.createElement('span');
        routeFromButtonSpan.innerHTML = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant_i18n_de__["a" /* langConstants */].POPUP_ROUTE_FROM;
        routeFromButton.appendChild(routeFromButtonSpan);

        routeToButton = document.createElement('button');
        routeToButton.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_TO;
        jQuery(routeToButton).click(routingHandler);
        routeButtonWrapper.appendChild(routeToButton);

        routeToButtonSpan = document.createElement('span');
        routeToButtonSpan.innerHTML = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant_i18n_de__["a" /* langConstants */].POPUP_ROUTE_TO;
        routeToButton.appendChild(routeToButtonSpan);
      }

      if (popupContent.trim() || router) {
        c4g.maps.popup.$content.html(popupContent);
        if (router) {
          c4g.maps.popup.$content.append(routeButtonWrapper);
        }
        if (feature.getGeometry() && feature.getGeometry() instanceof ol.geom.Point) {
          c4g.maps.popup.popup.setPosition(feature.getGeometry().getCoordinates());
        }
      } else {
        // hide popup if there is no valid content left
        c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
      }

      c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].LOADING);
      c4g.maps.popup.spinner.hide();
    } // end of "setPopup()"


  }, {
    key: "addPopUp",
    value: function addPopUp() {

      var popUpElement = void 0,
          popUpCloseElement = void 0,
          popUpContent = void 0,
          popup = void 0;

      popUpElement = document.createElement('div');
      popUpElement.setAttribute('id', 'c4g_popup_' + this.options.mapController.data.mapId);
      popUpElement.className = 'c4g-popup-wrapper';

      popUpCloseElement = document.createElement('button');
      popUpCloseElement.className = "c4g-popup-close c4g-icon";

      popUpContent = document.createElement('div');
      popUpContent.className = "c4g-popup-content";

      popUpElement.appendChild(popUpCloseElement);
      popUpElement.appendChild(popUpContent);

      jQuery(popUpCloseElement).click(function (event) {
        event.preventDefault();
        c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
      });

      popup = new ol.Overlay({
        element: popUpElement,
        positioning: 'bottom-left',
        offset: [-50, 0] /*,
                         autoPan: true,
                         autoPanAnimation: {
                         duration: 250
                         },
                         autoPanMargin: 20*/
      });

      c4g.maps.popup = {};
      c4g.maps.popup.popup = popup;
      // attach a spinner to the popup
      c4g.maps.popup.spinner = new __WEBPACK_IMPORTED_MODULE_3__c4g_maps_misc_spinner__["a" /* Spinner */]({ target: popUpElement });

      this.options.mapController.map.addOverlay(popup);

      c4g.maps.popup.$popup = jQuery(c4g.maps.popup.popup.getElement());
      c4g.maps.popup.$content = jQuery('.c4g-popup-content', c4g.maps.popup.$popup);
    } // end of "addPopUp()"


    /**
     * @TODO: [checkLocationStyles description]
     *
     * @param   {[type]}  opt_options  [description]
     *
     * @return  {[type]}               [description]
     */

  }, {
    key: "checkLocationStyles",
    value: function checkLocationStyles(opt_options) {

      var options,
          neededLayerStyles,
          getLayerStyles,
          self = this;

      if (opt_options && (typeof opt_options === "undefined" ? "undefined" : _typeof(opt_options)) === "object") {
        options = opt_options;
      } else {
        options = {};
      }

      this.locationStyleController.arrLocStyles = this.locationStyleController.arrLocStyles || {};

      neededLayerStyles = [];
      getLayerStyles = function getLayerStyles(layers) {
        var i, element, index;

        // ToDo: Rekursion integrieren (test mit forum)
        for (index in layers) {
          if (layers.hasOwnProperty(index)) {
            element = layers[index];

            if (element.content) {
              for (i = 0; i < element.content.length; i += 1) {

                if (element.content[i]) {
                  if (element.content[i].locationStyle && element.content[i].locationStyle !== "0" && neededLayerStyles.indexOf(element.content[i].locationStyle) === -1 && (!self.locationStyleController.arrLocStyles[element.content[i].locationStyle] || self.locationStyleController.arrLocStyles[element.content[i].locationStyle].style === undefined)) {
                    neededLayerStyles.push(element.content[i].locationStyle);
                  }
                }
              }
            }
          }
        }
      };

      getLayerStyles(this.layerController.arrLayers);

      if (neededLayerStyles.length > 0) {
        this.locationStyleController.loadLocationStyles(neededLayerStyles, options);
      } else {
        if (options.done && typeof options.done === "function") {
          options.done();
        }
      }
    } // end of "checkLocationStyles()"

  }, {
    key: "combineLayers",
    value: function combineLayers(proxy) {

      var i,
          j,
          k,
          layerId,
          layers,
          contentDataLayer,
          contentData,
          layer,
          layerGroups = [],
          source,
          style,
          features = [],
          styles = [],
          oneFeature,
          feature,
          vectorSource,
          clusterSource,
          vectorLayer;

      if (proxy.options.mapController.data.cluster_all === '1') {
        contentData = proxy.options.mapController.data;
        for (i in proxy.activeLayerIds) {
          //loop to get all layers
          layers = c4g.maps.layers[i];

          if (layers.type === "gpx") {
            continue;
          }

          if (layers && layers.vectorLayer) {
            if (layers.vectorLayer.getLayers() && layers.vectorLayer.getLayers().getArray()[0] && layers.vectorLayer.getLayers().getArray()[0].getSource() && layers.vectorLayer.getLayers().getArray()[0].getSource().getFeatures().length > 0) {
              proxy.options.mapController.map.removeLayer(layers.vectorLayer);
            }

            contentDataLayer = layers.content;
            layers.vectorLayer.getLayers().content = contentDataLayer;
            layerGroups.push(layers.vectorLayer.getLayers());
          }
        }
        for (k = 0; k < layerGroups.length; k++) {
          //loop to extract features from layers
          if (layerGroups[k].getArray().length > 0) {
            layer = layerGroups[k].getArray();
            source = layer["0"].getSource();
            style = layer["0"].getStyle();

            oneFeature = true;
            feature = source.getFeatures();
            for (j = 0; j < feature.length; j++) {
              //loop over all features from a source
              if (feature[j].get("features")) {
                for (i = 0; i < feature[j].get("features").length; i++) {
                  //loop for clustered features
                  if (layerGroups[k].content[j]) {
                    style = this.locationStyleController.arrLocStyles[layerGroups[k].content[j].locationStyle];
                  } else if (layerGroups[k].content[0]) {
                    style = this.locationStyleController.arrLocStyles[layerGroups[k].content[0].locationStyle];
                  }

                  feature[j].get("features")[i].setStyle(style.style);
                  if (!feature[j].get("features")[i].get('popup')) {
                    feature[j].get("features")[i].set('popup', layer['0'].popup);
                  }
                }
                features.push(feature[j].get("features"));

                oneFeature = false;
              }
            }
            if (oneFeature) {
              //single not clustered feature
              if (feature.length >= 1) {
                if (!feature['0'].get('popup')) {
                  feature['0'].set('popup', layer.popup);
                }
                features.push(feature);
              }
            }
          }
        }

        vectorSource = new ol.source.Vector({
          projection: 'EPSG:3857'

        });

        for (i = 0; i < features.length; i++) {
          vectorSource.addFeatures(features[i]);
        }

        clusterSource = new ol.source.Cluster({
          distance: 40,
          //threshold: 2, //minimum element count
          source: vectorSource
        });
        var styleForCluster = function styleForCluster(feature, resolution) {
          if (feature && feature.get('features') && feature.get('features')['0'].getStyle()) {
            style = feature.get('features')['0'].getStyle()(feature);
            if (feature !== undefined && feature !== null && feature.self !== window) {
              var fFeatures = feature.get('features');
              var size = fFeatures.length;
              if (size > 1) {
                if (!style) {
                  style = [];
                }

                // calculate bubble-offset
                var iconOffset = [0, 0];
                if (style[0]) {
                  if (typeof style[0].getImage().getRadius === "function") {
                    var radius = parseInt(style[0].getImage().getRadius(), 10);
                    if (radius) {
                      iconOffset = [0, radius];
                    }
                  } else if (typeof style[0].getImage().getAnchor === "function") {
                    iconOffset = style[0].getImage().getAnchor() || [0, 0];
                  }
                }

                var fillcolor = __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity('4975A8', {
                  unit: '%',
                  value: 70
                });

                if (contentData.cluster_fillcolor) {
                  fillcolor = __WEBPACK_IMPORTED_MODULE_4__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fillcolor, {
                    unit: '%',
                    value: 70
                  });
                }
                var fontcolor = contentData.cluster_fontcolor ? '#' + contentData.cluster_fontcolor : '#FFFFFF';

                style.push(new ol.style.Style({
                  text: new ol.style.Text({
                    text: "●",
                    font: "60px sans-serif",
                    offsetX: -1 * iconOffset[0],
                    offsetY: -1 * iconOffset[1],
                    fill: new ol.style.Fill({
                      color: fillcolor
                    })
                  })
                }));
                style.push(new ol.style.Style({
                  text: new ol.style.Text({
                    text: size.toString(),
                    offsetX: -1 * iconOffset[0],
                    offsetY: -1 * iconOffset[1] + 3,
                    fill: new ol.style.Fill({
                      color: fontcolor
                    })
                  })
                }));
              }
            }
          } else {
            if (feature && feature.get('features') && feature.get('features')['0'].getStyle()) {
              return feature.get('features')['0'].getStyle()(feature);
            } else {
              return null;
            }
          }
          return style;
        };

        //vectorLayer = self.getVectorLayer(clusterSource, styleForCluster);

        vectorLayer = new ol.layer.Vector({
          name: 'Cluster',
          source: clusterSource,
          style: styleForCluster

        });

        var allLayers = proxy.options.mapController.map.getLayers().getArray();
        var missingLayer = true;
        for (i = 0; i < allLayers.length; i++) {

          if (allLayers[i].clusters) {
            allLayers[i] = vectorLayer;
            missingLayer = false;
          }
        }
        if (missingLayer) {
          proxy.options.mapController.map.addLayer(vectorLayer);
        }
      }
    } //end of combineLayers


  }, {
    key: "checkLayerIsActiveForZoom",
    value: function checkLayerIsActiveForZoom(layerId, opt_zoom) {
      var layer, zoom, layerContent, locstyle;

      if (!this.layerController.arrLayers[layerId]) {
        return false;
      }

      layer = this.layerController.arrLayers[layerId];

      if (opt_zoom) {
        zoom = opt_zoom;
      } else if (this.options.mapController.map.getView().getZoom() > -1) {
        zoom = this.options.mapController.map.getView().getZoom();
      } else {
        zoom = false;
      }
      if (layer.zoom === undefined) {
        if (layer.content && layer.content.length > 0) {
          for (var i = 0; i < layer.content.length; i++) {
            layerContent = layer.content[i];
            if (layerContent.locationStyle) {
              locstyle = this.locationStyleController.arrLocStyles[layerContent.locationStyle];
              // TODO check all locstyles and take the most constraining zoom value
              if (locstyle) {
                layer.zoom = {};
                if (locstyle.maxzoom) {
                  layer.zoom.max = locstyle.maxzoom;
                }
                if (locstyle.minzoom) {
                  layer.zoom.min = locstyle.minzoom;
                }
                if (layer.zoom.max || layer.zoom.min) {
                  break;
                }
              }
            }
          }
        }
      }
      if (typeof zoom === "number" && layer.zoom && (layer.zoom.min > zoom || layer.zoom.max > 0 && layer.zoom.max < zoom)) {
        return false;
      }

      return true;
    } // end of "checkLayerIsActive()"

  }]);

  return MapProxy;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-maps-utils.js":
/*!***********************************************!*\
  !*** ./Resources/public/js/c4g-maps-utils.js ***!
  \***********************************************/
/*! exports provided: utils */
/*! exports used: utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return utils; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_control_zoomlevel__ = __webpack_require__(/*! ./c4g-maps-control-zoomlevel */ "./Resources/public/js/c4g-maps-control-zoomlevel.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};




(function ($, c4g) {
  'use strict';

  /**
   * c4g-Maps utility functions
   */

  c4g.maps.utils = $.extend(c4g.maps.utils, {
    /**
     *  Converts the first letter of a given string to uppercase, leaving the remaining string untouched.
     *
     *  @param    {string}    the string to capitalize
     *
     *  @return   {string}    the capitalized string
     */
    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    },

    /**
     * Generate an unique id.
     *
     * The id is 9 characters long and prefixed with an underscore.
     *
     * @return  {string}  The generated id.
     */
    getUniqueId: function getUniqueId() {
      // Math.random should be unique because of its seeding algorithm.
      // Convert it to base 36 (numbers + letters), and grab the first 9 characters
      // after the decimal.
      return '_' + Math.random().toString(36).substr(2, 9);
    },

    /**
     * Encode input strings for GeoJSON-Objects properly,
     * so they will not break the Code.
     * Transforms:
     *   \ -> \\;
     *   " -> '';
     *   Ä -> &Auml;
     *   ä -> &auml;
     *   Ö -> &Ouml;
     *   ö -> &ouml;
     *   Ü -> &Uuml;
     *   ü -> &uuml;
     *
     * @param   {string}  input  [description]
     *
     * @return  {string}         [description]
     */
    encodeGeoJsonProperty: function encodeGeoJsonProperty(input) {
      var output;

      if (!input) {
        return '';
      }

      output = input.replace(/\\/g, '\\\\').replace(/\"/g, '\'\'').replace(/Ä/g, '&Auml;').replace(/ä/g, '&auml;').replace(/Ö/g, '&Ouml;').replace(/ö/g, '&ouml;').replace(/Ü/g, '&Uuml;').replace(/ü/g, '&uuml;');

      return output;
    }, // end of encodeGeoJsonProperty()

    /**
     * Decode input strings for GeoJSON-Objects properly,
     * so they will be displayed correctly.
     * Transforms:
     *   \\     -> \;
     *   ''     -> ";
     *   &Auml; -> Ä
     *   &auml; -> ä
     *   &Ouml; -> Ö
     *   &ouml; -> ö
     *   &Uuml; -> Ü
     *   &uuml; -> ü
     *
     * @param   {string}  input  [description]
     *
     * @return  {string}         [description]
     */
    decodeGeoJsonProperty: function decodeGeoJsonProperty(input) {
      var output;

      if (!input) {
        return '';
      }
      if (typeof input !== "string") {
        input = input + "";
      }

      output = input.replace(/\\\\/g, '\\').replace(/\'\'/g, '\"').replace(/&Auml;/g, 'Ä').replace(/&auml;/g, 'ä').replace(/&Ouml;/g, 'Ö').replace(/&ouml;/g, 'ö').replace(/&Uuml;/g, 'Ü;').replace(/&uuml;/g, 'ü');

      return output;
    }, // end of decodeGeoJsonProperty()

    /**
     * Create or replace an URL-parameter.
     *
     * If `opt_getKey` is `false` or `undefined` the given parameter, `param`,
     * will be applied as "hash-parameter".
     * e.g.:
     *   https://myurl.de:port/path/to/maps#param
     * Note, that already existing "hash-parameters" will be overriden,
     * whereas existing "GET-parameters" stay untouched.
     *
     * If `opt_getKey` is set, it will be applied as "GET-parameter".
     * e.g.:
     *   https://myurl.de:port/path/to/maps?opt_getKey=param
     * If the key described by `opt_getKey` is already existing, its value will be overriden,
     * otherwise the key-value-pair will be appended appropriatly.
     * Already existing "hash-parameters" will stay untouched.
     *
     * If `opt_execute` is `false` or `undefined`, the function will return the new link as `string`,
     * otherwise the "href/location" will be changed directly in the browser, which can cause a pagereload.
     *
     * @param  {string}                    param        [description]
     * @param  {undefined|boolean|string}  opt_getKey   Default: `undefined`
     * @param  {undefined|boolean}         opt_execute  Default: `undefined`
     */
    setUrlParam: function setUrlParam(param, opt_getKey, opt_execute) {
      var link, searchParam, paramReplaced, i;

      if ((typeof param === "undefined" ? "undefined" : _typeof(param)) === undefined) {
        return false;
      }

      link = location.origin + location.pathname;

      if (!opt_getKey) {
        // use hash-parameter
        if (opt_execute) {
          location.hash = param;
          return true;
        }
        link += location.search + '#' + param;
      } else {
        // use GET-parameter
        if (location.search) {
          // there are already search-parameters
          paramReplaced = false;
          opt_getKey = opt_getKey.toLowerCase();
          // replace parameter if already existent
          searchParam = location.search.replace(/([^=\?\&]+)=([^&]+)/gi, function (match, key, value, offset, originString) {
            if (key === opt_getKey) {
              paramReplaced = true;
              return key + '=' + param;
            }
            return match;
          });
          // otherwise append as new parameter
          if (!paramReplaced) {
            searchParam += '&' + opt_getKey + '=' + param;
          }
        } else {
          // this will be the only search-parameter in the URL
          searchParam = '?' + opt_getKey + '=' + param;
        }
        if (opt_execute) {
          location.search = searchParam;
          return true;
        }
        link += searchParam + location.hash;
      }

      return link;
    }, // end of setUrlParam()

    /**
     * Get search or hash URL-parameter as string.
     *
     * If `opt_getKey` is `false` or `undefined`, the hash-parameter of the URL is returned,
     * otherwise it will search for a GET-parameter and return its value.
     *
     * If a parameter is not existent, or empty, an empty string will be returned.
     *
     * @param   {undefined|string}  opt_getKey  Default: `undefined`
     *
     * @return  {string}                        The found parameter.
     */
    getUrlParam: function getUrlParam(opt_getKey) {
      var param, regEx;

      if (!opt_getKey) {
        param = location.hash.substring(1);
      } else {
        if (!location.search) {
          param = '';
        } else {
          regEx = new RegExp('[\?\&]' + opt_getKey + '=([^&]+)', 'i');
          param = regEx.exec(location.search);
          param = param ? param[1] : '';
        }
      }

      return param;
    }, // end of getUrlParam()

    /**
     * Delta-encode an array of numbers.
     * Note that the array will be sorted (lowest to highest)
     * before encoding.
     *
     * So after the encoding the first value of the output contains
     * the smallest number of the set and each following number just
     * represents the offset to its previous neighbor.
     *
     * This is mostly efficient for high numbers, that are "close to each other".
     *
     * Example:
     *   [1337, 11, 101, 123, 96, 69, 42, 42]
     *   will be sorted
     *   [11, 42, 42, 69, 96, 101, 123, 1337]
     *   and encoded to
     *   [11, 31, 0, 27, 27, 5, 22, 1214]
     *
     * @param   {array<numbers>}  arrInput  [description]
     *
     * @return  {array<numbers>}            [description]
     */
    deltaEncode: function deltaEncode(arrInput) {
      var arrOutput, i;

      if (!arrInput) {
        return [];
      }
      if (arrInput.length === 1) {
        return arrInput;
      }

      arrInput.sort(function (a, b) {
        return a - b;
      });

      arrOutput = [];
      arrOutput[0] = arrInput[0];
      for (i = 1; i < arrInput.length; i += 1) {
        arrOutput[i] = arrInput[i] - arrInput[i - 1];
      }

      return arrOutput;
    }, // end of deltaEncode()

    /**
     * Decode a delta-encoded array.
     * See `deltaEncode` function for more detailed information.
     *
     * @param   {array<numbers>}  arrInput  [description]
     *
     * @return  {array<numbers>}            [description]
     */
    deltaDecode: function deltaDecode(arrInput) {
      var arrOutput, i;

      if (!arrInput) {
        return [];
      }

      arrOutput = [];
      arrOutput[0] = parseInt(arrInput[0], 10);
      if (isNaN(arrInput[0])) {
        return [];
      }
      for (i = 1; i < arrInput.length; i += 1) {
        arrOutput[i] = parseInt(arrInput[i], 10) + arrOutput[i - 1];
        if (isNaN(arrOutput[i])) {
          return [];
        }
      }

      return arrOutput;
    }, // end of deltaDecode()

    /**
     * Check and call functions in `arrHookFunctions` with given `parameters`.
     *
     * @param   {array<function>}   arrHookFunctions  [description]
     * @param   {mixed}             parameters        [description]
     */
    callHookFunctions: function callHookFunctions(arrHookFunctions, parameters) {
      var j;

      if (arrHookFunctions && arrHookFunctions.length > 0) {
        for (j = 0; j < arrHookFunctions.length; j += 1) {
          if (typeof arrHookFunctions[j] === 'function') {
            arrHookFunctions[j](parameters);
          }
        }
      }
    }, // end of "callHookFunctions()"

    /**
     * Convert a hex-formated color value into rgba()-format.
     *
     * @param   {string|number}  hex          [description]
     * @param   {string|number}  opt_opacity  [description]
     *
     * @return  {string}                      [description]
     */
    getRgbaFromHexAndOpacity: function getRgbaFromHexAndOpacity(hex, opt_opacity, opt_array) {

      var bigint, r, g, b, a;

      bigint = parseInt(hex, 16);
      if (opt_opacity && opt_opacity.value) {
        opt_opacity.value = parseInt(opt_opacity.value);
      }

      if (opt_opacity && typeof opt_opacity !== 'number') {
        if ((typeof opt_opacity === "undefined" ? "undefined" : _typeof(opt_opacity)) === 'object' && opt_opacity.value) {
          opt_opacity = opt_opacity.value;
        } else {
          opt_opacity = 100;
        }
      }

      r = bigint >> 16 & 255;
      g = bigint >> 8 & 255;
      b = bigint & 255;
      a = opt_opacity ? opt_opacity / 100 : 1;
      if (opt_array) {
        return [r, g, b, a];
      }

      return "rgba(" + r + "," + g + "," + b + "," + a + ")";
    },

    /**
     * Reduce a defined style, to a simpler version.
     *
     * The reduced style is the first style of the defined styleset,
     * with a 1px thick stroke and a circle with a 5px radius.
     *
     * This can be used to display additional geometries with a main-geometry,
     * without having to define a whole new style.
     *
     * @param   {number|string}           styleId  [description]
     *
     * @return  {array<ol.style.Style>}            [description]
     */
    reduceStyle: function reduceStyle(styleId) {
      var style, reducedStyle, fillStyle, strokeStyle;

      if (!c4g.maps.locationStyles[styleId] || !c4g.maps.locationStyles[styleId].style) {
        return [];
      }

      style = c4g.maps.locationStyles[styleId].style()[0];

      fillStyle = style.getFill();
      strokeStyle = style.getStroke();
      strokeStyle.setWidth(1);

      reducedStyle = new ol.style.Style({
        image: new ol.style.Circle({
          fill: fillStyle,
          stroke: strokeStyle,
          radius: 5
        }),
        // text: style.getText(),
        stroke: strokeStyle,
        fill: fillStyle
      });

      return [reducedStyle];
    }, // end of "reduceStyle"

    /**
     * Measure the dimensions of the given geometry.
     *
     * If the geometry is a `LineString` the function will measure its length,
     * is it a `Polygon` it will measure the acreage,
     * otherwise it will return `0`.
     *
     * If the optional `opt_forceLineMeasure` parameter is `true`
     * and the geometry is a `Polygon` it will measure its perimeter instead
     * of its acreage.
     *
     * @param   {ol.geom.LineString|ol.geom.Polygon}   geometry              [description]
     * @param   {undefined|boolean}                    opt_forceLineMeasure  [description]
     *
     * @return  {array<string>|number}                                       [description]
     */
    measureGeometry: function measureGeometry(geometry, opt_forceLineMeasure, opt_forceSurfaceMeasure) {
      var value, sphere, coordinates, coord1, coord2, result, i;

      if (!geometry) {
        return false;
      }

      //sphere = new ol.Sphere(6378137);
      result = {};

      if (geometry instanceof ol.geom.LineString || geometry instanceof ol.geom.Polygon && opt_forceLineMeasure) {

        coordinates = geometry.getCoordinates();
        if (geometry instanceof ol.geom.Polygon) {
          coordinates = coordinates[0];
        }
        value = 0;
        for (i = 0; i < coordinates.length - 1; i += 1) {
          coord1 = ol.proj.transform(coordinates[i], 'EPSG:3857', 'EPSG:4326');
          coord2 = ol.proj.transform(coordinates[i + 1], 'EPSG:3857', 'EPSG:4326');
          value += ol.sphere.getDistance(coord1, coord2, 6378137);
        }
        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (value > 1000) {
          result.htmlValue = (Math.round(value / 1000 * 100) / 100).toFixed(2) + ' ' + 'km';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm';
        }
      } else if (geometry instanceof ol.geom.Polygon) {
        //geometry = /** @type {ol.geom.Polygon} */(geometry.clone().transform('EPSG:3857', 'EPSG:4326'));
        //coordinates = geometry.getLinearRing(0).getCoordinates();
        value = Math.abs(ol.sphere.getArea(geometry));
        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (value > 10000) {
          result.htmlValue = (Math.round(value / 1000000 * 100) / 100).toFixed(2) + ' ' + 'km<sup>2</sup>';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm<sup>2</sup>';
        }
      } else if (geometry instanceof ol.geom.Circle && opt_forceSurfaceMeasure) {
        var center = geometry.getCenter();
        var radius = geometry.getRadius();
        var edgeCoordinate = [center[0] + radius, center[1]];
        //var wgs84Sphere = new ol.Sphere(6378137);
        var value = ol.sphere.getDistance(ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'), ol.proj.transform(edgeCoordinate, 'EPSG:3857', 'EPSG:4326'), 6378137);

        value = Math.PI * Math.sqrt(value);

        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (value > 10000) {
          result.htmlValue = (Math.round(value / 1000000 * 100) / 100).toFixed(2) + ' ' + 'km<sup>2</sup>';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm<sup>2</sup>';
        }
      } else if (geometry instanceof ol.geom.Circle) {
        var center = geometry.getCenter();
        var radius = geometry.getRadius();
        var edgeCoordinate = [center[0] + radius, center[1]];
        //var wgs84Sphere = new ol.Sphere(6378137);
        var value = ol.sphere.getDistance(ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'), ol.proj.transform(edgeCoordinate, 'EPSG:3857', 'EPSG:4326'), 6378137);

        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (result.rawValue > 10000) {
          result.htmlValue = (Math.round(value * 100 / 100) / 1000).toFixed(2) + ' ' + 'km';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm';
        }
      } else {
        result = 0;
      }

      return result;
    },

    /**
     * Calculate extent for an array of geometries.
     *
     * @param   {Array.<ol.geom.simpleGeometry>}  arrGeometries  [description]
     *
     * @return  {ol.Extent}                                      [description]
     */
    getExtentForGeometries: function getExtentForGeometries(arrGeometries) {
      var extentSource;

      if (!arrGeometries) {
        console.warn('Geometries missing for extent calculation');
        return false;
      }

      extentSource = new ol.source.Vector();
      extentSource.addFeatures(arrGeometries);

      return extentSource.getExtent() || ol.Extent([0, 0, 0, 0]);
    }, // end of getExtentForGeometries()

    /**
     * Fit view of `map` to a given array of `extents`.
     * Animated if `opt_animationDuration` is an integer > 0.
     *
     * @param   {object}     extents                 [description]
     * @param   {ol.Map}     map                    [description]
     * @param   {integer}    opt_animationDuration  [description]
     *
     * @return  {boolean}                           [description]
     */
    fitToExtents: function fitToExtents(extents, map, opt_padding, opt_animationDuration) {
      var view, padding, extent, key;

      if (!extents || !map) {
        console.warn('Missing extent or map for fitExtent');
        return false;
      }
      //extent = ol.extent.createEmpty();

      for (key in extents) {
        if (extents.hasOwnProperty(key)) {
          if (typeof extent === "undefined") {
            extent = extents[key];
          } else {
            ol.extent.extend(extent, extents[key]);
          }
        }
      }

      this.fitToExtent(extent, map, opt_padding, 5, 0, 0, 2);
    }, // end of fitToExtents

    /**
     * Fit view of `map` to a given `extent`.
     * Animated if `opt_animationDuration` is an integer > 0.
     *
     * @param   {ol.Extent}  extent                 [description]
     * @param   {ol.Map}     map                    [description]
     * @param   {array}      opt_padding            [description]
     * @param   {integer}    opt_animationDuration  [description]
     * @param   {integer}    opt_minZoom            [description]
     * @param   {integer}    opt_maxZoom            [description]
     * @param   {integer}    opt_minResolution      [description]
     *
     * @return  {boolean}                           [description]
     */
    fitToExtent: function fitToExtent(extent, map, opt_padding, opt_animationDuration, opt_minZoom, opt_maxZoom, opt_minResolution) {
      var view, padding, fitOptions;

      if (!extent || !map) {
        console.warn('Missing extent or map for fitExtent');
        return false;
      }

      view = map.getView();

      fitOptions = {
        'padding': opt_padding || [25, 25, 25, 25]
      };

      if (opt_minResolution && opt_minResolution > 0) {
        fitOptions.minResolution = opt_minResolution;
      }

      if (opt_minZoom && opt_minZoom >= 0) {
        fitOptions.minZoom = opt_minZoom;
      }

      if (opt_maxZoom && opt_maxZoom >= 0) {
        fitOptions.maxZoom = opt_maxZoom;
      }

      // animate the "fitting" when a duration is given and its greater than 0
      if (opt_animationDuration && opt_animationDuration > 0) {
        view.animate({
          start: +new Date(),
          duration: opt_animationDuration,
          resolution: view.getResolution(),
          center: [0, 0]
          //rotation: Math.PI
        });
        // map.beforeRender(
        //     ol.animation.pan({
        //       start: +new Date(),
        //       duration: opt_animationDuration,
        //       source: view.getCenter()
        //     }),
        //     ol.animation.zoom({
        //       start: +new Date(),
        //       duration: opt_animationDuration,
        //       resolution: view.getResolution()
        //     })
        // );
      }

      try {
        view.fit(extent, map.getSize(), { padding: [25, 25, 25, 25] });
        //view.fit(extent, map.getSize());
        //view.setZoom(view.getZoom()-1);
        return true;
      } catch (e) {
        return false;
      }
    }, // end of fitToExtent()

    /**
     * Convenience function to run all placeholder functions at once.
     *
     * @param   {string}                      strInput   [description]
     * @param   {ol.Feature}                  feature    [description]
     * @param   {ol.layer.Layer | undefined}  opt_layer  [description]
     *
     * @return  {string}                                 [description]
     */
    replaceAllPlaceholders: function replaceAllPlaceholders(strInput, feature, opt_layer) {
      var strOutput;

      // only check the first two parameters as they will be used by all placeholder-functions
      // -> for performance
      if (!strInput || !feature) {
        return strInput;
      }

      strOutput = this.replaceFunctionPlaceholders(strInput, feature, opt_layer);
      strOutput = this.replaceEditorVarsPlaceholders(strOutput, feature);
      strOutput = this.replaceAttributePlaceholders(strOutput, feature);

      return strOutput;
    }, // end of replaceAllPlaceholders()

    /**
     * Replace every occurance of `${FNfunctionName}`, in `strInput`,
     * with the result of `window.functionName(feature, style)`, if it exist.
     * Otherwise the placeholder will be simply removed (/replaced with '').
     * Style will be taken either from the feature, or the layer.
     *
     * @param   {string}          strInput  [description]
     * @param   {ol.Feature}      feature   [description]
     * @param   {ol.layer.Layer}  layer     [description]
     *
     * @return  {string}                    [description]
     */
    replaceFunctionPlaceholders: function replaceFunctionPlaceholders(strInput, feature, layer) {
      var strOutput;

      if (!strInput || !feature || !layer) {
        return strInput;
      }

      strOutput = strInput.replace(/\$\{FN([^\}]*)\}/g, function (match, functionName, offset, originString) {
        var style;

        // check if function exists
        if (typeof window[functionName] === 'function') {
          // search style
          if (typeof feature.getStyle === 'function' && feature.getStyle() && typeof feature.getStyle() === 'function') {
            style = feature.getStyle();
          } else if (typeof layer.getStyle === 'function' && layer.getStyle()) {
            style = layer.getStyle();
          } else {
            return '';
          }
          return window[functionName](feature, style);
        }
        return '';
      }); // end of replace()

      return strOutput;
    }, // end of replaceFunctionPlaceholders()

    /**
     * Replace placeholders, in `strInput`, for variables set by the geoEditor.
     * Valid placeholders are: ([key] represents the stringname of the variables key)
     *   `${EL[key]}`   =>  Label for the variable
     *   `${EVL[key]}`  =>  Label for the variable, if a value is set too
     *   `${EV[key]}`   =>  Value of the variable
     *   `${EVV[key]}`  =>  Same as `${EV[key]}`
     *
     * If no appropriate value can be found for a placeholder
     * it will simply be removed (/replaced with '').
     *
     * @param   {string}      strInput  [description]
     * @param   {ol.Feature}  feature   [description]
     *
     * @return  {string}                [description]
     */
    replaceEditorVarsPlaceholders: function replaceEditorVarsPlaceholders(strInput, feature) {
      var strOutput;

      if (!strInput || !feature || typeof feature.get !== 'function') {
        return strInput;
      }

      strOutput = strInput.replace(/\$\{(EV?[LV])([^\}]*)\}/g, function (match, type, evKey, offset, originString) {
        var editorVars, i;

        // check if feature has editorVars
        if (feature.get('editorVars')) {
          editorVars = feature.get('editorVars');
          // search for editorVar with key == evKey
          for (i = 0; i < editorVars.length; i += 1) {
            if (editorVars[i].key === evKey) {
              // if type is 'EVL' display label only if a value is set too
              if (type === 'EL' || type === 'EVL' && editorVars[i].value) {
                return editorVars[i].label;
              } else {
                return editorVars[i].value;
              }
            }
          }
        }
        return '';
      }); // end of replace()

      return strOutput;
    }, // end of replaceEditorVarsPlaceholders()

    /**
     * Replace every occurance of `${attr}`, in `strInput`,
     * with the result of `feature.get(attr)`, if it exist.
     * Otherwise the placeholder will be simply removed (/replaced with '').
     *
     * @param   {string}      strInput  [description]
     * @param   {ol.Feature}  feature   [description]
     *
     * @return  {string}                [description]
     */
    replaceAttributePlaceholders: function replaceAttributePlaceholders(strInput, feature) {
      var strOutput;

      if (!strInput || !feature || typeof feature.get !== 'function') {
        return strInput;
      }

      strOutput = strInput.replace(/\$\{([^\}]*)\}/g, function (match, attr, offset, originString) {
        return feature.get(attr) || '';
      }); // end of replace()

      return strOutput;
    }, // end of replaceAttributePlaceholders()

    objectToArray: function objectToArray(object) {
      if (object && (typeof object === "undefined" ? "undefined" : _typeof(object)) === 'object') {
        object = Object.keys(object).map(function (key) {
          return object[key];
        });
      }
      return object;
    }, // end of objectToArray()

    getVectorLayer: function getVectorLayer(source, style) {
      var fnStyle;

      // make sure that the style is a function
      if (typeof style === 'function') {
        fnStyle = style;
      } else if (style !== undefined) {
        fnStyle = function fnStyle() {
          return style;
        };
      }

      return new ol.layer.Vector({
        source: source,
        style: fnStyle
      });
    },
    // end of "getVectorLayer()"

    /**
     * Extracts the subdomain from the current request host and returns it.
     * @returns {string | *}
     */
    getCurrentSubdomain: function getCurrentSubdomain() {
      return window.location.href;
    },


    redrawMapView: function redrawMapView(mapController) {
      var mapData = mapController.data;
      var controlContainerTopLeft = document.createElement('div');
      controlContainerTopLeft.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TL + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
      mapController.$overlaycontainer_stopevent.prepend(controlContainerTopLeft);

      var controlContainerBottomLeft = document.createElement('div');
      controlContainerBottomLeft.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
      $(controlContainerTopLeft).after(controlContainerBottomLeft);
      mapController.leftSlideElements.push(controlContainerBottomLeft);

      var controlContainerBottomLeftSub = document.createElement('div');
      controlContainerBottomLeftSub.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL_SUB + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;

      if (mapData.scaleline) {
        mapController.map.removeControl(mapController.controls.scaleline);
        mapController.controls.scaleline = new ol.control.ScaleLine({
          mapView: mapController.map.getView(),
          target: controlContainerBottomLeft,
          undefinedHTML: 'N/A'
        });
        mapController.map.addControl(mapController.controls.scaleline);
      }

      $(controlContainerBottomLeft).append(controlContainerBottomLeftSub);

      if (mapData.zoomlevel) {
        mapController.map.removeControl(mapController.controls.zoomlevel);
        mapController.controls.zoomlevel = new __WEBPACK_IMPORTED_MODULE_1__c4g_maps_control_zoomlevel__["a" /* Zoomlevel */]({
          mapView: mapController.map.getView(),
          target: controlContainerBottomLeftSub,
          undefinedHTML: 'N/A'
        });
        mapController.map.addControl(mapController.controls.zoomlevel);
      }

      if (mapData.mouseposition) {
        mapController.map.removeControl(mapController.controls.mouseposition);
        mapController.controls.mouseposition = new ol.control.MousePosition({
          projection: 'EPSG:4326',
          coordinateFormat: ol.coordinate.toStringHDMS,
          target: controlContainerBottomLeftSub,
          undefinedHTML: 'N/A'
        });
        mapController.map.addControl(mapController.controls.mouseposition);
      }
    },
    getValue: function getValue(key) {
      return localStorage[key] || '';
    },
    storeValue: function storeValue(key, value) {
      localStorage[key] = value; // only strings
    }
  });
})(jQuery, this.c4g);

var utils = this.c4g.maps.utils;

/***/ }),

/***/ "./Resources/public/js/c4g-maps.js":
/*!*****************************************!*\
  !*** ./Resources/public/js/c4g-maps.js ***!
  \*****************************************/
/*! exports provided: MapController */
/*! exports used: MapController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MapController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_proxy__ = __webpack_require__(/*! ./c4g-maps-proxy */ "./Resources/public/js/c4g-maps-proxy.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_misc_spinner__ = __webpack_require__(/*! ./c4g-maps-misc-spinner */ "./Resources/public/js/c4g-maps-misc-spinner.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_maphover__ = __webpack_require__(/*! ./c4g-maps-misc-maphover */ "./Resources/public/js/c4g-maps-misc-maphover.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__c4g_maps_control_portside_router__ = __webpack_require__(/*! ./c4g-maps-control-portside-router */ "./Resources/public/js/c4g-maps-control-portside-router.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__c4g_maps_control_portside_measuretools__ = __webpack_require__(/*! ./c4g-maps-control-portside-measuretools */ "./Resources/public/js/c4g-maps-control-portside-measuretools.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__c4g_maps_control_print__ = __webpack_require__(/*! ./c4g-maps-control-print */ "./Resources/public/js/c4g-maps-control-print.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__c4g_maps_control_grid__ = __webpack_require__(/*! ./c4g-maps-control-grid */ "./Resources/public/js/c4g-maps-control-grid.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__c4g_maps_control_zoomlevel__ = __webpack_require__(/*! ./c4g-maps-control-zoomlevel */ "./Resources/public/js/c4g-maps-control-zoomlevel.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__c4g_maps_control_overviewmap__ = __webpack_require__(/*! ./c4g-maps-control-overviewmap */ "./Resources/public/js/c4g-maps-control-overviewmap.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__c4g_maps_control_permalink__ = __webpack_require__(/*! ./c4g-maps-control-permalink */ "./Resources/public/js/c4g-maps-control-permalink.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__c4g_maps_control_starboard__ = __webpack_require__(/*! ./c4g-maps-control-starboard */ "./Resources/public/js/c4g-maps-control-starboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__c4g_maps_control_portside_editor__ = __webpack_require__(/*! ./c4g-maps-control-portside-editor */ "./Resources/public/js/c4g-maps-control-portside-editor.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__c4g_maps_control_portside_account__ = __webpack_require__(/*! ./c4g-maps-control-portside-account */ "./Resources/public/js/c4g-maps-control-portside-account.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__c4g_maps_interaction_geopicker__ = __webpack_require__(/*! ./c4g-maps-interaction-geopicker */ "./Resources/public/js/c4g-maps-interaction-geopicker.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};

//for jslint
/*jslint browser:true*/
/*jslint todo:true */
/*global window*/
/*global ol*/
/*global Browser*/
/*global Document:true */
/*global jQuery*/
var c4g = this.c4g;



















(function ($, c4g) {
    'use strict';

    /**
     * [MapController description]
     * @param {json-object}  mapData  Object to configure con4gis-maps.
     *                                See "docs/mapData-values.md"
     *                                to get a list of valid values for this object.
     */

    c4g.maps.MapController = function (mapData) {

        //---
        this.map = null;
        // this.controls = null;
        this.leftSlideElements = [];
        this.rightSlideElements = [];

        var self = this,
            permalink = false,
            minZoom,
            maxZoom,
            view,
            geoLocation,
            controls = [],
            interactions = [],
            _displayAllLocations,
            domMapDiv,
            kinetic,
            controlContainerTopLeft,
            controlContainerBottomLeft,
            controlContainerTopRight,
            controlContainerBottomRight,
            controlContainerBottomLeftSub,
            starboard_label,
            logoLink,
            logoGraphic,
            removeElement,
            enableStarboard = true;

        //--
        mapData = $.extend({
            api: {},
            addIdToDiv: false,
            mapId: 1,
            mapDiv: 'c4g_map',
            center: {},
            calc_extent: 'CENTERZOOM',
            attribution: {},
            editor: {},
            measuretools: {},
            infopage: {},
            account: '',
            starboard: {},
            layerswitcher: {},
            baselayerswitcher: {},
            geosearch: {},
            additionalPanel: {}
        }, mapData);
        if (mapData.calc_extent === 'LOCATIONS') {
            mapData = $.extend({
                min_gap: 25
            }, mapData);
        }

        // center
        mapData.center = $.extend({
            lat: 52.22,
            lon: 9.43,
            rotation: 0,
            zoom: 6
        }, mapData.center);
        // attribution
        mapData.attribution = $.extend({
            enable: true,
            collapsed: false
        }, mapData.attribution);
        // geosearch
        mapData.geosearch = $.extend({
            enable: false,
            div: false
        }, mapData.geosearch);
        // permalink
        mapData.permalink = $.extend({
            enable: false,
            get_parameter: false
        }, mapData.permalink);
        this.data = mapData;
        if (mapData.addIdToDiv) {
            mapData.mapDiv += '_' + mapData.mapId;
        }
        // PHPStorm marks this as error, but it is none
        // This is needed for preventing an error with the OSM-Overpass API
        // which occurs when MooTools is loaded
        if (window.MooTools && Browser.Document) {
            Document = Browser.Document;
        }
        this.proxy = new __WEBPACK_IMPORTED_MODULE_0__c4g_maps_proxy__["a" /* MapProxy */]({ mapController: this });

        // check permalink
        if (mapData.permalink.enable) {
            permalink = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getUrlParam(mapData.permalink.get_parameter);

            if (permalink) {
                permalink = permalink.split('/');
                switch (permalink.length) {
                    case 6:
                        permalink[0] = parseFloat(permalink[0]);
                        mapData.center.lon = !isNaN(permalink[0]) ? permalink[0] : mapData.center.lon;
                        permalink[1] = parseFloat(permalink[1]);
                        mapData.center.lat = !isNaN(permalink[1]) ? permalink[1] : mapData.center.lat;
                        permalink[2] = parseInt(permalink[2], 10);
                        mapData.center.zoom = !isNaN(permalink[2]) ? permalink[2] : mapData.center.zoom;
                        permalink[3] = parseFloat(permalink[3]);
                        mapData.center.rotation = !isNaN(permalink[3]) ? permalink[3] : mapData.center.rotation;
                        permalink[4] = parseInt(permalink[4], 10);
                        mapData.baselayer = !isNaN(permalink[4]) ? permalink[4] : mapData.baselayer;
                        mapData.layers = permalink[5].split(':');
                        // decode deltaEncoding
                        mapData.layers = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].deltaDecode(mapData.layers);
                        break;
                    case 2:
                        // baselayer and layers only
                        permalink[0] = parseInt(permalink[0], 10);
                        mapData.baselayer = !isNaN(permalink[0]) ? permalink[0] : mapData.baselayer;
                        mapData.layers = permalink[1].split(':');
                        // decode deltaEncoding
                        mapData.layers = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].deltaDecode(mapData.layers);
                        break;
                    case 1:
                        // layers only
                        mapData.layers = permalink[0].split(':');
                        // decode deltaEncoding
                        mapData.layers = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].deltaDecode(mapData.layers);
                        break;
                    default:
                        // invalid count of permalink parameters
                        permalink = false;
                }
                if (mapData.layers.length < 1) {
                    mapData.layers = false;
                    permalink = false;
                }
            } else {
                // just to make sure this var is really "false"
                permalink = false;
            }
        }

        if (mapData.minZoom && mapData.minZoom > 0) {
            minZoom = mapData.minZoom;
        } else {
            minZoom = 0;
        }

        if (mapData.maxZoom && mapData.maxZoom > 0) {
            maxZoom = mapData.maxZoom;
        } else {
            maxZoom = 19;
        }

        if (mapData.caching) {
            if (__WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getValue('lon') && __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getValue('lat')) {
                mapData.center.lon = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getValue('lon');
                mapData.center.lat = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getValue('lat');
            }

            if (__WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getValue('zoom')) {
                mapData.center.zoom = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getValue('zoom');
            }
        }

        view = new ol.View({
            // projection: ol.proj.get('EPSG:4326'),
            // center: [parseFloat(mapData.center_lon), parseFloat(mapData.center_lat)],
            // minResolution: undefined,
            // maxResolution: undefined,
            center: ol.proj.transform([parseFloat(mapData.center.lon), parseFloat(mapData.center.lat)], 'EPSG:4326', 'EPSG:3857'),
            zoom: parseInt(mapData.center.zoom, 10),
            minZoom: parseInt(minZoom, 10),
            maxZoom: parseInt(maxZoom, 10),
            rotation: parseFloat(mapData.center.rotation)
        });

        // check userposition
        if (mapData.geolocation && !permalink) {
            geoLocation = new ol.Geolocation({
                //tracking: !mapData.geopicker,
                tracking: true,
                projection: view.getProjection()
            });
            geoLocation.on('change', function (evt) {
                if (geoLocation) {
                    view.setCenter(geoLocation.getPosition());
                    if (mapData.geolocation_zoom) {
                        view.setZoom(parseInt(mapData.geolocation_zoom, 10));
                    }
                    geoLocation.setTracking(false);
                    if (self.map) {
                        self.map.setView(view);
                        if (self.$overlaycontainer_stopevent) {
                            __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].redrawMapView(self);
                        }
                    }
                }
            });
        }

        // enable default Controls/Interactions if there is no profile
        // [note]: maybe change this in the future? -> "no default"-option?
        if (!mapData.profile) {
            controls = ol.control.defaults();
            interactions = ol.interaction.defaults();
        }

        // set default base layer when backend geopicker is enabled
        if (mapData.geopicker && mapData.geopicker.type === "backend") {
            if (mapData.default_baselayer) {
                this.proxy.hook_baselayer_loaded.push(function (baselayerIds) {
                    self.proxy.baselayerController.showBaseLayer(mapData.default_baselayer);
                });
            } // end inner if
            this.map = new ol.Map({
                controls: controls,
                interactions: interactions,
                layers: [new ol.layer.Group({
                    title: 'Base maps',
                    layers: [],
                    checkSum: 'baseMapsLayer'
                })],
                loadTilesWhileAnimating: true,
                target: mapData.mapDiv,
                view: view
            });
        } else {
            // initialize Map
            //

            if (mapData.default_baselayer) {
                this.proxy.hook_baselayer_loaded.push(function (baselayerIds) {
                    if (mapData.baselayer && baselayerIds.indexOf(mapData.baselayer.toString()) > -1) {
                        mapData.default_baselayer = mapData.baselayer;
                    }

                    if (mapData.caching) {
                        if (__WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getValue('baselayer')) {
                            mapData.default_baselayer = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getValue('baselayer');
                        }
                    }

                    self.proxy.baselayerController.showBaseLayer(mapData.default_baselayer);
                });
            }
            this.map = new ol.Map({
                controls: controls,
                interactions: interactions,
                layers: [new ol.layer.Group({
                    title: 'Base maps',
                    layers: [],
                    checkSum: 'baseMapsLayer'
                })],
                loadTilesWhileAnimating: true,
                target: mapData.mapDiv,
                view: view
            });
        }

        mapData.map = this.map;

        // set extent to make all locations visible if wanted
        if (mapData.calc_extent === "LOCATIONS") {
            _displayAllLocations = function displayAllLocations(layerIds) {
                var layers = self.proxy.layerController.arrLayers,
                    layer,
                    geometry,
                    coords,
                    padding,
                    coordinates,
                    extent,
                    featureList,
                    featureArray,
                    key,
                    vectorArray,
                    layerGroup,
                    center;
                // delete function from hook array
                delete this[this.indexOf(_displayAllLocations)];
                coordinates = [];
                // calculate resulting extent of all geometries
                for (key in layers) {
                    if (layers.hasOwnProperty(key)) {
                        layer = layers[key];
                        if (layer.type == "overpass") {
                            continue;
                        }
                        vectorArray = layer.content;
                        if (vectorArray === undefined) {
                            // catch case of linked layers
                            continue;
                        }
                        if ((typeof vectorArray === "undefined" ? "undefined" : _typeof(vectorArray)) === "object") {
                            vectorArray = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].objectToArray(vectorArray);
                        }
                        layerGroup = layer.vectorLayer;
                        if (vectorArray && vectorArray.forEach && typeof vectorArray.forEach === 'function') {
                            vectorArray.forEach(function (vectorLayer) {
                                if (vectorLayer && vectorLayer.data && vectorLayer.data.geometry && vectorLayer.data.geometry.coordinates) {
                                    if (vectorLayer.data.geometry.type === "Point") {
                                        coords = ol.proj.transform([parseFloat(vectorLayer.data.geometry.coordinates[0]), parseFloat(vectorLayer.data.geometry.coordinates[1])], 'EPSG:4326', 'EPSG:3857');
                                        if (coords[0] == "Infinity" || coords[0] == "-Infinity") {
                                            return;
                                        }
                                        geometry = new ol.geom.Point(coords);
                                        coordinates.push(geometry.getCoordinates());
                                    }
                                }
                            });
                        }
                        if (layerGroup) {
                            // handle more complex geometries
                            featureList = layerGroup.getLayers();
                            featureArray = featureList.getArray();
                            featureArray.forEach(function (feature) {
                                if (layer.type === "kml") {
                                    var source = feature.getSource();
                                    //var sourceFeatures = source.getFeatures();
                                    source.getExtent().forEach(function (coordinate) {
                                        coordinates.push(coordinate);
                                    });
                                } else {
                                    coordinates.push(ol.extent.getTopRight(feature.getSource().getExtent()));
                                    coordinates.push(ol.extent.getTopLeft(feature.getSource().getExtent()));
                                    coordinates.push(ol.extent.getBottomRight(feature.getSource().getExtent()));
                                    coordinates.push(ol.extent.getBottomLeft(feature.getSource().getExtent()));
                                }
                            });
                        }
                    }
                }
                extent = ol.extent.boundingExtent(coordinates);
                if (extent[0] == "Infinity" || extent[0] == "-Infinity") {
                    return;
                }
                //TODO: catch case min_gap is already an array
                padding = [mapData.min_gap, mapData.min_gap, mapData.min_gap, mapData.min_gap];
                self.map.getView().fit(extent, self.map.getSize(), { padding: padding });
                center = self.map.getView().getCenter();
                if (isNaN(center[0])) {
                    self.map.getView().setCenter([50, 10]);
                    self.map.getView().setZoom(mapData.minZoom || 10);
                }
            };
            this.proxy.hook_layer_visibility.push(_displayAllLocations);
        }

        // set map-size and -margin
        domMapDiv = document.getElementById(mapData.mapDiv);

        if (domMapDiv && domMapDiv.style) {
            if (mapData.width) {
                domMapDiv.style.width = mapData.width;
            }
            if (mapData.height) {
                domMapDiv.style.height = mapData.height;
            }
            if (mapData.margin) {
                domMapDiv.style.margin = mapData.margin;
            }
        } else {
            console.warn('can not get element by id mapData.mapDiv');
            return;
        }

        this.map.updateSize();
        this.proxy.initialize();
        // this.proxy.loadBaseLayers();
        // this.proxy.loadLayers();
        // ---

        // save overlaycontainer
        this.$overlaycontainer_stopevent = $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_OVERLAYCONTAINER_SE);
        // add Spinner
        this.spinner = new __WEBPACK_IMPORTED_MODULE_3__c4g_maps_misc_spinner__["a" /* Spinner */]({ className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].LARGE });
        // add mapHover
        this.mapHover = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_maphover__["a" /* MapHover */]({ mapController: this });

        // add interactions ===
        //

        // mouse navigation
        if (mapData.mouse_nav) {
            // drag pan and kinetic scrolling
            if (mapData.mouse_nav.drag_pan) {
                kinetic = mapData.mouse_nav.kinetic ? new ol.Kinetic(-0.005, 0.05, 100) : null;
                this.map.addInteraction(new ol.interaction.DragPan({ kinetic: kinetic }));
            }
            // mousewheel zoom
            if (mapData.mouse_nav.wheel_zoom) {
                this.map.addInteraction(new ol.interaction.MouseWheelZoom());
            }
            // doubleclick zoom
            if (mapData.mouse_nav.doubleclick_zoom) {
                this.map.addInteraction(new ol.interaction.DoubleClickZoom());
            }
            // box zoom
            if (mapData.mouse_nav.drag_zoom) {
                this.map.addInteraction(new ol.interaction.DragZoom({ condition: ol.events.condition.shiftKeyOnly }));
            }
            // drag rotate (& zoom)
            if (mapData.mouse_nav.drag_rotate_zoom) {
                this.map.addInteraction(new ol.interaction.DragRotateAndZoom({ condition: ol.events.condition.altKeyOnly }));
            } else if (mapData.mouse_nav.drag_rotate) {
                this.map.addInteraction(new ol.interaction.DragRotate({ condition: ol.events.condition.altKeyOnly }));
            }
        }
        // touch navigation
        if (mapData.touch_nav) {
            // rotate (pinch)
            if (mapData.touch_nav.rotate) {
                this.map.addInteraction(new ol.interaction.PinchRotate());
            }
            // zoom (pinch)
            if (mapData.touch_nav.zoom) {
                this.map.addInteraction(new ol.interaction.PinchZoom({ constrainResolution: true }));
            }
        }
        // keyboard navigation
        if (mapData.keyboard_nav) {
            // pan (arrow keys)
            if (mapData.keyboard_nav.pan) {
                this.map.addInteraction(new ol.interaction.KeyboardPan());
            }
            // zoom ("+" and "-" key)
            if (mapData.keyboard_nav.zoom) {
                this.map.addInteraction(new ol.interaction.KeyboardZoom());
            }
        }
        // ===

        // add control-containers ===
        //
        // top-left
        controlContainerTopLeft = document.createElement('div');
        controlContainerTopLeft.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TL + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        this.$overlaycontainer_stopevent.prepend(controlContainerTopLeft);
        // bottom-left
        controlContainerBottomLeft = document.createElement('div');
        controlContainerBottomLeft.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        $(controlContainerTopLeft).after(controlContainerBottomLeft);
        // element needs to be moved when Portside will be opened
        this.leftSlideElements.push(controlContainerBottomLeft);
        // top-right
        controlContainerTopRight = document.createElement('div');
        controlContainerTopRight.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TR + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        $(controlContainerBottomLeft).after(controlContainerTopRight);
        // element needs to be moved when Starboard will be opened
        this.rightSlideElements.push(controlContainerTopRight);
        // bottom-right
        controlContainerBottomRight = document.createElement('div');
        controlContainerBottomRight.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BR + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        $(controlContainerTopRight).after(controlContainerBottomRight);
        // element needs to be moved when Starboard will be opened
        this.rightSlideElements.push(controlContainerBottomRight);
        // ===
        // add controls ===
        this.controls = {};
        //


        // account
        if (mapData.account && typeof __WEBPACK_IMPORTED_MODULE_15__c4g_maps_control_portside_account__["a" /* Account */] === 'function') {
            this.controls.account = new __WEBPACK_IMPORTED_MODULE_15__c4g_maps_control_portside_account__["a" /* Account */]({
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_ACCOUNT,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.account);
        }

        // zoom-controls
        if (mapData.zoom_panel || mapData.zoom_slider) {
            this.controls.zoom = new ol.control.Zoom({
                zoomInLabel: ' ',
                zoomOutLabel: ' ',
                zoomInTipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_ZOOM_IN,
                zoomOutTipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_ZOOM_OUT,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.zoom);

            if (mapData.zoom_slider) {
                this.controls.zoomslider = new ol.control.ZoomSlider({
                    label: ' ',
                    tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_ZOOM_SLIDER,
                    target: controlContainerTopLeft
                });
                this.map.addControl(this.controls.zoomslider);
            }
        }
        if (mapData.zoom_extent & !mapData.zoom_slider) {
            this.controls.zoom_extent = new ol.control.ZoomToExtent({
                label: ' ',
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_ZOOM_EXT,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.zoom_extent);
        }
        if (mapData.zoom_home & !mapData.zoom_slider) {
            this.controls.zoom_home = new c4g.maps.control.Home({
                label: ' ',
                disableLabel: ' ',
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_ZOOM_HOME,
                target: controlContainerTopLeft,
                mapController: this
            });
            this.map.addControl(this.controls.zoom_home);
        }

        if (mapData.zoom_position & !mapData.zoom_slider) {
            this.controls.zoom_position = new c4g.maps.control.Position({
                label: ' ',
                disableLabel: ' ',
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_ZOOM_POS,
                target: controlContainerTopLeft,
                mapController: this
            });
            this.map.addControl(this.controls.zoom_position);
        }

        // combined zoom-controls
        if (mapData.zoom_slider) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_SLIDER).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_SLIDER + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_SLIDER));
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_SLIDER + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL).remove();
        }

        if (mapData.zoom_panel && mapData.zoom_extent) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_EXT).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_EXT + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_EXT));
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_EXT + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL).remove();
        }

        if (mapData.zoom_panel && mapData.zoom_home) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_HOME).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_HOME + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_HOME));
            removeElement = controlContainerTopLeft.querySelector('.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_HOME + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + '.button');
            if (removeElement) {
                try {
                    removeElement.remove();
                } catch (err) {
                    //ie 11 error
                }
            }
        }

        if (mapData.zoom_panel && mapData.zoom_position) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_POS).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS));
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL).remove();
            removeElement = controlContainerTopLeft.querySelector('.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + '.button');
            if (removeElement) {
                try {
                    removeElement.remove();
                } catch (err) {
                    //ie 11 error
                }
            }
        }

        // fullscreen
        if (mapData.fullscreen) {
            this.controls.fullscreen = new ol.control.FullScreen({
                label: ' ',
                labelActive: ' ',
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_FULLSCREEN,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.fullscreen);
        }

        // router
        if (mapData.router_enable && typeof __WEBPACK_IMPORTED_MODULE_6__c4g_maps_control_portside_router__["a" /* Router */] === 'function') {
            this.controls.router = new __WEBPACK_IMPORTED_MODULE_6__c4g_maps_control_portside_router__["a" /* Router */]({
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_ROUTER,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.router);
        }
        // editor
        if (mapData.editor.enable && typeof __WEBPACK_IMPORTED_MODULE_14__c4g_maps_control_portside_editor__["a" /* Editor */] === 'function') {
            this.controls.editor = new __WEBPACK_IMPORTED_MODULE_14__c4g_maps_control_portside_editor__["a" /* Editor */]({
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_EDITOR,
                type: mapData.editor.type || 'frontend',
                target: mapData.editor.target || controlContainerTopLeft,
                initOpen: mapData.editor.open || false,
                dataField: mapData.editor.data_field || false,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.editor);
        }
        // measuretools
        if (mapData.measuretools.enable && typeof __WEBPACK_IMPORTED_MODULE_7__c4g_maps_control_portside_measuretools__["a" /* Measuretools */] === 'function') {
            this.controls.measuretools = new __WEBPACK_IMPORTED_MODULE_7__c4g_maps_control_portside_measuretools__["a" /* Measuretools */]({
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_MEASURETOOLS,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.measuretools);
        }
        //
        if (mapData.print) {
            this.controls.print = new __WEBPACK_IMPORTED_MODULE_8__c4g_maps_control_print__["a" /* Print */]({
                label: "",
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_PRINT,
                target: controlContainerTopLeft,
                mapController: this
            });
            this.map.addControl(this.controls.print);
        }

        // show graticule (grid)
        if (mapData.graticule) {
            this.controls.graticule = new __WEBPACK_IMPORTED_MODULE_9__c4g_maps_control_grid__["a" /* Grid */]({
                label: ' ',
                disableLabel: ' ',
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_GRID,
                caching: mapData.caching,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.graticule);
        }
        // rotate-control
        //TODO: use something like "mapData.rotate"
        //   Check: mapData.mouse_nav (defined?)
        if (mapData.mouse_nav && (mapData.mouse_nav.drag_rotate || mapData.mouse_nav.drag_rotate && mapData.mouse_nav.drag_rotate_zoom)) {
            this.controls.rotate = new ol.control.Rotate({
                label: ' ',
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_RESET_ROTATION,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.rotate);
        }
        // infopage
        if (mapData.infopage && typeof c4g.maps.control.Infopage === 'function') {
            this.controls.infopage = new c4g.maps.control.Infopage({
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_INFOPAGE,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.infopage);
        }
        // additional panel
        // if (mapData.additionalPanel && typeof c4g.maps.control.additionalPanel === 'function') {
        //   this.controls.additionalPanel = new c4g.maps.control.additionalPanel({
        //     tipLabel: langConstants.CTRL_ADDITIONALPANEL,
        //     target: controlContainerTopLeft,
        //     caching: mapData.caching,
        //     mapController: this
        //   });
        //   this.map.addControl(this.controls.additionalPanel);
        // }


        // scaleline
        if (mapData.scaleline) {
            this.controls.scaleline = new ol.control.ScaleLine({
                target: controlContainerBottomLeft
            });
            this.map.addControl(this.controls.scaleline);
        }

        // zoom-level & mouse-position
        if (mapData.zoomlevel || mapData.mouseposition) {
            // wrapper for zoom-level and mouse-position
            controlContainerBottomLeftSub = document.createElement('div');
            controlContainerBottomLeftSub.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL_SUB + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
            $(controlContainerBottomLeft).append(controlContainerBottomLeftSub);
            // display zoom-level
            if (mapData.zoomlevel) {
                this.controls.zoomlevel = new __WEBPACK_IMPORTED_MODULE_10__c4g_maps_control_zoomlevel__["a" /* Zoomlevel */]({
                    mapView: view,
                    target: controlContainerBottomLeftSub,
                    undefinedHTML: 'N/A'
                });
                this.map.addControl(this.controls.zoomlevel);
            }
            // display mouse-position
            if (mapData.mouseposition) {
                this.controls.mouseposition = new ol.control.MousePosition({
                    projection: 'EPSG:4326',
                    coordinateFormat: ol.coordinate.toStringHDMS,
                    target: controlContainerBottomLeftSub,
                    undefinedHTML: 'N/A'
                });
                this.map.addControl(this.controls.mouseposition);
            }
        }

        // geosearch
        if (c4g.maps.control && c4g.maps.control.GeoSearch && typeof c4g.maps.control.GeoSearch === 'function' && mapData.geosearch.enable) {
            this.controls.geosearch = new c4g.maps.control.GeoSearch({
                mapController: this,
                target: controlContainerTopRight,
                extDiv: mapData.geosearch.div || false,
                collapsible: true,
                collapsed: mapData.geosearch.collapsed,
                label: ' ',
                collapsedLabel: '',
                // engineUrl: mapData.geosearch.engine,
                searchZoom: mapData.geosearch.searchzoom,
                zoomBounds: mapData.geosearch.zoombounds,
                quicksearch: true,
                animate: mapData.geosearch.animate,
                markResult: mapData.geosearch.markresult,
                popup: mapData.geosearch.popup,
                autopick: mapData.geopicker,
                caching: mapData.caching,
                results: mapData.geosearch.results
            });
            this.map.addControl(this.controls.geosearch);
        }

        // geobookmarks - not ready
        if (mapData.geobookmarks) {
            this.controls.geobookmarks = new ol.control.GeoBookmark({
                //target: controlContainerTopRight
                label: ' ',
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_GEOBOOKMARKS,
                placeholder: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].GEOBOOKMARKS_PLACEHOLDER,
                namespace: 'c4g_geobookmarks' /*,
                                              className: cssConstants.GEOBOOKMARKS*/ //ToDo implement for own styling
            });
            this.map.addControl(this.controls.geobookmarks);
            this.rightSlideElements.push('.ol-bookmark');
        }

        // overview-map
        if (mapData.overviewmap) {
            this.controls.overviewmap = new __WEBPACK_IMPORTED_MODULE_11__c4g_maps_control_overviewmap__["a" /* OverviewMap */]({
                target: controlContainerTopRight
            });
            this.map.addControl(this.controls.overviewmap);
        }

        if (mapData.starboard.label) {
            starboard_label = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_STARBOARD.replace('Starboard', mapData.starboard.label).replace('starboard', mapData.starboard.label);
        }

        // starboard
        if (mapData.geopicker && mapData.geopicker.type === "backend") {
            enableStarboard = false;
        }

        // popup margin
        //this.leftSlideElements.push('.ol-overlay-container');
        //this.rightSlideElements.push('.ol-overlay-container');

        console.log(c4g.maps.control);
        if (typeof __WEBPACK_IMPORTED_MODULE_13__c4g_maps_control_starboard__["a" /* Starboard */] === 'function' && enableStarboard) {
            this.controls.starboard = new __WEBPACK_IMPORTED_MODULE_13__c4g_maps_control_starboard__["a" /* Starboard */]({
                create: mapData.starboard.enable || false,
                headline: mapData.starboard.label,
                tipLabel: starboard_label || false,
                caching: mapData.caching,
                mapController: this,
                extDiv: mapData.starboard.div,
                defaultOpen: mapData.starboard.open,
                filter: mapData.starboard.filter,
                button: mapData.starboard.button,
                baselayerSwitcherCreate: mapData.baselayerswitcher.enable,
                baselayerSwitcherTitle: mapData.baselayerswitcher.label,
                layerSwitcherCreate: mapData.layerswitcher.enable,
                layerSwitcherTitle: mapData.layerswitcher.label
            });
            this.map.addControl(this.controls.starboard);
        }
        //c4g.maps.utils.callHookFunctions(c4g.maps.hook_controls);

        // backend-geopicker
        if (mapData.geopicker && (mapData.geopicker.type === "backend" || mapData.geopicker.type === "frontend")) {
            this.controls.geopicker = new __WEBPACK_IMPORTED_MODULE_16__c4g_maps_interaction_geopicker__["a" /* GeoPicker */]({
                mapContainer: this
            });
            this.map.addInteraction(this.controls.geopicker);
            if (mapData.geopicker.type === "frontend") {
                // substring is needed here for taking out the #
                if (mapData.geopicker.input_geo_x && mapData.geopicker.input_geo_x) {
                    var geoxField = document.getElementById(mapData.geopicker.input_geo_x.substring(1));
                    var geoyField = document.getElementById(mapData.geopicker.input_geo_y.substring(1));
                    if (geoxField && geoyField) {
                        var locGeox = geoxField.value;
                        var locGeoy = geoyField.value;
                        if (locGeox && locGeoy) {
                            var numerized = [parseFloat(locGeox, 10), parseFloat(locGeoy, 10)];
                            var transformed = ol.proj.transform(numerized, ol.proj.get('EPSG:4326'), ol.proj.get('EPSG:3857'));
                            geoLocation = null;
                            this.map.getView().setCenter(transformed);
                        }
                    }
                }
            }
        }

        // show attribution
        if (mapData.attribution.enable) {
            // @TODO: create own attribution-control
            if (mapData.attribution.cfg_logo) {
                logoLink = document.createElement('a');
                logoLink.href = 'https://con4gis.org';
                logoLink.title = 'built with con4gis';
                logoLink.target = '_blank';
                logoLink.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ATTRIBUTION_LOGO;
                logoGraphic = document.createElement('img');
                logoGraphic.src = 'bundles/con4gismaps/images/logo_con4gis.svg';
                logoLink.appendChild(logoGraphic);
                controlContainerBottomRight.appendChild(logoLink);
            }
            this.controls.attribution = new ol.control.Attribution({
                label: ' ',
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_ATTRIBUTION,
                collapseLabel: ' ',
                target: controlContainerBottomRight
            });
            this.controls.attribution.setCollapsed(mapData.attribution.collapsed === '1');
            this.map.addControl(this.controls.attribution);
        }

        // show permalink
        if (mapData.permalink.enable) {
            this.controls.permalink = new __WEBPACK_IMPORTED_MODULE_12__c4g_maps_control_permalink__["a" /* Permalink */]({
                label: ' ',
                tipLabel: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstants */].CTRL_PERMALINK,
                mapController: this,
                getParameter: mapData.permalink.get_parameter,
                target: controlContainerBottomRight
            });
            this.map.addControl(this.controls.permalink);
        }

        //themeData
        if (mapData.themeData) {
            domMapDiv = document.getElementById(mapData.mapDiv);
            if (mapData.themeData['useglobal']) {
                domMapDiv = document.getElementById('wrapper');
            };

            if (mapData.themeData['maincolor']) {
                var mainColor = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(mapData.themeData['maincolor'], mapData.themeData['mainopacity']);
                var fontColor = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(mapData.themeData['fontcolor'], mapData.themeData['fontopacity']);
                var shadowColor = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(mapData.themeData['shadowcolor'], mapData.themeData['shadowopacity']);

                if (domMapDiv && domMapDiv.style) {
                    domMapDiv.style.setProperty('--main-color', mainColor);
                    domMapDiv.style.setProperty('--font-color', fontColor);
                    domMapDiv.style.setProperty('--shadow-color', shadowColor);
                }
            }

            if (mapData.themeData['buttonradius']) {
                domMapDiv.style.setProperty('--button-radius-percent', mapData.themeData['buttonradius'] + '%');
                domMapDiv.style.setProperty('--button-radius-pixel', mapData.themeData['buttonradius'] + 'px');
            }
        }
        if (window.c4gMapsHooks !== undefined && Array.isArray(window.c4gMapsHooks.mapController_addControls)) {
            __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.mapController_addControls, { mapController: this, Container: controlContainerTopLeft });
        }
    };
})(jQuery, this.c4g); // 'The End' :)    - ! Do not write stuff after this line ! -

var MapController = this.c4g.maps.MapController;

/***/ }),

/***/ "./Resources/public/js/c4g-overlay-controller.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-overlay-controller.js ***!
  \*******************************************************/
/*! exports provided: C4gOverlayController */
/*! exports used: C4gOverlayController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gOverlayController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_overlay__ = __webpack_require__(/*! ./c4g-overlay */ "./Resources/public/js/c4g-overlay.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var C4gOverlayController = function () {
    function C4gOverlayController(baselayer) {
        _classCallCheck(this, C4gOverlayController);

        this.baselayer = baselayer;
        this.arrOverlays = [];
    }

    _createClass(C4gOverlayController, [{
        key: 'showOverlayLayer',
        value: function showOverlayLayer(overlayId) {
            var self = this,
                overlayLayerConfig,
                osmSourceConfigs = c4g.maps.config.osm,
                stamenSourceConfigs = c4g.maps.config.stamen,
                layerOptions,
                overlayLayer,
                noUrl;

            layerOptions = {};
            overlayLayer = new ol.layer.Tile({
                source: new ol.source.OSM()
            });

            overlayLayerConfig = this.arrOverlays[overlayId];

            switch (overlayLayerConfig.provider) {
                case 'osm':
                    if (osmSourceConfigs[overlayLayerConfig.style]) {
                        overlayLayer = new ol.layer.Tile({
                            source: new ol.source.OSM(jQuery.extend(osmSourceConfigs[overlayLayerConfig.style], layerOptions))
                        });
                    } else if (stamenSourceConfigs[overlayLayerConfig.style]) {
                        // Stamen
                        overlayLayer = new ol.layer.Tile({
                            source: new ol.source.Stamen(jQuery.extend(stamenSourceConfigs[overlayLayerConfig.style], layerOptions))
                        });
                        // } else if (mapQuestSourceConfigs[overlayLayerConfig.style]) {
                        //   // mapQuest
                        //   overlayLayer = new ol.layer.Tile({
                        //     source: new ol.source.MapQuest(mapQuestSourceConfigs[overlayLayerConfig.style])
                        //   });
                    } else if (overlayLayerConfig.style === 'osm_custom') {
                        // custom
                        noUrl = true;
                        if (overlayLayerConfig.attribution) {
                            layerOptions.attributions = overlayLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION;
                        }

                        if (overlayLayerConfig.url) {
                            layerOptions.url = overlayLayerConfig.url;
                            noUrl = false;
                        } else if (overlayLayerConfig.urls) {
                            layerOptions.urls = overlayLayerConfig.urls;
                            noUrl = false;
                        }
                        if (!noUrl) {
                            overlayLayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(layerOptions)
                            });
                        } else {
                            console.warn('custom url(s) missing -> switch to default');
                        }
                    } else {
                        console.warn('unsupported osm-style -> switch to default');
                    }
                    break;
                case 'google':
                    //@todo
                    console.warn('google-maps are currently unsupported');
                    break;
                case 'bing':
                    if (baseLayerConfig.apiKey && overlayLayerConfig.style) {
                        overlayLayer = new ol.layer.Tile({
                            source: new ol.source.BingMaps({
                                culture: navigator.languages ? navigator.languages[0] : navigator.language || navigator.userLanguage,
                                key: overlayLayerConfig.apiKey,
                                imagerySet: overlayLayerConfig.style
                            })
                        });
                    } else {
                        console.warn('wrong bing-key or invalid imagery-set!');
                    }
                    break;
                case 'wms':
                    overlayLayer = new ol.layer.Tile({
                        source: new ol.source.TileWMS({
                            url: overlayLayerConfig.url,
                            params: {
                                LAYERS: overlayLayerConfig.params.layers,
                                VERSION: overlayLayerConfig.params.version,
                                //FORMAT: overlayLayerConfig.params.format,
                                TRANSPARENT: overlayLayerConfig.params.transparent
                            },
                            gutter: overlayLayerConfig.gutter,
                            attributions: overlayLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                        })
                        //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                    });
                    break;
                case 'owm':
                    overlayLayer = new ol.layer.Tile({
                        source: new ol.source.XYZ({
                            url: overlayLayerConfig.url + overlayLayerConfig.app_id + '/{z}/{x}/{y}?hash=' + overlayLayerConfig.api_key,
                            attributions: overlayLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                        })
                        //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                    });
                    break;
                default:
                    console.warn('unsupported provider');
                    break;
            }
            overlayLayer.setOpacity(parseInt(overlayLayerConfig.opacity) / 100);
            this.arrOverlays[overlayId].layer = overlayLayer;
            return this.arrOverlays[overlayId].layer;
        }
    }]);

    return C4gOverlayController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-overlay.js":
/*!********************************************!*\
  !*** ./Resources/public/js/c4g-overlay.js ***!
  \********************************************/
/*! exports provided: C4gOverlay */
/*! exports used: C4gOverlay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gOverlay; });
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var C4gOverlay = function () {
    function C4gOverlay(overlayArr, mapController) {
        _classCallCheck(this, C4gOverlay);

        this.id = overlayArr['id'];
        this.pid = overlayArr['pid'];
        this.name = overlayArr['name'];
        this.provider = overlayArr['provider'];
        this.style = overlayArr['style'];
        this.url = overlayArr['url'];
        this.urls = overlayArr['urls'];
        this.opacity = overlayArr['opacity'];
        this.attribution = overlayArr['attribution'];
        this.gutter = overlayArr['gutter'];
        this.params = overlayArr['params'];
        this.layer = false;
        this.overlayArr = overlayArr;
        this.mapController = mapController;
    }

    _createClass(C4gOverlay, [{
        key: 'changeOpacity',
        value: function changeOpacity(value) {
            var layer;

            layer = this.layer;
            if (layer) {
                this.mapController.map.removeLayer(layer);
                layer.setOpacity(value / 100);
                this.mapController.map.addLayer(layer);
            }
        }
    }]);

    return C4gOverlay;
}();

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYTVhZDRlNzY3ZTg0NGJkMmU2NzgiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctYmFzZWxheWVyLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctYmFzZWxheWVyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWxheWVyLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbG9jYXRpb25zdHlsZS1jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWxvY2F0aW9uc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLWdyaWQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLW92ZXJ2aWV3bWFwLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wZXJtYWxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLWFjY291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLWVkaXRvci5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtcG9ydHNpZGUtbWVhc3VyZXRvb2xzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXByaW50LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zaWRlYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXN0YXJib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWJhc2VsYXllcnN3aXRjaGVyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRwbHVnaW4tY3VzdG9tdGFiLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRwbHVnaW4tbGF5ZXJzd2l0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtem9vbWxldmVsLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtaW50ZXJhY3Rpb24tZ2VvcGlja2VyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLW1pc2MtbWFwaG92ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1taXNjLXNwaW5uZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1taXNjLXRvb2x0aXBwb3B1cC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLXByb3h5LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1vdmVybGF5LWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctb3ZlcmxheS5qcyJdLCJuYW1lcyI6WyJDNGdCYXNlbGF5ZXJDb250cm9sbGVyIiwicHJveHkiLCJtYXBDb250cm9sbGVyIiwib3B0aW9ucyIsImFyckJhc2VsYXllcnMiLCJiYXNlbGF5ZXJJZHMiLCJzZWxmIiwialF1ZXJ5IiwiYWpheCIsImFwaV9iYXNlbGF5ZXJfdXJsIiwiZGF0YVR5cGUiLCJkYXRhIiwianNvbnAiLCJkb25lIiwiYmFzZWxheWVyIiwiYWRkQmFzZUxheWVycyIsImZhaWwiLCJjb25zb2xlIiwid2FybiIsInNwaW5uZXIiLCJoaWRlIiwiYWx3YXlzIiwiYmFzZWxheWVycyIsInVpZCIsImkiLCJqIiwic29ydCIsImEiLCJiIiwicGFyc2VJbnQiLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJsZW5ndGgiLCJpZCIsInV0aWxzIiwiZ2V0VW5pcXVlSWQiLCJwdXNoIiwiQzRnQmFzZWxheWVyIiwic2hvd0Jhc2VMYXllciIsImhhc092ZXJsYXlzIiwib3ZlcmxheXMiLCJvdmVybGF5Q29udHJvbGxlciIsImFyck92ZXJsYXlzIiwiQzRnT3ZlcmxheSIsImxheWVyIiwic2hvd092ZXJsYXlMYXllciIsImFjdGl2ZUJhc2VsYXllcklkIiwicHJvdmlkZXIiLCJzdHlsZSIsImJhc2VsYXllcnNfbG9hZGVkIiwiY2FsbEhvb2tGdW5jdGlvbnMiLCJob29rX2Jhc2VsYXllcl9sb2FkZWQiLCJsYXllck9wdGlvbnMiLCJiYXNlTGF5ZXJDb25maWciLCJzb3VyY2VDb25maWdzIiwibmV3QmFzZWxheWVyIiwibm9VcmwiLCJ1cmwiLCJ1cmxzIiwib2wiLCJUaWxlIiwic291cmNlIiwiWFlaIiwiZXh0ZW50IiwiZXh0ZW5kIiwib3NtIiwiT1NNIiwiJCIsInN0YW1lbiIsIlN0YW1lbiIsImFwaV9rZXkiLCJhcHBfaWQiLCJtYXBib3hfdHlwZSIsIm1hcGJveCIsInVybF9jbGFzc2ljIiwiaGlkZV9pbl9iZSIsImtsb2thbl90eXBlIiwiVmVjdG9yVGlsZSIsImtsb2thbiIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsImdsU3R5bGUiLCJvbG1zIiwiYXBwbHlTdHlsZSIsImhlcmVfdHlwZSIsImhlcmUiLCJ0aHVuZGVyZm9yZXN0X3R5cGUiLCJ0aHVuZGVyZm9yZXN0IiwiQmluZ01hcHMiLCJjdWx0dXJlIiwibmF2aWdhdG9yIiwibGFuZ3VhZ2VzIiwibGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJrZXkiLCJpbWFnZXJ5U2V0IiwiaW5kZXhPZiIsIlRpbGVXTVMiLCJwYXJhbXMiLCJMQVlFUlMiLCJsYXllcnMiLCJWRVJTSU9OIiwidmVyc2lvbiIsIlRSQU5TUEFSRU5UIiwidHJhbnNwYXJlbnQiLCJndXR0ZXIiLCJhdHRyaWJ1dGlvbnMiLCJhdHRyaWJ1dGlvbiIsIkFUVFJJQlVUSU9OIiwiY3Jvc3NPcmlnaW4iLCJiYXNlTGF5ZXJHcm91cCIsImluZGV4IiwiaGFzT3duUHJvcGVydHkiLCJlbGVtZW50IiwiY3JlYXRlQmFzZUxheWVyIiwibWF4Wm9vbSIsIm1hcCIsImdldFZpZXciLCJnZXRSZXNvbHV0aW9uRm9yWm9vbSIsIm1pblpvb20iLCJzZXRNaW5SZXNvbHV0aW9uIiwic2V0TWF4UmVzb2x1dGlvbiIsIkdyb3VwIiwiYmFzZUxheWVyVWlkIiwiYWRkQmFzZWxheWVyIiwiYmFzZUxheWVycyIsInZpZXciLCJjb25maWciLCJhZGRpdGlvbmFsIiwiYWRkaXRpb25hbEF0dHJpYnV0aW9uIiwiZXhpc3RzIiwiZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uIiwiZ2Vvc2VhcmNoIiwiZ2Vvc2VhcmNoX2VuZ2luZSIsImN1c3RvbV9hdHRyaWJ1dGlvbiIsImdlb3NlYXJjaEF0dHJpYnV0aW9uIiwic29ydGluZyIsImdldExheWVycyIsIml0ZW0iLCJnZXQiLCJmb3JFYWNoIiwiYXJyYXkiLCJzZXRWaXNpYmxlIiwiem9vbSIsImdldFpvb20iLCJjZW50ZXIiLCJnZXRDZW50ZXIiLCJzZXRab29tIiwibWFwRGF0YSIsInpvb21sZXZlbCIsIm1vdXNlcG9zaXRpb24iLCJjb250cm9sQ29udGFpbmVyVG9wTGVmdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImNzc0NvbnN0YW50cyIsIkNPTlRST0xfQ09OVEFJTkVSX1RMIiwiT0xfVU5TRUxFQ1RBQkxFIiwiJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50IiwicHJlcGVuZCIsImNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0IiwiQ09OVFJPTF9DT05UQUlORVJfQkwiLCJhZnRlciIsImxlZnRTbGlkZUVsZW1lbnRzIiwiY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIiLCJDT05UUk9MX0NPTlRBSU5FUl9CTF9TVUIiLCJuZXdWaWV3IiwiVmlldyIsInByb2plY3Rpb24iLCJnZXRQcm9qZWN0aW9uIiwicm90YXRpb24iLCJnZXRSb3RhdGlvbiIsInJlc29sdXRpb24iLCJnZXRSZXNvbHV0aW9uIiwic2V0VmlldyIsInJlZHJhd01hcFZpZXciLCJob29rX2Jhc2VsYXllcl92aXNpYmlsaXR5IiwiY2VzaXVtIiwiZW5hYmxlIiwib2wzZCIsIm9sY3MiLCJPTENlc2l1bSIsImNyZWF0ZVN5bmNocm9uaXplcnMiLCJzZXRFbmFibGVkIiwiZ2V0RW5hYmxlZCIsImJhc2VsYXllckFyciIsImNvbnRyb2xsZXIiLCJwaWQiLCJkaXNwbGF5X25hbWUiLCJvc21fc3R5bGUiLCJvc21fc3R5bGVfdXJsMSIsIm9zbV9zdHlsZV91cmwyIiwib3NtX3N0eWxlX3VybDMiLCJvc21fc3R5bGVfdXJsNCIsIm9zbV9rZXluYW1lIiwiYmluZ19zdHlsZSIsIndtc19ndXR0ZXIiLCJwcm90ZWN0X2Jhc2VsYXllciIsInBlcm1pdHRlZF9ncm91cHMiLCJzdHlsZV91cmwiLCJsYXllckdyb3VwIiwiQzRnT3ZlcmxheUNvbnRyb2xsZXIiLCJjNGciLCJDNGdMYXllckNvbnRyb2xsZXIiLCJhcnJMYXllcnMiLCJsYXllclJlcXVlc3RzIiwibWFwSWQiLCJhcGlfbGF5ZXJfdXJsIiwiYWRkTGF5ZXJzIiwiZm9yZWlnbkxheWVycyIsImxheWVyc19sb2FkZWQiLCJob29rX2xheWVyX2xvYWRlZCIsImxheWVySWRzIiwiY2hlY2tMb2NhdGlvblN0eWxlcyIsImRyYXdMYXllckluaXRpYWwiLCJrIiwicCIsImlzVmlzaWJsZSIsInN0b3JlZEl0ZW0iLCJsaW5rSXRlbXMiLCJjdXJyZW50Wm9vbSIsImZuSGFuZGxlQW5kQXBwZW5kTGF5ZXJDaGlsZHMiLCJlbmRsZXNzTG9vcElkIiwicGFyZW50SWQiLCJwYXJlbnRJZHMiLCJwZXJtYWxpbmtlZExheWVycyIsImNoaWxkIiwiZm5IYW5kbGVDaGlsZHMiLCJzdGFyYm9hcmQiLCJmbkFkZFRvSG9vayIsIm9iakl0ZW0iLCJ0b2dnbGUiLCJlbnRyeVdyYXBwZXIiLCJoYXNDaGlsZHMiLCJ2aXNpYmxlQ2hpbGRzIiwiY2hpbGRzIiwibGF5ZXJuYW1lIiwibGF5ZXJpZCIsImxheWVyaWNvbiIsInRhYklkIiwiYXdlc29tZWljb24iLCJtYXBzIiwic3RhcmJvYXJkVGFicyIsImNvbnRyb2xzIiwiaG9va19sYXllcnN3aXRjaGVyX2xvYWRlZCIsImNvbnRyb2wiLCJzdGFyYm9hcmRwbHVnaW4iLCJDdXN0b210YWIiLCJDNGdMYXllciIsImNvbnRlbnQiLCJvYmplY3RUb0FycmF5IiwiY3NzQ2xhc3MiLCJ0eXBlIiwiZWRpdGFibGUiLCJyZW5kZXJTcGVjaWFsIiwiZGlzcGxheSIsImZMYXllciIsImNvdW50IiwiY2hpbGRBcnIiLCJjaGVja0xheWVySXNBY3RpdmVGb3Jab29tIiwiaXNJbmFjdGl2ZSIsInZpc2libGUiLCJhY3RpdmVMYXllcklkcyIsIml0ZW1VaWQiLCJmZWF0dXJlcyIsImZlYXR1cmVQcm9qZWN0aW9uIiwiZGF0YVByb2plY3Rpb24iLCJjb250ZW50RGF0YSIsInJlcXVlc3REYXRhIiwicmVxdWVzdENvbnRlbnREYXRhIiwicmVxdWVzdFZlY3RvclNvdXJjZSIsInZlY3RvckxheWVyIiwidmVjdG9yU291cmNlIiwidmVjdG9yU3R5bGUiLCJjbHVzdGVyU291cmNlIiwic3R5bGVGb3JDbHVzdGVyIiwicmVmcmVzaEludGVydmFsIiwicmVmcmVzaEFqYXhWYXJzIiwiZm5BdHRhY2hEYXRhVG9MYXllciIsInByb3BlcnRpZXMiLCJwb3B1cCIsInRvb2x0aXAiLCJ0b29sdGlwX2xlbmd0aCIsImxhYmVsIiwiem9vbV9vbmNsaWNrIiwiY29udGVudEZlYXR1cmVzIiwiZmVhdHVyZSIsInNpemUiLCJmRmVhdHVyZXMiLCJpY29uT2Zmc2V0IiwicmFkaXVzIiwiZmlsbGNvbG9yIiwiZm9udGNvbG9yIiwibG9jYXRpb25TdHlsZSIsImxvY2F0aW9uU3R5bGVDb250cm9sbGVyIiwiYXJyTG9jU3R5bGVzIiwiZml0dGluZ0V4dGVuZHMiLCJnZXRFeHRlbnQiLCJ1bmRlZmluZWQiLCJ3aW5kb3ciLCJnZXRTdHlsZSIsImdldEltYWdlIiwiZ2V0UmFkaXVzIiwiZ2V0QW5jaG9yIiwiZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5IiwidW5pdCIsInZhbHVlIiwiY2x1c3Rlcl9maWxsY29sb3IiLCJjbHVzdGVyX2ZvbnRjb2xvciIsIlN0eWxlIiwidGV4dCIsIlRleHQiLCJmb250Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJmaWxsIiwiRmlsbCIsImNvbG9yIiwidG9TdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJzZXR0aW5ncyIsImJvdW5kaW5nQm94IiwiVmVjdG9yIiwibG9hZGVyIiwiYm91bmRpbmdBcnJheSIsInN0ckJvdW5kaW5nQm94IiwicHJvaiIsInRyYW5zZm9ybUV4dGVudCIsInN1YnN0ciIsImJib3hUYWciLCJlbmNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwiYWJvcnQiLCJmb3JtYXQiLCJyRmVhdHVyZXMiLCJvc21Ob2RlcyIsIm9zbU5kcyIsIm5vZGVJZHgiLCJuZElkeCIsImluZm9Ob2RlcyIsIm5ld1RhZyIsInJlZiIsImNoaWxkcmVuIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRBdHRyaWJ1dGUiLCJzaG93QWRkaXRpb25hbEdlb21ldHJpZXMiLCJwYXJlbnRFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJlIiwiT1NNWE1MIiwicmVhZEZlYXR1cmVzIiwiZ2V0R2VvbWV0cnkiLCJnZXRUeXBlIiwic2V0IiwiY2x1c3Rlcl96b29tIiwiY2x1c3Rlcl9wb3B1cCIsImxvY19saW5rdXJsIiwiaG92ZXJfbG9jYXRpb24iLCJob3Zlcl9zdHlsZSIsImZvcmNlTm9kZXMiLCJjZW50ZXJQb2ludCIsImdldEludGVyaW9yUG9pbnQiLCJnZXRDb29yZGluYXRlcyIsInNldEdlb21ldHJ5IiwiZ2VvbSIsIlBvaW50IiwibGluZUV4dGVudCIsImFkZGl0aW9uYWxTdHlsZSIsInNldFN0eWxlIiwicmVkdWNlU3R5bGUiLCJlbGVtZW50cyIsImVsZW1lbnRJZCIsInRhZ3MiLCJwb2ludCIsImxvbiIsImxhdCIsInRyYW5zZm9ybSIsIkZlYXR1cmUiLCJnZW9tZXRyeSIsImFyckNvb3JkcyIsIm5vZGUiLCJmaW5kIiwib2JqTm9kZSIsIm5vZGVzIiwicG9seWdvbiIsIlBvbHlnb24iLCJsaW5lU3RyaW5nIiwiTGluZVN0cmluZyIsImFkZEZlYXR1cmVzIiwic3RyYXRlZ3kiLCJsb2FkaW5nc3RyYXRlZ3kiLCJiYm94IiwiYWxsIiwicmVmcmVzaCIsImludGVydmFsIiwiYmxuSGFzUG9zaXRpb25JZHMiLCJhcnJQb3NpdGlvbklkcyIsIm9iakZlYXR1cmVzIiwiZm9yRWFjaEZlYXR1cmUiLCJyZW5ld2FibGVSZXNwb25zZSIsImVhY2giLCJmZWF0dXJlRGF0YSIsInJlYWRGZWF0dXJlIiwicG9wdXBDb250ZW50Iiwic3R5bGVJZCIsImxvYWRMb2NhdGlvblN0eWxlcyIsImdldFNvdXJjZSIsIm5lc3RlZEZlYXR1cmUiLCJoaWRlTGF5ZXIiLCJzaG93TGF5ZXIiLCJhcnJOZXdQb3NpdGlvbklkcyIsIm9iak5ld0ZlYXR1cmVzIiwicG9zaXRpb25JZCIsInJlbW92ZUZlYXR1cmUiLCJhZGRGZWF0dXJlIiwicmVxdWVzdEZ1bmN0aW9ucyIsImNsdXN0ZXIiLCJDbHVzdGVyIiwiZGlzdGFuY2UiLCJBbmltYXRlZENsdXN0ZXIiLCJnZXRWZWN0b3JMYXllciIsImZpdFRvRXh0ZW5kIiwib24iLCJmaXRUb0V4dGVudHMiLCJsYXllckNvbnRlbnQiLCJjb250ZW50RmVhdHVyZSIsIkdlb0pTT04iLCJtaXNzaW5nU3R5bGVzIiwidW5zdHlsZWRGZWF0dXJlcyIsIm9uY2xpY2tfem9vbSIsImRyYXdMYXllciIsImFkZExheWVyIiwiYXN5bmNfY29udGVudCIsInNob3ciLCJsb2NzdHlsZSIsImFwaV9sYXllcmNvbnRlbnRkYXRhX3VybCIsImxvb3BEYXRhIiwicmVzdWx0Q29vcmRpbmF0ZSIsInBhcnNlRmxvYXQiLCJzZXRJZCIsIk9iamVjdCIsImFzc2lnbiIsInNlYXJjaCIsImNsdXN0ZXJEaXN0YW5jZSIsImFwaV9sYXllcmNvbnRlbnRfdXJsIiwibmV3TG9jYXRpb25TdHlsZXMiLCJsb2FkTGF5ZXJDb250ZW50IiwibGF5ZXJVaWQiLCJrZWVwTGF5ZXIiLCJyZW1vdmVMYXllciIsImhvb2tfbGF5ZXJfdmlzaWJpbGl0eSIsImNsZWFySW50ZXJ2YWwiLCJzZXRDZW50ZXIiLCJjaGlsZFVpZCIsImNoaWxkTGF5ZXIiLCJnZXRBcnJheSIsIm1hcExheWVycyIsImFjdGl2ZUZvclpvb20iLCJzaG93UG9wdXBPbkFjdGl2ZSIsIiRjb250ZW50IiwiaHRtbCIsIiRwb3B1cCIsImFkZENsYXNzIiwiY29uc3RhbnQiLCJjc3MiLCJBQ1RJVkUiLCJMT0FESU5HIiwicG9wdXBJbmZvcyIsImdldEZlYXR1cmVzIiwiY29vcmQiLCJhc3luYyIsIm9ialBvcHVwIiwiaG9vayIsInByb3h5X2ZpbGxQb3B1cCIsInNldFBvcHVwIiwiYXBpX2luZm93aW5kb3dfdXJsIiwicG9wdXBJbmZvIiwicm91dGluZ19saW5rIiwic2V0SW50ZXJ2YWwiLCJmdW5jdGlvbiIsImVsZW1lbnRDb250ZW50IiwiQ2lyY2xlIiwiZnJvbUxvbkxhdCIsImZuU3R5bGVGdW5jdGlvbiIsIkZ1bmN0aW9uIiwiZiIsImZMYXllckdyb3VwIiwiZkxheWVycyIsImZWZWN0b3JMYXllciIsImZWZWN0b3JTb3VyY2UiLCJzZXRMYXllcnMiLCJzcGxpdF9nZW9qc29uIiwiZ2VvanNvbl9hdHRyaWJ1dGVzIiwic3BsaXQiLCJsYXllcklkIiwibCIsImxheWVyQXJyIiwiaGlkZV9jaGlsZCIsInpvb21fbG9jYXRpb25zIiwiY2hpbGRzQ291bnQiLCJnZW9qc29uX3pvb20iLCJoaWRlV2hlbkluVGFiIiwicHJvamVjdElkIiwiQzRnTG9jYXRpb25TdHlsZUNvbnRyb2xsZXIiLCJhcnJJZHMiLCJvcHRfb3B0aW9ucyIsImNvbXBsZXRlIiwic3VjY2VzcyIsIm1ha2VBamF4Iiwic3R5bGVJZHMiLCJhcGlfbG9jc3R5bGVfdXJsIiwiaWRzIiwic3R5bGVEYXRhIiwic3VjY2Vzc2Z1bCIsIkM0Z0xvY2F0aW9uU3R5bGUiLCJqWGhyIiwic3RyU3RhdHVzIiwiY29tcGxldGVkIiwiaGFzQ2xhc3MiLCJISURFIiwianFYSFIiLCJ0ZXh0U3RhdHVzIiwiZXJyb3JUaHJvd24iLCJuIiwic3BsaWNlIiwibG9jU3R5bGVBcnIiLCJnZXRTdHlsZUZ1bmN0aW9uIiwiZWRpdG9yIiwiZ2V0U3R5bGVFZGl0b3JDb25maWciLCJtaW56b29tIiwibWF4em9vbSIsInN0eWxlRnVuY3Rpb24iLCJpbWFnZVN0eWxlIiwic3Ryb2tlU3R5bGUiLCJmaWxsU3R5bGUiLCJ0ZXh0U3R5bGUiLCJ0ZXh0U3R5bGVPdXRsaW5lIiwiYmFja2dyb3VuZEZpbGwiLCJiYWNrZ3JvdW5kU3Ryb2tlIiwiU3Ryb2tlIiwic3Ryb2tlY29sb3IiLCJzdHJva2VvcGFjaXR5Iiwid2lkdGgiLCJzdHJva2V3aWR0aCIsImZpbGxvcGFjaXR5Iiwic3R5bGV0eXBlIiwiUmVndWxhclNoYXBlIiwic3Ryb2tlIiwicG9pbnRzIiwiYW5nbGUiLCJNYXRoIiwiUEkiLCJyYWRpdXMxIiwicmFkaXVzMiIsImZsb29yIiwiaWNvbl9zcmMiLCJJY29uIiwib3BhY2l0eSIsImljb25fb3BhY2l0eSIsInNyYyIsImljb25fc2l6ZSIsInNjYWxlIiwiaWNvbl9zY2FsZSIsInN2Z1NyYyIsImNhbnZhcyIsImN0eCIsImdldENvbnRleHQiLCJoZWlnaHQiLCJjbGVhclJlY3QiLCJmaWxsUmVjdCIsImxpbmVXaWR0aCIsInN0cm9rZVJlY3QiLCJ0cmFuc2xhdGUiLCJpbWciLCJJbWFnZSIsInpJbmRleCIsIm9ubG9hZCIsImRyYXdJbWFnZSIsImltZ1NpemUiLCJQaG90byIsImtpbmQiLCJwaG90b0tpbmQiLCJjcm9wIiwic2hhZG93IiwiZ2V0SWQiLCJzdHlsZXNBcnJheSIsImFycm93U2l6ZSIsImFycm93U2l6ZVVuaXQiLCJzZWdtZW50TGVuZ3RoIiwiYXJyb3dzX21pbnpvb20iLCJzdGFydF9waXhlbCIsImVuZF9waXhlbCIsImRlZmF1bHRDb2xvciIsImRlZmF1bHRfbGFiZWxfY29sb3IiLCJsYWJlbF9vdXRsX2NvbG9yIiwibGFiZWxfb3V0bF93aWR0aCIsImxhYmVsX291dGxfYm94IiwibGFiZWxfb2Zmc2V0IiwiZm9udF93ZWlnaHQiLCJmb250X3N0eWxlIiwiZm9udF9zaXplIiwiZm9udF9mYW1pbHkiLCJ0ZXh0QWxpZ24iLCJsYWJlbF9hbGlnbl9ob3IiLCJ0ZXh0QmFzZWxpbmUiLCJsYWJlbF9hbGlnbl92ZXIiLCJmb250X2NvbG9yIiwiZm9udF9vcGFjaXR5IiwiaW1hZ2UiLCJsaW5lX2Fycm93cyIsImZvckVhY2hTZWdtZW50IiwibGluZV9hcnJvd3NfcmFkaXVzIiwic3RhcnQiLCJlbmQiLCJsaW5lX2Fycm93c19taW56b29tIiwiZ2V0UGl4ZWxGcm9tQ29vcmRpbmF0ZSIsInNxcnQiLCJwb3ciLCJyb3RhdGVXaXRoVmlldyIsImF0YW4yIiwibGluZV9hcnJvd3NfYmFjayIsImVkaXRvckNvbmZpZyIsImNvbGxlY3QiLCJlZGl0b3JfY29sbGVjdCIsImljb25TcmMiLCJlZGl0b3JfaWNvbiIsInZhcnMiLCJlZGl0b3JfdmFycyIsImVkaXRvcl9zb3J0IiwiQ3ljbGVNYXAiLCJHZXJtYW4iLCJHZXJtYW5UcmFuc3BvcnQiLCJMYW5kc2NhcGVNYXAiLCJNYXBuaWsiLCJUcmFuc3BvcnRNYXAiLCJOT05FIiwiVG9uZXIiLCJUb25lckxhYmVscyIsIlRvbmVyTGluZXMiLCJUZXJyYWluIiwiV2F0ZXJjb2xvciIsIm1hcHF1ZXN0IiwiTWFwUXVlc3RPcGVuIiwiTWFwUXVlc3RIeWIiLCJNYXBRdWVzdFNhdCIsIk1hcGJveCIsInRpbGVTaXplIiwiTWFwYm94Q2xhc3NpYyIsIk9wZW5NYXBUaWxlcyIsIk1WVCIsInRpbGVHcmlkIiwidGlsZWdyaWQiLCJjcmVhdGVYWVoiLCJ0aWxlUGl4ZWxSYXRpbyIsIlRpbGVIb3N0aW5nIiwiSEVSRSIsIlRodW5kZXJmb3Jlc3QiLCJpMThuIiwiTEFORyIsIk5BTUUiLCJDTE9TRSIsIlBPSU5UIiwiRlJFRUhBTkQiLCJMSU5FIiwiUE9MWUdPTiIsIkNJUkNMRSIsIlBFUklNRVRFUiIsIkxFTkdUSCIsIlNVUkZBQ0VBUkVBIiwiUkFESVVTIiwiUkVGUkVTSCIsIkNPUFlfVE9fQ0xJUEJPQVJEIiwiQ1RSTF9aT09NX0lOIiwiQ1RSTF9aT09NX09VVCIsIkNUUkxfWk9PTV9FWFQiLCJDVFJMX1pPT01fSE9NRSIsIkNUUkxfWk9PTV9QT1MiLCJDVFJMX1pPT01fU0xJREVSIiwiQ1RSTF9SRVNFVF9ST1RBVElPTiIsIkNUUkxfUE9SVFNJREUiLCJDVFJMX1JPVVRFUiIsIkNUUkxfRURJVE9SIiwiQ1RSTF9NRUFTVVJFVE9PTFMiLCJDVFJMX0lORk9QQUdFIiwiQ1RSTF9BRERJVElPTkFMUEFORUwiLCJDVFJMX0FDQ09VTlQiLCJDVFJMX1pPT01MRVZFTCIsIkNUUkxfTU9VU0VDT09SRFMiLCJDVFJMX0dFT1NFQVJDSCIsIkNUUkxfU1RBUlRfU0VBUkNIIiwiQ1RSTF9PVkVSVklFV01BUCIsIkNUUkxfR0VPQk9PS01BUktTIiwiQ1RSTF9TSURFQk9BUkQiLCJDVFJMX1NUQVJCT0FSRCIsIkNUUkxfQVRUUklCVVRJT04iLCJDVFJMX0dSSUQiLCJDVFJMX1BFUk1BTElOSyIsIkNUUkxfRlVMTFNDUkVFTiIsIkNUUkxfUFJJTlQiLCJFRElUT1IiLCJFRElUT1JfRU5BQkxFX0lOU1RBTlRfTUVBU1VSRSIsIkVESVRPUl9FTkFCTEVfRlJFRUhBTkRfRFJBVyIsIkVESVRPUl9GRUFUVVJFX0FQUExZIiwiRURJVE9SX0ZFQVRVUkVfREVMRVRFIiwiRURJVE9SX0ZFQVRVUkVfTU9ESUZZIiwiRURJVE9SX1NFTEVDVF9JTkZPIiwiRURJVE9SX1NFTEVDVF9JTkZPX0FERElUSU9OQUwiLCJFRElUT1JfVklFV19UUklHR0VSX1NFTEVDVCIsIkVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19QT0lOVCIsIkVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19GUkVFSEFORCIsIkVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19MSU5FU1RSSU5HIiwiRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX1BPTFlHT04iLCJFRElUT1JfVklFV19UUklHR0VSX0RSQVdfQ0lSQ0xFIiwiUE9QVVBfUk9VVEVfRlJPTSIsIlBPUFVQX1JPVVRFX1RPIiwiU1RBUkJPQVJEIiwiU1RBUkJPQVJEX0JBU0VMQVlFUiIsIlNUQVJCT0FSRF9MQVlFUiIsIlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfQkFTRUxBWUVSU1dJVENIRVIiLCJTVEFSQk9BUkRfVklFV19UUklHR0VSX0xBWUVSU1dJVENIRVIiLCJTSURFQk9BUkQiLCJST1VURVJfVklFV19BRERSRVNTX0lOUFVUIiwiUk9VVEVSX0ZST01fTEFCRUwiLCJST1VURVJfT1ZFUl9MQUJFTCIsIlJPVVRFUl9UT19MQUJFTCIsIlJPVVRFUl9DTEVBUl9USVRMRSIsIlJPVVRFUl9DTEVBUl9IVE1MIiwiUk9VVEVSX0xhYmVsX0ludGVyaW0iLCJST1VURVJfU1dJVENIIiwiUk9VVEVSX09WRVIiLCJST1VURVJfUFJJTlQiLCJST1VURVJfVklFV19MQUJFTF9ST1VURSIsIlJPVVRFUl9WSUVXX0xBQkVMX0RJU1RBTkNFIiwiUk9VVEVSX1ZJRVdfTEFCRUxfVElNRSIsIlJPVVRFUl9WSUVXX0xBQkVMX1BST0ZJTEUiLCJST1VURVJfVklFV19BTEVSVF9BRERSRVNTIiwiUk9VVEVSX1ZJRVdfQUxFUlRfR09DT0RJTkciLCJST1VURVIiLCJST1VURVJfTiIsIlJPVVRFUl9FIiwiUk9VVEVSX1MiLCJST1VURVJfVyIsIlJPVVRFUl9ORSIsIlJPVVRFUl9TRSIsIlJPVVRFUl9TVyIsIlJPVVRFUl9OVyIsIlJPVVRFUl9ESVJFQ1RJT05fMCIsIlJPVVRFUl9ESVJFQ1RJT05fMSIsIlJPVVRFUl9ESVJFQ1RJT05fMiIsIlJPVVRFUl9ESVJFQ1RJT05fMyIsIlJPVVRFUl9ESVJFQ1RJT05fNCIsIlJPVVRFUl9ESVJFQ1RJT05fNSIsIlJPVVRFUl9ESVJFQ1RJT05fNiIsIlJPVVRFUl9ESVJFQ1RJT05fNyIsIlJPVVRFUl9ESVJFQ1RJT05fOCIsIlJPVVRFUl9ESVJFQ1RJT05fMTAiLCJST1VURVJfRElSRUNUSU9OXzE1IiwiUk9VVEVSX0ZST00iLCJST1VURVJfVE8iLCJST1VURVJfRklORF9ST1VURSIsIlJPVVRFUl9MT0NfUk9VVEVfVE8iLCJST1VURVJfUk9VVEVERVNDIiwiUk9VVEVSX1JPVVRFTkFNRSIsIlJPVVRFUl9ESVNUQU5DRSIsIlJPVVRFUl9USU1FIiwiUk9VVEVSX1JFVl9HRU9DT0RJTkciLCJST1VURVJfRVJST1JfUkVWX0dFT0NPRElORyIsIlJPVVRFUl9TRUFSQ0hJTkciLCJST1VURVJfRVJST1JfU0VBUkNISU5HIiwiUk9VVEVSX0NBTENfUk9VVEUiLCJST1VURVJfRVJST1JfQ0FMQ19ST1VURSIsIk1FQVNVUkVUT09MUyIsIk1FQVNVUkVUT09MU19JTkZPIiwiTUVBU1VSRVRPT0xTX0lORk9fQURESVRJT05BTCIsIk1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfU0VMRUNUIiwiTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0xJTkVTVFJJTkciLCJNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfUE9MWUdPTiIsIk1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19DSVJDTEUiLCJNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfRlJFRUhBTkQiLCJHRU9CT09LTUFSS1NfUExBQ0VIT0xERVIiLCJJTkZPUEFHRSIsIkFERElUSU9OQUxQQU5FTCIsIkFERElUSU9OQUxQQU5FTF9WSUVXX1RSSUdHRVIiLCJBQ0NPVU5UIiwiQUNDT1VOVF9WSUVXX1RSSUdHRVIiLCJTRUFSQ0hfTk9UX0ZPVU5EIiwibGFuZ0NvbnN0YW50cyIsIk9QRU4iLCJDTE9TRUFCTEUiLCJFTkFCTEVEIiwiRElTQUJMRUQiLCJJQ09OIiwiQ09OVFJPTCIsIkNPUFkiLCJJTkFDVElWRSIsIkFOSU1BVElPTl9TUElOIiwiTEFSR0UiLCJTTUFMTCIsIkhPUklaT05UQUwiLCJWRVJUSUNBTCIsIkFUVFJJQlVUSU9OX0xPR08iLCJDT05UUk9MX0NPTlRBSU5FUl9UUiIsIkNPTlRST0xfQ09OVEFJTkVSX0JSIiwiRURJVE9SX0RSQVdfQ09OVEVOVF9QT0lOVCIsIkVESVRPUl9EUkFXX0NPTlRFTlRfRlJFRUhBTkQiLCJFRElUT1JfRFJBV19DT05URU5UX0xJTkVTVFJJTkciLCJFRElUT1JfRFJBV19DT05URU5UX1BPTFlHT04iLCJFRElUT1JfRFJBV19DT05URU5UX0NJUkNMRSIsIkVESVRPUl9EUkFXX0NPTlRFTlRfUFJPSkVDVCIsIkVESVRPUl9EUkFXX1RSSUdHRVIiLCJFRElUT1JfQ09OVEVOVF9TRUxFQ1QiLCJFRElUT1JfRFJBV19PUFRJT05TIiwiR0VPU0VBUkNIIiwiR0VPU0VBUkNIX1dSQVBQRVIiLCJHRU9TRUFSQ0hfVFJJR0dFUiIsIkdFT1NFQVJDSF9TVEFSVCIsIkdSQVRJQ1VMRSIsIlBSSU5UIiwiSU5GT1BBR0VfVklFV19UUklHR0VSIiwiT1ZFUlZJRVdNQVAiLCJPVkVSVklFV01BUF9XUkFQUEVSIiwiR0VPQk9PS01BUktTIiwiUEVSTUFMSU5LIiwiUEVSTUFMSU5LX1BPUFVQIiwiUE9QVVBfQ0xPU0UiLCJQT1BVUF9ST1VURV9XUkFQUEVSIiwiUE9SVFNJREUiLCJQT1JUU0lERV9DT05UQUlORVIiLCJQT1JUU0lERV9DT05UUk9MIiwiUE9SVFNJREVfV1JBUFBFUiIsIlBPUlRTSURFX1RJVExFQkFSIiwiUE9SVFNJREVfVE9QX1RPT0xCQVIiLCJQT1JUU0lERV9DT05URU5UX0NPTlRBSU5FUiIsIlBPUlRTSURFX0JPVFRPTV9UT09MQkFSIiwiUE9SVFNJREVfU1RBVFVTQkFSIiwiUE9SVFNJREVfVklFV1RSSUdHRVJCQVIiLCJQT1JUU0lERV9IRUFETElORSIsIlBPUlRTSURFX0JVVFRPTkJBUiIsIlBPUlRTSURFX0JVVFRPTiIsIlBPUlRTSURFX0hJREUiLCJQT1JUU0lERV9DTE9TRSIsIlNQSU5ORVIiLCJTVEFSQk9BUkRfQ09OVEFJTkVSIiwiU1RBUkJPQVJEX0NPTlRST0wiLCJTVEFSQk9BUkRfV1JBUFBFUiIsIlNUQVJCT0FSRF9USVRMRUJBUiIsIlNUQVJCT0FSRF9DT05URU5UX0NPTlRBSU5FUiIsIlNUQVJCT0FSRF9CT1RUT01fVE9PTEJBUiIsIlNUQVJCT0FSRF9TVEFUVVNCQVIiLCJTVEFSQk9BUkRfVklFV1RSSUdHRVJCQVIiLCJTVEFSQk9BUkRfSEVBRExJTkUiLCJTVEFSQk9BUkRfQlVUVE9OQkFSIiwiU1RBUkJPQVJEX0JVVFRPTiIsIlNUQVJCT0FSRF9DTE9TRSIsIlNUQVJCT0FSRF9DT05URU5UX0JBU0VMQVlFUlNXSVRDSEVSIiwiU1RBUkJPQVJEX0JBU0VMQVlFUlRSRUUiLCJTVEFSQk9BUkRfTEFZRVJUUkVFIiwiU1RBUkJPQVJEX0NPTlRFTlRfTEFZRVJTV0lUQ0hFUiIsIlRPT0xUSVBfUE9QVVAiLCJaT09NX0xFVkVMIiwiUk9VVEVSX0lOUFVUX1dSQVBQRVIiLCJST1VURVJfUFJPRklMRV9XUkFQUEVSIiwiUk9VVEVSX0lOUFVUX0ZST00iLCJST1VURVJfSU5QVVRfVE8iLCJST1VURVJfSU5QVVRfQ0xFQVIiLCJST1VURVJfQlVUVE9OQkFSIiwiUk9VVEVSX0FUVFJJQlVUSU9OX1dSQVBQRVIiLCJST1VURVJfSU5TVFJVQ1RJT05TX1dSQVBQRVIiLCJST1VURVJfSU5TVFJVQ1RJT05TX0hFQURFUiIsIlJPVVRFUl9QUk9GSUxFX0NBUiIsIlJPVVRFUl9QUk9GSUxFX0hHViIsIlJPVVRFUl9QUk9GSUxFX0JJS0UiLCJST1VURVJfUFJPRklMRV9GT09UIiwiUk9VVEVSX1BST0ZJTEVfV0hFRUxDSEFJUiIsIlJPVVRFUl9JTlNUUlVDVElPTlNfVEFCTEUiLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU0iLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fT0REIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0VWRU4iLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9JQ09OIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9URVhUIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9ESVNUQU5DRSIsIk9MX0NPTlRST0wiLCJPTF9PVkVSTEFZQ09OVEFJTkVSIiwiT0xfT1ZFUkxBWUNPTlRBSU5FUl9TRSIsIk9MX1ZJRVdQT1JUIiwiT0xfWk9PTSIsIk9MX1pPT01fSU4iLCJPTF9aT09NX0VYVCIsIk9MX1pPT01fSE9NRSIsIk9MX1pPT01fUE9TIiwiT0xfWk9PTV9XSVRIX0VYVCIsIk9MX1pPT01fV0lUSF9IT01FIiwiT0xfWk9PTV9XSVRIX1BPUyIsIk9MX1pPT01fU0xJREVSIiwiT0xfWk9PTV9XSVRIX1NMSURFUiIsIkdyaWQiLCJidXR0b24iLCJvYmpHcmlkIiwiR3JhdGljdWxlIiwic2hvd0xhYmVscyIsInN3aXRjaGFibGUiLCJ0aXBMYWJlbCIsImRpc2FibGVMYWJlbCIsInNldE1hcCIsImdldE1hcCIsImRpc2FibGUiLCJyZW1vdmVDbGFzcyIsImV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiYmx1ciIsInRpdGxlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkNvbnRyb2wiLCJjYWxsIiwidGFyZ2V0IiwiaW5oZXJpdHMiLCJwcm90b3R5cGUiLCJPdmVydmlld01hcCIsInRyaWdnZXIiLCJ0cmlnZ2VySWNvbiIsIm92bSIsImNvbGxhcHNlZCIsImNsaWNrIiwiaWdub3JlIiwiY29sbGFwc2libGUiLCJQZXJtYWxpbmsiLCJjb3B5QnV0dG9uIiwicmVmcmVzaEJ1dHRvbiIsImdldFBhcmFtZXRlciIsInBvcHVwQXR0YWNoZWQiLCJ0ZXh0ZmllbGQiLCJDbGlwYm9hcmQiLCJnZW5lcmF0ZUxpbmtGcm9tQ3VycmVudFN0YXRlIiwib3BlbiIsInNsaWRlRG93biIsImNsb3NlIiwibWFwVmlldyIsInBhcmFtZXRlcnMiLCJsaW5rIiwiYmFzZUxheWVySWR4IiwibGF5ZXJJZHgiLCJwYXJhbUNvdW50IiwidG9GaXhlZCIsImRlbHRhRW5jb2RlIiwiam9pbiIsInNldFVybFBhcmFtIiwiZ2VuZXJhdGVMaW5rIiwiQWNjb3VudCIsImhlYWRsaW5lIiwiY3JlYXRlIiwiZGlyZWN0aW9uIiwibWFpblNlY3Rpb24iLCJTaWRlYm9hcmQiLCJpbml0Iiwidmlld0FjY291bnQiLCJhZGRBY2NvdW50VmlldyIsImFjdGl2YXRlIiwibWFpblNlY3Rpb25BY2NvdW50IiwiYWNjb3VudCIsImNvbnRlbnRDb250YWluZXIiLCJzZXRFbGVtZW50IiwiYWNjb3VudFZpZXciLCJhZGRWaWV3IiwidHJpZ2dlckNvbmZpZyIsIndpdGhIZWFkbGluZSIsInNlY3Rpb25FbGVtZW50cyIsInNlY3Rpb24iLCJ0b3BUb29sYmFyIiwidmlld1RyaWdnZXJCYXIiLCJhZGRBY2NvdW50IiwiVFJJR0dFUl9BQ0NPVU5UIiwiaW50ZXJhY3Rpb24iLCJpbml0RnVuY3Rpb24iLCJDb2xsZWN0aW9uIiwiYWN0aXZhdGVGdW5jdGlvbiIsImRlYWN0aXZhdGVGdW5jdGlvbiIsIkVkaXRvciIsImRhdGFGaWVsZCIsImRyYXdNb2RlcyIsInRhYnMiLCJsYXN0RHJhd0ludGVyYWN0aW9uIiwib3B0X2V4dGVybmFsaW5pdCIsImxheWVyU3R5bGVGdW5jdGlvbiIsInZpZXdTZWxlY3QiLCJlZGl0UG9pbnRMYXllciIsImVkaXRMaW5lTGF5ZXIiLCJlZGl0UG9seWdvbkxheWVyIiwiZWRpdENpcmNsZUxheWVyIiwiZWRpdEZyZWVoYW5kTGF5ZXIiLCJlZGl0TGF5ZXJHcm91cCIsImFkZFNlbGVjdFZpZXciLCJnZXRKU09OIiwiYXBpIiwicHJvZmlsZSIsInN0eWxlc19wb2ludCIsImFkZERyYXdWaWV3Iiwic3R5bGVzX2xpbmUiLCJzdHlsZXNfcG9seWdvbiIsInN0eWxlc19jaXJjbGUiLCJzdHlsZXNfZnJlZWhhbmQiLCJlZGl0b3JfbG9hZFRhYnMiLCJpbXBvcnRHZW9KU09OIiwibG9hZCIsInNhdmUiLCJpbml0aWFsaXplZCIsInByZUNsb3NlRnVuY3Rpb24iLCJnZXRWaXNpYmxlIiwicHJlT3BlbkZ1bmN0aW9uIiwic2VsZWN0SW50ZXJhY3Rpb24iLCJzZWxlY3RCb3hJbnRlcmFjdGlvbiIsInNlbGVjdGVkRmVhdHVyZXMiLCJzZWxlY3RDb250ZW50V3JhcHBlciIsInNlbGVjdENvbnRlbnRIZWFkbGluZSIsInNlbGVjdENvbnRlbnQiLCJzZWxlY3RDb250ZW50SW5mbyIsInNlbGVjdFZpZXciLCJmbkhhbmRsZVNlbGVjdGlvbiIsIlNlbGVjdCIsInRvZ2dsZUNvbmRpdGlvbiIsImV2ZW50cyIsImNvbmRpdGlvbiIsInBsYXRmb3JtTW9kaWZpZXJLZXlPbmx5Iiwic3R5bGVBcnJheSIsInN0eWxlUmFkaXVzIiwiRHJhZ0JveCIsInNoaWZ0S2V5T25seSIsImZvckVhY2hGZWF0dXJlSW50ZXJzZWN0aW5nRXh0ZW50IiwiY2xlYXIiLCJlZGl0b3JWYXJzIiwiaGVhZGxpbmVFbGVtZW50IiwiaW5wdXROYW1lRWxlbWVudCIsIm1vZGlmeUJ1dHRvbkVsZW1lbnQiLCJkZWxldGVCdXR0b25FbGVtZW50IiwicGFyYWdyYXBoRWxlbWVudCIsInN0cm9uZ0VsZW1lbnQiLCJpbnB1dEVsZW1lbnQiLCJmZWF0dXJlQ291bnQiLCJzZWxlY3RlZEZlYXR1cmUiLCJibHVyT25FbnRlciIsImlucHV0Q2hhbmdlSGFuZGxlciIsIm5hbWVDaGFuZ2VIYW5kbGVyIiwibW9kaWZ5RmVhdHVyZUZ1bmN0aW9uIiwiZGVsZXRlRmVhdHVyZUZ1bmN0aW9uIiwicmVuZGVyU2VsZWN0ZWRGZWF0dXJlc0xpc3QiLCJhcHBseUZlYXR1cmVNb2RpZmljYXRpb24iLCJ3aGljaCIsImNoYW5nZWRGZWF0dXJlIiwiZW5jb2RlR2VvSnNvblByb3BlcnR5IiwiZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkIiwiYWN0aW9uIiwiY3VycmVudFZhcnMiLCJtb2RpZnlGZWF0dXJlIiwiZmVhdHVyZUdlb21ldHJ5IiwidHJhbnNsYXRlSW50ZXJhY3Rpb24iLCJtb2RpZnlJbnRlcmFjdGlvbiIsIm1vZGlmeUJ1dHRvbiIsImFwcGx5QnV0dG9uIiwiVHJhbnNsYXRlIiwiYWRkSW50ZXJhY3Rpb24iLCJNb2RpZnkiLCJzZXRBY3RpdmUiLCJyZW1vdmVJbnRlcmFjdGlvbiIsInBhcmVudE5vZGUiLCJyZXBsYWNlQ2hpbGQiLCJmZWF0dXJlSW5kZXgiLCJmZWF0dXJlU291cmNlIiwiZGVsZXRlRmVhdHVyZSIsInJlbW92ZSIsImdldExlbmd0aCIsImRlY29kZUdlb0pzb25Qcm9wZXJ0eSIsImtleWRvd24iLCJvbmNoYW5nZSIsImh0bWxWYWx1ZSIsInVwZGF0ZSIsIm1hcEhvdmVyIiwiZGVhY3RpdmF0ZSIsIlRSSUdHRVJfRFJBVyIsImRyYXdDb250ZW50Iiwib3B0aW9uc0RpdiIsImVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3giLCJlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94TGFiZWwiLCJjaGVja2JveENoYW5nZUhhbmRsZXIiLCJkcmF3VmlldyIsImFkZERyYXdTdHlsZSIsIm9sVHlwZSIsInRvVXBwZXJDYXNlIiwiaW50ZXJhY3Rpb25WaWV3IiwiZWRpdG9yU3R5bGUiLCJzdHlsZUljb24iLCJzdHlsZUltYWdlIiwic3R5bGVUcmlnZ2VyTGFiZWwiLCJmZWF0dXJlSWRDb3VudCIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwibWFyZ2luIiwiZWRpdG9yX2ljb25fc2l6ZSIsImdldFNyYyIsImdldFNjYWxlIiwiYmFja2dyb3VuZCIsImdldEZpbGwiLCJnZXRDb2xvciIsImJvcmRlciIsImdldFN0cm9rZSIsImludGVyYWN0aW9uU3R5bGVJbWFnZSIsImFjdGl2ZVNrZXRjaCIsImFjdGl2ZVRvb2x0aXAiLCJEcmF3IiwiZnJlZWhhbmQiLCJnZXRXaWR0aCIsImNoZWNrZWQiLCJUb29sdGlwUG9wVXAiLCJwb3NpdGlvbiIsImNvb3JkaW5hdGUiLCJob3Jpem9udGFsIiwibWVhc3VyZUdlb21ldHJ5IiwicmF3VmFsdWUiLCJzZXRQb3NpdGlvbiIsInNldENvbnRlbnQiLCJmaW5pc2hEcmF3aW5nIiwibmVlZGVkU3R5bGVzIiwic29ydEFuZEFkZFN0eWxlcyIsImFyclN0eWxlSWRzIiwibG9jYXRpb25TdHlsZXMiLCJkcmF3SW50ZXJhY3Rpb24iLCJvcHRfc2xvdCIsInNhdmVEYXRhIiwic2xvdE5hbWUiLCJzdG9yYWdlIiwiZXhwb3J0R2VvSlNPTiIsIndyaXRlRmVhdHVyZXMiLCJsaW5lcyIsInBvbHlnb25zIiwiY2lyY2xlcyIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJzZXNzaW9uU3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsImVkaXRvcl9vblNhdmUiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImxvYWREYXRhIiwiZmVhdHVyZUNvbGxlY3Rpb24iLCJpbXBvcnRGZWF0dXJlcyIsImdldEl0ZW0iLCJwYXJzZSIsImNvbmNhdCIsImluQXJyYXkiLCJlZGl0b3Jfb25Mb2FkIiwidmFsIiwib3B0X2dlb2pzb24iLCJmaXRUb0V4dGVudCIsImdldEV4dGVudEZvckdlb21ldHJpZXMiLCJjb250YWluZXIiLCJvZmZzZXRXaWR0aCIsIk1lYXN1cmV0b29scyIsImZpcnN0RWxlbWVudCIsIm1lYXN1cmVMaW5lTGF5ZXIiLCJtZWFzdXJlUG9seWdvbkxheWVyIiwibWVhc3VyZUNpcmNsZUxheWVyIiwibWVhc3VyZUZyZWVoYW5kTGF5ZXIiLCJtZWFzdXJlTGF5ZXJHcm91cCIsInZpZXdNZWFzdXJlU2VsZWN0Iiwidmlld01lYXN1cmVMaW5lIiwiYWRkTWVhc3VyZVZpZXciLCJ2aWV3TWVhc3VyZUFyZWEiLCJ2aWV3TWVhc3VyZVJhZGl1cyIsInZpZXdNZWFzdXJlRnJlZWhhbmQiLCJtYWluU2VjdGlvbkluZm8iLCJsaW5lRmVhdHVyZXMiLCJwb2x5Z29uRmVhdHVyZXMiLCJjaXJjbGVGZWF0dXJlcyIsImZyZWVoYW5kRmVhdHVyZXMiLCJtZWFzdXJlVmlldyIsImFkZE1lYXN1cmVGZWF0dXJlIiwidXBkYXRlTWVhc3VyZUZlYXR1cmUiLCJnZXRWYWx1ZU9mR2VvbWV0cnkiLCJnZXRMZW5ndGhPZk1lYXN1cmUiLCJyZW1vdmVNZWFzdXJlRmVhdHVyZSIsImxpc3RFbGVtZW50IiwibGFiZWxFbGVtZW50Iiwic3BhbkVsZW1lbnQiLCJzdHJMYWJlbCIsInN0clR5cGUiLCJtZWFzdXJlQXJlYSIsIm1lYXN1cmVSYWRpdXMiLCJjaGlsZEVsZW1lbnRDb3VudCIsInJlbW92ZUNoaWxkIiwiY2hhbmdlIiwiZmVhdHVyZVRvb2x0aXAiLCJuZXdDb250ZW50IiwiYXJlYSIsImxlbmciLCJ2YWx1ZW51bWIiLCJtYXRjaCIsImxlbmd0aG51bWIiLCJjbG9zZWFibGUiLCJjbG9zZUZ1bmN0aW9uIiwiUm91dGVyIiwidmlld1JvdXRlciIsInByb2ZpbGVJZCIsInJvdXRlcl9mcm9tX2xvY3N0eWxlIiwicm91dGVyX3RvX2xvY3N0eWxlIiwicm91dGVyX3BvaW50X2xvY3N0eWxlIiwicm91dGluZ0FsdFdheVNvdXJjZSIsInJvdXRpbmdXYXlTb3VyY2UiLCJyb3V0ZXJXYXlMYXllciIsInJvdXRlckFsdFdheUxheWVyIiwic2VsZWN0ZWQiLCJzaG93QWx0Um91dGUiLCJyb3V0aW5nSGludFNvdXJjZSIsInJvdXRlckhpbnRMYXllciIsImxvY2F0aW9uc1NvdXJjZSIsImxvY2F0aW9uc0xheWVyIiwicm91dGVyTGF5ZXJHcm91cCIsImFkZFVzZXJJbnRlcmZhY2UiLCJnZW9TZWFyY2hBcGkiLCJnZW9SZXZlcnNlU2VhcmNoQXBpIiwiZ2Vvc2VhcmNoX3JldmVyc2UiLCJyb3V0aW5nQXBpIiwicm91dGluZyIsImFkZE1hcElucHV0SW50ZXJhY3Rpb24iLCJ0b0xvbkxhdCIsInBlcmZvcm1SZXZlcnNlU2VhcmNoIiwiJHRvSW5wdXQiLCJ0b1ZhbHVlIiwicHJlSGlkZUZ1bmN0aW9uIiwicmVtb3ZlTWFwSW5wdXRJbnRlcmFjdGlvbiIsInJvdXRlckluc3RydWN0aW9uc1dyYXBwZXIiLCJlbXB0eSIsImNsZWFySW5wdXQiLCIkZnJvbUlucHV0Iiwib3ZlclZhbHVlIiwiY2xlYXJPdmVyIiwiJG92ZXJJbnB1dCIsImVsZW0iLCJnZXRFbGVtZW50QnlJZCIsInVuIiwiZm5NYXBSb3V0ZXJJbnRlcmFjdGlvbiIsImV2dCIsImZyb21WYWx1ZSIsIiRidXR0b25PdmVyIiwicHJvcCIsImdldEludGVyYWN0aW9ucyIsInJvdXRlclZpZXciLCJyb3V0ZXJWaWV3SW5wdXRXcmFwcGVyIiwicm91dGVyVmlld0NvbnRlbnRXcmFwcGVyIiwicm91dGVyVmlld0NvbnRlbnRIZWFkbGluZSIsInByaW50Iiwicm91dGVQcm9maWxlIiwicm91dGVyRnJvbUxhYmVsIiwicm91dGVyT3ZlckxhYmVsIiwicm91dGVyVG9MYWJlbCIsInJvdXRlckZyb21DbGVhciIsInJvdXRlck92ZXJDbGVhciIsInJvdXRlclRvQ2xlYXIiLCJzd2l0Y2hGcm9tVG8iLCJidXR0b25PdmVyIiwiZnJvbUlucHV0V3JhcHBlciIsImZyb21JbnB1dCIsIiRyb3V0ZXJGcm9tQ2xlYXIiLCIkc3dpdGNoRnJvbVRvIiwiJHByaW50Iiwicm91dGVyQnV0dG9uQmFyIiwicm91dGVyX2FwaV9zZWxlY3Rpb24iLCJrZXlzIiwicm91dGVyX3Byb2ZpbGVzIiwiYWN0aXZlIiwiY2FyIiwiJHJvdXRlUHJvZmlsZUNhciIsImNsZWFyU2libGluZ3MiLCJyZWNhbGN1bGF0ZVJvdXRlIiwiaGd2IiwiJHJvdXRlUHJvZmlsZUhndiIsInNwYW5CaWtlIiwiYmlrZSIsImxpc3QiLCIkcm91dGVQcm9maWxlQmlrZSIsImNoaWxkQ2xpY2siLCJwYXJlbnQiLCJzcGFuRm9vdCIsImZvb3QiLCIkcm91dGVQcm9maWxlRm9vdCIsIndoZWVsY2hhaXIiLCIkcm91dGVQcm9maWxlV2hlZWxjaGFpciIsIiRlbGVtZW50Iiwic2libGluZ3MiLCJwcmV2ZW50RGVmYXVsdCIsIm92ZXJJbnB1dFdyYXBwZXIiLCJvdmVySW5wdXQiLCIkcm91dGVyT3ZlckNsZWFyIiwicGVyZm9ybVNlYXJjaCIsInN3aXRjaFZhck5hbWUiLCJzd2l0Y2hWYXJWYWwiLCJyb3V0aW5nQ29udGVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJXaW5QcmludCIsIndyaXRlIiwiZm9jdXMiLCJ0b0lucHV0V3JhcHBlciIsInRvSW5wdXQiLCIkcm91dGVyVG9DbGVhciIsInN0YXR1c0JhciIsImdldEF0dHJpYnV0aW9uIiwic2V0SW5wdXQiLCJmcm9tIiwiYXR0cmlidXRpb25TZWFyY2giLCJhdHRyaWJ1dGlvblJvdXRlciIsImF0dHJpYnV0aW9uUm91dGVySG9zdCIsImF0dHJpYnV0aW9uV3JhcHBlciIsImF0dHJpYnV0aW9uSHRtbCIsInJvdXRlcl9hdHRyaWJ1dGlvbiIsInRtcEZlYXR1cmUiLCJjbG9uZSIsInByb3B0Iiwicm91dGVyX2ludGVyaW1fbG9jc3R5bGUiLCJwZXJmb3JtVmlhUm91dGUiLCJmcm9tUG9pbnQiLCJ0b1BvaW50Iiwib3ZlclBvaW50IiwiZnJvbUNvb3JkIiwidG9Db29yZCIsIm92ZXJDb29yZCIsIkFycmF5Iiwic2hvd1JvdXRlIiwicm91dGVSZXNwb25zZSIsInNob3dSb3V0ZUxheWVyIiwic2hvd1JvdXRlSW5zdHJ1Y3Rpb25zIiwicm91dGVOdW1iZXIiLCJ3YXlQb2x5bGluZSIsInJvdXRlRmVhdHVyZXMiLCJhbHRSb3V0ZUZlYXR1cmVzIiwicmlnaHRQYWRkaW5nIiwibGVmdFBhZGRpbmciLCJQb2x5bGluZSIsInJvdXRlcyIsInJvdXRlcl92aWFyb3V0ZV9wcmVjaXNpb24iLCJyb3V0ZV9nZW9tZXRyeSIsInJvdXRlcl9hbHRlcm5hdGl2ZSIsInJlbmRlclN5bmMiLCJhbmltYXRlIiwiRGF0ZSIsImR1cmF0aW9uIiwiYWN0aXZlUG9ydHNpZGUiLCJvdXRlcldpZHRoIiwiYWN0aXZlU3RhcmJvYXJkIiwiZml0IiwiZ2V0U2l6ZSIsInBhZGRpbmciLCJnZXRJbnN0cnVjdGlvbkljb24iLCJzdHJNb2QiLCJnZXRJbnN0cnVjdGlvbkljb25PUlMiLCJpbnRUeXBlIiwiaHJlZiIsImdldFR5cGVUZXh0IiwidGV4dElEIiwiZ2V0TW9kaWZpZXJUZXh0Iiwic3RyTW9kaWZpZXIiLCJnZXREcml2aW5nSW5zdHJ1Y3Rpb25JY29uIiwiaW5zdHJ1Y3Rpb25JZCIsImdldFRleHQiLCJ0ZXh0X2lkIiwiZ2V0RHJpdmluZ0luc3RydWN0aW9uIiwiZGVzY3JpcHRpb24iLCJyb3V0ZXJJbnN0cnVjdGlvbiIsInJvdXRlckluc3RydWN0aW9uc0hlYWRlciIsInJvdXRlckluc3RydWN0aW9uc0h0bWwiLCJpbnN0ciIsInJvd3N0eWxlIiwicm91dGVfbmFtZV8wIiwicm91dGVfbmFtZV8xIiwidG90YWxfZGlzdGFuY2UiLCJ0b3RhbF90aW1lIiwibGVncyIsInN1bW1hcnkiLCJ0b0h1bWFuRGlzdGFuY2UiLCJ0b0h1bWFuVGltZSIsInJvdXRlX25hbWUiLCJyb3V0ZV9zdW1tYXJ5Iiwic3RlcHMiLCJtYW5ldXZlciIsIm1vZGlmaWVyIiwiaW5zdHJ1Y3Rpb250ZXh0IiwiZXhpdCIsInJvdXRlX2luc3RydWN0aW9ucyIsInNlZ21lbnRzIiwiaW5zdHJ1Y3Rpb24iLCJhZGp1c3RJbnN0cnVjdGlvbk1hcEludGVyYWN0aW9uIiwiZm5JdGVtQ2xpY2siLCJmbkl0ZW1PdmVyIiwiZm5JdGVtT3V0IiwiY3VycmVudENvb3JkaW5hdGVzIiwiY3VycmVudEhpbnRGZWF0dXJlIiwiY29vcmRMb25MYXQiLCJzdHJpbmdsb25sYXQiLCJuZXdDb29yZCIsIiRpbnB1dCIsImFkZHJlc3MiLCJjaXR5Iiwicm9hZCIsInRvd24iLCJob3VzZV9udW1iZXIiLCJhdHRyIiwiYm91bmRzIiwidmlld2JveCIsImNhbGN1bGF0ZUV4dGVudCIsImVuY29kZVVSSSIsImFsZXJ0IiwiZXJyb3IiLCJST1VURVJfVklFV19BTEVSVF9HRU9DT0RJTkciLCJkaXN0YW5jZUluTWV0ZXJzIiwiaHVtYW5EaXN0YW5jZSIsInRpbWVJblNlY29uZHMiLCJzZWNvbmRzIiwibWludXRlcyIsImhvdXJzIiwiaHVtYW5UaW1lIiwiUHJpbnQiLCJlbmFibGVkIiwidG9CbG9iIiwiYmxvYiIsImJvZHkiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJkb3dubG9hZCIsInJldm9rZU9iamVjdFVSTCIsImV4dERpdiIsImRlZmF1bHRPcGVuIiwiaWRlbnRpZmllciIsImNzc25hbWUiLCJ3cmFwcGVyIiwidGl0bGVCYXIiLCJib3R0b21Ub29sYmFyIiwic2VjdGlvbnMiLCJ2aWV3cyIsImFjdGl2ZVZpZXciLCJwYXVzZWRWaWV3IiwiaW5pdENsYXNzIiwidGl0bGVCdXR0b25CYXIiLCJjbG9zZUJ1dHRvbiIsImNhcGl0YWxpemVkTmFtZSIsImhpZGVCdXR0b24iLCJjYWNoaW5nIiwiY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIiwibWVzc2FnZSIsImdldFRhcmdldCIsImFwcGVuZCIsImFkZFNlY3Rpb24iLCJjb250ZW50SGVhZGxpbmUiLCJTcGlubmVyIiwiZ2V0VmFsdWUiLCJvcHRfZXZlbnQiLCJjb250ZW50Q29udGFpbmVyT3V0ZXJIZWlnaHQiLCJjb250YWluZXJPZmZzZXRXaWR0aCIsIm91dGVySGVpZ2h0Iiwic3RvcmVWYWx1ZSIsInBvc3RPcGVuRnVuY3Rpb24iLCJpc09wZW4iLCJvcHRfaGlkZSIsIm9wdF9vcGVuT3RoZXJTaWRlYm9hcmQiLCJtYWtlQnV0dG9uIiwiY2xpY2tBY3Rpb24iLCJnZXRFbGVtZW50IiwibmV3RWxlbWVudCIsIm9wdF92aWV3U2NvcGUiLCJ2aWV3U2NvcGUiLCJhZGRpdGlvbmFsVHJpZ2dlckNsYXNzIiwicGF1c2VkIiwib3B0X29wZW5TaWRlYm9hcmQiLCJvcHRfcGF1c2UiLCJTdGFyYm9hcmQiLCJmaWx0ZXIiLCJwbHVnaW4iLCJyZW5kZXJMYXllcnRyZWUiLCJmblJlbmRlciIsImRpc3BsYXlMYXllcnN3aXRjaGVyIiwicGx1Z2lucyIsImxheWVyQ29udHJvbGxlciIsImxheWVyU3dpdGNoZXJDcmVhdGUiLCJsYXllcnN3aXRjaGVyIiwiTGF5ZXJzd2l0Y2hlciIsInN0YXJib2FyZF9sb2FkUGx1Z2lucyIsImJhc2VsYXllclN3aXRjaGVyQ3JlYXRlIiwiYmFzZWxheWVyc3dpdGNoZXIiLCJCYXNlbGF5ZXJzd2l0Y2hlciIsImxvYWRDb250ZW50IiwiY29udGVudFdyYXBwZXIiLCJjb250ZW50SW5mbyIsImJhc2VsYXllclN3aXRjaGVyVGl0bGUiLCJjb250ZW50RGl2IiwiZmlyc3RDaGlsZCIsImZuRHJhd0NvbnRlbnQiLCJiYXNlTGF5ZXJDb250cm9sIiwiYWRkSXRlbXMiLCJiYXNlbGF5ZXJDb250cm9sbGVyIiwiaXRlbURhdGEiLCJ3cmFwcGVyRWxlbWVudCIsImxpc3RJdGVtIiwiY2hpbGRMaXN0IiwiY2hpbGRJdGVtIiwiY2hpbGRFbnRyeSIsImVudHJ5IiwiJGVudHJ5IiwiaGFuZGxlRW50cnlDbGljayIsImhhbmRsZUNoYW5nZUJhc2VsYXllclZpc2liaWxpdHkiLCJwYXJzZUFzTGlzdCIsImJhc2VsYXllckl0ZW0iLCJyaWdodFNsaWRlRWxlbWVudHMiLCJiYXNlbGF5ZXJfY2hhbmdlZCIsImJhc2VsYXllckNvbmZpZyIsImNyZWF0ZVRleHROb2RlIiwib3ZlcmxheUlkIiwiY2hhbmdlT3BhY2l0eSIsImRlZmF1bHRfYmFzZWxheWVyIiwiZHYiLCJwbGFjZWhvbGRlciIsIm9ua2V5dXAiLCJmaWx0ZXJfdWxsaSIsInNob3dTdWJ0cmVlIiwiZ2V0Q2hpbGRyZW5CeVRhZ05hbWUiLCJ0YWdOYW1lIiwiZm91bmQiLCJtYXRjaEZsYWdVbCIsInN1YnRyZWVNYXRjaGVzIiwiaXNNYXRjaCIsInVsIiwiaGFzU3VidHJlZSIsImNsYXNzTGlzdCIsImFkZCIsInNldFRpbWVvdXQiLCJxdWVyeVNlbGVjdG9yIiwicHJvamVjdENvbmYiLCJjb250ZW50TG9hZGVkIiwiY29udGVudEhlYWRsaW5lTGluayIsInNlbGVjdG9yIiwibGF5ZXJTd2l0Y2hlclRpdGxlIiwib25jbGljayIsInN1YnN0cmluZyIsInN0eWxlRWwiLCJzdHlsZVNoZWV0IiwiaGVhZCIsInNoZWV0IiwiYWRkUnVsZSIsInN0eWxlU2hlZXRzIiwiaW5zZXJ0UnVsZSIsInRyZWVDb250cm9sIiwicFdyYXBwZXIiLCJjaGlsZFdyYXBwZXIiLCJjaGFuZ2VkTGF5ZXIiLCIkZW50cmllcyIsImhvb2tfbWFwX3pvb20iLCJlbnRyeVdyYXBwZXJzIiwiaW5zZXJ0QmVmb3JlIiwiY2hpbGRXcmFwcGVycyIsImZuSGFuZGxlRW50cnlDbGljayIsImZuQ2hpbGRFbnRyeUNsaWNrIiwiZm5DaGlsZEVudHJ5U2hvdyIsInpvb21Ub0V4dGVudCIsImxheWVyQ2xhc3MiLCJsYXllckl0ZW0iLCJoYW5kbGVTZWxlY3RlZENoaWxkcyIsInVwZGF0ZVBhcmVudExheWVycyIsInBhcmVudFVpZCIsImhpZGVDaGlsZExheWVyIiwic2hvd0NoaWxkTGF5ZXIiLCJzaW5nbGVMYXllciIsInZlY3RvckFycmF5IiwiY29vcmRzIiwiZmVhdHVyZUxpc3QiLCJmZWF0dXJlQXJyYXkiLCJjb29yZGluYXRlcyIsImdldFRvcFJpZ2h0IiwiZ2V0VG9wTGVmdCIsImdldEJvdHRvbVJpZ2h0IiwiZ2V0Qm90dG9tTGVmdCIsImJvdW5kaW5nRXh0ZW50IiwiSW5maW5pdHkiLCJpc05hTiIsImNoaWxkTGlzdEl0ZW0iLCIkY2hpbGRFbnRyeSIsImFkZENoaWxkcyIsInN0YXJib2FyZF9sYXllcl9hY3RpdmF0ZSIsInBhcmFtT2JqIiwiaWRzdHIiLCJsYXllcnN3aXRjaGVyX2ZvckVhY2hJdGVtIiwidGhhdCIsImNoZWNrQ2hpbGRTZWxlY3Rpb25zIiwiY2hpbGRBY3RpdmUiLCJjbGlja2VkTGF5ZXIiLCJwYXJlbnRFbnRyeSIsInBhcmVudExheWVyIiwiWm9vbWxldmVsIiwidXBkYXRlWm9vbWxldmVsIiwidW5kZWZpbmVkSFRNTCIsIkdlb1BpY2tlciIsIm1hcENvbnRhaW5lciIsImxhdElkeCIsImxvbklkeCIsImxhdFJuZCIsImxvblJuZCIsIiRmaWVsZEdlb1giLCJnZW9waWNrZXIiLCJpbnB1dF9nZW9feCIsIiRmaWVsZEdlb1kiLCJpbnB1dF9nZW9feSIsIm9wdGljTGF5ZXJTb3VyY2UiLCJvcHRpY0xheWVyVmVjdG9yIiwiZ2VvUGlja2VyU3R5bGVGdW5jdGlvbiIsIm9wdGljTGF5ZXJGZWF0dXJlIiwiYW5vbnltb3VzIiwicm91bmQiLCJyYW5kb20iLCJwaWNrZXJDb2xvciIsImdlb0xvY2F0aW9uIiwic2V0VHJhY2tpbmciLCJJbnRlcmFjdGlvbiIsImhhbmRsZUV2ZW50Iiwid2hpdGUiLCJyZXN1bHQiLCJtYXBCcm93c2VyRXZlbnQiLCJkaXNhYmxlQ2xpY2tFdmVudCIsImRpc2FibGVkIiwicGljayIsImFyckxhdExvbiIsInJlYWR5IiwiTWFwQ29udHJvbGxlciIsImxvZyIsIm1pc2MiLCJNYXBIb3ZlciIsImxpc3RlbmVyS2V5IiwibGFzdEZlYXR1cmVTdHlsZSIsImxhc3RIb3ZlcmVkRmVhdHVyZSIsImhvdmVyVG9vbHRpcCIsIm9mZnNldCIsImdldEhvdmVyRnVuY3Rpb24iLCJPYnNlcnZhYmxlIiwidW5CeUtleSIsImlzQWN0aXZlIiwiaG92ZXJlZCIsImNsdXN0ZXJlZCIsInRvb2x0aXBDb250ZW50IiwidG9vbHRpcEhlbHBlciIsInRvb2x0aXBMZW5ndGgiLCJmb3JFYWNoRmVhdHVyZUF0UGl4ZWwiLCJwaXhlbCIsImhvdmVyX3BvcHVwcyIsImhvdmVyX3BvcHVwc19zdGF5IiwibGFzdExheWVyU3R5bGUiLCJjaGlsZE5vZGVzIiwic2xpY2UiLCJzaW5nbGVUb29sdGlwIiwicmVwbGFjZUFsbFBsYWNlaG9sZGVycyIsInRyaW0iLCJnZXRDb29yZGluYXRlRnJvbVBpeGVsIiwiY2hhbmdlRmVhdHVyZVN0eWxlcyIsInNwaW5uZXJTcGFuIiwiYWRkaXRpb25hbEFjdGl2YXRpb25Db3VudGVyIiwiYWRkQ2xhc3NOYW1lIiwib3ZlcmxheSIsIk92ZXJsYXkiLCJpbnNlcnRGaXJzdCIsInBvc2l0aW9uaW5nIiwiYWRkT3ZlcmxheSIsInJlbW92ZU92ZXJsYXkiLCJnZXRDb250ZW50IiwiZ2V0UG9zaXRpb24iLCJNYXBQcm94eSIsImVkaXRvclN0eWxlcyIsImhvb2tfbWFwX2NsaWNrIiwicHJveHlfbGF5ZXJfbG9hZGVkIiwicmVxdWVzdCIsImxheWVyY29udGVudCIsImluZm93aW5kb3ciLCJsb2FkQmFzZUxheWVycyIsImxvYWRMYXllcnMiLCJhZGRQb3BVcCIsIm1hcF9jZW50ZXJfY2hhbmdlZCIsImNsaWNrRXZlbnQiLCJuZXdDZW50ZXIiLCJzdHlsZUZ1bmMiLCJzdHlsZUNsdXN0ZXIiLCJzZXRTY2FsZSIsImNsdXN0ZXJfYWxsIiwicGl4IiwibWF4IiwiciIsInNpbiIsImNvcyIsImNmIiwibGlua19uZXd3aW5kb3ciLCJmdW5jIiwiY29tYmluZUxheWVycyIsInBvcHVwQ29uZmlnIiwicm91dGVyIiwicm91dGVCdXR0b25XcmFwcGVyIiwicm91dGVGcm9tQnV0dG9uIiwicm91dGVGcm9tQnV0dG9uU3BhbiIsInJvdXRlVG9CdXR0b24iLCJyb3V0ZVRvQnV0dG9uU3BhbiIsInJvdXRpbmdIYW5kbGVyIiwiY3VycmVudFRhcmdldCIsInBvcFVwRWxlbWVudCIsInBvcFVwQ2xvc2VFbGVtZW50IiwicG9wVXBDb250ZW50IiwibmVlZGVkTGF5ZXJTdHlsZXMiLCJnZXRMYXllclN0eWxlcyIsImNvbnRlbnREYXRhTGF5ZXIiLCJsYXllckdyb3VwcyIsInN0eWxlcyIsIm9uZUZlYXR1cmUiLCJhbGxMYXllcnMiLCJtaXNzaW5nTGF5ZXIiLCJjbHVzdGVycyIsIm9wdF96b29tIiwibWluIiwic3RyaW5nIiwiY2hhckF0IiwiaW5wdXQiLCJvdXRwdXQiLCJwYXJhbSIsIm9wdF9nZXRLZXkiLCJvcHRfZXhlY3V0ZSIsInNlYXJjaFBhcmFtIiwicGFyYW1SZXBsYWNlZCIsIm9yaWdpbiIsImhhc2giLCJvcmlnaW5TdHJpbmciLCJnZXRVcmxQYXJhbSIsInJlZ0V4IiwiUmVnRXhwIiwiZXhlYyIsImFycklucHV0IiwiYXJyT3V0cHV0IiwiZGVsdGFEZWNvZGUiLCJhcnJIb29rRnVuY3Rpb25zIiwiaGV4Iiwib3B0X29wYWNpdHkiLCJvcHRfYXJyYXkiLCJiaWdpbnQiLCJnIiwicmVkdWNlZFN0eWxlIiwic2V0V2lkdGgiLCJvcHRfZm9yY2VMaW5lTWVhc3VyZSIsIm9wdF9mb3JjZVN1cmZhY2VNZWFzdXJlIiwic3BoZXJlIiwiY29vcmQxIiwiY29vcmQyIiwiZ2V0RGlzdGFuY2UiLCJhYnMiLCJnZXRBcmVhIiwiZWRnZUNvb3JkaW5hdGUiLCJhcnJHZW9tZXRyaWVzIiwiZXh0ZW50U291cmNlIiwiRXh0ZW50IiwiZXh0ZW50cyIsIm9wdF9wYWRkaW5nIiwib3B0X2FuaW1hdGlvbkR1cmF0aW9uIiwib3B0X21pblpvb20iLCJvcHRfbWF4Wm9vbSIsIm9wdF9taW5SZXNvbHV0aW9uIiwiZml0T3B0aW9ucyIsIm1pblJlc29sdXRpb24iLCJzdHJJbnB1dCIsIm9wdF9sYXllciIsInN0ck91dHB1dCIsInJlcGxhY2VGdW5jdGlvblBsYWNlaG9sZGVycyIsInJlcGxhY2VFZGl0b3JWYXJzUGxhY2Vob2xkZXJzIiwicmVwbGFjZUF0dHJpYnV0ZVBsYWNlaG9sZGVycyIsImZ1bmN0aW9uTmFtZSIsImV2S2V5Iiwib2JqZWN0IiwiZm5TdHlsZSIsImdldEN1cnJlbnRTdWJkb21haW4iLCJzY2FsZWxpbmUiLCJyZW1vdmVDb250cm9sIiwiU2NhbGVMaW5lIiwiYWRkQ29udHJvbCIsIk1vdXNlUG9zaXRpb24iLCJjb29yZGluYXRlRm9ybWF0IiwidG9TdHJpbmdIRE1TIiwicGVybWFsaW5rIiwiaW50ZXJhY3Rpb25zIiwiZGlzcGxheUFsbExvY2F0aW9ucyIsImRvbU1hcERpdiIsImtpbmV0aWMiLCJjb250cm9sQ29udGFpbmVyVG9wUmlnaHQiLCJjb250cm9sQ29udGFpbmVyQm90dG9tUmlnaHQiLCJzdGFyYm9hcmRfbGFiZWwiLCJsb2dvTGluayIsImxvZ29HcmFwaGljIiwicmVtb3ZlRWxlbWVudCIsImVuYWJsZVN0YXJib2FyZCIsImFkZElkVG9EaXYiLCJtYXBEaXYiLCJjYWxjX2V4dGVudCIsIm1lYXN1cmV0b29scyIsImluZm9wYWdlIiwiYWRkaXRpb25hbFBhbmVsIiwibWluX2dhcCIsImRpdiIsImdldF9wYXJhbWV0ZXIiLCJNb29Ub29scyIsIkJyb3dzZXIiLCJEb2N1bWVudCIsImdlb2xvY2F0aW9uIiwiR2VvbG9jYXRpb24iLCJ0cmFja2luZyIsImdlb2xvY2F0aW9uX3pvb20iLCJkZWZhdWx0cyIsIk1hcCIsImNoZWNrU3VtIiwibG9hZFRpbGVzV2hpbGVBbmltYXRpbmciLCJ1cGRhdGVTaXplIiwiaW5pdGlhbGl6ZSIsIm1vdXNlX25hdiIsImRyYWdfcGFuIiwiS2luZXRpYyIsIkRyYWdQYW4iLCJ3aGVlbF96b29tIiwiTW91c2VXaGVlbFpvb20iLCJkb3VibGVjbGlja196b29tIiwiRG91YmxlQ2xpY2tab29tIiwiZHJhZ196b29tIiwiRHJhZ1pvb20iLCJkcmFnX3JvdGF0ZV96b29tIiwiRHJhZ1JvdGF0ZUFuZFpvb20iLCJhbHRLZXlPbmx5IiwiZHJhZ19yb3RhdGUiLCJEcmFnUm90YXRlIiwidG91Y2hfbmF2Iiwicm90YXRlIiwiUGluY2hSb3RhdGUiLCJQaW5jaFpvb20iLCJjb25zdHJhaW5SZXNvbHV0aW9uIiwia2V5Ym9hcmRfbmF2IiwicGFuIiwiS2V5Ym9hcmRQYW4iLCJLZXlib2FyZFpvb20iLCJ6b29tX3BhbmVsIiwiem9vbV9zbGlkZXIiLCJab29tIiwiem9vbUluTGFiZWwiLCJ6b29tT3V0TGFiZWwiLCJ6b29tSW5UaXBMYWJlbCIsInpvb21PdXRUaXBMYWJlbCIsInpvb21zbGlkZXIiLCJab29tU2xpZGVyIiwiem9vbV9leHRlbnQiLCJab29tVG9FeHRlbnQiLCJ6b29tX2hvbWUiLCJIb21lIiwiem9vbV9wb3NpdGlvbiIsIlBvc2l0aW9uIiwiZXJyIiwiZnVsbHNjcmVlbiIsIkZ1bGxTY3JlZW4iLCJsYWJlbEFjdGl2ZSIsInJvdXRlcl9lbmFibGUiLCJpbml0T3BlbiIsImRhdGFfZmllbGQiLCJncmF0aWN1bGUiLCJSb3RhdGUiLCJJbmZvcGFnZSIsIkdlb1NlYXJjaCIsImNvbGxhcHNlZExhYmVsIiwic2VhcmNoWm9vbSIsInNlYXJjaHpvb20iLCJ6b29tQm91bmRzIiwiem9vbWJvdW5kcyIsInF1aWNrc2VhcmNoIiwibWFya1Jlc3VsdCIsIm1hcmtyZXN1bHQiLCJhdXRvcGljayIsInJlc3VsdHMiLCJnZW9ib29rbWFya3MiLCJHZW9Cb29rbWFyayIsIm5hbWVzcGFjZSIsIm92ZXJ2aWV3bWFwIiwiZ2VveEZpZWxkIiwiZ2VveUZpZWxkIiwibG9jR2VveCIsImxvY0dlb3kiLCJudW1lcml6ZWQiLCJ0cmFuc2Zvcm1lZCIsImNmZ19sb2dvIiwiQXR0cmlidXRpb24iLCJjb2xsYXBzZUxhYmVsIiwic2V0Q29sbGFwc2VkIiwidGhlbWVEYXRhIiwibWFpbkNvbG9yIiwiZm9udENvbG9yIiwic2hhZG93Q29sb3IiLCJzZXRQcm9wZXJ0eSIsImM0Z01hcHNIb29rcyIsImlzQXJyYXkiLCJtYXBDb250cm9sbGVyX2FkZENvbnRyb2xzIiwiQ29udGFpbmVyIiwib3ZlcmxheUxheWVyQ29uZmlnIiwib3NtU291cmNlQ29uZmlncyIsInN0YW1lblNvdXJjZUNvbmZpZ3MiLCJvdmVybGF5TGF5ZXIiLCJhcGlLZXkiLCJzZXRPcGFjaXR5Iiwib3ZlcmxheUFyciJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTyxJQUFNQSxzQkFBYjtBQUNJLG9DQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQ2YsYUFBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsYUFBS0MsYUFBTCxHQUFxQkQsTUFBTUUsT0FBTixDQUFjRCxhQUFuQztBQUNBLGFBQUtFLGFBQUwsR0FBcUIsRUFBckI7QUFDQSxhQUFLQyxZQUFMLEdBQW9CLEVBQXBCO0FBQ0g7O0FBTkw7QUFBQTtBQUFBLHlDQVFxQjtBQUNiLGdCQUFJQyxJQUFKOztBQUVBQSxtQkFBTyxJQUFQOztBQUVBQyxtQkFBT0MsSUFBUCxDQUFZLEtBQUtQLEtBQUwsQ0FBV1EsaUJBQXZCLEVBQXlDO0FBQ3JD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QUFnQ3ZZLEtBQWhDO0FBQ0g7QUFDSjtBQTlCTDs7QUFBQTtBQUFBLEkiLCJmaWxlIjoiYzRnLW1hcHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvYnVpbGQvXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtbWFpbi5qc1wiKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBhNWFkNGU3NjdlODQ0YmQyZTY3OCIsImltcG9ydCB7QzRnQmFzZWxheWVyfSBmcm9tIFwiLi9jNGctYmFzZWxheWVyXCI7XG5pbXBvcnQge0M0Z092ZXJsYXl9IGZyb20gXCIuL2M0Zy1vdmVybGF5XCI7XG5pbXBvcnQge2NvbmZpZ30gZnJvbSBcIi4vYzRnLW1hcHMtY29uZmlnXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcblxuZXhwb3J0IGNsYXNzIEM0Z0Jhc2VsYXllckNvbnRyb2xsZXIge1xuICAgIGNvbnN0cnVjdG9yKHByb3h5KSB7XG4gICAgICAgIHRoaXMucHJveHkgPSBwcm94eTtcbiAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyID0gcHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyO1xuICAgICAgICB0aGlzLmFyckJhc2VsYXllcnMgPSB7fTtcbiAgICAgICAgdGhpcy5iYXNlbGF5ZXJJZHMgPSBbXTtcbiAgICB9XG5cbiAgICBsb2FkQmFzZUxheWVycygpIHtcbiAgICAgICAgdmFyIHNlbGY7XG5cbiAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgalF1ZXJ5LmFqYXgodGhpcy5wcm94eS5hcGlfYmFzZWxheWVyX3VybCx7XG4gICAgICAgICAgICBkYXRhVHlwZTogdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuanNvbnAgPyBcImpzb25wXCIgOiBcImpzb25cIlxuICAgICAgICB9KVxuICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5iYXNlbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRCYXNlTGF5ZXJzKGRhdGEuYmFzZWxheWVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIEBUT0RPIGVycm9yLW1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgLy8gICAxKSBWaXNpYmxlIG1lc3NhZ2UgNCB1c2VycyAoaTE4bilcbiAgICAgICAgICAgICAgICAvLyAgIDIpIFRlY2huaWNhbCBjb25zb2xlLndhcm5cbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0FuIGVycm9yIG9jY3VyZWQgd2hpbGUgdHJ5aW5nIHRvIGxvYWQgdGhlIGJhc2VsYXllcnMuIERvIHlvdSBoYXZlIGNvbmZpZ3VyZWQgYSBkZWZhdWx0IHByb2ZpbGUgd2l0aCBiYXNlbGF5ZXJzPycpO1xuICAgICAgICAgICAgICAgIHNlbGYubWFwQ29udHJvbGxlci5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy9zZWxmLm1hcENvbnRyb2xsZXIuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgIH0vLyBlbmQgb2YgXCJsb2FkQmFzZUxheWVycygpXCJcblxuICAgIGFkZEJhc2VMYXllcnMoYmFzZWxheWVycykge1xuICAgICAgICB2YXIgYmFzZWxheWVyLFxuICAgICAgICAgICAgdWlkLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGo7XG5cbiAgICAgICAgLy8gc29ydCBiYXNlbGF5ZXIgKGZvciBpbnRlcm5hbCBsaXN0KVxuICAgICAgICBiYXNlbGF5ZXJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIGlmICgoIWEuc29ydCAmJiAhYi5zb3J0KSB8fCAocGFyc2VJbnQoYS5zb3J0LCAxMCkgPT09IHBhcnNlSW50KGIuc29ydCwgMTApKSkge1xuICAgICAgICAgICAgICAgIGlmICghYS5uYW1lIHx8ICFiLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICghYi5uYW1lKSA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhLm5hbWUudG9Mb3dlckNhc2UoKSA+IGIubmFtZS50b0xvd2VyQ2FzZSgpKSA/IDEgOiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYS5zb3J0IHx8ICFiLnNvcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCFiLnNvcnQpID8gLTEgOiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChwYXJzZUludChhLnNvcnQsIDEwKSA+IHBhcnNlSW50KGIuc29ydCwgMTApKSA/IDEgOiAtMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYnVpbGQgYmFzZWxheWVyLWxpc3RcbiAgICAgICAgaWYgKGJhc2VsYXllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGJhc2VsYXllcnMubGVuZ3RoOyBpICs9IDEpIHtcblxuICAgICAgICAgICAgICAgIGJhc2VsYXllciA9IGJhc2VsYXllcnNbaV07XG5cbiAgICAgICAgICAgICAgICB1aWQgPSBiYXNlbGF5ZXIuaWQgfHwgdXRpbHMuZ2V0VW5pcXVlSWQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2VsYXllcklkcy5wdXNoKHVpZCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFyckJhc2VsYXllcnNbdWlkXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFyckJhc2VsYXllcnNbdWlkXSA9IG5ldyBDNGdCYXNlbGF5ZXIoYmFzZWxheWVyLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBAVE9ETzogY2hlY2sgaW5pdGlhbCBiYXNlbGF5ZXItaGFuZGxpbmdcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYmFzZWxheWVyICYmIHBhcnNlSW50KHVpZCwgMTApID09PSBwYXJzZUludCh0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5iYXNlbGF5ZXIsIDEwKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dCYXNlTGF5ZXIodWlkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZih0aGlzLmFyckJhc2VsYXllcnNbdWlkXS5oYXNPdmVybGF5cyl7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGo8IHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5c1t0aGlzLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5c1tqXS5pZF0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW3RoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLmlkXSA9IG5ldyBDNGdPdmVybGF5KHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLCB0aGlzLm1hcENvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW3RoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLmlkXS5sYXllciA9IHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLnNob3dPdmVybGF5TGF5ZXIodGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXNbal0uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZUJhc2VsYXllcklkKSB7XG4gICAgICAgICAgICAvLyBubyBiYXNlbGF5ZXIgd2FzIGFjdGl2YXRlZFxuICAgICAgICAgICAgaWYgKGJhc2VsYXllcnMubGVuZ3RoID4gMCAmJiBiYXNlbGF5ZXJzWzBdLmlkKSB7XG4gICAgICAgICAgICAgICAgLy8gdGFrZSBmaXJzdCBiYXNlbGF5ZXIgaWYgcG9zc2libGVcbiAgICAgICAgICAgICAgICB1aWQgPSBiYXNlbGF5ZXJzWzBdLmlkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgYnVpbGQgZGVmYXVsdCBiYXNlbGF5ZXJcbiAgICAgICAgICAgICAgICB1aWQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZWxheWVySWRzLnB1c2godWlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYXJyQmFzZWxheWVyc1t1aWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYzRnX2RlZmF1bHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6ICdvc20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdNYXBuaWsnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zaG93QmFzZUxheWVyKHVpZCk7XG5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb3h5LmJhc2VsYXllcnNfbG9hZGVkID0gdHJ1ZTtcblxuICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh0aGlzLnByb3h5Lmhvb2tfYmFzZWxheWVyX2xvYWRlZCwgdGhpcy5iYXNlbGF5ZXJJZHMpO1xuICAgIH0gLy8gZW5kIG9mIFwiYWRkQmFzZUxheWVycygpXCJcbiAgICBjcmVhdGVCYXNlTGF5ZXIobGF5ZXJPcHRpb25zLCBiYXNlTGF5ZXJDb25maWcsIHNvdXJjZUNvbmZpZ3Mpe1xuICAgICAgICB2YXIgbmV3QmFzZWxheWVyO1xuICAgICAgICBsYXllck9wdGlvbnMgPSBsYXllck9wdGlvbnMgfHwge307XG4gICAgICAgIHN3aXRjaCAoYmFzZUxheWVyQ29uZmlnLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjYXNlICdjdXN0b20nOlxuICAgICAgICAgICAgICAvLyBjdXN0b21cbiAgICAgICAgICAgICAgbGV0IG5vVXJsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy51cmwpIHtcbiAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybDtcbiAgICAgICAgICAgICAgICBub1VybCA9IGZhbHNlO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJhc2VMYXllckNvbmZpZy51cmxzKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybHMgPSBiYXNlTGF5ZXJDb25maWcudXJscztcbiAgICAgICAgICAgICAgICBub1VybCA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghbm9VcmwpIHtcbiAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKGxheWVyT3B0aW9ucyksXG4gICAgICAgICAgICAgICAgICBleHRlbnQ6IGJhc2VMYXllckNvbmZpZy5leHRlbmRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2N1c3RvbSB1cmwocykgbWlzc2luZyAtPiBzd2l0Y2ggdG8gZGVmYXVsdCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdvc20nOlxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VDb25maWdzLm9zbVtiYXNlTGF5ZXJDb25maWcuc3R5bGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5PU00oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3Mub3NtW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VDb25maWdzLnN0YW1lbltiYXNlTGF5ZXJDb25maWcuc3R5bGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN0YW1lblxuICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuU3RhbWVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb25maWdzLnN0YW1lbltiYXNlTGF5ZXJDb25maWcuc3R5bGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2UgaWYgKG1hcFF1ZXN0U291cmNlQ29uZmlnc1tiYXNlTGF5ZXJDb25maWcuc3R5bGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgLy8gbWFwUXVlc3RcbiAgICAgICAgICAgICAgICAgICAgLy8gICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuTWFwUXVlc3QobWFwUXVlc3RTb3VyY2VDb25maWdzW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0pXG4gICAgICAgICAgICAgICAgICAgIC8vICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUgPT09ICdvc21fY3VzdG9tJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXN0b21cbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vVXJsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy51cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBiYXNlTGF5ZXJDb25maWcudXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9VcmwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChiYXNlTGF5ZXJDb25maWcudXJscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybHMgPSBiYXNlTGF5ZXJDb25maWcudXJscztcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vVXJsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub1VybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5YWVoobGF5ZXJPcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2N1c3RvbSB1cmwocykgbWlzc2luZyAtPiBzd2l0Y2ggdG8gZGVmYXVsdCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd1bnN1cHBvcnRlZCBvc20tc3R5bGUgLT4gc3dpdGNoIHRvIGRlZmF1bHQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtYXBib3gnOlxuICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuYXBpX2tleSAmJiBiYXNlTGF5ZXJDb25maWcuYXBwX2lkICYmIGJhc2VMYXllckNvbmZpZy5tYXBib3hfdHlwZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcubWFwYm94X3R5cGUgPT09ICdNYXBib3gnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybCArIGJhc2VMYXllckNvbmZpZy5hcHBfaWQgKyAnL3RpbGVzL3t6fS97eH0ve3l9P2FjY2Vzc190b2tlbj0nICsgYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlhZWihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV4dGVuZChzb3VyY2VDb25maWdzLm1hcGJveFtiYXNlTGF5ZXJDb25maWcubWFwYm94X3R5cGVdLCBsYXllck9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybF9jbGFzc2ljICsgYmFzZUxheWVyQ29uZmlnLmFwcF9pZCArICcve3p9L3t4fS97eX0ucG5nP2FjY2Vzc190b2tlbj0nICsgYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MubWFwYm94W2Jhc2VMYXllckNvbmZpZy5tYXBib3hfdHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNlIGlmKGJhc2VMYXllckNvbmZpZy5oaWRlX2luX2JlKXtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IFwiY29uNGdpcy9iYXNlTGF5ZXJUaWxlU2VydmljZS9cIiArIGJhc2VMYXllckNvbmZpZy5pZCArIFwiL3t6fS97eH0ve3l9XCI7XG4gICAgICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5YWVooJC5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5tYXBib3hbYmFzZUxheWVyQ29uZmlnLm1hcGJveF90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignd3JvbmcgbWFwYm94IGNvbmZpZ3VyYXRpb24hJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAna2xva2FuJzpcbiAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmFwaV9rZXkgJiYgYmFzZUxheWVyQ29uZmlnLmtsb2thbl90eXBlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5rbG9rYW5fdHlwZSA9PT0gJ09wZW5NYXBUaWxlcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBiYXNlTGF5ZXJDb25maWcudXJsICsgJ3t6fS97eH0ve3l9LnBiZic7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvclRpbGUoalF1ZXJ5LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5rbG9rYW5bYmFzZUxheWVyQ29uZmlnLmtsb2thbl90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1RvRG8gc3R5bGUgdXJsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZXRjaChiYXNlTGF5ZXJDb25maWcudXJsICsgJy9zdHlsZXMvJytiYXNlTGF5ZXJDb25maWcuc3R5bGUrJy9zdHlsZS5qc29uJykudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKGZ1bmN0aW9uKGdsU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xtcy5hcHBseVN0eWxlKG5ld0Jhc2VsYXllciwgZ2xTdHlsZSwgJ29wZW5tYXB0aWxlcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybCArICcvZGF0YS92My97en0ve3h9L3t5fS5wYmY/a2V5PScrYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvclRpbGUoalF1ZXJ5LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5rbG9rYW5bYmFzZUxheWVyQ29uZmlnLmtsb2thbl90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmZXRjaChiYXNlTGF5ZXJDb25maWcudXJsICsgJy9zdHlsZXMvJytiYXNlTGF5ZXJDb25maWcuc3R5bGUrJy9zdHlsZS5qc29uP2tleT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4oZnVuY3Rpb24oZ2xTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbG1zLmFwcGx5U3R5bGUobmV3QmFzZWxheWVyLCBnbFN0eWxlLCAnb3Blbm1hcHRpbGVzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignd3Jvbmcga2xva2FuIGNvbmZpZ3VyYXRpb24hJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaGVyZSc6XG4gICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5hcGlfa2V5ICYmIGJhc2VMYXllckNvbmZpZy5hcHBfaWQgJiYgYmFzZUxheWVyQ29uZmlnLmhlcmVfdHlwZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUgPT0gJ25vcm1hbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5iYXNlLm1hcHMuY2l0LmFwaS5oZXJlLmNvbS9tYXB0aWxlLzIuMS9tYXB0aWxlL25ld2VzdC9ub3JtYWwuZGF5L3t6fS97eH0ve3l9LzI1Ni9wbmcnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnP2FwcF9pZD0nK2Jhc2VMYXllckNvbmZpZy5hcHBfaWQrJyZhcHBfY29kZT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSA9PSAndHJhbnNpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5iYXNlLm1hcHMuY2l0LmFwaS5oZXJlLmNvbS9tYXB0aWxlLzIuMS9tYXB0aWxlL25ld2VzdC9ub3JtYWwuZGF5LnRyYW5zaXQve3p9L3t4fS97eX0vMjU2L3BuZycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc/YXBwX2lkPScrYmFzZUxheWVyQ29uZmlnLmFwcF9pZCsnJmFwcF9jb2RlPScrYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLnN0eWxlID09ICdwZWRlc3RyaWFuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9ICdodHRwczovL3sxLTR9LmJhc2UubWFwcy5jaXQuYXBpLmhlcmUuY29tL21hcHRpbGUvMi4xL21hcHRpbGUvbmV3ZXN0L3BlZGVzdHJpYW4uZGF5L3t6fS97eH0ve3l9LzI1Ni9wbmcnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnP2FwcF9pZD0nK2Jhc2VMYXllckNvbmZpZy5hcHBfaWQrJyZhcHBfY29kZT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSA9PSAndGVycmFpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5hZXJpYWwubWFwcy5jaXQuYXBpLmhlcmUuY29tL21hcHRpbGUvMi4xL21hcHRpbGUvbmV3ZXN0L3RlcnJhaW4uZGF5L3t6fS97eH0ve3l9LzI1Ni9wbmcnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnP2FwcF9pZD0nK2Jhc2VMYXllckNvbmZpZy5hcHBfaWQrJyZhcHBfY29kZT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSA9PSAnc2F0ZWxsaXRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9ICdodHRwczovL3sxLTR9LmFlcmlhbC5tYXBzLmNpdC5hcGkuaGVyZS5jb20vbWFwdGlsZS8yLjEvbWFwdGlsZS9uZXdlc3Qvc2F0ZWxsaXRlLmRheS97en0ve3h9L3t5fS8yNTYvcG5nJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJz9hcHBfaWQ9JytiYXNlTGF5ZXJDb25maWcuYXBwX2lkKycmYXBwX2NvZGU9JytiYXNlTGF5ZXJDb25maWcuYXBpX2tleTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUgPT0gJ2h5YnJpZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5hZXJpYWwubWFwcy5jaXQuYXBpLmhlcmUuY29tL21hcHRpbGUvMi4xL21hcHRpbGUvbmV3ZXN0L2h5YnJpZC5kYXkve3p9L3t4fS97eX0vMjU2L3BuZycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc/YXBwX2lkPScrYmFzZUxheWVyQ29uZmlnLmFwcF9pZCsnJmFwcF9jb2RlPScrYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKCQuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MuaGVyZVtiYXNlTGF5ZXJDb25maWcuaGVyZV90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihiYXNlTGF5ZXJDb25maWcuaGlkZV9pbl9iZSl7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBsYXllck9wdGlvbnMudXJsID0gXCJjb240Z2lzL2Jhc2VMYXllclRpbGVTZXJ2aWNlL1wiICsgYmFzZUxheWVyQ29uZmlnLmlkICsgXCIve3p9L3t4fS97eX1cIjtcbiAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlhZWigkLmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb25maWdzLm1hcGJveFtiYXNlTGF5ZXJDb25maWcuaGVyZV90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignd3JvbmcgSEVSRSBjb25maWd1cmF0aW9uIScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RodW5kZXInOlxuICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuYXBpX2tleSAmJiBiYXNlTGF5ZXJDb25maWcudGh1bmRlcmZvcmVzdF90eXBlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IFwiaHR0cHM6Ly90aWxlLnRodW5kZXJmb3Jlc3QuY29tL1wiK2Jhc2VMYXllckNvbmZpZy5zdHlsZStcIi97en0ve3h9L3t5fS5wbmc/YXBpa2V5PVwiK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlhZWihqUXVlcnkuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MudGh1bmRlcmZvcmVzdFtiYXNlTGF5ZXJDb25maWcudGh1bmRlcmZvcmVzdF90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihiYXNlTGF5ZXJDb25maWcuaGlkZV9pbl9iZSl7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBcImNvbjRnaXMvYmFzZUxheWVyVGlsZVNlcnZpY2UvXCIgKyBiYXNlTGF5ZXJDb25maWcuaWQgKyBcIi97en0ve3h9L3t5fVwiO1xuICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5tYXBib3hbYmFzZUxheWVyQ29uZmlnLnRodW5kZXJmb3Jlc3RfdHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3dyb25nIFRodW5kZXJmb3Jlc3QgY29uZmlndXJhdGlvbiEnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdnb29nbGUnOlxuICAgICAgICAgICAgICAgIC8vQHRvZG9cbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2dvb2dsZS1tYXBzIGFyZSBjdXJyZW50bHkgdW5zdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JpbmcnOlxuICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuYXBpX2tleSAmJiBiYXNlTGF5ZXJDb25maWcuc3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLkJpbmdNYXBzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdWx0dXJlOiBuYXZpZ2F0b3IubGFuZ3VhZ2VzID8gbmF2aWdhdG9yLmxhbmd1YWdlc1swXSA6IChuYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLnVzZXJMYW5ndWFnZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBiYXNlTGF5ZXJDb25maWcuYXBpX2tleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZXJ5U2V0OiBiYXNlTGF5ZXJDb25maWcuc3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignd3JvbmcgYmluZy1rZXkgb3IgaW52YWxpZCBpbWFnZXJ5LXNldCEnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3bXMnOlxuICAgICAgICAgICAgICAgIGlmKGJhc2VMYXllckNvbmZpZy51cmwuaW5kZXhPZignaHR0cHMnKSAhPT0gLTEpe1xuICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuVGlsZVdNUyh7XG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiBiYXNlTGF5ZXJDb25maWcudXJsLFxuICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgTEFZRVJTOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLmxheWVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFZFUlNJT046IGJhc2VMYXllckNvbmZpZy5wYXJhbXMudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vRk9STUFUOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFRSQU5TUEFSRU5UOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLnRyYW5zcGFyZW50XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBndXR0ZXI6IGJhc2VMYXllckNvbmZpZy5ndXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRpb25zOiBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgICAgICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJ1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgLy9leHRlbnQ6IG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KFs1LjU5MzM0LCA1MC4wNTc4LCA5Ljc0MTU4LCA1Mi43OTk4XSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5UaWxlV01TKHtcbiAgICAgICAgICAgICAgICAgICAgICB1cmw6IGJhc2VMYXllckNvbmZpZy51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMQVlFUlM6IGJhc2VMYXllckNvbmZpZy5wYXJhbXMubGF5ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgVkVSU0lPTjogYmFzZUxheWVyQ29uZmlnLnBhcmFtcy52ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy9GT1JNQVQ6IGJhc2VMYXllckNvbmZpZy5wYXJhbXMuZm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgVFJBTlNQQVJFTlQ6IGJhc2VMYXllckNvbmZpZy5wYXJhbXMudHJhbnNwYXJlbnRcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGd1dHRlcjogYmFzZUxheWVyQ29uZmlnLmd1dHRlcixcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGlvbnM6IGJhc2VMYXllckNvbmZpZy5hdHRyaWJ1dGlvbiArICcgJyArIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAvL2V4dGVudDogb2wucHJvai50cmFuc2Zvcm1FeHRlbnQoWzUuNTkzMzQsIDUwLjA1NzgsIDkuNzQxNTgsIDUyLjc5OThdLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ293bSc6XG4gICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYmFzZUxheWVyQ29uZmlnLnVybCArIGJhc2VMYXllckNvbmZpZy5hcHBfaWQgKyAnL3t6fS97eH0ve3l9P2hhc2g9JyArIGJhc2VMYXllckNvbmZpZy5hcGlfa2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRpb25zOiBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAvL2V4dGVudDogb2wucHJvai50cmFuc2Zvcm1FeHRlbnQoWzUuNTkzMzQsIDUwLjA1NzgsIDkuNzQxNTgsIDUyLjc5OThdLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdncm91cCc6XG4gICAgICAgICAgICAgICAgbGV0IGJhc2VMYXllckdyb3VwID0gW107XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpbmRleCBpbiBiYXNlTGF5ZXJDb25maWdbJ2xheWVyR3JvdXAnXSl7XG4gICAgICAgICAgICAgICAgICBpZihiYXNlTGF5ZXJDb25maWdbJ2xheWVyR3JvdXAnXS5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgZWxlbWVudCA9IHRoaXMuY3JlYXRlQmFzZUxheWVyKG51bGwsIGJhc2VMYXllckNvbmZpZ1snbGF5ZXJHcm91cCddW2luZGV4XSwgc291cmNlQ29uZmlncyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXhab29tID0gdGhpcy5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uRm9yWm9vbShiYXNlTGF5ZXJDb25maWdbJ2xheWVyR3JvdXAnXVtpbmRleF1bJ21pblpvb20nXSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtaW5ab29tID0gdGhpcy5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uRm9yWm9vbShiYXNlTGF5ZXJDb25maWdbJ2xheWVyR3JvdXAnXVtpbmRleF1bJ21heFpvb20nXSk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0TWluUmVzb2x1dGlvbihtaW5ab29tKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRNYXhSZXNvbHV0aW9uKG1heFpvb20pO1xuICAgICAgICAgICAgICAgICAgICBiYXNlTGF5ZXJHcm91cC5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuR3JvdXAoe1xuICAgICAgICAgICAgICAgICAgICBsYXllcnM6IGJhc2VMYXllckdyb3VwXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3Vuc3VwcG9ydGVkIHByb3ZpZGVyJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0Jhc2VsYXllcjtcblxuICAgIH1cbiAgICBzaG93QmFzZUxheWVyKGJhc2VMYXllclVpZCkge1xuXG4gICAgICAgIGxldCBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgIGxheWVycyxcbiAgICAgICAgICAgIGJhc2VsYXllcixcbiAgICAgICAgICAgIGFkZEJhc2VsYXllcixcbiAgICAgICAgICAgIGJhc2VMYXllcnMsXG4gICAgICAgICAgICBzb3VyY2VDb25maWdzID0gW10sXG4gICAgICAgICAgICBuZXdCYXNlbGF5ZXIsXG4gICAgICAgICAgICBsYXllck9wdGlvbnMsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgdmlldztcblxuICAgICAgICBsZXQgYmFzZUxheWVyQ29uZmlnID0gdGhpcy5hcnJCYXNlbGF5ZXJzW2Jhc2VMYXllclVpZF07XG5cblxuICAgICAgICBpZiAoKHR5cGVvZiBiYXNlTGF5ZXJDb25maWcgIT09IFwidW5kZWZpbmVkXCIpICYmICFiYXNlTGF5ZXJDb25maWcubGF5ZXIpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBsYXllclxuICAgICAgICAgICAgc291cmNlQ29uZmlncy5vc20gPSBjb25maWcub3NtO1xuICAgICAgICAgICAgc291cmNlQ29uZmlncy5zdGFtZW4gPSBjb25maWcuc3RhbWVuO1xuICAgICAgICAgICAgLy9tYXBRdWVzdFNvdXJjZUNvbmZpZ3MgPSBjNGcubWFwcy5jb25maWcubWFwcXVlc3Q7XG4gICAgICAgICAgICBzb3VyY2VDb25maWdzLm1hcGJveCA9IGNvbmZpZy5tYXBib3g7XG4gICAgICAgICAgICBzb3VyY2VDb25maWdzLmtsb2thbiA9IGNvbmZpZy5rbG9rYW47XG4gICAgICAgICAgICBzb3VyY2VDb25maWdzLmhlcmUgPSBjb25maWcuaGVyZTtcbiAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MudGh1bmRlcmZvcmVzdCA9IGNvbmZpZy50aHVuZGVyZm9yZXN0O1xuXG4gICAgICAgICAgICAvL25ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgIC8vICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuT1NNKClcbiAgICAgICAgICAgIC8vfSk7XG5cbiAgICAgICAgICAgIGxheWVyT3B0aW9ucyA9IHt9O1xuXG4gICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgKyAnICcgKyBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb247XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04gKyAnICcgKyBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoYmFzZUxheWVyQ29uZmlnLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ29zbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlQ29uZmlncy5zdGFtZW5bYmFzZUxheWVyQ29uZmlnLnN0eWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBzb3VyY2VDb25maWdzLnN0YW1lbltiYXNlTGF5ZXJDb25maWcuc3R5bGVdLmF0dHJpYnV0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXBRdWVzdFNvdXJjZUNvbmZpZ3NbYmFzZUxheWVyQ29uZmlnLnN0eWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gbWFwUXVlc3RTb3VyY2VDb25maWdzW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0uYXR0cmlidXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZUNvbmZpZ3Mub3NtW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gc291cmNlQ29uZmlncy5vc21bYmFzZUxheWVyQ29uZmlnLnN0eWxlXS5hdHRyaWJ1dGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hcGJveCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gc291cmNlQ29uZmlncy5tYXBib3hbYmFzZUxheWVyQ29uZmlnLm1hcGJveF90eXBlXS5hdHRyaWJ1dGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAna2xva2FuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBzb3VyY2VDb25maWdzLmtsb2thbltiYXNlTGF5ZXJDb25maWcua2xva2FuX3R5cGVdLmF0dHJpYnV0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdoZXJlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBzb3VyY2VDb25maWdzLmhlcmVbYmFzZUxheWVyQ29uZmlnLmhlcmVfdHlwZV0uYXR0cmlidXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RodW5kZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IHNvdXJjZUNvbmZpZ3MudGh1bmRlcmZvcmVzdFtiYXNlTGF5ZXJDb25maWcudGh1bmRlcmZvcmVzdF90eXBlXS5hdHRyaWJ1dGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL1RvRG8gaGVscGVyIGNsYXNzIGZvciBhdHRyaWJ1dGlvbnNcblxuICAgICAgICAgICAgLy9hZGRpdGlvbmFsIGF0dHJpYnV0aW9uXG4gICAgICAgICAgICBpZiAodGhpcy5tYXBDb250cm9sbGVyLmRhdGEgJiYgdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYXR0cmlidXRpb24gJiYgdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYXR0cmlidXRpb24uYWRkaXRpb25hbCkge1xuICAgICAgICAgICAgICAgIGlmIChsYXllck9wdGlvbnMuYXR0cmlidXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhZGRpdGlvbmFsQXR0cmlidXRpb24gPSB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5hdHRyaWJ1dGlvbi5hZGRpdGlvbmFsO1xuXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnNbaV0gPT0gYWRkaXRpb25hbEF0dHJpYnV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyArICcgJyArIGFkZGl0aW9uYWxBdHRyaWJ1dGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5hdHRyaWJ1dGlvbi5hZGRpdGlvbmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9Ub0RvIHR5cGUgY2xhc3MgZm9yIGdlb3NlYXJjaF9lbmdpbmVcbiAgICAgICAgICAgIC8vZ2Vvc2VhcmNoIGF0dHJpYnV0aW9uXG4gICAgICAgICAgICB2YXIgZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uID0gJyc7XG4gICAgICAgICAgICBpZiAodGhpcy5tYXBDb250cm9sbGVyLmRhdGEuZ2Vvc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdlb3NlYXJjaF9lbmdpbmUgPSB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5nZW9zZWFyY2guZ2Vvc2VhcmNoX2VuZ2luZTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hcENvbnRyb2xsZXIuZGF0YSAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5hdHRyaWJ1dGlvbikge1xuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZ2Vvc2VhcmNoX2VuZ2luZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnNCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uID0gJyc7IC8vY29uNGdpcyBtYXBzZXJ2aWNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmdlb3NlYXJjaC5jdXN0b21fYXR0cmlidXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuZ2Vvc2VhcmNoLmN1c3RvbV9hdHRyaWJ1dGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9zZWFyY2hfYXR0cmlidXRpb24gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTm9taW5hdGltIFNlYXJjaCBDb3VydGVzeSBvZiA8YSBocmVmPVwiaHR0cDovL3d3dy5tYXBxdWVzdC5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+TWFwUXVlc3Q8L2E+IDxpbWcgc3JjPVwiaHR0cDovL2RldmVsb3Blci5tYXBxdWVzdC5jb20vY29udGVudC9vc20vbXFfbG9nby5wbmdcIiBhbHQ9XCJcIiAvPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vbWluYXRpbSBTZWFyY2ggQ291cnRlc3kgb2YgPGEgaHJlZj1cImh0dHA6Ly93aWtpLm9wZW5zdHJlZXRtYXAub3JnL3dpa2kvTm9taW5hdGltX3VzYWdlX3BvbGljeVwiIHRhcmdldD1cIl9ibGFua1wiPk9wZW5TdHJlZXRNYXA8L2E+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGdlb3NlYXJjaEF0dHJpYnV0aW9uID0gZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBleGlzdHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsYXllck9wdGlvbnMuYXR0cmlidXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllck9wdGlvbnMuYXR0cmlidXRpb25zW2ldID09IGdlb3NlYXJjaEF0dHJpYnV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyArICcgJyArIGdlb3NlYXJjaEF0dHJpYnV0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IGdlb3NlYXJjaEF0dHJpYnV0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLnNvcnRpbmcpIHtcbiAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuc29ydCA9IGJhc2VMYXllckNvbmZpZy5zb3J0aW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5taW5ab29tICYmIGJhc2VMYXllckNvbmZpZy5taW5ab29tID49IDApIHtcbiAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMubWluWm9vbSA9IGJhc2VMYXllckNvbmZpZy5taW5ab29tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5tYXhab29tICYmIGJhc2VMYXllckNvbmZpZy5tYXhab29tID49IDApIHtcbiAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMubWF4Wm9vbSA9IGJhc2VMYXllckNvbmZpZy5tYXhab29tO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSB0aGlzLmNyZWF0ZUJhc2VMYXllcihsYXllck9wdGlvbnMsIGJhc2VMYXllckNvbmZpZywgc291cmNlQ29uZmlncyk7XG4gICAgICAgICAgICBpZihiYXNlTGF5ZXJDb25maWcuaGFzT3ZlcmxheXMpe1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGk8IGJhc2VMYXllckNvbmZpZy5vdmVybGF5cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKCFiYXNlTGF5ZXJDb25maWcub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlzW2ldLmlkXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlTGF5ZXJDb25maWcub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlzW2ldLmlkXSA9IG5ldyBDNGdPdmVybGF5KGJhc2VMYXllckNvbmZpZy5vdmVybGF5c1tpXSx0aGlzLm1hcENvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW2Jhc2VMYXllckNvbmZpZy5vdmVybGF5c1tpXS5pZF0ubGF5ZXIgPSBiYXNlTGF5ZXJDb25maWcub3ZlcmxheUNvbnRyb2xsZXIuc2hvd092ZXJsYXlMYXllcihiYXNlTGF5ZXJDb25maWcub3ZlcmxheXNbaV0uaWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgKGJhc2VMYXllckNvbmZpZy5oYXNPdmVybGF5cykge1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgICBmb3IgKGkgPSAwOyBpIDwgYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIGlmKCFjNGcubWFwcy5vdmVybGF5cyl7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBjNGcubWFwcy5vdmVybGF5cyA9IFtdO1xuICAgICAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgICAgIGM0Zy5tYXBzLm92ZXJsYXlzW2Jhc2VMYXllckNvbmZpZy5vdmVybGF5c1tpXS5pZF0gPSBiYXNlTGF5ZXJDb25maWcub3ZlcmxheXNbaV07XG4gICAgICAgICAgICAvLyAgICAgICAgIGlmKHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmJhc2VsYXllciAmJiBwYXJzZUludChiYXNlTGF5ZXJDb25maWcuaWQsIDEwKSA9PT0gcGFyc2VJbnQodGhpcy5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZCwgMTApKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBzZWxmLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKHNlbGYuc2hvd092ZXJsYXlMYXllcihiYXNlTGF5ZXJDb25maWcub3ZlcmxheXNbaV0uaWQpKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgIHRoaXMuYXJyQmFzZWxheWVyc1tiYXNlTGF5ZXJVaWRdLmxheWVyID0gbmV3QmFzZWxheWVyO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF5ZXJzID0gdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRMYXllcnMoKTtcblxuICAgICAgICAvLyBzZWN1cmVcbiAgICAgICAgaWYgKGxheWVycy5pdGVtKDApLmdldCgnY2hlY2tTdW0nKSA9PT0gXCJiYXNlTWFwc0xheWVyXCIpIHtcbiAgICAgICAgICAgIGJhc2VMYXllcnMgPSBsYXllcnMuaXRlbSgwKS5nZXRMYXllcnMoKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmFyckJhc2VsYXllcnNbYmFzZUxheWVyVWlkXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGJhc2VsYXllciA9IHRoaXMuYXJyQmFzZWxheWVyc1tiYXNlTGF5ZXJVaWRdLmxheWVyO1xuXG4gICAgICAgICAgICAgICAgaWYgKGJhc2VsYXllcikge1xuICAgICAgICAgICAgICAgICAgICBhZGRCYXNlbGF5ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBiYXNlTGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgKGVsZW1lbnQgPT09IGJhc2VsYXllcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQmFzZWxheWVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRCYXNlbGF5ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkZEJhc2VsYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUxheWVycy5wdXNoKGJhc2VsYXllcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2aWV3ID0gdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCk7XG4gICAgICAgICAgICAgICAgdmFyIHpvb20gPSB2aWV3LmdldFpvb20oKTtcbiAgICAgICAgICAgICAgICB2YXIgY2VudGVyID0gdmlldy5nZXRDZW50ZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoKGJhc2VMYXllckNvbmZpZy5taW5ab29tICYmIGJhc2VMYXllckNvbmZpZy5taW5ab29tID49IDApIHx8XG4gICAgICAgICAgICAgICAgICAgIChiYXNlTGF5ZXJDb25maWcubWF4Wm9vbSAmJiBiYXNlTGF5ZXJDb25maWcubWF4Wm9vbSA+PSAwKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLm1pblpvb20gJiYgKHZpZXcuZ2V0Wm9vbSgpIDwgYmFzZUxheWVyQ29uZmlnLm1pblpvb20pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LnNldFpvb20oYmFzZUxheWVyQ29uZmlnLm1pblpvb20pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJhc2VMYXllckNvbmZpZy5tYXhab29tICYmICh2aWV3LmdldFpvb20oKSA+IGJhc2VMYXllckNvbmZpZy5tYXhab29tKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5zZXRab29tKGJhc2VMYXllckNvbmZpZy5tYXhab29tKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXBEYXRhID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXBEYXRhLnpvb21sZXZlbCB8fCBtYXBEYXRhLm1vdXNlcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cm9sQ29udGFpbmVyVG9wTGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbENvbnRhaW5lclRvcExlZnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX1RMICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQucHJlcGVuZChjb250cm9sQ29udGFpbmVyVG9wTGVmdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX0JMICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoY29udHJvbENvbnRhaW5lclRvcExlZnQpLmFmdGVyKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5sZWZ0U2xpZGVFbGVtZW50cy5wdXNoKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1Yi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTF9DT05UQUlORVJfQkxfU1VCICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZpZXcgPSBuZXcgb2wuVmlldyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBjZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbjogdmlldy5nZXRQcm9qZWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbTogem9vbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5ab29tOiBwYXJzZUludChiYXNlTGF5ZXJDb25maWcubWluWm9vbSwgMTApIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4Wm9vbTogcGFyc2VJbnQoYmFzZUxheWVyQ29uZmlnLm1heFpvb20sIDEwKSB8fCAxOSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogdmlldy5nZXRSb3RhdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb246IHZpZXcuZ2V0UmVzb2x1dGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAuc2V0VmlldyhuZXdWaWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLnJlZHJhd01hcFZpZXcodGhpcy5tYXBDb250cm9sbGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKG1hcERhdGEuc2NhbGVsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlQ29udHJvbCh0aGlzLm1hcENvbnRyb2xsZXIuY29udHJvbHMuc2NhbGVsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnNjYWxlbGluZSA9IG5ldyBvbC5jb250cm9sLlNjYWxlTGluZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgbWFwVmlldzogdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB1bmRlZmluZWRIVE1MOiAnTi9BJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5hZGRDb250cm9sKHRoaXMubWFwQ29udHJvbGxlci5jb250cm9scy5zY2FsZWxpbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICQoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQpLmFwcGVuZChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1Yik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKG1hcERhdGEuem9vbWxldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlQ29udHJvbCh0aGlzLm1hcENvbnRyb2xsZXIuY29udHJvbHMuem9vbWxldmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnpvb21sZXZlbCA9IG5ldyBjNGcubWFwcy5jb250cm9sLlpvb21sZXZlbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgbWFwVmlldzogdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB1bmRlZmluZWRIVE1MOiAnTi9BJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5hZGRDb250cm9sKHRoaXMubWFwQ29udHJvbGxlci5jb250cm9scy56b29tbGV2ZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChtYXBEYXRhLm1vdXNlcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVDb250cm9sKHRoaXMubWFwQ29udHJvbGxlci5jb250cm9scy5tb3VzZXBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLm1vdXNlcG9zaXRpb24gPSBuZXcgb2wuY29udHJvbC5Nb3VzZVBvc2l0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBwcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBjb29yZGluYXRlRm9ybWF0OiBvbC5jb29yZGluYXRlLnRvU3RyaW5nSERNUyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHVuZGVmaW5lZEhUTUw6ICdOL0EnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmFkZENvbnRyb2wodGhpcy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLm1vdXNlcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGJhc2VMYXllckNvbmZpZyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZCA9IGJhc2VMYXllckNvbmZpZy5pZDtcblxuICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnModGhpcy5wcm94eS5ob29rX2Jhc2VsYXllcl92aXNpYmlsaXR5LCBiYXNlTGF5ZXJDb25maWcpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENlc2l1bSBpbnRlZ3JhdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJhc2VMYXllckNvbmZpZyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHZhciBtYXBEYXRhID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGE7XG4gICAgICAgICAgICAgICAgaWYgKG1hcERhdGEuY2VzaXVtICYmIG1hcERhdGEuY2VzaXVtLmVuYWJsZSAmJiAobWFwRGF0YS5jZXNpdW0uYWx3YXlzIHx8IGJhc2VMYXllckNvbmZpZy5jZXNpdW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vbDNkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9sM2QgPSBuZXcgb2xjcy5PTENlc2l1bSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiB0aGlzLm1hcENvbnRyb2xsZXIubWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVN5bmNocm9uaXplcnM6IGZhbHNlLyosXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gdGltZUVsdC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sM2QuZ2V0Q2VzaXVtU2NlbmUoKS5nbG9iZS5lbmFibGVMaWdodGluZyAmJiB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zZXRVVENIb3Vycyh2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENlc2l1bS5KdWxpYW5EYXRlLmZyb21EYXRlKGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDZXNpdW0uSnVsaWFuRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki99KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvKmNvbnN0IHNjZW5lID0gb2wzZC5nZXRDZXNpdW1TY2VuZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXJyYWluUHJvdmlkZXIgPSBuZXcgQ2VzaXVtLkNlc2l1bVRlcnJhaW5Qcm92aWRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICcvL2Fzc2V0cy5hZ2kuY29tL3N0ay10ZXJyYWluL3dvcmxkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RWZXJ0ZXhOb3JtYWxzOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzY2VuZS50ZXJyYWluUHJvdmlkZXIgPSB0ZXJyYWluUHJvdmlkZXI7Ki9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbDNkLnNldEVuYWJsZWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8qd2luZG93Wyd0b2dnbGVUaW1lJ10gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjZW5lLmdsb2JlLmVuYWJsZUxpZ2h0aW5nID0gIXNjZW5lLmdsb2JlLmVuYWJsZUxpZ2h0aW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVFbHQuc3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRWx0LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZUVsdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9OyovXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2wzZCAmJiB0aGlzLm9sM2QuZ2V0RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9sM2Quc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5yZWRyYXdNYXBWaWV3KHRoaXMubWFwQ29udHJvbGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IC8vIGVuZCBvZiBcInNob3dCYXNlTGF5ZXIoKVwiXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctYmFzZWxheWVyLWNvbnRyb2xsZXIuanMiLCJpbXBvcnQge0M0Z092ZXJsYXlDb250cm9sbGVyfSBmcm9tIFwiLi9jNGctb3ZlcmxheS1jb250cm9sbGVyXCJcblxuZXhwb3J0IGNsYXNzIEM0Z0Jhc2VsYXllcntcbiAgICBjb25zdHJ1Y3RvcihiYXNlbGF5ZXJBcnIsIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgdGhpcy5pZCA9IGJhc2VsYXllckFyclsnaWQnXTtcbiAgICAgICAgdGhpcy5waWQgPSBiYXNlbGF5ZXJBcnJbJ3BpZCddO1xuICAgICAgICB0aGlzLm5hbWUgPSBiYXNlbGF5ZXJBcnJbJ25hbWUnXTtcbiAgICAgICAgdGhpcy5kaXNwbGF5X25hbWUgPSBiYXNlbGF5ZXJBcnJbJ2Rpc3BsYXlfbmFtZSddO1xuICAgICAgICB0aGlzLnByb3ZpZGVyID0gYmFzZWxheWVyQXJyWydwcm92aWRlciddO1xuICAgICAgICB0aGlzLm9zbV9zdHlsZSA9IGJhc2VsYXllckFyclsnb3NtX3N0eWxlJ107XG4gICAgICAgIHRoaXMub3NtX3N0eWxlX3VybDEgPSBiYXNlbGF5ZXJBcnJbJ29zbV9zdHlsZV91cmwxJ107XG4gICAgICAgIHRoaXMub3NtX3N0eWxlX3VybDIgPSBiYXNlbGF5ZXJBcnJbJ29zbV9zdHlsZV91cmwyJ107XG4gICAgICAgIHRoaXMub3NtX3N0eWxlX3VybDMgPSBiYXNlbGF5ZXJBcnJbJ29zbV9zdHlsZV91cmwzJ107XG4gICAgICAgIHRoaXMub3NtX3N0eWxlX3VybDQgPSBiYXNlbGF5ZXJBcnJbJ29zbV9zdHlsZV91cmw0J107XG4gICAgICAgIHRoaXMub3NtX2tleW5hbWUgPSBiYXNlbGF5ZXJBcnJbJ29zbV9rZXluYW1lJ107XG4gICAgICAgIHRoaXMubWFwYm94X3R5cGUgPSBiYXNlbGF5ZXJBcnJbJ21hcGJveF90eXBlJ107XG4gICAgICAgIHRoaXMuYmluZ19zdHlsZSA9IGJhc2VsYXllckFyclsnYmluZ19zdHlsZSddO1xuICAgICAgICB0aGlzLnN0eWxlID0gYmFzZWxheWVyQXJyWydzdHlsZSddO1xuICAgICAgICB0aGlzLmF0dHJpYnV0aW9uID0gYmFzZWxheWVyQXJyWydhdHRyaWJ1dGlvbiddO1xuICAgICAgICB0aGlzLnBhcmFtcyA9IGJhc2VsYXllckFyclsncGFyYW1zJ107XG4gICAgICAgIHRoaXMud21zX2d1dHRlciA9IGJhc2VsYXllckFyclsnd21zX2d1dHRlciddO1xuICAgICAgICB0aGlzLm1pblpvb20gPSBiYXNlbGF5ZXJBcnJbJ21pblpvb20nXTtcbiAgICAgICAgdGhpcy5tYXhab29tID0gYmFzZWxheWVyQXJyWydtYXhab29tJ107XG4gICAgICAgIHRoaXMucHJvdGVjdF9iYXNlbGF5ZXIgPSBiYXNlbGF5ZXJBcnJbJ3Byb3RlY3RfYmFzZWxheWVyJ107XG4gICAgICAgIHRoaXMucGVybWl0dGVkX2dyb3VwcyA9IGJhc2VsYXllckFyclsncGVybWl0dGVkX2dyb3VwcyddO1xuICAgICAgICB0aGlzLmFwaV9rZXkgPSBiYXNlbGF5ZXJBcnJbJ2FwaUtleSddID8gYmFzZWxheWVyQXJyWydhcGlLZXknXSA6IGJhc2VsYXllckFyclsnYXBpX2tleSddO1xuICAgICAgICB0aGlzLmFwcF9pZCA9IGJhc2VsYXllckFyclsnYXBwX2lkJ107XG4gICAgICAgIHRoaXMudGh1bmRlcmZvcmVzdF90eXBlID0gYmFzZWxheWVyQXJyWyd0aHVuZGVyZm9yZXN0X3R5cGUnXTtcbiAgICAgICAgdGhpcy5oZXJlX3R5cGUgPSBiYXNlbGF5ZXJBcnJbJ2hlcmVfdHlwZSddO1xuICAgICAgICB0aGlzLmNlc2l1bSA9IGJhc2VsYXllckFyclsnY2VzaXVtJ107XG4gICAgICAgIHRoaXMuaGlkZV9pbl9iZSA9IGJhc2VsYXllckFyclsnaGlkZV9pbl9iZSddO1xuICAgICAgICB0aGlzLnVybCA9IGJhc2VsYXllckFyclsndXJsJ107XG4gICAgICAgIHRoaXMudXJscyA9IGJhc2VsYXllckFyclsndXJscyddO1xuICAgICAgICB0aGlzLmtsb2thbl90eXBlID0gYmFzZWxheWVyQXJyWydrbG9rYW5fdHlwZSddO1xuICAgICAgICB0aGlzLnN0eWxlX3VybCA9IGJhc2VsYXllckFyclsnc3R5bGVfdXJsJ107XG4gICAgICAgIHRoaXMuaGFzT3ZlcmxheXMgPSBiYXNlbGF5ZXJBcnJbJ2hhc092ZXJsYXlzJ107XG4gICAgICAgIHRoaXMub3ZlcmxheXMgPSBiYXNlbGF5ZXJBcnJbJ292ZXJsYXlzJ107XG4gICAgICAgIGlmKGJhc2VsYXllckFyclsnbGF5ZXJHcm91cCddKXtcbiAgICAgICAgICAgIGxldCBsYXllckdyb3VwID0gW107XG4gICAgICAgICAgICBmb3IobGV0IGluZGV4IGluIGJhc2VsYXllckFyclsnbGF5ZXJHcm91cCddICl7XG4gICAgICAgICAgICAgICAgaWYoYmFzZWxheWVyQXJyWydsYXllckdyb3VwJ10uaGFzT3duUHJvcGVydHkoaW5kZXgpKXtcbiAgICAgICAgICAgICAgICAgIGxheWVyR3JvdXBbaW5kZXhdID0gbmV3IEM0Z0Jhc2VsYXllcihiYXNlbGF5ZXJBcnJbJ2xheWVyR3JvdXAnXVtpbmRleF1bJ2VudHJ5J10pO1xuICAgICAgICAgICAgICAgICAgbGF5ZXJHcm91cFtpbmRleF1bJ21pblpvb20nXSA9IGJhc2VsYXllckFyclsnbGF5ZXJHcm91cCddW2luZGV4XVsnbWluWm9vbSddO1xuICAgICAgICAgICAgICAgICAgbGF5ZXJHcm91cFtpbmRleF1bJ21heFpvb20nXSA9IGJhc2VsYXllckFyclsnbGF5ZXJHcm91cCddW2luZGV4XVsnbWF4Wm9vbSddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGF5ZXJHcm91cCA9IGxheWVyR3JvdXA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vdmVybGF5Q29udHJvbGxlciA9IG5ldyBDNGdPdmVybGF5Q29udHJvbGxlcih0aGlzKTtcbiAgICAgICAgdGhpcy5sYXllciA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyXG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWJhc2VsYXllci5qcyIsImltcG9ydCB7QzRnTGF5ZXJ9IGZyb20gXCIuL2M0Zy1sYXllclwiXG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiXG5cbnZhciBjNGcgPSB0aGlzLmM0ZztcblxuZXhwb3J0IGNsYXNzIEM0Z0xheWVyQ29udHJvbGxlcntcbiAgY29uc3RydWN0b3IocHJveHkpe1xuICAgIHRoaXMucHJveHkgPSBwcm94eTtcbiAgICB0aGlzLm1hcENvbnRyb2xsZXIgPSBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXI7XG4gICAgdGhpcy5hcnJMYXllcnMgPSB7fTtcbiAgICB0aGlzLmxheWVyUmVxdWVzdHMgPSB7fTtcbiAgfVxuICBcbiAgbG9hZExheWVycyAoKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGlmICh0aGlzLm1hcElkID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy9qUXVlcnkuYWpheChcIm1hcHMvbGF5ZXJTZXJ2aWNlXCIsey8vdGhpcy5wcm94eS5hcGlfbGF5ZXJfdXJsLHtcbiAgICBqUXVlcnkuYWpheCh0aGlzLnByb3h5LmFwaV9sYXllcl91cmwse1xuICAgICAgZGF0YVR5cGU6IHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmpzb25wID8gXCJqc29ucFwiIDogXCJqc29uXCJcblxuICAgIH0pLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHNlbGYuYWRkTGF5ZXJzKGRhdGEubGF5ZXIsIGRhdGEuZm9yZWlnbkxheWVycyk7XG4gICAgICBzZWxmLnByb3h5LmxheWVyc19sb2FkZWQgPSB0cnVlO1xuICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoc2VsZi5wcm94eS5ob29rX2xheWVyX2xvYWRlZCwgc2VsZi5wcm94eS5sYXllcklkcyk7XG4gICAgICAvLyB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhjNGcubWFwcy5ob29rLnByb3h5X2xheWVyX2xvYWRlZCwge2xheWVySWRzOiBzZWxmLnByb3h5LmxheWVySWRzLCBwcm94eTogc2VsZi5wcm94eX0pO1xuICAgICAgc2VsZi5wcm94eS5jaGVja0xvY2F0aW9uU3R5bGVzKHtcbiAgICAgICAgZG9uZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYuZHJhd0xheWVySW5pdGlhbCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pLmZhaWwoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gQFRPRE86IGVycm9yLW1lc3NhZ2VzXG4gICAgICAvLyAgIDEpIFZpc2libGUgbWVzc2FnZSA0IHVzZXJzIChpMThuKVxuICAgICAgLy8gICAyKSBUZWNobmljYWwgY29uc29sZS53YXJuXG4gICAgICBjb25zb2xlLndhcm4oJ0FuIGVycm9yIG9jY3VyZWQgd2hpbGUgdHJ5aW5nIHRvIGxvYWQgdGhlIGxheWVycy4uLicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyB0aGlzLnByb3h5LnN0YXJib2FyZC5zcGlubmVyLmhpZGUoKTtcbiAgICB9KTtcbiAgfSAvLyBlbmQgb2YgXCJsb2FkTGF5ZXIoKVwiXG4gIGFkZExheWVycyhsYXllcnMsIGZvcmVpZ25MYXllcnMpIHtcbiAgICB2YXIgaSxcbiAgICAgIGosXG4gICAgICBrLFxuICAgICAgcCxcbiAgICAgIGlzVmlzaWJsZSxcbiAgICAgIGxheWVyLFxuICAgICAgc3RvcmVkSXRlbSxcbiAgICAgIGxpbmtJdGVtcyxcbiAgICAgIHVpZCxcbiAgICAgIGN1cnJlbnRab29tLFxuICAgICAgZm5IYW5kbGVBbmRBcHBlbmRMYXllckNoaWxkcyxcbiAgICAgIGVuZGxlc3NMb29wSWQsXG4gICAgICBwYXJlbnRJZCxcbiAgICAgIHBhcmVudElkcyxcbiAgICAgIHBlcm1hbGlua2VkTGF5ZXJzLFxuICAgICAgY2hpbGQsXG4gICAgICBmbkhhbmRsZUNoaWxkcyxcbiAgICAgIGtleSxcbiAgICAgIHN0YXJib2FyZCxcbiAgICAgIGZuQWRkVG9Ib29rO1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGlzVmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgcGVybWFsaW5rZWRMYXllcnMgPSB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5sYXllcnMgfHwgW107XG5cbiAgICBmbkhhbmRsZUFuZEFwcGVuZExheWVyQ2hpbGRzID0gZnVuY3Rpb24gKG9iakl0ZW0pIHtcbiAgICAgIHZhciB0b2dnbGUsXG4gICAgICAgIGVudHJ5V3JhcHBlcjtcblxuICAgICAgaWYgKG9iakl0ZW0uaGFzQ2hpbGRzKSB7XG4gICAgICAgIG9iakl0ZW0udmlzaWJsZUNoaWxkcyA9IHNlbGYuYWRkTGF5ZXJzKG9iakl0ZW0uY2hpbGRzLCBmb3JlaWduTGF5ZXJzKTtcbiAgICAgIH1cbiAgICB9OyAvLyBlbmQgb2YgXCJmbkhhbmRsZUFuZEFwcGVuZExheWVyQ2hpbGRzKClcIlxuXG4gICAgLy8gd3JhcHBlciBmdW5jdGlvbiB0byBhdm9pZCBjbG9zdXJlIGFjY2Vzc2liaWxpdHlcbiAgICBmbkFkZFRvSG9vayA9IGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgICB2YXIgbGF5ZXJuYW1lLCBsYXllcmlkLCBsYXllcmljb247XG5cbiAgICAgIGlmIChsYXllci5jaGlsZHMgJiYgbGF5ZXIuY2hpbGRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGF5ZXJuYW1lID0gbGF5ZXIubmFtZTtcbiAgICAgICAgbGF5ZXJpZCA9IGxheWVyLnRhYklkO1xuICAgICAgICBsYXllcmljb24gPSBsYXllci5hd2Vzb21laWNvbjtcbiAgICAgICAgYzRnLm1hcHMuc3RhcmJvYXJkVGFicyA9IGM0Zy5tYXBzLnN0YXJib2FyZFRhYnMgfHwge307XG4gICAgICAgIHN0YXJib2FyZCA9IHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnN0YXJib2FyZDtcbiAgICAgICAgc3RhcmJvYXJkLmhvb2tfbGF5ZXJzd2l0Y2hlcl9sb2FkZWQucHVzaChmdW5jdGlvbigpe1xuICAgICAgICAgIGM0Zy5tYXBzLnN0YXJib2FyZFRhYnNbbGF5ZXJpZF0gPSBuZXcgYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uQ3VzdG9tdGFiKHN0YXJib2FyZCwge1xuICAgICAgICAgICAgbmFtZTogbGF5ZXJuYW1lLFxuICAgICAgICAgICAgdGFiSWQ6IGxheWVyaWQsXG4gICAgICAgICAgICBhd2Vzb21laWNvbjogbGF5ZXJpY29uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAobGF5ZXJzICYmIGxheWVycy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0aGlzLmFyckxheWVyc1tsYXllcnNbaV0uaWRdKSB7XG4gICAgICAgICAgbGF5ZXIgPSB0aGlzLmFyckxheWVyc1tsYXllcnNbaV0uaWRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxheWVyID0gbmV3IEM0Z0xheWVyKGxheWVyc1tpXSk7Ly9sYXllcnNbaV07XG4gICAgICAgIH1cblxuICAgICAgICBsaW5rSXRlbXMgPSBmYWxzZTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhsYXllcik7XG4gICAgICAgIGlmICh0eXBlb2YgbGF5ZXIuY29udGVudCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIGxheWVyLmNvbnRlbnQgPSB1dGlscy5vYmplY3RUb0FycmF5KGxheWVyLmNvbnRlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5kbGVzcy1sb29wIHByZXZlbnRpb25cbiAgICAgICAgLy9cbiAgICAgICAgcGFyZW50SWQgPSBsYXllci5waWQ7XG4gICAgICAgIHBhcmVudElkcyA9IHt9O1xuICAgICAgICAvLyBidWlsZCBwYXJlbnQtaWRzIGNoYWluXG4gICAgICAgIHdoaWxlIChzZWxmLmFyckxheWVyc1twYXJlbnRJZF0pIHtcbiAgICAgICAgICBpZiAocGFyZW50SWRzW3BhcmVudElkXSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdDYXVnaHQgZW5kbGVzcy1sb29wIChJRDogJyArIGxheWVyLmlkICsgJyknKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJlbnRJZHNbcGFyZW50SWRdID0gdHJ1ZTtcbiAgICAgICAgICBwYXJlbnRJZCA9IHRoaXMuYXJyTGF5ZXJzW3BhcmVudElkXS5waWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGF5ZXIuY29udGVudCAmJiBsYXllci5jb250ZW50WzBdICYmIGxheWVyLmNvbnRlbnRbMF0uY3NzQ2xhc3MpIHtcbiAgICAgICAgICBsYXllci5jc3NDbGFzcyA9IGxheWVyLmNvbnRlbnRbMF0uY3NzQ2xhc3M7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICghcGFyZW50SWRzW3BhcmVudElkXSkge1xuXG4gICAgICAgICAgLy8gcHJlcGFyZSBsYXllciBkYXRhIGlmIHRoZXkgYXJlIGEgbmV3IHN0YXJib2FyZCB0YWJcbiAgICAgICAgICBpZiAobGF5ZXIudHlwZSA9PT0gXCJzdGFydGFiXCIpIHtcbiAgICAgICAgICAgIGxheWVyLmVkaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxheWVyLnJlbmRlclNwZWNpYWwgPSB0cnVlO1xuICAgICAgICAgICAgbGF5ZXIudGFiSWQgPSBsYXllci5pZDtcbiAgICAgICAgICAgIGlmICghbGF5ZXIubGF5ZXJuYW1lKSB7XG4gICAgICAgICAgICAgIGxheWVyLmRpc3BsYXkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaXRlcmF0ZSBjaGlsZHMgYW5kIHRlbGwgdGhlbSB0byBub3QgbG9hZCBpbiBsYXllcnN3aXRjaGVyXG4gICAgICAgICAgICBmbkhhbmRsZUNoaWxkcyA9IGZ1bmN0aW9uKGZMYXllcikge1xuICAgICAgICAgICAgICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgZkxheWVyLmNoaWxkcy5sZW5ndGg7IGNvdW50KyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRBcnIgPSBmTGF5ZXIuY2hpbGRzW2NvdW50XTtcbiAgICAgICAgICAgICAgICBjaGlsZEFyci5lZGl0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2hpbGRBcnIudGFiSWQgPSBmTGF5ZXIudGFiSWQ7XG4gICAgICAgICAgICAgICAgY2hpbGRBcnIucmVuZGVyU3BlY2lhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuYXJyTGF5ZXJzW2NoaWxkQXJyLmlkXSkge1xuICAgICAgICAgICAgICAgICAgY2hpbGQgPSBzZWxmLmFyckxheWVyc1tjaGlsZEFyci5pZF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNoaWxkID0gbmV3IEM0Z0xheWVyKGNoaWxkQXJyKTsvL2xheWVyc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gc2V0IHJlbmRlclNwZWNpYWwgdG8gcmVtb3ZlIGl0IGZyb20gbm9ybWFsIGxheWVyc3dpdGNoZXJcbiAgICAgICAgICAgICAgICBzZWxmLmFyckxheWVyc1tjaGlsZC5pZF0gPSBjaGlsZDtcbiAgICAgICAgICAgICAgICBmTGF5ZXIuY2hpbGRzW2NvdW50XSA9IGNoaWxkO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5oYXNDaGlsZHMpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZSBjYWxsXG4gICAgICAgICAgICAgICAgICBmbkhhbmRsZUNoaWxkcyhjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9OyAvLyBlbmQgb2YgZm5IYW5kbGVDaGlsZHNcblxuICAgICAgICAgICAgaWYgKGxheWVyLmhhc0NoaWxkcykge1xuICAgICAgICAgICAgICBmbkhhbmRsZUNoaWxkcyhsYXllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmbkFkZFRvSG9vayhsYXllcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdWlkID0gbGF5ZXIuaWQgfHwgdXRpbHMuZ2V0VW5pcXVlSWQoKTtcbiAgICAgICAgICB0aGlzLmFyckxheWVyc1t1aWRdID0gbGF5ZXI7XG4gICAgICAgICAgaWYodGhpcy5wcm94eS5jaGVja0xheWVySXNBY3RpdmVGb3Jab29tKGxheWVyLmlkKSl7XG4gICAgICAgICAgICBsYXllci5pc0luYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICBsYXllci5pc0luYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnByb3h5LmxheWVySWRzLnB1c2gobGF5ZXIuaWQpO1xuXG4gICAgICAgICAgaWYgKGxheWVyLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGlzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICBmbkhhbmRsZUFuZEFwcGVuZExheWVyQ2hpbGRzKGxheWVyKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxheWVyLnBpZCAmJiB0aGlzLmFyckxheWVyc1tsYXllci5waWRdKSB7XG4gICAgICAgICAgICAvLyBzZXQgaGlkZSB3aGVuIGxheWVycyBhcmUgbm90IGRpc3BsYXllZCBpbiB0aGUgc3RhcmJvYXJkXG4gICAgICAgICAgICBsYXllci5oaWRlID0gdGhpcy5hcnJMYXllcnNbbGF5ZXIucGlkXS5oaWRlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB2aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHBlcm1hbGlua2VkTGF5ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAocCA9IDA7IHAgPCBwZXJtYWxpbmtlZExheWVycy5sZW5ndGg7IHAgKz0gMSkge1xuICAgICAgICAgICAgICBpZiAocGVybWFsaW5rZWRMYXllcnNbcF0gPT0gbGF5ZXIuaWQpIHtcbiAgICAgICAgICAgICAgICB2aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgobGF5ZXIuaGlkZSAhPT0gXCIxXCIpIHx8ICh2aXNpYmxlKSkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllci5pZF0gPSAnaW52aXNpYmxlJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgfSAvLyBlbmQgb2YgZm9yLWxvb3BcblxuICAgICAgLy8gd3JhcHBlckVsZW1lbnQuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzVmlzaWJsZTtcbiAgfSAvLyBlbmQgb2YgXCJhZGRMYXllcnMoKVwiXG4gIGxvYWRMYXllckNvbnRlbnQoaXRlbVVpZCkge1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgaSxcbiAgICAgIGxheWVycyxcbiAgICAgIGZlYXR1cmVzLFxuICAgICAgZmVhdHVyZVByb2plY3Rpb24sXG4gICAgICBkYXRhUHJvamVjdGlvbixcbiAgICAgIGxheWVyR3JvdXAsXG4gICAgICBjb250ZW50RGF0YSxcbiAgICAgIHJlcXVlc3REYXRhLFxuICAgICAgcmVxdWVzdENvbnRlbnREYXRhLFxuICAgICAgcmVxdWVzdFZlY3RvclNvdXJjZSxcbiAgICAgIHZlY3RvckxheWVyLFxuICAgICAgdmVjdG9yU291cmNlLFxuICAgICAgdmVjdG9yU3R5bGUsXG4gICAgICBjbHVzdGVyU291cmNlLFxuICAgICAgc3R5bGVGb3JDbHVzdGVyLFxuICAgICAgcmVmcmVzaEludGVydmFsLFxuICAgICAgcmVmcmVzaEFqYXhWYXJzLFxuICAgICAgZm5BdHRhY2hEYXRhVG9MYXllcjtcblxuICAgIHJlZnJlc2hBamF4VmFycyA9IHt9O1xuXG4gICAgZm5BdHRhY2hEYXRhVG9MYXllciA9IGZ1bmN0aW9uIChsYXllciwgZGF0YSkge1xuICAgICAgZGF0YS5wcm9wZXJ0aWVzID0gZGF0YS5wcm9wZXJ0aWVzIHx8IHt9O1xuXG4gICAgICBsYXllci5wb3B1cCA9IGRhdGEucG9wdXAgfHwgZGF0YS5wcm9wZXJ0aWVzLnBvcHVwIHx8IGZhbHNlO1xuICAgICAgbGF5ZXIudG9vbHRpcCA9IGRhdGEudG9vbHRpcCB8fCBkYXRhLnByb3BlcnRpZXMudG9vbHRpcCB8fCBmYWxzZTtcbiAgICAgIGxheWVyLnRvb2x0aXBfbGVuZ3RoID0gZGF0YS50b29sdGlwX2xlbmd0aCB8fCBkYXRhLnByb3BlcnRpZXMudG9vbHRpcF9sZW5ndGggfHwgZmFsc2U7XG4gICAgICBsYXllci5sYWJlbCA9IGRhdGEubGFiZWwgfHwgZGF0YS5wcm9wZXJ0aWVzLmxhYmVsIHx8IGZhbHNlO1xuICAgICAgbGF5ZXIuem9vbV9vbmNsaWNrID0gZGF0YS56b29tX29uY2xpY2sgfHwgZGF0YS5wcm9wZXJ0aWVzLnpvb21fb25jbGljayB8fCBmYWxzZTtcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNvbnRlbnQpIHtcbiAgICAgIGxheWVycyA9IFtdO1xuXG4gICAgICAgICAgdmFyIGNvbnRlbnRGZWF0dXJlcyA9IFtdO1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmFyckxheWVyc1tpdGVtVWlkXS5jb250ZW50Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgY29udGVudERhdGEgPSB0aGlzLmFyckxheWVyc1tpdGVtVWlkXS5jb250ZW50W2ldO1xuICAgICAgICAgIHN0eWxlRm9yQ2x1c3RlciA9IGZ1bmN0aW9uIChmZWF0dXJlLCByZXNvbHV0aW9uKSB7XG5cbiAgICAgICAgICAgIHZhciBzaXplLFxuICAgICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgICAgZkZlYXR1cmVzLFxuICAgICAgICAgICAgICBpY29uT2Zmc2V0LFxuICAgICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICAgIGssXG4gICAgICAgICAgICAgIGZpbGxjb2xvcixcbiAgICAgICAgICAgICAgZm9udGNvbG9yO1xuXG4gICAgICAgICAgICBpZiAoY29udGVudERhdGEgJiYgY29udGVudERhdGEubG9jYXRpb25TdHlsZSAmJiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tjb250ZW50RGF0YS5sb2NhdGlvblN0eWxlXSkge1xuICAgICAgICAgICAgICBzdHlsZSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2NvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGVdLnN0eWxlKGZlYXR1cmUsIHJlc29sdXRpb24pO1xuXG4gICAgICAgICAgICAgIGlmICghc3R5bGUpIHtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IFtdO1xuICAgICAgICAgICAgICAgIHNlbGYuZml0dGluZ0V4dGVuZHNbaXRlbVVpZF0gPSB2ZWN0b3JTb3VyY2UuZ2V0RXh0ZW50KCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoZmVhdHVyZSAhPT0gdW5kZWZpbmVkICYmIGZlYXR1cmUgIT09IG51bGwgJiYgZmVhdHVyZS5zZWxmICE9PSB3aW5kb3cpIHtcbiAgICAgICAgICAgICAgICBpZihmZWF0dXJlLmdldCgnZmVhdHVyZXMnKSl7XG4gICAgICAgICAgICAgICAgICBmRmVhdHVyZXMgPSBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgIGZGZWF0dXJlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgZkZlYXR1cmVzWzBdID0gZmVhdHVyZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2l6ZSA9IGZGZWF0dXJlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKHNpemUgPiAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZkZlYXR1cmVzWzBdLmdldFN0eWxlKCkgJiYgc2l6ZSA8IDEwMDApIHsgLy8gbGltaXQgZm9yIHBlcmZvcm1hbmNlXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlWzBdID0gZkZlYXR1cmVzWzBdLmdldFN0eWxlKClbMF07XG4gICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBmRmVhdHVyZXMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZGZWF0dXJlc1trXS5nZXRTdHlsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2NvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGVdLnN0eWxlKGZGZWF0dXJlc1swXSwgcmVzb2x1dGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbY29udGVudERhdGEubG9jYXRpb25TdHlsZV0uc3R5bGUoZkZlYXR1cmVzWzBdLCByZXNvbHV0aW9uKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICghc3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSBbXTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIGJ1YmJsZS1vZmZzZXRcbiAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSBbMCwgMF07XG4gICAgICAgICAgICAgICAgICBpZiAoc3R5bGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZVswXS5nZXRJbWFnZSgpICYmIHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzICYmIHR5cGVvZiBzdHlsZVswXS5nZXRJbWFnZSgpLmdldFJhZGl1cyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmFkaXVzID0gcGFyc2VJbnQoc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMoKSwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSBbMCwgcmFkaXVzXTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3R5bGVbMF0uZ2V0SW1hZ2UoKSAmJiBzdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvciAmJiB0eXBlb2Ygc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRBbmNob3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSBzdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvcigpIHx8IFswLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBmaWxsY29sb3IgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoJzQ5NzVBOCcse1xuICAgICAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiA3MFxuICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5jbHVzdGVyX2ZpbGxjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBmaWxsY29sb3IgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoY29udGVudERhdGEuY2x1c3Rlcl9maWxsY29sb3Ise1xuICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogNzBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBmb250Y29sb3IgPSAnI0ZGRkZGRic7XG4gICAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEuY2x1c3Rlcl9mb250Y29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KGNvbnRlbnREYXRhLmNsdXN0ZXJfZm9udGNvbG9yLHtcbiAgICAgICAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDEwMFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgc3R5bGUucHVzaChcbiAgICAgICAgICAgICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgb2wuc3R5bGUuVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIuKXj1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udDogXCI2MHB4IHNhbnMtc2VyaWZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IC0xICogaWNvbk9mZnNldFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IC0xICogaWNvbk9mZnNldFsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZpbGxjb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgdGV4dDogbmV3IG9sLnN0eWxlLlRleHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogc2l6ZS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogLTEgKiBpY29uT2Zmc2V0WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEgKiBpY29uT2Zmc2V0WzFdICsgMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZvbnRjb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNpemUgPT09IDEgJiYgZkZlYXR1cmVzWzBdLmdldFN0eWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmRmVhdHVyZXNbMF0uZ2V0U3R5bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICAgIH07IC8vIGVuZCBvZiBzdHlsZUZvckNsdXN0ZXIoKVxuXG4gICAgICAgICAgaWYgKGNvbnRlbnREYXRhICYmIChjb250ZW50RGF0YS50eXBlID09PSBcInVybERhdGFcIikpIHtcblxuICAgICAgICAgICAgcmVxdWVzdERhdGEgPSB7fTtcbiAgICAgICAgICAgIHJlcXVlc3REYXRhLnVybCA9IGNvbnRlbnREYXRhLmRhdGEudXJsO1xuICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLmRhdGEucGFyYW1zKSB7XG4gICAgICAgICAgICAgIHJlcXVlc3REYXRhLnBhcmFtcyA9IGRlY29kZVVSSUNvbXBvbmVudChjb250ZW50RGF0YS5kYXRhLnBhcmFtcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5zZXR0aW5ncy5ib3VuZGluZ0JveCkge1xuICAgICAgICAgICAgICByZXF1ZXN0Q29udGVudERhdGEgPSBjb250ZW50RGF0YTtcbiAgICAgICAgICAgICAgcmVxdWVzdFZlY3RvclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHtcbiAgICAgICAgICAgICAgICBsb2FkZXI6IGZ1bmN0aW9uIChleHRlbnQsIHJlc29sdXRpb24sIHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIHZhciBib3VuZGluZ0FycmF5LFxuICAgICAgICAgICAgICAgICAgICBzdHJCb3VuZGluZ0JveCxcbiAgICAgICAgICAgICAgICAgICAgdXJsO1xuXG4gICAgICAgICAgICAgICAgICBib3VuZGluZ0FycmF5ID0gb2wucHJvai50cmFuc2Zvcm1FeHRlbnQoZXh0ZW50LCBwcm9qZWN0aW9uLCAnRVBTRzo0MzI2Jyk7XG4gICAgICAgICAgICAgICAgICAvL2RpZmZlcmVudCBjYXNlcyBmb3IgT3ZlcnBhc3NfUUwgYW5kIG9sZCBPdmVycGFzc1xuICAgICAgICAgICAgICAgICAgaWYocmVxdWVzdERhdGEucGFyYW1zLnN1YnN0cigwLCAxKSA9PSBcIjxcIil7XG4gICAgICAgICAgICAgICAgICAgIHN0ckJvdW5kaW5nQm94ID0gJzxiYm94LXF1ZXJ5IHM9XCInICsgYm91bmRpbmdBcnJheVsxXSArICdcIiBuPVwiJyArIGJvdW5kaW5nQXJyYXlbM10gKyAnXCIgdz1cIicgKyBib3VuZGluZ0FycmF5WzBdICsgJ1wiIGU9XCInICsgYm91bmRpbmdBcnJheVsyXSArICdcIi8+JztcblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgc3RyQm91bmRpbmdCb3ggPWJvdW5kaW5nQXJyYXlbMV0gKyAnLCcgKyBib3VuZGluZ0FycmF5WzBdICsgJywnICsgYm91bmRpbmdBcnJheVszXSArICcsJyArIGJvdW5kaW5nQXJyYXlbMl07XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHVybCA9IHJlcXVlc3REYXRhLnVybDtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGJib3hUYWcgPSByZXF1ZXN0RGF0YS5wYXJhbXMuaW5kZXhPZignKGJib3gpJykgPj0gMCA/IC9cXChiYm94XFwpL2cgOiAvXFx7e2Jib3hcXH19L2dcblxuICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3REYXRhLnBhcmFtcykge1xuXG4gICAgICAgICAgICAgICAgICAgIHVybCArPSAnP2RhdGE9JyArIGVuY29kZVVSSUNvbXBvbmVudChyZXF1ZXN0RGF0YS5wYXJhbXMucmVwbGFjZShiYm94VGFnLCBzdHJCb3VuZGluZ0JveCkpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5sYXllclJlcXVlc3RzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sYXllclJlcXVlc3RzID0ge307XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5sYXllclJlcXVlc3RzWydsYXllclJlcXVlc3QnICsgaXRlbVVpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxheWVyUmVxdWVzdHNbJ2xheWVyUmVxdWVzdCcgKyBpdGVtVWlkXS5hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBzZWxmLmxheWVyUmVxdWVzdHNbJ2xheWVyUmVxdWVzdCcgKyBpdGVtVWlkXSA9IGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICAgICAgICAgIH0pLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBqLFxuICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlcyxcbiAgICAgICAgICAgICAgICAgICAgICBvc21Ob2RlcyxcbiAgICAgICAgICAgICAgICAgICAgICBvc21OZHMsXG4gICAgICAgICAgICAgICAgICAgICAgbm9kZUlkeCxcbiAgICAgICAgICAgICAgICAgICAgICBuZElkeCxcbiAgICAgICAgICAgICAgICAgICAgICBpbmZvTm9kZXMsXG4gICAgICAgICAgICAgICAgICAgICAgbmV3VGFnLFxuICAgICAgICAgICAgICAgICAgICAgIHJlZjtcblxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2VsZi5sYXllclJlcXVlc3RzWydsYXllclJlcXVlc3QnICsgaXRlbVVpZF07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcHJlcHJvY2Vzc2luZyB0aGUgb3NtX3htbCB0byBmaW5kIHJlbGF0aW9uLW5vZGVzIHdpdGggaW5mb3JtYXRpb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmNoaWxkcmVuICYmIHJlc3BvbnNlLmNoaWxkcmVuWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gMSkgZmluZCBub2RlcyB3aXRoIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICBvc21Ob2RlcyA9IHJlc3BvbnNlLmNoaWxkcmVuWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdub2RlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKG9zbU5vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvTm9kZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobm9kZUlkeCBpbiBvc21Ob2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3NtTm9kZXMuaGFzT3duUHJvcGVydHkobm9kZUlkeCkgJiYgb3NtTm9kZXNbbm9kZUlkeF0gJiYgb3NtTm9kZXNbbm9kZUlkeF0uY2hpbGRyZW4gJiYgb3NtTm9kZXNbbm9kZUlkeF0uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9Ob2Rlc1tvc21Ob2Rlc1tub2RlSWR4XS5nZXRBdHRyaWJ1dGUoJ2lkJyldID0gb3NtTm9kZXNbbm9kZUlkeF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5mb05vZGVzW29zbU5vZGVzW25vZGVJZHhdLmdldEF0dHJpYnV0ZSgnaWQnKV0gPSBub2RlSWR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gMikgY2hlY2sgYW5kIGhhbmRsZSByZWxhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICBvc21OZHMgPSByZXNwb25zZS5jaGlsZHJlblswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAob3NtTmRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG5kSWR4IGluIG9zbU5kcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmRJZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3NtTmRzLmhhc093blByb3BlcnR5KG5kSWR4KSAmJiBvc21OZHNbbmRJZHhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9IG9zbU5kc1tuZElkeF0uZ2V0QXR0cmlidXRlKCdyZWYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm9Ob2RlcyAmJiByZWYgJiYgaW5mb05vZGVzW3JlZl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdENvbnRlbnREYXRhICYmIHJlcXVlc3RDb250ZW50RGF0YS5zZXR0aW5ncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RDb250ZW50RGF0YS5zZXR0aW5ncy5zaG93QWRkaXRpb25hbEdlb21ldHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFyayBhcyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RhZyA9IHJlc3BvbnNlLmNyZWF0ZUVsZW1lbnQoJ3RhZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdUYWcgJiYgb3NtTmRzW25kSWR4XS5wYXJlbnRFbGVtZW50ICYmIG9zbU5kc1tuZElkeF0ucGFyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RhZy5zZXRBdHRyaWJ1dGUoJ2snLCAnYzRnX29zbV9yZWYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RhZy5zZXRBdHRyaWJ1dGUoJ3YnLCBvc21OZHNbbmRJZHhdLnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9Ob2Rlc1tyZWZdLmFwcGVuZENoaWxkKG5ld1RhZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvTm9kZXNbcmVmXS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgY2hlY2sgYW5kIGhhbmRsZSByZWxhdGlvbnMuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIC8vIGltcG9ydCBvc21feG1sXG4gICAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gbmV3IG9sLmZvcm1hdC5PU01YTUwoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0ICYmIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXMgPSBmb3JtYXQucmVhZEZlYXR1cmVzKHJlc3BvbnNlLCB7ZmVhdHVyZVByb2plY3Rpb246IHByb2plY3Rpb259KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDYW4gbm90IHJlYWQgZmVhdHVyZS4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhlLnN0YWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBwb3N0cHJvY2Vzc2luZyBmZWF0dXJlc1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChyRmVhdHVyZXMgJiYgckZlYXR1cmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCByRmVhdHVyZXMubGVuZ3RoOyBqICs9IDEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAockZlYXR1cmVzW2pdLmdldEdlb21ldHJ5KCkuZ2V0VHlwZSgpID09PSBcIlBvaW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0KCdvc21fdHlwZScsICdub2RlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldCgnb3NtX3R5cGUnLCAnd2F5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldCgnYzRnX3R5cGUnLCAnb3NtJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXQoJ2NsdXN0ZXJfem9vbScsIGNvbnRlbnREYXRhLmNsdXN0ZXJfem9vbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXQoJ2NsdXN0ZXJfcG9wdXAnLCBjb250ZW50RGF0YS5jbHVzdGVyX3BvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldCgnbG9jX2xpbmt1cmwnLCBjb250ZW50RGF0YS5sb2NfbGlua3VybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXQoJ2hvdmVyX2xvY2F0aW9uJywgY29udGVudERhdGEuaG92ZXJfbG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0KCdob3Zlcl9zdHlsZScsIGNvbnRlbnREYXRhLmhvdmVyX3N0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldCgnem9vbV9vbmNsaWNrJywgY29udGVudERhdGEuZGF0YS56b29tX29uY2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0KCdsYWJlbCcsIGNvbnRlbnREYXRhLmRhdGEubGFiZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0Q29udGVudERhdGEuc2V0dGluZ3MuZm9yY2VOb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgdHJhY2tzIGFuZCBhcmVhcyB0byBwb2ludHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAockZlYXR1cmVzW2pdLmdldEdlb21ldHJ5KCkuZ2V0VHlwZSgpID09PSBcIlBvbHlnb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbnRlclBvaW50ID0gckZlYXR1cmVzW2pdLmdldEdlb21ldHJ5KCkuZ2V0SW50ZXJpb3JQb2ludCgpLmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0R2VvbWV0cnkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBvbC5nZW9tLlBvaW50KGNlbnRlclBvaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJGZWF0dXJlc1tqXS5nZXRHZW9tZXRyeSgpLmdldFR5cGUoKSA9PT0gXCJMaW5lU3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBwcsO8ZmVuIG9iIGRpZXMga29ycmVrdGVyIG1pdHRlbHB1bmt0IGlzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmVFeHRlbnQgPSByRmVhdHVyZXNbal0uZ2V0R2VvbWV0cnkoKS5nZXRFeHRlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlclBvaW50ID0gb2wuZXh0ZW50LmdldENlbnRlcihsaW5lRXh0ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXRHZW9tZXRyeShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IG9sLmdlb20uUG9pbnQoY2VudGVyUG9pbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAockZlYXR1cmVzW2pdLmdldCgnYzRnX29zbV9yZWYnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChyZXF1ZXN0Q29udGVudERhdGEuc2V0dGluZ3Muc2hvd0FkZGl0aW9uYWxHZW9tZXRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RDb250ZW50RGF0YS5zZXR0aW5ncy5hZGRpdGlvbmFsU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBsb2FkIGFuZCBhdHRhY2ggc3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldFN0eWxlKGM0Zy5tYXBzLnV0aWxzLnJlZHVjZVN0eWxlKHJlcXVlc3RDb250ZW50RGF0YS5sb2NhdGlvblN0eWxlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihyZXNwb25zZSAmJiByZXNwb25zZS5lbGVtZW50cyl7XG4gICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBlbGVtZW50SWQgPSAwOyBlbGVtZW50SWQgPCByZXNwb25zZS5lbGVtZW50cy5sZW5ndGg7IGVsZW1lbnRJZCsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gcmVzcG9uc2UuZWxlbWVudHNbZWxlbWVudElkXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudC50eXBlID09IFwibm9kZVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWVsZW1lbnQudGFncyl7Ly9ub3QgYSBmZWF0dXJlLCBidXQgcGFydCBvZiBhIHdheSBvciByZWxhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb2ludCA9IG5ldyBvbC5nZW9tLlBvaW50KFtlbGVtZW50LmxvbixlbGVtZW50LmxhdF0pLnRyYW5zZm9ybSgnRVBTRzo0MzI2JywnRVBTRzozODU3Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IHBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnb3NtX3R5cGUnLCAnbm9kZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihlbGVtZW50LnR5cGUgPT0gXCJ3YXlcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcnJDb29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGVsZW1lbnQubm9kZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBub2RlID0gcmVzcG9uc2UuZWxlbWVudHMuZmluZChmdW5jdGlvbihvYmpOb2RlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmpOb2RlLmlkID09PSBlbGVtZW50Lm5vZGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyckNvb3Jkcy5wdXNoKFtub2RlLmxvbixub2RlLmxhdF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGFyckNvb3Jkc1swXVswXSA9PSBhcnJDb29yZHNbYXJyQ29vcmRzLmxlbmd0aC0xXVswXSAmJiBhcnJDb29yZHNbMF1bMV0gPT0gYXJyQ29vcmRzW2FyckNvb3Jkcy5sZW5ndGgtMV1bMV0peyAvL3BvbHlnb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXJyQ29vcmRzW2FyckNvb3Jkcy5sZW5ndGgtMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyQ29vcmRzLmxlbmd0aCA9IGFyckNvb3Jkcy5sZW5ndGgtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9seWdvbiA9IG5ldyBvbC5nZW9tLlBvbHlnb24oW2FyckNvb3Jkc10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlnb24udHJhbnNmb3JtKCdFUFNHOjQzMjYnLCdFUFNHOjM4NTcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdENvbnRlbnREYXRhLnNldHRpbmdzLmZvcmNlTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgdHJhY2tzIGFuZCBhcmVhcyB0byBwb2ludHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZW50ZXJQb2ludCA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRJbnRlcmlvclBvaW50KCkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0R2VvbWV0cnkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBvbC5nZW9tLlBvaW50KGNlbnRlclBvaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBwb2x5Z29uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNleyAvL2xpbmVzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGluZVN0cmluZyA9IG5ldyBvbC5nZW9tLkxpbmVTdHJpbmcoW2FyckNvb3Jkc10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdHJpbmcudHJhbnNmb3JtKCdFUFNHOjQzMjYnLCdFUFNHOjM4NTcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IGxpbmVTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0Q29udGVudERhdGEuc2V0dGluZ3MuZm9yY2VOb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmVFeHRlbnQgPSBmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0RXh0ZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJQb2ludCA9IG9sLmV4dGVudC5nZXRDZW50ZXIobGluZUV4dGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldEdlb21ldHJ5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuZ2VvbS5Qb2ludChjZW50ZXJQb2ludClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ29zbV90eXBlJywgJ3dheScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2M0Z190eXBlJywgJ29zbScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2NsdXN0ZXJfem9vbScsIGNvbnRlbnREYXRhLmNsdXN0ZXJfem9vbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnY2x1c3Rlcl9wb3B1cCcsIGNvbnRlbnREYXRhLmNsdXN0ZXJfcG9wdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2xvY19saW5rdXJsJywgY29udGVudERhdGEubG9jX2xpbmt1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2hvdmVyX2xvY2F0aW9uJywgY29udGVudERhdGEuaG92ZXJfbG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2hvdmVyX3N0eWxlJywgY29udGVudERhdGEuaG92ZXJfc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ3pvb21fb25jbGljaycsIGNvbnRlbnREYXRhLmRhdGEuem9vbV9vbmNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdsYWJlbCcsIGNvbnRlbnREYXRhLmRhdGEubGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCB0YWdzIGluIGVsZW1lbnQudGFncyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KHRhZ3MsIGVsZW1lbnQudGFnc1t0YWdzXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXMucHVzaChmZWF0dXJlKTtcblxuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFZlY3RvclNvdXJjZS5hZGRGZWF0dXJlcyhyRmVhdHVyZXMpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgYWRkIGZlYXR1cmVzIHRvIHNvdXJjZS4gVGhlIFwiZm9yY2VOb2Rlc1wiLW9wdGlvbiBzaG91bGQgYmUgdXNlZC4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL3NlbGYuY29tYmluZUxheWVycyhzZWxmKTtcbiAgICAgICAgICAgICAgICAgIH0pOyAvLyBlbmQgb2YgQUpBWFxuXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdHJhdGVneTogb2wubG9hZGluZ3N0cmF0ZWd5LmJib3hcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgdmVjdG9yU291cmNlID0gcmVxdWVzdFZlY3RvclNvdXJjZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvbC5mb3JtYXRbY29udGVudERhdGEuZm9ybWF0XSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cbiAgICAgICAgICAgICAgICAvL1N0YXRpY1ZlY3RvclxuICAgICAgICAgICAgICAgIHZlY3RvclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHtcbiAgICAgICAgICAgICAgICAgIGZvcm1hdDogbmV3IG9sLmZvcm1hdFtjb250ZW50RGF0YS5mb3JtYXRdKCksXG4gICAgICAgICAgICAgICAgICB1cmw6IHJlcXVlc3REYXRhLnVybCxcbiAgICAgICAgICAgICAgICAgIHByb2plY3Rpb246ICdFUFNHOjM4NTcnLFxuICAgICAgICAgICAgICAgICAgc3RyYXRlZ3k6IG9sLmxvYWRpbmdzdHJhdGVneS5hbGxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5zZXR0aW5ncyAmJiBjb250ZW50RGF0YS5zZXR0aW5ncy5yZWZyZXNoID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5sYXllclJlcXVlc3RzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sYXllclJlcXVlc3RzID0ge307XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHJlZnJlc2hJbnRlcnZhbCA9ICh0eXBlb2YgY29udGVudERhdGEuc2V0dGluZ3MuaW50ZXJ2YWwgPT09ICdudW1iZXInKSA/IGNvbnRlbnREYXRhLnNldHRpbmdzLmludGVydmFsIDogMTAwMDA7XG4gICAgICAgICAgICAgICAgICAvKiBkbyBpdCB3aXRoIGJldHRlciBhamF4LWhhbmRsaW5nXG4gICAgICAgICAgICAgICAgICAgc2VsZi5sYXllclJlcXVlc3RzWydsYXllclJlcXVlc3QnICsgaXRlbVVpZF0gPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgIHZlY3RvclNvdXJjZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgIH0sIHJlZnJlc2hJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgICAgLy8gQW5mYW5nIEVpbnNjaHViIG5ldWUgQUpBWC1MYXllclxuICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmJsbkhhc1Bvc2l0aW9uSWRzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuYXJyUG9zaXRpb25JZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5vYmpGZWF0dXJlcyA9IHt9O1xuXG4gICAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2Uuc2V0KCdyZWZyZXNoSW50ZXJ2YWwnLCByZWZyZXNoSW50ZXJ2YWwpO1xuXG4gICAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2Uuc2V0KCdyZWZyZXNoRnVuY3Rpb24nLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2ZWN0b3JTb3VyY2UuZ2V0KCdoYXNJZHMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZlY3RvclNvdXJjZS5mb3JFYWNoRmVhdHVyZShmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmUuZ2V0KCdwb3NpdGlvbklkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmJsbkhhc1Bvc2l0aW9uSWRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmFyclBvc2l0aW9uSWRzLnB1c2goZmVhdHVyZS5nZXQoJ3Bvc2l0aW9uSWQnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5vYmpGZWF0dXJlc1tmZWF0dXJlLmdldCgncG9zaXRpb25JZCcpXSA9IGZlYXR1cmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZnJlc2hBamF4VmFycy5ibG5IYXNQb3NpdGlvbklkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yU291cmNlLnNldCgnaGFzSWRzJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgIHVybDogcmVxdWVzdERhdGEudXJsLFxuICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlbmV3YWJsZVJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBvZiBzdGF0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZWFjaChkYXRhLmZlYXR1cmVzLCBmdW5jdGlvbiAoaW5kZXgsIGZlYXR1cmVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVEYXRhLnR5cGUgJiYgZmVhdHVyZURhdGEudHlwZSA9PT0gXCJGZWF0dXJlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZWF0dXJlID0gKG5ldyBvbC5mb3JtYXRbY29udGVudERhdGEuZm9ybWF0XSgpKS5yZWFkRmVhdHVyZShmZWF0dXJlRGF0YSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiAnRVBTRzozODU3J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF5ZXIgPSBzZWxmLmFyckxheWVyc1tmZWF0dXJlRGF0YS5wcm9wZXJ0aWVzLmlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3B1cENvbnRlbnQgPSBmZWF0dXJlRGF0YS5wcm9wZXJ0aWVzLnBvcHVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tmZWF0dXJlRGF0YS5wcm9wZXJ0aWVzLnN0eWxlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMoW2ZlYXR1cmVEYXRhLnByb3BlcnRpZXMuc3R5bGVJZF0sIHtkb25lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRTdHlsZShzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tmZWF0dXJlRGF0YS5wcm9wZXJ0aWVzLnN0eWxlSWRdLnN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldFN0eWxlKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2ZlYXR1cmVEYXRhLnByb3BlcnRpZXMuc3R5bGVJZF0uc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZ2V0U291cmNlKCkuZm9yRWFjaEZlYXR1cmUoZnVuY3Rpb24obmVzdGVkRmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZEZlYXR1cmUuc2V0KCdwb3B1cCcsIHBvcHVwQ29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5jb250ZW50WzBdLmxvY2F0aW9uU3R5bGUgPSBmZWF0dXJlRGF0YS5wcm9wZXJ0aWVzLnN0eWxlSWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZURhdGEucHJvcGVydGllcy5zdHlsZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhbZmVhdHVyZURhdGEucHJvcGVydGllcy5zdHlsZUlkXSwge2RvbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXRTdHlsZShzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tmZWF0dXJlRGF0YS5wcm9wZXJ0aWVzLnN0eWxlSWRdLnN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldFN0eWxlKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2ZlYXR1cmVEYXRhLnByb3BlcnRpZXMuc3R5bGVJZF0uc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllci5pZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oaWRlTGF5ZXIobGF5ZXIuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNob3dMYXllcihsYXllci5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2ZWN0b3JTb3VyY2UuYWRkRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5mZWF0dXJlcykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5hcnJOZXdQb3NpdGlvbklkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMub2JqTmV3RmVhdHVyZXMgPSB7fTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZWFjaChkYXRhLmZlYXR1cmVzLCBmdW5jdGlvbiAoaW5kZXgsIGZlYXR1cmVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVEYXRhLnR5cGUgJiYgZmVhdHVyZURhdGEudHlwZSA9PSBcIkZlYXR1cmVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmZlYXR1cmUgPSAobmV3IG9sLmZvcm1hdFtjb250ZW50RGF0YS5mb3JtYXRdKCkpLnJlYWRGZWF0dXJlKGZlYXR1cmVEYXRhLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246ICdFUFNHOjM4NTcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5mZWF0dXJlLnNldCgnY2x1c3Rlcl96b29tJywgY29udGVudERhdGEuY2x1c3Rlcl96b29tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5mZWF0dXJlLnNldCgnbG9jX2xpbmt1cmwnLCBjb250ZW50RGF0YS5sb2NfbGlua3VybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuZmVhdHVyZS5zZXQoJ2hvdmVyX2xvY2F0aW9uJywgY29udGVudERhdGEuaG92ZXJfbG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmZlYXR1cmUuc2V0KCdob3Zlcl9zdHlsZScsIGNvbnRlbnREYXRhLmhvdmVyX3N0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWZyZXNoQWpheFZhcnMuZmVhdHVyZS5nZXQoJ3Bvc2l0aW9uSWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuYXJyTmV3UG9zaXRpb25JZHMucHVzaChyZWZyZXNoQWpheFZhcnMuZmVhdHVyZS5nZXQoJ3Bvc2l0aW9uSWQnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5vYmpOZXdGZWF0dXJlc1tyZWZyZXNoQWpheFZhcnMuZmVhdHVyZS5nZXQoJ3Bvc2l0aW9uSWQnKV0gPSByZWZyZXNoQWpheFZhcnMuZmVhdHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5lYWNoKHJlZnJlc2hBamF4VmFycy5hcnJQb3NpdGlvbklkcywgZnVuY3Rpb24gKGluZGV4LCBwb3NpdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZnJlc2hBamF4VmFycy5hcnJOZXdQb3NpdGlvbklkcy5pbmRleE9mKHBvc2l0aW9uSWQpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwb3NpdGlvbnMgaWQgaW4gbmV1ZXIgYW50d29ydCBuaWNodCBtZWhyIGVudGhhbHRlbiAtPiBsw7ZzY2hlIGZlYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVmcmVzaEFqYXhWYXJzLm9iakZlYXR1cmVzW3Bvc2l0aW9uSWRdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvclNvdXJjZS5yZW1vdmVGZWF0dXJlKHJlZnJlc2hBamF4VmFycy5vYmpGZWF0dXJlc1twb3NpdGlvbklkXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZShyZWZyZXNoQWpheFZhcnMuYXJyUG9zaXRpb25JZHNbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5lYWNoKHJlZnJlc2hBamF4VmFycy5hcnJOZXdQb3NpdGlvbklkcywgZnVuY3Rpb24gKGluZGV4LCBwb3NpdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZnJlc2hBamF4VmFycy5hcnJQb3NpdGlvbklkcy5pbmRleE9mKHBvc2l0aW9uSWQpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwb3NpdGlvbnMgaWQgaXN0IG5vY2ggbmljaHQgdm9yaGFuZGVuIC0+IG5ldWVzIGZlYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5hcnJQb3NpdGlvbklkcy5wdXNoKHBvc2l0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLm9iakZlYXR1cmVzW3Bvc2l0aW9uSWRdID0gcmVmcmVzaEFqYXhWYXJzLm9iak5ld0ZlYXR1cmVzW3Bvc2l0aW9uSWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yU291cmNlLmFkZEZlYXR1cmUocmVmcmVzaEFqYXhWYXJzLm9iak5ld0ZlYXR1cmVzW3Bvc2l0aW9uSWRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LnJlcXVlc3RGdW5jdGlvbnNbJ3JlcXVlc3RfJyArIGl0ZW1VaWRdID0ge1xuICAgICAgICAgICAgICAgICAgICAnZnVuY3Rpb24nOiB2ZWN0b3JTb3VyY2UuZ2V0KCdyZWZyZXNoRnVuY3Rpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgJ2ludGVydmFsJzogcmVmcmVzaEludGVydmFsXG4gICAgICAgICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgICAgICAgIC8vIEVuZGUgRWluc2NodWIgbmV1ZSBBSkFYLUxheWVyXG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0Zvcm1hdCB0eXBlICcgKyBjb250ZW50RGF0YS5mb3JtYXQgKyAnIGluIG9sLmZvcm1hdCBub3QgZm91bmQuJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLnNldHRpbmdzLmNsdXN0ZXIpIHtcblxuICAgICAgICAgICAgICBjbHVzdGVyU291cmNlID0gbmV3IG9sLnNvdXJjZS5DbHVzdGVyKHtcbiAgICAgICAgICAgICAgICBkaXN0YW5jZTogNDAsXG4gICAgICAgICAgICAgICAgLy90aHJlc2hvbGQ6IDIsIC8vbWluaW11bSBlbGVtZW50IGNvdW50XG4gICAgICAgICAgICAgICAgc291cmNlOiB2ZWN0b3JTb3VyY2UsXG4gICAgICAgICAgICAgICAgem9vbTogY29udGVudERhdGEuY2x1c3Rlcl96b29tXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGNsdXN0ZXJTb3VyY2UpO1xuICAgICAgICAgICAgICB0aGlzLnN0eWxlRm9yQ2x1c3RlciA9IHN0eWxlRm9yQ2x1c3RlcjtcblxuICAgICAgICAgICAgICAvL3ZlY3RvckxheWVyID0gdXRpbHMuZ2V0VmVjdG9yTGF5ZXIoY2x1c3RlclNvdXJjZSwgc3R5bGVGb3JDbHVzdGVyKTtcblxuICAgICAgICAgICAgICB2ZWN0b3JMYXllciA9IG5ldyBvbC5sYXllci5BbmltYXRlZENsdXN0ZXIoXG4gICAgICAgICAgICAgICAge1x0bmFtZTogJ0NsdXN0ZXInLFxuICAgICAgICAgICAgICAgICAgc291cmNlOiBjbHVzdGVyU291cmNlLFxuICAgICAgICAgICAgICAgICAgLy8gVXNlIGEgc3R5bGUgZnVuY3Rpb24gZm9yIGNsdXN0ZXIgc3ltYm9saXNhdGlvblxuICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlRm9yQ2x1c3RlclxuICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZlY3RvckxheWVyID0gdXRpbHMuZ2V0VmVjdG9yTGF5ZXIodmVjdG9yU291cmNlLCBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tjb250ZW50RGF0YS5sb2NhdGlvblN0eWxlXSA/IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2NvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGVdLnN0eWxlIDogbnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIEZpdCB0byBleHRlbmQgKi9cbiAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5zZXR0aW5ncyAmJiBjb250ZW50RGF0YS5zZXR0aW5ncy5maXRUb0V4dGVuZCkge1xuXG4gICAgICAgICAgICAgIHNlbGYuZml0dGluZ0V4dGVuZHMgPSBzZWxmLmZpdHRpbmdFeHRlbmRzIHx8IHt9O1xuXG4gICAgICAgICAgICAgIHZlY3RvclNvdXJjZS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgY3VycmVudGx5IHN0b3JlZCBpZCdzXG4gICAgICAgICAgICAgICAgZm9yIChpIGluIHNlbGYuZml0dGluZ0V4dGVuZHMpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmZpdHRpbmdFeHRlbmRzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5wcm94eS5hY3RpdmVMYXllcklkc1tpXSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBzZWxmLnByb3h5LmFjdGl2ZUxheWVySWRzWzBdID09IFwiaW52aXNpYmxlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2VsZi5maXR0aW5nRXh0ZW5kc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNlbGYuZml0dGluZ0V4dGVuZHNbaXRlbVVpZF0gPSB2ZWN0b3JTb3VyY2UuZ2V0RXh0ZW50KCk7Ly92ZWN0b3JTb3VyY2UuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgICAgICAgICB1dGlscy5maXRUb0V4dGVudHMoc2VsZi5maXR0aW5nRXh0ZW5kcywgc2VsZi5tYXBDb250cm9sbGVyLm1hcCk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbmQgb2YgZml0IHRvIGV4dGVuZFxuXG4gICAgICAgICAgICBmbkF0dGFjaERhdGFUb0xheWVyKHZlY3RvckxheWVyLCBjb250ZW50RGF0YS5kYXRhKTtcbiAgICAgICAgICAgIGxheWVycy5wdXNoKHZlY3RvckxheWVyKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCh0aGlzLmFyckxheWVyc1tpdGVtVWlkXS50eXBlID09PSBcInRhYmxlXCIpIHx8ICh0aGlzLmFyckxheWVyc1tpdGVtVWlkXS50eXBlID09PSBcImxpbmtcIikpIHtcbiAgICAgICAgICAgIHZhciBsYXllckNvbnRlbnQgPSB0aGlzLmFyckxheWVyc1tpdGVtVWlkXS5jb250ZW50O1xuICAgICAgICAgICAgY29udGVudERhdGEgPSBsYXllckNvbnRlbnRbMF07XG4gICAgICAgICAgICBpZiAoY29udGVudERhdGEgJiYgY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzICYmIGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy5wcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uID0gY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLnByb2plY3Rpb247XG4gICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uID0gdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0UHJvamVjdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGZvcmNlIGFsbCBub2RlcyBpbnRvIG9uZSBsYXllclxuXG5cbiAgICAgICAgICAgIHZhciBjb250ZW50RmVhdHVyZSA9IG5ldyBvbC5mb3JtYXRbbGF5ZXJDb250ZW50W2ldLmZvcm1hdF0oe30pLnJlYWRGZWF0dXJlcyhsYXllckNvbnRlbnRbaV0uZGF0YSwge1xuICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogZmVhdHVyZVByb2plY3Rpb24sXG4gICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiBkYXRhUHJvamVjdGlvblxuICAgICAgICAgICAgfSlbMF07XG4gICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2NsdXN0ZXJfem9vbScsIGNvbnRlbnREYXRhLmNsdXN0ZXJfem9vbSk7XG4gICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2NsdXN0ZXJfcG9wdXAnLCBjb250ZW50RGF0YS5jbHVzdGVyX3BvcHVwKTtcbiAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnbG9jX2xpbmt1cmwnLCBjb250ZW50RGF0YS5sb2NfbGlua3VybCk7XG4gICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2hvdmVyX2xvY2F0aW9uJywgY29udGVudERhdGEuaG92ZXJfbG9jYXRpb24pO1xuICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdob3Zlcl9zdHlsZScsIGNvbnRlbnREYXRhLmhvdmVyX3N0eWxlKTtcbiAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgncG9wdXAnLCBsYXllckNvbnRlbnRbaV0uZGF0YS5wcm9wZXJ0aWVzLnBvcHVwKTtcbiAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnem9vbV9vbmNsaWNrJywgY29udGVudERhdGEuem9vbV9vbmNsaWNrKTtcbiAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlcy5wdXNoKGNvbnRlbnRGZWF0dXJlKTtcblxuXG4gICAgICAgICAgICBpZihpKzEgPT09IHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNvbnRlbnQubGVuZ3RoKXtcbiAgICAgICAgICAgICAgdmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBjb250ZW50RmVhdHVyZXMsXG4gICAgICAgICAgICAgICAgcHJvamVjdGlvbjogJ0VQU0c6Mzg1NycsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBuZXcgb2wuZm9ybWF0Lkdlb0pTT04oKSxcblxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhICYmIGNvbnRlbnREYXRhLnNldHRpbmdzICYmIGNvbnRlbnREYXRhLnNldHRpbmdzLmNsdXN0ZXIpIHtcbiAgICAgICAgICAgICAgICBjbHVzdGVyU291cmNlID0gbmV3IG9sLnNvdXJjZS5DbHVzdGVyKHtcbiAgICAgICAgICAgICAgICAgIGRpc3RhbmNlOiA0MCxcbiAgICAgICAgICAgICAgICAgIHpvb206IGNvbnRlbnREYXRhLmNsdXN0ZXJfem9vbSxcblxuICAgICAgICAgICAgICAgICAgLy90aHJlc2hvbGQ6IDIsIC8vbWluaW11bSBlbGVtZW50IGNvdW50XG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IHZlY3RvclNvdXJjZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vdmVjdG9yTGF5ZXIgPSB1dGlscy5nZXRWZWN0b3JMYXllcihjbHVzdGVyU291cmNlLCBzdHlsZUZvckNsdXN0ZXIpO1xuXG4gICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIgPSBuZXcgb2wubGF5ZXIuQW5pbWF0ZWRDbHVzdGVyKFxuICAgICAgICAgICAgICAgICAge1x0bmFtZTogJ0NsdXN0ZXInLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGNsdXN0ZXJTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZSBhIHN0eWxlIGZ1bmN0aW9uIGZvciBjbHVzdGVyIHN5bWJvbGlzYXRpb25cbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlRm9yQ2x1c3RlclxuICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ZWN0b3JMYXllciA9IHV0aWxzLmdldFZlY3RvckxheWVyKHZlY3RvclNvdXJjZSwgY29udGVudERhdGEgJiYgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbY29udGVudERhdGEubG9jYXRpb25TdHlsZV0gPyBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tjb250ZW50RGF0YS5sb2NhdGlvblN0eWxlXS5zdHlsZSA6IG51bGwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxheWVycy5wdXNoKHZlY3RvckxheWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hcnJMYXllcnNbaXRlbVVpZF0uY29udGVudC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIC8vVE9ETzogcmVmYWN0b3JlbiB1bmQga8O8cnplbiFcbiAgICAgICAgICAgICAgLy8gd2UgaGF2ZSBvdmVycGFzcyByZXF1ZXN0IHdpdGggcmVhc3NpZ25lZCBmb3J1bSBsYXllcnNcbiAgICAgICAgICAgICAgLy8gZm9ydW0gbGF5ZXJzIGNhbiBub3QgYmUgZHJhd24gdmlhIHRoZSBub3JtYWwgZHJhd0xheWVyLCBiZWNhdXNlIHRoZXkgZG8gbm90IGhhdmUgYSBVaWRcbiAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhICYmICh0eXBlb2Ygb2wuZm9ybWF0W2NvbnRlbnREYXRhLmZvcm1hdF0gPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzICYmIGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy5wcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbiA9IGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy5wcm9qZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb24gPSB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZlYXR1cmVzID0gKG5ldyBvbC5mb3JtYXRbY29udGVudERhdGEuZm9ybWF0XSh7fSkpLnJlYWRGZWF0dXJlcyhjb250ZW50RGF0YS5kYXRhLCB7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogZmVhdHVyZVByb2plY3Rpb24sXG4gICAgICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogZGF0YVByb2plY3Rpb25cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBtaXNzaW5nU3R5bGVzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHVuc3R5bGVkRmVhdHVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZlYXR1cmVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2ZlYXR1cmVzW2pdLmdldCgnc3R5bGVJZCcpXSAmJiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tmZWF0dXJlc1tqXS5nZXQoJ3N0eWxlSWQnKV0uc3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlc1tqXS5zZXRTdHlsZShzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tmZWF0dXJlc1tqXS5nZXQoJ3N0eWxlSWQnKV0uc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIG1pc3NpbmdTdHlsZXMucHVzaChmZWF0dXJlc1tqXS5nZXQoJ3N0eWxlSWQnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgdW5zdHlsZWRGZWF0dXJlcy5wdXNoKGZlYXR1cmVzW2pdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZlY3RvclN0eWxlID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbY29udGVudERhdGEubG9jYXRpb25TdHlsZV0gJiYgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbY29udGVudERhdGEubG9jYXRpb25TdHlsZV0uc3R5bGU7XG5cbiAgICAgICAgICAgICAgICBpZiAobWlzc2luZ1N0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAvL1RPRE8gdGhlcmUgYXJlIHVuc3R5bGVkIGZlYXR1cmVzIGJlY2F1c2Ugc29tZSBzdHlsZXMgd2VyZSBub3QgbG9hZGVkXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZlY3RvclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXM6IGZlYXR1cmVzLFxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiAnRVBTRzozODU3JyxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBuZXcgb2wuZm9ybWF0Lkdlb0pTT04oKVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBjbHVzdGVyU291cmNlID0gbmV3IG9sLnNvdXJjZS5DbHVzdGVyKHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IDQwLFxuICAgICAgICAgICAgICAgICAgICB6b29tOiBjb250ZW50RGF0YS5jbHVzdGVyX3pvb20sXG5cbiAgICAgICAgICAgICAgICAgICAgLy90aHJlc2hvbGQ6IDIsIC8vbWluaW11bSBlbGVtZW50IGNvdW50XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogdmVjdG9yU291cmNlXG4gICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIgPSB1dGlscy5nZXRWZWN0b3JMYXllcihjbHVzdGVyU291cmNlLCB2ZWN0b3JTdHlsZSk7XG4gICAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEuZGF0YSAmJiBjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLnBvcHVwID0gY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLnRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIudG9vbHRpcCA9IGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy50b29sdGlwO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmxhYmVsID0gY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLm9uY2xpY2tfem9vbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5vbmNsaWNrX3pvb20gPSBjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMub25jbGlja196b29tO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGxheWVycy5wdXNoKHZlY3RvckxheWVyKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YSkge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdGb3JtYXQgdHlwZSAnICsgY29udGVudERhdGEuZm9ybWF0ICsgJyBpbiBvbC5mb3JtYXQgbm90IGZvdW5kLicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvL25vIGNvbnRlbnREYXRhLCBtYXliZSBhIGxpbmtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIG5vcm1hbCwgbm90IG92ZXJwYXNzIGxheWVyXG4gICAgICAgICAgICAgIHNlbGYuZHJhd0xheWVyKGl0ZW1VaWQpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cblxuXG5cbiAgICAgIC8vIGFkZCB2ZWN0b3IgbGF5ZXIgZ3JvdXBcbiAgICAgIGxheWVyR3JvdXAgPSBuZXcgb2wubGF5ZXIuR3JvdXAoe1xuICAgICAgICBsYXllcnM6IGxheWVyc1xuICAgICAgfSk7XG4gICAgICB0aGlzLmFyckxheWVyc1tpdGVtVWlkXS52ZWN0b3JMYXllciA9IGxheWVyR3JvdXA7XG4gICAgICBzZWxmLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKGxheWVyR3JvdXApO1xuICAgICAgLy9zZWxmLmNvbWJpbmUoc2VsZik7XG5cbiAgICB9XG4gICAgZWxzZSBpZih0aGlzLmFyckxheWVyc1tpdGVtVWlkXS5hc3luY19jb250ZW50ID09IDEpe1xuICAgICAgICAgIHN0eWxlRm9yQ2x1c3RlciA9IGZ1bmN0aW9uKGZlYXR1cmUsIHJlc29sdXRpb24pe1xuICAgICAgICAgICAgICB2YXIgc3R5bGVJZCxcbiAgICAgICAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgICAgICAgaWNvbk9mZnNldCxcbiAgICAgICAgICAgICAgICAgIHJhZGl1cyxcbiAgICAgICAgICAgICAgICAgIGZpbGxjb2xvcixcbiAgICAgICAgICAgICAgICAgIGZvbnRjb2xvcjtcbiAgICAgICAgICAgICAgaWYoZmVhdHVyZSAmJiBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKSl7XG4gICAgICAgICAgICAgICAgICBpZihzdHlsZUlkID0gZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbMF0uZ2V0KCdsb2NhdGlvblN0eWxlJykpe1xuICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS5zdHlsZShmZWF0dXJlLmdldCgnZmVhdHVyZXMnKVswXSxyZXNvbHV0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZighc3R5bGUpe1xuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlID0gW107XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZihmZWF0dXJlLmdldCgnZmVhdHVyZXMnKS5sZW5ndGggPiAxKXtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgYnViYmxlLW9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSBbMCwgMF07XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzID0gcGFyc2VJbnQoc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMoKSwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSBbMCwgcmFkaXVzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRBbmNob3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbk9mZnNldCA9IHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0QW5jaG9yKCkgfHwgWzAsIDBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgZmlsbGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KCc0OTc1QTgnLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogNzBcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmKGNvbnRlbnREYXRhLmNsdXN0ZXJfZmlsbGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShjb250ZW50RGF0YS5jbHVzdGVyX2ZpbGxjb2xvcix7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogNzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmKGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWzBdLmdldCgnY2x1c3Rlcl9maWxsY29sb3InKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShmZWF0dXJlLmdldCgnZmVhdHVyZXMnKVswXS5nZXQoJ2NsdXN0ZXJfZmlsbGNvbG9yJykse1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDcwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBmb250Y29sb3IgPSAnI0ZGRkZGRic7XG4gICAgICAgICAgICAgICAgICAgICAgaWYoZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbMF0uZ2V0KCdjbHVzdGVyX2ZvbnRjb2xvcicpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWzBdLmdldCgnY2x1c3Rlcl9mb250Y29sb3InKSx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMTAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgb2wuc3R5bGUuVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCLil49cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiBcIjYwcHggc2Fucy1zZXJpZlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IC0xICogaWNvbk9mZnNldFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtMSAqIGljb25PZmZzZXRbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZmlsbGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbmV3IG9sLnN0eWxlLlRleHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpLmxlbmd0aC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IC0xICogaWNvbk9mZnNldFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtMSAqIGljb25PZmZzZXRbMV0gKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZvbnRjb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmKHN0eWxlKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmVxdWVzdFZlY3RvclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHtcbiAgICAgICAgICAgICAgbG9hZGVyOiBmdW5jdGlvbiAoZXh0ZW50LCByZXNvbHV0aW9uLCBwcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgYm91bmRpbmdBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICBzdHJCb3VuZGluZ0JveCxcbiAgICAgICAgICAgICAgICAgICAgICB1cmw7XG4gICAgICAgICAgICAgICAgICBzZWxmLm1hcENvbnRyb2xsZXIuc3Bpbm5lci5zaG93KCk7XG4gICAgICAgICAgICAgICAgICBib3VuZGluZ0FycmF5ID0gb2wucHJvai50cmFuc2Zvcm1FeHRlbnQoZXh0ZW50LCBwcm9qZWN0aW9uLCAnRVBTRzo0MzI2Jyk7XG4gICAgICAgICAgICAgICAgICBzdHJCb3VuZGluZ0JveCA9IGJvdW5kaW5nQXJyYXlbMF0rJywnK2JvdW5kaW5nQXJyYXlbMV0rJzsnK2JvdW5kaW5nQXJyYXlbMl0rJywnK2JvdW5kaW5nQXJyYXlbM107XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5sYXllclJlcXVlc3RzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxheWVyUmVxdWVzdHMgPSB7fTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmxheWVyUmVxdWVzdHNbJ2xheWVyRGF0YVJlcXVlc3QnICsgaXRlbVVpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYubGF5ZXJSZXF1ZXN0c1snbGF5ZXJEYXRhUmVxdWVzdCcgKyBpdGVtVWlkXS5hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYoIXNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3NlbGYuYXJyTGF5ZXJzW2l0ZW1VaWRdLmxvY3N0eWxlXSl7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMoW3NlbGYuYXJyTGF5ZXJzW2l0ZW1VaWRdLmxvY3N0eWxlXSwge2RvbmU6IGZ1bmN0aW9uKCkge319KTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgc2VsZi5sYXllclJlcXVlc3RzWydsYXllckRhdGFSZXF1ZXN0JyArIGl0ZW1VaWRdID0galF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgIHVybDogc2VsZi5wcm94eS5hcGlfbGF5ZXJjb250ZW50ZGF0YV91cmwgKyAnLycgKyBzZWxmLmFyckxheWVyc1tpdGVtVWlkXS5pZCArJy8nK3N0ckJvdW5kaW5nQm94LFxuICAgICAgICAgICAgICAgICAgfSkuZG9uZSggZnVuY3Rpb24gKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEubGVuZ3RoID4gMCAmJiAhY29udGVudEZlYXR1cmVzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGxldCBsYXllciA9IHNlbGYuYXJyTGF5ZXJzW2l0ZW1VaWRdO1xuICAgICAgICAgICAgICAgICAgICAgIGxvb3BEYXRhOlxuICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RGF0YSA9IGRhdGFbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgY29udGVudEZlYXR1cmVzLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb250ZW50RGF0YS5pZCA9PT0gY29udGVudEZlYXR1cmVzW2pdLmlkKSBjb250aW51ZSBsb29wRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRDb29yZGluYXRlID0gb2wucHJvai50cmFuc2Zvcm0oW3BhcnNlRmxvYXQoY29udGVudERhdGFbJ2dlb3gnXSksIHBhcnNlRmxvYXQoY29udGVudERhdGFbJ2dlb3knXSldLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnQgPSBuZXcgb2wuZ2VvbS5Qb2ludChyZXN1bHRDb29yZGluYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUocG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0SWQoY29udGVudERhdGEuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdjbHVzdGVyX3pvb20nLCBsYXllci5jbHVzdGVyLnpvb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdjbHVzdGVyX3BvcHVwJywgbGF5ZXIuY2x1c3Rlci5wb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2NsdXN0ZXJfZmlsbGNvbG9yJywgbGF5ZXIuY2x1c3Rlci5maWxsY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdjbHVzdGVyX2ZvbnRjb2xvcicsIGxheWVyLmNsdXN0ZXIuZm9udGNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnbG9jX2xpbmt1cmwnLCBsYXllci5sb2NfbGlua3VybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2hvdmVyX2xvY2F0aW9uJywgbGF5ZXIuaG92ZXJfbG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdob3Zlcl9zdHlsZScsIGxheWVyLmhvdmVyX3N0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3B1cCA9IGNvbnRlbnREYXRhWydwb3B1cCddID8gY29udGVudERhdGFbJ3BvcHVwJ10gOiBPYmplY3QuYXNzaWduKHt9LGxheWVyLnBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBvcHVwICYmIHBvcHVwLmNvbnRlbnQgJiYgcG9wdXAuY29udGVudC5zZWFyY2ggJiYgcG9wdXAuY29udGVudC5zZWFyY2goJ2l0ZW1JZCcpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXAuY29udGVudCA9IHBvcHVwLmNvbnRlbnQucmVwbGFjZSgnaXRlbUlkJyxjb250ZW50RGF0YVsnaWQnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb250ZW50RGF0YVsnbGFiZWwnXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnbGFiZWwnLGNvbnRlbnREYXRhWydsYWJlbCddKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29udGVudERhdGFbJ3Rvb2x0aXAnXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCd0b29sdGlwJyxjb250ZW50RGF0YVsndG9vbHRpcCddKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdwb3B1cCcsIHBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnem9vbV9vbmNsaWNrJywgbGF5ZXIuem9vbV9vbmNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgndGlkJywgY29udGVudERhdGFbJ2lkJ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvY3N0eWxlID0gY29udGVudERhdGFbJ2xvY3N0eWxlJ10gfHwgbGF5ZXIubG9jc3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2xvY2F0aW9uU3R5bGUnLCBsb2NzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihsb2NzdHlsZSAmJiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsb2NzdHlsZV0gJiYgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbbG9jc3R5bGVdLnN0eWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXRTdHlsZShzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsb2NzdHlsZV0uc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlcy5wdXNoKGNvbnRlbnRGZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXVuc3R5bGVkRmVhdHVyZXMpe3Vuc3R5bGVkRmVhdHVyZXMgPVtdO31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighbWlzc2luZ1N0eWxlcyl7bWlzc2luZ1N0eWxlcyA9IFtdO31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ3N0eWxlSWQnLGxvY3N0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnN0eWxlZEZlYXR1cmVzLnB1c2goY29udGVudEZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NpbmdTdHlsZXNbbG9jc3R5bGVdID0gbG9jc3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmKG1pc3NpbmdTdHlsZXMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhtaXNzaW5nU3R5bGVzLCB7ZG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgdW5zdHlsZWRGZWF0dXJlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZUlkID11bnN0eWxlZEZlYXR1cmVzW2ldLmdldCgnc3R5bGVJZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnN0eWxlZEZlYXR1cmVzW2ldLnNldFN0eWxlKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFZlY3RvclNvdXJjZS5hZGRGZWF0dXJlKHVuc3R5bGVkRmVhdHVyZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nU3R5bGVzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RWZWN0b3JTb3VyY2UuYWRkRmVhdHVyZXMoY29udGVudEZlYXR1cmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1hcENvbnRyb2xsZXIuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdHJhdGVneTogb2wubG9hZGluZ3N0cmF0ZWd5LmJib3hcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmKHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNsdXN0ZXIpe1xuICAgICAgICAgICAgbGV0IGxheWVyID0gc2VsZi5hcnJMYXllcnNbaXRlbVVpZF07XG4gICAgICAgICAgICBsZXQgbWFwID0gc2VsZi5tYXBDb250cm9sbGVyLm1hcDtcbiAgICAgICAgICAgIGxldCBjdXJyZW50Wm9vbSA9IG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpO1xuICAgICAgICAgICAgbGV0IGNsdXN0ZXJEaXN0YW5jZSA9IHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNsdXN0ZXIuZGlzdGFuY2UgfHwgMjA7XG4gICAgICAgICAgICBpZiAoY3VycmVudFpvb20gPj0gbGF5ZXIuY2x1c3Rlci56b29tKSB7XG4gICAgICAgICAgICAgIGNsdXN0ZXJEaXN0YW5jZSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsdXN0ZXJTb3VyY2UgPSBuZXcgb2wuc291cmNlLkNsdXN0ZXIoe1xuICAgICAgICAgICAgICBkaXN0YW5jZTogY2x1c3RlckRpc3RhbmNlLFxuICAgICAgICAgICAgICAvL3RocmVzaG9sZDogMiwgLy9taW5pbXVtIGVsZW1lbnQgY291bnRcbiAgICAgICAgICAgICAgc291cmNlOiByZXF1ZXN0VmVjdG9yU291cmNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIgPSBuZXcgb2wubGF5ZXIuQW5pbWF0ZWRDbHVzdGVyKFxuICAgICAgICAgICAgICAgICAge1x0bmFtZTogJ0NsdXN0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogY2x1c3RlclNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgYSBzdHlsZSBmdW5jdGlvbiBmb3IgY2x1c3RlciBzeW1ib2xpc2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlRm9yQ2x1c3RlclxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgIHZlY3RvckxheWVyID0gbmV3IG9sLmxheWVyLlZlY3RvcihcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnTGF5ZXInLFxuICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogcmVxdWVzdFZlY3RvclNvdXJjZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXllcnMgPSBsYXllcnMgfHwgW107XG4gICAgICAgICAgbGF5ZXJzLnB1c2godmVjdG9yTGF5ZXIpO1xuICAgICAgICBsYXllckdyb3VwID0gbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgICAgIGxheWVyczogbGF5ZXJzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFyckxheWVyc1tpdGVtVWlkXS52ZWN0b3JMYXllciA9IGxheWVyR3JvdXA7XG4gICAgICAgIHNlbGYubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIobGF5ZXJHcm91cCk7XG5cblxuICAgICAgfVxuICAgICAgIGVsc2V7XG4gICAgICAgIHNlbGYubWFwQ29udHJvbGxlci5zcGlubmVyLnNob3coKTtcbiAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgIGRhdGFUeXBlOiBzZWxmLm1hcENvbnRyb2xsZXIuZGF0YS5qc29ucCA/IFwianNvbnBcIiA6IFwianNvblwiLFxuICAgICAgICAgIHVybDogc2VsZi5wcm94eS5hcGlfbGF5ZXJjb250ZW50X3VybCArICcvJyArIHNlbGYuYXJyTGF5ZXJzW2l0ZW1VaWRdLmlkLFxuICAgICAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgbGV0IGosXG4gICAgICAgICAgICAgICAgbmV3TG9jYXRpb25TdHlsZXM7XG5cbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBuZXdMb2NhdGlvblN0eWxlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGRhdGEubGVuZ3RoOyBqICs9IDEpIHtcblxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFyckxheWVyc1tpdGVtVWlkXS5jb250ZW50ID0gc2VsZi5hcnJMYXllcnNbaXRlbVVpZF0uY29udGVudCB8fCBbXTtcblxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFyckxheWVyc1tpdGVtVWlkXS5jb250ZW50LnB1c2goZGF0YVtqXSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0xvY2F0aW9uU3R5bGVzLnB1c2goZGF0YVtqXS5sb2NhdGlvblN0eWxlKTtcbiAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZi5wcm94eS5jaGVja0xvY2F0aW9uU3R5bGVzKHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQFRPRE86IGNoZWNrIHRoaXMhXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvYWRMYXllckNvbnRlbnQoaXRlbVVpZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9KS5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5tYXBDb250cm9sbGVyLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuXG4gIH0gLy8gZW5kIG9mIFwibG9hZExheWVyQ29udGVudCgpXCJcblxuICBoaWRlTGF5ZXIobGF5ZXJVaWQsIGtlZXBMYXllcikge1xuXG4gICAgdmFyIGxheWVyLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgICBsYXllciA9IHRoaXMuYXJyTGF5ZXJzW2xheWVyVWlkXTtcbiAgICBpZiAoIWxheWVyKSB7XG4gICAgICAvL2NvbnNvbGUud2FybignQ2Fubm90IGhpZGUgdW5rbm93biBsYXllciAoJyArIGxheWVyVWlkICsgJyknKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBsYXllciBpcyBsaXN0ZWQgYXMgXCJhY3RpdmVcIlxuICAgIC8vIG90aGVyd2lzZSB0aGVyZSBpcyBub3RoaW5nIHRvIHJlbW92ZSBvciBjaGFuZ2VcbiAgICBpZiAodGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllclVpZF0pIHtcbiAgICAgIC8vIHJlbW92ZSBsYXllciBmcm9tIG1hcCAoaWYgaXQgd2FzIHZpc2libGUgYmVmb3JlKVxuICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJVaWRdID09PSAndmlzaWJsZScgJiYgbGF5ZXIudmVjdG9yTGF5ZXIpIHtcbiAgICAgICAgLy8gW2luZm9dOiBkbyBub3QgdXNlIFwibGF5ZXIudmVjdG9yTGF5ZXIuc2V0VmlzaWJsZShmYWxzZSk7XCJcbiAgICAgICAgLy8gICAgICAgICBzZWUgXCJzaG93TGF5ZXIoKVwiIGZvciBtb3JlIGluZm9ybWF0aW9uXG4gICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlTGF5ZXIobGF5ZXIudmVjdG9yTGF5ZXIpO1xuICAgICAgfVxuICAgICAgLy8gb25seSBtYXJrIGFzIFwiaW52aXNpYmxlXCIgaWYgXCJrZWVwTGF5ZXJcIiBpcyBcInRydWVcIlxuICAgICAgLy8gdGhpcyBpcyBuZWVkZWQgZm9yIHRoZSB6b29tLWJvdW5kc1xuICAgICAgaWYgKGtlZXBMYXllcikge1xuICAgICAgICB0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW2xheWVyVWlkXSA9ICdpbnZpc2libGUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJVaWRdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNoaWxkcyBuZWVkZWQgdG8gYmUgY2hlY2tlZCBpbmRlcGVuZGVudCBmcm9tIGl0cyBwYXJlbnRzIHN0YXRlXG5cblxuICAgIC8vVG9EbyBsb2FkaW5nIHByb2JsZW1cbiAgICBpZiAobGF5ZXIgJiYgbGF5ZXIuaGFzQ2hpbGRzKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGF5ZXIuY2hpbGRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuaGlkZUxheWVyKGxheWVyLmNoaWxkc1tpXS5pZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKGxheWVyLmlzSW5hY3RpdmUpe1xuICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnModGhpcy5wcm94eS5ob29rX2xheWVyX3Zpc2liaWxpdHksIGxheWVyVWlkKTtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsYXllci5pc0luYWN0aXZlID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLmxheWVyUmVxdWVzdHMgJiYgdHlwZW9mIHRoaXMubGF5ZXJSZXF1ZXN0c1snbGF5ZXJfcmVxdWVzdF8nICsgbGF5ZXJVaWRdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMubGF5ZXJSZXF1ZXN0c1snbGF5ZXJfcmVxdWVzdF8nICsgbGF5ZXJVaWRdID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmxheWVyUmVxdWVzdHNbJ2xheWVyX3JlcXVlc3RfJyArIGxheWVyVWlkXSk7XG4gICAgICAgICAgZGVsZXRlIHRoaXMubGF5ZXJSZXF1ZXN0c1snbGF5ZXJfcmVxdWVzdF8nICsgbGF5ZXJVaWRdO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvL3RoaXMuY29tYmluZUxheWVycyh0aGlzKTtcbiAgICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5zZXRDZW50ZXIoW3RoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldENlbnRlcigpWzBdKzAuMDAxLHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldENlbnRlcigpWzFdXSk7XG4gICAgLy8gaG9va3NcbiAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh0aGlzLnByb3h5Lmhvb2tfbGF5ZXJfdmlzaWJpbGl0eSwgbGF5ZXJVaWQpO1xuICB9IC8vIGVuZCBvZiBcImhpZGVMYXllcigpXCJcbiAgaGlkZUNoaWxkTGF5ZXIobGF5ZXJVaWQsIGNoaWxkVWlkKXtcbiAgICBsZXQgbGF5ZXIgPSB0aGlzLmFyckxheWVyc1tsYXllclVpZF1cbiAgICBjaGlsZFVpZCA9IGNoaWxkVWlkLnJlcGxhY2UobGF5ZXJVaWQsJycpO1xuICAgIGxldCBjaGlsZExheWVyID0gbGF5ZXIudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVtjaGlsZFVpZF1cbiAgICBjaGlsZExheWVyLnNldCgndmlzaWJsZScsIGZhbHNlKTtcbiAgfVxuICBzaG93Q2hpbGRMYXllcihsYXllclVpZCwgY2hpbGRVaWQpe1xuICAgICAgbGV0IGxheWVyID0gdGhpcy5hcnJMYXllcnNbbGF5ZXJVaWRdXG4gICAgICBjaGlsZFVpZCA9IGNoaWxkVWlkLnJlcGxhY2UobGF5ZXJVaWQsJycpO1xuICAgICAgbGV0IGNoaWxkTGF5ZXIgPSBsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpW2NoaWxkVWlkXVxuICAgICAgY2hpbGRMYXllci5zZXQoJ3Zpc2libGUnLCB0cnVlKTtcbiAgfVxuXG4gIHNob3dMYXllcihsYXllclVpZCkge1xuICAgIHZhciBsYXllcixcbiAgICAgIG1hcExheWVycyxcbiAgICAgIGFkZExheWVyLFxuICAgICAgaSxcbiAgICAgIGosXG4gICAgICBhY3RpdmVGb3Jab29tO1xuXG4gICAgYWN0aXZlRm9yWm9vbSA9IHRoaXMucHJveHkuY2hlY2tMYXllcklzQWN0aXZlRm9yWm9vbShsYXllclVpZCk7XG4gICAgbGF5ZXIgPSB0aGlzLmFyckxheWVyc1tsYXllclVpZF07XG5cbiAgICBpZiAoYWN0aXZlRm9yWm9vbSkge1xuICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJVaWRdICE9PSAndmlzaWJsZScpIHtcbiAgICAgICAgLy9pZiAobGF5ZXIubGlua19pZCkge1xuICAgICAgICAvLyAgdGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllci5saW5rX2lkXSA9ICd2aXNpYmxlJztcbiAgICAgICAgLy99IGVsc2VcbiAgICAgICAgaWYgKGxheWVyICYmIGxheWVyLnZlY3RvckxheWVyKSB7XG4gICAgICAgICAgLy8gW2luZm9dOiBkbyBub3QgdXNlOiBcImxheWVyLnZlY3RvckxheWVyLnNldFZpc2libGUodHJ1ZSk7XCJcbiAgICAgICAgICAvLyAgICAgICAgIEFsd2F5cyBhZGQgYW5kIHJlbW92ZSBMYXllcnMsIHNvIHRoYXQgdGhlIGxhc3RcbiAgICAgICAgICAvLyAgICAgICAgIGNsaWNrZWQgbGF5ZXIgaXMgYWx3YXlzIG9udG9wIG9mIHRoZSBvdGhlcnMuXG5cbiAgICAgICAgICAvLyBjaGVjayBpZiBsYXllciBpcyByZWFsbHkgbm90IGFscmVhZHkgb24gdGhlIG1hcFxuICAgICAgICAgIC8vIHRvIHByZXZlbnQgYWRkaW5nIHRoZSBzYW1lIGxheWVyIG11bHRpcGxlIHRpbWVzXG4gICAgICAgICAgYWRkTGF5ZXIgPSB0cnVlO1xuICAgICAgICAgIG1hcExheWVycyA9IHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0TGF5ZXJzKCk7XG4gICAgICAgICAgbWFwTGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT09IGxheWVyLnZlY3RvckxheWVyKSB7XG4gICAgICAgICAgICAgIGFkZExheWVyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGFkZExheWVyKSB7XG4gICAgICAgICAgICBpZihsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdICYmIGxheWVyLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0ucG9wdXAgJiYgbGF5ZXIudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXS5wb3B1cC5zaG93UG9wdXBPbkFjdGl2ZSl7XG4gICAgICAgICAgICAgIGM0Zy5tYXBzLnBvcHVwLiRjb250ZW50Lmh0bWwoJycpO1xuICAgICAgICAgICAgICBjNGcubWFwcy5wb3B1cC4kcG9wdXAuYWRkQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkFDVElWRSkuYWRkQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkxPQURJTkcpO1xuICAgICAgICAgICAgICBjNGcubWFwcy5wb3B1cC5zcGlubmVyLnNob3coKTtcbiAgICAgICAgICAgICAgdmFyIHBvcHVwSW5mb3MgPSBsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdLnBvcHVwO1xuICAgICAgICAgICAgICB2YXIgZmVhdHVyZXMgPSBsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgIHZhciBjb29yZCA9IGZlYXR1cmVzWycwJ10uZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgICAgICAgICBpZiAocG9wdXBJbmZvcy5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mb3M7XG4gICAgICAgICAgICAgICAgb2JqUG9wdXAuZmVhdHVyZSA9IGZlYXR1cmVzWycwJ107XG4gICAgICAgICAgICAgICAgb2JqUG9wdXAubGF5ZXIgPSBsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdO1xuICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgICAgaWYgKGM0Zy5tYXBzLmhvb2sgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgYzRnLm1hcHMuaG9vay5wcm94eV9maWxsUG9wdXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhjNGcubWFwcy5ob29rLnByb3h5X2ZpbGxQb3B1cCwgb2JqUG9wdXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnByb3h5LnNldFBvcHVwKG9ialBvcHVwKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICAgICAgdXJsOiBzZWxmLmFwaV9pbmZvd2luZG93X3VybCArICcvJyArIHBvcHVwSW5mb3MuY29udGVudCxcbiAgICAgICAgICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3B1cEluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHBvcHVwSW5mb3MuYXN5bmMsXG4gICAgICAgICAgICAgICAgICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgIHBvcHVwOiBwb3B1cEluZm9zLnBvcHVwLFxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRpbmdfbGluazogcG9wdXBJbmZvcy5yb3V0aW5nX2xpbmtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm87XG4gICAgICAgICAgICAgICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBmZWF0dXJlc1snMCddO1xuICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5sYXllciA9IGxheWVyO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgIGlmIChjNGcubWFwcy5ob29rICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGM0Zy5tYXBzLmhvb2sucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKGM0Zy5tYXBzLmhvb2sucHJveHlfZmlsbFBvcHVwLCBvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LnNldFBvcHVwKG9ialBvcHVwKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihsYXllci52ZWN0b3JMYXllcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubG9hZExheWVyQ29udGVudChsYXllclVpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllclVpZF0gPSAndmlzaWJsZSc7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy9pZiAobGF5ZXIubGlua19pZCkge1xuICAgICAgICAvLyAgdGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllci5saW5rX2lkXSA9ICdpbnZpc2libGUnO1xuICAgICAgICAvL30gZWxzZSB7XG4gICAgICAgIC8vdGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllclVpZF0gPSAnaW52aXNpYmxlJztcbiAgICAgICAgLy99XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxheWVyICYmIGxheWVyLmhhc0NoaWxkcyAmJiBhY3RpdmVGb3Jab29tKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGF5ZXIuY2hpbGRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuc2hvd0xheWVyKGxheWVyLmNoaWxkc1tpXS5pZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxheWVyICYmIGFjdGl2ZUZvclpvb20pIHtcbiAgICAgIGxheWVyLmlzSW5hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRoaXMucHJveHkucmVxdWVzdEZ1bmN0aW9uc1sncmVxdWVzdF8nICsgbGF5ZXJVaWRdICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cbiAgICAgIGlmICh0aGlzLmxheWVyUmVxdWVzdHMgJiYgdHlwZW9mIHRoaXMubGF5ZXJSZXF1ZXN0c1snbGF5ZXJfcmVxdWVzdF8nICsgbGF5ZXJVaWRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRoaXMubGF5ZXJSZXF1ZXN0c1snbGF5ZXJfcmVxdWVzdF8nICsgbGF5ZXJVaWRdID0gd2luZG93LnNldEludGVydmFsKHRoaXMucHJveHkucmVxdWVzdEZ1bmN0aW9uc1sncmVxdWVzdF8nICsgbGF5ZXJVaWRdLmZ1bmN0aW9uLCB0aGlzLnByb3h5LnJlcXVlc3RGdW5jdGlvbnNbJ3JlcXVlc3RfJyArIGxheWVyVWlkXS5pbnRlcnZhbCk7XG4gICAgICB9XG5cbiAgICB9XG4gICAgLy90aGlzLmNvbWJpbmVMYXllcnModGhpcyk7XG4gICAgLy8gaG9va3NcbiAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh0aGlzLnByb3h5Lmhvb2tfbGF5ZXJfdmlzaWJpbGl0eSwgbGF5ZXJVaWQpO1xuICB9IC8vIGVuZCBvZiBcInNob3dMYXllcigpXCJcblxuICBkcmF3TGF5ZXIoaXRlbVVpZCkge1xuXG4gICAgdmFyIHNlbGYsXG4gICAgICBlbGVtZW50LFxuICAgICAgZWxlbWVudENvbnRlbnQsXG4gICAgICBsYXllcnMsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIG1pc3NpbmdTdHlsZXMsXG4gICAgICB1bnN0eWxlZEZlYXR1cmVzLFxuICAgICAgZmVhdHVyZXMsXG4gICAgICBkYXRhUHJvamVjdGlvbixcbiAgICAgIGZlYXR1cmVQcm9qZWN0aW9uLFxuICAgICAgdmVjdG9yU291cmNlLFxuICAgICAgdmVjdG9yTGF5ZXIsXG4gICAgICB2ZWN0b3JTdHlsZSxcbiAgICAgIGxheWVyR3JvdXA7XG5cbiAgICBzZWxmID0gdGhpcztcbiAgICBlbGVtZW50ID0gdGhpcy5hcnJMYXllcnNbaXRlbVVpZF07XG5cbiAgICAvLyBpZiAoIWVsZW1lbnQuaGlkZSkge1xuXG4gICAgbGF5ZXJzID0gW107XG4gICAgaWYgKGVsZW1lbnQuY29udGVudCAmJiBlbGVtZW50LmNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnQuY29udGVudC5sZW5ndGg7IGkgKz0gMSkge1xuXG4gICAgICAgIGVsZW1lbnRDb250ZW50ID0gZWxlbWVudC5jb250ZW50W2ldO1xuICAgICAgICBpZiAoIWVsZW1lbnRDb250ZW50KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvbC5mb3JtYXRbZWxlbWVudENvbnRlbnQuZm9ybWF0XSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cbiAgICAgICAgICAvLyBpZiAoZWxlbWVudC5jb250ZW50W2ldLm9yaWdUeXBlID09PSAnc2luZ2xlJykge1xuICAgICAgICAgIC8vICAgZmVhdHVyZVByb2plY3Rpb24gPSB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAvLyAgIGZlYXR1cmVQcm9qZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzICYmIGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICBkYXRhUHJvamVjdGlvbiA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wcm9qZWN0aW9uO1xuICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb24gPSB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5mb3JtYXQgPT09IFwiT1NNWE1MXCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5nZW9tZXRyeSAmJiBlbGVtZW50Q29udGVudC5kYXRhLmdlb21ldHJ5LnR5cGUgPT09IFwiQ2lyY2xlXCIpIHtcbiAgICAgICAgICAgIC8vIGRyYXcgY2lyY2xlIGdlb21ldHJpZXNcbiAgICAgICAgICAgIGZlYXR1cmVzID0gW107XG4gICAgICAgICAgICBsZXQgZmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKFxuICAgICAgICAgICAgICBuZXcgb2wuZ2VvbS5DaXJjbGUoXG4gICAgICAgICAgICAgICAgb2wucHJvai5mcm9tTG9uTGF0KGVsZW1lbnRDb250ZW50LmRhdGEuZ2VvbWV0cnkuY2VudGVyKSxcbiAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KGVsZW1lbnRDb250ZW50LmRhdGEuZ2VvbWV0cnkucmFkaXVzKVxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdzdHlsZUlkJywgZWxlbWVudENvbnRlbnQubG9jYXRpb25TdHlsZSk7XG4gICAgICAgICAgICBmZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyByZW1haW5pbmcgZ2VvbWV0cmllc1xuICAgICAgICAgICAgZmVhdHVyZXMgPSAobmV3IG9sLmZvcm1hdFtlbGVtZW50Q29udGVudC5mb3JtYXRdKHt9KSkucmVhZEZlYXR1cmVzKGVsZW1lbnRDb250ZW50LmRhdGEsIHtcbiAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246IGZlYXR1cmVQcm9qZWN0aW9uLFxuICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogZGF0YVByb2plY3Rpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1pc3NpbmdTdHlsZXMgPSBbXTtcbiAgICAgICAgICB1bnN0eWxlZEZlYXR1cmVzID0gW107XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGZlYXR1cmVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAvLyBmZWF0dXJlc1tqXS5zZXRJZCh1dGlscy5nZXRVbmlxdWVJZCgpKTtcbiAgICAgICAgICAgIC8vIGZlYXR1cmVzW2pdLnNldCgncHJvamVjdGlvbicsIHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFByb2plY3Rpb24oKSk7XG4gICAgICAgICAgICAvLyBmZWF0dXJlc1tqXS5zZXQoJ3Byb2plY3Rpb24nLCBcIkVQU0c6NDMyNlwiKTtcbiAgICAgICAgICAgIGZlYXR1cmVzW2pdLnNldCgnaG92ZXJfbG9jYXRpb24nLCBlbGVtZW50Q29udGVudC5ob3Zlcl9sb2NhdGlvbik7XG4gICAgICAgICAgICBmZWF0dXJlc1tqXS5zZXQoJ2hvdmVyX3N0eWxlJywgZWxlbWVudENvbnRlbnQuaG92ZXJfc3R5bGUpO1xuICAgICAgICAgICAgaWYgKGZlYXR1cmVzW2pdLmdldCgnc3R5bGVJZCcpKSB7XG4gICAgICAgICAgICAgIGlmIChzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tmZWF0dXJlc1tqXS5nZXQoJ3N0eWxlSWQnKV0gJiYgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJyldLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXNbal0uc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJyldLnN0eWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtaXNzaW5nU3R5bGVzLnB1c2goZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJykpO1xuICAgICAgICAgICAgICAgIHVuc3R5bGVkRmVhdHVyZXMucHVzaChmZWF0dXJlc1tqXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudENvbnRlbnQubG9jYXRpb25TdHlsZSkge1xuICAgICAgICAgICAgICAvLyBmZWF0dXJlIGhhcyBubyBwcm9wZXJ0eSBzdHlsZUlkLCBidXQgZWxlbWVudENvbnRlbnQgaGFzIGxvY2F0aW9uc3R5bGVcbiAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgLy9mZWF0dXJlc1tqXS5zZXRTdHlsZShzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tlbGVtZW50Q29udGVudC5sb2NhdGlvblN0eWxlXS5zdHlsZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWlzc2luZ1N0eWxlcy5wdXNoKGVsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGUpO1xuICAgICAgICAgICAgICAgIHVuc3R5bGVkRmVhdHVyZXMucHVzaChmZWF0dXJlc1tqXSk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXNbal0uc2V0KCdzdHlsZUlkJywgZWxlbWVudENvbnRlbnQubG9jYXRpb25TdHlsZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2ZWN0b3JTdHlsZSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdLnN0eWxlO1xuICAgICAgICAgIGlmKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdLmZuU3R5bGVGdW5jdGlvbikge1xuXG4gICAgICAgICAgICB2ZWN0b3JTdHlsZSA9IEZ1bmN0aW9uKFwiZmVhdHVyZVwiLFwiZGF0YVwiLFwibWFwXCIsc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZWxlbWVudENvbnRlbnQubG9jYXRpb25TdHlsZV0uZm5TdHlsZUZ1bmN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1pc3NpbmdTdHlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMobWlzc2luZ1N0eWxlcywge1xuICAgICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYsXG4gICAgICAgICAgICAgICAgICBmTGF5ZXJHcm91cCxcbiAgICAgICAgICAgICAgICAgIGZMYXllcnMsXG4gICAgICAgICAgICAgICAgICBmVmVjdG9yTGF5ZXIsXG4gICAgICAgICAgICAgICAgICBmVmVjdG9yU291cmNlO1xuICAgICAgICAgICAgICAgIGZvciAoZiA9IDA7IGYgPCB1bnN0eWxlZEZlYXR1cmVzLmxlbmd0aDsgZiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbdW5zdHlsZWRGZWF0dXJlc1tmXS5nZXQoJ3N0eWxlSWQnKV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdW5zdHlsZWRGZWF0dXJlc1tmXS5zZXRTdHlsZShzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1t1bnN0eWxlZEZlYXR1cmVzW2ZdLmdldCgnc3R5bGVJZCcpXS5zdHlsZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBmVmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlcyxcbiAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiAnRVBTRzozODU3JyxcbiAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IG5ldyBvbC5mb3JtYXQuR2VvSlNPTigpXG4gICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyID0gdXRpbHMuZ2V0VmVjdG9yTGF5ZXIoZlZlY3RvclNvdXJjZSwgdmVjdG9yU3R5bGUpO1xuXG4gICAgICAgICAgICAgICAgICAvLyBsYXllcnMucHVzaCh2ZWN0b3JMYXllcik7XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5hcnJMYXllcnNbaXRlbVVpZF0uZlZlY3RvckxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZkxheWVyR3JvdXAgPSBzZWxmLmFyckxheWVyc1tpdGVtVWlkXS52ZWN0b3JMYXllcjtcbiAgICAgICAgICAgICAgICAgICAgICBmTGF5ZXJzID0gZkxheWVyR3JvdXAuZ2V0TGF5ZXJzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YSAmJiBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wb3B1cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyLnBvcHVwID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyLnRvb2x0aXAgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmVmVjdG9yTGF5ZXIubGFiZWwgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy56b29tX29uY2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZWZWN0b3JMYXllci56b29tX29uY2xpY2sgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgZkxheWVycy5wdXNoKGZWZWN0b3JMYXllcik7XG4gICAgICAgICAgICAgICAgICAgICAgZkxheWVyR3JvdXAuc2V0TGF5ZXJzKGZMYXllcnMpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YSAmJiBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wb3B1cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyLnBvcHVwID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyLnRvb2x0aXAgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmVmVjdG9yTGF5ZXIubGFiZWwgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy56b29tX29uY2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZWZWN0b3JMYXllci56b29tX29uY2xpY2sgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGZMYXllckdyb3VwID0gbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBbZlZlY3RvckxheWVyXVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXJyTGF5ZXJzW2l0ZW1VaWRdLnZlY3RvckxheWVyID0gZkxheWVyR3JvdXA7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihmTGF5ZXJHcm91cCk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKGVsZW1lbnQuc3BsaXRfZ2VvanNvbikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbjogJ0VQU0c6Mzg1NycsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IG5ldyBvbC5mb3JtYXQuR2VvSlNPTigpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UuYWRkRmVhdHVyZShmZWF0dXJlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyID0gdXRpbHMuZ2V0VmVjdG9yTGF5ZXIodmVjdG9yU291cmNlLCB2ZWN0b3JTdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGo8IGVsZW1lbnQuZ2VvanNvbl9hdHRyaWJ1dGVzLnNwbGl0KCcsJykubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLnNldChlbGVtZW50Lmdlb2pzb25fYXR0cmlidXRlcy5zcGxpdCgnLCcpW2pdLGZlYXR1cmVzW2ldLmdldChlbGVtZW50Lmdlb2pzb25fYXR0cmlidXRlcy5zcGxpdCgnLCcpW2pdKSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYXllcnMucHVzaCh2ZWN0b3JMYXllcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMucG9wdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLnBvcHVwID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIudG9vbHRpcCA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy50b29sdGlwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmxhYmVsID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci56b29tX29uY2xpY2sgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3Rvcih7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlcyxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbjogJ0VQU0c6Mzg1NycsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogbmV3IG9sLmZvcm1hdC5HZW9KU09OKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2ZWN0b3JMYXllciA9IHV0aWxzLmdldFZlY3RvckxheWVyKHZlY3RvclNvdXJjZSwgdmVjdG9yU3R5bGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEgJiYgZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMucG9wdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLnBvcHVwID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIudG9vbHRpcCA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy50b29sdGlwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmxhYmVsID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci56b29tX29uY2xpY2sgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGF5ZXJzLnB1c2godmVjdG9yTGF5ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybignRm9ybWF0IHR5cGUgJyArIGVsZW1lbnRDb250ZW50LmZvcm1hdCArICcgaW4gb2wuZm9ybWF0IG5vdCBmb3VuZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGF5ZXJHcm91cCA9IG5ldyBvbC5sYXllci5Hcm91cCh7XG4gICAgICBsYXllcnM6IGxheWVyc1xuICAgIH0pO1xuXG4gICAgdGhpcy5hcnJMYXllcnNbaXRlbVVpZF0udmVjdG9yTGF5ZXIgPSBsYXllckdyb3VwO1xuICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIobGF5ZXJHcm91cCk7XG4gICAgaWYobGF5ZXJHcm91cC5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdICYmIGxheWVyR3JvdXAuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXS5wb3B1cCAmJiBsYXllckdyb3VwLmdldExheWVycygpLmdldEFycmF5KClbMF0ucG9wdXAuc2hvd1BvcHVwT25BY3RpdmUpe1xuICAgICAgYzRnLm1hcHMucG9wdXAuJGNvbnRlbnQuaHRtbCgnJyk7XG4gICAgICBjNGcubWFwcy5wb3B1cC4kcG9wdXAuYWRkQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkFDVElWRSkuYWRkQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkxPQURJTkcpO1xuICAgICAgYzRnLm1hcHMucG9wdXAuc3Bpbm5lci5zaG93KCk7XG4gICAgICB2YXIgcG9wdXBJbmZvcyA9IGxheWVyR3JvdXAuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXS5wb3B1cDtcbiAgICAgIHZhciBsYXllciA9IGxheWVyR3JvdXAuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXTtcbiAgICAgIHZhciBjb29yZCA9IGZlYXR1cmVzWycwJ10uZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgaWYgKHBvcHVwSW5mb3MuYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgIHZhciBvYmpQb3B1cCA9IHt9O1xuICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mb3M7XG4gICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBmZWF0dXJlc1snMCddO1xuICAgICAgICBvYmpQb3B1cC5sYXllciA9IGxheWVyO1xuICAgICAgICAvLyBDYWxsIHRoZSBwb3B1cCBob29rIGZvciBwbHVnaW4gc3BlY2lmaWMgcG9wdXAgY29udGVudFxuICAgICAgICBpZiAoYzRnLm1hcHMuaG9vayAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjNGcubWFwcy5ob29rLnByb3h5X2ZpbGxQb3B1cCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhjNGcubWFwcy5ob29rLnByb3h5X2ZpbGxQb3B1cCwgb2JqUG9wdXApO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYucHJveHkuc2V0UG9wdXAob2JqUG9wdXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICB1cmw6IHNlbGYuYXBpX2luZm93aW5kb3dfdXJsICsgJy8nICsgcG9wdXBJbmZvcy5jb250ZW50LFxuICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB2YXIgcG9wdXBJbmZvID0ge1xuICAgICAgICAgICAgICBhc3luYzogcG9wdXBJbmZvcy5hc3luYyxcbiAgICAgICAgICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgICAgICAgICBwb3B1cDogcG9wdXBJbmZvcy5wb3B1cCxcbiAgICAgICAgICAgICAgcm91dGluZ19saW5rOiBwb3B1cEluZm9zLnJvdXRpbmdfbGlua1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIG9ialBvcHVwID0ge307XG4gICAgICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mbztcbiAgICAgICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBmZWF0dXJlc1snMCddO1xuICAgICAgICAgICAgb2JqUG9wdXAubGF5ZXIgPSBsYXllcjtcblxuICAgICAgICAgICAgLy8gQ2FsbCB0aGUgcG9wdXAgaG9vayBmb3IgcGx1Z2luIHNwZWNpZmljIHBvcHVwIGNvbnRlbnRcbiAgICAgICAgICAgIGlmIChjNGcubWFwcy5ob29rICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGM0Zy5tYXBzLmhvb2sucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhjNGcubWFwcy5ob29rLnByb3h5X2ZpbGxQb3B1cCwgb2JqUG9wdXApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLnByb3h5LnNldFBvcHVwKG9ialBvcHVwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vaG9va3NcbiAgICAvLyB9XG4gIH0gLy8gZW5kIG9mIFwiZHJhd0xheWVyKClcIlxuXG4gIGRyYXdMYXllckluaXRpYWwoKSB7XG4gICAgdmFyIGxheWVySWQsXG4gICAgICBsYXllcjtcblxuICAgIGZvciAobGF5ZXJJZCBpbiB0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzKSB7XG4gICAgICBpZiAodGhpcy5wcm94eS5hY3RpdmVMYXllcklkcy5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICB0aGlzLnNob3dMYXllcihsYXllcklkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgbCBpbiB0aGlzLmFyckxheWVycykge1xuICAgICAgaWYgKHRoaXMuYXJyTGF5ZXJzLmhhc093blByb3BlcnR5KGwpKSB7XG4gICAgICAgIGxheWVyID0gdGhpcy5hcnJMYXllcnNbbF07XG4gICAgICAgIGlmIChsYXllci5oaWRlID09PSBcIjFcIikge1xuICAgICAgICAgIHRoaXMuaGlkZUxheWVyKGxheWVyLmlkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSAvLyBlbmQgb2YgXCJkcmF3TGF5ZXJJbml0aWFsKClcIlxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbGF5ZXItY29udHJvbGxlci5qcyIsImV4cG9ydCBjbGFzcyBDNGdMYXllcntcbiAgXG4gIGNvbnN0cnVjdG9yKGxheWVyQXJyKSB7XG4gICAgdGhpcy5pZCA9IGxheWVyQXJyWydpZCddO1xuICAgIHRoaXMucGlkID0gbGF5ZXJBcnJbJ3BpZCddO1xuICAgIHRoaXMuYXN5bmNfY29udGVudCA9IGxheWVyQXJyWydhc3luY19jb250ZW50J107XG4gICAgdGhpcy5jb250ZW50ID0gbGF5ZXJBcnJbJ2NvbnRlbnQnXTtcbiAgICB0aGlzLmNzc0NsYXNzID0gbGF5ZXJBcnJbJ2Nzc0NsYXNzJ107XG4gICAgdGhpcy5oaWRlID0gbGF5ZXJBcnJbJ2hpZGUnXTtcbiAgICB0aGlzLmhpZGVfY2hpbGQgPSBsYXllckFyclsnaGlkZV9jaGlsZCddO1xuICAgIHRoaXMudHlwZSA9IGxheWVyQXJyWyd0eXBlJ107XG4gICAgdGhpcy5jbHVzdGVyID0gbGF5ZXJBcnJbJ2NsdXN0ZXInXTtcbiAgICB0aGlzLnpvb20gPSBsYXllckFyclsnem9vbSddO1xuICAgIHRoaXMuem9vbV9sb2NhdGlvbnMgPSBsYXllckFyclsnem9vbV9sb2NhdGlvbnMnXTtcbiAgICB0aGlzLmRpc3BsYXkgPSBsYXllckFyclsnZGlzcGxheSddO1xuICAgIHRoaXMuaGFzQ2hpbGRzID0gbGF5ZXJBcnJbJ2hhc0NoaWxkcyddO1xuICAgIHRoaXMuY2hpbGRzID0gbGF5ZXJBcnJbJ2NoaWxkcyddO1xuICAgIHRoaXMuY2hpbGRzQ291bnQgPSBsYXllckFyclsnY2hpbGRzQ291bnQnXTtcbiAgICB0aGlzLnJlbmRlclNwZWNpYWwgPSBsYXllckFyclsncmVuZGVyU3BlY2lhbCddO1xuICAgIHRoaXMuZWRpdGFibGUgPSB0cnVlO1xuICAgIHRoaXMudHlwZSA9IGxheWVyQXJyWyd0eXBlJ107XG4gICAgdGhpcy5sb2NzdHlsZSA9IGxheWVyQXJyWydsb2NzdHlsZSddO1xuICAgIHRoaXMubmFtZSA9IGxheWVyQXJyWyduYW1lJ107XG4gICAgdGhpcy50YWJJZCA9IGxheWVyQXJyWyd0YWJJZCddO1xuICAgIHRoaXMuc3BsaXRfZ2VvanNvbiA9IGxheWVyQXJyWydzcGxpdF9nZW9qc29uJ107XG4gICAgdGhpcy5nZW9qc29uX2F0dHJpYnV0ZXMgPSBsYXllckFyclsnZ2VvanNvbl9hdHRyaWJ1dGVzJ107XG4gICAgdGhpcy5nZW9qc29uX3pvb20gPSBsYXllckFyclsnZ2VvanNvbl96b29tJ107XG4gICAgdGhpcy5sYXllcm5hbWUgPSBsYXllckFyclsnbGF5ZXJuYW1lJ107XG4gICAgdGhpcy52aXNpYmxlQ2hpbGRzID0gZmFsc2U7XG4gICAgdGhpcy52ZWN0b3JMYXllciA9IG51bGw7XG4gICAgdGhpcy5oaWRlV2hlbkluVGFiID0gbGF5ZXJBcnJbJ2hpZGVfd2hlbl9pbl90YWInXTtcblxuICAgIGlmIChsYXllckFyci5wcm9qZWN0SWQpIHtcbiAgICAgIHRoaXMucHJvamVjdElkID0gbGF5ZXJBcnIucHJvamVjdElkO1xuICAgIH1cbiAgICBpZihsYXllckFyci5wb3B1cCl7XG4gICAgICB0aGlzLnBvcHVwID0gbGF5ZXJBcnIucG9wdXA7XG4gICAgfVxuICAgIHRoaXMuYXdlc29tZWljb24gPSBsYXllckFyclsnYXdlc29tZWljb24nXVxuICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbGF5ZXIuanMiLCJpbXBvcnQge0M0Z0xvY2F0aW9uU3R5bGV9IGZyb20gXCIuL2M0Zy1sb2NhdGlvbnN0eWxlXCI7XG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcblxuZXhwb3J0IGNsYXNzIEM0Z0xvY2F0aW9uU3R5bGVDb250cm9sbGVye1xuICAgIGNvbnN0cnVjdG9yKHByb3h5KXtcbiAgICAgICAgdGhpcy5wcm94eSA9IHByb3h5O1xuICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIgPSBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXI7XG4gICAgICAgIHRoaXMuYXJyTG9jU3R5bGVzID0gW107XG4gICAgfVxuXG4gICAgbG9hZExvY2F0aW9uU3R5bGVzKGFycklkcywgb3B0X29wdGlvbnMpIHtcbiAgICAgICAgbGV0IG9wdGlvbnMsXG4gICAgICAgICAgICBjb21wbGV0ZSA9IHt9LFxuICAgICAgICAgICAgc3VjY2VzcyA9IHt9LFxuICAgICAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBjb3VudCA9IDEsXG4gICAgICAgICAgICBtYWtlQWpheDtcblxuICAgICAgICBpZiAob3B0X29wdGlvbnMgJiYgdHlwZW9mIG9wdF9vcHRpb25zID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0X29wdGlvbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5zcGlubmVyLnNob3coKTtcblxuICAgICAgICBtYWtlQWpheCA9IGZ1bmN0aW9uKHN0eWxlSWRzLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVbaW5kZXhdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3VjY2Vzc1tpbmRleF0gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGdldCBsb2NhdGlvbnN0eWxlcyBvdmVyIEFQSVxuICAgICAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmpzb25wID8gXCJqc29ucFwiIDogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBzZWxmLnByb3h5LmFwaV9sb2NzdHlsZV91cmwsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBpZHM6IHN0eWxlSWRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGxldCBpLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZURhdGEsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWwgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVEYXRhID0gZGF0YVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXJyTG9jU3R5bGVzW3N0eWxlRGF0YS5pZF0gPSBuZXcgQzRnTG9jYXRpb25TdHlsZShzdHlsZURhdGEsIHNlbGYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzW2luZGV4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWNjZXNzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZG9uZSAmJiB0eXBlb2Ygb3B0aW9ucy5kb25lID09PSBcImZ1bmN0aW9uXCIgJiYgKGluZGV4ID8gc3VjY2Vzc2Z1bCA6IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbiAoalhociwgc3RyU3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVbaW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29tcGxldGVba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFsd2F5cyAmJiB0eXBlb2Ygb3B0aW9ucy5hbHdheXMgPT09IFwiZnVuY3Rpb25cIiAmJiAoaW5kZXggPyBjb21wbGV0ZWQgOiB0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmFsd2F5cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoISQoc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIuc3Bpbm5lci5lbGVtZW50KS5oYXNDbGFzcyhjc3NDb25zdGFudHMuSElERSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duICkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnJvclRocm93bik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzcGxpdCBhcnJJZHMgaWYgaXQncyB0b28gbG9uZ1xuICAgICAgICBpZiAoYXJySWRzLmxlbmd0aCA+IDEwMCkge1xuICAgICAgICAgICAgdmFyIG4gPSAxMDA7XG4gICAgICAgICAgICB3aGlsZShhcnJJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG1ha2VBamF4KGFycklkcy5zcGxpY2UoMCwgbiksIGNvdW50KTtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWFrZUFqYXgoYXJySWRzKTtcbiAgICAgICAgfVxuICAgICAgICAvL30pO1xuICAgIH0gLy8gZW5kIG9mIFwibG9hZExvY2F0aW9uU3R5bGVzKClcIlxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWxvY2F0aW9uc3R5bGUtY29udHJvbGxlci5qcyIsImltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBDNGdMb2NhdGlvblN0eWxle1xuICAgIGNvbnN0cnVjdG9yKGxvY1N0eWxlQXJyLCBjb250cm9sbGVyKXtcbiAgICAgICAgdGhpcy5pZCAgICAgICAgPSBsb2NTdHlsZUFyclsnaWQnXTtcbiAgICAgICAgdGhpcy5zdHlsZSAgICAgPSB0aGlzLmdldFN0eWxlRnVuY3Rpb24obG9jU3R5bGVBcnIpO1xuICAgICAgICB0aGlzLmVkaXRvciAgICA9IHRoaXMuZ2V0U3R5bGVFZGl0b3JDb25maWcobG9jU3R5bGVBcnIpO1xuICAgICAgICB0aGlzLm5hbWUgICAgICA9IGxvY1N0eWxlQXJyWyduYW1lJ107XG4gICAgICAgIHRoaXMudG9vbHRpcCAgID0gbG9jU3R5bGVBcnJbJ3Rvb2x0aXAnXTtcbiAgICAgICAgdGhpcy5sYWJlbCAgICAgPSBsb2NTdHlsZUFyclsnbGFiZWwnXTtcbiAgICAgICAgdGhpcy5taW56b29tICAgPSBsb2NTdHlsZUFyclsnbWluem9vbSddO1xuICAgICAgICB0aGlzLm1heHpvb20gICA9IGxvY1N0eWxlQXJyWydtYXh6b29tJ107XG4gICAgICAgIHRoaXMuZm5TdHlsZUZ1bmN0aW9uID0gbG9jU3R5bGVBcnJbJ3N0eWxlX2Z1bmN0aW9uX2pzJ107XG4gICAgICAgIHRoaXMuY29udHJvbGxlcj0gY29udHJvbGxlcjtcbiAgICAgICAgdGhpcy5sb2NTdHlsZUFyciA9IGxvY1N0eWxlQXJyO1xuICAgIH1cblxuICAgIGdldFN0eWxlRnVuY3Rpb24oc3R5bGVEYXRhKSB7XG4gICAgICAgIHZhciBzZWxmLFxuICAgICAgICAgICAgc3R5bGVGdW5jdGlvbixcbiAgICAgICAgICAgIGltYWdlU3R5bGUsXG4gICAgICAgICAgICBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgIGZpbGxTdHlsZSxcbiAgICAgICAgICAgIHRleHRTdHlsZSxcbiAgICAgICAgICAgIHRleHRTdHlsZU91dGxpbmUsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kRmlsbCxcbiAgICAgICAgICAgIGJhY2tncm91bmRTdHJva2U7XG5cbiAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gZ2VuZXJhbFxuICAgICAgICBzdHJva2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgY29sb3I6IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShzdHlsZURhdGEuc3Ryb2tlY29sb3IsIHN0eWxlRGF0YS5zdHJva2VvcGFjaXR5KSxcbiAgICAgICAgICAgIHdpZHRoOiBwYXJzZUludChzdHlsZURhdGEuc3Ryb2tld2lkdGgudmFsdWUsIDEwKVxuICAgICAgICB9KTtcbiAgICAgICAgZmlsbFN0eWxlID0gbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgY29sb3I6IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShzdHlsZURhdGEuZmlsbGNvbG9yLCBzdHlsZURhdGEuZmlsbG9wYWNpdHkpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGltYWdlXG4gICAgICAgIHN3aXRjaCAoc3R5bGVEYXRhLnN0eWxldHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3F1YXJlJzpcbiAgICAgICAgICAgICAgICBpbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLlJlZ3VsYXJTaGFwZSh7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiA0LFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgMTAsXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiBNYXRoLlBJIC8gNFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc3Rhcic6XG4gICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5SZWd1bGFyU2hhcGUoe1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czE6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgMTAsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czI6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgPyBNYXRoLmZsb29yKHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgKiAwLjUpIDogNCxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiA1LFxuICAgICAgICAgICAgICAgICAgICBhbmdsZTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5SZWd1bGFyU2hhcGUoe1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50czogNCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBzdHlsZURhdGEucmFkaXVzLnZhbHVlIHx8IDEwLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXMyOiAwLFxuICAgICAgICAgICAgICAgICAgICBhbmdsZTogTWF0aC5QSSAvIDRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Nyb3NzJzpcbiAgICAgICAgICAgICAgICBpbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLlJlZ3VsYXJTaGFwZSh7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiA0LFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgMTAsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czI6IDAsXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0cmlhbmdsZSc6XG4gICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5SZWd1bGFyU2hhcGUoe1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50czogMyxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBzdHlsZURhdGEucmFkaXVzLnZhbHVlIHx8IDEwLFxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogTWF0aC5QSSAvIDQsXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdvbF9pY29uJzogLy8gZmFsbHRocm91Z2hcbiAgICAgICAgICAgIGNhc2UgJ2N1c3RfaWNvbic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZURhdGEuaWNvbl9zcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlU3R5bGUgPSBuZXcgb2wuc3R5bGUuSWNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogcGFyc2VGbG9hdChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlLCAxMCkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBzdHlsZURhdGEuaWNvbl9zcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogW3BhcnNlSW50KHN0eWxlRGF0YS5pY29uX3NpemVbMF0sIDEwKSwgcGFyc2VJbnQoc3R5bGVEYXRhLmljb25fc2l6ZVsxXSwgMTApXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZTogcGFyc2VGbG9hdChzdHlsZURhdGEuaWNvbl9zY2FsZSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjdXN0X2ljb25fc3ZnJzpcbiAgICAgICAgICAgICAgICAgICAgaWYoc3R5bGVEYXRhLnN2Z1NyYyAmJiBzdHlsZURhdGEuaWNvbl9zY2FsZSAmJiBzdHlsZURhdGEuaWNvbl9zaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IChzdHlsZURhdGEuaWNvbl9zaXplWzBdKnN0eWxlRGF0YS5pY29uX3NjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoZWlnaHQgPSAoc3R5bGVEYXRhLmljb25fc2l6ZVsxXSpzdHlsZURhdGEuaWNvbl9zY2FsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdHJva2V3aWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVEYXRhLnN0cm9rZXdpZHRoICYmIHN0eWxlRGF0YS5zdHJva2V3aWR0aC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZXdpZHRoID0gc3R5bGVEYXRhLnN0cm9rZXdpZHRoLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoICA9IHdpZHRoKygyKnN0cm9rZXdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQrKDIqc3Ryb2tld2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVEYXRhLmZpbGxjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLmZpbGxjb2xvciwgc3R5bGVEYXRhLmZpbGxvcGFjaXR5LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cm9rZXdpZHRoICYmIHN0eWxlRGF0YS5zdHJva2Vjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShzdHlsZURhdGEuc3Ryb2tlY29sb3IsIHN0eWxlRGF0YS5zdHJva2VvcGFjaXR5LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gc3R5bGVEYXRhLnN0cm9rZXdpZHRoLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLjUsIDAuNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlICYmIChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlID4gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBjdHguZ2xvYmFsQWxwaGEgPSAoc3R5bGVEYXRhLmljb25fb3BhY2l0eS52YWx1ZSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSBzdHlsZURhdGEuc3ZnU3JjO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnpJbmRleCA9IDEwMDsgLy9UZXN0XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgc3Ryb2tld2lkdGgsIHN0cm9rZXdpZHRoLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5JY29uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGNhbnZhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWdTaXplOiBbY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0XS8qLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlIC8gMTAwKSovXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwaG90bycgOlxuICAgICAgICAgICAgICAgIGltYWdlU3R5bGUgPSBuZXcgb2wuc3R5bGUuUGhvdG8oe1xuICAgICAgICAgICAgICAgICAgICBraW5kOiBzdHlsZURhdGEucGhvdG9LaW5kLFxuICAgICAgICAgICAgICAgICAgICBjcm9wOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBwYXJzZUZsb2F0KHN0eWxlRGF0YS5pY29uX29wYWNpdHkudmFsdWUsIDEwKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBwYXJzZUZsb2F0KHN0eWxlRGF0YS5yYWRpdXMudmFsdWUsMTApLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHNyYzogc3R5bGVEYXRhLmljb25fc3JjXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwb2ludCc6XG4gICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogc3R5bGVEYXRhLnJhZGl1cy52YWx1ZSB8fCA3XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGltYWdlU3R5bGUgPSBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogZmlsbFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgN1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYnVpbGQgZnVuY3Rpb25cbiAgICAgICAgc3R5bGVGdW5jdGlvbiA9IGZ1bmN0aW9uIChmZWF0dXJlLCBwcm9qZWN0aW9uLCBnZXRJZCkge1xuICAgICAgICAgICAgdmFyIHN0eWxlc0FycmF5LFxuICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgIGFycm93U2l6ZSxcbiAgICAgICAgICAgICAgICBhcnJvd1NpemVVbml0LFxuICAgICAgICAgICAgICAgIHNlZ21lbnRMZW5ndGgsXG4gICAgICAgICAgICAgICAgYXJyb3dzX21pbnpvb20sXG4gICAgICAgICAgICAgICAgc3RhcnRfcGl4ZWwsXG4gICAgICAgICAgICAgICAgZW5kX3BpeGVsO1xuXG4gICAgICAgICAgICBpZiAoZ2V0SWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVEYXRhLmlkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIGEgZmVhdHVyZS5zdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAoIShmZWF0dXJlIGluc3RhbmNlb2Ygb2wuRmVhdHVyZSkpIHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0aW9uID0gZmVhdHVyZTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlID0gdGhpcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3R5bGVzQXJyYXkgPSBbXTtcblxuICAgICAgICAgICAgaWYgKGZlYXR1cmUgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nICYmIGZlYXR1cmUuZ2V0KCdsYWJlbCcpKSB7XG4gICAgICAgICAgICAgICAgbGFiZWwgPSBmZWF0dXJlLmdldCgnbGFiZWwnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3R5bGVEYXRhLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgbGFiZWwgPSBzdHlsZURhdGEubGFiZWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhYmVsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZGVmYXVsdENvbG9yID0gc2VsZi5jb250cm9sbGVyLm1hcENvbnRyb2xsZXIuZGF0YS5kZWZhdWx0X2xhYmVsX2NvbG9yO1xuICAgICAgICAgICAgLy8gbGFiZWxcbiAgICAgICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZURhdGEubGFiZWxfb3V0bF9jb2xvciAmJiBzdHlsZURhdGEubGFiZWxfb3V0bF93aWR0aC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0U3R5bGVPdXRsaW5lID0gbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5sYWJlbF9vdXRsX2NvbG9yIHx8IGRlZmF1bHRDb2xvciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMTAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBwYXJzZUludChzdHlsZURhdGEubGFiZWxfb3V0bF93aWR0aC52YWx1ZSwgMTApXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZihzdHlsZURhdGEubGFiZWxfb3V0bF9ib3ggPT09IFwiMVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kRmlsbCA9IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLmxhYmVsX291dGxfY29sb3IgfHwgZGVmYXVsdENvbG9yLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDEwMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXN0eWxlRGF0YS5sYWJlbF9vZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVEYXRhLmxhYmVsX29mZnNldCA9IFswLCAwLCBcInB4XCJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihzdHlsZURhdGEubGFiZWxfb3V0bF9ib3ggPT09IFwiMVwiKXtcbiAgICAgICAgICAgICAgICAgIHRleHRTdHlsZSA9IG5ldyBvbC5zdHlsZS5UZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogbGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIGZvbnQ6IChzdHlsZURhdGEuZm9udF93ZWlnaHQgfHwgJ25vcm1hbCcpICsgJyAnICsgKHN0eWxlRGF0YS5mb250X3N0eWxlIHx8ICdub3JtYWwnKSArICcgJyArIChzdHlsZURhdGEuZm9udF9zaXplIHx8ICcxMycpICsgJ3B4ICcgKyAoc3R5bGVEYXRhLmZvbnRfZmFtaWx5IHx8ICdzYW5zLXNlcmlmJyksXG4gICAgICAgICAgICAgICAgICAgIC8vIHNjYWxlOiBwYXJzZUludChzdHlsZURhdGEuZm9udF9zaXplIHx8IDAsIDEwKSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IHBhcnNlSW50KHN0eWxlRGF0YS5sYWJlbF9vZmZzZXRbMF0gfHwgMCwgMTApLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiBwYXJzZUludChzdHlsZURhdGEubGFiZWxfb2Zmc2V0WzFdIHx8IDAsIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiBzdHlsZURhdGEubGFiZWxfYWxpZ25faG9yLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0QmFzZWxpbmU6IHN0eWxlRGF0YS5sYWJlbF9hbGlnbl92ZXIsXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5mb250X2NvbG9yIHx8IGRlZmF1bHRDb2xvciwgc3R5bGVEYXRhLmZvbnRfb3BhY2l0eSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRGaWxsOiBiYWNrZ3JvdW5kRmlsbCxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZFN0cm9rZTogdGV4dFN0eWxlT3V0bGluZVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICB0ZXh0U3R5bGUgPSBuZXcgb2wuc3R5bGUuVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgICAgICBmb250OiAoc3R5bGVEYXRhLmZvbnRfd2VpZ2h0IHx8ICdub3JtYWwnKSArICcgJyArIChzdHlsZURhdGEuZm9udF9zdHlsZSB8fCAnbm9ybWFsJykgKyAnICcgKyAoc3R5bGVEYXRhLmZvbnRfc2l6ZSB8fCAnMTMnKSArICdweCAnICsgKHN0eWxlRGF0YS5mb250X2ZhbWlseSB8fCAnc2Fucy1zZXJpZicpLFxuICAgICAgICAgICAgICAgICAgICAvLyBzY2FsZTogcGFyc2VJbnQoc3R5bGVEYXRhLmZvbnRfc2l6ZSB8fCAwLCAxMCkgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiBwYXJzZUludChzdHlsZURhdGEubGFiZWxfb2Zmc2V0WzBdIHx8IDAsIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogcGFyc2VJbnQoc3R5bGVEYXRhLmxhYmVsX29mZnNldFsxXSB8fCAwLCAxMCksXG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogc3R5bGVEYXRhLmxhYmVsX2FsaWduX2hvcixcbiAgICAgICAgICAgICAgICAgICAgdGV4dEJhc2VsaW5lOiBzdHlsZURhdGEubGFiZWxfYWxpZ25fdmVyLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShzdHlsZURhdGEuZm9udF9jb2xvciB8fCBkZWZhdWx0Q29sb3IsIHN0eWxlRGF0YS5mb250X29wYWNpdHkpXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHRleHRTdHlsZU91dGxpbmVcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjcmVhdGUgc3R5bGUtb2JqZWN0XG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRoaXMgY2hlY2sgYmVjYXVzZSB0ZXh0U3R5bGUgaXMgYSB2YXIgYWNjZXNzaWJsZSBmcm9tIGNsb3N1cmUgYW5kIHdpbGwgYmUgc2V0IGV2ZW4gaWYgbm8gbGFiZWwgaXMgc2V0XG4gICAgICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICBzdHlsZXNBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IGltYWdlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogZmlsbFN0eWxlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3R5bGVzQXJyYXkucHVzaChcbiAgICAgICAgICAgICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBpbWFnZVN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgLy8gYWRkIGxpbmUtYXJyb3dzXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3R5bGVEYXRhLmxpbmVfYXJyb3dzXG4gICAgICAgICAgICAgICAgJiYgZmVhdHVyZVxuICAgICAgICAgICAgICAgICYmICh0eXBlb2YgZmVhdHVyZS5nZXRHZW9tZXRyeSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICAmJiAhKGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uUG9pbnQpXG4gICAgICAgICAgICAgICAgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5mb3JFYWNoU2VnbWVudCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgYXJyb3dTaXplID0gKHN0eWxlRGF0YS5saW5lX2Fycm93c19yYWRpdXMpID8gKHBhcnNlSW50KHN0eWxlRGF0YS5saW5lX2Fycm93c19yYWRpdXMudmFsdWUsIDEwKSAqIDIpIDogMDtcbiAgICAgICAgICAgICAgICBhcnJvd1NpemVVbml0ID0gYXJyb3dTaXplICsgc3R5bGVEYXRhLmxpbmVfYXJyb3dzX3JhZGl1cy51bml0O1xuICAgICAgICAgICAgICAgIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5mb3JFYWNoU2VnbWVudChmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIG1pbnpvb20gaXMgMCAodW5saW1pdGVkKSwgaGlkZSBhcnJvd3MgaWYgdGhleSBhcmUgYmlnZ2VyIHRoYW4gdGhlIHNlZ21lbnRcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzX21pbnpvb20gPSBwYXJzZUludChzdHlsZURhdGEubGluZV9hcnJvd3NfbWluem9vbSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBzdGFydF9waXhlbCA9IHNlbGYuY29udHJvbGxlci5tYXBDb250cm9sbGVyLm1hcC5nZXRQaXhlbEZyb21Db29yZGluYXRlKHN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgZW5kX3BpeGVsID0gc2VsZi5jb250cm9sbGVyLm1hcENvbnRyb2xsZXIubWFwLmdldFBpeGVsRnJvbUNvb3JkaW5hdGUoZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXVjbGlkLWRpc3RhbmNlIGJldHdlZW4gc3RhcnQgYW5kIGVuZFxuICAgICAgICAgICAgICAgICAgICBzZWdtZW50TGVuZ3RoID0gTWF0aC5zcXJ0KE1hdGgucG93KGVuZF9waXhlbFsxXSAtIHN0YXJ0X3BpeGVsWzFdLCAyKSArIE1hdGgucG93KGVuZF9waXhlbFswXSAtIHN0YXJ0X3BpeGVsWzBdLCAyKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGFycm93c19taW56b29tIDwgMCAmJiBhcnJvd1NpemUgKyBwYXJzZUludChzdHlsZURhdGEuc3Ryb2tld2lkdGgudmFsdWUsIDEwKSA8IHNlZ21lbnRMZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCAoYXJyb3dzX21pbnpvb20gPj0gMCAmJiBzZWxmLmNvbnRyb2xsZXIubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFpvb20oKSA+PSBhcnJvd3NfbWluem9vbSlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3J3YXJkIGFycm93c1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzQXJyYXkucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogbmV3IG9sLmdlb20uUG9pbnQoZW5kKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbmV3IG9sLnN0eWxlLlRleHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCLhkLNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IGFycm93U2l6ZVVuaXQgKyBcIiBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVXaXRoVmlldzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAtTWF0aC5hdGFuMigoZW5kWzFdIC0gc3RhcnRbMV0pLCAoZW5kWzBdIC0gc3RhcnRbMF0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmFja3dhcmQgYXJyb3dzIChpZiB3YW50ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVEYXRhLmxpbmVfYXJyb3dzX2JhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXNBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IG5ldyBvbC5nZW9tLlBvaW50KHN0YXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG5ldyBvbC5zdHlsZS5UZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIuGQs1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IGFycm93U2l6ZVVuaXQgKyBcIiBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlV2l0aFZpZXc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IC1NYXRoLmF0YW4yKChzdGFydFsxXSAtIGVuZFsxXSksIChzdGFydFswXSAtIGVuZFswXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc3R5bGVzQXJyYXk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHN0eWxlRnVuY3Rpb247XG4gICAgfSAvLyBlbmQgb2YgXCJnZXRTdHlsZUZ1bmN0aW9uKClcIlxuXG5cbiAgICBnZXRTdHlsZUVkaXRvckNvbmZpZyhzdHlsZURhdGEpIHtcbiAgICAgICAgdmFyIGVkaXRvckNvbmZpZztcblxuICAgICAgICAvLyBjcmVhdGUgZWRpdG9yLWNvbmZpZ1xuICAgICAgICBlZGl0b3JDb25maWcgPSB7fTtcbiAgICAgICAgZWRpdG9yQ29uZmlnLmNvbGxlY3QgPSBzdHlsZURhdGEuZWRpdG9yX2NvbGxlY3QgfHwgdW5kZWZpbmVkO1xuICAgICAgICBlZGl0b3JDb25maWcuaWNvblNyYyA9IHN0eWxlRGF0YS5lZGl0b3JfaWNvbiB8fCB1bmRlZmluZWQ7XG4gICAgICAgIGVkaXRvckNvbmZpZy52YXJzID0gc3R5bGVEYXRhLmVkaXRvcl92YXJzIHx8IHVuZGVmaW5lZDtcblxuICAgICAgICBlZGl0b3JDb25maWcuc29ydCA9IHN0eWxlRGF0YS5lZGl0b3Jfc29ydCB8fCBmYWxzZTtcbiAgICAgICAgaWYgKGVkaXRvckNvbmZpZy5zb3J0KSB7XG4gICAgICAgICAgICBlZGl0b3JDb25maWcuc29ydCA9IHBhcnNlSW50KGVkaXRvckNvbmZpZy5zb3J0LCAxMCkgfHwgZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWRpdG9yQ29uZmlnO1xuICAgIH0vLyBlbmQgb2YgXCJnZXRTdHlsZUVkaXRvckNvbmZpZygpXCJcbiAgICBcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1sb2NhdGlvbnN0eWxlLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb25maWcgPSB0aGlzLmM0Zy5tYXBzLmNvbmZpZyB8fCB7fTtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBvc21Tb3VyY2VEZWZpbml0aW9uc1xuICAgKi9cbiAgYzRnLm1hcHMuY29uZmlnLm9zbSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbmZpZy5vc20sIHtcblxuICAgIEN5Y2xlTWFwOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6ICdTdHlsZSBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL3d3dy5vcGVuY3ljbGVtYXAub3JnL1wiPk9wZW5DeWNsZU1hcDwvYT4nICsgJyAnICtcbiAgICAgICAgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOSxcbiAgICAgIHVybDogJ2h0dHBzOi8ve2EtY30udGlsZS5vcGVuY3ljbGVtYXAub3JnL2N5Y2xlL3t6fS97eH0ve3l9LnBuZydcbiAgICB9LFxuXG4gICAgR2VybWFuOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6ICdTdHlsZSBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL3d3dy5vcGVuc3RyZWV0bWFwLmRlL2dlcm1hbnN0eWxlLmh0bWxcIj5vcGVuc3RyZWV0bWFwLmRlPC9hPicgKyAnICcgK1xuICAgICAgICBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDE5LFxuICAgICAgdXJsOiAnaHR0cHM6Ly97YS1jfS50aWxlLm9wZW5zdHJlZXRtYXAuZGUvdGlsZXMvb3NtZGUve3p9L3t4fS97eX0ucG5nJ1xuICAgIH0sXG5cbiAgICBHZXJtYW5UcmFuc3BvcnQ6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogJ1N0eWxlIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vd3d3Lm1lbW9tYXBzLmRlXCI+TWVtb21hcHM8L2E+JyArICcgJyArXG4gICAgICAgIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTksXG4gICAgICB1cmw6ICdodHRwOi8vdGlsZS5tZW1vbWFwcy5kZS90aWxlZ2VuL3t6fS97eH0ve3l9LnBuZydcbiAgICB9LFxuXG4gICAgTGFuZHNjYXBlTWFwOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6ICdTdHlsZSBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL3d3dy5vcGVuY3ljbGVtYXAub3JnL1wiPk9wZW5DeWNsZU1hcDwvYT4nICsgJyAnICtcbiAgICAgICAgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOSxcbiAgICAgIHVybDogJ2h0dHBzOi8ve2EtY30udGlsZS5vcGVuY3ljbGVtYXAub3JnL2xhbmRzY2FwZS97en0ve3h9L3t5fS5wbmcnXG4gICAgfSxcblxuICAgIE1hcG5pazoge1xuICAgICAgYXR0cmlidXRpb25zOiBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH0sXG5cbiAgICBUcmFuc3BvcnRNYXA6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogJ1N0eWxlIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vd3d3Lm9wZW5jeWNsZW1hcC5vcmcvXCI+T3BlbkN5Y2xlTWFwPC9hPicgKyAnICcgK29sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTksXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgICB1cmw6ICdodHRwOi8ve2EtY30udGlsZTIub3BlbmN5Y2xlbWFwLm9yZy90cmFuc3BvcnQve3p9L3t4fS97eX0ucG5nJ1xuICAgIH0sXG5cbiAgICBOT05FOiAnJyAvLyBsYXN0IGxpbmVcbiAgfSk7IC8vIGVuZCBvZiBcIm9zbVNvdXJjZURlZmluaXRpb25zXCIgLS0tXG5cbiAgLyoqXG4gICAqIHN0YW1lblNvdXJjZURlZmluaXRpb25zXG4gICAqL1xuICBjNGcubWFwcy5jb25maWcuc3RhbWVuID0gJC5leHRlbmQoYzRnLm1hcHMuY29uZmlnLnN0YW1lbiwge1xuXG4gICAgVG9uZXI6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIGxheWVyOiAndG9uZXInLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDE4LFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH0sXG5cbiAgICBUb25lckxhYmVsczoge1xuICAgICAgYXR0cmlidXRpb25zOiBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgbGF5ZXI6ICd0b25lci1sYWJlbHMnLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDE4LFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH0sXG5cbiAgICBUb25lckxpbmVzOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6IG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBsYXllcjogJ3RvbmVyLWxpbmVzJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOCxcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgVGVycmFpbjoge1xuICAgICAgYXR0cmlidXRpb25zOiBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgbGF5ZXI6ICd0ZXJyYWluJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOCxcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgV2F0ZXJjb2xvcjoge1xuICAgICAgYXR0cmlidXRpb25zOiBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgbGF5ZXI6ICd3YXRlcmNvbG9yJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOCxcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgTk9ORTogJydcbiAgfSk7XG5cbiAgLyoqXG4gICAqIG1hcHF1ZXN0U291cmNlRGVmaW5pdGlvbnNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbmZpZy5tYXBxdWVzdCA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbmZpZy5tYXBxdWVzdCwge1xuXG4gICAgTWFwUXVlc3RPcGVuOiB7XG4gICAgICBsYXllcjogJ29zbSdcbiAgICB9LFxuXG4gICAgTWFwUXVlc3RIeWI6IHtcbiAgICAgIGxheWVyOiAnaHliJ1xuICAgIH0sXG5cbiAgICBNYXBRdWVzdFNhdDoge1xuICAgICAgbGF5ZXI6ICdzYXQnXG4gICAgfSxcblxuICAgIE5PTkU6ICcnXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBtYXBib3hTb3VyY2VEZWZpbml0aW9uc1xuICAgKi9cbiAgYzRnLm1hcHMuY29uZmlnLm1hcGJveCA9IHtcblxuICAgIE1hcGJveDoge1xuICAgICAgdGlsZVNpemU6IFs1MTIsIDUxMl0sXG4gICAgICBhdHRyaWJ1dGlvbnM6ICfCqSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cubWFwYm94LmNvbS9hYm91dC9tYXBzL1wiPk1hcGJveDwvYT4nICsgJyAnICtcbiAgICAgICAgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAyMixcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgTWFwYm94Q2xhc3NpYzoge1xuICAgICAgYXR0cmlidXRpb25zOiAnwqkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3Lm1hcGJveC5jb20vYWJvdXQvbWFwcy9cIj5NYXBib3g8L2E+JyArICcgJyArXG4gICAgICAgIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMjIsXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgfVxuICB9O1xuXG4gICAgLyoqXG4gICAgICoga2xva2FuU291cmNlRGVmaW5pdGlvbnNcbiAgICAgKi9cbiAgICAvL1RvRG8gbm90IHJlYWR5XG4gICAgYzRnLm1hcHMuY29uZmlnLmtsb2thbiA9IHtcblxuICAgICAgICBPcGVuTWFwVGlsZXM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogbmV3IG9sLmZvcm1hdC5NVlQoKSxcbiAgICAgICAgICAgIHRpbGVHcmlkOiAgb2wudGlsZWdyaWQuY3JlYXRlWFlaKHt0aWxlU2l6ZTogNTEyLCBtYXhab29tOiAyMn0pLCAvL1RvRG8gbWF4Wm9vbSBmcm9tIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgIHRpbGVQaXhlbFJhdGlvOiA4LFxuICAgICAgICAgICAgYXR0cmlidXRpb25zOiAnwqkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vb3Blbm1hcHRpbGVzLm9yZy9cIj5PcGVuTWFwVGlsZXM8L2E+JyArICcgJyArXG4gICAgICAgICAgICBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgICAgICAgbWluWm9vbTogMCxcbiAgICAgICAgICAgIG1heFpvb206IDIyLFxuICAgICAgICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnXG4gICAgICAgIH0sXG5cbiAgICAgICAgVGlsZUhvc3Rpbmc6IHtcbiAgICAgICAgICAgIGZvcm1hdDogbmV3IG9sLmZvcm1hdC5NVlQoKSxcbiAgICAgICAgICAgIHRpbGVHcmlkOiAgb2wudGlsZWdyaWQuY3JlYXRlWFlaKHt0aWxlU2l6ZTogNTEyLCBtYXhab29tOiAyMn0pLCAvL1RvRG8gbWF4Wm9vbSBmcm9tIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgIHRpbGVQaXhlbFJhdGlvOiA4LFxuICAgICAgICAgICAgYXR0cmlidXRpb25zOiAnwqkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vdGlsZWhvc3RpbmcuY29tL1wiPlRpbGVIb3N0aW5nPC9hPicgKyAnICcgK1xuICAgICAgICAgICAgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgICAgICAgIG1pblpvb206IDAsXG4gICAgICAgICAgICBtYXhab29tOiAyMixcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBoZXJlU291cmNlRGVmaW5pdGlvbnNcbiAgICAgKi9cbiAgICBjNGcubWFwcy5jb25maWcuaGVyZSA9IHtcblxuICAgICAgICBIRVJFOiB7XG4gICAgICAgICAgICB0aWxlU2l6ZTogWzUxMiwgNTEyXSxcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uczogJ01hcCBUaWxlcyDCqSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIuaGVyZS5jb21cIj5IRVJFPC9hPicrICcgJyArXG4gICAgICAgICAgICAgICAgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgICAgICAgIG1pblpvb206IDAsXG4gICAgICAgICAgICBtYXhab29tOiAyMixcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIHRodW5kZXJmb3Jlc3RTb3VyY2VEZWZpbml0aW9uc1xuICAgICAqL1xuICAgIGM0Zy5tYXBzLmNvbmZpZy50aHVuZGVyZm9yZXN0ID0ge1xuXG4gICAgICAgIFRodW5kZXJmb3Jlc3Q6IHtcbiAgICAgICAgICAgIHRpbGVTaXplOiBbNTEyLCA1MTJdLFxuICAgICAgICAgICAgYXR0cmlidXRpb25zOiAnTWFwIFRpbGVzIMKpIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy50aHVuZGVyZm9yZXN0LmNvbS9cIj5UaHVuZGVyZm9yZXN0PC9hPicgKyAnICcgK1xuICAgICAgICAgICAgICAgIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICAgICAgICBtaW5ab29tOiAwLFxuICAgICAgICAgICAgbWF4Wm9vbTogMTksXG4gICAgICAgICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgICAgIH1cblxuICAgIH07XG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIGNvbmZpZyA9IHRoaXMuYzRnLm1hcHMuY29uZmlnO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29uZmlnLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb25zdGFudCA9IHRoaXMuYzRnLm1hcHMuY29uc3RhbnQgfHwge307XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogTGFuZ3VhZ2UgY29uc3RhbnRzIChlbilcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnN0YW50LmkxOG4gPSAkLmV4dGVuZChjNGcubWFwcy5jb25zdGFudC5pMThuLCB7XG5cbiAgICBMQU5HOiAnZGUnLFxuXG4gICAgTkFNRTogJ05hbWUnLFxuICAgIEhJREU6ICdadWtsYXBwZW4nLFxuICAgIENMT1NFOiAnU2NobGllw59lbicsXG4gICAgUE9JTlQ6ICdQT0knLFxuICAgIEZSRUVIQU5EOiAnRnJlaWhhbmQnLFxuICAgIExJTkU6ICdMaW5pZScsXG4gICAgUE9MWUdPTjogJ0Zsw6RjaGUnLFxuICAgIENJUkNMRTogJ1JhZGl1cycsXG4gICAgUEVSSU1FVEVSOiAnVW1mYW5nJyxcbiAgICBMRU5HVEg6ICdMw6RuZ2UnLFxuICAgIFNVUkZBQ0VBUkVBOiAnRmzDpGNoZW5pbmhhbHQnLFxuICAgIFJBRElVUzogJ1JhZGl1cycsXG4gICAgUkVGUkVTSDogJ0FrdHVhbGlzaWVyZW4nLFxuICAgIENPUFlfVE9fQ0xJUEJPQVJEOiAnSW4gWndpc2NoZW5hYmxhZ2Uga29waWVyZW4nLFxuXG4gICAgQ1RSTF9aT09NX0lOOiAnVmVyZ3LDtsOfZXJuJyxcbiAgICBDVFJMX1pPT01fT1VUOiAnVmVya2xlaW5lcm4nLFxuICAgIENUUkxfWk9PTV9FWFQ6ICdNYXhpbWFsIHZlcmtsZWluZXJuJyxcbiAgICBDVFJMX1pPT01fSE9NRTogJ1p1ciB1cnNwcsO8bmdsaWNoZW4gUG9zaXRpb24nLFxuICAgIENUUkxfWk9PTV9QT1M6ICdadW0gYWt0dWVsbGVuIFN0YW5kb3J0JyxcbiAgICBDVFJMX1pPT01fU0xJREVSOiAnWm9vbSBTbGlkZXInLFxuICAgIENUUkxfUkVTRVRfUk9UQVRJT046ICdSb3RhdGlvbiAodG91Y2gsIGFsdCttb3VzZSkgenVyw7xja3NldHplbicsXG4gICAgQ1RSTF9QT1JUU0lERTogJ1BvcnRzaWRlIGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9ST1VURVI6ICdSb3V0ZXIgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX0VESVRPUjogJ0VkaXRvciBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfTUVBU1VSRVRPT0xTOiAnTWVzc3dlcmt6ZXVnZSBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfSU5GT1BBR0U6ICdJbmZvc2VpdGUgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX0FERElUSU9OQUxQQU5FTDogJ1BhbmVsIGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9BQ0NPVU5UOiAnQWNjb3VudCBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfWk9PTUxFVkVMOiAnWm9vbScsXG4gICAgQ1RSTF9NT1VTRUNPT1JEUzogJ0xvbi9MYXQnLFxuICAgIENUUkxfR0VPU0VBUkNIOiAnU3VjaGUgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX1NUQVJUX1NFQVJDSDogJ1N1Y2hlIHN0YXJ0ZW4nLFxuICAgIENUUkxfT1ZFUlZJRVdNQVA6ICfDnGJlcnNpY2h0c2thcnRlIGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9HRU9CT09LTUFSS1M6ICdGYXZvcml0ZW4gdmVyd2FsdGVuJyxcbiAgICBDVFJMX1NJREVCT0FSRDogJ1NpZGVib2FyZCBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfU1RBUkJPQVJEOiAnU3RhcmJvYXJkIGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9BVFRSSUJVVElPTjogJ0F0dHJpYnV0aW9uIGFuemVpZ2VuJyxcbiAgICBDVFJMX0dSSUQ6ICdHaXR0ZXIgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX1BFUk1BTElOSzogJ1Blcm1hbGluayBnZW5lcmllcmVuJyxcbiAgICBDVFJMX0ZVTExTQ1JFRU46ICdWb2xsYmlsZG1vZHVzIGVpbi0vYXVzc2NoYWx0ZW4nLFxuICAgIENUUkxfUFJJTlQ6ICdLYXJ0ZSBleHBvcnRpZXJlbicsXG5cbiAgICBFRElUT1I6ICdFZGl0b3InLFxuICAgIEVESVRPUl9FTkFCTEVfSU5TVEFOVF9NRUFTVVJFOiAnTWVzc2VuIHfDpGhyZW5kIGRlcyBaZWljaG5lbnMnLFxuICAgIEVESVRPUl9FTkFCTEVfRlJFRUhBTkRfRFJBVzogJ0ZyZWloYW5kIHplaWNobmVuJyxcbiAgICBFRElUT1JfRkVBVFVSRV9BUFBMWTogJ0VkaXRpZXJlbiBiZWVuZGVuJyxcbiAgICBFRElUT1JfRkVBVFVSRV9ERUxFVEU6ICdFbGVtZW50IGzDtnNjaGVuJyxcbiAgICBFRElUT1JfRkVBVFVSRV9NT0RJRlk6ICdFbGVtZW50IGVkaXRpZXJlbiAvIHZlcnNjaGllYmVuJyxcbiAgICBFRElUT1JfU0VMRUNUX0lORk86ICdadXIgQXVzd2FobCBlaW4gRWxlbWVudCBhdWYgZGVyIEthcnRlIGFua2xpY2tlbi4nLFxuICAgIEVESVRPUl9TRUxFQ1RfSU5GT19BRERJVElPTkFMOiAnW1N0cmddICsgW0tsaWNrXSBmw7xyIE1laHJmYWNoYXVzd2FobCA8YnI+W1NoaWZ0XSBoYWx0ZW4gZsO8ciBBdXN3YWhsYm94JyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX1NFTEVDVDogJ0F1c3dhaGwgTW9kdXMnLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19QT0lOVDogJ0thcnRlbmVsZW1lbnRlJyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfRlJFRUhBTkQ6ICdGcmVpaGFuZHdlcmt6ZXVnZScsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0xJTkVTVFJJTkc6ICdTdHJlY2tlbndlcmt6ZXVnZScsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX1BPTFlHT046ICdGbMOkY2hlbndlcmt6ZXVnZScsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0NJUkNMRTogJ0tyZWlzd2Vya3pldWdlJyxcblxuICAgIFBPUFVQX1JPVVRFX0ZST006ICdSb3V0ZSB2b24gaGllcicsXG4gICAgUE9QVVBfUk9VVEVfVE86ICdSb3V0ZSBoaWVyaGluJyxcblxuICAgIFNUQVJCT0FSRDogJ1N0YXJib2FyZCcsXG4gICAgU1RBUkJPQVJEX0JBU0VMQVlFUjogJ0Jhc2lza2FydGVuJyxcbiAgICBTVEFSQk9BUkRfTEFZRVI6ICdFYmVuZW4nLFxuICAgIFNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfQkFTRUxBWUVSU1dJVENIRVI6ICdCYXNpc2thcnRlbicsXG4gICAgU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9MQVlFUlNXSVRDSEVSOiAnS2FydGVuZWxlbWVudGUnLFxuXG4gICAgU0lERUJPQVJEOiAnU2lkZWJvYXJkJyxcblxuICAgIFJPVVRFUl9WSUVXX0FERFJFU1NfSU5QVVQ6ICdSb3V0ZSBmaW5kZW4nLFxuICAgIFJPVVRFUl9GUk9NX0xBQkVMOiAnU3RhcnQnLFxuICAgIFJPVVRFUl9PVkVSX0xBQkVMOiAnWndpc2NoZW56aWVsJyxcbiAgICBST1VURVJfVE9fTEFCRUw6ICdaaWVsJyxcbiAgICBST1VURVJfQ0xFQVJfVElUTEU6ICdMw7ZzY2hlbicsXG4gICAgUk9VVEVSX0NMRUFSX0hUTUw6ICcnLFxuICAgIFJPVVRFUl9MYWJlbF9JbnRlcmltOiAnWndpc2NoZW56aWVsJyxcblxuICAgIFJPVVRFUl9TV0lUQ0g6J1dlY2hzZWwgdm9uIFN0YXJ0IHVuZCBaaWVsJyxcbiAgICBST1VURVJfT1ZFUjonWndpc2NoZW56aWVsIGhpbnp1ZsO8Z2VuJyxcbiAgICBST1VURVJfUFJJTlQ6J1JvdXRlbmJlc2NocmVpYnVuZyBkcnVja2VuJyxcblxuICAgIFJPVVRFUl9WSUVXX0xBQkVMX1JPVVRFOiAnUm91dGU6JyxcbiAgICBST1VURVJfVklFV19MQUJFTF9ESVNUQU5DRTogJ0VudGZlcm51bmc6JyxcbiAgICBST1VURVJfVklFV19MQUJFTF9USU1FOiAnWmVpdDonLFxuICAgIFJPVVRFUl9WSUVXX0xBQkVMX1BST0ZJTEU6ICdQcm9maWw6JyxcblxuICAgIFJPVVRFUl9WSUVXX0FMRVJUX0FERFJFU1M6ICdBZHJlc3NlIG5pY2h0IGdlZnVuZGVuLicsXG4gICAgUk9VVEVSX1ZJRVdfQUxFUlRfR09DT0RJTkc6ICdadWdyaWZmIGF1ZiBHZW9jb2RlciBmZWhsZ2VzY2hsYWdlbi4nLFxuXG4gICAgUk9VVEVSOiAnUm91dGVyJyxcbiAgICBST1VURVJfTjogJ05vcmRlbicsXG4gICAgUk9VVEVSX0U6ICdPc3QnLFxuICAgIFJPVVRFUl9TOiAnU8O8ZGVuJyxcbiAgICBST1VURVJfVzogJ1dlc3RlbicsXG4gICAgUk9VVEVSX05FOiAnTm9yZG9zdCcsXG4gICAgUk9VVEVSX1NFOiAnU8O8ZG9zdCcsXG4gICAgUk9VVEVSX1NXOiAnU8O8ZHdlc3QnLFxuICAgIFJPVVRFUl9OVzogJ05vcmR3ZXN0JyxcbiAgICBST1VURVJfRElSRUNUSU9OXzA6ICdVbmJla2FubnRlIEFud2Vpc3VuZ1sgYXVmIDxiPiVzPC9iPl0nLFxuICAgIFJPVVRFUl9ESVJFQ1RJT05fMTogJ0dlcmFkZWF1cyB3ZWl0ZXJmYWhyZW5bIGF1ZiA8Yj4lczwvYj5dJyxcbiAgICBST1VURVJfRElSRUNUSU9OXzI6ICdMZWljaHQgcmVjaHRzIGFiYmllZ2VuIFthdWYgPGI+JXM8L2I+XScsXG4gICAgUk9VVEVSX0RJUkVDVElPTl8zOiAnUmVjaHRzIGFiYmllZ2VuWyBhdWYgPGI+JXM8L2I+XScsXG4gICAgUk9VVEVSX0RJUkVDVElPTl80OiAnU2NoYXJmIHJlY2h0cyBhYmJpZWdlblsgYXVmIDxiPiVzPC9iPl0nLFxuICAgIFJPVVRFUl9ESVJFQ1RJT05fNTogJ1dlbmRlblsgYXVmIDxiPiVzPC9iPl0nLFxuICAgIFJPVVRFUl9ESVJFQ1RJT05fNjogJ1NjaGFyZiBsaW5rcyBhYmJpZWdlblsgYXVmIDxiPiVzPC9iPl0nLFxuICAgIFJPVVRFUl9ESVJFQ1RJT05fNzogJ0xpbmtzIGFiYmllZ2VuWyBhdWYgPGI+JXM8L2I+XScsXG4gICAgUk9VVEVSX0RJUkVDVElPTl84OiAnTGVpY2h0IGxpbmtzIGFiYmllZ2VuWyBhdWYgPGI+JXM8L2I+XScsXG4gICAgUk9VVEVSX0RJUkVDVElPTl8xMDogJ0ZhaHJlbiBTaWUgUmljaHR1bmcgPGI+JWQ8L2I+WyBhdWYgPGI+JXM8L2I+XScsXG4gICAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtMSc6ICdJbiBkZW4gS3JlaXN2ZXJrZWhyIGVpbmZhaHJlbiB1bmQgYmVpIGVyc3RlciBNw7ZnbGljaGtlaXRbIGluIFJpY2h0dW5nIDxiPiVzPC9iPl0gdmVybGFzc2VuJyxcbiAgICAnUk9VVEVSX0RJUkVDVElPTl8xMS0yJzogJ0luIGRlbiBLcmVpc3ZlcmtlaHIgZWluZmFocmVuIHVuZCBiZWkgendlaXRlciBNw7ZnbGljaGtlaXRbIGluIFJpY2h0dW5nIDxiPiVzPC9iPl0gdmVybGFzc2VuJyxcbiAgICAnUk9VVEVSX0RJUkVDVElPTl8xMS0zJzogJ0luIGRlbiBLcmVpc3ZlcmtlaHIgZWluZmFocmVuIHVuZCBiZWkgZHJpdHRlciBNw7ZnbGljaGtlaXRbIGluIFJpY2h0dW5nIDxiPiVzPC9iPl0gdmVybGFzc2VuJyxcbiAgICAnUk9VVEVSX0RJUkVDVElPTl8xMS00JzogJ0luIGRlbiBLcmVpc3ZlcmtlaHIgZWluZmFocmVuIHVuZCBiZWkgdmllcnRlciBNw7ZnbGljaGtlaXRbIGluIFJpY2h0dW5nIDxiPiVzPC9iPl0gdmVybGFzc2VuJyxcbiAgICAnUk9VVEVSX0RJUkVDVElPTl8xMS01JzogJ0luIGRlbiBLcmVpc3ZlcmtlaHIgZWluZmFocmVuIHVuZCBiZWkgZsO8bmZ0ZXIgTcO2Z2xpY2hrZWl0WyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtNic6ICdJbiBkZW4gS3JlaXN2ZXJrZWhyIGVpbmZhaHJlbiB1bmQgYmVpIHNlY2hzdGVyIE3DtmdsaWNoa2VpdFsgaW4gUmljaHR1bmcgPGI+JXM8L2I+XSB2ZXJsYXNzZW4nLFxuICAgICdST1VURVJfRElSRUNUSU9OXzExLTcnOiAnSW4gZGVuIEtyZWlzdmVya2VociBlaW5mYWhyZW4gdW5kIGJlaSBzaWVidGVyIE3DtmdsaWNoa2VpdFsgaW4gUmljaHR1bmcgPGI+JXM8L2I+XSB2ZXJsYXNzZW4nLFxuICAgICdST1VURVJfRElSRUNUSU9OXzExLTgnOiAnSW4gZGVuIEtyZWlzdmVya2VociBlaW5mYWhyZW4gdW5kIGJlaSBhY2h0ZXIgTcO2Z2xpY2hrZWl0WyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtOSc6ICdJbiBkZW4gS3JlaXN2ZXJrZWhyIGVpbmZhaHJlbiB1bmQgYmVpIG5ldW50ZXIgTcO2Z2xpY2hrZWl0WyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEteCc6ICdJbiBkZW4gS3JlaXN2ZXJrZWhyIGVpbmZhaHJlbiB1bmQgYmVpIGVpbmVyIGRlciB2aWVsZW4gTcO2Z2xpY2hrZWl0ZW5bIGluIFJpY2h0dW5nIDxiPiVzPC9iPl0gdmVybGFzc2VuJyxcbiAgICBST1VURVJfRElSRUNUSU9OXzE1OiAnU2llIGhhYmVuIElociBaaWVsIGVycmVpY2h0JyxcblxuICAgICdST1VURVJfNS5YX1RZUEVfMCc6ICcgJW0gZmFocmVuWyBhdWYgPGI+JXM8L2I+XScsXG4gICAgJ1JPVVRFUl81LlhfVFlQRV8xJzogJyAlbSBkZW0gU3RyYcOfZW52ZXJsYXVmIGZvbGdlblsgYWxzIDxiPiVzPC9iPl0nLFxuICAgICdST1VURVJfNS5YX1RZUEVfMic6ICcgRmFocmVuIFNpZVsgYXVmIDxiPiVzPC9iPl0gbG9zJyxcbiAgICAnUk9VVEVSXzUuWF9UWVBFXzMnOiAnIERhcyBaaWVsIGJlZmluZGV0IHNpY2ggPGI+JW08L2I+JyxcbiAgICAnUk9VVEVSXzUuWF9UWVBFXzQnOiAnIFdlaXRlcmZhaHJlblsgYXVmIDxiPiVzPC9iPl0nLFxuICAgICdST1VURVJfNS5YX1RZUEVfNSc6ICcgJW0gW2F1ZiA8Yj4lczwvYj4gXWF1ZmZhaHJlbicsXG4gICAgJ1JPVVRFUl81LlhfVFlQRV82JzogJyAlbSBbYXVmIDxiPiVzPC9iPiBdYWJmYWhyZW4nLFxuICAgICdST1VURVJfNS5YX1RZUEVfNyc6ICcgRGVuIEZhaHJzdHJlaWZlbiAlbSBiZW51dHplbiBbYXVmIDxiPiVzPC9iPl0nLFxuICAgICdST1VURVJfNS5YX1RZUEVfOCc6ICcgJW0gYWJiaWVnZW4gW2F1ZiA8Yj4lczwvYj5dJyxcbiAgICAnUk9VVEVSXzUuWF9UWVBFXzknOiAnIERlbiBGYWhyc3RyZWlmZW4gJW0gYmVudXR6ZW4gW2F1ZiA8Yj4lczwvYj5dJyxcbiAgICAnUk9VVEVSXzUuWF9UWVBFXzEwJzogJyAlbSBmYWhyZW4gdW0gYXVmIGRlciBTdHJhw59lIHp1IGJsZWliZW4nLFxuICAgICdST1VURVJfNS5YX1RZUEVfMTEnOiAnIEltIEtyZWlzdmVya2VociBkaWUgPGI+JXouPC9iPiBBdXNmYWhydCBuZWhtZW4gW2F1ZiA8Yj4lczwvYj5dJyxcbiAgICAnUk9VVEVSXzUuWF9UWVBFXzEyJzogJyBJbSBLcmVpc3ZlcmtlaHIgZGllIDxiPiV6LjwvYj4gQXVzZmFocnQgbmVobWVuIFthdWYgPGI+JXM8L2I+XScsXG4gICAgJ1JPVVRFUl81LlhfVFlQRV8xMyc6ICcgJW0gZmFocmVuIFthdWYgPGI+JXM8L2I+XScsXG4gICAgJ1JPVVRFUl81LlhfVFlQRV8xNCc6ICcgYWJiaWVnZW5bIGF1ZiA8Yj4lczwvYj5dJyxcblxuICAgICdST1VURVJfNS5YX01PRF8wJyAgOiAnVXR1cm4nLFxuICAgICdST1VURVJfNS5YX01PRF8xJyAgOiAnU2NoYXJmIHJlY2h0cycsXG4gICAgJ1JPVVRFUl81LlhfTU9EXzInICA6ICdSZWNodHMnLFxuICAgICdST1VURVJfNS5YX01PRF8zJyAgOiAnTGVpY2h0IHJlY2h0cycsXG4gICAgJ1JPVVRFUl81LlhfTU9EXzQnICA6ICdHZXJhZGVhdXMnLFxuICAgICdST1VURVJfNS5YX01PRF81JyAgOiAnTGVpY2h0IGxpbmtzJyxcbiAgICAnUk9VVEVSXzUuWF9NT0RfNicgIDogJ0xpbmtzJyxcbiAgICAnUk9VVEVSXzUuWF9NT0RfNycgIDogJ1NjaGFyZiBsaW5rcycsXG4gICAgJ1JPVVRFUl81LlhfTU9EXzgnICA6ICdpbiBkZXIgTsOkaGUnLFxuXG4gICAgUk9VVEVSX0ZST006ICdTdGFydCcsXG4gICAgUk9VVEVSX1RPOiAnWmllbCcsXG4gICAgUk9VVEVSX0ZJTkRfUk9VVEU6ICdSb3V0ZSBmaW5kZW4nLFxuICAgIFJPVVRFUl9MT0NfUk9VVEVfVE86ICdSb3V0ZSBoaWVyaGluJyxcbiAgICBST1VURVJfUk9VVEVERVNDOiAnUm91dGVuYmVzY2hyZWlidW5nJyxcbiAgICBST1VURVJfUk9VVEVOQU1FOiAnUm91dGUnLFxuICAgIFJPVVRFUl9ESVNUQU5DRTogJ0Rpc3RhbnonLFxuICAgIFJPVVRFUl9USU1FOiAnWmVpdCcsXG4gICAgUk9VVEVSX1JFVl9HRU9DT0RJTkc6ICdFcm1pdHRsZSBBZHJlc3NlLi4uJyxcbiAgICBST1VURVJfRVJST1JfUkVWX0dFT0NPRElORzogJ0ZlaGxlciBiZWltIEVybWl0dGVsbiBkZXIgQWRyZXNzZScsXG4gICAgUk9VVEVSX1NFQVJDSElORzogJ1N1Y2hlIEFkcmVzc2UuLi4nLFxuICAgIFJPVVRFUl9FUlJPUl9TRUFSQ0hJTkc6ICdGZWhsZXIgYmVpbSBTdWNoZW4gZGVyIEFkcmVzc2UnLFxuICAgIFJPVVRFUl9DQUxDX1JPVVRFOiAnQmVyZWNobmUgUm91dGUuLi4nLFxuICAgIFJPVVRFUl9FUlJPUl9DQUxDX1JPVVRFOiAnRmVobGVyIGJlaW0gQmVyZWNobmVuIGRlciBSb3V0ZScsXG5cbiAgICBNRUFTVVJFVE9PTFM6ICdNZXNzd2Vya3pldWdlJyxcbiAgICBNRUFTVVJFVE9PTFNfSU5GTzogJ1fDpGhsZW4gU2llIHdlaXRlciB1bnRlbiBlaW5lbiBNZXNzdHlwIGF1cyB1bmQgc3RhcnRlbiBTaWUgZGllIE1lc3N1bmcgZHVyY2ggZGFzIEtsaWNrZW4gYXVmIGRlciBLYXJ0ZS4nLFxuICAgIE1FQVNVUkVUT09MU19JTkZPX0FERElUSU9OQUw6ICcoRWluemVsbmUgTWVzc3VuZ2VuIGvDtm5uZW4gbWl0IGVpbmVtIERvcHBlbGtsaWNrIGJlZW5kZXQgd2VyZGVuLiknLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfU0VMRUNUOiAnQXVzd2FobCBNb2R1cycsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0xJTkVTVFJJTkc6ICdTdHJlY2tlbiBtZXNzZW4nLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19QT0xZR09OOiAnRmzDpGNoZW4gbWVzc2VuJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfQ0lSQ0xFOiAnUmFkaXVzIG1lc3NlbicsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0ZSRUVIQU5EOiAnRnJlaWhhbmQgbWVzc2VuJyxcblxuICAgIEdFT0JPT0tNQVJLU19QTEFDRUhPTERFUjogJ05ldWUgQmV6ZWljaG51bmcnLFxuXG4gICAgSU5GT1BBR0U6ICdJbmZvcm1hdGlvbmVuJyxcbiAgICBBRERJVElPTkFMUEFORUw6ICdQYW5lbCcsXG4gICAgQURESVRJT05BTFBBTkVMX1ZJRVdfVFJJR0dFUjogJ1BhbmVsIGFuemVpZ2VuJyxcbiAgICBBQ0NPVU5UOiAnQWNjb3VudCcsXG4gICAgQUNDT1VOVF9WSUVXX1RSSUdHRVI6ICdBY2NvdW50IGFuemVpZ2VuJyxcblxuICAgIFNFQVJDSF9OT1RfRk9VTkQ6ICdEaWUgTG9rYXRpb24ga29ubnRlIG5pY2h0IGdlZnVuZGVuIHdlcmRlbi4gQml0dGUgdmVyc3VjaGVuIFNpZSBlaW5lIGFuZGVyZSBFaW5nYWJlLicsXG5cbiAgICBOT05FOiAnJyAvLyBsYXN0IGxpbmVcbiAgfSk7IC8vIGVuZCBvZiBcImxhbmd1YWdlIGNvbnN0YW50c1wiIC0tLVxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBsYW5nQ29uc3RhbnRzID0gdGhpcy5jNGcubWFwcy5jb25zdGFudC5pMThuO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZS5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29uc3RhbnQgPSB0aGlzLmM0Zy5tYXBzLmNvbnN0YW50IHx8IHt9O1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENTUyBjb25zdGFudHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnN0YW50LmNzcyA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnN0YW50LmNzcywge1xuXG4gICAgT1BFTjogJ2M0Zy1vcGVuJyxcbiAgICBDTE9TRTogJ2M0Zy1jbG9zZScsXG4gICAgQ0xPU0VBQkxFOiAnYzRnLWNsb3NlYWJsZScsXG4gICAgRU5BQkxFRDogJ2M0Zy1lbmFibGVkJyxcbiAgICBESVNBQkxFRDogJ2M0Zy1kaXNhYmxlZCcsXG4gICAgSElERTogJ2M0Zy1oaWRlJyxcbiAgICBJQ09OOiAnYzRnLWljb24nLFxuICAgIENPTlRST0w6ICdjNGctY29udHJvbCcsXG4gICAgQ09QWTogJ2M0Zy1jb3B5JyxcbiAgICBSRUZSRVNIOiAnYzRnLXJlZnJlc2gnLFxuICAgIEFDVElWRTogJ2M0Zy1hY3RpdmUnLFxuICAgIElOQUNUSVZFOiAnYzRnLWluYWN0aXZlJyxcbiAgICBMT0FESU5HOiAnYzRnLWxvYWRpbmcnLFxuICAgIEFOSU1BVElPTl9TUElOOiAnYzRnLWFuaW1hdGlvbi1zcGluJyxcbiAgICBMQVJHRTogJ2M0Zy1sYXJnZScsXG4gICAgU01BTEw6ICdjNGctc21hbGwnLFxuICAgIEhPUklaT05UQUw6ICdjNGctaG9yaXpvbnRhbCcsXG4gICAgVkVSVElDQUw6ICdjNGctdmVydGljYWwnLFxuXG4gICAgQVRUUklCVVRJT05fTE9HTzogJ2M0Zy1hdHRyaWJ1dGlvbi1sb2dvJyxcbiAgICBDT05UUk9MX0NPTlRBSU5FUl9UTDogJ2M0Zy1jb250cm9sLWNvbnRhaW5lci10b3AtbGVmdCcsXG4gICAgQ09OVFJPTF9DT05UQUlORVJfVFI6ICdjNGctY29udHJvbC1jb250YWluZXItdG9wLXJpZ2h0JyxcbiAgICBDT05UUk9MX0NPTlRBSU5FUl9CTDogJ2M0Zy1jb250cm9sLWNvbnRhaW5lci1ib3R0b20tbGVmdCcsXG4gICAgQ09OVFJPTF9DT05UQUlORVJfQkxfU1VCOiAnYzRnLWNvbnRyb2wtY29udGFpbmVyLWJvdHRvbS1sZWZ0LXN1YicsXG4gICAgQ09OVFJPTF9DT05UQUlORVJfQlI6ICdjNGctY29udHJvbC1jb250YWluZXItYm90dG9tLXJpZ2h0JyxcbiAgICBFRElUT1JfRFJBV19DT05URU5UX1BPSU5UOiAnYzRnLWRyYXctY29udGVudC1wb2ludCcsXG4gICAgRURJVE9SX0RSQVdfQ09OVEVOVF9GUkVFSEFORDogJ2M0Zy1kcmF3LWNvbnRlbnQtZnJlZWhhbmQnLFxuICAgIEVESVRPUl9EUkFXX0NPTlRFTlRfTElORVNUUklORzogJ2M0Zy1kcmF3LWNvbnRlbnQtbGluZScsXG4gICAgRURJVE9SX0RSQVdfQ09OVEVOVF9QT0xZR09OOiAnYzRnLWRyYXctY29udGVudC1wb2x5Z29uJyxcbiAgICBFRElUT1JfRFJBV19DT05URU5UX0NJUkNMRTogJ2M0Zy1kcmF3LWNvbnRlbnQtY2lyY2xlJyxcbiAgICBFRElUT1JfRFJBV19DT05URU5UX1BST0pFQ1Q6ICdjNGctZHJhdy1jb250ZW50LXByb2plY3QnLFxuICAgIEVESVRPUl9EUkFXX1RSSUdHRVI6ICdjNGctZHJhdy10cmlnZ2VyJyxcbiAgICBFRElUT1JfQ09OVEVOVF9TRUxFQ1Q6ICdjNGctY29udGVudC1zZWxlY3QnLFxuICAgIEVESVRPUl9EUkFXX09QVElPTlM6ICdjNGctZWRpdG9yLWRyYXctb3B0aW9ucycsXG4gICAgRURJVE9SX0ZFQVRVUkVfQVBQTFk6ICdjNGctZWRpdG9yLWZlYXR1cmUtYXBwbHknLFxuICAgIEVESVRPUl9GRUFUVVJFX0RFTEVURTogJ2M0Zy1lZGl0b3ItZmVhdHVyZS1kZWxldGUnLFxuICAgIEVESVRPUl9GRUFUVVJFX01PRElGWTogJ2M0Zy1lZGl0b3ItZmVhdHVyZS1tb2RpZnknLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfU0VMRUNUOiAnYzRnLWVkaXRvci12aWV3LXRyaWdnZXItc2VsZWN0JyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfUE9JTlQ6ICdjNGctZWRpdG9yLXZpZXctdHJpZ2dlci1kcmF3LXBvaW50JyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfRlJFRUhBTkQ6ICdjNGctZWRpdG9yLXZpZXctdHJpZ2dlci1kcmF3LWZyZWVoYW5kJyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfTElORVNUUklORzogJ2M0Zy1lZGl0b3Itdmlldy10cmlnZ2VyLWRyYXctbGluZScsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX1BPTFlHT046ICdjNGctZWRpdG9yLXZpZXctdHJpZ2dlci1kcmF3LXBvbHlnb24nLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19DSVJDTEU6ICdjNGctZWRpdG9yLXZpZXctdHJpZ2dlci1kcmF3LWNpcmNsZScsXG4gICAgR0VPU0VBUkNIOiAnYzRnLWdlb3NlYXJjaCcsXG4gICAgR0VPU0VBUkNIX1dSQVBQRVI6ICdjNGctZ2Vvc2VhcmNoLXdyYXBwZXInLFxuICAgIEdFT1NFQVJDSF9UUklHR0VSOiAnYzRnLWdlb3NlYXJjaC10cmlnZ2VyJyxcbiAgICBHRU9TRUFSQ0hfU1RBUlQ6ICdjNGctZ2Vvc2VhcmNoLXN0YXJ0JyxcbiAgICBHUkFUSUNVTEU6ICdjNGctZ3JhdGljdWxlJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX1NFTEVDVDogJ2M0Zy1tZWFzdXJldG9vbHMtdmlldy10cmlnZ2VyLXNlbGVjdCcsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0xJTkVTVFJJTkc6ICdjNGctbWVhc3VyZXRvb2xzLXZpZXctdHJpZ2dlci1kcmF3LWxpbmUnLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19QT0xZR09OOiAnYzRnLW1lYXN1cmV0b29scy12aWV3LXRyaWdnZXItZHJhdy1wb2x5Z29uJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfQ0lSQ0xFOiAnYzRnLW1lYXN1cmV0b29scy12aWV3LXRyaWdnZXItZHJhdy1jaXJjbGUnLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19GUkVFSEFORDogJ2M0Zy1tZWFzdXJldG9vbHMtdmlldy10cmlnZ2VyLWRyYXctZnJlZWhhbmQnLFxuICAgIFBSSU5UOidjNGctcHJpbnQnLFxuICAgIElORk9QQUdFX1ZJRVdfVFJJR0dFUjogJ2M0Zy1pbmZvcGFnZS12aWV3LXRyaWdnZXInLFxuICAgIElORk9QQUdFOiAnYzRnLWluZm9wYWdlJyxcbiAgICBBRERJVElPTkFMUEFORUxfVklFV19UUklHR0VSOiAnYzRnLWFkZGl0aW9uYWxwYW5lbC12aWV3LXRyaWdnZXInLFxuICAgIEFERElUSU9OQUxQQU5FTDogJ2M0Zy1hZGRpdGlvbmFscGFuZWwnLFxuICAgIEFDQ09VTlRfVklFV19UUklHR0VSOiAnYzRnLWFjY291bnQtdmlldy10cmlnZ2VyJyxcbiAgICBBQ0NPVU5UOiAnYzRnLWFjY291bnQnLFxuICAgIE9WRVJWSUVXTUFQOiAnYzRnLW92ZXJ2aWV3bWFwJyxcbiAgICBPVkVSVklFV01BUF9XUkFQUEVSOiAnYzRnLW92ZXJ2aWV3bWFwLXdyYXBwZXInLFxuICAgIEdFT0JPT0tNQVJLUzogJ2M0Zy1nZW9ib29rbWFya3MnLFxuICAgIFBFUk1BTElOSzogJ2M0Zy1wZXJtYWxpbmsnLFxuICAgIFBFUk1BTElOS19QT1BVUDogJ2M0Zy1wZXJtYWxpbmstcG9wdXAnLFxuICAgIFBPUFVQX0NMT1NFOiAnYzRnLXBvcHVwLWNsb3NlJyxcbiAgICBQT1BVUF9ST1VURV9XUkFQUEVSOiAnYzRnLXBvcHVwLXJvdXRlLXdyYXBwZXInLFxuICAgIFBPUFVQX1JPVVRFX0ZST006ICdjNGctcG9wdXAtcm91dGUtZnJvbScsXG4gICAgUE9QVVBfUk9VVEVfVE86ICdjNGctcG9wdXAtcm91dGUtdG8nLFxuICAgIFBPUlRTSURFOiAnYzRnLXBvcnRzaWRlJyxcbiAgICBQT1JUU0lERV9DT05UQUlORVI6ICdjNGctcG9ydHNpZGUtY29udGFpbmVyJyxcbiAgICBQT1JUU0lERV9DT05UUk9MOiAnYzRnLXBvcnRzaWRlLWNvbnRyb2wnLFxuICAgIFBPUlRTSURFX1dSQVBQRVI6ICdjNGctcG9ydHNpZGUtd3JhcHBlcicsXG4gICAgUE9SVFNJREVfVElUTEVCQVI6ICdjNGctcG9ydHNpZGUtdGl0bGViYXInLFxuICAgIFBPUlRTSURFX1RPUF9UT09MQkFSOiAnYzRnLXBvcnRzaWRlLXRvcC10b29sYmFyJyxcbiAgICBQT1JUU0lERV9DT05URU5UX0NPTlRBSU5FUjogJ2M0Zy1wb3J0c2lkZS1jb250ZW50LWNvbnRhaW5lcicsXG4gICAgUE9SVFNJREVfQk9UVE9NX1RPT0xCQVI6ICdjNGctcG9ydHNpZGUtYm90dG9tLXRvb2xiYXInLFxuICAgIFBPUlRTSURFX1NUQVRVU0JBUjogJ2M0Zy1wb3J0c2lkZS1zdGF0dXNiYXInLFxuICAgIFBPUlRTSURFX1ZJRVdUUklHR0VSQkFSOiAnYzRnLXBvcnRzaWRlLXZpZXd0cmlnZ2VyYmFyJyxcbiAgICBQT1JUU0lERV9IRUFETElORTogJ2M0Zy1wb3J0c2lkZS1oZWFkbGluZScsXG4gICAgUE9SVFNJREVfQlVUVE9OQkFSOiAnYzRnLXBvcnRzaWRlLWJ1dHRvbmJhcicsXG4gICAgUE9SVFNJREVfQlVUVE9OOiAnYzRnLXBvcnRzaWRlLWJ1dHRvbicsXG4gICAgUE9SVFNJREVfSElERTogJ2M0Zy1wb3J0c2lkZS1oaWRlJyxcbiAgICBQT1JUU0lERV9DTE9TRTogJ2M0Zy1wb3J0c2lkZS1jbG9zZScsXG4gICAgU1BJTk5FUjogJ2M0Zy1zcGlubmVyJyxcbiAgICBTVEFSQk9BUkQ6ICdjNGctc3RhcmJvYXJkJyxcbiAgICBTVEFSQk9BUkRfQ09OVEFJTkVSOiAnYzRnLXN0YXJib2FyZC1jb250YWluZXInLFxuICAgIFNUQVJCT0FSRF9DT05UUk9MOiAnYzRnLXN0YXJib2FyZC1jb250cm9sJyxcbiAgICBTVEFSQk9BUkRfV1JBUFBFUjogJ2M0Zy1zdGFyYm9hcmQtd3JhcHBlcicsXG4gICAgU1RBUkJPQVJEX1RJVExFQkFSOiAnYzRnLXN0YXJib2FyZC10aXRsZWJhcicsXG4gICAgU1RBUkJPQVJEX0NPTlRFTlRfQ09OVEFJTkVSOiAnYzRnLXN0YXJib2FyZC1jb250ZW50LWNvbnRhaW5lcicsXG4gICAgU1RBUkJPQVJEX0JPVFRPTV9UT09MQkFSOiAnYzRnLXN0YXJib2FyZC1ib3R0b20tdG9vbGJhcicsXG4gICAgU1RBUkJPQVJEX1NUQVRVU0JBUjogJ2M0Zy1zdGFyYm9hcmQtc3RhdHVzYmFyJyxcbiAgICBTVEFSQk9BUkRfVklFV1RSSUdHRVJCQVI6ICdjNGctc3RhcmJvYXJkLXZpZXd0cmlnZ2VyYmFyJyxcbiAgICBTVEFSQk9BUkRfSEVBRExJTkU6ICdjNGctc3RhcmJvYXJkLWhlYWRsaW5lJyxcbiAgICBTVEFSQk9BUkRfQlVUVE9OQkFSOiAnYzRnLXN0YXJib2FyZC1idXR0b25iYXInLFxuICAgIFNUQVJCT0FSRF9CVVRUT046ICdjNGctc3RhcmJvYXJkLWJ1dHRvbicsXG4gICAgU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9CQVNFTEFZRVJTV0lUQ0hFUjogJ2M0Zy1zdGFyYm9hcmQtdmlldy10cmlnZ2VyLWJhc2VsYXllcnN3aXRjaGVyJyxcbiAgICBTVEFSQk9BUkRfVklFV19UUklHR0VSX0xBWUVSU1dJVENIRVI6ICdjNGctc3RhcmJvYXJkLXZpZXctdHJpZ2dlci1sYXllcnN3aXRjaGVyJyxcbiAgICBTVEFSQk9BUkRfQ0xPU0U6ICdjNGctc3RhcmJvYXJkLWNsb3NlJyxcbiAgICBTVEFSQk9BUkRfQ09OVEVOVF9CQVNFTEFZRVJTV0lUQ0hFUjogJ2M0Zy1jb250ZW50LWJhc2VsYXllcnN3aXRjaGVyJyxcbiAgICBTVEFSQk9BUkRfQkFTRUxBWUVSVFJFRTogJ2M0Zy1iYXNlbGF5ZXJ0cmVlJyxcbiAgICBTVEFSQk9BUkRfTEFZRVJUUkVFOiAnYzRnLWxheWVydHJlZScsXG4gICAgU1RBUkJPQVJEX0NPTlRFTlRfTEFZRVJTV0lUQ0hFUjogJ2M0Zy1jb250ZW50LWxheWVyc3dpdGNoZXInLFxuICAgIFRPT0xUSVBfUE9QVVA6ICdjNGctdG9vbHRpcC1wb3B1cCcsXG4gICAgWk9PTV9MRVZFTDogJ2M0Zy16b29tLWxldmVsJyxcblxuICAgIFJPVVRFUl9JTlBVVF9XUkFQUEVSOiAnYzRnLXJvdXRlci1pbnB1dC13cmFwcGVyJyxcbiAgICBST1VURVJfUFJPRklMRV9XUkFQUEVSOiAnYzRnLXJvdXRlci1wcm9maWxlLXdyYXBwZXInLFxuICAgIFJPVVRFUl9JTlBVVF9GUk9NOiAnYzRnLXJvdXRlci1pbnB1dC1mcm9tJyxcbiAgICBST1VURVJfSU5QVVRfVE86ICdjNGctcm91dGVyLWlucHV0LXRvJyxcbiAgICBST1VURVJfSU5QVVRfQ0xFQVI6ICdjNGctcm91dGVyLWlucHV0LWNsZWFyJyxcbiAgICBST1VURVJfQlVUVE9OQkFSOiAnYzRnLXJvdXRlci1idXR0b25iYXInLFxuICAgIFJPVVRFUl9BVFRSSUJVVElPTl9XUkFQUEVSOiAnYzRnLXJvdXRlci1hdHRyaWJ1dGlvbi13cmFwcGVyJyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX1dSQVBQRVI6ICdjNGctcm91dGVyLWluc3RydWN0aW9ucy13cmFwcGVyJyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX0hFQURFUjogJ2M0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb25zLWhlYWRlcicsXG5cbiAgICBST1VURVJfU1dJVENIOiAnYzRnLXJvdXRlci1zd2l0Y2gnLFxuICAgIFJPVVRFUl9PVkVSOiAnYzRnLXJvdXRlci1vdmVyJyxcbiAgICBST1VURVJfUFJJTlQ6ICdjNGctcm91dGVyLXByaW50JyxcblxuICAgIFJPVVRFUl9QUk9GSUxFX0NBUjogJ2M0Zy1yb3V0ZXItcHJvZmlsZS1jYXInLFxuICAgIFJPVVRFUl9QUk9GSUxFX0hHVjogJ2M0Zy1yb3V0ZXItcHJvZmlsZS1oZ3YnLFxuICAgIFJPVVRFUl9QUk9GSUxFX0JJS0U6ICdjNGctcm91dGVyLXByb2ZpbGUtYmlrZScsXG4gICAgUk9VVEVSX1BST0ZJTEVfRk9PVDogJ2M0Zy1yb3V0ZXItcHJvZmlsZS1mb290JyxcbiAgICBST1VURVJfUFJPRklMRV9XSEVFTENIQUlSOiAnYzRnLXJvdXRlci1wcm9maWxlLXdoZWVsY2hhaXInLFxuXG5cblxuICAgIFJPVVRFUl9JTlNUUlVDVElPTlNfVEFCTEU6ICdjNGctcm91dGVyLWluc3RydWN0aW9uLXRhYmxlJyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU06ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW0nLFxuICAgIFJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9PREQ6ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW0tLW9kZCcsXG4gICAgUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0VWRU46ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW0tLWV2ZW4nLFxuICAgIFJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT046ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW1fZGlyZWN0aW9uJyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0lDT046ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW1fZGlyZWN0aW9uLWljb24nLFxuICAgIFJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT05fVEVYVDogJ2M0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb24taXRlbV90ZXh0JyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0RJU1RBTkNFOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi1pdGVtX2Rpc3RhbmNlJyxcblxuICAgIE9MX0NPTlRST0w6ICdvbC1jb250cm9sJyxcbiAgICBPTF9VTlNFTEVDVEFCTEU6ICdvbC11bnNlbGVjdGFibGUnLFxuXG4gICAgT0xfT1ZFUkxBWUNPTlRBSU5FUjogJ29sLW92ZXJsYXljb250YWluZXInLFxuICAgIE9MX09WRVJMQVlDT05UQUlORVJfU0U6ICdvbC1vdmVybGF5Y29udGFpbmVyLXN0b3BldmVudCcsXG4gICAgT0xfVklFV1BPUlQ6ICdvbC12aWV3cG9ydCcsXG4gICAgT0xfWk9PTTogJ29sLXpvb20nLFxuICAgIE9MX1pPT01fSU46ICdvbC16b29tLWluJyxcbiAgICBPTF9aT09NX0VYVDogJ29sLXpvb20tZXh0ZW50JyxcbiAgICBPTF9aT09NX0hPTUU6ICdvbC16b29tLWhvbWUnLFxuICAgIE9MX1pPT01fUE9TOiAnb2wtem9vbS1wb3NpdGlvbicsXG4gICAgT0xfWk9PTV9XSVRIX0VYVDogJ29sLXpvb20td2l0aC1leHRlbnQnLFxuICAgIE9MX1pPT01fV0lUSF9IT01FOiAnb2wtem9vbS13aXRoLWhvbWUnLFxuICAgIE9MX1pPT01fV0lUSF9QT1M6ICdvbC16b29tLXdpdGgtcG9zaXRpb24nLFxuICAgIE9MX1pPT01fU0xJREVSOiAnb2wtem9vbS1zbGlkZXInLFxuICAgIE9MX1pPT01fV0lUSF9TTElERVI6ICdvbC16b29tLXdpdGgtc2xpZGVyJyxcblxuICAgIE5PTkU6ICcnIC8vIGxhc3QgbGluZVxuICB9KTsgLy8gZW5kIG9mIFwiY3NzIGNvbnN0YW50c1wiIC0tLVxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBjc3NDb25zdGFudHMgPSB0aGlzLmM0Zy5tYXBzLmNvbnN0YW50LmNzcztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnN0YW50LmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuXG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQ29udHJvbCB0byB0b2dnbGUgYSBncmlkIG9uIHRoZSBtYXAuXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyAge29sLmNvbnRyb2wuQ29udHJvbH1cbiAgICpcbiAgICogQHBhcmFtICAgIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRfb3B0aW9ucyAgKm9wdGlvbmFsKiBjb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLkdyaWQgPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIGVsZW1lbnQsXG4gICAgICAgIGJ1dHRvbjtcblxuICAgIHZhciBvYmpHcmlkID0gbmV3IG9sLkdyYXRpY3VsZSh7XG4gICAgICAgIC8qXG4gICAgICAgIHN0cm9rZVN0eWxlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgIHdpZHRoOiAyLFxuICAgICAgICAgICAgbGluZURhc2g6IFswLjUsIDRdXG4gICAgICAgIH0pLCovXG4gICAgICAgIHNob3dMYWJlbHM6IHRydWVcbiAgICB9KTtcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5HUkFUSUNVTEUsXG4gICAgICBzd2l0Y2hhYmxlOiB0cnVlLFxuICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9HUklELFxuICAgICAgbGFiZWw6ICcjJyxcbiAgICAgIGRpc2FibGVMYWJlbDogJ1tdJ1xuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgLy8gQFRPRE8gbW92ZSBmdW5jdGlvbnMgdG8gcHJvdG90eXBlP1xuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gdG8gZW5hYmxlIHRoZSBncmlkXG4gICAgdmFyIGVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG9iakdyaWQuc2V0TWFwKHNlbGYuZ2V0TWFwKCkpO1xuICAgICAgJChlbGVtZW50KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuRU5BQkxFRCk7XG4gICAgICAvLyBpZiAob3B0aW9ucy5jYWNoaW5nKSB7XG4gICAgICAvLyAgICAgYzRnLm1hcHMudXRpbHMuc3RvcmVWYWx1ZSgnZ3JpZCcsICcxJyk7XG4gICAgICAvLyB9XG4gICAgfTtcblxuICAgIC8vIGZ1bmN0aW9uIHRvIGRpc2FibGUgdGhlIGdyaWRcbiAgICB2YXIgZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG9iakdyaWQuc2V0TWFwKG51bGwpO1xuICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuRU5BQkxFRCk7XG4gICAgICAvLyBpZiAob3B0aW9ucy5jYWNoaW5nKSB7XG4gICAgICAvLyAgICAgYzRnLm1hcHMudXRpbHMuc3RvcmVWYWx1ZSgnZ3JpZCcsICcwJyk7XG4gICAgICAvLyB9XG4gICAgfTtcblxuICAgIC8vIGZ1bmN0aW9uIHRvIHRvZ2dsZSB0aGUgZ3JpZFxuICAgIHZhciB0b2dnbGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgLy8gbG9vc2UgZm9jdXMsIG90aGVyd2lzZSBpdCBsb29rcyBtZXNzeVxuICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICBpZiAob2JqR3JpZC5nZXRNYXAoKSkge1xuICAgICAgICBkaXNhYmxlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmFibGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gd3JhcHBlciBkaXZcbiAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSBvcHRpb25zLmNsYXNzTmFtZSArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEUgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfQ09OVFJPTDtcblxuICAgIGlmIChvcHRpb25zLnN3aXRjaGFibGUpIHtcbiAgICAgIC8vIGJ1dHRvblxuICAgICAgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b24udGl0bGUgPSBvcHRpb25zLnRpcExhYmVsO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChidXR0b24pO1xuXG4gICAgICAvLyBzZXQgb25DbGljayB0byB0aGUgdG9nZ2xlLWZ1bmN0aW9uXG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGUsIGZhbHNlKTtcbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdG9nZ2xlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gaW5oZXJpdGFuY2Utc3R1ZmZcbiAgICBvbC5jb250cm9sLkNvbnRyb2wuY2FsbCh0aGlzLCB7XG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgdGFyZ2V0OiBvcHRpb25zLnRhcmdldFxuICAgIH0pO1xuXG4gICAgLy8gaWYgKG9wdGlvbnMuY2FjaGluZyAmJiAoYzRnLm1hcHMudXRpbHMuZ2V0VmFsdWUoJ2dyaWQnKSA9PSAnMScpKSB7XG4gICAgLy8gICAgIG9iakdyaWQuc2V0TWFwKHNlbGYuZ2V0TWFwKCkpO1xuICAgIC8vICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5FTkFCTEVEKTtcbiAgICAvLyB9XG5cbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5HcmlkLCBvbC5jb250cm9sLkNvbnRyb2wpO1xuXG5cbiAgLypcbiAgICogQWRkIG1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuR3JpZC5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLkdyaWQucHJvdG90eXBlLCB7XG5cbiAgICAvLyBub3RoaW5nIHRvIGFkZCBoZXJlXG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCIgLS0tXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIEdyaWQgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuR3JpZDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtZ3JpZC5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBhIG92ZXJ2aWV3bWFwIG9uIHRoZSBtYXAuXG4gICAqICAgVGhpcyBjbGFzcyB3cmFwcyB0aGUgb3ZtIGEgYml0IGRpZmZlcmVudGx5IHRoYW5cbiAgICogICB0aGUgc3RhbmRhcmQgb2wtb3ZlcnZpZW1hcCwgdG8gYWxsb3cgcHJvcGVyIGNzcy10cmFuc2l0aW9ucy5cbiAgICpcbiAgICogICBOb3QgY2xlYW4sIGJ1dCB1bmlxdWUgOylcbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzICB7b2wuY29udHJvbC5Db250cm9sfVxuICAgKlxuICAgKiBAcGFyYW0gICAge09iamVjdH0gICAgICAgICAgICAgIG9wdF9vcHRpb25zICAqb3B0aW9uYWwqIGNvbnRyb2wgb3B0aW9ucy5cbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuT3ZlcnZpZXdNYXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgdmFyIGVsZW1lbnQsXG4gICAgICAgIHRyaWdnZXIsXG4gICAgICAgIHRyaWdnZXJJY29uLFxuICAgICAgICBvdm07XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9PVkVSVklFV01BUCxcbiAgICAgIGxheWVyczogW25ldyBvbC5sYXllci5UaWxlKHtzb3VyY2U6IG5ldyBvbC5zb3VyY2UuT1NNKCl9KV1cbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5PTF9DT05UUk9MICsgJyAnICsgY3NzQ29uc3RhbnRzLk9WRVJWSUVXTUFQICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcbiAgICBpZiAob3B0aW9ucy5jb2xsYXBzZWQpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9ICcgJyArIGNzc0NvbnN0YW50cy5DTE9TRTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5jbGFzc05hbWUgKz0gJyAnICsgY3NzQ29uc3RhbnRzLk9QRU47XG4gICAgfVxuICAgIG9wdGlvbnMudGFyZ2V0LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgdHJpZ2dlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIHRyaWdnZXIudGl0bGUgPSBvcHRpb25zLnRpcExhYmVsO1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodHJpZ2dlcik7XG5cbiAgICB0cmlnZ2VySWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICB0cmlnZ2VySWNvbi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuSUNPTjtcbiAgICB0cmlnZ2VyLmFwcGVuZENoaWxkKHRyaWdnZXJJY29uKTtcblxuICAgICQodHJpZ2dlcikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQoZWxlbWVudCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKSkge1xuICAgICAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSlcbiAgICAgICAgICAgIC5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSlcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmJsdXIoKTtcbiAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgb3ZtID0gbmV3IG9sLmNvbnRyb2wuT3ZlcnZpZXdNYXAoe1xuICAgICAgY29sbGFwc2libGU6IGZhbHNlLFxuICAgICAgY29sbGFwc2VkOiBmYWxzZSxcbiAgICAgIHRhcmdldDogZWxlbWVudCxcbiAgICAgIGxheWVyczogb3B0aW9ucy5sYXllcnNcbiAgICB9KTtcblxuICAgIHJldHVybiBvdm07XG4gIH07XG5cblxuICAvKlxuICAgKiBBZGQgbWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5PdmVydmlld01hcC5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLk92ZXJ2aWV3TWFwLnByb3RvdHlwZSwge1xuXG4gICAgLy8gbm90aGluZyB0byBhZGQgaGVyZVxuXG4gIH0pOyAvLyBlbmQgb2YgXCJhZGQgbWV0aG9kc1wiIC0tLVxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBPdmVydmlld01hcCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5PdmVydmlld01hcDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtb3ZlcnZpZXdtYXAuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnRyb2wgdG8gZ2VuZXJhdGUgYSBwZXJtYWxpbmsgdG8gdGhlIGN1cnJlbnQgTWFwIHN0YXRlLlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgIHtvbC5jb250cm9sLkNvbnRyb2x9XG4gICAqXG4gICAqIEBwYXJhbSAgICB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9ucyAgY29udHJvbCBvcHRpb25zLlxuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5QZXJtYWxpbmsgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgdmFyIHNlbGYsXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgY29weUJ1dHRvbixcbiAgICAgICAgcmVmcmVzaEJ1dHRvbjtcblxuICAgIHRoaXMuY29uZmlnID0gb3B0aW9ucyB8fCB7fTtcbiAgICBzZWxmID0gdGhpcztcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIHRoaXMuY29uZmlnID0gJC5leHRlbmQoe1xuICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuUEVSTUFMSU5LLFxuICAgICAgLy8gbWFwQ29udHJvbGxlcjogdW5kZWZpbmVkLFxuICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9QRVJNQUxJTkssXG4gICAgICBnZXRQYXJhbWV0ZXI6IGZhbHNlLFxuICAgICAgbGFiZWw6ICdQJyxcbiAgICAgIHRhcmdldDogdW5kZWZpbmVkXG4gICAgfSwgdGhpcy5jb25maWcpO1xuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5tYXBDb250cm9sbGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gd3JhcHBlciBkaXZcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gdGhpcy5jb25maWcuY2xhc3NOYW1lICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRSArICcgJyArIGNzc0NvbnN0YW50cy5PTF9DT05UUk9MO1xuXG4gICAgLy8gYnV0dG9uXG4gICAgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgYnV0dG9uLnRpdGxlID0gdGhpcy5jb25maWcudGlwTGFiZWw7XG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGJ1dHRvbik7XG5cbiAgICAvLyBzZXQgb25DbGljayB0byB0aGUgdG9nZ2xlLWZ1bmN0aW9uXG4gICAgLy8gYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy50b2dnbGUsIGZhbHNlKTtcbiAgICAvLyBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMudG9nZ2xlLCBmYWxzZSk7XG4gICAgJChidXR0b24pLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgfSBjYXRjaCAoaWdub3JlKSB7XG5cbiAgICAgIH1cbiAgICAgIHNlbGYudG9nZ2xlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBwb3B1cFxuICAgIC8vIHdpbGwgYmUgYXR0YWNoZWQgd2hlbiBvcGVuZWQgdGhlIGZpcnN0IHRpbWVcbiAgICAvLyB0byBtYWtlIHN1cmUgaXRzIHJlYWxseSB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSBjb250YWluZXJcbiAgICB0aGlzLnBvcHVwQXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLnBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5wb3B1cC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTCArICcgJyArIGNzc0NvbnN0YW50cy5QRVJNQUxJTktfUE9QVVAgKyAnICcgKyBjc3NDb25zdGFudHMuQ0xPU0U7XG5cbiAgICAvLyB0ZXh0ZmllbGRcbiAgICB0aGlzLnRleHRmaWVsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgdGhpcy50ZXh0ZmllbGQudHlwZSA9ICd0ZXh0JztcbiAgICB0aGlzLnBvcHVwLmFwcGVuZENoaWxkKHRoaXMudGV4dGZpZWxkKTtcblxuICAgIC8vIGNvcHkgYnV0dG9uXG4gICAgY29weUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGNvcHlCdXR0b24uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPUFkgKyAnICcgKyBjc3NDb25zdGFudHMuSUNPTjtcbiAgICBjb3B5QnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5DT1BZX1RPX0NMSVBCT0FSRDtcbiAgICBjb3B5QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1jbGlwYm9hcmQtdGFyZ2V0JywgJy4nICsgY3NzQ29uc3RhbnRzLlBFUk1BTElOS19QT1BVUCArICcgPiBpbnB1dFt0eXBlPVwidGV4dFwiXScpO1xuICAgIHRoaXMucG9wdXAuYXBwZW5kQ2hpbGQoY29weUJ1dHRvbik7XG4gICAgbmV3IENsaXBib2FyZChjb3B5QnV0dG9uKTtcblxuICAgIC8vIHJlZnJlc2ggYnV0dG9uXG4gICAgcmVmcmVzaEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIHJlZnJlc2hCdXR0b24uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJFRlJFU0ggKyAnICcgKyBjc3NDb25zdGFudHMuSUNPTjtcbiAgICByZWZyZXNoQnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5SRUZSRVNIO1xuICAgICQocmVmcmVzaEJ1dHRvbikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5nZW5lcmF0ZUxpbmtGcm9tQ3VycmVudFN0YXRlKHt0YXJnZXQ6IHNlbGYudGV4dGZpZWxkfSk7XG4gICAgfSk7XG4gICAgdGhpcy5wb3B1cC5hcHBlbmRDaGlsZChyZWZyZXNoQnV0dG9uKTtcblxuICAgIC8vIGluaGVyaXRhbmNlLXN0dWZmXG4gICAgb2wuY29udHJvbC5Db250cm9sLmNhbGwodGhpcywge1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgdGFyZ2V0OiB0aGlzLmNvbmZpZy50YXJnZXRcbiAgICB9KTtcbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5QZXJtYWxpbmssIG9sLmNvbnRyb2wuQ29udHJvbCk7XG5cblxuICAvKlxuICAgKiBBZGQgbWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5QZXJtYWxpbmsucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5QZXJtYWxpbmsucHJvdG90eXBlLCB7XG5cbiAgICBvcGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMucG9wdXBBdHRhY2hlZCkge1xuICAgICAgICAkKHRoaXMucG9wdXApLnNsaWRlRG93bigxKTtcbiAgICAgICAgdGhpcy5jb25maWcudGFyZ2V0LmFwcGVuZENoaWxkKHRoaXMucG9wdXApO1xuICAgICAgICB0aGlzLnBvcHVwQXR0YWNoZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgJCh0aGlzLnBvcHVwKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICQodGhpcy5lbGVtZW50KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICB0aGlzLmdlbmVyYXRlTGlua0Zyb21DdXJyZW50U3RhdGUoe3RhcmdldDogdGhpcy50ZXh0ZmllbGR9KTtcbiAgICB9LFxuXG4gICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQodGhpcy5wb3B1cCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSk7XG4gICAgICAkKHRoaXMuZWxlbWVudCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pO1xuICAgIH0sXG5cbiAgICB0b2dnbGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgkKHRoaXMucG9wdXApLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGdlbmVyYXRlTGlua0Zyb21DdXJyZW50U3RhdGU6IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuICAgICAgdmFyIG9wdGlvbnMsXG4gICAgICAgICAgcHJveHksXG4gICAgICAgICAgbWFwVmlldyxcbiAgICAgICAgICBwYXJhbWV0ZXJzLFxuICAgICAgICAgIGxpbmssXG4gICAgICAgICAgY2VudGVyLFxuICAgICAgICAgIGJhc2VMYXllcklkeCxcbiAgICAgICAgICBsYXllcklkeCxcbiAgICAgICAgICBsYXllcnM7XG5cbiAgICAgIG9wdGlvbnMgPSBvcHRfb3B0aW9ucyB8fCB7fTtcbiAgICAgIGlmICghb3B0aW9ucy5wYXJhbUNvdW50IHx8ICEob3B0aW9ucy5wYXJhbUNvdW50ID09PSA2IHx8IG9wdGlvbnMucGFyYW1Db3VudCA9PT0gMiB8fCBvcHRpb25zLnBhcmFtQ291bnQgPT09IDEpKSB7XG4gICAgICAgIG9wdGlvbnMucGFyYW1Db3VudCA9IDY7XG4gICAgICB9XG5cbiAgICAgIHBhcmFtZXRlcnMgPSBbXTtcbiAgICAgIG1hcFZpZXcgPSB0aGlzLmNvbmZpZy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCk7XG4gICAgICBwcm94eSA9IHRoaXMuY29uZmlnLm1hcENvbnRyb2xsZXIucHJveHk7XG5cbiAgICAgIGNlbnRlciA9IG1hcFZpZXcuZ2V0Q2VudGVyKCk7XG4gICAgICBjZW50ZXIgPSBvbC5wcm9qLnRyYW5zZm9ybShbY2VudGVyWzBdLCBjZW50ZXJbMV1dLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpO1xuXG4gICAgICBwYXJhbWV0ZXJzLnB1c2goK2NlbnRlclswXS50b0ZpeGVkKDUpKTtcbiAgICAgIHBhcmFtZXRlcnMucHVzaCgrY2VudGVyWzFdLnRvRml4ZWQoNSkpO1xuICAgICAgcGFyYW1ldGVycy5wdXNoKG1hcFZpZXcuZ2V0Wm9vbSgpKTtcbiAgICAgIHBhcmFtZXRlcnMucHVzaCgrbWFwVmlldy5nZXRSb3RhdGlvbigpLnRvRml4ZWQoMikpO1xuXG4gICAgICAvLyBmaW5kIGFjdGl2ZSBiYXNlbGF5ZXJcbiAgICAgIGlmIChwcm94eS5hY3RpdmVCYXNlbGF5ZXJJZCkge1xuICAgICAgICBwYXJhbWV0ZXJzLnB1c2gocHJveHkuYWN0aXZlQmFzZWxheWVySWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1ldGVycy5wdXNoKDApO1xuICAgICAgfVxuXG4gICAgICAvLyBmaW5kIGFjdGl2ZSBsYXllcnNcbiAgICAgIGxheWVycyA9IFtdO1xuICAgICAgZm9yIChsYXllcklkeCBpbiBwcm94eS5hY3RpdmVMYXllcklkcykge1xuICAgICAgICBpZiAocHJveHkuYWN0aXZlTGF5ZXJJZHMuaGFzT3duUHJvcGVydHkobGF5ZXJJZHgpKSB7XG4gICAgICAgICAgbGF5ZXJzLnB1c2gocGFyc2VJbnQobGF5ZXJJZHgsIDEwKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGRlbHRhLWRlY29kZSBpZiB0aGVyZSBhcmUgbW9yZSB0aGFuIG9uZSBsYXllclxuICAgICAgaWYgKGxheWVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGxheWVycyA9IHV0aWxzLmRlbHRhRW5jb2RlKGxheWVycyk7XG4gICAgICAgIGxheWVycyA9IGxheWVycy5qb2luKCc6Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsYXllcnMgPSBsYXllcnNbMF0gfHwgJzAnO1xuICAgICAgfVxuICAgICAgcGFyYW1ldGVycy5wdXNoKGxheWVycyk7XG4gICAgICBwYXJhbWV0ZXJzID0gcGFyYW1ldGVycy5qb2luKCcvJyk7XG5cbiAgICAgIC8vIGJ1aWxkIGxpbmtcbiAgICAgIGxpbmsgPSB1dGlscy5zZXRVcmxQYXJhbShwYXJhbWV0ZXJzLCB0aGlzLmNvbmZpZy5nZXRQYXJhbWV0ZXIpO1xuXG4gICAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgb3B0aW9ucy50YXJnZXQudmFsdWUgPSBsaW5rO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxpbms7XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIGdlbmVyYXRlTGlua0Zyb21DdXJyZW50U3RhdGVcblxuICAgIGdlbmVyYXRlTGluazogZnVuY3Rpb24gKHBhcmFtZXRlcnMpIHtcbiAgICAgIGlmICghcGFyYW1ldGVycyB8fCAhKHBhcmFtZXRlcnMubGVuZ3RoID09PSA2IHx8IHBhcmFtZXRlcnMubGVuZ3RoID09PSAyIHx8IHBhcmFtZXRlcnMubGVuZ3RoID09PSAxKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIGJ1aWxkIGFuZCByZXR1cm4gbGlua1xuICAgICAgcmV0dXJuIHV0aWxzLnNldFVybFBhcmFtKHBhcmFtZXRlcnMuam9pbignLycpLCB0aGlzLmNvbmZpZy5nZXRQYXJhbWV0ZXIpO1xuICAgIH0gLy8gZW5kIG9mIGdlbmVyYXRlTGlua1xuXG4gIH0pOyAvLyBlbmQgb2YgXCJhZGQgbWV0aG9kc1wiIC0tLVxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBQZXJtYWxpbmsgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuUGVybWFsaW5rO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wZXJtYWxpbmsuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7U2lkZWJvYXJkfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXNpZGVib2FyZFwiO1xuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAZXh0ZW5kcyB7YzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmR9XG4gICAqXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gIG1hcENvbnRyb2xsZXIgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICB7W3R5cGVdfSAgY29uZmlnICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5BY2NvdW50ID0gZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICAvLyBleHRlbmQgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLkFDQ09VTlQsXG4gICAgICBuYW1lOiAnYWNjb3VudCcsXG4gICAgICBoZWFkbGluZTogbGFuZ0NvbnN0YW50cy5BQ0NPVU5ULFxuICAgICAgY3JlYXRlOiB0cnVlLFxuICAgICAgbWFwQ29udHJvbGxlcjogdW5kZWZpbmVkLFxuICAgICAgZGlyZWN0aW9uOiAnbGVmdCdcbiAgICB9LCBvcHRfb3B0aW9ucyk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5tYWluU2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgLy8gY2FsbCBwYXJlbnQgY29uc3RydWN0b3JcbiAgICBTaWRlYm9hcmQuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMpO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLkFjY291bnQsIFNpZGVib2FyZCk7XG5cbiAgLyoqXG4gICAqIE1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuQWNjb3VudC5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLkFjY291bnQucHJvdG90eXBlLCB7XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlZCB3aGVuIHRoZSBwYW5lbCB3aWxsIGJlIG9wZW5lZCBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gICAgICogW2luaXQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gIFJldHVybnMgfHRydWV8IG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgIHRoaXMudmlld0FjY291bnQgPSB0aGlzLmFkZEFjY291bnRWaWV3KCk7XG4gICAgICB0aGlzLnZpZXdBY2NvdW50LmFjdGl2YXRlKCk7XG5cbiAgICAgIHZhciBwcm94eSA9IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5O1xuICAgICAgdmFyIG1hcCA9IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcDtcblxuICAgICAgdGhpcy5tYWluU2VjdGlvbkFjY291bnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICB0aGlzLm1haW5TZWN0aW9uQWNjb3VudC5pbm5lckhUTUwgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmFjY291bnQ7XG4gICAgICB0aGlzLm1haW5TZWN0aW9uLmFwcGVuZENoaWxkKHRoaXMubWFpblNlY3Rpb25BY2NvdW50KTtcbiAgICAgIHRoaXMuY29udGVudENvbnRhaW5lci5zZXRFbGVtZW50KHRoaXMubWFpblNlY3Rpb24pO1xuXG4gICAgICB0aGlzLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgLy8gZW5kIG9mIFwiaW5pdCgpXCJcblxuXG4gICAgYWRkQWNjb3VudFZpZXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhY2NvdW50VmlldztcblxuICAgICAgICBhY2NvdW50VmlldyA9IHRoaXMuYWRkVmlldyh7XG4gICAgICAgIG5hbWU6ICdhY2NvdW50JyxcbiAgICAgICAgdHJpZ2dlckNvbmZpZzoge1xuICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkFDQ09VTlRfVklFV19UUklHR0VSLFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLkFDQ09VTlRfVklFV19UUklHR0VSLFxuICAgICAgICAgIHdpdGhIZWFkbGluZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMuY29udGVudENvbnRhaW5lciwgZWxlbWVudDogdGhpcy5tYWluU2VjdGlvbn0sXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMudG9wVG9vbGJhciwgZWxlbWVudDogdGhpcy52aWV3VHJpZ2dlckJhcn1cbiAgICAgICAgXVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBhY2NvdW50VmlldztcbiAgICB9LCAvLyBlbmQgb2YgXCJhZGRBY2NvdW50VmlldygpXCJcblxuICAgIGFkZEFjY291bnQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBUUklHR0VSX0FDQ09VTlQsXG4gICAgICAgICAgdmlld0FjY291bnQsXG4gICAgICAgICAgc291cmNlLFxuICAgICAgICAgIGludGVyYWN0aW9uLFxuICAgICAgICAgIGZlYXR1cmVzO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgLy9UUklHR0VSX0FDQ09VTlQgPSAnQUNDT1VOVF9WSUVXX1RSSUdHRVJfJyArIG9wdGlvbnMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICB2aWV3QWNjb3VudCA9IHNlbGYuYWRkQWNjb3VudCh7XG4gICAgICAgIG5hbWU6ICdBY2NvdW50JyxcbiAgICAgICAgdHJpZ2dlckNvbmZpZzoge1xuICAgICAgICAgIHRpcExhYmVsOiAnQWNjb3VudCcsLy9sYW5nQ29uc3RhbnRzW1RSSUdHRVJfRFJBV10sXG4gICAgICAgICAgY2xhc3NOYW1lOiAnYzRnX2FjY291bnRfdHJpZ2dlcicsLy9jc3NDb25zdGFudHNbVFJJR0dFUl9EUkFXXVxuICAgICAgICAgIHdpdGhIZWFkbGluZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHNlbGYudG9wVG9vbGJhciwgZWxlbWVudDogc2VsZi52aWV3VHJpZ2dlckJhcn1cbiAgICAgICAgXSxcbiAgICAgICAgaW5pdEZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAvLyBTaG93IGxvYWRpbmcgYW5pbWF0aW9uXG4gICAgICAgICAgc2VsZi5zcGlubmVyLnNob3coKTtcblxuICAgICAgICAgIC8vIHByaW50RnVuY3Rpb24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAvLyAgIHZhciBpbmZvQnV0dG9uLFxuICAgICAgICAgIC8vICAgICAgIGZlYXR1cmVHZW9tZXRyeSxcbiAgICAgICAgICAvLyAgICAgICB0cmFuc2xhdGVJbnRlcmFjdGlvbixcbiAgICAgICAgICAvLyAgICAgICBtb2RpZnlJbnRlcmFjdGlvbixcbiAgICAgICAgICAvLyAgICAgICBtb2RpZnlCdXR0b24sXG4gICAgICAgICAgLy8gICAgICAgYXBwbHlCdXR0b247XG4gICAgICAgICAgLy9cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vICAgICBpbmZvQnV0dG9uID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gICAvLyBhZGQgYXBwbHkgYnV0dG9uXG4gICAgICAgICAgLy8gICBhcHBseUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgIC8vICAgYXBwbHlCdXR0b24uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyAnICcgKyBjc3NDb25zdGFudHMuRURJVE9SX0ZFQVRVUkVfQVBQTFk7XG4gICAgICAgICAgLy8gICBhcHBseUJ1dHRvbi50aXRsZSA9IGxhbmdDb25zdGFudHMuRURJVE9SX0ZFQVRVUkVfQVBQTFk7XG4gICAgICAgICAgLy8gICBhcHBseUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2ZlYXRfaWQnLCBpKTtcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIH07IC8vIGVuZCBvZiBcIm1vZGlmeUZlYXR1cmVGdW5jdGlvbigpXCJcblxuICAgICAgICAgIGZlYXR1cmVzID0gbmV3IG9sLkNvbGxlY3Rpb24oKTtcblxuICAgICAgICAgIHNlbGYuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2YXRlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgfSxcbiAgICAgICAgZGVhY3RpdmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdmlld0FjY291bnQ7XG4gICAgfSAvLyBlbmQgb2YgXCJhZGRBY2NvdW50KClcIlxuXG4gIH0pO1xuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IGxldCBBY2NvdW50ID0gdGhpcy5jNGcubWFwcy5jb250cm9sLkFjY291bnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLWFjY291bnQuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtTaWRlYm9hcmR9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc2lkZWJvYXJkXCI7XG5pbXBvcnQge1Rvb2x0aXBQb3BVcH0gZnJvbSBcIi4vYzRnLW1hcHMtbWlzYy10b29sdGlwcG9wdXBcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZCB7YzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmR9XG4gICAqXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gIG1hcENvbnRyb2xsZXIgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuRWRpdG9yID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgIC8vIGV4dGVuZCBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgbmFtZTogJ2VkaXRvcicsXG4gICAgICB0eXBlOiAnZnJvbnRlbmQnLFxuICAgICAgZGF0YUZpZWxkOiBmYWxzZSxcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgIGRyYXdNb2RlczogW1xuICAgICAgICAnUG9pbnQnLFxuICAgICAgICAnTGluZScsXG4gICAgICAgICdQb2x5Z29uJyxcbiAgICAgICAgJ0NpcmNsZScsXG4gICAgICAgICdGcmVlaGFuZCdcbiAgICAgIF0sXG4gICAgICBkaXJlY3Rpb246ICdsZWZ0JyxcbiAgICAgIGhlYWRsaW5lOiBsYW5nQ29uc3RhbnRzLkVESVRPUlxuICAgICAgLy8gaW5pdE1vZGU6ICdzZWxlY3QnXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0NvdWwgbm90IGluaXRpYWxsaXplIEVkaXRvciwgd2l0aG91dCB2YWxpZCBtYXBDb250cm9sbGVyLicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vYzRnLm1hcHMuaG9vay5lZGl0b3JfbG9hZFRhYnMgPSBbXTtcbiAgICAvL2M0Zy5tYXBzLmhvb2suZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkID0gW107XG4gICAgdGhpcy50YWJzID0gW107XG4gICAgLy8gQFRPRE9cbiAgICAvLyB0aGlzLnR5cGVMYXllciA9IHVuZGVmaW5lZDtcbiAgICAvLyB0aGlzLmFjdGl2ZU1vZGUgPSB0aGlzLm9wdGlvbnMuaW5pdE1vZGU7XG4gICAgLy8gdGhpcy52ZWN0b3JTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3RvcigpO1xuICAgIC8vIHRoaXMuYWN0aXZlRHJhd0ludGVyYWN0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFzdERyYXdJbnRlcmFjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnByb3h5ID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmRhdGFGaWVsZCAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmRhdGFGaWVsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5kYXRhRmllbGQgPSAkKHRoaXMub3B0aW9ucy5kYXRhRmllbGQpIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGNhbGwgcGFyZW50IGNvbnN0cnVjdG9yXG4gICAgU2lkZWJvYXJkLmNhbGwodGhpcywgdGhpcy5vcHRpb25zKTtcbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5FZGl0b3IsIFNpZGVib2FyZCk7XG5cbiAgLyoqXG4gICAqIE1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuRWRpdG9yLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuRWRpdG9yLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZWQgd2hlbiB0aGUgZWRpdG9yIHdpbGwgYmUgb3BlbmVkIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICAgKiBbaW5pdCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgUmV0dXJucyB8dHJ1ZXwgb24gc3VjY2Vzc1xuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uIChvcHRfZXh0ZXJuYWxpbml0KSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBsYXllclN0eWxlRnVuY3Rpb24sXG4gICAgICAgICAgdmlld1NlbGVjdDtcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICBsYXllclN0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbiAoZmVhdHVyZSwgcHJvamVjdGlvbikge1xuICAgICAgICB2YXIgc3R5bGVJZDtcblxuICAgICAgICBpZiAoZmVhdHVyZSAmJiB0eXBlb2YgZmVhdHVyZS5nZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBnZXQgdGhlIHN0eWxlSWQgb2YgdGhlIGN1cnJlbnQgZmVhdHVyZVxuICAgICAgICAgIHN0eWxlSWQgPSBmZWF0dXJlLmdldCgnc3R5bGVJZCcpO1xuICAgICAgICAgIC8vIGFuZCBleGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBmdW5jdGlvblxuICAgICAgICAgIGlmIChzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKGZlYXR1cmUsIHByb2plY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICAvLyBBZGQgZWRpdG9yIGxheWVyc1xuICAgICAgdGhpcy5lZGl0UG9pbnRMYXllciA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe3NvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3IoKSwgc3R5bGU6IGxheWVyU3R5bGVGdW5jdGlvbn0pO1xuICAgICAgdGhpcy5lZGl0TGluZUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpLCBzdHlsZTogbGF5ZXJTdHlsZUZ1bmN0aW9ufSk7XG4gICAgICB0aGlzLmVkaXRQb2x5Z29uTGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yKHtzb3VyY2U6IG5ldyBvbC5zb3VyY2UuVmVjdG9yKCksIHN0eWxlOiBsYXllclN0eWxlRnVuY3Rpb259KTtcbiAgICAgIHRoaXMuZWRpdENpcmNsZUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpLCBzdHlsZTogbGF5ZXJTdHlsZUZ1bmN0aW9ufSk7XG4gICAgICB0aGlzLmVkaXRGcmVlaGFuZExheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpLCBzdHlsZTogbGF5ZXJTdHlsZUZ1bmN0aW9ufSk7XG5cbiAgICAgIHRoaXMuZWRpdExheWVyR3JvdXAgPSBuZXcgb2wubGF5ZXIuR3JvdXAoe1xuICAgICAgICBsYXllcnM6IG5ldyBvbC5Db2xsZWN0aW9uKFtcbiAgICAgICAgICB0aGlzLmVkaXRGcmVlaGFuZExheWVyLFxuICAgICAgICAgIHRoaXMuZWRpdENpcmNsZUxheWVyLFxuICAgICAgICAgIHRoaXMuZWRpdFBvbHlnb25MYXllcixcbiAgICAgICAgICB0aGlzLmVkaXRMaW5lTGF5ZXIsXG4gICAgICAgICAgdGhpcy5lZGl0UG9pbnRMYXllclxuICAgICAgICBdKSxcbiAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIodGhpcy5lZGl0TGF5ZXJHcm91cCk7XG5cbiAgICAgIC8vIEFkZCBhbmQgYWN0aXZhdGUgc2VsZWN0IHZpZXdcbiAgICAgIHRoaXMudGFicy5wdXNoKHRoaXMuYWRkU2VsZWN0VmlldygpKTtcbiAgICAgIHRoaXMudGFic1swXS5hY3RpdmF0ZSgpO1xuXG4gICAgICAvLyAgIEFKQVg6IGdldCBlZGl0b3IgY29uZmlnXG4gICAgICAkLmdldEpTT04oc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkuZWRpdG9yICsgJy8nICsgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5wcm9maWxlKVxuICAgICAgICAgIC8vIENyZWF0ZSB2aWV3cyBmb3IgZHJhdy1mZWF0dXJlcyB3aXRoIGF0IGxlYXN0IG9uZSBsb2NhdGlvbnN0eWxlXG4gICAgICAgICAgLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcblxuICAgICAgICAgICAgLy8gRHJhdy1wb2ludCB2aWV3XG4gICAgICAgICAgICBpZiAoZGF0YS5zdHlsZXNfcG9pbnQubGVuZ3RoICYmIGRhdGEuc3R5bGVzX3BvaW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgc2VsZi50YWJzLnB1c2goc2VsZi5hZGREcmF3Vmlldyh7dHlwZTogJ1BvaW50Jywgc3R5bGVJZHM6IGRhdGEuc3R5bGVzX3BvaW50fSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRHJhdy1saW5lIHZpZXdcbiAgICAgICAgICAgIGlmIChkYXRhLnN0eWxlc19saW5lLmxlbmd0aCAmJiBkYXRhLnN0eWxlc19saW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgc2VsZi50YWJzLnB1c2goc2VsZi5hZGREcmF3Vmlldyh7dHlwZTogJ0xpbmVTdHJpbmcnLCBzdHlsZUlkczogZGF0YS5zdHlsZXNfbGluZX0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERyYXctcG9seWdvbiB2aWV3XG4gICAgICAgICAgICBpZiAoZGF0YS5zdHlsZXNfcG9seWdvbi5sZW5ndGggJiYgZGF0YS5zdHlsZXNfcG9seWdvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHNlbGYudGFicy5wdXNoKHNlbGYuYWRkRHJhd1ZpZXcoe3R5cGU6ICdQb2x5Z29uJywgc3R5bGVJZHM6IGRhdGEuc3R5bGVzX3BvbHlnb259KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEcmF3LWNpcmNsZSB2aWV3XG4gICAgICAgICAgICBpZiAoZGF0YS5zdHlsZXNfY2lyY2xlLmxlbmd0aCAmJiBkYXRhLnN0eWxlc19jaXJjbGUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNlbGYudGFicy5wdXNoKHNlbGYuYWRkRHJhd1ZpZXcoe3R5cGU6ICdDaXJjbGUnLCBzdHlsZUlkczogZGF0YS5zdHlsZXNfY2lyY2xlfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRHJhdy1mcmVlaGFuZCB2aWV3XG4gICAgICAgICAgICBpZiAoZGF0YS5zdHlsZXNfZnJlZWhhbmQubGVuZ3RoICYmIGRhdGEuc3R5bGVzX2ZyZWVoYW5kLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzZWxmLnRhYnMucHVzaChzZWxmLmFkZERyYXdWaWV3KHt0eXBlOiAnRnJlZWhhbmQnLCBzdHlsZUlkczogZGF0YS5zdHlsZXNfZnJlZWhhbmR9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDYWxsIGhvb2sgZnVuY3Rpb24gZm9yIGR5bmFtaWNhbGx5IGFkZGVkIHRhYnNcbiAgICAgICAgICAgIGlmIChjNGcubWFwcy5ob29rICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGM0Zy5tYXBzLmhvb2suZWRpdG9yX2xvYWRUYWJzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhjNGcubWFwcy5ob29rLmVkaXRvcl9sb2FkVGFicywgc2VsZik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZhaWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQFRPRE8gZXJyb3ItbWVzc2FnZXNcbiAgICAgICAgICAgIC8vICAgMSkgVmlzaWJsZSBtZXNzYWdlIDQgdXNlcnMgKGkxOG4pXG4gICAgICAgICAgICAvLyAgIDIpIFRlY2huaWNhbCBjb25zb2xlLndhcm5cbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSB0cnlpbmcgdG8gbG9hZCB0aGUgZWRpdG9yIGNvbmZpZ3VyYXRpb24uLi4nKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxheWVycztcbiAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMudHlwZSA9PT0gJ2JhY2tlbmQnKSB7XG4gICAgICAgICAgICAgIC8vIGltcG9ydCBHZW9KU09OIHdoZW4gaW4gYmFja2VuZCBtb2RlXG4gICAgICAgICAgICAgIHNlbGYuaW1wb3J0R2VvSlNPTigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbG9hZCBzZXNzaW9uLWZlYXR1cmVzIHdoZW4gaW4gZnJvbnRlbmQgbW9kZVxuICAgICAgICAgICAgICBzZWxmLmxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFkZCBhdXRvc2F2ZSB0byB0aGUgbGF5ZXJzIHdoZW4gYSBmZWF0dXJlIGlzIGFkZGVkXG4gICAgICAgICAgICBsYXllcnMgPSBzZWxmLmVkaXRMYXllckdyb3VwLmdldExheWVycygpO1xuICAgICAgICAgICAgbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICBlbGVtZW50LmdldFNvdXJjZSgpLm9uKCdhZGRmZWF0dXJlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuc2F2ZSgpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vc2VsZi5lZGl0UG9pbnRMYXllci5nZXRTb3VyY2UoKS5vbignYWRkZmVhdHVyZScsIGZ1bmN0aW9uICgpIHtzZWxmLnNhdmUoKTsgfSk7XG4gICAgICAgICAgICAvL3NlbGYuZWRpdExpbmVMYXllci5nZXRTb3VyY2UoKS5vbignYWRkZmVhdHVyZScsIGZ1bmN0aW9uICgpIHtzZWxmLnNhdmUoKTsgfSk7XG4gICAgICAgICAgICAvL3NlbGYuZWRpdFBvbHlnb25MYXllci5nZXRTb3VyY2UoKS5vbignYWRkZmVhdHVyZScsIGZ1bmN0aW9uICgpIHtzZWxmLnNhdmUoKTsgfSk7XG4gICAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgaWYgKG9wdF9leHRlcm5hbGluaXQpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlZCBiZWZvcmUgZWRpdG9yIHdpbGwgYmUgY2xvc2VkXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHByZUNsb3NlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmVkaXRMYXllckdyb3VwLmdldFZpc2libGUoKSkge1xuICAgICAgICB0aGlzLmVkaXRMYXllckdyb3VwLnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlTGF5ZXIodGhpcy5lZGl0TGF5ZXJHcm91cCk7XG4gICAgICB9XG5cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZWQgYmVmb3JlIGVkaXRvciB3aWxsIGJlIG9wZW5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcHJlT3BlbkZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuZWRpdExheWVyR3JvdXAuZ2V0VmlzaWJsZSgpKSB7XG4gICAgICAgIHRoaXMuZWRpdExheWVyR3JvdXAuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKHRoaXMuZWRpdExheWVyR3JvdXApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGRTZWxlY3RWaWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBzZWxlY3RJbnRlcmFjdGlvbixcbiAgICAgICAgICBzZWxlY3RCb3hJbnRlcmFjdGlvbixcbiAgICAgICAgICBzZWxlY3RlZEZlYXR1cmVzLFxuICAgICAgICAgIHNlbGVjdENvbnRlbnRXcmFwcGVyLFxuICAgICAgICAgIHNlbGVjdENvbnRlbnRIZWFkbGluZSxcbiAgICAgICAgICBzZWxlY3RDb250ZW50LFxuICAgICAgICAgIHNlbGVjdENvbnRlbnRJbmZvLFxuICAgICAgICAgIHNlbGVjdFZpZXcsXG4gICAgICAgICAgZm5IYW5kbGVTZWxlY3Rpb247XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICBzZWxlY3RDb250ZW50V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICBzZWxlY3RDb250ZW50SGVhZGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHNlbGVjdENvbnRlbnRIZWFkbGluZS5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9WSUVXX1RSSUdHRVJfU0VMRUNUO1xuICAgICAgc2VsZWN0Q29udGVudEhlYWRsaW5lLmNsYXNzTmFtZSA9ICdjb250ZW50SGVhZGxpbmUnO1xuICAgICAgc2VsZWN0Q29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZWN0Q29udGVudEhlYWRsaW5lKTtcblxuICAgICAgc2VsZWN0Q29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc2VsZWN0Q29udGVudC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuRURJVE9SX0NPTlRFTlRfU0VMRUNUO1xuICAgICAgc2VsZWN0Q29udGVudEluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICBzZWxlY3RDb250ZW50SW5mby5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9TRUxFQ1RfSU5GTztcbiAgICAgIHNlbGVjdENvbnRlbnRJbmZvLmlubmVySFRNTCArPSAnPGJyPjxicj48c3ViPicgKyBsYW5nQ29uc3RhbnRzLkVESVRPUl9TRUxFQ1RfSU5GT19BRERJVElPTkFMICsgJzwvc3ViPic7XG4gICAgICBzZWxlY3RDb250ZW50LmFwcGVuZENoaWxkKHNlbGVjdENvbnRlbnRJbmZvKTtcbiAgICAgIHNlbGVjdENvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKHNlbGVjdENvbnRlbnQpO1xuXG4gICAgICBzZWxlY3RWaWV3ID0gdGhpcy5hZGRWaWV3KHtcbiAgICAgICAgbmFtZTogJ3NlbGVjdCcsXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5FRElUT1JfVklFV19UUklHR0VSX1NFTEVDVCxcbiAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5FRElUT1JfVklFV19UUklHR0VSX1NFTEVDVCxcbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMuY29udGVudENvbnRhaW5lciwgZWxlbWVudDogc2VsZWN0Q29udGVudFdyYXBwZXJ9LFxuICAgICAgICAgIHtzZWN0aW9uOiB0aGlzLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHRoaXMudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF0sXG4gICAgICAgIGluaXRGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGVjdEludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLlNlbGVjdCh7XG4gICAgICAgICAgICBsYXllcnM6IHNlbGYuZWRpdExheWVyR3JvdXAuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKSxcbiAgICAgICAgICAgIHRvZ2dsZUNvbmRpdGlvbjogb2wuZXZlbnRzLmNvbmRpdGlvbi5wbGF0Zm9ybU1vZGlmaWVyS2V5T25seSxcbiAgICAgICAgICAgIHN0eWxlOiBmdW5jdGlvbiAoZmVhdHVyZSwgcHJvamVjdGlvbikge1xuICAgICAgICAgICAgICB2YXIgc3R5bGVJZCxcbiAgICAgICAgICAgICAgICAgIHN0eWxlQXJyYXksXG4gICAgICAgICAgICAgICAgICBzdHlsZVJhZGl1cztcblxuICAgICAgICAgICAgICBpZiAoZmVhdHVyZSAmJiB0eXBlb2YgZmVhdHVyZS5nZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIHN0eWxlSWQgb2YgdGhlIGN1cnJlbnQgZmVhdHVyZVxuICAgICAgICAgICAgICAgIHN0eWxlSWQgPSBmZWF0dXJlLmdldCgnc3R5bGVJZCcpO1xuICAgICAgICAgICAgICAgIC8vIGFuZCBleGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBmdW5jdGlvblxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXSkge1xuICAgICAgICAgICAgICAgICAgc3R5bGVBcnJheSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKGZlYXR1cmUsIHByb2plY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlQXJyYXlbMF0uZ2V0SW1hZ2UgPT09ICdmdW5jdGlvbicgJiYgc3R5bGVBcnJheVswXS5nZXRJbWFnZSgpIGluc3RhbmNlb2Ygb2wuc3R5bGUuSWNvbikge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZVJhZGl1cyA9IDU7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZVJhZGl1cyA9IHBhcnNlSW50KHN0eWxlQXJyYXlbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMoKSwgMTApICsgNDtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgc3R5bGVBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LC43KScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogc3R5bGVSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LC43KScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA1XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LC41KSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZUFycmF5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7IC8vIHNlbGVjdEludGVyYWN0aW9uXG5cbiAgICAgICAgICBzZWxlY3RlZEZlYXR1cmVzID0gc2VsZWN0SW50ZXJhY3Rpb24uZ2V0RmVhdHVyZXMoKTtcblxuICAgICAgICAgIHNlbGVjdEJveEludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLkRyYWdCb3goe2NvbmRpdGlvbjogb2wuZXZlbnRzLmNvbmRpdGlvbi5zaGlmdEtleU9ubHl9KTtcblxuICAgICAgICAgIHNlbGVjdEJveEludGVyYWN0aW9uLm9uKCdib3hlbmQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIGV4dGVudCA9IHNlbGVjdEJveEludGVyYWN0aW9uLmdldEdlb21ldHJ5KCkuZ2V0RXh0ZW50KCk7XG5cbiAgICAgICAgICAgIHNlbGYuZWRpdExheWVyR3JvdXAuZ2V0TGF5ZXJzKCkuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICAgICAgICAgICAgbGF5ZXIuZ2V0U291cmNlKCkuZm9yRWFjaEZlYXR1cmVJbnRlcnNlY3RpbmdFeHRlbnQoZXh0ZW50LCBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmbkhhbmRsZVNlbGVjdGlvbigpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gY2xlYXIgc2VsZWN0aW9uIHdoZW4gZHJhd2luZyBhIG5ldyBib3ggYW5kIHdoZW4gY2xpY2tpbmcgb24gdGhlIG1hcFxuICAgICAgICAgIHNlbGVjdEJveEludGVyYWN0aW9uLm9uKCdib3hzdGFydCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBzZWxlY3RlZEZlYXR1cmVzLmNsZWFyKCk7XG4gICAgICAgICAgICBmbkhhbmRsZVNlbGVjdGlvbigpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm5IYW5kbGVTZWxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICBqLFxuICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgIGVkaXRvclZhcnMsXG4gICAgICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LFxuICAgICAgICAgICAgICAgIGlucHV0TmFtZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgbW9kaWZ5QnV0dG9uRWxlbWVudCxcbiAgICAgICAgICAgICAgICBkZWxldGVCdXR0b25FbGVtZW50LFxuICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgc3Ryb25nRWxlbWVudCxcbiAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZmVhdHVyZUNvdW50LFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZSxcbiAgICAgICAgICAgICAgICBibHVyT25FbnRlcixcbiAgICAgICAgICAgICAgICBpbnB1dENoYW5nZUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgbmFtZUNoYW5nZUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgbW9kaWZ5RmVhdHVyZUZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgIGRlbGV0ZUZlYXR1cmVGdW5jdGlvbixcbiAgICAgICAgICAgICAgICByZW5kZXJTZWxlY3RlZEZlYXR1cmVzTGlzdDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLmFwcGx5RmVhdHVyZU1vZGlmaWNhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBzZWxmLmFwcGx5RmVhdHVyZU1vZGlmaWNhdGlvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBibHVyT25FbnRlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5ibHVyKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9OyAvLyBlbmQgb2YgXCJibHVyT25FbnRlcigpXCJcblxuICAgICAgICAgICAgbmFtZUNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGNoYW5nZWRGZWF0dXJlO1xuICAgICAgICAgICAgICBjaGFuZ2VkRmVhdHVyZSA9IHNlbGVjdGVkRmVhdHVyZXMuaXRlbShldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdmZWF0X2lkJykpO1xuICAgICAgICAgICAgICBjaGFuZ2VkRmVhdHVyZS5zZXQoXG4gICAgICAgICAgICAgICAgICAndG9vbHRpcCcsXG4gICAgICAgICAgICAgICAgICB1dGlscy5lbmNvZGVHZW9Kc29uUHJvcGVydHkoZXZlbnQudGFyZ2V0LnZhbHVlIHx8ICcnKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBzZWxmLnNhdmUoKTtcbiAgICAgICAgICAgICAgLy8gQ2FsbCBob29rIHRvIG5vdGlmeSB0aGUgZmVhdHVyZSBjaGFuZ2VcbiAgICAgICAgICAgICAgaWYgKGM0Zy5tYXBzLmhvb2sgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgYzRnLm1hcHMuaG9vay5lZGl0b3JfZmVhdHVyZUNoYW5nZWQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoYzRnLm1hcHMuaG9vay5lZGl0b3JfZmVhdHVyZUNoYW5nZWQsIHtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmU6IGNoYW5nZWRGZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncmVuYW1lZCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwibmFtZUNoYW5nZUhhbmRsZXIoKVwiXG5cbiAgICAgICAgICAgIGlucHV0Q2hhbmdlSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICB2YXIgY3VycmVudFZhcnMsXG4gICAgICAgICAgICAgICAgICBjaGFuZ2VkRmVhdHVyZTtcbiAgICAgICAgICAgICAgY2hhbmdlZEZlYXR1cmUgPSBzZWxlY3RlZEZlYXR1cmVzLml0ZW0oZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZmVhdF9pZCcpKTtcbiAgICAgICAgICAgICAgY3VycmVudFZhcnMgPSBjaGFuZ2VkRmVhdHVyZS5nZXQoJ2VkaXRvclZhcnMnKTtcbiAgICAgICAgICAgICAgY3VycmVudFZhcnNbZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgndmFyX2lkJyldLnZhbHVlID0gdXRpbHMuZW5jb2RlR2VvSnNvblByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlIHx8ICcnXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGNoYW5nZWRGZWF0dXJlLnNldCgnZWRpdG9yVmFycycsIGN1cnJlbnRWYXJzKTtcbiAgICAgICAgICAgICAgc2VsZi5zYXZlKCk7XG4gICAgICAgICAgICAgIC8vIENhbGwgaG9vayB0byBub3RpZnkgdGhlIGZlYXR1cmUgY2hhbmdlXG4gICAgICAgICAgICAgIGlmIChjNGcubWFwcy5ob29rICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGM0Zy5tYXBzLmhvb2suZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKGM0Zy5tYXBzLmhvb2suZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkLCB7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlOiBjaGFuZ2VkRmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2NoYW5nZWRfdmFyJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9OyAvLyBlbmQgb2YgXCJpbnB1dENoYW5nZUhhbmRsZXIoKVwiXG5cbiAgICAgICAgICAgIG1vZGlmeUZlYXR1cmVGdW5jdGlvbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICB2YXIgbW9kaWZ5RmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVHZW9tZXRyeSxcbiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUludGVyYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgbW9kaWZ5SW50ZXJhY3Rpb24sXG4gICAgICAgICAgICAgICAgICBtb2RpZnlCdXR0b24sXG4gICAgICAgICAgICAgICAgICBhcHBseUJ1dHRvbjtcblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlbGYuYXBwbHlGZWF0dXJlTW9kaWZpY2F0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG1vZGlmeUJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgICAgICAgICAvLyBnZXQgZmVhdHVyZSB0aGF0IHNob3VsZCBiZSBtb2RpZmllZFxuICAgICAgICAgICAgICBtb2RpZnlGZWF0dXJlID0gc2VsZWN0ZWRGZWF0dXJlcy5pdGVtKG1vZGlmeUJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2ZlYXRfaWQnKSk7XG4gICAgICAgICAgICAgIGlmICghbW9kaWZ5RmVhdHVyZSB8fCB0eXBlb2YgbW9kaWZ5RmVhdHVyZS5nZXRHZW9tZXRyeSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZlYXR1cmVHZW9tZXRyeSA9IG1vZGlmeUZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcbiAgICAgICAgICAgICAgdHJhbnNsYXRlSW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgbW9kaWZ5SW50ZXJhY3Rpb24gPSBmYWxzZTtcblxuICAgICAgICAgICAgICBpZiAoIShmZWF0dXJlR2VvbWV0cnkgaW5zdGFuY2VvZiBvbC5nZW9tLkxpbmVTdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlSW50ZXJhY3Rpb24gPSBuZXcgb2wuaW50ZXJhY3Rpb24uVHJhbnNsYXRlKHtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBuZXcgb2wuQ29sbGVjdGlvbihbbW9kaWZ5RmVhdHVyZV0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZEludGVyYWN0aW9uKHRyYW5zbGF0ZUludGVyYWN0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIShmZWF0dXJlR2VvbWV0cnkgaW5zdGFuY2VvZiBvbC5nZW9tLlBvaW50KSkge1xuICAgICAgICAgICAgICAgIG1vZGlmeUludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLk1vZGlmeSh7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlczogbmV3IG9sLkNvbGxlY3Rpb24oW21vZGlmeUZlYXR1cmVdKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihtb2RpZnlJbnRlcmFjdGlvbik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzZWxlY3RJbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuXG4gICAgICAgICAgICAgIC8vIGFkZCBhcHBseSBidXR0b25cbiAgICAgICAgICAgICAgYXBwbHlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgYXBwbHlCdXR0b24uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyAnICcgKyBjc3NDb25zdGFudHMuRURJVE9SX0ZFQVRVUkVfQVBQTFk7XG4gICAgICAgICAgICAgIGFwcGx5QnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5FRElUT1JfRkVBVFVSRV9BUFBMWTtcbiAgICAgICAgICAgICAgYXBwbHlCdXR0b24uc2V0QXR0cmlidXRlKCdmZWF0X2lkJywgaSk7XG5cbiAgICAgICAgICAgICAgc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRlSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlSW50ZXJhY3Rpb24odHJhbnNsYXRlSW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlSW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1vZGlmeUludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlSW50ZXJhY3Rpb24obW9kaWZ5SW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgbW9kaWZ5SW50ZXJhY3Rpb24uc2V0QWN0aXZlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIG1vZGlmeUludGVyYWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGVjdEludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcblxuICAgICAgICAgICAgICAgIGFwcGx5QnV0dG9uID0gYXBwbHlCdXR0b24ucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobW9kaWZ5QnV0dG9uLCBhcHBseUJ1dHRvbik7XG4gICAgICAgICAgICAgICAgc2VsZi5zYXZlKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBDYWxsIGhvb2sgdG8gbm90aWZ5IHRoZSBmZWF0dXJlIGNoYW5nZVxuICAgICAgICAgICAgICAgIGlmIChjNGcubWFwcy5ob29rICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGM0Zy5tYXBzLmhvb2suZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoYzRnLm1hcHMuaG9vay5lZGl0b3JfZmVhdHVyZUNoYW5nZWQsIHtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZTogbW9kaWZ5RmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnZWRpdGVkJ1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICQoYXBwbHlCdXR0b24pLmNsaWNrKHNlbGYuYXBwbHlGZWF0dXJlTW9kaWZpY2F0aW9uKTtcbiAgICAgICAgICAgICAgbW9kaWZ5QnV0dG9uID0gbW9kaWZ5QnV0dG9uLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGFwcGx5QnV0dG9uLCBtb2RpZnlCdXR0b24pO1xuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwibW9kaWZ5RmVhdHVyZUZ1bmN0aW9uKClcIlxuXG4gICAgICAgICAgICBkZWxldGVGZWF0dXJlRnVuY3Rpb24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVHZW9tZXRyeSxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UsXG4gICAgICAgICAgICAgICAgICBkZWxldGVGZWF0dXJlO1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmFwcGx5RmVhdHVyZU1vZGlmaWNhdGlvbigpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZmVhdHVyZUluZGV4ID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZmVhdF9pZCcpO1xuICAgICAgICAgICAgICBkZWxldGVGZWF0dXJlID0gc2VsZWN0ZWRGZWF0dXJlcy5pdGVtKGZlYXR1cmVJbmRleCk7XG4gICAgICAgICAgICAgIGZlYXR1cmVHZW9tZXRyeSA9IGRlbGV0ZUZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcblxuICAgICAgICAgICAgICAvLyBmaW5kIHJpZ2h0IHNvdXJjZVxuICAgICAgICAgICAgICBpZiAoZmVhdHVyZUdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5Qb2ludCkge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UgPSBzZWxmLmVkaXRQb2ludExheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmVHZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uTGluZVN0cmluZykge1xuICAgICAgICAgICAgICAgICBmZWF0dXJlU291cmNlID0gc2VsZi5lZGl0TGluZUxheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmVHZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbikge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UgPSBzZWxmLmVkaXRQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmVhdHVyZUdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5DaXJjbGUpIHtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UgPSBzZWxmLmVkaXRDaXJjbGVMYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjb3VsZCBub3QgZmluZCByaWdodCBzb3VyY2VcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBkZWxldGUgdGhlIGZlYXR1cmUuIFVuYWJsZSB0byBmaW5kIGFwcHJvcHJpYXRlIHNvdXJjZS4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyByZW1vdmUgRmVhdHVyZSBmcm9tIHRoZSBzb3VyY2VcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UucmVtb3ZlRmVhdHVyZShkZWxldGVGZWF0dXJlKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZUdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5MaW5lU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVNvdXJjZSA9IHNlbGYuZWRpdEZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVNvdXJjZS5yZW1vdmVGZWF0dXJlKGRlbGV0ZUZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIGFuZCBmcm9tIHRoZSBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgc2VsZWN0ZWRGZWF0dXJlcy5yZW1vdmUoZGVsZXRlRmVhdHVyZSk7XG5cbiAgICAgICAgICAgICAgLy8gcmVyZW5kZXIgdGhlIHNlbGVjdGlvbkxpc3RcbiAgICAgICAgICAgICAgcmVuZGVyU2VsZWN0ZWRGZWF0dXJlc0xpc3QoKTtcbiAgICAgICAgICAgICAgc2VsZi5zYXZlKCk7XG4gICAgICAgICAgICAgIC8vIENhbGwgaG9vayB0byBub3RpZnkgdGhlIGZlYXR1cmUgY2hhbmdlXG4gICAgICAgICAgICAgIC8vIE1heWJlIHBhc3MgdGhlIHJlbWFpbmluZyBmZWF0dXJlcyBpbnN0ZWFkIG9mIHRoZSBkZWxldGVkRmVhdHVyZSA/XG4gICAgICAgICAgICAgIC8vIE9yIG1heWJlIGEgc2Vjb25kIGhvb2sgZm9yIGRlbGV0aW9uLCB3aGVyZSBib3RoIGlzIHBhc3NlZCA/XG4gICAgICAgICAgICAgIGlmIChjNGcubWFwcy5ob29rICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGM0Zy5tYXBzLmhvb2suZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKGM0Zy5tYXBzLmhvb2suZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkLCB7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlOiBkZWxldGVGZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnZGVsZXRlZCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwiZGVsZXRlRmVhdHVyZUZ1bmN0aW9uKClcIlxuXG4gICAgICAgICAgICByZW5kZXJTZWxlY3RlZEZlYXR1cmVzTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZmVhdHVyZUNvdW50ID0gc2VsZWN0ZWRGZWF0dXJlcy5nZXRMZW5ndGgoKTtcbiAgICAgICAgICAgICAgc2VsZWN0Q29udGVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgaWYgKGZlYXR1cmVDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZmVhdHVyZUNvdW50OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZSA9IHNlbGVjdGVkRmVhdHVyZXMuaXRlbShpKTtcbiAgICAgICAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2g0Jyk7XG4gICAgICAgICAgICAgICAgICAvLyBhZGQgbmFtZSBpbnB1dGZpZWxkXG4gICAgICAgICAgICAgICAgICBpbnB1dE5hbWVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgIGlucHV0TmFtZUVsZW1lbnQudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgICAgICAgICAgIGlucHV0TmFtZUVsZW1lbnQuaWQgPSBpO1xuICAgICAgICAgICAgICAgICAgaW5wdXROYW1lRWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJyxcbiAgICAgICAgICAgICAgICAgICAgICB1dGlscy5kZWNvZGVHZW9Kc29uUHJvcGVydHkoc2VsZWN0ZWRGZWF0dXJlLmdldCgndG9vbHRpcCcpIHx8ICcnKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGlucHV0TmFtZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdmZWF0X2lkJywgaSk7XG4gICAgICAgICAgICAgICAgICAkKGlucHV0TmFtZUVsZW1lbnQpLmtleWRvd24oYmx1ck9uRW50ZXIpO1xuICAgICAgICAgICAgICAgICAgaW5wdXROYW1lRWxlbWVudC5vbmNoYW5nZSA9IG5hbWVDaGFuZ2VIYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LmFwcGVuZENoaWxkKGlucHV0TmFtZUVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgLy8gYWRkIG1vZGlmeSBidXR0b25cbiAgICAgICAgICAgICAgICAgIG1vZGlmeUJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICAgIG1vZGlmeUJ1dHRvbkVsZW1lbnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyAnICcgKyBjc3NDb25zdGFudHMuRURJVE9SX0ZFQVRVUkVfTU9ESUZZO1xuICAgICAgICAgICAgICAgICAgbW9kaWZ5QnV0dG9uRWxlbWVudC50aXRsZSA9IGxhbmdDb25zdGFudHMuRURJVE9SX0ZFQVRVUkVfTU9ESUZZO1xuICAgICAgICAgICAgICAgICAgbW9kaWZ5QnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZlYXRfaWQnLCBpKTtcbiAgICAgICAgICAgICAgICAgICQobW9kaWZ5QnV0dG9uRWxlbWVudCkuY2xpY2sobW9kaWZ5RmVhdHVyZUZ1bmN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudC5hcHBlbmRDaGlsZChtb2RpZnlCdXR0b25FbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgIC8vIGFkZCBkZWxldGUgYnV0dG9uXG4gICAgICAgICAgICAgICAgICBkZWxldGVCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgICBkZWxldGVCdXR0b25FbGVtZW50LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLkVESVRPUl9GRUFUVVJFX0RFTEVURTtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbkVsZW1lbnQudGl0bGUgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9GRUFUVVJFX0RFTEVURTtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdmZWF0X2lkJywgaSk7XG4gICAgICAgICAgICAgICAgICAkKGRlbGV0ZUJ1dHRvbkVsZW1lbnQpLmNsaWNrKGRlbGV0ZUZlYXR1cmVGdW5jdGlvbik7XG4gICAgICAgICAgICAgICAgICBoZWFkbGluZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZGVsZXRlQnV0dG9uRWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQoaGVhZGxpbmVFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEZlYXR1cmUuZ2V0KCdtZWFzdXJlZExlbmd0aCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEZlYXR1cmUuZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uTGluZVN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gbGFuZ0NvbnN0YW50cy5MRU5HVEg7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRGZWF0dXJlLmdldEdlb21ldHJ5KCkgaW5zdGFuY2VvZiBvbC5nZW9tLlBvbHlnb24pe1xuICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gbGFuZ0NvbnN0YW50cy5QRVJJTUVURVI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IGxhbmdDb25zdGFudHMuUkFESVVTO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQuaW5uZXJIVE1MICs9ICc8c3Ryb25nPicgKyBsYWJlbCArICc6PC9zdHJvbmc+ICcgKyBzZWxlY3RlZEZlYXR1cmUuZ2V0KCdtZWFzdXJlZExlbmd0aCcpLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0Q29udGVudC5hcHBlbmRDaGlsZChwYXJhZ3JhcGhFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEZlYXR1cmUuZ2V0KCdtZWFzdXJlZEFyZWEnKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmlubmVySFRNTCArPSAnPHN0cm9uZz4nICsgbGFuZ0NvbnN0YW50cy5TVVJGQUNFQVJFQSArICc6PC9zdHJvbmc+ICcgKyBzZWxlY3RlZEZlYXR1cmUuZ2V0KCdtZWFzdXJlZEFyZWEnKS5odG1sVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQocGFyYWdyYXBoRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGZWF0dXJlLmdldCgnbWVhc3VyZWRSYWRpdXMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5pbm5lckhUTUwgKz0gJzxzdHJvbmc+JyArIGxhbmdDb25zdGFudHMuUkFESVVTICsgJzo8L3N0cm9uZz4gJyArIHNlbGVjdGVkRmVhdHVyZS5nZXQoJ21lYXN1cmVkUmFkaXVzJykuaHRtbFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQocGFyYWdyYXBoRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvLyBjaGVjayBhbmQgYXBwZW5kIGVkaXRvci12YXJzXG4gICAgICAgICAgICAgICAgICBlZGl0b3JWYXJzID0gc2VsZWN0ZWRGZWF0dXJlLmdldCgnZWRpdG9yVmFycycpO1xuICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGVkaXRvclZhcnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgICAgICAgc3Ryb25nRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0cm9uZycpO1xuICAgICAgICAgICAgICAgICAgICBzdHJvbmdFbGVtZW50LmlubmVySFRNTCA9IGVkaXRvclZhcnNbal0ubGFiZWw7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5pZCA9IGkgKyAnLScgKyBqO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmRlY29kZUdlb0pzb25Qcm9wZXJ0eShlZGl0b3JWYXJzW2pdLnZhbHVlIHx8ICcnKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKCdmZWF0X2lkJywgaSk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3Zhcl9pZCcsIGopO1xuICAgICAgICAgICAgICAgICAgICAkKGlucHV0RWxlbWVudCkua2V5ZG93bihibHVyT25FbnRlcik7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5vbmNoYW5nZSA9IGlucHV0Q2hhbmdlSGFuZGxlcjtcblxuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKHN0cm9uZ0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJykpO1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQocGFyYWdyYXBoRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnRIZWFkbGluZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIC8vIHNlbGYuc3RhdHVzQmFyLmlubmVySFRNTCA9IGZlYXR1cmVDb3VudDtcblxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQoc2VsZWN0Q29udGVudEluZm8pO1xuICAgICAgICAgICAgICAgIC8vIHNlbGYuc3RhdHVzQmFyLmlubmVySFRNTCA9IDA7XG4gICAgICAgICAgICAgICAgc2VsZWN0Q29udGVudEhlYWRsaW5lLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwicmVuZGVyU2VsZWN0ZWRGZWF0dXJlc0xpc3RcIlxuXG4gICAgICAgICAgICByZW5kZXJTZWxlY3RlZEZlYXR1cmVzTGlzdCgpO1xuICAgICAgICAgIH07IC8vIGVuZCBvZiBcImZuSGFuZGxlU2VsZWN0aW9uXCJcblxuICAgICAgICAgIHNlbGVjdEludGVyYWN0aW9uLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGZuSGFuZGxlU2VsZWN0aW9uKGV2ZW50LnRhcmdldC5nZXRGZWF0dXJlcygpKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihzZWxlY3RJbnRlcmFjdGlvbik7XG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZEludGVyYWN0aW9uKHNlbGVjdEJveEludGVyYWN0aW9uKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgLy8gRGlzYWJsZSBtYXBIb3ZlclxuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcEhvdmVyLmRlYWN0aXZhdGUoKTtcblxuICAgICAgICAgIC8vIFJlc2V0IGRpc3BsYXksIGlmIG5vIGZlYXR1cmVzIGFyZSBzZWxlY3RlZFxuICAgICAgICAgIGlmIChzZWxlY3RJbnRlcmFjdGlvbi5nZXRGZWF0dXJlcygpLmdldExlbmd0aCgpIDwgMSkge1xuICAgICAgICAgICAgc2VsZWN0Q29udGVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQoc2VsZWN0Q29udGVudEluZm8pO1xuICAgICAgICAgICAgLy8gc2VsZi5zdGF0dXNCYXIuaW5uZXJIVE1MID0gMDtcbiAgICAgICAgICAgIHNlbGVjdENvbnRlbnRIZWFkbGluZS5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRW5hYmxlIGludGVyYWN0aW9uXG4gICAgICAgICAgc2VsZWN0SW50ZXJhY3Rpb24uc2V0QWN0aXZlKHRydWUpO1xuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihzZWxlY3RJbnRlcmFjdGlvbik7XG4gICAgICAgICAgc2VsZWN0Qm94SW50ZXJhY3Rpb24uc2V0QWN0aXZlKHRydWUpO1xuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihzZWxlY3RCb3hJbnRlcmFjdGlvbik7XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVhY3RpdmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLmFwcGx5RmVhdHVyZU1vZGlmaWNhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRGlzYWJsZSBpbnRlcmFjdGlvblxuICAgICAgICAgIHNlbGVjdEludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUludGVyYWN0aW9uKHNlbGVjdEludGVyYWN0aW9uKTtcbiAgICAgICAgICBzZWxlY3RCb3hJbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVJbnRlcmFjdGlvbihzZWxlY3RCb3hJbnRlcmFjdGlvbik7XG5cbiAgICAgICAgICAvLyBlbmFibGUgbWFwSG92ZXJcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXBIb3Zlci5hY3RpdmF0ZSgpO1xuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2VsZWN0VmlldztcbiAgICB9LFxuXG4gICAgYWRkRHJhd1ZpZXc6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBUUklHR0VSX0RSQVcsXG4gICAgICAgICAgZHJhd0NvbnRlbnQsXG4gICAgICAgICAgb3B0aW9uc0RpdixcbiAgICAgICAgICBlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94LFxuICAgICAgICAgIGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3hMYWJlbCxcbiAgICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveCxcbiAgICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveExhYmVsLFxuICAgICAgICAgIGNoZWNrYm94Q2hhbmdlSGFuZGxlcixcbiAgICAgICAgICBkcmF3VmlldyxcbiAgICAgICAgICBhZGREcmF3U3R5bGUsXG4gICAgICAgICAgb2xUeXBlO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgdHlwZTogJ1BvaW50JyxcbiAgICAgICAgc3R5bGVJZHM6IFtdXG4gICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgY2hlY2tib3hDaGFuZ2VIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgLy8gdmFyIGludGVyYWN0aW9uID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmludGVyYWN0aW9uO1xuICAgICAgICAgIC8vIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVJbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgICAgICAgLy8gLy9zZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkSW50ZXJhY3Rpb24oaW50ZXJhY3Rpb24pO1xuXG4gICAgICB9XG5cbiAgICAgIFRSSUdHRVJfRFJBVyA9ICdFRElUT1JfVklFV19UUklHR0VSX0RSQVdfJyArIG9wdGlvbnMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBkcmF3Q29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZHJhd0NvbnRlbnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzWydFRElUT1JfRFJBV19DT05URU5UXycgKyBvcHRpb25zLnR5cGUudG9VcHBlckNhc2UoKV07XG4gICAgICBkcmF3Q29udGVudC5pbm5lckhUTUwgPSAnPGg0PicgKyBsYW5nQ29uc3RhbnRzW1RSSUdHRVJfRFJBV10gKyAnPC9oND4nO1xuXG4gICAgICBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgIT09ICdwb2ludCcpIHtcbiAgICAgICAgb3B0aW9uc0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBvcHRpb25zRGl2LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5FRElUT1JfRFJBV19PUFRJT05TO1xuICAgICAgICBkcmF3Q29udGVudC5hcHBlbmRDaGlsZChvcHRpb25zRGl2KTtcblxuICAgICAgICBlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveC5pZCA9ICdlbmFibGVJbnN0YW50TWVhc3VyZUZvcicgKyBvcHRpb25zLnR5cGU7XG4gICAgICAgIG9wdGlvbnNEaXYuYXBwZW5kQ2hpbGQoZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveCk7XG5cbiAgICAgICAgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveExhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ2VuYWJsZUluc3RhbnRNZWFzdXJlRm9yJyArIG9wdGlvbnMudHlwZSk7XG4gICAgICAgIGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3hMYWJlbC5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9FTkFCTEVfSU5TVEFOVF9NRUFTVVJFO1xuICAgICAgICBvcHRpb25zRGl2LmFwcGVuZENoaWxkKGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3hMYWJlbCk7XG5cbiAgICAgICAgb3B0aW9uc0Rpdi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKTtcblxuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIC8vIGVuYWJsZUZyZWVoYW5kRHJhd0NoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveC5pZCA9ICdlbmFibGVGcmVlaGFuZERyYXdGb3InICsgb3B0aW9ucy50eXBlO1xuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveC5vbmNoYW5nZSA9IGNoZWNrYm94Q2hhbmdlSGFuZGxlcjtcbiAgICAgICAgLy8gb3B0aW9uc0Rpdi5hcHBlbmRDaGlsZChlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveCk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGVuYWJsZUZyZWVoYW5kRHJhd0NoZWNrYm94TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveExhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ2VuYWJsZUZyZWVoYW5kRHJhd0ZvcicgKyBvcHRpb25zLnR5cGUpO1xuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveExhYmVsLmlubmVySFRNTCA9IGxhbmdDb25zdGFudHMuRURJVE9SX0VOQUJMRV9GUkVFSEFORF9EUkFXO1xuICAgICAgICAvLyBvcHRpb25zRGl2LmFwcGVuZENoaWxkKGVuYWJsZUZyZWVoYW5kRHJhd0NoZWNrYm94TGFiZWwpO1xuICAgICAgfVxuXG4gICAgICBhZGREcmF3U3R5bGUgPSBmdW5jdGlvbiAoc3R5bGVJZCkge1xuICAgICAgICB2YXIgaW50ZXJhY3Rpb25WaWV3LFxuICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgaW50ZXJhY3Rpb24sXG4gICAgICAgICAgICBmZWF0dXJlcyxcbiAgICAgICAgICAgIGVkaXRvclN0eWxlLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBzdHlsZURhdGEsXG4gICAgICAgICAgICBzdHlsZUljb24sXG4gICAgICAgICAgICBzdmdTcmMsXG4gICAgICAgICAgICBzdHlsZUltYWdlLFxuICAgICAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwsXG4gICAgICAgICAgICBmZWF0dXJlSWRDb3VudCxcbiAgICAgICAgICAgIG5hbWU7XG5cbiAgICAgICAgLy8gU3R5bGUgXCJzaG9ydGN1dFwiXG4gICAgICAgIHN0eWxlID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUoKVswXTtcbiAgICAgICAgZWRpdG9yU3R5bGUgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS5lZGl0b3I7XG4gICAgICAgIHN0eWxlRGF0YSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLmxvY1N0eWxlQXJyO1xuICAgICAgICBzdmdTcmMgPSBzdHlsZURhdGEuc3ZnU3JjO1xuXG4gICAgICAgIGZlYXR1cmVJZENvdW50ID0gMDtcblxuICAgICAgICAvLyBDcmVhdGUgbGFiZWwgZm9yIGludGVyYWN0aW9uLXRyaWdnZXJcbiAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIC8vIEBUT0RPIHVzZSBjc3MtY2xhc3MgZm9yIGRpbWVuc2lvbnNcbiAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIHN0eWxlVHJpZ2dlckxhYmVsLnN0eWxlLm1pbldpZHRoID0gJzMwcHgnO1xuICAgICAgICBzdHlsZVRyaWdnZXJMYWJlbC5zdHlsZS5taW5IZWlnaHQgPSAnMzBweCc7XG4gICAgICAgIHN0eWxlVHJpZ2dlckxhYmVsLnN0eWxlLm1hcmdpbiA9ICcycHgnO1xuICAgICAgICAvLyBcInN0eWxlLmdldEltYWdlKCkuZ2V0SW1hZ2UoKVwiLCBkb2VzIG5vdCB3b3JrIGluIGV2ZXJ5IGNhc2VcbiAgICAgICAgc3R5bGVJbWFnZSA9IHN0eWxlLmdldEltYWdlKCkgfHwgdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZWRpdG9yU3R5bGUuaWNvblNyYyB8fCBzdHlsZUltYWdlIGluc3RhbmNlb2Ygb2wuc3R5bGUuSWNvbikge1xuICAgICAgICAgIHN0eWxlSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgaWYgKGVkaXRvclN0eWxlLmljb25TcmMgJiYgKGVkaXRvclN0eWxlLmljb25TcmMuaW5kZXhPZignLicpICE9IC0xKSkge1xuICAgICAgICAgICAgc3R5bGVJY29uLnNyYyA9IGVkaXRvclN0eWxlLmljb25TcmM7XG4gICAgICAgICAgICBpZiAoc3R5bGVEYXRhLmVkaXRvcl9pY29uX3NpemUpIHtcbiAgICAgICAgICAgICAgICBzdHlsZUljb24uaGVpZ2h0ID0gc3R5bGVEYXRhLmVkaXRvcl9pY29uX3NpemVbMF07XG4gICAgICAgICAgICAgICAgc3R5bGVJY29uLndpZHRoID0gc3R5bGVEYXRhLmVkaXRvcl9pY29uX3NpemVbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0eWxlSWNvbi5oZWlnaHQgPSAnMzInO1xuICAgICAgICAgICAgICAgIHN0eWxlSWNvbi53aWR0aCA9ICczMic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlSWNvbi5zcmMgPSBzdHlsZUltYWdlLmdldFNyYygpO1xuICAgICAgICAgICAgc3R5bGVJY29uLnNjYWxlID0gc3R5bGVJbWFnZS5nZXRTY2FsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHlsZVRyaWdnZXJMYWJlbC5hcHBlbmRDaGlsZChzdHlsZUljb24pO1xuICAgICAgICB9IGVsc2UgaWYgKHN2Z1NyYykge1xuICAgICAgICAgICAgaWYgKHN0eWxlRGF0YS5zdmdTcmMgJiYgc3R5bGVEYXRhLmljb25fc2NhbGUgJiYgc3R5bGVEYXRhLmljb25fc2l6ZSkge1xuICAgICAgICAgICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgICAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgICAgICBsZXQgaGVpZ2h0ID0gKHN0eWxlRGF0YS5pY29uX3NpemVbMF0gKiBzdHlsZURhdGEuaWNvbl9zY2FsZSk7XG4gICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gKHN0eWxlRGF0YS5pY29uX3NpemVbMV0gKiBzdHlsZURhdGEuaWNvbl9zY2FsZSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgc3Ryb2tld2lkdGggPSAwO1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZURhdGEuc3Ryb2tld2lkdGggJiYgc3R5bGVEYXRhLnN0cm9rZXdpZHRoLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZXdpZHRoID0gc3R5bGVEYXRhLnN0cm9rZXdpZHRoLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKyAoMiAqIHN0cm9rZXdpZHRoKTtcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aCArICgyICogc3Ryb2tld2lkdGgpO1xuICAgICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIGlmIChzdHlsZURhdGEuZmlsbGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLmZpbGxjb2xvciwgc3R5bGVEYXRhLmZpbGxvcGFjaXR5LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHN0cm9rZXdpZHRoICYmIHN0eWxlRGF0YS5zdHJva2Vjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLnN0cm9rZWNvbG9yLCBzdHlsZURhdGEuc3Ryb2tlb3BhY2l0eS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBzdHJva2V3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLjUsIDAuNSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaWYgKHN0eWxlRGF0YS5pY29uX29wYWNpdHkudmFsdWUgJiYgKHN0eWxlRGF0YS5pY29uX29wYWNpdHkudmFsdWUgPiAwKSkge1xuICAgICAgICAgICAgICAgIC8vICAgICBjdHguZ2xvYmFsQWxwaGEgPSAoc3R5bGVEYXRhLmljb25fb3BhY2l0eS52YWx1ZSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgICAgIGltZy5zcmMgPSBzdHlsZURhdGEuc3ZnU3JjO1xuICAgICAgICAgICAgICAgIGltZy56SW5kZXggPSAxMDA7XG5cbiAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgc3Ryb2tld2lkdGgsIHN0cm9rZXdpZHRoLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHlsZUljb24gPSBjYW52YXM7XG5cbiAgICAgICAgICAgICAgICBzdHlsZVRyaWdnZXJMYWJlbC5zdHlsZS53aWR0aCA9ICh3aWR0aCAqIHNjYWxlKSArICdweCc7XG4gICAgICAgICAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwuc3R5bGUuaGVpZ2h0ID0gKGhlaWdodCAqIHNjYWxlKSArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwuc3R5bGUuYmFja2dyb3VuZCA9IHN0eWxlLmdldEZpbGwoKS5nZXRDb2xvcigpO1xuICAgICAgICAgIHN0eWxlVHJpZ2dlckxhYmVsLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgJyArIHN0eWxlLmdldFN0cm9rZSgpLmdldENvbG9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgaW50ZXJhY3Rpb25WaWV3XG4gICAgICAgIC8vICAgXCJhZGRWaWV3XCIgd2lsbCBiZSB1c2VkIGZvciB0aGlzLCBiZWNhdXNlIHRoZSBmdW5jdGlvbmFsaXR5XG4gICAgICAgIC8vICAgaXN0IG1vc3RseSBlcXVhbFxuICAgICAgICBuYW1lID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0ubmFtZS5yZXBsYWNlKFwiJiM0MDtcIiwgXCIoXCIpLnJlcGxhY2UoXCImIzQxO1wiLCBcIilcIik7XG4gICAgICAgIGludGVyYWN0aW9uVmlldyA9IHNlbGYuYWRkVmlldyh7XG4gICAgICAgICAgbmFtZTogJ2RyYXc6JyArIChzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS50b29sdGlwIHx8IG5hbWUpLFxuICAgICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICAgIGxhYmVsOiBzdHlsZVRyaWdnZXJMYWJlbCxcbiAgICAgICAgICAgIHRpcExhYmVsOiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS50b29sdGlwIHx8IG5hbWUsXG4gICAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5FRElUT1JfRFJBV19UUklHR0VSLFxuICAgICAgICAgICAgdGFyZ2V0OiBkcmF3Q29udGVudCxcbiAgICAgICAgICAgIHdpdGhIZWFkbGluZTogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAgICB7c2VjdGlvbjogc2VsZi5jb250ZW50Q29udGFpbmVyLCBlbGVtZW50OiBkcmF3Q29udGVudH0sXG4gICAgICAgICAgICB7c2VjdGlvbjogc2VsZi50b3BUb29sYmFyLCBlbGVtZW50OiBzZWxmLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgaW5pdEZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25TdHlsZUltYWdlLFxuICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaCxcbiAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwO1xuXG4gICAgICAgICAgICAvLyBPbmx5IHNob3cgb3JpZ2luYWwgaWNvbiwgd2hlbiB0aGUgZHJhd2luZyBQT0lzXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdwb2ludCcgJiYgc3R5bGUuZ2V0SW1hZ2UoKSkge1xuICAgICAgICAgICAgICBpbnRlcmFjdGlvblN0eWxlSW1hZ2UgPSBzdHlsZS5nZXRJbWFnZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaW50ZXJhY3Rpb25TdHlsZUltYWdlID0gbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgZmlsbDogc3R5bGUuZ2V0RmlsbCgpLFxuICAgICAgICAgICAgICAgIHN0cm9rZTogc3R5bGUuZ2V0U3Ryb2tlKCksXG4gICAgICAgICAgICAgICAgcmFkaXVzOiA1LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IGFwcHJvcHJpYXRlIHNvdXJjZVxuICAgICAgICAgICAgc3dpdGNoIChvcHRpb25zLnR5cGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICBjYXNlICdmcmVlaGFuZCc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLmVkaXRGcmVlaGFuZExheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2NpcmNsZSc6XG4gICAgICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLmVkaXRDaXJjbGVMYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdwb2x5Z29uJzpcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLmVkaXRQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2xpbmVzdHJpbmcnOlxuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHNlbGYuZWRpdExpbmVMYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAncG9pbnQnOlxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHNlbGYuZWRpdFBvaW50TGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9sVHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICAgICAgICAgIGlmIChvbFR5cGUgPT0gJ0ZyZWVoYW5kJykge1xuICAgICAgICAgICAgICBvbFR5cGUgPSAnTGluZVN0cmluZydcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmVhdHVyZXMgPSBuZXcgb2wuQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgaW50ZXJhY3Rpb24gPSBuZXcgb2wuaW50ZXJhY3Rpb24uRHJhdyh7XG4gICAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlcyxcbiAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICAgIHR5cGU6IG9sVHlwZSxcbiAgICAgICAgICAgICAgZnJlZWhhbmQ6IG9wdGlvbnMudHlwZSA9PSAnRnJlZWhhbmQnLFxuICAgICAgICAgICAgICBzdHlsZTogW1xuICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsLjUpJyxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHN0eWxlLmdldFN0cm9rZSgpLmdldFdpZHRoKCkgKyAyXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIGltYWdlOiBpbnRlcmFjdGlvblN0eWxlSW1hZ2VcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IHN0eWxlLmdldEdlb21ldHJ5KCksXG4gICAgICAgICAgICAgICAgICBmaWxsOiBzdHlsZS5nZXRGaWxsKCksXG4gICAgICAgICAgICAgICAgICBzdHJva2U6IHN0eWxlLmdldFN0cm9rZSgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEBUT0RPIGRva3VcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICBpbnRlcmFjdGlvbi5vbignZHJhd3N0YXJ0JyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaCA9IGV2ZW50LmZlYXR1cmU7XG4gICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCdzdHlsZUlkJywgc3R5bGVJZCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94ICYmIGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwID0gbmV3IFRvb2x0aXBQb3BVcCh7XG4gICAgICAgICAgICAgICAgICAgICAgbWFwOiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAsXG4gICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGV2ZW50LmNvb3JkaW5hdGUsXG4gICAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBzZWxmKTtcblxuICAgICAgICAgICAgLy8gQFRPRE8gZG9rdVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5vbigncG9pbnRlcm1vdmUnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3ggJiYgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveC5jaGVja2VkICYmIGFjdGl2ZVNrZXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmKGFjdGl2ZVRvb2x0aXAgJiYgdXRpbHMubWVhc3VyZUdlb21ldHJ5KGFjdGl2ZVNrZXRjaC5nZXRHZW9tZXRyeSgpLCB0cnVlKS5yYXdWYWx1ZSAmJiB1dGlscy5tZWFzdXJlR2VvbWV0cnkoYWN0aXZlU2tldGNoLmdldEdlb21ldHJ5KCksIHRydWUpLnJhd1ZhbHVlID09IFwiMC4wMFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZighYWN0aXZlVG9vbHRpcCAmJiB1dGlscy5tZWFzdXJlR2VvbWV0cnkoYWN0aXZlU2tldGNoLmdldEdlb21ldHJ5KCksIHRydWUpLnJhd1ZhbHVlICYmIHV0aWxzLm1lYXN1cmVHZW9tZXRyeShhY3RpdmVTa2V0Y2guZ2V0R2VvbWV0cnkoKSwgdHJ1ZSkucmF3VmFsdWUgIT0gXCIwLjAwXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwID0gbmV3IFRvb2x0aXBQb3BVcCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXA6IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBldmVudC5jb29yZGluYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYoYWN0aXZlVG9vbHRpcCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXAuc2V0UG9zaXRpb24oZXZlbnQuY29vcmRpbmF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXAuc2V0Q29udGVudCh1dGlscy5tZWFzdXJlR2VvbWV0cnkoYWN0aXZlU2tldGNoLmdldEdlb21ldHJ5KCksIHRydWUpLmh0bWxWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHNlbGYpO1xuXG4gICAgICAgICAgICAvLyBAVE9ETyBkb2t1XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgaW50ZXJhY3Rpb24ub24oJ2RyYXdlbmQnLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgICAgdmFycyxcbiAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JWYXJzLFxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU7XG5cbiAgICAgICAgICAgICAgICAgIC8vIG5hbWUgdGhlIGZlYXR1cmVcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVJZENvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICBuYW1lID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0ubmFtZS5yZXBsYWNlKFwiJiM0MDtcIiwgXCIoXCIpLnJlcGxhY2UoXCImIzQxO1wiLCBcIilcIik7XG4gICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCd0b29sdGlwJywgKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnRvb2x0aXAgfHwgbmFtZSkgKyAnICgnICsgZmVhdHVyZUlkQ291bnQgKyAnKScpO1xuICAgICAgICAgICAgICAgICAgLy8gYWRkIHN0eWxlSWRcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaC5zZXQoJ3N0eWxlSWQnLCBzdHlsZUlkKTtcbiAgICAgICAgICAgICAgICAgIC8vIGFkZCBtZWFzdXJlbWVudHMgdG8gdGhlIGZlYXR1cmVcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaC5zZXQoJ21lYXN1cmVkTGVuZ3RoJywgdXRpbHMubWVhc3VyZUdlb21ldHJ5KGFjdGl2ZVNrZXRjaC5nZXRHZW9tZXRyeSgpLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdwb2x5Z29uJykge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCdtZWFzdXJlZEFyZWEnLCB1dGlscy5tZWFzdXJlR2VvbWV0cnkoYWN0aXZlU2tldGNoLmdldEdlb21ldHJ5KCkpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2NpcmNsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCdtZWFzdXJlZFJhZGl1cycsIHV0aWxzLm1lYXN1cmVHZW9tZXRyeShhY3RpdmVTa2V0Y2guZ2V0R2VvbWV0cnkoKSkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy9hY3RpdmVTa2V0Y2guc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgLy8gYWRkIGVkaXRvci12YXJzXG4gICAgICAgICAgICAgICAgICB2YXJzID0gZWRpdG9yU3R5bGUudmFycztcbiAgICAgICAgICAgICAgICAgIGVkaXRvclZhcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvclZhcnNbaV0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yVmFyc1tpXS5rZXkgPSB2YXJzW2ldLmtleTtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yVmFyc1tpXS5sYWJlbCA9IHZhcnNbaV0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvclZhcnNbaV0udmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaC5zZXQoJ2VkaXRvclZhcnMnLCBlZGl0b3JWYXJzKTtcbiAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IGFjdGl2ZS1lbGVtZW50IHZhcmlhYmxlc1xuICAgICAgICAgICAgICAgICAgYWN0aXZlU2tldGNoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVUb29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXAuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgc2VsZik7XG5cbiAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAgIH0sIC8vIGVuZCBvZiBcImluaXRGdW5jdGlvbigpXCJcblxuICAgICAgICAgIGFjdGl2YXRlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgLy8gZGVhY3RpdmF0ZSBtYXBIb3ZlclxuICAgICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwSG92ZXIuZGVhY3RpdmF0ZSgpO1xuXG4gICAgICAgICAgICAvLyBSZXNldCBmZWF0dXJlLWxpc3RcbiAgICAgICAgICAgIGZlYXR1cmVzLmNsZWFyKCk7XG5cbiAgICAgICAgICAgIC8vIEVuYWJsZSBpbnRlcmFjdGlvblxuICAgICAgICAgICAgLy8gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZEludGVyYWN0aW9uKGludGVyYWN0aW9uKTtcbiAgICAgICAgICAgIGludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBkZWFjdGl2YXRlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgLy8gcmVhY3RpdmF0ZSBtYXBIb3ZlclxuICAgICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwSG92ZXIuYWN0aXZhdGUoKTtcblxuICAgICAgICAgICAgLy8gZmluaXNoIGRyYXdpbmdzLCBpZiBub3QgYWxyZWFkeSBkb25lXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgIT09ICdwb2ludCcpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5maW5pc2hEcmF3aW5nKCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgICAgICAgICAgICAgIC8vIDBfb1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBmcm9tIG1hcFxuICAgICAgICAgICAgLy8gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUludGVyYWN0aW9uKGludGVyYWN0aW9uKTtcbiAgICAgICAgICAgIGludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGRyYXdWaWV3KTtcblxuICAgICAgICByZXR1cm4gaW50ZXJhY3Rpb25WaWV3O1xuICAgICAgfTtcblxuICAgICAgZHJhd1ZpZXcgPSBzZWxmLmFkZFZpZXcoe1xuICAgICAgICBuYW1lOiAnZHJhdzonICsgb3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50c1tUUklHR0VSX0RSQVddLFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzW1RSSUdHRVJfRFJBV10sXG4gICAgICAgICAgd2l0aEhlYWRsaW5lOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiBzZWxmLmNvbnRlbnRDb250YWluZXIsIGVsZW1lbnQ6IGRyYXdDb250ZW50fSxcbiAgICAgICAgICB7c2VjdGlvbjogc2VsZi50b3BUb29sYmFyLCBlbGVtZW50OiBzZWxmLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICBdLFxuICAgICAgICBpbml0RnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgc3R5bGVJZCxcbiAgICAgICAgICAgICAgbmVlZGVkU3R5bGVzLFxuICAgICAgICAgICAgICBzb3J0QW5kQWRkU3R5bGVzO1xuXG4gICAgICAgICAgLy8gU2hvdyBsb2FkaW5nIGFuaW1hdGlvblxuICAgICAgICAgIHNlbGYuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgICAgICBuZWVkZWRTdHlsZXMgPSBbXTtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBUT0RPXG4gICAgICAgICAgICogW3NvcnRBbmRBZGRTdHlsZXMgZGVzY3JpcHRpb25dXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHNvcnRBbmRBZGRTdHlsZXMgPSBmdW5jdGlvbiAoYXJyU3R5bGVJZHMpIHtcbiAgICAgICAgICAgIHZhciBqLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uU3R5bGVzLFxuICAgICAgICAgICAgICAgIGRyYXdJbnRlcmFjdGlvbixcbiAgICAgICAgICAgICAgICBzdHlsZUlkcztcblxuICAgICAgICAgICAgLy8gcHJlcGFyZVxuICAgICAgICAgICAgbG9jYXRpb25TdHlsZXMgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlcztcbiAgICAgICAgICAgIHN0eWxlSWRzID0gYXJyU3R5bGVJZHMgfHwgb3B0aW9ucy5zdHlsZUlkcztcbiAgICAgICAgICAgIGlmICghc3R5bGVJZHMgfHwgIWxvY2F0aW9uU3R5bGVzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc29ydFxuICAgICAgICAgICAgc3R5bGVJZHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgICAgICAgICAgIC8vVG9EbyBjaGVja1xuICAgICAgICAgICAgICBpZiAobG9jYXRpb25TdHlsZXNbYV0gJiYgbG9jYXRpb25TdHlsZXNbYl0gJiYgbG9jYXRpb25TdHlsZXNbYV0uZWRpdG9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKCghbG9jYXRpb25TdHlsZXNbYV0uZWRpdG9yLnNvcnQgJiYgIWxvY2F0aW9uU3R5bGVzW2JdLmVkaXRvci5zb3J0KSB8fCAobG9jYXRpb25TdHlsZXNbYV0uZWRpdG9yLnNvcnQgPT09IGxvY2F0aW9uU3R5bGVzW2JdLmVkaXRvci5zb3J0KSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhdGlvblN0eWxlc1thXS5uYW1lIHx8ICFsb2NhdGlvblN0eWxlc1tiXS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoIWxvY2F0aW9uU3R5bGVzW2JdLm5hbWUpID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIChsb2NhdGlvblN0eWxlc1thXS5uYW1lLnRvTG93ZXJDYXNlKCkgPiBsb2NhdGlvblN0eWxlc1tiXS5uYW1lLnRvTG93ZXJDYXNlKCkpID8gMSA6IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWxvY2F0aW9uU3R5bGVzW2FdLmVkaXRvci5zb3J0IHx8ICFsb2NhdGlvblN0eWxlc1tiXS5lZGl0b3Iuc29ydCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuICghbG9jYXRpb25TdHlsZXNbYl0uZWRpdG9yLnNvcnQpID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiAobG9jYXRpb25TdHlsZXNbYV0uZWRpdG9yLnNvcnQgPiBsb2NhdGlvblN0eWxlc1tiXS5lZGl0b3Iuc29ydCkgPyAxIDogLTE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pOyAvLyBlbmQgc29ydFxuXG4gICAgICAgICAgICAvLyBjcmVhdGVcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBzdHlsZUlkcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICBkcmF3SW50ZXJhY3Rpb24gPSBhZGREcmF3U3R5bGUoc3R5bGVJZHNbal0pO1xuICAgICAgICAgICAgICAvLyBhY3RpdmF0ZSB0aGUgZmlyc3QgZHJhd1N0eWxlXG4gICAgICAgICAgICAgIGlmIChqID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZHJhd0ludGVyYWN0aW9uLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH07IC8vIGVuZCBvZiBcInNvcnRBbmRBZGRTdHlsZXNcIlxuXG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgYWxsIG5lZWRlZCBzdHlsZXMgYXJlIGxvYWRlZFxuICAgICAgICAgIGlmICghc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXMpIHtcbiAgICAgICAgICAgIC8vIG5vIHN0eWxlcyBhcmUgbG9hZGVkLCBzbyBsb2FkIGFsbCBzdHlsZXNcbiAgICAgICAgICAgIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzID0ge307XG4gICAgICAgICAgICBuZWVkZWRTdHlsZXMgPSBvcHRpb25zLnN0eWxlSWRzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBjaGVjayB3aWNoIHN0eWxlcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG9wdGlvbnMuc3R5bGVJZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgc3R5bGVJZCA9IG9wdGlvbnMuc3R5bGVJZHNbaV07XG4gICAgICAgICAgICAgIGlmICghc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0gfHwgIXNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgbmVlZGVkU3R5bGVzLnB1c2goc3R5bGVJZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobmVlZGVkU3R5bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICghc2VsZi5wcm94eSkge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBsb2FkIGxvY1N0eWxlcywgYXMgdGhlIG1hcC1wcm94eSB3YXMgbm90IGluaXRpYWxsaXplZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIubG9hZExvY2F0aW9uU3R5bGVzKFxuICAgICAgICAgICAgICAgIG5lZWRlZFN0eWxlcyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvcnRBbmRBZGRTdHlsZXMoKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBhbHdheXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGlkZSBsb2FkaW5nLWFuaW1hdGlvblxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvcnRBbmRBZGRTdHlsZXMoKTtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBhY3RpdmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGRlYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRyYXdWaWV3O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJZiBvcHRfc2xvdCBpcyBlbXB0eSwgdGhlIGZ1bmN0aW9uIHdpbGwganVzdCBzYXZlIHRoZSBkYXRhIGluIHRoZSBzZXNzaW9uU3RvcmFnZS5cbiAgICAgKiBbc2F2ZSBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtbdHlwZV19ICBvcHRfc2xvdCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2F2ZTogZnVuY3Rpb24gKG9wdF9zbG90KSB7XG4gICAgICB2YXIgZm9ybWF0LFxuICAgICAgICAgIHNhdmVEYXRhLFxuICAgICAgICAgIHNsb3ROYW1lLFxuICAgICAgICAgIHN0b3JhZ2U7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gJ2JhY2tlbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cG9ydEdlb0pTT04oKTtcbiAgICAgIH1cblxuICAgICAgZm9ybWF0ID0gbmV3IG9sLmZvcm1hdC5HZW9KU09OKCk7XG4gICAgICBzYXZlRGF0YSA9IHt9O1xuXG4gICAgICBzYXZlRGF0YS5wb2ludHMgPSBmb3JtYXQud3JpdGVGZWF0dXJlcyh0aGlzLmVkaXRQb2ludExheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCkpO1xuICAgICAgc2F2ZURhdGEubGluZXMgPSBmb3JtYXQud3JpdGVGZWF0dXJlcyh0aGlzLmVkaXRMaW5lTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG4gICAgICBzYXZlRGF0YS5wb2x5Z29ucyA9IGZvcm1hdC53cml0ZUZlYXR1cmVzKHRoaXMuZWRpdFBvbHlnb25MYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpKTtcbiAgICAgIHNhdmVEYXRhLmNpcmNsZXMgPSBmb3JtYXQud3JpdGVGZWF0dXJlcyh0aGlzLmVkaXRDaXJjbGVMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpKTtcbiAgICAgIHNhdmVEYXRhLmZyZWVoYW5kID0gZm9ybWF0LndyaXRlRmVhdHVyZXModGhpcy5lZGl0RnJlZWhhbmRMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpKTtcblxuICAgICAgc2xvdE5hbWUgPSAnYzRnTWFwc18nO1xuICAgICAgc2xvdE5hbWUgKz0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5tYXBJZDtcbiAgICAgIHNsb3ROYW1lICs9ICdfJyArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgIGlmICghb3B0X3Nsb3QpIHtcbiAgICAgICAgc3RvcmFnZSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3ROYW1lICs9ICdfJyArIG9wdF9zbG90O1xuICAgICAgICBzdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgICAgIH1cbiAgICAgIC8vIENhbGwgaG9vayBmdW5jdGlvbnMgYmVmb3JlIHNhdmVcbiAgICAgIGlmIChjNGcubWFwcy5ob29rICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGM0Zy5tYXBzLmhvb2suZWRpdG9yX29uU2F2ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoYzRnLm1hcHMuaG9vay5lZGl0b3Jfb25TYXZlLCBzYXZlRGF0YSk7XG4gICAgICB9XG4gICAgICBzdG9yYWdlLnNldEl0ZW0oc2xvdE5hbWUsIEpTT04uc3RyaW5naWZ5KHNhdmVEYXRhKSk7XG5cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSWYgb3B0X3Nsb3QgaXMgZW1wdHksIHRoZSBmdW5jdGlvbiB3aWxsIGp1c3QgbG9hZCB0aGUgZGF0YSBmcm9tIHRoZSBzZXNzaW9uU3RvcmFnZS5cbiAgICAgKiBbbG9hZCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtbdHlwZV19ICBvcHRfc2xvdCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGxvYWQ6IGZ1bmN0aW9uIChvcHRfc2xvdCkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgc2VsZixcbiAgICAgICAgICBmb3JtYXQsXG4gICAgICAgICAgbG9hZERhdGEsXG4gICAgICAgICAgZmVhdHVyZUNvbGxlY3Rpb24sXG4gICAgICAgICAgc2xvdE5hbWUsXG4gICAgICAgICAgc3RvcmFnZSxcbiAgICAgICAgICBuZWVkZWRTdHlsZXMsXG4gICAgICAgICAgc3R5bGVJZCxcbiAgICAgICAgICBpbXBvcnRGZWF0dXJlcztcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICBmb3JtYXQgPSBuZXcgb2wuZm9ybWF0Lkdlb0pTT04oKTtcbiAgICAgIHNlbGYuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgIHNsb3ROYW1lID0gJ2M0Z01hcHNfJztcbiAgICAgIHNsb3ROYW1lICs9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEubWFwSWQ7XG4gICAgICBzbG90TmFtZSArPSAnXycgKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICBpZiAoIW9wdF9zbG90KSB7XG4gICAgICAgIHN0b3JhZ2UgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90TmFtZSArPSAnXycgKyBvcHRfc2xvdDtcbiAgICAgICAgc3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gICAgICB9XG4gICAgICBsb2FkRGF0YSA9IHN0b3JhZ2UuZ2V0SXRlbShzbG90TmFtZSk7XG4gICAgICBpZiAoIWxvYWREYXRhKSB7XG4gICAgICAgIHNlbGYuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGxvYWREYXRhID0gSlNPTi5wYXJzZShsb2FkRGF0YSk7XG5cbiAgICAgIGZlYXR1cmVDb2xsZWN0aW9uID0gW107XG4gICAgICBuZWVkZWRTdHlsZXMgPSBbXTtcblxuICAgICAgZmVhdHVyZUNvbGxlY3Rpb24gPSBmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLnBvaW50cykuY29uY2F0KGZvcm1hdC5yZWFkRmVhdHVyZXMobG9hZERhdGEubGluZXMpLCBmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLnBvbHlnb25zKSwgZm9ybWF0LnJlYWRGZWF0dXJlcyhsb2FkRGF0YS5jaXJjbGVzKSwgZm9ybWF0LnJlYWRGZWF0dXJlcyhsb2FkRGF0YS5mcmVlaGFuZCkpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGZlYXR1cmVDb2xsZWN0aW9uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0eWxlSWQgPSBmZWF0dXJlQ29sbGVjdGlvbltpXS5nZXQoJ3N0eWxlSWQnKTtcblxuICAgICAgICBpZiAoKCFzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXSB8fCAhc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUpICYmICQuaW5BcnJheShzdHlsZUlkLCBuZWVkZWRTdHlsZXMpID09PSAtMSkge1xuICAgICAgICAgIG5lZWRlZFN0eWxlcy5wdXNoKHN0eWxlSWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGltcG9ydEZlYXR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLmVkaXRQb2ludExheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGZvcm1hdC5yZWFkRmVhdHVyZXMobG9hZERhdGEucG9pbnRzKSk7XG4gICAgICAgIHNlbGYuZWRpdExpbmVMYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLmxpbmVzKSk7XG4gICAgICAgIHNlbGYuZWRpdFBvbHlnb25MYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLnBvbHlnb25zKSk7XG4gICAgICAgIHNlbGYuZWRpdENpcmNsZUxheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGZvcm1hdC5yZWFkRmVhdHVyZXMobG9hZERhdGEuY2lyY2xlcykpO1xuICAgICAgICBzZWxmLmVkaXRGcmVlaGFuZExheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGZvcm1hdC5yZWFkRmVhdHVyZXMobG9hZERhdGEuZnJlZWhhbmQpKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChuZWVkZWRTdHlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoIXNlbGYucHJveHkpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBsb2FkIGxvY1N0eWxlcywgYXMgdGhlIG1hcC1wcm94eSB3YXMgbm90IGluaXRpYWxsaXplZC4nKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMoXG4gICAgICAgICAgICBuZWVkZWRTdHlsZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbXBvcnRGZWF0dXJlcygpO1xuICAgICAgICAgICAgICAgIC8vIENhbGwgaG9vayBmdW5jdGlvbnMgb24gbG9hZFxuICAgICAgICAgICAgICAgIGlmIChjNGcubWFwcy5ob29rICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGM0Zy5tYXBzLmhvb2suZWRpdG9yX29uTG9hZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKGM0Zy5tYXBzLmhvb2suZWRpdG9yX29uTG9hZCwgbG9hZERhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYWx3YXlzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gSGlkZSBsb2FkaW5nLWFuaW1hdGlvblxuICAgICAgICAgICAgICAgIHNlbGYuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltcG9ydEZlYXR1cmVzKCk7XG4gICAgICAgIHNlbGYuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgIC8vIENhbGwgaG9vayBmdW5jdGlvbnMgb24gbG9hZFxuICAgICAgICBpZiAoYzRnLm1hcHMuaG9vayAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjNGcubWFwcy5ob29rLmVkaXRvcl9vbkxvYWQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoYzRnLm1hcHMuaG9vay5lZGl0b3Jfb25Mb2FkLCBsb2FkRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAvLyBFbmQgb2YgXCJsb2FkXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbZXhwb3J0IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBleHBvcnRHZW9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZm9ybWF0LFxuICAgICAgICAgIGZlYXR1cmVzO1xuXG4gICAgICBmb3JtYXQgPSBuZXcgb2wuZm9ybWF0Lkdlb0pTT04oKTtcblxuICAgICAgZmVhdHVyZXMgPSB0aGlzLmVkaXRQb2ludExheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICBmZWF0dXJlcyA9IGZlYXR1cmVzLmNvbmNhdCh0aGlzLmVkaXRMaW5lTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG4gICAgICBmZWF0dXJlcyA9IGZlYXR1cmVzLmNvbmNhdCh0aGlzLmVkaXRQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG4gICAgICBmZWF0dXJlcyA9IGZlYXR1cmVzLmNvbmNhdCh0aGlzLmVkaXRDaXJjbGVMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpKTtcbiAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXMuY29uY2F0KHRoaXMuZWRpdEZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG5cbiAgICAgIGZlYXR1cmVzID0gZm9ybWF0LndyaXRlRmVhdHVyZXMoZmVhdHVyZXMpO1xuICAgICAgLy8gZmVhdHVyZXMgPSBKU09OLnN0cmluZ2lmeShmZWF0dXJlcyk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gJ2JhY2tlbmQnICYmIHRoaXMub3B0aW9ucy5kYXRhRmllbGQpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmRhdGFGaWVsZC52YWwoZmVhdHVyZXMpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJleHBvcnRcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtpbXBvcnQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGltcG9ydEdlb0pTT046IGZ1bmN0aW9uIChvcHRfZ2VvanNvbikge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgc3R5bGVJZCxcbiAgICAgICAgICBmb3JtYXQsXG4gICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgcG9pbnRzLFxuICAgICAgICAgIGZyZWVoYW5kLFxuICAgICAgICAgIGxpbmVzLFxuICAgICAgICAgIHBvbHlnb25zLFxuICAgICAgICAgIGNpcmNsZXMsXG4gICAgICAgICAgbmVlZGVkU3R5bGVzLFxuICAgICAgICAgIGltcG9ydEZlYXR1cmVzLFxuICAgICAgICAgIGk7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnR5cGUgPT09ICdiYWNrZW5kJyAmJiB0aGlzLm9wdGlvbnMuZGF0YUZpZWxkKSB7XG4gICAgICAgIGZlYXR1cmVzID0gdGhpcy5vcHRpb25zLmRhdGFGaWVsZC52YWwoKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0X2dlb2pzb24pIHtcbiAgICAgICAgZmVhdHVyZXMgPSBvcHRfZ2VvanNvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmZWF0dXJlcykge1xuICAgICAgICAvLyBubyBmZWF0dXJlcyB0byBsb2FkXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gdHJ5IHtcbiAgICAgIC8vICAgZmVhdHVyZXMgPSBKU09OLnBhcnNlKGZlYXR1cmVzKTtcbiAgICAgIC8vIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgZm9ybWF0ID0gbmV3IG9sLmZvcm1hdC5HZW9KU09OKCk7XG4gICAgICB0cnkge1xuICAgICAgICBmZWF0dXJlcyA9IGZvcm1hdC5yZWFkRmVhdHVyZXMoZmVhdHVyZXMpO1xuICAgICAgfSBjYXRjaCAoaWdub3JlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGxvYWQgZmVhdHVyZXM6IEludmFsaWQgSlNPTiBzdHJpbmcuLi4nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBuZWVkZWRTdHlsZXMgPSBbXTtcbiAgICAgIHBvaW50cyA9IFtdO1xuICAgICAgZnJlZWhhbmQgPSBbXTtcbiAgICAgIGxpbmVzID0gW107XG4gICAgICBwb2x5Z29ucyA9IFtdO1xuICAgICAgY2lyY2xlcyA9IFtdO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGZlYXR1cmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0eWxlSWQgPSBmZWF0dXJlc1tpXS5nZXQoJ3N0eWxlSWQnKSB8fCBmZWF0dXJlc1tpXS5nZXQoJ2xvY3N0eWxlJykgfHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKGZlYXR1cmVzW2ldICYmIHR5cGVvZiBmZWF0dXJlc1tpXS5nZXRHZW9tZXRyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGlmIChmZWF0dXJlc1tpXS5nZXRHZW9tZXRyeSgpIGluc3RhbmNlb2Ygb2wuZ2VvbS5Qb2ludCkge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goZmVhdHVyZXNbaV0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZmVhdHVyZXNbaV0uZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uTGluZVN0cmluZykge1xuICAgICAgICAgICAgaWYgKGZlYXR1cmVzLm9wdGlvbnMgJiYgZmVhdHVyZXMub3B0aW9ucy50eXBlICYmIGZlYXR1cmVzLm9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpID09ICdmcmVlaGFuZCcpIHtcbiAgICAgICAgICAgICAgICBmcmVlaGFuZC5wdXNoKGZlYXR1cmVzW2ldKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChmZWF0dXJlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlc1tpXS5nZXRHZW9tZXRyeSgpIGluc3RhbmNlb2Ygb2wuZ2VvbS5Qb2x5Z29uKSB7XG4gICAgICAgICAgICBwb2x5Z29ucy5wdXNoKGZlYXR1cmVzW2ldKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmVzW2ldLmdldEdlb21ldHJ5KCkgaW5zdGFuY2VvZiBvbC5nZW9tLkNpcmNsZSkge1xuICAgICAgICAgICAgY2lyY2xlcy5wdXNoKGZlYXR1cmVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdDYW5ub3QgbG9hZCBmZWF0dXJlIHdpdGhvdXQgZ2VvbWV0cnkuJyk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0eWxlSWQgJiYgKCFzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXSB8fCAhc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUpICYmICQuaW5BcnJheShzdHlsZUlkLCBuZWVkZWRTdHlsZXMpID09PSAtMSkge1xuICAgICAgICAgIG5lZWRlZFN0eWxlcy5wdXNoKHN0eWxlSWQpO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgaW1wb3J0RmVhdHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuZWRpdFBvaW50TGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZXMocG9pbnRzKTtcbiAgICAgICAgc2VsZi5lZGl0TGluZUxheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGxpbmVzKTtcbiAgICAgICAgc2VsZi5lZGl0UG9seWdvbkxheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKHBvbHlnb25zKTtcbiAgICAgICAgc2VsZi5lZGl0Q2lyY2xlTGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZXMoY2lyY2xlcyk7XG4gICAgICAgIHNlbGYuZWRpdEZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZXMoZnJlZWhhbmQpO1xuICAgICAgICB1dGlscy5maXRUb0V4dGVudChcbiAgICAgICAgICAgIHV0aWxzLmdldEV4dGVudEZvckdlb21ldHJpZXMocG9pbnRzLmNvbmNhdChsaW5lcywgcG9seWdvbnMsIGNpcmNsZXMsIGZyZWVoYW5kKSksXG4gICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAsXG4gICAgICAgICAgICBbMjUsIDI1LCAyNSwgc2VsZi5jb250YWluZXIub2Zmc2V0V2lkdGggKyAyNV0sXG4gICAgICAgICAgICAxMDAwXG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnNwaW5uZXIuc2hvdygpO1xuICAgICAgaWYgKG5lZWRlZFN0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICghc2VsZi5wcm94eSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGxvYWQgbG9jU3R5bGVzLCBhcyB0aGUgbWFwLXByb3h5IHdhcyBub3QgaW5pdGlhbGxpemVkLicpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhcbiAgICAgICAgICAgIG5lZWRlZFN0eWxlcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZG9uZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGltcG9ydEZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFsd2F5czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIEhpZGUgbG9hZGluZy1hbmltYXRpb25cbiAgICAgICAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbXBvcnRGZWF0dXJlcygpO1xuICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgfVxuXG4gICAgfSAvLyBlbmQgb2YgXCJpbXBvcnRcIlxuXG4gIH0pO1xuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBFZGl0b3IgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuRWRpdG9yO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1lZGl0b3IuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtTaWRlYm9hcmR9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc2lkZWJvYXJkXCI7XG5pbXBvcnQge1Rvb2x0aXBQb3BVcH0gZnJvbSBcIi4vYzRnLW1hcHMtbWlzYy10b29sdGlwcG9wdXBcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZCB7YzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmR9XG4gICAqXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gIG1hcENvbnRyb2xsZXIgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuTWVhc3VyZXRvb2xzID0gZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICAvLyBleHRlbmQgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIG5hbWU6ICdtZWFzdXJlJyxcbiAgICAgIGhlYWRsaW5lOiBsYW5nQ29uc3RhbnRzLk1FQVNVUkVUT09MUyxcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgIGRpcmVjdGlvbjogJ2xlZnQnLFxuICAgICAgZmlyc3RFbGVtZW50OiB0cnVlXG4gICAgfSwgb3B0X29wdGlvbnMpO1xuXG4gICAgdGhpcy5tYWluU2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgLy8gY2FsbCBwYXJlbnQgY29uc3RydWN0b3JcbiAgICBTaWRlYm9hcmQuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMpO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLk1lYXN1cmV0b29scywgU2lkZWJvYXJkKTtcblxuICAvKipcbiAgICogTWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5NZWFzdXJldG9vbHMucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5NZWFzdXJldG9vbHMucHJvdG90eXBlLCB7XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlZCB3aGVuIHRoZSBwYW5lbCB3aWxsIGJlIG9wZW5lZCBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gICAgICogW2luaXQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gIFJldHVybnMgfHRydWV8IG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHRoaXMuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgIC8vIEFkZCBtZWFzdXJlIGxheWVyc1xuICAgICAgdGhpcy5tZWFzdXJlTGluZUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpfSk7XG4gICAgICB0aGlzLm1lYXN1cmVQb2x5Z29uTGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yKHtzb3VyY2U6IG5ldyBvbC5zb3VyY2UuVmVjdG9yKCl9KTtcbiAgICAgIHRoaXMubWVhc3VyZUNpcmNsZUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpfSk7XG4gICAgICB0aGlzLm1lYXN1cmVGcmVlaGFuZExheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpfSk7XG5cbiAgICAgIHRoaXMubWVhc3VyZUxheWVyR3JvdXAgPSBuZXcgb2wubGF5ZXIuR3JvdXAoe1xuICAgICAgICBsYXllcnM6IG5ldyBvbC5Db2xsZWN0aW9uKFtcbiAgICAgICAgICB0aGlzLm1lYXN1cmVGcmVlaGFuZExheWVyLFxuICAgICAgICAgIHRoaXMubWVhc3VyZUNpcmNsZUxheWVyLFxuICAgICAgICAgIHRoaXMubWVhc3VyZVBvbHlnb25MYXllcixcbiAgICAgICAgICB0aGlzLm1lYXN1cmVMaW5lTGF5ZXIsXG4gICAgICAgIF0pLFxuICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcih0aGlzLm1lYXN1cmVMYXllckdyb3VwKTtcblxuICAgICAgLy8gQWRkIGFuZCBhY3RpdmF0ZSBtZWFzdXJlLVZpZXdzXG4gICAgICB0aGlzLnZpZXdNZWFzdXJlU2VsZWN0ID0gdGhpcy5hZGRTZWxlY3RWaWV3KCk7XG4gICAgICB0aGlzLnZpZXdNZWFzdXJlU2VsZWN0LmFjdGl2YXRlKCk7XG4gICAgICB0aGlzLnZpZXdNZWFzdXJlTGluZSA9IHRoaXMuYWRkTWVhc3VyZVZpZXcoe3R5cGU6ICdMaW5lU3RyaW5nJ30pO1xuICAgICAgdGhpcy52aWV3TWVhc3VyZUFyZWEgPSB0aGlzLmFkZE1lYXN1cmVWaWV3KHt0eXBlOiAnUG9seWdvbid9KTtcbiAgICAgIHRoaXMudmlld01lYXN1cmVSYWRpdXMgPSB0aGlzLmFkZE1lYXN1cmVWaWV3KHt0eXBlOiAnQ2lyY2xlJ30pO1xuICAgICAgdGhpcy52aWV3TWVhc3VyZUZyZWVoYW5kID0gdGhpcy5hZGRNZWFzdXJlVmlldyh7dHlwZTogJ0ZyZWVoYW5kJ30pO1xuXG4gICAgICAvLyBzZXQgY29udGVudC1zZWN0aW9uXG4gICAgICB0aGlzLm1haW5TZWN0aW9uSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgIHRoaXMubWFpblNlY3Rpb25JbmZvLmlubmVySFRNTCA9IGxhbmdDb25zdGFudHMuTUVBU1VSRVRPT0xTX0lORk87XG4gICAgICB0aGlzLm1haW5TZWN0aW9uSW5mby5pbm5lckhUTUwgKz0gJzxicj48YnI+PHN1Yj4nICsgbGFuZ0NvbnN0YW50cy5NRUFTVVJFVE9PTFNfSU5GT19BRERJVElPTkFMICsgJzxzdWI+JztcbiAgICAgIHRoaXMubWFpblNlY3Rpb24uYXBwZW5kQ2hpbGQodGhpcy5tYWluU2VjdGlvbkluZm8pO1xuICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMubWFpblNlY3Rpb24pO1xuXG4gICAgICB0aGlzLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgLy8gZW5kIG9mIFwiaW5pdCgpXCJcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVkIGJlZm9yZSBwYW5lbCB3aWxsIGJlIGNsb3NlZFxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBwcmVDbG9zZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbGluZUZlYXR1cmVzLFxuICAgICAgICAgIHBvbHlnb25GZWF0dXJlcyxcbiAgICAgICAgICBjaXJjbGVGZWF0dXJlcyxcbiAgICAgICAgICBmcmVlaGFuZEZlYXR1cmVzLFxuICAgICAgICAgIGk7XG5cbiAgICAgIGlmICh0aGlzLm1lYXN1cmVMYXllckdyb3VwLmdldFZpc2libGUoKSkge1xuICAgICAgICB0aGlzLm1lYXN1cmVMYXllckdyb3VwLnNldFZpc2libGUoZmFsc2UpO1xuXG4gICAgICAgIC8vIGhpZGUgbGluZS1mZWF0dXJlIHRvb2x0aXBzXG4gICAgICAgIGxpbmVGZWF0dXJlcyA9IHRoaXMubWVhc3VyZUxpbmVMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGluZUZlYXR1cmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgbGluZUZlYXR1cmVzW2ldLmdldCgndG9vbHRpcCcpLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBoaWRlIHBvbHlnb24tZmVhdHVyZSB0b29sdGlwc1xuICAgICAgICBwb2x5Z29uRmVhdHVyZXMgPSB0aGlzLm1lYXN1cmVQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvbHlnb25GZWF0dXJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHBvbHlnb25GZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGlkZSBjaXJjbGUtZmVhdHVyZSB0b29sdGlwc1xuICAgICAgICBjaXJjbGVGZWF0dXJlcyA9IHRoaXMubWVhc3VyZUNpcmNsZUxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaXJjbGVGZWF0dXJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY2lyY2xlRmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJykuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGhpZGUgZnJlZWhhbmQtZmVhdHVyZSB0b29sdGlwc1xuICAgICAgICBmcmVlaGFuZEZlYXR1cmVzID0gdGhpcy5tZWFzdXJlRnJlZWhhbmRMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZnJlZWhhbmRGZWF0dXJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgZnJlZWhhbmRGZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJwcmVDbG9zZUZ1bmN0aW9uKClcIlxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZWQgYmVmb3JlIHBhbmVsIHdpbGwgYmUgb3BlbmVkXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHByZU9wZW5GdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGxpbmVGZWF0dXJlcyxcbiAgICAgICAgICBwb2x5Z29uRmVhdHVyZXMsXG4gICAgICAgICAgY2lyY2xlRmVhdHVyZXMsXG4gICAgICAgICAgZnJlZWhhbmRGZWF0dXJlcyxcbiAgICAgICAgICBpO1xuXG4gICAgICBpZiAoIXRoaXMubWVhc3VyZUxheWVyR3JvdXAuZ2V0VmlzaWJsZSgpKSB7XG4gICAgICAgIHRoaXMubWVhc3VyZUxheWVyR3JvdXAuc2V0VmlzaWJsZSh0cnVlKTtcblxuICAgICAgICAvLyBzaG93IGxpbmUtZmVhdHVyZSB0b29sdGlwc1xuICAgICAgICBsaW5lRmVhdHVyZXMgPSB0aGlzLm1lYXN1cmVMaW5lTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpbmVGZWF0dXJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGxpbmVGZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKS5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2hvdyBwb2x5Z29uLWZlYXR1cmUgdG9vbHRpcHNcbiAgICAgICAgcG9seWdvbkZlYXR1cmVzID0gdGhpcy5tZWFzdXJlUG9seWdvbkxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwb2x5Z29uRmVhdHVyZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBwb2x5Z29uRmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJykuc2hvdygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNob3cgY2lyY2xlLWZlYXR1cmUgdG9vbHRpcHNcbiAgICAgICAgY2lyY2xlRmVhdHVyZXMgPSB0aGlzLm1lYXN1cmVDaXJjbGVMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2lyY2xlRmVhdHVyZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNpcmNsZUZlYXR1cmVzW2ldLmdldCgndG9vbHRpcCcpLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzaG93IGZyZWVoYW5kLWZlYXR1cmUgdG9vbHRpcHNcbiAgICAgICAgZnJlZWhhbmRGZWF0dXJlcyA9IHRoaXMubWVhc3VyZUZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGZyZWVoYW5kRmVhdHVyZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGZyZWVoYW5kRmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJykuc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwicHJlT3BlbkZ1bmN0aW9uKClcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthZGRTZWxlY3RWaWV3IGRlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFkZFNlbGVjdFZpZXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxlY3RWaWV3O1xuXG4gICAgICBzZWxlY3RWaWV3ID0gdGhpcy5hZGRWaWV3KHtcbiAgICAgICAgbmFtZTogJ3NlbGVjdCcsXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5NRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX1NFTEVDVCxcbiAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5NRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX1NFTEVDVCxcbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMuY29udGVudENvbnRhaW5lciwgZWxlbWVudDogdGhpcy5tYWluU2VjdGlvbn0sXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMudG9wVG9vbGJhciwgZWxlbWVudDogdGhpcy52aWV3VHJpZ2dlckJhcn1cbiAgICAgICAgXVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzZWxlY3RWaWV3O1xuICAgIH0sIC8vIGVuZCBvZiBcImFkZFNlbGVjdFZpZXcoKVwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2FkZE1lYXN1cmVWaWV3IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgb3B0aW9ucyAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFkZE1lYXN1cmVWaWV3OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgVFJJR0dFUl9EUkFXLFxuICAgICAgICAgIG1lYXN1cmVWaWV3LFxuICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICBpbnRlcmFjdGlvbixcbiAgICAgICAgICBmZWF0dXJlcyxcbiAgICAgICAgICBvbFR5cGU7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgICB0eXBlOiAnTGluZVN0cmluZydcbiAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICBUUklHR0VSX0RSQVcgPSAnTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXXycgKyBvcHRpb25zLnR5cGUudG9VcHBlckNhc2UoKTtcblxuICAgICAgbWVhc3VyZVZpZXcgPSBzZWxmLmFkZFZpZXcoe1xuICAgICAgICBuYW1lOiAnZHJhdzonICsgb3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50c1tUUklHR0VSX0RSQVddLFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzW1RSSUdHRVJfRFJBV10sXG4gICAgICAgICAgd2l0aEhlYWRsaW5lOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiBzZWxmLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHNlbGYudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF0sXG4gICAgICAgIGluaXRGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBmZWF0dXJlSWRDb3VudCxcbiAgICAgICAgICAgICAgYWN0aXZlU2tldGNoLFxuICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwLFxuICAgICAgICAgICAgICBhZGRNZWFzdXJlRmVhdHVyZSxcbiAgICAgICAgICAgICAgdXBkYXRlTWVhc3VyZUZlYXR1cmUsXG4gICAgICAgICAgICAgIGdldFZhbHVlT2ZHZW9tZXRyeSxcbiAgICAgICAgICAgICAgZ2V0TGVuZ3RoT2ZNZWFzdXJlLFxuICAgICAgICAgICAgICByZW1vdmVNZWFzdXJlRmVhdHVyZTtcblxuICAgICAgICAgIC8vIFNob3cgbG9hZGluZyBhbmltYXRpb25cbiAgICAgICAgICBzZWxmLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgICAgZmVhdHVyZUlkQ291bnQgPSAxO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZnJlZWhhbmQnKSB7XG4gICAgICAgICAgICAgIHNvdXJjZSA9IHNlbGYubWVhc3VyZUZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2NpcmNsZScpIHtcbiAgICAgICAgICAgICAgc291cmNlID0gc2VsZi5tZWFzdXJlQ2lyY2xlTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3BvbHlnb24nKSB7XG4gICAgICAgICAgICAgIHNvdXJjZSA9IHNlbGYubWVhc3VyZVBvbHlnb25MYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLm1lYXN1cmVMaW5lTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmVhdHVyZXMgPSBuZXcgb2wuQ29sbGVjdGlvbigpO1xuXG4gICAgICAgICAgb2xUeXBlID0gb3B0aW9ucy50eXBlO1xuICAgICAgICAgIGlmIChvbFR5cGUgPT0gJ0ZyZWVoYW5kJykge1xuICAgICAgICAgICAgICBvbFR5cGUgPSAnTGluZVN0cmluZyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLkRyYXcoe1xuICAgICAgICAgICAgZmVhdHVyZXM6IGZlYXR1cmVzLFxuICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICB0eXBlOiBvbFR5cGUsXG4gICAgICAgICAgICBmcmVlaGFuZDogb3B0aW9ucy50eXBlID09ICdGcmVlaGFuZCcsXG4gICAgICAgICAgICAvLyBAVE9ETzogdXNlIGN1c3RvbSBzdHlsZT8gKEJFLW9wdGlvbilcbiAgICAgICAgICAgIC8vIHN0eWxlOiB1c2UgZGVmYXVsdCBzdHlsZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYWRkTWVhc3VyZUZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgdmFyIGxpc3RFbGVtZW50LFxuICAgICAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudCxcbiAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LFxuICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgc3Ryb25nRWxlbWVudCxcbiAgICAgICAgICAgICAgICBzcGFuRWxlbWVudCxcbiAgICAgICAgICAgICAgICBzdHJMYWJlbCxcbiAgICAgICAgICAgICAgICBzdHJUeXBlLFxuICAgICAgICAgICAgICAgIG1lYXN1cmVBcmVhLFxuICAgICAgICAgICAgICAgIG1lYXN1cmVSYWRpdXM7XG5cbiAgICAgICAgICAgIGlmICghZmVhdHVyZSBpbnN0YW5jZW9mIG9sLkZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgaW5mb21lc3NhZ2UgbmVlZHMgdG8gYmUgcmVtb3ZlZFxuICAgICAgICAgICAgaWYgKHNlbGYubWFpblNlY3Rpb24uY2hpbGRFbGVtZW50Q291bnQgPT09IDEgJiYgc2VsZi5tYWluU2VjdGlvbi5jaGlsZHJlblswXSA9PT0gc2VsZi5tYWluU2VjdGlvbkluZm8pIHtcbiAgICAgICAgICAgICAgc2VsZi5tYWluU2VjdGlvbi5yZW1vdmVDaGlsZChzZWxmLm1haW5TZWN0aW9uSW5mbyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGZlYXR1cmUtdHlwZVxuICAgICAgICAgICAgaWYgKGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uTGluZVN0cmluZykge1xuICAgICAgICAgICAgICBzdHJMYWJlbCA9IGxhbmdDb25zdGFudHMuTEVOR1RIO1xuICAgICAgICAgICAgICBzdHJUeXBlID0gbGFuZ0NvbnN0YW50cy5MSU5FO1xuICAgICAgICAgICAgICBtZWFzdXJlQXJlYSA9IGZhbHNlO1xuICAgICAgICAgICAgICBtZWFzdXJlUmFkaXVzID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbikge1xuICAgICAgICAgICAgICBzdHJMYWJlbCA9IGxhbmdDb25zdGFudHMuUEVSSU1FVEVSO1xuICAgICAgICAgICAgICBzdHJUeXBlID0gbGFuZ0NvbnN0YW50cy5QT0xZR09OO1xuICAgICAgICAgICAgICBtZWFzdXJlQXJlYSA9IHRydWU7XG4gICAgICAgICAgICAgIG1lYXN1cmVSYWRpdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmVhdHVyZS5nZXRHZW9tZXRyeSgpIGluc3RhbmNlb2Ygb2wuZ2VvbS5DaXJjbGUpIHtcbiAgICAgICAgICAgICAgc3RyTGFiZWwgPSBsYW5nQ29uc3RhbnRzLlJBRElVUztcbiAgICAgICAgICAgICAgc3RyVHlwZSA9IGxhbmdDb25zdGFudHMuQ0lSQ0xFO1xuICAgICAgICAgICAgICBtZWFzdXJlQXJlYSA9IHRydWU7XG4gICAgICAgICAgICAgIG1lYXN1cmVSYWRpdXMgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy9mcmVlaGFuZCBpc3QgTGluZVN0cmluZyB0b29cbiAgICAgICAgICAgICAgc3RyTGFiZWwgPSBsYW5nQ29uc3RhbnRzLkxFTkdUSDtcbiAgICAgICAgICAgICAgc3RyVHlwZSA9IGxhbmdDb25zdGFudHMuRlJFRUhBTkQ7XG4gICAgICAgICAgICAgIG1lYXN1cmVBcmVhID0gZmFsc2U7XG4gICAgICAgICAgICAgIG1lYXN1cmVSYWRpdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY3JlYXRlIGxpc3QgZWxlbWVudFxuICAgICAgICAgICAgbGlzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIGFuZCBhcHBlbmQgaGVhZGxpbmVcbiAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LmNsYXNzTmFtZSA9ICdjNGdfbWFwc19wb3J0c2lkZV9tZWFzdXJlX2VsZW1lbnQnO1xuICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5maXJzdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBoZWFkbGluZUVsZW1lbnQuY2xhc3NOYW1lID0gJ2M0Z19tYXBzX3BvcnRzaWRlX21lYXN1cmVfZWxlbWVudCBjNGdfbWFwc19wb3J0c2lkZV9tZWFzdXJlX2VsZW1lbnRfZmlyc3QnO1xuICAgICAgICAgICAgICAgIHNlbGYub3B0aW9ucy5maXJzdEVsZW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpc3RFbGVtZW50LmFwcGVuZENoaWxkKGhlYWRsaW5lRWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbmQgYXBwZW5kIGxhYmVsIGZvciBuYW1lLWlucHV0ZmllbGRcbiAgICAgICAgICAgIGxhYmVsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgICAgICBsYWJlbEVsZW1lbnQuc2V0QXR0cmlidXRlKCdmb3InLCAnbWVhc3VyZUVsZW1lbnRfJyArIGZlYXR1cmVJZENvdW50KTtcbiAgICAgICAgICAgIGxhYmVsRWxlbWVudC5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLk5BTUUgKyAnOiAnO1xuICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LmFwcGVuZENoaWxkKGxhYmVsRWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbmQgYXBwZW5kIG5hbWUtaW5wdXRmaWVsZFxuICAgICAgICAgICAgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGlucHV0RWxlbWVudC50eXBlID0gJ3RleHQnO1xuICAgICAgICAgICAgaW5wdXRFbGVtZW50Lm5hbWUgPSAnbWVhc3VyZUVsZW1lbnRfJyArIGZlYXR1cmVJZENvdW50O1xuICAgICAgICAgICAgaW5wdXRFbGVtZW50LnZhbHVlID0gc3RyVHlwZSArICcgJyArIGZlYXR1cmVJZENvdW50O1xuICAgICAgICAgICAgLy8gYXR0YWNoLWNoYW5nZS1oYW5kbGVyXG4gICAgICAgICAgICAkKGlucHV0RWxlbWVudCkuY2hhbmdlKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICB1cGRhdGVNZWFzdXJlRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LmFwcGVuZENoaWxkKGlucHV0RWxlbWVudCk7XG4gICAgICAgICAgICBmZWF0dXJlLnNldCgnbGlzdEVsZW1lbnRWYWx1ZU5hbWUnLCBpbnB1dEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAvLyBjcmVhdGUgYW5kIGFwcGVuZCBwYXJhZ3JhcGhzXG4gICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5jbGFzc05hbWUgPSAnYzRnX21hcHNfcG9ydHNpZGVfbWVhc3VyZV9wYXJhZ3JhcGgnO1xuICAgICAgICAgICAgc3Ryb25nRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0cm9uZycpO1xuICAgICAgICAgICAgc3Ryb25nRWxlbWVudC5pbm5lckhUTUwgPSBzdHJMYWJlbCArICc6ICc7XG4gICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKHN0cm9uZ0VsZW1lbnQpO1xuICAgICAgICAgICAgc3BhbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBzcGFuRWxlbWVudC5pbm5lckhUTUwgPSAnLi4uJztcbiAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQuYXBwZW5kQ2hpbGQoc3BhbkVsZW1lbnQpO1xuICAgICAgICAgICAgbGlzdEVsZW1lbnQuYXBwZW5kQ2hpbGQocGFyYWdyYXBoRWxlbWVudCk7XG4gICAgICAgICAgICBmZWF0dXJlLnNldCgnbGlzdEVsZW1lbnRWYWx1ZUxpbmUnLCBzcGFuRWxlbWVudCk7XG5cbiAgICAgICAgICAgIGlmIChtZWFzdXJlQXJlYSkge1xuICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmNsYXNzTmFtZSA9ICdjNGdfbWFwc19wb3J0c2lkZV9tZWFzdXJlX3BhcmFncmFwaF9zdXJmYWNlYXJlYSc7XG4gICAgICAgICAgICAgIHN0cm9uZ0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHJvbmcnKTtcbiAgICAgICAgICAgICAgc3Ryb25nRWxlbWVudC5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLlNVUkZBQ0VBUkVBICsgJzogJztcbiAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5hcHBlbmRDaGlsZChzdHJvbmdFbGVtZW50KTtcbiAgICAgICAgICAgICAgc3BhbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgIHNwYW5FbGVtZW50LmlubmVySFRNTCA9ICcuLi4nO1xuICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKHNwYW5FbGVtZW50KTtcbiAgICAgICAgICAgICAgbGlzdEVsZW1lbnQuYXBwZW5kQ2hpbGQocGFyYWdyYXBoRWxlbWVudCk7XG4gICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdsaXN0RWxlbWVudFZhbHVlQXJlYScsIHNwYW5FbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1lYXN1cmVSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAvLyBwYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgICAgIC8vIHBhcmFncmFwaEVsZW1lbnQuY2xhc3NOYW1lID0gJ2M0Z19tYXBzX3BvcnRzaWRlX21lYXN1cmVfcGFyYWdyYXBoX3N1cmZhY2VhcmVhJztcbiAgICAgICAgICAgICAgICAvLyBzdHJvbmdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3Ryb25nJyk7XG4gICAgICAgICAgICAgICAgLy8gc3Ryb25nRWxlbWVudC5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLlNVUkZBQ0VBUkVBICsgJzogJztcbiAgICAgICAgICAgICAgICAvLyBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKHN0cm9uZ0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vIHNwYW5FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgIC8vIHNwYW5FbGVtZW50LmlubmVySFRNTCA9ICcuLi4nO1xuICAgICAgICAgICAgICAgIC8vIHBhcmFncmFwaEVsZW1lbnQuYXBwZW5kQ2hpbGQoc3BhbkVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vIGxpc3RFbGVtZW50LmFwcGVuZENoaWxkKHBhcmFncmFwaEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdsaXN0RWxlbWVudFZhbHVlUmFkaXVzJywgc3BhbkVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vIGluY3JlYXNlIHRoZSBpZC1jb3VudGVyXG4gICAgICAgICAgICBmZWF0dXJlSWRDb3VudCArPSAxO1xuXG4gICAgICAgICAgICAvLyBhcHBlbmQgZWxlbWVudCB0byB0aGUgbGlzdFxuICAgICAgICAgICAgc2VsZi5tYWluU2VjdGlvbi5hcHBlbmRDaGlsZChsaXN0RWxlbWVudCk7XG4gICAgICAgICAgICAvLyBhdHRhY2ggZWxlbWVudCB0byB0aGUgZmVhdHVyZVxuICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2xpc3RFbGVtZW50JywgbGlzdEVsZW1lbnQpO1xuXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgIH07IC8vIGVuZCBvZiBcImFkZE1lYXN1cmVGZWF0dXJlKClcIlxuXG4gICAgICAgICAgdXBkYXRlTWVhc3VyZUZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgdmFyIGZlYXR1cmVUb29sdGlwLFxuICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQsXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgICAgICAgYXJlYSxcbiAgICAgICAgICAgICAgICByYWRpdXM7XG5cbiAgICAgICAgICAgIGZlYXR1cmVUb29sdGlwID0gZmVhdHVyZS5nZXQoJ3Rvb2x0aXAnKTtcbiAgICAgICAgICAgIG5hbWUgPSBmZWF0dXJlLmdldCgnbGlzdEVsZW1lbnRWYWx1ZU5hbWUnKS52YWx1ZTtcbiAgICAgICAgICAgIGxlbmd0aCA9IHV0aWxzLm1lYXN1cmVHZW9tZXRyeShmZWF0dXJlLmdldEdlb21ldHJ5KCksIHRydWUpO1xuICAgICAgICAgICAgbmV3Q29udGVudCA9ICc8c3Ryb25nPicgKyBuYW1lICsgJzwvc3Ryb25nPjxicj4nO1xuXG4gICAgICAgICAgICBmZWF0dXJlLnNldCgnbWVhc3VyZWRMZW5ndGgnLCBsZW5ndGgpO1xuICAgICAgICAgICAgZmVhdHVyZS5nZXQoJ2xpc3RFbGVtZW50VmFsdWVMaW5lJykuaW5uZXJIVE1MID0gbGVuZ3RoLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlLmdldCgnZ2VvbWV0cnlUeXBlJykgPT09ICdjaXJjbGUnKSB7XG4gICAgICAgICAgICAgIHJhZGl1cyA9IHV0aWxzLm1lYXN1cmVHZW9tZXRyeShmZWF0dXJlLmdldEdlb21ldHJ5KCkpO1xuICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbWVhc3VyZWRSYWRpdXMnLCByYWRpdXMpO1xuICAgICAgICAgICAgICBmZWF0dXJlLmdldCgnbGlzdEVsZW1lbnRWYWx1ZVJhZGl1cycpLmlubmVySFRNTCA9IHJhZGl1cy5odG1sVmFsdWU7XG4gICAgICAgICAgICAgIG5ld0NvbnRlbnQgKz0gcmFkaXVzLmh0bWxWYWx1ZTtcblxuICAgICAgICAgICAgICBhcmVhID0gdXRpbHMubWVhc3VyZUdlb21ldHJ5KGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbWVhc3VyZWRBcmVhJywgYXJlYSk7XG4gICAgICAgICAgICAgIGZlYXR1cmUuZ2V0KCdsaXN0RWxlbWVudFZhbHVlQXJlYScpLmlubmVySFRNTCA9IGFyZWEuaHRtbFZhbHVlO1xuICAgICAgICAgICAgICAvLyBuZXdDb250ZW50ICs9IGFyZWEuaHRtbFZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlLmdldCgnZ2VvbWV0cnlUeXBlJykgPT09ICdwb2x5Z29uJykge1xuICAgICAgICAgICAgICAgIGFyZWEgPSB1dGlscy5tZWFzdXJlR2VvbWV0cnkoZmVhdHVyZS5nZXRHZW9tZXRyeSgpKTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbWVhc3VyZWRBcmVhJywgYXJlYSk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5nZXQoJ2xpc3RFbGVtZW50VmFsdWVBcmVhJykuaW5uZXJIVE1MID0gYXJlYS5odG1sVmFsdWU7XG4gICAgICAgICAgICAgICAgbmV3Q29udGVudCArPSBhcmVhLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld0NvbnRlbnQgKz0gbGVuZ3RoLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZlYXR1cmVUb29sdGlwLnNldENvbnRlbnQobmV3Q29udGVudCk7XG4gICAgICAgICAgfTsgLy8gZW5kIG9mIFwidXBkYXRlTWVhc3VyZUZlYXR1cmUoKVwiXG5cbiAgICAgICAgICByZW1vdmVNZWFzdXJlRmVhdHVyZSA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICBzZWxmLm1haW5TZWN0aW9uLnJlbW92ZUNoaWxkKGZlYXR1cmUuZ2V0KCdsaXN0RWxlbWVudCcpKTtcblxuICAgICAgICAgICAgLy8gbGFzdCBlbGVtZW50PyAtPiBhZGQgaW5mb21lc3NhZ2VcbiAgICAgICAgICAgIGlmIChzZWxmLm1haW5TZWN0aW9uLmNoaWxkRWxlbWVudENvdW50IDwgMSkge1xuICAgICAgICAgICAgICBzZWxmLm1haW5TZWN0aW9uLmFwcGVuZENoaWxkKHNlbGYubWFpblNlY3Rpb25JbmZvKTtcbiAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9OyAvLyBlbmQgb2YgXCJyZW1vdmVNZWFzdXJlRmVhdHVyZSgpXCJcblxuICAgICAgICAgICAgLy9TdGFydCBXb3JrYXJvdW5kXG4gICAgICAgICAgICBnZXRWYWx1ZU9mR2VvbWV0cnkgPSBmdW5jdGlvbiAoZmVhdHVyZSl7XG4gICAgICAgICAgICAgICAgdmFyIGxlbmcgPSB1dGlscy5tZWFzdXJlR2VvbWV0cnkoZmVhdHVyZS5nZXRHZW9tZXRyeSgpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAvLyBmZWF0dXJlLnNldCgnbWVhc3VyZWRMZW5ndGgnLCBsZW5ndGgpO1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBsZW5nLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVudW1iID0gdmFsLm1hdGNoKC9cXGQvZyk7XG4gICAgICAgICAgICAgICAgdmFsdWVudW1iID0gdmFsdWVudW1iLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlbnVtYjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0TGVuZ3RoT2ZNZWFzdXJlID0gZnVuY3Rpb24gKCl7XG4gICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9ICcwLjAwIG0nO1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGhudW1iID0gbGVuZ3RoLm1hdGNoKC9cXGQvZyk7XG4gICAgICAgICAgICAgICAgbGVuZ3RobnVtYiA9IGxlbmd0aG51bWIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBsZW5ndGhudW1iID0rODtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVuZ3RobnVtYjtcbiAgICAgICAgICAgIH0vLyBFbmQgV29ya2Fyb3VuZFxuXG4gICAgICAgICAgaW50ZXJhY3Rpb24ub24oJ2RyYXdzdGFydCcsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaCA9IGV2ZW50LmZlYXR1cmU7XG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIHRvb2x0aXBcbiAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwID0gbmV3IFRvb2x0aXBQb3BVcCh7XG4gICAgICAgICAgICAgICAgICBtYXA6IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcCxcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBldmVudC5jb29yZGluYXRlLFxuICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGNsb3NlYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGNsb3NlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvL1dvcmthcm91bmQsIGZvciBzbWFsbCBvciB6ZXJvIHZhbHVlcyBvZiBGcmVlaGFuZFxuICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSBnZXRWYWx1ZU9mR2VvbWV0cnkoZXZlbnQuZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmcgPSBnZXRMZW5ndGhPZk1lYXN1cmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsICE9IGxlbmcgJiYgdmFsID4gbGVuZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVNZWFzdXJlRmVhdHVyZShldmVudC5mZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLnJlbW92ZUZlYXR1cmUoZXZlbnQuZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVNZWFzdXJlRmVhdHVyZShldmVudC5mZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCd0b29sdGlwJywgYWN0aXZlVG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlU2tldGNoLnNldCgnZ2VvbWV0cnlUeXBlJywgb3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgIGFkZE1lYXN1cmVGZWF0dXJlKGFjdGl2ZVNrZXRjaCk7XG4gICAgICAgICAgICAgIH0sIHNlbGYpO1xuXG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLm9uKCdwb2ludGVybW92ZScsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVTa2V0Y2ggJiYgYWN0aXZlVG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcC5zZXRQb3NpdGlvbihldmVudC5jb29yZGluYXRlKTtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZU1lYXN1cmVGZWF0dXJlKGFjdGl2ZVNrZXRjaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LCBzZWxmKTtcblxuICAgICAgICAgIGludGVyYWN0aW9uLm9uKCdkcmF3ZW5kJyxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVNrZXRjaCAmJiBhY3RpdmVUb29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGVNZWFzdXJlRmVhdHVyZShhY3RpdmVTa2V0Y2gpO1xuICAgICAgICAgICAgICAgICAgYWN0aXZlU2tldGNoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXAgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgc2VsZik7XG5cbiAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBhY3RpdmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAvLyBkaXNhYmxlIG1hcEhvdmVyXG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwSG92ZXIuZGVhY3RpdmF0ZSgpO1xuXG4gICAgICAgICAgZmVhdHVyZXMuY2xlYXIoKTtcblxuICAgICAgICAgIC8vIEVuYWJsZSBpbnRlcmFjdGlvblxuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgICAgIH0sXG4gICAgICAgIGRlYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgLy8gcmVhY3RpdmF0ZSBtYXBIb3ZlclxuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcEhvdmVyLmFjdGl2YXRlKCk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgIT09ICdwb2ludCcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGludGVyYWN0aW9uLmZpbmlzaERyYXdpbmcoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgICAgICAgICAgICAvLyAwX29cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBSZW1vdmUgZnJvbSBtYXBcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlSW50ZXJhY3Rpb24oaW50ZXJhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG1lYXN1cmVWaWV3O1xuICAgIH0gLy8gZW5kIG9mIFwiYWRkTWVhc3VyZVZpZXcoKVwiXG5cbiAgfSk7XG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIE1lYXN1cmV0b29scyA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5NZWFzdXJldG9vbHM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLW1lYXN1cmV0b29scy5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcblxuaW1wb3J0IHtTaWRlYm9hcmR9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc2lkZWJvYXJkXCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBleHRlbmRzIHtjNGcubWFwcy5jb250cm9sLlNpZGVib2FyZH1cbiAgICpcbiAgICogQHBhcmFtICB7W3R5cGVdfSAgbWFwQ29udHJvbGxlciAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIHtbdHlwZV19ICBjb25maWcgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLlJvdXRlciA9IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuXG4gICAgLy8gZXh0ZW5kIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBuYW1lOiAncm91dGVyJyxcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgIGhlYWRsaW5lOiBsYW5nQ29uc3RhbnRzLlJPVVRFUixcbiAgICAgIGRpcmVjdGlvbjogJ2xlZnQnXG4gICAgfSwgb3B0X29wdGlvbnMpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmluZGV4PTA7XG5cbiAgICAvLyBjYWxsIHBhcmVudCBjb25zdHJ1Y3RvclxuICAgIFNpZGVib2FyZC5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEluaGVyaXQgZnJvbSBcIlNpZGVib2FyZFwiXG4gICAqL1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLlJvdXRlciwgU2lkZWJvYXJkKTtcblxuICAvKipcbiAgICogTWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5Sb3V0ZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5Sb3V0ZXIucHJvdG90eXBlLCB7XG5cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIHZpZXdSb3V0ZXIsXG4gICAgICAgICAgc2VsZWN0SW50ZXJhY3Rpb24sXG4gICAgICAgICAgcHJvZmlsZUlkO1xuXG4gICAgICBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuc3Bpbm5lci5zaG93KCk7XG5cblxuICAgICAgLy8gY2hlY2sgYW5kIGxvYWQgbG9jYXRpb24gc3R5bGVzIHZpYSBtYXAtcHJveHlcbiAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhbXG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2Zyb21fbG9jc3R5bGUsXG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3RvX2xvY3N0eWxlLFxuICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wb2ludF9sb2NzdHlsZVxuICAgICAgXSk7XG5cblxuICAgICAgLy8gQWRkIHJvdXRlciBsYXllcihzKVxuICAgICAgdGhpcy5yb3V0aW5nQWx0V2F5U291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3IoKTtcbiAgICAgIHRoaXMucm91dGluZ1dheVNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKCk7XG4gICAgICB0aGlzLnJvdXRlcldheUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgICAgIHNvdXJjZTogdGhpcy5yb3V0aW5nV2F5U291cmNlLFxuICAgICAgICB6SW5kZXg6IDEsXG4gICAgICAgIHN0eWxlOiBbXG4gICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYpJyxcbiAgICAgICAgICAgICAgd2lkdGg6IDhcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCA1MSwgMTE5LCAwLjkpJyxcbiAgICAgICAgICAgICAgd2lkdGg6IDRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgXVxuICAgICAgfSk7XG4gICAgICB0aGlzLnJvdXRlckFsdFdheUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgICAgIHNvdXJjZTogdGhpcy5yb3V0aW5nQWx0V2F5U291cmNlLFxuICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgIHN0eWxlOiBbXG4gICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYpJyxcbiAgICAgICAgICAgICAgd2lkdGg6IDhcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCA1MSwgMTE5LCAwLjQpJyxcbiAgICAgICAgICAgICAgd2lkdGg6IDRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgXVxuICAgICAgfSk7XG5cbiAgICAgIHNlbGVjdEludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLlNlbGVjdCh7XG4gICAgICAgICAgc3R5bGU6W1xuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wKScsXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDhcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMjU1LCA1MSwgMTE5LCAwLjApJyxcbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICBdXG5cbiAgICAgIH0pO1xuICAgICAgc2VsZWN0SW50ZXJhY3Rpb24ub24oJ3NlbGVjdCcsIGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgICAgaWYoZXZlbnQuc2VsZWN0ZWRbMF0gKSB7XG4gICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IGV2ZW50LnNlbGVjdGVkWzBdLmdldEdlb21ldHJ5KCk7XG4gICAgICAgICAgICAgIGlmKGdlb21ldHJ5ICYmIGdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5MaW5lU3RyaW5nKXtcbiAgICAgICAgICAgICAgICAgIHNlbGYuc2hvd0FsdFJvdXRlKHNlbGYucmVzcG9uc2UsZXZlbnQuc2VsZWN0ZWRbMF0uZ2V0SWQoKSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgIH1cblxuICAgICAgfSk7XG5cbiAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihzZWxlY3RJbnRlcmFjdGlvbik7XG5cblxuICAgICAgICB0aGlzLnJvdXRpbmdIaW50U291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3IoKTtcbiAgICAgIHRoaXMucm91dGVySGludExheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgICAgIHNvdXJjZTogdGhpcy5yb3V0aW5nSGludFNvdXJjZSxcbiAgICAgICAgc3R5bGU6IGZ1bmN0aW9uIChmZWF0dXJlLCByZXNvbHV0aW9uKSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcG9pbnRfbG9jc3R5bGVdLnN0eWxlKTtcbiAgICAgICAgICByZXR1cm4gKCFzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eSkgfHwgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3NlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3BvaW50X2xvY3N0eWxlXS5zdHlsZShmZWF0dXJlLCByZXNvbHV0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMubG9jYXRpb25zU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3IoKTtcbiAgICAgIHRoaXMubG9jYXRpb25zTGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yKHtcbiAgICAgICAgc291cmNlOiB0aGlzLmxvY2F0aW9uc1NvdXJjZSxcbiAgICAgICAgekluZGV4OiAyXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5yb3V0ZXJMYXllckdyb3VwID0gbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgbGF5ZXJzOiBuZXcgb2wuQ29sbGVjdGlvbihbXG4gICAgICAgICAgdGhpcy5yb3V0ZXJXYXlMYXllcixcbiAgICAgICAgICB0aGlzLnJvdXRlckFsdFdheUxheWVyLFxuICAgICAgICAgIHRoaXMubG9jYXRpb25zTGF5ZXIsXG4gICAgICAgICAgdGhpcy5yb3V0ZXJIaW50TGF5ZXJcbiAgICAgICAgXSksXG4gICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKHRoaXMucm91dGVyTGF5ZXJHcm91cCk7XG5cbiAgICAgIHZpZXdSb3V0ZXIgPSB0aGlzLmFkZFVzZXJJbnRlcmZhY2UoKTtcbiAgICAgIHZpZXdSb3V0ZXIuYWN0aXZhdGUoKTtcblxuICAgICAgLy8gc3RvcmUgc29tZSB2YXJzIGZvciBhamF4LXJlcXVlc3RzXG4gICAgICBwcm9maWxlSWQgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnByb2ZpbGU7XG4gICAgICB0aGlzLmdlb1NlYXJjaEFwaSA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmdlb3NlYXJjaCArICcvJyArIHByb2ZpbGVJZDtcbiAgICAgIHRoaXMuZ2VvUmV2ZXJzZVNlYXJjaEFwaSA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmdlb3NlYXJjaF9yZXZlcnNlICsgJy8nICsgcHJvZmlsZUlkO1xuICAgICAgdGhpcy5yb3V0aW5nQXBpID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkucm91dGluZyArICcvJyArIHByb2ZpbGVJZDtcblxuICAgICAgdGhpcy5zcGlubmVyLmhpZGUoKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIHByZU9wZW5GdW5jdGlvbjogZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICAgIHRoaXMuYWRkTWFwSW5wdXRJbnRlcmFjdGlvbigpO1xuXG4gICAgICBpZiAob3B0X29wdGlvbnMgJiYgb3B0X29wdGlvbnMudG9Mb25MYXQpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtUmV2ZXJzZVNlYXJjaCh0aGlzLiR0b0lucHV0LCBvcHRfb3B0aW9ucy50b0xvbkxhdCk7XG4gICAgICAgIHRoaXMudG9WYWx1ZSA9IG5ldyBvbC5nZW9tLlBvaW50KFtvcHRfb3B0aW9ucy50b0xvbkxhdFsxXSwgb3B0X29wdGlvbnMudG9Mb25MYXRbMF1dKTtcbiAgICAgIH1cblxuICAgIH0sXG5cbiAgICBwcmVIaWRlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucmVtb3ZlTWFwSW5wdXRJbnRlcmFjdGlvbigpO1xuICAgIH0sXG5cbiAgICBwcmVDbG9zZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHRoaXMucm91dGluZ1dheVNvdXJjZS5jbGVhcigpO1xuICAgICAgdGhpcy5yb3V0aW5nQWx0V2F5U291cmNlLmNsZWFyKCk7XG4gICAgICB0aGlzLnJvdXRpbmdIaW50U291cmNlLmNsZWFyKCk7XG4gICAgICB0aGlzLmxvY2F0aW9uc1NvdXJjZS5jbGVhcigpO1xuXG4gICAgICAkKHRoaXMucm91dGVySW5zdHJ1Y3Rpb25zV3JhcHBlcikuZW1wdHkoKTtcbiAgICAgIHRoaXMuY2xlYXJJbnB1dCh0aGlzLiRmcm9tSW5wdXQpO1xuICAgICAgaWYodGhpcy5vdmVyVmFsdWUpe1xuICAgICAgICAgIGZvcih2YXIgaWQgaW4gdGhpcy5vdmVyVmFsdWUpe1xuICAgICAgICAgICAgICB0aGlzLmNsZWFyT3Zlcih0aGlzLiRvdmVySW5wdXQsaWQpO1xuICAgICAgICAgICAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICAgICAgICAgICAgaWYoZWxlbSl7XG4gICAgICAgICAgICAgICAgICBlbGVtLnBhcmVudE5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jbGVhcklucHV0KHRoaXMuJHRvSW5wdXQpO1xuXG4gICAgICB0aGlzLnJlbW92ZU1hcElucHV0SW50ZXJhY3Rpb24oKTtcblxuICAgIH0sXG5cbiAgICByZW1vdmVNYXBJbnB1dEludGVyYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC51bignY2xpY2snLCBzZWxmLmZuTWFwUm91dGVySW50ZXJhY3Rpb24pO1xuICAgIH0sXG5cbiAgICBhZGRNYXBJbnB1dEludGVyYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICBjb29yZGluYXRlO1xuXG4gICAgICBzZWxmLmZuTWFwUm91dGVySW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoZXZ0KSB7XG5cbiAgICAgICAgY29vcmRpbmF0ZSA9IG9sLnByb2oudG9Mb25MYXQoZXZ0LmNvb3JkaW5hdGUpO1xuXG4gICAgICAgIGlmIChzZWxmLiRmcm9tSW5wdXQudmFsKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAvL3NlbGYuJGZyb21JbnB1dC52YWwob2wucHJvai50b0xvbkxhdChldnQuY29vcmRpbmF0ZSkpO1xuICAgICAgICAgIHNlbGYucGVyZm9ybVJldmVyc2VTZWFyY2goc2VsZi4kZnJvbUlucHV0LCBjb29yZGluYXRlKTtcbiAgICAgICAgICBzZWxmLmZyb21WYWx1ZSA9IG5ldyBvbC5nZW9tLlBvaW50KGNvb3JkaW5hdGUpO1xuXG4gICAgICAgICAgLy9zZWxmLiRmcm9tSW5wdXQudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi4kdG9JbnB1dC52YWwoKSA9PT0gXCJcIikge1xuICAgICAgICAgIC8vc2VsZi4kdG9JbnB1dC52YWwob2wucHJvai50b0xvbkxhdChldnQuY29vcmRpbmF0ZSkpO1xuICAgICAgICAgIHNlbGYucGVyZm9ybVJldmVyc2VTZWFyY2goc2VsZi4kdG9JbnB1dCwgY29vcmRpbmF0ZSk7XG4gICAgICAgICAgc2VsZi50b1ZhbHVlID0gbmV3IG9sLmdlb20uUG9pbnQoY29vcmRpbmF0ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi4kb3ZlcklucHV0KSB7XG4gICAgICAgICAgICBpZihzZWxmLiRvdmVySW5wdXQudmFsKCkgPT09XCJcIikge1xuICAgICAgICAgICAgICAgIHNlbGYucGVyZm9ybVJldmVyc2VTZWFyY2goc2VsZi4kb3ZlcklucHV0LCBjb29yZGluYXRlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYub3ZlclZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYub3ZlclZhbHVlPXt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLm92ZXJWYWx1ZVtzZWxmLmluZGV4XT1uZXcgb2wuZ2VvbS5Qb2ludChjb29yZGluYXRlKTtcbiAgICAgICAgICAgICAgICBzZWxmLiRidXR0b25PdmVyLnByb3AoXCJkaXNhYmxlZFwiLGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLm9uKCdjbGljaycsIHNlbGYuZm5NYXBSb3V0ZXJJbnRlcmFjdGlvbik7XG4gICAgICBpZihzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0SW50ZXJhY3Rpb25zKCkuZ2V0QXJyYXkoKVsnOSddKXtcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0SW50ZXJhY3Rpb25zKCkuZ2V0QXJyYXkoKVsnOSddLnNldEFjdGl2ZSh0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldEludGVyYWN0aW9ucygpLmdldEFycmF5KClbJzgnXS5zZXRBY3RpdmUodHJ1ZSlcbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgICBhZGRVc2VySW50ZXJmYWNlOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIGxldCBzZWxmLFxuICAgICAgICAgIHJvdXRlclZpZXcsXG4gICAgICAgICAgcm91dGVyVmlld0lucHV0V3JhcHBlcixcbiAgICAgICAgICByb3V0ZXJWaWV3Q29udGVudFdyYXBwZXIsXG4gICAgICAgICAgcm91dGVyVmlld0NvbnRlbnRIZWFkbGluZSxcbiAgICAgICAgICBwcmludCxcbiAgICAgICAgICByb3V0ZVByb2ZpbGUgPVtdLFxuICAgICAgICAgIHJvdXRlckZyb21MYWJlbCxcbiAgICAgICAgICByb3V0ZXJPdmVyTGFiZWwsXG4gICAgICAgICAgcm91dGVyVG9MYWJlbCxcbiAgICAgICAgICByb3V0ZXJGcm9tQ2xlYXIsXG4gICAgICAgICAgcm91dGVyT3ZlckNsZWFyLFxuICAgICAgICAgIHJvdXRlclRvQ2xlYXIsXG4gICAgICAgICAgc3dpdGNoRnJvbVRvLFxuICAgICAgICAgIGJ1dHRvbk92ZXI7XG5cblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHJvdXRlclZpZXdJbnB1dFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHJvdXRlclZpZXdDb250ZW50V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICBzZWxmLnJvdXRlclZpZXdDb250ZW50V3JhcHBlciA9IHJvdXRlclZpZXdDb250ZW50V3JhcHBlcjtcblxuICAgICAgLy8gQFRPRE86IEFkZCByb3V0ZXItaW5mby10ZXh0XG4gICAgICAvLyByb3V0ZXJWaWV3Q29udGVudEhlYWRsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDQnKTtcbiAgICAgIC8vIHJvdXRlclZpZXdDb250ZW50SGVhZGxpbmUuaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5ST1VURVJfVklFV19BRERSRVNTX0lOUFVUO1xuICAgICAgLy8gcm91dGVyVmlld0NvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKHJvdXRlclZpZXdDb250ZW50SGVhZGxpbmUpO1xuXG4gICAgICB0aGlzLmZyb21JbnB1dFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMuZnJvbUlucHV0V3JhcHBlci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOUFVUX1dSQVBQRVI7XG5cbiAgICAgIHRoaXMuZnJvbUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgdGhpcy5mcm9tSW5wdXQudHlwZSA9IFwidGV4dFwiO1xuICAgICAgdGhpcy5mcm9tSW5wdXQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlBVVF9GUk9NO1xuICAgICAgdGhpcy5mcm9tSW5wdXQuaWQgPSB0aGlzLmZyb21JbnB1dC5uYW1lID0gXCJyb3V0aW5nRnJvbVwiO1xuXG4gICAgICByb3V0ZXJGcm9tTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgcm91dGVyRnJvbUxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ3JvdXRpbmdGcm9tJyk7XG4gICAgICByb3V0ZXJGcm9tTGFiZWwuaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5ST1VURVJfRlJPTV9MQUJFTDtcblxuICAgICAgcm91dGVyRnJvbUNsZWFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICByb3V0ZXJGcm9tQ2xlYXIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlBVVF9DTEVBUjtcbiAgICAgIHJvdXRlckZyb21DbGVhci50aXRsZSA9IGxhbmdDb25zdGFudHMuUk9VVEVSX0NMRUFSX1RJVExFO1xuICAgICAgcm91dGVyRnJvbUNsZWFyLmlubmVySFRNTCA9IGxhbmdDb25zdGFudHMuUk9VVEVSX0NMRUFSX0hUTUw7XG4gICAgICB0aGlzLiRyb3V0ZXJGcm9tQ2xlYXIgPSAkKHJvdXRlckZyb21DbGVhcik7XG5cbiAgICAgIHN3aXRjaEZyb21UbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgc3dpdGNoRnJvbVRvLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5ST1VURVJfU1dJVENIO1xuICAgICAgc3dpdGNoRnJvbVRvLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5ST1VURVJfU1dJVENIO1xuICAgICAgdGhpcy4kc3dpdGNoRnJvbVRvID0gJChzd2l0Y2hGcm9tVG8pO1xuXG4gICAgICBidXR0b25PdmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b25PdmVyLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5ST1VURVJfT1ZFUjtcbiAgICAgIGJ1dHRvbk92ZXIudGl0bGUgPSBsYW5nQ29uc3RhbnRzLlJPVVRFUl9PVkVSO1xuICAgICAgdGhpcy4kYnV0dG9uT3ZlciA9ICQoYnV0dG9uT3Zlcik7XG5cbiAgICAgIHByaW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBwcmludC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX1BSSU5UO1xuICAgICAgcHJpbnQudGl0bGUgPSBsYW5nQ29uc3RhbnRzLlJPVVRFUl9QUklOVDtcbiAgICAgIHRoaXMuJHByaW50ID0gJChwcmludCk7XG5cblxuXG5cbiAgICAgIHRoaXMucm91dGVyQnV0dG9uQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLnJvdXRlckJ1dHRvbkJhci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0JVVFRPTkJBUjtcbiAgICAgIHRoaXMucm91dGVyQnV0dG9uQmFyLmFwcGVuZENoaWxkKHN3aXRjaEZyb21Ubyk7XG4gICAgICB0aGlzLnJvdXRlckJ1dHRvbkJhci5hcHBlbmRDaGlsZChidXR0b25PdmVyKTtcbiAgICAgIHRoaXMucm91dGVyQnV0dG9uQmFyLmFwcGVuZENoaWxkKHByaW50KTtcblxuICAgICAgICAvLyAkKHByaW50KS5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImM0Zy1wb3J0c2lkZS1oaWRlXCIpWzBdKTtcblxuICAgICAgICBpZih0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcyJyl7IC8vT3BlblJvdXRlU2VydmljZVxuICAgICAgICAgICAgaWYoT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXMpLmxlbmd0aCA9PSAxKXsvL2NoZWNrIGZvciBzaW5nbGUgcHJvZmlsZSBhbmQgc2V0IHRoaXMgYXMgIGFjdGl2ZSByb3V0aW5nIHByb2ZpbGVcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlUHJvZmlsZSA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMucm91dGVQcm9maWxlLmFjdGl2ZSA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzKVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXMpLmxlbmd0aCA+IDEpeyAvL2NoZWNrIGZvciBtdWx0aXBsZSBwcm9maWxlcyBhbmQgYWRkIHByb2ZpbGUtY2hhbmdlclxuICAgICAgICAgICAgICAgIHRoaXMucm91dGVQcm9maWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgJCh0aGlzLnJvdXRlUHJvZmlsZSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLlJPVVRFUl9QUk9GSUxFX1dSQVBQRVIpO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzWycwJ10peyAvL2FkZCBidXR0b24gZm9yIHByb2ZpbGUgZHJpdmluZy1jYXJcbiAgICAgICAgICAgICAgICAgICAgcm91dGVQcm9maWxlLmNhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAkKHJvdXRlUHJvZmlsZS5jYXIpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5ST1VURVJfUFJPRklMRV9DQVIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZVByb2ZpbGVDYXIgPSAkKHJvdXRlUHJvZmlsZS5jYXIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlUHJvZmlsZS5hcHBlbmRDaGlsZChyb3V0ZVByb2ZpbGUuY2FyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVQcm9maWxlQ2FyLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2xlYXJTaWJsaW5ncyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucm91dGVQcm9maWxlLmFjdGl2ZSA9ICcwJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlc1snMSddKSB7IC8vYWRkIGJ1dHRvbiBmb3IgcHJvZmlsZSBkcml2aW5nLWhndlxuICAgICAgICAgICAgICAgICAgICByb3V0ZVByb2ZpbGUuaGd2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgICAgICQocm91dGVQcm9maWxlLmhndikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLlJPVVRFUl9QUk9GSUxFX0hHVik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm91dGVQcm9maWxlLmFwcGVuZENoaWxkKHJvdXRlUHJvZmlsZS5oZ3YpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZVByb2ZpbGVIZ3YgPSAkKHJvdXRlUHJvZmlsZS5oZ3YpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlUHJvZmlsZUhndi5jbGljayhmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyU2libGluZ3ModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJvdXRlUHJvZmlsZS5hY3RpdmUgPSAnMSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY2FsY3VsYXRlUm91dGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzWycyJ11cbiAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXNbJzMnXVxuICAgICAgICAgICAgICAgICAgICB8fCB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlc1snNCddXG4gICAgICAgICAgICAgICAgICAgIHx8IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzWyc1J11cbiAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXNbJzYnXVxuICAgICAgICAgICAgICAgICAgICB8fCB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlc1snNyddKXsgLy9hZGQgYnV0dG9uIGFuZCBkcm9wZG93biBmb3IgY3ljbGluZyBwcm9maWxlc1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3BhbkJpa2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlUHJvZmlsZS5iaWtlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlUHJvZmlsZS5iaWtlLmxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZVByb2ZpbGVCaWtlID0gJChyb3V0ZVByb2ZpbGUuYmlrZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDI7IGkgPCA4OyBpKyspeyAvL2l0ZXJhdGUgb3ZlciBhbGwgcG9zc2libGUgY3ljbGluZyBwcm9maWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXNbaV0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuaW5uZXJIVE1MID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChjaGlsZCkuZGF0YSgncHJvZmlsZScsIFtpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChjaGlsZCkuY2xpY2soZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNoaWxkQ2xpY2soJChjaGlsZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLiRyb3V0ZVByb2ZpbGVCaWtlLmRhdGEoJ3Byb2ZpbGUnKSl7IC8vYWRkIGV4aXN0aW5nIGRlZmF1bHQgcHJvZmlsZSB0byBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVQcm9maWxlQmlrZS5kYXRhKCdwcm9maWxlJyxpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChjaGlsZCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlUHJvZmlsZS5iaWtlLmxpc3QuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJChyb3V0ZVByb2ZpbGUuYmlrZSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLlJPVVRFUl9QUk9GSUxFX0JJS0UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKHJvdXRlUHJvZmlsZS5iaWtlLmxpc3QuY2hpbGRyZW4ubGVuZ3RoID09IDEpeyAvL2lnbm9yZSBkcm9wZG93biBsaXN0LCBpZiBvbmx5IG9uZSBjeWNsaW5nIHByb2ZpbGUgaXMgZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3V0ZVByb2ZpbGUuYXBwZW5kQ2hpbGQocm91dGVQcm9maWxlLmJpa2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVQcm9maWxlQmlrZS5jbGljayhmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGVhclNpYmxpbmdzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucm91dGVQcm9maWxlLmFjdGl2ZSA9ICQodGhpcykuZGF0YSgncHJvZmlsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXsgLy9hcHBlbmQgd2l0aCBkcm9wZG93biwgaWYgbXVsdGlwbGUgY3ljbGluZyBwcm9maWxlcyBhcmUgZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkJpa2UuYXBwZW5kQ2hpbGQocm91dGVQcm9maWxlLmJpa2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkJpa2UuYXBwZW5kQ2hpbGQocm91dGVQcm9maWxlLmJpa2UubGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlUHJvZmlsZS5hcHBlbmRDaGlsZChzcGFuQmlrZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZVByb2ZpbGVCaWtlLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyU2libGluZ3MoJCh0aGlzKS5wYXJlbnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yb3V0ZVByb2ZpbGUuYWN0aXZlID0gJCh0aGlzKS5kYXRhKCdwcm9maWxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlc1snOCddXG4gICAgICAgICAgICAgICAgICAgIHx8IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzWyc5J10peyAvL2FkZCBidXR0b24gYW5kIGRyb3Bkb3duIGZvciB3YWxraW5nIHByb2ZpbGVzXG4gICAgICAgICAgICAgICAgICAgIGxldCBzcGFuRm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgICAgICAgICAgcm91dGVQcm9maWxlLmZvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICAgICAgcm91dGVQcm9maWxlLmZvb3QubGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlUHJvZmlsZUZvb3QgPSAkKHJvdXRlUHJvZmlsZS5mb290KTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gODsgaSA8IDEwOyBpKyspeyAvL2l0ZXJhdGUgb3ZlciBwb3NzaWJsZSBwcm9maWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXNbaV0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuaW5uZXJIVE1MID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChjaGlsZCkuZGF0YSgncHJvZmlsZScsIFtpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChjaGlsZCkuY2xpY2soZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNoaWxkQ2xpY2soJCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMuJHJvdXRlUHJvZmlsZUZvb3QuZGF0YSgncHJvZmlsZScpKXsgLy9hZGQgZXhpc3RpbmcgZGVmYXVsdCBwcm9maWxlIHRvIGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZVByb2ZpbGVGb290LmRhdGEoJ3Byb2ZpbGUnLGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGNoaWxkKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVQcm9maWxlLmZvb3QubGlzdC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAkKHJvdXRlUHJvZmlsZS5mb290KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuUk9VVEVSX1BST0ZJTEVfRk9PVCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYocm91dGVQcm9maWxlLmZvb3QubGlzdC5jaGlsZHJlbi5sZW5ndGggPT0gMSl7IC8vaWdub3JlIGRyb3Bkb3duIGxpc3QsIGlmIG9ubHkgb25lIHdhbGtpbmcgcHJvZmlsZSBpcyBlbmFibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlUHJvZmlsZS5hcHBlbmRDaGlsZChyb3V0ZVByb2ZpbGUuZm9vdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZVByb2ZpbGVGb290LmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyU2libGluZ3ModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yb3V0ZVByb2ZpbGUuYWN0aXZlID0gJCh0aGlzKS5kYXRhKCdwcm9maWxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNleyAvL2FwcGVuZCB3aXRoIGRyb3Bkb3duLCBpZiBtdWx0aXBsZSB3YWxraW5nIHByb2ZpbGVzIGFyZSBlbmFibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuRm9vdC5hcHBlbmRDaGlsZChyb3V0ZVByb2ZpbGUuZm9vdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuRm9vdC5hcHBlbmRDaGlsZChyb3V0ZVByb2ZpbGUuZm9vdC5saXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm91dGVQcm9maWxlLmFwcGVuZENoaWxkKHNwYW5Gb290KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlUHJvZmlsZUZvb3QuY2xpY2soZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2xlYXJTaWJsaW5ncygkKHRoaXMpLnBhcmVudCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJvdXRlUHJvZmlsZS5hY3RpdmUgPSAkKHRoaXMpLmRhdGEoJ3Byb2ZpbGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY2FsY3VsYXRlUm91dGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzWycxMCddKXsgLy9hZGQgYnV0dG9uIGZvciBwcm9maWxlIHdoZWVsY2hhaXJcbiAgICAgICAgICAgICAgICAgICAgcm91dGVQcm9maWxlLndoZWVsY2hhaXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICAgICAgJChyb3V0ZVByb2ZpbGUud2hlZWxjaGFpcikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLlJPVVRFUl9QUk9GSUxFX1dIRUVMQ0hBSVIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZVByb2ZpbGVXaGVlbGNoYWlyID0gJChyb3V0ZVByb2ZpbGUud2hlZWxjaGFpcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm91dGVQcm9maWxlLmFwcGVuZENoaWxkKHJvdXRlUHJvZmlsZS53aGVlbGNoYWlyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVQcm9maWxlV2hlZWxjaGFpci5jbGljayhmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyU2libGluZ3ModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJvdXRlUHJvZmlsZS5hY3RpdmUgPSAnMTAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkQ2xpY2sgPSBmdW5jdGlvbigkZWxlbWVudCl7IC8vaGFuZGxlIHRoZSBjbGljayBpbnNpZGUgdGhlIHByb2ZpbGUgZHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5yb3V0ZVByb2ZpbGUuYWN0aXZlID0gJGVsZW1lbnQuZGF0YSgncHJvZmlsZScpOyAvL2FjdGl2YXRlIHNlbGVjdGVkIHByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGVhclNpYmxpbmdzKCRlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNhbGN1bGF0ZVJvdXRlKCk7IC8vdXBkYXRlIHRoZSByb3V0ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclNpYmxpbmdzID0gZnVuY3Rpb24oZWxlbWVudCl7IC8vZnVuY3Rpb24gdG8gYWRqdXN0IGNzcy1jbGFzc2VzIGFmdGVyIGNoYW5naW5nIHByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpYmxpbmdzID0gJChlbGVtZW50KS5wYXJlbnQoKS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2libGluZ3MubGVuZ3RoIDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoc2libGluZ3NbaV0pLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IHByb2ZpbGUgaW4gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXMpeyAvL3NldCBkZWZhdWx0IHZhbHVlIGZvciBpbml0aWFsIHJvdXRpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXMuaGFzT3duUHJvcGVydHkocHJvZmlsZSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3V0ZVByb2ZpbGUuYWN0aXZlID0gcHJvZmlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ05vIFJvdXRlciBQcm9maWxlcyBlbmFibGVkJylcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cblxuXG4gICAgICB0aGlzLmZyb21JbnB1dFdyYXBwZXIuYXBwZW5kQ2hpbGQocm91dGVyRnJvbUxhYmVsKTtcbiAgICAgIHRoaXMuZnJvbUlucHV0V3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmZyb21JbnB1dCk7XG4gICAgICB0aGlzLmZyb21JbnB1dFdyYXBwZXIuYXBwZW5kQ2hpbGQocm91dGVyRnJvbUNsZWFyKTtcbiAgICAgIGlmIChidXR0b25PdmVyICYmIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT0gJzAnKXtcbiAgICAgICAgICB0aGlzLiRidXR0b25PdmVyLmhpZGUoKTtcbiAgICAgIH1cblxuXG4gICAgICB0aGlzLiRyb3V0ZXJGcm9tQ2xlYXIuaGlkZSgpO1xuXG4gICAgICB0aGlzLiRyb3V0ZXJGcm9tQ2xlYXIuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNlbGYuY2xlYXJJbnB1dChzZWxmLiRmcm9tSW5wdXQpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuJGJ1dHRvbk92ZXIuY2xpY2soZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHNlbGYuaW5kZXgrKztcbiAgICAgICAgICBzZWxmLiRidXR0b25PdmVyLnByb3AoXCJkaXNhYmxlZFwiLHRydWUpO1xuXG4gICAgICAgICAgc2VsZi5vdmVySW5wdXRXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgc2VsZi5vdmVySW5wdXRXcmFwcGVyLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5ST1VURVJfSU5QVVRfV1JBUFBFUjtcblxuICAgICAgICAgIHNlbGYub3ZlcklucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICAgIHNlbGYub3ZlcklucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgICBzZWxmLm92ZXJJbnB1dC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOUFVUX0ZST007XG4gICAgICAgICAgc2VsZi5vdmVySW5wdXQuaWQgPSBzZWxmLm92ZXJJbnB1dC5uYW1lID0gXCJyb3V0aW5nT3ZlclwiO1xuXG4gICAgICAgICAgcm91dGVyT3ZlckxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgICByb3V0ZXJPdmVyTGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAncm91dGluZ0Zyb20nKTtcbiAgICAgICAgICByb3V0ZXJPdmVyTGFiZWwuaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5ST1VURVJfTGFiZWxfSW50ZXJpbTtcblxuICAgICAgICAgIHJvdXRlck92ZXJDbGVhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgIHJvdXRlck92ZXJDbGVhci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOUFVUX0NMRUFSO1xuICAgICAgICAgIHJvdXRlck92ZXJDbGVhci50aXRsZSA9IGxhbmdDb25zdGFudHMuUk9VVEVSX0NMRUFSX1RJVExFO1xuICAgICAgICAgIHJvdXRlck92ZXJDbGVhci5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLlJPVVRFUl9DTEVBUl9IVE1MO1xuICAgICAgICAgIHJvdXRlck92ZXJDbGVhci5pZCA9IHNlbGYuaW5kZXg7XG4gICAgICAgICAgc2VsZi4kcm91dGVyT3ZlckNsZWFyID0gJChyb3V0ZXJPdmVyQ2xlYXIpO1xuXG4gICAgICAgICAgc2VsZi5vdmVySW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHJvdXRlck92ZXJMYWJlbCk7XG4gICAgICAgICAgc2VsZi5vdmVySW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHNlbGYub3ZlcklucHV0KTtcbiAgICAgICAgICBzZWxmLm92ZXJJbnB1dFdyYXBwZXIuYXBwZW5kQ2hpbGQocm91dGVyT3ZlckNsZWFyKTtcblxuICAgICAgICAgIHJvdXRlclZpZXdJbnB1dFdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZi5vdmVySW5wdXRXcmFwcGVyKTtcbiAgICAgICAgICBzZWxmLiRyb3V0ZXJPdmVyQ2xlYXIuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIHNlbGYuY2xlYXJPdmVyKHNlbGYuJG92ZXJJbnB1dCx0aGlzLmlkKTtcbiAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgLy9idXR0b25PdmVyLnNob3coKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzZWxmLiRvdmVySW5wdXQgPSAkKHNlbGYub3ZlcklucHV0KTtcbiAgICAgICAgICBzZWxmLiRvdmVySW5wdXQub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc2VsZi5wZXJmb3JtU2VhcmNoKHNlbGYuJG92ZXJJbnB1dCwgXCJvdmVyVmFsdWVcIik7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcblxuXG5cblxuICAgICAgdGhpcy4kc3dpdGNoRnJvbVRvLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdmFyIHN3aXRjaFZhck5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvdXRpbmdGcm9tXCIpLnZhbHVlO1xuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm91dGluZ0Zyb21cIikudmFsdWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvdXRpbmdUb1wiKS52YWx1ZTtcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvdXRpbmdUb1wiKS52YWx1ZSA9IHN3aXRjaFZhck5hbWU7XG4gICAgICAgICAgdmFyIHN3aXRjaFZhclZhbCA9IHNlbGYuZnJvbVZhbHVlO1xuICAgICAgICAgIHNlbGYuZnJvbVZhbHVlID0gc2VsZi50b1ZhbHVlO1xuICAgICAgICAgIHNlbGYudG9WYWx1ZSA9IHN3aXRjaFZhclZhbDtcbiAgICAgICAgICBzZWxmLnJlY2FsY3VsYXRlUm91dGUoKTtcblxuICAgICAgfSk7XG4gICAgICB0aGlzLiRwcmludC5jbGljayhmdW5jdGlvbiAoZXZlbnQpe1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbGV0IHJvdXRpbmdDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImM0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb25zLXdyYXBwZXJcIilbMF07XG4gICAgICAgICAgaWYoIXJvdXRpbmdDb250ZW50KSByZXR1cm47XG4gICAgICAgICAgbGV0IFdpblByaW50ID0gd2luZG93Lm9wZW4oJycsICcnLCAnbGVmdD0wLHRvcD0wLHdpZHRoPTgwMCxoZWlnaHQ9OTAwLHRvb2xiYXI9MCxzY3JvbGxiYXJzPTAsc3RhdHVzPTAnKTtcbiAgICAgICAgICBXaW5QcmludC5kb2N1bWVudC53cml0ZShyb3V0aW5nQ29udGVudC5pbm5lckhUTUwpO1xuICAgICAgICAgIFdpblByaW50LmRvY3VtZW50LmNsb3NlKCk7XG4gICAgICAgICAgV2luUHJpbnQuZm9jdXMoKTtcbiAgICAgICAgICBXaW5QcmludC5wcmludCgpO1xuICAgICAgICAgIFdpblByaW50LmNsb3NlKCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kZnJvbUlucHV0ID0gJCh0aGlzLmZyb21JbnB1dCk7XG4gICAgICB0aGlzLiRmcm9tSW5wdXQub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5wZXJmb3JtU2VhcmNoKHNlbGYuJGZyb21JbnB1dCwgXCJmcm9tVmFsdWVcIik7XG4gICAgICAgIGlmIChzZWxmLiRmcm9tSW5wdXQudmFsKCkgIT09IFwiXCIpIHtcbiAgICAgICAgICBzZWxmLiRyb3V0ZXJGcm9tQ2xlYXIuc2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuJHJvdXRlckZyb21DbGVhci5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByb3V0ZXJWaWV3SW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMucm91dGVyQnV0dG9uQmFyKTtcbiAgICAgIGlmKHRoaXMucm91dGVQcm9maWxlICYmIHRoaXMucm91dGVQcm9maWxlLmNoaWxkcmVuKXtcbiAgICAgICAgICByb3V0ZXJWaWV3SW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMucm91dGVQcm9maWxlKTtcbiAgICAgIH1cbiAgICAgIHJvdXRlclZpZXdJbnB1dFdyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5mcm9tSW5wdXRXcmFwcGVyKTtcblxuICAgICAgdGhpcy50b0lucHV0V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy50b0lucHV0V3JhcHBlci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOUFVUX1dSQVBQRVI7XG5cbiAgICAgIHRoaXMudG9JbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgIHRoaXMudG9JbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICB0aGlzLnRvSW5wdXQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlBVVF9UTztcbiAgICAgIHRoaXMudG9JbnB1dC5pZCA9IHRoaXMudG9JbnB1dC5uYW1lID0gXCJyb3V0aW5nVG9cIjtcblxuICAgICAgcm91dGVyVG9MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICByb3V0ZXJUb0xhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ3JvdXRpbmdUbycpO1xuICAgICAgcm91dGVyVG9MYWJlbC5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLlJPVVRFUl9UT19MQUJFTDtcblxuICAgICAgcm91dGVyVG9DbGVhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgcm91dGVyVG9DbGVhci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOUFVUX0NMRUFSO1xuICAgICAgcm91dGVyVG9DbGVhci50aXRsZSA9IGxhbmdDb25zdGFudHMuUk9VVEVSX0NMRUFSX1RJVExFO1xuICAgICAgcm91dGVyVG9DbGVhci5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLlJPVVRFUl9DTEVBUl9IVE1MO1xuICAgICAgdGhpcy4kcm91dGVyVG9DbGVhciA9ICQocm91dGVyVG9DbGVhcik7XG5cbiAgICAgIHRoaXMudG9JbnB1dFdyYXBwZXIuYXBwZW5kQ2hpbGQocm91dGVyVG9MYWJlbCk7XG4gICAgICB0aGlzLnRvSW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMudG9JbnB1dCk7XG4gICAgICB0aGlzLnRvSW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHJvdXRlclRvQ2xlYXIpO1xuXG5cbiAgICAgIHRoaXMuJHJvdXRlclRvQ2xlYXIuaGlkZSgpO1xuXG4gICAgICBzZWxmLiRyb3V0ZXJUb0NsZWFyLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZWxmLmNsZWFySW5wdXQoc2VsZi4kdG9JbnB1dCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kdG9JbnB1dCA9ICQodGhpcy50b0lucHV0KTtcbiAgICAgIHRoaXMuJHRvSW5wdXQub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5wZXJmb3JtU2VhcmNoKHNlbGYuJHRvSW5wdXQsIFwidG9WYWx1ZVwiKTtcbiAgICAgICAgaWYgKHNlbGYuJHRvSW5wdXQudmFsKCkgIT09IFwiXCIpIHtcbiAgICAgICAgICBzZWxmLiRyb3V0ZXJUb0NsZWFyLnNob3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLiRyb3V0ZXJUb0NsZWFyLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJvdXRlclZpZXdJbnB1dFdyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy50b0lucHV0V3JhcHBlcik7XG5cbiAgICAgIHNlbGYuc3RhdHVzQmFyLmFwcGVuZENoaWxkKHRoaXMuZ2V0QXR0cmlidXRpb24oKSk7XG5cbiAgICAgIHJvdXRlclZpZXcgPSB0aGlzLmFkZFZpZXcoe1xuICAgICAgICBuYW1lOiAncm91dGVyLXZpZXcnLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfQUREUkVTU19JTlBVVCxcbiAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5ST1VURVJfVklFV19BRERSRVNTX0lOUFVULFxuICAgICAgICAgIHdpdGhIZWFkbGluZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMudG9wVG9vbGJhciwgZWxlbWVudDogcm91dGVyVmlld0lucHV0V3JhcHBlcn0sXG4gICAgICAgICAge3NlY3Rpb246IHRoaXMuY29udGVudENvbnRhaW5lciwgZWxlbWVudDogcm91dGVyVmlld0NvbnRlbnRXcmFwcGVyfVxuICAgICAgICBdXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHJvdXRlclZpZXc7XG5cbiAgICB9LFxuXG4gICAgc2V0SW5wdXQ6IGZ1bmN0aW9uIChmcm9tLCBjb29yZGluYXRlKSB7XG4gICAgICAvLyBwZXJmb3JtIGdlb1NlYXJjaCBvbiBnaXZlbiBsb2NhdGlvblxuICAgICAgLy8gZmlsbCBmcm9tL3RvIGZpZWxkXG4gICAgICAvL1xuXG4gICAgICBpZiAoIWNvb3JkaW5hdGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjb29yZGluYXRlID0gb2wucHJvai50b0xvbkxhdChjb29yZGluYXRlKTtcblxuICAgICAgaWYgKGZyb20pIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtUmV2ZXJzZVNlYXJjaCh0aGlzLiRmcm9tSW5wdXQsIGNvb3JkaW5hdGUpO1xuICAgICAgICB0aGlzLmZyb21WYWx1ZSA9IG5ldyBvbC5nZW9tLlBvaW50KGNvb3JkaW5hdGUpO1xuXG4gICAgICAgIC8vdGhpcy4kZnJvbUlucHV0LnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybVJldmVyc2VTZWFyY2godGhpcy4kdG9JbnB1dCwgY29vcmRpbmF0ZSk7XG4gICAgICAgIHRoaXMudG9WYWx1ZSA9IG5ldyBvbC5nZW9tLlBvaW50KGNvb3JkaW5hdGUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlY2FsY3VsYXRlUm91dGUoKTtcbiAgICB9LFxuXG4gICAgZ2V0QXR0cmlidXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpcyxcbiAgICAgICAgICBhdHRyaWJ1dGlvblNlYXJjaCxcbiAgICAgICAgICBhdHRyaWJ1dGlvblJvdXRlcixcbiAgICAgICAgICBhdHRyaWJ1dGlvblJvdXRlckhvc3QsXG4gICAgICAgICAgYXR0cmlidXRpb25XcmFwcGVyLFxuICAgICAgICAgIGF0dHJpYnV0aW9uSHRtbDtcbiAgICAgIHN3aXRjaChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uKXtcbiAgICAgICAgICBjYXNlIFwiMFwiOlxuICAgICAgICAgICAgICBhdHRyaWJ1dGlvblJvdXRlciA9ICc8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL3Byb2plY3Qtb3NybS5vcmcvXCI+UHJvamVjdCBPU1JNPC9hPic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCIxXCI6XG4gICAgICAgICAgICAgIGF0dHJpYnV0aW9uUm91dGVyID0gJzxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vcHJvamVjdC1vc3JtLm9yZy9cIj5Qcm9qZWN0IE9TUk08L2E+JztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIjJcIjpcbiAgICAgICAgICAgICAgYXR0cmlidXRpb25Sb3V0ZXIgPSAnPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vb3BlbnJvdXRlc2VydmljZS5vcmcvXCI+b3BlbnJvdXRlc2VydmljZTwvYT4nO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHN3aXRjaChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmdlb3NlYXJjaC5nZW9zZWFyY2hfZW5naW5lKXtcbiAgICAgICAgICBjYXNlIFwiMVwiOiAvL09TTVxuICAgICAgICAgICAgICBhdHRyaWJ1dGlvblNlYXJjaCA9ICctIEdlb2NvZGVyIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL25vbWluYXRpbS5vcGVuc3RyZWV0bWFwLm9yZy9cIj5PcGVuU3RyZWV0TWFwPC9hPiAnO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiMlwiOiAvL01hcHF1ZXN0XG4gICAgICAgICAgICAgIGF0dHJpYnV0aW9uU2VhcmNoID0gJy0gR2VvY29kZXIgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHA6Ly93d3cubWFwcXVlc3QuY29tL1wiPk1hcFF1ZXN0PC9hPiAnO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiM1wiOiAvL2N1c3RvbVxuICAgICAgICAgICAgICBhdHRyaWJ1dGlvblNlYXJjaCA9ICctIE5vbWluYXRpbS1HZW9jb2RlciAnO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiNFwiOiAvL2NvbjRnaXNcbiAgICAgICAgICAgICAgYXR0cmlidXRpb25TZWFyY2ggPSAnLSBHZW9jb2RlciBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuY29uNGdpcy5vcmcva2FydGVuZGllbnN0ZS5odG1sXCI+Y29uNGdpczwvYT4gJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAgIHN3aXRjaChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uKXtcbiAgICAgICAgICAgIGNhc2UgXCIwXCI6XG4gICAgICAgICAgICAgICAgYXR0cmlidXRpb25Sb3V0ZXJIb3N0ID0gJy0gT1NSTSBob3N0aW5nIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vYWxnbzIuaXRpLmtpdC5lZHUvXCI+S0lUPC9hPic7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiMVwiOlxuICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uUm91dGVySG9zdCA9ICctIE9TUk0gaG9zdGluZyBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL2FsZ28yLml0aS5raXQuZWR1L1wiPktJVDwvYT4nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIjJcIjpcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGlvblJvdXRlckhvc3QgPSAnXFwnLSBPUlMgaG9zdGluZyBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuZ2VvZy51bmktaGVpZGVsYmVyZy5kZS9naXMvaGVpZ2l0X2VuLmh0bWxcIj5IZWlHSVQ8L2E+XFwnJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvL1RvRG8gY2hlY2sgcGFyYW1zXG4gICAgICBhdHRyaWJ1dGlvbkh0bWwgPSBhdHRyaWJ1dGlvblJvdXRlciArIGF0dHJpYnV0aW9uU2VhcmNoICsgYXR0cmlidXRpb25Sb3V0ZXJIb3N0O1xuICAgICAgYXR0cmlidXRpb25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBhdHRyaWJ1dGlvbldyYXBwZXIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9BVFRSSUJVVElPTl9XUkFQUEVSO1xuXG4gICAgICBhdHRyaWJ1dGlvbldyYXBwZXIuaW5uZXJIVE1MID0gYXR0cmlidXRpb25IdG1sO1xuXG4gICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXR0cmlidXRpb24pIHtcbiAgICAgICAgYXR0cmlidXRpb25XcmFwcGVyLmlubmVySFRNTCA9IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2F0dHJpYnV0aW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXR0cmlidXRpb25XcmFwcGVyO1xuXG4gICAgfSxcblxuICAgIHJlY2FsY3VsYXRlUm91dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0bXBGZWF0dXJlLFxuICAgICAgcHJveHkgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eTtcblxuICAgICAgdGhpcy5sb2NhdGlvbnNTb3VyY2UuY2xlYXIoKTtcbiAgICAgIGlmICh0aGlzLmZyb21WYWx1ZSkge1xuICAgICAgICB0bXBGZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoe1xuICAgICAgICAgIGdlb21ldHJ5OiB0aGlzLmZyb21WYWx1ZS5jbG9uZSgpLnRyYW5zZm9ybSgnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfZnJvbV9sb2NzdHlsZSAmJiBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfZnJvbV9sb2NzdHlsZV0pIHtcbiAgICAgICAgICB0bXBGZWF0dXJlLnNldFN0eWxlKHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1t0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9mcm9tX2xvY3N0eWxlXS5zdHlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2NhdGlvbnNTb3VyY2UuYWRkRmVhdHVyZSh0bXBGZWF0dXJlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnRvVmFsdWUpIHtcbiAgICAgICAgdG1wRmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICAgICAgICBnZW9tZXRyeTogdGhpcy50b1ZhbHVlLmNsb25lKCkudHJhbnNmb3JtKCdFUFNHOjQzMjYnLCAnRVBTRzozODU3JylcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl90b19sb2NzdHlsZSAmJiBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfdG9fbG9jc3R5bGVdKSB7XG4gICAgICAgICAgdG1wRmVhdHVyZS5zZXRTdHlsZShwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfdG9fbG9jc3R5bGVdLnN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvY2F0aW9uc1NvdXJjZS5hZGRGZWF0dXJlKHRtcEZlYXR1cmUpO1xuICAgICAgfVxuICAgICAgaWYodGhpcy5vdmVyVmFsdWUpe1xuICAgICAgICAgIGZvcih2YXIgcHJvcHQgaW4gdGhpcy5vdmVyVmFsdWUpe1xuICAgICAgICAgICAgICB0bXBGZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoe1xuICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IHRoaXMub3ZlclZhbHVlW3Byb3B0XS5jbG9uZSgpLnRyYW5zZm9ybSgnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfaW50ZXJpbV9sb2NzdHlsZSAmJiBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfaW50ZXJpbV9sb2NzdHlsZV0pIHtcbiAgICAgICAgICAgICAgICAgIHRtcEZlYXR1cmUuc2V0U3R5bGUocHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3RoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2ludGVyaW1fbG9jc3R5bGVdLnN0eWxlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLmxvY2F0aW9uc1NvdXJjZS5hZGRGZWF0dXJlKHRtcEZlYXR1cmUpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmZyb21WYWx1ZSAmJiB0aGlzLnRvVmFsdWUpIHtcbiAgICAgICAgICBpZih0aGlzLm92ZXJWYWx1ZSl7XG4gICAgICAgICAgICAgIHRoaXMucGVyZm9ybVZpYVJvdXRlKHRoaXMuZnJvbVZhbHVlLCB0aGlzLnRvVmFsdWUsIHRoaXMub3ZlclZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMucGVyZm9ybVZpYVJvdXRlKHRoaXMuZnJvbVZhbHVlLCB0aGlzLnRvVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0sXG5cbiAgICBwZXJmb3JtVmlhUm91dGU6IGZ1bmN0aW9uIChmcm9tUG9pbnQsIHRvUG9pbnQsIG92ZXJQb2ludCkge1xuXG4gICAgICB2YXIgdXJsLFxuICAgICAgICAgIHNlbGYsXG4gICAgICAgICAgZnJvbUNvb3JkLFxuICAgICAgICAgIHRvQ29vcmQsXG4gICAgICAgICAgb3ZlckNvb3JkO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgZnJvbUNvb3JkID0gW2Zyb21Qb2ludC5nZXRDb29yZGluYXRlcygpWzFdLCBmcm9tUG9pbnQuZ2V0Q29vcmRpbmF0ZXMoKVswXV07XG4gICAgICB0b0Nvb3JkID0gW3RvUG9pbnQuZ2V0Q29vcmRpbmF0ZXMoKVsxXSwgdG9Qb2ludC5nZXRDb29yZGluYXRlcygpWzBdXTtcbiAgICAgIGlmKG92ZXJQb2ludCl7XG4gICAgICAgICAgb3ZlckNvb3JkID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgZm9yKHZhciBwcm9wdCBpbiBvdmVyUG9pbnQpe1xuICAgICAgICAgICAgICBvdmVyQ29vcmQucHVzaChbb3ZlclBvaW50W3Byb3B0XS5nZXRDb29yZGluYXRlcygpWzFdLCBvdmVyUG9pbnRbcHJvcHRdLmdldENvb3JkaW5hdGVzKClbMF1dKTtcbiAgICAgICAgICB9XG5cbiAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT0gJzEnIHx8IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT0gJzInKXsvL09TUk0tQVBJOjUueCBvciBPUlMtIEFQSVxuICAgICAgICAgICAgdXJsID0gc2VsZi5yb3V0aW5nQXBpICsgJy8nICsgZnJvbUNvb3JkIDtcblxuICAgICAgICAgICAgaWYob3ZlclBvaW50KXtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwO2k8b3ZlckNvb3JkLmxlbmd0aDtpKyspXG4gICAgICAgICAgICAgICAgdXJsICs9Jy8nK292ZXJDb29yZFtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVybCArPScvJyt0b0Nvb3JkO1xuICAgICAgICAgICAgaWYodGhpcy5yb3V0ZVByb2ZpbGUgJiYgdGhpcy5yb3V0ZVByb2ZpbGUuYWN0aXZlKXtcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz9wcm9maWxlPScrdGhpcy5yb3V0ZVByb2ZpbGUuYWN0aXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zcGlubmVyLnNob3coKTtcblxuICAgICAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgICAgICd1cmwnOiB1cmx9KVxuICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNob3dSb3V0ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuICcnO1xuXG4gICAgICAgIH0gZWxzZXsvL09TUk0tQVBJOjw1XG4gICAgICAgICAgICB1cmwgPSBzZWxmLnJvdXRpbmdBcGkgKyAnP291dHB1dD1qc29uJmluc3RydWN0aW9ucz10cnVlJmFsdD1mYWxzZSZsb2NfZnJvbT0nICsgZnJvbUNvb3JkICsgJyZsb2NfdG89JyArIHRvQ29vcmQ7XG4gICAgICAgICAgICB0aGlzLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICAgICAgJ3VybCc6IHVybH0pXG4gICAgICAgICAgICAuZG9uZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNob3dSb3V0ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG5cbiAgICB9LFxuXG4gICAgc2hvd1JvdXRlOiBmdW5jdGlvbiAocm91dGVSZXNwb25zZSkge1xuXG4gICAgICB0aGlzLnNob3dSb3V0ZUxheWVyKHJvdXRlUmVzcG9uc2UsMCk7XG4gICAgICB0aGlzLnNob3dSb3V0ZUluc3RydWN0aW9ucyhyb3V0ZVJlc3BvbnNlLDApO1xuICAgIH0sXG4gICAgc2hvd0FsdFJvdXRlOiBmdW5jdGlvbiAocm91dGVSZXNwb25zZSwgcm91dGVOdW1iZXIpe1xuICAgICAgdGhpcy5zaG93Um91dGVMYXllcihyb3V0ZVJlc3BvbnNlLHJvdXRlTnVtYmVyKTtcbiAgICAgIHRoaXMuc2hvd1JvdXRlSW5zdHJ1Y3Rpb25zKHJvdXRlUmVzcG9uc2Uscm91dGVOdW1iZXIpO1xuICAgIH0sXG5cbiAgICBzaG93Um91dGVMYXllcjogZnVuY3Rpb24gKHJvdXRlUmVzcG9uc2Uscm91dGVOdW1iZXIpIHtcblxuICAgICAgdmFyIG1hcFZpZXcsXG4gICAgICAgICAgd2F5UG9seWxpbmUsXG4gICAgICAgICAgcm91dGVGZWF0dXJlcyxcbiAgICAgICAgICBhbHRSb3V0ZUZlYXR1cmVzLFxuICAgICAgICAgIHJpZ2h0UGFkZGluZyxcbiAgICAgICAgICBsZWZ0UGFkZGluZyxcbiAgICAgICAgICByb3V0ZU51bWJlciA9IHJvdXRlTnVtYmVyIHx8IDA7XG5cbiAgICAgIGlmKHJvdXRlUmVzcG9uc2UpIHtcbiAgICAgICAgICB0aGlzLnJvdXRpbmdXYXlTb3VyY2UuY2xlYXIoKTtcbiAgICAgICAgICB0aGlzLnJvdXRpbmdBbHRXYXlTb3VyY2UuY2xlYXIoKTtcbiAgICAgICAgICBtYXBWaWV3ID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKTtcblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcxJyB8fHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT0gJzInICkgey8vT1NSTS1BUEk6NS54XG4gICAgICAgICAgICAgIHdheVBvbHlsaW5lID0gbmV3IG9sLmZvcm1hdC5Qb2x5bGluZSgpO1xuXG4gICAgICAgICAgICAgIC8vIGFkZCByb3V0ZVxuXG4gICAgICAgICAgICAgIGlmIChyb3V0ZVJlc3BvbnNlLnJvdXRlcyAmJiByb3V0ZVJlc3BvbnNlLnJvdXRlc1sxXSkgey8vY2hlY2sgZm9yIGFsdGVybmF0aXZlIHJvdXRlXG4gICAgICAgICAgICAgICAgICBpZiAocm91dGVOdW1iZXIgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGFsdFJvdXRlRmVhdHVyZXMgPSB3YXlQb2x5bGluZS5yZWFkRmVhdHVyZXMocm91dGVSZXNwb25zZS5yb3V0ZXNbMF0uZ2VvbWV0cnksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb246ICdFUFNHOjQzMjYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogbWFwVmlldy5nZXRQcm9qZWN0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICBhbHRSb3V0ZUZlYXR1cmVzWzBdLnNldElkKDApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgYWx0Um91dGVGZWF0dXJlcyA9IHdheVBvbHlsaW5lLnJlYWRGZWF0dXJlcyhyb3V0ZVJlc3BvbnNlLnJvdXRlc1sxXS5nZW9tZXRyeSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBtYXBWaWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIGFsdFJvdXRlRmVhdHVyZXNbMF0uc2V0SWQoMSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcm91dGVGZWF0dXJlcyA9IHdheVBvbHlsaW5lLnJlYWRGZWF0dXJlcyhyb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0uZ2VvbWV0cnksIHtcbiAgICAgICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBtYXBWaWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcm91dGVGZWF0dXJlc1swXS5zZXRJZChyb3V0ZU51bWJlcik7XG5cblxuICAgICAgICAgIH0gZWxzZSB7Ly9PU1JNLUFQSTo8NVxuICAgICAgICAgICAgICB3YXlQb2x5bGluZSA9IG5ldyBvbC5mb3JtYXQuUG9seWxpbmUoe1xuICAgICAgICAgICAgICAgICAgJ2ZhY3Rvcic6IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3ZpYXJvdXRlX3ByZWNpc2lvbiB8fCAxZTZcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgLy8gYWRkIHJvdXRlXG4gICAgICAgICAgICAgIHJvdXRlRmVhdHVyZXMgPSB3YXlQb2x5bGluZS5yZWFkRmVhdHVyZXMocm91dGVSZXNwb25zZS5yb3V0ZV9nZW9tZXRyeSwge1xuICAgICAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb246ICdFUFNHOjQzMjYnLFxuICAgICAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246IG1hcFZpZXcuZ2V0UHJvamVjdGlvbigpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYWx0ZXJuYXRpdmUgPT0gJzEnKSB7XG4gICAgICAgICAgICAgIGlmIChyb3V0ZVJlc3BvbnNlLnJvdXRlcyAmJiAocm91dGVSZXNwb25zZS5yb3V0ZXMubGVuZ3RoID4gMSkgJiYgKHJvdXRlUmVzcG9uc2Uucm91dGVzWzFdKSkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5yb3V0aW5nQWx0V2F5U291cmNlLmFkZEZlYXR1cmVzKGFsdFJvdXRlRmVhdHVyZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucm91dGluZ1dheVNvdXJjZS5hZGRGZWF0dXJlcyhyb3V0ZUZlYXR1cmVzKTtcbiAgICAgICAgICAvLyByZW5kZXIgdmlld1xuICAgICAgICAgIC8vIHNvIHRoZSByb3V0ZSBnZXRzIGRyYXduIGJlZm9yZSB0aGUgYW5pbWF0aW9uIHN0YXJ0c1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5yZW5kZXJTeW5jKCk7XG5cbiAgICAgICAgICAvLyBhbmltYXRpb25cbiAgICAgICAgICBtYXBWaWV3LmFuaW1hdGUoe1xuICAgICAgICAgICAgICBzdGFydDogK25ldyBEYXRlKCksXG4gICAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAwLFxuICAgICAgICAgICAgICByZXNvbHV0aW9uOiBtYXBWaWV3LmdldFJlc29sdXRpb24oKSxcbiAgICAgICAgICAgICAgY2VudGVyOiBbMCwgMF1cbiAgICAgICAgICAgICAgLy9yb3RhdGlvbjogTWF0aC5QSVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5iZWZvcmVSZW5kZXIoXG4gICAgICAgICAgLy8gICAgIG9sLmFuaW1hdGlvbi5wYW4oe1xuICAgICAgICAgIC8vICAgICAgIHN0YXJ0OiArbmV3IERhdGUoKSxcbiAgICAgICAgICAvLyAgICAgICBkdXJhdGlvbjogMjAwMCxcbiAgICAgICAgICAvLyAgICAgICBzb3VyY2U6IG1hcFZpZXcuZ2V0Q2VudGVyKClcbiAgICAgICAgICAvLyAgICAgfSksXG4gICAgICAgICAgLy8gICAgIG9sLmFuaW1hdGlvbi56b29tKHtcbiAgICAgICAgICAvLyAgICAgICBzdGFydDogK25ldyBEYXRlKCksXG4gICAgICAgICAgLy8gICAgICAgZHVyYXRpb246IDIwMDAsXG4gICAgICAgICAgLy8gICAgICAgcmVzb2x1dGlvbjogbWFwVmlldy5nZXRSZXNvbHV0aW9uKClcbiAgICAgICAgICAvLyAgICAgfSlcbiAgICAgICAgICAvLyApO1xuXG4gICAgICAgICAgLy8gY2FsY3VsYXRlIHBhZGRpbmdcbiAgICAgICAgICBsZWZ0UGFkZGluZyA9IDA7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmFjdGl2ZVBvcnRzaWRlICYmIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmFjdGl2ZVBvcnRzaWRlLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICBsZWZ0UGFkZGluZyA9ICQodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuYWN0aXZlUG9ydHNpZGUuY29udGFpbmVyKS5vdXRlcldpZHRoKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmlnaHRQYWRkaW5nID0gMDtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuYWN0aXZlU3RhcmJvYXJkICYmIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmFjdGl2ZVN0YXJib2FyZC5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgcmlnaHRQYWRkaW5nID0gJCh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5hY3RpdmVTdGFyYm9hcmQuY29udGFpbmVyKS5vdXRlcldpZHRoKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gY2VudGVyIG9uIHJvdXRlXG4gICAgICAgICAgbWFwVmlldy5maXQoXG4gICAgICAgICAgICAgIHJvdXRlRmVhdHVyZXNbMF0uZ2V0R2VvbWV0cnkoKSxcbiAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFNpemUoKSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgcGFkZGluZzogWzAsIHJpZ2h0UGFkZGluZywgMCwgbGVmdFBhZGRpbmddXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG5cblxuXG4gICAgICBnZXRJbnN0cnVjdGlvbkljb246IGZ1bmN0aW9uKHN0ck1vZCxzdHJUeXBlKSB7XG4gICAgICAgICAgdmFyIGltYWdlID0gXCJcIjtcblxuICAgICAgICAgIHN3aXRjaChzdHJNb2QpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9IFwidHVybi1yaWdodC5wbmdcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBcInR1cm4tbGVmdC5wbmdcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwic2hhcnAgbGVmdFwiOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBcInNoYXJwLWxlZnQucG5nXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNoYXJwIHJpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9IFwic2hhcnAtcmlnaHQucG5nXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNsaWdodCBsZWZ0XCI6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9IFwic2xpZ2h0LWxlZnQucG5nXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNsaWdodCByaWdodFwiOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBcInNsaWdodC1yaWdodC5wbmdcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidXR1cm5cIjpcbiAgICAgICAgICAgICAgICAgIGltYWdlID0gXCJ1LXR1cm4ucG5nXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInN0cmFpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9IFwiY29udGludWUucG5nXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGltYWdlID1cImRlZmF1bHQucG5nXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpdGNoKHN0clR5cGUpe1xuICAgICAgICAgICAgICBjYXNlIFwiZGVwYXJ0XCI6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9XCJoZWFkLnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJhcnJpdmVcIjpcbiAgICAgICAgICAgICAgICAgIGltYWdlID1cInRhcmdldC5wbmdcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwicm91bmRhYm91dFwiOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPVwicm91bmQtYWJvdXQucG5nXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBcImJ1bmRsZXMvY29uNGdpc21hcHMvdmVuZG9yL29zcm0vaW1hZ2VzL1wiICsgaW1hZ2U7XG4gICAgICB9LFxuICAgICAgZ2V0SW5zdHJ1Y3Rpb25JY29uT1JTOiBmdW5jdGlvbihpbnRUeXBlKXtcbiAgICAgICAgbGV0IGltYWdlO1xuICAgICAgICBzd2l0Y2goaW50VHlwZSl7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBcInR1cm4tbGVmdC5wbmdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpbWFnZSA9IFwidHVybi1yaWdodC5wbmdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBpbWFnZSA9IFwic2hhcnAtbGVmdC5wbmdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpbWFnZSA9IFwic2hhcnAtcmlnaHQucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBcInNsaWdodC1sZWZ0LnBuZ1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIGltYWdlID0gXCJzbGlnaHQtcmlnaHQucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBcImNvbnRpbnVlLnBuZ1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIGltYWdlID0gXCJyb3VuZC1hYm91dC5wbmdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICBpbWFnZSA9IFwicm91bmQtYWJvdXQucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBcInUtdHVybi5wbmdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBcInRhcmdldC5wbmdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBcImhlYWQucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgIGltYWdlID0gXCJzbGlnaHQtbGVmdC5wbmdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBcInNsaWdodC1yaWdodC5wbmdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdiYXNlJylbMF0uaHJlZiArIFwiYnVuZGxlcy9jb240Z2lzbWFwcy92ZW5kb3Ivb3NybS9pbWFnZXMvXCIgKyBpbWFnZTtcbiAgICAgIH0sXG5cbiAgICAgIGdldFR5cGVUZXh0OiBmdW5jdGlvbihzdHJUeXBlKSB7XG4gICAgICAgICAgdmFyIHRleHRJRDtcblxuICAgICAgICAgIHN3aXRjaChzdHJUeXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJ0dXJuXCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfVFlQRV8wXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcIm5ldyBuYW1lXCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfVFlQRV8xXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImRlcGFydFwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX1RZUEVfMlwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJhcnJpdmVcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9UWVBFXzNcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwibWVyZ2VcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9UWVBFXzRcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwib24gcmFtcFwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX1RZUEVfNVwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJvZmYgcmFtcFwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX1RZUEVfNlwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJmb3JrXCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfVFlQRV83XCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImVuZCBvZiByb2FkXCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfVFlQRV84XCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInVzZSBsYW5lXCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfVFlQRV85XCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImNvbnRpbnVlXCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfVFlQRV8xMFwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJyb3VuZGFib3V0XCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJleGl0IHJvdW5kYWJvdXRcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9UWVBFXzExXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInJvdGFyeVwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZXhpdCByb3RhcnlcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9UWVBFXzEyXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInJvdW5kYWJvdXQgdHVyblwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX1RZUEVfMTNcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwibm90aWZpY2F0aW9uXCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfVFlQRV8xNFwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxhbmdDb25zdGFudHNbdGV4dElEXTtcbiAgICAgIH0sXG5cbiAgICAgIGdldE1vZGlmaWVyVGV4dDogZnVuY3Rpb24oc3RyTW9kaWZpZXIpIHtcbiAgICAgICAgICB2YXIgdGV4dElEO1xuXG4gICAgICAgICAgc3dpdGNoKHN0ck1vZGlmaWVyKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJ1dHVyblwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX01PRF8wXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNoYXJwIHJpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfTU9EXzFcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9NT0RfMlwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJzbGlnaHQgcmlnaHRcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9NT0RfM1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJzdHJhaWdodFwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX01PRF80XCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNsaWdodCBsZWZ0XCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfTU9EXzVcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX01PRF82XCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNoYXJwIGxlZnRcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9NT0RfN1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfTU9EXzhcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxhbmdDb25zdGFudHNbdGV4dElEXTtcbiAgICAgIH0sXG4gICAgICBnZXREcml2aW5nSW5zdHJ1Y3Rpb25JY29uOiBmdW5jdGlvbiAoaW5zdHJ1Y3Rpb25JZCkge1xuICAgICAgICAgIHZhciBpZCxcbiAgICAgICAgICAgICAgaW1hZ2U7XG5cbiAgICAgICAgICBpZCA9IGluc3RydWN0aW9uSWQucmVwbGFjZSgvXjExLVxcZHsxLH0kLywgXCIxMVwiKTsgICAgLy8gZHVtYiBjaGVjaywgaWYgdGhlcmUgaXMgYSByb3VuZGFib3V0IChhbGwgaGF2ZSB0aGUgc2FtZSBpY29uKVxuXG4gICAgICAgICAgaW1hZ2UgPSAnZGVmYXVsdC5wbmcnO1xuXG4gICAgICAgICAgc3dpdGNoIChpZCkge1xuICAgICAgICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgICAgICAgIGltYWdlID0gJ2NvbnRpbnVlLnBuZyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnMic6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9ICdzbGlnaHQtcmlnaHQucG5nJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICczJzpcbiAgICAgICAgICAgICAgICAgIGltYWdlID0gJ3R1cm4tcmlnaHQucG5nJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICc0JzpcbiAgICAgICAgICAgICAgICAgIGltYWdlID0gJ3NoYXJwLXJpZ2h0LnBuZyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnNSc6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9ICd1LXR1cm4ucG5nJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICc2JzpcbiAgICAgICAgICAgICAgICAgIGltYWdlID0gJ3NoYXJwLWxlZnQucG5nJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICc3JzpcbiAgICAgICAgICAgICAgICAgIGltYWdlID0gJ3R1cm4tbGVmdC5wbmcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJzgnOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSAnc2xpZ2h0LWxlZnQucG5nJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICcxMCc6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9ICdoZWFkLnBuZyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnMTEnOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSAncm91bmQtYWJvdXQucG5nJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICcxNSc6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9ICd0YXJnZXQucG5nJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Jhc2UnKVswXS5ocmVmICsgXCJidW5kbGVzL2NvbjRnaXNtYXBzL3ZlbmRvci9vc3JtL2ltYWdlcy9cIiArIGltYWdlO1xuXG4gICAgICB9LFxuICAgICAgZ2V0VGV4dDogZnVuY3Rpb24gKGlkKSB7XG5cbiAgICAgICAgICB2YXIgdGV4dF9pZCA9IFwiUk9VVEVSX1wiICsgaWQ7XG5cbiAgICAgICAgICBpZiAobGFuZ0NvbnN0YW50c1t0ZXh0X2lkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2Fybih0ZXh0X2lkICsgXCIgY2FuJ3QgZmluZCBpbiBsYW5ndWFnZSBmaWxlcy5cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBsYW5nQ29uc3RhbnRzW3RleHRfaWRdO1xuICAgICAgfSxcblxuICAgICAgZ2V0RHJpdmluZ0luc3RydWN0aW9uOiBmdW5jdGlvbiAoaW5zdHJ1Y3Rpb25JZCkge1xuXG4gICAgICAgICAgdmFyIGlkLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjtcblxuICAgICAgICAgIGlkID0gXCJESVJFQ1RJT05fXCIgKyBpbnN0cnVjdGlvbklkLnJlcGxhY2UoL14xMS1cXGR7Mix9JC8sIFwiMTEteFwiKTsgICAvLyBkdW1iIGNoZWNrLCBpZiB0aGVyZSBhcmUgMTArIGV4aXRzIG9uIGEgcm91bmRhYm91dCAoc2F5IHRoZSBzYW1lIGZvciBleGl0IDEwKylcblxuICAgICAgICAgIGRlc2NyaXB0aW9uID0gdGhpcy5nZXRUZXh0KGlkKTtcbiAgICAgICAgICBpZiAoIWRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gdGhpcy5nZXRUZXh0KCdESVJFQ1RJT05fMCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAgIH0sXG4gICAgICBzaG93Um91dGVJbnN0cnVjdGlvbnM6IGZ1bmN0aW9uIChyb3V0ZVJlc3BvbnNlLHJvdXRlTnVtYmVyKSB7XG5cbiAgICAgICAgICB2YXIgc2VsZixcbiAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb24sXG4gICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0hlYWRlcixcbiAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCxcbiAgICAgICAgICAgICAgaW5zdHIsXG4gICAgICAgICAgICAgIHN0clR5cGUsXG4gICAgICAgICAgICAgIHN0ck1vZCxcbiAgICAgICAgICAgICAgcm93c3R5bGUsXG4gICAgICAgICAgICAgIHJvdXRlTnVtYmVyID0gcm91dGVOdW1iZXIgfHwgMCxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgcm91dGVfbmFtZV8wID0gXCJcIixcbiAgICAgICAgICAgICAgcm91dGVfbmFtZV8xID0gXCJcIixcbiAgICAgICAgICAgICAgdG90YWxfZGlzdGFuY2UgPSBcIlwiLFxuICAgICAgICAgICAgICB0b3RhbF90aW1lID0gXCJcIjtcblxuICAgICAgICAgIHNlbGYgPSB0aGlzO1xuXG5cbiAgICAgICAgICBpZiAoc2VsZi5yb3V0ZXJJbnN0cnVjdGlvbnNXcmFwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgc2VsZi5yb3V0ZXJJbnN0cnVjdGlvbnNXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgIHNlbGYucm91dGVySW5zdHJ1Y3Rpb25zV3JhcHBlci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19XUkFQUEVSO1xuICAgICAgICAgICAgICBzZWxmLnJvdXRlclZpZXdDb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZChzZWxmLnJvdXRlckluc3RydWN0aW9uc1dyYXBwZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICQoc2VsZi5yb3V0ZXJJbnN0cnVjdGlvbnNXcmFwcGVyKS5lbXB0eSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0hlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0hlYWRlci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19IRUFERVI7XG5cbiAgICAgICAgICBpZiAocm91dGVSZXNwb25zZSkge1xuICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA9PSAnMScpIHsvL09TUk0tQVBJOjUueFxuICAgICAgICAgICAgICAgICAgaWYgKHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5sZWdzWzBdLnN1bW1hcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZV9uYW1lXzAgPSByb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0ubGVnc1swXS5zdW1tYXJ5LnNwbGl0KFwiLFwiKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZV9uYW1lXzEgPSByb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0ubGVnc1swXS5zdW1tYXJ5LnNwbGl0KFwiLFwiKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmxlZ3NbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVfbmFtZV8xID0gcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmxlZ3NbMV0uc3VtbWFyeS5zcGxpdChcIixcIilbMV07XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB0b3RhbF9kaXN0YW5jZSA9IHRoaXMudG9IdW1hbkRpc3RhbmNlKHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5kaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICB0b3RhbF90aW1lID0gdGhpcy50b0h1bWFuVGltZShyb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0uZHVyYXRpb24pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICBlbHNlIGlmKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT0gJzAnKSB7Ly9PU1JNLUFQSTo8NVxuICAgICAgICAgICAgICBpZiAocm91dGVSZXNwb25zZS5yb3V0ZV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgICByb3V0ZV9uYW1lXzAgPSByb3V0ZVJlc3BvbnNlLnJvdXRlX25hbWVbMF07XG4gICAgICAgICAgICAgICAgICByb3V0ZV9uYW1lXzEgPSByb3V0ZVJlc3BvbnNlLnJvdXRlX25hbWVbMV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAocm91dGVSZXNwb25zZS5yb3V0ZV9zdW1tYXJ5KSB7XG4gICAgICAgICAgICAgICAgICB0b3RhbF9kaXN0YW5jZSA9IHRoaXMudG9IdW1hbkRpc3RhbmNlKHJvdXRlUmVzcG9uc2Uucm91dGVfc3VtbWFyeS50b3RhbF9kaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICB0b3RhbF90aW1lID0gdGhpcy50b0h1bWFuVGltZShyb3V0ZVJlc3BvbnNlLnJvdXRlX3N1bW1hcnkudG90YWxfdGltZSk7XG4gICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT0gJzInKXsvL09TUi1BUElcbiAgICAgICAgICAgICAgICAgIHRvdGFsX3RpbWUgPSB0aGlzLnRvSHVtYW5UaW1lKHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5zdW1tYXJ5LmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgIHRvdGFsX2Rpc3RhbmNlID0gdGhpcy50b0h1bWFuRGlzdGFuY2Uocm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLnN1bW1hcnkuZGlzdGFuY2UpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICBpZihyb3V0ZV9uYW1lXzAgJiYgcm91dGVfbmFtZV8xKXtcbiAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSGVhZGVyLmlubmVySFRNTCA9ICc8bGFiZWw+JyArIGxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfTEFCRUxfUk9VVEUgKyAnPC9sYWJlbD4gPGVtPicgKyByb3V0ZV9uYW1lXzAgKyAnICYjODU5NDsgJyArIHJvdXRlX25hbWVfMSArICc8L2VtPjxicj4nICsgJzxsYWJlbD4nICsgbGFuZ0NvbnN0YW50cy5ST1VURVJfVklFV19MQUJFTF9ESVNUQU5DRSArICc8L2xhYmVsPiA8ZW0+JyArIHRvdGFsX2Rpc3RhbmNlICsgJzwvZW0+PGJyPicgKyAnPGxhYmVsPicgKyBsYW5nQ29uc3RhbnRzLlJPVVRFUl9WSUVXX0xBQkVMX1RJTUUgKyAnPC9sYWJlbD4gPGVtPicgKyB0b3RhbF90aW1lICsgJzwvZW0+PGJyPic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYodGhpcy5yb3V0ZVByb2ZpbGUuYWN0aXZlKXtcbiAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSGVhZGVyLmlubmVySFRNTCA9ICc8bGFiZWw+JyArIGxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfTEFCRUxfUFJPRklMRSArICc8L2xhYmVsPiA8ZW0+Jyt0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlc1t0aGlzLnJvdXRlUHJvZmlsZS5hY3RpdmVdICArICc8L2VtPjxicj4nICsgJzxsYWJlbD4nICsgbGFuZ0NvbnN0YW50cy5ST1VURVJfVklFV19MQUJFTF9ESVNUQU5DRSArICc8L2xhYmVsPiA8ZW0+JyArIHRvdGFsX2Rpc3RhbmNlICsgJzwvZW0+PGJyPicgKyAnPGxhYmVsPicgKyBsYW5nQ29uc3RhbnRzLlJPVVRFUl9WSUVXX0xBQkVMX1RJTUUgKyAnPC9sYWJlbD4gPGVtPicgKyB0b3RhbF90aW1lICsgJzwvZW0+PGJyPic7XG4gICAgICAgICAgfVxuXG5cblxuICAgICAgICAgIHNlbGYucm91dGVySW5zdHJ1Y3Rpb25zV3JhcHBlci5hcHBlbmRDaGlsZChyb3V0ZXJJbnN0cnVjdGlvbnNIZWFkZXIpO1xuXG4gICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgPSAnPHRhYmxlIGNsYXNzPVwiJyArIGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX1RBQkxFICsgJ1wiIGNlbGxwYWRkaW5nPVwiMFwiIGNlbGxzcGFjaW5nPVwiMFwiPic7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT09ICcxJykgey8vT1NSTS1BUEk6NS54XG4gICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCByb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0ubGVncy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5sZWdzW2pdLnN0ZXBzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaW5zdHIgPSByb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0ubGVnc1tqXS5zdGVwc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICAgIHN0clR5cGUgPSBpbnN0ci5tYW5ldXZlci50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnN0ci5tYW5ldXZlci5tb2RpZmllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJNb2QgPSBpbnN0ci5tYW5ldXZlci5tb2RpZmllcjtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgcm93c3R5bGUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX09ERDtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChpICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzdHlsZSA9IGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRVZFTjtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICByb3dzdHlsZSArPSBcIiBcIiArIGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU07XG5cbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8dHIgY2xhc3M9XCInICsgcm93c3R5bGUgKyAnXCI+JztcblxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzx0ZCBjbGFzcz1cIicgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTiArICdcIj4nO1xuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzxpbWcgY2xhc3M9XCInICsgY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT05fSUNPTiArICdcIiBzcmM9XCInICsgdGhpcy5nZXRJbnN0cnVjdGlvbkljb24oc3RyTW9kLCBzdHJUeXBlKSArICdcIiBhbHQ9XCJcIi8+JztcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8L3RkPic7XG5cblxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzx0ZCBjbGFzcz1cIicgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9URVhUICsgJ1wiIGRhdGEtcG9zPVwiJyArIGluc3RyLm1hbmV1dmVyLmxvY2F0aW9uICsgJ1wiPic7XG5cblxuICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1aWxkIHJvdXRlIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RydWN0aW9udGV4dCA9IHRoaXMuZ2V0VHlwZVRleHQoaW5zdHIubWFuZXV2ZXIudHlwZSkucmVwbGFjZSgvJXMvLCBpbnN0ci5uYW1lKS5yZXBsYWNlKC8lbS8sIHRoaXMuZ2V0TW9kaWZpZXJUZXh0KGluc3RyLm1hbmV1dmVyLm1vZGlmaWVyKSkucmVwbGFjZSgvJXovLCBpbnN0ci5tYW5ldXZlci5leGl0KTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdHIubmFtZS5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0aW9udGV4dCA9IGluc3RydWN0aW9udGV4dC5yZXBsYWNlKC9cXFsuKj9cXF0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0aW9udGV4dCA9IGluc3RydWN0aW9udGV4dC5yZXBsYWNlKC9cXFsoLiopXFxdLywgXCIkMVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSBpbnN0cnVjdGlvbnRleHQ7XG5cblxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzwvZGl2Pic7XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSBcIjwvdGQ+XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8dGQgY2xhc3M9XCInICsgY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT05fRElTVEFOQ0UgKyAnXCI+JztcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmxlZ3NbMF0uc3RlcHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9IHRoaXMudG9IdW1hbkRpc3RhbmNlKGluc3RyLmRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSBcIjwvdGQ+XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9IFwiPC90cj5cIjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT09ICcwJyl7Ly9PU1JNLUFQSTo8NVxuICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcm91dGVSZXNwb25zZS5yb3V0ZV9pbnN0cnVjdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGluc3RyID0gcm91dGVSZXNwb25zZS5yb3V0ZV9pbnN0cnVjdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICByb3dzdHlsZSA9IGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fT0REO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoaSAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICByb3dzdHlsZSA9IGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRVZFTjtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcm93c3R5bGUgKz0gXCIgXCIgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNO1xuXG4gICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8dHIgY2xhc3M9XCInICsgcm93c3R5bGUgKyAnXCI+JztcblxuICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPHRkIGNsYXNzPVwiJyArIGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OICsgJ1wiPic7XG4gICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8aW1nIGNsYXNzPVwiJyArIGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0lDT04gKyAnXCIgc3JjPVwiJyArIHRoaXMuZ2V0RHJpdmluZ0luc3RydWN0aW9uSWNvbihpbnN0clswXSkgKyAnXCIgYWx0PVwiXCIvPic7XG4gICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8L3RkPic7XG5cbiAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzx0ZCBjbGFzcz1cIicgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9URVhUICsgJ1wiIGRhdGEtcG9zPVwiJyArIGluc3RyWzNdICsgJ1wiPic7XG5cbiAgICAgICAgICAgICAgICAgIC8vIGJ1aWxkIHJvdXRlIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICBpZiAoaW5zdHJbMV0gIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9IHRoaXMuZ2V0RHJpdmluZ0luc3RydWN0aW9uKGluc3RyWzBdKS5yZXBsYWNlKC9cXFsoLiopXFxdLywgXCIkMVwiKS5yZXBsYWNlKC8lcy8sIGluc3RyWzFdKS5yZXBsYWNlKC8lZC8sIHRoaXMuZ2V0VGV4dChpbnN0cls2XSkpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9IHRoaXMuZ2V0RHJpdmluZ0luc3RydWN0aW9uKGluc3RyWzBdKS5yZXBsYWNlKC9cXFsoLiopXFxdLywgXCJcIikucmVwbGFjZSgvJWQvLCB0aGlzLmdldFRleHQoaW5zdHJbNl0pKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8L2Rpdj4nO1xuICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSBcIjwvdGQ+XCI7XG5cbiAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzx0ZCBjbGFzcz1cIicgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9ESVNUQU5DRSArICdcIj4nO1xuICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IHJvdXRlUmVzcG9uc2Uucm91dGVfaW5zdHJ1Y3Rpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9IHRoaXMudG9IdW1hbkRpc3RhbmNlKGluc3RyWzVdKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gXCI8L3RkPlwiO1xuXG4gICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9IFwiPC90cj5cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT09ICcyJyApey8vT3BlblJvdXRlU2VydmljZVxuICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLnNlZ21lbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLnNlZ21lbnRzW2pdLnN0ZXBzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaW5zdHIgPSByb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0uc2VnbWVudHNbal0uc3RlcHNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgICBzdHJUeXBlID0gaW5zdHIudHlwZTtcblxuICAgICAgICAgICAgICAgICAgICAgIHJvd3N0eWxlID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9PREQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c3R5bGUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0VWRU47XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgcm93c3R5bGUgKz0gXCIgXCIgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPHRyIGNsYXNzPVwiJyArIHJvd3N0eWxlICsgJ1wiPic7XG5cbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8dGQgY2xhc3M9XCInICsgY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT04gKyAnXCI+JztcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8aW1nIGNsYXNzPVwiJyArIGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0lDT04gKyAnXCIgc3JjPVwiJyArIHRoaXMuZ2V0SW5zdHJ1Y3Rpb25JY29uT1JTKHN0clR5cGUpICsgJ1wiIGFsdD1cIlwiLz4nO1xuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzwvdGQ+JztcblxuICAgICAgICAgICAgICAgICAgICAgIGlmKGluc3RyLm1hbmV1dmVyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPHRkIGNsYXNzPVwiJyArIGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX1RFWFQgKyAnXCIgZGF0YS1wb3M9XCInICsgaW5zdHIubWFuZXV2ZXIubG9jYXRpb24gKyAnXCI+JztcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPHRkIGNsYXNzPVwiJyArIGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX1RFWFQgKyAnXCIgZGF0YS1wb3M9XCInICsgMCArICdcIj4nO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gYnVpbGQgcm91dGUgZGVzY3JpcHRpb25cblxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gaW5zdHIuaW5zdHJ1Y3Rpb247XG5cblxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzwvZGl2Pic7XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSBcIjwvdGQ+XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8dGQgY2xhc3M9XCInICsgY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT05fRElTVEFOQ0UgKyAnXCI+JztcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLnNlZ21lbnRzWzBdLnN0ZXBzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSB0aGlzLnRvSHVtYW5EaXN0YW5jZShpbnN0ci5kaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gXCI8L3RkPlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSBcIjwvdHI+XCI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cblxuICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzwvdGFibGU+JztcblxuICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uLmlubmVySFRNTCA9IHJvdXRlckluc3RydWN0aW9uc0h0bWw7XG5cbiAgICAgICAgICBzZWxmLnJvdXRlckluc3RydWN0aW9uc1dyYXBwZXIuYXBwZW5kQ2hpbGQocm91dGVySW5zdHJ1Y3Rpb24pO1xuXG4gICAgICAgICAgdGhpcy5hZGp1c3RJbnN0cnVjdGlvbk1hcEludGVyYWN0aW9uKCk7XG5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWRqdXN0SW5zdHJ1Y3Rpb25NYXBJbnRlcmFjdGlvbjogZnVuY3Rpb24gKHJvdXRlckluc3RydWN0aW9uKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgZm5JdGVtQ2xpY2ssXG4gICAgICAgICAgZm5JdGVtT3ZlcixcbiAgICAgICAgICBmbkl0ZW1PdXQ7XG5cbiAgICAgIGZuSXRlbUNsaWNrID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAoc2VsZi5yb3V0aW5nV2F5U291cmNlICYmIHNlbGYucm91dGluZ1dheVNvdXJjZS5nZXRGZWF0dXJlcygpICYmIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT0gJzAnICkge1xuICAgICAgICAgICAgICB2YXIgZmVhdHVyZSA9IHNlbGYucm91dGluZ1dheVNvdXJjZS5nZXRGZWF0dXJlcygpWzBdO1xuICAgICAgICAgICAgICBpZiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRDb29yZGluYXRlcyA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpW2VsZW1lbnQuZGF0YSgncG9zJyldO1xuICAgICAgICAgICAgICAgICAgc2VsZi5yb3V0aW5nSGludFNvdXJjZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRIaW50RmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogbmV3IG9sLmdlb20uUG9pbnQoY3VycmVudENvb3JkaW5hdGVzKVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBzZWxmLnJvdXRpbmdIaW50U291cmNlLmFkZEZlYXR1cmUoY3VycmVudEhpbnRGZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKGN1cnJlbnRDb29yZGluYXRlcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoc2VsZi5yb3V0aW5nV2F5U291cmNlICYmIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPj0gJzEnKXtcbiAgICAgICAgICAgICAgc2VsZi5yb3V0aW5nSGludFNvdXJjZS5jbGVhcigpO1xuICAgICAgICAgICAgICB2YXIgY29vcmRMb25MYXQgPSBlbGVtZW50LmRhdGEoJ3BvcycpO1xuICAgICAgICAgICAgICB2YXIgc3RyaW5nbG9ubGF0ID0gY29vcmRMb25MYXQuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICBzdHJpbmdsb25sYXRbMF0gPSBwYXJzZUZsb2F0KHN0cmluZ2xvbmxhdFswXSk7XG4gICAgICAgICAgICAgIHN0cmluZ2xvbmxhdFsxXSA9IHBhcnNlRmxvYXQoc3RyaW5nbG9ubGF0WzFdKTtcbiAgICAgICAgICAgICAgdmFyIG5ld0Nvb3JkID0gb2wucHJvai5mcm9tTG9uTGF0KHN0cmluZ2xvbmxhdCk7XG4gICAgICAgICAgICAgIHZhciBjdXJyZW50SGludEZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgICBnZW9tZXRyeTogbmV3IG9sLmdlb20uUG9pbnQobmV3Q29vcmQpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIHNlbGYucm91dGluZ0hpbnRTb3VyY2UuYWRkRmVhdHVyZShjdXJyZW50SGludEZlYXR1cmUpO1xuICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLnNldENlbnRlcihuZXdDb29yZCk7XG4gICAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm5JdGVtT3ZlciA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIGlmIChzZWxmLnJvdXRpbmdXYXlTb3VyY2UgJiYgc2VsZi5yb3V0aW5nV2F5U291cmNlLmdldEZlYXR1cmVzKCkgJiYgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA9PSAnMCcpIHtcbiAgICAgICAgICAgIHZhciBmZWF0dXJlID0gc2VsZi5yb3V0aW5nV2F5U291cmNlLmdldEZlYXR1cmVzKClbMF07XG4gICAgICAgICAgICBpZiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgIHNlbGYucm91dGluZ0hpbnRTb3VyY2UuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEhpbnRGZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoe1xuICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogbmV3IG9sLmdlb20uUG9pbnQoZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKClbZWxlbWVudC5kYXRhKCdwb3MnKV0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2VsZi5yb3V0aW5nSGludFNvdXJjZS5hZGRGZWF0dXJlKGN1cnJlbnRIaW50RmVhdHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYucm91dGluZ1dheVNvdXJjZSAmJiBzZWxmLnJvdXRpbmdXYXlTb3VyY2UuZ2V0RmVhdHVyZXMoKSAmJiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID49ICcxJykge1xuICAgICAgICAgICAgdmFyIGZlYXR1cmUgPSBzZWxmLnJvdXRpbmdXYXlTb3VyY2UuZ2V0RmVhdHVyZXMoKVswXTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5yb3V0aW5nSGludFNvdXJjZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHZhciBjb29yZExvbkxhdCA9IGVsZW1lbnQuZGF0YSgncG9zJyk7XG4gICAgICAgICAgICAgICAgdmFyIHN0cmluZ2xvbmxhdCA9IGNvb3JkTG9uTGF0LnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgICAgICBzdHJpbmdsb25sYXRbMF0gPSBwYXJzZUZsb2F0KHN0cmluZ2xvbmxhdFswXSk7XG4gICAgICAgICAgICAgICAgc3RyaW5nbG9ubGF0WzFdID0gcGFyc2VGbG9hdChzdHJpbmdsb25sYXRbMV0pO1xuICAgICAgICAgICAgICAgIHZhciBuZXdDb29yZCA9IG9sLnByb2ouZnJvbUxvbkxhdChzdHJpbmdsb25sYXQpO1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SGludEZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBuZXcgb2wuZ2VvbS5Qb2ludChuZXdDb29yZClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzZWxmLnJvdXRpbmdIaW50U291cmNlLmFkZEZlYXR1cmUoY3VycmVudEhpbnRGZWF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmbkl0ZW1PdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYucm91dGluZ0hpbnRTb3VyY2UuY2xlYXIoKTtcbiAgICAgIH07XG5cblxuICAgICAgJCgnW2RhdGEtcG9zXScsIHJvdXRlckluc3RydWN0aW9uKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuXG4gICAgICAgIHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCk7XG5cbiAgICAgICAgJGVsZW1lbnQuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZuSXRlbUNsaWNrKCRlbGVtZW50KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJGVsZW1lbnQub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm5JdGVtT3ZlcigkZWxlbWVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRlbGVtZW50Lm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZuSXRlbU91dCgpO1xuICAgICAgICB9KTtcblxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGNsZWFySW5wdXQ6IGZ1bmN0aW9uICgkaW5wdXQpIHtcblxuICAgICAgJGlucHV0LnZhbCgnJyk7XG4gICAgICAkaW5wdXQudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICB0aGlzLnJvdXRpbmdXYXlTb3VyY2UuY2xlYXIoKTtcbiAgICAgIHRoaXMucm91dGluZ0FsdFdheVNvdXJjZS5jbGVhcigpO1xuICAgICAgdGhpcy5yb3V0aW5nSGludFNvdXJjZS5jbGVhcigpO1xuXG5cbiAgICAgICQodGhpcy5yb3V0ZXJJbnN0cnVjdGlvbnNXcmFwcGVyKS5lbXB0eSgpO1xuICAgICAgdGhpcy5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgY2xlYXJPdmVyOiBmdW5jdGlvbiAoJGlucHV0LCBpbmRleCl7XG4gICAgICAgIGlmKHRoaXMub3ZlclZhbHVlKXtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm92ZXJWYWx1ZVtpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4kYnV0dG9uT3Zlci5wcm9wKFwiZGlzYWJsZWRcIixmYWxzZSk7XG4gICAgICAgICQodGhpcy5yb3V0ZXJJbnN0cnVjdGlvbnNXcmFwcGVyKS5lbXB0eSgpO1xuICAgICAgICB0aGlzLnJlY2FsY3VsYXRlUm91dGUoKTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9LFxuXG4gICAgcGVyZm9ybVJldmVyc2VTZWFyY2g6IGZ1bmN0aW9uICgkaW5wdXQsIHZhbHVlKSB7XG5cbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICB1cmw7XG5cbiAgICAgIHVybCA9IHRoaXMuZ2VvUmV2ZXJzZVNlYXJjaEFwaSArICc/Zm9ybWF0PWpzb24mbGF0PScgKyB2YWx1ZVsxXSArICcmbG9uPScgKyB2YWx1ZVswXTtcbiAgICAgIHRoaXMuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgJ3VybCc6IHVybH0pXG4gICAgICAgICAgLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYWRkcmVzcy5jaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzcG9uc2UuYWRkcmVzcy5jaXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYWRkcmVzcy5yb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICcsICcgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYWRkcmVzcy50b3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzcG9uc2UuYWRkcmVzcy50b3duO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYWRkcmVzcy5yb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICcsICcgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYWRkcmVzcy5yb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5hZGRyZXNzLmhvdXNlX251bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnICcgKyByZXNwb25zZS5hZGRyZXNzLmhvdXNlX251bWJlciArIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzcG9uc2UuYWRkcmVzcy5yb2FkICsgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3BvbnNlLmRpc3BsYXlfbmFtZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICRpbnB1dC52YWwodmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoJGlucHV0LmF0dHIoJ25hbWUnKSA9PT0gXCJyb3V0aW5nRnJvbVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi4kcm91dGVyRnJvbUNsZWFyLnNob3coKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJGlucHV0LmF0dHIoJ25hbWUnKSA9PT0gXCJyb3V0aW5nVG9cIikge1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJHJvdXRlclRvQ2xlYXIuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBzZWxmLnJlY2FsY3VsYXRlUm91dGUoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSlcbiAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgfSk7XG5cbiAgICB9LFxuXG4gICAgcGVyZm9ybVNlYXJjaDogZnVuY3Rpb24gKCRpbnB1dCwgdmFsdWUpIHtcblxuICAgICAgdmFyIG1hcCxcbiAgICAgICAgICBib3VuZHMsXG4gICAgICAgICAgdmlld2JveCxcbiAgICAgICAgICBzZWxmLFxuICAgICAgICAgIHVybDtcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGlmICgkaW5wdXQudmFsKCkgPT09IFwiXCIpIHtcbiAgICAgICAgLy9zZWxmLmNsZWFySW5wdXQoJGlucHV0KTtcbiAgICAgICAgZGVsZXRlIHNlbGZbdmFsdWVdO1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH1cblxuICAgICAgbWFwID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwO1xuICAgICAgYm91bmRzID0gbWFwLmdldFZpZXcoKS5jYWxjdWxhdGVFeHRlbnQobWFwLmdldFNpemUoKSk7XG4gICAgICBib3VuZHMgPSBvbC5wcm9qLnRyYW5zZm9ybUV4dGVudChib3VuZHMsIG1hcC5nZXRWaWV3KCkuZ2V0UHJvamVjdGlvbigpLCAnRVBTRzo0MzI2Jyk7XG4gICAgICB2aWV3Ym94ID0gJyZ2aWV3Ym94PScgKyBib3VuZHNbMF0gKyAnLCcgKyBib3VuZHNbMV0gKyAnLCcgKyBib3VuZHNbMl0gKyAnLCcgKyBib3VuZHNbM107XG5cbiAgICAgIHVybCA9IHNlbGYuZ2VvU2VhcmNoQXBpICsgJz9mb3JtYXQ9anNvbiZsaW1pdD0xJnE9JyArIGVuY29kZVVSSSgkaW5wdXQudmFsKCkpICsgdmlld2JveDtcblxuICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAndXJsJzogdXJsXG4gICAgICB9KS5kb25lKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgaWYodmFsdWUgPT09XCJvdmVyVmFsdWVcIil7XG4gICAgICAgICAgICAgICAgICBpZiAoIXNlbGYub3ZlclZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5vdmVyVmFsdWU9e307XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBzZWxmLm92ZXJWYWx1ZVtzZWxmLmluZGV4XT1uZXcgb2wuZ2VvbS5Qb2ludChbcGFyc2VGbG9hdChyZXNwb25zZVswXS5sb24pLCBwYXJzZUZsb2F0KHJlc3BvbnNlWzBdLmxhdCldKTtcbiAgICAgICAgICAgICAgICAgIHNlbGYuJGJ1dHRvbk92ZXIucHJvcChcImRpc2FibGVkXCIsZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICBzZWxmW3ZhbHVlXSA9IG5ldyBvbC5nZW9tLlBvaW50KFxuICAgICAgICAgICAgICAgICAgICAgIFtwYXJzZUZsb2F0KHJlc3BvbnNlWzBdLmxvbiksIHBhcnNlRmxvYXQocmVzcG9uc2VbMF0ubGF0KV1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhbGVydChsYW5nQ29uc3RhbnRzLlJPVVRFUl9WSUVXX0FMRVJUX0FERFJFU1MpO1xuICAgICAgICAgICAgICBzZWxmLmNsZWFySW5wdXQoJGlucHV0KTtcbiAgICAgICAgICAgICAgZGVsZXRlIHNlbGZbdmFsdWVdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgfSlcbiAgICAgIC5lcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYWxlcnQobGFuZ0NvbnN0YW50cy5ST1VURVJfVklFV19BTEVSVF9HRU9DT0RJTkcpO1xuICAgICAgfSk7XG5cblxuXG4gICAgICByZXR1cm4gXCJcIjtcblxuICAgIH0sXG5cbiAgICB0b0h1bWFuRGlzdGFuY2U6IGZ1bmN0aW9uIChkaXN0YW5jZUluTWV0ZXJzKSB7XG5cbiAgICAgIC8vIGNvcGllZCBmcm9tIG9sZCBzb3VyY2VzXG5cbiAgICAgIHZhciBkaXN0YW5jZSxcbiAgICAgICAgICBodW1hbkRpc3RhbmNlO1xuXG4gICAgICBkaXN0YW5jZSA9IHBhcnNlSW50KGRpc3RhbmNlSW5NZXRlcnMsIDEwKTtcbiAgICAgIGRpc3RhbmNlID0gZGlzdGFuY2UgLyAxMDAwO1xuXG4gICAgICBpZiAoZGlzdGFuY2UgPj0gMTAwKSB7XG4gICAgICAgIGh1bWFuRGlzdGFuY2UgPSBkaXN0YW5jZS50b0ZpeGVkKDApICsgJyZuYnNwOycgKyAna20nO1xuICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZSA+PSAxMCkge1xuICAgICAgICBodW1hbkRpc3RhbmNlID0gZGlzdGFuY2UudG9GaXhlZCgxKSArICcmbmJzcDsnICsgJ2ttJztcbiAgICAgIH0gZWxzZSBpZiAoZGlzdGFuY2UgPj0gMC4xKSB7XG4gICAgICAgIGh1bWFuRGlzdGFuY2UgPSBkaXN0YW5jZS50b0ZpeGVkKDIpICsgJyZuYnNwOycgKyAna20nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHVtYW5EaXN0YW5jZSA9IChkaXN0YW5jZSAqIDEwMDApLnRvRml4ZWQoMCkgKyAnJm5ic3A7JyArICdtJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGh1bWFuRGlzdGFuY2U7XG4gICAgfSxcblxuICAgIHRvSHVtYW5UaW1lOiBmdW5jdGlvbiAodGltZUluU2Vjb25kcykge1xuXG4gICAgICAvLyBjb3BpZWQgZnJvbSBvbGQgc291cmNlc1xuXG4gICAgICB2YXIgc2Vjb25kcyxcbiAgICAgICAgICBtaW51dGVzLFxuICAgICAgICAgIGhvdXJzLFxuICAgICAgICAgIGh1bWFuVGltZTtcblxuICAgICAgc2Vjb25kcyA9IHBhcnNlSW50KHRpbWVJblNlY29uZHMsIDEwKTtcbiAgICAgIG1pbnV0ZXMgPSBwYXJzZUludChzZWNvbmRzIC8gNjAsIDEwKTtcbiAgICAgIHNlY29uZHMgPSBzZWNvbmRzICUgNjA7XG5cbiAgICAgIGhvdXJzID0gcGFyc2VJbnQobWludXRlcyAvIDYwLCAxMCk7XG4gICAgICBtaW51dGVzID0gbWludXRlcyAlIDYwO1xuXG4gICAgICBpZiAoaG91cnMgPT09IDAgJiYgbWludXRlcyA9PT0gMCkge1xuICAgICAgICBodW1hblRpbWUgPSBzZWNvbmRzICsgJyZuYnNwOycgKyAncyc7XG4gICAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICAgIGh1bWFuVGltZSA9IG1pbnV0ZXMgKyAnJm5ic3A7JyArICdtaW4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHVtYW5UaW1lID0gaG91cnMgKyAnJm5ic3A7JyArICdoJyArICcmbmJzcDsnICsgbWludXRlcyArICcmbmJzcDsnICsgJ21pbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBodW1hblRpbWU7XG4gICAgfVxuXG4gIH0pO1xuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBSb3V0ZXIgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuUm91dGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1yb3V0ZXIuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnRyb2wgdG8gdG9nZ2xlIHRoZSBicm93c2VyL2Rlc3ZpY2UgcG9zaXRpb24gb24gdGhlIG1hcC5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzICB7b2wuY29udHJvbC5Db250cm9sfVxuICAgKlxuICAgKiBAcGFyYW0gICAge09iamVjdH0gICAgICAgICAgICAgIG9wdF9vcHRpb25zICAqb3B0aW9uYWwqIGNvbnRyb2wgb3B0aW9ucy5cbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuUHJpbnQgPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIGVsZW1lbnQsXG4gICAgICBidXR0b247XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuUFJJTlQsXG4gICAgICBzd2l0Y2hhYmxlOiB0cnVlLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZFxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgaWYgKCFvcHRpb25zLm1hcENvbnRyb2xsZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmlldyA9IG9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpO1xuICAgIHZhciBtYXBEYXRhID0gb3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGE7XG5cbiAgICB2YXIgdG9nZ2xlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwib2wtdW5zZWxlY3RhYmxlXCIpWzBdO1xuXG4gICAgICBjYW52YXMudG9CbG9iKGZ1bmN0aW9uKGJsb2IpIHtcbiAgICAgICAgbGV0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTtcbiAgICAgICAgYS5zdHlsZSA9IFwiZGlzcGxheTogbm9uZVwiO1xuICAgICAgICBsZXQgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIGEuaHJlZiA9IHVybDtcbiAgICAgICAgYS5kb3dubG9hZCA9ICdtYXAucG5nJztcbiAgICAgICAgYS5jbGljaygpO1xuICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIHdyYXBwZXIgZGl2XG4gICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc05hbWUgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFICsgJyBjNGctcG9ydHNpZGUtY29udHJvbCBvbC1jb250cm9sJztcblxuICAgIGlmIChvcHRpb25zLnN3aXRjaGFibGUpIHtcbiAgICAgIC8vIGJ1dHRvblxuICAgICAgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b24udGl0bGUgPSBvcHRpb25zLnRpcExhYmVsO1xuICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5QUklOVFxuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChidXR0b24pO1xuXG4gICAgICAvLyBzZXQgb25DbGljayB0byB0aGUgdG9nZ2xlLWZ1bmN0aW9uXG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGUsIGZhbHNlKTtcbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdG9nZ2xlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gaW5oZXJpdGFuY2Utc3R1ZmZcbiAgICBvbC5jb250cm9sLkNvbnRyb2wuY2FsbCh0aGlzLCB7XG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgdGFyZ2V0OiBvcHRpb25zLnRhcmdldFxuICAgIH0pO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLlByaW50LCBvbC5jb250cm9sLkNvbnRyb2wpO1xuXG5cbiAgLypcbiAgICogQWRkIG1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuUHJpbnQucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5QcmludC5wcm90b3R5cGUsIHtcblxuICAgIC8vIG5vdGhpbmcgdG8gYWRkIGhlcmVcblxuICB9KTsgLy8gZW5kIG9mIFwiYWRkIG1ldGhvZHNcIiAtLS1cblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgUHJpbnQgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuUHJpbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXByaW50LmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7U3Bpbm5lcn0gZnJvbSBcIi4vYzRnLW1hcHMtbWlzYy1zcGlubmVyXCI7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3Igc2lkZWJvYXJkIHN0cnVjdHVyZXMuIFByb3ZpZGVzIHN0YW5kYXJkIGNvbmZpZ3VyYXRpb25zIHdoaWNoIGFyZSBlcXVhbCBmb3IgZWFjaCBzaWRlYm9hcmQgZWxlbWVudC5cbiAqL1xuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAZXh0ZW5kcyB7b2wuY29udHJvbC5Db250cm9sfVxuICAgKiBAcGFyYW0gICB7b2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9ucyAgbWlzYyBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICpcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIGV4dERpdjogZmFsc2UsXG4gICAgICBkZWZhdWx0T3BlbjogZmFsc2UsXG4gICAgICBtYXBDb250cm9sbGVyOiB1bmRlZmluZWQsXG4gICAgICBuYW1lOiAnc2lkZWJvYXJkJyxcbiAgICAgIGRpcmVjdGlvbjogJ3JpZ2h0JyxcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIC8vYWN0aXZlIElkZW50aWZpZXIgKHdoaWNoIHNpZGUgaXMgdGhpcyBlbGVtZW50IG9uPylcbiAgICAvL2Nzc25hbWUgbmVlZGVkIHRvIHNldCB0aGUgY3NzIGNsYXNzIGNvcnJlY3RseVxuICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLmRpcmVjdGlvbikge1xuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9ICdQb3J0c2lkZSc7XG4gICAgICAgIHRoaXMuY3NzbmFtZSA9ICdwb3J0c2lkZSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSAnU3RhcmJvYXJkJztcbiAgICAgICAgdGhpcy5jc3NuYW1lID0gJ3N0YXJib2FyZCc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvL3RoaXMuY3NzbmFtZSA9IHRoaXMuaWRlbnRpZmllci5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHRoaXMuaWRlbnRpZmllci5zbGljZSgxKTtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zLnRpcExhYmVsID0gdGhpcy5vcHRpb25zLnRpcExhYmVsIHx8IHRoaXMub3B0aW9ucy5oZWFkbGluZSB8fCBsYW5nQ29uc3RhbnRzLkNUUkxfU0lERUJPQVJEO1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5idXR0b24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zcGlubmVyID0gdW5kZWZpbmVkO1xuICAgIC8vIG1haW5zdHJ1Y3R1cmUgZWxlbWVudHNcbiAgICB0aGlzLndyYXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50aXRsZUJhciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlYWRsaW5lID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudG9wVG9vbGJhciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbnRlbnRDb250YWluZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib3R0b21Ub29sYmFyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc3RhdHVzQmFyID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5zZWN0aW9ucyA9IFtdO1xuICAgIHRoaXMudmlld1RyaWdnZXJCYXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52aWV3cyA9IFtdO1xuICAgIHRoaXMuYWN0aXZlVmlldyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhdXNlZFZpZXcgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNyZWF0ZSAmJiB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcikge1xuICAgICAgdGhpcy5jcmVhdGUoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5leHREaXYpIHtcbiAgICAgIG9sLmNvbnRyb2wuQ29udHJvbC5jYWxsKHRoaXMsIHtcbiAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgICB0YXJnZXQ6IHRoaXMub3B0aW9ucy50YXJnZXQgfHwgdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIG9sLmluaGVyaXRzKGM0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkLCBvbC5jb250cm9sLkNvbnRyb2wpO1xuXG4gIC8vIEFkZCBtZXRob2RzXG4gIGM0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgYmFzaWMgaHRtbC1lbGVtZW50cyBmb3IgdGhlIHNpZGVib2FyZFxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICAndHJ1ZScgb24gc3VjY2Vzc1xuICAgICAqL1xuICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgaW5pdENsYXNzLFxuICAgICAgICAgIHRpdGxlQnV0dG9uQmFyLFxuICAgICAgICAgIGNsb3NlQnV0dG9uLFxuICAgICAgICAgIGNhcGl0YWxpemVkTmFtZSxcbiAgICAgICAgICBoaWRlQnV0dG9uLFxuICAgICAgICAgIGNhY2hpbmc7XG5cbiAgICAgIGNhY2hpbmcgPSB0aGlzLm9wdGlvbnMuY2FjaGluZztcbiAgICAgIGNhcGl0YWxpemVkTmFtZSA9IHV0aWxzLmNhcGl0YWxpemVGaXJzdExldHRlcih0aGlzLm9wdGlvbnMubmFtZSk7XG4gICAgICBzZWxmID0gdGhpcztcblxuXG4gICAgICAvLyBEbyBub3QgaGlkZSB3aGVuIGl0IGlzIGluaXRpYWxpemVkIG9wZW4sIG9yIGluIGFuIGV4dGVybmFsIGRpdlxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHREaXYpIHtcbiAgICAgICAgaW5pdENsYXNzID0gJyAnICsgY3NzQ29uc3RhbnRzLk9QRU47XG4gICAgICAgIC8vIGlmIChjYWNoaW5nKSB7XG4gICAgICAgIC8vICAgICB1dGlscy5zdG9yZVZhbHVlKHRoaXMub3B0aW9ucy5uYW1lLCAnMScpO1xuICAgICAgICAvLyB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0Q2xhc3MgPSAnICcgKyBjc3NDb25zdGFudHMuQ0xPU0U7XG4gICAgICAgIC8vIGlmIChjYWNoaW5nKSB7XG4gICAgICAgIC8vICAgICB1dGlscy5zdG9yZVZhbHVlKHRoaXMub3B0aW9ucy5uYW1lLCAnMCcpO1xuICAgICAgICAvLyB9XG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0gfHwgZmFsc2U7XG5cbiAgICAgICAgdGhpcy5idXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgJCh0aGlzLmJ1dHRvbikub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgLy8gbG9vc2UgZm9jdXMsIG90aGVyd2lzZSBpdCBsb29rcyBtZXNzeVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmJsdXIoKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBbbm90ZV0gXCJ0aGlzLmJsdXIoKVwiIGRvZXMgbm90IHdvcmsgaW4gSUUtZnVsbHNjcmVlbi1tb2RlXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZS5uYW1lICsgJzogJyArIGUubWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGNhcGl0YWxpemVkTmFtZSA9PSBcIlJvdXRlclwiIHx8IGNhcGl0YWxpemVkTmFtZSA9PSBcIk1lYXN1cmVcIiB8fCBjYXBpdGFsaXplZE5hbWUgPT0gXCJFZGl0b3JcIil7XG4gICAgICAgICAgICAgIHNlbGYudG9nZ2xlKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICBzZWxmLnRvZ2dsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYnV0dG9uLnRpdGxlID0gdGhpcy5vcHRpb25zLnRpcExhYmVsO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5idXR0b24pO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgYXR0cmlidXRlc1xuICAgICAgJCh0aGlzLmNvbnRhaW5lcikuYWRkQ2xhc3MoJ2M0Zy0nICsgdGhpcy5vcHRpb25zLm5hbWUgKyAnICcgKyAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLWNvbnRhaW5lcicgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFICsgaW5pdENsYXNzKTtcbiAgICAgICQodGhpcy5lbGVtZW50KS5hZGRDbGFzcygnYzRnLScgKyB0aGlzLm9wdGlvbnMubmFtZSArICcgJyArICdjNGctJyArIHRoaXMuY3NzbmFtZSArICctY29udHJvbCcgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX0NPTlRST0wgKyBpbml0Q2xhc3MpO1xuXG4gICAgICAvLyBTZXQgaW5pdGlhbCBkaW1lbnNpb25zXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAvL3RoaXMuY29udGFpbmVyLnN0eWxlLm1pbldpZHRoID0gJzI1MHB4JztcbiAgICAgICAgLy90aGlzLmNvbnRhaW5lci5zdHlsZVt0aGlzLm9wdGlvbnMuZGlyZWN0aW9uXSA9ICctMTkyMHB4JztcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGVbdGhpcy5vcHRpb25zLmRpcmVjdGlvbl0gPSAnLTEwMCUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy90aGlzLmNvbnRhaW5lci5zdHlsZS5taW5XaWR0aCA9ICcyNTBweCc7XG4gICAgICAgIC8vdGhpcy5jb250YWluZXIuc3R5bGVbdGhpcy5vcHRpb25zLmRpcmVjdGlvbl0gPSAnLTE5MjBweCc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlW3RoaXMub3B0aW9ucy5kaXJlY3Rpb25dID0gJy0xMDAlJztcbiAgICAgIH1cblxuICAgICAgLy8gUGxhY2UgY29udGFpbmVyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dERpdikge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm9wdGlvbnMuZXh0RGl2KS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIC8vICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSA9IHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgJCgnIycgKyB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VGFyZ2V0KCkgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX09WRVJMQVlDT05UQUlORVJfU0UpLmFwcGVuZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50LmFwcGVuZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQnVpbGQgY29udGVudC1hcmVhXG4gICAgICAvL1xuICAgICAgLy8gV3JhcHBlclxuICAgICAgdGhpcy53cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLndyYXBwZXIuY2xhc3NOYW1lID0gJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy13cmFwcGVyJztcbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMud3JhcHBlcik7XG4gICAgICAvLyBUaXRsZWJhclxuICAgICAgdGhpcy50aXRsZUJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy50aXRsZUJhci5jbGFzc05hbWUgPSAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLXRpdGxlYmFyJztcbiAgICAgIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnRpdGxlQmFyKTtcblxuICAgICAgLy8gVHJpZ2dlcmJhclxuICAgICAgdGhpcy52aWV3VHJpZ2dlckJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy52aWV3VHJpZ2dlckJhci5jbGFzc05hbWUgPSAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLXZpZXd0cmlnZ2VyYmFyJztcblxuICAgICAgLy8gVG9wLVRvb2xiYXJcbiAgICAgIHRoaXMudG9wVG9vbGJhciA9IHRoaXMuYWRkU2VjdGlvbih7XG4gICAgICAgIGNsYXNzTmFtZTogJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy10b3AtdG9vbGJhcicsXG4gICAgICAgIHRhcmdldDogdGhpcy53cmFwcGVyXG4gICAgICB9KTtcblxuICAgICAgLy8gQ29udGVudC1Db250YWluZXJcbiAgICAgIHRoaXMuY29udGVudENvbnRhaW5lciA9IHRoaXMuYWRkU2VjdGlvbih7XG4gICAgICAgIGNsYXNzTmFtZTogJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy1jb250ZW50LWNvbnRhaW5lcicsXG4gICAgICAgIHRhcmdldDogdGhpcy53cmFwcGVyXG4gICAgICB9KTtcblxuICAgICAgLy8gYWRkIGNvbnRlbnQgaGVhZGxpbmVcbiAgICAgIHRoaXMuY29udGVudEhlYWRsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmNvbnRlbnRIZWFkbGluZS5jbGFzc05hbWUgPSAnY29udGVudEhlYWRsaW5lJztcbiAgICAgIHRoaXMuY29udGVudEhlYWRsaW5lLmlubmVySFRNTCA9ICcnO1xuICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuY29udGVudEhlYWRsaW5lKTtcblxuICAgICAgLy8gQm90dG9tLVRvb2xiYXJcbiAgICAgIHRoaXMuYm90dG9tVG9vbGJhciA9IHRoaXMuYWRkU2VjdGlvbih7XG4gICAgICAgICAgY2xhc3NOYW1lOiAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLWJvdHRvbS10b29sYmFyIGM0Zy1jbG9zZScsXG4gICAgICAgICAgdGFyZ2V0OiB0aGlzLndyYXBwZXJcbiAgICAgIH0pO1xuXG4gICAgICAgLy8gU3RhdHVzYmFyXG4gICAgICB0aGlzLnN0YXR1c0JhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy5zdGF0dXNCYXIuY2xhc3NOYW1lID0gJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy1zdGF0dXNiYXIgYzRnLWNsb3NlJztcbiAgICAgIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnN0YXR1c0Jhcik7XG5cbiAgICAgIC8vIEFkZCBzcGlubmVyXG4gICAgICB0aGlzLnNwaW5uZXIgPSBuZXcgU3Bpbm5lcih7XG4gICAgICAgIHRhcmdldDogdGhpcy5jb250ZW50Q29udGFpbmVyLFxuICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5MQVJHRVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEZpbGwgdGl0bGViYXJcbiAgICAgIC8vXG4gICAgICAvLyBIZWFkbGluZVxuICAgICAgdGhpcy5oZWFkbGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIHRoaXMuaGVhZGxpbmUuY2xhc3NOYW1lID0gJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy1oZWFkbGluZSc7XG4gICAgICB0aGlzLmhlYWRsaW5lLmlubmVySFRNTCA9IHRoaXMub3B0aW9ucy5oZWFkbGluZTtcbiAgICAgIHRoaXMudGl0bGVCYXIuYXBwZW5kQ2hpbGQodGhpcy5oZWFkbGluZSk7XG4gICAgICAvLyBCdXR0b25iYXJcbiAgICAgIHRpdGxlQnV0dG9uQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aXRsZUJ1dHRvbkJhci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTCArICcgJyArICdjNGctJyArIHRoaXMuY3NzbmFtZSArICctYnV0dG9uYmFyJztcbiAgICAgIHRoaXMudGl0bGVCYXIuYXBwZW5kQ2hpbGQodGl0bGVCdXR0b25CYXIpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIC8vIEhpZGVidXR0b25cbiAgICAgICAgaGlkZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBoaWRlQnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5QT1JUU0lERV9ISURFO1xuICAgICAgICBoaWRlQnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5ISURFO1xuICAgICAgICAkKGhpZGVCdXR0b24pLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgc2VsZi5jbG9zZSh0cnVlKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICB0aXRsZUJ1dHRvbkJhci5hcHBlbmRDaGlsZChoaWRlQnV0dG9uKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xvc2VidXR0b25cbiAgICAgIGNsb3NlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBjbG9zZUJ1dHRvbi5jbGFzc05hbWUgPSAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLWNsb3NlJztcbiAgICAgIGNsb3NlQnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5DTE9TRTtcbiAgICAgICQoY2xvc2VCdXR0b24pLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgdGl0bGVCdXR0b25CYXIuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b24pO1xuXG4gICAgICAvL0FkZCBzcGlubmVyIGZvciBsZWZ0IHNpZGVkIHNpZGVib2FyZCBlbGVtZW50c1xuICAgICAgdGhpcy5zcGlubmVyID0gbmV3IFNwaW5uZXIoe1xuICAgICAgICB0YXJnZXQ6IHRoaXMuY29udGVudENvbnRhaW5lcixcbiAgICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuTEFSR0VcbiAgICAgIH0pO1xuXG4gICAgICAvLyBIYW5kbGUgZXh0ZXJuYWwgRElWIGFuZCBkZWZhdWx0IHN0YXRlXG4gICAgICAvLyBjYXRjaCB0b3VjaCBldmVudHMgYW5kIHN0b3AgdGhlaXIgcHJvcGFnYXRpb25cbiAgICAgIC8vIG90aGVyd2lzZSB0b3VjaC1zY3JvbGxpbmcgd2lsbCBiZSBzdG9wcGVkIGJ5IG9sM1xuICAgICAgJCh0aGlzLmNvbnRhaW5lcikub24oJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEJpbmQgdGhlIHVwZGF0ZSBtZXRob2QgdG8gdGhlIG1hcC1yZXNpemUgZXZlbnRcbiAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5vbignY2hhbmdlOnNpemUnLCB0aGlzLnVwZGF0ZSwgdGhpcyk7XG5cbiAgICAgIC8vIFNob3cgb3BlbiBpZiBkZXNpcmVkXG4gICAgICBpZiAoKHRoaXMub3B0aW9ucy5kZWZhdWx0T3BlbikgfHwgKHRoaXMub3B0aW9ucy5jYWNoaW5nICYmICh1dGlscy5nZXRWYWx1ZSh0aGlzLm9wdGlvbnMubmFtZSkgPT0gJzEnKSkpIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sIC8vIGVuZCBvZiBcImNyZWF0ZVwiXG5cbiAgICAvKipcbiAgICAgKiAgIFVwZGF0ZSB0aGUgc2lkZWJvYXJkcyBodG1sLWVsZW1lbnRzXG4gICAgICogICByZXNpemVzIHRoZSBjb250ZW50LWNvbnRhaW5lclxuICAgICAqICAgYW5kIHRoZSB0b3AtdG9vbGJhclxuICAgICAqXG4gICAgICogQHBhcmFtICB7ZXZlbnQtb2JqZWN0fSAgb3B0X2V2ZW50ICAqb3B0aW9uYWwqICBKdXN0IG5lZWRlZCBieSB0aGUgb2wtYmluZC1tZXRob2QsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXQgbm90IHVzZWQgaW4gdGhlIGZ1bmN0aW9uXG4gICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAob3B0X2V2ZW50KSB7XG5cbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIGNvbnRlbnRDb250YWluZXJPdXRlckhlaWdodCxcbiAgICAgICAgICBjb250YWluZXJPZmZzZXRXaWR0aDtcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8qXG4gICAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5uYW1lKSB7XG4gICAgICAgICAgY2FwaXRhbGl6ZWROYW1lID0gdXRpbHMuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHRoaXMub3B0aW9ucy5uYW1lKTtcbiAgICAgIH0qL1xuXG4gICAgICBjb250ZW50Q29udGFpbmVyT3V0ZXJIZWlnaHQgPSAkKHRoaXMud3JhcHBlcikuaGVpZ2h0KCkgLSAoJCh0aGlzLnRpdGxlQmFyKS5vdXRlckhlaWdodCh0cnVlKSArICQodGhpcy5zdGF0dXNCYXIpLm91dGVySGVpZ2h0KHRydWUpKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmRpcmVjdGlvbiAmJiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uICE9IFwidW5kZWZpbmVkXCIgJiYgdGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIGlmICh0aGlzICE9PSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSkge1xuICAgICAgICAgIGNvbnRhaW5lck9mZnNldFdpZHRoID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUb3AtVG9vbGJhclxuICAgICAgaWYgKHRoaXMudG9wVG9vbGJhcikge1xuICAgICAgICAgIGlmICh0aGlzLnRvcFRvb2xiYXIuaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAgIC8vIHRoaXMudG9wVG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgdGhpcy50b3BUb29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgICAgY29udGVudENvbnRhaW5lck91dGVySGVpZ2h0IC09ICQodGhpcy50b3BUb29sYmFyKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnRvcFRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEJvdHRvbS10b29sYmFyXG4gICAgICBpZiAodGhpcy5ib3R0b21Ub29sYmFyKSB7XG4gICAgICAgICAgaWYgKHRoaXMuYm90dG9tVG9vbGJhci5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLy8gdGhpcy5ib3R0b21Ub29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICB0aGlzLmJvdHRvbVRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgICAgICBjb250ZW50Q29udGFpbmVyT3V0ZXJIZWlnaHQgLT0gJCh0aGlzLmJvdHRvbVRvb2xiYXIpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuYm90dG9tVG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ29udGVudC1jb250YWluZXJcbiAgICAgICQodGhpcy5jb250ZW50Q29udGFpbmVyKS5vdXRlckhlaWdodChjb250ZW50Q29udGFpbmVyT3V0ZXJIZWlnaHQpO1xuXG4gICAgICAvLyBDb3JyZWN0IHdpZHRoXG4gICAgICBpZiAodGhpcy5vcHRpb25zKSB7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdID09PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vdGhpcy5jb250YWluZXIuc3R5bGUud2lkdGggPSAnYXV0byc7XG4gICAgICAgICAgICAgIGNvbnRhaW5lck9mZnNldFdpZHRoID0gdGhpcy5jb250YWluZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW3RoaXMub3B0aW9ucy5kaXJlY3Rpb24gKyBcIlNsaWRlRWxlbWVudHNcIl0uZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moc2VsZi5vcHRpb25zLmRpcmVjdGlvbiwgY29udGFpbmVyT2Zmc2V0V2lkdGgpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAvL29ubHkgbW92ZSB0aGUgdG9nZ2xlIGJ1dHRvbiBvbiBzdGFyYm9hcmQgZWxlbWVudHNcbiAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICAgICQodGhpcy5lbGVtZW50KS5jc3ModGhpcy5vcHRpb25zLmRpcmVjdGlvbiwgY29udGFpbmVyT2Zmc2V0V2lkdGgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9LCAvLyBlbmQgb2YgXCJ1cGRhdGVcIlxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhpcyBzaWRlYm9hcmQgZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtICAge29iamVjdH0gICAgKm9wdGlvbmFsKiBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byB0aGUgaW5pdGlhbGl6ZS1mdW5jdGlvbiBpZiBpdCBleGlzdHNcbiAgICAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gICd0cnVlJyBhbiBzdWNjZXNzXG4gICAgICovXG4gICAgb3BlbjogZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG4gICAgICB2YXIgY29udGFpbmVyT2Zmc2V0V2lkdGgsXG4gICAgICAgICAgc2VsZjtcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIENhbGwgaW5pdGlhbGl6ZS1mdW5jdGlvbnMsIGlmIGV4aXN0ZW50XG4gICAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmluaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdGhpcy5pbml0KG9wdF9vcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBjYWxsIHByZU9wZW5GdW5jdGlvbnNcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcmVPcGVuRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5wcmVPcGVuRnVuY3Rpb24oKTtcbiAgICAgIH1cblxuICAgICAgY29udGFpbmVyT2Zmc2V0V2lkdGggPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aDtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHREaXYpIHtcbiAgICAgICAgLy8gTm90IGF2YWlsYWJsZSBvbiBleHRlcm5hbCBkaXZzXG4gICAgICAgIGNvbnNvbGUud2FybignWW91IGNhbm5vdCB1c2UgdGhpcyBmdW5jdGlvbiBvbiBleHRlcm5hbCBlbWJlZGRlZCBzaWRlYm9hcmQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0pIHtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0gPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9jbG9zZSBvdGhlciBhY3RpdmUgc2lkZWJvYXJkIG9uIHRoaXMgc2lkZVxuICAgICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdLmNsb3NlKHRydWUsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHNsaWRlIG90aGVyIGVsZW1lbnRzIHdoZW4gbm8gb3RoZXIgc2lkZWJvYXJkIHdhcyBhY3RpdmUgb24gdGhpcyBzaWRlXG4gICAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbdGhpcy5vcHRpb25zLmRpcmVjdGlvbiArIFwiU2xpZGVFbGVtZW50c1wiXS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyhzZWxmLm9wdGlvbnMuZGlyZWN0aW9uLCBjb250YWluZXJPZmZzZXRXaWR0aCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuY29udGFpbmVyKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKS5jc3ModGhpcy5vcHRpb25zLmRpcmVjdGlvbiwgMCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAkKHRoaXMuZWxlbWVudCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJCh0aGlzLmVsZW1lbnQpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmNzcyh0aGlzLm9wdGlvbnMuZGlyZWN0aW9uLCBjb250YWluZXJPZmZzZXRXaWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgdGhpcyBhcyBhY3RpdmUgU2lkZWJvYXJkXG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdID0gdGhpcztcblxuICAgICAgICAvLyBjaGVjayBpZiBhIHZpZXcgbmVlZHMgdG8gYmUgcmVhY3RpdmF0ZWRcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlVmlldykge1xuICAgICAgICAgIHRoaXMuYWN0aXZlVmlldy5hY3RpdmF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCQodGhpcy5zdGF0dXNCYXIpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgICAkKHRoaXMuc3RhdHVzQmFyKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkKHRoaXMuYm90dG9tVG9vbGJhcikuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKSkge1xuICAgICAgICAgICQodGhpcy5ib3R0b21Ub29sYmFyKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3cgY29udGFpbmVyIHRvIGZpeCByZXNpemluZyBpc3N1ZVxuICAgICAgICAkKHRoaXMuY29udGFpbmVyKS5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2FjaGluZykge1xuICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUodGhpcy5vcHRpb25zLm5hbWUsICcxJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjYWxsIHBvc3RPcGVuRnVuY3Rpb25zXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wb3N0T3BlbkZ1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5wb3N0T3BlbkZ1bmN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCAvLyBlbmQgb2YgXCJvcGVuXCJcblxuICAgIGlzT3BlbjogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSAmJiB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSA9PT0gdGhpcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGlzIHNpZGVib2FyZCBlbGVtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7Ym9vbGVhbn0gIG9wdF9oaWRlICAgICAgICAgICAgICAgKm9wdGlvbmFsKiBDaG9vc2UgaWYgdGhpcyBmdW5jdGlvbiBzaG91bGQgdHJpZ2dlciB8cHJlSGlkZUZ1bmN0aW9ufFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIHxwcmVDbG9zZUZ1bmN0aW9ufC4gRGVmYXVsdCBpcyB8ZmFsc2V8LlxuICAgICAqIEBwYXJhbSAgIHtib29sZWFufSAgb3B0X29wZW5PdGhlclNpZGVib2FyZCAgKm9wdGlvbmFsKiBJbmRpY2F0ZXMgaWYgYW5vdGhlciBzaWRlYm9hcmQgZWxlbWVudCB3aWxsIGJlIG9wZW5lZCBpbnN0ZWFkLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIHxmYWxzZXwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgICAgICAgICAgfHRydWV8IG9uIHN1Y2Nlc3MuXG4gICAgICovXG4gICAgY2xvc2U6IGZ1bmN0aW9uIChvcHRfaGlkZSwgb3B0X29wZW5PdGhlclNpZGVib2FyZCkge1xuICAgICAgdmFyIGNvbnRhaW5lck9mZnNldFdpZHRoLFxuICAgICAgICAgIGRpcmVjdGlvbjtcblxuICAgICAgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcblxuICAgICAgaWYgKG9wdF9oaWRlICkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucHJlSGlkZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5wcmVIaWRlRnVuY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByZUNsb3NlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLnByZUNsb3NlRnVuY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb250YWluZXJPZmZzZXRXaWR0aCA9IHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dERpdikge1xuICAgICAgICAvLyBOb3QgYXZhaWxhYmxlIG9uIGV4dGVybmFsIGRpdnNcbiAgICAgICAgY29uc29sZS53YXJuKCdZb3UgY2Fubm90IHVzZSB0aGlzIGZ1bmN0aW9uIG9uIGV4dGVybmFsIGVtYmVkZGVkIHNpZGVib2FyZC4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSAhPT0gdGhpcykge1xuICAgICAgICAgIGNvbnNvbGUud2FybignVGhpcyAnICsgdGhpcy5vcHRpb25zLm5hbWUgKyAnLWVsZW1lbnQgKCcgKyB0aGlzLm9wdGlvbnMubmFtZSArICcpIGlzIGFscmVhZHkgY2xvc2VkLicpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAkKHRoaXMuY29udGFpbmVyKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5jc3MoZGlyZWN0aW9uLCAtY29udGFpbmVyT2Zmc2V0V2lkdGgpO1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkuY3NzKGRpcmVjdGlvbiwgMCk7XG5cbiAgICAgICAgaWYgKCFvcHRfb3Blbk90aGVyU2lkZWJvYXJkKSB7XG4gICAgICAgICAgLy8gc2xpZGUgb3RoZXIgZWxlbWVudHNcbiAgICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltkaXJlY3Rpb24gKyBcIlNsaWRlRWxlbWVudHNcIl0uZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KS5jc3MoZGlyZWN0aW9uLCAwKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhpZGUgY29udGFpbmVyIHRvIGZpeCByZXNpemluZyBpc3N1ZVxuICAgICAgICAkKHRoaXMuY29udGFpbmVyKS5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG5cbiAgICAgICAgLy8gY2hlY2sgaWYgYSB2aWV3IG5lZWRzIHRvIGJlIGRlYWN0aXZhdGVkXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZVZpZXcpIHtcbiAgICAgICAgICB0aGlzLmFjdGl2ZVZpZXcuZGVhY3RpdmF0ZSh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBhY3RpdmUgU2lkZWJvYXJkZW50cnlcbiAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0gPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNhY2hpbmcpIHtcbiAgICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUodGhpcy5vcHRpb25zLm5hbWUsICcwJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSwgLy8gZW5kIG9mIFwiY2xvc2VcIlxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIHRoaXMgc2lkZWJvYXJkIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgUmV0dXJucyB8dHJ1ZXwgb24gc3VjY2Vzcy5cbiAgICAgKi9cbiAgICB0b2dnbGU6IGZ1bmN0aW9uIChvcHRfaGlkZSkge1xuICAgICAgdmFyIGNhcGl0YWxpemVkTmFtZTtcbiAgICAgIGNhcGl0YWxpemVkTmFtZSA9IHV0aWxzLmNhcGl0YWxpemVGaXJzdExldHRlcih0aGlzLm9wdGlvbnMubmFtZSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0gPT09IHRoaXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2Uob3B0X2hpZGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMub3BlbigpO1xuICAgIH0sIC8vIGVuZCBvZiBcInRvZ2dsZVwiXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYnV0dG9uIHdoaWNoIGNoYXJhY3RlcmlzdGljcyBhcmUgZGVmaW5lZCBieSB0aGUgb3B0aW9ucyBwYXJhbWV0ZXJcbiAgICAgKiBUaGVzZSBvcHRpb25zIGluY2x1ZGUgZS5nLiB0aGUgdGFyZ2V0IGNvbnRhaW5lciB3aGVyZSB0aGUgYnV0dG9uIHdpbGwgYmUgYXBwZW5kZWQgYW5kIHRoZSBjbGljayBhY3Rpb24gb2YgdGhlIGJ1dHRvblxuICAgICAqXG4gICAgICogQHBhcmFtICAge29iamVjdH0gIG9wdF9vcHRpb25zICBUaGUgYnV0dG9uIGNvbmZpZ3VyYXRpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgbWFrZUJ1dHRvbjogZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICAgIHZhciBvcHRpb25zLFxuICAgICAgICAgIGJ1dHRvbjtcblxuICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgbGFiZWw6IHVuZGVmaW5lZCxcbiAgICAgICAgdGlwTGFiZWw6IHVuZGVmaW5lZCxcbiAgICAgICAgY2xhc3NOYW1lOiAnJyxcbiAgICAgICAgdGFyZ2V0OiB1bmRlZmluZWQsXG4gICAgICAgIGNsaWNrQWN0aW9uOiB1bmRlZmluZWRcbiAgICAgIH0sIG9wdF9vcHRpb25zKTtcblxuICAgICAgaWYgKG9wdGlvbnMuY2xhc3NOYW1lKSB7XG4gICAgICAgIG9wdGlvbnMuY2xhc3NOYW1lID0gJyAnICsgb3B0aW9ucy5jbGFzc05hbWU7XG4gICAgICB9XG5cbiAgICAgIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9ICdjNGctJyArIHRoaXMub3B0aW9ucy5uYW1lICsgJy1idXR0b24nICsgb3B0aW9ucy5jbGFzc05hbWU7XG4gICAgICBpZihvcHRpb25zLmlkKSB7XG4gICAgICAgIGJ1dHRvbi5pZCA9IG9wdGlvbnMuaWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50aXBMYWJlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYnV0dG9uLnRpdGxlID0gb3B0aW9ucy50aXBMYWJlbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxhYmVsID09PSAnc3RyaW5nJykge1xuICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gb3B0aW9ucy5sYWJlbDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGJ1dHRvbi5hcHBlbmRDaGlsZChvcHRpb25zLmxhYmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNsaWNrQWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICQoYnV0dG9uKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlLm1lc3NhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcHRpb25zLmNsaWNrQWN0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgJChvcHRpb25zLnRhcmdldCkuYXBwZW5kKGJ1dHRvbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidXR0b247XG4gICAgfSwgLy8gZW5kIG9mIFwibWFrZUJ1dHRvblwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFthZGRTZWN0aW9uIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgb3B0X29wdGlvbnMgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhZGRTZWN0aW9uOiBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgICAgdmFyIG9wdGlvbnMsXG4gICAgICAgICAgc2VjdGlvbixcbiAgICAgICAgICBlbGVtZW50O1xuXG4gICAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgICB0eXBlOiAnZGl2JyxcbiAgICAgICAgY2xhc3NOYW1lOiAnJyxcbiAgICAgICAgdGFyZ2V0OiB1bmRlZmluZWRcbiAgICAgIH0sIG9wdF9vcHRpb25zKTtcblxuICAgICAgLy8gdHJ5IHRvIGNyZWF0ZSB0aGUgbmV3IHNlY3Rpb25cbiAgICAgIHRyeSB7XG4gICAgICAgIHNlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG9wdGlvbnMudHlwZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IGNyZWF0ZSBzZWN0aW9uLiBcIicgKyBvcHRpb25zLnR5cGUgKyAnIGlzIG5vdCBhIHZhbGlkIEhUTUwtbm9kZS4nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBzZWN0aW9uLmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lO1xuXG4gICAgICAvLyB0cnkgdG8gYXBwZW5kIHRoZSBzZWN0aW9uIHRvIHRoZSBnaXZlbiB0YXJnZXRcbiAgICAgIGlmIChvcHRpb25zLnRhcmdldCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG9wdGlvbnMudGFyZ2V0LmFwcGVuZENoaWxkKHNlY3Rpb24pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGUubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VjdGlvbi5nZXRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudCB8fCBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIHNlY3Rpb24uc2V0RWxlbWVudCA9IGZ1bmN0aW9uIChuZXdFbGVtZW50KSB7XG4gICAgICAgIGlmIChuZXdFbGVtZW50ICYmIHR5cGVvZiBuZXdFbGVtZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGlmICghKGVsZW1lbnQgJiYgZWxlbWVudCA9PT0gbmV3RWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKG5ld0VsZW1lbnQpO1xuICAgICAgICAgICAgZWxlbWVudCA9IG5ld0VsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG5cbiAgICAgIC8vIGFkZCB0byBzZWN0aW9ucy1hcnJheVxuICAgICAgdGhpcy5zZWN0aW9ucy5wdXNoKHNlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNlY3Rpb247XG4gICAgfSwgLy8gZW5kIG9mIFwiYWRkU2VjdGlvblwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFthZGRWaWV3IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgb3B0aW9ucyAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFkZFZpZXc6IGZ1bmN0aW9uIChvcHRpb25zLCBvcHRfdmlld1Njb3BlKSB7XG5cbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIHZpZXdTY29wZSxcbiAgICAgICAgICBhZGRpdGlvbmFsVHJpZ2dlckNsYXNzLFxuICAgICAgICAgIHRyaWdnZXIsXG4gICAgICAgICAgdmlldztcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB2aWV3U2NvcGUgPSBvcHRfdmlld1Njb3BlIHx8IHRoaXM7XG5cbiAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAgIC8vIG5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgdHJpZ2dlckNvbmZpZzogdW5kZWZpbmVkLCAvLyBAVE9ETyBkb2t1IGZvcm1hdDoge29wdF90YXJnZXQ6IFtzdHJpbmd8aHRtbE9iamVjdF0sIG9wdF9jbGFzc05hbWU6IFtzdHJpbmddLCBvcHRfdGlwTGFiZWw6IFtzdHJpbmddfVxuICAgICAgICBzZWN0aW9uRWxlbWVudHM6IFtdLCAvLyBAVE9ETyBkb2t1IGZvcm1hdDogW3tzZWN0aW9uOiBbc2VjdGlvbk9iamVjdF0sIGVsZW1lbnQ6IFtlbGVtZW50T2JqZWN0XX1dXG4gICAgICAgIGluaXRGdW5jdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBhY3RpdmF0ZUZ1bmN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGRlYWN0aXZhdGVGdW5jdGlvbjogdW5kZWZpbmVkXG4gICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IGFkZCBhIHZpZXcgd2l0aG91dCBhIG5hbWUgKG9mIHR5cGUgXCJzdHJpbmdcIikuJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmlldyA9IHt9O1xuXG4gICAgICB2aWV3LmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICB2aWV3LnBhdXNlZCA9IGZhbHNlO1xuXG4gICAgICB2aWV3LmFjdGl2YXRlID0gZnVuY3Rpb24gKG9wdF9vcGVuU2lkZWJvYXJkKSB7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnRyaWdnZXJDb25maWcud2l0aEhlYWRsaW5lKSB7XG4gICAgICAgICAgICBzZWxmLmNvbnRlbnRIZWFkbGluZS5pbm5lckhUTUwgPSBvcHRpb25zLnRyaWdnZXJDb25maWcudGlwTGFiZWw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvcGVuIFNpZGVib2FyZCBpZiBjbG9zZWRcbiAgICAgICAgaWYgKG9wdF9vcGVuU2lkZWJvYXJkICYmICFzZWxmLmlzT3BlbigpKSB7XG4gICAgICAgICAgc2VsZi5vcGVuKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWFjdGl2YXRlIGN1cnJlbnQgYWN0aXZlVmlldywgaWYgZXhpc3RlbnRcbiAgICAgICAgaWYgKHR5cGVvZiB2aWV3U2NvcGUuYWN0aXZlVmlldyA9PT0gJ29iamVjdCcgJiYgdmlld1Njb3BlLmFjdGl2ZVZpZXcgIT09IHZpZXcpIHtcbiAgICAgICAgICB2aWV3U2NvcGUuYWN0aXZlVmlldy5kZWFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmlld1Njb3BlLmFjdGl2ZVZpZXcgPSB2aWV3O1xuXG4gICAgICAgIC8vIEhhbmRsZSBzdWItdmlld3NcbiAgICAgICAgaWYgKHZpZXcuYWN0aXZlVmlldykge1xuICAgICAgICAgIHZpZXcuYWN0aXZlVmlldy5hY3RpdmF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FsbCBpbml0aWFsaXplLWZ1bmN0aW9ucywgaWYgZXhpc3RlbnRcbiAgICAgICAgaWYgKCF2aWV3LmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmluaXRGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmlldy5pbml0aWFsaXplZCA9IG9wdGlvbnMuaW5pdEZ1bmN0aW9uKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZpZXcuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc3BsYXkgZWxlbWVudHMgaW4gZ2l2ZW4gc2VjdGlvbnNcbiAgICAgICAgaWYgKG9wdGlvbnMuc2VjdGlvbkVsZW1lbnRzICYmIG9wdGlvbnMuc2VjdGlvbkVsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb3B0aW9ucy5zZWN0aW9uRWxlbWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2VjdGlvbkVsZW1lbnRzW2ldLnNlY3Rpb24uc2V0RWxlbWVudChvcHRpb25zLnNlY3Rpb25FbGVtZW50c1tpXS5lbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGFuZ2UgdHJpZ2dlci1zdGF0ZSwgaWYgZXhpc3RlbnRcbiAgICAgICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgICAgICAkKHRyaWdnZXIpLmFkZENsYXNzKCdjNGctYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxsIGFjdGl2YXRlIGZ1bmN0aW9uLCBpZiBleGlzdGVudFxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYWN0aXZhdGVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGlmICghb3B0aW9ucy5hY3RpdmF0ZUZ1bmN0aW9uKHZpZXcucGF1c2VkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZpZXcucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcblxuICAgICAgdmlldy5kZWFjdGl2YXRlID0gZnVuY3Rpb24gKG9wdF9wYXVzZSkge1xuXG4gICAgICAgIHZpZXcucGF1c2VkID0gb3B0X3BhdXNlIHx8IGZhbHNlO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygdmlld1Njb3BlLmFjdGl2ZVZpZXcgPT09ICdvYmplY3QnICYmIHZpZXdTY29wZS5hY3RpdmVWaWV3ID09PSB2aWV3KSB7XG4gICAgICAgICAgaWYgKHRyaWdnZXIgJiYgIXZpZXcucGF1c2VkKSB7XG4gICAgICAgICAgICAkKHRyaWdnZXIpLnJlbW92ZUNsYXNzKCdjNGctYWN0aXZlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSGFuZGxlIHN1Yi12aWV3c1xuICAgICAgICAgIGlmICh2aWV3LmFjdGl2ZVZpZXcpIHtcbiAgICAgICAgICAgIHZpZXcuYWN0aXZlVmlldy5kZWFjdGl2YXRlKHZpZXcucGF1c2VkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDYWxsIGRlYWN0aXZhdGUgZnVuY3Rpb24sIGlmIGV4aXN0ZW50XG4gICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlYWN0aXZhdGVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGVhY3RpdmF0ZUZ1bmN0aW9uKHZpZXcucGF1c2VkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG5cblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyaWdnZXJDb25maWcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG9wdGlvbnMudHJpZ2dlckNvbmZpZyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMudmlld1RyaWdnZXJCYXIsXG4gICAgICAgICAgdGlwTGFiZWw6IG9wdGlvbnMubmFtZSxcbiAgICAgICAgfSwgb3B0aW9ucy50cmlnZ2VyQ29uZmlnKTtcblxuICAgICAgICBvcHRpb25zLnRyaWdnZXJDb25maWcuY2xpY2tBY3Rpb24gPSB2aWV3LmFjdGl2YXRlO1xuICAgICAgICBpZiAob3B0aW9ucy50cmlnZ2VyQ29uZmlnLmNsYXNzTmFtZSkge1xuICAgICAgICAgIGFkZGl0aW9uYWxUcmlnZ2VyQ2xhc3MgPSAnICcgKyBvcHRpb25zLnRyaWdnZXJDb25maWcuY2xhc3NOYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZGl0aW9uYWxUcmlnZ2VyQ2xhc3MgPSAnJztcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnRyaWdnZXJDb25maWcuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyBhZGRpdGlvbmFsVHJpZ2dlckNsYXNzO1xuICAgICAgICAvLyBAVE9ETyBjaGVjazogdHJpZ2dlciA9IHRoaXMubWFrZUJ1dHRvbihvcHRpb25zLnRyaWdnZXJDb25maWcpO1xuICAgICAgICB0cmlnZ2VyID0gdGhpcy5tYWtlQnV0dG9uKG9wdGlvbnMudHJpZ2dlckNvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudmlld3MucHVzaCh2aWV3KTtcbiAgICAgIHJldHVybiB2aWV3O1xuICAgIH0gLy8gZW5kIG9mIFwiYWRkVmlld1wiXG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCJcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgU2lkZWJvYXJkID0gdGhpcy5jNGcubWFwcy5jb250cm9sLlNpZGVib2FyZDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtc2lkZWJvYXJkLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG52YXIgYzRnID0gdGhpcy5jNGc7XG5cbmltcG9ydCB7U2lkZWJvYXJkfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXNpZGVib2FyZFwiO1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcbmltcG9ydCB7QmFzZWxheWVyc3dpdGNoZXJ9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWJhc2VsYXllcnN3aXRjaGVyXCI7XG5pbXBvcnQge0xheWVyc3dpdGNoZXJ9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWxheWVyc3dpdGNoZXJcIjtcbmltcG9ydCB7Q3VzdG9tdGFifSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXN0YXJib2FyZHBsdWdpbi1jdXN0b210YWJcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAZXh0ZW5kcyB7YzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmR9XG4gICAqIEBwYXJhbSAgIHtvYmplY3R9ICAgICAgICAgICAgICBvcHRfb3B0aW9ucyAgKm9wdGlvbmFsKiBtaXNjIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5TdGFyYm9hcmQgPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIGV4dERpdjogZmFsc2UsXG4gICAgICBkZWZhdWx0T3BlbjogZmFsc2UsXG4gICAgICBtYXBDb250cm9sbGVyOiB1bmRlZmluZWQsXG4gICAgICBuYW1lOiAnc3RhcmJvYXJkJyxcbiAgICAgIGRpcmVjdGlvbjogJ3JpZ2h0JyxcbiAgICAgIGZpbHRlcjogZmFsc2VcbiAgICB9LCBvcHRfb3B0aW9ucyk7XG5cbiAgICAvL2M0Zy5tYXBzLmhvb2suc3RhcmJvYXJkX2xvYWRQbHVnaW5zID0gW107XG5cbiAgICAvL3NldCBoZWFkbGluZSwgc2luY2UgdGhlIGRlZmluaXRpb24gYWJvdmUgZG9lcyBub3Qgd29yayBmb3IgaGVhZGxpbmVcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5oZWFkbGluZSB8fCB0aGlzLm9wdGlvbnMuaGVhZGxpbmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAvL3RoaXMub3B0aW9ucy5oZWFkbGluZSA9IGM0Zy5tYXBzLmNvbnN0YW50LmkxOG4uU1RBUkJPQVJEO1xuICAgIH1cblxuICAgIHRoaXMuaG9va19sYXllcnN3aXRjaGVyX2xvYWRlZCA9IHRoaXMuaG9va19sYXllcnN3aXRjaGVyX2xvYWRlZCB8fCBbXTtcblxuICAgIC8vY2FsbCBTaWRlYm9hcmQgKHBhcmVudCkgY29uc3RydWN0b3JcbiAgICBTaWRlYm9hcmQuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMpO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLlN0YXJib2FyZCwgU2lkZWJvYXJkKTtcblxuICAvLyBBZGQgbWV0aG9kc1xuICBjNGcubWFwcy5jb250cm9sLlN0YXJib2FyZC5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLlN0YXJib2FyZC5wcm90b3R5cGUsIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIGJhc2ljIGh0bWwtZWxlbWVudHMgZm9yIHRoZSBzdGFyYm9hcmRcbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgJ3RydWUnIG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHZhciBwbHVnaW4sXG4gICAgICAgICAgcmVuZGVyTGF5ZXJ0cmVlLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBsYXllcixcbiAgICAgICAgICBzZWxmLFxuICAgICAgICAgIGZuUmVuZGVyLFxuICAgICAgICAgIGRpc3BsYXlMYXllcnN3aXRjaGVyID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgLy8gTG9hZCBTdGFyYm9hcmQgcGx1Z2luc1xuICAgICAgdGhpcy5wbHVnaW5zID0ge307XG5cbiAgICAgIC8vIGNyZWF0ZXMgYW5kIHJlbmRlcnMgdGhlIHN0YXJib2FyZCBwbHVnaW5zXG4gICAgICBmblJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBsb29wIHRocm91Z2ggbGF5ZXJzIGFuZCBjaGVjayBpZiB0aGVyZSBpcyBhbnkgbm9ybWFsIGxheWVydHJlZSB0byByZW5kZXJcbiAgICAgICAgZm9yIChrZXkgaW4gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVycykge1xuICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGxheWVyID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1trZXldO1xuICAgICAgICAgICAgaWYgKCFsYXllci5yZW5kZXJTcGVjaWFsKSB7XG4gICAgICAgICAgICAgIHJlbmRlckxheWVydHJlZSA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJMYXllcnRyZWUpIHtcbiAgICAgICAgICAvLyBkbyBub3QgZGlzcGxheSBsYXllcnN3aXRjaGVyIGlmIHRoZXJlIGlzIG5vdGhpbmcgdG8gc3dpdGNoXG4gICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnMpIHtcbiAgICAgICAgICAgIGZvcihsZXQgaWQgaW4gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVycykge1xuICAgICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1tpZF0uZGlzcGxheSkge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlMYXllcnN3aXRjaGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC0gbG9hZCBcIkxheWVyc3dpdGNoZXJcIlxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmxheWVyU3dpdGNoZXJDcmVhdGUgJiYgcmVuZGVyTGF5ZXJ0cmVlICYmIGRpc3BsYXlMYXllcnN3aXRjaGVyKSB7XG4gICAgICAgICAgc2VsZi5wbHVnaW5zLmxheWVyc3dpdGNoZXIgPSBuZXcgTGF5ZXJzd2l0Y2hlcihzZWxmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbGwgaG9vayB0byBsb2FkIGFkZGl0aW9uYWwgc3RhcmJvYXJkIHRhYnMgKGxheWVycylcbiAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoc2VsZi5ob29rX2xheWVyc3dpdGNoZXJfbG9hZGVkKTtcblxuXG4gICAgICAgIC8vIC0gY2hlY2sgJiBsb2FkIG90aGVyIFN0YXJib2FyZC1wbHVnaW5zICh2aWEgaG9vaylcbiAgICAgICAgLy8gY2FsbGVkIGZ1bmN0aW9ucyBoYXZlIHRvIGFkZCB0aGVtc2VsdmVzIHRvIHRoaXMucGx1Z2luc1xuICAgICAgICBpZiAoYzRnLm1hcHMuaG9vayAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjNGcubWFwcy5ob29rLnN0YXJib2FyZF9sb2FkUGx1Z2lucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhjNGcubWFwcy5ob29rLnN0YXJib2FyZF9sb2FkUGx1Z2lucywgc2VsZik7XG4gICAgICAgICAgLy8gLSBhY3RpdmF0ZSBuZXcgcGx1Z2lucyBpZiB0aGV5IGFyZSBub3QgYWN0aXZhdGVkIGFscmVhZHlcbiAgICAgICAgICBmb3IgKHBsdWdpbiBpbiBzZWxmLnBsdWdpbnMpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHBsdWdpbiBpcyBhIHJlYWwgcGx1Z2luIGFuZCBub3QgYSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0IHByb3RvdHlwZVxuICAgICAgICAgICAgaWYgKHNlbGYucGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW4pKSB7XG4gICAgICAgICAgICAgIHNlbGYucGx1Z2luc1twbHVnaW5dLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gLSBsb2FkIFwiQmFzZWxheWVyc3dpdGNoZXJcIlxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmJhc2VsYXllclN3aXRjaGVyQ3JlYXRlKSB7XG4gICAgICAgICAgc2VsZi5wbHVnaW5zLmJhc2VsYXllcnN3aXRjaGVyID0gbmV3IEJhc2VsYXllcnN3aXRjaGVyKHNlbGYpO1xuICAgICAgICAgIHNlbGYucGx1Z2lucy5iYXNlbGF5ZXJzd2l0Y2hlci5hY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLnBsdWdpbnMubGF5ZXJzd2l0Y2hlcikge1xuICAgICAgICAgIHNlbGYucGx1Z2lucy5sYXllcnN3aXRjaGVyLmFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIGVuZCBvZiBcImZuUmVuZGVyKClcIlxuXG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubGF5ZXJzX2xvYWRlZCkge1xuICAgICAgICB0aGlzLnNwaW5uZXIuc2hvdygpO1xuICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5ob29rX2xheWVyX2xvYWRlZC5wdXNoKGZ1bmN0aW9uKGxheWVySWRzKSB7XG4gICAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICBmblJlbmRlcigpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGxheWVycyBhcmUgYWxyZWFkeSBsb2FkZWRcbiAgICAgICAgZm5SZW5kZXIoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cblxuXG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gZW5kIG9mIFwiaW5pdFwiXG5cbiAgfSk7IC8vIEVuZCBvZiBhZGQgbWV0aG9kc1xufShqUXVlcnksIGM0ZykpO1xuXG5leHBvcnQgdmFyIFN0YXJib2FyZCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5TdGFyYm9hcmQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXN0YXJib2FyZC5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4gPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAZXh0ZW5kcyB7b2wuY29udHJvbC5Db250cm9sfVxuICAgKiBAcGFyYW0gICB7b2JqZWN0fSAgICAgICAgICAgICAgc3RhcmJvYXJkXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5CYXNlbGF5ZXJzd2l0Y2hlciA9IGZ1bmN0aW9uIChzdGFyYm9hcmQpIHtcbiAgICBpZiAoIXN0YXJib2FyZCkge1xuICAgICAgY29uc29sZS53YXJuKCdDYW5ub3QgaW5pdGlhbGl6ZSBCYXNlbGF5ZXJzd2l0Y2hlciB3aXRob3V0IGEgc3RhcmJvYXJkLicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmJhc2VsYXllcnMgPSB7fTtcblxuICAgIHRoaXMuc3RhcmJvYXJkID0gc3RhcmJvYXJkO1xuICAgIHRoaXMucHJveHkgPSBzdGFyYm9hcmQub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5O1xuXG4gICAgdGhpcy5jcmVhdGUoKTtcbiAgICB0aGlzLmxvYWRDb250ZW50KCk7XG4gIH07XG5cbiAgLy8gQWRkIG1ldGhvZHNcbiAgYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uQmFzZWxheWVyc3dpdGNoZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uQmFzZWxheWVyc3dpdGNoZXIucHJvdG90eXBlLCB7XG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2NyZWF0ZSBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBjb250ZW50V3JhcHBlcixcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmUsXG4gICAgICAgICAgY29udGVudEluZm87XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICBjb250ZW50V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICBjb250ZW50SGVhZGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRlbnRIZWFkbGluZS5pbm5lckhUTUwgPSAodGhpcy5zdGFyYm9hcmQub3B0aW9ucy5iYXNlbGF5ZXJTd2l0Y2hlclRpdGxlIHx8IGxhbmdDb25zdGFudHMuU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9CQVNFTEFZRVJTV0lUQ0hFUik7XG4gICAgICBjb250ZW50SGVhZGxpbmUuY2xhc3NOYW1lID0gJ2NvbnRlbnRIZWFkbGluZSc7XG4gICAgICBjb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZChjb250ZW50SGVhZGxpbmUpO1xuXG4gICAgICB0aGlzLmNvbnRlbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMuY29udGVudERpdi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuU1RBUkJPQVJEX0NPTlRFTlRfQkFTRUxBWUVSU1dJVENIRVI7XG4gICAgICBjb250ZW50SW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgIHRoaXMuY29udGVudERpdi5hcHBlbmRDaGlsZChjb250ZW50SW5mbyk7XG4gICAgICBjb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnREaXYpO1xuXG4gICAgICBzZWxmLnZpZXcgPSBzZWxmLnN0YXJib2FyZC5hZGRWaWV3KHtcbiAgICAgICAgbmFtZTogJ2xheWVyc3dpdGNoZXInLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6ICh0aGlzLnN0YXJib2FyZC5vcHRpb25zLmJhc2VsYXllclN3aXRjaGVyVGl0bGUgfHwgbGFuZ0NvbnN0YW50cy5TVEFSQk9BUkRfVklFV19UUklHR0VSX0JBU0VMQVlFUlNXSVRDSEVSKSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5TVEFSQk9BUkRfVklFV19UUklHR0VSX0JBU0VMQVlFUlNXSVRDSEVSLFxuICAgICAgICAgIHdpdGhIZWFkbGluZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHNlbGYuc3RhcmJvYXJkLmNvbnRlbnRDb250YWluZXIsIGVsZW1lbnQ6IGNvbnRlbnRXcmFwcGVyfSxcbiAgICAgICAgICB7c2VjdGlvbjogc2VsZi5zdGFyYm9hcmQudG9wVG9vbGJhciwgZWxlbWVudDogc2VsZi5zdGFyYm9hcmQudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2FjdGl2YXRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy52aWV3LmFjdGl2YXRlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbc2V0Q29udGVudCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIG5ld0NvbnRlbnQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBzZXRDb250ZW50OiBmdW5jdGlvbiAobmV3Q29udGVudCkge1xuICAgICAgaWYgKG5ld0NvbnRlbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDb250ZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgdGhpcy5jb250ZW50RGl2LmlubmVySFRNTCA9IG5ld0NvbnRlbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnREaXYuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICB0aGlzLmNvbnRlbnREaXYucmVwbGFjZUNoaWxkKG5ld0NvbnRlbnQsIHRoaXMuY29udGVudERpdi5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuY29udGVudERpdi5hcHBlbmRDaGlsZChuZXdDb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBAVE9ET1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGUubWVzc2FnZSk7XG4gICAgICAgICAgICAvLyByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jb250ZW50RGl2LmlubmVySFRNTDtcbiAgICB9LFxuXG4gICAgbG9hZENvbnRlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIGZuRHJhd0NvbnRlbnQ7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5zdGFyYm9hcmQuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgIGZuRHJhd0NvbnRlbnQgPSBmdW5jdGlvbiAoYmFzZWxheWVySWRzKSB7XG4gICAgICAgIHNlbGYuYmFzZUxheWVyQ29udHJvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAkKHNlbGYuYmFzZUxheWVyQ29udHJvbCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLlNUQVJCT0FSRF9CQVNFTEFZRVJUUkVFKTtcbiAgICAgICAgc2VsZi5zZXRDb250ZW50KHNlbGYuYmFzZUxheWVyQ29udHJvbCk7XG5cbiAgICAgICAgc2VsZi5hZGRJdGVtcyhiYXNlbGF5ZXJJZHMsIHNlbGYuYmFzZUxheWVyQ29udHJvbCk7XG5cbiAgICAgICAgc2VsZi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHNlbGYuc3RhcmJvYXJkLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICBzZWxmLnN0YXJib2FyZC51cGRhdGUoKTtcbiAgICAgIH0gLy8gZW5kIG9mIFwiZm5EcmF3Q29udGVudCgpXCJcblxuICAgICAgaWYgKHRoaXMucHJveHkuYmFzZWxheWVyc19sb2FkZWQpIHtcbiAgICAgICAgZm5EcmF3Q29udGVudCh0aGlzLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYmFzZWxheWVySWRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfbG9hZGVkLnB1c2goZm5EcmF3Q29udGVudCk7XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwibG9hZENvbnRlbnQoKVwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2RyYXdDb250ZW50IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICAge1t0eXBlXX0gIGNvbnRlbnREYXRhICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgZHJhd0NvbnRlbnQ6IGZ1bmN0aW9uIChjb250ZW50RGF0YSkge1xuICAgICAgLy8gUEFTU1xuICAgIH0sIC8vIGVuZCBvZiBcImRyYXdDb250ZW50KClcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthZGRJdGVtcyBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIGl0ZW1EYXRhICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgd3JhcHBlckVsZW1lbnQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBvcHRpb25zICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFkZEl0ZW1zOiBmdW5jdGlvbiAoaXRlbURhdGEsIHdyYXBwZXJFbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIHNlbGYsXG4gICAgICAgICAgd3JhcHBlcixcbiAgICAgICAgICBpdGVtLFxuICAgICAgICAgIHVpZCxcbiAgICAgICAgICBsaXN0SXRlbSxcbiAgICAgICAgICBjaGlsZExpc3QsXG4gICAgICAgICAgY2hpbGRJdGVtLFxuICAgICAgICAgIGNoaWxkRW50cnksXG4gICAgICAgICAgdG9nZ2xlLFxuICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgICRlbnRyeSxcbiAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgaGFuZGxlRW50cnlDbGljayxcbiAgICAgICAgICBoYW5kbGVDaGFuZ2VCYXNlbGF5ZXJWaXNpYmlsaXR5O1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgcGFyc2VBc0xpc3Q6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlRW50cnlDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgaXRlbVVpZCxcbiAgICAgICAgICAgIHNpYmxpbmdzLFxuICAgICAgICAgICAgYmFzZWxheWVySXRlbTtcbiAgICAgICAgICBzaWJsaW5ncyA9ICQodGhpcykucGFyZW50KCkuc2libGluZ3MoKTtcbiAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpPCBzaWJsaW5ncy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgIGlmIChzaWJsaW5nc1tpXSAmJiAkKHNpYmxpbmdzW2ldKS5oYXNDbGFzcyhjc3NDb25zdGFudHMuT1BFTikpIHtcbiAgICAgICAgICAgICAgICAgIGlmKHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3NlbGYucHJveHkuYWN0aXZlQmFzZWxheWVySWRdICYmIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3NlbGYucHJveHkuYWN0aXZlQmFzZWxheWVySWRdLmhhc092ZXJsYXlzKXtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBqIGluIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3NlbGYucHJveHkuYWN0aXZlQmFzZWxheWVySWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzKXtcbiAgICAgICAgICAgICAgICAgICAgICBpZihzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1tzZWxmLnByb3h5LmFjdGl2ZUJhc2VsYXllcklkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5cy5oYXNPd25Qcm9wZXJ0eShqKSlcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlTGF5ZXIoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbc2VsZi5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbal0ubGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAkKHNpYmxpbmdzW2ldKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtVWlkID0gJCh0aGlzKS5kYXRhKCd1aWQnKTtcblxuICAgICAgICAgIGlmIChzZWxmLnN0YXJib2FyZC5vcHRpb25zLmNhY2hpbmcpIHtcbiAgICAgICAgICAgICAgdXRpbHMuc3RvcmVWYWx1ZSgnYmFzZWxheWVyJywgaXRlbVVpZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJCh0aGlzKS5wYXJlbnQoKS5oYXNDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLnJpZ2h0U2xpZGVFbGVtZW50cykge1xuICAgICAgICAgICAgICAgIHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLnJpZ2h0U2xpZGVFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKCdyaWdodCcsIHNlbGYuc3RhcmJvYXJkLmNvbnRhaW5lci5vZmZzZXRXaWR0aCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkKHNlbGYuc3RhcmJvYXJkLmVsZW1lbnQpLmNzcygncmlnaHQnLCBzZWxmLnN0YXJib2FyZC5jb250YWluZXIub2Zmc2V0V2lkdGgpO1xuXG4gICAgICAgICAgaWYgKHNlbGYucHJveHkuYWN0aXZlQmFzZWxheWVySWQgIT09IGl0ZW1VaWQpIHtcbiAgICAgICAgICAgIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5zaG93QmFzZUxheWVyKGl0ZW1VaWQpO1xuICAgICAgICAgICAgaWYoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbaXRlbVVpZF0uaGFzT3ZlcmxheXMpe1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaiBpbiBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1tpdGVtVWlkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5cyl7XG4gICAgICAgICAgICAgICAgICBpZihzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1tpdGVtVWlkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5cy5oYXNPd25Qcm9wZXJ0eShqKSl7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW2l0ZW1VaWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW2pdLmxheWVyKTsgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuXG4gICAgICAgICAgICAvLyBpZih0aGlzLm5leHRTaWJsaW5nKXtcbiAgICAgICAgICAgIC8vICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLm5leHRTaWJsaW5nLmNoaWxkTm9kZXM7XG4gICAgICAgICAgICAvLyAgICAgZm9yKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgLy8gICAgICAgICAkKGNoaWxkcmVuW2ldLmZpcnN0Q2hpbGQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgYzRnLm1hcHMuaG9vay5iYXNlbGF5ZXJfY2hhbmdlZCA9IGM0Zy5tYXBzLmhvb2suYmFzZWxheWVyX2NoYW5nZWQgfHwgW107XG4gICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhjNGcubWFwcy5ob29rLmJhc2VsYXllcl9jaGFuZ2VkLCBpdGVtVWlkKTtcbiAgICAgICAgICB9XG4gICAgICB9OyAvLyBlbmQgb2YgXCJoYW5kbGVFbnRyeUNsaWNrKClcIlxuXG4gICAgICBoYW5kbGVDaGFuZ2VCYXNlbGF5ZXJWaXNpYmlsaXR5ID0gZnVuY3Rpb24gKGJhc2VsYXllckNvbmZpZykge1xuICAgICAgICB2YXIgaWQ7XG5cbiAgICAgICAgZm9yIChpZCBpbiBzZWxmLmJhc2VsYXllcnMpIHtcbiAgICAgICAgICBpZiAoc2VsZi5iYXNlbGF5ZXJzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgICAgaWYgKGlkID09PSBiYXNlbGF5ZXJDb25maWcuaWQpIHtcbiAgICAgICAgICAgICAgc2VsZi5iYXNlbGF5ZXJzW2lkXS4kZW50cnkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbGYuYmFzZWxheWVyc1tpZF0uJGVudHJ5LmFkZENsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG5cbiAgICAgIHdyYXBwZXIgPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICBpZiAoaXRlbURhdGEubGVuZ3RoID4gMCkge1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtRGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuXG4gICAgICAgICAgdWlkID0gaXRlbURhdGFbaV07XG4gICAgICAgICAgdGhpcy5iYXNlbGF5ZXJzW3VpZF0gPSB7fTtcblxuICAgICAgICAgIGxpc3RJdGVtID0gb3B0aW9ucy5wYXJzZUFzTGlzdCA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJykgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICB0aGlzLmJhc2VsYXllcnNbdWlkXS5lbnRyeVdyYXBwZXIgPSBsaXN0SXRlbTtcbiAgICAgICAgICBlbnRyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICBlbnRyeS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnIycpO1xuICAgICAgICAgIGVudHJ5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ubmFtZSkpO1xuICAgICAgICAgICQoZW50cnkpLmRhdGEoJ2lkJywgdWlkKTtcbiAgICAgICAgICBpZihzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLmhhc092ZXJsYXlzKXtcblxuXG4gICAgICAgICAgICBjaGlsZExpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO29wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBmb3IoaiA9IDA7IGogPCBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgY2hpbGRJdGVtID0gb3B0aW9ucy5wYXJzZUFzTGlzdCA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJykgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgY2hpbGRFbnRyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgICAgaWYoc2VsZi5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZCA9PSB1aWQpe1xuICAgICAgICAgICAgICAgICAgJChjaGlsZEVudHJ5KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgICAgICAgIGxldCBvdmVybGF5SWQgPSBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLmlkO1xuICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5c1tvdmVybGF5SWRdLmNoYW5nZU9wYWNpdHkoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5c1tqXS5vcGFjaXR5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgJChjaGlsZEVudHJ5KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY2hpbGRFbnRyeS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLm5hbWUpKTtcbiAgICAgICAgICAgICAgJChjaGlsZEVudHJ5KS5kYXRhKCdpZCcsc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5c1tqXS5pZCk7XG4gICAgICAgICAgICAgICQoY2hpbGRFbnRyeSkuZGF0YSgncGlkJyx1aWQpO1xuICAgICAgICAgICAgICB0b2dnbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgICB0b2dnbGUuY2xhc3NOYW1lID0gJ2M0Zy1vdmVybGF5LXRvZ2dsZSc7XG4gICAgICAgICAgICAgIHRvZ2dsZS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCdyYW5nZScpO1xuICAgICAgICAgICAgICB0b2dnbGUuc2V0QXR0cmlidXRlKCdtaW4nLDApO1xuICAgICAgICAgICAgICB0b2dnbGUuc2V0QXR0cmlidXRlKCdtYXgnLDEwMCk7XG4gICAgICAgICAgICAgIHRvZ2dsZS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJyxzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLm9wYWNpdHkpO1xuICAgICAgICAgICAgICB0b2dnbGUuc2V0QXR0cmlidXRlKCdzdGVwcycsMTApO1xuICAgICAgICAgICAgICAkKHRvZ2dsZSkub24oJ2lucHV0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1skKHRoaXMpLnBhcmVudCgpLmRhdGEoJ3BpZCcpXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5c1skKHRoaXMpLnBhcmVudCgpLmRhdGEoJ2lkJyldLmNoYW5nZU9wYWNpdHkodGhpcy52YWx1ZSlcbiAgICAgICAgICAgICAgfSk7XG5cblxuXG4gICAgICAgICAgICAgIGNoaWxkRW50cnkuYXBwZW5kQ2hpbGQodG9nZ2xlKTtcbiAgICAgICAgICAgICAgY2hpbGRJdGVtLmFwcGVuZENoaWxkKGNoaWxkRW50cnkpO1xuICAgICAgICAgICAgICBjaGlsZExpc3QuYXBwZW5kQ2hpbGQoY2hpbGRJdGVtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH1cbiAgICAgICAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChlbnRyeSk7XG4gICAgICAgICAgaWYoY2hpbGRMaXN0KXtcbiAgICAgICAgICAgICAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoY2hpbGRMaXN0KTtcbiAgICAgICAgICAgICAgY2hpbGRMaXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICRlbnRyeSA9ICQoZW50cnkpO1xuICAgICAgICAgIHRoaXMuYmFzZWxheWVyc1t1aWRdLiRlbnRyeSA9ICRlbnRyeTtcblxuICAgICAgICAgIGlmICh0aGlzLnN0YXJib2FyZC5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5kZWZhdWx0X2Jhc2VsYXllciAmJiBwYXJzZUludCh1aWQsIDEwKSA9PT0gcGFyc2VJbnQoc2VsZi5zdGFyYm9hcmQub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuZGVmYXVsdF9iYXNlbGF5ZXIsIDEwKSkge1xuICAgICAgICAgICAgJGVudHJ5LmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgICAgJChsaXN0SXRlbSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pO1xuICAgICAgICAgICAgICBpZihzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLmhhc092ZXJsYXlzKXtcbiAgICAgICAgICAgICAgICAgIGZvcihsZXQgaiBpbiBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXMuaGFzT3duUHJvcGVydHkoaikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbal0uY2hhbmdlT3BhY2l0eShzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW2pdLm9wYWNpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGVudHJ5LmFkZENsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICAkKGxpc3RJdGVtKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICRlbnRyeS5kYXRhKCd1aWQnLCB1aWQpO1xuICAgICAgICAgICRlbnRyeS5jbGljayhoYW5kbGVFbnRyeUNsaWNrKTtcblxuICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgICAvLyBTdGFyYm9hcmQgRmlsdGVyXG4gICAgICAgICAgaWYgKHRoaXMuc3RhcmJvYXJkLm9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICAgICAgICAgIHZhciBkdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICBkdi5jbGFzc05hbWUgPSBcImM0Zy1zdGFyYm9hcmQtZmlsdGVyIGM0Zy1jb250ZW50LXNlbGVjdFwiO1xuICAgICAgICAgICAgICB2YXIgZmlsdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgZmlsdGVyLnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgICAgIGZpbHRlci5wbGFjZWhvbGRlciA9IFwiXCI7IC8vRm9udCBBd2Vzb21lXG4gICAgICAgICAgICAgIHZhciBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICAgICAgICAgICAgICBpLmNsYXNzTmFtZSA9ICdmYXMgZmEtZmlsdGVyJztcbiAgICAgICAgICAgICAgaS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gICAgICAgICAgICAgIGR2LmFwcGVuZENoaWxkKGZpbHRlcik7XG4gICAgICAgICAgICAgIGR2LmFwcGVuZENoaWxkKGkpO1xuICAgICAgICAgICAgICBmaWx0ZXIub25rZXl1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZpbHRlcl91bGxpKGVsZW1lbnQsIHNob3dTdWJ0cmVlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBkbyBub3QgYXBwbHkgZmlsdGVyIGZvciBzaG9ydCBzZWFyY2ggdGVybXNcblxuICAgICAgICAgICAgICAgICAgICAgIHNob3dTdWJ0cmVlID0gc2hvd1N1YnRyZWUgfHwgZmFsc2U7ICAvLyB1c2VkIHdoaWxlIHRyYXZlcnNpbmcgZG93biB0aGUgdHJlZVxuXG4gICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICogUmV0dXJucyBhbiBhcnJheSAobW9kaWZpZWQ6IGZpcnN0IGVsZW1lbnQpIG9mIHRoZSBnaXZlbiBlbGVtZW50cy4gT25seSBmaW5kcyBjaGlsZHJlbiBvZiB0aGUgZ2l2ZW4gcGFyZW50IGVsZW1lbnQsIGJ1dFxuICAgICAgICAgICAgICAgICAgICAgICAqIG5vIGZ1cnRoZXIgZGVzY2VuZGFudHMgbGlrZSBnZXRFbGVtZW50c0J5VGFnTmFtZSBkb2VzLlxuICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldENoaWxkcmVuQnlUYWdOYW1lKGVsZW1lbnQsIHRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGRyZW5baV0udGFnTmFtZS50b1VwcGVyQ2FzZSgpID09IHRhZ05hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kLnB1c2goZWxlbWVudC5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZFswXTsgLy8gISEhXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hGbGFnVWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VidHJlZU1hdGNoZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgZWFjaCBMSSBkb1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNNYXRjaCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWFyY2ggY3VycmVudCBMSSBmb3IgZmlsdGVyIHRlcm1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF0uaW5uZXJIVE1MLnRvVXBwZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIudmFsdWUudG9VcHBlckNhc2UoKSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgYSBtYXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWN1cnNlIGlmIGEgc3VidHJlZSAoVUwpIGV4aXN0cyBpbiBjdXJyZW50IExJIChtYXggMSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bCA9IGdldENoaWxkcmVuQnlUYWdOYW1lKGVsZW1lbnQuY2hpbGRyZW5baV0sIFwidWxcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNTdWJ0cmVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0cmVlTWF0Y2hlcyA9IGZpbHRlcl91bGxpKHVsLCBzaG93U3VidHJlZSB8fCBpc01hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc1N1YnRyZWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWF0Y2ggfHwgc3VidHJlZU1hdGNoZXMgfHwgc2hvd1N1YnRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaEZsYWdVbCA9IHRydWU7IC8vIHVzZWQgd2hpbGUgdHJhdmVyc2luZyB1cCB0aGUgdHJlZSBhZ2FpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjdXJyZW50IExJIHZpc2libGUgYW5kIG9wZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlci52YWx1ZS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1jbG9zZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QuYWRkKFwiYzRnLW9wZW5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYzRnLXN0YXJib2FyZC1maWx0ZXItbWF0Y2hcIik7IC8vIGFsd2F5cyByZW1vdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXRjaCAmJiBmaWx0ZXIudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjdXJyZW50IExJIGludmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1vcGVuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZChcImM0Zy1jbG9zZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoRmxhZ1VsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAvLyBkbyBub3QgcmVhY3QgaW1tZWRpYXRlbHkgYnV0IGFsbG93IGZvciBzb21lIGtleXN0cm9rZXNcbiAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIHR3byBvciB6ZXJvIGxldHRlcnMgYXJlIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlci52YWx1ZS5sZW5ndGggIT0gMSkgZmlsdGVyX3VsbGkoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmM0Zy1iYXNlbGF5ZXJ0cmVlID4gdWw6bnRoLWNoaWxkKDIpJykpXG4gICAgICAgICAgICAgICAgICB9LCAzNTApO1xuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd3JhcHBlckVsZW1lbnQuYXBwZW5kQ2hpbGQoZHYpO1xuICAgICAgICAgIH1cblxuICAgICAgICB0aGlzLnByb3h5Lmhvb2tfYmFzZWxheWVyX3Zpc2liaWxpdHkucHVzaChoYW5kbGVDaGFuZ2VCYXNlbGF5ZXJWaXNpYmlsaXR5KTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbGVtZW50LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgIH0gLy8gZW5kIG9mIFwiYWRkSXRlbXMoKVwiXG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCJcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgQmFzZWxheWVyc3dpdGNoZXIgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luLkJhc2VsYXllcnN3aXRjaGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRwbHVnaW4tYmFzZWxheWVyc3dpdGNoZXIuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luID0gdGhpcy5jNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbiB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gc3RhcmJvYXJkXG4gICAqIEBwYXJhbSBwbHVnaW5cbiAgICogQHBhcmFtIHByb2plY3RDb25mXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luLkN1c3RvbXRhYiA9IGZ1bmN0aW9uIChzdGFyYm9hcmQsIHByb2plY3RDb25mKSB7XG4gICAgaWYgKCFzdGFyYm9hcmQpIHtcbiAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IGluaXRpYWxpemUgUHJvamVjdC10YWIgd2l0aG91dCBhIHN0YXJib2FyZC4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcHJvamVjdENvbmYgPSAkLmV4dGVuZCh7XG4gICAgICB0YWJJZDogbnVsbCxcbiAgICAgIG5hbWU6IFwiQ3VzdG9tdGFiXCIsXG4gICAgICBhd2Vzb21laWNvbjogJydcbiAgICB9LCBwcm9qZWN0Q29uZik7XG5cbiAgICBpZiAoIXByb2plY3RDb25mLnRhYklkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCBpbml0aWFsaXplIFByb2plY3QtdGFiIHdpdGhvdXQgYW4gaWQuJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgLy90aGlzLnBsdWdpbiA9IHBsdWdpbiB8fCBmYWxzZTtcbiAgICB0aGlzLmNvbnRlbnRMb2FkZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0YXJib2FyZCA9IHN0YXJib2FyZDtcbiAgICB0aGlzLnByb3h5ID0gc3RhcmJvYXJkLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eTtcbiAgICB0aGlzLm1hcCA9IHRoaXMucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcDtcbiAgICB0aGlzLmxheWVycyA9IHt9O1xuICAgIHRoaXMudGFiSWQgPSBwcm9qZWN0Q29uZi50YWJJZDtcbiAgICB0aGlzLm5hbWUgPSBwcm9qZWN0Q29uZi5uYW1lO1xuICAgIHRoaXMuYXdlc29tZWljb24gPSBwcm9qZWN0Q29uZi5hd2Vzb21laWNvbi5yZXBsYWNlKCcmIzkyOycsIFwiXFxcXFwiKTtcbiAgICBzdGFyYm9hcmQucGx1Z2luc1tcImN1c3RvbVRhYlwiKyB0aGlzLnRhYklkXSA9IHRoaXM7XG4gICAgdGhpcy5jcmVhdGUoKTtcbiAgfTtcblxuICAvLyBBZGQgbWV0aG9kc1xuICBjNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5DdXN0b210YWIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uQ3VzdG9tdGFiLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtjcmVhdGUgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgIGNvbnRlbnRXcmFwcGVyLFxuICAgICAgICBjb250ZW50SGVhZGxpbmUsXG4gICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmssXG4gICAgICAgIHNlbGVjdG9yLFxuICAgICAgICBsYXllclN3aXRjaGVyVGl0bGU7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgY29udGVudFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRlbnRIZWFkbGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udGVudEhlYWRsaW5lLmNsYXNzTmFtZSA9ICdjb250ZW50SGVhZGxpbmUnO1xuXG4gICAgICBsYXllclN3aXRjaGVyVGl0bGUgPSB0aGlzLnN0YXJib2FyZC5vcHRpb25zLmxheWVyU3dpdGNoZXJUaXRsZTtcblxuICAgICAgaWYgKHNlbGYubmFtZSkge1xuICAgICAgICAgIGxheWVyU3dpdGNoZXJUaXRsZSA9IHNlbGYubmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYoIXRoaXMuc3RhcmJvYXJkLm9wdGlvbnMuYnV0dG9uKSB7XG4gICAgICAgIGNvbnRlbnRIZWFkbGluZS5pbm5lckhUTUwgPSAobGF5ZXJTd2l0Y2hlclRpdGxlIHx8IGxhbmdDb25zdGFudHMuU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9MQVlFUlNXSVRDSEVSKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgICQoY29udGVudEhlYWRsaW5lKS5hZGRDbGFzcyhcImM0Zy1zdGFyYm9hcmQtaGVhZGxpbmVcIik7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmVMaW5rLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKFwiYzRnLWFjdGl2ZVwiKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5wcm94eS5sYXllcklkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLmhpZGVMYXllcihzZWxmLnByb3h5LmxheWVySWRzW2ldKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJjNGctYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImM0Zy1pbmFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5wcm94eS5sYXllcklkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLnNob3dMYXllcihzZWxmLnByb3h5LmxheWVySWRzW2ldKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJjNGctaW5hY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwiYzRnLWFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgJChjb250ZW50SGVhZGxpbmVMaW5rKS5hZGRDbGFzcyhcImM0Zy1pbmFjdGl2ZSBjNGctc3RhcmJvYXJkLWhlYWRsaW5lLWxpbmtcIik7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lTGluay5pbm5lckhUTUwgPSAobGF5ZXJTd2l0Y2hlclRpdGxlIHx8IGxhbmdDb25zdGFudHMuU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9MQVlFUlNXSVRDSEVSKTtcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmVMaW5rLmlubmVySFRNTCA9IGNvbnRlbnRIZWFkbGluZUxpbmsuaW5uZXJIVE1MKycgJztcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmUuYXBwZW5kQ2hpbGQoY29udGVudEhlYWRsaW5lTGluayk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKGNvbnRlbnRIZWFkbGluZSk7XG5cbiAgICAgIHRoaXMuY29udGVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy5jb250ZW50RGl2LmNsYXNzTmFtZSA9ICdjNGdfc3RhcmJvYXJkcGx1Z2luX2NvbnRlbnQnO1xuICAgICAgY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RGl2KTtcblxuICAgICAgc2VsZi52aWV3ID0gc2VsZi5zdGFyYm9hcmQuYWRkVmlldyh7XG4gICAgICAgIG5hbWU6IHNlbGYubmFtZSxcbiAgICAgICAgdHJpZ2dlckNvbmZpZzoge1xuICAgICAgICAgIHRpcExhYmVsOiBzZWxmLm5hbWUsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnYzRnLXN0YXJib2FyZC12aWV3LXRyaWdnZXItc3RhcmJvYXJkcGx1Z2luLScgKyBzZWxmLnRhYklkLFxuICAgICAgICAgIHdpdGhIZWFkbGluZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHNlbGYuc3RhcmJvYXJkLmNvbnRlbnRDb250YWluZXIsIGVsZW1lbnQ6IGNvbnRlbnRXcmFwcGVyfSxcbiAgICAgICAgICB7c2VjdGlvbjogc2VsZi5zdGFyYm9hcmQudG9wVG9vbGJhciwgZWxlbWVudDogc2VsZi5zdGFyYm9hcmQudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF1cbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMuYXdlc29tZWljb24uc3Vic3RyaW5nKDAsIDEpID09PSBcIlxcXFxcIikge1xuICAgICAgICB0aGlzLmF3ZXNvbWVpY29uID0gdGhpcy5hd2Vzb21laWNvbi5zdWJzdHJpbmcoMSwgdGhpcy5hd2Vzb21laWNvbi5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgc2VsZWN0b3IgPSAnYnV0dG9uLmM0Zy1zdGFyYm9hcmQtdmlldy10cmlnZ2VyLXN0YXJib2FyZHBsdWdpbi0nICsgc2VsZi50YWJJZDtcbiAgICAgIC8vVG9EbyBtw7ZnbGljaGVyd2Vpc2Ugc3RhbmRhcmQgaWNvbiA/XG4gICAgICBpZiAodGhpcy5hd2Vzb21laWNvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIHN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgICAgICAgICAgICBzdHlsZVNoZWV0O1xuXG4gICAgICAgICAgLy8gQXBwZW5kIHN0eWxlIGVsZW1lbnQgdG8gaGVhZFxuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbCk7XG5cbiAgICAgICAgICAvLyBHcmFiIHN0eWxlIHNoZWV0XG4gICAgICAgICAgc3R5bGVTaGVldCA9IHN0eWxlRWwuc2hlZXQ7XG4gICAgICAgIC8vIGNhdGNoIGZpcmVmb3gsIGJlY2F1c2UgRkYgZG9lcyBub3Qga25vdyBcImFkZFJ1bGVcIlxuICAgICAgICBpZiAoc3R5bGVTaGVldC5hZGRSdWxlICYmIHR5cGVvZiBkb2N1bWVudC5zdHlsZVNoZWV0c1swXS5hZGRSdWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdHlsZVNoZWV0LmFkZFJ1bGUoc2VsZWN0b3IgKyAnOmJlZm9yZScsICdjb250ZW50OiBcIlxcXFwnKyB0aGlzLmF3ZXNvbWVpY29uICsnXCI7Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGUoc2VsZWN0b3IgKyAnOmJlZm9yZSB7IGNvbnRlbnQ6IFwiXFxcXCcrIHRoaXMuYXdlc29tZWljb24gKydcIjt9JywgMCk7XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgICAgdGhpcy5hY3RpdmF0ZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2FjdGl2YXRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy52aWV3LmFjdGl2YXRlKCk7XG4gICAgICBpZiAoIXRoaXMuY29udGVudExvYWRlZCkge1xuICAgICAgICB0aGlzLmxvYWRDb250ZW50KCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbc2V0Q29udGVudCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge05vZGV9ICBuZXdDb250ZW50ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2V0Q29udGVudDogZnVuY3Rpb24gKG5ld0NvbnRlbnQpIHtcbiAgICAgIGlmIChuZXdDb250ZW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3Q29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHRoaXMuY29udGVudERpdi5pbm5lckhUTUwgPSBuZXdDb250ZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50RGl2LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb250ZW50RGl2LnJlcGxhY2VDaGlsZChuZXdDb250ZW50LCB0aGlzLmNvbnRlbnREaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmNvbnRlbnREaXYuYXBwZW5kQ2hpbGQobmV3Q29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gQFRPRE9cbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY29udGVudERpdi5pbm5lckhUTUw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbbG9hZENvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGxvYWRDb250ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgZm5EcmF3Q29udGVudDtcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLnN0YXJib2FyZC5zcGlubmVyLnNob3coKTtcblxuICAgICAgZm5EcmF3Q29udGVudCA9IGZ1bmN0aW9uIChsYXllcklkcykge1xuICAgICAgICBzZWxmLnRyZWVDb250cm9sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICQoc2VsZi50cmVlQ29udHJvbCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLlNUQVJCT0FSRF9MQVlFUlRSRUUpO1xuICAgICAgICBzZWxmLnNldENvbnRlbnQoc2VsZi50cmVlQ29udHJvbCk7XG4gICAgICAgIHNlbGYuYWRkSXRlbXMobGF5ZXJJZHMsIHNlbGYudHJlZUNvbnRyb2wsIHtwYXJzZUFzTGlzdDogdHJ1ZX0pO1xuICAgICAgICBzZWxmLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5jb250ZW50TG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5zdGFyYm9hcmQuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgIHNlbGYuc3RhcmJvYXJkLnVwZGF0ZSgpO1xuICAgICAgfTsgLy8gZW5kIG9mIFwiZm5EcmF3Q29udGVudCgpXCJcblxuICAgICAgZm5EcmF3Q29udGVudCh0aGlzLnByb3h5LmxheWVySWRzKTtcbiAgICB9LCAvLyBlbmQgb2YgXCJsb2FkQ29udGVudCgpXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbYWRkSXRlbXMgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBpdGVtRGF0YSAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIHdyYXBwZXJFbGVtZW50ICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgb3B0aW9ucyAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhZGRJdGVtczogZnVuY3Rpb24gKGl0ZW1EYXRhLCB3cmFwcGVyRWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdmFyIGksXG4gICAgICAgIHdyYXBwZXIsXG4gICAgICAgIGl0ZW0sXG4gICAgICAgIGxheWVyLFxuICAgICAgICB1aWQsXG4gICAgICAgIGxpc3RJdGVtLFxuICAgICAgICBlbnRyeSxcbiAgICAgICAgJGVudHJ5LFxuICAgICAgICBoYW5kbGVFbnRyeUNsaWNrLFxuICAgICAgICBzZWxmLFxuICAgICAgICBwV3JhcHBlcixcbiAgICAgICAgdG9nZ2xlLFxuICAgICAgICBjaGlsZFdyYXBwZXI7XG5cbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgcGFyc2VBc0xpc3Q6IHRydWVcbiAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgaGFuZGxlRW50cnlDbGljayA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBpdGVtVWlkO1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIFwidGhpc1wiIGlzIHRoZSBldmVudCBzZW5kaW5nIGVudHJ5XG4gICAgICAgIGl0ZW1VaWQgPSAkKHRoaXMpLmRhdGEoJ3VpZCcpO1xuICAgICAgICBpZiAoc2VsZi5wcm94eS5hY3RpdmVMYXllcklkc1tpdGVtVWlkXSkge1xuICAgICAgICAgIC8vIGhpZGUgbGF5ZXJcbiAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcbiAgICAgICAgICBzZWxmLmhpZGVMYXllcihpdGVtVWlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBzaG93IGxheWVyXG4gICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgc2VsZi5zaG93TGF5ZXIoaXRlbVVpZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIHJlZ2lzdGVyIGhvb2sgdG8gc3dpdGNoIGNoaWxkcyBvZiBsYXllcnMgYXMgd2VsbFxuICAgICAgdGhpcy5wcm94eS5ob29rX2xheWVyX3Zpc2liaWxpdHkucHVzaChmdW5jdGlvbiAobGF5ZXJJZCkge1xuICAgICAgICB2YXIgaixcbiAgICAgICAgICBjaGFuZ2VkTGF5ZXI7XG5cbiAgICAgICAgY2hhbmdlZExheWVyID0gc2VsZi5sYXllcnNbbGF5ZXJJZF07XG4gICAgICAgIGlmIChjaGFuZ2VkTGF5ZXIgJiYgY2hhbmdlZExheWVyLiRlbnRyaWVzKSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNoYW5nZWRMYXllci4kZW50cmllcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJJZF0pIHtcbiAgICAgICAgICAgICAgY2hhbmdlZExheWVyLiRlbnRyaWVzW2pdLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGFuZ2VkTGF5ZXIuJGVudHJpZXNbal0uYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBlbmQgb2YgaG9va1xuXG4gICAgICAvLyBhZGQgaG9vayBmdW5jdGlvbiBmb3IgY2hhbmdlZCB6b29tXG4gICAgICAvLyAgIG5lZWRlZCB0byBjaGFuZ2UgdGhlIGVudHJ5LWNsYXNzZXNcbiAgICAgIHRoaXMucHJveHkuaG9va19tYXBfem9vbS5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGosXG4gICAgICAgICAgaWQsXG4gICAgICAgICAgbGF5ZXI7XG5cbiAgICAgICAgZm9yIChpZCBpbiBzZWxmLmxheWVycykge1xuICAgICAgICAgIGlmIChzZWxmLmxheWVycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgIGxheWVyID0gc2VsZi5sYXllcnNbaWRdO1xuICAgICAgICAgICAgaWYgKGxheWVyICYmIGxheWVyLiRlbnRyaWVzKSB7XG4gICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsYXllci4kZW50cmllcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnByb3h5LmNoZWNrTGF5ZXJJc0FjdGl2ZUZvclpvb20oaWQpKSB7XG4gICAgICAgICAgICAgICAgICBsYXllci4kZW50cmllc1tqXS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuRElTQUJMRUQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBsYXllci4kZW50cmllc1tqXS5hZGRDbGFzcyhjc3NDb25zdGFudHMuRElTQUJMRUQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7IC8vIGVuZCBvZiBob29rXG5cbiAgICAgIC8vIGJ1aWxkIHRoZSBsYXllciB0cmVlXG4gICAgICB3cmFwcGVyID0gb3B0aW9ucy5wYXJzZUFzTGlzdCA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJykgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGlmIChpdGVtRGF0YSAmJiBpdGVtRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtRGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHVpZCA9IGl0ZW1EYXRhW2ldO1xuICAgICAgICAgIC8vbGF5ZXIgPSB0aGlzLnBsdWdpbi5jdXN0b21UYWJzW3RoaXMudGFiSWRdLmRyYXduRmVhdHVyZXNbdWlkXTtcbiAgICAgICAgICBsYXllciA9IHRoaXMucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1t1aWRdO1xuICAgICAgICAgIC8vIHNraXAgbGF5ZXIgaWYgaXQgZG9lc24ndCBiZWxvbmcgdG8gdGhpcyB0YWJcbiAgICAgICAgICBpZiAoIShsYXllci5yZW5kZXJTcGVjaWFsID09IHRydWUgJiYgKGxheWVyLnRhYklkID09IHRoaXMudGFiSWQpKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGRvIG5vdCByZW5kZXIgdGhlIHN0YXJ0YWIgbGF5ZXIgaXRzZWxmIGFzIHBhcmVudCBsZXZlbFxuICAgICAgICAgIGlmIChsYXllci50eXBlID09PSBcInN0YXJ0YWJcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGNoZWNrIGlmIGxheWVyIHdhbnRzIHRvIGJlIGRpc3BsYXllZCBpbiBzdGFyYm9hcmQgdGFiXG4gICAgICAgICAgaWYgKGxheWVyLmhpZGVXaGVuSW5UYWIgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobGF5ZXIuaGlkZSA9PT0gXCIxXCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW2xheWVyLmlkXSkge1xuICAgICAgICAgICAgICAvLyB0aGlzLmhpZGVMYXllcihsYXllci5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBsYXllciBzaG91bGQgYmUgZGlzcGxheWVkXG4gICAgICAgICAgaWYgKCFsYXllci5kaXNwbGF5KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbSA9IHt9O1xuICAgICAgICAgIHRoaXMubGF5ZXJzW3VpZF0gPSBpdGVtO1xuICAgICAgICAgIGxpc3RJdGVtID0gb3B0aW9ucy5wYXJzZUFzTGlzdCA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJykgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBpdGVtLmVudHJ5V3JhcHBlcnMgPSBpdGVtLmVudHJ5V3JhcHBlcnMgfHwgW107XG4gICAgICAgICAgaXRlbS5lbnRyeVdyYXBwZXJzLnB1c2gobGlzdEl0ZW0pO1xuICAgICAgICAgIGVudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgIGVudHJ5LnNldEF0dHJpYnV0ZSgnaHJlZicsICcjJyk7XG4gICAgICAgICAgZW50cnkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobGF5ZXIubGF5ZXJuYW1lIHx8IGxheWVyLm5hbWUpKTtcbiAgICAgICAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChlbnRyeSk7XG4gICAgICAgICAgJGVudHJ5ID0gJChlbnRyeSk7XG4gICAgICAgICAgaXRlbS4kZW50cmllcyA9IGl0ZW0uJGVudHJpZXMgfHwgW107XG4gICAgICAgICAgaXRlbS4kZW50cmllcy5wdXNoKCRlbnRyeSk7XG4gICAgICAgICAgJGVudHJ5LmRhdGEoJ3VpZCcsIHVpZCk7XG4gICAgICAgICAgJGVudHJ5LmNsaWNrKGhhbmRsZUVudHJ5Q2xpY2spO1xuXG4gICAgICAgICAgLy8gcHJlcGFyZSBpbnNlcnRpb24gb2YgY2hpbGRzXG4gICAgICAgICAgaWYgKGxheWVyLnZpc2libGVDaGlsZHMpIHtcbiAgICAgICAgICAgIHRvZ2dsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgICQobGlzdEl0ZW0pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSk7XG4gICAgICAgICAgICAkKHRvZ2dsZSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklDT04pO1xuICAgICAgICAgICAgJCh0b2dnbGUpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKCQodGhpcykucGFyZW50KCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKSkge1xuICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIucmlnaHRTbGlkZUVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIucmlnaHRTbGlkZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKCdyaWdodCcsIHNlbGYuc3RhcmJvYXJkLmNvbnRhaW5lci5vZmZzZXRXaWR0aCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgJChzZWxmLnN0YXJib2FyZC5lbGVtZW50KS5jc3MoJ3JpZ2h0Jywgc2VsZi5zdGFyYm9hcmQuY29udGFpbmVyLm9mZnNldFdpZHRoKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKHRvZ2dsZSkuaW5zZXJ0QmVmb3JlKCRlbnRyeSk7XG4gICAgICAgICAgICBjaGlsZFdyYXBwZXIgPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaXRlbS5jaGlsZFdyYXBwZXJzID0gaXRlbS5jaGlsZFdyYXBwZXJzIHx8IFtdO1xuICAgICAgICAgICAgaXRlbS5jaGlsZFdyYXBwZXJzLnB1c2goY2hpbGRXcmFwcGVyKTtcbiAgICAgICAgICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGNoaWxkV3JhcHBlcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbdWlkXSkge1xuICAgICAgICAgICAgJGVudHJ5LmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkZW50cnkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMubGF5ZXJzW2xheWVyLnBpZF0pIHtcbiAgICAgICAgICAgIC8vIGlzIGNoaWxkLWVsZW1lbnRcbiAgICAgICAgICAgIHBXcmFwcGVyID0gdGhpcy5sYXllcnNbbGF5ZXIucGlkXS5jaGlsZFdyYXBwZXJzO1xuICAgICAgICAgICAgaWYgKHBXcmFwcGVyKSB7XG4gICAgICAgICAgICAgIHBXcmFwcGVyW3BXcmFwcGVyLmxlbmd0aCAtIDFdLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGVuZCBvZiBmb3ItbG9vcFxuICAgICAgICAvLyBTdGFyYm9hcmQgRmlsdGVyXG4gICAgICAgIGlmICh0aGlzLnN0YXJib2FyZC5vcHRpb25zLmZpbHRlcikge1xuICAgICAgICAgIHZhciBkdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGR2LmNsYXNzTmFtZSA9IFwiYzRnLXN0YXJib2FyZC1maWx0ZXIgYzRnLWNvbnRlbnQtc2VsZWN0XCI7XG4gICAgICAgICAgdmFyIGZpbHRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgZmlsdGVyLnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgZmlsdGVyLnBsYWNlaG9sZGVyID0gXCJcIjsgLy9Gb250IEF3ZXNvbWVcbiAgICAgICAgICB2YXIgaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgICAgICBpLmNsYXNzTmFtZSA9ICdmYXMgZmEtZmlsdGVyJztcbiAgICAgICAgICBpLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICBkdi5hcHBlbmRDaGlsZChmaWx0ZXIpO1xuICAgICAgICAgIGR2LmFwcGVuZENoaWxkKGkpO1xuICAgICAgICAgIGZpbHRlci5vbmtleXVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZmlsdGVyX3VsbGkoZWxlbWVudCwgc2hvd1N1YnRyZWUpIHtcblxuICAgICAgICAgICAgICAvLyBkbyBub3QgYXBwbHkgZmlsdGVyIGZvciBzaG9ydCBzZWFyY2ggdGVybXNcblxuICAgICAgICAgICAgICBzaG93U3VidHJlZSA9IHNob3dTdWJ0cmVlIHx8IGZhbHNlOyAgLy8gdXNlZCB3aGlsZSB0cmF2ZXJzaW5nIGRvd24gdGhlIHRyZWVcblxuICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICogUmV0dXJucyBhbiBhcnJheSAobW9kaWZpZWQ6IGZpcnN0IGVsZW1lbnQpIG9mIHRoZSBnaXZlbiBlbGVtZW50cy4gT25seSBmaW5kcyBjaGlsZHJlbiBvZiB0aGUgZ2l2ZW4gcGFyZW50IGVsZW1lbnQsIGJ1dFxuICAgICAgICAgICAgICAgKiBubyBmdXJ0aGVyIGRlc2NlbmRhbnRzIGxpa2UgZ2V0RWxlbWVudHNCeVRhZ05hbWUgZG9lcy5cbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGdldENoaWxkcmVuQnlUYWdOYW1lKGVsZW1lbnQsIHRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuW2ldLnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PSB0YWdOYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQucHVzaChlbGVtZW50LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZFswXTsgLy8gISEhXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBtYXRjaEZsYWdVbCA9IGZhbHNlO1xuICAgICAgICAgICAgICB2YXIgc3VidHJlZU1hdGNoZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggTEkgZG9cbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgICAgICAgICAgICAgdmFyIGlzTWF0Y2ggPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBjdXJyZW50IExJIGZvciBmaWx0ZXIgdGVybVxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF0uaW5uZXJIVE1MLnRvVXBwZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIudmFsdWUudG9VcHBlckNhc2UoKSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgLy8gaXQncyBhIG1hdGNoXG4gICAgICAgICAgICAgICAgICBpc01hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyByZWN1cnNlIGlmIGEgc3VidHJlZSAoVUwpIGV4aXN0cyBpbiBjdXJyZW50IExJIChtYXggMSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB2YXIgdWwgPSBnZXRDaGlsZHJlbkJ5VGFnTmFtZShlbGVtZW50LmNoaWxkcmVuW2ldLCBcInVsXCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHVsKSB7XG4gICAgICAgICAgICAgICAgICAvLyByZWN1cnNpb25cbiAgICAgICAgICAgICAgICAgIHZhciBoYXNTdWJ0cmVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHN1YnRyZWVNYXRjaGVzID0gZmlsdGVyX3VsbGkodWwsIHNob3dTdWJ0cmVlIHx8IGlzTWF0Y2gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaGFzU3VidHJlZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc01hdGNoIHx8IHN1YnRyZWVNYXRjaGVzIHx8IHNob3dTdWJ0cmVlKSB7XG4gICAgICAgICAgICAgICAgICBtYXRjaEZsYWdVbCA9IHRydWU7IC8vIHVzZWQgd2hpbGUgdHJhdmVyc2luZyB1cCB0aGUgdHJlZSBhZ2FpblxuICAgICAgICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgTEkgdmlzaWJsZSBhbmQgb3BlblxuICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlci52YWx1ZS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1jbG9zZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QuYWRkKFwiYzRnLW9wZW5cIik7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1zdGFyYm9hcmQtZmlsdGVyLW1hdGNoXCIpOyAvLyBhbHdheXMgcmVtb3ZlXG4gICAgICAgICAgICAgICAgICBpZiAoaXNNYXRjaCAmJiBmaWx0ZXIudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBzZXQgY3VycmVudCBMSSBpbnZpc2libGVcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYzRnLW9wZW5cIik7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoXCJjNGctY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChtYXRjaEZsYWdVbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkbyBub3QgcmVhY3QgaW1tZWRpYXRlbHkgYnV0IGFsbG93IGZvciBzb21lIGtleXN0cm9rZXNcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAvLyB0d28gb3IgemVybyBsZXR0ZXJzIGFyZSByZXF1aXJlZFxuICAgICAgICAgICAgICBpZiAoZmlsdGVyLnZhbHVlLmxlbmd0aCAhPSAxKSBmaWx0ZXJfdWxsaShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYzRnLWxheWVydHJlZSA+IHVsOm50aC1jaGlsZCgyKScpKVxuICAgICAgICAgICAgfSwgMzUwKTtcblxuICAgICAgICAgIH1cblxuICAgICAgICAgIHdyYXBwZXJFbGVtZW50LmFwcGVuZENoaWxkKGR2KTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVyRWxlbWVudC5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJhZGRJdGVtcygpXCJcblxuICAgIHNob3dMYXllcjogZnVuY3Rpb24oaXRlbVVpZCkge1xuICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbaXRlbVVpZF0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByb3h5LmxheWVyQ29udHJvbGxlci5zaG93TGF5ZXIoaXRlbVVpZCk7XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwic2hvd0xheWVyKClcIlxuXG4gICAgaGlkZUxheWVyOiBmdW5jdGlvbihpdGVtVWlkKSB7XG4gICAgICBpZiAoIXRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbaXRlbVVpZF0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByb3h5LmxheWVyQ29udHJvbGxlci5oaWRlTGF5ZXIoaXRlbVVpZCk7XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwiaGlkZUxheWVyKClcIlxuXG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCJcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgQ3VzdG9tdGFiID0gdGhpcy5jNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5DdXN0b210YWI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWN1c3RvbXRhYi5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4gPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAZXh0ZW5kcyB7b2wuY29udHJvbC5Db250cm9sfVxuICAgKiBAcGFyYW0gICB7b2JqZWN0fSAgICAgICAgICAgICAgc3RhcmJvYXJkXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5MYXllcnN3aXRjaGVyID0gZnVuY3Rpb24gKHN0YXJib2FyZCkge1xuICAgIGlmICghc3RhcmJvYXJkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCBpbml0aWFsaXplIExheWVyc3dpdGNoZXIgd2l0aG91dCBhIHN0YXJib2FyZC4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5sYXllcnMgPSB7fTtcblxuICAgIHRoaXMuc3RhcmJvYXJkID0gc3RhcmJvYXJkO1xuICAgIHRoaXMucHJveHkgPSBzdGFyYm9hcmQub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5O1xuICAgIHRoaXMuY3JlYXRlKCk7XG4gICAgdGhpcy5sb2FkQ29udGVudCgpO1xuICB9O1xuXG4gIC8vIEFkZCBtZXRob2RzXG4gIGM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luLkxheWVyc3dpdGNoZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uTGF5ZXJzd2l0Y2hlci5wcm90b3R5cGUsIHtcblxuICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgY29udGVudFdyYXBwZXIsXG4gICAgICAgICAgY29udGVudEhlYWRsaW5lLFxuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmssXG4gICAgICAgICAgY29udGVudEluZm8sXG4gICAgICAgICAgbGF5ZXJTd2l0Y2hlclRpdGxlO1xuXG4gICAgICBsYXllclN3aXRjaGVyVGl0bGUgPSB0aGlzLnN0YXJib2FyZC5vcHRpb25zLmxheWVyU3dpdGNoZXJUaXRsZTtcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGNvbnRlbnRXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250ZW50SGVhZGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRlbnRIZWFkbGluZS5jbGFzc05hbWUgPSAnY29udGVudEhlYWRsaW5lJztcblxuICAgICAgaWYoIXRoaXMuc3RhcmJvYXJkLm9wdGlvbnMuYnV0dG9uKSB7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lLmlubmVySFRNTCA9IChsYXllclN3aXRjaGVyVGl0bGUgfHwgbGFuZ0NvbnN0YW50cy5TVEFSQk9BUkRfVklFV19UUklHR0VSX0xBWUVSU1dJVENIRVIpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICAgJChjb250ZW50SGVhZGxpbmUpLmFkZENsYXNzKFwiYzRnLXN0YXJib2FyZC1oZWFkbGluZVwiKTtcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmVMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmsub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoXCJjNGctYWN0aXZlXCIpICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLnByb3h5LmxheWVySWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuaGlkZUxheWVyKHNlbGYucHJveHkubGF5ZXJJZHNbaV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcImM0Zy1hY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwiYzRnLWluYWN0aXZlXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLnByb3h5LmxheWVySWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuc2hvd0xheWVyKHNlbGYucHJveHkubGF5ZXJJZHNbaV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcImM0Zy1pbmFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJjNGctYWN0aXZlXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICAkKGNvbnRlbnRIZWFkbGluZUxpbmspLmFkZENsYXNzKFwiYzRnLWluYWN0aXZlIGM0Zy1zdGFyYm9hcmQtaGVhZGxpbmUtbGlua1wiKTtcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmVMaW5rLmlubmVySFRNTCA9IChsYXllclN3aXRjaGVyVGl0bGUgfHwgbGFuZ0NvbnN0YW50cy5TVEFSQk9BUkRfVklFV19UUklHR0VSX0xBWUVSU1dJVENIRVIpO1xuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmsuaW5uZXJIVE1MID0gY29udGVudEhlYWRsaW5lTGluay5pbm5lckhUTUwrJyAnO1xuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZS5hcHBlbmRDaGlsZChjb250ZW50SGVhZGxpbmVMaW5rKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQoY29udGVudEhlYWRsaW5lKTtcblxuICAgICAgdGhpcy5jb250ZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmNvbnRlbnREaXYuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlNUQVJCT0FSRF9DT05URU5UX0xBWUVSU1dJVENIRVI7XG4gICAgICBjb250ZW50SW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgIHRoaXMuY29udGVudERpdi5hcHBlbmRDaGlsZChjb250ZW50SW5mbyk7XG4gICAgICBjb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnREaXYpO1xuXG4gICAgICBzZWxmLnZpZXcgPSBzZWxmLnN0YXJib2FyZC5hZGRWaWV3KHtcbiAgICAgICAgbmFtZTogJ2xheWVyc3dpdGNoZXInLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6IChsYXllclN3aXRjaGVyVGl0bGUgfHwgbGFuZ0NvbnN0YW50cy5TVEFSQk9BUkRfVklFV19UUklHR0VSX0xBWUVSU1dJVENIRVIpLFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUixcbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiBzZWxmLnN0YXJib2FyZC5jb250ZW50Q29udGFpbmVyLCBlbGVtZW50OiBjb250ZW50V3JhcHBlcn0sXG4gICAgICAgICAge3NlY3Rpb246IHNlbGYuc3RhcmJvYXJkLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHNlbGYuc3RhcmJvYXJkLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthY3RpdmF0ZSBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudmlldy5hY3RpdmF0ZSgpO1xuICAgIH0sIC8vIGVuZCBvZiBcImFjdGl2YXRlKClcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtzZXRDb250ZW50IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgbmV3Q29udGVudCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uIChuZXdDb250ZW50KSB7XG4gICAgICBpZiAobmV3Q29udGVudCkge1xuICAgICAgICBpZiAodHlwZW9mIG5ld0NvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MID0gbmV3Q29udGVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgIHRoaXMuY29udGVudERpdi5yZXBsYWNlQ2hpbGQobmV3Q29udGVudCwgdGhpcy5jb250ZW50RGl2LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5jb250ZW50RGl2LmFwcGVuZENoaWxkKG5ld0NvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIEBUT0RPXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZS5tZXNzYWdlKTtcbiAgICAgICAgICAgIC8vIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MO1xuICAgIH0sIC8vIGVuZCBvZiBcInNldENvbnRlbnQoKVwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2xvYWRDb250ZW50IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBsb2FkQ29udGVudDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgZm5EcmF3Q29udGVudDtcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLnN0YXJib2FyZC5zcGlubmVyLnNob3coKTtcblxuICAgICAgZm5EcmF3Q29udGVudCA9IGZ1bmN0aW9uIChsYXllcklkcykge1xuICAgICAgICBzZWxmLnRyZWVDb250cm9sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICQoc2VsZi50cmVlQ29udHJvbCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLlNUQVJCT0FSRF9MQVlFUlRSRUUpO1xuICAgICAgICBzZWxmLnNldENvbnRlbnQoc2VsZi50cmVlQ29udHJvbCk7XG5cbiAgICAgICAgc2VsZi5hZGRJdGVtcyhsYXllcklkcywgc2VsZi50cmVlQ29udHJvbCk7XG5cbiAgICAgICAgc2VsZi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHNlbGYuc3RhcmJvYXJkLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICBzZWxmLnN0YXJib2FyZC51cGRhdGUoKTtcbiAgICAgIH07IC8vIGVuZCBvZiBcImZuRHJhd0NvbnRlbnQoKVwiXG5cbiAgICAgIGlmICh0aGlzLnByb3h5LmxheWVyc19sb2FkZWQpIHtcbiAgICAgICAgZm5EcmF3Q29udGVudCh0aGlzLnByb3h5LmxheWVySWRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJveHkuaG9va19sYXllcl9sb2FkZWQucHVzaChmbkRyYXdDb250ZW50KTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJsb2FkQ29udGVudCgpXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbZHJhd0NvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgZHJhd0NvbnRlbnQ6IGZ1bmN0aW9uIChjb250ZW50RGF0YSkge1xuICAgICAgLy8gUEFTU1xuICAgIH0sIC8vIGVuZCBvZiBcImRyYXdDb250ZW50KClcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthZGRJdGVtcyBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIGl0ZW1EYXRhICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgd3JhcHBlckVsZW1lbnQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBvcHRpb25zICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFkZEl0ZW1zOiBmdW5jdGlvbiAoaXRlbURhdGEsIHdyYXBwZXJFbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBzZWxmLFxuICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICB3cmFwcGVyLFxuICAgICAgICAgIGNoaWxkV3JhcHBlcixcbiAgICAgICAgICBwV3JhcHBlcixcbiAgICAgICAgICBpdGVtLFxuICAgICAgICAgIGxheWVyLFxuICAgICAgICAgIHVpZCxcbiAgICAgICAgICBsaXN0SXRlbSxcbiAgICAgICAgICBlbnRyeSxcbiAgICAgICAgICAkZW50cnksXG4gICAgICAgICAgdG9nZ2xlLFxuICAgICAgICAgIGZuSGFuZGxlRW50cnlDbGljayxcbiAgICAgICAgICBmbkNoaWxkRW50cnlDbGljayxcbiAgICAgICAgICBmbkNoaWxkRW50cnlTaG93LFxuICAgICAgICAgIHpvb21Ub0V4dGVudCxcbiAgICAgICAgICBsYXllckNsYXNzO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgICBwYXJzZUFzTGlzdDogdHJ1ZVxuICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgIHdyYXBwZXIgPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICAvLyBjcmVhdGUgaGFuZGxlciBmb3IgZW50cnktY2xpY2tzXG4gICAgICBmbkhhbmRsZUVudHJ5Q2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGl0ZW1VaWQsXG4gICAgICAgICAgICBsYXllckl0ZW07XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpdGVtVWlkID0gJCh0aGlzKS5kYXRhKCd1aWQnKTtcbiAgICAgICAgbGF5ZXJJdGVtID0gc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2l0ZW1VaWRdO1xuXG4gICAgICAgIGlmIChzZWxmLnByb3h5LmFjdGl2ZUxheWVySWRzW2l0ZW1VaWRdKSB7XG4gICAgICAgICAgLy8gaGlkZSBsYXllclxuICAgICAgICAgIHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLmhpZGVMYXllcihpdGVtVWlkKTtcbiAgICAgICAgICBpZiAocGFyc2VJbnQobGF5ZXIucGlkLCAxMCkgPT0gMCkge1xuICAgICAgICAgICAgLy8gaGlkZSBhbGwgY2hpbGRzLCBiZWNhdXNlIGNsaWNrZWQgbGF5ZXIgaXMgdGhlIG1hcCBpdHNlbGZcbiAgICAgICAgICAgIGZvciAodmFyIGlkIGluIHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHMpIHtcbiAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuaGlkZUxheWVyKGlkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBzaG93IGxheWVyXG4gICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuc2hvd0xheWVyKGl0ZW1VaWQpO1xuICAgICAgICAgIC8vem9vb20gdG8gZXh0ZW50XG4gICAgICAgICAgem9vbVRvRXh0ZW50KGl0ZW1VaWQpO1xuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYuaGFuZGxlU2VsZWN0ZWRDaGlsZHModGhpcykpIHtcbiAgICAgICAgICBzZWxmLnVwZGF0ZVBhcmVudExheWVycyh0aGlzLCBpdGVtVWlkLCBsYXllckl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYzRnLm1hcHMubGF5ZXJzW2l0ZW1VaWRdID0gbGF5ZXJJdGVtO1xuICAgICAgfTsgLy8gZW5kIG9mIFwiZm5IYW5kbGVFbnRyeUNsaWNrKClcIlxuICAgICAgICBmbkNoaWxkRW50cnlDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGxldCBpdGVtVWlkID0gJCh0aGlzKS5kYXRhKCd1aWQnKTtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSAkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLnBhcmVudCgpO1xuICAgICAgICAgICAgbGV0IGNoaWxkcyA9ICQocGFyZW50KS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgbGV0IHBhcmVudFVpZCA9ICQoY2hpbGRzWzFdKS5kYXRhKCd1aWQnKTtcbiAgICAgICAgICAgIGlmKCQodGhpcykuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSkpe1xuICAgICAgICAgICAgICAgIHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLmhpZGVDaGlsZExheWVyKHBhcmVudFVpZCwgaXRlbVVpZCk7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZigkKHRoaXMpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSkpe1xuICAgICAgICAgICAgICAgIHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLnNob3dDaGlsZExheWVyKHBhcmVudFVpZCwgaXRlbVVpZCk7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGZuQ2hpbGRFbnRyeVNob3cgPSBmdW5jdGlvbiAoZXZlbnQpe1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbGV0IHBhcmVudCA9IHRoaXMucGFyZW50RWxlbWVudDtcbiAgICAgICAgICBsZXQgdWlkID0gJChwYXJlbnQuZmlyc3RDaGlsZCkuZGF0YSgndWlkJyk7XG4gICAgICAgICAgcGFyZW50ID0gJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5wYXJlbnQoKTtcbiAgICAgICAgICBsZXQgY2hpbGRzID0gJChwYXJlbnQpLmNoaWxkcmVuKCk7XG4gICAgICAgICAgbGV0IHBhcmVudFVpZCA9ICQoY2hpbGRzWzFdKS5kYXRhKCd1aWQnKTtcbiAgICAgICAgICB1aWQgPSB1aWQucmVwbGFjZShwYXJlbnRVaWQsJycpXG4gICAgICAgICAgbGV0IGxheWVyID0gc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW3BhcmVudFVpZF0udmVjdG9yTGF5ZXI7XG4gICAgICAgICAgaWYgKGxheWVyKSB7XG4gICAgICAgICAgICBsZXQgc2luZ2xlTGF5ZXIgPSBsYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpW3VpZF07XG4gICAgICAgICAgICBsZXQgZmVhdHVyZSA9IHNpbmdsZUxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKClbMF07XG4gICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmZpdChmZWF0dXJlLmdldEdlb21ldHJ5KCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgem9vbVRvRXh0ZW50ID0gZnVuY3Rpb24oaXRlbVVpZCl7IC8vZnVuY3Rpb24gdG8gem9vbSB0byB0aGUgZXh0ZW50IG9mIGEgbWFwIHN0cnVjdHVyZSBhbmQgaXRzIGNoaWxkcmVuXG4gICAgICAgICAgICB2YXIgbGF5ZXJJdGVtLFxuICAgICAgICAgICAgICAgIHZlY3RvckFycmF5LFxuICAgICAgICAgICAgICAgIGxheWVyR3JvdXAsXG4gICAgICAgICAgICAgICAgY29vcmRzLFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5LFxuICAgICAgICAgICAgICAgIGZlYXR1cmVMaXN0LFxuICAgICAgICAgICAgICAgIGZlYXR1cmVBcnJheSxcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlcyA9IFtdLFxuICAgICAgICAgICAgICAgIGV4dGVudCxcbiAgICAgICAgICAgICAgICBjZW50ZXIsXG4gICAgICAgICAgICAgICAga2V5O1xuICAgICAgICAgICAgbGF5ZXJJdGVtID0gc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2l0ZW1VaWRdO1xuICAgICAgICAgICAgaWYgKGxheWVySXRlbSAmJiBsYXllckl0ZW0uem9vbV9sb2NhdGlvbnMgPT09IFwiMVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVySXRlbS5oYXNDaGlsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gbGF5ZXJJdGVtLmNoaWxkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVySXRlbS5jaGlsZHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyID0gbGF5ZXJJdGVtLmNoaWxkc1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxheWVyLnR5cGUgPT0gXCJvdmVycGFzc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXkgPSBsYXllci5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JBcnJheSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhdGNoIGNhc2Ugb2YgbGlua2VkIGxheWVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ZWN0b3JBcnJheSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JBcnJheSA9IHV0aWxzLm9iamVjdFRvQXJyYXkodmVjdG9yQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllckdyb3VwID0gbGF5ZXIudmVjdG9yTGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckFycmF5ICYmIHZlY3RvckFycmF5LmZvckVhY2ggJiYgdHlwZW9mIHZlY3RvckFycmF5LmZvckVhY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodmVjdG9yTGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JMYXllciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmRhdGEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeS5jb29yZGluYXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LnR5cGUgPT09IFwiUG9pbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZHMgPSBvbC5wcm9qLnRyYW5zZm9ybShbcGFyc2VGbG9hdCh2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQodmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeS5jb29yZGluYXRlc1sxXSldLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IG5ldyBvbC5nZW9tLlBvaW50KGNvb3Jkcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2goZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIG1vcmUgY29tcGxleCBnZW9tZXRyaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVMaXN0ID0gbGF5ZXJHcm91cC5nZXRMYXllcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUFycmF5ID0gZmVhdHVyZUxpc3QuZ2V0QXJyYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUFycmF5LmZvckVhY2goZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci50eXBlID09PSBcImttbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZlYXR1cmUuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgc291cmNlRmVhdHVyZXMgPSBzb3VyY2UuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UuZ2V0RXh0ZW50KCkuZm9yRWFjaChmdW5jdGlvbiAoY29vcmRpbmF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKGNvb3JkaW5hdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihvbC5leHRlbnQuZ2V0VG9wUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSlbJzAnXSAhPVwiSW5maW5pdHlcIiAmJiBvbC5leHRlbnQuZ2V0VG9wUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSlbJzAnXSAhPVwiLUluZmluaXR5XCIpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2gob2wuZXh0ZW50LmdldFRvcFJpZ2h0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wTGVmdChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2gob2wuZXh0ZW50LmdldEJvdHRvbVJpZ2h0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0Qm90dG9tTGVmdChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihsYXllckl0ZW0udHlwZSAhPT0gXCJvdmVycGFzc1wiICYmIGxheWVySXRlbS52ZWN0b3JMYXllcil7XG4gICAgICAgICAgICAgICAgICAgIHZlY3RvckFycmF5ID0gbGF5ZXIuY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckFycmF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhdGNoIGNhc2Ugb2YgbGlua2VkIGxheWVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ZWN0b3JBcnJheSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckFycmF5ID0gdXRpbHMub2JqZWN0VG9BcnJheSh2ZWN0b3JBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllckdyb3VwID0gbGF5ZXIudmVjdG9yTGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVjdG9yQXJyYXkgJiYgdmVjdG9yQXJyYXkuZm9yRWFjaCAmJiB0eXBlb2YgdmVjdG9yQXJyYXkuZm9yRWFjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckFycmF5LmZvckVhY2goZnVuY3Rpb24gKHZlY3RvckxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JMYXllciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeS5jb29yZGluYXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkudHlwZSA9PT0gXCJQb2ludFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRzID0gb2wucHJvai50cmFuc2Zvcm0oW3BhcnNlRmxvYXQodmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeS5jb29yZGluYXRlc1swXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQodmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeS5jb29yZGluYXRlc1sxXSldLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5ID0gbmV3IG9sLmdlb20uUG9pbnQoY29vcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBtb3JlIGNvbXBsZXggZ2VvbWV0cmllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVMaXN0ID0gbGF5ZXJHcm91cC5nZXRMYXllcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlQXJyYXkgPSBmZWF0dXJlTGlzdC5nZXRBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxheWVyLnR5cGUgIT09IFwib3ZlcnBhc3NcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIudHlwZSA9PT0gXCJrbWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBmZWF0dXJlLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHNvdXJjZUZlYXR1cmVzID0gc291cmNlLmdldEZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmdldEV4dGVudCgpLmZvckVhY2goZnVuY3Rpb24gKGNvb3JkaW5hdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChjb29yZGluYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2gob2wuZXh0ZW50LmdldFRvcExlZnQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2gob2wuZXh0ZW50LmdldEJvdHRvbVJpZ2h0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKG9sLmV4dGVudC5nZXRCb3R0b21MZWZ0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBleHRlbnQgPSBvbC5leHRlbnQuYm91bmRpbmdFeHRlbnQoY29vcmRpbmF0ZXMpO1xuICAgICAgICAgICAgICAgIGlmIChleHRlbnRbMF0gPT09IEluZmluaXR5IHx8IGV4dGVudFswXSA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmZpdChleHRlbnQsIHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRTaXplKCkpO1xuICAgICAgICAgICAgICAgIGNlbnRlciA9IHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0Q2VudGVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKGNlbnRlclswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5zZXRDZW50ZXIoWzUwLCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLnNldFpvb20obWFwRGF0YS5taW5ab29tIHx8IDEwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07IC8vZW5kIG9mIHpvb20gdG8gZXh0ZW50XG4gICAgICAvLyBhZGQgaG9vayBmdW5jdGlvbiBmb3IgY2hhbmdlZCBsYXllci12aXNpYmlsaXR5XG4gICAgICAvLyAgIG5lZWRlZCB0byBjaGFuZ2UgdGhlIGVudHJ5LWNsYXNzZXNcbiAgICAgIHRoaXMucHJveHkuaG9va19sYXllcl92aXNpYmlsaXR5LnB1c2goZnVuY3Rpb24gKGxheWVySWQpIHtcbiAgICAgICAgdmFyIGosXG4gICAgICAgICAgICBjaGFuZ2VkTGF5ZXI7XG5cbiAgICAgICAgY2hhbmdlZExheWVyID0gc2VsZi5sYXllcnNbbGF5ZXJJZF07XG4gICAgICAgIGlmIChjaGFuZ2VkTGF5ZXIgJiYgY2hhbmdlZExheWVyLiRlbnRyaWVzKSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNoYW5nZWRMYXllci4kZW50cmllcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJJZF0pIHtcbiAgICAgICAgICAgICAgY2hhbmdlZExheWVyLiRlbnRyaWVzW2pdLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGFuZ2VkTGF5ZXIuJGVudHJpZXNbal0uYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuaGFuZGxlU2VsZWN0ZWRDaGlsZHMoIGNoYW5nZWRMYXllci4kZW50cmllc1tqXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gYWRkIGhvb2sgZnVuY3Rpb24gZm9yIGNoYW5nZWQgem9vbVxuICAgICAgLy8gICBuZWVkZWQgdG8gY2hhbmdlIHRoZSBlbnRyeS1jbGFzc2VzXG4gICAgICB0aGlzLnByb3h5Lmhvb2tfbWFwX3pvb20ucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBqLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBsYXllcjtcblxuICAgICAgICBmb3IgKGlkIGluIHNlbGYubGF5ZXJzKSB7XG4gICAgICAgICAgaWYgKHNlbGYubGF5ZXJzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgICAgbGF5ZXIgPSBzZWxmLmxheWVyc1tpZF07XG4gICAgICAgICAgICBpZiAobGF5ZXIgJiYgbGF5ZXIuJGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxheWVyLiRlbnRyaWVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkuY2hlY2tMYXllcklzQWN0aXZlRm9yWm9vbShpZCkpIHtcbiAgICAgICAgICAgICAgICAgIGxheWVyLiRlbnRyaWVzW2pdLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5ESVNBQkxFRCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGxheWVyLiRlbnRyaWVzW2pdLmFkZENsYXNzKGNzc0NvbnN0YW50cy5ESVNBQkxFRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfSk7IC8vIGVuZCBvZiBob29rXG5cbiAgICAgIGlmIChpdGVtRGF0YSAmJiBpdGVtRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtRGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHVpZCA9IGl0ZW1EYXRhW2ldO1xuICAgICAgICAgIGxheWVyID0gc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW3VpZF07XG4gICAgICAgICAgaXRlbSA9IHt9O1xuICAgICAgICAgIHRoaXMubGF5ZXJzW3VpZF0gPSBpdGVtO1xuICAgICAgICAgIC8vIHJlbmRlclNwZWNpYWwgaXMgc2V0IHdoZW4gYSBsYXllciBpcyByZW5kZXJlZCBpbiBpdHMgb3duIHRhYlxuICAgICAgICAgIGlmIChsYXllci5yZW5kZXJTcGVjaWFsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGF5ZXIgJiYgbGF5ZXIuZGlzcGxheSkge1xuICAgICAgICAgICAgbGlzdEl0ZW0gPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaXRlbS5lbnRyeVdyYXBwZXJzID0gaXRlbS5lbnRyeVdyYXBwZXJzIHx8IFtdO1xuICAgICAgICAgICAgaXRlbS5lbnRyeVdyYXBwZXJzLnB1c2gobGlzdEl0ZW0pO1xuXG4gICAgICAgICAgICBlbnRyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgIGVudHJ5LnNldEF0dHJpYnV0ZSgnaHJlZicsICcjJyk7XG4gICAgICAgICAgICBlbnRyeS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsYXllci5uYW1lKSk7XG4gICAgICAgICAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChlbnRyeSk7XG5cbiAgICAgICAgICAgICRlbnRyeSA9ICQoZW50cnkpO1xuICAgICAgICAgICAgaXRlbS4kZW50cmllcyA9IGl0ZW0uJGVudHJpZXMgfHwgW107XG4gICAgICAgICAgICBpdGVtLiRlbnRyaWVzLnB1c2goJGVudHJ5KTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb3h5LmNoZWNrTGF5ZXJJc0FjdGl2ZUZvclpvb20odWlkKSkge1xuICAgICAgICAgICAgICAkZW50cnkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkRJU0FCTEVEKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJGVudHJ5LmRhdGEoJ3VpZCcsIHVpZCk7XG4gICAgICAgICAgICAkZW50cnkuY2xpY2soZm5IYW5kbGVFbnRyeUNsaWNrKTtcblxuICAgICAgICAgICAgaWYgKGxheWVyLnZpc2libGVDaGlsZHMgfHwgbGF5ZXIuc3BsaXRfZ2VvanNvbikge1xuICAgICAgICAgICAgICB0b2dnbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cbiAgICAgICAgICAgICAgaWYgKGxheWVyLmhpZGVfY2hpbGQgIT09ICcxJykge1xuICAgICAgICAgICAgICAgICAgJChsaXN0SXRlbSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKTtcbiAgICAgICAgICAgICAgICAgICQodG9nZ2xlKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSUNPTik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgJCh0b2dnbGUpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5wYXJlbnQoKS5oYXNDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpKSB7XG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PUEVOKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5yaWdodFNsaWRlRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5yaWdodFNsaWRlRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcygncmlnaHQnLCBzZWxmLnN0YXJib2FyZC5jb250YWluZXIub2Zmc2V0V2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgJChzZWxmLnN0YXJib2FyZC5lbGVtZW50KS5jc3MoJ3JpZ2h0Jywgc2VsZi5zdGFyYm9hcmQuY29udGFpbmVyLm9mZnNldFdpZHRoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICQodG9nZ2xlKS5pbnNlcnRCZWZvcmUoJGVudHJ5KTtcbiAgICAgICAgICAgICAgY2hpbGRXcmFwcGVyID0gb3B0aW9ucy5wYXJzZUFzTGlzdCA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJykgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgaXRlbS5jaGlsZFdyYXBwZXJzID0gaXRlbS5jaGlsZFdyYXBwZXJzIHx8IFtdO1xuICAgICAgICAgICAgICBpdGVtLmNoaWxkV3JhcHBlcnMucHVzaChjaGlsZFdyYXBwZXIpO1xuICAgICAgICAgICAgICAgIGlmIChsYXllci5oaWRlX2NoaWxkICE9PSAnMScpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoY2hpbGRXcmFwcGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYobGF5ZXIuc3BsaXRfZ2VvanNvbiAmJiBsYXllci5jb250ZW50WzBdKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBsYXllci5jb250ZW50WzBdLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEuZmVhdHVyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBkYXRhLmZlYXR1cmVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZSA9IGRhdGEuZmVhdHVyZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkTGlzdEl0ZW0gPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZEl0ZW0gPXt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkSXRlbS5lbnRyeVdyYXBwZXJzID0gY2hpbGRJdGVtLmVudHJ5V3JhcHBlcnMgfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRJdGVtLmVudHJ5V3JhcHBlcnMucHVzaChjaGlsZExpc3RJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGRFbnRyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEVudHJ5LnNldEF0dHJpYnV0ZSgnaHJlZicsICcjJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRFbnRyeS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShmZWF0dXJlLnByb3BlcnRpZXNbbGF5ZXIuZ2VvanNvbl9hdHRyaWJ1dGVzLnNwbGl0KCcsJylbMF1dKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRMaXN0SXRlbS5hcHBlbmRDaGlsZChjaGlsZEVudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGRVaWQgPSB1aWQgKyBcIlwiICsgaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgJGNoaWxkRW50cnkgPSAkKGNoaWxkRW50cnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkSXRlbS4kZW50cmllcyA9IGl0ZW0uJGVudHJpZXMgfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRJdGVtLiRlbnRyaWVzLnB1c2goJGVudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFdyYXBwZXIuYXBwZW5kQ2hpbGQoY2hpbGRMaXN0SXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNoaWxkRW50cnkuZGF0YSgndWlkJywgY2hpbGRVaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxheWVyLmdlb2pzb25fem9vbSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2hpbGRFbnRyeS5jbGljayhmbkNoaWxkRW50cnlTaG93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjaGlsZEVudHJ5LmFkZENsYXNzKCdjNGctZ2VvanNvbi1idXR0b24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjaGlsZEVudHJ5LmNsaWNrKGZuQ2hpbGRFbnRyeUNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW3VpZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNoaWxkRW50cnkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2hpbGRFbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYzRnLm1hcHMuaG9vayAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjNGcubWFwcy5ob29rLmFkZENoaWxkcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKGM0Zy5tYXBzLmhvb2suYWRkQ2hpbGRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGM0Zy5tYXBzLmhvb2suc3RhcmJvYXJkX2xheWVyX2FjdGl2YXRlICYmIGM0Zy5tYXBzLmhvb2suc3RhcmJvYXJkX2xheWVyX2FjdGl2YXRlLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFyYW1PYmogPSB7J2ZlYXR1cmUnOiBmZWF0dXJlLCAncGFyZW50SXRlbSc6IGNoaWxkTGlzdEl0ZW0sICdlbnRyeSc6JGNoaWxkRW50cnl9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhjNGcubWFwcy5ob29rLnN0YXJib2FyZF9sYXllcl9hY3RpdmF0ZSwgcGFyYW1PYmopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbdWlkXSkge1xuICAgICAgICAgICAgICAkZW50cnkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkZW50cnkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gW2luZm9dOiAgSW4gb3JkZXIgZm9yIHRoaXMgdG8gd29yayxcbiAgICAgICAgICAgIC8vICAgICAgICAgIHRoZSBwYXJlbnQgbGF5ZXJzIG5lZWQgdG8gYmVcbiAgICAgICAgICAgIC8vICAgICAgICAgIGxpc3RlZCBiZWZvcmUgdGhlaXIgY2hpbGRzXG4gICAgICAgICAgICBpZiAodGhpcy5sYXllcnNbbGF5ZXIucGlkXSkge1xuICAgICAgICAgICAgICAvLyBpcyBjaGlsZC1lbGVtZW50XG4gICAgICAgICAgICAgIHBXcmFwcGVyID0gdGhpcy5sYXllcnNbbGF5ZXIucGlkXS5jaGlsZFdyYXBwZXJzO1xuICAgICAgICAgICAgICBwV3JhcHBlcltwV3JhcHBlci5sZW5ndGggLSAxXS5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQobGF5ZXIucGlkLCAxMCkgPT0gMCkge1xuICAgICAgICAgICAgICAvLyBsYXllciBpcyBtYXAgaXRzZWxmIHdpdGggYSBsYXllclxuICAgICAgICAgICAgICB0b2dnbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgIGlmKGxheWVyLmhpZGVfY2hpbGQgIT09ICcxJykge1xuICAgICAgICAgICAgICAgICAgJChsaXN0SXRlbSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAkKHRvZ2dsZSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklDT04pO1xuICAgICAgICAgICAgICAkKHRvZ2dsZSkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnBhcmVudCgpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgJCh0b2dnbGUpLmluc2VydEJlZm9yZSgkZW50cnkpO1xuICAgICAgICAgICAgICBjaGlsZFdyYXBwZXIgPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICBpdGVtLmNoaWxkV3JhcHBlcnMgPSBpdGVtLmNoaWxkV3JhcHBlcnMgfHwgW107XG4gICAgICAgICAgICAgIGl0ZW0uY2hpbGRXcmFwcGVycy5wdXNoKGNoaWxkV3JhcHBlcik7XG4gICAgICAgICAgICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGNoaWxkV3JhcHBlcik7XG4gICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gaXMgbm90IGEgY2hpbGQtZWxlbWVudCAocGlkID09IG1hcElkKVxuICAgICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxheWVyLmlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkc3RyID0gbGF5ZXIuaWQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBsYXllckNsYXNzID0gZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgICAgICBpZHN0ci50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgKS5yZXBsYWNlKC8lWzAtOUEtRl17Mn0vZ2ksJycpO1xuICAgICAgICAgICAgICAgICQobGlzdEl0ZW0pLmFkZENsYXNzKCdjNGdfc3RhcmJvYXJkX2l0ZW1fJytsYXllckNsYXNzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxheWVyLmNzc0NsYXNzKSB7XG4gICAgICAgICAgICAgICAgJChsaXN0SXRlbSkuYWRkQ2xhc3MobGF5ZXIuY3NzQ2xhc3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjYWxsIGhvb2sgXCJsYXllcnN3aXRjaGVyX2ZvckVhY2hJdGVtXCJcbiAgICAgICAgICAgIGlmIChjNGcubWFwcy5ob29rICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGM0Zy5tYXBzLmhvb2subGF5ZXJzd2l0Y2hlcl9mb3JFYWNoSXRlbSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhcbiAgICAgICAgICAgICAgICAgIGM0Zy5tYXBzLmhvb2subGF5ZXJzd2l0Y2hlcl9mb3JFYWNoSXRlbSxcbiAgICAgICAgICAgICAgICAgIHt0aGF0OiB0aGlzLCBpdGVtOiBpdGVtLCBlbnRyeTogJGVudHJ5fVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBlbmQgb2YgZm9yLWxvb3BcblxuICAgICAgICAvLyBTdGFyYm9hcmQgRmlsdGVyXG4gICAgICAgIGlmICh0aGlzLnN0YXJib2FyZC5vcHRpb25zLmZpbHRlcikge1xuICAgICAgICAgICAgdmFyIGR2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBkdi5jbGFzc05hbWUgPSBcImM0Zy1zdGFyYm9hcmQtZmlsdGVyIGM0Zy1jb250ZW50LXNlbGVjdFwiO1xuICAgICAgICAgICAgdmFyIGZpbHRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBmaWx0ZXIudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgICAgIGZpbHRlci5wbGFjZWhvbGRlciA9IFwiXCI7IC8vRm9udCBBd2Vzb21lXG4gICAgICAgICAgICB2YXIgaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgICAgICAgIGkuY2xhc3NOYW1lID0gJ2ZhcyBmYS1maWx0ZXInO1xuICAgICAgICAgICAgaS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gICAgICAgICAgICBkdi5hcHBlbmRDaGlsZChmaWx0ZXIpO1xuICAgICAgICAgICAgZHYuYXBwZW5kQ2hpbGQoaSk7XG4gICAgICAgICAgICBmaWx0ZXIub25rZXl1cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZpbHRlcl91bGxpKGVsZW1lbnQsIHNob3dTdWJ0cmVlKSB7XG5cbiAgICAgICAgICAgICAgICAgIC8vIGRvIG5vdCBhcHBseSBmaWx0ZXIgZm9yIHNob3J0IHNlYXJjaCB0ZXJtc1xuXG4gICAgICAgICAgICAgICAgICAgIHNob3dTdWJ0cmVlID0gc2hvd1N1YnRyZWUgfHwgZmFsc2U7ICAvLyB1c2VkIHdoaWxlIHRyYXZlcnNpbmcgZG93biB0aGUgdHJlZVxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIGFuIGFycmF5IChtb2RpZmllZDogZmlyc3QgZWxlbWVudCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRzLiBPbmx5IGZpbmRzIGNoaWxkcmVuIG9mIHRoZSBnaXZlbiBwYXJlbnQgZWxlbWVudCwgYnV0XG4gICAgICAgICAgICAgICAgICAgICAqIG5vIGZ1cnRoZXIgZGVzY2VuZGFudHMgbGlrZSBnZXRFbGVtZW50c0J5VGFnTmFtZSBkb2VzLlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q2hpbGRyZW5CeVRhZ05hbWUoZWxlbWVudCwgdGFnTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jaGlsZHJlbltpXS50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kLnB1c2goZWxlbWVudC5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZm91bmQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZFswXTsgLy8gISEhXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaEZsYWdVbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3VidHJlZU1hdGNoZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggTEkgZG9cbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNNYXRjaCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWFyY2ggY3VycmVudCBMSSBmb3IgZmlsdGVyIHRlcm1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF0uaW5uZXJIVE1MLnRvVXBwZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIudmFsdWUudG9VcHBlckNhc2UoKSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgYSBtYXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZWN1cnNlIGlmIGEgc3VidHJlZSAoVUwpIGV4aXN0cyBpbiBjdXJyZW50IExJIChtYXggMSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bCA9IGdldENoaWxkcmVuQnlUYWdOYW1lKGVsZW1lbnQuY2hpbGRyZW5baV0sXCJ1bFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWN1cnNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzU3VidHJlZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VidHJlZU1hdGNoZXMgPSBmaWx0ZXJfdWxsaSh1bCwgc2hvd1N1YnRyZWUgfHwgaXNNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNTdWJ0cmVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc01hdGNoIHx8IHN1YnRyZWVNYXRjaGVzIHx8IHNob3dTdWJ0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hGbGFnVWwgPSB0cnVlOyAvLyB1c2VkIHdoaWxlIHRyYXZlcnNpbmcgdXAgdGhlIHRyZWUgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY3VycmVudCBMSSB2aXNpYmxlIGFuZCBvcGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIudmFsdWUubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZChcImM0Zy1vcGVuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1zdGFyYm9hcmQtZmlsdGVyLW1hdGNoXCIpOyAvLyBhbHdheXMgcmVtb3ZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWF0Y2ggJiYgZmlsdGVyLnZhbHVlLmxlbmd0aCA+IDApIHtlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKX07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjdXJyZW50IExJIGludmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1vcGVuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZChcImM0Zy1jbG9zZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoRmxhZ1VsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBkbyBub3QgcmVhY3QgaW1tZWRpYXRlbHkgYnV0IGFsbG93IGZvciBzb21lIGtleXN0cm9rZXMgXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgIC8vIHR3byBvciB6ZXJvIGxldHRlcnMgYXJlIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyLnZhbHVlLmxlbmd0aCAhPSAxKSBmaWx0ZXJfdWxsaShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYzRnLWxheWVydHJlZSA+IHVsOm50aC1jaGlsZCgyKScpKVxuICAgICAgICAgICAgICAgIH0sIDM1MCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdyYXBwZXJFbGVtZW50LmFwcGVuZENoaWxkKGR2KTtcblxuICAgICAgICB9XG4gICAgICAgIHdyYXBwZXJFbGVtZW50LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgICAgfVxuICAgIH0sIC8vIGVuZCBvZiBcImFkZEl0ZW1zKClcIlxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHdoaWNoIGNoZWNrcyBmb3IgYSBnaXZlbiBsYXllciBpZCwgaWYgYW55IG9mIHRoZSBjaGlsZHMgYXJlIGN1cnJlbnRseSBzZWxlY3RlZC5cbiAgICAgKiBAcGFyYW0gbGF5ZXJVaWRcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBjaGVja0NoaWxkU2VsZWN0aW9uczogZnVuY3Rpb24gKGxheWVyVWlkKSB7XG4gICAgICB2YXIgbGF5ZXIsXG4gICAgICAgICAgY2hpbGRBY3RpdmUsXG4gICAgICAgICAgc2VsZjtcbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgY2hpbGRBY3RpdmUgPSAwO1xuICAgICAgbGF5ZXIgPSBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbbGF5ZXJVaWRdO1xuICAgICAgaWYgKGxheWVyICYmIGxheWVyLmNoaWxkcyAmJiBsYXllci5jaGlsZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBsYXllciBoYXMgY2hpbGRzXG4gICAgICAgIGxheWVyLmNoaWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgIGlmIChzZWxmLnByb3h5LmFjdGl2ZUxheWVySWRzW2NoaWxkLmlkXSkge1xuICAgICAgICAgICAgY2hpbGRBY3RpdmUgPSBjaGlsZEFjdGl2ZSArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFueSBjaGlsZHMgb2YgY2hpbGRzIGFyZSBhY3RpdmVcbiAgICAgICAgICAgIGNoaWxkQWN0aXZlID0gY2hpbGRBY3RpdmUgKyBzZWxmLmNoZWNrQ2hpbGRTZWxlY3Rpb25zKGNoaWxkLnVpZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGlsZEFjdGl2ZTtcbiAgICB9LCAvLyBlbmQgb2YgXCJjaGVja0NoaWxkU2VsZWN0aW9ucygpXCJcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGZvciBjb2xvcmluZyB0aGUgbGF5ZXJzd2l0Y2hlciBlbnRyaWVzLCBpZiB0aGVyZSBhcmUgYW55IHN1YmxheWVycyBzZWxlY3RlZFxuICAgICAqIEBwYXJhbSBlbnRyeVxuICAgICAqL1xuICAgIGhhbmRsZVNlbGVjdGVkQ2hpbGRzOiBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIGlmICh0aGlzLmNoZWNrQ2hpbGRTZWxlY3Rpb25zKCQoZW50cnkpLmRhdGEoJ3VpZCcpKSA+PSAxKSB7XG4gICAgICAgICQoZW50cnkpLmNzcygnZm9udC13ZWlnaHQnLCAnYm9sZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChlbnRyeSkuY3NzKCdmb250LXdlaWdodCcsICdub3JtYWwnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhcmJvYXJkLnVwZGF0ZSgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIHVwZGF0ZVBhcmVudExheWVyczogZnVuY3Rpb24gKGVudHJ5LCBsYXllclVpZCwgY2xpY2tlZExheWVyKSB7XG4gICAgICB2YXIgbGF5ZXIsXG4gICAgICAgICAgcGFyZW50RW50cnksXG4gICAgICAgICAgcGFyZW50TGF5ZXI7XG5cbiAgICAgIGxheWVyID0gdGhpcy5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2xheWVyVWlkXTtcbiAgICAgIGlmIChsYXllci5waWQgIT0gdGhpcy5zdGFyYm9hcmQub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEubWFwSWQpIHtcbiAgICAgICAgLy8gdGhlIGxheWVyIGhhcyBwYXJlbnRzXG4gICAgICAgIC8vIGJ5IHRoaXMgd2UgY2FuIGFjY2VzcyBvbmx5IHRoZSBzaW5nbGUgc3BhbiB3aGVyZSB0aGUgcGFyZW50IGVudHJ5IGlzIGluXG4gICAgICAgIHBhcmVudExheWVyID0gdGhpcy5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2xheWVyLnBpZF07XG4gICAgICAgIGlmIChwYXJlbnRMYXllcikge1xuICAgICAgICAgIHBhcmVudEVudHJ5ID0gZW50cnkucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXTtcbiAgICAgICAgICBpZiAocGFyZW50RW50cnkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW2NsaWNrZWRMYXllci5pZF0pIHtcbiAgICAgICAgICAgICAgJChwYXJlbnRFbnRyeSkuY3NzKCdmb250LXdlaWdodCcsICdib2xkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja0NoaWxkU2VsZWN0aW9ucygkKHBhcmVudEVudHJ5KS5kYXRhKCd1aWQnKSkgPj0gMSkge1xuICAgICAgICAgICAgICAgICQocGFyZW50RW50cnkpLmNzcygnZm9udC13ZWlnaHQnLCAnYm9sZCcpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQocGFyZW50RW50cnkpLmNzcygnZm9udC13ZWlnaHQnLCAnbm9ybWFsJyk7XG4gICAgICAgICAgICAgICAgLy8kKHBhcmVudEVudHJ5KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBhcmVudExheWVycyhwYXJlbnRFbnRyeSwgcGFyZW50TGF5ZXIuaWQsIHBhcmVudExheWVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCJcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgTGF5ZXJzd2l0Y2hlciA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uTGF5ZXJzd2l0Y2hlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWxheWVyc3dpdGNoZXIuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIHRoZSBjdXJyZW50IHpvb21sZXZlbCBvbiB0aGUgbWFwLlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgIHtvbC5jb250cm9sLkNvbnRyb2x9XG4gICAqXG4gICAqIEBwYXJhbSAgICB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0X29wdGlvbnMgICpvcHRpb25hbCogY29udHJvbCBvcHRpb25zLlxuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5ab29tbGV2ZWwgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgdmFyIHNlbGYsXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIHVwZGF0ZVpvb21sZXZlbDtcblxuICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLm1hcFZpZXcpIHtcbiAgICAgIGNvbnNvbGUud2FybignWm9vbWxldmVsIGNvbnRyb2wgbmVlZHMgdG8ga25vdyB0aGUgbWFwLicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5aT09NX0xFVkVMLFxuICAgICAgdW5kZWZpbmVkSFRNTDogJydcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lO1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gb3B0aW9ucy5tYXBWaWV3LmdldFpvb20oKTtcblxuICAgIHVwZGF0ZVpvb21sZXZlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gcGFyc2VJbnQob3B0aW9ucy5tYXBWaWV3LmdldFpvb20oKSk7XG4gICAgfTtcblxuICAgIG9wdGlvbnMubWFwVmlldy5vbignY2hhbmdlOnJlc29sdXRpb24nLCB1cGRhdGVab29tbGV2ZWwpO1xuICAgIG9sLmNvbnRyb2wuQ29udHJvbC5jYWxsKHRoaXMsIHtcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICB0YXJnZXQ6IG9wdGlvbnMudGFyZ2V0XG4gICAgfSk7XG4gIH07XG4gIG9sLmluaGVyaXRzKGM0Zy5tYXBzLmNvbnRyb2wuWm9vbWxldmVsLCBvbC5jb250cm9sLkNvbnRyb2wpO1xuXG5cbiAgLypcbiAgICogQWRkIG1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuWm9vbWxldmVsLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuWm9vbWxldmVsLnByb3RvdHlwZSwge1xuXG4gICAgLy8gbm90aGluZyB0byBhZGQgaGVyZVxuXG4gIH0pOyAvLyBlbmQgb2YgXCJhZGQgbWV0aG9kc1wiIC0tLVxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBab29tbGV2ZWwgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuWm9vbWxldmVsO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC16b29tbGV2ZWwuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmludGVyYWN0aW9uID0gdGhpcy5jNGcubWFwcy5pbnRlcmFjdGlvbiB8fCB7fTtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjNGcubWFwcy5pbnRlcmFjdGlvbi5HZW9QaWNrZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBtYXBEYXRhLFxuICAgICAgICBtYXBDb250YWluZXIsXG4gICAgICAgIGxhdCxcbiAgICAgICAgbG9uLFxuICAgICAgICBsYXRJZHgsXG4gICAgICAgIGxvbklkeCxcbiAgICAgICAgbGF0Um5kLFxuICAgICAgICBsb25SbmQ7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubWFwQ29udGFpbmVyIHx8ICF0aGlzLm9wdGlvbnMubWFwQ29udGFpbmVyLmRhdGEpIHtcbiAgICAgIGNvbnNvbGUud2FybignVGhlIEdlb1BpY2tlciBuZWVkcyBhIFwibWFwQ29udGFpbmVyXCIgaW4gb3JkZXIgdG8gd29yay4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBtYXBEYXRhID0gdGhpcy5vcHRpb25zLm1hcENvbnRhaW5lci5kYXRhO1xuICAgIG1hcENvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5tYXBDb250YWluZXI7XG4gICAgLy8gY29uZmlndXJhdGUgZ2VvcGlja2VyXG4gICAgdGhpcy4kZmllbGRHZW9YID0gJChtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feCk7XG4gICAgdGhpcy4kZmllbGRHZW9ZID0gJChtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feSk7XG5cbiAgICB0aGlzLm9wdGljTGF5ZXJTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3Rvcih7fSk7XG4gICAgdGhpcy5vcHRpY0xheWVyVmVjdG9yID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgICBzb3VyY2U6IHRoaXMub3B0aWNMYXllclNvdXJjZSxcbiAgICAgIHN0eWxlOiB0aGlzLmdlb1BpY2tlclN0eWxlRnVuY3Rpb25cbiAgICB9KTtcbiAgICB0aGlzLm9wdGljTGF5ZXJGZWF0dXJlID0gbnVsbDtcblxuICAgIGlmICh0aGlzLiRmaWVsZEdlb1gudmFsKCkgJiYgdGhpcy4kZmllbGRHZW9ZLnZhbCgpKSB7XG4gICAgICBsYXQgPSB0aGlzLiRmaWVsZEdlb1kudmFsKCk7XG4gICAgICBsb24gPSB0aGlzLiRmaWVsZEdlb1gudmFsKCk7XG5cbiAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlci5hbm9ueW1vdXMpIHtcbiAgICAgICAgICB0aGlzLiRmaWVsZEdlb1kucmVtb3ZlKCk7XG4gICAgICAgICAgdGhpcy4kZmllbGRHZW9YLnJlbW92ZSgpO1xuXG4gICAgICAgICAgbGF0SWR4ID0gbGF0LmluZGV4T2YoJy4nKTtcbiAgICAgICAgICBsb25JZHggPSBsb24uaW5kZXhPZignLicpO1xuICAgICAgICAgIGxhdCA9IGxhdC5yZXBsYWNlKC9cXEQvZywgXCJcIik7XG4gICAgICAgICAgbG9uID0gbG9uLnJlcGxhY2UoL1xcRC9nLCBcIlwiKTtcbiAgICAgICAgICBsYXRSbmQgPSBNYXRoLnJvdW5kKChNYXRoLnJhbmRvbSgpICogKDk5OTk5OTk5OTk5IC0gMSkpICsgMSk7XG4gICAgICAgICAgbG9uUm5kID0gTWF0aC5yb3VuZCgoTWF0aC5yYW5kb20oKSAqICg5OTk5OTk5OTk5OSAtIDEpKSArIDEpO1xuICAgICAgICAgIGlmIChsYXRSbmQgPiA0OTk5OTk5OTk5OSkge1xuICAgICAgICAgICAgICBsYXQgPSBwYXJzZUludChsYXQpIC0gbGF0Um5kO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxhdCA9IHBhcnNlSW50KGxhdCkgKyBsYXRSbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsb25SbmQgPCA1MDAwMDAwMDAwMCkge1xuICAgICAgICAgICAgICBsb24gPSBwYXJzZUludChsb24pIC0gbG9uUm5kO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxvbiA9IHBhcnNlSW50KGxvbikgKyBsb25SbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhdCA9IGxhdCArIFwiXCI7XG4gICAgICAgICAgbG9uID0gbG9uICsgXCJcIjtcbiAgICAgICAgICBsYXQgPSBsYXQuc3Vic3RyKDAsIGxhdElkeCkgKyAnLicgKyBsYXQuc3Vic3RyKGxhdElkeCwgbGF0Lmxlbmd0aCAtIGxhdElkeCk7XG4gICAgICAgICAgbG9uID0gbG9uLnN1YnN0cigwLCBsb25JZHgpICsgJy4nICsgbG9uLnN1YnN0cihsb25JZHgsIGxvbi5sZW5ndGggLSBsb25JZHgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9wdGljTGF5ZXJGZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoe1xuICAgICAgICBnZW9tZXRyeTogbmV3IG9sLmdlb20uUG9pbnQob2wucHJvai5mcm9tTG9uTGF0KFtwYXJzZUZsb2F0KGxvbiksIHBhcnNlRmxvYXQobGF0KV0pKSxcbiAgICAgICAgcGlja2VyQ29sb3I6IFswLCAxODAsIDEwMCwgMV0sXG4gICAgICAgIGFub255bW91czogbWFwRGF0YS5nZW9waWNrZXIuYW5vbnltb3VzXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5vcHRpY0xheWVyU291cmNlLmFkZEZlYXR1cmUodGhpcy5vcHRpY0xheWVyRmVhdHVyZSk7XG5cbiAgICAgIG1hcENvbnRhaW5lci5tYXAuZ2V0VmlldygpLmZpdCh0aGlzLm9wdGljTGF5ZXJTb3VyY2UuZ2V0RXh0ZW50KCksIG1hcENvbnRhaW5lci5tYXAuZ2V0U2l6ZSgpKTtcbiAgICAgIC8vIHNldCB6b29tIHNvIHdlIGNhbiBzZWUgc29tZSB0aWxlcyB3aXRob3V0IGVycm9yXG4gICAgICBtYXBDb250YWluZXIubWFwLmdldFZpZXcoKS5zZXRab29tKDE1KTtcbiAgICB9IGVsc2UgaWYgKG1hcERhdGEuZ2VvTG9jYXRpb24gJiYgdHlwZW9mIG1hcERhdGEuZ2VvTG9jYXRpb24uc2V0VHJhY2tpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1hcERhdGEuZ2VvTG9jYXRpb24uc2V0VHJhY2tpbmcodHJ1ZSk7XG4gICAgfVxuICAgIG1hcENvbnRhaW5lci5tYXAuYWRkTGF5ZXIodGhpcy5vcHRpY0xheWVyVmVjdG9yKTtcblxuICAgIC8vVE9ETyB3ZW5uIGdlb3BpY2tlci5jbGlja0Rpc2FibGVkIChvZGVyIHNvKSBnZXNldHp0IGlzdCwgdGhpcy5vcHRpb25zLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oKXt9XG5cbiAgICAvLyBpbmhlcml0YW5jZS1zdHVmZlxuICAgIG9sLmludGVyYWN0aW9uLkludGVyYWN0aW9uLmNhbGwodGhpcywge1xuICAgICAgaGFuZGxlRXZlbnQ6IHRoaXMub3B0aW9ucy5oYW5kbGVFdmVudCB8fCB0aGlzLmhhbmRsZUV2ZW50XG4gICAgICAvLyBoYW5kbGVFdmVudDogdGhpcy5vcHRpb25zLmhhbmRsZUV2ZW50IHx8IGM0Zy5tYXBzLmludGVyYWN0aW9uLkdlb1BpY2tlci5oYW5kbGVFdmVudFxuICAgIH0pO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5pbnRlcmFjdGlvbi5HZW9QaWNrZXIsIG9sLmludGVyYWN0aW9uLkludGVyYWN0aW9uKTtcblxuXG4gIC8qXG4gICAqIEFkZCBtZXRob2RzXG4gICAqL1xuICBjNGcubWFwcy5pbnRlcmFjdGlvbi5HZW9QaWNrZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuaW50ZXJhY3Rpb24uR2VvUGlja2VyLnByb3RvdHlwZSwge1xuXG4gICAgZ2VvUGlja2VyU3R5bGVGdW5jdGlvbjogZnVuY3Rpb24gKGZlYXR1cmUsIHByb2plY3Rpb24sIGdldElkKSB7XG4gICAgICB2YXIgY29sb3IsXG4gICAgICAgICAgd2hpdGUsXG4gICAgICAgICAgcmVzdWx0O1xuXG4gICAgICBpZiAoZ2V0SWQpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuXG4gICAgICB3aGl0ZSA9IFsyNTUsIDI1NSwgMjU1LCAxXTtcbiAgICAgIGlmIChmZWF0dXJlICYmIHR5cGVvZiBmZWF0dXJlLmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiBmZWF0dXJlLmdldCgncGlja2VyQ29sb3InKSkge1xuICAgICAgICBjb2xvciA9IGZlYXR1cmUuZ2V0KCdwaWNrZXJDb2xvcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sb3IgPSBbMjAwLCAwLCAwLCAwLjddO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChmZWF0dXJlICYmIHR5cGVvZiBmZWF0dXJlLmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiAhZmVhdHVyZS5nZXQoJ2Fub255bW91cycpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyLFxuICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHdoaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHdoaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogNDAsXG4gICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHdoaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogNDAsXG4gICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQucHVzaChcbiAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICByYWRpdXM6IDYwLFxuICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgY29sb3I6IHdoaXRlLFxuICAgICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB6SW5kZXg6IEluZmluaXR5XG4gICAgICAgIH0pKTtcblxuICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgcmFkaXVzOiA2MCxcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgd2lkdGg6IDJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgekluZGV4OiBJbmZpbml0eVxuICAgICAgICB9KSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiAobWFwQnJvd3NlckV2ZW50KSB7XG4gICAgICBpZiAobWFwQnJvd3NlckV2ZW50LnR5cGUgPT09IFwic2luZ2xlY2xpY2tcIikge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlQ2xpY2tFdmVudCAmJiAhdGhpcy5vcHRpb25zLm1hcENvbnRhaW5lci5kYXRhLmdlb3BpY2tlci5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybiAhdGhpcy5waWNrKG1hcEJyb3dzZXJFdmVudC5jb29yZGluYXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgcGljazogZnVuY3Rpb24gKGNvb3JkaW5hdGUpIHtcbiAgICAgIHZhciBhcnJMYXRMb247XG5cbiAgICAgIGFyckxhdExvbiA9IG9sLnByb2oudG9Mb25MYXQoY29vcmRpbmF0ZSk7XG5cbiAgICAgIHRoaXMub3B0aWNMYXllckZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgIGdlb21ldHJ5OiBuZXcgb2wuZ2VvbS5Qb2ludChjb29yZGluYXRlKVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMub3B0aWNMYXllclNvdXJjZS5jbGVhcigpO1xuICAgICAgdGhpcy5vcHRpY0xheWVyU291cmNlLmFkZEZlYXR1cmUodGhpcy5vcHRpY0xheWVyRmVhdHVyZSk7XG5cbiAgICAgIHRoaXMuJGZpZWxkR2VvWC52YWwoYXJyTGF0TG9uWzBdKTtcbiAgICAgIHRoaXMuJGZpZWxkR2VvWS52YWwoYXJyTGF0TG9uWzFdKTtcbiAgICAgIHRoaXMuJGZpZWxkR2VvWC5jaGFuZ2UoKTtcbiAgICAgIHRoaXMuJGZpZWxkR2VvWS5jaGFuZ2UoKTtcblxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCIgLS0tXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgbGV0IEdlb1BpY2tlciA9IHRoaXMuYzRnLm1hcHMuaW50ZXJhY3Rpb24uR2VvUGlja2VyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtaW50ZXJhY3Rpb24tZ2VvcGlja2VyLmpzIiwiaW1wb3J0IHtNYXBDb250cm9sbGVyfSBmcm9tIFwiLi9jNGctbWFwc1wiXG5cbmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gIC8vIFRPRE8gd2llIGtvbW0gaWNoIGFuIG1hcERhdGE/XG4gIGxldCBtYXBDb250cm9sbGVyID0gbmV3IE1hcENvbnRyb2xsZXIobWFwRGF0YSk7XG4gIGNvbnNvbGUubG9nKFwiRm9vXCIpO1xufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1tYWluLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5taXNjID0gdGhpcy5jNGcubWFwcy5taXNjIHx8IHt9O1xuXG5pbXBvcnQge1Rvb2x0aXBQb3BVcH0gZnJvbSBcIi4vYzRnLW1hcHMtbWlzYy10b29sdGlwcG9wdXBcIjtcbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQFRPRE9cbiAgICogW01hcEhvdmVyIGRlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfb3B0aW9ucyBDb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5taXNjLk1hcEhvdmVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAvLyBtYXBDb250cm9sbGVyOiB1bmRlZmluZWQsXG4gICAgICBhY3RpdmF0ZTogdHJ1ZVxuICAgIH0sIHRoaXMub3B0aW9ucyk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ01hcEhvdmVyIG5lZWRzIGEgbWFwQ29udHJvbGxlcicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHNldCBuZWVkZWQgdmFyc1xuICAgIHRoaXMubGlzdGVuZXJLZXkgPSBmYWxzZTtcbiAgICB0aGlzLm1hcCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcDtcbiAgICB0aGlzLmxhc3RGZWF0dXJlU3R5bGUgPSBudWxsO1xuICAgIHRoaXMubGFzdEhvdmVyZWRGZWF0dXJlID0gbnVsbDtcblxuICAgIC8vIGNyZWF0ZSB0b29sdGlwXG4gICAgdGhpcy5ob3ZlclRvb2x0aXAgPSBuZXcgVG9vbHRpcFBvcFVwKHtcbiAgICAgIG1hcDogdGhpcy5tYXAsXG4gICAgICBvZmZzZXQ6IFsxMCwgMTBdLFxuICAgICAgaG9yaXpvbnRhbDogdHJ1ZSxcbiAgICAgIGNsb3NlYWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICB0aGlzLmhvdmVyVG9vbHRpcC5oaWRlKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmFjdGl2YXRlKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEFkZCBtZXRob2RzIHRvIE1hcEhvdmVyXG4gIGM0Zy5tYXBzLm1pc2MuTWFwSG92ZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMubWlzYy5NYXBIb3Zlci5wcm90b3R5cGUsIHtcblxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthY3RpdmF0ZSBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5saXN0ZW5lcktleSkge1xuICAgICAgICB0aGlzLmxpc3RlbmVyS2V5ID0gdGhpcy5tYXAub24oJ3BvaW50ZXJtb3ZlJywgdGhpcy5nZXRIb3ZlckZ1bmN0aW9uKCksIHRoaXMpO1xuICAgICAgICAvL3RoaXMubWFwLm9uKCdwb2ludGVybW92ZScsIHRoaXMuY2hhbmdlRmVhdHVyZVN0eWxlcygpLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJhY3RpdmF0ZSgpXCJcblxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtkZWFjdGl2YXRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBkZWFjdGl2YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5saXN0ZW5lcktleSkge1xuICAgICAgICBvbC5PYnNlcnZhYmxlLnVuQnlLZXkodGhpcy5saXN0ZW5lcktleSk7XG4gICAgICAgIHRoaXMubGlzdGVuZXJLZXkgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJkZWFjdGl2YXRlKClcIlxuXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2lzQWN0aXZlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBpc0FjdGl2ZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMubGlzdGVuZXJLZXkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSwgLy8gZW5kIG9mIFwiZ2V0U3RhdGUoKVwiXG5cblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbZ2V0SG92ZXJGdW5jdGlvbiBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgZ2V0SG92ZXJGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICB2YXIgaG92ZXJlZCxcbiAgICAgICAgICAgIGNsdXN0ZXJlZCxcbiAgICAgICAgICAgIHRvb2x0aXBDb250ZW50LFxuICAgICAgICAgICAgdG9vbHRpcEhlbHBlcixcbiAgICAgICAgICAgIGZlYXR1cmVzLFxuICAgICAgICAgICAgdG9vbHRpcExlbmd0aCxcbiAgICAgICAgICAgIHJlc29sdXRpb24sXG4gICAgICAgICAgICBjYW52YXMsXG4gICAgICAgICAgICBtYXBEYXRhID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YSxcbiAgICAgICAgICAgIHByb3h5ID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHk7XG5cblxuICAgICAgICBjbHVzdGVyZWQgPSBmYWxzZTtcbiAgICAgICAgaG92ZXJlZCA9IHNlbGYubWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChldmVudC5waXhlbCxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChmZWF0dXJlLCBsYXllcikge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGZlYXR1cmU6IGZlYXR1cmUsXG4gICAgICAgICAgICAgICAgbGF5ZXI6IGxheWVyXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmVzb2x1dGlvbiA9IHNlbGYubWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uKCk7XG5cbiAgICAgICAgaWYgKCFob3ZlcmVkKSB7XG4gICAgICAgICAgc2VsZi5ob3ZlclRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJjYW52YXNcIik7XG4gICAgICAgICAgJChjYW52YXMpLmNzcygnY3Vyc29yJywgJ2RlZmF1bHQnKTtcbiAgICAgICAgICBpZihtYXBEYXRhLmhvdmVyX3BvcHVwcyA9PT0gJzEnICYmIG1hcERhdGEuaG92ZXJfcG9wdXBzX3N0YXkgIT0gJzEnKXtcbiAgICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGM0Zy5tYXBzLmNvbnN0YW50LmNzcy5BQ1RJVkUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZSAmJiBzZWxmLmxhc3RGZWF0dXJlU3R5bGUpIHtcbiAgICAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZS5zZXRTdHlsZShzZWxmLmxhc3RGZWF0dXJlU3R5bGUpO1xuICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cblxuXG4gICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJjYW52YXNcIik7XG4gICAgICAgICQoY2FudmFzKS5jc3MoJ2N1cnNvcicsICdwb2ludGVyJyk7XG5cbiAgICAgICAgaWYgKGhvdmVyZWQuZmVhdHVyZSAmJiB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpKSB7XG4gICAgICAgICAgaWYgKGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbMV0pIHtcbiAgICAgICAgICAgIGNsdXN0ZXJlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgIGhvdmVyZWQuZmVhdHVyZSA9IGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKGhvdmVyZWQuZmVhdHVyZS5nZXRHZW9tZXRyeSgpICYmIGhvdmVyZWQuZmVhdHVyZS5nZXRHZW9tZXRyeSgpIGluc3RhbmNlb2Ygb2wuZ2VvbS5MaW5lU3RyaW5nKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZihob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfbG9jYXRpb25cIikgfHwgKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlICYmIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlLmdldChcImhvdmVyX2xvY2F0aW9uXCIpKSkge1xuICAgICAgICAgICAgaWYgKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlICYmIGhvdmVyZWQuZmVhdHVyZSA9PT0gc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc2V0IGJhY2sgc3R5bGVzIHdoZW4gdGhlIGZlYXR1cmVzIGFyZSBub3QgaG92ZXJlZCBhbnltb3JlXG4gICAgICAgICAgICBpZiAoc2VsZi5sYXN0RmVhdHVyZVN0eWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChob3ZlcmVkLmZlYXR1cmUgIT09IHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5sYXN0RmVhdHVyZVN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUuc2V0U3R5bGUoc2VsZi5sYXN0RmVhdHVyZVN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiQ2hhbmdlZCBiYWNrIGZlYXR1cmUgc3R5bGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGYubGFzdExheWVyU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZS5zZXRTdHlsZShzZWxmLmxhc3RMYXllclN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiQ2hhbmdlZCBiYWNrIGxheWVyLWZlYXR1cmUgc3R5bGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgaWYgKGhvdmVyZWQuZmVhdHVyZSAmJiB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24gJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24oKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlID0gaG92ZXJlZC5mZWF0dXJlO1xuXG4gICAgICAgICAgICAgICAgc2VsZi5sYXN0TGF5ZXJTdHlsZSA9IGhvdmVyZWQubGF5ZXIuZ2V0U3R5bGUoKTtcbiAgICAgICAgICAgICAgICBzZWxmLmxhc3RGZWF0dXJlU3R5bGUgPSBzZWxmLmxhc3RMYXllclN0eWxlKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAvL1RPRE8gZ2V0IG9uaG92ZXIgc3R5bGUgZnJvbSBkYiAodmxsdCBzY2hvbiBpbiBwcm94eSBkcmluPylcbiAgICAgICAgICAgICAgICBpZihob3ZlcmVkLmZlYXR1cmUuZ2V0KCdob3Zlcl9zdHlsZScpICYmIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildKXtcbiAgICAgICAgICAgICAgICAgICAgaWYocHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKV0uZm5TdHlsZUZ1bmN0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyZWQuZmVhdHVyZS5zZXRTdHlsZShGdW5jdGlvbihcImZlYXR1cmVcIixcImRhdGFcIixcIm1hcFwiLHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildLmZuU3R5bGVGdW5jdGlvbikoaG92ZXJlZC5mZWF0dXJlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyZWQuZmVhdHVyZS5zZXRTdHlsZShwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldChcImhvdmVyX3N0eWxlXCIpXS5zdHlsZShob3ZlcmVkLmZlYXR1cmUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaG92ZXJlZC5sYXllciAmJiB0eXBlb2YgaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGhvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgICAgICAgaWYgKGhvdmVyZWQuZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZSA9IGhvdmVyZWQuZmVhdHVyZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlID0gaG92ZXJlZC5sYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpWzBdO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZSA9IHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlLmdldCgnZmVhdHVyZXMnKVswXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLmxhc3RMYXllclN0eWxlID0gaG92ZXJlZC5sYXllci5nZXRTdHlsZSgpO1xuICAgICAgICAgICAgICAgIHNlbGYubGFzdEZlYXR1cmVTdHlsZSA9IHNlbGYubGFzdExheWVyU3R5bGUoc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIGlmKGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2hvdmVyX3N0eWxlJykgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoIXByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJJZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycklkcy5wdXNoKGhvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMoYXJySWRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildLmZuU3R5bGVGdW5jdGlvbil7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3ZlcmVkLmZlYXR1cmUuc2V0U3R5bGUoRnVuY3Rpb24oXCJmZWF0dXJlXCIsXCJkYXRhXCIsXCJtYXBcIixwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldChcImhvdmVyX3N0eWxlXCIpXS5mblN0eWxlRnVuY3Rpb24pKGhvdmVyZWQuZmVhdHVyZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3ZlcmVkLmZlYXR1cmUuc2V0U3R5bGUocHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKV0uc3R5bGUoaG92ZXJlZC5mZWF0dXJlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChob3ZlcmVkICYmIGhvdmVyZWQuZmVhdHVyZSAmJiBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdzdHlsZVVybCcpKSB7XG4gICAgICAgICAgLy9pZiB0aGlzIHByb3BlcnR5IGlzIHNldCwgd2UgaGF2ZSBhIGZlYXR1cmUgdGhhdCBoYXMgbm9uZSBvZiBvdXIgc3R5bGVzID0+IG5vIHRvb2x0aXBcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgaG92ZXIgdG9vbHRpcHNcbiAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFjbHVzdGVyZWQgJiYgaG92ZXJlZC5mZWF0dXJlICYmIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nICYmIChob3ZlcmVkLmZlYXR1cmUuZ2V0KCd0b29sdGlwJykgfHwgaG92ZXJlZC5mZWF0dXJlLmdldCgnZ3JhcGhpY1RpdGxlJykpKSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0KCd0b29sdGlwJyk7XG4gICAgICAgICAgaWYgKCF0b29sdGlwQ29udGVudCkge1xuICAgICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdncmFwaGljVGl0bGUnKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0b29sdGlwQ29udGVudCA9PT0gJ29iamVjdCcgJiYgdG9vbHRpcENvbnRlbnQuZWxlbWVudCAmJiB0b29sdGlwQ29udGVudC5lbGVtZW50LmNoaWxkTm9kZXNbMV0pIHtcbiAgICAgICAgICAgIHRvb2x0aXBDb250ZW50ID0gdG9vbHRpcENvbnRlbnQuZWxlbWVudC5jaGlsZE5vZGVzWzFdLmlubmVySFRNTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQFRPRE86IENoZWNrICYgZml4XG4gICAgICAgIH0gZWxzZSBpZiAoaG92ZXJlZC5mZWF0dXJlICYmIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbiAmJlxuICAgICAgICAgICAgdHlwZW9mIGhvdmVyZWQuZmVhdHVyZS5nZXRTdHlsZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24oKSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzICYmXG4gICAgICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24oKShyZXNvbHV0aW9uKV0gJiZcbiAgICAgICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbigpKHJlc29sdXRpb24pXS50b29sdGlwKSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24oKShyZXNvbHV0aW9uKV0udG9vbHRpcDtcbiAgICAgICAgICAvLyBAVE9ETzogQ2hlY2tcbiAgICAgICAgfSBlbHNlIGlmIChob3ZlcmVkLmxheWVyICYmIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24gJiZcbiAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzICYmXG4gICAgICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkoKV0gJiZcbiAgICAgICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSgpXS50b29sdGlwKSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkoKV0udG9vbHRpcDtcbiAgICAgICAgfSBlbHNlIGlmIChob3ZlcmVkLmxheWVyICYmXG4gICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlcyAmJlxuICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbigpKG51bGwsIG51bGwsIDEpXSAmJlxuICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbigpKG51bGwsIG51bGwsIDEpXS50b29sdGlwKSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkobnVsbCwgbnVsbCwgMSldLnRvb2x0aXA7XG4gICAgICAgIH0gZWxzZSBpZiAoaG92ZXJlZC5sYXllciAmJiBob3ZlcmVkLmxheWVyLnRvb2x0aXApIHtcbiAgICAgICAgICB0b29sdGlwQ29udGVudCA9IGhvdmVyZWQubGF5ZXIudG9vbHRpcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2x1c3RlcmVkICYmIGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykpe1xuICAgICAgICAgICAgZmVhdHVyZXMgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpO1xuICAgICAgICAgICAgaWYoZmVhdHVyZXNbMF0uZ2V0KCd0b29sdGlwJykgJiYgZmVhdHVyZXNbMF0uZ2V0KCd0b29sdGlwX2xlbmd0aCcpKXtcbiAgICAgICAgICAgICAgICB0b29sdGlwQ29udGVudCA9IGZlYXR1cmVzWzBdLmdldCgndG9vbHRpcCcpO1xuICAgICAgICAgICAgICAgIHRvb2x0aXBMZW5ndGggPSBwYXJzZUludChmZWF0dXJlc1swXS5nZXQoJ3Rvb2x0aXBfbGVuZ3RoJykpO1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDE7IGk8ZmVhdHVyZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICBpZihmZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKSAmJiBmZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKSAhPSAnJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHRvb2x0aXBDb250ZW50ICsgJywgJyArIGZlYXR1cmVzW2ldLmdldCgndG9vbHRpcCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRvb2x0aXBDb250ZW50Lmxlbmd0aCA+IHRvb2x0aXBMZW5ndGggKyAzKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYodG9vbHRpcENvbnRlbnQgPSB0b29sdGlwQ29udGVudC5zbGljZSgwLCB0b29sdGlwTGVuZ3RoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHRvb2x0aXBDb250ZW50ICsgJy4uLic7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoaG92ZXJlZC5sYXllci50b29sdGlwICYmIGhvdmVyZWQubGF5ZXIudG9vbHRpcF9sZW5ndGgpe1xuICAgICAgICAgICAgICAgIHRvb2x0aXBIZWxwZXIgPSB0b29sdGlwQ29udGVudDtcbiAgICAgICAgICAgICAgICB0b29sdGlwQ29udGVudCA9ICcnO1xuICAgICAgICAgICAgICAgIHRvb2x0aXBMZW5ndGggPSBwYXJzZUludChob3ZlcmVkLmxheWVyLnRvb2x0aXBfbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBmb3IoaSA9IDA7IGk8ZmVhdHVyZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2luZ2xlVG9vbHRpcCA9IHV0aWxzLnJlcGxhY2VBbGxQbGFjZWhvbGRlcnModG9vbHRpcEhlbHBlciwgZmVhdHVyZXNbaV0sIGhvdmVyZWQubGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZihzaW5nbGVUb29sdGlwICE9ICcnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRvb2x0aXBDb250ZW50ID09ICcnKSB0b29sdGlwQ29udGVudCA9IHNpbmdsZVRvb2x0aXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHRvb2x0aXBDb250ZW50ID0gdG9vbHRpcENvbnRlbnQgKyAnLCAnICsgc2luZ2xlVG9vbHRpcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih0b29sdGlwQ29udGVudC5sZW5ndGggPiB0b29sdGlwTGVuZ3RoICszKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYodG9vbHRpcENvbnRlbnQgPSB0b29sdGlwQ29udGVudC5zbGljZSgwLCB0b29sdGlwTGVuZ3RoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHRvb2x0aXBDb250ZW50ICsgJy4uLic7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvb2x0aXBDb250ZW50KSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSB1dGlscy5kZWNvZGVHZW9Kc29uUHJvcGVydHkodG9vbHRpcENvbnRlbnQpO1xuXG4gICAgICAgICAgLy8gcmVwbGFjZSBwbGFjZWhvbGRlcnMgaWYgcG9zc2libGVcbiAgICAgICAgICAgIGlmKGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykpe1xuXG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHV0aWxzLnJlcGxhY2VBbGxQbGFjZWhvbGRlcnModG9vbHRpcENvbnRlbnQsIGhvdmVyZWQuZmVhdHVyZSwgaG92ZXJlZC5sYXllcik7XG5cblxuICAgICAgICAgIGlmICh0b29sdGlwQ29udGVudC50cmltKCkpIHtcbiAgICAgICAgICAgIC8vIHBvcHVwIGNvbmZpZ1xuICAgICAgICAgICAgc2VsZi5ob3ZlclRvb2x0aXAuc2V0UG9zaXRpb24oZXZlbnQuY29vcmRpbmF0ZSk7XG4gICAgICAgICAgICBzZWxmLmhvdmVyVG9vbHRpcC5zZXRDb250ZW50KHRvb2x0aXBDb250ZW50KTtcbiAgICAgICAgICAgIHNlbGYuaG92ZXJUb29sdGlwLnNob3coKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5ob3ZlclRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLmhvdmVyVG9vbHRpcC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYobWFwRGF0YS5ob3Zlcl9wb3B1cHMgPT09ICcxJyAmJiAhY2x1c3RlcmVkICYmIGhvdmVyZWQuZmVhdHVyZSApe1xuICAgICAgICAgIHZhciBwb3B1cEluZm9zID0ge307XG5cbiAgICAgICAgICBpZihob3ZlcmVkLmZlYXR1cmUuZ2V0KCdwb3B1cCcpKSB7XG4gICAgICAgICAgICBwb3B1cEluZm9zID0gaG92ZXJlZC5mZWF0dXJlLmdldCgncG9wdXAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihob3ZlcmVkLmZlYXR1cmUuZ2V0KCdsb2NfbGlua3VybCcpKXtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKGhvdmVyZWQubGF5ZXIgJiYgaG92ZXJlZC5sYXllci5wb3B1cCl7XG4gICAgICAgICAgICBwb3B1cEluZm9zID0gaG92ZXJlZC5sYXllci5wb3B1cDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNvb3JkID0gaG92ZXJlZC5mZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICBpZighY29vcmQgfHwoY29vcmQgJiYgY29vcmRbMF0gJiYgY29vcmRbMF0ubGVuZ3RoKSl7XG4gICAgICAgICAgICAgIHZhciBleHRlbnQgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRFeHRlbnQoKTtcbiAgICAgICAgICAgICAgY29vcmQgPSBzZWxmLm1hcC5nZXRDb29yZGluYXRlRnJvbVBpeGVsKGV2ZW50LnBpeGVsKTtcbiAgICAgICAgICAgICAgY29vcmQgPSBbKGV4dGVudFswXStleHRlbnRbMl0pLzIsKGV4dGVudFsxXStleHRlbnRbM10pLzJdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAucG9wdXAuc2V0UG9zaXRpb24oY29vcmQpO1xuXG4gICAgICAgICAgICBpZiAocG9wdXBJbmZvcy5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJGNvbnRlbnQuaHRtbCgnJyk7XG4gICAgICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLmFkZENsYXNzKGM0Zy5tYXBzLmNvbnN0YW50LmNzcy5BQ1RJVkUpLmFkZENsYXNzKGM0Zy5tYXBzLmNvbnN0YW50LmNzcy5MT0FESU5HKTtcbiAgICAgICAgICAgICAgICBjNGcubWFwcy5wb3B1cC5zcGlubmVyLnNob3coKTtcblxuICAgICAgICAgICAgICAgIGlmIChwb3B1cEluZm9zLmFzeW5jID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm9zO1xuICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gaG92ZXJlZC5mZWF0dXJlO1xuICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5sYXllciA9IGhvdmVyZWQubGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgIGlmIChjNGcubWFwcy5ob29rICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGM0Zy5tYXBzLmhvb2sucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoYzRnLm1hcHMuaG9vay5wcm94eV9maWxsUG9wdXAsIG9ialBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwcm94eS5zZXRQb3B1cChvYmpQb3B1cCwgcHJveHkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHByb3h5LmFwaV9pbmZvd2luZG93X3VybCArICcvJyArIHBvcHVwSW5mb3MuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHVwSW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHBvcHVwSW5mb3MuYXN5bmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGRhdGEuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXA6IHBvcHVwSW5mb3MucG9wdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRpbmdfbGluazogcG9wdXBJbmZvcy5yb3V0aW5nX2xpbmtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9ialBvcHVwID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAuZmVhdHVyZSA9IGhvdmVyZWQuZmVhdHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5sYXllciA9IGhvdmVyZWQubGF5ZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBwb3B1cCBob29rIGZvciBwbHVnaW4gc3BlY2lmaWMgcG9wdXAgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjNGcubWFwcy5ob29rICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGM0Zy5tYXBzLmhvb2sucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhjNGcubWFwcy5ob29rLnByb3h5X2ZpbGxQb3B1cCwgb2JqUG9wdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5LnNldFBvcHVwKG9ialBvcHVwLCBwcm94eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGM0Zy5tYXBzLmNvbnN0YW50LmNzcy5BQ1RJVkUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuXG5cblxuICAgICAgfTtcbiAgICB9LCAvLyBlbmQgb2YgXCJnZXRIb3ZlckZ1bmN0aW9uKClcIlxuXG4gICAgY2hhbmdlRmVhdHVyZVN0eWxlczogZnVuY3Rpb24gKCkge1xuICAgICAgLy9UT0RPOiBjaGFuZ2Ugc3R5bGUgb2YgZmVhdHVyZXMgd2hpY2ggYXJlIGhvdmVyZWQgYW5kIGhhdmUgdGhlIG9wdGlvbiB0byBjaGFuZ2Ugc3R5bGUgb24gaG92ZXIgZW5hYmxlZFxuICAgIH1cblxuICB9KTsgLy8gRW5kIG9mIFwiYWRkIG1ldGhvZHMgdG8gVG9vbHRpcFBvcFVwXCJcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgTWFwSG92ZXIgPSB0aGlzLmM0Zy5tYXBzLm1pc2MuTWFwSG92ZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1taXNjLW1hcGhvdmVyLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5taXNjID0gdGhpcy5jNGcubWFwcy5taXNjIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBAVE9ET1xuICAgKiBbU3Bpbm5lciBkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29wdGlvbnMgQ29udHJvbCBvcHRpb25zLlxuICAgKi9cbiAgYzRnLm1hcHMubWlzYy5TcGlubmVyID0gZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICB2YXIgb3B0aW9ucyxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBzcGlubmVyU3BhbjtcblxuICAgIG9wdGlvbnMgPSBvcHRfb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBjbGFzc05hbWU6ICcnLFxuICAgICAgdGFyZ2V0OiAnLicgKyBjc3NDb25zdGFudHMuT0xfVklFV1BPUlRcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGlmIChvcHRpb25zLmNsYXNzTmFtZSkge1xuICAgICAgb3B0aW9ucy5jbGFzc05hbWUgPSAnICcgKyBvcHRpb25zLmNsYXNzTmFtZTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlNQSU5ORVIgKyBvcHRpb25zLmNsYXNzTmFtZSArICcgJyArIGNzc0NvbnN0YW50cy5ISURFO1xuICAgICQob3B0aW9ucy50YXJnZXQpLmFwcGVuZCh0aGlzLmVsZW1lbnQpO1xuXG4gICAgc3Bpbm5lclNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgc3Bpbm5lclNwYW4uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyAnICcgKyBjc3NDb25zdGFudHMuQU5JTUFUSU9OX1NQSU47XG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHNwaW5uZXJTcGFuKTtcblxuICAgIHRoaXMuYWRkaXRpb25hbEFjdGl2YXRpb25Db3VudGVyID0gMDtcblxuICB9O1xuXG4gIC8vIEFkZCBtZXRob2RzIHRvIHNwaW5uZXJcbiAgYzRnLm1hcHMubWlzYy5TcGlubmVyLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLm1pc2MuU3Bpbm5lci5wcm90b3R5cGUsIHtcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICogW3Nob3cgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgkKHRoaXMuZWxlbWVudCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkhJREUpKSB7XG4gICAgICAgICQodGhpcy5lbGVtZW50KS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSElERSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFkZGl0aW9uYWxBY3RpdmF0aW9uQ291bnRlciArPSAxO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFtoaWRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoJCh0aGlzLmVsZW1lbnQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5ISURFKSkge1xuICAgICAgICAvL2NvbnNvbGUud2FybignU3Bpbm5lciBpcyBhbHJlYWR5IGhpZGRlbi4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmFkZGl0aW9uYWxBY3RpdmF0aW9uQ291bnRlciA9PT0gMCkge1xuICAgICAgICAgICQodGhpcy5lbGVtZW50KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSElERSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hZGRpdGlvbmFsQWN0aXZhdGlvbkNvdW50ZXIgLT0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfSxcblxuICB9KTsgLy8gRW5kIG9mIFwiYWRkIG1ldGhvZHMgdG8gc3Bpbm5lclwiXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIFNwaW5uZXIgPSB0aGlzLmM0Zy5tYXBzLm1pc2MuU3Bpbm5lcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLW1pc2Mtc3Bpbm5lci5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMubWlzYyA9IHRoaXMuYzRnLm1hcHMubWlzYyB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQFRPRE9cbiAgICogW1Rvb2x0aXBQb3BVcCBkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29wdGlvbnMgQ29udHJvbCBvcHRpb25zLlxuICAgKi9cbiAgYzRnLm1hcHMubWlzYy5Ub29sdGlwUG9wVXAgPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBzZWxmLFxuICAgICAgICBhZGRDbGFzc05hbWUsXG4gICAgICAgIGNsb3NlQnV0dG9uO1xuXG4gICAgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0X29wdGlvbnMgfHwge307XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAvLyBjbGFzc05hbWU6ICcnXG4gICAgICAvLyBjbG9zZUZ1bmN0aW9uOiBudWxsXG4gICAgICAvLyBtYXA6IG51bGxcbiAgICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgICAgY2xvc2VhYmxlOiBmYWxzZSxcbiAgICAgIG9mZnNldDogWzEsIC0xXSxcbiAgICAgIHBvc2l0aW9uOiBbMCwgMF1cbiAgICB9LCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgLy8gcHJlcGFyZSBhZGRpdGlvbmFsIGNsYXNzZXNcbiAgICBhZGRDbGFzc05hbWUgPSAnJztcbiAgICBpZiAodGhpcy5vcHRpb25zLmNsYXNzTmFtZSkge1xuICAgICAgYWRkQ2xhc3NOYW1lID0gJyAnICsgdGhpcy5vcHRpb25zLmNsYXNzTmFtZTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5ob3Jpem9udGFsKSB7XG4gICAgICBhZGRDbGFzc05hbWUgKz0gJyAnICsgY3NzQ29uc3RhbnRzLkhPUklaT05UQUw7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VhYmxlKSB7XG4gICAgICBhZGRDbGFzc05hbWUgKz0gJyAnICsgY3NzQ29uc3RhbnRzLkNMT1NFQUJMRTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlRPT0xUSVBfUE9QVVAgKyBhZGRDbGFzc05hbWU7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlYWJsZSkge1xuICAgICAgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGNsb3NlQnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLlBPUFVQX0NMT1NFO1xuICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uKTtcblxuICAgICAgJChjbG9zZUJ1dHRvbikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRlbnRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50Q29udGFpbmVyKTtcblxuICAgIHRoaXMub3ZlcmxheSA9IG5ldyBvbC5PdmVybGF5KHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgIGluc2VydEZpcnN0OiBmYWxzZSxcbiAgICAgIG9mZnNldDogdGhpcy5vcHRpb25zLm9mZnNldCxcbiAgICAgIHBvc2l0aW9uaW5nOiAnYm90dG9tLWxlZnQnXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLm1hcCkge1xuICAgICAgdGhpcy5vcHRpb25zLm1hcC5hZGRPdmVybGF5KHRoaXMub3ZlcmxheSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wb3NpdGlvbikge1xuICAgICAgdGhpcy5vdmVybGF5LnNldFBvc2l0aW9uKHRoaXMub3B0aW9ucy5wb3NpdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIC8vIEFkZCBtZXRob2RzIHRvIFRvb2x0aXBQb3BVcFxuICBjNGcubWFwcy5taXNjLlRvb2x0aXBQb3BVcC5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5taXNjLlRvb2x0aXBQb3BVcC5wcm90b3R5cGUsIHtcblxuICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5jbG9zZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5jbG9zZUZ1bmN0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXAucmVtb3ZlT3ZlcmxheSh0aGlzLm92ZXJsYXkpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFtzaG93IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoJCh0aGlzLmVsZW1lbnQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5ISURFKSkge1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkhJREUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFtoaWRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoISQodGhpcy5lbGVtZW50KS5oYXNDbGFzcyhjc3NDb25zdGFudHMuSElERSkpIHtcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5ISURFKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQFRPRE9cbiAgICAgKiBbZ2V0Q29udGVudCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqL1xuICAgIGdldENvbnRlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRDb250YWluZXIuaW5uZXJIVE1MO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFtnZXRQb3NpdGlvbiBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqL1xuICAgIGdldFBvc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vdmVybGF5LmdldFBvc2l0aW9uKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICogW3NldENvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBjb250ZW50ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2V0Q29udGVudDogZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgIHRoaXMuY29udGVudENvbnRhaW5lci5pbm5lckhUTUwgPSBjb250ZW50O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFtzZXRQb3NpdGlvbiBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIGNvb3JkaW5hdGVzICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2V0UG9zaXRpb246IGZ1bmN0aW9uIChjb29yZGluYXRlcykge1xuICAgICAgdGhpcy5vdmVybGF5LnNldFBvc2l0aW9uKGNvb3JkaW5hdGVzKTtcbiAgICB9XG5cbiAgfSk7IC8vIEVuZCBvZiBcImFkZCBtZXRob2RzIHRvIFRvb2x0aXBQb3BVcFwiXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIFRvb2x0aXBQb3BVcCA9IHRoaXMuYzRnLm1hcHMubWlzYy5Ub29sdGlwUG9wVXA7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1taXNjLXRvb2x0aXBwb3B1cC5qcyIsIi8vICduYW1lc3BhY2UnXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmhvb2sgPSB0aGlzLmM0Zy5tYXBzLmhvb2sgfHwge307XG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtDNGdCYXNlbGF5ZXJDb250cm9sbGVyfSBmcm9tIFwiLi9jNGctYmFzZWxheWVyLWNvbnRyb2xsZXJcIjtcbmltcG9ydCB7QzRnTGF5ZXJDb250cm9sbGVyfSBmcm9tIFwiLi9jNGctbGF5ZXItY29udHJvbGxlclwiO1xuaW1wb3J0IHtDNGdMb2NhdGlvblN0eWxlQ29udHJvbGxlcn0gZnJvbSBcIi4vYzRnLWxvY2F0aW9uc3R5bGUtY29udHJvbGxlclwiO1xuaW1wb3J0IHtTcGlubmVyfSBmcm9tIFwiLi9jNGctbWFwcy1taXNjLXNwaW5uZXJcIjtcbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuXG52YXIgYzRnID0gdGhpcy5jNGc7XG5leHBvcnQgY2xhc3MgTWFwUHJveHkge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKXtcbiAgICB2YXIgbWFwRGF0YTtcblxuICAgIHRoaXMub3B0aW9ucyA9IGpRdWVyeS5leHRlbmQoe1xuICAgICAgbWFwQ29udHJvbGxlcjogZmFsc2VcbiAgICB9LCBvcHRpb25zKTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgYzRnLm1hcHMuZWRpdG9yU3R5bGVzID0gYzRnLm1hcHMuZWRpdG9yU3R5bGVzIHx8IHt9O1xuXG4gICAgLy9jNGcubWFwcy5ob29rLnByb3h5X2ZpbGxQb3B1cCA9IFtdO1xuXG4gICAgdGhpcy5ob29rX2Jhc2VsYXllcl9sb2FkZWQgPSBbXTtcbiAgICB0aGlzLmhvb2tfYmFzZWxheWVyX3Zpc2liaWxpdHkgPSBbXTtcbiAgICB0aGlzLmhvb2tfbGF5ZXJfbG9hZGVkID0gW107XG4gICAgdGhpcy5ob29rX2xheWVyX3Zpc2liaWxpdHkgPSBbXTtcbiAgICB0aGlzLmhvb2tfbWFwX2NsaWNrID0gW107XG4gICAgdGhpcy5ob29rX21hcF96b29tID0gW107XG5cbiAgICAvLyBhZGQgZ2xvYmFsIGhvb2sgZm9yIGFjY2Vzc2liaWxpdHkgd2hlbiB0aGVyZSBpcyBubyBwcm94eSByZWZlcmVuY2VcbiAgICBjNGcubWFwcy5ob29rLnByb3h5X2xheWVyX2xvYWRlZCA9IGM0Zy5tYXBzLmhvb2sucHJveHlfbGF5ZXJfbG9hZGVkIHx8IFtdO1xuXG4gICAgdGhpcy5iYXNlbGF5ZXJJZHMgPSBbXTtcbiAgICB0aGlzLmFjdGl2ZUJhc2VsYXllcklkID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGF5ZXJJZHMgPSBbXTtcbiAgICB0aGlzLmFjdGl2ZUxheWVySWRzID0ge307XG5cbiAgICB0aGlzLnJlcXVlc3RGdW5jdGlvbnMgPSB7fTtcbiAgICB0aGlzLnJlcXVlc3QgPSB7fTtcblxuICAgIHRoaXMuYmFzZWxheWVyc19sb2FkZWQgPSBmYWxzZTtcbiAgICB0aGlzLmxheWVyc19sb2FkZWQgPSBmYWxzZTtcblxuICAgIG1hcERhdGEgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhO1xuXG4gICAgdGhpcy5tYXBJZCA9IG1hcERhdGEuaWQ7XG5cbiAgICB0aGlzLmFwaV9iYXNlbGF5ZXJfdXJsID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkuYmFzZWxheWVyICsgJy8nICsgbWFwRGF0YS5wcm9maWxlO1xuICAgIHRoaXMuYXBpX2xheWVyX3VybCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmxheWVyICsgJy8nICsgdGhpcy5tYXBJZDtcbiAgICB0aGlzLmFwaV9sYXllcmNvbnRlbnRfdXJsID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkubGF5ZXJjb250ZW50O1xuICAgIC8vdGhpcy5hcGlfbGF5ZXJjb250ZW50ZGF0YV91cmwgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmFwaS5sYXllcmNvbnRlbnRkYXRhO1xuICAgIHRoaXMuYXBpX2xheWVyY29udGVudGRhdGFfdXJsID0gXCJjb240Z2lzL2xheWVyQ29udGVudERhdGFTZXJ2aWNlXCI7XG4gICAgdGhpcy5hcGlfbG9jc3R5bGVfdXJsID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkubG9jc3R5bGU7XG4gICAgdGhpcy5hcGlfaW5mb3dpbmRvd191cmwgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmFwaS5pbmZvd2luZG93O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cblxuXG4gICAgLy8gdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHZhciBzZWxmLFxuICAgICAgbWFwO1xuXG4gICAgc2VsZiA9IHRoaXM7XG4gICAgbWFwID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwO1xuXG4gICAgdGhpcy5iYXNlbGF5ZXJDb250cm9sbGVyID0gbmV3IEM0Z0Jhc2VsYXllckNvbnRyb2xsZXIodGhpcyk7XG4gICAgdGhpcy5iYXNlbGF5ZXJDb250cm9sbGVyLmxvYWRCYXNlTGF5ZXJzKCk7XG4gICAgdGhpcy5sYXllckNvbnRyb2xsZXIgPSBuZXcgQzRnTGF5ZXJDb250cm9sbGVyKHRoaXMpO1xuICAgIHRoaXMubGF5ZXJDb250cm9sbGVyLmxvYWRMYXllcnMoKTtcbiAgICB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyID0gbmV3IEM0Z0xvY2F0aW9uU3R5bGVDb250cm9sbGVyKHRoaXMpO1xuICAgIHRoaXMuYWRkUG9wVXAoKTtcblxuICAgIC8vVE9ETyBjaGVjayB0aGlzLCBuZWFybHkgdGhlIHNhbWUgYXMgYmVsb3dcbiAgICBtYXAub24oJ2NoYW5nZTp2aWV3JywgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gem9vbS1vYnNlcnZlclxuICAgICAgLy9cbiAgICAgIG1hcC5nZXRWaWV3KCkub24oJ2NoYW5nZTpyZXNvbHV0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGF5ZXJJZCxcbiAgICAgICAgICBsYXllcjtcblxuICAgICAgICAvLyBjaGVjayBsYXllciB6b29tLWJvdW5kc1xuICAgICAgICAvLyBAVE9ETzogVXNlIFwic2VsZi5hY3RpdmVMYXllcklkcyA9IGZhbHNlXCIgP1xuICAgICAgICBmb3IgKGxheWVySWQgaW4gc2VsZi5hY3RpdmVMYXllcklkcykge1xuICAgICAgICAgIGlmIChzZWxmLmFjdGl2ZUxheWVySWRzLmhhc093blByb3BlcnR5KGxheWVySWQpKSB7XG4gICAgICAgICAgICBsYXllciA9IHNlbGYubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1tsYXllcklkXTtcbiAgICAgICAgICAgIGlmIChzZWxmLmNoZWNrTGF5ZXJJc0FjdGl2ZUZvclpvb20obGF5ZXJJZCkpIHtcbiAgICAgICAgICAgICAgaWYgKGxheWVyLmlzSW5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmxheWVyQ29udHJvbGxlci5zaG93TGF5ZXIobGF5ZXJJZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbGYubGF5ZXJDb250cm9sbGVyLmhpZGVMYXllcihsYXllcklkLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBob29rc1xuICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhzZWxmLmhvb2tfbWFwX3pvb20pO1xuXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmNhY2hpbmcgJiYgbWFwLmdldFZpZXcoKS5nZXRab29tKCkpIHtcbiAgICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUoJ3pvb20nLCBtYXAuZ2V0VmlldygpLmdldFpvb20oKSk7XG4gICAgICAgIH1cblxuXG4gICAgICB9KTsgLy8gZW5kIG9mIFwiem9vbS1vYnNlcnZlclwiXG4gICAgfSk7IC8vIGVuZCBvZiBcInpvb20tb2JzZXJ2ZXJcIlxuXG4gICAgLy8gem9vbS1vYnNlcnZlclxuICAgIC8vXG4gICAgbWFwLmdldFZpZXcoKS5vbignY2hhbmdlOnJlc29sdXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbGF5ZXJJZCxcbiAgICAgICAgbGF5ZXI7XG5cblxuICAgICAgLy8gY2hlY2sgbGF5ZXIgem9vbS1ib3VuZHNcbiAgICAgIC8vIEBUT0RPOiBVc2UgXCJzZWxmLmFjdGl2ZUxheWVySWRzID0gZmFsc2VcIiA/XG4gICAgICBmb3IgKGxheWVySWQgaW4gc2VsZi5hY3RpdmVMYXllcklkcykge1xuICAgICAgICBpZiAoc2VsZi5hY3RpdmVMYXllcklkcy5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICAgIGxheWVyID0gc2VsZi5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2xheWVySWRdO1xuICAgICAgICAgIGlmIChzZWxmLmNoZWNrTGF5ZXJJc0FjdGl2ZUZvclpvb20obGF5ZXJJZCkpIHtcbiAgICAgICAgICAgIGlmIChsYXllci5pc0luYWN0aXZlKSB7XG4gICAgICAgICAgICAgIHNlbGYubGF5ZXJDb250cm9sbGVyLnNob3dMYXllcihsYXllcklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5sYXllckNvbnRyb2xsZXIuaGlkZUxheWVyKGxheWVySWQsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBob29rc1xuICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoYzRnLm1hcHMuaG9vay5ob29rX21hcF96b29tLHNlbGYpO1xuXG4gICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jYWNoaW5nICYmIG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpKSB7XG4gICAgICAgICAgdXRpbHMuc3RvcmVWYWx1ZSgnem9vbScsIG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpKTtcbiAgICAgIH1cblxuICAgIH0pOyAvLyBlbmQgb2YgXCJ6b29tLW9ic2VydmVyXCJcblxuICAgIG1hcC5nZXRWaWV3KCkub24oJ2NoYW5nZTpjZW50ZXInLCBmdW5jdGlvbihldnQpe1xuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jYWNoaW5nKSB7XG4gICAgICAgICAgICB2YXIgY29vcmRpbmF0ZSA9IG9sLnByb2oudG9Mb25MYXQobWFwLmdldFZpZXcoKS5nZXRDZW50ZXIoKSk7XG4gICAgICAgICAgICBpZiAoY29vcmRpbmF0ZSkge1xuICAgICAgICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUoJ2xvbicsIGNvb3JkaW5hdGVbMF0pO1xuICAgICAgICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUoJ2xhdCcsIGNvb3JkaW5hdGVbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGM0Zy5tYXBzLmhvb2subWFwX2NlbnRlcl9jaGFuZ2VkID0gYzRnLm1hcHMuaG9vay5tYXBfY2VudGVyX2NoYW5nZWQgfHwgW107XG4gICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKGM0Zy5tYXBzLmhvb2subWFwX2NlbnRlcl9jaGFuZ2VkLCBtYXAuZ2V0VmlldygpLmdldENlbnRlcigpKTtcbiAgICB9KTsgLy8gZW5kIG9mIFwiY2VudGVyLW9ic2VydmVyXCJcblxuICAgIC8vIGNsaWNrLW9ic2VydmVyXG4gICAgLy9cbiAgICBtYXAub24oJ2NsaWNrJywgZnVuY3Rpb24gKGNsaWNrRXZlbnQpIHtcblxuICAgICAgdmFyIGZlYXR1cmUsXG4gICAgICAgIGZGZWF0dXJlcyxcbiAgICAgICAgbGF5ZXIsXG4gICAgICAgIHBvcHVwSW5mb3MsXG4gICAgICAgIGN1cnJlbnRab29tLFxuICAgICAgICBtaW5ab29tLFxuICAgICAgICBuZXdDZW50ZXIsXG4gICAgICAgIGdlb21ldHJ5LFxuICAgICAgICBjb29yZCxcbiAgICAgICAgc2V0UG9wdXAsXG4gICAgICAgIHN0eWxlRnVuYyxcbiAgICAgICAgc3R5bGVDbHVzdGVyLFxuICAgICAgICBvYmpQb3B1cDtcblxuICAgICAgLy9Ub0RvIGNoZWNrIG5ldyBmdW5jdGlvbiBjYWxsIHdpdGggb2wgNC4zXG4gICAgICBmZWF0dXJlID0gbWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChjbGlja0V2ZW50LnBpeGVsLFxuICAgICAgICBmdW5jdGlvbiAoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICByZXR1cm4gZmVhdHVyZTtcbiAgICAgICAgfSk7XG5cbiAgICAgIGxheWVyID0gbWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChjbGlja0V2ZW50LnBpeGVsLFxuICAgICAgICBmdW5jdGlvbiAoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICByZXR1cm4gbGF5ZXI7XG4gICAgICAgIH0pO1xuXG4gICAgICBpZihsYXllciAmJiBsYXllci5nZXRTdHlsZSgpKSB7XG4gICAgICAgIHN0eWxlRnVuYyA9IGxheWVyLmdldFN0eWxlKCk7XG4gICAgICAgIGlmKHR5cGVvZiBzdHlsZUZ1bmMgPT09IFwiZnVuY3Rpb25cIiAmJiBzdHlsZUZ1bmMoZmVhdHVyZSwgY3VycmVudFpvb20pICYmIHN0eWxlRnVuYyhmZWF0dXJlLCBjdXJyZW50Wm9vbSlbJzAnXSl7XG4gICAgICAgICAgc3R5bGVDbHVzdGVyID0gc3R5bGVGdW5jKGZlYXR1cmUsIGN1cnJlbnRab29tKVsnMCddLmNsb25lKCk7XG4gICAgICAgICAgaWYgKHN0eWxlQ2x1c3RlciAmJiBzdHlsZUNsdXN0ZXIuZ2V0SW1hZ2UoKSkge1xuICAgICAgICAgICAgICBzdHlsZUNsdXN0ZXIuZ2V0SW1hZ2UoKS5zZXRTY2FsZShzdHlsZUNsdXN0ZXIuZ2V0SW1hZ2UoKS5nZXRTY2FsZSgpKjAuNyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZGZWF0dXJlcyA9IGZlYXR1cmUgPyBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKSA6IGZhbHNlO1xuICAgICAgaWYgKCEoZkZlYXR1cmVzICYmIGZGZWF0dXJlcy5sZW5ndGggPT09IDEpKSB7XG4gICAgICAgIC8vIGNsdXN0ZXIgbXVsdGlwbGUgUE9JXG4gICAgICAgIGlmIChmRmVhdHVyZXMpIHtcbiAgICAgICAgICBpZihmRmVhdHVyZXNbMF0uZ2V0KCdjbHVzdGVyX3BvcHVwJykgPT0gMSlcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihjbGlja0V2ZW50LmNvb3JkaW5hdGUpO1xuICAgICAgICAgICAgY3VycmVudFpvb20gPSBtYXAuZ2V0VmlldygpLmdldFpvb20oKTtcbiAgICAgICAgICAgIG1pblpvb20gPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmNsdXN0ZXJfYWxsID8gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jbHVzdGVyX3pvb20gOiBmRmVhdHVyZXNbJzAnXS5nZXQoJ2NsdXN0ZXJfem9vbScpO1xuICAgICAgICAgICAgaWYoY3VycmVudFpvb20gPj0gbWluWm9vbSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc2V0UG9wdXAgPVtdO1xuICAgICAgICAgICAgICBzZXRQb3B1cC5jb250ZW50ID0gJyc7XG4gICAgICAgICAgICAgIHNldFBvcHVwLmFzeW5jID0gZmFsc2U7XG4gICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBmRmVhdHVyZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIHNldFBvcHVwLmNvbnRlbnQgPSBzZXRQb3B1cC5jb250ZW50LmNvbmNhdChmRmVhdHVyZXNbaV0uZ2V0KCdwb3B1cCcpLmNvbnRlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZlYXR1cmUgPSBmRmVhdHVyZXNbMF0uY2xvbmUoKTtcbiAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ3BvcHVwJyxzZXRQb3B1cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Wm9vbShjdXJyZW50Wm9vbSsxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcblxuXG4gICAgICAgICAgICBmZWF0dXJlLnNldFN0eWxlKG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcbiAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgcmFkaXVzOiAwXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBmZWF0dXJlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIGFuaW1hdGlvblxuICAgICAgICAgICAgbWFwLmdldFZpZXcoKS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgc3RhcnQ6ICtuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogMTAwMCxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjogbWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uKCksXG4gICAgICAgICAgICAgIGNlbnRlcjogWzAsIDBdXG4gICAgICAgICAgICAgIC8vcm90YXRpb246IE1hdGguUElcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjdXJyZW50Wm9vbSA9IG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpO1xuICAgICAgICAgICAgbmV3Q2VudGVyID0gbWFwLmdldENvb3JkaW5hdGVGcm9tUGl4ZWwoY2xpY2tFdmVudC5waXhlbCk7XG4gICAgICAgICAgICBtaW5ab29tID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jbHVzdGVyX2FsbCA/IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuY2x1c3Rlcl96b29tIDogZkZlYXR1cmVzWycwJ10uZ2V0KCdjbHVzdGVyX3pvb20nKTtcblxuICAgICAgICAgICAgLy9Ub0RvIHJlbW92ZSB3aXRoIHN0cnVjdHVyZSBlbGVtZW50IHBhcmFtXG4gICAgICAgICAgICBpZiAoY3VycmVudFpvb20gPj0gbWluWm9vbSkge1xuXG4gICAgICAgICAgICAgIC8vaWYgKGN1cnJlbnRab29tID49IG1hcC5nZXRWaWV3KCkuZ2V0TWF4Wm9vbSgpKSB7XG4gICAgICAgICAgICAgIC8vb3BlbiB0aGUgY2x1c3RlciBhZnRlciB6b29taW5nXG4gICAgICAgICAgICAgIHZhciBwaXggPSBtYXAuZ2V0VmlldygpLmdldFJlc29sdXRpb24oKTtcbiAgICAgICAgICAgICAgdmFyIG1heCA9IGZGZWF0dXJlcy5sZW5ndGg7XG4gICAgICAgICAgICAgIHZhciByID0gcGl4ICogMTIgKiAoMC41ICsgbWF4IC8gNCk7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IDIgKiBNYXRoLlBJICogaSAvIG1heDtcbiAgICAgICAgICAgICAgICBpZiAobWF4ID09IDIgfHwgbWF4ID09IDQpIGEgKz0gTWF0aC5QSSAvIDQ7XG4gICAgICAgICAgICAgICAgdmFyIHAgPSBbbmV3Q2VudGVyWzBdICsgciAqIE1hdGguc2luKGEpLCBuZXdDZW50ZXJbMV0gKyByICogTWF0aC5jb3MoYSldO1xuICAgICAgICAgICAgICAgIHZhciBjb29yZGluYXRlID0gb2wucHJvai50b0xvbkxhdChwKTtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IFtdO1xuICAgICAgICAgICAgICAgIGYucHVzaChmRmVhdHVyZXNbaV0pO1xuICAgICAgICAgICAgICAgIHZhciBjZiA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBuZXcgb2wuZ2VvbS5Qb2ludChwKSxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBmLFxuICAgICAgICAgICAgICAgICAgc3R5bGU6IGZGZWF0dXJlc1tpXS5nZXQoJ3N0eWxlJylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlKGNmKTtcbiAgICAgICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihuZXdDZW50ZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdXJyZW50Wm9vbSArPSAxO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKG5ld0NlbnRlcik7XG4gICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldFpvb20oY3VycmVudFpvb20pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgoZkZlYXR1cmVzICYmIGZGZWF0dXJlcy5sZW5ndGggPT09IDEpKSB7XG4gICAgICAgIGZlYXR1cmUgPSBmRmVhdHVyZXNbMF07XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5jb250cm9scy5lZGl0b3IgJiYgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuY29udHJvbHMuZWRpdG9yLmlzT3BlbigpKSB7XG4gICAgICAgIC8vIGRvIG5vdCBzaG93IHBvcHVwIHdoZW4gZWRpdG9yIGlzIG9wZW5cbiAgICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ3Byb2plY3RJZCcpKSB7XG4gICAgICAgICAgICAvLyBidXQgY2FsbCBjbGljayBob29rc1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHNlbGYuaG9va19tYXBfY2xpY2ssIGNsaWNrRXZlbnQpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwb3B1cEluZm9zID0ge307XG4gICAgICBpZiAoZmVhdHVyZSAmJiBmZWF0dXJlLmdldCgncG9wdXAnKSkge1xuICAgICAgICAvLyBzaW5nbGUgUE9JXG4gICAgICAgIHBvcHVwSW5mb3MgPSBmZWF0dXJlLmdldCgncG9wdXAnKTtcbiAgICAgIH0gZWxzZSBpZiAobGF5ZXIgJiYgbGF5ZXIucG9wdXApIHtcbiAgICAgICAgcG9wdXBJbmZvcyA9IGxheWVyLnBvcHVwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmVhdHVyZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ2xvY19saW5rdXJsJykpIHtcbiAgICAgICAgaWYoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5saW5rX25ld3dpbmRvdz09PScxJykge1xuICAgICAgICAgIHdpbmRvdy5vcGVuKGZlYXR1cmUuZ2V0KCdsb2NfbGlua3VybCcpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgIHdpbmRvdy5vcGVuKGZlYXR1cmUuZ2V0KCdsb2NfbGlua3VybCcpLFwiX3NlbGZcIik7XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ3pvb21fb25jbGljaycpICYmIGZlYXR1cmUuZ2V0KCd6b29tX29uY2xpY2snKSAhPSAwKXtcbiAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldFpvb20oZmVhdHVyZS5nZXQoJ3pvb21fb25jbGljaycpKTtcbiAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihsYXllciAmJiBsYXllci56b29tX29uY2xpY2sgJiYgbGF5ZXIuem9vbV9vbmNsaWNrICE9IDApe1xuICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Wm9vbShsYXllci56b29tX29uY2xpY2spO1xuICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKGNsaWNrRXZlbnQuY29vcmRpbmF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmVhdHVyZSkge1xuICAgICAgICAgIGdlb21ldHJ5ID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpO1xuICAgICAgICAgIGlmIChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9pbnQpIHtcbiAgICAgICAgICAgIGNvb3JkID0gZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29vcmQgPSBjbGlja0V2ZW50LmNvb3JkaW5hdGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYzRnLm1hcHMucG9wdXAucG9wdXAuc2V0UG9zaXRpb24oY29vcmQpO1xuICAgICAgICAgIGlmIChwb3B1cEluZm9zLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIGM0Zy5tYXBzLnBvcHVwLiRjb250ZW50Lmh0bWwoJycpO1xuICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5MT0FESU5HKTtcbiAgICAgICAgICAgIGM0Zy5tYXBzLnBvcHVwLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgICAgICBpZiAocG9wdXBJbmZvcy5hc3luYyA9PT0gZmFsc2UgfHwgcG9wdXBJbmZvcy5hc3luYyA9PSAnMCcpIHtcbiAgICAgICAgICAgICAgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm9zO1xuICAgICAgICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gZmVhdHVyZTtcbiAgICAgICAgICAgICAgb2JqUG9wdXAubGF5ZXIgPSBsYXllcjtcbiAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgcG9wdXAgaG9vayBmb3IgcGx1Z2luIHNwZWNpZmljIHBvcHVwIGNvbnRlbnRcbiAgICAgICAgICAgICAgaWYgKGM0Zy5tYXBzLmhvb2sgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgYzRnLm1hcHMuaG9vay5wcm94eV9maWxsUG9wdXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoYzRnLm1hcHMuaG9vay5wcm94eV9maWxsUG9wdXAsIG9ialBvcHVwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZWxmLnNldFBvcHVwKG9ialBvcHVwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBzZWxmLmFwaV9pbmZvd2luZG93X3VybCArICcvJyArIHBvcHVwSW5mb3MuY29udGVudFxuICAgICAgICAgICAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9wdXBJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgYXN5bmM6IHBvcHVwSW5mb3MuYXN5bmMsXG4gICAgICAgICAgICAgICAgICBjb250ZW50OiBkYXRhLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICBwb3B1cDogcG9wdXBJbmZvcy5wb3B1cCxcbiAgICAgICAgICAgICAgICAgIHJvdXRpbmdfbGluazogcG9wdXBJbmZvcy5yb3V0aW5nX2xpbmtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mbztcbiAgICAgICAgICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gZmVhdHVyZTtcbiAgICAgICAgICAgICAgICBvYmpQb3B1cC5sYXllciA9IGxheWVyO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgcG9wdXAgaG9vayBmb3IgcGx1Z2luIHNwZWNpZmljIHBvcHVwIGNvbnRlbnRcbiAgICAgICAgICAgICAgICBpZiAoYzRnLm1hcHMuaG9vayAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjNGcubWFwcy5ob29rLnByb3h5X2ZpbGxQb3B1cCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKGM0Zy5tYXBzLmhvb2sucHJveHlfZmlsbFBvcHVwLCBvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZi5zZXRQb3B1cChvYmpQb3B1cCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjNGcubWFwcy5wb3B1cC4kcG9wdXAucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaG9va3NcbiAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoYzRnLm1hcHMuaG9vay5ob29rX21hcF9jbGljaywgY2xpY2tFdmVudCk7XG4gICAgICB9XG4gICAgfSk7IC8vIGVuZCBvZiBcImNsaWNrLW9ic2VydmVyXCJcblxuXG4gICAgLy8gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldExheWVycygpLm9uKCdjaGFuZ2U6bGVuZ3RoJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyAgICAgO1xuICAgIC8vIH0pO1xuXG5cbiAgfSAvLyBlbmQgb2YgXCJpbml0aWFsXCIqXG4gIGNvbWJpbmUocHJveHkpe1xuICAgIHZhciBmdW5jID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHByb3h5LmNvbWJpbmVMYXllcnMocHJveHkpO1xuICAgICAgcHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC51bigncG9zdHJlbmRlcicsZnVuYyk7XG4gICAgfTtcbiAgICBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLm9uKCdwb3N0cmVuZGVyJywgZnVuYylcbiAgfVxuXG4gIHNldFBvcHVwKHBvcHVwQ29uZmlnKSB7XG4gICAgdmFyIGZlYXR1cmUsXG4gICAgICBsYXllcixcbiAgICAgIHBvcHVwQ29udGVudCxcbiAgICAgIHJvdXRlcixcbiAgICAgIHJvdXRlQnV0dG9uV3JhcHBlcixcbiAgICAgIHJvdXRlRnJvbUJ1dHRvbixcbiAgICAgIHJvdXRlRnJvbUJ1dHRvblNwYW4sXG4gICAgICByb3V0ZVRvQnV0dG9uLFxuICAgICAgcm91dGVUb0J1dHRvblNwYW4sXG4gICAgICByb3V0aW5nSGFuZGxlcixcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgZmVhdHVyZSA9IHBvcHVwQ29uZmlnLmZlYXR1cmU7XG4gICAgbGF5ZXIgPSBwb3B1cENvbmZpZy5sYXllcjtcblxuICAgIHBvcHVwQ29udGVudCA9IHV0aWxzLnJlcGxhY2VBbGxQbGFjZWhvbGRlcnMocG9wdXBDb25maWcucG9wdXAuY29udGVudCwgZmVhdHVyZSwgbGF5ZXIpO1xuICAgIC8vIEBUT0RPOiBjaGVjayBmb3Igcm91dGUtb3B0aW9uICYgZGlzcGxheSBcInJvdXRlLXRvXCJcbiAgICAvLyBOT1RFOiBkb2VzIG5vdCB3b3JrIGFzeW5jIHRoaXMgd2F5XG4gICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnJvdXRlciAmJiBwb3B1cENvbmZpZy5wb3B1cC5yb3V0aW5nX2xpbmspIHtcbiAgICAgIHJvdXRlciA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnJvdXRlcjtcblxuICAgICAgcm91dGluZ0hhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmFjdGl2ZVBvcnRzaWRlICE9PSByb3V0ZXIpIHtcbiAgICAgICAgICByb3V0ZXIub3BlbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcm91dGVyLnNldElucHV0KFxuICAgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLlBPUFVQX1JPVVRFX0ZST00pLFxuICAgICAgICAgIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpXG4gICAgICAgICk7XG4gICAgICB9OyAvLyBlbmQgb2YgXCJyb3V0aW5nSGFuZGxlcigpXCJcblxuICAgICAgcm91dGVCdXR0b25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICByb3V0ZUJ1dHRvbldyYXBwZXIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlBPUFVQX1JPVVRFX1dSQVBQRVI7XG5cbiAgICAgIHJvdXRlRnJvbUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgcm91dGVGcm9tQnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLlBPUFVQX1JPVVRFX0ZST007XG4gICAgICBqUXVlcnkocm91dGVGcm9tQnV0dG9uKS5jbGljayhyb3V0aW5nSGFuZGxlcik7XG4gICAgICByb3V0ZUJ1dHRvbldyYXBwZXIuYXBwZW5kQ2hpbGQocm91dGVGcm9tQnV0dG9uKTtcblxuICAgICAgcm91dGVGcm9tQnV0dG9uU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIHJvdXRlRnJvbUJ1dHRvblNwYW4uaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5QT1BVUF9ST1VURV9GUk9NO1xuICAgICAgcm91dGVGcm9tQnV0dG9uLmFwcGVuZENoaWxkKHJvdXRlRnJvbUJ1dHRvblNwYW4pO1xuXG4gICAgICByb3V0ZVRvQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICByb3V0ZVRvQnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLlBPUFVQX1JPVVRFX1RPO1xuICAgICAgalF1ZXJ5KHJvdXRlVG9CdXR0b24pLmNsaWNrKHJvdXRpbmdIYW5kbGVyKTtcbiAgICAgIHJvdXRlQnV0dG9uV3JhcHBlci5hcHBlbmRDaGlsZChyb3V0ZVRvQnV0dG9uKTtcblxuICAgICAgcm91dGVUb0J1dHRvblNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICByb3V0ZVRvQnV0dG9uU3Bhbi5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLlBPUFVQX1JPVVRFX1RPO1xuICAgICAgcm91dGVUb0J1dHRvbi5hcHBlbmRDaGlsZChyb3V0ZVRvQnV0dG9uU3Bhbik7XG4gICAgfVxuXG4gICAgaWYgKHBvcHVwQ29udGVudC50cmltKCkgfHwgcm91dGVyKSB7XG4gICAgICBjNGcubWFwcy5wb3B1cC4kY29udGVudC5odG1sKHBvcHVwQ29udGVudCk7XG4gICAgICBpZiAocm91dGVyKSB7XG4gICAgICAgIGM0Zy5tYXBzLnBvcHVwLiRjb250ZW50LmFwcGVuZChyb3V0ZUJ1dHRvbldyYXBwZXIpO1xuICAgICAgfVxuICAgICAgaWYoZmVhdHVyZS5nZXRHZW9tZXRyeSgpICYmIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uUG9pbnQpe1xuICAgICAgICBjNGcubWFwcy5wb3B1cC5wb3B1cC5zZXRQb3NpdGlvbihmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhpZGUgcG9wdXAgaWYgdGhlcmUgaXMgbm8gdmFsaWQgY29udGVudCBsZWZ0XG4gICAgICBjNGcubWFwcy5wb3B1cC4kcG9wdXAucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgfVxuXG4gICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5MT0FESU5HKTtcbiAgICBjNGcubWFwcy5wb3B1cC5zcGlubmVyLmhpZGUoKTtcbiAgfSAvLyBlbmQgb2YgXCJzZXRQb3B1cCgpXCJcblxuXG4gIGFkZFBvcFVwKCkge1xuXG4gICAgbGV0IHBvcFVwRWxlbWVudCxcbiAgICAgIHBvcFVwQ2xvc2VFbGVtZW50LFxuICAgICAgcG9wVXBDb250ZW50LFxuICAgICAgcG9wdXA7XG5cblxuICAgIHBvcFVwRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHBvcFVwRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2M0Z19wb3B1cF8nICsgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5tYXBJZCk7XG4gICAgcG9wVXBFbGVtZW50LmNsYXNzTmFtZSA9ICdjNGctcG9wdXAtd3JhcHBlcic7XG5cbiAgICBwb3BVcENsb3NlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIHBvcFVwQ2xvc2VFbGVtZW50LmNsYXNzTmFtZSA9IFwiYzRnLXBvcHVwLWNsb3NlIGM0Zy1pY29uXCI7XG5cbiAgICBwb3BVcENvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwb3BVcENvbnRlbnQuY2xhc3NOYW1lID0gXCJjNGctcG9wdXAtY29udGVudFwiO1xuXG4gICAgcG9wVXBFbGVtZW50LmFwcGVuZENoaWxkKHBvcFVwQ2xvc2VFbGVtZW50KTtcbiAgICBwb3BVcEVsZW1lbnQuYXBwZW5kQ2hpbGQocG9wVXBDb250ZW50KTtcblxuICAgIGpRdWVyeShwb3BVcENsb3NlRWxlbWVudCkuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgIH0pO1xuXG4gICAgcG9wdXAgPSBuZXcgb2wuT3ZlcmxheSh7XG4gICAgICBlbGVtZW50OiBwb3BVcEVsZW1lbnQsXG4gICAgICBwb3NpdGlvbmluZzogJ2JvdHRvbS1sZWZ0JyxcbiAgICAgIG9mZnNldDogWy01MCwgMF0vKixcbiAgICAgICAgYXV0b1BhbjogdHJ1ZSxcbiAgICAgICAgYXV0b1BhbkFuaW1hdGlvbjoge1xuICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTBcbiAgICAgICAgfSxcbiAgICAgICAgYXV0b1Bhbk1hcmdpbjogMjAqL1xuICAgIH0pO1xuXG4gICAgYzRnLm1hcHMucG9wdXAgPSB7fTtcbiAgICBjNGcubWFwcy5wb3B1cC5wb3B1cCA9IHBvcHVwO1xuICAgIC8vIGF0dGFjaCBhIHNwaW5uZXIgdG8gdGhlIHBvcHVwXG4gICAgYzRnLm1hcHMucG9wdXAuc3Bpbm5lciA9IG5ldyBTcGlubmVyKHt0YXJnZXQ6IHBvcFVwRWxlbWVudH0pO1xuXG4gICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZE92ZXJsYXkocG9wdXApO1xuXG4gICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwID0galF1ZXJ5KGM0Zy5tYXBzLnBvcHVwLnBvcHVwLmdldEVsZW1lbnQoKSk7XG4gICAgYzRnLm1hcHMucG9wdXAuJGNvbnRlbnQgPSBqUXVlcnkoJy5jNGctcG9wdXAtY29udGVudCcsIGM0Zy5tYXBzLnBvcHVwLiRwb3B1cCk7XG5cbiAgfSAvLyBlbmQgb2YgXCJhZGRQb3BVcCgpXCJcblxuXG4gIC8qKlxuICAgKiBAVE9ETzogW2NoZWNrTG9jYXRpb25TdHlsZXMgZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEBwYXJhbSAgIHtbdHlwZV19ICBvcHRfb3B0aW9ucyAgW2Rlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNoZWNrTG9jYXRpb25TdHlsZXMob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBvcHRpb25zLFxuICAgICAgbmVlZGVkTGF5ZXJTdHlsZXMsXG4gICAgICBnZXRMYXllclN0eWxlcyxcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKG9wdF9vcHRpb25zICYmIHR5cGVvZiBvcHRfb3B0aW9ucyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgb3B0aW9ucyA9IG9wdF9vcHRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXM9IHRoaXMubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzIHx8IHt9O1xuXG4gICAgbmVlZGVkTGF5ZXJTdHlsZXMgPSBbXTtcbiAgICBnZXRMYXllclN0eWxlcyA9IGZ1bmN0aW9uIChsYXllcnMpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBpbmRleDtcblxuICAgICAgLy8gVG9EbzogUmVrdXJzaW9uIGludGVncmllcmVuICh0ZXN0IG1pdCBmb3J1bSlcbiAgICAgIGZvciAoaW5kZXggaW4gbGF5ZXJzKSB7XG4gICAgICAgIGlmIChsYXllcnMuaGFzT3duUHJvcGVydHkoaW5kZXgpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGxheWVyc1tpbmRleF07XG5cbiAgICAgICAgICBpZiAoZWxlbWVudC5jb250ZW50KSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudC5jb250ZW50Lmxlbmd0aDsgaSArPSAxKSB7XG5cbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY29udGVudFtpXSkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY29udGVudFtpXS5sb2NhdGlvblN0eWxlXG4gICAgICAgICAgICAgICAgICAmJiBlbGVtZW50LmNvbnRlbnRbaV0ubG9jYXRpb25TdHlsZSAhPT0gXCIwXCJcbiAgICAgICAgICAgICAgICAgICYmIG5lZWRlZExheWVyU3R5bGVzLmluZGV4T2YoZWxlbWVudC5jb250ZW50W2ldLmxvY2F0aW9uU3R5bGUpID09PSAtMVxuICAgICAgICAgICAgICAgICAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAhc2VsZi5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZWxlbWVudC5jb250ZW50W2ldLmxvY2F0aW9uU3R5bGVdXG4gICAgICAgICAgICAgICAgICAgIHx8IHNlbGYubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnQuY29udGVudFtpXS5sb2NhdGlvblN0eWxlXS5zdHlsZSA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBuZWVkZWRMYXllclN0eWxlcy5wdXNoKGVsZW1lbnQuY29udGVudFtpXS5sb2NhdGlvblN0eWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZ2V0TGF5ZXJTdHlsZXModGhpcy5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzKTtcblxuICAgIGlmIChuZWVkZWRMYXllclN0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhuZWVkZWRMYXllclN0eWxlcywgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvcHRpb25zLmRvbmUgJiYgdHlwZW9mIG9wdGlvbnMuZG9uZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIG9wdGlvbnMuZG9uZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBlbmQgb2YgXCJjaGVja0xvY2F0aW9uU3R5bGVzKClcIlxuXG4gIGNvbWJpbmVMYXllcnMocHJveHkpe1xuXG4gICAgdmFyIGksXG4gICAgICBqLFxuICAgICAgayxcbiAgICAgIGxheWVySWQsXG4gICAgICBsYXllcnMsXG4gICAgICBjb250ZW50RGF0YUxheWVyLFxuICAgICAgY29udGVudERhdGEsXG4gICAgICBsYXllcixcbiAgICAgIGxheWVyR3JvdXBzID1bXSxcbiAgICAgIHNvdXJjZSxcbiAgICAgIHN0eWxlLFxuICAgICAgZmVhdHVyZXM9W10sXG4gICAgICBzdHlsZXM9W10sXG4gICAgICBvbmVGZWF0dXJlLFxuICAgICAgZmVhdHVyZSxcbiAgICAgIHZlY3RvclNvdXJjZSxcbiAgICAgIGNsdXN0ZXJTb3VyY2UsXG4gICAgICB2ZWN0b3JMYXllcjtcblxuXG4gICAgaWYocHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuY2x1c3Rlcl9hbGwgPT09ICcxJyl7XG4gICAgICBjb250ZW50RGF0YSA9IHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhO1xuICAgICAgZm9yKCBpIGluIHByb3h5LmFjdGl2ZUxheWVySWRzKSB7Ly9sb29wIHRvIGdldCBhbGwgbGF5ZXJzXG4gICAgICAgIGxheWVycyA9IGM0Zy5tYXBzLmxheWVyc1tpXTtcblxuICAgICAgICBpZihsYXllcnMudHlwZSA9PT0gXCJncHhcIil7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGxheWVycyAmJiBsYXllcnMudmVjdG9yTGF5ZXIgKXtcbiAgICAgICAgICBpZihsYXllcnMudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkgJiYgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0gJiYgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0uZ2V0U291cmNlKCkgJiYgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0uZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKS5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlTGF5ZXIobGF5ZXJzLnZlY3RvckxheWVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZW50RGF0YUxheWVyID0gbGF5ZXJzLmNvbnRlbnQ7XG4gICAgICAgICAgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmNvbnRlbnQgPSBjb250ZW50RGF0YUxheWVyO1xuICAgICAgICAgIGxheWVyR3JvdXBzLnB1c2gobGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpKTtcblxuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvcihrID0wOyBrPGxheWVyR3JvdXBzLmxlbmd0aDtrKyspey8vbG9vcCB0byBleHRyYWN0IGZlYXR1cmVzIGZyb20gbGF5ZXJzXG4gICAgICAgIGlmKGxheWVyR3JvdXBzW2tdLmdldEFycmF5KCkubGVuZ3RoPjApe1xuICAgICAgICAgIGxheWVyID0gbGF5ZXJHcm91cHNba10uZ2V0QXJyYXkoKTtcbiAgICAgICAgICBzb3VyY2UgPSBsYXllcltcIjBcIl0uZ2V0U291cmNlKCk7XG4gICAgICAgICAgc3R5bGUgPSBsYXllcltcIjBcIl0uZ2V0U3R5bGUoKTtcblxuICAgICAgICAgIG9uZUZlYXR1cmUgPSB0cnVlO1xuICAgICAgICAgIGZlYXR1cmUgPSBzb3VyY2UuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgICBmb3IoaiA9IDA7IGogPCBmZWF0dXJlLmxlbmd0aDsgaiArKyl7Ly9sb29wIG92ZXIgYWxsIGZlYXR1cmVzIGZyb20gYSBzb3VyY2VcbiAgICAgICAgICAgIGlmKGZlYXR1cmVbal0uZ2V0KFwiZmVhdHVyZXNcIikpe1xuICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBmZWF0dXJlW2pdLmdldChcImZlYXR1cmVzXCIpLmxlbmd0aDsgaSsrKXsvL2xvb3AgZm9yIGNsdXN0ZXJlZCBmZWF0dXJlc1xuICAgICAgICAgICAgICAgIGlmKGxheWVyR3JvdXBzW2tdLmNvbnRlbnRbal0pe1xuICAgICAgICAgICAgICAgICAgc3R5bGUgPSB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsYXllckdyb3Vwc1trXS5jb250ZW50W2pdLmxvY2F0aW9uU3R5bGVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGxheWVyR3JvdXBzW2tdLmNvbnRlbnRbMF0pe1xuICAgICAgICAgICAgICAgICAgc3R5bGUgPSB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsYXllckdyb3Vwc1trXS5jb250ZW50WzBdLmxvY2F0aW9uU3R5bGVdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZlYXR1cmVbal0uZ2V0KFwiZmVhdHVyZXNcIilbaV0uc2V0U3R5bGUoc3R5bGUuc3R5bGUpO1xuICAgICAgICAgICAgICAgIGlmKCFmZWF0dXJlW2pdLmdldChcImZlYXR1cmVzXCIpW2ldLmdldCgncG9wdXAnKSl7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlW2pdLmdldChcImZlYXR1cmVzXCIpW2ldLnNldCgncG9wdXAnLGxheWVyWycwJ10ucG9wdXApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goZmVhdHVyZVtqXS5nZXQoXCJmZWF0dXJlc1wiKSk7XG5cbiAgICAgICAgICAgICAgb25lRmVhdHVyZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKG9uZUZlYXR1cmUpey8vc2luZ2xlIG5vdCBjbHVzdGVyZWQgZmVhdHVyZVxuICAgICAgICAgICAgaWYoZmVhdHVyZS5sZW5ndGggPj0gMSl7XG4gICAgICAgICAgICAgIGlmKCFmZWF0dXJlWycwJ10uZ2V0KCdwb3B1cCcpKXtcbiAgICAgICAgICAgICAgICBmZWF0dXJlWycwJ10uc2V0KCdwb3B1cCcsbGF5ZXIucG9wdXApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICBwcm9qZWN0aW9uOiAnRVBTRzozODU3J1xuXG4gICAgICB9KTtcblxuICAgICAgZm9yKGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpICsrKXtcbiAgICAgICAgdmVjdG9yU291cmNlLmFkZEZlYXR1cmVzKGZlYXR1cmVzW2ldKTtcbiAgICAgIH1cblxuICAgICAgY2x1c3RlclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuQ2x1c3Rlcih7XG4gICAgICAgIGRpc3RhbmNlOiA0MCxcbiAgICAgICAgLy90aHJlc2hvbGQ6IDIsIC8vbWluaW11bSBlbGVtZW50IGNvdW50XG4gICAgICAgIHNvdXJjZTogdmVjdG9yU291cmNlXG4gICAgICB9KTtcbiAgICAgIHZhciBzdHlsZUZvckNsdXN0ZXIgPSBmdW5jdGlvbihmZWF0dXJlLCByZXNvbHV0aW9uKXtcbiAgICAgICAgaWYoZmVhdHVyZSAmJiBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKSAmJiBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKVsnMCddLmdldFN0eWxlKCkpe1xuICAgICAgICAgIHN0eWxlID0gZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbJzAnXS5nZXRTdHlsZSgpKGZlYXR1cmUpO1xuICAgICAgICAgIGlmIChmZWF0dXJlICE9PSB1bmRlZmluZWQgJiYgZmVhdHVyZSAhPT0gbnVsbCAmJiBmZWF0dXJlLnNlbGYgIT09IHdpbmRvdykge1xuICAgICAgICAgICAgdmFyIGZGZWF0dXJlcyA9IGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpO1xuICAgICAgICAgICAgdmFyIHNpemUgPSBmRmVhdHVyZXMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNpemUgPiAxKSB7XG4gICAgICAgICAgICAgIGlmICghc3R5bGUpIHtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IFtdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIGJ1YmJsZS1vZmZzZXRcbiAgICAgICAgICAgICAgdmFyIGljb25PZmZzZXQgPSBbMCwgMF07XG4gICAgICAgICAgICAgIGlmIChzdHlsZVswXSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IHBhcnNlSW50KHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzKCksIDEwKTtcbiAgICAgICAgICAgICAgICAgIGlmIChyYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbk9mZnNldCA9IFswLCByYWRpdXNdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0QW5jaG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSBzdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvcigpIHx8IFswLCAwXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgZmlsbGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KCc0OTc1QTgnLHtcbiAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgdmFsdWU6IDcwXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5jbHVzdGVyX2ZpbGxjb2xvcikge1xuICAgICAgICAgICAgICAgIGZpbGxjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShjb250ZW50RGF0YS5jbHVzdGVyX2ZpbGxjb2xvcix7XG4gICAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogNzBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgZm9udGNvbG9yID0gY29udGVudERhdGEuY2x1c3Rlcl9mb250Y29sb3IgPyAnIycgKyBjb250ZW50RGF0YS5jbHVzdGVyX2ZvbnRjb2xvciA6ICcjRkZGRkZGJztcblxuICAgICAgICAgICAgICBzdHlsZS5wdXNoKFxuICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgb2wuc3R5bGUuVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IFwi4pePXCIsXG4gICAgICAgICAgICAgICAgICAgIGZvbnQ6IFwiNjBweCBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IC0xICogaWNvbk9mZnNldFswXSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEgKiBpY29uT2Zmc2V0WzFdLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZpbGxjb2xvclxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBzdHlsZS5wdXNoKFxuICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgb2wuc3R5bGUuVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHNpemUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogLTEgKiBpY29uT2Zmc2V0WzBdLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtMSAqIGljb25PZmZzZXRbMV0gKyAzLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZvbnRjb2xvclxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICBpZihmZWF0dXJlICYmIGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpICYmIGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWycwJ10uZ2V0U3R5bGUoKSl7XG4gICAgICAgICAgICByZXR1cm4gZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbJzAnXS5nZXRTdHlsZSgpKGZlYXR1cmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH07XG5cbiAgICAgIC8vdmVjdG9yTGF5ZXIgPSBzZWxmLmdldFZlY3RvckxheWVyKGNsdXN0ZXJTb3VyY2UsIHN0eWxlRm9yQ2x1c3Rlcik7XG5cbiAgICAgIHZlY3RvckxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgICAgIG5hbWU6ICdDbHVzdGVyJyxcbiAgICAgICAgc291cmNlOiBjbHVzdGVyU291cmNlLFxuICAgICAgICBzdHlsZTogc3R5bGVGb3JDbHVzdGVyXG5cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgYWxsTGF5ZXJzID0gcHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRMYXllcnMoKS5nZXRBcnJheSgpO1xuICAgICAgdmFyIG1pc3NpbmdMYXllciA9IHRydWU7XG4gICAgICBmb3IoaSA9IDA7IGkgPCBhbGxMYXllcnMubGVuZ3RoOyBpKyspe1xuXG4gICAgICAgIGlmKGFsbExheWVyc1tpXS5jbHVzdGVycykge1xuICAgICAgICAgIGFsbExheWVyc1tpXSA9IHZlY3RvckxheWVyO1xuICAgICAgICAgIG1pc3NpbmdMYXllciA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmKG1pc3NpbmdMYXllcil7XG4gICAgICAgIHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIodmVjdG9yTGF5ZXIpO1xuICAgICAgfVxuICAgIH1cblxuXG5cbiAgfS8vZW5kIG9mIGNvbWJpbmVMYXllcnNcblxuXG4gIGNoZWNrTGF5ZXJJc0FjdGl2ZUZvclpvb20obGF5ZXJJZCwgb3B0X3pvb20pIHtcbiAgICB2YXIgbGF5ZXIsXG4gICAgICB6b29tLFxuICAgICAgbGF5ZXJDb250ZW50LFxuICAgICAgbG9jc3R5bGU7XG5cbiAgICBpZiAoIXRoaXMubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1tsYXllcklkXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxheWVyID0gdGhpcy5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2xheWVySWRdO1xuXG4gICAgaWYgKG9wdF96b29tKSB7XG4gICAgICB6b29tID0gb3B0X3pvb207XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFpvb20oKSA+IC0xKSB7XG4gICAgICB6b29tID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRab29tKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHpvb20gPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGxheWVyLnpvb20gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGxheWVyLmNvbnRlbnQgJiYgbGF5ZXIuY29udGVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGF5ZXIuY29udGVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxheWVyQ29udGVudCA9IGxheWVyLmNvbnRlbnRbaV07XG4gICAgICAgICAgaWYgKGxheWVyQ29udGVudC5sb2NhdGlvblN0eWxlKSB7XG4gICAgICAgICAgICBsb2NzdHlsZSA9IHRoaXMubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2xheWVyQ29udGVudC5sb2NhdGlvblN0eWxlXTtcbiAgICAgICAgICAgIC8vIFRPRE8gY2hlY2sgYWxsIGxvY3N0eWxlcyBhbmQgdGFrZSB0aGUgbW9zdCBjb25zdHJhaW5pbmcgem9vbSB2YWx1ZVxuICAgICAgICAgICAgaWYgKGxvY3N0eWxlKSB7XG4gICAgICAgICAgICAgIGxheWVyLnpvb20gPSB7fTtcbiAgICAgICAgICAgICAgaWYgKGxvY3N0eWxlLm1heHpvb20pIHtcbiAgICAgICAgICAgICAgICBsYXllci56b29tLm1heCA9IGxvY3N0eWxlLm1heHpvb207XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxvY3N0eWxlLm1pbnpvb20pIHtcbiAgICAgICAgICAgICAgICBsYXllci56b29tLm1pbiA9IGxvY3N0eWxlLm1pbnpvb207XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxheWVyLnpvb20ubWF4IHx8IGxheWVyLnpvb20ubWluKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCh0eXBlb2Ygem9vbSA9PT0gXCJudW1iZXJcIikgJiYgbGF5ZXIuem9vbVxuICAgICAgJiYgKGxheWVyLnpvb20ubWluID4gem9vbSB8fCAobGF5ZXIuem9vbS5tYXggPiAwICYmIGxheWVyLnpvb20ubWF4IDwgem9vbSkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gZW5kIG9mIFwiY2hlY2tMYXllcklzQWN0aXZlKClcIlxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLXByb3h5LmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7Wm9vbWxldmVsfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXpvb21sZXZlbFwiO1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIGM0Zy1NYXBzIHV0aWxpdHkgZnVuY3Rpb25zXG4gICAqL1xuICBjNGcubWFwcy51dGlscyA9ICQuZXh0ZW5kKGM0Zy5tYXBzLnV0aWxzLCB7XG4gICAgLyoqXG4gICAgICogIENvbnZlcnRzIHRoZSBmaXJzdCBsZXR0ZXIgb2YgYSBnaXZlbiBzdHJpbmcgdG8gdXBwZXJjYXNlLCBsZWF2aW5nIHRoZSByZW1haW5pbmcgc3RyaW5nIHVudG91Y2hlZC5cbiAgICAgKlxuICAgICAqICBAcGFyYW0gICAge3N0cmluZ30gICAgdGhlIHN0cmluZyB0byBjYXBpdGFsaXplXG4gICAgICpcbiAgICAgKiAgQHJldHVybiAgIHtzdHJpbmd9ICAgIHRoZSBjYXBpdGFsaXplZCBzdHJpbmdcbiAgICAgKi9cbiAgICBjYXBpdGFsaXplRmlyc3RMZXR0ZXI6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYW4gdW5pcXVlIGlkLlxuICAgICAqXG4gICAgICogVGhlIGlkIGlzIDkgY2hhcmFjdGVycyBsb25nIGFuZCBwcmVmaXhlZCB3aXRoIGFuIHVuZGVyc2NvcmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgVGhlIGdlbmVyYXRlZCBpZC5cbiAgICAgKi9cbiAgICBnZXRVbmlxdWVJZDogZnVuY3Rpb24gKCkge1xuICAgICAgLy8gTWF0aC5yYW5kb20gc2hvdWxkIGJlIHVuaXF1ZSBiZWNhdXNlIG9mIGl0cyBzZWVkaW5nIGFsZ29yaXRobS5cbiAgICAgIC8vIENvbnZlcnQgaXQgdG8gYmFzZSAzNiAobnVtYmVycyArIGxldHRlcnMpLCBhbmQgZ3JhYiB0aGUgZmlyc3QgOSBjaGFyYWN0ZXJzXG4gICAgICAvLyBhZnRlciB0aGUgZGVjaW1hbC5cbiAgICAgIHJldHVybiAnXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVuY29kZSBpbnB1dCBzdHJpbmdzIGZvciBHZW9KU09OLU9iamVjdHMgcHJvcGVybHksXG4gICAgICogc28gdGhleSB3aWxsIG5vdCBicmVhayB0aGUgQ29kZS5cbiAgICAgKiBUcmFuc2Zvcm1zOlxuICAgICAqICAgXFwgLT4gXFxcXDtcbiAgICAgKiAgIFwiIC0+ICcnO1xuICAgICAqICAgw4QgLT4gJkF1bWw7XG4gICAgICogICDDpCAtPiAmYXVtbDtcbiAgICAgKiAgIMOWIC0+ICZPdW1sO1xuICAgICAqICAgw7YgLT4gJm91bWw7XG4gICAgICogICDDnCAtPiAmVXVtbDtcbiAgICAgKiAgIMO8IC0+ICZ1dW1sO1xuICAgICAqXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gIGlucHV0ICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBlbmNvZGVHZW9Kc29uUHJvcGVydHk6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgdmFyIG91dHB1dDtcblxuICAgICAgaWYgKCFpbnB1dCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dCA9IGlucHV0LnJlcGxhY2UoXG4gICAgICAgICAgL1xcXFwvZywgJ1xcXFxcXFxcJ1xuICAgICAgKS5yZXBsYWNlKFxuICAgICAgICAgIC9cXFwiL2csICdcXCdcXCcnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OEL2csICcmQXVtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OkL2csICcmYXVtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OWL2csICcmT3VtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8O2L2csICcmb3VtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OcL2csICcmVXVtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8O8L2csICcmdXVtbDsnXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0sIC8vIGVuZCBvZiBlbmNvZGVHZW9Kc29uUHJvcGVydHkoKVxuXG4gICAgLyoqXG4gICAgICogRGVjb2RlIGlucHV0IHN0cmluZ3MgZm9yIEdlb0pTT04tT2JqZWN0cyBwcm9wZXJseSxcbiAgICAgKiBzbyB0aGV5IHdpbGwgYmUgZGlzcGxheWVkIGNvcnJlY3RseS5cbiAgICAgKiBUcmFuc2Zvcm1zOlxuICAgICAqICAgXFxcXCAgICAgLT4gXFw7XG4gICAgICogICAnJyAgICAgLT4gXCI7XG4gICAgICogICAmQXVtbDsgLT4gw4RcbiAgICAgKiAgICZhdW1sOyAtPiDDpFxuICAgICAqICAgJk91bWw7IC0+IMOWXG4gICAgICogICAmb3VtbDsgLT4gw7ZcbiAgICAgKiAgICZVdW1sOyAtPiDDnFxuICAgICAqICAgJnV1bWw7IC0+IMO8XG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgaW5wdXQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGRlY29kZUdlb0pzb25Qcm9wZXJ0eTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICB2YXIgb3V0cHV0O1xuXG4gICAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaW5wdXQgPSBpbnB1dCArIFwiXCI7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dCA9IGlucHV0LnJlcGxhY2UoXG4gICAgICAgICAgL1xcXFxcXFxcL2csICdcXFxcJ1xuICAgICAgKS5yZXBsYWNlKFxuICAgICAgICAgIC9cXCdcXCcvZywgJ1xcXCInXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZBdW1sOy9nLCAnw4QnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZhdW1sOy9nLCAnw6QnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZPdW1sOy9nLCAnw5YnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZvdW1sOy9nLCAnw7YnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZVdW1sOy9nLCAnw5w7J1xuICAgICAgKS5yZXBsYWNlKFxuICAgICAgICAgIC8mdXVtbDsvZywgJ8O8J1xuICAgICAgKTtcblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9LCAvLyBlbmQgb2YgZGVjb2RlR2VvSnNvblByb3BlcnR5KClcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBvciByZXBsYWNlIGFuIFVSTC1wYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBJZiBgb3B0X2dldEtleWAgaXMgYGZhbHNlYCBvciBgdW5kZWZpbmVkYCB0aGUgZ2l2ZW4gcGFyYW1ldGVyLCBgcGFyYW1gLFxuICAgICAqIHdpbGwgYmUgYXBwbGllZCBhcyBcImhhc2gtcGFyYW1ldGVyXCIuXG4gICAgICogZS5nLjpcbiAgICAgKiAgIGh0dHBzOi8vbXl1cmwuZGU6cG9ydC9wYXRoL3RvL21hcHMjcGFyYW1cbiAgICAgKiBOb3RlLCB0aGF0IGFscmVhZHkgZXhpc3RpbmcgXCJoYXNoLXBhcmFtZXRlcnNcIiB3aWxsIGJlIG92ZXJyaWRlbixcbiAgICAgKiB3aGVyZWFzIGV4aXN0aW5nIFwiR0VULXBhcmFtZXRlcnNcIiBzdGF5IHVudG91Y2hlZC5cbiAgICAgKlxuICAgICAqIElmIGBvcHRfZ2V0S2V5YCBpcyBzZXQsIGl0IHdpbGwgYmUgYXBwbGllZCBhcyBcIkdFVC1wYXJhbWV0ZXJcIi5cbiAgICAgKiBlLmcuOlxuICAgICAqICAgaHR0cHM6Ly9teXVybC5kZTpwb3J0L3BhdGgvdG8vbWFwcz9vcHRfZ2V0S2V5PXBhcmFtXG4gICAgICogSWYgdGhlIGtleSBkZXNjcmliZWQgYnkgYG9wdF9nZXRLZXlgIGlzIGFscmVhZHkgZXhpc3RpbmcsIGl0cyB2YWx1ZSB3aWxsIGJlIG92ZXJyaWRlbixcbiAgICAgKiBvdGhlcndpc2UgdGhlIGtleS12YWx1ZS1wYWlyIHdpbGwgYmUgYXBwZW5kZWQgYXBwcm9wcmlhdGx5LlxuICAgICAqIEFscmVhZHkgZXhpc3RpbmcgXCJoYXNoLXBhcmFtZXRlcnNcIiB3aWxsIHN0YXkgdW50b3VjaGVkLlxuICAgICAqXG4gICAgICogSWYgYG9wdF9leGVjdXRlYCBpcyBgZmFsc2VgIG9yIGB1bmRlZmluZWRgLCB0aGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gdGhlIG5ldyBsaW5rIGFzIGBzdHJpbmdgLFxuICAgICAqIG90aGVyd2lzZSB0aGUgXCJocmVmL2xvY2F0aW9uXCIgd2lsbCBiZSBjaGFuZ2VkIGRpcmVjdGx5IGluIHRoZSBicm93c2VyLCB3aGljaCBjYW4gY2F1c2UgYSBwYWdlcmVsb2FkLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgcGFyYW0gICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gIHt1bmRlZmluZWR8Ym9vbGVhbnxzdHJpbmd9ICBvcHRfZ2V0S2V5ICAgRGVmYXVsdDogYHVuZGVmaW5lZGBcbiAgICAgKiBAcGFyYW0gIHt1bmRlZmluZWR8Ym9vbGVhbn0gICAgICAgICBvcHRfZXhlY3V0ZSAgRGVmYXVsdDogYHVuZGVmaW5lZGBcbiAgICAgKi9cbiAgICBzZXRVcmxQYXJhbTogZnVuY3Rpb24gKHBhcmFtLCBvcHRfZ2V0S2V5LCBvcHRfZXhlY3V0ZSkge1xuICAgICAgdmFyIGxpbmssXG4gICAgICAgICAgc2VhcmNoUGFyYW0sXG4gICAgICAgICAgcGFyYW1SZXBsYWNlZCxcbiAgICAgICAgICBpO1xuXG4gICAgICBpZiAodHlwZW9mIHBhcmFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBsaW5rID0gbG9jYXRpb24ub3JpZ2luICsgbG9jYXRpb24ucGF0aG5hbWU7XG5cbiAgICAgIGlmICghb3B0X2dldEtleSkge1xuICAgICAgICAvLyB1c2UgaGFzaC1wYXJhbWV0ZXJcbiAgICAgICAgaWYgKG9wdF9leGVjdXRlKSB7XG4gICAgICAgICAgbG9jYXRpb24uaGFzaCA9IHBhcmFtO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxpbmsgKz0gbG9jYXRpb24uc2VhcmNoICsgJyMnICsgcGFyYW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1c2UgR0VULXBhcmFtZXRlclxuICAgICAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICAgICAgLy8gdGhlcmUgYXJlIGFscmVhZHkgc2VhcmNoLXBhcmFtZXRlcnNcbiAgICAgICAgICBwYXJhbVJlcGxhY2VkID0gZmFsc2U7XG4gICAgICAgICAgb3B0X2dldEtleSA9IG9wdF9nZXRLZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAvLyByZXBsYWNlIHBhcmFtZXRlciBpZiBhbHJlYWR5IGV4aXN0ZW50XG4gICAgICAgICAgc2VhcmNoUGFyYW0gPSBsb2NhdGlvbi5zZWFyY2gucmVwbGFjZShcbiAgICAgICAgICAgICAgLyhbXj1cXD9cXCZdKyk9KFteJl0rKS9naSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKG1hdGNoLCBrZXksIHZhbHVlLCBvZmZzZXQsIG9yaWdpblN0cmluZykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IG9wdF9nZXRLZXkpIHtcbiAgICAgICAgICAgICAgICAgIHBhcmFtUmVwbGFjZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleSArICc9JyArIHBhcmFtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIC8vIG90aGVyd2lzZSBhcHBlbmQgYXMgbmV3IHBhcmFtZXRlclxuICAgICAgICAgIGlmICghcGFyYW1SZXBsYWNlZCkge1xuICAgICAgICAgICAgc2VhcmNoUGFyYW0gKz0gJyYnICsgb3B0X2dldEtleSArICc9JyArIHBhcmFtO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB0aGlzIHdpbGwgYmUgdGhlIG9ubHkgc2VhcmNoLXBhcmFtZXRlciBpbiB0aGUgVVJMXG4gICAgICAgICAgc2VhcmNoUGFyYW0gPSAnPycgKyBvcHRfZ2V0S2V5ICsgJz0nICsgcGFyYW07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdF9leGVjdXRlKSB7XG4gICAgICAgICAgbG9jYXRpb24uc2VhcmNoID0gc2VhcmNoUGFyYW07XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGluayArPSBzZWFyY2hQYXJhbSArIGxvY2F0aW9uLmhhc2g7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaW5rO1xuICAgIH0sIC8vIGVuZCBvZiBzZXRVcmxQYXJhbSgpXG5cbiAgICAvKipcbiAgICAgKiBHZXQgc2VhcmNoIG9yIGhhc2ggVVJMLXBhcmFtZXRlciBhcyBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBJZiBgb3B0X2dldEtleWAgaXMgYGZhbHNlYCBvciBgdW5kZWZpbmVkYCwgdGhlIGhhc2gtcGFyYW1ldGVyIG9mIHRoZSBVUkwgaXMgcmV0dXJuZWQsXG4gICAgICogb3RoZXJ3aXNlIGl0IHdpbGwgc2VhcmNoIGZvciBhIEdFVC1wYXJhbWV0ZXIgYW5kIHJldHVybiBpdHMgdmFsdWUuXG4gICAgICpcbiAgICAgKiBJZiBhIHBhcmFtZXRlciBpcyBub3QgZXhpc3RlbnQsIG9yIGVtcHR5LCBhbiBlbXB0eSBzdHJpbmcgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHt1bmRlZmluZWR8c3RyaW5nfSAgb3B0X2dldEtleSAgRGVmYXVsdDogYHVuZGVmaW5lZGBcbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGZvdW5kIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBnZXRVcmxQYXJhbTogZnVuY3Rpb24gKG9wdF9nZXRLZXkpIHtcbiAgICAgIHZhciBwYXJhbSxcbiAgICAgICAgICByZWdFeDtcblxuICAgICAgaWYgKCFvcHRfZ2V0S2V5KSB7XG4gICAgICAgIHBhcmFtID0gbG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgICAgIHBhcmFtID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVnRXggPSBuZXcgUmVnRXhwKCdbXFw/XFwmXScgKyBvcHRfZ2V0S2V5ICsgJz0oW14mXSspJywgJ2knKTtcbiAgICAgICAgICBwYXJhbSA9IHJlZ0V4LmV4ZWMobG9jYXRpb24uc2VhcmNoKTtcbiAgICAgICAgICBwYXJhbSA9IHBhcmFtID8gcGFyYW1bMV0gOiAnJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfSwgLy8gZW5kIG9mIGdldFVybFBhcmFtKClcblxuICAgIC8qKlxuICAgICAqIERlbHRhLWVuY29kZSBhbiBhcnJheSBvZiBudW1iZXJzLlxuICAgICAqIE5vdGUgdGhhdCB0aGUgYXJyYXkgd2lsbCBiZSBzb3J0ZWQgKGxvd2VzdCB0byBoaWdoZXN0KVxuICAgICAqIGJlZm9yZSBlbmNvZGluZy5cbiAgICAgKlxuICAgICAqIFNvIGFmdGVyIHRoZSBlbmNvZGluZyB0aGUgZmlyc3QgdmFsdWUgb2YgdGhlIG91dHB1dCBjb250YWluc1xuICAgICAqIHRoZSBzbWFsbGVzdCBudW1iZXIgb2YgdGhlIHNldCBhbmQgZWFjaCBmb2xsb3dpbmcgbnVtYmVyIGp1c3RcbiAgICAgKiByZXByZXNlbnRzIHRoZSBvZmZzZXQgdG8gaXRzIHByZXZpb3VzIG5laWdoYm9yLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBtb3N0bHkgZWZmaWNpZW50IGZvciBoaWdoIG51bWJlcnMsIHRoYXQgYXJlIFwiY2xvc2UgdG8gZWFjaCBvdGhlclwiLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiAgIFsxMzM3LCAxMSwgMTAxLCAxMjMsIDk2LCA2OSwgNDIsIDQyXVxuICAgICAqICAgd2lsbCBiZSBzb3J0ZWRcbiAgICAgKiAgIFsxMSwgNDIsIDQyLCA2OSwgOTYsIDEwMSwgMTIzLCAxMzM3XVxuICAgICAqICAgYW5kIGVuY29kZWQgdG9cbiAgICAgKiAgIFsxMSwgMzEsIDAsIDI3LCAyNywgNSwgMjIsIDEyMTRdXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7YXJyYXk8bnVtYmVycz59ICBhcnJJbnB1dCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2FycmF5PG51bWJlcnM+fSAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBkZWx0YUVuY29kZTogZnVuY3Rpb24gKGFycklucHV0KSB7XG4gICAgICB2YXIgYXJyT3V0cHV0LFxuICAgICAgICAgIGk7XG5cbiAgICAgIGlmICghYXJySW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGFycklucHV0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gYXJySW5wdXQ7XG4gICAgICB9XG5cbiAgICAgIGFycklucHV0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgfSk7XG5cbiAgICAgIGFyck91dHB1dCA9IFtdO1xuICAgICAgYXJyT3V0cHV0WzBdID0gYXJySW5wdXRbMF07XG4gICAgICBmb3IgKGkgPSAxOyBpIDwgYXJySW5wdXQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyT3V0cHV0W2ldID0gYXJySW5wdXRbaV0gLSBhcnJJbnB1dFtpIC0gMV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnJPdXRwdXQ7XG5cbiAgICB9LCAvLyBlbmQgb2YgZGVsdGFFbmNvZGUoKVxuXG4gICAgLyoqXG4gICAgICogRGVjb2RlIGEgZGVsdGEtZW5jb2RlZCBhcnJheS5cbiAgICAgKiBTZWUgYGRlbHRhRW5jb2RlYCBmdW5jdGlvbiBmb3IgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHthcnJheTxudW1iZXJzPn0gIGFycklucHV0ICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7YXJyYXk8bnVtYmVycz59ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGRlbHRhRGVjb2RlOiBmdW5jdGlvbiAoYXJySW5wdXQpIHtcbiAgICAgIHZhciBhcnJPdXRwdXQsXG4gICAgICAgICAgaTtcblxuICAgICAgaWYgKCFhcnJJbnB1dCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIGFyck91dHB1dCA9IFtdO1xuICAgICAgYXJyT3V0cHV0WzBdID0gcGFyc2VJbnQoYXJySW5wdXRbMF0sIDEwKTtcbiAgICAgIGlmIChpc05hTihhcnJJbnB1dFswXSkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMTsgaSA8IGFycklucHV0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFyck91dHB1dFtpXSA9IHBhcnNlSW50KGFycklucHV0W2ldLCAxMCkgKyBhcnJPdXRwdXRbaSAtIDFdO1xuICAgICAgICBpZiAoaXNOYU4oYXJyT3V0cHV0W2ldKSkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyT3V0cHV0O1xuXG4gICAgfSwgLy8gZW5kIG9mIGRlbHRhRGVjb2RlKClcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGFuZCBjYWxsIGZ1bmN0aW9ucyBpbiBgYXJySG9va0Z1bmN0aW9uc2Agd2l0aCBnaXZlbiBgcGFyYW1ldGVyc2AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7YXJyYXk8ZnVuY3Rpb24+fSAgIGFyckhvb2tGdW5jdGlvbnMgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7bWl4ZWR9ICAgICAgICAgICAgIHBhcmFtZXRlcnMgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBjYWxsSG9va0Z1bmN0aW9uczogZnVuY3Rpb24gKGFyckhvb2tGdW5jdGlvbnMsIHBhcmFtZXRlcnMpIHtcbiAgICAgIHZhciBqO1xuXG4gICAgICBpZiAoYXJySG9va0Z1bmN0aW9ucyAmJiBhcnJIb29rRnVuY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGFyckhvb2tGdW5jdGlvbnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyckhvb2tGdW5jdGlvbnNbal0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyckhvb2tGdW5jdGlvbnNbal0ocGFyYW1ldGVycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwiY2FsbEhvb2tGdW5jdGlvbnMoKVwiXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgaGV4LWZvcm1hdGVkIGNvbG9yIHZhbHVlIGludG8gcmdiYSgpLWZvcm1hdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtzdHJpbmd8bnVtYmVyfSAgaGV4ICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7c3RyaW5nfG51bWJlcn0gIG9wdF9vcGFjaXR5ICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5OiBmdW5jdGlvbiAoaGV4LCBvcHRfb3BhY2l0eSwgb3B0X2FycmF5KSB7XG5cbiAgICAgIHZhciBiaWdpbnQsIHIsIGcsIGIsIGE7XG5cbiAgICAgIGJpZ2ludCA9IHBhcnNlSW50KGhleCwgMTYpO1xuICAgICAgaWYgKG9wdF9vcGFjaXR5ICYmIG9wdF9vcGFjaXR5LnZhbHVlKSB7XG4gICAgICAgIG9wdF9vcGFjaXR5LnZhbHVlID0gcGFyc2VJbnQob3B0X29wYWNpdHkudmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0X29wYWNpdHkgJiYgdHlwZW9mIG9wdF9vcGFjaXR5ICE9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdF9vcGFjaXR5ID09PSAnb2JqZWN0JyAmJiBvcHRfb3BhY2l0eS52YWx1ZSkge1xuICAgICAgICAgIG9wdF9vcGFjaXR5ID0gb3B0X29wYWNpdHkudmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0X29wYWNpdHkgPSAxMDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgciA9IChiaWdpbnQgPj4gMTYpICYgMjU1O1xuICAgICAgZyA9IChiaWdpbnQgPj4gOCkgJiAyNTU7XG4gICAgICBiID0gYmlnaW50ICYgMjU1O1xuICAgICAgYSA9IG9wdF9vcGFjaXR5ID8gKG9wdF9vcGFjaXR5IC8gMTAwKSA6IDE7XG4gICAgICBpZihvcHRfYXJyYXkpe1xuICAgICAgICByZXR1cm4gW3IsZyxiLGFdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJyZ2JhKFwiICsgciArIFwiLFwiICsgZyArIFwiLFwiICsgYiArIFwiLFwiICsgYSArIFwiKVwiO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgYSBkZWZpbmVkIHN0eWxlLCB0byBhIHNpbXBsZXIgdmVyc2lvbi5cbiAgICAgKlxuICAgICAqIFRoZSByZWR1Y2VkIHN0eWxlIGlzIHRoZSBmaXJzdCBzdHlsZSBvZiB0aGUgZGVmaW5lZCBzdHlsZXNldCxcbiAgICAgKiB3aXRoIGEgMXB4IHRoaWNrIHN0cm9rZSBhbmQgYSBjaXJjbGUgd2l0aCBhIDVweCByYWRpdXMuXG4gICAgICpcbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGRpc3BsYXkgYWRkaXRpb25hbCBnZW9tZXRyaWVzIHdpdGggYSBtYWluLWdlb21ldHJ5LFxuICAgICAqIHdpdGhvdXQgaGF2aW5nIHRvIGRlZmluZSBhIHdob2xlIG5ldyBzdHlsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtudW1iZXJ8c3RyaW5nfSAgICAgICAgICAgc3R5bGVJZCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2FycmF5PG9sLnN0eWxlLlN0eWxlPn0gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcmVkdWNlU3R5bGU6IGZ1bmN0aW9uIChzdHlsZUlkKSB7XG4gICAgICB2YXIgc3R5bGUsXG4gICAgICAgICAgcmVkdWNlZFN0eWxlLFxuICAgICAgICAgIGZpbGxTdHlsZSxcbiAgICAgICAgICBzdHJva2VTdHlsZTtcblxuICAgICAgaWYgKCFjNGcubWFwcy5sb2NhdGlvblN0eWxlc1tzdHlsZUlkXSB8fCAhYzRnLm1hcHMubG9jYXRpb25TdHlsZXNbc3R5bGVJZF0uc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICBzdHlsZSA9IGM0Zy5tYXBzLmxvY2F0aW9uU3R5bGVzW3N0eWxlSWRdLnN0eWxlKClbMF07XG5cbiAgICAgIGZpbGxTdHlsZSA9IHN0eWxlLmdldEZpbGwoKTtcbiAgICAgIHN0cm9rZVN0eWxlID0gc3R5bGUuZ2V0U3Ryb2tlKCk7XG4gICAgICBzdHJva2VTdHlsZS5zZXRXaWR0aCgxKTtcblxuICAgICAgcmVkdWNlZFN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgIHJhZGl1czogNVxuICAgICAgICB9KSxcbiAgICAgICAgLy8gdGV4dDogc3R5bGUuZ2V0VGV4dCgpLFxuICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICBmaWxsOiBmaWxsU3R5bGVcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gW3JlZHVjZWRTdHlsZV07XG4gICAgfSwgLy8gZW5kIG9mIFwicmVkdWNlU3R5bGVcIlxuXG4gICAgLyoqXG4gICAgICogTWVhc3VyZSB0aGUgZGltZW5zaW9ucyBvZiB0aGUgZ2l2ZW4gZ2VvbWV0cnkuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgZ2VvbWV0cnkgaXMgYSBgTGluZVN0cmluZ2AgdGhlIGZ1bmN0aW9uIHdpbGwgbWVhc3VyZSBpdHMgbGVuZ3RoLFxuICAgICAqIGlzIGl0IGEgYFBvbHlnb25gIGl0IHdpbGwgbWVhc3VyZSB0aGUgYWNyZWFnZSxcbiAgICAgKiBvdGhlcndpc2UgaXQgd2lsbCByZXR1cm4gYDBgLlxuICAgICAqXG4gICAgICogSWYgdGhlIG9wdGlvbmFsIGBvcHRfZm9yY2VMaW5lTWVhc3VyZWAgcGFyYW1ldGVyIGlzIGB0cnVlYFxuICAgICAqIGFuZCB0aGUgZ2VvbWV0cnkgaXMgYSBgUG9seWdvbmAgaXQgd2lsbCBtZWFzdXJlIGl0cyBwZXJpbWV0ZXIgaW5zdGVhZFxuICAgICAqIG9mIGl0cyBhY3JlYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtICAge29sLmdlb20uTGluZVN0cmluZ3xvbC5nZW9tLlBvbHlnb259ICAgZ2VvbWV0cnkgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7dW5kZWZpbmVkfGJvb2xlYW59ICAgICAgICAgICAgICAgICAgICBvcHRfZm9yY2VMaW5lTWVhc3VyZSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2FycmF5PHN0cmluZz58bnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBtZWFzdXJlR2VvbWV0cnk6IGZ1bmN0aW9uIChnZW9tZXRyeSwgb3B0X2ZvcmNlTGluZU1lYXN1cmUsIG9wdF9mb3JjZVN1cmZhY2VNZWFzdXJlKSB7XG4gICAgICB2YXIgdmFsdWUsXG4gICAgICAgICAgc3BoZXJlLFxuICAgICAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgICAgIGNvb3JkMSxcbiAgICAgICAgICBjb29yZDIsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIGk7XG5cbiAgICAgIGlmICghZ2VvbWV0cnkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvL3NwaGVyZSA9IG5ldyBvbC5TcGhlcmUoNjM3ODEzNyk7XG4gICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgaWYgKGdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5MaW5lU3RyaW5nIHx8IChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbiAmJiBvcHRfZm9yY2VMaW5lTWVhc3VyZSkpIHtcblxuICAgICAgICBjb29yZGluYXRlcyA9IGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgIGlmIChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbikge1xuICAgICAgICAgIGNvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXNbMF07XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29vcmRpbmF0ZXMubGVuZ3RoIC0gMTsgaSArPSAxKSB7XG4gICAgICAgICAgY29vcmQxID0gb2wucHJvai50cmFuc2Zvcm0oY29vcmRpbmF0ZXNbaV0sICdFUFNHOjM4NTcnLCAnRVBTRzo0MzI2Jyk7XG4gICAgICAgICAgY29vcmQyID0gb2wucHJvai50cmFuc2Zvcm0oY29vcmRpbmF0ZXNbaSArIDFdLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpO1xuICAgICAgICAgIHZhbHVlICs9IG9sLnNwaGVyZS5nZXREaXN0YW5jZShjb29yZDEsIGNvb3JkMiwgNjM3ODEzNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnJhd1ZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICBpZiAodmFsdWUgPiAxMDAwKSB7XG4gICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlIC8gMTAwMCAqIDEwMCkgLyAxMDApLnRvRml4ZWQoMikgK1xuICAgICAgICAgICAgICAnICcgKyAna20nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSByZXN1bHQucmF3VmFsdWUgK1xuICAgICAgICAgICAgICAnICcgKyAnbSc7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIGlmIChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbikge1xuICAgICAgICAvL2dlb21ldHJ5ID0gLyoqIEB0eXBlIHtvbC5nZW9tLlBvbHlnb259ICovKGdlb21ldHJ5LmNsb25lKCkudHJhbnNmb3JtKCdFUFNHOjM4NTcnLCAnRVBTRzo0MzI2JykpO1xuICAgICAgICAvL2Nvb3JkaW5hdGVzID0gZ2VvbWV0cnkuZ2V0TGluZWFyUmluZygwKS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgICB2YWx1ZSA9IE1hdGguYWJzKG9sLnNwaGVyZS5nZXRBcmVhKGdlb21ldHJ5KSk7XG4gICAgICAgIHJlc3VsdC5yYXdWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgaWYgKHZhbHVlID4gMTAwMDApIHtcbiAgICAgICAgICByZXN1bHQuaHRtbFZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgLyAxMDAwMDAwICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKSArXG4gICAgICAgICAgICAgICcgJyArICdrbTxzdXA+Mjwvc3VwPic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IHJlc3VsdC5yYXdWYWx1ZSArXG4gICAgICAgICAgICAgICcgJyArICdtPHN1cD4yPC9zdXA+JztcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5DaXJjbGUgJiYgb3B0X2ZvcmNlU3VyZmFjZU1lYXN1cmUpIHtcbiAgICAgICAgICB2YXIgY2VudGVyID0gZ2VvbWV0cnkuZ2V0Q2VudGVyKCk7XG4gICAgICAgICAgdmFyIHJhZGl1cyA9IGdlb21ldHJ5LmdldFJhZGl1cygpO1xuICAgICAgICAgIHZhciBlZGdlQ29vcmRpbmF0ZSA9IFtjZW50ZXJbMF0gKyByYWRpdXMsIGNlbnRlclsxXV07XG4gICAgICAgICAgLy92YXIgd2dzODRTcGhlcmUgPSBuZXcgb2wuU3BoZXJlKDYzNzgxMzcpO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9sLnNwaGVyZS5nZXREaXN0YW5jZShcbiAgICAgICAgICAgICAgb2wucHJvai50cmFuc2Zvcm0oY2VudGVyLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpLFxuICAgICAgICAgICAgICBvbC5wcm9qLnRyYW5zZm9ybShlZGdlQ29vcmRpbmF0ZSwgJ0VQU0c6Mzg1NycsICdFUFNHOjQzMjYnKSxcbiAgICAgICAgICAgICAgNjM3ODEzN1xuICAgICAgICAgICk7XG5cbiAgICAgICAgICB2YWx1ZSA9IE1hdGguUEkgKiBNYXRoLnNxcnQodmFsdWUpO1xuXG4gICAgICAgICAgcmVzdWx0LnJhd1ZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICAgIGlmICh2YWx1ZSA+IDEwMDAwKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSAoTWF0aC5yb3VuZCh2YWx1ZSAvIDEwMDAwMDAgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpICtcbiAgICAgICAgICAgICAgICAgICcgJyArICdrbTxzdXA+Mjwvc3VwPic7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IHJlc3VsdC5yYXdWYWx1ZSArXG4gICAgICAgICAgICAgICAgICAnICcgKyAnbTxzdXA+Mjwvc3VwPic7XG4gICAgICAgICAgfVxuXG5cbiAgICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkgaW5zdGFuY2VvZiBvbC5nZW9tLkNpcmNsZSkge1xuICAgICAgICAgIHZhciBjZW50ZXIgPSBnZW9tZXRyeS5nZXRDZW50ZXIoKTtcbiAgICAgICAgICB2YXIgcmFkaXVzID0gZ2VvbWV0cnkuZ2V0UmFkaXVzKCk7XG4gICAgICAgICAgdmFyIGVkZ2VDb29yZGluYXRlID0gW2NlbnRlclswXSArIHJhZGl1cywgY2VudGVyWzFdXTtcbiAgICAgICAgICAvL3ZhciB3Z3M4NFNwaGVyZSA9IG5ldyBvbC5TcGhlcmUoNjM3ODEzNyk7XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2wuc3BoZXJlLmdldERpc3RhbmNlKFxuICAgICAgICAgICAgICBvbC5wcm9qLnRyYW5zZm9ybShjZW50ZXIsICdFUFNHOjM4NTcnLCAnRVBTRzo0MzI2JyksXG4gICAgICAgICAgICAgIG9sLnByb2oudHJhbnNmb3JtKGVkZ2VDb29yZGluYXRlLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpLFxuICAgICAgICAgICAgICA2Mzc4MTM3XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHJlc3VsdC5yYXdWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgICBpZiAocmVzdWx0LnJhd1ZhbHVlID4gMTAwMDApIHtcbiAgICAgICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IChNYXRoLnJvdW5kKCh2YWx1ZSAqIDEwMCkgLyAxMDApIC8gMTAwMCkudG9GaXhlZCgyKSArXG4gICAgICAgICAgICAgICAgICAnICcgKyAna20nO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSByZXN1bHQucmF3VmFsdWUgK1xuICAgICAgICAgICAgICAgICAgJyAnICsgJ20nO1xuICAgICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBleHRlbnQgZm9yIGFuIGFycmF5IG9mIGdlb21ldHJpZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7QXJyYXkuPG9sLmdlb20uc2ltcGxlR2VvbWV0cnk+fSAgYXJyR2VvbWV0cmllcyAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge29sLkV4dGVudH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBnZXRFeHRlbnRGb3JHZW9tZXRyaWVzOiBmdW5jdGlvbiAoYXJyR2VvbWV0cmllcykge1xuICAgICAgdmFyIGV4dGVudFNvdXJjZTtcblxuICAgICAgaWYgKCFhcnJHZW9tZXRyaWVzKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignR2VvbWV0cmllcyBtaXNzaW5nIGZvciBleHRlbnQgY2FsY3VsYXRpb24nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBleHRlbnRTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3RvcigpO1xuICAgICAgZXh0ZW50U291cmNlLmFkZEZlYXR1cmVzKGFyckdlb21ldHJpZXMpO1xuXG4gICAgICByZXR1cm4gZXh0ZW50U291cmNlLmdldEV4dGVudCgpIHx8IG9sLkV4dGVudChbMCwgMCwgMCwgMF0pO1xuICAgIH0sIC8vIGVuZCBvZiBnZXRFeHRlbnRGb3JHZW9tZXRyaWVzKClcblxuICAgIC8qKlxuICAgICAqIEZpdCB2aWV3IG9mIGBtYXBgIHRvIGEgZ2l2ZW4gYXJyYXkgb2YgYGV4dGVudHNgLlxuICAgICAqIEFuaW1hdGVkIGlmIGBvcHRfYW5pbWF0aW9uRHVyYXRpb25gIGlzIGFuIGludGVnZXIgPiAwLlxuICAgICAqXG4gICAgICogQHBhcmFtICAge29iamVjdH0gICAgIGV4dGVudHMgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuTWFwfSAgICAgbWFwICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICAge2ludGVnZXJ9ICAgIG9wdF9hbmltYXRpb25EdXJhdGlvbiAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICAgICAgICAgICAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGZpdFRvRXh0ZW50czogZnVuY3Rpb24gKGV4dGVudHMsIG1hcCwgb3B0X3BhZGRpbmcsIG9wdF9hbmltYXRpb25EdXJhdGlvbikge1xuICAgICAgdmFyIHZpZXcsXG4gICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICBleHRlbnQsXG4gICAgICAgICAga2V5O1xuXG4gICAgICBpZiAoIWV4dGVudHMgfHwgIW1hcCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ01pc3NpbmcgZXh0ZW50IG9yIG1hcCBmb3IgZml0RXh0ZW50Jyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vZXh0ZW50ID0gb2wuZXh0ZW50LmNyZWF0ZUVtcHR5KCk7XG5cbiAgICAgIGZvciAoa2V5IGluIGV4dGVudHMpIHtcbiAgICAgICAgaWYgKGV4dGVudHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZXh0ZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBleHRlbnQgPSBleHRlbnRzW2tleV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9sLmV4dGVudC5leHRlbmQoZXh0ZW50LCBleHRlbnRzW2tleV0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZml0VG9FeHRlbnQoZXh0ZW50LCBtYXAsIG9wdF9wYWRkaW5nLCA1LCAwLCAwLCAyKTtcblxuXG4gICAgfSwgLy8gZW5kIG9mIGZpdFRvRXh0ZW50c1xuXG4gICAgLyoqXG4gICAgICogRml0IHZpZXcgb2YgYG1hcGAgdG8gYSBnaXZlbiBgZXh0ZW50YC5cbiAgICAgKiBBbmltYXRlZCBpZiBgb3B0X2FuaW1hdGlvbkR1cmF0aW9uYCBpcyBhbiBpbnRlZ2VyID4gMC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtvbC5FeHRlbnR9ICBleHRlbnQgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuTWFwfSAgICAgbWFwICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICAge2FycmF5fSAgICAgIG9wdF9wYWRkaW5nICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtpbnRlZ2VyfSAgICBvcHRfYW5pbWF0aW9uRHVyYXRpb24gIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7aW50ZWdlcn0gICAgb3B0X21pblpvb20gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICAge2ludGVnZXJ9ICAgIG9wdF9tYXhab29tICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtpbnRlZ2VyfSAgICBvcHRfbWluUmVzb2x1dGlvbiAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBmaXRUb0V4dGVudDogZnVuY3Rpb24gKGV4dGVudCwgbWFwLCBvcHRfcGFkZGluZywgb3B0X2FuaW1hdGlvbkR1cmF0aW9uLCBvcHRfbWluWm9vbSwgb3B0X21heFpvb20sIG9wdF9taW5SZXNvbHV0aW9uKSB7XG4gICAgICB2YXIgdmlldyxcbiAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgIGZpdE9wdGlvbnM7XG5cbiAgICAgIGlmICghZXh0ZW50IHx8ICFtYXApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdNaXNzaW5nIGV4dGVudCBvciBtYXAgZm9yIGZpdEV4dGVudCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZpZXcgPSBtYXAuZ2V0VmlldygpO1xuXG4gICAgICBmaXRPcHRpb25zID0ge1xuICAgICAgICAncGFkZGluZyc6IG9wdF9wYWRkaW5nIHx8IFsyNSwgMjUsIDI1LCAyNV1cbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRfbWluUmVzb2x1dGlvbiAmJiBvcHRfbWluUmVzb2x1dGlvbiA+IDApIHtcbiAgICAgICAgZml0T3B0aW9ucy5taW5SZXNvbHV0aW9uID0gb3B0X21pblJlc29sdXRpb247XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRfbWluWm9vbSAmJiBvcHRfbWluWm9vbSA+PSAwKSB7XG4gICAgICAgIGZpdE9wdGlvbnMubWluWm9vbSA9IG9wdF9taW5ab29tO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0X21heFpvb20gJiYgb3B0X21heFpvb20gPj0gMCkge1xuICAgICAgICBmaXRPcHRpb25zLm1heFpvb20gPSBvcHRfbWF4Wm9vbTtcbiAgICAgIH1cblxuICAgICAgLy8gYW5pbWF0ZSB0aGUgXCJmaXR0aW5nXCIgd2hlbiBhIGR1cmF0aW9uIGlzIGdpdmVuIGFuZCBpdHMgZ3JlYXRlciB0aGFuIDBcbiAgICAgIGlmIChvcHRfYW5pbWF0aW9uRHVyYXRpb24gJiYgb3B0X2FuaW1hdGlvbkR1cmF0aW9uID4gMCkge1xuICAgICAgICB2aWV3LmFuaW1hdGUoe1xuICAgICAgICAgIHN0YXJ0OiArbmV3IERhdGUoKSxcbiAgICAgICAgICBkdXJhdGlvbjogb3B0X2FuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgIHJlc29sdXRpb246IHZpZXcuZ2V0UmVzb2x1dGlvbigpLFxuICAgICAgICAgIGNlbnRlcjogWzAsIDBdXG4gICAgICAgICAgLy9yb3RhdGlvbjogTWF0aC5QSVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gbWFwLmJlZm9yZVJlbmRlcihcbiAgICAgICAgLy8gICAgIG9sLmFuaW1hdGlvbi5wYW4oe1xuICAgICAgICAvLyAgICAgICBzdGFydDogK25ldyBEYXRlKCksXG4gICAgICAgIC8vICAgICAgIGR1cmF0aW9uOiBvcHRfYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICAgIC8vICAgICAgIHNvdXJjZTogdmlldy5nZXRDZW50ZXIoKVxuICAgICAgICAvLyAgICAgfSksXG4gICAgICAgIC8vICAgICBvbC5hbmltYXRpb24uem9vbSh7XG4gICAgICAgIC8vICAgICAgIHN0YXJ0OiArbmV3IERhdGUoKSxcbiAgICAgICAgLy8gICAgICAgZHVyYXRpb246IG9wdF9hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgLy8gICAgICAgcmVzb2x1dGlvbjogdmlldy5nZXRSZXNvbHV0aW9uKClcbiAgICAgICAgLy8gICAgIH0pXG4gICAgICAgIC8vICk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZpZXcuZml0KGV4dGVudCwgbWFwLmdldFNpemUoKSwge3BhZGRpbmc6IFsyNSwgMjUsIDI1LCAyNV19KTtcbiAgICAgICAgLy92aWV3LmZpdChleHRlbnQsIG1hcC5nZXRTaXplKCkpO1xuICAgICAgICAvL3ZpZXcuc2V0Wm9vbSh2aWV3LmdldFpvb20oKS0xKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgZml0VG9FeHRlbnQoKVxuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgZnVuY3Rpb24gdG8gcnVuIGFsbCBwbGFjZWhvbGRlciBmdW5jdGlvbnMgYXQgb25jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgIHN0cklucHV0ICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtvbC5GZWF0dXJlfSAgICAgICAgICAgICAgICAgIGZlYXR1cmUgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtvbC5sYXllci5MYXllciB8IHVuZGVmaW5lZH0gIG9wdF9sYXllciAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge3N0cmluZ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcmVwbGFjZUFsbFBsYWNlaG9sZGVyczogZnVuY3Rpb24gKHN0cklucHV0LCBmZWF0dXJlLCBvcHRfbGF5ZXIpIHtcbiAgICAgIHZhciBzdHJPdXRwdXQ7XG5cbiAgICAgIC8vIG9ubHkgY2hlY2sgdGhlIGZpcnN0IHR3byBwYXJhbWV0ZXJzIGFzIHRoZXkgd2lsbCBiZSB1c2VkIGJ5IGFsbCBwbGFjZWhvbGRlci1mdW5jdGlvbnNcbiAgICAgIC8vIC0+IGZvciBwZXJmb3JtYW5jZVxuICAgICAgaWYgKCFzdHJJbnB1dCB8fCAhZmVhdHVyZSkge1xuICAgICAgICByZXR1cm4gc3RySW5wdXQ7XG4gICAgICB9XG5cbiAgICAgIHN0ck91dHB1dCA9IHRoaXMucmVwbGFjZUZ1bmN0aW9uUGxhY2Vob2xkZXJzKHN0cklucHV0LCBmZWF0dXJlLCBvcHRfbGF5ZXIpO1xuICAgICAgc3RyT3V0cHV0ID0gdGhpcy5yZXBsYWNlRWRpdG9yVmFyc1BsYWNlaG9sZGVycyhzdHJPdXRwdXQsIGZlYXR1cmUpO1xuICAgICAgc3RyT3V0cHV0ID0gdGhpcy5yZXBsYWNlQXR0cmlidXRlUGxhY2Vob2xkZXJzKHN0ck91dHB1dCwgZmVhdHVyZSk7XG5cbiAgICAgIHJldHVybiBzdHJPdXRwdXQ7XG4gICAgfSwgLy8gZW5kIG9mIHJlcGxhY2VBbGxQbGFjZWhvbGRlcnMoKVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZSBldmVyeSBvY2N1cmFuY2Ugb2YgYCR7Rk5mdW5jdGlvbk5hbWV9YCwgaW4gYHN0cklucHV0YCxcbiAgICAgKiB3aXRoIHRoZSByZXN1bHQgb2YgYHdpbmRvdy5mdW5jdGlvbk5hbWUoZmVhdHVyZSwgc3R5bGUpYCwgaWYgaXQgZXhpc3QuXG4gICAgICogT3RoZXJ3aXNlIHRoZSBwbGFjZWhvbGRlciB3aWxsIGJlIHNpbXBseSByZW1vdmVkICgvcmVwbGFjZWQgd2l0aCAnJykuXG4gICAgICogU3R5bGUgd2lsbCBiZSB0YWtlbiBlaXRoZXIgZnJvbSB0aGUgZmVhdHVyZSwgb3IgdGhlIGxheWVyLlxuICAgICAqXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gICAgICAgICAgc3RySW5wdXQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuRmVhdHVyZX0gICAgICBmZWF0dXJlICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtvbC5sYXllci5MYXllcn0gIGxheWVyICAgICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHJlcGxhY2VGdW5jdGlvblBsYWNlaG9sZGVyczogZnVuY3Rpb24gKHN0cklucHV0LCBmZWF0dXJlLCBsYXllcikge1xuICAgICAgdmFyIHN0ck91dHB1dDtcblxuICAgICAgaWYgKCFzdHJJbnB1dCB8fCAhZmVhdHVyZSB8fCAhbGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuIHN0cklucHV0O1xuICAgICAgfVxuXG4gICAgICBzdHJPdXRwdXQgPSBzdHJJbnB1dC5yZXBsYWNlKFxuICAgICAgICAgIC9cXCRcXHtGTihbXlxcfV0qKVxcfS9nLFxuICAgICAgICAgIGZ1bmN0aW9uIChtYXRjaCwgZnVuY3Rpb25OYW1lLCBvZmZzZXQsIG9yaWdpblN0cmluZykge1xuICAgICAgICAgICAgdmFyIHN0eWxlO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBmdW5jdGlvbiBleGlzdHNcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93W2Z1bmN0aW9uTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgLy8gc2VhcmNoIHN0eWxlXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZmVhdHVyZS5nZXRTdHlsZSA9PT0gJ2Z1bmN0aW9uJyAmJiBmZWF0dXJlLmdldFN0eWxlKCkgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0U3R5bGUoKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHN0eWxlID0gZmVhdHVyZS5nZXRTdHlsZSgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsYXllci5nZXRTdHlsZSA9PT0gJ2Z1bmN0aW9uJyAmJiBsYXllci5nZXRTdHlsZSgpKSB7XG4gICAgICAgICAgICAgICAgc3R5bGUgPSBsYXllci5nZXRTdHlsZSgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gd2luZG93W2Z1bmN0aW9uTmFtZV0oZmVhdHVyZSwgc3R5bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgIH1cbiAgICAgICk7IC8vIGVuZCBvZiByZXBsYWNlKClcblxuICAgICAgcmV0dXJuIHN0ck91dHB1dDtcbiAgICB9LCAvLyBlbmQgb2YgcmVwbGFjZUZ1bmN0aW9uUGxhY2Vob2xkZXJzKClcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgcGxhY2Vob2xkZXJzLCBpbiBgc3RySW5wdXRgLCBmb3IgdmFyaWFibGVzIHNldCBieSB0aGUgZ2VvRWRpdG9yLlxuICAgICAqIFZhbGlkIHBsYWNlaG9sZGVycyBhcmU6IChba2V5XSByZXByZXNlbnRzIHRoZSBzdHJpbmduYW1lIG9mIHRoZSB2YXJpYWJsZXMga2V5KVxuICAgICAqICAgYCR7RUxba2V5XX1gICAgPT4gIExhYmVsIGZvciB0aGUgdmFyaWFibGVcbiAgICAgKiAgIGAke0VWTFtrZXldfWAgID0+ICBMYWJlbCBmb3IgdGhlIHZhcmlhYmxlLCBpZiBhIHZhbHVlIGlzIHNldCB0b29cbiAgICAgKiAgIGAke0VWW2tleV19YCAgID0+ICBWYWx1ZSBvZiB0aGUgdmFyaWFibGVcbiAgICAgKiAgIGAke0VWVltrZXldfWAgID0+ICBTYW1lIGFzIGAke0VWW2tleV19YFxuICAgICAqXG4gICAgICogSWYgbm8gYXBwcm9wcmlhdGUgdmFsdWUgY2FuIGJlIGZvdW5kIGZvciBhIHBsYWNlaG9sZGVyXG4gICAgICogaXQgd2lsbCBzaW1wbHkgYmUgcmVtb3ZlZCAoL3JlcGxhY2VkIHdpdGggJycpLlxuICAgICAqXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gICAgICBzdHJJbnB1dCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtvbC5GZWF0dXJlfSAgZmVhdHVyZSAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICByZXBsYWNlRWRpdG9yVmFyc1BsYWNlaG9sZGVyczogZnVuY3Rpb24gKHN0cklucHV0LCBmZWF0dXJlKSB7XG4gICAgICB2YXIgc3RyT3V0cHV0O1xuXG4gICAgICBpZiAoIXN0cklucHV0IHx8ICFmZWF0dXJlIHx8IHR5cGVvZiBmZWF0dXJlLmdldCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gc3RySW5wdXQ7XG4gICAgICB9XG5cbiAgICAgIHN0ck91dHB1dCA9IHN0cklucHV0LnJlcGxhY2UoXG4gICAgICAgICAgL1xcJFxceyhFVj9bTFZdKShbXlxcfV0qKVxcfS9nLFxuICAgICAgICAgIGZ1bmN0aW9uIChtYXRjaCwgdHlwZSwgZXZLZXksIG9mZnNldCwgb3JpZ2luU3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgZWRpdG9yVmFycyxcbiAgICAgICAgICAgICAgICBpO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBmZWF0dXJlIGhhcyBlZGl0b3JWYXJzXG4gICAgICAgICAgICBpZiAoZmVhdHVyZS5nZXQoJ2VkaXRvclZhcnMnKSkge1xuICAgICAgICAgICAgICBlZGl0b3JWYXJzID0gZmVhdHVyZS5nZXQoJ2VkaXRvclZhcnMnKTtcbiAgICAgICAgICAgICAgLy8gc2VhcmNoIGZvciBlZGl0b3JWYXIgd2l0aCBrZXkgPT0gZXZLZXlcbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGVkaXRvclZhcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWRpdG9yVmFyc1tpXS5rZXkgPT09IGV2S2V5KSB7XG4gICAgICAgICAgICAgICAgICAvLyBpZiB0eXBlIGlzICdFVkwnIGRpc3BsYXkgbGFiZWwgb25seSBpZiBhIHZhbHVlIGlzIHNldCB0b29cbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnRUwnIHx8ICh0eXBlID09PSAnRVZMJyAmJiBlZGl0b3JWYXJzW2ldLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWRpdG9yVmFyc1tpXS5sYWJlbDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlZGl0b3JWYXJzW2ldLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgIH1cbiAgICAgICk7IC8vIGVuZCBvZiByZXBsYWNlKClcblxuICAgICAgcmV0dXJuIHN0ck91dHB1dDtcbiAgICB9LCAvLyBlbmQgb2YgcmVwbGFjZUVkaXRvclZhcnNQbGFjZWhvbGRlcnMoKVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZSBldmVyeSBvY2N1cmFuY2Ugb2YgYCR7YXR0cn1gLCBpbiBgc3RySW5wdXRgLFxuICAgICAqIHdpdGggdGhlIHJlc3VsdCBvZiBgZmVhdHVyZS5nZXQoYXR0cilgLCBpZiBpdCBleGlzdC5cbiAgICAgKiBPdGhlcndpc2UgdGhlIHBsYWNlaG9sZGVyIHdpbGwgYmUgc2ltcGx5IHJlbW92ZWQgKC9yZXBsYWNlZCB3aXRoICcnKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgc3RySW5wdXQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuRmVhdHVyZX0gIGZlYXR1cmUgICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcmVwbGFjZUF0dHJpYnV0ZVBsYWNlaG9sZGVyczogZnVuY3Rpb24gKHN0cklucHV0LCBmZWF0dXJlKSB7XG4gICAgICB2YXIgc3RyT3V0cHV0O1xuXG4gICAgICBpZiAoIXN0cklucHV0IHx8ICFmZWF0dXJlIHx8IHR5cGVvZiBmZWF0dXJlLmdldCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gc3RySW5wdXQ7XG4gICAgICB9XG5cbiAgICAgIHN0ck91dHB1dCA9IHN0cklucHV0LnJlcGxhY2UoXG4gICAgICAgICAgL1xcJFxceyhbXlxcfV0qKVxcfS9nLFxuICAgICAgICAgIGZ1bmN0aW9uIChtYXRjaCwgYXR0ciwgb2Zmc2V0LCBvcmlnaW5TdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmZWF0dXJlLmdldChhdHRyKSB8fCAnJztcbiAgICAgICAgICB9XG4gICAgICApOyAvLyBlbmQgb2YgcmVwbGFjZSgpXG5cbiAgICAgIHJldHVybiBzdHJPdXRwdXQ7XG4gICAgfSwgLy8gZW5kIG9mIHJlcGxhY2VBdHRyaWJ1dGVQbGFjZWhvbGRlcnMoKVxuXG4gICAgb2JqZWN0VG9BcnJheTogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBvYmplY3QgPSBPYmplY3Qua2V5cyhvYmplY3QpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSwgLy8gZW5kIG9mIG9iamVjdFRvQXJyYXkoKVxuXG4gICAgZ2V0VmVjdG9yTGF5ZXIoc291cmNlLCBzdHlsZSkge1xuICAgICAgICB2YXIgZm5TdHlsZTtcblxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgc3R5bGUgaXMgYSBmdW5jdGlvblxuICAgICAgICBpZiAodHlwZW9mIHN0eWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBmblN0eWxlID0gc3R5bGU7XG4gICAgICAgIH0gZWxzZSBpZiAoc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm5TdHlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBvbC5sYXllci5WZWN0b3Ioe1xuICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICBzdHlsZTogZm5TdHlsZVxuICAgICAgICB9KTtcbiAgICB9LC8vIGVuZCBvZiBcImdldFZlY3RvckxheWVyKClcIlxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHN1YmRvbWFpbiBmcm9tIHRoZSBjdXJyZW50IHJlcXVlc3QgaG9zdCBhbmQgcmV0dXJucyBpdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nIHwgKn1cbiAgICAgKi9cbiAgICBnZXRDdXJyZW50U3ViZG9tYWluKCkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIH0sXG5cbiAgICByZWRyYXdNYXBWaWV3OiBmdW5jdGlvbiAobWFwQ29udHJvbGxlcikge1xuICAgICAgdmFyIG1hcERhdGEgPSBtYXBDb250cm9sbGVyLmRhdGE7XG4gICAgICB2YXIgY29udHJvbENvbnRhaW5lclRvcExlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9UTCArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICBtYXBDb250cm9sbGVyLiRvdmVybGF5Y29udGFpbmVyX3N0b3BldmVudC5wcmVwZW5kKGNvbnRyb2xDb250YWluZXJUb3BMZWZ0KTtcblxuICAgICAgdmFyIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTF9DT05UQUlORVJfQkwgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFO1xuICAgICAgJChjb250cm9sQ29udGFpbmVyVG9wTGVmdCkuYWZ0ZXIoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQpO1xuICAgICAgbWFwQ29udHJvbGxlci5sZWZ0U2xpZGVFbGVtZW50cy5wdXNoKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KTtcblxuICAgICAgdmFyIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1Yi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTF9DT05UQUlORVJfQkxfU1VCICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcblxuICAgICAgaWYgKG1hcERhdGEuc2NhbGVsaW5lKSB7XG4gICAgICAgIG1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUNvbnRyb2wobWFwQ29udHJvbGxlci5jb250cm9scy5zY2FsZWxpbmUpO1xuICAgICAgICBtYXBDb250cm9sbGVyLmNvbnRyb2xzLnNjYWxlbGluZSA9IG5ldyBvbC5jb250cm9sLlNjYWxlTGluZSh7XG4gICAgICAgICAgbWFwVmlldzogbWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLFxuICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQsXG4gICAgICAgICAgdW5kZWZpbmVkSFRNTDogJ04vQSdcbiAgICAgICAgfSk7XG4gICAgICAgIG1hcENvbnRyb2xsZXIubWFwLmFkZENvbnRyb2wobWFwQ29udHJvbGxlci5jb250cm9scy5zY2FsZWxpbmUpO1xuICAgICAgfVxuXG4gICAgICAkKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KS5hcHBlbmQoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIpO1xuXG4gICAgICBpZiAobWFwRGF0YS56b29tbGV2ZWwpIHtcbiAgICAgICAgbWFwQ29udHJvbGxlci5tYXAucmVtb3ZlQ29udHJvbChtYXBDb250cm9sbGVyLmNvbnRyb2xzLnpvb21sZXZlbCk7XG4gICAgICAgIG1hcENvbnRyb2xsZXIuY29udHJvbHMuem9vbWxldmVsID0gbmV3IFpvb21sZXZlbCh7XG4gICAgICAgICAgbWFwVmlldzogbWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLFxuICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIsXG4gICAgICAgICAgdW5kZWZpbmVkSFRNTDogJ04vQSdcbiAgICAgICAgfSk7XG4gICAgICAgIG1hcENvbnRyb2xsZXIubWFwLmFkZENvbnRyb2wobWFwQ29udHJvbGxlci5jb250cm9scy56b29tbGV2ZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAobWFwRGF0YS5tb3VzZXBvc2l0aW9uKSB7XG4gICAgICAgIG1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUNvbnRyb2wobWFwQ29udHJvbGxlci5jb250cm9scy5tb3VzZXBvc2l0aW9uKTtcbiAgICAgICAgbWFwQ29udHJvbGxlci5jb250cm9scy5tb3VzZXBvc2l0aW9uID0gbmV3IG9sLmNvbnRyb2wuTW91c2VQb3NpdGlvbih7XG4gICAgICAgICAgcHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgICAgY29vcmRpbmF0ZUZvcm1hdDogb2wuY29vcmRpbmF0ZS50b1N0cmluZ0hETVMsXG4gICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YixcbiAgICAgICAgICB1bmRlZmluZWRIVE1MOiAnTi9BJ1xuICAgICAgICB9KTtcbiAgICAgICAgbWFwQ29udHJvbGxlci5tYXAuYWRkQ29udHJvbChtYXBDb250cm9sbGVyLmNvbnRyb2xzLm1vdXNlcG9zaXRpb24pO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZVtrZXldIHx8ICcnO1xuICAgIH0sXG4gICAgc3RvcmVWYWx1ZTogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGxvY2FsU3RvcmFnZVtrZXldID0gdmFsdWU7IC8vIG9ubHkgc3RyaW5nc1xuICAgIH1cbiAgfSk7XG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIHV0aWxzID0gdGhpcy5jNGcubWFwcy51dGlscztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLXV0aWxzLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xuXG4vL2ZvciBqc2xpbnRcbi8qanNsaW50IGJyb3dzZXI6dHJ1ZSovXG4vKmpzbGludCB0b2RvOnRydWUgKi9cbi8qZ2xvYmFsIHdpbmRvdyovXG4vKmdsb2JhbCBvbCovXG4vKmdsb2JhbCBCcm93c2VyKi9cbi8qZ2xvYmFsIERvY3VtZW50OnRydWUgKi9cbi8qZ2xvYmFsIGpRdWVyeSovXG52YXIgYzRnID0gdGhpcy5jNGc7XG5cbmltcG9ydCB7TWFwUHJveHl9IGZyb20gXCIuL2M0Zy1tYXBzLXByb3h5XCI7XG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuaW1wb3J0IHtTcGlubmVyfSBmcm9tIFwiLi9jNGctbWFwcy1taXNjLXNwaW5uZXJcIjtcbmltcG9ydCB7TWFwSG92ZXJ9IGZyb20gXCIuL2M0Zy1tYXBzLW1pc2MtbWFwaG92ZXJcIjtcbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5pbXBvcnQge1JvdXRlcn0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1yb3V0ZXJcIjtcbmltcG9ydCB7TWVhc3VyZXRvb2xzfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLW1lYXN1cmV0b29sc1wiO1xuaW1wb3J0IHtQcmludH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1wcmludFwiO1xuaW1wb3J0IHtHcmlkfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLWdyaWRcIjtcbmltcG9ydCB7Wm9vbWxldmVsfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXpvb21sZXZlbFwiO1xuaW1wb3J0IHtPdmVydmlld01hcH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1vdmVydmlld21hcFwiO1xuaW1wb3J0IHtQZXJtYWxpbmt9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtcGVybWFsaW5rXCI7XG5pbXBvcnQge1N0YXJib2FyZH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRcIjtcbmltcG9ydCB7RWRpdG9yfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLWVkaXRvclwiO1xuaW1wb3J0IHtBY2NvdW50fSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLWFjY291bnRcIjtcbmltcG9ydCB7R2VvUGlja2VyfSBmcm9tIFwiLi9jNGctbWFwcy1pbnRlcmFjdGlvbi1nZW9waWNrZXJcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKipcbiAgICAgKiBbTWFwQ29udHJvbGxlciBkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0ge2pzb24tb2JqZWN0fSAgbWFwRGF0YSAgT2JqZWN0IHRvIGNvbmZpZ3VyZSBjb240Z2lzLW1hcHMuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlZSBcImRvY3MvbWFwRGF0YS12YWx1ZXMubWRcIlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBnZXQgYSBsaXN0IG9mIHZhbGlkIHZhbHVlcyBmb3IgdGhpcyBvYmplY3QuXG4gICAgICovXG4gICAgYzRnLm1hcHMuTWFwQ29udHJvbGxlciA9IGZ1bmN0aW9uIChtYXBEYXRhKSB7XG5cbiAgICAgICAgLy8tLS1cbiAgICAgICAgdGhpcy5tYXAgPSBudWxsO1xuICAgICAgICAvLyB0aGlzLmNvbnRyb2xzID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZWZ0U2xpZGVFbGVtZW50cyA9IFtdO1xuICAgICAgICB0aGlzLnJpZ2h0U2xpZGVFbGVtZW50cyA9IFtdO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgIHBlcm1hbGluayA9IGZhbHNlLFxuICAgICAgICAgICAgbWluWm9vbSxcbiAgICAgICAgICAgIG1heFpvb20sXG4gICAgICAgICAgICB2aWV3LFxuICAgICAgICAgICAgZ2VvTG9jYXRpb24sXG4gICAgICAgICAgICBjb250cm9scyA9IFtdLFxuICAgICAgICAgICAgaW50ZXJhY3Rpb25zID0gW10sXG4gICAgICAgICAgICBkaXNwbGF5QWxsTG9jYXRpb25zLFxuICAgICAgICAgICAgZG9tTWFwRGl2LFxuICAgICAgICAgICAga2luZXRpYyxcbiAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQsXG4gICAgICAgICAgICBjb250cm9sQ29udGFpbmVyVG9wUmlnaHQsXG4gICAgICAgICAgICBjb250cm9sQ29udGFpbmVyQm90dG9tUmlnaHQsXG4gICAgICAgICAgICBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YixcbiAgICAgICAgICAgIHN0YXJib2FyZF9sYWJlbCxcbiAgICAgICAgICAgIGxvZ29MaW5rLFxuICAgICAgICAgICAgbG9nb0dyYXBoaWMsXG4gICAgICAgICAgICByZW1vdmVFbGVtZW50LFxuICAgICAgICAgICAgZW5hYmxlU3RhcmJvYXJkID0gdHJ1ZTtcblxuICAgICAgICAvLy0tXG4gICAgICAgIG1hcERhdGEgPSAkLmV4dGVuZCh7XG4gICAgICAgICAgICBhcGk6IHt9LFxuICAgICAgICAgICAgYWRkSWRUb0RpdjogZmFsc2UsXG4gICAgICAgICAgICBtYXBJZDogMSxcbiAgICAgICAgICAgIG1hcERpdjogJ2M0Z19tYXAnLFxuICAgICAgICAgICAgY2VudGVyOiB7fSxcbiAgICAgICAgICAgIGNhbGNfZXh0ZW50OiAnQ0VOVEVSWk9PTScsXG4gICAgICAgICAgICBhdHRyaWJ1dGlvbjoge30sXG4gICAgICAgICAgICBlZGl0b3I6IHt9LFxuICAgICAgICAgICAgbWVhc3VyZXRvb2xzOiB7fSxcbiAgICAgICAgICAgIGluZm9wYWdlOiB7fSxcbiAgICAgICAgICAgIGFjY291bnQ6ICcnLFxuICAgICAgICAgICAgc3RhcmJvYXJkOiB7fSxcbiAgICAgICAgICAgIGxheWVyc3dpdGNoZXI6IHt9LFxuICAgICAgICAgICAgYmFzZWxheWVyc3dpdGNoZXI6IHt9LFxuICAgICAgICAgICAgZ2Vvc2VhcmNoOiB7fSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxQYW5lbDoge31cbiAgICAgICAgfSwgbWFwRGF0YSk7XG4gICAgICAgIGlmIChtYXBEYXRhLmNhbGNfZXh0ZW50ID09PSAnTE9DQVRJT05TJykge1xuICAgICAgICAgICAgbWFwRGF0YSA9ICQuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBtaW5fZ2FwOiAyNVxuICAgICAgICAgICAgfSwgbWFwRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIGNlbnRlclxuICAgICAgICBtYXBEYXRhLmNlbnRlciA9ICQuZXh0ZW5kKHtcbiAgICAgICAgICAgIGxhdDogNTIuMjIsXG4gICAgICAgICAgICBsb246IDkuNDMsXG4gICAgICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgICAgIHpvb206IDZcbiAgICAgICAgfSwgbWFwRGF0YS5jZW50ZXIpO1xuICAgICAgICAvLyBhdHRyaWJ1dGlvblxuICAgICAgICBtYXBEYXRhLmF0dHJpYnV0aW9uID0gJC5leHRlbmQoe1xuICAgICAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29sbGFwc2VkOiBmYWxzZVxuICAgICAgICB9LCBtYXBEYXRhLmF0dHJpYnV0aW9uKTtcbiAgICAgICAgLy8gZ2Vvc2VhcmNoXG4gICAgICAgIG1hcERhdGEuZ2Vvc2VhcmNoID0gJC5leHRlbmQoe1xuICAgICAgICAgICAgZW5hYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGRpdjogZmFsc2VcbiAgICAgICAgfSwgbWFwRGF0YS5nZW9zZWFyY2gpO1xuICAgICAgICAvLyBwZXJtYWxpbmtcbiAgICAgICAgbWFwRGF0YS5wZXJtYWxpbmsgPSAkLmV4dGVuZCh7XG4gICAgICAgICAgICBlbmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0X3BhcmFtZXRlcjogZmFsc2VcbiAgICAgICAgfSwgbWFwRGF0YS5wZXJtYWxpbmspO1xuICAgICAgICB0aGlzLmRhdGEgPSBtYXBEYXRhO1xuICAgICAgICBpZiAobWFwRGF0YS5hZGRJZFRvRGl2KSB7XG4gICAgICAgICAgICBtYXBEYXRhLm1hcERpdiArPSAnXycgKyBtYXBEYXRhLm1hcElkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBIUFN0b3JtIG1hcmtzIHRoaXMgYXMgZXJyb3IsIGJ1dCBpdCBpcyBub25lXG4gICAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIGZvciBwcmV2ZW50aW5nIGFuIGVycm9yIHdpdGggdGhlIE9TTS1PdmVycGFzcyBBUElcbiAgICAgICAgLy8gd2hpY2ggb2NjdXJzIHdoZW4gTW9vVG9vbHMgaXMgbG9hZGVkXG4gICAgICAgIGlmICh3aW5kb3cuTW9vVG9vbHMgJiYgQnJvd3Nlci5Eb2N1bWVudCkge1xuICAgICAgICAgICAgRG9jdW1lbnQgPSBCcm93c2VyLkRvY3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJveHkgPSBuZXcgTWFwUHJveHkoe21hcENvbnRyb2xsZXI6IHRoaXN9KTtcblxuICAgICAgICAvLyBjaGVjayBwZXJtYWxpbmtcbiAgICAgICAgaWYgKG1hcERhdGEucGVybWFsaW5rLmVuYWJsZSkge1xuICAgICAgICAgICAgcGVybWFsaW5rID0gdXRpbHMuZ2V0VXJsUGFyYW0obWFwRGF0YS5wZXJtYWxpbmsuZ2V0X3BhcmFtZXRlcik7XG5cbiAgICAgICAgICAgIGlmIChwZXJtYWxpbmspIHtcbiAgICAgICAgICAgICAgICBwZXJtYWxpbmsgPSBwZXJtYWxpbmsuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBlcm1hbGluay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHBlcm1hbGlua1swXSA9IHBhcnNlRmxvYXQocGVybWFsaW5rWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIubG9uID0gIWlzTmFOKHBlcm1hbGlua1swXSkgPyBwZXJtYWxpbmtbMF0gOiBtYXBEYXRhLmNlbnRlci5sb247XG4gICAgICAgICAgICAgICAgICAgIHBlcm1hbGlua1sxXSA9IHBhcnNlRmxvYXQocGVybWFsaW5rWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIubGF0ID0gIWlzTmFOKHBlcm1hbGlua1sxXSkgPyBwZXJtYWxpbmtbMV0gOiBtYXBEYXRhLmNlbnRlci5sYXQ7XG4gICAgICAgICAgICAgICAgICAgIHBlcm1hbGlua1syXSA9IHBhcnNlSW50KHBlcm1hbGlua1syXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmNlbnRlci56b29tID0gIWlzTmFOKHBlcm1hbGlua1syXSkgPyBwZXJtYWxpbmtbMl0gOiBtYXBEYXRhLmNlbnRlci56b29tO1xuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmtbM10gPSBwYXJzZUZsb2F0KHBlcm1hbGlua1szXSk7XG4gICAgICAgICAgICAgICAgICAgIG1hcERhdGEuY2VudGVyLnJvdGF0aW9uID0gIWlzTmFOKHBlcm1hbGlua1szXSkgPyBwZXJtYWxpbmtbM10gOiBtYXBEYXRhLmNlbnRlci5yb3RhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgcGVybWFsaW5rWzRdID0gcGFyc2VJbnQocGVybWFsaW5rWzRdLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIG1hcERhdGEuYmFzZWxheWVyID0gIWlzTmFOKHBlcm1hbGlua1s0XSkgPyBwZXJtYWxpbmtbNF0gOiBtYXBEYXRhLmJhc2VsYXllcjtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5sYXllcnMgPSBwZXJtYWxpbmtbNV0uc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVjb2RlIGRlbHRhRW5jb2RpbmdcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5sYXllcnMgPSB1dGlscy5kZWx0YURlY29kZShtYXBEYXRhLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgLy8gYmFzZWxheWVyIGFuZCBsYXllcnMgb25seVxuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmtbMF0gPSBwYXJzZUludChwZXJtYWxpbmtbMF0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5iYXNlbGF5ZXIgPSAhaXNOYU4ocGVybWFsaW5rWzBdKSA/IHBlcm1hbGlua1swXSA6IG1hcERhdGEuYmFzZWxheWVyO1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHBlcm1hbGlua1sxXS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWNvZGUgZGVsdGFFbmNvZGluZ1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHV0aWxzLmRlbHRhRGVjb2RlKG1hcERhdGEubGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAvLyBsYXllcnMgb25seVxuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHBlcm1hbGlua1swXS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWNvZGUgZGVsdGFFbmNvZGluZ1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHV0aWxzLmRlbHRhRGVjb2RlKG1hcERhdGEubGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgLy8gaW52YWxpZCBjb3VudCBvZiBwZXJtYWxpbmsgcGFyYW1ldGVyc1xuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmsgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hcERhdGEubGF5ZXJzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5sYXllcnMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcGVybWFsaW5rID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBqdXN0IHRvIG1ha2Ugc3VyZSB0aGlzIHZhciBpcyByZWFsbHkgXCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgcGVybWFsaW5rID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwRGF0YS5taW5ab29tICYmIG1hcERhdGEubWluWm9vbSA+IDApIHtcbiAgICAgICAgICAgIG1pblpvb20gPSBtYXBEYXRhLm1pblpvb207XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtaW5ab29tID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXBEYXRhLm1heFpvb20gJiYgbWFwRGF0YS5tYXhab29tID4gMCkge1xuICAgICAgICAgICAgbWF4Wm9vbSA9IG1hcERhdGEubWF4Wm9vbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heFpvb20gPSAxOTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXBEYXRhLmNhY2hpbmcpIHtcbiAgICAgICAgICAgIGlmICgodXRpbHMuZ2V0VmFsdWUoJ2xvbicpKSAmJiAodXRpbHMuZ2V0VmFsdWUoJ2xhdCcpKSkge1xuICAgICAgICAgICAgICAgIG1hcERhdGEuY2VudGVyLmxvbiA9IHV0aWxzLmdldFZhbHVlKCdsb24nKTtcbiAgICAgICAgICAgICAgICBtYXBEYXRhLmNlbnRlci5sYXQgPSB1dGlscy5nZXRWYWx1ZSgnbGF0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1dGlscy5nZXRWYWx1ZSgnem9vbScpKSB7XG4gICAgICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIuem9vbSA9IHV0aWxzLmdldFZhbHVlKCd6b29tJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2aWV3ID0gbmV3IG9sLlZpZXcoe1xuICAgICAgICAgICAgLy8gcHJvamVjdGlvbjogb2wucHJvai5nZXQoJ0VQU0c6NDMyNicpLFxuICAgICAgICAgICAgLy8gY2VudGVyOiBbcGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlcl9sb24pLCBwYXJzZUZsb2F0KG1hcERhdGEuY2VudGVyX2xhdCldLFxuICAgICAgICAgICAgLy8gbWluUmVzb2x1dGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgLy8gbWF4UmVzb2x1dGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY2VudGVyOiBvbC5wcm9qLnRyYW5zZm9ybShbcGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlci5sb24pLCBwYXJzZUZsb2F0KG1hcERhdGEuY2VudGVyLmxhdCldLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpLFxuICAgICAgICAgICAgem9vbTogcGFyc2VJbnQobWFwRGF0YS5jZW50ZXIuem9vbSwgMTApLFxuICAgICAgICAgICAgbWluWm9vbTogcGFyc2VJbnQobWluWm9vbSwgMTApLFxuICAgICAgICAgICAgbWF4Wm9vbTogcGFyc2VJbnQobWF4Wm9vbSwgMTApLFxuICAgICAgICAgICAgcm90YXRpb246IHBhcnNlRmxvYXQobWFwRGF0YS5jZW50ZXIucm90YXRpb24pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNoZWNrIHVzZXJwb3NpdGlvblxuICAgICAgICBpZiAobWFwRGF0YS5nZW9sb2NhdGlvbiAmJiAhcGVybWFsaW5rICkge1xuICAgICAgICAgICAgZ2VvTG9jYXRpb24gPSBuZXcgb2wuR2VvbG9jYXRpb24oe1xuICAgICAgICAgICAgICAgIC8vdHJhY2tpbmc6ICFtYXBEYXRhLmdlb3BpY2tlcixcbiAgICAgICAgICAgICAgICB0cmFja2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiB2aWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBnZW9Mb2NhdGlvbi5vbignY2hhbmdlJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgICBpZiAoZ2VvTG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNldENlbnRlcihnZW9Mb2NhdGlvbi5nZXRQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICBpZiAobWFwRGF0YS5nZW9sb2NhdGlvbl96b29tKSB7XG4gICAgICAgICAgICAgICAgICB2aWV3LnNldFpvb20ocGFyc2VJbnQobWFwRGF0YS5nZW9sb2NhdGlvbl96b29tLCAxMCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnZW9Mb2NhdGlvbi5zZXRUcmFja2luZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYubWFwKSB7XG4gICAgICAgICAgICAgICAgICBzZWxmLm1hcC5zZXRWaWV3KHZpZXcpO1xuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLnJlZHJhd01hcFZpZXcoc2VsZik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVuYWJsZSBkZWZhdWx0IENvbnRyb2xzL0ludGVyYWN0aW9ucyBpZiB0aGVyZSBpcyBubyBwcm9maWxlXG4gICAgICAgIC8vIFtub3RlXTogbWF5YmUgY2hhbmdlIHRoaXMgaW4gdGhlIGZ1dHVyZT8gLT4gXCJubyBkZWZhdWx0XCItb3B0aW9uP1xuICAgICAgICBpZiAoIW1hcERhdGEucHJvZmlsZSkge1xuICAgICAgICAgICAgY29udHJvbHMgPSBvbC5jb250cm9sLmRlZmF1bHRzKCk7XG4gICAgICAgICAgICBpbnRlcmFjdGlvbnMgPSBvbC5pbnRlcmFjdGlvbi5kZWZhdWx0cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IGRlZmF1bHQgYmFzZSBsYXllciB3aGVuIGJhY2tlbmQgZ2VvcGlja2VyIGlzIGVuYWJsZWRcbiAgICAgICAgaWYgKG1hcERhdGEuZ2VvcGlja2VyICYmIG1hcERhdGEuZ2VvcGlja2VyLnR5cGUgPT09IFwiYmFja2VuZFwiKSB7XG4gICAgICAgICAgICBpZiAobWFwRGF0YS5kZWZhdWx0X2Jhc2VsYXllcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfbG9hZGVkLnB1c2goZnVuY3Rpb24gKGJhc2VsYXllcklkcykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuc2hvd0Jhc2VMYXllcihtYXBEYXRhLmRlZmF1bHRfYmFzZWxheWVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gLy8gZW5kIGlubmVyIGlmXG4gICAgICAgICAgICB0aGlzLm1hcCA9IG5ldyBvbC5NYXAoe1xuICAgICAgICAgICAgICAgIGNvbnRyb2xzOiBjb250cm9scyxcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbnM6IGludGVyYWN0aW9ucyxcbiAgICAgICAgICAgICAgICBsYXllcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQmFzZSBtYXBzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja1N1bTogJ2Jhc2VNYXBzTGF5ZXInXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBsb2FkVGlsZXNXaGlsZUFuaW1hdGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG1hcERhdGEubWFwRGl2LFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSBNYXBcbiAgICAgICAgICAgIC8vXG5cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLmRlZmF1bHRfYmFzZWxheWVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm94eS5ob29rX2Jhc2VsYXllcl9sb2FkZWQucHVzaChmdW5jdGlvbiAoYmFzZWxheWVySWRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXBEYXRhLmJhc2VsYXllciAmJiBiYXNlbGF5ZXJJZHMuaW5kZXhPZihtYXBEYXRhLmJhc2VsYXllci50b1N0cmluZygpKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmRlZmF1bHRfYmFzZWxheWVyID0gbWFwRGF0YS5iYXNlbGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobWFwRGF0YS5jYWNoaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbHMuZ2V0VmFsdWUoJ2Jhc2VsYXllcicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5kZWZhdWx0X2Jhc2VsYXllciA9IHV0aWxzLmdldFZhbHVlKCdiYXNlbGF5ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5zaG93QmFzZUxheWVyKG1hcERhdGEuZGVmYXVsdF9iYXNlbGF5ZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXAgPSBuZXcgb2wuTWFwKHtcbiAgICAgICAgICAgICAgICBjb250cm9sczogY29udHJvbHMsXG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25zOiBpbnRlcmFjdGlvbnMsXG4gICAgICAgICAgICAgICAgbGF5ZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBvbC5sYXllci5Hcm91cCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0Jhc2UgbWFwcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllcnM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tTdW06ICdiYXNlTWFwc0xheWVyJ1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgbG9hZFRpbGVzV2hpbGVBbmltYXRpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBtYXBEYXRhLm1hcERpdixcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcERhdGEubWFwID0gdGhpcy5tYXA7XG5cbiAgICAgIC8vIHNldCBleHRlbnQgdG8gbWFrZSBhbGwgbG9jYXRpb25zIHZpc2libGUgaWYgd2FudGVkXG4gICAgICAgIGlmIChtYXBEYXRhLmNhbGNfZXh0ZW50ID09PSBcIkxPQ0FUSU9OU1wiKSB7XG4gICAgICAgICAgICBkaXNwbGF5QWxsTG9jYXRpb25zID0gZnVuY3Rpb24gKGxheWVySWRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxheWVycyA9IHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVycyxcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LFxuICAgICAgICAgICAgICAgICAgICBjb29yZHMsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgICAgICAgICAgICAgICBleHRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVMaXN0LFxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGxheWVyR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjtcbiAgICAgICAgICAgICAgICAvLyBkZWxldGUgZnVuY3Rpb24gZnJvbSBob29rIGFycmF5XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNbdGhpcy5pbmRleE9mKGRpc3BsYXlBbGxMb2NhdGlvbnMpXTtcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlcyA9IFtdO1xuICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSByZXN1bHRpbmcgZXh0ZW50IG9mIGFsbCBnZW9tZXRyaWVzXG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gbGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIgPSBsYXllcnNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxheWVyLnR5cGUgPT0gXCJvdmVycGFzc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXkgPSBsYXllci5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckFycmF5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXRjaCBjYXNlIG9mIGxpbmtlZCBsYXllcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmVjdG9yQXJyYXkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JBcnJheSA9IHV0aWxzLm9iamVjdFRvQXJyYXkodmVjdG9yQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJHcm91cCA9IGxheWVyLnZlY3RvckxheWVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckFycmF5ICYmIHZlY3RvckFycmF5LmZvckVhY2ggJiYgdHlwZW9mIHZlY3RvckFycmF5LmZvckVhY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JBcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2ZWN0b3JMYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVjdG9yTGF5ZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5kYXRhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LnR5cGUgPT09IFwiUG9pbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkcyA9IG9sLnByb2oudHJhbnNmb3JtKFtwYXJzZUZsb2F0KHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0pXSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb29yZHNbMF09PVwiSW5maW5pdHlcInx8Y29vcmRzWzBdPT1cIi1JbmZpbml0eVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5ID0gbmV3IG9sLmdlb20uUG9pbnQoY29vcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgbW9yZSBjb21wbGV4IGdlb21ldHJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlTGlzdCA9IGxheWVyR3JvdXAuZ2V0TGF5ZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUFycmF5ID0gZmVhdHVyZUxpc3QuZ2V0QXJyYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIudHlwZSA9PT0gXCJrbWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZlYXR1cmUuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgc291cmNlRmVhdHVyZXMgPSBzb3VyY2UuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5nZXRFeHRlbnQoKS5mb3JFYWNoKGZ1bmN0aW9uIChjb29yZGluYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChjb29yZGluYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wTGVmdChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKG9sLmV4dGVudC5nZXRCb3R0b21SaWdodChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKG9sLmV4dGVudC5nZXRCb3R0b21MZWZ0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGV4dGVudCA9IG9sLmV4dGVudC5ib3VuZGluZ0V4dGVudChjb29yZGluYXRlcyk7XG4gICAgICAgICAgICAgICAgaWYoZXh0ZW50WzBdPT1cIkluZmluaXR5XCJ8fGV4dGVudFswXT09XCItSW5maW5pdHlcIil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL1RPRE86IGNhdGNoIGNhc2UgbWluX2dhcCBpcyBhbHJlYWR5IGFuIGFycmF5XG4gICAgICAgICAgICAgICAgcGFkZGluZyA9IFttYXBEYXRhLm1pbl9nYXAsIG1hcERhdGEubWluX2dhcCwgbWFwRGF0YS5taW5fZ2FwLCBtYXBEYXRhLm1pbl9nYXBdO1xuICAgICAgICAgICAgICAgIHNlbGYubWFwLmdldFZpZXcoKS5maXQoZXh0ZW50LCBzZWxmLm1hcC5nZXRTaXplKCksIHtwYWRkaW5nOiBwYWRkaW5nfSk7XG4gICAgICAgICAgICAgICAgY2VudGVyID0gc2VsZi5tYXAuZ2V0VmlldygpLmdldENlbnRlcigpO1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihjZW50ZXJbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLmdldFZpZXcoKS5zZXRDZW50ZXIoWzUwLCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm1hcC5nZXRWaWV3KCkuc2V0Wm9vbShtYXBEYXRhLm1pblpvb20gfHwgMTApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnByb3h5Lmhvb2tfbGF5ZXJfdmlzaWJpbGl0eS5wdXNoKGRpc3BsYXlBbGxMb2NhdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IG1hcC1zaXplIGFuZCAtbWFyZ2luXG4gICAgICAgIGRvbU1hcERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hcERhdGEubWFwRGl2KTtcblxuICAgICAgICBpZiAoZG9tTWFwRGl2ICYmIGRvbU1hcERpdi5zdHlsZSkge1xuICAgICAgICAgICAgaWYgKG1hcERhdGEud2lkdGgpIHtcbiAgICAgICAgICAgICAgICBkb21NYXBEaXYuc3R5bGUud2lkdGggPSBtYXBEYXRhLndpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcERhdGEuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLmhlaWdodCA9IG1hcERhdGEuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcERhdGEubWFyZ2luKSB7XG4gICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLm1hcmdpbiA9IG1hcERhdGEubWFyZ2luO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdjYW4gbm90IGdldCBlbGVtZW50IGJ5IGlkIG1hcERhdGEubWFwRGl2Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hcC51cGRhdGVTaXplKCk7XG4gICAgICAgIHRoaXMucHJveHkuaW5pdGlhbGl6ZSgpO1xuICAgICAgICAvLyB0aGlzLnByb3h5LmxvYWRCYXNlTGF5ZXJzKCk7XG4gICAgICAgIC8vIHRoaXMucHJveHkubG9hZExheWVycygpO1xuICAgICAgICAvLyAtLS1cblxuICAgICAgICAvLyBzYXZlIG92ZXJsYXljb250YWluZXJcbiAgICAgICAgdGhpcy4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQgPSAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9PVkVSTEFZQ09OVEFJTkVSX1NFKTtcbiAgICAgICAgLy8gYWRkIFNwaW5uZXJcbiAgICAgICAgdGhpcy5zcGlubmVyID0gbmV3IFNwaW5uZXIoe2NsYXNzTmFtZTogY3NzQ29uc3RhbnRzLkxBUkdFfSk7XG4gICAgICAgIC8vIGFkZCBtYXBIb3ZlclxuICAgICAgICB0aGlzLm1hcEhvdmVyID0gbmV3IE1hcEhvdmVyKHttYXBDb250cm9sbGVyOiB0aGlzfSk7XG5cbiAgICAgICAgLy8gYWRkIGludGVyYWN0aW9ucyA9PT1cbiAgICAgICAgLy9cblxuICAgICAgICAvLyBtb3VzZSBuYXZpZ2F0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLm1vdXNlX25hdikge1xuICAgICAgICAgICAgLy8gZHJhZyBwYW4gYW5kIGtpbmV0aWMgc2Nyb2xsaW5nXG4gICAgICAgICAgICBpZiAobWFwRGF0YS5tb3VzZV9uYXYuZHJhZ19wYW4pIHtcbiAgICAgICAgICAgICAgICBraW5ldGljID0gbWFwRGF0YS5tb3VzZV9uYXYua2luZXRpYyA/IG5ldyBvbC5LaW5ldGljKC0wLjAwNSwgMC4wNSwgMTAwKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IG9sLmludGVyYWN0aW9uLkRyYWdQYW4oe2tpbmV0aWM6IGtpbmV0aWN9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBtb3VzZXdoZWVsIHpvb21cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLm1vdXNlX25hdi53aGVlbF96b29tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IG9sLmludGVyYWN0aW9uLk1vdXNlV2hlZWxab29tKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG91YmxlY2xpY2sgem9vbVxuICAgICAgICAgICAgaWYgKG1hcERhdGEubW91c2VfbmF2LmRvdWJsZWNsaWNrX3pvb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uRG91YmxlQ2xpY2tab29tKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYm94IHpvb21cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLm1vdXNlX25hdi5kcmFnX3pvb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uRHJhZ1pvb20oe2NvbmRpdGlvbjogb2wuZXZlbnRzLmNvbmRpdGlvbi5zaGlmdEtleU9ubHl9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkcmFnIHJvdGF0ZSAoJiB6b29tKVxuICAgICAgICAgICAgaWYgKG1hcERhdGEubW91c2VfbmF2LmRyYWdfcm90YXRlX3pvb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uRHJhZ1JvdGF0ZUFuZFpvb20oe2NvbmRpdGlvbjogb2wuZXZlbnRzLmNvbmRpdGlvbi5hbHRLZXlPbmx5fSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXBEYXRhLm1vdXNlX25hdi5kcmFnX3JvdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBvbC5pbnRlcmFjdGlvbi5EcmFnUm90YXRlKHtjb25kaXRpb246IG9sLmV2ZW50cy5jb25kaXRpb24uYWx0S2V5T25seX0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB0b3VjaCBuYXZpZ2F0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLnRvdWNoX25hdikge1xuICAgICAgICAgICAgLy8gcm90YXRlIChwaW5jaClcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLnRvdWNoX25hdi5yb3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uUGluY2hSb3RhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB6b29tIChwaW5jaClcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLnRvdWNoX25hdi56b29tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IG9sLmludGVyYWN0aW9uLlBpbmNoWm9vbSh7Y29uc3RyYWluUmVzb2x1dGlvbjogdHJ1ZX0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBrZXlib2FyZCBuYXZpZ2F0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLmtleWJvYXJkX25hdikge1xuICAgICAgICAgICAgLy8gcGFuIChhcnJvdyBrZXlzKVxuICAgICAgICAgICAgaWYgKG1hcERhdGEua2V5Ym9hcmRfbmF2LnBhbikge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBvbC5pbnRlcmFjdGlvbi5LZXlib2FyZFBhbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHpvb20gKFwiK1wiIGFuZCBcIi1cIiBrZXkpXG4gICAgICAgICAgICBpZiAobWFwRGF0YS5rZXlib2FyZF9uYXYuem9vbSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBvbC5pbnRlcmFjdGlvbi5LZXlib2FyZFpvb20oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gPT09XG5cbiAgICAgICAgLy8gYWRkIGNvbnRyb2wtY29udGFpbmVycyA9PT1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gdG9wLWxlZnRcbiAgICAgICAgY29udHJvbENvbnRhaW5lclRvcExlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udHJvbENvbnRhaW5lclRvcExlZnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX1RMICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcbiAgICAgICAgdGhpcy4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQucHJlcGVuZChjb250cm9sQ29udGFpbmVyVG9wTGVmdCk7XG4gICAgICAgIC8vIGJvdHRvbS1sZWZ0XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9CTCArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgICQoY29udHJvbENvbnRhaW5lclRvcExlZnQpLmFmdGVyKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KTtcbiAgICAgICAgLy8gZWxlbWVudCBuZWVkcyB0byBiZSBtb3ZlZCB3aGVuIFBvcnRzaWRlIHdpbGwgYmUgb3BlbmVkXG4gICAgICAgIHRoaXMubGVmdFNsaWRlRWxlbWVudHMucHVzaChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCk7XG4gICAgICAgIC8vIHRvcC1yaWdodFxuICAgICAgICBjb250cm9sQ29udGFpbmVyVG9wUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udHJvbENvbnRhaW5lclRvcFJpZ2h0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9UUiArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgICQoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQpLmFmdGVyKGNvbnRyb2xDb250YWluZXJUb3BSaWdodCk7XG4gICAgICAgIC8vIGVsZW1lbnQgbmVlZHMgdG8gYmUgbW92ZWQgd2hlbiBTdGFyYm9hcmQgd2lsbCBiZSBvcGVuZWRcbiAgICAgICAgdGhpcy5yaWdodFNsaWRlRWxlbWVudHMucHVzaChjb250cm9sQ29udGFpbmVyVG9wUmlnaHQpO1xuICAgICAgICAvLyBib3R0b20tcmlnaHRcbiAgICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbVJpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTF9DT05UQUlORVJfQlIgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFO1xuICAgICAgICAkKGNvbnRyb2xDb250YWluZXJUb3BSaWdodCkuYWZ0ZXIoY29udHJvbENvbnRhaW5lckJvdHRvbVJpZ2h0KTtcbiAgICAgICAgLy8gZWxlbWVudCBuZWVkcyB0byBiZSBtb3ZlZCB3aGVuIFN0YXJib2FyZCB3aWxsIGJlIG9wZW5lZFxuICAgICAgICB0aGlzLnJpZ2h0U2xpZGVFbGVtZW50cy5wdXNoKGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodCk7XG4gICAgICAgIC8vID09PVxuICAgICAgICAvLyBhZGQgY29udHJvbHMgPT09XG4gICAgICAgIHRoaXMuY29udHJvbHMgPSB7fTtcbiAgICAgICAgLy9cblxuXG4gICAgICAgIC8vIGFjY291bnRcbiAgICAgICAgaWYgKG1hcERhdGEuYWNjb3VudCAmJiB0eXBlb2YgQWNjb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5hY2NvdW50ID0gbmV3IEFjY291bnQoe1xuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfQUNDT1VOVCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAgICAgICAgIGNhY2hpbmc6IG1hcERhdGEuY2FjaGluZyxcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5hY2NvdW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHpvb20tY29udHJvbHNcbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9wYW5lbCB8fCBtYXBEYXRhLnpvb21fc2xpZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnpvb20gPSBuZXcgb2wuY29udHJvbC5ab29tKHtcbiAgICAgICAgICAgICAgICB6b29tSW5MYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHpvb21PdXRMYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHpvb21JblRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfWk9PTV9JTixcbiAgICAgICAgICAgICAgICB6b29tT3V0VGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX09VVCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy56b29tKTtcblxuICAgICAgICAgICAgaWYgKG1hcERhdGEuem9vbV9zbGlkZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnpvb21zbGlkZXIgPSBuZXcgb2wuY29udHJvbC5ab29tU2xpZGVyKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX1NMSURFUixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcExlZnRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnpvb21zbGlkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtYXBEYXRhLnpvb21fZXh0ZW50ICYhIG1hcERhdGEuem9vbV9zbGlkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuem9vbV9leHRlbnQgPSBuZXcgb2wuY29udHJvbC5ab29tVG9FeHRlbnQoe1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX0VYVCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy56b29tX2V4dGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9ob21lICYhIG1hcERhdGEuem9vbV9zbGlkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuem9vbV9ob21lID0gbmV3IGM0Zy5tYXBzLmNvbnRyb2wuSG9tZSh7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICcgJyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlTGFiZWw6ICcgJyxcbiAgICAgICAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX1pPT01fSE9NRSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnpvb21faG9tZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwRGF0YS56b29tX3Bvc2l0aW9uICYhIG1hcERhdGEuem9vbV9zbGlkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuem9vbV9wb3NpdGlvbiA9IG5ldyBjNGcubWFwcy5jb250cm9sLlBvc2l0aW9uKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIGRpc2FibGVMYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfWk9PTV9QT1MsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy56b29tX3Bvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbWJpbmVkIHpvb20tY29udHJvbHNcbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9zbGlkZXIpIHtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT00pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NX1dJVEhfU0xJREVSKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTSk7XG4gICAgICAgICAgICAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NX0lOKS5hZnRlcigkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NX1NMSURFUiArICcgYnV0dG9uJykuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT01fU0xJREVSKSk7XG4gICAgICAgICAgICAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NX1NMSURFUiArICcuJyArIGNzc0NvbnN0YW50cy5PTF9DT05UUk9MKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXBEYXRhLnpvb21fcGFuZWwgJiYgbWFwRGF0YS56b29tX2V4dGVudCkge1xuICAgICAgICAgICAgJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT01fV0lUSF9FWFQpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fSU4pLmFmdGVyKCQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fRVhUICsgJyBidXR0b24nKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTV9FWFQpKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fRVhUICsgJy4nICsgY3NzQ29uc3RhbnRzLk9MX0NPTlRST0wpLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9wYW5lbCAmJiBtYXBEYXRhLnpvb21faG9tZSkge1xuICAgICAgICAgICAgJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT01fV0lUSF9IT01FKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTSk7XG4gICAgICAgICAgICAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NX0lOKS5hZnRlcigkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NX0hPTUUgKyAnIGJ1dHRvbicpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NX0hPTUUpKTtcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQgPSBjb250cm9sQ29udGFpbmVyVG9wTGVmdC5xdWVyeVNlbGVjdG9yKCcuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NX0hPTUUgKyAnLicgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFICsgJy5idXR0b24nKTtcbiAgICAgICAgICAgIGlmIChyZW1vdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgICAgICAgICAvL2llIDExIGVycm9yXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9wYW5lbCAmJiBtYXBEYXRhLnpvb21fcG9zaXRpb24pIHtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT00pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NX1dJVEhfUE9TKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTSk7XG4gICAgICAgICAgICAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NX0lOKS5hZnRlcigkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NX1BPUyArICcgYnV0dG9uJykuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT01fUE9TKSk7XG4gICAgICAgICAgICAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NX1BPUyArICcuJyArIGNzc0NvbnN0YW50cy5PTF9DT05UUk9MKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQgPSBjb250cm9sQ29udGFpbmVyVG9wTGVmdC5xdWVyeVNlbGVjdG9yKCcuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NX1BPUyArICcuJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEUgKyAnLmJ1dHRvbicpO1xuICAgICAgICAgICAgaWYgKHJlbW92ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWUgMTEgZXJyb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmdWxsc2NyZWVuXG4gICAgICAgIGlmIChtYXBEYXRhLmZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuZnVsbHNjcmVlbiA9IG5ldyBvbC5jb250cm9sLkZ1bGxTY3JlZW4oe1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgbGFiZWxBY3RpdmU6ICcgJyxcbiAgICAgICAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX0ZVTExTQ1JFRU4sXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuZnVsbHNjcmVlbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByb3V0ZXJcbiAgICAgICAgaWYgKG1hcERhdGEucm91dGVyX2VuYWJsZSAmJiB0eXBlb2YgUm91dGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnJvdXRlciA9IG5ldyBSb3V0ZXIoe1xuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfUk9VVEVSLFxuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcExlZnQsXG4gICAgICAgICAgICAgICAgY2FjaGluZzogbWFwRGF0YS5jYWNoaW5nLFxuICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnJvdXRlcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZWRpdG9yXG4gICAgICAgIGlmIChtYXBEYXRhLmVkaXRvci5lbmFibGUgJiYgdHlwZW9mIEVkaXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5lZGl0b3IgPSBuZXcgRWRpdG9yKHtcbiAgICAgICAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX0VESVRPUixcbiAgICAgICAgICAgICAgICB0eXBlOiBtYXBEYXRhLmVkaXRvci50eXBlIHx8ICdmcm9udGVuZCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBtYXBEYXRhLmVkaXRvci50YXJnZXQgfHwgY29udHJvbENvbnRhaW5lclRvcExlZnQsXG4gICAgICAgICAgICAgICAgaW5pdE9wZW46IG1hcERhdGEuZWRpdG9yLm9wZW4gfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgZGF0YUZpZWxkOiBtYXBEYXRhLmVkaXRvci5kYXRhX2ZpZWxkIHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNhY2hpbmc6IG1hcERhdGEuY2FjaGluZyxcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5lZGl0b3IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG1lYXN1cmV0b29sc1xuICAgICAgICBpZiAobWFwRGF0YS5tZWFzdXJldG9vbHMuZW5hYmxlICYmIHR5cGVvZiBNZWFzdXJldG9vbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMubWVhc3VyZXRvb2xzID0gbmV3IE1lYXN1cmV0b29scyh7XG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9NRUFTVVJFVE9PTFMsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgICAgICBjYWNoaW5nOiBtYXBEYXRhLmNhY2hpbmcsXG4gICAgICAgICAgICAgICAgbWFwQ29udHJvbGxlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMubWVhc3VyZXRvb2xzKTtcbiAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICBpZiAobWFwRGF0YS5wcmludCl7XG4gICAgICAgICAgdGhpcy5jb250cm9scy5wcmludCA9IG5ldyBQcmludCh7XG4gICAgICAgICAgICBsYWJlbCA6IFwiXCIsXG4gICAgICAgICAgICB0aXBMYWJlbCA6IGxhbmdDb25zdGFudHMuQ1RSTF9QUklOVCxcbiAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcExlZnQsXG4gICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgfSlcbiAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMucHJpbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hvdyBncmF0aWN1bGUgKGdyaWQpXG4gICAgICAgIGlmIChtYXBEYXRhLmdyYXRpY3VsZSkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5ncmF0aWN1bGUgPSBuZXcgR3JpZCh7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICcgJyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlTGFiZWw6ICcgJyxcbiAgICAgICAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX0dSSUQsXG4gICAgICAgICAgICAgICAgY2FjaGluZzogbWFwRGF0YS5jYWNoaW5nLFxuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcExlZnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLmdyYXRpY3VsZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcm90YXRlLWNvbnRyb2xcbiAgICAgICAgLy9UT0RPOiB1c2Ugc29tZXRoaW5nIGxpa2UgXCJtYXBEYXRhLnJvdGF0ZVwiXG4gICAgICAgIC8vICAgQ2hlY2s6IG1hcERhdGEubW91c2VfbmF2IChkZWZpbmVkPylcbiAgICAgICAgaWYgKG1hcERhdGEubW91c2VfbmF2ICYmIChtYXBEYXRhLm1vdXNlX25hdi5kcmFnX3JvdGF0ZSB8fCAobWFwRGF0YS5tb3VzZV9uYXYuZHJhZ19yb3RhdGUgJiYgbWFwRGF0YS5tb3VzZV9uYXYuZHJhZ19yb3RhdGVfem9vbSkpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnJvdGF0ZSA9IG5ldyBvbC5jb250cm9sLlJvdGF0ZSh7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICcgJyxcbiAgICAgICAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX1JFU0VUX1JPVEFUSU9OLFxuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcExlZnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnJvdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW5mb3BhZ2VcbiAgICAgICAgaWYgKG1hcERhdGEuaW5mb3BhZ2UgJiYgdHlwZW9mIGM0Zy5tYXBzLmNvbnRyb2wuSW5mb3BhZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuaW5mb3BhZ2UgPSBuZXcgYzRnLm1hcHMuY29udHJvbC5JbmZvcGFnZSh7XG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9JTkZPUEFHRSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAgICAgICAgIGNhY2hpbmc6IG1hcERhdGEuY2FjaGluZyxcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5pbmZvcGFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkaXRpb25hbCBwYW5lbFxuICAgICAgICAvLyBpZiAobWFwRGF0YS5hZGRpdGlvbmFsUGFuZWwgJiYgdHlwZW9mIGM0Zy5tYXBzLmNvbnRyb2wuYWRkaXRpb25hbFBhbmVsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vICAgdGhpcy5jb250cm9scy5hZGRpdGlvbmFsUGFuZWwgPSBuZXcgYzRnLm1hcHMuY29udHJvbC5hZGRpdGlvbmFsUGFuZWwoe1xuICAgICAgICAvLyAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9BRERJVElPTkFMUEFORUwsXG4gICAgICAgIC8vICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAvLyAgICAgY2FjaGluZzogbWFwRGF0YS5jYWNoaW5nLFxuICAgICAgICAvLyAgICAgbWFwQ29udHJvbGxlcjogdGhpc1xuICAgICAgICAvLyAgIH0pO1xuICAgICAgICAvLyAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5hZGRpdGlvbmFsUGFuZWwpO1xuICAgICAgICAvLyB9XG5cblxuICAgICAgLy8gc2NhbGVsaW5lXG4gICAgICAgIGlmIChtYXBEYXRhLnNjYWxlbGluZSkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5zY2FsZWxpbmUgPSBuZXcgb2wuY29udHJvbC5TY2FsZUxpbmUoe1xuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnNjYWxlbGluZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB6b29tLWxldmVsICYgbW91c2UtcG9zaXRpb25cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbWxldmVsIHx8IG1hcERhdGEubW91c2Vwb3NpdGlvbikge1xuICAgICAgICAgIC8vIHdyYXBwZXIgZm9yIHpvb20tbGV2ZWwgYW5kIG1vdXNlLXBvc2l0aW9uXG4gICAgICAgICAgICBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX0JMX1NVQiArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgICAgICAkKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KS5hcHBlbmQoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIpO1xuICAgICAgICAgICAgLy8gZGlzcGxheSB6b29tLWxldmVsXG4gICAgICAgICAgICBpZiAobWFwRGF0YS56b29tbGV2ZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnpvb21sZXZlbCA9IG5ldyBab29tbGV2ZWwoe1xuICAgICAgICAgICAgICAgICAgICBtYXBWaWV3OiB2aWV3LFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViLFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWRIVE1MOiAnTi9BJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy56b29tbGV2ZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZGlzcGxheSBtb3VzZS1wb3NpdGlvblxuICAgICAgICAgICAgaWYgKG1hcERhdGEubW91c2Vwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHMubW91c2Vwb3NpdGlvbiA9IG5ldyBvbC5jb250cm9sLk1vdXNlUG9zaXRpb24oe1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZUZvcm1hdDogb2wuY29vcmRpbmF0ZS50b1N0cmluZ0hETVMsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIsXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZEhUTUw6ICdOL0EnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLm1vdXNlcG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2Vvc2VhcmNoXG4gICAgICAgIGlmIChjNGcubWFwcy5jb250cm9sICYmIGM0Zy5tYXBzLmNvbnRyb2wuR2VvU2VhcmNoICYmIHR5cGVvZiBjNGcubWFwcy5jb250cm9sLkdlb1NlYXJjaCA9PT0gJ2Z1bmN0aW9uJyAmJiAobWFwRGF0YS5nZW9zZWFyY2guZW5hYmxlKSkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5nZW9zZWFyY2ggPSBuZXcgYzRnLm1hcHMuY29udHJvbC5HZW9TZWFyY2goe1xuICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wUmlnaHQsXG4gICAgICAgICAgICAgICAgZXh0RGl2OiBtYXBEYXRhLmdlb3NlYXJjaC5kaXYgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgY29sbGFwc2libGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29sbGFwc2VkOiAgbWFwRGF0YS5nZW9zZWFyY2guY29sbGFwc2VkLFxuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgY29sbGFwc2VkTGFiZWw6ICcnLFxuICAgICAgICAgICAgICAgIC8vIGVuZ2luZVVybDogbWFwRGF0YS5nZW9zZWFyY2guZW5naW5lLFxuICAgICAgICAgICAgICAgIHNlYXJjaFpvb206IG1hcERhdGEuZ2Vvc2VhcmNoLnNlYXJjaHpvb20sXG4gICAgICAgICAgICAgICAgem9vbUJvdW5kczogbWFwRGF0YS5nZW9zZWFyY2guem9vbWJvdW5kcyxcbiAgICAgICAgICAgICAgICBxdWlja3NlYXJjaDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbmltYXRlOiBtYXBEYXRhLmdlb3NlYXJjaC5hbmltYXRlLFxuICAgICAgICAgICAgICAgIG1hcmtSZXN1bHQ6IG1hcERhdGEuZ2Vvc2VhcmNoLm1hcmtyZXN1bHQsXG4gICAgICAgICAgICAgICAgcG9wdXA6IG1hcERhdGEuZ2Vvc2VhcmNoLnBvcHVwLFxuICAgICAgICAgICAgICAgIGF1dG9waWNrOiBtYXBEYXRhLmdlb3BpY2tlcixcbiAgICAgICAgICAgICAgICBjYWNoaW5nOiBtYXBEYXRhLmNhY2hpbmcsXG4gICAgICAgICAgICAgICAgcmVzdWx0czogbWFwRGF0YS5nZW9zZWFyY2gucmVzdWx0c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuZ2Vvc2VhcmNoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdlb2Jvb2ttYXJrcyAtIG5vdCByZWFkeVxuICAgICAgICBpZiAobWFwRGF0YS5nZW9ib29rbWFya3MpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuZ2VvYm9va21hcmtzID0gbmV3IG9sLmNvbnRyb2wuR2VvQm9va21hcmsoe1xuICAgICAgICAgICAgICAgIC8vdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wUmlnaHRcbiAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfR0VPQk9PS01BUktTLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBsYW5nQ29uc3RhbnRzLkdFT0JPT0tNQVJLU19QTEFDRUhPTERFUixcbiAgICAgICAgICAgICAgICBuYW1lc3BhY2U6ICdjNGdfZ2VvYm9va21hcmtzJy8qLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLkdFT0JPT0tNQVJLUyovIC8vVG9EbyBpbXBsZW1lbnQgZm9yIG93biBzdHlsaW5nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5nZW9ib29rbWFya3MpO1xuICAgICAgICAgICAgdGhpcy5yaWdodFNsaWRlRWxlbWVudHMucHVzaCgnLm9sLWJvb2ttYXJrJyk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG92ZXJ2aWV3LW1hcFxuICAgICAgICBpZiAobWFwRGF0YS5vdmVydmlld21hcCkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5vdmVydmlld21hcCA9IG5ldyBPdmVydmlld01hcCh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wUmlnaHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLm92ZXJ2aWV3bWFwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXBEYXRhLnN0YXJib2FyZC5sYWJlbCkge1xuICAgICAgICAgICAgc3RhcmJvYXJkX2xhYmVsID0gbGFuZ0NvbnN0YW50cy5DVFJMX1NUQVJCT0FSRC5yZXBsYWNlKCdTdGFyYm9hcmQnLCBtYXBEYXRhLnN0YXJib2FyZC5sYWJlbCkucmVwbGFjZSgnc3RhcmJvYXJkJywgbWFwRGF0YS5zdGFyYm9hcmQubGFiZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc3RhcmJvYXJkXG4gICAgICBpZiAobWFwRGF0YS5nZW9waWNrZXIgJiYgbWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJiYWNrZW5kXCIpIHtcbiAgICAgICAgZW5hYmxlU3RhcmJvYXJkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIHBvcHVwIG1hcmdpblxuICAgICAgLy90aGlzLmxlZnRTbGlkZUVsZW1lbnRzLnB1c2goJy5vbC1vdmVybGF5LWNvbnRhaW5lcicpO1xuICAgICAgLy90aGlzLnJpZ2h0U2xpZGVFbGVtZW50cy5wdXNoKCcub2wtb3ZlcmxheS1jb250YWluZXInKTtcblxuICAgICAgY29uc29sZS5sb2coYzRnLm1hcHMuY29udHJvbCk7XG4gICAgICBpZiAodHlwZW9mIFN0YXJib2FyZCA9PT0gJ2Z1bmN0aW9uJyAmJiBlbmFibGVTdGFyYm9hcmQpIHtcbiAgICAgICAgICB0aGlzLmNvbnRyb2xzLnN0YXJib2FyZCA9IG5ldyBTdGFyYm9hcmQoe1xuICAgICAgICAgICAgY3JlYXRlOiBtYXBEYXRhLnN0YXJib2FyZC5lbmFibGUgfHwgZmFsc2UsXG4gICAgICAgICAgICBoZWFkbGluZTogbWFwRGF0YS5zdGFyYm9hcmQubGFiZWwsXG4gICAgICAgICAgICB0aXBMYWJlbDogc3RhcmJvYXJkX2xhYmVsIHx8IGZhbHNlLFxuICAgICAgICAgICAgY2FjaGluZzogbWFwRGF0YS5jYWNoaW5nLFxuICAgICAgICAgICAgbWFwQ29udHJvbGxlcjogdGhpcyxcbiAgICAgICAgICAgIGV4dERpdjogbWFwRGF0YS5zdGFyYm9hcmQuZGl2LFxuICAgICAgICAgICAgZGVmYXVsdE9wZW46IG1hcERhdGEuc3RhcmJvYXJkLm9wZW4sXG4gICAgICAgICAgICBmaWx0ZXI6IG1hcERhdGEuc3RhcmJvYXJkLmZpbHRlcixcbiAgICAgICAgICAgIGJ1dHRvbjogbWFwRGF0YS5zdGFyYm9hcmQuYnV0dG9uLFxuICAgICAgICAgICAgYmFzZWxheWVyU3dpdGNoZXJDcmVhdGU6IG1hcERhdGEuYmFzZWxheWVyc3dpdGNoZXIuZW5hYmxlLFxuICAgICAgICAgICAgYmFzZWxheWVyU3dpdGNoZXJUaXRsZTogbWFwRGF0YS5iYXNlbGF5ZXJzd2l0Y2hlci5sYWJlbCxcbiAgICAgICAgICAgIGxheWVyU3dpdGNoZXJDcmVhdGU6IG1hcERhdGEubGF5ZXJzd2l0Y2hlci5lbmFibGUsXG4gICAgICAgICAgICBsYXllclN3aXRjaGVyVGl0bGU6IG1hcERhdGEubGF5ZXJzd2l0Y2hlci5sYWJlbFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5zdGFyYm9hcmQpO1xuICAgICAgICB9XG4gICAgICAvL2M0Zy5tYXBzLnV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKGM0Zy5tYXBzLmhvb2tfY29udHJvbHMpO1xuXG4gICAgICAgIC8vIGJhY2tlbmQtZ2VvcGlja2VyXG4gICAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlciAmJiAobWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJiYWNrZW5kXCIgfHwgbWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJmcm9udGVuZFwiKSkge1xuICAgICAgICAgIHRoaXMuY29udHJvbHMuZ2VvcGlja2VyID0gbmV3IEdlb1BpY2tlcih7XG4gICAgICAgICAgICAgIG1hcENvbnRhaW5lcjogdGhpc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKHRoaXMuY29udHJvbHMuZ2VvcGlja2VyKTtcbiAgICAgICAgICBpZiAobWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJmcm9udGVuZFwiKSB7XG4gICAgICAgICAgICAvLyBzdWJzdHJpbmcgaXMgbmVlZGVkIGhlcmUgZm9yIHRha2luZyBvdXQgdGhlICNcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feCAmJiBtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feCkge1xuICAgICAgICAgICAgICB2YXIgZ2VveEZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWFwRGF0YS5nZW9waWNrZXIuaW5wdXRfZ2VvX3guc3Vic3RyaW5nKDEpKTtcbiAgICAgICAgICAgICAgdmFyIGdlb3lGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hcERhdGEuZ2VvcGlja2VyLmlucHV0X2dlb195LnN1YnN0cmluZygxKSk7XG4gICAgICAgICAgICAgIGlmIChnZW94RmllbGQgJiYgZ2VveUZpZWxkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY0dlb3ggPSBnZW94RmllbGQudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGxvY0dlb3kgPSBnZW95RmllbGQudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGxvY0dlb3ggJiYgbG9jR2VveSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG51bWVyaXplZCA9IFtwYXJzZUZsb2F0KGxvY0dlb3gsIDEwKSwgcGFyc2VGbG9hdChsb2NHZW95LCAxMCldO1xuICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVkID0gb2wucHJvai50cmFuc2Zvcm0obnVtZXJpemVkLCBvbC5wcm9qLmdldCgnRVBTRzo0MzI2JyksIG9sLnByb2ouZ2V0KCdFUFNHOjM4NTcnKSk7XG4gICAgICAgICAgICAgICAgICBnZW9Mb2NhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB0aGlzLm1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKHRyYW5zZm9ybWVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93IGF0dHJpYnV0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLmF0dHJpYnV0aW9uLmVuYWJsZSkge1xuICAgICAgICAgICAgLy8gQFRPRE86IGNyZWF0ZSBvd24gYXR0cmlidXRpb24tY29udHJvbFxuICAgICAgICAgICAgaWYgKG1hcERhdGEuYXR0cmlidXRpb24uY2ZnX2xvZ28pIHtcbiAgICAgICAgICAgICAgICBsb2dvTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgICAgICBsb2dvTGluay5ocmVmID0gJ2h0dHBzOi8vY29uNGdpcy5vcmcnO1xuICAgICAgICAgICAgICAgIGxvZ29MaW5rLnRpdGxlID0gJ2J1aWx0IHdpdGggY29uNGdpcyc7XG4gICAgICAgICAgICAgICAgbG9nb0xpbmsudGFyZ2V0ID0gJ19ibGFuayc7XG4gICAgICAgICAgICAgICAgbG9nb0xpbmsuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkFUVFJJQlVUSU9OX0xPR087XG4gICAgICAgICAgICAgICAgbG9nb0dyYXBoaWMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgICAgICAgICBsb2dvR3JhcGhpYy5zcmMgPSAnYnVuZGxlcy9jb240Z2lzbWFwcy9pbWFnZXMvbG9nb19jb240Z2lzLnN2Zyc7XG4gICAgICAgICAgICAgICAgbG9nb0xpbmsuYXBwZW5kQ2hpbGQobG9nb0dyYXBoaWMpO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodC5hcHBlbmRDaGlsZChsb2dvTGluayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmF0dHJpYnV0aW9uID0gbmV3IG9sLmNvbnRyb2wuQXR0cmlidXRpb24oe1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9BVFRSSUJVVElPTixcbiAgICAgICAgICAgICAgICBjb2xsYXBzZUxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tUmlnaHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5hdHRyaWJ1dGlvbi5zZXRDb2xsYXBzZWQobWFwRGF0YS5hdHRyaWJ1dGlvbi5jb2xsYXBzZWQgPT09ICcxJyk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuYXR0cmlidXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hvdyBwZXJtYWxpbmtcbiAgICAgICAgaWYgKG1hcERhdGEucGVybWFsaW5rLmVuYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5wZXJtYWxpbmsgPSBuZXcgUGVybWFsaW5rKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfUEVSTUFMSU5LLFxuICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgZ2V0UGFyYW1ldGVyOiBtYXBEYXRhLnBlcm1hbGluay5nZXRfcGFyYW1ldGVyLFxuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbVJpZ2h0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5wZXJtYWxpbmspO1xuICAgICAgICB9XG5cbiAgICAgICAgLy90aGVtZURhdGFcbiAgICAgICAgaWYgKG1hcERhdGEudGhlbWVEYXRhKSB7XG4gICAgICAgICAgICBkb21NYXBEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXBEYXRhLm1hcERpdik7XG4gICAgICAgICAgICBpZiAobWFwRGF0YS50aGVtZURhdGFbJ3VzZWdsb2JhbCddKSB7XG4gICAgICAgICAgICAgIGRvbU1hcERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cmFwcGVyJyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAobWFwRGF0YS50aGVtZURhdGFbJ21haW5jb2xvciddKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1haW5Db2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShtYXBEYXRhLnRoZW1lRGF0YVsnbWFpbmNvbG9yJ10sIG1hcERhdGEudGhlbWVEYXRhWydtYWlub3BhY2l0eSddKTtcbiAgICAgICAgICAgICAgICB2YXIgZm9udENvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KG1hcERhdGEudGhlbWVEYXRhWydmb250Y29sb3InXSwgbWFwRGF0YS50aGVtZURhdGFbJ2ZvbnRvcGFjaXR5J10pO1xuICAgICAgICAgICAgICAgIHZhciBzaGFkb3dDb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShtYXBEYXRhLnRoZW1lRGF0YVsnc2hhZG93Y29sb3InXSwgbWFwRGF0YS50aGVtZURhdGFbJ3NoYWRvd29wYWNpdHknXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9tTWFwRGl2ICYmIGRvbU1hcERpdi5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICBkb21NYXBEaXYuc3R5bGUuc2V0UHJvcGVydHkoJy0tbWFpbi1jb2xvcicsIG1haW5Db2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGRvbU1hcERpdi5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1mb250LWNvbG9yJywgZm9udENvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLnNldFByb3BlcnR5KCctLXNoYWRvdy1jb2xvcicsIHNoYWRvd0NvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLnRoZW1lRGF0YVsnYnV0dG9ucmFkaXVzJ10pIHtcbiAgICAgICAgICAgICAgICBkb21NYXBEaXYuc3R5bGUuc2V0UHJvcGVydHkoJy0tYnV0dG9uLXJhZGl1cy1wZXJjZW50JywgbWFwRGF0YS50aGVtZURhdGFbJ2J1dHRvbnJhZGl1cyddKyclJyk7XG4gICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLnNldFByb3BlcnR5KCctLWJ1dHRvbi1yYWRpdXMtcGl4ZWwnLCBtYXBEYXRhLnRoZW1lRGF0YVsnYnV0dG9ucmFkaXVzJ10rJ3B4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgQXJyYXkuaXNBcnJheSh3aW5kb3cuYzRnTWFwc0hvb2tzLm1hcENvbnRyb2xsZXJfYWRkQ29udHJvbHMpKSB7XG4gICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MubWFwQ29udHJvbGxlcl9hZGRDb250cm9scywge21hcENvbnRyb2xsZXI6IHRoaXMsIENvbnRhaW5lcjogY29udHJvbENvbnRhaW5lclRvcExlZnR9KTtcbiAgICAgIH1cbiAgICB9O1xuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTsgLy8gJ1RoZSBFbmQnIDopICAgIC0gISBEbyBub3Qgd3JpdGUgc3R1ZmYgYWZ0ZXIgdGhpcyBsaW5lICEgLVxuXG5leHBvcnQgbGV0IE1hcENvbnRyb2xsZXIgPSB0aGlzLmM0Zy5tYXBzLk1hcENvbnRyb2xsZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy5qcyIsImltcG9ydCB7QzRnT3ZlcmxheX0gZnJvbSBcIi4vYzRnLW92ZXJsYXlcIlxuXG5leHBvcnQgY2xhc3MgQzRnT3ZlcmxheUNvbnRyb2xsZXJ7XG4gICAgY29uc3RydWN0b3IoYmFzZWxheWVyKXtcbiAgICAgICAgdGhpcy5iYXNlbGF5ZXIgPSBiYXNlbGF5ZXI7XG4gICAgICAgIHRoaXMuYXJyT3ZlcmxheXMgPSBbXTtcbiAgICB9XG4gICAgXG4gICAgc2hvd092ZXJsYXlMYXllcihvdmVybGF5SWQpe1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBvdmVybGF5TGF5ZXJDb25maWcsXG4gICAgICAgICAgICBvc21Tb3VyY2VDb25maWdzID0gYzRnLm1hcHMuY29uZmlnLm9zbSxcbiAgICAgICAgICAgIHN0YW1lblNvdXJjZUNvbmZpZ3MgPSBjNGcubWFwcy5jb25maWcuc3RhbWVuLFxuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLFxuICAgICAgICAgICAgb3ZlcmxheUxheWVyLFxuICAgICAgICAgICAgbm9Vcmw7XG5cbiAgICAgICAgbGF5ZXJPcHRpb25zID0ge307XG4gICAgICAgIG92ZXJsYXlMYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5PU00oKVxuICAgICAgICB9KTtcblxuICAgICAgICBvdmVybGF5TGF5ZXJDb25maWcgPSB0aGlzLmFyck92ZXJsYXlzW292ZXJsYXlJZF07XG5cbiAgICAgICAgc3dpdGNoIChvdmVybGF5TGF5ZXJDb25maWcucHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGNhc2UgJ29zbSc6XG4gICAgICAgICAgICAgICAgaWYgKG9zbVNvdXJjZUNvbmZpZ3Nbb3ZlcmxheUxheWVyQ29uZmlnLnN0eWxlXSkge1xuICAgICAgICAgICAgICAgICAgICBvdmVybGF5TGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuT1NNKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zbVNvdXJjZUNvbmZpZ3Nbb3ZlcmxheUxheWVyQ29uZmlnLnN0eWxlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YW1lblNvdXJjZUNvbmZpZ3Nbb3ZlcmxheUxheWVyQ29uZmlnLnN0eWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTdGFtZW5cbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlN0YW1lbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFtZW5Tb3VyY2VDb25maWdzW292ZXJsYXlMYXllckNvbmZpZy5zdHlsZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIH0gZWxzZSBpZiAobWFwUXVlc3RTb3VyY2VDb25maWdzW292ZXJsYXlMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAvLyBtYXBRdWVzdFxuICAgICAgICAgICAgICAgICAgICAvLyAgIG92ZXJsYXlMYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5NYXBRdWVzdChtYXBRdWVzdFNvdXJjZUNvbmZpZ3Nbb3ZlcmxheUxheWVyQ29uZmlnLnN0eWxlXSlcbiAgICAgICAgICAgICAgICAgICAgLy8gICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG92ZXJsYXlMYXllckNvbmZpZy5zdHlsZSA9PT0gJ29zbV9jdXN0b20nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGN1c3RvbVxuICAgICAgICAgICAgICAgICAgICBub1VybCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdmVybGF5TGF5ZXJDb25maWcuYXR0cmlidXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBvdmVybGF5TGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG92ZXJsYXlMYXllckNvbmZpZy51cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBvdmVybGF5TGF5ZXJDb25maWcudXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9VcmwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvdmVybGF5TGF5ZXJDb25maWcudXJscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybHMgPSBvdmVybGF5TGF5ZXJDb25maWcudXJscztcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vVXJsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub1VybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5YWVoobGF5ZXJPcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2N1c3RvbSB1cmwocykgbWlzc2luZyAtPiBzd2l0Y2ggdG8gZGVmYXVsdCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd1bnN1cHBvcnRlZCBvc20tc3R5bGUgLT4gc3dpdGNoIHRvIGRlZmF1bHQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdnb29nbGUnOlxuICAgICAgICAgICAgICAgIC8vQHRvZG9cbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2dvb2dsZS1tYXBzIGFyZSBjdXJyZW50bHkgdW5zdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JpbmcnOlxuICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuYXBpS2V5ICYmIG92ZXJsYXlMYXllckNvbmZpZy5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICBvdmVybGF5TGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuQmluZ01hcHMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1bHR1cmU6IG5hdmlnYXRvci5sYW5ndWFnZXMgPyBuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdIDogKG5hdmlnYXRvci5sYW5ndWFnZSB8fCBuYXZpZ2F0b3IudXNlckxhbmd1YWdlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IG92ZXJsYXlMYXllckNvbmZpZy5hcGlLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VyeVNldDogb3ZlcmxheUxheWVyQ29uZmlnLnN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3dyb25nIGJpbmcta2V5IG9yIGludmFsaWQgaW1hZ2VyeS1zZXQhJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd21zJzpcbiAgICAgICAgICAgICAgICBvdmVybGF5TGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5UaWxlV01TKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogb3ZlcmxheUxheWVyQ29uZmlnLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExBWUVSUzogb3ZlcmxheUxheWVyQ29uZmlnLnBhcmFtcy5sYXllcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVkVSU0lPTjogb3ZlcmxheUxheWVyQ29uZmlnLnBhcmFtcy52ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRk9STUFUOiBvdmVybGF5TGF5ZXJDb25maWcucGFyYW1zLmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUUkFOU1BBUkVOVDogb3ZlcmxheUxheWVyQ29uZmlnLnBhcmFtcy50cmFuc3BhcmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGd1dHRlcjogb3ZlcmxheUxheWVyQ29uZmlnLmd1dHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uczogb3ZlcmxheUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uICsgJyAnICsgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTlxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgLy9leHRlbnQ6IG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KFs1LjU5MzM0LCA1MC4wNTc4LCA5Ljc0MTU4LCA1Mi43OTk4XSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnb3dtJzpcbiAgICAgICAgICAgICAgICBvdmVybGF5TGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5YWVooe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBvdmVybGF5TGF5ZXJDb25maWcudXJsICsgb3ZlcmxheUxheWVyQ29uZmlnLmFwcF9pZCArICcve3p9L3t4fS97eX0/aGFzaD0nICsgb3ZlcmxheUxheWVyQ29uZmlnLmFwaV9rZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGlvbnM6IG92ZXJsYXlMYXllckNvbmZpZy5hdHRyaWJ1dGlvbiArICcgJyArIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT05cbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIC8vZXh0ZW50OiBvbC5wcm9qLnRyYW5zZm9ybUV4dGVudChbNS41OTMzNCwgNTAuMDU3OCwgOS43NDE1OCwgNTIuNzk5OF0sICdFUFNHOjQzMjYnLCAnRVBTRzozODU3JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd1bnN1cHBvcnRlZCBwcm92aWRlcicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG92ZXJsYXlMYXllci5zZXRPcGFjaXR5KHBhcnNlSW50KG92ZXJsYXlMYXllckNvbmZpZy5vcGFjaXR5KS8xMDApO1xuICAgICAgICB0aGlzLmFyck92ZXJsYXlzW292ZXJsYXlJZF0ubGF5ZXIgPSBvdmVybGF5TGF5ZXI7XG4gICAgICAgIHJldHVybiB0aGlzLmFyck92ZXJsYXlzW292ZXJsYXlJZF0ubGF5ZXJcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctb3ZlcmxheS1jb250cm9sbGVyLmpzIiwiZXhwb3J0IGNsYXNzIEM0Z092ZXJsYXkge1xuXG4gICAgY29uc3RydWN0b3Iob3ZlcmxheUFyciwgbWFwQ29udHJvbGxlcil7XG4gICAgICAgIHRoaXMuaWQgICAgICAgICAgICA9IG92ZXJsYXlBcnJbJ2lkJ107XG4gICAgICAgIHRoaXMucGlkICAgICAgICAgICA9IG92ZXJsYXlBcnJbJ3BpZCddO1xuICAgICAgICB0aGlzLm5hbWUgICAgICAgICAgPSBvdmVybGF5QXJyWyduYW1lJ107XG4gICAgICAgIHRoaXMucHJvdmlkZXIgICAgICA9IG92ZXJsYXlBcnJbJ3Byb3ZpZGVyJ107XG4gICAgICAgIHRoaXMuc3R5bGUgICAgICAgICA9IG92ZXJsYXlBcnJbJ3N0eWxlJ107XG4gICAgICAgIHRoaXMudXJsICAgICAgICAgICA9IG92ZXJsYXlBcnJbJ3VybCddO1xuICAgICAgICB0aGlzLnVybHMgICAgICAgICAgPSBvdmVybGF5QXJyWyd1cmxzJ107XG4gICAgICAgIHRoaXMub3BhY2l0eSAgICAgICA9IG92ZXJsYXlBcnJbJ29wYWNpdHknXTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGlvbiAgID0gb3ZlcmxheUFyclsnYXR0cmlidXRpb24nXTtcbiAgICAgICAgdGhpcy5ndXR0ZXIgICAgICAgID0gb3ZlcmxheUFyclsnZ3V0dGVyJ107XG4gICAgICAgIHRoaXMucGFyYW1zICAgICAgICA9IG92ZXJsYXlBcnJbJ3BhcmFtcyddO1xuICAgICAgICB0aGlzLmxheWVyICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vdmVybGF5QXJyICAgID0gb3ZlcmxheUFycjtcbiAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyICAgID0gbWFwQ29udHJvbGxlclxuICAgIH1cblxuICAgIFxuXG4gICAgY2hhbmdlT3BhY2l0eSh2YWx1ZSl7XG4gICAgICAgIHZhciBsYXllcjtcblxuICAgICAgICBsYXllciA9IHRoaXMubGF5ZXI7XG4gICAgICAgIGlmIChsYXllcikge1xuICAgICAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVMYXllcihsYXllcik7XG4gICAgICAgICAgICBsYXllci5zZXRPcGFjaXR5KHZhbHVlLzEwMCk7XG4gICAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKGxheWVyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1vdmVybGF5LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==