/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./Resources/public/js/c4g-maps-main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Resources/public/js/c4g-baselayer-controller.js":
/*!*********************************************************!*\
  !*** ./Resources/public/js/c4g-baselayer-controller.js ***!
  \*********************************************************/
/*! exports provided: C4gBaselayerController */
/*! exports used: C4gBaselayerController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gBaselayerController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_baselayer__ = __webpack_require__(/*! ./c4g-baselayer */ "./Resources/public/js/c4g-baselayer.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_overlay__ = __webpack_require__(/*! ./c4g-overlay */ "./Resources/public/js/c4g-overlay.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__ = __webpack_require__(/*! ./c4g-maps-config */ "./Resources/public/js/c4g-maps-config.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








var C4gBaselayerController = function () {
    function C4gBaselayerController(proxy) {
        _classCallCheck(this, C4gBaselayerController);

        this.proxy = proxy;
        this.mapController = proxy.options.mapController;
        this.arrBaselayers = {};
        this.baselayerIds = [];
    }

    _createClass(C4gBaselayerController, [{
        key: "loadBaseLayers",
        value: function loadBaseLayers() {
            var self;

            self = this;

            jQuery.ajax(this.proxy.api_baselayer_url, {
                dataType: this.mapController.data.jsonp ? "jsonp" : "json"
            }).done(function (data) {
                if (data.baselayer) {
                    self.addBaseLayers(data.baselayer);
                }
                return true;
            }).fail(function () {
                // @TODO error-messages
                //   1) Visible message 4 users (i18n)
                //   2) Technical console.warn
                console.warn('An error occured while trying to load the baselayers. Do you have configured a default profile with baselayers?');
                self.mapController.spinner.hide();
                return false;
            }).always(function () {
                //self.mapController.spinner.hide();
            });
        } // end of "loadBaseLayers()"

    }, {
        key: "addBaseLayers",
        value: function addBaseLayers(baselayers) {
            var baselayer, uid, i, j;

            // sort baselayer (for internal list)
            baselayers.sort(function (a, b) {
                if (!a.sort && !b.sort || parseInt(a.sort, 10) === parseInt(b.sort, 10)) {
                    if (!a.name || !b.name) {
                        return !b.name ? -1 : 1;
                    }
                    return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;
                }
                if (!a.sort || !b.sort) {
                    return !b.sort ? -1 : 1;
                }
                return parseInt(a.sort, 10) > parseInt(b.sort, 10) ? 1 : -1;
            });

            // build baselayer-list
            if (baselayers.length > 0) {
                for (i = 0; i < baselayers.length; i += 1) {

                    baselayer = baselayers[i];

                    uid = baselayer.id || __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].getUniqueId();
                    this.baselayerIds.push(uid);
                    if (!this.arrBaselayers[uid]) {
                        this.arrBaselayers[uid] = new __WEBPACK_IMPORTED_MODULE_0__c4g_baselayer__["a" /* C4gBaselayer */](baselayer, this);
                    }

                    // @TODO: check initial baselayer-handling
                    if (this.mapController.data.baselayer && parseInt(uid, 10) === parseInt(this.mapController.data.baselayer, 10)) {
                        this.showBaseLayer(uid);
                    }

                    if (this.arrBaselayers[uid].hasOverlays) {
                        for (j = 0; j < this.arrBaselayers[uid].overlays.length; j++) {
                            if (!this.arrBaselayers[uid].overlayController.arrOverlays[this.arrBaselayers[uid].overlays[j].id]) {
                                this.arrBaselayers[uid].overlayController.arrOverlays[this.arrBaselayers[uid].overlays[j].id] = new __WEBPACK_IMPORTED_MODULE_1__c4g_overlay__["a" /* C4gOverlay */](this.arrBaselayers[uid].overlays[j], this.mapController);
                                this.arrBaselayers[uid].overlayController.arrOverlays[this.arrBaselayers[uid].overlays[j].id].layer = this.arrBaselayers[uid].overlayController.showOverlayLayer(this.arrBaselayers[uid].overlays[j].id);
                            }
                        }
                    }
                }
            }

            if (!this.activeBaselayerId) {
                // no baselayer was activated
                if (baselayers.length > 0 && baselayers[0].id) {
                    // take first baselayer if possible
                    uid = baselayers[0].id;
                } else {
                    // otherwise build default baselayer
                    uid = 0;
                    this.baselayerIds.push(uid);
                    if (!this.arrBaselayers[uid]) {
                        this.arrBaselayers[uid] = {
                            id: 0,
                            name: 'c4g_default',
                            provider: 'osm',
                            style: 'Mapnik'
                        };
                    }
                }
                this.showBaseLayer(uid);
            }
            this.proxy.baselayers_loaded = true;

            __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_baselayer_loaded, this.baselayerIds);
        } // end of "addBaseLayers()"

    }, {
        key: "createBaseLayer",
        value: function createBaseLayer(layerOptions, baseLayerConfig, sourceConfigs) {
            var newBaselayer;
            layerOptions = layerOptions || {};
            switch (baseLayerConfig.provider) {
                case 'custom':
                    // custom
                    var noUrl = true;
                    if (baseLayerConfig.url) {
                        layerOptions.url = baseLayerConfig.url;
                        noUrl = false;
                    } else if (baseLayerConfig.urls) {
                        layerOptions.urls = baseLayerConfig.urls;
                        noUrl = false;
                    }
                    if (!noUrl) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ(layerOptions),
                            extent: baseLayerConfig.extend
                        });
                    } else {
                        console.warn('custom url(s) missing -> switch to default');
                    }
                case 'osm':
                    if (sourceConfigs.osm[baseLayerConfig.style]) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.OSM($.extend(sourceConfigs.osm[baseLayerConfig.style], layerOptions))
                        });
                    } else if (sourceConfigs.stamen[baseLayerConfig.style]) {
                        // Stamen
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.Stamen($.extend(sourceConfigs.stamen[baseLayerConfig.style], layerOptions))
                        });
                        // } else if (mapQuestSourceConfigs[baseLayerConfig.style]) {
                        //   // mapQuest
                        //   newBaselayer = new ol.layer.Tile({
                        //     source: new ol.source.MapQuest(mapQuestSourceConfigs[baseLayerConfig.style])
                        //   });
                    } else if (baseLayerConfig.style === 'osm_custom') {
                        // custom
                        var _noUrl = true;
                        if (baseLayerConfig.url) {
                            layerOptions.url = baseLayerConfig.url;
                            _noUrl = false;
                        } else if (baseLayerConfig.urls) {
                            layerOptions.urls = baseLayerConfig.urls;
                            _noUrl = false;
                        }
                        if (!_noUrl) {
                            newBaselayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(layerOptions)
                            });
                        } else {
                            console.warn('custom url(s) missing -> switch to default');
                        }
                    } else {
                        console.warn('unsupported osm-style -> switch to default');
                    }
                    break;
                case 'mapbox':
                    if (baseLayerConfig.api_key && baseLayerConfig.app_id && baseLayerConfig.mapbox_type) {

                        if (baseLayerConfig.mapbox_type === 'Mapbox') {
                            layerOptions.url = baseLayerConfig.url + baseLayerConfig.app_id + '/tiles/{z}/{x}/{y}?access_token=' + baseLayerConfig.api_key;
                            newBaselayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions))
                            });
                        } else {
                            layerOptions.url = baseLayerConfig.url_classic + baseLayerConfig.app_id + '/{z}/{x}/{y}.png?access_token=' + baseLayerConfig.api_key;

                            newBaselayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions))
                            });
                        }
                    } else if (baseLayerConfig.hide_in_be) {
                        layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ($.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions))
                        });
                    } else {
                        console.warn('wrong mapbox configuration!');
                    }
                    break;
                case 'klokan':
                    if (baseLayerConfig.api_key && baseLayerConfig.klokan_type) {

                        if (baseLayerConfig.klokan_type === 'OpenMapTiles') {
                            layerOptions.url = baseLayerConfig.url + '{z}/{x}/{y}.pbf';
                            newBaselayer = new ol.layer.VectorTile({
                                source: new ol.source.VectorTile(jQuery.extend(sourceConfigs.klokan[baseLayerConfig.klokan_type], layerOptions))
                            });

                            //ToDo style url
                            fetch(baseLayerConfig.url + '/styles/' + baseLayerConfig.style + '/style.json').then(function (response) {
                                response.json().then(function (glStyle) {
                                    olms.applyStyle(newBaselayer, glStyle, 'openmaptiles');
                                });
                            });
                        } else {
                            layerOptions.url = baseLayerConfig.url + '/data/v3/{z}/{x}/{y}.pbf?key=' + baseLayerConfig.api_key;
                            newBaselayer = new ol.layer.VectorTile({
                                source: new ol.source.VectorTile(jQuery.extend(sourceConfigs.klokan[baseLayerConfig.klokan_type], layerOptions))
                            });

                            fetch(baseLayerConfig.url + '/styles/' + baseLayerConfig.style + '/style.json?key=' + baseLayerConfig.api_key).then(function (response) {
                                response.json().then(function (glStyle) {
                                    olms.applyStyle(newBaselayer, glStyle, 'openmaptiles');
                                });
                            });
                        }
                    } else {
                        console.warn('wrong klokan configuration!');
                    }
                    break;
                case 'here':
                    if (baseLayerConfig.api_key && baseLayerConfig.app_id && baseLayerConfig.here_type) {

                        if (baseLayerConfig.style == 'normal') {
                            layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/normal.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'transit') {
                            layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/normal.day.transit/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'pedestrian') {
                            layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/pedestrian.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'terrain') {
                            layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/terrain.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'satellite') {
                            layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/satellite.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        } else if (baseLayerConfig.style == 'hybrid') {
                            layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/hybrid.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
                        }

                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ($.extend(sourceConfigs.here[baseLayerConfig.here_type], layerOptions))
                        });
                    } else if (baseLayerConfig.hide_in_be) {
                        layerOptions.url = layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ($.extend(sourceConfigs.mapbox[baseLayerConfig.here_type], layerOptions))
                        });
                    } else {
                        console.warn('wrong HERE configuration!');
                    }
                    break;
                case 'thunder':
                    if (baseLayerConfig.api_key && baseLayerConfig.thunderforest_type) {

                        if (baseLayerConfig.style) {
                            layerOptions.url = "https://tile.thunderforest.com/" + baseLayerConfig.style + "/{z}/{x}/{y}.png?apikey=" + baseLayerConfig.api_key;
                        }

                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ(jQuery.extend(sourceConfigs.thunderforest[baseLayerConfig.thunderforest_type], layerOptions))
                        });
                    } else if (baseLayerConfig.hide_in_be) {
                        layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.thunderforest_type], layerOptions))
                        });
                    } else {
                        console.warn('wrong Thunderforest configuration!');
                    }
                    break;
                case 'google':
                    //@todo
                    console.warn('google-maps are currently unsupported');
                    break;
                case 'bing':
                    if (baseLayerConfig.api_key && baseLayerConfig.style) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.BingMaps({
                                culture: navigator.languages ? navigator.languages[0] : navigator.language || navigator.userLanguage,
                                key: baseLayerConfig.api_key,
                                imagerySet: baseLayerConfig.style
                            })
                        });
                    } else {
                        console.warn('wrong bing-key or invalid imagery-set!');
                    }
                    break;
                case 'wms':
                    if (baseLayerConfig.url.indexOf('https') !== -1) {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.TileWMS({
                                url: baseLayerConfig.url,
                                params: {
                                    LAYERS: baseLayerConfig.params.layers,
                                    VERSION: baseLayerConfig.params.version,
                                    //FORMAT: baseLayerConfig.params.format,
                                    TRANSPARENT: baseLayerConfig.params.transparent
                                },
                                gutter: baseLayerConfig.gutter,
                                attributions: baseLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION,
                                crossOrigin: 'anonymous'
                            })
                            //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                        });
                    } else {
                        newBaselayer = new ol.layer.Tile({
                            source: new ol.source.TileWMS({
                                url: baseLayerConfig.url,
                                params: {
                                    LAYERS: baseLayerConfig.params.layers,
                                    VERSION: baseLayerConfig.params.version,
                                    //FORMAT: baseLayerConfig.params.format,
                                    TRANSPARENT: baseLayerConfig.params.transparent
                                },
                                gutter: baseLayerConfig.gutter,
                                attributions: baseLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                            })
                            //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                        });
                    }

                    break;
                case 'owm':
                    newBaselayer = new ol.layer.Tile({
                        source: new ol.source.XYZ({
                            url: baseLayerConfig.url + baseLayerConfig.app_id + '/{z}/{x}/{y}?hash=' + baseLayerConfig.api_key,
                            attributions: baseLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                        })
                        //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                    });
                    break;
                case 'group':
                    var baseLayerGroup = [];
                    for (var index in baseLayerConfig['layerGroup']) {
                        if (baseLayerConfig['layerGroup'].hasOwnProperty(index)) {

                            var element = this.createBaseLayer(null, baseLayerConfig['layerGroup'][index], sourceConfigs);
                            var maxZoom = this.proxy.options.mapController.map.getView().getResolutionForZoom(baseLayerConfig['layerGroup'][index]['minZoom']);
                            var minZoom = this.proxy.options.mapController.map.getView().getResolutionForZoom(baseLayerConfig['layerGroup'][index]['maxZoom']);
                            element.setMinResolution(minZoom);
                            element.setMaxResolution(maxZoom);
                            baseLayerGroup.push(element);
                        }
                    }
                    newBaselayer = new ol.layer.Group({
                        layers: baseLayerGroup
                    });
                    break;

                default:
                    console.warn('unsupported provider');
                    break;
            }
            return newBaselayer;
        }
    }, {
        key: "showBaseLayer",
        value: function showBaseLayer(baseLayerUid) {

            var self = this,
                layers = void 0,
                baselayer = void 0,
                addBaselayer = void 0,
                baseLayers = void 0,
                sourceConfigs = [],
                newBaselayer = void 0,
                layerOptions = void 0,
                i = void 0,
                view = void 0;

            var baseLayerConfig = this.arrBaselayers[baseLayerUid];

            if (typeof baseLayerConfig !== "undefined" && !baseLayerConfig.layer) {
                // create layer
                sourceConfigs.osm = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].osm;
                sourceConfigs.stamen = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].stamen;
                //mapQuestSourceConfigs = c4g.maps.config.mapquest;
                sourceConfigs.mapbox = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].mapbox;
                sourceConfigs.klokan = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].klokan;
                sourceConfigs.here = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].here;
                sourceConfigs.thunderforest = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_config__["a" /* config */].thunderforest;

                //newBaselayer = new ol.layer.Tile({
                //  source: new ol.source.OSM()
                //});

                layerOptions = {};

                if (baseLayerConfig.attribution) {
                    if (layerOptions.attributions) {
                        layerOptions.attributions = layerOptions.attributions + ' ' + baseLayerConfig.attribution;
                    } else {
                        layerOptions.attributions = ol.source.OSM.ATTRIBUTION + ' ' + baseLayerConfig.attribution;
                    }
                } else if (!layerOptions.attributions) {
                    switch (baseLayerConfig.provider) {
                        case 'osm':
                            if (sourceConfigs.stamen[baseLayerConfig.style]) {
                                layerOptions.attributions = sourceConfigs.stamen[baseLayerConfig.style].attributions;
                                /*
                                              } else if (mapQuestSourceConfigs[baseLayerConfig.style]) {
                                                layerOptions.attributions = mapQuestSourceConfigs[baseLayerConfig.style].attributions;
                                */
                            } else if (sourceConfigs.osm[baseLayerConfig.style]) {
                                layerOptions.attributions = sourceConfigs.osm[baseLayerConfig.style].attributions;
                            } else {
                                layerOptions.attributions = ol.source.OSM.ATTRIBUTION;
                            }
                            break;
                        case 'mapbox':
                            layerOptions.attributions = sourceConfigs.mapbox[baseLayerConfig.mapbox_type].attributions;
                            break;
                        case 'klokan':
                            layerOptions.attributions = sourceConfigs.klokan[baseLayerConfig.klokan_type].attributions;
                            break;
                        case 'here':
                            layerOptions.attributions = sourceConfigs.here[baseLayerConfig.here_type].attributions;
                            break;
                        case 'thunder':
                            layerOptions.attributions = sourceConfigs.thunderforest[baseLayerConfig.thunderforest_type].attributions;
                            break;
                        default:
                            layerOptions.attributions = ol.source.OSM.ATTRIBUTION;
                            break;
                    }
                }

                //ToDo helper class for attributions

                //additional attribution
                if (this.mapController.data && this.mapController.data.attribution && this.mapController.data.attribution.additional) {
                    if (layerOptions.attributions) {
                        var additionalAttribution = this.mapController.data.attribution.additional;

                        exists = false;
                        for (i = 0; i < layerOptions.attributions.length; i += 1) {
                            if (layerOptions.attributions[i] == additionalAttribution) {
                                exists = true;
                                break;
                            }
                        }

                        if (!exists) {
                            layerOptions.attributions = layerOptions.attributions + ' ' + additionalAttribution;
                        }
                    } else {
                        layerOptions.attributions = this.mapController.data.attribution.additional;
                    }
                }

                //ToDo type class for geosearch_engine
                //geosearch attribution
                var geosearch_attribution = '';
                if (this.mapController.data.geosearch) {
                    var geosearch_engine = this.mapController.data.geosearch.geosearch_engine;

                    if (this.mapController.data && this.mapController.data.attribution) {

                        switch (geosearch_engine) {
                            case '4':
                                geosearch_attribution = ''; //con4gis mapservices
                                break;
                            case '3':
                                if (this.mapController.data.geosearch.custom_attribution) {
                                    geosearch_attribution = this.mapController.data.geosearch.custom_attribution;
                                }
                                break;
                            case '2':
                                geosearch_attribution = 'Nominatim Search Courtesy of <a href="http://www.mapquest.com/" target="_blank">MapQuest</a> <img src="http://developer.mapquest.com/content/osm/mq_logo.png" alt="" />';
                                break;
                            case '1':
                            default:
                                geosearch_attribution = 'Nominatim Search Courtesy of <a href="http://wiki.openstreetmap.org/wiki/Nominatim_usage_policy" target="_blank">OpenStreetMap</a>';
                                break;
                        }

                        var geosearchAttribution = geosearch_attribution;

                        var exists = false;
                        if (!layerOptions.attributions) {
                            layerOptions.attributions = [];
                        }
                        for (i = 0; i < layerOptions.attributions.length; i += 1) {
                            if (layerOptions.attributions[i] == geosearchAttribution) {
                                exists = true;
                                break;
                            }
                        }

                        if (!exists) {
                            layerOptions.attributions = layerOptions.attributions + ' ' + geosearchAttribution;
                        } else {
                            layerOptions.attributions = geosearchAttribution;
                        }
                    }
                }

                if (baseLayerConfig.sorting) {
                    layerOptions.sort = baseLayerConfig.sorting;
                }
                if (baseLayerConfig.minZoom && baseLayerConfig.minZoom >= 0) {
                    layerOptions.minZoom = baseLayerConfig.minZoom;
                }
                if (baseLayerConfig.maxZoom && baseLayerConfig.maxZoom >= 0) {
                    layerOptions.maxZoom = baseLayerConfig.maxZoom;
                }

                newBaselayer = this.createBaseLayer(layerOptions, baseLayerConfig, sourceConfigs);
                if (baseLayerConfig.hasOverlays) {
                    for (i = 0; i < baseLayerConfig.overlays.length; i++) {
                        if (!baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id]) {
                            baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id] = new __WEBPACK_IMPORTED_MODULE_1__c4g_overlay__["a" /* C4gOverlay */](baseLayerConfig.overlays[i], this.mapController);
                            baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id].layer = baseLayerConfig.overlayController.showOverlayLayer(baseLayerConfig.overlays[i].id);
                        }
                    }
                }
                // if (baseLayerConfig.hasOverlays) {
                //
                //     for (i = 0; i < baseLayerConfig.overlays.length; i += 1) {
                //         if(!c4g.maps.overlays){
                //             c4g.maps.overlays = [];
                //         }
                //         c4g.maps.overlays[baseLayerConfig.overlays[i].id] = baseLayerConfig.overlays[i];
                //         if(this.mapController.data.baselayer && parseInt(baseLayerConfig.id, 10) === parseInt(this.proxy.activeBaselayerId, 10)) {
                //             self.mapController.map.addLayer(self.showOverlayLayer(baseLayerConfig.overlays[i].id));
                //         }
                //     }
                //
                // }

                this.arrBaselayers[baseLayerUid].layer = newBaselayer;
            }

            layers = this.mapController.map.getLayers();

            // secure
            if (layers.item(0).get('checkSum') === "baseMapsLayer") {
                baseLayers = layers.item(0).getLayers();

                if (typeof this.arrBaselayers[baseLayerUid] !== "undefined") {
                    baselayer = this.arrBaselayers[baseLayerUid].layer;

                    if (baselayer) {
                        addBaselayer = true;
                        baseLayers.forEach(function (element, index, array) {
                            if (element && element === baselayer) {
                                element.setVisible(true);
                                addBaselayer = false;
                            } else if (element) {
                                element.setVisible(false);
                            } else {
                                addBaselayer = false;
                            }
                        }, this);

                        if (addBaselayer) {
                            baseLayers.push(baselayer);
                        }
                    }

                    view = this.mapController.map.getView();
                    var zoom = view.getZoom();
                    var center = view.getCenter();
                    if (baseLayerConfig.minZoom && baseLayerConfig.minZoom >= 0 || baseLayerConfig.maxZoom && baseLayerConfig.maxZoom >= 0) {
                        if (baseLayerConfig.minZoom && view.getZoom() < baseLayerConfig.minZoom) {
                            view.setZoom(baseLayerConfig.minZoom);
                        } else if (baseLayerConfig.maxZoom && view.getZoom() > baseLayerConfig.maxZoom) {
                            view.setZoom(baseLayerConfig.maxZoom);
                        }

                        var mapData = this.mapController.data;
                        if (mapData.zoomlevel || mapData.mouseposition) {
                            var controlContainerTopLeft = document.createElement('div');
                            controlContainerTopLeft.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TL + ' ' + __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
                            this.mapController.$overlaycontainer_stopevent.prepend(controlContainerTopLeft);

                            var controlContainerBottomLeft = document.createElement('div');
                            controlContainerBottomLeft.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL + ' ' + __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
                            $(controlContainerTopLeft).after(controlContainerBottomLeft);
                            this.mapController.leftSlideElements.push(controlContainerBottomLeft);

                            var controlContainerBottomLeftSub = document.createElement('div');
                            controlContainerBottomLeftSub.className = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL_SUB + ' ' + __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;

                            var newView = new ol.View({
                                center: center,
                                projection: view.getProjection(),
                                zoom: zoom,
                                minZoom: parseInt(baseLayerConfig.minZoom, 10) || 0,
                                maxZoom: parseInt(baseLayerConfig.maxZoom, 10) || 19,
                                rotation: view.getRotation(),
                                resolution: view.getResolution()
                            });

                            this.mapController.map.setView(newView);
                            __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].redrawMapView(this.mapController);

                            // if (mapData.scaleline) {
                            //   this.mapController.map.removeControl(this.mapController.controls.scaleline);
                            //   this.mapController.controls.scaleline = new ol.control.ScaleLine({
                            //     mapView: this.mapController.map.getView(),
                            //     target: controlContainerBottomLeft,
                            //     undefinedHTML: 'N/A'
                            //   });
                            //   this.mapController.map.addControl(this.mapController.controls.scaleline);
                            // }
                            //
                            // $(controlContainerBottomLeft).append(controlContainerBottomLeftSub);
                            //
                            // if (mapData.zoomlevel) {
                            //   this.mapController.map.removeControl(this.mapController.controls.zoomlevel);
                            //   this.mapController.controls.zoomlevel = new c4g.maps.control.Zoomlevel({
                            //     mapView: this.mapController.map.getView(),
                            //     target: controlContainerBottomLeftSub,
                            //     undefinedHTML: 'N/A'
                            //   });
                            //   this.mapController.map.addControl(this.mapController.controls.zoomlevel);
                            // }
                            //
                            // if (mapData.mouseposition) {
                            //   this.mapController.map.removeControl(this.mapController.controls.mouseposition);
                            //   this.mapController.controls.mouseposition = new ol.control.MousePosition({
                            //     projection: 'EPSG:4326',
                            //     coordinateFormat: ol.coordinate.toStringHDMS,
                            //     target: controlContainerBottomLeftSub,
                            //     undefinedHTML: 'N/A'
                            //   });
                            //   this.mapController.map.addControl(this.mapController.controls.mouseposition);
                            // }
                        }
                    }
                }
            }

            if (typeof baseLayerConfig !== "undefined") {
                this.proxy.activeBaselayerId = baseLayerConfig.id;

                __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_baselayer_visibility, baseLayerConfig);

                /**
                 * Cesium integration
                 */
                if (typeof baseLayerConfig !== "undefined") {
                    var mapData = this.mapController.data;
                    if (mapData.cesium && mapData.cesium.enable && (mapData.cesium.always || baseLayerConfig.cesium)) {
                        if (!this.ol3d) {
                            this.ol3d = new olcs.OLCesium({
                                map: this.mapController.map,
                                createSynchronizers: false /*,
                                                           time() {
                                                           const val = timeElt.value;
                                                           if (ol3d.getCesiumScene().globe.enableLighting && val) {
                                                           const d = new Date();
                                                           d.setUTCHours(val);
                                                           return Cesium.JulianDate.fromDate(d);
                                                           }
                                                           return Cesium.JulianDate.now();
                                                           }*/ });
                        }
                        /*const scene = ol3d.getCesiumScene();
                        const terrainProvider = new Cesium.CesiumTerrainProvider({
                            url: '//assets.agi.com/stk-terrain/world',
                            requestVertexNormals: true
                        });
                        scene.terrainProvider = terrainProvider;*/
                        this.ol3d.setEnabled(true);
                        /*window['toggleTime'] = function() {
                            scene.globe.enableLighting = !scene.globe.enableLighting;
                            if (timeElt.style.display == 'none') {
                                timeElt.style.display = 'inline-block';
                            } else {
                                timeElt.style.display = 'none';
                            }
                        };*/
                    } else {
                        if (this.ol3d && this.ol3d.getEnabled()) {
                            this.ol3d.setEnabled(false);
                            __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].redrawMapView(this.mapController);
                        }
                    }
                }
            }
        } // end of "showBaseLayer()"

    }]);

    return C4gBaselayerController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-baselayer.js":
/*!**********************************************!*\
  !*** ./Resources/public/js/c4g-baselayer.js ***!
  \**********************************************/
/*! exports provided: C4gBaselayer */
/*! exports used: C4gBaselayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gBaselayer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_overlay_controller__ = __webpack_require__(/*! ./c4g-overlay-controller */ "./Resources/public/js/c4g-overlay-controller.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var C4gBaselayer = function C4gBaselayer(baselayerArr, controller) {
    _classCallCheck(this, C4gBaselayer);

    this.id = baselayerArr['id'];
    this.pid = baselayerArr['pid'];
    this.name = baselayerArr['name'];
    this.display_name = baselayerArr['display_name'];
    this.provider = baselayerArr['provider'];
    this.osm_style = baselayerArr['osm_style'];
    this.osm_style_url1 = baselayerArr['osm_style_url1'];
    this.osm_style_url2 = baselayerArr['osm_style_url2'];
    this.osm_style_url3 = baselayerArr['osm_style_url3'];
    this.osm_style_url4 = baselayerArr['osm_style_url4'];
    this.osm_keyname = baselayerArr['osm_keyname'];
    this.mapbox_type = baselayerArr['mapbox_type'];
    this.bing_style = baselayerArr['bing_style'];
    this.style = baselayerArr['style'];
    this.attribution = baselayerArr['attribution'];
    this.params = baselayerArr['params'];
    this.wms_gutter = baselayerArr['wms_gutter'];
    this.minZoom = baselayerArr['minZoom'];
    this.maxZoom = baselayerArr['maxZoom'];
    this.protect_baselayer = baselayerArr['protect_baselayer'];
    this.permitted_groups = baselayerArr['permitted_groups'];
    this.api_key = baselayerArr['apiKey'] ? baselayerArr['apiKey'] : baselayerArr['api_key'];
    this.app_id = baselayerArr['app_id'];
    this.thunderforest_type = baselayerArr['thunderforest_type'];
    this.here_type = baselayerArr['here_type'];
    this.cesium = baselayerArr['cesium'];
    this.hide_in_be = baselayerArr['hide_in_be'];
    this.url = baselayerArr['url'];
    this.urls = baselayerArr['urls'];
    this.klokan_type = baselayerArr['klokan_type'];
    this.style_url = baselayerArr['style_url'];
    this.hasOverlays = baselayerArr['hasOverlays'];
    this.overlays = baselayerArr['overlays'];
    if (baselayerArr['layerGroup']) {
        var layerGroup = [];
        for (var index in baselayerArr['layerGroup']) {
            if (baselayerArr['layerGroup'].hasOwnProperty(index)) {
                layerGroup[index] = new C4gBaselayer(baselayerArr['layerGroup'][index]['entry']);
                layerGroup[index]['minZoom'] = baselayerArr['layerGroup'][index]['minZoom'];
                layerGroup[index]['maxZoom'] = baselayerArr['layerGroup'][index]['maxZoom'];
            }
        }
        this.layerGroup = layerGroup;
    }
    this.overlayController = new __WEBPACK_IMPORTED_MODULE_0__c4g_overlay_controller__["a" /* C4gOverlayController */](this);
    this.layer = false;
    this.controller = controller;
};

/***/ }),

/***/ "./Resources/public/js/c4g-layer-controller.js":
/*!*****************************************************!*\
  !*** ./Resources/public/js/c4g-layer-controller.js ***!
  \*****************************************************/
/*! exports provided: C4gLayerController */
/*! exports used: C4gLayerController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLayerController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_layer__ = __webpack_require__(/*! ./c4g-layer */ "./Resources/public/js/c4g-layer.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_starboardplugin_customtab__ = __webpack_require__(/*! ./c4g-maps-control-starboardplugin-customtab */ "./Resources/public/js/c4g-maps-control-starboardplugin-customtab.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var c4g = this.c4g;



var C4gLayerController = function () {
  function C4gLayerController(proxy) {
    _classCallCheck(this, C4gLayerController);

    this.proxy = proxy;
    this.mapController = proxy.options.mapController;
    this.arrLayers = {};
    this.layerRequests = {};
  }

  _createClass(C4gLayerController, [{
    key: "loadLayers",
    value: function loadLayers() {
      var self = this;
      if (this.mapId === 0) {
        return false;
      }

      //jQuery.ajax("maps/layerService",{//this.proxy.api_layer_url,{
      jQuery.ajax(this.proxy.api_layer_url, {
        dataType: this.mapController.data.jsonp ? "jsonp" : "json"

      }).done(function (data) {
        self.addLayers(data.layer, data.foreignLayers);
        self.proxy.layers_loaded = true;
        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.proxy.hook_layer_loaded, self.proxy.layerIds);
        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_layer_loaded, { layerIds: self.proxy.layerIds, proxy: self.proxy });
        self.proxy.checkLocationStyles({
          done: function done() {
            self.drawLayerInitial();
          }
        });
        return true;
      }).fail(function () {
        // @TODO: error-messages
        //   1) Visible message 4 users (i18n)
        //   2) Technical console.warn
        console.warn('An error occured while trying to load the layers...');
        return false;
      }).always(function () {
        // this.proxy.starboard.spinner.hide();
      });
    } // end of "loadLayer()"

  }, {
    key: "addLayers",
    value: function addLayers(layers, foreignLayers) {
      var i, j, k, p, isVisible, layer, storedItem, linkItems, uid, currentZoom, fnHandleAndAppendLayerChilds, endlessLoopId, parentId, parentIds, permalinkedLayers, child, _fnHandleChilds, key, starboard, fnAddToHook;

      var self = this;
      isVisible = false;

      permalinkedLayers = this.mapController.data.layers || [];

      fnHandleAndAppendLayerChilds = function fnHandleAndAppendLayerChilds(objItem) {
        var toggle, entryWrapper;

        if (objItem.hasChilds) {
          objItem.visibleChilds = self.addLayers(objItem.childs, foreignLayers);
        }
      }; // end of "fnHandleAndAppendLayerChilds()"

      // wrapper function to avoid closure accessibility
      fnAddToHook = function fnAddToHook(layer) {
        var layername, layerid, layericon;

        if (layer.childs && layer.childs.length > 0) {
          layername = layer.name;
          layerid = layer.tabId;
          layericon = layer.awesomeicon;
          starboard = self.proxy.options.mapController.controls.starboard;
          if (!starboard) {
            self.proxy.options.mapController.initializeStarboard();
            starboard = self.proxy.options.mapController.controls.starboard;
          }
          starboard.hook_layerswitcher_loaded.push(function () {
            starboard.starboardTabs = starboard.starboardTabs || {};
            starboard.starboardTabs[layerid] = new __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_starboardplugin_customtab__["a" /* Customtab */](starboard, {
              name: layername,
              tabId: layerid,
              awesomeicon: layericon
            });
          });
        }
      };

      if (layers && layers.length > 0) {
        for (i = 0; i < layers.length; i += 1) {
          if (this.arrLayers[layers[i].id]) {
            layer = this.arrLayers[layers[i].id];
          } else {
            layer = new __WEBPACK_IMPORTED_MODULE_0__c4g_layer__["a" /* C4gLayer */](layers[i]); //layers[i];
          }

          linkItems = false;
          //console.log(layer);
          if (_typeof(layer.content) === "object") {
            layer.content = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].objectToArray(layer.content);
          }

          // endless-loop prevention
          //
          parentId = layer.pid;
          parentIds = {};
          // build parent-ids chain
          while (self.arrLayers[parentId]) {
            if (parentIds[parentId]) {
              console.warn('Caught endless-loop (ID: ' + layer.id + ')');
              break;
            }
            parentIds[parentId] = true;
            parentId = this.arrLayers[parentId].pid;
          }

          if (layer.content && layer.content[0] && layer.content[0].cssClass) {
            layer.cssClass = layer.content[0].cssClass;
          }

          if (!parentIds[parentId]) {

            // prepare layer data if they are a new starboard tab
            if (layer.type === "startab") {
              layer.editable = true;
              layer.renderSpecial = true;
              layer.tabId = layer.id;
              if (!layer.layername) {
                layer.display = true;
              }
              // iterate childs and tell them to not load in layerswitcher
              _fnHandleChilds = function fnHandleChilds(fLayer) {
                for (var count = 0; count < fLayer.childs.length; count++) {
                  var childArr = fLayer.childs[count];
                  childArr.editable = true;
                  childArr.tabId = fLayer.tabId;
                  childArr.renderSpecial = true;
                  if (self.arrLayers[childArr.id]) {
                    child = self.arrLayers[childArr.id];
                  } else {
                    child = new __WEBPACK_IMPORTED_MODULE_0__c4g_layer__["a" /* C4gLayer */](childArr); //layers[i];
                  }
                  // set renderSpecial to remove it from normal layerswitcher
                  self.arrLayers[child.id] = child;
                  fLayer.childs[count] = child;
                  if (child.hasChilds) {
                    // recursive call
                    _fnHandleChilds(child);
                  }
                }
              }; // end of fnHandleChilds

              if (layer.hasChilds) {
                _fnHandleChilds(layer);
              }
              fnAddToHook(layer);
            }

            uid = layer.id || __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getUniqueId();
            this.arrLayers[uid] = layer;
            if (this.proxy.checkLayerIsActiveForZoom(layer.id)) {
              layer.isInactive = false;
            } else {
              layer.isInactive = true;
            }

            this.proxy.layerIds.push(layer.id);

            if (layer.display) {
              isVisible = true;
              fnHandleAndAppendLayerChilds(layer);
            } else if (layer.pid && this.arrLayers[layer.pid]) {
              // set hide when layers are not displayed in the starboard
              layer.hide = this.arrLayers[layer.pid].hide;
            }

            var visible = false;
            if (permalinkedLayers.length > 0) {
              for (p = 0; p < permalinkedLayers.length; p += 1) {
                if (permalinkedLayers[p] == layer.id) {
                  visible = true;
                  break;
                }
              }
            }

            if (layer.hide !== "1" || visible) {
              this.proxy.activeLayerIds[layer.id] = 'invisible';
            }
          }
        } // end of for-loop

        // wrapperElement.appendChild(wrapper);
      }

      return isVisible;
    } // end of "addLayers()"

  }, {
    key: "loadLayerContent",
    value: function loadLayerContent(itemUid) {

      var self = this,
          i,
          layers,
          features,
          featureProjection,
          dataProjection,
          layerGroup,
          contentData,
          requestData,
          requestContentData,
          requestVectorSource,
          vectorLayer,
          vectorSource,
          vectorStyle,
          clusterSource,
          styleForCluster,
          refreshInterval,
          refreshAjaxVars,
          fnAttachDataToLayer;

      refreshAjaxVars = {};

      fnAttachDataToLayer = function fnAttachDataToLayer(layer, data) {
        data.properties = data.properties || {};

        layer.popup = data.popup || data.properties.popup || false;
        layer.tooltip = data.tooltip || data.properties.tooltip || false;
        layer.tooltip_length = data.tooltip_length || data.properties.tooltip_length || false;
        layer.label = data.label || data.properties.label || false;
        layer.zoom_onclick = data.zoom_onclick || data.properties.zoom_onclick || false;
      };

      if (this.arrLayers[itemUid].content) {
        layers = [];

        var contentFeatures = [];
        for (i = 0; i < this.arrLayers[itemUid].content.length; i += 1) {
          contentData = this.arrLayers[itemUid].content[i];
          styleForCluster = function styleForCluster(feature, resolution) {

            var size, style, fFeatures, iconOffset, radius, k, fillcolor, fontcolor;

            if (contentData && contentData.locationStyle && self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle]) {
              style = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style(feature, resolution);

              if (!style) {
                style = [];
                self.fittingExtends[itemUid] = vectorSource.getExtent();
              }

              if (feature !== undefined && feature !== null && feature.self !== window) {
                if (feature.get('features')) {
                  fFeatures = feature.get('features');
                } else {
                  fFeatures = [];
                  fFeatures[0] = feature;
                }
                size = fFeatures.length;
                if (size > 1) {
                  if (fFeatures[0].getStyle() && size < 1000) {
                    // limit for performance
                    style[0] = fFeatures[0].getStyle()[0];
                    for (k = 0; k < fFeatures.length; k += 1) {
                      if (!fFeatures[k].getStyle()) {
                        style = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style(fFeatures[0], resolution);
                        break;
                      }
                    }
                  } else {
                    style = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style(fFeatures[0], resolution);
                  }
                  if (!style) {
                    style = [];
                  }

                  // calculate bubble-offset
                  iconOffset = [0, 0];
                  if (style[0]) {
                    if (_typeof(style[0].getImage()) && style[0].getImage().getRadius && typeof style[0].getImage().getRadius === "function") {
                      radius = parseInt(style[0].getImage().getRadius(), 10);
                      if (radius) {
                        iconOffset = [0, radius];
                      }
                    } else if (style[0].getImage() && style[0].getImage().getAnchor && typeof style[0].getImage().getAnchor === "function") {
                      iconOffset = style[0].getImage().getAnchor() || [0, 0];
                    }
                  }

                  fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity('4975A8', {
                    unit: '%',
                    value: 70
                  });

                  if (contentData.cluster_fillcolor) {
                    fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fillcolor, {
                      unit: '%',
                      value: 70
                    });
                  }
                  fontcolor = '#FFFFFF';
                  if (contentData.cluster_fontcolor) {
                    fontcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fontcolor, {
                      unit: '%',
                      value: 100
                    });
                  }

                  style.push(new ol.style.Style({
                    text: new ol.style.Text({
                      text: "●",
                      font: "60px sans-serif",
                      offsetX: -1 * iconOffset[0],
                      offsetY: -1 * iconOffset[1],
                      fill: new ol.style.Fill({
                        color: fillcolor
                      })
                    })
                  }));
                  style.push(new ol.style.Style({
                    text: new ol.style.Text({
                      text: size.toString(),
                      offsetX: -1 * iconOffset[0],
                      offsetY: -1 * iconOffset[1] + 3,
                      fill: new ol.style.Fill({
                        color: fontcolor
                      })
                    })
                  }));
                } else if (size === 1 && fFeatures[0].getStyle()) {
                  return fFeatures[0].getStyle();
                }
              }
            }
            return style;
          }; // end of styleForCluster()

          if (contentData && contentData.type === "urlData") {

            requestData = {};
            requestData.url = contentData.data.url;
            if (contentData.data.params) {
              requestData.params = decodeURIComponent(contentData.data.params);
            }

            if (contentData.settings.boundingBox) {
              requestContentData = contentData;
              requestVectorSource = new ol.source.Vector({
                loader: function loader(extent, resolution, projection) {
                  var boundingArray, strBoundingBox, url;

                  boundingArray = ol.proj.transformExtent(extent, projection, 'EPSG:4326');
                  //different cases for Overpass_QL and old Overpass
                  if (requestData.params.substr(0, 1) == "<") {
                    strBoundingBox = '<bbox-query s="' + boundingArray[1] + '" n="' + boundingArray[3] + '" w="' + boundingArray[0] + '" e="' + boundingArray[2] + '"/>';
                  } else {
                    strBoundingBox = boundingArray[1] + ',' + boundingArray[0] + ',' + boundingArray[3] + ',' + boundingArray[2];
                  }

                  url = requestData.url;
                  var bboxTag = requestData.params.indexOf('(bbox)') >= 0 ? /\(bbox\)/g : /\{{bbox\}}/g;

                  if (requestData.params) {

                    url += '?data=' + encodeURIComponent(requestData.params.replace(bboxTag, strBoundingBox));
                  }

                  if (self.layerRequests === undefined) {
                    self.layerRequests = {};
                  }
                  if (self.layerRequests['layerRequest' + itemUid] !== undefined) {
                    self.layerRequests['layerRequest' + itemUid].abort();
                  }

                  self.layerRequests['layerRequest' + itemUid] = jQuery.ajax({
                    url: url
                  }).done(function (response) {
                    var j, format, feature, rFeatures, osmNodes, osmNds, nodeIdx, ndIdx, infoNodes, newTag, ref;

                    delete self.layerRequests['layerRequest' + itemUid];

                    // preprocessing the osm_xml to find relation-nodes with information
                    if (response && response.children && response.children[0]) {
                      // 1) find nodes with data
                      osmNodes = response.children[0].getElementsByTagName('node');
                      if (osmNodes) {
                        infoNodes = {};
                        for (nodeIdx in osmNodes) {
                          if (osmNodes.hasOwnProperty(nodeIdx) && osmNodes[nodeIdx] && osmNodes[nodeIdx].children && osmNodes[nodeIdx].children.length > 0) {
                            infoNodes[osmNodes[nodeIdx].getAttribute('id')] = osmNodes[nodeIdx];
                            // infoNodes[osmNodes[nodeIdx].getAttribute('id')] = nodeIdx;
                          }
                        }
                      }

                      // 2) check and handle relations
                      osmNds = response.children[0].getElementsByTagName('nd');
                      if (osmNds) {
                        for (ndIdx in osmNds) {
                          if (ndIdx) {
                            if (osmNds.hasOwnProperty(ndIdx) && osmNds[ndIdx]) {
                              try {

                                ref = osmNds[ndIdx].getAttribute('ref');
                                if (infoNodes && ref && infoNodes[ref]) {
                                  if (requestContentData && requestContentData.settings) {
                                    if (requestContentData.settings.showAdditionalGeometries) {
                                      // mark as additional information
                                      if (response) {
                                        newTag = response.createElement('tag');
                                        if (newTag && osmNds[ndIdx].parentElement && osmNds[ndIdx].parentElement.getAttribute('id')) {
                                          newTag.setAttribute('k', 'c4g_osm_ref');
                                          newTag.setAttribute('v', osmNds[ndIdx].parentElement.getAttribute('id'));
                                          infoNodes[ref].appendChild(newTag);
                                        }
                                      }
                                    } else {
                                      // remove additional information
                                      infoNodes[ref].innerHTML = '';
                                    }
                                  }
                                }
                              } catch (e) {
                                console.warn('Could not check and handle relations.');
                              }
                            }
                          }
                        }
                      }
                      // import osm_xml
                      format = new ol.format.OSMXML();
                      if (format && response) {
                        try {
                          rFeatures = format.readFeatures(response, { featureProjection: projection });
                        } catch (e) {
                          console.warn('Can not read feature.');
                          //console.log(e.stack);
                        }
                      }

                      // postprocessing features
                      if (rFeatures && rFeatures.length > 0) {
                        for (j = 0; j < rFeatures.length; j += 1) {

                          if (rFeatures[j].getGeometry().getType() === "Point") {
                            rFeatures[j].set('osm_type', 'node');
                          } else {
                            rFeatures[j].set('osm_type', 'way');
                          }
                          rFeatures[j].set('c4g_type', 'osm');
                          rFeatures[j].set('cluster_zoom', contentData.cluster_zoom);
                          rFeatures[j].set('cluster_popup', contentData.cluster_popup);
                          rFeatures[j].set('loc_linkurl', contentData.loc_linkurl);
                          rFeatures[j].set('hover_location', contentData.hover_location);
                          rFeatures[j].set('hover_style', contentData.hover_style);
                          rFeatures[j].set('zoom_onclick', contentData.data.zoom_onclick);
                          rFeatures[j].set('label', contentData.data.label);

                          if (requestContentData.settings.forceNodes) {
                            // convert tracks and areas to points
                            if (rFeatures[j].getGeometry().getType() === "Polygon") {
                              var _centerPoint = rFeatures[j].getGeometry().getInteriorPoint().getCoordinates();
                              rFeatures[j].setGeometry(new ol.geom.Point(_centerPoint));
                            } else if (rFeatures[j].getGeometry().getType() === "LineString") {
                              // @TODO: prüfen ob dies korrekter mittelpunkt ist
                              var lineExtent = rFeatures[j].getGeometry().getExtent();
                              centerPoint = ol.extent.getCenter(lineExtent);
                              rFeatures[j].setGeometry(new ol.geom.Point(centerPoint));
                            }
                          }
                          if (rFeatures[j].get('c4g_osm_ref')) {
                            // if (requestContentData.settings.showAdditionalGeometries) {
                            if (requestContentData.settings.additionalStyle) {
                              // @TODO: load and attach style
                            } else {
                              rFeatures[j].setStyle(c4g.maps.utils.reduceStyle(requestContentData.locationStyle));
                            }
                          }
                        }
                      }
                    } else if (response && response.elements) {
                      rFeatures = [];

                      var _loop = function _loop(elementId) {
                        var element = response.elements[elementId];

                        if (element.type == "node") {
                          if (!element.tags) {
                            //not a feature, but part of a way or relation
                            return "continue";
                          }
                          var point = new ol.geom.Point([element.lon, element.lat]).transform('EPSG:4326', 'EPSG:3857');
                          feature = new ol.Feature({
                            geometry: point
                          });
                          feature.setId(element.id);
                          feature.set('osm_type', 'node');
                        } else if (element.type == "way") {
                          var arrCoords = [];

                          var _loop2 = function _loop2(_i) {
                            var node = response.elements.find(function (objNode) {
                              return objNode.id === element.nodes[_i];
                            });
                            arrCoords.push([node.lon, node.lat]);
                          };

                          for (var _i = 0; _i < element.nodes.length; _i++) {
                            _loop2(_i);
                          }
                          if (arrCoords[0][0] == arrCoords[arrCoords.length - 1][0] && arrCoords[0][1] == arrCoords[arrCoords.length - 1][1]) {
                            //polygon
                            delete arrCoords[arrCoords.length - 1];
                            arrCoords.length = arrCoords.length - 1;
                            var polygon = new ol.geom.Polygon([arrCoords]);
                            polygon.transform('EPSG:4326', 'EPSG:3857');
                            if (requestContentData.settings.forceNodes) {
                              // convert tracks and areas to points
                              var _centerPoint2 = feature.getGeometry().getInteriorPoint().getCoordinates();
                              feature.setGeometry(new ol.geom.Point(_centerPoint2));
                            }
                            feature = new ol.Feature({
                              geometry: polygon,
                              id: element.id
                            });
                          } else {
                            //linestring
                            var lineString = new ol.geom.LineString([arrCoords]);
                            lineString.transform('EPSG:4326', 'EPSG:3857');
                            feature = new ol.Feature({
                              geometry: lineString,
                              id: element.id
                            });
                            if (requestContentData.settings.forceNodes) {
                              var _lineExtent = feature.getGeometry().getExtent();
                              centerPoint = ol.extent.getCenter(_lineExtent);
                              feature.setGeometry(new ol.geom.Point(centerPoint));
                            }
                          }
                          feature.set('osm_type', 'way');
                        }
                        feature.set('c4g_type', 'osm');
                        feature.set('cluster_zoom', contentData.cluster_zoom);
                        feature.set('cluster_popup', contentData.cluster_popup);
                        feature.set('loc_linkurl', contentData.loc_linkurl);
                        feature.set('hover_location', contentData.hover_location);
                        feature.set('hover_style', contentData.hover_style);
                        feature.set('zoom_onclick', contentData.data.zoom_onclick);
                        feature.set('label', contentData.data.label);
                        for (var tags in element.tags) {
                          feature.set(tags, element.tags[tags]);
                        }
                        rFeatures.push(feature);
                      };

                      for (var elementId = 0; elementId < response.elements.length; elementId++) {
                        var _ret = _loop(elementId);

                        if (_ret === "continue") continue;
                      }
                    }
                    try {
                      requestVectorSource.addFeatures(rFeatures);
                    } catch (e) {
                      console.warn('Could not add features to source. The "forceNodes"-option should be used.');
                    }
                    //self.combineLayers(self);
                  }); // end of AJAX
                },
                strategy: ol.loadingstrategy.bbox
              });

              vectorSource = requestVectorSource;
            } else {

              if (typeof ol.format[contentData.format] === "function") {

                //StaticVector
                vectorSource = new ol.source.Vector({
                  format: new ol.format[contentData.format](),
                  url: requestData.url,
                  projection: 'EPSG:3857',
                  strategy: ol.loadingstrategy.all
                });

                if (contentData.settings && contentData.settings.refresh === true) {
                  if (self.layerRequests === undefined) {
                    self.layerRequests = {};
                  }

                  refreshInterval = typeof contentData.settings.interval === 'number' ? contentData.settings.interval : 10000;
                  /* do it with better ajax-handling
                   self.layerRequests['layerRequest' + itemUid] = window.setInterval(function () {
                   vectorSource.clear();
                   }, refreshInterval);
                   */

                  // Anfang Einschub neue AJAX-Layer
                  refreshAjaxVars.blnHasPositionIds = false;
                  refreshAjaxVars.arrPositionIds = [];
                  refreshAjaxVars.objFeatures = {};

                  vectorSource.set('refreshInterval', refreshInterval);

                  vectorSource.set('refreshFunction', function () {

                    if (!vectorSource.get('hasIds')) {
                      vectorSource.forEachFeature(function (feature) {
                        if (feature.get('positionId')) {
                          refreshAjaxVars.blnHasPositionIds = true;
                          refreshAjaxVars.arrPositionIds.push(feature.get('positionId'));
                          refreshAjaxVars.objFeatures[feature.get('positionId')] = feature;
                        }
                      });
                      if (refreshAjaxVars.blnHasPositionIds) {
                        vectorSource.set('hasIds', true);
                      }
                    }

                    jQuery.ajax({
                      url: requestData.url,
                      done: function done(data) {

                        if (data.renewableResponse) {
                          // update of stations
                          jQuery.each(data.features, function (index, featureData) {
                            if (featureData.type && featureData.type === "Feature") {
                              var feature = new ol.format[contentData.format]().readFeature(featureData, {
                                dataProjection: 'EPSG:4326',
                                featureProjection: 'EPSG:3857'
                              });
                              var layer = self.arrLayers[featureData.properties.id];
                              var popupContent = featureData.properties.popup;
                              layer.vectorLayer.getLayers().forEach(function (element, index, array) {
                                if (!self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId]) {
                                  self.proxy.locationStyleController.loadLocationStyles([featureData.properties.styleId], { done: function done() {
                                      element.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                                    } });
                                } else {
                                  element.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                                }
                                element.getSource().forEachFeature(function (nestedFeature) {
                                  nestedFeature.set('popup', popupContent);
                                });
                              });
                              layer.content[0].locationStyle = featureData.properties.styleId;

                              if (!self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId]) {
                                self.proxy.locationStyleController.loadLocationStyles([featureData.properties.styleId], { done: function done() {
                                    feature.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                                  } });
                              } else {
                                feature.setStyle(self.proxy.locationStyleController.arrLocStyles[featureData.properties.styleId].style);
                              }

                              if (self.proxy.activeLayerIds[layer.id]) {
                                self.hideLayer(layer.id);
                                self.showLayer(layer.id);
                              }
                              // vectorSource.addFeature(feature);
                            }
                          });
                        }

                        if (data.features) {

                          refreshAjaxVars.arrNewPositionIds = [];
                          refreshAjaxVars.objNewFeatures = {};

                          jQuery.each(data.features, function (index, featureData) {
                            if (featureData.type && featureData.type == "Feature") {
                              refreshAjaxVars.feature = new ol.format[contentData.format]().readFeature(featureData, {
                                dataProjection: 'EPSG:4326',
                                featureProjection: 'EPSG:3857'
                              });
                              refreshAjaxVars.feature.set('cluster_zoom', contentData.cluster_zoom);
                              refreshAjaxVars.feature.set('loc_linkurl', contentData.loc_linkurl);
                              refreshAjaxVars.feature.set('hover_location', contentData.hover_location);
                              refreshAjaxVars.feature.set('hover_style', contentData.hover_style);
                              if (refreshAjaxVars.feature.get('positionId')) {
                                refreshAjaxVars.arrNewPositionIds.push(refreshAjaxVars.feature.get('positionId'));
                                refreshAjaxVars.objNewFeatures[refreshAjaxVars.feature.get('positionId')] = refreshAjaxVars.feature;
                              }
                            }
                          });

                          jQuery.each(refreshAjaxVars.arrPositionIds, function (index, positionId) {
                            if (refreshAjaxVars.arrNewPositionIds.indexOf(positionId) == -1) {
                              // positions id in neuer antwort nicht mehr enthalten -> lösche feature
                              if (typeof refreshAjaxVars.objFeatures[positionId] !== "undefined") {
                                vectorSource.removeFeature(refreshAjaxVars.objFeatures[positionId]);
                                delete refreshAjaxVars.arrPositionIds[index];
                              }
                            }
                          });

                          jQuery.each(refreshAjaxVars.arrNewPositionIds, function (index, positionId) {
                            if (refreshAjaxVars.arrPositionIds.indexOf(positionId) == -1) {
                              // positions id ist noch nicht vorhanden -> neues feature
                              refreshAjaxVars.arrPositionIds.push(positionId);
                              refreshAjaxVars.objFeatures[positionId] = refreshAjaxVars.objNewFeatures[positionId];
                              vectorSource.addFeature(refreshAjaxVars.objNewFeatures[positionId]);
                            }
                          });
                        }
                      }
                    });
                  });

                  self.proxy.requestFunctions['request_' + itemUid] = {
                    'function': vectorSource.get('refreshFunction'),
                    'interval': refreshInterval
                  };

                  // Ende Einschub neue AJAX-Layer
                }
              } else {
                console.warn('Format type ' + contentData.format + ' in ol.format not found.');
              }
            }

            if (contentData.settings.cluster) {

              clusterSource = new ol.source.Cluster({
                distance: 40,
                //threshold: 2, //minimum element count
                source: vectorSource,
                zoom: contentData.cluster_zoom
              });
              //console.log(clusterSource);
              this.styleForCluster = styleForCluster;

              //vectorLayer = utils.getVectorLayer(clusterSource, styleForCluster);

              vectorLayer = new ol.layer.AnimatedCluster({ name: 'Cluster',
                source: clusterSource,
                // Use a style function for cluster symbolisation
                style: styleForCluster
              });
            } else {
              vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle] ? self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style : null);
            }

            /* Fit to extend */
            if (contentData.settings && contentData.settings.fitToExtend) {

              self.fittingExtends = self.fittingExtends || {};

              vectorSource.on('change', function () {

                // check currently stored id's
                for (i in self.fittingExtends) {
                  if (self.fittingExtends.hasOwnProperty(i)) {
                    if (typeof self.proxy.activeLayerIds[i] === "undefined" || self.proxy.activeLayerIds[0] == "invisible") {
                      delete self.fittingExtends[i];
                    }
                  }
                }

                self.fittingExtends[itemUid] = vectorSource.getExtent(); //vectorSource.getFeatures();
                __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].fitToExtents(self.fittingExtends, self.mapController.map);
              });
            }
            // end of fit to extend

            fnAttachDataToLayer(vectorLayer, contentData.data);
            layers.push(vectorLayer);
          } else if (this.arrLayers[itemUid].type === "table" || this.arrLayers[itemUid].type === "link") {
            var layerContent = this.arrLayers[itemUid].content;
            contentData = layerContent[0];
            if (contentData && contentData.data.properties && contentData.data.properties.projection) {
              dataProjection = contentData.data.properties.projection;
              featureProjection = this.mapController.map.getView().getProjection();
            } else {
              dataProjection = undefined;
            }

            // force all nodes into one layer


            var contentFeature = new ol.format[layerContent[i].format]({}).readFeatures(layerContent[i].data, {
              featureProjection: featureProjection,
              dataProjection: dataProjection
            })[0];
            contentFeature.set('cluster_zoom', contentData.cluster_zoom);
            contentFeature.set('cluster_popup', contentData.cluster_popup);
            contentFeature.set('loc_linkurl', contentData.loc_linkurl);
            contentFeature.set('hover_location', contentData.hover_location);
            contentFeature.set('hover_style', contentData.hover_style);
            contentFeature.set('popup', layerContent[i].data.properties.popup);
            contentFeature.set('zoom_onclick', contentData.zoom_onclick);
            contentFeatures.push(contentFeature);

            if (i + 1 === this.arrLayers[itemUid].content.length) {
              vectorSource = new ol.source.Vector({
                features: contentFeatures,
                projection: 'EPSG:3857',
                format: new ol.format.GeoJSON()

              });
              if (contentData && contentData.settings && contentData.settings.cluster) {
                clusterSource = new ol.source.Cluster({
                  distance: 40,
                  zoom: contentData.cluster_zoom,

                  //threshold: 2, //minimum element count
                  source: vectorSource
                });
                //vectorLayer = utils.getVectorLayer(clusterSource, styleForCluster);

                vectorLayer = new ol.layer.AnimatedCluster({ name: 'Cluster',
                  source: clusterSource,
                  // Use a style function for cluster symbolisation
                  style: styleForCluster
                });
              } else {
                vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, contentData && self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle] ? self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style : null);
              }
              layers.push(vectorLayer);
            }
            //return;
          } else {
            if (this.arrLayers[itemUid].content.length > 1) {
              //TODO: refactoren und kürzen!
              // we have overpass request with reassigned forum layers
              // forum layers can not be drawn via the normal drawLayer, because they do not have a Uid
              if (contentData && typeof ol.format[contentData.format] === "function") {
                if (contentData.data.properties && contentData.data.properties.projection) {
                  dataProjection = contentData.data.properties.projection;
                  featureProjection = this.mapController.map.getView().getProjection();
                } else {
                  dataProjection = undefined;
                }

                features = new ol.format[contentData.format]({}).readFeatures(contentData.data, {
                  featureProjection: featureProjection,
                  dataProjection: dataProjection
                });

                var missingStyles = [];
                var unstyledFeatures = [];
                for (var j = 0; j < features.length; j += 1) {
                  if (features[j].get('styleId')) {
                    if (self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')] && self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style) {
                      features[j].setStyle(self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style);
                    } else {
                      missingStyles.push(features[j].get('styleId'));
                      unstyledFeatures.push(features[j]);
                    }
                  }
                }

                vectorStyle = self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle] && self.proxy.locationStyleController.arrLocStyles[contentData.locationStyle].style;

                if (missingStyles.length > 0) {
                  //TODO there are unstyled features because some styles were not loaded
                } else {
                  vectorSource = new ol.source.Vector({
                    features: features,
                    projection: 'EPSG:3857',
                    format: new ol.format.GeoJSON()
                  });
                  clusterSource = new ol.source.Cluster({
                    distance: 40,
                    zoom: contentData.cluster_zoom,

                    //threshold: 2, //minimum element count
                    source: vectorSource
                  });

                  vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(clusterSource, vectorStyle);
                  if (contentData.data && contentData.data.properties) {
                    if (contentData.data.properties.popup) {
                      vectorLayer.popup = contentData.data.properties.popup;
                    }
                    if (contentData.data.properties.tooltip) {
                      vectorLayer.tooltip = contentData.data.properties.tooltip;
                    }
                    if (contentData.data.properties.label) {
                      vectorLayer.label = contentData.data.properties.label;
                    }
                    if (contentData.data.properties.onclick_zoom) {
                      vectorLayer.onclick_zoom = contentData.data.properties.onclick_zoom;
                    }
                  }
                  layers.push(vectorLayer);
                }
              } else {
                if (contentData) {
                  console.warn('Format type ' + contentData.format + ' in ol.format not found.');
                } else {
                  //no contentData, maybe a link
                }
              }
            } else {
              // normal, not overpass layer
              self.drawLayer(itemUid);
              return;
            }
          }
        }

        // add vector layer group
        layerGroup = new ol.layer.Group({
          layers: layers
        });
        this.arrLayers[itemUid].vectorLayer = layerGroup;
        self.mapController.map.addLayer(layerGroup);
        //self.combine(self);
      } else if (this.arrLayers[itemUid].async_content == 1) {
        styleForCluster = function styleForCluster(feature, resolution) {
          var styleId, style, iconOffset, radius, fillcolor, fontcolor;
          if (feature && feature.get('features')) {
            if (styleId = feature.get('features')[0].get('locationStyle')) {
              if (self.proxy.locationStyleController.arrLocStyles[styleId] && self.proxy.locationStyleController.arrLocStyles[styleId].style) {
                style = self.proxy.locationStyleController.arrLocStyles[styleId].style(feature.get('features')[0], resolution);
              }
            }
            if (!style) {
              style = [];
            }
            if (feature.get('features').length > 1) {
              // calculate bubble-offset
              iconOffset = [0, 0];
              if (style[0]) {
                if (typeof style[0].getImage().getRadius === "function") {
                  radius = parseInt(style[0].getImage().getRadius(), 10);
                  if (radius) {
                    iconOffset = [0, radius];
                  }
                } else if (typeof style[0].getImage().getAnchor === "function") {
                  iconOffset = style[0].getImage().getAnchor() || [0, 0];
                }
              }

              fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity('4975A8', {
                unit: '%',
                value: 70
              });

              if (contentData.cluster_fillcolor) {
                fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fillcolor, {
                  unit: '%',
                  value: 70
                });
              }
              if (feature.get('features')[0].get('cluster_fillcolor')) {
                fillcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(feature.get('features')[0].get('cluster_fillcolor'), {
                  unit: '%',
                  value: 70
                });
              }
              fontcolor = '#FFFFFF';
              if (feature.get('features')[0].get('cluster_fontcolor')) {
                fontcolor = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(feature.get('features')[0].get('cluster_fontcolor'), {
                  unit: '%',
                  value: 100
                });
              }

              style.push(new ol.style.Style({
                text: new ol.style.Text({
                  text: "●",
                  font: "60px sans-serif",
                  offsetX: -1 * iconOffset[0],
                  offsetY: -1 * iconOffset[1],
                  fill: new ol.style.Fill({
                    color: fillcolor
                  })
                })
              }));
              style.push(new ol.style.Style({
                text: new ol.style.Text({
                  text: feature.get('features').length.toString(),
                  offsetX: -1 * iconOffset[0],
                  offsetY: -1 * iconOffset[1] + 3,
                  fill: new ol.style.Fill({
                    color: fontcolor
                  })
                })
              }));
            }
          }

          if (style) {
            return style;
          }
        };
        requestVectorSource = new ol.source.Vector({
          loader: function loader(extent, resolution, projection) {
            var boundingArray, strBoundingBox, url;
            self.mapController.spinner.show();
            boundingArray = ol.proj.transformExtent(extent, projection, 'EPSG:4326');
            strBoundingBox = boundingArray[0] + ',' + boundingArray[1] + ';' + boundingArray[2] + ',' + boundingArray[3];
            if (self.layerRequests === undefined) {
              self.layerRequests = {};
            }
            if (self.layerRequests['layerDataRequest' + itemUid] !== undefined) {
              self.layerRequests['layerDataRequest' + itemUid].abort();
            }
            if (!self.proxy.locationStyleController.arrLocStyles[self.arrLayers[itemUid].locstyle]) {
              self.proxy.locationStyleController.loadLocationStyles([self.arrLayers[itemUid].locstyle], { done: function done() {} });
            }

            self.layerRequests['layerDataRequest' + itemUid] = jQuery.ajax({
              url: self.proxy.api_layercontentdata_url + '/' + self.arrLayers[itemUid].id + '/' + strBoundingBox
            }).done(function (data) {
              if (data.length > 0 && !contentFeatures) {
                contentFeatures = [];
              }
              var layer = self.arrLayers[itemUid];
              loopData: for (var _i2 = 0; _i2 < data.length; _i2++) {
                contentData = data[_i2];
                for (var _j = 0; _j < contentFeatures.length; _j++) {
                  if (contentData.id === contentFeatures[_j].id) continue loopData;
                }
                var resultCoordinate = ol.proj.transform([parseFloat(contentData['geox']), parseFloat(contentData['geoy'])], 'EPSG:4326', 'EPSG:3857');
                var point = new ol.geom.Point(resultCoordinate);
                contentFeature = new ol.Feature(point);
                contentFeature.setId(contentData.id);
                contentFeature.set('cluster_zoom', layer.cluster.zoom);
                contentFeature.set('cluster_popup', layer.cluster.popup);
                contentFeature.set('cluster_fillcolor', layer.cluster.fillcolor);
                contentFeature.set('cluster_fontcolor', layer.cluster.fontcolor);
                contentFeature.set('loc_linkurl', layer.loc_linkurl);
                contentFeature.set('hover_location', layer.hover_location);
                contentFeature.set('hover_style', layer.hover_style);
                var popup = contentData['popup'] ? contentData['popup'] : $.extend({}, layer.popup);
                if (popup && popup.content && popup.content.search && popup.content.search('itemId')) {
                  popup.content = popup.content.replace('itemId', contentData['id']);
                }
                if (contentData['label']) {
                  contentFeature.set('label', contentData['label']);
                }
                if (contentData['tooltip']) {
                  contentFeature.set('tooltip', contentData['tooltip']);
                }
                contentFeature.set('popup', popup);
                contentFeature.set('zoom_onclick', layer.zoom_onclick);
                contentFeature.set('tid', contentData['id']);
                var locstyle = contentData['locstyle'] || layer.locstyle;
                contentFeature.set('locationStyle', locstyle);
                if (locstyle && self.proxy.locationStyleController.arrLocStyles[locstyle] && self.proxy.locationStyleController.arrLocStyles[locstyle].style) {
                  contentFeature.setStyle(self.proxy.locationStyleController.arrLocStyles[locstyle].style);
                  contentFeatures.push(contentFeature);
                } else {
                  if (!unstyledFeatures) {
                    unstyledFeatures = [];
                  }
                  if (!missingStyles) {
                    missingStyles = [];
                  }
                  contentFeature.set('styleId', locstyle);
                  unstyledFeatures.push(contentFeature);
                  missingStyles[locstyle] = locstyle;
                }
              }
              if (missingStyles) {
                self.proxy.locationStyleController.loadLocationStyles(missingStyles, { done: function done() {
                    for (i = 0; i < unstyledFeatures.length; i++) {
                      var styleId = unstyledFeatures[i].get('styleId');
                      unstyledFeatures[i].setStyle(self.proxy.locationStyleController.arrLocStyles[styleId].style);
                      requestVectorSource.addFeature(unstyledFeatures[i]);
                    }
                    missingStyles = undefined;
                  } });
              }

              if (data.length > 0) {
                requestVectorSource.addFeatures(contentFeatures);
              }
            }).always(function () {
              self.mapController.spinner.hide();
            });
          },
          strategy: ol.loadingstrategy.bbox
        });

        if (this.arrLayers[itemUid].cluster) {
          var layer = self.arrLayers[itemUid];
          var map = self.mapController.map;
          var currentZoom = map.getView().getZoom();
          var clusterDistance = this.arrLayers[itemUid].cluster.distance || 20;
          if (currentZoom >= layer.cluster.zoom) {
            clusterDistance = 0;
          }

          clusterSource = new ol.source.Cluster({
            distance: clusterDistance,
            //threshold: 2, //minimum element count
            source: requestVectorSource
          });
          vectorLayer = new ol.layer.AnimatedCluster({ name: 'Cluster',
            source: clusterSource,
            // Use a style function for cluster symbolisation
            style: styleForCluster
          });
        } else {
          vectorLayer = new ol.layer.Vector({
            name: 'Layer',
            source: requestVectorSource
          });
        }
        layers = layers || [];
        layers.push(vectorLayer);
        layerGroup = new ol.layer.Group({
          layers: layers
        });
        this.arrLayers[itemUid].vectorLayer = layerGroup;
        self.mapController.map.addLayer(layerGroup);
      } else {
        self.mapController.spinner.show();
        jQuery.ajax({
          dataType: self.mapController.data.jsonp ? "jsonp" : "json",
          url: self.proxy.api_layercontent_url + '/' + self.arrLayers[itemUid].id
        }).done(function (data) {
          var j = void 0,
              newLocationStyles = void 0;

          if (data.length > 0) {
            newLocationStyles = [];

            for (j = 0; j < data.length; j += 1) {

              self.arrLayers[itemUid].content = self.arrLayers[itemUid].content || [];

              self.arrLayers[itemUid].content.push(data[j]);
              newLocationStyles.push(data[j].locationStyle);
            }

            self.proxy.checkLocationStyles({
              done: function done() {
                // @TODO: check this!
                self.loadLayerContent(itemUid);
              }
            });
          }
        }).always(function () {
          self.mapController.spinner.hide();
        });
      }
    } // end of "loadLayerContent()"

  }, {
    key: "hideLayer",
    value: function hideLayer(layerUid, keepLayer) {

      var layer, i, j;

      layer = this.arrLayers[layerUid];
      if (!layer) {
        //console.warn('Cannot hide unknown layer (' + layerUid + ')');
        return false;
      }

      // check if layer is listed as "active"
      // otherwise there is nothing to remove or change
      if (this.proxy.activeLayerIds[layerUid]) {
        // remove layer from map (if it was visible before)
        if (this.proxy.activeLayerIds[layerUid] === 'visible' && layer.vectorLayer) {
          // [info]: do not use "layer.vectorLayer.setVisible(false);"
          //         see "showLayer()" for more information
          this.mapController.map.removeLayer(layer.vectorLayer);
        }
        // only mark as "invisible" if "keepLayer" is "true"
        // this is needed for the zoom-bounds
        if (keepLayer) {
          this.proxy.activeLayerIds[layerUid] = 'invisible';
        } else {
          delete this.proxy.activeLayerIds[layerUid];
        }
      }

      // childs needed to be checked independent from its parents state


      //ToDo loading problem
      if (layer && layer.hasChilds) {
        for (i = 0; i < layer.childs.length; i += 1) {
          this.hideLayer(layer.childs[i].id);
        }
      }
      if (layer.isInactive) {
        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_layer_visibility, layerUid);
        return;
      }
      layer.isInactive = true;

      if (this.layerRequests && typeof this.layerRequests['layer_request_' + layerUid] !== "undefined") {
        if (typeof this.layerRequests['layer_request_' + layerUid] == "number") {
          try {
            window.clearInterval(this.layerRequests['layer_request_' + layerUid]);
            delete this.layerRequests['layer_request_' + layerUid];
          } catch (e) {}
        }
      }
      //this.combineLayers(this);
      this.mapController.map.getView().setCenter([this.mapController.map.getView().getCenter()[0] + 0.001, this.mapController.map.getView().getCenter()[1]]);
      // hooks
      __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_layer_visibility, layerUid);
    } // end of "hideLayer()"

  }, {
    key: "hideChildLayer",
    value: function hideChildLayer(layerUid, childUid) {
      var layer = this.arrLayers[layerUid];
      childUid = childUid.replace(layerUid, '');
      var childLayer = layer.vectorLayer.getLayers().getArray()[childUid];
      childLayer.set('visible', false);
    }
  }, {
    key: "showChildLayer",
    value: function showChildLayer(layerUid, childUid) {
      var layer = this.arrLayers[layerUid];
      childUid = childUid.replace(layerUid, '');
      var childLayer = layer.vectorLayer.getLayers().getArray()[childUid];
      childLayer.set('visible', true);
    }
  }, {
    key: "showLayer",
    value: function showLayer(layerUid) {
      var layer, mapLayers, addLayer, i, j, activeForZoom;

      activeForZoom = this.proxy.checkLayerIsActiveForZoom(layerUid);
      layer = this.arrLayers[layerUid];

      if (activeForZoom) {
        if (this.proxy.activeLayerIds[layerUid] !== 'visible') {
          //if (layer.link_id) {
          //  this.proxy.activeLayerIds[layer.link_id] = 'visible';
          //} else
          if (layer && layer.vectorLayer) {
            // [info]: do not use: "layer.vectorLayer.setVisible(true);"
            //         Always add and remove Layers, so that the last
            //         clicked layer is always ontop of the others.

            // check if layer is really not already on the map
            // to prevent adding the same layer multiple times
            addLayer = true;
            mapLayers = this.mapController.map.getLayers();
            mapLayers.forEach(function (element, index, array) {
              if (element === layer.vectorLayer) {
                addLayer = false;
              }
            });
            if (addLayer) {
              if (layer.vectorLayer.getLayers().getArray()[0] && layer.vectorLayer.getLayers().getArray()[0].popup && layer.vectorLayer.getLayers().getArray()[0].popup.showPopupOnActive) {
                c4g.maps.popup.$content.html('');
                c4g.maps.popup.$popup.addClass(c4g.maps.constant.css.ACTIVE).addClass(c4g.maps.constant.css.LOADING);
                c4g.maps.popup.spinner.show();
                var popupInfos = layer.vectorLayer.getLayers().getArray()[0].popup;
                var features = layer.vectorLayer.getLayers().getArray()[0].getSource().getFeatures();
                var coord = features['0'].getGeometry().getCoordinates();
                if (popupInfos.async === false) {
                  var objPopup = {};
                  objPopup.popup = popupInfos;
                  objPopup.feature = features['0'];
                  objPopup.layer = layer.vectorLayer.getLayers().getArray()[0];
                  // Call the popup hook for plugin specific popup content
                  if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                    __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                  }
                  this.proxy.setPopup(objPopup);
                } else {
                  var self = this;
                  jQuery.ajax({
                    dataType: "json",
                    url: self.api_infowindow_url + '/' + popupInfos.content,
                    done: function done(data) {
                      var popupInfo = {
                        async: popupInfos.async,
                        content: data.content,
                        popup: popupInfos.popup,
                        routing_link: popupInfos.routing_link
                      };

                      var objPopup = {};
                      objPopup.popup = popupInfo;
                      objPopup.feature = features['0'];
                      objPopup.layer = layer;

                      // Call the popup hook for plugin specific popup content
                      if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                      }

                      self.proxy.setPopup(objPopup);
                    }
                  });
                }
              }
              this.mapController.map.addLayer(layer.vectorLayer);
            }
          } else {
            this.loadLayerContent(layerUid);
          }
          this.proxy.activeLayerIds[layerUid] = 'visible';
        } else {
          //if (layer.link_id) {
          //  this.proxy.activeLayerIds[layer.link_id] = 'invisible';
          //} else {
          //this.proxy.activeLayerIds[layerUid] = 'invisible';
          //}
        }
      }

      if (layer && layer.hasChilds && activeForZoom) {
        for (i = 0; i < layer.childs.length; i += 1) {
          this.showLayer(layer.childs[i].id);
        }
      }

      if (layer && activeForZoom) {
        layer.isInactive = false;
      }

      if (typeof this.proxy.requestFunctions['request_' + layerUid] !== "undefined") {

        if (this.layerRequests && typeof this.layerRequests['layer_request_' + layerUid] === "undefined") {
          this.layerRequests['layer_request_' + layerUid] = window.setInterval(this.proxy.requestFunctions['request_' + layerUid].function, this.proxy.requestFunctions['request_' + layerUid].interval);
        }
      }
      //this.combineLayers(this);
      // hooks
      __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(this.proxy.hook_layer_visibility, layerUid);
    } // end of "showLayer()"

  }, {
    key: "drawLayer",
    value: function drawLayer(itemUid) {

      var self, element, elementContent, layers, i, j, missingStyles, unstyledFeatures, features, dataProjection, featureProjection, vectorSource, vectorLayer, vectorStyle, layerGroup;

      self = this;
      element = this.arrLayers[itemUid];

      // if (!element.hide) {

      layers = [];
      if (element.content && element.content.length > 0) {
        for (i = 0; i < element.content.length; i += 1) {

          elementContent = element.content[i];
          if (!elementContent) {
            continue;
          }
          if (typeof ol.format[elementContent.format] === "function") {

            // if (element.content[i].origType === 'single') {
            //   featureProjection = this.mapController.map.getView().getProjection();
            // } else {
            //   featureProjection = undefined;
            // }
            if (elementContent.data.properties && elementContent.data.properties.projection) {
              dataProjection = elementContent.data.properties.projection;
              featureProjection = this.mapController.map.getView().getProjection();
            } else {
              dataProjection = undefined;
            }

            if (elementContent.format === "OSMXML") {
              continue;
            }
            if (elementContent.data.geometry && elementContent.data.geometry.type === "Circle") {
              // draw circle geometries
              features = [];
              var feature = new ol.Feature(new ol.geom.Circle(ol.proj.fromLonLat(elementContent.data.geometry.center), parseFloat(elementContent.data.geometry.radius)));
              feature.set('styleId', elementContent.locationStyle);
              features.push(feature);
            } else {
              // remaining geometries
              features = new ol.format[elementContent.format]({}).readFeatures(elementContent.data, {
                featureProjection: featureProjection,
                dataProjection: dataProjection
              });
            }

            missingStyles = [];
            unstyledFeatures = [];
            for (j = 0; j < features.length; j += 1) {
              // features[j].setId(utils.getUniqueId());
              // features[j].set('projection', this.mapController.map.getView().getProjection());
              // features[j].set('projection', "EPSG:4326");
              features[j].set('hover_location', elementContent.hover_location);
              features[j].set('hover_style', elementContent.hover_style);
              if (features[j].get('styleId')) {
                if (self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')] && self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style) {
                  features[j].setStyle(self.proxy.locationStyleController.arrLocStyles[features[j].get('styleId')].style);
                } else {
                  missingStyles.push(features[j].get('styleId'));
                  unstyledFeatures.push(features[j]);
                }
              } else if (elementContent.locationStyle) {
                // feature has no property styleId, but elementContent has locationstyle
                if (self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle] && self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].style) {
                  //features[j].setStyle(self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].style);
                } else {
                  missingStyles.push(elementContent.locationStyle);
                  unstyledFeatures.push(features[j]);
                  features[j].set('styleId', elementContent.locationStyle);
                }
              }
            }

            vectorStyle = self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle] && self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].style;
            if (self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle] && self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].fnStyleFunction) {

              vectorStyle = Function("feature", "data", "map", self.proxy.locationStyleController.arrLocStyles[elementContent.locationStyle].fnStyleFunction);
            }
            if (missingStyles.length > 0) {
              this.proxy.locationStyleController.loadLocationStyles(missingStyles, {
                done: function done() {
                  var f, fLayerGroup, fLayers, fVectorLayer, fVectorSource;
                  for (f = 0; f < unstyledFeatures.length; f += 1) {
                    if (self.proxy.locationStyleController.arrLocStyles[unstyledFeatures[f].get('styleId')]) {
                      unstyledFeatures[f].setStyle(self.proxy.locationStyleController.arrLocStyles[unstyledFeatures[f].get('styleId')].style);
                    }
                  }

                  fVectorSource = new ol.source.Vector({
                    features: features,
                    projection: 'EPSG:3857',
                    format: new ol.format.GeoJSON()
                  });

                  fVectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(fVectorSource, vectorStyle);

                  // layers.push(vectorLayer);
                  if (self.arrLayers[itemUid].fVectorLayer) {
                    fLayerGroup = self.arrLayers[itemUid].vectorLayer;
                    fLayers = fLayerGroup.getLayers();

                    if (elementContent.data && elementContent.data.properties) {
                      if (elementContent.data.properties.popup) {
                        fVectorLayer.popup = elementContent.data.properties.popup;
                      }
                      if (elementContent.data.properties.tooltip) {
                        fVectorLayer.tooltip = elementContent.data.properties.tooltip;
                      }
                      if (elementContent.data.properties.label) {
                        fVectorLayer.label = elementContent.data.properties.label;
                      }
                      if (elementContent.data.properties.zoom_onclick) {
                        fVectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                      }
                    }

                    fLayers.push(fVectorLayer);
                    fLayerGroup.setLayers(fLayers);
                  } else {
                    if (elementContent.data && elementContent.data.properties) {
                      if (elementContent.data.properties.popup) {
                        fVectorLayer.popup = elementContent.data.properties.popup;
                      }
                      if (elementContent.data.properties.tooltip) {
                        fVectorLayer.tooltip = elementContent.data.properties.tooltip;
                      }
                      if (elementContent.data.properties.label) {
                        fVectorLayer.label = elementContent.data.properties.label;
                      }
                      if (elementContent.data.properties.zoom_onclick) {
                        fVectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                      }
                    }
                    fLayerGroup = new ol.layer.Group({
                      layers: [fVectorLayer]
                    });
                    self.arrLayers[itemUid].vectorLayer = fLayerGroup;
                    self.mapController.map.addLayer(fLayerGroup);
                  }
                }
              });
            } else {
              if (element.split_geojson) {
                for (var _i3 = 0; _i3 < features.length; _i3++) {
                  vectorSource = new ol.source.Vector({
                    projection: 'EPSG:3857',
                    format: new ol.format.GeoJSON()
                  });
                  vectorSource.addFeature(features[_i3]);
                  vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, vectorStyle);
                  for (var _j2 = 0; _j2 < element.geojson_attributes.split(',').length; _j2++) {
                    vectorLayer.set(element.geojson_attributes.split(',')[_j2], features[_i3].get(element.geojson_attributes.split(',')[_j2]));
                  }
                  layers.push(vectorLayer);
                  if (elementContent.data.properties.popup) {
                    vectorLayer.popup = elementContent.data.properties.popup;
                  }
                  if (elementContent.data.properties.tooltip) {
                    vectorLayer.tooltip = elementContent.data.properties.tooltip;
                  }
                  if (elementContent.data.properties.label) {
                    vectorLayer.label = elementContent.data.properties.label;
                  }
                  if (elementContent.data.properties.zoom_onclick) {
                    vectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                  }
                }
              } else {
                vectorSource = new ol.source.Vector({
                  features: features,
                  projection: 'EPSG:3857',
                  format: new ol.format.GeoJSON()
                });
                vectorLayer = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].getVectorLayer(vectorSource, vectorStyle);

                if (elementContent.data && elementContent.data.properties) {
                  if (elementContent.data.properties.popup) {
                    vectorLayer.popup = elementContent.data.properties.popup;
                  }
                  if (elementContent.data.properties.tooltip) {
                    vectorLayer.tooltip = elementContent.data.properties.tooltip;
                  }
                  if (elementContent.data.properties.label) {
                    vectorLayer.label = elementContent.data.properties.label;
                  }
                  if (elementContent.data.properties.zoom_onclick) {
                    vectorLayer.zoom_onclick = elementContent.data.properties.zoom_onclick;
                  }
                }

                layers.push(vectorLayer);
              }
            }
          } else {
            console.warn('Format type ' + elementContent.format + ' in ol.format not found.');
          }
        }
      }

      layerGroup = new ol.layer.Group({
        layers: layers
      });

      this.arrLayers[itemUid].vectorLayer = layerGroup;
      this.mapController.map.addLayer(layerGroup);
      if (layerGroup.getLayers().getArray()[0] && layerGroup.getLayers().getArray()[0].popup && layerGroup.getLayers().getArray()[0].popup.showPopupOnActive) {
        c4g.maps.popup.$content.html('');
        c4g.maps.popup.$popup.addClass(c4g.maps.constant.css.ACTIVE).addClass(c4g.maps.constant.css.LOADING);
        c4g.maps.popup.spinner.show();
        var popupInfos = layerGroup.getLayers().getArray()[0].popup;
        var layer = layerGroup.getLayers().getArray()[0];
        var coord = features['0'].getGeometry().getCoordinates();
        if (popupInfos.async === false) {
          var objPopup = {};
          objPopup.popup = popupInfos;
          objPopup.feature = features['0'];
          objPopup.layer = layer;
          // Call the popup hook for plugin specific popup content
          if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
            __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
          }
          self.proxy.setPopup(objPopup);
        } else {
          jQuery.ajax({
            dataType: "json",
            url: self.api_infowindow_url + '/' + popupInfos.content,
            done: function done(data) {
              var popupInfo = {
                async: popupInfos.async,
                content: data.content,
                popup: popupInfos.popup,
                routing_link: popupInfos.routing_link
              };

              var objPopup = {};
              objPopup.popup = popupInfo;
              objPopup.feature = features['0'];
              objPopup.layer = layer;

              // Call the popup hook for plugin specific popup content
              if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
              }

              self.proxy.setPopup(objPopup);
            }
          });
        }
      }

      //hooks
      // }
    } // end of "drawLayer()"

  }, {
    key: "drawLayerInitial",
    value: function drawLayerInitial() {
      var layerId, layer;

      for (layerId in this.proxy.activeLayerIds) {
        if (this.proxy.activeLayerIds.hasOwnProperty(layerId)) {
          this.showLayer(layerId);
        }
      }
      for (var l in this.arrLayers) {
        if (this.arrLayers.hasOwnProperty(l)) {
          layer = this.arrLayers[l];
          if (layer.hide === "1") {
            this.hideLayer(layer.id);
          }
        }
      }
    } // end of "drawLayerInitial()"

  }]);

  return C4gLayerController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-layer.js":
/*!******************************************!*\
  !*** ./Resources/public/js/c4g-layer.js ***!
  \******************************************/
/*! exports provided: C4gLayer */
/*! exports used: C4gLayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLayer; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var C4gLayer = function C4gLayer(layerArr) {
  _classCallCheck(this, C4gLayer);

  this.id = layerArr['id'];
  this.pid = layerArr['pid'];
  this.async_content = layerArr['async_content'];
  this.content = layerArr['content'];
  this.cssClass = layerArr['cssClass'];
  this.hide = layerArr['hide'];
  this.hide_child = layerArr['hide_child'];
  this.type = layerArr['type'];
  this.cluster = layerArr['cluster'];
  this.zoom = layerArr['zoom'];
  this.zoom_locations = layerArr['zoom_locations'];
  this.display = layerArr['display'];
  this.hasChilds = layerArr['hasChilds'];
  this.childs = layerArr['childs'];
  this.childsCount = layerArr['childsCount'];
  this.renderSpecial = layerArr['renderSpecial'];
  this.editable = true;
  this.type = layerArr['type'];
  this.locstyle = layerArr['locstyle'];
  this.name = layerArr['name'];
  this.tabId = layerArr['tabId'];
  this.split_geojson = layerArr['split_geojson'];
  this.geojson_attributes = layerArr['geojson_attributes'];
  this.geojson_zoom = layerArr['geojson_zoom'];
  this.layername = layerArr['layername'];
  this.visibleChilds = false;
  this.vectorLayer = null;
  this.hideWhenInTab = layerArr['hide_when_in_tab'];

  if (layerArr.projectId) {
    this.projectId = layerArr.projectId;
  }
  if (layerArr.popup) {
    this.popup = layerArr.popup;
  }
  this.awesomeicon = layerArr['awesomeicon'];
};

/***/ }),

/***/ "./Resources/public/js/c4g-locationstyle-controller.js":
/*!*************************************************************!*\
  !*** ./Resources/public/js/c4g-locationstyle-controller.js ***!
  \*************************************************************/
/*! exports provided: C4gLocationStyleController */
/*! exports used: C4gLocationStyleController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLocationStyleController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_locationstyle__ = __webpack_require__(/*! ./c4g-locationstyle */ "./Resources/public/js/c4g-locationstyle.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var C4gLocationStyleController = function () {
    function C4gLocationStyleController(proxy) {
        _classCallCheck(this, C4gLocationStyleController);

        this.proxy = proxy;
        this.mapController = proxy.options.mapController;
        this.arrLocStyles = {};
    }

    _createClass(C4gLocationStyleController, [{
        key: "loadLocationStyles",
        value: function loadLocationStyles(arrIds, opt_options) {
            var options = void 0,
                complete = {},
                success = {},
                self = this,
                count = 1,
                makeAjax = void 0;

            if (opt_options && (typeof opt_options === "undefined" ? "undefined" : _typeof(opt_options)) === "object") {
                options = opt_options;
            } else {
                options = {};
            }

            // this.proxy.options.mapController.spinner.show();

            makeAjax = function makeAjax(styleIds, index) {
                if (index) {
                    complete[index] = false;
                    success[index] = false;
                }
                // get locationstyles over API
                jQuery.ajax({
                    dataType: self.proxy.options.mapController.data.jsonp ? "jsonp" : "json",
                    url: self.proxy.api_locstyle_url,
                    data: {
                        ids: styleIds
                    }
                }).done(function (data) {
                    var i = void 0,
                        styleData = void 0,
                        successful = true;

                    if (data.length > 0) {
                        for (i = 0; i < data.length; i += 1) {
                            styleData = data[i];
                            self.arrLocStyles[styleData.id] = new __WEBPACK_IMPORTED_MODULE_0__c4g_locationstyle__["a" /* C4gLocationStyle */](styleData, self);
                        }
                    }
                    if (index) {
                        success[index] = true;
                        for (var key in success) {
                            if (success.hasOwnProperty(key)) {
                                if (!success[key]) {
                                    successful = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (options.done && typeof options.done === "function" && (index ? successful : true)) {
                        options.done();
                    }
                }).always(function (jXhr, strStatus) {
                    var completed = true;

                    if (index) {
                        complete[index] = true;
                        for (var key in complete) {
                            if (complete.hasOwnProperty(key)) {
                                if (!complete[key]) {
                                    completed = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (options.always && typeof options.always === "function" && (index ? completed : true)) {
                        options.always();
                    }
                    if (!$(self.proxy.options.mapController.spinner.element).hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
                        self.proxy.options.mapController.spinner.hide();
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    console.warn(errorThrown);
                });
            };

            // split arrIds if it's too long
            if (arrIds.length > 100) {
                var n = 100;
                while (arrIds.length > 0) {
                    makeAjax(arrIds.splice(0, n), count);
                    count++;
                }
            } else {
                makeAjax(arrIds);
            }
            //});
        } // end of "loadLocationStyles()"

    }]);

    return C4gLocationStyleController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-locationstyle.js":
/*!**************************************************!*\
  !*** ./Resources/public/js/c4g-locationstyle.js ***!
  \**************************************************/
/*! exports provided: C4gLocationStyle */
/*! exports used: C4gLocationStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gLocationStyle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var C4gLocationStyle = function () {
    function C4gLocationStyle(locStyleArr, controller) {
        _classCallCheck(this, C4gLocationStyle);

        this.id = locStyleArr['id'];
        this.style = this.getStyleFunction(locStyleArr);
        this.editor = this.getStyleEditorConfig(locStyleArr);
        this.name = locStyleArr['name'];
        this.tooltip = locStyleArr['tooltip'];
        this.label = locStyleArr['label'];
        this.minzoom = locStyleArr['minzoom'];
        this.maxzoom = locStyleArr['maxzoom'];
        this.fnStyleFunction = locStyleArr['style_function_js'];
        this.controller = controller;
        this.locStyleArr = locStyleArr;
    }

    _createClass(C4gLocationStyle, [{
        key: 'getStyleFunction',
        value: function getStyleFunction(styleData) {
            var self, styleFunction, imageStyle, strokeStyle, fillStyle, textStyle, textStyleOutline, backgroundFill, backgroundStroke;

            self = this;

            // general
            strokeStyle = new ol.style.Stroke({
                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.strokecolor, styleData.strokeopacity),
                width: parseInt(styleData.strokewidth.value, 10)
            });
            fillStyle = new ol.style.Fill({
                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.fillcolor, styleData.fillopacity)
            });

            // image
            switch (styleData.styletype) {
                case 'square':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 4,
                        radius: styleData.radius.value || 10,
                        angle: Math.PI / 4
                    });
                    break;
                case 'star':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        radius1: styleData.radius.value || 10,
                        radius2: styleData.radius.value ? Math.floor(styleData.radius.value * 0.5) : 4,
                        points: 5,
                        angle: 0
                    });
                    break;
                case 'x':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 4,
                        radius: styleData.radius.value || 10,
                        radius2: 0,
                        angle: Math.PI / 4
                    });
                    break;
                case 'cross':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 4,
                        radius: styleData.radius.value || 10,
                        radius2: 0,
                        angle: 0
                    });
                    break;
                case 'triangle':
                    imageStyle = new ol.style.RegularShape({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        points: 3,
                        radius: styleData.radius.value || 10,
                        rotation: Math.PI / 4,
                        angle: 0
                    });
                    break;
                case 'ol_icon': // fallthrough
                case 'cust_icon':
                    if (styleData.icon_src) {
                        imageStyle = new ol.style.Icon({
                            opacity: parseFloat(styleData.icon_opacity.value, 10) / 100,
                            src: styleData.icon_src,
                            size: [parseInt(styleData.icon_size[0], 10), parseInt(styleData.icon_size[1], 10)],
                            scale: parseFloat(styleData.icon_scale, 10)
                        });
                    }
                    break;
                case 'cust_icon_svg':
                    if (styleData.svgSrc && styleData.icon_scale && styleData.icon_size) {
                        var canvas = document.createElement('canvas');
                        var ctx = canvas.getContext("2d");
                        var width = styleData.icon_size[0] * styleData.icon_scale;
                        var height = styleData.icon_size[1] * styleData.icon_scale;

                        var strokewidth = 0;
                        if (styleData.strokewidth && styleData.strokewidth.value) {
                            strokewidth = styleData.strokewidth.value;
                        }
                        canvas.width = width + 2 * strokewidth;
                        canvas.height = height + 2 * strokewidth;
                        ctx.clearRect(0, 0, canvas.width, canvas.height);

                        if (styleData.fillcolor) {
                            ctx.fillStyle = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.fillcolor, styleData.fillopacity.value);
                            ctx.fillRect(0, 0, canvas.width, canvas.height);
                        }

                        if (strokewidth && styleData.strokecolor) {
                            ctx.strokeStyle = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.strokecolor, styleData.strokeopacity.value);
                            ctx.lineWidth = styleData.strokewidth.value;
                            ctx.strokeRect(0, 0, canvas.width, canvas.height);
                            ctx.translate(0.5, 0.5);
                        }

                        // if (styleData.icon_opacity.value && (styleData.icon_opacity.value > 0)) {
                        //     ctx.globalAlpha = (styleData.icon_opacity.value / 100);
                        // }

                        var img = new Image();
                        img.src = styleData.svgSrc;
                        img.zIndex = 100; //Test

                        img.onload = function () {
                            ctx.drawImage(img, strokewidth, strokewidth, width, height);
                        };

                        imageStyle = new ol.style.Icon({
                            img: canvas,
                            imgSize: [canvas.width, canvas.height] /*,
                                                                   opacity: (styleData.icon_opacity.value / 100)*/
                        });
                    }

                    break;
                case 'photo':
                    imageStyle = new ol.style.Photo({
                        kind: styleData.photoKind,
                        crop: true,
                        opacity: parseFloat(styleData.icon_opacity.value, 10) / 100,
                        radius: parseFloat(styleData.radius.value, 10),
                        shadow: true,
                        stroke: strokeStyle,
                        src: styleData.icon_src
                    });
                    break;
                case 'point':
                    imageStyle = new ol.style.Circle({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        radius: styleData.radius.value || 7
                    });
                    break;
                default:
                    imageStyle = new ol.style.Circle({
                        fill: fillStyle,
                        stroke: strokeStyle,
                        radius: styleData.radius.value || 7
                    });
            }

            // build function
            styleFunction = function styleFunction(feature, projection, getId) {
                var stylesArray, label, arrowSize, arrowSizeUnit, segmentLength, arrows_minzoom, start_pixel, end_pixel;

                if (getId) {
                    return styleData.id;
                }

                // check if this is a feature.styleFunction
                if (!(feature instanceof ol.Feature)) {
                    projection = feature;
                    feature = this;
                }

                stylesArray = [];

                if (feature && typeof feature.get === 'function' && feature.get('label')) {
                    label = feature.get('label');
                } else if (styleData.label) {
                    label = styleData.label;
                } else {
                    label = false;
                }
                var defaultColor = self.controller.mapController.data.default_label_color;
                // label
                if (label) {
                    if (styleData.label_outl_color && styleData.label_outl_width.value) {
                        textStyleOutline = new ol.style.Stroke({
                            color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.label_outl_color || defaultColor, {
                                unit: '%',
                                value: 100
                            }),
                            width: parseInt(styleData.label_outl_width.value, 10)
                        });
                        if (styleData.label_outl_box === "1") {
                            backgroundFill = new ol.style.Fill({
                                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.label_outl_color || defaultColor, {
                                    unit: '%',
                                    value: 100
                                })
                            });
                        }
                    }
                    if (!styleData.label_offset) {
                        styleData.label_offset = [0, 0, "px"];
                    }
                    if (styleData.label_outl_box === "1") {
                        textStyle = new ol.style.Text({
                            text: label,
                            font: (styleData.font_weight || 'normal') + ' ' + (styleData.font_style || 'normal') + ' ' + (styleData.font_size || '13') + 'px ' + (styleData.font_family || 'sans-serif'),
                            // scale: parseInt(styleData.font_size || 0, 10) || undefined,
                            offsetX: parseInt(styleData.label_offset[0] || 0, 10),
                            offsetY: parseInt(styleData.label_offset[1] || 0, 10),
                            textAlign: styleData.label_align_hor,
                            textBaseline: styleData.label_align_ver,
                            fill: new ol.style.Fill({
                                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.font_color || defaultColor, styleData.font_opacity)
                            }),
                            backgroundFill: backgroundFill,
                            backgroundStroke: textStyleOutline
                        });
                    } else {
                        textStyle = new ol.style.Text({
                            text: label,
                            font: (styleData.font_weight || 'normal') + ' ' + (styleData.font_style || 'normal') + ' ' + (styleData.font_size || '13') + 'px ' + (styleData.font_family || 'sans-serif'),
                            // scale: parseInt(styleData.font_size || 0, 10) || undefined,
                            offsetX: parseInt(styleData.label_offset[0] || 0, 10),
                            offsetY: parseInt(styleData.label_offset[1] || 0, 10),
                            textAlign: styleData.label_align_hor,
                            textBaseline: styleData.label_align_ver,
                            fill: new ol.style.Fill({
                                color: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.font_color || defaultColor, styleData.font_opacity)
                            }),
                            stroke: textStyleOutline
                        });
                    }
                }

                // create style-object
                // we need this check because textStyle is a var accessible from closure and will be set even if no label is set
                if (label) {
                    stylesArray.push(new ol.style.Style({
                        image: imageStyle,
                        text: textStyle,
                        stroke: strokeStyle,
                        fill: fillStyle
                    }));
                } else {
                    stylesArray.push(new ol.style.Style({
                        image: imageStyle,
                        stroke: strokeStyle,
                        fill: fillStyle
                    }));
                }

                // add line-arrows
                if (styleData.line_arrows && feature && typeof feature.getGeometry === 'function' && !(feature.getGeometry() instanceof ol.geom.Point) && typeof feature.getGeometry().forEachSegment === 'function') {
                    arrowSize = styleData.line_arrows_radius ? parseInt(styleData.line_arrows_radius.value, 10) * 2 : 0;
                    arrowSizeUnit = arrowSize + styleData.line_arrows_radius.unit;
                    feature.getGeometry().forEachSegment(function (start, end) {
                        //if minzoom is 0 (unlimited), hide arrows if they are bigger than the segment
                        arrows_minzoom = parseInt(styleData.line_arrows_minzoom, 10);
                        start_pixel = self.controller.mapController.map.getPixelFromCoordinate(start);
                        end_pixel = self.controller.mapController.map.getPixelFromCoordinate(end);
                        // euclid-distance between start and end
                        segmentLength = Math.sqrt(Math.pow(end_pixel[1] - start_pixel[1], 2) + Math.pow(end_pixel[0] - start_pixel[0], 2));

                        if (arrows_minzoom < 0 && arrowSize + parseInt(styleData.strokewidth.value, 10) < segmentLength || arrows_minzoom >= 0 && self.controller.mapController.map.getView().getZoom() >= arrows_minzoom) {
                            // forward arrows
                            stylesArray.push(new ol.style.Style({
                                geometry: new ol.geom.Point(end),
                                text: new ol.style.Text({
                                    text: "ᐳ",
                                    font: arrowSizeUnit + " sans-serif",
                                    offsetX: 0,
                                    offsetY: 1,
                                    fill: fillStyle,
                                    stroke: strokeStyle,
                                    textAlign: 'right',
                                    rotateWithView: true,
                                    rotation: -Math.atan2(end[1] - start[1], end[0] - start[0])
                                })
                            }));
                            // backward arrows (if wanted)
                            if (styleData.line_arrows_back) {
                                stylesArray.push(new ol.style.Style({
                                    geometry: new ol.geom.Point(start),
                                    text: new ol.style.Text({
                                        text: "ᐳ",
                                        font: arrowSizeUnit + " sans-serif",
                                        offsetX: 0,
                                        offsetY: -1,
                                        fill: fillStyle,
                                        stroke: strokeStyle,
                                        textAlign: 'right',
                                        rotateWithView: true,
                                        rotation: -Math.atan2(start[1] - end[1], start[0] - end[0])
                                    })
                                }));
                            }
                        }
                    });
                }

                return stylesArray;
            };

            return styleFunction;
        } // end of "getStyleFunction()"


    }, {
        key: 'getStyleEditorConfig',
        value: function getStyleEditorConfig(styleData) {
            var editorConfig;

            // create editor-config
            editorConfig = {};
            editorConfig.collect = styleData.editor_collect || undefined;
            editorConfig.iconSrc = styleData.editor_icon || undefined;
            editorConfig.vars = styleData.editor_vars || undefined;

            editorConfig.sort = styleData.editor_sort || false;
            if (editorConfig.sort) {
                editorConfig.sort = parseInt(editorConfig.sort, 10) || false;
            }

            return editorConfig;
        } // end of "getStyleEditorConfig()"

    }]);

    return C4gLocationStyle;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-maps-config.js":
/*!************************************************!*\
  !*** ./Resources/public/js/c4g-maps-config.js ***!
  \************************************************/
/*! exports provided: config */
/*! exports used: config */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return config; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.config = this.c4g.maps.config || {};

(function ($, c4g) {
  'use strict';

  /**
   * osmSourceDefinitions
   */

  c4g.maps.config.osm = $.extend(c4g.maps.config.osm, {

    CycleMap: {
      attributions: 'Style by <a target="_blank" href="http://www.opencyclemap.org/">OpenCycleMap</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.opencyclemap.org/cycle/{z}/{x}/{y}.png'
    },

    German: {
      attributions: 'Style by <a target="_blank" href="http://www.openstreetmap.de/germanstyle.html">openstreetmap.de</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png'
    },

    GermanTransport: {
      attributions: 'Style by <a target="_blank" href="http://www.memomaps.de">Memomaps</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 19,
      url: 'https://tile.memomaps.de/tilegen/{z}/{x}/{y}.png'
    },

    LandscapeMap: {
      attributions: 'Style by <a target="_blank" href="http://www.opencyclemap.org/">OpenCycleMap</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.opencyclemap.org/landscape/{z}/{x}/{y}.png'
    },

    Mapnik: {
      attributions: ol.source.OSM.ATTRIBUTION,
      crossOrigin: 'anonymous'
    },

    NONE: '' // last line
  }); // end of "osmSourceDefinitions" ---

  /**
   * stamenSourceDefinitions
   */
  c4g.maps.config.stamen = $.extend(c4g.maps.config.stamen, {

    Toner: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'toner',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    TonerLabels: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'toner-labels',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    TonerLines: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'toner-lines',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    Terrain: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'terrain',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    Watercolor: {
      attributions: ol.source.OSM.ATTRIBUTION,
      layer: 'watercolor',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },

    NONE: ''
  });

  /**
   * mapquestSourceDefinitions
   */
  c4g.maps.config.mapquest = $.extend(c4g.maps.config.mapquest, {

    MapQuestOpen: {
      layer: 'osm'
    },

    MapQuestHyb: {
      layer: 'hyb'
    },

    MapQuestSat: {
      layer: 'sat'
    },

    NONE: ''
  });

  /**
   * mapboxSourceDefinitions
   */
  c4g.maps.config.mapbox = {

    Mapbox: {
      tileSize: [512, 512],
      attributions: '© <a target="_blank" href="https://www.mapbox.com/about/maps/">Mapbox</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    },

    MapboxClassic: {
      attributions: '© <a target="_blank" href="https://www.mapbox.com/about/maps/">Mapbox</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }
  };

  /**
   * klokanSourceDefinitions
   */
  //ToDo not ready
  c4g.maps.config.klokan = {

    OpenMapTiles: {
      format: new ol.format.MVT(),
      tileGrid: ol.tilegrid.createXYZ({ tileSize: 512, maxZoom: 22 }), //ToDo maxZoom from configuration
      tilePixelRatio: 8,
      attributions: '© <a target="_blank" href="https://openmaptiles.org/">OpenMapTiles</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    },

    TileHosting: {
      format: new ol.format.MVT(),
      tileGrid: ol.tilegrid.createXYZ({ tileSize: 512, maxZoom: 22 }), //ToDo maxZoom from configuration
      tilePixelRatio: 8,
      attributions: '© <a target="_blank" href="https://tilehosting.com/">TileHosting</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }
  };

  /**
   * hereSourceDefinitions
   */
  c4g.maps.config.here = {

    HERE: {
      tileSize: [512, 512],
      attributions: 'Map Tiles © <a target="_blank" href="https://developer.here.com">HERE</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }

  };

  /**
   * thunderforestSourceDefinitions
   */
  c4g.maps.config.thunderforest = {

    Thunderforest: {
      tileSize: [512, 512],
      attributions: 'Map Tiles © <a target="_blank" href="https://www.thunderforest.com/">Thunderforest</a>' + ' ' + ol.source.OSM.ATTRIBUTION,
      minZoom: 0,
      maxZoom: 19,
      crossOrigin: 'anonymous'
    }

  };
})(jQuery, this.c4g);

var config = this.c4g.maps.config;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-constant-i18n-de.js":
/*!**********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-constant-i18n-de.js ***!
  \**********************************************************/
/*! exports provided: langConstantsGerman */
/*! exports used: langConstantsGerman */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return langConstantsGerman; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.constant = this.c4g.maps.constant || {};

(function ($, c4g) {
  'use strict';

  /**
   * Language constants (en)
   */

  c4g.maps.constant.i18n = $.extend(c4g.maps.constant.i18n, {

    LANG: 'de',

    NAME: 'Name',
    HIDE: 'Zuklappen',
    CLOSE: 'Schließen',
    POINT: 'POI',
    FREEHAND: 'Freihand',
    LINE: 'Linie',
    POLYGON: 'Fläche',
    CIRCLE: 'Radius',
    PERIMETER: 'Umfang',
    LENGTH: 'Länge',
    SURFACEAREA: 'Flächeninhalt',
    RADIUS: 'Radius',
    REFRESH: 'Aktualisieren',
    COPY_TO_CLIPBOARD: 'In Zwischenablage kopieren',

    CTRL_ZOOM_IN: 'Vergrößern',
    CTRL_ZOOM_OUT: 'Verkleinern',
    CTRL_ZOOM_EXT: 'Maximal verkleinern',
    CTRL_ZOOM_HOME: 'Zur ursprünglichen Position',
    CTRL_ZOOM_POS: 'Zum aktuellen Standort',
    CTRL_ZOOM_SLIDER: 'Zoom Slider',
    CTRL_RESET_ROTATION: 'Rotation (touch, alt+mouse) zurücksetzen',
    CTRL_PORTSIDE: 'Portside ein-/ausblenden',
    CTRL_ROUTER: 'Router ein-/ausblenden',
    CTRL_EDITOR: 'Editor ein-/ausblenden',
    CTRL_MEASURETOOLS: 'Messwerkzeuge ein-/ausblenden',
    CTRL_INFOPAGE: 'Infoseite ein-/ausblenden',
    CTRL_ADDITIONALPANEL: 'Panel ein-/ausblenden',
    CTRL_ACCOUNT: 'Account ein-/ausblenden',
    CTRL_ZOOMLEVEL: 'Zoom',
    CTRL_MOUSECOORDS: 'Lon/Lat',
    CTRL_GEOSEARCH: 'Suche ein-/ausblenden',
    CTRL_START_SEARCH: 'Suche starten',
    CTRL_OVERVIEWMAP: 'Übersichtskarte ein-/ausblenden',
    CTRL_GEOBOOKMARKS: 'Favoriten verwalten',
    CTRL_SIDEBOARD: 'Sideboard ein-/ausblenden',
    CTRL_STARBOARD: 'Starboard ein-/ausblenden',
    CTRL_ATTRIBUTION: 'Attribution anzeigen',
    CTRL_GRID: 'Gitter ein-/ausblenden',
    CTRL_PERMALINK: 'Permalink generieren',
    CTRL_FULLSCREEN: 'Vollbildmodus ein-/ausschalten',
    CTRL_PRINT: 'Karte exportieren',

    EDITOR: 'Editor',
    EDITOR_ENABLE_INSTANT_MEASURE: 'Messen während des Zeichnens',
    EDITOR_ENABLE_FREEHAND_DRAW: 'Freihand zeichnen',
    EDITOR_FEATURE_APPLY: 'Editieren beenden',
    EDITOR_FEATURE_DELETE: 'Element löschen',
    EDITOR_FEATURE_MODIFY: 'Element editieren / verschieben',
    EDITOR_SELECT_INFO: 'Zur Auswahl ein Element auf der Karte anklicken.',
    EDITOR_SELECT_INFO_ADDITIONAL: '[Strg] + [Klick] für Mehrfachauswahl <br>[Shift] halten für Auswahlbox',
    EDITOR_VIEW_TRIGGER_SELECT: 'Auswahl Modus',
    EDITOR_VIEW_TRIGGER_DRAW_POINT: 'Kartenelemente',
    EDITOR_VIEW_TRIGGER_DRAW_FREEHAND: 'Freihandwerkzeuge',
    EDITOR_VIEW_TRIGGER_DRAW_LINESTRING: 'Streckenwerkzeuge',
    EDITOR_VIEW_TRIGGER_DRAW_POLYGON: 'Flächenwerkzeuge',
    EDITOR_VIEW_TRIGGER_DRAW_CIRCLE: 'Kreiswerkzeuge',

    POPUP_ROUTE_FROM: 'Route von hier',
    POPUP_ROUTE_TO: 'Route hierhin',

    STARBOARD: 'Starboard',
    STARBOARD_BASELAYER: 'Basiskarten',
    STARBOARD_LAYER: 'Ebenen',
    STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER: 'Basiskarten',
    STARBOARD_VIEW_TRIGGER_LAYERSWITCHER: 'Kartenelemente',

    SIDEBOARD: 'Sideboard',

    ROUTER_VIEW_ADDRESS_INPUT: 'Route finden',
    ROUTER_FROM_LABEL: 'Start',
    ROUTER_OVER_LABEL: 'Zwischenziel',
    ROUTER_TO_LABEL: 'Ziel',
    ROUTER_CLEAR_TITLE: 'Löschen',
    ROUTER_CLEAR_HTML: '',
    ROUTER_Label_Interim: 'Zwischenziel',

    ROUTER_SWITCH: 'Wechsel von Start und Ziel',
    ROUTER_OVER: 'Zwischenziel hinzufügen',
    ROUTER_PRINT: 'Routenbeschreibung drucken',

    ROUTER_VIEW_LABEL_ROUTE: 'Route:',
    ROUTER_VIEW_LABEL_DISTANCE: 'Entfernung:',
    ROUTER_VIEW_LABEL_TIME: 'Zeit:',
    ROUTER_VIEW_LABEL_PROFILE: 'Profil:',

    ROUTER_VIEW_ALERT_ADDRESS: 'Adresse nicht gefunden.',
    ROUTER_VIEW_ALERT_GOCODING: 'Zugriff auf Geocoder fehlgeschlagen.',

    ROUTER: 'Router',
    ROUTER_N: 'Norden',
    ROUTER_E: 'Ost',
    ROUTER_S: 'Süden',
    ROUTER_W: 'Westen',
    ROUTER_NE: 'Nordost',
    ROUTER_SE: 'Südost',
    ROUTER_SW: 'Südwest',
    ROUTER_NW: 'Nordwest',
    ROUTER_DIRECTION_0: 'Unbekannte Anweisung[ auf <b>%s</b>]',
    ROUTER_DIRECTION_1: 'Geradeaus weiterfahren[ auf <b>%s</b>]',
    ROUTER_DIRECTION_2: 'Leicht rechts abbiegen [auf <b>%s</b>]',
    ROUTER_DIRECTION_3: 'Rechts abbiegen[ auf <b>%s</b>]',
    ROUTER_DIRECTION_4: 'Scharf rechts abbiegen[ auf <b>%s</b>]',
    ROUTER_DIRECTION_5: 'Wenden[ auf <b>%s</b>]',
    ROUTER_DIRECTION_6: 'Scharf links abbiegen[ auf <b>%s</b>]',
    ROUTER_DIRECTION_7: 'Links abbiegen[ auf <b>%s</b>]',
    ROUTER_DIRECTION_8: 'Leicht links abbiegen[ auf <b>%s</b>]',
    ROUTER_DIRECTION_10: 'Fahren Sie Richtung <b>%d</b>[ auf <b>%s</b>]',
    'ROUTER_DIRECTION_11-1': 'In den Kreisverkehr einfahren und bei erster Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-2': 'In den Kreisverkehr einfahren und bei zweiter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-3': 'In den Kreisverkehr einfahren und bei dritter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-4': 'In den Kreisverkehr einfahren und bei vierter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-5': 'In den Kreisverkehr einfahren und bei fünfter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-6': 'In den Kreisverkehr einfahren und bei sechster Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-7': 'In den Kreisverkehr einfahren und bei siebter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-8': 'In den Kreisverkehr einfahren und bei achter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-9': 'In den Kreisverkehr einfahren und bei neunter Möglichkeit[ in Richtung <b>%s</b>] verlassen',
    'ROUTER_DIRECTION_11-x': 'In den Kreisverkehr einfahren und bei einer der vielen Möglichkeiten[ in Richtung <b>%s</b>] verlassen',
    ROUTER_DIRECTION_15: 'Sie haben Ihr Ziel erreicht',

    'ROUTER_5.X_TYPE_0': ' %m fahren[ auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_1': ' %m dem Straßenverlauf folgen[ als <b>%s</b>]',
    'ROUTER_5.X_TYPE_2': ' Fahren Sie[ auf <b>%s</b>] los',
    'ROUTER_5.X_TYPE_3': ' Das Ziel befindet sich <b>%m</b>',
    'ROUTER_5.X_TYPE_4': ' Weiterfahren[ auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_5': ' %m [auf <b>%s</b> ]auffahren',
    'ROUTER_5.X_TYPE_6': ' %m [auf <b>%s</b> ]abfahren',
    'ROUTER_5.X_TYPE_7': ' Den Fahrstreifen %m benutzen [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_8': ' %m abbiegen [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_9': ' Den Fahrstreifen %m benutzen [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_10': ' %m fahren um auf der Straße zu bleiben',
    'ROUTER_5.X_TYPE_11': ' Im Kreisverkehr die <b>%z.</b> Ausfahrt nehmen [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_12': ' Im Kreisverkehr die <b>%z.</b> Ausfahrt nehmen [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_13': ' %m fahren [auf <b>%s</b>]',
    'ROUTER_5.X_TYPE_14': ' abbiegen[ auf <b>%s</b>]',

    'ROUTER_5.X_MOD_0': 'Uturn',
    'ROUTER_5.X_MOD_1': 'Scharf rechts',
    'ROUTER_5.X_MOD_2': 'Rechts',
    'ROUTER_5.X_MOD_3': 'Leicht rechts',
    'ROUTER_5.X_MOD_4': 'Geradeaus',
    'ROUTER_5.X_MOD_5': 'Leicht links',
    'ROUTER_5.X_MOD_6': 'Links',
    'ROUTER_5.X_MOD_7': 'Scharf links',
    'ROUTER_5.X_MOD_8': 'in der Nähe',

    ROUTER_FROM: 'Start',
    ROUTER_TO: 'Ziel',
    ROUTER_FIND_ROUTE: 'Route finden',
    ROUTER_LOC_ROUTE_TO: 'Route hierhin',
    ROUTER_ROUTEDESC: 'Routenbeschreibung',
    ROUTER_ROUTENAME: 'Route',
    ROUTER_DISTANCE: 'Distanz',
    ROUTER_TIME: 'Zeit',
    ROUTER_REV_GEOCODING: 'Ermittle Adresse...',
    ROUTER_ERROR_REV_GEOCODING: 'Fehler beim Ermitteln der Adresse',
    ROUTER_SEARCHING: 'Suche Adresse...',
    ROUTER_ERROR_SEARCHING: 'Fehler beim Suchen der Adresse',
    ROUTER_CALC_ROUTE: 'Berechne Route...',
    ROUTER_ERROR_CALC_ROUTE: 'Fehler beim Berechnen der Route',

    MEASURETOOLS: 'Messwerkzeuge',
    MEASURETOOLS_INFO: 'Wählen Sie weiter unten einen Messtyp aus und starten Sie die Messung durch das Klicken auf der Karte.',
    MEASURETOOLS_INFO_ADDITIONAL: '(Einzelne Messungen können mit einem Doppelklick beendet werden.)',
    MEASURETOOLS_VIEW_TRIGGER_SELECT: 'Auswahl Modus',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_LINESTRING: 'Strecken messen',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_POLYGON: 'Flächen messen',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_CIRCLE: 'Radius messen',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_FREEHAND: 'Freihand messen',

    GEOBOOKMARKS_PLACEHOLDER: 'Neue Bezeichnung',

    INFOPAGE: 'Informationen',
    ADDITIONALPANEL: 'Panel',
    ADDITIONALPANEL_VIEW_TRIGGER: 'Panel anzeigen',
    ACCOUNT: 'Account',
    ACCOUNT_VIEW_TRIGGER: 'Account anzeigen',

    SEARCH_NOT_FOUND: 'Die Lokation konnte nicht gefunden werden. Bitte versuchen Sie eine andere Eingabe.',

    NONE: '' // last line
  }); // end of "language constants" ---
})(jQuery, this.c4g);

var langConstantsGerman = this.c4g.maps.constant.i18n;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-constant-i18n-en.js":
/*!**********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-constant-i18n-en.js ***!
  \**********************************************************/
/*! exports provided: langConstantsEnglish */
/*! exports used: langConstantsEnglish */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return langConstantsEnglish; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.constant = this.c4g.maps.constant || {};

(function ($, c4g) {
  'use strict';

  /**
   * Language constants (en)
   */

  c4g.maps.constant.i18n = $.extend(c4g.maps.constant.i18n, {

    LANG: 'en',

    NAME: 'Name',
    HIDE: 'Hide',
    CLOSE: 'Close',
    POINT: 'POI',
    FREEHAND: 'freehand',
    LINE: 'Line',
    POLYGON: 'Area',
    CIRCLE: 'Radius',
    PERIMETER: 'Perimeter',
    LENGTH: 'Length',
    SURFACEAREA: 'Surface area',
    RADIUS: 'Radius',
    REFRESH: 'Refresh',
    COPY_TO_CLIPBOARD: 'Copy to clipboard',

    CTRL_ZOOM_IN: 'Zoom in',
    CTRL_ZOOM_OUT: 'Zoom out',
    CTRL_ZOOM_EXT: 'Fit to extent',
    CTRL_ZOOM_HOME: 'jump to initial position',
    CTRL_ZOOM_POS: 'jump to browser/device position',
    CTRL_ZOOM_SLIDER: 'Zoom slider',
    CTRL_RESET_ROTATION: 'Reset rotation (touch, alt+mouse)',
    CTRL_PORTSIDE: 'Toggle portside',
    CTRL_ROUTER: 'Toggle router',
    CTRL_EDITOR: 'Toggle editor',
    CTRL_MEASURETOOLS: 'Toggle measuretools',
    CTRL_INFOPAGE: 'Toggle infopage',
    CTRL_ADDITIONALPANEL: 'Toggle panel',
    CTRL_ACCOUNT: 'Toggle account',
    CTRL_ZOOMLEVEL: 'Zoom',
    CTRL_MOUSECOORDS: 'Lon/Lat',
    CTRL_GEOSEARCH: 'Toggle geosearch',
    CTRL_START_SEARCH: 'start search',
    CTRL_OVERVIEWMAP: 'Toggle overviewmap',
    CTRL_GEOBOOKMARKS: 'Manage favorites',
    CTRL_SIDEBOARD: 'Toggle sideboard',
    CTRL_STARBOARD: 'Toggle starboard',
    CTRL_ATTRIBUTION: 'Show attribution',
    CTRL_GRID: 'Toggle grid',
    CTRL_PERMALINK: 'Generate Permalink',
    CTRL_FULLSCREEN: 'Toggle fullscreen-mode',
    CTRL_PRINT: 'Export map',

    EDITOR: 'Editor',
    EDITOR_ENABLE_INSTANT_MEASURE: 'Measure while drawing',
    EDITOR_ENABLE_FREEHAND_DRAW: 'Freehand draw',
    EDITOR_FEATURE_APPLY: 'End modification',
    EDITOR_FEATURE_DELETE: 'Delete feature',
    EDITOR_FEATURE_MODIFY: 'Modify feature',
    EDITOR_SELECT_INFO: 'Click an element on the map to select it.',
    EDITOR_SELECT_INFO_ADDITIONAL: '[ctrl] + [click] for multiselect <br>[shift] for boxselect',
    EDITOR_VIEW_TRIGGER_SELECT: 'Select-mode',
    EDITOR_VIEW_TRIGGER_DRAW_POINT: 'Add POIs',
    EDITOR_VIEW_TRIGGER_DRAW_FREEHAND: 'Draw freehand',
    EDITOR_VIEW_TRIGGER_DRAW_LINESTRING: 'Add tracks',
    EDITOR_VIEW_TRIGGER_DRAW_POLYGON: 'Add areas',
    EDITOR_VIEW_TRIGGER_DRAW_CIRCLE: 'Add circles',

    POPUP_ROUTE_FROM: 'Route from here',
    POPUP_ROUTE_TO: 'Route to here',

    STARBOARD: 'Starboard',
    STARBOARD_BASELAYER: 'Baselayer',
    STARBOARD_LAYER: 'Layer',
    STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER: 'Baselayerswitcher',
    STARBOARD_VIEW_TRIGGER_LAYERSWITCHER: 'Layerswitcher',

    ROUTER_VIEW_ADDRESS_INPUT: 'Find route',
    ROUTER_FROM_LABEL: 'Start',
    ROUTER_TO_LABEL: 'End',
    ROUTER_CLEAR_TITLE: 'Delete',
    ROUTER_CLEAR_HTML: '',
    ROUTER_Label_Interim: 'Interim Goals',

    ROUTER_SWITCH: 'Switch between Start and End',
    ROUTER_OVER: 'Add interim goal',
    ROUTER_PRINT: 'Print route description',

    ROUTER_VIEW_LABEL_ROUTE: 'Route:',
    ROUTER_VIEW_LABEL_DISTANCE: 'Distance:',
    ROUTER_VIEW_LABEL_TIME: 'Time:',
    ROUTER_VIEW_LABEL_PROFILE: 'Profile',

    ROUTER_VIEW_ALERT_ADDRESS: 'Address not found.',
    ROUTER_VIEW_ALERT_GOCODING: 'No access to geocoding.',

    ROUTER: 'Router',
    ROUTER_N: 'Head north',
    ROUTER_E: 'Head east',
    ROUTER_S: 'Head south',
    ROUTER_W: 'Head west',
    ROUTER_NE: 'Head northeast',
    ROUTER_SE: 'Head southeast',
    ROUTER_SW: 'Head southwest',
    ROUTER_NW: 'Head northwest',
    ROUTER_DIRECTION_0: 'unknown direction[ onto <b>%s</b>]',
    ROUTER_DIRECTION_1: 'straight ahead[ onto <b>%s</b>]',
    ROUTER_DIRECTION_2: 'slight right[ onto <b>%s</b>]',
    ROUTER_DIRECTION_3: 'right[ onto <b>%s</b>]',
    ROUTER_DIRECTION_4: 'sharp right[ onto <b>%s</b>]',
    ROUTER_DIRECTION_5: 'turn[ onto <b>%s</b>]',
    ROUTER_DIRECTION_6: 'sharp turn left[ onto <b>%s</b>]',
    ROUTER_DIRECTION_7: 'turn left[ onto <b>%s</b>]',
    ROUTER_DIRECTION_8: 'light turn left[ onto <b>%s</b>]',
    ROUTER_DIRECTION_10: 'drive in direction of <b>%d</b>[ onto <b>%s</b>]',
    'ROUTER_DIRECTION_11-1': 'Take the first exit in the roundabout[ onto <b>%s</b>]',
    'ROUTER_DIRECTION_11-2': 'Take the 2nd exit in the roundabout[ onto <b>%s</b>]',
    'ROUTER_DIRECTION_11-3': 'Take the 3rd exit in the roundabout[ onto <b>%s</b>]',
    'ROUTER_DIRECTION_11-4': 'Take the 4th exit in the roundabout[ onto <b>%s</b>]',
    'ROUTER_DIRECTION_11-5': 'Take the 5th exit in the roundabout[ onto <b>%s</b>]',
    'ROUTER_DIRECTION_11-6': 'Take the 6th exit in the roundabout[ onto <b>%s</b>]',
    'ROUTER_DIRECTION_11-7': 'Take the 7th exit in the roundabout[ onto <b>%s</b>]',
    'ROUTER_DIRECTION_11-8': 'Take the 8th exit in the roundabout[ onto <b>%s</b>]',
    'ROUTER_DIRECTION_11-9': 'Take the 9th exit in the roundabout[ onto <b>%s</b>]',
    'ROUTER_DIRECTION_11-x': 'Take one of the exits in the roundabout[ onto <b>%s</b>]',
    ROUTER_DIRECTION_15: 'Destination reached',

    'ROUTER_5.X_TYPE_0': ' Turn %m on[ <b>%s</b>]',
    'ROUTER_5.X_TYPE_1': ' Follow the course of the road %m[ as <b>%s</b>]',
    'ROUTER_5.X_TYPE_2': ' Depart[ on <b>%s</b>]',
    'ROUTER_5.X_TYPE_3': ' Arrive <b>%m</b>',
    'ROUTER_5.X_TYPE_4': ' Continue driving[ on <b>%s</b>]',
    'ROUTER_5.X_TYPE_5': ' Take the ramp %m[ on <b>%s</b>]',
    'ROUTER_5.X_TYPE_6': ' Take the ramp %m[ to exit on<b>%s</b>]',
    'ROUTER_5.X_TYPE_7': ' Take the %m site of the fork to[ <b>%s</b>]',
    'ROUTER_5.X_TYPE_8': ' Turn %m[ on <b>%s</b>]',
    'ROUTER_5.X_TYPE_9': ' Take the lane %m[ on <b>%s</b>]',
    'ROUTER_5.X_TYPE_10': ' Turn %m to stay on the road',
    'ROUTER_5.X_TYPE_11': ' Leave the roundabout on the %z. exit[ to <b>%s</b>]',
    'ROUTER_5.X_TYPE_12': ' Leave the roundabout on the %z. exit[ to <b>%s</b>]',
    'ROUTER_5.X_TYPE_13': ' Turn %m[ on <b>%s</b>]',
    'ROUTER_5.X_TYPE_14': ' Follow the road %m',

    'ROUTER_5.X_MOD_0': 'Uturn',
    'ROUTER_5.X_MOD_1': 'sharp right',
    'ROUTER_5.X_MOD_2': 'right',
    'ROUTER_5.X_MOD_3': 'slight right',
    'ROUTER_5.X_MOD_4': 'straight',
    'ROUTER_5.X_MOD_5': 'slight left',
    'ROUTER_5.X_MOD_6': 'left',
    'ROUTER_5.X_MOD_7': 'sharp left',
    'ROUTER_5.X_MOD_8': 'somehow',

    ROUTER_FROM: 'Start',
    ROUTER_TO: 'End',
    ROUTER_FIND_ROUTE: 'Find route',
    ROUTER_LOC_ROUTE_TO: 'Route to here',
    ROUTER_ROUTEDESC: 'Description',
    ROUTER_ROUTENAME: 'Route',
    ROUTER_DISTANCE: 'Distance',
    ROUTER_TIME: 'Time',
    ROUTER_REV_GEOCODING: 'Identified address...',
    ROUTER_ERROR_REV_GEOCODING: 'Fault! Can not identifiy address',
    ROUTER_SEARCHING: 'Search address...',
    ROUTER_ERROR_SEARCHING: 'Fault! Can not find address',
    ROUTER_CALC_ROUTE: 'Calc route...',
    ROUTER_ERROR_CALC_ROUTE: 'Fault! Can not calc address',

    MEASURETOOLS: 'Measuretools',
    MEASURETOOLS_INFO: 'Select a measuretype below and start measuring by clicking on the map.',
    MEASURETOOLS_INFO_ADDITIONAL: '(To stop a measurement, double-click on the map.)',
    MEASURETOOLS_VIEW_TRIGGER_SELECT: 'Select-mode',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_LINESTRING: 'Measure tracks',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_POLYGON: 'Measure areas',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_CIRCLE: 'Measure radius',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_FREEHAND: 'Measure freehand',

    GEOBOOKMARKS_PLACEHOLDER: 'Enter new caption',

    INFOPAGE: 'Infopage',
    INFOPAGE_VIEW_TRIGGER: 'Show informations',

    ADDITIONALPANEL: 'Panel',
    ADDITIONALPANEL_VIEW_TRIGGER: 'Show panel',

    ACCOUNT: 'Account',
    ACCOUNT_VIEW_TRIGGER: 'Show account',

    SEARCH_NOT_FOUND: 'Location not found. Sorry... :(',

    NONE: '' // last line
  }); // end of "language constants" ---
})(jQuery, this.c4g);

var langConstantsEnglish = this.c4g.maps.constant.i18n;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-constant.js":
/*!**************************************************!*\
  !*** ./Resources/public/js/c4g-maps-constant.js ***!
  \**************************************************/
/*! exports provided: cssConstants */
/*! exports used: cssConstants */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cssConstants; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.constant = this.c4g.maps.constant || {};

(function ($, c4g) {
  'use strict';

  /**
   * CSS constants
   */

  c4g.maps.constant.css = $.extend(c4g.maps.constant.css, {

    OPEN: 'c4g-open',
    CLOSE: 'c4g-close',
    CLOSEABLE: 'c4g-closeable',
    ENABLED: 'c4g-enabled',
    DISABLED: 'c4g-disabled',
    HIDE: 'c4g-hide',
    ICON: 'c4g-icon',
    CONTROL: 'c4g-control',
    COPY: 'c4g-copy',
    REFRESH: 'c4g-refresh',
    ACTIVE: 'c4g-active',
    INACTIVE: 'c4g-inactive',
    LOADING: 'c4g-loading',
    ANIMATION_SPIN: 'c4g-animation-spin',
    LARGE: 'c4g-large',
    SMALL: 'c4g-small',
    HORIZONTAL: 'c4g-horizontal',
    VERTICAL: 'c4g-vertical',

    ATTRIBUTION_LOGO: 'c4g-attribution-logo',
    CONTROL_CONTAINER_TL: 'c4g-control-container-top-left',
    CONTROL_CONTAINER_TR: 'c4g-control-container-top-right',
    CONTROL_CONTAINER_BL: 'c4g-control-container-bottom-left',
    CONTROL_CONTAINER_BL_SUB: 'c4g-control-container-bottom-left-sub',
    CONTROL_CONTAINER_BR: 'c4g-control-container-bottom-right',
    EDITOR_DRAW_CONTENT_POINT: 'c4g-draw-content-point',
    EDITOR_DRAW_CONTENT_FREEHAND: 'c4g-draw-content-freehand',
    EDITOR_DRAW_CONTENT_LINESTRING: 'c4g-draw-content-line',
    EDITOR_DRAW_CONTENT_POLYGON: 'c4g-draw-content-polygon',
    EDITOR_DRAW_CONTENT_CIRCLE: 'c4g-draw-content-circle',
    EDITOR_DRAW_CONTENT_PROJECT: 'c4g-draw-content-project',
    EDITOR_DRAW_TRIGGER: 'c4g-draw-trigger',
    EDITOR_CONTENT_SELECT: 'c4g-content-select',
    EDITOR_DRAW_OPTIONS: 'c4g-editor-draw-options',
    EDITOR_FEATURE_APPLY: 'c4g-editor-feature-apply',
    EDITOR_FEATURE_DELETE: 'c4g-editor-feature-delete',
    EDITOR_FEATURE_MODIFY: 'c4g-editor-feature-modify',
    EDITOR_VIEW_TRIGGER_SELECT: 'c4g-editor-view-trigger-select',
    EDITOR_VIEW_TRIGGER_DRAW_POINT: 'c4g-editor-view-trigger-draw-point',
    EDITOR_VIEW_TRIGGER_DRAW_FREEHAND: 'c4g-editor-view-trigger-draw-freehand',
    EDITOR_VIEW_TRIGGER_DRAW_LINESTRING: 'c4g-editor-view-trigger-draw-line',
    EDITOR_VIEW_TRIGGER_DRAW_POLYGON: 'c4g-editor-view-trigger-draw-polygon',
    EDITOR_VIEW_TRIGGER_DRAW_CIRCLE: 'c4g-editor-view-trigger-draw-circle',
    GEOSEARCH: 'c4g-geosearch',
    GEOSEARCH_WRAPPER: 'c4g-geosearch-wrapper',
    GEOSEARCH_TRIGGER: 'c4g-geosearch-trigger',
    GEOSEARCH_START: 'c4g-geosearch-start',
    GRATICULE: 'c4g-graticule',
    MEASURETOOLS_VIEW_TRIGGER_SELECT: 'c4g-measuretools-view-trigger-select',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_LINESTRING: 'c4g-measuretools-view-trigger-draw-line',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_POLYGON: 'c4g-measuretools-view-trigger-draw-polygon',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_CIRCLE: 'c4g-measuretools-view-trigger-draw-circle',
    MEASURETOOLS_VIEW_TRIGGER_DRAW_FREEHAND: 'c4g-measuretools-view-trigger-draw-freehand',
    PRINT: 'c4g-print',
    INFOPAGE_VIEW_TRIGGER: 'c4g-infopage-view-trigger',
    INFOPAGE: 'c4g-infopage',
    ADDITIONALPANEL_VIEW_TRIGGER: 'c4g-additionalpanel-view-trigger',
    ADDITIONALPANEL: 'c4g-additionalpanel',
    ACCOUNT_VIEW_TRIGGER: 'c4g-account-view-trigger',
    ACCOUNT: 'c4g-account',
    OVERVIEWMAP: 'c4g-overviewmap',
    OVERVIEWMAP_WRAPPER: 'c4g-overviewmap-wrapper',
    GEOBOOKMARKS: 'c4g-geobookmarks',
    PERMALINK: 'c4g-permalink',
    PERMALINK_POPUP: 'c4g-permalink-popup',
    POPUP_CLOSE: 'c4g-popup-close',
    POPUP_ROUTE_WRAPPER: 'c4g-popup-route-wrapper',
    POPUP_ROUTE_FROM: 'c4g-popup-route-from',
    POPUP_ROUTE_TO: 'c4g-popup-route-to',
    PORTSIDE: 'c4g-portside',
    PORTSIDE_CONTAINER: 'c4g-portside-container',
    PORTSIDE_CONTROL: 'c4g-portside-control',
    PORTSIDE_WRAPPER: 'c4g-portside-wrapper',
    PORTSIDE_TITLEBAR: 'c4g-portside-titlebar',
    PORTSIDE_TOP_TOOLBAR: 'c4g-portside-top-toolbar',
    PORTSIDE_CONTENT_CONTAINER: 'c4g-portside-content-container',
    PORTSIDE_BOTTOM_TOOLBAR: 'c4g-portside-bottom-toolbar',
    PORTSIDE_STATUSBAR: 'c4g-portside-statusbar',
    PORTSIDE_VIEWTRIGGERBAR: 'c4g-portside-viewtriggerbar',
    PORTSIDE_HEADLINE: 'c4g-portside-headline',
    PORTSIDE_BUTTONBAR: 'c4g-portside-buttonbar',
    PORTSIDE_BUTTON: 'c4g-portside-button',
    PORTSIDE_HIDE: 'c4g-portside-hide',
    PORTSIDE_CLOSE: 'c4g-portside-close',
    SPINNER: 'c4g-spinner',
    STARBOARD: 'c4g-starboard',
    STARBOARD_CONTAINER: 'c4g-starboard-container',
    STARBOARD_CONTROL: 'c4g-starboard-control',
    STARBOARD_WRAPPER: 'c4g-starboard-wrapper',
    STARBOARD_TITLEBAR: 'c4g-starboard-titlebar',
    STARBOARD_CONTENT_CONTAINER: 'c4g-starboard-content-container',
    STARBOARD_BOTTOM_TOOLBAR: 'c4g-starboard-bottom-toolbar',
    STARBOARD_STATUSBAR: 'c4g-starboard-statusbar',
    STARBOARD_VIEWTRIGGERBAR: 'c4g-starboard-viewtriggerbar',
    STARBOARD_HEADLINE: 'c4g-starboard-headline',
    STARBOARD_BUTTONBAR: 'c4g-starboard-buttonbar',
    STARBOARD_BUTTON: 'c4g-starboard-button',
    STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER: 'c4g-starboard-view-trigger-baselayerswitcher',
    STARBOARD_VIEW_TRIGGER_LAYERSWITCHER: 'c4g-starboard-view-trigger-layerswitcher',
    STARBOARD_CLOSE: 'c4g-starboard-close',
    STARBOARD_CONTENT_BASELAYERSWITCHER: 'c4g-content-baselayerswitcher',
    STARBOARD_BASELAYERTREE: 'c4g-baselayertree',
    STARBOARD_LAYERTREE: 'c4g-layertree',
    STARBOARD_CONTENT_LAYERSWITCHER: 'c4g-content-layerswitcher',
    TOOLTIP_POPUP: 'c4g-tooltip-popup',
    ZOOM_LEVEL: 'c4g-zoom-level',

    ROUTER_INPUT_WRAPPER: 'c4g-router-input-wrapper',
    ROUTER_PROFILE_WRAPPER: 'c4g-router-profile-wrapper',
    ROUTER_INPUT_FROM: 'c4g-router-input-from',
    ROUTER_INPUT_TO: 'c4g-router-input-to',
    ROUTER_INPUT_CLEAR: 'c4g-router-input-clear',
    ROUTER_BUTTONBAR: 'c4g-router-buttonbar',
    ROUTER_ATTRIBUTION_WRAPPER: 'c4g-router-attribution-wrapper',
    ROUTER_INSTRUCTIONS_WRAPPER: 'c4g-router-instructions-wrapper',
    ROUTER_INSTRUCTIONS_HEADER: 'c4g-router-instructions-header',

    ROUTER_SWITCH: 'c4g-router-switch',
    ROUTER_OVER: 'c4g-router-over',
    ROUTER_PRINT: 'c4g-router-print',

    ROUTER_PROFILE_CAR: 'c4g-router-profile-car',
    ROUTER_PROFILE_HGV: 'c4g-router-profile-hgv',
    ROUTER_PROFILE_BIKE: 'c4g-router-profile-bike',
    ROUTER_PROFILE_FOOT: 'c4g-router-profile-foot',
    ROUTER_PROFILE_WHEELCHAIR: 'c4g-router-profile-wheelchair',

    ROUTER_INSTRUCTIONS_TABLE: 'c4g-router-instruction-table',
    ROUTER_INSTRUCTIONS_ITEM: 'c4g-router-instruction-item',
    ROUTER_INSTRUCTIONS_ITEM_ODD: 'c4g-router-instruction-item--odd',
    ROUTER_INSTRUCTIONS_ITEM_EVEN: 'c4g-router-instruction-item--even',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION: 'c4g-router-instruction-item_direction',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION_ICON: 'c4g-router-instruction-item_direction-icon',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT: 'c4g-router-instruction-item_text',
    ROUTER_INSTRUCTIONS_ITEM_DIRECTION_DISTANCE: 'c4g-router-instruction-item_distance',

    OL_CONTROL: 'ol-control',
    OL_UNSELECTABLE: 'ol-unselectable',

    OL_OVERLAYCONTAINER: 'ol-overlaycontainer',
    OL_OVERLAYCONTAINER_SE: 'ol-overlaycontainer-stopevent',
    OL_VIEWPORT: 'ol-viewport',
    OL_ZOOM: 'ol-zoom',
    OL_ZOOM_IN: 'ol-zoom-in',
    OL_ZOOM_EXT: 'ol-zoom-extent',
    OL_ZOOM_HOME: 'ol-zoom-home',
    OL_ZOOM_POS: 'ol-zoom-position',
    OL_ZOOM_WITH_EXT: 'ol-zoom-with-extent',
    OL_ZOOM_WITH_HOME: 'ol-zoom-with-home',
    OL_ZOOM_WITH_POS: 'ol-zoom-with-position',
    OL_ZOOM_SLIDER: 'ol-zoom-slider',
    OL_ZOOM_WITH_SLIDER: 'ol-zoom-with-slider',

    NONE: '' // last line
  }); // end of "css constants" ---
})(jQuery, this.c4g);

var cssConstants = this.c4g.maps.constant.css;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-grid.js":
/*!******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-grid.js ***!
  \******************************************************/
/*! exports provided: Grid */
/*! exports used: Grid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Grid; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
// "namespace"

this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}
(function ($, c4g) {
  'use strict';

  /**
   * Control to toggle a grid on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Grid = function (opt_options) {

    var self = this;
    var options = opt_options || {};

    var element, button;

    var objGrid = new ol.Graticule({
      /*
      strokeStyle: new ol.style.Stroke({
          width: 2,
          lineDash: [0.5, 4]
      }),*/
      showLabels: true
    });

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].GRATICULE,
      switchable: true,
      tipLabel: langConstants.CTRL_GRID,
      label: '#',
      disableLabel: '[]'
    }, options);

    // @TODO move functions to prototype?
    //
    // function to enable the grid
    var enable = function enable() {
      objGrid.setMap(self.getMap());
      $(element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ENABLED);
      // if (options.caching) {
      //     c4g.maps.utils.storeValue('grid', '1');
      // }
    };

    // function to disable the grid
    var disable = function disable() {
      objGrid.setMap(null);
      $(element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ENABLED);
      // if (options.caching) {
      //     c4g.maps.utils.storeValue('grid', '0');
      // }
    };

    // function to toggle the grid
    var toggle = function toggle(event) {
      event.stopPropagation();
      // loose focus, otherwise it looks messy
      this.blur();
      if (objGrid.getMap()) {
        disable();
      } else {
        enable();
      }
    };

    // wrapper div
    element = document.createElement('div');
    element.className = options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL;

    if (options.switchable) {
      // button
      button = document.createElement('button');
      button.title = options.tipLabel;
      element.appendChild(button);

      // set onClick to the toggle-function
      button.addEventListener('click', toggle, false);
      button.addEventListener('touchstart', toggle, false);
    }

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });

    // if (options.caching && (c4g.maps.utils.getValue('grid') == '1')) {
    //     objGrid.setMap(self.getMap());
    //     $(element).addClass(cssConstants.ENABLED);
    // }
  };
  ol.inherits(c4g.maps.control.Grid, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Grid.prototype = $.extend(c4g.maps.control.Grid.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Grid = this.c4g.maps.control.Grid;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-home.js":
/*!******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-home.js ***!
  \******************************************************/
/*! exports provided: Home */
/*! exports used: Home */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Home; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Control to toggle the intial map position on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Home = function (opt_options) {

    var self = this;
    var options = opt_options || {};

    var element, button;

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_HOME,
      switchable: true,
      enabled: true,
      mapController: undefined
    }, options);

    if (!options.mapController) {
      return false;
    }

    var view = options.mapController.map.getView();
    var mapData = options.mapController.data;

    var toggle = function toggle(event) {
      event.stopPropagation();
      // loose focus, otherwise it looks messy
      this.blur();

      view.setCenter(ol.proj.transform([parseFloat(mapData.center.lon), parseFloat(mapData.center.lat)], 'EPSG:4326', 'EPSG:3857'));
      view.setZoom(parseInt(mapData.center.zoom, 10));
      view.setRotation(parseFloat(mapData.center.rotation));

      // check userposition
      var geoLocation;
      if (mapData.geolocation) {
        geoLocation = new ol.Geolocation({
          tracking: true,
          projection: view.getProjection()
        });

        geoLocation.on('change', function (evt) {
          view.setCenter(geoLocation.getPosition());
          if (mapData.geolocation_zoom) {
            view.setZoom(parseInt(mapData.geolocation_zoom, 10));
          }
          geoLocation.setTracking(false);
        });
      }

      options.mapController.map.setView(view);
      __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].redrawMapView(options.mapController);
    };

    // wrapper div
    element = document.createElement('div');
    element.className = options.className + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' button';

    if (options.switchable) {
      // button
      button = document.createElement('button');
      button.title = options.tipLabel;
      element.appendChild(button);

      // set onClick to the toggle-function
      button.addEventListener('click', toggle, false);
      button.addEventListener('touchstart', toggle, false);
    }

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });
  };
  ol.inherits(c4g.maps.control.Home, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Home.prototype = $.extend(c4g.maps.control.Home.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Home = this.c4g.maps.control.Home;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-overviewmap.js":
/*!*************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-overviewmap.js ***!
  \*************************************************************/
/*! exports provided: OverviewMap */
/*! exports used: OverviewMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OverviewMap; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};




var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Displays a overviewmap on the map.
   *   This class wraps the ovm a bit differently than
   *   the standard ol-overviemap, to allow proper css-transitions.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.OverviewMap = function (options) {

    var element, trigger, triggerIcon, ovm;

    // default options
    options = $.extend({
      collapsed: true,
      tipLabel: langConstants.CTRL_OVERVIEWMAP,
      layers: [new ol.layer.Tile({ source: new ol.source.OSM() })]
    }, options);

    element = document.createElement('div');
    element.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OVERVIEWMAP + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
    if (options.collapsed) {
      element.className += ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE;
    } else {
      element.className += ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN;
    }
    options.target.appendChild(element);

    trigger = document.createElement('button');
    trigger.title = options.tipLabel;
    element.appendChild(trigger);

    triggerIcon = document.createElement('span');
    triggerIcon.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ICON;
    trigger.appendChild(triggerIcon);

    $(trigger).click(function () {
      if ($(element).hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
        $(element).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      } else {
        $(element).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      }
      try {
        this.blur();
      } catch (ignore) {}
    });

    ovm = new ol.control.OverviewMap({
      collapsible: false,
      collapsed: false,
      target: element,
      layers: options.layers
    });

    return ovm;
  };

  /*
   * Add methods
   */
  c4g.maps.control.OverviewMap.prototype = $.extend(c4g.maps.control.OverviewMap.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var OverviewMap = this.c4g.maps.control.OverviewMap;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-permalink.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-permalink.js ***!
  \***********************************************************/
/*! exports provided: Permalink */
/*! exports used: Permalink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Permalink; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
// "namespace"

this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};






var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Control to generate a permalink to the current Map state.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              options  control options.
   */

  c4g.maps.control.Permalink = function (options) {

    var self, button, copyButton, refreshButton;

    this.config = options || {};
    self = this;

    // default options
    this.config = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PERMALINK,
      // mapController: undefined,
      tipLabel: langConstants.CTRL_PERMALINK,
      getParameter: false,
      label: 'P',
      target: undefined
    }, this.config);

    if (!this.config.mapController) {
      return false;
    }

    // wrapper div
    this.element = document.createElement('div');
    this.element.className = this.config.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL;

    // button
    button = document.createElement('button');
    button.title = this.config.tipLabel;
    this.element.appendChild(button);

    // set onClick to the toggle-function
    // button.addEventListener('click', this.toggle, false);
    // button.addEventListener('touchstart', this.toggle, false);
    $(button).click(function () {
      try {
        this.blur();
      } catch (ignore) {}
      self.toggle();
    });

    // popup
    // will be attached when opened the first time
    // to make sure its really the last element in the container
    this.popupAttached = false;
    this.popup = document.createElement('div');
    this.popup.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CONTROL + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PERMALINK_POPUP + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE;

    // textfield
    this.textfield = document.createElement('input');
    this.textfield.type = 'text';
    this.popup.appendChild(this.textfield);

    // copy button
    copyButton = document.createElement('button');
    copyButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].COPY + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON;
    copyButton.title = langConstants.COPY_TO_CLIPBOARD;
    copyButton.setAttribute('data-clipboard-target', '.' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PERMALINK_POPUP + ' > input[type="text"]');
    this.popup.appendChild(copyButton);
    new Clipboard(copyButton);

    // refresh button
    refreshButton = document.createElement('button');
    refreshButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].REFRESH + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON;
    refreshButton.title = langConstants.REFRESH;
    $(refreshButton).click(function () {
      self.generateLinkFromCurrentState({ target: self.textfield });
    });
    this.popup.appendChild(refreshButton);

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: this.element,
      target: this.config.target
    });
  };
  ol.inherits(c4g.maps.control.Permalink, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Permalink.prototype = $.extend(c4g.maps.control.Permalink.prototype, {

    open: function open() {
      if (!this.popupAttached) {
        $(this.popup).slideDown(1);
        this.config.target.appendChild(this.popup);
        this.popupAttached = true;
      }
      $(this.popup).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      $(this.element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
      this.generateLinkFromCurrentState({ target: this.textfield });
    },

    close: function close() {
      $(this.popup).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
      $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OPEN);
    },

    toggle: function toggle() {
      if ($(this.popup).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
        this.open();
      } else {
        this.close();
      }
    },

    generateLinkFromCurrentState: function generateLinkFromCurrentState(opt_options) {
      var options, proxy, mapView, parameters, link, center, baseLayerIdx, layerIdx, layers;

      options = opt_options || {};
      if (!options.paramCount || !(options.paramCount === 6 || options.paramCount === 2 || options.paramCount === 1)) {
        options.paramCount = 6;
      }

      parameters = [];
      mapView = this.config.mapController.map.getView();
      proxy = this.config.mapController.proxy;

      center = mapView.getCenter();
      center = ol.proj.transform([center[0], center[1]], 'EPSG:3857', 'EPSG:4326');

      parameters.push(+center[0].toFixed(5));
      parameters.push(+center[1].toFixed(5));
      parameters.push(mapView.getZoom());
      parameters.push(+mapView.getRotation().toFixed(2));

      // find active baselayer
      if (proxy.activeBaselayerId) {
        parameters.push(proxy.activeBaselayerId);
      } else {
        parameters.push(0);
      }

      // find active layers
      layers = [];
      for (layerIdx in proxy.activeLayerIds) {
        if (proxy.activeLayerIds.hasOwnProperty(layerIdx)) {
          layers.push(parseInt(layerIdx, 10));
        }
      }
      // delta-decode if there are more than one layer
      if (layers.length > 1) {
        layers = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].deltaEncode(layers);
        layers = layers.join(':');
      } else {
        layers = layers[0] || '0';
      }
      parameters.push(layers);
      parameters = parameters.join('/');

      // build link
      link = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].setUrlParam(parameters, this.config.getParameter);

      if (options.target) {
        options.target.value = link;
      } else {
        return link;
      }
    }, // end of generateLinkFromCurrentState

    generateLink: function generateLink(parameters) {
      if (!parameters || !(parameters.length === 6 || parameters.length === 2 || parameters.length === 1)) {
        return false;
      }

      // build and return link
      return __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].setUrlParam(parameters.join('/'), this.config.getParameter);
    } // end of generateLink

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Permalink = this.c4g.maps.control.Permalink;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-account.js":
/*!******************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-account.js ***!
  \******************************************************************/
/*! exports provided: Account */
/*! exports used: Account */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Account; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {c4g.maps.control.Sideboard}
   *
   * @param  {[type]}  mapController  [description]
   * @param  {[type]}  config         [description]
   */

  c4g.maps.control.Account = function (opt_options) {

    // extend options
    this.options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ACCOUNT,
      name: 'account',
      headline: langConstants.ACCOUNT,
      create: true,
      mapController: undefined,
      direction: 'left'
    }, opt_options);

    if (!this.options.mapController) {
      return false;
    }

    this.mainSection = document.createElement('div');

    // call parent constructor
    __WEBPACK_IMPORTED_MODULE_1__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Account, __WEBPACK_IMPORTED_MODULE_1__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  /**
   * Methods
   */
  c4g.maps.control.Account.prototype = $.extend(c4g.maps.control.Account.prototype, {

    /**
     * Executed when the panel will be opened for the first time.
     * [init description]
     *
     * @return  {boolean}  Returns |true| on success
     */
    init: function init() {
      var self = this;

      this.spinner.show();

      this.viewAccount = this.addAccountView();
      this.viewAccount.activate();

      var proxy = self.options.mapController.proxy;
      var map = self.options.mapController.map;

      this.mainSectionAccount = document.createElement('p');
      this.mainSectionAccount.innerHTML = self.options.mapController.data.account;
      this.mainSection.appendChild(this.mainSectionAccount);
      this.contentContainer.setElement(this.mainSection);

      this.spinner.hide();
      return true;
    }, // end of "init()"


    addAccountView: function addAccountView() {
      var accountView;

      accountView = this.addView({
        name: 'account',
        triggerConfig: {
          tipLabel: langConstants.ACCOUNT_VIEW_TRIGGER,
          className: __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant__["a" /* cssConstants */].ACCOUNT_VIEW_TRIGGER,
          withHeadline: false
        },
        sectionElements: [{ section: this.contentContainer, element: this.mainSection }, { section: this.topToolbar, element: this.viewTriggerBar }]
      });

      return accountView;
    }, // end of "addAccountView()"

    addAccount: function addAccount(options) {
      var self, TRIGGER_ACCOUNT, viewAccount, source, interaction, features;

      self = this;

      //TRIGGER_ACCOUNT = 'ACCOUNT_VIEW_TRIGGER_' + options.type.toUpperCase();

      viewAccount = self.addAccount({
        name: 'Account',
        triggerConfig: {
          tipLabel: 'Account', //langConstants[TRIGGER_DRAW],
          className: 'c4g_account_trigger', //cssConstants[TRIGGER_DRAW]
          withHeadline: false
        },
        sectionElements: [{ section: self.topToolbar, element: self.viewTriggerBar }],
        initFunction: function initFunction() {

          // Show loading animation
          self.spinner.show();

          // printFunction = function (event) {
          //   var infoButton,
          //       featureGeometry,
          //       translateInteraction,
          //       modifyInteraction,
          //       modifyButton,
          //       applyButton;
          //
          //
          //     infoButton = event.target;
          //
          //   // add apply button
          //   applyButton = document.createElement('button');
          //   applyButton.className = cssConstants.ICON + ' ' + cssConstants.EDITOR_FEATURE_APPLY;
          //   applyButton.title = langConstants.EDITOR_FEATURE_APPLY;
          //   applyButton.setAttribute('feat_id', i);
          //
          // }; // end of "modifyFeatureFunction()"

          features = new ol.Collection();

          self.spinner.hide();
          return true;
        },
        activateFunction: function activateFunction() {},
        deactivateFunction: function deactivateFunction() {}
      });

      return viewAccount;
    } // end of "addAccount()"

  });
})(jQuery, this.c4g);

var Account = this.c4g.maps.control.Account;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-editor.js":
/*!*****************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-editor.js ***!
  \*****************************************************************/
/*! exports provided: Editor */
/*! exports used: Editor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Editor; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_tooltippopup__ = __webpack_require__(/*! ./c4g-maps-misc-tooltippopup */ "./Resources/public/js/c4g-maps-misc-tooltippopup.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"

this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};








var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @constructor
   * @extend {c4g.maps.control.Sideboard}
   *
   * @param  {[type]}  mapController  [description]
   */

  c4g.maps.control.Editor = function (options) {

    // extend options
    this.options = $.extend({
      name: 'editor',
      type: 'frontend',
      dataField: false,
      create: true,
      mapController: undefined,
      drawModes: ['Point', 'Line', 'Polygon', 'Circle', 'Freehand'],
      direction: 'left',
      headline: langConstants.EDITOR
      // initMode: 'select'
    }, options);

    if (!this.options.mapController) {
      console.warn('Coul not initiallize Editor, without valid mapController.');
      return false;
    }

    //window.c4gMapsHooks.editor_loadTabs = [];
    //window.c4gMapsHooks.editor_featureChanged = [];
    this.tabs = [];
    // @TODO
    // this.typeLayer = undefined;
    // this.activeMode = this.options.initMode;
    // this.vectorSource = new ol.source.Vector();
    // this.activeDrawInteraction = undefined;
    this.lastDrawInteraction = undefined;
    this.proxy = this.options.mapController.proxy;

    if (this.options.dataField && typeof this.options.dataField === 'string') {
      this.options.dataField = $(this.options.dataField) || false;
    }

    // call parent constructor
    __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Editor, __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  /**
   * Methods
   */
  c4g.maps.control.Editor.prototype = $.extend(c4g.maps.control.Editor.prototype, {

    /**
     * Executed when the editor will be opened for the first time.
     * [init description]
     *
     * @return  {boolean}  Returns |true| on success
     */
    init: function init(opt_externalinit) {
      var self, layerStyleFunction, viewSelect;

      self = this;
      this.spinner.show();

      layerStyleFunction = function layerStyleFunction(feature, projection) {
        var styleId;

        if (feature && typeof feature.get === 'function') {
          // get the styleId of the current feature
          styleId = feature.get('styleId');
          // and execute the appropriate function
          if (self.proxy.locationStyleController.arrLocStyles[styleId]) {
            return self.proxy.locationStyleController.arrLocStyles[styleId].style(feature, projection);
          }
        }
        return false;
      };

      // Add editor layers
      this.editPointLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editLineLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editPolygonLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editCircleLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });
      this.editFreehandLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction });

      this.editLayerGroup = new ol.layer.Group({
        layers: new ol.Collection([this.editFreehandLayer, this.editCircleLayer, this.editPolygonLayer, this.editLineLayer, this.editPointLayer]),
        visible: true
      });
      this.options.mapController.map.addLayer(this.editLayerGroup);

      // Add and activate select view
      this.tabs.push(this.addSelectView());
      this.tabs[0].activate();

      //   AJAX: get editor config
      $.getJSON(self.options.mapController.data.api.editor + '/' + self.options.mapController.data.profile)
      // Create views for draw-features with at least one locationstyle
      .done(function (data) {

        // Draw-point view
        if (data.styles_point.length && data.styles_point.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Point', styleIds: data.styles_point }));
        }
        // Draw-line view
        if (data.styles_line.length && data.styles_line.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'LineString', styleIds: data.styles_line }));
        }
        // Draw-polygon view
        if (data.styles_polygon.length && data.styles_polygon.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Polygon', styleIds: data.styles_polygon }));
        }
        // Draw-circle view
        if (data.styles_circle.length && data.styles_circle.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Circle', styleIds: data.styles_circle }));
        }
        // Draw-freehand view
        if (data.styles_freehand.length && data.styles_freehand.length > 0) {
          self.tabs.push(self.addDrawView({ type: 'Freehand', styleIds: data.styles_freehand }));
        }
        // Call hook function for dynamically added tabs
        if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_loadTabs) === 'object') {
          __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_loadTabs, self);
        }

        return true;
      }).fail(function () {
        // @TODO error-messages
        //   1) Visible message 4 users (i18n)
        //   2) Technical console.warn
        console.warn('An error occured while trying to load the editor configuration...');
        return false;
      }).always(function () {
        var layers;
        if (self.options.type === 'backend') {
          // import GeoJSON when in backend mode
          self.importGeoJSON();
        } else {
          // load session-features when in frontend mode
          self.load();
        }
        // Add autosave to the layers when a feature is added
        layers = self.editLayerGroup.getLayers();
        layers.forEach(function (element, index, array) {
          element.getSource().on('addfeature', function () {
            self.save();
          });
        });

        //self.editPointLayer.getSource().on('addfeature', function () {self.save(); });
        //self.editLineLayer.getSource().on('addfeature', function () {self.save(); });
        //self.editPolygonLayer.getSource().on('addfeature', function () {self.save(); });
        self.spinner.hide();
      });
      if (opt_externalinit) {
        this.initialized = true;
      }

      return true;
    },

    /**
     * Executed before editor will be closed
     *
     * @return  {[type]}  [description]
     */
    preCloseFunction: function preCloseFunction() {
      if (this.editLayerGroup.getVisible()) {
        this.editLayerGroup.setVisible(false);
        this.options.mapController.map.removeLayer(this.editLayerGroup);
      }
    },

    /**
     * Executed before editor will be open
     *
     * @return  {[type]}  [description]
     */
    preOpenFunction: function preOpenFunction() {
      if (!this.editLayerGroup.getVisible()) {
        this.editLayerGroup.setVisible(true);
        this.options.mapController.map.addLayer(this.editLayerGroup);
      }
    },

    addSelectView: function addSelectView() {
      var self, selectInteraction, selectBoxInteraction, selectedFeatures, selectContentWrapper, selectContentHeadline, selectContent, selectContentInfo, selectView, fnHandleSelection;

      self = this;

      selectContentWrapper = document.createElement('div');

      selectContentHeadline = document.createElement('div');
      selectContentHeadline.innerHTML = langConstants.EDITOR_VIEW_TRIGGER_SELECT;
      selectContentHeadline.className = 'contentHeadline';
      selectContentWrapper.appendChild(selectContentHeadline);

      selectContent = document.createElement('div');
      selectContent.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_CONTENT_SELECT;
      selectContentInfo = document.createElement('p');
      selectContentInfo.innerHTML = langConstants.EDITOR_SELECT_INFO;
      selectContentInfo.innerHTML += '<br><br><sub>' + langConstants.EDITOR_SELECT_INFO_ADDITIONAL + '</sub>';
      selectContent.appendChild(selectContentInfo);
      selectContentWrapper.appendChild(selectContent);

      selectView = this.addView({
        name: 'select',
        triggerConfig: {
          tipLabel: langConstants.EDITOR_VIEW_TRIGGER_SELECT,
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_VIEW_TRIGGER_SELECT,
          withHeadline: true
        },
        sectionElements: [{ section: this.contentContainer, element: selectContentWrapper }, { section: this.topToolbar, element: this.viewTriggerBar }],
        initFunction: function initFunction() {
          selectInteraction = new ol.interaction.Select({
            layers: self.editLayerGroup.getLayers().getArray(),
            toggleCondition: ol.events.condition.platformModifierKeyOnly,
            style: function style(feature, projection) {
              var styleId, styleArray, styleRadius;

              if (feature && typeof feature.get === 'function') {
                // get the styleId of the current feature
                styleId = feature.get('styleId');
                // and execute the appropriate function
                if (self.proxy.locationStyleController.arrLocStyles[styleId]) {
                  styleArray = self.proxy.locationStyleController.arrLocStyles[styleId].style(feature, projection);

                  if (typeof styleArray[0].getImage === 'function' && styleArray[0].getImage() instanceof ol.style.Icon) {
                    styleRadius = 5;
                  } else {
                    styleRadius = parseInt(styleArray[0].getImage().getRadius(), 10) + 4;
                  }

                  styleArray.push(new ol.style.Style({
                    image: new ol.style.Circle({
                      stroke: new ol.style.Stroke({
                        color: 'rgba(255,255,255,.7)',
                        width: 5
                      }),
                      radius: styleRadius
                    }),
                    stroke: new ol.style.Stroke({
                      color: 'rgba(255,255,255,.7)',
                      width: 5
                    }),
                    fill: new ol.style.Fill({
                      color: 'rgba(255,255,255,.5)'
                    })
                  }));

                  return styleArray;
                }
              }
              return false;
            }
          }); // selectInteraction

          selectedFeatures = selectInteraction.getFeatures();

          selectBoxInteraction = new ol.interaction.DragBox({ condition: ol.events.condition.shiftKeyOnly });

          selectBoxInteraction.on('boxend', function (e) {
            var extent = selectBoxInteraction.getGeometry().getExtent();

            self.editLayerGroup.getLayers().forEach(function (layer) {
              layer.getSource().forEachFeatureIntersectingExtent(extent, function (feature) {
                selectedFeatures.push(feature);
              });
            });

            fnHandleSelection();
          });

          // clear selection when drawing a new box and when clicking on the map
          selectBoxInteraction.on('boxstart', function (e) {
            selectedFeatures.clear();
            fnHandleSelection();
          });

          fnHandleSelection = function fnHandleSelection() {
            var i, j, label, editorVars, headlineElement, inputNameElement, modifyButtonElement, deleteButtonElement, paragraphElement, strongElement, inputElement, featureCount, selectedFeature, blurOnEnter, inputChangeHandler, nameChangeHandler, modifyFeatureFunction, deleteFeatureFunction, renderSelectedFeaturesList;

            if (typeof self.applyFeatureModification === 'function') {
              self.applyFeatureModification();
            }

            blurOnEnter = function blurOnEnter(event) {
              if (event.which === 13) {
                try {
                  event.target.blur();
                } catch (ignore) {}
              }
            }; // end of "blurOnEnter()"

            nameChangeHandler = function nameChangeHandler(event) {
              var changedFeature;
              changedFeature = selectedFeatures.item(event.target.getAttribute('feat_id'));
              changedFeature.set('tooltip', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].encodeGeoJsonProperty(event.target.value || ''));
              self.save();
              // Call hook to notify the feature change
              if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_featureChanged) === 'object') {
                __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_featureChanged, {
                  feature: changedFeature,
                  action: 'renamed'
                });
              }
            }; // end of "nameChangeHandler()"

            inputChangeHandler = function inputChangeHandler(event) {
              var currentVars, changedFeature;
              changedFeature = selectedFeatures.item(event.target.getAttribute('feat_id'));
              currentVars = changedFeature.get('editorVars');
              currentVars[event.target.getAttribute('var_id')].value = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].encodeGeoJsonProperty(event.target.value || '');
              changedFeature.set('editorVars', currentVars);
              self.save();
              // Call hook to notify the feature change
              if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_featureChanged) === 'object') {
                __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_featureChanged, {
                  feature: changedFeature,
                  action: 'changed_var'
                });
              }
            }; // end of "inputChangeHandler()"

            modifyFeatureFunction = function modifyFeatureFunction(event) {
              var modifyFeature, featureGeometry, translateInteraction, modifyInteraction, modifyButton, applyButton;

              if (typeof self.applyFeatureModification === 'function') {
                self.applyFeatureModification();
              }

              modifyButton = event.target;

              // get feature that should be modified
              modifyFeature = selectedFeatures.item(modifyButton.getAttribute('feat_id'));
              if (!modifyFeature || typeof modifyFeature.getGeometry !== 'function') {
                return false;
              }

              featureGeometry = modifyFeature.getGeometry();
              translateInteraction = false;
              modifyInteraction = false;

              if (!(featureGeometry instanceof ol.geom.LineString)) {
                translateInteraction = new ol.interaction.Translate({
                  features: new ol.Collection([modifyFeature])
                });
                self.options.mapController.map.addInteraction(translateInteraction);
              }
              if (!(featureGeometry instanceof ol.geom.Point)) {
                modifyInteraction = new ol.interaction.Modify({
                  features: new ol.Collection([modifyFeature])
                });
                self.options.mapController.map.addInteraction(modifyInteraction);
              }

              selectInteraction.setActive(false);

              // add apply button
              applyButton = document.createElement('button');
              applyButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_FEATURE_APPLY;
              applyButton.title = langConstants.EDITOR_FEATURE_APPLY;
              applyButton.setAttribute('feat_id', i);

              self.applyFeatureModification = function (event) {
                if (translateInteraction) {
                  translateInteraction.setActive(false);
                  self.options.mapController.map.removeInteraction(translateInteraction);
                  translateInteraction = false;
                }
                if (modifyInteraction) {
                  self.options.mapController.map.removeInteraction(modifyInteraction);
                  modifyInteraction.setActive(false);
                  modifyInteraction = false;
                }
                selectInteraction.setActive(true);

                applyButton = applyButton.parentNode.replaceChild(modifyButton, applyButton);
                self.save();
                self.applyFeatureModification = false;
                // Call hook to notify the feature change
                if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_featureChanged) === 'object') {
                  __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_featureChanged, {
                    feature: modifyFeature,
                    action: 'edited'
                  });
                }
              };

              $(applyButton).click(self.applyFeatureModification);
              modifyButton = modifyButton.parentNode.replaceChild(applyButton, modifyButton);
            }; // end of "modifyFeatureFunction()"

            deleteFeatureFunction = function deleteFeatureFunction(event) {
              var featureIndex, featureGeometry, featureSource, deleteFeature;

              if (typeof self.applyFeatureModification === 'function') {
                self.applyFeatureModification();
              }

              featureIndex = event.target.getAttribute('feat_id');
              deleteFeature = selectedFeatures.item(featureIndex);
              featureGeometry = deleteFeature.getGeometry();

              // find right source
              if (featureGeometry instanceof ol.geom.Point) {
                featureSource = self.editPointLayer.getSource();
              } else if (featureGeometry instanceof ol.geom.LineString) {
                featureSource = self.editLineLayer.getSource();
              } else if (featureGeometry instanceof ol.geom.Polygon) {
                featureSource = self.editPolygonLayer.getSource();
              } else if (featureGeometry instanceof ol.geom.Circle) {
                featureSource = self.editCircleLayer.getSource();
              } else {
                // could not find right source
                console.warn('Could not delete the feature. Unable to find appropriate source.');
                return false;
              }

              // remove Feature from the source
              try {
                featureSource.removeFeature(deleteFeature);
              } catch (ignore) {
                if (featureGeometry instanceof ol.geom.LineString) {
                  featureSource = self.editFreehandLayer.getSource();
                  featureSource.removeFeature(deleteFeature);
                }
              }
              // and from the selection
              selectedFeatures.remove(deleteFeature);

              // rerender the selectionList
              renderSelectedFeaturesList();
              self.save();
              // Call hook to notify the feature change
              // Maybe pass the remaining features instead of the deletedFeature ?
              // Or maybe a second hook for deletion, where both is passed ?
              if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_featureChanged) === 'object') {
                __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_featureChanged, {
                  feature: deleteFeature,
                  action: 'deleted'
                });
              }
            }; // end of "deleteFeatureFunction()"

            renderSelectedFeaturesList = function renderSelectedFeaturesList() {
              featureCount = selectedFeatures.getLength();
              selectContent.innerHTML = '';
              if (featureCount > 0) {
                for (i = 0; i < featureCount; i += 1) {
                  selectedFeature = selectedFeatures.item(i);
                  headlineElement = document.createElement('h4');
                  // add name inputfield
                  inputNameElement = document.createElement('input');
                  inputNameElement.type = 'text';
                  inputNameElement.id = i;
                  inputNameElement.setAttribute('value', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].decodeGeoJsonProperty(selectedFeature.get('tooltip') || ''));
                  inputNameElement.setAttribute('feat_id', i);
                  $(inputNameElement).keydown(blurOnEnter);
                  inputNameElement.onchange = nameChangeHandler;
                  headlineElement.appendChild(inputNameElement);
                  // add modify button
                  modifyButtonElement = document.createElement('button');
                  modifyButtonElement.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_FEATURE_MODIFY;
                  modifyButtonElement.title = langConstants.EDITOR_FEATURE_MODIFY;
                  modifyButtonElement.setAttribute('feat_id', i);
                  $(modifyButtonElement).click(modifyFeatureFunction);
                  headlineElement.appendChild(modifyButtonElement);
                  // add delete button
                  deleteButtonElement = document.createElement('button');
                  deleteButtonElement.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_FEATURE_DELETE;
                  deleteButtonElement.title = langConstants.EDITOR_FEATURE_DELETE;
                  deleteButtonElement.setAttribute('feat_id', i);
                  $(deleteButtonElement).click(deleteFeatureFunction);
                  headlineElement.appendChild(deleteButtonElement);

                  selectContent.appendChild(headlineElement);
                  if (selectedFeature.get('measuredLength')) {
                    if (selectedFeature.getGeometry() instanceof ol.geom.LineString) {
                      label = langConstants.LENGTH;
                    } else if (selectedFeature.getGeometry() instanceof ol.geom.Polygon) {
                      label = langConstants.PERIMETER;
                    } else {
                      label = langConstants.RADIUS;
                    }
                    paragraphElement = document.createElement('p');
                    paragraphElement.innerHTML += '<strong>' + label + ':</strong> ' + selectedFeature.get('measuredLength').htmlValue;
                    selectContent.appendChild(paragraphElement);
                  }
                  if (selectedFeature.get('measuredArea')) {
                    paragraphElement = document.createElement('p');
                    paragraphElement.innerHTML += '<strong>' + langConstants.SURFACEAREA + ':</strong> ' + selectedFeature.get('measuredArea').htmlValue;
                    selectContent.appendChild(paragraphElement);
                  }
                  if (selectedFeature.get('measuredRadius')) {
                    paragraphElement = document.createElement('p');
                    paragraphElement.innerHTML += '<strong>' + langConstants.RADIUS + ':</strong> ' + selectedFeature.get('measuredRadius').htmlValue;
                    selectContent.appendChild(paragraphElement);
                  }
                  // check and append editor-vars
                  editorVars = selectedFeature.get('editorVars');
                  for (j = 0; j < editorVars.length; j += 1) {
                    paragraphElement = document.createElement('p');
                    strongElement = document.createElement('strong');
                    strongElement.innerHTML = editorVars[j].label;

                    inputElement = document.createElement('input');
                    inputElement.type = 'text';
                    inputElement.id = i + '-' + j;
                    inputElement.setAttribute('value', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].decodeGeoJsonProperty(editorVars[j].value || ''));
                    inputElement.setAttribute('feat_id', i);
                    inputElement.setAttribute('var_id', j);
                    $(inputElement).keydown(blurOnEnter);
                    inputElement.onchange = inputChangeHandler;

                    paragraphElement.appendChild(strongElement);
                    paragraphElement.appendChild(document.createElement('br'));
                    paragraphElement.appendChild(inputElement);
                    selectContent.appendChild(paragraphElement);
                  }
                }
                selectContentHeadline.style.display = 'none';
                // self.statusBar.innerHTML = featureCount;
              } else {
                selectContent.appendChild(selectContentInfo);
                // self.statusBar.innerHTML = 0;
                selectContentHeadline.style.display = '';
              }
              self.update();
            }; // end of "renderSelectedFeaturesList"

            renderSelectedFeaturesList();
          }; // end of "fnHandleSelection"

          selectInteraction.on('select', function (event) {
            fnHandleSelection(event.target.getFeatures());
          });

          self.options.mapController.map.addInteraction(selectInteraction);
          self.options.mapController.map.addInteraction(selectBoxInteraction);
          return true;
        },
        activateFunction: function activateFunction() {

          // Disable mapHover
          self.options.mapController.mapHover.deactivate();

          // Reset display, if no features are selected
          if (selectInteraction.getFeatures().getLength() < 1) {
            selectContent.innerHTML = '';
            selectContent.appendChild(selectContentInfo);
            // self.statusBar.innerHTML = 0;
            selectContentHeadline.style.display = '';
          }

          // Enable interaction
          selectInteraction.setActive(true);
          self.options.mapController.map.addInteraction(selectInteraction);
          selectBoxInteraction.setActive(true);
          self.options.mapController.map.addInteraction(selectBoxInteraction);

          return true;
        },
        deactivateFunction: function deactivateFunction() {
          if (typeof self.applyFeatureModification === 'function') {
            self.applyFeatureModification();
          }
          // Disable interaction
          selectInteraction.setActive(false);
          self.options.mapController.map.removeInteraction(selectInteraction);
          selectBoxInteraction.setActive(false);
          self.options.mapController.map.removeInteraction(selectBoxInteraction);

          // enable mapHover
          self.options.mapController.mapHover.activate();

          return true;
        }
      });

      return selectView;
    },

    addDrawView: function addDrawView(options) {
      var self, TRIGGER_DRAW, drawContent, optionsDiv, enableInstantMeasureCheckbox, enableInstantMeasureCheckboxLabel,
      // enableFreehandDrawCheckbox,
      // enableFreehandDrawCheckboxLabel,
      checkboxChangeHandler, drawView, addDrawStyle, olType;

      self = this;

      options = $.extend({
        type: 'Point',
        styleIds: []
      }, options);

      checkboxChangeHandler = function checkboxChangeHandler(event) {
        // var interaction = self.options.mapController.map.interaction;
        // self.options.mapController.map.removeInteraction(interaction);
        // //self.options.mapController.map.addInteraction(interaction);

      };

      TRIGGER_DRAW = 'EDITOR_VIEW_TRIGGER_DRAW_' + options.type.toUpperCase();

      drawContent = document.createElement('div');
      drawContent.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */]['EDITOR_DRAW_CONTENT_' + options.type.toUpperCase()];
      drawContent.innerHTML = '<h4>' + langConstants[TRIGGER_DRAW] + '</h4>';

      if (options.type.toLowerCase() !== 'point') {
        optionsDiv = document.createElement('div');
        optionsDiv.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_DRAW_OPTIONS;
        drawContent.appendChild(optionsDiv);

        enableInstantMeasureCheckbox = document.createElement('input');
        enableInstantMeasureCheckbox.type = 'checkbox';
        enableInstantMeasureCheckbox.id = 'enableInstantMeasureFor' + options.type;
        optionsDiv.appendChild(enableInstantMeasureCheckbox);

        enableInstantMeasureCheckboxLabel = document.createElement('label');
        enableInstantMeasureCheckboxLabel.setAttribute('for', 'enableInstantMeasureFor' + options.type);
        enableInstantMeasureCheckboxLabel.innerHTML = langConstants.EDITOR_ENABLE_INSTANT_MEASURE;
        optionsDiv.appendChild(enableInstantMeasureCheckboxLabel);

        optionsDiv.appendChild(document.createElement('br'));

        // enableFreehandDrawCheckbox = document.createElement('input');
        // enableFreehandDrawCheckbox.type = 'checkbox';
        // enableFreehandDrawCheckbox.id = 'enableFreehandDrawFor' + options.type;
        // enableFreehandDrawCheckbox.onchange = checkboxChangeHandler;
        // optionsDiv.appendChild(enableFreehandDrawCheckbox);
        //
        // enableFreehandDrawCheckboxLabel = document.createElement('label');
        // enableFreehandDrawCheckboxLabel.setAttribute('for', 'enableFreehandDrawFor' + options.type);
        // enableFreehandDrawCheckboxLabel.innerHTML = langConstants.EDITOR_ENABLE_FREEHAND_DRAW;
        // optionsDiv.appendChild(enableFreehandDrawCheckboxLabel);
      }

      addDrawStyle = function addDrawStyle(styleId) {
        var interactionView, source, interaction, features, editorStyle, style, styleData, styleIcon, svgSrc, styleImage, styleTriggerLabel, featureIdCount, name;

        // Style "shortcut"
        style = self.proxy.locationStyleController.arrLocStyles[styleId].style()[0];
        editorStyle = self.proxy.locationStyleController.arrLocStyles[styleId].editor;
        styleData = self.proxy.locationStyleController.arrLocStyles[styleId].locStyleArr;
        svgSrc = styleData.svgSrc;

        featureIdCount = 0;

        // Create label for interaction-trigger
        styleTriggerLabel = document.createElement('span');
        // @TODO use css-class for dimensions
        styleTriggerLabel.style.display = 'block';
        styleTriggerLabel.style.minWidth = '30px';
        styleTriggerLabel.style.minHeight = '30px';
        styleTriggerLabel.style.margin = '2px';
        // "style.getImage().getImage()", does not work in every case
        styleImage = style.getImage() || undefined;
        if (editorStyle.iconSrc || styleImage instanceof ol.style.Icon) {
          styleIcon = document.createElement('img');

          if (editorStyle.iconSrc && editorStyle.iconSrc.indexOf('.') != -1) {
            styleIcon.src = editorStyle.iconSrc;
            if (styleData.editor_icon_size) {
              styleIcon.height = styleData.editor_icon_size[0];
              styleIcon.width = styleData.editor_icon_size[1];
            } else {
              styleIcon.height = '32';
              styleIcon.width = '32';
            }
          } else {
            styleIcon.src = styleImage.getSrc();
            styleIcon.scale = styleImage.getScale();
          }
          styleTriggerLabel.appendChild(styleIcon);
        } else if (svgSrc) {
          if (styleData.svgSrc && styleData.icon_scale && styleData.icon_size) {
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext("2d");
            var height = styleData.icon_size[0] * styleData.icon_scale;
            var width = styleData.icon_size[1] * styleData.icon_scale;

            var strokewidth = 0;
            if (styleData.strokewidth && styleData.strokewidth.value) {
              strokewidth = styleData.strokewidth.value;
            }

            canvas.height = height + 2 * strokewidth;
            canvas.width = width + 2 * strokewidth;
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (styleData.fillcolor) {
              ctx.fillStyle = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.fillcolor, styleData.fillopacity.value);
              ctx.fillRect(0, 0, canvas.width, canvas.height);
            }

            if (strokewidth && styleData.strokecolor) {
              ctx.strokeStyle = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(styleData.strokecolor, styleData.strokeopacity.value);
              ctx.lineWidth = strokewidth;
              ctx.strokeRect(0, 0, canvas.width, canvas.height);
              ctx.translate(0.5, 0.5);
            }

            // if (styleData.icon_opacity.value && (styleData.icon_opacity.value > 0)) {
            //     ctx.globalAlpha = (styleData.icon_opacity.value / 100);
            // }

            var img = new Image();
            img.src = styleData.svgSrc;
            img.zIndex = 100;

            img.onload = function () {
              ctx.drawImage(img, strokewidth, strokewidth, width, height);
            };

            styleIcon = canvas;

            styleTriggerLabel.style.width = width * scale + 'px';
            styleTriggerLabel.style.height = height * scale + 'px';
          }
        } else {
          styleTriggerLabel.style.background = style.getFill().getColor();
          styleTriggerLabel.style.border = '1px solid ' + style.getStroke().getColor();
        }

        // Create interactionView
        //   "addView" will be used for this, because the functionality
        //   ist mostly equal
        name = self.proxy.locationStyleController.arrLocStyles[styleId].name.replace("&#40;", "(").replace("&#41;", ")");
        interactionView = self.addView({
          name: 'draw:' + (self.proxy.locationStyleController.arrLocStyles[styleId].tooltip || name),
          triggerConfig: {
            label: styleTriggerLabel,
            tipLabel: self.proxy.locationStyleController.arrLocStyles[styleId].tooltip || name,
            className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].EDITOR_DRAW_TRIGGER,
            target: drawContent,
            withHeadline: true
          },
          sectionElements: [{ section: self.contentContainer, element: drawContent }, { section: self.topToolbar, element: self.viewTriggerBar }],
          initFunction: function initFunction() {
            var interactionStyleImage, activeSketch, activeTooltip;

            // Only show original icon, when the drawing POIs
            if (options.type.toLowerCase() === 'point' && style.getImage()) {
              interactionStyleImage = style.getImage();
            } else {
              interactionStyleImage = new ol.style.Circle({
                fill: style.getFill(),
                stroke: style.getStroke(),
                radius: 5
              });
            }

            // Get appropriate source
            switch (options.type.toLowerCase()) {
              case 'freehand':
                source = self.editFreehandLayer.getSource();
                break;
              case 'circle':
                source = self.editCircleLayer.getSource();
                break;
              case 'polygon':
                source = self.editPolygonLayer.getSource();
                break;
              case 'linestring':
                source = self.editLineLayer.getSource();
                break;
              case 'point':
              default:
                source = self.editPointLayer.getSource();
                break;
            }

            olType = options.type;
            if (olType == 'Freehand') {
              olType = 'LineString';
            }

            features = new ol.Collection();
            interaction = new ol.interaction.Draw({
              features: features,
              source: source,
              type: olType,
              freehand: options.type == 'Freehand',
              style: [new ol.style.Style({
                stroke: new ol.style.Stroke({
                  color: 'rgba(255,255,255,.5)',
                  width: style.getStroke().getWidth() + 2
                }),
                image: interactionStyleImage
              }), new ol.style.Style({
                geometry: style.getGeometry(),
                fill: style.getFill(),
                stroke: style.getStroke()
              })]
            });

            // @TODO doku
            //
            interaction.on('drawstart', function (event) {
              activeSketch = event.feature;
              activeSketch.set('styleId', styleId);

              if (enableInstantMeasureCheckbox && enableInstantMeasureCheckbox.checked) {
                activeTooltip = new __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
                  map: self.options.mapController.map,
                  position: event.coordinate,
                  horizontal: true
                });
              }
            }, self);

            // @TODO doku
            //
            self.options.mapController.map.on('pointermove', function (event) {
              if (enableInstantMeasureCheckbox && enableInstantMeasureCheckbox.checked && activeSketch) {
                if (activeTooltip && __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue && __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue == "0.00") {
                  activeTooltip.close();
                  activeTooltip = null;
                } else if (!activeTooltip && __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue && __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).rawValue != "0.00") {
                  activeTooltip = new __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
                    map: self.options.mapController.map,
                    position: event.coordinate,
                    horizontal: true
                  });
                }
                if (activeTooltip) {
                  activeTooltip.setPosition(event.coordinate);
                  activeTooltip.setContent(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true).htmlValue);
                }
              }
            }, self);

            // @TODO doku
            //
            interaction.on('drawend', function (event) {
              var i, vars, editorVars, name;

              // name the feature
              featureIdCount += 1;
              name = self.proxy.locationStyleController.arrLocStyles[styleId].name.replace("&#40;", "(").replace("&#41;", ")");
              activeSketch.set('tooltip', (self.proxy.locationStyleController.arrLocStyles[styleId].tooltip || name) + ' (' + featureIdCount + ')');
              // add styleId
              activeSketch.set('styleId', styleId);
              // add measurements to the feature
              activeSketch.set('measuredLength', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry(), true));
              if (options.type.toLowerCase() === 'polygon') {
                activeSketch.set('measuredArea', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry()));
              }
              if (options.type.toLowerCase() === 'circle') {
                activeSketch.set('measuredRadius', __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(activeSketch.getGeometry()));
              }
              //activeSketch.setStyle(self.proxy.locationStyleController.arrLocStyles[styleId].style);
              // add editor-vars
              vars = editorStyle.vars;
              editorVars = [];
              for (i = 0; i < vars.length; i += 1) {
                editorVars[i] = {};
                editorVars[i].key = vars[i].key;
                editorVars[i].label = vars[i].value;
                editorVars[i].value = '';
              }
              activeSketch.set('editorVars', editorVars);
              // reset active-element variables
              activeSketch = null;
              if (activeTooltip) {
                activeTooltip.close();
                activeTooltip = null;
              }
            }, self);

            self.options.mapController.map.addInteraction(interaction);
            return true;
          }, // end of "initFunction()"

          activateFunction: function activateFunction() {

            // deactivate mapHover
            self.options.mapController.mapHover.deactivate();

            // Reset feature-list
            features.clear();

            // Enable interaction
            // self.options.mapController.map.addInteraction(interaction);
            interaction.setActive(true);
            return true;
          },

          deactivateFunction: function deactivateFunction() {

            // reactivate mapHover
            self.options.mapController.mapHover.activate();

            // finish drawings, if not already done
            if (options.type.toLowerCase() !== 'point') {
              try {
                interaction.finishDrawing();
              } catch (ignore) {
                // 0_o
              }
            }

            // Remove from map
            // self.options.mapController.map.removeInteraction(interaction);
            interaction.setActive(false);
            return true;
          }
        }, drawView);

        return interactionView;
      };

      drawView = self.addView({
        name: 'draw:' + options.type.toLowerCase(),
        triggerConfig: {
          tipLabel: langConstants[TRIGGER_DRAW],
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */][TRIGGER_DRAW],
          withHeadline: true
        },
        sectionElements: [{ section: self.contentContainer, element: drawContent }, { section: self.topToolbar, element: self.viewTriggerBar }],
        initFunction: function initFunction() {
          var i, styleId, neededStyles, sortAndAddStyles;

          // Show loading animation
          self.spinner.show();

          neededStyles = [];

          /**
           * @TODO
           * [sortAndAddStyles description]
           *
           * @return  {[type]}  [description]
           */
          sortAndAddStyles = function sortAndAddStyles(arrStyleIds) {
            var j, locationStyles, drawInteraction, styleIds;

            // prepare
            locationStyles = self.proxy.locationStyleController.arrLocStyles;
            styleIds = arrStyleIds || options.styleIds;
            if (!styleIds || !locationStyles) {
              return false;
            }

            // sort
            styleIds.sort(function (a, b) {

              //ToDo check
              if (locationStyles[a] && locationStyles[b] && locationStyles[a].editor) {
                if (!locationStyles[a].editor.sort && !locationStyles[b].editor.sort || locationStyles[a].editor.sort === locationStyles[b].editor.sort) {
                  if (!locationStyles[a].name || !locationStyles[b].name) {
                    return !locationStyles[b].name ? -1 : 1;
                  }
                  return locationStyles[a].name.toLowerCase() > locationStyles[b].name.toLowerCase() ? 1 : -1;
                }
                if (!locationStyles[a].editor.sort || !locationStyles[b].editor.sort) {
                  return !locationStyles[b].editor.sort ? -1 : 1;
                }

                return locationStyles[a].editor.sort > locationStyles[b].editor.sort ? 1 : -1;
              } else {
                return -1;
              }
            }); // end sort

            // create
            for (j = 0; j < styleIds.length; j += 1) {
              drawInteraction = addDrawStyle(styleIds[j]);
              // activate the first drawStyle
              if (j === 0) {
                drawInteraction.activate();
              }
            }

            // success
            self.update();
            return true;
          }; // end of "sortAndAddStyles"

          // Make sure that all needed styles are loaded
          if (!self.proxy.locationStyleController.arrLocStyles) {
            // no styles are loaded, so load all styles
            self.proxy.locationStyleController.arrLocStyles = {};
            neededStyles = options.styleIds;
          } else {
            // check wich styles are missing
            for (i = 0; i < options.styleIds.length; i += 1) {
              styleId = options.styleIds[i];
              if (!self.proxy.locationStyleController.arrLocStyles[styleId] || !self.proxy.locationStyleController.arrLocStyles[styleId].style) {
                neededStyles.push(styleId);
              }
            }
          }

          if (neededStyles.length > 0) {
            if (!self.proxy) {
              console.warn('Could not load locStyles, as the map-proxy was not initiallized.');
            }
            self.proxy.locationStyleController.loadLocationStyles(neededStyles, {
              done: function done() {
                sortAndAddStyles();
              },
              always: function always() {
                // Hide loading-animation
                self.spinner.hide();
                self.update();
              }
            });
          } else {
            sortAndAddStyles();
            self.update();
            self.spinner.hide();
          }

          return true;
        },
        activateFunction: function activateFunction() {
          return true;
        },
        deactivateFunction: function deactivateFunction() {
          return true;
        }
      });

      return drawView;
    },

    /**
     * If opt_slot is empty, the function will just save the data in the sessionStorage.
     * [save description]
     *
     * @param   {[type]}  opt_slot  [description]
     *
     * @return  {[type]}            [description]
     */
    save: function save(opt_slot) {
      var format, saveData, slotName, storage;

      if (this.options.type === 'backend') {
        return this.exportGeoJSON();
      }

      format = new ol.format.GeoJSON();
      saveData = {};

      saveData.points = format.writeFeatures(this.editPointLayer.getSource().getFeatures());
      saveData.lines = format.writeFeatures(this.editLineLayer.getSource().getFeatures());
      saveData.polygons = format.writeFeatures(this.editPolygonLayer.getSource().getFeatures());
      saveData.circles = format.writeFeatures(this.editCircleLayer.getSource().getFeatures());
      saveData.freehand = format.writeFeatures(this.editFreehandLayer.getSource().getFeatures());

      slotName = 'c4gMaps_';
      slotName += this.options.mapController.data.mapId;
      slotName += '_' + window.location.pathname;
      if (!opt_slot) {
        storage = window.sessionStorage;
      } else {
        slotName += '_' + opt_slot;
        storage = window.localStorage;
      }
      // Call hook functions before save
      if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_onSave) === 'object') {
        __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_onSave, saveData);
      }
      storage.setItem(slotName, JSON.stringify(saveData));
    },

    /**
     * If opt_slot is empty, the function will just load the data from the sessionStorage.
     * [load description]
     *
     * @param   {[type]}  opt_slot  [description]
     *
     * @return  {boolean}            [description]
     */
    load: function load(opt_slot) {
      var i, self, format, loadData, featureCollection, slotName, storage, neededStyles, styleId, importFeatures;

      self = this;
      format = new ol.format.GeoJSON();
      self.spinner.show();

      slotName = 'c4gMaps_';
      slotName += this.options.mapController.data.mapId;
      slotName += '_' + window.location.pathname;
      if (!opt_slot) {
        storage = window.sessionStorage;
      } else {
        slotName += '_' + opt_slot;
        storage = window.localStorage;
      }
      loadData = storage.getItem(slotName);
      if (!loadData) {
        self.spinner.hide();
        return false;
      }
      loadData = JSON.parse(loadData);

      featureCollection = [];
      neededStyles = [];

      featureCollection = format.readFeatures(loadData.points).concat(format.readFeatures(loadData.lines), format.readFeatures(loadData.polygons), format.readFeatures(loadData.circles), format.readFeatures(loadData.freehand));
      for (i = 0; i < featureCollection.length; i += 1) {
        styleId = featureCollection[i].get('styleId');

        if ((!self.proxy.locationStyleController.arrLocStyles[styleId] || !self.proxy.locationStyleController.arrLocStyles[styleId].style) && $.inArray(styleId, neededStyles) === -1) {
          neededStyles.push(styleId);
        }
      }

      importFeatures = function importFeatures() {
        self.editPointLayer.getSource().addFeatures(format.readFeatures(loadData.points));
        self.editLineLayer.getSource().addFeatures(format.readFeatures(loadData.lines));
        self.editPolygonLayer.getSource().addFeatures(format.readFeatures(loadData.polygons));
        self.editCircleLayer.getSource().addFeatures(format.readFeatures(loadData.circles));
        self.editFreehandLayer.getSource().addFeatures(format.readFeatures(loadData.freehand));
      };

      if (neededStyles.length > 0) {
        if (!self.proxy) {
          console.warn('Could not load locStyles, as the map-proxy was not initiallized.');
          return false;
        }
        self.proxy.locationStyleController.loadLocationStyles(neededStyles, {
          done: function done() {
            importFeatures();
            // Call hook functions on load
            if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_onLoad) === 'object') {
              __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_onLoad, loadData);
            }
          },
          always: function always() {
            // Hide loading-animation
            self.spinner.hide();
          }
        });
      } else {
        importFeatures();
        self.spinner.hide();
        // Call hook functions on load
        if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.editor_onLoad) === 'object') {
          __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.editor_onLoad, loadData);
        }
      }
    }, // End of "load"

    /**
     * @TODO: [export description]
     *
     * @return  {[type]}  [description]
     */
    exportGeoJSON: function exportGeoJSON() {
      var format, features;

      format = new ol.format.GeoJSON();

      features = this.editPointLayer.getSource().getFeatures();
      features = features.concat(this.editLineLayer.getSource().getFeatures());
      features = features.concat(this.editPolygonLayer.getSource().getFeatures());
      features = features.concat(this.editCircleLayer.getSource().getFeatures());
      features = features.concat(this.editFreehandLayer.getSource().getFeatures());

      features = format.writeFeatures(features);
      // features = JSON.stringify(features);

      if (this.options.type === 'backend' && this.options.dataField) {
        this.options.dataField.val(features);
        return true;
      } else {
        return features;
      }
    }, // end of "export"

    /**
     * @TODO: [import description]
     *
     * @return  {[type]}  [description]
     */
    importGeoJSON: function importGeoJSON(opt_geojson) {
      var self, styleId, format, features, points, freehand, lines, polygons, circles, neededStyles, importFeatures, i;

      self = this;

      if (this.options.type === 'backend' && this.options.dataField) {
        features = this.options.dataField.val();
      } else if (opt_geojson) {
        features = opt_geojson;
      } else {
        return false;
      }

      if (!features) {
        // no features to load
        return false;
      }

      // try {
      //   features = JSON.parse(features);
      // } catch (ignore) {}

      format = new ol.format.GeoJSON();
      try {
        features = format.readFeatures(features);
      } catch (ignore) {
        console.warn('Could not load features: Invalid JSON string...');
        return false;
      }

      neededStyles = [];
      points = [];
      freehand = [];
      lines = [];
      polygons = [];
      circles = [];
      for (i = 0; i < features.length; i += 1) {
        styleId = features[i].get('styleId') || features[i].get('locstyle') || false;

        if (features[i] && typeof features[i].getGeometry === 'function') {
          if (features[i].getGeometry() instanceof ol.geom.Point) {
            points.push(features[i]);
          } else if (features[i].getGeometry() instanceof ol.geom.LineString) {
            if (features.options && features.options.type && features.options.type.toLowerCase() == 'freehand') {
              freehand.push(features[i]);
            } else {
              lines.push(features[i]);
            }
          } else if (features[i].getGeometry() instanceof ol.geom.Polygon) {
            polygons.push(features[i]);
          } else if (features[i].getGeometry() instanceof ol.geom.Circle) {
            circles.push(features[i]);
          }
        } else {
          console.warn('Cannot load feature without geometry.');
          return false;
        }

        if (styleId && (!self.proxy.locationStyleController.arrLocStyles[styleId] || !self.proxy.locationStyleController.arrLocStyles[styleId].style) && $.inArray(styleId, neededStyles) === -1) {
          neededStyles.push(styleId);
        }
      }

      importFeatures = function importFeatures() {
        self.editPointLayer.getSource().addFeatures(points);
        self.editLineLayer.getSource().addFeatures(lines);
        self.editPolygonLayer.getSource().addFeatures(polygons);
        self.editCircleLayer.getSource().addFeatures(circles);
        self.editFreehandLayer.getSource().addFeatures(freehand);
        __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].fitToExtent(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].getExtentForGeometries(points.concat(lines, polygons, circles, freehand)), self.options.mapController.map, [25, 25, 25, self.container.offsetWidth + 25], 1000);
      };

      self.spinner.show();
      if (neededStyles.length > 0) {
        if (!self.proxy) {
          console.warn('Could not load locStyles, as the map-proxy was not initiallized.');
          return false;
        }
        self.proxy.locationStyleController.loadLocationStyles(neededStyles, {
          done: function done() {
            importFeatures();
          },
          always: function always() {
            // Hide loading-animation
            self.spinner.hide();
          }
        });
      } else {
        importFeatures();
        self.spinner.hide();
      }
    } // end of "import"

  });
})(jQuery, this.c4g);

var Editor = this.c4g.maps.control.Editor;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-infopage.js":
/*!*******************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-infopage.js ***!
  \*******************************************************************/
/*! exports provided: Infopage */
/*! exports used: Infopage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Infopage; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {c4g.maps.control.Sideboard}
   *
   * @param  {[type]}  mapController  [description]
   * @param  {[type]}  config         [description]
   */

  c4g.maps.control.Infopage = function (opt_options) {

    // extend options
    this.options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INFOPAGE,
      name: 'infopage',
      headline: langConstants.INFOPAGE,
      create: true,
      mapController: undefined,
      direction: 'left'
    }, opt_options);

    if (!this.options.mapController) {
      return false;
    }

    this.mainSection = document.createElement('div');

    // call parent constructor
    __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Infopage, __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  /**
   * Methods
   */
  c4g.maps.control.Infopage.prototype = $.extend(c4g.maps.control.Infopage.prototype, {

    /**
     * Executed when the panel will be opened for the first time.
     * [init description]
     *
     * @return  {boolean}  Returns |true| on success
     */
    init: function init() {
      //var infoButton;
      var self = this;

      this.spinner.show();

      this.viewInfopage = this.addInfoView();
      this.viewInfopage.activate();

      var proxy = self.options.mapController.proxy;
      var map = self.options.mapController.map;

      this.mainSectionInfo = document.createElement('p');
      this.mainSectionInfo.innerHTML = self.options.mapController.data.infopage;
      this.mainSection.appendChild(this.mainSectionInfo);
      this.contentContainer.setElement(this.mainSection);

      this.spinner.hide();
      return true;
    }, // end of "init()"


    addInfoView: function addInfoView() {
      var infoView;

      infoView = this.addView({
        name: 'info',
        triggerConfig: {
          tipLabel: langConstants.INFOPAGE_VIEW_TRIGGER,
          className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INFOPAGE_VIEW_TRIGGER,
          withHeadline: false
        },
        sectionElements: [{ section: this.contentContainer, element: this.mainSection }, { section: this.topToolbar, element: this.viewTriggerBar }]
      });

      return infoView;
    }, // end of "addInfoView()"

    addInfopage: function addInfopage(options) {
      var self, TRIGGER_INFOPAGE, viewInfopage, source, interaction, features;

      self = this;

      //TRIGGER_INFOPAGE = 'INFOPAGE_VIEW_TRIGGER_' + options.type.toUpperCase();

      viewInfopage = self.addInfopage({
        name: 'Infopage',
        triggerConfig: {
          tipLabel: 'Infopage', //langConstants[TRIGGER_DRAW],
          className: 'c4g_infopage_trigger', //cssConstants[TRIGGER_DRAW]
          withHeadline: false
        },
        sectionElements: [{ section: self.topToolbar, element: self.viewTriggerBar }],
        initFunction: function initFunction() {

          // Show loading animation
          self.spinner.show();

          // printFunction = function (event) {
          //   var infoButton,
          //       featureGeometry,
          //       translateInteraction,
          //       modifyInteraction,
          //       modifyButton,
          //       applyButton;
          //
          //
          //     infoButton = event.target;
          //
          //   // add apply button
          //   applyButton = document.createElement('button');
          //   applyButton.className = cssConstants.ICON + ' ' + cssConstants.EDITOR_FEATURE_APPLY;
          //   applyButton.title = langConstants.EDITOR_FEATURE_APPLY;
          //   applyButton.setAttribute('feat_id', i);
          //
          // }; // end of "modifyFeatureFunction()"

          features = new ol.Collection();

          self.spinner.hide();
          return true;
        },
        activateFunction: function activateFunction() {},
        deactivateFunction: function deactivateFunction() {}
      });

      return viewInfopage;
    } // end of "addInfopage()"

  });
})(jQuery, this.c4g);

var Infopage = this.c4g.maps.control.Infopage;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-measuretools.js":
/*!***********************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-measuretools.js ***!
  \***********************************************************************/
/*! exports provided: Measuretools */
/*! exports used: Measuretools */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Measuretools; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_tooltippopup__ = __webpack_require__(/*! ./c4g-maps-misc-tooltippopup */ "./Resources/public/js/c4g-maps-misc-tooltippopup.js");
// "namespace"

this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};







var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @constructor
   * @extend {c4g.maps.control.Sideboard}
   *
   * @param  {[type]}  mapController  [description]
   */

  c4g.maps.control.Measuretools = function (opt_options) {

    // extend options
    this.options = $.extend({
      name: 'measure',
      headline: langConstants.MEASURETOOLS,
      create: true,
      mapController: undefined,
      direction: 'left',
      firstElement: true
    }, opt_options);

    this.mainSection = document.createElement('div');

    // call parent constructor
    __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Measuretools, __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  /**
   * Methods
   */
  c4g.maps.control.Measuretools.prototype = $.extend(c4g.maps.control.Measuretools.prototype, {

    /**
     * Executed when the panel will be opened for the first time.
     * [init description]
     *
     * @return  {boolean}  Returns |true| on success
     */
    init: function init() {

      this.spinner.show();

      // Add measure layers
      this.measureLineLayer = new ol.layer.Vector({ source: new ol.source.Vector() });
      this.measurePolygonLayer = new ol.layer.Vector({ source: new ol.source.Vector() });
      this.measureCircleLayer = new ol.layer.Vector({ source: new ol.source.Vector() });
      this.measureFreehandLayer = new ol.layer.Vector({ source: new ol.source.Vector() });

      this.measureLayerGroup = new ol.layer.Group({
        layers: new ol.Collection([this.measureFreehandLayer, this.measureCircleLayer, this.measurePolygonLayer, this.measureLineLayer]),
        visible: true
      });
      this.options.mapController.map.addLayer(this.measureLayerGroup);

      // Add and activate measure-Views
      this.viewMeasureSelect = this.addSelectView();
      this.viewMeasureSelect.activate();
      this.viewMeasureLine = this.addMeasureView({ type: 'LineString' });
      this.viewMeasureArea = this.addMeasureView({ type: 'Polygon' });
      this.viewMeasureRadius = this.addMeasureView({ type: 'Circle' });
      this.viewMeasureFreehand = this.addMeasureView({ type: 'Freehand' });

      // set content-section
      this.mainSectionInfo = document.createElement('p');
      this.mainSectionInfo.innerHTML = langConstants.MEASURETOOLS_INFO;
      this.mainSectionInfo.innerHTML += '<br><br><sub>' + langConstants.MEASURETOOLS_INFO_ADDITIONAL + '<sub>';
      this.mainSection.appendChild(this.mainSectionInfo);
      this.contentContainer.appendChild(this.mainSection);

      this.spinner.hide();
      return true;
    }, // end of "init()"

    /**
     * Executed before panel will be closed
     *
     * @return  {[type]}  [description]
     */
    preCloseFunction: function preCloseFunction() {
      var lineFeatures, polygonFeatures, circleFeatures, freehandFeatures, i;

      if (this.measureLayerGroup.getVisible()) {
        this.measureLayerGroup.setVisible(false);

        // hide line-feature tooltips
        lineFeatures = this.measureLineLayer.getSource().getFeatures();
        for (i = 0; i < lineFeatures.length; i += 1) {
          lineFeatures[i].get('tooltip').hide();
        }
        // hide polygon-feature tooltips
        polygonFeatures = this.measurePolygonLayer.getSource().getFeatures();
        for (i = 0; i < polygonFeatures.length; i += 1) {
          polygonFeatures[i].get('tooltip').hide();
        }
        // hide circle-feature tooltips
        circleFeatures = this.measureCircleLayer.getSource().getFeatures();
        for (i = 0; i < circleFeatures.length; i += 1) {
          circleFeatures[i].get('tooltip').hide();
        }
        // hide freehand-feature tooltips
        freehandFeatures = this.measureFreehandLayer.getSource().getFeatures();
        for (i = 0; i < freehandFeatures.length; i += 1) {
          freehandFeatures[i].get('tooltip').hide();
        }
      }
    }, // end of "preCloseFunction()"

    /**
     * Executed before panel will be opened
     *
     * @return  {[type]}  [description]
     */
    preOpenFunction: function preOpenFunction() {
      var lineFeatures, polygonFeatures, circleFeatures, freehandFeatures, i;

      if (!this.measureLayerGroup.getVisible()) {
        this.measureLayerGroup.setVisible(true);

        // show line-feature tooltips
        lineFeatures = this.measureLineLayer.getSource().getFeatures();
        for (i = 0; i < lineFeatures.length; i += 1) {
          lineFeatures[i].get('tooltip').show();
        }
        // show polygon-feature tooltips
        polygonFeatures = this.measurePolygonLayer.getSource().getFeatures();
        for (i = 0; i < polygonFeatures.length; i += 1) {
          polygonFeatures[i].get('tooltip').show();
        }
        // show circle-feature tooltips
        circleFeatures = this.measureCircleLayer.getSource().getFeatures();
        for (i = 0; i < circleFeatures.length; i += 1) {
          circleFeatures[i].get('tooltip').show();
        }
        // show freehand-feature tooltips
        freehandFeatures = this.measureFreehandLayer.getSource().getFeatures();
        for (i = 0; i < freehandFeatures.length; i += 1) {
          freehandFeatures[i].get('tooltip').show();
        }
      }
    }, // end of "preOpenFunction()"

    /**
     * @TODO: [addSelectView description]
     */
    addSelectView: function addSelectView() {
      var selectView;

      selectView = this.addView({
        name: 'select',
        triggerConfig: {
          tipLabel: langConstants.MEASURETOOLS_VIEW_TRIGGER_SELECT,
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].MEASURETOOLS_VIEW_TRIGGER_SELECT,
          withHeadline: true
        },
        sectionElements: [{ section: this.contentContainer, element: this.mainSection }, { section: this.topToolbar, element: this.viewTriggerBar }]
      });

      return selectView;
    }, // end of "addSelectView()"

    /**
     * @TODO: [addMeasureView description]
     *
     * @param  {[type]}  options  [description]
     */
    addMeasureView: function addMeasureView(options) {
      var self, TRIGGER_DRAW, measureView, source, interaction, features, olType;

      self = this;

      options = $.extend({
        type: 'LineString'
      }, options);

      TRIGGER_DRAW = 'MEASURETOOLS_VIEW_TRIGGER_DRAW_' + options.type.toUpperCase();

      measureView = self.addView({
        name: 'draw:' + options.type.toLowerCase(),
        triggerConfig: {
          tipLabel: langConstants[TRIGGER_DRAW],
          className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */][TRIGGER_DRAW],
          withHeadline: true
        },
        sectionElements: [{ section: self.topToolbar, element: self.viewTriggerBar }],
        initFunction: function initFunction() {
          var featureIdCount, activeSketch, activeTooltip, addMeasureFeature, updateMeasureFeature, getValueOfGeometry, getLengthOfMeasure, removeMeasureFeature;

          // Show loading animation
          self.spinner.show();

          featureIdCount = 1;

          if (options.type.toLowerCase() === 'freehand') {
            source = self.measureFreehandLayer.getSource();
          } else if (options.type.toLowerCase() === 'circle') {
            source = self.measureCircleLayer.getSource();
          } else if (options.type.toLowerCase() === 'polygon') {
            source = self.measurePolygonLayer.getSource();
          } else {
            source = self.measureLineLayer.getSource();
          }

          features = new ol.Collection();

          olType = options.type;
          if (olType == 'Freehand') {
            olType = 'LineString';
          }
          interaction = new ol.interaction.Draw({
            features: features,
            source: source,
            type: olType,
            freehand: options.type == 'Freehand'
            // @TODO: use custom style? (BE-option)
            // style: use default style
          });

          addMeasureFeature = function addMeasureFeature(feature) {
            var listElement, headlineElement, labelElement, inputElement, paragraphElement, strongElement, spanElement, strLabel, strType, measureArea, measureRadius;

            if (!feature instanceof ol.Feature) {
              return false;
            }

            // check if the infomessage needs to be removed
            if (self.mainSection.childElementCount === 1 && self.mainSection.children[0] === self.mainSectionInfo) {
              self.mainSection.removeChild(self.mainSectionInfo);
            }

            // check feature-type
            if (feature.getGeometry() instanceof ol.geom.LineString) {
              strLabel = langConstants.LENGTH;
              strType = langConstants.LINE;
              measureArea = false;
              measureRadius = false;
            } else if (feature.getGeometry() instanceof ol.geom.Polygon) {
              strLabel = langConstants.PERIMETER;
              strType = langConstants.POLYGON;
              measureArea = true;
              measureRadius = false;
            } else if (feature.getGeometry() instanceof ol.geom.Circle) {
              strLabel = langConstants.RADIUS;
              strType = langConstants.CIRCLE;
              measureArea = true;
              measureRadius = true;
            } else {
              //freehand ist LineString too
              strLabel = langConstants.LENGTH;
              strType = langConstants.FREEHAND;
              measureArea = false;
              measureRadius = false;
            }

            // create list element
            listElement = document.createElement('div');

            // create and append headline
            headlineElement = document.createElement('div');
            headlineElement.className = 'c4g_maps_portside_measure_element';
            if (self.options.firstElement) {
              headlineElement.className = 'c4g_maps_portside_measure_element c4g_maps_portside_measure_element_first';
              self.options.firstElement = false;
            }
            listElement.appendChild(headlineElement);

            // create and append label for name-inputfield
            labelElement = document.createElement('label');
            labelElement.setAttribute('for', 'measureElement_' + featureIdCount);
            labelElement.innerHTML = langConstants.NAME + ': ';
            headlineElement.appendChild(labelElement);

            // create and append name-inputfield
            inputElement = document.createElement('input');
            inputElement.type = 'text';
            inputElement.name = 'measureElement_' + featureIdCount;
            inputElement.value = strType + ' ' + featureIdCount;
            // attach-change-handler
            $(inputElement).change(function (event) {
              updateMeasureFeature(feature);
            });
            headlineElement.appendChild(inputElement);
            feature.set('listElementValueName', inputElement);

            // create and append paragraphs
            paragraphElement = document.createElement('p');
            paragraphElement.className = 'c4g_maps_portside_measure_paragraph';
            strongElement = document.createElement('strong');
            strongElement.innerHTML = strLabel + ': ';
            paragraphElement.appendChild(strongElement);
            spanElement = document.createElement('span');
            spanElement.innerHTML = '...';
            paragraphElement.appendChild(spanElement);
            listElement.appendChild(paragraphElement);
            feature.set('listElementValueLine', spanElement);

            if (measureArea) {
              paragraphElement = document.createElement('p');
              paragraphElement.className = 'c4g_maps_portside_measure_paragraph_surfacearea';
              strongElement = document.createElement('strong');
              strongElement.innerHTML = langConstants.SURFACEAREA + ': ';
              paragraphElement.appendChild(strongElement);
              spanElement = document.createElement('span');
              spanElement.innerHTML = '...';
              paragraphElement.appendChild(spanElement);
              listElement.appendChild(paragraphElement);
              feature.set('listElementValueArea', spanElement);
            }

            if (measureRadius) {
              // paragraphElement = document.createElement('p');
              // paragraphElement.className = 'c4g_maps_portside_measure_paragraph_surfacearea';
              // strongElement = document.createElement('strong');
              // strongElement.innerHTML = langConstants.SURFACEAREA + ': ';
              // paragraphElement.appendChild(strongElement);
              // spanElement = document.createElement('span');
              // spanElement.innerHTML = '...';
              // paragraphElement.appendChild(spanElement);
              // listElement.appendChild(paragraphElement);
              feature.set('listElementValueRadius', spanElement);
            }

            // increase the id-counter
            featureIdCount += 1;

            // append element to the list
            self.mainSection.appendChild(listElement);
            // attach element to the feature
            feature.set('listElement', listElement);

            self.update();
          }; // end of "addMeasureFeature()"

          updateMeasureFeature = function updateMeasureFeature(feature) {
            var featureTooltip, newContent, name, length, area, radius;

            featureTooltip = feature.get('tooltip');
            name = feature.get('listElementValueName').value;
            length = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry(), true);
            newContent = '<strong>' + name + '</strong><br>';

            feature.set('measuredLength', length);
            feature.get('listElementValueLine').innerHTML = length.htmlValue;
            if (feature.get('geometryType') === 'circle') {
              radius = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry());
              feature.set('measuredRadius', radius);
              feature.get('listElementValueRadius').innerHTML = radius.htmlValue;
              newContent += radius.htmlValue;

              area = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry(), false, true);
              feature.set('measuredArea', area);
              feature.get('listElementValueArea').innerHTML = area.htmlValue;
              // newContent += area.htmlValue;
            } else if (feature.get('geometryType') === 'polygon') {
              area = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry());
              feature.set('measuredArea', area);
              feature.get('listElementValueArea').innerHTML = area.htmlValue;
              newContent += area.htmlValue;
            } else {
              newContent += length.htmlValue;
            }
            featureTooltip.setContent(newContent);
          }; // end of "updateMeasureFeature()"

          removeMeasureFeature = function removeMeasureFeature(feature) {
            self.mainSection.removeChild(feature.get('listElement'));

            // last element? -> add infomessage
            if (self.mainSection.childElementCount < 1) {
              self.mainSection.appendChild(self.mainSectionInfo);
              self.update();
            }
          }; // end of "removeMeasureFeature()"

          //Start Workaround
          getValueOfGeometry = function getValueOfGeometry(feature) {
            var leng = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_utils__["a" /* utils */].measureGeometry(feature.getGeometry(), true);
            // feature.set('measuredLength', length);
            var val = leng.htmlValue;
            var valuenumb = val.match(/\d/g);
            valuenumb = valuenumb.join("");
            return valuenumb;
          };

          getLengthOfMeasure = function getLengthOfMeasure() {
            var length = '0.00 m';
            var lengthnumb = length.match(/\d/g);
            lengthnumb = lengthnumb.join("");
            lengthnumb = +8;
            return lengthnumb;
          }; // End Workaround

          interaction.on('drawstart', function (event) {
            activeSketch = event.feature;
            // create tooltip
            activeTooltip = new __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
              map: self.options.mapController.map,
              position: event.coordinate,
              horizontal: true,
              closeable: true,
              closeFunction: function closeFunction() {
                //Workaround, for small or zero values of Freehand
                var val = getValueOfGeometry(event.feature);
                var leng = getLengthOfMeasure();
                if (val != leng && val > leng) {
                  removeMeasureFeature(event.feature);
                  source.removeFeature(event.feature);
                } else {
                  removeMeasureFeature(event.feature);
                }
              }
            });

            activeSketch.set('tooltip', activeTooltip);
            activeSketch.set('geometryType', options.type.toLowerCase());
            addMeasureFeature(activeSketch);
          }, self);

          self.options.mapController.map.on('pointermove', function (event) {
            if (activeSketch && activeTooltip) {
              activeTooltip.setPosition(event.coordinate);
              updateMeasureFeature(activeSketch);
            }
          }, self);

          interaction.on('drawend', function (event) {
            if (activeSketch && activeTooltip) {
              updateMeasureFeature(activeSketch);
              activeSketch = null;
              activeTooltip = null;
            }
          }, self);

          self.spinner.hide();
          return true;
        },
        activateFunction: function activateFunction() {

          // disable mapHover
          self.options.mapController.mapHover.deactivate();

          features.clear();

          // Enable interaction
          self.options.mapController.map.addInteraction(interaction);
        },
        deactivateFunction: function deactivateFunction() {

          // reactivate mapHover
          self.options.mapController.mapHover.activate();

          if (options.type.toLowerCase() !== 'point') {
            try {
              interaction.finishDrawing();
            } catch (ignore) {
              // 0_o
            }
          }

          // Remove from map
          self.options.mapController.map.removeInteraction(interaction);
        }
      });

      return measureView;
    } // end of "addMeasureView()"

  });
})(jQuery, this.c4g);

var Measuretools = this.c4g.maps.control.Measuretools;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-portside-router.js":
/*!*****************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-portside-router.js ***!
  \*****************************************************************/
/*! exports provided: Router */
/*! exports used: Router */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Router; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"

this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};






var langConstants = {};

if (typeof mapData !== "undefined") {
    if (mapData.lang === "de") {
        langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
    } else if (mapData.lang === "en") {
        langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
    } else {
        // fallback
        langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
    }
}

(function ($, c4g) {
    'use strict';

    /**
     * Constructor
     *
     * @extends {c4g.maps.control.Sideboard}
     *
     * @param  {[type]}  mapController  [description]
     * @param  {[type]}  config         [description]
     */

    c4g.maps.control.Router = function (opt_options) {

        // extend options
        this.options = $.extend({
            name: 'router',
            create: true,
            mapController: undefined,
            headline: langConstants.ROUTER,
            direction: 'left'
        }, opt_options);

        if (!this.options.mapController) {
            return false;
        }
        this.index = 0;

        // call parent constructor
        __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
    };

    /**
     * Inherit from "Sideboard"
     */
    ol.inherits(c4g.maps.control.Router, __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */]);

    /**
     * Methods
     */
    c4g.maps.control.Router.prototype = $.extend(c4g.maps.control.Router.prototype, {

        init: function init() {

            var self, viewRouter, selectInteraction, profileId;

            self = this;
            this.spinner.show();

            // check and load location styles via map-proxy
            this.options.mapController.proxy.locationStyleController.loadLocationStyles([this.options.mapController.data.router_from_locstyle, this.options.mapController.data.router_to_locstyle, this.options.mapController.data.router_point_locstyle]);

            // Add router layer(s)
            this.routingAltWaySource = new ol.source.Vector();
            this.routingWaySource = new ol.source.Vector();
            this.routerWayLayer = new ol.layer.Vector({
                source: this.routingWaySource,
                zIndex: 1,
                style: [new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255, 255, 255, 0.6)',
                        width: 8
                    })
                }), new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(0, 51, 119, 0.9)',
                        width: 4
                    })
                })]
            });
            this.routerAltWayLayer = new ol.layer.Vector({
                source: this.routingAltWaySource,
                zIndex: 0,
                style: [new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255, 255, 255, 0.6)',
                        width: 8
                    })
                }), new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(0, 51, 119, 0.4)',
                        width: 4
                    })
                })]
            });

            selectInteraction = new ol.interaction.Select({
                style: [new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255, 255, 255, 0.0)',
                        width: 8
                    })
                }), new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255, 51, 119, 0.0)',
                        width: 4
                    })
                })]

            });
            selectInteraction.on('select', function (event) {

                if (event.selected[0]) {
                    var geometry = event.selected[0].getGeometry();
                    if (geometry && geometry instanceof ol.geom.LineString) {
                        self.showAltRoute(self.response, event.selected[0].getId());
                    }
                }
            });

            self.options.mapController.map.addInteraction(selectInteraction);

            this.routingHintSource = new ol.source.Vector();
            this.routerHintLayer = new ol.layer.Vector({
                source: this.routingHintSource,
                style: function style(feature, resolution) {
                    // console.log(self.proxy.locationStyleController.arrLocStyles[self.options.mapController.data.router_point_locstyle].style);
                    return !self.options.mapController.proxy || self.options.mapController.proxy.locationStyleController.arrLocStyles[self.options.mapController.data.router_point_locstyle].style(feature, resolution);
                }
            });

            this.locationsSource = new ol.source.Vector();
            this.locationsLayer = new ol.layer.Vector({
                source: this.locationsSource,
                zIndex: 2
            });

            this.routerLayerGroup = new ol.layer.Group({
                layers: new ol.Collection([this.routerWayLayer, this.routerAltWayLayer, this.locationsLayer, this.routerHintLayer]),
                visible: true
            });
            this.options.mapController.map.addLayer(this.routerLayerGroup);

            viewRouter = this.addUserInterface();
            viewRouter.activate();

            // store some vars for ajax-requests
            profileId = this.options.mapController.data.profile;
            this.geoSearchApi = this.options.mapController.data.api.geosearch + '/' + profileId;
            this.geoReverseSearchApi = this.options.mapController.data.api.geosearch_reverse + '/' + profileId;
            this.routingApi = this.options.mapController.data.api.routing + '/' + profileId;

            this.spinner.hide();

            return true;
        },

        preOpenFunction: function preOpenFunction(opt_options) {

            this.addMapInputInteraction();

            if (opt_options && opt_options.toLonLat) {
                this.performReverseSearch(this.$toInput, opt_options.toLonLat);
                this.toValue = new ol.geom.Point([opt_options.toLonLat[1], opt_options.toLonLat[0]]);
                this.recalculateRoute();
            }
        },

        preHideFunction: function preHideFunction() {
            this.removeMapInputInteraction();
        },

        preCloseFunction: function preCloseFunction() {

            this.routingWaySource.clear();
            this.routingAltWaySource.clear();
            this.routingHintSource.clear();
            this.locationsSource.clear();

            $(this.routerInstructionsWrapper).empty();
            this.clearInput(this.$fromInput);
            if (this.overValue) {
                for (var id in this.overValue) {
                    this.clearOver(this.$overInput, id);
                    var elem = document.getElementById(id);
                    if (elem) {
                        elem.parentNode.parentNode.removeChild(elem.parentNode);
                    }
                }
            }
            this.clearInput(this.$toInput);

            this.removeMapInputInteraction();
        },

        removeMapInputInteraction: function removeMapInputInteraction() {

            var self = this;
            this.options.mapController.map.un('click', self.fnMapRouterInteraction);
        },

        addMapInputInteraction: function addMapInputInteraction() {

            var self = this,
                coordinate;

            self.fnMapRouterInteraction = function (evt) {

                coordinate = ol.proj.toLonLat(evt.coordinate);

                if (self.$fromInput.val() === "") {
                    //self.$fromInput.val(ol.proj.toLonLat(evt.coordinate));
                    self.performReverseSearch(self.$fromInput, coordinate);
                    self.fromValue = new ol.geom.Point(coordinate);
                    self.recalculateRoute();

                    //self.$fromInput.trigger('change');
                } else if (self.$toInput.val() === "") {
                    //self.$toInput.val(ol.proj.toLonLat(evt.coordinate));
                    self.performReverseSearch(self.$toInput, coordinate);
                    self.toValue = new ol.geom.Point(coordinate);
                    self.recalculateRoute();
                } else if (self.$overInput) {
                    if (self.$overInput.val() === "") {
                        self.performReverseSearch(self.$overInput, coordinate);
                        if (!self.overValue) {
                            self.overValue = {};
                        }
                        self.overValue[self.index] = new ol.geom.Point(coordinate);
                        self.recalculateRoute();
                        self.$buttonOver.prop("disabled", false);
                    }
                }
            };

            this.options.mapController.map.on('click', self.fnMapRouterInteraction);
            if (self.options.mapController.map.getInteractions().getArray()['9']) {
                self.options.mapController.map.getInteractions().getArray()['9'].setActive(true);
            } else {
                self.options.mapController.map.getInteractions().getArray()['8'].setActive(true);
            }
        },

        addUserInterface: function addUserInterface() {
            var _this = this;

            var self = void 0,
                routerView = void 0,
                routerViewInputWrapper = void 0,
                routerViewContentWrapper = void 0,
                routerViewContentHeadline = void 0,
                print = void 0,
                routeProfile = [],
                routerFromLabel = void 0,
                routerOverLabel = void 0,
                routerToLabel = void 0,
                routerFromClear = void 0,
                routerOverClear = void 0,
                routerToClear = void 0,
                switchFromTo = void 0,
                buttonOver = void 0;

            self = this;

            routerViewInputWrapper = document.createElement('div');
            routerViewContentWrapper = document.createElement('div');

            self.routerViewContentWrapper = routerViewContentWrapper;

            // @TODO: Add router-info-text
            // routerViewContentHeadline = document.createElement('h4');
            // routerViewContentHeadline.innerHTML = langConstants.ROUTER_VIEW_ADDRESS_INPUT;
            // routerViewContentWrapper.appendChild(routerViewContentHeadline);

            this.fromInputWrapper = document.createElement('div');
            this.fromInputWrapper.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_WRAPPER;

            this.fromInput = document.createElement("input");
            this.fromInput.type = "text";
            this.fromInput.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_FROM;
            this.fromInput.id = this.fromInput.name = "routingFrom";

            routerFromLabel = document.createElement('label');
            routerFromLabel.setAttribute('for', 'routingFrom');
            routerFromLabel.innerHTML = langConstants.ROUTER_FROM_LABEL;

            routerFromClear = document.createElement('button');
            routerFromClear.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_CLEAR;
            routerFromClear.title = langConstants.ROUTER_CLEAR_TITLE;
            routerFromClear.innerHTML = langConstants.ROUTER_CLEAR_HTML;
            this.$routerFromClear = $(routerFromClear);

            switchFromTo = document.createElement('button');
            switchFromTo.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_SWITCH;
            switchFromTo.title = langConstants.ROUTER_SWITCH;
            this.$switchFromTo = $(switchFromTo);

            buttonOver = document.createElement('button');
            buttonOver.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_OVER;
            buttonOver.title = langConstants.ROUTER_OVER;
            this.$buttonOver = $(buttonOver);

            print = document.createElement('button');
            print.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PRINT;
            print.title = langConstants.ROUTER_PRINT;
            this.$print = $(print);

            this.routerButtonBar = document.createElement('div');
            this.routerButtonBar.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_BUTTONBAR;
            this.routerButtonBar.appendChild(switchFromTo);
            this.routerButtonBar.appendChild(buttonOver);
            this.routerButtonBar.appendChild(print);

            // $(print).insertBefore(document.getElementsByClassName("c4g-portside-hide")[0]);

            if (this.options.mapController.data.router_api_selection == '2') {
                //OpenRouteService
                if (Object.keys(this.options.mapController.data.router_profiles).length == 1) {
                    //check for single profile and set this as  active routing profile
                    this.routeProfile = [];
                    this.routeProfile.active = Object.keys(this.options.mapController.data.router_profiles)[0];
                } else if (Object.keys(this.options.mapController.data.router_profiles).length > 1) {
                    //check for multiple profiles and add profile-changer
                    this.routeProfile = document.createElement('div');
                    $(this.routeProfile).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_WRAPPER);
                    if (this.options.mapController.data.router_profiles['0']) {
                        //add button for profile driving-car
                        routeProfile.car = document.createElement('button');
                        $(routeProfile.car).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_CAR);
                        this.$routeProfileCar = $(routeProfile.car);
                        this.routeProfile.appendChild(routeProfile.car);
                        this.$routeProfileCar.click(function (event) {
                            self.clearSiblings(this);
                            self.routeProfile.active = '0';
                            self.recalculateRoute();
                        });
                    }

                    if (this.options.mapController.data.router_profiles['1']) {
                        //add button for profile driving-hgv
                        routeProfile.hgv = document.createElement('button');
                        $(routeProfile.hgv).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_HGV);
                        this.routeProfile.appendChild(routeProfile.hgv);
                        this.$routeProfileHgv = $(routeProfile.hgv);

                        this.$routeProfileHgv.click(function (event) {
                            self.clearSiblings(this);
                            self.routeProfile.active = '1';
                            self.recalculateRoute();
                        });
                    }
                    if (this.options.mapController.data.router_profiles['2'] || this.options.mapController.data.router_profiles['3'] || this.options.mapController.data.router_profiles['4'] || this.options.mapController.data.router_profiles['5'] || this.options.mapController.data.router_profiles['6'] || this.options.mapController.data.router_profiles['7']) {
                        //add button and dropdown for cycling profiles
                        var spanBike = document.createElement('span');
                        routeProfile.bike = document.createElement('button');
                        routeProfile.bike.list = document.createElement('ul');
                        this.$routeProfileBike = $(routeProfile.bike);
                        for (var i = 2; i < 8; i++) {
                            //iterate over all possible cycling profiles
                            if (this.options.mapController.data.router_profiles[i]) {
                                (function () {
                                    var child = document.createElement('li');
                                    child.innerHTML = _this.options.mapController.data.router_profiles[i];
                                    $(child).data('profile', [i]);
                                    $(child).click(function (event) {
                                        self.childClick($(child));
                                    });
                                    if (!_this.$routeProfileBike.data('profile')) {
                                        //add existing default profile to button
                                        _this.$routeProfileBike.data('profile', i);
                                        $(child).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                                    }
                                    routeProfile.bike.list.appendChild(child);
                                })();
                            }
                        }

                        $(routeProfile.bike).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_BIKE);

                        if (routeProfile.bike.list.children.length == 1) {
                            //ignore dropdown list, if only one cycling profile is enabled
                            this.routeProfile.appendChild(routeProfile.bike);
                            this.$routeProfileBike.click(function (event) {
                                self.clearSiblings(this);
                                self.routeProfile.active = $(this).data('profile');
                                self.recalculateRoute();
                            });
                        } else {
                            //append with dropdown, if multiple cycling profiles are enabled
                            spanBike.appendChild(routeProfile.bike);
                            spanBike.appendChild(routeProfile.bike.list);
                            this.routeProfile.appendChild(spanBike);
                            this.$routeProfileBike.click(function (event) {
                                self.clearSiblings($(this).parent());
                                self.routeProfile.active = $(this).data('profile');
                                self.recalculateRoute();
                            });
                        }
                    }
                    if (this.options.mapController.data.router_profiles['8'] || this.options.mapController.data.router_profiles['9']) {
                        //add button and dropdown for walking profiles
                        var spanFoot = document.createElement('span');
                        routeProfile.foot = document.createElement('button');
                        routeProfile.foot.list = document.createElement('ul');
                        this.$routeProfileFoot = $(routeProfile.foot);
                        for (var _i = 8; _i < 10; _i++) {
                            //iterate over possible profiles
                            if (this.options.mapController.data.router_profiles[_i]) {
                                var child = document.createElement('li');
                                child.innerHTML = this.options.mapController.data.router_profiles[_i];
                                $(child).data('profile', [_i]);
                                $(child).click(function (event) {
                                    self.childClick($(this));
                                });
                                if (!this.$routeProfileFoot.data('profile')) {
                                    //add existing default profile to button
                                    this.$routeProfileFoot.data('profile', _i);
                                    $(child).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                                }
                                routeProfile.foot.list.appendChild(child);
                            }
                        }

                        $(routeProfile.foot).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_FOOT);

                        if (routeProfile.foot.list.children.length == 1) {
                            //ignore dropdown list, if only one walking profile is enabled
                            this.routeProfile.appendChild(routeProfile.foot);
                            this.$routeProfileFoot.click(function (event) {
                                self.clearSiblings(this);
                                self.routeProfile.active = $(this).data('profile');
                                self.recalculateRoute();
                            });
                        } else {
                            //append with dropdown, if multiple walking profiles are enabled
                            spanFoot.appendChild(routeProfile.foot);
                            spanFoot.appendChild(routeProfile.foot.list);
                            this.routeProfile.appendChild(spanFoot);
                            this.$routeProfileFoot.click(function (event) {
                                self.clearSiblings($(this).parent());
                                self.routeProfile.active = $(this).data('profile');
                                self.recalculateRoute();
                            });
                        }
                    }
                    if (this.options.mapController.data.router_profiles['10']) {
                        //add button for profile wheelchair
                        routeProfile.wheelchair = document.createElement('button');
                        $(routeProfile.wheelchair).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_PROFILE_WHEELCHAIR);
                        this.$routeProfileWheelchair = $(routeProfile.wheelchair);
                        this.routeProfile.appendChild(routeProfile.wheelchair);
                        this.$routeProfileWheelchair.click(function (event) {
                            self.clearSiblings(this);
                            self.routeProfile.active = '10';
                            self.recalculateRoute();
                        });
                    }
                    this.childClick = function ($element) {
                        //handle the click inside the profile dropdown
                        self.routeProfile.active = $element.data('profile'); //activate selected profile
                        self.clearSiblings($element);
                        self.recalculateRoute(); //update the route
                    };
                    this.clearSiblings = function (element) {
                        //function to adjust css-classes after changing profile
                        var siblings = $(element).parent().children();
                        for (var _i2 = 0; _i2 < siblings.length; _i2++) {
                            $(siblings[_i2]).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                        }
                        $(element).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                    };
                    for (var profile in this.options.mapController.data.router_profiles) {
                        //set default value for initial routing
                        if (this.options.mapController.data.router_profiles.hasOwnProperty(profile)) {
                            this.routeProfile.active = profile;
                            break;
                        }
                    }
                } else {
                    console.warn('No Router Profiles enabled');
                }
            }

            this.fromInputWrapper.appendChild(routerFromLabel);
            this.fromInputWrapper.appendChild(this.fromInput);
            this.fromInputWrapper.appendChild(routerFromClear);
            if (buttonOver && this.options.mapController.data.router_api_selection == '0') {
                this.$buttonOver.hide();
            }

            this.$routerFromClear.hide();

            this.$routerFromClear.click(function (event) {
                event.preventDefault();
                self.clearInput(self.$fromInput);
            });

            this.$buttonOver.click(function (event) {
                event.preventDefault();
                self.index++;
                self.$buttonOver.prop("disabled", true);

                self.overInputWrapper = document.createElement('div');
                self.overInputWrapper.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_WRAPPER;

                self.overInput = document.createElement("input");
                self.overInput.type = "text";
                self.overInput.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_FROM;
                self.overInput.id = self.overInput.name = "routingOver";

                routerOverLabel = document.createElement('label');
                routerOverLabel.setAttribute('for', 'routingFrom');
                routerOverLabel.innerHTML = langConstants.ROUTER_Label_Interim;

                routerOverClear = document.createElement('button');
                routerOverClear.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_CLEAR;
                routerOverClear.title = langConstants.ROUTER_CLEAR_TITLE;
                routerOverClear.innerHTML = langConstants.ROUTER_CLEAR_HTML;
                routerOverClear.id = self.index;
                self.$routerOverClear = $(routerOverClear);

                self.overInputWrapper.appendChild(routerOverLabel);
                self.overInputWrapper.appendChild(self.overInput);
                self.overInputWrapper.appendChild(routerOverClear);

                routerViewInputWrapper.appendChild(self.overInputWrapper);
                self.$routerOverClear.click(function (event) {
                    event.preventDefault();
                    self.clearOver(self.$overInput, this.id);
                    $(this).parent().remove();
                    //buttonOver.show();
                });
                self.$overInput = $(self.overInput);
                self.$overInput.on('change', function () {
                    self.performSearch(self.$overInput, "overValue");
                    self.recalculateRoute();
                });
            });

            this.$switchFromTo.click(function (event) {
                event.preventDefault();
                var switchVarName = document.getElementById("routingFrom").value;
                document.getElementById("routingFrom").value = document.getElementById("routingTo").value;
                document.getElementById("routingTo").value = switchVarName;
                var switchVarVal = self.fromValue;
                self.fromValue = self.toValue;
                self.toValue = switchVarVal;
                self.recalculateRoute();
            });
            this.$print.click(function (event) {
                event.preventDefault();
                var routingContent = document.getElementsByClassName("c4g-router-instructions-wrapper")[0];
                if (!routingContent) return;
                var WinPrint = window.open('', '', 'left=0,top=0,width=800,height=900,toolbar=0,scrollbars=0,status=0');
                WinPrint.document.write(routingContent.innerHTML);
                WinPrint.document.close();
                WinPrint.focus();
                WinPrint.print();
                WinPrint.close();
            });

            this.$fromInput = $(this.fromInput);
            this.$fromInput.on('change', function () {
                self.performSearch(self.$fromInput, "fromValue");
                self.recalculateRoute();
                if (self.$fromInput.val() !== "") {
                    self.$routerFromClear.show();
                } else {
                    self.$routerFromClear.hide();
                }
            });

            routerViewInputWrapper.appendChild(this.routerButtonBar);
            if (this.routeProfile && this.routeProfile.children) {
                routerViewInputWrapper.appendChild(this.routeProfile);
            }
            routerViewInputWrapper.appendChild(this.fromInputWrapper);

            this.toInputWrapper = document.createElement('div');
            this.toInputWrapper.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_WRAPPER;

            this.toInput = document.createElement("input");
            this.toInput.type = "text";
            this.toInput.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_TO;
            this.toInput.id = this.toInput.name = "routingTo";

            routerToLabel = document.createElement('label');
            routerToLabel.setAttribute('for', 'routingTo');
            routerToLabel.innerHTML = langConstants.ROUTER_TO_LABEL;

            routerToClear = document.createElement('button');
            routerToClear.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INPUT_CLEAR;
            routerToClear.title = langConstants.ROUTER_CLEAR_TITLE;
            routerToClear.innerHTML = langConstants.ROUTER_CLEAR_HTML;
            this.$routerToClear = $(routerToClear);

            this.toInputWrapper.appendChild(routerToLabel);
            this.toInputWrapper.appendChild(this.toInput);
            this.toInputWrapper.appendChild(routerToClear);

            this.$routerToClear.hide();

            self.$routerToClear.click(function (event) {
                event.preventDefault();
                self.clearInput(self.$toInput);
            });

            this.$toInput = $(this.toInput);
            this.$toInput.on('change', function () {
                self.performSearch(self.$toInput, "toValue");
                self.recalculateRoute();
                if (self.$toInput.val() !== "") {
                    self.$routerToClear.show();
                } else {
                    self.$routerToClear.hide();
                }
            });

            routerViewInputWrapper.appendChild(this.toInputWrapper);

            self.statusBar.appendChild(this.getAttribution());

            routerView = this.addView({
                name: 'router-view',
                triggerConfig: {
                    tipLabel: langConstants.ROUTER_VIEW_ADDRESS_INPUT,
                    className: __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_VIEW_ADDRESS_INPUT,
                    withHeadline: false
                },
                sectionElements: [{ section: this.topToolbar, element: routerViewInputWrapper }, { section: this.contentContainer, element: routerViewContentWrapper }]
            });

            return routerView;
        },

        setInput: function setInput(from, coordinate) {
            // perform geoSearch on given location
            // fill from/to field
            //

            if (!coordinate) {
                return false;
            }

            coordinate = ol.proj.toLonLat(coordinate);

            if (from) {
                this.performReverseSearch(this.$fromInput, coordinate);
                this.recalculateRoute();
                this.fromValue = new ol.geom.Point(coordinate);

                //this.$fromInput.trigger('change');
            } else {
                this.performReverseSearch(this.$toInput, coordinate);
                this.recalculateRoute();
                this.toValue = new ol.geom.Point(coordinate);
            }

            this.recalculateRoute();
        },

        getAttribution: function getAttribution() {
            var self = this,
                attributionSearch = void 0,
                attributionRouter = void 0,
                attributionRouterHost = void 0,
                attributionWrapper = void 0,
                attributionHtml = void 0;
            switch (self.options.mapController.data.router_api_selection) {
                case "0":
                    attributionRouter = '<a target="_blank" href="http://project-osrm.org/">Project OSRM</a>';
                    break;
                case "1":
                    attributionRouter = '<a target="_blank" href="http://project-osrm.org/">Project OSRM</a>';
                    break;
                case "2":
                    attributionRouter = '<a target="_blank" href="https://openrouteservice.org/">openrouteservice</a>';
                    break;
            }
            switch (self.options.mapController.data.geosearch.geosearch_engine) {
                case "1":
                    //OSM
                    attributionSearch = '- Geocoder by <a target="_blank" href="https://nominatim.openstreetmap.org/">OpenStreetMap</a> ';
                    break;
                case "2":
                    //Mapquest
                    attributionSearch = '- Geocoder by <a target="_blank" href="http://www.mapquest.com/">MapQuest</a> ';
                    break;
                case "3":
                    //custom
                    attributionSearch = '- Nominatim-Geocoder ';
                    break;
                case "4":
                    //con4gis
                    attributionSearch = '- Geocoder by <a target="_blank" href="https://www.con4gis.org/kartendienste.html">con4gis</a> ';
                    break;
            }
            switch (self.options.mapController.data.router_api_selection) {
                case "0":
                    attributionRouterHost = '- OSRM hosting by <a target="_blank" href="http://algo2.iti.kit.edu/">KIT</a>';
                    break;
                case "1":
                    attributionRouterHost = '- OSRM hosting by <a target="_blank" href="http://algo2.iti.kit.edu/">KIT</a>';
                    break;
                case "2":
                    attributionRouterHost = '\'- ORS hosting by <a target="_blank" href="https://www.geog.uni-heidelberg.de/gis/heigit_en.html">HeiGIT</a>\'';
                    break;
            }

            //ToDo check params
            attributionHtml = attributionRouter + attributionSearch + attributionRouterHost;
            attributionWrapper = document.createElement('div');
            attributionWrapper.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_ATTRIBUTION_WRAPPER;

            attributionWrapper.innerHTML = attributionHtml;

            if (self.options.mapController.data.router_attribution) {
                attributionWrapper.innerHTML = self.options.mapController.data.router_attribution;
            }

            return attributionWrapper;
        },

        recalculateRoute: function recalculateRoute() {
            var tmpFeature,
                proxy = this.options.mapController.proxy;

            this.locationsSource.clear();
            if (this.fromValue) {
                tmpFeature = new ol.Feature({
                    geometry: this.fromValue.clone().transform('EPSG:4326', 'EPSG:3857')
                });
                if (this.options.mapController.data.router_from_locstyle && proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_from_locstyle]) {
                    tmpFeature.setStyle(proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_from_locstyle].style);
                }
                this.locationsSource.addFeature(tmpFeature);
            }
            if (this.toValue) {
                tmpFeature = new ol.Feature({
                    geometry: this.toValue.clone().transform('EPSG:4326', 'EPSG:3857')
                });
                if (this.options.mapController.data.router_to_locstyle && proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_to_locstyle]) {
                    tmpFeature.setStyle(proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_to_locstyle].style);
                }
                this.locationsSource.addFeature(tmpFeature);
            }
            if (this.overValue) {
                for (var propt in this.overValue) {
                    tmpFeature = new ol.Feature({
                        geometry: this.overValue[propt].clone().transform('EPSG:4326', 'EPSG:3857')
                    });
                    if (this.options.mapController.data.router_interim_locstyle && proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_interim_locstyle]) {
                        tmpFeature.setStyle(proxy.locationStyleController.arrLocStyles[this.options.mapController.data.router_interim_locstyle].style);
                    }
                    this.locationsSource.addFeature(tmpFeature);
                }
            }
            if (this.fromValue && this.toValue) {
                if (this.overValue) {
                    this.performViaRoute(this.fromValue, this.toValue, this.overValue);
                } else {
                    this.performViaRoute(this.fromValue, this.toValue);
                }
            }
        },

        performViaRoute: function performViaRoute(fromPoint, toPoint, overPoint) {

            var url, self, fromCoord, toCoord, overCoord;

            self = this;

            fromCoord = [fromPoint.getCoordinates()[1], fromPoint.getCoordinates()[0]];
            toCoord = [toPoint.getCoordinates()[1], toPoint.getCoordinates()[0]];
            if (overPoint) {
                overCoord = new Array();
                for (var propt in overPoint) {
                    overCoord.push([overPoint[propt].getCoordinates()[1], overPoint[propt].getCoordinates()[0]]);
                }
            }
            if (this.options.mapController.data.router_api_selection == '1' || this.options.mapController.data.router_api_selection == '2') {
                //OSRM-API:5.x or ORS- API
                url = self.routingApi + '/' + fromCoord;

                if (overPoint) {
                    for (var i = 0; i < overCoord.length; i++) {
                        url += '/' + overCoord[i];
                    }
                }
                url += '/' + toCoord;
                if (this.routeProfile && this.routeProfile.active) {
                    url += '?profile=' + this.routeProfile.active;
                }
                this.spinner.show();

                jQuery.ajax({
                    'url': url }).done(function (response) {
                    self.response = response;
                    if (response) {
                        self.showRoute(response);
                    }
                }).always(function () {
                    self.spinner.hide();
                    self.update();
                });

                return '';
            } else {
                //OSRM-API:<5
                url = self.routingApi + '?output=json&instructions=true&alt=false&loc_from=' + fromCoord + '&loc_to=' + toCoord;
                this.spinner.show();

                jQuery.ajax({
                    'url': url }).done(function (response) {

                    if (response) {
                        self.showRoute(response);
                    }
                }).always(function () {
                    self.spinner.hide();
                    self.update();
                });

                return '';
            }
        },

        showRoute: function showRoute(routeResponse) {

            this.showRouteLayer(routeResponse, 0);
            this.showRouteInstructions(routeResponse, 0);
        },
        showAltRoute: function showAltRoute(routeResponse, routeNumber) {
            this.showRouteLayer(routeResponse, routeNumber);
            this.showRouteInstructions(routeResponse, routeNumber);
        },

        showRouteLayer: function showRouteLayer(routeResponse, routeNumber) {

            var mapView,
                wayPolyline,
                routeFeatures,
                altRouteFeatures,
                rightPadding,
                leftPadding,
                routeNumber = routeNumber || 0;

            if (routeResponse) {
                this.routingWaySource.clear();
                this.routingAltWaySource.clear();
                mapView = this.options.mapController.map.getView();

                if (this.options.mapController.data.router_api_selection == '1' || this.options.mapController.data.router_api_selection == '2') {
                    //OSRM-API:5.x
                    wayPolyline = new ol.format.Polyline();

                    // add route

                    if (routeResponse.routes && routeResponse.routes[1]) {
                        //check for alternative route
                        if (routeNumber == 1) {
                            altRouteFeatures = wayPolyline.readFeatures(routeResponse.routes[0].geometry, {
                                dataProjection: 'EPSG:4326',
                                featureProjection: mapView.getProjection()
                            });
                            altRouteFeatures[0].setId(0);
                        } else {
                            altRouteFeatures = wayPolyline.readFeatures(routeResponse.routes[1].geometry, {
                                dataProjection: 'EPSG:4326',
                                featureProjection: mapView.getProjection()
                            });
                            altRouteFeatures[0].setId(1);
                        }
                    }
                    routeFeatures = wayPolyline.readFeatures(routeResponse.routes[routeNumber].geometry, {
                        dataProjection: 'EPSG:4326',
                        featureProjection: mapView.getProjection()
                    });
                    routeFeatures[0].setId(routeNumber);
                } else {
                    //OSRM-API:<5
                    wayPolyline = new ol.format.Polyline({
                        'factor': this.options.mapController.data.router_viaroute_precision || 1e6
                    });

                    // add route
                    routeFeatures = wayPolyline.readFeatures(routeResponse.route_geometry, {
                        dataProjection: 'EPSG:4326',
                        featureProjection: mapView.getProjection()
                    });
                }
                if (this.options.mapController.data.router_alternative == '1') {
                    if (routeResponse.routes && routeResponse.routes.length > 1 && routeResponse.routes[1]) {
                        this.routingAltWaySource.addFeatures(altRouteFeatures);
                    }
                }
                this.routingWaySource.addFeatures(routeFeatures);
                // render view
                // so the route gets drawn before the animation starts
                this.options.mapController.map.renderSync();

                // animation
                mapView.animate({
                    start: +new Date(),
                    duration: 2000,
                    resolution: mapView.getResolution(),
                    center: [0, 0]
                    //rotation: Math.PI
                });
                // this.options.mapController.map.beforeRender(
                //     ol.animation.pan({
                //       start: +new Date(),
                //       duration: 2000,
                //       source: mapView.getCenter()
                //     }),
                //     ol.animation.zoom({
                //       start: +new Date(),
                //       duration: 2000,
                //       resolution: mapView.getResolution()
                //     })
                // );

                // calculate padding
                leftPadding = 0;
                if (this.options.mapController.activePortside && this.options.mapController.activePortside.container) {
                    leftPadding = $(this.options.mapController.activePortside.container).outerWidth();
                }

                rightPadding = 0;
                if (this.options.mapController.activeStarboard && this.options.mapController.activeStarboard.container) {
                    rightPadding = $(this.options.mapController.activeStarboard.container).outerWidth();
                }

                // center on route
                mapView.fit(routeFeatures[0].getGeometry(), this.options.mapController.map.getSize(), {
                    padding: [0, rightPadding, 0, leftPadding]
                });
            }
        },

        getInstructionIcon: function getInstructionIcon(strMod, strType) {
            var image = "";

            switch (strMod) {
                case "right":
                    image = "turn-right.png";
                    break;
                case "left":
                    image = "turn-left.png";
                    break;
                case "sharp left":
                    image = "sharp-left.png";
                    break;
                case "sharp right":
                    image = "sharp-right.png";
                    break;
                case "slight left":
                    image = "slight-left.png";
                    break;
                case "slight right":
                    image = "slight-right.png";
                    break;
                case "uturn":
                    image = "u-turn.png";
                    break;
                case "straight":
                    image = "continue.png";
                    break;
                default:
                    image = "default.png";
                    break;
            }
            switch (strType) {
                case "depart":
                    image = "head.png";
                    break;
                case "arrive":
                    image = "target.png";
                    break;
                case "roundabout":
                    image = "round-about.png";
                    break;
                default:
                    break;
            }

            return "bundles/con4gismaps/vendor/osrm/images/" + image;
        },
        getInstructionIconORS: function getInstructionIconORS(intType) {
            var image = void 0;
            switch (intType) {
                case 0:
                    image = "turn-left.png";
                    break;
                case 1:
                    image = "turn-right.png";
                    break;
                case 2:
                    image = "sharp-left.png";
                    break;
                case 3:
                    image = "sharp-right.png";
                    break;
                case 4:
                    image = "slight-left.png";
                    break;
                case 5:
                    image = "slight-right.png";
                    break;
                case 6:
                    image = "continue.png";
                    break;
                case 7:
                    image = "round-about.png";
                    break;
                case 8:
                    image = "round-about.png";
                    break;
                case 9:
                    image = "u-turn.png";
                    break;
                case 10:
                    image = "target.png";
                    break;
                case 11:
                    image = "head.png";
                    break;
                case 12:
                    image = "slight-left.png";
                    break;
                case 13:
                    image = "slight-right.png";
                    break;

            }
            return document.getElementsByTagName('base')[0].href + "bundles/con4gismaps/vendor/osrm/images/" + image;
        },

        getTypeText: function getTypeText(strType) {
            var textID;

            switch (strType) {
                case "turn":
                    textID = "ROUTER_5.X_TYPE_0";
                    break;
                case "new name":
                    textID = "ROUTER_5.X_TYPE_1";
                    break;
                case "depart":
                    textID = "ROUTER_5.X_TYPE_2";
                    break;
                case "arrive":
                    textID = "ROUTER_5.X_TYPE_3";
                    break;
                case "merge":
                    textID = "ROUTER_5.X_TYPE_4";
                    break;
                case "on ramp":
                    textID = "ROUTER_5.X_TYPE_5";
                    break;
                case "off ramp":
                    textID = "ROUTER_5.X_TYPE_6";
                    break;
                case "fork":
                    textID = "ROUTER_5.X_TYPE_7";
                    break;
                case "end of road":
                    textID = "ROUTER_5.X_TYPE_8";
                    break;
                case "use lane":
                    textID = "ROUTER_5.X_TYPE_9";
                    break;
                case "continue":
                    textID = "ROUTER_5.X_TYPE_10";
                    break;
                case "roundabout":
                case "exit roundabout":
                    textID = "ROUTER_5.X_TYPE_11";
                    break;
                case "rotary":
                case "exit rotary":
                    textID = "ROUTER_5.X_TYPE_12";
                    break;
                case "roundabout turn":
                    textID = "ROUTER_5.X_TYPE_13";
                    break;
                case "notification":
                    textID = "ROUTER_5.X_TYPE_14";
                    break;
                default:
                    break;
            }
            return langConstants[textID];
        },

        getModifierText: function getModifierText(strModifier) {
            var textID;

            switch (strModifier) {
                case "uturn":
                    textID = "ROUTER_5.X_MOD_0";
                    break;
                case "sharp right":
                    textID = "ROUTER_5.X_MOD_1";
                    break;
                case "right":
                    textID = "ROUTER_5.X_MOD_2";
                    break;
                case "slight right":
                    textID = "ROUTER_5.X_MOD_3";
                    break;
                case "straight":
                    textID = "ROUTER_5.X_MOD_4";
                    break;
                case "slight left":
                    textID = "ROUTER_5.X_MOD_5";
                    break;
                case "left":
                    textID = "ROUTER_5.X_MOD_6";
                    break;
                case "sharp left":
                    textID = "ROUTER_5.X_MOD_7";
                    break;
                default:
                    textID = "ROUTER_5.X_MOD_8";
            }
            return langConstants[textID];
        },
        getDrivingInstructionIcon: function getDrivingInstructionIcon(instructionId) {
            var id, image;

            id = instructionId.replace(/^11-\d{1,}$/, "11"); // dumb check, if there is a roundabout (all have the same icon)

            image = 'default.png';

            switch (id) {
                case '1':
                    image = 'continue.png';
                    break;
                case '2':
                    image = 'slight-right.png';
                    break;
                case '3':
                    image = 'turn-right.png';
                    break;
                case '4':
                    image = 'sharp-right.png';
                    break;
                case '5':
                    image = 'u-turn.png';
                    break;
                case '6':
                    image = 'sharp-left.png';
                    break;
                case '7':
                    image = 'turn-left.png';
                    break;
                case '8':
                    image = 'slight-left.png';
                    break;
                case '10':
                    image = 'head.png';
                    break;
                case '11':
                    image = 'round-about.png';
                    break;
                case '15':
                    image = 'target.png';
                    break;
            }
            return document.getElementsByTagName('base')[0].href + "bundles/con4gismaps/vendor/osrm/images/" + image;
        },
        getText: function getText(id) {

            var text_id = "ROUTER_" + id;

            if (langConstants[text_id] === undefined) {
                console.warn(text_id + " can't find in language files.");
            }
            return langConstants[text_id];
        },

        getDrivingInstruction: function getDrivingInstruction(instructionId) {

            var id, description;

            id = "DIRECTION_" + instructionId.replace(/^11-\d{2,}$/, "11-x"); // dumb check, if there are 10+ exits on a roundabout (say the same for exit 10+)

            description = this.getText(id);
            if (!description) {
                description = this.getText('DIRECTION_0');
            }

            return description;
        },
        showRouteInstructions: function showRouteInstructions(routeResponse, routeNumber) {

            var self,
                routerInstruction,
                routerInstructionsHeader,
                routerInstructionsHtml,
                instr,
                strType,
                strMod,
                rowstyle,
                routeNumber = routeNumber || 0,
                i,
                j,
                route_name_0 = "",
                route_name_1 = "",
                total_distance = "",
                total_time = "";

            self = this;

            if (self.routerInstructionsWrapper === undefined) {
                self.routerInstructionsWrapper = document.createElement('div');
                self.routerInstructionsWrapper.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_WRAPPER;
                self.routerViewContentWrapper.appendChild(self.routerInstructionsWrapper);
            } else {
                $(self.routerInstructionsWrapper).empty();
            }

            routerInstructionsHeader = document.createElement('div');
            routerInstructionsHeader.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_HEADER;

            if (routeResponse) {
                if (this.options.mapController.data.router_api_selection == '1') {
                    //OSRM-API:5.x
                    if (routeResponse.routes[routeNumber].legs[0].summary) {
                        route_name_0 = routeResponse.routes[routeNumber].legs[0].summary.split(",")[0];
                        route_name_1 = routeResponse.routes[routeNumber].legs[0].summary.split(",")[1];
                        if (routeResponse.routes[routeNumber].legs[1]) {
                            route_name_1 = routeResponse.routes[routeNumber].legs[1].summary.split(",")[1];
                        }
                    }
                    total_distance = this.toHumanDistance(routeResponse.routes[routeNumber].distance);
                    total_time = this.toHumanTime(routeResponse.routes[routeNumber].duration);
                } else if (this.options.mapController.data.router_api_selection == '0') {
                    //OSRM-API:<5
                    if (routeResponse.route_name) {
                        route_name_0 = routeResponse.route_name[0];
                        route_name_1 = routeResponse.route_name[1];
                    }

                    if (routeResponse.route_summary) {
                        total_distance = this.toHumanDistance(routeResponse.route_summary.total_distance);
                        total_time = this.toHumanTime(routeResponse.route_summary.total_time);
                    }
                } else if (this.options.mapController.data.router_api_selection == '2') {
                    //OSR-API
                    total_time = this.toHumanTime(routeResponse.routes[routeNumber].summary.duration);
                    total_distance = this.toHumanDistance(routeResponse.routes[routeNumber].summary.distance);
                }

                if (route_name_0 && route_name_1) {
                    routerInstructionsHeader.innerHTML = '<label>' + langConstants.ROUTER_VIEW_LABEL_ROUTE + '</label> <em>' + route_name_0 + ' &#8594; ' + route_name_1 + '</em><br>' + '<label>' + langConstants.ROUTER_VIEW_LABEL_DISTANCE + '</label> <em>' + total_distance + '</em><br>' + '<label>' + langConstants.ROUTER_VIEW_LABEL_TIME + '</label> <em>' + total_time + '</em><br>';
                } else if (this.routeProfile.active) {
                    routerInstructionsHeader.innerHTML = '<label>' + langConstants.ROUTER_VIEW_LABEL_PROFILE + '</label> <em>' + this.options.mapController.data.router_profiles[this.routeProfile.active] + '</em><br>' + '<label>' + langConstants.ROUTER_VIEW_LABEL_DISTANCE + '</label> <em>' + total_distance + '</em><br>' + '<label>' + langConstants.ROUTER_VIEW_LABEL_TIME + '</label> <em>' + total_time + '</em><br>';
                }

                self.routerInstructionsWrapper.appendChild(routerInstructionsHeader);

                routerInstruction = document.createElement('div');

                routerInstructionsHtml = '<table class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_TABLE + '" cellpadding="0" cellspacing="0">';
                if (this.options.mapController.data.router_api_selection === '1') {
                    //OSRM-API:5.x
                    for (j = 0; j < routeResponse.routes[routeNumber].legs.length; j += 1) {
                        for (i = 0; i < routeResponse.routes[routeNumber].legs[j].steps.length; i += 1) {
                            instr = routeResponse.routes[routeNumber].legs[j].steps[i];

                            strType = instr.maneuver.type;
                            if (instr.maneuver.modifier) {
                                strMod = instr.maneuver.modifier;
                            }
                            rowstyle = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_ODD;

                            if (i % 2 === 0) {
                                rowstyle = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_EVEN;
                            }

                            rowstyle += " " + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM;

                            routerInstructionsHtml += '<tr class="' + rowstyle + '">';

                            routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION + '">';
                            routerInstructionsHtml += '<img class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_ICON + '" src="' + this.getInstructionIcon(strMod, strType) + '" alt=""/>';
                            routerInstructionsHtml += '</td>';

                            routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT + '" data-pos="' + instr.maneuver.location + '">';

                            // build route description
                            var instructiontext = this.getTypeText(instr.maneuver.type).replace(/%s/, instr.name).replace(/%m/, this.getModifierText(instr.maneuver.modifier)).replace(/%z/, instr.maneuver.exit);
                            if (instr.name.length < 1) {
                                instructiontext = instructiontext.replace(/\[.*?\]/g, '');
                            } else {
                                instructiontext = instructiontext.replace(/\[(.*)\]/, "$1");
                            }
                            routerInstructionsHtml += instructiontext;

                            routerInstructionsHtml += '</div>';
                            routerInstructionsHtml += "</td>";

                            routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_DISTANCE + '">';
                            if (i !== routeResponse.routes[routeNumber].legs[0].steps.length - 1) {
                                routerInstructionsHtml += this.toHumanDistance(instr.distance);
                            }
                            routerInstructionsHtml += "</td>";

                            routerInstructionsHtml += "</tr>";
                        }
                    }
                } else if (this.options.mapController.data.router_api_selection === '0') {
                    //OSRM-API:<5
                    for (i = 0; i < routeResponse.route_instructions.length; i += 1) {
                        instr = routeResponse.route_instructions[i];
                        rowstyle = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_ODD;

                        if (i % 2 === 0) {
                            rowstyle = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_EVEN;
                        }

                        rowstyle += " " + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM;

                        routerInstructionsHtml += '<tr class="' + rowstyle + '">';

                        routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION + '">';
                        routerInstructionsHtml += '<img class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_ICON + '" src="' + this.getDrivingInstructionIcon(instr[0]) + '" alt=""/>';
                        routerInstructionsHtml += '</td>';

                        routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT + '" data-pos="' + instr[3] + '">';

                        // build route description
                        if (instr[1] !== "") {
                            routerInstructionsHtml += this.getDrivingInstruction(instr[0]).replace(/\[(.*)\]/, "$1").replace(/%s/, instr[1]).replace(/%d/, this.getText(instr[6]));
                        } else {
                            routerInstructionsHtml += this.getDrivingInstruction(instr[0]).replace(/\[(.*)\]/, "").replace(/%d/, this.getText(instr[6]));
                        }

                        routerInstructionsHtml += '</div>';
                        routerInstructionsHtml += "</td>";

                        routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_DISTANCE + '">';
                        if (i !== routeResponse.route_instructions.length - 1) {
                            routerInstructionsHtml += this.toHumanDistance(instr[5]);
                        }
                        routerInstructionsHtml += "</td>";

                        routerInstructionsHtml += "</tr>";
                    }
                } else if (this.options.mapController.data.router_api_selection === '2') {
                    //OpenRouteService
                    for (j = 0; j < routeResponse.routes[routeNumber].segments.length; j += 1) {
                        for (i = 0; i < routeResponse.routes[routeNumber].segments[j].steps.length; i += 1) {
                            instr = routeResponse.routes[routeNumber].segments[j].steps[i];

                            strType = instr.type;

                            rowstyle = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_ODD;

                            if (i % 2 === 0) {
                                rowstyle = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_EVEN;
                            }

                            rowstyle += " " + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM;

                            routerInstructionsHtml += '<tr class="' + rowstyle + '">';

                            routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION + '">';
                            routerInstructionsHtml += '<img class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_ICON + '" src="' + this.getInstructionIconORS(strType) + '" alt=""/>';
                            routerInstructionsHtml += '</td>';

                            if (instr.maneuver) {
                                routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT + '" data-pos="' + instr.maneuver.location + '">';
                            } else {
                                routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT + '" data-pos="' + 0 + '">';
                            }

                            // build route description

                            routerInstructionsHtml += instr.instruction;

                            routerInstructionsHtml += '</div>';
                            routerInstructionsHtml += "</td>";

                            routerInstructionsHtml += '<td class="' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ROUTER_INSTRUCTIONS_ITEM_DIRECTION_DISTANCE + '">';
                            if (i !== routeResponse.routes[routeNumber].segments[0].steps.length - 1) {
                                routerInstructionsHtml += this.toHumanDistance(instr.distance);
                            }
                            routerInstructionsHtml += "</td>";

                            routerInstructionsHtml += "</tr>";
                        }
                    }
                }

                routerInstructionsHtml += '</table>';

                routerInstruction.innerHTML = routerInstructionsHtml;

                self.routerInstructionsWrapper.appendChild(routerInstruction);

                this.adjustInstructionMapInteraction();
            }
        },

        adjustInstructionMapInteraction: function adjustInstructionMapInteraction(routerInstruction) {
            var self = this,
                fnItemClick,
                fnItemOver,
                fnItemOut;

            fnItemClick = function fnItemClick(element) {
                if (self.routingWaySource && self.routingWaySource.getFeatures() && self.options.mapController.data.router_api_selection == '0') {
                    var feature = self.routingWaySource.getFeatures()[0];
                    if (feature) {
                        var currentCoordinates = feature.getGeometry().getCoordinates()[element.data('pos')];
                        self.routingHintSource.clear();
                        var currentHintFeature = new ol.Feature({
                            geometry: new ol.geom.Point(currentCoordinates)
                        });
                        self.routingHintSource.addFeature(currentHintFeature);
                        self.options.mapController.map.getView().setCenter(currentCoordinates);
                    }
                }
                if (self.routingWaySource && self.options.mapController.data.router_api_selection >= '1') {
                    self.routingHintSource.clear();
                    var coordLonLat = element.data('pos');
                    var stringlonlat = coordLonLat.split(",");
                    stringlonlat[0] = parseFloat(stringlonlat[0]);
                    stringlonlat[1] = parseFloat(stringlonlat[1]);
                    var newCoord = ol.proj.fromLonLat(stringlonlat);
                    var currentHintFeature = new ol.Feature({
                        geometry: new ol.geom.Point(newCoord)
                    });
                    self.routingHintSource.addFeature(currentHintFeature);
                    self.options.mapController.map.getView().setCenter(newCoord);
                }
            };

            fnItemOver = function fnItemOver(element) {
                if (self.routingWaySource && self.routingWaySource.getFeatures() && self.options.mapController.data.router_api_selection == '0') {
                    var feature = self.routingWaySource.getFeatures()[0];
                    if (feature) {
                        self.routingHintSource.clear();
                        var currentHintFeature = new ol.Feature({
                            geometry: new ol.geom.Point(feature.getGeometry().getCoordinates()[element.data('pos')])
                        });
                        self.routingHintSource.addFeature(currentHintFeature);
                    }
                }
                if (self.routingWaySource && self.routingWaySource.getFeatures() && self.options.mapController.data.router_api_selection >= '1') {
                    var feature = self.routingWaySource.getFeatures()[0];
                    if (feature) {
                        self.routingHintSource.clear();
                        var coordLonLat = element.data('pos');
                        var stringlonlat = coordLonLat.split(",");
                        stringlonlat[0] = parseFloat(stringlonlat[0]);
                        stringlonlat[1] = parseFloat(stringlonlat[1]);
                        var newCoord = ol.proj.fromLonLat(stringlonlat);
                        var currentHintFeature = new ol.Feature({
                            geometry: new ol.geom.Point(newCoord)
                        });
                        self.routingHintSource.addFeature(currentHintFeature);
                    }
                }
            };

            fnItemOut = function fnItemOut() {
                self.routingHintSource.clear();
            };

            $('[data-pos]', routerInstruction).each(function (index, element) {

                var $element = $(element);

                $element.click(function () {
                    fnItemClick($element);
                });

                $element.on('mouseenter', function () {
                    fnItemOver($element);
                });

                $element.on('mouseleave', function () {
                    fnItemOut();
                });
            });
        },

        clearInput: function clearInput($input) {

            $input.val('');
            $input.trigger('change');
            this.routingWaySource.clear();
            this.routingAltWaySource.clear();
            this.routingHintSource.clear();

            $(this.routerInstructionsWrapper).empty();
            this.recalculateRoute();
            this.update();
        },
        clearOver: function clearOver($input, index) {
            if (this.overValue) {
                delete this.overValue[index];
            }
            this.$buttonOver.prop("disabled", false);
            $(this.routerInstructionsWrapper).empty();
            this.recalculateRoute();
            this.update();
        },

        performReverseSearch: function performReverseSearch($input, value) {

            var self = this,
                url;

            url = this.geoReverseSearchApi + '?format=json&lat=' + value[1] + '&lon=' + value[0];
            this.spinner.show();

            jQuery.ajax({
                'url': url }).done(function (response) {

                if (response) {
                    var value = "";
                    if (response.address) {
                        if (response.address.city) {
                            value = response.address.city;
                            if (response.address.road) {
                                value = ', ' + value;
                            }
                        }
                        if (response.address.town) {
                            value = response.address.town;
                            if (response.address.road) {
                                value = ', ' + value;
                            }
                        }
                        if (response.address.road) {
                            if (response.address.house_number) {
                                value = ' ' + response.address.house_number + value;
                            }
                            value = response.address.road + value;
                        }
                    }

                    if (value === "") {
                        value = response.display_name;
                    }
                    $input.val(value);

                    if ($input.attr('name') === "routingFrom") {
                        self.$routerFromClear.show();
                    } else if ($input.attr('name') === "routingTo") {
                        self.$routerToClear.show();
                    }
                }
            }).always(function () {
                self.spinner.hide();
            });
        },

        performSearch: function performSearch($input, value, opt_callback) {

            var map, bounds, viewbox, self, url;

            self = this;

            if ($input.val() === "") {
                //self.clearInput($input);
                delete self[value];
                return "";
            }

            map = self.options.mapController.map;
            bounds = map.getView().calculateExtent(map.getSize());
            bounds = ol.proj.transformExtent(bounds, map.getView().getProjection(), 'EPSG:4326');
            viewbox = '&viewbox=' + bounds[0] + ',' + bounds[1] + ',' + bounds[2] + ',' + bounds[3];

            url = self.geoSearchApi + '?format=json&limit=1&q=' + encodeURI($input.val()) + viewbox;

            jQuery.ajax({
                'url': url
            }).done(function (response) {

                if (response.length > 0) {
                    if (value === "overValue") {
                        if (!self.overValue) {
                            self.overValue = {};
                        }
                        self.overValue[self.index] = new ol.geom.Point([parseFloat(response[0].lon), parseFloat(response[0].lat)]);
                        self.$buttonOver.prop("disabled", false);
                    } else {
                        self[value] = new ol.geom.Point([parseFloat(response[0].lon), parseFloat(response[0].lat)]);
                    }
                } else {
                    alert(langConstants.ROUTER_VIEW_ALERT_ADDRESS);
                    self.clearInput($input);
                    delete self[value];
                }

                if (opt_callback && typeof opt_callback === "function") {
                    opt_callback();
                }
            }).error(function () {
                alert(langConstants.ROUTER_VIEW_ALERT_GEOCODING);
            });

            return "";
        },

        toHumanDistance: function toHumanDistance(distanceInMeters) {

            // copied from old sources

            var distance, humanDistance;

            distance = parseInt(distanceInMeters, 10);
            distance = distance / 1000;

            if (distance >= 100) {
                humanDistance = distance.toFixed(0) + '&nbsp;' + 'km';
            } else if (distance >= 10) {
                humanDistance = distance.toFixed(1) + '&nbsp;' + 'km';
            } else if (distance >= 0.1) {
                humanDistance = distance.toFixed(2) + '&nbsp;' + 'km';
            } else {
                humanDistance = (distance * 1000).toFixed(0) + '&nbsp;' + 'm';
            }

            return humanDistance;
        },

        toHumanTime: function toHumanTime(timeInSeconds) {

            // copied from old sources

            var seconds, minutes, hours, humanTime;

            seconds = parseInt(timeInSeconds, 10);
            minutes = parseInt(seconds / 60, 10);
            seconds = seconds % 60;

            hours = parseInt(minutes / 60, 10);
            minutes = minutes % 60;

            if (hours === 0 && minutes === 0) {
                humanTime = seconds + '&nbsp;' + 's';
            } else if (hours === 0) {
                humanTime = minutes + '&nbsp;' + 'min';
            } else {
                humanTime = hours + '&nbsp;' + 'h' + '&nbsp;' + minutes + '&nbsp;' + 'min';
            }

            return humanTime;
        }

    });
})(jQuery, this.c4g);

var Router = this.c4g.maps.control.Router;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-position.js":
/*!**********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-position.js ***!
  \**********************************************************/
/*! exports provided: Position */
/*! exports used: Position */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Position; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};




(function ($, c4g) {
  'use strict';

  /**
   * Control to toggle the browser/desvice position on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Position = function (opt_options) {

    var self = this;
    var options = opt_options || {};

    var element, button;

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS,
      switchable: true,
      enabled: true,
      mapController: undefined
    }, options);

    if (!options.mapController) {
      return false;
    }

    var view = options.mapController.map.getView();
    var mapData = options.mapController.data;

    var enable = function enable() {
      $(element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ENABLED);
    };

    var disable = function disable() {
      $(element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ENABLED);
    };

    var toggle = function toggle(event) {
      event.stopPropagation();
      // loose focus, otherwise it looks messy
      this.blur();

      var geoLocation = new ol.Geolocation({
        tracking: true,
        projection: view.getProjection()
      });

      geoLocation.on('change', function (evt) {
        view.setCenter(geoLocation.getPosition());
        // if (mapData.geolocation_zoom) {
        //    view.setZoom(mapData.geolocation_zoom);
        // } else {
        view.setZoom(18);
        //}
        geoLocation.setTracking(false);
        options.mapController.map.setView(view);
        c4g.maps.utils.redrawMapView(options.mapController);
      });
    };

    // wrapper div
    element = document.createElement('div');
    element.className = options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' button';

    if (options.switchable) {
      // button
      button = document.createElement('button');
      button.title = options.tipLabel;
      element.appendChild(button);

      // set onClick to the toggle-function
      button.addEventListener('click', toggle, false);
      button.addEventListener('touchstart', toggle, false);
    }

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });
  };
  ol.inherits(c4g.maps.control.Position, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Position.prototype = $.extend(c4g.maps.control.Position.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Position = this.c4g.maps.control.Position;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-print.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-print.js ***!
  \*******************************************************/
/*! exports provided: Print */
/*! exports used: Print */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Print; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};



(function ($, c4g) {
  'use strict';

  /**
   * Control to toggle the browser/desvice position on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Print = function (opt_options) {

    var self = this;
    var options = opt_options || {};

    var element, button;

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PRINT,
      switchable: true,
      enabled: true,
      mapController: undefined
    }, options);

    if (!options.mapController) {
      return false;
    }

    var view = options.mapController.map.getView();
    var mapData = options.mapController.data;

    var toggle = function toggle(event) {
      event.stopPropagation();
      var canvas = document.getElementsByClassName("ol-unselectable")[0];

      canvas.toBlob(function (blob) {
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = 'map.png';
        a.click();
        window.URL.revokeObjectURL(url);
      });
    };

    // wrapper div
    element = document.createElement('div');
    element.className = options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' c4g-portside-control ol-control';

    if (options.switchable) {
      // button
      button = document.createElement('button');
      button.title = options.tipLabel;
      button.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].PRINT;
      element.appendChild(button);

      // set onClick to the toggle-function
      button.addEventListener('click', toggle, false);
      button.addEventListener('touchstart', toggle, false);
    }

    // inheritance-stuff
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });
  };
  ol.inherits(c4g.maps.control.Print, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Print.prototype = $.extend(c4g.maps.control.Print.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Print = this.c4g.maps.control.Print;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-sideboard.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-sideboard.js ***!
  \***********************************************************/
/*! exports provided: Sideboard */
/*! exports used: Sideboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Sideboard; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__ = __webpack_require__(/*! ./c4g-maps-misc-spinner */ "./Resources/public/js/c4g-maps-misc-spinner.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"

this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};







var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

/**
 * Base class for sideboard structures. Provides standard configurations which are equal for each sideboard element.
 */
(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {ol.control.Control}
   * @param   {object}              options  misc configuration options
   *
   */

  c4g.maps.control.Sideboard = function (options) {

    this.options = $.extend({
      create: true,
      extDiv: false,
      defaultOpen: false,
      mapController: undefined,
      name: 'sideboard',
      direction: 'right'
    }, options);

    //active Identifier (which side is this element on?)
    //cssname needed to set the css class correctly
    switch (this.options.direction) {
      case 'left':
        this.identifier = 'Portside';
        this.cssname = 'portside';
        break;
      case 'right':
        this.identifier = 'Starboard';
        this.cssname = 'starboard';
        break;
    }
    //this.cssname = this.identifier.charAt(0).toLowerCase() + this.identifier.slice(1);
    this.initialized = false;
    this.options.tipLabel = this.options.tipLabel || this.options.headline || langConstants.CTRL_SIDEBOARD;
    this.container = document.createElement('div');
    this.element = document.createElement('div');
    this.button = undefined;
    this.spinner = undefined;
    // mainstructure elements
    this.wrapper = undefined;
    this.titleBar = undefined;
    this.headline = undefined;
    this.topToolbar = undefined;
    this.contentContainer = undefined;
    this.bottomToolbar = undefined;
    this.statusBar = undefined;

    this.sections = [];
    this.viewTriggerBar = undefined;
    this.views = [];
    this.activeView = undefined;
    this.pausedView = undefined;

    if (this.options.create && this.options.mapController) {
      this.create();
    }

    if (!this.options.extDiv) {
      ol.control.Control.call(this, {
        element: this.element,
        target: this.options.target || undefined
      });
    }
  };
  ol.inherits(c4g.maps.control.Sideboard, ol.control.Control);

  // Add methods
  c4g.maps.control.Sideboard.prototype = $.extend(c4g.maps.control.Sideboard.prototype, {

    /**
     * Creates the basic html-elements for the sideboard
     *
     * @return  {boolean}  'true' on success
     */
    create: function create() {
      var self, initClass, titleButtonBar, closeButton, capitalizedName, hideButton, caching;

      caching = this.options.caching;
      capitalizedName = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].capitalizeFirstLetter(this.options.name);
      self = this;

      // Do not hide when it is initialized open, or in an external div
      if (this.options.extDiv) {
        initClass = ' ' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN;
        // if (caching) {
        //     utils.storeValue(this.options.name, '1');
        // }
      } else {
        initClass = ' ' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE;
        // if (caching) {
        //     utils.storeValue(this.options.name, '0');
        // }
        this.options.mapController["active" + this.identifier] = this.options.mapController["active" + this.identifier] || false;

        this.button = document.createElement('button');
        $(this.button).on('click', function (event) {
          event.stopPropagation();
          // loose focus, otherwise it looks messy
          try {
            this.blur();
          } catch (e) {
            // [note] "this.blur()" does not work in IE-fullscreen-mode
            console.warn(e.name + ': ' + e.message);
          }
          if (capitalizedName == "Router" || capitalizedName == "Measure" || capitalizedName == "Editor") {
            self.toggle(true);
          } else {
            self.toggle();
          }
        });
        this.button.title = this.options.tipLabel;
        this.element.appendChild(this.button);
      }

      // Set attributes
      $(this.container).addClass('c4g-' + this.options.name + ' ' + 'c4g-' + this.cssname + '-container' + ' ' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + initClass);
      $(this.element).addClass('c4g-' + this.options.name + ' ' + 'c4g-' + this.cssname + '-control' + ' ' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + ' ' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL + initClass);

      // Set initial dimensions
      if (this.options.direction === 'right') {
        //this.container.style.minWidth = '250px';
        //this.container.style[this.options.direction] = '-1920px';
        this.container.style[this.options.direction] = '-100%';
      } else {
        //this.container.style.minWidth = '250px';
        //this.container.style[this.options.direction] = '-1920px';
        this.container.style[this.options.direction] = '-100%';
      }

      // Place container
      if (this.options.extDiv) {
        document.getElementById(this.options.extDiv).appendChild(this.container);
        //     this.options.mapController["active" + this.identifier] = this;
      } else {
        if (this.options.direction === 'left') {
          $('#' + this.options.mapController.map.getTarget() + ' .' + __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OL_OVERLAYCONTAINER_SE).append(this.container);
        } else {
          this.options.mapController.$overlaycontainer_stopevent.append(this.container);
        }
      }

      // Build content-area
      //
      // Wrapper
      this.wrapper = document.createElement('div');
      this.wrapper.className = 'c4g-' + this.cssname + '-wrapper';
      this.container.appendChild(this.wrapper);
      // Titlebar
      this.titleBar = document.createElement('div');
      this.titleBar.className = 'c4g-' + this.cssname + '-titlebar';
      this.wrapper.appendChild(this.titleBar);

      // Triggerbar
      this.viewTriggerBar = document.createElement('div');
      this.viewTriggerBar.className = 'c4g-' + this.cssname + '-viewtriggerbar';

      // Top-Toolbar
      this.topToolbar = this.addSection({
        className: 'c4g-' + this.cssname + '-top-toolbar',
        target: this.wrapper
      });

      // Content-Container
      this.contentContainer = this.addSection({
        className: 'c4g-' + this.cssname + '-content-container',
        target: this.wrapper
      });

      // add content headline
      this.contentHeadline = document.createElement('div');
      this.contentHeadline.className = 'contentHeadline';
      this.contentHeadline.innerHTML = '';
      this.contentContainer.appendChild(this.contentHeadline);

      // Bottom-Toolbar
      this.bottomToolbar = this.addSection({
        className: 'c4g-' + this.cssname + '-bottom-toolbar c4g-close',
        target: this.wrapper
      });

      // Statusbar
      this.statusBar = document.createElement('div');
      this.statusBar.className = 'c4g-' + this.cssname + '-statusbar c4g-close';
      this.wrapper.appendChild(this.statusBar);

      // Add spinner
      this.spinner = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__["a" /* Spinner */]({
        target: this.contentContainer,
        className: __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].LARGE
      });

      // Fill titlebar
      //
      // Headline
      this.headline = document.createElement('span');
      this.headline.className = 'c4g-' + this.cssname + '-headline';
      this.headline.innerHTML = this.options.headline;
      this.titleBar.appendChild(this.headline);
      // Buttonbar
      titleButtonBar = document.createElement('div');
      titleButtonBar.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CONTROL + ' ' + 'c4g-' + this.cssname + '-buttonbar';
      this.titleBar.appendChild(titleButtonBar);

      if (this.options.direction === 'left') {
        // Hidebutton
        hideButton = document.createElement('button');
        hideButton.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].PORTSIDE_HIDE;
        hideButton.title = langConstants.HIDE;
        $(hideButton).click(function (event) {
          event.preventDefault();
          self.close(true);
          return false;
        });
        titleButtonBar.appendChild(hideButton);
      }

      // Closebutton
      closeButton = document.createElement('button');
      closeButton.className = 'c4g-' + this.cssname + '-close';
      closeButton.title = langConstants.CLOSE;
      $(closeButton).click(function (event) {
        event.preventDefault();
        self.close();
        return false;
      });
      titleButtonBar.appendChild(closeButton);

      //Add spinner for left sided sideboard elements
      this.spinner = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__["a" /* Spinner */]({
        target: this.contentContainer,
        className: __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].LARGE
      });

      // Handle external DIV and default state
      // catch touch events and stop their propagation
      // otherwise touch-scrolling will be stopped by ol3
      $(this.container).on('touchstart touchmove touchend', function (event) {
        event.stopPropagation();
      });

      // Bind the update method to the map-resize event
      this.options.mapController.map.on('change:size', this.update, this);

      // Show open if desired
      if (this.options.defaultOpen || this.options.caching && __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].getValue(this.options.name) == '1') {
        this.open();
      }

      return true;
    }, // end of "create"

    /**
     *   Update the sideboards html-elements
     *   resizes the content-container
     *   and the top-toolbar
     *
     * @param  {event-object}  opt_event  *optional*  Just needed by the ol-bind-method,
     *                                                but not used in the function
     */
    update: function update(opt_event) {

      var self, contentContainerOuterHeight, containerOffsetWidth;

      self = this;

      /*
      if (this.options && this.options.name) {
          capitalizedName = utils.capitalizeFirstLetter(this.options.name);
      }*/

      contentContainerOuterHeight = $(this.wrapper).height() - ($(this.titleBar).outerHeight(true) + $(this.statusBar).outerHeight(true));
      if (this.options && this.options.direction && this.options.direction != "undefined" && this.options.direction === 'left') {
        if (this !== this.options.mapController["active" + this.identifier]) {
          containerOffsetWidth = 0;
        }
      }

      // Top-Toolbar
      if (this.topToolbar) {
        if (this.topToolbar.innerHTML) {
          // this.topToolbar.style.display = 'block';
          this.topToolbar.style.display = '';
          contentContainerOuterHeight -= $(this.topToolbar).outerHeight(true);
        } else {
          this.topToolbar.style.display = 'none';
        }
      }

      // Bottom-toolbar
      if (this.bottomToolbar) {
        if (this.bottomToolbar.innerHTML) {
          // this.bottomToolbar.style.display = 'block';
          this.bottomToolbar.style.display = '';
          contentContainerOuterHeight -= $(this.bottomToolbar).outerHeight(true);
        } else {
          this.bottomToolbar.style.display = 'none';
        }
      }

      // Content-container
      $(this.contentContainer).outerHeight(contentContainerOuterHeight);

      // Correct width
      if (this.options) {
        if (this.options.mapController["active" + this.identifier] === this) {
          //this.container.style.width = 'auto';
          containerOffsetWidth = this.container.offsetWidth;
          this.options.mapController[this.options.direction + "SlideElements"].forEach(function (element) {
            $(element).css(self.options.direction, containerOffsetWidth);
          });

          //only move the toggle button on starboard elements
          if (this.options.direction === 'right') {
            $(this.element).css(this.options.direction, containerOffsetWidth);
          }
        }
      }
    }, // end of "update"

    /**
     * Opens this sideboard element
     *
     * @param   {object}    *optional* options to be passed to the initialize-function if it exists
     * @return  {boolean}  'true' an success
     */
    open: function open(opt_options) {
      var containerOffsetWidth, self;

      self = this;

      // Call initialize-functions, if existent
      if (!this.initialized) {
        if (typeof this.init === 'function') {
          this.initialized = this.init(opt_options);
        } else {
          this.initialized = true;
        }
      }

      // call preOpenFunctions
      if (typeof this.preOpenFunction === 'function') {
        this.preOpenFunction();
      }

      containerOffsetWidth = this.container.offsetWidth;

      if (this.options.extDiv) {
        // Not available on external divs
        console.warn('You cannot use this function on external embedded sideboard.');
      } else {
        if (this.options.mapController["active" + this.identifier]) {
          if (this.options.mapController["active" + this.identifier] === this) {
            return false;
          }
          //close other active sideboard on this side
          this.options.mapController["active" + this.identifier].close(true, true);
        } else {
          // slide other elements when no other sideboard was active on this side
          this.options.mapController[this.options.direction + "SlideElements"].forEach(function (element) {
            $(element).css(self.options.direction, containerOffsetWidth);
          });
        }

        $(this.container).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN).css(this.options.direction, 0);
        if (this.options.direction === 'left') {
          $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        } else {
          $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN).css(this.options.direction, containerOffsetWidth);
        }

        // set this as active Sideboard
        this.options.mapController["active" + this.identifier] = this;

        // check if a view needs to be reactivated
        if (this.activeView) {
          this.activeView.activate();
        }

        if ($(this.statusBar).hasClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
          $(this.statusBar).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        }

        if ($(this.bottomToolbar).hasClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
          $(this.bottomToolbar).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        }

        // show container to fix resizing issue
        $(this.container).css('visibility', 'visible');

        this.update();
        if (this.options.caching) {
          __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].storeValue(this.options.name, '1');
        }

        // call postOpenFunctions
        if (typeof this.postOpenFunction === 'function') {
          this.postOpenFunction();
        }

        return true;
      }
      return false;
    }, // end of "open"

    isOpen: function isOpen() {
      return this.options.mapController["active" + this.identifier] && this.options.mapController["active" + this.identifier] === this;
    },

    /**
     * Closes this sideboard element
     *
     * @param   {boolean}  opt_hide               *optional* Choose if this function should trigger |preHideFunction|
     *                                            instead of |preCloseFunction|. Default is |false|.
     * @param   {boolean}  opt_openOtherSideboard  *optional* Indicates if another sideboard element will be opened instead.
     *                                            Default is |false|.
     *
     * @return  {boolean}                         |true| on success.
     */
    close: function close(opt_hide, opt_openOtherSideboard) {
      var containerOffsetWidth, direction;

      direction = this.options.direction;

      if (opt_hide) {
        if (typeof this.preHideFunction === 'function') {
          this.preHideFunction();
        }
      } else {
        if (typeof this.preCloseFunction === 'function') {
          this.preCloseFunction();
        }
      }

      containerOffsetWidth = this.container.offsetWidth;

      if (this.options.extDiv) {
        // Not available on external divs
        console.warn('You cannot use this function on external embedded sideboard.');
      } else {
        if (this.options.mapController["active" + this.identifier] !== this) {
          console.warn('This ' + this.options.name + '-element (' + this.options.name + ') is already closed.');
          return false;
        }
        $(this.container).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).css(direction, -containerOffsetWidth);
        $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].CLOSE).css(direction, 0);

        if (!opt_openOtherSideboard) {
          // slide other elements
          this.options.mapController[direction + "SlideElements"].forEach(function (element) {
            $(element).css(direction, 0);
          });
        }

        // hide container to fix resizing issue
        $(this.container).css('visibility', 'hidden');

        // check if a view needs to be deactivated
        if (this.activeView) {
          this.activeView.deactivate(true);
        }

        // Remove active Sideboardentry
        this.options.mapController["active" + this.identifier] = false;

        if (this.options.caching) {
          __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].storeValue(this.options.name, '0');
        }
        return true;
      }
      return false;
    }, // end of "close"

    /**
     * Toggle this sideboard element
     *
     * @return  {boolean}  Returns |true| on success.
     */
    toggle: function toggle(opt_hide) {
      var capitalizedName;
      capitalizedName = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_utils__["a" /* utils */].capitalizeFirstLetter(this.options.name);
      if (this.options.mapController["active" + this.identifier] === this) {
        return this.close(opt_hide);
      }
      return this.open();
    }, // end of "toggle"

    /**
     * Creates a button which characteristics are defined by the options parameter
     * These options include e.g. the target container where the button will be appended and the click action of the button
     *
     * @param   {object}  opt_options  The button configuration
     *
     * @return  {[type]}           [description]
     */
    makeButton: function makeButton(opt_options) {

      var options, button;

      options = $.extend({
        label: undefined,
        tipLabel: undefined,
        className: '',
        target: undefined,
        clickAction: undefined
      }, opt_options);

      if (options.className) {
        options.className = ' ' + options.className;
      }

      button = document.createElement('button');
      button.className = 'c4g-' + this.options.name + '-button' + options.className;
      if (options.id) {
        button.id = options.id;
      }

      if (typeof options.tipLabel === 'string') {
        button.title = options.tipLabel;
      }

      if (typeof options.label === 'string') {
        button.innerHTML = options.label;
      } else if (_typeof(options.label) === 'object') {
        button.appendChild(options.label);
      }

      if (typeof options.clickAction === 'function') {
        $(button).click(function () {
          try {
            this.blur();
          } catch (e) {
            console.warn(e.message);
          }
          options.clickAction();
        });
      }

      if (options.target) {
        $(options.target).append(button);
      }

      return button;
    }, // end of "makeButton"

    /**
     * @TODO
     * [addSection description]
     *
     * @param  {[type]}  opt_options  [description]
     */
    addSection: function addSection(opt_options) {

      var options, section, element;

      options = $.extend({
        type: 'div',
        className: '',
        target: undefined
      }, opt_options);

      // try to create the new section
      try {
        section = document.createElement(options.type);
      } catch (e) {
        console.warn('Cannot create section. "' + options.type + ' is not a valid HTML-node.');
        return false;
      }

      section.className = options.className;

      // try to append the section to the given target
      if (options.target) {
        try {
          options.target.appendChild(section);
        } catch (e) {
          console.warn(e.message);
        }
      }

      section.getElement = function () {
        return element || false;
      };

      section.setElement = function (newElement) {
        if (newElement && (typeof newElement === "undefined" ? "undefined" : _typeof(newElement)) === 'object') {
          if (!(element && element === newElement)) {
            if (element) {
              this.removeChild(element);
            }
            this.appendChild(newElement);
            element = newElement;
          }
        }
      };

      // add to sections-array
      this.sections.push(section);
      return section;
    }, // end of "addSection"

    /**
     * @TODO
     * [addView description]
     *
     * @param  {[type]}  options  [description]
     */
    addView: function addView(options, opt_viewScope) {

      var self, viewScope, additionalTriggerClass, trigger, view;

      self = this;
      viewScope = opt_viewScope || this;

      options = $.extend({
        // name: undefined,
        triggerConfig: undefined, // @TODO doku format: {opt_target: [string|htmlObject], opt_className: [string], opt_tipLabel: [string]}
        sectionElements: [], // @TODO doku format: [{section: [sectionObject], element: [elementObject]}]
        initFunction: undefined,
        activateFunction: undefined,
        deactivateFunction: undefined
      }, options);

      if (typeof options.name !== 'string') {
        console.warn('Cannot add a view without a name (of type "string").');
        return false;
      }

      view = {};

      view.initialized = false;
      view.paused = false;

      view.activate = function (opt_openSideboard) {
        var i;

        if (options.triggerConfig.withHeadline) {
          self.contentHeadline.innerHTML = options.triggerConfig.tipLabel;
        }

        // open Sideboard if closed
        if (opt_openSideboard && !self.isOpen()) {
          self.open();
        }

        // Deactivate current activeView, if existent
        if (_typeof(viewScope.activeView) === 'object' && viewScope.activeView !== view) {
          viewScope.activeView.deactivate();
        }
        viewScope.activeView = view;

        // Handle sub-views
        if (view.activeView) {
          view.activeView.activate();
        }

        // Call initialize-functions, if existent
        if (!view.initialized) {
          if (typeof options.initFunction === 'function') {
            view.initialized = options.initFunction();
          } else {
            view.initialized = true;
          }
        }

        // Display elements in given sections
        if (options.sectionElements && options.sectionElements.length > 0) {
          for (i = 0; i < options.sectionElements.length; i += 1) {
            options.sectionElements[i].section.setElement(options.sectionElements[i].element);
          }
        }

        // Change trigger-state, if existent
        if (trigger) {
          $(trigger).addClass('c4g-active');
        }

        // Call activate function, if existent
        if (typeof options.activateFunction === 'function') {
          if (!options.activateFunction(view.paused)) {
            return false;
          }
        }

        view.paused = false;
        self.update();
        return true;
      };

      view.deactivate = function (opt_pause) {

        view.paused = opt_pause || false;

        if (_typeof(viewScope.activeView) === 'object' && viewScope.activeView === view) {
          if (trigger && !view.paused) {
            $(trigger).removeClass('c4g-active');
          }

          // Handle sub-views
          if (view.activeView) {
            view.activeView.deactivate(view.paused);
          }

          // Call deactivate function, if existent
          if (typeof options.deactivateFunction === 'function') {
            return options.deactivateFunction(view.paused);
          }
        }

        return true;
      };

      if (_typeof(options.triggerConfig) === 'object') {
        options.triggerConfig = $.extend({
          target: this.viewTriggerBar,
          tipLabel: options.name
        }, options.triggerConfig);

        options.triggerConfig.clickAction = view.activate;
        if (options.triggerConfig.className) {
          additionalTriggerClass = ' ' + options.triggerConfig.className;
        } else {
          additionalTriggerClass = '';
        }
        options.triggerConfig.className = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant__["a" /* cssConstants */].ICON + additionalTriggerClass;
        // @TODO check: trigger = this.makeButton(options.triggerConfig);
        trigger = this.makeButton(options.triggerConfig);
      }

      this.views.push(view);
      return view;
    } // end of "addView"

  }); // end of "add methods"
})(jQuery, this.c4g);

var Sideboard = this.c4g.maps.control.Sideboard;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboard.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboard.js ***!
  \***********************************************************/
/*! exports provided: Starboard */
/*! exports used: Starboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Starboard; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__ = __webpack_require__(/*! ./c4g-maps-control-sideboard */ "./Resources/public/js/c4g-maps-control-sideboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_starboardplugin_baselayerswitcher__ = __webpack_require__(/*! ./c4g-maps-control-starboardplugin-baselayerswitcher */ "./Resources/public/js/c4g-maps-control-starboardplugin-baselayerswitcher.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_starboardplugin_layerswitcher__ = __webpack_require__(/*! ./c4g-maps-control-starboardplugin-layerswitcher */ "./Resources/public/js/c4g-maps-control-starboardplugin-layerswitcher.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_control_starboardplugin_customtab__ = __webpack_require__(/*! ./c4g-maps-control-starboardplugin-customtab */ "./Resources/public/js/c4g-maps-control-starboardplugin-customtab.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};

var c4g = this.c4g;







(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {c4g.maps.control.Sideboard}
   * @param   {object}              opt_options  *optional* misc configuration options
   */

  c4g.maps.control.Starboard = function (opt_options) {

    this.options = $.extend({
      create: true,
      extDiv: false,
      defaultOpen: false,
      mapController: undefined,
      name: 'starboard',
      direction: 'right',
      filter: false
    }, opt_options);

    //window.c4gMapsHooks.starboard_loadPlugins = [];

    //set headline, since the definition above does not work for headline
    if (!this.options.headline || this.options.headline.length === 0) {
      //this.options.headline = c4g.maps.constant.i18n.STARBOARD;
    }

    this.hook_layerswitcher_loaded = this.hook_layerswitcher_loaded || [];

    //call Sideboard (parent) constructor
    __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */].call(this, this.options);
  };
  ol.inherits(c4g.maps.control.Starboard, __WEBPACK_IMPORTED_MODULE_0__c4g_maps_control_sideboard__["a" /* Sideboard */]);

  // Add methods
  c4g.maps.control.Starboard.prototype = $.extend(c4g.maps.control.Starboard.prototype, {

    /**
     * Creates the basic html-elements for the starboard
     *
     * @return  {boolean}  'true' on success
     */
    init: function init() {

      var plugin,
          renderLayertree,
          key,
          layer,
          self,
          fnRender,
          displayLayerswitcher = false;

      if (this.initialized) {
        return true;
      }

      self = this;

      // Load Starboard plugins
      this.plugins = {};

      // creates and renders the starboard plugins
      fnRender = function fnRender() {
        // loop through layers and check if there is any normal layertree to render
        for (key in self.options.mapController.proxy.layerController.arrLayers) {
          if (self.options.mapController.proxy.layerController.arrLayers.hasOwnProperty(key)) {
            layer = self.options.mapController.proxy.layerController.arrLayers[key];
            if (!layer.renderSpecial) {
              renderLayertree = true;
              break;
            }
          }
        }

        if (renderLayertree) {
          // do not display layerswitcher if there is nothing to switch
          if (self.options.mapController.proxy.layerController.arrLayers) {
            for (var id in self.options.mapController.proxy.layerController.arrLayers) {
              if (self.options.mapController.proxy.layerController.arrLayers[id].display) {
                displayLayerswitcher = true;
              }
            }
          }
        }

        // - load "Layerswitcher"
        if (self.options.layerSwitcherCreate && renderLayertree && displayLayerswitcher) {
          self.plugins.layerswitcher = new __WEBPACK_IMPORTED_MODULE_3__c4g_maps_control_starboardplugin_layerswitcher__["a" /* Layerswitcher */](self);
        }

        // call hook to load additional starboard tabs (layers)
        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.hook_layerswitcher_loaded);

        // - check & load other Starboard-plugins (via hook)
        // called functions have to add themselves to this.plugins
        if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.starboard_loadPlugins) === 'object') {
          __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.starboard_loadPlugins, self);
          // - activate new plugins if they are not activated already
          for (plugin in self.plugins) {
            // Check if plugin is a real plugin and not a property of the object prototype
            if (self.plugins.hasOwnProperty(plugin)) {
              self.plugins[plugin].activate();
            }
          }
        }

        // - load "Baselayerswitcher"
        if (self.options.baselayerSwitcherCreate) {
          self.plugins.baselayerswitcher = new __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_starboardplugin_baselayerswitcher__["a" /* Baselayerswitcher */](self);
          self.plugins.baselayerswitcher.activate();
        }
        if (self.plugins.layerswitcher) {
          self.plugins.layerswitcher.activate();
        }
      }; // end of "fnRender()"


      if (!this.options.mapController.proxy.layers_loaded) {
        this.spinner.show();
        this.options.mapController.proxy.hook_layer_loaded.push(function (layerIds) {
          self.spinner.hide();
          fnRender();
        });
      } else {
        // layers are already loaded
        fnRender();
      }

      this.initialized = true;

      return true;
    } // end of "init"

  }); // End of add methods
})(jQuery, c4g);

var Starboard = this.c4g.maps.control.Starboard;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboardplugin-baselayerswitcher.js":
/*!***********************************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboardplugin-baselayerswitcher.js ***!
  \***********************************************************************************/
/*! exports provided: Baselayerswitcher */
/*! exports used: Baselayerswitcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Baselayerswitcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};
this.c4g.maps.control.starboardplugin = this.c4g.maps.control.starboardplugin || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {ol.control.Control}
   * @param   {object}              starboard
   */

  c4g.maps.control.starboardplugin.Baselayerswitcher = function (starboard) {
    if (!starboard) {
      console.warn('Cannot initialize Baselayerswitcher without a starboard.');
      return false;
    }

    this.initialized = false;
    this.baselayers = {};

    this.starboard = starboard;
    this.proxy = starboard.options.mapController.proxy;

    this.create();
    this.loadContent();
  };

  // Add methods
  c4g.maps.control.starboardplugin.Baselayerswitcher.prototype = $.extend(c4g.maps.control.starboardplugin.Baselayerswitcher.prototype, {

    /**
     * @TODO: [create description]
     *
     * @return  {[type]}  [description]
     */
    create: function create() {
      var self, contentWrapper, contentHeadline, contentInfo;

      self = this;

      contentWrapper = document.createElement('div');

      contentHeadline = document.createElement('div');
      contentHeadline.innerHTML = this.starboard.options.baselayerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER;
      contentHeadline.className = 'contentHeadline';
      contentWrapper.appendChild(contentHeadline);

      this.contentDiv = document.createElement('div');
      this.contentDiv.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_CONTENT_BASELAYERSWITCHER;
      contentInfo = document.createElement('p');
      this.contentDiv.appendChild(contentInfo);
      contentWrapper.appendChild(this.contentDiv);

      self.view = self.starboard.addView({
        name: 'layerswitcher',
        triggerConfig: {
          tipLabel: this.starboard.options.baselayerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER,
          className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER,
          withHeadline: false
        },
        sectionElements: [{ section: self.starboard.contentContainer, element: contentWrapper }, { section: self.starboard.topToolbar, element: self.starboard.viewTriggerBar }]
      });
    },

    /**
     * @TODO: [activate description]
     *
     * @return  {[type]}  [description]
     */
    activate: function activate() {
      this.view.activate();
    },

    /**
     * @TODO: [setContent description]
     *
     * @param  {[type]}  newContent  [description]
     */
    setContent: function setContent(newContent) {
      if (newContent) {
        if (typeof newContent === "string") {
          this.contentDiv.innerHTML = newContent;
        } else {
          try {
            if (this.contentDiv.firstChild) {
              this.contentDiv.replaceChild(newContent, this.contentDiv.firstChild);
            } else {
              this.contentDiv.appendChild(newContent);
            }
          } catch (e) {
            // @TODO
            console.warn(e.message);
            // return false;
          }
        }
      }
      return this.contentDiv.innerHTML;
    },

    loadContent: function loadContent() {
      var self, fnDrawContent;

      self = this;
      this.starboard.spinner.show();

      fnDrawContent = function fnDrawContent(baselayerIds) {
        self.baseLayerControl = document.createElement('div');
        $(self.baseLayerControl).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_BASELAYERTREE);
        self.setContent(self.baseLayerControl);

        self.addItems(baselayerIds, self.baseLayerControl);

        self.initialized = true;
        self.starboard.spinner.hide();
        self.starboard.update();
      }; // end of "fnDrawContent()"

      if (this.proxy.baselayers_loaded) {
        fnDrawContent(this.proxy.baselayerController.baselayerIds);
      } else {
        this.proxy.hook_baselayer_loaded.push(fnDrawContent);
      }
    }, // end of "loadContent()"

    /**
     * @TODO: [drawContent description]
     *
     * @param   {[type]}  contentData  [description]
     */
    drawContent: function drawContent(contentData) {
      // PASS
    }, // end of "drawContent()"

    /**
     * @TODO: [addItems description]
     *
     * @param  {[type]}  itemData        [description]
     * @param  {[type]}  wrapperElement  [description]
     * @param  {[type]}  options         [description]
     */
    addItems: function addItems(itemData, wrapperElement, options) {
      var i, j, self, wrapper, item, uid, listItem, childList, childItem, childEntry, toggle, entry, $entry, filter, handleEntryClick, handleChangeBaselayerVisibility;

      self = this;

      if ((typeof options === "undefined" ? "undefined" : _typeof(options)) !== "object") {
        options = {
          parseAsList: true
        };
      }

      handleEntryClick = function handleEntryClick(event) {
        event.preventDefault();

        var itemUid, siblings, baselayerItem;
        siblings = $(this).parent().siblings();
        for (var i = 0; i < siblings.length; i++) {
          if (siblings[i] && $(siblings[i]).hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN)) {
            if (self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId] && self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].hasOverlays) {
              for (var _j in self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].overlayController.arrOverlays) {
                if (self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].overlayController.arrOverlays.hasOwnProperty(_j)) self.proxy.options.mapController.map.removeLayer(self.proxy.baselayerController.arrBaselayers[self.proxy.activeBaselayerId].overlayController.arrOverlays[_j].layer);
              }
            }
            $(siblings[i]).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
          }
        }
        itemUid = $(this).data('uid');

        if (self.starboard.options.caching) {
          __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].storeValue('baselayer', itemUid);
        }

        if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
          $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
        } else {
          $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
        }

        if (self.proxy.options.mapController.rightSlideElements) {
          self.proxy.options.mapController.rightSlideElements.forEach(function (element) {
            $(element).css('right', self.starboard.container.offsetWidth);
          });
        }
        $(self.starboard.element).css('right', self.starboard.container.offsetWidth);

        if (self.proxy.activeBaselayerId !== itemUid) {
          self.proxy.baselayerController.showBaseLayer(itemUid);
          if (self.proxy.baselayerController.arrBaselayers[itemUid].hasOverlays) {
            for (var _j2 in self.proxy.baselayerController.arrBaselayers[itemUid].overlayController.arrOverlays) {
              if (self.proxy.baselayerController.arrBaselayers[itemUid].overlayController.arrOverlays.hasOwnProperty(_j2)) {
                self.proxy.options.mapController.map.addLayer(self.proxy.baselayerController.arrBaselayers[itemUid].overlayController.arrOverlays[_j2].layer);
              }
            }
          }
          $(this).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);

          // if(this.nextSibling){
          //     var children = this.nextSibling.childNodes;
          //     for(i = 0; i < children.length; i++){
          //         $(children[i].firstChild).addClass(cssConstants.ACTIVE).removeClass(cssConstants.INACTIVE);
          //     }
          // }
          window.c4gMapsHooks.baselayer_changed = window.c4gMapsHooks.baselayer_changed || [];
          __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.baselayer_changed, itemUid);
        }
      }; // end of "handleEntryClick()"

      handleChangeBaselayerVisibility = function handleChangeBaselayerVisibility(baselayerConfig) {
        var id;

        for (id in self.baselayers) {
          if (self.baselayers.hasOwnProperty(id)) {
            if (id === baselayerConfig.id) {
              self.baselayers[id].$entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            } else {
              self.baselayers[id].$entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
          }
        }
      };

      wrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');

      if (itemData.length > 0) {

        for (i = 0; i < itemData.length; i += 1) {

          uid = itemData[i];
          this.baselayers[uid] = {};

          listItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
          this.baselayers[uid].entryWrapper = listItem;
          entry = document.createElement('a');
          entry.setAttribute('href', '#');
          entry.appendChild(document.createTextNode(self.proxy.baselayerController.arrBaselayers[uid].name));
          $(entry).data('id', uid);
          if (self.proxy.baselayerController.arrBaselayers[uid].hasOverlays) {

            childList = document.createElement('ul');options.parseAsList ? document.createElement('ul') : document.createElement('div');
            for (j = 0; j < self.proxy.baselayerController.arrBaselayers[uid].overlays.length; j++) {
              childItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
              childEntry = document.createElement('a');
              if (self.proxy.activeBaselayerId == uid) {
                $(childEntry).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                var overlayId = self.proxy.baselayerController.arrBaselayers[uid].overlays[j].id;
                self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays[overlayId].changeOpacity(self.proxy.baselayerController.arrBaselayers[uid].overlays[j].opacity);
              } else {
                $(childEntry).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
              }

              childEntry.appendChild(document.createTextNode(self.proxy.baselayerController.arrBaselayers[uid].overlays[j].name));
              $(childEntry).data('id', self.proxy.baselayerController.arrBaselayers[uid].overlays[j].id);
              $(childEntry).data('pid', uid);
              toggle = document.createElement('input');
              toggle.className = 'c4g-overlay-toggle';
              toggle.setAttribute('type', 'range');
              toggle.setAttribute('min', 0);
              toggle.setAttribute('max', 100);
              toggle.setAttribute('value', self.proxy.baselayerController.arrBaselayers[uid].overlays[j].opacity);
              toggle.setAttribute('steps', 10);
              $(toggle).on('input', function (event) {
                self.proxy.baselayerController.arrBaselayers[$(this).parent().data('pid')].overlayController.arrOverlays[$(this).parent().data('id')].changeOpacity(this.value);
              });

              childEntry.appendChild(toggle);
              childItem.appendChild(childEntry);
              childList.appendChild(childItem);
            }
          }
          listItem.appendChild(entry);
          if (childList) {
            listItem.appendChild(childList);
            childList = undefined;
          }

          $entry = $(entry);
          this.baselayers[uid].$entry = $entry;

          if (this.starboard.options.mapController.data.default_baselayer && parseInt(uid, 10) === parseInt(self.starboard.options.mapController.data.default_baselayer, 10)) {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
            if (self.proxy.baselayerController.arrBaselayers[uid].hasOverlays) {
              for (var _j3 in self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays) {
                if (self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays.hasOwnProperty(_j3)) {
                  self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays[_j3].changeOpacity(self.proxy.baselayerController.arrBaselayers[uid].overlayController.arrOverlays[_j3].opacity);
                }
              }
            }
          } else {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
          }

          $entry.data('uid', uid);
          $entry.click(handleEntryClick);

          wrapper.appendChild(listItem);
        }
        // Starboard Filter
        if (this.starboard.options.filter) {
          var dv = document.createElement('div');
          dv.className = "c4g-starboard-filter c4g-content-select";
          var filter = document.createElement('input');
          filter.type = 'text';
          filter.placeholder = ""; //Font Awesome
          var i = document.createElement('i');
          i.className = 'fas fa-filter';
          i.setAttribute("aria-hidden", "true");
          dv.appendChild(filter);
          dv.appendChild(i);
          filter.onkeyup = function () {
            function filter_ulli(element, showSubtree) {

              // do not apply filter for short search terms

              showSubtree = showSubtree || false; // used while traversing down the tree

              /**
               * Returns an array (modified: first element) of the given elements. Only finds children of the given parent element, but
               * no further descendants like getElementsByTagName does.
               */
              function getChildrenByTagName(element, tagName) {
                var found = [];
                for (var i = 0; i < element.children.length; i++) {
                  if (element.children[i].tagName.toUpperCase() == tagName.toUpperCase()) {
                    found.push(element.children[i]);
                  }
                }
                if (found.length > 0) {
                  return found[0]; // !!!
                } else {
                  return false;
                }
              }

              var matchFlagUl = false;
              var subtreeMatches = false;
              // for each LI do
              if (element.children) {
                for (var i = 0; i < element.children.length; i++) {
                  element.children[i].style.display = "block";

                  var isMatch = false;

                  // search current LI for filter term
                  if (element.children[i].getElementsByTagName('a')[0].innerHTML.toUpperCase().indexOf(filter.value.toUpperCase()) >= 0) {
                    // it's a match
                    isMatch = true;
                  }

                  // recurse if a subtree (UL) exists in current LI (max 1 expected)
                  var ul = getChildrenByTagName(element.children[i], "ul");

                  if (ul) {
                    // recursion
                    var hasSubtree = true;
                    subtreeMatches = filter_ulli(ul, showSubtree || isMatch);
                  } else {
                    var hasSubtree = false;
                  }

                  if (isMatch || subtreeMatches || showSubtree) {
                    matchFlagUl = true; // used while traversing up the tree again
                    // set current LI visible and open
                    element.children[i].style.display = "";

                    if (filter.value.length > 2) {
                      element.children[i].classList.remove("c4g-close");
                      element.children[i].classList.add("c4g-open");
                    }

                    element.children[i].classList.remove("c4g-starboard-filter-match"); // always remove
                    if (isMatch && filter.value.length > 0) {
                      element.children[i].classList.add("c4g-starboard-filter-match");
                    }
                    ;
                  } else {
                    // set current LI invisible
                    element.children[i].style.display = "none";
                    element.children[i].classList.remove("c4g-open");
                    element.children[i].classList.add("c4g-close");
                    element.children[i].classList.remove("c4g-starboard-filter-match");
                  }
                }

                if (matchFlagUl) {
                  return true;
                } else {
                  return false;
                }
              }
            }

            // do not react immediately but allow for some keystrokes
            setTimeout(function () {
              // two or zero letters are required
              if (filter.value.length != 1) filter_ulli(document.querySelector('.c4g-baselayertree > ul:nth-child(2)'));
            }, 350);
          };

          wrapperElement.appendChild(dv);
        }

        this.proxy.hook_baselayer_visibility.push(handleChangeBaselayerVisibility);
      }
      wrapperElement.appendChild(wrapper);
    } // end of "addItems()"

  }); // end of "add methods"
})(jQuery, this.c4g);

var Baselayerswitcher = this.c4g.maps.control.starboardplugin.Baselayerswitcher;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboardplugin-customtab.js":
/*!***************************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboardplugin-customtab.js ***!
  \***************************************************************************/
/*! exports provided: Customtab */
/*! exports used: Customtab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Customtab; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};
this.c4g.maps.control.starboardplugin = this.c4g.maps.control.starboardplugin || {};




var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   *
   * @param starboard
   * @param plugin
   * @param projectConf
   * @returns {boolean}
   * @constructor
   */

  c4g.maps.control.starboardplugin.Customtab = function (starboard, projectConf) {
    if (!starboard) {
      console.warn('Cannot initialize Project-tab without a starboard.');
      return false;
    }
    projectConf = $.extend({
      tabId: null,
      name: "Customtab",
      awesomeicon: ''
    }, projectConf);

    if (!projectConf.tabId) {
      console.warn('Cannot initialize Project-tab without an id.');
      return false;
    }

    this.initialized = false;
    //this.plugin = plugin || false;
    this.contentLoaded = false;
    this.starboard = starboard;
    this.proxy = starboard.options.mapController.proxy;
    this.map = this.proxy.options.mapController.map;
    this.layers = {};
    this.tabId = projectConf.tabId;
    this.name = projectConf.name;
    this.awesomeicon = projectConf.awesomeicon.replace('&#92;', "\\");
    starboard.plugins["customTab" + this.tabId] = this;
    this.create();
  };

  // Add methods
  c4g.maps.control.starboardplugin.Customtab.prototype = $.extend(c4g.maps.control.starboardplugin.Customtab.prototype, {

    /**
     * @TODO: [create description]
     *
     * @return  {[type]}  [description]
     */
    create: function create() {
      var self, contentWrapper, contentHeadline, contentHeadlineLink, selector, layerSwitcherTitle;

      self = this;
      contentWrapper = document.createElement('div');
      contentHeadline = document.createElement('div');
      contentHeadline.className = 'contentHeadline';

      layerSwitcherTitle = this.starboard.options.layerSwitcherTitle;

      if (self.name) {
        layerSwitcherTitle = self.name;
      }

      if (!this.starboard.options.button) {
        contentHeadline.innerHTML = layerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
      } else {
        $(contentHeadline).addClass("c4g-starboard-headline");
        contentHeadlineLink = document.createElement('a');
        contentHeadlineLink.onclick = function () {
          if ($(this).hasClass("c4g-active") !== false) {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.hideLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-active");
            $(this).addClass("c4g-inactive");
          } else {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.showLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-inactive");
            $(this).addClass("c4g-active");
          }
        };
        $(contentHeadlineLink).addClass("c4g-inactive c4g-starboard-headline-link");
        contentHeadlineLink.innerHTML = layerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
        contentHeadlineLink.innerHTML = contentHeadlineLink.innerHTML + ' ';
        contentHeadline.appendChild(contentHeadlineLink);
      }

      contentWrapper.appendChild(contentHeadline);

      this.contentDiv = document.createElement('div');
      this.contentDiv.className = 'c4g_starboardplugin_content';
      contentWrapper.appendChild(this.contentDiv);

      self.view = self.starboard.addView({
        name: self.name,
        triggerConfig: {
          tipLabel: self.name,
          className: 'c4g-starboard-view-trigger-starboardplugin-' + self.tabId,
          withHeadline: false
        },
        sectionElements: [{ section: self.starboard.contentContainer, element: contentWrapper }, { section: self.starboard.topToolbar, element: self.starboard.viewTriggerBar }]
      });
      if (this.awesomeicon.substring(0, 1) === "\\") {
        this.awesomeicon = this.awesomeicon.substring(1, this.awesomeicon.length);
      }
      selector = 'button.c4g-starboard-view-trigger-starboardplugin-' + self.tabId;
      //ToDo möglicherweise standard icon ?
      if (this.awesomeicon.length > 0) {
        var styleEl = document.createElement('style'),
            styleSheet;

        // Append style element to head
        document.head.appendChild(styleEl);

        // Grab style sheet
        styleSheet = styleEl.sheet;
        // catch firefox, because FF does not know "addRule"
        if (styleSheet.addRule && typeof document.styleSheets[0].addRule === 'function') {
          styleSheet.addRule(selector + ':before', 'content: "\\' + this.awesomeicon + '";');
        } else {
          styleSheet.insertRule(selector + ':before { content: "\\' + this.awesomeicon + '";}', 0);
        }
      }
      this.activate();
    },

    /**
     * @TODO: [activate description]
     *
     * @return  {[type]}  [description]
     */
    activate: function activate() {
      this.view.activate();
      if (!this.contentLoaded) {
        this.loadContent();
      }
    },

    /**
     * @TODO: [setContent description]
     *
     * @param  {Node}  newContent  [description]
     */
    setContent: function setContent(newContent) {
      if (newContent) {
        if (typeof newContent === "string") {
          this.contentDiv.innerHTML = newContent;
        } else {
          try {
            if (this.contentDiv.firstChild) {
              this.contentDiv.replaceChild(newContent, this.contentDiv.firstChild);
            } else {
              this.contentDiv.appendChild(newContent);
            }
          } catch (e) {
            // @TODO
            console.warn(e.message);
            // return false;
          }
        }
      }
      return this.contentDiv.innerHTML;
    },

    /**
     * @TODO: [loadContent description]
     *
     * @return  {[type]}  [description]
     */
    loadContent: function loadContent() {
      var self, fnDrawContent;

      self = this;
      this.starboard.spinner.show();

      fnDrawContent = function fnDrawContent(layerIds) {
        self.treeControl = document.createElement('div');
        $(self.treeControl).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_LAYERTREE);
        self.setContent(self.treeControl);
        self.addItems(layerIds, self.treeControl, { parseAsList: true });
        self.initialized = true;
        self.contentLoaded = true;
        self.starboard.spinner.hide();
        self.starboard.update();
      }; // end of "fnDrawContent()"

      fnDrawContent(this.proxy.layerIds);
    }, // end of "loadContent()"

    /**
     * @TODO: [addItems description]
     *
     * @param  {[type]}  itemData        [description]
     * @param  {[type]}  wrapperElement  [description]
     * @param  {[type]}  options         [description]
     */
    addItems: function addItems(itemData, wrapperElement, options) {
      var i, wrapper, item, layer, uid, listItem, entry, $entry, handleEntryClick, self, pWrapper, toggle, childWrapper;

      options = options || {};
      options = $.extend({
        parseAsList: true
      }, options);

      self = this;

      handleEntryClick = function handleEntryClick(event) {
        var itemUid;

        event.preventDefault();
        // "this" is the event sending entry
        itemUid = $(this).data('uid');
        if (self.proxy.activeLayerIds[itemUid]) {
          // hide layer
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          $(this).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
          self.hideLayer(itemUid);
        } else {
          // show layer
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
          $(this).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          self.showLayer(itemUid);
        }
      };

      // register hook to switch childs of layers as well
      this.proxy.hook_layer_visibility.push(function (layerId) {
        var j, changedLayer;

        changedLayer = self.layers[layerId];
        if (changedLayer && changedLayer.$entries) {
          for (j = 0; j < changedLayer.$entries.length; j += 1) {
            if (self.proxy.activeLayerIds[layerId]) {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            } else {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
          }
        }
      }); // end of hook

      // add hook function for changed zoom
      //   needed to change the entry-classes
      this.proxy.hook_map_zoom.push(function () {
        var j, id, layer;

        for (id in self.layers) {
          if (self.layers.hasOwnProperty(id)) {
            layer = self.layers[id];
            if (layer && layer.$entries) {
              for (j = 0; j < layer.$entries.length; j += 1) {
                if (self.proxy.checkLayerIsActiveForZoom(id)) {
                  layer.$entries[j].removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                } else {
                  layer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                }
              }
            }
          }
        }
      }); // end of hook

      // build the layer tree
      wrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
      if (itemData && itemData.length > 0) {
        for (i = 0; i < itemData.length; i += 1) {
          uid = itemData[i];
          //layer = this.plugin.customTabs[this.tabId].drawnFeatures[uid];
          layer = this.proxy.layerController.arrLayers[uid];
          // skip layer if it doesn't belong to this tab
          if (!(layer.renderSpecial == true && layer.tabId == this.tabId)) {
            continue;
          }
          // do not render the startab layer itself as parent level
          if (layer.type === "startab") {
            continue;
          }
          // check if layer wants to be displayed in starboard tab
          if (layer.hideWhenInTab === true) {
            continue;
          }
          if (layer.hide === "1") {
            if (this.proxy.activeLayerIds[layer.id]) {
              // this.hideLayer(layer.id);
            }
          }
          // check if the layer should be displayed
          if (!layer.display) {
            continue;
          }
          item = {};
          this.layers[uid] = item;
          listItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
          item.entryWrappers = item.entryWrappers || [];
          item.entryWrappers.push(listItem);
          entry = document.createElement('a');
          entry.setAttribute('href', '#');
          entry.appendChild(document.createTextNode(layer.layername || layer.name));
          listItem.appendChild(entry);
          $entry = $(entry);
          item.$entries = item.$entries || [];
          item.$entries.push($entry);
          $entry.data('uid', uid);
          $entry.click(handleEntryClick);

          // prepare insertion of childs
          if (layer.visibleChilds) {
            toggle = document.createElement('span');
            $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
            $(toggle).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ICON);
            $(toggle).click(function () {
              if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
                $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
              } else {
                $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
              }
              if (self.proxy.options.mapController.rightSlideElements) {
                self.proxy.options.mapController.rightSlideElements.forEach(function (element) {
                  $(element).css('right', self.starboard.container.offsetWidth);
                });
              }
              $(self.starboard.element).css('right', self.starboard.container.offsetWidth);
            });
            $(toggle).insertBefore($entry);
            childWrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
            item.childWrappers = item.childWrappers || [];
            item.childWrappers.push(childWrapper);
            listItem.appendChild(childWrapper);
          }

          if (this.proxy.activeLayerIds[uid]) {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          } else {
            $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
          }
          if (this.layers[layer.pid]) {
            // is child-element
            pWrapper = this.layers[layer.pid].childWrappers;
            if (pWrapper) {
              pWrapper[pWrapper.length - 1].appendChild(listItem);
            }
          } else {
            wrapper.appendChild(listItem);
          }
        } // end of for-loop
        // Starboard Filter
        if (this.starboard.options.filter) {
          var dv = document.createElement('div');
          dv.className = "c4g-starboard-filter c4g-content-select";
          var filter = document.createElement('input');
          filter.type = 'text';
          filter.placeholder = ""; //Font Awesome
          var i = document.createElement('i');
          i.className = 'fas fa-filter';
          i.setAttribute("aria-hidden", "true");
          dv.appendChild(filter);
          dv.appendChild(i);
          filter.onkeyup = function () {
            function filter_ulli(element, showSubtree) {

              // do not apply filter for short search terms

              showSubtree = showSubtree || false; // used while traversing down the tree

              /**
               * Returns an array (modified: first element) of the given elements. Only finds children of the given parent element, but
               * no further descendants like getElementsByTagName does.
               */
              function getChildrenByTagName(element, tagName) {
                var found = [];
                for (var i = 0; i < element.children.length; i++) {
                  if (element.children[i].tagName.toUpperCase() == tagName.toUpperCase()) {
                    found.push(element.children[i]);
                  }
                }
                if (found.length > 0) {
                  return found[0]; // !!!
                } else {
                  return false;
                }
              }

              var matchFlagUl = false;
              var subtreeMatches = false;
              // for each LI do
              for (var i = 0; i < element.children.length; i++) {
                element.children[i].style.display = "block";

                var isMatch = false;

                // search current LI for filter term
                if (element.children[i].getElementsByTagName('a')[0].innerHTML.toUpperCase().indexOf(filter.value.toUpperCase()) >= 0) {
                  // it's a match
                  isMatch = true;
                }

                // recurse if a subtree (UL) exists in current LI (max 1 expected)
                var ul = getChildrenByTagName(element.children[i], "ul");

                if (ul) {
                  // recursion
                  var hasSubtree = true;
                  subtreeMatches = filter_ulli(ul, showSubtree || isMatch);
                } else {
                  var hasSubtree = false;
                }

                if (isMatch || subtreeMatches || showSubtree) {
                  matchFlagUl = true; // used while traversing up the tree again
                  // set current LI visible and open
                  element.children[i].style.display = "";

                  if (filter.value.length > 2) {
                    element.children[i].classList.remove("c4g-close");
                    element.children[i].classList.add("c4g-open");
                  }

                  element.children[i].classList.remove("c4g-starboard-filter-match"); // always remove
                  if (isMatch && filter.value.length > 0) {
                    element.children[i].classList.add("c4g-starboard-filter-match");
                  }
                } else {
                  // set current LI invisible
                  element.children[i].style.display = "none";
                  element.children[i].classList.remove("c4g-open");
                  element.children[i].classList.add("c4g-close");
                  element.children[i].classList.remove("c4g-starboard-filter-match");
                }
              }

              if (matchFlagUl) {
                return true;
              } else {
                return false;
              }
            }

            // do not react immediately but allow for some keystrokes
            setTimeout(function () {
              // two or zero letters are required
              if (filter.value.length != 1) filter_ulli(document.querySelector('.c4g-layertree > ul:nth-child(2)'));
            }, 350);
          };

          wrapperElement.appendChild(dv);
        }
        wrapperElement.appendChild(wrapper);
      }
    }, // end of "addItems()"

    showLayer: function showLayer(itemUid) {
      if (this.proxy.activeLayerIds[itemUid]) {
        return true;
      } else {
        this.proxy.layerController.showLayer(itemUid);
      }
    }, // end of "showLayer()"

    hideLayer: function hideLayer(itemUid) {
      if (!this.proxy.activeLayerIds[itemUid]) {
        return true;
      } else {
        this.proxy.layerController.hideLayer(itemUid);
      }
    } // end of "hideLayer()"


  }); // end of "add methods"
})(jQuery, this.c4g);

var Customtab = this.c4g.maps.control.starboardplugin.Customtab;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-starboardplugin-layerswitcher.js":
/*!*******************************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-starboardplugin-layerswitcher.js ***!
  \*******************************************************************************/
/*! exports provided: Layerswitcher */
/*! exports used: Layerswitcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Layerswitcher; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};
this.c4g.maps.control.starboardplugin = this.c4g.maps.control.starboardplugin || {};





var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * Constructor
   *
   * @extends {ol.control.Control}
   * @param   {object}              starboard
   */

  c4g.maps.control.starboardplugin.Layerswitcher = function (starboard) {
    if (!starboard) {
      console.warn('Cannot initialize Layerswitcher without a starboard.');
      return false;
    }

    this.initialized = false;
    this.layers = {};

    this.starboard = starboard;
    this.proxy = starboard.options.mapController.proxy;
    this.create();
    this.loadContent();
  };

  // Add methods
  c4g.maps.control.starboardplugin.Layerswitcher.prototype = $.extend(c4g.maps.control.starboardplugin.Layerswitcher.prototype, {

    create: function create() {
      var self, contentWrapper, contentHeadline, contentHeadlineLink, contentInfo, layerSwitcherTitle;

      layerSwitcherTitle = this.starboard.options.layerSwitcherTitle;

      self = this;

      contentWrapper = document.createElement('div');
      contentHeadline = document.createElement('div');
      contentHeadline.className = 'contentHeadline';

      if (!this.starboard.options.button) {
        contentHeadline.innerHTML = layerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
      } else {
        $(contentHeadline).addClass("c4g-starboard-headline");
        contentHeadlineLink = document.createElement('a');
        contentHeadlineLink.onclick = function () {
          if ($(this).hasClass("c4g-active") !== false) {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.hideLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-active");
            $(this).addClass("c4g-inactive");
          } else {
            for (var i = 0; i < self.proxy.layerIds.length; i++) {
              self.proxy.layerController.showLayer(self.proxy.layerIds[i]);
            }
            $(this).removeClass("c4g-inactive");
            $(this).addClass("c4g-active");
          }
        };
        $(contentHeadlineLink).addClass("c4g-inactive c4g-starboard-headline-link");
        contentHeadlineLink.innerHTML = layerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_LAYERSWITCHER;
        contentHeadlineLink.innerHTML = contentHeadlineLink.innerHTML + ' ';
        contentHeadline.appendChild(contentHeadlineLink);
      }

      contentWrapper.appendChild(contentHeadline);

      this.contentDiv = document.createElement('div');
      this.contentDiv.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_CONTENT_LAYERSWITCHER;
      contentInfo = document.createElement('p');
      this.contentDiv.appendChild(contentInfo);
      contentWrapper.appendChild(this.contentDiv);

      self.view = self.starboard.addView({
        name: 'layerswitcher',
        triggerConfig: {
          tipLabel: layerSwitcherTitle || langConstants.STARBOARD_VIEW_TRIGGER_LAYERSWITCHER,
          className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_VIEW_TRIGGER_LAYERSWITCHER,
          withHeadline: false
        },
        sectionElements: [{ section: self.starboard.contentContainer, element: contentWrapper }, { section: self.starboard.topToolbar, element: self.starboard.viewTriggerBar }]
      });
    },

    /**
     * @TODO: [activate description]
     *
     * @return  {[type]}  [description]
     */
    activate: function activate() {
      this.view.activate();
    }, // end of "activate()"

    /**
     * @TODO: [setContent description]
     *
     * @param  {[type]}  newContent  [description]
     */
    setContent: function setContent(newContent) {
      if (newContent) {
        if (typeof newContent === "string") {
          this.contentDiv.innerHTML = newContent;
        } else {
          try {
            if (this.contentDiv.firstChild) {
              this.contentDiv.replaceChild(newContent, this.contentDiv.firstChild);
            } else {
              this.contentDiv.appendChild(newContent);
            }
          } catch (e) {
            // @TODO
            console.warn(e.message);
            // return false;
          }
        }
      }
      return this.contentDiv.innerHTML;
    }, // end of "setContent()"

    /**
     * @TODO: [loadContent description]
     *
     * @return  {[type]}  [description]
     */
    loadContent: function loadContent() {
      var self, fnDrawContent;

      self = this;
      this.starboard.spinner.show();

      fnDrawContent = function fnDrawContent(layerIds) {
        self.treeControl = document.createElement('div');
        $(self.treeControl).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].STARBOARD_LAYERTREE);
        self.setContent(self.treeControl);

        self.addItems(layerIds, self.treeControl);

        self.initialized = true;
        self.starboard.spinner.hide();
        self.starboard.update();
      }; // end of "fnDrawContent()"

      if (this.proxy.layers_loaded) {
        fnDrawContent(this.proxy.layerIds);
      } else {
        this.proxy.hook_layer_loaded.push(fnDrawContent);
      }
    }, // end of "loadContent()"

    /**
     * @TODO: [drawContent description]
     */
    drawContent: function drawContent(contentData) {
      // PASS
    }, // end of "drawContent()"

    /**
     * @TODO: [addItems description]
     *
     * @param  {[type]}  itemData        [description]
     * @param  {[type]}  wrapperElement  [description]
     * @param  {[type]}  options         [description]
     */
    addItems: function addItems(itemData, wrapperElement, options) {
      var i, self, filter, wrapper, childWrapper, pWrapper, item, layer, uid, listItem, entry, $entry, toggle, fnHandleEntryClick, fnChildEntryClick, fnChildEntryShow, zoomToExtent, layerClass;

      self = this;

      options = options || {};
      options = $.extend({
        parseAsList: true
      }, options);

      wrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');

      // create handler for entry-clicks
      fnHandleEntryClick = function fnHandleEntryClick(event) {
        var itemUid, layerItem;

        event.preventDefault();

        itemUid = $(this).data('uid');
        layerItem = self.proxy.layerController.arrLayers[itemUid];

        if (self.proxy.activeLayerIds[itemUid]) {
          // hide layer
          self.proxy.layerController.hideLayer(itemUid);
          if (parseInt(layer.pid, 10) == 0) {
            // hide all childs, because clicked layer is the map itself
            for (var id in self.proxy.activeLayerIds) {
              if (self.proxy.activeLayerIds.hasOwnProperty(id)) {
                self.proxy.layerController.hideLayer(id);
              }
            }
          }
        } else {
          // show layer
          self.proxy.layerController.showLayer(itemUid);
          //zooom to extent
          zoomToExtent(itemUid);
        }
        if (self.handleSelectedChilds(this)) {
          self.updateParentLayers(this, itemUid, layerItem);
        }

        // c4g.maps.layers[itemUid] = layerItem;
      }; // end of "fnHandleEntryClick()"
      fnChildEntryClick = function fnChildEntryClick(event) {
        event.preventDefault();
        var itemUid = $(this).data('uid');
        var parent = $(this).parent().parent().parent();
        var childs = $(parent).children();
        var parentUid = $(childs[1]).data('uid');
        if ($(this).hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE)) {
          self.proxy.layerController.hideChildLayer(parentUid, itemUid);
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
        } else if ($(this).hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE)) {
          self.proxy.layerController.showChildLayer(parentUid, itemUid);
          $(this).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
        }
      };
      fnChildEntryShow = function fnChildEntryShow(event) {
        event.preventDefault();
        var parent = this.parentElement;
        var uid = $(parent.firstChild).data('uid');
        parent = $(this).parent().parent().parent();
        var childs = $(parent).children();
        var parentUid = $(childs[1]).data('uid');
        uid = uid.replace(parentUid, '');
        var layer = self.proxy.layerController.arrLayers[parentUid].vectorLayer;
        if (layer) {
          var singleLayer = layer.getLayers().getArray()[uid];
          var feature = singleLayer.getSource().getFeatures()[0];
          self.proxy.options.mapController.map.getView().fit(feature.getGeometry());
        }
      };

      zoomToExtent = function zoomToExtent(itemUid) {
        //function to zoom to the extent of a map structure and its children
        var layerItem,
            vectorArray,
            layerGroup,
            coords,
            geometry,
            featureList,
            featureArray,
            coordinates = [],
            extent,
            center,
            key;
        layerItem = self.proxy.layerController.arrLayers[itemUid];
        if (layerItem && layerItem.zoom_locations === "1") {
          if (layerItem.hasChilds) {
            for (key in layerItem.childs) {
              if (layerItem.childs.hasOwnProperty(key)) {
                layer = layerItem.childs[key];
                if (layer.type == "overpass") {
                  continue;
                }
                vectorArray = layer.content;
                if (vectorArray === undefined) {
                  // catch case of linked layers
                  continue;
                }
                if ((typeof vectorArray === "undefined" ? "undefined" : _typeof(vectorArray)) === "object") {
                  vectorArray = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].objectToArray(vectorArray);
                }
                layerGroup = layer.vectorLayer;
                if (vectorArray && vectorArray.forEach && typeof vectorArray.forEach === 'function') {
                  vectorArray.forEach(function (vectorLayer) {
                    if (vectorLayer && vectorLayer.data && vectorLayer.data.geometry && vectorLayer.data.geometry.coordinates) {
                      if (vectorLayer.data.geometry.type === "Point") {
                        coords = ol.proj.transform([parseFloat(vectorLayer.data.geometry.coordinates[0]), parseFloat(vectorLayer.data.geometry.coordinates[1])], 'EPSG:4326', 'EPSG:3857');
                        geometry = new ol.geom.Point(coords);
                        coordinates.push(geometry.getCoordinates());
                      }
                    }
                  });
                }
                if (layerGroup) {
                  // handle more complex geometries
                  featureList = layerGroup.getLayers();
                  featureArray = featureList.getArray();
                  featureArray.forEach(function (feature) {
                    if (layer.type === "kml") {
                      var source = feature.getSource();
                      //var sourceFeatures = source.getFeatures();
                      source.getExtent().forEach(function (coordinate) {
                        coordinates.push(coordinate);
                      });
                    } else {
                      if (ol.extent.getTopRight(feature.getSource().getExtent())['0'] != "Infinity" && ol.extent.getTopRight(feature.getSource().getExtent())['0'] != "-Infinity") {

                        coordinates.push(ol.extent.getTopRight(feature.getSource().getExtent()));
                        coordinates.push(ol.extent.getTopLeft(feature.getSource().getExtent()));
                        coordinates.push(ol.extent.getBottomRight(feature.getSource().getExtent()));
                        coordinates.push(ol.extent.getBottomLeft(feature.getSource().getExtent()));
                      }
                    }
                  });
                }
              }
            }
          }

          if (layerItem.type !== "overpass" && layerItem.vectorLayer) {
            vectorArray = layer.content;
            if (vectorArray !== undefined) {
              // catch case of linked layers
              if ((typeof vectorArray === "undefined" ? "undefined" : _typeof(vectorArray)) === "object") {
                vectorArray = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].objectToArray(vectorArray);
              }
              layerGroup = layer.vectorLayer;
              if (vectorArray && vectorArray.forEach && typeof vectorArray.forEach === 'function') {
                vectorArray.forEach(function (vectorLayer) {
                  if (vectorLayer && vectorLayer.data && vectorLayer.data.geometry && vectorLayer.data.geometry.coordinates) {
                    if (vectorLayer.data.geometry.type === "Point") {
                      coords = ol.proj.transform([parseFloat(vectorLayer.data.geometry.coordinates[0]), parseFloat(vectorLayer.data.geometry.coordinates[1])], 'EPSG:4326', 'EPSG:3857');
                      geometry = new ol.geom.Point(coords);
                      coordinates.push(geometry.getCoordinates());
                    }
                  }
                });
              }
              if (layerGroup) {
                // handle more complex geometries
                featureList = layerGroup.getLayers();
                featureArray = featureList.getArray();
                featureArray.forEach(function (feature) {
                  if (layer.type !== "overpass") {
                    if (layer.type === "kml") {
                      var source = feature.getSource();
                      //var sourceFeatures = source.getFeatures();
                      source.getExtent().forEach(function (coordinate) {
                        coordinates.push(coordinate);
                      });
                    } else {
                      coordinates.push(ol.extent.getTopRight(feature.getSource().getExtent()));
                      coordinates.push(ol.extent.getTopLeft(feature.getSource().getExtent()));
                      coordinates.push(ol.extent.getBottomRight(feature.getSource().getExtent()));
                      coordinates.push(ol.extent.getBottomLeft(feature.getSource().getExtent()));
                    }
                  }
                });
              }
            }
          }

          extent = ol.extent.boundingExtent(coordinates);
          if (extent[0] === Infinity || extent[0] === -Infinity) {
            return;
          }
          self.proxy.options.mapController.map.getView().fit(extent, self.proxy.options.mapController.map.getSize());
          center = self.proxy.options.mapController.map.getView().getCenter();
          if (isNaN(center[0])) {
            self.proxy.options.mapController.map.getView().setCenter([50, 10]);
            self.proxy.options.mapController.map.getView().setZoom(mapData.minZoom || 10);
          }
        }
      }; //end of zoom to extent
      // add hook function for changed layer-visibility
      //   needed to change the entry-classes
      this.proxy.hook_layer_visibility.push(function (layerId) {
        var j, changedLayer;

        changedLayer = self.layers[layerId];
        if (changedLayer && changedLayer.$entries) {
          for (j = 0; j < changedLayer.$entries.length; j += 1) {
            if (self.proxy.activeLayerIds[layerId]) {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            } else {
              changedLayer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
            self.handleSelectedChilds(changedLayer.$entries[j]);
          }
        }
      });

      // add hook function for changed zoom
      //   needed to change the entry-classes
      this.proxy.hook_map_zoom.push(function () {
        var j, id, layer;

        for (id in self.layers) {
          if (self.layers.hasOwnProperty(id)) {
            layer = self.layers[id];
            if (layer && layer.$entries) {
              for (j = 0; j < layer.$entries.length; j += 1) {
                if (self.proxy.checkLayerIsActiveForZoom(id)) {
                  layer.$entries[j].removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                } else {
                  layer.$entries[j].addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
                }
              }
            }
          }
        }
      }); // end of hook

      if (itemData && itemData.length > 0) {
        for (i = 0; i < itemData.length; i += 1) {
          uid = itemData[i];
          layer = self.proxy.layerController.arrLayers[uid];
          item = {};
          this.layers[uid] = item;
          // renderSpecial is set when a layer is rendered in its own tab
          if (layer.renderSpecial) {
            continue;
          }

          if (layer && layer.display) {
            listItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
            item.entryWrappers = item.entryWrappers || [];
            item.entryWrappers.push(listItem);

            entry = document.createElement('a');
            entry.setAttribute('href', '#');
            entry.appendChild(document.createTextNode(layer.name));
            listItem.appendChild(entry);

            $entry = $(entry);
            item.$entries = item.$entries || [];
            item.$entries.push($entry);

            if (!this.proxy.checkLayerIsActiveForZoom(uid)) {
              $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].DISABLED);
            }

            $entry.data('uid', uid);
            $entry.click(fnHandleEntryClick);

            if (layer.visibleChilds || layer.split_geojson) {
              toggle = document.createElement('span');

              if (layer.hide_child !== '1') {
                $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
                $(toggle).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ICON);
              }
              $(toggle).click(function () {
                if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
                } else {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
                }
                if (self.proxy.options.mapController.rightSlideElements) {
                  self.proxy.options.mapController.rightSlideElements.forEach(function (element) {
                    $(element).css('right', self.starboard.container.offsetWidth);
                  });
                }
                $(self.starboard.element).css('right', self.starboard.container.offsetWidth);
              });
              $(toggle).insertBefore($entry);
              childWrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
              item.childWrappers = item.childWrappers || [];
              item.childWrappers.push(childWrapper);
              if (layer.hide_child !== '1') {
                listItem.appendChild(childWrapper);
              }
              if (layer.split_geojson && layer.content[0]) {
                var data = layer.content[0].data;
                if (data && data.features) {
                  for (var _i = 0; _i < data.features.length; _i++) {
                    var feature = data.features[_i];
                    var childListItem = options.parseAsList ? document.createElement('li') : document.createElement('div');
                    var childItem = {};
                    childItem.entryWrappers = childItem.entryWrappers || [];
                    childItem.entryWrappers.push(childListItem);
                    var childEntry = document.createElement('a');
                    childEntry.setAttribute('href', '#');
                    childEntry.appendChild(document.createTextNode(feature.properties[layer.geojson_attributes.split(',')[0]]));
                    childListItem.appendChild(childEntry);
                    var childUid = uid + "" + _i;
                    var $childEntry = $(childEntry);
                    childItem.$entries = item.$entries || [];
                    childItem.$entries.push($entry);
                    childWrapper.appendChild(childListItem);
                    $childEntry.data('uid', childUid);
                    if (layer.geojson_zoom) {
                      $childEntry.click(fnChildEntryShow);
                      $childEntry.addClass('c4g-geojson-button');
                    } else {
                      $childEntry.click(fnChildEntryClick);
                      if (this.proxy.activeLayerIds[uid]) {
                        $childEntry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
                      } else {
                        $childEntry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
                      }
                    }

                    if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.addChilds) === 'object') {
                      __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.addChilds);
                    }

                    if (window.c4gMapsHooks.starboard_layer_activate && window.c4gMapsHooks.starboard_layer_activate.length > 0) {
                      var paramObj = { 'feature': feature, 'parentItem': childListItem, 'entry': $childEntry };
                      __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.starboard_layer_activate, paramObj);
                    }
                  }
                }
              }
            }

            if (this.proxy.activeLayerIds[uid]) {
              $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            } else {
              $entry.addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].INACTIVE);
            }

            // [info]:  In order for this to work,
            //          the parent layers need to be
            //          listed before their childs
            if (this.layers[layer.pid]) {
              // is child-element
              pWrapper = this.layers[layer.pid].childWrappers;
              pWrapper[pWrapper.length - 1].appendChild(listItem);
            } else if (parseInt(layer.pid, 10) == 0) {
              // layer is map itself with a layer
              toggle = document.createElement('span');
              if (layer.hide_child !== '1') {
                $(listItem).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
              }
              $(toggle).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ICON);
              $(toggle).click(function () {
                if ($(this).parent().hasClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE)) {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN);
                } else {
                  $(this).parent().removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OPEN).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CLOSE);
                }
              });
              $(toggle).insertBefore($entry);
              childWrapper = options.parseAsList ? document.createElement('ul') : document.createElement('div');
              item.childWrappers = item.childWrappers || [];
              item.childWrappers.push(childWrapper);
              listItem.appendChild(childWrapper);
              wrapper.appendChild(listItem);
            } else {
              // is not a child-element (pid == mapId)
              wrapper.appendChild(listItem);
            }

            if (layer.id) {
              var idstr = layer.id.toString();
              layerClass = encodeURIComponent(idstr.toLowerCase()).replace(/%[0-9A-F]{2}/gi, '');
              $(listItem).addClass('c4g_starboard_item_' + layerClass);
            }

            if (layer.cssClass) {
              $(listItem).addClass(layer.cssClass);
            }

            // call hook "layerswitcher_forEachItem"
            if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.layerswitcher_forEachItem) === "object") {
              __WEBPACK_IMPORTED_MODULE_2__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.layerswitcher_forEachItem, { that: this, item: item, entry: $entry });
            }
          }
        } // end of for-loop

        // Starboard Filter
        if (this.starboard.options.filter) {
          var dv = document.createElement('div');
          dv.className = "c4g-starboard-filter c4g-content-select";
          var filter = document.createElement('input');
          filter.type = 'text';
          filter.placeholder = ""; //Font Awesome
          var i = document.createElement('i');
          i.className = 'fas fa-filter';
          i.setAttribute("aria-hidden", "true");
          dv.appendChild(filter);
          dv.appendChild(i);
          filter.onkeyup = function () {
            function filter_ulli(element, showSubtree) {

              // do not apply filter for short search terms

              showSubtree = showSubtree || false; // used while traversing down the tree

              /**
               * Returns an array (modified: first element) of the given elements. Only finds children of the given parent element, but
               * no further descendants like getElementsByTagName does.
               */
              function getChildrenByTagName(element, tagName) {
                var found = [];
                for (var i = 0; i < element.children.length; i++) {
                  if (element.children[i].tagName.toUpperCase() == tagName.toUpperCase()) {
                    found.push(element.children[i]);
                  }
                }
                if (found.length > 0) {
                  return found[0]; // !!!
                } else {
                  return false;
                }
              }

              var matchFlagUl = false;
              var subtreeMatches = false;
              // for each LI do
              for (var i = 0; i < element.children.length; i++) {
                element.children[i].style.display = "block";

                var isMatch = false;

                // search current LI for filter term
                if (element.children[i].getElementsByTagName('a')[0].innerHTML.toUpperCase().indexOf(filter.value.toUpperCase()) >= 0) {
                  // it's a match
                  isMatch = true;
                }

                // recurse if a subtree (UL) exists in current LI (max 1 expected)
                var ul = getChildrenByTagName(element.children[i], "ul");

                if (ul) {
                  // recursion
                  var hasSubtree = true;
                  subtreeMatches = filter_ulli(ul, showSubtree || isMatch);
                } else {
                  var hasSubtree = false;
                }

                if (isMatch || subtreeMatches || showSubtree) {
                  matchFlagUl = true; // used while traversing up the tree again
                  // set current LI visible and open
                  element.children[i].style.display = "";

                  if (filter.value.length > 2) {
                    element.children[i].classList.remove("c4g-close");
                    element.children[i].classList.add("c4g-open");
                  }

                  element.children[i].classList.remove("c4g-starboard-filter-match"); // always remove
                  if (isMatch && filter.value.length > 0) {
                    element.children[i].classList.add("c4g-starboard-filter-match");
                  };
                } else {
                  // set current LI invisible
                  element.children[i].style.display = "none";
                  element.children[i].classList.remove("c4g-open");
                  element.children[i].classList.add("c4g-close");
                  element.children[i].classList.remove("c4g-starboard-filter-match");
                }
              }

              if (matchFlagUl) {
                return true;
              } else {
                return false;
              }
            }
            // do not react immediately but allow for some keystrokes 
            setTimeout(function () {
              // two or zero letters are required
              if (filter.value.length != 1) filter_ulli(document.querySelector('.c4g-layertree > ul:nth-child(2)'));
            }, 350);
          };

          wrapperElement.appendChild(dv);
        }
        wrapperElement.appendChild(wrapper);
      }
    }, // end of "addItems()"
    /**
     * Function which checks for a given layer id, if any of the childs are currently selected.
     * @param layerUid
     * @returns {boolean}
     */
    checkChildSelections: function checkChildSelections(layerUid) {
      var layer, childActive, self;
      self = this;
      childActive = 0;
      layer = self.proxy.layerController.arrLayers[layerUid];
      if (layer && layer.childs && layer.childs.length > 0) {
        // layer has childs
        layer.childs.forEach(function (child) {
          if (self.proxy.activeLayerIds[child.id]) {
            childActive = childActive + 1;
          } else {
            // check if any childs of childs are active
            childActive = childActive + self.checkChildSelections(child.uid);
          }
        });
      }
      return childActive;
    }, // end of "checkChildSelections()"

    /**
     * Function for coloring the layerswitcher entries, if there are any sublayers selected
     * @param entry
     */
    handleSelectedChilds: function handleSelectedChilds(entry) {
      if (this.checkChildSelections($(entry).data('uid')) >= 1) {
        $(entry).css('font-weight', 'bold');
      } else {
        $(entry).css('font-weight', 'normal');
      }
      this.starboard.update();
      return true;
    },

    updateParentLayers: function updateParentLayers(entry, layerUid, clickedLayer) {
      var layer, parentEntry, parentLayer;

      layer = this.proxy.layerController.arrLayers[layerUid];
      if (layer.pid != this.starboard.options.mapController.data.mapId) {
        // the layer has parents
        // by this we can access only the single span where the parent entry is in
        parentLayer = this.proxy.layerController.arrLayers[layer.pid];
        if (parentLayer) {
          parentEntry = entry.parentNode.parentNode.parentNode.getElementsByTagName('a')[0];
          if (parentEntry) {
            if (this.proxy.activeLayerIds[clickedLayer.id]) {
              $(parentEntry).css('font-weight', 'bold');
            } else {
              if (this.checkChildSelections($(parentEntry).data('uid')) >= 1) {
                $(parentEntry).css('font-weight', 'bold');
              } else {
                $(parentEntry).css('font-weight', 'normal');
                //$(parentEntry).addClass(cssConstants.INACTIVE);
              }
            }
            this.updateParentLayers(parentEntry, parentLayer.id, parentLayer);
          }
        }
      } else {
        return false;
      }
    }

  }); // end of "add methods"
})(jQuery, this.c4g);

var Layerswitcher = this.c4g.maps.control.starboardplugin.Layerswitcher;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-zoomlevel.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-zoomlevel.js ***!
  \***********************************************************/
/*! exports provided: Zoomlevel */
/*! exports used: Zoomlevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Zoomlevel; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.control = this.c4g.maps.control || {};



(function ($, c4g) {
  'use strict';

  /**
   * Displays the current zoomlevel on the map.
   *
   * @constructor
   * @extends  {ol.control.Control}
   *
   * @param    {Object}              opt_options  *optional* control options.
   */

  c4g.maps.control.Zoomlevel = function (options) {

    var self, element, updateZoomlevel;

    self = this;

    if (!options || !options.mapView) {
      console.warn('Zoomlevel control needs to know the map.');
      return false;
    }

    // default options
    options = $.extend({
      className: __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ZOOM_LEVEL,
      undefinedHTML: ''
    }, options);

    element = document.createElement('div');
    element.className = options.className;
    element.innerHTML = options.mapView.getZoom();

    updateZoomlevel = function updateZoomlevel() {
      element.innerHTML = parseInt(options.mapView.getZoom());
    };

    options.mapView.on('change:resolution', updateZoomlevel);
    ol.control.Control.call(this, {
      element: element,
      target: options.target
    });
  };
  ol.inherits(c4g.maps.control.Zoomlevel, ol.control.Control);

  /*
   * Add methods
   */
  c4g.maps.control.Zoomlevel.prototype = $.extend(c4g.maps.control.Zoomlevel.prototype, {

    // nothing to add here

  }); // end of "add methods" ---
})(jQuery, this.c4g);

var Zoomlevel = this.c4g.maps.control.Zoomlevel;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-interaction-geopicker.js":
/*!***************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-interaction-geopicker.js ***!
  \***************************************************************/
/*! exports provided: GeoPicker */
/*! exports used: GeoPicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GeoPicker; });
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.interaction = this.c4g.maps.interaction || {};

(function ($, c4g) {
    'use strict';

    /**
     *
     * @param options
     * @returns {boolean}
     * @constructor
     */

    c4g.maps.interaction.GeoPicker = function (options) {
        var mapData, mapContainer, lat, lon, latIdx, lonIdx, latRnd, lonRnd;

        this.options = options || {};

        if (!this.options.mapContainer || !this.options.mapContainer.data) {
            console.warn('The GeoPicker needs a "mapContainer" in order to work.');
            return false;
        }

        mapData = this.options.mapContainer.data;
        mapContainer = this.options.mapContainer;
        // configurate geopicker
        this.$fieldGeoX = $(mapData.geopicker.input_geo_x);
        this.$fieldGeoY = $(mapData.geopicker.input_geo_y);

        this.opticLayerSource = new ol.source.Vector({});
        this.opticLayerVector = new ol.layer.Vector({
            source: this.opticLayerSource,
            style: this.geoPickerStyleFunction
        });
        this.opticLayerFeature = null;

        if (this.$fieldGeoX.val() && this.$fieldGeoY.val()) {
            lat = this.$fieldGeoY.val();
            lon = this.$fieldGeoX.val();

            if (mapData.geopicker.anonymous) {
                this.$fieldGeoY.remove();
                this.$fieldGeoX.remove();

                latIdx = lat.indexOf('.');
                lonIdx = lon.indexOf('.');
                lat = lat.replace(/\D/g, "");
                lon = lon.replace(/\D/g, "");
                latRnd = Math.round(Math.random() * (99999999999 - 1) + 1);
                lonRnd = Math.round(Math.random() * (99999999999 - 1) + 1);
                if (latRnd > 49999999999) {
                    lat = parseInt(lat) - latRnd;
                } else {
                    lat = parseInt(lat) + latRnd;
                }
                if (lonRnd < 50000000000) {
                    lon = parseInt(lon) - lonRnd;
                } else {
                    lon = parseInt(lon) + lonRnd;
                }
                lat = lat + "";
                lon = lon + "";
                lat = lat.substr(0, latIdx) + '.' + lat.substr(latIdx, lat.length - latIdx);
                lon = lon.substr(0, lonIdx) + '.' + lon.substr(lonIdx, lon.length - lonIdx);
            }

            this.opticLayerFeature = new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.fromLonLat([parseFloat(lon), parseFloat(lat)])),
                pickerColor: [0, 180, 100, 1],
                anonymous: mapData.geopicker.anonymous
            });

            this.opticLayerSource.addFeature(this.opticLayerFeature);

            mapContainer.map.getView().fit(this.opticLayerSource.getExtent(), mapContainer.map.getSize());
            // set zoom so we can see some tiles without error
            mapContainer.map.getView().setZoom(15);
        } else if (mapData.geoLocation && typeof mapData.geoLocation.setTracking === 'function') {
            mapData.geoLocation.setTracking(true);
        }
        mapContainer.map.addLayer(this.opticLayerVector);

        //TODO wenn geopicker.clickDisabled (oder so) gesetzt ist, this.options.handleEvent = function(){}

        // inheritance-stuff
        ol.interaction.Interaction.call(this, {
            handleEvent: this.options.handleEvent || this.handleEvent
            // handleEvent: this.options.handleEvent || c4g.maps.interaction.GeoPicker.handleEvent
        });
    };
    ol.inherits(c4g.maps.interaction.GeoPicker, ol.interaction.Interaction);

    /*
     * Add methods
     */
    c4g.maps.interaction.GeoPicker.prototype = $.extend(c4g.maps.interaction.GeoPicker.prototype, {

        geoPickerStyleFunction: function geoPickerStyleFunction(feature, projection, getId) {
            var color, white, result;

            if (getId) {
                return -1;
            }

            white = [255, 255, 255, 1];
            if (feature && typeof feature.get === 'function' && feature.get('pickerColor')) {
                color = feature.get('pickerColor');
            } else {
                color = [200, 0, 0, 0.7];
            }

            result = [];
            if (feature && typeof feature.get === 'function' && !feature.get('anonymous')) {
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 2,
                        fill: new ol.style.Fill({
                            color: color
                        }),
                        stroke: new ol.style.Stroke({
                            color: white,
                            width: 2
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 20,
                        stroke: new ol.style.Stroke({
                            color: white,
                            width: 4
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 20,
                        stroke: new ol.style.Stroke({
                            color: color,
                            width: 2
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 40,
                        stroke: new ol.style.Stroke({
                            color: white,
                            width: 4
                        })
                    }),
                    zIndex: Infinity
                }));
                result.push(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 40,
                        stroke: new ol.style.Stroke({
                            color: color,
                            width: 2
                        })
                    }),
                    zIndex: Infinity
                }));
            }

            result.push(new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 60,
                    stroke: new ol.style.Stroke({
                        color: white,
                        width: 4
                    })
                }),
                zIndex: Infinity
            }));

            result.push(new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 60,
                    stroke: new ol.style.Stroke({
                        color: color,
                        width: 2
                    })
                }),
                zIndex: Infinity
            }));

            return result;
        },

        handleEvent: function handleEvent(mapBrowserEvent) {
            if (mapBrowserEvent.type === "singleclick") {
                if (!this.options.disableClickEvent && !this.options.mapContainer.data.geopicker.disabled) {
                    return !this.pick(mapBrowserEvent.coordinate);
                }
            }

            return true;
        },

        pick: function pick(coordinate) {
            var arrLatLon;

            arrLatLon = ol.proj.toLonLat(coordinate);

            this.opticLayerFeature = new ol.Feature({
                geometry: new ol.geom.Point(coordinate)
            });

            this.opticLayerSource.clear();
            this.opticLayerSource.addFeature(this.opticLayerFeature);

            this.$fieldGeoX.val(arrLatLon[0]);
            this.$fieldGeoY.val(arrLatLon[1]);
            this.$fieldGeoX.change();
            this.$fieldGeoY.change();

            return true;
        }

    }); // end of "add methods" ---
})(jQuery, this.c4g);

var GeoPicker = this.c4g.maps.interaction.GeoPicker;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-main.js":
/*!**********************************************!*\
  !*** ./Resources/public/js/c4g-maps-main.js ***!
  \**********************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps__ = __webpack_require__(/*! ./c4g-maps */ "./Resources/public/js/c4g-maps.js");


jQuery(document).ready(function () {
  if (typeof mapData !== "undefined") {
    window.initMaps(mapData);
  }
});

window.initMaps = function (mapData) {
  var mapController = new __WEBPACK_IMPORTED_MODULE_0__c4g_maps__["a" /* MapController */](mapData);
};

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-maphover.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-maphover.js ***!
  \*******************************************************/
/*! exports provided: MapHover */
/*! exports used: MapHover */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MapHover; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_misc_tooltippopup__ = __webpack_require__(/*! ./c4g-maps-misc-tooltippopup */ "./Resources/public/js/c4g-maps-misc-tooltippopup.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.misc = this.c4g.maps.misc || {};




(function ($, c4g) {
    'use strict';

    /**
     * @TODO
     * [MapHover description]
     *
     * @constructor
     *
     * @param {Object=} opt_options Control options.
     */

    c4g.maps.misc.MapHover = function (options) {

        this.options = options || {};

        // default options
        this.options = $.extend({
            // mapController: undefined,
            activate: true
        }, this.options);

        if (!this.options.mapController) {
            console.warn('MapHover needs a mapController');
            return false;
        }

        // set needed vars
        this.listenerKey = false;
        this.map = this.options.mapController.map;
        this.lastFeatureStyle = null;
        this.lastHoveredFeature = null;

        // create tooltip
        this.hoverTooltip = new __WEBPACK_IMPORTED_MODULE_0__c4g_maps_misc_tooltippopup__["a" /* TooltipPopUp */]({
            map: this.map,
            offset: [10, 10],
            horizontal: true,
            closeable: false
        });
        this.hoverTooltip.hide();

        if (this.options.activate) {
            this.activate();
        }
    };

    // Add methods to MapHover
    c4g.maps.misc.MapHover.prototype = $.extend(c4g.maps.misc.MapHover.prototype, {

        /**
         * @TODO: [activate description]
         *
         * @return  {[type]}  [description]
         */
        activate: function activate() {
            if (!this.listenerKey) {
                this.listenerKey = this.map.on('pointermove', this.getHoverFunction(), this);
                //this.map.on('pointermove', this.changeFeatureStyles(), this);
            }
        }, // end of "activate()"


        /**
         * @TODO: [deactivate description]
         *
         * @return  {[type]}  [description]
         */
        deactivate: function deactivate() {
            if (this.listenerKey) {
                ol.Observable.unByKey(this.listenerKey);
                this.listenerKey = false;
            }
        }, // end of "deactivate()"


        /**
         * @TODO: [isActive description]
         *
         * @return  {[type]}  [description]
         */
        isActive: function isActive() {
            if (this.listenerKey) {
                return true;
            }
            return false;
        }, // end of "getState()"


        /**
         * @TODO: [getHoverFunction description]
         *
         * @return  {[type]}  [description]
         */
        getHoverFunction: function getHoverFunction() {

            var self = this;

            return function (event) {

                var hovered,
                    clustered,
                    tooltipContent,
                    tooltipHelper,
                    features,
                    tooltipLength,
                    resolution,
                    canvas,
                    mapData = self.options.mapController.data,
                    proxy = self.options.mapController.proxy;

                clustered = false;
                hovered = self.map.forEachFeatureAtPixel(event.pixel, function (feature, layer) {
                    return {
                        feature: feature,
                        layer: layer
                    };
                });
                resolution = self.map.getView().getResolution();

                if (!hovered) {
                    self.hoverTooltip.hide();
                    canvas = document.querySelector("canvas");
                    $(canvas).css('cursor', 'default');
                    if (mapData.hover_popups === '1' && mapData.hover_popups_stay != '1') {
                        c4g.maps.popup.$popup.removeClass(c4g.maps.constant.css.ACTIVE);
                    }

                    if (self.lastHoveredFeature && self.lastFeatureStyle) {
                        self.lastHoveredFeature.setStyle(self.lastFeatureStyle);
                        self.lastHoveredFeature = null;
                    }
                    return false;
                }

                canvas = document.querySelector("canvas");
                $(canvas).css('cursor', 'pointer');

                if (hovered.feature && typeof hovered.feature.get === 'function' && hovered.feature.get('features')) {
                    if (hovered.feature.get('features')[1]) {
                        clustered = true;
                    } else {
                        hovered.feature = hovered.feature.get('features')[0];
                    }
                }
                if (hovered.feature.getGeometry() && hovered.feature.getGeometry() instanceof ol.geom.LineString) {
                    return false;
                }
                if (hovered.feature.get("hover_location") || self.lastHoveredFeature && self.lastHoveredFeature.get("hover_location")) {
                    if (self.lastHoveredFeature && hovered.feature === self.lastHoveredFeature) {
                        return false;
                    }

                    //set back styles when the features are not hovered anymore
                    if (self.lastFeatureStyle) {
                        if (self.lastHoveredFeature) {
                            if (hovered.feature !== self.lastHoveredFeature) {
                                if (self.lastFeatureStyle) {
                                    self.lastHoveredFeature.setStyle(self.lastFeatureStyle);
                                    //console.log("Changed back feature style");
                                } else if (self.lastLayerStyle) {
                                    self.lastHoveredFeature.setStyle(self.lastLayerStyle);
                                    //console.log("Changed back layer-feature style");
                                }
                            }
                        }
                    }

                    if (hovered.feature && _typeof(hovered.feature.getStyleFunction) && typeof hovered.feature.getStyleFunction === 'function' && typeof hovered.feature.getStyleFunction() === 'function') {
                        self.lastHoveredFeature = hovered.feature;

                        self.lastLayerStyle = hovered.layer.getStyle();
                        self.lastFeatureStyle = self.lastLayerStyle(self.lastHoveredFeature);
                        //TODO get onhover style from db (vllt schon in proxy drin?)
                        if (hovered.feature.get('hover_style') && proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")]) {
                            if (proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction) {
                                hovered.feature.setStyle(Function("feature", "data", "map", proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction)(hovered.feature));
                            } else {
                                hovered.feature.setStyle(proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].style(hovered.feature));
                            }
                        }
                    } else if (hovered.layer && _typeof(hovered.layer.getStyleFunction) && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function') {

                        if (hovered.feature) {
                            self.lastHoveredFeature = hovered.feature;
                        } else {
                            self.lastHoveredFeature = hovered.layer.getSource().getFeatures()[0];
                            self.lastHoveredFeature = self.lastHoveredFeature.get('features')[0];
                        }

                        self.lastLayerStyle = hovered.layer.getStyle();
                        self.lastFeatureStyle = self.lastLayerStyle(self.lastHoveredFeature);
                        if (hovered.feature.get('hover_style')) {
                            if (!proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")]) {
                                var arrIds = [];
                                arrIds.push(hovered.feature.get("hover_style"));
                                proxy.locationStyleController.loadLocationStyles(arrIds);
                                self.lastHoveredFeature = null;
                                return null;
                            }
                            if (proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction) {
                                hovered.feature.setStyle(Function("feature", "data", "map", proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction)(hovered.feature));
                            } else {
                                hovered.feature.setStyle(proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].style(hovered.feature));
                            }
                        }
                    }
                }

                if (hovered && hovered.feature && hovered.feature.get('styleUrl')) {
                    //if this property is set, we have a feature that has none of our styles => no tooltip
                    return false;
                }
                // catch the case the layer is a baselayer (vector tiles)
                if (hovered && hovered.layer && hovered.layer.type === "VECTOR_TILE") {
                    return false;
                }

                // set hover tooltips
                tooltipContent = false;
                if (!clustered && hovered.feature && typeof hovered.feature.get === 'function' && (hovered.feature.get('tooltip') || hovered.feature.get('graphicTitle'))) {
                    tooltipContent = hovered.feature.get('tooltip');
                    if (!tooltipContent) {
                        tooltipContent = hovered.feature.get('graphicTitle');
                    } else if ((typeof tooltipContent === "undefined" ? "undefined" : _typeof(tooltipContent)) === 'object' && tooltipContent.element && tooltipContent.element.childNodes[1]) {
                        tooltipContent = tooltipContent.element.childNodes[1].innerHTML;
                    }
                    // @TODO: Check & fix
                } else if (hovered.feature && _typeof(hovered.feature.getStyleFunction) && typeof hovered.feature.getStyleFunction === 'function' && typeof hovered.feature.getStyleFunction() === 'function' && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.feature.getStyleFunction()(resolution)] && proxy.locationStyleController.arrLocStyles[hovered.feature.getStyleFunction()(resolution)].tooltip) {
                    tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.feature.getStyleFunction()(resolution)].tooltip;
                    // @TODO: Check
                } else if (hovered.layer && _typeof(hovered.layer.getStyleFunction) && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function' && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()] && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()].tooltip) {
                    tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()].tooltip;
                } else if (hovered.layer && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function' && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)] && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)].tooltip) {
                    tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)].tooltip;
                } else if (hovered.layer && hovered.layer.tooltip) {
                    tooltipContent = hovered.layer.tooltip;
                }
                if (clustered && hovered.feature.get('features')) {
                    features = hovered.feature.get('features');
                    if (features[0].get('tooltip') && features[0].get('tooltip_length')) {
                        tooltipContent = features[0].get('tooltip');
                        tooltipLength = parseInt(features[0].get('tooltip_length'));
                        for (var i = 1; i < features.length; i++) {
                            if (features[i].get('tooltip') && features[i].get('tooltip') != '') {
                                tooltipContent = tooltipContent + ', ' + features[i].get('tooltip');
                            }
                        }
                        if (tooltipContent.length > tooltipLength + 3) {
                            if (tooltipContent = tooltipContent.slice(0, tooltipLength)) {
                                tooltipContent = tooltipContent + '...';
                            }
                        }
                    } else if (hovered.layer.tooltip && hovered.layer.tooltip_length) {
                        tooltipHelper = tooltipContent;
                        tooltipContent = '';
                        tooltipLength = parseInt(hovered.layer.tooltip_length);
                        for (i = 0; i < features.length; i++) {
                            var singleTooltip = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].replaceAllPlaceholders(tooltipHelper, features[i], hovered.layer);
                            if (singleTooltip != '') {
                                if (tooltipContent == '') tooltipContent = singleTooltip;else tooltipContent = tooltipContent + ', ' + singleTooltip;
                            }
                        }
                        if (tooltipContent.length > tooltipLength + 3) {
                            if (tooltipContent = tooltipContent.slice(0, tooltipLength)) {
                                tooltipContent = tooltipContent + '...';
                            }
                        }
                    }
                }

                if (tooltipContent) {
                    tooltipContent = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].decodeGeoJsonProperty(tooltipContent);

                    // replace placeholders if possible
                    if (hovered.feature.get('features')) {}
                    tooltipContent = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].replaceAllPlaceholders(tooltipContent, hovered.feature, hovered.layer);

                    if (tooltipContent.trim()) {
                        // popup config
                        self.hoverTooltip.setPosition(event.coordinate);
                        self.hoverTooltip.setContent(tooltipContent);
                        self.hoverTooltip.show();
                    } else {
                        self.hoverTooltip.hide();
                    }
                } else {
                    self.hoverTooltip.hide();
                }
                if (mapData.hover_popups === '1' && !clustered && hovered.feature) {
                    var popupInfos = {};

                    if (hovered.feature.get('popup')) {
                        popupInfos = hovered.feature.get('popup');
                    } else if (hovered.feature.get('loc_linkurl')) {
                        return;
                    } else if (hovered.layer && hovered.layer.popup) {
                        popupInfos = hovered.layer.popup;
                    } else {
                        return;
                    }
                    var coord = hovered.feature.getGeometry().getCoordinates();
                    if (!coord || coord && coord[0] && coord[0].length) {
                        var extent = hovered.feature.getGeometry().getExtent();
                        coord = self.map.getCoordinateFromPixel(event.pixel);
                        coord = [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
                    }

                    c4g.maps.popup.popup.setPosition(coord);

                    if (popupInfos.content) {
                        c4g.maps.popup.$content.html('');
                        c4g.maps.popup.$popup.addClass(c4g.maps.constant.css.ACTIVE).addClass(c4g.maps.constant.css.LOADING);
                        c4g.maps.popup.spinner.show();

                        if (popupInfos.async === false) {
                            var objPopup = {};
                            objPopup.popup = popupInfos;
                            objPopup.feature = hovered.feature;
                            objPopup.layer = hovered.layer;
                            // Call the popup hook for plugin specific popup content
                            if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                                __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                            }
                            proxy.setPopup(objPopup, proxy);
                        } else {
                            $.ajax({
                                dataType: "json",
                                url: proxy.api_infowindow_url + '/' + popupInfos.content,
                                done: function done(data) {
                                    var popupInfo = {
                                        async: popupInfos.async,
                                        content: data.content,
                                        popup: popupInfos.popup,
                                        routing_link: popupInfos.routing_link
                                    };

                                    var objPopup = {};
                                    objPopup.popup = popupInfo;
                                    objPopup.feature = hovered.feature;
                                    objPopup.layer = hovered.layer;

                                    // Call the popup hook for plugin specific popup content
                                    if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                                        __WEBPACK_IMPORTED_MODULE_1__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                                    }

                                    proxy.setPopup(objPopup, proxy);
                                }
                            });
                        }
                    } else {
                        c4g.maps.popup.$popup.removeClass(c4g.maps.constant.css.ACTIVE);
                    }
                }
            };
        }, // end of "getHoverFunction()"

        changeFeatureStyles: function changeFeatureStyles() {
            //TODO: change style of features which are hovered and have the option to change style on hover enabled
        }

    }); // End of "add methods to TooltipPopUp"
})(jQuery, this.c4g);

var MapHover = this.c4g.maps.misc.MapHover;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-spinner.js":
/*!******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-spinner.js ***!
  \******************************************************/
/*! exports provided: Spinner */
/*! exports used: Spinner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Spinner; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.misc = this.c4g.maps.misc || {};



(function ($, c4g) {
  'use strict';

  /**
   * @TODO
   * [Spinner description]
   *
   * @constructor
   *
   * @param {Object=} opt_options Control options.
   */

  c4g.maps.misc.Spinner = function (opt_options) {

    var options, target, spinnerSpan;

    options = opt_options || {};

    // default options
    options = $.extend({
      className: '',
      target: '.' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].OL_VIEWPORT
    }, options);

    if (options.className) {
      options.className = ' ' + options.className;
    }

    this.element = document.createElement('div');
    this.element.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].SPINNER + options.className + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE;
    $(options.target).append(this.element);

    spinnerSpan = document.createElement('span');
    spinnerSpan.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ANIMATION_SPIN;
    this.element.appendChild(spinnerSpan);

    this.additionalActivationCounter = 0;
  };

  // Add methods to spinner
  c4g.maps.misc.Spinner.prototype = $.extend(c4g.maps.misc.Spinner.prototype, {

    /**
     * @TODO
     * [show description]
     *
     * @return  {[type]}  [description]
     */
    show: function show() {
      if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
      } else {
        this.additionalActivationCounter += 1;
      }
    },

    /**
     * @TODO
     * [hide description]
     *
     * @return  {[type]}  [description]
     */
    hide: function hide() {
      if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        //console.warn('Spinner is already hidden.');
      } else {
        if (this.additionalActivationCounter === 0) {
          $(this.element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
        } else {
          this.additionalActivationCounter -= 1;
        }
      }
    }

  }); // End of "add methods to spinner"
})(jQuery, this.c4g);

var Spinner = this.c4g.maps.misc.Spinner;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-tooltippopup.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-tooltippopup.js ***!
  \***********************************************************/
/*! exports provided: TooltipPopUp */
/*! exports used: TooltipPopUp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TooltipPopUp; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};
this.c4g.maps.misc = this.c4g.maps.misc || {};



(function ($, c4g) {
  'use strict';

  /**
   * @TODO
   * [TooltipPopUp description]
   *
   * @constructor
   *
   * @param {Object=} opt_options Control options.
   */

  c4g.maps.misc.TooltipPopUp = function (opt_options) {

    var self, addClassName, closeButton;

    self = this;
    this.options = opt_options || {};

    // default options
    this.options = $.extend({
      // className: ''
      // closeFunction: null
      // map: null
      horizontal: false,
      closeable: false,
      offset: [1, -1],
      position: [0, 0]
    }, this.options);

    // prepare additional classes
    addClassName = '';
    if (this.options.className) {
      addClassName = ' ' + this.options.className;
    }
    if (this.options.horizontal) {
      addClassName += ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HORIZONTAL;
    }
    if (this.options.closeable) {
      addClassName += ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].CLOSEABLE;
    }

    this.element = document.createElement('div');
    this.element.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].TOOLTIP_POPUP + addClassName;

    if (this.options.closeable) {
      closeButton = document.createElement('button');
      closeButton.className = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].POPUP_CLOSE;
      this.element.appendChild(closeButton);

      $(closeButton).click(function () {
        self.close();
      });
    }

    this.contentContainer = document.createElement('div');
    this.element.appendChild(this.contentContainer);

    this.overlay = new ol.Overlay({
      element: this.element,
      insertFirst: false,
      offset: this.options.offset,
      positioning: 'bottom-left'
    });

    if (this.options.map) {
      this.options.map.addOverlay(this.overlay);
    }

    if (this.options.position) {
      this.overlay.setPosition(this.options.position);
    }
  };

  // Add methods to TooltipPopUp
  c4g.maps.misc.TooltipPopUp.prototype = $.extend(c4g.maps.misc.TooltipPopUp.prototype, {

    close: function close() {
      if (typeof this.options.closeFunction === 'function') {
        this.options.closeFunction();
      }

      if (this.options.map) {
        this.options.map.removeOverlay(this.overlay);
      }
    },

    /**
     * @TODO
     * [show description]
     *
     * @return  {[type]}  [description]
     */
    show: function show() {
      if ($(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        $(this.element).removeClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
      }
    },

    /**
     * @TODO
     * [hide description]
     *
     * @return  {[type]}  [description]
     */
    hide: function hide() {
      if (!$(this.element).hasClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE)) {
        $(this.element).addClass(__WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant__["a" /* cssConstants */].HIDE);
      }
    },

    /**
     * @TODO
     * [getContent description]
     *
     */
    getContent: function getContent() {
      return this.contentContainer.innerHTML;
    },

    /**
     * @TODO
     * [getPosition description]
     *
     */
    getPosition: function getPosition() {
      return this.overlay.getPosition();
    },

    /**
     * @TODO
     * [setContent description]
     *
     * @param  {[type]}  content  [description]
     */
    setContent: function setContent(content) {
      this.contentContainer.innerHTML = content;
    },

    /**
     * @TODO
     * [setPosition description]
     *
     * @param  {[type]}  coordinates  [description]
     */
    setPosition: function setPosition(coordinates) {
      this.overlay.setPosition(coordinates);
    }

  }); // End of "add methods to TooltipPopUp"
})(jQuery, this.c4g);

var TooltipPopUp = this.c4g.maps.misc.TooltipPopUp;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-popup-info-de.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-popup-info-de.js ***!
  \*******************************************************/
/*! exports provided: trim, isMobile, fnStandardInfoPopup, fnReducedInfoPopup, fnHeader, fnFooter, fnGetTranslate_Type, fnContent, fnContentAerodrome, fnContentNatural, fnContentProtectedArea, fnContentLanduse, fnMessstation, fnContentRoute, fnContentPetrol, fnContentHistoric, fnContentBarriers, fnContentTourism, fnContentAmenity, fnContentStorage, fnContentInformationCity, fnContentEmergency, fnContentCuisine, fnContentShipping, fnContentHydrants, fnContentStreetsTraffic, fnContentSports, fnArztInfo, fnKraftwerkInfo, fnWertstoffinfo, fnAdditionalBuildingInfos, fnSicherheitAdditional, fnWreckInfo, fnKlosterAdditional */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["trim"] = trim;
/* harmony export (immutable) */ __webpack_exports__["isMobile"] = isMobile;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnStandardInfoPopup", function() { return fnStandardInfoPopup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnReducedInfoPopup", function() { return fnReducedInfoPopup; });
/* harmony export (immutable) */ __webpack_exports__["fnHeader"] = fnHeader;
/* harmony export (immutable) */ __webpack_exports__["fnFooter"] = fnFooter;
/* harmony export (immutable) */ __webpack_exports__["fnGetTranslate_Type"] = fnGetTranslate_Type;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContent", function() { return fnContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentAerodrome", function() { return fnContentAerodrome; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentNatural", function() { return fnContentNatural; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentProtectedArea", function() { return fnContentProtectedArea; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentLanduse", function() { return fnContentLanduse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnMessstation", function() { return fnMessstation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentRoute", function() { return fnContentRoute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentPetrol", function() { return fnContentPetrol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentHistoric", function() { return fnContentHistoric; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentBarriers", function() { return fnContentBarriers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentTourism", function() { return fnContentTourism; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentAmenity", function() { return fnContentAmenity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentStorage", function() { return fnContentStorage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentInformationCity", function() { return fnContentInformationCity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentEmergency", function() { return fnContentEmergency; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentCuisine", function() { return fnContentCuisine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentShipping", function() { return fnContentShipping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentHydrants", function() { return fnContentHydrants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentStreetsTraffic", function() { return fnContentStreetsTraffic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentSports", function() { return fnContentSports; });
/* harmony export (immutable) */ __webpack_exports__["fnArztInfo"] = fnArztInfo;
/* harmony export (immutable) */ __webpack_exports__["fnKraftwerkInfo"] = fnKraftwerkInfo;
/* harmony export (immutable) */ __webpack_exports__["fnWertstoffinfo"] = fnWertstoffinfo;
/* harmony export (immutable) */ __webpack_exports__["fnAdditionalBuildingInfos"] = fnAdditionalBuildingInfos;
/* harmony export (immutable) */ __webpack_exports__["fnSicherheitAdditional"] = fnSicherheitAdditional;
/* harmony export (immutable) */ __webpack_exports__["fnWreckInfo"] = fnWreckInfo;
/* harmony export (immutable) */ __webpack_exports__["fnKlosterAdditional"] = fnKlosterAdditional;
/*
  K?stenschmiede GmbH Software & Design 2011 - 2018
 @author     K?stenschmiede <http://www.kuestenschmiede.de>
 @license    http://opensource.org/licenses/lgpl-3.0.html
*/
function trim(b) {
    return b.replace(/^\s+/, "").replace(/\s+$/, "");
}
function isMobile() {
    return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4))
    );
}function translate(b) {
    var a = trim(b);return "yes" == a || "Yes" == a ? "Ja" : "no" == a ? "Nein" : "No" == a ? "nein" : "limited" == a ? "Eingeschr\xE4nkt" : "designated" == a ? "Ja" : "wood" == a ? "Holz" : "metal" == a ? "Metall" : "concrete" == a ? "Beton" : "plastic" == a ? "Plastik" : "stone" == a ? "Stein" : "steel" == a ? "Stahl" : "brick" == a ? "Ziegel" : "reinforced_concrete" == a ? "Stahlbeton" : "masonry" == a ? "Mauerwerk" : b;
}
var fnStandardInfoPopup = function fnStandardInfoPopup(b, a) {
    var c = b.getProperties(),
        d = "",
        e;if ("function" === typeof a) {
        var f = a.call(b)[0].getImage();if (f) try {
            e = f.getSrc();
        } catch (g) {
            e = "";
        }
    } else {
        f = a.getImage();try {
            e = f.getSrc();
        } catch (h) {
            e = "";
        }
    }d += fnHeader(c, e);d += fnContent(c);d += fnFooter(c, b.get("osm_type") + "/" + b.getId());return '<div class="c4g_popup_text">' + d + "</div>";
},
    fnReducedInfoPopup = function fnReducedInfoPopup(b, a) {
    var c = b.getProperties(),
        d = "",
        e = !1,
        f;f = "function" === typeof a ? a.call(b)[0].getImage().getSrc() : a.getImage().getSrc();if ("restaurant" == c.amenity || "pub" == c.amenity || "biergarten" == c.amenity) e = !0;"hotel" == c.tourism && (e = !0);"guest_house" == c.tourism && (e = !0);"chalet" == c.tourism && (e = !0);"hostel" == c.tourism && (e = !0);"alpine_hut" == c.tourism && (e = !0);if ("artwork" == c.tourism || "artwork" == c.amenity) e = !0;if ("museum" == c.tourism || "museum" == c.amenity) e = !0;"cinema" == c.amenity && (e = !0);"theatre" == c.amenity && (e = !0);if ("attraction" == c.amenity || "fountain" == c.amenity || "monument" == c.historic || "city_gate" == c.historic || "ruins" == c.historic || "castle" == c.historic || "attraction" == c.tourism) e = !0;"playground" == c.leisure && (e = !0);c.aerialway && (e = !0);if ("swimming_pool" == c.amenity || "swimming_pool" == c.leisure || "swimming" == c.sport) e = !0;"station" == c.railway && (e = !0);"swimming" == c.sport && (e = !0);"swimming_pool" == c.leisure && (e = !0);"swimming_pool" == c.amenity && (e = !0);"waterpark" == c.leisure && (e = !0);c.water_park && (e = !0);"sports_centre" == c.leisure && (e = !0);switch (e) {case !1:
            d += fnHeader(c, f);d += fnContent(c);d += fnFooter(c, b.get("osm_type") + "/" + b.getId());break;case !0:
            d += fnHeader(c, f);}return '<div class="c4g_popup_text">' + d + "</div>";
};
function fnHeader(b, a) {
    var c = "",
        d = "32px";a && -1 != a.indexOf("icon_mapcil") && (d = "250px", a = a.replace("icon_mapcil", "logo_mapcil"));if (b.name || b["piste:name"] || b["xmas:name"] || b["xmas:location"]) {
        if (b.name) var e = b.name;b["piste:name"] && (e = b["piste:name"]);b["xmas:name"] && (e = b["xmas:name"]);b["xmas:location"] && (e = b["xmas:location"]);c += a ? '<img src="' + a + '" width="' + d + '" name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>" : '<name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>";
    } else a && (c += '<img src="' + a + '" width="' + d + '" name="' + a + '" alt="' + a + '">');c += fnGetTranslate_Type(b);return '<div class="c4g_popup_header">' + c + "</div>";
}
function fnFooter(b, a) {
    var c = "",
        d = !1;b["addr:housename"] && (c += "Geb\xE4udename: " + b["addr:housename"] + "<br/>", d = !0);b["addr:floor"] ? (c += "Etage: " + b["addr:floor"] + "<br/>", d = !0) : b["addr:level"] && (c += "Etage: " + b["addr:level"] + "<br/>", d = !0);b["addr:street"] && (c += b["addr:street"], c = b["addr:housenumber"] ? c + (" " + b["addr:housenumber"] + "<br/>") : c + "<br/>", d = !0);b["addr:postcode"] && (c += b["addr:postcode"] + " ");b["addr:city"] && (c += b["addr:city"] + "<br/>", d = !0);if (b.sqkm) if (b.sqkm = "" + b.sqkm, 3 < b.sqkm.length) {
        var e = b.sqkm.length % 3,
            f = 0 < e ? b.sqkm.substring(0, e) : "";for (i = 0; i < Math.floor(b.sqkm.length / 3); i++) {
            f = 0 == e && 0 == i ? f + b.sqkm.substring(e + 3 * i, e + 3 * i + 3) : f + ("." + b.sqkm.substring(e + 3 * i, e + 3 * i + 3));
        }c += "Fl\xE4che: " + f + " Km\xB2<br/>";
    } else c += "Fl\xE4che " + b.sqkm + "<br/>";b["contact:phone"] && (c = isMobile() ? c + ('Telefon: <a href="tel:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>") : c + ('Telefon: <a href="callto:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>"), d = !0);b.phone && (c = isMobile() ? c + ('Telefon: <a href="tel:' + b.phone + '">' + b.phone + "</a><br/>") : c + ('Telefon: <a href="callto:' + b.phone + '">' + b.phone + "</a><br/>"), d = !0);b["contact:fax"] ? (c += "Telefax: " + b["contact:fax"] + "<br/>", d = !0) : b.fax && (c += "Telefax: " + b.fax + "<br/>", d = !0);b["contact:email"] ? (c += 'E-Mail-Adresse: <a href="mailto:' + b["contact:email"] + '">' + b["contact:email"] + "</a><br/>", d = !0) : b.email && (c += 'E-Mail-Adresse: <a href="mailto:' + b.email + '">' + b.email + "</a><br/>", d = !0);d && (c += "<br/>");if (b.opening_hours) {
        d = b.opening_hours;for (e = 0; 0 == e || 0 < d.indexOf(";");) {
            d = d.replace("PH", "FT"), d = d.replace("Tu", "Di"), d = d.replace("We", "Mi"), d = d.replace("Th", "Do"), d = d.replace("Su", "So"), d = d.replace("Mar", "M\xE4r"), d = d.replace("May", "Mai"), d = d.replace("Oct", "Okt"), d = d.replace("Dec", "Dez"), d = d.replace('"Please make a reservation"', '"Bitte vereinbaren Sie einen Termin"'), d = d.replace("off", "ausgenommen"), 0 < e && (d = d.replace(";", "<br/>")), e++;
        }c += "\xD6ffnungszeiten: <br/><div class=\"c4g_open_text\">" + d + "</div>";c = 0 < d.indexOf("FT") ? c + "(FT = Feiertag)<br/>" : c + "<br/>";
    }if (b["xmas:opening_hours"]) {
        d = b["xmas:opening_hours"];for (e = 0; 0 == e || 0 < d.indexOf(";");) {
            d = d.replace("PH", "FT"), d = d.replace("Tu", "Di"), d = d.replace("We", "Mi"), d = d.replace("Th", "Do"), d = d.replace("Su", "So"), d = d.replace("Mar", "M\xE4r"), d = d.replace("May", "Mai"), d = d.replace("Oct", "Okt"), d = d.replace("Dec", "Dez"), 0 < e && (d = d.replace(";", "<br/>")), e++;
        }c += "\xD6ffnungszeiten: <br/><div class=\"c4g_open_text\">" + d + "</div>";c = 0 < d.indexOf("FT") ? c + "(FT = Feiertag)<br/>" : c + "<br/>";
    }b["xmas:url"] && (d = "", d = b["xmas:url"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Website: <a href="' + d + '" target="_blank">Link zur Website</a><br/>');b["contact:website"] ? (d = b["contact:website"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Website: <a href="' + d + '" target="_blank">Link zur Website</a><br/>') : b.website && (d = b.website, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Website: <a href="' + d + '" target="_blank">Link zur Website</a><br/>');b.wikipedia && (d = b.wikipedia, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://wikipedia.org/wiki/" + d), c += 'Wikipedia: <a href="' + d + '" target="_blank">Link zu Wikipedia</a><br/>');b.wikimedia_commons && (d = b.wikimedia_commons, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://commons.wikimedia.org/wiki/" + d), c += 'Wikimedia: <a href="' + d + '" target="_blank">Link zu Wikimedia</a><br/>');b["contact:webcam"] && (d = b["contact:webcam"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Webcam: <a href="' + d + '" target="_blank">Link zur Webcam</a><br/>');b.image && (c += '<img src="' + b.image + '" width="200px" name="' + b.name + '" alt="' + b.name + '"><br/>');d = "";b.internet_access && (d += "Internetzugriff: " + translate(b.internet_access) + "<br/>");b["internet_access:fee"] && (d += "Internet Geb\xFChr: " + translate(b["internet_access:fee"]) + "<br/>");b["wifi_access:operator"] && (d += "wifi Betreiber: " + b["wifi_access:operator"] + "<br/>");b["wifi_access:technology"] && (d += "wifi Technologie: " + b["wifi_access:technology"] + "<br/>");b["wifi_access:ssid"] && (d += "wifi ssid: " + b["wifi_access:ssid"] + "<br/>");"" != d && (c += 'Internetzugang vorhanden<br/><div class="c4g_shop_internet_access">' + d + "</div><br/>");b.wheelchair && (c += "rollstuhlgeeignet: " + translate(b.wheelchair) + "<br/>");b["wheelchair:description"] && (c += "Beschreibung: " + b["wheelchair:description"] + "<br/>");b["wheelchair:entrance_width"] && (c += "Breite des Eingangs in CM: " + b["wheelchair:entrance_width"] + "<br/>");b["wheelchair:step_height"] && (c += "H\xF6he der Stufe am Eingang in CM: " + b["wheelchair:step_height"] + "<br/>");b["wheelchair:rooms"] && (c += "Anzahl rollstuhlgerechter R\xE4ume: " + b["wheelchair:rooms"] + "<br/>");b["wheelchair:places"] && (c += "Anzahl der Rollstuhlpl\xE4tze: " + b["wheelchair:places"] + "<br/>");b["cent:places"] && (c += "Anzahl der Rollstuhlpl\xE4tze: " + b["wheelchair:places"] + "<br/>");b["ramp:wheelchair"] && (c += "Rampe f\xFCr Rollstuhlfahrer: " + b["ramp:wheelchair"] + "<br/>");b["capacity:disabled"] && (c += "Behindertenparkpl\xE4tze: " + translate(b["capacity:disabled"]) + "<br/>");b["toilets:wheelchair"] && (c += "Behinderdengerechte Toilette: " + translate(b["toilets:wheelchair"]) + "<br/>");b.centralkey && (c += "Zentralschl\xFCssel: " + b.centralkey + "<br/>");b.note && (c += b.note + "<br/>");b.description && (c += b.description + "<br/>");b.operator && (c += "Betreiber: " + b.operator + "<br/>");b.ref && (c += "Referenz: " + b.ref + "<br/>");"yes" == b.lit && (c += "Dieses Objekt ist beleuchtet.<br/>");b.shop && (d = "", b.brand && (d += "Markenzeichen: " + b.brand + "<br/>"), b.sells && (d += "Verkaufs: " + b.sells + "<br/>"), b.origin && (d += "Herkunftsl\xE4nder: " + b.origin + "<br/>"), "yes" == b.wholesale && (d += "Gro\xDFh\xE4ndler: Ja<br/>"), "" != d && (c += 'Weitere Angaben zum Shop: <br/><div class="c4g_shop_text">' + d + "</div><br/>"));a && (d = a, trim(d), d = d.replace(/\./, "/"), c = c + "<br/>" + ('OSM:    <a href="http://www.openstreetmap.org/' + d + '" target="_blank">Link zur OpenStreetMap</a><br/>'));return c = '<div class="c4g_popup_footer">' + c + "</div>";
}
function fnGetTranslate_Type(b) {
    var a = "";if ("doctors" == b.amenity || "doctor" == b.healthcare) a += "Arzt<br/>";if ("hospital" == b.amenity || "clinic" == b.amenity || "hospital" == b.healthcare || "clinic" == b.healthcare) a = "yes" == b.emergency ? a + "Krankenhaus mit Notaufnahme<br/>" : a + "Krankenhaus<br/>";"dentist" == b.amenity && (a += "Zahnarzt<br/>");if ("pharmacy" == b.amenity || "pharmacy" == b["health_facility:type"]) a += "Apotheke<br/>";if ("physiotherapist" == b.healthcare || "yes" == b["health_speciality:physiotherapy"]) a += "Physiotherapeut<br/>";
    if ("occupational_therapist" == b.healthcare || "yes" == b["health_speciality:occupational_therapy"] || "yes" == b["health_specialty:occupational_therapy"]) a += "Ergotherapeut<br/>";if ("psychotherapist" == b.healthcare || "yes" == b["health_speciality:psychotherapy"]) a += "Psychotherapeut<br/>";"alternative" == b.healthcare && (a += "Alternativ- und Komplement\xE4rmediziner<br/>");"midwife" == b.healthcare && (a += "Hebamme<br/>");if ("speech_therapist" == b.healthcare || "yes" == b["health_speciality:speech_therapy"]) a += "Logop\xE4de<br/>";
    "yes" == b["health_speciality:music_therapy"] && (a += "Musiktherapeut<br/>");"veterinary" == b.amenity && (a += "Tierarzt<br/>");"fire_station" == b.amenity && (a += "Feuerwehrhaus<br/>");"fire_extinguisher" == b.emergency && (a += "Feuerl\xF6scher<br/>");"aed" == b.emergency && (a += "Mobiler Defibrilator<br/>");"defibrillator" == b.emergency && (a += "Mobiler Defibrilator<br/>");"phone" == b.emergency && (a += "Notrufs\xE4ule<br/>");"police" == b.amenity && (a += "Polizeiwache<br/>");"ambulance_station" == b.emergency && (a += "Rettungswache<br/>");
    "technical" == b.emergency_service && (a += "Technisches Hilfswerk<br/>");"water" == b.emergency_service && (a += "Wasserrettungsstation<br/>");"baywatch" == b.waterway && (a += "Wasserwacht<br/>");"air" == b.emergency_service && (a += "Rettungshubschrauber<br/>");"emergency_access_point" == b.highway && (a += "Notfallpunkt<br/>");if ("lifeboat_station" == b.amenity || "lifeboat_station" == b.emergency) a += "Rettungsbootstation<br/>";"life_ring" == b.emergency && (a += "Rettungsring<br/>");"siren" == b.emergency && (a += "Sirene<br/>");"life_ring" == b.amenity && (a += "Rettungsring<br/>");"rescue_station" == b.amenity && (a += "Rettungsstation<br/>");"fire_hydrant" == b.emergency && ("underground" == b["fire_hydrant:type"] ? a += "Unterflurhydrant<br/>" : "pillar" == b["fire_hydrant:type"] ? a += "\xDCberflurhydrant<br/>" : "wall" == b["fire_hydrant:type"] ? a += "Wandhydrant<br/>" : "pond" == b["fire_hydrant:type"] && (a += "Saugstelle<br/>"));"suction_point" == b.emergency && (a += "Saugstelle<br/>");"fire_water_pond" == b.emergency && (a += "L\xF6schteich<br/>");"mountain" == b.emergency_service && (a += "Bergrettungsstation<br/>");"water_tank" == b.emergency && (a += "L\xF6schwassertank<br/>");"container" == b.recycling_type && (a += "Recycling Container<br/>");"recycling" == b.amenity && "yes" == b["recycling:excrement"] || "pump-out" == b["seamark:small_craft_facility:category"] ? a += "Absaugstation<br/>" : "recycling" == b.amenity && (a += "Wertstoffhof<br/>");"yes" == b["diet:pescetarian"] ? a += "pescetarische Gerichte vorhanden<br/>" : "only" == b["diet:pescetarian"] && (a += "nur pescetarische Gerichte<br/>");"yes" == b["diet:vegetarian"] ? a += "vegetarische Gerichte vorhanden<br/>" : "only" == b["diet:vegetarian"] && (a += "nur vegetarische Gerichte<br/>");"yes" == b["diet:lacto_vegetarian"] ? a += "lacto-vegetarische Gerichte vorhanden<br/>" : "only" == b["diet:lacto_vegetarian"] && (a += "nur lacto-vegetarische Gerichte<br/>");"yes" == b["diet:ovo_vegetarian"] ? a += "ovo-vegetarische Gerichte vorhanden<br/>" : "only" == b["diet:ovo_vegetarian"] && (a += "nur ovo-vegetarische Gerichte<br/>");"yes" == b["diet:vegan"] ? a += "vegane Gerichte vorhanden<br/>" : "only" == b["diet:vegan"] && (a += "nur vegane Gerichte<br/>");"yes" == b["diet:fruitarian"] ? a += "frutarische Gerichte vorhanden<br/>" : "only" == b["diet:fruitarian"] && (a += "nur frutarische Gerichte<br/>");"yes" == b["diet:raw"] ? a += "rohk\xF6stliche Gerichte vorhanden<br/>" : "only" == b["diet:raw"] && (a += "nur rohk\xF6stliche Gerichte<br/>");"yes" == b["diet:gluten_free"] ? a += "glutenfreie Gerichte vorhanden<br/>" : "only" == b["diet:gluten_free"] && (a += "nur glutenfreie Gerichte<br/>");"yes" == b["diet:dairy_free"] ? a += "milchfreie Gerichte vorhanden<br/>" : "only" == b["diet:dairy_free"] && (a += "nur milchfreie Gerichte<br/>");"yes" == b["diet:lactose_free"] ? a += "laktosefreie Gerichte vorhanden<br/>" : "only" == b["diet:lactose_free"] && (a += "nur laktosefreie Gerichte<br/>");"yes" == b["diet:halal"] ? a += "Hal\u0101l Gerichte vorhanden<br/>" : "only" == b["diet:halal"] && (a += "nur Hal\u0101l Gerichte<br/>");"yes" == b["diet:kosher"] ? a += "koschere Gerichte vorhanden<br/>" : "only" == b["diet:kosher"] && (a += "nur koschere Gerichte<br/>");"pub" == b.amenity && (a += "Gastst\xE4tte<br/>");"bar" == b.amenity && (a += "Bar<br/>");"yes" == b.frozen_yogurt && (a += "Frozen Yogurt im Angebot<br/>");"yes" == b.slush_ice && (a += "Slush Ice im Angebot<br/>");"yes" == b.cake && (a += "Kuchenteilchen, Geb\xE4ck etc. im Angebot<br/>");"yes" == b.coffee && (a += "Kaffeegetr\xE4nke im Angebot<br/>");"yes" == b.drinks && (a += "Getr\xE4nke im Angebot<br/>");"biergarten" == b.amenity && (a += "Biergarten<br/>");"restaurant" == b.amenity && (a += "Restaurant<br/>");"fast_food" == b.amenity && (a += "Fast Food Restaurant<br/>");if (("cafe" == b.amenity || "coffee_shop" == b.amenity) && "ice_cream" != b.cuisine) a += "Caf\xE9, Bistro<br/>";if ("cafe" == b.amenity && "ice_cream" == b.cuisine || "ice_cream" == b.amenity) a += "Eiscafe<br/>";"alpine_hut" == b.tourism && (a += "Bergh\xFCtte<br/>");"aquarium" == b.tourism && (a += "Aquarium<br/>");"apartment" == b.tourism && (a += "Ferienwohnung<br/>");"attraction" == b.tourism && (a += "Sehensw\xFCrdigkeit<br/>");"artwork" == b.tourism && (a += "Skulptur<br/>");"camp_site" == b.tourism && (a += "Campingplatz<br/>");"caravan_site" == b.tourism && (a += "Wohnmobilstellplatz<br/>");
    "chalet" == b.tourism && (a += "Ferienwohnung /-haus<br/>");"gallery" == b.tourism && (a += "Kunstgalerie<br/>");"guest_house" == b.tourism && (a += "Pension, Gasthaus, Bed & Breakfast<br/>");"hostel" == b.tourism && (a += "Jugendherberge, Hostel<br/>");"hotel" == b.tourism && (a += "Hotel<br/>");"motel" == b.tourism && (a += "Motel<br/>");"museum" == b.tourism && (a += "Museum<br/>");"picnic_site" == b.tourism && (a += "Rast- und Picknickplatz<br/>");"theme_park" == b.tourism && (a += "Freizeit- oder Themenpark<br/>");"viewpoint" == b.tourism && (a += "Aussichtspunkt<br/>");
    "wilderness_hut" == b.tourism && (a += "Schutzh\xFCtte<br/>");"wine_cellar" == b.tourism && (a += "Weinkeller<br/>");"zoo" == b.tourism && (a += "Zoo / Tierpark<br/>", "enclosure" == b.zoo && (a += "mit Wildgehege<br/>"), "petting_zoo" == b.zoo && (a += "mit Streichelzoo<br/>"), "falconry" == b.zoo && (a += "mit Falknerei<br/>"));"trail_riding_station" == b.tourism && (a += "Wanderreitstation<br/>");"fishing" == b.club && (a += "Angelverein<br/>");"sport" == b.club && "fishing" == b.sport && (a += "fishing club<br/>");"amateur_radio" == b.club && (a += "Amateurfunker<br/>");
    "art" == b.club && (a += "Kunstverein<br/>");"astronomy" == b.club && (a += "Astronomieverein<br/>");"automobile" == b.club && (a += "Automobilverein<br/>");"board_games" == b.club && (a += "Brettspielverein<br/>");"card_games" == b.club && (a += "Kartenspielverein<br/>");"charity" == b.club && (a += "Charity-Verein<br/>");"chess" == b.club && (a += "Schachverein<br/>");"cinema" == b.club && (a += "Kinoverein<br/>");"cooking" == b.club && (a += "Kochverein<br/>");"culture" == b.club && (a += "Kulturverein<br/>");"doityourself" == b.club && (a += "doityourself-Verein<br/>");
    "equestrian" == b.club && (a += "Reitverein<br/>");"ethnic" == b.club && (a += "Ethnischer Verein<br/>");"fan" == b.club && (a += "Fanverein<br/>");"freemasonry" == b.club && (a += "Freimaurer-Verein<br/>");"game" == b.club && (a += "Spieleverein<br/>");"history" == b.club && (a += "Historischer-Verein / Verein f\xFCr Geschichte<br/>");"hunting" == b.club && (a += "Jagdverein<br/>");"linux" == b.club && (a += "Linux-Verein<br/>");"motorcycle" == b.club && (a += "Motorradverein<br/>");"music" == b.club && (a += "Musikverein<br/>");"nature" == b.club && (a += "Naturverein<br/>");
    "nudism" == b.club && (a += "Nudisten-Verein / FKK-Verein<br/>");"photography" == b.club && (a += "Fotografieverein<br/>");"politics" == b.club && (a += "Verein f\xFCr Politik<br/>");"relegion" == b.club && (a += "Politischer-Verein<br/>");"scout" == b.club && (a += "Pfadfinderin/Pfadfinder<br/>");"smoke" == b.club && (a += "Raucherverein<br/>");"sport" == b.club && (a += "Sportverein<br/>");"theatre" == b.club && (a += "Theaterverein<br/>");"veterans" == b.club && (a += "Veteranen<br/>");"amusement_arcade" == b.leisure && (a += "Spielhalle<br/>");"beach_resort" == b.leisure && (a += "Standbad<br/>");"bird_hide" == b.leisure && (a += "Vogelbeobachtungspunkt<br/>");"common" == b.leisure && (a += "\xD6ffentliche Gr\xFCnfl\xE4chen<br/>");"club" == b.leisure && (a += "Club/Verein<br/>");"dance" == b.leisure && (a += "Tanzen<br/>");"dog_park" == b.leisure && (a += "Hundepark<br/>");"firepit" == b.leisure && (a += "Feuerstelle<br/>");"fishing" == b.leisure && (a += "Angelstelle<br/>");"garden" == b.leisure && (a += "Garten<br/>");"golf_course" == b.leisure && (a += "Golfplatz<br/>");"hackerspace" == b.leisure && (a += "Ort f\xFCr Hackertreffen<br/>");
    "horse_riding" == b.leisure && (a += "Reitstall / Reiterhof<br/>");"ice_rink" == b.leisure && (a += "Eislaufbahn<br/>");"nature_reserve" == b.leisure && (a += "Naturschutzgebiet (NSG)<br/>");"park" == b.leisure && (a += "Gr\xFCnanlage<br/>");"miniature_golf" == b.leisure && (a += "Minigolf<br/>");"pitch" == b.leisure && (a += "Spielfeld<br/>");"pitch" == b.leisure && "yes" == b.building && (a += "Sporthalle<br/>");"playground" == b.leisure && "yes" == b.building ? a += "Spielscheune<br/>" : "playground" == b.leisure && (a += "Spielplatz<br/>");"social_club" == b.leisure && (a += "Treffpunkt f\xFCr Freizeitgruppen<br/>");"spa" == b.leisure && (a += "Heilbad / Spa<br/>");"sports_centre" == b.leisure && (a += "Sportzentrum<br/>");"climbing_adventure" == b.sport && (a += "Seilgarten<br/>");"stadium" == b.leisure && (a += "Stadion<br/>");"swimming_pool" == b.leisure && (a += "Schwimmbecken<br/>");"track" == b.leisure && (a += "Rennbahn<br/>");"water_park" == b.leisure && (a += "Wasserpark<br/>");"wildlife_hide" == b.leisure && (a += "Wildbeobachtungspunkt<br/>");"adult_gaming_centre" == b.leisure && (a += "Spielothek<br/>");
    "bowling_alley" == b.leisure && "10pin" == b.sport && (a += "Bowlingcenter<br/>");"bowling_alley" == b.leisure && "9pin" == b.sport && (a += "Kegelbahn<br/>");if ("karting" == b.sport || "motor" == b.sport) a += "Kart-/Motorsport<br/>";if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";if (b["piste:type"]) switch (b["piste:type"]) {case "skitour":
            a += "Piste f\xFCr Skitouren<br/>";break;case "downhill":
            a += "Skiabfahrt<br/>";break;case "sled":
            a += "Rodelberg / Rodelstrecke<br/>";break;case "nordic":
            a += "Langlauf Piste<br/>";break;case "hike":
            a += "Schneeschuh- und Winterwanderweg<br/>";break;case "snow_park":
            a += "Snow-Park<br/>";}if (b.sport) switch (b.sport) {case "surfing":
            a += "Surfen<br/>";break;case "kitesurfing":
            a += "Kitesurfen<br/>";break;case "water_ski":
            a += "Wasserski<br/>";}if (b.aerialway) switch (b.aerialway) {case "cable_bar":
            a += "Lift mit Gondeln<br/>";break;case "gondola":
            a += "Lift mit Gondeln<br/>";break;case "chair_lift":
            a += "Sessellift<br/>";break;case "mixed_lift":
            a += "Lift mit Sesseln und Gondeln<br/>";break;case "drag_lift":
            a += "Skilift<br/>";
            break;case "t-bar":
            a += "T-Lift<br/>";break;case "t-bar":
            a += "T-Lift (einseitig)<br/>";break;case "platter":
            a += "Lift mit Sitzscheibe<br/>";break;case "rope_tow":
            a += "B\xFCgellift<br/>";break;case "magic_carpet":
            a += "Bef\xF6rderungsband<br/>";break;default:
            a += "unbekannt";}"mosque" == b.building && (a += "Moschee<br/>");"synagogue" == b.building && (a += "Synagoge<br/>");"apartments" == b.building && (a += "Wohnung<br/>");"farm" == b.building && (a += "Farm<br/>");"hotel" == b.building && (a += "Hotel<br/>");"house" == b.building && (a += "Haus<br/>");"detached" == b.building && (a += "Freistehend<br/>");"residential" == b.building && (a += "Residenz<br/>");if ("domitory" == b.building || "residential plus" == b.building) a += "Wohnheim<br/>";"terrace" == b.building && (a += "Terrasse<br/>");"houseboat" == b.building && (a += "Hausboot<br/>");"bungalow" == b.building && (a += "Bungalow<br/>");"static_caravan" == b.building && (a += "Stehender Wohnwagen<br/>");"commercial" == b.building && (a += "Kommerziell<br/>");"retail" == b.building && (a += "Verkauf<br/>");"warehouse" == b.building && (a += "Lagerhaus<br/>");"bakehouse" == b.building && (a += "Backstube<br/>");"temple" == b.building && (a += "Tempel<br/>");"shrine" == b.building && (a += "Schrein<br/>");"civic" == b.building && (a += "B\xFCrgerlich<br/>");"stadium" == b.building && (a += "Stadium<br/>");"train_station" == b.building && (a += "Bahnhof<br/>");"university" == b.building && (a += "Universit\xE4t<br/>");"public" == b.building && (a += "\xD6ffentliches Geb\xE4ude<br/>");"bridge" == b.building && (a += "Br\xFCcke<br/>");"bunker" == b.building && (a += "Bunker<br/>");"cabin" == b.building && (a += "H\xFCtte<br/>");"conservatory" == b.building && (a += "Wintergarten<br/>");"construction" == b.building && (a += "Im Bau<br/>");"garage" == b.building && (a += "Garage<br/>");"garages" == b.building && (a += "Garagen<br/>");"greenhouse" == b.building && (a += "Gew\xE4chshaus<br/>");"hangar" == b.building && (a += "Hangar<br/>");"hut" == b.building && (a += "H\xFCtte<br/>");"pavillion" == b.building && (a += "Pavillion<br/>");"roof" == b.building && (a += "\xDCberdacht<br/>");"shed" == b.building && (a += "Gartenh\xE4uschen<br/>");
    "transformer_tower" == b.building && (a += "Transformator Turm<br/>");"service" == b.building && (a += "Service-Stelle<br/>");"kiosk" == b.building && (a += "Kiosk<br/>");"carport" == b.building && (a += "Carport<br/>");"ruins" == b.building && (a += "Ruinen<br/>");"gambling" == b.amenity && (a += "Spielhalle<br/>");"library" == b.amenity && (a += "B\xFCcherei<br/>");"fountain" == b.amenity && (a += "Brunnen<br/>");"attraction" == b.amenity && (a += "Sehensw\xFCrdigkeit<br/>");if ("social_centre" == b.amenity || "club" == b.amenity) a += "Verein / Club<br/>";
    "townhall" == b.amenity && (a += "Rathaus / B\xFCrgerhaus<br/>");"bench" == b.amenity && (a += "Parkbank<br/>");if ("grave_yard" == b.amenity || "cemetery" == b.landuse) a += "Friedhof<br/>";"post_box" == b.amenity && (a += "Briefkasten<br/>");"post_office" == b.amenity && (a += "Postamt<br/>");"telephone" == b.amenity && (a += "Telefon<br/>");"atm" == b.amenity && (a += "Geldautomat<br/>");"bank" == b.amenity && (a += "Bankfiliale<br/>");"toilets" == b.amenity && "yes" == b.diaper ? a += "\xD6ffentliche Toilette mit Wickeltisch<br/>" : "toilets" == b.amenity && (a += "\xD6ffentliche Toilette<br/>");"school" == b.amenity && "1" == b["isced:level"] ? a += "Grundschule<br/>" : "school" == b.amenity && "2" == b["isced:level"] ? a += "Sekundarstufe I<br/>" : "school" == b.amenity && "3" == b["isced:level"] ? a += "Sekundarstufe II<br/>" : "school" == b.amenity && (a += "Schule<br/>");"kindergarten" == b.amenity && (a += "Kindergarten<br/>");"internet_cafe" == b.amenity && (a += "Internetcaf\xE9<br/>");"daycare" == b.amenity && (a += "Kinder- und Jugendtagesst\xE4tte<br/>");"childcare" == b.amenity && (a += "Kinder- und Jugendtagesst\xE4tte<br/>");
    "university" == b.amenity && (a += "Universit\xE4t/Hochschule<br/>");"college" == b.amenity && (a += "Universit\xE4t/Hochschule<br/>");"shelter" == b.amenity && (a += "Unterstand<br/>");"bbq" == b.amenity && (a += "Grillplatz<br/>");"nightclub" == b.amenity && (a += "Diskothek / Nachtklub<br/>");"bicycle_parking" == b.amenity && (a += "Fahrradparkplatz<br/>");"bicycle_rental" == b.amenity && (a += "Fahrradverleih<br/>");"boat_sharing" == b.amenity && (a += "Bootsverleih<br/>");"car_sharing" == b.amenity && (a += "Car-Sharing<br/>");"cinema" == b.amenity && (a += "Kino<br/>");"swimming_pool" == b.amenity && (a += "Schwimmbad<br/>");if ("embassy" == b.amenity || "embassy" == b.diplomatic) a += "Botschaft<br/>";"embassy" == b.amenity && "consulate" == b.diplomatic && (a += "Konsulate<br/>");"embassy" == b.amenity && "consulate_general" == b.diplomatic && (a += "Generalkonsulate<br/>");"embassy" == b.amenity && "honorary_consulate" == b.diplomatic && (a += "Honorarkonsulate<br/>");"embassy" == b.amenity && "permanent_mission" == b.diplomatic && (a += "St\xE4ndige Vertretung<br/>");"embassy" == b.amenity && "delegation" == b.diplomatic && (a += "Delegation<br/>");"embassy" == b.amenity && "high_commission" == b.diplomatic && (a += "Hochkommissariat<br/>");"Barfusspfad" == b.amenity && (a += "Barfu\xDFpfad<br/>");"casino" == b.amenity && (a += "Casino<br/>");"spa" == b.amenity && (a += "Heilbad / Spa<br/>");"stables" == b.amenity && (a += "Reitstall / Reiterhof<br/>");"watering_place" == b.amenity && (a += "Wasserstelle / Tr\xE4nke<br/>");"yes" == b.watering_place && (a += "Wasserstelle / Tr\xE4nke<br/>");"water_point" == b.amenity && (a += "gro\xDFe Trinkwasserstelle<br/>");
    "taxi" == b.amenity && (a += "Taxi<br/>");"car_wash" == b.amenity && (a += "Autowaschanlage<br/>");"brothel" == b.amenity && (a += "Bordell, Freudenhaus<br/>");"stripclub" == b.amenity && (a += "Stripclub<br/>");"swingerclub" == b.amenity && (a += "Swingerclub<br/>");"planetarium" == b.amenity && (a += "Planetarium<br/>");"courthouse" == b.amenity && (a += "Gericht<br/>");"crematorium" == b.amenity && (a += "Krematorium<br/>");if ("crypt" == b.amenity || "crypt" == b.building) a += "Krypta<br/>";"hunting_stand" == b.amenity && (a += "Hochsitz<br/>");"photo_booth" == b.amenity && (a += "Fotoautomat<br/>");"prison" == b.amenity && (a += "Gef\xE4ngnis<br/>");"ranger_station" == b.amenity && (a += "National Park Ranger Station<br/>");"register_office" == b.amenity && (a += "Standesamt<br/>");"marketplace" == b.amenity && (a += "Marktplatz / Wochenmarkt<br/>");"solarium" == b.amenity && (a += "Solarium<br/>");"sauna" == b.amenity && (a += "Sauna<br/>");"shower" == b.amenity && (a += "\xF6ffentliche Dusche<br/>");if ("waste_disposal" == b.amenity && (a += "M\xFCllentsorgung auf \xF6ffentlichen Pl\xE4tzen<br/>", b.waste)) switch (a += "Art: ", b.waste) {case "trash":
            a += "Allgemeiner M\xFCll<br/>";break;case "oil":
            a += "Oil<br/>";break;case "drugs":
            a += "Pharmazeutisch<br/>";break;case "organic":
            a += "Kompost<br/>";break;case "plastic":
            a += "Plastik<br/>";break;case "rubble":
            a += "Schutt<br/>";break;case "cigarettes":
            a += "Zigaretten<br/>";break;default:
            a += "Allgemeiner M\xFCll<br/>";}if ("waste_basket" == b.amenity || "dog_excrement" == b.waste) a += "Hunde-Code M\xFCllcontainer<br/>";if ("scout_camp" == b.amenity || "scout_hut" == b.amenity || "scout_hall" == b.amenity) a += "Pfadfinderheim<br/>";"ferry_terminal" == b.amenity && (a += "F\xE4hrhafen<br/>");"bureau_de_change" == b.amenity && (a += "Geldwechselstube<br/>");"youth_club" == b.amenity && (a += "Jugendzentrum<br/>");"festival_grounds" == b.amenity && (a += "Festivalgel\xE4nde<br/>");if ("yes" == b.openfire || "yes" == b.fireplace) a += "Offene Feuerstelle<br/>";if ("vending_machine" == b.amenity) if (b.vending) switch (b.vending) {case "admission_tickets":
            a += "Eintrittskartenautomat<br/>";break;case "animal_feed":
            a += "Tierfutterautomat<br/>";
            break;case "bicycle_tube":
            a += "Fahrradschlauchautomat<br/>";break;case "books":
            a += "B\xFCcherautomat<br/>";break;case "candles":
            a += "Kerzenautomat<br/>";break;case "cigarettes":
            a += "Zigarettenautomat<br/>";break;case "chemist":
            a += "Apotheken/Drogerie Automat<br/>";break;case "condoms":
            a += "Kondomautomat<br/>";break;case "drinks":
            a += "Getr\xE4nkeautomat<br/>";break;case "electronics":
            a += "Automat f\xFCr Elektro-Zubeh\xF6r<br/>";break;case "elongated_coin":
            a += "M\xFCnzpr\xE4gungsautomat<br/>";break;
        case "excrement_bags":
            a += "Hundet\xFCtenspender<br/>";break;case "feminine_hygiene":
            a += "Automat f\xFCr Damenhygieneprodukte<br/>";break;case "first_aid":
            a += "Erste-Hilfe-Automat<br/>";break;case "fishing_tackle":
            a += "Automat f\xFCr Angelzubeh\xF6r<br/>";break;case "fishing_bait":
            a += "Angelk\xF6derautomat<br/>";break;case "flowers":
            a += "Blumenautomat<br/>";break;case "food":
            a += "Lebensmittel-Automat<br/>";break;case "ice_cubes":
            a += "Eisw\xFCrfelautomat<br/>";break;case "ice_cream":
            a += "Automat f\xFCr Speiseeis<br/>";
            break;case "ink_cartridges":
            a += "Druckerpatronen Automat<br/>";break;case "laundry_detergent":
            a += "Waschmittelautomat<br/>";break;case "public_transport_tickets":
            a += "Fahrkartenautomat<br/>";break;case "newspaper":
            a += "Zeitungsautomat<br/>";break;case "parcel_pickup":
            a += "Packstation<br/>";break;case "parcel_mail_in":
            a += "Paketstation<br/>";break;case "parking_tickets":
            a += "Parkscheinautomat<br/>";break;case "photos":
            a += "Fotoautomat<br/>";break;case "sex_toys":
            a += "Automat f\xFCr Sexspielzeug<br/>";break;
        case "SIM_cards":
            a += "Automat f\xFCr SIM Karten<br/>";break;case "stamps":
            a += "Briefmarkenautomat<br/>";break;case "sweets":
            a += "S\xFC\xDFigkeitenautomat<br/>";break;case "syringes":
            a += "Spritzenautomat<br/>";break;case "toll":
            a += "Maut-Automat<br/>";break;case "toys":
            a += "Spielzeugautomat<br/>";break;case "umbrellas":
            a += "Regenschirmautomat<br/>";break;default:
            a += "Verkaufsautomat<br/>";} else a += "Verkaufsautomat<br/>";"arts_centre" == b.amenity && (a += "Kulturzentrum<br/>");"artwork" == b.amenity && (a += "Kunstwerk / Kunstobjekt<br/>");
    "museum" == b.amenity && (a += "Museum<br/>");"theatre" == b.amenity && (a += "Theater<br/>");"cathedral" == b.building && (a += "Kathedrale<br/>");"church" == b.building && (a += "Kirche<br/>");"chapel" == b.building && (a += "Kapelle<br/>");"place_of_worship" == b.amenity && (a += "Kirche / Kultst\xE4tte<br/>");"village" == b.abandoned && (a += "Verlassene Stadt<br/>");"theme_park" == b["abandoned:tourism"] && (a += "Verlassener Vergn\xFCgungspark<br/>");"prison_camp" == b["abandoned:amenity"] && "concentration_camp" == ["concentration_camp"] && (a += "KZ Gedenkst\xE4tte<br/>");"yes" == b.abandoned && "bunker" == b.military && (a += "Verlassene Bunkeranlage<br/>");"yes" == b.abandoned && "barracks" == b.military && (a += "Verlassene Milit\xE4rbaracken<br/>");"yes" == b.abandoned && "airfield" == b.military && (a += "Verlassene Milit\xE4rflugplatz<br/>");"monastery" == b.historic && (a += "Historisches Kloster<br/>");"monastery" == b.amenity && (a += "Kloster<br/>");"monastery" == b.building && (a += "Kloster<br/>");"manor" == b.historic && (a += "Gutshaus / Herrenhaus<br/>");"boundary_stone" == b.historic && (a += "Historischer Grenzstein<br/>");"milestone" == b.historic && (a += "Historischer Meilenstein<br/>");"monument" == b.historic && (a += "Monument<br/>");"palace" == b.historic && (a += "Palast<br/>");"mine" == b.historic && (a += "Verlassene Mine<br/>");"ruins" == b.historic && (a += "Ruine<br/>");"harbour" == b.historic_usage && (a += "historischer Hafen<br/>");"rune_stone" == b.historic && (a += "Runenstein<br/>");"battlefield" == b.historic && (a += "Schlachtfeld<br/>");"blacksmith" == b.historic && (a += "Historische Schmiede<br/>");
    if ("tree_shrine" == b.historic || "wayside_shrine" == b.historic) a += "Schrein / Bildstock<br/>";"city_gate" == b.historic && (a += "Stadttor<br/>");"wayside_cross" == b.historic && (a += "Wegkreuz<br/>");"monument" == b.amenity && (a += "Denkmal<br/>");"memorial" == b.historic && (a += "Denkmal<br/>");"optical_telegraph" == b.historic && (a += "Optischer Telegraph<br/>");if ("castle" == b.historic) if (b.castle_type) switch (b.castle_type) {case "defensive":
            a += "Burg<br/>";break;case "palace":
            a += "Palast<br/>";break;case "stately":
            a += "Schloss<br/>";
            break;case "manor":
            a += "Herrenhaus<br/>";break;case "fortress":
            a += "Festung<br/>";break;case "castrum":
            a += "R\xF6misches Milit\xE4rlager<br/>";break;case "shiro":
            a += "Shiro<br/>";break;case "kremlin":
            a += "Kreml<br/>";break;default:
            a += "Schloss / Burg<br/>";} else a += "Schloss / Burg<br/>";"archaeological_site" == b.historic && (a += "Arch\xE4ologische Fundst\xE4tte<br/>");if ("tomb" == b.historic) if (b.tomb) switch (b.tomb) {case "tumulus":
            a += "H\xFCgelgrab<br/>";break;case "rock-cut":
            a += "Felsgrab<br/>";break;
        case "hypogeum":
            a += "Hypog\xE4um<br/>";break;case "war_grave":
            a += "Soldatenfriedhof<br/>";break;case "mausoleum":
            a += "Mausoleum<br/>";break;case "columbarium":
            a += "Kolumbarium<br/>";break;case "crypt":
            a += "Krypta<br/>";break;case "pyramid":
            a += "Pyramide<br/>";break;case "sarcophagus":
            a += "Sarkophag<br/>";break;case "vault":
            a += "Gruft<br/>";break;case "tombstone":
            a += "Grabstein<br/>";break;default:
            a += "Historische Grabst\xE4tte<br/>";} else a += "Historische Grabst\xE4tte<br/>";"accountant" == b.office && (a += "Buchhalter / Wirtschaftpr\xFCfer<br/>");"administrative" == b.office && (a += "Kreis- bzw. Gemeindebeh\xF6rde<br/>");"architect" == b.office && (a += "Architekturb\xFCro<br/>");"association" == b.office && (a += "Verein, Vereinigung bzw. Interessengemeinschaft<br/>");"physician" == b.office && (a += "Arzt<br/>");"camping" == b.office && (a += "Rezeption Campingplatz oder B\xFCro Freizeitpark<br/>");"company" == b.office && (a += "Sitz einer privaten Firma<br/>");"educational_institution" == b.office && (a += "Bildungseinrichtung<br/>");
    "employment_agency" == b.office && (a += "Job-Center / Arbeitsvermittlung<br/>");"estate_agent" == b.office && (a += "Immobilienmakler / Wohnungsbaugenossenschaft<br/>");"forestry" == b.office && (a += "Forstamt<br/>");"foundation" == b.office && (a += "Gesch\xE4ftsstelle einer Stiftung<br/>");"government" == b.office && (a += "Beh\xF6rde / Regierungseinrichtung<br/>");"guide" == b.office && (a += "B\xFCro f\xFCr Touristenf\xFChrungen<br/>");"insurance" == b.office && (a += "Versicherungsb\xFCro<br/>");"it" == b.office && (a += "IT-Unternehmen<br/>");
    "lawyer" == b.office && (a += "Rechtsanwaltskanzlei<br/>");"newspaper" == b.office && (a += "Zeitungsredaktion<br/>");"ngo" == b.office && (a += "B\xFCro einer Nichtregierungsorganisation<br/>");"notary" == b.office && (a += "Notar<br/>");"political_party" == b.office && (a += "B\xFCro einer politischen Partei<br/>");"quango" == b.office && (a += "B\xFCro einer halbstaatlichen Organisation<br/>");"realtor" == b.office && (a += "Immobilienmakler / Wohnungsbaugenossenschaft<br/>");"real_estate_agent" == b.office && (a += "Immobilienmakler / Wohnungsbaugenossenschaft<br/>");
    "register" == b.office && (a += "Standesamt<br/>");"religion" == b.office && (a += "B\xFCro einer religi\xF6sen Instanz<br/>");"research" == b.office && (a += "Forschungsunternehmen oder -institut<br/>");"tax" == b.office && (a += "Finanzamt<br/>");"telecommunication" == b.office && (a += "Telekommunikationsfirma<br/>");"travel_agent" == b.office && (a += "Sitz eines Reiseunternehmens<br/>");"water_utility" == b.office && (a += "Wasserwirtschaftsamt<br/>");"therapist" == b.office && (a += "Therapeut<br/>");"city" == b.place && (a += "Gro\xDFstadt<br/>");
    "town" == b.place && (a += "Stadt/Kleinstadt<br/>");"village" == b.place && (a += "Dorf<br/>");"continent" == b.place && (a += "Kontinent<br/>");"ocean" == b.place && (a += "Ozean</br>");"track" == b.highway && (a += "Forst-, Wald und Feldweg<br/>");"raceway" == b.highway && (a += "Motorsportbahn<br/>");"designated" == b.bicycle && (a += "Radweg<br/>");"path" == b.highway && (a += "Fu\xDFweg<br/>");"parking" == b.amenity && (a += "Parkplatz<br/>");"services" == b.highway && (a += "Rastst\xE4tte<br/>");"rest_area" == b.highway && (a += "Rastplatz<br/>");"turning_circle" == b.highway && (a += "Wendeplatz/Wendehammer<br/>");"service" == b.highway && (a += "Zufahrtsstra\xDFe / Erschlie\xDFungsweg<br/>");"motorway" == b.highway && (a += "Autobahn<br/>");"motorway_junction" == b.highway && (a += "Autobahnauffahrt<br/>");"bridleway" == b.highway && (a += "Reitweg<br/>");"yes" == b.oneway && (a += "Einbahnstra\xDFe<br/>");"yes" == b.park_ride && (a += "Park and Ride<br/>");"unknown" == b.park_ride && (a += "Park and Ride<br/>");"bus" == b.park_ride && (a += "Park and Ride<br/>");"tram" == b.park_ride && (a += "Park and Ride<br/>");
    "bus_stop" == b.highway && (a += "Bushaltestelle<br/>");"pedestrian" == b.highway && (a += "Fu\xDFg\xE4ngerzone<br/>");"street_lamp" == b.highway && (a += "Strassenlaterne<br/>");"traffic_signals" == b.highway && (a += "Ampel<br/>");"traffic_signals" == b.crossing && (a += "Fu\xDFg\xE4ngerampel<br/>");"speed_camera" == b.highway && (a += "Blitzer<br/>");"yes" == b.traffic_calming && (ret += "Verkehrsberuhigter Bereich</br>");"bump" == b.traffic_calming && (a += "Kurze Bodenwelle</br>");"chicane" == b.traffic_calming && (a += "Zu umfahrendenes Hinderniss</br>");
    "choker" == b.traffic_calming && (a += "Fahrbahnverengung, zu umfahrende Hindernisse m\xF6glich</br>");"cushion" == b.traffic_calming && (a += "Bodenwelle mit L\xFCcken aus mehreren rechteckigen Huckeln</br>");"hump" == b.traffic_calming && (a += "vergleichbare Bodenwelle mit etwar einer L\xE4nge von 2-4M</br>");"island" == b.traffic_calming && (a += "Eine Verkehrsinsel</br>");"rumble_strip" == b.traffic_calming && (a += "Holperstreifen</br>");"table" == b.traffic_calming && (a += "lange Bodenwellen mit flachen Mittelst\xFCck</br>");
    "buoy_cardinal" == b["seamark:type"] && (a += "Kardinalstonne<br/>");"buoy_lateral" == b["seamark:type"] && (a += "Lateraltonne<br/>");"buoy_isolated_danger" == b["seamark:type"] && (a += "Gefahrentonne<br/>");"perch" == b["seamark:beacon_lateral:shape"] && (a += "Pricke<br/>");"fuel" == b.amenity && "fuel_station" == b["seamark:small_craft_facility:category"] ? a += "Schiffstankstelle<br/>" : "fuel" == b.amenity && (a += "Tankstelle<br/>");if ("charging_station" == b.amenity) {
        var a = a + "Ladestation / Stromtankstelle<br/>",
            c = b.voltage;if (b.car) {
            switch (b.car) {case "yes":
                    a += "F\xFCr Autos: Ja";break;case "no":
                    a += "F\xFCr Autos: Nein";break;default:
                    a += "F\xFCr Autos: Unbekannt";}a += "<br/>";
        } else a += "F\xFCr Autos: Unbekannt<br/>";if (b.bicycle) {
            switch (b.bicycle) {case "yes":
                    a += "F\xFCr E-Bike: Ja";break;case "no":
                    a += "F\xFCr E-Bike: Nein";break;default:
                    a += "F\xFCr E-Bike: Unbekannt";}a += "<br/>";
        } else a += "F\xFCr E-Bike: Unbekannt<br/>";"no" == b["socket:schuko"] && (a += "Stecker Schuko: Nein<br/>");"yes" == b["socket:schuko"] && (a += "Stecker Schuko: Ja<br/>");"no" == b["socket:cee_blue"] && (a += "Stecker CEE Blau: Nein<br/>");"yes" == b["socket:cee_blue"] && (a += "Stecker CEE Blau: Ja<br/>");"no" == b["socket:cee_red_16a"] && (a += "Stecker CEE Rot 16a: Nein<br/>");"yes" == b["socket:cee_red_16a"] && (a += "Stecker CEE Rot 16a: Ja<br/>");"no" == b["socket:cee_red_32a"] && (a += "Stecker CEE Rot 32a: Nein<br/>");"yes" == b["socket:cee_red_32a"] && (a += "Stecker CEE Rot 32a: Ja<br/>");"no" == b["socket:cee_red_64a"] && (a += "Stecker CEE Rot 64a: Nein<br/>");"yes" == b["socket:cee_red_64a"] && (a += "Stecker CEE Rot 64a: Ja<br/>");
        "no" == b["socket:cee_red_125a"] && (a += "Stecker CEE Rot 125a: Nein<br/>");"yes" == b["socket:cee_red_125a"] && (a += "Stecker CEE Rot 125a: Ja<br/>");"no" == b["socket:nema_5_15"] && (a += "Stecker Nema 5 15: Nein<br/>");"yes" == b["socket:nema_5_15"] && (a += "Stecker Nema 5 15: Ja<br/>");"no" == b["socket:nema_5_20"] && (a += "Stecker Nema 5 20: Nein<br/>");"yes" == b["socket:nema_5_20"] && (a += "Stecker Nema 5 20: Ja<br/>");"no" == b["socket:nema_14_30"] && (a += "Stecker Nema 14 30: Nein<br/>");"yes" == b["socket:nema_14_30"] && (a += "Stecker Nema 14 30: Ja<br/>");"Nein" == b["socket:nema_14_50"] && (a += "Stecker Nema 14  50: Nein<br/>");"yes" == b["socket:nema_14_50"] && (a += "Stecker Nema 14 50: Ja<br/>");"nein" == b["socket:bs1363"] && (a += "Stecker BS 1363: Nein<br/>");"yes" == b["socket:bs1363"] && (a += "Stecker BS 1363: Ja<br/>");"no" == b["socket:type1"] && (a += "Stecker Typ 1:Nein<br/>");"yes" == b["socket:type1"] && (a += "Stecker Typ 1: Ja<br/>");"no" == b["socket:type1_combo"] && (a += "Stecker Typ 1 Kombo: Nein<br/>");"yes" == b["socket:type1_combo"] && (a += "Stecker Typ 1 Kombo: Ja<br/>");"Nein" == b["socket:type2"] && (a += "Stecker Typ 2: Nein<br/>");"yes" == b["socket:type2"] && (a += "Stecker Typ 2: Ja<br/>");"no" == b["socket:type2_combo"] && (a += "Stecker Typ 2 Kombo: Nein<br/>");"yes" == b["socket:type2_combo"] && (a += "Stecker Typ 2 Kombo: Ja<br/>");"no" == b["socket:type3"] && (a += "Stecker Typ: Nein<br/>");"yes" == b["socket:type3"] && (a += "Stecker Typ 3: Ja<br/>");"no" == b["socket:chademo"] && (a += "Stecker CHAdeMO: Nein<br/>");"yes" == b["socket:chademo"] && (a += "Stecker CHAdeMO: Ja<br/>");
        "no" == b["socket:magne_charge"] && (a += "Stecker Magne : Nein<br/>");"yes" == b["socket:magne_charge"] && (a += "Stecker Magne : Ja<br/>");"no" == b["socket:tesla_standard"] && (a += "Stecker Tesla Standard: Nein<br/>");"yes" == b["socket:tesla_standard"] && (a += "Stecker Tesla Standard: Nein<br/>");"no" == b["socket:tesla_supercharge"] && (a += "Stecker Tesla Schnellladestation: Nein<br/>");"yes" == b["socket:tesla_supercharge"] && (a += "Stecker Tesla Schnellladestation: Ja<br/>");"no" == b["socket:tesla_roadster"] && (a += "Stecker Tesla Roadster: Nein<br/>");
        "yes" == b["socket:tesla_roadster"] && (a += "Stecker Tesla Roadster: Ja<br/>");b["socket:schuko"] && (a += "Stecker Schuko: " + b["socket:schuko"] + "<br/>");b["socket:cee_blue"] && (a += "Stecker CEE Blau: " + b["socket:cee_blue"] + "<br/>");b["socket:cee_red_16a"] && (a += "Stecker CEE Rot 16a: " + b["socket:cee_red_16a"] + "<br/>");b["socket:cee_red_32a"] && (a += "Stecker CEE Rot 32a: " + b["socket:cee_red_32a"] + "<br/>");b["socket:cee_red_64a"] && (a += "Stecker CEE Rot 64a: " + b["socket:cee_red_64a"] + "<br/>");b["socket:cee_red_125a"] && (a += "Stecker CEE Rot 125a: " + b["socket:cee_red_125a"] + "<br/>");b["socket:nema_5_15"] && (a += "Stecker Nema 5 15: " + b["socket:nema_5_15"] + "<br/>");b["socket:nema_5_20"] && (a += "Stecker Nema 5 20: " + b["socket:nema_5_20"] + "<br/>");b["socket:nema_14_30"] && (a += "Stecker Nema 14 30: " + b["socket:nema_14_30"] + "<br/>");b["socket:nema_14_50"] && (a += "Stecker Nema 14 50: " + b["socket:nema_14_50"] + "<br/>");b["socket:bs1363"] && (a += "Stecker BS 1363: " + b["socket:bs1363"] + "<br/>");b["socket:type1"] && (a += "Stecker Typ 1: " + b["socket:type1"] + "<br/>");b["socket:type1_combo"] && (a += "Stecker Typ 1 Kombo: " + b["socket:schuko"] + "<br/>");b["socket:type2"] && (a += "Stecker Typ 2: " + b["socket:type2"] + "<br/>");b["socket:type2_combo"] && (a += "Stecker Typ 2 Kombo: " + b["socket:type2_combo"] + "<br/>");b["socket:type3"] && (a += "Stecker Typ 3: " + b["socket:type3"] + "<br/>");b["socket:chademo"] && (a += "Stecker CHAdeMO: " + b["socket:chademo"] + "<br/>");b["socket:magne_charge"] && (a += "Stecker Magne : " + b["socket:magne_charge"] + "<br/>");b["socket:tesla_standard"] && (a += "Stecker Tesla Standard: " + b["socket:tesla_standard"] + "<br/>");b["socket:tesla_supercharge"] && (a += "Stecker Tesla Schnellladestation: " + b["socket:tesla_supercharge"] + "<br/>");b["socket:tesla_roadster"] && (a += "Stecker Tesla Roadster: " + b["socket:tesla_roadster"] + "<br/>");a += "<br/>";b.voltage && (a += "Volt: " + c + "<br/>");
    }"yes" == b.tunnel && (a += "Tunnel<br/>");if (b.bridge) switch (a += "Br\xFCcken-Typ: ", b.bridge) {case "swing":
            a += "Drehbr\xFCcke";break;case "aqueduct":
            a += "Historische Wasserpipeline";break;
        case "bascule":
            a += "Klapp bzw. Wippbr\xFCcke";break;case "boardwalk":
            a += "Bohlenweg";break;case "cantilever":
            a += "Auslegerbr\xFCcke";break;case "covered":
            a += "gedeckte Br\xFCcke";break;case "drawbridge":
            a += "Klappbr\xFCcke";break;case "humpback":
            a += "Drehbr\xFCcke";break;case "lift":
            a += "Hubbr\xFCcke";break;case "low_water_crossing":
            a += "Irische Br\xFCcke";break;case "moveable":
            a += "Bewegliche Br\xFCcken";break;case "pontoon":
            a += "Schwimmbr\xFCcke";break;case "suspension":
            a += "H\xE4ngebr\xFCcke";
            break;case "trestle":
            a += "Trestle-Br\xFCcke";break;case "viaduct":
            a += "Viadukt";}if (b["bridge:movable"]) switch (b["bridge:movable"]) {case "swing":
            a += "Drehbr\xFCcke";break;case "bascule":
            a += "Klapp bzw. Wippbr\xFCcke";break;case "drawbridge":
            a += "Klappbr\xFCcke";break;case "lift":
            a += "Hubbr\xFCcke";break;case "submersible":
            a += "Senkbr\xFCcke";break;case "transporter":
            a += "Schwebef\xE4hre";break;case "retractable":
            a += "Schubbr\xFCcke";}if ("nursing_home" == b.amenity || "retirement_home" == b.amenity) a += "Seniorenheim / Pflegeheim<br/>";"social_facility" == b.amenity && (a += "Allg. soziale Einrichtung<br/>");if (b.social_facility) {
        "group_home" == b.social_facility && "senior" == b["social_facility:for"] && (a += "Seniorenheim<br/>");"assisted_living" == b.social_facility && (a += "Betreutes Wohnen<br/>");"outreach" == b.social_facility && (a += "Beratungsstelle<br/>");"workshop" == b.social_facility && (a += "soziale Werkstatt<br/>");if ("ambulatory_care" == b.social_facility || "healthcare" == b.social_facility) a += "Ambulanter Pflegedienst<br/>";
        "shelter" == b.social_facility && "senior" == b["social_facility:for"] && (a += "Tages- u. Kurzzeitpflege<br/>");"shelter" == b.social_facility && "abused" == b["social_facility:for"] && (a += "Notunterkunft<br/>");"food_bank" == b.social_facility && (a += "Lebensmittelhilfe<br/>");"hospice" == b.social_facility && (a += "Hospiz<br/>");
    }b.brewery && (a += "Ausgeschenkte Biersorten: " + b.brewery + "<br/>");"alcohol" == b.shop && (a += "Spirituosenladen<br/>");"bakery" == b.shop && (a += "B\xE4ckerei<br/>");"beverages" == b.shop && (a += "Getr\xE4nkehandel<br/>");
    "butcher" == b.shop && (a += "Fleischerei<br/>");"cheese" == b.shop && (a += "K\xE4sefachgesch\xE4ft<br/>");"chocolate" == b.shop && (a += "Schokoladenfachgesch\xE4ft<br/>");"coffee" == b.shop && (a += "Kaffeefachgesch\xE4ft<br/>");"confectionery" == b.shop && (a += "S\xFC\xDFwarenladen<br/>");"convenience" == b.shop && (a += "Lebensmittelgesch\xE4ft<br/>");"deli" == b.shop && (a += "Feinkostladen<br/>");"dairy" == b.shop && (a += "Milchladen<br/>");"farm" == b.shop && (a += "Hofladen<br/>");"greengrocer" == b.shop && (a += "Gem\xFCseh\xE4ndler<br/>");
    "grocery" == b.shop && (a += "Lebensmittelgesch\xE4ft<br/>");"organic" == b.shop && (a += "Bio-Laden, Reformhaus<br/>");"pasta" == b.shop && (a += "Pastagesch\xE4ft<br/>");"seafood" == b.shop && (a += "Fischfachgesch\xE4ft<br/>");"tea" == b.shop && (a += "Teefachgesch\xE4ft<br/>");"wine" == b.shop && (a += "Weinhandlung<br/>");"department_store" == b.shop && (a += "Kaufhaus<br/>");"general" == b.shop && (a += "Gemischtwarenhandlung<br/>");"kiosk" == b.shop && (a += "Kiosk<br/>");"mall" == b.shop && (a += "Einkaufszentrum<br/>");"supermarket" == b.shop && (a += "Supermarkt<br/>");"baby_goods" == b.shop && (a += "Babyfachmarkt<br/>");"bag" == b.shop && (a += "Taschen und Koffer<br/>");"boutique" == b.shop && (a += "Boutique<br/>");"clothes" == b.shop && (a += "Bekleidung<br/>");"fabric" == b.shop && (a += "Textilgesch\xE4ft<br/>");"fashion" == b.shop && (a += "Fashion<br/>");"jewelry" == b.shop && (a += "Juwelier<br/>");"leather" == b.shop && (a += "Lederwaren<br/>");"shoes" == b.shop && (a += "Schuhfachgesch\xE4ft<br/>");"variety_store" == b.shop && (a += "Ein-Euro-Laden<br/>");"chemist" == b.shop && (a += "Drogerie<br/>");
    "cosmetics" == b.shop && (a += "Kosmetikfachgesch\xE4ft<br/>");"drugstore" == b.shop && (a += "Drogerie oder Apotheke (veraltet)<br/>");"perfumery" == b.shop && (a += "Parf\xFCmerie<br/>");"erotic" == b.shop && (a += "Erotikhandel<br/>");"hairdresser" == b.shop && (a += "Friseur<br/>");"hearing_aids" == b.shop && (a += "H\xF6rger\xE4te<br/>");"herbalist" == b.shop && (a += "Kr\xE4uterhandel<br/>");"massage" == b.shop && (a += "Massagesalon<br/>");"medical_supply" == b.shop && (a += "Sanit\xE4tshaus<br/>");"optician" == b.shop && (a += "Optiker<br/>");
    "tattoo" == b.shop && (a += "T\xE4towierer<br/>");"bathroom_furnishing" == b.shop && (a += "Badm\xF6bel und -accessoires<br/>");"doityourself" == b.shop && (a += "Baumarkt/Baustoffhandel<br/>");"energy" == b.shop && (a += "Energiehandel<br/>");"florist" == b.shop && (a += "Blumengesch\xE4ft<br/>");"furnace" == b.shop && (a += "Ofenfachgesch\xE4ft<br/>");"garden_centre" == b.shop && (a += "Gartencenter<br/>");"gas" == b.shop && (a += "Fachgesch\xE4ft f\xFCr technische Gase<br/>");"glaziery" == b.shop && (a += "Glaserei<br/>");"hardware" == b.shop && (a += "Eisenwaren<br/>");"houseware" == b.shop && (a += "Haushaltswaren und Inneneinrichtung<br/>");"locksmith" == b.shop && (a += "Schl\xFCsseldienst<br/>");"paint" == b.shop && (a += "Farbenfachgesch\xE4ft<br/>");"trade" == b.shop && (a += "Baustoffhandel<br/>");"antiques" == b.shop && (a += "Antiquit\xE4ten<br/>");"bed" == b.shop && (a += "Betten- und Matratzengesch\xE4ft<br/>");"candles" == b.shop && (a += "Kerzengesch\xE4ft<br/>");"carpet" == b.shop && (a += "Teppichfachhandel<br/>");"curtain" == b.shop && (a += "Gardinenfachgesch\xE4ft<br/>");
    "furniture" == b.shop && (a += "M\xF6bel- und Einrichtungshaus<br/>");"interior_decoration" == b.shop && (a += "Innendekoration / Raumausstattung<br/>");"kitchen" == b.shop && (a += "K\xFCchen<br/>");"window_blind" == b.shop && (a += "Jalousien und Roll\xE4den<br/>");"computer" == b.shop && (a += "Computer-Fachh\xE4ndler<br/>");"electronics" == b.shop && (a += "Elektronikmarkt<br/>");"hifi" == b.shop && (a += "Hifi-Fachh\xE4ndler<br/>");"mobile_phone" == b.shop && (a += "Handy-Shop<br/>");"radiotechnics" == b.shop && (a += "Radio- und Fernsehtechnik<br/>");
    "vacuum_cleaner" == b.shop && (a += "Staubsaugerfachgesch\xE4ft<br/>");"bicycle" == b.shop && (a += "Fahrradfachgesch\xE4ft<br/>");"car" == b.shop && (a += "Autohaus<br/>");"car_repair" == b.shop && (a += "Autowerkstatt<br/>");"car_parts" == b.shop && (a += "Autoteilefachgesch\xE4ft<br/>");if ("dive" == b.shop || "scuba_diving" == b.shop) a += "Tauchausr\xFCstung<br/>";"fishing" == b.shop && (a += "Angelfachgesch\xE4ft<br/>");"free_flying" == b.shop && (a += "Fallschirmausr\xFCstung<br/>");"hunting" == b.shop && (a += "Jagdausr\xFCstung<br/>");
    "motorcycle" == b.shop && (a += "Motorradgesch\xE4ft<br/>");"outdoor" == b.shop && (a += "Trekking-/Outdoorladen<br/>");"sports" == b.shop && (a += "Sportgesch\xE4ft<br/>");"tyres" == b.shop && (a += "Reifenfachhandel<br/>");"water_sports" == b.shop && (a += "Wassersportbedarf<br/>");"art" == b.shop && (a += "Kunstladen<br/>");"craft" == b.shop && (a += "Kunsthandwerk<br/>");"frame" == b.shop && (a += "Bilderrahmengesch\xE4ft<br/>");"music" == b.shop && (a += "Musikgesch\xE4ft<br/>");"music_instrument" == b.shop && (a += "Musikhaus<br/>");"photo" == b.shop && (a += "Fotofachgesch\xE4ft<br/>");"video" == b.shop && (a += "Videothek<br/>");"video_games" == b.shop && (a += "Videospiele<br/>");"anime" == b.shop && (a += "Anime<br/>");"books" == b.shop && (a += "Buchhandlung<br/>");"gift" == b.shop && (a += "Andenken, Reisemitbringsel, Souveniershop<br/>");"newsagent" == b.shop && (a += "Zeitungsh\xE4ndler<br/>");"stationery" == b.shop && (a += "Schreibwaren<br/>");"ticket" == b.shop && (a += "Ticketshop<br/>");"copyshop" == b.shop && (a += "Kopierladen<br/>");"funeral_directors" == b.shop && (a += "Bestattungsunternehmen<br/>");
    "laundry" == b.shop && (a += "Waschsalon / W\xE4scherei<br/>");"dry_cleaning" == b.shop && (a += "chemische Reinigung<br/>");"money_lender" == b.shop && (a += "Geldverleiher<br/>");"pawnbroker" == b.shop && (a += "Pfandhaus / Pfandleiher<br/>");"pet" == b.shop && (a += "Zoo- und Tierhandlung<br/>");"pyrotechnics" == b.shop && (a += "Feuerwerk<br/>");"religion" == b.shop && (a += "Religi\xF6se Artikel<br/>");"beauty" == b.shop && (a += "Sch\xF6nheitssalon<br/>");"solarium" == b.shop && (a += "Solarium<br/>");"tobacco" == b.shop && (a += "Tabakwaren<br/>");
    "toys" == b.shop && (a += "Spielwaren<br/>");"travel_agency" == b.shop && (a += "Reiseb\xFCro<br/>");"market_hall" == b.shop && (a += "Markthalle<br/>");"vacant" == b.shop && (a += "leerstehendes Ladenlokal<br/>");"weapons" == b.shop && (a += "Waffenladen<br/>");"lottery" == b.gambling && (a += "Lottoannahmestelle<br/>");"fish" == b.pet && (a += "Aquaristik<br/>");"agriucultural_engines" == b.craft && (a += "Landmaschinenbau<br/>");"basket_maker" == b.craft && (a += "Korbmacher<br/>");"beekeeper" == b.craft && (a += "Imker<br/>");"blacksmith" == b.craft && (a += "Schmied<br/>");"brewery" == b.craft && (a += "Brauerei<br/>");"yes" == b.microbrewery && (a += "Hausbrauerei<br/>");"boatbuilder" == b.craft && (a += "Bootsbauer<br/>");"bookbinder" == b.craft && (a += "Buchbinder<br/>");"builder" == b.craft && (a += "Hausbau<br/>");"carpenter" == b.craft && (a += "Tischler/Schreiner, Zimmermann<br/>");"carpet_layer" == b.craft && (a += "Teppichleger<br/>");"caterer" == b.craft && (a += "Catering<br/>");"clockmaker" == b.craft && (a += "Uhrmacher<br/>");"confectionery" == b.craft && (a += "Konditorei<br/>");"dressmaker" == b.craft && (a += "Schneider<br/>");"electrician" == b.craft && (a += "Elektriker<br/>");"gardener" == b.craft && (a += "Garten- und Landschaftsbauer<br/>");"glaziery" == b.craft && (a += "Glaserei<br/>");"handicraft" == b.craft && (a += "Handwerkskunst<br/>");"hvac" == b.craft && (a += "K\xE4lteanlagenbauer f\xFCr L\xFCftungs-, Heizungs- und Klimatechnik<br/>");"insulation" == b.craft && (a += "W\xE4rmed\xE4mmung von Geb\xE4uden<br/>");"jeweller" == b.craft && (a += "Juwelier, Gold-/Silber-Schmied<br/>");"key_cutter" == b.craft && (a += "Schl\xFCsselmacher<br/>");"locksmith" == b.craft && (a += "Schl\xFCsseldienst<br/>");"metal_construction" == b.craft && (a += "Metallbauer<br/>");"optician" == b.craft && (a += "Optiker<br/>");"painter" == b.craft && (a += "Maler<br/>");"parquet_layer" == b.craft && (a += "Parkettverleger<br/>");"photographer" == b.craft && (a += "Fotograf<br/>");"photographic_laboratory" == b.craft && (a += "Fotolabor<br/>");"plasterer" == b.craft && (a += "Gipser, Verputzer, Stuckateur<br/>");"plumber" == b.craft && (a += "Anlagenmechaniker Sanit\xE4r-, Heizungs- und Klimatechnik.<br/>");
    "pottery" == b.craft && (a += "T\xF6pferei<br/>");"rigger" == b.craft && (a += "Riggemacher (Takelage f\xFCr Segelschiffe)<br/>");"roofer" == b.craft && (a += "Dachdecker<br/>");"saddler" == b.craft && (a += "Sattler<br/>");"sailmaker" == b.craft && (a += "Segelmacher<br/>");"sawmill" == b.craft && (a += "Holzverarbeitungsbetrieb<br/>");"scaffolder" == b.craft && (a += "Ger\xFCstbauer<br/>");"sculptor" == b.craft && (a += "Bildhauer<br/>");"shoemaker" == b.craft && (a += "Schuhmacher<br/>");"stand_builder" == b.craft && (a += "Messe- / Standbauer<br/>");
    "stonemason" == b.craft && (a += "Steinmetz<br/>");"sun_protection" == b.craft && (a += "Rolladen- und Jalousiebauer<br/>");"sweep" == b.craft && (a += "Schornsteinfeger<br/>");"tailor" == b.craft && (a += "Schneider<br/>");"tiler" == b.craft && (a += "Fliesen-, Platten- und Mosaikleger<br/>");"tinsmith" == b.craft && (a += "Spengler, Klempner<br/>");"upholsterer" == b.craft && (a += "Polsterer<br/>");"watchmaker" == b.craft && (a += "Uhrmacher<br/>");"window_construction" == b.craft && (a += "Fensterbauer<br/>");"machines" == b.rental && (a += "Maschinenverleih<br/>");
    "car_rental" == b.amenity && (a += "Autoverleih<br/>");"allotments" == b.landuse && (a += "Schrebergarten<br/>");"basin" == b.landuse && (a += "Regenwasserr\xFCckhaltebecken<br/>");"brownfield" == b.landuse && (a += "Vorher bebautes Land<br/>");"commercial" == b.landuse && (a += "Industriegebiet<br/>");"construction" == b.landuse && (a += "Baugebiet<br/>");"farmland" == b.landuse && (a += "Ackerfl\xE4che<br/>");"farmyard" == b.landuse && (a += "landwirtschaftlicher Betrieb<br/>");"forest" == b.landuse && (a += "Forst<br/>");"garages" == b.landuse && (a += "Garagenkomplex<br/>");"grass" == b.landuse && (a += "Rasenfl\xE4chen<br/>");"greenfield" == b.landuse && (a += "Bauerwartungsland<br/>");"greenhouse_horticulture" == b.landuse && (a += "Gew\xE4chshaus-Fl\xE4che<br/>");"industrial" == b.landuse && (a += "Gewerbe-/Industriegebiet<br/>");"landfill" == b.landuse && (a += "M\xFClldeponie<br/>");"meadow" == b.landuse && (a += "Gr\xFCnfl\xE4che<br/>");"orchard" == b.landuse && (a += "Obstplantage<br/>");"plant_nursery" == b.landuse && (a += "Baumschule<br/>");"quarry" == b.landuse && (a += "Sand- und Kiesgrube<br/>");"railway" == b.landuse && (a += "Gebiet f\xFCr Eisenbahnnutzung<br/>");"recreation_ground" == b.landuse && (a += "Erholungsgebiet<br/>");"reservoir" == b.landuse && (a += "Wasserreservoir<br/>");"residential" == b.landuse && (a += "Wohngebiet<br/>");"retail" == b.landuse && (a += "Einkaufszentrum<br/>");"salt_pond" == b.landuse && (a += "Saline<br/>");"village_green" == b.landuse && (a += "Gr\xFCnfl\xE4che<br/>");"vineyard" == b.landuse && (a += "Weinberg<br/>");"pond" == b.landuse && (a += "kleiner Teich<br/>");"salt_pond" == b.landuse && (a += "Saline<br/>");"animal_keeping" == b.landuse && (a += "Weide, Paddock f\xFCr Tierhaltung<br/>");"yes" == b.entrance && (a += "Eingang zum Geb\xE4ude<br/>");"main" == b.entrance && (a += "Haupteingang<br/>");"service" == b.entrance && (a += "Hinterausgang f\xFCr Angestellte oder Zulieferer<br/>");"exit" == b.entrance && (a += "Ausgang des Geb\xE4udes<br/>");"emergency" == b.entrance && (a += "Notausgang<br/>");"bay" == b.natural && (a += "Bucht<br/>");"beach" == b.natural && (a += "Strand<br/>");"wood" == b.natural && (a += "nat\xFCrlicher Wald<br/>");
    "glacier" == b.natural && (a += "Gletscher<br/>");"cave_entrance" == b.natural && (a += "H\xF6hle<br/>");"spring" == b.natural && (a += "nat\xFCrliche Quelle<br/>");"waterfall" == b.natural && (a += "Wasserfall<br/>");"scrub" == b.natural && (a += "unkultiviertes Buschland<br/>");"grassland" == b.natural && (a += "unkultiviertes Grasland<br/>");"wetland" == b.natural && (a += "Feuchtgebiet<br/>");"tree" == b.natural && (a += "Baum");"peak" == b.natural && "yes" == b["summit:cross"] && (a += "Gipfelkreuz<br/>");"tree_row" == b.natural && (a += "Baumreihe / Allee<br/>");
    "heath" == b.natural && (a += "Heide<br/>");"moor" == b.natural && (a += "Hochmoor<br/>");"grassland" == b.natural && (a += "unkultiviertes Grasland<br/>");"fell" == b.natural && (a += "Grasland oberhalb der Baumgrenze<br/>");"bare_rock" == b.natural && (a += "Nackter Fels<br/>");"scree" == b.natural && (a += "Schutt (Hangschutt)<br/>");"volcano" == b.natural && (a += "Vulkan<br/>");"valley" == b.natural && (a += "Tal<br/>");"stone" == b.natural && (a += "Findling<br/>");"sea" == b.natural && (a += "Meer<br/>");"national_park" == b.boundary && (a += "Nationalpark<br/>");
    "protected_area" == b.boundary && (a += "Schutzgebiet<br/>");"yes" == b.mountain_pass && (a += "Gebirgspass<br/>");"waterfall" == b.waterway && (a += "Wasserfall<br/>");"canal" == b.waterway && (a += "Kanal<br/>");"canal" == b.water && (a += "Kanal<br/>");"river" == b.waterway && (a += "Fluss<br/>");"river" == b.water && (a += "Fluss<br/>");"riverbank" == b.waterway && (a += "Fluss<br/>");"ditch" == b.waterway && (a += "Entw\xE4sserungsgraben<br/>");"stream" == b.waterway && (a += "Bach<br/>");"ferry" == b.route && (a += "F\xE4hrverbindung<br/>");"turning_point" == b.waterway && (a += "Wendestelle<br/>");if ("lake" == b.water || "water" == b.natural) a += "See<br/>";"cove" == b.water && (a += "kleine Bucht<br/>");"lagoon" == b.water && (a += "Lagune<br/>");"pond" == b.water && (a += "Teich<br/>");"reservoir" == b.water && (a += "Wasserreservoir<br/>");"oxbow" == b.water && (a += "Altwassersee<br/>");"lock" == b.water && (a += "Schleusenkammer<br/>");"moat" == b.water && (a += "Burggraben<br/>");"wastewater" == b.water && (a += "Kl\xE4ranlage<br/>");"guest" == b.mooring && "pier" == b.man_made || "visitor_berth" == b["seamark:small_craft_facility:category"] ? a += "Gastliegeplatz<br/>" : "pier" == b.man_made && (a += "Anlegestelle<br/>");"boatyard" == b.waterway && (a += "Schiffswerft<br/>");"mooring" == b["seamark:type"] && "dolphin" == b["seamark:mooring:category"] && (a += "Dalben<br/>");"foot" == b.route && (a += "Wanderweg<br/>");"hiking" == b.route && (a += "Wanderweg<br/>");if ("yes" == b.hiking && "information" == b.tourism) a += "Wegweiser<br/>";else if ("information" == b.tourism && "information" == b.tourism) if (b.information) switch (b.information) {case "board":
            a += "Informationstafel<br/>";break;case "map":
            a += "Informationstafel mit Karte<br/>";break;case "office":
            a += "Touristeninformation<br/>";break;case "terminal":
            a += "Informationsterminal<br/>";break;case "audioguide":
            a += "Audioguide<br/>";break;case "guidepost":
            a += "Wegweiser<br/>";break;case "tactile_map":
            a += "Blindenkarte 2D<br/>";break;case "tactile_model":
            a += "Blindenkarte 3D<br/>";break;case "route_marker":
            a += "Wegerkennungsmarker<br/>";break;default:
            a += "Informationstafel<br/>";} else a += "Informationstafel<br/>";"bicycle" == b.route && (a += "Radwanderweg<br/>");
    "mtb" == b.route && (a += "Mountainbikeroute<br/>");"horse" == b.route && (a += "Reitwanderweg<br/>");"coastline" == b.natural && (a += "K\xFCstenlinie<br/>");"cliff" == b.natural && (a += "Klippe<br/>");"dam" == b.waterway && (a += "Staudamm<br/>");"weir" == b.waterway && (a += "Wehr<br/>");"lock_gate" == b.waterway && (a += "Schleusentor<br/>");"yes" == b.lock && (a += "Schleuse<br/>");"sluice_gate" == b.waterway && (a += "Siel<br/>");"pumping_station" == b.man_made && (a += "Sch\xF6pfwerk<br/>");"groyne" == b.man_made && (a += "Buhne<br/>");"dyke" == b.man_made && (a += "Deich<br/>");"levee" == b.man_made && (a += "Deich<br/>");"watermill" == b.man_made && (a += "Wasserm\xFChle<br/>");"airfield" == b.military && (a += "Milit\xE4rflugplatz<br/>");"naval_base" == b.military && (a += "Marinest\xFCtzpunkt<br/>");"range" == b.military && (a += "Waffen\xFCbungsplatz<br/>");"military" == b.landuse && (a += "milit\xE4risch genutztes Gebiet<br/>");"training_area" == b.military && (a += "Truppen\xFCbungsplatz<br/>");"exclusion_zone" == b.military && (a += "milit\xE4risch genutztes Gebiet<br/>");"danger_area" == b.military && (a += "milit\xE4rische Gefahrenzone<br/>");"barracks" == b.military && (a += "Kaserne<br/>");"nuclear_explosion_site" == b.military && (a += "Atomwaffentestgel\xE4nde<br/>");"yes" == b.construction ? a += "Baustelle<br/>" : "construction" == b.highway && (a += "Baustelle<br/>");"petroleum_well" == b.man_made && (a += "Erd\xF6lpumpe<br/>");"storage_tank" == b.man_made && (a += "Speichertank<br/>");"wastewater_plant" == b.man_made && (a += "Kl\xE4ranlage<br/>");"silo" == b.man_made && (a += "Silo<br/>");"water_tower" == b.man_made && (a += "Wasserturm<br/>");"windmill" == b.man_made && (a += "Windm\xFChle<br/>");"monitoring_station" == b.man_made && (a += "Messstation");"crane" == b.man_made && (a += "Kran");"lighthouse" == b.man_made && (a += "Leuchtturm");"beacon" == b.man_made && (a += "Leuchtfeuer");"breakwater" == b.man_made && (a += "Wellenbrecher");"lamp" == b.man_made && "street_lamp" == b["lamp:type"] && (a += "Strassenlaterne<br/>");"lantern" == b.light_source && (a += "Strassenlaterne<br/>");"floodlight" == b.light_source && (a += "Flutlicht<br/>");"signal_lamp" == b.light_source && (a += "Signallicht<br/>");"aviation" == b.light_source && (a += "Befeuerung<br/>");"warning" == b.light_source && (a += "Warnlicht<br/>");if (b.light_source && b["light:method"]) switch (a += "Licht Art: ", b["light:method"]) {case "gas":
            a += "Gas";break;case "electric":
            a += "Elektrisch";break;case "incandescent":
            a += "strahlend";break;case "halogen":
            a += "Halogen";break;case "discharge":
            a += "Entladungslicht";break;case "metal-halide":
            a += "Halogen-Metalldampflampe";break;case "neon":
            a += "Neon";break;case "sodium":
            a += "Natriumdampflampe";
            break;case "high_pressure_sodium":
            a += "Hochdruck Natriumdampflampe";break;case "low_pressure_sodium":
            a += "Niedrigdruck Natriumdampflampe";break;case "fluorescent":
            a += "Fluoreszenzlampe";break;case "mercury":
            a += "Quecksilberlampe";break;case "LED":
            a += "LED";break;case "laser":
            a += "Laser";break;case "arc":
            a += "Lichtbogen";break;default:
            a += "Unbekannt";}"drinking_water" == b.amenity && (a += "Trinkwasser<br/>");"yes" == b.drinking_water && (a += "Trinkwasser<br/>");"works" == b.man_made ? a += "Industriegeb\xE4ude<br/>" : "industrial" == b.building ? a += "Industriegeb\xE4ude<br/>" : "industrial" == b.landuse ? a += "Industriegebiet<br/>" : "industrial" == b.abutters ? a += "Industriegebiet<br/>" : "commercial" == b.abutters && (a += "Gewerbegebiet<br/>");if (b["generator:source"]) switch (a += "Anlagen-Typ: ", b["generator:source"]) {case "biomass":
            a += "Biogasanlage";break;case "biofuel":
            a += "Biogasanlage";break;case "biogas":
            a += "Biogasanlage";break;case "coal":
            a += "Kohlekraftwerk";break;case "oil":
            a += "\xD6lraffinerie";break;case "waste":
            a += "M\xFCllverbrennungsanlage";
            break;case "wind":
            a += "Windkraftwerk";break;case "solar":
            a += "Solarkraftwerk";break;case "hydro":
            a += "Wasserkraftwerk";break;case "tidal":
            a += "Gezeitenkraftwerk";break;case "wave":
            a += "Wellenkraftwerk";break;case "geothermal":
            a += "Geothermie";break;case "osmotic":
            a += "Osmosekraftwerk";break;case "nuclear":
            a += "Atomkraftwerk";break;default:
            a += "unbekannt<br/>";}"photovoltaic" == b.power_source && (a += "Solarkraftwerk");"line" == b.power && (a += "Hochspannungs-\xDCbertragungsleitung<br/>");"cable" == b.power && (a += "Untergrundkabel<br/>");
    "cable_distribution_cabinet" == b.power && (a += "Kabelverteilerschrank<br/>");"plant" == b.power && (a += "Elektrizit\xE4tskraftwerk<br/>");"station" == b.power && (a += "Elektrizit\xE4tskraftwerk<br/>");"sub_station" == b.power && (a += "Elektrizit\xE4tskraftwerk<br/>");"compensator" == b.power && (a += "Kompensator<br/>");"converter" == b.power && (a += "Konverter<br/>");"generator" == b.power && (a += "Generator<br/>");"heliostat" == b.power && (a += "Heliostat<br/>");"insulator" == b.power && (a += "Isulator<br/>");"busbar" == b.line && (a += "Sammelschiene<br/>");
    "bay" == b.line && (a += "Verbindung Schaltung und Sammelschiene<br/>");"minor_line" == b.power && (a += "Nebenlinie<br/>");"pole" == b.power && (a += "Pfahl<br/>");"portal" == b.power && (a += "H-f\xF6rmiger Mast<br/>");"catenary_mast" == b.power && (a += "Fahrleitungsmast<br/>");"substation" == b.power && (a += "Umspannwerk<br/>");"switch" == b.power && (a += "Lastschalter<br/>");"terminal" == b.power && (a += "Terminal / Anschluss<br/>");"tower" == b.power && (a += "Hochspannungsleitungs<br/>");"transformer" == b.power && (a += "Nebenlinie<br/>");if (b.barrier) switch (b.barrier) {case "bollard":
            a += "Poller, Pfosten<br/>";break;case "cycle_barrier":
            a += "Umlaufsperre, Dr\xE4ngelgitter<br/>";break;case "gate":
            a += "Tor, Schranke<br/>";break;case "chain":
            a += "Kette<br/>";break;case "lift_gate":
            a += "Schlagbaum<br/>";break;case "wall":
            a += "L\xE4rmschutzwand<br/>";break;case "toll_booth":
            a += "Mautstelle<br/>";break;case "fence":
            switch (b.fence_type) {case "barbed_wire":
                    a += "Stacheldrahtzaun<br/>";break;case "wood":
                    a += "Holzzaun<br/>";break;case "chain_link":
                    a += "Maschendrahtzaun<br/>";break;case "electric":
                    a += "Weidezaun<br/>";break;case "railing":
                    a += "Gel\xE4nder<br/>";break;case "wire":
                    a += "einfacher Drahtzaun<br/>";break;case "metal":
                    a += "Metallzaun<br/>";break;case "pole":
                    a += "Holzpf\xE4hle<br/>";break;default:
                    a += "Zaun<br/>";}break;case "block":
            a += "Block<br/>";break;case "ditch":
            a += "Graben<br/>";break;case "border_control":
            a += "Grenzkontrolle<br/>";break;case "hedge":
            a += "Hecke<br/>";break;case "retaining_wall":
            a += "St\xFCtzmauer<br/>";break;case "cattle_grid":
            a += "Weiderost<br/>";break;case "horse_stile":
            a += "Zaun\xFCbertritt<br/>";break;default:
            a += "unbekannt<br/>";}"noise_barrier" == b.wall && (a += "L\xE4rmschutzwand<br/>");"retaining_wall" == b.designation && (a += "L\xE4rmschutzwand<br/>");"noise_barrier" == b.designation && (a += "L\xE4rmschutzwand<br/>");"surveillance" == b.man_made && (a += "\xDCberwachter Bereich<br/>");if (b.aeroway) switch (a += "Flughafen: ", b.aeroway) {case "aerodrome":
            a += "Flugplatz";break;case "apron":
            a += "Vorfeld";break;case "gate":
            a += "gate";break;case "helipad":
            a += "Hubschrauberlandeplatz";break;
        case "hangar":
            a += "Hangar";break;case "runway":
            a += "Start-/Landebahn";break;case "taxiway":
            a += "Rollweg";break;case "terminal":
            a += "Flughafengeb\xE4ude";break;default:
            a += "unbekannt<br/>";}"halt" == b.railway && (a += "Bahn-Haltepunkt<br/>");"crossing" == b.railway && (a += "Bahn\xFCbergang<br/>");"level_crossing" == b.railway && (a += "Bahn\xFCbergang<br/>");"station" == b.railway && (a += "Bahnhof<br/>");"bus_station" == b.amenity && (a += "Busbahnhof<br/>");"bus_station" == !b.amenity && "station" == b.public_transport && "yes" == b.bus && (a += "Busbahnhof<br/>");"rail" == b.railway && (a += "Bahnlinie<br/>", "contact_line" == b.electrified && (a += "elektrifizierte Bahntrasse mit Oberleitung<br/>"));"tram" == b.railway && (a += "Stra\xDFenbahnlinie<br/>");if ("slipway" == b["seamark:small_craft_facility:category"] || "slipway" == b.harbour || "slipway" == b.leisure) a += "Slipanlage<br/>";if ("harbour" == b["seamark:type"]) if (b["seamark:harbour:category"]) switch (b["seamark:harbour:category"]) {case "ferry":
            a += "F\xE4hrhafen<br/>";break;case "container":
            a += "Containerhafen<br/>";
            break;case "marina":
            "marina" != b.leisure && (a += "Jachthafen<br/>");break;case "navel_base":
            a += "Marine-Hafen<br/>";break;case "tanker":
            a += "Hafen f\xFCr \xD6ltanker<br/>";break;case "passenger":
            a += "Personenschifffahrt<br/>";break;case "bulk":
            a += "Sch\xFCttgut-Hafen<br/>";break;default:
            a += "Hafen<br/>";} else a += "Hafen<br/>";"marina" == b.leisure && (a += "Jachthafen<br/>");"wreck" == b.historic && (a += "Wrack<br/>");"animal_shelter" == b.amenity && (a += "Tierheim<br/>");"shelter" == b.animal && (a += "Tierheim<br/>");"horse_walker" == b.animal && (a += "Pferdelauftrainer<br/>");"yes" == b.animal_shelter && (a += "Tierheim<br/>");"dog" == b.animal_shelter && (a += "Tierheim<br/>");"cat" == b.animal_shelter && (a += "Tierheim<br/>");"animal_boarding" == b.amenity && (a += "Tierpension<br/>");"yes" == b.animal_boarding && (a += "Tierpension<br/>");"dog" == b.animal_boarding && (a += "Tierpension<br/>");"horse" == b.animal_boarding && (a += "Tierpension<br/>");"cat" == b.animal_boarding && (a += "Tierpension<br/>");"dog;cat" == b.animal_boarding && (a += "Tierpension<br/>");"cat;dog" == b.animal_boarding && (a += "Tierpension<br/>");if ("school" == b.animal || "sport" == b.animal || "animal_training" == b.amenity) a += "Tiertraining<br/>";"swimming" == b.animal && (a += "Badestelle f\xFCr Hunde<br/>");if ("feeding_place" == b.amenity || "animal_feeding" == b.man_made || "animal_feeding" == b.amenity) a += "F\xFCtterungsstelle<br/>";if ("wildlife_feeding" == b.amenity || "deer_feeding" == b.amenity || "game_feeding" == b.amenity) a += "Wildf\xFCtterung<br/>";if ("cratch" == b.amenity || "cratch" == b.man_made || "feeding_rack" == b.amenity) a += "Futterraufe<br/>";
    "manger" == b.amenity && (a += "Krippe<br/>");"birdhouse" == b.man_made && (a += "Vogelhaus<br/>");"stork" == b.birds_nest && (a += "Storchennest<br/>");"nest_box" == b.amenity && (a += "Nistkasten<br/>");"wellness" == b.animal && (a += "Hundesalon<br/>");"cemetery" == b.animal && (a += "Kleintierfriedhof<br/>");if ("stable" == b.building || "stable" == b["building:use"]) a += "Pferdestall<br/>";"cowshed" == b.building && (a += "Kuhstall<br/>");"sty" == b.building && (a += "Schweinestall<br/>");"barn" == b.building && (a += "Scheune / landwirtsch. Lagerhalle<br/>");
    "farm_auxiliary" == b.building && (a += "landwirtschaftl. Nebengeb\xE4ude<br/>");if (b["river:waterway_distance"] || "milestone" == b.waterway) a += "Flusskilometer<br/>";"milestone" == b.highway && (a += "Strassenkilometer<br/>");"market" == b["xmas:feature"] && (a += "Weihnachtsmarkt<br/>");"tree" == b["xmas:feature"] && (a += "Weihnachtsbaumverkauf<br/>");"event" == b["xmas:feature"] && (a += "Weihnachtsevent<br/>");"pyramid" == b["xmas:feature"] && (a += "Weihnachtspyramide<br/>");return '<div class="c4g_popup_header_featuretype">' + a + "<br/> </div>";
}
var fnContent = function fnContent(b) {
    var a;a = "" + fnContentGeneralInformations(b);a += fnContentHealthcare(b);a += fnContentAerodrome(b);a += fnContentCuisine(b);a += fnContentShipping(b);a += fnContentHydrants(b);a += fnContentSports(b);a += fnContentStreetsTraffic(b);a += fnContentInformationCity(b);a += fnContentEmergency(b);a += fnContentStorage(b);a += fnContentAmenity(b);a += fnContentTourism(b);a += fnContentRoute(b);a += fnContentPetrol(b);a += fnContentBarriers(b);a += fnContentLanduse(b);a += fnContentNatural(b);a += fnKlosterAdditional(b);a += fnSicherheitAdditional(b);a += fnAdditionalBuildingInfos(b);a += fnKraftwerkInfo(b);a += fnMessstation(b);a += fnWertstoffinfo(b);(a += fnContentProtectedArea(b)) && (a = "<br/>" + a);return '<div class="c4g_popup_content">' + a + "</div>";
},
    fnContentAerodrome = function fnContentAerodrome(b) {
    var a = "";b.aerodrome && ("international" == b.aerodrome && (a += "Flughafentype: internationaler Flugplatz<br/>"), "regional" == b.aerodrome && (a += "Flughafentype: regionaler Flugplatz<br/>"), "gliding" == b.aerodrome && (a += "Flughafentype: Segelflugplatz<br/>"), "private" == b.aerodrome && (a += "Flughafentype: Privatflugplatz<br/>"));b.iata && (a += "IATA-Code: " + b.iata + "<br/>");b.icao && (a += "ICAO-Code: " + b.icao + "<br/>");return a;
},
    fnContentNatural = function fnContentNatural(b) {
    var a = "";if (b.forest || b.wood) {
        if ("broadleaved" == b.leaf_type || "deciduous" == b.wood) a += "Laubwald<br/>";if ("needleleaved" == b.leaf_type || "coniferous" == b.wood) a += "Nadelwald<br/>";if ("mixed" == b.leaf_type || "mixed" == b.wood) a += "Mischwald<br/>";"leafless" == b.leaf_type && (a += "Blattlose Vegetation<br/>");"evergreen" == b.wood && (a += "immergr\xFCn<br/>");
        "palm" == b.wood && (a += "Palmen<br/>");"nipa_palm" == b.wood && (a += "Nipapalmen<br/>");"eucalypt" == b.wood && (a += "Eukalypten<br/>");if ("filao" == b.wood || "casuarina" == b.wood) a += "Kasuarinengew\xE4chse<br/>";
    }if ("tree" == b.natural && (!b["genus:de"] && !b["species:de"] && b.leaf_type && (a = "broadleaved" == b.leaf_type || "deciduous" == b.leaf_type || "broadleafed" == b.leaf_type ? a + "Laubbaum<br/>" : a + "Nadelbaum<br/>"), b.genus && (a += b.genus + "<br/>"), b["genus:de"] && (a += b["genus:de"] + "<br/>"), b.species && (a += b.species + "<br/>"), b["species:de"] && (a += b["species:de"] + "<br/>"), "landmark" == b.denotation && (a += "durch Gr\xF6\xDFe und herausragender Position sich deutlich aus seinem Umfeld hervorhebender Baum.<br/>"), "natural_monument" == b.denotation || "yes" == b.monument)) a += "alter, unter besonderem Schutz stehender Baum.<br/>";"manger" == b["feeding:type"] && (a += "Futterbeh\xE4lter: Futterraufe<br/>");"automated" == b["feeding:type"] && (a += "Automat<br/>");if (b["feeding:for"]) switch (b["feeding:for"]) {case "sheep":
            a += "Tier: Schaaf<br/>";break;case "horse":
            a += "Tier: Pferd<br/>";break;case "cow":
            a += "Tier: Kuh<br/>";break;case "rabbit":
            a += "Tier: Kaninchen<br/>";break;case "bunny":
            a += "Tier: Hase<br/>";break;case "cat":
            a += "Tier: Katze </br>";break;case "swan":
            a += "Tier: Schwan </br>";break;case "guinea pig":
            a += "Tier: Meerschweinchen </br>";break;case "donkey":
            a += "Tier: Esel </br>";break;case "squirrel":
            a += "Tier: Eichh\xF6rnchen </br>";break;case "pig":
            a += "Tier: Schwein </br>";break;case "deer":
            a += "Tier: Reh </br>";break;case "guinea pig":
            a += "Tier: Meerschweinchen </br>";
            break;case "monkey":
            a += "Tier: Affe </br>";break;case "camel":
            a += "Tier: Kamel </br>";break;case "goat":
            a += "Tier: Ziege </br>";break;case "hamster":
            a += "Tier: Hamster </br>";break;case "alpaca":
            a += "Tier: Alpaka </br>";break;default:
            a += "Tiere: nicht bekannt<br/>";}if (b["feeding:fodder"]) switch (b["feeding:fodder"]) {case "hay":
            a += "F\xFCttern mit: Heu</br>";break;case "grain":
            a += "F\xFCttern mit: Getreide</br>";break;case "corn":
            a += "F\xFCttern mit: Korn</*br>";break;default:
            a += "F\xFCttern mit: nicht bekannt</br>";}"volcano" == b.natural && "active" == b.status && (a += "Aktiver Vulkan<br/>");"volcano" == b.natural && "dormant" == b.status && (a += "Ruhender Vulkan<br/>");"volcano" == b.natural && "extinct" == b.status && (a += "Erloschener Vulkan<br/>");"volcano" == b.natural && "stratovolcano" == b.type && (a += "Vulkantyp:Schichtvulkan<br/>");"volcano" == b.natural && "shield" == b.type && (a += "Vulkantyp:Schildvulkan<br/>");"volcano" == b.natural && "scoria" == b.type && (a += "Vulkantyp:Schlacken- und Aschenkegel<br/>");return a;
},
    fnContentProtectedArea = function fnContentProtectedArea(b) {
    var a = "",
        c = "";"protected_area" == b.boundary && (b.protect_class && (c = b.protect_class), b.protect_id && (c = b.protect_id), "1" == c && (a = "Beschreibung: Strenges Naturreservat, Wildnisgebiet<br/>"), "2" == c && (a = "Beschreibung: Nationalpark<br/>"), "3" == c && (a = "Beschreibung: Naturmonument<br/>"), "4" == c && (a = "Beschreibung: Biotop/Artenschutzgebiet mit Management<br/>"), "5" == c && (a = "Beschreibung: Gesch\xFCtzte Landschaft/Gesch\xFCtztes marines Gebiet<br/>"), "6" == c && (a = "Beschreibung: Ressourcenschutzgebiet mit Management<br/>"), "7" == c && (a = "Beschreibung: Lokal gesch\xFCtzte Bereiche<br/>"), "97" == c && (a = "Beschreibung: Gesch\xFCtzt oder ausgezeichnet durch Vereinbarungen auf kontinentaler Ebene<br/>"), "98" == c && (a = "Beschreibung: Gesch\xFCtzt oder ausgezeichnet durch zwischenstaatliche- oder internationale Vereinbarungen<br/>"), "99" == c && (a = "andere <br/>"), "21" == c && (a = "Beschreibung: Gemeindebefinden (heilige Orte, assoziatice Orte)<br/>"), "22" == c && (a = "Beschreibung: Kulturelle Werte (Kulturg\xFCter, historisches Erbe, Denkmalschutz)<br/>"), "23" == c && (a = "Beschreibung: Schutz zu Gundsten der Wirtschaft<br/>"), "24" == c && (a = "Beschreibung: Politische Schutzgebiete<br/>"), "25" == c && (a = "Beschreibung: Milit\xE4rische Schutzgebiete<br/>"), "26" == c && (a = "Beschreibung: Historische Schutzgebiete<br/>"), "29" == c && (a = "Beschreibung: Weitere gesellschaftliche Schutzgebiete<br/>"), "11" == c && (a = "Beschreibung: Bodenschutz (Vorgabe zum Fruchtbarkeitserhalt und Erosionsschutz)<br/>"), "12" == c && (a = "Beschreibung: Wasserschutzgebiet (Trinkwasserschutzgebiet, Heilquellenschutzgebiet,..)<br/>"), "13" == c && (a = "Beschreibung: Klima und Luft (Kaltluftenstehung/Frischluftversorgung, Immissionsschutz,..)<br/>"), "14" == c && (a = "Beschreibung: Artenschutzgebiet (Angelverbot, Fischereischutzzone, Jagdschutzgebiet, Vogelschutzgebiet,..)<br/>"), "15" == c && (a = "Beschreibung: \"Standortausstattung\": Retentionsraum (gesetzlich gesch\xFCtztes \xDCberschwemmungsgebiet) <br/>"), "16" == c && (a = "Beschreibung: Dauerhafte Gefahrenbereiche (Lebensschutz, Bodenbewegungsgebiet,..)<br/>"), "19" == c && (a = "Beschreibung: Weitere nationale Gebiete<br/>"));
    return a;
},
    fnContentLanduse = function fnContentLanduse(b) {
    var a = "";"quarry" == b.landuse && b.resource && (a += "Resource: " + b.resource + "<br/>");"open_stable" == b["animal_keeping:type"] && (a += "Offenstall<br/>");"field_shelter" == b["animal_keeping:type"] && (a += "Weide mit Unterstand<br/>");"paddock" == b["animal_keeping:type"] && (a += "Paddock<br/>");b.animal_keeping && (a += "Tiere: Perde<br/>");return a;
},
    fnMessstation = function fnMessstation(b) {
    var a = "";"yes" == b["monitoring:water_level"] && (a += "Pegelstand<br/>");"yes" == b["monitoring:seismic_activity"] && (a += "seismische Aktivit\xE4ten<br/>");"yes" == b["monitoring:tide_gauge"] && (a += "Tidestand<br/>");"yes" == b["monitoring:weather"] && (a += "Wetterdaten<br/>");"yes" == b["monitoring:air_quality"] && (a += "Luftqualit\xE4t<br/>");return a;
},
    fnContentRoute = function fnContentRoute(b) {
    var a = "";b.route && ("yes" == b.roundtrip && (a += "Rundweg<br/>"), b.length && (a += "L\xE4nge/Distanz: " + b.length + "<br/>"), b.distance && (a += "L\xE4nge/Distanz: " + b.distance + "<br/>"), b.symbol && (a += "Symbol: " + b.symbol + "<br/>"));return a;
},
    fnContentPetrol = function fnContentPetrol(b) {
    var a = "";"fuel" == b.amenity && ("yes" == b["fuel:biodiesel"] && (a += "Biodiesel<br/>"), "yes" == b["fuel:e85"] && (a += "Ethanol<br/>"), "yes" == b["fuel:e10"] && (a += "E10<br/>"), "yes" == b["fuel:lpg"] && (a += "Autogas<br/>"), "yes" == b["fuel:cng"] && (a += "Erdgas<br/>"), "diesel" == b.fuel && (a += "Diesel<br/>"), "lpg" == b.fuel && (a += "Autogas<br/>"), "yes" == b["fuel:octane_95"] && (a += "Super Bleifrei<br/>"), "yes" == b["fuel:octane_98"] && (a += "Super Plus<br/>"), "yes" == b["fuel:octane_100"] && (a += "V-Power Racing<br/>"), "yes" == b["fuel:octane_102"] && (a += "Ultimate<br/>"), "yes" == b["fuel:diesel"] && (a += "Diesel<br/>"), "yes" == b["fuel:electricity"] && (a += "Ladestation / Stromtankstelle<br/>"));return a;
},
    fnContentHistoric = function fnContentHistoric(b) {
    var a = "";if ("archaeological_site" == b.historic && b.site_type) switch (b.site_type) {case "megalith":
            a += "Megalith<br/>";break;case "bigstone":
            a += "Findling<br/>";break;case "tumulus":
            a += "H\xFCgelgrab<br/>";break;case "fortification":
            a += "historischer Graben / Wall<br/>";break;default:
            a += "unbekannt<br/>";}return a;
},
    fnContentBarriers = function fnContentBarriers(b, a) {
    var c = "";if ("wall" == b.barrier || "bollard" == b.barrier) b.material && (c += "Material: " + translate(b.material) + "<br/>");return c;
},
    fnContentTourism = function fnContentTourism(b) {
    var a = "";if ("camp_site" == b.tourism) {
        "yes" == b.dog && (a += "Hunde erlaubt<br/>");"no" == b.dog && (a += "Hunde nicht erlaubt<br/>");b.stars && (a += b.stars + "Sterne<br/>");b.caravans && (a += "Wohnmobilstellpl\xE4tze<br/>");if ("yes" == b.openfire || "yes" == b.fireplace) a += "Feuerstellen vorhanden<br/>";"yes" == b.washing_machine && (a += "Waschmaschinen<br/>");"yes" == b.dryer && (a += "Trockner<br/>");"yes" == b.group_only && (a += "Nutzung nur durch Gruppen<br/>");"reception" == b.camp_site && (a += "Reception vorhanden<br/>");
    }"information" == b.tourism && "map" == b.information && ("topo" == b.map_type && (a += "Topografische Karte</br>"), "street" == b.map_type && (a += "Stra\xDFenkarte</br>"), "scheme" == b.map_type && (a += "Schematische Karte</br>"), "toposcope" == b.map_type && (a += "Schematische Karte</br>"));"information" == b.tourism && "map" == b.information && ("site" == b.map_size && (a += "Karte einer Anlage</br>"), "city" == b.map_size && (a += "Stadtplan</br>"), "region" == b.map_size && (a += "Karte der Region</br>"));"geology" == b.board_type && (a += "Geologische Informationen<br/>");"history" == b.board_type && (a += "Historische Informationen<br/>");"nature" == b.board_type && (a += "Informationen \xFCber Natur<br/>");"notice" == b.board_type && (a += "Allgemeine Information<br/>");"plants" == b.board_type && (a += "Informationen \xFCber Pflanzen<br/>");"wildlife" == b.board_type && (a += "Informationen \xFCber Wild<br/>");return a;
},
    fnContentAmenity = function fnContentAmenity(b) {
    var a = "";"boat_sharing" == b.amenity && (a += b.boattype + "<br/>");"embassy" == b.amenity && (a += b.country + "<br/>");if (b.vending) switch (b.vending) {case "admission_tickets":
            a += "Tickets<br/>";break;case "animal_feed":
            a += "Tierfutter<br/>";break;case "books":
            a += "B\xFCcher<br/>";break;case "candles":
            a += "Kerzen<br/>";break;case "cigarettes":
            a += "Zigaretten<br/>";break;case "condoms":
            a += "Kondome<br/>";break;case "drinks":
            a += "Getr\xE4nke<br/>";break;case "first_aid":
            a += "Erste Hilfe Artikel<br/>";break;
        case "fishing_tackle":
            a += "Angelequipment<br/>";break;case "flowers":
            a += "Blumen<br/>";break;case "ice_cream":
            a += "Eis<br/>";break;case "laundry_detergent":
            a += "Waschmittel<br/>";break;case "newspapers":
            a += "Zeitung<br/>";break;case "SIM_cards":
            a += "SIM-Karten<br/>";break;case "sweets":
            a += "S\xFC\xDFigkeiten<br/>";break;case "parcel_pickup":
            a += "Paketstation<br/>";break;case "ice_cubes":
            a += "Eisw\xFCrfel<br/>";break;case "public_transport_tickets":
            a += "Tickets f\xFCr \xF6ffentliche Verkehrsmittel<br/>";
            break;case "parking_ticket":
            a += "Parkticket<br/>";break;case "sex_toys":
            a += "Sexspielzeug<br/>";break;case "stamps":
            a += "Briefmarken<br/>";break;case "toll":
            a += "Mauttickets<br/>";break;case "umbrellas":
            a += "Regenschirme<br/>";break;default:
            a += "Inhalt unbekannt<br/>";}"post_box" == b.amenity && (b.collection_times && (a += "Leerungszeiten: " + b.collection_times + "<br/>"), "yes" == b.drive_through && (a += "Vom Auto aus erreichbar. <br/>"));return a;
},
    fnContentStorage = function fnContentStorage(b) {
    var a = "";if ("storage_tank" == b.man_made) {
        if (b.content) {
            var c = b.content;switch (c) {case "fuel":
                    c = "Diesel";break;case "oil":
                    c = "\xD6l";break;case "gas":
                    c = "Gas";break;case "slurry":
                    c = "G\xFClle";break;case "cement":
                    c = "Zement";break;case "water":
                    c = "Wasser";break;case "manure":
                    c = "D\xFCnger";break;case "silage":
                    c = "Silage";}a += "Inhalt: " + c + "<br/>";
        }if (b.contents) {
            c = b.contents;switch (c) {case "fuel":
                    c = "Diesel";break;case "oil":
                    c = "\xD6l";break;case "gas":
                    c = "Gas";break;case "slurry":
                    c = "G\xFClle";break;case "cement":
                    c = "Zement";break;case "water":
                    c = "Wasser";break;
                case "manure":
                    c = "D\xFCnger";break;case "silage":
                    c = "Silage";}a += "Inhalt: " + c + "<br/>";
        }
    }b.storage && ("gas" == b.storage && (a += "Inhalt: Gas<br/>"), "oil" == b.storage && (a += "Inhalt: \xD6l<br/>"));return a;
},
    fnContentInformationCity = function fnContentInformationCity(b) {
    var a = "";b["name:de"] && (a += "deutscher Name: " + b["name:de"] + "<br/>");if (1E4 <= b.population) if (b.population = "" + b.population, 3 < b.population.length) {
        var c = b.population.length % 3,
            d = 0 < c ? b.population.substring(0, c) : "";for (i = 0; i < Math.floor(b.population.length / 3); i++) {
            d = 0 == c && 0 == i ? d + b.population.substring(c + 3 * i, c + 3 * i + 3) : d + ("." + b.population.substring(c + 3 * i, c + 3 * i + 3));
        }a += "Einwohnerzahl: " + d + "<br/>";
    } else a += "Einwohnerzahl " + b.population + "<br/>";1E4 >= b.population && (a += "Einwohnerzahl: " + b.population + "<br/>");return a;
},
    fnContentEmergency = function fnContentEmergency(b) {
    var a = "";b.lifeboat && ("inshore" == b.lifeboat ? a += "Einsatzgebiet: Inshore (Binnen)<br/>" : "offshore" == b.lifeboat && (a += "Einsatzgebiet: Offshore (Buten)<br/>"));b["lifeboat:class"] && (a += "Bootstyp: " + b["lifeboat:class"] + "<br/>");if (b["siren:type"]) {
        var c = b["siren:type"];switch (c) {case "mechanical":
                c = "mechanisch";break;case "electronic":
                c = "elektronisch";break;case "pneumatic":
                c = "pneumatisch";break;case "electromechanic":
                c = "elektromechanisch";}a += "Typ: " + c + "<br/>";
    }if (b["siren:purpose"]) {
        c = b["siren:purpose"];switch (c) {case "air_raid":
                c = "Luftschutz";break;case "tornado":
                c = "Tornado";break;case "storm":
                c = "Sturm";break;case "civil_defense":
                c = "Bev\xF6lkerungsschutz";break;case "fire":
                c = "Feuer";}a += "Nutzung: " + c + "<br/>";
    }b["siren:model"] && (a += "Model: " + b["siren:model"] + "<br/>");b["siren:range"] && (a += "H\xF6rweite: " + b["siren:range"] + "<br/>");return a;
},
    fnContentCuisine = function fnContentCuisine(b) {
    var a = "";if (b.cuisine) {
        var c = "",
            a = ("supermarket" == b.shop || "convenience" == b.shop || "deli" == b.shop || "organic" == b.shop) && "restaurant" != b.amenity ? a + "Spezialit\xE4ten: " : a + "K\xFCche: ";"arabic" == b.cuisine && (c += "arabisch<br/>");"italian" == b.cuisine && (c += " italienisch<br/>");"international" == b.cuisine && (c += " international<br/>");"regional" == b.cuisine && (c += " regional<br/>");"chinese" == b.cuisine && (c += " chinesisch<br/>");"greek" == b.cuisine && (c += " griechisch<br/>");"african" == b.cuisine && (c += " afrikanisch<br/>");"german" == b.cuisine && (c += " deutsch<br/>");"mexican" == b.cuisine && (c += " mexikanisch<br/>");"french" == b.cuisine && (c += " franz\xF6sisch<br/>");"indian" == b.cuisine && (c += " indisch<br/>");"iranian" == b.cuisine && (c += " iranisch<br/>");"lebanese" == b.cuisine && (c += " libanesisch<br/>");"thai" == b.cuisine && (c += " thail\xE4ndisch<br/>");"balkan" == b.cuisine && (c += " balkan<br/>");"turkish" == b.cuisine && (c += " t\xFCrkisch<br/>");"bavarian" == b.cuisine && (c += " bayrisch<br/>");"czech" == b.cuisine && (c += " tschechisch<br/>");"portuguese" == b.cuisine && (c += " portugiesisch<br/>");"spanish" == b.cuisine && (c += " spanisch<br/>");"japanese" == b.cuisine && (c += " japanisch<br/>");"fish" == b.cuisine && (c += " Fisch<br/>");"brazilian" == b.cuisine && (c += " brasilianisch<br/>");"asian" == b.cuisine && (c += " asiatisch<br/>");"mediterranean" == b.cuisine && (c += " mediterran<br/>");"seafood" == b.cuisine && (c += " Meeresfr\xFCchte<br/>");"ice_cream" == b.cuisine && (c += " Eiscrem<br/>");"burger" == b.cuisine && (c += " Fast Food<br/>");"frozen_yogurt" == b.cuisine && (c += " Frozen Yogurt<br/>");"" == c && (c = b.cuisine + "<br/>");a += c;
    }return a;
},
    fnContentShipping = function fnContentShipping(b) {
    var a = "";b.harbour = "yes";"yes" == b["access:tide"] && (a += "Zufahrtsbeschr\xE4nkung durch Tide</br>");"yes" == b["access:swell"] && (a += "Zufahrtsbeschr\xE4nkung durch Schwell</br>");"yes" == b["access:ice"] && (a += "Zufahrtsbeschr\xE4nkung durch Eis</br>");b.vhf_channel && (a += "UKW-Kanal: " + b.vhf_channel + "</br>");b.mmsi && (a += "MMSI-Nummer: " + b.mmsi + "</br>");b["harbour:information"] && (a += "Information :" + b["harbour:information"] + "</br>");"yes" == b.motorboat && (a += "Fahren mit Motor erlaubt</br>");"no" == b.motorboat && (a += "Fahren mit Motor nicht erlaubt</br>");b.CEMT && (a += "CEMT: " + b.CEMT + "</br>");"yes" == b.intermittent && (a += "Fluss zeitweise ausgetrocknet</br>");"yes" == b.tidal && (a += "Gezeiten beeinflussen die Str\xF6mung</br>");b.draft && (a += "Fahrwassertiefe: " + b.draft + " m</br>");if ("slipway" == b.leisure || "slipway" == b.harbour) "hand" == b.operating && (a += "Funktionsweise: Handbetrieb, Slipwagen<br/>"), "car" == b.operating && (a += "Funktionsweise: mit Auto, Bootsanh\xE4nger<br/>"), "cable_winch" == b.operating && (a += "Funktionsweise: Seilwinde<br/>"), "travellift" == b.operating && (a += "Funktionsweise: Travellift<br/>"), "crane" == b.man_made && (a += "mit Kran<br/>", b["crane:maxload"] && (a += "Maximale Last: " + b["crane:maxload"] + "<br/>"), b["ship:maxdraft"] && (a += "Maximaler Tiefgang: " + b["ship:maxdraft"] + "<br/>"), b["ship:maxlength"] && (a += "Maximale Bootsl\xE4nge: " + b["ship:maxlength"] + "<br/>")), "yes" == b.vehicle && (a += "Mit Fahrzeug erreichbar<br/>");a += fnWreckInfo(b);if ("ferry" == b.route || "ferry_terminal" == b.amenity || "yes" == b.ferry) {
        var c = b.duration;"" != c && "undefined" != c && null != c && (a += "Fahrtzeit in Std. : " + c + "<br/>");"yes" == b.motorcar && (a += "Autos erlaubt <br/>");"no" == b.motorcar && (a += "Autos nicht erlaubt <br/>");"no" == b.motor_vehicle && (a += "Fahrzeuge nicht erlaubt <br/>");"yes" == b.motor_vehicle && (a += "Fahrzeuge erlaubt <br/>");"yes" == b.vehicle && (a += "Fahrzeuge erlaubt <br/>");"no" == b.vehicle && (a += "Keine Fahrzeuge<br/>");"no" == b.bicycle && (a += "Keine Fahrr\xE4der<br/>");"no" == b.bicycle && (a += "Fahrr\xE4der erlaubt<br/>");"yes" == b.hgv && (a += "LKW erlaubt <br/>");"no" == b.hgv && (a += "LKW nicht erlaubt <br/>");"yes" == b.foot && (a += "Fussg\xE4nger erlaubt <br/>");"no" == b.foot && (a += "Fussg\xE4nger nicht erlaubt <br/>");"yes" == b.bicycle && (a += "Fahrradfahrer erlaubt <br/>");"no" == b.bicycle && (a += "Fahrradfahrer nicht erlaubt <br/>");"yes" == b["ferry:cable"] && (a += "Seilf\xE4hre<br/>");
    }if (b["seamark:light:1:colour"]) {
        c = b["seamark:light:1:colour"];switch (c) {case "white":
                c = "Wei\xDF";break;case "red":
                c = "Rot";break;case "green":
                c = "Gr\xFCn";break;case "blue":
                c = "Blau";break;case "yellow":
                c = "Gelb";break;case "amber":
                c = "Bernsteinfarben";}a += "Farbe des Lichts: " + c + "<br/>";
    }"lighthouse" == b.man_made && (b["seamark:light:1:character"] && (a += "Rhytmus des Lichtes: " + b["seamark:light:1:character"] + "<br/>"), b["seamark:light:1:period"] && (a += "Periode: " + b["seamark:light:1:period"] + "<br/>"), b["seamark:light:1:height"] && (a += "H\xF6he: " + b["seamark:light:1:height"] + " m<br/>"), b["seamark:light:1:range"] && (a += "Reichweite: " + b["seamark:light:1:range"] + " sm<br/>"));if (b["seamark:light:colour"]) {
        c = b["seamark:light:colour"];switch (c) {case "white":
                c = "Wei\xDF";break;case "red":
                c = "Rot";break;case "green":
                c = "Gr\xFCn";break;case "blue":
                c = "Blau";break;case "yellow":
                c = "Gelb";break;case "amber":
                c = "Bernsteinfarben";}a += "Farbe des Lichts: " + c + "<br/>";
    }"lighthouse" == b.man_made && (b["seamark:light:character"] && (a += "Rhytmus des Lichtes: " + b["seamark:light:character"] + "<br/>"), b["seamark:light:height"] && (a += "H\xF6he: " + b["seamark:light:height"] + " m<br/>"), b["seamark:light:range"] && (a += "Reichweite: " + b["seamark:light:range"] + " sm<br/>"), b["seamark:light:period"] && (a += "Periode: " + b["seamark:light:period"] + "<br/>"));return a;
},
    fnContentHydrants = function fnContentHydrants(b) {
    var a = "";if ("fire_hydrant" == b.emergency) {
        var c = b["fire_hydrant:count"];"undefined" != c && null != c && "" != c && (a += "Anzahl: " + c + "<br/>");c = b["fire_hydrant:diameter"];
        "undefined" != c && null != c && "" != c && (a += "Rohrdurchmesser: " + c + " mm<br/>");c = b["fire_hydrant:pressure"];"undefined" != c && null != c && "" != c && (a = "suction" == c ? a + "Druck in bar / Saugleitung: Saugleitung<br/>" : a + ("Druck in bar / Saugleitung: " + c + "<br/>"));c = b["fire_hydrant:position"];"undefined" != c && null != c && "" != c && ("lane" == c ? a += "Position: Fahrbahn<br/>" : "parking_lot" == c ? a += "Position: Parkbucht<br/>" : "sidewalk" == c ? a += "Position: B\xFCrgersteig<br/>" : "green" == c && (a += "Position: Wiese<br/>"));c = b.water_volume;
        "undefined" != c && null != c && "" != c && (a += "Volumen: " + c + "<br/>");c = b["fire_hydrant:awwa_class"];"undefined" != c && null != c && "" != c ? a += "AWWA Klasse: " + c + "<br/>" : (c = b.flow_rate, "undefined" != c && null != c && "" != c && (a += "Durchfluss: " + c + "<br/>"));c = b.water_source;"undefined" != c && null != c && "" != c && "main" != c && (a += "Wasserquelle: " + c + "<br/>");c = b["couplings:type"];"undefined" != c && null != c && "" != c && (a += "Kopplungstyp: " + c + "<br/>");c = b["couplings:diameter"];"undefined" != c && null != c && "" != c && (a += "Kopplungsdurchmesser: " + c + "<br/>");c = b["pillar:type"];"dry_barrel" === c && (a += "Typ \xDCberflurhydrant: " + c + "<br/>");"fire_hydrant" === b["disused:emergency"] && (a += "Aktuell unbrauchbar.");"" == a && (a = "Keine Details vorhanden.");
    }return a;
},
    fnContentStreetsTraffic = function fnContentStreetsTraffic(b) {
    var a = "";"yes" == b["red_turn:right"] && (a += "Ampel mit Gr\xFCnpfeil<br/>");"no" == b["red_turn:right"] && (a += "Ampel ohne Gr\xFCnpfeil<br/>");b.bridge && (b.height && (a += "H\xF6he \xFCber dem Grund: " + b.height + " m<br/>"), b.length && (a += "L\xE4nge der Br\xFCcke: " + b.length + " m<br/>"), b.bridge_ref && (a += "Bauwerksnummer: " + b.bridge_ref + "<br/>"), b.start_date && (a += "Baujahr: " + b.start_date + "</br>;"), b.maxweight && (a += "Tragf\xE4higkeit: " + b.maxweight + " t</br>"));b.highway && "yes" == b.toll && (a += "Mautpflichtige Stra\xDFe<br/>");"yes" == b["toll:hgv"] && (a += "Mautpflichtige Stra\xDFe f\xFCr LKWs<br/>");if (b.surface) {
        var c = b.surface,
            a = a + "Oberfl\xE4che: ";switch (c) {case "grass":
                a += "Gras<br/>";break;case "paved":
                a += "versiegelt<br/>";break;case "asphalt":
                a += "Asphalt<br/>";
                break;case "cobblestone":
                a += "Naturstein unbehauen<br/>";break;case "sett":
                a += "behauenes Steinpflaster<br/>";break;case "concrete":
                a += "Beton<br/>";break;case "unpaved":
                a += "ohne Stra\xDFenbelag<br/>";break;case "paving_stones":
                a += "Pflastersteine<br/>";break;case "compacted":
                a += "verdichtete Deckschicht aus Natursteinmaterial<br/>";break;case "dirt":
                a += "unbefestigt<br/>";break;case "fine_gravel":
                a += "Splitt/Kies<br/>";break;case "grass_paver":
                a += "Rasengittersteine<br/>";break;case "gravel":
                a += "Schotter<br/>";
                break;case "earth":
                a += "naturbelassene Oberfl\xE4che<br/>";break;case "ground":
                a += "naturbelassene Oberfl\xE4che<br/>";break;case "metal":
                a += "Metall<br/>";break;case "mud":
                a += "Matsch, Morast<br/>";break;case "sand":
                a += "Sand<br/>";break;case "wood":
                a += "Holz<br/>";break;case "tartan":
                a += "Tartan- oder Kunststoffbelag<br/>";break;case "artificial_turf":
                a += "Kunstrasen<br/>";break;case "clay":
                a += "Ascheplatz<br/>";break;default:
                a += "unbekannt<br/>";}
    }"grade1" == b.tracktype && (a += "Wegbeschaffenheit: Befestigter Weg (Asphalt, Beton oder Pflastersteine)<br/>");
    "grade2" == b.tracktype && (a += "Wegbeschaffenheit: Befestigter Weg (Schotter oder andere verdichtete Materialien)<br/>");"grade3" == b.tracktype && (a += "Wegbeschaffenheit: Befestigter oder ausgebesserter Weg, der harten und weichen Untergrund enth\xE4lt (z. B. Feinschotter-, Sand- oder Erdweg)<br/>");"grade4" == b.tracktype && (a += "Wegbeschaffenheit: Unbefestigter Weg, haupts\xE4chlich weiche Materialien, Pflanzenwuchs entlang der Spurmitte (z. B. Gras-, Sand- oder Erdweg)<br/>");"grade5" == b.tracktype && (a += "Wegbeschaffenheit: Unbefestigter Weg, Oberfl\xE4che besteht aus Sand, Erde etc., oft nur Abdruck in Gras, teilweise schwer von umgebendem Gel\xE4nde unterscheidbar<br/>");"yes" == b.motorcycle && (a += "<br/>mit dem Auto befahrbar.<br/>");"no" == b.motorcycle && (a += "<br/>keine motorisierten Fahrzeuge zugelassen.<br/>");"excellent" == b.trail_visibility && (a += "Wegerkennbarkeit: Gut ausgewiesener Weg<br/>");"good" == b.trail_visibility && (a += "Wegerkennbarkeit: Wegmarkierung sichbar, aber manchmal etwas schwer zu finden<br/>");
    "intermediate" == b.trail_visibility && (a += "Wegerkennbarkeit: Weg nicht durchgegend sichbar<br/>");"bad" == b.trail_visibility && (a += "Wegerkennbarkeit: Wegspur ist kaum zu erkennen<br/>");"horrible" == b.trail_visibility && (a += "Wegerkennbarkeit: Oft kein Weg vorhanden<br/>");"no" == b.trail_visibility && (a += "Wegerkennbarkeit: Meistens keine Wegspur zu erkennen<br/>");"hiking" == b.sac_scale && (a += "Weg: Weg gut gebahnt. (Schwierigskeitstyp: 1)</br>");"mountain_hiking" == b.sac_scale && (a += "Weg: Durchgehend gut ersichtlicher und gut begehbarer Weg (Schwierigskeitstyp: 2)</br>");
    "demanding_mountain_hiking" == b.sac_scale && (a += "Weg: Heikle Stellen k\xF6nnen mit Seilen oder Ketten gesichert sein. Leitern sind m\xF6glich. Eventuell sind die H\xE4nde f\xFCrs Gleichgewicht n\xF6tig. (Schwierigskeitstyp: 3)</br>");"alphine_hiking" == b.sac_scale && (a += "Weg: Wegspur kaum vorhanden. An gewissen Stellen ben\xF6tigt man die H\xE4nde zum weiterkommen (Schwierigskeitstyp: 4)</br>");"demanding_alphine_hiking" == b.sac_scale && (a += "Weg: Oft weglos, einzelne einfache Kletterstellen bis II. (Schwierigskeitstyp: 5)</br>");
    "difficult_alpine_hiking" == b.sac_scale && (a += "Weg: Schwieriges Alpinenwandern,Kletterstellen bis II. Schwierigskeitstyp: 6</br>");b["mtb:name"] && (a += "Fahrradstrecke :" + b["mtb:name"] + "</br>");"0" == b["mtb:scale"] && (a += "Mountainbikestrecke: Keine besondere Schwierigkeiten.</br>Wegbeschaffenheit: fester und griffiger Untergrund.</br>Hindernisse: Keine Hindernisse</br>Gef\xE4lle: Leicht bis m\xE4\xDFig</br>Kurven: weit</br>Fahrtechnik: keine besonderes fahrtechnisches K\xF6nnen n\xF6tig</br>");
    "1" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der Weg enth\xE4lt flache Wurzeln und kleinere Steine. H\xE4ufig auch vereizelte Wasserrinnen und Erosionssch\xE4den</br>Wegbeschaffenheit: loserer Untergrund m\xF6glich, kleine Wurzeln und Steine</br>Hindernisse: kleine Hindernisse, Wasserrinnen, Erosionssch\xE4den</br>Gef\xE4lle: bis zu 40%</br>Kurven: eng</br>Fahrtechnik: Fahrtechnische Grundkentnisse n\xF6tig. Hindernisse k\xF6nnen \xFCberrollt werden</br>");"2" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der Weg enth\xE4lt gr\xF6\xDFere Wurzeln und Steine. H\xE4ufig auch vereizelte Wasserrinnen und Erosionssch\xE4den</br>Wegbeschaffenheit: Untergrund meist nicht verfestigt, gr\xF6\xDFere Wurzeln und Steine</br>Hindernisse:  flache Abs\xE4tze und Treppen</br>Gef\xE4lle: bis zu 70%</br>Kurven: leichte Spitzkehren</br>Fahrtechnik: Fortgeschrittene Fahrtechnik n\xF6tig.</br>");"3" == b["mtb:scale"] && (a += "Mountainbikestrecke: Auf dem Weg findet man verblockte Singletrails mit vielen gr\xF6\xDFeren Felsbrocken und/oder Wurzelpassagen</br>Wegbeschaffenheit: verblockt, viele gro\xDFe Wurzeln/Felsen - rutschiger Untergrund, loses Ger\xF6ll</br>Hindernisse:  hohe Abs\xE4tze</br>Gef\xE4lle: 70% oder mehr</br>Kurven: enge Spitzkehren</br>Fahrtechnik: Sehr gute Bike-Beherrschung n\xF6tig.</br>");
    "4" == b["mtb:scale"] && (a += "Mountainbikestrecke: Auf dem Weg sind sehr steile und stark verblockte Singletrails mit gro\xDFen Felsbrocken und/oder anspruchsvollen Wurzelpassagen, dazwischen h\xE4ufig loses Ger\xF6ll und extreme Steilrampen</br>Wegbeschaffenheit: verblockt, viele gro\xDFe Wurzeln/Felsen - rutschiger Untergrund, loses Ger\xF6ll</br>Hindernisse:  Steilrampen, kaum fahrbare Abs\xE4tze</br>Gef\xE4lle: 70% oder mehr</br>Kurven:  \xD6senartige Spitzkehren</br>Fahrtechnik: Perfekte Bike-Beherrschung mit Trial-Techniken n\xF6tig.</br>");
    "5" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der weg wird charakterisiert durch blockartiges Gel\xE4nde mit Gegenanstiegen, Ger\xF6llfeldern und Erdrutschen, \xF6senartigen Spitzkehren, mehreren hohen, direkt aufeinanderfolgenden Abs\xE4tzen und Hindernissen wie umgefallenen B\xE4umen</br>Wegbeschaffenheit: verblockt mit Gegenanstiegen / rutschiger Untergrund, loses Ger\xF6ll / der Weg ist eher ein Wandersteig</br>Hindernisse:  Steilrampen, kaum fahrbare Abs\xE4tze</br>Gef\xE4lle: 70% oder mehr</br>Kurven:  \xD6senartige Spitzkehren mit Hindernissen</br>Fahrtechnik: excellente Bike-Beherrschung spezieller Trial-Techniken n\xF6tig.</br>");
    "6" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der weg ist hochanspruchsvoll, und selbst f\xFCr Profis und Trial-Fahrer nicht passierbar</br>Wegbeschaffenheit:  Gro\xDFteils nur noch kletterbar</br>Hindernisse: Abs\xE4tze > 2 m, Leitern, Trittstufen, Kletterstellen bei denen man beide H\xE4nde braucht.</br>Gef\xE4lle: 100% oder mehr</br>Kurven: - </br>Fahrtechnik:  hier reicht auch die beste Fahrtechnik nicht mehr</br>");"10" == b.maxspeed && (a += "Vekehrsber\xFChigter Bereich. Hier gilt eine maximale Fahrgeschwindigkeit von 10 Km/h sowie die Regel rechts vor links.</br>");
    "30" == b.maxspeed && (a += "Vekehrsber\xFChigter Bereich. Hier gilt rechts vor links sowie eine maximale Geschwindigkeit von 30 Km/h</br>");"50" == b.maxspeed && (a += "Maximal erlaubte Geschwindigkeit von 50 Km/h darf nicht \xFCberschritten werden </br>");"70" == b.maxspeed && (a += "Maximal erlaubte Geschwindigkeit von 50 Km/h darf nicht \xFCberschritten werden </br>");"80" == b.maxspeed && (a += "Maximale Geschwindigkeit von 80 Km/h darf nicht \xFCberschritten werden.</br>");"100" == b.maxspeed && (a += "Maximale Geschwindigkeit von 100 Km/h darf nicht \xFCberschritten werden.</br>");
    "no" == b.overtaking && (a += "\xDCberholverbot, Fahrzeuge d\xFCrfen nicht \xFCberholen !</br>");"yes" == b.noexit && (a += "Die Stra\xDFe endet hier, es handelt sich um eine Sackgasse</br>");"yes" == b.oneway && (a += "Es handelt sich hier um eine Einbahnstra\xDFe, sie d\xFCrfen diese Stra\xDFe nur in eine Richtung befahren</br>");"designated" == b.priority_road && (a += "Es handelt sich hierbei um eine Vorfahrtsstra\xDFe, derjenige, der sich auf dieser befindet, hat gegen\xFCber anderen Fahrzeugen die Vorfahrt!</br>");
    "end" == b.priority_road && (a += "Die Vorfahrtsstra\xDFe endet hier und die Regelung wird aufgehoben</br>");"emergency_bay" == b.highway && (a += "Hier befindet sich eine Bucht die nur in Notf\xE4llen zur Benuzung zur Verf\xFCgung steht</br>");"yes" == b.traffic_calming && (a += "Verkehrsberuhigter Bereich</br>");"bump" == b.traffic_calming && (a += "Kurze Bodenwelle</br>");"chicane" == b.traffic_calming && (a += "Zu umfahrendenes Hinderniss</br>");"choker" == b.traffic_calming && (a += "Fahrbahnverengung, zu umfahrende Hindernisse m\xF6glich</br>");
    "cushion" == b.traffic_calming && (a += "Bodenwelle mit L\xFCcken aus mehreren rechteckigen Huckeln</br>");"hump" == b.traffic_calming && (a += "vergleichbare Bodenwelle mit etwar einer L\xE4nge von 2-4M</br>");"island" == b.traffic_calming && (a += "Eine Verkehrsinsel</br>");"rumble_strip" == b.traffic_calming && (a += "Holperstreifen</br>");"table" == b.traffic_calming && (a += "lange Bodenwellen mit flachen Mittelst\xFCck</br>");if ("parking" == b.amenity && ("yes" == b.fee && (a += "kostenpflichtig<br/>"), c = b["capacity:women"], "" != c && "no" != c && null != c)) {
        var d = "unbekannt";"yes" != c && (d = c);a += "Frauenparkpl\xE4tze (Anzahl: " + d + ") <br/>";
    }b.park_ride && ("bus" == b.park_ride && (a += "Busanbindung<br/>"), "tram" == b.park_ride && (a += "Bahnanbindung<br/>"), "unknown" == b.park_ride && (a += "Verkehrsmittel unbekannt<br/>"));b["railway:position"] && (a += "Streckenkilometer<br/>Position: " + b["railway:position"] + "<br/>");b.uic_ref && (a += "UIC: " + b.uic_ref + "<br/>");return a;
},
    fnContentSports = function fnContentSports(b) {
    var a = "";"9pin" == b.sport && (a += "M\xF6gliche Sportart: Kegeln<br/>");
    "10pin" == b.sport && (a += "M\xF6gliche Sportart: Bowling<br/>");"american_football" == b.sport && (a += "M\xF6gliche Sportart: American Football<br/>");"aikido" == b.sport && (a += "M\xF6gliche Sportart: Aikido<br/>");"archery" == b.sport && (a += "M\xF6gliche Sportart: Bogenschie\xDFen<br/>");"athletics" == b.sport && (a += "M\xF6gliche Sportart: Leichtathletik<br/>");"australian_football" == b.sport && (a += "M\xF6gliche Sportart: Australian Football<br/>");"base" == b.sport && (a += "M\xF6gliche Sportart: Objektspringen<br/>");
    "badminton" == b.sport && (a += "M\xF6gliche Sportart: Badminton<br/>");"baseball" == b.sport && (a += "M\xF6gliche Sportart: Baseball<br/>");"basketball" == b.sport && (a += "M\xF6gliche Sportart: Basketball<br/>");"beachvolleyball" == b.sport && (a += "M\xF6gliche Sportart: Beachvolleyball<br/>");"bmx" == b.sport && (a += "M\xF6gliche Sportart: BMX<br/>");"boules" == b.sport && (a += "M\xF6gliche Sportart: Boccia<br/>");"boule" == b.sport && (a += "M\xF6gliche Sportart: Boccia<br/>");"bowls" == b.sport && (a += "M\xF6gliche Sportart: Bowls<br/>");
    "boxing" == b.sport && (a += "M\xF6gliche Sportart: Boxen<br/>");"canadian_football" == b.sport && (a += "M\xF6gliche Sportart: Canadian Football<br/>");"canoe" == b.sport && (a += "M\xF6gliche Sportart: Paddeln<br/>");"chess" == b.sport && (a += "M\xF6gliche Sportart: Schach<br/>");"cliff_diving" == b.sport && (a += "M\xF6gliche Sportart: Klippenspringen<br/>");"climbing" == b.sport && (a += "M\xF6gliche Sportart: Klettern<br/>");"climbing_adventure" == b.sport && (a += "M\xF6gliche Sportart: Klettern<br/>");"cricket" == b.sport && (a += "M\xF6gliche Sportart: Cricket<br/>");"cricket_nets" == b.sport && (a += "M\xF6gliche Sportart: Cricket Netz<br/>");"croquet" == b.sport && (a += "M\xF6gliche Sportart: Croquet<br/>");"curling" == b.sport && (a += "M\xF6gliche Sportart: Curling<br/>");"cycling" == b.sport && (a += "M\xF6gliche Sportart: Radrennen, Radsport<br/>");"dog_racing" == b.sport && (a += "M\xF6gliche Sportart: Hunderennen<br/>");if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";"fencing" == b.sport && (a += "M\xF6gliche Sportart: Fechten<br/>");
    "equestrian" == b.sport && (a += "M\xF6gliche Sportart: Reiten<br/>");"football" == b.sport && (a += "M\xF6gliche Sportart: American Football<br/>");"free_flying" == b.sport && (a += "M\xF6gliche Sportart: Freeflying<br/>");"gaelic_games" == b.sport && (a += "M\xF6gliche Sportart: Gaelic games<br/>");"golf" == b.sport && (a += "M\xF6gliche Sportart: Golf<br/>");"gymnastics" == b.sport && (a += "M\xF6gliche Sportart: Gymnastik<br/>");"hockey" == b.sport && (a += "M\xF6gliche Sportart: Hockey<br/>");"horseshoes" == b.sport && (a += "M\xF6gliche Sportart: Hufeisenwerfen<br/>");"horse_racing" == b.sport && (a += "M\xF6gliche Sportart: Pferderennen<br/>");"ice_stock" == b.sport && (a += "M\xF6gliche Sportart: Eisstockschie\xDFen<br/>");"judo" == b.sport && (a += "M\xF6gliche Sportart: Judo<br/>");"karting" == b.sport && (a += "M\xF6gliche Sportart: Kartfahren<br/>");"kitesurfing" == b.sport && (a += "M\xF6gliche Sportart: Kitesurfing<br/>");"korfball" == b.sport && (a += "M\xF6gliche Sportart: Korfball<br/>");"motor" == b.sport && (a += "M\xF6gliche Sportart: Motorsport<br/>");
    "multi" == b.sport && (a += "M\xF6gliche Sportart: Mehrfachsport<br/>");"obstacle_course" == b.sport && (a += "M\xF6gliche Sportart: Hindernislauf<br/>");"orienteering" == b.sport && (a += "M\xF6gliche Sportart: Orientierungslauf<br/>");"paddle_tennis" == b.sport && (a += "M\xF6gliche Sportart: Paddle-Tennis<br/>");"paragliding" == b.sport && (a += "M\xF6gliche Sportart: Gleitschirmfliegen<br/>");"Pelota" == b.sport && (a += "M\xF6gliche Sportart: Pelota<br/>");"rasquet" == b.sport && (a += "M\xF6gliche Sportart: Racquetball<br/>");
    "rowing" == b.sport && (a += "M\xF6gliche Sportart: Rudern<br/>");"rugby_league" == b.sport && (a += "M\xF6gliche Sportart: Rugby League<br/>");"rugby_union" == b.sport && (a += "M\xF6gliche Sportart: Rugby Union<br/>");"running" == b.sport && (a += "M\xF6gliche Sportart: Laufsport<br/>");"scuba_diving" == b.sport && (a += "M\xF6gliche Sportart: Sporttauchen<br/>");"shooting" == b.sport && (a += "M\xF6gliche Sportart: Sportschie\xDFen<br/>");"skating" == b.sport && (a += "M\xF6gliche Sportart: Eislaufsport<br/>");"skateboard" == b.sport && (a += "M\xF6gliche Sportart: Skateboard<br/>");"skiing" == b.sport && (a += "M\xF6gliche Sportart: Skifahren<br/>");"soccer" == b.sport && (a += "M\xF6gliche Sportart: Fu\xDFball<br/>");"surfing" == b.sport && (a += "M\xF6gliche Sportart: Surfen<br/>");"swimming" == b.sport && (a += "M\xF6gliche Sportart: Schwimmen<br/>");"table_tennis" == b.sport && (a += "M\xF6gliche Sportart: Tischtennis<br/>");"taekwondo" == b.sport && (a += "M\xF6gliche Sportart: Taekwondo<br/>");"team_handball" == b.sport && (a += "M\xF6gliche Sportart: Handball<br/>");
    "tennis" == b.sport && (a += "M\xF6gliche Sportart: Tennis<br/>");"toboggan" == b.sport && (a += "M\xF6gliche Sportart: Rodeln<br/>");"volleyball" == b.sport && (a += "M\xF6gliche Sportart: Volleyball<br/>");"water_ski" == b.sport && (a += "M\xF6gliche Sportart: Wasserski<br/>");"weightlifting" == b.sport && (a += "M\xF6gliche Sportart: Gewichtheben<br/>");"wrestling" == b.sport && (a += "M\xF6gliche Sportart: Ringen<br/>");return a;
};
function fnArztInfo(b) {
    var a = "",
        c = "",
        d = b["healthcare:speciality"];"" != d && ("general" == d && (c += "Allgemeinmedizin<br/>"), "allergology" == d && (c += "Allergologie<br/>"), "anaesthetics" == d && (c += "An\xE4sthesiologie<br/>"), "biochemistry" == d && (c += "Medizinische und chemische Labordiagnostik<br/>"), "biological_haematology" == d && (c += "Biologische H\xE4matologie<br/>"), "biology" == d && (c += "Medizinische Biologie<br/>"), "cardiology" == d && (c += "Kardiologie<br/>"), "cardiac_surgery" == d && (c += "Kardiovaskularchirurgie<br/>"), "child_psychiatry" == d && (c += "Kinder- u. Jugendpsychatrie<br/>"), "dental_oral_maxillo_facial_surgery" == d && (c += "Zahn-, Mund-, Kiefer- und Gesichtschirurgie<br/>"), "dermatology" == d && (c += "Hautkrankheiten<br/>"), "dermatovenereology" == d && (c += "Haut- und Geschlechtskrankheiten<br/>"), "diagnostic_radiology" == d && (c += "Diagnostische Radiologie<br/>"), "emergency" == d && (c += "Unfall- und Notfallmedizin<br/>"), "endocrinology" == d && (c += "Endokrinologie<br/>"), "gastroenterological_surgery" == d && (c += "Gastroenterologische Chirurgie<br/>"), "gastroenterology" == d && (c += "Gastroenterologie<br/>"), "geriatrics" == d && (c += "Geriatrie<br/>"), "gynaecology" == d && (c += "Geburtshilfe und Frauenheilkunde<br/>"), "haematology" == d && (c += "Allgemeine H\xE4matologie<br/>"), "hepatology" == d && (c += "Hepatologie<br/>"), "immunology" == d && (c += "Immunologie<br/>"), "infectious_diseases" == d && (c += "Ansteckende Krankheiten<br/>"), "intensive" == d && (c += "Intensivmedizin<br/>"), "internal" == d && (c += "Allgemeine (innere) Medizin<br/>"), "maxillofacial_surgery" == d && (c += "Mund-Kiefer-Gesichtschirurgie<br/>"), "nephrology" == d && (c += "Nierenkrankheiten<br/>"), "neurology" == d && (c += "Neurologie<br/>"), "neurophysiology" == d && (c += "Klinische Neurophysiologie<br/>"), "neuropsychiatry" == d && (c += "Neuropsychiatrie(Neurologie und Psychiatrie)<br/>"), "neurosurgery" == d && (c += "Neurochirurgie<br/>"), "nuclear" == d && (c += "Nuklearmedizin<br/>"), "occupational" == d && (c += "Arbeitsmedizin <br/>"), "oncology" == d && (c += "Onkologie<br/>"), "ophthalmology" == d && (c += "Augenheilkunde<br/>"), "orthopaedics" == d && (c += "Orthop\xE4die<br/>"), "otolaryngology" == d && (c += "Hals-Nasen-Ohren-Heilkunde<br/>"), "paediatric_surgery" == d && (c += "Kinderchirurgie<br/>"), "paediatrics" == d && (c += "Kinderheilkunde<br/>"), "palliative" == d && (c += "Palliativmedizin<br/>"), "physiatry" == d && (c += "Physikalischeund Rehabilitative Medizin<br/>"), "plastic_surgery" == d && (c += "Plastische Chirurgie<br/>"), "proctology" == d && (c += "Proktologie<br/>"), "psychiatry" == d && (c += "Psychiatrie<br/>"), "pulmonology" == d && (c += "Lungen- und Bronchialheilkunde<br/>"), "radiology" == d && (c += "Radiologie<br/>"), "radiotherapy" == d && (c += "Strahlentherapie<br/>"), "rheumatology" == d && (c += "Rheumatologie<br/>"), "stomatology" == d && (c += "Stomatologie<br/>"), "surgery" == d && (c += "Chirurgie<br/>"), "surgical_oncology" == d && (c += "Krebschirurgie<br/>"), "thoracic_surgery" == d && (c += "Thoraxchirurgie<br/>"), "transplant" == d && (c += "Transplantationsmedizin<br/>"), "trauma" == d && (c += "Unfallchirurgie<br/>"), "tropical" == d && (c += "Tropenmedizin<br/>"), "urology" == d && (c += "Urologie<br/>"), "vascular_surgery" == d && (c += "Gef\xE4\xDFchirurgie<br/>"), "venereology" == d && (c += "Geschlechtskrankheiten<br/>"), "acupuncture" == d && (c += "Akupunktur<br/>"), "naturopathy" == d && (c += "Naturheilkunde<br/>"), "chiropractic" == d && (c += "Chiropraktik <br/>"), "homeopathy" == d && (c += "Hom\xF6opathie<br/>"), "osteopathy" == d && (c += "Osteopathie<br/>"));"" != b.health_specialty && ("yes" == b["health_specialty:family_medicine"] && (c += "Allgemeinmedizin<br/>"), "yes" == b["health_specialty:emergency_medicine"] && (c += "Notfallmedizin<br/>"), "yes" == b["health_specialty:anaesthesiology"] && (c += "An\xE4sthesie<br/>"), "yes" == b["health_specialty:dermatology"] && (c += "Dermatologie<br/>"), "yes" == b["health_specialty:ear_nose_throat"] && (c += "Hals, Nasen, Ohren (HNO)<br/>"), "yes" == b["health_specialty:occupational_medicine"] && (c += "Arbeitsnmedizin<br/>"), "yes" == b["health_specialty:internal_medicine"] && (c += "innere Medizin<br/>"), "yes" == b["health_specialty:neurology"] && (c += "Neurologie<br/>"), "yes" == b["health_specialty:ophthalmology"] && (c += "Augenheilkunde<br/>"), "yes" == b["health_specialty:palliative_medicine"] && (c += "Palliativmedizin<br/>"), "yes" == b["health_specialty:psychiatry"] && (c += "Psychatrie<br/>"), "yes" == b["health_specialty:gynaecology"] && (c += "Gyn\xE4kologie<br/>"), "yes" == b["health_specialty:urology"] && (c += "Urologie<br/>"), "yes" == b["health_specialty:pain_medicine"] && (c += "Schmerzmedizin<br/>"), "yes" == b["health_specialty:environmental_medicine"] && (c += "Umweltmedizin<br/>"), "yes" == b["health_specialty:intensive_care_medicin"] && (c += "Intensivmedizin<br/>"), "yes" == b["health_specialty:paediatrics"] && (c += "Kinder- u. Jugendmedizin<br/>"), "yes" == b["health_specialty:physiatry"] && (c += "Physikalische und Rehabilitative Medizin<br/>"), "yes" == b["health_specialty:radiology"] && (c += "Radiologie<br/>"), "yes" == b["health_specialty:general"] && (c += "Allgemeinmedizin<br/>"), "yes" == b["health_specialty:occupational_therapy"] && (c += "Ergotherapie<br/>"), "yes" == b["health_specialty:pulmonology"] && (c += "Pneumologie<br/>"), "yes" == b["health_specialty:acupuncture"] && (c += "Akupunktur<br/>"), "yes" == b["health_specialty:orthopaedics"] && (c += "Orthop\xE4die<br/>"), "yes" == b["health_specialty:chiropractic"] && (c += "Chiropraktik<br/>"), "yes" == b["health_specialty:sports_medicine"] && (c += "Sportmedizin<br/>"));"" != c && (a = a + "Fachgebiete: " + ('<div class="c4g_open_text">' + c + "</div>"));return a;
}
function fnKraftwerkInfo(b) {
    var a = "";if (b["generator:method"]) {
        a += "Erzeugungsart: ";switch (b["generator:method"]) {case "combustion":
                a += "Verbrennung";break;case "thermal":
                a += "thermische Nutzung (z.B. Solarthermie)";break;case "pumping":
                a += "durch Pumpen (z.B. die Nutzung von Geothermie)";break;case "photovoltaic":
                a += "Photovoltaik";break;case "gasification":
                a += "Vergasung, danach Verbrennung";break;case "anaerobic_digestion":
                a += "Erzeugung von Biogas durch Verg\xE4rung";break;case "pyrolysis":
                a += "Pyrolyse, Aufspaltung durch hohe Temperaturen";
                break;case "fission":
                a += "Kernspaltung";break;case "fusion":
                a += "Kernfusion";break;default:
                a += "unbekannt<br/>";}a += "<br/>";
    }if (b.power_source) {
        a += "Erzeugungsart: ";switch (b.power_source) {case "photovoltaic":
                a += "Photovoltaik";break;default:
                a += "unbekannt<br/>";}a += "<br/>";
    }b["generator:output:electricity"] && (a += "elekt. Energieerzeugung: " + b["generator:output:electricity"] + "<br/>");b["generator:output:heat"] && (a += "therm. Energieerzeugung: " + b["generator:output:heat"] + "<br/>");b["generator:output:cold"] && (a += "therm. Energieerzeugung: " + b["generator:output:cold"] + "<br/>");b["generator:output"] && (a += "Nennleistung: " + b["generator:output"] + "<br/>");b["generator:output:hot_air"] && (a += "Art des Transportmediums: " + b["generator:output:hot_air"] + "<br/>");b["generator:output:cold_water"] && (a += "Art des Transportmediums: " + b["generator:output:cold_water"] + "<br/>");b["generator:output:cold_air"] && (a += "Art des Transportmediums: " + b["generator:output:cold_air"] + "<br/>");b["generator:output:compressed_air"] && (a += "Art des Transportmediums: " + b["generator:output:compressed_air"] + "<br/>");b["generator:output:steam"] && (a += "Art des Transportmediums: " + b["generator:output:steam"] + "<br/>");b["generator:output:vacuum"] && (a += "Art des Transportmediums: " + b["generator:output:vacuum"] + "<br/>");b["generator:output:battery_charging"] && (a += "Art des Transportmediums: " + b["generator:output:battery_charging"] + "<br/>");"PWR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-1" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-2" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-3" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-4" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-5" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"BWR-6" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"PHWR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"GCR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"FBR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"RBMK-1000" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"RBMK-1500" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"VVER" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"CANDU" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"CPR-1000" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"EPR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"tokamak" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"stellarator" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"ICF" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"cold-fusion" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");"wind_turbine" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "Generatortyp: Horizontal-Achsen Windenergieanlage<br/>");"wind_turbine" == b["generator:method"] && "vertical_turbine" == b["generator:type"] && (a += "Generatortyp: Vertikalrotor<br/>");"francis_turbine" == b["generator:type"] && (a += "Generatortyp: Francis-Turbine<br/>");"kaplan_turbine" == b["generator:type"] && (a += "Generatortyp: Kaplan-Turbine<br/>");"pelton_turbine" == b["generator:type"] && (a += "Generatortyp: Pelton-Turbine<br/>");"stream" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "Generatortyp: Gezeitenstromgenerator mit horizontaler Achse<br/>");"stream" == b["generator:method"] && "vertical_axis" == b["generator:type"] && (a += "Generatortyp: Gezeitenstromgenerator mit vertikaler Achse<br/>");"steam_turbine" == b["generator:type"] && (a += "Generatortyp: Dampfturbine<br/>");"heat_pump" == b["generator:type"] && (a += "Generatortyp: W\xE4rmepumpe<br/>");"solar_thermal_collector" == b["generator:type"] && (a += "Generatortyp: Sonnenkollektor<br/>");"solar_photovoltaic_panel" == b["generator:type"] && (a += "Generatortyp: Photovoltaic-System<br/>");"steam_generator" == b["generator:type"] && (a += "Generatortyp: Dampfgenerator<br/>");"gas_turbine" == b["generator:type"] && (a += "Generatortyp: Gasturbine<br/>");"combined_cycle" == b["generator:type"] && (a += "Generatortyp: Dampfgenerator<br/>");"reciprocating_engine" == b["generator:type"] && (a += "Generatortyp: Verbrennungsmotor/Blockheizkraftwerk<br/>");return a;
}
function fnWertstoffinfo(b) {
    var a = "";if ("container" == b.recycling_type || "centre" == b.recycling_type || "recycling" == b.amenity) "yes" == b["recycling:glass"] && (a += "Altglascontainer</br>"), "yes" == b["recycling:shoes"] && (a += "Schuhentsorgung</br>"), "yes" == b["recycling:cooking_oil"] && (a += "Speise-\xD6l-Entsorgung</br>"), "yes" == b["recycling:paper"] && (a += "Papierentsorgung</br>"), "yes" == b["recycling:engine_oil"] && (a += "\xD6l-Entsorgung (Maschinen-, Alt-und Motor\xF6l)</br>"), "yes" == b["recycling:clothes"] && (a += "Altkleidercontainer</br>"), "yes" == b["recycling:car_batteries"] && (a += "Auto-Batterien-Entsorgung</br>"), "yes" == b["recycling:cans"] && (a += "Blechdosenentsorgung</br>"), "yes" == b["recycling:scrap_metal"] && (a += "Altmetallentsorgung</br>"), "yes" == b["recycling:plastic"] && (a += "Plastikentsorgung</br>"), "yes" == b["recycling:batterries"] && (a += "Batterieentsorgung</br>"), "yes" == b["recycling:plastic_bottles"] && (a += "Plastikflaschenentsorgung</br>"), "yes" == b["recycling:green_waste"] && (a += "Gr\xFCnabf\xE4lle</br>"), "yes" == b["recycling:hardcore"] && (a += "Bauschutt und Stra\xDFenmaterial Entsorgung</br>");return a;
}
var fnContentGeneralInformations = function fnContentGeneralInformations(b) {
    var a = "";b.width && (a += "Breite: " + b.width + " m<br/>");b.height && (a += "H\xF6he: " + b.height + " m<br/>");b.maxwidth && (a += "Maximalbreite: " + b.maxwidth + " m<br/>");b.maxheight && (a += "Maximalh\xF6he: " + b.maxheight + " m<br/>");b.maxweight && (a += "Maximalgewicht: " + b.maxweight + " t<br/>");b.maxspeed && (a += "H\xF6chstgeschwindigkeit: " + b.maxspeed + " km/h<br/>");b.min_age && (a += "Mindestalter: " + b.min_age + "<br/>");b.max_age && (a += "Maximalalter: " + b.max_age + "<br/>");"yes" == b.nudism && (a += "Freik\xF6rperkultur<br/>");"yes" == b.ruins && (a += "Ruine<br/>");b.ele && (a += "H\xF6he \xFCber NN: " + b.ele + " m<br/>");b["xmas:day_date"] && (a += "Dauer von - bis: " + b["xmas:day_date"] + "<br/>");b["rotor:diameter"] && (a += "Rotordurchmesser: " + b["rotor:diameter"] + " m<br/>");b["xmas:note"] && (a += "Hinweis: " + b["xmas:note"] + "<br/>");"port" == b["seamark:beacon_lateral:category"] && (a += "Backbord<br/>");"starboard" == b["seamark:beacon_lateral:category"] && (a += "Steuerbord<br/>");"yes" == b["service:bicycle:retail"] && (a += "Fahrradverkauf<br/>");"yes" == b["service:bicycle:repair"] && (a += "Fahrradreparatur<br/>");"yes" == b["service:bicycle:rental"] && (a += "Fahrradverleih<br/>");"yes" == b["service:bicycle:pump"] && (a += "Benutzung einer Luftpumpe m\xF6glich<br/>");"yes" == b["service:bicycle:diy"] && (a += "Benutzung von Werkzeug m\xF6glich<br/>");"yes" == b["service:bicycle:cleaning"] && (a += "Fahrr\xE4der werden gewaschen<br/>");"yes" == b["service:bicycle:second_hand"] && (a += "Verkauf von gebrauchten Fahrr\xE4dern<br/>");"yes" == b["service:bicycle:charging"] && (a += "Elektro-Fahrr\xE4der k\xF6nnen geladen werden<br/>");"yes" == b.cafe && (a += "Kleine Caf\xE9-Ecke<br/>");"yes" == b.breakfast && (a += "Besonderes Fr\xFChst\xFCcksangebot<br/>");"yes" == b.snack && (a += "Back-Snacks warm oder kalt<br/>");"yes" == b.indoor_seating && (a += "Sitzm\xF6glichkeiten im Innenbereich<br/>");"yes" == b.outdoor_seating && (a += "Sitzm\xF6glichkeiten im Au\xDFenbereich<br/>");"yes" == b.self_service && (a += "Selbstbedienungsb\xE4ckerei<br/>");"yes" == b.bakehouse && (a += "Backstube<br/>");"yes" == b.pastry_shop && (a += "Geb\xE4ck aus der Konditorei<br/>");"yes" == b.fair_trade && (a += "einige Fair-Trade-Produkte im Sortiment<br/>");"only" == b.fair_trade && (a += "fast ausschlie\xDFlich Fair-Trade-Produkte im Sortiment<br/>");"no" == b.fair_trade && (a += "keine Fair-Trade-Produkte im Sortiment<br/>");return a;
},
    fnContentHealthcare = function fnContentHealthcare(b) {
    var a = "";if ("doctors" == b.amenity || "physician" == b.office || "doctor" == b.healthcare) a += fnArztInfo(b), b.medical_area && (a += b.medical_area + "<br/>"), b.type && (a += b.type + "<br/>"), b["doctors:de"] && (a += b["doctors:de"] + "<br/>"), b["note:de"] && (a += b["note:de"] + "<br/>");"yes" == b.dispensing && (a += "Apotheke mit Rezepteinl\xF6sung<br/>");"abused" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen die Misshandlung erlitten haben<br/>");"child" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Kinder<br/>");"disabled" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen mit k\xF6rperlicher oder geistiger Behinderung<br/>");"diseased" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Erkrankte Menschen<br/>");"drug_addicted" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Drogens\xFCchtige<br/>");"homeless" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Obdachlose<br/>");"juvenile" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Jugendliche und Teenager<br/>");"mental_health" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen mit psychischen Problemen<br/>");"migrant" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen mit Migrationshintergrund<br/>");"orphan" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Waisen<br/>");"senior" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Senioren<br/>");"underprivileged" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Arme oder benachteiligte Menschen<br/>");"unemployed" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Arbeitslose<br/>");"victim" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Opfer eines Verbrechens<br/>");
    return a;
};
function fnAdditionalBuildingInfos(b) {
    var a = "";b["building:color"] && (a += "Geb\xE4udenfarbe: " + b["building:color"] + "</br>");b["building:height"] && (a += "Geb\xE4udenh\xF6he: " + b["building:height"] + " m</br>");b["building:level"] && (a += "Etage: " + b["building:level"] + "</br>");b["building:part"] && (a += "Geb\xE4udeteile: " + b["building:part"] + "</br>");b["roof:color"] && (a += "Dachfarbe: " + b["roof:colour"] + "</br>");b["roof:shape"] && (a += "Dachform: " + b["roof:shape"] + "</br>");b["roof:height"] && (a += "Dachh\xF6he: " + b["roof:height"] + " m</br>");b["roof:material"] && (a += "Dachmaterial: " + b["roof:material"] + " </br>");b["roof:orientation"] && (a += "Dachausrichtung: " + b["roof:orientation"] + " </br>");b["roof:direction"] && (a += "Dachausrichtung: " + b["roof:direction"] + " </br>");b["building:type"] && (a += "Geb\xE4udentyp: " + b["building:type"] + "</br>");return a;
}
function fnSicherheitAdditional(b) {
    var a = "";"surveillance" == b.man_made && ("indoor" == b.surveillance && (a += "Innenbereich wird \xFCberwacht"), "outdoor" == b.surveillance && (a += "Au\xDFenbereich wird \xFCberwacht"), "public" == b.surveillance && (a += "\xD6ffentliche \xDCberwachung"), "camera" == b["surveillance:type"] && (a += "\xDCberwachungstyp: Kamera"), "guard" == b["surveillance:type"] && (a += "\xDCberwachungstyp: W\xE4chter"), "ALPR" == b["surveillance:type"] && (a += "\xDCberwachungstyp: ALPR"), "town" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Ort"), "parking" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Parkplatz"), "traffic" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Verkehr"), "shop" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Shops"), "bank" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Bank"), "building" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Geb\xE4ude"));return a;
}
function fnWreckInfo(b) {
    var a = "";"wreck" == b.historic && (b["wreck:date_sunk"] && (a += "Gesunken am: " + b["wreck:date_sunk"] + "<br/>"), b["wreck:depth"] && (a += "Tiefe: " + b["wreck:depth"] + "<br/>"), b["wreck:clearance"] && (a += "Freiraum: " + b["wreck:clearance"] + "<br/>"), b["wreck:date_commissioned"] && (a += "Anerkannt seit: " + b["wreck:date_commissioned"] + "<br/>"), b["wreck:gross_tonnage"] && (a += "Gewicht: " + b["wreck:gross_tonnage"] + "<br/>"), b["wreck:length"] && (a += "L\xE4nge: " + b["wreck:length"] + "<br/>"), b["wreck:width"] && (a += "Breite: " + b["wreck:width"] + "<br/>"), b["wreck:cargo"] && (a = "timber" == b["wreck:cargo"] ? a + "Ladung: Holz<br/>" : "coal" == b["wreck:cargo"] ? a + "Ladung: Kohle<br/>" : a + ("Ladung: " + b["wreck:cargo"] + "<br/>")), "yes" == b["wreck:visible_at_low_tide"] && (a += "Sichtbar bei Niedrigwasser: Ja<br/>"), "no" == b["wreck:visible_at_low_tide"] && (a += "Sichtbar bei Niedrigwasser: Nein<br/>"), "yes" == b["wreck:visible_at_high_tide"] && (a += "Sichtbar bei Hochwasser: Ja<br/>"), "no" == b["wreck:visible_at_high_tide"] && (a += "Sichtbar bei Hochwasser: Nein<br/>"), "yes" == b.access && (a += "Zutritt m\xF6glich<br/>"), "no" == b.access && (a += "Zutritt nicht m\xF6glich<br/>"), "permit_required" == b.access && (a += "Zutritt nur mit Genehmigung<br/>"));return a;
}
function fnKlosterAdditional(b) {
    var a = "";if (b["monastery:type"]) switch (b["monastery:type"]) {case "monastery":
            a += "Typ: Kl\xF6sterliche Gemeinschaft (monastery)<br/>";break;case "convent":
            a += "Typ: Bettelm\xF6nch Gemeinschaft (convent)<br/>";break;case "canonry":
            a += "Typ: Kanonikat (canonry)<br/>";break;case "commandry":
            a += "Typ: Milit\xE4r gef\xFChrt (commandry)<br/>";break;case "hermitage":
            a += "Typ: Einsiedelei (hermitage)<br/>";break;default:
            a += "Typ: unbekannt<br/>";}b["community:gender"] && ("male" == b["community:gender"] && (a += "Geschlecht: M\xE4nnergemeinschaft<br/>"), "female" == b["community:gender"] && (a += "Geschlecht: Frauengemeinschaft<br/>"));b.religious_rank && ("abbey" == b.religious_rank ? a += "Religi\xF6ser Rang: Abtei<br/>" : "abbey" == b.religious_rank && (a += "Religi\xF6ser Rang: Erzabtei<br/>"));"yes" == b.shrine && (a += "Besonderheit: Heiligengrab / Reliquienschrein<br/>");"yes" == b.sanctuary && (a += "Besonderheit: Heiligtum / Altarraum (Sanktuar)<br/>");if (b.religion) switch (b.religion) {case "animist":
            a += "Religion: animistisch<br/><br/>";break;case "bahai":
            a += "Religion: bahai<br/>";break;case "buddhist":
            a += "Religion: buddhistisch<br/>";break;case "christian":
            a += "Religion: christlich<br/>";break;case "hindu":
            a += "Religion: hinduistisch<br/>";break;case "IglesiaNiCristo":
            a += "Religion: IglesiaNiCristo<br/>";break;case "jain":
            a += "Religion: jain<br/>";break;case "jewish":
            a += "Religion: j\xFCdisch<br/>";break;case "multifaith":
            a += "Religion: pluralistisch<br/>";break;case "muslim":
            a += "Religion: muslimisch<br/>";
            type += "Moschee<br/>";break;case "pagan":
            a += "Religion: heidnisch<br/>";break;case "pastafarian":
            a += "Religion: pastafarisch<br/>";break;case "scientologist":
            a += "Religion: scientologisch<br/>";break;case "shinto":
            a += "Religion: schintoistisch<br/>";break;case "sikh":
            a += "Religion: sikh<br/>";break;case "spiritualist":
            a += "Religion: spiritistisch<br/>";break;case "taoist":
            a += "Religion: taoistisch<br/>";break;case "unitarian":
            a += "Religion: unitarian<br/>";break;case "yazidi":
            a += "Religion: yazidi<br/>";break;
        case "zoroastrian":
            a += "Religion: zoroastrisch<br/>";break;default:
            a += "Religion: unbekannt<br/>";}if (b.denomination) switch (b.denomination) {case "anglican":
            a += "Konfession: Anglikanische Gemeinschaft<br/><br/>";break;case "baptist":
            a += "Konfession: Baptisten<br/>";break;case "catholic":
            a += "Konfession: Katholische Kirche, ohne genauere Spezifizierung<br/>";break;case "roman_catholic":
            a += "Konfession: R\xF6misch-Katholische Kirche<br/>";break;case "old_catholic":
            a += "Konfession: Altkatholische Kirche (Schweiz: Christ-Katholisch)<br/>";
            break;case "greek_catholic":
            a += "Konfession: Griechisch-Katholische Kirche, Sammelbezeichnung f\xFCr die mit Rom unierten Ostkirchen des byzantinischen Ritus<br/>";break;case "evangelical":
            a += "Konfession: Evangelikalismus ist eine theologische Richtung innerhalb des Protestantismus. Achtung! Nicht verwechseln mit der evangelischen (= protestantischen) Kirche<br/>";break;case "jehovahs_witness":
            a += "Konfession: Zeugen Jehovas<br/>";break;case "lutheran":
            a += "Konfession: Lutheraner, evangelisch-lutherisch<br/>";
            break;case "mennonite":
            a += "Konfession: Mennoniten<br/>";break;case "messianic_jewish":
            a += "Konfession: Messianische Juden, stehen theologisch den evangelikalen Christen nahe.<br/>";break;case "methodist":
            a += "Konfession: Methodist Church (engl. Methodism)<br/>";break;case "mormon":
            a += "Konfession: Mormonen<br/>";break;case "new_apostolic":
            a += "Konfession: Neuapostolische Kirche<br/>";break;case "orthodox":
            a += "Konfession: Orthodox, ohne genauere Spezifizierung<br/>";break;case "greek_orthodox":
            a += "Konfession: Griechisch-Orthodox<br/>";
            break;case "coptic_orthodox":
            a += "Konfession: Koptische Kirche, ist die christliche altorientalische Kirche \xC4gyptens.<br/>";break;case "pentecostal":
            a += "Konfession: Pfingstbewegung<br/>";break;case "presbyterian":
            a += "Konfession: Presbyterianische Kirchen<br/>";break;case "protestant":
            a += "Konfession: Evangelische Kirchen<br/>";break;case "quaker":
            a += "Konfession: Qu\xE4ker<br/>";break;case "reformed":
            a += "Konfession: Evangelisch-reformierte<br/>";break;case "russian_orthodox":
            a += "Konfession: Russisch-Orthodox<br/>";
            break;case "seventh_day_adventist":
            a += "Konfession: Siebenten-Tags-Adventisten<br/>";break;case "christian_community":
            a += "Konfession: Die Christengemeinschaft ist eine christliche Kirche, die sich als selbst\xE4ndige Kultusgemeinschaft versteht.<br/>";break;case "adventist":
            a += "Konfession: Adventisten, nicht alle Adventisten sind Siebenten-Tags-Adventisten.<br/>";break;case "alliance":
            a += "Konfession: Christian and Missionary Alliance (C&MA) is an evangelical Protestant denomination within Christianity.<br/>";
            break;case "assemblies_of_god":
            a += "Konfession: Assemblies of God, ist eine pfingstlerische Denomination.<br/>";break;case "apostolic":
            a += "Konfession: Apostolische Kirche<br/>";break;case "armenian_apostolic":
            a += "Konfession: Armenische Apostolische Kirche, ist eine altorientalische Kirche.<br/>";break;case "assyrian":
            a += "Konfession: Assyrische Kirche des Ostens, auch Apostolische Kirche des Ostens, ist eine autokephale und v\xF6llig eigenst\xE4ndige Ostkirche syrischer Tradition in Nachfolge des altchristlichen Katholikats von Seleukia-Ktesiphon.<br/>";
            break;case "christ_scientist":
            a += "Konfession: Christian Science (deutsch: Christliche Wissenschaft) ging aus der Neugeist-Bewegung hervor.<br/>";break;case "church_of_scotland":
            a += "Konfession: Church of Scotland (dt. Kirche Schottlands) ist die Nationalkirche in Schottland. Im Sprachgebrauch auch \u201Ethe Kirk\u201C genannt.<br/>";break;case "czechoslovak_hussite":
            a += "Konfession: Tschechoslowakische Hussitische Kirche, ist eine christliche Kirche, die durch Abspaltung von der R\xF6misch-Katholischen Kirche entstanden ist. Oft auch Neuhussitische Kirche genannt, vornehmlich in Tschechien verbreitet, aber auch in der Slowakei<br/>";
            break;case "dutch_reformed":
            a += "Konfession: Niederl\xE4ndisch-reformierte Kirche, (einschlie\xDFlich NGK und \xE4hnliche Kirchen in S\xFCdafrika)<br/>";break;case "exclusive_brethren":
            a += "Konfession: Exclusive Brethren<br/>";break;case "foursquare":
            a += "Konfession: International Church of the Foursquare Gospel<br/>";break;case "kimbanguist":
            a += "Konfession: Kimbanguistenkirche, ist eine afrikanische, unabh\xE4ngige, christliche Kirche.<br/>";break;case "living_waters_church":
            a += "Konfession: Living Waters Christian Church<br/>";
            break;case "mariavite":
            a += "Konfession: Mariavitismus<br/>";break;case "maronite":
            a += "Konfession: Syrisch-maronitische Kirche, ist eine mit Rom unierte, christliche Kirche, die den r\xF6mischen Papst als Oberhaupt anerkennt.<br/>";break;case "moravian":
            a += "Konfession: Herrnhuter Br\xFCdergemeine, (auch: Unitas Fratrum, Evangelische oder Erneuerte Br\xFCder-Unit\xE4t, engl. Moravian Church) ist eine aus der b\xF6hmischen Reformation herkommende \xFCberkonfessionell-christliche Glaubensbewegung.<br/>";
            break;case "nazarene":
            a += "Konfession: Kirche des Nazareners, ist eine Freikirche und Heiligungsgemeinde in methodistischer Tradition.<br/>";break;case "nondenominational":
            a += "Konfession: Nondenominational Christianity<br/>";break;case "old_believers":
            a += "Konfession: Altorthodoxe, (h\xE4ufiger Altgl\xE4ubige) ist eine Sammelbezeichnung f\xFCr religi\xF6se Str\xF6mungen und Gruppen innerhalb der russisch-orthodoxen Tradition.<br/>";break;case "polish_catholic":
            a += "Konfession: Polnisch-Katholische Kirche<br/>";
            break;case "salvation_army":
            a += "Konfession: Heilsarmee, ist eine christliche Freikirche mit ausgepr\xE4gter sozialer T\xE4tigkeit.<br/>";break;case "santo_daime":
            a += "Konfession: Santo Daime, ist einer synkretistischen religi\xF6se Bewegung aus Brasilien.<br/>";break;case "serbian_orthodox":
            a += "Konfession: Serbisch-Orthodoxe Kirche, bezeichnet die orthodoxe Kirche von Serbien und die ihr nachgeordneten Kirchen.<br/>";break;case "spiritism":
            a += "Konfession: Spiritismus, oder Spiritualismus die Lehre des Spiritisten Allan Kardec<br/>";
            break;case "united":
            a += "Konfession: United Church of Canada, ist die zweitgr\xF6\xDFte Kirche in Kanada.<br/>";break;case "united_church_of_christ":
            a += "Konfession: United Church of Christ, ist eine Kirche in den USA.<br/>";break;case "united_free_church_of_scotland":
            a += "Konfession: United Free Church of Scotland, ist eine presbyterianische Freikirche in Schottland.<br/>";break;case "united_methodist":
            a += "Konfession: Evangelisch-methodistische Kirche, (engl. United Methodist Church (UMC)) ist eine christliche Kirche in der wesleyanischen Tradition.<br/>";
            break;case "united_reformed":
            a += "Konfession: United Reformed Church, (Vereinigte Reformierte Kirche, URC) ist eine reformierte Kirche in Gro\xDFbritannien.<br/>";break;case "uniting":
            a += "Konfession: Uniting Church in Australia (UCA) ist die drittgr\xF6\xDFte christliche Denomination in Australien.<br/>";break;case "church_of_sweden":
            a += "Konfession: Schwedische Kirche, ist die evangelisch-lutherische Kirche und ehemalige Staatskirche Schwedens.<br/>";break;case "mission_covenant_church_of_sweden":
            a += "Konfession: Schwedische Missionskirche ist eine reformierte Kirche in Schweden.<br/>";break;case "alternative":
            a += "Konfession: alternative<br/>";break;case "ashkenazi":
            a += "Konfession: ashkenazi<br/>";break;case "buchari":
            a += "Konfession: buchari<br/>";break;case "conservative":
            a += "Konfession: conservative<br/>";break;case "egalitarian":
            a += "Konfession: egalitarian<br/>";break;case "hasidic":
            a += "Konfession: hasidic<br/>";break;case "humanistic":
            a += "Konfession: humanistic<br/>";break;case "kabbalah":
            a += "Konfession: kabbalah<br/>";break;case "kabbalistic":
            a += "Konfession: kabbalistic<br/>";break;case "karaite":
            a += "Konfession: karaite<br/>";break;case "liberal":
            a += "Konfession: liberal<br/>";break;case "lubavitch":
            a += "Konfession: lubavitch<br/>";break;case "lubavitch_messianic":
            a += "Konfession: lubavitch_messianic<br/>";break;case "mizrachi_baghdadi":
            a += "Konfession: mizrachi_baghdadi<br/>";break;case "mizrachi_chida":
            a += "Konfession: mizrachi_chida<br/>";break;case "mizrachi_jerusalemite":
            a += "Konfession: mizrachi_jerusalemite<br/>";
            break;case "mizrachi_livorno":
            a += "Konfession: mizrachi_livorno<br/>";break;case "mizrachi_moroccan":
            a += "Konfession: mizrachi_moroccan<br/>";break;case "modern_orthodox":
            a += "Konfession: modern_orthodox<br/>";break;case "neo_orthodox":
            a += "Konfession: neo_orthodox<br/>";break;case "nondenominational":
            a += "Konfession: nondenominational<br/>";break;case "orthodox":
            a += "Konfession: orthodox<br/>";break;case "orthodox_ashkenaz":
            a += "Konfession: orthodox_ashkenaz<br/>";break;case "orthodox_sefard":
            a += "Konfession: orthodox_sefard<br/>";
            break;case "progressive":
            a += "Konfession: progressive<br/>";break;case "reconstructionist":
            a += "Konfession: reconstructionist<br/>";break;case "reform":
            a += "Konfession: reform<br/>";break;case "renewal":
            a += "Konfession: renewal<br/>";break;case "samaritan":
            a += "Konfession: samaritan<br/>";break;case "sefardi":
            a += "Konfession: sefardi<br/>";break;case "sefardi_amsterdam":
            a += "Konfession: sefardi_amsterdam<br/>";break;case "sefardi_london":
            a += "Konfession: sefardi_london<br/>";break;case "traditional":
            a += "Konfession: traditional<br/>";
            break;case "ultra_orthodox":
            a += "Konfession: ultra_orthodox<br/>";break;case "unaffiliated":
            a += "Konfession: unaffiliated<br/>";break;case "yemenite":
            a += "Konfession: yemenite<br/>";break;case "yemenite_baladi":
            a += "Konfession: yemenite_baladi<br/>";break;case "yemenite_shami":
            a += "Konfession: yemenite_shami<br/>";break;case "ahmadiya":
            a += "Konfession: ahmadiya<br/>";break;case "alaouite":
            a += "Konfession: alaouite<br/>";break;case "druze":
            a += "Konfession: druze<br/>";break;case "ibadi":
            a += "Konfession: ibadi<br/>";
            break;case "ismaili":
            a += "Konfession: ismaili<br/>";break;case "shia":
            a += "Konfession: shia<br/>";break;case "sunni":
            a += "Konfession: sunni<br/>";break;case "nichiren":
            a += "Konfession: nichiren<br/>";break;case "jodo_shinshu":
            a += "Konfession: jodo_shinshu<br/>";break;case "jodo_shu":
            a += "Konfession: jodo_shu<br/>";break;case "vajrayana":
            a += "Konfession: vajrayana<br/>";break;case "shingon_shu":
            a += "Konfession: shingon_shu<br/>";break;case "zen":
            a += "Konfession: zen<br/>";break;case "thai_mahanikaya":
            a += "Konfession: thai_mahanikaya<br/>";
            break;case "thai_thammayut":
            a += "Konfession: thai_thammayut<br/>";break;case "asatru":
            a += "Konfession: asatru<br/>";break;case "celtic":
            a += "Konfession: celtic<br/>";break;case "greco-roman":
            a += "Konfession: greco-roman<br/>";break;case "wicca":
            a += "Konfession: wicca<br/>";break;case "irani":
            a += "Konfession: irani<br/>";break;case "parsi":
            a += "Konfession: parsi<br/>";break;default:
            a += "unbekannt<br/>";}if (b.community) switch (b.community) {case "AA":
            a += "Ordensgemeinschaft (AA): Augustinians of the Assumption <br/>";
            break;case "BSCM":
            a += "Ordensgemeinschaft (BSCM): Adorers of the Sacred Heart of Jesus of Montmartre <br/>";break;case "CBMV":
            a += "Ordensgemeinschaft (CBMV): Augustiner-Chorfrauen B.M.V.<br/>";break;case "CO":
            a += "Ordensgemeinschaft (CO): Oratorians<br/>";break;case "CMC":
            a += "Ordensgemeinschaft (CMC): Congregation of the Mother Co-Redemptrix<br/>";break;case "CRSP":
            a += "Ordensgemeinschaft (CRSP): Kongregation der Regularkleriker vom hl. Paulus (Barnabiten)<br/>";break;case "CSJ":
            a += "Ordensgemeinschaft (CSJ): Carmel Saint-Joseph<br/>";
            break;case "CSSP":
            a += "Ordensgemeinschaft (CSSP): Congr\xE9gation du Saint-Esprit<br/>";break;case "CSSR":
            a += "Ordensgemeinschaft (CSSR): Congr\xE9gation du Tr\xE8s Saint R\xE9dempteur<br/>";break;case "FCJM":
            a += "Ordensgemeinschaft (FCJM): Franciscan Sisters, Daughters of the Sacred Heart of Jesus and Mary<br/>";break;case "FMGB":
            a += "Ordensgemeinschaft (FMGB): Suore Francescane Missionarie di Ges\xF9 Bambino<br/>";break;case "FMH":
            a += "Ordensgemeinschaft (FMH): Congregatio Filiarum Mariae Sanctissimae ab Horto<br/>";
            break;case "FMM":
            a += "Ordensgemeinschaft (FMM): Franciscaines missionnaires de Marie<br/>";break;case "FSC":
            a += "Ordensgemeinschaft (FSC): Fr\xE8res des \xC9coles chr\xE9tiennes<br/>";break;case "MCCI":
            a += "Ordensgemeinschaft (MCCI): Missionnaires comboniens du Sacr\xE9-C\u0153ur<br/>";break;case "MSFS":
            a += "Ordensgemeinschaft (MSFS): Missionnaires de Saint Fran\xE7ois de Sales<br/>";break;case "OCart":
            a += "Ordensgemeinschaft (OCart): Order of the Carthusians<br/>";break;case "OCC":
            a += "Ordensgemeinschaft (OCC): Ordre de Notre Dame du Mont-Carmel<br/>";
            break;case "OCD":
            a += "Ordensgemeinschaft (OCD): Ordre des Carmes d\xE9chaux<br/>";break;case "OCSO":
            a += "Ordensgemeinschaft (OCSO): Zisterzienserorden der strengeren Observanz (Trappisten)<br/>";break;case "OFM":
            a += "Ordensgemeinschaft (OFM): Ordre des Fr\xE8res Mineurs (Franziskaner)<br/>";break;case "OFMCap":
            a += "Ordensgemeinschaft (OFMCap): Ordre des Fr\xE8res Mineurs Capucins<br/>";break;case "OFMConv":
            a += "Ordensgemeinschaft (OFMConv): Ordre des Fr\xE8res Mineurs Conventuels<br/>";break;case "OFS":
            a += "Ordensgemeinschaft (OFS): Franciscans secular Third Order<br/>";break;case "OMI":
            a += "Ordensgemeinschaft (OMI): Oblats de Marie<br/>";break;case "OP":
            a += "Ordensgemeinschaft (OP): Ordre des Fr\xE8res Pr\xEAcheurs<br/>";break;case "OPraem":
            a += "Ordensgemeinschaft (OPraem): Ordre des chanoines r\xE9guliers de Pr\xE9montr\xE9<br/>";break;case "OSB":
            a += "Ordensgemeinschaft (OSB): Order of Saint Benedict<br/>";break;case "OSC":
            a += "Ordensgemeinschaft (OSC): Ordre de Sainte-Claire ou Ordre des Pauvres Dames<br/>";
            break;case "OSSS":
            a += "Ordensgemeinschaft (OSSS): Ordre de Sainte-Brigitte<br/>";break;case "OVM":
            a += "Ordensgemeinschaft (OVM): Order of the Visitation of Holy Mary (Salesianerinnen)<br/>";break;case "PSDP":
            a += "Ordensgemeinschaft (PSDP): Petites s\u0153urs des pauvres (Kleinen Schwestern der Armen)<br/>";break;case "PFJ":
            a += "Ordensgemeinschaft (PFJ): Petits Fr\xE8res de J\xE9sus<br/>";break;case "SDB":
            a += "Ordensgemeinschaft (SDB): Soci\xE9t\xE9 de Saint Fran\xE7ois de Sales<br/>";break;case "SJ":
            a += "Ordensgemeinschaft (SJ): Compagnie de J\xE9sus<br/>";break;case "SOC":
            a += "Ordensgemeinschaft (SOC): Order of Cistercians<br/>";break;case "SSCC":
            a += "Ordensgemeinschaft (SSCC): Congregation of the Sacred Hearts of Jesus and Mary<br/>";break;case "SSF":
            a += "Ordensgemeinschaft (SSF): Society of St Francis<br/>";break;case "SSJE":
            a += "Ordensgemeinschaft (SSJE): Society of St John the Evangelist<br/>";break;case "SSpS":
            a += "Ordensgemeinschaft (SSpS): Steyler Missionsschwestern<br/>";break;case "TOR":
            a += "Ordensgemeinschaft (TOR): Terzo Ordine Regolare di San Francesco<br/>";break;default:
            a += "unbekannt<br/>";}return a;
}var fnTestInfoPopup = function fnTestInfoPopup(b) {
    b = b.getProperties();var a = "",
        c;for (c in b) {
        a = a + c + "=" + b[c] + "<br/>";
    }return '<div class="c4g_popup_text" style="width:300px;">' + a + "</div>";
};

/***/ }),

/***/ "./Resources/public/js/c4g-maps-popup-info-en.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-popup-info-en.js ***!
  \*******************************************************/
/*! exports provided: trim, isMobile, fnStandardInfoPopup, fnReducedInfoPopup, fnHeader, fnFooter, fnGetTranslate_Type, fnContent, fnContentAerodrome, fnContentNatural, fnContentProtectedArea, fnContentLanduse, fnMessstation, fnContentRoute, fnContentPetrol, fnContentHistoric, fnContentBarriers, fnContentTourism, fnContentAmenity, fnContentStorage, fnContentInformationCity, fnContentEmergency, fnContentCuisine, fnContentShipping, fnContentHydrants, fnContentStreetsTraffic, fnContentSports, fnArztInfo, fnKraftwerkInfo, fnWertstoffinfo, fnAdditionalBuildingInfos, fnSicherheitAdditional, fnWreckInfo, fnKlosterAdditional */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["trim"] = trim;
/* harmony export (immutable) */ __webpack_exports__["isMobile"] = isMobile;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnStandardInfoPopup", function() { return fnStandardInfoPopup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnReducedInfoPopup", function() { return fnReducedInfoPopup; });
/* harmony export (immutable) */ __webpack_exports__["fnHeader"] = fnHeader;
/* harmony export (immutable) */ __webpack_exports__["fnFooter"] = fnFooter;
/* harmony export (immutable) */ __webpack_exports__["fnGetTranslate_Type"] = fnGetTranslate_Type;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContent", function() { return fnContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentAerodrome", function() { return fnContentAerodrome; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentNatural", function() { return fnContentNatural; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentProtectedArea", function() { return fnContentProtectedArea; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentLanduse", function() { return fnContentLanduse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnMessstation", function() { return fnMessstation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentRoute", function() { return fnContentRoute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentPetrol", function() { return fnContentPetrol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentHistoric", function() { return fnContentHistoric; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentBarriers", function() { return fnContentBarriers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentTourism", function() { return fnContentTourism; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentAmenity", function() { return fnContentAmenity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentStorage", function() { return fnContentStorage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentInformationCity", function() { return fnContentInformationCity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentEmergency", function() { return fnContentEmergency; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentCuisine", function() { return fnContentCuisine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentShipping", function() { return fnContentShipping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentHydrants", function() { return fnContentHydrants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentStreetsTraffic", function() { return fnContentStreetsTraffic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fnContentSports", function() { return fnContentSports; });
/* harmony export (immutable) */ __webpack_exports__["fnArztInfo"] = fnArztInfo;
/* harmony export (immutable) */ __webpack_exports__["fnKraftwerkInfo"] = fnKraftwerkInfo;
/* harmony export (immutable) */ __webpack_exports__["fnWertstoffinfo"] = fnWertstoffinfo;
/* harmony export (immutable) */ __webpack_exports__["fnAdditionalBuildingInfos"] = fnAdditionalBuildingInfos;
/* harmony export (immutable) */ __webpack_exports__["fnSicherheitAdditional"] = fnSicherheitAdditional;
/* harmony export (immutable) */ __webpack_exports__["fnWreckInfo"] = fnWreckInfo;
/* harmony export (immutable) */ __webpack_exports__["fnKlosterAdditional"] = fnKlosterAdditional;
/*
  K?stenschmiede GmbH Software & Design 2011 - 2018
 @author     K?stenschmiede <http://www.kuestenschmiede.de>
 @license    http://opensource.org/licenses/lgpl-3.0.html
*/
function trim(b) {
    return b.replace(/^\s+/, "").replace(/\s+$/, "");
}
function isMobile() {
    return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4))
    );
}function translate(b) {
    var a = trim(b);return "yes" == a || "Yes" == a ? "yes" : "no" == a || "No" == a ? "no" : "limited" == a ? "limited" : "designated" == a ? "designated" : "wood" == a ? "wood" : "metal" == a ? "metal" : "concrete" == a ? "concrete" : "plastic" == a ? "plastic" : "stone" == a ? "stone" : "steel" == a ? "steel" : "brick" == a ? "brick" : "reinforced_concrete" == a ? "reinforced_concrete" : "masonry" == a ? "masonry" : b;
}
var fnStandardInfoPopup = function fnStandardInfoPopup(b, a) {
    var c = b.getProperties(),
        d = "",
        e;if ("function" === typeof a) {
        var f = a.call(b)[0].getImage();if (f) try {
            e = f.getSrc();
        } catch (g) {
            e = "";
        }
    } else {
        f = a.getImage();try {
            e = f.getSrc();
        } catch (h) {
            e = "";
        }
    }d += fnHeader(c, e);d += fnContent(c);d += fnFooter(c, b.get("osm_type") + "/" + b.getId());return '<div class="c4g_popup_text">' + d + "</div>";
},
    fnReducedInfoPopup = function fnReducedInfoPopup(b, a) {
    var c = b.getProperties(),
        d = "",
        e = !1,
        f;f = "function" === typeof a ? a.call(b)[0].getImage().getSrc() : a.getImage().getSrc();if ("restaurant" == c.amenity || "pub" == c.amenity || "biergarten" == c.amenity) e = !0;"hotel" == c.tourism && (e = !0);"guest_house" == c.tourism && (e = !0);"chalet" == c.tourism && (e = !0);"hostel" == c.tourism && (e = !0);"alpine_hut" == c.tourism && (e = !0);if ("artwork" == c.tourism || "artwork" == c.amenity) e = !0;if ("museum" == c.tourism || "museum" == c.amenity) e = !0;"cinema" == c.amenity && (e = !0);"theatre" == c.amenity && (e = !0);if ("attraction" == c.amenity || "fountain" == c.amenity || "monument" == c.historic || "city_gate" == c.historic || "ruins" == c.historic || "castle" == c.historic || "attraction" == c.tourism) e = !0;"playground" == c.leisure && (e = !0);c.aerialway && (e = !0);if ("swimming_pool" == c.amenity || "swimming_pool" == c.leisure || "swimming" == c.sport) e = !0;"station" == c.railway && (e = !0);"swimming" == c.sport && (e = !0);"swimming_pool" == c.leisure && (e = !0);"swimming_pool" == c.amenity && (e = !0);"waterpark" == c.leisure && (e = !0);c.water_park && (e = !0);"sports_centre" == c.leisure && (e = !0);switch (e) {case !1:
            d += fnHeader(c, f);d += fnContent(c);d += fnFooter(c, b.get("osm_type") + "/" + b.getId());break;case !0:
            d += fnHeader(c, f);}return '<div class="c4g_popup_text">' + d + "</div>";
};
function fnHeader(b, a) {
    var c = "",
        d = "32px";a && -1 != a.indexOf("icon_mapcil") && (d = "250px", a = a.replace("icon_mapcil", "logo_mapcil"));if (b.name || b["piste:name"] || b["xmas:name"] || b["xmas:location"]) {
        if (b.name) var e = b.name;b["piste:name"] && (e = b["piste:name"]);b["xmas:name"] && (e = b["xmas:name"]);b["xmas:location"] && (e = b["xmas:location"]);c += a ? '<img src="' + a + '" width="' + d + '" name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>" : '<name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>";
    } else a && (c += '<img src="' + a + '" width="' + d + '" name="' + a + '" alt="' + a + '">');c += fnGetTranslate_Type(b);return '<div class="c4g_popup_header">' + c + "</div>";
}
function fnFooter(b, a) {
    var c = "",
        d = !1;b["addr:housename"] && (c += "housename: " + b["addr:housename"] + "<br/>", d = !0);b["addr:floor"] ? (c += "floor: " + b["addr:floor"] + "<br/>", d = !0) : b["addr:level"] && (c += "level: " + b["addr:level"] + "<br/>", d = !0);b["addr:street"] && (c += b["addr:street"], c = b["addr:housenumber"] ? c + (" " + b["addr:housenumber"] + "<br/>") : c + "<br/>", d = !0);b["addr:postcode"] && (c += b["addr:postcode"] + " ");b["addr:city"] && (c += b["addr:city"] + "<br/>", d = !0);if (b.sqkm) if (b.sqkm = "" + b.sqkm, 3 < b.sqkm.length) {
        var e = b.sqkm.length % 3,
            f = 0 < e ? b.sqkm.substring(0, e) : "";for (i = 0; i < Math.floor(b.sqkm.length / 3); i++) {
            f = 0 == e && 0 == i ? f + b.sqkm.substring(e + 3 * i, e + 3 * i + 3) : f + ("." + b.sqkm.substring(e + 3 * i, e + 3 * i + 3));
        }c += "area: " + f + " Km\xB2<br/>";
    } else c += "area " + b.sqkm + "<br/>";b["contact:phone"] && (c = isMobile() ? c + ('phone: <a href="tel:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>") : c + ('phone: <a href="callto:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>"), d = !0);b.phone && (c = isMobile() ? c + ('phone: <a href="tel:' + b.phone + '">' + b.phone + "</a><br/>") : c + ('phone: <a href="callto:' + b.phone + '">' + b.phone + "</a><br/>"), d = !0);b["contact:fax"] ? (c += "fax: " + b["contact:fax"] + "<br/>", d = !0) : b.fax && (c += "fax: " + b.fax + "<br/>", d = !0);b["contact:email"] ? (c += 'email: <a href="mailto:' + b["contact:email"] + '">' + b["contact:email"] + "</a><br/>", d = !0) : b.email && (c += 'email: <a href="mailto:' + b.email + '">' + b.email + "</a><br/>", d = !0);d && (c += "<br/>");if (b.opening_hours) {
        d = b.opening_hours;for (e = 0; 0 == e || 0 < d.indexOf(";");) {
            0 < e && (d = d.replace(";", "<br/>")), e++;
        }c += 'opening hours: <br/><div class="c4g_open_text">' + d + "</div>";c = 0 < d.indexOf("PH") ? c + "(PH = public holiday)<br/>" : c + "<br/>";
    }if (b["xmas:opening_hours"]) {
        d = b["xmas:opening_hours"];for (e = 0; 0 == e || 0 < d.indexOf(";");) {
            0 < e && (d = d.replace(";", "<br/>")), e++;
        }c += 'opening hours: <br/><div class="c4g_open_text">' + d + "</div>";c = 0 < d.indexOf("PH") ? c + "(PH = public holiday)<br/>" : c + "<br/>";
    }b["xmas:url"] && (d = "", d = b["xmas:url"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'website: <a href="' + d + '" target="_blank">website link</a><br/>');
    b["contact:website"] ? (d = b["contact:website"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'website: <a href="' + d + '" target="_blank">website link</a><br/>') : b.website && (d = b.website, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'website: <a href="' + d + '" target="_blank">website link</a><br/>');b.wikipedia && (d = b.wikipedia, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://wikipedia.org/wiki/" + d), c += 'Wikipedia: <a href="' + d + '" target="_blank">Wikipedia link</a><br/>');b.wikimedia_commons && (d = b.wikimedia_commons, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://commons.wikimedia.org/wiki/" + d), c += 'Wikimedia: <a href="' + d + '" target="_blank">Wikimedia link</a><br/>');b["contact:webcam"] && (d = b["contact:webcam"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'webcam: <a href="' + d + '" target="_blank">webcam link</a><br/>');b.image && (c += '<img src="' + b.image + '" width="200px" name="' + b.name + '" alt="' + b.name + '"><br/>');d = "";b.internet_access && (d += "internet access: " + translate(b.internet_access) + "<br/>");b["internet_access:fee"] && (d += "fee: " + translate(b["internet_access:fee"]) + "<br/>");b["wifi_access:operator"] && (d += "wifi operator: " + b["wifi_access:operator"] + "<br/>");b["wifi_access:technology"] && (d += "wifi technology: " + b["wifi_access:technology"] + "<br/>");b["wifi_access:ssid"] && (d += "wifi ssid: " + b["wifi_access:ssid"] + "<br/>");"" != d && (c += 'internet access available<br/><div class="c4g_shop_internet_access">' + d + "</div><br/>");b.wheelchair && (c += "wheelchair: " + translate(b.wheelchair) + "<br/>");b["wheelchair:description"] && (c += "description: " + b["wheelchair:description"] + "<br/>");b["wheelchair:entrance_width"] && (c += "entrance width (cm): " + b["wheelchair:entrance_width"] + "<br/>");b["wheelchair:step_height"] && (c += "step height (cm): " + b["wheelchair:step_height"] + "<br/>");b["wheelchair:rooms"] && (c += "rooms: " + b["wheelchair:rooms"] + "<br/>");
    b["wheelchair:places"] && (c += "places: " + b["wheelchair:places"] + "<br/>");b["cent:places"] && (c += "places: " + b["wheelchair:places"] + "<br/>");b["ramp:wheelchair"] && (c += "ramp: " + b["ramp:wheelchair"] + "<br/>");b["capacity:disabled"] && (c += "capacity parking: " + translate(b["capacity:disabled"]) + "<br/>");b["toilets:wheelchair"] && (c += "toilets: " + translate(b["toilets:wheelchair"]) + "<br/>");b.centralkey && (c += "centralkey: " + b.centralkey + "<br/>");b.note && (c += b.note + "<br/>");b.description && (c += b.description + "<br/>");
    b.operator && (c += "operator: " + b.operator + "<br/>");b.ref && (c += "reference: " + b.ref + "<br/>");"yes" == b.lit && (c += "This object is illuimanted.<br/>");b.shop && (d = "", b.brand && (d += "brand: " + b.brand + "<br/>"), b.sells && (d += "sells: " + b.sells + "<br/>"), b.origin && (d += "source market: " + b.origin + "<br/>"), "yes" == b.wholesale && (d += "distributor: yes<br/>"), "" != d && (c += 'further particulars: <br/><div class="c4g_shop_text">' + d + "</div><br/>"));a && (d = a, trim(d), d = d.replace(/\./, "/"), c = c + "<br/>" + ('OSM:    <a href="http://www.openstreetmap.org/' + d + '" target="_blank">OpenStreetMap link</a><br/>'));return c = '<div class="c4g_popup_footer">' + c + "</div>";
}
function fnGetTranslate_Type(b) {
    var a = "";if ("doctors" == b.amenity || "doctor" == b.healthcare) a += "doctor<br/>";if ("hospital" == b.amenity || "clinic" == b.amenity || "hospital" == b.healthcare || "clinic" == b.healthcare) a = "yes" == b.emergency ? a + "hospital with emergency facilities<br/>" : a + "hospital<br/>";"dentist" == b.amenity && (a += "dentist<br/>");if ("pharmacy" == b.amenity || "pharmacy" == b["health_facility:type"]) a += "pharmacy<br/>";if ("physiotherapist" == b.healthcare || "yes" == b["health_speciality:physiotherapy"]) a += "physiotherapist<br/>";
    if ("occupational_therapist" == b.healthcare || "yes" == b["health_speciality:occupational_therapy"] || "yes" == b["health_specialty:occupational_therapy"]) a += "occupational_therapist<br/>";if ("psychotherapist" == b.healthcare || "yes" == b["health_speciality:psychotherapy"]) a += "psychotherapist<br/>";"alternative" == b.healthcare && (a += "alternative<br/>");"midwife" == b.healthcare && (a += "midwife<br/>");if ("speech_therapist" == b.healthcare || "yes" == b["health_speciality:speech_therapy"]) a += "speech_therapist<br/>";"yes" == b["health_speciality:music_therapy"] && (a += "music_therapy<br/>");"veterinary" == b.amenity && (a += "veterinary<br/>");"fire_station" == b.amenity && (a += "fire station<br/>");"fire_extinguisher" == b.emergency && (a += "fire extinguisher<br/>");"aed" == b.emergency && (a += "aed<br/>");"defibrillator" == b.emergency && (a += "defibrillator<br/>");"phone" == b.emergency && (a += "call box<br/>");"police" == b.amenity && (a += "police<br/>");"ambulance_station" == b.emergency && (a += "ambulance station<br/>");"technical" == b.emergency_service && (a += "technical<br/>");"water" == b.emergency_service && (a += "water<br/>");"baywatch" == b.waterway && (a += "baywatch<br/>");"air" == b.emergency_service && (a += "rescue helicopter<br/>");"emergency_access_point" == b.highway && (a += "emergency access point<br/>");if ("lifeboat_station" == b.amenity || "lifeboat_station" == b.emergency) a += "lifeboat station<br/>";"life_ring" == b.emergency && (a += "life ring<br/>");"siren" == b.emergency && (a += "siren<br/>");"life_ring" == b.amenity && (a += "life ring<br/>");"rescue_station" == b.amenity && (a += "rescue station<br/>");"fire_hydrant" == b.emergency && ("underground" == b["fire_hydrant:type"] ? a += "underground hydrant<br/>" : "pillar" == b["fire_hydrant:type"] ? a += "pillar hydrant<br/>" : "wall" == b["fire_hydrant:type"] ? a += "wall hydrant<br/>" : "pond" == b["fire_hydrant:type"] && (a += "suction point<br/>"));"suction_point" == b.emergency && (a += "suction point<br/>");"fire_water_pond" == b.emergency && (a += "fire protection pond<br/>");"mountain" == b.emergency_service && (a += "mountain rescue service<br/>");"water_tank" == b.emergency && (a += "fire water tank<br/>");"container" == b.recycling_type && (a += "Recycling container<br/>");"recycling" == b.amenity && "yes" == b["recycling:excrement"] || "pump-out" == b["seamark:small_craft_facility:category"] ? a += "suction station<br/>" : "recycling" == b.amenity && (a += " buyback centre<br/>");"yes" == b["diet:pescetarian"] ? a += "pescetarian available<br/>" : "only" == b["diet:pescetarian"] && (a += "just pescetarian<br/>");"yes" == b["diet:vegetarian"] ? a += "vegetarian vorhanden<br/>" : "only" == b["diet:vegetarian"] && (a += "just vegetarian<br/>");"yes" == b["diet:lacto_vegetarian"] ? a += "lacto_vegetarian available<br/>" : "only" == b["diet:lacto_vegetarian"] && (a += "just lacto vegetarian<br/>");"yes" == b["diet:ovo_vegetarian"] ? a += "ovo vegetarian available<br/>" : "only" == b["diet:ovo_vegetarian"] && (a += "just ovo_vegetarian<br/>");"yes" == b["diet:vegan"] ? a += "vegan available<br/>" : "only" == b["diet:vegan"] && (a += "just vegan<br/>");"yes" == b["diet:fruitarian"] ? a += "fruitarian available<br/>" : "only" == b["diet:fruitarian"] && (a += "hust fruitarian<br/>");"yes" == b["diet:raw"] ? a += "raw availaibe<br/>" : "only" == b["diet:raw"] && (a += "just raw<br/>");
    "yes" == b["diet:gluten_free"] ? a += "gluten free available<br/>" : "only" == b["diet:gluten_free"] && (a += "just gluten free<br/>");"yes" == b["diet:dairy_free"] ? a += "dairy free available<br/>" : "only" == b["diet:dairy_free"] && (a += "just dairy free<br/>");"yes" == b["diet:lactose_free"] ? a += "lactose free available<br/>" : "only" == b["diet:lactose_free"] && (a += "just lactose free<br/>");"yes" == b["diet:halal"] ? a += "halal available<br/>" : "only" == b["diet:halal"] && (a += "just halal<br/>");"yes" == b["diet:kosher"] ? a += "kosher available<br/>" : "only" == b["diet:kosher"] && (a += "just kosher<br/>");"pub" == b.amenity && (a += "pub<br/>");"bar" == b.amenity && (a += "bar<br/>");"yes" == b.frozen_yogurt && (a += "frozen yogurt<br/>");"yes" == b.slush_ice && (a += "slush ice<br/>");"yes" == b.cake && (a += "cake<br/>");"yes" == b.coffee && (a += "coffee<br/>");"yes" == b.drinks && (a += "drinks<br/>");"biergarten" == b.amenity && (a += "biergarten<br/>");"restaurant" == b.amenity && (a += "restaurant<br/>");"fast_food" == b.amenity && (a += "fast food<br/>");if (("cafe" == b.amenity || "coffee_shop" == b.amenity) && "ice_cream" != b.cuisine) a += "cafe<br/>";if ("cafe" == b.amenity && "ice_cream" == b.cuisine || "ice_cream" == b.amenity) a += "ice cream<br/>";"alpine_hut" == b.tourism && (a += "alpine hut<br/>");"aquarium" == b.tourism && (a += "aquarium<br/>");"apartment" == b.tourism && (a += "apartment<br/>");"attraction" == b.tourism && (a += "attraction<br/>");"artwork" == b.tourism && (a += "artwork<br/>");"camp_site" == b.tourism && (a += "camp site<br/>");"caravan_site" == b.tourism && (a += "caravan site<br/>");"chalet" == b.tourism && (a += "chalet<br/>");"gallery" == b.tourism && (a += "gallery<br/>");"guest_house" == b.tourism && (a += "guest house<br/>");"hostel" == b.tourism && (a += "hostel<br/>");"hotel" == b.tourism && (a += "hotel<br/>");"motel" == b.tourism && (a += "motel<br/>");"museum" == b.tourism && (a += "museum<br/>");"picnic_site" == b.tourism && (a += "picnic site<br/>");"theme_park" == b.tourism && (a += "theme park<br/>");"viewpoint" == b.tourism && (a += "viewpoint<br/>");"wilderness_hut" == b.tourism && (a += "wilderness_hut<br/>");"wine_cellar" == b.tourism && (a += "wine cellar<br/>");"zoo" == b.tourism && (a += "zoo<br/>", "enclosure" == b.zoo && (a += "enclosure<br/>"), "petting_zoo" == b.zoo && (a += "petting zoo<br/>"), "falconry" == b.zoo && (a += "falconry<br/>"));"trail_riding_station" == b.tourism && (a += "trail riding station<br/>");"fishing" == b.club && (a += "fishing club<br/>");"sport" == b.club && "fishing" == b.sport && (a += "fishing club<br/>");"amateur_radio" == b.club && (a += "amateur radio club<br/>");"art" == b.club && (a += "art club<br/>");"astronomy" == b.club && (a += "astronomy club<br/>");"automobile" == b.club && (a += "automobile club<br/>");
    "board_games" == b.club && (a += "board games club<br/>");"card_games" == b.club && (a += "card games club<br/>");"charity" == b.club && (a += "charity club<br/>");"chess" == b.club && (a += "chess club<br/>");"cinema" == b.club && (a += "cinema club<br/>");"cooking" == b.club && (a += "cooking club<br/>");"culture" == b.club && (a += "culture club<br/>");"doityourself" == b.club && (a += "doityourself club<br/>");"equestrian" == b.club && (a += "equestrian club<br/>");"ethnic" == b.club && (a += "ethnic club<br/>");"fan" == b.club && (a += "fan club<br/>");"freemasonry" == b.club && (a += "freemasonry club<br/>");"game" == b.club && (a += "game club<br/>");"history" == b.club && (a += "history club<br/>");"hunting" == b.club && (a += "hunting club<br/>");"linux" == b.club && (a += "linux club<br/>");"motorcycle" == b.club && (a += "motorcycle club<br/>");"music" == b.club && (a += "music club<br/>");"nature" == b.club && (a += "nature club<br/>");"nudism" == b.club && (a += "nudism club<br/>");"photography" == b.club && (a += "photography club<br/>");"politics" == b.club && (a += "politics club<br/>");"religion" == b.club && (a += "religion club<br/>");
    "scout" == b.club && (a += "scout club<br/>");"smoke" == b.club && (a += "smoke club<br/>");"sport" == b.club && (a += "sport club<br/>");"theatre" == b.club && (a += "theatre club<br/>");"veterans" == b.club && (a += "veterans club<br/>");"amusement_arcade" == b.leisure && (a += "penny arcade / gambling hall<br/>");"beach_resort" == b.leisure && (a += "beach resort<br/>");"bird_hide" == b.leisure && (a += "bird hide<br/>");"common" == b.leisure && (a += "common<br/>");"club" == b.leisure && (a += "club<br/>");"dance" == b.leisure && (a += "dance<br/>");"dog_park" == b.leisure && (a += "dog_park<br/>");"firepit" == b.leisure && (a += "firepit<br/>");"fishing" == b.leisure && (a += "fishing<br/>");"garden" == b.leisure && (a += "garden<br/>");"golf_course" == b.leisure && (a += "golf course<br/>");"hackerspace" == b.leisure && (a += "hackerspace<br/>");"horse_riding" == b.leisure && (a += "horse riding<br/>");"ice_rink" == b.leisure && (a += "ice rink<br/>");"nature_reserve" == b.leisure && (a += "nature reserve<br/>");"park" == b.leisure && (a += "park<br/>");"miniature_golf" == b.leisure && (a += "miniature golf<br/>");"pitch" == b.leisure && (a += "pitch<br/>");"pitch" == b.leisure && "yes" == b.building && (a += "gym<br/>");"playground" == b.leisure && "yes" == b.building ? a += "playground<br/>" : "playground" == b.leisure && (a += "playground<br/>");"social_club" == b.leisure && (a += "social club<br/>");"spa" == b.leisure && (a += "spa<br/>");"sports_centre" == b.leisure && (a += "sports centre<br/>");"climbing_adventure" == b.sport && (a += "climbing adventure<br/>");"stadium" == b.leisure && (a += "stadium<br/>");"swimming_pool" == b.leisure && (a += "swimming pool<br/>");"track" == b.leisure && (a += "track<br/>");"water_park" == b.leisure && (a += "water park<br/>");"wildlife_hide" == b.leisure && (a += "wildlife hide<br/>");"adult_gaming_centre" == b.leisure && (a += "adult gaming_centre<br/>");"bowling_alley" == b.leisure && "10pin" == b.sport && (a += "10pin bowling_alley<br/>");"bowling_alley" == b.leisure && "9pin" == b.sport && (a += "9pin bowling_alley<br/>");if ("karting" == b.sport || "motor" == b.sport) a += "karting<br/>";if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";if (b["piste:type"]) switch (b["piste:type"]) {case "skitour":
            a += "skitour<br/>";break;case "downhill":
            a += "downhill<br/>";break;case "sled":
            a += "sled<br/>";break;case "nordic":
            a += "nordic<br/>";break;case "hike":
            a += "hike<br/>";break;case "snow_park":
            a += "snow park<br/>";}if (b.sport) switch (b.sport) {case "surfing":
            a += "surfing<br/>";break;case "kitesurfing":
            a += "kitesurfing<br/>";break;case "water_ski":
            a += "water ski<br/>";}if (b.aerialway) switch (b.aerialway) {case "cable_bar":
            a += "cable bar<br/>";break;case "gondola":
            a += "gondola<br/>";break;case "chair_lift":
            a += "chair lift<br/>";
            break;case "mixed_lift":
            a += "mixed lift<br/>";break;case "drag_lift":
            a += "drag lift<br/>";break;case "t-bar":
            a += "t-bar<br/>";break;case "t-bar":
            a += "t-bar<br/>";break;case "platter":
            a += "platter<br/>";break;case "rope_tow":
            a += "rope tow<br/>";break;case "magic_carpet":
            a += "magic carpet<br/>";break;default:
            a += "unknown";}"mosque" == b.building && (a += "mosque<br/>");"synagogue" == b.building && (a += "synagogue<br/>");"temple" == b.building && (a += "temple<br/>");"apartments" == b.building && (a += "apartments<br/>");"farm" == b.building && (a += "farm<br/>");"hotel" == b.building && (a += "hotel<br/>");"house" == b.building && (a += "house<br/>");"detached" == b.building && (a += "detached<br/>");"residential" == b.building && (a += "residential<br/>");if ("domitory" == b.building || "residential plus" == b.building) a += "domitory<br/>";"terrace" == b.building && (a += "terrace<br/>");"houseboat" == b.building && (a += "houseboat<br/>");"bungalow" == b.building && (a += "bungalow<br/>");"static_caravan" == b.building && (a += "static caravan<br/>");"commercial" == b.building && (a += "commercial<br/>");
    "retail" == b.building && (a += "retail<br/>");"warehouse" == b.building && (a += "warehouse<br/>");"bakehouse" == b.building && (a += "bakehouse<br/>");"shrine" == b.building && (a += "shrine<br/>");"civic" == b.building && (a += "civic<br/>");"stadium" == b.building && (a += "stadium<br/>");"train_station" == b.building && (a += "train station<br/>");"university" == b.building && (a += "university<br/>");"public" == b.building && (a += "public<br/>");"bridge" == b.building && (a += "bridge<br/>");"bunker" == b.building && (a += "bunker<br/>");"cabin" == b.building && (a += "cabin<br/>");"conservatory" == b.building && (a += "conservatory<br/>");"construction" == b.building && (a += "construction<br/>");"garage" == b.building && (a += "garage<br/>");"garages" == b.building && (a += "garages<br/>");"greenhouse" == b.building && (a += "greenhouse<br/>");"hangar" == b.building && (a += "hangar<br/>");"hut" == b.building && (a += "hut<br/>");"pavillion" == b.building && (a += "pavillion<br/>");"roof" == b.building && (a += "roof<br/>");"shed" == b.building && (a += "shed<br/>");"transformer_tower" == b.building && (a += "transformer tower<br/>");
    "service" == b.building && (a += "service<br/>");"kiosk" == b.building && (a += "kiosk<br/>");"carport" == b.building && (a += "carport<br/>");"ruins" == b.building && (a += "ruins<br/>");"gambling" == b.amenity && (a += "penny arcade<br/>");"library" == b.amenity && (a += "library<br/>");"fountain" == b.amenity && (a += "fountain<br/>");"attraction" == b.amenity && (a += "attraction<br/>");if ("social_centre" == b.amenity || "club" == b.amenity) a += "social centre<br/>";"townhall" == b.amenity && (a += "townhall<br/>");"bench" == b.amenity && (a += "bench<br/>");
    if ("grave_yard" == b.amenity || "cemetery" == b.landuse) a += "grave yard<br/>";"post_box" == b.amenity && (a += "post box<br/>");"post_office" == b.amenity && (a += "post office<br/>");"telephone" == b.amenity && (a += "telephone<br/>");"atm" == b.amenity && (a += "atm<br/>");"bank" == b.amenity && (a += "bank<br/>");"toilets" == b.amenity && "yes" == b.diaper ? a += "toilets with diaper changing table<br/>" : "toilets" == b.amenity && (a += "toilets<br/>");"school" == b.amenity && "1" == b["isced:level"] ? a += "primary school<br/>" : "school" == b.amenity && "2" == b["isced:level"] ? a += "secondary school<br/>" : "school" == b.amenity && "3" == b["isced:level"] ? a += "secondary schools<br/>" : "school" == b.amenity && (a += "school<br/>");"kindergarten" == b.amenity && (a += "kindergarten<br/>");"internet_cafe" == b.amenity && (a += "internet cafe<br/>");"daycare" == b.amenity && (a += "daycare<br/>");"childcare" == b.amenity && (a += "childcare<br/>");"university" == b.amenity && (a += "university<br/>");"college" == b.amenity && (a += "college<br/>");"shelter" == b.amenity && (a += "shelter<br/>");"bbq" == b.amenity && (a += "bbq<br/>");"nightclub" == b.amenity && (a += "nightclub<br/>");"bicycle_parking" == b.amenity && (a += "bicycle parking<br/>");"bicycle_rental" == b.amenity && (a += "bicycle rental<br/>");"boat_sharing" == b.amenity && (a += "boat sharing<br/>");"car_sharing" == b.amenity && (a += "car sharing<br/>");"cinema" == b.amenity && (a += "cinema<br/>");"swimming_pool" == b.amenity && (a += "swimming pool<br/>");if ("embassy" == b.amenity || "embassy" == b.diplomatic) a += "embassy<br/>";"embassy" == b.amenity && "consulate" == b.diplomatic && (a += "consulate<br/>");"embassy" == b.amenity && "consulate_general" == b.diplomatic && (a += "consulate general<br/>");"embassy" == b.amenity && "honorary_consulate" == b.diplomatic && (a += "honorary consulate<br/>");"embassy" == b.amenity && "permanent_mission" == b.diplomatic && (a += "permanent mission<br/>");"embassy" == b.amenity && "delegation" == b.diplomatic && (a += "delegation<br/>");"embassy" == b.amenity && "high_commission" == b.diplomatic && (a += "high commission<br/>");"Barfusspfad" == b.amenity && (a += "barefoodpath<br/>");"casino" == b.amenity && (a += "casino<br/>");"spa" == b.amenity && (a += "spa<br/>");"stables" == b.amenity && (a += "stables<br/>");"watering_place" == b.amenity && (a += "watering place<br/>");"yes" == b.watering_place && (a += "watering place<br/>");"water_point" == b.amenity && (a += "water point<br/>");"taxi" == b.amenity && (a += "taxi<br/>");"car_wash" == b.amenity && (a += "car wash<br/>");"brothel" == b.amenity && (a += "brothel<br/>");"stripclub" == b.amenity && (a += "stripclub<br/>");"swingerclub" == b.amenity && (a += "swingerclub<br/>");"planetarium" == b.amenity && (a += "planetarium<br/>");"courthouse" == b.amenity && (a += "court house<br/>");"crematorium" == b.amenity && (a += "crematorium<br/>");if ("crypt" == b.amenity || "crypt" == b.building) a += "crypt<br/>";"hunting_stand" == b.amenity && (a += "hunting stand<br/>");"photo_booth" == b.amenity && (a += "photo booth<br/>");"prison" == b.amenity && (a += "prison<br/>");"ranger_station" == b.amenity && (a += "ranger station<br/>");"register_office" == b.amenity && (a += "register office<br/>");"marketplace" == b.amenity && (a += "marketplace<br/>");"solarium" == b.amenity && (a += "solarium<br/>");"sauna" == b.amenity && (a += "sauna<br/>");"shower" == b.amenity && (a += "shower<br/>");if ("waste_disposal" == b.amenity && (a += "waste disposal<br/>", b.waste)) switch (a += "Typ: ", b.waste) {case "trash":
            a += "General<br/>";break;case "oil":
            a += "Oil<br/>";break;case "drugs":
            a += "Pharmaceutical<br/>";break;case "organic":
            a += "Organic<br/>";break;case "plastic":
            a += "Plastic<br/>";break;case "rubble":
            a += "Rubble<br/>";break;case "cigarettes":
            a += "Cigarettes<br/>";break;default:
            a += "General<br/>";}if ("waste_basket" == b.amenity || "dog_excrement" == b.waste) a += "dog waste station<br/>";if ("scout_camp" == b.amenity || "scout_hut" == b.amenity || "scout_hall" == b.amenity) a += "scout camp<br/>";"ferry_terminal" == b.amenity && (a += "ferry terminal<br/>");"bureau_de_change" == b.amenity && (a += "bureau de change<br/>");"youth_club" == b.amenity && (a += "youth club<br/>");"festival_grounds" == b.amenity && (a += "festival grounds<br/>");if ("yes" == b.openfire || "yes" == b.fireplace) a += "fireplace<br/>";if ("vending_machine" == b.amenity) if (b.vending) switch (b.vending) {case "admission_tickets":
            a += "vending machine admission tickets<br/>";
            break;case "animal_feed":
            a += "vending machine animal feed<br/>";break;case "bicycle_tube":
            a += "vending machine bicycle tube<br/>";break;case "books":
            a += "vending machine books<br/>";break;case "candles":
            a += "vending machine candles<br/>";break;case "cigarettes":
            a += "vending machine cigarettes<br/>";break;case "chemist":
            a += "vending machine chemist<br/>";break;case "condoms":
            a += "vending machine condoms<br/>";break;case "drinks":
            a += "vending machine drinks<br/>";break;case "electronics":
            a += "vending machine electronics<br/>";
            break;case "elongated_coin":
            a += "vending machine elongated_coin<br/>";break;case "excrement_bags":
            a += "vending machine excrement_bags<br/>";break;case "feminine_hygiene":
            a += "vending machine feminine_hygiene<br/>";break;case "first_aid":
            a += "vending machine first_aid<br/>";break;case "fishing_tackle":
            a += "vending machine fishing tackle<br/>";break;case "fishing_bait":
            a += "vending machine fishing bait<br/>";break;case "flowers":
            a += "vending machine flowers<br/>";break;case "food":
            a += "vending machine food<br/>";
            break;case "ice_cubes":
            a += "vending machine ice cubes<br/>";break;case "ice_cream":
            a += "vending machine ice cream<br/>";break;case "ink_cartridges":
            a += "vending machine ink cartridges<br/>";break;case "laundry_detergent":
            a += "vending machine laundry detergent<br/>";break;case "public_transport_tickets":
            a += "vending machine public transport tickets<br/>";break;case "newspaper":
            a += "vending machine newspaper<br/>";break;case "parcel_pickup":
            a += "vending machine parcel pickup<br/>";break;case "parcel_mail_in":
            a += "Packege station<br/>";break;case "parking_tickets":
            a += "vending machine parking tickets<br/>";break;case "photos":
            a += "vending machine photos<br/>";break;case "sex_toys":
            a += "vending machine sex_toys<br/>";break;case "SIM_cards":
            a += "vending machine SIM_cards<br/>";break;case "stamps":
            a += "vending machine stamps<br/>";break;case "sweets":
            a += "vending machine sweets<br/>";break;case "syringes":
            a += "vending machine syringes<br/>";break;case "toll":
            a += "vending machine toll<br/>";break;case "toys":
            a += "vending machine toys<br/>";
            break;case "umbrellas":
            a += "vending machine umbrellas<br/>";break;default:
            a += "vending machine<br/>";} else a += "vending machine<br/>";"arts_centre" == b.amenity && (a += "arts centre<br/>");"artwork" == b.amenity && (a += "artwork<br/>");"museum" == b.amenity && (a += "museum<br/>");"theatre" == b.amenity && (a += "theatre<br/>");"cathedral" == b.building && (a += "cathedral<br/>");"church" == b.building && (a += "church<br/>");"chapel" == b.building && (a += "chapel<br/>");"place_of_worship" == b.amenity && (a += "place of worship<br/>");"village" == b.abandoned && (a += "abandoned village<br/>");"theme_park" == b["abandoned:tourism"] && (a += "abandoned theme park<br/>");"prison_camp" == b["abandoned:amenity"] && "concentration_camp" == ["concentration_camp"] && (a += "abandoned concentration camp<br/>");"yes" == b.abandoned && "bunker" == b.military && (a += "abandoned bunker<br/>");"yes" == b.abandoned && "barracks" == b.military && (a += "abandoned barracks<br/>");"yes" == b.abandoned && "airfield" == b.military && (a += "abandoned airfield<br/>");"monastery" == b.historic && (a += "historic monastery<br/>");
    "monastery" == b.amenity && (a += "monastery<br/>");"monastery" == b.building && (a += "monastery<br/>");"manor" == b.historic && (a += "historic manor<br/>");"boundary_stone" == b.historic && (a += "historic boundary stone<br/>");"milestone" == b.historic && (a += "historic milestone<br/>");"monument" == b.historic && (a += "monument<br/>");"palace" == b.historic && (a += "historic palace<br/>");"mine" == b.historic && (a += "historic mine<br/>");"ruins" == b.historic && (a += "ruins<br/>");"harbour" == b.historic_usage && (a += "historic harbour<br/>");
    "rune stone" == b.historic && (a += "rune stone<br/>");"battlefield" == b.historic && (a += "historic battlefield<br/>");"blacksmith" == b.historic && (a += "historic blacksmith<br/>");if ("tree_shrine" == b.historic || "wayside_shrine" == b.historic) a += "shrine<br/>";"city_gate" == b.historic && (a += "historic city gate<br/>");"wayside_cross" == b.historic && (a += "historic wayside cross<br/>");"monument" == b.amenity && (a += "monument<br/>");"memorial" == b.historic && (a += "memorial<br/>");"optical_telegraph" == b.historic && (a += "historic optical telegraph<br/>");
    if ("castle" == b.historic) if (b.castle_type) switch (b.castle_type) {case "defensive":
            a += "defensive castle<br/>";break;case "palace":
            a += "palace<br/>";break;case "stately":
            a += "stately castle<br/>";break;case "manor":
            a += "manor<br/>";break;case "fortress":
            a += "fortress<br/>";break;case "castrum":
            a += "castrum<br/>";break;case "shiro":
            a += "shiro<br/>";break;case "kremlin":
            a += "kremlin<br/>";break;default:
            a += "castle<br/>";} else a += "castle<br/>";"archaeological_site" == b.historic && (a += "archaeological site<br/>");if ("tomb" == b.historic) if (b.tomb) switch (b.tomb) {case "tumulus":
            a += "tumulus<br/>";break;case "rock-cut":
            a += "rock<br/>";break;case "hypogeum":
            a += "hypogeum<br/>";break;case "war_grave":
            a += "war grave<br/>";break;case "mausoleum":
            a += "mausoleum<br/>";break;case "columbarium":
            a += "columbarium<br/>";break;case "crypt":
            a += "crypt<br/>";break;case "pyramid":
            a += "pyramid<br/>";break;case "sarcophagus":
            a += "sarcophagus<br/>";break;case "vault":
            a += "vault<br/>";break;case "tombstone":
            a += "tombstone<br/>";break;default:
            a += "historic tomb<br/>";} else a += "historic tomb<br/>";"accountant" == b.office && (a += "accountant<br/>");"administrative" == b.office && (a += "administrative<br/>");"architect" == b.office && (a += "architect<br/>");"association" == b.office && (a += "association<br/>");"physician" == b.office && (a += "physician<br/>");"camping" == b.office && (a += "camping office<br/>");"company" == b.office && (a += "company<br/>");"educational_institution" == b.office && (a += "educational institution<br/>");"employment_agency" == b.office && (a += "employment agency<br/>");"estate_agent" == b.office && (a += "estate agent<br/>");"forestry" == b.office && (a += "forestry<br/>");"foundation" == b.office && (a += "foundation<br/>");"government" == b.office && (a += "government<br/>");"guide" == b.office && (a += "guide office<br/>");"insurance" == b.office && (a += "insurance<br/>");"it" == b.office && (a += "it office<br/>");"lawyer" == b.office && (a += "lawyer<br/>");"newspaper" == b.office && (a += "newspaper<br/>");"ngo" == b.office && (a += "ngo office<br/>");"notary" == b.office && (a += "notary<br/>");"political_party" == b.office && (a += "political party<br/>");
    "quango" == b.office && (a += "quango office<br/>");"realtor" == b.office && (a += "realtor<br/>");"real_estate_agent" == b.office && (a += "real estate agent<br/>");"register" == b.office && (a += "register<br/>");"religion" == b.office && (a += "religious office<br/>");"research" == b.office && (a += "research office<br/>");"tax" == b.office && (a += "tax office<br/>");"telecommunication" == b.office && (a += "telecommunication office<br/>");"travel_agent" == b.office && (a += "travel agent<br/>");"water_utility" == b.office && (a += "water utility office<br/>");
    "therapist" == b.office && (a += "therapist<br/>");"city" == b.place && (a += "city<br/>");"town" == b.place && (a += "town<br/>");"village" == b.place && (a += "village<br/>");"continent" == b.place && (a += "continent<br/>");"ocean" == b.place && (a += "ocean</br>");"track" == b.highway && (a += "track<br/>");"raceway" == b.highway && (a += "raceway<br/>");"designated" == b.bicycle && (a += "cycle path<br/>");"path" == b.highway && (a += "food path<br/>");"parking" == b.amenity && (a += "parking<br/>");"services" == b.highway && (a += "services<br/>");"rest_area" == b.highway && (a += "rest area<br/>");"turning_circle" == b.highway && (a += "turning circle<br/>");"service" == b.highway && (a += "service road<br/>");"motorway" == b.highway && (a += "motorway<br/>");"motorway_junction" == b.highway && (a += "motorway junction<br/>");"bridleway" == b.highway && (a += "bridleway<br/>");"yes" == b.oneway && (a += "oneway<br/>");"yes" == b.park_ride && (a += "park and ride<br/>");"unknown" == b.park_ride && (a += "park and ride<br/>");"bus" == b.park_ride && (a += "park and ride<br/>");"tram" == b.park_ride && (a += "park and ride<br/>");
    "bus_stop" == b.highway && (a += "bus stop<br/>");"pedestrian" == b.highway && (a += "pedestrian<br/>");"street_lamp" == b.highway && (a += "street lamp<br/>");"traffic_signals" == b.highway && (a += "traffic signals<br/>");"traffic_signals" == b.crossing && (a += "traffic signals<br/>");"speed_camera" == b.highway && (a += "speed camera<br/>");"yes" == b.traffic_calming && (ret += "traffic calming</br>");"bump" == b.traffic_calming && (a += "bump</br>");"chicane" == b.traffic_calming && (a += "chicane</br>");"choker" == b.traffic_calming && (a += "choker</br>");
    "cushion" == b.traffic_calming && (a += "cushion</br>");"hump" == b.traffic_calming && (a += "hump</br>");"island" == b.traffic_calming && (a += "island</br>");"rumble_strip" == b.traffic_calming && (a += "rumble_strip</br>");"table" == b.traffic_calming && (a += "table</br>");"buoy_cardinal" == b["seamark:type"] && (a += "buoy cardinal<br/>");"buoy_lateral" == b["seamark:type"] && (a += "buoy lateral<br/>");"buoy_isolated_danger" == b["seamark:type"] && (a += "buoy isolated_danger<br/>");"perch" == b["seamark:beacon_lateral:shape"] && (a += "perch<br/>");
    "fuel" == b.amenity && "fuel_station" == b["seamark:small_craft_facility:category"] ? a += "fuel station<br/>" : "fuel" == b.amenity && (a += "fuel<br/>");if ("charging_station" == b.amenity) {
        var a = a + "charging station<br/>",
            c = b.voltage;if (b.car) {
            switch (b.car) {case "yes":
                    a += "Car: yes";break;case "no":
                    a += "Car: No";break;default:
                    a += "Cars: unkown";}a += "<br/>";
        } else a += "Cars: unkown<br/>";if (b.bicycle) {
            switch (b.bicycle) {case "yes":
                    a += "E-Bike: yes";break;case "no":
                    a += "E-Bike: no";break;default:
                    a += "E-Bike: unkown";}a += "<br/>";
        } else a += "E-Bike: unkown<br/>";b["socket:schuko"] && (a += "Schuko socket: " + b["socket:schuko"] + "<br/>");b["socket:cee_blue"] && (a += "Cee blue socket " + b["socket:cee_blue"] + "<br/>");b["socket:cee_red_16a"] && (a += "Cee red 16a socket " + b["socket:cee_red_16a"] + "<br/>");b["socket:cee_red_32a"] && (a += "Cee red 32a socket " + b["socket:cee_red_32a"] + "<br/>");b["socket:cee_red_64a"] && (a += "Cee red 64a socket " + b["socket:cee_red_64a"] + "<br/>");b["socket:cee_red_125a"] && (a += "Cee red 125a socket " + b["socket:cee_red_125a"] + "<br/>");
        b["socket:nema_5_15"] && (a += "Nema 5 15 socket " + b["socket:nema_5_15"] + "<br/>");b["socket:nema_5_20"] && (a += "Nema 5 20 socket " + b["socket:nema_5_20"] + "<br/>");b["socket:nema_14_30"] && (a += "Nema 14 30 socket " + b["socket:nema_14_30"] + "<br/>");b["socket:nema_14_50"] && (a += "Nema 14 50 socket " + b["socket:nema_14_50"] + "<br/>");b["socket:bs1363"] && (a += "Bs1363 socket " + b["socket:bs1363"] + "<br/>");b["socket:type1"] && (a += "Type 1 socket " + b["socket:type1"] + "<br/>");b["socket:type1_combo"] && (a += "Type 1 combo socket " + b["socket:schuko"] + "<br/>");b["socket:type2"] && (a += "Type 2 socket " + b["socket:type2"] + "<br/>");b["socket:type2_combo"] && (a += "Type 2 combo socket " + b["socket:type2_combo"] + "<br/>");b["socket:type3"] && (a += "Type 3 socket " + b["socket:type3"] + "<br/>");b["socket:chademo"] && (a += "Chademo socket " + b["socket:chademo"] + "<br/>");b["socket:magne_charge"] && (a += "Magne charge socket " + b["socket:magne_charge"] + "<br/>");b["socket:tesla_standard"] && (a += "Tesla standard socket " + b["socket:tesla_standard"] + "<br/>");b["socket:tesla_supercharge"] && (a += "Tesla supercharge: " + b["socket:tesla_supercharge"] + "<br/>");b["socket:tesla_roadster"] && (a += "Tesla_roadster socket " + b["socket:tesla_roadster"] + "<br/>");a += "<br/>";b.voltage && (a += "Volt: " + c + "<br/>");
    }"yes" == b.tunnel && (a += "tunnel<br/>");if (b.bridge) switch (a += "bridge: ", b.bridge) {case "swing":
            a += "swing";break;case "aqueduct":
            a += "aqueduct";break;case "bascule":
            a += "flap bridge";break;case "boardwalk":
            a += "boardwalk";break;case "cantilever":
            a += "cantilever";break;case "covered":
            a += "covered";break;case "drawbridge":
            a += "drawbridge";break;case "humpback":
            a += "humpback";break;case "lift":
            a += "lift";break;case "low_water_crossing":
            a += "low water crossing";break;case "moveable":
            a += "moveable";break;case "pontoon":
            a += "pontoon";break;case "suspension":
            a += "suspension";break;case "trestle":
            a += "trestle";break;case "viaduct":
            a += "viaduct";}if (b["bridge:movable"]) switch (b["bridge:movable"]) {case "swing":
            a += "swing";break;case "bascule":
            a += "bascule";break;case "drawbridge":
            a += "drawbridge";break;case "lift":
            a += "lift";break;case "submersible":
            a += "submersible";break;case "transporter":
            a += "transporter";break;case "retractable":
            a += "retractable";}if ("nursing_home" == b.amenity || "retirement_home" == b.amenity) a += "nursing home / retirement home<br/>";"social_facility" == b.amenity && (a += "social facility<br/>");if (b.social_facility) {
        "group_home" == b.social_facility && "senior" == b["social_facility:for"] && (a += "senior group home<br/>");"assisted_living" == b.social_facility && (a += "assisted living<br/>");"outreach" == b.social_facility && (a += "outreach<br/>");"workshop" == b.social_facility && (a += "workshop<br/>");if ("ambulatory_care" == b.social_facility || "healthcare" == b.social_facility) a += "ambulatory care<br/>";"shelter" == b.social_facility && "senior" == b["social_facility:for"] && (a += "senior shelter<br/>");"shelter" == b.social_facility && "abused" == b["social_facility:for"] && (a += "abused shelter<br/>");"food_bank" == b.social_facility && (a += "food bank<br/>");"hospice" == b.social_facility && (a += "hospice<br/>");
    }b.brewery && (a += "brand of beer: " + b.brewery + "<br/>");"alcohol" == b.shop && (a += "alcohol shop<br/>");"bakery" == b.shop && (a += "bakery shop<br/>");"beverages" == b.shop && (a += "beverages shop<br/>");"butcher" == b.shop && (a += "butcher shop<br/>");"cheese" == b.shop && (a += "cheese shop<br/>");"chocolate" == b.shop && (a += "chocolate shop<br/>");"coffee" == b.shop && (a += "coffee shop<br/>");"confectionery" == b.shop && (a += "confectionery shop<br/>");"convenience" == b.shop && (a += "convenience shop<br/>");"deli" == b.shop && (a += "deli shop<br/>");"dairy" == b.shop && (a += "dairy shop<br/>");"farm" == b.shop && (a += "farm shop<br/>");
    "greengrocer" == b.shop && (a += "greengrocer shop<br/>");"grocery" == b.shop && (a += "grocery shop<br/>");"organic" == b.shop && (a += "organic shop<br/>");"pasta" == b.shop && (a += "pasta shop<br/>");"seafood" == b.shop && (a += "seafood shop<br/>");"tea" == b.shop && (a += "tea shop<br/>");"wine" == b.shop && (a += "wine shop<br/>");"department_store" == b.shop && (a += "department store<br/>");"general" == b.shop && (a += "general shop<br/>");"kiosk" == b.shop && (a += "kiosk<br/>");"mall" == b.shop && (a += "mall<br/>");"supermarket" == b.shop && (a += "supermarket<br/>");
    "baby_goods" == b.shop && (a += "baby goods shop<br/>");"bag" == b.shop && (a += "bag shop<br/>");"boutique" == b.shop && (a += "boutique<br/>");"clothes" == b.shop && (a += "clothes shop<br/>");"fabric" == b.shop && (a += "fabric shop<br/>");"fashion" == b.shop && (a += "fashion shop<br/>");"jewelry" == b.shop && (a += "jewelry shop<br/>");"leather" == b.shop && (a += "leather shop<br/>");"shoes" == b.shop && (a += "shoes shop<br/>");"variety_store" == b.shop && (a += "variety store<br/>");"chemist" == b.shop && (a += "chemist<br/>");"cosmetics" == b.shop && (a += "cosmetics shop<br/>");
    "drugstore" == b.shop && (a += "drugstore<br/>");"perfumery" == b.shop && (a += "perfumery<br/>");"erotic" == b.shop && (a += "erotic shop<br/>");"hairdresser" == b.shop && (a += "hairdresser<br/>");"hearing_aids" == b.shop && (a += "hearing aids<br/>");"herbalist" == b.shop && (a += "herbalist<br/>");"massage" == b.shop && (a += "massage<br/>");"medical_supply" == b.shop && (a += "medical supply shop<br/>");"optician" == b.shop && (a += "optician<br/>");"tattoo" == b.shop && (a += "tattoo<br/>");"bathroom_furnishing" == b.shop && (a += "bathroom furnishing<br/>");
    "doityourself" == b.shop && (a += "doityourself<br/>");"energy" == b.shop && (a += "energy<br/>");"florist" == b.shop && (a += "florist<br/>");"furnace" == b.shop && (a += "furnace shop<br/>");"garden_centre" == b.shop && (a += "garden centre<br/>");"gas" == b.shop && (a += "gas<br/>");"glaziery" == b.shop && (a += "glaziery<br/>");"hardware" == b.shop && (a += "hardware shop<br/>");"houseware" == b.shop && (a += "houseware shop<br/>");"locksmith" == b.shop && (a += "locksmith<br/>");"paint" == b.shop && (a += "paint shop<br/>");"trade" == b.shop && (a += "trade<br/>");
    "antiques" == b.shop && (a += "antiques shop<br/>");"bed" == b.shop && (a += "bed shop<br/>");"candles" == b.shop && (a += "candles shop<br/>");"carpet" == b.shop && (a += "carpet shop<br/>");"curtain" == b.shop && (a += "curtain shop<br/>");"furniture" == b.shop && (a += "furniture store<br/>");"interior_decoration" == b.shop && (a += "interior decoration company<br/>");"kitchen" == b.shop && (a += "kitchen shop<br/>");"window_blind" == b.shop && (a += "window blind shop<br/>");"computer" == b.shop && (a += "computer shop<br/>");"electronics" == b.shop && (a += "electronics shop<br/>");"hifi" == b.shop && (a += "hifi shop<br/>");"mobile_phone" == b.shop && (a += "mobile phone shop<br/>");"radiotechnics" == b.shop && (a += "radiotechnics shop<br/>");"vacuum_cleaner" == b.shop && (a += "vacuum cleaner shop<br/>");"bicycle" == b.shop && (a += "bicycle shop<br/>");"car" == b.shop && (a += "car shop<br/>");"car repair" == b.shop && (a += "car repair<br/>");"car_parts" == b.shop && (a += "car parts shop<br/>");if ("dive" == b.shop || "scuba_diving" == b.shop) a += "scuba diving shop<br/>";"fishing" == b.shop && (a += "fishing shop<br/>");
    "free_flying" == b.shop && (a += "free flying shop<br/>");"hunting" == b.shop && (a += "hunting shop<br/>");"motorcycle" == b.shop && (a += "motorcycle shop<br/>");"outdoor" == b.shop && (a += "outdoor shop<br/>");"sports" == b.shop && (a += "sports shop<br/>");"tyres" == b.shop && (a += "tyres<br/>");"water_sports" == b.shop && (a += "water sports shop<br/>");"art" == b.shop && (a += "art<br/>");"craft" == b.shop && (a += "craft<br/>");"frame" == b.shop && (a += "frame shop<br/>");"music" == b.shop && (a += "music shop<br/>");"music_instrument" == b.shop && (a += "music instruments shop<br/>");
    "photo" == b.shop && (a += "photo shop<br/>");"video" == b.shop && (a += "video<br/>");"video_games" == b.shop && (a += "video games<br/>");"anime" == b.shop && (a += "anime<br/>");"books" == b.shop && (a += "books shop<br/>");"gift" == b.shop && (a += "gift shop<br/>");"newsagent" == b.shop && (a += "newsagent<br/>");"stationery" == b.shop && (a += "stationery<br/>");"ticket" == b.shop && (a += "ticket shop<br/>");"copyshop" == b.shop && (a += "copyshop<br/>");"funeral_directors" == b.shop && (a += "funeral directors<br/>");"laundry" == b.shop && (a += "laundry<br/>");
    "dry_cleaning" == b.shop && (a += "dry cleaning<br/>");"money_lender" == b.shop && (a += "money lender<br/>");"pawnbroker" == b.shop && (a += "pawnbroker<br/>");"pet" == b.shop && (a += "pet shop<br/>");"pyrotechnics" == b.shop && (a += "pyrotechnics shop<br/>");"religion" == b.shop && (a += "religion<br/>");"beauty" == b.shop && (a += "beauty<br/>");"solarium" == b.shop && (a += "solarium<br/>");"tobacco" == b.shop && (a += "tobacco shop<br/>");"toys" == b.shop && (a += "toys shop<br/>");"travel_agency" == b.shop && (a += "travel agency<br/>");"market_hall" == b.shop && (a += "market hall<br/>");"vacant" == b.shop && (a += "vacant<br/>");"weapons" == b.shop && (a += "weapons shop<br/>");"lottery" == b.gambling && (a += "lottery<br/>");"fish" == b.pet && (a += "fishkeeping<br/>");"agriucultural_engines" == b.craft && (a += "agriucultural engines<br/>");"basket_maker" == b.craft && (a += "basket maker<br/>");"beekeeper" == b.craft && (a += "beekeeper<br/>");"blacksmith" == b.craft && (a += "blacksmith<br/>");"brewery" == b.craft && (a += "brewery<br/>");"yes" == b.microbrewery && (a += "micro-brewery<br/>");"boatbuilder" == b.craft && (a += "boatbuilder<br/>");"bookbinder" == b.craft && (a += "bookbinder<br/>");"builder" == b.craft && (a += "housebuilding<br/>");"carpenter" == b.craft && (a += "carpenter, woodworker, joiner<br/>");"carpet_layer" == b.craft && (a += "carpet layer<br/>");"caterer" == b.craft && (a += "caterer<br/>");"clockmaker" == b.craft && (a += "clockmaker<br/>");"confectionery" == b.craft && (a += "confectionery<br/>");"dressmaker" == b.craft && (a += "dressmaker<br/>");"electrician" == b.craft && (a += "electrician<br/>");"gardener" == b.craft && (a += "gardener, landscaper<br/>");
    "glaziery" == b.craft && (a += "glaziery<br/>");"handicraft" == b.craft && (a += "handicraft<br/>");"hvac" == b.craft && (a += "heating, ventilation and air-conditioning technology (HVAC)<br/>");"insulation" == b.craft && (a += "thermal insulation<br/>");"jeweller" == b.craft && (a += "jeweller, gold-/silversmiths<br/>");"key_cutter" == b.craft && (a += "key cutter<br/>");"locksmith" == b.craft && (a += "locksmith<br/>");"metal_construction" == b.craft && (a += "metalworker<br/>");"optician" == b.craft && (a += "optician<br/>");"painter" == b.craft && (a += "painter<br/>");"parquet_layer" == b.craft && (a += "parquet layer<br/>");"photographer" == b.craft && (a += "photographer<br/>");"photographic_laboratory" == b.craft && (a += "photographic laboratory<br/>");"plasterer" == b.craft && (a += "plasterer<br/>");"plumber" == b.craft && (a += "plumber<br/>");"pottery" == b.craft && (a += "pottery<br/>");"rigger" == b.craft && (a += "ship rigger<br/>");"roofer" == b.craft && (a += "roofer<br/>");"saddler" == b.craft && (a += "saddler<br/>");"sailmaker" == b.craft && (a += "sailmaker<br/>");"sawmill" == b.craft && (a += "sawmill<br/>");"scaffolder" == b.craft && (a += "scaffolder<br/>");"sculptor" == b.craft && (a += "sculptor<br/>");"shoemaker" == b.craft && (a += "shoemaker<br/>");"stand_builder" == b.craft && (a += "exhibition stand builder<br/>");"stonemason" == b.craft && (a += "stonemason<br/>");"sun_protection" == b.craft && (a += "constructor for sun protection, venetian blind, shutter<br/>");"sweep" == b.craft && (a += "chimney sweep<br/>");"tailor" == b.craft && (a += "tailor<br/>");"tiler" == b.craft && (a += "tiler<br/>");"tinsmith" == b.craft && (a += "tinsmith, metalworker<br/>");
    "upholsterer" == b.craft && (a += "upholsterer<br/>");"watchmaker" == b.craft && (a += "watchmaker<br/>");"window_construction" == b.craft && (a += "window constructor<br/>");"machines" == b.rental && (a += "rental park for machines<br/>");"car_rental" == b.amenity && (a += "car rental company<br/>");"allotments" == b.landuse && (a += "allotment garden<br/>");"basin" == b.landuse && (a += "holding reservoir<br/>");"brownfield" == b.landuse && (a += "brownfield<br/>");"commercial" == b.landuse && (a += "commercial area<br/>");"construction" == b.landuse && (a += "construction area<br/>");"farmland" == b.landuse && (a += "farmland<br/>");"farmyard" == b.landuse && (a += "farmyard<br/>");"forest" == b.landuse && (a += "forest<br/>");"garages" == b.landuse && (a += "garages<br/>");"grass" == b.landuse && (a += "grass<br/>");"greenfield" == b.landuse && (a += "greenfield<br/>");"greenhouse_horticulture" == b.landuse && (a += "greenhouse horticulture<br/>");"industrial" == b.landuse && (a += "industry area<br/>");"landfill" == b.landuse && (a += "landfill<br/>");"meadow" == b.landuse && (a += "meadow<br/>");"orchard" == b.landuse && (a += "orchard<br/>");"plant_nursery" == b.landuse && (a += "plant nursery<br/>");"quarry" == b.landuse && (a += "quarry<br/>");"railway" == b.landuse && (a += "railway<br/>");"recreation_ground" == b.landuse && (a += "recreation ground<br/>");"reservoir" == b.landuse && (a += "reservoir<br/>");"residential" == b.landuse && (a += "residential<br/>");"retail" == b.landuse && (a += "retrail<br/>");"salt_pond" == b.landuse && (a += "salt pond<br/>");"village_green" == b.landuse && (a += "village green<br/>");"vineyard" == b.landuse && (a += "vineyard<br/>");
    "pond" == b.landuse && (a += "pond<br/>");"salt_pond" == b.landuse && (a += "salt pond<br/>");"animal_keeping" == b.landuse && (a += "animal keeping<br/>");"yes" == b.entrance && (a += "entrance<br/>");"main" == b.entrance && (a += "main-entrance<br/>");"service" == b.entrance && (a += "rear exit for staffing and suppliers<br/>");"exit" == b.entrance && (a += "exit<br/>");"emergency" == b.entrance && (a += "emergency<br/>");"bay" == b.natural && (a += "bay<br/>");"beach" == b.natural && (a += "beach<br/>");"wood" == b.natural && (a += "wood<br/>");"glacier" == b.natural && (a += "glacier<br/>");"cave_entrance" == b.natural && (a += "cave entrance<br/>");"spring" == b.natural && (a += "spring<br/>");"waterfall" == b.natural && (a += "waterfall<br/>");"scrub" == b.natural && (a += "scrub<br/>");"grassland" == b.natural && (a += "grassland<br/>");"wetland" == b.natural && (a += "wetland<br/>");"tree" == b.natural && (a += "tree");"peak" == b.natural && "yes" == b["summit:cross"] && (a += "cross on the summit of a mountain<br/>");"tree_row" == b.natural && (a += "tree row, alley of trees<br/>");"heath" == b.natural && (a += "heath<br/>");
    "moor" == b.natural && (a += "moor<br/>");"grassland" == b.natural && (a += "grassland<br/>");"fell" == b.natural && (a += "grasland above the tree land<br/>");"bare_rock" == b.natural && (a += "bare rock<br/>");"scree" == b.natural && (a += "scree<br/>");"volcano" == b.natural && (a += "volcano<br/>");"valley" == b.natural && (a += "valley<br/>");"stone" == b.natural && (a += "stone<br/>");"sea" == b.natural && (a += "sea<br/>");"national_park" == b.boundary && (a += "national park<br/>");"protected_area" == b.boundary && (a += "protected area<br/>");"yes" == b.mountain_pass && (a += "mountain pass<br/>");"waterfall" == b.waterway && (a += "waterfall<br/>");"canal" == b.waterway && (a += "canal<br/>");"canal" == b.water && (a += "canal<br/>");"river" == b.waterway && (a += "river<br/>");"river" == b.water && (a += "river<br/>");"riverbank" == b.waterway && (a += "river<br/>");"ditch" == b.waterway && (a += "ditch<br/>");"stream" == b.waterway && (a += "stream<br/>");"ferry" == b.route && (a += "ferry<br/>");"turning_point" == b.waterway && (a += "turning point<br/>");if ("lake" == b.water || "water" == b.natural) a += "lake<br/>";"cove" == b.water && (a += "cove<br/>");"lagoon" == b.water && (a += "lagoon<br/>");"pond" == b.water && (a += "pond<br/>");"reservoir" == b.water && (a += "waterreservoir<br/>");"oxbow" == b.water && (a += "oxbow lake<br/>");"lock" == b.water && (a += "lock chamber<br/>");"moat" == b.water && (a += "castle moat<br/>");"wastewater" == b.water && (a += "wastewater treatment plant<br/>");"guest" == b.mooring && "pier" == b.man_made || "visitor_berth" == b["seamark:small_craft_facility:category"] ? a += "gastrointestinal<br/>" : "pier" == b.man_made && (a += "pier<br/>");"boatyard" == b.waterway && (a += "boatyard<br/>");"mooring" == b["seamark:type"] && "dolphin" == b["seamark:mooring:category"] && (a += "dolphin<br/>");"foot" == b.route && (a += "footpath<br/>");"hiking" == b.route && (a += "hiking trail<br/>");if ("yes" == b.hiking && "information" == b.tourism) a += "direction board<br/>";else if ("information" == b.tourism && "information" == b.tourism) if (b.information) switch (b.information) {case "board":
            a += "direction board<br/>";break;case "map":
            a += "direction board with a map<br/>";break;case "office":
            a += "tourist information office<br/>";
            break;case "terminal":
            a += "tourist information terminal<br/>";break;case "audioguide":
            a += "audioguide<br/>";break;case "guidepost":
            a += "guidepost<br/>";break;case "tactile_map":
            a += "tactile map<br/>";break;case "tactile_model":
            a += "tactile model<br/>";break;case "route_marker":
            a += "route marker<br/>";break;default:
            a += "direction board<br/>";} else a += "direction board<br/>";"bicycle" == b.route && (a += "cycle track<br/>");"mtb" == b.route && (a += "mountain bike route<br/>");"horse" == b.route && (a += "bridleway<br/>");"coastline" == b.natural && (a += "coastline<br/>");"cliff" == b.natural && (a += "cliff<br/>");"dam" == b.waterway && (a += "dam<br/>");"weir" == b.waterway && (a += "weir<br/>");"lock_gate" == b.waterway && (a += "lock gate<br/>");"yes" == b.lock && (a += "lock<br/>");"sluice_gate" == b.waterway && (a += "sluice gate<br/>");"pumping_station" == b.man_made && (a += "pumping station<br/>");"groyne" == b.man_made && (a += "groyne<br/>");"dyke" == b.man_made && (a += "dyke<br/>");"levee" == b.man_made && (a += "levee<br/>");"watermill" == b.man_made && (a += "watermill<br/>");"airfield" == b.military && (a += "military airfield<br/>");"naval_base" == b.military && (a += "naval base<br/>");"range" == b.military && (a += "military range<br/>");"military" == b.landuse && (a += "military land use<br/>");"training_area" == b.military && (a += "military training area<br/>");"exclusion_zone" == b.military && (a += "military exclusion zone<br/>");"danger_area" == b.military && (a += "military danger area<br/>");"barracks" == b.military && (a += "barracks<br/>");"nuclear_explosion_site" == b.military && (a += "military nuclear explosion site<br/>");
    "yes" == b.construction ? a += "construction<br/>" : "construction" == b.highway && (a += "construction<br/>");"petroleum_well" == b.man_made && (a += "petroleum well<br/>");"storage_tank" == b.man_made && (a += "storage tank<br/>");"wastewater_plant" == b.man_made && (a += "wastewater plant<br/>");"silo" == b.man_made && (a += "silo<br/>");"water_tower" == b.man_made && (a += "water tower<br/>");"windmill" == b.man_made && (a += "windmill<br/>");"monitoring_station" == b.man_made && (a += "monitoring station");"crane" == b.man_made && (a += "crane");"lighthouse" == b.man_made && (a += "lighthouse");"beacon" == b.man_made && (a += "beacon");"breakwater" == b.man_made && (a += "breakwater");"lamp" == b.man_made && "street_lamp" == b["lamp:type"] && (a += "street lamp<br/>");"lantern" == b.light_source && (a += "street lamp");"floodlight" == b.light_source && (a += "floodlight<br/>");"signal_lamp" == b.light_source && (a += "signal lamp<br/>");"aviation" == b.light_source && (a += "aviation<br/>");"warning" == b.light_source && (a += "warning<br/>");if (b.light_source && b["light:method"]) switch (a += "Light Typ: ", b["light:method"]) {case "gas":
            a += "Gas";break;case "electric":
            a += "electric";break;case "incandescent":
            a += "incandescent";break;case "halogen":
            a += "halogen";break;case "discharge":
            a += "discharge";break;case "metal-halide":
            a += "metal-halide";break;case "neon":
            a += "neon";break;case "sodium":
            a += "Natriumdampflampe";break;case "high_pressure_sodium":
            a += "high pressure sodium";break;case "low_pressure_sodium":
            a += "low pressure sodium";break;case "fluorescent":
            a += "Fluorescent";break;case "mercury":
            a += "Mercury";break;case "LED":
            a += "LED";break;case "laser":
            a += "Laser";break;case "arc":
            a += "Arc";break;default:
            a += "Unkown";}"drinking_water" == b.amenity && (a += "drinking water<br/>");"yes" == b.drinking_water && (a += "drinking water<br/>");"works" == b.man_made ? a += "industrial building<br/>" : "industrial" == b.building ? a += "industrial building<br/>" : "industrial" == b.landuse ? a += "industrial area<br/>" : "industrial" == b.abutters ? a += "industrial area<br/>" : "commercial" == b.abutters && (a += "commercial<br/>");if (b["generator:source"]) switch (a += "installation: ", b["generator:source"]) {case "biomass":
            a += "biomass";break;case "biofuel":
            a += "biofuel";break;case "biogas":
            a += "biogas";break;case "coal":
            a += "coal";break;case "oil":
            a += "oil";break;case "waste":
            a += "waste";break;case "wind":
            a += "wind";break;case "solar":
            a += "solar";break;case "hydro":
            a += "hydro";break;case "tidal":
            a += "tidal";break;case "wave":
            a += "wave";break;case "geothermal":
            a += "geothermal";break;case "osmotic":
            a += "osmotic";break;case "nuclear":
            a += "nuclear";break;default:
            a += "unknown<br/>";}"photovoltaic" == b.power_source && (a += "photovoltaic");"line" == b.power && (a += "power line<br/>");"cable" == b.power && (a += "cable<br/>");"cable_distribution_cabinet" == b.power && (a += "cable distribution cabinet<br/>");"plant" == b.power && (a += "plant<br/>");"station" == b.power && (a += "station<br/>");"sub_station" == b.power && (a += "substation<br/>");"compensator" == b.power && (a += "compensator<br/>");"converter" == b.power && (a += "converter<br/>");"generator" == b.power && (a += "generator<br/>");"heliostat" == b.power && (a += "heliostat<br/>");"insulator" == b.power && (a += "insulator<br/>");"busbar" == b.line && (a += "busbar<br/>");"bay" == b.line && (a += "bay<br/>");"minor_line" == b.power && (a += "minor line<br/>");"pole" == b.power && (a += "pole<br/>");"portal" == b.power && (a += "portal<br/>");"catenary_mast" == b.power && (a += "catenary mast<br/>");"substation" == b.power && (a += "substation<br/>");"switch" == b.power && (a += "switch<br/>");"terminal" == b.power && (a += "terminal<br/>");"tower" == b.power && (a += "tower<br/>");"transformer" == b.power && (a += "transformer<br/>");if (b.barrier) switch (b.barrier) {case "bollard":
            a += "bollard<br/>";
            break;case "cycle_barrier":
            a += "cycle barrier<br/>";break;case "gate":
            a += "gate<br/>";break;case "chain":
            a += "chain<br/>";break;case "lift_gate":
            a += "lift gate<br/>";break;case "wall":
            a += "wall<br/>";break;case "toll_booth":
            a += "toll booth<br/>";break;case "fence":
            switch (b.fence_type) {case "barbed_wire":
                    a += "barbed wire<br/>";break;case "wood":
                    a += "wood<br/>";break;case "chain_link":
                    a += "chain link<br/>";break;case "electric":
                    a += "electric<br/>";break;case "railing":
                    a += "railing<br/>";break;case "wire":
                    a += "wire<br/>";
                    break;case "metal":
                    a += "metal<br/>";break;case "pole":
                    a += "pole<br/>";break;default:
                    a += "fence<br/>";}break;case "block":
            a += "block<br/>";break;case "ditch":
            a += "ditch<br/>";break;case "border_control":
            a += "border control<br/>";break;case "hedge":
            a += "hedge<br/>";break;case "retaining_wall":
            a += "retaining wall<br/>";break;case "cattle_grid":
            a += "cattle grid<br/>";break;case "horse_stile":
            a += "horse stile<br/>";break;default:
            a += "unknown<br/>";}"noise_barrier" == b.wall && (a += "noise barrier<br/>");"retaining_wall" == b.designation && (a += "noise barrier<br/>");"noise_barrier" == b.designation && (a += "noise barrier<br/>");"surveillance" == b.man_made && (a += "surveillance<br/>");if (b.aeroway) switch (a += "airport: ", b.aeroway) {case "aerodrome":
            a += "airport";break;case "apron":
            a += "apron";break;case "gate":
            a += "gate";break;case "helipad":
            a += "helipad";break;case "hangar":
            a += "hangar";break;case "runway":
            a += "runway";break;case "taxiway":
            a += "taxiway";break;case "terminal":
            a += "terminal";break;default:
            a += "unknown<br/>";}"stop" == b.railway && (a += "railway stop<br/>");"crossing" == b.railway && (a += "crossing<br/>");"level_crossing" == b.railway && (a += "lvel crossing<br/>");"station" == b.railway && (a += "station<br/>");"bus_station" == b.amenity && (a += "bus station<br/>");"bus_station" == !b.amenity && "station" == b.public_transport && "yes" == b.bus && (a += "bus station<br/>");"rail" == b.railway && (a += "railway<br/>", "contact_line" == b.electrified && (a += "overhead contact line<br/>"));"tram" == b.railway && (a += "tram<br/>");if ("slipway" == b["seamark:small_craft_facility:category"] || "slipway" == b.harbour || "slipway" == b.leisure) a += "slipway<br/>";if ("harbour" == b["seamark:type"]) if (b["seamark:harbour:category"]) switch (b["seamark:harbour:category"]) {case "ferry":
            a += "ferry<br/>";break;case "container":
            a += "container<br/>";break;case "marina":
            "marina" != b.leisure && (a += "marina<br/>");break;case "navel_base":
            a += "navel base<br/>";break;case "tanker":
            a += "tanker<br/>";break;case "passenger":
            a += "passenger<br/>";break;case "bulk":
            a += "bulk<br/>";break;default:
            a += "habour<br/>";} else a += "habour<br/>";
    "marina" == b.leisure && (a += "marina<br/>");"wreck" == b.historic && (a += "wreck<br/>");"animal_shelter" == b.amenity && (a += "animal shelter<br/>");"shelter" == b.animal && (a += "shelter<br/>");"horse_walker" == b.animal && (a += "horse walker<br/>");"yes" == b.animal_shelter && (a += "animal shelter<br/>");"dog" == b.animal_shelter && (a += "animal shelter<br/>");"cat" == b.animal_shelter && (a += "animal shelter<br/>");"animal_boarding" == b.amenity && (a += "animal boarding<br/>");"yes" == b.animal_boarding && (a += "animal boarding<br/>");"dog" == b.animal_boarding && (a += "animal boarding<br/>");"horse" == b.animal_boarding && (a += "animal boarding<br/>");"cat" == b.animal_boarding && (a += "animal boarding<br/>");"dog;cat" == b.animal_boarding && (a += "animal boarding<br/>");"cat;dog" == b.animal_boarding && (a += "animal boarding<br/>");if ("school" == b.animal || "sport" == b.animal || "animal_training" == b.amenity) a += "animal training<br/>";"swimming" == b.animal && (a += "swimming for dogs<br/>");if ("feeding_place" == b.amenity || "animal_feeding" == b.man_made || "animal_feeding" == b.amenity) a += "animal feeding<br/>";if ("wildlife_feeding" == b.amenity || "deer_feeding" == b.amenity || "game_feeding" == b.amenity) a += "wildlife feeding<br/>";if ("cratch" == b.amenity || "cratch" == b.man_made || "feeding_rack" == b.amenity) a += "feeding rack<br/>";"manger" == b.amenity && (a += "manger<br/>");"birdhouse" == b.man_made && (a += "birdhouse<br/>");"stork" == b.birds_nest && (a += "storck<br/>");"nest_box" == b.amenity && (a += "nest box<br/>");"wellness" == b.animal && (a += "dog parlour<br/>");"cemetery" == b.animal && (a += "small animal cemetery<br/>");
    if ("stable" == b.building || "stable" == b["building:use"]) a += "stable<br/>";"cowshed" == b.building && (a += "cowshed<br/>");"sty" == b.building && (a += "sty<br/>");"barn" == b.building && (a += "barn<br/>");"farm_auxiliary" == b.building && (a += "farm auxiliary<br/>");if (b["river:waterway_distance"] || "milestone" == b.waterway) a += "milestone of waterway distance<br/>";"milestone" == b.highway && (a += "milestone<br/>");"market" == b["xmas:feature"] && (a += "Christmas fair<br/>");"tree" == b["xmas:feature"] && (a += "sale of Chrismas trees<br/>");
    "event" == b["xmas:feature"] && (a += "Chrismas event<br/>");"pyramid" == b["xmas:feature"] && (a += "Chrismas pyramid<br/>");return '<div class="c4g_popup_header_featuretype">' + a + "<br/> </div>";
}
var fnContent = function fnContent(b) {
    var a;a = "" + fnContentGeneralInformations(b);a += fnContentHealthcare(b);a += fnContentAerodrome(b);a += fnContentCuisine(b);a += fnContentShipping(b);a += fnContentHydrants(b);a += fnContentSports(b);a += fnContentStreetsTraffic(b);a += fnContentInformationCity(b);a += fnContentEmergency(b);a += fnContentStorage(b);a += fnContentAmenity(b);a += fnContentTourism(b);a += fnContentRoute(b);a += fnContentPetrol(b);a += fnContentBarriers(b);a += fnContentLanduse(b);a += fnContentNatural(b);a += fnKlosterAdditional(b);
    a += fnSicherheitAdditional(b);a += fnAdditionalBuildingInfos(b);a += fnKraftwerkInfo(b);a += fnMessstation(b);a += fnWertstoffinfo(b);(a += fnContentProtectedArea(b)) && (a = "<br/>" + a);return '<div class="c4g_popup_content">' + a + "</div>";
},
    fnContentAerodrome = function fnContentAerodrome(b) {
    var a = "";b.aerodrome && ("international" == b.aerodrome && (a += "type of airport: international<br/>"), "regional" == b.aerodrome && (a += "type of airport: regional<br/>"), "gliding" == b.aerodrome && (a += "type of airport: gliding<br/>"), "private" == b.aerodrome && (a += "type of airport: private<br/>"));b.iata && (a += "IATA-Code: " + b.iata + "<br/>");b.icao && (a += "ICAO-Code: " + b.icao + "<br/>");return a;
},
    fnContentNatural = function fnContentNatural(b) {
    var a = "";if (b.forest || b.wood) {
        if ("broadleaved" == b.leaf_type || "deciduous" == b.wood) a += "broadleaved<br/>";if ("needleleaved" == b.leaf_type || "coniferous" == b.wood) a += "needleleaved<br/>";if ("mixed" == b.leaf_type || "mixed" == b.wood) a += "mixed<br/>";"leafless" == b.leaf_type && (a += "leafless<br/>");"evergreen" == b.wood && (a += "evergreen<br/>");"palm" == b.wood && (a += "palm<br/>");"nipa_palm" == b.wood && (a += "nipa palm<br/>");"eucalypt" == b.wood && (a += "eucalypt<br/>");if ("filao" == b.wood || "casuarina" == b.wood) a += "casuarina<br/>";
    }if ("tree" == b.natural && (!b["genus:de"] && !b["species:de"] && b.leaf_type && (a = "broadleaved" == b.leaf_type || "deciduous" == b.leaf_type || "broadleafed" == b.leaf_type ? a + "broad-leaved<br/>" : a + "conifer<br/>"), b.genus && (a += b.genus + "<br/>"), b["genus:de"] && (a += b["genus:de"] + "<br/>"), b.species && (a += b.species + "<br/>"), b["species:de"] && (a += b["species:de"] + "<br/>"), "landmark" == b.denotation && (a += "landmark<br/>"), "natural_monument" == b.denotation || "yes" == b.monument)) a += "natural monument<br/>";"manger" == b["feeding:type"] && (a += "manger:rack for fodder<br/>");"automated" == b["feeding:type"] && (a += "automated<br/>");if (b["feeding:for"]) switch (b["feeding:for"]) {case "sheep":
            a += "animal: sheep<br/>";break;case "horse":
            a += "animal: horse<br/>";break;case "cow":
            a += "animal: cow<br/>";break;case "rabbit":
            a += "animal: rabbit<br/>";break;case "bunny":
            a += "animal: bunny<br/>";break;
        case "cat":
            a += "animal: cat </br>";break;case "swan":
            a += "animal: swan </br>";break;case "guinea pig":
            a += "animal: guinea pig </br>";break;case "donkey":
            a += "animal: donkey </br>";break;case "squirrel":
            a += "animal: squirrel </br>";break;case "pig":
            a += "animal: pig </br>";break;case "deer":
            a += "animal: deer </br>";break;case "guinea pig":
            a += "animal: guinea pig </br>";break;case "monkey":
            a += "animal: monkey </br>";break;case "camel":
            a += "animal: camel </br>";break;case "goat":
            a += "animal: goat </br>";break;case "hamster":
            a += "animal: hamster </br>";break;case "alpaca":
            a += "animal: alpaca </br>";break;default:
            a += "animal: unknown<br/>";}if (b["feeding:fodder"]) switch (b["feeding:fodder"]) {case "hay":
            a += "feed with: hay</br>";break;case "grain":
            a += "feed with: grain</br>";break;case "corn":
            a += "feed with: corn</*br>";break;default:
            a += "feed with: unknown</br>";}"volcano" == b.natural && "active" == b.status && (a += "active volcano<br/>");"volcano" == b.natural && "dormant" == b.status && (a += "dormant volcano<br/>");"volcano" == b.natural && "extinct" == b.status && (a += "extinct volcano<br/>");"volcano" == b.natural && "stratovolcano" == b.type && (a += "type of volcanism:stratovolcano<br/>");"volcano" == b.natural && "shield" == b.type && (a += "type of volcanism:shield<br/>");"volcano" == b.natural && "scoria" == b.type && (a += "type of volcanism:scoria<br/>");return a;
},
    fnContentProtectedArea = function fnContentProtectedArea(b) {
    var a = "",
        c = "";"protected_area" == b.boundary && (b.protect_class && (c = b.protect_class), b.protect_id && (c = b.protect_id), "1" == c && (a = "description: Strict Nature Reserve, Wilderness Area<br/>"), "2" == c && (a = "description: National Park<br/>"), "3" == c && (a = "description: Natural Monument or Feature<br/>"), "4" == c && (a = "description: Habitat/Species Management Area<br/>"), "5" == c && (a = "description: Protected Landscape/ Seascape<br/>"), "6" == c && (a = "description: Protected area with sustainable use of natural resources<br/>"), "7" == c && (a = "description: nature-feature area<br/>"), "97" == c && (a = "description: protected by continental agreements<br/>"), "98" == c && (a = "description: protected by interstate- or international conventions<br/>"), "99" == c && (a = "other continental or international national protected areas <br/>"), "21" == c && (a = "description: Community life: religious, sacred areas, associative locations, recreation<br/>"), "22" == c && (a = "description: Cultural assets (cultural assets and - efforts, districts historical heritage, monument conservation)<br/>"), "23" == c && (a = "description: Protection in favor of economics<br/>"), "24" == c && (a = "description: Political protection<br/>"), "25" == c && (a = "description: Military areas (military refuges, test area)<br/>"), "26" == c && (a = "description: Historic: for colonial-stuff and protectorates.<br/>"), "29" == c && (a = "description: other social protected areas<br/>"), "11" == c && (a = "description: soil: crop yield, erosion protection, ...<br/>"), "12" == c && (a = "description: water: water protection area, fresh water, drinking water, springs, ...<br/>"), "13" == c && (a = 'description: climate and -air: gasper supply/cold air, ...for emission-, immission control in OSM existent, see "Low Emission Zone" (LEZ)<br/>'), "14" == c && (a = "description: species: no fishing, protected for fishery, protected for hunting, plants, ...<br/>"), "15" == c && (a = "description: location condition: floodwater retention area, protection forest, grazing land, ...<br/>"), "16" == c && (a = 'description: longtime hazard area: contamination, earth-moving area, "problem sites" ...<br/>'), "19" == c && (a = "description: other national resources protected areas<br/>"));return a;
},
    fnContentLanduse = function fnContentLanduse(b) {
    var a = "";"quarry" == b.landuse && b.resource && (a += "Resource: " + b.resource + "<br/>");"open_stable" == b["animal_keeping:type"] && (a += "open stable<br/>");"field_shelter" == b["animal_keeping:type"] && (a += "field shelter<br/>");"paddock" == b["animal_keeping:type"] && (a += "paddock<br/>");b.animal_keeping && (a += "animals: horses<br/>");return a;
},
    fnMessstation = function fnMessstation(b) {
    var a = "";"yes" == b["monitoring:water_level"] && (a += "water level<br/>");"yes" == b["monitoring:seismic_activity"] && (a += "seismic activity<br/>");"yes" == b["monitoring:tide_gauge"] && (a += "tide gauge<br/>");"yes" == b["monitoring:weather"] && (a += "weather<br/>");"yes" == b["monitoring:air_quality"] && (a += "air quality<br/>");return a;
},
    fnContentRoute = function fnContentRoute(b) {
    var a = "";b.route && ("yes" == b.roundtrip && (a += "roundtrip<br/>"), b.length && (a += "length: " + b.length + "<br/>"), b.distance && (a += "distance: " + b.distance + "<br/>"), b.symbol && (a += "symbol: " + b.symbol + "<br/>"));return a;
},
    fnContentPetrol = function fnContentPetrol(b) {
    var a = "";"fuel" == b.amenity && ("yes" == b["fuel:biodiesel"] && (a += "biodiesel<br/>"), "yes" == b["fuel:e85"] && (a += "e85<br/>"), "yes" == b["fuel:e10"] && (a += "e10<br/>"), "yes" == b["fuel:lpg"] && (a += "lpg<br/>"), "yes" == b["fuel:cng"] && (a += "cng<br/>"), "diesel" == b.fuel && (a += "diesel<br/>"), "lpg" == b.fuel && (a += "lpg<br/>"), "yes" == b["fuel:octane_95"] && (a += "octane 95<br/>"), "yes" == b["fuel:octane_98"] && (a += "octane 98<br/>"), "yes" == b["fuel:octane_100"] && (a += "octane 100<br/>"), "yes" == b["fuel:octane_102"] && (a += "octane 102<br/>"), "yes" == b["fuel:diesel"] && (a += "diesel<br/>"), "yes" == b["fuel:electricity"] && (a += "charging station / loading station<br/>"));return a;
},
    fnContentHistoric = function fnContentHistoric(b) {
    var a = "";if ("archaeological_site" == b.historic && b.site_type) switch (b.site_type) {case "megalith":
            a += "megalith<br/>";break;case "bigstone":
            a += "bigstone<br/>";break;case "tumulus":
            a += "tumulus<br/>";break;case "fortification":
            a += "fortification<br/>";break;default:
            a += "unknown<br/>";}return a;
},
    fnContentBarriers = function fnContentBarriers(b, a) {
    var c = "";if ("wall" == b.barrier || "bollard" == b.barrier) b.material && (c += "material: " + translate(b.material) + "<br/>");return c;
},
    fnContentTourism = function fnContentTourism(b) {
    var a = "";if ("camp_site" == b.tourism) {
        "yes" == b.dog && (a += "dogs allowed<br/>");"no" == b.dog && (a += "dogs forbidden<br/>");b.stars && (a += b.stars + "stars<br/>");b.caravans && (a += "caravan sites<br/>");if ("yes" == b.openfire || "yes" == b.fireplace) a += "Thers is an openfire. <br/>";"yes" == b.washing_machine && (a += "washing machine<br/>");"yes" == b.dryer && (a += "dryer<br/>");"yes" == b.group_only && (a += "use for groups only<br/>");"reception" == b.camp_site && (a += "reception available<br/>");
    }"information" == b.tourism && "map" == b.information && ("topo" == b.map_type && (a += "topo</br>"), "street" == b.map_type && (a += "street</br>"), "scheme" == b.map_type && (a += "scheme</br>"), "toposcope" == b.map_type && (a += "toposcope</br>"));"information" == b.tourism && "map" == b.information && ("site" == b.map_size && (a += "map of site</br>"), "city" == b.map_size && (a += "city map</br>"), "region" == b.map_size && (a += "map of region</br>"));"geology" == b.board_type && (a += "geologic information<br/>");"history" == b.board_type && (a += "historic information<br/>");"nature" == b.board_type && (a += "information about nature<br/>");"notice" == b.board_type && (a += "general information<br/>");"plants" == b.board_type && (a += "information about plants<br/>");
    "wildlife" == b.board_type && (a += "information about wildlife<br/>");return a;
},
    fnContentAmenity = function fnContentAmenity(b) {
    var a = "";"boat_sharing" == b.amenity && (a += b.boattype + "<br/>");"embassy" == b.amenity && (a += b.country + "<br/>");if (b.vending) switch (b.vending) {case "admission_tickets":
            a += "tickets<br/>";break;case "animal_feed":
            a += "animal feed<br/>";break;case "books":
            a += "books<br/>";break;case "candles":
            a += "candles<br/>";break;case "cigarettes":
            a += "cigarettes<br/>";break;case "condoms":
            a += "condoms<br/>";break;case "drinks":
            a += "drinks<br/>";break;case "first_aid":
            a += "first aid articles<br/>";break;case "fishing_tackle":
            a += "fishing tackle<br/>";break;case "flowers":
            a += "flowers<br/>";break;case "ice_cream":
            a += "ice cream<br/>";break;case "laundry_detergent":
            a += "laundry detergent<br/>";break;case "newspapers":
            a += "newspapers<br/>";break;case "SIM_cards":
            a += "sIM-cards<br/>";break;case "sweets":
            a += "sweets<br/>";break;case "parcel_pickup":
            a += "parcel pickup<br/>";break;case "ice_cubes":
            a += "ice cubes<br/>";break;case "public_transport_tickets":
            a += "public transport tickets<br/>";break;case "parking_ticket":
            a += "parking tickets<br/>";break;case "sex_toys":
            a += "sex toys<br/>";break;case "stamps":
            a += "stamps<br/>";break;case "toll":
            a += "toll<br/>";break;case "umbrellas":
            a += "umbrellas<br/>";break;default:
            a += "content unknown<br/>";}"post_box" == b.amenity && (b.collection_times && (a += "collection times: " + b.collection_times + "<br/>"), "yes" == b.drive_through && (a += "accessible by car. <br/>"));return a;
},
    fnContentStorage = function fnContentStorage(b) {
    var a = "";if ("storage_tank" == b.man_made) {
        if (b.content) {
            var c = b.content;switch (c) {case "fuel":
                    c = "fuel";break;case "oil":
                    c = "oil";break;case "gas":
                    c = "gas";break;case "slurry":
                    c = "slurry";break;case "cement":
                    c = "cement";break;case "water":
                    c = "water";break;case "manure":
                    c = "manure";break;case "silage":
                    c = "silage";}a += "content: " + c + "<br/>";
        }if (b.contents) {
            c = b.contents;switch (c) {case "fuel":
                    c = "fuel";break;case "oil":
                    c = "oil";break;case "gas":
                    c = "gas";break;case "slurry":
                    c = "slurry";break;case "cement":
                    c = "cement";break;case "water":
                    c = "water";
                    break;case "manure":
                    c = "manure";break;case "silage":
                    c = "silage";}a += "content: " + c + "<br/>";
        }
    }b.storage && ("gas" == b.storage && (a += "content: gas<br/>"), "oil" == b.storage && (a += "content: oil<br/>"));return a;
},
    fnContentInformationCity = function fnContentInformationCity(b) {
    var a = "";b["name:de"] && (a += "german name: " + b["name:de"] + "<br/>");if (1E4 <= b.population) if (b.population = "" + b.population, 3 < b.population.length) {
        var c = b.population.length % 3,
            d = 0 < c ? b.population.substring(0, c) : "";for (i = 0; i < Math.floor(b.population.length / 3); i++) {
            d = 0 == c && 0 == i ? d + b.population.substring(c + 3 * i, c + 3 * i + 3) : d + ("." + b.population.substring(c + 3 * i, c + 3 * i + 3));
        }a += "population: " + d + "<br/>";
    } else a += "population " + b.population + "<br/>";1E4 >= b.population && (a += "population: " + b.population + "<br/>");return a;
},
    fnContentEmergency = function fnContentEmergency(b) {
    var a = "";b.lifeboat && ("inshore" == b.lifeboat ? a += "application: inshore<br/>" : "offshore" == b.lifeboat && (a += "application: offshore<br/>"));b["lifeboat:class"] && (a += "type of boat: " + b["lifeboat:class"] + "<br/>");if (b["siren:type"]) {
        var c = b["siren:type"];
        switch (c) {case "mechanical":
                c = "mechanical";break;case "electronic":
                c = "electronic";break;case "pneumatic":
                c = "pneumatic";break;case "electromechanic":
                c = "electromechanic";}a += "Typ: " + c + "<br/>";
    }if (b["siren:purpose"]) {
        c = b["siren:purpose"];switch (c) {case "air_raid":
                c = "air raid";break;case "tornado":
                c = "tornado";break;case "storm":
                c = "storm";break;case "civil_defense":
                c = "civil defence";break;case "fire":
                c = "fire";}a += "use: " + c + "<br/>";
    }b["siren:model"] && (a += "model: " + b["siren:model"] + "<br/>");b["siren:range"] && (a += "range of siren: " + b["siren:range"] + "<br/>");return a;
},
    fnContentCuisine = function fnContentCuisine(b) {
    var a = "";if (b.cuisine) {
        var c = "",
            a = ("supermarket" == b.shop || "convenience" == b.shop || "deli" == b.shop || "organic" == b.shop) && "restaurant" != b.amenity ? a + "specialties: " : a + "cuisine: ";"arabic" == b.cuisine && (c += "arabic<br/>");"italian" == b.cuisine && (c += " italian<br/>");"international" == b.cuisine && (c += " international<br/>");"regional" == b.cuisine && (c += " regional<br/>");"chinese" == b.cuisine && (c += " chinese<br/>");"greek" == b.cuisine && (c += " greek<br/>");"african" == b.cuisine && (c += " african<br/>");"german" == b.cuisine && (c += " german<br/>");"mexican" == b.cuisine && (c += " mexican<br/>");"french" == b.cuisine && (c += " french<br/>");"indian" == b.cuisine && (c += " indian<br/>");"iranian" == b.cuisine && (c += " iranian<br/>");"lebanese" == b.cuisine && (c += " lebanese<br/>");"thai" == b.cuisine && (c += " thai<br/>");"balkan" == b.cuisine && (c += " balkan<br/>");"turkish" == b.cuisine && (c += " turkish<br/>");"bavarian" == b.cuisine && (c += " bavarian<br/>");"czech" == b.cuisine && (c += " czech<br/>");"portuguese" == b.cuisine && (c += " portuguese<br/>");"spanish" == b.cuisine && (c += " spanish<br/>");"japanese" == b.cuisine && (c += " japanese<br/>");"fish" == b.cuisine && (c += " fish<br/>");"brazilian" == b.cuisine && (c += " brazilian<br/>");"asian" == b.cuisine && (c += " asian<br/>");"mediterranean" == b.cuisine && (c += "mediterranean<br/>");"seafood" == b.cuisine && (c += " seafood<br/>");"ice_cream" == b.cuisine && (c += " ice cream<br/>");"burger" == b.cuisine && (c += " burger<br/>");"frozen_yogurt" == b.cuisine && (c += " frozen yogurt<br/>");
        "" == c && (c = b.cuisine + "<br/>");a += c;
    }return a;
},
    fnContentShipping = function fnContentShipping(b) {
    var a = "";b.harbour = "yes";"yes" == b["access:tide"] && (a += "Access restricted by tide</br>");"yes" == b["access:swell"] && (a += "access restricted by swell</br>");"yes" == b["access:ice"] && (a += "access restricted by ice</br>");b.vhf_channel && (a += "UKW-Channel: " + b.vhf_channel + "</br>");b.mmsi && (a += "MMSI-Number: " + b.mmsi + "</br>");b["harbour:information"] && (a += "information :" + b["harbour:information"] + "</br>");"yes" == b.motorboat && (a += "motorboat allowed</br>");
    "no" == b.motorboat && (a += "motorboat prohibited </br>");b.CEMT && (a += "CEMT: " + b.CEMT + "</br>");"yes" == b.intermittent && (a += "river intermittent dried out</br>");"yes" == b.tidal && (a += "tidal influence the flow</br>");b.draft && (a += " driving depth of water: " + b.draft + " m</br>");if ("slipway" == b.leisure || "slipway" == b.harbour) "hand" == b.operating && (a += "operating: by hand<br/>"), "car" == b.operating && (a += "operating: by car, boat trailer<br/>"), "cable_winch" == b.operating && (a += "operating: with cable winch<br/>"), "travellift" == b.operating && (a += "operating: by travellift<br/>"), "crane" == b.man_made && (a += "by crane<br/>", b["crane:maxload"] && (a += "maxload: " + b["crane:maxload"] + "<br/>"), b["ship:maxdraft"] && (a += "maximum permissible draught: " + b["ship:maxdraft"] + "<br/>"), b["ship:maxlength"] && (a += "maximum permissible length of a ship: " + b["ship:maxlength"] + "<br/>")), "yes" == b.vehicle && (a += "accessible by vehicle<br/>");a += fnWreckInfo(b);if ("ferry" == b.route || "ferry_terminal" == b.amenity || "yes" == b.ferry) fahrzeit = b.duration, "" != fahrzeit && "undefined" != fahrzeit && null != fahrzeit && (a += "duration in hours : " + fahrzeit + "<br/>"), "yes" == b.motorcar && (a += "motorcars allowed<br/>"), "no" == b.motorcar && (a += "motorcars prohibited<br/>"), "no" == b.motor_vehicle && (a += "motor vehicles prohibited<br/>"), "yes" == b.motor_vehicle && (a += "motor vehicles allowed<br/>"), "yes" == b.vehicle && (a += "vehicles allowed<br/>"), "no" == b.vehicle && (a += "no vehicles<br/>"), "no" == b.bicycle && (a += "no bicycles<br/>"), "no" == b.bicycle && (a += "bicycles allowed<br/>"), "yes" == b.hgv && (a += "hgv allowed<br/>"), "no" == b.hgv && (a += "hgv prohibited<br/>"), "yes" == b.foot && (a += "pedestrian allowed<br/>"), "no" == b.foot && (a += "pedestrian prohibited <br/>"), "yes" == b.bicycle && (a += "cyclist allowed <br/>"), "no" == b.bicycle && (a += "cyclist prohibited <br/>"), "yes" == b["ferry:cable"] && (a += "cable ferry<br/>");if (b["seamark:light:1:colour"]) {
        var c = b["seamark:light:1:colour"];switch (c) {case "white":
                c = "white";break;case "red":
                c = "red";break;case "green":
                c = "green";break;case "blue":
                c = "blue";break;case "yellow":
                c = "yellow";break;case "amber":
                c = "amber";}a += "colour of light: " + c + "<br/>";
    }"lighthouse" == b.man_made && (b["seamark:light:1:character"] && (a += "light character: " + b["seamark:light:1:character"] + "<br/>"), b["seamark:light:1:period"] && (a += "period: " + b["seamark:light:1:period"] + "<br/>"), b["seamark:light:1:height"] && (a += "height: " + b["seamark:light:1:height"] + " m<br/>"), b["seamark:light:1:range"] && (a += "range: " + b["seamark:light:1:range"] + " sm<br/>"));if (b["seamark:light:colour"]) {
        c = b["seamark:light:colour"];switch (c) {case "white":
                c = "white";
                break;case "red":
                c = "red";break;case "green":
                c = "green";break;case "blue":
                c = "blue";break;case "yellow":
                c = "yellow";break;case "amber":
                c = "amber";}a += "colour of light: " + c + "<br/>";
    }"lighthouse" == b.man_made && (b["seamark:light:character"] && (a += "light character: " + b["seamark:light:character"] + "<br/>"), b["seamark:light:height"] && (a += "height: " + b["seamark:light:height"] + " m<br/>"), b["seamark:light:range"] && (a += "range: " + b["seamark:light:range"] + " sm<br/>"), b["seamark:light:period"] && (a += "period: " + b["seamark:light:period"] + "<br/>"));return a;
},
    fnContentHydrants = function fnContentHydrants(b) {
    var a = "";if ("fire_hydrant" == b.emergency) {
        var c = b["fire_hydrant:count"];"undefined" != c && null != c && "" != c && (a += "Number: " + c + "<br/>");c = b["fire_hydrant:diameter"];"undefined" != c && null != c && "" != c && (a += "Pipe diameter: " + c + " mm<br/>");c = b["fire_hydrant:pressure"];"undefined" != c && null != c && "" != c && (a = "suction" == c ? a + "Pressure in bar / Suction: Suction<br/>" : a + ("Pressure in bar / Suction: " + c + "<br/>"));c = b["fire_hydrant:position"];"undefined" != c && null != c && "" != c && ("lane" == c ? a += "Position: Lane<br/>" : "parking_lot" == c ? a += "Position: Parking Lot<br/>" : "sidewalk" == c ? a += "Position: Sidewalk<br/>" : "green" == c && (a += "Position: Green<br/>"));c = b.water_volume;"undefined" != c && null != c && "" != c && (a += "Volume: " + c + "<br/>");c = b["fire_hydrant:awwa_class"];"undefined" != c && null != c && "" != c ? a += "AWWA Class: " + c + "<br/>" : (c = b.flow_rate, "undefined" != c && null != c && "" != c && (a += "Flow rate: " + c + "<br/>"));c = b.water_source;"undefined" != c && null != c && "" != c && "main" != c && (a += "Water source: " + c + "<br/>");c = b["couplings:type"];"undefined" != c && null != c && "" != c && (a += "Couplings type: " + c + "<br/>");c = b["couplings:diameter"];"undefined" != c && null != c && "" != c && (a += "Couplings diameter: " + c + "<br/>");c = b["pillar:type"];"dry_barrel" === c && (a += "Pillar type: " + c + "<br/>");"fire_hydrant" === b["disused:emergency"] && (a += "Currently disused");"" == a && (a = "No details available.");
    }return a;
},
    fnContentStreetsTraffic = function fnContentStreetsTraffic(b) {
    var a = "";"yes" == b["red_turn:right"] && (a += "red turn: allowed to turn to the right<br/>");
    "no" == b["red_turn:right"] && (a += "red turn: prohibited to turn to the right<br/>");b.bridge && (b.height && (a += "height: " + b.height + " m<br/>"), b.length && (a += "length: " + b.length + " m<br/>"), b.bridge_ref && (a += "bridge ref: " + b.bridge_ref + "<br/>"), b.start_date && (a += "start date: " + b.start_date + "</br>;"), b.maxweight && (a += "maxweight: " + b.maxweight + " t</br>"));b.highway && "yes" == b.toll && (a += "toll highway<br/>");"yes" == b["toll:hgv"] && (a += "HGV toll<br/>");if (b.surface) {
        var c = b.surface,
            a = a + "surface: ";switch (c) {case "grass":
                a += "grass<br/>";break;case "paved":
                a += "paved<br/>";break;case "asphalt":
                a += "asphalt<br/>";break;case "cobblestone":
                a += "cobblestone<br/>";break;case "sett":
                a += "sett<br/>";break;case "concrete":
                a += "concrete<br/>";break;case "unpaved":
                a += "unpaved<br/>";break;case "paving_stones":
                a += "paving stones<br/>";break;case "compacted":
                a += "compacted<br/>";break;case "dirt":
                a += "dirt<br/>";break;case "fine_gravel":
                a += "fine gravel<br/>";break;case "grass_paver":
                a += "grass paver<br/>";break;case "gravel":
                a += "gravel<br/>";
                break;case "earth":
                a += "earth<br/>";break;case "ground":
                a += "ground<br/>";break;case "metal":
                a += "metal<br/>";break;case "mud":
                a += "mud<br/>";break;case "sand":
                a += "sand<br/>";break;case "wood":
                a += "wood<br/>";break;case "tartan":
                a += "tartan<br/>";break;case "artificial_turf":
                a += "artificial turf<br/>";break;case "clay":
                a += "clay<br/>";break;default:
                a += "unknown<br/>";}
    }"grade1" == b.tracktype && (a += "path surface: Solid. Usually a paved or heavily compacted hardcore surface.<br/>");"grade2" == b.tracktype && (a += "path surface: Mostly solid. Usually an unpaved track with surface of gravel mixed with a varying amount of sand, silt, and clay.<br/>");
    "grade3" == b.tracktype && (a += "path surface: Even mixture of hard and soft materials. Almost always an unpaved track.<br/>");"grade4" == b.tracktype && (a += "path surface: Mostly soft. Almost always an unpaved track prominently with soil/sand/grass, but with some hard materials, or compressed materials mixed in.<br/>");"grade5" == b.tracktype && (a += "path surface: Soft. Almost always an unpaved track lacking hard materials, uncompacted, with surface of soil/sand/grass.<br/>");"yes" == b.motorcycle && (a += "<br/>motorcyle allowed.<br/>");
    "no" == b.motorcycle && (a += "<br/>motorcycles prohibited.<br/>");"excellent" == b.trail_visibility && (a += "trail visibility: Unambiguous path or markers everywhere<br/>");"good" == b.trail_visibility && (a += "trail visibility: Next marker always visible, but sometimes has to be searched for.<br/>");"intermediate" == b.trail_visibility && (a += "trail visibility: Track mostly visible<br/>");"bad" == b.trail_visibility && (a += "trail visibility: Path sometimes invisible, route partly pathless<br/>");"horrible" == b.trail_visibility && (a += "trail visibility: Often pathless<br/>");"no" == b.trail_visibility && (a += "trail visibility: Mostly pathless<br/>");"hiking" == b.sac_scale && (a += "trail: Trail well cleared. (SAC Scale: T1 (yellow))</br>");"mountain_hiking" == b.sac_scale && (a += "trail: Trail with continuous line and balanced ascent (SAC Scale: T2 (red))</br>");"demanding_mountain_hiking" == b.sac_scale && (a += "trail: exposed sites may be secured with ropes or chains, possible need to use hands for balance (SAC Scale: T3 (red))</br>");"alphine_hiking" == b.sac_scale && (a += "trail: sometimes need for hand use to get ahead (SAC Scale: T4 (blue))</br>");"demanding_alphine_hiking" == b.sac_scale && (a += "trail: single plainly climbing up to second grade (SAC Scale: T5 (blue))</br>");"difficult_alpine_hiking" == b.sac_scale && (a += "trail: climbing up to second grade (SAC Scale: T6 (blue))</br>");b["mtb:name"] && (a += "cycleway :" + b["mtb:name"] + "</br>");"0" == b["mtb:scale"] && (a += "Mountainbikeroute: Very easy way - Gravel or packed earth. No particular difficulties. Mostly forest and meadow paths (highway=path). Sections with steps, rocks, or roots are not expected. Wide curves, easy to moderate slope. No special skills are needed to ride this. Easy to ride uphill.</br>Surface: solid and handy</br>Obstacles: no obstacles</br>Gradient: mild to moderate</br>Bends: wide</br>Driving skills: no special driving skills required</br>");
    "1" == b["mtb:scale"] && (a += "Mountainbikeroute: Smaller obstacles like roots and small stones. Erosion damage may increase difficulty. Soil may be loose in places. Tight turns, but no hairpin turns. Riding requires care and attention, but no special skill. Obstacles can be ridden over. Difficult to ride uphill.</br>Surface: loose surface possible, small roots and stones</br>Obstacles: small obstacles, water gutter, erosion damage</br>Gradient: < 40%</br>Bends: wide</br>Driving skills: basic driving skills required, obstacles can be passed over</br>");
    "2" == b["mtb:scale"] && (a += "Mountainbikeroute: Obstacles such as large rocks and stones. Soil is often loose.  Steps are expected. Wider hairpin turns, steepness of up to 70%. Requires some advanced riding skills. Only very skilled riders can go uphill on this.</br>Surface: surface usually not compacted, larger roots and stones.</br>Obstacles: plain steps and stairs</br>Gradient: < 70%</br>Bends: easy hairpins</br>Driving skills: advanced driving skills required</br>");"3" == b["mtb:scale"] && (a += "Mountainbikeroute: Many sections with large obstacles such as boulders and large roots. Many hairpin and off-balance turns. Slippery surface and talus sections may be found. The surface may be very slippery. Constant concentration and very good skills needed. Nearly impossible to ride uphill.</br>Surface: many large roots / rocks or slippery ground, loose scree</br>Obstacles: drags, hardly driveable steps</br>Gradient: >70%</br>Bends: bail like hairpins</br>Driving skills: perfect bike control with trial skills required, like moving the rear wheel only in hairpins</br>");
    "4" == b["mtb:scale"] && (a += "Mountainbikeroute: Very steep and difficult, with sections having large boulders and roots. Frequent loose debris. Very steep sections with very tight hairpin turns and high steps that will cause the chainring to hit the ground. Some trials techniques will be necessary. Nearly impossible to ride uphill.</br>Surface: many large roots / rocks or slippery ground, loose scree</br>Obstacles: drags, hardly driveable steps</br>Gradient: >70%</br>Bends: bail like hairpins</br>Driving skills: perfect bike control with trial skills required, like moving the rear wheel only in hairpins</br>");
    "5" == b["mtb:scale"] && (a += "Mountainbikeroute: Very steep and difficult with big boulder fields and debris, and landslides. Speed must be carried for counter-ascents. If at all only short passages are available for accelerating and braking. Fallen trees may make very steep passages even more difficult. Very few Mountainbikers can actually ride at this level. Most will have to push.</br>Surface: counter-ascents / rocks or slippery ground, loose scree / path is rather a Alpine hiking (>T4) path</br>Obstacles: drags, combinations of hardly driveable steps</br>Gradient: >70%</br>Bends: bail like hairpins with obstacles</br>Driving skills: excellent bike control with special trial skills required, moving the front and rear wheel is limited</br>");
    "6" == b["mtb:scale"] && (a += "Mountainbikeroute: Classify ways with 6 that are not rideable at all for a mtbiker. E.g. Chains or stemples (metal rungs) on a via ferrata or simply unsecured alpine pathes that are not even partly rideable for the very best mtbikers (using trial techniques). Steepness is often >45\xB0. If used for single points, then this highlights exceptionally difficult spots. Often spotting is impossible and falling may be lethal.</br>Surface: Path is rather a Alpine hiking (T5 or T6) path or bare rock without visible path.</br>Obstacles: Steps over 2m, rock faces,...</br>Gradient: >100%</br>Bends: no bends can be distinguished as such.</br>Driving skills: only the very best trial specialists or vertriders will try to ride these spots. Walking the place first to find a way to clear is needed.</br>");
    "10" == b.maxspeed && (a += 'traffic-calmed sector: maxspeed 10 Km/h and "right over left"</br>');"30" == b.maxspeed && (a += 'traffic-calmed sector: "right over left" and maxspeed 30 Km/h</br>');"50" == b.maxspeed && (a += "maxspeed 50 Km/h</br>");"70" == b.maxspeed && (a += "maxspeed 50 Km/h</br>");"80" == b.maxspeed && (a += "maxspeed 80 Km/h</br>");"100" == b.maxspeed && (a += "maxspeed  100 Km/h</br>");"no" == b.overtaking && (a += "No overtaking!</br>");"yes" == b.noexit && (a += "noexit</br>");"yes" == b.oneway && (a += "oneway</br>");"designated" == b.priority_road && (a += "priority road designated</br>");"end" == b.priority_road && (a += "priority road ends</br>");"emergency_bay" == b.highway && (a += "emergency bay</br>");"yes" == b.traffic_calming && (a += "traffic calming</br>");"bump" == b.traffic_calming && (a += "bump</br>");"chicane" == b.traffic_calming && (a += "chicane</br>");"choker" == b.traffic_calming && (a += "choker</br>");"cushion" == b.traffic_calming && (a += "cushion</br>");"hump" == b.traffic_calming && (a += "hump</br>");"island" == b.traffic_calming && (a += "island</br>");
    "rumble_strip" == b.traffic_calming && (a += "rumble strip</br>");"table" == b.traffic_calming && (a += "table</br>");if ("parking" == b.amenity && ("yes" == b.fee && (a += "fee required<br/>"), c = b["capacity:women"], "" != c && "no" != c && null != c)) {
        var d = "unkown";"yes" != c && (d = c);a += "ladies parking spaces (numbers: " + d + ") <br/>";
    }b.park_ride && ("bus" == b.park_ride && (a += "bus connection<br/>"), "tram" == b.park_ride && (a += "tram connection<br/>"), "unknown" == b.park_ride && (a += "park ride unkown<br/>"));b["railway:position"] && (a += "railway<br/>position: " + b["railway:position"] + "<br/>");b.uic_ref && (a += "UIC: " + b.uic_ref + "<br/>");return a;
},
    fnContentSports = function fnContentSports(b) {
    var a = "";"9pin" == b.sport && (a += "possible sport : 9pin<br/>");"10pin" == b.sport && (a += "possible sport : 10pin<br/>");"american_football" == b.sport && (a += "possible sport : american football<br/>");"aikido" == b.sport && (a += "possible sport : aikido<br/>");"archery" == b.sport && (a += "possible sport : archery<br/>");"athletics" == b.sport && (a += "possible sport : athletics<br/>");"australian_football" == b.sport && (a += "possible sport : australian football<br/>");"base" == b.sport && (a += "possible sport : base<br/>");"badminton" == b.sport && (a += "possible sport : badminton<br/>");"baseball" == b.sport && (a += "possible sport : baseball<br/>");"basketball" == b.sport && (a += "possible sport : basketball<br/>");"beachvolleyball" == b.sport && (a += "possible sport : beachvolleyball<br/>");"bmx" == b.sport && (a += "possible sport : bmx<br/>");"boules" == b.sport && (a += "possible sport : boules<br/>");"boule" == b.sport && (a += "possible sport : boule<br/>");
    "bowls" == b.sport && (a += "possible sport : bowls<br/>");"boxing" == b.sport && (a += "possible sport : boxing<br/>");"canadian_football" == b.sport && (a += "possible sport : canadian football<br/>");"canoe" == b.sport && (a += "possible sport : canoe<br/>");"chess" == b.sport && (a += "possible sport : chess<br/>");"cliff_diving" == b.sport && (a += "possible sport : cliff diving<br/>");"climbing" == b.sport && (a += "possible sport : climbing<br/>");"climbing_adventure" == b.sport && (a += "possible sport : adventure climbing<br/>");"cricket" == b.sport && (a += "possible sport : cricket<br/>");"cricket_nets" == b.sport && (a += "possible sport : cricket nets<br/>");"croquet" == b.sport && (a += "possible sport : croquet<br/>");"curling" == b.sport && (a += "possible sport : curling<br/>");"cycling" == b.sport && (a += "possible sport : cycling<br/>");if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";"dog_racing" == b.sport && (a += "possible sport : dog racing<br/>");"fencing" == b.sport && (a += "possible sport : fencing<br/>");"equestrian" == b.sport && (a += "possible sport : equestrian<br/>");
    "football" == b.sport && (a += "possible sport: american football<br/>");"free_flying" == b.sport && (a += "possible sport: free flying<br/>");"gaelic_games" == b.sport && (a += "possible sport: gaelic games<br/>");"golf" == b.sport && (a += "possible sport: golf<br/>");"gymnastics" == b.sport && (a += "possible sport: gymnastik<br/>");"hockey" == b.sport && (a += "possible sport: hockey<br/>");"horseshoes" == b.sport && (a += "possible sport: horseshoes<br/>");"horse_racing" == b.sport && (a += "possible sport: horse racing<br/>");"ice_stock" == b.sport && (a += "possible sport: ice stock<br/>");"judo" == b.sport && (a += "possible sport: judo<br/>");"karting" == b.sport && (a += "possible sport: karting<br/>");"kitesurfing" == b.sport && (a += "possible sport: kitesurfing<br/>");"korfball" == b.sport && (a += "possible sport: korfball<br/>");"motor" == b.sport && (a += "possible sport: motor<br/>");"multi" == b.sport && (a += "possible sport: multi<br/>");"obstacle_course" == b.sport && (a += "possible sport: obstacle course<br/>");"orienteering" == b.sport && (a += "possible sport: orienteering<br/>");
    "paddle_tennis" == b.sport && (a += "possible sport: paddle-tennis<br/>");"paragliding" == b.sport && (a += "possible sport: paragliding<br/>");"Pelota" == b.sport && (a += "possible sport: Pelota<br/>");"rasquet" == b.sport && (a += "possible sport: racquet<br/>");"rowing" == b.sport && (a += "possible sport: rowing<br/>");"rugby_league" == b.sport && (a += "possible sport: rugby league<br/>");"rugby_union" == b.sport && (a += "possible sport: rugby union<br/>");"running" == b.sport && (a += "possible sport: running<br/>");"scuba_diving" == b.sport && (a += "possible sport: scuba diving<br/>");"shooting" == b.sport && (a += "possible sport: shooting<br/>");"skating" == b.sport && (a += "possible sport: skating<br/>");"skateboard" == b.sport && (a += "possible sport: skateboard<br/>");"skiing" == b.sport && (a += "possible sport: skiing<br/>");"soccer" == b.sport && (a += "possible sport: soccer<br/>");"surfing" == b.sport && (a += "possible sport: surfing<br/>");"swimming" == b.sport && (a += "possible sport: swimming<br/>");"table_tennis" == b.sport && (a += "possible sport: table tennis<br/>");
    "taekwondo" == b.sport && (a += "possible sport: taekwondo<br/>");"team_handball" == b.sport && (a += "possible sport: team handball<br/>");"tennis" == b.sport && (a += "possible sport: tennis<br/>");"toboggan" == b.sport && (a += "possible sport: toboggan<br/>");"volleyball" == b.sport && (a += "possible sport: volleyball<br/>");"water_ski" == b.sport && (a += "possible sport: water ski<br/>");"weightlifting" == b.sport && (a += "possible sport: weightlifting<br/>");"wrestling" == b.sport && (a += "possible sport: wrestling<br/>");return a;
};
function fnArztInfo(b) {
    var a = "",
        c = "",
        d = b["healthcare:speciality"];"" != d && ("general" == d && (c += "general<br/>"), "allergology" == d && (c += "allergology<br/>"), "anaesthetics" == d && (c += "anaesthetics<br/>"), "biochemistry" == d && (c += "biochemistry<br/>"), "biological_haematology" == d && (c += "biological haematology<br/>"), "biology" == d && (c += "biology<br/>"), "cardiology" == d && (c += "cardiology<br/>"), "cardiac_surgery" == d && (c += "cardiac surgery<br/>"), "child_psychiatry" == d && (c += "child psychiatry<br/>"), "dental_oral_maxillo_facial_surgery" == d && (c += "dental-, oral-, maxillo- and facial-surgery<br/>"), "dermatology" == d && (c += "dermatology<br/>"), "dermatovenereology" == d && (c += "dermatovenereology<br/>"), "diagnostic_radiology" == d && (c += "diagnostic radiology<br/>"), "emergency" == d && (c += "emergency<br/>"), "endocrinology" == d && (c += "endocrinology<br/>"), "gastroenterological_surgery" == d && (c += "gastroenterological surgery<br/>"), "gastroenterology" == d && (c += "gastroenterology<br/>"), "geriatrics" == d && (c += "geriatrics<br/>"), "gynaecology" == d && (c += "gynaecology<br/>"), "haematology" == d && (c += "haematology<br/>"), "hepatology" == d && (c += "hepatology<br/>"), "immunology" == d && (c += "immunology<br/>"), "infectious_diseases" == d && (c += "infectious diseases<br/>"), "intensive" == d && (c += "intensive<br/>"), "internal" == d && (c += "internal<br/>"), "maxillofacial_surgery" == d && (c += "maxillofacial surgery<br/>"), "nephrology" == d && (c += "nephrology<br/>"), "neurology" == d && (c += "neurology<br/>"), "neurophysiology" == d && (c += "neurophysiology<br/>"), "neuropsychiatry" == d && (c += "neuropsychiatry<br/>"), "neurosurgery" == d && (c += "neurosurgery<br/>"), "nuclear" == d && (c += "nuclear<br/>"), "occupational" == d && (c += "occupational <br/>"), "oncology" == d && (c += "oncology<br/>"), "ophthalmology" == d && (c += "ophthalmology<br/>"), "orthopaedics" == d && (c += "orthopaedics<br/>"), "otolaryngology" == d && (c += "otolaryngology<br/>"), "paediatric_surgery" == d && (c += "paediatric surgery<br/>"), "paediatrics" == d && (c += "paediatrics<br/>"), "palliative" == d && (c += "palliative<br/>"), "physiatry" == d && (c += "physiatry<br/>"), "plastic_surgery" == d && (c += "plastic surgery<br/>"), "proctology" == d && (c += "proctology<br/>"), "psychiatry" == d && (c += "psychiatry<br/>"), "pulmonology" == d && (c += "pulmonology<br/>"), "radiology" == d && (c += "radiology<br/>"), "radiotherapy" == d && (c += "radiotherapy<br/>"), "rheumatology" == d && (c += "rheumatology<br/>"), "stomatology" == d && (c += "stomatology<br/>"), "surgery" == d && (c += "surgery<br/>"), "surgical_oncology" == d && (c += "surgical oncology<br/>"), "thoracic_surgery" == d && (c += "thoracic surgery<br/>"), "transplant" == d && (c += "transplant<br/>"), "trauma" == d && (c += "trauma<br/>"), "tropical" == d && (c += "tropical<br/>"), "urology" == d && (c += "urology<br/>"), "vascular_surgery" == d && (c += "vascular surgery<br/>"), "venereology" == d && (c += "venereology<br/>"), "acupuncture" == d && (c += "acupuncture<br/>"), "naturopathy" == d && (c += "naturopathy<br/>"), "chiropractic" == d && (c += "chiropractic <br/>"), "homeopathy" == d && (c += "homeopathy<br/>"), "osteopathy" == d && (c += "osteopathy<br/>"));"" != b.health_specialty && ("yes" == b["health_specialty:family_medicine"] && (c += "family medicine<br/>"), "yes" == b["health_specialty:emergency_medicine"] && (c += "emergency medicine<br/>"), "yes" == b["health_specialty:anaesthesiology"] && (c += "anaesthesiology<br/>"), "yes" == b["health_specialty:dermatology"] && (c += "dermatology<br/>"), "yes" == b["health_specialty:ear_nose_throat"] && (c += "ear, nose, throat (ENT specialist)<br/>"), "yes" == b["health_specialty:occupational_medicine"] && (c += "occupational medicine<br/>"), "yes" == b["health_specialty:internal_medicine"] && (c += "internal medicine<br/>"), "yes" == b["health_specialty:neurology"] && (c += "neurology<br/>"), "yes" == b["health_specialty:ophthalmology"] && (c += "ophthalmology<br/>"), "yes" == b["health_specialty:palliative_medicine"] && (c += "palliative medicine<br/>"), "yes" == b["health_specialty:psychiatry"] && (c += "psychiatry<br/>"), "yes" == b["health_specialty:gynaecology"] && (c += "gynaecology<br/>"), "yes" == b["health_specialty:urology"] && (c += "urology<br/>"), "yes" == b["health_specialty:pain_medicine"] && (c += "pain medicine<br/>"), "yes" == b["health_specialty:environmental_medicine"] && (c += "environmental medicine<br/>"), "yes" == b["health_specialty:intensive_care_medicin"] && (c += "intensive care medicin<br/>"), "yes" == b["health_specialty:paediatrics"] && (c += "paediatrics<br/>"), "yes" == b["health_specialty:physiatry"] && (c += "physiatry<br/>"), "yes" == b["health_specialty:radiology"] && (c += "radiology<br/>"), "yes" == b["health_specialty:general"] && (c += "general<br/>"), "yes" == b["health_specialty:occupational_therapy"] && (c += "occupational therapy<br/>"), "yes" == b["health_specialty:pulmonology"] && (c += "pulmonology<br/>"), "yes" == b["health_specialty:acupuncture"] && (c += "acupuncture<br/>"), "yes" == b["health_specialty:orthopaedics"] && (c += "orthopaedics<br/>"), "yes" == b["health_specialty:chiropractic"] && (c += "chiropractic<br/>"), "yes" == b["health_specialty:sports_medicine"] && (c += "sports medicine<br/>"));"" != c && (a = a + "subjects: " + ('<div class="c4g_open_text">' + c + "</div>"));return a;
}
function fnKraftwerkInfo(b) {
    var a = "";if (b["generator:method"]) {
        a += "method of generation: ";switch (b["generator:method"]) {case "combustion":
                a += "combustion";break;case "thermal":
                a += "thermal";break;case "pumping":
                a += "pumping";break;case "photovoltaic":
                a += "photovoltaic";break;case "gasification":
                a += "gasification";break;case "anaerobic_digestion":
                a += "anaerobic digestion";break;case "pyrolysis":
                a += "pyrolysis";break;case "fission":
                a += "fission";break;case "fusion":
                a += "fusion";break;default:
                a += "unknown<br/>";}a += "<br/>";
    }if (b.power_source) {
        a += "power source: ";switch (b.power_source) {case "photovoltaic":
                a += "photovoltaic";break;default:
                a += "unknown<br/>";}a += "<br/>";
    }b["generator:output:electricity"] && (a += "electricity generation: " + b["generator:output:electricity"] + "<br/>");b["generator:output:heat"] && (a += "heat generation: " + b["generator:output:heat"] + "<br/>");b["generator:output:cold"] && (a += "cold generation: " + b["generator:output:cold"] + "<br/>");b["generator:output"] && (a += "output: " + b["generator:output"] + "<br/>");
    b["generator:output:hot_air"] && (a += "hot-air generation: " + b["generator:output:hot_air"] + "<br/>");b["generator:output:cold_water"] && (a += "cold water generation: " + b["generator:output:cold_water"] + "<br/>");b["generator:output:cold_air"] && (a += "cold air generation: " + b["generator:output:cold_air"] + "<br/>");b["generator:output:compressed_air"] && (a += "compressed air generation: " + b["generator:output:compressed_air"] + "<br/>");b["generator:output:steam"] && (a += "steam generation: " + b["generator:output:steam"] + "<br/>");b["generator:output:vacuum"] && (a += "vacuum generation: " + b["generator:output:vacuum"] + "<br/>");b["generator:output:battery_charging"] && (a += "battery charging: " + b["generator:output:battery_charging"] + "<br/>");"PWR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-1" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-2" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-3" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-4" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-5" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"BWR-6" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"PHWR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"GCR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"FBR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"RBMK-1000" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"RBMK-1500" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"VVER" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"CANDU" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"CPR-1000" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"EPR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
    "tokamak" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"stellarator" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"ICF" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"cold-fusion" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");"wind_turbine" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "generator method: horizontal axis wind turbine<br/>");"wind_turbine" == b["generator:method"] && "vertical_axis" == b["generator:type"] && (a += "generator method: vertical axis wind turbine<br/>");"francis_turbine" == b["generator:type"] && (a += "generator type: francis-turbine<br/>");"kaplan_turbine" == b["generator:type"] && (a += "generator type: kaplan-turbine<br/>");"pelton_turbine" == b["generator:type"] && (a += "generator type: pelton-turbine<br/>");"stream" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "generator method: horizontal axis sea current power station<br/>");"stream" == b["generator:method"] && "vertical_axis" == b["generator:type"] && (a += "generator type: vertical axis sea current power station<br/>");"steam_turbine" == b["generator:type"] && (a += "generator type: steam turbine<br/>");"heat_pump" == b["generator:type"] && (a += "generator type: heat pump<br/>");"solar_thermal_collector" == b["generator:type"] && (a += "generator type: solar thermal collector<br/>");"solar_photovoltaic_panel" == b["generator:type"] && (a += "generator type: solar photovoltaic panel<br/>");"steam_generator" == b["generator:type"] && (a += "generator type: steam generator<br/>");"gas_turbine" == b["generator:type"] && (a += "generator type: gas turbine<br/>");"combined_cycle" == b["generator:type"] && (a += "generator type: combined cycle<br/>");"reciprocating_engine" == b["generator:type"] && (a += "generator type: reciprocating engine<br/>");return a;
}
function fnWertstoffinfo(b) {
    var a = "";if ("container" == b.recycling_type || "centre" == b.recycling_type || "recycling" == b.amenity) "yes" == b["recycling:glass"] && (a += "glass container</br>"), "yes" == b["recycling:shoes"] && (a += "shoe container</br>"), "yes" == b["recycling:cooking_oil"] && (a += "recycling of cooking oil</br>"), "yes" == b["recycling:paper"] && (a += "recycling of paper</br>"), "yes" == b["recycling:engine_oil"] && (a += "recycling of engine oil</br>"), "yes" == b["recycling:clothes"] && (a += "recycling of clothes</br>"), "yes" == b["recycling:car_batteries"] && (a += "recycling of car batteries</br>"), "yes" == b["recycling:cans"] && (a += "recycling of cans</br>"), "yes" == b["recycling:scrap_metal"] && (a += "recycling of scrap metal</br>"), "yes" == b["recycling:plastic"] && (a += "recycling of plastic</br>"), "yes" == b["recycling:batterries"] && (a += "recycling of batterries</br>"), "yes" == b["recycling:plastic_bottles"] && (a += "recycling of plastic bottles</br>"), "yes" == b["recycling:green_waste"] && (a += "recycling of green waste</br>"), "yes" == b["recycling:hardcore"] && (a += "recycling of hardcore</br>");return a;
}
var fnContentGeneralInformations = function fnContentGeneralInformations(b) {
    var a = "";b.width && (a += "width: " + b.width + " m<br/>");b.height && (a += "height: " + b.height + " m<br/>");b.maxwidth && (a += "maxwidth: " + b.maxwidth + " m<br/>");b.maxheight && (a += "maxheight: " + b.maxheight + " m<br/>");b.maxweight && (a += "maxweight: " + b.maxweight + " t<br/>");b.maxspeed && (a += "maxspeed: " + b.maxspeed + " km/h<br/>");b.min_age && (a += "minimum age: " + b.min_age + "<br/>");b.max_age && (a += "maximum age: " + b.max_age + "<br/>");"yes" == b.nudism && (a += "nudism<br/>");"yes" == b.ruins && (a += "ruins<br/>");b.ele && (a += "height above sea level: " + b.ele + " m<br/>");b["xmas:day_date"] && (a += "period from - till: " + b["xmas:day_date"] + "<br/>");b["rotor:diameter"] && (a += "diameter of rotor: " + b["rotor:diameter"] + " m<br/>");b["xmas:note"] && (a += "information: " + b["xmas:note"] + "<br/>");"port" == b["seamark:beacon_lateral:category"] && (a += "port<br/>");"starboard" == b["seamark:beacon_lateral:category"] && (a += "starboard<br/>");"yes" == b["service:bicycle:retail"] && (a += "retail bicycles<br/>");"yes" == b["service:bicycle:repair"] && (a += "repair bicycles<br/>");"yes" == b["service:bicycle:rental"] && (a += "rental bicycles<br/>");"yes" == b["service:bicycle:pump"] && (a += "use of a pump is possible<br/>");"yes" == b["service:bicycle:diy"] && (a += "diy is possible<br/>");"yes" == b["service:bicycle:cleaning"] && (a += "cleaning bicycles<br/>");"yes" == b["service:bicycle:second_hand"] && (a += "sale of second hand bicycles<br/>");"yes" == b["service:bicycle:charging"] && (a += "charging electric bikes is possible<br/>");"yes" == b.cafe && (a += "cafe<br/>");"yes" == b.breakfast && (a += "breakfast<br/>");"yes" == b.snack && (a += "snack<br/>");"yes" == b.indoor_seating && (a += "indoor seating<br/>");"yes" == b.outdoor_seating && (a += "outdoor seating<br/>");"yes" == b.self_service && (a += "self service<br/>");"yes" == b.bakehouse && (a += "bakehouse<br/>");"yes" == b.pastry_shop && (a += "pastry shop<br/>");"yes" == b.fair_trade && (a += "fair trade<br/>");"only" == b.fair_trade && (a += "only fair trade<br/>");"no" == b.fair_trade && (a += "no fair trade<br/>");return a;
},
    fnContentHealthcare = function fnContentHealthcare(b) {
    var a = "";if ("doctors" == b.amenity || "physician" == b.office || "doctor" == b.healthcare) a += fnArztInfo(b), b.medical_area && (a += b.medical_area + "<br/>"), b.type && (a += b.type + "<br/>"), b["doctors:de"] && (a += b["doctors:de"] + "<br/>"), b["note:de"] && (a += b["note:de"] + "<br/>");"yes" == b.dispensing && (a += "pharmacy with dispensing<br/>");"abused" == b["social_facility:for"] && (a += "social facility for: abused people<br/>");"child" == b["social_facility:for"] && (a += "social facility for: children<br/>");"disabled" == b["social_facility:for"] && (a += "social facility for: disabled people<br/>");
    "diseased" == b["social_facility:for"] && (a += "social facility for: diseased people<br/>");"drug_addicted" == b["social_facility:for"] && (a += "social facility for: drug addicted people<br/>");"homeless" == b["social_facility:for"] && (a += "social facility for: homeless<br/>");"juvenile" == b["social_facility:for"] && (a += "social facility for: juvenile and teenager<br/>");"mental_health" == b["social_facility:for"] && (a += "social facility for: people with mental health problems<br/>");"migrant" == b["social_facility:for"] && (a += "social facility for: migrants<br/>");"orphan" == b["social_facility:for"] && (a += "social facility for: orphans<br/>");"senior" == b["social_facility:for"] && (a += "social facility for: seniors<br/>");"underprivileged" == b["social_facility:for"] && (a += "social facility for: underprivileged people<br/>");"unemployed" == b["social_facility:for"] && (a += "social facility for: unemployed<br/>");"victim" == b["social_facility:for"] && (a += "social facility for: victims<br/>");return a;
};
function fnAdditionalBuildingInfos(b) {
    var a = "";b["building:color"] && (a += "building color: " + b["building:color"] + "</br>");b["building:height"] && (a += "building height: " + b["building:height"] + " m</br>");b["building:level"] && (a += "level: " + b["building:level"] + "</br>");b["building:part"] && (a += "building part: " + b["building:part"] + "</br>");b["roof:color"] && (a += "roof color: " + b["roof:colour"] + "</br>");b["roof:shape"] && (a += "roof shape: " + b["roof:shape"] + "</br>");b["roof:height"] && (a += "roof height: " + b["roof:height"] + " m</br>");b["roof:material"] && (a += "roof material: " + b["roof:material"] + " </br>");b["roof:orientation"] && (a += "roof orientation: " + b["roof:orientation"] + " </br>");b["roof:direction"] && (a += "roof direction: " + b["roof:direction"] + " </br>");b["building:type"] && (a += "building type: " + b["building:type"] + "</br>");return a;
}
function fnSicherheitAdditional(b) {
    var a = "";"surveillance" == b.man_made && ("indoor" == b.surveillance && (a += "indoor surveillance"), "outdoor" == b.surveillance && (a += "outdoor surveillance"), "public" == b.surveillance && (a += "public surveillance"), "camera" == b["surveillance:type"] && (a += "type of surveillance: camera"), "guard" == b["surveillance:type"] && (a += "type of surveillance: guard"), "ALPR" == b["surveillance:type"] && (a += "type of surveillance: ALPR"), "town" == b["surveillance:zone"] && (a += "zone of surveillance: town"), "parking" == b["surveillance:zone"] && (a += "zone of surveillance: parking"), "traffic" == b["surveillance:zone"] && (a += "zone of surveillance: traffic"), "shop" == b["surveillance:zone"] && (a += "zone of surveillance: shop"), "bank" == b["surveillance:zone"] && (a += "zone of surveillance: bank"), "building" == b["surveillance:zone"] && (a += "zone of surveillance: building"));return a;
}
function fnWreckInfo(b) {
    var a = "";"wreck" == b.historic && (b["wreck:date_sunk"] && (a += "sunk: " + b["wreck:date_sunk"] + "<br/>"), b["wreck:depth"] && (a += "depth: " + b["wreck:depth"] + "<br/>"), b["wreck:clearance"] && (a += "clearance: " + b["wreck:clearance"] + "<br/>"), b["wreck:date_commissioned"] && (a += "commissioned: " + b["wreck:date_commissioned"] + "<br/>"), b["wreck:gross_tonnage"] && (a += "gross tonnage: " + b["wreck:gross_tonnage"] + "<br/>"), b["wreck:length"] && (a += "length: " + b["wreck:length"] + "<br/>"), b["wreck:width"] && (a += "width: " + b["wreck:width"] + "<br/>"), b["wreck:cargo"] && (a = "timber" == b["wreck:cargo"] ? a + "cargo: timber<br/>" : "coal" == b["wreck:cargo"] ? a + "cargo: coal<br/>" : a + ("cargo: " + b["wreck:cargo"] + "<br/>")), "yes" == b["wreck:visible_at_low_tide"] && (a += "visible at low tide: yes<br/>"), "no" == b["wreck:visible_at_low_tide"] && (a += "visible at low tide: no<br/>"), "yes" == b["wreck:visible_at_high_tide"] && (a += "visible at high tide: yes<br/>"), "no" == b["wreck:visible_at_high_tide"] && (a += "visible at high tide: no<br/>"), "yes" == b.access && (a += "accessible<br/>"), "no" == b.access && (a += "no access possible<br/>"), "permit_required" == b.access && (a += "permit required for acces<br/>"));return a;
}
function fnKlosterAdditional(b) {
    var a = "";if (b["monastery:type"]) switch (b["monastery:type"]) {case "monastery":
            a += "type: monastery<br/>";break;case "convent":
            a += "type: convent<br/>";break;case "canonry":
            a += "type: canonry<br/>";break;case "commandry":
            a += "type: commandry<br/>";break;case "hermitage":
            a += "type: hermitage<br/>";break;default:
            a += "type: unknown<br/>";}b["community:gender"] && ("male" == b["community:gender"] && (a += "gender: male<br/>"), "female" == b["community:gender"] && (a += "gender: female<br/>"));
    b.religious_rank && ("abbey" == b.religious_rank ? a += "religious rank: abbey<br/>" : "abbey" == b.religious_rank && (a += "religious rank: abbey<br/>"));"yes" == b.shrine && (a += "feature: shrine<br/>");"yes" == b.sanctuary && (a += "feature: sanctuary<br/>");if (b.religion) switch (b.religion) {case "animist":
            a += "religion: animist<br/><br/>";break;case "bahai":
            a += "religion: bahai<br/>";break;case "buddhist":
            a += "religion: buddhist<br/>";break;case "christian":
            a += "religion: christian<br/>";break;case "hindu":
            a += "religion: hindu<br/>";
            break;case "IglesiaNiCristo":
            a += "religion: IglesiaNiCristo<br/>";break;case "jain":
            a += "religion: jain<br/>";break;case "jewish":
            a += "religion: jewish<br/>";break;case "multifaith":
            a += "religion: multifaith<br/>";break;case "muslim":
            a += "religion: muslim<br/>";type += "Mosque<br/>";break;case "pagan":
            a += "religion: pagan<br/>";break;case "pastafarian":
            a += "religion: pastafarian<br/>";break;case "scientologist":
            a += "religion: scientologist<br/>";break;case "shinto":
            a += "religion: shinto<br/>";break;case "sikh":
            a += "religion: sikh<br/>";break;case "spiritualist":
            a += "religion: spiritualist<br/>";break;case "taoist":
            a += "religion: taoist<br/>";break;case "unitarian":
            a += "religion: unitarian<br/>";break;case "yazidi":
            a += "religion: yazidi<br/>";break;case "zoroastrian":
            a += "eligion: zoroastrian<br/>";break;default:
            a += "religion: unknown<br/>";}if (b.denomination) switch (b.denomination) {case "anglican":
            a += "denomination: Anglican<br/><br/>";break;case "baptist":
            a += "denomination: Baptist<br/>";break;case "catholic":
            a += "denomination: Catholic<br/>";
            break;case "roman_catholic":
            a += "denomination: Roman Catholic<br/>";break;case "old_catholic":
            a += "denomination: Old Catholic<br/>";break;case "greek_catholic":
            a += "denomination: Greek Catholic<br/>";break;case "evangelical":
            a += "denomination: Evangelical";case "jehovahs_witness":
            a += "denomination: Jehovahs Witness<br/>";break;case "lutheran":
            a += "denomination: Lutheran<br/>";break;case "mennonite":
            a += "denomination: Mennonite<br/>";break;case "messianic_jewish":
            a += "denomination: Messianic Jewish<br/>";
            break;case "methodist":
            a += "denomination: Methodist<br/>";break;case "mormon":
            a += "denomination: Mormon<br/>";break;case "new_apostolic":
            a += "denomination: New Apostolic<br/>";break;case "orthodox":
            a += "denomination: Orthodox<br/>";break;case "greek_orthodox":
            a += "denomination: Greek Orthodox<br/>";break;case "coptic_orthodox":
            a += "denomination: coptic orthodox<br/>";break;case "pentecostal":
            a += "denomination: pentecostal<br/>";break;case "presbyterian":
            a += "denomination: Presbyterian<br/>";break;case "protestant":
            a += "denomination: Protestant<br/>";break;case "quaker":
            a += "denomination: Quaker<br/>";break;case "reformed":
            a += "denomination: Reformed<br/>";break;case "russian_orthodox":
            a += "denomination: Russian-Orthodox<br/>";break;case "seventh_day_adventist":
            a += "denomination: Seventh Day Adventist<br/>";break;case "christian_community":
            a += "denomination: Christian Community<br/>";break;case "adventist":
            a += "denomination: Adventist<br/>";break;case "alliance":
            a += "denomination: Alliance<br/>";break;case "assemblies_of_god":
            a += "denomination: Assemblies of God<br/>";break;case "apostolic":
            a += "denomination: Apostolic<br/>";break;case "armenian_apostolic":
            a += "denomination: Armenian Apostolic<br/>";break;case "assyrian":
            a += "denomination: Assyrian<br/>";break;case "christ_scientist":
            a += "denomination: Christ Scientist<br/>";break;case "church_of_scotland":
            a += "denomination: Church of Scotland<br/>";break;case "czechoslovak_hussite":
            a += "denomination: Czechoslovak Hussite<br/>";break;case "dutch_reformed":
            a += "denomination: Dutch Reformed<br/>";
            break;case "exclusive_brethren":
            a += "denomination: Exclusive Brethren<br/>";break;case "foursquare":
            a += "denomination: Foursquare<br/>";break;case "kimbanguist":
            a += "denomination: Kimbanguist<br/>";break;case "living_waters_church":
            a += "denomination: Living Waters Church<br/>";break;case "mariavite":
            a += "denomination: Mariavite<br/>";break;case "maronite":
            a += "denomination: Maronite<br/>";break;case "moravian":
            a += "denomination: Moravian<br/>";break;case "nazarene":
            a += "denomination: Nazarene<br/>";break;
        case "nondenominational":
            a += "denomination: Nondenominational<br/>";break;case "old_believers":
            a += "denomination: Old Believers<br/>";break;case "polish_catholic":
            a += "denomination: Polish-Catholic<br/>";break;case "salvation_army":
            a += "denomination: Salvation Army<br/>";break;case "santo_daime":
            a += "denomination: Santo Daime<br/>";break;case "serbian_orthodox":
            a += "denomination: Serbisch-Orthodox<br/>";break;case "spiritism":
            a += "denomination: Spiritism<br/>";break;case "united":
            a += "denomination: United<br/>";
            break;case "united_church_of_christ":
            a += "denomination: United Church of Christ<br/>";break;case "united_free_church_of_scotland":
            a += "denomination: United Free Church of Scotland<br/>";break;case "united_methodist":
            a += "denomination: United Methodist<br/>";break;case "united_reformed":
            a += "denomination: United Reformed<br/>";break;case "uniting":
            a += "denomination: Uniting<br/>";break;case "church_of_sweden":
            a += "denomination: Church of Sweden<br/>";break;case "mission_covenant_church_of_sweden":
            a += "denomination: Mission Covenant Church Of Sweden<br/>";
            break;case "alternative":
            a += "denomination: alternative<br/>";break;case "ashkenazi":
            a += "denomination: ashkenazi<br/>";break;case "buchari":
            a += "denomination: buchari<br/>";break;case "conservative":
            a += "denomination: conservative<br/>";break;case "egalitarian":
            a += "denomination: egalitarian<br/>";break;case "hasidic":
            a += "denomination: hasidic<br/>";break;case "humanistic":
            a += "denomination: humanistic<br/>";break;case "kabbalah":
            a += "denomination: kabbalah<br/>";break;case "kabbalistic":
            a += "denomination: kabbalistic<br/>";
            break;case "karaite":
            a += "denomination: karaite<br/>";break;case "liberal":
            a += "denomination: liberal<br/>";break;case "lubavitch":
            a += "denomination: lubavitch<br/>";break;case "lubavitch_messianic":
            a += "denomination: lubavitch messianic<br/>";break;case "mizrachi_baghdadi":
            a += "denomination: mizrachi baghdadi<br/>";break;case "mizrachi_chida":
            a += "denomination: mizrachi chida<br/>";break;case "mizrachi_jerusalemite":
            a += "denomination: mizrachi jerusalemite<br/>";break;case "mizrachi_livorno":
            a += "denomination: mizrachi livorno<br/>";
            break;case "mizrachi_moroccan":
            a += "denomination: mizrachi moroccan<br/>";break;case "modern_orthodox":
            a += "denomination: modern orthodox<br/>";break;case "neo_orthodox":
            a += "denomination: neo orthodox<br/>";break;case "nondenominational":
            a += "denomination: nondenominational<br/>";break;case "orthodox":
            a += "denomination: orthodox<br/>";break;case "orthodox_ashkenaz":
            a += "denomination: orthodox ashkenaz<br/>";break;case "orthodox_sefard":
            a += "denomination: orthodox sefard<br/>";break;case "progressive":
            a += "denomination: progressive<br/>";break;case "reconstructionist":
            a += "denomination: reconstructionist<br/>";break;case "reform":
            a += "denomination: reform<br/>";break;case "renewal":
            a += "denomination: renewal<br/>";break;case "samaritan":
            a += "denomination: samaritan<br/>";break;case "sefardi":
            a += "denomination: sefardi<br/>";break;case "sefardi_amsterdam":
            a += "denomination: sefardi amsterdam<br/>";break;case "sefardi_london":
            a += "denomination: sefardi london<br/>";break;case "traditional":
            a += "denomination: traditional<br/>";
            break;case "ultra_orthodox":
            a += "denomination: ultra orthodox<br/>";break;case "unaffiliated":
            a += "denomination: unaffiliated<br/>";break;case "yemenite":
            a += "denomination: yemenite<br/>";break;case "yemenite_baladi":
            a += "denomination: yemenite baladi<br/>";break;case "yemenite_shami":
            a += "denomination: yemenite shami<br/>";break;case "ahmadiya":
            a += "denomination: ahmadiya<br/>";break;case "alaouite":
            a += "denomination: alaouite<br/>";break;case "druze":
            a += "denomination: druze<br/>";break;case "ibadi":
            a += "denomination: ibadi<br/>";break;case "ismaili":
            a += "denomination: ismaili<br/>";break;case "shia":
            a += "denomination: shia<br/>";break;case "sunni":
            a += "denomination: sunni<br/>";break;case "nichiren":
            a += "denomination: nichiren<br/>";break;case "jodo_shinshu":
            a += "denomination: jodo shinshu<br/>";break;case "jodo_shu":
            a += "denomination: jodo shu<br/>";break;case "vajrayana":
            a += "denomination: vajrayana<br/>";break;case "shingon_shu":
            a += "denomination: shingon shu<br/>";break;case "zen":
            a += "denomination: zen<br/>";
            break;case "thai_mahanikaya":
            a += "denomination: thai mahanikaya<br/>";break;case "thai_thammayut":
            a += "denomination: thai thammayut<br/>";break;case "asatru":
            a += "denomination: asatru<br/>";break;case "celtic":
            a += "denomination: celtic<br/>";break;case "greco_roman":
            a += "denomination: greco roman<br/>";break;case "wicca":
            a += "denomination: wicca<br/>";break;case "irani":
            a += "denomination: irani<br/>";break;case "parsi":
            a += "denomination: parsi<br/>";break;default:
            a += "unknown<br/>";}if (b.community) switch (b.community) {case "AA":
            a += "community (AA): Augustinians of the Assumption <br/>";break;case "BSCM":
            a += "community (BSCM): Adorers of the Sacred Heart of Jesus of Montmartre <br/>";break;case "CBMV":
            a += "community (CBMV): Augustiner-Chorfrauen B.M.V.<br/>";break;case "CO":
            a += "community (CO): Oratorians<br/>";break;case "CMC":
            a += "community (CMC): Congregation of the Mother Co-Redemptrix<br/>";break;case "CRSP":
            a += "community (CRSP): Kongregation der Regularkleriker vom hl. Paulus (Barnabiten)<br/>";break;case "CSJ":
            a += "community (CSJ): Carmel Saint-Joseph<br/>";
            break;case "CSSP":
            a += "community (CSSP): Congr\xE9gation du Saint-Esprit<br/>";break;case "CSSR":
            a += "community (CSSR): Congr\xE9gation du Tr\xE8s Saint R\xE9dempteur<br/>";break;case "FCJM":
            a += "community (FCJM): Franciscan Sisters, Daughters of the Sacred Heart of Jesus and Mary<br/>";break;case "FMGB":
            a += "community (FMGB): Suore Francescane Missionarie di Ges\xF9 Bambino<br/>";break;case "FMH":
            a += "community(FMH): Congregatio Filiarum Mariae Sanctissimae ab Horto<br/>";break;case "FMM":
            a += "community (FMM): Franciscaines missionnaires de Marie<br/>";break;case "FSC":
            a += "community (FSC): Fr\xE8res des \xC9coles chr\xE9tiennes<br/>";break;case "MCCI":
            a += "community (MCCI): Missionnaires comboniens du Sacr\xE9-C\u0153ur<br/>";break;case "MSFS":
            a += "community (MSFS): Missionnaires de Saint Fran\xE7ois de Sales<br/>";break;case "OCart":
            a += "community (OCart): Order of the Carthusians<br/>";break;case "OCC":
            a += "community (OCC): Ordre de Notre Dame du Mont-Carmel<br/>";break;case "OCD":
            a += "community (OCD): Ordre des Carmes d\xE9chaux<br/>";break;case "OCSO":
            a += "community (OCSO): Trappists (lat. Ordo Cisterciensis Strictioris Observantiae)<br/>";break;case "OFM":
            a += "community (OFM): Ordre des Fr\xE8res Mineurs (Franziskaner)<br/>";break;case "OFMCap":
            a += "community (OFMCap): Ordre des Fr\xE8res Mineurs Capucins<br/>";break;case "OFMConv":
            a += "community (OFMConv): Ordre des Fr\xE8res Mineurs Conventuels<br/>";break;case "OFS":
            a += "community (OFS): Franciscans secular Third Order<br/>";
            break;case "OMI":
            a += "community (OMI): Oblats de Marie<br/>";break;case "OP":
            a += "community (OP): Ordre des Fr\xE8res Pr\xEAcheurs<br/>";break;case "OPraem":
            a += "community (OPraem): Ordre des chanoines r\xE9guliers de Pr\xE9montr\xE9<br/>";break;case "OSB":
            a += "community (OSB): Order of Saint Benedict<br/>";break;case "OSC":
            a += "community (OSC): Ordre de Sainte-Claire ou Ordre des Pauvres Dames<br/>";break;case "OSSS":
            a += "community (OSSS): Ordre de Sainte-Brigitte<br/>";break;case "OVM":
            a += "community (OVM): Order of the Visitation of Holy Mary (Salesianerinnen)<br/>";
            break;case "PSDP":
            a += "community (PSDP): Petites s\u0153urs des pauvres (Kleinen Schwestern der Armen)<br/>";break;case "PFJ":
            a += "community (PFJ): Petits Fr\xE8res de J\xE9sus<br/>";break;case "SDB":
            a += "community (SDB): Soci\xE9t\xE9 de Saint Fran\xE7ois de Sales<br/>";break;case "SJ":
            a += "community (SJ): Compagnie de J\xE9sus<br/>";break;case "SOC":
            a += "community (SOC): Order of Cistercians<br/>";break;case "SSCC":
            a += "community (SSCC): Congregation of the Sacred Hearts of Jesus and Mary<br/>";
            break;case "SSF":
            a += "community (SSF): Society of St Francis<br/>";break;case "SSJE":
            a += "community (SSJE): Society of St John the Evangelist<br/>";break;case "SSpS":
            a += "community (SSpS): Steyler Missionsschwestern<br/>";break;case "TOR":
            a += "community (TOR): Terzo Ordine Regolare di San Francesco<br/>";break;default:
            a += "unknown<br/>";}return a;
}var fnTestInfoPopup = function fnTestInfoPopup(b) {
    b = b.getProperties();var a = "",
        c;for (c in b) {
        a = a + c + "=" + b[c] + "<br/>";
    }return '<div class="c4g_popup_text" style="width:300px;">' + a + "</div>";
};

/***/ }),

/***/ "./Resources/public/js/c4g-maps-proxy.js":
/*!***********************************************!*\
  !*** ./Resources/public/js/c4g-maps-proxy.js ***!
  \***********************************************/
/*! exports provided: MapProxy */
/*! exports used: MapProxy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MapProxy; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_baselayer_controller__ = __webpack_require__(/*! ./c4g-baselayer-controller */ "./Resources/public/js/c4g-baselayer-controller.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_layer_controller__ = __webpack_require__(/*! ./c4g-layer-controller */ "./Resources/public/js/c4g-layer-controller.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_locationstyle_controller__ = __webpack_require__(/*! ./c4g-locationstyle-controller */ "./Resources/public/js/c4g-locationstyle-controller.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__ = __webpack_require__(/*! ./c4g-maps-misc-spinner */ "./Resources/public/js/c4g-maps-misc-spinner.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// 'namespace'


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};

'use strict';









var langConstants = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    langConstants = __WEBPACK_IMPORTED_MODULE_7__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  } else if (mapData.lang === "en") {
    langConstants = __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
  } else {
    // fallback
    langConstants = __WEBPACK_IMPORTED_MODULE_7__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
  }
}

var c4g = this.c4g;
var MapProxy = function () {
  function MapProxy(options) {
    _classCallCheck(this, MapProxy);

    var mapData;

    this.options = jQuery.extend({
      mapController: false
    }, options);
    if (!this.options.mapController) {
      return false;
    }

    c4g.maps.editorStyles = c4g.maps.editorStyles || {};

    //window.c4gMapsHooks.proxy_fillPopup = [];

    this.hook_baselayer_loaded = [];
    this.hook_baselayer_visibility = [];
    this.hook_layer_loaded = [];
    this.hook_layer_visibility = [];
    this.hook_map_click = [];
    this.hook_map_zoom = [];

    // add global hook for accessibility when there is no proxy reference
    window.c4gMapsHooks = window.c4gMapsHooks || {};
    window.c4gMapsHooks.proxy_layer_loaded = window.c4gMapsHooks.proxy_layer_loaded || [];

    this.baselayerIds = [];
    this.activeBaselayerId = undefined;
    this.layerIds = [];
    this.activeLayerIds = {};

    this.requestFunctions = {};
    this.request = {};

    this.baselayers_loaded = false;
    this.layers_loaded = false;

    mapData = this.options.mapController.data;

    this.mapId = mapData.id;

    this.api_baselayer_url = this.options.mapController.data.api.baselayer + '/' + mapData.profile;
    this.api_layer_url = this.options.mapController.data.api.layer + '/' + this.mapId;
    this.api_layercontent_url = this.options.mapController.data.api.layercontent;
    //this.api_layercontentdata_url = this.options.mapController.data.api.layercontentdata;
    this.api_layercontentdata_url = "con4gis/layerContentDataService";
    this.api_locstyle_url = this.options.mapController.data.api.locstyle;
    this.api_infowindow_url = this.options.mapController.data.api.infowindow;
    this.options = options;

    // this.initialize();
  }

  _createClass(MapProxy, [{
    key: "initialize",
    value: function initialize() {
      var self, map;

      self = this;
      map = this.options.mapController.map;

      this.baselayerController = new __WEBPACK_IMPORTED_MODULE_1__c4g_baselayer_controller__["a" /* C4gBaselayerController */](this);
      this.baselayerController.loadBaseLayers();
      this.layerController = new __WEBPACK_IMPORTED_MODULE_2__c4g_layer_controller__["a" /* C4gLayerController */](this);
      this.layerController.loadLayers();
      this.locationStyleController = new __WEBPACK_IMPORTED_MODULE_3__c4g_locationstyle_controller__["a" /* C4gLocationStyleController */](this);
      this.addPopUp();

      //TODO check this, nearly the same as below
      map.on('change:view', function () {
        // zoom-observer
        //
        map.getView().on('change:resolution', function () {
          var layerId, layer;

          // check layer zoom-bounds
          // @TODO: Use "self.activeLayerIds = false" ?
          for (layerId in self.activeLayerIds) {
            if (self.activeLayerIds.hasOwnProperty(layerId)) {
              layer = self.layerController.arrLayers[layerId];
              if (self.checkLayerIsActiveForZoom(layerId)) {
                if (layer.isInactive) {
                  self.layerController.showLayer(layerId);
                }
              } else {
                self.layerController.hideLayer(layerId, true);
              }
            }
          }

          // hooks
          __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.hook_map_zoom);

          if (self.options.mapController.data.caching && map.getView().getZoom()) {
            __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].storeValue('zoom', map.getView().getZoom());
          }
        }); // end of "zoom-observer"
      }); // end of "zoom-observer"

      // zoom-observer
      //
      map.getView().on('change:resolution', function () {
        var layerId, layer;

        // check layer zoom-bounds
        // @TODO: Use "self.activeLayerIds = false" ?
        for (layerId in self.activeLayerIds) {
          if (self.activeLayerIds.hasOwnProperty(layerId)) {
            layer = self.layerController.arrLayers[layerId];
            if (self.checkLayerIsActiveForZoom(layerId)) {
              if (layer.isInactive) {
                self.layerController.showLayer(layerId);
              }
            } else {
              self.layerController.hideLayer(layerId, true);
            }
          }
        }

        // hooks
        __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.hook_map_zoom, self);

        if (self.options.mapController.data.caching && map.getView().getZoom()) {
          __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].storeValue('zoom', map.getView().getZoom());
        }
      }); // end of "zoom-observer"

      map.getView().on('change:center', function (evt) {
        if (self.options.mapController.data.caching) {
          var coordinate = ol.proj.toLonLat(map.getView().getCenter());
          if (coordinate) {
            __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].storeValue('lon', coordinate[0]);
            __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].storeValue('lat', coordinate[1]);
          }
        }
        window.c4gMapsHooks.map_center_changed = window.c4gMapsHooks.map_center_changed || [];
        __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.map_center_changed, map.getView().getCenter());
      }); // end of "center-observer"

      // click-observer
      //
      map.on('click', function (clickEvent) {

        var feature, fFeatures, layer, popupInfos, currentZoom, minZoom, newCenter, geometry, coord, setPopup, styleFunc, styleCluster, objPopup;

        //ToDo check new function call with ol 4.3
        feature = map.forEachFeatureAtPixel(clickEvent.pixel, function (feature, layer) {
          return feature;
        });

        layer = map.forEachFeatureAtPixel(clickEvent.pixel, function (feature, layer) {
          return layer;
        });

        if (layer && layer.getStyle()) {
          styleFunc = layer.getStyle();
          if (typeof styleFunc === "function" && styleFunc(feature, currentZoom) && styleFunc(feature, currentZoom)['0']) {
            styleCluster = styleFunc(feature, currentZoom)['0'].clone();
            if (styleCluster && styleCluster.getImage()) {
              styleCluster.getImage().setScale(styleCluster.getImage().getScale() * 0.7);
            }
          }
        }

        fFeatures = feature ? feature.get('features') : false;
        if (!(fFeatures && fFeatures.length === 1)) {
          // cluster multiple POI
          if (fFeatures) {
            if (fFeatures[0].get('cluster_popup') == 1) {
              map.getView().setCenter(clickEvent.coordinate);
              currentZoom = map.getView().getZoom();
              minZoom = self.options.mapController.data.cluster_all ? self.options.mapController.data.cluster_zoom : fFeatures['0'].get('cluster_zoom');
              if (currentZoom >= minZoom) {
                setPopup = [];
                setPopup.content = '';
                setPopup.async = false;
                for (var i = 0; i < fFeatures.length; i++) {
                  setPopup.content = setPopup.content.concat(fFeatures[i].get('popup').content);
                }
                feature = fFeatures[0].clone();
                feature.set('popup', setPopup);
              } else {
                map.getView().setZoom(currentZoom + 1);
              }
            } else {

              feature.setStyle(new ol.style.Style({
                image: new ol.style.Circle({
                  fill: new ol.style.Fill({
                    opacity: 0
                  }),
                  radius: 0
                })
              }));
              feature = false;

              // animation
              map.getView().animate({
                start: +new Date(),
                duration: 1000,
                resolution: map.getView().getResolution(),
                center: [0, 0]
                //rotation: Math.PI
              });

              currentZoom = map.getView().getZoom();
              newCenter = map.getCoordinateFromPixel(clickEvent.pixel);
              minZoom = self.options.mapController.data.cluster_all ? self.options.mapController.data.cluster_zoom : fFeatures['0'].get('cluster_zoom');

              //ToDo remove with structure element param
              if (currentZoom >= minZoom) {

                //if (currentZoom >= map.getView().getMaxZoom()) {
                //open the cluster after zooming
                var pix = map.getView().getResolution();
                var max = fFeatures.length;
                var r = pix * 12 * (0.5 + max / 4);
                for (var i = 0; i < max; i++) {
                  var a = 2 * Math.PI * i / max;
                  if (max == 2 || max == 4) a += Math.PI / 4;
                  var p = [newCenter[0] + r * Math.sin(a), newCenter[1] + r * Math.cos(a)];
                  var coordinate = ol.proj.toLonLat(p);
                  var f = [];
                  f.push(fFeatures[i]);
                  var cf = new ol.Feature({
                    geometry: new ol.geom.Point(p),
                    features: f,
                    style: fFeatures[i].get('style')
                  });
                  layer.getSource().addFeature(cf);
                  map.getView().setCenter(newCenter);
                }
              } else {
                currentZoom += 1;
              }

              map.getView().setCenter(newCenter);
              map.getView().setZoom(currentZoom);
            }
          }
        } else if (fFeatures && fFeatures.length === 1) {
          feature = fFeatures[0];
        }

        if (self.options.mapController.controls.editor && self.options.mapController.controls.editor.isOpen()) {
          // do not show popup when editor is open
          if (feature && feature.get('projectId')) {
            // but call click hooks
            var result = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(self.hook_map_click, clickEvent);
            return false;
          }
        }
        popupInfos = {};
        if (feature && feature.get('popup')) {
          // single POI
          popupInfos = feature.get('popup');
        } else if (layer && layer.popup) {
          popupInfos = layer.popup;
        } else {
          feature = false;
        }
        if (feature && feature.get('loc_linkurl')) {
          if (self.options.mapController.data.link_newwindow === '1') {
            window.open(feature.get('loc_linkurl'));
          } else {
            window.open(feature.get('loc_linkurl'), "_self");
          }
        } else {
          if (feature && feature.get('zoom_onclick') && feature.get('zoom_onclick') != 0) {
            map.getView().setZoom(feature.get('zoom_onclick'));
            map.getView().setCenter(feature.getGeometry().getCoordinates());
          } else if (layer && layer.zoom_onclick && layer.zoom_onclick != 0) {
            map.getView().setZoom(layer.zoom_onclick);
            map.getView().setCenter(clickEvent.coordinate);
          }

          if (feature) {
            geometry = feature.getGeometry();
            if (geometry instanceof ol.geom.Point) {
              coord = geometry.getCoordinates();
            } else {
              coord = clickEvent.coordinate;
            }

            c4g.maps.popup.popup.setPosition(coord);
            if (popupInfos.content) {
              c4g.maps.popup.$content.html('');
              c4g.maps.popup.$popup.addClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ACTIVE).addClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].LOADING);
              c4g.maps.popup.spinner.show();

              if (popupInfos.async === false || popupInfos.async == '0') {
                objPopup = {};
                objPopup.popup = popupInfos;
                objPopup.feature = feature;
                objPopup.layer = layer;
                // Call the popup hook for plugin specific popup content
                if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                  __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                }
                self.setPopup(objPopup);
              } else {
                jQuery.ajax({
                  dataType: "json",
                  url: self.api_infowindow_url + '/' + popupInfos.content
                }).done(function (data) {
                  var popupInfo = {
                    async: popupInfos.async,
                    content: data.content,
                    popup: popupInfos.popup,
                    routing_link: popupInfos.routing_link
                  };

                  objPopup = {};
                  objPopup.popup = popupInfo;
                  objPopup.feature = feature;
                  objPopup.layer = layer;

                  // Call the popup hook for plugin specific popup content
                  if (window.c4gMapsHooks !== undefined && _typeof(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                    __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                  }

                  self.setPopup(objPopup);
                });
              }
            } else {
              c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
            }
          } else {
            c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
          }

          // hooks
          __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.hook_map_click, clickEvent);
        }
      }); // end of "click-observer"


      // this.options.mapController.map.getLayers().on('change:length', function(event) {
      //     ;
      // });

    } // end of "initial"*

  }, {
    key: "combine",
    value: function combine(proxy) {
      var func = function func(event) {
        proxy.combineLayers(proxy);
        proxy.options.mapController.map.un('postrender', func);
      };
      proxy.options.mapController.map.on('postrender', func);
    }
  }, {
    key: "setPopup",
    value: function setPopup(popupConfig) {
      var feature,
          layer,
          popupContent,
          router,
          routeButtonWrapper,
          routeFromButton,
          routeFromButtonSpan,
          routeToButton,
          routeToButtonSpan,
          routingHandler,
          self = this;

      feature = popupConfig.feature;
      layer = popupConfig.layer;

      popupContent = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].replaceAllPlaceholders(popupConfig.popup.content, feature, layer);
      // @TODO: check for route-option & display "route-to"
      // NOTE: does not work async this way
      if (this.options.mapController.controls.router && popupConfig.popup.routing_link) {
        router = this.options.mapController.controls.router;

        routingHandler = function routingHandler(event) {
          if (self.options.mapController.activePortside !== router) {
            router.open();
          }

          router.setInput($(event.currentTarget).hasClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_FROM), feature.getGeometry().getCoordinates());
        }; // end of "routingHandler()"

        routeButtonWrapper = document.createElement('div');
        routeButtonWrapper.className = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_WRAPPER;

        routeFromButton = document.createElement('button');
        routeFromButton.className = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_FROM;
        jQuery(routeFromButton).click(routingHandler);
        routeButtonWrapper.appendChild(routeFromButton);

        routeFromButtonSpan = document.createElement('span');
        routeFromButtonSpan.innerHTML = langConstants.POPUP_ROUTE_FROM;
        routeFromButton.appendChild(routeFromButtonSpan);

        routeToButton = document.createElement('button');
        routeToButton.className = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ICON + ' ' + __WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].POPUP_ROUTE_TO;
        jQuery(routeToButton).click(routingHandler);
        routeButtonWrapper.appendChild(routeToButton);

        routeToButtonSpan = document.createElement('span');
        routeToButtonSpan.innerHTML = langConstants.POPUP_ROUTE_TO;
        routeToButton.appendChild(routeToButtonSpan);
      }

      if (popupContent.trim() || router) {
        c4g.maps.popup.$content.html(popupContent);
        if (router) {
          c4g.maps.popup.$content.append(routeButtonWrapper);
        }
        if (feature.getGeometry() && feature.getGeometry() instanceof ol.geom.Point) {
          c4g.maps.popup.popup.setPosition(feature.getGeometry().getCoordinates());
        }
      } else {
        // hide popup if there is no valid content left
        c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
      }

      c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].LOADING);
      c4g.maps.popup.spinner.hide();
    } // end of "setPopup()"


  }, {
    key: "addPopUp",
    value: function addPopUp() {

      var popUpElement = void 0,
          popUpCloseElement = void 0,
          popUpContent = void 0,
          popup = void 0;

      popUpElement = document.createElement('div');
      popUpElement.setAttribute('id', 'c4g_popup_' + this.options.mapController.data.mapId);
      popUpElement.className = 'c4g-popup-wrapper';

      popUpCloseElement = document.createElement('button');
      popUpCloseElement.className = "c4g-popup-close c4g-icon";

      popUpContent = document.createElement('div');
      popUpContent.className = "c4g-popup-content";

      popUpElement.appendChild(popUpCloseElement);
      popUpElement.appendChild(popUpContent);

      jQuery(popUpCloseElement).click(function (event) {
        event.preventDefault();
        c4g.maps.popup.$popup.removeClass(__WEBPACK_IMPORTED_MODULE_6__c4g_maps_constant__["a" /* cssConstants */].ACTIVE);
      });

      popup = new ol.Overlay({
        autoPan: true,
        element: popUpElement,
        positioning: 'bottom-left',
        offset: [-50, 0] /*,
                         autoPan: true,
                         autoPanAnimation: {
                         duration: 250
                         },
                         autoPanMargin: 20*/
      });

      c4g.maps.popup = {};
      c4g.maps.popup.popup = popup;
      // attach a spinner to the popup
      c4g.maps.popup.spinner = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__["a" /* Spinner */]({ target: popUpElement });

      this.options.mapController.map.addOverlay(popup);

      c4g.maps.popup.$popup = jQuery(c4g.maps.popup.popup.getElement());
      c4g.maps.popup.$content = jQuery('.c4g-popup-content', c4g.maps.popup.$popup);
    } // end of "addPopUp()"


    /**
     * @TODO: [checkLocationStyles description]
     *
     * @param   {[type]}  opt_options  [description]
     *
     * @return  {[type]}               [description]
     */

  }, {
    key: "checkLocationStyles",
    value: function checkLocationStyles(opt_options) {

      var options,
          neededLayerStyles,
          getLayerStyles,
          self = this;

      if (opt_options && (typeof opt_options === "undefined" ? "undefined" : _typeof(opt_options)) === "object") {
        options = opt_options;
      } else {
        options = {};
      }

      this.locationStyleController.arrLocStyles = this.locationStyleController.arrLocStyles || {};

      neededLayerStyles = [];
      getLayerStyles = function getLayerStyles(layers) {
        var i, element, index;

        // ToDo: Rekursion integrieren (test mit forum)
        for (index in layers) {
          if (layers.hasOwnProperty(index)) {
            element = layers[index];

            if (element.content) {
              for (i = 0; i < element.content.length; i += 1) {

                if (element.content[i]) {
                  if (element.content[i].locationStyle && element.content[i].locationStyle !== "0" && neededLayerStyles.indexOf(element.content[i].locationStyle) === -1 && (!self.locationStyleController.arrLocStyles[element.content[i].locationStyle] || self.locationStyleController.arrLocStyles[element.content[i].locationStyle].style === undefined)) {
                    neededLayerStyles.push(element.content[i].locationStyle);
                  }
                }
              }
            }
          }
        }
      };

      getLayerStyles(this.layerController.arrLayers);

      if (neededLayerStyles.length > 0) {
        this.locationStyleController.loadLocationStyles(neededLayerStyles, options);
      } else {
        if (options.done && typeof options.done === "function") {
          options.done();
        }
      }
    } // end of "checkLocationStyles()"

  }, {
    key: "combineLayers",
    value: function combineLayers(proxy) {

      var i,
          j,
          k,
          layerId,
          layers,
          contentDataLayer,
          contentData,
          layer,
          layerGroups = [],
          source,
          style,
          features = [],
          styles = [],
          oneFeature,
          feature,
          vectorSource,
          clusterSource,
          vectorLayer;

      if (proxy.options.mapController.data.cluster_all === '1') {
        contentData = proxy.options.mapController.data;
        for (i in proxy.activeLayerIds) {
          //loop to get all layers
          layers = c4g.maps.layers[i];

          if (layers.type === "gpx") {
            continue;
          }

          if (layers && layers.vectorLayer) {
            if (layers.vectorLayer.getLayers() && layers.vectorLayer.getLayers().getArray()[0] && layers.vectorLayer.getLayers().getArray()[0].getSource() && layers.vectorLayer.getLayers().getArray()[0].getSource().getFeatures().length > 0) {
              proxy.options.mapController.map.removeLayer(layers.vectorLayer);
            }

            contentDataLayer = layers.content;
            layers.vectorLayer.getLayers().content = contentDataLayer;
            layerGroups.push(layers.vectorLayer.getLayers());
          }
        }
        for (k = 0; k < layerGroups.length; k++) {
          //loop to extract features from layers
          if (layerGroups[k].getArray().length > 0) {
            layer = layerGroups[k].getArray();
            source = layer["0"].getSource();
            style = layer["0"].getStyle();

            oneFeature = true;
            feature = source.getFeatures();
            for (j = 0; j < feature.length; j++) {
              //loop over all features from a source
              if (feature[j].get("features")) {
                for (i = 0; i < feature[j].get("features").length; i++) {
                  //loop for clustered features
                  if (layerGroups[k].content[j]) {
                    style = this.locationStyleController.arrLocStyles[layerGroups[k].content[j].locationStyle];
                  } else if (layerGroups[k].content[0]) {
                    style = this.locationStyleController.arrLocStyles[layerGroups[k].content[0].locationStyle];
                  }

                  feature[j].get("features")[i].setStyle(style.style);
                  if (!feature[j].get("features")[i].get('popup')) {
                    feature[j].get("features")[i].set('popup', layer['0'].popup);
                  }
                }
                features.push(feature[j].get("features"));

                oneFeature = false;
              }
            }
            if (oneFeature) {
              //single not clustered feature
              if (feature.length >= 1) {
                if (!feature['0'].get('popup')) {
                  feature['0'].set('popup', layer.popup);
                }
                features.push(feature);
              }
            }
          }
        }

        vectorSource = new ol.source.Vector({
          projection: 'EPSG:3857'

        });

        for (i = 0; i < features.length; i++) {
          vectorSource.addFeatures(features[i]);
        }

        clusterSource = new ol.source.Cluster({
          distance: 40,
          //threshold: 2, //minimum element count
          source: vectorSource
        });
        var styleForCluster = function styleForCluster(feature, resolution) {
          if (feature && feature.get('features') && feature.get('features')['0'].getStyle()) {
            style = feature.get('features')['0'].getStyle()(feature);
            if (feature !== undefined && feature !== null && feature.self !== window) {
              var fFeatures = feature.get('features');
              var size = fFeatures.length;
              if (size > 1) {
                if (!style) {
                  style = [];
                }

                // calculate bubble-offset
                var iconOffset = [0, 0];
                if (style[0]) {
                  if (typeof style[0].getImage().getRadius === "function") {
                    var radius = parseInt(style[0].getImage().getRadius(), 10);
                    if (radius) {
                      iconOffset = [0, radius];
                    }
                  } else if (typeof style[0].getImage().getAnchor === "function") {
                    iconOffset = style[0].getImage().getAnchor() || [0, 0];
                  }
                }

                var fillcolor = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity('4975A8', {
                  unit: '%',
                  value: 70
                });

                if (contentData.cluster_fillcolor) {
                  fillcolor = __WEBPACK_IMPORTED_MODULE_5__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(contentData.cluster_fillcolor, {
                    unit: '%',
                    value: 70
                  });
                }
                var fontcolor = contentData.cluster_fontcolor ? '#' + contentData.cluster_fontcolor : '#FFFFFF';

                style.push(new ol.style.Style({
                  text: new ol.style.Text({
                    text: "●",
                    font: "60px sans-serif",
                    offsetX: -1 * iconOffset[0],
                    offsetY: -1 * iconOffset[1],
                    fill: new ol.style.Fill({
                      color: fillcolor
                    })
                  })
                }));
                style.push(new ol.style.Style({
                  text: new ol.style.Text({
                    text: size.toString(),
                    offsetX: -1 * iconOffset[0],
                    offsetY: -1 * iconOffset[1] + 3,
                    fill: new ol.style.Fill({
                      color: fontcolor
                    })
                  })
                }));
              }
            }
          } else {
            if (feature && feature.get('features') && feature.get('features')['0'].getStyle()) {
              return feature.get('features')['0'].getStyle()(feature);
            } else {
              return null;
            }
          }
          return style;
        };

        //vectorLayer = self.getVectorLayer(clusterSource, styleForCluster);

        vectorLayer = new ol.layer.Vector({
          name: 'Cluster',
          source: clusterSource,
          style: styleForCluster

        });

        var allLayers = proxy.options.mapController.map.getLayers().getArray();
        var missingLayer = true;
        for (i = 0; i < allLayers.length; i++) {

          if (allLayers[i].clusters) {
            allLayers[i] = vectorLayer;
            missingLayer = false;
          }
        }
        if (missingLayer) {
          proxy.options.mapController.map.addLayer(vectorLayer);
        }
      }
    } //end of combineLayers


  }, {
    key: "checkLayerIsActiveForZoom",
    value: function checkLayerIsActiveForZoom(layerId, opt_zoom) {
      var layer, zoom, layerContent, locstyle;

      if (!this.layerController.arrLayers[layerId]) {
        return false;
      }

      layer = this.layerController.arrLayers[layerId];

      if (opt_zoom) {
        zoom = opt_zoom;
      } else if (this.options.mapController.map.getView().getZoom() > -1) {
        zoom = this.options.mapController.map.getView().getZoom();
      } else {
        zoom = false;
      }
      if (layer.zoom === undefined) {
        if (layer.content && layer.content.length > 0) {
          for (var i = 0; i < layer.content.length; i++) {
            layerContent = layer.content[i];
            if (layerContent.locationStyle) {
              locstyle = this.locationStyleController.arrLocStyles[layerContent.locationStyle];
              // TODO check all locstyles and take the most constraining zoom value
              if (locstyle) {
                layer.zoom = {};
                if (locstyle.maxzoom) {
                  layer.zoom.max = locstyle.maxzoom;
                }
                if (locstyle.minzoom) {
                  layer.zoom.min = locstyle.minzoom;
                }
                if (layer.zoom.max || layer.zoom.min) {
                  break;
                }
              }
            }
          }
        }
      }
      if (typeof zoom === "number" && layer.zoom && (layer.zoom.min > zoom || layer.zoom.max > 0 && layer.zoom.max < zoom)) {
        return false;
      }

      return true;
    } // end of "checkLayerIsActive()"

  }]);

  return MapProxy;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-maps-utils.js":
/*!***********************************************!*\
  !*** ./Resources/public/js/c4g-maps-utils.js ***!
  \***********************************************/
/*! exports provided: utils */
/*! exports used: utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return utils; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_zoomlevel__ = __webpack_require__(/*! ./c4g-maps-control-zoomlevel */ "./Resources/public/js/c4g-maps-control-zoomlevel.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_popup_info_de__ = __webpack_require__(/*! ./c4g-maps-popup-info-de */ "./Resources/public/js/c4g-maps-popup-info-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_popup_info_en__ = __webpack_require__(/*! ./c4g-maps-popup-info-en */ "./Resources/public/js/c4g-maps-popup-info-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"


this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};







var popupFunctions = {};

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    popupFunctions = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_popup_info_de__;
  } else if (mapData.lang === "en") {
    popupFunctions = __WEBPACK_IMPORTED_MODULE_4__c4g_maps_popup_info_en__;
  } else {
    // fallback
    popupFunctions = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_popup_info_de__;
  }
}

(function ($, c4g) {
  'use strict';

  /**
   * c4g-Maps utility functions
   */

  c4g.maps.utils = $.extend(c4g.maps.utils, {
    /**
     *  Converts the first letter of a given string to uppercase, leaving the remaining string untouched.
     *
     *  @param    {string}    the string to capitalize
     *
     *  @return   {string}    the capitalized string
     */
    capitalizeFirstLetter: function capitalizeFirstLetter(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    },

    /**
     * Generate an unique id.
     *
     * The id is 9 characters long and prefixed with an underscore.
     *
     * @return  {string}  The generated id.
     */
    getUniqueId: function getUniqueId() {
      // Math.random should be unique because of its seeding algorithm.
      // Convert it to base 36 (numbers + letters), and grab the first 9 characters
      // after the decimal.
      return '_' + Math.random().toString(36).substr(2, 9);
    },

    /**
     * Encode input strings for GeoJSON-Objects properly,
     * so they will not break the Code.
     * Transforms:
     *   \ -> \\;
     *   " -> '';
     *   Ä -> &Auml;
     *   ä -> &auml;
     *   Ö -> &Ouml;
     *   ö -> &ouml;
     *   Ü -> &Uuml;
     *   ü -> &uuml;
     *
     * @param   {string}  input  [description]
     *
     * @return  {string}         [description]
     */
    encodeGeoJsonProperty: function encodeGeoJsonProperty(input) {
      var output;

      if (!input) {
        return '';
      }

      output = input.replace(/\\/g, '\\\\').replace(/\"/g, '\'\'').replace(/Ä/g, '&Auml;').replace(/ä/g, '&auml;').replace(/Ö/g, '&Ouml;').replace(/ö/g, '&ouml;').replace(/Ü/g, '&Uuml;').replace(/ü/g, '&uuml;');

      return output;
    }, // end of encodeGeoJsonProperty()

    /**
     * Decode input strings for GeoJSON-Objects properly,
     * so they will be displayed correctly.
     * Transforms:
     *   \\     -> \;
     *   ''     -> ";
     *   &Auml; -> Ä
     *   &auml; -> ä
     *   &Ouml; -> Ö
     *   &ouml; -> ö
     *   &Uuml; -> Ü
     *   &uuml; -> ü
     *
     * @param   {string}  input  [description]
     *
     * @return  {string}         [description]
     */
    decodeGeoJsonProperty: function decodeGeoJsonProperty(input) {
      var output;

      if (!input) {
        return '';
      }
      if (typeof input !== "string") {
        input = input + "";
      }

      output = input.replace(/\\\\/g, '\\').replace(/\'\'/g, '\"').replace(/&Auml;/g, 'Ä').replace(/&auml;/g, 'ä').replace(/&Ouml;/g, 'Ö').replace(/&ouml;/g, 'ö').replace(/&Uuml;/g, 'Ü;').replace(/&uuml;/g, 'ü');

      return output;
    }, // end of decodeGeoJsonProperty()

    /**
     * Create or replace an URL-parameter.
     *
     * If `opt_getKey` is `false` or `undefined` the given parameter, `param`,
     * will be applied as "hash-parameter".
     * e.g.:
     *   https://myurl.de:port/path/to/maps#param
     * Note, that already existing "hash-parameters" will be overriden,
     * whereas existing "GET-parameters" stay untouched.
     *
     * If `opt_getKey` is set, it will be applied as "GET-parameter".
     * e.g.:
     *   https://myurl.de:port/path/to/maps?opt_getKey=param
     * If the key described by `opt_getKey` is already existing, its value will be overriden,
     * otherwise the key-value-pair will be appended appropriatly.
     * Already existing "hash-parameters" will stay untouched.
     *
     * If `opt_execute` is `false` or `undefined`, the function will return the new link as `string`,
     * otherwise the "href/location" will be changed directly in the browser, which can cause a pagereload.
     *
     * @param  {string}                    param        [description]
     * @param  {undefined|boolean|string}  opt_getKey   Default: `undefined`
     * @param  {undefined|boolean}         opt_execute  Default: `undefined`
     */
    setUrlParam: function setUrlParam(param, opt_getKey, opt_execute) {
      var link, searchParam, paramReplaced, i;

      if ((typeof param === "undefined" ? "undefined" : _typeof(param)) === undefined) {
        return false;
      }

      link = location.origin + location.pathname;

      if (!opt_getKey) {
        // use hash-parameter
        if (opt_execute) {
          location.hash = param;
          return true;
        }
        link += location.search + '#' + param;
      } else {
        // use GET-parameter
        if (location.search) {
          // there are already search-parameters
          paramReplaced = false;
          opt_getKey = opt_getKey.toLowerCase();
          // replace parameter if already existent
          searchParam = location.search.replace(/([^=\?\&]+)=([^&]+)/gi, function (match, key, value, offset, originString) {
            if (key === opt_getKey) {
              paramReplaced = true;
              return key + '=' + param;
            }
            return match;
          });
          // otherwise append as new parameter
          if (!paramReplaced) {
            searchParam += '&' + opt_getKey + '=' + param;
          }
        } else {
          // this will be the only search-parameter in the URL
          searchParam = '?' + opt_getKey + '=' + param;
        }
        if (opt_execute) {
          location.search = searchParam;
          return true;
        }
        link += searchParam + location.hash;
      }

      return link;
    }, // end of setUrlParam()

    /**
     * Get search or hash URL-parameter as string.
     *
     * If `opt_getKey` is `false` or `undefined`, the hash-parameter of the URL is returned,
     * otherwise it will search for a GET-parameter and return its value.
     *
     * If a parameter is not existent, or empty, an empty string will be returned.
     *
     * @param   {undefined|string}  opt_getKey  Default: `undefined`
     *
     * @return  {string}                        The found parameter.
     */
    getUrlParam: function getUrlParam(opt_getKey) {
      var param, regEx;

      if (!opt_getKey) {
        param = location.hash.substring(1);
      } else {
        if (!location.search) {
          param = '';
        } else {
          regEx = new RegExp('[\?\&]' + opt_getKey + '=([^&]+)', 'i');
          param = regEx.exec(location.search);
          param = param ? param[1] : '';
        }
      }

      return param;
    }, // end of getUrlParam()

    /**
     * Delta-encode an array of numbers.
     * Note that the array will be sorted (lowest to highest)
     * before encoding.
     *
     * So after the encoding the first value of the output contains
     * the smallest number of the set and each following number just
     * represents the offset to its previous neighbor.
     *
     * This is mostly efficient for high numbers, that are "close to each other".
     *
     * Example:
     *   [1337, 11, 101, 123, 96, 69, 42, 42]
     *   will be sorted
     *   [11, 42, 42, 69, 96, 101, 123, 1337]
     *   and encoded to
     *   [11, 31, 0, 27, 27, 5, 22, 1214]
     *
     * @param   {array<numbers>}  arrInput  [description]
     *
     * @return  {array<numbers>}            [description]
     */
    deltaEncode: function deltaEncode(arrInput) {
      var arrOutput, i;

      if (!arrInput) {
        return [];
      }
      if (arrInput.length === 1) {
        return arrInput;
      }

      arrInput.sort(function (a, b) {
        return a - b;
      });

      arrOutput = [];
      arrOutput[0] = arrInput[0];
      for (i = 1; i < arrInput.length; i += 1) {
        arrOutput[i] = arrInput[i] - arrInput[i - 1];
      }

      return arrOutput;
    }, // end of deltaEncode()

    /**
     * Decode a delta-encoded array.
     * See `deltaEncode` function for more detailed information.
     *
     * @param   {array<numbers>}  arrInput  [description]
     *
     * @return  {array<numbers>}            [description]
     */
    deltaDecode: function deltaDecode(arrInput) {
      var arrOutput, i;

      if (!arrInput) {
        return [];
      }

      arrOutput = [];
      arrOutput[0] = parseInt(arrInput[0], 10);
      if (isNaN(arrInput[0])) {
        return [];
      }
      for (i = 1; i < arrInput.length; i += 1) {
        arrOutput[i] = parseInt(arrInput[i], 10) + arrOutput[i - 1];
        if (isNaN(arrOutput[i])) {
          return [];
        }
      }

      return arrOutput;
    }, // end of deltaDecode()

    /**
     * Check and call functions in `arrHookFunctions` with given `parameters`.
     *
     * @param   {array<function>}   arrHookFunctions  [description]
     * @param   {mixed}             parameters        [description]
     */
    callHookFunctions: function callHookFunctions(arrHookFunctions, parameters) {
      var j;

      if (arrHookFunctions && arrHookFunctions.length > 0) {
        for (j = 0; j < arrHookFunctions.length; j += 1) {
          if (typeof arrHookFunctions[j] === 'function') {
            arrHookFunctions[j](parameters);
          }
        }
      }
    }, // end of "callHookFunctions()"

    /**
     * Convert a hex-formated color value into rgba()-format.
     *
     * @param   {string|number}  hex          [description]
     * @param   {string|number}  opt_opacity  [description]
     *
     * @return  {string}                      [description]
     */
    getRgbaFromHexAndOpacity: function getRgbaFromHexAndOpacity(hex, opt_opacity, opt_array) {

      var bigint, r, g, b, a;

      bigint = parseInt(hex, 16);
      if (opt_opacity && opt_opacity.value) {
        opt_opacity.value = parseInt(opt_opacity.value);
      }

      if (opt_opacity && typeof opt_opacity !== 'number') {
        if ((typeof opt_opacity === "undefined" ? "undefined" : _typeof(opt_opacity)) === 'object' && opt_opacity.value) {
          opt_opacity = opt_opacity.value;
        } else {
          opt_opacity = 100;
        }
      }

      r = bigint >> 16 & 255;
      g = bigint >> 8 & 255;
      b = bigint & 255;
      a = opt_opacity ? opt_opacity / 100 : 1;
      if (opt_array) {
        return [r, g, b, a];
      }

      return "rgba(" + r + "," + g + "," + b + "," + a + ")";
    },

    /**
     * Reduce a defined style, to a simpler version.
     *
     * The reduced style is the first style of the defined styleset,
     * with a 1px thick stroke and a circle with a 5px radius.
     *
     * This can be used to display additional geometries with a main-geometry,
     * without having to define a whole new style.
     *
     * @param   {number|string}           styleId  [description]
     *
     * @return  {array<ol.style.Style>}            [description]
     */
    reduceStyle: function reduceStyle(styleId) {
      var style, reducedStyle, fillStyle, strokeStyle;

      if (!c4g.maps.locationStyles[styleId] || !c4g.maps.locationStyles[styleId].style) {
        return [];
      }

      style = c4g.maps.locationStyles[styleId].style()[0];

      fillStyle = style.getFill();
      strokeStyle = style.getStroke();
      strokeStyle.setWidth(1);

      reducedStyle = new ol.style.Style({
        image: new ol.style.Circle({
          fill: fillStyle,
          stroke: strokeStyle,
          radius: 5
        }),
        // text: style.getText(),
        stroke: strokeStyle,
        fill: fillStyle
      });

      return [reducedStyle];
    }, // end of "reduceStyle"

    /**
     * Measure the dimensions of the given geometry.
     *
     * If the geometry is a `LineString` the function will measure its length,
     * is it a `Polygon` it will measure the acreage,
     * otherwise it will return `0`.
     *
     * If the optional `opt_forceLineMeasure` parameter is `true`
     * and the geometry is a `Polygon` it will measure its perimeter instead
     * of its acreage.
     *
     * @param   {ol.geom.LineString|ol.geom.Polygon}   geometry              [description]
     * @param   {undefined|boolean}                    opt_forceLineMeasure  [description]
     *
     * @return  {array<string>|number}                                       [description]
     */
    measureGeometry: function measureGeometry(geometry, opt_forceLineMeasure, opt_forceSurfaceMeasure) {
      var value, sphere, coordinates, coord1, coord2, result, i;

      if (!geometry) {
        return false;
      }

      //sphere = new ol.Sphere(6378137);
      result = {};

      if (geometry instanceof ol.geom.LineString || geometry instanceof ol.geom.Polygon && opt_forceLineMeasure) {

        coordinates = geometry.getCoordinates();
        if (geometry instanceof ol.geom.Polygon) {
          coordinates = coordinates[0];
        }
        value = 0;
        for (i = 0; i < coordinates.length - 1; i += 1) {
          coord1 = ol.proj.transform(coordinates[i], 'EPSG:3857', 'EPSG:4326');
          coord2 = ol.proj.transform(coordinates[i + 1], 'EPSG:3857', 'EPSG:4326');
          value += ol.sphere.getDistance(coord1, coord2, 6378137);
        }
        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (value > 1000) {
          result.htmlValue = (Math.round(value / 1000 * 100) / 100).toFixed(2) + ' ' + 'km';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm';
        }
      } else if (geometry instanceof ol.geom.Polygon) {
        //geometry = /** @type {ol.geom.Polygon} */(geometry.clone().transform('EPSG:3857', 'EPSG:4326'));
        //coordinates = geometry.getLinearRing(0).getCoordinates();
        value = Math.abs(ol.sphere.getArea(geometry));
        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (value > 10000) {
          result.htmlValue = (Math.round(value / 1000000 * 100) / 100).toFixed(2) + ' ' + 'km<sup>2</sup>';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm<sup>2</sup>';
        }
      } else if (geometry instanceof ol.geom.Circle && opt_forceSurfaceMeasure) {
        var center = geometry.getCenter();
        var radius = geometry.getRadius();
        var edgeCoordinate = [center[0] + radius, center[1]];
        //var wgs84Sphere = new ol.Sphere(6378137);
        var value = ol.sphere.getDistance(ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'), ol.proj.transform(edgeCoordinate, 'EPSG:3857', 'EPSG:4326'), 6378137);

        value = Math.PI * Math.sqrt(value);

        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (value > 10000) {
          result.htmlValue = (Math.round(value / 1000000 * 100) / 100).toFixed(2) + ' ' + 'km<sup>2</sup>';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm<sup>2</sup>';
        }
      } else if (geometry instanceof ol.geom.Circle) {
        var center = geometry.getCenter();
        var radius = geometry.getRadius();
        var edgeCoordinate = [center[0] + radius, center[1]];
        //var wgs84Sphere = new ol.Sphere(6378137);
        var value = ol.sphere.getDistance(ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'), ol.proj.transform(edgeCoordinate, 'EPSG:3857', 'EPSG:4326'), 6378137);

        result.rawValue = (Math.round(value * 100) / 100).toFixed(2);
        if (result.rawValue > 10000) {
          result.htmlValue = (Math.round(value * 100 / 100) / 1000).toFixed(2) + ' ' + 'km';
        } else {
          result.htmlValue = result.rawValue + ' ' + 'm';
        }
      } else {
        result = 0;
      }

      return result;
    },

    /**
     * Calculate extent for an array of geometries.
     *
     * @param   {Array.<ol.geom.simpleGeometry>}  arrGeometries  [description]
     *
     * @return  {ol.Extent}                                      [description]
     */
    getExtentForGeometries: function getExtentForGeometries(arrGeometries) {
      var extentSource;

      if (!arrGeometries) {
        console.warn('Geometries missing for extent calculation');
        return false;
      }

      extentSource = new ol.source.Vector();
      extentSource.addFeatures(arrGeometries);

      return extentSource.getExtent() || ol.Extent([0, 0, 0, 0]);
    }, // end of getExtentForGeometries()

    /**
     * Fit view of `map` to a given array of `extents`.
     * Animated if `opt_animationDuration` is an integer > 0.
     *
     * @param   {object}     extents                 [description]
     * @param   {ol.Map}     map                    [description]
     * @param   {integer}    opt_animationDuration  [description]
     *
     * @return  {boolean}                           [description]
     */
    fitToExtents: function fitToExtents(extents, map, opt_padding, opt_animationDuration) {
      var view, padding, extent, key;

      if (!extents || !map) {
        console.warn('Missing extent or map for fitExtent');
        return false;
      }
      //extent = ol.extent.createEmpty();

      for (key in extents) {
        if (extents.hasOwnProperty(key)) {
          if (typeof extent === "undefined") {
            extent = extents[key];
          } else {
            ol.extent.extend(extent, extents[key]);
          }
        }
      }

      this.fitToExtent(extent, map, opt_padding, 5, 0, 0, 2);
    }, // end of fitToExtents

    /**
     * Fit view of `map` to a given `extent`.
     * Animated if `opt_animationDuration` is an integer > 0.
     *
     * @param   {ol.Extent}  extent                 [description]
     * @param   {ol.Map}     map                    [description]
     * @param   {array}      opt_padding            [description]
     * @param   {integer}    opt_animationDuration  [description]
     * @param   {integer}    opt_minZoom            [description]
     * @param   {integer}    opt_maxZoom            [description]
     * @param   {integer}    opt_minResolution      [description]
     *
     * @return  {boolean}                           [description]
     */
    fitToExtent: function fitToExtent(extent, map, opt_padding, opt_animationDuration, opt_minZoom, opt_maxZoom, opt_minResolution) {
      var view, padding, fitOptions;

      if (!extent || !map) {
        console.warn('Missing extent or map for fitExtent');
        return false;
      }

      view = map.getView();

      fitOptions = {
        'padding': opt_padding || [25, 25, 25, 25]
      };

      if (opt_minResolution && opt_minResolution > 0) {
        fitOptions.minResolution = opt_minResolution;
      }

      if (opt_minZoom && opt_minZoom >= 0) {
        fitOptions.minZoom = opt_minZoom;
      }

      if (opt_maxZoom && opt_maxZoom >= 0) {
        fitOptions.maxZoom = opt_maxZoom;
      }

      // animate the "fitting" when a duration is given and its greater than 0
      if (opt_animationDuration && opt_animationDuration > 0) {
        view.animate({
          start: +new Date(),
          duration: opt_animationDuration,
          resolution: view.getResolution(),
          center: [0, 0]
          //rotation: Math.PI
        });
        // map.beforeRender(
        //     ol.animation.pan({
        //       start: +new Date(),
        //       duration: opt_animationDuration,
        //       source: view.getCenter()
        //     }),
        //     ol.animation.zoom({
        //       start: +new Date(),
        //       duration: opt_animationDuration,
        //       resolution: view.getResolution()
        //     })
        // );
      }

      try {
        view.fit(extent, map.getSize(), { padding: [25, 25, 25, 25] });
        //view.fit(extent, map.getSize());
        //view.setZoom(view.getZoom()-1);
        return true;
      } catch (e) {
        return false;
      }
    }, // end of fitToExtent()

    /**
     * Convenience function to run all placeholder functions at once.
     *
     * @param   {string}                      strInput   [description]
     * @param   {ol.Feature}                  feature    [description]
     * @param   {ol.layer.Layer | undefined}  opt_layer  [description]
     *
     * @return  {string}                                 [description]
     */
    replaceAllPlaceholders: function replaceAllPlaceholders(strInput, feature, opt_layer) {
      var strOutput;

      // only check the first two parameters as they will be used by all placeholder-functions
      // -> for performance
      if (!strInput || !feature) {
        return strInput;
      }

      strOutput = this.replaceFunctionPlaceholders(strInput, feature, opt_layer);
      strOutput = this.replaceEditorVarsPlaceholders(strOutput, feature);
      strOutput = this.replaceAttributePlaceholders(strOutput, feature);

      return strOutput;
    }, // end of replaceAllPlaceholders()

    /**
     * Replace every occurance of `${FNfunctionName}`, in `strInput`,
     * with the result of `window.functionName(feature, style)`, if it exist.
     * Otherwise the placeholder will be simply removed (/replaced with '').
     * Style will be taken either from the feature, or the layer.
     *
     * @param   {string}          strInput  [description]
     * @param   {ol.Feature}      feature   [description]
     * @param   {ol.layer.Layer}  layer     [description]
     *
     * @return  {string}                    [description]
     */
    replaceFunctionPlaceholders: function replaceFunctionPlaceholders(strInput, feature, layer) {
      var strOutput;

      if (!strInput || !feature || !layer) {
        return strInput;
      }

      strOutput = strInput.replace(/\$\{FN([^\}]*)\}/g, function (match, functionName, offset, originString) {
        var style;

        // check if function exists
        if (typeof popupFunctions[functionName] === 'function') {
          // search style
          if (typeof feature.getStyle === 'function' && feature.getStyle() && typeof feature.getStyle() === 'function') {
            style = feature.getStyle();
          } else if (typeof layer.getStyle === 'function' && layer.getStyle()) {
            style = layer.getStyle();
          } else {
            return '';
          }
          return popupFunctions[functionName](feature, style);
        }
        return '';
      }); // end of replace()

      return strOutput;
    }, // end of replaceFunctionPlaceholders()

    /**
     * Replace placeholders, in `strInput`, for variables set by the geoEditor.
     * Valid placeholders are: ([key] represents the stringname of the variables key)
     *   `${EL[key]}`   =>  Label for the variable
     *   `${EVL[key]}`  =>  Label for the variable, if a value is set too
     *   `${EV[key]}`   =>  Value of the variable
     *   `${EVV[key]}`  =>  Same as `${EV[key]}`
     *
     * If no appropriate value can be found for a placeholder
     * it will simply be removed (/replaced with '').
     *
     * @param   {string}      strInput  [description]
     * @param   {ol.Feature}  feature   [description]
     *
     * @return  {string}                [description]
     */
    replaceEditorVarsPlaceholders: function replaceEditorVarsPlaceholders(strInput, feature) {
      var strOutput;

      if (!strInput || !feature || typeof feature.get !== 'function') {
        return strInput;
      }

      strOutput = strInput.replace(/\$\{(EV?[LV])([^\}]*)\}/g, function (match, type, evKey, offset, originString) {
        var editorVars, i;

        // check if feature has editorVars
        if (feature.get('editorVars')) {
          editorVars = feature.get('editorVars');
          // search for editorVar with key == evKey
          for (i = 0; i < editorVars.length; i += 1) {
            if (editorVars[i].key === evKey) {
              // if type is 'EVL' display label only if a value is set too
              if (type === 'EL' || type === 'EVL' && editorVars[i].value) {
                return editorVars[i].label;
              } else {
                return editorVars[i].value;
              }
            }
          }
        }
        return '';
      }); // end of replace()

      return strOutput;
    }, // end of replaceEditorVarsPlaceholders()

    /**
     * Replace every occurance of `${attr}`, in `strInput`,
     * with the result of `feature.get(attr)`, if it exist.
     * Otherwise the placeholder will be simply removed (/replaced with '').
     *
     * @param   {string}      strInput  [description]
     * @param   {ol.Feature}  feature   [description]
     *
     * @return  {string}                [description]
     */
    replaceAttributePlaceholders: function replaceAttributePlaceholders(strInput, feature) {
      var strOutput;

      if (!strInput || !feature || typeof feature.get !== 'function') {
        return strInput;
      }

      strOutput = strInput.replace(/\$\{([^\}]*)\}/g, function (match, attr, offset, originString) {
        return feature.get(attr) || '';
      }); // end of replace()

      return strOutput;
    }, // end of replaceAttributePlaceholders()

    objectToArray: function objectToArray(object) {
      if (object && (typeof object === "undefined" ? "undefined" : _typeof(object)) === 'object') {
        object = Object.keys(object).map(function (key) {
          return object[key];
        });
      }
      return object;
    }, // end of objectToArray()

    getVectorLayer: function getVectorLayer(source, style) {
      var fnStyle;

      // make sure that the style is a function
      if (typeof style === 'function') {
        fnStyle = style;
      } else if (style !== undefined) {
        fnStyle = function fnStyle() {
          return style;
        };
      }

      return new ol.layer.Vector({
        source: source,
        style: fnStyle
      });
    },
    // end of "getVectorLayer()"

    /**
     * Extracts the subdomain from the current request host and returns it.
     * @returns {string | *}
     */
    getCurrentSubdomain: function getCurrentSubdomain() {
      return window.location.href;
    },


    redrawMapView: function redrawMapView(mapController) {
      var mapData = mapController.data;
      var controlContainerTopLeft = document.createElement('div');
      controlContainerTopLeft.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TL + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
      mapController.$overlaycontainer_stopevent.prepend(controlContainerTopLeft);

      var controlContainerBottomLeft = document.createElement('div');
      controlContainerBottomLeft.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
      $(controlContainerTopLeft).after(controlContainerBottomLeft);
      mapController.leftSlideElements.push(controlContainerBottomLeft);

      var controlContainerBottomLeftSub = document.createElement('div');
      controlContainerBottomLeftSub.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL_SUB + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;

      if (mapData.scaleline) {
        mapController.map.removeControl(mapController.controls.scaleline);
        mapController.controls.scaleline = new ol.control.ScaleLine({
          mapView: mapController.map.getView(),
          target: controlContainerBottomLeft,
          undefinedHTML: 'N/A'
        });
        mapController.map.addControl(mapController.controls.scaleline);
      }

      $(controlContainerBottomLeft).append(controlContainerBottomLeftSub);

      if (mapData.zoomlevel) {
        mapController.map.removeControl(mapController.controls.zoomlevel);
        mapController.controls.zoomlevel = new __WEBPACK_IMPORTED_MODULE_2__c4g_maps_control_zoomlevel__["a" /* Zoomlevel */]({
          mapView: mapController.map.getView(),
          target: controlContainerBottomLeftSub,
          undefinedHTML: 'N/A'
        });
        mapController.map.addControl(mapController.controls.zoomlevel);
      }

      if (mapData.mouseposition) {
        mapController.map.removeControl(mapController.controls.mouseposition);
        mapController.controls.mouseposition = new ol.control.MousePosition({
          projection: 'EPSG:4326',
          coordinateFormat: ol.coordinate.toStringHDMS,
          target: controlContainerBottomLeftSub,
          undefinedHTML: 'N/A'
        });
        mapController.map.addControl(mapController.controls.mouseposition);
      }
    },
    getValue: function getValue(key) {
      return localStorage[key] || '';
    },
    storeValue: function storeValue(key, value) {
      localStorage[key] = value; // only strings
    }
  });
})(jQuery, this.c4g);

var utils = this.c4g.maps.utils;

/***/ }),

/***/ "./Resources/public/js/c4g-maps.js":
/*!*****************************************!*\
  !*** ./Resources/public/js/c4g-maps.js ***!
  \*****************************************/
/*! exports provided: MapController */
/*! exports used: MapController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MapController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_maps_proxy__ = __webpack_require__(/*! ./c4g-maps-proxy */ "./Resources/public/js/c4g-maps-proxy.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__ = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__ = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__ = __webpack_require__(/*! ./c4g-maps-misc-spinner */ "./Resources/public/js/c4g-maps-misc-spinner.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_maphover__ = __webpack_require__(/*! ./c4g-maps-misc-maphover */ "./Resources/public/js/c4g-maps-misc-maphover.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__ = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__c4g_maps_control_portside_router__ = __webpack_require__(/*! ./c4g-maps-control-portside-router */ "./Resources/public/js/c4g-maps-control-portside-router.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__c4g_maps_control_portside_measuretools__ = __webpack_require__(/*! ./c4g-maps-control-portside-measuretools */ "./Resources/public/js/c4g-maps-control-portside-measuretools.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__c4g_maps_control_print__ = __webpack_require__(/*! ./c4g-maps-control-print */ "./Resources/public/js/c4g-maps-control-print.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__c4g_maps_control_grid__ = __webpack_require__(/*! ./c4g-maps-control-grid */ "./Resources/public/js/c4g-maps-control-grid.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__c4g_maps_control_zoomlevel__ = __webpack_require__(/*! ./c4g-maps-control-zoomlevel */ "./Resources/public/js/c4g-maps-control-zoomlevel.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__c4g_maps_control_overviewmap__ = __webpack_require__(/*! ./c4g-maps-control-overviewmap */ "./Resources/public/js/c4g-maps-control-overviewmap.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__c4g_maps_control_permalink__ = __webpack_require__(/*! ./c4g-maps-control-permalink */ "./Resources/public/js/c4g-maps-control-permalink.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__c4g_maps_control_starboard__ = __webpack_require__(/*! ./c4g-maps-control-starboard */ "./Resources/public/js/c4g-maps-control-starboard.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__c4g_maps_control_portside_editor__ = __webpack_require__(/*! ./c4g-maps-control-portside-editor */ "./Resources/public/js/c4g-maps-control-portside-editor.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__c4g_maps_control_portside_account__ = __webpack_require__(/*! ./c4g-maps-control-portside-account */ "./Resources/public/js/c4g-maps-control-portside-account.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__c4g_maps_interaction_geopicker__ = __webpack_require__(/*! ./c4g-maps-interaction-geopicker */ "./Resources/public/js/c4g-maps-interaction-geopicker.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__c4g_maps_control_home__ = __webpack_require__(/*! ./c4g-maps-control-home */ "./Resources/public/js/c4g-maps-control-home.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__c4g_maps_control_position__ = __webpack_require__(/*! ./c4g-maps-control-position */ "./Resources/public/js/c4g-maps-control-position.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__c4g_maps_control_portside_infopage__ = __webpack_require__(/*! ./c4g-maps-control-portside-infopage */ "./Resources/public/js/c4g-maps-control-portside-infopage.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// "namespace"
this.c4g = this.c4g || {};
this.c4g.maps = this.c4g.maps || {};

//for jslint
/*jslint browser:true*/
/*jslint todo:true */
/*global window*/
/*global ol*/
/*global Browser*/
/*global Document:true */
/*global jQuery*/
var c4g = this.c4g;























var langConstants = {};

if (typeof mapData !== "undefined") {
    if (mapData.lang === "de") {
        langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
    } else if (mapData.lang === "en") {
        langConstants = __WEBPACK_IMPORTED_MODULE_3__c4g_maps_constant_i18n_en__["a" /* langConstantsEnglish */];
    } else {
        // fallback
        langConstants = __WEBPACK_IMPORTED_MODULE_2__c4g_maps_constant_i18n_de__["a" /* langConstantsGerman */];
    }
}

(function ($, c4g) {
    'use strict';

    /**
     * [MapController description]
     * @param {json-object}  mapData  Object to configure con4gis-maps.
     *                                See "docs/mapData-values.md"
     *                                to get a list of valid values for this object.
     */

    c4g.maps.MapController = function (mapData) {

        //---
        this.map = null;
        // this.controls = null;
        this.leftSlideElements = [];
        this.rightSlideElements = [];

        var self = this,
            permalink = false,
            minZoom,
            maxZoom,
            view,
            geoLocation,
            controls = [],
            interactions = [],
            _displayAllLocations,
            domMapDiv,
            kinetic,
            controlContainerTopLeft,
            controlContainerBottomLeft,
            controlContainerTopRight,
            controlContainerBottomRight,
            controlContainerBottomLeftSub,
            starboard_label,
            logoLink,
            logoGraphic,
            removeElement,
            enableStarboard = true;

        //--
        mapData = $.extend({
            api: {},
            addIdToDiv: false,
            mapId: 1,
            mapDiv: 'c4g_map',
            center: {},
            calc_extent: 'CENTERZOOM',
            attribution: {},
            editor: {},
            measuretools: {},
            infopage: {},
            account: '',
            starboard: {},
            layerswitcher: {},
            baselayerswitcher: {},
            geosearch: {}
        }, mapData);
        if (mapData.calc_extent === 'LOCATIONS') {
            mapData = $.extend({
                min_gap: 25
            }, mapData);
        }

        // center
        mapData.center = $.extend({
            lat: 52.22,
            lon: 9.43,
            rotation: 0,
            zoom: 6
        }, mapData.center);
        // attribution
        mapData.attribution = $.extend({
            enable: true,
            collapsed: false,
            collapsible: true
        }, mapData.attribution);
        // geosearch
        mapData.geosearch = $.extend({
            enable: false,
            div: false
        }, mapData.geosearch);
        // permalink
        mapData.permalink = $.extend({
            enable: false,
            get_parameter: false
        }, mapData.permalink);
        this.data = mapData;
        if (mapData.addIdToDiv) {
            mapData.mapDiv += '_' + mapData.mapId;
        }
        // PHPStorm marks this as error, but it is none
        // This is needed for preventing an error with the OSM-Overpass API
        // which occurs when MooTools is loaded
        if (window.MooTools && Browser.Document) {
            Document = Browser.Document;
        }
        this.proxy = new __WEBPACK_IMPORTED_MODULE_0__c4g_maps_proxy__["a" /* MapProxy */]({ mapController: this });

        // check permalink
        if (mapData.permalink.enable) {
            permalink = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getUrlParam(mapData.permalink.get_parameter);

            if (permalink) {
                permalink = permalink.split('/');
                switch (permalink.length) {
                    case 6:
                        permalink[0] = parseFloat(permalink[0]);
                        mapData.center.lon = !isNaN(permalink[0]) ? permalink[0] : mapData.center.lon;
                        permalink[1] = parseFloat(permalink[1]);
                        mapData.center.lat = !isNaN(permalink[1]) ? permalink[1] : mapData.center.lat;
                        permalink[2] = parseInt(permalink[2], 10);
                        mapData.center.zoom = !isNaN(permalink[2]) ? permalink[2] : mapData.center.zoom;
                        permalink[3] = parseFloat(permalink[3]);
                        mapData.center.rotation = !isNaN(permalink[3]) ? permalink[3] : mapData.center.rotation;
                        permalink[4] = parseInt(permalink[4], 10);
                        mapData.baselayer = !isNaN(permalink[4]) ? permalink[4] : mapData.baselayer;
                        mapData.layers = permalink[5].split(':');
                        // decode deltaEncoding
                        mapData.layers = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].deltaDecode(mapData.layers);
                        break;
                    case 2:
                        // baselayer and layers only
                        permalink[0] = parseInt(permalink[0], 10);
                        mapData.baselayer = !isNaN(permalink[0]) ? permalink[0] : mapData.baselayer;
                        mapData.layers = permalink[1].split(':');
                        // decode deltaEncoding
                        mapData.layers = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].deltaDecode(mapData.layers);
                        break;
                    case 1:
                        // layers only
                        mapData.layers = permalink[0].split(':');
                        // decode deltaEncoding
                        mapData.layers = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].deltaDecode(mapData.layers);
                        break;
                    default:
                        // invalid count of permalink parameters
                        permalink = false;
                }
                if (mapData.layers.length < 1) {
                    mapData.layers = false;
                    permalink = false;
                }
            } else {
                // just to make sure this var is really "false"
                permalink = false;
            }
        }

        if (mapData.minZoom && mapData.minZoom > 0) {
            minZoom = mapData.minZoom;
        } else {
            minZoom = 0;
        }

        if (mapData.maxZoom && mapData.maxZoom > 0) {
            maxZoom = mapData.maxZoom;
        } else {
            maxZoom = 19;
        }

        if (mapData.caching) {
            if (__WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('lon') && __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('lat')) {
                mapData.center.lon = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('lon');
                mapData.center.lat = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('lat');
            }

            if (__WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('zoom')) {
                mapData.center.zoom = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('zoom');
            }
        }

        view = new ol.View({
            // projection: ol.proj.get('EPSG:4326'),
            // center: [parseFloat(mapData.center_lon), parseFloat(mapData.center_lat)],
            // minResolution: undefined,
            // maxResolution: undefined,
            center: ol.proj.transform([parseFloat(mapData.center.lon), parseFloat(mapData.center.lat)], 'EPSG:4326', 'EPSG:3857'),
            zoom: parseInt(mapData.center.zoom, 10),
            minZoom: parseInt(minZoom, 10),
            maxZoom: parseInt(maxZoom, 10),
            rotation: parseFloat(mapData.center.rotation)
        });

        // check userposition
        if (mapData.geolocation && !permalink) {
            geoLocation = new ol.Geolocation({
                //tracking: !mapData.geopicker,
                tracking: true,
                projection: view.getProjection()
            });
            geoLocation.on('change', function (evt) {
                if (geoLocation) {
                    view.setCenter(geoLocation.getPosition());
                    if (mapData.geolocation_zoom) {
                        view.setZoom(parseInt(mapData.geolocation_zoom, 10));
                    }
                    geoLocation.setTracking(false);
                    if (self.map) {
                        self.map.setView(view);
                        if (self.$overlaycontainer_stopevent) {
                            __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].redrawMapView(self);
                        }
                    }
                }
            });
        }

        // enable default Controls/Interactions if there is no profile
        // [note]: maybe change this in the future? -> "no default"-option?
        if (!mapData.profile) {
            controls = ol.control.defaults();
            interactions = ol.interaction.defaults();
        }

        // set default base layer when backend geopicker is enabled
        if (mapData.geopicker && mapData.geopicker.type === "backend") {
            if (mapData.default_baselayer) {
                this.proxy.hook_baselayer_loaded.push(function (baselayerIds) {
                    self.proxy.baselayerController.showBaseLayer(mapData.default_baselayer);
                });
            } // end inner if
            this.map = new ol.Map({
                controls: controls,
                interactions: interactions,
                layers: [new ol.layer.Group({
                    title: 'Base maps',
                    layers: [],
                    checkSum: 'baseMapsLayer'
                })],
                loadTilesWhileAnimating: true,
                target: mapData.mapDiv,
                view: view
            });
        } else {
            // initialize Map
            //

            if (mapData.default_baselayer) {
                this.proxy.hook_baselayer_loaded.push(function (baselayerIds) {
                    if (mapData.baselayer && baselayerIds.indexOf(mapData.baselayer.toString()) > -1) {
                        mapData.default_baselayer = mapData.baselayer;
                    }

                    if (mapData.caching) {
                        if (__WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('baselayer')) {
                            mapData.default_baselayer = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getValue('baselayer');
                        }
                    }

                    self.proxy.baselayerController.showBaseLayer(mapData.default_baselayer);
                });
            }
            this.map = new ol.Map({
                controls: controls,
                interactions: interactions,
                layers: [new ol.layer.Group({
                    title: 'Base maps',
                    layers: [],
                    checkSum: 'baseMapsLayer'
                })],
                loadTilesWhileAnimating: true,
                target: mapData.mapDiv,
                view: view
            });
        }

        mapData.map = this.map;

        // set extent to make all locations visible if wanted
        if (mapData.calc_extent === "LOCATIONS") {
            _displayAllLocations = function displayAllLocations(layerIds) {
                var layers = self.proxy.layerController.arrLayers,
                    layer,
                    geometry,
                    coords,
                    padding,
                    coordinates,
                    extent,
                    featureList,
                    featureArray,
                    key,
                    vectorArray,
                    layerGroup,
                    center;
                // delete function from hook array
                delete this[this.indexOf(_displayAllLocations)];
                coordinates = [];
                // calculate resulting extent of all geometries
                for (key in layers) {
                    if (layers.hasOwnProperty(key)) {
                        layer = layers[key];
                        if (layer.type == "overpass") {
                            continue;
                        }
                        vectorArray = layer.content;
                        if (vectorArray === undefined) {
                            // catch case of linked layers
                            continue;
                        }
                        if ((typeof vectorArray === "undefined" ? "undefined" : _typeof(vectorArray)) === "object") {
                            vectorArray = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].objectToArray(vectorArray);
                        }
                        layerGroup = layer.vectorLayer;
                        if (vectorArray && vectorArray.forEach && typeof vectorArray.forEach === 'function') {
                            vectorArray.forEach(function (vectorLayer) {
                                if (vectorLayer && vectorLayer.data && vectorLayer.data.geometry && vectorLayer.data.geometry.coordinates) {
                                    if (vectorLayer.data.geometry.type === "Point") {
                                        coords = ol.proj.transform([parseFloat(vectorLayer.data.geometry.coordinates[0]), parseFloat(vectorLayer.data.geometry.coordinates[1])], 'EPSG:4326', 'EPSG:3857');
                                        if (coords[0] == "Infinity" || coords[0] == "-Infinity") {
                                            return;
                                        }
                                        geometry = new ol.geom.Point(coords);
                                        coordinates.push(geometry.getCoordinates());
                                    }
                                }
                            });
                        }
                        if (layerGroup) {
                            // handle more complex geometries
                            featureList = layerGroup.getLayers();
                            featureArray = featureList.getArray();
                            featureArray.forEach(function (feature) {
                                if (layer.type === "kml") {
                                    var source = feature.getSource();
                                    //var sourceFeatures = source.getFeatures();
                                    source.getExtent().forEach(function (coordinate) {
                                        coordinates.push(coordinate);
                                    });
                                } else {
                                    coordinates.push(ol.extent.getTopRight(feature.getSource().getExtent()));
                                    coordinates.push(ol.extent.getTopLeft(feature.getSource().getExtent()));
                                    coordinates.push(ol.extent.getBottomRight(feature.getSource().getExtent()));
                                    coordinates.push(ol.extent.getBottomLeft(feature.getSource().getExtent()));
                                }
                            });
                        }
                    }
                }
                extent = ol.extent.boundingExtent(coordinates);
                if (extent[0] == "Infinity" || extent[0] == "-Infinity") {
                    return;
                }
                //TODO: catch case min_gap is already an array
                padding = [mapData.min_gap, mapData.min_gap, mapData.min_gap, mapData.min_gap];
                self.map.getView().fit(extent, self.map.getSize(), { padding: padding });
                center = self.map.getView().getCenter();
                if (isNaN(center[0])) {
                    self.map.getView().setCenter([50, 10]);
                    self.map.getView().setZoom(mapData.minZoom || 10);
                }
            };
            this.proxy.hook_layer_visibility.push(_displayAllLocations);
        }

        // set map-size and -margin
        domMapDiv = document.getElementById(mapData.mapDiv);

        if (domMapDiv && domMapDiv.style) {
            if (mapData.width) {
                domMapDiv.style.width = mapData.width;
            }
            if (mapData.height) {
                domMapDiv.style.height = mapData.height;
            }
            if (mapData.margin) {
                domMapDiv.style.margin = mapData.margin;
            }
        } else {
            console.warn('can not get element by id mapData.mapDiv');
            return;
        }

        this.map.updateSize();
        this.proxy.initialize();
        // this.proxy.loadBaseLayers();
        // this.proxy.loadLayers();
        // ---

        // save overlaycontainer
        this.$overlaycontainer_stopevent = $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_OVERLAYCONTAINER_SE);
        // add Spinner
        this.spinner = new __WEBPACK_IMPORTED_MODULE_4__c4g_maps_misc_spinner__["a" /* Spinner */]({ className: __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].LARGE });
        // add mapHover
        this.mapHover = new __WEBPACK_IMPORTED_MODULE_5__c4g_maps_misc_maphover__["a" /* MapHover */]({ mapController: this });

        // add interactions ===
        //

        // mouse navigation
        if (mapData.mouse_nav) {
            // drag pan and kinetic scrolling
            if (mapData.mouse_nav.drag_pan) {
                kinetic = mapData.mouse_nav.kinetic ? new ol.Kinetic(-0.005, 0.05, 100) : null;
                this.map.addInteraction(new ol.interaction.DragPan({ kinetic: kinetic }));
            }
            // mousewheel zoom
            if (mapData.mouse_nav.wheel_zoom) {
                this.map.addInteraction(new ol.interaction.MouseWheelZoom());
            }
            // doubleclick zoom
            if (mapData.mouse_nav.doubleclick_zoom) {
                this.map.addInteraction(new ol.interaction.DoubleClickZoom());
            }
            // box zoom
            if (mapData.mouse_nav.drag_zoom) {
                this.map.addInteraction(new ol.interaction.DragZoom({ condition: ol.events.condition.shiftKeyOnly }));
            }
            // drag rotate (& zoom)
            if (mapData.mouse_nav.drag_rotate_zoom) {
                this.map.addInteraction(new ol.interaction.DragRotateAndZoom({ condition: ol.events.condition.altKeyOnly }));
            } else if (mapData.mouse_nav.drag_rotate) {
                this.map.addInteraction(new ol.interaction.DragRotate({ condition: ol.events.condition.altKeyOnly }));
            }
        }
        // touch navigation
        if (mapData.touch_nav) {
            // rotate (pinch)
            if (mapData.touch_nav.rotate) {
                this.map.addInteraction(new ol.interaction.PinchRotate());
            }
            // zoom (pinch)
            if (mapData.touch_nav.zoom) {
                this.map.addInteraction(new ol.interaction.PinchZoom({ constrainResolution: true }));
            }
        }
        // keyboard navigation
        if (mapData.keyboard_nav) {
            // pan (arrow keys)
            if (mapData.keyboard_nav.pan) {
                this.map.addInteraction(new ol.interaction.KeyboardPan());
            }
            // zoom ("+" and "-" key)
            if (mapData.keyboard_nav.zoom) {
                this.map.addInteraction(new ol.interaction.KeyboardZoom());
            }
        }
        // ===

        // add control-containers ===
        //
        // top-left
        controlContainerTopLeft = document.createElement('div');
        controlContainerTopLeft.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TL + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        this.$overlaycontainer_stopevent.prepend(controlContainerTopLeft);
        // bottom-left
        controlContainerBottomLeft = document.createElement('div');
        controlContainerBottomLeft.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        $(controlContainerTopLeft).after(controlContainerBottomLeft);
        // element needs to be moved when Portside will be opened
        this.leftSlideElements.push(controlContainerBottomLeft);
        // top-right
        controlContainerTopRight = document.createElement('div');
        controlContainerTopRight.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_TR + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        $(controlContainerBottomLeft).after(controlContainerTopRight);
        // element needs to be moved when Starboard will be opened
        this.rightSlideElements.push(controlContainerTopRight);
        // bottom-right
        controlContainerBottomRight = document.createElement('div');
        controlContainerBottomRight.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BR + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
        $(controlContainerTopRight).after(controlContainerBottomRight);
        // element needs to be moved when Starboard will be opened
        this.rightSlideElements.push(controlContainerBottomRight);
        // ===
        // add controls ===
        this.controls = {};
        //


        // account
        if (mapData.account && typeof __WEBPACK_IMPORTED_MODULE_16__c4g_maps_control_portside_account__["a" /* Account */] === 'function') {
            this.controls.account = new __WEBPACK_IMPORTED_MODULE_16__c4g_maps_control_portside_account__["a" /* Account */]({
                tipLabel: langConstants.CTRL_ACCOUNT,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.account);
        }

        // zoom-controls
        if (mapData.zoom_panel || mapData.zoom_slider) {
            this.controls.zoom = new ol.control.Zoom({
                zoomInLabel: ' ',
                zoomOutLabel: ' ',
                zoomInTipLabel: langConstants.CTRL_ZOOM_IN,
                zoomOutTipLabel: langConstants.CTRL_ZOOM_OUT,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.zoom);

            if (mapData.zoom_slider) {
                this.controls.zoomslider = new ol.control.ZoomSlider({
                    label: ' ',
                    tipLabel: langConstants.CTRL_ZOOM_SLIDER,
                    target: controlContainerTopLeft
                });
                this.map.addControl(this.controls.zoomslider);
            }
        }
        if (mapData.zoom_extent & !mapData.zoom_slider) {
            this.controls.zoom_extent = new ol.control.ZoomToExtent({
                label: ' ',
                tipLabel: langConstants.CTRL_ZOOM_EXT,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.zoom_extent);
        }
        if (mapData.zoom_home & !mapData.zoom_slider) {
            this.controls.zoom_home = new __WEBPACK_IMPORTED_MODULE_18__c4g_maps_control_home__["a" /* Home */]({
                label: ' ',
                disableLabel: ' ',
                tipLabel: langConstants.CTRL_ZOOM_HOME,
                target: controlContainerTopLeft,
                mapController: this
            });
            this.map.addControl(this.controls.zoom_home);
        }

        if (mapData.zoom_position & !mapData.zoom_slider) {
            this.controls.zoom_position = new __WEBPACK_IMPORTED_MODULE_19__c4g_maps_control_position__["a" /* Position */]({
                label: ' ',
                disableLabel: ' ',
                tipLabel: langConstants.CTRL_ZOOM_POS,
                target: controlContainerTopLeft,
                mapController: this
            });
            this.map.addControl(this.controls.zoom_position);
        }

        // combined zoom-controls
        if (mapData.zoom_slider) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_SLIDER).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_SLIDER + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_SLIDER));
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_SLIDER + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL).remove();
        }

        if (mapData.zoom_panel && mapData.zoom_extent) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_EXT).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_EXT + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_EXT));
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_EXT + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL).remove();
        }

        if (mapData.zoom_panel && mapData.zoom_home) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_HOME).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_HOME + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_HOME));
            removeElement = controlContainerTopLeft.querySelector('.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_HOME + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + '.button');
            if (removeElement) {
                try {
                    removeElement.remove();
                } catch (err) {
                    //ie 11 error
                }
            }
        }

        if (mapData.zoom_panel && mapData.zoom_position) {
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM).addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_WITH_POS).removeClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM);
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_IN).after($('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS + ' button').addClass(__WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS));
            $('#' + mapData.mapDiv + ' .' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_CONTROL).remove();
            removeElement = controlContainerTopLeft.querySelector('.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_ZOOM_POS + '.' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE + '.button');
            if (removeElement) {
                try {
                    removeElement.remove();
                } catch (err) {
                    //ie 11 error
                }
            }
        }

        // fullscreen
        if (mapData.fullscreen) {
            this.controls.fullscreen = new ol.control.FullScreen({
                label: ' ',
                labelActive: ' ',
                tipLabel: langConstants.CTRL_FULLSCREEN,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.fullscreen);
        }

        // router
        if (mapData.router_enable && typeof __WEBPACK_IMPORTED_MODULE_7__c4g_maps_control_portside_router__["a" /* Router */] === 'function') {
            this.controls.router = new __WEBPACK_IMPORTED_MODULE_7__c4g_maps_control_portside_router__["a" /* Router */]({
                tipLabel: langConstants.CTRL_ROUTER,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.router);
        }
        // editor
        if (mapData.editor.enable && typeof __WEBPACK_IMPORTED_MODULE_15__c4g_maps_control_portside_editor__["a" /* Editor */] === 'function') {
            this.controls.editor = new __WEBPACK_IMPORTED_MODULE_15__c4g_maps_control_portside_editor__["a" /* Editor */]({
                tipLabel: langConstants.CTRL_EDITOR,
                type: mapData.editor.type || 'frontend',
                target: mapData.editor.target || controlContainerTopLeft,
                initOpen: mapData.editor.open || false,
                dataField: mapData.editor.data_field || false,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.editor);
        }
        // measuretools
        if (mapData.measuretools.enable && typeof __WEBPACK_IMPORTED_MODULE_8__c4g_maps_control_portside_measuretools__["a" /* Measuretools */] === 'function') {
            this.controls.measuretools = new __WEBPACK_IMPORTED_MODULE_8__c4g_maps_control_portside_measuretools__["a" /* Measuretools */]({
                tipLabel: langConstants.CTRL_MEASURETOOLS,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.measuretools);
        }
        //
        if (mapData.print) {
            this.controls.print = new __WEBPACK_IMPORTED_MODULE_9__c4g_maps_control_print__["a" /* Print */]({
                label: "",
                tipLabel: langConstants.CTRL_PRINT,
                target: controlContainerTopLeft,
                mapController: this
            });
            this.map.addControl(this.controls.print);
        }

        // show graticule (grid)
        if (mapData.graticule) {
            this.controls.graticule = new __WEBPACK_IMPORTED_MODULE_10__c4g_maps_control_grid__["a" /* Grid */]({
                label: ' ',
                disableLabel: ' ',
                tipLabel: langConstants.CTRL_GRID,
                caching: mapData.caching,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.graticule);
        }
        // rotate-control
        //TODO: use something like "mapData.rotate"
        //   Check: mapData.mouse_nav (defined?)
        if (mapData.mouse_nav && (mapData.mouse_nav.drag_rotate || mapData.mouse_nav.drag_rotate && mapData.mouse_nav.drag_rotate_zoom)) {
            this.controls.rotate = new ol.control.Rotate({
                label: ' ',
                tipLabel: langConstants.CTRL_RESET_ROTATION,
                target: controlContainerTopLeft
            });
            this.map.addControl(this.controls.rotate);
        }
        // infopage
        if (mapData.infopage && typeof __WEBPACK_IMPORTED_MODULE_20__c4g_maps_control_portside_infopage__["a" /* Infopage */] === 'function') {
            this.controls.infopage = new __WEBPACK_IMPORTED_MODULE_20__c4g_maps_control_portside_infopage__["a" /* Infopage */]({
                tipLabel: langConstants.CTRL_INFOPAGE,
                target: controlContainerTopLeft,
                caching: mapData.caching,
                mapController: this
            });
            this.map.addControl(this.controls.infopage);
        }
        // additional panel
        /*
          if (mapData.additionalPanel && typeof c4g.maps.control.additionalPanel === 'function') {
            this.controls.additionalPanel = new c4g.maps.control.additionalPanel({
              tipLabel: langConstants.CTRL_ADDITIONALPANEL,
              target: controlContainerTopLeft,
              caching: mapData.caching,
              mapController: this
            });
            this.map.addControl(this.controls.additionalPanel);
          }*/

        // scaleline
        if (mapData.scaleline) {
            this.controls.scaleline = new ol.control.ScaleLine({
                target: controlContainerBottomLeft
            });
            this.map.addControl(this.controls.scaleline);
        }

        // zoom-level & mouse-position
        if (mapData.zoomlevel || mapData.mouseposition) {
            // wrapper for zoom-level and mouse-position
            controlContainerBottomLeftSub = document.createElement('div');
            controlContainerBottomLeftSub.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].CONTROL_CONTAINER_BL_SUB + ' ' + __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].OL_UNSELECTABLE;
            $(controlContainerBottomLeft).append(controlContainerBottomLeftSub);
            // display zoom-level
            if (mapData.zoomlevel) {
                this.controls.zoomlevel = new __WEBPACK_IMPORTED_MODULE_11__c4g_maps_control_zoomlevel__["a" /* Zoomlevel */]({
                    mapView: view,
                    target: controlContainerBottomLeftSub,
                    undefinedHTML: 'N/A'
                });
                this.map.addControl(this.controls.zoomlevel);
            }
            // display mouse-position
            if (mapData.mouseposition) {
                this.controls.mouseposition = new ol.control.MousePosition({
                    projection: 'EPSG:4326',
                    coordinateFormat: ol.coordinate.toStringHDMS,
                    target: controlContainerBottomLeftSub,
                    undefinedHTML: 'N/A'
                });
                this.map.addControl(this.controls.mouseposition);
            }
        }

        // geosearch
        if (c4g.maps.control && c4g.maps.control.GeoSearch && typeof c4g.maps.control.GeoSearch === 'function' && mapData.geosearch.enable) {
            this.controls.geosearch = new c4g.maps.control.GeoSearch({
                mapController: this,
                target: controlContainerTopRight,
                extDiv: mapData.geosearch.div || false,
                collapsible: true,
                collapsed: mapData.geosearch.collapsed,
                label: ' ',
                collapsedLabel: '',
                // engineUrl: mapData.geosearch.engine,
                searchZoom: mapData.geosearch.searchzoom,
                zoomBounds: mapData.geosearch.zoombounds,
                quicksearch: true,
                animate: mapData.geosearch.animate,
                markResult: mapData.geosearch.markresult,
                popup: mapData.geosearch.popup,
                autopick: mapData.geopicker,
                caching: mapData.caching,
                results: mapData.geosearch.results
            });
            this.map.addControl(this.controls.geosearch);
        }

        // geobookmarks - not ready
        if (mapData.geobookmarks) {
            this.controls.geobookmarks = new ol.control.GeoBookmark({
                //target: controlContainerTopRight
                label: ' ',
                tipLabel: langConstants.CTRL_GEOBOOKMARKS,
                placeholder: langConstants.GEOBOOKMARKS_PLACEHOLDER,
                namespace: 'c4g_geobookmarks' /*,
                                              className: cssConstants.GEOBOOKMARKS*/ //ToDo implement for own styling
            });
            this.map.addControl(this.controls.geobookmarks);
            this.rightSlideElements.push('.ol-bookmark');
        }

        // overview-map
        if (mapData.overviewmap) {
            this.controls.overviewmap = new __WEBPACK_IMPORTED_MODULE_12__c4g_maps_control_overviewmap__["a" /* OverviewMap */]({
                target: controlContainerTopRight
            });
            this.map.addControl(this.controls.overviewmap);
        }

        // starboard
        if (mapData.geopicker && mapData.geopicker.type === "backend") {
            enableStarboard = false;
        }

        // popup margin
        //this.leftSlideElements.push('.ol-overlay-container');
        //this.rightSlideElements.push('.ol-overlay-container');

        if (typeof __WEBPACK_IMPORTED_MODULE_14__c4g_maps_control_starboard__["a" /* Starboard */] === 'function' && enableStarboard) {
            this.initializeStarboard();
        }

        // backend-geopicker
        if (mapData.geopicker && (mapData.geopicker.type === "backend" || mapData.geopicker.type === "frontend")) {
            this.controls.geopicker = new __WEBPACK_IMPORTED_MODULE_17__c4g_maps_interaction_geopicker__["a" /* GeoPicker */]({
                mapContainer: this
            });
            this.map.addInteraction(this.controls.geopicker);
            if (mapData.geopicker.type === "frontend") {
                // substring is needed here for taking out the #
                if (mapData.geopicker.input_geo_x && mapData.geopicker.input_geo_x) {
                    var geoxField = document.getElementById(mapData.geopicker.input_geo_x.substring(1));
                    var geoyField = document.getElementById(mapData.geopicker.input_geo_y.substring(1));
                    if (geoxField && geoyField) {
                        var locGeox = geoxField.value;
                        var locGeoy = geoyField.value;
                        if (locGeox && locGeoy) {
                            var numerized = [parseFloat(locGeox, 10), parseFloat(locGeoy, 10)];
                            var transformed = ol.proj.transform(numerized, ol.proj.get('EPSG:4326'), ol.proj.get('EPSG:3857'));
                            geoLocation = null;
                            this.map.getView().setCenter(transformed);
                        }
                    }
                }
            }
        }

        // show attribution
        if (mapData.attribution.enable) {
            // @TODO: create own attribution-control
            if (mapData.attribution.cfg_logo) {
                logoLink = document.createElement('a');
                logoLink.href = 'https://con4gis.org';
                logoLink.title = 'built with con4gis';
                logoLink.target = '_blank';
                logoLink.className = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_constant__["a" /* cssConstants */].ATTRIBUTION_LOGO;
                logoGraphic = document.createElement('img');
                logoGraphic.src = 'bundles/con4gismaps/images/logo_con4gis.svg';
                logoLink.appendChild(logoGraphic);
                controlContainerBottomRight.appendChild(logoLink);
            }
            this.controls.attribution = new ol.control.Attribution({
                label: ' ',
                tipLabel: langConstants.CTRL_ATTRIBUTION,
                collapseLabel: ' ',
                target: controlContainerBottomRight,
                collapsible: true
            });
            this.controls.attribution.setCollapsed(mapData.attribution.collapsed === '1');
            this.map.addControl(this.controls.attribution);
        }

        // show permalink
        if (mapData.permalink.enable) {
            this.controls.permalink = new __WEBPACK_IMPORTED_MODULE_13__c4g_maps_control_permalink__["a" /* Permalink */]({
                label: ' ',
                tipLabel: langConstants.CTRL_PERMALINK,
                mapController: this,
                getParameter: mapData.permalink.get_parameter,
                target: controlContainerBottomRight
            });
            this.map.addControl(this.controls.permalink);
        }

        //themeData
        if (mapData.themeData) {
            domMapDiv = document.getElementById(mapData.mapDiv);
            if (mapData.themeData['useglobal']) {
                domMapDiv = document.getElementById('wrapper');
            };

            if (mapData.themeData['maincolor']) {
                var mainColor = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(mapData.themeData['maincolor'], mapData.themeData['mainopacity']);
                var fontColor = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(mapData.themeData['fontcolor'], mapData.themeData['fontopacity']);
                var shadowColor = __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].getRgbaFromHexAndOpacity(mapData.themeData['shadowcolor'], mapData.themeData['shadowopacity']);

                if (domMapDiv && domMapDiv.style) {
                    domMapDiv.style.setProperty('--main-color', mainColor);
                    domMapDiv.style.setProperty('--font-color', fontColor);
                    domMapDiv.style.setProperty('--shadow-color', shadowColor);
                }
            }

            if (mapData.themeData['buttonradius']) {
                domMapDiv.style.setProperty('--button-radius-percent', mapData.themeData['buttonradius'] + '%');
                domMapDiv.style.setProperty('--button-radius-pixel', mapData.themeData['buttonradius'] + 'px');
            }
        }
        if (window.c4gMapsHooks !== undefined && Array.isArray(window.c4gMapsHooks.mapController_addControls)) {
            __WEBPACK_IMPORTED_MODULE_6__c4g_maps_utils__["a" /* utils */].callHookFunctions(window.c4gMapsHooks.mapController_addControls, { mapController: this, Container: controlContainerTopLeft });
        }
    };
    // Add methods
    c4g.maps.MapController.prototype = $.extend(c4g.maps.MapController.prototype, {
        initializeStarboard: function initializeStarboard() {
            var mapData = this.data;
            var starboard_label = void 0;
            if (mapData.starboard.label) {
                starboard_label = langConstants.CTRL_STARBOARD.replace('Starboard', mapData.starboard.label).replace('starboard', mapData.starboard.label);
            }

            this.controls.starboard = new __WEBPACK_IMPORTED_MODULE_14__c4g_maps_control_starboard__["a" /* Starboard */]({
                create: mapData.starboard.enable || false,
                headline: mapData.starboard.label,
                tipLabel: starboard_label || false,
                caching: mapData.caching,
                mapController: this,
                extDiv: mapData.starboard.div,
                defaultOpen: mapData.starboard.open,
                filter: mapData.starboard.filter,
                button: mapData.starboard.button,
                baselayerSwitcherCreate: mapData.baselayerswitcher.enable,
                baselayerSwitcherTitle: mapData.baselayerswitcher.label,
                layerSwitcherCreate: mapData.layerswitcher.enable,
                layerSwitcherTitle: mapData.layerswitcher.label
            });
            this.map.addControl(this.controls.starboard);
        }
    });
})(jQuery, this.c4g); // 'The End' :)    - ! Do not write stuff after this line ! -

var MapController = this.c4g.maps.MapController;

/***/ }),

/***/ "./Resources/public/js/c4g-overlay-controller.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-overlay-controller.js ***!
  \*******************************************************/
/*! exports provided: C4gOverlayController */
/*! exports used: C4gOverlayController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gOverlayController; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__c4g_overlay__ = __webpack_require__(/*! ./c4g-overlay */ "./Resources/public/js/c4g-overlay.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__c4g_maps_config__ = __webpack_require__(/*! ./c4g-maps-config */ "./Resources/public/js/c4g-maps-config.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var C4gOverlayController = function () {
    function C4gOverlayController(baselayer) {
        _classCallCheck(this, C4gOverlayController);

        this.baselayer = baselayer;
        this.arrOverlays = [];
    }

    _createClass(C4gOverlayController, [{
        key: "showOverlayLayer",
        value: function showOverlayLayer(overlayId) {
            var self = this,
                overlayLayerConfig,
                osmSourceConfigs = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_config__["a" /* config */].osm,
                stamenSourceConfigs = __WEBPACK_IMPORTED_MODULE_1__c4g_maps_config__["a" /* config */].stamen,
                layerOptions,
                overlayLayer,
                noUrl;

            layerOptions = {};
            overlayLayer = new ol.layer.Tile({
                source: new ol.source.OSM()
            });

            overlayLayerConfig = this.arrOverlays[overlayId];

            switch (overlayLayerConfig.provider) {
                case 'osm':
                    if (osmSourceConfigs[overlayLayerConfig.style]) {
                        overlayLayer = new ol.layer.Tile({
                            source: new ol.source.OSM(jQuery.extend(osmSourceConfigs[overlayLayerConfig.style], layerOptions))
                        });
                    } else if (stamenSourceConfigs[overlayLayerConfig.style]) {
                        // Stamen
                        overlayLayer = new ol.layer.Tile({
                            source: new ol.source.Stamen(jQuery.extend(stamenSourceConfigs[overlayLayerConfig.style], layerOptions))
                        });
                        // } else if (mapQuestSourceConfigs[overlayLayerConfig.style]) {
                        //   // mapQuest
                        //   overlayLayer = new ol.layer.Tile({
                        //     source: new ol.source.MapQuest(mapQuestSourceConfigs[overlayLayerConfig.style])
                        //   });
                    } else if (overlayLayerConfig.style === 'osm_custom') {
                        // custom
                        noUrl = true;
                        if (overlayLayerConfig.attribution) {
                            layerOptions.attributions = overlayLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION;
                        }

                        if (overlayLayerConfig.url) {
                            layerOptions.url = overlayLayerConfig.url;
                            noUrl = false;
                        } else if (overlayLayerConfig.urls) {
                            layerOptions.urls = overlayLayerConfig.urls;
                            noUrl = false;
                        }
                        if (!noUrl) {
                            overlayLayer = new ol.layer.Tile({
                                source: new ol.source.XYZ(layerOptions)
                            });
                        } else {
                            console.warn('custom url(s) missing -> switch to default');
                        }
                    } else {
                        console.warn('unsupported osm-style -> switch to default');
                    }
                    break;
                case 'google':
                    //@todo
                    console.warn('google-maps are currently unsupported');
                    break;
                case 'bing':
                    if (baseLayerConfig.apiKey && overlayLayerConfig.style) {
                        overlayLayer = new ol.layer.Tile({
                            source: new ol.source.BingMaps({
                                culture: navigator.languages ? navigator.languages[0] : navigator.language || navigator.userLanguage,
                                key: overlayLayerConfig.apiKey,
                                imagerySet: overlayLayerConfig.style
                            })
                        });
                    } else {
                        console.warn('wrong bing-key or invalid imagery-set!');
                    }
                    break;
                case 'wms':
                    overlayLayer = new ol.layer.Tile({
                        source: new ol.source.TileWMS({
                            url: overlayLayerConfig.url,
                            params: {
                                LAYERS: overlayLayerConfig.params.layers,
                                VERSION: overlayLayerConfig.params.version,
                                //FORMAT: overlayLayerConfig.params.format,
                                TRANSPARENT: overlayLayerConfig.params.transparent
                            },
                            gutter: overlayLayerConfig.gutter,
                            attributions: overlayLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                        })
                        //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                    });
                    break;
                case 'owm':
                    overlayLayer = new ol.layer.Tile({
                        source: new ol.source.XYZ({
                            url: overlayLayerConfig.url + overlayLayerConfig.app_id + '/{z}/{x}/{y}?hash=' + overlayLayerConfig.api_key,
                            attributions: overlayLayerConfig.attribution + ' ' + ol.source.OSM.ATTRIBUTION
                        })
                        //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')
                    });
                    break;
                default:
                    console.warn('unsupported provider');
                    break;
            }
            overlayLayer.setOpacity(parseInt(overlayLayerConfig.opacity) / 100);
            this.arrOverlays[overlayId].layer = overlayLayer;
            return this.arrOverlays[overlayId].layer;
        }
    }]);

    return C4gOverlayController;
}();

/***/ }),

/***/ "./Resources/public/js/c4g-overlay.js":
/*!********************************************!*\
  !*** ./Resources/public/js/c4g-overlay.js ***!
  \********************************************/
/*! exports provided: C4gOverlay */
/*! exports used: C4gOverlay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return C4gOverlay; });
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var C4gOverlay = function () {
    function C4gOverlay(overlayArr, mapController) {
        _classCallCheck(this, C4gOverlay);

        this.id = overlayArr['id'];
        this.pid = overlayArr['pid'];
        this.name = overlayArr['name'];
        this.provider = overlayArr['provider'];
        this.style = overlayArr['style'];
        this.url = overlayArr['url'];
        this.urls = overlayArr['urls'];
        this.opacity = overlayArr['opacity'];
        this.attribution = overlayArr['attribution'];
        this.gutter = overlayArr['gutter'];
        this.params = overlayArr['params'];
        this.layer = false;
        this.overlayArr = overlayArr;
        this.mapController = mapController;
    }

    _createClass(C4gOverlay, [{
        key: 'changeOpacity',
        value: function changeOpacity(value) {
            var layer;

            layer = this.layer;
            if (layer) {
                this.mapController.map.removeLayer(layer);
                layer.setOpacity(value / 100);
                this.mapController.map.addLayer(layer);
            }
        }
    }]);

    return C4gOverlay;
}();

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYmI5NzcwMzk5YWQyNjAwMDkwNzgiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctYmFzZWxheWVyLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctYmFzZWxheWVyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWxheWVyLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbG9jYXRpb25zdHlsZS1jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWxvY2F0aW9uc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lbi5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnN0YW50LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1ncmlkLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1ob21lLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1vdmVydmlld21hcC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtcGVybWFsaW5rLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1hY2NvdW50LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1lZGl0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLWluZm9wYWdlLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1tZWFzdXJldG9vbHMuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLXJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtcG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXByaW50LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zaWRlYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXN0YXJib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWJhc2VsYXllcnN3aXRjaGVyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRwbHVnaW4tY3VzdG9tdGFiLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRwbHVnaW4tbGF5ZXJzd2l0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtem9vbWxldmVsLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtaW50ZXJhY3Rpb24tZ2VvcGlja2VyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLW1pc2MtbWFwaG92ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1taXNjLXNwaW5uZXIuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1taXNjLXRvb2x0aXBwb3B1cC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLXBvcHVwLWluZm8tZGUuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1wb3B1cC1pbmZvLWVuLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtcHJveHkuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy11dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW92ZXJsYXktY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1vdmVybGF5LmpzIl0sIm5hbWVzIjpbIkM0Z0Jhc2VsYXllckNvbnRyb2xsZXIiLCJwcm94eSIsIm1hcENvbnRyb2xsZXIiLCJvcHRpb25zIiwiYXJyQmFzZWxheWVycyIsImJhc2VsYXllcklkcyIsInNlbGYiLCJqUXVlcnkiLCJhamF4IiwiYXBpX2Jhc2VsYXllcl91cmwiLCJkYXRhVHlwZSIsImRhdGEiLCJqc29ucCIsImRvbmUiLCJiYXNlbGF5ZXIiLCJhZGRCYXNlTGF5ZXJzIiwiZmFpbCIsImNvbnNvbGUiLCJ3YXJuIiwic3Bpbm5lciIsImhpZGUiLCJhbHdheXMiLCJiYXNlbGF5ZXJzIiwidWlkIiwiaSIsImoiLCJzb3J0IiwiYSIsImIiLCJwYXJzZUludCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsImxlbmd0aCIsImlkIiwidXRpbHMiLCJnZXRVbmlxdWVJZCIsInB1c2giLCJDNGdCYXNlbGF5ZXIiLCJzaG93QmFzZUxheWVyIiwiaGFzT3ZlcmxheXMiLCJvdmVybGF5cyIsIm92ZXJsYXlDb250cm9sbGVyIiwiYXJyT3ZlcmxheXMiLCJDNGdPdmVybGF5IiwibGF5ZXIiLCJzaG93T3ZlcmxheUxheWVyIiwiYWN0aXZlQmFzZWxheWVySWQiLCJwcm92aWRlciIsInN0eWxlIiwiYmFzZWxheWVyc19sb2FkZWQiLCJjYWxsSG9va0Z1bmN0aW9ucyIsImhvb2tfYmFzZWxheWVyX2xvYWRlZCIsImxheWVyT3B0aW9ucyIsImJhc2VMYXllckNvbmZpZyIsInNvdXJjZUNvbmZpZ3MiLCJuZXdCYXNlbGF5ZXIiLCJub1VybCIsInVybCIsInVybHMiLCJvbCIsIlRpbGUiLCJzb3VyY2UiLCJYWVoiLCJleHRlbnQiLCJleHRlbmQiLCJvc20iLCJPU00iLCIkIiwic3RhbWVuIiwiU3RhbWVuIiwiYXBpX2tleSIsImFwcF9pZCIsIm1hcGJveF90eXBlIiwibWFwYm94IiwidXJsX2NsYXNzaWMiLCJoaWRlX2luX2JlIiwia2xva2FuX3R5cGUiLCJWZWN0b3JUaWxlIiwia2xva2FuIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwiZ2xTdHlsZSIsIm9sbXMiLCJhcHBseVN0eWxlIiwiaGVyZV90eXBlIiwiaGVyZSIsInRodW5kZXJmb3Jlc3RfdHlwZSIsInRodW5kZXJmb3Jlc3QiLCJCaW5nTWFwcyIsImN1bHR1cmUiLCJuYXZpZ2F0b3IiLCJsYW5ndWFnZXMiLCJsYW5ndWFnZSIsInVzZXJMYW5ndWFnZSIsImtleSIsImltYWdlcnlTZXQiLCJpbmRleE9mIiwiVGlsZVdNUyIsInBhcmFtcyIsIkxBWUVSUyIsImxheWVycyIsIlZFUlNJT04iLCJ2ZXJzaW9uIiwiVFJBTlNQQVJFTlQiLCJ0cmFuc3BhcmVudCIsImd1dHRlciIsImF0dHJpYnV0aW9ucyIsImF0dHJpYnV0aW9uIiwiQVRUUklCVVRJT04iLCJjcm9zc09yaWdpbiIsImJhc2VMYXllckdyb3VwIiwiaW5kZXgiLCJoYXNPd25Qcm9wZXJ0eSIsImVsZW1lbnQiLCJjcmVhdGVCYXNlTGF5ZXIiLCJtYXhab29tIiwibWFwIiwiZ2V0VmlldyIsImdldFJlc29sdXRpb25Gb3Jab29tIiwibWluWm9vbSIsInNldE1pblJlc29sdXRpb24iLCJzZXRNYXhSZXNvbHV0aW9uIiwiR3JvdXAiLCJiYXNlTGF5ZXJVaWQiLCJhZGRCYXNlbGF5ZXIiLCJiYXNlTGF5ZXJzIiwidmlldyIsImNvbmZpZyIsImFkZGl0aW9uYWwiLCJhZGRpdGlvbmFsQXR0cmlidXRpb24iLCJleGlzdHMiLCJnZW9zZWFyY2hfYXR0cmlidXRpb24iLCJnZW9zZWFyY2giLCJnZW9zZWFyY2hfZW5naW5lIiwiY3VzdG9tX2F0dHJpYnV0aW9uIiwiZ2Vvc2VhcmNoQXR0cmlidXRpb24iLCJzb3J0aW5nIiwiZ2V0TGF5ZXJzIiwiaXRlbSIsImdldCIsImZvckVhY2giLCJhcnJheSIsInNldFZpc2libGUiLCJ6b29tIiwiZ2V0Wm9vbSIsImNlbnRlciIsImdldENlbnRlciIsInNldFpvb20iLCJtYXBEYXRhIiwiem9vbWxldmVsIiwibW91c2Vwb3NpdGlvbiIsImNvbnRyb2xDb250YWluZXJUb3BMZWZ0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiY3NzQ29uc3RhbnRzIiwiQ09OVFJPTF9DT05UQUlORVJfVEwiLCJPTF9VTlNFTEVDVEFCTEUiLCIkb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQiLCJwcmVwZW5kIiwiY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQiLCJDT05UUk9MX0NPTlRBSU5FUl9CTCIsImFmdGVyIiwibGVmdFNsaWRlRWxlbWVudHMiLCJjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YiIsIkNPTlRST0xfQ09OVEFJTkVSX0JMX1NVQiIsIm5ld1ZpZXciLCJWaWV3IiwicHJvamVjdGlvbiIsImdldFByb2plY3Rpb24iLCJyb3RhdGlvbiIsImdldFJvdGF0aW9uIiwicmVzb2x1dGlvbiIsImdldFJlc29sdXRpb24iLCJzZXRWaWV3IiwicmVkcmF3TWFwVmlldyIsImhvb2tfYmFzZWxheWVyX3Zpc2liaWxpdHkiLCJjZXNpdW0iLCJlbmFibGUiLCJvbDNkIiwib2xjcyIsIk9MQ2VzaXVtIiwiY3JlYXRlU3luY2hyb25pemVycyIsInNldEVuYWJsZWQiLCJnZXRFbmFibGVkIiwiYmFzZWxheWVyQXJyIiwiY29udHJvbGxlciIsInBpZCIsImRpc3BsYXlfbmFtZSIsIm9zbV9zdHlsZSIsIm9zbV9zdHlsZV91cmwxIiwib3NtX3N0eWxlX3VybDIiLCJvc21fc3R5bGVfdXJsMyIsIm9zbV9zdHlsZV91cmw0Iiwib3NtX2tleW5hbWUiLCJiaW5nX3N0eWxlIiwid21zX2d1dHRlciIsInByb3RlY3RfYmFzZWxheWVyIiwicGVybWl0dGVkX2dyb3VwcyIsInN0eWxlX3VybCIsImxheWVyR3JvdXAiLCJDNGdPdmVybGF5Q29udHJvbGxlciIsImM0ZyIsIkM0Z0xheWVyQ29udHJvbGxlciIsImFyckxheWVycyIsImxheWVyUmVxdWVzdHMiLCJtYXBJZCIsImFwaV9sYXllcl91cmwiLCJhZGRMYXllcnMiLCJmb3JlaWduTGF5ZXJzIiwibGF5ZXJzX2xvYWRlZCIsImhvb2tfbGF5ZXJfbG9hZGVkIiwibGF5ZXJJZHMiLCJ3aW5kb3ciLCJjNGdNYXBzSG9va3MiLCJwcm94eV9sYXllcl9sb2FkZWQiLCJjaGVja0xvY2F0aW9uU3R5bGVzIiwiZHJhd0xheWVySW5pdGlhbCIsImsiLCJwIiwiaXNWaXNpYmxlIiwic3RvcmVkSXRlbSIsImxpbmtJdGVtcyIsImN1cnJlbnRab29tIiwiZm5IYW5kbGVBbmRBcHBlbmRMYXllckNoaWxkcyIsImVuZGxlc3NMb29wSWQiLCJwYXJlbnRJZCIsInBhcmVudElkcyIsInBlcm1hbGlua2VkTGF5ZXJzIiwiY2hpbGQiLCJmbkhhbmRsZUNoaWxkcyIsInN0YXJib2FyZCIsImZuQWRkVG9Ib29rIiwib2JqSXRlbSIsInRvZ2dsZSIsImVudHJ5V3JhcHBlciIsImhhc0NoaWxkcyIsInZpc2libGVDaGlsZHMiLCJjaGlsZHMiLCJsYXllcm5hbWUiLCJsYXllcmlkIiwibGF5ZXJpY29uIiwidGFiSWQiLCJhd2Vzb21laWNvbiIsImNvbnRyb2xzIiwiaW5pdGlhbGl6ZVN0YXJib2FyZCIsImhvb2tfbGF5ZXJzd2l0Y2hlcl9sb2FkZWQiLCJzdGFyYm9hcmRUYWJzIiwiQ3VzdG9tdGFiIiwiQzRnTGF5ZXIiLCJjb250ZW50Iiwib2JqZWN0VG9BcnJheSIsImNzc0NsYXNzIiwidHlwZSIsImVkaXRhYmxlIiwicmVuZGVyU3BlY2lhbCIsImRpc3BsYXkiLCJmTGF5ZXIiLCJjb3VudCIsImNoaWxkQXJyIiwiY2hlY2tMYXllcklzQWN0aXZlRm9yWm9vbSIsImlzSW5hY3RpdmUiLCJ2aXNpYmxlIiwiYWN0aXZlTGF5ZXJJZHMiLCJpdGVtVWlkIiwiZmVhdHVyZXMiLCJmZWF0dXJlUHJvamVjdGlvbiIsImRhdGFQcm9qZWN0aW9uIiwiY29udGVudERhdGEiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RDb250ZW50RGF0YSIsInJlcXVlc3RWZWN0b3JTb3VyY2UiLCJ2ZWN0b3JMYXllciIsInZlY3RvclNvdXJjZSIsInZlY3RvclN0eWxlIiwiY2x1c3RlclNvdXJjZSIsInN0eWxlRm9yQ2x1c3RlciIsInJlZnJlc2hJbnRlcnZhbCIsInJlZnJlc2hBamF4VmFycyIsImZuQXR0YWNoRGF0YVRvTGF5ZXIiLCJwcm9wZXJ0aWVzIiwicG9wdXAiLCJ0b29sdGlwIiwidG9vbHRpcF9sZW5ndGgiLCJsYWJlbCIsInpvb21fb25jbGljayIsImNvbnRlbnRGZWF0dXJlcyIsImZlYXR1cmUiLCJzaXplIiwiZkZlYXR1cmVzIiwiaWNvbk9mZnNldCIsInJhZGl1cyIsImZpbGxjb2xvciIsImZvbnRjb2xvciIsImxvY2F0aW9uU3R5bGUiLCJsb2NhdGlvblN0eWxlQ29udHJvbGxlciIsImFyckxvY1N0eWxlcyIsImZpdHRpbmdFeHRlbmRzIiwiZ2V0RXh0ZW50IiwidW5kZWZpbmVkIiwiZ2V0U3R5bGUiLCJnZXRJbWFnZSIsImdldFJhZGl1cyIsImdldEFuY2hvciIsImdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eSIsInVuaXQiLCJ2YWx1ZSIsImNsdXN0ZXJfZmlsbGNvbG9yIiwiY2x1c3Rlcl9mb250Y29sb3IiLCJTdHlsZSIsInRleHQiLCJUZXh0IiwiZm9udCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZmlsbCIsIkZpbGwiLCJjb2xvciIsInRvU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2V0dGluZ3MiLCJib3VuZGluZ0JveCIsIlZlY3RvciIsImxvYWRlciIsImJvdW5kaW5nQXJyYXkiLCJzdHJCb3VuZGluZ0JveCIsInByb2oiLCJ0cmFuc2Zvcm1FeHRlbnQiLCJzdWJzdHIiLCJiYm94VGFnIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsImFib3J0IiwiZm9ybWF0IiwickZlYXR1cmVzIiwib3NtTm9kZXMiLCJvc21OZHMiLCJub2RlSWR4IiwibmRJZHgiLCJpbmZvTm9kZXMiLCJuZXdUYWciLCJyZWYiLCJjaGlsZHJlbiIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0QXR0cmlidXRlIiwic2hvd0FkZGl0aW9uYWxHZW9tZXRyaWVzIiwicGFyZW50RWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwiZSIsIk9TTVhNTCIsInJlYWRGZWF0dXJlcyIsImdldEdlb21ldHJ5IiwiZ2V0VHlwZSIsInNldCIsImNsdXN0ZXJfem9vbSIsImNsdXN0ZXJfcG9wdXAiLCJsb2NfbGlua3VybCIsImhvdmVyX2xvY2F0aW9uIiwiaG92ZXJfc3R5bGUiLCJmb3JjZU5vZGVzIiwiY2VudGVyUG9pbnQiLCJnZXRJbnRlcmlvclBvaW50IiwiZ2V0Q29vcmRpbmF0ZXMiLCJzZXRHZW9tZXRyeSIsImdlb20iLCJQb2ludCIsImxpbmVFeHRlbnQiLCJhZGRpdGlvbmFsU3R5bGUiLCJzZXRTdHlsZSIsIm1hcHMiLCJyZWR1Y2VTdHlsZSIsImVsZW1lbnRzIiwiZWxlbWVudElkIiwidGFncyIsInBvaW50IiwibG9uIiwibGF0IiwidHJhbnNmb3JtIiwiRmVhdHVyZSIsImdlb21ldHJ5Iiwic2V0SWQiLCJhcnJDb29yZHMiLCJub2RlIiwiZmluZCIsIm9iak5vZGUiLCJub2RlcyIsInBvbHlnb24iLCJQb2x5Z29uIiwibGluZVN0cmluZyIsIkxpbmVTdHJpbmciLCJhZGRGZWF0dXJlcyIsInN0cmF0ZWd5IiwibG9hZGluZ3N0cmF0ZWd5IiwiYmJveCIsImFsbCIsInJlZnJlc2giLCJpbnRlcnZhbCIsImJsbkhhc1Bvc2l0aW9uSWRzIiwiYXJyUG9zaXRpb25JZHMiLCJvYmpGZWF0dXJlcyIsImZvckVhY2hGZWF0dXJlIiwicmVuZXdhYmxlUmVzcG9uc2UiLCJlYWNoIiwiZmVhdHVyZURhdGEiLCJyZWFkRmVhdHVyZSIsInBvcHVwQ29udGVudCIsInN0eWxlSWQiLCJsb2FkTG9jYXRpb25TdHlsZXMiLCJnZXRTb3VyY2UiLCJuZXN0ZWRGZWF0dXJlIiwiaGlkZUxheWVyIiwic2hvd0xheWVyIiwiYXJyTmV3UG9zaXRpb25JZHMiLCJvYmpOZXdGZWF0dXJlcyIsInBvc2l0aW9uSWQiLCJyZW1vdmVGZWF0dXJlIiwiYWRkRmVhdHVyZSIsInJlcXVlc3RGdW5jdGlvbnMiLCJjbHVzdGVyIiwiQ2x1c3RlciIsImRpc3RhbmNlIiwiQW5pbWF0ZWRDbHVzdGVyIiwiZ2V0VmVjdG9yTGF5ZXIiLCJmaXRUb0V4dGVuZCIsIm9uIiwiZml0VG9FeHRlbnRzIiwibGF5ZXJDb250ZW50IiwiY29udGVudEZlYXR1cmUiLCJHZW9KU09OIiwibWlzc2luZ1N0eWxlcyIsInVuc3R5bGVkRmVhdHVyZXMiLCJvbmNsaWNrX3pvb20iLCJkcmF3TGF5ZXIiLCJhZGRMYXllciIsImFzeW5jX2NvbnRlbnQiLCJzaG93IiwibG9jc3R5bGUiLCJhcGlfbGF5ZXJjb250ZW50ZGF0YV91cmwiLCJsb29wRGF0YSIsInJlc3VsdENvb3JkaW5hdGUiLCJwYXJzZUZsb2F0Iiwic2VhcmNoIiwiY2x1c3RlckRpc3RhbmNlIiwiYXBpX2xheWVyY29udGVudF91cmwiLCJuZXdMb2NhdGlvblN0eWxlcyIsImxvYWRMYXllckNvbnRlbnQiLCJsYXllclVpZCIsImtlZXBMYXllciIsInJlbW92ZUxheWVyIiwiaG9va19sYXllcl92aXNpYmlsaXR5IiwiY2xlYXJJbnRlcnZhbCIsInNldENlbnRlciIsImNoaWxkVWlkIiwiY2hpbGRMYXllciIsImdldEFycmF5IiwibWFwTGF5ZXJzIiwiYWN0aXZlRm9yWm9vbSIsInNob3dQb3B1cE9uQWN0aXZlIiwiJGNvbnRlbnQiLCJodG1sIiwiJHBvcHVwIiwiYWRkQ2xhc3MiLCJjb25zdGFudCIsImNzcyIsIkFDVElWRSIsIkxPQURJTkciLCJwb3B1cEluZm9zIiwiZ2V0RmVhdHVyZXMiLCJjb29yZCIsImFzeW5jIiwib2JqUG9wdXAiLCJwcm94eV9maWxsUG9wdXAiLCJzZXRQb3B1cCIsImFwaV9pbmZvd2luZG93X3VybCIsInBvcHVwSW5mbyIsInJvdXRpbmdfbGluayIsInNldEludGVydmFsIiwiZnVuY3Rpb24iLCJlbGVtZW50Q29udGVudCIsIkNpcmNsZSIsImZyb21Mb25MYXQiLCJmblN0eWxlRnVuY3Rpb24iLCJGdW5jdGlvbiIsImYiLCJmTGF5ZXJHcm91cCIsImZMYXllcnMiLCJmVmVjdG9yTGF5ZXIiLCJmVmVjdG9yU291cmNlIiwic2V0TGF5ZXJzIiwic3BsaXRfZ2VvanNvbiIsImdlb2pzb25fYXR0cmlidXRlcyIsInNwbGl0IiwibGF5ZXJJZCIsImwiLCJsYXllckFyciIsImhpZGVfY2hpbGQiLCJ6b29tX2xvY2F0aW9ucyIsImNoaWxkc0NvdW50IiwiZ2VvanNvbl96b29tIiwiaGlkZVdoZW5JblRhYiIsInByb2plY3RJZCIsIkM0Z0xvY2F0aW9uU3R5bGVDb250cm9sbGVyIiwiYXJySWRzIiwib3B0X29wdGlvbnMiLCJjb21wbGV0ZSIsInN1Y2Nlc3MiLCJtYWtlQWpheCIsInN0eWxlSWRzIiwiYXBpX2xvY3N0eWxlX3VybCIsImlkcyIsInN0eWxlRGF0YSIsInN1Y2Nlc3NmdWwiLCJDNGdMb2NhdGlvblN0eWxlIiwialhociIsInN0clN0YXR1cyIsImNvbXBsZXRlZCIsImhhc0NsYXNzIiwiSElERSIsImpxWEhSIiwidGV4dFN0YXR1cyIsImVycm9yVGhyb3duIiwibiIsInNwbGljZSIsImxvY1N0eWxlQXJyIiwiZ2V0U3R5bGVGdW5jdGlvbiIsImVkaXRvciIsImdldFN0eWxlRWRpdG9yQ29uZmlnIiwibWluem9vbSIsIm1heHpvb20iLCJzdHlsZUZ1bmN0aW9uIiwiaW1hZ2VTdHlsZSIsInN0cm9rZVN0eWxlIiwiZmlsbFN0eWxlIiwidGV4dFN0eWxlIiwidGV4dFN0eWxlT3V0bGluZSIsImJhY2tncm91bmRGaWxsIiwiYmFja2dyb3VuZFN0cm9rZSIsIlN0cm9rZSIsInN0cm9rZWNvbG9yIiwic3Ryb2tlb3BhY2l0eSIsIndpZHRoIiwic3Ryb2tld2lkdGgiLCJmaWxsb3BhY2l0eSIsInN0eWxldHlwZSIsIlJlZ3VsYXJTaGFwZSIsInN0cm9rZSIsInBvaW50cyIsImFuZ2xlIiwiTWF0aCIsIlBJIiwicmFkaXVzMSIsInJhZGl1czIiLCJmbG9vciIsImljb25fc3JjIiwiSWNvbiIsIm9wYWNpdHkiLCJpY29uX29wYWNpdHkiLCJzcmMiLCJpY29uX3NpemUiLCJzY2FsZSIsImljb25fc2NhbGUiLCJzdmdTcmMiLCJjYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwiaGVpZ2h0IiwiY2xlYXJSZWN0IiwiZmlsbFJlY3QiLCJsaW5lV2lkdGgiLCJzdHJva2VSZWN0IiwidHJhbnNsYXRlIiwiaW1nIiwiSW1hZ2UiLCJ6SW5kZXgiLCJvbmxvYWQiLCJkcmF3SW1hZ2UiLCJpbWdTaXplIiwiUGhvdG8iLCJraW5kIiwicGhvdG9LaW5kIiwiY3JvcCIsInNoYWRvdyIsImdldElkIiwic3R5bGVzQXJyYXkiLCJhcnJvd1NpemUiLCJhcnJvd1NpemVVbml0Iiwic2VnbWVudExlbmd0aCIsImFycm93c19taW56b29tIiwic3RhcnRfcGl4ZWwiLCJlbmRfcGl4ZWwiLCJkZWZhdWx0Q29sb3IiLCJkZWZhdWx0X2xhYmVsX2NvbG9yIiwibGFiZWxfb3V0bF9jb2xvciIsImxhYmVsX291dGxfd2lkdGgiLCJsYWJlbF9vdXRsX2JveCIsImxhYmVsX29mZnNldCIsImZvbnRfd2VpZ2h0IiwiZm9udF9zdHlsZSIsImZvbnRfc2l6ZSIsImZvbnRfZmFtaWx5IiwidGV4dEFsaWduIiwibGFiZWxfYWxpZ25faG9yIiwidGV4dEJhc2VsaW5lIiwibGFiZWxfYWxpZ25fdmVyIiwiZm9udF9jb2xvciIsImZvbnRfb3BhY2l0eSIsImltYWdlIiwibGluZV9hcnJvd3MiLCJmb3JFYWNoU2VnbWVudCIsImxpbmVfYXJyb3dzX3JhZGl1cyIsInN0YXJ0IiwiZW5kIiwibGluZV9hcnJvd3NfbWluem9vbSIsImdldFBpeGVsRnJvbUNvb3JkaW5hdGUiLCJzcXJ0IiwicG93Iiwicm90YXRlV2l0aFZpZXciLCJhdGFuMiIsImxpbmVfYXJyb3dzX2JhY2siLCJlZGl0b3JDb25maWciLCJjb2xsZWN0IiwiZWRpdG9yX2NvbGxlY3QiLCJpY29uU3JjIiwiZWRpdG9yX2ljb24iLCJ2YXJzIiwiZWRpdG9yX3ZhcnMiLCJlZGl0b3Jfc29ydCIsIkN5Y2xlTWFwIiwiR2VybWFuIiwiR2VybWFuVHJhbnNwb3J0IiwiTGFuZHNjYXBlTWFwIiwiTWFwbmlrIiwiTk9ORSIsIlRvbmVyIiwiVG9uZXJMYWJlbHMiLCJUb25lckxpbmVzIiwiVGVycmFpbiIsIldhdGVyY29sb3IiLCJtYXBxdWVzdCIsIk1hcFF1ZXN0T3BlbiIsIk1hcFF1ZXN0SHliIiwiTWFwUXVlc3RTYXQiLCJNYXBib3giLCJ0aWxlU2l6ZSIsIk1hcGJveENsYXNzaWMiLCJPcGVuTWFwVGlsZXMiLCJNVlQiLCJ0aWxlR3JpZCIsInRpbGVncmlkIiwiY3JlYXRlWFlaIiwidGlsZVBpeGVsUmF0aW8iLCJUaWxlSG9zdGluZyIsIkhFUkUiLCJUaHVuZGVyZm9yZXN0IiwiaTE4biIsIkxBTkciLCJOQU1FIiwiQ0xPU0UiLCJQT0lOVCIsIkZSRUVIQU5EIiwiTElORSIsIlBPTFlHT04iLCJDSVJDTEUiLCJQRVJJTUVURVIiLCJMRU5HVEgiLCJTVVJGQUNFQVJFQSIsIlJBRElVUyIsIlJFRlJFU0giLCJDT1BZX1RPX0NMSVBCT0FSRCIsIkNUUkxfWk9PTV9JTiIsIkNUUkxfWk9PTV9PVVQiLCJDVFJMX1pPT01fRVhUIiwiQ1RSTF9aT09NX0hPTUUiLCJDVFJMX1pPT01fUE9TIiwiQ1RSTF9aT09NX1NMSURFUiIsIkNUUkxfUkVTRVRfUk9UQVRJT04iLCJDVFJMX1BPUlRTSURFIiwiQ1RSTF9ST1VURVIiLCJDVFJMX0VESVRPUiIsIkNUUkxfTUVBU1VSRVRPT0xTIiwiQ1RSTF9JTkZPUEFHRSIsIkNUUkxfQURESVRJT05BTFBBTkVMIiwiQ1RSTF9BQ0NPVU5UIiwiQ1RSTF9aT09NTEVWRUwiLCJDVFJMX01PVVNFQ09PUkRTIiwiQ1RSTF9HRU9TRUFSQ0giLCJDVFJMX1NUQVJUX1NFQVJDSCIsIkNUUkxfT1ZFUlZJRVdNQVAiLCJDVFJMX0dFT0JPT0tNQVJLUyIsIkNUUkxfU0lERUJPQVJEIiwiQ1RSTF9TVEFSQk9BUkQiLCJDVFJMX0FUVFJJQlVUSU9OIiwiQ1RSTF9HUklEIiwiQ1RSTF9QRVJNQUxJTksiLCJDVFJMX0ZVTExTQ1JFRU4iLCJDVFJMX1BSSU5UIiwiRURJVE9SIiwiRURJVE9SX0VOQUJMRV9JTlNUQU5UX01FQVNVUkUiLCJFRElUT1JfRU5BQkxFX0ZSRUVIQU5EX0RSQVciLCJFRElUT1JfRkVBVFVSRV9BUFBMWSIsIkVESVRPUl9GRUFUVVJFX0RFTEVURSIsIkVESVRPUl9GRUFUVVJFX01PRElGWSIsIkVESVRPUl9TRUxFQ1RfSU5GTyIsIkVESVRPUl9TRUxFQ1RfSU5GT19BRERJVElPTkFMIiwiRURJVE9SX1ZJRVdfVFJJR0dFUl9TRUxFQ1QiLCJFRElUT1JfVklFV19UUklHR0VSX0RSQVdfUE9JTlQiLCJFRElUT1JfVklFV19UUklHR0VSX0RSQVdfRlJFRUhBTkQiLCJFRElUT1JfVklFV19UUklHR0VSX0RSQVdfTElORVNUUklORyIsIkVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19QT0xZR09OIiwiRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0NJUkNMRSIsIlBPUFVQX1JPVVRFX0ZST00iLCJQT1BVUF9ST1VURV9UTyIsIlNUQVJCT0FSRCIsIlNUQVJCT0FSRF9CQVNFTEFZRVIiLCJTVEFSQk9BUkRfTEFZRVIiLCJTVEFSQk9BUkRfVklFV19UUklHR0VSX0JBU0VMQVlFUlNXSVRDSEVSIiwiU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9MQVlFUlNXSVRDSEVSIiwiU0lERUJPQVJEIiwiUk9VVEVSX1ZJRVdfQUREUkVTU19JTlBVVCIsIlJPVVRFUl9GUk9NX0xBQkVMIiwiUk9VVEVSX09WRVJfTEFCRUwiLCJST1VURVJfVE9fTEFCRUwiLCJST1VURVJfQ0xFQVJfVElUTEUiLCJST1VURVJfQ0xFQVJfSFRNTCIsIlJPVVRFUl9MYWJlbF9JbnRlcmltIiwiUk9VVEVSX1NXSVRDSCIsIlJPVVRFUl9PVkVSIiwiUk9VVEVSX1BSSU5UIiwiUk9VVEVSX1ZJRVdfTEFCRUxfUk9VVEUiLCJST1VURVJfVklFV19MQUJFTF9ESVNUQU5DRSIsIlJPVVRFUl9WSUVXX0xBQkVMX1RJTUUiLCJST1VURVJfVklFV19MQUJFTF9QUk9GSUxFIiwiUk9VVEVSX1ZJRVdfQUxFUlRfQUREUkVTUyIsIlJPVVRFUl9WSUVXX0FMRVJUX0dPQ09ESU5HIiwiUk9VVEVSIiwiUk9VVEVSX04iLCJST1VURVJfRSIsIlJPVVRFUl9TIiwiUk9VVEVSX1ciLCJST1VURVJfTkUiLCJST1VURVJfU0UiLCJST1VURVJfU1ciLCJST1VURVJfTlciLCJST1VURVJfRElSRUNUSU9OXzAiLCJST1VURVJfRElSRUNUSU9OXzEiLCJST1VURVJfRElSRUNUSU9OXzIiLCJST1VURVJfRElSRUNUSU9OXzMiLCJST1VURVJfRElSRUNUSU9OXzQiLCJST1VURVJfRElSRUNUSU9OXzUiLCJST1VURVJfRElSRUNUSU9OXzYiLCJST1VURVJfRElSRUNUSU9OXzciLCJST1VURVJfRElSRUNUSU9OXzgiLCJST1VURVJfRElSRUNUSU9OXzEwIiwiUk9VVEVSX0RJUkVDVElPTl8xNSIsIlJPVVRFUl9GUk9NIiwiUk9VVEVSX1RPIiwiUk9VVEVSX0ZJTkRfUk9VVEUiLCJST1VURVJfTE9DX1JPVVRFX1RPIiwiUk9VVEVSX1JPVVRFREVTQyIsIlJPVVRFUl9ST1VURU5BTUUiLCJST1VURVJfRElTVEFOQ0UiLCJST1VURVJfVElNRSIsIlJPVVRFUl9SRVZfR0VPQ09ESU5HIiwiUk9VVEVSX0VSUk9SX1JFVl9HRU9DT0RJTkciLCJST1VURVJfU0VBUkNISU5HIiwiUk9VVEVSX0VSUk9SX1NFQVJDSElORyIsIlJPVVRFUl9DQUxDX1JPVVRFIiwiUk9VVEVSX0VSUk9SX0NBTENfUk9VVEUiLCJNRUFTVVJFVE9PTFMiLCJNRUFTVVJFVE9PTFNfSU5GTyIsIk1FQVNVUkVUT09MU19JTkZPX0FERElUSU9OQUwiLCJNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX1NFTEVDVCIsIk1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19MSU5FU1RSSU5HIiwiTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX1BPTFlHT04iLCJNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfQ0lSQ0xFIiwiTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0ZSRUVIQU5EIiwiR0VPQk9PS01BUktTX1BMQUNFSE9MREVSIiwiSU5GT1BBR0UiLCJBRERJVElPTkFMUEFORUwiLCJBRERJVElPTkFMUEFORUxfVklFV19UUklHR0VSIiwiQUNDT1VOVCIsIkFDQ09VTlRfVklFV19UUklHR0VSIiwiU0VBUkNIX05PVF9GT1VORCIsImxhbmdDb25zdGFudHNHZXJtYW4iLCJJTkZPUEFHRV9WSUVXX1RSSUdHRVIiLCJsYW5nQ29uc3RhbnRzRW5nbGlzaCIsIk9QRU4iLCJDTE9TRUFCTEUiLCJFTkFCTEVEIiwiRElTQUJMRUQiLCJJQ09OIiwiQ09OVFJPTCIsIkNPUFkiLCJJTkFDVElWRSIsIkFOSU1BVElPTl9TUElOIiwiTEFSR0UiLCJTTUFMTCIsIkhPUklaT05UQUwiLCJWRVJUSUNBTCIsIkFUVFJJQlVUSU9OX0xPR08iLCJDT05UUk9MX0NPTlRBSU5FUl9UUiIsIkNPTlRST0xfQ09OVEFJTkVSX0JSIiwiRURJVE9SX0RSQVdfQ09OVEVOVF9QT0lOVCIsIkVESVRPUl9EUkFXX0NPTlRFTlRfRlJFRUhBTkQiLCJFRElUT1JfRFJBV19DT05URU5UX0xJTkVTVFJJTkciLCJFRElUT1JfRFJBV19DT05URU5UX1BPTFlHT04iLCJFRElUT1JfRFJBV19DT05URU5UX0NJUkNMRSIsIkVESVRPUl9EUkFXX0NPTlRFTlRfUFJPSkVDVCIsIkVESVRPUl9EUkFXX1RSSUdHRVIiLCJFRElUT1JfQ09OVEVOVF9TRUxFQ1QiLCJFRElUT1JfRFJBV19PUFRJT05TIiwiR0VPU0VBUkNIIiwiR0VPU0VBUkNIX1dSQVBQRVIiLCJHRU9TRUFSQ0hfVFJJR0dFUiIsIkdFT1NFQVJDSF9TVEFSVCIsIkdSQVRJQ1VMRSIsIlBSSU5UIiwiT1ZFUlZJRVdNQVAiLCJPVkVSVklFV01BUF9XUkFQUEVSIiwiR0VPQk9PS01BUktTIiwiUEVSTUFMSU5LIiwiUEVSTUFMSU5LX1BPUFVQIiwiUE9QVVBfQ0xPU0UiLCJQT1BVUF9ST1VURV9XUkFQUEVSIiwiUE9SVFNJREUiLCJQT1JUU0lERV9DT05UQUlORVIiLCJQT1JUU0lERV9DT05UUk9MIiwiUE9SVFNJREVfV1JBUFBFUiIsIlBPUlRTSURFX1RJVExFQkFSIiwiUE9SVFNJREVfVE9QX1RPT0xCQVIiLCJQT1JUU0lERV9DT05URU5UX0NPTlRBSU5FUiIsIlBPUlRTSURFX0JPVFRPTV9UT09MQkFSIiwiUE9SVFNJREVfU1RBVFVTQkFSIiwiUE9SVFNJREVfVklFV1RSSUdHRVJCQVIiLCJQT1JUU0lERV9IRUFETElORSIsIlBPUlRTSURFX0JVVFRPTkJBUiIsIlBPUlRTSURFX0JVVFRPTiIsIlBPUlRTSURFX0hJREUiLCJQT1JUU0lERV9DTE9TRSIsIlNQSU5ORVIiLCJTVEFSQk9BUkRfQ09OVEFJTkVSIiwiU1RBUkJPQVJEX0NPTlRST0wiLCJTVEFSQk9BUkRfV1JBUFBFUiIsIlNUQVJCT0FSRF9USVRMRUJBUiIsIlNUQVJCT0FSRF9DT05URU5UX0NPTlRBSU5FUiIsIlNUQVJCT0FSRF9CT1RUT01fVE9PTEJBUiIsIlNUQVJCT0FSRF9TVEFUVVNCQVIiLCJTVEFSQk9BUkRfVklFV1RSSUdHRVJCQVIiLCJTVEFSQk9BUkRfSEVBRExJTkUiLCJTVEFSQk9BUkRfQlVUVE9OQkFSIiwiU1RBUkJPQVJEX0JVVFRPTiIsIlNUQVJCT0FSRF9DTE9TRSIsIlNUQVJCT0FSRF9DT05URU5UX0JBU0VMQVlFUlNXSVRDSEVSIiwiU1RBUkJPQVJEX0JBU0VMQVlFUlRSRUUiLCJTVEFSQk9BUkRfTEFZRVJUUkVFIiwiU1RBUkJPQVJEX0NPTlRFTlRfTEFZRVJTV0lUQ0hFUiIsIlRPT0xUSVBfUE9QVVAiLCJaT09NX0xFVkVMIiwiUk9VVEVSX0lOUFVUX1dSQVBQRVIiLCJST1VURVJfUFJPRklMRV9XUkFQUEVSIiwiUk9VVEVSX0lOUFVUX0ZST00iLCJST1VURVJfSU5QVVRfVE8iLCJST1VURVJfSU5QVVRfQ0xFQVIiLCJST1VURVJfQlVUVE9OQkFSIiwiUk9VVEVSX0FUVFJJQlVUSU9OX1dSQVBQRVIiLCJST1VURVJfSU5TVFJVQ1RJT05TX1dSQVBQRVIiLCJST1VURVJfSU5TVFJVQ1RJT05TX0hFQURFUiIsIlJPVVRFUl9QUk9GSUxFX0NBUiIsIlJPVVRFUl9QUk9GSUxFX0hHViIsIlJPVVRFUl9QUk9GSUxFX0JJS0UiLCJST1VURVJfUFJPRklMRV9GT09UIiwiUk9VVEVSX1BST0ZJTEVfV0hFRUxDSEFJUiIsIlJPVVRFUl9JTlNUUlVDVElPTlNfVEFCTEUiLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU0iLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fT0REIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0VWRU4iLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9JQ09OIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9URVhUIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9ESVNUQU5DRSIsIk9MX0NPTlRST0wiLCJPTF9PVkVSTEFZQ09OVEFJTkVSIiwiT0xfT1ZFUkxBWUNPTlRBSU5FUl9TRSIsIk9MX1ZJRVdQT1JUIiwiT0xfWk9PTSIsIk9MX1pPT01fSU4iLCJPTF9aT09NX0VYVCIsIk9MX1pPT01fSE9NRSIsIk9MX1pPT01fUE9TIiwiT0xfWk9PTV9XSVRIX0VYVCIsIk9MX1pPT01fV0lUSF9IT01FIiwiT0xfWk9PTV9XSVRIX1BPUyIsIk9MX1pPT01fU0xJREVSIiwiT0xfWk9PTV9XSVRIX1NMSURFUiIsImNvbnRyb2wiLCJsYW5nQ29uc3RhbnRzIiwibGFuZyIsIkdyaWQiLCJidXR0b24iLCJvYmpHcmlkIiwiR3JhdGljdWxlIiwic2hvd0xhYmVscyIsInN3aXRjaGFibGUiLCJ0aXBMYWJlbCIsImRpc2FibGVMYWJlbCIsInNldE1hcCIsImdldE1hcCIsImRpc2FibGUiLCJyZW1vdmVDbGFzcyIsImV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiYmx1ciIsInRpdGxlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkNvbnRyb2wiLCJjYWxsIiwidGFyZ2V0IiwiaW5oZXJpdHMiLCJwcm90b3R5cGUiLCJIb21lIiwiZW5hYmxlZCIsInNldFJvdGF0aW9uIiwiZ2VvTG9jYXRpb24iLCJnZW9sb2NhdGlvbiIsIkdlb2xvY2F0aW9uIiwidHJhY2tpbmciLCJldnQiLCJnZXRQb3NpdGlvbiIsImdlb2xvY2F0aW9uX3pvb20iLCJzZXRUcmFja2luZyIsIk92ZXJ2aWV3TWFwIiwidHJpZ2dlciIsInRyaWdnZXJJY29uIiwib3ZtIiwiY29sbGFwc2VkIiwiY2xpY2siLCJpZ25vcmUiLCJjb2xsYXBzaWJsZSIsIlBlcm1hbGluayIsImNvcHlCdXR0b24iLCJyZWZyZXNoQnV0dG9uIiwiZ2V0UGFyYW1ldGVyIiwicG9wdXBBdHRhY2hlZCIsInRleHRmaWVsZCIsIkNsaXBib2FyZCIsImdlbmVyYXRlTGlua0Zyb21DdXJyZW50U3RhdGUiLCJvcGVuIiwic2xpZGVEb3duIiwiY2xvc2UiLCJtYXBWaWV3IiwicGFyYW1ldGVycyIsImxpbmsiLCJiYXNlTGF5ZXJJZHgiLCJsYXllcklkeCIsInBhcmFtQ291bnQiLCJ0b0ZpeGVkIiwiZGVsdGFFbmNvZGUiLCJqb2luIiwic2V0VXJsUGFyYW0iLCJnZW5lcmF0ZUxpbmsiLCJBY2NvdW50IiwiaGVhZGxpbmUiLCJjcmVhdGUiLCJkaXJlY3Rpb24iLCJtYWluU2VjdGlvbiIsIlNpZGVib2FyZCIsImluaXQiLCJ2aWV3QWNjb3VudCIsImFkZEFjY291bnRWaWV3IiwiYWN0aXZhdGUiLCJtYWluU2VjdGlvbkFjY291bnQiLCJhY2NvdW50IiwiY29udGVudENvbnRhaW5lciIsInNldEVsZW1lbnQiLCJhY2NvdW50VmlldyIsImFkZFZpZXciLCJ0cmlnZ2VyQ29uZmlnIiwid2l0aEhlYWRsaW5lIiwic2VjdGlvbkVsZW1lbnRzIiwic2VjdGlvbiIsInRvcFRvb2xiYXIiLCJ2aWV3VHJpZ2dlckJhciIsImFkZEFjY291bnQiLCJUUklHR0VSX0FDQ09VTlQiLCJpbnRlcmFjdGlvbiIsImluaXRGdW5jdGlvbiIsIkNvbGxlY3Rpb24iLCJhY3RpdmF0ZUZ1bmN0aW9uIiwiZGVhY3RpdmF0ZUZ1bmN0aW9uIiwiRWRpdG9yIiwiZGF0YUZpZWxkIiwiZHJhd01vZGVzIiwidGFicyIsImxhc3REcmF3SW50ZXJhY3Rpb24iLCJvcHRfZXh0ZXJuYWxpbml0IiwibGF5ZXJTdHlsZUZ1bmN0aW9uIiwidmlld1NlbGVjdCIsImVkaXRQb2ludExheWVyIiwiZWRpdExpbmVMYXllciIsImVkaXRQb2x5Z29uTGF5ZXIiLCJlZGl0Q2lyY2xlTGF5ZXIiLCJlZGl0RnJlZWhhbmRMYXllciIsImVkaXRMYXllckdyb3VwIiwiYWRkU2VsZWN0VmlldyIsImdldEpTT04iLCJhcGkiLCJwcm9maWxlIiwic3R5bGVzX3BvaW50IiwiYWRkRHJhd1ZpZXciLCJzdHlsZXNfbGluZSIsInN0eWxlc19wb2x5Z29uIiwic3R5bGVzX2NpcmNsZSIsInN0eWxlc19mcmVlaGFuZCIsImVkaXRvcl9sb2FkVGFicyIsImltcG9ydEdlb0pTT04iLCJsb2FkIiwic2F2ZSIsImluaXRpYWxpemVkIiwicHJlQ2xvc2VGdW5jdGlvbiIsImdldFZpc2libGUiLCJwcmVPcGVuRnVuY3Rpb24iLCJzZWxlY3RJbnRlcmFjdGlvbiIsInNlbGVjdEJveEludGVyYWN0aW9uIiwic2VsZWN0ZWRGZWF0dXJlcyIsInNlbGVjdENvbnRlbnRXcmFwcGVyIiwic2VsZWN0Q29udGVudEhlYWRsaW5lIiwic2VsZWN0Q29udGVudCIsInNlbGVjdENvbnRlbnRJbmZvIiwic2VsZWN0VmlldyIsImZuSGFuZGxlU2VsZWN0aW9uIiwiU2VsZWN0IiwidG9nZ2xlQ29uZGl0aW9uIiwiZXZlbnRzIiwiY29uZGl0aW9uIiwicGxhdGZvcm1Nb2RpZmllcktleU9ubHkiLCJzdHlsZUFycmF5Iiwic3R5bGVSYWRpdXMiLCJEcmFnQm94Iiwic2hpZnRLZXlPbmx5IiwiZm9yRWFjaEZlYXR1cmVJbnRlcnNlY3RpbmdFeHRlbnQiLCJjbGVhciIsImVkaXRvclZhcnMiLCJoZWFkbGluZUVsZW1lbnQiLCJpbnB1dE5hbWVFbGVtZW50IiwibW9kaWZ5QnV0dG9uRWxlbWVudCIsImRlbGV0ZUJ1dHRvbkVsZW1lbnQiLCJwYXJhZ3JhcGhFbGVtZW50Iiwic3Ryb25nRWxlbWVudCIsImlucHV0RWxlbWVudCIsImZlYXR1cmVDb3VudCIsInNlbGVjdGVkRmVhdHVyZSIsImJsdXJPbkVudGVyIiwiaW5wdXRDaGFuZ2VIYW5kbGVyIiwibmFtZUNoYW5nZUhhbmRsZXIiLCJtb2RpZnlGZWF0dXJlRnVuY3Rpb24iLCJkZWxldGVGZWF0dXJlRnVuY3Rpb24iLCJyZW5kZXJTZWxlY3RlZEZlYXR1cmVzTGlzdCIsImFwcGx5RmVhdHVyZU1vZGlmaWNhdGlvbiIsIndoaWNoIiwiY2hhbmdlZEZlYXR1cmUiLCJlbmNvZGVHZW9Kc29uUHJvcGVydHkiLCJlZGl0b3JfZmVhdHVyZUNoYW5nZWQiLCJhY3Rpb24iLCJjdXJyZW50VmFycyIsIm1vZGlmeUZlYXR1cmUiLCJmZWF0dXJlR2VvbWV0cnkiLCJ0cmFuc2xhdGVJbnRlcmFjdGlvbiIsIm1vZGlmeUludGVyYWN0aW9uIiwibW9kaWZ5QnV0dG9uIiwiYXBwbHlCdXR0b24iLCJUcmFuc2xhdGUiLCJhZGRJbnRlcmFjdGlvbiIsIk1vZGlmeSIsInNldEFjdGl2ZSIsInJlbW92ZUludGVyYWN0aW9uIiwicGFyZW50Tm9kZSIsInJlcGxhY2VDaGlsZCIsImZlYXR1cmVJbmRleCIsImZlYXR1cmVTb3VyY2UiLCJkZWxldGVGZWF0dXJlIiwicmVtb3ZlIiwiZ2V0TGVuZ3RoIiwiZGVjb2RlR2VvSnNvblByb3BlcnR5Iiwia2V5ZG93biIsIm9uY2hhbmdlIiwiaHRtbFZhbHVlIiwidXBkYXRlIiwibWFwSG92ZXIiLCJkZWFjdGl2YXRlIiwiVFJJR0dFUl9EUkFXIiwiZHJhd0NvbnRlbnQiLCJvcHRpb25zRGl2IiwiZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveCIsImVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3hMYWJlbCIsImNoZWNrYm94Q2hhbmdlSGFuZGxlciIsImRyYXdWaWV3IiwiYWRkRHJhd1N0eWxlIiwib2xUeXBlIiwidG9VcHBlckNhc2UiLCJpbnRlcmFjdGlvblZpZXciLCJlZGl0b3JTdHlsZSIsInN0eWxlSWNvbiIsInN0eWxlSW1hZ2UiLCJzdHlsZVRyaWdnZXJMYWJlbCIsImZlYXR1cmVJZENvdW50IiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJtYXJnaW4iLCJlZGl0b3JfaWNvbl9zaXplIiwiZ2V0U3JjIiwiZ2V0U2NhbGUiLCJiYWNrZ3JvdW5kIiwiZ2V0RmlsbCIsImdldENvbG9yIiwiYm9yZGVyIiwiZ2V0U3Ryb2tlIiwiaW50ZXJhY3Rpb25TdHlsZUltYWdlIiwiYWN0aXZlU2tldGNoIiwiYWN0aXZlVG9vbHRpcCIsIkRyYXciLCJmcmVlaGFuZCIsImdldFdpZHRoIiwiY2hlY2tlZCIsIlRvb2x0aXBQb3BVcCIsInBvc2l0aW9uIiwiY29vcmRpbmF0ZSIsImhvcml6b250YWwiLCJtZWFzdXJlR2VvbWV0cnkiLCJyYXdWYWx1ZSIsInNldFBvc2l0aW9uIiwic2V0Q29udGVudCIsImZpbmlzaERyYXdpbmciLCJuZWVkZWRTdHlsZXMiLCJzb3J0QW5kQWRkU3R5bGVzIiwiYXJyU3R5bGVJZHMiLCJsb2NhdGlvblN0eWxlcyIsImRyYXdJbnRlcmFjdGlvbiIsIm9wdF9zbG90Iiwic2F2ZURhdGEiLCJzbG90TmFtZSIsInN0b3JhZ2UiLCJleHBvcnRHZW9KU09OIiwid3JpdGVGZWF0dXJlcyIsImxpbmVzIiwicG9seWdvbnMiLCJjaXJjbGVzIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInNlc3Npb25TdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwiZWRpdG9yX29uU2F2ZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwibG9hZERhdGEiLCJmZWF0dXJlQ29sbGVjdGlvbiIsImltcG9ydEZlYXR1cmVzIiwiZ2V0SXRlbSIsInBhcnNlIiwiY29uY2F0IiwiaW5BcnJheSIsImVkaXRvcl9vbkxvYWQiLCJ2YWwiLCJvcHRfZ2VvanNvbiIsImZpdFRvRXh0ZW50IiwiZ2V0RXh0ZW50Rm9yR2VvbWV0cmllcyIsImNvbnRhaW5lciIsIm9mZnNldFdpZHRoIiwiSW5mb3BhZ2UiLCJ2aWV3SW5mb3BhZ2UiLCJhZGRJbmZvVmlldyIsIm1haW5TZWN0aW9uSW5mbyIsImluZm9wYWdlIiwiaW5mb1ZpZXciLCJhZGRJbmZvcGFnZSIsIlRSSUdHRVJfSU5GT1BBR0UiLCJNZWFzdXJldG9vbHMiLCJmaXJzdEVsZW1lbnQiLCJtZWFzdXJlTGluZUxheWVyIiwibWVhc3VyZVBvbHlnb25MYXllciIsIm1lYXN1cmVDaXJjbGVMYXllciIsIm1lYXN1cmVGcmVlaGFuZExheWVyIiwibWVhc3VyZUxheWVyR3JvdXAiLCJ2aWV3TWVhc3VyZVNlbGVjdCIsInZpZXdNZWFzdXJlTGluZSIsImFkZE1lYXN1cmVWaWV3Iiwidmlld01lYXN1cmVBcmVhIiwidmlld01lYXN1cmVSYWRpdXMiLCJ2aWV3TWVhc3VyZUZyZWVoYW5kIiwibGluZUZlYXR1cmVzIiwicG9seWdvbkZlYXR1cmVzIiwiY2lyY2xlRmVhdHVyZXMiLCJmcmVlaGFuZEZlYXR1cmVzIiwibWVhc3VyZVZpZXciLCJhZGRNZWFzdXJlRmVhdHVyZSIsInVwZGF0ZU1lYXN1cmVGZWF0dXJlIiwiZ2V0VmFsdWVPZkdlb21ldHJ5IiwiZ2V0TGVuZ3RoT2ZNZWFzdXJlIiwicmVtb3ZlTWVhc3VyZUZlYXR1cmUiLCJsaXN0RWxlbWVudCIsImxhYmVsRWxlbWVudCIsInNwYW5FbGVtZW50Iiwic3RyTGFiZWwiLCJzdHJUeXBlIiwibWVhc3VyZUFyZWEiLCJtZWFzdXJlUmFkaXVzIiwiY2hpbGRFbGVtZW50Q291bnQiLCJyZW1vdmVDaGlsZCIsImNoYW5nZSIsImZlYXR1cmVUb29sdGlwIiwibmV3Q29udGVudCIsImFyZWEiLCJsZW5nIiwidmFsdWVudW1iIiwibWF0Y2giLCJsZW5ndGhudW1iIiwiY2xvc2VhYmxlIiwiY2xvc2VGdW5jdGlvbiIsIlJvdXRlciIsInZpZXdSb3V0ZXIiLCJwcm9maWxlSWQiLCJyb3V0ZXJfZnJvbV9sb2NzdHlsZSIsInJvdXRlcl90b19sb2NzdHlsZSIsInJvdXRlcl9wb2ludF9sb2NzdHlsZSIsInJvdXRpbmdBbHRXYXlTb3VyY2UiLCJyb3V0aW5nV2F5U291cmNlIiwicm91dGVyV2F5TGF5ZXIiLCJyb3V0ZXJBbHRXYXlMYXllciIsInNlbGVjdGVkIiwic2hvd0FsdFJvdXRlIiwicm91dGluZ0hpbnRTb3VyY2UiLCJyb3V0ZXJIaW50TGF5ZXIiLCJsb2NhdGlvbnNTb3VyY2UiLCJsb2NhdGlvbnNMYXllciIsInJvdXRlckxheWVyR3JvdXAiLCJhZGRVc2VySW50ZXJmYWNlIiwiZ2VvU2VhcmNoQXBpIiwiZ2VvUmV2ZXJzZVNlYXJjaEFwaSIsImdlb3NlYXJjaF9yZXZlcnNlIiwicm91dGluZ0FwaSIsInJvdXRpbmciLCJhZGRNYXBJbnB1dEludGVyYWN0aW9uIiwidG9Mb25MYXQiLCJwZXJmb3JtUmV2ZXJzZVNlYXJjaCIsIiR0b0lucHV0IiwidG9WYWx1ZSIsInJlY2FsY3VsYXRlUm91dGUiLCJwcmVIaWRlRnVuY3Rpb24iLCJyZW1vdmVNYXBJbnB1dEludGVyYWN0aW9uIiwicm91dGVySW5zdHJ1Y3Rpb25zV3JhcHBlciIsImVtcHR5IiwiY2xlYXJJbnB1dCIsIiRmcm9tSW5wdXQiLCJvdmVyVmFsdWUiLCJjbGVhck92ZXIiLCIkb3ZlcklucHV0IiwiZWxlbSIsImdldEVsZW1lbnRCeUlkIiwidW4iLCJmbk1hcFJvdXRlckludGVyYWN0aW9uIiwiZnJvbVZhbHVlIiwiJGJ1dHRvbk92ZXIiLCJwcm9wIiwiZ2V0SW50ZXJhY3Rpb25zIiwicm91dGVyVmlldyIsInJvdXRlclZpZXdJbnB1dFdyYXBwZXIiLCJyb3V0ZXJWaWV3Q29udGVudFdyYXBwZXIiLCJyb3V0ZXJWaWV3Q29udGVudEhlYWRsaW5lIiwicHJpbnQiLCJyb3V0ZVByb2ZpbGUiLCJyb3V0ZXJGcm9tTGFiZWwiLCJyb3V0ZXJPdmVyTGFiZWwiLCJyb3V0ZXJUb0xhYmVsIiwicm91dGVyRnJvbUNsZWFyIiwicm91dGVyT3ZlckNsZWFyIiwicm91dGVyVG9DbGVhciIsInN3aXRjaEZyb21UbyIsImJ1dHRvbk92ZXIiLCJmcm9tSW5wdXRXcmFwcGVyIiwiZnJvbUlucHV0IiwiJHJvdXRlckZyb21DbGVhciIsIiRzd2l0Y2hGcm9tVG8iLCIkcHJpbnQiLCJyb3V0ZXJCdXR0b25CYXIiLCJyb3V0ZXJfYXBpX3NlbGVjdGlvbiIsIk9iamVjdCIsImtleXMiLCJyb3V0ZXJfcHJvZmlsZXMiLCJhY3RpdmUiLCJjYXIiLCIkcm91dGVQcm9maWxlQ2FyIiwiY2xlYXJTaWJsaW5ncyIsImhndiIsIiRyb3V0ZVByb2ZpbGVIZ3YiLCJzcGFuQmlrZSIsImJpa2UiLCJsaXN0IiwiJHJvdXRlUHJvZmlsZUJpa2UiLCJjaGlsZENsaWNrIiwicGFyZW50Iiwic3BhbkZvb3QiLCJmb290IiwiJHJvdXRlUHJvZmlsZUZvb3QiLCJ3aGVlbGNoYWlyIiwiJHJvdXRlUHJvZmlsZVdoZWVsY2hhaXIiLCIkZWxlbWVudCIsInNpYmxpbmdzIiwicHJldmVudERlZmF1bHQiLCJvdmVySW5wdXRXcmFwcGVyIiwib3ZlcklucHV0IiwiJHJvdXRlck92ZXJDbGVhciIsInBlcmZvcm1TZWFyY2giLCJzd2l0Y2hWYXJOYW1lIiwic3dpdGNoVmFyVmFsIiwicm91dGluZ0NvbnRlbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiV2luUHJpbnQiLCJ3cml0ZSIsImZvY3VzIiwidG9JbnB1dFdyYXBwZXIiLCJ0b0lucHV0IiwiJHJvdXRlclRvQ2xlYXIiLCJzdGF0dXNCYXIiLCJnZXRBdHRyaWJ1dGlvbiIsInNldElucHV0IiwiZnJvbSIsImF0dHJpYnV0aW9uU2VhcmNoIiwiYXR0cmlidXRpb25Sb3V0ZXIiLCJhdHRyaWJ1dGlvblJvdXRlckhvc3QiLCJhdHRyaWJ1dGlvbldyYXBwZXIiLCJhdHRyaWJ1dGlvbkh0bWwiLCJyb3V0ZXJfYXR0cmlidXRpb24iLCJ0bXBGZWF0dXJlIiwiY2xvbmUiLCJwcm9wdCIsInJvdXRlcl9pbnRlcmltX2xvY3N0eWxlIiwicGVyZm9ybVZpYVJvdXRlIiwiZnJvbVBvaW50IiwidG9Qb2ludCIsIm92ZXJQb2ludCIsImZyb21Db29yZCIsInRvQ29vcmQiLCJvdmVyQ29vcmQiLCJBcnJheSIsInNob3dSb3V0ZSIsInJvdXRlUmVzcG9uc2UiLCJzaG93Um91dGVMYXllciIsInNob3dSb3V0ZUluc3RydWN0aW9ucyIsInJvdXRlTnVtYmVyIiwid2F5UG9seWxpbmUiLCJyb3V0ZUZlYXR1cmVzIiwiYWx0Um91dGVGZWF0dXJlcyIsInJpZ2h0UGFkZGluZyIsImxlZnRQYWRkaW5nIiwiUG9seWxpbmUiLCJyb3V0ZXMiLCJyb3V0ZXJfdmlhcm91dGVfcHJlY2lzaW9uIiwicm91dGVfZ2VvbWV0cnkiLCJyb3V0ZXJfYWx0ZXJuYXRpdmUiLCJyZW5kZXJTeW5jIiwiYW5pbWF0ZSIsIkRhdGUiLCJkdXJhdGlvbiIsImFjdGl2ZVBvcnRzaWRlIiwib3V0ZXJXaWR0aCIsImFjdGl2ZVN0YXJib2FyZCIsImZpdCIsImdldFNpemUiLCJwYWRkaW5nIiwiZ2V0SW5zdHJ1Y3Rpb25JY29uIiwic3RyTW9kIiwiZ2V0SW5zdHJ1Y3Rpb25JY29uT1JTIiwiaW50VHlwZSIsImhyZWYiLCJnZXRUeXBlVGV4dCIsInRleHRJRCIsImdldE1vZGlmaWVyVGV4dCIsInN0ck1vZGlmaWVyIiwiZ2V0RHJpdmluZ0luc3RydWN0aW9uSWNvbiIsImluc3RydWN0aW9uSWQiLCJnZXRUZXh0IiwidGV4dF9pZCIsImdldERyaXZpbmdJbnN0cnVjdGlvbiIsImRlc2NyaXB0aW9uIiwicm91dGVySW5zdHJ1Y3Rpb24iLCJyb3V0ZXJJbnN0cnVjdGlvbnNIZWFkZXIiLCJyb3V0ZXJJbnN0cnVjdGlvbnNIdG1sIiwiaW5zdHIiLCJyb3dzdHlsZSIsInJvdXRlX25hbWVfMCIsInJvdXRlX25hbWVfMSIsInRvdGFsX2Rpc3RhbmNlIiwidG90YWxfdGltZSIsImxlZ3MiLCJzdW1tYXJ5IiwidG9IdW1hbkRpc3RhbmNlIiwidG9IdW1hblRpbWUiLCJyb3V0ZV9uYW1lIiwicm91dGVfc3VtbWFyeSIsInN0ZXBzIiwibWFuZXV2ZXIiLCJtb2RpZmllciIsImluc3RydWN0aW9udGV4dCIsImV4aXQiLCJyb3V0ZV9pbnN0cnVjdGlvbnMiLCJzZWdtZW50cyIsImluc3RydWN0aW9uIiwiYWRqdXN0SW5zdHJ1Y3Rpb25NYXBJbnRlcmFjdGlvbiIsImZuSXRlbUNsaWNrIiwiZm5JdGVtT3ZlciIsImZuSXRlbU91dCIsImN1cnJlbnRDb29yZGluYXRlcyIsImN1cnJlbnRIaW50RmVhdHVyZSIsImNvb3JkTG9uTGF0Iiwic3RyaW5nbG9ubGF0IiwibmV3Q29vcmQiLCIkaW5wdXQiLCJhZGRyZXNzIiwiY2l0eSIsInJvYWQiLCJ0b3duIiwiaG91c2VfbnVtYmVyIiwiYXR0ciIsIm9wdF9jYWxsYmFjayIsImJvdW5kcyIsInZpZXdib3giLCJjYWxjdWxhdGVFeHRlbnQiLCJlbmNvZGVVUkkiLCJhbGVydCIsImVycm9yIiwiUk9VVEVSX1ZJRVdfQUxFUlRfR0VPQ09ESU5HIiwiZGlzdGFuY2VJbk1ldGVycyIsImh1bWFuRGlzdGFuY2UiLCJ0aW1lSW5TZWNvbmRzIiwic2Vjb25kcyIsIm1pbnV0ZXMiLCJob3VycyIsImh1bWFuVGltZSIsIlBvc2l0aW9uIiwiUHJpbnQiLCJ0b0Jsb2IiLCJibG9iIiwiYm9keSIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImRvd25sb2FkIiwicmV2b2tlT2JqZWN0VVJMIiwiZXh0RGl2IiwiZGVmYXVsdE9wZW4iLCJpZGVudGlmaWVyIiwiY3NzbmFtZSIsIndyYXBwZXIiLCJ0aXRsZUJhciIsImJvdHRvbVRvb2xiYXIiLCJzZWN0aW9ucyIsInZpZXdzIiwiYWN0aXZlVmlldyIsInBhdXNlZFZpZXciLCJpbml0Q2xhc3MiLCJ0aXRsZUJ1dHRvbkJhciIsImNsb3NlQnV0dG9uIiwiY2FwaXRhbGl6ZWROYW1lIiwiaGlkZUJ1dHRvbiIsImNhY2hpbmciLCJjYXBpdGFsaXplRmlyc3RMZXR0ZXIiLCJtZXNzYWdlIiwiZ2V0VGFyZ2V0IiwiYXBwZW5kIiwiYWRkU2VjdGlvbiIsImNvbnRlbnRIZWFkbGluZSIsIlNwaW5uZXIiLCJnZXRWYWx1ZSIsIm9wdF9ldmVudCIsImNvbnRlbnRDb250YWluZXJPdXRlckhlaWdodCIsImNvbnRhaW5lck9mZnNldFdpZHRoIiwib3V0ZXJIZWlnaHQiLCJzdG9yZVZhbHVlIiwicG9zdE9wZW5GdW5jdGlvbiIsImlzT3BlbiIsIm9wdF9oaWRlIiwib3B0X29wZW5PdGhlclNpZGVib2FyZCIsIm1ha2VCdXR0b24iLCJjbGlja0FjdGlvbiIsImdldEVsZW1lbnQiLCJuZXdFbGVtZW50Iiwib3B0X3ZpZXdTY29wZSIsInZpZXdTY29wZSIsImFkZGl0aW9uYWxUcmlnZ2VyQ2xhc3MiLCJwYXVzZWQiLCJvcHRfb3BlblNpZGVib2FyZCIsIm9wdF9wYXVzZSIsIlN0YXJib2FyZCIsImZpbHRlciIsInBsdWdpbiIsInJlbmRlckxheWVydHJlZSIsImZuUmVuZGVyIiwiZGlzcGxheUxheWVyc3dpdGNoZXIiLCJwbHVnaW5zIiwibGF5ZXJDb250cm9sbGVyIiwibGF5ZXJTd2l0Y2hlckNyZWF0ZSIsImxheWVyc3dpdGNoZXIiLCJMYXllcnN3aXRjaGVyIiwic3RhcmJvYXJkX2xvYWRQbHVnaW5zIiwiYmFzZWxheWVyU3dpdGNoZXJDcmVhdGUiLCJiYXNlbGF5ZXJzd2l0Y2hlciIsIkJhc2VsYXllcnN3aXRjaGVyIiwic3RhcmJvYXJkcGx1Z2luIiwibG9hZENvbnRlbnQiLCJjb250ZW50V3JhcHBlciIsImNvbnRlbnRJbmZvIiwiYmFzZWxheWVyU3dpdGNoZXJUaXRsZSIsImNvbnRlbnREaXYiLCJmaXJzdENoaWxkIiwiZm5EcmF3Q29udGVudCIsImJhc2VMYXllckNvbnRyb2wiLCJhZGRJdGVtcyIsImJhc2VsYXllckNvbnRyb2xsZXIiLCJpdGVtRGF0YSIsIndyYXBwZXJFbGVtZW50IiwibGlzdEl0ZW0iLCJjaGlsZExpc3QiLCJjaGlsZEl0ZW0iLCJjaGlsZEVudHJ5IiwiZW50cnkiLCIkZW50cnkiLCJoYW5kbGVFbnRyeUNsaWNrIiwiaGFuZGxlQ2hhbmdlQmFzZWxheWVyVmlzaWJpbGl0eSIsInBhcnNlQXNMaXN0IiwiYmFzZWxheWVySXRlbSIsInJpZ2h0U2xpZGVFbGVtZW50cyIsImJhc2VsYXllcl9jaGFuZ2VkIiwiYmFzZWxheWVyQ29uZmlnIiwiY3JlYXRlVGV4dE5vZGUiLCJvdmVybGF5SWQiLCJjaGFuZ2VPcGFjaXR5IiwiZGVmYXVsdF9iYXNlbGF5ZXIiLCJkdiIsInBsYWNlaG9sZGVyIiwib25rZXl1cCIsImZpbHRlcl91bGxpIiwic2hvd1N1YnRyZWUiLCJnZXRDaGlsZHJlbkJ5VGFnTmFtZSIsInRhZ05hbWUiLCJmb3VuZCIsIm1hdGNoRmxhZ1VsIiwic3VidHJlZU1hdGNoZXMiLCJpc01hdGNoIiwidWwiLCJoYXNTdWJ0cmVlIiwiY2xhc3NMaXN0IiwiYWRkIiwic2V0VGltZW91dCIsInF1ZXJ5U2VsZWN0b3IiLCJwcm9qZWN0Q29uZiIsImNvbnRlbnRMb2FkZWQiLCJjb250ZW50SGVhZGxpbmVMaW5rIiwic2VsZWN0b3IiLCJsYXllclN3aXRjaGVyVGl0bGUiLCJvbmNsaWNrIiwic3Vic3RyaW5nIiwic3R5bGVFbCIsInN0eWxlU2hlZXQiLCJoZWFkIiwic2hlZXQiLCJhZGRSdWxlIiwic3R5bGVTaGVldHMiLCJpbnNlcnRSdWxlIiwidHJlZUNvbnRyb2wiLCJwV3JhcHBlciIsImNoaWxkV3JhcHBlciIsImNoYW5nZWRMYXllciIsIiRlbnRyaWVzIiwiaG9va19tYXBfem9vbSIsImVudHJ5V3JhcHBlcnMiLCJpbnNlcnRCZWZvcmUiLCJjaGlsZFdyYXBwZXJzIiwiZm5IYW5kbGVFbnRyeUNsaWNrIiwiZm5DaGlsZEVudHJ5Q2xpY2siLCJmbkNoaWxkRW50cnlTaG93Iiwiem9vbVRvRXh0ZW50IiwibGF5ZXJDbGFzcyIsImxheWVySXRlbSIsImhhbmRsZVNlbGVjdGVkQ2hpbGRzIiwidXBkYXRlUGFyZW50TGF5ZXJzIiwicGFyZW50VWlkIiwiaGlkZUNoaWxkTGF5ZXIiLCJzaG93Q2hpbGRMYXllciIsInNpbmdsZUxheWVyIiwidmVjdG9yQXJyYXkiLCJjb29yZHMiLCJmZWF0dXJlTGlzdCIsImZlYXR1cmVBcnJheSIsImNvb3JkaW5hdGVzIiwiZ2V0VG9wUmlnaHQiLCJnZXRUb3BMZWZ0IiwiZ2V0Qm90dG9tUmlnaHQiLCJnZXRCb3R0b21MZWZ0IiwiYm91bmRpbmdFeHRlbnQiLCJJbmZpbml0eSIsImlzTmFOIiwiY2hpbGRMaXN0SXRlbSIsIiRjaGlsZEVudHJ5IiwiYWRkQ2hpbGRzIiwic3RhcmJvYXJkX2xheWVyX2FjdGl2YXRlIiwicGFyYW1PYmoiLCJpZHN0ciIsImxheWVyc3dpdGNoZXJfZm9yRWFjaEl0ZW0iLCJ0aGF0IiwiY2hlY2tDaGlsZFNlbGVjdGlvbnMiLCJjaGlsZEFjdGl2ZSIsImNsaWNrZWRMYXllciIsInBhcmVudEVudHJ5IiwicGFyZW50TGF5ZXIiLCJab29tbGV2ZWwiLCJ1cGRhdGVab29tbGV2ZWwiLCJ1bmRlZmluZWRIVE1MIiwiR2VvUGlja2VyIiwibWFwQ29udGFpbmVyIiwibGF0SWR4IiwibG9uSWR4IiwibGF0Um5kIiwibG9uUm5kIiwiJGZpZWxkR2VvWCIsImdlb3BpY2tlciIsImlucHV0X2dlb194IiwiJGZpZWxkR2VvWSIsImlucHV0X2dlb195Iiwib3B0aWNMYXllclNvdXJjZSIsIm9wdGljTGF5ZXJWZWN0b3IiLCJnZW9QaWNrZXJTdHlsZUZ1bmN0aW9uIiwib3B0aWNMYXllckZlYXR1cmUiLCJhbm9ueW1vdXMiLCJyb3VuZCIsInJhbmRvbSIsInBpY2tlckNvbG9yIiwiSW50ZXJhY3Rpb24iLCJoYW5kbGVFdmVudCIsIndoaXRlIiwicmVzdWx0IiwibWFwQnJvd3NlckV2ZW50IiwiZGlzYWJsZUNsaWNrRXZlbnQiLCJkaXNhYmxlZCIsInBpY2siLCJhcnJMYXRMb24iLCJyZWFkeSIsImluaXRNYXBzIiwiTWFwQ29udHJvbGxlciIsIm1pc2MiLCJNYXBIb3ZlciIsImxpc3RlbmVyS2V5IiwibGFzdEZlYXR1cmVTdHlsZSIsImxhc3RIb3ZlcmVkRmVhdHVyZSIsImhvdmVyVG9vbHRpcCIsIm9mZnNldCIsImdldEhvdmVyRnVuY3Rpb24iLCJPYnNlcnZhYmxlIiwidW5CeUtleSIsImlzQWN0aXZlIiwiaG92ZXJlZCIsImNsdXN0ZXJlZCIsInRvb2x0aXBDb250ZW50IiwidG9vbHRpcEhlbHBlciIsInRvb2x0aXBMZW5ndGgiLCJmb3JFYWNoRmVhdHVyZUF0UGl4ZWwiLCJwaXhlbCIsImhvdmVyX3BvcHVwcyIsImhvdmVyX3BvcHVwc19zdGF5IiwibGFzdExheWVyU3R5bGUiLCJjaGlsZE5vZGVzIiwic2xpY2UiLCJzaW5nbGVUb29sdGlwIiwicmVwbGFjZUFsbFBsYWNlaG9sZGVycyIsInRyaW0iLCJnZXRDb29yZGluYXRlRnJvbVBpeGVsIiwiY2hhbmdlRmVhdHVyZVN0eWxlcyIsInNwaW5uZXJTcGFuIiwiYWRkaXRpb25hbEFjdGl2YXRpb25Db3VudGVyIiwiYWRkQ2xhc3NOYW1lIiwib3ZlcmxheSIsIk92ZXJsYXkiLCJpbnNlcnRGaXJzdCIsInBvc2l0aW9uaW5nIiwiYWRkT3ZlcmxheSIsInJlbW92ZU92ZXJsYXkiLCJnZXRDb250ZW50IiwiaXNNb2JpbGUiLCJ0ZXN0IiwidXNlckFnZW50IiwidmVuZG9yIiwib3BlcmEiLCJmblN0YW5kYXJkSW5mb1BvcHVwIiwiYyIsImdldFByb3BlcnRpZXMiLCJkIiwiZyIsImgiLCJmbkhlYWRlciIsImZuQ29udGVudCIsImZuRm9vdGVyIiwiZm5SZWR1Y2VkSW5mb1BvcHVwIiwiYW1lbml0eSIsInRvdXJpc20iLCJoaXN0b3JpYyIsImxlaXN1cmUiLCJhZXJpYWx3YXkiLCJzcG9ydCIsInJhaWx3YXkiLCJ3YXRlcl9wYXJrIiwiZm5HZXRUcmFuc2xhdGVfVHlwZSIsInNxa20iLCJwaG9uZSIsImZheCIsImVtYWlsIiwib3BlbmluZ19ob3VycyIsIndlYnNpdGUiLCJ3aWtpcGVkaWEiLCJ3aWtpbWVkaWFfY29tbW9ucyIsImludGVybmV0X2FjY2VzcyIsImNlbnRyYWxrZXkiLCJub3RlIiwib3BlcmF0b3IiLCJsaXQiLCJzaG9wIiwiYnJhbmQiLCJzZWxscyIsIm9yaWdpbiIsIndob2xlc2FsZSIsImhlYWx0aGNhcmUiLCJlbWVyZ2VuY3kiLCJlbWVyZ2VuY3lfc2VydmljZSIsIndhdGVyd2F5IiwiaGlnaHdheSIsInJlY3ljbGluZ190eXBlIiwiZnJvemVuX3lvZ3VydCIsInNsdXNoX2ljZSIsImNha2UiLCJjb2ZmZWUiLCJkcmlua3MiLCJjdWlzaW5lIiwiem9vIiwiY2x1YiIsImJ1aWxkaW5nIiwibGFuZHVzZSIsImRpYXBlciIsImRpcGxvbWF0aWMiLCJ3YXRlcmluZ19wbGFjZSIsIndhc3RlIiwib3BlbmZpcmUiLCJmaXJlcGxhY2UiLCJ2ZW5kaW5nIiwiYWJhbmRvbmVkIiwibWlsaXRhcnkiLCJoaXN0b3JpY191c2FnZSIsImNhc3RsZV90eXBlIiwidG9tYiIsIm9mZmljZSIsInBsYWNlIiwiYmljeWNsZSIsIm9uZXdheSIsInBhcmtfcmlkZSIsImNyb3NzaW5nIiwidHJhZmZpY19jYWxtaW5nIiwicmV0Iiwidm9sdGFnZSIsInR1bm5lbCIsImJyaWRnZSIsInNvY2lhbF9mYWNpbGl0eSIsImJyZXdlcnkiLCJnYW1ibGluZyIsInBldCIsImNyYWZ0IiwibWljcm9icmV3ZXJ5IiwicmVudGFsIiwiZW50cmFuY2UiLCJuYXR1cmFsIiwiYm91bmRhcnkiLCJtb3VudGFpbl9wYXNzIiwid2F0ZXIiLCJyb3V0ZSIsIm1vb3JpbmciLCJtYW5fbWFkZSIsImhpa2luZyIsImluZm9ybWF0aW9uIiwibG9jayIsImNvbnN0cnVjdGlvbiIsImxpZ2h0X3NvdXJjZSIsImRyaW5raW5nX3dhdGVyIiwiYWJ1dHRlcnMiLCJwb3dlcl9zb3VyY2UiLCJwb3dlciIsImxpbmUiLCJiYXJyaWVyIiwiZmVuY2VfdHlwZSIsIndhbGwiLCJkZXNpZ25hdGlvbiIsImFlcm93YXkiLCJwdWJsaWNfdHJhbnNwb3J0IiwiYnVzIiwiZWxlY3RyaWZpZWQiLCJoYXJib3VyIiwiYW5pbWFsIiwiYW5pbWFsX3NoZWx0ZXIiLCJhbmltYWxfYm9hcmRpbmciLCJiaXJkc19uZXN0IiwiZm5Db250ZW50R2VuZXJhbEluZm9ybWF0aW9ucyIsImZuQ29udGVudEhlYWx0aGNhcmUiLCJmbkNvbnRlbnRBZXJvZHJvbWUiLCJmbkNvbnRlbnRDdWlzaW5lIiwiZm5Db250ZW50U2hpcHBpbmciLCJmbkNvbnRlbnRIeWRyYW50cyIsImZuQ29udGVudFNwb3J0cyIsImZuQ29udGVudFN0cmVldHNUcmFmZmljIiwiZm5Db250ZW50SW5mb3JtYXRpb25DaXR5IiwiZm5Db250ZW50RW1lcmdlbmN5IiwiZm5Db250ZW50U3RvcmFnZSIsImZuQ29udGVudEFtZW5pdHkiLCJmbkNvbnRlbnRUb3VyaXNtIiwiZm5Db250ZW50Um91dGUiLCJmbkNvbnRlbnRQZXRyb2wiLCJmbkNvbnRlbnRCYXJyaWVycyIsImZuQ29udGVudExhbmR1c2UiLCJmbkNvbnRlbnROYXR1cmFsIiwiZm5LbG9zdGVyQWRkaXRpb25hbCIsImZuU2ljaGVyaGVpdEFkZGl0aW9uYWwiLCJmbkFkZGl0aW9uYWxCdWlsZGluZ0luZm9zIiwiZm5LcmFmdHdlcmtJbmZvIiwiZm5NZXNzc3RhdGlvbiIsImZuV2VydHN0b2ZmaW5mbyIsImZuQ29udGVudFByb3RlY3RlZEFyZWEiLCJhZXJvZHJvbWUiLCJpYXRhIiwiaWNhbyIsImZvcmVzdCIsIndvb2QiLCJsZWFmX3R5cGUiLCJnZW51cyIsInNwZWNpZXMiLCJkZW5vdGF0aW9uIiwibW9udW1lbnQiLCJzdGF0dXMiLCJwcm90ZWN0X2NsYXNzIiwicHJvdGVjdF9pZCIsInJlc291cmNlIiwiYW5pbWFsX2tlZXBpbmciLCJyb3VuZHRyaXAiLCJzeW1ib2wiLCJmdWVsIiwiZm5Db250ZW50SGlzdG9yaWMiLCJzaXRlX3R5cGUiLCJtYXRlcmlhbCIsImRvZyIsInN0YXJzIiwiY2FyYXZhbnMiLCJ3YXNoaW5nX21hY2hpbmUiLCJkcnllciIsImdyb3VwX29ubHkiLCJjYW1wX3NpdGUiLCJtYXBfdHlwZSIsIm1hcF9zaXplIiwiYm9hcmRfdHlwZSIsImJvYXR0eXBlIiwiY291bnRyeSIsImNvbGxlY3Rpb25fdGltZXMiLCJkcml2ZV90aHJvdWdoIiwiY29udGVudHMiLCJwb3B1bGF0aW9uIiwibGlmZWJvYXQiLCJ2aGZfY2hhbm5lbCIsIm1tc2kiLCJtb3RvcmJvYXQiLCJDRU1UIiwiaW50ZXJtaXR0ZW50IiwidGlkYWwiLCJkcmFmdCIsIm9wZXJhdGluZyIsInZlaGljbGUiLCJmbldyZWNrSW5mbyIsImZlcnJ5IiwibW90b3JjYXIiLCJtb3Rvcl92ZWhpY2xlIiwid2F0ZXJfdm9sdW1lIiwiZmxvd19yYXRlIiwid2F0ZXJfc291cmNlIiwiYnJpZGdlX3JlZiIsInN0YXJ0X2RhdGUiLCJtYXh3ZWlnaHQiLCJ0b2xsIiwic3VyZmFjZSIsInRyYWNrdHlwZSIsIm1vdG9yY3ljbGUiLCJ0cmFpbF92aXNpYmlsaXR5Iiwic2FjX3NjYWxlIiwibWF4c3BlZWQiLCJvdmVydGFraW5nIiwibm9leGl0IiwicHJpb3JpdHlfcm9hZCIsImZlZSIsInVpY19yZWYiLCJmbkFyenRJbmZvIiwiaGVhbHRoX3NwZWNpYWx0eSIsIm1heHdpZHRoIiwibWF4aGVpZ2h0IiwibWluX2FnZSIsIm1heF9hZ2UiLCJudWRpc20iLCJydWlucyIsImVsZSIsImNhZmUiLCJicmVha2Zhc3QiLCJzbmFjayIsImluZG9vcl9zZWF0aW5nIiwib3V0ZG9vcl9zZWF0aW5nIiwic2VsZl9zZXJ2aWNlIiwiYmFrZWhvdXNlIiwicGFzdHJ5X3Nob3AiLCJmYWlyX3RyYWRlIiwibWVkaWNhbF9hcmVhIiwiZGlzcGVuc2luZyIsInN1cnZlaWxsYW5jZSIsImFjY2VzcyIsInJlbGlnaW91c19yYW5rIiwic2hyaW5lIiwic2FuY3R1YXJ5IiwicmVsaWdpb24iLCJkZW5vbWluYXRpb24iLCJjb21tdW5pdHkiLCJmblRlc3RJbmZvUG9wdXAiLCJmYWhyemVpdCIsIk1hcFByb3h5IiwiZWRpdG9yU3R5bGVzIiwiaG9va19tYXBfY2xpY2siLCJyZXF1ZXN0IiwibGF5ZXJjb250ZW50IiwiaW5mb3dpbmRvdyIsImxvYWRCYXNlTGF5ZXJzIiwibG9hZExheWVycyIsImFkZFBvcFVwIiwibWFwX2NlbnRlcl9jaGFuZ2VkIiwiY2xpY2tFdmVudCIsIm5ld0NlbnRlciIsInN0eWxlRnVuYyIsInN0eWxlQ2x1c3RlciIsInNldFNjYWxlIiwiY2x1c3Rlcl9hbGwiLCJwaXgiLCJtYXgiLCJyIiwic2luIiwiY29zIiwiY2YiLCJsaW5rX25ld3dpbmRvdyIsImZ1bmMiLCJjb21iaW5lTGF5ZXJzIiwicG9wdXBDb25maWciLCJyb3V0ZXIiLCJyb3V0ZUJ1dHRvbldyYXBwZXIiLCJyb3V0ZUZyb21CdXR0b24iLCJyb3V0ZUZyb21CdXR0b25TcGFuIiwicm91dGVUb0J1dHRvbiIsInJvdXRlVG9CdXR0b25TcGFuIiwicm91dGluZ0hhbmRsZXIiLCJjdXJyZW50VGFyZ2V0IiwicG9wVXBFbGVtZW50IiwicG9wVXBDbG9zZUVsZW1lbnQiLCJwb3BVcENvbnRlbnQiLCJhdXRvUGFuIiwibmVlZGVkTGF5ZXJTdHlsZXMiLCJnZXRMYXllclN0eWxlcyIsImNvbnRlbnREYXRhTGF5ZXIiLCJsYXllckdyb3VwcyIsInN0eWxlcyIsIm9uZUZlYXR1cmUiLCJhbGxMYXllcnMiLCJtaXNzaW5nTGF5ZXIiLCJjbHVzdGVycyIsIm9wdF96b29tIiwibWluIiwicG9wdXBGdW5jdGlvbnMiLCJwb3B1cEZ1bmN0aW9uc0RFIiwicG9wdXBGdW5jdGlvbnNFTiIsInN0cmluZyIsImNoYXJBdCIsImlucHV0Iiwib3V0cHV0IiwicGFyYW0iLCJvcHRfZ2V0S2V5Iiwib3B0X2V4ZWN1dGUiLCJzZWFyY2hQYXJhbSIsInBhcmFtUmVwbGFjZWQiLCJoYXNoIiwib3JpZ2luU3RyaW5nIiwiZ2V0VXJsUGFyYW0iLCJyZWdFeCIsIlJlZ0V4cCIsImV4ZWMiLCJhcnJJbnB1dCIsImFyck91dHB1dCIsImRlbHRhRGVjb2RlIiwiYXJySG9va0Z1bmN0aW9ucyIsImhleCIsIm9wdF9vcGFjaXR5Iiwib3B0X2FycmF5IiwiYmlnaW50IiwicmVkdWNlZFN0eWxlIiwic2V0V2lkdGgiLCJvcHRfZm9yY2VMaW5lTWVhc3VyZSIsIm9wdF9mb3JjZVN1cmZhY2VNZWFzdXJlIiwic3BoZXJlIiwiY29vcmQxIiwiY29vcmQyIiwiZ2V0RGlzdGFuY2UiLCJhYnMiLCJnZXRBcmVhIiwiZWRnZUNvb3JkaW5hdGUiLCJhcnJHZW9tZXRyaWVzIiwiZXh0ZW50U291cmNlIiwiRXh0ZW50IiwiZXh0ZW50cyIsIm9wdF9wYWRkaW5nIiwib3B0X2FuaW1hdGlvbkR1cmF0aW9uIiwib3B0X21pblpvb20iLCJvcHRfbWF4Wm9vbSIsIm9wdF9taW5SZXNvbHV0aW9uIiwiZml0T3B0aW9ucyIsIm1pblJlc29sdXRpb24iLCJzdHJJbnB1dCIsIm9wdF9sYXllciIsInN0ck91dHB1dCIsInJlcGxhY2VGdW5jdGlvblBsYWNlaG9sZGVycyIsInJlcGxhY2VFZGl0b3JWYXJzUGxhY2Vob2xkZXJzIiwicmVwbGFjZUF0dHJpYnV0ZVBsYWNlaG9sZGVycyIsImZ1bmN0aW9uTmFtZSIsImV2S2V5Iiwib2JqZWN0IiwiZm5TdHlsZSIsImdldEN1cnJlbnRTdWJkb21haW4iLCJzY2FsZWxpbmUiLCJyZW1vdmVDb250cm9sIiwiU2NhbGVMaW5lIiwiYWRkQ29udHJvbCIsIk1vdXNlUG9zaXRpb24iLCJjb29yZGluYXRlRm9ybWF0IiwidG9TdHJpbmdIRE1TIiwicGVybWFsaW5rIiwiaW50ZXJhY3Rpb25zIiwiZGlzcGxheUFsbExvY2F0aW9ucyIsImRvbU1hcERpdiIsImtpbmV0aWMiLCJjb250cm9sQ29udGFpbmVyVG9wUmlnaHQiLCJjb250cm9sQ29udGFpbmVyQm90dG9tUmlnaHQiLCJzdGFyYm9hcmRfbGFiZWwiLCJsb2dvTGluayIsImxvZ29HcmFwaGljIiwicmVtb3ZlRWxlbWVudCIsImVuYWJsZVN0YXJib2FyZCIsImFkZElkVG9EaXYiLCJtYXBEaXYiLCJjYWxjX2V4dGVudCIsIm1lYXN1cmV0b29scyIsIm1pbl9nYXAiLCJkaXYiLCJnZXRfcGFyYW1ldGVyIiwiTW9vVG9vbHMiLCJCcm93c2VyIiwiRG9jdW1lbnQiLCJkZWZhdWx0cyIsIk1hcCIsImNoZWNrU3VtIiwibG9hZFRpbGVzV2hpbGVBbmltYXRpbmciLCJ1cGRhdGVTaXplIiwiaW5pdGlhbGl6ZSIsIm1vdXNlX25hdiIsImRyYWdfcGFuIiwiS2luZXRpYyIsIkRyYWdQYW4iLCJ3aGVlbF96b29tIiwiTW91c2VXaGVlbFpvb20iLCJkb3VibGVjbGlja196b29tIiwiRG91YmxlQ2xpY2tab29tIiwiZHJhZ196b29tIiwiRHJhZ1pvb20iLCJkcmFnX3JvdGF0ZV96b29tIiwiRHJhZ1JvdGF0ZUFuZFpvb20iLCJhbHRLZXlPbmx5IiwiZHJhZ19yb3RhdGUiLCJEcmFnUm90YXRlIiwidG91Y2hfbmF2Iiwicm90YXRlIiwiUGluY2hSb3RhdGUiLCJQaW5jaFpvb20iLCJjb25zdHJhaW5SZXNvbHV0aW9uIiwia2V5Ym9hcmRfbmF2IiwicGFuIiwiS2V5Ym9hcmRQYW4iLCJLZXlib2FyZFpvb20iLCJ6b29tX3BhbmVsIiwiem9vbV9zbGlkZXIiLCJab29tIiwiem9vbUluTGFiZWwiLCJ6b29tT3V0TGFiZWwiLCJ6b29tSW5UaXBMYWJlbCIsInpvb21PdXRUaXBMYWJlbCIsInpvb21zbGlkZXIiLCJab29tU2xpZGVyIiwiem9vbV9leHRlbnQiLCJab29tVG9FeHRlbnQiLCJ6b29tX2hvbWUiLCJ6b29tX3Bvc2l0aW9uIiwiZXJyIiwiZnVsbHNjcmVlbiIsIkZ1bGxTY3JlZW4iLCJsYWJlbEFjdGl2ZSIsInJvdXRlcl9lbmFibGUiLCJpbml0T3BlbiIsImRhdGFfZmllbGQiLCJncmF0aWN1bGUiLCJSb3RhdGUiLCJHZW9TZWFyY2giLCJjb2xsYXBzZWRMYWJlbCIsInNlYXJjaFpvb20iLCJzZWFyY2h6b29tIiwiem9vbUJvdW5kcyIsInpvb21ib3VuZHMiLCJxdWlja3NlYXJjaCIsIm1hcmtSZXN1bHQiLCJtYXJrcmVzdWx0IiwiYXV0b3BpY2siLCJyZXN1bHRzIiwiZ2VvYm9va21hcmtzIiwiR2VvQm9va21hcmsiLCJuYW1lc3BhY2UiLCJvdmVydmlld21hcCIsImdlb3hGaWVsZCIsImdlb3lGaWVsZCIsImxvY0dlb3giLCJsb2NHZW95IiwibnVtZXJpemVkIiwidHJhbnNmb3JtZWQiLCJjZmdfbG9nbyIsIkF0dHJpYnV0aW9uIiwiY29sbGFwc2VMYWJlbCIsInNldENvbGxhcHNlZCIsInRoZW1lRGF0YSIsIm1haW5Db2xvciIsImZvbnRDb2xvciIsInNoYWRvd0NvbG9yIiwic2V0UHJvcGVydHkiLCJpc0FycmF5IiwibWFwQ29udHJvbGxlcl9hZGRDb250cm9scyIsIkNvbnRhaW5lciIsIm92ZXJsYXlMYXllckNvbmZpZyIsIm9zbVNvdXJjZUNvbmZpZ3MiLCJzdGFtZW5Tb3VyY2VDb25maWdzIiwib3ZlcmxheUxheWVyIiwiYXBpS2V5Iiwic2V0T3BhY2l0eSIsIm92ZXJsYXlBcnIiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU8sSUFBTUEsc0JBQWI7QUFDSSxvQ0FBWUMsS0FBWixFQUFtQjtBQUFBOztBQUNmLGFBQUtBLEtBQUwsR0FBYUEsS0FBYjtBQUNBLGFBQUtDLGFBQUwsR0FBcUJELE1BQU1FLE9BQU4sQ0FBY0QsYUFBbkM7QUFDQSxhQUFLRSxhQUFMLEdBQXFCLEVBQXJCO0FBQ0EsYUFBS0MsWUFBTCxHQUFvQixFQUFwQjtBQUNIOztBQU5MO0FBQUE7QUFBQSx5Q0FRcUI7QUFDYixnQkFBSUMsSUFBSjs7QUFFQUEsbUJBQU8sSUFBUDs7QUFFQUMsbUJBQU9DLElBQVAsQ0FBWSxLQUFLUCxLQUFMLENBQVdRLGlCQUF2QixFQUF5QztBQUNyQ0MsMEJBQVUsS0FBS1IsYUFBTCxDQUFtQlMsSUFBbkIsQ0FBd0JDLEtBQXhCLEdBQWdDLE9BQWhDLEdBQTBDO0FBRGYsYUFBekMsRUFHS0MsSUFITCxDQUdVLFVBQVVGLElBQVYsRUFBZ0I7QUFDbEIsb0JBQUlBLEtBQUtHLFNBQVQsRUFBb0I7QUFDaEJSLHlCQUFLUyxhQUFMLENBQW1CSixLQUFLRyxTQUF4QjtBQUNIO0FBQ0QsdUJBQU8sSUFBUDtBQUNILGFBUkwsRUFTS0UsSUFUTCxDQVNVLFlBQVk7QUFDZDtBQUNBO0FBQ0E7QUFDQUMsd0JBQVFDLElBQVIsQ0FBYSxpSEFBYjtBQUNBWixxQkFBS0osYUFBTCxDQUFtQmlCLE9BQW5CLENBQTJCQyxJQUEzQjtBQUNBLHVCQUFPLEtBQVA7QUFDSCxhQWhCTCxFQWlCS0MsTUFqQkwsQ0FpQlksWUFBWTtBQUNoQjtBQUNILGFBbkJMO0FBcUJILFNBbENMLENBa0NLOztBQWxDTDtBQUFBO0FBQUEsc0NBb0NrQkMsVUFwQ2xCLEVBb0M4QjtBQUN0QixnQkFBSVIsU0FBSixFQUNJUyxHQURKLEVBRUlDLENBRkosRUFHSUMsQ0FISjs7QUFLQTtBQUNBSCx1QkFBV0ksSUFBWCxDQUFnQixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDNUIsb0JBQUssQ0FBQ0QsRUFBRUQsSUFBSCxJQUFXLENBQUNFLEVBQUVGLElBQWYsSUFBeUJHLFNBQVNGLEVBQUVELElBQVgsRUFBaUIsRUFBakIsTUFBeUJHLFNBQVNELEVBQUVGLElBQVgsRUFBaUIsRUFBakIsQ0FBdEQsRUFBNkU7QUFDekUsd0JBQUksQ0FBQ0MsRUFBRUcsSUFBSCxJQUFXLENBQUNGLEVBQUVFLElBQWxCLEVBQXdCO0FBQ3BCLCtCQUFRLENBQUNGLEVBQUVFLElBQUosR0FBWSxDQUFDLENBQWIsR0FBaUIsQ0FBeEI7QUFDSDtBQUNELDJCQUFRSCxFQUFFRyxJQUFGLENBQU9DLFdBQVAsS0FBdUJILEVBQUVFLElBQUYsQ0FBT0MsV0FBUCxFQUF4QixHQUFnRCxDQUFoRCxHQUFvRCxDQUFDLENBQTVEO0FBQ0g7QUFDRCxvQkFBSSxDQUFDSixFQUFFRCxJQUFILElBQVcsQ0FBQ0UsRUFBRUYsSUFBbEIsRUFBd0I7QUFDcEIsMkJBQVEsQ0FBQ0UsRUFBRUYsSUFBSixHQUFZLENBQUMsQ0FBYixHQUFpQixDQUF4QjtBQUNIO0FBQ0QsdUJBQVFHLFNBQVNGLEVBQUVELElBQVgsRUFBaUIsRUFBakIsSUFBdUJHLFNBQVNELEVBQUVGLElBQVgsRUFBaUIsRUFBakIsQ0FBeEIsR0FBZ0QsQ0FBaEQsR0FBb0QsQ0FBQyxDQUE1RDtBQUNILGFBWEQ7O0FBYUE7QUFDQSxnQkFBSUosV0FBV1UsTUFBWCxHQUFvQixDQUF4QixFQUEyQjtBQUN2QixxQkFBS1IsSUFBSSxDQUFULEVBQVlBLElBQUlGLFdBQVdVLE1BQTNCLEVBQW1DUixLQUFLLENBQXhDLEVBQTJDOztBQUV2Q1YsZ0NBQVlRLFdBQVdFLENBQVgsQ0FBWjs7QUFFQUQsMEJBQU1ULFVBQVVtQixFQUFWLElBQWdCQyw4REFBS0EsQ0FBQ0MsV0FBTixFQUF0QjtBQUNBLHlCQUFLOUIsWUFBTCxDQUFrQitCLElBQWxCLENBQXVCYixHQUF2QjtBQUNBLHdCQUFJLENBQUMsS0FBS25CLGFBQUwsQ0FBbUJtQixHQUFuQixDQUFMLEVBQThCO0FBQzFCLDZCQUFLbkIsYUFBTCxDQUFtQm1CLEdBQW5CLElBQTBCLElBQUljLG9FQUFKLENBQWlCdkIsU0FBakIsRUFBNEIsSUFBNUIsQ0FBMUI7QUFDSDs7QUFFRDtBQUNBLHdCQUFJLEtBQUtaLGFBQUwsQ0FBbUJTLElBQW5CLENBQXdCRyxTQUF4QixJQUFxQ2UsU0FBU04sR0FBVCxFQUFjLEVBQWQsTUFBc0JNLFNBQVMsS0FBSzNCLGFBQUwsQ0FBbUJTLElBQW5CLENBQXdCRyxTQUFqQyxFQUE0QyxFQUE1QyxDQUEvRCxFQUFnSDtBQUM1Ryw2QkFBS3dCLGFBQUwsQ0FBbUJmLEdBQW5CO0FBQ0g7O0FBRUQsd0JBQUcsS0FBS25CLGFBQUwsQ0FBbUJtQixHQUFuQixFQUF3QmdCLFdBQTNCLEVBQXVDO0FBQ25DLDZCQUFLZCxJQUFJLENBQVQsRUFBWUEsSUFBRyxLQUFLckIsYUFBTCxDQUFtQm1CLEdBQW5CLEVBQXdCaUIsUUFBeEIsQ0FBaUNSLE1BQWhELEVBQXdEUCxHQUF4RCxFQUE0RDtBQUN4RCxnQ0FBRyxDQUFDLEtBQUtyQixhQUFMLENBQW1CbUIsR0FBbkIsRUFBd0JrQixpQkFBeEIsQ0FBMENDLFdBQTFDLENBQXNELEtBQUt0QyxhQUFMLENBQW1CbUIsR0FBbkIsRUFBd0JpQixRQUF4QixDQUFpQ2YsQ0FBakMsRUFBb0NRLEVBQTFGLENBQUosRUFBa0c7QUFDOUYscUNBQUs3QixhQUFMLENBQW1CbUIsR0FBbkIsRUFBd0JrQixpQkFBeEIsQ0FBMENDLFdBQTFDLENBQXNELEtBQUt0QyxhQUFMLENBQW1CbUIsR0FBbkIsRUFBd0JpQixRQUF4QixDQUFpQ2YsQ0FBakMsRUFBb0NRLEVBQTFGLElBQWdHLElBQUlVLGdFQUFKLENBQWUsS0FBS3ZDLGFBQUwsQ0FBbUJtQixHQUFuQixFQUF3QmlCLFFBQXhCLENBQWlDZixDQUFqQyxDQUFmLEVBQW9ELEtBQUt2QixhQUF6RCxDQUFoRztBQUNBLHFDQUFLRSxhQUFMLENBQW1CbUIsR0FBbkIsRUFBd0JrQixpQkFBeEIsQ0FBMENDLFdBQTFDLENBQXNELEtBQUt0QyxhQUFMLENBQW1CbUIsR0FBbkIsRUFBd0JpQixRQUF4QixDQUFpQ2YsQ0FBakMsRUFBb0NRLEVBQTFGLEVBQThGVyxLQUE5RixHQUFzRyxLQUFLeEMsYUFBTCxDQUFtQm1CLEdBQW5CLEVBQXdCa0IsaUJBQXhCLENBQTBDSSxnQkFBMUMsQ0FBMkQsS0FBS3pDLGFBQUwsQ0FBbUJtQixHQUFuQixFQUF3QmlCLFFBQXhCLENBQWlDZixDQUFqQyxFQUFvQ1EsRUFBL0YsQ0FBdEc7QUFDSDtBQUNKO0FBQ0o7QUFDSjtBQUNKOztBQUVELGdCQUFJLENBQUMsS0FBS2EsaUJBQVYsRUFBNkI7QUFDekI7QUFDQSxvQkFBSXhCLFdBQVdVLE1BQVgsR0FBb0IsQ0FBcEIsSUFBeUJWLFdBQVcsQ0FBWCxFQUFjVyxFQUEzQyxFQUErQztBQUMzQztBQUNBViwwQkFBTUQsV0FBVyxDQUFYLEVBQWNXLEVBQXBCO0FBQ0gsaUJBSEQsTUFHTztBQUNIO0FBQ0FWLDBCQUFNLENBQU47QUFDQSx5QkFBS2xCLFlBQUwsQ0FBa0IrQixJQUFsQixDQUF1QmIsR0FBdkI7QUFDQSx3QkFBSSxDQUFDLEtBQUtuQixhQUFMLENBQW1CbUIsR0FBbkIsQ0FBTCxFQUE4QjtBQUMxQiw2QkFBS25CLGFBQUwsQ0FBbUJtQixHQUFuQixJQUEwQjtBQUN0QlUsZ0NBQUksQ0FEa0I7QUFFdEJILGtDQUFNLGFBRmdCO0FBR3RCaUIsc0NBQVUsS0FIWTtBQUl0QkMsbUNBQU87QUFKZSx5QkFBMUI7QUFNSDtBQUNKO0FBQ0QscUJBQUtWLGFBQUwsQ0FBbUJmLEdBQW5CO0FBRUg7QUFDRCxpQkFBS3RCLEtBQUwsQ0FBV2dELGlCQUFYLEdBQStCLElBQS9COztBQUVBZiwwRUFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCLEtBQUtqRCxLQUFMLENBQVdrRCxxQkFBbkMsRUFBMEQsS0FBSzlDLFlBQS9EO0FBQ0gsU0E1R0wsQ0E0R007O0FBNUdOO0FBQUE7QUFBQSx3Q0E2R29CK0MsWUE3R3BCLEVBNkdrQ0MsZUE3R2xDLEVBNkdtREMsYUE3R25ELEVBNkdpRTtBQUN6RCxnQkFBSUMsWUFBSjtBQUNBSCwyQkFBZUEsZ0JBQWdCLEVBQS9CO0FBQ0Esb0JBQVFDLGdCQUFnQk4sUUFBeEI7QUFDSSxxQkFBSyxRQUFMO0FBQ0U7QUFDQSx3QkFBSVMsUUFBUSxJQUFaO0FBQ0Esd0JBQUlILGdCQUFnQkksR0FBcEIsRUFBeUI7QUFDdkJMLHFDQUFhSyxHQUFiLEdBQW1CSixnQkFBZ0JJLEdBQW5DO0FBQ0FELGdDQUFRLEtBQVI7QUFDRCxxQkFIRCxNQUdPLElBQUlILGdCQUFnQkssSUFBcEIsRUFBMEI7QUFDL0JOLHFDQUFhTSxJQUFiLEdBQW9CTCxnQkFBZ0JLLElBQXBDO0FBQ0FGLGdDQUFRLEtBQVI7QUFDRDtBQUNELHdCQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNWRCx1Q0FBZSxJQUFJSSxHQUFHZixLQUFILENBQVNnQixJQUFiLENBQWtCO0FBQy9CQyxvQ0FBUSxJQUFJRixHQUFHRSxNQUFILENBQVVDLEdBQWQsQ0FBa0JWLFlBQWxCLENBRHVCO0FBRS9CVyxvQ0FBUVYsZ0JBQWdCVztBQUZPLHlCQUFsQixDQUFmO0FBSUQscUJBTEQsTUFLTztBQUNML0MsZ0NBQVFDLElBQVIsQ0FBYSw0Q0FBYjtBQUNEO0FBQ0gscUJBQUssS0FBTDtBQUNJLHdCQUFJb0MsY0FBY1csR0FBZCxDQUFrQlosZ0JBQWdCTCxLQUFsQyxDQUFKLEVBQThDO0FBQzFDTyx1Q0FBZSxJQUFJSSxHQUFHZixLQUFILENBQVNnQixJQUFiLENBQWtCO0FBQzdCQyxvQ0FBUSxJQUFJRixHQUFHRSxNQUFILENBQVVLLEdBQWQsQ0FDSkMsRUFBRUgsTUFBRixDQUNJVixjQUFjVyxHQUFkLENBQWtCWixnQkFBZ0JMLEtBQWxDLENBREosRUFFSUksWUFGSixDQURJO0FBRHFCLHlCQUFsQixDQUFmO0FBUUgscUJBVEQsTUFTTyxJQUFJRSxjQUFjYyxNQUFkLENBQXFCZixnQkFBZ0JMLEtBQXJDLENBQUosRUFBaUQ7QUFDcEQ7QUFDQU8sdUNBQWUsSUFBSUksR0FBR2YsS0FBSCxDQUFTZ0IsSUFBYixDQUFrQjtBQUM3QkMsb0NBQVEsSUFBSUYsR0FBR0UsTUFBSCxDQUFVUSxNQUFkLENBQ0pGLEVBQUVILE1BQUYsQ0FDSVYsY0FBY2MsTUFBZCxDQUFxQmYsZ0JBQWdCTCxLQUFyQyxDQURKLEVBRUlJLFlBRkosQ0FESTtBQURxQix5QkFBbEIsQ0FBZjtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSCxxQkFmTSxNQWVBLElBQUlDLGdCQUFnQkwsS0FBaEIsS0FBMEIsWUFBOUIsRUFBNEM7QUFDL0M7QUFDQSw0QkFBSVEsU0FBUSxJQUFaO0FBQ0EsNEJBQUlILGdCQUFnQkksR0FBcEIsRUFBeUI7QUFDckJMLHlDQUFhSyxHQUFiLEdBQW1CSixnQkFBZ0JJLEdBQW5DO0FBQ0FELHFDQUFRLEtBQVI7QUFDSCx5QkFIRCxNQUdPLElBQUlILGdCQUFnQkssSUFBcEIsRUFBMEI7QUFDN0JOLHlDQUFhTSxJQUFiLEdBQW9CTCxnQkFBZ0JLLElBQXBDO0FBQ0FGLHFDQUFRLEtBQVI7QUFDSDtBQUNELDRCQUFJLENBQUNBLE1BQUwsRUFBWTtBQUNSRCwyQ0FBZSxJQUFJSSxHQUFHZixLQUFILENBQVNnQixJQUFiLENBQWtCO0FBQzdCQyx3Q0FBUSxJQUFJRixHQUFHRSxNQUFILENBQVVDLEdBQWQsQ0FBa0JWLFlBQWxCO0FBRHFCLDZCQUFsQixDQUFmO0FBR0gseUJBSkQsTUFJTztBQUNIbkMsb0NBQVFDLElBQVIsQ0FBYSw0Q0FBYjtBQUNIO0FBQ0oscUJBakJNLE1BaUJBO0FBQ0hELGdDQUFRQyxJQUFSLENBQWEsNENBQWI7QUFDSDtBQUNEO0FBQ0oscUJBQUssUUFBTDtBQUNJLHdCQUFJbUMsZ0JBQWdCaUIsT0FBaEIsSUFBMkJqQixnQkFBZ0JrQixNQUEzQyxJQUFxRGxCLGdCQUFnQm1CLFdBQXpFLEVBQXNGOztBQUVsRiw0QkFBSW5CLGdCQUFnQm1CLFdBQWhCLEtBQWdDLFFBQXBDLEVBQThDO0FBQzFDcEIseUNBQWFLLEdBQWIsR0FBbUJKLGdCQUFnQkksR0FBaEIsR0FBc0JKLGdCQUFnQmtCLE1BQXRDLEdBQStDLGtDQUEvQyxHQUFvRmxCLGdCQUFnQmlCLE9BQXZIO0FBQ0FmLDJDQUFlLElBQUlJLEdBQUdmLEtBQUgsQ0FBU2dCLElBQWIsQ0FBa0I7QUFDN0JDLHdDQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVUMsR0FBZCxDQUNKdkQsT0FBT3lELE1BQVAsQ0FBY1YsY0FBY21CLE1BQWQsQ0FBcUJwQixnQkFBZ0JtQixXQUFyQyxDQUFkLEVBQWlFcEIsWUFBakUsQ0FESTtBQURxQiw2QkFBbEIsQ0FBZjtBQUtILHlCQVBELE1BT087QUFDSEEseUNBQWFLLEdBQWIsR0FBbUJKLGdCQUFnQnFCLFdBQWhCLEdBQThCckIsZ0JBQWdCa0IsTUFBOUMsR0FBdUQsZ0NBQXZELEdBQTBGbEIsZ0JBQWdCaUIsT0FBN0g7O0FBRUFmLDJDQUFlLElBQUlJLEdBQUdmLEtBQUgsQ0FBU2dCLElBQWIsQ0FBa0I7QUFDN0JDLHdDQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVUMsR0FBZCxDQUFrQnZELE9BQU95RCxNQUFQLENBQ3RCVixjQUFjbUIsTUFBZCxDQUFxQnBCLGdCQUFnQm1CLFdBQXJDLENBRHNCLEVBRXRCcEIsWUFGc0IsQ0FBbEI7QUFEcUIsNkJBQWxCLENBQWY7QUFNSDtBQUNKLHFCQW5CRCxNQW1CTSxJQUFHQyxnQkFBZ0JzQixVQUFuQixFQUE4QjtBQUNoQ3ZCLHFDQUFhSyxHQUFiLEdBQW1CLGtDQUFrQ0osZ0JBQWdCcEIsRUFBbEQsR0FBdUQsY0FBMUU7QUFDQXNCLHVDQUFlLElBQUlJLEdBQUdmLEtBQUgsQ0FBU2dCLElBQWIsQ0FBa0I7QUFDN0JDLG9DQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVUMsR0FBZCxDQUFrQkssRUFBRUgsTUFBRixDQUN0QlYsY0FBY21CLE1BQWQsQ0FBcUJwQixnQkFBZ0JtQixXQUFyQyxDQURzQixFQUV0QnBCLFlBRnNCLENBQWxCO0FBRHFCLHlCQUFsQixDQUFmO0FBS0gscUJBUEssTUFRRDtBQUNEbkMsZ0NBQVFDLElBQVIsQ0FBYSw2QkFBYjtBQUNIO0FBQ0Q7QUFDSixxQkFBSyxRQUFMO0FBQ0ksd0JBQUltQyxnQkFBZ0JpQixPQUFoQixJQUEyQmpCLGdCQUFnQnVCLFdBQS9DLEVBQTREOztBQUV4RCw0QkFBSXZCLGdCQUFnQnVCLFdBQWhCLEtBQWdDLGNBQXBDLEVBQW9EO0FBQ2hEeEIseUNBQWFLLEdBQWIsR0FBbUJKLGdCQUFnQkksR0FBaEIsR0FBc0IsaUJBQXpDO0FBQ0FGLDJDQUFlLElBQUlJLEdBQUdmLEtBQUgsQ0FBU2lDLFVBQWIsQ0FBd0I7QUFDbkNoQix3Q0FBUSxJQUFJRixHQUFHRSxNQUFILENBQVVnQixVQUFkLENBQXlCdEUsT0FBT3lELE1BQVAsQ0FDN0JWLGNBQWN3QixNQUFkLENBQXFCekIsZ0JBQWdCdUIsV0FBckMsQ0FENkIsRUFFN0J4QixZQUY2QixDQUF6QjtBQUQyQiw2QkFBeEIsQ0FBZjs7QUFNQTtBQUNBMkIsa0NBQU0xQixnQkFBZ0JJLEdBQWhCLEdBQXNCLFVBQXRCLEdBQWlDSixnQkFBZ0JMLEtBQWpELEdBQXVELGFBQTdELEVBQTRFZ0MsSUFBNUUsQ0FBaUYsVUFBU0MsUUFBVCxFQUFtQjtBQUNoR0EseUNBQVNDLElBQVQsR0FBZ0JGLElBQWhCLENBQXFCLFVBQVNHLE9BQVQsRUFBa0I7QUFDbkNDLHlDQUFLQyxVQUFMLENBQWdCOUIsWUFBaEIsRUFBOEI0QixPQUE5QixFQUF1QyxjQUF2QztBQUNILGlDQUZEO0FBR0gsNkJBSkQ7QUFLSCx5QkFkRCxNQWNPO0FBQ0gvQix5Q0FBYUssR0FBYixHQUFtQkosZ0JBQWdCSSxHQUFoQixHQUFzQiwrQkFBdEIsR0FBc0RKLGdCQUFnQmlCLE9BQXpGO0FBQ0FmLDJDQUFlLElBQUlJLEdBQUdmLEtBQUgsQ0FBU2lDLFVBQWIsQ0FBd0I7QUFDbkNoQix3Q0FBUSxJQUFJRixHQUFHRSxNQUFILENBQVVnQixVQUFkLENBQXlCdEUsT0FBT3lELE1BQVAsQ0FDN0JWLGNBQWN3QixNQUFkLENBQXFCekIsZ0JBQWdCdUIsV0FBckMsQ0FENkIsRUFFN0J4QixZQUY2QixDQUF6QjtBQUQyQiw2QkFBeEIsQ0FBZjs7QUFNQTJCLGtDQUFNMUIsZ0JBQWdCSSxHQUFoQixHQUFzQixVQUF0QixHQUFpQ0osZ0JBQWdCTCxLQUFqRCxHQUF1RCxrQkFBdkQsR0FBMEVLLGdCQUFnQmlCLE9BQWhHLEVBQXlHVSxJQUF6RyxDQUE4RyxVQUFTQyxRQUFULEVBQW1CO0FBQzdIQSx5Q0FBU0MsSUFBVCxHQUFnQkYsSUFBaEIsQ0FBcUIsVUFBU0csT0FBVCxFQUFrQjtBQUNuQ0MseUNBQUtDLFVBQUwsQ0FBZ0I5QixZQUFoQixFQUE4QjRCLE9BQTlCLEVBQXVDLGNBQXZDO0FBQ0gsaUNBRkQ7QUFHSCw2QkFKRDtBQUtIO0FBQ0oscUJBOUJELE1BOEJPO0FBQ0hsRSxnQ0FBUUMsSUFBUixDQUFhLDZCQUFiO0FBQ0g7QUFDRDtBQUNKLHFCQUFLLE1BQUw7QUFDSSx3QkFBSW1DLGdCQUFnQmlCLE9BQWhCLElBQTJCakIsZ0JBQWdCa0IsTUFBM0MsSUFBcURsQixnQkFBZ0JpQyxTQUF6RSxFQUFvRjs7QUFFaEYsNEJBQUlqQyxnQkFBZ0JMLEtBQWhCLElBQXlCLFFBQTdCLEVBQXVDO0FBQ25DSSx5Q0FBYUssR0FBYixHQUFtQix1R0FDZixVQURlLEdBQ0pKLGdCQUFnQmtCLE1BRFosR0FDbUIsWUFEbkIsR0FDZ0NsQixnQkFBZ0JpQixPQURuRTtBQUVILHlCQUhELE1BSUEsSUFBSWpCLGdCQUFnQkwsS0FBaEIsSUFBeUIsU0FBN0IsRUFBd0M7QUFDcENJLHlDQUFhSyxHQUFiLEdBQW1CLCtHQUNmLFVBRGUsR0FDSkosZ0JBQWdCa0IsTUFEWixHQUNtQixZQURuQixHQUNnQ2xCLGdCQUFnQmlCLE9BRG5FO0FBRUgseUJBSEQsTUFJQSxJQUFJakIsZ0JBQWdCTCxLQUFoQixJQUF5QixZQUE3QixFQUEyQztBQUN2Q0kseUNBQWFLLEdBQWIsR0FBbUIsMkdBQ2YsVUFEZSxHQUNKSixnQkFBZ0JrQixNQURaLEdBQ21CLFlBRG5CLEdBQ2dDbEIsZ0JBQWdCaUIsT0FEbkU7QUFFSCx5QkFIRCxNQUlBLElBQUlqQixnQkFBZ0JMLEtBQWhCLElBQXlCLFNBQTdCLEVBQXdDO0FBQ3BDSSx5Q0FBYUssR0FBYixHQUFtQiwwR0FDZixVQURlLEdBQ0pKLGdCQUFnQmtCLE1BRFosR0FDbUIsWUFEbkIsR0FDZ0NsQixnQkFBZ0JpQixPQURuRTtBQUVILHlCQUhELE1BSUEsSUFBSWpCLGdCQUFnQkwsS0FBaEIsSUFBeUIsV0FBN0IsRUFBMEM7QUFDdENJLHlDQUFhSyxHQUFiLEdBQW1CLDRHQUNmLFVBRGUsR0FDSkosZ0JBQWdCa0IsTUFEWixHQUNtQixZQURuQixHQUNnQ2xCLGdCQUFnQmlCLE9BRG5FO0FBRUgseUJBSEQsTUFJQSxJQUFJakIsZ0JBQWdCTCxLQUFoQixJQUF5QixRQUE3QixFQUF1QztBQUNuQ0kseUNBQWFLLEdBQWIsR0FBbUIseUdBQ2YsVUFEZSxHQUNKSixnQkFBZ0JrQixNQURaLEdBQ21CLFlBRG5CLEdBQ2dDbEIsZ0JBQWdCaUIsT0FEbkU7QUFFSDs7QUFFRGYsdUNBQWUsSUFBSUksR0FBR2YsS0FBSCxDQUFTZ0IsSUFBYixDQUFrQjtBQUM3QkMsb0NBQVEsSUFBSUYsR0FBR0UsTUFBSCxDQUFVQyxHQUFkLENBQWtCSyxFQUFFSCxNQUFGLENBQ3RCVixjQUFjaUMsSUFBZCxDQUFtQmxDLGdCQUFnQmlDLFNBQW5DLENBRHNCLEVBRXRCbEMsWUFGc0IsQ0FBbEI7QUFEcUIseUJBQWxCLENBQWY7QUFLSCxxQkFoQ0QsTUFpQ0ssSUFBR0MsZ0JBQWdCc0IsVUFBbkIsRUFBOEI7QUFDL0J2QixxQ0FBYUssR0FBYixHQUFtQkwsYUFBYUssR0FBYixHQUFtQixrQ0FBa0NKLGdCQUFnQnBCLEVBQWxELEdBQXVELGNBQTdGO0FBQ0FzQix1Q0FBZSxJQUFJSSxHQUFHZixLQUFILENBQVNnQixJQUFiLENBQWtCO0FBQzdCQyxvQ0FBUSxJQUFJRixHQUFHRSxNQUFILENBQVVDLEdBQWQsQ0FBa0JLLEVBQUVILE1BQUYsQ0FDdEJWLGNBQWNtQixNQUFkLENBQXFCcEIsZ0JBQWdCaUMsU0FBckMsQ0FEc0IsRUFFdEJsQyxZQUZzQixDQUFsQjtBQURxQix5QkFBbEIsQ0FBZjtBQUtILHFCQVBJLE1BUUE7QUFDRG5DLGdDQUFRQyxJQUFSLENBQWEsMkJBQWI7QUFDSDtBQUNEO0FBQ0oscUJBQUssU0FBTDtBQUNJLHdCQUFJbUMsZ0JBQWdCaUIsT0FBaEIsSUFBMkJqQixnQkFBZ0JtQyxrQkFBL0MsRUFBbUU7O0FBRS9ELDRCQUFJbkMsZ0JBQWdCTCxLQUFwQixFQUEyQjtBQUN2QkkseUNBQWFLLEdBQWIsR0FBbUIsb0NBQWtDSixnQkFBZ0JMLEtBQWxELEdBQXdELDBCQUF4RCxHQUFtRkssZ0JBQWdCaUIsT0FBdEg7QUFDSDs7QUFFRGYsdUNBQWUsSUFBSUksR0FBR2YsS0FBSCxDQUFTZ0IsSUFBYixDQUFrQjtBQUM3QkMsb0NBQVEsSUFBSUYsR0FBR0UsTUFBSCxDQUFVQyxHQUFkLENBQWtCdkQsT0FBT3lELE1BQVAsQ0FDdEJWLGNBQWNtQyxhQUFkLENBQTRCcEMsZ0JBQWdCbUMsa0JBQTVDLENBRHNCLEVBRXRCcEMsWUFGc0IsQ0FBbEI7QUFEcUIseUJBQWxCLENBQWY7QUFLSCxxQkFYRCxNQVdNLElBQUdDLGdCQUFnQnNCLFVBQW5CLEVBQThCO0FBQ2hDdkIscUNBQWFLLEdBQWIsR0FBbUIsa0NBQWtDSixnQkFBZ0JwQixFQUFsRCxHQUF1RCxjQUExRTtBQUNBc0IsdUNBQWUsSUFBSUksR0FBR2YsS0FBSCxDQUFTZ0IsSUFBYixDQUFrQjtBQUM3QkMsb0NBQVEsSUFBSUYsR0FBR0UsTUFBSCxDQUFVQyxHQUFkLENBQWtCdkQsT0FBT3lELE1BQVAsQ0FDdEJWLGNBQWNtQixNQUFkLENBQXFCcEIsZ0JBQWdCbUMsa0JBQXJDLENBRHNCLEVBRXRCcEMsWUFGc0IsQ0FBbEI7QUFEcUIseUJBQWxCLENBQWY7QUFLSCxxQkFQSyxNQVFEO0FBQ0RuQyxnQ0FBUUMsSUFBUixDQUFhLG9DQUFiO0FBQ0g7QUFDRDtBQUNKLHFCQUFLLFFBQUw7QUFDSTtBQUNBRCw0QkFBUUMsSUFBUixDQUFhLHVDQUFiO0FBQ0E7QUFDSixxQkFBSyxNQUFMO0FBQ0ksd0JBQUltQyxnQkFBZ0JpQixPQUFoQixJQUEyQmpCLGdCQUFnQkwsS0FBL0MsRUFBc0Q7QUFDbERPLHVDQUFlLElBQUlJLEdBQUdmLEtBQUgsQ0FBU2dCLElBQWIsQ0FBa0I7QUFDN0JDLG9DQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVTZCLFFBQWQsQ0FBdUI7QUFDM0JDLHlDQUFTQyxVQUFVQyxTQUFWLEdBQXNCRCxVQUFVQyxTQUFWLENBQW9CLENBQXBCLENBQXRCLEdBQWdERCxVQUFVRSxRQUFWLElBQXNCRixVQUFVRyxZQUQ5RDtBQUUzQkMscUNBQUszQyxnQkFBZ0JpQixPQUZNO0FBRzNCMkIsNENBQVk1QyxnQkFBZ0JMO0FBSEQsNkJBQXZCO0FBRHFCLHlCQUFsQixDQUFmO0FBT0gscUJBUkQsTUFRTztBQUNIL0IsZ0NBQVFDLElBQVIsQ0FBYSx3Q0FBYjtBQUNIO0FBQ0Q7QUFDSixxQkFBSyxLQUFMO0FBQ0ksd0JBQUdtQyxnQkFBZ0JJLEdBQWhCLENBQW9CeUMsT0FBcEIsQ0FBNEIsT0FBNUIsTUFBeUMsQ0FBQyxDQUE3QyxFQUErQztBQUM3QzNDLHVDQUFlLElBQUlJLEdBQUdmLEtBQUgsQ0FBU2dCLElBQWIsQ0FBa0I7QUFDL0JDLG9DQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVXNDLE9BQWQsQ0FBc0I7QUFDNUIxQyxxQ0FBS0osZ0JBQWdCSSxHQURPO0FBRTVCMkMsd0NBQVE7QUFDTkMsNENBQVFoRCxnQkFBZ0IrQyxNQUFoQixDQUF1QkUsTUFEekI7QUFFTkMsNkNBQVNsRCxnQkFBZ0IrQyxNQUFoQixDQUF1QkksT0FGMUI7QUFHTjtBQUNBQyxpREFBYXBELGdCQUFnQitDLE1BQWhCLENBQXVCTTtBQUo5QixpQ0FGb0I7QUFRNUJDLHdDQUFRdEQsZ0JBQWdCc0QsTUFSSTtBQVM1QkMsOENBQWN2RCxnQkFBZ0J3RCxXQUFoQixHQUE4QixHQUE5QixHQUFvQ2xELEdBQUdFLE1BQUgsQ0FBVUssR0FBVixDQUFjNEMsV0FUcEM7QUFVNUJDLDZDQUFhO0FBVmUsNkJBQXRCO0FBWVI7QUFiK0IseUJBQWxCLENBQWY7QUFlRCxxQkFoQkQsTUFpQkk7QUFDRnhELHVDQUFlLElBQUlJLEdBQUdmLEtBQUgsQ0FBU2dCLElBQWIsQ0FBa0I7QUFDL0JDLG9DQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVXNDLE9BQWQsQ0FBc0I7QUFDNUIxQyxxQ0FBS0osZ0JBQWdCSSxHQURPO0FBRTVCMkMsd0NBQVE7QUFDTkMsNENBQVFoRCxnQkFBZ0IrQyxNQUFoQixDQUF1QkUsTUFEekI7QUFFTkMsNkNBQVNsRCxnQkFBZ0IrQyxNQUFoQixDQUF1QkksT0FGMUI7QUFHTjtBQUNBQyxpREFBYXBELGdCQUFnQitDLE1BQWhCLENBQXVCTTtBQUo5QixpQ0FGb0I7QUFRNUJDLHdDQUFRdEQsZ0JBQWdCc0QsTUFSSTtBQVM1QkMsOENBQWN2RCxnQkFBZ0J3RCxXQUFoQixHQUE4QixHQUE5QixHQUFvQ2xELEdBQUdFLE1BQUgsQ0FBVUssR0FBVixDQUFjNEM7QUFUcEMsNkJBQXRCO0FBV1I7QUFaK0IseUJBQWxCLENBQWY7QUFjRDs7QUFFRDtBQUNKLHFCQUFLLEtBQUw7QUFDSXZELG1DQUFlLElBQUlJLEdBQUdmLEtBQUgsQ0FBU2dCLElBQWIsQ0FBa0I7QUFDN0JDLGdDQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVUMsR0FBZCxDQUFrQjtBQUN0QkwsaUNBQUtKLGdCQUFnQkksR0FBaEIsR0FBc0JKLGdCQUFnQmtCLE1BQXRDLEdBQStDLG9CQUEvQyxHQUFzRWxCLGdCQUFnQmlCLE9BRHJFO0FBRXRCc0MsMENBQWN2RCxnQkFBZ0J3RCxXQUFoQixHQUE4QixHQUE5QixHQUFvQ2xELEdBQUdFLE1BQUgsQ0FBVUssR0FBVixDQUFjNEM7QUFGMUMseUJBQWxCO0FBSVI7QUFMNkIscUJBQWxCLENBQWY7QUFPQTtBQUNKLHFCQUFLLE9BQUw7QUFDSSx3QkFBSUUsaUJBQWlCLEVBQXJCO0FBQ0EseUJBQUksSUFBSUMsS0FBUixJQUFpQjVELGdCQUFnQixZQUFoQixDQUFqQixFQUErQztBQUM3Qyw0QkFBR0EsZ0JBQWdCLFlBQWhCLEVBQThCNkQsY0FBOUIsQ0FBNkNELEtBQTdDLENBQUgsRUFBd0Q7O0FBRXRELGdDQUFJRSxVQUFVLEtBQUtDLGVBQUwsQ0FBcUIsSUFBckIsRUFBMkIvRCxnQkFBZ0IsWUFBaEIsRUFBOEI0RCxLQUE5QixDQUEzQixFQUFpRTNELGFBQWpFLENBQWQ7QUFDQSxnQ0FBSStELFVBQVUsS0FBS3BILEtBQUwsQ0FBV0UsT0FBWCxDQUFtQkQsYUFBbkIsQ0FBaUNvSCxHQUFqQyxDQUFxQ0MsT0FBckMsR0FBK0NDLG9CQUEvQyxDQUFvRW5FLGdCQUFnQixZQUFoQixFQUE4QjRELEtBQTlCLEVBQXFDLFNBQXJDLENBQXBFLENBQWQ7QUFDQSxnQ0FBSVEsVUFBVSxLQUFLeEgsS0FBTCxDQUFXRSxPQUFYLENBQW1CRCxhQUFuQixDQUFpQ29ILEdBQWpDLENBQXFDQyxPQUFyQyxHQUErQ0Msb0JBQS9DLENBQW9FbkUsZ0JBQWdCLFlBQWhCLEVBQThCNEQsS0FBOUIsRUFBcUMsU0FBckMsQ0FBcEUsQ0FBZDtBQUNBRSxvQ0FBUU8sZ0JBQVIsQ0FBeUJELE9BQXpCO0FBQ0FOLG9DQUFRUSxnQkFBUixDQUF5Qk4sT0FBekI7QUFDQUwsMkNBQWU1RSxJQUFmLENBQW9CK0UsT0FBcEI7QUFDRDtBQUNGO0FBQ0Q1RCxtQ0FBZSxJQUFJSSxHQUFHZixLQUFILENBQVNnRixLQUFiLENBQW1CO0FBQzlCdEIsZ0NBQVFVO0FBRHNCLHFCQUFuQixDQUFmO0FBR0E7O0FBRUo7QUFDSS9GLDRCQUFRQyxJQUFSLENBQWEsc0JBQWI7QUFDQTtBQTVSUjtBQThSQSxtQkFBT3FDLFlBQVA7QUFFSDtBQWhaTDtBQUFBO0FBQUEsc0NBaVprQnNFLFlBalpsQixFQWlaZ0M7O0FBRXhCLGdCQUFJdkgsT0FBTyxJQUFYO0FBQUEsZ0JBQ0lnRyxlQURKO0FBQUEsZ0JBRUl4RixrQkFGSjtBQUFBLGdCQUdJZ0gscUJBSEo7QUFBQSxnQkFJSUMsbUJBSko7QUFBQSxnQkFLSXpFLGdCQUFnQixFQUxwQjtBQUFBLGdCQU1JQyxxQkFOSjtBQUFBLGdCQU9JSCxxQkFQSjtBQUFBLGdCQVFJNUIsVUFSSjtBQUFBLGdCQVNJd0csYUFUSjs7QUFXQSxnQkFBSTNFLGtCQUFrQixLQUFLakQsYUFBTCxDQUFtQnlILFlBQW5CLENBQXRCOztBQUdBLGdCQUFLLE9BQU94RSxlQUFQLEtBQTJCLFdBQTVCLElBQTRDLENBQUNBLGdCQUFnQlQsS0FBakUsRUFBd0U7QUFDcEU7QUFDQVUsOEJBQWNXLEdBQWQsR0FBb0JnRSxnRUFBTUEsQ0FBQ2hFLEdBQTNCO0FBQ0FYLDhCQUFjYyxNQUFkLEdBQXVCNkQsZ0VBQU1BLENBQUM3RCxNQUE5QjtBQUNBO0FBQ0FkLDhCQUFjbUIsTUFBZCxHQUF1QndELGdFQUFNQSxDQUFDeEQsTUFBOUI7QUFDQW5CLDhCQUFjd0IsTUFBZCxHQUF1Qm1ELGdFQUFNQSxDQUFDbkQsTUFBOUI7QUFDQXhCLDhCQUFjaUMsSUFBZCxHQUFxQjBDLGdFQUFNQSxDQUFDMUMsSUFBNUI7QUFDQWpDLDhCQUFjbUMsYUFBZCxHQUE4QndDLGdFQUFNQSxDQUFDeEMsYUFBckM7O0FBRUE7QUFDQTtBQUNBOztBQUVBckMsK0JBQWUsRUFBZjs7QUFFQSxvQkFBSUMsZ0JBQWdCd0QsV0FBcEIsRUFBaUM7QUFDN0Isd0JBQUl6RCxhQUFhd0QsWUFBakIsRUFBK0I7QUFDM0J4RCxxQ0FBYXdELFlBQWIsR0FBNEJ4RCxhQUFhd0QsWUFBYixHQUE0QixHQUE1QixHQUFrQ3ZELGdCQUFnQndELFdBQTlFO0FBQ0gscUJBRkQsTUFFTztBQUNIekQscUNBQWF3RCxZQUFiLEdBQTRCakQsR0FBR0UsTUFBSCxDQUFVSyxHQUFWLENBQWM0QyxXQUFkLEdBQTRCLEdBQTVCLEdBQWtDekQsZ0JBQWdCd0QsV0FBOUU7QUFDSDtBQUNKLGlCQU5ELE1BTU8sSUFBSSxDQUFDekQsYUFBYXdELFlBQWxCLEVBQWdDO0FBQ25DLDRCQUFRdkQsZ0JBQWdCTixRQUF4QjtBQUNJLDZCQUFLLEtBQUw7QUFDSSxnQ0FBSU8sY0FBY2MsTUFBZCxDQUFxQmYsZ0JBQWdCTCxLQUFyQyxDQUFKLEVBQWlEO0FBQzdDSSw2Q0FBYXdELFlBQWIsR0FBNEJ0RCxjQUFjYyxNQUFkLENBQXFCZixnQkFBZ0JMLEtBQXJDLEVBQTRDNEQsWUFBeEU7QUFDQTs7OztBQUlILDZCQU5ELE1BTU8sSUFBSXRELGNBQWNXLEdBQWQsQ0FBa0JaLGdCQUFnQkwsS0FBbEMsQ0FBSixFQUE4QztBQUNqREksNkNBQWF3RCxZQUFiLEdBQTRCdEQsY0FBY1csR0FBZCxDQUFrQlosZ0JBQWdCTCxLQUFsQyxFQUF5QzRELFlBQXJFO0FBQ0gsNkJBRk0sTUFFQTtBQUNIeEQsNkNBQWF3RCxZQUFiLEdBQTRCakQsR0FBR0UsTUFBSCxDQUFVSyxHQUFWLENBQWM0QyxXQUExQztBQUNIO0FBQ0Q7QUFDSiw2QkFBSyxRQUFMO0FBQ0kxRCx5Q0FBYXdELFlBQWIsR0FBNEJ0RCxjQUFjbUIsTUFBZCxDQUFxQnBCLGdCQUFnQm1CLFdBQXJDLEVBQWtEb0MsWUFBOUU7QUFDQTtBQUNKLDZCQUFLLFFBQUw7QUFDSXhELHlDQUFhd0QsWUFBYixHQUE0QnRELGNBQWN3QixNQUFkLENBQXFCekIsZ0JBQWdCdUIsV0FBckMsRUFBa0RnQyxZQUE5RTtBQUNBO0FBQ0osNkJBQUssTUFBTDtBQUNJeEQseUNBQWF3RCxZQUFiLEdBQTRCdEQsY0FBY2lDLElBQWQsQ0FBbUJsQyxnQkFBZ0JpQyxTQUFuQyxFQUE4Q3NCLFlBQTFFO0FBQ0E7QUFDSiw2QkFBSyxTQUFMO0FBQ0l4RCx5Q0FBYXdELFlBQWIsR0FBNEJ0RCxjQUFjbUMsYUFBZCxDQUE0QnBDLGdCQUFnQm1DLGtCQUE1QyxFQUFnRW9CLFlBQTVGO0FBQ0E7QUFDSjtBQUNJeEQseUNBQWF3RCxZQUFiLEdBQTRCakQsR0FBR0UsTUFBSCxDQUFVSyxHQUFWLENBQWM0QyxXQUExQztBQUNBO0FBNUJSO0FBOEJIOztBQUVEOztBQUVBO0FBQ0Esb0JBQUksS0FBSzVHLGFBQUwsQ0FBbUJTLElBQW5CLElBQTJCLEtBQUtULGFBQUwsQ0FBbUJTLElBQW5CLENBQXdCa0csV0FBbkQsSUFBa0UsS0FBSzNHLGFBQUwsQ0FBbUJTLElBQW5CLENBQXdCa0csV0FBeEIsQ0FBb0NxQixVQUExRyxFQUFzSDtBQUNsSCx3QkFBSTlFLGFBQWF3RCxZQUFqQixFQUErQjtBQUMzQiw0QkFBSXVCLHdCQUF3QixLQUFLakksYUFBTCxDQUFtQlMsSUFBbkIsQ0FBd0JrRyxXQUF4QixDQUFvQ3FCLFVBQWhFOztBQUVBRSxpQ0FBUyxLQUFUO0FBQ0EsNkJBQUs1RyxJQUFJLENBQVQsRUFBWUEsSUFBSTRCLGFBQWF3RCxZQUFiLENBQTBCNUUsTUFBMUMsRUFBa0RSLEtBQUssQ0FBdkQsRUFBMEQ7QUFDdEQsZ0NBQUk0QixhQUFhd0QsWUFBYixDQUEwQnBGLENBQTFCLEtBQWdDMkcscUJBQXBDLEVBQTJEO0FBQ3ZEQyx5Q0FBUyxJQUFUO0FBQ0E7QUFDSDtBQUNKOztBQUVELDRCQUFJLENBQUNBLE1BQUwsRUFBYTtBQUNUaEYseUNBQWF3RCxZQUFiLEdBQTRCeEQsYUFBYXdELFlBQWIsR0FBNEIsR0FBNUIsR0FBa0N1QixxQkFBOUQ7QUFDSDtBQUNKLHFCQWRELE1BY087QUFDSC9FLHFDQUFhd0QsWUFBYixHQUE0QixLQUFLMUcsYUFBTCxDQUFtQlMsSUFBbkIsQ0FBd0JrRyxXQUF4QixDQUFvQ3FCLFVBQWhFO0FBQ0g7QUFDSjs7QUFFRDtBQUNBO0FBQ0Esb0JBQUlHLHdCQUF3QixFQUE1QjtBQUNBLG9CQUFJLEtBQUtuSSxhQUFMLENBQW1CUyxJQUFuQixDQUF3QjJILFNBQTVCLEVBQXVDO0FBQ25DLHdCQUFJQyxtQkFBbUIsS0FBS3JJLGFBQUwsQ0FBbUJTLElBQW5CLENBQXdCMkgsU0FBeEIsQ0FBa0NDLGdCQUF6RDs7QUFFQSx3QkFBSSxLQUFLckksYUFBTCxDQUFtQlMsSUFBbkIsSUFDQSxLQUFLVCxhQUFMLENBQW1CUyxJQUFuQixDQUF3QmtHLFdBRDVCLEVBQ3lDOztBQUVyQyxnQ0FBUTBCLGdCQUFSO0FBQ0ksaUNBQUssR0FBTDtBQUNJRix3REFBd0IsRUFBeEIsQ0FESixDQUNnQztBQUM1QjtBQUNKLGlDQUFLLEdBQUw7QUFDSSxvQ0FBSSxLQUFLbkksYUFBTCxDQUFtQlMsSUFBbkIsQ0FBd0IySCxTQUF4QixDQUFrQ0Usa0JBQXRDLEVBQTBEO0FBQ3RESCw0REFBd0IsS0FBS25JLGFBQUwsQ0FBbUJTLElBQW5CLENBQXdCMkgsU0FBeEIsQ0FBa0NFLGtCQUExRDtBQUNIO0FBQ0Q7QUFDSixpQ0FBSyxHQUFMO0FBQ0lILHdEQUNJLHlLQURKO0FBRUE7QUFDSixpQ0FBSyxHQUFMO0FBQ0E7QUFDSUEsd0RBQ0ksb0lBREo7QUFFQTtBQWpCUjs7QUFxQkEsNEJBQUlJLHVCQUF1QkoscUJBQTNCOztBQUVBLDRCQUFJRCxTQUFTLEtBQWI7QUFDQSw0QkFBSSxDQUFDaEYsYUFBYXdELFlBQWxCLEVBQWdDO0FBQzVCeEQseUNBQWF3RCxZQUFiLEdBQTRCLEVBQTVCO0FBQ0g7QUFDRCw2QkFBS3BGLElBQUksQ0FBVCxFQUFZQSxJQUFJNEIsYUFBYXdELFlBQWIsQ0FBMEI1RSxNQUExQyxFQUFrRFIsS0FBSyxDQUF2RCxFQUEwRDtBQUN0RCxnQ0FBSTRCLGFBQWF3RCxZQUFiLENBQTBCcEYsQ0FBMUIsS0FBZ0NpSCxvQkFBcEMsRUFBMEQ7QUFDdERMLHlDQUFTLElBQVQ7QUFDQTtBQUNIO0FBQ0o7O0FBRUQsNEJBQUksQ0FBQ0EsTUFBTCxFQUFhO0FBQ1RoRix5Q0FBYXdELFlBQWIsR0FBNEJ4RCxhQUFhd0QsWUFBYixHQUE0QixHQUE1QixHQUFrQzZCLG9CQUE5RDtBQUNILHlCQUZELE1BR0s7QUFDRHJGLHlDQUFhd0QsWUFBYixHQUE0QjZCLG9CQUE1QjtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxvQkFBSXBGLGdCQUFnQnFGLE9BQXBCLEVBQTZCO0FBQ3pCdEYsaUNBQWExQixJQUFiLEdBQW9CMkIsZ0JBQWdCcUYsT0FBcEM7QUFDSDtBQUNELG9CQUFJckYsZ0JBQWdCb0UsT0FBaEIsSUFBMkJwRSxnQkFBZ0JvRSxPQUFoQixJQUEyQixDQUExRCxFQUE2RDtBQUN6RHJFLGlDQUFhcUUsT0FBYixHQUF1QnBFLGdCQUFnQm9FLE9BQXZDO0FBQ0g7QUFDRCxvQkFBSXBFLGdCQUFnQmdFLE9BQWhCLElBQTJCaEUsZ0JBQWdCZ0UsT0FBaEIsSUFBMkIsQ0FBMUQsRUFBNkQ7QUFDekRqRSxpQ0FBYWlFLE9BQWIsR0FBdUJoRSxnQkFBZ0JnRSxPQUF2QztBQUNIOztBQUVEOUQsK0JBQWUsS0FBSzZELGVBQUwsQ0FBcUJoRSxZQUFyQixFQUFtQ0MsZUFBbkMsRUFBb0RDLGFBQXBELENBQWY7QUFDQSxvQkFBR0QsZ0JBQWdCZCxXQUFuQixFQUErQjtBQUMzQix5QkFBS2YsSUFBSSxDQUFULEVBQVlBLElBQUc2QixnQkFBZ0JiLFFBQWhCLENBQXlCUixNQUF4QyxFQUFnRFIsR0FBaEQsRUFBb0Q7QUFDaEQsNEJBQUcsQ0FBQzZCLGdCQUFnQlosaUJBQWhCLENBQWtDQyxXQUFsQyxDQUE4Q1csZ0JBQWdCYixRQUFoQixDQUF5QmhCLENBQXpCLEVBQTRCUyxFQUExRSxDQUFKLEVBQWtGO0FBQzlFb0IsNENBQWdCWixpQkFBaEIsQ0FBa0NDLFdBQWxDLENBQThDVyxnQkFBZ0JiLFFBQWhCLENBQXlCaEIsQ0FBekIsRUFBNEJTLEVBQTFFLElBQWdGLElBQUlVLGdFQUFKLENBQWVVLGdCQUFnQmIsUUFBaEIsQ0FBeUJoQixDQUF6QixDQUFmLEVBQTJDLEtBQUt0QixhQUFoRCxDQUFoRjtBQUNBbUQsNENBQWdCWixpQkFBaEIsQ0FBa0NDLFdBQWxDLENBQThDVyxnQkFBZ0JiLFFBQWhCLENBQXlCaEIsQ0FBekIsRUFBNEJTLEVBQTFFLEVBQThFVyxLQUE5RSxHQUFzRlMsZ0JBQWdCWixpQkFBaEIsQ0FBa0NJLGdCQUFsQyxDQUFtRFEsZ0JBQWdCYixRQUFoQixDQUF5QmhCLENBQXpCLEVBQTRCUyxFQUEvRSxDQUF0RjtBQUNIO0FBQ0o7QUFDSjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFLN0IsYUFBTCxDQUFtQnlILFlBQW5CLEVBQWlDakYsS0FBakMsR0FBeUNXLFlBQXpDO0FBQ0g7O0FBRUQrQyxxQkFBUyxLQUFLcEcsYUFBTCxDQUFtQm9ILEdBQW5CLENBQXVCcUIsU0FBdkIsRUFBVDs7QUFFQTtBQUNBLGdCQUFJckMsT0FBT3NDLElBQVAsQ0FBWSxDQUFaLEVBQWVDLEdBQWYsQ0FBbUIsVUFBbkIsTUFBbUMsZUFBdkMsRUFBd0Q7QUFDcERkLDZCQUFhekIsT0FBT3NDLElBQVAsQ0FBWSxDQUFaLEVBQWVELFNBQWYsRUFBYjs7QUFFQSxvQkFBSSxPQUFPLEtBQUt2SSxhQUFMLENBQW1CeUgsWUFBbkIsQ0FBUCxLQUE0QyxXQUFoRCxFQUE2RDtBQUN6RC9HLGdDQUFZLEtBQUtWLGFBQUwsQ0FBbUJ5SCxZQUFuQixFQUFpQ2pGLEtBQTdDOztBQUVBLHdCQUFJOUIsU0FBSixFQUFlO0FBQ1hnSCx1Q0FBZSxJQUFmO0FBQ0FDLG1DQUFXZSxPQUFYLENBQW1CLFVBQVUzQixPQUFWLEVBQW1CRixLQUFuQixFQUEwQjhCLEtBQTFCLEVBQWlDO0FBQ2hELGdDQUFJNUIsV0FBWUEsWUFBWXJHLFNBQTVCLEVBQXdDO0FBQ3BDcUcsd0NBQVE2QixVQUFSLENBQW1CLElBQW5CO0FBQ0FsQiwrQ0FBZSxLQUFmO0FBQ0gsNkJBSEQsTUFHTyxJQUFJWCxPQUFKLEVBQWE7QUFDaEJBLHdDQUFRNkIsVUFBUixDQUFtQixLQUFuQjtBQUNILDZCQUZNLE1BRUE7QUFDSGxCLCtDQUFlLEtBQWY7QUFDSDtBQUNKLHlCQVRELEVBU0csSUFUSDs7QUFXQSw0QkFBSUEsWUFBSixFQUFrQjtBQUNkQyx1Q0FBVzNGLElBQVgsQ0FBZ0J0QixTQUFoQjtBQUNIO0FBQ0o7O0FBRURrSCwyQkFBTyxLQUFLOUgsYUFBTCxDQUFtQm9ILEdBQW5CLENBQXVCQyxPQUF2QixFQUFQO0FBQ0Esd0JBQUkwQixPQUFPakIsS0FBS2tCLE9BQUwsRUFBWDtBQUNBLHdCQUFJQyxTQUFTbkIsS0FBS29CLFNBQUwsRUFBYjtBQUNBLHdCQUFLL0YsZ0JBQWdCb0UsT0FBaEIsSUFBMkJwRSxnQkFBZ0JvRSxPQUFoQixJQUEyQixDQUF2RCxJQUNDcEUsZ0JBQWdCZ0UsT0FBaEIsSUFBMkJoRSxnQkFBZ0JnRSxPQUFoQixJQUEyQixDQUQzRCxFQUMrRDtBQUMzRCw0QkFBSWhFLGdCQUFnQm9FLE9BQWhCLElBQTRCTyxLQUFLa0IsT0FBTCxLQUFpQjdGLGdCQUFnQm9FLE9BQWpFLEVBQTJFO0FBQ3ZFTyxpQ0FBS3FCLE9BQUwsQ0FBYWhHLGdCQUFnQm9FLE9BQTdCO0FBQ0gseUJBRkQsTUFFTyxJQUFJcEUsZ0JBQWdCZ0UsT0FBaEIsSUFBNEJXLEtBQUtrQixPQUFMLEtBQWlCN0YsZ0JBQWdCZ0UsT0FBakUsRUFBMkU7QUFDOUVXLGlDQUFLcUIsT0FBTCxDQUFhaEcsZ0JBQWdCZ0UsT0FBN0I7QUFDSDs7QUFFRCw0QkFBSWlDLFVBQVUsS0FBS3BKLGFBQUwsQ0FBbUJTLElBQWpDO0FBQ0EsNEJBQUkySSxRQUFRQyxTQUFSLElBQXFCRCxRQUFRRSxhQUFqQyxFQUFnRDtBQUM1QyxnQ0FBSUMsMEJBQTBCQyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQTlCO0FBQ0FGLG9EQUF3QkcsU0FBeEIsR0FBb0NDLHdFQUFZQSxDQUFDQyxvQkFBYixHQUFvQyxHQUFwQyxHQUEwQ0Qsd0VBQVlBLENBQUNFLGVBQTNGO0FBQ0EsaUNBQUs3SixhQUFMLENBQW1COEosMkJBQW5CLENBQStDQyxPQUEvQyxDQUF1RFIsdUJBQXZEOztBQUVBLGdDQUFJUyw2QkFBNkJSLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBakM7QUFDQU8sdURBQTJCTixTQUEzQixHQUF1Q0Msd0VBQVlBLENBQUNNLG9CQUFiLEdBQW9DLEdBQXBDLEdBQTBDTix3RUFBWUEsQ0FBQ0UsZUFBOUY7QUFDQTVGLDhCQUFFc0YsdUJBQUYsRUFBMkJXLEtBQTNCLENBQWlDRiwwQkFBakM7QUFDQSxpQ0FBS2hLLGFBQUwsQ0FBbUJtSyxpQkFBbkIsQ0FBcUNqSSxJQUFyQyxDQUEwQzhILDBCQUExQzs7QUFFQSxnQ0FBSUksZ0NBQWdDWixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQXBDO0FBQ0FXLDBEQUE4QlYsU0FBOUIsR0FBMENDLHdFQUFZQSxDQUFDVSx3QkFBYixHQUF3QyxHQUF4QyxHQUE4Q1Ysd0VBQVlBLENBQUNFLGVBQXJHOztBQUVBLGdDQUFJUyxVQUFVLElBQUk3RyxHQUFHOEcsSUFBUCxDQUFZO0FBQ3RCdEIsd0NBQVFBLE1BRGM7QUFFdEJ1Qiw0Q0FBWTFDLEtBQUsyQyxhQUFMLEVBRlU7QUFHdEIxQixzQ0FBTUEsSUFIZ0I7QUFJdEJ4Qix5Q0FBUzVGLFNBQVN3QixnQkFBZ0JvRSxPQUF6QixFQUFrQyxFQUFsQyxLQUF5QyxDQUo1QjtBQUt0QkoseUNBQVN4RixTQUFTd0IsZ0JBQWdCZ0UsT0FBekIsRUFBa0MsRUFBbEMsS0FBeUMsRUFMNUI7QUFNdEJ1RCwwQ0FBVTVDLEtBQUs2QyxXQUFMLEVBTlk7QUFPdEJDLDRDQUFZOUMsS0FBSytDLGFBQUw7QUFQVSw2QkFBWixDQUFkOztBQVVBLGlDQUFLN0ssYUFBTCxDQUFtQm9ILEdBQW5CLENBQXVCMEQsT0FBdkIsQ0FBK0JSLE9BQS9CO0FBQ0F0SSwwRkFBS0EsQ0FBQytJLGFBQU4sQ0FBb0IsS0FBSy9LLGFBQXpCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSDtBQUVKO0FBQ0o7QUFDSjs7QUFFRCxnQkFBSSxPQUFPbUQsZUFBUCxLQUEyQixXQUEvQixFQUE0QztBQUN4QyxxQkFBS3BELEtBQUwsQ0FBVzZDLGlCQUFYLEdBQStCTyxnQkFBZ0JwQixFQUEvQzs7QUFFQUMsOEVBQUtBLENBQUNnQixpQkFBTixDQUF3QixLQUFLakQsS0FBTCxDQUFXaUwseUJBQW5DLEVBQThEN0gsZUFBOUQ7O0FBRUE7OztBQUdBLG9CQUFJLE9BQU9BLGVBQVAsS0FBMkIsV0FBL0IsRUFBNEM7QUFDeEMsd0JBQUlpRyxVQUFVLEtBQUtwSixhQUFMLENBQW1CUyxJQUFqQztBQUNBLHdCQUFJMkksUUFBUTZCLE1BQVIsSUFBa0I3QixRQUFRNkIsTUFBUixDQUFlQyxNQUFqQyxLQUE0QzlCLFFBQVE2QixNQUFSLENBQWU5SixNQUFmLElBQXlCZ0MsZ0JBQWdCOEgsTUFBckYsQ0FBSixFQUFrRztBQUM5Riw0QkFBSSxDQUFDLEtBQUtFLElBQVYsRUFBZ0I7QUFDWixpQ0FBS0EsSUFBTCxHQUFZLElBQUlDLEtBQUtDLFFBQVQsQ0FBa0I7QUFDMUJqRSxxQ0FBSyxLQUFLcEgsYUFBTCxDQUFtQm9ILEdBREU7QUFFMUJrRSxxREFBcUIsS0FGSyxDQUVBOzs7Ozs7Ozs7OERBRkEsRUFBbEIsQ0FBWjtBQVlIO0FBQ0Q7Ozs7OztBQU1BLDZCQUFLSCxJQUFMLENBQVVJLFVBQVYsQ0FBcUIsSUFBckI7QUFDQTs7Ozs7Ozs7QUFRSCxxQkE5QkQsTUE4Qk87QUFDSCw0QkFBSSxLQUFLSixJQUFMLElBQWEsS0FBS0EsSUFBTCxDQUFVSyxVQUFWLEVBQWpCLEVBQXlDO0FBQ3JDLGlDQUFLTCxJQUFMLENBQVVJLFVBQVYsQ0FBcUIsS0FBckI7QUFDQXZKLDBGQUFLQSxDQUFDK0ksYUFBTixDQUFvQixLQUFLL0ssYUFBekI7QUFDSDtBQUNKO0FBQ0o7QUFDSjtBQUNKLFNBOXRCTCxDQTh0Qk07O0FBOXRCTjs7QUFBQTtBQUFBLEk7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDUEE7O0FBRU8sSUFBTW1DLFlBQWIsR0FDSSxzQkFBWXNKLFlBQVosRUFBMEJDLFVBQTFCLEVBQXNDO0FBQUE7O0FBQ2xDLFNBQUszSixFQUFMLEdBQVUwSixhQUFhLElBQWIsQ0FBVjtBQUNBLFNBQUtFLEdBQUwsR0FBV0YsYUFBYSxLQUFiLENBQVg7QUFDQSxTQUFLN0osSUFBTCxHQUFZNkosYUFBYSxNQUFiLENBQVo7QUFDQSxTQUFLRyxZQUFMLEdBQW9CSCxhQUFhLGNBQWIsQ0FBcEI7QUFDQSxTQUFLNUksUUFBTCxHQUFnQjRJLGFBQWEsVUFBYixDQUFoQjtBQUNBLFNBQUtJLFNBQUwsR0FBaUJKLGFBQWEsV0FBYixDQUFqQjtBQUNBLFNBQUtLLGNBQUwsR0FBc0JMLGFBQWEsZ0JBQWIsQ0FBdEI7QUFDQSxTQUFLTSxjQUFMLEdBQXNCTixhQUFhLGdCQUFiLENBQXRCO0FBQ0EsU0FBS08sY0FBTCxHQUFzQlAsYUFBYSxnQkFBYixDQUF0QjtBQUNBLFNBQUtRLGNBQUwsR0FBc0JSLGFBQWEsZ0JBQWIsQ0FBdEI7QUFDQSxTQUFLUyxXQUFMLEdBQW1CVCxhQUFhLGFBQWIsQ0FBbkI7QUFDQSxTQUFLbkgsV0FBTCxHQUFtQm1ILGFBQWEsYUFBYixDQUFuQjtBQUNBLFNBQUtVLFVBQUwsR0FBa0JWLGFBQWEsWUFBYixDQUFsQjtBQUNBLFNBQUszSSxLQUFMLEdBQWEySSxhQUFhLE9BQWIsQ0FBYjtBQUNBLFNBQUs5RSxXQUFMLEdBQW1COEUsYUFBYSxhQUFiLENBQW5CO0FBQ0EsU0FBS3ZGLE1BQUwsR0FBY3VGLGFBQWEsUUFBYixDQUFkO0FBQ0EsU0FBS1csVUFBTCxHQUFrQlgsYUFBYSxZQUFiLENBQWxCO0FBQ0EsU0FBS2xFLE9BQUwsR0FBZWtFLGFBQWEsU0FBYixDQUFmO0FBQ0EsU0FBS3RFLE9BQUwsR0FBZXNFLGFBQWEsU0FBYixDQUFmO0FBQ0EsU0FBS1ksaUJBQUwsR0FBeUJaLGFBQWEsbUJBQWIsQ0FBekI7QUFDQSxTQUFLYSxnQkFBTCxHQUF3QmIsYUFBYSxrQkFBYixDQUF4QjtBQUNBLFNBQUtySCxPQUFMLEdBQWVxSCxhQUFhLFFBQWIsSUFBeUJBLGFBQWEsUUFBYixDQUF6QixHQUFrREEsYUFBYSxTQUFiLENBQWpFO0FBQ0EsU0FBS3BILE1BQUwsR0FBY29ILGFBQWEsUUFBYixDQUFkO0FBQ0EsU0FBS25HLGtCQUFMLEdBQTBCbUcsYUFBYSxvQkFBYixDQUExQjtBQUNBLFNBQUtyRyxTQUFMLEdBQWlCcUcsYUFBYSxXQUFiLENBQWpCO0FBQ0EsU0FBS1IsTUFBTCxHQUFjUSxhQUFhLFFBQWIsQ0FBZDtBQUNBLFNBQUtoSCxVQUFMLEdBQWtCZ0gsYUFBYSxZQUFiLENBQWxCO0FBQ0EsU0FBS2xJLEdBQUwsR0FBV2tJLGFBQWEsS0FBYixDQUFYO0FBQ0EsU0FBS2pJLElBQUwsR0FBWWlJLGFBQWEsTUFBYixDQUFaO0FBQ0EsU0FBSy9HLFdBQUwsR0FBbUIrRyxhQUFhLGFBQWIsQ0FBbkI7QUFDQSxTQUFLYyxTQUFMLEdBQWlCZCxhQUFhLFdBQWIsQ0FBakI7QUFDQSxTQUFLcEosV0FBTCxHQUFtQm9KLGFBQWEsYUFBYixDQUFuQjtBQUNBLFNBQUtuSixRQUFMLEdBQWdCbUosYUFBYSxVQUFiLENBQWhCO0FBQ0EsUUFBR0EsYUFBYSxZQUFiLENBQUgsRUFBOEI7QUFDMUIsWUFBSWUsYUFBYSxFQUFqQjtBQUNBLGFBQUksSUFBSXpGLEtBQVIsSUFBaUIwRSxhQUFhLFlBQWIsQ0FBakIsRUFBNkM7QUFDekMsZ0JBQUdBLGFBQWEsWUFBYixFQUEyQnpFLGNBQTNCLENBQTBDRCxLQUExQyxDQUFILEVBQW9EO0FBQ2xEeUYsMkJBQVd6RixLQUFYLElBQW9CLElBQUk1RSxZQUFKLENBQWlCc0osYUFBYSxZQUFiLEVBQTJCMUUsS0FBM0IsRUFBa0MsT0FBbEMsQ0FBakIsQ0FBcEI7QUFDQXlGLDJCQUFXekYsS0FBWCxFQUFrQixTQUFsQixJQUErQjBFLGFBQWEsWUFBYixFQUEyQjFFLEtBQTNCLEVBQWtDLFNBQWxDLENBQS9CO0FBQ0F5RiwyQkFBV3pGLEtBQVgsRUFBa0IsU0FBbEIsSUFBK0IwRSxhQUFhLFlBQWIsRUFBMkIxRSxLQUEzQixFQUFrQyxTQUFsQyxDQUEvQjtBQUNEO0FBQ0o7QUFDRCxhQUFLeUYsVUFBTCxHQUFrQkEsVUFBbEI7QUFDSDtBQUNELFNBQUtqSyxpQkFBTCxHQUF5QixJQUFJa0sscUZBQUosQ0FBeUIsSUFBekIsQ0FBekI7QUFDQSxTQUFLL0osS0FBTCxHQUFhLEtBQWI7QUFDQSxTQUFLZ0osVUFBTCxHQUFrQkEsVUFBbEI7QUFDSCxDQWpETCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0ZBO0FBQ0E7O0FBRUEsSUFBSWdCLE1BQU0sS0FBS0EsR0FBZjs7QUFFQTs7QUFFTyxJQUFNQyxrQkFBYjtBQUNFLDhCQUFZNU0sS0FBWixFQUFrQjtBQUFBOztBQUNoQixTQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQyxhQUFMLEdBQXFCRCxNQUFNRSxPQUFOLENBQWNELGFBQW5DO0FBQ0EsU0FBSzRNLFNBQUwsR0FBaUIsRUFBakI7QUFDQSxTQUFLQyxhQUFMLEdBQXFCLEVBQXJCO0FBQ0Q7O0FBTkg7QUFBQTtBQUFBLGlDQVFnQjtBQUNaLFVBQUl6TSxPQUFPLElBQVg7QUFDQSxVQUFJLEtBQUswTSxLQUFMLEtBQWUsQ0FBbkIsRUFBc0I7QUFDcEIsZUFBTyxLQUFQO0FBQ0Q7O0FBRUQ7QUFDQXpNLGFBQU9DLElBQVAsQ0FBWSxLQUFLUCxLQUFMLENBQVdnTixhQUF2QixFQUFxQztBQUNuQ3ZNLGtCQUFVLEtBQUtSLGFBQUwsQ0FBbUJTLElBQW5CLENBQXdCQyxLQUF4QixHQUFnQyxPQUFoQyxHQUEwQzs7QUFEakIsT0FBckMsRUFHR0MsSUFISCxDQUdRLFVBQVVGLElBQVYsRUFBZ0I7QUFDdEJMLGFBQUs0TSxTQUFMLENBQWV2TSxLQUFLaUMsS0FBcEIsRUFBMkJqQyxLQUFLd00sYUFBaEM7QUFDQTdNLGFBQUtMLEtBQUwsQ0FBV21OLGFBQVgsR0FBMkIsSUFBM0I7QUFDQWxMLHNFQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0I1QyxLQUFLTCxLQUFMLENBQVdvTixpQkFBbkMsRUFBc0QvTSxLQUFLTCxLQUFMLENBQVdxTixRQUFqRTtBQUNBcEwsc0VBQUtBLENBQUNnQixpQkFBTixDQUF3QnFLLE9BQU9DLFlBQVAsQ0FBb0JDLGtCQUE1QyxFQUFnRSxFQUFDSCxVQUFVaE4sS0FBS0wsS0FBTCxDQUFXcU4sUUFBdEIsRUFBZ0NyTixPQUFPSyxLQUFLTCxLQUE1QyxFQUFoRTtBQUNBSyxhQUFLTCxLQUFMLENBQVd5TixtQkFBWCxDQUErQjtBQUM3QjdNLGdCQUFNLGdCQUFZO0FBQ2hCUCxpQkFBS3FOLGdCQUFMO0FBQ0Q7QUFINEIsU0FBL0I7QUFLQSxlQUFPLElBQVA7QUFDRCxPQWRELEVBY0czTSxJQWRILENBY1EsWUFBWTtBQUNsQjtBQUNBO0FBQ0E7QUFDQUMsZ0JBQVFDLElBQVIsQ0FBYSxxREFBYjtBQUNBLGVBQU8sS0FBUDtBQUNELE9BcEJELEVBb0JHRyxNQXBCSCxDQW9CVSxZQUFZO0FBQ3BCO0FBQ0QsT0F0QkQ7QUF1QkQsS0F0Q0gsQ0FzQ0k7O0FBdENKO0FBQUE7QUFBQSw4QkF1Q1lpRixNQXZDWixFQXVDb0I2RyxhQXZDcEIsRUF1Q21DO0FBQy9CLFVBQUkzTCxDQUFKLEVBQ0VDLENBREYsRUFFRW1NLENBRkYsRUFHRUMsQ0FIRixFQUlFQyxTQUpGLEVBS0VsTCxLQUxGLEVBTUVtTCxVQU5GLEVBT0VDLFNBUEYsRUFRRXpNLEdBUkYsRUFTRTBNLFdBVEYsRUFVRUMsNEJBVkYsRUFXRUMsYUFYRixFQVlFQyxRQVpGLEVBYUVDLFNBYkYsRUFjRUMsaUJBZEYsRUFlRUMsS0FmRixFQWdCRUMsZUFoQkYsRUFpQkV4SSxHQWpCRixFQWtCRXlJLFNBbEJGLEVBbUJFQyxXQW5CRjs7QUFxQkEsVUFBSXBPLE9BQU8sSUFBWDtBQUNBd04sa0JBQVksS0FBWjs7QUFFQVEsMEJBQW9CLEtBQUtwTyxhQUFMLENBQW1CUyxJQUFuQixDQUF3QjJGLE1BQXhCLElBQWtDLEVBQXREOztBQUVBNEgscUNBQStCLHNDQUFVUyxPQUFWLEVBQW1CO0FBQ2hELFlBQUlDLE1BQUosRUFDRUMsWUFERjs7QUFHQSxZQUFJRixRQUFRRyxTQUFaLEVBQXVCO0FBQ3JCSCxrQkFBUUksYUFBUixHQUF3QnpPLEtBQUs0TSxTQUFMLENBQWV5QixRQUFRSyxNQUF2QixFQUErQjdCLGFBQS9CLENBQXhCO0FBQ0Q7QUFDRixPQVBELENBM0IrQixDQWtDNUI7O0FBRUg7QUFDQXVCLG9CQUFjLHFCQUFTOUwsS0FBVCxFQUFnQjtBQUM1QixZQUFJcU0sU0FBSixFQUFlQyxPQUFmLEVBQXdCQyxTQUF4Qjs7QUFFQSxZQUFJdk0sTUFBTW9NLE1BQU4sSUFBZ0JwTSxNQUFNb00sTUFBTixDQUFhaE4sTUFBYixHQUFzQixDQUExQyxFQUE2QztBQUMzQ2lOLHNCQUFZck0sTUFBTWQsSUFBbEI7QUFDQW9OLG9CQUFVdE0sTUFBTXdNLEtBQWhCO0FBQ0FELHNCQUFZdk0sTUFBTXlNLFdBQWxCO0FBQ0FaLHNCQUFZbk8sS0FBS0wsS0FBTCxDQUFXRSxPQUFYLENBQW1CRCxhQUFuQixDQUFpQ29QLFFBQWpDLENBQTBDYixTQUF0RDtBQUNBLGNBQUksQ0FBQ0EsU0FBTCxFQUFnQjtBQUNkbk8saUJBQUtMLEtBQUwsQ0FBV0UsT0FBWCxDQUFtQkQsYUFBbkIsQ0FBaUNxUCxtQkFBakM7QUFDQWQsd0JBQVluTyxLQUFLTCxLQUFMLENBQVdFLE9BQVgsQ0FBbUJELGFBQW5CLENBQWlDb1AsUUFBakMsQ0FBMENiLFNBQXREO0FBQ0Q7QUFDREEsb0JBQVVlLHlCQUFWLENBQW9DcE4sSUFBcEMsQ0FBeUMsWUFBVTtBQUNqRHFNLHNCQUFVZ0IsYUFBVixHQUEwQmhCLFVBQVVnQixhQUFWLElBQTJCLEVBQXJEO0FBQ0FoQixzQkFBVWdCLGFBQVYsQ0FBd0JQLE9BQXhCLElBQW1DLElBQUlRLDhGQUFKLENBQWNqQixTQUFkLEVBQXlCO0FBQzFEM00sb0JBQU1tTixTQURvRDtBQUUxREcscUJBQU9GLE9BRm1EO0FBRzFERywyQkFBYUY7QUFINkMsYUFBekIsQ0FBbkM7QUFLRCxXQVBEO0FBUUQ7QUFDRixPQXJCRDs7QUF1QkEsVUFBSTdJLFVBQVVBLE9BQU90RSxNQUFQLEdBQWdCLENBQTlCLEVBQWlDO0FBQy9CLGFBQUtSLElBQUksQ0FBVCxFQUFZQSxJQUFJOEUsT0FBT3RFLE1BQXZCLEVBQStCUixLQUFLLENBQXBDLEVBQXVDO0FBQ3JDLGNBQUksS0FBS3NMLFNBQUwsQ0FBZXhHLE9BQU85RSxDQUFQLEVBQVVTLEVBQXpCLENBQUosRUFBa0M7QUFDaENXLG9CQUFRLEtBQUtrSyxTQUFMLENBQWV4RyxPQUFPOUUsQ0FBUCxFQUFVUyxFQUF6QixDQUFSO0FBQ0QsV0FGRCxNQUVPO0FBQ0xXLG9CQUFRLElBQUkrTSw0REFBSixDQUFhckosT0FBTzlFLENBQVAsQ0FBYixDQUFSLENBREssQ0FDMkI7QUFDakM7O0FBRUR3TSxzQkFBWSxLQUFaO0FBQ0E7QUFDQSxjQUFJLFFBQU9wTCxNQUFNZ04sT0FBYixNQUF5QixRQUE3QixFQUF1QztBQUNyQ2hOLGtCQUFNZ04sT0FBTixHQUFnQjFOLDhEQUFLQSxDQUFDMk4sYUFBTixDQUFvQmpOLE1BQU1nTixPQUExQixDQUFoQjtBQUNEOztBQUVEO0FBQ0E7QUFDQXhCLHFCQUFXeEwsTUFBTWlKLEdBQWpCO0FBQ0F3QyxzQkFBWSxFQUFaO0FBQ0E7QUFDQSxpQkFBTy9OLEtBQUt3TSxTQUFMLENBQWVzQixRQUFmLENBQVAsRUFBaUM7QUFDL0IsZ0JBQUlDLFVBQVVELFFBQVYsQ0FBSixFQUF5QjtBQUN2Qm5OLHNCQUFRQyxJQUFSLENBQWEsOEJBQThCMEIsTUFBTVgsRUFBcEMsR0FBeUMsR0FBdEQ7QUFDQTtBQUNEO0FBQ0RvTSxzQkFBVUQsUUFBVixJQUFzQixJQUF0QjtBQUNBQSx1QkFBVyxLQUFLdEIsU0FBTCxDQUFlc0IsUUFBZixFQUF5QnZDLEdBQXBDO0FBQ0Q7O0FBRUQsY0FBSWpKLE1BQU1nTixPQUFOLElBQWlCaE4sTUFBTWdOLE9BQU4sQ0FBYyxDQUFkLENBQWpCLElBQXFDaE4sTUFBTWdOLE9BQU4sQ0FBYyxDQUFkLEVBQWlCRSxRQUExRCxFQUFvRTtBQUNsRWxOLGtCQUFNa04sUUFBTixHQUFpQmxOLE1BQU1nTixPQUFOLENBQWMsQ0FBZCxFQUFpQkUsUUFBbEM7QUFDRDs7QUFHRCxjQUFJLENBQUN6QixVQUFVRCxRQUFWLENBQUwsRUFBMEI7O0FBRXhCO0FBQ0EsZ0JBQUl4TCxNQUFNbU4sSUFBTixLQUFlLFNBQW5CLEVBQThCO0FBQzVCbk4sb0JBQU1vTixRQUFOLEdBQWlCLElBQWpCO0FBQ0FwTixvQkFBTXFOLGFBQU4sR0FBc0IsSUFBdEI7QUFDQXJOLG9CQUFNd00sS0FBTixHQUFjeE0sTUFBTVgsRUFBcEI7QUFDQSxrQkFBSSxDQUFDVyxNQUFNcU0sU0FBWCxFQUFzQjtBQUNwQnJNLHNCQUFNc04sT0FBTixHQUFnQixJQUFoQjtBQUNEO0FBQ0Q7QUFDQTFCLGdDQUFpQix3QkFBUzJCLE1BQVQsRUFBaUI7QUFDaEMscUJBQUssSUFBSUMsUUFBUSxDQUFqQixFQUFvQkEsUUFBUUQsT0FBT25CLE1BQVAsQ0FBY2hOLE1BQTFDLEVBQWtEb08sT0FBbEQsRUFBMkQ7QUFDekQsc0JBQUlDLFdBQVdGLE9BQU9uQixNQUFQLENBQWNvQixLQUFkLENBQWY7QUFDQUMsMkJBQVNMLFFBQVQsR0FBb0IsSUFBcEI7QUFDQUssMkJBQVNqQixLQUFULEdBQWlCZSxPQUFPZixLQUF4QjtBQUNBaUIsMkJBQVNKLGFBQVQsR0FBeUIsSUFBekI7QUFDQSxzQkFBSTNQLEtBQUt3TSxTQUFMLENBQWV1RCxTQUFTcE8sRUFBeEIsQ0FBSixFQUFpQztBQUMvQnNNLDRCQUFRak8sS0FBS3dNLFNBQUwsQ0FBZXVELFNBQVNwTyxFQUF4QixDQUFSO0FBQ0QsbUJBRkQsTUFFTztBQUNMc00sNEJBQVEsSUFBSW9CLDREQUFKLENBQWFVLFFBQWIsQ0FBUixDQURLLENBQzBCO0FBQ2hDO0FBQ0Q7QUFDQS9QLHVCQUFLd00sU0FBTCxDQUFleUIsTUFBTXRNLEVBQXJCLElBQTJCc00sS0FBM0I7QUFDQTRCLHlCQUFPbkIsTUFBUCxDQUFjb0IsS0FBZCxJQUF1QjdCLEtBQXZCO0FBQ0Esc0JBQUlBLE1BQU1PLFNBQVYsRUFBcUI7QUFDbkI7QUFDQU4sb0NBQWVELEtBQWY7QUFDRDtBQUNGO0FBQ0YsZUFuQkQsQ0FSNEIsQ0EyQnpCOztBQUVILGtCQUFJM0wsTUFBTWtNLFNBQVYsRUFBcUI7QUFDbkJOLGdDQUFlNUwsS0FBZjtBQUNEO0FBQ0Q4TCwwQkFBWTlMLEtBQVo7QUFDRDs7QUFFRHJCLGtCQUFNcUIsTUFBTVgsRUFBTixJQUFZQyw4REFBS0EsQ0FBQ0MsV0FBTixFQUFsQjtBQUNBLGlCQUFLMkssU0FBTCxDQUFldkwsR0FBZixJQUFzQnFCLEtBQXRCO0FBQ0EsZ0JBQUcsS0FBSzNDLEtBQUwsQ0FBV3FRLHlCQUFYLENBQXFDMU4sTUFBTVgsRUFBM0MsQ0FBSCxFQUFrRDtBQUNoRFcsb0JBQU0yTixVQUFOLEdBQW1CLEtBQW5CO0FBQ0QsYUFGRCxNQUdJO0FBQ0YzTixvQkFBTTJOLFVBQU4sR0FBbUIsSUFBbkI7QUFDRDs7QUFFRCxpQkFBS3RRLEtBQUwsQ0FBV3FOLFFBQVgsQ0FBb0JsTCxJQUFwQixDQUF5QlEsTUFBTVgsRUFBL0I7O0FBRUEsZ0JBQUlXLE1BQU1zTixPQUFWLEVBQW1CO0FBQ2pCcEMsMEJBQVksSUFBWjtBQUNBSSwyQ0FBNkJ0TCxLQUE3QjtBQUNELGFBSEQsTUFHTyxJQUFJQSxNQUFNaUosR0FBTixJQUFhLEtBQUtpQixTQUFMLENBQWVsSyxNQUFNaUosR0FBckIsQ0FBakIsRUFBNEM7QUFDakQ7QUFDQWpKLG9CQUFNeEIsSUFBTixHQUFhLEtBQUswTCxTQUFMLENBQWVsSyxNQUFNaUosR0FBckIsRUFBMEJ6SyxJQUF2QztBQUNEOztBQUVELGdCQUFJb1AsVUFBVSxLQUFkO0FBQ0EsZ0JBQUlsQyxrQkFBa0J0TSxNQUFsQixHQUEyQixDQUEvQixFQUFrQztBQUNoQyxtQkFBSzZMLElBQUksQ0FBVCxFQUFZQSxJQUFJUyxrQkFBa0J0TSxNQUFsQyxFQUEwQzZMLEtBQUssQ0FBL0MsRUFBa0Q7QUFDaEQsb0JBQUlTLGtCQUFrQlQsQ0FBbEIsS0FBd0JqTCxNQUFNWCxFQUFsQyxFQUFzQztBQUNwQ3VPLDRCQUFVLElBQVY7QUFDQTtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxnQkFBSzVOLE1BQU14QixJQUFOLEtBQWUsR0FBaEIsSUFBeUJvUCxPQUE3QixFQUF1QztBQUNyQyxtQkFBS3ZRLEtBQUwsQ0FBV3dRLGNBQVgsQ0FBMEI3TixNQUFNWCxFQUFoQyxJQUFzQyxXQUF0QztBQUNEO0FBRUY7QUFDRixTQXpHOEIsQ0F5RzdCOztBQUVGO0FBQ0Q7O0FBRUQsYUFBTzZMLFNBQVA7QUFDRCxLQWxOSCxDQWtOSTs7QUFsTko7QUFBQTtBQUFBLHFDQW1ObUI0QyxPQW5ObkIsRUFtTjRCOztBQUV4QixVQUFJcFEsT0FBTyxJQUFYO0FBQUEsVUFDRWtCLENBREY7QUFBQSxVQUVFOEUsTUFGRjtBQUFBLFVBR0VxSyxRQUhGO0FBQUEsVUFJRUMsaUJBSkY7QUFBQSxVQUtFQyxjQUxGO0FBQUEsVUFNRW5FLFVBTkY7QUFBQSxVQU9Fb0UsV0FQRjtBQUFBLFVBUUVDLFdBUkY7QUFBQSxVQVNFQyxrQkFURjtBQUFBLFVBVUVDLG1CQVZGO0FBQUEsVUFXRUMsV0FYRjtBQUFBLFVBWUVDLFlBWkY7QUFBQSxVQWFFQyxXQWJGO0FBQUEsVUFjRUMsYUFkRjtBQUFBLFVBZUVDLGVBZkY7QUFBQSxVQWdCRUMsZUFoQkY7QUFBQSxVQWlCRUMsZUFqQkY7QUFBQSxVQWtCRUMsbUJBbEJGOztBQW9CQUQsd0JBQWtCLEVBQWxCOztBQUVBQyw0QkFBc0IsNkJBQVU3TyxLQUFWLEVBQWlCakMsSUFBakIsRUFBdUI7QUFDM0NBLGFBQUsrUSxVQUFMLEdBQWtCL1EsS0FBSytRLFVBQUwsSUFBbUIsRUFBckM7O0FBRUE5TyxjQUFNK08sS0FBTixHQUFjaFIsS0FBS2dSLEtBQUwsSUFBY2hSLEtBQUsrUSxVQUFMLENBQWdCQyxLQUE5QixJQUF1QyxLQUFyRDtBQUNBL08sY0FBTWdQLE9BQU4sR0FBZ0JqUixLQUFLaVIsT0FBTCxJQUFnQmpSLEtBQUsrUSxVQUFMLENBQWdCRSxPQUFoQyxJQUEyQyxLQUEzRDtBQUNBaFAsY0FBTWlQLGNBQU4sR0FBdUJsUixLQUFLa1IsY0FBTCxJQUF1QmxSLEtBQUsrUSxVQUFMLENBQWdCRyxjQUF2QyxJQUF5RCxLQUFoRjtBQUNBalAsY0FBTWtQLEtBQU4sR0FBY25SLEtBQUttUixLQUFMLElBQWNuUixLQUFLK1EsVUFBTCxDQUFnQkksS0FBOUIsSUFBdUMsS0FBckQ7QUFDQWxQLGNBQU1tUCxZQUFOLEdBQXFCcFIsS0FBS29SLFlBQUwsSUFBcUJwUixLQUFLK1EsVUFBTCxDQUFnQkssWUFBckMsSUFBcUQsS0FBMUU7QUFDRCxPQVJEOztBQVVBLFVBQUksS0FBS2pGLFNBQUwsQ0FBZTRELE9BQWYsRUFBd0JkLE9BQTVCLEVBQXFDO0FBQ25DdEosaUJBQVMsRUFBVDs7QUFFSSxZQUFJMEwsa0JBQWtCLEVBQXRCO0FBQ0EsYUFBS3hRLElBQUksQ0FBVCxFQUFZQSxJQUFJLEtBQUtzTCxTQUFMLENBQWU0RCxPQUFmLEVBQXdCZCxPQUF4QixDQUFnQzVOLE1BQWhELEVBQXdEUixLQUFLLENBQTdELEVBQWdFO0FBQ2hFc1Asd0JBQWMsS0FBS2hFLFNBQUwsQ0FBZTRELE9BQWYsRUFBd0JkLE9BQXhCLENBQWdDcE8sQ0FBaEMsQ0FBZDtBQUNBOFAsNEJBQWtCLHlCQUFVVyxPQUFWLEVBQW1CbkgsVUFBbkIsRUFBK0I7O0FBRS9DLGdCQUFJb0gsSUFBSixFQUNFbFAsS0FERixFQUVFbVAsU0FGRixFQUdFQyxVQUhGLEVBSUVDLE1BSkYsRUFLRXpFLENBTEYsRUFNRTBFLFNBTkYsRUFPRUMsU0FQRjs7QUFTQSxnQkFBSXpCLGVBQWVBLFlBQVkwQixhQUEzQixJQUE0Q2xTLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRDVCLFlBQVkwQixhQUE1RCxDQUFoRCxFQUE0SDtBQUMxSHhQLHNCQUFRMUMsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdENUIsWUFBWTBCLGFBQTVELEVBQTJFeFAsS0FBM0UsQ0FBaUZpUCxPQUFqRixFQUEwRm5ILFVBQTFGLENBQVI7O0FBRUEsa0JBQUksQ0FBQzlILEtBQUwsRUFBWTtBQUNWQSx3QkFBUSxFQUFSO0FBQ0ExQyxxQkFBS3FTLGNBQUwsQ0FBb0JqQyxPQUFwQixJQUErQlMsYUFBYXlCLFNBQWIsRUFBL0I7QUFDRDs7QUFFRCxrQkFBSVgsWUFBWVksU0FBWixJQUF5QlosWUFBWSxJQUFyQyxJQUE2Q0EsUUFBUTNSLElBQVIsS0FBaUJpTixNQUFsRSxFQUEwRTtBQUN4RSxvQkFBRzBFLFFBQVFwSixHQUFSLENBQVksVUFBWixDQUFILEVBQTJCO0FBQ3pCc0osOEJBQVlGLFFBQVFwSixHQUFSLENBQVksVUFBWixDQUFaO0FBQ0QsaUJBRkQsTUFHSTtBQUNGc0osOEJBQVksRUFBWjtBQUNBQSw0QkFBVSxDQUFWLElBQWVGLE9BQWY7QUFDRDtBQUNEQyx1QkFBT0MsVUFBVW5RLE1BQWpCO0FBQ0Esb0JBQUlrUSxPQUFPLENBQVgsRUFBYztBQUNaLHNCQUFJQyxVQUFVLENBQVYsRUFBYVcsUUFBYixNQUEyQlosT0FBTyxJQUF0QyxFQUE0QztBQUFFO0FBQzVDbFAsMEJBQU0sQ0FBTixJQUFXbVAsVUFBVSxDQUFWLEVBQWFXLFFBQWIsR0FBd0IsQ0FBeEIsQ0FBWDtBQUNBLHlCQUFLbEYsSUFBSSxDQUFULEVBQVlBLElBQUl1RSxVQUFVblEsTUFBMUIsRUFBa0M0TCxLQUFLLENBQXZDLEVBQTBDO0FBQ3hDLDBCQUFJLENBQUN1RSxVQUFVdkUsQ0FBVixFQUFha0YsUUFBYixFQUFMLEVBQThCO0FBQzVCOVAsZ0NBQVExQyxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0Q1QixZQUFZMEIsYUFBNUQsRUFBMkV4UCxLQUEzRSxDQUFpRm1QLFVBQVUsQ0FBVixDQUFqRixFQUErRnJILFVBQS9GLENBQVI7QUFDQTtBQUNEO0FBQ0Y7QUFDRixtQkFSRCxNQVFPO0FBQ0w5SCw0QkFBUTFDLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRDVCLFlBQVkwQixhQUE1RCxFQUEyRXhQLEtBQTNFLENBQWlGbVAsVUFBVSxDQUFWLENBQWpGLEVBQStGckgsVUFBL0YsQ0FBUjtBQUNEO0FBQ0Qsc0JBQUksQ0FBQzlILEtBQUwsRUFBWTtBQUNWQSw0QkFBUSxFQUFSO0FBQ0Q7O0FBRUQ7QUFDQW9QLCtCQUFhLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBYjtBQUNBLHNCQUFJcFAsTUFBTSxDQUFOLENBQUosRUFBYztBQUNaLHdCQUFJLFFBQU9BLE1BQU0sQ0FBTixFQUFTK1AsUUFBVCxFQUFQLEtBQThCL1AsTUFBTSxDQUFOLEVBQVMrUCxRQUFULEdBQW9CQyxTQUFsRCxJQUErRCxPQUFPaFEsTUFBTSxDQUFOLEVBQVMrUCxRQUFULEdBQW9CQyxTQUEzQixLQUF5QyxVQUE1RyxFQUF3SDtBQUN0SFgsK0JBQVN4USxTQUFTbUIsTUFBTSxDQUFOLEVBQVMrUCxRQUFULEdBQW9CQyxTQUFwQixFQUFULEVBQTBDLEVBQTFDLENBQVQ7QUFDQSwwQkFBSVgsTUFBSixFQUFZO0FBQ1ZELHFDQUFhLENBQUMsQ0FBRCxFQUFJQyxNQUFKLENBQWI7QUFDRDtBQUNGLHFCQUxELE1BS08sSUFBSXJQLE1BQU0sQ0FBTixFQUFTK1AsUUFBVCxNQUF1Qi9QLE1BQU0sQ0FBTixFQUFTK1AsUUFBVCxHQUFvQkUsU0FBM0MsSUFBd0QsT0FBT2pRLE1BQU0sQ0FBTixFQUFTK1AsUUFBVCxHQUFvQkUsU0FBM0IsS0FBeUMsVUFBckcsRUFBaUg7QUFDdEhiLG1DQUFhcFAsTUFBTSxDQUFOLEVBQVMrUCxRQUFULEdBQW9CRSxTQUFwQixNQUFtQyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQWhEO0FBQ0Q7QUFDRjs7QUFFRFgsOEJBQVlwUSw4REFBS0EsQ0FBQ2dSLHdCQUFOLENBQStCLFFBQS9CLEVBQXdDO0FBQ2xEQywwQkFBTSxHQUQ0QztBQUVsREMsMkJBQU87QUFGMkMsbUJBQXhDLENBQVo7O0FBS0Esc0JBQUl0QyxZQUFZdUMsaUJBQWhCLEVBQW1DO0FBQ2pDZixnQ0FBWXBRLDhEQUFLQSxDQUFDZ1Isd0JBQU4sQ0FBK0JwQyxZQUFZdUMsaUJBQTNDLEVBQTZEO0FBQ3ZFRiw0QkFBTSxHQURpRTtBQUV2RUMsNkJBQU87QUFGZ0UscUJBQTdELENBQVo7QUFJRDtBQUNEYiw4QkFBWSxTQUFaO0FBQ0Esc0JBQUl6QixZQUFZd0MsaUJBQWhCLEVBQW1DO0FBQ2pDZixnQ0FBWXJRLDhEQUFLQSxDQUFDZ1Isd0JBQU4sQ0FBK0JwQyxZQUFZd0MsaUJBQTNDLEVBQTZEO0FBQ3ZFSCw0QkFBTSxHQURpRTtBQUV2RUMsNkJBQU87QUFGZ0UscUJBQTdELENBQVo7QUFJRDs7QUFFRHBRLHdCQUFNWixJQUFOLENBQ0UsSUFBSXVCLEdBQUdYLEtBQUgsQ0FBU3VRLEtBQWIsQ0FBbUI7QUFDakJDLDBCQUFNLElBQUk3UCxHQUFHWCxLQUFILENBQVN5USxJQUFiLENBQWtCO0FBQ3RCRCw0QkFBTSxHQURnQjtBQUV0QkUsNEJBQU0saUJBRmdCO0FBR3RCQywrQkFBUyxDQUFDLENBQUQsR0FBS3ZCLFdBQVcsQ0FBWCxDQUhRO0FBSXRCd0IsK0JBQVMsQ0FBQyxDQUFELEdBQUt4QixXQUFXLENBQVgsQ0FKUTtBQUt0QnlCLDRCQUFNLElBQUlsUSxHQUFHWCxLQUFILENBQVM4USxJQUFiLENBQWtCO0FBQ3RCQywrQkFBT3pCO0FBRGUsdUJBQWxCO0FBTGdCLHFCQUFsQjtBQURXLG1CQUFuQixDQURGO0FBYUF0UCx3QkFBTVosSUFBTixDQUNFLElBQUl1QixHQUFHWCxLQUFILENBQVN1USxLQUFiLENBQW1CO0FBQ2pCQywwQkFBTSxJQUFJN1AsR0FBR1gsS0FBSCxDQUFTeVEsSUFBYixDQUFrQjtBQUN0QkQsNEJBQU10QixLQUFLOEIsUUFBTCxFQURnQjtBQUV0QkwsK0JBQVMsQ0FBQyxDQUFELEdBQUt2QixXQUFXLENBQVgsQ0FGUTtBQUd0QndCLCtCQUFTLENBQUMsQ0FBRCxHQUFLeEIsV0FBVyxDQUFYLENBQUwsR0FBcUIsQ0FIUjtBQUl0QnlCLDRCQUFNLElBQUlsUSxHQUFHWCxLQUFILENBQVM4USxJQUFiLENBQWtCO0FBQ3RCQywrQkFBT3hCO0FBRGUsdUJBQWxCO0FBSmdCLHFCQUFsQjtBQURXLG1CQUFuQixDQURGO0FBWUQsaUJBekVELE1BeUVPLElBQUlMLFNBQVMsQ0FBVCxJQUFjQyxVQUFVLENBQVYsRUFBYVcsUUFBYixFQUFsQixFQUEyQztBQUNoRCx5QkFBT1gsVUFBVSxDQUFWLEVBQWFXLFFBQWIsRUFBUDtBQUNEO0FBQ0Y7QUFFRjtBQUNELG1CQUFPOVAsS0FBUDtBQUNELFdBNUdELENBRmdFLENBOEc3RDs7QUFFSCxjQUFJOE4sZUFBZ0JBLFlBQVlmLElBQVosS0FBcUIsU0FBekMsRUFBcUQ7O0FBRW5EZ0IsMEJBQWMsRUFBZDtBQUNBQSx3QkFBWXROLEdBQVosR0FBa0JxTixZQUFZblEsSUFBWixDQUFpQjhDLEdBQW5DO0FBQ0EsZ0JBQUlxTixZQUFZblEsSUFBWixDQUFpQnlGLE1BQXJCLEVBQTZCO0FBQzNCMkssMEJBQVkzSyxNQUFaLEdBQXFCNk4sbUJBQW1CbkQsWUFBWW5RLElBQVosQ0FBaUJ5RixNQUFwQyxDQUFyQjtBQUNEOztBQUVELGdCQUFJMEssWUFBWW9ELFFBQVosQ0FBcUJDLFdBQXpCLEVBQXNDO0FBQ3BDbkQsbUNBQXFCRixXQUFyQjtBQUNBRyxvQ0FBc0IsSUFBSXROLEdBQUdFLE1BQUgsQ0FBVXVRLE1BQWQsQ0FBcUI7QUFDekNDLHdCQUFRLGdCQUFVdFEsTUFBVixFQUFrQitHLFVBQWxCLEVBQThCSixVQUE5QixFQUEwQztBQUNoRCxzQkFBSTRKLGFBQUosRUFDRUMsY0FERixFQUVFOVEsR0FGRjs7QUFJQTZRLGtDQUFnQjNRLEdBQUc2USxJQUFILENBQVFDLGVBQVIsQ0FBd0IxUSxNQUF4QixFQUFnQzJHLFVBQWhDLEVBQTRDLFdBQTVDLENBQWhCO0FBQ0E7QUFDQSxzQkFBR3FHLFlBQVkzSyxNQUFaLENBQW1Cc08sTUFBbkIsQ0FBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsS0FBbUMsR0FBdEMsRUFBMEM7QUFDeENILHFDQUFpQixvQkFBb0JELGNBQWMsQ0FBZCxDQUFwQixHQUF1QyxPQUF2QyxHQUFpREEsY0FBYyxDQUFkLENBQWpELEdBQW9FLE9BQXBFLEdBQThFQSxjQUFjLENBQWQsQ0FBOUUsR0FBaUcsT0FBakcsR0FBMkdBLGNBQWMsQ0FBZCxDQUEzRyxHQUE4SCxLQUEvSTtBQUVELG1CQUhELE1BSUk7QUFDRkMscUNBQWdCRCxjQUFjLENBQWQsSUFBbUIsR0FBbkIsR0FBeUJBLGNBQWMsQ0FBZCxDQUF6QixHQUE0QyxHQUE1QyxHQUFrREEsY0FBYyxDQUFkLENBQWxELEdBQXFFLEdBQXJFLEdBQTJFQSxjQUFjLENBQWQsQ0FBM0Y7QUFDRDs7QUFFRDdRLHdCQUFNc04sWUFBWXROLEdBQWxCO0FBQ0Esc0JBQU1rUixVQUFVNUQsWUFBWTNLLE1BQVosQ0FBbUJGLE9BQW5CLENBQTJCLFFBQTNCLEtBQXdDLENBQXhDLEdBQTRDLFdBQTVDLEdBQTBELGFBQTFFOztBQUVBLHNCQUFJNkssWUFBWTNLLE1BQWhCLEVBQXdCOztBQUV0QjNDLDJCQUFPLFdBQVdtUixtQkFBbUI3RCxZQUFZM0ssTUFBWixDQUFtQnlPLE9BQW5CLENBQTJCRixPQUEzQixFQUFvQ0osY0FBcEMsQ0FBbkIsQ0FBbEI7QUFDRDs7QUFFRCxzQkFBSWpVLEtBQUt5TSxhQUFMLEtBQXVCOEYsU0FBM0IsRUFBc0M7QUFDcEN2Uyx5QkFBS3lNLGFBQUwsR0FBcUIsRUFBckI7QUFDRDtBQUNELHNCQUFJek0sS0FBS3lNLGFBQUwsQ0FBbUIsaUJBQWlCMkQsT0FBcEMsTUFBaURtQyxTQUFyRCxFQUFnRTtBQUM5RHZTLHlCQUFLeU0sYUFBTCxDQUFtQixpQkFBaUIyRCxPQUFwQyxFQUE2Q29FLEtBQTdDO0FBQ0Q7O0FBRUR4VSx1QkFBS3lNLGFBQUwsQ0FBbUIsaUJBQWlCMkQsT0FBcEMsSUFBK0NuUSxPQUFPQyxJQUFQLENBQVk7QUFDekRpRCx5QkFBS0E7QUFEb0QsbUJBQVosRUFFNUM1QyxJQUY0QyxDQUV2QyxVQUFVb0UsUUFBVixFQUFvQjtBQUMxQix3QkFBSXhELENBQUosRUFDRXNULE1BREYsRUFFRTlDLE9BRkYsRUFHRStDLFNBSEYsRUFJRUMsUUFKRixFQUtFQyxNQUxGLEVBTUVDLE9BTkYsRUFPRUMsS0FQRixFQVFFQyxTQVJGLEVBU0VDLE1BVEYsRUFVRUMsR0FWRjs7QUFZQSwyQkFBT2pWLEtBQUt5TSxhQUFMLENBQW1CLGlCQUFpQjJELE9BQXBDLENBQVA7O0FBRUE7QUFDQSx3QkFBSXpMLFlBQVlBLFNBQVN1USxRQUFyQixJQUFpQ3ZRLFNBQVN1USxRQUFULENBQWtCLENBQWxCLENBQXJDLEVBQTJEO0FBQ3pEO0FBQ0FQLGlDQUFXaFEsU0FBU3VRLFFBQVQsQ0FBa0IsQ0FBbEIsRUFBcUJDLG9CQUFyQixDQUEwQyxNQUExQyxDQUFYO0FBQ0EsMEJBQUlSLFFBQUosRUFBYztBQUNaSSxvQ0FBWSxFQUFaO0FBQ0EsNkJBQUtGLE9BQUwsSUFBZ0JGLFFBQWhCLEVBQTBCO0FBQ3hCLDhCQUFJQSxTQUFTL04sY0FBVCxDQUF3QmlPLE9BQXhCLEtBQW9DRixTQUFTRSxPQUFULENBQXBDLElBQXlERixTQUFTRSxPQUFULEVBQWtCSyxRQUEzRSxJQUF1RlAsU0FBU0UsT0FBVCxFQUFrQkssUUFBbEIsQ0FBMkJ4VCxNQUEzQixHQUFvQyxDQUEvSCxFQUFrSTtBQUNoSXFULHNDQUFVSixTQUFTRSxPQUFULEVBQWtCTyxZQUFsQixDQUErQixJQUEvQixDQUFWLElBQWtEVCxTQUFTRSxPQUFULENBQWxEO0FBQ0E7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQ7QUFDQUQsK0JBQVNqUSxTQUFTdVEsUUFBVCxDQUFrQixDQUFsQixFQUFxQkMsb0JBQXJCLENBQTBDLElBQTFDLENBQVQ7QUFDQSwwQkFBSVAsTUFBSixFQUFZO0FBQ1YsNkJBQUtFLEtBQUwsSUFBY0YsTUFBZCxFQUFzQjtBQUNwQiw4QkFBSUUsS0FBSixFQUFXO0FBQ1QsZ0NBQUlGLE9BQU9oTyxjQUFQLENBQXNCa08sS0FBdEIsS0FBZ0NGLE9BQU9FLEtBQVAsQ0FBcEMsRUFBbUQ7QUFDakQsa0NBQUk7O0FBRUZHLHNDQUFNTCxPQUFPRSxLQUFQLEVBQWNNLFlBQWQsQ0FBMkIsS0FBM0IsQ0FBTjtBQUNBLG9DQUFJTCxhQUFhRSxHQUFiLElBQW9CRixVQUFVRSxHQUFWLENBQXhCLEVBQXdDO0FBQ3RDLHNDQUFJdkUsc0JBQXNCQSxtQkFBbUJrRCxRQUE3QyxFQUF1RDtBQUNyRCx3Q0FBSWxELG1CQUFtQmtELFFBQW5CLENBQTRCeUIsd0JBQWhDLEVBQTBEO0FBQ3hEO0FBQ0EsMENBQUkxUSxRQUFKLEVBQWM7QUFDWnFRLGlEQUFTclEsU0FBUzBFLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVDtBQUNBLDRDQUFJMkwsVUFBVUosT0FBT0UsS0FBUCxFQUFjUSxhQUF4QixJQUF5Q1YsT0FBT0UsS0FBUCxFQUFjUSxhQUFkLENBQTRCRixZQUE1QixDQUF5QyxJQUF6QyxDQUE3QyxFQUE2RjtBQUMzRkosaURBQU9PLFlBQVAsQ0FBb0IsR0FBcEIsRUFBeUIsYUFBekI7QUFDQVAsaURBQU9PLFlBQVAsQ0FBb0IsR0FBcEIsRUFBeUJYLE9BQU9FLEtBQVAsRUFBY1EsYUFBZCxDQUE0QkYsWUFBNUIsQ0FBeUMsSUFBekMsQ0FBekI7QUFDQUwsb0RBQVVFLEdBQVYsRUFBZU8sV0FBZixDQUEyQlIsTUFBM0I7QUFDRDtBQUNGO0FBQ0YscUNBVkQsTUFVTztBQUNMO0FBQ0FELGdEQUFVRSxHQUFWLEVBQWVRLFNBQWYsR0FBMkIsRUFBM0I7QUFDRDtBQUNGO0FBQ0Y7QUFDRiwrQkFyQkQsQ0FxQkUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YvVSx3Q0FBUUMsSUFBUixDQUFhLHVDQUFiO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUFDRjtBQUNEO0FBQ0E2VCwrQkFBUyxJQUFJcFIsR0FBR29SLE1BQUgsQ0FBVWtCLE1BQWQsRUFBVDtBQUNBLDBCQUFJbEIsVUFBVTlQLFFBQWQsRUFBd0I7QUFDdEIsNEJBQUk7QUFDRitQLHNDQUFZRCxPQUFPbUIsWUFBUCxDQUFvQmpSLFFBQXBCLEVBQThCLEVBQUMyTCxtQkFBbUJsRyxVQUFwQixFQUE5QixDQUFaO0FBQ0QseUJBRkQsQ0FFRSxPQUFPc0wsQ0FBUCxFQUFVO0FBQ1YvVSxrQ0FBUUMsSUFBUixDQUFhLHVCQUFiO0FBQ0E7QUFDRDtBQUNGOztBQUVEO0FBQ0EsMEJBQUk4VCxhQUFhQSxVQUFVaFQsTUFBVixHQUFtQixDQUFwQyxFQUF1QztBQUNyQyw2QkFBS1AsSUFBSSxDQUFULEVBQVlBLElBQUl1VCxVQUFVaFQsTUFBMUIsRUFBa0NQLEtBQUssQ0FBdkMsRUFBMEM7O0FBRXhDLDhCQUFJdVQsVUFBVXZULENBQVYsRUFBYTBVLFdBQWIsR0FBMkJDLE9BQTNCLE9BQXlDLE9BQTdDLEVBQXNEO0FBQ3BEcEIsc0NBQVV2VCxDQUFWLEVBQWE0VSxHQUFiLENBQWlCLFVBQWpCLEVBQTZCLE1BQTdCO0FBQ0QsMkJBRkQsTUFFTztBQUNMckIsc0NBQVV2VCxDQUFWLEVBQWE0VSxHQUFiLENBQWlCLFVBQWpCLEVBQTZCLEtBQTdCO0FBQ0Q7QUFDRHJCLG9DQUFVdlQsQ0FBVixFQUFhNFUsR0FBYixDQUFpQixVQUFqQixFQUE2QixLQUE3QjtBQUNBckIsb0NBQVV2VCxDQUFWLEVBQWE0VSxHQUFiLENBQWlCLGNBQWpCLEVBQWlDdkYsWUFBWXdGLFlBQTdDO0FBQ0F0QixvQ0FBVXZULENBQVYsRUFBYTRVLEdBQWIsQ0FBaUIsZUFBakIsRUFBa0N2RixZQUFZeUYsYUFBOUM7QUFDQXZCLG9DQUFVdlQsQ0FBVixFQUFhNFUsR0FBYixDQUFpQixhQUFqQixFQUFnQ3ZGLFlBQVkwRixXQUE1QztBQUNBeEIsb0NBQVV2VCxDQUFWLEVBQWE0VSxHQUFiLENBQWlCLGdCQUFqQixFQUFtQ3ZGLFlBQVkyRixjQUEvQztBQUNBekIsb0NBQVV2VCxDQUFWLEVBQWE0VSxHQUFiLENBQWlCLGFBQWpCLEVBQWdDdkYsWUFBWTRGLFdBQTVDO0FBQ0ExQixvQ0FBVXZULENBQVYsRUFBYTRVLEdBQWIsQ0FBaUIsY0FBakIsRUFBaUN2RixZQUFZblEsSUFBWixDQUFpQm9SLFlBQWxEO0FBQ0FpRCxvQ0FBVXZULENBQVYsRUFBYTRVLEdBQWIsQ0FBaUIsT0FBakIsRUFBMEJ2RixZQUFZblEsSUFBWixDQUFpQm1SLEtBQTNDOztBQUVBLDhCQUFJZCxtQkFBbUJrRCxRQUFuQixDQUE0QnlDLFVBQWhDLEVBQTRDO0FBQzFDO0FBQ0EsZ0NBQUkzQixVQUFVdlQsQ0FBVixFQUFhMFUsV0FBYixHQUEyQkMsT0FBM0IsT0FBeUMsU0FBN0MsRUFBd0Q7QUFDdEQsa0NBQUlRLGVBQWM1QixVQUFVdlQsQ0FBVixFQUFhMFUsV0FBYixHQUEyQlUsZ0JBQTNCLEdBQThDQyxjQUE5QyxFQUFsQjtBQUNBOUIsd0NBQVV2VCxDQUFWLEVBQWFzVixXQUFiLENBQ0UsSUFBSXBULEdBQUdxVCxJQUFILENBQVFDLEtBQVosQ0FBa0JMLFlBQWxCLENBREY7QUFHRCw2QkFMRCxNQUtPLElBQUk1QixVQUFVdlQsQ0FBVixFQUFhMFUsV0FBYixHQUEyQkMsT0FBM0IsT0FBeUMsWUFBN0MsRUFBMkQ7QUFDaEU7QUFDQSxrQ0FBSWMsYUFBYWxDLFVBQVV2VCxDQUFWLEVBQWEwVSxXQUFiLEdBQTJCdkQsU0FBM0IsRUFBakI7QUFDQWdFLDRDQUFjalQsR0FBR0ksTUFBSCxDQUFVcUYsU0FBVixDQUFvQjhOLFVBQXBCLENBQWQ7QUFDQWxDLHdDQUFVdlQsQ0FBVixFQUFhc1YsV0FBYixDQUNFLElBQUlwVCxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCTCxXQUFsQixDQURGO0FBR0Q7QUFDRjtBQUNELDhCQUFJNUIsVUFBVXZULENBQVYsRUFBYW9ILEdBQWIsQ0FBaUIsYUFBakIsQ0FBSixFQUFxQztBQUNuQztBQUNBLGdDQUFJbUksbUJBQW1Ca0QsUUFBbkIsQ0FBNEJpRCxlQUFoQyxFQUFpRDtBQUMvQztBQUNELDZCQUZELE1BRU87QUFDTG5DLHdDQUFVdlQsQ0FBVixFQUFhMlYsUUFBYixDQUFzQnhLLElBQUl5SyxJQUFKLENBQVNuVixLQUFULENBQWVvVixXQUFmLENBQTJCdEcsbUJBQW1Cd0IsYUFBOUMsQ0FBdEI7QUFDRDtBQUNGO0FBQ0Y7QUFDRjtBQUVGLHFCQXZHRCxNQXdHSyxJQUFHdk4sWUFBWUEsU0FBU3NTLFFBQXhCLEVBQWlDO0FBQ3BDdkMsa0NBQVksRUFBWjs7QUFEb0MsaURBRTVCd0MsU0FGNEI7QUFHbEMsNEJBQUlyUSxVQUFVbEMsU0FBU3NTLFFBQVQsQ0FBa0JDLFNBQWxCLENBQWQ7O0FBRUEsNEJBQUdyUSxRQUFRNEksSUFBUixJQUFnQixNQUFuQixFQUEwQjtBQUN4Qiw4QkFBRyxDQUFDNUksUUFBUXNRLElBQVosRUFBaUI7QUFBQztBQUNoQjtBQUNEO0FBQ0QsOEJBQUlDLFFBQVEsSUFBSS9ULEdBQUdxVCxJQUFILENBQVFDLEtBQVosQ0FBa0IsQ0FBQzlQLFFBQVF3USxHQUFULEVBQWF4USxRQUFReVEsR0FBckIsQ0FBbEIsRUFBNkNDLFNBQTdDLENBQXVELFdBQXZELEVBQW1FLFdBQW5FLENBQVo7QUFDQTVGLG9DQUFVLElBQUl0TyxHQUFHbVUsT0FBUCxDQUFlO0FBQ3ZCQyxzQ0FBVUw7QUFEYSwyQkFBZixDQUFWO0FBR0F6RixrQ0FBUStGLEtBQVIsQ0FBYzdRLFFBQVFsRixFQUF0QjtBQUNBZ1Esa0NBQVFvRSxHQUFSLENBQVksVUFBWixFQUF3QixNQUF4QjtBQUNELHlCQVZELE1BV0ssSUFBR2xQLFFBQVE0SSxJQUFSLElBQWdCLEtBQW5CLEVBQXlCO0FBQzVCLDhCQUFJa0ksWUFBWSxFQUFoQjs7QUFENEIsdURBRXBCelcsRUFGb0I7QUFHMUIsZ0NBQUkwVyxPQUFPalQsU0FBU3NTLFFBQVQsQ0FBa0JZLElBQWxCLENBQXVCLFVBQVNDLE9BQVQsRUFBaUI7QUFDakQscUNBQU9BLFFBQVFuVyxFQUFSLEtBQWVrRixRQUFRa1IsS0FBUixDQUFjN1csRUFBZCxDQUF0QjtBQUNELDZCQUZVLENBQVg7QUFHQXlXLHNDQUFVN1YsSUFBVixDQUFlLENBQUM4VixLQUFLUCxHQUFOLEVBQVVPLEtBQUtOLEdBQWYsQ0FBZjtBQU4wQjs7QUFFNUIsK0JBQUksSUFBSXBXLEtBQUksQ0FBWixFQUFlQSxLQUFJMkYsUUFBUWtSLEtBQVIsQ0FBY3JXLE1BQWpDLEVBQXlDUixJQUF6QyxFQUE2QztBQUFBLG1DQUFyQ0EsRUFBcUM7QUFLNUM7QUFDRCw4QkFBR3lXLFVBQVUsQ0FBVixFQUFhLENBQWIsS0FBbUJBLFVBQVVBLFVBQVVqVyxNQUFWLEdBQWlCLENBQTNCLEVBQThCLENBQTlCLENBQW5CLElBQXVEaVcsVUFBVSxDQUFWLEVBQWEsQ0FBYixLQUFtQkEsVUFBVUEsVUFBVWpXLE1BQVYsR0FBaUIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FBN0UsRUFBOEc7QUFBRTtBQUM5RyxtQ0FBT2lXLFVBQVVBLFVBQVVqVyxNQUFWLEdBQWlCLENBQTNCLENBQVA7QUFDQWlXLHNDQUFValcsTUFBVixHQUFtQmlXLFVBQVVqVyxNQUFWLEdBQWlCLENBQXBDO0FBQ0EsZ0NBQUlzVyxVQUFVLElBQUkzVSxHQUFHcVQsSUFBSCxDQUFRdUIsT0FBWixDQUFvQixDQUFDTixTQUFELENBQXBCLENBQWQ7QUFDQUssb0NBQVFULFNBQVIsQ0FBa0IsV0FBbEIsRUFBOEIsV0FBOUI7QUFDQSxnQ0FBSTdHLG1CQUFtQmtELFFBQW5CLENBQTRCeUMsVUFBaEMsRUFBNEM7QUFDMUM7QUFDQSxrQ0FBSUMsZ0JBQWMzRSxRQUFRa0UsV0FBUixHQUFzQlUsZ0JBQXRCLEdBQXlDQyxjQUF6QyxFQUFsQjtBQUNBN0Usc0NBQVE4RSxXQUFSLENBQ0UsSUFBSXBULEdBQUdxVCxJQUFILENBQVFDLEtBQVosQ0FBa0JMLGFBQWxCLENBREY7QUFHRDtBQUNEM0Usc0NBQVUsSUFBSXRPLEdBQUdtVSxPQUFQLENBQWU7QUFDdkJDLHdDQUFVTyxPQURhO0FBRXZCclcsa0NBQUlrRixRQUFRbEY7QUFGVyw2QkFBZixDQUFWO0FBSUQsMkJBaEJELE1BaUJJO0FBQUU7QUFDSixnQ0FBSXVXLGFBQWEsSUFBSTdVLEdBQUdxVCxJQUFILENBQVF5QixVQUFaLENBQXVCLENBQUNSLFNBQUQsQ0FBdkIsQ0FBakI7QUFDQU8sdUNBQVdYLFNBQVgsQ0FBcUIsV0FBckIsRUFBaUMsV0FBakM7QUFDQTVGLHNDQUFVLElBQUl0TyxHQUFHbVUsT0FBUCxDQUFlO0FBQ3ZCQyx3Q0FBVVMsVUFEYTtBQUV2QnZXLGtDQUFJa0YsUUFBUWxGO0FBRlcsNkJBQWYsQ0FBVjtBQUlBLGdDQUFJK08sbUJBQW1Ca0QsUUFBbkIsQ0FBNEJ5QyxVQUFoQyxFQUE0QztBQUMxQyxrQ0FBSU8sY0FBYWpGLFFBQVFrRSxXQUFSLEdBQXNCdkQsU0FBdEIsRUFBakI7QUFDQWdFLDRDQUFjalQsR0FBR0ksTUFBSCxDQUFVcUYsU0FBVixDQUFvQjhOLFdBQXBCLENBQWQ7QUFDQWpGLHNDQUFROEUsV0FBUixDQUNFLElBQUlwVCxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCTCxXQUFsQixDQURGO0FBR0Q7QUFFRjtBQUNEM0Usa0NBQVFvRSxHQUFSLENBQVksVUFBWixFQUF3QixLQUF4QjtBQUNEO0FBQ0RwRSxnQ0FBUW9FLEdBQVIsQ0FBWSxVQUFaLEVBQXdCLEtBQXhCO0FBQ0FwRSxnQ0FBUW9FLEdBQVIsQ0FBWSxjQUFaLEVBQTRCdkYsWUFBWXdGLFlBQXhDO0FBQ0FyRSxnQ0FBUW9FLEdBQVIsQ0FBWSxlQUFaLEVBQTZCdkYsWUFBWXlGLGFBQXpDO0FBQ0F0RSxnQ0FBUW9FLEdBQVIsQ0FBWSxhQUFaLEVBQTJCdkYsWUFBWTBGLFdBQXZDO0FBQ0F2RSxnQ0FBUW9FLEdBQVIsQ0FBWSxnQkFBWixFQUE4QnZGLFlBQVkyRixjQUExQztBQUNBeEUsZ0NBQVFvRSxHQUFSLENBQVksYUFBWixFQUEyQnZGLFlBQVk0RixXQUF2QztBQUNBekUsZ0NBQVFvRSxHQUFSLENBQVksY0FBWixFQUE0QnZGLFlBQVluUSxJQUFaLENBQWlCb1IsWUFBN0M7QUFDQUUsZ0NBQVFvRSxHQUFSLENBQVksT0FBWixFQUFxQnZGLFlBQVluUSxJQUFaLENBQWlCbVIsS0FBdEM7QUFDQSw2QkFBSSxJQUFJMkYsSUFBUixJQUFnQnRRLFFBQVFzUSxJQUF4QixFQUE2QjtBQUMzQnhGLGtDQUFRb0UsR0FBUixDQUFZb0IsSUFBWixFQUFrQnRRLFFBQVFzUSxJQUFSLENBQWFBLElBQWIsQ0FBbEI7QUFDRDtBQUNEekMsa0NBQVU1UyxJQUFWLENBQWU2UCxPQUFmO0FBdEVrQzs7QUFFcEMsMkJBQUksSUFBSXVGLFlBQVksQ0FBcEIsRUFBdUJBLFlBQVl2UyxTQUFTc1MsUUFBVCxDQUFrQnZWLE1BQXJELEVBQTZEd1YsV0FBN0QsRUFBeUU7QUFBQSx5Q0FBakVBLFNBQWlFOztBQUFBLGlEQUtuRTtBQWlFTDtBQUVGO0FBQ0Qsd0JBQUk7QUFDRnZHLDBDQUFvQnlILFdBQXBCLENBQWdDMUQsU0FBaEM7QUFDRCxxQkFGRCxDQUVFLE9BQU9nQixDQUFQLEVBQVU7QUFDVi9VLDhCQUFRQyxJQUFSLENBQWEsMkVBQWI7QUFDRDtBQUNEO0FBQ0QsbUJBM004QyxDQUEvQyxDQTlCZ0QsQ0F5TzVDO0FBRUwsaUJBNU93QztBQTZPekN5WCwwQkFBVWhWLEdBQUdpVixlQUFILENBQW1CQztBQTdPWSxlQUFyQixDQUF0Qjs7QUFnUEExSCw2QkFBZUYsbUJBQWY7QUFDRCxhQW5QRCxNQW1QTzs7QUFFTCxrQkFBSSxPQUFPdE4sR0FBR29SLE1BQUgsQ0FBVWpFLFlBQVlpRSxNQUF0QixDQUFQLEtBQXlDLFVBQTdDLEVBQXlEOztBQUV2RDtBQUNBNUQsK0JBQWUsSUFBSXhOLEdBQUdFLE1BQUgsQ0FBVXVRLE1BQWQsQ0FBcUI7QUFDbENXLDBCQUFRLElBQUlwUixHQUFHb1IsTUFBSCxDQUFVakUsWUFBWWlFLE1BQXRCLENBQUosRUFEMEI7QUFFbEN0Uix1QkFBS3NOLFlBQVl0TixHQUZpQjtBQUdsQ2lILDhCQUFZLFdBSHNCO0FBSWxDaU8sNEJBQVVoVixHQUFHaVYsZUFBSCxDQUFtQkU7QUFKSyxpQkFBckIsQ0FBZjs7QUFPQSxvQkFBSWhJLFlBQVlvRCxRQUFaLElBQXdCcEQsWUFBWW9ELFFBQVosQ0FBcUI2RSxPQUFyQixLQUFpQyxJQUE3RCxFQUFtRTtBQUNqRSxzQkFBSXpZLEtBQUt5TSxhQUFMLEtBQXVCOEYsU0FBM0IsRUFBc0M7QUFDcEN2Uyx5QkFBS3lNLGFBQUwsR0FBcUIsRUFBckI7QUFDRDs7QUFFRHdFLG9DQUFtQixPQUFPVCxZQUFZb0QsUUFBWixDQUFxQjhFLFFBQTVCLEtBQXlDLFFBQTFDLEdBQXNEbEksWUFBWW9ELFFBQVosQ0FBcUI4RSxRQUEzRSxHQUFzRixLQUF4RztBQUNBOzs7Ozs7QUFNQTtBQUNBeEgsa0NBQWdCeUgsaUJBQWhCLEdBQW9DLEtBQXBDO0FBQ0F6SCxrQ0FBZ0IwSCxjQUFoQixHQUFpQyxFQUFqQztBQUNBMUgsa0NBQWdCMkgsV0FBaEIsR0FBOEIsRUFBOUI7O0FBRUFoSSwrQkFBYWtGLEdBQWIsQ0FBaUIsaUJBQWpCLEVBQW9DOUUsZUFBcEM7O0FBRUFKLCtCQUFha0YsR0FBYixDQUFpQixpQkFBakIsRUFBb0MsWUFBWTs7QUFFOUMsd0JBQUksQ0FBQ2xGLGFBQWF0SSxHQUFiLENBQWlCLFFBQWpCLENBQUwsRUFBaUM7QUFDL0JzSSxtQ0FBYWlJLGNBQWIsQ0FBNEIsVUFBVW5ILE9BQVYsRUFBbUI7QUFDN0MsNEJBQUlBLFFBQVFwSixHQUFSLENBQVksWUFBWixDQUFKLEVBQStCO0FBQzdCMkksMENBQWdCeUgsaUJBQWhCLEdBQW9DLElBQXBDO0FBQ0F6SCwwQ0FBZ0IwSCxjQUFoQixDQUErQjlXLElBQS9CLENBQW9DNlAsUUFBUXBKLEdBQVIsQ0FBWSxZQUFaLENBQXBDO0FBQ0EySSwwQ0FBZ0IySCxXQUFoQixDQUE0QmxILFFBQVFwSixHQUFSLENBQVksWUFBWixDQUE1QixJQUF5RG9KLE9BQXpEO0FBQ0Q7QUFDRix1QkFORDtBQU9BLDBCQUFJVCxnQkFBZ0J5SCxpQkFBcEIsRUFBdUM7QUFDckM5SCxxQ0FBYWtGLEdBQWIsQ0FBaUIsUUFBakIsRUFBMkIsSUFBM0I7QUFDRDtBQUNGOztBQUVEOVYsMkJBQU9DLElBQVAsQ0FBWTtBQUNWaUQsMkJBQUtzTixZQUFZdE4sR0FEUDtBQUVWNUMsNEJBQU0sY0FBVUYsSUFBVixFQUFnQjs7QUFFcEIsNEJBQUlBLEtBQUswWSxpQkFBVCxFQUE0QjtBQUMxQjtBQUNBOVksaUNBQU8rWSxJQUFQLENBQVkzWSxLQUFLZ1EsUUFBakIsRUFBMkIsVUFBVTFKLEtBQVYsRUFBaUJzUyxXQUFqQixFQUE4QjtBQUN2RCxnQ0FBSUEsWUFBWXhKLElBQVosSUFBb0J3SixZQUFZeEosSUFBWixLQUFxQixTQUE3QyxFQUF3RDtBQUN0RCxrQ0FBSWtDLFVBQVcsSUFBSXRPLEdBQUdvUixNQUFILENBQVVqRSxZQUFZaUUsTUFBdEIsQ0FBSixFQUFELENBQXNDeUUsV0FBdEMsQ0FBa0RELFdBQWxELEVBQStEO0FBQzNFMUksZ0RBQWdCLFdBRDJEO0FBRTNFRCxtREFBbUI7QUFGd0QsK0JBQS9ELENBQWQ7QUFJQSxrQ0FBSWhPLFFBQVF0QyxLQUFLd00sU0FBTCxDQUFleU0sWUFBWTdILFVBQVosQ0FBdUJ6UCxFQUF0QyxDQUFaO0FBQ0Esa0NBQUl3WCxlQUFlRixZQUFZN0gsVUFBWixDQUF1QkMsS0FBMUM7QUFDQS9PLG9DQUFNc08sV0FBTixDQUFrQnZJLFNBQWxCLEdBQThCRyxPQUE5QixDQUFzQyxVQUFTM0IsT0FBVCxFQUFrQkYsS0FBbEIsRUFBeUI4QixLQUF6QixFQUFnQztBQUNwRSxvQ0FBSSxDQUFDekksS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdENkcsWUFBWTdILFVBQVosQ0FBdUJnSSxPQUF2RSxDQUFMLEVBQXNGO0FBQ3BGcFosdUNBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1Da0gsa0JBQW5DLENBQXNELENBQUNKLFlBQVk3SCxVQUFaLENBQXVCZ0ksT0FBeEIsQ0FBdEQsRUFBd0YsRUFBQzdZLE1BQU0sZ0JBQVc7QUFDdEdzRyw4Q0FBUWlRLFFBQVIsQ0FBaUI5VyxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0Q2RyxZQUFZN0gsVUFBWixDQUF1QmdJLE9BQXZFLEVBQWdGMVcsS0FBakc7QUFDRCxxQ0FGcUYsRUFBeEY7QUFHRCxpQ0FKRCxNQUlPO0FBQ0xtRSwwQ0FBUWlRLFFBQVIsQ0FBaUI5VyxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0Q2RyxZQUFZN0gsVUFBWixDQUF1QmdJLE9BQXZFLEVBQWdGMVcsS0FBakc7QUFDRDtBQUNEbUUsd0NBQVF5UyxTQUFSLEdBQW9CUixjQUFwQixDQUFtQyxVQUFTUyxhQUFULEVBQXdCO0FBQ3pEQSxnREFBY3hELEdBQWQsQ0FBa0IsT0FBbEIsRUFBMkJvRCxZQUEzQjtBQUNELGlDQUZEO0FBR0QsK0JBWEQ7QUFZQTdXLG9DQUFNZ04sT0FBTixDQUFjLENBQWQsRUFBaUI0QyxhQUFqQixHQUFpQytHLFlBQVk3SCxVQUFaLENBQXVCZ0ksT0FBeEQ7O0FBRUEsa0NBQUksQ0FBQ3BaLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRDZHLFlBQVk3SCxVQUFaLENBQXVCZ0ksT0FBdkUsQ0FBTCxFQUFzRjtBQUNwRnBaLHFDQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ2tILGtCQUFuQyxDQUFzRCxDQUFDSixZQUFZN0gsVUFBWixDQUF1QmdJLE9BQXhCLENBQXRELEVBQXdGLEVBQUM3WSxNQUFNLGdCQUFXO0FBQ3RHb1IsNENBQVFtRixRQUFSLENBQWlCOVcsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdENkcsWUFBWTdILFVBQVosQ0FBdUJnSSxPQUF2RSxFQUFnRjFXLEtBQWpHO0FBQ0QsbUNBRnFGLEVBQXhGO0FBR0QsK0JBSkQsTUFJTztBQUNMaVAsd0NBQVFtRixRQUFSLENBQWlCOVcsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdENkcsWUFBWTdILFVBQVosQ0FBdUJnSSxPQUF2RSxFQUFnRjFXLEtBQWpHO0FBQ0Q7O0FBRUQsa0NBQUkxQyxLQUFLTCxLQUFMLENBQVd3USxjQUFYLENBQTBCN04sTUFBTVgsRUFBaEMsQ0FBSixFQUF5QztBQUN2QzNCLHFDQUFLd1osU0FBTCxDQUFlbFgsTUFBTVgsRUFBckI7QUFDQTNCLHFDQUFLeVosU0FBTCxDQUFlblgsTUFBTVgsRUFBckI7QUFDRDtBQUNEO0FBQ0Q7QUFDRiwyQkFwQ0Q7QUFxQ0Q7O0FBRUQsNEJBQUl0QixLQUFLZ1EsUUFBVCxFQUFtQjs7QUFFakJhLDBDQUFnQndJLGlCQUFoQixHQUFvQyxFQUFwQztBQUNBeEksMENBQWdCeUksY0FBaEIsR0FBaUMsRUFBakM7O0FBRUExWixpQ0FBTytZLElBQVAsQ0FBWTNZLEtBQUtnUSxRQUFqQixFQUEyQixVQUFVMUosS0FBVixFQUFpQnNTLFdBQWpCLEVBQThCO0FBQ3ZELGdDQUFJQSxZQUFZeEosSUFBWixJQUFvQndKLFlBQVl4SixJQUFaLElBQW9CLFNBQTVDLEVBQXVEO0FBQ3JEeUIsOENBQWdCUyxPQUFoQixHQUEyQixJQUFJdE8sR0FBR29SLE1BQUgsQ0FBVWpFLFlBQVlpRSxNQUF0QixDQUFKLEVBQUQsQ0FBc0N5RSxXQUF0QyxDQUFrREQsV0FBbEQsRUFBK0Q7QUFDdkYxSSxnREFBZ0IsV0FEdUU7QUFFdkZELG1EQUFtQjtBQUZvRSwrQkFBL0QsQ0FBMUI7QUFJQVksOENBQWdCUyxPQUFoQixDQUF3Qm9FLEdBQXhCLENBQTRCLGNBQTVCLEVBQTRDdkYsWUFBWXdGLFlBQXhEO0FBQ0E5RSw4Q0FBZ0JTLE9BQWhCLENBQXdCb0UsR0FBeEIsQ0FBNEIsYUFBNUIsRUFBMkN2RixZQUFZMEYsV0FBdkQ7QUFDQWhGLDhDQUFnQlMsT0FBaEIsQ0FBd0JvRSxHQUF4QixDQUE0QixnQkFBNUIsRUFBOEN2RixZQUFZMkYsY0FBMUQ7QUFDQWpGLDhDQUFnQlMsT0FBaEIsQ0FBd0JvRSxHQUF4QixDQUE0QixhQUE1QixFQUEyQ3ZGLFlBQVk0RixXQUF2RDtBQUNBLGtDQUFJbEYsZ0JBQWdCUyxPQUFoQixDQUF3QnBKLEdBQXhCLENBQTRCLFlBQTVCLENBQUosRUFBK0M7QUFDN0MySSxnREFBZ0J3SSxpQkFBaEIsQ0FBa0M1WCxJQUFsQyxDQUF1Q29QLGdCQUFnQlMsT0FBaEIsQ0FBd0JwSixHQUF4QixDQUE0QixZQUE1QixDQUF2QztBQUNBMkksZ0RBQWdCeUksY0FBaEIsQ0FBK0J6SSxnQkFBZ0JTLE9BQWhCLENBQXdCcEosR0FBeEIsQ0FBNEIsWUFBNUIsQ0FBL0IsSUFBNEUySSxnQkFBZ0JTLE9BQTVGO0FBQ0Q7QUFDRjtBQUNGLDJCQWZEOztBQWlCQTFSLGlDQUFPK1ksSUFBUCxDQUFZOUgsZ0JBQWdCMEgsY0FBNUIsRUFBNEMsVUFBVWpTLEtBQVYsRUFBaUJpVCxVQUFqQixFQUE2QjtBQUN2RSxnQ0FBSTFJLGdCQUFnQndJLGlCQUFoQixDQUFrQzlULE9BQWxDLENBQTBDZ1UsVUFBMUMsS0FBeUQsQ0FBQyxDQUE5RCxFQUFpRTtBQUMvRDtBQUNBLGtDQUFJLE9BQU8xSSxnQkFBZ0IySCxXQUFoQixDQUE0QmUsVUFBNUIsQ0FBUCxLQUFtRCxXQUF2RCxFQUFvRTtBQUNsRS9JLDZDQUFhZ0osYUFBYixDQUEyQjNJLGdCQUFnQjJILFdBQWhCLENBQTRCZSxVQUE1QixDQUEzQjtBQUNBLHVDQUFPMUksZ0JBQWdCMEgsY0FBaEIsQ0FBK0JqUyxLQUEvQixDQUFQO0FBQ0Q7QUFDRjtBQUNGLDJCQVJEOztBQVVBMUcsaUNBQU8rWSxJQUFQLENBQVk5SCxnQkFBZ0J3SSxpQkFBNUIsRUFBK0MsVUFBVS9TLEtBQVYsRUFBaUJpVCxVQUFqQixFQUE2QjtBQUMxRSxnQ0FBSTFJLGdCQUFnQjBILGNBQWhCLENBQStCaFQsT0FBL0IsQ0FBdUNnVSxVQUF2QyxLQUFzRCxDQUFDLENBQTNELEVBQThEO0FBQzVEO0FBQ0ExSSw4Q0FBZ0IwSCxjQUFoQixDQUErQjlXLElBQS9CLENBQW9DOFgsVUFBcEM7QUFDQTFJLDhDQUFnQjJILFdBQWhCLENBQTRCZSxVQUE1QixJQUEwQzFJLGdCQUFnQnlJLGNBQWhCLENBQStCQyxVQUEvQixDQUExQztBQUNBL0ksMkNBQWFpSixVQUFiLENBQXdCNUksZ0JBQWdCeUksY0FBaEIsQ0FBK0JDLFVBQS9CLENBQXhCO0FBQ0Q7QUFDRiwyQkFQRDtBQVFEO0FBRUY7QUF2RlMscUJBQVo7QUF5RkQsbUJBeEdEOztBQTBHQTVaLHVCQUFLTCxLQUFMLENBQVdvYSxnQkFBWCxDQUE0QixhQUFhM0osT0FBekMsSUFBb0Q7QUFDbEQsZ0NBQVlTLGFBQWF0SSxHQUFiLENBQWlCLGlCQUFqQixDQURzQztBQUVsRCxnQ0FBWTBJO0FBRnNDLG1CQUFwRDs7QUFNQTtBQUVEO0FBRUYsZUFqSkQsTUFpSk87QUFDTHRRLHdCQUFRQyxJQUFSLENBQWEsaUJBQWlCNFAsWUFBWWlFLE1BQTdCLEdBQXNDLDBCQUFuRDtBQUNEO0FBQ0Y7O0FBRUQsZ0JBQUlqRSxZQUFZb0QsUUFBWixDQUFxQm9HLE9BQXpCLEVBQWtDOztBQUVoQ2pKLDhCQUFnQixJQUFJMU4sR0FBR0UsTUFBSCxDQUFVMFcsT0FBZCxDQUFzQjtBQUNwQ0MsMEJBQVUsRUFEMEI7QUFFcEM7QUFDQTNXLHdCQUFRc04sWUFINEI7QUFJcENsSSxzQkFBTTZILFlBQVl3RjtBQUprQixlQUF0QixDQUFoQjtBQU1BO0FBQ0EsbUJBQUtoRixlQUFMLEdBQXVCQSxlQUF2Qjs7QUFFQTs7QUFFQUosNEJBQWMsSUFBSXZOLEdBQUdmLEtBQUgsQ0FBUzZYLGVBQWIsQ0FDWixFQUFFM1ksTUFBTSxTQUFSO0FBQ0UrQix3QkFBUXdOLGFBRFY7QUFFRTtBQUNBck8sdUJBQU9zTztBQUhULGVBRFksQ0FBZDtBQVFELGFBckJELE1BcUJPO0FBQ0xKLDRCQUFjaFAsOERBQUtBLENBQUN3WSxjQUFOLENBQXFCdkosWUFBckIsRUFBbUM3USxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0Q1QixZQUFZMEIsYUFBNUQsSUFBNkVsUyxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0Q1QixZQUFZMEIsYUFBNUQsRUFBMkV4UCxLQUF4SixHQUFnSyxJQUFuTSxDQUFkO0FBQ0Q7O0FBRUQ7QUFDQSxnQkFBSThOLFlBQVlvRCxRQUFaLElBQXdCcEQsWUFBWW9ELFFBQVosQ0FBcUJ5RyxXQUFqRCxFQUE4RDs7QUFFNURyYSxtQkFBS3FTLGNBQUwsR0FBc0JyUyxLQUFLcVMsY0FBTCxJQUF1QixFQUE3Qzs7QUFFQXhCLDJCQUFheUosRUFBYixDQUFnQixRQUFoQixFQUEwQixZQUFZOztBQUVwQztBQUNBLHFCQUFLcFosQ0FBTCxJQUFVbEIsS0FBS3FTLGNBQWYsRUFBK0I7QUFDN0Isc0JBQUlyUyxLQUFLcVMsY0FBTCxDQUFvQnpMLGNBQXBCLENBQW1DMUYsQ0FBbkMsQ0FBSixFQUEyQztBQUN6Qyx3QkFBSSxPQUFPbEIsS0FBS0wsS0FBTCxDQUFXd1EsY0FBWCxDQUEwQmpQLENBQTFCLENBQVAsS0FBd0MsV0FBeEMsSUFBdURsQixLQUFLTCxLQUFMLENBQVd3USxjQUFYLENBQTBCLENBQTFCLEtBQWdDLFdBQTNGLEVBQXdHO0FBQ3RHLDZCQUFPblEsS0FBS3FTLGNBQUwsQ0FBb0JuUixDQUFwQixDQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUVEbEIscUJBQUtxUyxjQUFMLENBQW9CakMsT0FBcEIsSUFBK0JTLGFBQWF5QixTQUFiLEVBQS9CLENBWG9DLENBV29CO0FBQ3hEMVEsOEVBQUtBLENBQUMyWSxZQUFOLENBQW1CdmEsS0FBS3FTLGNBQXhCLEVBQXdDclMsS0FBS0osYUFBTCxDQUFtQm9ILEdBQTNEO0FBQ0QsZUFiRDtBQWVEO0FBQ0Q7O0FBRUFtSyxnQ0FBb0JQLFdBQXBCLEVBQWlDSixZQUFZblEsSUFBN0M7QUFDQTJGLG1CQUFPbEUsSUFBUCxDQUFZOE8sV0FBWjtBQUNELFdBcmNELE1BcWNPLElBQUssS0FBS3BFLFNBQUwsQ0FBZTRELE9BQWYsRUFBd0JYLElBQXhCLEtBQWlDLE9BQWxDLElBQStDLEtBQUtqRCxTQUFMLENBQWU0RCxPQUFmLEVBQXdCWCxJQUF4QixLQUFpQyxNQUFwRixFQUE2RjtBQUNsRyxnQkFBSStLLGVBQWUsS0FBS2hPLFNBQUwsQ0FBZTRELE9BQWYsRUFBd0JkLE9BQTNDO0FBQ0FrQiwwQkFBY2dLLGFBQWEsQ0FBYixDQUFkO0FBQ0EsZ0JBQUloSyxlQUFlQSxZQUFZblEsSUFBWixDQUFpQitRLFVBQWhDLElBQThDWixZQUFZblEsSUFBWixDQUFpQitRLFVBQWpCLENBQTRCaEgsVUFBOUUsRUFBMEY7QUFDeEZtRywrQkFBaUJDLFlBQVluUSxJQUFaLENBQWlCK1EsVUFBakIsQ0FBNEJoSCxVQUE3QztBQUNBa0csa0NBQW9CLEtBQUsxUSxhQUFMLENBQW1Cb0gsR0FBbkIsQ0FBdUJDLE9BQXZCLEdBQWlDb0QsYUFBakMsRUFBcEI7QUFDRCxhQUhELE1BR087QUFDTGtHLCtCQUFpQmdDLFNBQWpCO0FBQ0Q7O0FBRUQ7OztBQUdBLGdCQUFJa0ksaUJBQWlCLElBQUlwWCxHQUFHb1IsTUFBSCxDQUFVK0YsYUFBYXRaLENBQWIsRUFBZ0J1VCxNQUExQixDQUFKLENBQXNDLEVBQXRDLEVBQTBDbUIsWUFBMUMsQ0FBdUQ0RSxhQUFhdFosQ0FBYixFQUFnQmIsSUFBdkUsRUFBNkU7QUFDaEdpUSxpQ0FBbUJBLGlCQUQ2RTtBQUVoR0MsOEJBQWdCQTtBQUZnRixhQUE3RSxFQUdsQixDQUhrQixDQUFyQjtBQUlBa0ssMkJBQWUxRSxHQUFmLENBQW1CLGNBQW5CLEVBQW1DdkYsWUFBWXdGLFlBQS9DO0FBQ0F5RSwyQkFBZTFFLEdBQWYsQ0FBbUIsZUFBbkIsRUFBb0N2RixZQUFZeUYsYUFBaEQ7QUFDQXdFLDJCQUFlMUUsR0FBZixDQUFtQixhQUFuQixFQUFrQ3ZGLFlBQVkwRixXQUE5QztBQUNBdUUsMkJBQWUxRSxHQUFmLENBQW1CLGdCQUFuQixFQUFxQ3ZGLFlBQVkyRixjQUFqRDtBQUNBc0UsMkJBQWUxRSxHQUFmLENBQW1CLGFBQW5CLEVBQWtDdkYsWUFBWTRGLFdBQTlDO0FBQ0FxRSwyQkFBZTFFLEdBQWYsQ0FBbUIsT0FBbkIsRUFBNEJ5RSxhQUFhdFosQ0FBYixFQUFnQmIsSUFBaEIsQ0FBcUIrUSxVQUFyQixDQUFnQ0MsS0FBNUQ7QUFDQW9KLDJCQUFlMUUsR0FBZixDQUFtQixjQUFuQixFQUFtQ3ZGLFlBQVlpQixZQUEvQztBQUNBQyw0QkFBZ0I1UCxJQUFoQixDQUFxQjJZLGNBQXJCOztBQUdBLGdCQUFHdlosSUFBRSxDQUFGLEtBQVEsS0FBS3NMLFNBQUwsQ0FBZTRELE9BQWYsRUFBd0JkLE9BQXhCLENBQWdDNU4sTUFBM0MsRUFBa0Q7QUFDaERtUCw2QkFBZSxJQUFJeE4sR0FBR0UsTUFBSCxDQUFVdVEsTUFBZCxDQUFxQjtBQUNsQ3pELDBCQUFVcUIsZUFEd0I7QUFFbEN0SCw0QkFBWSxXQUZzQjtBQUdsQ3FLLHdCQUFRLElBQUlwUixHQUFHb1IsTUFBSCxDQUFVaUcsT0FBZDs7QUFIMEIsZUFBckIsQ0FBZjtBQU1BLGtCQUFJbEssZUFBZUEsWUFBWW9ELFFBQTNCLElBQXVDcEQsWUFBWW9ELFFBQVosQ0FBcUJvRyxPQUFoRSxFQUF5RTtBQUN2RWpKLGdDQUFnQixJQUFJMU4sR0FBR0UsTUFBSCxDQUFVMFcsT0FBZCxDQUFzQjtBQUNwQ0MsNEJBQVUsRUFEMEI7QUFFcEN2Uix3QkFBTTZILFlBQVl3RixZQUZrQjs7QUFJcEM7QUFDQXpTLDBCQUFRc047QUFMNEIsaUJBQXRCLENBQWhCO0FBT0E7O0FBRUFELDhCQUFjLElBQUl2TixHQUFHZixLQUFILENBQVM2WCxlQUFiLENBQ1osRUFBRTNZLE1BQU0sU0FBUjtBQUNFK0IsMEJBQVF3TixhQURWO0FBRUU7QUFDQXJPLHlCQUFPc087QUFIVCxpQkFEWSxDQUFkO0FBT0QsZUFqQkQsTUFpQk87QUFDTEosOEJBQWNoUCw4REFBS0EsQ0FBQ3dZLGNBQU4sQ0FBcUJ2SixZQUFyQixFQUFtQ0wsZUFBZXhRLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRDVCLFlBQVkwQixhQUE1RCxDQUFmLEdBQTRGbFMsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdENUIsWUFBWTBCLGFBQTVELEVBQTJFeFAsS0FBdkssR0FBK0ssSUFBbE4sQ0FBZDtBQUNEO0FBQ0RzRCxxQkFBT2xFLElBQVAsQ0FBWThPLFdBQVo7QUFDRDtBQUNEO0FBQ0QsV0F6RE0sTUF5REE7QUFDTCxnQkFBSSxLQUFLcEUsU0FBTCxDQUFlNEQsT0FBZixFQUF3QmQsT0FBeEIsQ0FBZ0M1TixNQUFoQyxHQUF5QyxDQUE3QyxFQUFnRDtBQUM5QztBQUNBO0FBQ0E7QUFDQSxrQkFBSThPLGVBQWdCLE9BQU9uTixHQUFHb1IsTUFBSCxDQUFVakUsWUFBWWlFLE1BQXRCLENBQVAsS0FBeUMsVUFBN0QsRUFBMEU7QUFDeEUsb0JBQUlqRSxZQUFZblEsSUFBWixDQUFpQitRLFVBQWpCLElBQStCWixZQUFZblEsSUFBWixDQUFpQitRLFVBQWpCLENBQTRCaEgsVUFBL0QsRUFBMkU7QUFDekVtRyxtQ0FBaUJDLFlBQVluUSxJQUFaLENBQWlCK1EsVUFBakIsQ0FBNEJoSCxVQUE3QztBQUNBa0csc0NBQW9CLEtBQUsxUSxhQUFMLENBQW1Cb0gsR0FBbkIsQ0FBdUJDLE9BQXZCLEdBQWlDb0QsYUFBakMsRUFBcEI7QUFDRCxpQkFIRCxNQUdPO0FBQ0xrRyxtQ0FBaUJnQyxTQUFqQjtBQUNEOztBQUVEbEMsMkJBQVksSUFBSWhOLEdBQUdvUixNQUFILENBQVVqRSxZQUFZaUUsTUFBdEIsQ0FBSixDQUFrQyxFQUFsQyxDQUFELENBQXdDbUIsWUFBeEMsQ0FBcURwRixZQUFZblEsSUFBakUsRUFBdUU7QUFDaEZpUSxxQ0FBbUJBLGlCQUQ2RDtBQUVoRkMsa0NBQWdCQTtBQUZnRSxpQkFBdkUsQ0FBWDs7QUFLQSxvQkFBSW9LLGdCQUFnQixFQUFwQjtBQUNBLG9CQUFJQyxtQkFBbUIsRUFBdkI7QUFDQSxxQkFBSyxJQUFJelosSUFBSSxDQUFiLEVBQWdCQSxJQUFJa1AsU0FBUzNPLE1BQTdCLEVBQXFDUCxLQUFLLENBQTFDLEVBQTZDO0FBQzNDLHNCQUFJa1AsU0FBU2xQLENBQVQsRUFBWW9ILEdBQVosQ0FBZ0IsU0FBaEIsQ0FBSixFQUFnQztBQUM5Qix3QkFBSXZJLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRC9CLFNBQVNsUCxDQUFULEVBQVlvSCxHQUFaLENBQWdCLFNBQWhCLENBQWhELEtBQStFdkksS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEL0IsU0FBU2xQLENBQVQsRUFBWW9ILEdBQVosQ0FBZ0IsU0FBaEIsQ0FBaEQsRUFBNEU3RixLQUEvSixFQUFzSztBQUNwSzJOLCtCQUFTbFAsQ0FBVCxFQUFZMlYsUUFBWixDQUFxQjlXLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRC9CLFNBQVNsUCxDQUFULEVBQVlvSCxHQUFaLENBQWdCLFNBQWhCLENBQWhELEVBQTRFN0YsS0FBakc7QUFDRCxxQkFGRCxNQUVPO0FBQ0xpWSxvQ0FBYzdZLElBQWQsQ0FBbUJ1TyxTQUFTbFAsQ0FBVCxFQUFZb0gsR0FBWixDQUFnQixTQUFoQixDQUFuQjtBQUNBcVMsdUNBQWlCOVksSUFBakIsQ0FBc0J1TyxTQUFTbFAsQ0FBVCxDQUF0QjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRDJQLDhCQUFjOVEsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdENUIsWUFBWTBCLGFBQTVELEtBQThFbFMsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdENUIsWUFBWTBCLGFBQTVELEVBQTJFeFAsS0FBdks7O0FBRUEsb0JBQUlpWSxjQUFjalosTUFBZCxHQUF1QixDQUEzQixFQUE4QjtBQUM1QjtBQUNELGlCQUZELE1BRU87QUFDTG1QLGlDQUFlLElBQUl4TixHQUFHRSxNQUFILENBQVV1USxNQUFkLENBQXFCO0FBQ2xDekQsOEJBQVVBLFFBRHdCO0FBRWxDakcsZ0NBQVksV0FGc0I7QUFHbENxSyw0QkFBUSxJQUFJcFIsR0FBR29SLE1BQUgsQ0FBVWlHLE9BQWQ7QUFIMEIsbUJBQXJCLENBQWY7QUFLQTNKLGtDQUFnQixJQUFJMU4sR0FBR0UsTUFBSCxDQUFVMFcsT0FBZCxDQUFzQjtBQUNwQ0MsOEJBQVUsRUFEMEI7QUFFcEN2UiwwQkFBTTZILFlBQVl3RixZQUZrQjs7QUFJcEM7QUFDQXpTLDRCQUFRc047QUFMNEIsbUJBQXRCLENBQWhCOztBQVFBRCxnQ0FBY2hQLDhEQUFLQSxDQUFDd1ksY0FBTixDQUFxQnJKLGFBQXJCLEVBQW9DRCxXQUFwQyxDQUFkO0FBQ0Esc0JBQUlOLFlBQVluUSxJQUFaLElBQW9CbVEsWUFBWW5RLElBQVosQ0FBaUIrUSxVQUF6QyxFQUFxRDtBQUNqRCx3QkFBSVosWUFBWW5RLElBQVosQ0FBaUIrUSxVQUFqQixDQUE0QkMsS0FBaEMsRUFBdUM7QUFDbkNULGtDQUFZUyxLQUFaLEdBQW9CYixZQUFZblEsSUFBWixDQUFpQitRLFVBQWpCLENBQTRCQyxLQUFoRDtBQUNIO0FBQ0Qsd0JBQUliLFlBQVluUSxJQUFaLENBQWlCK1EsVUFBakIsQ0FBNEJFLE9BQWhDLEVBQXlDO0FBQ3JDVixrQ0FBWVUsT0FBWixHQUFzQmQsWUFBWW5RLElBQVosQ0FBaUIrUSxVQUFqQixDQUE0QkUsT0FBbEQ7QUFDSDtBQUNELHdCQUFJZCxZQUFZblEsSUFBWixDQUFpQitRLFVBQWpCLENBQTRCSSxLQUFoQyxFQUF1QztBQUNuQ1osa0NBQVlZLEtBQVosR0FBb0JoQixZQUFZblEsSUFBWixDQUFpQitRLFVBQWpCLENBQTRCSSxLQUFoRDtBQUNIO0FBQ0Qsd0JBQUloQixZQUFZblEsSUFBWixDQUFpQitRLFVBQWpCLENBQTRCeUosWUFBaEMsRUFBOEM7QUFDMUNqSyxrQ0FBWWlLLFlBQVosR0FBMkJySyxZQUFZblEsSUFBWixDQUFpQitRLFVBQWpCLENBQTRCeUosWUFBdkQ7QUFDSDtBQUNKO0FBQ0Q3VSx5QkFBT2xFLElBQVAsQ0FBWThPLFdBQVo7QUFFRDtBQUVGLGVBL0RELE1BK0RPO0FBQ0wsb0JBQUlKLFdBQUosRUFBaUI7QUFDZjdQLDBCQUFRQyxJQUFSLENBQWEsaUJBQWlCNFAsWUFBWWlFLE1BQTdCLEdBQXNDLDBCQUFuRDtBQUNELGlCQUZELE1BRU87QUFDTDtBQUNEO0FBQ0Y7QUFDRixhQTFFRCxNQTBFTztBQUNMO0FBQ0F6VSxtQkFBSzhhLFNBQUwsQ0FBZTFLLE9BQWY7QUFDQTtBQUNEO0FBQ0Y7QUFDRjs7QUFLSDtBQUNBaEUscUJBQWEsSUFBSS9JLEdBQUdmLEtBQUgsQ0FBU2dGLEtBQWIsQ0FBbUI7QUFDOUJ0QixrQkFBUUE7QUFEc0IsU0FBbkIsQ0FBYjtBQUdBLGFBQUt3RyxTQUFMLENBQWU0RCxPQUFmLEVBQXdCUSxXQUF4QixHQUFzQ3hFLFVBQXRDO0FBQ0FwTSxhQUFLSixhQUFMLENBQW1Cb0gsR0FBbkIsQ0FBdUIrVCxRQUF2QixDQUFnQzNPLFVBQWhDO0FBQ0E7QUFFRCxPQWh0QkQsTUFpdEJLLElBQUcsS0FBS0ksU0FBTCxDQUFlNEQsT0FBZixFQUF3QjRLLGFBQXhCLElBQXlDLENBQTVDLEVBQThDO0FBQzdDaEssMEJBQWtCLHlCQUFTVyxPQUFULEVBQWtCbkgsVUFBbEIsRUFBNkI7QUFDM0MsY0FBSTRPLE9BQUosRUFDSTFXLEtBREosRUFFSW9QLFVBRkosRUFHSUMsTUFISixFQUlJQyxTQUpKLEVBS0lDLFNBTEo7QUFNQSxjQUFHTixXQUFXQSxRQUFRcEosR0FBUixDQUFZLFVBQVosQ0FBZCxFQUFzQztBQUNsQyxnQkFBRzZRLFVBQVV6SCxRQUFRcEosR0FBUixDQUFZLFVBQVosRUFBd0IsQ0FBeEIsRUFBMkJBLEdBQTNCLENBQStCLGVBQS9CLENBQWIsRUFBNkQ7QUFDekQsa0JBQUd2SSxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0RnSCxPQUFoRCxLQUE0RHBaLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRGdILE9BQWhELEVBQXlEMVcsS0FBeEgsRUFBOEg7QUFDMUhBLHdCQUFRMUMsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEZ0gsT0FBaEQsRUFBeUQxVyxLQUF6RCxDQUErRGlQLFFBQVFwSixHQUFSLENBQVksVUFBWixFQUF3QixDQUF4QixDQUEvRCxFQUEwRmlDLFVBQTFGLENBQVI7QUFDSDtBQUNKO0FBQ0QsZ0JBQUcsQ0FBQzlILEtBQUosRUFBVTtBQUNOQSxzQkFBUSxFQUFSO0FBQ0g7QUFDRCxnQkFBR2lQLFFBQVFwSixHQUFSLENBQVksVUFBWixFQUF3QjdHLE1BQXhCLEdBQWlDLENBQXBDLEVBQXNDO0FBQ2xDO0FBQ0FvUSwyQkFBYSxDQUFDLENBQUQsRUFBSSxDQUFKLENBQWI7QUFDQSxrQkFBSXBQLE1BQU0sQ0FBTixDQUFKLEVBQWM7QUFDVixvQkFBSSxPQUFPQSxNQUFNLENBQU4sRUFBUytQLFFBQVQsR0FBb0JDLFNBQTNCLEtBQXlDLFVBQTdDLEVBQXlEO0FBQ3JEWCwyQkFBU3hRLFNBQVNtQixNQUFNLENBQU4sRUFBUytQLFFBQVQsR0FBb0JDLFNBQXBCLEVBQVQsRUFBMEMsRUFBMUMsQ0FBVDtBQUNBLHNCQUFJWCxNQUFKLEVBQVk7QUFDUkQsaUNBQWEsQ0FBQyxDQUFELEVBQUlDLE1BQUosQ0FBYjtBQUNIO0FBQ0osaUJBTEQsTUFLTyxJQUFJLE9BQU9yUCxNQUFNLENBQU4sRUFBUytQLFFBQVQsR0FBb0JFLFNBQTNCLEtBQXlDLFVBQTdDLEVBQXlEO0FBQzVEYiwrQkFBYXBQLE1BQU0sQ0FBTixFQUFTK1AsUUFBVCxHQUFvQkUsU0FBcEIsTUFBbUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFoRDtBQUNIO0FBQ0o7O0FBRURYLDBCQUFZcFEsOERBQUtBLENBQUNnUix3QkFBTixDQUErQixRQUEvQixFQUF3QztBQUNoREMsc0JBQU0sR0FEMEM7QUFFaERDLHVCQUFPO0FBRnlDLGVBQXhDLENBQVo7O0FBS0Esa0JBQUd0QyxZQUFZdUMsaUJBQWYsRUFBa0M7QUFDOUJmLDRCQUFZcFEsOERBQUtBLENBQUNnUix3QkFBTixDQUErQnBDLFlBQVl1QyxpQkFBM0MsRUFBNkQ7QUFDckVGLHdCQUFNLEdBRCtEO0FBRXJFQyx5QkFBTztBQUY4RCxpQkFBN0QsQ0FBWjtBQUlIO0FBQ0Qsa0JBQUduQixRQUFRcEosR0FBUixDQUFZLFVBQVosRUFBd0IsQ0FBeEIsRUFBMkJBLEdBQTNCLENBQStCLG1CQUEvQixDQUFILEVBQXVEO0FBQ25EeUosNEJBQVlwUSw4REFBS0EsQ0FBQ2dSLHdCQUFOLENBQStCakIsUUFBUXBKLEdBQVIsQ0FBWSxVQUFaLEVBQXdCLENBQXhCLEVBQTJCQSxHQUEzQixDQUErQixtQkFBL0IsQ0FBL0IsRUFBbUY7QUFDM0ZzSyx3QkFBTSxHQURxRjtBQUUzRkMseUJBQU87QUFGb0YsaUJBQW5GLENBQVo7QUFJSDtBQUNEYiwwQkFBWSxTQUFaO0FBQ0Esa0JBQUdOLFFBQVFwSixHQUFSLENBQVksVUFBWixFQUF3QixDQUF4QixFQUEyQkEsR0FBM0IsQ0FBK0IsbUJBQS9CLENBQUgsRUFBdUQ7QUFDbkQwSiw0QkFBWXJRLDhEQUFLQSxDQUFDZ1Isd0JBQU4sQ0FBK0JqQixRQUFRcEosR0FBUixDQUFZLFVBQVosRUFBd0IsQ0FBeEIsRUFBMkJBLEdBQTNCLENBQStCLG1CQUEvQixDQUEvQixFQUFtRjtBQUMzRnNLLHdCQUFNLEdBRHFGO0FBRTNGQyx5QkFBTztBQUZvRixpQkFBbkYsQ0FBWjtBQUlIOztBQUVEcFEsb0JBQU1aLElBQU4sQ0FDSSxJQUFJdUIsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNmQyxzQkFBTSxJQUFJN1AsR0FBR1gsS0FBSCxDQUFTeVEsSUFBYixDQUFrQjtBQUNwQkQsd0JBQU0sR0FEYztBQUVwQkUsd0JBQU0saUJBRmM7QUFHcEJDLDJCQUFTLENBQUMsQ0FBRCxHQUFLdkIsV0FBVyxDQUFYLENBSE07QUFJcEJ3QiwyQkFBUyxDQUFDLENBQUQsR0FBS3hCLFdBQVcsQ0FBWCxDQUpNO0FBS3BCeUIsd0JBQU0sSUFBSWxRLEdBQUdYLEtBQUgsQ0FBUzhRLElBQWIsQ0FBa0I7QUFDcEJDLDJCQUFPekI7QUFEYSxtQkFBbEI7QUFMYyxpQkFBbEI7QUFEUyxlQUFuQixDQURKO0FBYUF0UCxvQkFBTVosSUFBTixDQUNJLElBQUl1QixHQUFHWCxLQUFILENBQVN1USxLQUFiLENBQW1CO0FBQ2ZDLHNCQUFNLElBQUk3UCxHQUFHWCxLQUFILENBQVN5USxJQUFiLENBQWtCO0FBQ3BCRCx3QkFBTXZCLFFBQVFwSixHQUFSLENBQVksVUFBWixFQUF3QjdHLE1BQXhCLENBQStCZ1MsUUFBL0IsRUFEYztBQUVwQkwsMkJBQVMsQ0FBQyxDQUFELEdBQUt2QixXQUFXLENBQVgsQ0FGTTtBQUdwQndCLDJCQUFTLENBQUMsQ0FBRCxHQUFLeEIsV0FBVyxDQUFYLENBQUwsR0FBcUIsQ0FIVjtBQUlwQnlCLHdCQUFNLElBQUlsUSxHQUFHWCxLQUFILENBQVM4USxJQUFiLENBQWtCO0FBQ3BCQywyQkFBT3hCO0FBRGEsbUJBQWxCO0FBSmMsaUJBQWxCO0FBRFMsZUFBbkIsQ0FESjtBQVlIO0FBRUo7O0FBRUQsY0FBR3ZQLEtBQUgsRUFBUztBQUNMLG1CQUFPQSxLQUFQO0FBQ0g7QUFDSixTQXZGRDtBQXdGQWlPLDhCQUFzQixJQUFJdE4sR0FBR0UsTUFBSCxDQUFVdVEsTUFBZCxDQUFxQjtBQUN2Q0Msa0JBQVEsZ0JBQVV0USxNQUFWLEVBQWtCK0csVUFBbEIsRUFBOEJKLFVBQTlCLEVBQTBDO0FBQzlDLGdCQUFJNEosYUFBSixFQUNJQyxjQURKLEVBRUk5USxHQUZKO0FBR0FuRCxpQkFBS0osYUFBTCxDQUFtQmlCLE9BQW5CLENBQTJCb2EsSUFBM0I7QUFDQWpILDRCQUFnQjNRLEdBQUc2USxJQUFILENBQVFDLGVBQVIsQ0FBd0IxUSxNQUF4QixFQUFnQzJHLFVBQWhDLEVBQTRDLFdBQTVDLENBQWhCO0FBQ0E2Siw2QkFBaUJELGNBQWMsQ0FBZCxJQUFpQixHQUFqQixHQUFxQkEsY0FBYyxDQUFkLENBQXJCLEdBQXNDLEdBQXRDLEdBQTBDQSxjQUFjLENBQWQsQ0FBMUMsR0FBMkQsR0FBM0QsR0FBK0RBLGNBQWMsQ0FBZCxDQUFoRjtBQUNBLGdCQUFJaFUsS0FBS3lNLGFBQUwsS0FBdUI4RixTQUEzQixFQUFzQztBQUNsQ3ZTLG1CQUFLeU0sYUFBTCxHQUFxQixFQUFyQjtBQUNIO0FBQ0QsZ0JBQUl6TSxLQUFLeU0sYUFBTCxDQUFtQixxQkFBcUIyRCxPQUF4QyxNQUFxRG1DLFNBQXpELEVBQW9FO0FBQ2hFdlMsbUJBQUt5TSxhQUFMLENBQW1CLHFCQUFxQjJELE9BQXhDLEVBQWlEb0UsS0FBakQ7QUFDSDtBQUNELGdCQUFHLENBQUN4VSxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0RwUyxLQUFLd00sU0FBTCxDQUFlNEQsT0FBZixFQUF3QjhLLFFBQXhFLENBQUosRUFBc0Y7QUFDbEZsYixtQkFBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNrSCxrQkFBbkMsQ0FBc0QsQ0FBQ3JaLEtBQUt3TSxTQUFMLENBQWU0RCxPQUFmLEVBQXdCOEssUUFBekIsQ0FBdEQsRUFBMEYsRUFBQzNhLE1BQU0sZ0JBQVcsQ0FBRSxDQUFwQixFQUExRjtBQUNIOztBQUVEUCxpQkFBS3lNLGFBQUwsQ0FBbUIscUJBQXFCMkQsT0FBeEMsSUFBbURuUSxPQUFPQyxJQUFQLENBQVk7QUFDM0RpRCxtQkFBS25ELEtBQUtMLEtBQUwsQ0FBV3diLHdCQUFYLEdBQXNDLEdBQXRDLEdBQTRDbmIsS0FBS3dNLFNBQUwsQ0FBZTRELE9BQWYsRUFBd0J6TyxFQUFwRSxHQUF3RSxHQUF4RSxHQUE0RXNTO0FBRHRCLGFBQVosRUFFaEQxVCxJQUZnRCxDQUUxQyxVQUFVRixJQUFWLEVBQWU7QUFDcEIsa0JBQUdBLEtBQUtxQixNQUFMLEdBQWMsQ0FBZCxJQUFtQixDQUFDZ1EsZUFBdkIsRUFBdUM7QUFDbkNBLGtDQUFrQixFQUFsQjtBQUNIO0FBQ0Qsa0JBQUlwUCxRQUFRdEMsS0FBS3dNLFNBQUwsQ0FBZTRELE9BQWYsQ0FBWjtBQUNBZ0wsd0JBQ0ksS0FBSSxJQUFJbGEsTUFBSSxDQUFaLEVBQWVBLE1BQUliLEtBQUtxQixNQUF4QixFQUFnQ1IsS0FBaEMsRUFBb0M7QUFDaENzUCw4QkFBY25RLEtBQUthLEdBQUwsQ0FBZDtBQUNBLHFCQUFJLElBQUlDLEtBQUksQ0FBWixFQUFlQSxLQUFJdVEsZ0JBQWdCaFEsTUFBbkMsRUFBMkNQLElBQTNDLEVBQStDO0FBQzNDLHNCQUFHcVAsWUFBWTdPLEVBQVosS0FBbUIrUCxnQkFBZ0J2USxFQUFoQixFQUFtQlEsRUFBekMsRUFBNkMsU0FBU3laLFFBQVQ7QUFDaEQ7QUFDRCxvQkFBSUMsbUJBQW1CaFksR0FBRzZRLElBQUgsQ0FBUXFELFNBQVIsQ0FBa0IsQ0FBQytELFdBQVc5SyxZQUFZLE1BQVosQ0FBWCxDQUFELEVBQWtDOEssV0FBVzlLLFlBQVksTUFBWixDQUFYLENBQWxDLENBQWxCLEVBQXNGLFdBQXRGLEVBQW1HLFdBQW5HLENBQXZCO0FBQ0Esb0JBQUk0RyxRQUFRLElBQUkvVCxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCMEUsZ0JBQWxCLENBQVo7QUFDQVosaUNBQWlCLElBQUlwWCxHQUFHbVUsT0FBUCxDQUFlSixLQUFmLENBQWpCO0FBQ0FxRCwrQkFBZS9DLEtBQWYsQ0FBcUJsSCxZQUFZN08sRUFBakM7QUFDQThZLCtCQUFlMUUsR0FBZixDQUFtQixjQUFuQixFQUFtQ3pULE1BQU0wWCxPQUFOLENBQWNyUixJQUFqRDtBQUNBOFIsK0JBQWUxRSxHQUFmLENBQW1CLGVBQW5CLEVBQW9DelQsTUFBTTBYLE9BQU4sQ0FBYzNJLEtBQWxEO0FBQ0FvSiwrQkFBZTFFLEdBQWYsQ0FBbUIsbUJBQW5CLEVBQXdDelQsTUFBTTBYLE9BQU4sQ0FBY2hJLFNBQXREO0FBQ0F5SSwrQkFBZTFFLEdBQWYsQ0FBbUIsbUJBQW5CLEVBQXdDelQsTUFBTTBYLE9BQU4sQ0FBYy9ILFNBQXREO0FBQ0F3SSwrQkFBZTFFLEdBQWYsQ0FBbUIsYUFBbkIsRUFBa0N6VCxNQUFNNFQsV0FBeEM7QUFDQXVFLCtCQUFlMUUsR0FBZixDQUFtQixnQkFBbkIsRUFBcUN6VCxNQUFNNlQsY0FBM0M7QUFDQXNFLCtCQUFlMUUsR0FBZixDQUFtQixhQUFuQixFQUFrQ3pULE1BQU04VCxXQUF4QztBQUNBLG9CQUFJL0UsUUFBUWIsWUFBWSxPQUFaLElBQXVCQSxZQUFZLE9BQVosQ0FBdkIsR0FBOEMzTSxFQUFFSCxNQUFGLENBQVMsRUFBVCxFQUFZcEIsTUFBTStPLEtBQWxCLENBQTFEO0FBQ0Esb0JBQUdBLFNBQVNBLE1BQU0vQixPQUFmLElBQTBCK0IsTUFBTS9CLE9BQU4sQ0FBY2lNLE1BQXhDLElBQWtEbEssTUFBTS9CLE9BQU4sQ0FBY2lNLE1BQWQsQ0FBcUIsUUFBckIsQ0FBckQsRUFBb0Y7QUFDbEZsSyx3QkFBTS9CLE9BQU4sR0FBZ0IrQixNQUFNL0IsT0FBTixDQUFjaUYsT0FBZCxDQUFzQixRQUF0QixFQUErQi9ELFlBQVksSUFBWixDQUEvQixDQUFoQjtBQUNEO0FBQ0Qsb0JBQUdBLFlBQVksT0FBWixDQUFILEVBQXdCO0FBQ25CaUssaUNBQWUxRSxHQUFmLENBQW1CLE9BQW5CLEVBQTJCdkYsWUFBWSxPQUFaLENBQTNCO0FBQ0o7QUFDRCxvQkFBR0EsWUFBWSxTQUFaLENBQUgsRUFBMEI7QUFDdEJpSyxpQ0FBZTFFLEdBQWYsQ0FBbUIsU0FBbkIsRUFBNkJ2RixZQUFZLFNBQVosQ0FBN0I7QUFDSDtBQUNEaUssK0JBQWUxRSxHQUFmLENBQW1CLE9BQW5CLEVBQTRCMUUsS0FBNUI7QUFDQW9KLCtCQUFlMUUsR0FBZixDQUFtQixjQUFuQixFQUFtQ3pULE1BQU1tUCxZQUF6QztBQUNBZ0osK0JBQWUxRSxHQUFmLENBQW1CLEtBQW5CLEVBQTBCdkYsWUFBWSxJQUFaLENBQTFCO0FBQ0Esb0JBQUkwSyxXQUFXMUssWUFBWSxVQUFaLEtBQTJCbE8sTUFBTTRZLFFBQWhEO0FBQ0FULCtCQUFlMUUsR0FBZixDQUFtQixlQUFuQixFQUFvQ21GLFFBQXBDO0FBQ0Esb0JBQUdBLFlBQVlsYixLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0Q4SSxRQUFoRCxDQUFaLElBQXlFbGIsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEOEksUUFBaEQsRUFBMER4WSxLQUF0SSxFQUE0STtBQUN4SStYLGlDQUFlM0QsUUFBZixDQUF3QjlXLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRDhJLFFBQWhELEVBQTBEeFksS0FBbEY7QUFDQWdQLGtDQUFnQjVQLElBQWhCLENBQXFCMlksY0FBckI7QUFDSCxpQkFIRCxNQUlJO0FBQ0Esc0JBQUcsQ0FBQ0csZ0JBQUosRUFBcUI7QUFBQ0EsdUNBQWtCLEVBQWxCO0FBQXNCO0FBQzVDLHNCQUFHLENBQUNELGFBQUosRUFBa0I7QUFBQ0Esb0NBQWdCLEVBQWhCO0FBQW9CO0FBQ3ZDRixpQ0FBZTFFLEdBQWYsQ0FBbUIsU0FBbkIsRUFBNkJtRixRQUE3QjtBQUNBTixtQ0FBaUI5WSxJQUFqQixDQUFzQjJZLGNBQXRCO0FBQ0FFLGdDQUFjTyxRQUFkLElBQTBCQSxRQUExQjtBQUNIO0FBRUo7QUFDTCxrQkFBR1AsYUFBSCxFQUFpQjtBQUNiM2EscUJBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1Da0gsa0JBQW5DLENBQXNEc0IsYUFBdEQsRUFBcUUsRUFBQ3BhLE1BQU0sZ0JBQVc7QUFDL0UseUJBQUlXLElBQUksQ0FBUixFQUFXQSxJQUFJMFosaUJBQWlCbFosTUFBaEMsRUFBd0NSLEdBQXhDLEVBQTRDO0FBQ3hDLDBCQUFJa1ksVUFBU3dCLGlCQUFpQjFaLENBQWpCLEVBQW9CcUgsR0FBcEIsQ0FBd0IsU0FBeEIsQ0FBYjtBQUNBcVMsdUNBQWlCMVosQ0FBakIsRUFBb0I0VixRQUFwQixDQUE2QjlXLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRGdILE9BQWhELEVBQXlEMVcsS0FBdEY7QUFDQWlPLDBDQUFvQm1KLFVBQXBCLENBQStCYyxpQkFBaUIxWixDQUFqQixDQUEvQjtBQUNIO0FBQ0R5WixvQ0FBZ0JwSSxTQUFoQjtBQUNILG1CQVBnRSxFQUFyRTtBQVFIOztBQUVELGtCQUFHbFMsS0FBS3FCLE1BQUwsR0FBYyxDQUFqQixFQUFtQjtBQUNmaVAsb0NBQW9CeUgsV0FBcEIsQ0FBZ0MxRyxlQUFoQztBQUNIO0FBQ0osYUFsRWtELEVBbUU5QzNRLE1BbkU4QyxDQW1FdkMsWUFBWTtBQUNoQmYsbUJBQUtKLGFBQUwsQ0FBbUJpQixPQUFuQixDQUEyQkMsSUFBM0I7QUFDSCxhQXJFOEMsQ0FBbkQ7QUF1RUgsV0F6RnNDO0FBMEZ2Q3VYLG9CQUFVaFYsR0FBR2lWLGVBQUgsQ0FBbUJDO0FBMUZVLFNBQXJCLENBQXRCOztBQTZGQSxZQUFHLEtBQUsvTCxTQUFMLENBQWU0RCxPQUFmLEVBQXdCNEosT0FBM0IsRUFBbUM7QUFDakMsY0FBSTFYLFFBQVF0QyxLQUFLd00sU0FBTCxDQUFlNEQsT0FBZixDQUFaO0FBQ0EsY0FBSXBKLE1BQU1oSCxLQUFLSixhQUFMLENBQW1Cb0gsR0FBN0I7QUFDQSxjQUFJMkcsY0FBYzNHLElBQUlDLE9BQUosR0FBYzJCLE9BQWQsRUFBbEI7QUFDQSxjQUFJNFMsa0JBQWtCLEtBQUtoUCxTQUFMLENBQWU0RCxPQUFmLEVBQXdCNEosT0FBeEIsQ0FBZ0NFLFFBQWhDLElBQTRDLEVBQWxFO0FBQ0EsY0FBSXZNLGVBQWVyTCxNQUFNMFgsT0FBTixDQUFjclIsSUFBakMsRUFBdUM7QUFDckM2Uyw4QkFBa0IsQ0FBbEI7QUFDRDs7QUFFRHpLLDBCQUFnQixJQUFJMU4sR0FBR0UsTUFBSCxDQUFVMFcsT0FBZCxDQUFzQjtBQUNwQ0Msc0JBQVVzQixlQUQwQjtBQUVwQztBQUNBalksb0JBQVFvTjtBQUg0QixXQUF0QixDQUFoQjtBQUtFQyx3QkFBYyxJQUFJdk4sR0FBR2YsS0FBSCxDQUFTNlgsZUFBYixDQUNWLEVBQUUzWSxNQUFNLFNBQVI7QUFDSStCLG9CQUFRd04sYUFEWjtBQUVJO0FBQ0FyTyxtQkFBT3NPO0FBSFgsV0FEVSxDQUFkO0FBTUgsU0FwQkQsTUFxQkk7QUFDQUosd0JBQWMsSUFBSXZOLEdBQUdmLEtBQUgsQ0FBU3dSLE1BQWIsQ0FDVjtBQUNJdFMsa0JBQU0sT0FEVjtBQUVJK0Isb0JBQVFvTjtBQUZaLFdBRFUsQ0FBZDtBQU1IO0FBQ0QzSyxpQkFBU0EsVUFBVSxFQUFuQjtBQUNBQSxlQUFPbEUsSUFBUCxDQUFZOE8sV0FBWjtBQUNGeEUscUJBQWEsSUFBSS9JLEdBQUdmLEtBQUgsQ0FBU2dGLEtBQWIsQ0FBbUI7QUFDNUJ0QixrQkFBUUE7QUFEb0IsU0FBbkIsQ0FBYjtBQUdBLGFBQUt3RyxTQUFMLENBQWU0RCxPQUFmLEVBQXdCUSxXQUF4QixHQUFzQ3hFLFVBQXRDO0FBQ0FwTSxhQUFLSixhQUFMLENBQW1Cb0gsR0FBbkIsQ0FBdUIrVCxRQUF2QixDQUFnQzNPLFVBQWhDO0FBR0QsT0E1TkUsTUE2TkU7QUFDSHBNLGFBQUtKLGFBQUwsQ0FBbUJpQixPQUFuQixDQUEyQm9hLElBQTNCO0FBQ0FoYixlQUFPQyxJQUFQLENBQVk7QUFDVkUsb0JBQVVKLEtBQUtKLGFBQUwsQ0FBbUJTLElBQW5CLENBQXdCQyxLQUF4QixHQUFnQyxPQUFoQyxHQUEwQyxNQUQxQztBQUVWNkMsZUFBS25ELEtBQUtMLEtBQUwsQ0FBVzhiLG9CQUFYLEdBQWtDLEdBQWxDLEdBQXdDemIsS0FBS3dNLFNBQUwsQ0FBZTRELE9BQWYsRUFBd0J6TztBQUYzRCxTQUFaLEVBR0dwQixJQUhILENBR1EsVUFBU0YsSUFBVCxFQUFjO0FBQ2xCLGNBQUljLFVBQUo7QUFBQSxjQUNJdWEsMEJBREo7O0FBR0EsY0FBSXJiLEtBQUtxQixNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7QUFDakJnYSxnQ0FBb0IsRUFBcEI7O0FBRUEsaUJBQUt2YSxJQUFJLENBQVQsRUFBWUEsSUFBSWQsS0FBS3FCLE1BQXJCLEVBQTZCUCxLQUFLLENBQWxDLEVBQXFDOztBQUVqQ25CLG1CQUFLd00sU0FBTCxDQUFlNEQsT0FBZixFQUF3QmQsT0FBeEIsR0FBa0N0UCxLQUFLd00sU0FBTCxDQUFlNEQsT0FBZixFQUF3QmQsT0FBeEIsSUFBbUMsRUFBckU7O0FBRUF0UCxtQkFBS3dNLFNBQUwsQ0FBZTRELE9BQWYsRUFBd0JkLE9BQXhCLENBQWdDeE4sSUFBaEMsQ0FBcUN6QixLQUFLYyxDQUFMLENBQXJDO0FBQ0F1YSxnQ0FBa0I1WixJQUFsQixDQUF1QnpCLEtBQUtjLENBQUwsRUFBUStRLGFBQS9CO0FBRUg7O0FBRURsUyxpQkFBS0wsS0FBTCxDQUFXeU4sbUJBQVgsQ0FBK0I7QUFDM0I3TSxvQkFBTSxnQkFBWTtBQUNkO0FBQ0FQLHFCQUFLMmIsZ0JBQUwsQ0FBc0J2TCxPQUF0QjtBQUNIO0FBSjBCLGFBQS9CO0FBT0g7QUFDSixTQTNCRCxFQTJCR3JQLE1BM0JILENBMkJVLFlBQVk7QUFDbEJmLGVBQUtKLGFBQUwsQ0FBbUJpQixPQUFuQixDQUEyQkMsSUFBM0I7QUFDSCxTQTdCRDtBQThCRDtBQUdKLEtBdHNDSCxDQXNzQ0k7O0FBdHNDSjtBQUFBO0FBQUEsOEJBd3NDWThhLFFBeHNDWixFQXdzQ3NCQyxTQXhzQ3RCLEVBd3NDaUM7O0FBRTdCLFVBQUl2WixLQUFKLEVBQ0VwQixDQURGLEVBRUVDLENBRkY7O0FBSUFtQixjQUFRLEtBQUtrSyxTQUFMLENBQWVvUCxRQUFmLENBQVI7QUFDQSxVQUFJLENBQUN0WixLQUFMLEVBQVk7QUFDVjtBQUNBLGVBQU8sS0FBUDtBQUNEOztBQUVEO0FBQ0E7QUFDQSxVQUFJLEtBQUszQyxLQUFMLENBQVd3USxjQUFYLENBQTBCeUwsUUFBMUIsQ0FBSixFQUF5QztBQUN2QztBQUNBLFlBQUksS0FBS2pjLEtBQUwsQ0FBV3dRLGNBQVgsQ0FBMEJ5TCxRQUExQixNQUF3QyxTQUF4QyxJQUFxRHRaLE1BQU1zTyxXQUEvRCxFQUE0RTtBQUMxRTtBQUNBO0FBQ0EsZUFBS2hSLGFBQUwsQ0FBbUJvSCxHQUFuQixDQUF1QjhVLFdBQXZCLENBQW1DeFosTUFBTXNPLFdBQXpDO0FBQ0Q7QUFDRDtBQUNBO0FBQ0EsWUFBSWlMLFNBQUosRUFBZTtBQUNiLGVBQUtsYyxLQUFMLENBQVd3USxjQUFYLENBQTBCeUwsUUFBMUIsSUFBc0MsV0FBdEM7QUFDRCxTQUZELE1BRU87QUFDTCxpQkFBTyxLQUFLamMsS0FBTCxDQUFXd1EsY0FBWCxDQUEwQnlMLFFBQTFCLENBQVA7QUFDRDtBQUNGOztBQUVEOzs7QUFHQTtBQUNBLFVBQUl0WixTQUFTQSxNQUFNa00sU0FBbkIsRUFBOEI7QUFDNUIsYUFBS3ROLElBQUksQ0FBVCxFQUFZQSxJQUFJb0IsTUFBTW9NLE1BQU4sQ0FBYWhOLE1BQTdCLEVBQXFDUixLQUFLLENBQTFDLEVBQTZDO0FBQzNDLGVBQUtzWSxTQUFMLENBQWVsWCxNQUFNb00sTUFBTixDQUFheE4sQ0FBYixFQUFnQlMsRUFBL0I7QUFDRDtBQUNGO0FBQ0QsVUFBR1csTUFBTTJOLFVBQVQsRUFBb0I7QUFDbEJyTyxzRUFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCLEtBQUtqRCxLQUFMLENBQVdvYyxxQkFBbkMsRUFBMERILFFBQTFEO0FBQ0E7QUFDRDtBQUNEdFosWUFBTTJOLFVBQU4sR0FBbUIsSUFBbkI7O0FBRUEsVUFBSSxLQUFLeEQsYUFBTCxJQUFzQixPQUFPLEtBQUtBLGFBQUwsQ0FBbUIsbUJBQW1CbVAsUUFBdEMsQ0FBUCxLQUEyRCxXQUFyRixFQUFrRztBQUNoRyxZQUFJLE9BQU8sS0FBS25QLGFBQUwsQ0FBbUIsbUJBQW1CbVAsUUFBdEMsQ0FBUCxJQUEwRCxRQUE5RCxFQUF3RTtBQUN0RSxjQUFJO0FBQ0YzTyxtQkFBTytPLGFBQVAsQ0FBcUIsS0FBS3ZQLGFBQUwsQ0FBbUIsbUJBQW1CbVAsUUFBdEMsQ0FBckI7QUFDQSxtQkFBTyxLQUFLblAsYUFBTCxDQUFtQixtQkFBbUJtUCxRQUF0QyxDQUFQO0FBQ0QsV0FIRCxDQUdFLE9BQU9sRyxDQUFQLEVBQVUsQ0FFWDtBQUNGO0FBQ0Y7QUFDRDtBQUNBLFdBQUs5VixhQUFMLENBQW1Cb0gsR0FBbkIsQ0FBdUJDLE9BQXZCLEdBQWlDZ1YsU0FBakMsQ0FBMkMsQ0FBQyxLQUFLcmMsYUFBTCxDQUFtQm9ILEdBQW5CLENBQXVCQyxPQUF2QixHQUFpQzZCLFNBQWpDLEdBQTZDLENBQTdDLElBQWdELEtBQWpELEVBQXVELEtBQUtsSixhQUFMLENBQW1Cb0gsR0FBbkIsQ0FBdUJDLE9BQXZCLEdBQWlDNkIsU0FBakMsR0FBNkMsQ0FBN0MsQ0FBdkQsQ0FBM0M7QUFDQTtBQUNBbEgsb0VBQUtBLENBQUNnQixpQkFBTixDQUF3QixLQUFLakQsS0FBTCxDQUFXb2MscUJBQW5DLEVBQTBESCxRQUExRDtBQUNELEtBbndDSCxDQW13Q0k7O0FBbndDSjtBQUFBO0FBQUEsbUNBb3dDaUJBLFFBcHdDakIsRUFvd0MyQk0sUUFwd0MzQixFQW93Q29DO0FBQ2hDLFVBQUk1WixRQUFRLEtBQUtrSyxTQUFMLENBQWVvUCxRQUFmLENBQVo7QUFDQU0saUJBQVdBLFNBQVMzSCxPQUFULENBQWlCcUgsUUFBakIsRUFBMEIsRUFBMUIsQ0FBWDtBQUNBLFVBQUlPLGFBQWE3WixNQUFNc08sV0FBTixDQUFrQnZJLFNBQWxCLEdBQThCK1QsUUFBOUIsR0FBeUNGLFFBQXpDLENBQWpCO0FBQ0FDLGlCQUFXcEcsR0FBWCxDQUFlLFNBQWYsRUFBMEIsS0FBMUI7QUFDRDtBQXp3Q0g7QUFBQTtBQUFBLG1DQTB3Q2lCNkYsUUExd0NqQixFQTB3QzJCTSxRQTF3QzNCLEVBMHdDb0M7QUFDOUIsVUFBSTVaLFFBQVEsS0FBS2tLLFNBQUwsQ0FBZW9QLFFBQWYsQ0FBWjtBQUNBTSxpQkFBV0EsU0FBUzNILE9BQVQsQ0FBaUJxSCxRQUFqQixFQUEwQixFQUExQixDQUFYO0FBQ0EsVUFBSU8sYUFBYTdaLE1BQU1zTyxXQUFOLENBQWtCdkksU0FBbEIsR0FBOEIrVCxRQUE5QixHQUF5Q0YsUUFBekMsQ0FBakI7QUFDQUMsaUJBQVdwRyxHQUFYLENBQWUsU0FBZixFQUEwQixJQUExQjtBQUNIO0FBL3dDSDtBQUFBO0FBQUEsOEJBaXhDWTZGLFFBanhDWixFQWl4Q3NCO0FBQ2xCLFVBQUl0WixLQUFKLEVBQ0UrWixTQURGLEVBRUV0QixRQUZGLEVBR0U3WixDQUhGLEVBSUVDLENBSkYsRUFLRW1iLGFBTEY7O0FBT0FBLHNCQUFnQixLQUFLM2MsS0FBTCxDQUFXcVEseUJBQVgsQ0FBcUM0TCxRQUFyQyxDQUFoQjtBQUNBdFosY0FBUSxLQUFLa0ssU0FBTCxDQUFlb1AsUUFBZixDQUFSOztBQUVBLFVBQUlVLGFBQUosRUFBbUI7QUFDakIsWUFBSSxLQUFLM2MsS0FBTCxDQUFXd1EsY0FBWCxDQUEwQnlMLFFBQTFCLE1BQXdDLFNBQTVDLEVBQXVEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLGNBQUl0WixTQUFTQSxNQUFNc08sV0FBbkIsRUFBZ0M7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQW1LLHVCQUFXLElBQVg7QUFDQXNCLHdCQUFZLEtBQUt6YyxhQUFMLENBQW1Cb0gsR0FBbkIsQ0FBdUJxQixTQUF2QixFQUFaO0FBQ0FnVSxzQkFBVTdULE9BQVYsQ0FBa0IsVUFBVTNCLE9BQVYsRUFBbUJGLEtBQW5CLEVBQTBCOEIsS0FBMUIsRUFBaUM7QUFDakQsa0JBQUk1QixZQUFZdkUsTUFBTXNPLFdBQXRCLEVBQW1DO0FBQ2pDbUssMkJBQVcsS0FBWDtBQUNEO0FBQ0YsYUFKRDtBQUtBLGdCQUFJQSxRQUFKLEVBQWM7QUFDWixrQkFBR3pZLE1BQU1zTyxXQUFOLENBQWtCdkksU0FBbEIsR0FBOEIrVCxRQUE5QixHQUF5QyxDQUF6QyxLQUErQzlaLE1BQU1zTyxXQUFOLENBQWtCdkksU0FBbEIsR0FBOEIrVCxRQUE5QixHQUF5QyxDQUF6QyxFQUE0Qy9LLEtBQTNGLElBQW9HL08sTUFBTXNPLFdBQU4sQ0FBa0J2SSxTQUFsQixHQUE4QitULFFBQTlCLEdBQXlDLENBQXpDLEVBQTRDL0ssS0FBNUMsQ0FBa0RrTCxpQkFBekosRUFBMks7QUFDektqUSxvQkFBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZW1MLFFBQWYsQ0FBd0JDLElBQXhCLENBQTZCLEVBQTdCO0FBQ0FuUSxvQkFBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZXFMLE1BQWYsQ0FBc0JDLFFBQXRCLENBQStCclEsSUFBSXlLLElBQUosQ0FBUzZGLFFBQVQsQ0FBa0JDLEdBQWxCLENBQXNCQyxNQUFyRCxFQUE2REgsUUFBN0QsQ0FBc0VyUSxJQUFJeUssSUFBSixDQUFTNkYsUUFBVCxDQUFrQkMsR0FBbEIsQ0FBc0JFLE9BQTVGO0FBQ0F6USxvQkFBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZXhRLE9BQWYsQ0FBdUJvYSxJQUF2QjtBQUNBLG9CQUFJK0IsYUFBYTFhLE1BQU1zTyxXQUFOLENBQWtCdkksU0FBbEIsR0FBOEIrVCxRQUE5QixHQUF5QyxDQUF6QyxFQUE0Qy9LLEtBQTdEO0FBQ0Esb0JBQUloQixXQUFXL04sTUFBTXNPLFdBQU4sQ0FBa0J2SSxTQUFsQixHQUE4QitULFFBQTlCLEdBQXlDLENBQXpDLEVBQTRDOUMsU0FBNUMsR0FBd0QyRCxXQUF4RCxFQUFmO0FBQ0Esb0JBQUlDLFFBQVE3TSxTQUFTLEdBQVQsRUFBY3dGLFdBQWQsR0FBNEJXLGNBQTVCLEVBQVo7QUFDQSxvQkFBSXdHLFdBQVdHLEtBQVgsS0FBcUIsS0FBekIsRUFBZ0M7QUFDOUIsc0JBQUlDLFdBQVcsRUFBZjtBQUNBQSwyQkFBUy9MLEtBQVQsR0FBaUIyTCxVQUFqQjtBQUNBSSwyQkFBU3pMLE9BQVQsR0FBbUJ0QixTQUFTLEdBQVQsQ0FBbkI7QUFDQStNLDJCQUFTOWEsS0FBVCxHQUFpQkEsTUFBTXNPLFdBQU4sQ0FBa0J2SSxTQUFsQixHQUE4QitULFFBQTlCLEdBQXlDLENBQXpDLENBQWpCO0FBQ0E7QUFDQSxzQkFBSW5QLE9BQU9DLFlBQVAsS0FBd0JxRixTQUF4QixJQUFxQyxRQUFPdEYsT0FBT0MsWUFBUCxDQUFvQm1RLGVBQTNCLE1BQStDLFFBQXhGLEVBQWtHO0FBQ2hHemIsa0ZBQUtBLENBQUNnQixpQkFBTixDQUF3QnFLLE9BQU9DLFlBQVAsQ0FBb0JtUSxlQUE1QyxFQUE2REQsUUFBN0Q7QUFDRDtBQUNELHVCQUFLemQsS0FBTCxDQUFXMmQsUUFBWCxDQUFvQkYsUUFBcEI7QUFDRCxpQkFWRCxNQVVPO0FBQ0wsc0JBQUlwZCxPQUFPLElBQVg7QUFDQUMseUJBQU9DLElBQVAsQ0FBWTtBQUNWRSw4QkFBVSxNQURBO0FBRVYrQyx5QkFBS25ELEtBQUt1ZCxrQkFBTCxHQUEwQixHQUExQixHQUFnQ1AsV0FBVzFOLE9BRnRDO0FBR1YvTywwQkFBTSxjQUFVRixJQUFWLEVBQWdCO0FBQ3BCLDBCQUFJbWQsWUFBWTtBQUNkTCwrQkFBT0gsV0FBV0csS0FESjtBQUVkN04saUNBQVNqUCxLQUFLaVAsT0FGQTtBQUdkK0IsK0JBQU8yTCxXQUFXM0wsS0FISjtBQUlkb00sc0NBQWNULFdBQVdTO0FBSlgsdUJBQWhCOztBQU9BLDBCQUFJTCxXQUFXLEVBQWY7QUFDQUEsK0JBQVMvTCxLQUFULEdBQWlCbU0sU0FBakI7QUFDQUosK0JBQVN6TCxPQUFULEdBQW1CdEIsU0FBUyxHQUFULENBQW5CO0FBQ0ErTSwrQkFBUzlhLEtBQVQsR0FBaUJBLEtBQWpCOztBQUVBO0FBQ0EsMEJBQUkySyxPQUFPQyxZQUFQLEtBQXdCcUYsU0FBeEIsSUFBcUMsUUFBT3RGLE9BQU9DLFlBQVAsQ0FBb0JtUSxlQUEzQixNQUErQyxRQUF4RixFQUFrRztBQUNoR3piLHNGQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0JxSyxPQUFPQyxZQUFQLENBQW9CbVEsZUFBNUMsRUFBNkRELFFBQTdEO0FBQ0Q7O0FBRURwZCwyQkFBS0wsS0FBTCxDQUFXMmQsUUFBWCxDQUFvQkYsUUFBcEI7QUFDRDtBQXRCUyxtQkFBWjtBQXdCRDtBQUNGO0FBQ0QsbUJBQUt4ZCxhQUFMLENBQW1Cb0gsR0FBbkIsQ0FBdUIrVCxRQUF2QixDQUFnQ3pZLE1BQU1zTyxXQUF0QztBQUNEO0FBQ0YsV0E5REQsTUE4RE87QUFDTCxpQkFBSytLLGdCQUFMLENBQXNCQyxRQUF0QjtBQUNEO0FBQ0QsZUFBS2pjLEtBQUwsQ0FBV3dRLGNBQVgsQ0FBMEJ5TCxRQUExQixJQUFzQyxTQUF0QztBQUNELFNBdEVELE1BdUVLO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsVUFBSXRaLFNBQVNBLE1BQU1rTSxTQUFmLElBQTRCOE4sYUFBaEMsRUFBK0M7QUFDN0MsYUFBS3BiLElBQUksQ0FBVCxFQUFZQSxJQUFJb0IsTUFBTW9NLE1BQU4sQ0FBYWhOLE1BQTdCLEVBQXFDUixLQUFLLENBQTFDLEVBQTZDO0FBQzNDLGVBQUt1WSxTQUFMLENBQWVuWCxNQUFNb00sTUFBTixDQUFheE4sQ0FBYixFQUFnQlMsRUFBL0I7QUFDRDtBQUNGOztBQUVELFVBQUlXLFNBQVNnYSxhQUFiLEVBQTRCO0FBQzFCaGEsY0FBTTJOLFVBQU4sR0FBbUIsS0FBbkI7QUFDRDs7QUFFRCxVQUFJLE9BQU8sS0FBS3RRLEtBQUwsQ0FBV29hLGdCQUFYLENBQTRCLGFBQWE2QixRQUF6QyxDQUFQLEtBQThELFdBQWxFLEVBQStFOztBQUU3RSxZQUFJLEtBQUtuUCxhQUFMLElBQXNCLE9BQU8sS0FBS0EsYUFBTCxDQUFtQixtQkFBbUJtUCxRQUF0QyxDQUFQLEtBQTJELFdBQXJGLEVBQWtHO0FBQ2hHLGVBQUtuUCxhQUFMLENBQW1CLG1CQUFtQm1QLFFBQXRDLElBQWtEM08sT0FBT3lRLFdBQVAsQ0FBbUIsS0FBSy9kLEtBQUwsQ0FBV29hLGdCQUFYLENBQTRCLGFBQWE2QixRQUF6QyxFQUFtRCtCLFFBQXRFLEVBQWdGLEtBQUtoZSxLQUFMLENBQVdvYSxnQkFBWCxDQUE0QixhQUFhNkIsUUFBekMsRUFBbURsRCxRQUFuSSxDQUFsRDtBQUNEO0FBRUY7QUFDRDtBQUNBO0FBQ0E5VyxvRUFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCLEtBQUtqRCxLQUFMLENBQVdvYyxxQkFBbkMsRUFBMERILFFBQTFEO0FBQ0QsS0FqNENILENBaTRDSTs7QUFqNENKO0FBQUE7QUFBQSw4QkFtNENZeEwsT0FuNENaLEVBbTRDcUI7O0FBRWpCLFVBQUlwUSxJQUFKLEVBQ0U2RyxPQURGLEVBRUUrVyxjQUZGLEVBR0U1WCxNQUhGLEVBSUU5RSxDQUpGLEVBS0VDLENBTEYsRUFNRXdaLGFBTkYsRUFPRUMsZ0JBUEYsRUFRRXZLLFFBUkYsRUFTRUUsY0FURixFQVVFRCxpQkFWRixFQVdFTyxZQVhGLEVBWUVELFdBWkYsRUFhRUUsV0FiRixFQWNFMUUsVUFkRjs7QUFnQkFwTSxhQUFPLElBQVA7QUFDQTZHLGdCQUFVLEtBQUsyRixTQUFMLENBQWU0RCxPQUFmLENBQVY7O0FBRUE7O0FBRUFwSyxlQUFTLEVBQVQ7QUFDQSxVQUFJYSxRQUFReUksT0FBUixJQUFtQnpJLFFBQVF5SSxPQUFSLENBQWdCNU4sTUFBaEIsR0FBeUIsQ0FBaEQsRUFBbUQ7QUFDakQsYUFBS1IsSUFBSSxDQUFULEVBQVlBLElBQUkyRixRQUFReUksT0FBUixDQUFnQjVOLE1BQWhDLEVBQXdDUixLQUFLLENBQTdDLEVBQWdEOztBQUU5QzBjLDJCQUFpQi9XLFFBQVF5SSxPQUFSLENBQWdCcE8sQ0FBaEIsQ0FBakI7QUFDQSxjQUFJLENBQUMwYyxjQUFMLEVBQXFCO0FBQ25CO0FBQ0Q7QUFDRCxjQUFJLE9BQU92YSxHQUFHb1IsTUFBSCxDQUFVbUosZUFBZW5KLE1BQXpCLENBQVAsS0FBNEMsVUFBaEQsRUFBNEQ7O0FBRTFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBSW1KLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsSUFBa0N3TSxlQUFldmQsSUFBZixDQUFvQitRLFVBQXBCLENBQStCaEgsVUFBckUsRUFBaUY7QUFDL0VtRywrQkFBaUJxTixlQUFldmQsSUFBZixDQUFvQitRLFVBQXBCLENBQStCaEgsVUFBaEQ7QUFDQWtHLGtDQUFvQixLQUFLMVEsYUFBTCxDQUFtQm9ILEdBQW5CLENBQXVCQyxPQUF2QixHQUFpQ29ELGFBQWpDLEVBQXBCO0FBQ0QsYUFIRCxNQUdPO0FBQ0xrRywrQkFBaUJnQyxTQUFqQjtBQUNEOztBQUVELGdCQUFJcUwsZUFBZW5KLE1BQWYsS0FBMEIsUUFBOUIsRUFBd0M7QUFDdEM7QUFDRDtBQUNELGdCQUFJbUosZUFBZXZkLElBQWYsQ0FBb0JvWCxRQUFwQixJQUFnQ21HLGVBQWV2ZCxJQUFmLENBQW9Cb1gsUUFBcEIsQ0FBNkJoSSxJQUE3QixLQUFzQyxRQUExRSxFQUFvRjtBQUNsRjtBQUNBWSx5QkFBVyxFQUFYO0FBQ0Esa0JBQUlzQixVQUFVLElBQUl0TyxHQUFHbVUsT0FBUCxDQUNaLElBQUluVSxHQUFHcVQsSUFBSCxDQUFRbUgsTUFBWixDQUNFeGEsR0FBRzZRLElBQUgsQ0FBUTRKLFVBQVIsQ0FBbUJGLGVBQWV2ZCxJQUFmLENBQW9Cb1gsUUFBcEIsQ0FBNkI1TyxNQUFoRCxDQURGLEVBRUV5UyxXQUFXc0MsZUFBZXZkLElBQWYsQ0FBb0JvWCxRQUFwQixDQUE2QjFGLE1BQXhDLENBRkYsQ0FEWSxDQUFkO0FBS0FKLHNCQUFRb0UsR0FBUixDQUFZLFNBQVosRUFBdUI2SCxlQUFlMUwsYUFBdEM7QUFDQTdCLHVCQUFTdk8sSUFBVCxDQUFjNlAsT0FBZDtBQUNELGFBVkQsTUFVTztBQUNMO0FBQ0F0Qix5QkFBWSxJQUFJaE4sR0FBR29SLE1BQUgsQ0FBVW1KLGVBQWVuSixNQUF6QixDQUFKLENBQXFDLEVBQXJDLENBQUQsQ0FBMkNtQixZQUEzQyxDQUF3RGdJLGVBQWV2ZCxJQUF2RSxFQUE2RTtBQUN0RmlRLG1DQUFtQkEsaUJBRG1FO0FBRXRGQyxnQ0FBZ0JBO0FBRnNFLGVBQTdFLENBQVg7QUFJRDs7QUFFRG9LLDRCQUFnQixFQUFoQjtBQUNBQywrQkFBbUIsRUFBbkI7QUFDQSxpQkFBS3paLElBQUksQ0FBVCxFQUFZQSxJQUFJa1AsU0FBUzNPLE1BQXpCLEVBQWlDUCxLQUFLLENBQXRDLEVBQXlDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBa1AsdUJBQVNsUCxDQUFULEVBQVk0VSxHQUFaLENBQWdCLGdCQUFoQixFQUFrQzZILGVBQWV6SCxjQUFqRDtBQUNBOUYsdUJBQVNsUCxDQUFULEVBQVk0VSxHQUFaLENBQWdCLGFBQWhCLEVBQStCNkgsZUFBZXhILFdBQTlDO0FBQ0Esa0JBQUkvRixTQUFTbFAsQ0FBVCxFQUFZb0gsR0FBWixDQUFnQixTQUFoQixDQUFKLEVBQWdDO0FBQzlCLG9CQUFJdkksS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEL0IsU0FBU2xQLENBQVQsRUFBWW9ILEdBQVosQ0FBZ0IsU0FBaEIsQ0FBaEQsS0FBK0V2SSxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0QvQixTQUFTbFAsQ0FBVCxFQUFZb0gsR0FBWixDQUFnQixTQUFoQixDQUFoRCxFQUE0RTdGLEtBQS9KLEVBQXNLO0FBQ3BLMk4sMkJBQVNsUCxDQUFULEVBQVkyVixRQUFaLENBQXFCOVcsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEL0IsU0FBU2xQLENBQVQsRUFBWW9ILEdBQVosQ0FBZ0IsU0FBaEIsQ0FBaEQsRUFBNEU3RixLQUFqRztBQUNELGlCQUZELE1BRU87QUFDTGlZLGdDQUFjN1ksSUFBZCxDQUFtQnVPLFNBQVNsUCxDQUFULEVBQVlvSCxHQUFaLENBQWdCLFNBQWhCLENBQW5CO0FBQ0FxUyxtQ0FBaUI5WSxJQUFqQixDQUFzQnVPLFNBQVNsUCxDQUFULENBQXRCO0FBQ0Q7QUFDRixlQVBELE1BT08sSUFBSXljLGVBQWUxTCxhQUFuQixFQUFrQztBQUN2QztBQUNBLG9CQUFJbFMsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEd0wsZUFBZTFMLGFBQS9ELEtBQWlGbFMsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEd0wsZUFBZTFMLGFBQS9ELEVBQThFeFAsS0FBbkssRUFBMEs7QUFDeEs7QUFDRCxpQkFGRCxNQUVPO0FBQ0xpWSxnQ0FBYzdZLElBQWQsQ0FBbUI4YixlQUFlMUwsYUFBbEM7QUFDQTBJLG1DQUFpQjlZLElBQWpCLENBQXNCdU8sU0FBU2xQLENBQVQsQ0FBdEI7QUFDQWtQLDJCQUFTbFAsQ0FBVCxFQUFZNFUsR0FBWixDQUFnQixTQUFoQixFQUEyQjZILGVBQWUxTCxhQUExQztBQUNEO0FBQ0Y7QUFDRjs7QUFFRHBCLDBCQUFjOVEsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEd0wsZUFBZTFMLGFBQS9ELEtBQWlGbFMsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEd0wsZUFBZTFMLGFBQS9ELEVBQThFeFAsS0FBN0s7QUFDQSxnQkFBRzFDLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRHdMLGVBQWUxTCxhQUEvRCxLQUFpRmxTLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRHdMLGVBQWUxTCxhQUEvRCxFQUE4RTZMLGVBQWxLLEVBQW1MOztBQUVqTGpOLDRCQUFja04sU0FBUyxTQUFULEVBQW1CLE1BQW5CLEVBQTBCLEtBQTFCLEVBQWdDaGUsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEd0wsZUFBZTFMLGFBQS9ELEVBQThFNkwsZUFBOUcsQ0FBZDtBQUNEO0FBQ0QsZ0JBQUlwRCxjQUFjalosTUFBZCxHQUF1QixDQUEzQixFQUE4QjtBQUM1QixtQkFBSy9CLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1Da0gsa0JBQW5DLENBQXNEc0IsYUFBdEQsRUFBcUU7QUFDbkVwYSxzQkFBTSxnQkFBWTtBQUNoQixzQkFBSTBkLENBQUosRUFDRUMsV0FERixFQUVFQyxPQUZGLEVBR0VDLFlBSEYsRUFJRUMsYUFKRjtBQUtBLHVCQUFLSixJQUFJLENBQVQsRUFBWUEsSUFBSXJELGlCQUFpQmxaLE1BQWpDLEVBQXlDdWMsS0FBSyxDQUE5QyxFQUFpRDtBQUMvQyx3QkFBSWplLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRHdJLGlCQUFpQnFELENBQWpCLEVBQW9CMVYsR0FBcEIsQ0FBd0IsU0FBeEIsQ0FBaEQsQ0FBSixFQUF5RjtBQUN2RnFTLHVDQUFpQnFELENBQWpCLEVBQW9CbkgsUUFBcEIsQ0FBNkI5VyxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0R3SSxpQkFBaUJxRCxDQUFqQixFQUFvQjFWLEdBQXBCLENBQXdCLFNBQXhCLENBQWhELEVBQW9GN0YsS0FBakg7QUFDRDtBQUNGOztBQUVDMmIsa0NBQWdCLElBQUloYixHQUFHRSxNQUFILENBQVV1USxNQUFkLENBQXFCO0FBQ2pDekQsOEJBQVVBLFFBRHVCO0FBRWpDakcsZ0NBQVksV0FGcUI7QUFHakNxSyw0QkFBUSxJQUFJcFIsR0FBR29SLE1BQUgsQ0FBVWlHLE9BQWQ7QUFIeUIsbUJBQXJCLENBQWhCOztBQU1BMEQsaUNBQWV4Yyw4REFBS0EsQ0FBQ3dZLGNBQU4sQ0FBcUJpRSxhQUFyQixFQUFvQ3ZOLFdBQXBDLENBQWY7O0FBRUE7QUFDQSxzQkFBSTlRLEtBQUt3TSxTQUFMLENBQWU0RCxPQUFmLEVBQXdCZ08sWUFBNUIsRUFBMEM7QUFDdENGLGtDQUFjbGUsS0FBS3dNLFNBQUwsQ0FBZTRELE9BQWYsRUFBd0JRLFdBQXRDO0FBQ0F1Tiw4QkFBVUQsWUFBWTdWLFNBQVosRUFBVjs7QUFFQSx3QkFBSXVWLGVBQWV2ZCxJQUFmLElBQXVCdWQsZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUEvQyxFQUEyRDtBQUN2RCwwQkFBSXdNLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JDLEtBQW5DLEVBQTBDO0FBQ3RDK00scUNBQWEvTSxLQUFiLEdBQXFCdU0sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkMsS0FBcEQ7QUFDSDtBQUNELDBCQUFJdU0sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkUsT0FBbkMsRUFBNEM7QUFDeEM4TSxxQ0FBYTlNLE9BQWIsR0FBdUJzTSxlQUFldmQsSUFBZixDQUFvQitRLFVBQXBCLENBQStCRSxPQUF0RDtBQUNIO0FBQ0QsMEJBQUlzTSxlQUFldmQsSUFBZixDQUFvQitRLFVBQXBCLENBQStCSSxLQUFuQyxFQUEwQztBQUN0QzRNLHFDQUFhNU0sS0FBYixHQUFxQm9NLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JJLEtBQXBEO0FBQ0g7QUFDRCwwQkFBSW9NLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JLLFlBQW5DLEVBQWlEO0FBQzdDMk0scUNBQWEzTSxZQUFiLEdBQTRCbU0sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkssWUFBM0Q7QUFDSDtBQUNKOztBQUVEME0sNEJBQVFyYyxJQUFSLENBQWFzYyxZQUFiO0FBQ0FGLGdDQUFZSSxTQUFaLENBQXNCSCxPQUF0QjtBQUNILG1CQXJCRCxNQXFCTztBQUNILHdCQUFJUCxlQUFldmQsSUFBZixJQUF1QnVkLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBL0MsRUFBMkQ7QUFDdkQsMEJBQUl3TSxlQUFldmQsSUFBZixDQUFvQitRLFVBQXBCLENBQStCQyxLQUFuQyxFQUEwQztBQUN0QytNLHFDQUFhL00sS0FBYixHQUFxQnVNLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JDLEtBQXBEO0FBQ0g7QUFDRCwwQkFBSXVNLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JFLE9BQW5DLEVBQTRDO0FBQ3hDOE0scUNBQWE5TSxPQUFiLEdBQXVCc00sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkUsT0FBdEQ7QUFDSDtBQUNELDBCQUFJc00sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkksS0FBbkMsRUFBMEM7QUFDdEM0TSxxQ0FBYTVNLEtBQWIsR0FBcUJvTSxlQUFldmQsSUFBZixDQUFvQitRLFVBQXBCLENBQStCSSxLQUFwRDtBQUNIO0FBQ0QsMEJBQUlvTSxlQUFldmQsSUFBZixDQUFvQitRLFVBQXBCLENBQStCSyxZQUFuQyxFQUFpRDtBQUM3QzJNLHFDQUFhM00sWUFBYixHQUE0Qm1NLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JLLFlBQTNEO0FBQ0g7QUFDSjtBQUNEeU0sa0NBQWMsSUFBSTdhLEdBQUdmLEtBQUgsQ0FBU2dGLEtBQWIsQ0FBbUI7QUFDN0J0Qiw4QkFBUSxDQUFDb1ksWUFBRDtBQURxQixxQkFBbkIsQ0FBZDtBQUdBcGUseUJBQUt3TSxTQUFMLENBQWU0RCxPQUFmLEVBQXdCUSxXQUF4QixHQUFzQ3NOLFdBQXRDO0FBQ0FsZSx5QkFBS0osYUFBTCxDQUFtQm9ILEdBQW5CLENBQXVCK1QsUUFBdkIsQ0FBZ0NtRCxXQUFoQztBQUNIO0FBRUo7QUFqRWtFLGVBQXJFO0FBbUVELGFBcEVELE1Bb0VPO0FBQ0wsa0JBQUdyWCxRQUFRMFgsYUFBWCxFQUEwQjtBQUN0QixxQkFBSyxJQUFJcmQsTUFBSSxDQUFiLEVBQWdCQSxNQUFJbVAsU0FBUzNPLE1BQTdCLEVBQXFDUixLQUFyQyxFQUEwQztBQUN0QzJQLGlDQUFlLElBQUl4TixHQUFHRSxNQUFILENBQVV1USxNQUFkLENBQXFCO0FBQ2hDMUosZ0NBQVksV0FEb0I7QUFFaENxSyw0QkFBUSxJQUFJcFIsR0FBR29SLE1BQUgsQ0FBVWlHLE9BQWQ7QUFGd0IsbUJBQXJCLENBQWY7QUFJQTdKLCtCQUFhaUosVUFBYixDQUF3QnpKLFNBQVNuUCxHQUFULENBQXhCO0FBQ0EwUCxnQ0FBY2hQLDhEQUFLQSxDQUFDd1ksY0FBTixDQUFxQnZKLFlBQXJCLEVBQW1DQyxXQUFuQyxDQUFkO0FBQ0EsdUJBQUksSUFBSTNQLE1BQUksQ0FBWixFQUFlQSxNQUFHMEYsUUFBUTJYLGtCQUFSLENBQTJCQyxLQUEzQixDQUFpQyxHQUFqQyxFQUFzQy9jLE1BQXhELEVBQWdFUCxLQUFoRSxFQUFvRTtBQUNsRXlQLGdDQUFZbUYsR0FBWixDQUFnQmxQLFFBQVEyWCxrQkFBUixDQUEyQkMsS0FBM0IsQ0FBaUMsR0FBakMsRUFBc0N0ZCxHQUF0QyxDQUFoQixFQUF5RGtQLFNBQVNuUCxHQUFULEVBQVlxSCxHQUFaLENBQWdCMUIsUUFBUTJYLGtCQUFSLENBQTJCQyxLQUEzQixDQUFpQyxHQUFqQyxFQUFzQ3RkLEdBQXRDLENBQWhCLENBQXpEO0FBQ0Q7QUFDRDZFLHlCQUFPbEUsSUFBUCxDQUFZOE8sV0FBWjtBQUNBLHNCQUFJZ04sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkMsS0FBbkMsRUFBMEM7QUFDdENULGdDQUFZUyxLQUFaLEdBQW9CdU0sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkMsS0FBbkQ7QUFDSDtBQUNELHNCQUFJdU0sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkUsT0FBbkMsRUFBNEM7QUFDeENWLGdDQUFZVSxPQUFaLEdBQXNCc00sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkUsT0FBckQ7QUFDSDtBQUNELHNCQUFJc00sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkksS0FBbkMsRUFBMEM7QUFDdENaLGdDQUFZWSxLQUFaLEdBQW9Cb00sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkksS0FBbkQ7QUFDSDtBQUNELHNCQUFJb00sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkssWUFBbkMsRUFBaUQ7QUFDN0NiLGdDQUFZYSxZQUFaLEdBQTJCbU0sZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUFwQixDQUErQkssWUFBMUQ7QUFDSDtBQUNKO0FBQ0osZUF6QkQsTUEwQkk7QUFDQVosK0JBQWUsSUFBSXhOLEdBQUdFLE1BQUgsQ0FBVXVRLE1BQWQsQ0FBcUI7QUFDaEN6RCw0QkFBVUEsUUFEc0I7QUFFaENqRyw4QkFBWSxXQUZvQjtBQUdoQ3FLLDBCQUFRLElBQUlwUixHQUFHb1IsTUFBSCxDQUFVaUcsT0FBZDtBQUh3QixpQkFBckIsQ0FBZjtBQUtBOUosOEJBQWNoUCw4REFBS0EsQ0FBQ3dZLGNBQU4sQ0FBcUJ2SixZQUFyQixFQUFtQ0MsV0FBbkMsQ0FBZDs7QUFFQSxvQkFBSThNLGVBQWV2ZCxJQUFmLElBQXVCdWQsZUFBZXZkLElBQWYsQ0FBb0IrUSxVQUEvQyxFQUEyRDtBQUN2RCxzQkFBSXdNLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JDLEtBQW5DLEVBQTBDO0FBQ3RDVCxnQ0FBWVMsS0FBWixHQUFvQnVNLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JDLEtBQW5EO0FBQ0g7QUFDRCxzQkFBSXVNLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JFLE9BQW5DLEVBQTRDO0FBQ3hDVixnQ0FBWVUsT0FBWixHQUFzQnNNLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JFLE9BQXJEO0FBQ0g7QUFDRCxzQkFBSXNNLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JJLEtBQW5DLEVBQTBDO0FBQ3RDWixnQ0FBWVksS0FBWixHQUFvQm9NLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JJLEtBQW5EO0FBQ0g7QUFDRCxzQkFBSW9NLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JLLFlBQW5DLEVBQWlEO0FBQzdDYixnQ0FBWWEsWUFBWixHQUEyQm1NLGVBQWV2ZCxJQUFmLENBQW9CK1EsVUFBcEIsQ0FBK0JLLFlBQTFEO0FBQ0g7QUFDSjs7QUFFRHpMLHVCQUFPbEUsSUFBUCxDQUFZOE8sV0FBWjtBQUNIO0FBQ0E7QUFFRixXQTdMSCxNQStMSztBQUNIalEsb0JBQVFDLElBQVIsQ0FBYSxpQkFBaUJnZCxlQUFlbkosTUFBaEMsR0FBeUMsMEJBQXREO0FBQ0Q7QUFFRjtBQUNGOztBQUVEckksbUJBQWEsSUFBSS9JLEdBQUdmLEtBQUgsQ0FBU2dGLEtBQWIsQ0FBbUI7QUFDOUJ0QixnQkFBUUE7QUFEc0IsT0FBbkIsQ0FBYjs7QUFJQSxXQUFLd0csU0FBTCxDQUFlNEQsT0FBZixFQUF3QlEsV0FBeEIsR0FBc0N4RSxVQUF0QztBQUNBLFdBQUt4TSxhQUFMLENBQW1Cb0gsR0FBbkIsQ0FBdUIrVCxRQUF2QixDQUFnQzNPLFVBQWhDO0FBQ0EsVUFBR0EsV0FBVy9ELFNBQVgsR0FBdUIrVCxRQUF2QixHQUFrQyxDQUFsQyxLQUF3Q2hRLFdBQVcvRCxTQUFYLEdBQXVCK1QsUUFBdkIsR0FBa0MsQ0FBbEMsRUFBcUMvSyxLQUE3RSxJQUFzRmpGLFdBQVcvRCxTQUFYLEdBQXVCK1QsUUFBdkIsR0FBa0MsQ0FBbEMsRUFBcUMvSyxLQUFyQyxDQUEyQ2tMLGlCQUFwSSxFQUFzSjtBQUNwSmpRLFlBQUl5SyxJQUFKLENBQVMxRixLQUFULENBQWVtTCxRQUFmLENBQXdCQyxJQUF4QixDQUE2QixFQUE3QjtBQUNBblEsWUFBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZXFMLE1BQWYsQ0FBc0JDLFFBQXRCLENBQStCclEsSUFBSXlLLElBQUosQ0FBUzZGLFFBQVQsQ0FBa0JDLEdBQWxCLENBQXNCQyxNQUFyRCxFQUE2REgsUUFBN0QsQ0FBc0VyUSxJQUFJeUssSUFBSixDQUFTNkYsUUFBVCxDQUFrQkMsR0FBbEIsQ0FBc0JFLE9BQTVGO0FBQ0F6USxZQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFleFEsT0FBZixDQUF1Qm9hLElBQXZCO0FBQ0EsWUFBSStCLGFBQWE1USxXQUFXL0QsU0FBWCxHQUF1QitULFFBQXZCLEdBQWtDLENBQWxDLEVBQXFDL0ssS0FBdEQ7QUFDQSxZQUFJL08sUUFBUThKLFdBQVcvRCxTQUFYLEdBQXVCK1QsUUFBdkIsR0FBa0MsQ0FBbEMsQ0FBWjtBQUNBLFlBQUljLFFBQVE3TSxTQUFTLEdBQVQsRUFBY3dGLFdBQWQsR0FBNEJXLGNBQTVCLEVBQVo7QUFDQSxZQUFJd0csV0FBV0csS0FBWCxLQUFxQixLQUF6QixFQUFnQztBQUM5QixjQUFJQyxXQUFXLEVBQWY7QUFDQUEsbUJBQVMvTCxLQUFULEdBQWlCMkwsVUFBakI7QUFDQUksbUJBQVN6TCxPQUFULEdBQW1CdEIsU0FBUyxHQUFULENBQW5CO0FBQ0ErTSxtQkFBUzlhLEtBQVQsR0FBaUJBLEtBQWpCO0FBQ0E7QUFDQSxjQUFJMkssT0FBT0MsWUFBUCxLQUF3QnFGLFNBQXhCLElBQXFDLFFBQU90RixPQUFPQyxZQUFQLENBQW9CbVEsZUFBM0IsTUFBK0MsUUFBeEYsRUFBa0c7QUFDaEd6YiwwRUFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCcUssT0FBT0MsWUFBUCxDQUFvQm1RLGVBQTVDLEVBQTZERCxRQUE3RDtBQUNEO0FBQ0RwZCxlQUFLTCxLQUFMLENBQVcyZCxRQUFYLENBQW9CRixRQUFwQjtBQUNELFNBVkQsTUFVTztBQUNMbmQsaUJBQU9DLElBQVAsQ0FBWTtBQUNWRSxzQkFBVSxNQURBO0FBRVYrQyxpQkFBS25ELEtBQUt1ZCxrQkFBTCxHQUEwQixHQUExQixHQUFnQ1AsV0FBVzFOLE9BRnRDO0FBR1YvTyxrQkFBTSxjQUFVRixJQUFWLEVBQWdCO0FBQ3BCLGtCQUFJbWQsWUFBWTtBQUNkTCx1QkFBT0gsV0FBV0csS0FESjtBQUVkN04seUJBQVNqUCxLQUFLaVAsT0FGQTtBQUdkK0IsdUJBQU8yTCxXQUFXM0wsS0FISjtBQUlkb00sOEJBQWNULFdBQVdTO0FBSlgsZUFBaEI7O0FBT0Esa0JBQUlMLFdBQVcsRUFBZjtBQUNBQSx1QkFBUy9MLEtBQVQsR0FBaUJtTSxTQUFqQjtBQUNBSix1QkFBU3pMLE9BQVQsR0FBbUJ0QixTQUFTLEdBQVQsQ0FBbkI7QUFDQStNLHVCQUFTOWEsS0FBVCxHQUFpQkEsS0FBakI7O0FBRUE7QUFDQSxrQkFBSTJLLE9BQU9DLFlBQVAsS0FBd0JxRixTQUF4QixJQUFxQyxRQUFPdEYsT0FBT0MsWUFBUCxDQUFvQm1RLGVBQTNCLE1BQStDLFFBQXhGLEVBQWtHO0FBQ2hHemIsOEVBQUtBLENBQUNnQixpQkFBTixDQUF3QnFLLE9BQU9DLFlBQVAsQ0FBb0JtUSxlQUE1QyxFQUE2REQsUUFBN0Q7QUFDRDs7QUFFRHBkLG1CQUFLTCxLQUFMLENBQVcyZCxRQUFYLENBQW9CRixRQUFwQjtBQUNEO0FBdEJTLFdBQVo7QUF3QkQ7QUFDRjs7QUFFRDtBQUNBO0FBQ0QsS0E3cERILENBNnBESTs7QUE3cERKO0FBQUE7QUFBQSx1Q0ErcERxQjtBQUNqQixVQUFJc0IsT0FBSixFQUNFcGMsS0FERjs7QUFHQSxXQUFLb2MsT0FBTCxJQUFnQixLQUFLL2UsS0FBTCxDQUFXd1EsY0FBM0IsRUFBMkM7QUFDekMsWUFBSSxLQUFLeFEsS0FBTCxDQUFXd1EsY0FBWCxDQUEwQnZKLGNBQTFCLENBQXlDOFgsT0FBekMsQ0FBSixFQUF1RDtBQUNyRCxlQUFLakYsU0FBTCxDQUFlaUYsT0FBZjtBQUNEO0FBQ0Y7QUFDRCxXQUFLLElBQUlDLENBQVQsSUFBYyxLQUFLblMsU0FBbkIsRUFBOEI7QUFDNUIsWUFBSSxLQUFLQSxTQUFMLENBQWU1RixjQUFmLENBQThCK1gsQ0FBOUIsQ0FBSixFQUFzQztBQUNwQ3JjLGtCQUFRLEtBQUtrSyxTQUFMLENBQWVtUyxDQUFmLENBQVI7QUFDQSxjQUFJcmMsTUFBTXhCLElBQU4sS0FBZSxHQUFuQixFQUF3QjtBQUN0QixpQkFBSzBZLFNBQUwsQ0FBZWxYLE1BQU1YLEVBQXJCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsS0FockRILENBZ3JESTs7QUFockRKOztBQUFBO0FBQUEsSTs7Ozs7Ozs7Ozs7Ozs7OztBQ1BPLElBQU0wTixRQUFiLEdBRUUsa0JBQVl1UCxRQUFaLEVBQXNCO0FBQUE7O0FBQ3BCLE9BQUtqZCxFQUFMLEdBQVVpZCxTQUFTLElBQVQsQ0FBVjtBQUNBLE9BQUtyVCxHQUFMLEdBQVdxVCxTQUFTLEtBQVQsQ0FBWDtBQUNBLE9BQUs1RCxhQUFMLEdBQXFCNEQsU0FBUyxlQUFULENBQXJCO0FBQ0EsT0FBS3RQLE9BQUwsR0FBZXNQLFNBQVMsU0FBVCxDQUFmO0FBQ0EsT0FBS3BQLFFBQUwsR0FBZ0JvUCxTQUFTLFVBQVQsQ0FBaEI7QUFDQSxPQUFLOWQsSUFBTCxHQUFZOGQsU0FBUyxNQUFULENBQVo7QUFDQSxPQUFLQyxVQUFMLEdBQWtCRCxTQUFTLFlBQVQsQ0FBbEI7QUFDQSxPQUFLblAsSUFBTCxHQUFZbVAsU0FBUyxNQUFULENBQVo7QUFDQSxPQUFLNUUsT0FBTCxHQUFlNEUsU0FBUyxTQUFULENBQWY7QUFDQSxPQUFLalcsSUFBTCxHQUFZaVcsU0FBUyxNQUFULENBQVo7QUFDQSxPQUFLRSxjQUFMLEdBQXNCRixTQUFTLGdCQUFULENBQXRCO0FBQ0EsT0FBS2hQLE9BQUwsR0FBZWdQLFNBQVMsU0FBVCxDQUFmO0FBQ0EsT0FBS3BRLFNBQUwsR0FBaUJvUSxTQUFTLFdBQVQsQ0FBakI7QUFDQSxPQUFLbFEsTUFBTCxHQUFja1EsU0FBUyxRQUFULENBQWQ7QUFDQSxPQUFLRyxXQUFMLEdBQW1CSCxTQUFTLGFBQVQsQ0FBbkI7QUFDQSxPQUFLalAsYUFBTCxHQUFxQmlQLFNBQVMsZUFBVCxDQUFyQjtBQUNBLE9BQUtsUCxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsT0FBS0QsSUFBTCxHQUFZbVAsU0FBUyxNQUFULENBQVo7QUFDQSxPQUFLMUQsUUFBTCxHQUFnQjBELFNBQVMsVUFBVCxDQUFoQjtBQUNBLE9BQUtwZCxJQUFMLEdBQVlvZCxTQUFTLE1BQVQsQ0FBWjtBQUNBLE9BQUs5UCxLQUFMLEdBQWE4UCxTQUFTLE9BQVQsQ0FBYjtBQUNBLE9BQUtMLGFBQUwsR0FBcUJLLFNBQVMsZUFBVCxDQUFyQjtBQUNBLE9BQUtKLGtCQUFMLEdBQTBCSSxTQUFTLG9CQUFULENBQTFCO0FBQ0EsT0FBS0ksWUFBTCxHQUFvQkosU0FBUyxjQUFULENBQXBCO0FBQ0EsT0FBS2pRLFNBQUwsR0FBaUJpUSxTQUFTLFdBQVQsQ0FBakI7QUFDQSxPQUFLblEsYUFBTCxHQUFxQixLQUFyQjtBQUNBLE9BQUttQyxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsT0FBS3FPLGFBQUwsR0FBcUJMLFNBQVMsa0JBQVQsQ0FBckI7O0FBRUEsTUFBSUEsU0FBU00sU0FBYixFQUF3QjtBQUN0QixTQUFLQSxTQUFMLEdBQWlCTixTQUFTTSxTQUExQjtBQUNEO0FBQ0QsTUFBR04sU0FBU3ZOLEtBQVosRUFBa0I7QUFDaEIsU0FBS0EsS0FBTCxHQUFhdU4sU0FBU3ZOLEtBQXRCO0FBQ0Q7QUFDRCxPQUFLdEMsV0FBTCxHQUFtQjZQLFNBQVMsYUFBVCxDQUFuQjtBQUNELENBdkNILEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUNBOztBQUVPLElBQU1PLDBCQUFiO0FBQ0ksd0NBQVl4ZixLQUFaLEVBQWtCO0FBQUE7O0FBQ2QsYUFBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsYUFBS0MsYUFBTCxHQUFxQkQsTUFBTUUsT0FBTixDQUFjRCxhQUFuQztBQUNBLGFBQUt3UyxZQUFMLEdBQW9CLEVBQXBCO0FBQ0g7O0FBTEw7QUFBQTtBQUFBLDJDQU91QmdOLE1BUHZCLEVBTytCQyxXQVAvQixFQU80QztBQUNwQyxnQkFBSXhmLGdCQUFKO0FBQUEsZ0JBQ0l5ZixXQUFXLEVBRGY7QUFBQSxnQkFFSUMsVUFBVSxFQUZkO0FBQUEsZ0JBR0l2ZixPQUFPLElBSFg7QUFBQSxnQkFJSThQLFFBQVEsQ0FKWjtBQUFBLGdCQUtJMFAsaUJBTEo7O0FBT0EsZ0JBQUlILGVBQWUsUUFBT0EsV0FBUCx5Q0FBT0EsV0FBUCxPQUF1QixRQUExQyxFQUFvRDtBQUNoRHhmLDBCQUFVd2YsV0FBVjtBQUNILGFBRkQsTUFFTztBQUNIeGYsMEJBQVUsRUFBVjtBQUNIOztBQUVEOztBQUVBMmYsdUJBQVcsa0JBQVNDLFFBQVQsRUFBbUI5WSxLQUFuQixFQUEwQjtBQUNqQyxvQkFBSUEsS0FBSixFQUFXO0FBQ1AyWSw2QkFBUzNZLEtBQVQsSUFBa0IsS0FBbEI7QUFDQTRZLDRCQUFRNVksS0FBUixJQUFpQixLQUFqQjtBQUNIO0FBQ0Q7QUFDQTFHLHVCQUFPQyxJQUFQLENBQVk7QUFDUkUsOEJBQVVKLEtBQUtMLEtBQUwsQ0FBV0UsT0FBWCxDQUFtQkQsYUFBbkIsQ0FBaUNTLElBQWpDLENBQXNDQyxLQUF0QyxHQUE4QyxPQUE5QyxHQUF3RCxNQUQxRDtBQUVSNkMseUJBQUtuRCxLQUFLTCxLQUFMLENBQVcrZixnQkFGUjtBQUdScmYsMEJBQU07QUFDRnNmLDZCQUFLRjtBQURIO0FBSEUsaUJBQVosRUFNR2xmLElBTkgsQ0FNUSxVQUFVRixJQUFWLEVBQWdCO0FBQ3BCLHdCQUFJYSxVQUFKO0FBQUEsd0JBQ0kwZSxrQkFESjtBQUFBLHdCQUVJQyxhQUFhLElBRmpCOztBQUlBLHdCQUFJeGYsS0FBS3FCLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNqQiw2QkFBS1IsSUFBSSxDQUFULEVBQVlBLElBQUliLEtBQUtxQixNQUFyQixFQUE2QlIsS0FBSyxDQUFsQyxFQUFxQztBQUNqQzBlLHdDQUFZdmYsS0FBS2EsQ0FBTCxDQUFaO0FBQ0FsQixpQ0FBS29TLFlBQUwsQ0FBa0J3TixVQUFVamUsRUFBNUIsSUFBa0MsSUFBSW1lLDRFQUFKLENBQXFCRixTQUFyQixFQUFnQzVmLElBQWhDLENBQWxDO0FBQ0g7QUFDSjtBQUNELHdCQUFJMkcsS0FBSixFQUFXO0FBQ1A0WSxnQ0FBUTVZLEtBQVIsSUFBaUIsSUFBakI7QUFDQSw2QkFBSyxJQUFJakIsR0FBVCxJQUFnQjZaLE9BQWhCLEVBQXlCO0FBQ3JCLGdDQUFJQSxRQUFRM1ksY0FBUixDQUF1QmxCLEdBQXZCLENBQUosRUFBaUM7QUFDN0Isb0NBQUksQ0FBQzZaLFFBQVE3WixHQUFSLENBQUwsRUFBbUI7QUFDZm1hLGlEQUFhLEtBQWI7QUFDQTtBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBQ0Qsd0JBQUloZ0IsUUFBUVUsSUFBUixJQUFnQixPQUFPVixRQUFRVSxJQUFmLEtBQXdCLFVBQXhDLEtBQXVEb0csUUFBUWtaLFVBQVIsR0FBcUIsSUFBNUUsQ0FBSixFQUF1RjtBQUNuRmhnQixnQ0FBUVUsSUFBUjtBQUNIO0FBQ0osaUJBL0JELEVBK0JHUSxNQS9CSCxDQStCVSxVQUFVZ2YsSUFBVixFQUFnQkMsU0FBaEIsRUFBMkI7QUFDakMsd0JBQUlDLFlBQVksSUFBaEI7O0FBRUEsd0JBQUl0WixLQUFKLEVBQVc7QUFDUDJZLGlDQUFTM1ksS0FBVCxJQUFrQixJQUFsQjtBQUNBLDZCQUFLLElBQUlqQixHQUFULElBQWdCNFosUUFBaEIsRUFBMEI7QUFDdEIsZ0NBQUlBLFNBQVMxWSxjQUFULENBQXdCbEIsR0FBeEIsQ0FBSixFQUFrQztBQUM5QixvQ0FBSSxDQUFDNFosU0FBUzVaLEdBQVQsQ0FBTCxFQUFvQjtBQUNoQnVhLGdEQUFZLEtBQVo7QUFDQTtBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBQ0Qsd0JBQUlwZ0IsUUFBUWtCLE1BQVIsSUFBa0IsT0FBT2xCLFFBQVFrQixNQUFmLEtBQTBCLFVBQTVDLEtBQTJENEYsUUFBUXNaLFNBQVIsR0FBb0IsSUFBL0UsQ0FBSixFQUEwRjtBQUN0RnBnQixnQ0FBUWtCLE1BQVI7QUFDSDtBQUNELHdCQUFJLENBQUM4QyxFQUFFN0QsS0FBS0wsS0FBTCxDQUFXRSxPQUFYLENBQW1CRCxhQUFuQixDQUFpQ2lCLE9BQWpDLENBQXlDZ0csT0FBM0MsRUFBb0RxWixRQUFwRCxDQUE2RDNXLHdFQUFZQSxDQUFDNFcsSUFBMUUsQ0FBTCxFQUFzRjtBQUNsRm5nQiw2QkFBS0wsS0FBTCxDQUFXRSxPQUFYLENBQW1CRCxhQUFuQixDQUFpQ2lCLE9BQWpDLENBQXlDQyxJQUF6QztBQUNIO0FBQ0osaUJBbkRELEVBbURHSixJQW5ESCxDQW1EUSxVQUFVMGYsS0FBVixFQUFpQkMsVUFBakIsRUFBNkJDLFdBQTdCLEVBQTJDO0FBQy9DM2YsNEJBQVFDLElBQVIsQ0FBYTBmLFdBQWI7QUFDSCxpQkFyREQ7QUFzREgsYUE1REQ7O0FBOERBO0FBQ0EsZ0JBQUlsQixPQUFPMWQsTUFBUCxHQUFnQixHQUFwQixFQUF5QjtBQUNyQixvQkFBSTZlLElBQUksR0FBUjtBQUNBLHVCQUFNbkIsT0FBTzFkLE1BQVAsR0FBZ0IsQ0FBdEIsRUFBeUI7QUFDckI4ZCw2QkFBU0osT0FBT29CLE1BQVAsQ0FBYyxDQUFkLEVBQWlCRCxDQUFqQixDQUFULEVBQThCelEsS0FBOUI7QUFDQUE7QUFDSDtBQUNKLGFBTkQsTUFNTztBQUNIMFAseUJBQVNKLE1BQVQ7QUFDSDtBQUNEO0FBQ0gsU0FoR0wsQ0FnR007O0FBaEdOOztBQUFBO0FBQUEsSTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0hBOztBQUVPLElBQU1VLGdCQUFiO0FBQ0ksOEJBQVlXLFdBQVosRUFBeUJuVixVQUF6QixFQUFvQztBQUFBOztBQUNoQyxhQUFLM0osRUFBTCxHQUFpQjhlLFlBQVksSUFBWixDQUFqQjtBQUNBLGFBQUsvZCxLQUFMLEdBQWlCLEtBQUtnZSxnQkFBTCxDQUFzQkQsV0FBdEIsQ0FBakI7QUFDQSxhQUFLRSxNQUFMLEdBQWlCLEtBQUtDLG9CQUFMLENBQTBCSCxXQUExQixDQUFqQjtBQUNBLGFBQUtqZixJQUFMLEdBQWlCaWYsWUFBWSxNQUFaLENBQWpCO0FBQ0EsYUFBS25QLE9BQUwsR0FBaUJtUCxZQUFZLFNBQVosQ0FBakI7QUFDQSxhQUFLalAsS0FBTCxHQUFpQmlQLFlBQVksT0FBWixDQUFqQjtBQUNBLGFBQUtJLE9BQUwsR0FBaUJKLFlBQVksU0FBWixDQUFqQjtBQUNBLGFBQUtLLE9BQUwsR0FBaUJMLFlBQVksU0FBWixDQUFqQjtBQUNBLGFBQUsxQyxlQUFMLEdBQXVCMEMsWUFBWSxtQkFBWixDQUF2QjtBQUNBLGFBQUtuVixVQUFMLEdBQWlCQSxVQUFqQjtBQUNBLGFBQUttVixXQUFMLEdBQW1CQSxXQUFuQjtBQUNIOztBQWJMO0FBQUE7QUFBQSx5Q0FlcUJiLFNBZnJCLEVBZWdDO0FBQ3hCLGdCQUFJNWYsSUFBSixFQUNJK2dCLGFBREosRUFFSUMsVUFGSixFQUdJQyxXQUhKLEVBSUlDLFNBSkosRUFLSUMsU0FMSixFQU1JQyxnQkFOSixFQU9JQyxjQVBKLEVBUUlDLGdCQVJKOztBQVVBdGhCLG1CQUFPLElBQVA7O0FBRUE7QUFDQWloQiwwQkFBYyxJQUFJNWQsR0FBR1gsS0FBSCxDQUFTNmUsTUFBYixDQUFvQjtBQUM5QjlOLHVCQUFPN1IsOERBQUtBLENBQUNnUix3QkFBTixDQUErQmdOLFVBQVU0QixXQUF6QyxFQUFzRDVCLFVBQVU2QixhQUFoRSxDQUR1QjtBQUU5QkMsdUJBQU9uZ0IsU0FBU3FlLFVBQVUrQixXQUFWLENBQXNCN08sS0FBL0IsRUFBc0MsRUFBdEM7QUFGdUIsYUFBcEIsQ0FBZDtBQUlBb08sd0JBQVksSUFBSTdkLEdBQUdYLEtBQUgsQ0FBUzhRLElBQWIsQ0FBa0I7QUFDMUJDLHVCQUFPN1IsOERBQUtBLENBQUNnUix3QkFBTixDQUErQmdOLFVBQVU1TixTQUF6QyxFQUFvRDROLFVBQVVnQyxXQUE5RDtBQURtQixhQUFsQixDQUFaOztBQUlBO0FBQ0Esb0JBQVFoQyxVQUFVaUMsU0FBbEI7QUFDSSxxQkFBSyxRQUFMO0FBQ0liLGlDQUFhLElBQUkzZCxHQUFHWCxLQUFILENBQVNvZixZQUFiLENBQTBCO0FBQ25Ddk8sOEJBQU0yTixTQUQ2QjtBQUVuQ2EsZ0NBQVFkLFdBRjJCO0FBR25DZSxnQ0FBUSxDQUgyQjtBQUluQ2pRLGdDQUFRNk4sVUFBVTdOLE1BQVYsQ0FBaUJlLEtBQWpCLElBQTBCLEVBSkM7QUFLbkNtUCwrQkFBT0MsS0FBS0MsRUFBTCxHQUFVO0FBTGtCLHFCQUExQixDQUFiO0FBT0E7QUFDSixxQkFBSyxNQUFMO0FBQ0luQixpQ0FBYSxJQUFJM2QsR0FBR1gsS0FBSCxDQUFTb2YsWUFBYixDQUEwQjtBQUNuQ3ZPLDhCQUFNMk4sU0FENkI7QUFFbkNhLGdDQUFRZCxXQUYyQjtBQUduQ21CLGlDQUFTeEMsVUFBVTdOLE1BQVYsQ0FBaUJlLEtBQWpCLElBQTBCLEVBSEE7QUFJbkN1UCxpQ0FBU3pDLFVBQVU3TixNQUFWLENBQWlCZSxLQUFqQixHQUF5Qm9QLEtBQUtJLEtBQUwsQ0FBVzFDLFVBQVU3TixNQUFWLENBQWlCZSxLQUFqQixHQUF5QixHQUFwQyxDQUF6QixHQUFvRSxDQUoxQztBQUtuQ2tQLGdDQUFRLENBTDJCO0FBTW5DQywrQkFBTztBQU40QixxQkFBMUIsQ0FBYjtBQVFBO0FBQ0oscUJBQUssR0FBTDtBQUNJakIsaUNBQWEsSUFBSTNkLEdBQUdYLEtBQUgsQ0FBU29mLFlBQWIsQ0FBMEI7QUFDbkN2Tyw4QkFBTTJOLFNBRDZCO0FBRW5DYSxnQ0FBUWQsV0FGMkI7QUFHbkNlLGdDQUFRLENBSDJCO0FBSW5DalEsZ0NBQVE2TixVQUFVN04sTUFBVixDQUFpQmUsS0FBakIsSUFBMEIsRUFKQztBQUtuQ3VQLGlDQUFTLENBTDBCO0FBTW5DSiwrQkFBT0MsS0FBS0MsRUFBTCxHQUFVO0FBTmtCLHFCQUExQixDQUFiO0FBUUE7QUFDSixxQkFBSyxPQUFMO0FBQ0luQixpQ0FBYSxJQUFJM2QsR0FBR1gsS0FBSCxDQUFTb2YsWUFBYixDQUEwQjtBQUNuQ3ZPLDhCQUFNMk4sU0FENkI7QUFFbkNhLGdDQUFRZCxXQUYyQjtBQUduQ2UsZ0NBQVEsQ0FIMkI7QUFJbkNqUSxnQ0FBUTZOLFVBQVU3TixNQUFWLENBQWlCZSxLQUFqQixJQUEwQixFQUpDO0FBS25DdVAsaUNBQVMsQ0FMMEI7QUFNbkNKLCtCQUFPO0FBTjRCLHFCQUExQixDQUFiO0FBUUE7QUFDSixxQkFBSyxVQUFMO0FBQ0lqQixpQ0FBYSxJQUFJM2QsR0FBR1gsS0FBSCxDQUFTb2YsWUFBYixDQUEwQjtBQUNuQ3ZPLDhCQUFNMk4sU0FENkI7QUFFbkNhLGdDQUFRZCxXQUYyQjtBQUduQ2UsZ0NBQVEsQ0FIMkI7QUFJbkNqUSxnQ0FBUTZOLFVBQVU3TixNQUFWLENBQWlCZSxLQUFqQixJQUEwQixFQUpDO0FBS25DeEksa0NBQVU0WCxLQUFLQyxFQUFMLEdBQVUsQ0FMZTtBQU1uQ0YsK0JBQU87QUFONEIscUJBQTFCLENBQWI7QUFRQTtBQUNKLHFCQUFLLFNBQUwsQ0FsREosQ0FrRG9CO0FBQ2hCLHFCQUFLLFdBQUw7QUFDUSx3QkFBSXJDLFVBQVUyQyxRQUFkLEVBQXdCO0FBQ3BCdkIscUNBQWEsSUFBSTNkLEdBQUdYLEtBQUgsQ0FBUzhmLElBQWIsQ0FBa0I7QUFDM0JDLHFDQUFTbkgsV0FBV3NFLFVBQVU4QyxZQUFWLENBQXVCNVAsS0FBbEMsRUFBeUMsRUFBekMsSUFBK0MsR0FEN0I7QUFFM0I2UCxpQ0FBSy9DLFVBQVUyQyxRQUZZO0FBRzNCM1Esa0NBQU0sQ0FBQ3JRLFNBQVNxZSxVQUFVZ0QsU0FBVixDQUFvQixDQUFwQixDQUFULEVBQWlDLEVBQWpDLENBQUQsRUFBdUNyaEIsU0FBU3FlLFVBQVVnRCxTQUFWLENBQW9CLENBQXBCLENBQVQsRUFBaUMsRUFBakMsQ0FBdkMsQ0FIcUI7QUFJM0JDLG1DQUFPdkgsV0FBV3NFLFVBQVVrRCxVQUFyQixFQUFpQyxFQUFqQztBQUpvQix5QkFBbEIsQ0FBYjtBQU1IO0FBQ0Q7QUFDUixxQkFBSyxlQUFMO0FBQ1Esd0JBQUdsRCxVQUFVbUQsTUFBVixJQUFvQm5ELFVBQVVrRCxVQUE5QixJQUE0Q2xELFVBQVVnRCxTQUF6RCxFQUFvRTtBQUNoRSw0QkFBSUksU0FBUzVaLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBYjtBQUNBLDRCQUFJNFosTUFBTUQsT0FBT0UsVUFBUCxDQUFrQixJQUFsQixDQUFWO0FBQ0EsNEJBQUl4QixRQUFTOUIsVUFBVWdELFNBQVYsQ0FBb0IsQ0FBcEIsSUFBdUJoRCxVQUFVa0QsVUFBOUM7QUFDQSw0QkFBSUssU0FBVXZELFVBQVVnRCxTQUFWLENBQW9CLENBQXBCLElBQXVCaEQsVUFBVWtELFVBQS9DOztBQUVBLDRCQUFJbkIsY0FBYyxDQUFsQjtBQUNBLDRCQUFJL0IsVUFBVStCLFdBQVYsSUFBeUIvQixVQUFVK0IsV0FBVixDQUFzQjdPLEtBQW5ELEVBQTBEO0FBQ3RENk8sMENBQWMvQixVQUFVK0IsV0FBVixDQUFzQjdPLEtBQXBDO0FBQ0g7QUFDRGtRLCtCQUFPdEIsS0FBUCxHQUFnQkEsUUFBTyxJQUFFQyxXQUF6QjtBQUNBcUIsK0JBQU9HLE1BQVAsR0FBZ0JBLFNBQVEsSUFBRXhCLFdBQTFCO0FBQ0FzQiw0QkFBSUcsU0FBSixDQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0JKLE9BQU90QixLQUEzQixFQUFrQ3NCLE9BQU9HLE1BQXpDOztBQUVBLDRCQUFJdkQsVUFBVTVOLFNBQWQsRUFBeUI7QUFDckJpUixnQ0FBSS9CLFNBQUosR0FBZ0J0Ziw4REFBS0EsQ0FBQ2dSLHdCQUFOLENBQStCZ04sVUFBVTVOLFNBQXpDLEVBQW9ENE4sVUFBVWdDLFdBQVYsQ0FBc0I5TyxLQUExRSxDQUFoQjtBQUNBbVEsZ0NBQUlJLFFBQUosQ0FBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CTCxPQUFPdEIsS0FBMUIsRUFBaUNzQixPQUFPRyxNQUF4QztBQUNIOztBQUVELDRCQUFJeEIsZUFBZS9CLFVBQVU0QixXQUE3QixFQUEwQztBQUN0Q3lCLGdDQUFJaEMsV0FBSixHQUFrQnJmLDhEQUFLQSxDQUFDZ1Isd0JBQU4sQ0FBK0JnTixVQUFVNEIsV0FBekMsRUFBc0Q1QixVQUFVNkIsYUFBVixDQUF3QjNPLEtBQTlFLENBQWxCO0FBQ0FtUSxnQ0FBSUssU0FBSixHQUFnQjFELFVBQVUrQixXQUFWLENBQXNCN08sS0FBdEM7QUFDQW1RLGdDQUFJTSxVQUFKLENBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQlAsT0FBT3RCLEtBQTVCLEVBQW1Dc0IsT0FBT0csTUFBMUM7QUFDQUYsZ0NBQUlPLFNBQUosQ0FBYyxHQUFkLEVBQW1CLEdBQW5CO0FBQ0g7O0FBRUQ7QUFDQTtBQUNBOztBQUVBLDRCQUFJQyxNQUFNLElBQUlDLEtBQUosRUFBVjtBQUNBRCw0QkFBSWQsR0FBSixHQUFVL0MsVUFBVW1ELE1BQXBCO0FBQ0FVLDRCQUFJRSxNQUFKLEdBQWEsR0FBYixDQWhDZ0UsQ0FnQzlDOztBQUVsQkYsNEJBQUlHLE1BQUosR0FBYSxZQUFXO0FBQ3BCWCxnQ0FBSVksU0FBSixDQUFjSixHQUFkLEVBQW1COUIsV0FBbkIsRUFBZ0NBLFdBQWhDLEVBQTZDRCxLQUE3QyxFQUFvRHlCLE1BQXBEO0FBQ0gseUJBRkQ7O0FBSUFuQyxxQ0FBYSxJQUFJM2QsR0FBR1gsS0FBSCxDQUFTOGYsSUFBYixDQUFrQjtBQUMzQmlCLGlDQUFLVCxNQURzQjtBQUUzQmMscUNBQVMsQ0FBQ2QsT0FBT3RCLEtBQVIsRUFBZXNCLE9BQU9HLE1BQXRCLENBRmtCLENBRVc7O0FBRlgseUJBQWxCLENBQWI7QUFLSDs7QUFFTDtBQUNKLHFCQUFLLE9BQUw7QUFDSW5DLGlDQUFhLElBQUkzZCxHQUFHWCxLQUFILENBQVNxaEIsS0FBYixDQUFtQjtBQUM1QkMsOEJBQU1wRSxVQUFVcUUsU0FEWTtBQUU1QkMsOEJBQU0sSUFGc0I7QUFHNUJ6QixpQ0FBU25ILFdBQVdzRSxVQUFVOEMsWUFBVixDQUF1QjVQLEtBQWxDLEVBQXlDLEVBQXpDLElBQStDLEdBSDVCO0FBSTVCZixnQ0FBUXVKLFdBQVdzRSxVQUFVN04sTUFBVixDQUFpQmUsS0FBNUIsRUFBa0MsRUFBbEMsQ0FKb0I7QUFLNUJxUixnQ0FBUSxJQUxvQjtBQU01QnBDLGdDQUFRZCxXQU5vQjtBQU81QjBCLDZCQUFLL0MsVUFBVTJDO0FBUGEscUJBQW5CLENBQWI7QUFTQTtBQUNKLHFCQUFLLE9BQUw7QUFDSXZCLGlDQUFhLElBQUkzZCxHQUFHWCxLQUFILENBQVNtYixNQUFiLENBQW9CO0FBQzdCdEssOEJBQU0yTixTQUR1QjtBQUU3QmEsZ0NBQVFkLFdBRnFCO0FBRzdCbFAsZ0NBQVE2TixVQUFVN04sTUFBVixDQUFpQmUsS0FBakIsSUFBMEI7QUFITCxxQkFBcEIsQ0FBYjtBQUtBO0FBQ0o7QUFDSWtPLGlDQUFhLElBQUkzZCxHQUFHWCxLQUFILENBQVNtYixNQUFiLENBQW9CO0FBQzdCdEssOEJBQU0yTixTQUR1QjtBQUU3QmEsZ0NBQVFkLFdBRnFCO0FBRzdCbFAsZ0NBQVE2TixVQUFVN04sTUFBVixDQUFpQmUsS0FBakIsSUFBMEI7QUFITCxxQkFBcEIsQ0FBYjtBQS9IUjs7QUFzSUE7QUFDQWlPLDRCQUFnQix1QkFBVXBQLE9BQVYsRUFBbUJ2SCxVQUFuQixFQUErQmdhLEtBQS9CLEVBQXNDO0FBQ2xELG9CQUFJQyxXQUFKLEVBQ0k3UyxLQURKLEVBRUk4UyxTQUZKLEVBR0lDLGFBSEosRUFJSUMsYUFKSixFQUtJQyxjQUxKLEVBTUlDLFdBTkosRUFPSUMsU0FQSjs7QUFTQSxvQkFBSVAsS0FBSixFQUFXO0FBQ1AsMkJBQU94RSxVQUFVamUsRUFBakI7QUFDSDs7QUFFRDtBQUNBLG9CQUFJLEVBQUVnUSxtQkFBbUJ0TyxHQUFHbVUsT0FBeEIsQ0FBSixFQUFzQztBQUNsQ3BOLGlDQUFhdUgsT0FBYjtBQUNBQSw4QkFBVSxJQUFWO0FBQ0g7O0FBRUQwUyw4QkFBYyxFQUFkOztBQUVBLG9CQUFJMVMsV0FBVyxPQUFPQSxRQUFRcEosR0FBZixLQUF1QixVQUFsQyxJQUFnRG9KLFFBQVFwSixHQUFSLENBQVksT0FBWixDQUFwRCxFQUEwRTtBQUN0RWlKLDRCQUFRRyxRQUFRcEosR0FBUixDQUFZLE9BQVosQ0FBUjtBQUNILGlCQUZELE1BRU8sSUFBSXFYLFVBQVVwTyxLQUFkLEVBQXFCO0FBQ3hCQSw0QkFBUW9PLFVBQVVwTyxLQUFsQjtBQUNILGlCQUZNLE1BRUE7QUFDSEEsNEJBQVEsS0FBUjtBQUNIO0FBQ0Qsb0JBQUlvVCxlQUFlNWtCLEtBQUtzTCxVQUFMLENBQWdCMUwsYUFBaEIsQ0FBOEJTLElBQTlCLENBQW1Dd2tCLG1CQUF0RDtBQUNBO0FBQ0Esb0JBQUlyVCxLQUFKLEVBQVc7QUFDUCx3QkFBSW9PLFVBQVVrRixnQkFBVixJQUE4QmxGLFVBQVVtRixnQkFBVixDQUEyQmpTLEtBQTdELEVBQW9FO0FBQ2hFc08sMkNBQW1CLElBQUkvZCxHQUFHWCxLQUFILENBQVM2ZSxNQUFiLENBQW9CO0FBQ25DOU4sbUNBQU83Uiw4REFBS0EsQ0FBQ2dSLHdCQUFOLENBQStCZ04sVUFBVWtGLGdCQUFWLElBQThCRixZQUE3RCxFQUEyRTtBQUM5RS9SLHNDQUFNLEdBRHdFO0FBRTlFQyx1Q0FBTztBQUZ1RSw2QkFBM0UsQ0FENEI7QUFLbkM0TyxtQ0FBT25nQixTQUFTcWUsVUFBVW1GLGdCQUFWLENBQTJCalMsS0FBcEMsRUFBMkMsRUFBM0M7QUFMNEIseUJBQXBCLENBQW5CO0FBT0EsNEJBQUc4TSxVQUFVb0YsY0FBVixLQUE2QixHQUFoQyxFQUFvQztBQUNsQzNELDZDQUFpQixJQUFJaGUsR0FBR1gsS0FBSCxDQUFTOFEsSUFBYixDQUFrQjtBQUNqQ0MsdUNBQU83Uiw4REFBS0EsQ0FBQ2dSLHdCQUFOLENBQStCZ04sVUFBVWtGLGdCQUFWLElBQThCRixZQUE3RCxFQUEyRTtBQUNoRi9SLDBDQUFNLEdBRDBFO0FBRWhGQywyQ0FBTztBQUZ5RSxpQ0FBM0U7QUFEMEIsNkJBQWxCLENBQWpCO0FBTUQ7QUFDSjtBQUNELHdCQUFJLENBQUM4TSxVQUFVcUYsWUFBZixFQUE2QjtBQUN6QnJGLGtDQUFVcUYsWUFBVixHQUF5QixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sSUFBUCxDQUF6QjtBQUNIO0FBQ0Qsd0JBQUdyRixVQUFVb0YsY0FBVixLQUE2QixHQUFoQyxFQUFvQztBQUNsQzdELG9DQUFZLElBQUk5ZCxHQUFHWCxLQUFILENBQVN5USxJQUFiLENBQWtCO0FBQzVCRCxrQ0FBTTFCLEtBRHNCO0FBRTVCNEIsa0NBQU0sQ0FBQ3dNLFVBQVVzRixXQUFWLElBQXlCLFFBQTFCLElBQXNDLEdBQXRDLElBQTZDdEYsVUFBVXVGLFVBQVYsSUFBd0IsUUFBckUsSUFBaUYsR0FBakYsSUFBd0Z2RixVQUFVd0YsU0FBVixJQUF1QixJQUEvRyxJQUF1SCxLQUF2SCxJQUFnSXhGLFVBQVV5RixXQUFWLElBQXlCLFlBQXpKLENBRnNCO0FBRzVCO0FBQ0FoUyxxQ0FBUzlSLFNBQVNxZSxVQUFVcUYsWUFBVixDQUF1QixDQUF2QixLQUE2QixDQUF0QyxFQUF5QyxFQUF6QyxDQUptQjtBQUs1QjNSLHFDQUFTL1IsU0FBU3FlLFVBQVVxRixZQUFWLENBQXVCLENBQXZCLEtBQTZCLENBQXRDLEVBQXlDLEVBQXpDLENBTG1CO0FBTTVCSyx1Q0FBVzFGLFVBQVUyRixlQU5PO0FBTzVCQywwQ0FBYzVGLFVBQVU2RixlQVBJO0FBUTVCbFMsa0NBQU0sSUFBSWxRLEdBQUdYLEtBQUgsQ0FBUzhRLElBQWIsQ0FBa0I7QUFDdEJDLHVDQUFPN1IsOERBQUtBLENBQUNnUix3QkFBTixDQUErQmdOLFVBQVU4RixVQUFWLElBQXdCZCxZQUF2RCxFQUFxRWhGLFVBQVUrRixZQUEvRTtBQURlLDZCQUFsQixDQVJzQjtBQVc1QnRFLDRDQUFnQkEsY0FYWTtBQVk1QkMsOENBQWtCRjtBQVpVLHlCQUFsQixDQUFaO0FBY0QscUJBZkQsTUFnQkk7QUFDRkQsb0NBQVksSUFBSTlkLEdBQUdYLEtBQUgsQ0FBU3lRLElBQWIsQ0FBa0I7QUFDNUJELGtDQUFNMUIsS0FEc0I7QUFFNUI0QixrQ0FBTSxDQUFDd00sVUFBVXNGLFdBQVYsSUFBeUIsUUFBMUIsSUFBc0MsR0FBdEMsSUFBNkN0RixVQUFVdUYsVUFBVixJQUF3QixRQUFyRSxJQUFpRixHQUFqRixJQUF3RnZGLFVBQVV3RixTQUFWLElBQXVCLElBQS9HLElBQXVILEtBQXZILElBQWdJeEYsVUFBVXlGLFdBQVYsSUFBeUIsWUFBekosQ0FGc0I7QUFHNUI7QUFDQWhTLHFDQUFTOVIsU0FBU3FlLFVBQVVxRixZQUFWLENBQXVCLENBQXZCLEtBQTZCLENBQXRDLEVBQXlDLEVBQXpDLENBSm1CO0FBSzVCM1IscUNBQVMvUixTQUFTcWUsVUFBVXFGLFlBQVYsQ0FBdUIsQ0FBdkIsS0FBNkIsQ0FBdEMsRUFBeUMsRUFBekMsQ0FMbUI7QUFNNUJLLHVDQUFXMUYsVUFBVTJGLGVBTk87QUFPNUJDLDBDQUFjNUYsVUFBVTZGLGVBUEk7QUFRNUJsUyxrQ0FBTSxJQUFJbFEsR0FBR1gsS0FBSCxDQUFTOFEsSUFBYixDQUFrQjtBQUN0QkMsdUNBQU83Uiw4REFBS0EsQ0FBQ2dSLHdCQUFOLENBQStCZ04sVUFBVThGLFVBQVYsSUFBd0JkLFlBQXZELEVBQXFFaEYsVUFBVStGLFlBQS9FO0FBRGUsNkJBQWxCLENBUnNCO0FBVzVCNUQsb0NBQVFYO0FBWG9CLHlCQUFsQixDQUFaO0FBYUQ7QUFFSjs7QUFFRDtBQUNBO0FBQ0Esb0JBQUk1UCxLQUFKLEVBQVc7QUFDUDZTLGdDQUFZdmlCLElBQVosQ0FDSSxJQUFJdUIsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNmMlMsK0JBQU81RSxVQURRO0FBRWY5Tiw4QkFBTWlPLFNBRlM7QUFHZlksZ0NBQVFkLFdBSE87QUFJZjFOLDhCQUFNMk47QUFKUyxxQkFBbkIsQ0FESjtBQVFILGlCQVRELE1BU087QUFDSG1ELGdDQUFZdmlCLElBQVosQ0FDSSxJQUFJdUIsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNmMlMsK0JBQU81RSxVQURRO0FBRWZlLGdDQUFRZCxXQUZPO0FBR2YxTiw4QkFBTTJOO0FBSFMscUJBQW5CLENBREo7QUFPSDs7QUFHRDtBQUNBLG9CQUNJdEIsVUFBVWlHLFdBQVYsSUFDR2xVLE9BREgsSUFFSSxPQUFPQSxRQUFRa0UsV0FBZixLQUErQixVQUZuQyxJQUdHLEVBQUVsRSxRQUFRa0UsV0FBUixjQUFpQ3hTLEdBQUdxVCxJQUFILENBQVFDLEtBQTNDLENBSEgsSUFJRyxPQUFPaEYsUUFBUWtFLFdBQVIsR0FBc0JpUSxjQUE3QixLQUFnRCxVQUx2RCxFQU1FO0FBQ0V4QixnQ0FBYTFFLFVBQVVtRyxrQkFBWCxHQUFrQ3hrQixTQUFTcWUsVUFBVW1HLGtCQUFWLENBQTZCalQsS0FBdEMsRUFBNkMsRUFBN0MsSUFBbUQsQ0FBckYsR0FBMEYsQ0FBdEc7QUFDQXlSLG9DQUFnQkQsWUFBWTFFLFVBQVVtRyxrQkFBVixDQUE2QmxULElBQXpEO0FBQ0FsQiw0QkFBUWtFLFdBQVIsR0FBc0JpUSxjQUF0QixDQUFxQyxVQUFVRSxLQUFWLEVBQWlCQyxHQUFqQixFQUFzQjtBQUN2RDtBQUNBeEIseUNBQWlCbGpCLFNBQVNxZSxVQUFVc0csbUJBQW5CLEVBQXdDLEVBQXhDLENBQWpCO0FBQ0F4QixzQ0FBYzFrQixLQUFLc0wsVUFBTCxDQUFnQjFMLGFBQWhCLENBQThCb0gsR0FBOUIsQ0FBa0NtZixzQkFBbEMsQ0FBeURILEtBQXpELENBQWQ7QUFDQXJCLG9DQUFZM2tCLEtBQUtzTCxVQUFMLENBQWdCMUwsYUFBaEIsQ0FBOEJvSCxHQUE5QixDQUFrQ21mLHNCQUFsQyxDQUF5REYsR0FBekQsQ0FBWjtBQUNBO0FBQ0F6Qix3Q0FBZ0J0QyxLQUFLa0UsSUFBTCxDQUFVbEUsS0FBS21FLEdBQUwsQ0FBUzFCLFVBQVUsQ0FBVixJQUFlRCxZQUFZLENBQVosQ0FBeEIsRUFBd0MsQ0FBeEMsSUFBNkN4QyxLQUFLbUUsR0FBTCxDQUFTMUIsVUFBVSxDQUFWLElBQWVELFlBQVksQ0FBWixDQUF4QixFQUF3QyxDQUF4QyxDQUF2RCxDQUFoQjs7QUFFQSw0QkFDS0QsaUJBQWlCLENBQWpCLElBQXNCSCxZQUFZL2lCLFNBQVNxZSxVQUFVK0IsV0FBVixDQUFzQjdPLEtBQS9CLEVBQXNDLEVBQXRDLENBQVosR0FBd0QwUixhQUEvRSxJQUNJQyxrQkFBa0IsQ0FBbEIsSUFBdUJ6a0IsS0FBS3NMLFVBQUwsQ0FBZ0IxTCxhQUFoQixDQUE4Qm9ILEdBQTlCLENBQWtDQyxPQUFsQyxHQUE0QzJCLE9BQTVDLE1BQXlENmIsY0FGeEYsRUFHRTtBQUNFO0FBQ0FKLHdDQUFZdmlCLElBQVosQ0FDSSxJQUFJdUIsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNmd0UsMENBQVUsSUFBSXBVLEdBQUdxVCxJQUFILENBQVFDLEtBQVosQ0FBa0JzUCxHQUFsQixDQURLO0FBRWYvUyxzQ0FBTSxJQUFJN1AsR0FBR1gsS0FBSCxDQUFTeVEsSUFBYixDQUFrQjtBQUNwQkQsMENBQU0sR0FEYztBQUVwQkUsMENBQU1tUixnQkFBZ0IsYUFGRjtBQUdwQmxSLDZDQUFTLENBSFc7QUFJcEJDLDZDQUFTLENBSlc7QUFLcEJDLDBDQUFNMk4sU0FMYztBQU1wQmEsNENBQVFkLFdBTlk7QUFPcEJxRSwrQ0FBVyxPQVBTO0FBUXBCZ0Isb0RBQWdCLElBUkk7QUFTcEJoYyw4Q0FBVSxDQUFDNFgsS0FBS3FFLEtBQUwsQ0FBWU4sSUFBSSxDQUFKLElBQVNELE1BQU0sQ0FBTixDQUFyQixFQUFpQ0MsSUFBSSxDQUFKLElBQVNELE1BQU0sQ0FBTixDQUExQztBQVRTLGlDQUFsQjtBQUZTLDZCQUFuQixDQURKO0FBZ0JBO0FBQ0EsZ0NBQUlwRyxVQUFVNEcsZ0JBQWQsRUFBZ0M7QUFDNUJuQyw0Q0FBWXZpQixJQUFaLENBQ0ksSUFBSXVCLEdBQUdYLEtBQUgsQ0FBU3VRLEtBQWIsQ0FBbUI7QUFDZndFLDhDQUFVLElBQUlwVSxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCcVAsS0FBbEIsQ0FESztBQUVmOVMsMENBQU0sSUFBSTdQLEdBQUdYLEtBQUgsQ0FBU3lRLElBQWIsQ0FBa0I7QUFDcEJELDhDQUFNLEdBRGM7QUFFcEJFLDhDQUFNbVIsZ0JBQWdCLGFBRkY7QUFHcEJsUixpREFBUyxDQUhXO0FBSXBCQyxpREFBUyxDQUFDLENBSlU7QUFLcEJDLDhDQUFNMk4sU0FMYztBQU1wQmEsZ0RBQVFkLFdBTlk7QUFPcEJxRSxtREFBVyxPQVBTO0FBUXBCZ0Isd0RBQWdCLElBUkk7QUFTcEJoYyxrREFBVSxDQUFDNFgsS0FBS3FFLEtBQUwsQ0FBWVAsTUFBTSxDQUFOLElBQVdDLElBQUksQ0FBSixDQUF2QixFQUFpQ0QsTUFBTSxDQUFOLElBQVdDLElBQUksQ0FBSixDQUE1QztBQVRTLHFDQUFsQjtBQUZTLGlDQUFuQixDQURKO0FBZ0JIO0FBRUo7QUFDSixxQkFsREQ7QUFtREg7O0FBRUQsdUJBQU81QixXQUFQO0FBQ0gsYUE1S0Q7O0FBOEtBLG1CQUFPdEQsYUFBUDtBQUNILFNBNVZMLENBNFZNOzs7QUE1Vk47QUFBQTtBQUFBLDZDQStWeUJuQixTQS9WekIsRUErVm9DO0FBQzVCLGdCQUFJNkcsWUFBSjs7QUFFQTtBQUNBQSwyQkFBZSxFQUFmO0FBQ0FBLHlCQUFhQyxPQUFiLEdBQXVCOUcsVUFBVStHLGNBQVYsSUFBNEJwVSxTQUFuRDtBQUNBa1UseUJBQWFHLE9BQWIsR0FBdUJoSCxVQUFVaUgsV0FBVixJQUF5QnRVLFNBQWhEO0FBQ0FrVSx5QkFBYUssSUFBYixHQUFvQmxILFVBQVVtSCxXQUFWLElBQXlCeFUsU0FBN0M7O0FBRUFrVSx5QkFBYXJsQixJQUFiLEdBQW9Cd2UsVUFBVW9ILFdBQVYsSUFBeUIsS0FBN0M7QUFDQSxnQkFBSVAsYUFBYXJsQixJQUFqQixFQUF1QjtBQUNuQnFsQiw2QkFBYXJsQixJQUFiLEdBQW9CRyxTQUFTa2xCLGFBQWFybEIsSUFBdEIsRUFBNEIsRUFBNUIsS0FBbUMsS0FBdkQ7QUFDSDs7QUFFRCxtQkFBT3FsQixZQUFQO0FBQ0gsU0E5V0wsQ0E4V0s7O0FBOVdMOztBQUFBO0FBQUEsSTs7Ozs7Ozs7Ozs7OztBQ0ZBO0FBQUE7QUFDQSxLQUFLbmEsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjcFAsTUFBZCxHQUF1QixLQUFLMkUsR0FBTCxDQUFTeUssSUFBVCxDQUFjcFAsTUFBZCxJQUF3QixFQUEvQzs7QUFFQyxXQUFVOUQsQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7OztBQUdBQSxNQUFJeUssSUFBSixDQUFTcFAsTUFBVCxDQUFnQmhFLEdBQWhCLEdBQXNCRSxFQUFFSCxNQUFGLENBQVM0SSxJQUFJeUssSUFBSixDQUFTcFAsTUFBVCxDQUFnQmhFLEdBQXpCLEVBQThCOztBQUVsRHNqQixjQUFVO0FBQ1IzZ0Isb0JBQWMscUZBQXFGLEdBQXJGLEdBQ1pqRCxHQUFHRSxNQUFILENBQVVLLEdBQVYsQ0FBYzRDLFdBRlI7QUFHUkMsbUJBQWEsV0FITDtBQUlSVSxlQUFTLENBSkQ7QUFLUkosZUFBUyxFQUxEO0FBTVI1RCxXQUFLO0FBTkcsS0FGd0M7O0FBV2xEK2pCLFlBQVE7QUFDTjVnQixvQkFBYyx5R0FBeUcsR0FBekcsR0FDWmpELEdBQUdFLE1BQUgsQ0FBVUssR0FBVixDQUFjNEMsV0FGVjtBQUdOQyxtQkFBYSxXQUhQO0FBSU5VLGVBQVMsQ0FKSDtBQUtOSixlQUFTLEVBTEg7QUFNTjVELFdBQUs7QUFOQyxLQVgwQzs7QUFvQmxEZ2tCLHFCQUFpQjtBQUNmN2dCLG9CQUFjLDJFQUEyRSxHQUEzRSxHQUNaakQsR0FBR0UsTUFBSCxDQUFVSyxHQUFWLENBQWM0QyxXQUZEO0FBR2ZXLGVBQVMsQ0FITTtBQUlmSixlQUFTLEVBSk07QUFLZjVELFdBQUs7QUFMVSxLQXBCaUM7O0FBNEJsRGlrQixrQkFBYztBQUNaOWdCLG9CQUFjLHFGQUFxRixHQUFyRixHQUNaakQsR0FBR0UsTUFBSCxDQUFVSyxHQUFWLENBQWM0QyxXQUZKO0FBR1pDLG1CQUFhLFdBSEQ7QUFJWlUsZUFBUyxDQUpHO0FBS1pKLGVBQVMsRUFMRztBQU1aNUQsV0FBSztBQU5PLEtBNUJvQzs7QUFxQ2xEa2tCLFlBQVE7QUFDTi9nQixvQkFBY2pELEdBQUdFLE1BQUgsQ0FBVUssR0FBVixDQUFjNEMsV0FEdEI7QUFFTkMsbUJBQWE7QUFGUCxLQXJDMEM7O0FBMENsRDZnQixVQUFNLEVBMUM0QyxDQTBDekM7QUExQ3lDLEdBQTlCLENBQXRCLENBTmlCLENBaURiOztBQUVKOzs7QUFHQWhiLE1BQUl5SyxJQUFKLENBQVNwUCxNQUFULENBQWdCN0QsTUFBaEIsR0FBeUJELEVBQUVILE1BQUYsQ0FBUzRJLElBQUl5SyxJQUFKLENBQVNwUCxNQUFULENBQWdCN0QsTUFBekIsRUFBaUM7O0FBRXhEeWpCLFdBQU87QUFDTGpoQixvQkFBY2pELEdBQUdFLE1BQUgsQ0FBVUssR0FBVixDQUFjNEMsV0FEdkI7QUFFTGxFLGFBQU8sT0FGRjtBQUdMNkUsZUFBUyxDQUhKO0FBSUxKLGVBQVMsRUFKSjtBQUtMTixtQkFBYTtBQUxSLEtBRmlEOztBQVV4RCtnQixpQkFBYTtBQUNYbGhCLG9CQUFjakQsR0FBR0UsTUFBSCxDQUFVSyxHQUFWLENBQWM0QyxXQURqQjtBQUVYbEUsYUFBTyxjQUZJO0FBR1g2RSxlQUFTLENBSEU7QUFJWEosZUFBUyxFQUpFO0FBS1hOLG1CQUFhO0FBTEYsS0FWMkM7O0FBa0J4RGdoQixnQkFBWTtBQUNWbmhCLG9CQUFjakQsR0FBR0UsTUFBSCxDQUFVSyxHQUFWLENBQWM0QyxXQURsQjtBQUVWbEUsYUFBTyxhQUZHO0FBR1Y2RSxlQUFTLENBSEM7QUFJVkosZUFBUyxFQUpDO0FBS1ZOLG1CQUFhO0FBTEgsS0FsQjRDOztBQTBCeERpaEIsYUFBUztBQUNQcGhCLG9CQUFjakQsR0FBR0UsTUFBSCxDQUFVSyxHQUFWLENBQWM0QyxXQURyQjtBQUVQbEUsYUFBTyxTQUZBO0FBR1A2RSxlQUFTLENBSEY7QUFJUEosZUFBUyxFQUpGO0FBS1BOLG1CQUFhO0FBTE4sS0ExQitDOztBQWtDeERraEIsZ0JBQVk7QUFDVnJoQixvQkFBY2pELEdBQUdFLE1BQUgsQ0FBVUssR0FBVixDQUFjNEMsV0FEbEI7QUFFVmxFLGFBQU8sWUFGRztBQUdWNkUsZUFBUyxDQUhDO0FBSVZKLGVBQVMsRUFKQztBQUtWTixtQkFBYTtBQUxILEtBbEM0Qzs7QUEwQ3hENmdCLFVBQU07QUExQ2tELEdBQWpDLENBQXpCOztBQTZDQTs7O0FBR0FoYixNQUFJeUssSUFBSixDQUFTcFAsTUFBVCxDQUFnQmlnQixRQUFoQixHQUEyQi9qQixFQUFFSCxNQUFGLENBQVM0SSxJQUFJeUssSUFBSixDQUFTcFAsTUFBVCxDQUFnQmlnQixRQUF6QixFQUFtQzs7QUFFNURDLGtCQUFjO0FBQ1p2bEIsYUFBTztBQURLLEtBRjhDOztBQU01RHdsQixpQkFBYTtBQUNYeGxCLGFBQU87QUFESSxLQU4rQzs7QUFVNUR5bEIsaUJBQWE7QUFDWHpsQixhQUFPO0FBREksS0FWK0M7O0FBYzVEZ2xCLFVBQU07QUFkc0QsR0FBbkMsQ0FBM0I7O0FBaUJBOzs7QUFHQWhiLE1BQUl5SyxJQUFKLENBQVNwUCxNQUFULENBQWdCeEQsTUFBaEIsR0FBeUI7O0FBRXZCNmpCLFlBQVE7QUFDTkMsZ0JBQVUsQ0FBQyxHQUFELEVBQU0sR0FBTixDQURKO0FBRU4zaEIsb0JBQWMsOEVBQThFLEdBQTlFLEdBQ1pqRCxHQUFHRSxNQUFILENBQVVLLEdBQVYsQ0FBYzRDLFdBSFY7QUFJTlcsZUFBUyxDQUpIO0FBS05KLGVBQVMsRUFMSDtBQU1OTixtQkFBYTtBQU5QLEtBRmU7O0FBV3ZCeWhCLG1CQUFlO0FBQ2I1aEIsb0JBQWMsOEVBQThFLEdBQTlFLEdBQ1pqRCxHQUFHRSxNQUFILENBQVVLLEdBQVYsQ0FBYzRDLFdBRkg7QUFHYlcsZUFBUyxDQUhJO0FBSWJKLGVBQVMsRUFKSTtBQUtiTixtQkFBYTtBQUxBO0FBWFEsR0FBekI7O0FBb0JFOzs7QUFHQTtBQUNBNkYsTUFBSXlLLElBQUosQ0FBU3BQLE1BQVQsQ0FBZ0JuRCxNQUFoQixHQUF5Qjs7QUFFckIyakIsa0JBQWM7QUFDVjFULGNBQVEsSUFBSXBSLEdBQUdvUixNQUFILENBQVUyVCxHQUFkLEVBREU7QUFFVkMsZ0JBQVdobEIsR0FBR2lsQixRQUFILENBQVlDLFNBQVosQ0FBc0IsRUFBQ04sVUFBVSxHQUFYLEVBQWdCbGhCLFNBQVMsRUFBekIsRUFBdEIsQ0FGRCxFQUVzRDtBQUNoRXloQixzQkFBZ0IsQ0FITjtBQUlWbGlCLG9CQUFjLDJFQUEyRSxHQUEzRSxHQUNkakQsR0FBR0UsTUFBSCxDQUFVSyxHQUFWLENBQWM0QyxXQUxKO0FBTVZXLGVBQVMsQ0FOQztBQU9WSixlQUFTLEVBUEM7QUFRVk4sbUJBQWE7QUFSSCxLQUZPOztBQWFyQmdpQixpQkFBYTtBQUNUaFUsY0FBUSxJQUFJcFIsR0FBR29SLE1BQUgsQ0FBVTJULEdBQWQsRUFEQztBQUVUQyxnQkFBV2hsQixHQUFHaWxCLFFBQUgsQ0FBWUMsU0FBWixDQUFzQixFQUFDTixVQUFVLEdBQVgsRUFBZ0JsaEIsU0FBUyxFQUF6QixFQUF0QixDQUZGLEVBRXVEO0FBQ2hFeWhCLHNCQUFnQixDQUhQO0FBSVRsaUIsb0JBQWMseUVBQXlFLEdBQXpFLEdBQ2RqRCxHQUFHRSxNQUFILENBQVVLLEdBQVYsQ0FBYzRDLFdBTEw7QUFNVFcsZUFBUyxDQU5BO0FBT1RKLGVBQVMsRUFQQTtBQVFUTixtQkFBYTtBQVJKO0FBYlEsR0FBekI7O0FBeUJBOzs7QUFHQTZGLE1BQUl5SyxJQUFKLENBQVNwUCxNQUFULENBQWdCMUMsSUFBaEIsR0FBdUI7O0FBRW5CeWpCLFVBQU07QUFDRlQsZ0JBQVUsQ0FBQyxHQUFELEVBQU0sR0FBTixDQURSO0FBRUYzaEIsb0JBQWMsOEVBQTZFLEdBQTdFLEdBQ1ZqRCxHQUFHRSxNQUFILENBQVVLLEdBQVYsQ0FBYzRDLFdBSGhCO0FBSUZXLGVBQVMsQ0FKUDtBQUtGSixlQUFTLEVBTFA7QUFNRk4sbUJBQWE7QUFOWDs7QUFGYSxHQUF2Qjs7QUFhQTs7O0FBR0E2RixNQUFJeUssSUFBSixDQUFTcFAsTUFBVCxDQUFnQnhDLGFBQWhCLEdBQWdDOztBQUU1QndqQixtQkFBZTtBQUNYVixnQkFBVSxDQUFDLEdBQUQsRUFBTSxHQUFOLENBREM7QUFFWDNoQixvQkFBYywyRkFBMkYsR0FBM0YsR0FDVmpELEdBQUdFLE1BQUgsQ0FBVUssR0FBVixDQUFjNEMsV0FIUDtBQUlYVyxlQUFTLENBSkU7QUFLWEosZUFBUyxFQUxFO0FBTVhOLG1CQUFhO0FBTkY7O0FBRmEsR0FBaEM7QUFhSCxDQTNNQSxFQTJNQ3hHLE1BM01ELEVBMk1TLEtBQUtxTSxHQTNNZCxDQUFEOztBQTZNTyxJQUFJM0UsU0FBUyxLQUFLMkUsR0FBTCxDQUFTeUssSUFBVCxDQUFjcFAsTUFBM0IsQzs7Ozs7Ozs7Ozs7OztBQ2xOUDtBQUFBO0FBQ0EsS0FBSzJFLEdBQUwsR0FBVyxLQUFLQSxHQUFMLElBQVksRUFBdkI7QUFDQSxLQUFLQSxHQUFMLENBQVN5SyxJQUFULEdBQWdCLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULElBQWlCLEVBQWpDO0FBQ0EsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZGLFFBQWQsR0FBeUIsS0FBS3RRLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZGLFFBQWQsSUFBMEIsRUFBbkQ7O0FBRUMsV0FBVS9ZLENBQVYsRUFBYXlJLEdBQWIsRUFBa0I7QUFDakI7O0FBRUE7Ozs7QUFHQUEsTUFBSXlLLElBQUosQ0FBUzZGLFFBQVQsQ0FBa0JnTSxJQUFsQixHQUF5Qi9rQixFQUFFSCxNQUFGLENBQVM0SSxJQUFJeUssSUFBSixDQUFTNkYsUUFBVCxDQUFrQmdNLElBQTNCLEVBQWlDOztBQUV4REMsVUFBTSxJQUZrRDs7QUFJeERDLFVBQU0sTUFKa0Q7QUFLeEQzSSxVQUFNLFdBTGtEO0FBTXhENEksV0FBTyxXQU5pRDtBQU94REMsV0FBTyxLQVBpRDtBQVF4REMsY0FBVSxVQVI4QztBQVN4REMsVUFBTSxPQVRrRDtBQVV4REMsYUFBUyxRQVYrQztBQVd4REMsWUFBUSxRQVhnRDtBQVl4REMsZUFBVyxRQVo2QztBQWF4REMsWUFBUSxPQWJnRDtBQWN4REMsaUJBQWEsZUFkMkM7QUFleERDLFlBQVEsUUFmZ0Q7QUFnQnhEQyxhQUFTLGVBaEIrQztBQWlCeERDLHVCQUFtQiw0QkFqQnFDOztBQW1CeERDLGtCQUFjLFlBbkIwQztBQW9CeERDLG1CQUFlLGFBcEJ5QztBQXFCeERDLG1CQUFlLHFCQXJCeUM7QUFzQnhEQyxvQkFBZ0IsNkJBdEJ3QztBQXVCeERDLG1CQUFlLHdCQXZCeUM7QUF3QnhEQyxzQkFBa0IsYUF4QnNDO0FBeUJ4REMseUJBQXFCLDBDQXpCbUM7QUEwQnhEQyxtQkFBZSwwQkExQnlDO0FBMkJ4REMsaUJBQWEsd0JBM0IyQztBQTRCeERDLGlCQUFhLHdCQTVCMkM7QUE2QnhEQyx1QkFBbUIsK0JBN0JxQztBQThCeERDLG1CQUFlLDJCQTlCeUM7QUErQnhEQywwQkFBc0IsdUJBL0JrQztBQWdDeERDLGtCQUFjLHlCQWhDMEM7QUFpQ3hEQyxvQkFBZ0IsTUFqQ3dDO0FBa0N4REMsc0JBQWtCLFNBbENzQztBQW1DeERDLG9CQUFnQix1QkFuQ3dDO0FBb0N4REMsdUJBQW1CLGVBcENxQztBQXFDeERDLHNCQUFrQixpQ0FyQ3NDO0FBc0N4REMsdUJBQW1CLHFCQXRDcUM7QUF1Q3hEQyxvQkFBZ0IsMkJBdkN3QztBQXdDeERDLG9CQUFnQiwyQkF4Q3dDO0FBeUN4REMsc0JBQWtCLHNCQXpDc0M7QUEwQ3hEQyxlQUFXLHdCQTFDNkM7QUEyQ3hEQyxvQkFBZ0Isc0JBM0N3QztBQTRDeERDLHFCQUFpQixnQ0E1Q3VDO0FBNkN4REMsZ0JBQVksbUJBN0M0Qzs7QUErQ3hEQyxZQUFRLFFBL0NnRDtBQWdEeERDLG1DQUErQiw4QkFoRHlCO0FBaUR4REMsaUNBQTZCLG1CQWpEMkI7QUFrRHhEQywwQkFBc0IsbUJBbERrQztBQW1EeERDLDJCQUF1QixpQkFuRGlDO0FBb0R4REMsMkJBQXVCLGlDQXBEaUM7QUFxRHhEQyx3QkFBb0Isa0RBckRvQztBQXNEeERDLG1DQUErQix3RUF0RHlCO0FBdUR4REMsZ0NBQTRCLGVBdkQ0QjtBQXdEeERDLG9DQUFnQyxnQkF4RHdCO0FBeUR4REMsdUNBQW1DLG1CQXpEcUI7QUEwRHhEQyx5Q0FBcUMsbUJBMURtQjtBQTJEeERDLHNDQUFrQyxrQkEzRHNCO0FBNER4REMscUNBQWlDLGdCQTVEdUI7O0FBOER4REMsc0JBQWtCLGdCQTlEc0M7QUErRHhEQyxvQkFBZ0IsZUEvRHdDOztBQWlFeERDLGVBQVcsV0FqRTZDO0FBa0V4REMseUJBQXFCLGFBbEVtQztBQW1FeERDLHFCQUFpQixRQW5FdUM7QUFvRXhEQyw4Q0FBMEMsYUFwRWM7QUFxRXhEQywwQ0FBc0MsZ0JBckVrQjs7QUF1RXhEQyxlQUFXLFdBdkU2Qzs7QUF5RXhEQywrQkFBMkIsY0F6RTZCO0FBMEV4REMsdUJBQW1CLE9BMUVxQztBQTJFeERDLHVCQUFtQixjQTNFcUM7QUE0RXhEQyxxQkFBaUIsTUE1RXVDO0FBNkV4REMsd0JBQW9CLFNBN0VvQztBQThFeERDLHVCQUFtQixFQTlFcUM7QUErRXhEQywwQkFBc0IsY0EvRWtDOztBQWlGeERDLG1CQUFjLDRCQWpGMEM7QUFrRnhEQyxpQkFBWSx5QkFsRjRDO0FBbUZ4REMsa0JBQWEsNEJBbkYyQzs7QUFxRnhEQyw2QkFBeUIsUUFyRitCO0FBc0Z4REMsZ0NBQTRCLGFBdEY0QjtBQXVGeERDLDRCQUF3QixPQXZGZ0M7QUF3RnhEQywrQkFBMkIsU0F4RjZCOztBQTBGeERDLCtCQUEyQix5QkExRjZCO0FBMkZ4REMsZ0NBQTRCLHNDQTNGNEI7O0FBNkZ4REMsWUFBUSxRQTdGZ0Q7QUE4RnhEQyxjQUFVLFFBOUY4QztBQStGeERDLGNBQVUsS0EvRjhDO0FBZ0d4REMsY0FBVSxPQWhHOEM7QUFpR3hEQyxjQUFVLFFBakc4QztBQWtHeERDLGVBQVcsU0FsRzZDO0FBbUd4REMsZUFBVyxRQW5HNkM7QUFvR3hEQyxlQUFXLFNBcEc2QztBQXFHeERDLGVBQVcsVUFyRzZDO0FBc0d4REMsd0JBQW9CLHNDQXRHb0M7QUF1R3hEQyx3QkFBb0Isd0NBdkdvQztBQXdHeERDLHdCQUFvQix3Q0F4R29DO0FBeUd4REMsd0JBQW9CLGlDQXpHb0M7QUEwR3hEQyx3QkFBb0Isd0NBMUdvQztBQTJHeERDLHdCQUFvQix3QkEzR29DO0FBNEd4REMsd0JBQW9CLHVDQTVHb0M7QUE2R3hEQyx3QkFBb0IsZ0NBN0dvQztBQThHeERDLHdCQUFvQix1Q0E5R29DO0FBK0d4REMseUJBQXFCLCtDQS9HbUM7QUFnSHhELDZCQUF5Qiw0RkFoSCtCO0FBaUh4RCw2QkFBeUIsNkZBakgrQjtBQWtIeEQsNkJBQXlCLDZGQWxIK0I7QUFtSHhELDZCQUF5Qiw2RkFuSCtCO0FBb0h4RCw2QkFBeUIsNkZBcEgrQjtBQXFIeEQsNkJBQXlCLDhGQXJIK0I7QUFzSHhELDZCQUF5Qiw2RkF0SCtCO0FBdUh4RCw2QkFBeUIsNEZBdkgrQjtBQXdIeEQsNkJBQXlCLDZGQXhIK0I7QUF5SHhELDZCQUF5Qix3R0F6SCtCO0FBMEh4REMseUJBQXFCLDZCQTFIbUM7O0FBNEh4RCx5QkFBcUIsNEJBNUhtQztBQTZIeEQseUJBQXFCLCtDQTdIbUM7QUE4SHhELHlCQUFxQixpQ0E5SG1DO0FBK0h4RCx5QkFBcUIsbUNBL0htQztBQWdJeEQseUJBQXFCLCtCQWhJbUM7QUFpSXhELHlCQUFxQiwrQkFqSW1DO0FBa0l4RCx5QkFBcUIsOEJBbEltQztBQW1JeEQseUJBQXFCLCtDQW5JbUM7QUFvSXhELHlCQUFxQiw4QkFwSW1DO0FBcUl4RCx5QkFBcUIsK0NBckltQztBQXNJeEQsMEJBQXNCLHlDQXRJa0M7QUF1SXhELDBCQUFzQixpRUF2SWtDO0FBd0l4RCwwQkFBc0IsaUVBeElrQztBQXlJeEQsMEJBQXNCLDRCQXpJa0M7QUEwSXhELDBCQUFzQiwyQkExSWtDOztBQTRJeEQsd0JBQXNCLE9BNUlrQztBQTZJeEQsd0JBQXNCLGVBN0lrQztBQThJeEQsd0JBQXNCLFFBOUlrQztBQStJeEQsd0JBQXNCLGVBL0lrQztBQWdKeEQsd0JBQXNCLFdBaEprQztBQWlKeEQsd0JBQXNCLGNBakprQztBQWtKeEQsd0JBQXNCLE9BbEprQztBQW1KeEQsd0JBQXNCLGNBbkprQztBQW9KeEQsd0JBQXNCLGFBcEprQzs7QUFzSnhEQyxpQkFBYSxPQXRKMkM7QUF1SnhEQyxlQUFXLE1Bdko2QztBQXdKeERDLHVCQUFtQixjQXhKcUM7QUF5SnhEQyx5QkFBcUIsZUF6Sm1DO0FBMEp4REMsc0JBQWtCLG9CQTFKc0M7QUEySnhEQyxzQkFBa0IsT0EzSnNDO0FBNEp4REMscUJBQWlCLFNBNUp1QztBQTZKeERDLGlCQUFhLE1BN0oyQztBQThKeERDLDBCQUFzQixxQkE5SmtDO0FBK0p4REMsZ0NBQTRCLG1DQS9KNEI7QUFnS3hEQyxzQkFBa0Isa0JBaEtzQztBQWlLeERDLDRCQUF3QixnQ0FqS2dDO0FBa0t4REMsdUJBQW1CLG1CQWxLcUM7QUFtS3hEQyw2QkFBeUIsaUNBbksrQjs7QUFxS3hEQyxrQkFBYyxlQXJLMEM7QUFzS3hEQyx1QkFBbUIsd0dBdEtxQztBQXVLeERDLGtDQUE4QixtRUF2SzBCO0FBd0t4REMsc0NBQWtDLGVBeEtzQjtBQXlLeERDLCtDQUEyQyxpQkF6S2E7QUEwS3hEQyw0Q0FBd0MsZ0JBMUtnQjtBQTJLeERDLDJDQUF1QyxlQTNLaUI7QUE0S3hEQyw2Q0FBeUMsaUJBNUtlOztBQThLeERDLDhCQUEwQixrQkE5SzhCOztBQWdMeERDLGNBQVUsZUFoTDhDO0FBaUx4REMscUJBQWlCLE9Bakx1QztBQWtMeERDLGtDQUE4QixnQkFsTDBCO0FBbUx4REMsYUFBUyxTQW5MK0M7QUFvTHhEQywwQkFBc0Isa0JBcExrQzs7QUFzTHhEQyxzQkFBa0IscUZBdExzQzs7QUF3THhEdEosVUFBTSxFQXhMa0QsQ0F3TC9DO0FBeEwrQyxHQUFqQyxDQUF6QixDQU5pQixDQStMYjtBQUVMLENBak1BLEVBaU1Dcm5CLE1Bak1ELEVBaU1TLEtBQUtxTSxHQWpNZCxDQUFEOztBQW1NTyxJQUFJdWtCLHNCQUFzQixLQUFLdmtCLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZGLFFBQWQsQ0FBdUJnTSxJQUFqRCxDOzs7Ozs7Ozs7Ozs7O0FDeE1QO0FBQUE7QUFDQSxLQUFLdGMsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjNkYsUUFBZCxHQUF5QixLQUFLdFEsR0FBTCxDQUFTeUssSUFBVCxDQUFjNkYsUUFBZCxJQUEwQixFQUFuRDs7QUFFQyxXQUFVL1ksQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7OztBQUdBQSxNQUFJeUssSUFBSixDQUFTNkYsUUFBVCxDQUFrQmdNLElBQWxCLEdBQXlCL2tCLEVBQUVILE1BQUYsQ0FBUzRJLElBQUl5SyxJQUFKLENBQVM2RixRQUFULENBQWtCZ00sSUFBM0IsRUFBaUM7O0FBRXhEQyxVQUFNLElBRmtEOztBQUl4REMsVUFBTSxNQUprRDtBQUt4RDNJLFVBQU0sTUFMa0Q7QUFNeEQ0SSxXQUFPLE9BTmlEO0FBT3hEQyxXQUFPLEtBUGlEO0FBUXhEQyxjQUFVLFVBUjhDO0FBU3hEQyxVQUFNLE1BVGtEO0FBVXhEQyxhQUFTLE1BVitDO0FBV3hEQyxZQUFRLFFBWGdEO0FBWXhEQyxlQUFXLFdBWjZDO0FBYXhEQyxZQUFRLFFBYmdEO0FBY3hEQyxpQkFBYSxjQWQyQztBQWV4REMsWUFBUSxRQWZnRDtBQWdCeERDLGFBQVMsU0FoQitDO0FBaUJ4REMsdUJBQW1CLG1CQWpCcUM7O0FBbUJ4REMsa0JBQWMsU0FuQjBDO0FBb0J4REMsbUJBQWUsVUFwQnlDO0FBcUJ4REMsbUJBQWUsZUFyQnlDO0FBc0J4REMsb0JBQWdCLDBCQXRCd0M7QUF1QnhEQyxtQkFBZSxpQ0F2QnlDO0FBd0J4REMsc0JBQWtCLGFBeEJzQztBQXlCeERDLHlCQUFxQixtQ0F6Qm1DO0FBMEJ4REMsbUJBQWUsaUJBMUJ5QztBQTJCeERDLGlCQUFhLGVBM0IyQztBQTRCeERDLGlCQUFhLGVBNUIyQztBQTZCeERDLHVCQUFtQixxQkE3QnFDO0FBOEJ4REMsbUJBQWUsaUJBOUJ5QztBQStCeERDLDBCQUFzQixjQS9Ca0M7QUFnQ3hEQyxrQkFBYyxnQkFoQzBDO0FBaUN4REMsb0JBQWdCLE1BakN3QztBQWtDeERDLHNCQUFrQixTQWxDc0M7QUFtQ3hEQyxvQkFBZ0Isa0JBbkN3QztBQW9DeERDLHVCQUFtQixjQXBDcUM7QUFxQ3hEQyxzQkFBa0Isb0JBckNzQztBQXNDeERDLHVCQUFtQixrQkF0Q3FDO0FBdUN4REMsb0JBQWdCLGtCQXZDd0M7QUF3Q3hEQyxvQkFBZ0Isa0JBeEN3QztBQXlDeERDLHNCQUFrQixrQkF6Q3NDO0FBMEN4REMsZUFBVyxhQTFDNkM7QUEyQ3hEQyxvQkFBZ0Isb0JBM0N3QztBQTRDeERDLHFCQUFpQix3QkE1Q3VDO0FBNkN4REMsZ0JBQVksWUE3QzRDOztBQStDeERDLFlBQVEsUUEvQ2dEO0FBZ0R4REMsbUNBQStCLHVCQWhEeUI7QUFpRHhEQyxpQ0FBNkIsZUFqRDJCO0FBa0R4REMsMEJBQXNCLGtCQWxEa0M7QUFtRHhEQywyQkFBdUIsZ0JBbkRpQztBQW9EeERDLDJCQUF1QixnQkFwRGlDO0FBcUR4REMsd0JBQW9CLDJDQXJEb0M7QUFzRHhEQyxtQ0FBK0IsNERBdER5QjtBQXVEeERDLGdDQUE0QixhQXZENEI7QUF3RHhEQyxvQ0FBZ0MsVUF4RHdCO0FBeUR4REMsdUNBQW1DLGVBekRxQjtBQTBEeERDLHlDQUFxQyxZQTFEbUI7QUEyRHhEQyxzQ0FBa0MsV0EzRHNCO0FBNER4REMscUNBQWlDLGFBNUR1Qjs7QUE4RHhEQyxzQkFBa0IsaUJBOURzQztBQStEeERDLG9CQUFnQixlQS9Ed0M7O0FBaUV4REMsZUFBVyxXQWpFNkM7QUFrRXhEQyx5QkFBcUIsV0FsRW1DO0FBbUV4REMscUJBQWlCLE9BbkV1QztBQW9FeERDLDhDQUEwQyxtQkFwRWM7QUFxRXhEQywwQ0FBc0MsZUFyRWtCOztBQXVFeERFLCtCQUEyQixZQXZFNkI7QUF3RXhEQyx1QkFBbUIsT0F4RXFDO0FBeUV4REUscUJBQWlCLEtBekV1QztBQTBFeERDLHdCQUFvQixRQTFFb0M7QUEyRXhEQyx1QkFBbUIsRUEzRXFDO0FBNEV4REMsMEJBQXNCLGVBNUVrQzs7QUE4RXhEQyxtQkFBYyw4QkE5RTBDO0FBK0V4REMsaUJBQVksa0JBL0U0QztBQWdGeERDLGtCQUFhLHlCQWhGMkM7O0FBbUZ4REMsNkJBQXlCLFFBbkYrQjtBQW9GeERDLGdDQUE0QixXQXBGNEI7QUFxRnhEQyw0QkFBd0IsT0FyRmdDO0FBc0Z4REMsK0JBQTBCLFNBdEY4Qjs7QUF3RnhEQywrQkFBMkIsb0JBeEY2QjtBQXlGeERDLGdDQUE0Qix5QkF6RjRCOztBQTJGeERDLFlBQVEsUUEzRmdEO0FBNEZ4REMsY0FBVSxZQTVGOEM7QUE2RnhEQyxjQUFVLFdBN0Y4QztBQThGeERDLGNBQVUsWUE5RjhDO0FBK0Z4REMsY0FBVSxXQS9GOEM7QUFnR3hEQyxlQUFXLGdCQWhHNkM7QUFpR3hEQyxlQUFXLGdCQWpHNkM7QUFrR3hEQyxlQUFXLGdCQWxHNkM7QUFtR3hEQyxlQUFXLGdCQW5HNkM7QUFvR3hEQyx3QkFBb0Isb0NBcEdvQztBQXFHeERDLHdCQUFvQixpQ0FyR29DO0FBc0d4REMsd0JBQW9CLCtCQXRHb0M7QUF1R3hEQyx3QkFBb0Isd0JBdkdvQztBQXdHeERDLHdCQUFvQiw4QkF4R29DO0FBeUd4REMsd0JBQW9CLHVCQXpHb0M7QUEwR3hEQyx3QkFBb0Isa0NBMUdvQztBQTJHeERDLHdCQUFvQiw0QkEzR29DO0FBNEd4REMsd0JBQW9CLGtDQTVHb0M7QUE2R3hEQyx5QkFBcUIsa0RBN0dtQztBQThHeEQsNkJBQXlCLHdEQTlHK0I7QUErR3hELDZCQUF5QixzREEvRytCO0FBZ0h4RCw2QkFBeUIsc0RBaEgrQjtBQWlIeEQsNkJBQXlCLHNEQWpIK0I7QUFrSHhELDZCQUF5QixzREFsSCtCO0FBbUh4RCw2QkFBeUIsc0RBbkgrQjtBQW9IeEQsNkJBQXlCLHNEQXBIK0I7QUFxSHhELDZCQUF5QixzREFySCtCO0FBc0h4RCw2QkFBeUIsc0RBdEgrQjtBQXVIeEQsNkJBQXlCLDBEQXZIK0I7QUF3SHhEQyx5QkFBcUIscUJBeEhtQzs7QUEwSHRELHlCQUFxQix5QkExSGlDO0FBMkh0RCx5QkFBcUIsa0RBM0hpQztBQTRIdEQseUJBQXFCLHdCQTVIaUM7QUE2SHRELHlCQUFxQixtQkE3SGlDO0FBOEh0RCx5QkFBcUIsa0NBOUhpQztBQStIdEQseUJBQXFCLGtDQS9IaUM7QUFnSXRELHlCQUFxQix5Q0FoSWlDO0FBaUl0RCx5QkFBcUIsOENBaklpQztBQWtJdEQseUJBQXFCLHlCQWxJaUM7QUFtSXRELHlCQUFxQixrQ0FuSWlDO0FBb0l0RCwwQkFBc0IsOEJBcElnQztBQXFJdEQsMEJBQXNCLHNEQXJJZ0M7QUFzSXRELDBCQUFzQixzREF0SWdDO0FBdUl0RCwwQkFBc0IseUJBdklnQztBQXdJdEQsMEJBQXNCLHFCQXhJZ0M7O0FBMEl0RCx3QkFBc0IsT0ExSWdDO0FBMkl0RCx3QkFBc0IsYUEzSWdDO0FBNEl0RCx3QkFBc0IsT0E1SWdDO0FBNkl0RCx3QkFBc0IsY0E3SWdDO0FBOEl0RCx3QkFBc0IsVUE5SWdDO0FBK0l0RCx3QkFBc0IsYUEvSWdDO0FBZ0p0RCx3QkFBc0IsTUFoSmdDO0FBaUp0RCx3QkFBc0IsWUFqSmdDO0FBa0p0RCx3QkFBc0IsU0FsSmdDOztBQW9KeERDLGlCQUFhLE9BcEoyQztBQXFKeERDLGVBQVcsS0FySjZDO0FBc0p4REMsdUJBQW1CLFlBdEpxQztBQXVKeERDLHlCQUFxQixlQXZKbUM7QUF3SnhEQyxzQkFBa0IsYUF4SnNDO0FBeUp4REMsc0JBQWtCLE9BekpzQztBQTBKeERDLHFCQUFpQixVQTFKdUM7QUEySnhEQyxpQkFBYSxNQTNKMkM7QUE0SnhEQywwQkFBc0IsdUJBNUprQztBQTZKeERDLGdDQUE0QixrQ0E3SjRCO0FBOEp4REMsc0JBQWtCLG1CQTlKc0M7QUErSnhEQyw0QkFBd0IsNkJBL0pnQztBQWdLeERDLHVCQUFtQixlQWhLcUM7QUFpS3hEQyw2QkFBeUIsNkJBaksrQjs7QUFtS3hEQyxrQkFBYyxjQW5LMEM7QUFvS3hEQyx1QkFBbUIsd0VBcEtxQztBQXFLeERDLGtDQUE4QixtREFySzBCO0FBc0t4REMsc0NBQWtDLGFBdEtzQjtBQXVLeERDLCtDQUEyQyxnQkF2S2E7QUF3S3hEQyw0Q0FBd0MsZUF4S2dCO0FBeUt4REMsMkNBQXVDLGdCQXpLaUI7QUEwS3hEQyw2Q0FBeUMsa0JBMUtlOztBQTRLeERDLDhCQUEwQixtQkE1SzhCOztBQThLeERDLGNBQVUsVUE5SzhDO0FBK0t4RE8sMkJBQXVCLG1CQS9LaUM7O0FBaUx4RE4scUJBQWlCLE9Bakx1QztBQWtMeERDLGtDQUE4QixZQWxMMEI7O0FBb0x4REMsYUFBUyxTQXBMK0M7QUFxTHhEQywwQkFBc0IsY0FyTGtDOztBQXVMeERDLHNCQUFrQixpQ0F2THNDOztBQXlMeER0SixVQUFNLEVBekxrRCxDQXlML0M7QUF6TCtDLEdBQWpDLENBQXpCLENBTmlCLENBZ01iO0FBRUwsQ0FsTUEsRUFrTUNybkIsTUFsTUQsRUFrTVMsS0FBS3FNLEdBbE1kLENBQUQ7O0FBb01PLElBQUl5a0IsdUJBQXVCLEtBQUt6a0IsR0FBTCxDQUFTeUssSUFBVCxDQUFjNkYsUUFBZCxDQUF1QmdNLElBQWxELEM7Ozs7Ozs7Ozs7Ozs7QUN6TVA7QUFBQTtBQUNBLEtBQUt0YyxHQUFMLEdBQVcsS0FBS0EsR0FBTCxJQUFZLEVBQXZCO0FBQ0EsS0FBS0EsR0FBTCxDQUFTeUssSUFBVCxHQUFnQixLQUFLekssR0FBTCxDQUFTeUssSUFBVCxJQUFpQixFQUFqQztBQUNBLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULENBQWM2RixRQUFkLEdBQXlCLEtBQUt0USxHQUFMLENBQVN5SyxJQUFULENBQWM2RixRQUFkLElBQTBCLEVBQW5EOztBQUVDLFdBQVUvWSxDQUFWLEVBQWF5SSxHQUFiLEVBQWtCO0FBQ2pCOztBQUVBOzs7O0FBR0FBLE1BQUl5SyxJQUFKLENBQVM2RixRQUFULENBQWtCQyxHQUFsQixHQUF3QmhaLEVBQUVILE1BQUYsQ0FBUzRJLElBQUl5SyxJQUFKLENBQVM2RixRQUFULENBQWtCQyxHQUEzQixFQUFnQzs7QUFFdERtVSxVQUFNLFVBRmdEO0FBR3REakksV0FBTyxXQUgrQztBQUl0RGtJLGVBQVcsZUFKMkM7QUFLdERDLGFBQVMsYUFMNkM7QUFNdERDLGNBQVUsY0FONEM7QUFPdERoUixVQUFNLFVBUGdEO0FBUXREaVIsVUFBTSxVQVJnRDtBQVN0REMsYUFBUyxhQVQ2QztBQVV0REMsVUFBTSxVQVZnRDtBQVd0RDdILGFBQVMsYUFYNkM7QUFZdEQzTSxZQUFRLFlBWjhDO0FBYXREeVUsY0FBVSxjQWI0QztBQWN0RHhVLGFBQVMsYUFkNkM7QUFldER5VSxvQkFBZ0Isb0JBZnNDO0FBZ0J0REMsV0FBTyxXQWhCK0M7QUFpQnREQyxXQUFPLFdBakIrQztBQWtCdERDLGdCQUFZLGdCQWxCMEM7QUFtQnREQyxjQUFVLGNBbkI0Qzs7QUFxQnREQyxzQkFBa0Isc0JBckJvQztBQXNCdERyb0IsMEJBQXNCLGdDQXRCZ0M7QUF1QnREc29CLDBCQUFzQixpQ0F2QmdDO0FBd0J0RGpvQiwwQkFBc0IsbUNBeEJnQztBQXlCdERJLDhCQUEwQix1Q0F6QjRCO0FBMEJ0RDhuQiwwQkFBc0Isb0NBMUJnQztBQTJCdERDLCtCQUEyQix3QkEzQjJCO0FBNEJ0REMsa0NBQThCLDJCQTVCd0I7QUE2QnREQyxvQ0FBZ0MsdUJBN0JzQjtBQThCdERDLGlDQUE2QiwwQkE5QnlCO0FBK0J0REMsZ0NBQTRCLHlCQS9CMEI7QUFnQ3REQyxpQ0FBNkIsMEJBaEN5QjtBQWlDdERDLHlCQUFxQixrQkFqQ2lDO0FBa0N0REMsMkJBQXVCLG9CQWxDK0I7QUFtQ3REQyx5QkFBcUIseUJBbkNpQztBQW9DdEQvRywwQkFBc0IsMEJBcENnQztBQXFDdERDLDJCQUF1QiwyQkFyQytCO0FBc0N0REMsMkJBQXVCLDJCQXRDK0I7QUF1Q3RERyxnQ0FBNEIsZ0NBdkMwQjtBQXdDdERDLG9DQUFnQyxvQ0F4Q3NCO0FBeUN0REMsdUNBQW1DLHVDQXpDbUI7QUEwQ3REQyx5Q0FBcUMsbUNBMUNpQjtBQTJDdERDLHNDQUFrQyxzQ0EzQ29CO0FBNEN0REMscUNBQWlDLHFDQTVDcUI7QUE2Q3REc0csZUFBVyxlQTdDMkM7QUE4Q3REQyx1QkFBbUIsdUJBOUNtQztBQStDdERDLHVCQUFtQix1QkEvQ21DO0FBZ0R0REMscUJBQWlCLHFCQWhEcUM7QUFpRHREQyxlQUFXLGVBakQyQztBQWtEdEQ1QyxzQ0FBa0Msc0NBbERvQjtBQW1EdERDLCtDQUEyQyx5Q0FuRFc7QUFvRHREQyw0Q0FBd0MsNENBcERjO0FBcUR0REMsMkNBQXVDLDJDQXJEZTtBQXNEdERDLDZDQUF5Qyw2Q0F0RGE7QUF1RHREeUMsV0FBTSxXQXZEZ0Q7QUF3RHREaEMsMkJBQXVCLDJCQXhEK0I7QUF5RHREUCxjQUFVLGNBekQ0QztBQTBEdERFLGtDQUE4QixrQ0ExRHdCO0FBMkR0REQscUJBQWlCLHFCQTNEcUM7QUE0RHRERywwQkFBc0IsMEJBNURnQztBQTZEdERELGFBQVMsYUE3RDZDO0FBOER0RHFDLGlCQUFhLGlCQTlEeUM7QUErRHREQyx5QkFBcUIseUJBL0RpQztBQWdFdERDLGtCQUFjLGtCQWhFd0M7QUFpRXREQyxlQUFXLGVBakUyQztBQWtFdERDLHFCQUFpQixxQkFsRXFDO0FBbUV0REMsaUJBQWEsaUJBbkV5QztBQW9FdERDLHlCQUFxQix5QkFwRWlDO0FBcUV0RGpILHNCQUFrQixzQkFyRW9DO0FBc0V0REMsb0JBQWdCLG9CQXRFc0M7QUF1RXREaUgsY0FBVSxjQXZFNEM7QUF3RXREQyx3QkFBb0Isd0JBeEVrQztBQXlFdERDLHNCQUFrQixzQkF6RW9DO0FBMEV0REMsc0JBQWtCLHNCQTFFb0M7QUEyRXREQyx1QkFBbUIsdUJBM0VtQztBQTRFdERDLDBCQUFzQiwwQkE1RWdDO0FBNkV0REMsZ0NBQTRCLGdDQTdFMEI7QUE4RXREQyw2QkFBeUIsNkJBOUU2QjtBQStFdERDLHdCQUFvQix3QkEvRWtDO0FBZ0Z0REMsNkJBQXlCLDZCQWhGNkI7QUFpRnREQyx1QkFBbUIsdUJBakZtQztBQWtGdERDLHdCQUFvQix3QkFsRmtDO0FBbUZ0REMscUJBQWlCLHFCQW5GcUM7QUFvRnREQyxtQkFBZSxtQkFwRnVDO0FBcUZ0REMsb0JBQWdCLG9CQXJGc0M7QUFzRnREQyxhQUFTLGFBdEY2QztBQXVGdEQvSCxlQUFXLGVBdkYyQztBQXdGdERnSSx5QkFBcUIseUJBeEZpQztBQXlGdERDLHVCQUFtQix1QkF6Rm1DO0FBMEZ0REMsdUJBQW1CLHVCQTFGbUM7QUEyRnREQyx3QkFBb0Isd0JBM0ZrQztBQTRGdERDLGlDQUE2QixpQ0E1RnlCO0FBNkZ0REMsOEJBQTBCLDhCQTdGNEI7QUE4RnREQyx5QkFBcUIseUJBOUZpQztBQStGdERDLDhCQUEwQiw4QkEvRjRCO0FBZ0d0REMsd0JBQW9CLHdCQWhHa0M7QUFpR3REQyx5QkFBcUIseUJBakdpQztBQWtHdERDLHNCQUFrQixzQkFsR29DO0FBbUd0RHZJLDhDQUEwQyw4Q0FuR1k7QUFvR3REQywwQ0FBc0MsMENBcEdnQjtBQXFHdER1SSxxQkFBaUIscUJBckdxQztBQXNHdERDLHlDQUFxQywrQkF0R2lCO0FBdUd0REMsNkJBQXlCLG1CQXZHNkI7QUF3R3REQyx5QkFBcUIsZUF4R2lDO0FBeUd0REMscUNBQWlDLDJCQXpHcUI7QUEwR3REQyxtQkFBZSxtQkExR3VDO0FBMkd0REMsZ0JBQVksZ0JBM0cwQzs7QUE2R3REQywwQkFBc0IsMEJBN0dnQztBQThHdERDLDRCQUF3Qiw0QkE5RzhCO0FBK0d0REMsdUJBQW1CLHVCQS9HbUM7QUFnSHREQyxxQkFBaUIscUJBaEhxQztBQWlIdERDLHdCQUFvQix3QkFqSGtDO0FBa0h0REMsc0JBQWtCLHNCQWxIb0M7QUFtSHREQyxnQ0FBNEIsZ0NBbkgwQjtBQW9IdERDLGlDQUE2QixpQ0FwSHlCO0FBcUh0REMsZ0NBQTRCLGdDQXJIMEI7O0FBdUh0RDdJLG1CQUFlLG1CQXZIdUM7QUF3SHREQyxpQkFBYSxpQkF4SHlDO0FBeUh0REMsa0JBQWMsa0JBekh3Qzs7QUEySHRENEksd0JBQW9CLHdCQTNIa0M7QUE0SHREQyx3QkFBb0Isd0JBNUhrQztBQTZIdERDLHlCQUFxQix5QkE3SGlDO0FBOEh0REMseUJBQXFCLHlCQTlIaUM7QUErSHREQywrQkFBMkIsK0JBL0gyQjs7QUFtSXREQywrQkFBMkIsOEJBbkkyQjtBQW9JdERDLDhCQUEwQiw2QkFwSTRCO0FBcUl0REMsa0NBQThCLGtDQXJJd0I7QUFzSXREQyxtQ0FBK0IsbUNBdEl1QjtBQXVJdERDLHdDQUFvQyx1Q0F2SWtCO0FBd0l0REMsNkNBQXlDLDRDQXhJYTtBQXlJdERDLDZDQUF5QyxrQ0F6SWE7QUEwSXREQyxpREFBNkMsc0NBMUlTOztBQTRJdERDLGdCQUFZLFlBNUkwQztBQTZJdERydEIscUJBQWlCLGlCQTdJcUM7O0FBK0l0RHN0Qix5QkFBcUIscUJBL0lpQztBQWdKdERDLDRCQUF3QiwrQkFoSjhCO0FBaUp0REMsaUJBQWEsYUFqSnlDO0FBa0p0REMsYUFBUyxTQWxKNkM7QUFtSnREQyxnQkFBWSxZQW5KMEM7QUFvSnREQyxpQkFBYSxnQkFwSnlDO0FBcUp0REMsa0JBQWMsY0FySndDO0FBc0p0REMsaUJBQWEsa0JBdEp5QztBQXVKdERDLHNCQUFrQixxQkF2Sm9DO0FBd0p0REMsdUJBQW1CLG1CQXhKbUM7QUF5SnREQyxzQkFBa0IsdUJBekpvQztBQTBKdERDLG9CQUFnQixnQkExSnNDO0FBMkp0REMseUJBQXFCLHFCQTNKaUM7O0FBNkp0RHJRLFVBQU0sRUE3SmdELENBNko3QztBQTdKNkMsR0FBaEMsQ0FBeEIsQ0FOaUIsQ0FvS2I7QUFFTCxDQXRLQSxFQXNLQ3JuQixNQXRLRCxFQXNLUyxLQUFLcU0sR0F0S2QsQ0FBRDs7QUF3S08sSUFBSS9DLGVBQWUsS0FBSytDLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZGLFFBQWQsQ0FBdUJDLEdBQTFDLEM7Ozs7Ozs7Ozs7Ozs7QUM3S1A7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFFQSxLQUFLdlEsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsR0FBd0IsS0FBS3RyQixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxJQUF5QixFQUFqRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSUMsZ0JBQWdCLEVBQXBCOztBQUVBLElBQUksT0FBTzd1QixPQUFQLEtBQW1CLFdBQXZCLEVBQW9DO0FBQ2xDLE1BQUlBLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUN6QkQsb0JBQWdCaEgsdUZBQWhCO0FBQ0QsR0FGRCxNQUVPLElBQUk3bkIsUUFBUTh1QixJQUFSLEtBQWlCLElBQXJCLEVBQTJCO0FBQ2hDRCxvQkFBZ0I5Ryx3RkFBaEI7QUFDRCxHQUZNLE1BRUE7QUFDTDtBQUNBOEcsb0JBQWdCaEgsdUZBQWhCO0FBQ0Q7QUFDRjtBQUNBLFdBQVVodEIsQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7Ozs7Ozs7O0FBUUFBLE1BQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQkcsSUFBakIsR0FBd0IsVUFBVTFZLFdBQVYsRUFBdUI7O0FBRTdDLFFBQUlyZixPQUFPLElBQVg7QUFDQSxRQUFJSCxVQUFVd2YsZUFBZSxFQUE3Qjs7QUFFQSxRQUFJeFksT0FBSixFQUNJbXhCLE1BREo7O0FBR0EsUUFBSUMsVUFBVSxJQUFJNTBCLEdBQUc2MEIsU0FBUCxDQUFpQjtBQUMzQjs7Ozs7QUFLQUMsa0JBQVk7QUFOZSxLQUFqQixDQUFkOztBQVNBO0FBQ0F0NEIsY0FBVWdFLEVBQUVILE1BQUYsQ0FBUztBQUNqQjRGLGlCQUFXQyx3RUFBWUEsQ0FBQ3NwQixTQURQO0FBRWpCdUYsa0JBQVksSUFGSztBQUdqQkMsZ0JBQVVSLGNBQWMzTSxTQUhQO0FBSWpCMVosYUFBTyxHQUpVO0FBS2pCOG1CLG9CQUFjO0FBTEcsS0FBVCxFQU1QejRCLE9BTk8sQ0FBVjs7QUFRQTtBQUNBO0FBQ0E7QUFDQSxRQUFJaUwsU0FBUyxTQUFUQSxNQUFTLEdBQVk7QUFDdkJtdEIsY0FBUU0sTUFBUixDQUFldjRCLEtBQUt3NEIsTUFBTCxFQUFmO0FBQ0EzMEIsUUFBRWdELE9BQUYsRUFBVzhWLFFBQVgsQ0FBb0JwVCx3RUFBWUEsQ0FBQzJuQixPQUFqQztBQUNBO0FBQ0E7QUFDQTtBQUNELEtBTkQ7O0FBUUE7QUFDQSxRQUFJdUgsVUFBVSxTQUFWQSxPQUFVLEdBQVk7QUFDeEJSLGNBQVFNLE1BQVIsQ0FBZSxJQUFmO0FBQ0ExMEIsUUFBRWdELE9BQUYsRUFBVzZ4QixXQUFYLENBQXVCbnZCLHdFQUFZQSxDQUFDMm5CLE9BQXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0QsS0FORDs7QUFRQTtBQUNBLFFBQUk1aUIsU0FBUyxTQUFUQSxNQUFTLENBQVVxcUIsS0FBVixFQUFpQjtBQUM1QkEsWUFBTUMsZUFBTjtBQUNBO0FBQ0EsV0FBS0MsSUFBTDtBQUNBLFVBQUlaLFFBQVFPLE1BQVIsRUFBSixFQUFzQjtBQUNwQkM7QUFDRCxPQUZELE1BRU87QUFDTDN0QjtBQUNEO0FBQ0YsS0FURDs7QUFXQTtBQUNBakUsY0FBVXVDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVjtBQUNBeEMsWUFBUXlDLFNBQVIsR0FBb0J6SixRQUFReUosU0FBUixHQUFvQixHQUFwQixHQUEwQkMsd0VBQVlBLENBQUNFLGVBQXZDLEdBQXlELEdBQXpELEdBQStERix3RUFBWUEsQ0FBQ3V0QixVQUFoRzs7QUFFQSxRQUFJajNCLFFBQVF1NEIsVUFBWixFQUF3QjtBQUN0QjtBQUNBSixlQUFTNXVCLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBVDtBQUNBMnVCLGFBQU9jLEtBQVAsR0FBZWo1QixRQUFRdzRCLFFBQXZCO0FBQ0F4eEIsY0FBUTJPLFdBQVIsQ0FBb0J3aUIsTUFBcEI7O0FBRUE7QUFDQUEsYUFBT2UsZ0JBQVAsQ0FBd0IsT0FBeEIsRUFBaUN6cUIsTUFBakMsRUFBeUMsS0FBekM7QUFDQTBwQixhQUFPZSxnQkFBUCxDQUF3QixZQUF4QixFQUFzQ3pxQixNQUF0QyxFQUE4QyxLQUE5QztBQUNEOztBQUVEO0FBQ0FqTCxPQUFHdTBCLE9BQUgsQ0FBV29CLE9BQVgsQ0FBbUJDLElBQW5CLENBQXdCLElBQXhCLEVBQThCO0FBQzVCcHlCLGVBQVNBLE9BRG1CO0FBRTVCcXlCLGNBQVFyNUIsUUFBUXE1QjtBQUZZLEtBQTlCOztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBRUQsR0FwRkQ7QUFxRkE3MUIsS0FBRzgxQixRQUFILENBQVk3c0IsSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCRyxJQUE3QixFQUFtQzEwQixHQUFHdTBCLE9BQUgsQ0FBV29CLE9BQTlDOztBQUdBOzs7QUFHQTFzQixNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJHLElBQWpCLENBQXNCcUIsU0FBdEIsR0FBa0N2MUIsRUFBRUgsTUFBRixDQUFTNEksSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCRyxJQUFqQixDQUFzQnFCLFNBQS9CLEVBQTBDOztBQUUxRTs7QUFGMEUsR0FBMUMsQ0FBbEMsQ0F0R2lCLENBMEdiO0FBRUwsQ0E1R0EsRUE0R0NuNUIsTUE1R0QsRUE0R1MsS0FBS3FNLEdBNUdkLENBQUQ7O0FBOEdPLElBQUl5ckIsT0FBTyxLQUFLenJCLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLENBQXNCRyxJQUFqQyxDOzs7Ozs7Ozs7Ozs7O0FDcElQO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOztBQUVBLEtBQUt6ckIsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsR0FBd0IsS0FBS3RyQixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxJQUF5QixFQUFqRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSUMsZ0JBQWdCLEVBQXBCOztBQUVBLElBQUksT0FBTzd1QixPQUFQLEtBQW1CLFdBQXZCLEVBQW9DO0FBQ2xDLE1BQUlBLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUN6QkQsb0JBQWdCaEgsdUZBQWhCO0FBQ0QsR0FGRCxNQUVPLElBQUk3bkIsUUFBUTh1QixJQUFSLEtBQWlCLElBQXJCLEVBQTJCO0FBQ2hDRCxvQkFBZ0I5Ryx3RkFBaEI7QUFDRCxHQUZNLE1BRUE7QUFDTDtBQUNBOEcsb0JBQWdCaEgsdUZBQWhCO0FBQ0Q7QUFDRjs7QUFFQSxXQUFVaHRCLENBQVYsRUFBYXlJLEdBQWIsRUFBa0I7QUFDakI7O0FBRUE7Ozs7Ozs7OztBQVFBQSxNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJ5QixJQUFqQixHQUF3QixVQUFVaGEsV0FBVixFQUF1Qjs7QUFFN0MsUUFBSXJmLE9BQU8sSUFBWDtBQUNBLFFBQUlILFVBQVV3ZixlQUFlLEVBQTdCOztBQUVBLFFBQUl4WSxPQUFKLEVBQ0lteEIsTUFESjs7QUFHQTtBQUNBbjRCLGNBQVVnRSxFQUFFSCxNQUFGLENBQVM7QUFDakI0RixpQkFBV0Msd0VBQVlBLENBQUM4dEIsWUFEUDtBQUVqQmUsa0JBQVksSUFGSztBQUdqQmtCLGVBQVMsSUFIUTtBQUlqQjE1QixxQkFBZTJTO0FBSkUsS0FBVCxFQUtQMVMsT0FMTyxDQUFWOztBQU9BLFFBQUksQ0FBQ0EsUUFBUUQsYUFBYixFQUE0QjtBQUMxQixhQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFJOEgsT0FBTzdILFFBQVFELGFBQVIsQ0FBc0JvSCxHQUF0QixDQUEwQkMsT0FBMUIsRUFBWDtBQUNBLFFBQUkrQixVQUFVbkosUUFBUUQsYUFBUixDQUFzQlMsSUFBcEM7O0FBRUEsUUFBSWlPLFNBQVMsU0FBVEEsTUFBUyxDQUFVcXFCLEtBQVYsRUFBaUI7QUFDNUJBLFlBQU1DLGVBQU47QUFDQTtBQUNBLFdBQUtDLElBQUw7O0FBRUFueEIsV0FBS3VVLFNBQUwsQ0FBZTVZLEdBQUc2USxJQUFILENBQVFxRCxTQUFSLENBQWtCLENBQUMrRCxXQUFXdFMsUUFBUUgsTUFBUixDQUFld08sR0FBMUIsQ0FBRCxFQUFpQ2lFLFdBQVd0UyxRQUFRSCxNQUFSLENBQWV5TyxHQUExQixDQUFqQyxDQUFsQixFQUFvRixXQUFwRixFQUFpRyxXQUFqRyxDQUFmO0FBQ0E1UCxXQUFLcUIsT0FBTCxDQUFheEgsU0FBU3lILFFBQVFILE1BQVIsQ0FBZUYsSUFBeEIsRUFBOEIsRUFBOUIsQ0FBYjtBQUNBakIsV0FBSzZ4QixXQUFMLENBQWlCamUsV0FBV3RTLFFBQVFILE1BQVIsQ0FBZXlCLFFBQTFCLENBQWpCOztBQUVBO0FBQ0EsVUFBSWt2QixXQUFKO0FBQ0EsVUFBSXh3QixRQUFReXdCLFdBQVosRUFBeUI7QUFDdkJELHNCQUFjLElBQUluMkIsR0FBR3EyQixXQUFQLENBQW1CO0FBQy9CQyxvQkFBVSxJQURxQjtBQUUvQnZ2QixzQkFBWTFDLEtBQUsyQyxhQUFMO0FBRm1CLFNBQW5CLENBQWQ7O0FBS0FtdkIsb0JBQVlsZixFQUFaLENBQWUsUUFBZixFQUF5QixVQUFVc2YsR0FBVixFQUFlO0FBQ3RDbHlCLGVBQUt1VSxTQUFMLENBQWV1ZCxZQUFZSyxXQUFaLEVBQWY7QUFDQSxjQUFJN3dCLFFBQVE4d0IsZ0JBQVosRUFBOEI7QUFDNUJweUIsaUJBQUtxQixPQUFMLENBQWF4SCxTQUFTeUgsUUFBUTh3QixnQkFBakIsRUFBbUMsRUFBbkMsQ0FBYjtBQUNEO0FBQ0ROLHNCQUFZTyxXQUFaLENBQXdCLEtBQXhCO0FBQ0QsU0FORDtBQU9EOztBQUVEbDZCLGNBQVFELGFBQVIsQ0FBc0JvSCxHQUF0QixDQUEwQjBELE9BQTFCLENBQWtDaEQsSUFBbEM7QUFDQTlGLG9FQUFLQSxDQUFDK0ksYUFBTixDQUFvQjlLLFFBQVFELGFBQTVCO0FBQ0QsS0E1QkQ7O0FBOEJBO0FBQ0FpSCxjQUFVdUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFWO0FBQ0F4QyxZQUFReUMsU0FBUixHQUFvQnpKLFFBQVF5SixTQUFSLEdBQW9CLEdBQXBCLEdBQTBCQyx3RUFBWUEsQ0FBQ0UsZUFBdkMsR0FBeUQsU0FBN0U7O0FBRUEsUUFBSTVKLFFBQVF1NEIsVUFBWixFQUF3QjtBQUN0QjtBQUNBSixlQUFTNXVCLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBVDtBQUNBMnVCLGFBQU9jLEtBQVAsR0FBZWo1QixRQUFRdzRCLFFBQXZCO0FBQ0F4eEIsY0FBUTJPLFdBQVIsQ0FBb0J3aUIsTUFBcEI7O0FBRUE7QUFDQUEsYUFBT2UsZ0JBQVAsQ0FBd0IsT0FBeEIsRUFBaUN6cUIsTUFBakMsRUFBeUMsS0FBekM7QUFDQTBwQixhQUFPZSxnQkFBUCxDQUF3QixZQUF4QixFQUFzQ3pxQixNQUF0QyxFQUE4QyxLQUE5QztBQUNEOztBQUVEO0FBQ0FqTCxPQUFHdTBCLE9BQUgsQ0FBV29CLE9BQVgsQ0FBbUJDLElBQW5CLENBQXdCLElBQXhCLEVBQThCO0FBQzVCcHlCLGVBQVNBLE9BRG1CO0FBRTVCcXlCLGNBQVFyNUIsUUFBUXE1QjtBQUZZLEtBQTlCO0FBSUQsR0F6RUQ7QUEwRUE3MUIsS0FBRzgxQixRQUFILENBQVk3c0IsSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCeUIsSUFBN0IsRUFBbUNoMkIsR0FBR3UwQixPQUFILENBQVdvQixPQUE5Qzs7QUFHQTs7O0FBR0Exc0IsTUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCeUIsSUFBakIsQ0FBc0JELFNBQXRCLEdBQWtDdjFCLEVBQUVILE1BQUYsQ0FBUzRJLElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQnlCLElBQWpCLENBQXNCRCxTQUEvQixFQUEwQzs7QUFFMUU7O0FBRjBFLEdBQTFDLENBQWxDLENBM0ZpQixDQStGYjtBQUVMLENBakdBLEVBaUdDbjVCLE1BakdELEVBaUdTLEtBQUtxTSxHQWpHZCxDQUFEOztBQW1HTyxJQUFJK3NCLE9BQU8sS0FBSy9zQixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxDQUFzQnlCLElBQWpDLEM7Ozs7Ozs7Ozs7Ozs7QUMzSFA7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOztBQUVBLEtBQUsvc0IsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsR0FBd0IsS0FBS3RyQixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxJQUF5QixFQUFqRDs7QUFFQTtBQUNBOztBQUVBLElBQUlDLGdCQUFnQixFQUFwQjs7QUFFQSxJQUFJLE9BQU83dUIsT0FBUCxLQUFtQixXQUF2QixFQUFvQztBQUNsQyxNQUFJQSxRQUFROHVCLElBQVIsS0FBaUIsSUFBckIsRUFBMkI7QUFDekJELG9CQUFnQmhILHVGQUFoQjtBQUNELEdBRkQsTUFFTyxJQUFJN25CLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUNoQ0Qsb0JBQWdCOUcsd0ZBQWhCO0FBQ0QsR0FGTSxNQUVBO0FBQ0w7QUFDQThHLG9CQUFnQmhILHVGQUFoQjtBQUNEO0FBQ0Y7O0FBRUEsV0FBVWh0QixDQUFWLEVBQWF5SSxHQUFiLEVBQWtCO0FBQ2pCOztBQUVBOzs7Ozs7Ozs7OztBQVVBQSxNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJvQyxXQUFqQixHQUErQixVQUFVbjZCLE9BQVYsRUFBbUI7O0FBRWhELFFBQUlnSCxPQUFKLEVBQ0lvekIsT0FESixFQUVJQyxXQUZKLEVBR0lDLEdBSEo7O0FBS0E7QUFDQXQ2QixjQUFVZ0UsRUFBRUgsTUFBRixDQUFTO0FBQ2pCMDJCLGlCQUFXLElBRE07QUFFakIvQixnQkFBVVIsY0FBY2hOLGdCQUZQO0FBR2pCN2tCLGNBQVEsQ0FBQyxJQUFJM0MsR0FBR2YsS0FBSCxDQUFTZ0IsSUFBYixDQUFrQixFQUFDQyxRQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVUssR0FBZCxFQUFULEVBQWxCLENBQUQ7QUFIUyxLQUFULEVBSVAvRCxPQUpPLENBQVY7O0FBTUFnSCxjQUFVdUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFWO0FBQ0F4QyxZQUFReUMsU0FBUixHQUFvQkMsd0VBQVlBLENBQUN1dEIsVUFBYixHQUEwQixHQUExQixHQUFnQ3Z0Qix3RUFBWUEsQ0FBQ3dwQixXQUE3QyxHQUEyRCxHQUEzRCxHQUFpRXhwQix3RUFBWUEsQ0FBQ0UsZUFBbEc7QUFDQSxRQUFJNUosUUFBUXU2QixTQUFaLEVBQXVCO0FBQ3JCdnpCLGNBQVF5QyxTQUFSLElBQXFCLE1BQU1DLHdFQUFZQSxDQUFDd2YsS0FBeEM7QUFDRCxLQUZELE1BRU87QUFDTGxpQixjQUFReUMsU0FBUixJQUFxQixNQUFNQyx3RUFBWUEsQ0FBQ3luQixJQUF4QztBQUNEO0FBQ0RueEIsWUFBUXE1QixNQUFSLENBQWUxakIsV0FBZixDQUEyQjNPLE9BQTNCOztBQUVBb3pCLGNBQVU3d0IsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFWO0FBQ0E0d0IsWUFBUW5CLEtBQVIsR0FBZ0JqNUIsUUFBUXc0QixRQUF4QjtBQUNBeHhCLFlBQVEyTyxXQUFSLENBQW9CeWtCLE9BQXBCOztBQUVBQyxrQkFBYzl3QixTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBQWQ7QUFDQTZ3QixnQkFBWTV3QixTQUFaLEdBQXdCQyx3RUFBWUEsQ0FBQzZuQixJQUFyQztBQUNBNkksWUFBUXprQixXQUFSLENBQW9CMGtCLFdBQXBCOztBQUVBcjJCLE1BQUVvMkIsT0FBRixFQUFXSSxLQUFYLENBQWlCLFlBQVk7QUFDM0IsVUFBSXgyQixFQUFFZ0QsT0FBRixFQUFXcVosUUFBWCxDQUFvQjNXLHdFQUFZQSxDQUFDd2YsS0FBakMsQ0FBSixFQUE2QztBQUMzQ2xsQixVQUFFZ0QsT0FBRixFQUFXNnhCLFdBQVgsQ0FBdUJudkIsd0VBQVlBLENBQUN3ZixLQUFwQyxFQUNLcE0sUUFETCxDQUNjcFQsd0VBQVlBLENBQUN5bkIsSUFEM0I7QUFFRCxPQUhELE1BR087QUFDTG50QixVQUFFZ0QsT0FBRixFQUFXOFYsUUFBWCxDQUFvQnBULHdFQUFZQSxDQUFDd2YsS0FBakMsRUFDSzJQLFdBREwsQ0FDaUJudkIsd0VBQVlBLENBQUN5bkIsSUFEOUI7QUFFRDtBQUNELFVBQUk7QUFDRixhQUFLNkgsSUFBTDtBQUNELE9BRkQsQ0FFRSxPQUFPeUIsTUFBUCxFQUFlLENBQ2hCO0FBQ0YsS0FaRDs7QUFjQUgsVUFBTSxJQUFJOTJCLEdBQUd1MEIsT0FBSCxDQUFXb0MsV0FBZixDQUEyQjtBQUMvQk8sbUJBQWEsS0FEa0I7QUFFL0JILGlCQUFXLEtBRm9CO0FBRy9CbEIsY0FBUXJ5QixPQUh1QjtBQUkvQmIsY0FBUW5HLFFBQVFtRztBQUplLEtBQTNCLENBQU47O0FBT0EsV0FBT20wQixHQUFQO0FBQ0QsR0FyREQ7O0FBd0RBOzs7QUFHQTd0QixNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJvQyxXQUFqQixDQUE2QlosU0FBN0IsR0FBeUN2MUIsRUFBRUgsTUFBRixDQUFTNEksSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCb0MsV0FBakIsQ0FBNkJaLFNBQXRDLEVBQWlEOztBQUV4Rjs7QUFGd0YsR0FBakQsQ0FBekMsQ0F4RWlCLENBNEViO0FBRUwsQ0E5RUEsRUE4RUNuNUIsTUE5RUQsRUE4RVMsS0FBS3FNLEdBOUVkLENBQUQ7O0FBZ0ZPLElBQUkwdEIsY0FBYyxLQUFLMXRCLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLENBQXNCb0MsV0FBeEMsQzs7Ozs7Ozs7Ozs7OztBQ3ZHUDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRUEsS0FBSzF0QixHQUFMLEdBQVcsS0FBS0EsR0FBTCxJQUFZLEVBQXZCO0FBQ0EsS0FBS0EsR0FBTCxDQUFTeUssSUFBVCxHQUFnQixLQUFLekssR0FBTCxDQUFTeUssSUFBVCxJQUFpQixFQUFqQztBQUNBLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxHQUF3QixLQUFLdHJCLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLElBQXlCLEVBQWpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUlDLGdCQUFnQixFQUFwQjs7QUFFQSxJQUFJLE9BQU83dUIsT0FBUCxLQUFtQixXQUF2QixFQUFvQztBQUNsQyxNQUFJQSxRQUFROHVCLElBQVIsS0FBaUIsSUFBckIsRUFBMkI7QUFDekJELG9CQUFnQmhILHVGQUFoQjtBQUNELEdBRkQsTUFFTyxJQUFJN25CLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUNoQ0Qsb0JBQWdCOUcsd0ZBQWhCO0FBQ0QsR0FGTSxNQUVBO0FBQ0w7QUFDQThHLG9CQUFnQmhILHVGQUFoQjtBQUNEO0FBQ0Y7O0FBRUEsV0FBVWh0QixDQUFWLEVBQWF5SSxHQUFiLEVBQWtCO0FBQ2pCOztBQUVBOzs7Ozs7Ozs7QUFRQUEsTUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCNEMsU0FBakIsR0FBNkIsVUFBVTM2QixPQUFWLEVBQW1COztBQUU5QyxRQUFJRyxJQUFKLEVBQ0lnNEIsTUFESixFQUVJeUMsVUFGSixFQUdJQyxhQUhKOztBQUtBLFNBQUsveUIsTUFBTCxHQUFjOUgsV0FBVyxFQUF6QjtBQUNBRyxXQUFPLElBQVA7O0FBRUE7QUFDQSxTQUFLMkgsTUFBTCxHQUFjOUQsRUFBRUgsTUFBRixDQUFTO0FBQ3JCNEYsaUJBQVdDLHdFQUFZQSxDQUFDMnBCLFNBREg7QUFFckI7QUFDQW1GLGdCQUFVUixjQUFjMU0sY0FISDtBQUlyQndQLG9CQUFjLEtBSk87QUFLckJucEIsYUFBTyxHQUxjO0FBTXJCMG5CLGNBQVEzbUI7QUFOYSxLQUFULEVBT1gsS0FBSzVLLE1BUE0sQ0FBZDs7QUFTQSxRQUFJLENBQUMsS0FBS0EsTUFBTCxDQUFZL0gsYUFBakIsRUFBZ0M7QUFDOUIsYUFBTyxLQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxTQUFLaUgsT0FBTCxHQUFldUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFmO0FBQ0EsU0FBS3hDLE9BQUwsQ0FBYXlDLFNBQWIsR0FBeUIsS0FBSzNCLE1BQUwsQ0FBWTJCLFNBQVosR0FBd0IsR0FBeEIsR0FBOEJDLHdFQUFZQSxDQUFDRSxlQUEzQyxHQUE2RCxHQUE3RCxHQUFtRUYsd0VBQVlBLENBQUN1dEIsVUFBekc7O0FBRUE7QUFDQWtCLGFBQVM1dUIsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFUO0FBQ0EydUIsV0FBT2MsS0FBUCxHQUFlLEtBQUtueEIsTUFBTCxDQUFZMHdCLFFBQTNCO0FBQ0EsU0FBS3h4QixPQUFMLENBQWEyTyxXQUFiLENBQXlCd2lCLE1BQXpCOztBQUVBO0FBQ0E7QUFDQTtBQUNBbjBCLE1BQUVtMEIsTUFBRixFQUFVcUMsS0FBVixDQUFnQixZQUFZO0FBQzFCLFVBQUk7QUFDRixhQUFLeEIsSUFBTDtBQUNELE9BRkQsQ0FFRSxPQUFPeUIsTUFBUCxFQUFlLENBRWhCO0FBQ0R0NkIsV0FBS3NPLE1BQUw7QUFDRCxLQVBEOztBQVNBO0FBQ0E7QUFDQTtBQUNBLFNBQUtzc0IsYUFBTCxHQUFxQixLQUFyQjtBQUNBLFNBQUt2cEIsS0FBTCxHQUFhakksU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFiO0FBQ0EsU0FBS2dJLEtBQUwsQ0FBVy9ILFNBQVgsR0FBdUJDLHdFQUFZQSxDQUFDOG5CLE9BQWIsR0FBdUIsR0FBdkIsR0FBNkI5bkIsd0VBQVlBLENBQUM0cEIsZUFBMUMsR0FBNEQsR0FBNUQsR0FBa0U1cEIsd0VBQVlBLENBQUN3ZixLQUF0Rzs7QUFFQTtBQUNBLFNBQUs4UixTQUFMLEdBQWlCenhCLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBakI7QUFDQSxTQUFLd3hCLFNBQUwsQ0FBZXByQixJQUFmLEdBQXNCLE1BQXRCO0FBQ0EsU0FBSzRCLEtBQUwsQ0FBV21FLFdBQVgsQ0FBdUIsS0FBS3FsQixTQUE1Qjs7QUFFQTtBQUNBSixpQkFBYXJ4QixTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWI7QUFDQW94QixlQUFXbnhCLFNBQVgsR0FBdUJDLHdFQUFZQSxDQUFDK25CLElBQWIsR0FBb0IsR0FBcEIsR0FBMEIvbkIsd0VBQVlBLENBQUM2bkIsSUFBOUQ7QUFDQXFKLGVBQVczQixLQUFYLEdBQW1CakIsY0FBY25PLGlCQUFqQztBQUNBK1EsZUFBV2xsQixZQUFYLENBQXdCLHVCQUF4QixFQUFpRCxNQUFNaE0sd0VBQVlBLENBQUM0cEIsZUFBbkIsR0FBcUMsdUJBQXRGO0FBQ0EsU0FBSzloQixLQUFMLENBQVdtRSxXQUFYLENBQXVCaWxCLFVBQXZCO0FBQ0EsUUFBSUssU0FBSixDQUFjTCxVQUFkOztBQUVBO0FBQ0FDLG9CQUFnQnR4QixTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWhCO0FBQ0FxeEIsa0JBQWNweEIsU0FBZCxHQUEwQkMsd0VBQVlBLENBQUNrZ0IsT0FBYixHQUF1QixHQUF2QixHQUE2QmxnQix3RUFBWUEsQ0FBQzZuQixJQUFwRTtBQUNBc0osa0JBQWM1QixLQUFkLEdBQXNCakIsY0FBY3BPLE9BQXBDO0FBQ0E1bEIsTUFBRTYyQixhQUFGLEVBQWlCTCxLQUFqQixDQUF1QixZQUFZO0FBQ2pDcjZCLFdBQUsrNkIsNEJBQUwsQ0FBa0MsRUFBQzdCLFFBQVFsNUIsS0FBSzY2QixTQUFkLEVBQWxDO0FBQ0QsS0FGRDtBQUdBLFNBQUt4cEIsS0FBTCxDQUFXbUUsV0FBWCxDQUF1QmtsQixhQUF2Qjs7QUFFQTtBQUNBcjNCLE9BQUd1MEIsT0FBSCxDQUFXb0IsT0FBWCxDQUFtQkMsSUFBbkIsQ0FBd0IsSUFBeEIsRUFBOEI7QUFDNUJweUIsZUFBUyxLQUFLQSxPQURjO0FBRTVCcXlCLGNBQVEsS0FBS3Z4QixNQUFMLENBQVl1eEI7QUFGUSxLQUE5QjtBQUlELEdBL0VEO0FBZ0ZBNzFCLEtBQUc4MUIsUUFBSCxDQUFZN3NCLElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQjRDLFNBQTdCLEVBQXdDbjNCLEdBQUd1MEIsT0FBSCxDQUFXb0IsT0FBbkQ7O0FBR0E7OztBQUdBMXNCLE1BQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQjRDLFNBQWpCLENBQTJCcEIsU0FBM0IsR0FBdUN2MUIsRUFBRUgsTUFBRixDQUFTNEksSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCNEMsU0FBakIsQ0FBMkJwQixTQUFwQyxFQUErQzs7QUFFcEY0QixVQUFNLGdCQUFZO0FBQ2hCLFVBQUksQ0FBQyxLQUFLSixhQUFWLEVBQXlCO0FBQ3ZCLzJCLFVBQUUsS0FBS3dOLEtBQVAsRUFBYzRwQixTQUFkLENBQXdCLENBQXhCO0FBQ0EsYUFBS3R6QixNQUFMLENBQVl1eEIsTUFBWixDQUFtQjFqQixXQUFuQixDQUErQixLQUFLbkUsS0FBcEM7QUFDQSxhQUFLdXBCLGFBQUwsR0FBcUIsSUFBckI7QUFDRDtBQUNELzJCLFFBQUUsS0FBS3dOLEtBQVAsRUFBY3FuQixXQUFkLENBQTBCbnZCLHdFQUFZQSxDQUFDd2YsS0FBdkMsRUFBOENwTSxRQUE5QyxDQUF1RHBULHdFQUFZQSxDQUFDeW5CLElBQXBFO0FBQ0FudEIsUUFBRSxLQUFLZ0QsT0FBUCxFQUFnQjhWLFFBQWhCLENBQXlCcFQsd0VBQVlBLENBQUN5bkIsSUFBdEM7QUFDQSxXQUFLK0osNEJBQUwsQ0FBa0MsRUFBQzdCLFFBQVEsS0FBSzJCLFNBQWQsRUFBbEM7QUFDRCxLQVhtRjs7QUFhcEZLLFdBQU8saUJBQVk7QUFDakJyM0IsUUFBRSxLQUFLd04sS0FBUCxFQUFjcW5CLFdBQWQsQ0FBMEJudkIsd0VBQVlBLENBQUN5bkIsSUFBdkMsRUFBNkNyVSxRQUE3QyxDQUFzRHBULHdFQUFZQSxDQUFDd2YsS0FBbkU7QUFDQWxsQixRQUFFLEtBQUtnRCxPQUFQLEVBQWdCNnhCLFdBQWhCLENBQTRCbnZCLHdFQUFZQSxDQUFDeW5CLElBQXpDO0FBQ0QsS0FoQm1GOztBQWtCcEYxaUIsWUFBUSxrQkFBWTtBQUNsQixVQUFJekssRUFBRSxLQUFLd04sS0FBUCxFQUFjNk8sUUFBZCxDQUF1QjNXLHdFQUFZQSxDQUFDd2YsS0FBcEMsQ0FBSixFQUFnRDtBQUM5QyxhQUFLaVMsSUFBTDtBQUNELE9BRkQsTUFFTztBQUNMLGFBQUtFLEtBQUw7QUFDRDtBQUNGLEtBeEJtRjs7QUEwQnBGSCxrQ0FBOEIsc0NBQVUxYixXQUFWLEVBQXVCO0FBQ25ELFVBQUl4ZixPQUFKLEVBQ0lGLEtBREosRUFFSXc3QixPQUZKLEVBR0lDLFVBSEosRUFJSUMsSUFKSixFQUtJeHlCLE1BTEosRUFNSXl5QixZQU5KLEVBT0lDLFFBUEosRUFRSXYxQixNQVJKOztBQVVBbkcsZ0JBQVV3ZixlQUFlLEVBQXpCO0FBQ0EsVUFBSSxDQUFDeGYsUUFBUTI3QixVQUFULElBQXVCLEVBQUUzN0IsUUFBUTI3QixVQUFSLEtBQXVCLENBQXZCLElBQTRCMzdCLFFBQVEyN0IsVUFBUixLQUF1QixDQUFuRCxJQUF3RDM3QixRQUFRMjdCLFVBQVIsS0FBdUIsQ0FBakYsQ0FBM0IsRUFBZ0g7QUFDOUczN0IsZ0JBQVEyN0IsVUFBUixHQUFxQixDQUFyQjtBQUNEOztBQUVESixtQkFBYSxFQUFiO0FBQ0FELGdCQUFVLEtBQUt4ekIsTUFBTCxDQUFZL0gsYUFBWixDQUEwQm9ILEdBQTFCLENBQThCQyxPQUE5QixFQUFWO0FBQ0F0SCxjQUFRLEtBQUtnSSxNQUFMLENBQVkvSCxhQUFaLENBQTBCRCxLQUFsQzs7QUFFQWtKLGVBQVNzeUIsUUFBUXJ5QixTQUFSLEVBQVQ7QUFDQUQsZUFBU3hGLEdBQUc2USxJQUFILENBQVFxRCxTQUFSLENBQWtCLENBQUMxTyxPQUFPLENBQVAsQ0FBRCxFQUFZQSxPQUFPLENBQVAsQ0FBWixDQUFsQixFQUEwQyxXQUExQyxFQUF1RCxXQUF2RCxDQUFUOztBQUVBdXlCLGlCQUFXdDVCLElBQVgsQ0FBZ0IsQ0FBQytHLE9BQU8sQ0FBUCxFQUFVNHlCLE9BQVYsQ0FBa0IsQ0FBbEIsQ0FBakI7QUFDQUwsaUJBQVd0NUIsSUFBWCxDQUFnQixDQUFDK0csT0FBTyxDQUFQLEVBQVU0eUIsT0FBVixDQUFrQixDQUFsQixDQUFqQjtBQUNBTCxpQkFBV3Q1QixJQUFYLENBQWdCcTVCLFFBQVF2eUIsT0FBUixFQUFoQjtBQUNBd3lCLGlCQUFXdDVCLElBQVgsQ0FBZ0IsQ0FBQ3E1QixRQUFRNXdCLFdBQVIsR0FBc0JreEIsT0FBdEIsQ0FBOEIsQ0FBOUIsQ0FBakI7O0FBRUE7QUFDQSxVQUFJOTdCLE1BQU02QyxpQkFBVixFQUE2QjtBQUMzQjQ0QixtQkFBV3Q1QixJQUFYLENBQWdCbkMsTUFBTTZDLGlCQUF0QjtBQUNELE9BRkQsTUFFTztBQUNMNDRCLG1CQUFXdDVCLElBQVgsQ0FBZ0IsQ0FBaEI7QUFDRDs7QUFFRDtBQUNBa0UsZUFBUyxFQUFUO0FBQ0EsV0FBS3UxQixRQUFMLElBQWlCNTdCLE1BQU13USxjQUF2QixFQUF1QztBQUNyQyxZQUFJeFEsTUFBTXdRLGNBQU4sQ0FBcUJ2SixjQUFyQixDQUFvQzIwQixRQUFwQyxDQUFKLEVBQW1EO0FBQ2pEdjFCLGlCQUFPbEUsSUFBUCxDQUFZUCxTQUFTZzZCLFFBQVQsRUFBbUIsRUFBbkIsQ0FBWjtBQUNEO0FBQ0Y7QUFDRDtBQUNBLFVBQUl2MUIsT0FBT3RFLE1BQVAsR0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckJzRSxpQkFBU3BFLDhEQUFLQSxDQUFDODVCLFdBQU4sQ0FBa0IxMUIsTUFBbEIsQ0FBVDtBQUNBQSxpQkFBU0EsT0FBTzIxQixJQUFQLENBQVksR0FBWixDQUFUO0FBQ0QsT0FIRCxNQUdPO0FBQ0wzMUIsaUJBQVNBLE9BQU8sQ0FBUCxLQUFhLEdBQXRCO0FBQ0Q7QUFDRG8xQixpQkFBV3Q1QixJQUFYLENBQWdCa0UsTUFBaEI7QUFDQW8xQixtQkFBYUEsV0FBV08sSUFBWCxDQUFnQixHQUFoQixDQUFiOztBQUVBO0FBQ0FOLGFBQU96NUIsOERBQUtBLENBQUNnNkIsV0FBTixDQUFrQlIsVUFBbEIsRUFBOEIsS0FBS3p6QixNQUFMLENBQVlnekIsWUFBMUMsQ0FBUDs7QUFFQSxVQUFJOTZCLFFBQVFxNUIsTUFBWixFQUFvQjtBQUNsQnI1QixnQkFBUXE1QixNQUFSLENBQWVwbUIsS0FBZixHQUF1QnVvQixJQUF2QjtBQUNELE9BRkQsTUFFTztBQUNMLGVBQU9BLElBQVA7QUFDRDtBQUNGLEtBdEZtRixFQXNGakY7O0FBRUhRLGtCQUFjLHNCQUFVVCxVQUFWLEVBQXNCO0FBQ2xDLFVBQUksQ0FBQ0EsVUFBRCxJQUFlLEVBQUVBLFdBQVcxNUIsTUFBWCxLQUFzQixDQUF0QixJQUEyQjA1QixXQUFXMTVCLE1BQVgsS0FBc0IsQ0FBakQsSUFBc0QwNUIsV0FBVzE1QixNQUFYLEtBQXNCLENBQTlFLENBQW5CLEVBQXFHO0FBQ25HLGVBQU8sS0FBUDtBQUNEOztBQUVEO0FBQ0EsYUFBT0UsOERBQUtBLENBQUNnNkIsV0FBTixDQUFrQlIsV0FBV08sSUFBWCxDQUFnQixHQUFoQixDQUFsQixFQUF3QyxLQUFLaDBCLE1BQUwsQ0FBWWd6QixZQUFwRCxDQUFQO0FBQ0QsS0EvRm1GLENBK0ZsRjs7QUEvRmtGLEdBQS9DLENBQXZDLENBakdpQixDQWtNYjtBQUVMLENBcE1BLEVBb01DMTZCLE1BcE1ELEVBb01TLEtBQUtxTSxHQXBNZCxDQUFEOztBQXNNTyxJQUFJa3VCLFlBQVksS0FBS2x1QixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxDQUFzQjRDLFNBQXRDLEM7Ozs7Ozs7Ozs7Ozs7QUM5TlA7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUEsS0FBS2x1QixHQUFMLEdBQVcsS0FBS0EsR0FBTCxJQUFZLEVBQXZCO0FBQ0EsS0FBS0EsR0FBTCxDQUFTeUssSUFBVCxHQUFnQixLQUFLekssR0FBTCxDQUFTeUssSUFBVCxJQUFpQixFQUFqQztBQUNBLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxHQUF3QixLQUFLdHJCLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLElBQXlCLEVBQWpEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQyxnQkFBZ0IsRUFBcEI7O0FBRUEsSUFBSSxPQUFPN3VCLE9BQVAsS0FBbUIsV0FBdkIsRUFBb0M7QUFDbEMsTUFBSUEsUUFBUTh1QixJQUFSLEtBQWlCLElBQXJCLEVBQTJCO0FBQ3pCRCxvQkFBZ0JoSCx1RkFBaEI7QUFDRCxHQUZELE1BRU8sSUFBSTduQixRQUFROHVCLElBQVIsS0FBaUIsSUFBckIsRUFBMkI7QUFDaENELG9CQUFnQjlHLHdGQUFoQjtBQUNELEdBRk0sTUFFQTtBQUNMO0FBQ0E4RyxvQkFBZ0JoSCx1RkFBaEI7QUFDRDtBQUNGOztBQUVBLFdBQVVodEIsQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7Ozs7Ozs7O0FBUUFBLE1BQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQmtFLE9BQWpCLEdBQTJCLFVBQVV6YyxXQUFWLEVBQXVCOztBQUVoRDtBQUNBLFNBQUt4ZixPQUFMLEdBQWVnRSxFQUFFSCxNQUFGLENBQVM7QUFDdEI0RixpQkFBV0Msd0VBQVlBLENBQUNtbkIsT0FERjtBQUV0Qmx2QixZQUFNLFNBRmdCO0FBR3RCdTZCLGdCQUFVbEUsY0FBY25ILE9BSEY7QUFJdEJzTCxjQUFRLElBSmM7QUFLdEJwOEIscUJBQWUyUyxTQUxPO0FBTXRCMHBCLGlCQUFXO0FBTlcsS0FBVCxFQU9aNWMsV0FQWSxDQUFmOztBQVNBLFFBQUksQ0FBQyxLQUFLeGYsT0FBTCxDQUFhRCxhQUFsQixFQUFpQztBQUMvQixhQUFPLEtBQVA7QUFDRDs7QUFFRCxTQUFLczhCLFdBQUwsR0FBbUI5eUIsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFuQjs7QUFFQTtBQUNBOHlCLGtGQUFTQSxDQUFDbEQsSUFBVixDQUFlLElBQWYsRUFBcUIsS0FBS3A1QixPQUExQjtBQUNELEdBcEJEO0FBcUJBd0QsS0FBRzgxQixRQUFILENBQVk3c0IsSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCa0UsT0FBN0IsRUFBc0NLLDhFQUF0Qzs7QUFFQTs7O0FBR0E3dkIsTUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCa0UsT0FBakIsQ0FBeUIxQyxTQUF6QixHQUFxQ3YxQixFQUFFSCxNQUFGLENBQVM0SSxJQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJrRSxPQUFqQixDQUF5QjFDLFNBQWxDLEVBQTZDOztBQUVoRjs7Ozs7O0FBTUFnRCxVQUFNLGdCQUFZO0FBQ2hCLFVBQUlwOEIsT0FBTyxJQUFYOztBQUVBLFdBQUthLE9BQUwsQ0FBYW9hLElBQWI7O0FBRUEsV0FBS29oQixXQUFMLEdBQW1CLEtBQUtDLGNBQUwsRUFBbkI7QUFDQSxXQUFLRCxXQUFMLENBQWlCRSxRQUFqQjs7QUFFQSxVQUFJNThCLFFBQVFLLEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQkQsS0FBdkM7QUFDQSxVQUFJcUgsTUFBTWhILEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQXJDOztBQUVBLFdBQUt3MUIsa0JBQUwsR0FBMEJwekIsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQUExQjtBQUNBLFdBQUttekIsa0JBQUwsQ0FBd0IvbUIsU0FBeEIsR0FBb0N6VixLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDbzhCLE9BQXBFO0FBQ0EsV0FBS1AsV0FBTCxDQUFpQjFtQixXQUFqQixDQUE2QixLQUFLZ25CLGtCQUFsQztBQUNBLFdBQUtFLGdCQUFMLENBQXNCQyxVQUF0QixDQUFpQyxLQUFLVCxXQUF0Qzs7QUFFQSxXQUFLcjdCLE9BQUwsQ0FBYUMsSUFBYjtBQUNBLGFBQU8sSUFBUDtBQUNELEtBMUIrRSxFQTBCN0U7OztBQUdIdzdCLG9CQUFnQiwwQkFBWTtBQUMxQixVQUFJTSxXQUFKOztBQUVFQSxvQkFBYyxLQUFLQyxPQUFMLENBQWE7QUFDM0JyN0IsY0FBTSxTQURxQjtBQUUzQnM3Qix1QkFBZTtBQUNiekUsb0JBQVVSLGNBQWNsSCxvQkFEWDtBQUVicm5CLHFCQUFXQyx3RUFBWUEsQ0FBQ29uQixvQkFGWDtBQUdib00sd0JBQWM7QUFIRCxTQUZZO0FBTzNCQyx5QkFBaUIsQ0FDZixFQUFDQyxTQUFTLEtBQUtQLGdCQUFmLEVBQWlDNzFCLFNBQVMsS0FBS3ExQixXQUEvQyxFQURlLEVBRWYsRUFBQ2UsU0FBUyxLQUFLQyxVQUFmLEVBQTJCcjJCLFNBQVMsS0FBS3MyQixjQUF6QyxFQUZlO0FBUFUsT0FBYixDQUFkOztBQWFGLGFBQU9QLFdBQVA7QUFDRCxLQTlDK0UsRUE4QzdFOztBQUVIUSxnQkFBWSxvQkFBVXY5QixPQUFWLEVBQW1CO0FBQzdCLFVBQUlHLElBQUosRUFDSXE5QixlQURKLEVBRUloQixXQUZKLEVBR0k5NEIsTUFISixFQUlJKzVCLFdBSkosRUFLSWp0QixRQUxKOztBQU9BclEsYUFBTyxJQUFQOztBQUVBOztBQUVBcThCLG9CQUFjcjhCLEtBQUtvOUIsVUFBTCxDQUFnQjtBQUM1QjU3QixjQUFNLFNBRHNCO0FBRTVCczdCLHVCQUFlO0FBQ2J6RSxvQkFBVSxTQURHLEVBQ087QUFDcEIvdUIscUJBQVcscUJBRkUsRUFFb0I7QUFDakN5ekIsd0JBQWM7QUFIRCxTQUZhO0FBTzVCQyx5QkFBaUIsQ0FDZixFQUFDQyxTQUFTajlCLEtBQUtrOUIsVUFBZixFQUEyQnIyQixTQUFTN0csS0FBS205QixjQUF6QyxFQURlLENBUFc7QUFVNUJJLHNCQUFjLHdCQUFZOztBQUV4QjtBQUNBdjlCLGVBQUthLE9BQUwsQ0FBYW9hLElBQWI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBNUsscUJBQVcsSUFBSWhOLEdBQUdtNkIsVUFBUCxFQUFYOztBQUVBeDlCLGVBQUthLE9BQUwsQ0FBYUMsSUFBYjtBQUNBLGlCQUFPLElBQVA7QUFDRCxTQXRDMkI7QUF1QzVCMjhCLDBCQUFrQiw0QkFBWSxDQUM3QixDQXhDMkI7QUF5QzVCQyw0QkFBb0IsOEJBQVksQ0FDL0I7QUExQzJCLE9BQWhCLENBQWQ7O0FBNkNBLGFBQU9yQixXQUFQO0FBQ0QsS0ExRytFLENBMEc5RTs7QUExRzhFLEdBQTdDLENBQXJDO0FBOEdELENBbkpBLEVBbUpDcDhCLE1BbkpELEVBbUpTLEtBQUtxTSxHQW5KZCxDQUFEOztBQXFKTyxJQUFJd3ZCLFVBQVUsS0FBS3h2QixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxDQUFzQmtFLE9BQXBDLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3S1A7O0FBRUEsS0FBS3h2QixHQUFMLEdBQVcsS0FBS0EsR0FBTCxJQUFZLEVBQXZCO0FBQ0EsS0FBS0EsR0FBTCxDQUFTeUssSUFBVCxHQUFnQixLQUFLekssR0FBTCxDQUFTeUssSUFBVCxJQUFpQixFQUFqQztBQUNBLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxHQUF3QixLQUFLdHJCLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLElBQXlCLEVBQWpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQyxnQkFBZ0IsRUFBcEI7O0FBRUEsSUFBSSxPQUFPN3VCLE9BQVAsS0FBbUIsV0FBdkIsRUFBb0M7QUFDbEMsTUFBSUEsUUFBUTh1QixJQUFSLEtBQWlCLElBQXJCLEVBQTJCO0FBQ3pCRCxvQkFBZ0JoSCx1RkFBaEI7QUFDRCxHQUZELE1BRU8sSUFBSTduQixRQUFROHVCLElBQVIsS0FBaUIsSUFBckIsRUFBMkI7QUFDaENELG9CQUFnQjlHLHdGQUFoQjtBQUNELEdBRk0sTUFFQTtBQUNMO0FBQ0E4RyxvQkFBZ0JoSCx1RkFBaEI7QUFDRDtBQUNGOztBQUVBLFdBQVVodEIsQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7Ozs7Ozs7O0FBUUFBLE1BQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQitGLE1BQWpCLEdBQTBCLFVBQVU5OUIsT0FBVixFQUFtQjs7QUFFM0M7QUFDQSxTQUFLQSxPQUFMLEdBQWVnRSxFQUFFSCxNQUFGLENBQVM7QUFDdEJsQyxZQUFNLFFBRGdCO0FBRXRCaU8sWUFBTSxVQUZnQjtBQUd0Qm11QixpQkFBVyxLQUhXO0FBSXRCNUIsY0FBUSxJQUpjO0FBS3RCcDhCLHFCQUFlMlMsU0FMTztBQU10QnNyQixpQkFBVyxDQUNULE9BRFMsRUFFVCxNQUZTLEVBR1QsU0FIUyxFQUlULFFBSlMsRUFLVCxVQUxTLENBTlc7QUFhdEI1QixpQkFBVyxNQWJXO0FBY3RCRixnQkFBVWxFLGNBQWN2TTtBQUN4QjtBQWZzQixLQUFULEVBZ0JaenJCLE9BaEJZLENBQWY7O0FBa0JBLFFBQUksQ0FBQyxLQUFLQSxPQUFMLENBQWFELGFBQWxCLEVBQWlDO0FBQy9CZSxjQUFRQyxJQUFSLENBQWEsMkRBQWI7QUFDQSxhQUFPLEtBQVA7QUFDRDs7QUFFRDtBQUNBO0FBQ0EsU0FBS2s5QixJQUFMLEdBQVksRUFBWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFLQyxtQkFBTCxHQUEyQnhyQixTQUEzQjtBQUNBLFNBQUs1UyxLQUFMLEdBQWEsS0FBS0UsT0FBTCxDQUFhRCxhQUFiLENBQTJCRCxLQUF4Qzs7QUFFQSxRQUFJLEtBQUtFLE9BQUwsQ0FBYSs5QixTQUFiLElBQTBCLE9BQU8sS0FBSy85QixPQUFMLENBQWErOUIsU0FBcEIsS0FBa0MsUUFBaEUsRUFBMEU7QUFDeEUsV0FBSy85QixPQUFMLENBQWErOUIsU0FBYixHQUF5Qi81QixFQUFFLEtBQUtoRSxPQUFMLENBQWErOUIsU0FBZixLQUE2QixLQUF0RDtBQUNEOztBQUVEO0FBQ0F6QixrRkFBU0EsQ0FBQ2xELElBQVYsQ0FBZSxJQUFmLEVBQXFCLEtBQUtwNUIsT0FBMUI7QUFDRCxHQTNDRDtBQTRDQXdELEtBQUc4MUIsUUFBSCxDQUFZN3NCLElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQitGLE1BQTdCLEVBQXFDeEIsOEVBQXJDOztBQUVBOzs7QUFHQTd2QixNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUIrRixNQUFqQixDQUF3QnZFLFNBQXhCLEdBQW9DdjFCLEVBQUVILE1BQUYsQ0FBUzRJLElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQitGLE1BQWpCLENBQXdCdkUsU0FBakMsRUFBNEM7O0FBRTlFOzs7Ozs7QUFNQWdELFVBQU0sY0FBVTRCLGdCQUFWLEVBQTRCO0FBQ2hDLFVBQUloK0IsSUFBSixFQUNJaStCLGtCQURKLEVBRUlDLFVBRko7O0FBSUFsK0IsYUFBTyxJQUFQO0FBQ0EsV0FBS2EsT0FBTCxDQUFhb2EsSUFBYjs7QUFFQWdqQiwyQkFBcUIsNEJBQVV0c0IsT0FBVixFQUFtQnZILFVBQW5CLEVBQStCO0FBQ2xELFlBQUlnUCxPQUFKOztBQUVBLFlBQUl6SCxXQUFXLE9BQU9BLFFBQVFwSixHQUFmLEtBQXVCLFVBQXRDLEVBQWtEO0FBQ2hEO0FBQ0E2USxvQkFBVXpILFFBQVFwSixHQUFSLENBQVksU0FBWixDQUFWO0FBQ0E7QUFDQSxjQUFJdkksS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEZ0gsT0FBaEQsQ0FBSixFQUE4RDtBQUM1RCxtQkFBT3BaLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxDQUFnRGdILE9BQWhELEVBQXlEMVcsS0FBekQsQ0FBK0RpUCxPQUEvRCxFQUF3RXZILFVBQXhFLENBQVA7QUFDRDtBQUNGO0FBQ0QsZUFBTyxLQUFQO0FBQ0QsT0FaRDs7QUFjQTtBQUNBLFdBQUsrekIsY0FBTCxHQUFzQixJQUFJOTZCLEdBQUdmLEtBQUgsQ0FBU3dSLE1BQWIsQ0FBb0IsRUFBQ3ZRLFFBQVEsSUFBSUYsR0FBR0UsTUFBSCxDQUFVdVEsTUFBZCxFQUFULEVBQWlDcFIsT0FBT3U3QixrQkFBeEMsRUFBcEIsQ0FBdEI7QUFDQSxXQUFLRyxhQUFMLEdBQXFCLElBQUkvNkIsR0FBR2YsS0FBSCxDQUFTd1IsTUFBYixDQUFvQixFQUFDdlEsUUFBUSxJQUFJRixHQUFHRSxNQUFILENBQVV1USxNQUFkLEVBQVQsRUFBaUNwUixPQUFPdTdCLGtCQUF4QyxFQUFwQixDQUFyQjtBQUNBLFdBQUtJLGdCQUFMLEdBQXdCLElBQUloN0IsR0FBR2YsS0FBSCxDQUFTd1IsTUFBYixDQUFvQixFQUFDdlEsUUFBUSxJQUFJRixHQUFHRSxNQUFILENBQVV1USxNQUFkLEVBQVQsRUFBaUNwUixPQUFPdTdCLGtCQUF4QyxFQUFwQixDQUF4QjtBQUNBLFdBQUtLLGVBQUwsR0FBdUIsSUFBSWo3QixHQUFHZixLQUFILENBQVN3UixNQUFiLENBQW9CLEVBQUN2USxRQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVXVRLE1BQWQsRUFBVCxFQUFpQ3BSLE9BQU91N0Isa0JBQXhDLEVBQXBCLENBQXZCO0FBQ0EsV0FBS00saUJBQUwsR0FBeUIsSUFBSWw3QixHQUFHZixLQUFILENBQVN3UixNQUFiLENBQW9CLEVBQUN2USxRQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVXVRLE1BQWQsRUFBVCxFQUFpQ3BSLE9BQU91N0Isa0JBQXhDLEVBQXBCLENBQXpCOztBQUVBLFdBQUtPLGNBQUwsR0FBc0IsSUFBSW43QixHQUFHZixLQUFILENBQVNnRixLQUFiLENBQW1CO0FBQ3ZDdEIsZ0JBQVEsSUFBSTNDLEdBQUdtNkIsVUFBUCxDQUFrQixDQUN4QixLQUFLZSxpQkFEbUIsRUFFeEIsS0FBS0QsZUFGbUIsRUFHeEIsS0FBS0QsZ0JBSG1CLEVBSXhCLEtBQUtELGFBSm1CLEVBS3hCLEtBQUtELGNBTG1CLENBQWxCLENBRCtCO0FBUXZDanVCLGlCQUFTO0FBUjhCLE9BQW5CLENBQXRCO0FBVUEsV0FBS3JRLE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCK1QsUUFBL0IsQ0FBd0MsS0FBS3lqQixjQUE3Qzs7QUFFQTtBQUNBLFdBQUtWLElBQUwsQ0FBVWg4QixJQUFWLENBQWUsS0FBSzI4QixhQUFMLEVBQWY7QUFDQSxXQUFLWCxJQUFMLENBQVUsQ0FBVixFQUFhdkIsUUFBYjs7QUFFQTtBQUNBMTRCLFFBQUU2NkIsT0FBRixDQUFVMStCLEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0NzK0IsR0FBaEMsQ0FBb0NoZSxNQUFwQyxHQUE2QyxHQUE3QyxHQUFtRDNnQixLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDdStCLE9BQTdGO0FBQ0k7QUFESixPQUVLcitCLElBRkwsQ0FFVSxVQUFVRixJQUFWLEVBQWdCOztBQUVwQjtBQUNBLFlBQUlBLEtBQUt3K0IsWUFBTCxDQUFrQm45QixNQUFsQixJQUE0QnJCLEtBQUt3K0IsWUFBTCxDQUFrQm45QixNQUFsQixHQUEyQixDQUEzRCxFQUE4RDtBQUM1RDFCLGVBQUs4OUIsSUFBTCxDQUFVaDhCLElBQVYsQ0FBZTlCLEtBQUs4K0IsV0FBTCxDQUFpQixFQUFDcnZCLE1BQU0sT0FBUCxFQUFnQmdRLFVBQVVwZixLQUFLdytCLFlBQS9CLEVBQWpCLENBQWY7QUFDRDtBQUNEO0FBQ0EsWUFBSXgrQixLQUFLMCtCLFdBQUwsQ0FBaUJyOUIsTUFBakIsSUFBMkJyQixLQUFLMCtCLFdBQUwsQ0FBaUJyOUIsTUFBakIsR0FBMEIsQ0FBekQsRUFBNEQ7QUFDMUQxQixlQUFLODlCLElBQUwsQ0FBVWg4QixJQUFWLENBQWU5QixLQUFLOCtCLFdBQUwsQ0FBaUIsRUFBQ3J2QixNQUFNLFlBQVAsRUFBcUJnUSxVQUFVcGYsS0FBSzArQixXQUFwQyxFQUFqQixDQUFmO0FBQ0Q7QUFDRDtBQUNBLFlBQUkxK0IsS0FBSzIrQixjQUFMLENBQW9CdDlCLE1BQXBCLElBQThCckIsS0FBSzIrQixjQUFMLENBQW9CdDlCLE1BQXBCLEdBQTZCLENBQS9ELEVBQWtFO0FBQ2hFMUIsZUFBSzg5QixJQUFMLENBQVVoOEIsSUFBVixDQUFlOUIsS0FBSzgrQixXQUFMLENBQWlCLEVBQUNydkIsTUFBTSxTQUFQLEVBQWtCZ1EsVUFBVXBmLEtBQUsyK0IsY0FBakMsRUFBakIsQ0FBZjtBQUNEO0FBQ0Q7QUFDQSxZQUFJMytCLEtBQUs0K0IsYUFBTCxDQUFtQnY5QixNQUFuQixJQUE2QnJCLEtBQUs0K0IsYUFBTCxDQUFtQnY5QixNQUFuQixHQUE0QixDQUE3RCxFQUFnRTtBQUM1RDFCLGVBQUs4OUIsSUFBTCxDQUFVaDhCLElBQVYsQ0FBZTlCLEtBQUs4K0IsV0FBTCxDQUFpQixFQUFDcnZCLE1BQU0sUUFBUCxFQUFpQmdRLFVBQVVwZixLQUFLNCtCLGFBQWhDLEVBQWpCLENBQWY7QUFDSDtBQUNEO0FBQ0EsWUFBSTUrQixLQUFLNitCLGVBQUwsQ0FBcUJ4OUIsTUFBckIsSUFBK0JyQixLQUFLNitCLGVBQUwsQ0FBcUJ4OUIsTUFBckIsR0FBOEIsQ0FBakUsRUFBb0U7QUFDaEUxQixlQUFLODlCLElBQUwsQ0FBVWg4QixJQUFWLENBQWU5QixLQUFLOCtCLFdBQUwsQ0FBaUIsRUFBQ3J2QixNQUFNLFVBQVAsRUFBbUJnUSxVQUFVcGYsS0FBSzYrQixlQUFsQyxFQUFqQixDQUFmO0FBQ0g7QUFDRDtBQUNBLFlBQUlqeUIsT0FBT0MsWUFBUCxLQUF3QnFGLFNBQXhCLElBQXFDLFFBQU90RixPQUFPQyxZQUFQLENBQW9CaXlCLGVBQTNCLE1BQStDLFFBQXhGLEVBQWtHO0FBQ2hHdjlCLHdFQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0JxSyxPQUFPQyxZQUFQLENBQW9CaXlCLGVBQTVDLEVBQTZEbi9CLElBQTdEO0FBQ0Q7O0FBRUQsZUFBTyxJQUFQO0FBQ0QsT0E5QkwsRUErQktVLElBL0JMLENBK0JVLFlBQVk7QUFDaEI7QUFDQTtBQUNBO0FBQ0FDLGdCQUFRQyxJQUFSLENBQWEsbUVBQWI7QUFDQSxlQUFPLEtBQVA7QUFDRCxPQXJDTCxFQXNDS0csTUF0Q0wsQ0FzQ1ksWUFBWTtBQUNsQixZQUFJaUYsTUFBSjtBQUNBLFlBQUloRyxLQUFLSCxPQUFMLENBQWE0UCxJQUFiLEtBQXNCLFNBQTFCLEVBQXFDO0FBQ25DO0FBQ0F6UCxlQUFLby9CLGFBQUw7QUFDRCxTQUhELE1BR087QUFDTDtBQUNBcC9CLGVBQUtxL0IsSUFBTDtBQUNEO0FBQ0Q7QUFDQXI1QixpQkFBU2hHLEtBQUt3K0IsY0FBTCxDQUFvQm4yQixTQUFwQixFQUFUO0FBQ0FyQyxlQUFPd0MsT0FBUCxDQUFlLFVBQVUzQixPQUFWLEVBQW1CRixLQUFuQixFQUEwQjhCLEtBQTFCLEVBQWlDO0FBQzlDNUIsa0JBQVF5UyxTQUFSLEdBQW9CZ0IsRUFBcEIsQ0FBdUIsWUFBdkIsRUFBcUMsWUFBWTtBQUMvQ3RhLGlCQUFLcy9CLElBQUw7QUFDRCxXQUZEO0FBR0QsU0FKRDs7QUFNQTtBQUNBO0FBQ0E7QUFDQXQvQixhQUFLYSxPQUFMLENBQWFDLElBQWI7QUFDRCxPQTNETDtBQTREQSxVQUFJazlCLGdCQUFKLEVBQXNCO0FBQ3BCLGFBQUt1QixXQUFMLEdBQW1CLElBQW5CO0FBQ0Q7O0FBRUQsYUFBTyxJQUFQO0FBQ0QsS0F2SDZFOztBQXlIOUU7Ozs7O0FBS0FDLHNCQUFrQiw0QkFBWTtBQUM1QixVQUFJLEtBQUtoQixjQUFMLENBQW9CaUIsVUFBcEIsRUFBSixFQUFzQztBQUNwQyxhQUFLakIsY0FBTCxDQUFvQjkxQixVQUFwQixDQUErQixLQUEvQjtBQUNBLGFBQUs3SSxPQUFMLENBQWFELGFBQWIsQ0FBMkJvSCxHQUEzQixDQUErQjhVLFdBQS9CLENBQTJDLEtBQUswaUIsY0FBaEQ7QUFDRDtBQUVGLEtBcEk2RTs7QUFzSTlFOzs7OztBQUtBa0IscUJBQWlCLDJCQUFZO0FBQzNCLFVBQUksQ0FBQyxLQUFLbEIsY0FBTCxDQUFvQmlCLFVBQXBCLEVBQUwsRUFBdUM7QUFDckMsYUFBS2pCLGNBQUwsQ0FBb0I5MUIsVUFBcEIsQ0FBK0IsSUFBL0I7QUFDQSxhQUFLN0ksT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0IrVCxRQUEvQixDQUF3QyxLQUFLeWpCLGNBQTdDO0FBQ0Q7QUFDRixLQWhKNkU7O0FBa0o5RUMsbUJBQWUseUJBQVk7QUFDekIsVUFBSXorQixJQUFKLEVBQ0kyL0IsaUJBREosRUFFSUMsb0JBRkosRUFHSUMsZ0JBSEosRUFJSUMsb0JBSkosRUFLSUMscUJBTEosRUFNSUMsYUFOSixFQU9JQyxpQkFQSixFQVFJQyxVQVJKLEVBU0lDLGlCQVRKOztBQVdBbmdDLGFBQU8sSUFBUDs7QUFFQTgvQiw2QkFBdUIxMkIsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUF2Qjs7QUFFQTAyQiw4QkFBd0IzMkIsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUF4QjtBQUNBMDJCLDRCQUFzQnRxQixTQUF0QixHQUFrQ29pQixjQUFjL0wsMEJBQWhEO0FBQ0FpVSw0QkFBc0J6MkIsU0FBdEIsR0FBa0MsaUJBQWxDO0FBQ0F3MkIsMkJBQXFCdHFCLFdBQXJCLENBQWlDdXFCLHFCQUFqQzs7QUFFQUMsc0JBQWdCNTJCLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBaEI7QUFDQTIyQixvQkFBYzEyQixTQUFkLEdBQTBCQyx3RUFBWUEsQ0FBQ2dwQixxQkFBdkM7QUFDQTBOLDBCQUFvQjcyQixTQUFTQyxhQUFULENBQXVCLEdBQXZCLENBQXBCO0FBQ0E0MkIsd0JBQWtCeHFCLFNBQWxCLEdBQThCb2lCLGNBQWNqTSxrQkFBNUM7QUFDQXFVLHdCQUFrQnhxQixTQUFsQixJQUErQixrQkFBa0JvaUIsY0FBY2hNLDZCQUFoQyxHQUFnRSxRQUEvRjtBQUNBbVUsb0JBQWN4cUIsV0FBZCxDQUEwQnlxQixpQkFBMUI7QUFDQUgsMkJBQXFCdHFCLFdBQXJCLENBQWlDd3FCLGFBQWpDOztBQUVBRSxtQkFBYSxLQUFLckQsT0FBTCxDQUFhO0FBQ3hCcjdCLGNBQU0sUUFEa0I7QUFFeEJzN0IsdUJBQWU7QUFDYnpFLG9CQUFVUixjQUFjL0wsMEJBRFg7QUFFYnhpQixxQkFBV0Msd0VBQVlBLENBQUN1aUIsMEJBRlg7QUFHYmlSLHdCQUFjO0FBSEQsU0FGUztBQU94QkMseUJBQWlCLENBQ2YsRUFBQ0MsU0FBUyxLQUFLUCxnQkFBZixFQUFpQzcxQixTQUFTaTVCLG9CQUExQyxFQURlLEVBRWYsRUFBQzdDLFNBQVMsS0FBS0MsVUFBZixFQUEyQnIyQixTQUFTLEtBQUtzMkIsY0FBekMsRUFGZSxDQVBPO0FBV3hCSSxzQkFBYyx3QkFBWTtBQUN4Qm9DLDhCQUFvQixJQUFJdDhCLEdBQUdpNkIsV0FBSCxDQUFlOEMsTUFBbkIsQ0FBMEI7QUFDNUNwNkIsb0JBQVFoRyxLQUFLdytCLGNBQUwsQ0FBb0JuMkIsU0FBcEIsR0FBZ0MrVCxRQUFoQyxFQURvQztBQUU1Q2lrQiw2QkFBaUJoOUIsR0FBR2k5QixNQUFILENBQVVDLFNBQVYsQ0FBb0JDLHVCQUZPO0FBRzVDOTlCLG1CQUFPLGVBQVVpUCxPQUFWLEVBQW1CdkgsVUFBbkIsRUFBK0I7QUFDcEMsa0JBQUlnUCxPQUFKLEVBQ0lxbkIsVUFESixFQUVJQyxXQUZKOztBQUlBLGtCQUFJL3VCLFdBQVcsT0FBT0EsUUFBUXBKLEdBQWYsS0FBdUIsVUFBdEMsRUFBa0Q7QUFDaEQ7QUFDQTZRLDBCQUFVekgsUUFBUXBKLEdBQVIsQ0FBWSxTQUFaLENBQVY7QUFDQTtBQUNBLG9CQUFJdkksS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEZ0gsT0FBaEQsQ0FBSixFQUE4RDtBQUM1RHFuQiwrQkFBYXpnQyxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0RnSCxPQUFoRCxFQUF5RDFXLEtBQXpELENBQStEaVAsT0FBL0QsRUFBd0V2SCxVQUF4RSxDQUFiOztBQUVBLHNCQUFJLE9BQU9xMkIsV0FBVyxDQUFYLEVBQWNodUIsUUFBckIsS0FBa0MsVUFBbEMsSUFBZ0RndUIsV0FBVyxDQUFYLEVBQWNodUIsUUFBZCxjQUFvQ3BQLEdBQUdYLEtBQUgsQ0FBUzhmLElBQWpHLEVBQXVHO0FBQ3JHa2Usa0NBQWMsQ0FBZDtBQUNELG1CQUZELE1BRU87QUFDTEEsa0NBQWNuL0IsU0FBU2svQixXQUFXLENBQVgsRUFBY2h1QixRQUFkLEdBQXlCQyxTQUF6QixFQUFULEVBQStDLEVBQS9DLElBQXFELENBQW5FO0FBQ0Q7O0FBRUQrdEIsNkJBQVczK0IsSUFBWCxDQUNJLElBQUl1QixHQUFHWCxLQUFILENBQVN1USxLQUFiLENBQW1CO0FBQ2pCMlMsMkJBQU8sSUFBSXZpQixHQUFHWCxLQUFILENBQVNtYixNQUFiLENBQW9CO0FBQ3pCa0UsOEJBQVEsSUFBSTFlLEdBQUdYLEtBQUgsQ0FBUzZlLE1BQWIsQ0FBb0I7QUFDMUI5TiwrQkFBTyxzQkFEbUI7QUFFMUJpTywrQkFBTztBQUZtQix1QkFBcEIsQ0FEaUI7QUFLekIzUCw4QkFBUTJ1QjtBQUxpQixxQkFBcEIsQ0FEVTtBQVFqQjNlLDRCQUFRLElBQUkxZSxHQUFHWCxLQUFILENBQVM2ZSxNQUFiLENBQW9CO0FBQzFCOU4sNkJBQU8sc0JBRG1CO0FBRTFCaU8sNkJBQU87QUFGbUIscUJBQXBCLENBUlM7QUFZakJuTywwQkFBTSxJQUFJbFEsR0FBR1gsS0FBSCxDQUFTOFEsSUFBYixDQUFrQjtBQUN0QkMsNkJBQU87QUFEZSxxQkFBbEI7QUFaVyxtQkFBbkIsQ0FESjs7QUFtQkEseUJBQU9ndEIsVUFBUDtBQUNEO0FBQ0Y7QUFDRCxxQkFBTyxLQUFQO0FBQ0Q7QUE1QzJDLFdBQTFCLENBQXBCLENBRHdCLENBOENwQjs7QUFFSlosNkJBQW1CRixrQkFBa0IxaUIsV0FBbEIsRUFBbkI7O0FBRUEyaUIsaUNBQXVCLElBQUl2OEIsR0FBR2k2QixXQUFILENBQWVxRCxPQUFuQixDQUEyQixFQUFDSixXQUFXbDlCLEdBQUdpOUIsTUFBSCxDQUFVQyxTQUFWLENBQW9CSyxZQUFoQyxFQUEzQixDQUF2Qjs7QUFFQWhCLCtCQUFxQnRsQixFQUFyQixDQUF3QixRQUF4QixFQUFrQyxVQUFVNUUsQ0FBVixFQUFhO0FBQzdDLGdCQUFJalMsU0FBU204QixxQkFBcUIvcEIsV0FBckIsR0FBbUN2RCxTQUFuQyxFQUFiOztBQUVBdFMsaUJBQUt3K0IsY0FBTCxDQUFvQm4yQixTQUFwQixHQUFnQ0csT0FBaEMsQ0FBd0MsVUFBVWxHLEtBQVYsRUFBaUI7QUFDdkRBLG9CQUFNZ1gsU0FBTixHQUFrQnVuQixnQ0FBbEIsQ0FBbURwOUIsTUFBbkQsRUFBMkQsVUFBVWtPLE9BQVYsRUFBbUI7QUFDNUVrdUIsaUNBQWlCLzlCLElBQWpCLENBQXNCNlAsT0FBdEI7QUFDRCxlQUZEO0FBR0QsYUFKRDs7QUFNQXd1QjtBQUNELFdBVkQ7O0FBWUE7QUFDQVAsK0JBQXFCdGxCLEVBQXJCLENBQXdCLFVBQXhCLEVBQW9DLFVBQVU1RSxDQUFWLEVBQWE7QUFDL0NtcUIsNkJBQWlCaUIsS0FBakI7QUFDQVg7QUFDRCxXQUhEOztBQUtBQSw4QkFBb0IsNkJBQVk7QUFDOUIsZ0JBQUlqL0IsQ0FBSixFQUNJQyxDQURKLEVBRUlxUSxLQUZKLEVBR0l1dkIsVUFISixFQUlJQyxlQUpKLEVBS0lDLGdCQUxKLEVBTUlDLG1CQU5KLEVBT0lDLG1CQVBKLEVBUUlDLGdCQVJKLEVBU0lDLGFBVEosRUFVSUMsWUFWSixFQVdJQyxZQVhKLEVBWUlDLGVBWkosRUFhSUMsV0FiSixFQWNJQyxrQkFkSixFQWVJQyxpQkFmSixFQWdCSUMscUJBaEJKLEVBaUJJQyxxQkFqQkosRUFrQklDLDBCQWxCSjs7QUFvQkEsZ0JBQUksT0FBTzloQyxLQUFLK2hDLHdCQUFaLEtBQXlDLFVBQTdDLEVBQXlEO0FBQ3ZEL2hDLG1CQUFLK2hDLHdCQUFMO0FBQ0Q7O0FBRUROLDBCQUFjLHFCQUFVOUksS0FBVixFQUFpQjtBQUM3QixrQkFBSUEsTUFBTXFKLEtBQU4sS0FBZ0IsRUFBcEIsRUFBd0I7QUFDdEIsb0JBQUk7QUFDRnJKLHdCQUFNTyxNQUFOLENBQWFMLElBQWI7QUFDRCxpQkFGRCxDQUVFLE9BQU95QixNQUFQLEVBQWUsQ0FDaEI7QUFDRjtBQUNGLGFBUEQsQ0F6QjhCLENBZ0MzQjs7QUFFSHFILGdDQUFvQiwyQkFBVWhKLEtBQVYsRUFBaUI7QUFDbkMsa0JBQUlzSixjQUFKO0FBQ0FBLCtCQUFpQnBDLGlCQUFpQnYzQixJQUFqQixDQUFzQnF3QixNQUFNTyxNQUFOLENBQWE5akIsWUFBYixDQUEwQixTQUExQixDQUF0QixDQUFqQjtBQUNBNnNCLDZCQUFlbHNCLEdBQWYsQ0FDSSxTQURKLEVBRUluVSw4REFBS0EsQ0FBQ3NnQyxxQkFBTixDQUE0QnZKLE1BQU1PLE1BQU4sQ0FBYXBtQixLQUFiLElBQXNCLEVBQWxELENBRko7QUFJQTlTLG1CQUFLcy9CLElBQUw7QUFDQTtBQUNBLGtCQUFJcnlCLE9BQU9DLFlBQVAsS0FBd0JxRixTQUF4QixJQUFxQyxRQUFPdEYsT0FBT0MsWUFBUCxDQUFvQmkxQixxQkFBM0IsTUFBcUQsUUFBOUYsRUFBd0c7QUFDdEd2Z0MsOEVBQUtBLENBQUNnQixpQkFBTixDQUF3QnFLLE9BQU9DLFlBQVAsQ0FBb0JpMUIscUJBQTVDLEVBQW1FO0FBQ2pFeHdCLDJCQUFTc3dCLGNBRHdEO0FBRWpFRywwQkFBUTtBQUZ5RCxpQkFBbkU7QUFJRDtBQUNGLGFBZkQsQ0FsQzhCLENBaUQzQjs7QUFFSFYsaUNBQXFCLDRCQUFVL0ksS0FBVixFQUFpQjtBQUNwQyxrQkFBSTBKLFdBQUosRUFDSUosY0FESjtBQUVBQSwrQkFBaUJwQyxpQkFBaUJ2M0IsSUFBakIsQ0FBc0Jxd0IsTUFBTU8sTUFBTixDQUFhOWpCLFlBQWIsQ0FBMEIsU0FBMUIsQ0FBdEIsQ0FBakI7QUFDQWl0Qiw0QkFBY0osZUFBZTE1QixHQUFmLENBQW1CLFlBQW5CLENBQWQ7QUFDQTg1QiwwQkFBWTFKLE1BQU1PLE1BQU4sQ0FBYTlqQixZQUFiLENBQTBCLFFBQTFCLENBQVosRUFBaUR0QyxLQUFqRCxHQUF5RGxSLDhEQUFLQSxDQUFDc2dDLHFCQUFOLENBQ3JEdkosTUFBTU8sTUFBTixDQUFhcG1CLEtBQWIsSUFBc0IsRUFEK0IsQ0FBekQ7QUFHQW12Qiw2QkFBZWxzQixHQUFmLENBQW1CLFlBQW5CLEVBQWlDc3NCLFdBQWpDO0FBQ0FyaUMsbUJBQUtzL0IsSUFBTDtBQUNBO0FBQ0Esa0JBQUlyeUIsT0FBT0MsWUFBUCxLQUF3QnFGLFNBQXhCLElBQXFDLFFBQU90RixPQUFPQyxZQUFQLENBQW9CaTFCLHFCQUEzQixNQUFxRCxRQUE5RixFQUF3RztBQUN0R3ZnQyw4RUFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCcUssT0FBT0MsWUFBUCxDQUFvQmkxQixxQkFBNUMsRUFBbUU7QUFDakV4d0IsMkJBQVNzd0IsY0FEd0Q7QUFFakVHLDBCQUFRO0FBRnlELGlCQUFuRTtBQUlEO0FBQ0YsYUFqQkQsQ0FuRDhCLENBb0UzQjs7QUFFSFIsb0NBQXdCLCtCQUFVakosS0FBVixFQUFpQjtBQUN2QyxrQkFBSTJKLGFBQUosRUFDSUMsZUFESixFQUVJQyxvQkFGSixFQUdJQyxpQkFISixFQUlJQyxZQUpKLEVBS0lDLFdBTEo7O0FBT0Esa0JBQUksT0FBTzNpQyxLQUFLK2hDLHdCQUFaLEtBQXlDLFVBQTdDLEVBQXlEO0FBQ3ZEL2hDLHFCQUFLK2hDLHdCQUFMO0FBQ0Q7O0FBRURXLDZCQUFlL0osTUFBTU8sTUFBckI7O0FBRUE7QUFDQW9KLDhCQUFnQnpDLGlCQUFpQnYzQixJQUFqQixDQUFzQm82QixhQUFhdHRCLFlBQWIsQ0FBMEIsU0FBMUIsQ0FBdEIsQ0FBaEI7QUFDQSxrQkFBSSxDQUFDa3RCLGFBQUQsSUFBa0IsT0FBT0EsY0FBY3pzQixXQUFyQixLQUFxQyxVQUEzRCxFQUF1RTtBQUNyRSx1QkFBTyxLQUFQO0FBQ0Q7O0FBRUQwc0IsZ0NBQWtCRCxjQUFjenNCLFdBQWQsRUFBbEI7QUFDQTJzQixxQ0FBdUIsS0FBdkI7QUFDQUMsa0NBQW9CLEtBQXBCOztBQUVBLGtCQUFJLEVBQUVGLDJCQUEyQmwvQixHQUFHcVQsSUFBSCxDQUFReUIsVUFBckMsQ0FBSixFQUFzRDtBQUNwRHFxQix1Q0FBdUIsSUFBSW4vQixHQUFHaTZCLFdBQUgsQ0FBZXNGLFNBQW5CLENBQTZCO0FBQ2xEdnlCLDRCQUFVLElBQUloTixHQUFHbTZCLFVBQVAsQ0FBa0IsQ0FBQzhFLGFBQUQsQ0FBbEI7QUFEd0MsaUJBQTdCLENBQXZCO0FBR0F0aUMscUJBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCNjdCLGNBQS9CLENBQThDTCxvQkFBOUM7QUFDRDtBQUNELGtCQUFJLEVBQUVELDJCQUEyQmwvQixHQUFHcVQsSUFBSCxDQUFRQyxLQUFyQyxDQUFKLEVBQWlEO0FBQy9DOHJCLG9DQUFvQixJQUFJcC9CLEdBQUdpNkIsV0FBSCxDQUFld0YsTUFBbkIsQ0FBMEI7QUFDNUN6eUIsNEJBQVUsSUFBSWhOLEdBQUdtNkIsVUFBUCxDQUFrQixDQUFDOEUsYUFBRCxDQUFsQjtBQURrQyxpQkFBMUIsQ0FBcEI7QUFHQXRpQyxxQkFBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0I2N0IsY0FBL0IsQ0FBOENKLGlCQUE5QztBQUNEOztBQUVEOUMsZ0NBQWtCb0QsU0FBbEIsQ0FBNEIsS0FBNUI7O0FBRUE7QUFDQUosNEJBQWN2NUIsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFkO0FBQ0FzNUIsMEJBQVlyNUIsU0FBWixHQUF3QkMsd0VBQVlBLENBQUM2bkIsSUFBYixHQUFvQixHQUFwQixHQUEwQjduQix3RUFBWUEsQ0FBQ2tpQixvQkFBL0Q7QUFDQWtYLDBCQUFZN0osS0FBWixHQUFvQmpCLGNBQWNwTSxvQkFBbEM7QUFDQWtYLDBCQUFZcHRCLFlBQVosQ0FBeUIsU0FBekIsRUFBb0NyVSxDQUFwQzs7QUFFQWxCLG1CQUFLK2hDLHdCQUFMLEdBQWdDLFVBQVVwSixLQUFWLEVBQWlCO0FBQy9DLG9CQUFJNkosb0JBQUosRUFBMEI7QUFDeEJBLHVDQUFxQk8sU0FBckIsQ0FBK0IsS0FBL0I7QUFDQS9pQyx1QkFBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0JnOEIsaUJBQS9CLENBQWlEUixvQkFBakQ7QUFDQUEseUNBQXVCLEtBQXZCO0FBQ0Q7QUFDRCxvQkFBSUMsaUJBQUosRUFBdUI7QUFDckJ6aUMsdUJBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCZzhCLGlCQUEvQixDQUFpRFAsaUJBQWpEO0FBQ0FBLG9DQUFrQk0sU0FBbEIsQ0FBNEIsS0FBNUI7QUFDQU4sc0NBQW9CLEtBQXBCO0FBQ0Q7QUFDRDlDLGtDQUFrQm9ELFNBQWxCLENBQTRCLElBQTVCOztBQUVBSiw4QkFBY0EsWUFBWU0sVUFBWixDQUF1QkMsWUFBdkIsQ0FBb0NSLFlBQXBDLEVBQWtEQyxXQUFsRCxDQUFkO0FBQ0EzaUMscUJBQUtzL0IsSUFBTDtBQUNBdC9CLHFCQUFLK2hDLHdCQUFMLEdBQWdDLEtBQWhDO0FBQ0E7QUFDQSxvQkFBSTkwQixPQUFPQyxZQUFQLEtBQXdCcUYsU0FBeEIsSUFBcUMsUUFBT3RGLE9BQU9DLFlBQVAsQ0FBb0JpMUIscUJBQTNCLE1BQXFELFFBQTlGLEVBQXdHO0FBQ3RHdmdDLGdGQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0JxSyxPQUFPQyxZQUFQLENBQW9CaTFCLHFCQUE1QyxFQUFtRTtBQUNqRXh3Qiw2QkFBUzJ3QixhQUR3RDtBQUVqRUYsNEJBQVE7QUFGeUQsbUJBQW5FO0FBSUQ7QUFDRixlQXZCRDs7QUF5QkF2K0IsZ0JBQUU4K0IsV0FBRixFQUFldEksS0FBZixDQUFxQnI2QixLQUFLK2hDLHdCQUExQjtBQUNBVyw2QkFBZUEsYUFBYU8sVUFBYixDQUF3QkMsWUFBeEIsQ0FBcUNQLFdBQXJDLEVBQWtERCxZQUFsRCxDQUFmO0FBQ0QsYUF4RUQsQ0F0RThCLENBOEkzQjs7QUFFSGIsb0NBQXdCLCtCQUFVbEosS0FBVixFQUFpQjtBQUN2QyxrQkFBSXdLLFlBQUosRUFDSVosZUFESixFQUVJYSxhQUZKLEVBR0lDLGFBSEo7O0FBS0Esa0JBQUksT0FBT3JqQyxLQUFLK2hDLHdCQUFaLEtBQXlDLFVBQTdDLEVBQXlEO0FBQ3ZEL2hDLHFCQUFLK2hDLHdCQUFMO0FBQ0Q7O0FBRURvQiw2QkFBZXhLLE1BQU1PLE1BQU4sQ0FBYTlqQixZQUFiLENBQTBCLFNBQTFCLENBQWY7QUFDQWl1Qiw4QkFBZ0J4RCxpQkFBaUJ2M0IsSUFBakIsQ0FBc0I2NkIsWUFBdEIsQ0FBaEI7QUFDQVosZ0NBQWtCYyxjQUFjeHRCLFdBQWQsRUFBbEI7O0FBRUE7QUFDQSxrQkFBSTBzQiwyQkFBMkJsL0IsR0FBR3FULElBQUgsQ0FBUUMsS0FBdkMsRUFBOEM7QUFDNUN5c0IsZ0NBQWdCcGpDLEtBQUttK0IsY0FBTCxDQUFvQjdrQixTQUFwQixFQUFoQjtBQUNELGVBRkQsTUFFTyxJQUFJaXBCLDJCQUEyQmwvQixHQUFHcVQsSUFBSCxDQUFReUIsVUFBdkMsRUFBbUQ7QUFDdkRpckIsZ0NBQWdCcGpDLEtBQUtvK0IsYUFBTCxDQUFtQjlrQixTQUFuQixFQUFoQjtBQUNGLGVBRk0sTUFFQSxJQUFJaXBCLDJCQUEyQmwvQixHQUFHcVQsSUFBSCxDQUFRdUIsT0FBdkMsRUFBZ0Q7QUFDckRtckIsZ0NBQWdCcGpDLEtBQUtxK0IsZ0JBQUwsQ0FBc0Iva0IsU0FBdEIsRUFBaEI7QUFDRCxlQUZNLE1BRUEsSUFBSWlwQiwyQkFBMkJsL0IsR0FBR3FULElBQUgsQ0FBUW1ILE1BQXZDLEVBQStDO0FBQ2xEdWxCLGdDQUFnQnBqQyxLQUFLcytCLGVBQUwsQ0FBcUJobEIsU0FBckIsRUFBaEI7QUFDSCxlQUZNLE1BRUE7QUFDTDtBQUNBM1ksd0JBQVFDLElBQVIsQ0FBYSxrRUFBYjtBQUNBLHVCQUFPLEtBQVA7QUFDRDs7QUFFRDtBQUNBLGtCQUFJO0FBQ0F3aUMsOEJBQWN2cEIsYUFBZCxDQUE0QndwQixhQUE1QjtBQUNILGVBRkQsQ0FFRSxPQUFPL0ksTUFBUCxFQUFlO0FBQ2Isb0JBQUlpSSwyQkFBMkJsL0IsR0FBR3FULElBQUgsQ0FBUXlCLFVBQXZDLEVBQW1EO0FBQy9DaXJCLGtDQUFnQnBqQyxLQUFLdStCLGlCQUFMLENBQXVCamxCLFNBQXZCLEVBQWhCO0FBQ0E4cEIsZ0NBQWN2cEIsYUFBZCxDQUE0QndwQixhQUE1QjtBQUNIO0FBQ0o7QUFDRDtBQUNBeEQsK0JBQWlCeUQsTUFBakIsQ0FBd0JELGFBQXhCOztBQUVBO0FBQ0F2QjtBQUNBOWhDLG1CQUFLcy9CLElBQUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBSXJ5QixPQUFPQyxZQUFQLEtBQXdCcUYsU0FBeEIsSUFBcUMsUUFBT3RGLE9BQU9DLFlBQVAsQ0FBb0JpMUIscUJBQTNCLE1BQXFELFFBQTlGLEVBQXdHO0FBQ3RHdmdDLDhFQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0JxSyxPQUFPQyxZQUFQLENBQW9CaTFCLHFCQUE1QyxFQUFtRTtBQUNqRXh3QiwyQkFBUzB4QixhQUR3RDtBQUVqRWpCLDBCQUFRO0FBRnlELGlCQUFuRTtBQUlEO0FBQ0YsYUFyREQsQ0FoSjhCLENBcU0zQjs7QUFFSE4seUNBQTZCLHNDQUFZO0FBQ3ZDUCw2QkFBZTFCLGlCQUFpQjBELFNBQWpCLEVBQWY7QUFDQXZELDRCQUFjdnFCLFNBQWQsR0FBMEIsRUFBMUI7QUFDQSxrQkFBSThyQixlQUFlLENBQW5CLEVBQXNCO0FBQ3BCLHFCQUFLcmdDLElBQUksQ0FBVCxFQUFZQSxJQUFJcWdDLFlBQWhCLEVBQThCcmdDLEtBQUssQ0FBbkMsRUFBc0M7QUFDcENzZ0Msb0NBQWtCM0IsaUJBQWlCdjNCLElBQWpCLENBQXNCcEgsQ0FBdEIsQ0FBbEI7QUFDQTgvQixvQ0FBa0I1M0IsU0FBU0MsYUFBVCxDQUF1QixJQUF2QixDQUFsQjtBQUNBO0FBQ0E0M0IscUNBQW1CNzNCLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBbkI7QUFDQTQzQixtQ0FBaUJ4eEIsSUFBakIsR0FBd0IsTUFBeEI7QUFDQXd4QixtQ0FBaUJ0L0IsRUFBakIsR0FBc0JULENBQXRCO0FBQ0ErL0IsbUNBQWlCMXJCLFlBQWpCLENBQ0ksT0FESixFQUVJM1QsOERBQUtBLENBQUM0aEMscUJBQU4sQ0FBNEJoQyxnQkFBZ0JqNUIsR0FBaEIsQ0FBb0IsU0FBcEIsS0FBa0MsRUFBOUQsQ0FGSjtBQUlBMDRCLG1DQUFpQjFyQixZQUFqQixDQUE4QixTQUE5QixFQUF5Q3JVLENBQXpDO0FBQ0EyQyxvQkFBRW85QixnQkFBRixFQUFvQndDLE9BQXBCLENBQTRCaEMsV0FBNUI7QUFDQVIsbUNBQWlCeUMsUUFBakIsR0FBNEIvQixpQkFBNUI7QUFDQVgsa0NBQWdCeHJCLFdBQWhCLENBQTRCeXJCLGdCQUE1QjtBQUNBO0FBQ0FDLHdDQUFzQjkzQixTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQXRCO0FBQ0E2M0Isc0NBQW9CNTNCLFNBQXBCLEdBQWdDQyx3RUFBWUEsQ0FBQzZuQixJQUFiLEdBQW9CLEdBQXBCLEdBQTBCN25CLHdFQUFZQSxDQUFDb2lCLHFCQUF2RTtBQUNBdVYsc0NBQW9CcEksS0FBcEIsR0FBNEJqQixjQUFjbE0scUJBQTFDO0FBQ0F1VixzQ0FBb0IzckIsWUFBcEIsQ0FBaUMsU0FBakMsRUFBNENyVSxDQUE1QztBQUNBMkMsb0JBQUVxOUIsbUJBQUYsRUFBdUI3RyxLQUF2QixDQUE2QnVILHFCQUE3QjtBQUNBWixrQ0FBZ0J4ckIsV0FBaEIsQ0FBNEIwckIsbUJBQTVCO0FBQ0E7QUFDQUMsd0NBQXNCLzNCLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBdEI7QUFDQTgzQixzQ0FBb0I3M0IsU0FBcEIsR0FBZ0NDLHdFQUFZQSxDQUFDNm5CLElBQWIsR0FBb0IsR0FBcEIsR0FBMEI3bkIsd0VBQVlBLENBQUNtaUIscUJBQXZFO0FBQ0F5VixzQ0FBb0JySSxLQUFwQixHQUE0QmpCLGNBQWNuTSxxQkFBMUM7QUFDQXlWLHNDQUFvQjVyQixZQUFwQixDQUFpQyxTQUFqQyxFQUE0Q3JVLENBQTVDO0FBQ0EyQyxvQkFBRXM5QixtQkFBRixFQUF1QjlHLEtBQXZCLENBQTZCd0gscUJBQTdCO0FBQ0FiLGtDQUFnQnhyQixXQUFoQixDQUE0QjJyQixtQkFBNUI7O0FBRUFuQixnQ0FBY3hxQixXQUFkLENBQTBCd3JCLGVBQTFCO0FBQ0Esc0JBQUlRLGdCQUFnQmo1QixHQUFoQixDQUFvQixnQkFBcEIsQ0FBSixFQUEyQztBQUN6Qyx3QkFBSWk1QixnQkFBZ0IzckIsV0FBaEIsY0FBeUN4UyxHQUFHcVQsSUFBSCxDQUFReUIsVUFBckQsRUFBaUU7QUFDL0QzRyw4QkFBUXFtQixjQUFjdk8sTUFBdEI7QUFDRCxxQkFGRCxNQUVPLElBQUlrWSxnQkFBZ0IzckIsV0FBaEIsY0FBeUN4UyxHQUFHcVQsSUFBSCxDQUFRdUIsT0FBckQsRUFBNkQ7QUFDbEV6Ryw4QkFBUXFtQixjQUFjeE8sU0FBdEI7QUFDRCxxQkFGTSxNQUVBO0FBQ0g3WCw4QkFBUXFtQixjQUFjck8sTUFBdEI7QUFDSDtBQUNENFgsdUNBQW1CaDRCLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBbkI7QUFDQSszQixxQ0FBaUIzckIsU0FBakIsSUFBOEIsYUFBYWpFLEtBQWIsR0FBcUIsYUFBckIsR0FBcUNnd0IsZ0JBQWdCajVCLEdBQWhCLENBQW9CLGdCQUFwQixFQUFzQ283QixTQUF6RztBQUNBM0Qsa0NBQWN4cUIsV0FBZCxDQUEwQjRyQixnQkFBMUI7QUFDRDtBQUNELHNCQUFJSSxnQkFBZ0JqNUIsR0FBaEIsQ0FBb0IsY0FBcEIsQ0FBSixFQUF5QztBQUN2QzY0Qix1Q0FBbUJoNEIsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQUFuQjtBQUNBKzNCLHFDQUFpQjNyQixTQUFqQixJQUE4QixhQUFhb2lCLGNBQWN0TyxXQUEzQixHQUF5QyxhQUF6QyxHQUF5RGlZLGdCQUFnQmo1QixHQUFoQixDQUFvQixjQUFwQixFQUFvQ283QixTQUEzSDtBQUNBM0Qsa0NBQWN4cUIsV0FBZCxDQUEwQjRyQixnQkFBMUI7QUFDRDtBQUNELHNCQUFJSSxnQkFBZ0JqNUIsR0FBaEIsQ0FBb0IsZ0JBQXBCLENBQUosRUFBMkM7QUFDdkM2NEIsdUNBQW1CaDRCLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBbkI7QUFDQSszQixxQ0FBaUIzckIsU0FBakIsSUFBOEIsYUFBYW9pQixjQUFjck8sTUFBM0IsR0FBb0MsYUFBcEMsR0FBb0RnWSxnQkFBZ0JqNUIsR0FBaEIsQ0FBb0IsZ0JBQXBCLEVBQXNDbzdCLFNBQXhIO0FBQ0EzRCxrQ0FBY3hxQixXQUFkLENBQTBCNHJCLGdCQUExQjtBQUNIO0FBQ0Q7QUFDQUwsK0JBQWFTLGdCQUFnQmo1QixHQUFoQixDQUFvQixZQUFwQixDQUFiO0FBQ0EsdUJBQUtwSCxJQUFJLENBQVQsRUFBWUEsSUFBSTQvQixXQUFXci9CLE1BQTNCLEVBQW1DUCxLQUFLLENBQXhDLEVBQTJDO0FBQ3pDaWdDLHVDQUFtQmg0QixTQUFTQyxhQUFULENBQXVCLEdBQXZCLENBQW5CO0FBQ0FnNEIsb0NBQWdCajRCLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBaEI7QUFDQWc0QixrQ0FBYzVyQixTQUFkLEdBQTBCc3JCLFdBQVc1L0IsQ0FBWCxFQUFjcVEsS0FBeEM7O0FBRUE4dkIsbUNBQWVsNEIsU0FBU0MsYUFBVCxDQUF1QixPQUF2QixDQUFmO0FBQ0FpNEIsaUNBQWE3eEIsSUFBYixHQUFvQixNQUFwQjtBQUNBNnhCLGlDQUFhMy9CLEVBQWIsR0FBa0JULElBQUksR0FBSixHQUFVQyxDQUE1QjtBQUNBbWdDLGlDQUFhL3JCLFlBQWIsQ0FDSSxPQURKLEVBRUkzVCw4REFBS0EsQ0FBQzRoQyxxQkFBTixDQUE0QnpDLFdBQVc1L0IsQ0FBWCxFQUFjMlIsS0FBZCxJQUF1QixFQUFuRCxDQUZKO0FBSUF3dUIsaUNBQWEvckIsWUFBYixDQUEwQixTQUExQixFQUFxQ3JVLENBQXJDO0FBQ0FvZ0MsaUNBQWEvckIsWUFBYixDQUEwQixRQUExQixFQUFvQ3BVLENBQXBDO0FBQ0EwQyxzQkFBRXk5QixZQUFGLEVBQWdCbUMsT0FBaEIsQ0FBd0JoQyxXQUF4QjtBQUNBSCxpQ0FBYW9DLFFBQWIsR0FBd0JoQyxrQkFBeEI7O0FBRUFOLHFDQUFpQjVyQixXQUFqQixDQUE2QjZyQixhQUE3QjtBQUNBRCxxQ0FBaUI1ckIsV0FBakIsQ0FBNkJwTSxTQUFTQyxhQUFULENBQXVCLElBQXZCLENBQTdCO0FBQ0ErM0IscUNBQWlCNXJCLFdBQWpCLENBQTZCOHJCLFlBQTdCO0FBQ0F0QixrQ0FBY3hxQixXQUFkLENBQTBCNHJCLGdCQUExQjtBQUNEO0FBQ0Y7QUFDRHJCLHNDQUFzQnI5QixLQUF0QixDQUE0QmtOLE9BQTVCLEdBQXNDLE1BQXRDO0FBQ0E7QUFFRCxlQWxGRCxNQWtGTztBQUNMb3dCLDhCQUFjeHFCLFdBQWQsQ0FBMEJ5cUIsaUJBQTFCO0FBQ0E7QUFDQUYsc0NBQXNCcjlCLEtBQXRCLENBQTRCa04sT0FBNUIsR0FBc0MsRUFBdEM7QUFDRDtBQUNENVAsbUJBQUs0akMsTUFBTDtBQUNELGFBM0ZELENBdk04QixDQWtTM0I7O0FBRUg5QjtBQUNELFdBclNELENBdEV3QixDQTJXckI7O0FBRUhuQyw0QkFBa0JybEIsRUFBbEIsQ0FBcUIsUUFBckIsRUFBK0IsVUFBVXFlLEtBQVYsRUFBaUI7QUFDOUN3SCw4QkFBa0J4SCxNQUFNTyxNQUFOLENBQWFqYyxXQUFiLEVBQWxCO0FBQ0QsV0FGRDs7QUFJQWpkLGVBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCNjdCLGNBQS9CLENBQThDbEQsaUJBQTlDO0FBQ0EzL0IsZUFBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0I2N0IsY0FBL0IsQ0FBOENqRCxvQkFBOUM7QUFDQSxpQkFBTyxJQUFQO0FBQ0QsU0EvWHVCO0FBZ1l4Qm5DLDBCQUFrQiw0QkFBWTs7QUFFNUI7QUFDQXo5QixlQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJpa0MsUUFBM0IsQ0FBb0NDLFVBQXBDOztBQUVBO0FBQ0EsY0FBSW5FLGtCQUFrQjFpQixXQUFsQixHQUFnQ3NtQixTQUFoQyxLQUE4QyxDQUFsRCxFQUFxRDtBQUNuRHZELDBCQUFjdnFCLFNBQWQsR0FBMEIsRUFBMUI7QUFDQXVxQiwwQkFBY3hxQixXQUFkLENBQTBCeXFCLGlCQUExQjtBQUNBO0FBQ0FGLGtDQUFzQnI5QixLQUF0QixDQUE0QmtOLE9BQTVCLEdBQXNDLEVBQXRDO0FBQ0Q7O0FBRUQ7QUFDQSt2Qiw0QkFBa0JvRCxTQUFsQixDQUE0QixJQUE1QjtBQUNBL2lDLGVBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCNjdCLGNBQS9CLENBQThDbEQsaUJBQTlDO0FBQ0FDLCtCQUFxQm1ELFNBQXJCLENBQStCLElBQS9CO0FBQ0EvaUMsZUFBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0I2N0IsY0FBL0IsQ0FBOENqRCxvQkFBOUM7O0FBRUEsaUJBQU8sSUFBUDtBQUNELFNBcFp1QjtBQXFaeEJsQyw0QkFBb0IsOEJBQVk7QUFDOUIsY0FBSSxPQUFPMTlCLEtBQUsraEMsd0JBQVosS0FBeUMsVUFBN0MsRUFBeUQ7QUFDdkQvaEMsaUJBQUsraEMsd0JBQUw7QUFDRDtBQUNEO0FBQ0FwQyw0QkFBa0JvRCxTQUFsQixDQUE0QixLQUE1QjtBQUNBL2lDLGVBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCZzhCLGlCQUEvQixDQUFpRHJELGlCQUFqRDtBQUNBQywrQkFBcUJtRCxTQUFyQixDQUErQixLQUEvQjtBQUNBL2lDLGVBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCZzhCLGlCQUEvQixDQUFpRHBELG9CQUFqRDs7QUFFQTtBQUNBNS9CLGVBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQmlrQyxRQUEzQixDQUFvQ3RILFFBQXBDOztBQUVBLGlCQUFPLElBQVA7QUFDRDtBQW5hdUIsT0FBYixDQUFiOztBQXNhQSxhQUFPMkQsVUFBUDtBQUNELEtBdGxCNkU7O0FBd2xCOUVwQixpQkFBYSxxQkFBVWovQixPQUFWLEVBQW1CO0FBQzlCLFVBQUlHLElBQUosRUFDSStqQyxZQURKLEVBRUlDLFdBRkosRUFHSUMsVUFISixFQUlJQyw0QkFKSixFQUtJQyxpQ0FMSjtBQU1JO0FBQ0E7QUFDQUMsMkJBUkosRUFTSUMsUUFUSixFQVVJQyxZQVZKLEVBV0lDLE1BWEo7O0FBYUF2a0MsYUFBTyxJQUFQOztBQUVBSCxnQkFBVWdFLEVBQUVILE1BQUYsQ0FBUztBQUNqQitMLGNBQU0sT0FEVztBQUVqQmdRLGtCQUFVO0FBRk8sT0FBVCxFQUdQNWYsT0FITyxDQUFWOztBQUtBdWtDLDhCQUF3QiwrQkFBVXpMLEtBQVYsRUFBaUI7QUFDckM7QUFDQTtBQUNBOztBQUVILE9BTEQ7O0FBT0FvTCxxQkFBZSw4QkFBOEJsa0MsUUFBUTRQLElBQVIsQ0FBYSswQixXQUFiLEVBQTdDOztBQUVBUixvQkFBYzU2QixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWQ7QUFDQTI2QixrQkFBWTE2QixTQUFaLEdBQXdCQyx3RUFBWUEsQ0FBQyx5QkFBeUIxSixRQUFRNFAsSUFBUixDQUFhKzBCLFdBQWIsRUFBdEMsQ0FBeEI7QUFDQVIsa0JBQVl2dUIsU0FBWixHQUF3QixTQUFTb2lCLGNBQWNrTSxZQUFkLENBQVQsR0FBdUMsT0FBL0Q7O0FBRUEsVUFBSWxrQyxRQUFRNFAsSUFBUixDQUFhaE8sV0FBYixPQUErQixPQUFuQyxFQUE0QztBQUMxQ3dpQyxxQkFBYTc2QixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWI7QUFDQTQ2QixtQkFBVzM2QixTQUFYLEdBQXVCQyx3RUFBWUEsQ0FBQ2lwQixtQkFBcEM7QUFDQXdSLG9CQUFZeHVCLFdBQVosQ0FBd0J5dUIsVUFBeEI7O0FBRUFDLHVDQUErQjk2QixTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQS9CO0FBQ0E2NkIscUNBQTZCejBCLElBQTdCLEdBQW9DLFVBQXBDO0FBQ0F5MEIscUNBQTZCdmlDLEVBQTdCLEdBQWtDLDRCQUE0QjlCLFFBQVE0UCxJQUF0RTtBQUNBdzBCLG1CQUFXenVCLFdBQVgsQ0FBdUIwdUIsNEJBQXZCOztBQUVBQyw0Q0FBb0MvNkIsU0FBU0MsYUFBVCxDQUF1QixPQUF2QixDQUFwQztBQUNBODZCLDBDQUFrQzV1QixZQUFsQyxDQUErQyxLQUEvQyxFQUFzRCw0QkFBNEIxVixRQUFRNFAsSUFBMUY7QUFDQTAwQiwwQ0FBa0MxdUIsU0FBbEMsR0FBOENvaUIsY0FBY3RNLDZCQUE1RDtBQUNBMFksbUJBQVd6dUIsV0FBWCxDQUF1QjJ1QixpQ0FBdkI7O0FBRUFGLG1CQUFXenVCLFdBQVgsQ0FBdUJwTSxTQUFTQyxhQUFULENBQXVCLElBQXZCLENBQXZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Q7O0FBRURpN0IscUJBQWUsc0JBQVVsckIsT0FBVixFQUFtQjtBQUNoQyxZQUFJcXJCLGVBQUosRUFDSWxoQyxNQURKLEVBRUkrNUIsV0FGSixFQUdJanRCLFFBSEosRUFJSXEwQixXQUpKLEVBS0loaUMsS0FMSixFQU1Ja2QsU0FOSixFQU9JK2tCLFNBUEosRUFRSTVoQixNQVJKLEVBU0k2aEIsVUFUSixFQVVJQyxpQkFWSixFQVdJQyxjQVhKLEVBWUl0akMsSUFaSjs7QUFjQTtBQUNBa0IsZ0JBQVExQyxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0RnSCxPQUFoRCxFQUF5RDFXLEtBQXpELEdBQWlFLENBQWpFLENBQVI7QUFDQWdpQyxzQkFBYzFrQyxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0RnSCxPQUFoRCxFQUF5RHVILE1BQXZFO0FBQ0FmLG9CQUFZNWYsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEZ0gsT0FBaEQsRUFBeURxSCxXQUFyRTtBQUNBc0MsaUJBQVNuRCxVQUFVbUQsTUFBbkI7O0FBRUEraEIseUJBQWlCLENBQWpCOztBQUVBO0FBQ0FELDRCQUFvQno3QixTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBQXBCO0FBQ0E7QUFDQXc3QiwwQkFBa0JuaUMsS0FBbEIsQ0FBd0JrTixPQUF4QixHQUFrQyxPQUFsQztBQUNBaTFCLDBCQUFrQm5pQyxLQUFsQixDQUF3QnFpQyxRQUF4QixHQUFtQyxNQUFuQztBQUNBRiwwQkFBa0JuaUMsS0FBbEIsQ0FBd0JzaUMsU0FBeEIsR0FBb0MsTUFBcEM7QUFDQUgsMEJBQWtCbmlDLEtBQWxCLENBQXdCdWlDLE1BQXhCLEdBQWlDLEtBQWpDO0FBQ0E7QUFDQUwscUJBQWFsaUMsTUFBTStQLFFBQU4sTUFBb0JGLFNBQWpDO0FBQ0EsWUFBSW15QixZQUFZOWQsT0FBWixJQUF1QmdlLHNCQUFzQnZoQyxHQUFHWCxLQUFILENBQVM4ZixJQUExRCxFQUFnRTtBQUM5RG1pQixzQkFBWXY3QixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQVo7O0FBRUEsY0FBSXE3QixZQUFZOWQsT0FBWixJQUF3QjhkLFlBQVk5ZCxPQUFaLENBQW9CaGhCLE9BQXBCLENBQTRCLEdBQTVCLEtBQW9DLENBQUMsQ0FBakUsRUFBcUU7QUFDbkUrK0Isc0JBQVVoaUIsR0FBVixHQUFnQitoQixZQUFZOWQsT0FBNUI7QUFDQSxnQkFBSWhILFVBQVVzbEIsZ0JBQWQsRUFBZ0M7QUFDNUJQLHdCQUFVeGhCLE1BQVYsR0FBbUJ2RCxVQUFVc2xCLGdCQUFWLENBQTJCLENBQTNCLENBQW5CO0FBQ0FQLHdCQUFVampCLEtBQVYsR0FBa0I5QixVQUFVc2xCLGdCQUFWLENBQTJCLENBQTNCLENBQWxCO0FBQ0gsYUFIRCxNQUdPO0FBQ0hQLHdCQUFVeGhCLE1BQVYsR0FBbUIsSUFBbkI7QUFDQXdoQix3QkFBVWpqQixLQUFWLEdBQWtCLElBQWxCO0FBQ0g7QUFDRixXQVRELE1BU087QUFDTGlqQixzQkFBVWhpQixHQUFWLEdBQWdCaWlCLFdBQVdPLE1BQVgsRUFBaEI7QUFDQVIsc0JBQVU5aEIsS0FBVixHQUFrQitoQixXQUFXUSxRQUFYLEVBQWxCO0FBQ0Q7QUFDRFAsNEJBQWtCcnZCLFdBQWxCLENBQThCbXZCLFNBQTlCO0FBQ0QsU0FqQkQsTUFpQk8sSUFBSTVoQixNQUFKLEVBQVk7QUFDZixjQUFJbkQsVUFBVW1ELE1BQVYsSUFBb0JuRCxVQUFVa0QsVUFBOUIsSUFBNENsRCxVQUFVZ0QsU0FBMUQsRUFBcUU7QUFDakUsZ0JBQUlJLFNBQVM1WixTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWI7QUFDQSxnQkFBSTRaLE1BQU1ELE9BQU9FLFVBQVAsQ0FBa0IsSUFBbEIsQ0FBVjtBQUNBLGdCQUFJQyxTQUFVdkQsVUFBVWdELFNBQVYsQ0FBb0IsQ0FBcEIsSUFBeUJoRCxVQUFVa0QsVUFBakQ7QUFDQSxnQkFBSXBCLFFBQVM5QixVQUFVZ0QsU0FBVixDQUFvQixDQUFwQixJQUF5QmhELFVBQVVrRCxVQUFoRDs7QUFFQSxnQkFBSW5CLGNBQWMsQ0FBbEI7QUFDQSxnQkFBSS9CLFVBQVUrQixXQUFWLElBQXlCL0IsVUFBVStCLFdBQVYsQ0FBc0I3TyxLQUFuRCxFQUEwRDtBQUN0RDZPLDRCQUFjL0IsVUFBVStCLFdBQVYsQ0FBc0I3TyxLQUFwQztBQUNIOztBQUVEa1EsbUJBQU9HLE1BQVAsR0FBZ0JBLFNBQVUsSUFBSXhCLFdBQTlCO0FBQ0FxQixtQkFBT3RCLEtBQVAsR0FBZUEsUUFBUyxJQUFJQyxXQUE1QjtBQUNBc0IsZ0JBQUlHLFNBQUosQ0FBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CSixPQUFPdEIsS0FBM0IsRUFBa0NzQixPQUFPRyxNQUF6Qzs7QUFFQSxnQkFBSXZELFVBQVU1TixTQUFkLEVBQXlCO0FBQ3JCaVIsa0JBQUkvQixTQUFKLEdBQWdCdGYsOERBQUtBLENBQUNnUix3QkFBTixDQUErQmdOLFVBQVU1TixTQUF6QyxFQUFvRDROLFVBQVVnQyxXQUFWLENBQXNCOU8sS0FBMUUsQ0FBaEI7QUFDQW1RLGtCQUFJSSxRQUFKLENBQWEsQ0FBYixFQUFnQixDQUFoQixFQUFtQkwsT0FBT3RCLEtBQTFCLEVBQWlDc0IsT0FBT0csTUFBeEM7QUFDSDs7QUFFRCxnQkFBSXhCLGVBQWUvQixVQUFVNEIsV0FBN0IsRUFBMEM7QUFDdEN5QixrQkFBSWhDLFdBQUosR0FBa0JyZiw4REFBS0EsQ0FBQ2dSLHdCQUFOLENBQStCZ04sVUFBVTRCLFdBQXpDLEVBQXNENUIsVUFBVTZCLGFBQVYsQ0FBd0IzTyxLQUE5RSxDQUFsQjtBQUNBbVEsa0JBQUlLLFNBQUosR0FBZ0IzQixXQUFoQjtBQUNBc0Isa0JBQUlNLFVBQUosQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCUCxPQUFPdEIsS0FBNUIsRUFBbUNzQixPQUFPRyxNQUExQztBQUNBRixrQkFBSU8sU0FBSixDQUFjLEdBQWQsRUFBbUIsR0FBbkI7QUFDSDs7QUFFRDtBQUNBO0FBQ0E7O0FBRUEsZ0JBQUlDLE1BQU0sSUFBSUMsS0FBSixFQUFWO0FBQ0FELGdCQUFJZCxHQUFKLEdBQVUvQyxVQUFVbUQsTUFBcEI7QUFDQVUsZ0JBQUlFLE1BQUosR0FBYSxHQUFiOztBQUVBRixnQkFBSUcsTUFBSixHQUFhLFlBQVk7QUFDckJYLGtCQUFJWSxTQUFKLENBQWNKLEdBQWQsRUFBbUI5QixXQUFuQixFQUFnQ0EsV0FBaEMsRUFBNkNELEtBQTdDLEVBQW9EeUIsTUFBcEQ7QUFDSCxhQUZEOztBQUlBd2hCLHdCQUFZM2hCLE1BQVo7O0FBRUE2aEIsOEJBQWtCbmlDLEtBQWxCLENBQXdCZ2YsS0FBeEIsR0FBaUNBLFFBQVFtQixLQUFULEdBQWtCLElBQWxEO0FBQ0FnaUIsOEJBQWtCbmlDLEtBQWxCLENBQXdCeWdCLE1BQXhCLEdBQWtDQSxTQUFTTixLQUFWLEdBQW1CLElBQXBEO0FBQ0g7QUFDSixTQTdDTSxNQTZDQTtBQUNMZ2lCLDRCQUFrQm5pQyxLQUFsQixDQUF3QjJpQyxVQUF4QixHQUFxQzNpQyxNQUFNNGlDLE9BQU4sR0FBZ0JDLFFBQWhCLEVBQXJDO0FBQ0FWLDRCQUFrQm5pQyxLQUFsQixDQUF3QjhpQyxNQUF4QixHQUFpQyxlQUFlOWlDLE1BQU0raUMsU0FBTixHQUFrQkYsUUFBbEIsRUFBaEQ7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQS9qQyxlQUFPeEIsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEZ0gsT0FBaEQsRUFBeUQ1WCxJQUF6RCxDQUE4RCtTLE9BQTlELENBQXNFLE9BQXRFLEVBQStFLEdBQS9FLEVBQW9GQSxPQUFwRixDQUE0RixPQUE1RixFQUFxRyxHQUFyRyxDQUFQO0FBQ0Frd0IsMEJBQWtCemtDLEtBQUs2OEIsT0FBTCxDQUFhO0FBQzdCcjdCLGdCQUFNLFdBQVd4QixLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0RnSCxPQUFoRCxFQUF5RDlILE9BQXpELElBQW9FOVAsSUFBL0UsQ0FEdUI7QUFFN0JzN0IseUJBQWU7QUFDYnRyQixtQkFBT3F6QixpQkFETTtBQUVieE0sc0JBQVVyNEIsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEZ0gsT0FBaEQsRUFBeUQ5SCxPQUF6RCxJQUFvRTlQLElBRmpFO0FBR2I4SCx1QkFBV0Msd0VBQVlBLENBQUMrb0IsbUJBSFg7QUFJYjRHLG9CQUFROEssV0FKSztBQUtiakgsMEJBQWM7QUFMRCxXQUZjO0FBUzdCQywyQkFBaUIsQ0FDZixFQUFDQyxTQUFTajlCLEtBQUswOEIsZ0JBQWYsRUFBaUM3MUIsU0FBU205QixXQUExQyxFQURlLEVBRWYsRUFBQy9HLFNBQVNqOUIsS0FBS2s5QixVQUFmLEVBQTJCcjJCLFNBQVM3RyxLQUFLbTlCLGNBQXpDLEVBRmUsQ0FUWTtBQWE3Qkksd0JBQWMsd0JBQVk7QUFDeEIsZ0JBQUltSSxxQkFBSixFQUNJQyxZQURKLEVBRUlDLGFBRko7O0FBSUE7QUFDQSxnQkFBSS9sQyxRQUFRNFAsSUFBUixDQUFhaE8sV0FBYixPQUErQixPQUEvQixJQUEwQ2lCLE1BQU0rUCxRQUFOLEVBQTlDLEVBQWdFO0FBQzlEaXpCLHNDQUF3QmhqQyxNQUFNK1AsUUFBTixFQUF4QjtBQUNELGFBRkQsTUFFTztBQUNMaXpCLHNDQUF3QixJQUFJcmlDLEdBQUdYLEtBQUgsQ0FBU21iLE1BQWIsQ0FBb0I7QUFDMUN0SyxzQkFBTTdRLE1BQU00aUMsT0FBTixFQURvQztBQUUxQ3ZqQix3QkFBUXJmLE1BQU0raUMsU0FBTixFQUZrQztBQUcxQzF6Qix3QkFBUTtBQUhrQyxlQUFwQixDQUF4QjtBQUtEOztBQUVEO0FBQ0Esb0JBQVFsUyxRQUFRNFAsSUFBUixDQUFhaE8sV0FBYixFQUFSO0FBQ0UsbUJBQUssVUFBTDtBQUNJOEIseUJBQVN2RCxLQUFLdStCLGlCQUFMLENBQXVCamxCLFNBQXZCLEVBQVQ7QUFDQTtBQUNKLG1CQUFLLFFBQUw7QUFDSS9WLHlCQUFTdkQsS0FBS3MrQixlQUFMLENBQXFCaGxCLFNBQXJCLEVBQVQ7QUFDQTtBQUNKLG1CQUFLLFNBQUw7QUFDRS9WLHlCQUFTdkQsS0FBS3ErQixnQkFBTCxDQUFzQi9rQixTQUF0QixFQUFUO0FBQ0E7QUFDRixtQkFBSyxZQUFMO0FBQ0UvVix5QkFBU3ZELEtBQUtvK0IsYUFBTCxDQUFtQjlrQixTQUFuQixFQUFUO0FBQ0E7QUFDRixtQkFBSyxPQUFMO0FBQ0E7QUFDRS9WLHlCQUFTdkQsS0FBS20rQixjQUFMLENBQW9CN2tCLFNBQXBCLEVBQVQ7QUFDQTtBQWhCSjs7QUFtQkFpckIscUJBQVMxa0MsUUFBUTRQLElBQWpCO0FBQ0EsZ0JBQUk4MEIsVUFBVSxVQUFkLEVBQTBCO0FBQ3hCQSx1QkFBUyxZQUFUO0FBQ0Q7O0FBRURsMEIsdUJBQVcsSUFBSWhOLEdBQUdtNkIsVUFBUCxFQUFYO0FBQ0FGLDBCQUFjLElBQUlqNkIsR0FBR2k2QixXQUFILENBQWV1SSxJQUFuQixDQUF3QjtBQUNwQ3gxQix3QkFBVUEsUUFEMEI7QUFFcEM5TSxzQkFBUUEsTUFGNEI7QUFHcENrTSxvQkFBTTgwQixNQUg4QjtBQUlwQ3VCLHdCQUFVam1DLFFBQVE0UCxJQUFSLElBQWdCLFVBSlU7QUFLcEMvTSxxQkFBTyxDQUNMLElBQUlXLEdBQUdYLEtBQUgsQ0FBU3VRLEtBQWIsQ0FBbUI7QUFDakI4Tyx3QkFBUSxJQUFJMWUsR0FBR1gsS0FBSCxDQUFTNmUsTUFBYixDQUFvQjtBQUMxQjlOLHlCQUFPLHNCQURtQjtBQUUxQmlPLHlCQUFPaGYsTUFBTStpQyxTQUFOLEdBQWtCTSxRQUFsQixLQUErQjtBQUZaLGlCQUFwQixDQURTO0FBS2pCbmdCLHVCQUFPOGY7QUFMVSxlQUFuQixDQURLLEVBUUwsSUFBSXJpQyxHQUFHWCxLQUFILENBQVN1USxLQUFiLENBQW1CO0FBQ2pCd0UsMEJBQVUvVSxNQUFNbVQsV0FBTixFQURPO0FBRWpCdEMsc0JBQU03USxNQUFNNGlDLE9BQU4sRUFGVztBQUdqQnZqQix3QkFBUXJmLE1BQU0raUMsU0FBTjtBQUhTLGVBQW5CLENBUks7QUFMNkIsYUFBeEIsQ0FBZDs7QUFxQkE7QUFDQTtBQUNBbkksd0JBQVloakIsRUFBWixDQUFlLFdBQWYsRUFDSSxVQUFVcWUsS0FBVixFQUFpQjtBQUNmZ04sNkJBQWVoTixNQUFNaG5CLE9BQXJCO0FBQ0FnMEIsMkJBQWE1dkIsR0FBYixDQUFpQixTQUFqQixFQUE0QnFELE9BQTVCOztBQUVBLGtCQUFJOHFCLGdDQUFnQ0EsNkJBQTZCOEIsT0FBakUsRUFBMEU7QUFDeEVKLGdDQUFnQixJQUFJSyxpRkFBSixDQUFpQjtBQUMvQmovQix1QkFBS2hILEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBREQ7QUFFL0JrL0IsNEJBQVV2TixNQUFNd04sVUFGZTtBQUcvQkMsOEJBQVk7QUFIbUIsaUJBQWpCLENBQWhCO0FBS0Q7QUFDRixhQVpMLEVBWU9wbUMsSUFaUDs7QUFjQTtBQUNBO0FBQ0FBLGlCQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJvSCxHQUEzQixDQUErQnNULEVBQS9CLENBQWtDLGFBQWxDLEVBQ0ksVUFBVXFlLEtBQVYsRUFBaUI7QUFDZixrQkFBSXVMLGdDQUFnQ0EsNkJBQTZCOEIsT0FBN0QsSUFBd0VMLFlBQTVFLEVBQTBGO0FBQ3RGLG9CQUFHQyxpQkFBaUJoa0MsOERBQUtBLENBQUN5a0MsZUFBTixDQUFzQlYsYUFBYTl2QixXQUFiLEVBQXRCLEVBQWtELElBQWxELEVBQXdEeXdCLFFBQXpFLElBQXFGMWtDLDhEQUFLQSxDQUFDeWtDLGVBQU4sQ0FBc0JWLGFBQWE5dkIsV0FBYixFQUF0QixFQUFrRCxJQUFsRCxFQUF3RHl3QixRQUF4RCxJQUFvRSxNQUE1SixFQUFtSztBQUMvSlYsZ0NBQWMxSyxLQUFkO0FBQ0EwSyxrQ0FBZ0IsSUFBaEI7QUFDSCxpQkFIRCxNQUlLLElBQUcsQ0FBQ0EsYUFBRCxJQUFrQmhrQyw4REFBS0EsQ0FBQ3lrQyxlQUFOLENBQXNCVixhQUFhOXZCLFdBQWIsRUFBdEIsRUFBa0QsSUFBbEQsRUFBd0R5d0IsUUFBMUUsSUFBc0Yxa0MsOERBQUtBLENBQUN5a0MsZUFBTixDQUFzQlYsYUFBYTl2QixXQUFiLEVBQXRCLEVBQWtELElBQWxELEVBQXdEeXdCLFFBQXhELElBQW9FLE1BQTdKLEVBQW9LO0FBQ3JLVixrQ0FBZ0IsSUFBSUssaUZBQUosQ0FBaUI7QUFDN0JqL0IseUJBQUtoSCxLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJvSCxHQURIO0FBRTdCay9CLDhCQUFVdk4sTUFBTXdOLFVBRmE7QUFHN0JDLGdDQUFZO0FBSGlCLG1CQUFqQixDQUFoQjtBQUtIO0FBQ0Qsb0JBQUdSLGFBQUgsRUFBaUI7QUFDYkEsZ0NBQWNXLFdBQWQsQ0FBMEI1TixNQUFNd04sVUFBaEM7QUFDQVAsZ0NBQWNZLFVBQWQsQ0FBeUI1a0MsOERBQUtBLENBQUN5a0MsZUFBTixDQUFzQlYsYUFBYTl2QixXQUFiLEVBQXRCLEVBQWtELElBQWxELEVBQXdEOHRCLFNBQWpGO0FBQ0g7QUFDSjtBQUNGLGFBbkJMLEVBbUJPM2pDLElBbkJQOztBQXFCQTtBQUNBO0FBQ0FzOUIsd0JBQVloakIsRUFBWixDQUFlLFNBQWYsRUFDSSxVQUFVcWUsS0FBVixFQUFpQjtBQUNmLGtCQUFJejNCLENBQUosRUFDSTRsQixJQURKLEVBRUlpYSxVQUZKLEVBR0l2L0IsSUFISjs7QUFLQTtBQUNBc2pDLGdDQUFrQixDQUFsQjtBQUNBdGpDLHFCQUFPeEIsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEZ0gsT0FBaEQsRUFBeUQ1WCxJQUF6RCxDQUE4RCtTLE9BQTlELENBQXNFLE9BQXRFLEVBQStFLEdBQS9FLEVBQW9GQSxPQUFwRixDQUE0RixPQUE1RixFQUFxRyxHQUFyRyxDQUFQO0FBQ0FveEIsMkJBQWE1dkIsR0FBYixDQUFpQixTQUFqQixFQUE0QixDQUFDL1YsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEZ0gsT0FBaEQsRUFBeUQ5SCxPQUF6RCxJQUFvRTlQLElBQXJFLElBQTZFLElBQTdFLEdBQW9Gc2pDLGNBQXBGLEdBQXFHLEdBQWpJO0FBQ0E7QUFDQWEsMkJBQWE1dkIsR0FBYixDQUFpQixTQUFqQixFQUE0QnFELE9BQTVCO0FBQ0E7QUFDQXVzQiwyQkFBYTV2QixHQUFiLENBQWlCLGdCQUFqQixFQUFtQ25VLDhEQUFLQSxDQUFDeWtDLGVBQU4sQ0FBc0JWLGFBQWE5dkIsV0FBYixFQUF0QixFQUFrRCxJQUFsRCxDQUFuQztBQUNBLGtCQUFJaFcsUUFBUTRQLElBQVIsQ0FBYWhPLFdBQWIsT0FBK0IsU0FBbkMsRUFBOEM7QUFDNUNra0MsNkJBQWE1dkIsR0FBYixDQUFpQixjQUFqQixFQUFpQ25VLDhEQUFLQSxDQUFDeWtDLGVBQU4sQ0FBc0JWLGFBQWE5dkIsV0FBYixFQUF0QixDQUFqQztBQUNEO0FBQ0Qsa0JBQUloVyxRQUFRNFAsSUFBUixDQUFhaE8sV0FBYixPQUErQixRQUFuQyxFQUE2QztBQUN6Q2trQyw2QkFBYTV2QixHQUFiLENBQWlCLGdCQUFqQixFQUFtQ25VLDhEQUFLQSxDQUFDeWtDLGVBQU4sQ0FBc0JWLGFBQWE5dkIsV0FBYixFQUF0QixDQUFuQztBQUNIO0FBQ0Q7QUFDQTtBQUNBaVIscUJBQU80ZCxZQUFZNWQsSUFBbkI7QUFDQWlhLDJCQUFhLEVBQWI7QUFDQSxtQkFBSzcvQixJQUFJLENBQVQsRUFBWUEsSUFBSTRsQixLQUFLcGxCLE1BQXJCLEVBQTZCUixLQUFLLENBQWxDLEVBQXFDO0FBQ25DNi9CLDJCQUFXNy9CLENBQVgsSUFBZ0IsRUFBaEI7QUFDQTYvQiwyQkFBVzcvQixDQUFYLEVBQWN3RSxHQUFkLEdBQW9Cb2hCLEtBQUs1bEIsQ0FBTCxFQUFRd0UsR0FBNUI7QUFDQXE3QiwyQkFBVzcvQixDQUFYLEVBQWNzUSxLQUFkLEdBQXNCc1YsS0FBSzVsQixDQUFMLEVBQVE0UixLQUE5QjtBQUNBaXVCLDJCQUFXNy9CLENBQVgsRUFBYzRSLEtBQWQsR0FBc0IsRUFBdEI7QUFDRDtBQUNENnlCLDJCQUFhNXZCLEdBQWIsQ0FBaUIsWUFBakIsRUFBK0JnckIsVUFBL0I7QUFDQTtBQUNBNEUsNkJBQWUsSUFBZjtBQUNBLGtCQUFJQyxhQUFKLEVBQW1CO0FBQ2pCQSw4QkFBYzFLLEtBQWQ7QUFDQTBLLGdDQUFnQixJQUFoQjtBQUNEO0FBQ0YsYUF0Q0wsRUFzQ081bEMsSUF0Q1A7O0FBd0NBQSxpQkFBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0I2N0IsY0FBL0IsQ0FBOEN2RixXQUE5QztBQUNBLG1CQUFPLElBQVA7QUFFRCxXQWhLNEIsRUFnSzFCOztBQUVIRyw0QkFBa0IsNEJBQVk7O0FBRTVCO0FBQ0F6OUIsaUJBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQmlrQyxRQUEzQixDQUFvQ0MsVUFBcEM7O0FBRUE7QUFDQXp6QixxQkFBU3l3QixLQUFUOztBQUVBO0FBQ0E7QUFDQXhELHdCQUFZeUYsU0FBWixDQUFzQixJQUF0QjtBQUNBLG1CQUFPLElBQVA7QUFDRCxXQTlLNEI7O0FBZ0w3QnJGLDhCQUFvQiw4QkFBWTs7QUFFOUI7QUFDQTE5QixpQkFBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCaWtDLFFBQTNCLENBQW9DdEgsUUFBcEM7O0FBRUE7QUFDQSxnQkFBSTE4QixRQUFRNFAsSUFBUixDQUFhaE8sV0FBYixPQUErQixPQUFuQyxFQUE0QztBQUMxQyxrQkFBSTtBQUNGNjdCLDRCQUFZbUosYUFBWjtBQUNELGVBRkQsQ0FFRSxPQUFPbk0sTUFBUCxFQUFlO0FBQ2Y7QUFDRDtBQUNGOztBQUVEO0FBQ0E7QUFDQWdELHdCQUFZeUYsU0FBWixDQUFzQixLQUF0QjtBQUNBLG1CQUFPLElBQVA7QUFDRDtBQWxNNEIsU0FBYixFQW1NZnNCLFFBbk1lLENBQWxCOztBQXFNQSxlQUFPSSxlQUFQO0FBQ0QsT0E3U0Q7O0FBK1NBSixpQkFBV3JrQyxLQUFLNjhCLE9BQUwsQ0FBYTtBQUN0QnI3QixjQUFNLFVBQVUzQixRQUFRNFAsSUFBUixDQUFhaE8sV0FBYixFQURNO0FBRXRCcTdCLHVCQUFlO0FBQ2J6RSxvQkFBVVIsY0FBY2tNLFlBQWQsQ0FERztBQUViejZCLHFCQUFXQyx3RUFBWUEsQ0FBQ3c2QixZQUFiLENBRkU7QUFHYmhILHdCQUFjO0FBSEQsU0FGTztBQU90QkMseUJBQWlCLENBQ2YsRUFBQ0MsU0FBU2o5QixLQUFLMDhCLGdCQUFmLEVBQWlDNzFCLFNBQVNtOUIsV0FBMUMsRUFEZSxFQUVmLEVBQUMvRyxTQUFTajlCLEtBQUtrOUIsVUFBZixFQUEyQnIyQixTQUFTN0csS0FBS205QixjQUF6QyxFQUZlLENBUEs7QUFXdEJJLHNCQUFjLHdCQUFZO0FBQ3hCLGNBQUlyOEIsQ0FBSixFQUNJa1ksT0FESixFQUVJc3RCLFlBRkosRUFHSUMsZ0JBSEo7O0FBS0E7QUFDQTNtQyxlQUFLYSxPQUFMLENBQWFvYSxJQUFiOztBQUVBeXJCLHlCQUFlLEVBQWY7O0FBRUE7Ozs7OztBQU1BQyw2QkFBbUIsMEJBQVVDLFdBQVYsRUFBdUI7QUFDeEMsZ0JBQUl6bEMsQ0FBSixFQUNJMGxDLGNBREosRUFFSUMsZUFGSixFQUdJcm5CLFFBSEo7O0FBS0E7QUFDQW9uQiw2QkFBaUI3bUMsS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQXBEO0FBQ0FxTix1QkFBV21uQixlQUFlL21DLFFBQVE0ZixRQUFsQztBQUNBLGdCQUFJLENBQUNBLFFBQUQsSUFBYSxDQUFDb25CLGNBQWxCLEVBQWtDO0FBQ2hDLHFCQUFPLEtBQVA7QUFDRDs7QUFFRDtBQUNBcG5CLHFCQUFTcmUsSUFBVCxDQUFjLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjs7QUFFNUI7QUFDQSxrQkFBSXVsQyxlQUFleGxDLENBQWYsS0FBcUJ3bEMsZUFBZXZsQyxDQUFmLENBQXJCLElBQTBDdWxDLGVBQWV4bEMsQ0FBZixFQUFrQnNmLE1BQWhFLEVBQXdFO0FBQ3RFLG9CQUFLLENBQUNrbUIsZUFBZXhsQyxDQUFmLEVBQWtCc2YsTUFBbEIsQ0FBeUJ2ZixJQUExQixJQUFrQyxDQUFDeWxDLGVBQWV2bEMsQ0FBZixFQUFrQnFmLE1BQWxCLENBQXlCdmYsSUFBN0QsSUFBdUV5bEMsZUFBZXhsQyxDQUFmLEVBQWtCc2YsTUFBbEIsQ0FBeUJ2ZixJQUF6QixLQUFrQ3lsQyxlQUFldmxDLENBQWYsRUFBa0JxZixNQUFsQixDQUF5QnZmLElBQXRJLEVBQTZJO0FBQzNJLHNCQUFJLENBQUN5bEMsZUFBZXhsQyxDQUFmLEVBQWtCRyxJQUFuQixJQUEyQixDQUFDcWxDLGVBQWV2bEMsQ0FBZixFQUFrQkUsSUFBbEQsRUFBd0Q7QUFDdEQsMkJBQVEsQ0FBQ3FsQyxlQUFldmxDLENBQWYsRUFBa0JFLElBQXBCLEdBQTRCLENBQUMsQ0FBN0IsR0FBaUMsQ0FBeEM7QUFDRDtBQUNELHlCQUFRcWxDLGVBQWV4bEMsQ0FBZixFQUFrQkcsSUFBbEIsQ0FBdUJDLFdBQXZCLEtBQXVDb2xDLGVBQWV2bEMsQ0FBZixFQUFrQkUsSUFBbEIsQ0FBdUJDLFdBQXZCLEVBQXhDLEdBQWdGLENBQWhGLEdBQW9GLENBQUMsQ0FBNUY7QUFDRDtBQUNELG9CQUFJLENBQUNvbEMsZUFBZXhsQyxDQUFmLEVBQWtCc2YsTUFBbEIsQ0FBeUJ2ZixJQUExQixJQUFrQyxDQUFDeWxDLGVBQWV2bEMsQ0FBZixFQUFrQnFmLE1BQWxCLENBQXlCdmYsSUFBaEUsRUFBc0U7QUFDcEUseUJBQVEsQ0FBQ3lsQyxlQUFldmxDLENBQWYsRUFBa0JxZixNQUFsQixDQUF5QnZmLElBQTNCLEdBQW1DLENBQUMsQ0FBcEMsR0FBd0MsQ0FBL0M7QUFDRDs7QUFFRCx1QkFBUXlsQyxlQUFleGxDLENBQWYsRUFBa0JzZixNQUFsQixDQUF5QnZmLElBQXpCLEdBQWdDeWxDLGVBQWV2bEMsQ0FBZixFQUFrQnFmLE1BQWxCLENBQXlCdmYsSUFBMUQsR0FBa0UsQ0FBbEUsR0FBc0UsQ0FBQyxDQUE5RTtBQUNELGVBWkQsTUFZTztBQUNMLHVCQUFPLENBQUMsQ0FBUjtBQUNEO0FBRUYsYUFuQkQsRUFkd0MsQ0FpQ3BDOztBQUVKO0FBQ0EsaUJBQUtELElBQUksQ0FBVCxFQUFZQSxJQUFJc2UsU0FBUy9kLE1BQXpCLEVBQWlDUCxLQUFLLENBQXRDLEVBQXlDO0FBQ3ZDMmxDLGdDQUFrQnhDLGFBQWE3a0IsU0FBU3RlLENBQVQsQ0FBYixDQUFsQjtBQUNBO0FBQ0Esa0JBQUlBLE1BQU0sQ0FBVixFQUFhO0FBQ1gybEMsZ0NBQWdCdkssUUFBaEI7QUFDRDtBQUNGOztBQUVEO0FBQ0F2OEIsaUJBQUs0akMsTUFBTDtBQUNBLG1CQUFPLElBQVA7QUFDRCxXQS9DRCxDQWpCd0IsQ0FnRXJCOztBQUVIO0FBQ0EsY0FBSSxDQUFDNWpDLEtBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUF4QyxFQUFzRDtBQUNwRDtBQUNBcFMsaUJBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1DQyxZQUFuQyxHQUFrRCxFQUFsRDtBQUNBczBCLDJCQUFlN21DLFFBQVE0ZixRQUF2QjtBQUNELFdBSkQsTUFJTztBQUNMO0FBQ0EsaUJBQUt2ZSxJQUFJLENBQVQsRUFBWUEsSUFBSXJCLFFBQVE0ZixRQUFSLENBQWlCL2QsTUFBakMsRUFBeUNSLEtBQUssQ0FBOUMsRUFBaUQ7QUFDL0NrWSx3QkFBVXZaLFFBQVE0ZixRQUFSLENBQWlCdmUsQ0FBakIsQ0FBVjtBQUNBLGtCQUFJLENBQUNsQixLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0RnSCxPQUFoRCxDQUFELElBQTZELENBQUNwWixLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0RnSCxPQUFoRCxFQUF5RDFXLEtBQTNILEVBQWtJO0FBQ2hJZ2tDLDZCQUFhNWtDLElBQWIsQ0FBa0JzWCxPQUFsQjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxjQUFJc3RCLGFBQWFobEMsTUFBYixHQUFzQixDQUExQixFQUE2QjtBQUMzQixnQkFBSSxDQUFDMUIsS0FBS0wsS0FBVixFQUFpQjtBQUNmZ0Isc0JBQVFDLElBQVIsQ0FBYSxrRUFBYjtBQUNEO0FBQ0RaLGlCQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ2tILGtCQUFuQyxDQUNJcXRCLFlBREosRUFFSTtBQUNFbm1DLG9CQUFNLGdCQUFZO0FBQ2hCb21DO0FBQ0QsZUFISDtBQUlFNWxDLHNCQUFRLGtCQUFZO0FBQ2xCO0FBQ0FmLHFCQUFLYSxPQUFMLENBQWFDLElBQWI7QUFDQWQscUJBQUs0akMsTUFBTDtBQUNEO0FBUkgsYUFGSjtBQWFELFdBakJELE1BaUJPO0FBQ0wrQztBQUNBM21DLGlCQUFLNGpDLE1BQUw7QUFDQTVqQyxpQkFBS2EsT0FBTCxDQUFhQyxJQUFiO0FBQ0Q7O0FBRUQsaUJBQU8sSUFBUDtBQUNELFNBcEhxQjtBQXFIdEIyOEIsMEJBQWtCLDRCQUFZO0FBQzVCLGlCQUFPLElBQVA7QUFDRCxTQXZIcUI7QUF3SHRCQyw0QkFBb0IsOEJBQVk7QUFDOUIsaUJBQU8sSUFBUDtBQUNEO0FBMUhxQixPQUFiLENBQVg7O0FBNkhBLGFBQU8yRyxRQUFQO0FBQ0QsS0Fwa0M2RTs7QUFza0M5RTs7Ozs7Ozs7QUFRQS9FLFVBQU0sY0FBVXlILFFBQVYsRUFBb0I7QUFDeEIsVUFBSXR5QixNQUFKLEVBQ0l1eUIsUUFESixFQUVJQyxRQUZKLEVBR0lDLE9BSEo7O0FBS0EsVUFBSSxLQUFLcm5DLE9BQUwsQ0FBYTRQLElBQWIsS0FBc0IsU0FBMUIsRUFBcUM7QUFDbkMsZUFBTyxLQUFLMDNCLGFBQUwsRUFBUDtBQUNEOztBQUVEMXlCLGVBQVMsSUFBSXBSLEdBQUdvUixNQUFILENBQVVpRyxPQUFkLEVBQVQ7QUFDQXNzQixpQkFBVyxFQUFYOztBQUVBQSxlQUFTaGxCLE1BQVQsR0FBa0J2TixPQUFPMnlCLGFBQVAsQ0FBcUIsS0FBS2pKLGNBQUwsQ0FBb0I3a0IsU0FBcEIsR0FBZ0MyRCxXQUFoQyxFQUFyQixDQUFsQjtBQUNBK3BCLGVBQVNLLEtBQVQsR0FBaUI1eUIsT0FBTzJ5QixhQUFQLENBQXFCLEtBQUtoSixhQUFMLENBQW1COWtCLFNBQW5CLEdBQStCMkQsV0FBL0IsRUFBckIsQ0FBakI7QUFDQStwQixlQUFTTSxRQUFULEdBQW9CN3lCLE9BQU8yeUIsYUFBUCxDQUFxQixLQUFLL0ksZ0JBQUwsQ0FBc0Iva0IsU0FBdEIsR0FBa0MyRCxXQUFsQyxFQUFyQixDQUFwQjtBQUNBK3BCLGVBQVNPLE9BQVQsR0FBbUI5eUIsT0FBTzJ5QixhQUFQLENBQXFCLEtBQUs5SSxlQUFMLENBQXFCaGxCLFNBQXJCLEdBQWlDMkQsV0FBakMsRUFBckIsQ0FBbkI7QUFDQStwQixlQUFTbEIsUUFBVCxHQUFvQnJ4QixPQUFPMnlCLGFBQVAsQ0FBcUIsS0FBSzdJLGlCQUFMLENBQXVCamxCLFNBQXZCLEdBQW1DMkQsV0FBbkMsRUFBckIsQ0FBcEI7O0FBRUFncUIsaUJBQVcsVUFBWDtBQUNBQSxrQkFBWSxLQUFLcG5DLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0NxTSxLQUE1QztBQUNBdTZCLGtCQUFZLE1BQU1oNkIsT0FBT3U2QixRQUFQLENBQWdCQyxRQUFsQztBQUNBLFVBQUksQ0FBQ1YsUUFBTCxFQUFlO0FBQ2JHLGtCQUFVajZCLE9BQU95NkIsY0FBakI7QUFDRCxPQUZELE1BRU87QUFDTFQsb0JBQVksTUFBTUYsUUFBbEI7QUFDQUcsa0JBQVVqNkIsT0FBTzA2QixZQUFqQjtBQUNEO0FBQ0Q7QUFDQSxVQUFJMTZCLE9BQU9DLFlBQVAsS0FBd0JxRixTQUF4QixJQUFxQyxRQUFPdEYsT0FBT0MsWUFBUCxDQUFvQjA2QixhQUEzQixNQUE2QyxRQUF0RixFQUFnRztBQUM5RmhtQyxzRUFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCcUssT0FBT0MsWUFBUCxDQUFvQjA2QixhQUE1QyxFQUEyRFosUUFBM0Q7QUFDRDtBQUNERSxjQUFRVyxPQUFSLENBQWdCWixRQUFoQixFQUEwQmEsS0FBS0MsU0FBTCxDQUFlZixRQUFmLENBQTFCO0FBRUQsS0FobkM2RTs7QUFrbkM5RTs7Ozs7Ozs7QUFRQTNILFVBQU0sY0FBVTBILFFBQVYsRUFBb0I7QUFDeEIsVUFBSTdsQyxDQUFKLEVBQ0lsQixJQURKLEVBRUl5VSxNQUZKLEVBR0l1ekIsUUFISixFQUlJQyxpQkFKSixFQUtJaEIsUUFMSixFQU1JQyxPQU5KLEVBT0lSLFlBUEosRUFRSXR0QixPQVJKLEVBU0k4dUIsY0FUSjs7QUFXQWxvQyxhQUFPLElBQVA7QUFDQXlVLGVBQVMsSUFBSXBSLEdBQUdvUixNQUFILENBQVVpRyxPQUFkLEVBQVQ7QUFDQTFhLFdBQUthLE9BQUwsQ0FBYW9hLElBQWI7O0FBRUFnc0IsaUJBQVcsVUFBWDtBQUNBQSxrQkFBWSxLQUFLcG5DLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0NxTSxLQUE1QztBQUNBdTZCLGtCQUFZLE1BQU1oNkIsT0FBT3U2QixRQUFQLENBQWdCQyxRQUFsQztBQUNBLFVBQUksQ0FBQ1YsUUFBTCxFQUFlO0FBQ2JHLGtCQUFVajZCLE9BQU95NkIsY0FBakI7QUFDRCxPQUZELE1BRU87QUFDTFQsb0JBQVksTUFBTUYsUUFBbEI7QUFDQUcsa0JBQVVqNkIsT0FBTzA2QixZQUFqQjtBQUNEO0FBQ0RLLGlCQUFXZCxRQUFRaUIsT0FBUixDQUFnQmxCLFFBQWhCLENBQVg7QUFDQSxVQUFJLENBQUNlLFFBQUwsRUFBZTtBQUNiaG9DLGFBQUthLE9BQUwsQ0FBYUMsSUFBYjtBQUNBLGVBQU8sS0FBUDtBQUNEO0FBQ0RrbkMsaUJBQVdGLEtBQUtNLEtBQUwsQ0FBV0osUUFBWCxDQUFYOztBQUVBQywwQkFBb0IsRUFBcEI7QUFDQXZCLHFCQUFlLEVBQWY7O0FBRUF1QiwwQkFBb0J4ekIsT0FBT21CLFlBQVAsQ0FBb0JveUIsU0FBU2htQixNQUE3QixFQUFxQ3FtQixNQUFyQyxDQUE0QzV6QixPQUFPbUIsWUFBUCxDQUFvQm95QixTQUFTWCxLQUE3QixDQUE1QyxFQUFpRjV5QixPQUFPbUIsWUFBUCxDQUFvQm95QixTQUFTVixRQUE3QixDQUFqRixFQUF5SDd5QixPQUFPbUIsWUFBUCxDQUFvQm95QixTQUFTVCxPQUE3QixDQUF6SCxFQUFnSzl5QixPQUFPbUIsWUFBUCxDQUFvQm95QixTQUFTbEMsUUFBN0IsQ0FBaEssQ0FBcEI7QUFDQSxXQUFLNWtDLElBQUksQ0FBVCxFQUFZQSxJQUFJK21DLGtCQUFrQnZtQyxNQUFsQyxFQUEwQ1IsS0FBSyxDQUEvQyxFQUFrRDtBQUNoRGtZLGtCQUFVNnVCLGtCQUFrQi9tQyxDQUFsQixFQUFxQnFILEdBQXJCLENBQXlCLFNBQXpCLENBQVY7O0FBRUEsWUFBSSxDQUFDLENBQUN2SSxLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0RnSCxPQUFoRCxDQUFELElBQTZELENBQUNwWixLQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ0MsWUFBbkMsQ0FBZ0RnSCxPQUFoRCxFQUF5RDFXLEtBQXhILEtBQWtJbUIsRUFBRXlrQyxPQUFGLENBQVVsdkIsT0FBVixFQUFtQnN0QixZQUFuQixNQUFxQyxDQUFDLENBQTVLLEVBQStLO0FBQzdLQSx1QkFBYTVrQyxJQUFiLENBQWtCc1gsT0FBbEI7QUFDRDtBQUNGOztBQUVEOHVCLHVCQUFpQiwwQkFBWTtBQUMzQmxvQyxhQUFLbStCLGNBQUwsQ0FBb0I3a0IsU0FBcEIsR0FBZ0NsQixXQUFoQyxDQUE0QzNELE9BQU9tQixZQUFQLENBQW9Cb3lCLFNBQVNobUIsTUFBN0IsQ0FBNUM7QUFDQWhpQixhQUFLbytCLGFBQUwsQ0FBbUI5a0IsU0FBbkIsR0FBK0JsQixXQUEvQixDQUEyQzNELE9BQU9tQixZQUFQLENBQW9Cb3lCLFNBQVNYLEtBQTdCLENBQTNDO0FBQ0FybkMsYUFBS3ErQixnQkFBTCxDQUFzQi9rQixTQUF0QixHQUFrQ2xCLFdBQWxDLENBQThDM0QsT0FBT21CLFlBQVAsQ0FBb0JveUIsU0FBU1YsUUFBN0IsQ0FBOUM7QUFDQXRuQyxhQUFLcytCLGVBQUwsQ0FBcUJobEIsU0FBckIsR0FBaUNsQixXQUFqQyxDQUE2QzNELE9BQU9tQixZQUFQLENBQW9Cb3lCLFNBQVNULE9BQTdCLENBQTdDO0FBQ0F2bkMsYUFBS3UrQixpQkFBTCxDQUF1QmpsQixTQUF2QixHQUFtQ2xCLFdBQW5DLENBQStDM0QsT0FBT21CLFlBQVAsQ0FBb0JveUIsU0FBU2xDLFFBQTdCLENBQS9DO0FBQ0QsT0FORDs7QUFRQSxVQUFJWSxhQUFhaGxDLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkI7QUFDM0IsWUFBSSxDQUFDMUIsS0FBS0wsS0FBVixFQUFpQjtBQUNmZ0Isa0JBQVFDLElBQVIsQ0FBYSxrRUFBYjtBQUNBLGlCQUFPLEtBQVA7QUFDRDtBQUNEWixhQUFLTCxLQUFMLENBQVd3Uyx1QkFBWCxDQUFtQ2tILGtCQUFuQyxDQUNJcXRCLFlBREosRUFFSTtBQUNFbm1DLGdCQUFNLGdCQUFZO0FBQ2hCMm5DO0FBQ0E7QUFDQSxnQkFBSWo3QixPQUFPQyxZQUFQLEtBQXdCcUYsU0FBeEIsSUFBcUMsUUFBT3RGLE9BQU9DLFlBQVAsQ0FBb0JxN0IsYUFBM0IsTUFBNkMsUUFBdEYsRUFBZ0c7QUFDOUYzbUMsNEVBQUtBLENBQUNnQixpQkFBTixDQUF3QnFLLE9BQU9DLFlBQVAsQ0FBb0JxN0IsYUFBNUMsRUFBMkRQLFFBQTNEO0FBQ0Q7QUFDRixXQVBIO0FBUUVqbkMsa0JBQVEsa0JBQVk7QUFDbEI7QUFDQWYsaUJBQUthLE9BQUwsQ0FBYUMsSUFBYjtBQUNEO0FBWEgsU0FGSjtBQWdCRCxPQXJCRCxNQXFCTztBQUNMb25DO0FBQ0Fsb0MsYUFBS2EsT0FBTCxDQUFhQyxJQUFiO0FBQ0E7QUFDQSxZQUFJbU0sT0FBT0MsWUFBUCxLQUF3QnFGLFNBQXhCLElBQXFDLFFBQU90RixPQUFPQyxZQUFQLENBQW9CcTdCLGFBQTNCLE1BQTZDLFFBQXRGLEVBQWdHO0FBQzlGM21DLHdFQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0JxSyxPQUFPQyxZQUFQLENBQW9CcTdCLGFBQTVDLEVBQTJEUCxRQUEzRDtBQUNEO0FBQ0Y7QUFDRixLQTNzQzZFLEVBMnNDM0U7O0FBRUg7Ozs7O0FBS0FiLG1CQUFlLHlCQUFZO0FBQ3pCLFVBQUkxeUIsTUFBSixFQUNJcEUsUUFESjs7QUFHQW9FLGVBQVMsSUFBSXBSLEdBQUdvUixNQUFILENBQVVpRyxPQUFkLEVBQVQ7O0FBRUFySyxpQkFBVyxLQUFLOHRCLGNBQUwsQ0FBb0I3a0IsU0FBcEIsR0FBZ0MyRCxXQUFoQyxFQUFYO0FBQ0E1TSxpQkFBV0EsU0FBU2c0QixNQUFULENBQWdCLEtBQUtqSyxhQUFMLENBQW1COWtCLFNBQW5CLEdBQStCMkQsV0FBL0IsRUFBaEIsQ0FBWDtBQUNBNU0saUJBQVdBLFNBQVNnNEIsTUFBVCxDQUFnQixLQUFLaEssZ0JBQUwsQ0FBc0Iva0IsU0FBdEIsR0FBa0MyRCxXQUFsQyxFQUFoQixDQUFYO0FBQ0E1TSxpQkFBV0EsU0FBU2c0QixNQUFULENBQWdCLEtBQUsvSixlQUFMLENBQXFCaGxCLFNBQXJCLEdBQWlDMkQsV0FBakMsRUFBaEIsQ0FBWDtBQUNBNU0saUJBQVdBLFNBQVNnNEIsTUFBVCxDQUFnQixLQUFLOUosaUJBQUwsQ0FBdUJqbEIsU0FBdkIsR0FBbUMyRCxXQUFuQyxFQUFoQixDQUFYOztBQUVBNU0saUJBQVdvRSxPQUFPMnlCLGFBQVAsQ0FBcUIvMkIsUUFBckIsQ0FBWDtBQUNBOztBQUVBLFVBQUksS0FBS3hRLE9BQUwsQ0FBYTRQLElBQWIsS0FBc0IsU0FBdEIsSUFBbUMsS0FBSzVQLE9BQUwsQ0FBYSs5QixTQUFwRCxFQUErRDtBQUM3RCxhQUFLLzlCLE9BQUwsQ0FBYSs5QixTQUFiLENBQXVCNEssR0FBdkIsQ0FBMkJuNEIsUUFBM0I7QUFDQSxlQUFPLElBQVA7QUFDRCxPQUhELE1BR087QUFDTCxlQUFPQSxRQUFQO0FBQ0Q7QUFDRixLQXZ1QzZFLEVBdXVDM0U7O0FBRUg7Ozs7O0FBS0ErdUIsbUJBQWUsdUJBQVVxSixXQUFWLEVBQXVCO0FBQ3BDLFVBQUl6b0MsSUFBSixFQUNJb1osT0FESixFQUVJM0UsTUFGSixFQUdJcEUsUUFISixFQUlJMlIsTUFKSixFQUtJOGpCLFFBTEosRUFNSXVCLEtBTkosRUFPSUMsUUFQSixFQVFJQyxPQVJKLEVBU0liLFlBVEosRUFVSXdCLGNBVkosRUFXSWhuQyxDQVhKOztBQWFBbEIsYUFBTyxJQUFQOztBQUVBLFVBQUksS0FBS0gsT0FBTCxDQUFhNFAsSUFBYixLQUFzQixTQUF0QixJQUFtQyxLQUFLNVAsT0FBTCxDQUFhKzlCLFNBQXBELEVBQStEO0FBQzdEdnRCLG1CQUFXLEtBQUt4USxPQUFMLENBQWErOUIsU0FBYixDQUF1QjRLLEdBQXZCLEVBQVg7QUFDRCxPQUZELE1BRU8sSUFBSUMsV0FBSixFQUFpQjtBQUN0QnA0QixtQkFBV280QixXQUFYO0FBQ0QsT0FGTSxNQUVBO0FBQ0wsZUFBTyxLQUFQO0FBQ0Q7O0FBRUQsVUFBSSxDQUFDcDRCLFFBQUwsRUFBZTtBQUNiO0FBQ0EsZUFBTyxLQUFQO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBOztBQUVBb0UsZUFBUyxJQUFJcFIsR0FBR29SLE1BQUgsQ0FBVWlHLE9BQWQsRUFBVDtBQUNBLFVBQUk7QUFDRnJLLG1CQUFXb0UsT0FBT21CLFlBQVAsQ0FBb0J2RixRQUFwQixDQUFYO0FBQ0QsT0FGRCxDQUVFLE9BQU9pcUIsTUFBUCxFQUFlO0FBQ2YzNUIsZ0JBQVFDLElBQVIsQ0FBYSxpREFBYjtBQUNBLGVBQU8sS0FBUDtBQUNEOztBQUVEOGxDLHFCQUFlLEVBQWY7QUFDQTFrQixlQUFTLEVBQVQ7QUFDQThqQixpQkFBVyxFQUFYO0FBQ0F1QixjQUFRLEVBQVI7QUFDQUMsaUJBQVcsRUFBWDtBQUNBQyxnQkFBVSxFQUFWO0FBQ0EsV0FBS3JtQyxJQUFJLENBQVQsRUFBWUEsSUFBSW1QLFNBQVMzTyxNQUF6QixFQUFpQ1IsS0FBSyxDQUF0QyxFQUF5QztBQUN2Q2tZLGtCQUFVL0ksU0FBU25QLENBQVQsRUFBWXFILEdBQVosQ0FBZ0IsU0FBaEIsS0FBOEI4SCxTQUFTblAsQ0FBVCxFQUFZcUgsR0FBWixDQUFnQixVQUFoQixDQUE5QixJQUE2RCxLQUF2RTs7QUFFQSxZQUFJOEgsU0FBU25QLENBQVQsS0FBZSxPQUFPbVAsU0FBU25QLENBQVQsRUFBWTJVLFdBQW5CLEtBQW1DLFVBQXRELEVBQWtFO0FBQ2hFLGNBQUl4RixTQUFTblAsQ0FBVCxFQUFZMlUsV0FBWixjQUFxQ3hTLEdBQUdxVCxJQUFILENBQVFDLEtBQWpELEVBQXdEO0FBQ3REcUwsbUJBQU9sZ0IsSUFBUCxDQUFZdU8sU0FBU25QLENBQVQsQ0FBWjtBQUNELFdBRkQsTUFFTyxJQUFJbVAsU0FBU25QLENBQVQsRUFBWTJVLFdBQVosY0FBcUN4UyxHQUFHcVQsSUFBSCxDQUFReUIsVUFBakQsRUFBNkQ7QUFDbEUsZ0JBQUk5SCxTQUFTeFEsT0FBVCxJQUFvQndRLFNBQVN4USxPQUFULENBQWlCNFAsSUFBckMsSUFBNkNZLFNBQVN4USxPQUFULENBQWlCNFAsSUFBakIsQ0FBc0JoTyxXQUF0QixNQUF1QyxVQUF4RixFQUFvRztBQUNoR3FrQyx1QkFBU2hrQyxJQUFULENBQWN1TyxTQUFTblAsQ0FBVCxDQUFkO0FBQ0gsYUFGRCxNQUVPO0FBQ0htbUMsb0JBQU12bEMsSUFBTixDQUFXdU8sU0FBU25QLENBQVQsQ0FBWDtBQUNIO0FBQ0YsV0FOTSxNQU1BLElBQUltUCxTQUFTblAsQ0FBVCxFQUFZMlUsV0FBWixjQUFxQ3hTLEdBQUdxVCxJQUFILENBQVF1QixPQUFqRCxFQUEwRDtBQUMvRHF2QixxQkFBU3hsQyxJQUFULENBQWN1TyxTQUFTblAsQ0FBVCxDQUFkO0FBQ0QsV0FGTSxNQUVBLElBQUltUCxTQUFTblAsQ0FBVCxFQUFZMlUsV0FBWixjQUFxQ3hTLEdBQUdxVCxJQUFILENBQVFtSCxNQUFqRCxFQUF5RDtBQUM5RDBwQixvQkFBUXpsQyxJQUFSLENBQWF1TyxTQUFTblAsQ0FBVCxDQUFiO0FBQ0Q7QUFDRixTQWRELE1BY087QUFDTFAsa0JBQVFDLElBQVIsQ0FBYSx1Q0FBYjtBQUNBLGlCQUFPLEtBQVA7QUFDRDs7QUFFRCxZQUFJd1ksWUFBWSxDQUFDcFosS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEZ0gsT0FBaEQsQ0FBRCxJQUE2RCxDQUFDcFosS0FBS0wsS0FBTCxDQUFXd1MsdUJBQVgsQ0FBbUNDLFlBQW5DLENBQWdEZ0gsT0FBaEQsRUFBeUQxVyxLQUFuSSxLQUE2SW1CLEVBQUV5a0MsT0FBRixDQUFVbHZCLE9BQVYsRUFBbUJzdEIsWUFBbkIsTUFBcUMsQ0FBQyxDQUF2TCxFQUEwTDtBQUN4TEEsdUJBQWE1a0MsSUFBYixDQUFrQnNYLE9BQWxCO0FBQ0Q7QUFFRjs7QUFFRDh1Qix1QkFBaUIsMEJBQVk7QUFDM0Jsb0MsYUFBS20rQixjQUFMLENBQW9CN2tCLFNBQXBCLEdBQWdDbEIsV0FBaEMsQ0FBNEM0SixNQUE1QztBQUNBaGlCLGFBQUtvK0IsYUFBTCxDQUFtQjlrQixTQUFuQixHQUErQmxCLFdBQS9CLENBQTJDaXZCLEtBQTNDO0FBQ0FybkMsYUFBS3ErQixnQkFBTCxDQUFzQi9rQixTQUF0QixHQUFrQ2xCLFdBQWxDLENBQThDa3ZCLFFBQTlDO0FBQ0F0bkMsYUFBS3MrQixlQUFMLENBQXFCaGxCLFNBQXJCLEdBQWlDbEIsV0FBakMsQ0FBNkNtdkIsT0FBN0M7QUFDQXZuQyxhQUFLdStCLGlCQUFMLENBQXVCamxCLFNBQXZCLEdBQW1DbEIsV0FBbkMsQ0FBK0MwdEIsUUFBL0M7QUFDQWxrQyxzRUFBS0EsQ0FBQzhtQyxXQUFOLENBQ0k5bUMsOERBQUtBLENBQUMrbUMsc0JBQU4sQ0FBNkIzbUIsT0FBT3FtQixNQUFQLENBQWNoQixLQUFkLEVBQXFCQyxRQUFyQixFQUErQkMsT0FBL0IsRUFBd0N6QixRQUF4QyxDQUE3QixDQURKLEVBRUk5bEMsS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FGL0IsRUFHSSxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsRUFBVCxFQUFhaEgsS0FBSzRvQyxTQUFMLENBQWVDLFdBQWYsR0FBNkIsRUFBMUMsQ0FISixFQUlJLElBSko7QUFNRCxPQVpEOztBQWNBN29DLFdBQUthLE9BQUwsQ0FBYW9hLElBQWI7QUFDQSxVQUFJeXJCLGFBQWFobEMsTUFBYixHQUFzQixDQUExQixFQUE2QjtBQUMzQixZQUFJLENBQUMxQixLQUFLTCxLQUFWLEVBQWlCO0FBQ2ZnQixrQkFBUUMsSUFBUixDQUFhLGtFQUFiO0FBQ0EsaUJBQU8sS0FBUDtBQUNEO0FBQ0RaLGFBQUtMLEtBQUwsQ0FBV3dTLHVCQUFYLENBQW1Da0gsa0JBQW5DLENBQ0lxdEIsWUFESixFQUVJO0FBQ0VubUMsZ0JBQU0sZ0JBQVk7QUFDaEIybkM7QUFDRCxXQUhIO0FBSUVubkMsa0JBQVEsa0JBQVk7QUFDbEI7QUFDQWYsaUJBQUthLE9BQUwsQ0FBYUMsSUFBYjtBQUNEO0FBUEgsU0FGSjtBQVlELE9BakJELE1BaUJPO0FBQ0xvbkM7QUFDQWxvQyxhQUFLYSxPQUFMLENBQWFDLElBQWI7QUFDRDtBQUVGLEtBOTFDNkUsQ0E4MUM1RTs7QUE5MUM0RSxHQUE1QyxDQUFwQztBQWsyQ0QsQ0E5NUNBLEVBODVDQ2IsTUE5NUNELEVBODVDUyxLQUFLcU0sR0E5NUNkLENBQUQ7O0FBZzZDTyxJQUFJcXhCLFNBQVMsS0FBS3J4QixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxDQUFzQitGLE1BQW5DLEM7Ozs7Ozs7Ozs7Ozs7QUMxN0NQO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOztBQUVBLEtBQUtyeEIsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsR0FBd0IsS0FBS3RyQixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxJQUF5QixFQUFqRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSUMsZ0JBQWdCLEVBQXBCOztBQUVBLElBQUksT0FBTzd1QixPQUFQLEtBQW1CLFdBQXZCLEVBQW9DO0FBQ2xDLE1BQUlBLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUN6QkQsb0JBQWdCaEgsdUZBQWhCO0FBQ0QsR0FGRCxNQUVPLElBQUk3bkIsUUFBUTh1QixJQUFSLEtBQWlCLElBQXJCLEVBQTJCO0FBQ2hDRCxvQkFBZ0I5Ryx3RkFBaEI7QUFDRCxHQUZNLE1BRUE7QUFDTDtBQUNBOEcsb0JBQWdCaEgsdUZBQWhCO0FBQ0Q7QUFDRjs7QUFFQSxXQUFVaHRCLENBQVYsRUFBYXlJLEdBQWIsRUFBa0I7QUFDakI7O0FBRUE7Ozs7Ozs7OztBQVFBQSxNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJrUixRQUFqQixHQUE0QixVQUFVenBCLFdBQVYsRUFBdUI7O0FBRWpEO0FBQ0EsU0FBS3hmLE9BQUwsR0FBZWdFLEVBQUVILE1BQUYsQ0FBUztBQUN0QjRGLGlCQUFXQyx3RUFBWUEsQ0FBQ2duQixRQURGO0FBRXRCL3VCLFlBQU0sVUFGZ0I7QUFHdEJ1NkIsZ0JBQVVsRSxjQUFjdEgsUUFIRjtBQUl0QnlMLGNBQVEsSUFKYztBQUt0QnA4QixxQkFBZTJTLFNBTE87QUFNdEIwcEIsaUJBQVc7QUFOVyxLQUFULEVBT1o1YyxXQVBZLENBQWY7O0FBU0EsUUFBSSxDQUFDLEtBQUt4ZixPQUFMLENBQWFELGFBQWxCLEVBQWlDO0FBQy9CLGFBQU8sS0FBUDtBQUNEOztBQUVELFNBQUtzOEIsV0FBTCxHQUFtQjl5QixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQW5COztBQUVBO0FBQ0E4eUIsa0ZBQVNBLENBQUNsRCxJQUFWLENBQWUsSUFBZixFQUFxQixLQUFLcDVCLE9BQTFCO0FBQ0QsR0FwQkQ7QUFxQkF3RCxLQUFHODFCLFFBQUgsQ0FBWTdzQixJQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJrUixRQUE3QixFQUF1QzNNLDhFQUF2Qzs7QUFFQTs7O0FBR0E3dkIsTUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCa1IsUUFBakIsQ0FBMEIxUCxTQUExQixHQUFzQ3YxQixFQUFFSCxNQUFGLENBQVM0SSxJQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJrUixRQUFqQixDQUEwQjFQLFNBQW5DLEVBQThDOztBQUVsRjs7Ozs7O0FBTUFnRCxVQUFNLGdCQUFZO0FBQ2hCO0FBQ0EsVUFBSXA4QixPQUFPLElBQVg7O0FBRUEsV0FBS2EsT0FBTCxDQUFhb2EsSUFBYjs7QUFFQSxXQUFLOHRCLFlBQUwsR0FBb0IsS0FBS0MsV0FBTCxFQUFwQjtBQUNBLFdBQUtELFlBQUwsQ0FBa0J4TSxRQUFsQjs7QUFFQSxVQUFJNThCLFFBQVFLLEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQkQsS0FBdkM7QUFDQSxVQUFJcUgsTUFBTWhILEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQXJDOztBQUVBLFdBQUtpaUMsZUFBTCxHQUF1QjcvQixTQUFTQyxhQUFULENBQXVCLEdBQXZCLENBQXZCO0FBQ0EsV0FBSzQvQixlQUFMLENBQXFCeHpCLFNBQXJCLEdBQWlDelYsS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQzZvQyxRQUFqRTtBQUNBLFdBQUtoTixXQUFMLENBQWlCMW1CLFdBQWpCLENBQTZCLEtBQUt5ekIsZUFBbEM7QUFDQSxXQUFLdk0sZ0JBQUwsQ0FBc0JDLFVBQXRCLENBQWlDLEtBQUtULFdBQXRDOztBQUVBLFdBQUtyN0IsT0FBTCxDQUFhQyxJQUFiO0FBQ0EsYUFBTyxJQUFQO0FBQ0QsS0EzQmlGLEVBMkIvRTs7O0FBR0hrb0MsaUJBQWEsdUJBQVk7QUFDdkIsVUFBSUcsUUFBSjs7QUFFRUEsaUJBQVcsS0FBS3RNLE9BQUwsQ0FBYTtBQUN4QnI3QixjQUFNLE1BRGtCO0FBRXhCczdCLHVCQUFlO0FBQ2J6RSxvQkFBVVIsY0FBYy9HLHFCQURYO0FBRWJ4bkIscUJBQVdDLHdFQUFZQSxDQUFDdW5CLHFCQUZYO0FBR2JpTSx3QkFBYztBQUhELFNBRlM7QUFPeEJDLHlCQUFpQixDQUNmLEVBQUNDLFNBQVMsS0FBS1AsZ0JBQWYsRUFBaUM3MUIsU0FBUyxLQUFLcTFCLFdBQS9DLEVBRGUsRUFFZixFQUFDZSxTQUFTLEtBQUtDLFVBQWYsRUFBMkJyMkIsU0FBUyxLQUFLczJCLGNBQXpDLEVBRmU7QUFQTyxPQUFiLENBQVg7O0FBYUYsYUFBT2dNLFFBQVA7QUFDRCxLQS9DaUYsRUErQy9FOztBQUVIQyxpQkFBYSxxQkFBVXZwQyxPQUFWLEVBQW1CO0FBQzlCLFVBQUlHLElBQUosRUFDSXFwQyxnQkFESixFQUVJTixZQUZKLEVBR0l4bEMsTUFISixFQUlJKzVCLFdBSkosRUFLSWp0QixRQUxKOztBQU9BclEsYUFBTyxJQUFQOztBQUVBOztBQUVBK29DLHFCQUFlL29DLEtBQUtvcEMsV0FBTCxDQUFpQjtBQUM5QjVuQyxjQUFNLFVBRHdCO0FBRTlCczdCLHVCQUFlO0FBQ2J6RSxvQkFBVSxVQURHLEVBQ1E7QUFDckIvdUIscUJBQVcsc0JBRkUsRUFFcUI7QUFDbEN5ekIsd0JBQWM7QUFIRCxTQUZlO0FBTzlCQyx5QkFBaUIsQ0FDZixFQUFDQyxTQUFTajlCLEtBQUtrOUIsVUFBZixFQUEyQnIyQixTQUFTN0csS0FBS205QixjQUF6QyxFQURlLENBUGE7QUFVOUJJLHNCQUFjLHdCQUFZOztBQUV4QjtBQUNBdjlCLGVBQUthLE9BQUwsQ0FBYW9hLElBQWI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBNUsscUJBQVcsSUFBSWhOLEdBQUdtNkIsVUFBUCxFQUFYOztBQUVBeDlCLGVBQUthLE9BQUwsQ0FBYUMsSUFBYjtBQUNBLGlCQUFPLElBQVA7QUFDRCxTQXRDNkI7QUF1QzlCMjhCLDBCQUFrQiw0QkFBWSxDQUM3QixDQXhDNkI7QUF5QzlCQyw0QkFBb0IsOEJBQVksQ0FDL0I7QUExQzZCLE9BQWpCLENBQWY7O0FBNkNBLGFBQU9xTCxZQUFQO0FBQ0QsS0EzR2lGLENBMkdoRjs7QUEzR2dGLEdBQTlDLENBQXRDO0FBK0dELENBcEpBLEVBb0pDOW9DLE1BcEpELEVBb0pTLEtBQUtxTSxHQXBKZCxDQUFEOztBQXNKTyxJQUFJdzhCLFdBQVcsS0FBS3g4QixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxDQUFzQmtSLFFBQXJDLEM7Ozs7Ozs7Ozs7Ozs7QUM5S1A7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFFQSxLQUFLeDhCLEdBQUwsR0FBVyxLQUFLQSxHQUFMLElBQVksRUFBdkI7QUFDQSxLQUFLQSxHQUFMLENBQVN5SyxJQUFULEdBQWdCLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULElBQWlCLEVBQWpDO0FBQ0EsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLEdBQXdCLEtBQUt0ckIsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsSUFBeUIsRUFBakQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsZ0JBQWdCLEVBQXBCOztBQUVBLElBQUksT0FBTzd1QixPQUFQLEtBQW1CLFdBQXZCLEVBQW9DO0FBQ2xDLE1BQUlBLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUN6QkQsb0JBQWdCaEgsdUZBQWhCO0FBQ0QsR0FGRCxNQUVPLElBQUk3bkIsUUFBUTh1QixJQUFSLEtBQWlCLElBQXJCLEVBQTJCO0FBQ2hDRCxvQkFBZ0I5Ryx3RkFBaEI7QUFDRCxHQUZNLE1BRUE7QUFDTDtBQUNBOEcsb0JBQWdCaEgsdUZBQWhCO0FBQ0Q7QUFDRjs7QUFFQSxXQUFVaHRCLENBQVYsRUFBYXlJLEdBQWIsRUFBa0I7QUFDakI7O0FBRUE7Ozs7Ozs7OztBQVFBQSxNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUIwUixZQUFqQixHQUFnQyxVQUFVanFCLFdBQVYsRUFBdUI7O0FBRXJEO0FBQ0EsU0FBS3hmLE9BQUwsR0FBZWdFLEVBQUVILE1BQUYsQ0FBUztBQUN0QmxDLFlBQU0sU0FEZ0I7QUFFdEJ1NkIsZ0JBQVVsRSxjQUFjL0gsWUFGRjtBQUd0QmtNLGNBQVEsSUFIYztBQUl0QnA4QixxQkFBZTJTLFNBSk87QUFLdEIwcEIsaUJBQVcsTUFMVztBQU10QnNOLG9CQUFjO0FBTlEsS0FBVCxFQU9abHFCLFdBUFksQ0FBZjs7QUFTQSxTQUFLNmMsV0FBTCxHQUFtQjl5QixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQW5COztBQUVBO0FBQ0E4eUIsa0ZBQVNBLENBQUNsRCxJQUFWLENBQWUsSUFBZixFQUFxQixLQUFLcDVCLE9BQTFCO0FBQ0QsR0FoQkQ7QUFpQkF3RCxLQUFHODFCLFFBQUgsQ0FBWTdzQixJQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUIwUixZQUE3QixFQUEyQ25OLDhFQUEzQzs7QUFFQTs7O0FBR0E3dkIsTUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCMFIsWUFBakIsQ0FBOEJsUSxTQUE5QixHQUEwQ3YxQixFQUFFSCxNQUFGLENBQVM0SSxJQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUIwUixZQUFqQixDQUE4QmxRLFNBQXZDLEVBQWtEOztBQUUxRjs7Ozs7O0FBTUFnRCxVQUFNLGdCQUFZOztBQUVoQixXQUFLdjdCLE9BQUwsQ0FBYW9hLElBQWI7O0FBRUE7QUFDQSxXQUFLdXVCLGdCQUFMLEdBQXdCLElBQUlubUMsR0FBR2YsS0FBSCxDQUFTd1IsTUFBYixDQUFvQixFQUFDdlEsUUFBUSxJQUFJRixHQUFHRSxNQUFILENBQVV1USxNQUFkLEVBQVQsRUFBcEIsQ0FBeEI7QUFDQSxXQUFLMjFCLG1CQUFMLEdBQTJCLElBQUlwbUMsR0FBR2YsS0FBSCxDQUFTd1IsTUFBYixDQUFvQixFQUFDdlEsUUFBUSxJQUFJRixHQUFHRSxNQUFILENBQVV1USxNQUFkLEVBQVQsRUFBcEIsQ0FBM0I7QUFDQSxXQUFLNDFCLGtCQUFMLEdBQTBCLElBQUlybUMsR0FBR2YsS0FBSCxDQUFTd1IsTUFBYixDQUFvQixFQUFDdlEsUUFBUSxJQUFJRixHQUFHRSxNQUFILENBQVV1USxNQUFkLEVBQVQsRUFBcEIsQ0FBMUI7QUFDQSxXQUFLNjFCLG9CQUFMLEdBQTRCLElBQUl0bUMsR0FBR2YsS0FBSCxDQUFTd1IsTUFBYixDQUFvQixFQUFDdlEsUUFBUSxJQUFJRixHQUFHRSxNQUFILENBQVV1USxNQUFkLEVBQVQsRUFBcEIsQ0FBNUI7O0FBRUEsV0FBSzgxQixpQkFBTCxHQUF5QixJQUFJdm1DLEdBQUdmLEtBQUgsQ0FBU2dGLEtBQWIsQ0FBbUI7QUFDMUN0QixnQkFBUSxJQUFJM0MsR0FBR202QixVQUFQLENBQWtCLENBQ3hCLEtBQUttTSxvQkFEbUIsRUFFeEIsS0FBS0Qsa0JBRm1CLEVBR3hCLEtBQUtELG1CQUhtQixFQUl4QixLQUFLRCxnQkFKbUIsQ0FBbEIsQ0FEa0M7QUFPMUN0NUIsaUJBQVM7QUFQaUMsT0FBbkIsQ0FBekI7QUFTQSxXQUFLclEsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0IrVCxRQUEvQixDQUF3QyxLQUFLNnVCLGlCQUE3Qzs7QUFFQTtBQUNBLFdBQUtDLGlCQUFMLEdBQXlCLEtBQUtwTCxhQUFMLEVBQXpCO0FBQ0EsV0FBS29MLGlCQUFMLENBQXVCdE4sUUFBdkI7QUFDQSxXQUFLdU4sZUFBTCxHQUF1QixLQUFLQyxjQUFMLENBQW9CLEVBQUN0NkIsTUFBTSxZQUFQLEVBQXBCLENBQXZCO0FBQ0EsV0FBS3U2QixlQUFMLEdBQXVCLEtBQUtELGNBQUwsQ0FBb0IsRUFBQ3Q2QixNQUFNLFNBQVAsRUFBcEIsQ0FBdkI7QUFDQSxXQUFLdzZCLGlCQUFMLEdBQXlCLEtBQUtGLGNBQUwsQ0FBb0IsRUFBQ3Q2QixNQUFNLFFBQVAsRUFBcEIsQ0FBekI7QUFDQSxXQUFLeTZCLG1CQUFMLEdBQTJCLEtBQUtILGNBQUwsQ0FBb0IsRUFBQ3Q2QixNQUFNLFVBQVAsRUFBcEIsQ0FBM0I7O0FBRUE7QUFDQSxXQUFLdzVCLGVBQUwsR0FBdUI3L0IsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQUF2QjtBQUNBLFdBQUs0L0IsZUFBTCxDQUFxQnh6QixTQUFyQixHQUFpQ29pQixjQUFjOUgsaUJBQS9DO0FBQ0EsV0FBS2taLGVBQUwsQ0FBcUJ4ekIsU0FBckIsSUFBa0Msa0JBQWtCb2lCLGNBQWM3SCw0QkFBaEMsR0FBK0QsT0FBakc7QUFDQSxXQUFLa00sV0FBTCxDQUFpQjFtQixXQUFqQixDQUE2QixLQUFLeXpCLGVBQWxDO0FBQ0EsV0FBS3ZNLGdCQUFMLENBQXNCbG5CLFdBQXRCLENBQWtDLEtBQUswbUIsV0FBdkM7O0FBRUEsV0FBS3I3QixPQUFMLENBQWFDLElBQWI7QUFDQSxhQUFPLElBQVA7QUFDRCxLQTlDeUYsRUE4Q3ZGOztBQUVIOzs7OztBQUtBMCtCLHNCQUFrQiw0QkFBWTtBQUM1QixVQUFJMkssWUFBSixFQUNJQyxlQURKLEVBRUlDLGNBRkosRUFHSUMsZ0JBSEosRUFJSXBwQyxDQUpKOztBQU1BLFVBQUksS0FBSzBvQyxpQkFBTCxDQUF1Qm5LLFVBQXZCLEVBQUosRUFBeUM7QUFDdkMsYUFBS21LLGlCQUFMLENBQXVCbGhDLFVBQXZCLENBQWtDLEtBQWxDOztBQUVBO0FBQ0F5aEMsdUJBQWUsS0FBS1gsZ0JBQUwsQ0FBc0Jsd0IsU0FBdEIsR0FBa0MyRCxXQUFsQyxFQUFmO0FBQ0EsYUFBSy9iLElBQUksQ0FBVCxFQUFZQSxJQUFJaXBDLGFBQWF6b0MsTUFBN0IsRUFBcUNSLEtBQUssQ0FBMUMsRUFBNkM7QUFDM0NpcEMsdUJBQWFqcEMsQ0FBYixFQUFnQnFILEdBQWhCLENBQW9CLFNBQXBCLEVBQStCekgsSUFBL0I7QUFDRDtBQUNEO0FBQ0FzcEMsMEJBQWtCLEtBQUtYLG1CQUFMLENBQXlCbndCLFNBQXpCLEdBQXFDMkQsV0FBckMsRUFBbEI7QUFDQSxhQUFLL2IsSUFBSSxDQUFULEVBQVlBLElBQUlrcEMsZ0JBQWdCMW9DLE1BQWhDLEVBQXdDUixLQUFLLENBQTdDLEVBQWdEO0FBQzlDa3BDLDBCQUFnQmxwQyxDQUFoQixFQUFtQnFILEdBQW5CLENBQXVCLFNBQXZCLEVBQWtDekgsSUFBbEM7QUFDRDtBQUNEO0FBQ0F1cEMseUJBQWlCLEtBQUtYLGtCQUFMLENBQXdCcHdCLFNBQXhCLEdBQW9DMkQsV0FBcEMsRUFBakI7QUFDQSxhQUFLL2IsSUFBSSxDQUFULEVBQVlBLElBQUltcEMsZUFBZTNvQyxNQUEvQixFQUF1Q1IsS0FBSyxDQUE1QyxFQUErQztBQUMzQ21wQyx5QkFBZW5wQyxDQUFmLEVBQWtCcUgsR0FBbEIsQ0FBc0IsU0FBdEIsRUFBaUN6SCxJQUFqQztBQUNIO0FBQ0Q7QUFDQXdwQywyQkFBbUIsS0FBS1gsb0JBQUwsQ0FBMEJyd0IsU0FBMUIsR0FBc0MyRCxXQUF0QyxFQUFuQjtBQUNBLGFBQUsvYixJQUFJLENBQVQsRUFBWUEsSUFBSW9wQyxpQkFBaUI1b0MsTUFBakMsRUFBeUNSLEtBQUssQ0FBOUMsRUFBaUQ7QUFDN0NvcEMsMkJBQWlCcHBDLENBQWpCLEVBQW9CcUgsR0FBcEIsQ0FBd0IsU0FBeEIsRUFBbUN6SCxJQUFuQztBQUNIO0FBQ0Y7QUFDRixLQXBGeUYsRUFvRnZGOztBQUVIOzs7OztBQUtBNCtCLHFCQUFpQiwyQkFBWTtBQUMzQixVQUFJeUssWUFBSixFQUNJQyxlQURKLEVBRUlDLGNBRkosRUFHSUMsZ0JBSEosRUFJSXBwQyxDQUpKOztBQU1BLFVBQUksQ0FBQyxLQUFLMG9DLGlCQUFMLENBQXVCbkssVUFBdkIsRUFBTCxFQUEwQztBQUN4QyxhQUFLbUssaUJBQUwsQ0FBdUJsaEMsVUFBdkIsQ0FBa0MsSUFBbEM7O0FBRUE7QUFDQXloQyx1QkFBZSxLQUFLWCxnQkFBTCxDQUFzQmx3QixTQUF0QixHQUFrQzJELFdBQWxDLEVBQWY7QUFDQSxhQUFLL2IsSUFBSSxDQUFULEVBQVlBLElBQUlpcEMsYUFBYXpvQyxNQUE3QixFQUFxQ1IsS0FBSyxDQUExQyxFQUE2QztBQUMzQ2lwQyx1QkFBYWpwQyxDQUFiLEVBQWdCcUgsR0FBaEIsQ0FBb0IsU0FBcEIsRUFBK0IwUyxJQUEvQjtBQUNEO0FBQ0Q7QUFDQW12QiwwQkFBa0IsS0FBS1gsbUJBQUwsQ0FBeUJud0IsU0FBekIsR0FBcUMyRCxXQUFyQyxFQUFsQjtBQUNBLGFBQUsvYixJQUFJLENBQVQsRUFBWUEsSUFBSWtwQyxnQkFBZ0Ixb0MsTUFBaEMsRUFBd0NSLEtBQUssQ0FBN0MsRUFBZ0Q7QUFDOUNrcEMsMEJBQWdCbHBDLENBQWhCLEVBQW1CcUgsR0FBbkIsQ0FBdUIsU0FBdkIsRUFBa0MwUyxJQUFsQztBQUNEO0FBQ0Q7QUFDQW92Qix5QkFBaUIsS0FBS1gsa0JBQUwsQ0FBd0Jwd0IsU0FBeEIsR0FBb0MyRCxXQUFwQyxFQUFqQjtBQUNBLGFBQUsvYixJQUFJLENBQVQsRUFBWUEsSUFBSW1wQyxlQUFlM29DLE1BQS9CLEVBQXVDUixLQUFLLENBQTVDLEVBQStDO0FBQzNDbXBDLHlCQUFlbnBDLENBQWYsRUFBa0JxSCxHQUFsQixDQUFzQixTQUF0QixFQUFpQzBTLElBQWpDO0FBQ0g7QUFDRDtBQUNBcXZCLDJCQUFtQixLQUFLWCxvQkFBTCxDQUEwQnJ3QixTQUExQixHQUFzQzJELFdBQXRDLEVBQW5CO0FBQ0EsYUFBSy9iLElBQUksQ0FBVCxFQUFZQSxJQUFJb3BDLGlCQUFpQjVvQyxNQUFqQyxFQUF5Q1IsS0FBSyxDQUE5QyxFQUFpRDtBQUM3Q29wQywyQkFBaUJwcEMsQ0FBakIsRUFBb0JxSCxHQUFwQixDQUF3QixTQUF4QixFQUFtQzBTLElBQW5DO0FBQ0g7QUFDRjtBQUNGLEtBMUh5RixFQTBIdkY7O0FBRUg7OztBQUdBd2pCLG1CQUFlLHlCQUFZO0FBQ3pCLFVBQUl5QixVQUFKOztBQUVBQSxtQkFBYSxLQUFLckQsT0FBTCxDQUFhO0FBQ3hCcjdCLGNBQU0sUUFEa0I7QUFFeEJzN0IsdUJBQWU7QUFDYnpFLG9CQUFVUixjQUFjNUgsZ0NBRFg7QUFFYjNtQixxQkFBV0Msd0VBQVlBLENBQUMwbUIsZ0NBRlg7QUFHYjhNLHdCQUFjO0FBSEQsU0FGUztBQU94QkMseUJBQWlCLENBQ2YsRUFBQ0MsU0FBUyxLQUFLUCxnQkFBZixFQUFpQzcxQixTQUFTLEtBQUtxMUIsV0FBL0MsRUFEZSxFQUVmLEVBQUNlLFNBQVMsS0FBS0MsVUFBZixFQUEyQnIyQixTQUFTLEtBQUtzMkIsY0FBekMsRUFGZTtBQVBPLE9BQWIsQ0FBYjs7QUFhQSxhQUFPK0MsVUFBUDtBQUNELEtBaEp5RixFQWdKdkY7O0FBRUg7Ozs7O0FBS0E2SixvQkFBZ0Isd0JBQVVscUMsT0FBVixFQUFtQjtBQUNqQyxVQUFJRyxJQUFKLEVBQ0krakMsWUFESixFQUVJd0csV0FGSixFQUdJaG5DLE1BSEosRUFJSSs1QixXQUpKLEVBS0lqdEIsUUFMSixFQU1JazBCLE1BTko7O0FBUUF2a0MsYUFBTyxJQUFQOztBQUVBSCxnQkFBVWdFLEVBQUVILE1BQUYsQ0FBUztBQUNqQitMLGNBQU07QUFEVyxPQUFULEVBRVA1UCxPQUZPLENBQVY7O0FBSUFra0MscUJBQWUsb0NBQW9DbGtDLFFBQVE0UCxJQUFSLENBQWErMEIsV0FBYixFQUFuRDs7QUFFQStGLG9CQUFjdnFDLEtBQUs2OEIsT0FBTCxDQUFhO0FBQ3pCcjdCLGNBQU0sVUFBVTNCLFFBQVE0UCxJQUFSLENBQWFoTyxXQUFiLEVBRFM7QUFFekJxN0IsdUJBQWU7QUFDYnpFLG9CQUFVUixjQUFja00sWUFBZCxDQURHO0FBRWJ6NkIscUJBQVdDLHdFQUFZQSxDQUFDdzZCLFlBQWIsQ0FGRTtBQUdiaEgsd0JBQWM7QUFIRCxTQUZVO0FBT3pCQyx5QkFBaUIsQ0FDZixFQUFDQyxTQUFTajlCLEtBQUtrOUIsVUFBZixFQUEyQnIyQixTQUFTN0csS0FBS205QixjQUF6QyxFQURlLENBUFE7QUFVekJJLHNCQUFjLHdCQUFZO0FBQ3hCLGNBQUl1SCxjQUFKLEVBQ0lhLFlBREosRUFFSUMsYUFGSixFQUdJNEUsaUJBSEosRUFJSUMsb0JBSkosRUFLSUMsa0JBTEosRUFNSUMsa0JBTkosRUFPSUMsb0JBUEo7O0FBU0E7QUFDQTVxQyxlQUFLYSxPQUFMLENBQWFvYSxJQUFiOztBQUVBNnBCLDJCQUFpQixDQUFqQjs7QUFFQSxjQUFJamxDLFFBQVE0UCxJQUFSLENBQWFoTyxXQUFiLE9BQStCLFVBQW5DLEVBQStDO0FBQzNDOEIscUJBQVN2RCxLQUFLMnBDLG9CQUFMLENBQTBCcndCLFNBQTFCLEVBQVQ7QUFDSCxXQUZELE1BRU8sSUFBSXpaLFFBQVE0UCxJQUFSLENBQWFoTyxXQUFiLE9BQStCLFFBQW5DLEVBQTZDO0FBQ2hEOEIscUJBQVN2RCxLQUFLMHBDLGtCQUFMLENBQXdCcHdCLFNBQXhCLEVBQVQ7QUFDSCxXQUZNLE1BRUEsSUFBSXpaLFFBQVE0UCxJQUFSLENBQWFoTyxXQUFiLE9BQStCLFNBQW5DLEVBQThDO0FBQ2pEOEIscUJBQVN2RCxLQUFLeXBDLG1CQUFMLENBQXlCbndCLFNBQXpCLEVBQVQ7QUFDSCxXQUZNLE1BRUE7QUFDSC9WLHFCQUFTdkQsS0FBS3dwQyxnQkFBTCxDQUFzQmx3QixTQUF0QixFQUFUO0FBQ0g7O0FBRURqSixxQkFBVyxJQUFJaE4sR0FBR202QixVQUFQLEVBQVg7O0FBRUErRyxtQkFBUzFrQyxRQUFRNFAsSUFBakI7QUFDQSxjQUFJODBCLFVBQVUsVUFBZCxFQUEwQjtBQUN0QkEscUJBQVMsWUFBVDtBQUNIO0FBQ0RqSCx3QkFBYyxJQUFJajZCLEdBQUdpNkIsV0FBSCxDQUFldUksSUFBbkIsQ0FBd0I7QUFDcEN4MUIsc0JBQVVBLFFBRDBCO0FBRXBDOU0sb0JBQVFBLE1BRjRCO0FBR3BDa00sa0JBQU04MEIsTUFIOEI7QUFJcEN1QixzQkFBVWptQyxRQUFRNFAsSUFBUixJQUFnQjtBQUMxQjtBQUNBO0FBTm9DLFdBQXhCLENBQWQ7O0FBU0ErNkIsOEJBQW9CLDJCQUFVNzRCLE9BQVYsRUFBbUI7QUFDckMsZ0JBQUlrNUIsV0FBSixFQUNJN0osZUFESixFQUVJOEosWUFGSixFQUdJeEosWUFISixFQUlJRixnQkFKSixFQUtJQyxhQUxKLEVBTUkwSixXQU5KLEVBT0lDLFFBUEosRUFRSUMsT0FSSixFQVNJQyxXQVRKLEVBVUlDLGFBVko7O0FBWUEsZ0JBQUksQ0FBQ3g1QixPQUFELFlBQW9CdE8sR0FBR21VLE9BQTNCLEVBQW9DO0FBQ2xDLHFCQUFPLEtBQVA7QUFDRDs7QUFFRDtBQUNBLGdCQUFJeFgsS0FBS2s4QixXQUFMLENBQWlCa1AsaUJBQWpCLEtBQXVDLENBQXZDLElBQTRDcHJDLEtBQUtrOEIsV0FBTCxDQUFpQmhuQixRQUFqQixDQUEwQixDQUExQixNQUFpQ2xWLEtBQUtpcEMsZUFBdEYsRUFBdUc7QUFDckdqcEMsbUJBQUtrOEIsV0FBTCxDQUFpQm1QLFdBQWpCLENBQTZCcnJDLEtBQUtpcEMsZUFBbEM7QUFDRDs7QUFFRDtBQUNBLGdCQUFJdDNCLFFBQVFrRSxXQUFSLGNBQWlDeFMsR0FBR3FULElBQUgsQ0FBUXlCLFVBQTdDLEVBQXlEO0FBQ3ZENnlCLHlCQUFXblQsY0FBY3ZPLE1BQXpCO0FBQ0EyaEIsd0JBQVVwVCxjQUFjM08sSUFBeEI7QUFDQWdpQiw0QkFBYyxLQUFkO0FBQ0FDLDhCQUFnQixLQUFoQjtBQUNELGFBTEQsTUFLTyxJQUFJeDVCLFFBQVFrRSxXQUFSLGNBQWlDeFMsR0FBR3FULElBQUgsQ0FBUXVCLE9BQTdDLEVBQXNEO0FBQzNEK3lCLHlCQUFXblQsY0FBY3hPLFNBQXpCO0FBQ0E0aEIsd0JBQVVwVCxjQUFjMU8sT0FBeEI7QUFDQStoQiw0QkFBYyxJQUFkO0FBQ0FDLDhCQUFnQixLQUFoQjtBQUNELGFBTE0sTUFLQSxJQUFJeDVCLFFBQVFrRSxXQUFSLGNBQWlDeFMsR0FBR3FULElBQUgsQ0FBUW1ILE1BQTdDLEVBQXFEO0FBQzFEbXRCLHlCQUFXblQsY0FBY3JPLE1BQXpCO0FBQ0F5aEIsd0JBQVVwVCxjQUFjek8sTUFBeEI7QUFDQThoQiw0QkFBYyxJQUFkO0FBQ0FDLDhCQUFnQixJQUFoQjtBQUNELGFBTE0sTUFLQTtBQUNMO0FBQ0FILHlCQUFXblQsY0FBY3ZPLE1BQXpCO0FBQ0EyaEIsd0JBQVVwVCxjQUFjNU8sUUFBeEI7QUFDQWlpQiw0QkFBYyxLQUFkO0FBQ0FDLDhCQUFnQixLQUFoQjtBQUNEOztBQUVEO0FBQ0FOLDBCQUFjemhDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZDs7QUFFQTtBQUNBMjNCLDhCQUFrQjUzQixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWxCO0FBQ0EyM0IsNEJBQWdCMTNCLFNBQWhCLEdBQTRCLG1DQUE1QjtBQUNBLGdCQUFJdEosS0FBS0gsT0FBTCxDQUFhMHBDLFlBQWpCLEVBQStCO0FBQzNCdkksOEJBQWdCMTNCLFNBQWhCLEdBQTRCLDJFQUE1QjtBQUNBdEosbUJBQUtILE9BQUwsQ0FBYTBwQyxZQUFiLEdBQTRCLEtBQTVCO0FBQ0g7QUFDRHNCLHdCQUFZcjFCLFdBQVosQ0FBd0J3ckIsZUFBeEI7O0FBRUE7QUFDQThKLDJCQUFlMWhDLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZjtBQUNBeWhDLHlCQUFhdjFCLFlBQWIsQ0FBMEIsS0FBMUIsRUFBaUMsb0JBQW9CdXZCLGNBQXJEO0FBQ0FnRyx5QkFBYXIxQixTQUFiLEdBQXlCb2lCLGNBQWMvTyxJQUFkLEdBQXFCLElBQTlDO0FBQ0FrWSw0QkFBZ0J4ckIsV0FBaEIsQ0FBNEJzMUIsWUFBNUI7O0FBRUE7QUFDQXhKLDJCQUFlbDRCLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZjtBQUNBaTRCLHlCQUFhN3hCLElBQWIsR0FBb0IsTUFBcEI7QUFDQTZ4Qix5QkFBYTkvQixJQUFiLEdBQW9CLG9CQUFvQnNqQyxjQUF4QztBQUNBeEQseUJBQWF4dUIsS0FBYixHQUFxQm00QixVQUFVLEdBQVYsR0FBZ0JuRyxjQUFyQztBQUNBO0FBQ0FqaEMsY0FBRXk5QixZQUFGLEVBQWdCZ0ssTUFBaEIsQ0FBdUIsVUFBVTNTLEtBQVYsRUFBaUI7QUFDdEM4UixtQ0FBcUI5NEIsT0FBckI7QUFDRCxhQUZEO0FBR0FxdkIsNEJBQWdCeHJCLFdBQWhCLENBQTRCOHJCLFlBQTVCO0FBQ0EzdkIsb0JBQVFvRSxHQUFSLENBQVksc0JBQVosRUFBb0N1ckIsWUFBcEM7O0FBRUE7QUFDQUYsK0JBQW1CaDRCLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBbkI7QUFDQSszQiw2QkFBaUI5M0IsU0FBakIsR0FBNkIscUNBQTdCO0FBQ0ErM0IsNEJBQWdCajRCLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBaEI7QUFDQWc0QiwwQkFBYzVyQixTQUFkLEdBQTBCdTFCLFdBQVcsSUFBckM7QUFDQTVKLDZCQUFpQjVyQixXQUFqQixDQUE2QjZyQixhQUE3QjtBQUNBMEosMEJBQWMzaEMsU0FBU0MsYUFBVCxDQUF1QixNQUF2QixDQUFkO0FBQ0EwaEMsd0JBQVl0MUIsU0FBWixHQUF3QixLQUF4QjtBQUNBMnJCLDZCQUFpQjVyQixXQUFqQixDQUE2QnUxQixXQUE3QjtBQUNBRix3QkFBWXIxQixXQUFaLENBQXdCNHJCLGdCQUF4QjtBQUNBenZCLG9CQUFRb0UsR0FBUixDQUFZLHNCQUFaLEVBQW9DZzFCLFdBQXBDOztBQUVBLGdCQUFJRyxXQUFKLEVBQWlCO0FBQ2Y5SixpQ0FBbUJoNEIsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQUFuQjtBQUNBKzNCLCtCQUFpQjkzQixTQUFqQixHQUE2QixpREFBN0I7QUFDQSszQiw4QkFBZ0JqNEIsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFoQjtBQUNBZzRCLDRCQUFjNXJCLFNBQWQsR0FBMEJvaUIsY0FBY3RPLFdBQWQsR0FBNEIsSUFBdEQ7QUFDQTZYLCtCQUFpQjVyQixXQUFqQixDQUE2QjZyQixhQUE3QjtBQUNBMEosNEJBQWMzaEMsU0FBU0MsYUFBVCxDQUF1QixNQUF2QixDQUFkO0FBQ0EwaEMsMEJBQVl0MUIsU0FBWixHQUF3QixLQUF4QjtBQUNBMnJCLCtCQUFpQjVyQixXQUFqQixDQUE2QnUxQixXQUE3QjtBQUNBRiwwQkFBWXIxQixXQUFaLENBQXdCNHJCLGdCQUF4QjtBQUNBenZCLHNCQUFRb0UsR0FBUixDQUFZLHNCQUFaLEVBQW9DZzFCLFdBQXBDO0FBQ0Q7O0FBRUQsZ0JBQUlJLGFBQUosRUFBbUI7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQXg1QixzQkFBUW9FLEdBQVIsQ0FBWSx3QkFBWixFQUFzQ2cxQixXQUF0QztBQUNIOztBQUdEO0FBQ0FqRyw4QkFBa0IsQ0FBbEI7O0FBRUE7QUFDQTlrQyxpQkFBS2s4QixXQUFMLENBQWlCMW1CLFdBQWpCLENBQTZCcTFCLFdBQTdCO0FBQ0E7QUFDQWw1QixvQkFBUW9FLEdBQVIsQ0FBWSxhQUFaLEVBQTJCODBCLFdBQTNCOztBQUVBN3FDLGlCQUFLNGpDLE1BQUw7QUFDRCxXQTVIRCxDQXhDd0IsQ0FvS3JCOztBQUVINkcsaUNBQXVCLDhCQUFVOTRCLE9BQVYsRUFBbUI7QUFDeEMsZ0JBQUk0NUIsY0FBSixFQUNJQyxVQURKLEVBRUlocUMsSUFGSixFQUdJRSxNQUhKLEVBSUkrcEMsSUFKSixFQUtJMTVCLE1BTEo7O0FBT0F3NUIsNkJBQWlCNTVCLFFBQVFwSixHQUFSLENBQVksU0FBWixDQUFqQjtBQUNBL0csbUJBQU9tUSxRQUFRcEosR0FBUixDQUFZLHNCQUFaLEVBQW9DdUssS0FBM0M7QUFDQXBSLHFCQUFTRSw4REFBS0EsQ0FBQ3lrQyxlQUFOLENBQXNCMTBCLFFBQVFrRSxXQUFSLEVBQXRCLEVBQTZDLElBQTdDLENBQVQ7QUFDQTIxQix5QkFBYSxhQUFhaHFDLElBQWIsR0FBb0IsZUFBakM7O0FBRUFtUSxvQkFBUW9FLEdBQVIsQ0FBWSxnQkFBWixFQUE4QnJVLE1BQTlCO0FBQ0FpUSxvQkFBUXBKLEdBQVIsQ0FBWSxzQkFBWixFQUFvQ2tOLFNBQXBDLEdBQWdEL1QsT0FBT2lpQyxTQUF2RDtBQUNBLGdCQUFJaHlCLFFBQVFwSixHQUFSLENBQVksY0FBWixNQUFnQyxRQUFwQyxFQUE4QztBQUM1Q3dKLHVCQUFTblEsOERBQUtBLENBQUN5a0MsZUFBTixDQUFzQjEwQixRQUFRa0UsV0FBUixFQUF0QixDQUFUO0FBQ0FsRSxzQkFBUW9FLEdBQVIsQ0FBWSxnQkFBWixFQUE4QmhFLE1BQTlCO0FBQ0FKLHNCQUFRcEosR0FBUixDQUFZLHdCQUFaLEVBQXNDa04sU0FBdEMsR0FBa0QxRCxPQUFPNHhCLFNBQXpEO0FBQ0E2SCw0QkFBY3o1QixPQUFPNHhCLFNBQXJCOztBQUVBOEgscUJBQU83cEMsOERBQUtBLENBQUN5a0MsZUFBTixDQUFzQjEwQixRQUFRa0UsV0FBUixFQUF0QixFQUE2QyxLQUE3QyxFQUFvRCxJQUFwRCxDQUFQO0FBQ0FsRSxzQkFBUW9FLEdBQVIsQ0FBWSxjQUFaLEVBQTRCMDFCLElBQTVCO0FBQ0E5NUIsc0JBQVFwSixHQUFSLENBQVksc0JBQVosRUFBb0NrTixTQUFwQyxHQUFnRGcyQixLQUFLOUgsU0FBckQ7QUFDQTtBQUNELGFBVkQsTUFVTyxJQUFJaHlCLFFBQVFwSixHQUFSLENBQVksY0FBWixNQUFnQyxTQUFwQyxFQUErQztBQUNsRGtqQyxxQkFBTzdwQyw4REFBS0EsQ0FBQ3lrQyxlQUFOLENBQXNCMTBCLFFBQVFrRSxXQUFSLEVBQXRCLENBQVA7QUFDQWxFLHNCQUFRb0UsR0FBUixDQUFZLGNBQVosRUFBNEIwMUIsSUFBNUI7QUFDQTk1QixzQkFBUXBKLEdBQVIsQ0FBWSxzQkFBWixFQUFvQ2tOLFNBQXBDLEdBQWdEZzJCLEtBQUs5SCxTQUFyRDtBQUNBNkgsNEJBQWNDLEtBQUs5SCxTQUFuQjtBQUNILGFBTE0sTUFLQTtBQUNMNkgsNEJBQWM5cEMsT0FBT2lpQyxTQUFyQjtBQUNEO0FBQ0Q0SCwyQkFBZS9FLFVBQWYsQ0FBMEJnRixVQUExQjtBQUNELFdBbENELENBdEt3QixDQXdNckI7O0FBRUhaLGlDQUF1Qiw4QkFBVWo1QixPQUFWLEVBQW1CO0FBQ3hDM1IsaUJBQUtrOEIsV0FBTCxDQUFpQm1QLFdBQWpCLENBQTZCMTVCLFFBQVFwSixHQUFSLENBQVksYUFBWixDQUE3Qjs7QUFFQTtBQUNBLGdCQUFJdkksS0FBS2s4QixXQUFMLENBQWlCa1AsaUJBQWpCLEdBQXFDLENBQXpDLEVBQTRDO0FBQzFDcHJDLG1CQUFLazhCLFdBQUwsQ0FBaUIxbUIsV0FBakIsQ0FBNkJ4VixLQUFLaXBDLGVBQWxDO0FBQ0FqcEMsbUJBQUs0akMsTUFBTDtBQUNEO0FBQ0YsV0FSRCxDQTFNd0IsQ0FrTnJCOztBQUVEO0FBQ0E4RywrQkFBcUIsNEJBQVUvNEIsT0FBVixFQUFrQjtBQUNuQyxnQkFBSSs1QixPQUFPOXBDLDhEQUFLQSxDQUFDeWtDLGVBQU4sQ0FBc0IxMEIsUUFBUWtFLFdBQVIsRUFBdEIsRUFBNkMsSUFBN0MsQ0FBWDtBQUNBO0FBQ0EsZ0JBQUkyeUIsTUFBTWtELEtBQUsvSCxTQUFmO0FBQ0EsZ0JBQUlnSSxZQUFZbkQsSUFBSW9ELEtBQUosQ0FBVSxLQUFWLENBQWhCO0FBQ0FELHdCQUFZQSxVQUFVaFEsSUFBVixDQUFlLEVBQWYsQ0FBWjtBQUNBLG1CQUFPZ1EsU0FBUDtBQUNILFdBUEQ7O0FBU0FoQiwrQkFBcUIsOEJBQVc7QUFDNUIsZ0JBQUlqcEMsU0FBUyxRQUFiO0FBQ0EsZ0JBQUltcUMsYUFBYW5xQyxPQUFPa3FDLEtBQVAsQ0FBYSxLQUFiLENBQWpCO0FBQ0FDLHlCQUFhQSxXQUFXbFEsSUFBWCxDQUFnQixFQUFoQixDQUFiO0FBQ0FrUSx5QkFBWSxDQUFDLENBQWI7QUFDQSxtQkFBT0EsVUFBUDtBQUNILFdBTkQsQ0E5TnNCLENBb09yQjs7QUFFSHZPLHNCQUFZaGpCLEVBQVosQ0FBZSxXQUFmLEVBQ0ksVUFBVXFlLEtBQVYsRUFBaUI7QUFDZmdOLDJCQUFlaE4sTUFBTWhuQixPQUFyQjtBQUNBO0FBQ0FpMEIsNEJBQWdCLElBQUlLLGlGQUFKLENBQWlCO0FBQy9Cai9CLG1CQUFLaEgsS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FERDtBQUUvQmsvQix3QkFBVXZOLE1BQU13TixVQUZlO0FBRy9CQywwQkFBWSxJQUhtQjtBQUkvQjBGLHlCQUFXLElBSm9CO0FBSy9CQyw2QkFBZSx5QkFBWTtBQUN2QjtBQUNBLG9CQUFJdkQsTUFBTWtDLG1CQUFtQi9SLE1BQU1obkIsT0FBekIsQ0FBVjtBQUNBLG9CQUFJKzVCLE9BQU9mLG9CQUFYO0FBQ0Esb0JBQUluQyxPQUFPa0QsSUFBUCxJQUFlbEQsTUFBTWtELElBQXpCLEVBQStCO0FBQzNCZCx1Q0FBcUJqUyxNQUFNaG5CLE9BQTNCO0FBQ0FwTyx5QkFBT3NXLGFBQVAsQ0FBcUI4ZSxNQUFNaG5CLE9BQTNCO0FBQ0gsaUJBSEQsTUFJSztBQUNEaTVCLHVDQUFxQmpTLE1BQU1obkIsT0FBM0I7QUFDSDtBQUNKO0FBaEI4QixhQUFqQixDQUFoQjs7QUFtQkFnMEIseUJBQWE1dkIsR0FBYixDQUFpQixTQUFqQixFQUE0QjZ2QixhQUE1QjtBQUNBRCx5QkFBYTV2QixHQUFiLENBQWlCLGNBQWpCLEVBQWlDbFcsUUFBUTRQLElBQVIsQ0FBYWhPLFdBQWIsRUFBakM7QUFDQStvQyw4QkFBa0I3RSxZQUFsQjtBQUNELFdBMUJMLEVBMEJPM2xDLElBMUJQOztBQTRCQUEsZUFBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0JzVCxFQUEvQixDQUFrQyxhQUFsQyxFQUNJLFVBQVVxZSxLQUFWLEVBQWlCO0FBQ2YsZ0JBQUlnTixnQkFBZ0JDLGFBQXBCLEVBQW1DO0FBQ2pDQSw0QkFBY1csV0FBZCxDQUEwQjVOLE1BQU13TixVQUFoQztBQUNBc0UsbUNBQXFCOUUsWUFBckI7QUFDRDtBQUNGLFdBTkwsRUFNTzNsQyxJQU5QOztBQVFBczlCLHNCQUFZaGpCLEVBQVosQ0FBZSxTQUFmLEVBQ0ksVUFBVXFlLEtBQVYsRUFBaUI7QUFDZixnQkFBSWdOLGdCQUFnQkMsYUFBcEIsRUFBbUM7QUFDakM2RSxtQ0FBcUI5RSxZQUFyQjtBQUNBQSw2QkFBZSxJQUFmO0FBQ0FDLDhCQUFnQixJQUFoQjtBQUNEO0FBQ0YsV0FQTCxFQU9PNWxDLElBUFA7O0FBU0FBLGVBQUthLE9BQUwsQ0FBYUMsSUFBYjtBQUNBLGlCQUFPLElBQVA7QUFDRCxTQS9Sd0I7QUFnU3pCMjhCLDBCQUFrQiw0QkFBWTs7QUFFNUI7QUFDQXo5QixlQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJpa0MsUUFBM0IsQ0FBb0NDLFVBQXBDOztBQUVBenpCLG1CQUFTeXdCLEtBQVQ7O0FBRUE7QUFDQTlnQyxlQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJvSCxHQUEzQixDQUErQjY3QixjQUEvQixDQUE4Q3ZGLFdBQTlDO0FBQ0QsU0F6U3dCO0FBMFN6QkksNEJBQW9CLDhCQUFZOztBQUU5QjtBQUNBMTlCLGVBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQmlrQyxRQUEzQixDQUFvQ3RILFFBQXBDOztBQUVBLGNBQUkxOEIsUUFBUTRQLElBQVIsQ0FBYWhPLFdBQWIsT0FBK0IsT0FBbkMsRUFBNEM7QUFDMUMsZ0JBQUk7QUFDRjY3QiwwQkFBWW1KLGFBQVo7QUFDRCxhQUZELENBRUUsT0FBT25NLE1BQVAsRUFBZTtBQUNmO0FBQ0Q7QUFDRjs7QUFFRDtBQUNBdDZCLGVBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCZzhCLGlCQUEvQixDQUFpRDFGLFdBQWpEO0FBQ0Q7QUF6VHdCLE9BQWIsQ0FBZDs7QUE0VEEsYUFBT2lOLFdBQVA7QUFDRCxLQXJleUYsQ0FxZXhGOztBQXJld0YsR0FBbEQsQ0FBMUM7QUF5ZUQsQ0ExZ0JBLEVBMGdCQ3RxQyxNQTFnQkQsRUEwZ0JTLEtBQUtxTSxHQTFnQmQsQ0FBRDs7QUE0Z0JPLElBQUlnOUIsZUFBZSxLQUFLaDlCLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLENBQXNCMFIsWUFBekMsQzs7Ozs7Ozs7Ozs7OztBQ3JpQlA7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUVBLEtBQUtoOUIsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsR0FBd0IsS0FBS3RyQixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxJQUF5QixFQUFqRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQyxnQkFBZ0IsRUFBcEI7O0FBRUEsSUFBSSxPQUFPN3VCLE9BQVAsS0FBbUIsV0FBdkIsRUFBb0M7QUFDbEMsUUFBSUEsUUFBUTh1QixJQUFSLEtBQWlCLElBQXJCLEVBQTJCO0FBQ3pCRCx3QkFBZ0JoSCx1RkFBaEI7QUFDRCxLQUZELE1BRU8sSUFBSTduQixRQUFROHVCLElBQVIsS0FBaUIsSUFBckIsRUFBMkI7QUFDaENELHdCQUFnQjlHLHdGQUFoQjtBQUNELEtBRk0sTUFFQTtBQUNMO0FBQ0E4Ryx3QkFBZ0JoSCx1RkFBaEI7QUFDRDtBQUNGOztBQUVBLFdBQVVodEIsQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7Ozs7Ozs7O0FBUUFBLFFBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQm9VLE1BQWpCLEdBQTBCLFVBQVUzc0IsV0FBVixFQUF1Qjs7QUFFL0M7QUFDQSxhQUFLeGYsT0FBTCxHQUFlZ0UsRUFBRUgsTUFBRixDQUFTO0FBQ3RCbEMsa0JBQU0sUUFEZ0I7QUFFdEJ3NkIsb0JBQVEsSUFGYztBQUd0QnA4QiwyQkFBZTJTLFNBSE87QUFJdEJ3cEIsc0JBQVVsRSxjQUFjakssTUFKRjtBQUt0QnFPLHVCQUFXO0FBTFcsU0FBVCxFQU1aNWMsV0FOWSxDQUFmOztBQVFBLFlBQUksQ0FBQyxLQUFLeGYsT0FBTCxDQUFhRCxhQUFsQixFQUFpQztBQUMvQixtQkFBTyxLQUFQO0FBQ0Q7QUFDRCxhQUFLK0csS0FBTCxHQUFXLENBQVg7O0FBRUE7QUFDQXcxQixzRkFBU0EsQ0FBQ2xELElBQVYsQ0FBZSxJQUFmLEVBQXFCLEtBQUtwNUIsT0FBMUI7QUFDRCxLQWxCRDs7QUFvQkE7OztBQUdBd0QsT0FBRzgxQixRQUFILENBQVk3c0IsSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCb1UsTUFBN0IsRUFBcUM3UCw4RUFBckM7O0FBRUE7OztBQUdBN3ZCLFFBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQm9VLE1BQWpCLENBQXdCNVMsU0FBeEIsR0FBb0N2MUIsRUFBRUgsTUFBRixDQUFTNEksSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCb1UsTUFBakIsQ0FBd0I1UyxTQUFqQyxFQUE0Qzs7QUFFOUVnRCxjQUFNLGdCQUFZOztBQUVoQixnQkFBSXA4QixJQUFKLEVBQ0lpc0MsVUFESixFQUVJdE0saUJBRkosRUFHSXVNLFNBSEo7O0FBS0Fsc0MsbUJBQU8sSUFBUDtBQUNBLGlCQUFLYSxPQUFMLENBQWFvYSxJQUFiOztBQUdBO0FBQ0EsaUJBQUtwYixPQUFMLENBQWFELGFBQWIsQ0FBMkJELEtBQTNCLENBQWlDd1MsdUJBQWpDLENBQXlEa0gsa0JBQXpELENBQTRFLENBQzFFLEtBQUt4WixPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDOHJDLG9CQUQwQyxFQUUxRSxLQUFLdHNDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0MrckMsa0JBRjBDLEVBRzFFLEtBQUt2c0MsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2dzQyxxQkFIMEMsQ0FBNUU7O0FBT0E7QUFDQSxpQkFBS0MsbUJBQUwsR0FBMkIsSUFBSWpwQyxHQUFHRSxNQUFILENBQVV1USxNQUFkLEVBQTNCO0FBQ0EsaUJBQUt5NEIsZ0JBQUwsR0FBd0IsSUFBSWxwQyxHQUFHRSxNQUFILENBQVV1USxNQUFkLEVBQXhCO0FBQ0EsaUJBQUswNEIsY0FBTCxHQUFzQixJQUFJbnBDLEdBQUdmLEtBQUgsQ0FBU3dSLE1BQWIsQ0FBb0I7QUFDeEN2USx3QkFBUSxLQUFLZ3BDLGdCQUQyQjtBQUV4QzVvQix3QkFBUSxDQUZnQztBQUd4Q2poQix1QkFBTyxDQUNMLElBQUlXLEdBQUdYLEtBQUgsQ0FBU3VRLEtBQWIsQ0FBbUI7QUFDakI4Tyw0QkFBUSxJQUFJMWUsR0FBR1gsS0FBSCxDQUFTNmUsTUFBYixDQUFvQjtBQUMxQjlOLCtCQUFPLDBCQURtQjtBQUUxQmlPLCtCQUFPO0FBRm1CLHFCQUFwQjtBQURTLGlCQUFuQixDQURLLEVBT0wsSUFBSXJlLEdBQUdYLEtBQUgsQ0FBU3VRLEtBQWIsQ0FBbUI7QUFDakI4Tyw0QkFBUSxJQUFJMWUsR0FBR1gsS0FBSCxDQUFTNmUsTUFBYixDQUFvQjtBQUMxQjlOLCtCQUFPLHVCQURtQjtBQUUxQmlPLCtCQUFPO0FBRm1CLHFCQUFwQjtBQURTLGlCQUFuQixDQVBLO0FBSGlDLGFBQXBCLENBQXRCO0FBa0JBLGlCQUFLK3FCLGlCQUFMLEdBQXlCLElBQUlwcEMsR0FBR2YsS0FBSCxDQUFTd1IsTUFBYixDQUFvQjtBQUMzQ3ZRLHdCQUFRLEtBQUsrb0MsbUJBRDhCO0FBRTNDM29CLHdCQUFRLENBRm1DO0FBRzNDamhCLHVCQUFPLENBQ0wsSUFBSVcsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNqQjhPLDRCQUFRLElBQUkxZSxHQUFHWCxLQUFILENBQVM2ZSxNQUFiLENBQW9CO0FBQzFCOU4sK0JBQU8sMEJBRG1CO0FBRTFCaU8sK0JBQU87QUFGbUIscUJBQXBCO0FBRFMsaUJBQW5CLENBREssRUFPTCxJQUFJcmUsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNqQjhPLDRCQUFRLElBQUkxZSxHQUFHWCxLQUFILENBQVM2ZSxNQUFiLENBQW9CO0FBQzFCOU4sK0JBQU8sdUJBRG1CO0FBRTFCaU8sK0JBQU87QUFGbUIscUJBQXBCO0FBRFMsaUJBQW5CLENBUEs7QUFIb0MsYUFBcEIsQ0FBekI7O0FBbUJBaWUsZ0NBQW9CLElBQUl0OEIsR0FBR2k2QixXQUFILENBQWU4QyxNQUFuQixDQUEwQjtBQUMxQzE5Qix1QkFBTSxDQUNGLElBQUlXLEdBQUdYLEtBQUgsQ0FBU3VRLEtBQWIsQ0FBbUI7QUFDZjhPLDRCQUFRLElBQUkxZSxHQUFHWCxLQUFILENBQVM2ZSxNQUFiLENBQW9CO0FBQ3hCOU4sK0JBQU8sMEJBRGlCO0FBRXhCaU8sK0JBQU87QUFGaUIscUJBQXBCO0FBRE8saUJBQW5CLENBREUsRUFPRixJQUFJcmUsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNmOE8sNEJBQVEsSUFBSTFlLEdBQUdYLEtBQUgsQ0FBUzZlLE1BQWIsQ0FBb0I7QUFDeEI5TiwrQkFBTyx5QkFEaUI7QUFFeEJpTywrQkFBTztBQUZpQixxQkFBcEI7QUFETyxpQkFBbkIsQ0FQRTs7QUFEb0MsYUFBMUIsQ0FBcEI7QUFpQkFpZSw4QkFBa0JybEIsRUFBbEIsQ0FBcUIsUUFBckIsRUFBK0IsVUFBVXFlLEtBQVYsRUFBaUI7O0FBRTVDLG9CQUFHQSxNQUFNK1QsUUFBTixDQUFlLENBQWYsQ0FBSCxFQUF1QjtBQUNuQix3QkFBSWoxQixXQUFXa2hCLE1BQU0rVCxRQUFOLENBQWUsQ0FBZixFQUFrQjcyQixXQUFsQixFQUFmO0FBQ0Esd0JBQUc0QixZQUFZQSxvQkFBb0JwVSxHQUFHcVQsSUFBSCxDQUFReUIsVUFBM0MsRUFBc0Q7QUFDbERuWSw2QkFBSzJzQyxZQUFMLENBQWtCM3NDLEtBQUsyRSxRQUF2QixFQUFnQ2cwQixNQUFNK1QsUUFBTixDQUFlLENBQWYsRUFBa0J0b0IsS0FBbEIsRUFBaEM7QUFDSDtBQUVKO0FBRUosYUFWRDs7QUFZQXBrQixpQkFBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0I2N0IsY0FBL0IsQ0FBOENsRCxpQkFBOUM7O0FBR0UsaUJBQUtpTixpQkFBTCxHQUF5QixJQUFJdnBDLEdBQUdFLE1BQUgsQ0FBVXVRLE1BQWQsRUFBekI7QUFDRixpQkFBSys0QixlQUFMLEdBQXVCLElBQUl4cEMsR0FBR2YsS0FBSCxDQUFTd1IsTUFBYixDQUFvQjtBQUN6Q3ZRLHdCQUFRLEtBQUtxcEMsaUJBRDRCO0FBRXpDbHFDLHVCQUFPLGVBQVVpUCxPQUFWLEVBQW1CbkgsVUFBbkIsRUFBK0I7QUFDcEM7QUFDQSwyQkFBUSxDQUFDeEssS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCRCxLQUE3QixJQUF1Q0ssS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCRCxLQUEzQixDQUFpQ3dTLHVCQUFqQyxDQUF5REMsWUFBekQsQ0FBc0VwUyxLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDZ3NDLHFCQUF0RyxFQUE2SDNwQyxLQUE3SCxDQUFtSWlQLE9BQW5JLEVBQTRJbkgsVUFBNUksQ0FBOUM7QUFDRDtBQUx3QyxhQUFwQixDQUF2Qjs7QUFRQSxpQkFBS3NpQyxlQUFMLEdBQXVCLElBQUl6cEMsR0FBR0UsTUFBSCxDQUFVdVEsTUFBZCxFQUF2QjtBQUNBLGlCQUFLaTVCLGNBQUwsR0FBc0IsSUFBSTFwQyxHQUFHZixLQUFILENBQVN3UixNQUFiLENBQW9CO0FBQ3hDdlEsd0JBQVEsS0FBS3VwQyxlQUQyQjtBQUV4Q25wQix3QkFBUTtBQUZnQyxhQUFwQixDQUF0Qjs7QUFLQSxpQkFBS3FwQixnQkFBTCxHQUF3QixJQUFJM3BDLEdBQUdmLEtBQUgsQ0FBU2dGLEtBQWIsQ0FBbUI7QUFDekN0Qix3QkFBUSxJQUFJM0MsR0FBR202QixVQUFQLENBQWtCLENBQ3hCLEtBQUtnUCxjQURtQixFQUV4QixLQUFLQyxpQkFGbUIsRUFHeEIsS0FBS00sY0FIbUIsRUFJeEIsS0FBS0YsZUFKbUIsQ0FBbEIsQ0FEaUM7QUFPekMzOEIseUJBQVM7QUFQZ0MsYUFBbkIsQ0FBeEI7QUFTQSxpQkFBS3JRLE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCK1QsUUFBL0IsQ0FBd0MsS0FBS2l5QixnQkFBN0M7O0FBRUFmLHlCQUFhLEtBQUtnQixnQkFBTCxFQUFiO0FBQ0FoQix1QkFBVzFQLFFBQVg7O0FBRUE7QUFDQTJQLHdCQUFZLEtBQUtyc0MsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ3UrQixPQUE1QztBQUNBLGlCQUFLc08sWUFBTCxHQUFvQixLQUFLcnRDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0NzK0IsR0FBaEMsQ0FBb0MzMkIsU0FBcEMsR0FBZ0QsR0FBaEQsR0FBc0Rra0MsU0FBMUU7QUFDQSxpQkFBS2lCLG1CQUFMLEdBQTJCLEtBQUt0dEMsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ3MrQixHQUFoQyxDQUFvQ3lPLGlCQUFwQyxHQUF3RCxHQUF4RCxHQUE4RGxCLFNBQXpGO0FBQ0EsaUJBQUttQixVQUFMLEdBQWtCLEtBQUt4dEMsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ3MrQixHQUFoQyxDQUFvQzJPLE9BQXBDLEdBQThDLEdBQTlDLEdBQW9EcEIsU0FBdEU7O0FBRUEsaUJBQUtyckMsT0FBTCxDQUFhQyxJQUFiOztBQUVBLG1CQUFPLElBQVA7QUFDRCxTQW5JNkU7O0FBcUk5RTQrQix5QkFBaUIseUJBQVVyZ0IsV0FBVixFQUF1Qjs7QUFFdEMsaUJBQUtrdUIsc0JBQUw7O0FBRUEsZ0JBQUlsdUIsZUFBZUEsWUFBWW11QixRQUEvQixFQUF5QztBQUN2QyxxQkFBS0Msb0JBQUwsQ0FBMEIsS0FBS0MsUUFBL0IsRUFBeUNydUIsWUFBWW11QixRQUFyRDtBQUNBLHFCQUFLRyxPQUFMLEdBQWUsSUFBSXRxQyxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCLENBQUMwSSxZQUFZbXVCLFFBQVosQ0FBcUIsQ0FBckIsQ0FBRCxFQUEwQm51QixZQUFZbXVCLFFBQVosQ0FBcUIsQ0FBckIsQ0FBMUIsQ0FBbEIsQ0FBZjtBQUNBLHFCQUFLSSxnQkFBTDtBQUNEO0FBRUYsU0EvSTZFOztBQWlKOUVDLHlCQUFpQiwyQkFBWTtBQUMzQixpQkFBS0MseUJBQUw7QUFDRCxTQW5KNkU7O0FBcUo5RXRPLDBCQUFrQiw0QkFBWTs7QUFFNUIsaUJBQUsrTSxnQkFBTCxDQUFzQnpMLEtBQXRCO0FBQ0EsaUJBQUt3TCxtQkFBTCxDQUF5QnhMLEtBQXpCO0FBQ0EsaUJBQUs4TCxpQkFBTCxDQUF1QjlMLEtBQXZCO0FBQ0EsaUJBQUtnTSxlQUFMLENBQXFCaE0sS0FBckI7O0FBRUFqOUIsY0FBRSxLQUFLa3FDLHlCQUFQLEVBQWtDQyxLQUFsQztBQUNBLGlCQUFLQyxVQUFMLENBQWdCLEtBQUtDLFVBQXJCO0FBQ0EsZ0JBQUcsS0FBS0MsU0FBUixFQUFrQjtBQUNkLHFCQUFJLElBQUl4c0MsRUFBUixJQUFjLEtBQUt3c0MsU0FBbkIsRUFBNkI7QUFDekIseUJBQUtDLFNBQUwsQ0FBZSxLQUFLQyxVQUFwQixFQUErQjFzQyxFQUEvQjtBQUNBLHdCQUFJMnNDLE9BQU9sbEMsU0FBU21sQyxjQUFULENBQXdCNXNDLEVBQXhCLENBQVg7QUFDQSx3QkFBRzJzQyxJQUFILEVBQVE7QUFDSkEsNkJBQUtyTCxVQUFMLENBQWdCQSxVQUFoQixDQUEyQm9JLFdBQTNCLENBQXVDaUQsS0FBS3JMLFVBQTVDO0FBQ0g7QUFDSjtBQUNKO0FBQ0QsaUJBQUtnTCxVQUFMLENBQWdCLEtBQUtQLFFBQXJCOztBQUVBLGlCQUFLSSx5QkFBTDtBQUVELFNBM0s2RTs7QUE2SzlFQSxtQ0FBMkIscUNBQVk7O0FBRXJDLGdCQUFJOXRDLE9BQU8sSUFBWDtBQUNBLGlCQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJvSCxHQUEzQixDQUErQnduQyxFQUEvQixDQUFrQyxPQUFsQyxFQUEyQ3h1QyxLQUFLeXVDLHNCQUFoRDtBQUNELFNBakw2RTs7QUFtTDlFbEIsZ0NBQXdCLGtDQUFZOztBQUVsQyxnQkFBSXZ0QyxPQUFPLElBQVg7QUFBQSxnQkFDSW1tQyxVQURKOztBQUdBbm1DLGlCQUFLeXVDLHNCQUFMLEdBQThCLFVBQVU3VSxHQUFWLEVBQWU7O0FBRTNDdU0sNkJBQWE5aUMsR0FBRzZRLElBQUgsQ0FBUXM1QixRQUFSLENBQWlCNVQsSUFBSXVNLFVBQXJCLENBQWI7O0FBRUEsb0JBQUlubUMsS0FBS2t1QyxVQUFMLENBQWdCMUYsR0FBaEIsT0FBMEIsRUFBOUIsRUFBa0M7QUFDaEM7QUFDQXhvQyx5QkFBS3l0QyxvQkFBTCxDQUEwQnp0QyxLQUFLa3VDLFVBQS9CLEVBQTJDL0gsVUFBM0M7QUFDQW5tQyx5QkFBSzB1QyxTQUFMLEdBQWlCLElBQUlyckMsR0FBR3FULElBQUgsQ0FBUUMsS0FBWixDQUFrQnd2QixVQUFsQixDQUFqQjtBQUNBbm1DLHlCQUFLNHRDLGdCQUFMOztBQUVBO0FBQ0QsaUJBUEQsTUFPTyxJQUFJNXRDLEtBQUswdEMsUUFBTCxDQUFjbEYsR0FBZCxPQUF3QixFQUE1QixFQUFnQztBQUNyQztBQUNBeG9DLHlCQUFLeXRDLG9CQUFMLENBQTBCenRDLEtBQUswdEMsUUFBL0IsRUFBeUN2SCxVQUF6QztBQUNBbm1DLHlCQUFLMnRDLE9BQUwsR0FBZSxJQUFJdHFDLEdBQUdxVCxJQUFILENBQVFDLEtBQVosQ0FBa0J3dkIsVUFBbEIsQ0FBZjtBQUNBbm1DLHlCQUFLNHRDLGdCQUFMO0FBQ0QsaUJBTE0sTUFLQSxJQUFJNXRDLEtBQUtxdUMsVUFBVCxFQUFxQjtBQUN4Qix3QkFBR3J1QyxLQUFLcXVDLFVBQUwsQ0FBZ0I3RixHQUFoQixPQUF5QixFQUE1QixFQUFnQztBQUM1QnhvQyw2QkFBS3l0QyxvQkFBTCxDQUEwQnp0QyxLQUFLcXVDLFVBQS9CLEVBQTJDbEksVUFBM0M7QUFDQSw0QkFBSSxDQUFDbm1DLEtBQUttdUMsU0FBVixFQUFxQjtBQUNqQm51QyxpQ0FBS211QyxTQUFMLEdBQWUsRUFBZjtBQUNIO0FBQ0RudUMsNkJBQUttdUMsU0FBTCxDQUFlbnVDLEtBQUsyRyxLQUFwQixJQUEyQixJQUFJdEQsR0FBR3FULElBQUgsQ0FBUUMsS0FBWixDQUFrQnd2QixVQUFsQixDQUEzQjtBQUNBbm1DLDZCQUFLNHRDLGdCQUFMO0FBQ0E1dEMsNkJBQUsydUMsV0FBTCxDQUFpQkMsSUFBakIsQ0FBc0IsVUFBdEIsRUFBaUMsS0FBakM7QUFDSDtBQUNKO0FBQ0YsYUEzQkQ7O0FBNkJBLGlCQUFLL3VDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCc1QsRUFBL0IsQ0FBa0MsT0FBbEMsRUFBMkN0YSxLQUFLeXVDLHNCQUFoRDtBQUNBLGdCQUFHenVDLEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCNm5DLGVBQS9CLEdBQWlEenlCLFFBQWpELEdBQTRELEdBQTVELENBQUgsRUFBb0U7QUFDaEVwYyxxQkFBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0I2bkMsZUFBL0IsR0FBaUR6eUIsUUFBakQsR0FBNEQsR0FBNUQsRUFBaUUybUIsU0FBakUsQ0FBMkUsSUFBM0U7QUFDSCxhQUZELE1BR0k7QUFDQS9pQyxxQkFBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0I2bkMsZUFBL0IsR0FBaUR6eUIsUUFBakQsR0FBNEQsR0FBNUQsRUFBaUUybUIsU0FBakUsQ0FBMkUsSUFBM0U7QUFDSDtBQUNGLFNBNU42RTs7QUErTjlFa0ssMEJBQWtCLDRCQUFZO0FBQUE7O0FBRTVCLGdCQUFJanRDLGFBQUo7QUFBQSxnQkFDSTh1QyxtQkFESjtBQUFBLGdCQUVJQywrQkFGSjtBQUFBLGdCQUdJQyxpQ0FISjtBQUFBLGdCQUlJQyxrQ0FKSjtBQUFBLGdCQUtJQyxjQUxKO0FBQUEsZ0JBTUlDLGVBQWMsRUFObEI7QUFBQSxnQkFPSUMsd0JBUEo7QUFBQSxnQkFRSUMsd0JBUko7QUFBQSxnQkFTSUMsc0JBVEo7QUFBQSxnQkFVSUMsd0JBVko7QUFBQSxnQkFXSUMsd0JBWEo7QUFBQSxnQkFZSUMsc0JBWko7QUFBQSxnQkFhSUMscUJBYko7QUFBQSxnQkFjSUMsbUJBZEo7O0FBaUJBM3ZDLG1CQUFPLElBQVA7O0FBRUErdUMscUNBQXlCM2xDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBekI7QUFDQTJsQyx1Q0FBMkI1bEMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUEzQjs7QUFFQXJKLGlCQUFLZ3ZDLHdCQUFMLEdBQWdDQSx3QkFBaEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQUtZLGdCQUFMLEdBQXdCeG1DLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBeEI7QUFDQSxpQkFBS3VtQyxnQkFBTCxDQUFzQnRtQyxTQUF0QixHQUFrQ0Msd0VBQVlBLENBQUNpc0Isb0JBQS9DOztBQUVBLGlCQUFLcWEsU0FBTCxHQUFpQnptQyxTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQWpCO0FBQ0EsaUJBQUt3bUMsU0FBTCxDQUFlcGdDLElBQWYsR0FBc0IsTUFBdEI7QUFDQSxpQkFBS29nQyxTQUFMLENBQWV2bUMsU0FBZixHQUEyQkMsd0VBQVlBLENBQUNtc0IsaUJBQXhDO0FBQ0EsaUJBQUttYSxTQUFMLENBQWVsdUMsRUFBZixHQUFvQixLQUFLa3VDLFNBQUwsQ0FBZXJ1QyxJQUFmLEdBQXNCLGFBQTFDOztBQUVBNHRDLDhCQUFrQmhtQyxTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQWxCO0FBQ0ErbEMsNEJBQWdCNzVCLFlBQWhCLENBQTZCLEtBQTdCLEVBQW9DLGFBQXBDO0FBQ0E2NUIsNEJBQWdCMzVCLFNBQWhCLEdBQTRCb2lCLGNBQWNoTCxpQkFBMUM7O0FBRUEwaUIsOEJBQWtCbm1DLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBbEI7QUFDQWttQyw0QkFBZ0JqbUMsU0FBaEIsR0FBNEJDLHdFQUFZQSxDQUFDcXNCLGtCQUF6QztBQUNBMlosNEJBQWdCelcsS0FBaEIsR0FBd0JqQixjQUFjN0ssa0JBQXRDO0FBQ0F1aUIsNEJBQWdCOTVCLFNBQWhCLEdBQTRCb2lCLGNBQWM1SyxpQkFBMUM7QUFDQSxpQkFBSzZpQixnQkFBTCxHQUF3QmpzQyxFQUFFMHJDLGVBQUYsQ0FBeEI7O0FBRUFHLDJCQUFldG1DLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBZjtBQUNBcW1DLHlCQUFhcG1DLFNBQWIsR0FBeUJDLHdFQUFZQSxDQUFDNGpCLGFBQXRDO0FBQ0F1aUIseUJBQWE1VyxLQUFiLEdBQXFCakIsY0FBYzFLLGFBQW5DO0FBQ0EsaUJBQUs0aUIsYUFBTCxHQUFxQmxzQyxFQUFFNnJDLFlBQUYsQ0FBckI7O0FBRUFDLHlCQUFhdm1DLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBYjtBQUNBc21DLHVCQUFXcm1DLFNBQVgsR0FBdUJDLHdFQUFZQSxDQUFDNmpCLFdBQXBDO0FBQ0F1aUIsdUJBQVc3VyxLQUFYLEdBQW1CakIsY0FBY3pLLFdBQWpDO0FBQ0EsaUJBQUt1aEIsV0FBTCxHQUFtQjlxQyxFQUFFOHJDLFVBQUYsQ0FBbkI7O0FBRUFULG9CQUFROWxDLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBUjtBQUNBNmxDLGtCQUFNNWxDLFNBQU4sR0FBa0JDLHdFQUFZQSxDQUFDOGpCLFlBQS9CO0FBQ0E2aEIsa0JBQU1wVyxLQUFOLEdBQWNqQixjQUFjeEssWUFBNUI7QUFDQSxpQkFBSzJpQixNQUFMLEdBQWNuc0MsRUFBRXFyQyxLQUFGLENBQWQ7O0FBS0EsaUJBQUtlLGVBQUwsR0FBdUI3bUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUF2QjtBQUNBLGlCQUFLNG1DLGVBQUwsQ0FBcUIzbUMsU0FBckIsR0FBaUNDLHdFQUFZQSxDQUFDc3NCLGdCQUE5QztBQUNBLGlCQUFLb2EsZUFBTCxDQUFxQno2QixXQUFyQixDQUFpQ2s2QixZQUFqQztBQUNBLGlCQUFLTyxlQUFMLENBQXFCejZCLFdBQXJCLENBQWlDbTZCLFVBQWpDO0FBQ0EsaUJBQUtNLGVBQUwsQ0FBcUJ6NkIsV0FBckIsQ0FBaUMwNUIsS0FBakM7O0FBRUU7O0FBRUEsZ0JBQUcsS0FBS3J2QyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDNnZDLG9CQUFoQyxJQUF3RCxHQUEzRCxFQUErRDtBQUFFO0FBQzdELG9CQUFHQyxPQUFPQyxJQUFQLENBQVksS0FBS3Z3QyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDZ3dDLGVBQTVDLEVBQTZEM3VDLE1BQTdELElBQXVFLENBQTFFLEVBQTRFO0FBQUM7QUFDekUseUJBQUt5dEMsWUFBTCxHQUFvQixFQUFwQjtBQUNBLHlCQUFLQSxZQUFMLENBQWtCbUIsTUFBbEIsR0FBMkJILE9BQU9DLElBQVAsQ0FBWSxLQUFLdndDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0Nnd0MsZUFBNUMsRUFBNkQsQ0FBN0QsQ0FBM0I7QUFDSCxpQkFIRCxNQUlLLElBQUdGLE9BQU9DLElBQVAsQ0FBWSxLQUFLdndDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0Nnd0MsZUFBNUMsRUFBNkQzdUMsTUFBN0QsR0FBc0UsQ0FBekUsRUFBMkU7QUFBRTtBQUM5RSx5QkFBS3l0QyxZQUFMLEdBQW9CL2xDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBcEI7QUFDQXhGLHNCQUFFLEtBQUtzckMsWUFBUCxFQUFxQnh5QixRQUFyQixDQUE4QnBULHdFQUFZQSxDQUFDa3NCLHNCQUEzQztBQUNBLHdCQUFHLEtBQUs1MUIsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2d3QyxlQUFoQyxDQUFnRCxHQUFoRCxDQUFILEVBQXdEO0FBQUU7QUFDdERsQixxQ0FBYW9CLEdBQWIsR0FBbUJubkMsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFuQjtBQUNBeEYsMEJBQUVzckMsYUFBYW9CLEdBQWYsRUFBb0I1ekIsUUFBcEIsQ0FBNkJwVCx3RUFBWUEsQ0FBQzBzQixrQkFBMUM7QUFDQSw2QkFBS3VhLGdCQUFMLEdBQXdCM3NDLEVBQUVzckMsYUFBYW9CLEdBQWYsQ0FBeEI7QUFDQSw2QkFBS3BCLFlBQUwsQ0FBa0IzNUIsV0FBbEIsQ0FBOEIyNUIsYUFBYW9CLEdBQTNDO0FBQ0EsNkJBQUtDLGdCQUFMLENBQXNCblcsS0FBdEIsQ0FBNEIsVUFBUzFCLEtBQVQsRUFBZTtBQUN2QzM0QixpQ0FBS3l3QyxhQUFMLENBQW1CLElBQW5CO0FBQ0F6d0MsaUNBQUttdkMsWUFBTCxDQUFrQm1CLE1BQWxCLEdBQTJCLEdBQTNCO0FBQ0F0d0MsaUNBQUs0dEMsZ0JBQUw7QUFDSCx5QkFKRDtBQUtIOztBQUVELHdCQUFHLEtBQUsvdEMsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2d3QyxlQUFoQyxDQUFnRCxHQUFoRCxDQUFILEVBQXlEO0FBQUU7QUFDdkRsQixxQ0FBYXVCLEdBQWIsR0FBbUJ0bkMsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFuQjtBQUNBeEYsMEJBQUVzckMsYUFBYXVCLEdBQWYsRUFBb0IvekIsUUFBcEIsQ0FBNkJwVCx3RUFBWUEsQ0FBQzJzQixrQkFBMUM7QUFDQSw2QkFBS2laLFlBQUwsQ0FBa0IzNUIsV0FBbEIsQ0FBOEIyNUIsYUFBYXVCLEdBQTNDO0FBQ0EsNkJBQUtDLGdCQUFMLEdBQXdCOXNDLEVBQUVzckMsYUFBYXVCLEdBQWYsQ0FBeEI7O0FBRUEsNkJBQUtDLGdCQUFMLENBQXNCdFcsS0FBdEIsQ0FBNEIsVUFBUzFCLEtBQVQsRUFBZTtBQUN2QzM0QixpQ0FBS3l3QyxhQUFMLENBQW1CLElBQW5CO0FBQ0F6d0MsaUNBQUttdkMsWUFBTCxDQUFrQm1CLE1BQWxCLEdBQTJCLEdBQTNCO0FBQ0F0d0MsaUNBQUs0dEMsZ0JBQUw7QUFDSCx5QkFKRDtBQUtIO0FBQ0Qsd0JBQUcsS0FBSy90QyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDZ3dDLGVBQWhDLENBQWdELEdBQWhELEtBQ0ksS0FBS3h3QyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDZ3dDLGVBQWhDLENBQWdELEdBQWhELENBREosSUFFSSxLQUFLeHdDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0Nnd0MsZUFBaEMsQ0FBZ0QsR0FBaEQsQ0FGSixJQUdJLEtBQUt4d0MsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2d3QyxlQUFoQyxDQUFnRCxHQUFoRCxDQUhKLElBSUksS0FBS3h3QyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDZ3dDLGVBQWhDLENBQWdELEdBQWhELENBSkosSUFLSSxLQUFLeHdDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0Nnd0MsZUFBaEMsQ0FBZ0QsR0FBaEQsQ0FMUCxFQUs0RDtBQUFFO0FBQzFELDRCQUFJTyxXQUFXeG5DLFNBQVNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBZjtBQUNBOGxDLHFDQUFhMEIsSUFBYixHQUFvQnpuQyxTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQXBCO0FBQ0E4bEMscUNBQWEwQixJQUFiLENBQWtCQyxJQUFsQixHQUF5QjFuQyxTQUFTQyxhQUFULENBQXVCLElBQXZCLENBQXpCO0FBQ0EsNkJBQUswbkMsaUJBQUwsR0FBeUJsdEMsRUFBRXNyQyxhQUFhMEIsSUFBZixDQUF6QjtBQUNBLDZCQUFJLElBQUkzdkMsSUFBSSxDQUFaLEVBQWVBLElBQUksQ0FBbkIsRUFBc0JBLEdBQXRCLEVBQTBCO0FBQUU7QUFDeEIsZ0NBQUcsS0FBS3JCLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0Nnd0MsZUFBaEMsQ0FBZ0RudkMsQ0FBaEQsQ0FBSCxFQUFzRDtBQUFBO0FBQ2xELHdDQUFJK00sUUFBUTdFLFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBWjtBQUNBNEUsMENBQU13SCxTQUFOLEdBQWtCLE1BQUs1VixPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDZ3dDLGVBQWhDLENBQWdEbnZDLENBQWhELENBQWxCO0FBQ0EyQyxzQ0FBRW9LLEtBQUYsRUFBUzVOLElBQVQsQ0FBYyxTQUFkLEVBQXlCLENBQUNhLENBQUQsQ0FBekI7QUFDQTJDLHNDQUFFb0ssS0FBRixFQUFTb3NCLEtBQVQsQ0FBZSxVQUFTMUIsS0FBVCxFQUFlO0FBQzFCMzRCLDZDQUFLZ3hDLFVBQUwsQ0FBZ0JudEMsRUFBRW9LLEtBQUYsQ0FBaEI7QUFDSCxxQ0FGRDtBQUdBLHdDQUFHLENBQUMsTUFBSzhpQyxpQkFBTCxDQUF1QjF3QyxJQUF2QixDQUE0QixTQUE1QixDQUFKLEVBQTJDO0FBQUU7QUFDekMsOENBQUswd0MsaUJBQUwsQ0FBdUIxd0MsSUFBdkIsQ0FBNEIsU0FBNUIsRUFBc0NhLENBQXRDO0FBQ0EyQywwQ0FBRW9LLEtBQUYsRUFBUzBPLFFBQVQsQ0FBa0JwVCx3RUFBWUEsQ0FBQ3VULE1BQS9CO0FBQ0g7QUFDRHF5QixpREFBYTBCLElBQWIsQ0FBa0JDLElBQWxCLENBQXVCdDdCLFdBQXZCLENBQW1DdkgsS0FBbkM7QUFYa0Q7QUFZckQ7QUFDSjs7QUFFRHBLLDBCQUFFc3JDLGFBQWEwQixJQUFmLEVBQXFCbDBCLFFBQXJCLENBQThCcFQsd0VBQVlBLENBQUM0c0IsbUJBQTNDOztBQUVBLDRCQUFHZ1osYUFBYTBCLElBQWIsQ0FBa0JDLElBQWxCLENBQXVCNTdCLFFBQXZCLENBQWdDeFQsTUFBaEMsSUFBMEMsQ0FBN0MsRUFBK0M7QUFBRTtBQUM3QyxpQ0FBS3l0QyxZQUFMLENBQWtCMzVCLFdBQWxCLENBQThCMjVCLGFBQWEwQixJQUEzQztBQUNBLGlDQUFLRSxpQkFBTCxDQUF1QjFXLEtBQXZCLENBQTZCLFVBQVMxQixLQUFULEVBQWU7QUFDeEMzNEIscUNBQUt5d0MsYUFBTCxDQUFtQixJQUFuQjtBQUNBendDLHFDQUFLbXZDLFlBQUwsQ0FBa0JtQixNQUFsQixHQUEyQnpzQyxFQUFFLElBQUYsRUFBUXhELElBQVIsQ0FBYSxTQUFiLENBQTNCO0FBQ0FMLHFDQUFLNHRDLGdCQUFMO0FBQ0gsNkJBSkQ7QUFLSCx5QkFQRCxNQVFJO0FBQUU7QUFDRmdELHFDQUFTcDdCLFdBQVQsQ0FBcUIyNUIsYUFBYTBCLElBQWxDO0FBQ0FELHFDQUFTcDdCLFdBQVQsQ0FBcUIyNUIsYUFBYTBCLElBQWIsQ0FBa0JDLElBQXZDO0FBQ0EsaUNBQUszQixZQUFMLENBQWtCMzVCLFdBQWxCLENBQThCbzdCLFFBQTlCO0FBQ0EsaUNBQUtHLGlCQUFMLENBQXVCMVcsS0FBdkIsQ0FBNkIsVUFBUzFCLEtBQVQsRUFBZTtBQUN4QzM0QixxQ0FBS3l3QyxhQUFMLENBQW1CNXNDLEVBQUUsSUFBRixFQUFRb3RDLE1BQVIsRUFBbkI7QUFDQWp4QyxxQ0FBS212QyxZQUFMLENBQWtCbUIsTUFBbEIsR0FBMkJ6c0MsRUFBRSxJQUFGLEVBQVF4RCxJQUFSLENBQWEsU0FBYixDQUEzQjtBQUNBTCxxQ0FBSzR0QyxnQkFBTDtBQUNILDZCQUpEO0FBS0g7QUFDSjtBQUNELHdCQUFHLEtBQUsvdEMsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2d3QyxlQUFoQyxDQUFnRCxHQUFoRCxLQUNJLEtBQUt4d0MsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2d3QyxlQUFoQyxDQUFnRCxHQUFoRCxDQURQLEVBQzREO0FBQUU7QUFDMUQsNEJBQUlhLFdBQVc5bkMsU0FBU0MsYUFBVCxDQUF1QixNQUF2QixDQUFmO0FBQ0E4bEMscUNBQWFnQyxJQUFiLEdBQW9CL25DLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBcEI7QUFDQThsQyxxQ0FBYWdDLElBQWIsQ0FBa0JMLElBQWxCLEdBQXlCMW5DLFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBekI7QUFDQSw2QkFBSytuQyxpQkFBTCxHQUF5QnZ0QyxFQUFFc3JDLGFBQWFnQyxJQUFmLENBQXpCO0FBQ0EsNkJBQUksSUFBSWp3QyxLQUFJLENBQVosRUFBZUEsS0FBSSxFQUFuQixFQUF1QkEsSUFBdkIsRUFBMkI7QUFBRTtBQUN6QixnQ0FBRyxLQUFLckIsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2d3QyxlQUFoQyxDQUFnRG52QyxFQUFoRCxDQUFILEVBQXNEO0FBQ2xELG9DQUFJK00sUUFBUTdFLFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBWjtBQUNBNEUsc0NBQU13SCxTQUFOLEdBQWtCLEtBQUs1VixPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDZ3dDLGVBQWhDLENBQWdEbnZDLEVBQWhELENBQWxCO0FBQ0EyQyxrQ0FBRW9LLEtBQUYsRUFBUzVOLElBQVQsQ0FBYyxTQUFkLEVBQXlCLENBQUNhLEVBQUQsQ0FBekI7QUFDQTJDLGtDQUFFb0ssS0FBRixFQUFTb3NCLEtBQVQsQ0FBZSxVQUFTMUIsS0FBVCxFQUFlO0FBQzFCMzRCLHlDQUFLZ3hDLFVBQUwsQ0FBZ0JudEMsRUFBRSxJQUFGLENBQWhCO0FBQ0gsaUNBRkQ7QUFHQSxvQ0FBRyxDQUFDLEtBQUt1dEMsaUJBQUwsQ0FBdUIvd0MsSUFBdkIsQ0FBNEIsU0FBNUIsQ0FBSixFQUEyQztBQUFFO0FBQ3pDLHlDQUFLK3dDLGlCQUFMLENBQXVCL3dDLElBQXZCLENBQTRCLFNBQTVCLEVBQXNDYSxFQUF0QztBQUNBMkMsc0NBQUVvSyxLQUFGLEVBQVMwTyxRQUFULENBQWtCcFQsd0VBQVlBLENBQUN1VCxNQUEvQjtBQUNIO0FBQ0RxeUIsNkNBQWFnQyxJQUFiLENBQWtCTCxJQUFsQixDQUF1QnQ3QixXQUF2QixDQUFtQ3ZILEtBQW5DO0FBQ0g7QUFDSjs7QUFFRHBLLDBCQUFFc3JDLGFBQWFnQyxJQUFmLEVBQXFCeDBCLFFBQXJCLENBQThCcFQsd0VBQVlBLENBQUM2c0IsbUJBQTNDOztBQUVBLDRCQUFHK1ksYUFBYWdDLElBQWIsQ0FBa0JMLElBQWxCLENBQXVCNTdCLFFBQXZCLENBQWdDeFQsTUFBaEMsSUFBMEMsQ0FBN0MsRUFBK0M7QUFBRTtBQUM3QyxpQ0FBS3l0QyxZQUFMLENBQWtCMzVCLFdBQWxCLENBQThCMjVCLGFBQWFnQyxJQUEzQztBQUNBLGlDQUFLQyxpQkFBTCxDQUF1Qi9XLEtBQXZCLENBQTZCLFVBQVMxQixLQUFULEVBQWU7QUFDeEMzNEIscUNBQUt5d0MsYUFBTCxDQUFtQixJQUFuQjtBQUNBendDLHFDQUFLbXZDLFlBQUwsQ0FBa0JtQixNQUFsQixHQUEyQnpzQyxFQUFFLElBQUYsRUFBUXhELElBQVIsQ0FBYSxTQUFiLENBQTNCO0FBQ0FMLHFDQUFLNHRDLGdCQUFMO0FBQ0gsNkJBSkQ7QUFLSCx5QkFQRCxNQVFJO0FBQUU7QUFDRnNELHFDQUFTMTdCLFdBQVQsQ0FBcUIyNUIsYUFBYWdDLElBQWxDO0FBQ0FELHFDQUFTMTdCLFdBQVQsQ0FBcUIyNUIsYUFBYWdDLElBQWIsQ0FBa0JMLElBQXZDO0FBQ0EsaUNBQUszQixZQUFMLENBQWtCMzVCLFdBQWxCLENBQThCMDdCLFFBQTlCO0FBQ0EsaUNBQUtFLGlCQUFMLENBQXVCL1csS0FBdkIsQ0FBNkIsVUFBUzFCLEtBQVQsRUFBZTtBQUN4QzM0QixxQ0FBS3l3QyxhQUFMLENBQW1CNXNDLEVBQUUsSUFBRixFQUFRb3RDLE1BQVIsRUFBbkI7QUFDQWp4QyxxQ0FBS212QyxZQUFMLENBQWtCbUIsTUFBbEIsR0FBMkJ6c0MsRUFBRSxJQUFGLEVBQVF4RCxJQUFSLENBQWEsU0FBYixDQUEzQjtBQUNBTCxxQ0FBSzR0QyxnQkFBTDtBQUNILDZCQUpEO0FBS0g7QUFDSjtBQUNELHdCQUFHLEtBQUsvdEMsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2d3QyxlQUFoQyxDQUFnRCxJQUFoRCxDQUFILEVBQXlEO0FBQUU7QUFDdkRsQixxQ0FBYWtDLFVBQWIsR0FBMEJqb0MsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUExQjtBQUNBeEYsMEJBQUVzckMsYUFBYWtDLFVBQWYsRUFBMkIxMEIsUUFBM0IsQ0FBb0NwVCx3RUFBWUEsQ0FBQzhzQix5QkFBakQ7QUFDQSw2QkFBS2liLHVCQUFMLEdBQStCenRDLEVBQUVzckMsYUFBYWtDLFVBQWYsQ0FBL0I7QUFDQSw2QkFBS2xDLFlBQUwsQ0FBa0IzNUIsV0FBbEIsQ0FBOEIyNUIsYUFBYWtDLFVBQTNDO0FBQ0EsNkJBQUtDLHVCQUFMLENBQTZCalgsS0FBN0IsQ0FBbUMsVUFBUzFCLEtBQVQsRUFBZTtBQUM5QzM0QixpQ0FBS3l3QyxhQUFMLENBQW1CLElBQW5CO0FBQ0F6d0MsaUNBQUttdkMsWUFBTCxDQUFrQm1CLE1BQWxCLEdBQTJCLElBQTNCO0FBQ0F0d0MsaUNBQUs0dEMsZ0JBQUw7QUFDSCx5QkFKRDtBQUtIO0FBQ0QseUJBQUtvRCxVQUFMLEdBQWtCLFVBQVNPLFFBQVQsRUFBa0I7QUFBRTtBQUNsQ3Z4Qyw2QkFBS212QyxZQUFMLENBQWtCbUIsTUFBbEIsR0FBMkJpQixTQUFTbHhDLElBQVQsQ0FBYyxTQUFkLENBQTNCLENBRGdDLENBQ3FCO0FBQ3JETCw2QkFBS3l3QyxhQUFMLENBQW1CYyxRQUFuQjtBQUNBdnhDLDZCQUFLNHRDLGdCQUFMLEdBSGdDLENBR1A7QUFDNUIscUJBSkQ7QUFLQSx5QkFBSzZDLGFBQUwsR0FBcUIsVUFBUzVwQyxPQUFULEVBQWlCO0FBQUU7QUFDcEMsNEJBQUkycUMsV0FBVzN0QyxFQUFFZ0QsT0FBRixFQUFXb3FDLE1BQVgsR0FBb0IvN0IsUUFBcEIsRUFBZjtBQUNBLDZCQUFJLElBQUloVSxNQUFJLENBQVosRUFBZUEsTUFBSXN3QyxTQUFTOXZDLE1BQTVCLEVBQXFDUixLQUFyQyxFQUF5QztBQUNyQzJDLDhCQUFFMnRDLFNBQVN0d0MsR0FBVCxDQUFGLEVBQWV3M0IsV0FBZixDQUEyQm52Qix3RUFBWUEsQ0FBQ3VULE1BQXhDO0FBQ0g7QUFDRGpaLDBCQUFFZ0QsT0FBRixFQUFXOFYsUUFBWCxDQUFvQnBULHdFQUFZQSxDQUFDdVQsTUFBakM7QUFDSCxxQkFORDtBQU9BLHlCQUFJLElBQUk4aEIsT0FBUixJQUFtQixLQUFLLytCLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0Nnd0MsZUFBbkQsRUFBbUU7QUFBRTtBQUNqRSw0QkFBRyxLQUFLeHdDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0Nnd0MsZUFBaEMsQ0FBZ0R6cEMsY0FBaEQsQ0FBK0RnNEIsT0FBL0QsQ0FBSCxFQUEyRTtBQUN2RSxpQ0FBS3VRLFlBQUwsQ0FBa0JtQixNQUFsQixHQUEyQjFSLE9BQTNCO0FBQ0E7QUFDSDtBQUNKO0FBQ0osaUJBbEpJLE1BbUpEO0FBQ0FqK0IsNEJBQVFDLElBQVIsQ0FBYSw0QkFBYjtBQUNIO0FBRUo7O0FBSUgsaUJBQUtndkMsZ0JBQUwsQ0FBc0JwNkIsV0FBdEIsQ0FBa0M0NUIsZUFBbEM7QUFDQSxpQkFBS1EsZ0JBQUwsQ0FBc0JwNkIsV0FBdEIsQ0FBa0MsS0FBS3E2QixTQUF2QztBQUNBLGlCQUFLRCxnQkFBTCxDQUFzQnA2QixXQUF0QixDQUFrQys1QixlQUFsQztBQUNBLGdCQUFJSSxjQUFjLEtBQUs5dkMsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQzZ2QyxvQkFBaEMsSUFBd0QsR0FBMUUsRUFBOEU7QUFDMUUscUJBQUt2QixXQUFMLENBQWlCN3RDLElBQWpCO0FBQ0g7O0FBR0QsaUJBQUtndkMsZ0JBQUwsQ0FBc0JodkMsSUFBdEI7O0FBRUEsaUJBQUtndkMsZ0JBQUwsQ0FBc0J6VixLQUF0QixDQUE0QixVQUFVMUIsS0FBVixFQUFpQjtBQUMzQ0Esc0JBQU04WSxjQUFOO0FBQ0F6eEMscUJBQUtpdUMsVUFBTCxDQUFnQmp1QyxLQUFLa3VDLFVBQXJCO0FBQ0QsYUFIRDs7QUFLQSxpQkFBS1MsV0FBTCxDQUFpQnRVLEtBQWpCLENBQXVCLFVBQVMxQixLQUFULEVBQWdCO0FBQ25DQSxzQkFBTThZLGNBQU47QUFDQXp4QyxxQkFBSzJHLEtBQUw7QUFDQTNHLHFCQUFLMnVDLFdBQUwsQ0FBaUJDLElBQWpCLENBQXNCLFVBQXRCLEVBQWlDLElBQWpDOztBQUVBNXVDLHFCQUFLMHhDLGdCQUFMLEdBQXdCdG9DLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBeEI7QUFDQXJKLHFCQUFLMHhDLGdCQUFMLENBQXNCcG9DLFNBQXRCLEdBQWtDQyx3RUFBWUEsQ0FBQ2lzQixvQkFBL0M7O0FBRUF4MUIscUJBQUsyeEMsU0FBTCxHQUFpQnZvQyxTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQWpCO0FBQ0FySixxQkFBSzJ4QyxTQUFMLENBQWVsaUMsSUFBZixHQUFzQixNQUF0QjtBQUNBelAscUJBQUsyeEMsU0FBTCxDQUFlcm9DLFNBQWYsR0FBMkJDLHdFQUFZQSxDQUFDbXNCLGlCQUF4QztBQUNBMTFCLHFCQUFLMnhDLFNBQUwsQ0FBZWh3QyxFQUFmLEdBQW9CM0IsS0FBSzJ4QyxTQUFMLENBQWVud0MsSUFBZixHQUFzQixhQUExQzs7QUFFQTZ0QyxrQ0FBa0JqbUMsU0FBU0MsYUFBVCxDQUF1QixPQUF2QixDQUFsQjtBQUNBZ21DLGdDQUFnQjk1QixZQUFoQixDQUE2QixLQUE3QixFQUFvQyxhQUFwQztBQUNBODVCLGdDQUFnQjU1QixTQUFoQixHQUE0Qm9pQixjQUFjM0ssb0JBQTFDOztBQUVBc2lCLGtDQUFrQnBtQyxTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWxCO0FBQ0FtbUMsZ0NBQWdCbG1DLFNBQWhCLEdBQTRCQyx3RUFBWUEsQ0FBQ3FzQixrQkFBekM7QUFDQTRaLGdDQUFnQjFXLEtBQWhCLEdBQXdCakIsY0FBYzdLLGtCQUF0QztBQUNBd2lCLGdDQUFnQi81QixTQUFoQixHQUE0Qm9pQixjQUFjNUssaUJBQTFDO0FBQ0F1aUIsZ0NBQWdCN3RDLEVBQWhCLEdBQXFCM0IsS0FBSzJHLEtBQTFCO0FBQ0EzRyxxQkFBSzR4QyxnQkFBTCxHQUF3Qi90QyxFQUFFMnJDLGVBQUYsQ0FBeEI7O0FBRUF4dkMscUJBQUsweEMsZ0JBQUwsQ0FBc0JsOEIsV0FBdEIsQ0FBa0M2NUIsZUFBbEM7QUFDQXJ2QyxxQkFBSzB4QyxnQkFBTCxDQUFzQmw4QixXQUF0QixDQUFrQ3hWLEtBQUsyeEMsU0FBdkM7QUFDQTN4QyxxQkFBSzB4QyxnQkFBTCxDQUFzQmw4QixXQUF0QixDQUFrQ2c2QixlQUFsQzs7QUFFQVQsdUNBQXVCdjVCLFdBQXZCLENBQW1DeFYsS0FBSzB4QyxnQkFBeEM7QUFDQTF4QyxxQkFBSzR4QyxnQkFBTCxDQUFzQnZYLEtBQXRCLENBQTRCLFVBQVUxQixLQUFWLEVBQWlCO0FBQ3pDQSwwQkFBTThZLGNBQU47QUFDQXp4Qyx5QkFBS291QyxTQUFMLENBQWVwdUMsS0FBS3F1QyxVQUFwQixFQUErQixLQUFLMXNDLEVBQXBDO0FBQ0FrQyxzQkFBRSxJQUFGLEVBQVFvdEMsTUFBUixHQUFpQjNOLE1BQWpCO0FBQ0E7QUFDSCxpQkFMRDtBQU1BdGpDLHFCQUFLcXVDLFVBQUwsR0FBa0J4cUMsRUFBRTdELEtBQUsyeEMsU0FBUCxDQUFsQjtBQUNBM3hDLHFCQUFLcXVDLFVBQUwsQ0FBZ0IvekIsRUFBaEIsQ0FBbUIsUUFBbkIsRUFBNkIsWUFBWTtBQUNyQ3RhLHlCQUFLNnhDLGFBQUwsQ0FBbUI3eEMsS0FBS3F1QyxVQUF4QixFQUFvQyxXQUFwQztBQUNGcnVDLHlCQUFLNHRDLGdCQUFMO0FBQ0QsaUJBSEQ7QUFJSCxhQXhDRDs7QUE2Q0EsaUJBQUttQyxhQUFMLENBQW1CMVYsS0FBbkIsQ0FBeUIsVUFBVTFCLEtBQVYsRUFBaUI7QUFDdENBLHNCQUFNOFksY0FBTjtBQUNBLG9CQUFJSyxnQkFBZ0Ixb0MsU0FBU21sQyxjQUFULENBQXdCLGFBQXhCLEVBQXVDejdCLEtBQTNEO0FBQ0ExSix5QkFBU21sQyxjQUFULENBQXdCLGFBQXhCLEVBQXVDejdCLEtBQXZDLEdBQStDMUosU0FBU21sQyxjQUFULENBQXdCLFdBQXhCLEVBQXFDejdCLEtBQXBGO0FBQ0ExSix5QkFBU21sQyxjQUFULENBQXdCLFdBQXhCLEVBQXFDejdCLEtBQXJDLEdBQTZDZy9CLGFBQTdDO0FBQ0Esb0JBQUlDLGVBQWUveEMsS0FBSzB1QyxTQUF4QjtBQUNBMXVDLHFCQUFLMHVDLFNBQUwsR0FBaUIxdUMsS0FBSzJ0QyxPQUF0QjtBQUNBM3RDLHFCQUFLMnRDLE9BQUwsR0FBZW9FLFlBQWY7QUFDQS94QyxxQkFBSzR0QyxnQkFBTDtBQUVILGFBVkQ7QUFXQSxpQkFBS29DLE1BQUwsQ0FBWTNWLEtBQVosQ0FBa0IsVUFBVTFCLEtBQVYsRUFBZ0I7QUFDOUJBLHNCQUFNOFksY0FBTjtBQUNBLG9CQUFJTyxpQkFBaUI1b0MsU0FBUzZvQyxzQkFBVCxDQUFnQyxpQ0FBaEMsRUFBbUUsQ0FBbkUsQ0FBckI7QUFDQSxvQkFBRyxDQUFDRCxjQUFKLEVBQW9CO0FBQ3BCLG9CQUFJRSxXQUFXamxDLE9BQU8rdEIsSUFBUCxDQUFZLEVBQVosRUFBZ0IsRUFBaEIsRUFBb0IsbUVBQXBCLENBQWY7QUFDQWtYLHlCQUFTOW9DLFFBQVQsQ0FBa0Irb0MsS0FBbEIsQ0FBd0JILGVBQWV2OEIsU0FBdkM7QUFDQXk4Qix5QkFBUzlvQyxRQUFULENBQWtCOHhCLEtBQWxCO0FBQ0FnWCx5QkFBU0UsS0FBVDtBQUNBRix5QkFBU2hELEtBQVQ7QUFDQWdELHlCQUFTaFgsS0FBVDtBQUNILGFBVkQ7O0FBWUEsaUJBQUtnVCxVQUFMLEdBQWtCcnFDLEVBQUUsS0FBS2dzQyxTQUFQLENBQWxCO0FBQ0EsaUJBQUszQixVQUFMLENBQWdCNXpCLEVBQWhCLENBQW1CLFFBQW5CLEVBQTZCLFlBQVk7QUFDdkN0YSxxQkFBSzZ4QyxhQUFMLENBQW1CN3hDLEtBQUtrdUMsVUFBeEIsRUFBb0MsV0FBcEM7QUFDQWx1QyxxQkFBSzR0QyxnQkFBTDtBQUNBLG9CQUFJNXRDLEtBQUtrdUMsVUFBTCxDQUFnQjFGLEdBQWhCLE9BQTBCLEVBQTlCLEVBQWtDO0FBQ2hDeG9DLHlCQUFLOHZDLGdCQUFMLENBQXNCNzBCLElBQXRCO0FBQ0QsaUJBRkQsTUFFTztBQUNMamIseUJBQUs4dkMsZ0JBQUwsQ0FBc0JodkMsSUFBdEI7QUFDRDtBQUNGLGFBUkQ7O0FBVUFpdUMsbUNBQXVCdjVCLFdBQXZCLENBQW1DLEtBQUt5NkIsZUFBeEM7QUFDQSxnQkFBRyxLQUFLZCxZQUFMLElBQXFCLEtBQUtBLFlBQUwsQ0FBa0JqNkIsUUFBMUMsRUFBbUQ7QUFDL0M2NUIsdUNBQXVCdjVCLFdBQXZCLENBQW1DLEtBQUsyNUIsWUFBeEM7QUFDSDtBQUNESixtQ0FBdUJ2NUIsV0FBdkIsQ0FBbUMsS0FBS282QixnQkFBeEM7O0FBRUEsaUJBQUt5QyxjQUFMLEdBQXNCanBDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBdEI7QUFDQSxpQkFBS2dwQyxjQUFMLENBQW9CL29DLFNBQXBCLEdBQWdDQyx3RUFBWUEsQ0FBQ2lzQixvQkFBN0M7O0FBRUEsaUJBQUs4YyxPQUFMLEdBQWVscEMsU0FBU0MsYUFBVCxDQUF1QixPQUF2QixDQUFmO0FBQ0EsaUJBQUtpcEMsT0FBTCxDQUFhN2lDLElBQWIsR0FBb0IsTUFBcEI7QUFDQSxpQkFBSzZpQyxPQUFMLENBQWFocEMsU0FBYixHQUF5QkMsd0VBQVlBLENBQUNvc0IsZUFBdEM7QUFDQSxpQkFBSzJjLE9BQUwsQ0FBYTN3QyxFQUFiLEdBQWtCLEtBQUsyd0MsT0FBTCxDQUFhOXdDLElBQWIsR0FBb0IsV0FBdEM7O0FBRUE4dEMsNEJBQWdCbG1DLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBaEI7QUFDQWltQywwQkFBYy81QixZQUFkLENBQTJCLEtBQTNCLEVBQWtDLFdBQWxDO0FBQ0ErNUIsMEJBQWM3NUIsU0FBZCxHQUEwQm9pQixjQUFjOUssZUFBeEM7O0FBRUEwaUIsNEJBQWdCcm1DLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBaEI7QUFDQW9tQywwQkFBY25tQyxTQUFkLEdBQTBCQyx3RUFBWUEsQ0FBQ3FzQixrQkFBdkM7QUFDQTZaLDBCQUFjM1csS0FBZCxHQUFzQmpCLGNBQWM3SyxrQkFBcEM7QUFDQXlpQiwwQkFBY2g2QixTQUFkLEdBQTBCb2lCLGNBQWM1SyxpQkFBeEM7QUFDQSxpQkFBS3NsQixjQUFMLEdBQXNCMXVDLEVBQUU0ckMsYUFBRixDQUF0Qjs7QUFFQSxpQkFBSzRDLGNBQUwsQ0FBb0I3OEIsV0FBcEIsQ0FBZ0M4NUIsYUFBaEM7QUFDQSxpQkFBSytDLGNBQUwsQ0FBb0I3OEIsV0FBcEIsQ0FBZ0MsS0FBSzg4QixPQUFyQztBQUNBLGlCQUFLRCxjQUFMLENBQW9CNzhCLFdBQXBCLENBQWdDaTZCLGFBQWhDOztBQUdBLGlCQUFLOEMsY0FBTCxDQUFvQnp4QyxJQUFwQjs7QUFFQWQsaUJBQUt1eUMsY0FBTCxDQUFvQmxZLEtBQXBCLENBQTBCLFVBQVUxQixLQUFWLEVBQWlCO0FBQ3pDQSxzQkFBTThZLGNBQU47QUFDQXp4QyxxQkFBS2l1QyxVQUFMLENBQWdCanVDLEtBQUswdEMsUUFBckI7QUFDRCxhQUhEOztBQUtBLGlCQUFLQSxRQUFMLEdBQWdCN3BDLEVBQUUsS0FBS3l1QyxPQUFQLENBQWhCO0FBQ0EsaUJBQUs1RSxRQUFMLENBQWNwekIsRUFBZCxDQUFpQixRQUFqQixFQUEyQixZQUFZO0FBQ3JDdGEscUJBQUs2eEMsYUFBTCxDQUFtQjd4QyxLQUFLMHRDLFFBQXhCLEVBQWtDLFNBQWxDO0FBQ0ExdEMscUJBQUs0dEMsZ0JBQUw7QUFDQSxvQkFBSTV0QyxLQUFLMHRDLFFBQUwsQ0FBY2xGLEdBQWQsT0FBd0IsRUFBNUIsRUFBZ0M7QUFDOUJ4b0MseUJBQUt1eUMsY0FBTCxDQUFvQnQzQixJQUFwQjtBQUNELGlCQUZELE1BRU87QUFDTGpiLHlCQUFLdXlDLGNBQUwsQ0FBb0J6eEMsSUFBcEI7QUFDRDtBQUNGLGFBUkQ7O0FBVUFpdUMsbUNBQXVCdjVCLFdBQXZCLENBQW1DLEtBQUs2OEIsY0FBeEM7O0FBRUFyeUMsaUJBQUt3eUMsU0FBTCxDQUFlaDlCLFdBQWYsQ0FBMkIsS0FBS2k5QixjQUFMLEVBQTNCOztBQUVBM0QseUJBQWEsS0FBS2pTLE9BQUwsQ0FBYTtBQUN4QnI3QixzQkFBTSxhQURrQjtBQUV4QnM3QiwrQkFBZTtBQUNiekUsOEJBQVVSLGNBQWNqTCx5QkFEWDtBQUVidGpCLCtCQUFXQyx3RUFBWUEsQ0FBQ3FqQix5QkFGWDtBQUdibVEsa0NBQWM7QUFIRCxpQkFGUztBQU94QkMsaUNBQWlCLENBQ2YsRUFBQ0MsU0FBUyxLQUFLQyxVQUFmLEVBQTJCcjJCLFNBQVNrb0Msc0JBQXBDLEVBRGUsRUFFZixFQUFDOVIsU0FBUyxLQUFLUCxnQkFBZixFQUFpQzcxQixTQUFTbW9DLHdCQUExQyxFQUZlO0FBUE8sYUFBYixDQUFiOztBQWFBLG1CQUFPRixVQUFQO0FBRUQsU0ExbUI2RTs7QUE0bUI5RTRELGtCQUFVLGtCQUFVQyxJQUFWLEVBQWdCeE0sVUFBaEIsRUFBNEI7QUFDcEM7QUFDQTtBQUNBOztBQUVBLGdCQUFJLENBQUNBLFVBQUwsRUFBaUI7QUFDZix1QkFBTyxLQUFQO0FBQ0Q7O0FBRURBLHlCQUFhOWlDLEdBQUc2USxJQUFILENBQVFzNUIsUUFBUixDQUFpQnJILFVBQWpCLENBQWI7O0FBRUEsZ0JBQUl3TSxJQUFKLEVBQVU7QUFDUixxQkFBS2xGLG9CQUFMLENBQTBCLEtBQUtTLFVBQS9CLEVBQTJDL0gsVUFBM0M7QUFDQSxxQkFBS3lILGdCQUFMO0FBQ0EscUJBQUtjLFNBQUwsR0FBaUIsSUFBSXJyQyxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCd3ZCLFVBQWxCLENBQWpCOztBQUVBO0FBQ0QsYUFORCxNQU9LO0FBQ0gscUJBQUtzSCxvQkFBTCxDQUEwQixLQUFLQyxRQUEvQixFQUF5Q3ZILFVBQXpDO0FBQ0EscUJBQUt5SCxnQkFBTDtBQUNBLHFCQUFLRCxPQUFMLEdBQWUsSUFBSXRxQyxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCd3ZCLFVBQWxCLENBQWY7QUFDRDs7QUFFRCxpQkFBS3lILGdCQUFMO0FBQ0QsU0Fyb0I2RTs7QUF1b0I5RTZFLHdCQUFnQiwwQkFBWTtBQUMxQixnQkFBSXp5QyxPQUFPLElBQVg7QUFBQSxnQkFDSTR5QywwQkFESjtBQUFBLGdCQUVJQywwQkFGSjtBQUFBLGdCQUdJQyw4QkFISjtBQUFBLGdCQUlJQywyQkFKSjtBQUFBLGdCQUtJQyx3QkFMSjtBQU1BLG9CQUFPaHpDLEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0M2dkMsb0JBQXZDO0FBQ0kscUJBQUssR0FBTDtBQUNJMkMsd0NBQW9CLHFFQUFwQjtBQUNBO0FBQ0oscUJBQUssR0FBTDtBQUNJQSx3Q0FBb0IscUVBQXBCO0FBQ0E7QUFDSixxQkFBSyxHQUFMO0FBQ0lBLHdDQUFvQiw4RUFBcEI7QUFDQTtBQVRSO0FBV0Esb0JBQU83eUMsS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQzJILFNBQWhDLENBQTBDQyxnQkFBakQ7QUFDSSxxQkFBSyxHQUFMO0FBQVU7QUFDTjJxQyx3Q0FBb0IsaUdBQXBCO0FBQ0E7QUFDSixxQkFBSyxHQUFMO0FBQVU7QUFDTkEsd0NBQW9CLGdGQUFwQjtBQUNBO0FBQ0oscUJBQUssR0FBTDtBQUFVO0FBQ05BLHdDQUFvQix1QkFBcEI7QUFDQTtBQUNKLHFCQUFLLEdBQUw7QUFBVTtBQUNOQSx3Q0FBb0IsaUdBQXBCO0FBQ0E7QUFaUjtBQWNFLG9CQUFPNXlDLEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0M2dkMsb0JBQXZDO0FBQ0kscUJBQUssR0FBTDtBQUNJNEMsNENBQXdCLCtFQUF4QjtBQUNBO0FBQ0oscUJBQUssR0FBTDtBQUNJQSw0Q0FBd0IsK0VBQXhCO0FBQ0E7QUFDSixxQkFBSyxHQUFMO0FBQ0lBLDRDQUF3QixpSEFBeEI7QUFDQTtBQVRSOztBQVlGO0FBQ0FFLDhCQUFrQkgsb0JBQW9CRCxpQkFBcEIsR0FBd0NFLHFCQUExRDtBQUNBQyxpQ0FBcUIzcEMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFyQjtBQUNBMHBDLCtCQUFtQnpwQyxTQUFuQixHQUErQkMsd0VBQVlBLENBQUN1c0IsMEJBQTVDOztBQUVBaWQsK0JBQW1CdDlCLFNBQW5CLEdBQStCdTlCLGVBQS9COztBQUVBLGdCQUFJaHpDLEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0M0eUMsa0JBQXBDLEVBQXdEO0FBQ3RERixtQ0FBbUJ0OUIsU0FBbkIsR0FBK0J6VixLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDNHlDLGtCQUEvRDtBQUNEOztBQUVELG1CQUFPRixrQkFBUDtBQUVELFNBaHNCNkU7O0FBa3NCOUVuRiwwQkFBa0IsNEJBQVk7QUFDNUIsZ0JBQUlzRixVQUFKO0FBQUEsZ0JBQ0F2ekMsUUFBUSxLQUFLRSxPQUFMLENBQWFELGFBQWIsQ0FBMkJELEtBRG5DOztBQUdBLGlCQUFLbXRDLGVBQUwsQ0FBcUJoTSxLQUFyQjtBQUNBLGdCQUFJLEtBQUs0TixTQUFULEVBQW9CO0FBQ2xCd0UsNkJBQWEsSUFBSTd2QyxHQUFHbVUsT0FBUCxDQUFlO0FBQzFCQyw4QkFBVSxLQUFLaTNCLFNBQUwsQ0FBZXlFLEtBQWYsR0FBdUI1N0IsU0FBdkIsQ0FBaUMsV0FBakMsRUFBOEMsV0FBOUM7QUFEZ0IsaUJBQWYsQ0FBYjtBQUdBLG9CQUFJLEtBQUsxWCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDOHJDLG9CQUFoQyxJQUF3RHhzQyxNQUFNd1MsdUJBQU4sQ0FBOEJDLFlBQTlCLENBQTJDLEtBQUt2UyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDOHJDLG9CQUEzRSxDQUE1RCxFQUE4SjtBQUM1SitHLCtCQUFXcDhCLFFBQVgsQ0FBb0JuWCxNQUFNd1MsdUJBQU4sQ0FBOEJDLFlBQTlCLENBQTJDLEtBQUt2UyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDOHJDLG9CQUEzRSxFQUFpR3pwQyxLQUFySDtBQUNEO0FBQ0QscUJBQUtvcUMsZUFBTCxDQUFxQmh6QixVQUFyQixDQUFnQ281QixVQUFoQztBQUNEO0FBQ0QsZ0JBQUksS0FBS3ZGLE9BQVQsRUFBa0I7QUFDaEJ1Riw2QkFBYSxJQUFJN3ZDLEdBQUdtVSxPQUFQLENBQWU7QUFDMUJDLDhCQUFVLEtBQUtrMkIsT0FBTCxDQUFhd0YsS0FBYixHQUFxQjU3QixTQUFyQixDQUErQixXQUEvQixFQUE0QyxXQUE1QztBQURnQixpQkFBZixDQUFiO0FBR0Esb0JBQUksS0FBSzFYLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0MrckMsa0JBQWhDLElBQXNEenNDLE1BQU13Uyx1QkFBTixDQUE4QkMsWUFBOUIsQ0FBMkMsS0FBS3ZTLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0MrckMsa0JBQTNFLENBQTFELEVBQTBKO0FBQ3hKOEcsK0JBQVdwOEIsUUFBWCxDQUFvQm5YLE1BQU13Uyx1QkFBTixDQUE4QkMsWUFBOUIsQ0FBMkMsS0FBS3ZTLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0MrckMsa0JBQTNFLEVBQStGMXBDLEtBQW5IO0FBQ0Q7QUFDRCxxQkFBS29xQyxlQUFMLENBQXFCaHpCLFVBQXJCLENBQWdDbzVCLFVBQWhDO0FBQ0Q7QUFDRCxnQkFBRyxLQUFLL0UsU0FBUixFQUFrQjtBQUNkLHFCQUFJLElBQUlpRixLQUFSLElBQWlCLEtBQUtqRixTQUF0QixFQUFnQztBQUM1QitFLGlDQUFhLElBQUk3dkMsR0FBR21VLE9BQVAsQ0FBZTtBQUN4QkMsa0NBQVUsS0FBSzAyQixTQUFMLENBQWVpRixLQUFmLEVBQXNCRCxLQUF0QixHQUE4QjU3QixTQUE5QixDQUF3QyxXQUF4QyxFQUFxRCxXQUFyRDtBQURjLHFCQUFmLENBQWI7QUFHQSx3QkFBSSxLQUFLMVgsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2d6Qyx1QkFBaEMsSUFBMkQxekMsTUFBTXdTLHVCQUFOLENBQThCQyxZQUE5QixDQUEyQyxLQUFLdlMsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2d6Qyx1QkFBM0UsQ0FBL0QsRUFBb0s7QUFDaEtILG1DQUFXcDhCLFFBQVgsQ0FBb0JuWCxNQUFNd1MsdUJBQU4sQ0FBOEJDLFlBQTlCLENBQTJDLEtBQUt2UyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDZ3pDLHVCQUEzRSxFQUFvRzN3QyxLQUF4SDtBQUNIO0FBQ0QseUJBQUtvcUMsZUFBTCxDQUFxQmh6QixVQUFyQixDQUFnQ281QixVQUFoQztBQUNIO0FBQ0o7QUFDRCxnQkFBSSxLQUFLeEUsU0FBTCxJQUFrQixLQUFLZixPQUEzQixFQUFvQztBQUNoQyxvQkFBRyxLQUFLUSxTQUFSLEVBQWtCO0FBQ2QseUJBQUttRixlQUFMLENBQXFCLEtBQUs1RSxTQUExQixFQUFxQyxLQUFLZixPQUExQyxFQUFtRCxLQUFLUSxTQUF4RDtBQUNILGlCQUZELE1BR0s7QUFDRCx5QkFBS21GLGVBQUwsQ0FBcUIsS0FBSzVFLFNBQTFCLEVBQXFDLEtBQUtmLE9BQTFDO0FBQ0g7QUFDSjtBQUVGLFNBN3VCNkU7O0FBK3VCOUUyRix5QkFBaUIseUJBQVVDLFNBQVYsRUFBcUJDLE9BQXJCLEVBQThCQyxTQUE5QixFQUF5Qzs7QUFFeEQsZ0JBQUl0d0MsR0FBSixFQUNJbkQsSUFESixFQUVJMHpDLFNBRkosRUFHSUMsT0FISixFQUlJQyxTQUpKOztBQU1BNXpDLG1CQUFPLElBQVA7O0FBRUEwekMsd0JBQVksQ0FBQ0gsVUFBVS84QixjQUFWLEdBQTJCLENBQTNCLENBQUQsRUFBZ0MrOEIsVUFBVS84QixjQUFWLEdBQTJCLENBQTNCLENBQWhDLENBQVo7QUFDQW05QixzQkFBVSxDQUFDSCxRQUFRaDlCLGNBQVIsR0FBeUIsQ0FBekIsQ0FBRCxFQUE4Qmc5QixRQUFRaDlCLGNBQVIsR0FBeUIsQ0FBekIsQ0FBOUIsQ0FBVjtBQUNBLGdCQUFHaTlCLFNBQUgsRUFBYTtBQUNURyw0QkFBWSxJQUFJQyxLQUFKLEVBQVo7QUFDQSxxQkFBSSxJQUFJVCxLQUFSLElBQWlCSyxTQUFqQixFQUEyQjtBQUN2QkcsOEJBQVU5eEMsSUFBVixDQUFlLENBQUMyeEMsVUFBVUwsS0FBVixFQUFpQjU4QixjQUFqQixHQUFrQyxDQUFsQyxDQUFELEVBQXVDaTlCLFVBQVVMLEtBQVYsRUFBaUI1OEIsY0FBakIsR0FBa0MsQ0FBbEMsQ0FBdkMsQ0FBZjtBQUNIO0FBRUo7QUFDQyxnQkFBSSxLQUFLM1csT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQzZ2QyxvQkFBaEMsSUFBd0QsR0FBeEQsSUFBK0QsS0FBS3J3QyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDNnZDLG9CQUFoQyxJQUF3RCxHQUEzSCxFQUErSDtBQUFDO0FBQzVIL3NDLHNCQUFNbkQsS0FBS3F0QyxVQUFMLEdBQWtCLEdBQWxCLEdBQXdCcUcsU0FBOUI7O0FBRUEsb0JBQUdELFNBQUgsRUFBYTtBQUNULHlCQUFJLElBQUl2eUMsSUFBSSxDQUFaLEVBQWNBLElBQUUweUMsVUFBVWx5QyxNQUExQixFQUFpQ1IsR0FBakM7QUFDQWlDLCtCQUFNLE1BQUl5d0MsVUFBVTF5QyxDQUFWLENBQVY7QUFEQTtBQUVIO0FBQ0RpQyx1QkFBTSxNQUFJd3dDLE9BQVY7QUFDQSxvQkFBRyxLQUFLeEUsWUFBTCxJQUFxQixLQUFLQSxZQUFMLENBQWtCbUIsTUFBMUMsRUFBaUQ7QUFDN0NudEMsMkJBQU8sY0FBWSxLQUFLZ3NDLFlBQUwsQ0FBa0JtQixNQUFyQztBQUNIO0FBQ0QscUJBQUt6dkMsT0FBTCxDQUFhb2EsSUFBYjs7QUFFQWhiLHVCQUFPQyxJQUFQLENBQVk7QUFDUiwyQkFBT2lELEdBREMsRUFBWixFQUVDNUMsSUFGRCxDQUVNLFVBQVVvRSxRQUFWLEVBQW9CO0FBQ2xCM0UseUJBQUsyRSxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLHdCQUFJQSxRQUFKLEVBQWM7QUFDVjNFLDZCQUFLOHpDLFNBQUwsQ0FBZW52QyxRQUFmO0FBQ0g7QUFFSixpQkFSTCxFQVNDNUQsTUFURCxDQVNRLFlBQVk7QUFDaEJmLHlCQUFLYSxPQUFMLENBQWFDLElBQWI7QUFDQWQseUJBQUs0akMsTUFBTDtBQUNILGlCQVpEOztBQWNBLHVCQUFPLEVBQVA7QUFFSCxhQTdCRCxNQTZCTTtBQUFDO0FBQ0h6Z0Msc0JBQU1uRCxLQUFLcXRDLFVBQUwsR0FBa0Isb0RBQWxCLEdBQXlFcUcsU0FBekUsR0FBcUYsVUFBckYsR0FBa0dDLE9BQXhHO0FBQ0EscUJBQUs5eUMsT0FBTCxDQUFhb2EsSUFBYjs7QUFFQWhiLHVCQUFPQyxJQUFQLENBQVk7QUFDUiwyQkFBT2lELEdBREMsRUFBWixFQUVDNUMsSUFGRCxDQUVNLFVBQVVvRSxRQUFWLEVBQW9COztBQUV0Qix3QkFBSUEsUUFBSixFQUFjO0FBQ1YzRSw2QkFBSzh6QyxTQUFMLENBQWVudkMsUUFBZjtBQUNIO0FBRUosaUJBUkQsRUFTQzVELE1BVEQsQ0FTUSxZQUFZO0FBQ2hCZix5QkFBS2EsT0FBTCxDQUFhQyxJQUFiO0FBQ0FkLHlCQUFLNGpDLE1BQUw7QUFDSCxpQkFaRDs7QUFjQSx1QkFBTyxFQUFQO0FBQ0g7QUFHSixTQXJ6QjZFOztBQXV6QjlFa1EsbUJBQVcsbUJBQVVDLGFBQVYsRUFBeUI7O0FBRWxDLGlCQUFLQyxjQUFMLENBQW9CRCxhQUFwQixFQUFrQyxDQUFsQztBQUNBLGlCQUFLRSxxQkFBTCxDQUEyQkYsYUFBM0IsRUFBeUMsQ0FBekM7QUFDRCxTQTN6QjZFO0FBNHpCOUVwSCxzQkFBYyxzQkFBVW9ILGFBQVYsRUFBeUJHLFdBQXpCLEVBQXFDO0FBQ2pELGlCQUFLRixjQUFMLENBQW9CRCxhQUFwQixFQUFrQ0csV0FBbEM7QUFDQSxpQkFBS0QscUJBQUwsQ0FBMkJGLGFBQTNCLEVBQXlDRyxXQUF6QztBQUNELFNBL3pCNkU7O0FBaTBCOUVGLHdCQUFnQix3QkFBVUQsYUFBVixFQUF3QkcsV0FBeEIsRUFBcUM7O0FBRW5ELGdCQUFJL1ksT0FBSjtBQUFBLGdCQUNJZ1osV0FESjtBQUFBLGdCQUVJQyxhQUZKO0FBQUEsZ0JBR0lDLGdCQUhKO0FBQUEsZ0JBSUlDLFlBSko7QUFBQSxnQkFLSUMsV0FMSjtBQUFBLGdCQU1JTCxjQUFjQSxlQUFlLENBTmpDOztBQVFBLGdCQUFHSCxhQUFILEVBQWtCO0FBQ2QscUJBQUt4SCxnQkFBTCxDQUFzQnpMLEtBQXRCO0FBQ0EscUJBQUt3TCxtQkFBTCxDQUF5QnhMLEtBQXpCO0FBQ0EzRiwwQkFBVSxLQUFLdDdCLE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCQyxPQUEvQixFQUFWOztBQUVBLG9CQUFJLEtBQUtwSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDNnZDLG9CQUFoQyxJQUF3RCxHQUF4RCxJQUE4RCxLQUFLcndDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0M2dkMsb0JBQWhDLElBQXdELEdBQTFILEVBQWdJO0FBQUM7QUFDN0hpRSxrQ0FBYyxJQUFJOXdDLEdBQUdvUixNQUFILENBQVUrL0IsUUFBZCxFQUFkOztBQUVBOztBQUVBLHdCQUFJVCxjQUFjVSxNQUFkLElBQXdCVixjQUFjVSxNQUFkLENBQXFCLENBQXJCLENBQTVCLEVBQXFEO0FBQUM7QUFDbEQsNEJBQUlQLGVBQWUsQ0FBbkIsRUFBc0I7QUFDbEJHLCtDQUFtQkYsWUFBWXYrQixZQUFaLENBQXlCbStCLGNBQWNVLE1BQWQsQ0FBcUIsQ0FBckIsRUFBd0JoOUIsUUFBakQsRUFBMkQ7QUFDMUVsSCxnREFBZ0IsV0FEMEQ7QUFFMUVELG1EQUFtQjZxQixRQUFROXdCLGFBQVI7QUFGdUQsNkJBQTNELENBQW5CO0FBSUFncUMsNkNBQWlCLENBQWpCLEVBQW9CMzhCLEtBQXBCLENBQTBCLENBQTFCO0FBQ0gseUJBTkQsTUFPSztBQUNEMjhCLCtDQUFtQkYsWUFBWXYrQixZQUFaLENBQXlCbStCLGNBQWNVLE1BQWQsQ0FBcUIsQ0FBckIsRUFBd0JoOUIsUUFBakQsRUFBMkQ7QUFDMUVsSCxnREFBZ0IsV0FEMEQ7QUFFMUVELG1EQUFtQjZxQixRQUFROXdCLGFBQVI7QUFGdUQsNkJBQTNELENBQW5CO0FBSUFncUMsNkNBQWlCLENBQWpCLEVBQW9CMzhCLEtBQXBCLENBQTBCLENBQTFCO0FBQ0g7QUFDSjtBQUNEMDhCLG9DQUFnQkQsWUFBWXYrQixZQUFaLENBQXlCbStCLGNBQWNVLE1BQWQsQ0FBcUJQLFdBQXJCLEVBQWtDejhCLFFBQTNELEVBQXFFO0FBQ2pGbEgsd0NBQWdCLFdBRGlFO0FBRWpGRCwyQ0FBbUI2cUIsUUFBUTl3QixhQUFSO0FBRjhELHFCQUFyRSxDQUFoQjtBQUlBK3BDLGtDQUFjLENBQWQsRUFBaUIxOEIsS0FBakIsQ0FBdUJ3OEIsV0FBdkI7QUFHSCxpQkE1QkQsTUE0Qk87QUFBQztBQUNKQyxrQ0FBYyxJQUFJOXdDLEdBQUdvUixNQUFILENBQVUrL0IsUUFBZCxDQUF1QjtBQUNqQyxrQ0FBVSxLQUFLMzBDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0NxMEMseUJBQWhDLElBQTZEO0FBRHRDLHFCQUF2QixDQUFkOztBQUlBO0FBQ0FOLG9DQUFnQkQsWUFBWXYrQixZQUFaLENBQXlCbStCLGNBQWNZLGNBQXZDLEVBQXVEO0FBQ25FcGtDLHdDQUFnQixXQURtRDtBQUVuRUQsMkNBQW1CNnFCLFFBQVE5d0IsYUFBUjtBQUZnRCxxQkFBdkQsQ0FBaEI7QUFJSDtBQUNELG9CQUFJLEtBQUt4SyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDdTBDLGtCQUFoQyxJQUFzRCxHQUExRCxFQUErRDtBQUMzRCx3QkFBSWIsY0FBY1UsTUFBZCxJQUF5QlYsY0FBY1UsTUFBZCxDQUFxQi95QyxNQUFyQixHQUE4QixDQUF2RCxJQUE4RHF5QyxjQUFjVSxNQUFkLENBQXFCLENBQXJCLENBQWxFLEVBQTRGO0FBQ3hGLDZCQUFLbkksbUJBQUwsQ0FBeUJsMEIsV0FBekIsQ0FBcUNpOEIsZ0JBQXJDO0FBQ0g7QUFDSjtBQUNELHFCQUFLOUgsZ0JBQUwsQ0FBc0JuMEIsV0FBdEIsQ0FBa0NnOEIsYUFBbEM7QUFDQTtBQUNBO0FBQ0EscUJBQUt2MEMsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0I2dEMsVUFBL0I7O0FBRUE7QUFDQTFaLHdCQUFRMlosT0FBUixDQUFnQjtBQUNaOXVCLDJCQUFPLENBQUMsSUFBSSt1QixJQUFKLEVBREk7QUFFWkMsOEJBQVUsSUFGRTtBQUdaeHFDLGdDQUFZMndCLFFBQVExd0IsYUFBUixFQUhBO0FBSVo1Qiw0QkFBUSxDQUFDLENBQUQsRUFBSSxDQUFKO0FBQ1I7QUFMWSxpQkFBaEI7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTByQyw4QkFBYyxDQUFkO0FBQ0Esb0JBQUksS0FBSzEwQyxPQUFMLENBQWFELGFBQWIsQ0FBMkJxMUMsY0FBM0IsSUFBNkMsS0FBS3AxQyxPQUFMLENBQWFELGFBQWIsQ0FBMkJxMUMsY0FBM0IsQ0FBMENyTSxTQUEzRixFQUFzRztBQUNsRzJMLGtDQUFjMXdDLEVBQUUsS0FBS2hFLE9BQUwsQ0FBYUQsYUFBYixDQUEyQnExQyxjQUEzQixDQUEwQ3JNLFNBQTVDLEVBQXVEc00sVUFBdkQsRUFBZDtBQUNIOztBQUVEWiwrQkFBZSxDQUFmO0FBQ0Esb0JBQUksS0FBS3owQyxPQUFMLENBQWFELGFBQWIsQ0FBMkJ1MUMsZUFBM0IsSUFBOEMsS0FBS3QxQyxPQUFMLENBQWFELGFBQWIsQ0FBMkJ1MUMsZUFBM0IsQ0FBMkN2TSxTQUE3RixFQUF3RztBQUNwRzBMLG1DQUFlendDLEVBQUUsS0FBS2hFLE9BQUwsQ0FBYUQsYUFBYixDQUEyQnUxQyxlQUEzQixDQUEyQ3ZNLFNBQTdDLEVBQXdEc00sVUFBeEQsRUFBZjtBQUNIOztBQUVEO0FBQ0EvWix3QkFBUWlhLEdBQVIsQ0FDSWhCLGNBQWMsQ0FBZCxFQUFpQnYrQixXQUFqQixFQURKLEVBRUksS0FBS2hXLE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCcXVDLE9BQS9CLEVBRkosRUFHSTtBQUNJQyw2QkFBUyxDQUFDLENBQUQsRUFBSWhCLFlBQUosRUFBa0IsQ0FBbEIsRUFBcUJDLFdBQXJCO0FBRGIsaUJBSEo7QUFPSDtBQUNGLFNBMTZCNkU7O0FBODZCNUVnQiw0QkFBb0IsNEJBQVNDLE1BQVQsRUFBZ0J2SyxPQUFoQixFQUF5QjtBQUN6QyxnQkFBSXJsQixRQUFRLEVBQVo7O0FBRUEsb0JBQU80dkIsTUFBUDtBQUNJLHFCQUFLLE9BQUw7QUFDSTV2Qiw0QkFBUSxnQkFBUjtBQUNBO0FBQ0oscUJBQUssTUFBTDtBQUNJQSw0QkFBUSxlQUFSO0FBQ0E7QUFDSixxQkFBSyxZQUFMO0FBQ0lBLDRCQUFRLGdCQUFSO0FBQ0E7QUFDSixxQkFBSyxhQUFMO0FBQ0lBLDRCQUFRLGlCQUFSO0FBQ0E7QUFDSixxQkFBSyxhQUFMO0FBQ0lBLDRCQUFRLGlCQUFSO0FBQ0E7QUFDSixxQkFBSyxjQUFMO0FBQ0lBLDRCQUFRLGtCQUFSO0FBQ0E7QUFDSixxQkFBSyxPQUFMO0FBQ0lBLDRCQUFRLFlBQVI7QUFDQTtBQUNKLHFCQUFLLFVBQUw7QUFDSUEsNEJBQVEsY0FBUjtBQUNBO0FBQ0o7QUFDSUEsNEJBQU8sYUFBUDtBQUNBO0FBM0JSO0FBNkJBLG9CQUFPcWxCLE9BQVA7QUFDSSxxQkFBSyxRQUFMO0FBQ0lybEIsNEJBQU8sVUFBUDtBQUNBO0FBQ0oscUJBQUssUUFBTDtBQUNJQSw0QkFBTyxZQUFQO0FBQ0E7QUFDSixxQkFBSyxZQUFMO0FBQ0lBLDRCQUFPLGlCQUFQO0FBQ0E7QUFDSjtBQUNJO0FBWFI7O0FBY0EsbUJBQU8sNENBQTRDQSxLQUFuRDtBQUNILFNBNzlCMkU7QUE4OUI1RTZ2QiwrQkFBdUIsK0JBQVNDLE9BQVQsRUFBaUI7QUFDdEMsZ0JBQUk5dkIsY0FBSjtBQUNBLG9CQUFPOHZCLE9BQVA7QUFDSSxxQkFBSyxDQUFMO0FBQ0k5dkIsNEJBQVEsZUFBUjtBQUNBO0FBQ0oscUJBQUssQ0FBTDtBQUNJQSw0QkFBUSxnQkFBUjtBQUNBO0FBQ0oscUJBQUssQ0FBTDtBQUNJQSw0QkFBUSxnQkFBUjtBQUNBO0FBQ0oscUJBQUssQ0FBTDtBQUNJQSw0QkFBUSxpQkFBUjtBQUNBO0FBQ0oscUJBQUssQ0FBTDtBQUNJQSw0QkFBUSxpQkFBUjtBQUNBO0FBQ0oscUJBQUssQ0FBTDtBQUNJQSw0QkFBUSxrQkFBUjtBQUNBO0FBQ0oscUJBQUssQ0FBTDtBQUNJQSw0QkFBUSxjQUFSO0FBQ0E7QUFDSixxQkFBSyxDQUFMO0FBQ0lBLDRCQUFRLGlCQUFSO0FBQ0E7QUFDSixxQkFBSyxDQUFMO0FBQ0lBLDRCQUFRLGlCQUFSO0FBQ0E7QUFDSixxQkFBSyxDQUFMO0FBQ0lBLDRCQUFRLFlBQVI7QUFDQTtBQUNKLHFCQUFLLEVBQUw7QUFDSUEsNEJBQVEsWUFBUjtBQUNBO0FBQ0oscUJBQUssRUFBTDtBQUNJQSw0QkFBUSxVQUFSO0FBQ0E7QUFDSixxQkFBSyxFQUFMO0FBQ0lBLDRCQUFRLGlCQUFSO0FBQ0E7QUFDSixxQkFBSyxFQUFMO0FBQ0lBLDRCQUFRLGtCQUFSO0FBQ0E7O0FBMUNSO0FBNkNFLG1CQUFPeGMsU0FBUytMLG9CQUFULENBQThCLE1BQTlCLEVBQXNDLENBQXRDLEVBQXlDd2dDLElBQXpDLEdBQWdELHlDQUFoRCxHQUE0Ri92QixLQUFuRztBQUNILFNBOWdDMkU7O0FBZ2hDNUVnd0IscUJBQWEscUJBQVMzSyxPQUFULEVBQWtCO0FBQzNCLGdCQUFJNEssTUFBSjs7QUFFQSxvQkFBTzVLLE9BQVA7QUFDSSxxQkFBSyxNQUFMO0FBQ0k0Syw2QkFBUyxtQkFBVDtBQUNBO0FBQ0oscUJBQUssVUFBTDtBQUNJQSw2QkFBUyxtQkFBVDtBQUNBO0FBQ0oscUJBQUssUUFBTDtBQUNJQSw2QkFBUyxtQkFBVDtBQUNBO0FBQ0oscUJBQUssUUFBTDtBQUNJQSw2QkFBUyxtQkFBVDtBQUNBO0FBQ0oscUJBQUssT0FBTDtBQUNJQSw2QkFBUyxtQkFBVDtBQUNBO0FBQ0oscUJBQUssU0FBTDtBQUNJQSw2QkFBUyxtQkFBVDtBQUNBO0FBQ0oscUJBQUssVUFBTDtBQUNJQSw2QkFBUyxtQkFBVDtBQUNBO0FBQ0oscUJBQUssTUFBTDtBQUNJQSw2QkFBUyxtQkFBVDtBQUNBO0FBQ0oscUJBQUssYUFBTDtBQUNJQSw2QkFBUyxtQkFBVDtBQUNBO0FBQ0oscUJBQUssVUFBTDtBQUNJQSw2QkFBUyxtQkFBVDtBQUNBO0FBQ0oscUJBQUssVUFBTDtBQUNJQSw2QkFBUyxvQkFBVDtBQUNBO0FBQ0oscUJBQUssWUFBTDtBQUNBLHFCQUFLLGlCQUFMO0FBQ0lBLDZCQUFTLG9CQUFUO0FBQ0E7QUFDSixxQkFBSyxRQUFMO0FBQ0EscUJBQUssYUFBTDtBQUNJQSw2QkFBUyxvQkFBVDtBQUNBO0FBQ0oscUJBQUssaUJBQUw7QUFDSUEsNkJBQVMsb0JBQVQ7QUFDQTtBQUNKLHFCQUFLLGNBQUw7QUFDSUEsNkJBQVMsb0JBQVQ7QUFDQTtBQUNKO0FBQ0k7QUFqRFI7QUFtREEsbUJBQU9oZSxjQUFjZ2UsTUFBZCxDQUFQO0FBQ0gsU0F2a0MyRTs7QUF5a0M1RUMseUJBQWlCLHlCQUFTQyxXQUFULEVBQXNCO0FBQ25DLGdCQUFJRixNQUFKOztBQUVBLG9CQUFPRSxXQUFQO0FBQ0kscUJBQUssT0FBTDtBQUNJRiw2QkFBUyxrQkFBVDtBQUNBO0FBQ0oscUJBQUssYUFBTDtBQUNJQSw2QkFBUyxrQkFBVDtBQUNBO0FBQ0oscUJBQUssT0FBTDtBQUNJQSw2QkFBUyxrQkFBVDtBQUNBO0FBQ0oscUJBQUssY0FBTDtBQUNJQSw2QkFBUyxrQkFBVDtBQUNBO0FBQ0oscUJBQUssVUFBTDtBQUNJQSw2QkFBUyxrQkFBVDtBQUNBO0FBQ0oscUJBQUssYUFBTDtBQUNJQSw2QkFBUyxrQkFBVDtBQUNBO0FBQ0oscUJBQUssTUFBTDtBQUNJQSw2QkFBUyxrQkFBVDtBQUNBO0FBQ0oscUJBQUssWUFBTDtBQUNJQSw2QkFBUyxrQkFBVDtBQUNBO0FBQ0o7QUFDSUEsNkJBQVMsa0JBQVQ7QUExQlI7QUE0QkEsbUJBQU9oZSxjQUFjZ2UsTUFBZCxDQUFQO0FBQ0gsU0F6bUMyRTtBQTBtQzVFRyxtQ0FBMkIsbUNBQVVDLGFBQVYsRUFBeUI7QUFDaEQsZ0JBQUl0MEMsRUFBSixFQUNJaWtCLEtBREo7O0FBR0Fqa0IsaUJBQUtzMEMsY0FBYzFoQyxPQUFkLENBQXNCLGFBQXRCLEVBQXFDLElBQXJDLENBQUwsQ0FKZ0QsQ0FJSTs7QUFFcERxUixvQkFBUSxhQUFSOztBQUVBLG9CQUFRamtCLEVBQVI7QUFDSSxxQkFBSyxHQUFMO0FBQ0lpa0IsNEJBQVEsY0FBUjtBQUNBO0FBQ0oscUJBQUssR0FBTDtBQUNJQSw0QkFBUSxrQkFBUjtBQUNBO0FBQ0oscUJBQUssR0FBTDtBQUNJQSw0QkFBUSxnQkFBUjtBQUNBO0FBQ0oscUJBQUssR0FBTDtBQUNJQSw0QkFBUSxpQkFBUjtBQUNBO0FBQ0oscUJBQUssR0FBTDtBQUNJQSw0QkFBUSxZQUFSO0FBQ0E7QUFDSixxQkFBSyxHQUFMO0FBQ0lBLDRCQUFRLGdCQUFSO0FBQ0E7QUFDSixxQkFBSyxHQUFMO0FBQ0lBLDRCQUFRLGVBQVI7QUFDQTtBQUNKLHFCQUFLLEdBQUw7QUFDSUEsNEJBQVEsaUJBQVI7QUFDQTtBQUNKLHFCQUFLLElBQUw7QUFDSUEsNEJBQVEsVUFBUjtBQUNBO0FBQ0oscUJBQUssSUFBTDtBQUNJQSw0QkFBUSxpQkFBUjtBQUNBO0FBQ0oscUJBQUssSUFBTDtBQUNJQSw0QkFBUSxZQUFSO0FBQ0E7QUFqQ1I7QUFtQ0EsbUJBQU94YyxTQUFTK0wsb0JBQVQsQ0FBOEIsTUFBOUIsRUFBc0MsQ0FBdEMsRUFBeUN3Z0MsSUFBekMsR0FBZ0QseUNBQWhELEdBQTRGL3ZCLEtBQW5HO0FBRUgsU0F2cEMyRTtBQXdwQzVFc3dCLGlCQUFTLGlCQUFVdjBDLEVBQVYsRUFBYzs7QUFFbkIsZ0JBQUl3MEMsVUFBVSxZQUFZeDBDLEVBQTFCOztBQUVBLGdCQUFJazJCLGNBQWNzZSxPQUFkLE1BQTJCNWpDLFNBQS9CLEVBQTBDO0FBQ3RDNVIsd0JBQVFDLElBQVIsQ0FBYXUxQyxVQUFVLGdDQUF2QjtBQUNIO0FBQ0QsbUJBQU90ZSxjQUFjc2UsT0FBZCxDQUFQO0FBQ0gsU0FocUMyRTs7QUFrcUM1RUMsK0JBQXVCLCtCQUFVSCxhQUFWLEVBQXlCOztBQUU1QyxnQkFBSXQwQyxFQUFKLEVBQ0kwMEMsV0FESjs7QUFHQTEwQyxpQkFBSyxlQUFlczBDLGNBQWMxaEMsT0FBZCxDQUFzQixhQUF0QixFQUFxQyxNQUFyQyxDQUFwQixDQUw0QyxDQUt3Qjs7QUFFcEU4aEMsMEJBQWMsS0FBS0gsT0FBTCxDQUFhdjBDLEVBQWIsQ0FBZDtBQUNBLGdCQUFJLENBQUMwMEMsV0FBTCxFQUFrQjtBQUNkQSw4QkFBYyxLQUFLSCxPQUFMLENBQWEsYUFBYixDQUFkO0FBQ0g7O0FBRUQsbUJBQU9HLFdBQVA7QUFDSCxTQS9xQzJFO0FBZ3JDNUVwQywrQkFBdUIsK0JBQVVGLGFBQVYsRUFBd0JHLFdBQXhCLEVBQXFDOztBQUV4RCxnQkFBSWwwQyxJQUFKO0FBQUEsZ0JBQ0lzMkMsaUJBREo7QUFBQSxnQkFFSUMsd0JBRko7QUFBQSxnQkFHSUMsc0JBSEo7QUFBQSxnQkFJSUMsS0FKSjtBQUFBLGdCQUtJeEwsT0FMSjtBQUFBLGdCQU1JdUssTUFOSjtBQUFBLGdCQU9Ja0IsUUFQSjtBQUFBLGdCQVFJeEMsY0FBY0EsZUFBZSxDQVJqQztBQUFBLGdCQVNJaHpDLENBVEo7QUFBQSxnQkFVSUMsQ0FWSjtBQUFBLGdCQVdJdzFDLGVBQWUsRUFYbkI7QUFBQSxnQkFZSUMsZUFBZSxFQVpuQjtBQUFBLGdCQWFJQyxpQkFBaUIsRUFickI7QUFBQSxnQkFjSUMsYUFBYSxFQWRqQjs7QUFnQkE5MkMsbUJBQU8sSUFBUDs7QUFHQSxnQkFBSUEsS0FBSyt0Qyx5QkFBTCxLQUFtQ3g3QixTQUF2QyxFQUFrRDtBQUM5Q3ZTLHFCQUFLK3RDLHlCQUFMLEdBQWlDM2tDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBakM7QUFDQXJKLHFCQUFLK3RDLHlCQUFMLENBQStCemtDLFNBQS9CLEdBQTJDQyx3RUFBWUEsQ0FBQ3dzQiwyQkFBeEQ7QUFDQS8xQixxQkFBS2d2Qyx3QkFBTCxDQUE4Qng1QixXQUE5QixDQUEwQ3hWLEtBQUsrdEMseUJBQS9DO0FBQ0gsYUFKRCxNQUlPO0FBQ0hscUMsa0JBQUU3RCxLQUFLK3RDLHlCQUFQLEVBQWtDQyxLQUFsQztBQUNIOztBQUVEdUksdUNBQTJCbnRDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBM0I7QUFDQWt0QyxxQ0FBeUJqdEMsU0FBekIsR0FBcUNDLHdFQUFZQSxDQUFDeXNCLDBCQUFsRDs7QUFFQSxnQkFBSStkLGFBQUosRUFBbUI7QUFDZixvQkFBSSxLQUFLbDBDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0M2dkMsb0JBQWhDLElBQXdELEdBQTVELEVBQWlFO0FBQUM7QUFDOUQsd0JBQUk2RCxjQUFjVSxNQUFkLENBQXFCUCxXQUFyQixFQUFrQzZDLElBQWxDLENBQXVDLENBQXZDLEVBQTBDQyxPQUE5QyxFQUF1RDtBQUNuREwsdUNBQWU1QyxjQUFjVSxNQUFkLENBQXFCUCxXQUFyQixFQUFrQzZDLElBQWxDLENBQXVDLENBQXZDLEVBQTBDQyxPQUExQyxDQUFrRHY0QixLQUFsRCxDQUF3RCxHQUF4RCxFQUE2RCxDQUE3RCxDQUFmO0FBQ0FtNEIsdUNBQWU3QyxjQUFjVSxNQUFkLENBQXFCUCxXQUFyQixFQUFrQzZDLElBQWxDLENBQXVDLENBQXZDLEVBQTBDQyxPQUExQyxDQUFrRHY0QixLQUFsRCxDQUF3RCxHQUF4RCxFQUE2RCxDQUE3RCxDQUFmO0FBQ0EsNEJBQUlzMUIsY0FBY1UsTUFBZCxDQUFxQlAsV0FBckIsRUFBa0M2QyxJQUFsQyxDQUF1QyxDQUF2QyxDQUFKLEVBQStDO0FBQzNDSCwyQ0FBZTdDLGNBQWNVLE1BQWQsQ0FBcUJQLFdBQXJCLEVBQWtDNkMsSUFBbEMsQ0FBdUMsQ0FBdkMsRUFBMENDLE9BQTFDLENBQWtEdjRCLEtBQWxELENBQXdELEdBQXhELEVBQTZELENBQTdELENBQWY7QUFDSDtBQUVKO0FBQ0RvNEIscUNBQWlCLEtBQUtJLGVBQUwsQ0FBcUJsRCxjQUFjVSxNQUFkLENBQXFCUCxXQUFyQixFQUFrQ2g2QixRQUF2RCxDQUFqQjtBQUNBNDhCLGlDQUFhLEtBQUtJLFdBQUwsQ0FBaUJuRCxjQUFjVSxNQUFkLENBQXFCUCxXQUFyQixFQUFrQ2MsUUFBbkQsQ0FBYjtBQUNILGlCQVhELE1BYUMsSUFBRyxLQUFLbjFDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0M2dkMsb0JBQWhDLElBQXdELEdBQTNELEVBQWdFO0FBQUM7QUFDbEUsd0JBQUk2RCxjQUFjb0QsVUFBbEIsRUFBOEI7QUFDMUJSLHVDQUFlNUMsY0FBY29ELFVBQWQsQ0FBeUIsQ0FBekIsQ0FBZjtBQUNBUCx1Q0FBZTdDLGNBQWNvRCxVQUFkLENBQXlCLENBQXpCLENBQWY7QUFDSDs7QUFFRCx3QkFBSXBELGNBQWNxRCxhQUFsQixFQUFpQztBQUM3QlAseUNBQWlCLEtBQUtJLGVBQUwsQ0FBcUJsRCxjQUFjcUQsYUFBZCxDQUE0QlAsY0FBakQsQ0FBakI7QUFDQUMscUNBQWEsS0FBS0ksV0FBTCxDQUFpQm5ELGNBQWNxRCxhQUFkLENBQTRCTixVQUE3QyxDQUFiO0FBQ0g7QUFHSixpQkFaSSxNQWFBLElBQUksS0FBS2ozQyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDNnZDLG9CQUFoQyxJQUF3RCxHQUE1RCxFQUFnRTtBQUFDO0FBQzlENEcsaUNBQWEsS0FBS0ksV0FBTCxDQUFpQm5ELGNBQWNVLE1BQWQsQ0FBcUJQLFdBQXJCLEVBQWtDOEMsT0FBbEMsQ0FBMENoQyxRQUEzRCxDQUFiO0FBQ0E2QixxQ0FBaUIsS0FBS0ksZUFBTCxDQUFxQmxELGNBQWNVLE1BQWQsQ0FBcUJQLFdBQXJCLEVBQWtDOEMsT0FBbEMsQ0FBMEM5OEIsUUFBL0QsQ0FBakI7QUFDSDs7QUFFTCxvQkFBR3k4QixnQkFBZ0JDLFlBQW5CLEVBQWdDO0FBQzVCTCw2Q0FBeUI5Z0MsU0FBekIsR0FBcUMsWUFBWW9pQixjQUFjdkssdUJBQTFCLEdBQW9ELGVBQXBELEdBQXNFcXBCLFlBQXRFLEdBQXFGLFdBQXJGLEdBQW1HQyxZQUFuRyxHQUFrSCxXQUFsSCxHQUFnSSxTQUFoSSxHQUE0SS9lLGNBQWN0SywwQkFBMUosR0FBdUwsZUFBdkwsR0FBeU1zcEIsY0FBek0sR0FBME4sV0FBMU4sR0FBd08sU0FBeE8sR0FBb1BoZixjQUFjckssc0JBQWxRLEdBQTJSLGVBQTNSLEdBQTZTc3BCLFVBQTdTLEdBQTBULFdBQS9WO0FBQ0gsaUJBRkQsTUFHSyxJQUFHLEtBQUszSCxZQUFMLENBQWtCbUIsTUFBckIsRUFBNEI7QUFDN0JpRyw2Q0FBeUI5Z0MsU0FBekIsR0FBcUMsWUFBWW9pQixjQUFjcEsseUJBQTFCLEdBQXNELGVBQXRELEdBQXNFLEtBQUs1dEIsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2d3QyxlQUFoQyxDQUFnRCxLQUFLbEIsWUFBTCxDQUFrQm1CLE1BQWxFLENBQXRFLEdBQW1KLFdBQW5KLEdBQWlLLFNBQWpLLEdBQTZLelksY0FBY3RLLDBCQUEzTCxHQUF3TixlQUF4TixHQUEwT3NwQixjQUExTyxHQUEyUCxXQUEzUCxHQUF5USxTQUF6USxHQUFxUmhmLGNBQWNySyxzQkFBblMsR0FBNFQsZUFBNVQsR0FBOFVzcEIsVUFBOVUsR0FBMlYsV0FBaFk7QUFDSDs7QUFJRDkyQyxxQkFBSyt0Qyx5QkFBTCxDQUErQnY0QixXQUEvQixDQUEyQytnQyx3QkFBM0M7O0FBRUFELG9DQUFvQmx0QyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQXBCOztBQUVBbXRDLHlDQUF5QixtQkFBbUJqdEMsd0VBQVlBLENBQUMrc0IseUJBQWhDLEdBQTRELG9DQUFyRjtBQUNBLG9CQUFJLEtBQUt6MkIsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQzZ2QyxvQkFBaEMsS0FBeUQsR0FBN0QsRUFBa0U7QUFBQztBQUMvRCx5QkFBSy91QyxJQUFJLENBQVQsRUFBWUEsSUFBSTR5QyxjQUFjVSxNQUFkLENBQXFCUCxXQUFyQixFQUFrQzZDLElBQWxDLENBQXVDcjFDLE1BQXZELEVBQStEUCxLQUFLLENBQXBFLEVBQXVFO0FBQ25FLDZCQUFLRCxJQUFJLENBQVQsRUFBWUEsSUFBSTZ5QyxjQUFjVSxNQUFkLENBQXFCUCxXQUFyQixFQUFrQzZDLElBQWxDLENBQXVDNTFDLENBQXZDLEVBQTBDazJDLEtBQTFDLENBQWdEMzFDLE1BQWhFLEVBQXdFUixLQUFLLENBQTdFLEVBQWdGO0FBQzVFdTFDLG9DQUFRMUMsY0FBY1UsTUFBZCxDQUFxQlAsV0FBckIsRUFBa0M2QyxJQUFsQyxDQUF1QzUxQyxDQUF2QyxFQUEwQ2syQyxLQUExQyxDQUFnRG4yQyxDQUFoRCxDQUFSOztBQUVBK3BDLHNDQUFVd0wsTUFBTWEsUUFBTixDQUFlN25DLElBQXpCO0FBQ0EsZ0NBQUlnbkMsTUFBTWEsUUFBTixDQUFlQyxRQUFuQixFQUE2QjtBQUN6Qi9CLHlDQUFTaUIsTUFBTWEsUUFBTixDQUFlQyxRQUF4QjtBQUNIO0FBQ0RiLHVDQUFXbnRDLHdFQUFZQSxDQUFDaXRCLDRCQUF4Qjs7QUFFQSxnQ0FBSXQxQixJQUFJLENBQUosS0FBVSxDQUFkLEVBQWlCO0FBQ2J3MUMsMkNBQVdudEMsd0VBQVlBLENBQUNrdEIsNkJBQXhCO0FBQ0g7O0FBRURpZ0Isd0NBQVksTUFBTW50Qyx3RUFBWUEsQ0FBQ2d0Qix3QkFBL0I7O0FBRUFpZ0Isc0RBQTBCLGdCQUFnQkUsUUFBaEIsR0FBMkIsSUFBckQ7O0FBRUFGLHNEQUEwQixnQkFBZ0JqdEMsd0VBQVlBLENBQUNtdEIsa0NBQTdCLEdBQWtFLElBQTVGO0FBQ0E4ZixzREFBMEIsaUJBQWlCanRDLHdFQUFZQSxDQUFDb3RCLHVDQUE5QixHQUF3RSxTQUF4RSxHQUFvRixLQUFLNGUsa0JBQUwsQ0FBd0JDLE1BQXhCLEVBQWdDdkssT0FBaEMsQ0FBcEYsR0FBK0gsWUFBeko7QUFDQXVMLHNEQUEwQixPQUExQjs7QUFHQUEsc0RBQTBCLGdCQUFnQmp0Qyx3RUFBWUEsQ0FBQ3F0Qix1Q0FBN0IsR0FBdUUsY0FBdkUsR0FBd0Y2ZixNQUFNYSxRQUFOLENBQWU5UCxRQUF2RyxHQUFrSCxJQUE1STs7QUFHQTtBQUNBLGdDQUFJZ1Esa0JBQWtCLEtBQUs1QixXQUFMLENBQWlCYSxNQUFNYSxRQUFOLENBQWU3bkMsSUFBaEMsRUFBc0M4RSxPQUF0QyxDQUE4QyxJQUE5QyxFQUFvRGtpQyxNQUFNajFDLElBQTFELEVBQWdFK1MsT0FBaEUsQ0FBd0UsSUFBeEUsRUFBOEUsS0FBS3VoQyxlQUFMLENBQXFCVyxNQUFNYSxRQUFOLENBQWVDLFFBQXBDLENBQTlFLEVBQTZIaGpDLE9BQTdILENBQXFJLElBQXJJLEVBQTJJa2lDLE1BQU1hLFFBQU4sQ0FBZUcsSUFBMUosQ0FBdEI7QUFDQSxnQ0FBSWhCLE1BQU1qMUMsSUFBTixDQUFXRSxNQUFYLEdBQW9CLENBQXhCLEVBQTJCO0FBQ3ZCODFDLGtEQUFrQkEsZ0JBQWdCampDLE9BQWhCLENBQXdCLFVBQXhCLEVBQW9DLEVBQXBDLENBQWxCO0FBQ0gsNkJBRkQsTUFFTztBQUNIaWpDLGtEQUFrQkEsZ0JBQWdCampDLE9BQWhCLENBQXdCLFVBQXhCLEVBQW9DLElBQXBDLENBQWxCO0FBQ0g7QUFDRGlpQyxzREFBMEJnQixlQUExQjs7QUFHQWhCLHNEQUEwQixRQUExQjtBQUNBQSxzREFBMEIsT0FBMUI7O0FBRUFBLHNEQUEwQixnQkFBZ0JqdEMsd0VBQVlBLENBQUNzdEIsMkNBQTdCLEdBQTJFLElBQXJHO0FBQ0EsZ0NBQUkzMUIsTUFBTTZ5QyxjQUFjVSxNQUFkLENBQXFCUCxXQUFyQixFQUFrQzZDLElBQWxDLENBQXVDLENBQXZDLEVBQTBDTSxLQUExQyxDQUFnRDMxQyxNQUFoRCxHQUF5RCxDQUFuRSxFQUFzRTtBQUNsRTgwQywwREFBMEIsS0FBS1MsZUFBTCxDQUFxQlIsTUFBTXY4QixRQUEzQixDQUExQjtBQUNIO0FBQ0RzOEIsc0RBQTBCLE9BQTFCOztBQUVBQSxzREFBMEIsT0FBMUI7QUFDSDtBQUNKO0FBRUosaUJBbERELE1Ba0RPLElBQUcsS0FBSzMyQyxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDNnZDLG9CQUFoQyxLQUF5RCxHQUE1RCxFQUFnRTtBQUFDO0FBQ3BFLHlCQUFLaHZDLElBQUksQ0FBVCxFQUFZQSxJQUFJNnlDLGNBQWMyRCxrQkFBZCxDQUFpQ2gyQyxNQUFqRCxFQUF5RFIsS0FBSyxDQUE5RCxFQUFpRTtBQUM3RHUxQyxnQ0FBUTFDLGNBQWMyRCxrQkFBZCxDQUFpQ3gyQyxDQUFqQyxDQUFSO0FBQ0F3MUMsbUNBQVdudEMsd0VBQVlBLENBQUNpdEIsNEJBQXhCOztBQUVBLDRCQUFJdDFCLElBQUksQ0FBSixLQUFVLENBQWQsRUFBaUI7QUFDYncxQyx1Q0FBV250Qyx3RUFBWUEsQ0FBQ2t0Qiw2QkFBeEI7QUFDSDs7QUFFRGlnQixvQ0FBWSxNQUFNbnRDLHdFQUFZQSxDQUFDZ3RCLHdCQUEvQjs7QUFFQWlnQixrREFBMEIsZ0JBQWdCRSxRQUFoQixHQUEyQixJQUFyRDs7QUFFQUYsa0RBQTBCLGdCQUFnQmp0Qyx3RUFBWUEsQ0FBQ210QixrQ0FBN0IsR0FBa0UsSUFBNUY7QUFDQThmLGtEQUEwQixpQkFBaUJqdEMsd0VBQVlBLENBQUNvdEIsdUNBQTlCLEdBQXdFLFNBQXhFLEdBQW9GLEtBQUtxZix5QkFBTCxDQUErQlMsTUFBTSxDQUFOLENBQS9CLENBQXBGLEdBQStILFlBQXpKO0FBQ0FELGtEQUEwQixPQUExQjs7QUFFQUEsa0RBQTBCLGdCQUFnQmp0Qyx3RUFBWUEsQ0FBQ3F0Qix1Q0FBN0IsR0FBdUUsY0FBdkUsR0FBd0Y2ZixNQUFNLENBQU4sQ0FBeEYsR0FBbUcsSUFBN0g7O0FBRUE7QUFDQSw0QkFBSUEsTUFBTSxDQUFOLE1BQWEsRUFBakIsRUFBcUI7QUFDakJELHNEQUEwQixLQUFLSixxQkFBTCxDQUEyQkssTUFBTSxDQUFOLENBQTNCLEVBQXFDbGlDLE9BQXJDLENBQTZDLFVBQTdDLEVBQXlELElBQXpELEVBQStEQSxPQUEvRCxDQUF1RSxJQUF2RSxFQUE2RWtpQyxNQUFNLENBQU4sQ0FBN0UsRUFBdUZsaUMsT0FBdkYsQ0FBK0YsSUFBL0YsRUFBcUcsS0FBSzJoQyxPQUFMLENBQWFPLE1BQU0sQ0FBTixDQUFiLENBQXJHLENBQTFCO0FBQ0gseUJBRkQsTUFFTztBQUNIRCxzREFBMEIsS0FBS0oscUJBQUwsQ0FBMkJLLE1BQU0sQ0FBTixDQUEzQixFQUFxQ2xpQyxPQUFyQyxDQUE2QyxVQUE3QyxFQUF5RCxFQUF6RCxFQUE2REEsT0FBN0QsQ0FBcUUsSUFBckUsRUFBMkUsS0FBSzJoQyxPQUFMLENBQWFPLE1BQU0sQ0FBTixDQUFiLENBQTNFLENBQTFCO0FBQ0g7O0FBR0RELGtEQUEwQixRQUExQjtBQUNBQSxrREFBMEIsT0FBMUI7O0FBRUFBLGtEQUEwQixnQkFBZ0JqdEMsd0VBQVlBLENBQUNzdEIsMkNBQTdCLEdBQTJFLElBQXJHO0FBQ0EsNEJBQUkzMUIsTUFBTTZ5QyxjQUFjMkQsa0JBQWQsQ0FBaUNoMkMsTUFBakMsR0FBMEMsQ0FBcEQsRUFBdUQ7QUFDbkQ4MEMsc0RBQTBCLEtBQUtTLGVBQUwsQ0FBcUJSLE1BQU0sQ0FBTixDQUFyQixDQUExQjtBQUNIO0FBQ0RELGtEQUEwQixPQUExQjs7QUFFQUEsa0RBQTBCLE9BQTFCO0FBQ0g7QUFDSixpQkF0Q00sTUF1Q0YsSUFBRyxLQUFLMzJDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0M2dkMsb0JBQWhDLEtBQXlELEdBQTVELEVBQWlFO0FBQUM7QUFDbkUseUJBQUsvdUMsSUFBSSxDQUFULEVBQVlBLElBQUk0eUMsY0FBY1UsTUFBZCxDQUFxQlAsV0FBckIsRUFBa0N5RCxRQUFsQyxDQUEyQ2oyQyxNQUEzRCxFQUFtRVAsS0FBSyxDQUF4RSxFQUEyRTtBQUN2RSw2QkFBS0QsSUFBSSxDQUFULEVBQVlBLElBQUk2eUMsY0FBY1UsTUFBZCxDQUFxQlAsV0FBckIsRUFBa0N5RCxRQUFsQyxDQUEyQ3gyQyxDQUEzQyxFQUE4Q2syQyxLQUE5QyxDQUFvRDMxQyxNQUFwRSxFQUE0RVIsS0FBSyxDQUFqRixFQUFvRjtBQUNoRnUxQyxvQ0FBUTFDLGNBQWNVLE1BQWQsQ0FBcUJQLFdBQXJCLEVBQWtDeUQsUUFBbEMsQ0FBMkN4MkMsQ0FBM0MsRUFBOENrMkMsS0FBOUMsQ0FBb0RuMkMsQ0FBcEQsQ0FBUjs7QUFFQStwQyxzQ0FBVXdMLE1BQU1obkMsSUFBaEI7O0FBRUFpbkMsdUNBQVdudEMsd0VBQVlBLENBQUNpdEIsNEJBQXhCOztBQUVBLGdDQUFJdDFCLElBQUksQ0FBSixLQUFVLENBQWQsRUFBaUI7QUFDYncxQywyQ0FBV250Qyx3RUFBWUEsQ0FBQ2t0Qiw2QkFBeEI7QUFDSDs7QUFFRGlnQix3Q0FBWSxNQUFNbnRDLHdFQUFZQSxDQUFDZ3RCLHdCQUEvQjs7QUFFQWlnQixzREFBMEIsZ0JBQWdCRSxRQUFoQixHQUEyQixJQUFyRDs7QUFFQUYsc0RBQTBCLGdCQUFnQmp0Qyx3RUFBWUEsQ0FBQ210QixrQ0FBN0IsR0FBa0UsSUFBNUY7QUFDQThmLHNEQUEwQixpQkFBaUJqdEMsd0VBQVlBLENBQUNvdEIsdUNBQTlCLEdBQXdFLFNBQXhFLEdBQW9GLEtBQUs4ZSxxQkFBTCxDQUEyQnhLLE9BQTNCLENBQXBGLEdBQTBILFlBQXBKO0FBQ0F1TCxzREFBMEIsT0FBMUI7O0FBRUEsZ0NBQUdDLE1BQU1hLFFBQVQsRUFBa0I7QUFDZGQsMERBQTBCLGdCQUFnQmp0Qyx3RUFBWUEsQ0FBQ3F0Qix1Q0FBN0IsR0FBdUUsY0FBdkUsR0FBd0Y2ZixNQUFNYSxRQUFOLENBQWU5UCxRQUF2RyxHQUFrSCxJQUE1STtBQUNILDZCQUZELE1BR0k7QUFDQWdQLDBEQUEwQixnQkFBZ0JqdEMsd0VBQVlBLENBQUNxdEIsdUNBQTdCLEdBQXVFLGNBQXZFLEdBQXdGLENBQXhGLEdBQTRGLElBQXRIO0FBQ0g7O0FBR0Q7O0FBRUE0ZixzREFBMEJDLE1BQU1tQixXQUFoQzs7QUFHQXBCLHNEQUEwQixRQUExQjtBQUNBQSxzREFBMEIsT0FBMUI7O0FBRUFBLHNEQUEwQixnQkFBZ0JqdEMsd0VBQVlBLENBQUNzdEIsMkNBQTdCLEdBQTJFLElBQXJHO0FBQ0EsZ0NBQUkzMUIsTUFBTTZ5QyxjQUFjVSxNQUFkLENBQXFCUCxXQUFyQixFQUFrQ3lELFFBQWxDLENBQTJDLENBQTNDLEVBQThDTixLQUE5QyxDQUFvRDMxQyxNQUFwRCxHQUE2RCxDQUF2RSxFQUEwRTtBQUN0RTgwQywwREFBMEIsS0FBS1MsZUFBTCxDQUFxQlIsTUFBTXY4QixRQUEzQixDQUExQjtBQUNIO0FBQ0RzOEIsc0RBQTBCLE9BQTFCOztBQUVBQSxzREFBMEIsT0FBMUI7QUFDSDtBQUNKO0FBQ0o7O0FBR0RBLDBDQUEwQixVQUExQjs7QUFFQUYsa0NBQWtCN2dDLFNBQWxCLEdBQThCK2dDLHNCQUE5Qjs7QUFFQXgyQyxxQkFBSyt0Qyx5QkFBTCxDQUErQnY0QixXQUEvQixDQUEyQzhnQyxpQkFBM0M7O0FBRUEscUJBQUt1QiwrQkFBTDtBQUVIO0FBQ0YsU0FqNUM2RTs7QUFtNUM5RUEseUNBQWlDLHlDQUFVdkIsaUJBQVYsRUFBNkI7QUFDNUQsZ0JBQUl0MkMsT0FBTyxJQUFYO0FBQUEsZ0JBQ0k4M0MsV0FESjtBQUFBLGdCQUVJQyxVQUZKO0FBQUEsZ0JBR0lDLFNBSEo7O0FBS0FGLDBCQUFjLHFCQUFVanhDLE9BQVYsRUFBbUI7QUFDN0Isb0JBQUk3RyxLQUFLdXNDLGdCQUFMLElBQXlCdnNDLEtBQUt1c0MsZ0JBQUwsQ0FBc0J0dkIsV0FBdEIsRUFBekIsSUFBZ0VqZCxLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDNnZDLG9CQUFoQyxJQUF3RCxHQUE1SCxFQUFrSTtBQUM5SCx3QkFBSXYrQixVQUFVM1IsS0FBS3VzQyxnQkFBTCxDQUFzQnR2QixXQUF0QixHQUFvQyxDQUFwQyxDQUFkO0FBQ0Esd0JBQUl0TCxPQUFKLEVBQWE7QUFDVCw0QkFBSXNtQyxxQkFBcUJ0bUMsUUFBUWtFLFdBQVIsR0FBc0JXLGNBQXRCLEdBQXVDM1AsUUFBUXhHLElBQVIsQ0FBYSxLQUFiLENBQXZDLENBQXpCO0FBQ0FMLDZCQUFLNHNDLGlCQUFMLENBQXVCOUwsS0FBdkI7QUFDQSw0QkFBSW9YLHFCQUFxQixJQUFJNzBDLEdBQUdtVSxPQUFQLENBQWU7QUFDcENDLHNDQUFVLElBQUlwVSxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCc2hDLGtCQUFsQjtBQUQwQix5QkFBZixDQUF6QjtBQUdBajRDLDZCQUFLNHNDLGlCQUFMLENBQXVCOXlCLFVBQXZCLENBQWtDbytCLGtCQUFsQztBQUNBbDRDLDZCQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJvSCxHQUEzQixDQUErQkMsT0FBL0IsR0FBeUNnVixTQUF6QyxDQUFtRGc4QixrQkFBbkQ7QUFDSDtBQUNKO0FBQ0Qsb0JBQUdqNEMsS0FBS3VzQyxnQkFBTCxJQUF5QnZzQyxLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDNnZDLG9CQUFoQyxJQUF3RCxHQUFwRixFQUF3RjtBQUNwRmx3Qyx5QkFBSzRzQyxpQkFBTCxDQUF1QjlMLEtBQXZCO0FBQ0Esd0JBQUlxWCxjQUFjdHhDLFFBQVF4RyxJQUFSLENBQWEsS0FBYixDQUFsQjtBQUNBLHdCQUFJKzNDLGVBQWVELFlBQVkxNUIsS0FBWixDQUFrQixHQUFsQixDQUFuQjtBQUNBMjVCLGlDQUFhLENBQWIsSUFBa0I5OEIsV0FBVzg4QixhQUFhLENBQWIsQ0FBWCxDQUFsQjtBQUNBQSxpQ0FBYSxDQUFiLElBQWtCOThCLFdBQVc4OEIsYUFBYSxDQUFiLENBQVgsQ0FBbEI7QUFDQSx3QkFBSUMsV0FBV2gxQyxHQUFHNlEsSUFBSCxDQUFRNEosVUFBUixDQUFtQnM2QixZQUFuQixDQUFmO0FBQ0Esd0JBQUlGLHFCQUFxQixJQUFJNzBDLEdBQUdtVSxPQUFQLENBQWU7QUFDcENDLGtDQUFVLElBQUlwVSxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCMGhDLFFBQWxCO0FBRDBCLHFCQUFmLENBQXpCO0FBR0FyNEMseUJBQUs0c0MsaUJBQUwsQ0FBdUI5eUIsVUFBdkIsQ0FBa0NvK0Isa0JBQWxDO0FBQ0FsNEMseUJBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCQyxPQUEvQixHQUF5Q2dWLFNBQXpDLENBQW1EbzhCLFFBQW5EO0FBQ0g7QUFDSixhQTFCRDs7QUE0QkFOLHlCQUFhLG9CQUFVbHhDLE9BQVYsRUFBbUI7QUFDOUIsb0JBQUk3RyxLQUFLdXNDLGdCQUFMLElBQXlCdnNDLEtBQUt1c0MsZ0JBQUwsQ0FBc0J0dkIsV0FBdEIsRUFBekIsSUFBZ0VqZCxLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDNnZDLG9CQUFoQyxJQUF3RCxHQUE1SCxFQUFpSTtBQUM3SCx3QkFBSXYrQixVQUFVM1IsS0FBS3VzQyxnQkFBTCxDQUFzQnR2QixXQUF0QixHQUFvQyxDQUFwQyxDQUFkO0FBQ0Esd0JBQUl0TCxPQUFKLEVBQWE7QUFDVDNSLDZCQUFLNHNDLGlCQUFMLENBQXVCOUwsS0FBdkI7QUFDQSw0QkFBSW9YLHFCQUFxQixJQUFJNzBDLEdBQUdtVSxPQUFQLENBQWU7QUFDcENDLHNDQUFVLElBQUlwVSxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCaEYsUUFBUWtFLFdBQVIsR0FBc0JXLGNBQXRCLEdBQXVDM1AsUUFBUXhHLElBQVIsQ0FBYSxLQUFiLENBQXZDLENBQWxCO0FBRDBCLHlCQUFmLENBQXpCO0FBR0FMLDZCQUFLNHNDLGlCQUFMLENBQXVCOXlCLFVBQXZCLENBQWtDbytCLGtCQUFsQztBQUNIO0FBQ0o7QUFDRCxvQkFBSWw0QyxLQUFLdXNDLGdCQUFMLElBQXlCdnNDLEtBQUt1c0MsZ0JBQUwsQ0FBc0J0dkIsV0FBdEIsRUFBekIsSUFBZ0VqZCxLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDNnZDLG9CQUFoQyxJQUF3RCxHQUE1SCxFQUFpSTtBQUM3SCx3QkFBSXYrQixVQUFVM1IsS0FBS3VzQyxnQkFBTCxDQUFzQnR2QixXQUF0QixHQUFvQyxDQUFwQyxDQUFkO0FBQ0Esd0JBQUl0TCxPQUFKLEVBQWE7QUFDVDNSLDZCQUFLNHNDLGlCQUFMLENBQXVCOUwsS0FBdkI7QUFDQSw0QkFBSXFYLGNBQWN0eEMsUUFBUXhHLElBQVIsQ0FBYSxLQUFiLENBQWxCO0FBQ0EsNEJBQUkrM0MsZUFBZUQsWUFBWTE1QixLQUFaLENBQWtCLEdBQWxCLENBQW5CO0FBQ0EyNUIscUNBQWEsQ0FBYixJQUFrQjk4QixXQUFXODhCLGFBQWEsQ0FBYixDQUFYLENBQWxCO0FBQ0FBLHFDQUFhLENBQWIsSUFBa0I5OEIsV0FBVzg4QixhQUFhLENBQWIsQ0FBWCxDQUFsQjtBQUNBLDRCQUFJQyxXQUFXaDFDLEdBQUc2USxJQUFILENBQVE0SixVQUFSLENBQW1CczZCLFlBQW5CLENBQWY7QUFDQSw0QkFBSUYscUJBQXFCLElBQUk3MEMsR0FBR21VLE9BQVAsQ0FBZTtBQUNwQ0Msc0NBQVUsSUFBSXBVLEdBQUdxVCxJQUFILENBQVFDLEtBQVosQ0FBa0IwaEMsUUFBbEI7QUFEMEIseUJBQWYsQ0FBekI7QUFHQXI0Qyw2QkFBSzRzQyxpQkFBTCxDQUF1Qjl5QixVQUF2QixDQUFrQ28rQixrQkFBbEM7QUFDSDtBQUNGO0FBQ0osYUExQkQ7O0FBNEJBRix3QkFBWSxxQkFBWTtBQUN0Qmg0QyxxQkFBSzRzQyxpQkFBTCxDQUF1QjlMLEtBQXZCO0FBQ0QsYUFGRDs7QUFLQWo5QixjQUFFLFlBQUYsRUFBZ0J5eUMsaUJBQWhCLEVBQW1DdDlCLElBQW5DLENBQXdDLFVBQVVyUyxLQUFWLEVBQWlCRSxPQUFqQixFQUEwQjs7QUFFaEUsb0JBQUkwcUMsV0FBVzF0QyxFQUFFZ0QsT0FBRixDQUFmOztBQUVBMHFDLHlCQUFTbFgsS0FBVCxDQUFlLFlBQVk7QUFDekJ5ZCxnQ0FBWXZHLFFBQVo7QUFDRCxpQkFGRDs7QUFJQUEseUJBQVNqM0IsRUFBVCxDQUFZLFlBQVosRUFBMEIsWUFBWTtBQUNwQ3k5QiwrQkFBV3hHLFFBQVg7QUFDRCxpQkFGRDs7QUFJQUEseUJBQVNqM0IsRUFBVCxDQUFZLFlBQVosRUFBMEIsWUFBWTtBQUNwQzA5QjtBQUNELGlCQUZEO0FBSUQsYUFoQkQ7QUFpQkQsU0F2K0M2RTs7QUF5K0M5RS9KLG9CQUFZLG9CQUFVcUssTUFBVixFQUFrQjs7QUFFNUJBLG1CQUFPOVAsR0FBUCxDQUFXLEVBQVg7QUFDQThQLG1CQUFPcmUsT0FBUCxDQUFlLFFBQWY7QUFDQSxpQkFBS3NTLGdCQUFMLENBQXNCekwsS0FBdEI7QUFDQSxpQkFBS3dMLG1CQUFMLENBQXlCeEwsS0FBekI7QUFDQSxpQkFBSzhMLGlCQUFMLENBQXVCOUwsS0FBdkI7O0FBR0FqOUIsY0FBRSxLQUFLa3FDLHlCQUFQLEVBQWtDQyxLQUFsQztBQUNBLGlCQUFLSixnQkFBTDtBQUNBLGlCQUFLaEssTUFBTDtBQUNELFNBci9DNkU7QUFzL0M5RXdLLG1CQUFXLG1CQUFVa0ssTUFBVixFQUFrQjN4QyxLQUFsQixFQUF3QjtBQUMvQixnQkFBRyxLQUFLd25DLFNBQVIsRUFBa0I7QUFDZCx1QkFBTyxLQUFLQSxTQUFMLENBQWV4bkMsS0FBZixDQUFQO0FBQ0g7QUFDRCxpQkFBS2dvQyxXQUFMLENBQWlCQyxJQUFqQixDQUFzQixVQUF0QixFQUFpQyxLQUFqQztBQUNBL3FDLGNBQUUsS0FBS2txQyx5QkFBUCxFQUFrQ0MsS0FBbEM7QUFDQSxpQkFBS0osZ0JBQUw7QUFDQSxpQkFBS2hLLE1BQUw7QUFDSCxTQTkvQzZFOztBQWdnRDlFNkosOEJBQXNCLDhCQUFVNkssTUFBVixFQUFrQnhsQyxLQUFsQixFQUF5Qjs7QUFFN0MsZ0JBQUk5UyxPQUFPLElBQVg7QUFBQSxnQkFDSW1ELEdBREo7O0FBR0FBLGtCQUFNLEtBQUtncUMsbUJBQUwsR0FBMkIsbUJBQTNCLEdBQWlEcjZCLE1BQU0sQ0FBTixDQUFqRCxHQUE0RCxPQUE1RCxHQUFzRUEsTUFBTSxDQUFOLENBQTVFO0FBQ0EsaUJBQUtqUyxPQUFMLENBQWFvYSxJQUFiOztBQUVBaGIsbUJBQU9DLElBQVAsQ0FBWTtBQUNWLHVCQUFPaUQsR0FERyxFQUFaLEVBRUs1QyxJQUZMLENBRVUsVUFBVW9FLFFBQVYsRUFBb0I7O0FBRXRCLG9CQUFJQSxRQUFKLEVBQWM7QUFDVix3QkFBSW1PLFFBQVEsRUFBWjtBQUNBLHdCQUFJbk8sU0FBUzR6QyxPQUFiLEVBQXNCO0FBQ2xCLDRCQUFJNXpDLFNBQVM0ekMsT0FBVCxDQUFpQkMsSUFBckIsRUFBMkI7QUFDdkIxbEMsb0NBQVFuTyxTQUFTNHpDLE9BQVQsQ0FBaUJDLElBQXpCO0FBQ0EsZ0NBQUk3ekMsU0FBUzR6QyxPQUFULENBQWlCRSxJQUFyQixFQUEyQjtBQUN2QjNsQyx3Q0FBUSxPQUFPQSxLQUFmO0FBQ0g7QUFDSjtBQUNELDRCQUFJbk8sU0FBUzR6QyxPQUFULENBQWlCRyxJQUFyQixFQUEyQjtBQUN2QjVsQyxvQ0FBUW5PLFNBQVM0ekMsT0FBVCxDQUFpQkcsSUFBekI7QUFDQSxnQ0FBSS96QyxTQUFTNHpDLE9BQVQsQ0FBaUJFLElBQXJCLEVBQTJCO0FBQ3ZCM2xDLHdDQUFRLE9BQU9BLEtBQWY7QUFDSDtBQUNKO0FBQ0QsNEJBQUluTyxTQUFTNHpDLE9BQVQsQ0FBaUJFLElBQXJCLEVBQTJCO0FBQ3ZCLGdDQUFJOXpDLFNBQVM0ekMsT0FBVCxDQUFpQkksWUFBckIsRUFBbUM7QUFDL0I3bEMsd0NBQVEsTUFBTW5PLFNBQVM0ekMsT0FBVCxDQUFpQkksWUFBdkIsR0FBc0M3bEMsS0FBOUM7QUFDSDtBQUNEQSxvQ0FBUW5PLFNBQVM0ekMsT0FBVCxDQUFpQkUsSUFBakIsR0FBd0IzbEMsS0FBaEM7QUFDSDtBQUNKOztBQUVELHdCQUFJQSxVQUFVLEVBQWQsRUFBa0I7QUFDZEEsZ0NBQVFuTyxTQUFTNkcsWUFBakI7QUFDSDtBQUNEOHNDLDJCQUFPOVAsR0FBUCxDQUFXMTFCLEtBQVg7O0FBRUEsd0JBQUl3bEMsT0FBT00sSUFBUCxDQUFZLE1BQVosTUFBd0IsYUFBNUIsRUFBMkM7QUFDdkM1NEMsNkJBQUs4dkMsZ0JBQUwsQ0FBc0I3MEIsSUFBdEI7QUFDSCxxQkFGRCxNQUVPLElBQUlxOUIsT0FBT00sSUFBUCxDQUFZLE1BQVosTUFBd0IsV0FBNUIsRUFBeUM7QUFDNUM1NEMsNkJBQUt1eUMsY0FBTCxDQUFvQnQzQixJQUFwQjtBQUNIO0FBQ0o7QUFFSixhQXZDTCxFQXdDQ2xhLE1BeENELENBd0NRLFlBQVk7QUFDbEJmLHFCQUFLYSxPQUFMLENBQWFDLElBQWI7QUFDRCxhQTFDRDtBQTRDRCxTQXBqRDZFOztBQXNqRDlFK3dDLHVCQUFlLHVCQUFVeUcsTUFBVixFQUFrQnhsQyxLQUFsQixFQUF5QitsQyxZQUF6QixFQUF1Qzs7QUFFcEQsZ0JBQUk3eEMsR0FBSixFQUNJOHhDLE1BREosRUFFSUMsT0FGSixFQUdJLzRDLElBSEosRUFJSW1ELEdBSko7O0FBTUFuRCxtQkFBTyxJQUFQOztBQUVBLGdCQUFJczRDLE9BQU85UCxHQUFQLE9BQWlCLEVBQXJCLEVBQXlCO0FBQ3ZCO0FBQ0EsdUJBQU94b0MsS0FBSzhTLEtBQUwsQ0FBUDtBQUNBLHVCQUFPLEVBQVA7QUFDRDs7QUFFRDlMLGtCQUFNaEgsS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBakM7QUFDQTh4QyxxQkFBUzl4QyxJQUFJQyxPQUFKLEdBQWMreEMsZUFBZCxDQUE4Qmh5QyxJQUFJcXVDLE9BQUosRUFBOUIsQ0FBVDtBQUNBeUQscUJBQVN6MUMsR0FBRzZRLElBQUgsQ0FBUUMsZUFBUixDQUF3QjJrQyxNQUF4QixFQUFnQzl4QyxJQUFJQyxPQUFKLEdBQWNvRCxhQUFkLEVBQWhDLEVBQStELFdBQS9ELENBQVQ7QUFDQTB1QyxzQkFBVSxjQUFjRCxPQUFPLENBQVAsQ0FBZCxHQUEwQixHQUExQixHQUFnQ0EsT0FBTyxDQUFQLENBQWhDLEdBQTRDLEdBQTVDLEdBQWtEQSxPQUFPLENBQVAsQ0FBbEQsR0FBOEQsR0FBOUQsR0FBb0VBLE9BQU8sQ0FBUCxDQUE5RTs7QUFFQTMxQyxrQkFBTW5ELEtBQUtrdEMsWUFBTCxHQUFvQix5QkFBcEIsR0FBZ0QrTCxVQUFVWCxPQUFPOVAsR0FBUCxFQUFWLENBQWhELEdBQTBFdVEsT0FBaEY7O0FBRUE5NEMsbUJBQU9DLElBQVAsQ0FBWTtBQUNWLHVCQUFPaUQ7QUFERyxhQUFaLEVBRUc1QyxJQUZILENBRVEsVUFBVW9FLFFBQVYsRUFBb0I7O0FBRXhCLG9CQUFJQSxTQUFTakQsTUFBVCxHQUFrQixDQUF0QixFQUF5QjtBQUNyQix3QkFBR29SLFVBQVMsV0FBWixFQUF3QjtBQUNwQiw0QkFBSSxDQUFDOVMsS0FBS211QyxTQUFWLEVBQXFCO0FBQ2pCbnVDLGlDQUFLbXVDLFNBQUwsR0FBZSxFQUFmO0FBQ0g7QUFDRG51Qyw2QkFBS211QyxTQUFMLENBQWVudUMsS0FBSzJHLEtBQXBCLElBQTJCLElBQUl0RCxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCLENBQUMyRSxXQUFXM1csU0FBUyxDQUFULEVBQVkwUyxHQUF2QixDQUFELEVBQThCaUUsV0FBVzNXLFNBQVMsQ0FBVCxFQUFZMlMsR0FBdkIsQ0FBOUIsQ0FBbEIsQ0FBM0I7QUFDQXRYLDZCQUFLMnVDLFdBQUwsQ0FBaUJDLElBQWpCLENBQXNCLFVBQXRCLEVBQWlDLEtBQWpDO0FBQ0gscUJBTkQsTUFPSTtBQUNBNXVDLDZCQUFLOFMsS0FBTCxJQUFjLElBQUl6UCxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQ1YsQ0FBQzJFLFdBQVczVyxTQUFTLENBQVQsRUFBWTBTLEdBQXZCLENBQUQsRUFBOEJpRSxXQUFXM1csU0FBUyxDQUFULEVBQVkyUyxHQUF2QixDQUE5QixDQURVLENBQWQ7QUFHSDtBQUNKLGlCQWJELE1BYU87QUFDSDRoQywwQkFBTXJoQixjQUFjbksseUJBQXBCO0FBQ0ExdEIseUJBQUtpdUMsVUFBTCxDQUFnQnFLLE1BQWhCO0FBQ0EsMkJBQU90NEMsS0FBSzhTLEtBQUwsQ0FBUDtBQUNIOztBQUVILG9CQUFJK2xDLGdCQUFnQixPQUFPQSxZQUFQLEtBQXdCLFVBQTVDLEVBQXdEO0FBQ3REQTtBQUNEO0FBQ0YsYUExQkQsRUEyQkNNLEtBM0JELENBMkJPLFlBQVk7QUFDZkQsc0JBQU1yaEIsY0FBY3VoQiwyQkFBcEI7QUFDSCxhQTdCRDs7QUFpQ0EsbUJBQU8sRUFBUDtBQUVELFNBaG5ENkU7O0FBa25EOUVuQyx5QkFBaUIseUJBQVVvQyxnQkFBVixFQUE0Qjs7QUFFM0M7O0FBRUEsZ0JBQUluL0IsUUFBSixFQUNJby9CLGFBREo7O0FBR0FwL0IsdUJBQVczWSxTQUFTODNDLGdCQUFULEVBQTJCLEVBQTNCLENBQVg7QUFDQW4vQix1QkFBV0EsV0FBVyxJQUF0Qjs7QUFFQSxnQkFBSUEsWUFBWSxHQUFoQixFQUFxQjtBQUNuQm8vQixnQ0FBZ0JwL0IsU0FBU3VoQixPQUFULENBQWlCLENBQWpCLElBQXNCLFFBQXRCLEdBQWlDLElBQWpEO0FBQ0QsYUFGRCxNQUVPLElBQUl2aEIsWUFBWSxFQUFoQixFQUFvQjtBQUN6Qm8vQixnQ0FBZ0JwL0IsU0FBU3VoQixPQUFULENBQWlCLENBQWpCLElBQXNCLFFBQXRCLEdBQWlDLElBQWpEO0FBQ0QsYUFGTSxNQUVBLElBQUl2aEIsWUFBWSxHQUFoQixFQUFxQjtBQUMxQm8vQixnQ0FBZ0JwL0IsU0FBU3VoQixPQUFULENBQWlCLENBQWpCLElBQXNCLFFBQXRCLEdBQWlDLElBQWpEO0FBQ0QsYUFGTSxNQUVBO0FBQ0w2ZCxnQ0FBZ0IsQ0FBQ3AvQixXQUFXLElBQVosRUFBa0J1aEIsT0FBbEIsQ0FBMEIsQ0FBMUIsSUFBK0IsUUFBL0IsR0FBMEMsR0FBMUQ7QUFDRDs7QUFFRCxtQkFBTzZkLGFBQVA7QUFDRCxTQXZvRDZFOztBQXlvRDlFcEMscUJBQWEscUJBQVVxQyxhQUFWLEVBQXlCOztBQUVwQzs7QUFFQSxnQkFBSUMsT0FBSixFQUNJQyxPQURKLEVBRUlDLEtBRkosRUFHSUMsU0FISjs7QUFLQUgsc0JBQVVqNEMsU0FBU2c0QyxhQUFULEVBQXdCLEVBQXhCLENBQVY7QUFDQUUsc0JBQVVsNEMsU0FBU2k0QyxVQUFVLEVBQW5CLEVBQXVCLEVBQXZCLENBQVY7QUFDQUEsc0JBQVVBLFVBQVUsRUFBcEI7O0FBRUFFLG9CQUFRbjRDLFNBQVNrNEMsVUFBVSxFQUFuQixFQUF1QixFQUF2QixDQUFSO0FBQ0FBLHNCQUFVQSxVQUFVLEVBQXBCOztBQUVBLGdCQUFJQyxVQUFVLENBQVYsSUFBZUQsWUFBWSxDQUEvQixFQUFrQztBQUNoQ0UsNEJBQVlILFVBQVUsUUFBVixHQUFxQixHQUFqQztBQUNELGFBRkQsTUFFTyxJQUFJRSxVQUFVLENBQWQsRUFBaUI7QUFDdEJDLDRCQUFZRixVQUFVLFFBQVYsR0FBcUIsS0FBakM7QUFDRCxhQUZNLE1BRUE7QUFDTEUsNEJBQVlELFFBQVEsUUFBUixHQUFtQixHQUFuQixHQUF5QixRQUF6QixHQUFvQ0QsT0FBcEMsR0FBOEMsUUFBOUMsR0FBeUQsS0FBckU7QUFDRDs7QUFFRCxtQkFBT0UsU0FBUDtBQUNEOztBQWxxRDZFLEtBQTVDLENBQXBDO0FBc3FERCxDQTdzREEsRUE2c0RDMTVDLE1BN3NERCxFQTZzRFMsS0FBS3FNLEdBN3NEZCxDQUFEOztBQStzRE8sSUFBSTAvQixTQUFTLEtBQUsxL0IsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsQ0FBc0JvVSxNQUFuQyxDOzs7Ozs7Ozs7Ozs7O0FDdnVEUDtBQUFBO0FBQUE7QUFBQTtBQUNBLEtBQUsxL0IsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsR0FBd0IsS0FBS3RyQixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxJQUF5QixFQUFqRDs7QUFFQTtBQUNBOztBQUVDLFdBQVUvekIsQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7Ozs7Ozs7O0FBUUFBLE1BQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQmdpQixRQUFqQixHQUE0QixVQUFVdjZCLFdBQVYsRUFBdUI7O0FBRWpELFFBQUlyZixPQUFPLElBQVg7QUFDQSxRQUFJSCxVQUFVd2YsZUFBZSxFQUE3Qjs7QUFFQSxRQUFJeFksT0FBSixFQUNJbXhCLE1BREo7O0FBR0E7QUFDQW40QixjQUFVZ0UsRUFBRUgsTUFBRixDQUFTO0FBQ2pCNEYsaUJBQVdDLHdFQUFZQSxDQUFDK3RCLFdBRFA7QUFFakJjLGtCQUFZLElBRks7QUFHakJrQixlQUFTLElBSFE7QUFJakIxNUIscUJBQWUyUztBQUpFLEtBQVQsRUFLUDFTLE9BTE8sQ0FBVjs7QUFPQSxRQUFJLENBQUNBLFFBQVFELGFBQWIsRUFBNEI7QUFDMUIsYUFBTyxLQUFQO0FBQ0Q7O0FBRUQsUUFBSThILE9BQU83SCxRQUFRRCxhQUFSLENBQXNCb0gsR0FBdEIsQ0FBMEJDLE9BQTFCLEVBQVg7QUFDQSxRQUFJK0IsVUFBVW5KLFFBQVFELGFBQVIsQ0FBc0JTLElBQXBDOztBQUVBLFFBQUl5SyxTQUFTLFNBQVRBLE1BQVMsR0FBWTtBQUN2QmpILFFBQUVnRCxPQUFGLEVBQVc4VixRQUFYLENBQW9CcFQsd0VBQVlBLENBQUMybkIsT0FBakM7QUFDRCxLQUZEOztBQUlBLFFBQUl1SCxVQUFVLFNBQVZBLE9BQVUsR0FBWTtBQUN4QjUwQixRQUFFZ0QsT0FBRixFQUFXNnhCLFdBQVgsQ0FBdUJudkIsd0VBQVlBLENBQUMybkIsT0FBcEM7QUFDRCxLQUZEOztBQUlBLFFBQUk1aUIsU0FBUyxTQUFUQSxNQUFTLENBQVVxcUIsS0FBVixFQUFpQjtBQUM1QkEsWUFBTUMsZUFBTjtBQUNBO0FBQ0EsV0FBS0MsSUFBTDs7QUFFQSxVQUFJVyxjQUFjLElBQUluMkIsR0FBR3EyQixXQUFQLENBQW1CO0FBQ25DQyxrQkFBVSxJQUR5QjtBQUVuQ3Z2QixvQkFBWTFDLEtBQUsyQyxhQUFMO0FBRnVCLE9BQW5CLENBQWxCOztBQUtBbXZCLGtCQUFZbGYsRUFBWixDQUFlLFFBQWYsRUFBeUIsVUFBVXNmLEdBQVYsRUFBZTtBQUN0Q2x5QixhQUFLdVUsU0FBTCxDQUFldWQsWUFBWUssV0FBWixFQUFmO0FBQ0E7QUFDQTtBQUNBO0FBQ0FueUIsYUFBS3FCLE9BQUwsQ0FBYSxFQUFiO0FBQ0E7QUFDQXl3QixvQkFBWU8sV0FBWixDQUF3QixLQUF4QjtBQUNBbDZCLGdCQUFRRCxhQUFSLENBQXNCb0gsR0FBdEIsQ0FBMEIwRCxPQUExQixDQUFrQ2hELElBQWxDO0FBQ0E0RSxZQUFJeUssSUFBSixDQUFTblYsS0FBVCxDQUFlK0ksYUFBZixDQUE2QjlLLFFBQVFELGFBQXJDO0FBQ0QsT0FWRDtBQVdELEtBckJEOztBQXVCQTtBQUNBaUgsY0FBVXVDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVjtBQUNBeEMsWUFBUXlDLFNBQVIsR0FBb0J6SixRQUFReUosU0FBUixHQUFvQixHQUFwQixHQUEwQkMsd0VBQVlBLENBQUNFLGVBQXZDLEdBQXlELFNBQTdFOztBQUVBLFFBQUk1SixRQUFRdTRCLFVBQVosRUFBd0I7QUFDdEI7QUFDQUosZUFBUzV1QixTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQVQ7QUFDQTJ1QixhQUFPYyxLQUFQLEdBQWVqNUIsUUFBUXc0QixRQUF2QjtBQUNBeHhCLGNBQVEyTyxXQUFSLENBQW9Cd2lCLE1BQXBCOztBQUVBO0FBQ0FBLGFBQU9lLGdCQUFQLENBQXdCLE9BQXhCLEVBQWlDenFCLE1BQWpDLEVBQXlDLEtBQXpDO0FBQ0EwcEIsYUFBT2UsZ0JBQVAsQ0FBd0IsWUFBeEIsRUFBc0N6cUIsTUFBdEMsRUFBOEMsS0FBOUM7QUFDRDs7QUFFRDtBQUNBakwsT0FBR3UwQixPQUFILENBQVdvQixPQUFYLENBQW1CQyxJQUFuQixDQUF3QixJQUF4QixFQUE4QjtBQUM1QnB5QixlQUFTQSxPQURtQjtBQUU1QnF5QixjQUFRcjVCLFFBQVFxNUI7QUFGWSxLQUE5QjtBQUlELEdBMUVEO0FBMkVBNzFCLEtBQUc4MUIsUUFBSCxDQUFZN3NCLElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQmdpQixRQUE3QixFQUF1Q3YyQyxHQUFHdTBCLE9BQUgsQ0FBV29CLE9BQWxEOztBQUdBOzs7QUFHQTFzQixNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJnaUIsUUFBakIsQ0FBMEJ4Z0IsU0FBMUIsR0FBc0N2MUIsRUFBRUgsTUFBRixDQUFTNEksSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCZ2lCLFFBQWpCLENBQTBCeGdCLFNBQW5DLEVBQThDOztBQUVsRjs7QUFGa0YsR0FBOUMsQ0FBdEMsQ0E1RmlCLENBZ0diO0FBRUwsQ0FsR0EsRUFrR0NuNUIsTUFsR0QsRUFrR1MsS0FBS3FNLEdBbEdkLENBQUQ7O0FBb0dPLElBQUlzdEMsV0FBVyxLQUFLdHRDLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLENBQXNCZ2lCLFFBQXJDLEM7Ozs7Ozs7Ozs7Ozs7QUM1R1A7QUFBQTtBQUFBO0FBQ0EsS0FBS3R0QyxHQUFMLEdBQVcsS0FBS0EsR0FBTCxJQUFZLEVBQXZCO0FBQ0EsS0FBS0EsR0FBTCxDQUFTeUssSUFBVCxHQUFnQixLQUFLekssR0FBTCxDQUFTeUssSUFBVCxJQUFpQixFQUFqQztBQUNBLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxHQUF3QixLQUFLdHJCLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLElBQXlCLEVBQWpEOztBQUVBOztBQUVDLFdBQVUvekIsQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7Ozs7Ozs7O0FBUUFBLE1BQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQmlpQixLQUFqQixHQUF5QixVQUFVeDZCLFdBQVYsRUFBdUI7O0FBRTlDLFFBQUlyZixPQUFPLElBQVg7QUFDQSxRQUFJSCxVQUFVd2YsZUFBZSxFQUE3Qjs7QUFFQSxRQUFJeFksT0FBSixFQUNFbXhCLE1BREY7O0FBR0E7QUFDQW40QixjQUFVZ0UsRUFBRUgsTUFBRixDQUFTO0FBQ2pCNEYsaUJBQVdDLHdFQUFZQSxDQUFDdXBCLEtBRFA7QUFFakJzRixrQkFBWSxJQUZLO0FBR2pCa0IsZUFBUyxJQUhRO0FBSWpCMTVCLHFCQUFlMlM7QUFKRSxLQUFULEVBS1AxUyxPQUxPLENBQVY7O0FBT0EsUUFBSSxDQUFDQSxRQUFRRCxhQUFiLEVBQTRCO0FBQzFCLGFBQU8sS0FBUDtBQUNEOztBQUVELFFBQUk4SCxPQUFPN0gsUUFBUUQsYUFBUixDQUFzQm9ILEdBQXRCLENBQTBCQyxPQUExQixFQUFYO0FBQ0EsUUFBSStCLFVBQVVuSixRQUFRRCxhQUFSLENBQXNCUyxJQUFwQzs7QUFFQSxRQUFJaU8sU0FBUyxTQUFUQSxNQUFTLENBQVVxcUIsS0FBVixFQUFpQjtBQUM1QkEsWUFBTUMsZUFBTjtBQUNBLFVBQUk1VixTQUFTNVosU0FBUzZvQyxzQkFBVCxDQUFnQyxpQkFBaEMsRUFBbUQsQ0FBbkQsQ0FBYjs7QUFFQWp2QixhQUFPODJCLE1BQVAsQ0FBYyxVQUFTQyxJQUFULEVBQWU7QUFDM0IsWUFBSTE0QyxJQUFJK0gsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQUFSO0FBQ0FELGlCQUFTNHdDLElBQVQsQ0FBY3hrQyxXQUFkLENBQTBCblUsQ0FBMUI7QUFDQUEsVUFBRXFCLEtBQUYsR0FBVSxlQUFWO0FBQ0EsWUFBSVMsTUFBTThKLE9BQU9ndEMsR0FBUCxDQUFXQyxlQUFYLENBQTJCSCxJQUEzQixDQUFWO0FBQ0ExNEMsVUFBRXMwQyxJQUFGLEdBQVN4eUMsR0FBVDtBQUNBOUIsVUFBRTg0QyxRQUFGLEdBQWEsU0FBYjtBQUNBOTRDLFVBQUVnNUIsS0FBRjtBQUNBcHRCLGVBQU9ndEMsR0FBUCxDQUFXRyxlQUFYLENBQTJCajNDLEdBQTNCO0FBQ0QsT0FURDtBQVVELEtBZEQ7O0FBZ0JBO0FBQ0EwRCxjQUFVdUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFWO0FBQ0F4QyxZQUFReUMsU0FBUixHQUFvQnpKLFFBQVF5SixTQUFSLEdBQW9CLEdBQXBCLEdBQTBCQyx3RUFBWUEsQ0FBQ0UsZUFBdkMsR0FBeUQsa0NBQTdFOztBQUVBLFFBQUk1SixRQUFRdTRCLFVBQVosRUFBd0I7QUFDdEI7QUFDQUosZUFBUzV1QixTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQVQ7QUFDQTJ1QixhQUFPYyxLQUFQLEdBQWVqNUIsUUFBUXc0QixRQUF2QjtBQUNBTCxhQUFPMXVCLFNBQVAsR0FBbUJDLHdFQUFZQSxDQUFDdXBCLEtBQWhDO0FBQ0Fqc0IsY0FBUTJPLFdBQVIsQ0FBb0J3aUIsTUFBcEI7O0FBRUE7QUFDQUEsYUFBT2UsZ0JBQVAsQ0FBd0IsT0FBeEIsRUFBaUN6cUIsTUFBakMsRUFBeUMsS0FBekM7QUFDQTBwQixhQUFPZSxnQkFBUCxDQUF3QixZQUF4QixFQUFzQ3pxQixNQUF0QyxFQUE4QyxLQUE5QztBQUNEOztBQUVEO0FBQ0FqTCxPQUFHdTBCLE9BQUgsQ0FBV29CLE9BQVgsQ0FBbUJDLElBQW5CLENBQXdCLElBQXhCLEVBQThCO0FBQzVCcHlCLGVBQVNBLE9BRG1CO0FBRTVCcXlCLGNBQVFyNUIsUUFBUXE1QjtBQUZZLEtBQTlCO0FBSUQsR0E1REQ7QUE2REE3MUIsS0FBRzgxQixRQUFILENBQVk3c0IsSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCaWlCLEtBQTdCLEVBQW9DeDJDLEdBQUd1MEIsT0FBSCxDQUFXb0IsT0FBL0M7O0FBR0E7OztBQUdBMXNCLE1BQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQmlpQixLQUFqQixDQUF1QnpnQixTQUF2QixHQUFtQ3YxQixFQUFFSCxNQUFGLENBQVM0SSxJQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJpaUIsS0FBakIsQ0FBdUJ6Z0IsU0FBaEMsRUFBMkM7O0FBRTVFOztBQUY0RSxHQUEzQyxDQUFuQyxDQTlFaUIsQ0FrRmI7QUFFTCxDQXBGQSxFQW9GQ241QixNQXBGRCxFQW9GUyxLQUFLcU0sR0FwRmQsQ0FBRDs7QUFzRk8sSUFBSXV0QyxRQUFRLEtBQUt2dEMsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsQ0FBc0JpaUIsS0FBbEMsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0ZQOztBQUVBLEtBQUt2dEMsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsR0FBd0IsS0FBS3RyQixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxJQUF5QixFQUFqRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUlDLGdCQUFnQixFQUFwQjs7QUFFQSxJQUFJLE9BQU83dUIsT0FBUCxLQUFtQixXQUF2QixFQUFvQztBQUNsQyxNQUFJQSxRQUFROHVCLElBQVIsS0FBaUIsSUFBckIsRUFBMkI7QUFDekJELG9CQUFnQmhILHVGQUFoQjtBQUNELEdBRkQsTUFFTyxJQUFJN25CLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUNoQ0Qsb0JBQWdCOUcsd0ZBQWhCO0FBQ0QsR0FGTSxNQUVBO0FBQ0w7QUFDQThHLG9CQUFnQmhILHVGQUFoQjtBQUNEO0FBQ0Y7O0FBRUQ7OztBQUdDLFdBQVVodEIsQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7Ozs7Ozs7QUFPQUEsTUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCdUUsU0FBakIsR0FBNkIsVUFBVXQ4QixPQUFWLEVBQW1COztBQUU5QyxTQUFLQSxPQUFMLEdBQWVnRSxFQUFFSCxNQUFGLENBQVM7QUFDdEJzNEIsY0FBUSxJQURjO0FBRXRCcWUsY0FBUSxLQUZjO0FBR3RCQyxtQkFBYSxLQUhTO0FBSXRCMTZDLHFCQUFlMlMsU0FKTztBQUt0Qi9RLFlBQU0sV0FMZ0I7QUFNdEJ5NkIsaUJBQVc7QUFOVyxLQUFULEVBT1pwOEIsT0FQWSxDQUFmOztBQVNBO0FBQ0E7QUFDQSxZQUFRLEtBQUtBLE9BQUwsQ0FBYW84QixTQUFyQjtBQUNFLFdBQUssTUFBTDtBQUNFLGFBQUtzZSxVQUFMLEdBQWtCLFVBQWxCO0FBQ0EsYUFBS0MsT0FBTCxHQUFlLFVBQWY7QUFDQTtBQUNGLFdBQUssT0FBTDtBQUNFLGFBQUtELFVBQUwsR0FBa0IsV0FBbEI7QUFDQSxhQUFLQyxPQUFMLEdBQWUsV0FBZjtBQUNBO0FBUko7QUFVQTtBQUNBLFNBQUtqYixXQUFMLEdBQW1CLEtBQW5CO0FBQ0EsU0FBSzEvQixPQUFMLENBQWF3NEIsUUFBYixHQUF3QixLQUFLeDRCLE9BQUwsQ0FBYXc0QixRQUFiLElBQXlCLEtBQUt4NEIsT0FBTCxDQUFhazhCLFFBQXRDLElBQWtEbEUsY0FBYzlNLGNBQXhGO0FBQ0EsU0FBSzZkLFNBQUwsR0FBaUJ4L0IsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFqQjtBQUNBLFNBQUt4QyxPQUFMLEdBQWV1QyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWY7QUFDQSxTQUFLMnVCLE1BQUwsR0FBY3psQixTQUFkO0FBQ0EsU0FBSzFSLE9BQUwsR0FBZTBSLFNBQWY7QUFDQTtBQUNBLFNBQUtrb0MsT0FBTCxHQUFlbG9DLFNBQWY7QUFDQSxTQUFLbW9DLFFBQUwsR0FBZ0Jub0MsU0FBaEI7QUFDQSxTQUFLd3BCLFFBQUwsR0FBZ0J4cEIsU0FBaEI7QUFDQSxTQUFLMnFCLFVBQUwsR0FBa0IzcUIsU0FBbEI7QUFDQSxTQUFLbXFCLGdCQUFMLEdBQXdCbnFCLFNBQXhCO0FBQ0EsU0FBS29vQyxhQUFMLEdBQXFCcG9DLFNBQXJCO0FBQ0EsU0FBS2lnQyxTQUFMLEdBQWlCamdDLFNBQWpCOztBQUVBLFNBQUtxb0MsUUFBTCxHQUFnQixFQUFoQjtBQUNBLFNBQUt6ZCxjQUFMLEdBQXNCNXFCLFNBQXRCO0FBQ0EsU0FBS3NvQyxLQUFMLEdBQWEsRUFBYjtBQUNBLFNBQUtDLFVBQUwsR0FBa0J2b0MsU0FBbEI7QUFDQSxTQUFLd29DLFVBQUwsR0FBa0J4b0MsU0FBbEI7O0FBRUEsUUFBSSxLQUFLMVMsT0FBTCxDQUFhbThCLE1BQWIsSUFBdUIsS0FBS244QixPQUFMLENBQWFELGFBQXhDLEVBQXVEO0FBQ3JELFdBQUtvOEIsTUFBTDtBQUNEOztBQUVELFFBQUksQ0FBQyxLQUFLbjhCLE9BQUwsQ0FBYXc2QyxNQUFsQixFQUEwQjtBQUN4QmgzQyxTQUFHdTBCLE9BQUgsQ0FBV29CLE9BQVgsQ0FBbUJDLElBQW5CLENBQXdCLElBQXhCLEVBQThCO0FBQzVCcHlCLGlCQUFTLEtBQUtBLE9BRGM7QUFFNUJxeUIsZ0JBQVEsS0FBS3I1QixPQUFMLENBQWFxNUIsTUFBYixJQUF1QjNtQjtBQUZILE9BQTlCO0FBSUQ7QUFDRixHQXZERDtBQXdEQWxQLEtBQUc4MUIsUUFBSCxDQUFZN3NCLElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQnVFLFNBQTdCLEVBQXdDOTRCLEdBQUd1MEIsT0FBSCxDQUFXb0IsT0FBbkQ7O0FBRUE7QUFDQTFzQixNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJ1RSxTQUFqQixDQUEyQi9DLFNBQTNCLEdBQXVDdjFCLEVBQUVILE1BQUYsQ0FBUzRJLElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQnVFLFNBQWpCLENBQTJCL0MsU0FBcEMsRUFBK0M7O0FBRXBGOzs7OztBQUtBNEMsWUFBUSxrQkFBWTtBQUNsQixVQUFJaDhCLElBQUosRUFDSWc3QyxTQURKLEVBRUlDLGNBRkosRUFHSUMsV0FISixFQUlJQyxlQUpKLEVBS0lDLFVBTEosRUFNSUMsT0FOSjs7QUFRQUEsZ0JBQVUsS0FBS3g3QyxPQUFMLENBQWF3N0MsT0FBdkI7QUFDQUYsd0JBQWtCdjVDLDhEQUFLQSxDQUFDMDVDLHFCQUFOLENBQTRCLEtBQUt6N0MsT0FBTCxDQUFhMkIsSUFBekMsQ0FBbEI7QUFDQXhCLGFBQU8sSUFBUDs7QUFHQTtBQUNBLFVBQUksS0FBS0gsT0FBTCxDQUFhdzZDLE1BQWpCLEVBQXlCO0FBQ3ZCVyxvQkFBWSxNQUFNenhDLHdFQUFZQSxDQUFDeW5CLElBQS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0QsT0FMRCxNQUtPO0FBQ0xncUIsb0JBQVksTUFBTXp4Qyx3RUFBWUEsQ0FBQ3dmLEtBQS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBS2xwQixPQUFMLENBQWFELGFBQWIsQ0FBMkIsV0FBVyxLQUFLMjZDLFVBQTNDLElBQXlELEtBQUsxNkMsT0FBTCxDQUFhRCxhQUFiLENBQTJCLFdBQVcsS0FBSzI2QyxVQUEzQyxLQUEwRCxLQUFuSDs7QUFFQSxhQUFLdmlCLE1BQUwsR0FBYzV1QixTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWQ7QUFDQXhGLFVBQUUsS0FBS20wQixNQUFQLEVBQWUxZCxFQUFmLENBQWtCLE9BQWxCLEVBQTJCLFVBQVVxZSxLQUFWLEVBQWlCO0FBQzFDQSxnQkFBTUMsZUFBTjtBQUNBO0FBQ0EsY0FBSTtBQUNGLGlCQUFLQyxJQUFMO0FBQ0QsV0FGRCxDQUVFLE9BQU9uakIsQ0FBUCxFQUFVO0FBQ1Y7QUFDQS9VLG9CQUFRQyxJQUFSLENBQWE4VSxFQUFFbFUsSUFBRixHQUFTLElBQVQsR0FBZ0JrVSxFQUFFNmxDLE9BQS9CO0FBQ0Q7QUFDRCxjQUFHSixtQkFBbUIsUUFBbkIsSUFBK0JBLG1CQUFtQixTQUFsRCxJQUErREEsbUJBQW1CLFFBQXJGLEVBQThGO0FBQzFGbjdDLGlCQUFLc08sTUFBTCxDQUFZLElBQVo7QUFDSCxXQUZELE1BR0k7QUFDQXRPLGlCQUFLc08sTUFBTDtBQUNIO0FBQ0YsU0FmRDtBQWdCQSxhQUFLMHBCLE1BQUwsQ0FBWWMsS0FBWixHQUFvQixLQUFLajVCLE9BQUwsQ0FBYXc0QixRQUFqQztBQUNBLGFBQUt4eEIsT0FBTCxDQUFhMk8sV0FBYixDQUF5QixLQUFLd2lCLE1BQTlCO0FBQ0Q7O0FBRUQ7QUFDQW4wQixRQUFFLEtBQUsra0MsU0FBUCxFQUFrQmpzQixRQUFsQixDQUEyQixTQUFTLEtBQUs5YyxPQUFMLENBQWEyQixJQUF0QixHQUE2QixHQUE3QixHQUFtQyxNQUFuQyxHQUE0QyxLQUFLZzVDLE9BQWpELEdBQTJELFlBQTNELEdBQTBFLEdBQTFFLEdBQWdGanhDLHdFQUFZQSxDQUFDRSxlQUE3RixHQUErR3V4QyxTQUExSTtBQUNBbjNDLFFBQUUsS0FBS2dELE9BQVAsRUFBZ0I4VixRQUFoQixDQUF5QixTQUFTLEtBQUs5YyxPQUFMLENBQWEyQixJQUF0QixHQUE2QixHQUE3QixHQUFtQyxNQUFuQyxHQUE0QyxLQUFLZzVDLE9BQWpELEdBQTJELFVBQTNELEdBQXdFLEdBQXhFLEdBQThFanhDLHdFQUFZQSxDQUFDRSxlQUEzRixHQUE2RyxHQUE3RyxHQUFtSEYsd0VBQVlBLENBQUN1dEIsVUFBaEksR0FBNklra0IsU0FBdEs7O0FBRUE7QUFDQSxVQUFJLEtBQUtuN0MsT0FBTCxDQUFhbzhCLFNBQWIsS0FBMkIsT0FBL0IsRUFBd0M7QUFDdEM7QUFDQTtBQUNBLGFBQUsyTSxTQUFMLENBQWVsbUMsS0FBZixDQUFxQixLQUFLN0MsT0FBTCxDQUFhbzhCLFNBQWxDLElBQStDLE9BQS9DO0FBQ0QsT0FKRCxNQUlPO0FBQ0w7QUFDQTtBQUNBLGFBQUsyTSxTQUFMLENBQWVsbUMsS0FBZixDQUFxQixLQUFLN0MsT0FBTCxDQUFhbzhCLFNBQWxDLElBQStDLE9BQS9DO0FBQ0Q7O0FBRUQ7QUFDQSxVQUFJLEtBQUtwOEIsT0FBTCxDQUFhdzZDLE1BQWpCLEVBQXlCO0FBQ3ZCanhDLGlCQUFTbWxDLGNBQVQsQ0FBd0IsS0FBSzF1QyxPQUFMLENBQWF3NkMsTUFBckMsRUFBNkM3a0MsV0FBN0MsQ0FBeUQsS0FBS296QixTQUE5RDtBQUNBO0FBQ0QsT0FIRCxNQUdPO0FBQ0wsWUFBSSxLQUFLL29DLE9BQUwsQ0FBYW84QixTQUFiLEtBQTJCLE1BQS9CLEVBQXVDO0FBQ3JDcDRCLFlBQUUsTUFBTSxLQUFLaEUsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBM0IsQ0FBK0J3MEMsU0FBL0IsRUFBTixHQUFtRCxJQUFuRCxHQUEwRGp5Qyx3RUFBWUEsQ0FBQ3l0QixzQkFBekUsRUFBaUd5a0IsTUFBakcsQ0FBd0csS0FBSzdTLFNBQTdHO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsZUFBSy9vQyxPQUFMLENBQWFELGFBQWIsQ0FBMkI4SiwyQkFBM0IsQ0FBdUQreEMsTUFBdkQsQ0FBOEQsS0FBSzdTLFNBQW5FO0FBQ0Q7QUFDRjs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxXQUFLNlIsT0FBTCxHQUFlcnhDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZjtBQUNBLFdBQUtveEMsT0FBTCxDQUFhbnhDLFNBQWIsR0FBeUIsU0FBUyxLQUFLa3hDLE9BQWQsR0FBd0IsVUFBakQ7QUFDQSxXQUFLNVIsU0FBTCxDQUFlcHpCLFdBQWYsQ0FBMkIsS0FBS2lsQyxPQUFoQztBQUNBO0FBQ0EsV0FBS0MsUUFBTCxHQUFnQnR4QyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWhCO0FBQ0EsV0FBS3F4QyxRQUFMLENBQWNweEMsU0FBZCxHQUEwQixTQUFTLEtBQUtreEMsT0FBZCxHQUF3QixXQUFsRDtBQUNBLFdBQUtDLE9BQUwsQ0FBYWpsQyxXQUFiLENBQXlCLEtBQUtrbEMsUUFBOUI7O0FBRUE7QUFDQSxXQUFLdmQsY0FBTCxHQUFzQi96QixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQXRCO0FBQ0EsV0FBSzh6QixjQUFMLENBQW9CN3pCLFNBQXBCLEdBQWdDLFNBQVMsS0FBS2t4QyxPQUFkLEdBQXdCLGlCQUF4RDs7QUFFQTtBQUNBLFdBQUt0ZCxVQUFMLEdBQWtCLEtBQUt3ZSxVQUFMLENBQWdCO0FBQ2hDcHlDLG1CQUFXLFNBQVMsS0FBS2t4QyxPQUFkLEdBQXdCLGNBREg7QUFFaEN0aEIsZ0JBQVEsS0FBS3VoQjtBQUZtQixPQUFoQixDQUFsQjs7QUFLQTtBQUNBLFdBQUsvZCxnQkFBTCxHQUF3QixLQUFLZ2YsVUFBTCxDQUFnQjtBQUN0Q3B5QyxtQkFBVyxTQUFTLEtBQUtreEMsT0FBZCxHQUF3QixvQkFERztBQUV0Q3RoQixnQkFBUSxLQUFLdWhCO0FBRnlCLE9BQWhCLENBQXhCOztBQUtBO0FBQ0EsV0FBS2tCLGVBQUwsR0FBdUJ2eUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUF2QjtBQUNBLFdBQUtzeUMsZUFBTCxDQUFxQnJ5QyxTQUFyQixHQUFpQyxpQkFBakM7QUFDQSxXQUFLcXlDLGVBQUwsQ0FBcUJsbUMsU0FBckIsR0FBaUMsRUFBakM7QUFDQSxXQUFLaW5CLGdCQUFMLENBQXNCbG5CLFdBQXRCLENBQWtDLEtBQUttbUMsZUFBdkM7O0FBRUE7QUFDQSxXQUFLaEIsYUFBTCxHQUFxQixLQUFLZSxVQUFMLENBQWdCO0FBQ2pDcHlDLG1CQUFXLFNBQVMsS0FBS2t4QyxPQUFkLEdBQXdCLDJCQURGO0FBRWpDdGhCLGdCQUFRLEtBQUt1aEI7QUFGb0IsT0FBaEIsQ0FBckI7O0FBS0M7QUFDRCxXQUFLakksU0FBTCxHQUFpQnBwQyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWpCO0FBQ0EsV0FBS21wQyxTQUFMLENBQWVscEMsU0FBZixHQUEyQixTQUFTLEtBQUtreEMsT0FBZCxHQUF3QixzQkFBbkQ7QUFDQSxXQUFLQyxPQUFMLENBQWFqbEMsV0FBYixDQUF5QixLQUFLZzlCLFNBQTlCOztBQUVBO0FBQ0EsV0FBSzN4QyxPQUFMLEdBQWUsSUFBSSs2Qyx1RUFBSixDQUFZO0FBQ3pCMWlCLGdCQUFRLEtBQUt3RCxnQkFEWTtBQUV6QnB6QixtQkFBV0Msd0VBQVlBLENBQUNrb0I7QUFGQyxPQUFaLENBQWY7O0FBS0E7QUFDQTtBQUNBO0FBQ0EsV0FBS3NLLFFBQUwsR0FBZ0IzeUIsU0FBU0MsYUFBVCxDQUF1QixNQUF2QixDQUFoQjtBQUNBLFdBQUsweUIsUUFBTCxDQUFjenlCLFNBQWQsR0FBMEIsU0FBUyxLQUFLa3hDLE9BQWQsR0FBd0IsV0FBbEQ7QUFDQSxXQUFLemUsUUFBTCxDQUFjdG1CLFNBQWQsR0FBMEIsS0FBSzVWLE9BQUwsQ0FBYWs4QixRQUF2QztBQUNBLFdBQUsyZSxRQUFMLENBQWNsbEMsV0FBZCxDQUEwQixLQUFLdW1CLFFBQS9CO0FBQ0E7QUFDQWtmLHVCQUFpQjd4QyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWpCO0FBQ0E0eEMscUJBQWUzeEMsU0FBZixHQUEyQkMsd0VBQVlBLENBQUM4bkIsT0FBYixHQUF1QixHQUF2QixHQUE2QixNQUE3QixHQUFzQyxLQUFLbXBCLE9BQTNDLEdBQXFELFlBQWhGO0FBQ0EsV0FBS0UsUUFBTCxDQUFjbGxDLFdBQWQsQ0FBMEJ5bEMsY0FBMUI7O0FBRUEsVUFBSSxLQUFLcDdDLE9BQUwsQ0FBYW84QixTQUFiLEtBQTJCLE1BQS9CLEVBQXVDO0FBQ3JDO0FBQ0FtZixxQkFBYWh5QyxTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWI7QUFDQSt4QyxtQkFBVzl4QyxTQUFYLEdBQXVCQyx3RUFBWUEsQ0FBQzRxQixhQUFwQztBQUNBaW5CLG1CQUFXdGlCLEtBQVgsR0FBbUJqQixjQUFjMVgsSUFBakM7QUFDQXRjLFVBQUV1M0MsVUFBRixFQUFjL2dCLEtBQWQsQ0FBb0IsVUFBVTFCLEtBQVYsRUFBaUI7QUFDbkNBLGdCQUFNOFksY0FBTjtBQUNBenhDLGVBQUtrN0IsS0FBTCxDQUFXLElBQVg7QUFDQSxpQkFBTyxLQUFQO0FBQ0QsU0FKRDtBQUtBK2YsdUJBQWV6bEMsV0FBZixDQUEyQjRsQyxVQUEzQjtBQUNEOztBQUVEO0FBQ0FGLG9CQUFjOXhDLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBZDtBQUNBNnhDLGtCQUFZNXhDLFNBQVosR0FBd0IsU0FBUyxLQUFLa3hDLE9BQWQsR0FBd0IsUUFBaEQ7QUFDQVUsa0JBQVlwaUIsS0FBWixHQUFvQmpCLGNBQWM5TyxLQUFsQztBQUNBbGxCLFFBQUVxM0MsV0FBRixFQUFlN2dCLEtBQWYsQ0FBcUIsVUFBVTFCLEtBQVYsRUFBaUI7QUFDcENBLGNBQU04WSxjQUFOO0FBQ0F6eEMsYUFBS2s3QixLQUFMO0FBQ0EsZUFBTyxLQUFQO0FBQ0QsT0FKRDtBQUtBK2YscUJBQWV6bEMsV0FBZixDQUEyQjBsQyxXQUEzQjs7QUFFQTtBQUNBLFdBQUtyNkMsT0FBTCxHQUFlLElBQUkrNkMsdUVBQUosQ0FBWTtBQUN6QjFpQixnQkFBUSxLQUFLd0QsZ0JBRFk7QUFFekJwekIsbUJBQVdDLHdFQUFZQSxDQUFDa29CO0FBRkMsT0FBWixDQUFmOztBQUtBO0FBQ0E7QUFDQTtBQUNBNXRCLFFBQUUsS0FBSytrQyxTQUFQLEVBQWtCdHVCLEVBQWxCLENBQXFCLCtCQUFyQixFQUFzRCxVQUFVcWUsS0FBVixFQUFpQjtBQUNyRUEsY0FBTUMsZUFBTjtBQUNELE9BRkQ7O0FBSUE7QUFDQSxXQUFLLzRCLE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCc1QsRUFBL0IsQ0FBa0MsYUFBbEMsRUFBaUQsS0FBS3NwQixNQUF0RCxFQUE4RCxJQUE5RDs7QUFFQTtBQUNBLFVBQUssS0FBSy9qQyxPQUFMLENBQWF5NkMsV0FBZCxJQUErQixLQUFLejZDLE9BQUwsQ0FBYXc3QyxPQUFiLElBQXlCejVDLDhEQUFLQSxDQUFDaTZDLFFBQU4sQ0FBZSxLQUFLaDhDLE9BQUwsQ0FBYTJCLElBQTVCLEtBQXFDLEdBQWpHLEVBQXdHO0FBQ3RHLGFBQUt3NUIsSUFBTDtBQUNEOztBQUVELGFBQU8sSUFBUDtBQUNELEtBOUxtRixFQThMakY7O0FBRUg7Ozs7Ozs7O0FBUUE0SSxZQUFRLGdCQUFVa1ksU0FBVixFQUFxQjs7QUFFM0IsVUFBSTk3QyxJQUFKLEVBQ0krN0MsMkJBREosRUFFSUMsb0JBRko7O0FBSUFoOEMsYUFBTyxJQUFQOztBQUVBOzs7OztBQUtBKzdDLG9DQUE4Qmw0QyxFQUFFLEtBQUs0MkMsT0FBUCxFQUFnQnQzQixNQUFoQixNQUE0QnRmLEVBQUUsS0FBSzYyQyxRQUFQLEVBQWlCdUIsV0FBakIsQ0FBNkIsSUFBN0IsSUFBcUNwNEMsRUFBRSxLQUFLMnVDLFNBQVAsRUFBa0J5SixXQUFsQixDQUE4QixJQUE5QixDQUFqRSxDQUE5QjtBQUNBLFVBQUksS0FBS3A4QyxPQUFMLElBQWdCLEtBQUtBLE9BQUwsQ0FBYW84QixTQUE3QixJQUEwQyxLQUFLcDhCLE9BQUwsQ0FBYW84QixTQUFiLElBQTBCLFdBQXBFLElBQW1GLEtBQUtwOEIsT0FBTCxDQUFhbzhCLFNBQWIsS0FBMkIsTUFBbEgsRUFBMEg7QUFDeEgsWUFBSSxTQUFTLEtBQUtwOEIsT0FBTCxDQUFhRCxhQUFiLENBQTJCLFdBQVcsS0FBSzI2QyxVQUEzQyxDQUFiLEVBQXFFO0FBQ25FeUIsaUNBQXVCLENBQXZCO0FBQ0Q7QUFDRjs7QUFFRDtBQUNBLFVBQUksS0FBSzllLFVBQVQsRUFBcUI7QUFDakIsWUFBSSxLQUFLQSxVQUFMLENBQWdCem5CLFNBQXBCLEVBQStCO0FBQzNCO0FBQ0EsZUFBS3luQixVQUFMLENBQWdCeDZCLEtBQWhCLENBQXNCa04sT0FBdEIsR0FBZ0MsRUFBaEM7QUFDQW1zQyx5Q0FBK0JsNEMsRUFBRSxLQUFLcTVCLFVBQVAsRUFBbUIrZSxXQUFuQixDQUErQixJQUEvQixDQUEvQjtBQUNILFNBSkQsTUFJTztBQUNILGVBQUsvZSxVQUFMLENBQWdCeDZCLEtBQWhCLENBQXNCa04sT0FBdEIsR0FBZ0MsTUFBaEM7QUFDSDtBQUNKOztBQUVEO0FBQ0EsVUFBSSxLQUFLK3FDLGFBQVQsRUFBd0I7QUFDcEIsWUFBSSxLQUFLQSxhQUFMLENBQW1CbGxDLFNBQXZCLEVBQWtDO0FBQzlCO0FBQ0EsZUFBS2tsQyxhQUFMLENBQW1CajRDLEtBQW5CLENBQXlCa04sT0FBekIsR0FBbUMsRUFBbkM7QUFDQW1zQyx5Q0FBK0JsNEMsRUFBRSxLQUFLODJDLGFBQVAsRUFBc0JzQixXQUF0QixDQUFrQyxJQUFsQyxDQUEvQjtBQUNILFNBSkQsTUFJTztBQUNILGVBQUt0QixhQUFMLENBQW1CajRDLEtBQW5CLENBQXlCa04sT0FBekIsR0FBbUMsTUFBbkM7QUFDSDtBQUNKOztBQUVEO0FBQ0EvTCxRQUFFLEtBQUs2NEIsZ0JBQVAsRUFBeUJ1ZixXQUF6QixDQUFxQ0YsMkJBQXJDOztBQUVBO0FBQ0EsVUFBSSxLQUFLbDhDLE9BQVQsRUFBa0I7QUFDZCxZQUFJLEtBQUtBLE9BQUwsQ0FBYUQsYUFBYixDQUEyQixXQUFXLEtBQUsyNkMsVUFBM0MsTUFBMkQsSUFBL0QsRUFBcUU7QUFDakU7QUFDQXlCLGlDQUF1QixLQUFLcFQsU0FBTCxDQUFlQyxXQUF0QztBQUNBLGVBQUtocEMsT0FBTCxDQUFhRCxhQUFiLENBQTJCLEtBQUtDLE9BQUwsQ0FBYW84QixTQUFiLEdBQXlCLGVBQXBELEVBQXFFenpCLE9BQXJFLENBQTZFLFVBQVUzQixPQUFWLEVBQW1CO0FBQzVGaEQsY0FBRWdELE9BQUYsRUFBV2dXLEdBQVgsQ0FBZTdjLEtBQUtILE9BQUwsQ0FBYW84QixTQUE1QixFQUF1QytmLG9CQUF2QztBQUNILFdBRkQ7O0FBSUE7QUFDQSxjQUFJLEtBQUtuOEMsT0FBTCxDQUFhbzhCLFNBQWIsS0FBMkIsT0FBL0IsRUFBd0M7QUFDcENwNEIsY0FBRSxLQUFLZ0QsT0FBUCxFQUFnQmdXLEdBQWhCLENBQW9CLEtBQUtoZCxPQUFMLENBQWFvOEIsU0FBakMsRUFBNEMrZixvQkFBNUM7QUFDSDtBQUVKO0FBQ0o7QUFFRixLQXRRbUYsRUFzUWpGOztBQUVIOzs7Ozs7QUFNQWhoQixVQUFNLGNBQVUzYixXQUFWLEVBQXVCO0FBQzNCLFVBQUkyOEIsb0JBQUosRUFDSWg4QyxJQURKOztBQUdBQSxhQUFPLElBQVA7O0FBRUE7QUFDQSxVQUFJLENBQUMsS0FBS3UvQixXQUFWLEVBQXVCO0FBQ3JCLFlBQUksT0FBTyxLQUFLbkQsSUFBWixLQUFxQixVQUF6QixFQUFxQztBQUNuQyxlQUFLbUQsV0FBTCxHQUFtQixLQUFLbkQsSUFBTCxDQUFVL2MsV0FBVixDQUFuQjtBQUNELFNBRkQsTUFFTztBQUNMLGVBQUtrZ0IsV0FBTCxHQUFtQixJQUFuQjtBQUNEO0FBQ0Y7O0FBRUQ7QUFDQSxVQUFJLE9BQU8sS0FBS0csZUFBWixLQUFnQyxVQUFwQyxFQUFnRDtBQUM5QyxhQUFLQSxlQUFMO0FBQ0Q7O0FBRURzYyw2QkFBdUIsS0FBS3BULFNBQUwsQ0FBZUMsV0FBdEM7O0FBRUEsVUFBSSxLQUFLaHBDLE9BQUwsQ0FBYXc2QyxNQUFqQixFQUF5QjtBQUN2QjtBQUNBMTVDLGdCQUFRQyxJQUFSLENBQWEsOERBQWI7QUFDRCxPQUhELE1BR087QUFDTCxZQUFJLEtBQUtmLE9BQUwsQ0FBYUQsYUFBYixDQUEyQixXQUFXLEtBQUsyNkMsVUFBM0MsQ0FBSixFQUE0RDtBQUMxRCxjQUFJLEtBQUsxNkMsT0FBTCxDQUFhRCxhQUFiLENBQTJCLFdBQVcsS0FBSzI2QyxVQUEzQyxNQUEyRCxJQUEvRCxFQUFxRTtBQUNuRSxtQkFBTyxLQUFQO0FBQ0Q7QUFDRDtBQUNBLGVBQUsxNkMsT0FBTCxDQUFhRCxhQUFiLENBQTJCLFdBQVcsS0FBSzI2QyxVQUEzQyxFQUF1RHJmLEtBQXZELENBQTZELElBQTdELEVBQW1FLElBQW5FO0FBQ0QsU0FORCxNQU1PO0FBQ0w7QUFDQSxlQUFLcjdCLE9BQUwsQ0FBYUQsYUFBYixDQUEyQixLQUFLQyxPQUFMLENBQWFvOEIsU0FBYixHQUF5QixlQUFwRCxFQUFxRXp6QixPQUFyRSxDQUE2RSxVQUFVM0IsT0FBVixFQUFtQjtBQUM5RmhELGNBQUVnRCxPQUFGLEVBQVdnVyxHQUFYLENBQWU3YyxLQUFLSCxPQUFMLENBQWFvOEIsU0FBNUIsRUFBdUMrZixvQkFBdkM7QUFDRCxXQUZEO0FBR0Q7O0FBRURuNEMsVUFBRSxLQUFLK2tDLFNBQVAsRUFBa0JsUSxXQUFsQixDQUE4Qm52Qix3RUFBWUEsQ0FBQ3dmLEtBQTNDLEVBQWtEcE0sUUFBbEQsQ0FBMkRwVCx3RUFBWUEsQ0FBQ3luQixJQUF4RSxFQUE4RW5VLEdBQTlFLENBQWtGLEtBQUtoZCxPQUFMLENBQWFvOEIsU0FBL0YsRUFBMEcsQ0FBMUc7QUFDQSxZQUFJLEtBQUtwOEIsT0FBTCxDQUFhbzhCLFNBQWIsS0FBMkIsTUFBL0IsRUFBdUM7QUFDckNwNEIsWUFBRSxLQUFLZ0QsT0FBUCxFQUFnQjZ4QixXQUFoQixDQUE0Qm52Qix3RUFBWUEsQ0FBQ3dmLEtBQXpDLEVBQWdEcE0sUUFBaEQsQ0FBeURwVCx3RUFBWUEsQ0FBQ3luQixJQUF0RTtBQUNELFNBRkQsTUFFTztBQUNMbnRCLFlBQUUsS0FBS2dELE9BQVAsRUFBZ0I2eEIsV0FBaEIsQ0FBNEJudkIsd0VBQVlBLENBQUN3ZixLQUF6QyxFQUFnRHBNLFFBQWhELENBQXlEcFQsd0VBQVlBLENBQUN5bkIsSUFBdEUsRUFBNEVuVSxHQUE1RSxDQUFnRixLQUFLaGQsT0FBTCxDQUFhbzhCLFNBQTdGLEVBQXdHK2Ysb0JBQXhHO0FBQ0Q7O0FBRUQ7QUFDQSxhQUFLbjhDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQixXQUFXLEtBQUsyNkMsVUFBM0MsSUFBeUQsSUFBekQ7O0FBRUE7QUFDQSxZQUFJLEtBQUtPLFVBQVQsRUFBcUI7QUFDbkIsZUFBS0EsVUFBTCxDQUFnQnZlLFFBQWhCO0FBQ0Q7O0FBRUQsWUFBSTE0QixFQUFFLEtBQUsydUMsU0FBUCxFQUFrQnR5QixRQUFsQixDQUEyQjNXLHdFQUFZQSxDQUFDd2YsS0FBeEMsQ0FBSixFQUFvRDtBQUNsRGxsQixZQUFFLEtBQUsydUMsU0FBUCxFQUFrQjlaLFdBQWxCLENBQThCbnZCLHdFQUFZQSxDQUFDd2YsS0FBM0MsRUFBa0RwTSxRQUFsRCxDQUEyRHBULHdFQUFZQSxDQUFDeW5CLElBQXhFO0FBQ0Q7O0FBRUQsWUFBSW50QixFQUFFLEtBQUs4MkMsYUFBUCxFQUFzQno2QixRQUF0QixDQUErQjNXLHdFQUFZQSxDQUFDd2YsS0FBNUMsQ0FBSixFQUF3RDtBQUN0RGxsQixZQUFFLEtBQUs4MkMsYUFBUCxFQUFzQmppQixXQUF0QixDQUFrQ252Qix3RUFBWUEsQ0FBQ3dmLEtBQS9DLEVBQXNEcE0sUUFBdEQsQ0FBK0RwVCx3RUFBWUEsQ0FBQ3luQixJQUE1RTtBQUNEOztBQUVEO0FBQ0FudEIsVUFBRSxLQUFLK2tDLFNBQVAsRUFBa0IvckIsR0FBbEIsQ0FBc0IsWUFBdEIsRUFBb0MsU0FBcEM7O0FBRUEsYUFBSyttQixNQUFMO0FBQ0EsWUFBSSxLQUFLL2pDLE9BQUwsQ0FBYXc3QyxPQUFqQixFQUEwQjtBQUN4Qno1Qyx3RUFBS0EsQ0FBQ3M2QyxVQUFOLENBQWlCLEtBQUtyOEMsT0FBTCxDQUFhMkIsSUFBOUIsRUFBb0MsR0FBcEM7QUFDRDs7QUFFRDtBQUNBLFlBQUksT0FBTyxLQUFLMjZDLGdCQUFaLEtBQWlDLFVBQXJDLEVBQWlEO0FBQy9DLGVBQUtBLGdCQUFMO0FBQ0Q7O0FBRUQsZUFBTyxJQUFQO0FBQ0Q7QUFDRCxhQUFPLEtBQVA7QUFDRCxLQTVWbUYsRUE0VmpGOztBQUVIQyxZQUFRLGtCQUFZO0FBQ2xCLGFBQVEsS0FBS3Y4QyxPQUFMLENBQWFELGFBQWIsQ0FBMkIsV0FBVyxLQUFLMjZDLFVBQTNDLEtBQTBELEtBQUsxNkMsT0FBTCxDQUFhRCxhQUFiLENBQTJCLFdBQVcsS0FBSzI2QyxVQUEzQyxNQUEyRCxJQUE3SDtBQUNELEtBaFdtRjs7QUFrV3BGOzs7Ozs7Ozs7O0FBVUFyZixXQUFPLGVBQVVtaEIsUUFBVixFQUFvQkMsc0JBQXBCLEVBQTRDO0FBQ2pELFVBQUlOLG9CQUFKLEVBQ0kvZixTQURKOztBQUdBQSxrQkFBWSxLQUFLcDhCLE9BQUwsQ0FBYW84QixTQUF6Qjs7QUFFQSxVQUFJb2dCLFFBQUosRUFBZTtBQUNiLFlBQUksT0FBTyxLQUFLeE8sZUFBWixLQUFnQyxVQUFwQyxFQUFnRDtBQUM5QyxlQUFLQSxlQUFMO0FBQ0Q7QUFDRixPQUpELE1BSU87QUFDTCxZQUFJLE9BQU8sS0FBS3JPLGdCQUFaLEtBQWlDLFVBQXJDLEVBQWlEO0FBQy9DLGVBQUtBLGdCQUFMO0FBQ0Q7QUFDRjs7QUFFRHdjLDZCQUF1QixLQUFLcFQsU0FBTCxDQUFlQyxXQUF0Qzs7QUFFQSxVQUFJLEtBQUtocEMsT0FBTCxDQUFhdzZDLE1BQWpCLEVBQXlCO0FBQ3ZCO0FBQ0ExNUMsZ0JBQVFDLElBQVIsQ0FBYSw4REFBYjtBQUNELE9BSEQsTUFHTztBQUNMLFlBQUksS0FBS2YsT0FBTCxDQUFhRCxhQUFiLENBQTJCLFdBQVcsS0FBSzI2QyxVQUEzQyxNQUEyRCxJQUEvRCxFQUFxRTtBQUNuRTU1QyxrQkFBUUMsSUFBUixDQUFhLFVBQVUsS0FBS2YsT0FBTCxDQUFhMkIsSUFBdkIsR0FBOEIsWUFBOUIsR0FBNkMsS0FBSzNCLE9BQUwsQ0FBYTJCLElBQTFELEdBQWlFLHNCQUE5RTtBQUNBLGlCQUFPLEtBQVA7QUFDRDtBQUNEcUMsVUFBRSxLQUFLK2tDLFNBQVAsRUFBa0JsUSxXQUFsQixDQUE4Qm52Qix3RUFBWUEsQ0FBQ3luQixJQUEzQyxFQUFpRHJVLFFBQWpELENBQTBEcFQsd0VBQVlBLENBQUN3ZixLQUF2RSxFQUE4RWxNLEdBQTlFLENBQWtGb2YsU0FBbEYsRUFBNkYsQ0FBQytmLG9CQUE5RjtBQUNBbjRDLFVBQUUsS0FBS2dELE9BQVAsRUFBZ0I2eEIsV0FBaEIsQ0FBNEJudkIsd0VBQVlBLENBQUN5bkIsSUFBekMsRUFBK0NyVSxRQUEvQyxDQUF3RHBULHdFQUFZQSxDQUFDd2YsS0FBckUsRUFBNEVsTSxHQUE1RSxDQUFnRm9mLFNBQWhGLEVBQTJGLENBQTNGOztBQUVBLFlBQUksQ0FBQ3FnQixzQkFBTCxFQUE2QjtBQUMzQjtBQUNBLGVBQUt6OEMsT0FBTCxDQUFhRCxhQUFiLENBQTJCcThCLFlBQVksZUFBdkMsRUFBd0R6ekIsT0FBeEQsQ0FBZ0UsVUFBVTNCLE9BQVYsRUFBbUI7QUFDakZoRCxjQUFFZ0QsT0FBRixFQUFXZ1csR0FBWCxDQUFlb2YsU0FBZixFQUEwQixDQUExQjtBQUNELFdBRkQ7QUFHRDs7QUFFRDtBQUNBcDRCLFVBQUUsS0FBSytrQyxTQUFQLEVBQWtCL3JCLEdBQWxCLENBQXNCLFlBQXRCLEVBQW9DLFFBQXBDOztBQUVBO0FBQ0EsWUFBSSxLQUFLaStCLFVBQVQsRUFBcUI7QUFDbkIsZUFBS0EsVUFBTCxDQUFnQmhYLFVBQWhCLENBQTJCLElBQTNCO0FBQ0Q7O0FBRUQ7QUFDQSxhQUFLamtDLE9BQUwsQ0FBYUQsYUFBYixDQUEyQixXQUFXLEtBQUsyNkMsVUFBM0MsSUFBeUQsS0FBekQ7O0FBRUEsWUFBSSxLQUFLMTZDLE9BQUwsQ0FBYXc3QyxPQUFqQixFQUEwQjtBQUN0Qno1Qyx3RUFBS0EsQ0FBQ3M2QyxVQUFOLENBQWlCLEtBQUtyOEMsT0FBTCxDQUFhMkIsSUFBOUIsRUFBb0MsR0FBcEM7QUFDSDtBQUNELGVBQU8sSUFBUDtBQUNEO0FBQ0QsYUFBTyxLQUFQO0FBQ0QsS0FqYW1GLEVBaWFqRjs7QUFFSDs7Ozs7QUFLQThNLFlBQVEsZ0JBQVUrdEMsUUFBVixFQUFvQjtBQUMxQixVQUFJbEIsZUFBSjtBQUNBQSx3QkFBa0J2NUMsOERBQUtBLENBQUMwNUMscUJBQU4sQ0FBNEIsS0FBS3o3QyxPQUFMLENBQWEyQixJQUF6QyxDQUFsQjtBQUNBLFVBQUksS0FBSzNCLE9BQUwsQ0FBYUQsYUFBYixDQUEyQixXQUFXLEtBQUsyNkMsVUFBM0MsTUFBMkQsSUFBL0QsRUFBcUU7QUFDbkUsZUFBTyxLQUFLcmYsS0FBTCxDQUFXbWhCLFFBQVgsQ0FBUDtBQUNEO0FBQ0QsYUFBTyxLQUFLcmhCLElBQUwsRUFBUDtBQUNELEtBL2FtRixFQSthakY7O0FBRUg7Ozs7Ozs7O0FBUUF1aEIsZ0JBQVksb0JBQVVsOUIsV0FBVixFQUF1Qjs7QUFFakMsVUFBSXhmLE9BQUosRUFDSW00QixNQURKOztBQUdBbjRCLGdCQUFVZ0UsRUFBRUgsTUFBRixDQUFTO0FBQ2pCOE4sZUFBT2UsU0FEVTtBQUVqQjhsQixrQkFBVTlsQixTQUZPO0FBR2pCakosbUJBQVcsRUFITTtBQUlqQjR2QixnQkFBUTNtQixTQUpTO0FBS2pCaXFDLHFCQUFhanFDO0FBTEksT0FBVCxFQU1QOE0sV0FOTyxDQUFWOztBQVFBLFVBQUl4ZixRQUFReUosU0FBWixFQUF1QjtBQUNyQnpKLGdCQUFReUosU0FBUixHQUFvQixNQUFNekosUUFBUXlKLFNBQWxDO0FBQ0Q7O0FBRUQwdUIsZUFBUzV1QixTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQVQ7QUFDQTJ1QixhQUFPMXVCLFNBQVAsR0FBbUIsU0FBUyxLQUFLekosT0FBTCxDQUFhMkIsSUFBdEIsR0FBNkIsU0FBN0IsR0FBeUMzQixRQUFReUosU0FBcEU7QUFDQSxVQUFHekosUUFBUThCLEVBQVgsRUFBZTtBQUNicTJCLGVBQU9yMkIsRUFBUCxHQUFZOUIsUUFBUThCLEVBQXBCO0FBQ0Q7O0FBRUQsVUFBSSxPQUFPOUIsUUFBUXc0QixRQUFmLEtBQTRCLFFBQWhDLEVBQTBDO0FBQ3hDTCxlQUFPYyxLQUFQLEdBQWVqNUIsUUFBUXc0QixRQUF2QjtBQUNEOztBQUVELFVBQUksT0FBT3g0QixRQUFRMlIsS0FBZixLQUF5QixRQUE3QixFQUF1QztBQUNyQ3dtQixlQUFPdmlCLFNBQVAsR0FBbUI1VixRQUFRMlIsS0FBM0I7QUFDRCxPQUZELE1BRU8sSUFBSSxRQUFPM1IsUUFBUTJSLEtBQWYsTUFBeUIsUUFBN0IsRUFBdUM7QUFDNUN3bUIsZUFBT3hpQixXQUFQLENBQW1CM1YsUUFBUTJSLEtBQTNCO0FBQ0Q7O0FBRUQsVUFBSSxPQUFPM1IsUUFBUTI4QyxXQUFmLEtBQStCLFVBQW5DLEVBQStDO0FBQzdDMzRDLFVBQUVtMEIsTUFBRixFQUFVcUMsS0FBVixDQUFnQixZQUFZO0FBQzFCLGNBQUk7QUFDRixpQkFBS3hCLElBQUw7QUFDRCxXQUZELENBRUUsT0FBT25qQixDQUFQLEVBQVU7QUFDVi9VLG9CQUFRQyxJQUFSLENBQWE4VSxFQUFFNmxDLE9BQWY7QUFDRDtBQUNEMTdDLGtCQUFRMjhDLFdBQVI7QUFDRCxTQVBEO0FBUUQ7O0FBRUQsVUFBSTM4QyxRQUFRcTVCLE1BQVosRUFBb0I7QUFDbEJyMUIsVUFBRWhFLFFBQVFxNUIsTUFBVixFQUFrQnVpQixNQUFsQixDQUF5QnpqQixNQUF6QjtBQUNEOztBQUVELGFBQU9BLE1BQVA7QUFDRCxLQTFlbUYsRUEwZWpGOztBQUVIOzs7Ozs7QUFNQTBqQixnQkFBWSxvQkFBVXI4QixXQUFWLEVBQXVCOztBQUVqQyxVQUFJeGYsT0FBSixFQUNJbzlCLE9BREosRUFFSXAyQixPQUZKOztBQUlBaEgsZ0JBQVVnRSxFQUFFSCxNQUFGLENBQVM7QUFDakIrTCxjQUFNLEtBRFc7QUFFakJuRyxtQkFBVyxFQUZNO0FBR2pCNHZCLGdCQUFRM21CO0FBSFMsT0FBVCxFQUlQOE0sV0FKTyxDQUFWOztBQU1BO0FBQ0EsVUFBSTtBQUNGNGQsa0JBQVU3ekIsU0FBU0MsYUFBVCxDQUF1QnhKLFFBQVE0UCxJQUEvQixDQUFWO0FBQ0QsT0FGRCxDQUVFLE9BQU9pRyxDQUFQLEVBQVU7QUFDVi9VLGdCQUFRQyxJQUFSLENBQWEsNkJBQTZCZixRQUFRNFAsSUFBckMsR0FBNEMsNEJBQXpEO0FBQ0EsZUFBTyxLQUFQO0FBQ0Q7O0FBRUR3dEIsY0FBUTN6QixTQUFSLEdBQW9CekosUUFBUXlKLFNBQTVCOztBQUVBO0FBQ0EsVUFBSXpKLFFBQVFxNUIsTUFBWixFQUFvQjtBQUNsQixZQUFJO0FBQ0ZyNUIsa0JBQVFxNUIsTUFBUixDQUFlMWpCLFdBQWYsQ0FBMkJ5bkIsT0FBM0I7QUFDRCxTQUZELENBRUUsT0FBT3ZuQixDQUFQLEVBQVU7QUFDVi9VLGtCQUFRQyxJQUFSLENBQWE4VSxFQUFFNmxDLE9BQWY7QUFDRDtBQUNGOztBQUVEdGUsY0FBUXdmLFVBQVIsR0FBcUIsWUFBWTtBQUMvQixlQUFPNTFDLFdBQVcsS0FBbEI7QUFDRCxPQUZEOztBQUlBbzJCLGNBQVFOLFVBQVIsR0FBcUIsVUFBVStmLFVBQVYsRUFBc0I7QUFDekMsWUFBSUEsY0FBYyxRQUFPQSxVQUFQLHlDQUFPQSxVQUFQLE9BQXNCLFFBQXhDLEVBQWtEO0FBQ2hELGNBQUksRUFBRTcxQyxXQUFXQSxZQUFZNjFDLFVBQXpCLENBQUosRUFBMEM7QUFDeEMsZ0JBQUk3MUMsT0FBSixFQUFhO0FBQ1gsbUJBQUt3a0MsV0FBTCxDQUFpQnhrQyxPQUFqQjtBQUNEO0FBQ0QsaUJBQUsyTyxXQUFMLENBQWlCa25DLFVBQWpCO0FBQ0E3MUMsc0JBQVU2MUMsVUFBVjtBQUNEO0FBQ0Y7QUFDRixPQVZEOztBQWFBO0FBQ0EsV0FBSzlCLFFBQUwsQ0FBYzk0QyxJQUFkLENBQW1CbTdCLE9BQW5CO0FBQ0EsYUFBT0EsT0FBUDtBQUNELEtBcmlCbUYsRUFxaUJqRjs7QUFFSDs7Ozs7O0FBTUFKLGFBQVMsaUJBQVVoOUIsT0FBVixFQUFtQjg4QyxhQUFuQixFQUFrQzs7QUFFekMsVUFBSTM4QyxJQUFKLEVBQ0k0OEMsU0FESixFQUVJQyxzQkFGSixFQUdJNWlCLE9BSEosRUFJSXZ5QixJQUpKOztBQU1BMUgsYUFBTyxJQUFQO0FBQ0E0OEMsa0JBQVlELGlCQUFpQixJQUE3Qjs7QUFFQTk4QyxnQkFBVWdFLEVBQUVILE1BQUYsQ0FBUztBQUNqQjtBQUNBbzVCLHVCQUFldnFCLFNBRkUsRUFFUztBQUMxQnlxQix5QkFBaUIsRUFIQSxFQUdJO0FBQ3JCTyxzQkFBY2hyQixTQUpHO0FBS2pCa3JCLDBCQUFrQmxyQixTQUxEO0FBTWpCbXJCLDRCQUFvQm5yQjtBQU5ILE9BQVQsRUFPUDFTLE9BUE8sQ0FBVjs7QUFTQSxVQUFJLE9BQU9BLFFBQVEyQixJQUFmLEtBQXdCLFFBQTVCLEVBQXNDO0FBQ3BDYixnQkFBUUMsSUFBUixDQUFhLHNEQUFiO0FBQ0EsZUFBTyxLQUFQO0FBQ0Q7O0FBRUQ4RyxhQUFPLEVBQVA7O0FBRUFBLFdBQUs2M0IsV0FBTCxHQUFtQixLQUFuQjtBQUNBNzNCLFdBQUtvMUMsTUFBTCxHQUFjLEtBQWQ7O0FBRUFwMUMsV0FBSzYwQixRQUFMLEdBQWdCLFVBQVV3Z0IsaUJBQVYsRUFBNkI7QUFDM0MsWUFBSTc3QyxDQUFKOztBQUVBLFlBQUlyQixRQUFRaTlCLGFBQVIsQ0FBc0JDLFlBQTFCLEVBQXdDO0FBQ3BDLzhCLGVBQUsyN0MsZUFBTCxDQUFxQmxtQyxTQUFyQixHQUFpQzVWLFFBQVFpOUIsYUFBUixDQUFzQnpFLFFBQXZEO0FBQ0g7O0FBRUQ7QUFDQSxZQUFJMGtCLHFCQUFxQixDQUFDLzhDLEtBQUtvOEMsTUFBTCxFQUExQixFQUF5QztBQUN2Q3A4QyxlQUFLZzdCLElBQUw7QUFDRDs7QUFFRDtBQUNBLFlBQUksUUFBTzRoQixVQUFVOUIsVUFBakIsTUFBZ0MsUUFBaEMsSUFBNEM4QixVQUFVOUIsVUFBVixLQUF5QnB6QyxJQUF6RSxFQUErRTtBQUM3RWsxQyxvQkFBVTlCLFVBQVYsQ0FBcUJoWCxVQUFyQjtBQUNEO0FBQ0Q4WSxrQkFBVTlCLFVBQVYsR0FBdUJwekMsSUFBdkI7O0FBRUE7QUFDQSxZQUFJQSxLQUFLb3pDLFVBQVQsRUFBcUI7QUFDbkJwekMsZUFBS296QyxVQUFMLENBQWdCdmUsUUFBaEI7QUFDRDs7QUFFRDtBQUNBLFlBQUksQ0FBQzcwQixLQUFLNjNCLFdBQVYsRUFBdUI7QUFDckIsY0FBSSxPQUFPMS9CLFFBQVEwOUIsWUFBZixLQUFnQyxVQUFwQyxFQUFnRDtBQUM5QzcxQixpQkFBSzYzQixXQUFMLEdBQW1CMS9CLFFBQVEwOUIsWUFBUixFQUFuQjtBQUNELFdBRkQsTUFFTztBQUNMNzFCLGlCQUFLNjNCLFdBQUwsR0FBbUIsSUFBbkI7QUFDRDtBQUNGOztBQUVEO0FBQ0EsWUFBSTEvQixRQUFRbTlCLGVBQVIsSUFBMkJuOUIsUUFBUW05QixlQUFSLENBQXdCdDdCLE1BQXhCLEdBQWlDLENBQWhFLEVBQW1FO0FBQ2pFLGVBQUtSLElBQUksQ0FBVCxFQUFZQSxJQUFJckIsUUFBUW05QixlQUFSLENBQXdCdDdCLE1BQXhDLEVBQWdEUixLQUFLLENBQXJELEVBQXdEO0FBQ3REckIsb0JBQVFtOUIsZUFBUixDQUF3Qjk3QixDQUF4QixFQUEyQis3QixPQUEzQixDQUFtQ04sVUFBbkMsQ0FBOEM5OEIsUUFBUW05QixlQUFSLENBQXdCOTdCLENBQXhCLEVBQTJCMkYsT0FBekU7QUFDRDtBQUNGOztBQUVEO0FBQ0EsWUFBSW96QixPQUFKLEVBQWE7QUFDWHAyQixZQUFFbzJCLE9BQUYsRUFBV3RkLFFBQVgsQ0FBb0IsWUFBcEI7QUFDRDs7QUFFRDtBQUNBLFlBQUksT0FBTzljLFFBQVE0OUIsZ0JBQWYsS0FBb0MsVUFBeEMsRUFBb0Q7QUFDbEQsY0FBSSxDQUFDNTlCLFFBQVE0OUIsZ0JBQVIsQ0FBeUIvMUIsS0FBS28xQyxNQUE5QixDQUFMLEVBQTRDO0FBQzFDLG1CQUFPLEtBQVA7QUFDRDtBQUNGOztBQUVEcDFDLGFBQUtvMUMsTUFBTCxHQUFjLEtBQWQ7QUFDQTk4QyxhQUFLNGpDLE1BQUw7QUFDQSxlQUFPLElBQVA7QUFDRCxPQXRERDs7QUF3REFsOEIsV0FBS284QixVQUFMLEdBQWtCLFVBQVVrWixTQUFWLEVBQXFCOztBQUVyQ3QxQyxhQUFLbzFDLE1BQUwsR0FBY0UsYUFBYSxLQUEzQjs7QUFFQSxZQUFJLFFBQU9KLFVBQVU5QixVQUFqQixNQUFnQyxRQUFoQyxJQUE0QzhCLFVBQVU5QixVQUFWLEtBQXlCcHpDLElBQXpFLEVBQStFO0FBQzdFLGNBQUl1eUIsV0FBVyxDQUFDdnlCLEtBQUtvMUMsTUFBckIsRUFBNkI7QUFDM0JqNUMsY0FBRW8yQixPQUFGLEVBQVd2QixXQUFYLENBQXVCLFlBQXZCO0FBQ0Q7O0FBRUQ7QUFDQSxjQUFJaHhCLEtBQUtvekMsVUFBVCxFQUFxQjtBQUNuQnB6QyxpQkFBS296QyxVQUFMLENBQWdCaFgsVUFBaEIsQ0FBMkJwOEIsS0FBS28xQyxNQUFoQztBQUNEOztBQUVEO0FBQ0EsY0FBSSxPQUFPajlDLFFBQVE2OUIsa0JBQWYsS0FBc0MsVUFBMUMsRUFBc0Q7QUFDcEQsbUJBQU83OUIsUUFBUTY5QixrQkFBUixDQUEyQmgyQixLQUFLbzFDLE1BQWhDLENBQVA7QUFDRDtBQUNGOztBQUVELGVBQU8sSUFBUDtBQUNELE9BckJEOztBQXdCQSxVQUFJLFFBQU9qOUMsUUFBUWk5QixhQUFmLE1BQWlDLFFBQXJDLEVBQStDO0FBQzdDajlCLGdCQUFRaTlCLGFBQVIsR0FBd0JqNUIsRUFBRUgsTUFBRixDQUFTO0FBQy9CdzFCLGtCQUFRLEtBQUtpRSxjQURrQjtBQUUvQjlFLG9CQUFVeDRCLFFBQVEyQjtBQUZhLFNBQVQsRUFHckIzQixRQUFRaTlCLGFBSGEsQ0FBeEI7O0FBS0FqOUIsZ0JBQVFpOUIsYUFBUixDQUFzQjBmLFdBQXRCLEdBQW9DOTBDLEtBQUs2MEIsUUFBekM7QUFDQSxZQUFJMThCLFFBQVFpOUIsYUFBUixDQUFzQnh6QixTQUExQixFQUFxQztBQUNuQ3V6QyxtQ0FBeUIsTUFBTWg5QyxRQUFRaTlCLGFBQVIsQ0FBc0J4ekIsU0FBckQ7QUFDRCxTQUZELE1BRU87QUFDTHV6QyxtQ0FBeUIsRUFBekI7QUFDRDtBQUNEaDlDLGdCQUFRaTlCLGFBQVIsQ0FBc0J4ekIsU0FBdEIsR0FBa0NDLHdFQUFZQSxDQUFDNm5CLElBQWIsR0FBb0J5ckIsc0JBQXREO0FBQ0E7QUFDQTVpQixrQkFBVSxLQUFLc2lCLFVBQUwsQ0FBZ0IxOEMsUUFBUWk5QixhQUF4QixDQUFWO0FBQ0Q7O0FBRUQsV0FBSytkLEtBQUwsQ0FBVy80QyxJQUFYLENBQWdCNEYsSUFBaEI7QUFDQSxhQUFPQSxJQUFQO0FBQ0QsS0E5cUJtRixDQThxQmxGOztBQTlxQmtGLEdBQS9DLENBQXZDLENBckVpQixDQXF2QmI7QUFFTCxDQXZ2QkEsRUF1dkJDekgsTUF2dkJELEVBdXZCUyxLQUFLcU0sR0F2dkJkLENBQUQ7O0FBeXZCTyxJQUFJNnZCLFlBQVksS0FBSzd2QixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxDQUFzQnVFLFNBQXRDLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3J4QlA7QUFDQSxLQUFLN3ZCLEdBQUwsR0FBVyxLQUFLQSxHQUFMLElBQVksRUFBdkI7QUFDQSxLQUFLQSxHQUFMLENBQVN5SyxJQUFULEdBQWdCLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULElBQWlCLEVBQWpDO0FBQ0EsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLEdBQXdCLEtBQUt0ckIsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsSUFBeUIsRUFBakQ7O0FBRUEsSUFBSXRyQixNQUFNLEtBQUtBLEdBQWY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQyxXQUFVekksQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7Ozs7OztBQU1BQSxNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJxbEIsU0FBakIsR0FBNkIsVUFBVTU5QixXQUFWLEVBQXVCOztBQUVsRCxTQUFLeGYsT0FBTCxHQUFlZ0UsRUFBRUgsTUFBRixDQUFTO0FBQ3RCczRCLGNBQVEsSUFEYztBQUV0QnFlLGNBQVEsS0FGYztBQUd0QkMsbUJBQWEsS0FIUztBQUl0QjE2QyxxQkFBZTJTLFNBSk87QUFLdEIvUSxZQUFNLFdBTGdCO0FBTXRCeTZCLGlCQUFXLE9BTlc7QUFPdEJpaEIsY0FBUTtBQVBjLEtBQVQsRUFRWjc5QixXQVJZLENBQWY7O0FBVUE7O0FBRUE7QUFDQSxRQUFJLENBQUMsS0FBS3hmLE9BQUwsQ0FBYWs4QixRQUFkLElBQTBCLEtBQUtsOEIsT0FBTCxDQUFhazhCLFFBQWIsQ0FBc0JyNkIsTUFBdEIsS0FBaUMsQ0FBL0QsRUFBa0U7QUFDaEU7QUFDRDs7QUFFRCxTQUFLd04seUJBQUwsR0FBaUMsS0FBS0EseUJBQUwsSUFBa0MsRUFBbkU7O0FBRUE7QUFDQWl0QixrRkFBU0EsQ0FBQ2xELElBQVYsQ0FBZSxJQUFmLEVBQXFCLEtBQUtwNUIsT0FBMUI7QUFDRCxHQXZCRDtBQXdCQXdELEtBQUc4MUIsUUFBSCxDQUFZN3NCLElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQnFsQixTQUE3QixFQUF3QzlnQiw4RUFBeEM7O0FBRUE7QUFDQTd2QixNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJxbEIsU0FBakIsQ0FBMkI3akIsU0FBM0IsR0FBdUN2MUIsRUFBRUgsTUFBRixDQUFTNEksSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCcWxCLFNBQWpCLENBQTJCN2pCLFNBQXBDLEVBQStDOztBQUVwRjs7Ozs7QUFLQWdELFVBQU0sZ0JBQVk7O0FBRWhCLFVBQUkrZ0IsTUFBSjtBQUFBLFVBQ0lDLGVBREo7QUFBQSxVQUVJMTNDLEdBRko7QUFBQSxVQUdJcEQsS0FISjtBQUFBLFVBSUl0QyxJQUpKO0FBQUEsVUFLSXE5QyxRQUxKO0FBQUEsVUFNSUMsdUJBQXVCLEtBTjNCOztBQVFBLFVBQUksS0FBSy9kLFdBQVQsRUFBc0I7QUFDcEIsZUFBTyxJQUFQO0FBQ0Q7O0FBRUR2L0IsYUFBTyxJQUFQOztBQUVBO0FBQ0EsV0FBS3U5QyxPQUFMLEdBQWUsRUFBZjs7QUFFQTtBQUNBRixpQkFBVyxvQkFBVztBQUNwQjtBQUNBLGFBQUszM0MsR0FBTCxJQUFZMUYsS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCRCxLQUEzQixDQUFpQzY5QyxlQUFqQyxDQUFpRGh4QyxTQUE3RCxFQUF3RTtBQUN0RSxjQUFJeE0sS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCRCxLQUEzQixDQUFpQzY5QyxlQUFqQyxDQUFpRGh4QyxTQUFqRCxDQUEyRDVGLGNBQTNELENBQTBFbEIsR0FBMUUsQ0FBSixFQUFvRjtBQUNsRnBELG9CQUFRdEMsS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCRCxLQUEzQixDQUFpQzY5QyxlQUFqQyxDQUFpRGh4QyxTQUFqRCxDQUEyRDlHLEdBQTNELENBQVI7QUFDQSxnQkFBSSxDQUFDcEQsTUFBTXFOLGFBQVgsRUFBMEI7QUFDeEJ5dEMsZ0NBQWtCLElBQWxCO0FBQ0E7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsWUFBSUEsZUFBSixFQUFxQjtBQUNuQjtBQUNBLGNBQUlwOUMsS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCRCxLQUEzQixDQUFpQzY5QyxlQUFqQyxDQUFpRGh4QyxTQUFyRCxFQUFnRTtBQUM5RCxpQkFBSSxJQUFJN0ssRUFBUixJQUFjM0IsS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCRCxLQUEzQixDQUFpQzY5QyxlQUFqQyxDQUFpRGh4QyxTQUEvRCxFQUEwRTtBQUN4RSxrQkFBSXhNLEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQkQsS0FBM0IsQ0FBaUM2OUMsZUFBakMsQ0FBaURoeEMsU0FBakQsQ0FBMkQ3SyxFQUEzRCxFQUErRGlPLE9BQW5FLEVBQTRFO0FBQzFFMHRDLHVDQUF1QixJQUF2QjtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUVEO0FBQ0EsWUFBSXQ5QyxLQUFLSCxPQUFMLENBQWE0OUMsbUJBQWIsSUFBb0NMLGVBQXBDLElBQXVERSxvQkFBM0QsRUFBaUY7QUFDL0V0OUMsZUFBS3U5QyxPQUFMLENBQWFHLGFBQWIsR0FBNkIsSUFBSUMsc0dBQUosQ0FBa0IzOUMsSUFBbEIsQ0FBN0I7QUFDRDs7QUFFRDtBQUNBNEIsc0VBQUtBLENBQUNnQixpQkFBTixDQUF3QjVDLEtBQUtrUCx5QkFBN0I7O0FBR0E7QUFDQTtBQUNBLFlBQUlqQyxPQUFPQyxZQUFQLEtBQXdCcUYsU0FBeEIsSUFBcUMsUUFBT3RGLE9BQU9DLFlBQVAsQ0FBb0Iwd0MscUJBQTNCLE1BQXFELFFBQTlGLEVBQXdHO0FBQ3RHaDhDLHdFQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0JxSyxPQUFPQyxZQUFQLENBQW9CMHdDLHFCQUE1QyxFQUFtRTU5QyxJQUFuRTtBQUNBO0FBQ0EsZUFBS205QyxNQUFMLElBQWVuOUMsS0FBS3U5QyxPQUFwQixFQUE2QjtBQUMzQjtBQUNBLGdCQUFJdjlDLEtBQUt1OUMsT0FBTCxDQUFhMzJDLGNBQWIsQ0FBNEJ1MkMsTUFBNUIsQ0FBSixFQUF5QztBQUN2Q245QyxtQkFBS3U5QyxPQUFMLENBQWFKLE1BQWIsRUFBcUI1Z0IsUUFBckI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQ7QUFDQSxZQUFJdjhCLEtBQUtILE9BQUwsQ0FBYWcrQyx1QkFBakIsRUFBMEM7QUFDeEM3OUMsZUFBS3U5QyxPQUFMLENBQWFPLGlCQUFiLEdBQWlDLElBQUlDLDhHQUFKLENBQXNCLzlDLElBQXRCLENBQWpDO0FBQ0FBLGVBQUt1OUMsT0FBTCxDQUFhTyxpQkFBYixDQUErQnZoQixRQUEvQjtBQUNEO0FBQ0QsWUFBSXY4QixLQUFLdTlDLE9BQUwsQ0FBYUcsYUFBakIsRUFBZ0M7QUFDOUIxOUMsZUFBS3U5QyxPQUFMLENBQWFHLGFBQWIsQ0FBMkJuaEIsUUFBM0I7QUFDRDtBQUNGLE9BckRELENBcEJnQixDQXlFYjs7O0FBR0gsVUFBSSxDQUFDLEtBQUsxOEIsT0FBTCxDQUFhRCxhQUFiLENBQTJCRCxLQUEzQixDQUFpQ21OLGFBQXRDLEVBQXFEO0FBQ25ELGFBQUtqTSxPQUFMLENBQWFvYSxJQUFiO0FBQ0EsYUFBS3BiLE9BQUwsQ0FBYUQsYUFBYixDQUEyQkQsS0FBM0IsQ0FBaUNvTixpQkFBakMsQ0FBbURqTCxJQUFuRCxDQUF3RCxVQUFTa0wsUUFBVCxFQUFtQjtBQUN6RWhOLGVBQUthLE9BQUwsQ0FBYUMsSUFBYjtBQUNBdThDO0FBQ0QsU0FIRDtBQUlELE9BTkQsTUFNTztBQUNMO0FBQ0FBO0FBQ0Q7O0FBRUQsV0FBSzlkLFdBQUwsR0FBbUIsSUFBbkI7O0FBS0EsYUFBTyxJQUFQO0FBQ0QsS0FwR21GLENBb0dsRjs7QUFwR2tGLEdBQS9DLENBQXZDLENBcENpQixDQTBJYjtBQUNMLENBM0lBLEVBMklDdC9CLE1BM0lELEVBMklTcU0sR0EzSVQsQ0FBRDs7QUE2SU8sSUFBSTJ3QyxZQUFZLEtBQUszd0MsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsQ0FBc0JxbEIsU0FBdEMsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxSlA7QUFDQTs7QUFFQSxLQUFLM3dDLEdBQUwsR0FBVyxLQUFLQSxHQUFMLElBQVksRUFBdkI7QUFDQSxLQUFLQSxHQUFMLENBQVN5SyxJQUFULEdBQWdCLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULElBQWlCLEVBQWpDO0FBQ0EsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLEdBQXdCLEtBQUt0ckIsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsSUFBeUIsRUFBakQ7QUFDQSxLQUFLdHJCLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLENBQXNCb21CLGVBQXRCLEdBQXdDLEtBQUsxeEMsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsQ0FBc0JvbUIsZUFBdEIsSUFBeUMsRUFBakY7O0FBRUE7QUFDQTtBQUNBOztBQUVBLElBQUlubUIsZ0JBQWdCLEVBQXBCOztBQUVBLElBQUksT0FBTzd1QixPQUFQLEtBQW1CLFdBQXZCLEVBQW9DO0FBQ2xDLE1BQUlBLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUN6QkQsb0JBQWdCaEgsdUZBQWhCO0FBQ0QsR0FGRCxNQUVPLElBQUk3bkIsUUFBUTh1QixJQUFSLEtBQWlCLElBQXJCLEVBQTJCO0FBQ2hDRCxvQkFBZ0I5Ryx3RkFBaEI7QUFDRCxHQUZNLE1BRUE7QUFDTDtBQUNBOEcsb0JBQWdCaEgsdUZBQWhCO0FBQ0Q7QUFDRjs7QUFFQSxXQUFVaHRCLENBQVYsRUFBYXlJLEdBQWIsRUFBa0I7QUFDakI7O0FBRUE7Ozs7Ozs7QUFNQUEsTUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCb21CLGVBQWpCLENBQWlDRCxpQkFBakMsR0FBcUQsVUFBVTV2QyxTQUFWLEVBQXFCO0FBQ3hFLFFBQUksQ0FBQ0EsU0FBTCxFQUFnQjtBQUNkeE4sY0FBUUMsSUFBUixDQUFhLDBEQUFiO0FBQ0EsYUFBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBSzIrQixXQUFMLEdBQW1CLEtBQW5CO0FBQ0EsU0FBS3YrQixVQUFMLEdBQWtCLEVBQWxCOztBQUVBLFNBQUttTixTQUFMLEdBQWlCQSxTQUFqQjtBQUNBLFNBQUt4TyxLQUFMLEdBQWF3TyxVQUFVdE8sT0FBVixDQUFrQkQsYUFBbEIsQ0FBZ0NELEtBQTdDOztBQUVBLFNBQUtxOEIsTUFBTDtBQUNBLFNBQUtpaUIsV0FBTDtBQUNELEdBZEQ7O0FBZ0JBO0FBQ0EzeEMsTUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCb21CLGVBQWpCLENBQWlDRCxpQkFBakMsQ0FBbUQza0IsU0FBbkQsR0FBK0R2MUIsRUFBRUgsTUFBRixDQUFTNEksSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCb21CLGVBQWpCLENBQWlDRCxpQkFBakMsQ0FBbUQza0IsU0FBNUQsRUFBdUU7O0FBRXBJOzs7OztBQUtBNEMsWUFBUSxrQkFBWTtBQUNsQixVQUFJaDhCLElBQUosRUFDSWsrQyxjQURKLEVBRUl2QyxlQUZKLEVBR0l3QyxXQUhKOztBQUtBbitDLGFBQU8sSUFBUDs7QUFFQWsrQyx1QkFBaUI5MEMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFqQjs7QUFFQXN5Qyx3QkFBa0J2eUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFsQjtBQUNBc3lDLHNCQUFnQmxtQyxTQUFoQixHQUE2QixLQUFLdEgsU0FBTCxDQUFldE8sT0FBZixDQUF1QnUrQyxzQkFBdkIsSUFBaUR2bUIsY0FBY3BMLHdDQUE1RjtBQUNBa3ZCLHNCQUFnQnJ5QyxTQUFoQixHQUE0QixpQkFBNUI7QUFDQTQwQyxxQkFBZTFvQyxXQUFmLENBQTJCbW1DLGVBQTNCOztBQUVBLFdBQUswQyxVQUFMLEdBQWtCajFDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBbEI7QUFDQSxXQUFLZzFDLFVBQUwsQ0FBZ0IvMEMsU0FBaEIsR0FBNEJDLHdFQUFZQSxDQUFDMnJCLG1DQUF6QztBQUNBaXBCLG9CQUFjLzBDLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBZDtBQUNBLFdBQUtnMUMsVUFBTCxDQUFnQjdvQyxXQUFoQixDQUE0QjJvQyxXQUE1QjtBQUNBRCxxQkFBZTFvQyxXQUFmLENBQTJCLEtBQUs2b0MsVUFBaEM7O0FBRUFyK0MsV0FBSzBILElBQUwsR0FBWTFILEtBQUttTyxTQUFMLENBQWUwdUIsT0FBZixDQUF1QjtBQUNqQ3I3QixjQUFNLGVBRDJCO0FBRWpDczdCLHVCQUFlO0FBQ2J6RSxvQkFBVyxLQUFLbHFCLFNBQUwsQ0FBZXRPLE9BQWYsQ0FBdUJ1K0Msc0JBQXZCLElBQWlEdm1CLGNBQWNwTCx3Q0FEN0Q7QUFFYm5qQixxQkFBV0Msd0VBQVlBLENBQUNrakIsd0NBRlg7QUFHYnNRLHdCQUFjO0FBSEQsU0FGa0I7QUFPakNDLHlCQUFpQixDQUNmLEVBQUNDLFNBQVNqOUIsS0FBS21PLFNBQUwsQ0FBZXV1QixnQkFBekIsRUFBMkM3MUIsU0FBU3EzQyxjQUFwRCxFQURlLEVBRWYsRUFBQ2poQixTQUFTajlCLEtBQUttTyxTQUFMLENBQWUrdUIsVUFBekIsRUFBcUNyMkIsU0FBUzdHLEtBQUttTyxTQUFMLENBQWVndkIsY0FBN0QsRUFGZTtBQVBnQixPQUF2QixDQUFaO0FBWUQsS0F4Q21JOztBQTBDcEk7Ozs7O0FBS0FaLGNBQVUsb0JBQVk7QUFDcEIsV0FBSzcwQixJQUFMLENBQVU2MEIsUUFBVjtBQUNELEtBakRtSTs7QUFtRHBJOzs7OztBQUtBaUssZ0JBQVksb0JBQVVnRixVQUFWLEVBQXNCO0FBQ2hDLFVBQUlBLFVBQUosRUFBZ0I7QUFDZCxZQUFJLE9BQU9BLFVBQVAsS0FBc0IsUUFBMUIsRUFBb0M7QUFDbEMsZUFBSzZTLFVBQUwsQ0FBZ0I1b0MsU0FBaEIsR0FBNEIrMUIsVUFBNUI7QUFDRCxTQUZELE1BRU87QUFDTCxjQUFJO0FBQ0YsZ0JBQUksS0FBSzZTLFVBQUwsQ0FBZ0JDLFVBQXBCLEVBQWdDO0FBQzlCLG1CQUFLRCxVQUFMLENBQWdCbmIsWUFBaEIsQ0FBNkJzSSxVQUE3QixFQUF5QyxLQUFLNlMsVUFBTCxDQUFnQkMsVUFBekQ7QUFDRCxhQUZELE1BRU87QUFDTCxtQkFBS0QsVUFBTCxDQUFnQjdvQyxXQUFoQixDQUE0QmcyQixVQUE1QjtBQUNEO0FBQ0YsV0FORCxDQU1FLE9BQU85MUIsQ0FBUCxFQUFVO0FBQ1Y7QUFDQS9VLG9CQUFRQyxJQUFSLENBQWE4VSxFQUFFNmxDLE9BQWY7QUFDQTtBQUNEO0FBQ0Y7QUFDRjtBQUNELGFBQU8sS0FBSzhDLFVBQUwsQ0FBZ0I1b0MsU0FBdkI7QUFDRCxLQTNFbUk7O0FBNkVwSXdvQyxpQkFBYSx1QkFBWTtBQUN2QixVQUFJaitDLElBQUosRUFDSXUrQyxhQURKOztBQUdBditDLGFBQU8sSUFBUDtBQUNBLFdBQUttTyxTQUFMLENBQWV0TixPQUFmLENBQXVCb2EsSUFBdkI7O0FBRUFzakMsc0JBQWdCLHVCQUFVeCtDLFlBQVYsRUFBd0I7QUFDdENDLGFBQUt3K0MsZ0JBQUwsR0FBd0JwMUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUF4QjtBQUNBeEYsVUFBRTdELEtBQUt3K0MsZ0JBQVAsRUFBeUI3aEMsUUFBekIsQ0FBa0NwVCx3RUFBWUEsQ0FBQzRyQix1QkFBL0M7QUFDQW4xQixhQUFLd21DLFVBQUwsQ0FBZ0J4bUMsS0FBS3crQyxnQkFBckI7O0FBRUF4K0MsYUFBS3krQyxRQUFMLENBQWMxK0MsWUFBZCxFQUE0QkMsS0FBS3crQyxnQkFBakM7O0FBRUF4K0MsYUFBS3UvQixXQUFMLEdBQW1CLElBQW5CO0FBQ0F2L0IsYUFBS21PLFNBQUwsQ0FBZXROLE9BQWYsQ0FBdUJDLElBQXZCO0FBQ0FkLGFBQUttTyxTQUFMLENBQWV5MUIsTUFBZjtBQUNELE9BVkQsQ0FQdUIsQ0FpQnJCOztBQUVGLFVBQUksS0FBS2prQyxLQUFMLENBQVdnRCxpQkFBZixFQUFrQztBQUNoQzQ3QyxzQkFBYyxLQUFLNStDLEtBQUwsQ0FBVysrQyxtQkFBWCxDQUErQjMrQyxZQUE3QztBQUNELE9BRkQsTUFFTztBQUNMLGFBQUtKLEtBQUwsQ0FBV2tELHFCQUFYLENBQWlDZixJQUFqQyxDQUFzQ3k4QyxhQUF0QztBQUNEO0FBQ0YsS0FyR21JLEVBcUdqSTs7QUFFSDs7Ozs7QUFLQXZhLGlCQUFhLHFCQUFVeHpCLFdBQVYsRUFBdUI7QUFDbEM7QUFDRCxLQTlHbUksRUE4R2pJOztBQUVIOzs7Ozs7O0FBT0FpdUMsY0FBVSxrQkFBVUUsUUFBVixFQUFvQkMsY0FBcEIsRUFBb0MvK0MsT0FBcEMsRUFBNkM7QUFDckQsVUFBSXFCLENBQUosRUFDSUMsQ0FESixFQUVJbkIsSUFGSixFQUdJeTZDLE9BSEosRUFJSW55QyxJQUpKLEVBS0lySCxHQUxKLEVBTUk0OUMsUUFOSixFQU9JQyxTQVBKLEVBUUlDLFNBUkosRUFTSUMsVUFUSixFQVVJMXdDLE1BVkosRUFXSTJ3QyxLQVhKLEVBWUlDLE1BWkosRUFhSWhDLE1BYkosRUFjSWlDLGdCQWRKLEVBZUlDLCtCQWZKOztBQWlCQXAvQyxhQUFPLElBQVA7O0FBRUEsVUFBSSxRQUFPSCxPQUFQLHlDQUFPQSxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQy9CQSxrQkFBVTtBQUNSdy9DLHVCQUFhO0FBREwsU0FBVjtBQUdEOztBQUVERix5QkFBbUIsMEJBQVV4bUIsS0FBVixFQUFpQjtBQUNoQ0EsY0FBTThZLGNBQU47O0FBRUEsWUFBSXJoQyxPQUFKLEVBQ0VvaEMsUUFERixFQUVFOE4sYUFGRjtBQUdBOU4sbUJBQVczdEMsRUFBRSxJQUFGLEVBQVFvdEMsTUFBUixHQUFpQk8sUUFBakIsRUFBWDtBQUNBLGFBQUksSUFBSXR3QyxJQUFJLENBQVosRUFBZUEsSUFBR3N3QyxTQUFTOXZDLE1BQTNCLEVBQW1DUixHQUFuQyxFQUF1QztBQUNuQyxjQUFJc3dDLFNBQVN0d0MsQ0FBVCxLQUFlMkMsRUFBRTJ0QyxTQUFTdHdDLENBQVQsQ0FBRixFQUFlZ2YsUUFBZixDQUF3QjNXLHdFQUFZQSxDQUFDeW5CLElBQXJDLENBQW5CLEVBQStEO0FBQzNELGdCQUFHaHhCLEtBQUtMLEtBQUwsQ0FBVysrQyxtQkFBWCxDQUErQjUrQyxhQUEvQixDQUE2Q0UsS0FBS0wsS0FBTCxDQUFXNkMsaUJBQXhELEtBQThFeEMsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDRSxLQUFLTCxLQUFMLENBQVc2QyxpQkFBeEQsRUFBMkVQLFdBQTVKLEVBQXdLO0FBQ3RLLG1CQUFJLElBQUlkLEVBQVIsSUFBYW5CLEtBQUtMLEtBQUwsQ0FBVysrQyxtQkFBWCxDQUErQjUrQyxhQUEvQixDQUE2Q0UsS0FBS0wsS0FBTCxDQUFXNkMsaUJBQXhELEVBQTJFTCxpQkFBM0UsQ0FBNkZDLFdBQTFHLEVBQXNIO0FBQ3BILG9CQUFHcEMsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDRSxLQUFLTCxLQUFMLENBQVc2QyxpQkFBeEQsRUFBMkVMLGlCQUEzRSxDQUE2RkMsV0FBN0YsQ0FBeUd3RSxjQUF6RyxDQUF3SHpGLEVBQXhILENBQUgsRUFDQW5CLEtBQUtMLEtBQUwsQ0FBV0UsT0FBWCxDQUFtQkQsYUFBbkIsQ0FBaUNvSCxHQUFqQyxDQUFxQzhVLFdBQXJDLENBQWlEOWIsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDRSxLQUFLTCxLQUFMLENBQVc2QyxpQkFBeEQsRUFBMkVMLGlCQUEzRSxDQUE2RkMsV0FBN0YsQ0FBeUdqQixFQUF6RyxFQUE0R21CLEtBQTdKO0FBQ0Q7QUFDRjtBQUNEdUIsY0FBRTJ0QyxTQUFTdHdDLENBQVQsQ0FBRixFQUFldzNCLFdBQWYsQ0FBMkJudkIsd0VBQVlBLENBQUN5bkIsSUFBeEMsRUFBOENyVSxRQUE5QyxDQUF1RHBULHdFQUFZQSxDQUFDd2YsS0FBcEU7QUFDSDtBQUNKO0FBQ0QzWSxrQkFBVXZNLEVBQUUsSUFBRixFQUFReEQsSUFBUixDQUFhLEtBQWIsQ0FBVjs7QUFFQSxZQUFJTCxLQUFLbU8sU0FBTCxDQUFldE8sT0FBZixDQUF1Qnc3QyxPQUEzQixFQUFvQztBQUNoQ3o1Qyx3RUFBS0EsQ0FBQ3M2QyxVQUFOLENBQWlCLFdBQWpCLEVBQThCOXJDLE9BQTlCO0FBQ0g7O0FBRUMsWUFBSXZNLEVBQUUsSUFBRixFQUFRb3RDLE1BQVIsR0FBaUIvd0IsUUFBakIsQ0FBMEIzVyx3RUFBWUEsQ0FBQ3dmLEtBQXZDLENBQUosRUFBbUQ7QUFDL0NsbEIsWUFBRSxJQUFGLEVBQVFvdEMsTUFBUixHQUFpQnZZLFdBQWpCLENBQTZCbnZCLHdFQUFZQSxDQUFDd2YsS0FBMUMsRUFBaURwTSxRQUFqRCxDQUEwRHBULHdFQUFZQSxDQUFDeW5CLElBQXZFO0FBQ0gsU0FGRCxNQUVPO0FBQ0hudEIsWUFBRSxJQUFGLEVBQVFvdEMsTUFBUixHQUFpQnZZLFdBQWpCLENBQTZCbnZCLHdFQUFZQSxDQUFDeW5CLElBQTFDLEVBQWdEclUsUUFBaEQsQ0FBeURwVCx3RUFBWUEsQ0FBQ3dmLEtBQXRFO0FBQ0g7O0FBRUQsWUFBSS9vQixLQUFLTCxLQUFMLENBQVdFLE9BQVgsQ0FBbUJELGFBQW5CLENBQWlDMi9DLGtCQUFyQyxFQUF5RDtBQUNyRHYvQyxlQUFLTCxLQUFMLENBQVdFLE9BQVgsQ0FBbUJELGFBQW5CLENBQWlDMi9DLGtCQUFqQyxDQUFvRC8yQyxPQUFwRCxDQUE0RCxVQUFVM0IsT0FBVixFQUFtQjtBQUMzRWhELGNBQUVnRCxPQUFGLEVBQVdnVyxHQUFYLENBQWUsT0FBZixFQUF3QjdjLEtBQUttTyxTQUFMLENBQWV5NkIsU0FBZixDQUF5QkMsV0FBakQ7QUFDSCxXQUZEO0FBR0g7QUFDRGhsQyxVQUFFN0QsS0FBS21PLFNBQUwsQ0FBZXRILE9BQWpCLEVBQTBCZ1csR0FBMUIsQ0FBOEIsT0FBOUIsRUFBdUM3YyxLQUFLbU8sU0FBTCxDQUFleTZCLFNBQWYsQ0FBeUJDLFdBQWhFOztBQUVGLFlBQUk3b0MsS0FBS0wsS0FBTCxDQUFXNkMsaUJBQVgsS0FBaUM0TixPQUFyQyxFQUE4QztBQUM1Q3BRLGVBQUtMLEtBQUwsQ0FBVysrQyxtQkFBWCxDQUErQjE4QyxhQUEvQixDQUE2Q29PLE9BQTdDO0FBQ0EsY0FBR3BRLEtBQUtMLEtBQUwsQ0FBVysrQyxtQkFBWCxDQUErQjUrQyxhQUEvQixDQUE2Q3NRLE9BQTdDLEVBQXNEbk8sV0FBekQsRUFBcUU7QUFDakUsaUJBQUksSUFBSWQsR0FBUixJQUFhbkIsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDc1EsT0FBN0MsRUFBc0RqTyxpQkFBdEQsQ0FBd0VDLFdBQXJGLEVBQWlHO0FBQy9GLGtCQUFHcEMsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDc1EsT0FBN0MsRUFBc0RqTyxpQkFBdEQsQ0FBd0VDLFdBQXhFLENBQW9Gd0UsY0FBcEYsQ0FBbUd6RixHQUFuRyxDQUFILEVBQXlHO0FBQ3JHbkIscUJBQUtMLEtBQUwsQ0FBV0UsT0FBWCxDQUFtQkQsYUFBbkIsQ0FBaUNvSCxHQUFqQyxDQUFxQytULFFBQXJDLENBQThDL2EsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDc1EsT0FBN0MsRUFBc0RqTyxpQkFBdEQsQ0FBd0VDLFdBQXhFLENBQW9GakIsR0FBcEYsRUFBdUZtQixLQUFySTtBQUErSjtBQUNwSztBQUNKO0FBQ0R1QixZQUFFLElBQUYsRUFBUThZLFFBQVIsQ0FBaUJwVCx3RUFBWUEsQ0FBQ3VULE1BQTlCLEVBQXNDNGIsV0FBdEMsQ0FBa0RudkIsd0VBQVlBLENBQUNnb0IsUUFBL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0F0a0IsaUJBQU9DLFlBQVAsQ0FBb0JzeUMsaUJBQXBCLEdBQXdDdnlDLE9BQU9DLFlBQVAsQ0FBb0JzeUMsaUJBQXBCLElBQXlDLEVBQWpGO0FBQ0E1OUMsd0VBQUtBLENBQUNnQixpQkFBTixDQUF3QnFLLE9BQU9DLFlBQVAsQ0FBb0JzeUMsaUJBQTVDLEVBQStEcHZDLE9BQS9EO0FBQ0Q7QUFDSixPQXhERCxDQTFCcUQsQ0FrRmxEOztBQUVIZ3ZDLHdDQUFrQyx5Q0FBVUssZUFBVixFQUEyQjtBQUMzRCxZQUFJOTlDLEVBQUo7O0FBRUEsYUFBS0EsRUFBTCxJQUFXM0IsS0FBS2dCLFVBQWhCLEVBQTRCO0FBQzFCLGNBQUloQixLQUFLZ0IsVUFBTCxDQUFnQjRGLGNBQWhCLENBQStCakYsRUFBL0IsQ0FBSixFQUF3QztBQUN0QyxnQkFBSUEsT0FBTzg5QyxnQkFBZ0I5OUMsRUFBM0IsRUFBK0I7QUFDN0IzQixtQkFBS2dCLFVBQUwsQ0FBZ0JXLEVBQWhCLEVBQW9CdTlDLE1BQXBCLENBQTJCdmlDLFFBQTNCLENBQW9DcFQsd0VBQVlBLENBQUN1VCxNQUFqRCxFQUF5RDRiLFdBQXpELENBQXFFbnZCLHdFQUFZQSxDQUFDZ29CLFFBQWxGO0FBQ0QsYUFGRCxNQUVPO0FBQ0x2eEIsbUJBQUtnQixVQUFMLENBQWdCVyxFQUFoQixFQUFvQnU5QyxNQUFwQixDQUEyQnZpQyxRQUEzQixDQUFvQ3BULHdFQUFZQSxDQUFDZ29CLFFBQWpELEVBQTJEbUgsV0FBM0QsQ0FBdUVudkIsd0VBQVlBLENBQUN1VCxNQUFwRjtBQUNEO0FBQ0Y7QUFDRjtBQUNGLE9BWkQ7O0FBZUEyOUIsZ0JBQVU1NkMsUUFBUXcvQyxXQUFSLEdBQXNCajJDLFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBdEIsR0FBcURELFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBL0Q7O0FBRUEsVUFBSXMxQyxTQUFTajlDLE1BQVQsR0FBa0IsQ0FBdEIsRUFBeUI7O0FBRXZCLGFBQUtSLElBQUksQ0FBVCxFQUFZQSxJQUFJeTlDLFNBQVNqOUMsTUFBekIsRUFBaUNSLEtBQUssQ0FBdEMsRUFBeUM7O0FBRXZDRCxnQkFBTTA5QyxTQUFTejlDLENBQVQsQ0FBTjtBQUNBLGVBQUtGLFVBQUwsQ0FBZ0JDLEdBQWhCLElBQXVCLEVBQXZCOztBQUVBNDlDLHFCQUFXaC9DLFFBQVF3L0MsV0FBUixHQUFzQmoyQyxTQUFTQyxhQUFULENBQXVCLElBQXZCLENBQXRCLEdBQXFERCxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWhFO0FBQ0EsZUFBS3JJLFVBQUwsQ0FBZ0JDLEdBQWhCLEVBQXFCc04sWUFBckIsR0FBb0Nzd0MsUUFBcEM7QUFDQUksa0JBQVE3MUMsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQUFSO0FBQ0E0MUMsZ0JBQU0xcEMsWUFBTixDQUFtQixNQUFuQixFQUEyQixHQUEzQjtBQUNBMHBDLGdCQUFNenBDLFdBQU4sQ0FBa0JwTSxTQUFTczJDLGNBQVQsQ0FBd0IxL0MsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDbUIsR0FBN0MsRUFBa0RPLElBQTFFLENBQWxCO0FBQ0FxQyxZQUFFbzdDLEtBQUYsRUFBUzUrQyxJQUFULENBQWMsSUFBZCxFQUFvQlksR0FBcEI7QUFDQSxjQUFHakIsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDbUIsR0FBN0MsRUFBa0RnQixXQUFyRCxFQUFpRTs7QUFHL0Q2OEMsd0JBQVkxMUMsU0FBU0MsYUFBVCxDQUF1QixJQUF2QixDQUFaLENBQXlDeEosUUFBUXcvQyxXQUFSLEdBQXNCajJDLFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBdEIsR0FBcURELFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBckQ7QUFDekMsaUJBQUlsSSxJQUFJLENBQVIsRUFBV0EsSUFBSW5CLEtBQUtMLEtBQUwsQ0FBVysrQyxtQkFBWCxDQUErQjUrQyxhQUEvQixDQUE2Q21CLEdBQTdDLEVBQWtEaUIsUUFBbEQsQ0FBMkRSLE1BQTFFLEVBQWtGUCxHQUFsRixFQUFzRjtBQUNwRjQ5QywwQkFBWWwvQyxRQUFRdy9DLFdBQVIsR0FBc0JqMkMsU0FBU0MsYUFBVCxDQUF1QixJQUF2QixDQUF0QixHQUFxREQsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFqRTtBQUNBMjFDLDJCQUFhNTFDLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBYjtBQUNBLGtCQUFHckosS0FBS0wsS0FBTCxDQUFXNkMsaUJBQVgsSUFBZ0N2QixHQUFuQyxFQUF1QztBQUNuQzRDLGtCQUFFbTdDLFVBQUYsRUFBY3JpQyxRQUFkLENBQXVCcFQsd0VBQVlBLENBQUN1VCxNQUFwQztBQUNBLG9CQUFJNmlDLFlBQVkzL0MsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDbUIsR0FBN0MsRUFBa0RpQixRQUFsRCxDQUEyRGYsQ0FBM0QsRUFBOERRLEVBQTlFO0FBQ0EzQixxQkFBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDbUIsR0FBN0MsRUFBa0RrQixpQkFBbEQsQ0FBb0VDLFdBQXBFLENBQWdGdTlDLFNBQWhGLEVBQTJGQyxhQUEzRixDQUF5RzUvQyxLQUFLTCxLQUFMLENBQVcrK0MsbUJBQVgsQ0FBK0I1K0MsYUFBL0IsQ0FBNkNtQixHQUE3QyxFQUFrRGlCLFFBQWxELENBQTJEZixDQUEzRCxFQUE4RHNoQixPQUF2SztBQUNILGVBSkQsTUFLSTtBQUNBNWUsa0JBQUVtN0MsVUFBRixFQUFjcmlDLFFBQWQsQ0FBdUJwVCx3RUFBWUEsQ0FBQ2dvQixRQUFwQztBQUNIOztBQUVEeXRCLHlCQUFXeHBDLFdBQVgsQ0FBdUJwTSxTQUFTczJDLGNBQVQsQ0FBd0IxL0MsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDbUIsR0FBN0MsRUFBa0RpQixRQUFsRCxDQUEyRGYsQ0FBM0QsRUFBOERLLElBQXRGLENBQXZCO0FBQ0FxQyxnQkFBRW03QyxVQUFGLEVBQWMzK0MsSUFBZCxDQUFtQixJQUFuQixFQUF3QkwsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDbUIsR0FBN0MsRUFBa0RpQixRQUFsRCxDQUEyRGYsQ0FBM0QsRUFBOERRLEVBQXRGO0FBQ0FrQyxnQkFBRW03QyxVQUFGLEVBQWMzK0MsSUFBZCxDQUFtQixLQUFuQixFQUF5QlksR0FBekI7QUFDQXFOLHVCQUFTbEYsU0FBU0MsYUFBVCxDQUF1QixPQUF2QixDQUFUO0FBQ0FpRixxQkFBT2hGLFNBQVAsR0FBbUIsb0JBQW5CO0FBQ0FnRixxQkFBT2lILFlBQVAsQ0FBb0IsTUFBcEIsRUFBMkIsT0FBM0I7QUFDQWpILHFCQUFPaUgsWUFBUCxDQUFvQixLQUFwQixFQUEwQixDQUExQjtBQUNBakgscUJBQU9pSCxZQUFQLENBQW9CLEtBQXBCLEVBQTBCLEdBQTFCO0FBQ0FqSCxxQkFBT2lILFlBQVAsQ0FBb0IsT0FBcEIsRUFBNEJ2VixLQUFLTCxLQUFMLENBQVcrK0MsbUJBQVgsQ0FBK0I1K0MsYUFBL0IsQ0FBNkNtQixHQUE3QyxFQUFrRGlCLFFBQWxELENBQTJEZixDQUEzRCxFQUE4RHNoQixPQUExRjtBQUNBblUscUJBQU9pSCxZQUFQLENBQW9CLE9BQXBCLEVBQTRCLEVBQTVCO0FBQ0ExUixnQkFBRXlLLE1BQUYsRUFBVWdNLEVBQVYsQ0FBYSxPQUFiLEVBQXNCLFVBQVVxZSxLQUFWLEVBQWlCO0FBQ25DMzRCLHFCQUFLTCxLQUFMLENBQVcrK0MsbUJBQVgsQ0FBK0I1K0MsYUFBL0IsQ0FBNkMrRCxFQUFFLElBQUYsRUFBUW90QyxNQUFSLEdBQWlCNXdDLElBQWpCLENBQXNCLEtBQXRCLENBQTdDLEVBQTJFOEIsaUJBQTNFLENBQTZGQyxXQUE3RixDQUF5R3lCLEVBQUUsSUFBRixFQUFRb3RDLE1BQVIsR0FBaUI1d0MsSUFBakIsQ0FBc0IsSUFBdEIsQ0FBekcsRUFBc0l1L0MsYUFBdEksQ0FBb0osS0FBSzlzQyxLQUF6SjtBQUNILGVBRkQ7O0FBTUFrc0MseUJBQVd4cEMsV0FBWCxDQUF1QmxILE1BQXZCO0FBQ0F5d0Msd0JBQVV2cEMsV0FBVixDQUFzQndwQyxVQUF0QjtBQUNBRix3QkFBVXRwQyxXQUFWLENBQXNCdXBDLFNBQXRCO0FBQ0Q7QUFFRjtBQUNERixtQkFBU3JwQyxXQUFULENBQXFCeXBDLEtBQXJCO0FBQ0EsY0FBR0gsU0FBSCxFQUFhO0FBQ1RELHFCQUFTcnBDLFdBQVQsQ0FBcUJzcEMsU0FBckI7QUFDQUEsd0JBQVl2c0MsU0FBWjtBQUNIOztBQUVEMnNDLG1CQUFTcjdDLEVBQUVvN0MsS0FBRixDQUFUO0FBQ0EsZUFBS2orQyxVQUFMLENBQWdCQyxHQUFoQixFQUFxQmkrQyxNQUFyQixHQUE4QkEsTUFBOUI7O0FBRUEsY0FBSSxLQUFLL3dDLFNBQUwsQ0FBZXRPLE9BQWYsQ0FBdUJELGFBQXZCLENBQXFDUyxJQUFyQyxDQUEwQ3cvQyxpQkFBMUMsSUFBK0R0K0MsU0FBU04sR0FBVCxFQUFjLEVBQWQsTUFBc0JNLFNBQVN2QixLQUFLbU8sU0FBTCxDQUFldE8sT0FBZixDQUF1QkQsYUFBdkIsQ0FBcUNTLElBQXJDLENBQTBDdy9DLGlCQUFuRCxFQUFzRSxFQUF0RSxDQUF6RixFQUFvSztBQUNsS1gsbUJBQU92aUMsUUFBUCxDQUFnQnBULHdFQUFZQSxDQUFDdVQsTUFBN0I7QUFDQWpaLGNBQUVnN0MsUUFBRixFQUFZbGlDLFFBQVosQ0FBcUJwVCx3RUFBWUEsQ0FBQ3luQixJQUFsQztBQUNFLGdCQUFHaHhCLEtBQUtMLEtBQUwsQ0FBVysrQyxtQkFBWCxDQUErQjUrQyxhQUEvQixDQUE2Q21CLEdBQTdDLEVBQWtEZ0IsV0FBckQsRUFBaUU7QUFDN0QsbUJBQUksSUFBSWQsR0FBUixJQUFhbkIsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDbUIsR0FBN0MsRUFBa0RrQixpQkFBbEQsQ0FBb0VDLFdBQWpGLEVBQTZGO0FBQ3ZGLG9CQUFHcEMsS0FBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCNStDLGFBQS9CLENBQTZDbUIsR0FBN0MsRUFBa0RrQixpQkFBbEQsQ0FBb0VDLFdBQXBFLENBQWdGd0UsY0FBaEYsQ0FBK0Z6RixHQUEvRixDQUFILEVBQXFHO0FBQ2pHbkIsdUJBQUtMLEtBQUwsQ0FBVysrQyxtQkFBWCxDQUErQjUrQyxhQUEvQixDQUE2Q21CLEdBQTdDLEVBQWtEa0IsaUJBQWxELENBQW9FQyxXQUFwRSxDQUFnRmpCLEdBQWhGLEVBQW1GeStDLGFBQW5GLENBQWlHNS9DLEtBQUtMLEtBQUwsQ0FBVysrQyxtQkFBWCxDQUErQjUrQyxhQUEvQixDQUE2Q21CLEdBQTdDLEVBQWtEa0IsaUJBQWxELENBQW9FQyxXQUFwRSxDQUFnRmpCLEdBQWhGLEVBQW1Gc2hCLE9BQXBMO0FBQ0g7QUFFTjtBQUNKO0FBQ0osV0FYRCxNQVdPO0FBQ0x5OEIsbUJBQU92aUMsUUFBUCxDQUFnQnBULHdFQUFZQSxDQUFDZ29CLFFBQTdCO0FBQ0ExdEIsY0FBRWc3QyxRQUFGLEVBQVlsaUMsUUFBWixDQUFxQnBULHdFQUFZQSxDQUFDd2YsS0FBbEM7QUFDRDs7QUFFRG0yQixpQkFBTzcrQyxJQUFQLENBQVksS0FBWixFQUFtQlksR0FBbkI7QUFDQWkrQyxpQkFBTzdrQixLQUFQLENBQWE4a0IsZ0JBQWI7O0FBRUUxRSxrQkFBUWpsQyxXQUFSLENBQW9CcXBDLFFBQXBCO0FBQ0g7QUFDQztBQUNBLFlBQUksS0FBSzF3QyxTQUFMLENBQWV0TyxPQUFmLENBQXVCcTlDLE1BQTNCLEVBQW1DO0FBQy9CLGNBQUk0QyxLQUFLMTJDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVDtBQUNBeTJDLGFBQUd4MkMsU0FBSCxHQUFlLHlDQUFmO0FBQ0EsY0FBSTR6QyxTQUFTOXpDLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBYjtBQUNBNnpDLGlCQUFPenRDLElBQVAsR0FBYyxNQUFkO0FBQ0F5dEMsaUJBQU82QyxXQUFQLEdBQXFCLEVBQXJCLENBTCtCLENBS047QUFDekIsY0FBSTcrQyxJQUFJa0ksU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQUFSO0FBQ0FuSSxZQUFFb0ksU0FBRixHQUFjLGVBQWQ7QUFDQXBJLFlBQUVxVSxZQUFGLENBQWUsYUFBZixFQUE4QixNQUE5QjtBQUNBdXFDLGFBQUd0cUMsV0FBSCxDQUFlMG5DLE1BQWY7QUFDQTRDLGFBQUd0cUMsV0FBSCxDQUFldFUsQ0FBZjtBQUNBZzhDLGlCQUFPOEMsT0FBUCxHQUFpQixZQUFZO0FBQ3pCLHFCQUFTQyxXQUFULENBQXFCcDVDLE9BQXJCLEVBQThCcTVDLFdBQTlCLEVBQTJDOztBQUV2Qzs7QUFFQUEsNEJBQWNBLGVBQWUsS0FBN0IsQ0FKdUMsQ0FJRjs7QUFFckM7Ozs7QUFJQSx1QkFBU0Msb0JBQVQsQ0FBOEJ0NUMsT0FBOUIsRUFBdUN1NUMsT0FBdkMsRUFBZ0Q7QUFDNUMsb0JBQUlDLFFBQVEsRUFBWjtBQUNBLHFCQUFLLElBQUluL0MsSUFBSSxDQUFiLEVBQWdCQSxJQUFJMkYsUUFBUXFPLFFBQVIsQ0FBaUJ4VCxNQUFyQyxFQUE2Q1IsR0FBN0MsRUFBa0Q7QUFDOUMsc0JBQUkyRixRQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLEVBQW9Cay9DLE9BQXBCLENBQTRCNWIsV0FBNUIsTUFBNkM0YixRQUFRNWIsV0FBUixFQUFqRCxFQUF3RTtBQUNwRTZiLDBCQUFNditDLElBQU4sQ0FBVytFLFFBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsQ0FBWDtBQUNIO0FBQ0o7QUFDRCxvQkFBSW0vQyxNQUFNMytDLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNsQix5QkFBTzIrQyxNQUFNLENBQU4sQ0FBUCxDQURrQixDQUNEO0FBQ3BCLGlCQUZELE1BRU87QUFDSCx5QkFBTyxLQUFQO0FBQ0g7QUFDSjs7QUFFRCxrQkFBSUMsY0FBYyxLQUFsQjtBQUNBLGtCQUFJQyxpQkFBaUIsS0FBckI7QUFDQTtBQUNBLGtCQUFJMTVDLFFBQVFxTyxRQUFaLEVBQXNCO0FBQ2xCLHFCQUFLLElBQUloVSxJQUFJLENBQWIsRUFBZ0JBLElBQUkyRixRQUFRcU8sUUFBUixDQUFpQnhULE1BQXJDLEVBQTZDUixHQUE3QyxFQUFrRDtBQUM5QzJGLDBCQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLEVBQW9Cd0IsS0FBcEIsQ0FBMEJrTixPQUExQixHQUFvQyxPQUFwQzs7QUFFQSxzQkFBSTR3QyxVQUFVLEtBQWQ7O0FBRUE7QUFDQSxzQkFBSTM1QyxRQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLEVBQW9CaVUsb0JBQXBCLENBQXlDLEdBQXpDLEVBQThDLENBQTlDLEVBQWlETSxTQUFqRCxDQUEyRCt1QixXQUEzRCxHQUF5RTUrQixPQUF6RSxDQUFpRnMzQyxPQUFPcHFDLEtBQVAsQ0FBYTB4QixXQUFiLEVBQWpGLEtBQWdILENBQXBILEVBQXVIO0FBQ25IO0FBQ0FnYyw4QkFBVSxJQUFWO0FBQ0g7O0FBRUQ7QUFDQSxzQkFBSUMsS0FBS04scUJBQXFCdDVDLFFBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsQ0FBckIsRUFBMEMsSUFBMUMsQ0FBVDs7QUFFQSxzQkFBSXUvQyxFQUFKLEVBQVE7QUFDSjtBQUNBLHdCQUFJQyxhQUFhLElBQWpCO0FBQ0FILHFDQUFpQk4sWUFBWVEsRUFBWixFQUFnQlAsZUFBZU0sT0FBL0IsQ0FBakI7QUFDSCxtQkFKRCxNQUlPO0FBQ0gsd0JBQUlFLGFBQWEsS0FBakI7QUFDSDs7QUFFRCxzQkFBSUYsV0FBV0QsY0FBWCxJQUE2QkwsV0FBakMsRUFBOEM7QUFDMUNJLGtDQUFjLElBQWQsQ0FEMEMsQ0FDdEI7QUFDcEI7QUFDQXo1Qyw0QkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQndCLEtBQXBCLENBQTBCa04sT0FBMUIsR0FBb0MsRUFBcEM7O0FBRUEsd0JBQUlzdEMsT0FBT3BxQyxLQUFQLENBQWFwUixNQUFiLEdBQXNCLENBQTFCLEVBQTZCO0FBQ3pCbUYsOEJBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsRUFBb0J5L0MsU0FBcEIsQ0FBOEJyZCxNQUE5QixDQUFxQyxXQUFyQztBQUNBejhCLDhCQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLEVBQW9CeS9DLFNBQXBCLENBQThCQyxHQUE5QixDQUFrQyxVQUFsQztBQUNIOztBQUVELzVDLDRCQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLEVBQW9CeS9DLFNBQXBCLENBQThCcmQsTUFBOUIsQ0FBcUMsNEJBQXJDLEVBVjBDLENBVTBCO0FBQ3BFLHdCQUFJa2QsV0FBV3RELE9BQU9wcUMsS0FBUCxDQUFhcFIsTUFBYixHQUFzQixDQUFyQyxFQUF3QztBQUNwQ21GLDhCQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLEVBQW9CeS9DLFNBQXBCLENBQThCQyxHQUE5QixDQUFrQyw0QkFBbEM7QUFDSDtBQUNEO0FBQ0gsbUJBZkQsTUFlTztBQUNIO0FBQ0EvNUMsNEJBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsRUFBb0J3QixLQUFwQixDQUEwQmtOLE9BQTFCLEdBQW9DLE1BQXBDO0FBQ0EvSSw0QkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQnkvQyxTQUFwQixDQUE4QnJkLE1BQTlCLENBQXFDLFVBQXJDO0FBQ0F6OEIsNEJBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsRUFBb0J5L0MsU0FBcEIsQ0FBOEJDLEdBQTlCLENBQWtDLFdBQWxDO0FBQ0EvNUMsNEJBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsRUFBb0J5L0MsU0FBcEIsQ0FBOEJyZCxNQUE5QixDQUFxQyw0QkFBckM7QUFDSDtBQUVKOztBQUVELG9CQUFJZ2QsV0FBSixFQUFpQjtBQUNiLHlCQUFPLElBQVA7QUFDSCxpQkFGRCxNQUVPO0FBQ0gseUJBQU8sS0FBUDtBQUNIO0FBQ0o7QUFDSjs7QUFHRDtBQUNBTyx1QkFBVyxZQUFZO0FBQ25CO0FBQ0Esa0JBQUkzRCxPQUFPcHFDLEtBQVAsQ0FBYXBSLE1BQWIsSUFBdUIsQ0FBM0IsRUFBOEJ1K0MsWUFBWTcyQyxTQUFTMDNDLGFBQVQsQ0FBdUIsc0NBQXZCLENBQVo7QUFDakMsYUFIRCxFQUdHLEdBSEg7QUFLSCxXQTNGRDs7QUE2RkZsQyx5QkFBZXBwQyxXQUFmLENBQTJCc3FDLEVBQTNCO0FBQ0Q7O0FBRUgsYUFBS25nRCxLQUFMLENBQVdpTCx5QkFBWCxDQUFxQzlJLElBQXJDLENBQTBDczlDLCtCQUExQztBQUNEO0FBQ0RSLHFCQUFlcHBDLFdBQWYsQ0FBMkJpbEMsT0FBM0I7QUFDRCxLQTVabUksQ0E0WmxJOztBQTVaa0ksR0FBdkUsQ0FBL0QsQ0ExQmlCLENBd2JiO0FBRUwsQ0ExYkEsRUEwYkN4NkMsTUExYkQsRUEwYlMsS0FBS3FNLEdBMWJkLENBQUQ7O0FBNGJPLElBQUl5eEMsb0JBQW9CLEtBQUt6eEMsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsQ0FBc0JvbUIsZUFBdEIsQ0FBc0NELGlCQUE5RCxDOzs7Ozs7Ozs7Ozs7O0FDcmRQO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTs7QUFFQSxLQUFLenhDLEdBQUwsR0FBVyxLQUFLQSxHQUFMLElBQVksRUFBdkI7QUFDQSxLQUFLQSxHQUFMLENBQVN5SyxJQUFULEdBQWdCLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULElBQWlCLEVBQWpDO0FBQ0EsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLEdBQXdCLEtBQUt0ckIsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsSUFBeUIsRUFBakQ7QUFDQSxLQUFLdHJCLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLENBQXNCb21CLGVBQXRCLEdBQXdDLEtBQUsxeEMsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsQ0FBc0JvbUIsZUFBdEIsSUFBeUMsRUFBakY7O0FBRUE7QUFDQTs7QUFFQSxJQUFJbm1CLGdCQUFnQixFQUFwQjs7QUFFQSxJQUFJLE9BQU83dUIsT0FBUCxLQUFtQixXQUF2QixFQUFvQztBQUNsQyxNQUFJQSxRQUFROHVCLElBQVIsS0FBaUIsSUFBckIsRUFBMkI7QUFDekJELG9CQUFnQmhILHVGQUFoQjtBQUNELEdBRkQsTUFFTyxJQUFJN25CLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUNoQ0Qsb0JBQWdCOUcsd0ZBQWhCO0FBQ0QsR0FGTSxNQUVBO0FBQ0w7QUFDQThHLG9CQUFnQmhILHVGQUFoQjtBQUNEO0FBQ0Y7O0FBRUEsV0FBVWh0QixDQUFWLEVBQWF5SSxHQUFiLEVBQWtCO0FBQ2pCOztBQUVBOzs7Ozs7Ozs7QUFRQUEsTUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCb21CLGVBQWpCLENBQWlDNXVDLFNBQWpDLEdBQTZDLFVBQVVqQixTQUFWLEVBQXFCNHlDLFdBQXJCLEVBQWtDO0FBQzdFLFFBQUksQ0FBQzV5QyxTQUFMLEVBQWdCO0FBQ2R4TixjQUFRQyxJQUFSLENBQWEsb0RBQWI7QUFDQSxhQUFPLEtBQVA7QUFDRDtBQUNEbWdELGtCQUFjbDlDLEVBQUVILE1BQUYsQ0FBUztBQUNyQm9MLGFBQU8sSUFEYztBQUVyQnROLFlBQU0sV0FGZTtBQUdyQnVOLG1CQUFhO0FBSFEsS0FBVCxFQUlYZ3lDLFdBSlcsQ0FBZDs7QUFNQSxRQUFJLENBQUNBLFlBQVlqeUMsS0FBakIsRUFBd0I7QUFDdEJuTyxjQUFRQyxJQUFSLENBQWEsOENBQWI7QUFDQSxhQUFPLEtBQVA7QUFDRDs7QUFHRCxTQUFLMitCLFdBQUwsR0FBbUIsS0FBbkI7QUFDQTtBQUNBLFNBQUt5aEIsYUFBTCxHQUFxQixLQUFyQjtBQUNBLFNBQUs3eUMsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLeE8sS0FBTCxHQUFhd08sVUFBVXRPLE9BQVYsQ0FBa0JELGFBQWxCLENBQWdDRCxLQUE3QztBQUNBLFNBQUtxSCxHQUFMLEdBQVcsS0FBS3JILEtBQUwsQ0FBV0UsT0FBWCxDQUFtQkQsYUFBbkIsQ0FBaUNvSCxHQUE1QztBQUNBLFNBQUtoQixNQUFMLEdBQWMsRUFBZDtBQUNBLFNBQUs4SSxLQUFMLEdBQWFpeUMsWUFBWWp5QyxLQUF6QjtBQUNBLFNBQUt0TixJQUFMLEdBQVl1L0MsWUFBWXYvQyxJQUF4QjtBQUNBLFNBQUt1TixXQUFMLEdBQW1CZ3lDLFlBQVloeUMsV0FBWixDQUF3QndGLE9BQXhCLENBQWdDLE9BQWhDLEVBQXlDLElBQXpDLENBQW5CO0FBQ0FwRyxjQUFVb3ZDLE9BQVYsQ0FBa0IsY0FBYSxLQUFLenVDLEtBQXBDLElBQTZDLElBQTdDO0FBQ0EsU0FBS2t0QixNQUFMO0FBQ0QsR0E3QkQ7O0FBK0JBO0FBQ0ExdkIsTUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCb21CLGVBQWpCLENBQWlDNXVDLFNBQWpDLENBQTJDZ3FCLFNBQTNDLEdBQXVEdjFCLEVBQUVILE1BQUYsQ0FBUzRJLElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQm9tQixlQUFqQixDQUFpQzV1QyxTQUFqQyxDQUEyQ2dxQixTQUFwRCxFQUErRDs7QUFFcEg7Ozs7O0FBS0E0QyxZQUFRLGtCQUFZO0FBQ2xCLFVBQUloOEIsSUFBSixFQUNFaytDLGNBREYsRUFFRXZDLGVBRkYsRUFHRXNGLG1CQUhGLEVBSUVDLFFBSkYsRUFLRUMsa0JBTEY7O0FBT0FuaEQsYUFBTyxJQUFQO0FBQ0FrK0MsdUJBQWlCOTBDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBakI7QUFDQXN5Qyx3QkFBa0J2eUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFsQjtBQUNBc3lDLHNCQUFnQnJ5QyxTQUFoQixHQUE0QixpQkFBNUI7O0FBRUE2M0MsMkJBQXFCLEtBQUtoekMsU0FBTCxDQUFldE8sT0FBZixDQUF1QnNoRCxrQkFBNUM7O0FBRUEsVUFBSW5oRCxLQUFLd0IsSUFBVCxFQUFlO0FBQ1gyL0MsNkJBQXFCbmhELEtBQUt3QixJQUExQjtBQUNIOztBQUVELFVBQUcsQ0FBQyxLQUFLMk0sU0FBTCxDQUFldE8sT0FBZixDQUF1Qm00QixNQUEzQixFQUFtQztBQUNqQzJqQix3QkFBZ0JsbUMsU0FBaEIsR0FBNkIwckMsc0JBQXNCdHBCLGNBQWNuTCxvQ0FBakU7QUFDRCxPQUZELE1BR0s7QUFDRDdvQixVQUFFODNDLGVBQUYsRUFBbUJoL0IsUUFBbkIsQ0FBNEIsd0JBQTVCO0FBQ0Fza0MsOEJBQXNCNzNDLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBdEI7QUFDQTQzQyw0QkFBb0JHLE9BQXBCLEdBQThCLFlBQVk7QUFDdEMsY0FBSXY5QyxFQUFFLElBQUYsRUFBUXFjLFFBQVIsQ0FBaUIsWUFBakIsTUFBbUMsS0FBdkMsRUFBOEM7QUFDMUMsaUJBQUssSUFBSWhmLElBQUksQ0FBYixFQUFnQkEsSUFBSWxCLEtBQUtMLEtBQUwsQ0FBV3FOLFFBQVgsQ0FBb0J0TCxNQUF4QyxFQUFnRFIsR0FBaEQsRUFBcUQ7QUFDakRsQixtQkFBS0wsS0FBTCxDQUFXNjlDLGVBQVgsQ0FBMkJoa0MsU0FBM0IsQ0FBcUN4WixLQUFLTCxLQUFMLENBQVdxTixRQUFYLENBQW9COUwsQ0FBcEIsQ0FBckM7QUFDSDtBQUNEMkMsY0FBRSxJQUFGLEVBQVE2MEIsV0FBUixDQUFvQixZQUFwQjtBQUNBNzBCLGNBQUUsSUFBRixFQUFROFksUUFBUixDQUFpQixjQUFqQjtBQUNILFdBTkQsTUFPSztBQUNELGlCQUFLLElBQUl6YixJQUFJLENBQWIsRUFBZ0JBLElBQUlsQixLQUFLTCxLQUFMLENBQVdxTixRQUFYLENBQW9CdEwsTUFBeEMsRUFBZ0RSLEdBQWhELEVBQXFEO0FBQ2pEbEIsbUJBQUtMLEtBQUwsQ0FBVzY5QyxlQUFYLENBQTJCL2pDLFNBQTNCLENBQXFDelosS0FBS0wsS0FBTCxDQUFXcU4sUUFBWCxDQUFvQjlMLENBQXBCLENBQXJDO0FBQ0g7QUFDRDJDLGNBQUUsSUFBRixFQUFRNjBCLFdBQVIsQ0FBb0IsY0FBcEI7QUFDQTcwQixjQUFFLElBQUYsRUFBUThZLFFBQVIsQ0FBaUIsWUFBakI7QUFDSDtBQUNKLFNBZkQ7QUFnQkE5WSxVQUFFbzlDLG1CQUFGLEVBQXVCdGtDLFFBQXZCLENBQWdDLDBDQUFoQztBQUNBc2tDLDRCQUFvQnhyQyxTQUFwQixHQUFpQzByQyxzQkFBc0J0cEIsY0FBY25MLG9DQUFyRTtBQUNBdTBCLDRCQUFvQnhyQyxTQUFwQixHQUFnQ3dyQyxvQkFBb0J4ckMsU0FBcEIsR0FBOEIsR0FBOUQ7QUFDQWttQyx3QkFBZ0JubUMsV0FBaEIsQ0FBNEJ5ckMsbUJBQTVCO0FBQ0g7O0FBRUQvQyxxQkFBZTFvQyxXQUFmLENBQTJCbW1DLGVBQTNCOztBQUVBLFdBQUswQyxVQUFMLEdBQWtCajFDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBbEI7QUFDQSxXQUFLZzFDLFVBQUwsQ0FBZ0IvMEMsU0FBaEIsR0FBNEIsNkJBQTVCO0FBQ0E0MEMscUJBQWUxb0MsV0FBZixDQUEyQixLQUFLNm9DLFVBQWhDOztBQUVBcitDLFdBQUswSCxJQUFMLEdBQVkxSCxLQUFLbU8sU0FBTCxDQUFlMHVCLE9BQWYsQ0FBdUI7QUFDakNyN0IsY0FBTXhCLEtBQUt3QixJQURzQjtBQUVqQ3M3Qix1QkFBZTtBQUNiekUsb0JBQVVyNEIsS0FBS3dCLElBREY7QUFFYjhILHFCQUFXLGdEQUFnRHRKLEtBQUs4TyxLQUZuRDtBQUdiaXVCLHdCQUFjO0FBSEQsU0FGa0I7QUFPakNDLHlCQUFpQixDQUNmLEVBQUNDLFNBQVNqOUIsS0FBS21PLFNBQUwsQ0FBZXV1QixnQkFBekIsRUFBMkM3MUIsU0FBU3EzQyxjQUFwRCxFQURlLEVBRWYsRUFBQ2poQixTQUFTajlCLEtBQUttTyxTQUFMLENBQWUrdUIsVUFBekIsRUFBcUNyMkIsU0FBUzdHLEtBQUttTyxTQUFMLENBQWVndkIsY0FBN0QsRUFGZTtBQVBnQixPQUF2QixDQUFaO0FBWUEsVUFBSSxLQUFLcHVCLFdBQUwsQ0FBaUJzeUMsU0FBakIsQ0FBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsTUFBcUMsSUFBekMsRUFBK0M7QUFDN0MsYUFBS3R5QyxXQUFMLEdBQW1CLEtBQUtBLFdBQUwsQ0FBaUJzeUMsU0FBakIsQ0FBMkIsQ0FBM0IsRUFBOEIsS0FBS3R5QyxXQUFMLENBQWlCck4sTUFBL0MsQ0FBbkI7QUFDRDtBQUNEdy9DLGlCQUFXLHVEQUF1RGxoRCxLQUFLOE8sS0FBdkU7QUFDQTtBQUNBLFVBQUksS0FBS0MsV0FBTCxDQUFpQnJOLE1BQWpCLEdBQTBCLENBQTlCLEVBQWlDO0FBQzdCLFlBQUk0L0MsVUFBVWw0QyxTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQWQ7QUFBQSxZQUNJazRDLFVBREo7O0FBR0E7QUFDQW40QyxpQkFBU280QyxJQUFULENBQWNoc0MsV0FBZCxDQUEwQjhyQyxPQUExQjs7QUFFQTtBQUNBQyxxQkFBYUQsUUFBUUcsS0FBckI7QUFDRjtBQUNBLFlBQUlGLFdBQVdHLE9BQVgsSUFBc0IsT0FBT3Q0QyxTQUFTdTRDLFdBQVQsQ0FBcUIsQ0FBckIsRUFBd0JELE9BQS9CLEtBQTJDLFVBQXJFLEVBQWlGO0FBQzdFSCxxQkFBV0csT0FBWCxDQUFtQlIsV0FBVyxTQUE5QixFQUF5QyxpQkFBZ0IsS0FBS255QyxXQUFyQixHQUFrQyxJQUEzRTtBQUNILFNBRkQsTUFFTztBQUNId3lDLHFCQUFXSyxVQUFYLENBQXNCVixXQUFXLHdCQUFYLEdBQXFDLEtBQUtueUMsV0FBMUMsR0FBdUQsS0FBN0UsRUFBb0YsQ0FBcEY7QUFDSDtBQUVGO0FBQ0QsV0FBS3d0QixRQUFMO0FBQ0QsS0EvRm1IOztBQWlHcEg7Ozs7O0FBS0FBLGNBQVUsb0JBQVk7QUFDcEIsV0FBSzcwQixJQUFMLENBQVU2MEIsUUFBVjtBQUNBLFVBQUksQ0FBQyxLQUFLeWtCLGFBQVYsRUFBeUI7QUFDdkIsYUFBSy9DLFdBQUw7QUFDRDtBQUNGLEtBM0dtSDs7QUE2R3BIOzs7OztBQUtBelgsZ0JBQVksb0JBQVVnRixVQUFWLEVBQXNCO0FBQ2hDLFVBQUlBLFVBQUosRUFBZ0I7QUFDZCxZQUFJLE9BQU9BLFVBQVAsS0FBc0IsUUFBMUIsRUFBb0M7QUFDbEMsZUFBSzZTLFVBQUwsQ0FBZ0I1b0MsU0FBaEIsR0FBNEIrMUIsVUFBNUI7QUFDRCxTQUZELE1BRU87QUFDTCxjQUFJO0FBQ0YsZ0JBQUksS0FBSzZTLFVBQUwsQ0FBZ0JDLFVBQXBCLEVBQWdDO0FBQzlCLG1CQUFLRCxVQUFMLENBQWdCbmIsWUFBaEIsQ0FBNkJzSSxVQUE3QixFQUF5QyxLQUFLNlMsVUFBTCxDQUFnQkMsVUFBekQ7QUFDRCxhQUZELE1BRU87QUFDTCxtQkFBS0QsVUFBTCxDQUFnQjdvQyxXQUFoQixDQUE0QmcyQixVQUE1QjtBQUNEO0FBQ0YsV0FORCxDQU1FLE9BQU85MUIsQ0FBUCxFQUFVO0FBQ1Y7QUFDQS9VLG9CQUFRQyxJQUFSLENBQWE4VSxFQUFFNmxDLE9BQWY7QUFDQTtBQUNEO0FBQ0Y7QUFDRjtBQUNELGFBQU8sS0FBSzhDLFVBQUwsQ0FBZ0I1b0MsU0FBdkI7QUFDRCxLQXJJbUg7O0FBdUlwSDs7Ozs7QUFLQXdvQyxpQkFBYSx1QkFBWTtBQUN2QixVQUFJaitDLElBQUosRUFDRXUrQyxhQURGOztBQUdBditDLGFBQU8sSUFBUDtBQUNBLFdBQUttTyxTQUFMLENBQWV0TixPQUFmLENBQXVCb2EsSUFBdkI7O0FBRUFzakMsc0JBQWdCLHVCQUFVdnhDLFFBQVYsRUFBb0I7QUFDbENoTixhQUFLNmhELFdBQUwsR0FBbUJ6NEMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFuQjtBQUNBeEYsVUFBRTdELEtBQUs2aEQsV0FBUCxFQUFvQmxsQyxRQUFwQixDQUE2QnBULHdFQUFZQSxDQUFDNnJCLG1CQUExQztBQUNBcDFCLGFBQUt3bUMsVUFBTCxDQUFnQnhtQyxLQUFLNmhELFdBQXJCO0FBQ0E3aEQsYUFBS3krQyxRQUFMLENBQWN6eEMsUUFBZCxFQUF3QmhOLEtBQUs2aEQsV0FBN0IsRUFBMEMsRUFBQ3hDLGFBQWEsSUFBZCxFQUExQztBQUNBci9DLGFBQUt1L0IsV0FBTCxHQUFtQixJQUFuQjtBQUNBdi9CLGFBQUtnaEQsYUFBTCxHQUFxQixJQUFyQjtBQUNBaGhELGFBQUttTyxTQUFMLENBQWV0TixPQUFmLENBQXVCQyxJQUF2QjtBQUNBZCxhQUFLbU8sU0FBTCxDQUFleTFCLE1BQWY7QUFDRCxPQVRELENBUHVCLENBZ0JwQjs7QUFFSDJhLG9CQUFjLEtBQUs1K0MsS0FBTCxDQUFXcU4sUUFBekI7QUFDRCxLQS9KbUgsRUErSmpIOztBQUVIOzs7Ozs7O0FBT0F5eEMsY0FBVSxrQkFBVUUsUUFBVixFQUFvQkMsY0FBcEIsRUFBb0MvK0MsT0FBcEMsRUFBNkM7QUFDckQsVUFBSXFCLENBQUosRUFDRXU1QyxPQURGLEVBRUVueUMsSUFGRixFQUdFaEcsS0FIRixFQUlFckIsR0FKRixFQUtFNDlDLFFBTEYsRUFNRUksS0FORixFQU9FQyxNQVBGLEVBUUVDLGdCQVJGLEVBU0VuL0MsSUFURixFQVVFOGhELFFBVkYsRUFXRXh6QyxNQVhGLEVBWUV5ekMsWUFaRjs7QUFjQWxpRCxnQkFBVUEsV0FBVyxFQUFyQjtBQUNBQSxnQkFBVWdFLEVBQUVILE1BQUYsQ0FBUztBQUNqQjI3QyxxQkFBYTtBQURJLE9BQVQsRUFFUHgvQyxPQUZPLENBQVY7O0FBSUFHLGFBQU8sSUFBUDs7QUFFQW0vQyx5QkFBbUIsMEJBQVN4bUIsS0FBVCxFQUFnQjtBQUNqQyxZQUFJdm9CLE9BQUo7O0FBRUF1b0IsY0FBTThZLGNBQU47QUFDQTtBQUNBcmhDLGtCQUFVdk0sRUFBRSxJQUFGLEVBQVF4RCxJQUFSLENBQWEsS0FBYixDQUFWO0FBQ0EsWUFBSUwsS0FBS0wsS0FBTCxDQUFXd1EsY0FBWCxDQUEwQkMsT0FBMUIsQ0FBSixFQUF3QztBQUN0QztBQUNBdk0sWUFBRSxJQUFGLEVBQVE2MEIsV0FBUixDQUFvQm52Qix3RUFBWUEsQ0FBQ3VULE1BQWpDO0FBQ0FqWixZQUFFLElBQUYsRUFBUThZLFFBQVIsQ0FBaUJwVCx3RUFBWUEsQ0FBQ2dvQixRQUE5QjtBQUNBdnhCLGVBQUt3WixTQUFMLENBQWVwSixPQUFmO0FBQ0QsU0FMRCxNQUtPO0FBQ0w7QUFDQXZNLFlBQUUsSUFBRixFQUFRNjBCLFdBQVIsQ0FBb0JudkIsd0VBQVlBLENBQUNnb0IsUUFBakM7QUFDQTF0QixZQUFFLElBQUYsRUFBUThZLFFBQVIsQ0FBaUJwVCx3RUFBWUEsQ0FBQ3VULE1BQTlCO0FBQ0E5YyxlQUFLeVosU0FBTCxDQUFlckosT0FBZjtBQUNEO0FBQ0YsT0FqQkQ7O0FBbUJBO0FBQ0EsV0FBS3pRLEtBQUwsQ0FBV29jLHFCQUFYLENBQWlDamEsSUFBakMsQ0FBc0MsVUFBVTRjLE9BQVYsRUFBbUI7QUFDdkQsWUFBSXZkLENBQUosRUFDRTZnRCxZQURGOztBQUdBQSx1QkFBZWhpRCxLQUFLZ0csTUFBTCxDQUFZMFksT0FBWixDQUFmO0FBQ0EsWUFBSXNqQyxnQkFBZ0JBLGFBQWFDLFFBQWpDLEVBQTJDO0FBQ3pDLGVBQUs5Z0QsSUFBSSxDQUFULEVBQVlBLElBQUk2Z0QsYUFBYUMsUUFBYixDQUFzQnZnRCxNQUF0QyxFQUE4Q1AsS0FBSyxDQUFuRCxFQUFzRDtBQUNwRCxnQkFBSW5CLEtBQUtMLEtBQUwsQ0FBV3dRLGNBQVgsQ0FBMEJ1TyxPQUExQixDQUFKLEVBQXdDO0FBQ3RDc2pDLDJCQUFhQyxRQUFiLENBQXNCOWdELENBQXRCLEVBQXlCd2IsUUFBekIsQ0FBa0NwVCx3RUFBWUEsQ0FBQ3VULE1BQS9DLEVBQXVENGIsV0FBdkQsQ0FBbUVudkIsd0VBQVlBLENBQUNnb0IsUUFBaEY7QUFDRCxhQUZELE1BRU87QUFDTHl3QiwyQkFBYUMsUUFBYixDQUFzQjlnRCxDQUF0QixFQUF5QndiLFFBQXpCLENBQWtDcFQsd0VBQVlBLENBQUNnb0IsUUFBL0MsRUFBeURtSCxXQUF6RCxDQUFxRW52Qix3RUFBWUEsQ0FBQ3VULE1BQWxGO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsT0FkRCxFQTFDcUQsQ0F3RGpEOztBQUVKO0FBQ0E7QUFDQSxXQUFLbmQsS0FBTCxDQUFXdWlELGFBQVgsQ0FBeUJwZ0QsSUFBekIsQ0FBOEIsWUFBWTtBQUN4QyxZQUFJWCxDQUFKLEVBQ0VRLEVBREYsRUFFRVcsS0FGRjs7QUFJQSxhQUFLWCxFQUFMLElBQVczQixLQUFLZ0csTUFBaEIsRUFBd0I7QUFDdEIsY0FBSWhHLEtBQUtnRyxNQUFMLENBQVlZLGNBQVosQ0FBMkJqRixFQUEzQixDQUFKLEVBQW9DO0FBQ2xDVyxvQkFBUXRDLEtBQUtnRyxNQUFMLENBQVlyRSxFQUFaLENBQVI7QUFDQSxnQkFBSVcsU0FBU0EsTUFBTTIvQyxRQUFuQixFQUE2QjtBQUMzQixtQkFBSzlnRCxJQUFJLENBQVQsRUFBWUEsSUFBSW1CLE1BQU0yL0MsUUFBTixDQUFldmdELE1BQS9CLEVBQXVDUCxLQUFLLENBQTVDLEVBQStDO0FBQzdDLG9CQUFJbkIsS0FBS0wsS0FBTCxDQUFXcVEseUJBQVgsQ0FBcUNyTyxFQUFyQyxDQUFKLEVBQThDO0FBQzVDVyx3QkFBTTIvQyxRQUFOLENBQWU5Z0QsQ0FBZixFQUFrQnUzQixXQUFsQixDQUE4Qm52Qix3RUFBWUEsQ0FBQzRuQixRQUEzQztBQUNELGlCQUZELE1BRU87QUFDTDd1Qix3QkFBTTIvQyxRQUFOLENBQWU5Z0QsQ0FBZixFQUFrQndiLFFBQWxCLENBQTJCcFQsd0VBQVlBLENBQUM0bkIsUUFBeEM7QUFDRDtBQUNGO0FBQ0Y7QUFDRjtBQUNGO0FBQ0YsT0FuQkQsRUE1RHFELENBK0VqRDs7QUFFSjtBQUNBc3BCLGdCQUFVNTZDLFFBQVF3L0MsV0FBUixHQUFzQmoyQyxTQUFTQyxhQUFULENBQXVCLElBQXZCLENBQXRCLEdBQXFERCxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQS9EO0FBQ0EsVUFBSXMxQyxZQUFZQSxTQUFTajlDLE1BQVQsR0FBa0IsQ0FBbEMsRUFBcUM7QUFDbkMsYUFBS1IsSUFBSSxDQUFULEVBQVlBLElBQUl5OUMsU0FBU2o5QyxNQUF6QixFQUFpQ1IsS0FBSyxDQUF0QyxFQUF5QztBQUN2Q0QsZ0JBQU0wOUMsU0FBU3o5QyxDQUFULENBQU47QUFDQTtBQUNBb0Isa0JBQVEsS0FBSzNDLEtBQUwsQ0FBVzY5QyxlQUFYLENBQTJCaHhDLFNBQTNCLENBQXFDdkwsR0FBckMsQ0FBUjtBQUNBO0FBQ0EsY0FBSSxFQUFFcUIsTUFBTXFOLGFBQU4sSUFBdUIsSUFBdkIsSUFBZ0NyTixNQUFNd00sS0FBTixJQUFlLEtBQUtBLEtBQXRELENBQUosRUFBbUU7QUFDakU7QUFDRDtBQUNEO0FBQ0EsY0FBSXhNLE1BQU1tTixJQUFOLEtBQWUsU0FBbkIsRUFBOEI7QUFDNUI7QUFDRDtBQUNEO0FBQ0EsY0FBSW5OLE1BQU0yYyxhQUFOLEtBQXdCLElBQTVCLEVBQWtDO0FBQ2hDO0FBQ0Q7QUFDRCxjQUFJM2MsTUFBTXhCLElBQU4sS0FBZSxHQUFuQixFQUF3QjtBQUN0QixnQkFBSSxLQUFLbkIsS0FBTCxDQUFXd1EsY0FBWCxDQUEwQjdOLE1BQU1YLEVBQWhDLENBQUosRUFBeUM7QUFDdkM7QUFDRDtBQUNGO0FBQ0Q7QUFDQSxjQUFJLENBQUNXLE1BQU1zTixPQUFYLEVBQW9CO0FBQ2xCO0FBQ0Q7QUFDRHRILGlCQUFPLEVBQVA7QUFDQSxlQUFLdEMsTUFBTCxDQUFZL0UsR0FBWixJQUFtQnFILElBQW5CO0FBQ0F1MkMscUJBQVdoL0MsUUFBUXcvQyxXQUFSLEdBQXNCajJDLFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBdEIsR0FBcURELFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBaEU7QUFDQWYsZUFBSzY1QyxhQUFMLEdBQXFCNzVDLEtBQUs2NUMsYUFBTCxJQUFzQixFQUEzQztBQUNBNzVDLGVBQUs2NUMsYUFBTCxDQUFtQnJnRCxJQUFuQixDQUF3Qis4QyxRQUF4QjtBQUNBSSxrQkFBUTcxQyxTQUFTQyxhQUFULENBQXVCLEdBQXZCLENBQVI7QUFDQTQxQyxnQkFBTTFwQyxZQUFOLENBQW1CLE1BQW5CLEVBQTJCLEdBQTNCO0FBQ0EwcEMsZ0JBQU16cEMsV0FBTixDQUFrQnBNLFNBQVNzMkMsY0FBVCxDQUF3QnA5QyxNQUFNcU0sU0FBTixJQUFtQnJNLE1BQU1kLElBQWpELENBQWxCO0FBQ0FxOUMsbUJBQVNycEMsV0FBVCxDQUFxQnlwQyxLQUFyQjtBQUNBQyxtQkFBU3I3QyxFQUFFbzdDLEtBQUYsQ0FBVDtBQUNBMzJDLGVBQUsyNUMsUUFBTCxHQUFnQjM1QyxLQUFLMjVDLFFBQUwsSUFBaUIsRUFBakM7QUFDQTM1QyxlQUFLMjVDLFFBQUwsQ0FBY25nRCxJQUFkLENBQW1CbzlDLE1BQW5CO0FBQ0FBLGlCQUFPNytDLElBQVAsQ0FBWSxLQUFaLEVBQW1CWSxHQUFuQjtBQUNBaStDLGlCQUFPN2tCLEtBQVAsQ0FBYThrQixnQkFBYjs7QUFFQTtBQUNBLGNBQUk3OEMsTUFBTW1NLGFBQVYsRUFBeUI7QUFDdkJILHFCQUFTbEYsU0FBU0MsYUFBVCxDQUF1QixNQUF2QixDQUFUO0FBQ0F4RixjQUFFZzdDLFFBQUYsRUFBWWxpQyxRQUFaLENBQXFCcFQsd0VBQVlBLENBQUN3ZixLQUFsQztBQUNBbGxCLGNBQUV5SyxNQUFGLEVBQVVxTyxRQUFWLENBQW1CcFQsd0VBQVlBLENBQUM2bkIsSUFBaEM7QUFDQXZ0QixjQUFFeUssTUFBRixFQUFVK3JCLEtBQVYsQ0FBZ0IsWUFBWTtBQUMxQixrQkFBSXgyQixFQUFFLElBQUYsRUFBUW90QyxNQUFSLEdBQWlCL3dCLFFBQWpCLENBQTBCM1csd0VBQVlBLENBQUN3ZixLQUF2QyxDQUFKLEVBQW1EO0FBQ2pEbGxCLGtCQUFFLElBQUYsRUFBUW90QyxNQUFSLEdBQWlCdlksV0FBakIsQ0FBNkJudkIsd0VBQVlBLENBQUN3ZixLQUExQyxFQUFpRHBNLFFBQWpELENBQTBEcFQsd0VBQVlBLENBQUN5bkIsSUFBdkU7QUFDRCxlQUZELE1BRU87QUFDTG50QixrQkFBRSxJQUFGLEVBQVFvdEMsTUFBUixHQUFpQnZZLFdBQWpCLENBQTZCbnZCLHdFQUFZQSxDQUFDeW5CLElBQTFDLEVBQWdEclUsUUFBaEQsQ0FBeURwVCx3RUFBWUEsQ0FBQ3dmLEtBQXRFO0FBQ0Q7QUFDRCxrQkFBSS9vQixLQUFLTCxLQUFMLENBQVdFLE9BQVgsQ0FBbUJELGFBQW5CLENBQWlDMi9DLGtCQUFyQyxFQUF5RDtBQUN2RHYvQyxxQkFBS0wsS0FBTCxDQUFXRSxPQUFYLENBQW1CRCxhQUFuQixDQUFpQzIvQyxrQkFBakMsQ0FBb0QvMkMsT0FBcEQsQ0FBNEQsVUFBVTNCLE9BQVYsRUFBbUI7QUFDN0VoRCxvQkFBRWdELE9BQUYsRUFBV2dXLEdBQVgsQ0FBZSxPQUFmLEVBQXdCN2MsS0FBS21PLFNBQUwsQ0FBZXk2QixTQUFmLENBQXlCQyxXQUFqRDtBQUNELGlCQUZEO0FBR0Q7QUFDRGhsQyxnQkFBRTdELEtBQUttTyxTQUFMLENBQWV0SCxPQUFqQixFQUEwQmdXLEdBQTFCLENBQThCLE9BQTlCLEVBQXVDN2MsS0FBS21PLFNBQUwsQ0FBZXk2QixTQUFmLENBQXlCQyxXQUFoRTtBQUVELGFBYkQ7QUFjQWhsQyxjQUFFeUssTUFBRixFQUFVOHpDLFlBQVYsQ0FBdUJsRCxNQUF2QjtBQUNBNkMsMkJBQWVsaUQsUUFBUXcvQyxXQUFSLEdBQXNCajJDLFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBdEIsR0FBcURELFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBcEU7QUFDQWYsaUJBQUsrNUMsYUFBTCxHQUFxQi81QyxLQUFLKzVDLGFBQUwsSUFBc0IsRUFBM0M7QUFDQS81QyxpQkFBSys1QyxhQUFMLENBQW1CdmdELElBQW5CLENBQXdCaWdELFlBQXhCO0FBQ0FsRCxxQkFBU3JwQyxXQUFULENBQXFCdXNDLFlBQXJCO0FBQ0Q7O0FBRUQsY0FBSSxLQUFLcGlELEtBQUwsQ0FBV3dRLGNBQVgsQ0FBMEJsUCxHQUExQixDQUFKLEVBQW9DO0FBQ2xDaStDLG1CQUFPdmlDLFFBQVAsQ0FBZ0JwVCx3RUFBWUEsQ0FBQ3VULE1BQTdCO0FBQ0QsV0FGRCxNQUVPO0FBQ0xvaUMsbUJBQU92aUMsUUFBUCxDQUFnQnBULHdFQUFZQSxDQUFDZ29CLFFBQTdCO0FBQ0Q7QUFDRCxjQUFJLEtBQUt2ckIsTUFBTCxDQUFZMUQsTUFBTWlKLEdBQWxCLENBQUosRUFBNEI7QUFDMUI7QUFDQXUyQyx1QkFBVyxLQUFLOTdDLE1BQUwsQ0FBWTFELE1BQU1pSixHQUFsQixFQUF1QjgyQyxhQUFsQztBQUNBLGdCQUFJUCxRQUFKLEVBQWM7QUFDWkEsdUJBQVNBLFNBQVNwZ0QsTUFBVCxHQUFrQixDQUEzQixFQUE4QjhULFdBQTlCLENBQTBDcXBDLFFBQTFDO0FBQ0Q7QUFDRixXQU5ELE1BTU87QUFDTHBFLG9CQUFRamxDLFdBQVIsQ0FBb0JxcEMsUUFBcEI7QUFDRDtBQUNGLFNBakZrQyxDQWlGakM7QUFDRjtBQUNBLFlBQUksS0FBSzF3QyxTQUFMLENBQWV0TyxPQUFmLENBQXVCcTlDLE1BQTNCLEVBQW1DO0FBQ2pDLGNBQUk0QyxLQUFLMTJDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVDtBQUNBeTJDLGFBQUd4MkMsU0FBSCxHQUFlLHlDQUFmO0FBQ0EsY0FBSTR6QyxTQUFTOXpDLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBYjtBQUNBNnpDLGlCQUFPenRDLElBQVAsR0FBYyxNQUFkO0FBQ0F5dEMsaUJBQU82QyxXQUFQLEdBQXFCLEVBQXJCLENBTGlDLENBS1I7QUFDekIsY0FBSTcrQyxJQUFJa0ksU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQUFSO0FBQ0FuSSxZQUFFb0ksU0FBRixHQUFjLGVBQWQ7QUFDQXBJLFlBQUVxVSxZQUFGLENBQWUsYUFBZixFQUE4QixNQUE5QjtBQUNBdXFDLGFBQUd0cUMsV0FBSCxDQUFlMG5DLE1BQWY7QUFDQTRDLGFBQUd0cUMsV0FBSCxDQUFldFUsQ0FBZjtBQUNBZzhDLGlCQUFPOEMsT0FBUCxHQUFpQixZQUFZO0FBQzNCLHFCQUFTQyxXQUFULENBQXFCcDVDLE9BQXJCLEVBQThCcTVDLFdBQTlCLEVBQTJDOztBQUV6Qzs7QUFFQUEsNEJBQWNBLGVBQWUsS0FBN0IsQ0FKeUMsQ0FJSjs7QUFFckM7Ozs7QUFJQSx1QkFBU0Msb0JBQVQsQ0FBOEJ0NUMsT0FBOUIsRUFBdUN1NUMsT0FBdkMsRUFBZ0Q7QUFDOUMsb0JBQUlDLFFBQVEsRUFBWjtBQUNBLHFCQUFLLElBQUluL0MsSUFBSSxDQUFiLEVBQWdCQSxJQUFJMkYsUUFBUXFPLFFBQVIsQ0FBaUJ4VCxNQUFyQyxFQUE2Q1IsR0FBN0MsRUFBa0Q7QUFDaEQsc0JBQUkyRixRQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLEVBQW9Cay9DLE9BQXBCLENBQTRCNWIsV0FBNUIsTUFBNkM0YixRQUFRNWIsV0FBUixFQUFqRCxFQUF3RTtBQUN0RTZiLDBCQUFNditDLElBQU4sQ0FBVytFLFFBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsQ0FBWDtBQUNEO0FBQ0Y7QUFDRCxvQkFBSW0vQyxNQUFNMytDLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNwQix5QkFBTzIrQyxNQUFNLENBQU4sQ0FBUCxDQURvQixDQUNIO0FBQ2xCLGlCQUZELE1BRU87QUFDTCx5QkFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFFRCxrQkFBSUMsY0FBYyxLQUFsQjtBQUNBLGtCQUFJQyxpQkFBaUIsS0FBckI7QUFDQTtBQUNBLG1CQUFLLElBQUlyL0MsSUFBSSxDQUFiLEVBQWdCQSxJQUFJMkYsUUFBUXFPLFFBQVIsQ0FBaUJ4VCxNQUFyQyxFQUE2Q1IsR0FBN0MsRUFBa0Q7QUFDaEQyRix3QkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQndCLEtBQXBCLENBQTBCa04sT0FBMUIsR0FBb0MsT0FBcEM7O0FBRUEsb0JBQUk0d0MsVUFBVSxLQUFkOztBQUVBO0FBQ0Esb0JBQUkzNUMsUUFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQmlVLG9CQUFwQixDQUF5QyxHQUF6QyxFQUE4QyxDQUE5QyxFQUFpRE0sU0FBakQsQ0FBMkQrdUIsV0FBM0QsR0FBeUU1K0IsT0FBekUsQ0FBaUZzM0MsT0FBT3BxQyxLQUFQLENBQWEweEIsV0FBYixFQUFqRixLQUFnSCxDQUFwSCxFQUF1SDtBQUNySDtBQUNBZ2MsNEJBQVUsSUFBVjtBQUNEOztBQUVEO0FBQ0Esb0JBQUlDLEtBQUtOLHFCQUFxQnQ1QyxRQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLENBQXJCLEVBQTBDLElBQTFDLENBQVQ7O0FBRUEsb0JBQUl1L0MsRUFBSixFQUFRO0FBQ047QUFDQSxzQkFBSUMsYUFBYSxJQUFqQjtBQUNBSCxtQ0FBaUJOLFlBQVlRLEVBQVosRUFBZ0JQLGVBQWVNLE9BQS9CLENBQWpCO0FBQ0QsaUJBSkQsTUFJTztBQUNMLHNCQUFJRSxhQUFhLEtBQWpCO0FBQ0Q7O0FBRUQsb0JBQUlGLFdBQVdELGNBQVgsSUFBNkJMLFdBQWpDLEVBQThDO0FBQzVDSSxnQ0FBYyxJQUFkLENBRDRDLENBQ3hCO0FBQ3BCO0FBQ0F6NUMsMEJBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsRUFBb0J3QixLQUFwQixDQUEwQmtOLE9BQTFCLEdBQW9DLEVBQXBDOztBQUVBLHNCQUFJc3RDLE9BQU9wcUMsS0FBUCxDQUFhcFIsTUFBYixHQUFzQixDQUExQixFQUE2QjtBQUMzQm1GLDRCQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLEVBQW9CeS9DLFNBQXBCLENBQThCcmQsTUFBOUIsQ0FBcUMsV0FBckM7QUFDQXo4Qiw0QkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQnkvQyxTQUFwQixDQUE4QkMsR0FBOUIsQ0FBa0MsVUFBbEM7QUFDRDs7QUFFRC81QywwQkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQnkvQyxTQUFwQixDQUE4QnJkLE1BQTlCLENBQXFDLDRCQUFyQyxFQVY0QyxDQVV3QjtBQUNwRSxzQkFBSWtkLFdBQVd0RCxPQUFPcHFDLEtBQVAsQ0FBYXBSLE1BQWIsR0FBc0IsQ0FBckMsRUFBd0M7QUFDdENtRiw0QkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQnkvQyxTQUFwQixDQUE4QkMsR0FBOUIsQ0FBa0MsNEJBQWxDO0FBQ0Q7QUFDRixpQkFkRCxNQWNPO0FBQ0w7QUFDQS81QywwQkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQndCLEtBQXBCLENBQTBCa04sT0FBMUIsR0FBb0MsTUFBcEM7QUFDQS9JLDBCQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLEVBQW9CeS9DLFNBQXBCLENBQThCcmQsTUFBOUIsQ0FBcUMsVUFBckM7QUFDQXo4QiwwQkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQnkvQyxTQUFwQixDQUE4QkMsR0FBOUIsQ0FBa0MsV0FBbEM7QUFDQS81QywwQkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQnkvQyxTQUFwQixDQUE4QnJkLE1BQTlCLENBQXFDLDRCQUFyQztBQUNEO0FBRUY7O0FBRUQsa0JBQUlnZCxXQUFKLEVBQWlCO0FBQ2YsdUJBQU8sSUFBUDtBQUNELGVBRkQsTUFFTztBQUNMLHVCQUFPLEtBQVA7QUFDRDtBQUNGOztBQUVEO0FBQ0FPLHVCQUFXLFlBQVk7QUFDckI7QUFDQSxrQkFBSTNELE9BQU9wcUMsS0FBUCxDQUFhcFIsTUFBYixJQUF1QixDQUEzQixFQUE4QnUrQyxZQUFZNzJDLFNBQVMwM0MsYUFBVCxDQUF1QixrQ0FBdkIsQ0FBWjtBQUMvQixhQUhELEVBR0csR0FISDtBQUtELFdBdkZEOztBQXlGQWxDLHlCQUFlcHBDLFdBQWYsQ0FBMkJzcUMsRUFBM0I7QUFDRDtBQUNEbEIsdUJBQWVwcEMsV0FBZixDQUEyQmlsQyxPQUEzQjtBQUNEO0FBQ0YsS0F0Ym1ILEVBc2JqSDs7QUFFSGhoQyxlQUFXLG1CQUFTckosT0FBVCxFQUFrQjtBQUMzQixVQUFJLEtBQUt6USxLQUFMLENBQVd3USxjQUFYLENBQTBCQyxPQUExQixDQUFKLEVBQXdDO0FBQ3RDLGVBQU8sSUFBUDtBQUNELE9BRkQsTUFFTztBQUNMLGFBQUt6USxLQUFMLENBQVc2OUMsZUFBWCxDQUEyQi9qQyxTQUEzQixDQUFxQ3JKLE9BQXJDO0FBQ0Q7QUFDRixLQTlibUgsRUE4YmpIOztBQUVIb0osZUFBVyxtQkFBU3BKLE9BQVQsRUFBa0I7QUFDM0IsVUFBSSxDQUFDLEtBQUt6USxLQUFMLENBQVd3USxjQUFYLENBQTBCQyxPQUExQixDQUFMLEVBQXlDO0FBQ3ZDLGVBQU8sSUFBUDtBQUNELE9BRkQsTUFFTztBQUNMLGFBQUt6USxLQUFMLENBQVc2OUMsZUFBWCxDQUEyQmhrQyxTQUEzQixDQUFxQ3BKLE9BQXJDO0FBQ0Q7QUFDRixLQXRjbUgsQ0FzY2pIOzs7QUF0Y2lILEdBQS9ELENBQXZELENBM0NpQixDQW9mYjtBQUVMLENBdGZBLEVBc2ZDblEsTUF0ZkQsRUFzZlMsS0FBS3FNLEdBdGZkLENBQUQ7O0FBd2ZPLElBQUk4QyxZQUFZLEtBQUs5QyxHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxDQUFzQm9tQixlQUF0QixDQUFzQzV1QyxTQUF0RCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hoQlA7QUFDQTs7QUFFQSxLQUFLOUMsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsR0FBd0IsS0FBS3RyQixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxJQUF5QixFQUFqRDtBQUNBLEtBQUt0ckIsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsQ0FBc0JvbUIsZUFBdEIsR0FBd0MsS0FBSzF4QyxHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxDQUFzQm9tQixlQUF0QixJQUF5QyxFQUFqRjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSW5tQixnQkFBZ0IsRUFBcEI7O0FBRUEsSUFBSSxPQUFPN3VCLE9BQVAsS0FBbUIsV0FBdkIsRUFBb0M7QUFDbEMsTUFBSUEsUUFBUTh1QixJQUFSLEtBQWlCLElBQXJCLEVBQTJCO0FBQ3pCRCxvQkFBZ0JoSCx1RkFBaEI7QUFDRCxHQUZELE1BRU8sSUFBSTduQixRQUFROHVCLElBQVIsS0FBaUIsSUFBckIsRUFBMkI7QUFDaENELG9CQUFnQjlHLHdGQUFoQjtBQUNELEdBRk0sTUFFQTtBQUNMO0FBQ0E4RyxvQkFBZ0JoSCx1RkFBaEI7QUFDRDtBQUNGOztBQUVBLFdBQVVodEIsQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7Ozs7OztBQU1BQSxNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJvbUIsZUFBakIsQ0FBaUNMLGFBQWpDLEdBQWlELFVBQVV4dkMsU0FBVixFQUFxQjtBQUNwRSxRQUFJLENBQUNBLFNBQUwsRUFBZ0I7QUFDZHhOLGNBQVFDLElBQVIsQ0FBYSxzREFBYjtBQUNBLGFBQU8sS0FBUDtBQUNEOztBQUVELFNBQUsyK0IsV0FBTCxHQUFtQixLQUFuQjtBQUNBLFNBQUt2NUIsTUFBTCxHQUFjLEVBQWQ7O0FBRUEsU0FBS21JLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsU0FBS3hPLEtBQUwsR0FBYXdPLFVBQVV0TyxPQUFWLENBQWtCRCxhQUFsQixDQUFnQ0QsS0FBN0M7QUFDQSxTQUFLcThCLE1BQUw7QUFDQSxTQUFLaWlCLFdBQUw7QUFDRCxHQWJEOztBQWVBO0FBQ0EzeEMsTUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCb21CLGVBQWpCLENBQWlDTCxhQUFqQyxDQUErQ3ZrQixTQUEvQyxHQUEyRHYxQixFQUFFSCxNQUFGLENBQVM0SSxJQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJvbUIsZUFBakIsQ0FBaUNMLGFBQWpDLENBQStDdmtCLFNBQXhELEVBQW1FOztBQUU1SDRDLFlBQVEsa0JBQVk7QUFDbEIsVUFBSWg4QixJQUFKLEVBQ0lrK0MsY0FESixFQUVJdkMsZUFGSixFQUdJc0YsbUJBSEosRUFJSTlDLFdBSkosRUFLSWdELGtCQUxKOztBQU9BQSwyQkFBcUIsS0FBS2h6QyxTQUFMLENBQWV0TyxPQUFmLENBQXVCc2hELGtCQUE1Qzs7QUFFQW5oRCxhQUFPLElBQVA7O0FBRUFrK0MsdUJBQWlCOTBDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBakI7QUFDQXN5Qyx3QkFBa0J2eUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFsQjtBQUNBc3lDLHNCQUFnQnJ5QyxTQUFoQixHQUE0QixpQkFBNUI7O0FBRUEsVUFBRyxDQUFDLEtBQUs2RSxTQUFMLENBQWV0TyxPQUFmLENBQXVCbTRCLE1BQTNCLEVBQW1DO0FBQy9CMmpCLHdCQUFnQmxtQyxTQUFoQixHQUE2QjByQyxzQkFBc0J0cEIsY0FBY25MLG9DQUFqRTtBQUNILE9BRkQsTUFHSztBQUNEN29CLFVBQUU4M0MsZUFBRixFQUFtQmgvQixRQUFuQixDQUE0Qix3QkFBNUI7QUFDQXNrQyw4QkFBc0I3M0MsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQUF0QjtBQUNBNDNDLDRCQUFvQkcsT0FBcEIsR0FBOEIsWUFBWTtBQUN0QyxjQUFJdjlDLEVBQUUsSUFBRixFQUFRcWMsUUFBUixDQUFpQixZQUFqQixNQUFtQyxLQUF2QyxFQUE4QztBQUMxQyxpQkFBSyxJQUFJaGYsSUFBSSxDQUFiLEVBQWdCQSxJQUFJbEIsS0FBS0wsS0FBTCxDQUFXcU4sUUFBWCxDQUFvQnRMLE1BQXhDLEVBQWdEUixHQUFoRCxFQUFxRDtBQUNqRGxCLG1CQUFLTCxLQUFMLENBQVc2OUMsZUFBWCxDQUEyQmhrQyxTQUEzQixDQUFxQ3haLEtBQUtMLEtBQUwsQ0FBV3FOLFFBQVgsQ0FBb0I5TCxDQUFwQixDQUFyQztBQUNIO0FBQ0QyQyxjQUFFLElBQUYsRUFBUTYwQixXQUFSLENBQW9CLFlBQXBCO0FBQ0E3MEIsY0FBRSxJQUFGLEVBQVE4WSxRQUFSLENBQWlCLGNBQWpCO0FBQ0gsV0FORCxNQU9LO0FBQ0QsaUJBQUssSUFBSXpiLElBQUksQ0FBYixFQUFnQkEsSUFBSWxCLEtBQUtMLEtBQUwsQ0FBV3FOLFFBQVgsQ0FBb0J0TCxNQUF4QyxFQUFnRFIsR0FBaEQsRUFBcUQ7QUFDakRsQixtQkFBS0wsS0FBTCxDQUFXNjlDLGVBQVgsQ0FBMkIvakMsU0FBM0IsQ0FBcUN6WixLQUFLTCxLQUFMLENBQVdxTixRQUFYLENBQW9COUwsQ0FBcEIsQ0FBckM7QUFDSDtBQUNEMkMsY0FBRSxJQUFGLEVBQVE2MEIsV0FBUixDQUFvQixjQUFwQjtBQUNBNzBCLGNBQUUsSUFBRixFQUFROFksUUFBUixDQUFpQixZQUFqQjtBQUNIO0FBQ0osU0FmRDtBQWdCQTlZLFVBQUVvOUMsbUJBQUYsRUFBdUJ0a0MsUUFBdkIsQ0FBZ0MsMENBQWhDO0FBQ0Fza0MsNEJBQW9CeHJDLFNBQXBCLEdBQWlDMHJDLHNCQUFzQnRwQixjQUFjbkwsb0NBQXJFO0FBQ0F1MEIsNEJBQW9CeHJDLFNBQXBCLEdBQWdDd3JDLG9CQUFvQnhyQyxTQUFwQixHQUE4QixHQUE5RDtBQUNBa21DLHdCQUFnQm5tQyxXQUFoQixDQUE0QnlyQyxtQkFBNUI7QUFDSDs7QUFFRC9DLHFCQUFlMW9DLFdBQWYsQ0FBMkJtbUMsZUFBM0I7O0FBRUEsV0FBSzBDLFVBQUwsR0FBa0JqMUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFsQjtBQUNBLFdBQUtnMUMsVUFBTCxDQUFnQi8wQyxTQUFoQixHQUE0QkMsd0VBQVlBLENBQUM4ckIsK0JBQXpDO0FBQ0E4b0Isb0JBQWMvMEMsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQUFkO0FBQ0EsV0FBS2cxQyxVQUFMLENBQWdCN29DLFdBQWhCLENBQTRCMm9DLFdBQTVCO0FBQ0FELHFCQUFlMW9DLFdBQWYsQ0FBMkIsS0FBSzZvQyxVQUFoQzs7QUFFQXIrQyxXQUFLMEgsSUFBTCxHQUFZMUgsS0FBS21PLFNBQUwsQ0FBZTB1QixPQUFmLENBQXVCO0FBQ2pDcjdCLGNBQU0sZUFEMkI7QUFFakNzN0IsdUJBQWU7QUFDYnpFLG9CQUFXOG9CLHNCQUFzQnRwQixjQUFjbkwsb0NBRGxDO0FBRWJwakIscUJBQVdDLHdFQUFZQSxDQUFDbWpCLG9DQUZYO0FBR2JxUSx3QkFBYztBQUhELFNBRmtCO0FBT2pDQyx5QkFBaUIsQ0FDZixFQUFDQyxTQUFTajlCLEtBQUttTyxTQUFMLENBQWV1dUIsZ0JBQXpCLEVBQTJDNzFCLFNBQVNxM0MsY0FBcEQsRUFEZSxFQUVmLEVBQUNqaEIsU0FBU2o5QixLQUFLbU8sU0FBTCxDQUFlK3VCLFVBQXpCLEVBQXFDcjJCLFNBQVM3RyxLQUFLbU8sU0FBTCxDQUFlZ3ZCLGNBQTdELEVBRmU7QUFQZ0IsT0FBdkIsQ0FBWjtBQVlELEtBbEUySDs7QUFvRTVIOzs7OztBQUtBWixjQUFVLG9CQUFZO0FBQ3BCLFdBQUs3MEIsSUFBTCxDQUFVNjBCLFFBQVY7QUFDRCxLQTNFMkgsRUEyRXpIOztBQUVIOzs7OztBQUtBaUssZ0JBQVksb0JBQVVnRixVQUFWLEVBQXNCO0FBQ2hDLFVBQUlBLFVBQUosRUFBZ0I7QUFDZCxZQUFJLE9BQU9BLFVBQVAsS0FBc0IsUUFBMUIsRUFBb0M7QUFDbEMsZUFBSzZTLFVBQUwsQ0FBZ0I1b0MsU0FBaEIsR0FBNEIrMUIsVUFBNUI7QUFDRCxTQUZELE1BRU87QUFDTCxjQUFJO0FBQ0YsZ0JBQUksS0FBSzZTLFVBQUwsQ0FBZ0JDLFVBQXBCLEVBQWdDO0FBQzlCLG1CQUFLRCxVQUFMLENBQWdCbmIsWUFBaEIsQ0FBNkJzSSxVQUE3QixFQUF5QyxLQUFLNlMsVUFBTCxDQUFnQkMsVUFBekQ7QUFDRCxhQUZELE1BRU87QUFDTCxtQkFBS0QsVUFBTCxDQUFnQjdvQyxXQUFoQixDQUE0QmcyQixVQUE1QjtBQUNEO0FBQ0YsV0FORCxDQU1FLE9BQU85MUIsQ0FBUCxFQUFVO0FBQ1Y7QUFDQS9VLG9CQUFRQyxJQUFSLENBQWE4VSxFQUFFNmxDLE9BQWY7QUFDQTtBQUNEO0FBQ0Y7QUFDRjtBQUNELGFBQU8sS0FBSzhDLFVBQUwsQ0FBZ0I1b0MsU0FBdkI7QUFDRCxLQXJHMkgsRUFxR3pIOztBQUVIOzs7OztBQUtBd29DLGlCQUFhLHVCQUFZO0FBQ3ZCLFVBQUlqK0MsSUFBSixFQUNJdStDLGFBREo7O0FBR0F2K0MsYUFBTyxJQUFQO0FBQ0EsV0FBS21PLFNBQUwsQ0FBZXROLE9BQWYsQ0FBdUJvYSxJQUF2Qjs7QUFFQXNqQyxzQkFBZ0IsdUJBQVV2eEMsUUFBVixFQUFvQjtBQUNsQ2hOLGFBQUs2aEQsV0FBTCxHQUFtQno0QyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQW5CO0FBQ0F4RixVQUFFN0QsS0FBSzZoRCxXQUFQLEVBQW9CbGxDLFFBQXBCLENBQTZCcFQsd0VBQVlBLENBQUM2ckIsbUJBQTFDO0FBQ0FwMUIsYUFBS3dtQyxVQUFMLENBQWdCeG1DLEtBQUs2aEQsV0FBckI7O0FBRUE3aEQsYUFBS3krQyxRQUFMLENBQWN6eEMsUUFBZCxFQUF3QmhOLEtBQUs2aEQsV0FBN0I7O0FBRUE3aEQsYUFBS3UvQixXQUFMLEdBQW1CLElBQW5CO0FBQ0F2L0IsYUFBS21PLFNBQUwsQ0FBZXROLE9BQWYsQ0FBdUJDLElBQXZCO0FBQ0FkLGFBQUttTyxTQUFMLENBQWV5MUIsTUFBZjtBQUNELE9BVkQsQ0FQdUIsQ0FpQnBCOztBQUVILFVBQUksS0FBS2prQyxLQUFMLENBQVdtTixhQUFmLEVBQThCO0FBQzVCeXhDLHNCQUFjLEtBQUs1K0MsS0FBTCxDQUFXcU4sUUFBekI7QUFDRCxPQUZELE1BRU87QUFDTCxhQUFLck4sS0FBTCxDQUFXb04saUJBQVgsQ0FBNkJqTCxJQUE3QixDQUFrQ3k4QyxhQUFsQztBQUNEO0FBQ0YsS0FwSTJILEVBb0l6SDs7QUFFSDs7O0FBR0F2YSxpQkFBYSxxQkFBVXh6QixXQUFWLEVBQXVCO0FBQ2xDO0FBQ0QsS0EzSTJILEVBMkl6SDs7QUFFSDs7Ozs7OztBQU9BaXVDLGNBQVUsa0JBQVVFLFFBQVYsRUFBb0JDLGNBQXBCLEVBQW9DLytDLE9BQXBDLEVBQTZDO0FBQ3JELFVBQUlxQixDQUFKLEVBQ0lsQixJQURKLEVBRUlrOUMsTUFGSixFQUdJekMsT0FISixFQUlJc0gsWUFKSixFQUtJRCxRQUxKLEVBTUl4NUMsSUFOSixFQU9JaEcsS0FQSixFQVFJckIsR0FSSixFQVNJNDlDLFFBVEosRUFVSUksS0FWSixFQVdJQyxNQVhKLEVBWUk1d0MsTUFaSixFQWFJZzBDLGtCQWJKLEVBY0lDLGlCQWRKLEVBZUlDLGdCQWZKLEVBZ0JJQyxZQWhCSixFQWlCSUMsVUFqQko7O0FBbUJBMWlELGFBQU8sSUFBUDs7QUFFQUgsZ0JBQVVBLFdBQVcsRUFBckI7QUFDQUEsZ0JBQVVnRSxFQUFFSCxNQUFGLENBQVM7QUFDakIyN0MscUJBQWE7QUFESSxPQUFULEVBRVB4L0MsT0FGTyxDQUFWOztBQUlBNDZDLGdCQUFVNTZDLFFBQVF3L0MsV0FBUixHQUFzQmoyQyxTQUFTQyxhQUFULENBQXVCLElBQXZCLENBQXRCLEdBQXFERCxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQS9EOztBQUVBO0FBQ0FpNUMsMkJBQXFCLDRCQUFVM3BCLEtBQVYsRUFBaUI7QUFDcEMsWUFBSXZvQixPQUFKLEVBQ0l1eUMsU0FESjs7QUFHQWhxQixjQUFNOFksY0FBTjs7QUFFQXJoQyxrQkFBVXZNLEVBQUUsSUFBRixFQUFReEQsSUFBUixDQUFhLEtBQWIsQ0FBVjtBQUNBc2lELG9CQUFZM2lELEtBQUtMLEtBQUwsQ0FBVzY5QyxlQUFYLENBQTJCaHhDLFNBQTNCLENBQXFDNEQsT0FBckMsQ0FBWjs7QUFFQSxZQUFJcFEsS0FBS0wsS0FBTCxDQUFXd1EsY0FBWCxDQUEwQkMsT0FBMUIsQ0FBSixFQUF3QztBQUN0QztBQUNBcFEsZUFBS0wsS0FBTCxDQUFXNjlDLGVBQVgsQ0FBMkJoa0MsU0FBM0IsQ0FBcUNwSixPQUFyQztBQUNBLGNBQUk3TyxTQUFTZSxNQUFNaUosR0FBZixFQUFvQixFQUFwQixLQUEyQixDQUEvQixFQUFrQztBQUNoQztBQUNBLGlCQUFLLElBQUk1SixFQUFULElBQWUzQixLQUFLTCxLQUFMLENBQVd3USxjQUExQixFQUEwQztBQUN4QyxrQkFBSW5RLEtBQUtMLEtBQUwsQ0FBV3dRLGNBQVgsQ0FBMEJ2SixjQUExQixDQUF5Q2pGLEVBQXpDLENBQUosRUFBa0Q7QUFDaEQzQixxQkFBS0wsS0FBTCxDQUFXNjlDLGVBQVgsQ0FBMkJoa0MsU0FBM0IsQ0FBcUM3WCxFQUFyQztBQUNEO0FBQ0Y7QUFDRjtBQUNGLFNBWEQsTUFXTztBQUNMO0FBQ0EzQixlQUFLTCxLQUFMLENBQVc2OUMsZUFBWCxDQUEyQi9qQyxTQUEzQixDQUFxQ3JKLE9BQXJDO0FBQ0E7QUFDQXF5Qyx1QkFBYXJ5QyxPQUFiO0FBRUQ7QUFDRCxZQUFJcFEsS0FBSzRpRCxvQkFBTCxDQUEwQixJQUExQixDQUFKLEVBQXFDO0FBQ25DNWlELGVBQUs2aUQsa0JBQUwsQ0FBd0IsSUFBeEIsRUFBOEJ6eUMsT0FBOUIsRUFBdUN1eUMsU0FBdkM7QUFDRDs7QUFFRDtBQUNELE9BaENELENBOUJxRCxDQThEbEQ7QUFDREosMEJBQW9CLDJCQUFVNXBCLEtBQVYsRUFBaUI7QUFDakNBLGNBQU04WSxjQUFOO0FBQ0EsWUFBSXJoQyxVQUFVdk0sRUFBRSxJQUFGLEVBQVF4RCxJQUFSLENBQWEsS0FBYixDQUFkO0FBQ0EsWUFBSTR3QyxTQUFTcHRDLEVBQUUsSUFBRixFQUFRb3RDLE1BQVIsR0FBaUJBLE1BQWpCLEdBQTBCQSxNQUExQixFQUFiO0FBQ0EsWUFBSXZpQyxTQUFTN0ssRUFBRW90QyxNQUFGLEVBQVUvN0IsUUFBVixFQUFiO0FBQ0EsWUFBSTR0QyxZQUFZai9DLEVBQUU2SyxPQUFPLENBQVAsQ0FBRixFQUFhck8sSUFBYixDQUFrQixLQUFsQixDQUFoQjtBQUNBLFlBQUd3RCxFQUFFLElBQUYsRUFBUXFjLFFBQVIsQ0FBaUIzVyx3RUFBWUEsQ0FBQ3VULE1BQTlCLENBQUgsRUFBeUM7QUFDckM5YyxlQUFLTCxLQUFMLENBQVc2OUMsZUFBWCxDQUEyQnVGLGNBQTNCLENBQTBDRCxTQUExQyxFQUFxRDF5QyxPQUFyRDtBQUNBdk0sWUFBRSxJQUFGLEVBQVE2MEIsV0FBUixDQUFvQm52Qix3RUFBWUEsQ0FBQ3VULE1BQWpDLEVBQXlDSCxRQUF6QyxDQUFrRHBULHdFQUFZQSxDQUFDZ29CLFFBQS9EO0FBQ0gsU0FIRCxNQUlLLElBQUcxdEIsRUFBRSxJQUFGLEVBQVFxYyxRQUFSLENBQWlCM1csd0VBQVlBLENBQUNnb0IsUUFBOUIsQ0FBSCxFQUEyQztBQUM1Q3Z4QixlQUFLTCxLQUFMLENBQVc2OUMsZUFBWCxDQUEyQndGLGNBQTNCLENBQTBDRixTQUExQyxFQUFxRDF5QyxPQUFyRDtBQUNBdk0sWUFBRSxJQUFGLEVBQVE2MEIsV0FBUixDQUFvQm52Qix3RUFBWUEsQ0FBQ2dvQixRQUFqQyxFQUEyQzVVLFFBQTNDLENBQW9EcFQsd0VBQVlBLENBQUN1VCxNQUFqRTtBQUNIO0FBQ0osT0FkRDtBQWVBMGxDLHlCQUFtQiwwQkFBVTdwQixLQUFWLEVBQWdCO0FBQ2pDQSxjQUFNOFksY0FBTjtBQUNBLFlBQUlSLFNBQVMsS0FBSzM3QixhQUFsQjtBQUNBLFlBQUlyVSxNQUFNNEMsRUFBRW90QyxPQUFPcU4sVUFBVCxFQUFxQmorQyxJQUFyQixDQUEwQixLQUExQixDQUFWO0FBQ0E0d0MsaUJBQVNwdEMsRUFBRSxJQUFGLEVBQVFvdEMsTUFBUixHQUFpQkEsTUFBakIsR0FBMEJBLE1BQTFCLEVBQVQ7QUFDQSxZQUFJdmlDLFNBQVM3SyxFQUFFb3RDLE1BQUYsRUFBVS83QixRQUFWLEVBQWI7QUFDQSxZQUFJNHRDLFlBQVlqL0MsRUFBRTZLLE9BQU8sQ0FBUCxDQUFGLEVBQWFyTyxJQUFiLENBQWtCLEtBQWxCLENBQWhCO0FBQ0FZLGNBQU1BLElBQUlzVCxPQUFKLENBQVl1dUMsU0FBWixFQUFzQixFQUF0QixDQUFOO0FBQ0EsWUFBSXhnRCxRQUFRdEMsS0FBS0wsS0FBTCxDQUFXNjlDLGVBQVgsQ0FBMkJoeEMsU0FBM0IsQ0FBcUNzMkMsU0FBckMsRUFBZ0RseUMsV0FBNUQ7QUFDQSxZQUFJdE8sS0FBSixFQUFXO0FBQ1QsY0FBSTJnRCxjQUFjM2dELE1BQU0rRixTQUFOLEdBQWtCK1QsUUFBbEIsR0FBNkJuYixHQUE3QixDQUFsQjtBQUNBLGNBQUkwUSxVQUFVc3hDLFlBQVkzcEMsU0FBWixHQUF3QjJELFdBQXhCLEdBQXNDLENBQXRDLENBQWQ7QUFDQWpkLGVBQUtMLEtBQUwsQ0FBV0UsT0FBWCxDQUFtQkQsYUFBbkIsQ0FBaUNvSCxHQUFqQyxDQUFxQ0MsT0FBckMsR0FBK0NtdUMsR0FBL0MsQ0FBbUR6akMsUUFBUWtFLFdBQVIsRUFBbkQ7QUFDRDtBQUVGLE9BZkQ7O0FBaUJBNHNDLHFCQUFlLHNCQUFTcnlDLE9BQVQsRUFBaUI7QUFBRTtBQUM5QixZQUFJdXlDLFNBQUo7QUFBQSxZQUNJTyxXQURKO0FBQUEsWUFFSTkyQyxVQUZKO0FBQUEsWUFHSSsyQyxNQUhKO0FBQUEsWUFJSTFyQyxRQUpKO0FBQUEsWUFLSTJyQyxXQUxKO0FBQUEsWUFNSUMsWUFOSjtBQUFBLFlBT0lDLGNBQWMsRUFQbEI7QUFBQSxZQVFJNy9DLE1BUko7QUFBQSxZQVNJb0YsTUFUSjtBQUFBLFlBVUluRCxHQVZKO0FBV0FpOUMsb0JBQVkzaUQsS0FBS0wsS0FBTCxDQUFXNjlDLGVBQVgsQ0FBMkJoeEMsU0FBM0IsQ0FBcUM0RCxPQUFyQyxDQUFaO0FBQ0EsWUFBSXV5QyxhQUFhQSxVQUFVN2pDLGNBQVYsS0FBNkIsR0FBOUMsRUFBbUQ7QUFDL0MsY0FBSTZqQyxVQUFVbjBDLFNBQWQsRUFBeUI7QUFDckIsaUJBQUs5SSxHQUFMLElBQVlpOUMsVUFBVWowQyxNQUF0QixFQUE4QjtBQUMxQixrQkFBSWkwQyxVQUFVajBDLE1BQVYsQ0FBaUI5SCxjQUFqQixDQUFnQ2xCLEdBQWhDLENBQUosRUFBMEM7QUFDdENwRCx3QkFBUXFnRCxVQUFVajBDLE1BQVYsQ0FBaUJoSixHQUFqQixDQUFSO0FBQ0Esb0JBQUdwRCxNQUFNbU4sSUFBTixJQUFjLFVBQWpCLEVBQTRCO0FBQ3hCO0FBQ0g7QUFDRHl6Qyw4QkFBYzVnRCxNQUFNZ04sT0FBcEI7QUFDQSxvQkFBSTR6QyxnQkFBZ0Izd0MsU0FBcEIsRUFBK0I7QUFDM0I7QUFDQTtBQUNIO0FBQ0Qsb0JBQUksUUFBTzJ3QyxXQUFQLHlDQUFPQSxXQUFQLE9BQXVCLFFBQTNCLEVBQXFDO0FBQ2pDQSxnQ0FBY3RoRCw4REFBS0EsQ0FBQzJOLGFBQU4sQ0FBb0IyekMsV0FBcEIsQ0FBZDtBQUNIO0FBQ0Q5MkMsNkJBQWE5SixNQUFNc08sV0FBbkI7QUFDQSxvQkFBSXN5QyxlQUFlQSxZQUFZMTZDLE9BQTNCLElBQXNDLE9BQU8wNkMsWUFBWTE2QyxPQUFuQixLQUErQixVQUF6RSxFQUFxRjtBQUNqRjA2Qyw4QkFBWTE2QyxPQUFaLENBQW9CLFVBQVVvSSxXQUFWLEVBQXVCO0FBQ3ZDLHdCQUFJQSxlQUNBQSxZQUFZdlEsSUFEWixJQUVBdVEsWUFBWXZRLElBQVosQ0FBaUJvWCxRQUZqQixJQUdBN0csWUFBWXZRLElBQVosQ0FBaUJvWCxRQUFqQixDQUEwQjZyQyxXQUg5QixFQUcyQztBQUN2QywwQkFBSTF5QyxZQUFZdlEsSUFBWixDQUFpQm9YLFFBQWpCLENBQTBCaEksSUFBMUIsS0FBbUMsT0FBdkMsRUFBZ0Q7QUFDNUMwekMsaUNBQVM5L0MsR0FBRzZRLElBQUgsQ0FBUXFELFNBQVIsQ0FBa0IsQ0FBQytELFdBQVcxSyxZQUFZdlEsSUFBWixDQUFpQm9YLFFBQWpCLENBQTBCNnJDLFdBQTFCLENBQXNDLENBQXRDLENBQVgsQ0FBRCxFQUN2QmhvQyxXQUFXMUssWUFBWXZRLElBQVosQ0FBaUJvWCxRQUFqQixDQUEwQjZyQyxXQUExQixDQUFzQyxDQUF0QyxDQUFYLENBRHVCLENBQWxCLEVBQ2tELFdBRGxELEVBQytELFdBRC9ELENBQVQ7QUFFQTdyQyxtQ0FBVyxJQUFJcFUsR0FBR3FULElBQUgsQ0FBUUMsS0FBWixDQUFrQndzQyxNQUFsQixDQUFYO0FBQ0FHLG9DQUFZeGhELElBQVosQ0FBaUIyVixTQUFTakIsY0FBVCxFQUFqQjtBQUNIO0FBQ0o7QUFDSixtQkFaRDtBQWFIO0FBQ0Qsb0JBQUlwSyxVQUFKLEVBQWdCO0FBQ1o7QUFDQWczQyxnQ0FBY2gzQyxXQUFXL0QsU0FBWCxFQUFkO0FBQ0FnN0MsaUNBQWVELFlBQVlobkMsUUFBWixFQUFmO0FBQ0FpbkMsK0JBQWE3NkMsT0FBYixDQUFxQixVQUFVbUosT0FBVixFQUFtQjtBQUNwQyx3QkFBSXJQLE1BQU1tTixJQUFOLEtBQWUsS0FBbkIsRUFBMEI7QUFDdEIsMEJBQUlsTSxTQUFTb08sUUFBUTJILFNBQVIsRUFBYjtBQUNBO0FBQ0EvViw2QkFBTytPLFNBQVAsR0FBbUI5SixPQUFuQixDQUEyQixVQUFVMjlCLFVBQVYsRUFBc0I7QUFDN0NtZCxvQ0FBWXhoRCxJQUFaLENBQWlCcWtDLFVBQWpCO0FBQ0gsdUJBRkQ7QUFHSCxxQkFORCxNQU1PO0FBQ0gsMEJBQUc5aUMsR0FBR0ksTUFBSCxDQUFVOC9DLFdBQVYsQ0FBc0I1eEMsUUFBUTJILFNBQVIsR0FBb0JoSCxTQUFwQixFQUF0QixFQUF1RCxHQUF2RCxLQUE4RCxVQUE5RCxJQUE0RWpQLEdBQUdJLE1BQUgsQ0FBVTgvQyxXQUFWLENBQXNCNXhDLFFBQVEySCxTQUFSLEdBQW9CaEgsU0FBcEIsRUFBdEIsRUFBdUQsR0FBdkQsS0FBOEQsV0FBN0ksRUFBeUo7O0FBRXJKZ3hDLG9DQUFZeGhELElBQVosQ0FBaUJ1QixHQUFHSSxNQUFILENBQVU4L0MsV0FBVixDQUFzQjV4QyxRQUFRMkgsU0FBUixHQUFvQmhILFNBQXBCLEVBQXRCLENBQWpCO0FBQ0FneEMsb0NBQVl4aEQsSUFBWixDQUFpQnVCLEdBQUdJLE1BQUgsQ0FBVSsvQyxVQUFWLENBQXFCN3hDLFFBQVEySCxTQUFSLEdBQW9CaEgsU0FBcEIsRUFBckIsQ0FBakI7QUFDQWd4QyxvQ0FBWXhoRCxJQUFaLENBQWlCdUIsR0FBR0ksTUFBSCxDQUFVZ2dELGNBQVYsQ0FBeUI5eEMsUUFBUTJILFNBQVIsR0FBb0JoSCxTQUFwQixFQUF6QixDQUFqQjtBQUNBZ3hDLG9DQUFZeGhELElBQVosQ0FBaUJ1QixHQUFHSSxNQUFILENBQVVpZ0QsYUFBVixDQUF3Qi94QyxRQUFRMkgsU0FBUixHQUFvQmhILFNBQXBCLEVBQXhCLENBQWpCO0FBQ0g7QUFDSjtBQUNKLG1CQWhCRDtBQWlCSDtBQUNKO0FBQ0o7QUFDSjs7QUFFRCxjQUFHcXdDLFVBQVVsekMsSUFBVixLQUFtQixVQUFuQixJQUFpQ2t6QyxVQUFVL3hDLFdBQTlDLEVBQTBEO0FBQ3REc3lDLDBCQUFjNWdELE1BQU1nTixPQUFwQjtBQUNBLGdCQUFJNHpDLGdCQUFnQjN3QyxTQUFwQixFQUErQjtBQUMzQjtBQUNBLGtCQUFJLFFBQU8yd0MsV0FBUCx5Q0FBT0EsV0FBUCxPQUF1QixRQUEzQixFQUFxQztBQUNqQ0EsOEJBQWN0aEQsOERBQUtBLENBQUMyTixhQUFOLENBQW9CMnpDLFdBQXBCLENBQWQ7QUFDSDtBQUNEOTJDLDJCQUFhOUosTUFBTXNPLFdBQW5CO0FBQ0Esa0JBQUlzeUMsZUFBZUEsWUFBWTE2QyxPQUEzQixJQUFzQyxPQUFPMDZDLFlBQVkxNkMsT0FBbkIsS0FBK0IsVUFBekUsRUFBcUY7QUFDakYwNkMsNEJBQVkxNkMsT0FBWixDQUFvQixVQUFVb0ksV0FBVixFQUF1QjtBQUN2QyxzQkFBSUEsZUFDQUEsWUFBWXZRLElBRFosSUFFQXVRLFlBQVl2USxJQUFaLENBQWlCb1gsUUFGakIsSUFHQTdHLFlBQVl2USxJQUFaLENBQWlCb1gsUUFBakIsQ0FBMEI2ckMsV0FIOUIsRUFHMkM7QUFDdkMsd0JBQUkxeUMsWUFBWXZRLElBQVosQ0FBaUJvWCxRQUFqQixDQUEwQmhJLElBQTFCLEtBQW1DLE9BQXZDLEVBQWdEO0FBQzVDMHpDLCtCQUFTOS9DLEdBQUc2USxJQUFILENBQVFxRCxTQUFSLENBQWtCLENBQUMrRCxXQUFXMUssWUFBWXZRLElBQVosQ0FBaUJvWCxRQUFqQixDQUEwQjZyQyxXQUExQixDQUFzQyxDQUF0QyxDQUFYLENBQUQsRUFDdkJob0MsV0FBVzFLLFlBQVl2USxJQUFaLENBQWlCb1gsUUFBakIsQ0FBMEI2ckMsV0FBMUIsQ0FBc0MsQ0FBdEMsQ0FBWCxDQUR1QixDQUFsQixFQUNrRCxXQURsRCxFQUMrRCxXQUQvRCxDQUFUO0FBRUE3ckMsaUNBQVcsSUFBSXBVLEdBQUdxVCxJQUFILENBQVFDLEtBQVosQ0FBa0J3c0MsTUFBbEIsQ0FBWDtBQUNBRyxrQ0FBWXhoRCxJQUFaLENBQWlCMlYsU0FBU2pCLGNBQVQsRUFBakI7QUFDSDtBQUNKO0FBQ0osaUJBWkQ7QUFhSDtBQUNELGtCQUFJcEssVUFBSixFQUFnQjtBQUNaO0FBQ0FnM0MsOEJBQWNoM0MsV0FBVy9ELFNBQVgsRUFBZDtBQUNBZzdDLCtCQUFlRCxZQUFZaG5DLFFBQVosRUFBZjtBQUNBaW5DLDZCQUFhNzZDLE9BQWIsQ0FBcUIsVUFBVW1KLE9BQVYsRUFBbUI7QUFDcEMsc0JBQUdyUCxNQUFNbU4sSUFBTixLQUFlLFVBQWxCLEVBQTZCO0FBQ3pCLHdCQUFJbk4sTUFBTW1OLElBQU4sS0FBZSxLQUFuQixFQUEwQjtBQUN0QiwwQkFBSWxNLFNBQVNvTyxRQUFRMkgsU0FBUixFQUFiO0FBQ0E7QUFDQS9WLDZCQUFPK08sU0FBUCxHQUFtQjlKLE9BQW5CLENBQTJCLFVBQVUyOUIsVUFBVixFQUFzQjtBQUM3Q21kLG9DQUFZeGhELElBQVosQ0FBaUJxa0MsVUFBakI7QUFDSCx1QkFGRDtBQUdILHFCQU5ELE1BTU87QUFDSG1kLGtDQUFZeGhELElBQVosQ0FBaUJ1QixHQUFHSSxNQUFILENBQVU4L0MsV0FBVixDQUFzQjV4QyxRQUFRMkgsU0FBUixHQUFvQmhILFNBQXBCLEVBQXRCLENBQWpCO0FBQ0FneEMsa0NBQVl4aEQsSUFBWixDQUFpQnVCLEdBQUdJLE1BQUgsQ0FBVSsvQyxVQUFWLENBQXFCN3hDLFFBQVEySCxTQUFSLEdBQW9CaEgsU0FBcEIsRUFBckIsQ0FBakI7QUFDQWd4QyxrQ0FBWXhoRCxJQUFaLENBQWlCdUIsR0FBR0ksTUFBSCxDQUFVZ2dELGNBQVYsQ0FBeUI5eEMsUUFBUTJILFNBQVIsR0FBb0JoSCxTQUFwQixFQUF6QixDQUFqQjtBQUNBZ3hDLGtDQUFZeGhELElBQVosQ0FBaUJ1QixHQUFHSSxNQUFILENBQVVpZ0QsYUFBVixDQUF3Qi94QyxRQUFRMkgsU0FBUixHQUFvQmhILFNBQXBCLEVBQXhCLENBQWpCO0FBQ0g7QUFDSjtBQUNKLGlCQWZEO0FBZ0JIO0FBQ0o7QUFDSjs7QUFHRDdPLG1CQUFTSixHQUFHSSxNQUFILENBQVVrZ0QsY0FBVixDQUF5QkwsV0FBekIsQ0FBVDtBQUNBLGNBQUk3L0MsT0FBTyxDQUFQLE1BQWNtZ0QsUUFBZCxJQUEwQm5nRCxPQUFPLENBQVAsTUFBYyxDQUFDbWdELFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7QUFDRDVqRCxlQUFLTCxLQUFMLENBQVdFLE9BQVgsQ0FBbUJELGFBQW5CLENBQWlDb0gsR0FBakMsQ0FBcUNDLE9BQXJDLEdBQStDbXVDLEdBQS9DLENBQW1EM3hDLE1BQW5ELEVBQTJEekQsS0FBS0wsS0FBTCxDQUFXRSxPQUFYLENBQW1CRCxhQUFuQixDQUFpQ29ILEdBQWpDLENBQXFDcXVDLE9BQXJDLEVBQTNEO0FBQ0F4c0MsbUJBQVM3SSxLQUFLTCxLQUFMLENBQVdFLE9BQVgsQ0FBbUJELGFBQW5CLENBQWlDb0gsR0FBakMsQ0FBcUNDLE9BQXJDLEdBQStDNkIsU0FBL0MsRUFBVDtBQUNBLGNBQUkrNkMsTUFBTWg3QyxPQUFPLENBQVAsQ0FBTixDQUFKLEVBQXNCO0FBQ2xCN0ksaUJBQUtMLEtBQUwsQ0FBV0UsT0FBWCxDQUFtQkQsYUFBbkIsQ0FBaUNvSCxHQUFqQyxDQUFxQ0MsT0FBckMsR0FBK0NnVixTQUEvQyxDQUF5RCxDQUFDLEVBQUQsRUFBSyxFQUFMLENBQXpEO0FBQ0FqYyxpQkFBS0wsS0FBTCxDQUFXRSxPQUFYLENBQW1CRCxhQUFuQixDQUFpQ29ILEdBQWpDLENBQXFDQyxPQUFyQyxHQUErQzhCLE9BQS9DLENBQXVEQyxRQUFRN0IsT0FBUixJQUFtQixFQUExRTtBQUNIO0FBQ0o7QUFDSixPQWxJRCxDQS9GbUQsQ0FpT2hEO0FBQ0w7QUFDQTtBQUNBLFdBQUt4SCxLQUFMLENBQVdvYyxxQkFBWCxDQUFpQ2phLElBQWpDLENBQXNDLFVBQVU0YyxPQUFWLEVBQW1CO0FBQ3ZELFlBQUl2ZCxDQUFKLEVBQ0k2Z0QsWUFESjs7QUFHQUEsdUJBQWVoaUQsS0FBS2dHLE1BQUwsQ0FBWTBZLE9BQVosQ0FBZjtBQUNBLFlBQUlzakMsZ0JBQWdCQSxhQUFhQyxRQUFqQyxFQUEyQztBQUN6QyxlQUFLOWdELElBQUksQ0FBVCxFQUFZQSxJQUFJNmdELGFBQWFDLFFBQWIsQ0FBc0J2Z0QsTUFBdEMsRUFBOENQLEtBQUssQ0FBbkQsRUFBc0Q7QUFDcEQsZ0JBQUluQixLQUFLTCxLQUFMLENBQVd3USxjQUFYLENBQTBCdU8sT0FBMUIsQ0FBSixFQUF3QztBQUN0Q3NqQywyQkFBYUMsUUFBYixDQUFzQjlnRCxDQUF0QixFQUF5QndiLFFBQXpCLENBQWtDcFQsd0VBQVlBLENBQUN1VCxNQUEvQyxFQUF1RDRiLFdBQXZELENBQW1FbnZCLHdFQUFZQSxDQUFDZ29CLFFBQWhGO0FBQ0QsYUFGRCxNQUVPO0FBQ0x5d0IsMkJBQWFDLFFBQWIsQ0FBc0I5Z0QsQ0FBdEIsRUFBeUJ3YixRQUF6QixDQUFrQ3BULHdFQUFZQSxDQUFDZ29CLFFBQS9DLEVBQXlEbUgsV0FBekQsQ0FBcUVudkIsd0VBQVlBLENBQUN1VCxNQUFsRjtBQUNEO0FBQ0Q5YyxpQkFBSzRpRCxvQkFBTCxDQUEyQlosYUFBYUMsUUFBYixDQUFzQjlnRCxDQUF0QixDQUEzQjtBQUNEO0FBQ0Y7QUFDRixPQWZEOztBQWlCQTtBQUNBO0FBQ0EsV0FBS3hCLEtBQUwsQ0FBV3VpRCxhQUFYLENBQXlCcGdELElBQXpCLENBQThCLFlBQVk7QUFDeEMsWUFBSVgsQ0FBSixFQUNJUSxFQURKLEVBRUlXLEtBRko7O0FBSUEsYUFBS1gsRUFBTCxJQUFXM0IsS0FBS2dHLE1BQWhCLEVBQXdCO0FBQ3RCLGNBQUloRyxLQUFLZ0csTUFBTCxDQUFZWSxjQUFaLENBQTJCakYsRUFBM0IsQ0FBSixFQUFvQztBQUNsQ1csb0JBQVF0QyxLQUFLZ0csTUFBTCxDQUFZckUsRUFBWixDQUFSO0FBQ0EsZ0JBQUlXLFNBQVNBLE1BQU0yL0MsUUFBbkIsRUFBNkI7QUFDM0IsbUJBQUs5Z0QsSUFBSSxDQUFULEVBQVlBLElBQUltQixNQUFNMi9DLFFBQU4sQ0FBZXZnRCxNQUEvQixFQUF1Q1AsS0FBSyxDQUE1QyxFQUErQztBQUM3QyxvQkFBSW5CLEtBQUtMLEtBQUwsQ0FBV3FRLHlCQUFYLENBQXFDck8sRUFBckMsQ0FBSixFQUE4QztBQUM1Q1csd0JBQU0yL0MsUUFBTixDQUFlOWdELENBQWYsRUFBa0J1M0IsV0FBbEIsQ0FBOEJudkIsd0VBQVlBLENBQUM0bkIsUUFBM0M7QUFDRCxpQkFGRCxNQUVPO0FBQ0w3dUIsd0JBQU0yL0MsUUFBTixDQUFlOWdELENBQWYsRUFBa0J3YixRQUFsQixDQUEyQnBULHdFQUFZQSxDQUFDNG5CLFFBQXhDO0FBQ0Q7QUFDRjtBQUNGO0FBRUY7QUFDRjtBQUVGLE9BckJELEVBdlBxRCxDQTRRakQ7O0FBRUosVUFBSXd0QixZQUFZQSxTQUFTajlDLE1BQVQsR0FBa0IsQ0FBbEMsRUFBcUM7QUFDbkMsYUFBS1IsSUFBSSxDQUFULEVBQVlBLElBQUl5OUMsU0FBU2o5QyxNQUF6QixFQUFpQ1IsS0FBSyxDQUF0QyxFQUF5QztBQUN2Q0QsZ0JBQU0wOUMsU0FBU3o5QyxDQUFULENBQU47QUFDQW9CLGtCQUFRdEMsS0FBS0wsS0FBTCxDQUFXNjlDLGVBQVgsQ0FBMkJoeEMsU0FBM0IsQ0FBcUN2TCxHQUFyQyxDQUFSO0FBQ0FxSCxpQkFBTyxFQUFQO0FBQ0EsZUFBS3RDLE1BQUwsQ0FBWS9FLEdBQVosSUFBbUJxSCxJQUFuQjtBQUNBO0FBQ0EsY0FBSWhHLE1BQU1xTixhQUFWLEVBQXlCO0FBQ3ZCO0FBQ0Q7O0FBRUQsY0FBSXJOLFNBQVNBLE1BQU1zTixPQUFuQixFQUE0QjtBQUMxQml2Qyx1QkFBV2gvQyxRQUFRdy9DLFdBQVIsR0FBc0JqMkMsU0FBU0MsYUFBVCxDQUF1QixJQUF2QixDQUF0QixHQUFxREQsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFoRTtBQUNBZixpQkFBSzY1QyxhQUFMLEdBQXFCNzVDLEtBQUs2NUMsYUFBTCxJQUFzQixFQUEzQztBQUNBNzVDLGlCQUFLNjVDLGFBQUwsQ0FBbUJyZ0QsSUFBbkIsQ0FBd0IrOEMsUUFBeEI7O0FBRUFJLG9CQUFRNzFDLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBUjtBQUNBNDFDLGtCQUFNMXBDLFlBQU4sQ0FBbUIsTUFBbkIsRUFBMkIsR0FBM0I7QUFDQTBwQyxrQkFBTXpwQyxXQUFOLENBQWtCcE0sU0FBU3MyQyxjQUFULENBQXdCcDlDLE1BQU1kLElBQTlCLENBQWxCO0FBQ0FxOUMscUJBQVNycEMsV0FBVCxDQUFxQnlwQyxLQUFyQjs7QUFFQUMscUJBQVNyN0MsRUFBRW83QyxLQUFGLENBQVQ7QUFDQTMyQyxpQkFBSzI1QyxRQUFMLEdBQWdCMzVDLEtBQUsyNUMsUUFBTCxJQUFpQixFQUFqQztBQUNBMzVDLGlCQUFLMjVDLFFBQUwsQ0FBY25nRCxJQUFkLENBQW1CbzlDLE1BQW5COztBQUVBLGdCQUFJLENBQUMsS0FBS3YvQyxLQUFMLENBQVdxUSx5QkFBWCxDQUFxQy9PLEdBQXJDLENBQUwsRUFBZ0Q7QUFDOUNpK0MscUJBQU92aUMsUUFBUCxDQUFnQnBULHdFQUFZQSxDQUFDNG5CLFFBQTdCO0FBQ0Q7O0FBRUQrdEIsbUJBQU83K0MsSUFBUCxDQUFZLEtBQVosRUFBbUJZLEdBQW5CO0FBQ0FpK0MsbUJBQU83a0IsS0FBUCxDQUFhaW9CLGtCQUFiOztBQUVBLGdCQUFJaGdELE1BQU1tTSxhQUFOLElBQXVCbk0sTUFBTWljLGFBQWpDLEVBQWdEO0FBQzlDalEsdUJBQVNsRixTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBQVQ7O0FBRUEsa0JBQUkvRyxNQUFNdWMsVUFBTixLQUFxQixHQUF6QixFQUE4QjtBQUMxQmhiLGtCQUFFZzdDLFFBQUYsRUFBWWxpQyxRQUFaLENBQXFCcFQsd0VBQVlBLENBQUN3ZixLQUFsQztBQUNBbGxCLGtCQUFFeUssTUFBRixFQUFVcU8sUUFBVixDQUFtQnBULHdFQUFZQSxDQUFDNm5CLElBQWhDO0FBQ0g7QUFDRHZ0QixnQkFBRXlLLE1BQUYsRUFBVStyQixLQUFWLENBQWdCLFlBQVk7QUFDMUIsb0JBQUl4MkIsRUFBRSxJQUFGLEVBQVFvdEMsTUFBUixHQUFpQi93QixRQUFqQixDQUEwQjNXLHdFQUFZQSxDQUFDd2YsS0FBdkMsQ0FBSixFQUFtRDtBQUNqRGxsQixvQkFBRSxJQUFGLEVBQVFvdEMsTUFBUixHQUFpQnZZLFdBQWpCLENBQTZCbnZCLHdFQUFZQSxDQUFDd2YsS0FBMUMsRUFBaURwTSxRQUFqRCxDQUEwRHBULHdFQUFZQSxDQUFDeW5CLElBQXZFO0FBQ0QsaUJBRkQsTUFFTztBQUNMbnRCLG9CQUFFLElBQUYsRUFBUW90QyxNQUFSLEdBQWlCdlksV0FBakIsQ0FBNkJudkIsd0VBQVlBLENBQUN5bkIsSUFBMUMsRUFBZ0RyVSxRQUFoRCxDQUF5RHBULHdFQUFZQSxDQUFDd2YsS0FBdEU7QUFDRDtBQUNDLG9CQUFJL29CLEtBQUtMLEtBQUwsQ0FBV0UsT0FBWCxDQUFtQkQsYUFBbkIsQ0FBaUMyL0Msa0JBQXJDLEVBQXlEO0FBQ3JEdi9DLHVCQUFLTCxLQUFMLENBQVdFLE9BQVgsQ0FBbUJELGFBQW5CLENBQWlDMi9DLGtCQUFqQyxDQUFvRC8yQyxPQUFwRCxDQUE0RCxVQUFVM0IsT0FBVixFQUFtQjtBQUMzRWhELHNCQUFFZ0QsT0FBRixFQUFXZ1csR0FBWCxDQUFlLE9BQWYsRUFBd0I3YyxLQUFLbU8sU0FBTCxDQUFleTZCLFNBQWYsQ0FBeUJDLFdBQWpEO0FBQ0gsbUJBRkQ7QUFHSDtBQUNEaGxDLGtCQUFFN0QsS0FBS21PLFNBQUwsQ0FBZXRILE9BQWpCLEVBQTBCZ1csR0FBMUIsQ0FBOEIsT0FBOUIsRUFBdUM3YyxLQUFLbU8sU0FBTCxDQUFleTZCLFNBQWYsQ0FBeUJDLFdBQWhFO0FBQ0gsZUFaRDtBQWFBaGxDLGdCQUFFeUssTUFBRixFQUFVOHpDLFlBQVYsQ0FBdUJsRCxNQUF2QjtBQUNBNkMsNkJBQWVsaUQsUUFBUXcvQyxXQUFSLEdBQXNCajJDLFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBdEIsR0FBcURELFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBcEU7QUFDQWYsbUJBQUsrNUMsYUFBTCxHQUFxQi81QyxLQUFLKzVDLGFBQUwsSUFBc0IsRUFBM0M7QUFDQS81QyxtQkFBSys1QyxhQUFMLENBQW1CdmdELElBQW5CLENBQXdCaWdELFlBQXhCO0FBQ0Usa0JBQUl6L0MsTUFBTXVjLFVBQU4sS0FBcUIsR0FBekIsRUFBOEI7QUFDMUJnZ0MseUJBQVNycEMsV0FBVCxDQUFxQnVzQyxZQUFyQjtBQUNIO0FBQ0Qsa0JBQUd6L0MsTUFBTWljLGFBQU4sSUFBdUJqYyxNQUFNZ04sT0FBTixDQUFjLENBQWQsQ0FBMUIsRUFBMkM7QUFDdkMsb0JBQUlqUCxPQUFPaUMsTUFBTWdOLE9BQU4sQ0FBYyxDQUFkLEVBQWlCalAsSUFBNUI7QUFDQSxvQkFBSUEsUUFBUUEsS0FBS2dRLFFBQWpCLEVBQTJCO0FBQ3ZCLHVCQUFJLElBQUluUCxLQUFJLENBQVosRUFBZUEsS0FBSWIsS0FBS2dRLFFBQUwsQ0FBYzNPLE1BQWpDLEVBQXlDUixJQUF6QyxFQUE2QztBQUN6Qyx3QkFBSXlRLFVBQVV0UixLQUFLZ1EsUUFBTCxDQUFjblAsRUFBZCxDQUFkO0FBQ0Esd0JBQUk0aUQsZ0JBQWdCamtELFFBQVF3L0MsV0FBUixHQUFzQmoyQyxTQUFTQyxhQUFULENBQXVCLElBQXZCLENBQXRCLEdBQXFERCxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQXpFO0FBQ0Esd0JBQUkwMUMsWUFBVyxFQUFmO0FBQ0FBLDhCQUFVb0QsYUFBVixHQUEwQnBELFVBQVVvRCxhQUFWLElBQTJCLEVBQXJEO0FBQ0FwRCw4QkFBVW9ELGFBQVYsQ0FBd0JyZ0QsSUFBeEIsQ0FBNkJnaUQsYUFBN0I7QUFDQSx3QkFBSTlFLGFBQWE1MUMsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQUFqQjtBQUNBMjFDLCtCQUFXenBDLFlBQVgsQ0FBd0IsTUFBeEIsRUFBZ0MsR0FBaEM7QUFDQXlwQywrQkFBV3hwQyxXQUFYLENBQXVCcE0sU0FBU3MyQyxjQUFULENBQXdCL3RDLFFBQVFQLFVBQVIsQ0FBbUI5TyxNQUFNa2Msa0JBQU4sQ0FBeUJDLEtBQXpCLENBQStCLEdBQS9CLEVBQW9DLENBQXBDLENBQW5CLENBQXhCLENBQXZCO0FBQ0FxbEMsa0NBQWN0dUMsV0FBZCxDQUEwQndwQyxVQUExQjtBQUNBLHdCQUFJOWlDLFdBQVdqYixNQUFNLEVBQU4sR0FBV0MsRUFBMUI7QUFDQSx3QkFBSTZpRCxjQUFjbGdELEVBQUVtN0MsVUFBRixDQUFsQjtBQUNBRCw4QkFBVWtELFFBQVYsR0FBcUIzNUMsS0FBSzI1QyxRQUFMLElBQWlCLEVBQXRDO0FBQ0FsRCw4QkFBVWtELFFBQVYsQ0FBbUJuZ0QsSUFBbkIsQ0FBd0JvOUMsTUFBeEI7QUFDQTZDLGlDQUFhdnNDLFdBQWIsQ0FBeUJzdUMsYUFBekI7QUFDQUMsZ0NBQVkxakQsSUFBWixDQUFpQixLQUFqQixFQUF3QjZiLFFBQXhCO0FBQ0Esd0JBQUc1WixNQUFNMGMsWUFBVCxFQUFzQjtBQUNwQitrQyxrQ0FBWTFwQixLQUFaLENBQWtCbW9CLGdCQUFsQjtBQUNBdUIsa0NBQVlwbkMsUUFBWixDQUFxQixvQkFBckI7QUFDRCxxQkFIRCxNQUlJO0FBQ0ZvbkMsa0NBQVkxcEIsS0FBWixDQUFrQmtvQixpQkFBbEI7QUFDQSwwQkFBSSxLQUFLNWlELEtBQUwsQ0FBV3dRLGNBQVgsQ0FBMEJsUCxHQUExQixDQUFKLEVBQW9DO0FBQ2xDOGlELG9DQUFZcG5DLFFBQVosQ0FBcUJwVCx3RUFBWUEsQ0FBQ3VULE1BQWxDO0FBQ0QsdUJBRkQsTUFFTztBQUNMaW5DLG9DQUFZcG5DLFFBQVosQ0FBcUJwVCx3RUFBWUEsQ0FBQ2dvQixRQUFsQztBQUNEO0FBQ0Y7O0FBRUQsd0JBQUl0a0IsT0FBT0MsWUFBUCxLQUF3QnFGLFNBQXhCLElBQXFDLFFBQU90RixPQUFPQyxZQUFQLENBQW9CODJDLFNBQTNCLE1BQXlDLFFBQWxGLEVBQTRGO0FBQzFGcGlELG9GQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0JxSyxPQUFPQyxZQUFQLENBQW9CODJDLFNBQTVDO0FBQ0Q7O0FBRUQsd0JBQUcvMkMsT0FBT0MsWUFBUCxDQUFvQisyQyx3QkFBcEIsSUFBZ0RoM0MsT0FBT0MsWUFBUCxDQUFvQisyQyx3QkFBcEIsQ0FBNkN2aUQsTUFBN0MsR0FBc0QsQ0FBekcsRUFBMkc7QUFDdkcsMEJBQUl3aUQsV0FBVyxFQUFDLFdBQVd2eUMsT0FBWixFQUFxQixjQUFjbXlDLGFBQW5DLEVBQWtELFNBQVFDLFdBQTFELEVBQWY7QUFDQW5pRCxvRkFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCcUssT0FBT0MsWUFBUCxDQUFvQisyQyx3QkFBNUMsRUFBc0VDLFFBQXRFO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7QUFDSjs7QUFFRCxnQkFBSSxLQUFLdmtELEtBQUwsQ0FBV3dRLGNBQVgsQ0FBMEJsUCxHQUExQixDQUFKLEVBQW9DO0FBQ2xDaStDLHFCQUFPdmlDLFFBQVAsQ0FBZ0JwVCx3RUFBWUEsQ0FBQ3VULE1BQTdCO0FBQ0QsYUFGRCxNQUVPO0FBQ0xvaUMscUJBQU92aUMsUUFBUCxDQUFnQnBULHdFQUFZQSxDQUFDZ29CLFFBQTdCO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsZ0JBQUksS0FBS3ZyQixNQUFMLENBQVkxRCxNQUFNaUosR0FBbEIsQ0FBSixFQUE0QjtBQUMxQjtBQUNBdTJDLHlCQUFXLEtBQUs5N0MsTUFBTCxDQUFZMUQsTUFBTWlKLEdBQWxCLEVBQXVCODJDLGFBQWxDO0FBQ0FQLHVCQUFTQSxTQUFTcGdELE1BQVQsR0FBa0IsQ0FBM0IsRUFBOEI4VCxXQUE5QixDQUEwQ3FwQyxRQUExQztBQUVELGFBTEQsTUFLTyxJQUFJdDlDLFNBQVNlLE1BQU1pSixHQUFmLEVBQW9CLEVBQXBCLEtBQTJCLENBQS9CLEVBQWtDO0FBQ3ZDO0FBQ0ErQyx1QkFBU2xGLFNBQVNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBVDtBQUNBLGtCQUFHL0csTUFBTXVjLFVBQU4sS0FBcUIsR0FBeEIsRUFBNkI7QUFDekJoYixrQkFBRWc3QyxRQUFGLEVBQVlsaUMsUUFBWixDQUFxQnBULHdFQUFZQSxDQUFDd2YsS0FBbEM7QUFDSDtBQUNEbGxCLGdCQUFFeUssTUFBRixFQUFVcU8sUUFBVixDQUFtQnBULHdFQUFZQSxDQUFDNm5CLElBQWhDO0FBQ0F2dEIsZ0JBQUV5SyxNQUFGLEVBQVUrckIsS0FBVixDQUFnQixZQUFZO0FBQzFCLG9CQUFJeDJCLEVBQUUsSUFBRixFQUFRb3RDLE1BQVIsR0FBaUIvd0IsUUFBakIsQ0FBMEIzVyx3RUFBWUEsQ0FBQ3dmLEtBQXZDLENBQUosRUFBbUQ7QUFDakRsbEIsb0JBQUUsSUFBRixFQUFRb3RDLE1BQVIsR0FBaUJ2WSxXQUFqQixDQUE2Qm52Qix3RUFBWUEsQ0FBQ3dmLEtBQTFDLEVBQWlEcE0sUUFBakQsQ0FBMERwVCx3RUFBWUEsQ0FBQ3luQixJQUF2RTtBQUNELGlCQUZELE1BRU87QUFDTG50QixvQkFBRSxJQUFGLEVBQVFvdEMsTUFBUixHQUFpQnZZLFdBQWpCLENBQTZCbnZCLHdFQUFZQSxDQUFDeW5CLElBQTFDLEVBQWdEclUsUUFBaEQsQ0FBeURwVCx3RUFBWUEsQ0FBQ3dmLEtBQXRFO0FBQ0Q7QUFDRixlQU5EO0FBT0FsbEIsZ0JBQUV5SyxNQUFGLEVBQVU4ekMsWUFBVixDQUF1QmxELE1BQXZCO0FBQ0E2Qyw2QkFBZWxpRCxRQUFRdy9DLFdBQVIsR0FBc0JqMkMsU0FBU0MsYUFBVCxDQUF1QixJQUF2QixDQUF0QixHQUFxREQsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFwRTtBQUNBZixtQkFBSys1QyxhQUFMLEdBQXFCLzVDLEtBQUsrNUMsYUFBTCxJQUFzQixFQUEzQztBQUNBLzVDLG1CQUFLKzVDLGFBQUwsQ0FBbUJ2Z0QsSUFBbkIsQ0FBd0JpZ0QsWUFBeEI7QUFDQWxELHVCQUFTcnBDLFdBQVQsQ0FBcUJ1c0MsWUFBckI7QUFDQXRILHNCQUFRamxDLFdBQVIsQ0FBb0JxcEMsUUFBcEI7QUFDRCxhQXBCTSxNQW9CQTtBQUNMO0FBQ0FwRSxzQkFBUWpsQyxXQUFSLENBQW9CcXBDLFFBQXBCO0FBQ0Q7O0FBRUQsZ0JBQUl2OEMsTUFBTVgsRUFBVixFQUFjO0FBQ1Ysa0JBQUl3aUQsUUFBUTdoRCxNQUFNWCxFQUFOLENBQVMrUixRQUFULEVBQVo7QUFDQWd2QywyQkFBYXB1QyxtQkFDVDZ2QyxNQUFNMWlELFdBQU4sRUFEUyxFQUVYOFMsT0FGVyxDQUVILGdCQUZHLEVBRWMsRUFGZCxDQUFiO0FBR0ExUSxnQkFBRWc3QyxRQUFGLEVBQVlsaUMsUUFBWixDQUFxQix3QkFBc0IrbEMsVUFBM0M7QUFDSDs7QUFFRCxnQkFBSXBnRCxNQUFNa04sUUFBVixFQUFvQjtBQUNoQjNMLGdCQUFFZzdDLFFBQUYsRUFBWWxpQyxRQUFaLENBQXFCcmEsTUFBTWtOLFFBQTNCO0FBQ0g7O0FBRUQ7QUFDQSxnQkFBSXZDLE9BQU9DLFlBQVAsS0FBd0JxRixTQUF4QixJQUFxQyxRQUFPdEYsT0FBT0MsWUFBUCxDQUFvQmszQyx5QkFBM0IsTUFBeUQsUUFBbEcsRUFBNEc7QUFDMUd4aUQsNEVBQUtBLENBQUNnQixpQkFBTixDQUNJcUssT0FBT0MsWUFBUCxDQUFvQmszQyx5QkFEeEIsRUFFSSxFQUFDQyxNQUFNLElBQVAsRUFBYS83QyxNQUFNQSxJQUFuQixFQUF5QjIyQyxPQUFPQyxNQUFoQyxFQUZKO0FBSUQ7QUFDRjtBQUNGLFNBbktrQyxDQW1LakM7O0FBRUY7QUFDQSxZQUFJLEtBQUsvd0MsU0FBTCxDQUFldE8sT0FBZixDQUF1QnE5QyxNQUEzQixFQUFtQztBQUMvQixjQUFJNEMsS0FBSzEyQyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQVQ7QUFDQXkyQyxhQUFHeDJDLFNBQUgsR0FBZSx5Q0FBZjtBQUNBLGNBQUk0ekMsU0FBUzl6QyxTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQWI7QUFDQTZ6QyxpQkFBT3p0QyxJQUFQLEdBQWMsTUFBZDtBQUNBeXRDLGlCQUFPNkMsV0FBUCxHQUFxQixFQUFyQixDQUwrQixDQUtOO0FBQ3pCLGNBQUk3K0MsSUFBSWtJLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBUjtBQUNBbkksWUFBRW9JLFNBQUYsR0FBYyxlQUFkO0FBQ0FwSSxZQUFFcVUsWUFBRixDQUFlLGFBQWYsRUFBOEIsTUFBOUI7QUFDQXVxQyxhQUFHdHFDLFdBQUgsQ0FBZTBuQyxNQUFmO0FBQ0E0QyxhQUFHdHFDLFdBQUgsQ0FBZXRVLENBQWY7QUFDQWc4QyxpQkFBTzhDLE9BQVAsR0FBaUIsWUFBVztBQUN4QixxQkFBU0MsV0FBVCxDQUFxQnA1QyxPQUFyQixFQUE4QnE1QyxXQUE5QixFQUEyQzs7QUFFekM7O0FBRUVBLDRCQUFjQSxlQUFlLEtBQTdCLENBSnVDLENBSUY7O0FBRXJDOzs7O0FBSUEsdUJBQVNDLG9CQUFULENBQThCdDVDLE9BQTlCLEVBQXVDdTVDLE9BQXZDLEVBQWdEO0FBQzVDLG9CQUFJQyxRQUFRLEVBQVo7QUFDQSxxQkFBSyxJQUFJbi9DLElBQUksQ0FBYixFQUFnQkEsSUFBSTJGLFFBQVFxTyxRQUFSLENBQWlCeFQsTUFBckMsRUFBNkNSLEdBQTdDLEVBQWtEO0FBQzlDLHNCQUFJMkYsUUFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQmsvQyxPQUFwQixDQUE0QjViLFdBQTVCLE1BQTZDNGIsUUFBUTViLFdBQVIsRUFBakQsRUFBd0U7QUFDcEU2YiwwQkFBTXYrQyxJQUFOLENBQVcrRSxRQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLENBQVg7QUFDSDtBQUNKO0FBQ0Qsb0JBQUdtL0MsTUFBTTMrQyxNQUFOLEdBQWUsQ0FBbEIsRUFBcUI7QUFDakIseUJBQU8yK0MsTUFBTSxDQUFOLENBQVAsQ0FEaUIsQ0FDQTtBQUNwQixpQkFGRCxNQUVPO0FBQ0gseUJBQU8sS0FBUDtBQUNIO0FBQ0o7O0FBRUQsa0JBQUlDLGNBQWMsS0FBbEI7QUFDQSxrQkFBSUMsaUJBQWlCLEtBQXJCO0FBQ0E7QUFDQSxtQkFBSSxJQUFJci9DLElBQUksQ0FBWixFQUFlQSxJQUFJMkYsUUFBUXFPLFFBQVIsQ0FBaUJ4VCxNQUFwQyxFQUE0Q1IsR0FBNUMsRUFBZ0Q7QUFDNUMyRix3QkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQndCLEtBQXBCLENBQTBCa04sT0FBMUIsR0FBb0MsT0FBcEM7O0FBRUEsb0JBQUk0d0MsVUFBVSxLQUFkOztBQUVBO0FBQ0Esb0JBQUkzNUMsUUFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQmlVLG9CQUFwQixDQUF5QyxHQUF6QyxFQUE4QyxDQUE5QyxFQUFpRE0sU0FBakQsQ0FBMkQrdUIsV0FBM0QsR0FBeUU1K0IsT0FBekUsQ0FBaUZzM0MsT0FBT3BxQyxLQUFQLENBQWEweEIsV0FBYixFQUFqRixLQUFnSCxDQUFwSCxFQUF1SDtBQUNuSDtBQUNBZ2MsNEJBQVUsSUFBVjtBQUNIOztBQUVEO0FBQ0Esb0JBQUlDLEtBQUtOLHFCQUFxQnQ1QyxRQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLENBQXJCLEVBQXlDLElBQXpDLENBQVQ7O0FBRUEsb0JBQUd1L0MsRUFBSCxFQUFPO0FBQ0g7QUFDQSxzQkFBSUMsYUFBYSxJQUFqQjtBQUNBSCxtQ0FBaUJOLFlBQVlRLEVBQVosRUFBZ0JQLGVBQWVNLE9BQS9CLENBQWpCO0FBQ0gsaUJBSkQsTUFJTztBQUNILHNCQUFJRSxhQUFhLEtBQWpCO0FBQ0g7O0FBRUQsb0JBQUlGLFdBQVdELGNBQVgsSUFBNkJMLFdBQWpDLEVBQThDO0FBQzFDSSxnQ0FBYyxJQUFkLENBRDBDLENBQ3RCO0FBQ3BCO0FBQ0F6NUMsMEJBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsRUFBb0J3QixLQUFwQixDQUEwQmtOLE9BQTFCLEdBQW9DLEVBQXBDOztBQUVBLHNCQUFJc3RDLE9BQU9wcUMsS0FBUCxDQUFhcFIsTUFBYixHQUFzQixDQUExQixFQUE2QjtBQUN6Qm1GLDRCQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLEVBQW9CeS9DLFNBQXBCLENBQThCcmQsTUFBOUIsQ0FBcUMsV0FBckM7QUFDQXo4Qiw0QkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQnkvQyxTQUFwQixDQUE4QkMsR0FBOUIsQ0FBa0MsVUFBbEM7QUFDSDs7QUFFRC81QywwQkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQnkvQyxTQUFwQixDQUE4QnJkLE1BQTlCLENBQXFDLDRCQUFyQyxFQVYwQyxDQVUwQjtBQUNwRSxzQkFBSWtkLFdBQVd0RCxPQUFPcHFDLEtBQVAsQ0FBYXBSLE1BQWIsR0FBc0IsQ0FBckMsRUFBd0M7QUFBQ21GLDRCQUFRcU8sUUFBUixDQUFpQmhVLENBQWpCLEVBQW9CeS9DLFNBQXBCLENBQThCQyxHQUE5QixDQUFrQyw0QkFBbEM7QUFBZ0U7QUFDNUcsaUJBWkQsTUFZTztBQUNIO0FBQ0EvNUMsMEJBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsRUFBb0J3QixLQUFwQixDQUEwQmtOLE9BQTFCLEdBQW9DLE1BQXBDO0FBQ0EvSSwwQkFBUXFPLFFBQVIsQ0FBaUJoVSxDQUFqQixFQUFvQnkvQyxTQUFwQixDQUE4QnJkLE1BQTlCLENBQXFDLFVBQXJDO0FBQ0F6OEIsMEJBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsRUFBb0J5L0MsU0FBcEIsQ0FBOEJDLEdBQTlCLENBQWtDLFdBQWxDO0FBQ0EvNUMsMEJBQVFxTyxRQUFSLENBQWlCaFUsQ0FBakIsRUFBb0J5L0MsU0FBcEIsQ0FBOEJyZCxNQUE5QixDQUFxQyw0QkFBckM7QUFDSDtBQUVKOztBQUVELGtCQUFJZ2QsV0FBSixFQUFpQjtBQUNiLHVCQUFPLElBQVA7QUFDSCxlQUZELE1BRU87QUFDSCx1QkFBTyxLQUFQO0FBQ0g7QUFDSjtBQUNEO0FBQ0FPLHVCQUFZLFlBQVU7QUFDcEI7QUFDQSxrQkFBSTNELE9BQU9wcUMsS0FBUCxDQUFhcFIsTUFBYixJQUF1QixDQUEzQixFQUE4QnUrQyxZQUFZNzJDLFNBQVMwM0MsYUFBVCxDQUF1QixrQ0FBdkIsQ0FBWjtBQUMvQixhQUhELEVBR0csR0FISDtBQUtILFdBcEZEOztBQXNGQWxDLHlCQUFlcHBDLFdBQWYsQ0FBMkJzcUMsRUFBM0I7QUFFSDtBQUNEbEIsdUJBQWVwcEMsV0FBZixDQUEyQmlsQyxPQUEzQjtBQUNEO0FBQ0YsS0E5cUIySCxFQThxQnpIO0FBQ0g7Ozs7O0FBS0E2SiwwQkFBc0IsOEJBQVUxb0MsUUFBVixFQUFvQjtBQUN4QyxVQUFJdFosS0FBSixFQUNJaWlELFdBREosRUFFSXZrRCxJQUZKO0FBR0FBLGFBQU8sSUFBUDtBQUNBdWtELG9CQUFjLENBQWQ7QUFDQWppRCxjQUFRdEMsS0FBS0wsS0FBTCxDQUFXNjlDLGVBQVgsQ0FBMkJoeEMsU0FBM0IsQ0FBcUNvUCxRQUFyQyxDQUFSO0FBQ0EsVUFBSXRaLFNBQVNBLE1BQU1vTSxNQUFmLElBQXlCcE0sTUFBTW9NLE1BQU4sQ0FBYWhOLE1BQWIsR0FBc0IsQ0FBbkQsRUFBc0Q7QUFDcEQ7QUFDQVksY0FBTW9NLE1BQU4sQ0FBYWxHLE9BQWIsQ0FBcUIsVUFBVXlGLEtBQVYsRUFBaUI7QUFDcEMsY0FBSWpPLEtBQUtMLEtBQUwsQ0FBV3dRLGNBQVgsQ0FBMEJsQyxNQUFNdE0sRUFBaEMsQ0FBSixFQUF5QztBQUN2QzRpRCwwQkFBY0EsY0FBYyxDQUE1QjtBQUNELFdBRkQsTUFFTztBQUNMO0FBQ0FBLDBCQUFjQSxjQUFjdmtELEtBQUtza0Qsb0JBQUwsQ0FBMEJyMkMsTUFBTWhOLEdBQWhDLENBQTVCO0FBQ0Q7QUFDRixTQVBEO0FBUUQ7QUFDRCxhQUFPc2pELFdBQVA7QUFDRCxLQXZzQjJILEVBdXNCekg7O0FBRUg7Ozs7QUFJQTNCLDBCQUFzQiw4QkFBVTNELEtBQVYsRUFBaUI7QUFDckMsVUFBSSxLQUFLcUYsb0JBQUwsQ0FBMEJ6Z0QsRUFBRW83QyxLQUFGLEVBQVM1K0MsSUFBVCxDQUFjLEtBQWQsQ0FBMUIsS0FBbUQsQ0FBdkQsRUFBMEQ7QUFDeER3RCxVQUFFbzdDLEtBQUYsRUFBU3BpQyxHQUFULENBQWEsYUFBYixFQUE0QixNQUE1QjtBQUNELE9BRkQsTUFFTztBQUNMaFosVUFBRW83QyxLQUFGLEVBQVNwaUMsR0FBVCxDQUFhLGFBQWIsRUFBNEIsUUFBNUI7QUFDRDtBQUNELFdBQUsxTyxTQUFMLENBQWV5MUIsTUFBZjtBQUNBLGFBQU8sSUFBUDtBQUNELEtBcnRCMkg7O0FBdXRCNUhpZix3QkFBb0IsNEJBQVU1RCxLQUFWLEVBQWlCcmpDLFFBQWpCLEVBQTJCNG9DLFlBQTNCLEVBQXlDO0FBQzNELFVBQUlsaUQsS0FBSixFQUNJbWlELFdBREosRUFFSUMsV0FGSjs7QUFJQXBpRCxjQUFRLEtBQUszQyxLQUFMLENBQVc2OUMsZUFBWCxDQUEyQmh4QyxTQUEzQixDQUFxQ29QLFFBQXJDLENBQVI7QUFDQSxVQUFJdFosTUFBTWlKLEdBQU4sSUFBYSxLQUFLNEMsU0FBTCxDQUFldE8sT0FBZixDQUF1QkQsYUFBdkIsQ0FBcUNTLElBQXJDLENBQTBDcU0sS0FBM0QsRUFBa0U7QUFDaEU7QUFDQTtBQUNBZzRDLHNCQUFjLEtBQUsva0QsS0FBTCxDQUFXNjlDLGVBQVgsQ0FBMkJoeEMsU0FBM0IsQ0FBcUNsSyxNQUFNaUosR0FBM0MsQ0FBZDtBQUNBLFlBQUltNUMsV0FBSixFQUFpQjtBQUNmRCx3QkFBY3hGLE1BQU1oYyxVQUFOLENBQWlCQSxVQUFqQixDQUE0QkEsVUFBNUIsQ0FBdUM5dEIsb0JBQXZDLENBQTRELEdBQTVELEVBQWlFLENBQWpFLENBQWQ7QUFDQSxjQUFJc3ZDLFdBQUosRUFBaUI7QUFDZixnQkFBSSxLQUFLOWtELEtBQUwsQ0FBV3dRLGNBQVgsQ0FBMEJxMEMsYUFBYTdpRCxFQUF2QyxDQUFKLEVBQWdEO0FBQzlDa0MsZ0JBQUU0Z0QsV0FBRixFQUFlNW5DLEdBQWYsQ0FBbUIsYUFBbkIsRUFBa0MsTUFBbEM7QUFDRCxhQUZELE1BRU87QUFDTCxrQkFBSSxLQUFLeW5DLG9CQUFMLENBQTBCemdELEVBQUU0Z0QsV0FBRixFQUFlcGtELElBQWYsQ0FBb0IsS0FBcEIsQ0FBMUIsS0FBeUQsQ0FBN0QsRUFBZ0U7QUFDOUR3RCxrQkFBRTRnRCxXQUFGLEVBQWU1bkMsR0FBZixDQUFtQixhQUFuQixFQUFrQyxNQUFsQztBQUNELGVBRkQsTUFFTztBQUNMaFosa0JBQUU0Z0QsV0FBRixFQUFlNW5DLEdBQWYsQ0FBbUIsYUFBbkIsRUFBa0MsUUFBbEM7QUFDQTtBQUNEO0FBQ0Y7QUFDRCxpQkFBS2dtQyxrQkFBTCxDQUF3QjRCLFdBQXhCLEVBQXFDQyxZQUFZL2lELEVBQWpELEVBQXFEK2lELFdBQXJEO0FBQ0Q7QUFDRjtBQUNGLE9BcEJELE1Bb0JPO0FBQ0wsZUFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFwdkIySCxHQUFuRSxDQUEzRCxDQXpCaUIsQ0Erd0JiO0FBRUwsQ0FqeEJBLEVBaXhCQ3prRCxNQWp4QkQsRUFpeEJTLEtBQUtxTSxHQWp4QmQsQ0FBRDs7QUFteEJPLElBQUlxeEMsZ0JBQWdCLEtBQUtyeEMsR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsQ0FBc0JvbUIsZUFBdEIsQ0FBc0NMLGFBQTFELEM7Ozs7Ozs7Ozs7Ozs7QUM1eUJQO0FBQUE7QUFBQTtBQUNBLEtBQUtyeEMsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjNmdCLE9BQWQsR0FBd0IsS0FBS3RyQixHQUFMLENBQVN5SyxJQUFULENBQWM2Z0IsT0FBZCxJQUF5QixFQUFqRDs7QUFFQTs7QUFFQyxXQUFVL3pCLENBQVYsRUFBYXlJLEdBQWIsRUFBa0I7QUFDakI7O0FBRUE7Ozs7Ozs7OztBQVFBQSxNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUIrc0IsU0FBakIsR0FBNkIsVUFBVTlrRCxPQUFWLEVBQW1COztBQUU5QyxRQUFJRyxJQUFKLEVBQ0k2RyxPQURKLEVBRUkrOUMsZUFGSjs7QUFJQTVrRCxXQUFPLElBQVA7O0FBRUEsUUFBSSxDQUFDSCxPQUFELElBQVksQ0FBQ0EsUUFBUXM3QixPQUF6QixFQUFrQztBQUNoQ3g2QixjQUFRQyxJQUFSLENBQWEsMENBQWI7QUFDQSxhQUFPLEtBQVA7QUFDRDs7QUFFRDtBQUNBZixjQUFVZ0UsRUFBRUgsTUFBRixDQUFTO0FBQ2pCNEYsaUJBQVdDLHdFQUFZQSxDQUFDZ3NCLFVBRFA7QUFFakJzdkIscUJBQWU7QUFGRSxLQUFULEVBR1BobEQsT0FITyxDQUFWOztBQUtBZ0gsY0FBVXVDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVjtBQUNBeEMsWUFBUXlDLFNBQVIsR0FBb0J6SixRQUFReUosU0FBNUI7QUFDQXpDLFlBQVE0TyxTQUFSLEdBQW9CNVYsUUFBUXM3QixPQUFSLENBQWdCdnlCLE9BQWhCLEVBQXBCOztBQUVBZzhDLHNCQUFrQiwyQkFBWTtBQUM1Qi85QyxjQUFRNE8sU0FBUixHQUFvQmxVLFNBQVMxQixRQUFRczdCLE9BQVIsQ0FBZ0J2eUIsT0FBaEIsRUFBVCxDQUFwQjtBQUNELEtBRkQ7O0FBSUEvSSxZQUFRczdCLE9BQVIsQ0FBZ0I3Z0IsRUFBaEIsQ0FBbUIsbUJBQW5CLEVBQXdDc3FDLGVBQXhDO0FBQ0F2aEQsT0FBR3UwQixPQUFILENBQVdvQixPQUFYLENBQW1CQyxJQUFuQixDQUF3QixJQUF4QixFQUE4QjtBQUM1QnB5QixlQUFTQSxPQURtQjtBQUU1QnF5QixjQUFRcjVCLFFBQVFxNUI7QUFGWSxLQUE5QjtBQUlELEdBaENEO0FBaUNBNzFCLEtBQUc4MUIsUUFBSCxDQUFZN3NCLElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQitzQixTQUE3QixFQUF3Q3RoRCxHQUFHdTBCLE9BQUgsQ0FBV29CLE9BQW5EOztBQUdBOzs7QUFHQTFzQixNQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUIrc0IsU0FBakIsQ0FBMkJ2ckIsU0FBM0IsR0FBdUN2MUIsRUFBRUgsTUFBRixDQUFTNEksSUFBSXlLLElBQUosQ0FBUzZnQixPQUFULENBQWlCK3NCLFNBQWpCLENBQTJCdnJCLFNBQXBDLEVBQStDOztBQUVwRjs7QUFGb0YsR0FBL0MsQ0FBdkMsQ0FsRGlCLENBc0RiO0FBRUwsQ0F4REEsRUF3RENuNUIsTUF4REQsRUF3RFMsS0FBS3FNLEdBeERkLENBQUQ7O0FBMERPLElBQUlxNEMsWUFBWSxLQUFLcjRDLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZnQixPQUFkLENBQXNCK3NCLFNBQXRDLEM7Ozs7Ozs7Ozs7Ozs7QUNqRVA7QUFBQTtBQUNBLEtBQUtyNEMsR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7QUFDQSxLQUFLekssR0FBTCxDQUFTeUssSUFBVCxDQUFjdW1CLFdBQWQsR0FBNEIsS0FBS2h4QixHQUFMLENBQVN5SyxJQUFULENBQWN1bUIsV0FBZCxJQUE2QixFQUF6RDs7QUFFQyxXQUFVejVCLENBQVYsRUFBYXlJLEdBQWIsRUFBa0I7QUFDakI7O0FBRUE7Ozs7Ozs7QUFNQUEsUUFBSXlLLElBQUosQ0FBU3VtQixXQUFULENBQXFCd25CLFNBQXJCLEdBQWlDLFVBQVVqbEQsT0FBVixFQUFtQjtBQUNsRCxZQUFJbUosT0FBSixFQUNJKzdDLFlBREosRUFFSXp0QyxHQUZKLEVBR0lELEdBSEosRUFJSTJ0QyxNQUpKLEVBS0lDLE1BTEosRUFNSUMsTUFOSixFQU9JQyxNQVBKOztBQVNBLGFBQUt0bEQsT0FBTCxHQUFlQSxXQUFXLEVBQTFCOztBQUVBLFlBQUksQ0FBQyxLQUFLQSxPQUFMLENBQWFrbEQsWUFBZCxJQUE4QixDQUFDLEtBQUtsbEQsT0FBTCxDQUFha2xELFlBQWIsQ0FBMEIxa0QsSUFBN0QsRUFBbUU7QUFDakVNLG9CQUFRQyxJQUFSLENBQWEsd0RBQWI7QUFDQSxtQkFBTyxLQUFQO0FBQ0Q7O0FBRURvSSxrQkFBVSxLQUFLbkosT0FBTCxDQUFha2xELFlBQWIsQ0FBMEIxa0QsSUFBcEM7QUFDQTBrRCx1QkFBZSxLQUFLbGxELE9BQUwsQ0FBYWtsRCxZQUE1QjtBQUNBO0FBQ0EsYUFBS0ssVUFBTCxHQUFrQnZoRCxFQUFFbUYsUUFBUXE4QyxTQUFSLENBQWtCQyxXQUFwQixDQUFsQjtBQUNBLGFBQUtDLFVBQUwsR0FBa0IxaEQsRUFBRW1GLFFBQVFxOEMsU0FBUixDQUFrQkcsV0FBcEIsQ0FBbEI7O0FBRUEsYUFBS0MsZ0JBQUwsR0FBd0IsSUFBSXBpRCxHQUFHRSxNQUFILENBQVV1USxNQUFkLENBQXFCLEVBQXJCLENBQXhCO0FBQ0EsYUFBSzR4QyxnQkFBTCxHQUF3QixJQUFJcmlELEdBQUdmLEtBQUgsQ0FBU3dSLE1BQWIsQ0FBb0I7QUFDMUN2USxvQkFBUSxLQUFLa2lELGdCQUQ2QjtBQUUxQy9pRCxtQkFBTyxLQUFLaWpEO0FBRjhCLFNBQXBCLENBQXhCO0FBSUEsYUFBS0MsaUJBQUwsR0FBeUIsSUFBekI7O0FBRUEsWUFBSSxLQUFLUixVQUFMLENBQWdCNWMsR0FBaEIsTUFBeUIsS0FBSytjLFVBQUwsQ0FBZ0IvYyxHQUFoQixFQUE3QixFQUFvRDtBQUNsRGx4QixrQkFBTSxLQUFLaXVDLFVBQUwsQ0FBZ0IvYyxHQUFoQixFQUFOO0FBQ0FueEIsa0JBQU0sS0FBSyt0QyxVQUFMLENBQWdCNWMsR0FBaEIsRUFBTjs7QUFFQSxnQkFBSXgvQixRQUFRcThDLFNBQVIsQ0FBa0JRLFNBQXRCLEVBQWlDO0FBQzdCLHFCQUFLTixVQUFMLENBQWdCamlCLE1BQWhCO0FBQ0EscUJBQUs4aEIsVUFBTCxDQUFnQjloQixNQUFoQjs7QUFFQTBoQix5QkFBUzF0QyxJQUFJMVIsT0FBSixDQUFZLEdBQVosQ0FBVDtBQUNBcS9DLHlCQUFTNXRDLElBQUl6UixPQUFKLENBQVksR0FBWixDQUFUO0FBQ0EwUixzQkFBTUEsSUFBSS9DLE9BQUosQ0FBWSxLQUFaLEVBQW1CLEVBQW5CLENBQU47QUFDQThDLHNCQUFNQSxJQUFJOUMsT0FBSixDQUFZLEtBQVosRUFBbUIsRUFBbkIsQ0FBTjtBQUNBMndDLHlCQUFTaGpDLEtBQUs0akMsS0FBTCxDQUFZNWpDLEtBQUs2akMsTUFBTCxNQUFpQixjQUFjLENBQS9CLENBQUQsR0FBc0MsQ0FBakQsQ0FBVDtBQUNBWix5QkFBU2pqQyxLQUFLNGpDLEtBQUwsQ0FBWTVqQyxLQUFLNmpDLE1BQUwsTUFBaUIsY0FBYyxDQUEvQixDQUFELEdBQXNDLENBQWpELENBQVQ7QUFDQSxvQkFBSWIsU0FBUyxXQUFiLEVBQTBCO0FBQ3RCNXRDLDBCQUFNL1YsU0FBUytWLEdBQVQsSUFBZ0I0dEMsTUFBdEI7QUFDSCxpQkFGRCxNQUVPO0FBQ0g1dEMsMEJBQU0vVixTQUFTK1YsR0FBVCxJQUFnQjR0QyxNQUF0QjtBQUNIO0FBQ0Qsb0JBQUlDLFNBQVMsV0FBYixFQUEwQjtBQUN0Qjl0QywwQkFBTTlWLFNBQVM4VixHQUFULElBQWdCOHRDLE1BQXRCO0FBQ0gsaUJBRkQsTUFFTztBQUNIOXRDLDBCQUFNOVYsU0FBUzhWLEdBQVQsSUFBZ0I4dEMsTUFBdEI7QUFDSDtBQUNEN3RDLHNCQUFNQSxNQUFNLEVBQVo7QUFDQUQsc0JBQU1BLE1BQU0sRUFBWjtBQUNBQyxzQkFBTUEsSUFBSWxELE1BQUosQ0FBVyxDQUFYLEVBQWM0d0MsTUFBZCxJQUF3QixHQUF4QixHQUE4QjF0QyxJQUFJbEQsTUFBSixDQUFXNHdDLE1BQVgsRUFBbUIxdEMsSUFBSTVWLE1BQUosR0FBYXNqRCxNQUFoQyxDQUFwQztBQUNBM3RDLHNCQUFNQSxJQUFJakQsTUFBSixDQUFXLENBQVgsRUFBYzZ3QyxNQUFkLElBQXdCLEdBQXhCLEdBQThCNXRDLElBQUlqRCxNQUFKLENBQVc2d0MsTUFBWCxFQUFtQjV0QyxJQUFJM1YsTUFBSixHQUFhdWpELE1BQWhDLENBQXBDO0FBQ0g7O0FBRUQsaUJBQUtXLGlCQUFMLEdBQXlCLElBQUl2aUQsR0FBR21VLE9BQVAsQ0FBZTtBQUN0Q0MsMEJBQVUsSUFBSXBVLEdBQUdxVCxJQUFILENBQVFDLEtBQVosQ0FBa0J0VCxHQUFHNlEsSUFBSCxDQUFRNEosVUFBUixDQUFtQixDQUFDeEMsV0FBV2pFLEdBQVgsQ0FBRCxFQUFrQmlFLFdBQVdoRSxHQUFYLENBQWxCLENBQW5CLENBQWxCLENBRDRCO0FBRXRDMHVDLDZCQUFhLENBQUMsQ0FBRCxFQUFJLEdBQUosRUFBUyxHQUFULEVBQWMsQ0FBZCxDQUZ5QjtBQUd0Q0gsMkJBQVc3OEMsUUFBUXE4QyxTQUFSLENBQWtCUTtBQUhTLGFBQWYsQ0FBekI7O0FBTUEsaUJBQUtKLGdCQUFMLENBQXNCM3JDLFVBQXRCLENBQWlDLEtBQUs4ckMsaUJBQXRDOztBQUVBYix5QkFBYS85QyxHQUFiLENBQWlCQyxPQUFqQixHQUEyQm11QyxHQUEzQixDQUErQixLQUFLcVEsZ0JBQUwsQ0FBc0JuekMsU0FBdEIsRUFBL0IsRUFBa0V5eUMsYUFBYS85QyxHQUFiLENBQWlCcXVDLE9BQWpCLEVBQWxFO0FBQ0E7QUFDQTBQLHlCQUFhLzlDLEdBQWIsQ0FBaUJDLE9BQWpCLEdBQTJCOEIsT0FBM0IsQ0FBbUMsRUFBbkM7QUFDRCxTQXpDRCxNQXlDTyxJQUFJQyxRQUFRd3dCLFdBQVIsSUFBdUIsT0FBT3h3QixRQUFRd3dCLFdBQVIsQ0FBb0JPLFdBQTNCLEtBQTJDLFVBQXRFLEVBQWtGO0FBQ3ZGL3dCLG9CQUFRd3dCLFdBQVIsQ0FBb0JPLFdBQXBCLENBQWdDLElBQWhDO0FBQ0Q7QUFDRGdyQixxQkFBYS85QyxHQUFiLENBQWlCK1QsUUFBakIsQ0FBMEIsS0FBSzJxQyxnQkFBL0I7O0FBRUE7O0FBRUE7QUFDQXJpRCxXQUFHaTZCLFdBQUgsQ0FBZTJvQixXQUFmLENBQTJCaHRCLElBQTNCLENBQWdDLElBQWhDLEVBQXNDO0FBQ3BDaXRCLHlCQUFhLEtBQUtybUQsT0FBTCxDQUFhcW1ELFdBQWIsSUFBNEIsS0FBS0E7QUFDOUM7QUFGb0MsU0FBdEM7QUFJRCxLQW5GRDtBQW9GQTdpRCxPQUFHODFCLFFBQUgsQ0FBWTdzQixJQUFJeUssSUFBSixDQUFTdW1CLFdBQVQsQ0FBcUJ3bkIsU0FBakMsRUFBNEN6aEQsR0FBR2k2QixXQUFILENBQWUyb0IsV0FBM0Q7O0FBR0E7OztBQUdBMzVDLFFBQUl5SyxJQUFKLENBQVN1bUIsV0FBVCxDQUFxQnduQixTQUFyQixDQUErQjFyQixTQUEvQixHQUEyQ3YxQixFQUFFSCxNQUFGLENBQVM0SSxJQUFJeUssSUFBSixDQUFTdW1CLFdBQVQsQ0FBcUJ3bkIsU0FBckIsQ0FBK0IxckIsU0FBeEMsRUFBbUQ7O0FBRTVGdXNCLGdDQUF3QixnQ0FBVWgwQyxPQUFWLEVBQW1CdkgsVUFBbkIsRUFBK0JnYSxLQUEvQixFQUFzQztBQUM1RCxnQkFBSTNRLEtBQUosRUFDSTB5QyxLQURKLEVBRUlDLE1BRko7O0FBSUEsZ0JBQUloaUMsS0FBSixFQUFXO0FBQ1QsdUJBQU8sQ0FBQyxDQUFSO0FBQ0Q7O0FBRUQraEMsb0JBQVEsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsRUFBZ0IsQ0FBaEIsQ0FBUjtBQUNBLGdCQUFJeDBDLFdBQVcsT0FBT0EsUUFBUXBKLEdBQWYsS0FBdUIsVUFBbEMsSUFBZ0RvSixRQUFRcEosR0FBUixDQUFZLGFBQVosQ0FBcEQsRUFBZ0Y7QUFDOUVrTCx3QkFBUTlCLFFBQVFwSixHQUFSLENBQVksYUFBWixDQUFSO0FBQ0QsYUFGRCxNQUVPO0FBQ0xrTCx3QkFBUSxDQUFDLEdBQUQsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLEdBQVosQ0FBUjtBQUNEOztBQUVEMnlDLHFCQUFTLEVBQVQ7QUFDQSxnQkFBSXowQyxXQUFXLE9BQU9BLFFBQVFwSixHQUFmLEtBQXVCLFVBQWxDLElBQWdELENBQUNvSixRQUFRcEosR0FBUixDQUFZLFdBQVosQ0FBckQsRUFBK0U7QUFDM0U2OUMsdUJBQU90a0QsSUFBUCxDQUNJLElBQUl1QixHQUFHWCxLQUFILENBQVN1USxLQUFiLENBQW1CO0FBQ2YyUywyQkFBTyxJQUFJdmlCLEdBQUdYLEtBQUgsQ0FBU21iLE1BQWIsQ0FBb0I7QUFDdkI5TCxnQ0FBUSxDQURlO0FBRXZCd0IsOEJBQU0sSUFBSWxRLEdBQUdYLEtBQUgsQ0FBUzhRLElBQWIsQ0FBa0I7QUFDcEJDLG1DQUFPQTtBQURhLHlCQUFsQixDQUZpQjtBQUt2QnNPLGdDQUFRLElBQUkxZSxHQUFHWCxLQUFILENBQVM2ZSxNQUFiLENBQW9CO0FBQ3hCOU4sbUNBQU8weUMsS0FEaUI7QUFFeEJ6a0MsbUNBQU87QUFGaUIseUJBQXBCO0FBTGUscUJBQXBCLENBRFE7QUFXZmlDLDRCQUFRaWdDO0FBWE8saUJBQW5CLENBREo7QUFjQXdDLHVCQUFPdGtELElBQVAsQ0FDSSxJQUFJdUIsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNmMlMsMkJBQU8sSUFBSXZpQixHQUFHWCxLQUFILENBQVNtYixNQUFiLENBQW9CO0FBQ3ZCOUwsZ0NBQVEsRUFEZTtBQUV2QmdRLGdDQUFRLElBQUkxZSxHQUFHWCxLQUFILENBQVM2ZSxNQUFiLENBQW9CO0FBQ3hCOU4sbUNBQU8weUMsS0FEaUI7QUFFeEJ6a0MsbUNBQU87QUFGaUIseUJBQXBCO0FBRmUscUJBQXBCLENBRFE7QUFRZmlDLDRCQUFRaWdDO0FBUk8saUJBQW5CLENBREo7QUFXQXdDLHVCQUFPdGtELElBQVAsQ0FDSSxJQUFJdUIsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNmMlMsMkJBQU8sSUFBSXZpQixHQUFHWCxLQUFILENBQVNtYixNQUFiLENBQW9CO0FBQ3ZCOUwsZ0NBQVEsRUFEZTtBQUV2QmdRLGdDQUFRLElBQUkxZSxHQUFHWCxLQUFILENBQVM2ZSxNQUFiLENBQW9CO0FBQ3hCOU4sbUNBQU9BLEtBRGlCO0FBRXhCaU8sbUNBQU87QUFGaUIseUJBQXBCO0FBRmUscUJBQXBCLENBRFE7QUFRZmlDLDRCQUFRaWdDO0FBUk8saUJBQW5CLENBREo7QUFXQXdDLHVCQUFPdGtELElBQVAsQ0FDSSxJQUFJdUIsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNmMlMsMkJBQU8sSUFBSXZpQixHQUFHWCxLQUFILENBQVNtYixNQUFiLENBQW9CO0FBQ3ZCOUwsZ0NBQVEsRUFEZTtBQUV2QmdRLGdDQUFRLElBQUkxZSxHQUFHWCxLQUFILENBQVM2ZSxNQUFiLENBQW9CO0FBQ3hCOU4sbUNBQU8weUMsS0FEaUI7QUFFeEJ6a0MsbUNBQU87QUFGaUIseUJBQXBCO0FBRmUscUJBQXBCLENBRFE7QUFRZmlDLDRCQUFRaWdDO0FBUk8saUJBQW5CLENBREo7QUFXQXdDLHVCQUFPdGtELElBQVAsQ0FDSSxJQUFJdUIsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNmMlMsMkJBQU8sSUFBSXZpQixHQUFHWCxLQUFILENBQVNtYixNQUFiLENBQW9CO0FBQ3ZCOUwsZ0NBQVEsRUFEZTtBQUV2QmdRLGdDQUFRLElBQUkxZSxHQUFHWCxLQUFILENBQVM2ZSxNQUFiLENBQW9CO0FBQ3hCOU4sbUNBQU9BLEtBRGlCO0FBRXhCaU8sbUNBQU87QUFGaUIseUJBQXBCO0FBRmUscUJBQXBCLENBRFE7QUFRZmlDLDRCQUFRaWdDO0FBUk8saUJBQW5CLENBREo7QUFXSDs7QUFFRHdDLG1CQUFPdGtELElBQVAsQ0FDRSxJQUFJdUIsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNqQjJTLHVCQUFPLElBQUl2aUIsR0FBR1gsS0FBSCxDQUFTbWIsTUFBYixDQUFvQjtBQUN6QjlMLDRCQUFRLEVBRGlCO0FBRXpCZ1EsNEJBQVEsSUFBSTFlLEdBQUdYLEtBQUgsQ0FBUzZlLE1BQWIsQ0FBb0I7QUFDMUI5TiwrQkFBTzB5QyxLQURtQjtBQUUxQnprQywrQkFBTztBQUZtQixxQkFBcEI7QUFGaUIsaUJBQXBCLENBRFU7QUFRakJpQyx3QkFBUWlnQztBQVJTLGFBQW5CLENBREY7O0FBWUF3QyxtQkFBT3RrRCxJQUFQLENBQ0UsSUFBSXVCLEdBQUdYLEtBQUgsQ0FBU3VRLEtBQWIsQ0FBbUI7QUFDakIyUyx1QkFBTyxJQUFJdmlCLEdBQUdYLEtBQUgsQ0FBU21iLE1BQWIsQ0FBb0I7QUFDekI5TCw0QkFBUSxFQURpQjtBQUV6QmdRLDRCQUFRLElBQUkxZSxHQUFHWCxLQUFILENBQVM2ZSxNQUFiLENBQW9CO0FBQzFCOU4sK0JBQU9BLEtBRG1CO0FBRTFCaU8sK0JBQU87QUFGbUIscUJBQXBCO0FBRmlCLGlCQUFwQixDQURVO0FBUWpCaUMsd0JBQVFpZ0M7QUFSUyxhQUFuQixDQURGOztBQVlBLG1CQUFPd0MsTUFBUDtBQUNELFNBekcyRjs7QUEyRzVGRixxQkFBYSxxQkFBVUcsZUFBVixFQUEyQjtBQUN0QyxnQkFBSUEsZ0JBQWdCNTJDLElBQWhCLEtBQXlCLGFBQTdCLEVBQTRDO0FBQzFDLG9CQUFJLENBQUMsS0FBSzVQLE9BQUwsQ0FBYXltRCxpQkFBZCxJQUFtQyxDQUFDLEtBQUt6bUQsT0FBTCxDQUFha2xELFlBQWIsQ0FBMEIxa0QsSUFBMUIsQ0FBK0JnbEQsU0FBL0IsQ0FBeUNrQixRQUFqRixFQUEyRjtBQUN6RiwyQkFBTyxDQUFDLEtBQUtDLElBQUwsQ0FBVUgsZ0JBQWdCbGdCLFVBQTFCLENBQVI7QUFDRDtBQUNGOztBQUVELG1CQUFPLElBQVA7QUFDRCxTQW5IMkY7O0FBcUg1RnFnQixjQUFNLGNBQVVyZ0IsVUFBVixFQUFzQjtBQUMxQixnQkFBSXNnQixTQUFKOztBQUVBQSx3QkFBWXBqRCxHQUFHNlEsSUFBSCxDQUFRczVCLFFBQVIsQ0FBaUJySCxVQUFqQixDQUFaOztBQUVBLGlCQUFLeWYsaUJBQUwsR0FBeUIsSUFBSXZpRCxHQUFHbVUsT0FBUCxDQUFlO0FBQ3RDQywwQkFBVSxJQUFJcFUsR0FBR3FULElBQUgsQ0FBUUMsS0FBWixDQUFrQnd2QixVQUFsQjtBQUQ0QixhQUFmLENBQXpCOztBQUlBLGlCQUFLc2YsZ0JBQUwsQ0FBc0Iza0IsS0FBdEI7QUFDQSxpQkFBSzJrQixnQkFBTCxDQUFzQjNyQyxVQUF0QixDQUFpQyxLQUFLOHJDLGlCQUF0Qzs7QUFFQSxpQkFBS1IsVUFBTCxDQUFnQjVjLEdBQWhCLENBQW9CaWUsVUFBVSxDQUFWLENBQXBCO0FBQ0EsaUJBQUtsQixVQUFMLENBQWdCL2MsR0FBaEIsQ0FBb0JpZSxVQUFVLENBQVYsQ0FBcEI7QUFDQSxpQkFBS3JCLFVBQUwsQ0FBZ0I5WixNQUFoQjtBQUNBLGlCQUFLaWEsVUFBTCxDQUFnQmphLE1BQWhCOztBQUdBLG1CQUFPLElBQVA7QUFDRDs7QUF4STJGLEtBQW5ELENBQTNDLENBbkdpQixDQTZPYjtBQUVMLENBL09BLEVBK09DcnJDLE1BL09ELEVBK09TLEtBQUtxTSxHQS9PZCxDQUFEOztBQWlQTyxJQUFJdzRDLFlBQVksS0FBS3g0QyxHQUFMLENBQVN5SyxJQUFULENBQWN1bUIsV0FBZCxDQUEwQnduQixTQUExQyxDOzs7Ozs7Ozs7Ozs7O0FDdFBQO0FBQUE7QUFBQTs7QUFFQTdrRCxPQUFPbUosUUFBUCxFQUFpQnM5QyxLQUFqQixDQUF1QixZQUFXO0FBQ2hDLE1BQUksT0FBTzE5QyxPQUFQLEtBQW1CLFdBQXZCLEVBQW9DO0FBQ2xDaUUsV0FBTzA1QyxRQUFQLENBQWdCMzlDLE9BQWhCO0FBQ0Q7QUFDRixDQUpEOztBQU1BaUUsT0FBTzA1QyxRQUFQLEdBQWtCLFVBQVMzOUMsT0FBVCxFQUFrQjtBQUNsQyxNQUFJcEosZ0JBQWdCLElBQUlnbkQsZ0VBQUosQ0FBa0I1OUMsT0FBbEIsQ0FBcEI7QUFDRCxDQUZELEM7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1JBO0FBQ0EsS0FBS3NELEdBQUwsR0FBVyxLQUFLQSxHQUFMLElBQVksRUFBdkI7QUFDQSxLQUFLQSxHQUFMLENBQVN5SyxJQUFULEdBQWdCLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULElBQWlCLEVBQWpDO0FBQ0EsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzh2QyxJQUFkLEdBQXFCLEtBQUt2NkMsR0FBTCxDQUFTeUssSUFBVCxDQUFjOHZDLElBQWQsSUFBc0IsRUFBM0M7O0FBRUE7QUFDQTs7QUFFQyxXQUFVaGpELENBQVYsRUFBYXlJLEdBQWIsRUFBa0I7QUFDakI7O0FBRUE7Ozs7Ozs7OztBQVFBQSxRQUFJeUssSUFBSixDQUFTOHZDLElBQVQsQ0FBY0MsUUFBZCxHQUF5QixVQUFVam5ELE9BQVYsRUFBbUI7O0FBRTFDLGFBQUtBLE9BQUwsR0FBZUEsV0FBVyxFQUExQjs7QUFFQTtBQUNBLGFBQUtBLE9BQUwsR0FBZWdFLEVBQUVILE1BQUYsQ0FBUztBQUN0QjtBQUNBNjRCLHNCQUFVO0FBRlksU0FBVCxFQUdaLEtBQUsxOEIsT0FITyxDQUFmOztBQUtBLFlBQUksQ0FBQyxLQUFLQSxPQUFMLENBQWFELGFBQWxCLEVBQWlDO0FBQy9CZSxvQkFBUUMsSUFBUixDQUFhLGdDQUFiO0FBQ0EsbUJBQU8sS0FBUDtBQUNEOztBQUVEO0FBQ0EsYUFBS21tRCxXQUFMLEdBQW1CLEtBQW5CO0FBQ0EsYUFBSy8vQyxHQUFMLEdBQVcsS0FBS25ILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQXRDO0FBQ0EsYUFBS2dnRCxnQkFBTCxHQUF3QixJQUF4QjtBQUNBLGFBQUtDLGtCQUFMLEdBQTBCLElBQTFCOztBQUVBO0FBQ0EsYUFBS0MsWUFBTCxHQUFvQixJQUFJamhCLGlGQUFKLENBQWlCO0FBQ25Dai9CLGlCQUFLLEtBQUtBLEdBRHlCO0FBRW5DbWdELG9CQUFRLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FGMkI7QUFHbkMvZ0Isd0JBQVksSUFIdUI7QUFJbkMwRix1QkFBVztBQUp3QixTQUFqQixDQUFwQjtBQU1BLGFBQUtvYixZQUFMLENBQWtCcG1ELElBQWxCOztBQUVBLFlBQUksS0FBS2pCLE9BQUwsQ0FBYTA4QixRQUFqQixFQUEyQjtBQUN6QixpQkFBS0EsUUFBTDtBQUNEO0FBQ0YsS0FqQ0Q7O0FBbUNBO0FBQ0Fqd0IsUUFBSXlLLElBQUosQ0FBUzh2QyxJQUFULENBQWNDLFFBQWQsQ0FBdUIxdEIsU0FBdkIsR0FBbUN2MUIsRUFBRUgsTUFBRixDQUFTNEksSUFBSXlLLElBQUosQ0FBUzh2QyxJQUFULENBQWNDLFFBQWQsQ0FBdUIxdEIsU0FBaEMsRUFBMkM7O0FBRzVFOzs7OztBQUtBbUQsa0JBQVUsb0JBQVk7QUFDcEIsZ0JBQUksQ0FBQyxLQUFLd3FCLFdBQVYsRUFBdUI7QUFDckIscUJBQUtBLFdBQUwsR0FBbUIsS0FBSy8vQyxHQUFMLENBQVNzVCxFQUFULENBQVksYUFBWixFQUEyQixLQUFLOHNDLGdCQUFMLEVBQTNCLEVBQW9ELElBQXBELENBQW5CO0FBQ0E7QUFDRDtBQUNGLFNBYjJFLEVBYXpFOzs7QUFHSDs7Ozs7QUFLQXRqQixvQkFBWSxzQkFBWTtBQUN0QixnQkFBSSxLQUFLaWpCLFdBQVQsRUFBc0I7QUFDcEIxakQsbUJBQUdna0QsVUFBSCxDQUFjQyxPQUFkLENBQXNCLEtBQUtQLFdBQTNCO0FBQ0EscUJBQUtBLFdBQUwsR0FBbUIsS0FBbkI7QUFDRDtBQUNGLFNBMUIyRSxFQTBCekU7OztBQUdIOzs7OztBQUtBUSxrQkFBVSxvQkFBWTtBQUNwQixnQkFBSSxLQUFLUixXQUFULEVBQXNCO0FBQ3BCLHVCQUFPLElBQVA7QUFDRDtBQUNELG1CQUFPLEtBQVA7QUFDRCxTQXZDMkUsRUF1Q3pFOzs7QUFHSDs7Ozs7QUFLQUssMEJBQWtCLDRCQUFZOztBQUU1QixnQkFBSXBuRCxPQUFPLElBQVg7O0FBRUEsbUJBQU8sVUFBVTI0QixLQUFWLEVBQWlCOztBQUV0QixvQkFBSTZ1QixPQUFKO0FBQUEsb0JBQ0lDLFNBREo7QUFBQSxvQkFFSUMsY0FGSjtBQUFBLG9CQUdJQyxhQUhKO0FBQUEsb0JBSUl0M0MsUUFKSjtBQUFBLG9CQUtJdTNDLGFBTEo7QUFBQSxvQkFNSXA5QyxVQU5KO0FBQUEsb0JBT0l3WSxNQVBKO0FBQUEsb0JBUUloYSxVQUFVaEosS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQVJ6QztBQUFBLG9CQVNJVixRQUFRSyxLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJELEtBVHZDOztBQVlBOG5ELDRCQUFZLEtBQVo7QUFDQUQsMEJBQVV4bkQsS0FBS2dILEdBQUwsQ0FBUzZnRCxxQkFBVCxDQUErQmx2QixNQUFNbXZCLEtBQXJDLEVBQ04sVUFBVW4yQyxPQUFWLEVBQW1CclAsS0FBbkIsRUFBMEI7QUFDeEIsMkJBQU87QUFDTHFQLGlDQUFTQSxPQURKO0FBRUxyUCwrQkFBT0E7QUFGRixxQkFBUDtBQUlELGlCQU5LLENBQVY7QUFPQWtJLDZCQUFheEssS0FBS2dILEdBQUwsQ0FBU0MsT0FBVCxHQUFtQndELGFBQW5CLEVBQWI7O0FBRUEsb0JBQUksQ0FBQys4QyxPQUFMLEVBQWM7QUFDWnhuRCx5QkFBS2tuRCxZQUFMLENBQWtCcG1ELElBQWxCO0FBQ0FraUIsNkJBQVM1WixTQUFTMDNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBVDtBQUNBajlDLHNCQUFFbWYsTUFBRixFQUFVbkcsR0FBVixDQUFjLFFBQWQsRUFBd0IsU0FBeEI7QUFDQSx3QkFBRzdULFFBQVErK0MsWUFBUixLQUF5QixHQUF6QixJQUFnQy8rQyxRQUFRZy9DLGlCQUFSLElBQTZCLEdBQWhFLEVBQW9FO0FBQ2hFMTdDLDRCQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFlcUwsTUFBZixDQUFzQmdjLFdBQXRCLENBQWtDcHNCLElBQUl5SyxJQUFKLENBQVM2RixRQUFULENBQWtCQyxHQUFsQixDQUFzQkMsTUFBeEQ7QUFDSDs7QUFFRCx3QkFBSTljLEtBQUtpbkQsa0JBQUwsSUFBMkJqbkQsS0FBS2duRCxnQkFBcEMsRUFBc0Q7QUFDbkRobkQsNkJBQUtpbkQsa0JBQUwsQ0FBd0Jud0MsUUFBeEIsQ0FBaUM5VyxLQUFLZ25ELGdCQUF0QztBQUNBaG5ELDZCQUFLaW5ELGtCQUFMLEdBQTBCLElBQTFCO0FBQ0Y7QUFDRCwyQkFBTyxLQUFQO0FBQ0Q7O0FBSURqa0MseUJBQVM1WixTQUFTMDNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBVDtBQUNBajlDLGtCQUFFbWYsTUFBRixFQUFVbkcsR0FBVixDQUFjLFFBQWQsRUFBd0IsU0FBeEI7O0FBRUEsb0JBQUkycUMsUUFBUTcxQyxPQUFSLElBQW1CLE9BQU82MUMsUUFBUTcxQyxPQUFSLENBQWdCcEosR0FBdkIsS0FBK0IsVUFBbEQsSUFBZ0VpL0MsUUFBUTcxQyxPQUFSLENBQWdCcEosR0FBaEIsQ0FBb0IsVUFBcEIsQ0FBcEUsRUFBcUc7QUFDbkcsd0JBQUlpL0MsUUFBUTcxQyxPQUFSLENBQWdCcEosR0FBaEIsQ0FBb0IsVUFBcEIsRUFBZ0MsQ0FBaEMsQ0FBSixFQUF3QztBQUN0Q2svQyxvQ0FBWSxJQUFaO0FBQ0QscUJBRkQsTUFHSTtBQUNBRCxnQ0FBUTcxQyxPQUFSLEdBQWtCNjFDLFFBQVE3MUMsT0FBUixDQUFnQnBKLEdBQWhCLENBQW9CLFVBQXBCLEVBQWdDLENBQWhDLENBQWxCO0FBQ0g7QUFDRjtBQUNELG9CQUFHaS9DLFFBQVE3MUMsT0FBUixDQUFnQmtFLFdBQWhCLE1BQWlDMnhDLFFBQVE3MUMsT0FBUixDQUFnQmtFLFdBQWhCLGNBQXlDeFMsR0FBR3FULElBQUgsQ0FBUXlCLFVBQXJGLEVBQWdHO0FBQzVGLDJCQUFPLEtBQVA7QUFDSDtBQUNELG9CQUFHcXZDLFFBQVE3MUMsT0FBUixDQUFnQnBKLEdBQWhCLENBQW9CLGdCQUFwQixLQUEwQ3ZJLEtBQUtpbkQsa0JBQUwsSUFBMkJqbkQsS0FBS2luRCxrQkFBTCxDQUF3QjErQyxHQUF4QixDQUE0QixnQkFBNUIsQ0FBeEUsRUFBd0g7QUFDcEgsd0JBQUl2SSxLQUFLaW5ELGtCQUFMLElBQTJCTyxRQUFRNzFDLE9BQVIsS0FBb0IzUixLQUFLaW5ELGtCQUF4RCxFQUE0RTtBQUN4RSwrQkFBTyxLQUFQO0FBQ0g7O0FBRUQ7QUFDQSx3QkFBSWpuRCxLQUFLZ25ELGdCQUFULEVBQTJCO0FBQ3ZCLDRCQUFJaG5ELEtBQUtpbkQsa0JBQVQsRUFBNkI7QUFDekIsZ0NBQUlPLFFBQVE3MUMsT0FBUixLQUFvQjNSLEtBQUtpbkQsa0JBQTdCLEVBQWlEO0FBQzdDLG9DQUFJam5ELEtBQUtnbkQsZ0JBQVQsRUFBMkI7QUFDdkJobkQseUNBQUtpbkQsa0JBQUwsQ0FBd0Jud0MsUUFBeEIsQ0FBaUM5VyxLQUFLZ25ELGdCQUF0QztBQUNBO0FBQ0gsaUNBSEQsTUFHTyxJQUFJaG5ELEtBQUtpb0QsY0FBVCxFQUF5QjtBQUM1QmpvRCx5Q0FBS2luRCxrQkFBTCxDQUF3Qm53QyxRQUF4QixDQUFpQzlXLEtBQUtpb0QsY0FBdEM7QUFDQTtBQUNIO0FBQ0o7QUFDSjtBQUNKOztBQUdELHdCQUFJVCxRQUFRNzFDLE9BQVIsWUFBMEI2MUMsUUFBUTcxQyxPQUFSLENBQWdCK08sZ0JBQTFDLEtBQ0EsT0FBTzhtQyxRQUFRNzFDLE9BQVIsQ0FBZ0IrTyxnQkFBdkIsS0FBNEMsVUFENUMsSUFFQSxPQUFPOG1DLFFBQVE3MUMsT0FBUixDQUFnQitPLGdCQUFoQixFQUFQLEtBQThDLFVBRmxELEVBRThEO0FBQzFEMWdCLDZCQUFLaW5ELGtCQUFMLEdBQTBCTyxRQUFRNzFDLE9BQWxDOztBQUVBM1IsNkJBQUtpb0QsY0FBTCxHQUFzQlQsUUFBUWxsRCxLQUFSLENBQWNrUSxRQUFkLEVBQXRCO0FBQ0F4Uyw2QkFBS2duRCxnQkFBTCxHQUF3QmhuRCxLQUFLaW9ELGNBQUwsQ0FBb0Jqb0QsS0FBS2luRCxrQkFBekIsQ0FBeEI7QUFDQTtBQUNBLDRCQUFHTyxRQUFRNzFDLE9BQVIsQ0FBZ0JwSixHQUFoQixDQUFvQixhQUFwQixLQUFzQzVJLE1BQU13Uyx1QkFBTixDQUE4QkMsWUFBOUIsQ0FBMkNvMUMsUUFBUTcxQyxPQUFSLENBQWdCcEosR0FBaEIsQ0FBb0IsYUFBcEIsQ0FBM0MsQ0FBekMsRUFBd0g7QUFDcEgsZ0NBQUc1SSxNQUFNd1MsdUJBQU4sQ0FBOEJDLFlBQTlCLENBQTJDbzFDLFFBQVE3MUMsT0FBUixDQUFnQnBKLEdBQWhCLENBQW9CLGFBQXBCLENBQTNDLEVBQStFd1YsZUFBbEYsRUFBa0c7QUFDOUZ5cEMsd0NBQVE3MUMsT0FBUixDQUFnQm1GLFFBQWhCLENBQXlCa0gsU0FBUyxTQUFULEVBQW1CLE1BQW5CLEVBQTBCLEtBQTFCLEVBQWdDcmUsTUFBTXdTLHVCQUFOLENBQThCQyxZQUE5QixDQUEyQ28xQyxRQUFRNzFDLE9BQVIsQ0FBZ0JwSixHQUFoQixDQUFvQixhQUFwQixDQUEzQyxFQUErRXdWLGVBQS9HLEVBQWdJeXBDLFFBQVE3MUMsT0FBeEksQ0FBekI7QUFDSCw2QkFGRCxNQUdJO0FBQ0E2MUMsd0NBQVE3MUMsT0FBUixDQUFnQm1GLFFBQWhCLENBQXlCblgsTUFBTXdTLHVCQUFOLENBQThCQyxZQUE5QixDQUEyQ28xQyxRQUFRNzFDLE9BQVIsQ0FBZ0JwSixHQUFoQixDQUFvQixhQUFwQixDQUEzQyxFQUErRTdGLEtBQS9FLENBQXFGOGtELFFBQVE3MUMsT0FBN0YsQ0FBekI7QUFDSDtBQUNKO0FBRUoscUJBakJELE1Ba0JLLElBQUk2MUMsUUFBUWxsRCxLQUFSLFlBQXdCa2xELFFBQVFsbEQsS0FBUixDQUFjb2UsZ0JBQXRDLEtBQ0wsT0FBTzhtQyxRQUFRbGxELEtBQVIsQ0FBY29lLGdCQUFyQixLQUEwQyxVQURyQyxJQUVMLE9BQU84bUMsUUFBUWxsRCxLQUFSLENBQWNvZSxnQkFBZCxFQUFQLEtBQTRDLFVBRjNDLEVBRXVEOztBQUV4RCw0QkFBSThtQyxRQUFRNzFDLE9BQVosRUFBcUI7QUFDakIzUixpQ0FBS2luRCxrQkFBTCxHQUEwQk8sUUFBUTcxQyxPQUFsQztBQUNILHlCQUZELE1BR0s7QUFDRDNSLGlDQUFLaW5ELGtCQUFMLEdBQTBCTyxRQUFRbGxELEtBQVIsQ0FBY2dYLFNBQWQsR0FBMEIyRCxXQUExQixHQUF3QyxDQUF4QyxDQUExQjtBQUNBamQsaUNBQUtpbkQsa0JBQUwsR0FBMEJqbkQsS0FBS2luRCxrQkFBTCxDQUF3QjErQyxHQUF4QixDQUE0QixVQUE1QixFQUF3QyxDQUF4QyxDQUExQjtBQUNIOztBQUVEdkksNkJBQUtpb0QsY0FBTCxHQUFzQlQsUUFBUWxsRCxLQUFSLENBQWNrUSxRQUFkLEVBQXRCO0FBQ0F4Uyw2QkFBS2duRCxnQkFBTCxHQUF3QmhuRCxLQUFLaW9ELGNBQUwsQ0FBb0Jqb0QsS0FBS2luRCxrQkFBekIsQ0FBeEI7QUFDQSw0QkFBR08sUUFBUTcxQyxPQUFSLENBQWdCcEosR0FBaEIsQ0FBb0IsYUFBcEIsQ0FBSCxFQUF1QztBQUNuQyxnQ0FBRyxDQUFDNUksTUFBTXdTLHVCQUFOLENBQThCQyxZQUE5QixDQUEyQ28xQyxRQUFRNzFDLE9BQVIsQ0FBZ0JwSixHQUFoQixDQUFvQixhQUFwQixDQUEzQyxDQUFKLEVBQW1GO0FBQy9FLG9DQUFJNlcsU0FBUyxFQUFiO0FBQ0FBLHVDQUFPdGQsSUFBUCxDQUFZMGxELFFBQVE3MUMsT0FBUixDQUFnQnBKLEdBQWhCLENBQW9CLGFBQXBCLENBQVo7QUFDQTVJLHNDQUFNd1MsdUJBQU4sQ0FBOEJrSCxrQkFBOUIsQ0FBaUQrRixNQUFqRDtBQUNBcGYscUNBQUtpbkQsa0JBQUwsR0FBMEIsSUFBMUI7QUFDQSx1Q0FBTyxJQUFQO0FBQ0g7QUFDRCxnQ0FBR3RuRCxNQUFNd1MsdUJBQU4sQ0FBOEJDLFlBQTlCLENBQTJDbzFDLFFBQVE3MUMsT0FBUixDQUFnQnBKLEdBQWhCLENBQW9CLGFBQXBCLENBQTNDLEVBQStFd1YsZUFBbEYsRUFBa0c7QUFDOUZ5cEMsd0NBQVE3MUMsT0FBUixDQUFnQm1GLFFBQWhCLENBQXlCa0gsU0FBUyxTQUFULEVBQW1CLE1BQW5CLEVBQTBCLEtBQTFCLEVBQWdDcmUsTUFBTXdTLHVCQUFOLENBQThCQyxZQUE5QixDQUEyQ28xQyxRQUFRNzFDLE9BQVIsQ0FBZ0JwSixHQUFoQixDQUFvQixhQUFwQixDQUEzQyxFQUErRXdWLGVBQS9HLEVBQWdJeXBDLFFBQVE3MUMsT0FBeEksQ0FBekI7QUFDSCw2QkFGRCxNQUdJO0FBQ0E2MUMsd0NBQVE3MUMsT0FBUixDQUFnQm1GLFFBQWhCLENBQXlCblgsTUFBTXdTLHVCQUFOLENBQThCQyxZQUE5QixDQUEyQ28xQyxRQUFRNzFDLE9BQVIsQ0FBZ0JwSixHQUFoQixDQUFvQixhQUFwQixDQUEzQyxFQUErRTdGLEtBQS9FLENBQXFGOGtELFFBQVE3MUMsT0FBN0YsQ0FBekI7QUFDSDtBQUNKO0FBRUo7QUFDSjs7QUFFRCxvQkFBSTYxQyxXQUFXQSxRQUFRNzFDLE9BQW5CLElBQThCNjFDLFFBQVE3MUMsT0FBUixDQUFnQnBKLEdBQWhCLENBQW9CLFVBQXBCLENBQWxDLEVBQW1FO0FBQ2pFO0FBQ0EsMkJBQU8sS0FBUDtBQUNEO0FBQ0Q7QUFDQSxvQkFBSWkvQyxXQUFXQSxRQUFRbGxELEtBQW5CLElBQTRCa2xELFFBQVFsbEQsS0FBUixDQUFjbU4sSUFBZCxLQUF1QixhQUF2RCxFQUFzRTtBQUNwRSwyQkFBTyxLQUFQO0FBQ0Q7O0FBRUQ7QUFDQWk0QyxpQ0FBaUIsS0FBakI7QUFDQSxvQkFBSSxDQUFDRCxTQUFELElBQWNELFFBQVE3MUMsT0FBdEIsSUFBaUMsT0FBTzYxQyxRQUFRNzFDLE9BQVIsQ0FBZ0JwSixHQUF2QixLQUErQixVQUFoRSxLQUErRWkvQyxRQUFRNzFDLE9BQVIsQ0FBZ0JwSixHQUFoQixDQUFvQixTQUFwQixLQUFrQ2kvQyxRQUFRNzFDLE9BQVIsQ0FBZ0JwSixHQUFoQixDQUFvQixjQUFwQixDQUFqSCxDQUFKLEVBQTJKO0FBQ3pKbS9DLHFDQUFpQkYsUUFBUTcxQyxPQUFSLENBQWdCcEosR0FBaEIsQ0FBb0IsU0FBcEIsQ0FBakI7QUFDQSx3QkFBSSxDQUFDbS9DLGNBQUwsRUFBcUI7QUFDbkJBLHlDQUFpQkYsUUFBUTcxQyxPQUFSLENBQWdCcEosR0FBaEIsQ0FBb0IsY0FBcEIsQ0FBakI7QUFDRCxxQkFGRCxNQUVPLElBQUksUUFBT20vQyxjQUFQLHlDQUFPQSxjQUFQLE9BQTBCLFFBQTFCLElBQXNDQSxlQUFlN2dELE9BQXJELElBQWdFNmdELGVBQWU3Z0QsT0FBZixDQUF1QnFoRCxVQUF2QixDQUFrQyxDQUFsQyxDQUFwRSxFQUEwRztBQUMvR1IseUNBQWlCQSxlQUFlN2dELE9BQWYsQ0FBdUJxaEQsVUFBdkIsQ0FBa0MsQ0FBbEMsRUFBcUN6eUMsU0FBdEQ7QUFDRDtBQUNEO0FBQ0QsaUJBUkQsTUFRTyxJQUFJK3hDLFFBQVE3MUMsT0FBUixZQUEwQjYxQyxRQUFRNzFDLE9BQVIsQ0FBZ0IrTyxnQkFBMUMsS0FDUCxPQUFPOG1DLFFBQVE3MUMsT0FBUixDQUFnQitPLGdCQUF2QixLQUE0QyxVQURyQyxJQUVQLE9BQU84bUMsUUFBUTcxQyxPQUFSLENBQWdCK08sZ0JBQWhCLEVBQVAsS0FBOEMsVUFGdkMsSUFHUC9nQixNQUFNd1MsdUJBQU4sQ0FBOEJDLFlBSHZCLElBSVB6UyxNQUFNd1MsdUJBQU4sQ0FBOEJDLFlBQTlCLENBQTJDbzFDLFFBQVE3MUMsT0FBUixDQUFnQitPLGdCQUFoQixHQUFtQ2xXLFVBQW5DLENBQTNDLENBSk8sSUFLUDdLLE1BQU13Uyx1QkFBTixDQUE4QkMsWUFBOUIsQ0FBMkNvMUMsUUFBUTcxQyxPQUFSLENBQWdCK08sZ0JBQWhCLEdBQW1DbFcsVUFBbkMsQ0FBM0MsRUFBMkY4RyxPQUx4RixFQUtpRztBQUN0R28yQyxxQ0FBaUIvbkQsTUFBTXdTLHVCQUFOLENBQThCQyxZQUE5QixDQUEyQ28xQyxRQUFRNzFDLE9BQVIsQ0FBZ0IrTyxnQkFBaEIsR0FBbUNsVyxVQUFuQyxDQUEzQyxFQUEyRjhHLE9BQTVHO0FBQ0E7QUFDRCxpQkFSTSxNQVFBLElBQUlrMkMsUUFBUWxsRCxLQUFSLFlBQXdCa2xELFFBQVFsbEQsS0FBUixDQUFjb2UsZ0JBQXRDLEtBQ1AsT0FBTzhtQyxRQUFRbGxELEtBQVIsQ0FBY29lLGdCQUFyQixLQUEwQyxVQURuQyxJQUVQLE9BQU84bUMsUUFBUWxsRCxLQUFSLENBQWNvZSxnQkFBZCxFQUFQLEtBQTRDLFVBRnJDLElBR1AvZ0IsTUFBTXdTLHVCQUFOLENBQThCQyxZQUh2QixJQUlQelMsTUFBTXdTLHVCQUFOLENBQThCQyxZQUE5QixDQUEyQ28xQyxRQUFRbGxELEtBQVIsQ0FBY29lLGdCQUFkLElBQTNDLENBSk8sSUFLUC9nQixNQUFNd1MsdUJBQU4sQ0FBOEJDLFlBQTlCLENBQTJDbzFDLFFBQVFsbEQsS0FBUixDQUFjb2UsZ0JBQWQsSUFBM0MsRUFBK0VwUCxPQUw1RSxFQUtxRjtBQUMxRm8yQyxxQ0FBaUIvbkQsTUFBTXdTLHVCQUFOLENBQThCQyxZQUE5QixDQUEyQ28xQyxRQUFRbGxELEtBQVIsQ0FBY29lLGdCQUFkLElBQTNDLEVBQStFcFAsT0FBaEc7QUFDRCxpQkFQTSxNQU9BLElBQUlrMkMsUUFBUWxsRCxLQUFSLElBQ1AsT0FBT2tsRCxRQUFRbGxELEtBQVIsQ0FBY29lLGdCQUFyQixLQUEwQyxVQURuQyxJQUVQLE9BQU84bUMsUUFBUWxsRCxLQUFSLENBQWNvZSxnQkFBZCxFQUFQLEtBQTRDLFVBRnJDLElBR1AvZ0IsTUFBTXdTLHVCQUFOLENBQThCQyxZQUh2QixJQUlQelMsTUFBTXdTLHVCQUFOLENBQThCQyxZQUE5QixDQUEyQ28xQyxRQUFRbGxELEtBQVIsQ0FBY29lLGdCQUFkLEdBQWlDLElBQWpDLEVBQXVDLElBQXZDLEVBQTZDLENBQTdDLENBQTNDLENBSk8sSUFLUC9nQixNQUFNd1MsdUJBQU4sQ0FBOEJDLFlBQTlCLENBQTJDbzFDLFFBQVFsbEQsS0FBUixDQUFjb2UsZ0JBQWQsR0FBaUMsSUFBakMsRUFBdUMsSUFBdkMsRUFBNkMsQ0FBN0MsQ0FBM0MsRUFBNEZwUCxPQUx6RixFQUtrRztBQUN2R28yQyxxQ0FBaUIvbkQsTUFBTXdTLHVCQUFOLENBQThCQyxZQUE5QixDQUEyQ28xQyxRQUFRbGxELEtBQVIsQ0FBY29lLGdCQUFkLEdBQWlDLElBQWpDLEVBQXVDLElBQXZDLEVBQTZDLENBQTdDLENBQTNDLEVBQTRGcFAsT0FBN0c7QUFDRCxpQkFQTSxNQU9BLElBQUlrMkMsUUFBUWxsRCxLQUFSLElBQWlCa2xELFFBQVFsbEQsS0FBUixDQUFjZ1AsT0FBbkMsRUFBNEM7QUFDakRvMkMscUNBQWlCRixRQUFRbGxELEtBQVIsQ0FBY2dQLE9BQS9CO0FBQ0Q7QUFDRCxvQkFBSW0yQyxhQUFhRCxRQUFRNzFDLE9BQVIsQ0FBZ0JwSixHQUFoQixDQUFvQixVQUFwQixDQUFqQixFQUFpRDtBQUM3QzhILCtCQUFXbTNDLFFBQVE3MUMsT0FBUixDQUFnQnBKLEdBQWhCLENBQW9CLFVBQXBCLENBQVg7QUFDQSx3QkFBRzhILFNBQVMsQ0FBVCxFQUFZOUgsR0FBWixDQUFnQixTQUFoQixLQUE4QjhILFNBQVMsQ0FBVCxFQUFZOUgsR0FBWixDQUFnQixnQkFBaEIsQ0FBakMsRUFBbUU7QUFDL0RtL0MseUNBQWlCcjNDLFNBQVMsQ0FBVCxFQUFZOUgsR0FBWixDQUFnQixTQUFoQixDQUFqQjtBQUNBcS9DLHdDQUFnQnJtRCxTQUFTOE8sU0FBUyxDQUFULEVBQVk5SCxHQUFaLENBQWdCLGdCQUFoQixDQUFULENBQWhCO0FBQ0EsNkJBQUksSUFBSXJILElBQUksQ0FBWixFQUFlQSxJQUFFbVAsU0FBUzNPLE1BQTFCLEVBQWtDUixHQUFsQyxFQUFzQztBQUNsQyxnQ0FBR21QLFNBQVNuUCxDQUFULEVBQVlxSCxHQUFaLENBQWdCLFNBQWhCLEtBQThCOEgsU0FBU25QLENBQVQsRUFBWXFILEdBQVosQ0FBZ0IsU0FBaEIsS0FBOEIsRUFBL0QsRUFBa0U7QUFDOURtL0MsaURBQWlCQSxpQkFBaUIsSUFBakIsR0FBd0JyM0MsU0FBU25QLENBQVQsRUFBWXFILEdBQVosQ0FBZ0IsU0FBaEIsQ0FBekM7QUFDSDtBQUNKO0FBQ0QsNEJBQUdtL0MsZUFBZWhtRCxNQUFmLEdBQXdCa21ELGdCQUFnQixDQUEzQyxFQUNBO0FBQ0ksZ0NBQUdGLGlCQUFpQkEsZUFBZVMsS0FBZixDQUFxQixDQUFyQixFQUF3QlAsYUFBeEIsQ0FBcEIsRUFBMkQ7QUFDdkRGLGlEQUFpQkEsaUJBQWlCLEtBQWxDO0FBQ0g7QUFFSjtBQUNKLHFCQWZELE1BZ0JLLElBQUdGLFFBQVFsbEQsS0FBUixDQUFjZ1AsT0FBZCxJQUF5QmsyQyxRQUFRbGxELEtBQVIsQ0FBY2lQLGNBQTFDLEVBQXlEO0FBQzFEbzJDLHdDQUFnQkQsY0FBaEI7QUFDQUEseUNBQWlCLEVBQWpCO0FBQ0FFLHdDQUFnQnJtRCxTQUFTaW1ELFFBQVFsbEQsS0FBUixDQUFjaVAsY0FBdkIsQ0FBaEI7QUFDQSw2QkFBSXJRLElBQUksQ0FBUixFQUFXQSxJQUFFbVAsU0FBUzNPLE1BQXRCLEVBQThCUixHQUE5QixFQUFrQztBQUM5QixnQ0FBSWtuRCxnQkFBZ0J4bUQsOERBQUtBLENBQUN5bUQsc0JBQU4sQ0FBNkJWLGFBQTdCLEVBQTRDdDNDLFNBQVNuUCxDQUFULENBQTVDLEVBQXlEc21ELFFBQVFsbEQsS0FBakUsQ0FBcEI7QUFDQSxnQ0FBRzhsRCxpQkFBaUIsRUFBcEIsRUFBdUI7QUFDbkIsb0NBQUdWLGtCQUFrQixFQUFyQixFQUF5QkEsaUJBQWlCVSxhQUFqQixDQUF6QixLQUNLVixpQkFBaUJBLGlCQUFpQixJQUFqQixHQUF3QlUsYUFBekM7QUFDUjtBQUNKO0FBQ0QsNEJBQUdWLGVBQWVobUQsTUFBZixHQUF3QmttRCxnQkFBZSxDQUExQyxFQUNBO0FBQ0ksZ0NBQUdGLGlCQUFpQkEsZUFBZVMsS0FBZixDQUFxQixDQUFyQixFQUF3QlAsYUFBeEIsQ0FBcEIsRUFBMkQ7QUFDdkRGLGlEQUFpQkEsaUJBQWlCLEtBQWxDO0FBQ0g7QUFFSjtBQUNKO0FBRUo7O0FBRUQsb0JBQUlBLGNBQUosRUFBb0I7QUFDbEJBLHFDQUFpQjlsRCw4REFBS0EsQ0FBQzRoQyxxQkFBTixDQUE0QmtrQixjQUE1QixDQUFqQjs7QUFFQTtBQUNFLHdCQUFHRixRQUFRNzFDLE9BQVIsQ0FBZ0JwSixHQUFoQixDQUFvQixVQUFwQixDQUFILEVBQW1DLENBR2xDO0FBQ0htL0MscUNBQWlCOWxELDhEQUFLQSxDQUFDeW1ELHNCQUFOLENBQTZCWCxjQUE3QixFQUE2Q0YsUUFBUTcxQyxPQUFyRCxFQUE4RDYxQyxRQUFRbGxELEtBQXRFLENBQWpCOztBQUdBLHdCQUFJb2xELGVBQWVZLElBQWYsRUFBSixFQUEyQjtBQUN6QjtBQUNBdG9ELDZCQUFLa25ELFlBQUwsQ0FBa0IzZ0IsV0FBbEIsQ0FBOEI1TixNQUFNd04sVUFBcEM7QUFDQW5tQyw2QkFBS2tuRCxZQUFMLENBQWtCMWdCLFVBQWxCLENBQTZCa2hCLGNBQTdCO0FBQ0ExbkQsNkJBQUtrbkQsWUFBTCxDQUFrQmpzQyxJQUFsQjtBQUNELHFCQUxELE1BS087QUFDTGpiLDZCQUFLa25ELFlBQUwsQ0FBa0JwbUQsSUFBbEI7QUFDRDtBQUNGLGlCQW5CRCxNQW1CTztBQUNMZCx5QkFBS2tuRCxZQUFMLENBQWtCcG1ELElBQWxCO0FBQ0Q7QUFDRCxvQkFBR2tJLFFBQVErK0MsWUFBUixLQUF5QixHQUF6QixJQUFnQyxDQUFDTixTQUFqQyxJQUE4Q0QsUUFBUTcxQyxPQUF6RCxFQUFrRTtBQUNoRSx3QkFBSXFMLGFBQWEsRUFBakI7O0FBRUEsd0JBQUd3cUMsUUFBUTcxQyxPQUFSLENBQWdCcEosR0FBaEIsQ0FBb0IsT0FBcEIsQ0FBSCxFQUFpQztBQUMvQnlVLHFDQUFhd3FDLFFBQVE3MUMsT0FBUixDQUFnQnBKLEdBQWhCLENBQW9CLE9BQXBCLENBQWI7QUFDRCxxQkFGRCxNQUdLLElBQUdpL0MsUUFBUTcxQyxPQUFSLENBQWdCcEosR0FBaEIsQ0FBb0IsYUFBcEIsQ0FBSCxFQUFzQztBQUN6QztBQUNELHFCQUZJLE1BR0EsSUFBR2kvQyxRQUFRbGxELEtBQVIsSUFBaUJrbEQsUUFBUWxsRCxLQUFSLENBQWMrTyxLQUFsQyxFQUF3QztBQUMzQzJMLHFDQUFhd3FDLFFBQVFsbEQsS0FBUixDQUFjK08sS0FBM0I7QUFDRCxxQkFGSSxNQUdBO0FBQ0g7QUFDRDtBQUNELHdCQUFJNkwsUUFBUXNxQyxRQUFRNzFDLE9BQVIsQ0FBZ0JrRSxXQUFoQixHQUE4QlcsY0FBOUIsRUFBWjtBQUNBLHdCQUFHLENBQUMwRyxLQUFELElBQVVBLFNBQVNBLE1BQU0sQ0FBTixDQUFULElBQXFCQSxNQUFNLENBQU4sRUFBU3hiLE1BQTNDLEVBQW1EO0FBQy9DLDRCQUFJK0IsU0FBUytqRCxRQUFRNzFDLE9BQVIsQ0FBZ0JrRSxXQUFoQixHQUE4QnZELFNBQTlCLEVBQWI7QUFDQTRLLGdDQUFRbGQsS0FBS2dILEdBQUwsQ0FBU3VoRCxzQkFBVCxDQUFnQzV2QixNQUFNbXZCLEtBQXRDLENBQVI7QUFDQTVxQyxnQ0FBUSxDQUFDLENBQUN6WixPQUFPLENBQVAsSUFBVUEsT0FBTyxDQUFQLENBQVgsSUFBc0IsQ0FBdkIsRUFBeUIsQ0FBQ0EsT0FBTyxDQUFQLElBQVVBLE9BQU8sQ0FBUCxDQUFYLElBQXNCLENBQS9DLENBQVI7QUFDSDs7QUFFQzZJLHdCQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFlQSxLQUFmLENBQXFCazFCLFdBQXJCLENBQWlDcnBCLEtBQWpDOztBQUVBLHdCQUFJRixXQUFXMU4sT0FBZixFQUF3QjtBQUNwQmhELDRCQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFlbUwsUUFBZixDQUF3QkMsSUFBeEIsQ0FBNkIsRUFBN0I7QUFDQW5RLDRCQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFlcUwsTUFBZixDQUFzQkMsUUFBdEIsQ0FBK0JyUSxJQUFJeUssSUFBSixDQUFTNkYsUUFBVCxDQUFrQkMsR0FBbEIsQ0FBc0JDLE1BQXJELEVBQTZESCxRQUE3RCxDQUFzRXJRLElBQUl5SyxJQUFKLENBQVM2RixRQUFULENBQWtCQyxHQUFsQixDQUFzQkUsT0FBNUY7QUFDQXpRLDRCQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFleFEsT0FBZixDQUF1Qm9hLElBQXZCOztBQUVBLDRCQUFJK0IsV0FBV0csS0FBWCxLQUFxQixLQUF6QixFQUFnQztBQUM1QixnQ0FBSUMsV0FBVyxFQUFmO0FBQ0FBLHFDQUFTL0wsS0FBVCxHQUFpQjJMLFVBQWpCO0FBQ0FJLHFDQUFTekwsT0FBVCxHQUFtQjYxQyxRQUFRNzFDLE9BQTNCO0FBQ0F5TCxxQ0FBUzlhLEtBQVQsR0FBaUJrbEQsUUFBUWxsRCxLQUF6QjtBQUNBO0FBQ0EsZ0NBQUkySyxPQUFPQyxZQUFQLEtBQXdCcUYsU0FBeEIsSUFBcUMsUUFBT3RGLE9BQU9DLFlBQVAsQ0FBb0JtUSxlQUEzQixNQUErQyxRQUF4RixFQUFrRztBQUM5RnpiLDhGQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0JxSyxPQUFPQyxZQUFQLENBQW9CbVEsZUFBNUMsRUFBNkRELFFBQTdEO0FBQ0g7QUFDRHpkLGtDQUFNMmQsUUFBTixDQUFlRixRQUFmLEVBQXlCemQsS0FBekI7QUFDSCx5QkFWRCxNQVVPO0FBQ0hrRSw4QkFBRTNELElBQUYsQ0FBTztBQUNIRSwwQ0FBVSxNQURQO0FBRUgrQyxxQ0FBS3hELE1BQU00ZCxrQkFBTixHQUEyQixHQUEzQixHQUFpQ1AsV0FBVzFOLE9BRjlDO0FBR0gvTyxzQ0FBTSxjQUFVRixJQUFWLEVBQWdCO0FBQ2xCLHdDQUFJbWQsWUFBWTtBQUNaTCwrQ0FBT0gsV0FBV0csS0FETjtBQUVaN04saURBQVNqUCxLQUFLaVAsT0FGRjtBQUdaK0IsK0NBQU8yTCxXQUFXM0wsS0FITjtBQUlab00sc0RBQWNULFdBQVdTO0FBSmIscUNBQWhCOztBQU9BLHdDQUFJTCxXQUFXLEVBQWY7QUFDQUEsNkNBQVMvTCxLQUFULEdBQWlCbU0sU0FBakI7QUFDQUosNkNBQVN6TCxPQUFULEdBQW1CNjFDLFFBQVE3MUMsT0FBM0I7QUFDQXlMLDZDQUFTOWEsS0FBVCxHQUFpQmtsRCxRQUFRbGxELEtBQXpCOztBQUVBO0FBQ0Esd0NBQUkySyxPQUFPQyxZQUFQLEtBQXdCcUYsU0FBeEIsSUFBcUMsUUFBT3RGLE9BQU9DLFlBQVAsQ0FBb0JtUSxlQUEzQixNQUErQyxRQUF4RixFQUFrRztBQUM5RnpiLHNHQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0JxSyxPQUFPQyxZQUFQLENBQW9CbVEsZUFBNUMsRUFBNkRELFFBQTdEO0FBQ0g7O0FBRUR6ZCwwQ0FBTTJkLFFBQU4sQ0FBZUYsUUFBZixFQUF5QnpkLEtBQXpCO0FBQ0g7QUF0QkUsNkJBQVA7QUF3Qkg7QUFDSixxQkF6Q0QsTUF5Q087QUFDSDJNLDRCQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFlcUwsTUFBZixDQUFzQmdjLFdBQXRCLENBQWtDcHNCLElBQUl5SyxJQUFKLENBQVM2RixRQUFULENBQWtCQyxHQUFsQixDQUFzQkMsTUFBeEQ7QUFDSDtBQUNGO0FBS0osYUFsVEQ7QUFtVEQsU0F0VzJFLEVBc1d6RTs7QUFFSDByQyw2QkFBcUIsK0JBQVk7QUFDL0I7QUFDRDs7QUExVzJFLEtBQTNDLENBQW5DLENBL0NpQixDQTJaYjtBQUVMLENBN1pBLEVBNlpDdm9ELE1BN1pELEVBNlpTLEtBQUtxTSxHQTdaZCxDQUFEOztBQStaTyxJQUFJdzZDLFdBQVcsS0FBS3g2QyxHQUFMLENBQVN5SyxJQUFULENBQWM4dkMsSUFBZCxDQUFtQkMsUUFBbEMsQzs7Ozs7Ozs7Ozs7OztBQ3ZhUDtBQUFBO0FBQUE7QUFDQSxLQUFLeDZDLEdBQUwsR0FBVyxLQUFLQSxHQUFMLElBQVksRUFBdkI7QUFDQSxLQUFLQSxHQUFMLENBQVN5SyxJQUFULEdBQWdCLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULElBQWlCLEVBQWpDO0FBQ0EsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzh2QyxJQUFkLEdBQXFCLEtBQUt2NkMsR0FBTCxDQUFTeUssSUFBVCxDQUFjOHZDLElBQWQsSUFBc0IsRUFBM0M7O0FBRUE7O0FBRUMsV0FBVWhqRCxDQUFWLEVBQWF5SSxHQUFiLEVBQWtCO0FBQ2pCOztBQUVBOzs7Ozs7Ozs7QUFRQUEsTUFBSXlLLElBQUosQ0FBUzh2QyxJQUFULENBQWNqTCxPQUFkLEdBQXdCLFVBQVV2OEIsV0FBVixFQUF1Qjs7QUFFN0MsUUFBSXhmLE9BQUosRUFDSXE1QixNQURKLEVBRUl1dkIsV0FGSjs7QUFJQTVvRCxjQUFVd2YsZUFBZSxFQUF6Qjs7QUFFQTtBQUNBeGYsY0FBVWdFLEVBQUVILE1BQUYsQ0FBUztBQUNqQjRGLGlCQUFXLEVBRE07QUFFakI0dkIsY0FBUSxNQUFNM3ZCLHdFQUFZQSxDQUFDMHRCO0FBRlYsS0FBVCxFQUdQcDNCLE9BSE8sQ0FBVjs7QUFLQSxRQUFJQSxRQUFReUosU0FBWixFQUF1QjtBQUNyQnpKLGNBQVF5SixTQUFSLEdBQW9CLE1BQU16SixRQUFReUosU0FBbEM7QUFDRDs7QUFFRCxTQUFLekMsT0FBTCxHQUFldUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFmO0FBQ0EsU0FBS3hDLE9BQUwsQ0FBYXlDLFNBQWIsR0FBeUJDLHdFQUFZQSxDQUFDOHFCLE9BQWIsR0FBdUJ4MEIsUUFBUXlKLFNBQS9CLEdBQTJDLEdBQTNDLEdBQWlEQyx3RUFBWUEsQ0FBQzRXLElBQXZGO0FBQ0F0YyxNQUFFaEUsUUFBUXE1QixNQUFWLEVBQWtCdWlCLE1BQWxCLENBQXlCLEtBQUs1MEMsT0FBOUI7O0FBRUE0aEQsa0JBQWNyL0MsU0FBU0MsYUFBVCxDQUF1QixNQUF2QixDQUFkO0FBQ0FvL0MsZ0JBQVluL0MsU0FBWixHQUF3QkMsd0VBQVlBLENBQUM2bkIsSUFBYixHQUFvQixHQUFwQixHQUEwQjduQix3RUFBWUEsQ0FBQ2lvQixjQUEvRDtBQUNBLFNBQUszcUIsT0FBTCxDQUFhMk8sV0FBYixDQUF5Qml6QyxXQUF6Qjs7QUFFQSxTQUFLQywyQkFBTCxHQUFtQyxDQUFuQztBQUVELEdBNUJEOztBQThCQTtBQUNBcDhDLE1BQUl5SyxJQUFKLENBQVM4dkMsSUFBVCxDQUFjakwsT0FBZCxDQUFzQnhpQixTQUF0QixHQUFrQ3YxQixFQUFFSCxNQUFGLENBQVM0SSxJQUFJeUssSUFBSixDQUFTOHZDLElBQVQsQ0FBY2pMLE9BQWQsQ0FBc0J4aUIsU0FBL0IsRUFBMEM7O0FBRTFFOzs7Ozs7QUFNQW5lLFVBQU0sZ0JBQVk7QUFDaEIsVUFBSXBYLEVBQUUsS0FBS2dELE9BQVAsRUFBZ0JxWixRQUFoQixDQUF5QjNXLHdFQUFZQSxDQUFDNFcsSUFBdEMsQ0FBSixFQUFpRDtBQUMvQ3RjLFVBQUUsS0FBS2dELE9BQVAsRUFBZ0I2eEIsV0FBaEIsQ0FBNEJudkIsd0VBQVlBLENBQUM0VyxJQUF6QztBQUNELE9BRkQsTUFFTztBQUNMLGFBQUt1b0MsMkJBQUwsSUFBb0MsQ0FBcEM7QUFDRDtBQUNGLEtBZHlFOztBQWdCMUU7Ozs7OztBQU1BNW5ELFVBQU0sZ0JBQVk7QUFDaEIsVUFBSStDLEVBQUUsS0FBS2dELE9BQVAsRUFBZ0JxWixRQUFoQixDQUF5QjNXLHdFQUFZQSxDQUFDNFcsSUFBdEMsQ0FBSixFQUFpRDtBQUMvQztBQUNELE9BRkQsTUFFTztBQUNMLFlBQUksS0FBS3VvQywyQkFBTCxLQUFxQyxDQUF6QyxFQUE0QztBQUMxQzdrRCxZQUFFLEtBQUtnRCxPQUFQLEVBQWdCOFYsUUFBaEIsQ0FBeUJwVCx3RUFBWUEsQ0FBQzRXLElBQXRDO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsZUFBS3VvQywyQkFBTCxJQUFvQyxDQUFwQztBQUNEO0FBQ0Y7QUFFRjs7QUFqQ3lFLEdBQTFDLENBQWxDLENBMUNpQixDQTZFYjtBQUVMLENBL0VBLEVBK0VDem9ELE1BL0VELEVBK0VTLEtBQUtxTSxHQS9FZCxDQUFEOztBQWlGTyxJQUFJc3ZDLFVBQVUsS0FBS3R2QyxHQUFMLENBQVN5SyxJQUFULENBQWM4dkMsSUFBZCxDQUFtQmpMLE9BQWpDLEM7Ozs7Ozs7Ozs7Ozs7QUN4RlA7QUFBQTtBQUFBO0FBQ0EsS0FBS3R2QyxHQUFMLEdBQVcsS0FBS0EsR0FBTCxJQUFZLEVBQXZCO0FBQ0EsS0FBS0EsR0FBTCxDQUFTeUssSUFBVCxHQUFnQixLQUFLekssR0FBTCxDQUFTeUssSUFBVCxJQUFpQixFQUFqQztBQUNBLEtBQUt6SyxHQUFMLENBQVN5SyxJQUFULENBQWM4dkMsSUFBZCxHQUFxQixLQUFLdjZDLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzh2QyxJQUFkLElBQXNCLEVBQTNDOztBQUVBOztBQUVDLFdBQVVoakQsQ0FBVixFQUFheUksR0FBYixFQUFrQjtBQUNqQjs7QUFFQTs7Ozs7Ozs7O0FBUUFBLE1BQUl5SyxJQUFKLENBQVM4dkMsSUFBVCxDQUFjNWdCLFlBQWQsR0FBNkIsVUFBVTVtQixXQUFWLEVBQXVCOztBQUVsRCxRQUFJcmYsSUFBSixFQUNJMm9ELFlBREosRUFFSXpOLFdBRko7O0FBSUFsN0MsV0FBTyxJQUFQO0FBQ0EsU0FBS0gsT0FBTCxHQUFld2YsZUFBZSxFQUE5Qjs7QUFFQTtBQUNBLFNBQUt4ZixPQUFMLEdBQWVnRSxFQUFFSCxNQUFGLENBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0EwaUMsa0JBQVksS0FKVTtBQUt0QjBGLGlCQUFXLEtBTFc7QUFNdEJxYixjQUFRLENBQUMsQ0FBRCxFQUFJLENBQUMsQ0FBTCxDQU5jO0FBT3RCamhCLGdCQUFVLENBQUMsQ0FBRCxFQUFJLENBQUo7QUFQWSxLQUFULEVBUVosS0FBS3JtQyxPQVJPLENBQWY7O0FBVUE7QUFDQThvRCxtQkFBZSxFQUFmO0FBQ0EsUUFBSSxLQUFLOW9ELE9BQUwsQ0FBYXlKLFNBQWpCLEVBQTRCO0FBQzFCcS9DLHFCQUFlLE1BQU0sS0FBSzlvRCxPQUFMLENBQWF5SixTQUFsQztBQUNEO0FBQ0QsUUFBSSxLQUFLekosT0FBTCxDQUFhdW1DLFVBQWpCLEVBQTZCO0FBQzNCdWlCLHNCQUFnQixNQUFNcC9DLHdFQUFZQSxDQUFDb29CLFVBQW5DO0FBQ0Q7QUFDRCxRQUFJLEtBQUs5eEIsT0FBTCxDQUFhaXNDLFNBQWpCLEVBQTRCO0FBQzFCNmMsc0JBQWdCLE1BQU1wL0Msd0VBQVlBLENBQUMwbkIsU0FBbkM7QUFDRDs7QUFFRCxTQUFLcHFCLE9BQUwsR0FBZXVDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZjtBQUNBLFNBQUt4QyxPQUFMLENBQWF5QyxTQUFiLEdBQXlCQyx3RUFBWUEsQ0FBQytyQixhQUFiLEdBQTZCcXpCLFlBQXREOztBQUVBLFFBQUksS0FBSzlvRCxPQUFMLENBQWFpc0MsU0FBakIsRUFBNEI7QUFDMUJvUCxvQkFBYzl4QyxTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWQ7QUFDQTZ4QyxrQkFBWTV4QyxTQUFaLEdBQXdCQyx3RUFBWUEsQ0FBQzZuQixJQUFiLEdBQW9CLEdBQXBCLEdBQTBCN25CLHdFQUFZQSxDQUFDNnBCLFdBQS9EO0FBQ0EsV0FBS3ZzQixPQUFMLENBQWEyTyxXQUFiLENBQXlCMGxDLFdBQXpCOztBQUVBcjNDLFFBQUVxM0MsV0FBRixFQUFlN2dCLEtBQWYsQ0FBcUIsWUFBWTtBQUMvQnI2QixhQUFLazdCLEtBQUw7QUFDRCxPQUZEO0FBR0Q7O0FBRUQsU0FBS3dCLGdCQUFMLEdBQXdCdHpCLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBeEI7QUFDQSxTQUFLeEMsT0FBTCxDQUFhMk8sV0FBYixDQUF5QixLQUFLa25CLGdCQUE5Qjs7QUFFQSxTQUFLa3NCLE9BQUwsR0FBZSxJQUFJdmxELEdBQUd3bEQsT0FBUCxDQUFlO0FBQzVCaGlELGVBQVMsS0FBS0EsT0FEYztBQUU1QmlpRCxtQkFBYSxLQUZlO0FBRzVCM0IsY0FBUSxLQUFLdG5ELE9BQUwsQ0FBYXNuRCxNQUhPO0FBSTVCNEIsbUJBQWE7QUFKZSxLQUFmLENBQWY7O0FBT0EsUUFBSSxLQUFLbHBELE9BQUwsQ0FBYW1ILEdBQWpCLEVBQXNCO0FBQ3BCLFdBQUtuSCxPQUFMLENBQWFtSCxHQUFiLENBQWlCZ2lELFVBQWpCLENBQTRCLEtBQUtKLE9BQWpDO0FBQ0Q7O0FBRUQsUUFBSSxLQUFLL29ELE9BQUwsQ0FBYXFtQyxRQUFqQixFQUEyQjtBQUN6QixXQUFLMGlCLE9BQUwsQ0FBYXJpQixXQUFiLENBQXlCLEtBQUsxbUMsT0FBTCxDQUFhcW1DLFFBQXRDO0FBQ0Q7QUFDRixHQTlERDs7QUFnRUE7QUFDQTU1QixNQUFJeUssSUFBSixDQUFTOHZDLElBQVQsQ0FBYzVnQixZQUFkLENBQTJCN00sU0FBM0IsR0FBdUN2MUIsRUFBRUgsTUFBRixDQUFTNEksSUFBSXlLLElBQUosQ0FBUzh2QyxJQUFULENBQWM1Z0IsWUFBZCxDQUEyQjdNLFNBQXBDLEVBQStDOztBQUVwRjhCLFdBQU8saUJBQVk7QUFDakIsVUFBSSxPQUFPLEtBQUtyN0IsT0FBTCxDQUFha3NDLGFBQXBCLEtBQXNDLFVBQTFDLEVBQXNEO0FBQ3BELGFBQUtsc0MsT0FBTCxDQUFha3NDLGFBQWI7QUFDRDs7QUFFRCxVQUFJLEtBQUtsc0MsT0FBTCxDQUFhbUgsR0FBakIsRUFBc0I7QUFDcEIsYUFBS25ILE9BQUwsQ0FBYW1ILEdBQWIsQ0FBaUJpaUQsYUFBakIsQ0FBK0IsS0FBS0wsT0FBcEM7QUFDRDtBQUNGLEtBVm1GOztBQVlwRjs7Ozs7O0FBTUEzdEMsVUFBTSxnQkFBWTtBQUNoQixVQUFJcFgsRUFBRSxLQUFLZ0QsT0FBUCxFQUFnQnFaLFFBQWhCLENBQXlCM1csd0VBQVlBLENBQUM0VyxJQUF0QyxDQUFKLEVBQWlEO0FBQy9DdGMsVUFBRSxLQUFLZ0QsT0FBUCxFQUFnQjZ4QixXQUFoQixDQUE0Qm52Qix3RUFBWUEsQ0FBQzRXLElBQXpDO0FBQ0Q7QUFDRixLQXRCbUY7O0FBd0JwRjs7Ozs7O0FBTUFyZixVQUFNLGdCQUFZO0FBQ2hCLFVBQUksQ0FBQytDLEVBQUUsS0FBS2dELE9BQVAsRUFBZ0JxWixRQUFoQixDQUF5QjNXLHdFQUFZQSxDQUFDNFcsSUFBdEMsQ0FBTCxFQUFrRDtBQUNoRHRjLFVBQUUsS0FBS2dELE9BQVAsRUFBZ0I4VixRQUFoQixDQUF5QnBULHdFQUFZQSxDQUFDNFcsSUFBdEM7QUFDRDtBQUNGLEtBbENtRjs7QUFvQ3BGOzs7OztBQUtBK29DLGdCQUFZLHNCQUFZO0FBQ3RCLGFBQU8sS0FBS3hzQixnQkFBTCxDQUFzQmpuQixTQUE3QjtBQUNELEtBM0NtRjs7QUE2Q3BGOzs7OztBQUtBb2tCLGlCQUFhLHVCQUFZO0FBQ3ZCLGFBQU8sS0FBSyt1QixPQUFMLENBQWEvdUIsV0FBYixFQUFQO0FBQ0QsS0FwRG1GOztBQXNEcEY7Ozs7OztBQU1BMk0sZ0JBQVksb0JBQVVsM0IsT0FBVixFQUFtQjtBQUM3QixXQUFLb3RCLGdCQUFMLENBQXNCam5CLFNBQXRCLEdBQWtDbkcsT0FBbEM7QUFDRCxLQTlEbUY7O0FBZ0VwRjs7Ozs7O0FBTUFpM0IsaUJBQWEscUJBQVUrYyxXQUFWLEVBQXVCO0FBQ2xDLFdBQUtzRixPQUFMLENBQWFyaUIsV0FBYixDQUF5QitjLFdBQXpCO0FBQ0Q7O0FBeEVtRixHQUEvQyxDQUF2QyxDQTVFaUIsQ0FzSmI7QUFFTCxDQXhKQSxFQXdKQ3JqRCxNQXhKRCxFQXdKUyxLQUFLcU0sR0F4SmQsQ0FBRDs7QUEwSk8sSUFBSTI1QixlQUFlLEtBQUszNUIsR0FBTCxDQUFTeUssSUFBVCxDQUFjOHZDLElBQWQsQ0FBbUI1Z0IsWUFBdEMsQzs7Ozs7Ozs7Ozs7OztBQ2pLUDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBS08sU0FBU3FpQixJQUFULENBQWNobkQsQ0FBZCxFQUFnQjtBQUFDLFdBQU9BLEVBQUVpVCxPQUFGLENBQVUsTUFBVixFQUFpQixFQUFqQixFQUFxQkEsT0FBckIsQ0FBNkIsTUFBN0IsRUFBb0MsRUFBcEMsQ0FBUDtBQUErQztBQUNoRSxTQUFTNDBDLFFBQVQsR0FBbUI7QUFBQyxXQUFNLCtVQUE4VUMsSUFBOVUsQ0FBbVY5akQsVUFBVStqRCxTQUFWLElBQXFCL2pELFVBQVVna0QsTUFBL0IsSUFBdUNyOEMsT0FBT3M4QyxLQUFqWSxLQUF5WSwwa0RBQTBrREgsSUFBMWtELENBQStrRCxDQUFDOWpELFVBQVUrakQsU0FBVixJQUFxQi9qRCxVQUFVZ2tELE1BQS9CLElBQ3QvRHI4QyxPQUFPczhDLEtBRDgrRCxFQUN2K0RuMUMsTUFEdStELENBQ2grRCxDQURnK0QsRUFDOTlELENBRDg5RCxDQUEva0Q7QUFBL1k7QUFDSSxVQUFTb1AsU0FBVCxDQUFtQmxpQixDQUFuQixFQUFxQjtBQUFDLFFBQUlELElBQUVpbkQsS0FBS2huRCxDQUFMLENBQU4sQ0FBYyxPQUFNLFNBQU9ELENBQVAsSUFBVSxTQUFPQSxDQUFqQixHQUFtQixJQUFuQixHQUF3QixRQUFNQSxDQUFOLEdBQVEsTUFBUixHQUFlLFFBQU1BLENBQU4sR0FBUSxNQUFSLEdBQWUsYUFBV0EsQ0FBWCxHQUFhLGtCQUFiLEdBQWtDLGdCQUFjQSxDQUFkLEdBQWdCLElBQWhCLEdBQXFCLFVBQVFBLENBQVIsR0FBVSxNQUFWLEdBQWlCLFdBQVNBLENBQVQsR0FBVyxRQUFYLEdBQW9CLGNBQVlBLENBQVosR0FBYyxPQUFkLEdBQXNCLGFBQVdBLENBQVgsR0FBYSxTQUFiLEdBQXVCLFdBQVNBLENBQVQsR0FBVyxPQUFYLEdBQW1CLFdBQVNBLENBQVQsR0FBVyxPQUFYLEdBQW1CLFdBQVNBLENBQVQsR0FBVyxRQUFYLEdBQW9CLHlCQUF1QkEsQ0FBdkIsR0FBeUIsWUFBekIsR0FBc0MsYUFBV0EsQ0FBWCxHQUFhLFdBQWIsR0FBeUJDLENBQTlUO0FBQWdVO0FBQzVYLElBQUlrb0Qsc0JBQW9CLFNBQXBCQSxtQkFBb0IsQ0FBU2xvRCxDQUFULEVBQVdELENBQVgsRUFBYTtBQUFDLFFBQUlvb0QsSUFBRW5vRCxFQUFFb29ELGFBQUYsRUFBTjtBQUFBLFFBQXdCQyxJQUFFLEVBQTFCO0FBQUEsUUFBNkJqMEMsQ0FBN0IsQ0FBK0IsSUFBRyxlQUFhLE9BQU9yVSxDQUF2QixFQUF5QjtBQUFDLFlBQUk0YyxJQUFFNWMsRUFBRTQzQixJQUFGLENBQU8zM0IsQ0FBUCxFQUFVLENBQVYsRUFBYW1SLFFBQWIsRUFBTixDQUE4QixJQUFHd0wsQ0FBSCxFQUFLLElBQUc7QUFBQ3ZJLGdCQUFFdUksRUFBRWtuQixNQUFGLEVBQUY7QUFBYSxTQUFqQixDQUFpQixPQUFNeWtCLENBQU4sRUFBUTtBQUFDbDBDLGdCQUFFLEVBQUY7QUFBSztBQUFDLEtBQTdGLE1BQWlHO0FBQUN1SSxZQUFFNWMsRUFBRW9SLFFBQUYsRUFBRixDQUFlLElBQUc7QUFBQ2lELGdCQUFFdUksRUFBRWtuQixNQUFGLEVBQUY7QUFBYSxTQUFqQixDQUFpQixPQUFNMGtCLENBQU4sRUFBUTtBQUFDbjBDLGdCQUFFLEVBQUY7QUFBSztBQUFDLFVBQUdvMEMsU0FBU0wsQ0FBVCxFQUFXL3pDLENBQVgsQ0FBSCxDQUFpQmkwQyxLQUFHSSxVQUFVTixDQUFWLENBQUgsQ0FBZ0JFLEtBQUdLLFNBQVNQLENBQVQsRUFBV25vRCxFQUFFaUgsR0FBRixDQUFNLFVBQU4sSUFBa0IsR0FBbEIsR0FBc0JqSCxFQUFFOGlCLEtBQUYsRUFBakMsQ0FBSCxDQUErQyxPQUFNLGlDQUErQnVsQyxDQUEvQixHQUFpQyxRQUF2QztBQUFnRCxDQUF0VjtBQUFBLElBQXVWTSxxQkFBbUIsU0FBbkJBLGtCQUFtQixDQUFTM29ELENBQVQsRUFBV0QsQ0FBWCxFQUFhO0FBQUMsUUFBSW9vRCxJQUFFbm9ELEVBQUVvb0QsYUFBRixFQUFOO0FBQUEsUUFBd0JDLElBQUUsRUFBMUI7QUFBQSxRQUE2QmowQyxJQUFFLENBQUMsQ0FBaEM7QUFBQSxRQUFrQ3VJLENBQWxDLENBQW9DQSxJQUFFLGVBQWEsT0FBTzVjLENBQXBCLEdBQXNCQSxFQUFFNDNCLElBQUYsQ0FBTzMzQixDQUFQLEVBQVUsQ0FBVixFQUFhbVIsUUFBYixHQUF3QjB5QixNQUF4QixFQUF0QixHQUF1RDlqQyxFQUFFb1IsUUFBRixHQUFhMHlCLE1BQWIsRUFBekQsQ0FBK0UsSUFBRyxnQkFDamZza0IsRUFBRVMsT0FEK2UsSUFDdGUsU0FBT1QsRUFBRVMsT0FENmQsSUFDcGQsZ0JBQWNULEVBQUVTLE9BRGljLEVBQ3pieDBDLElBQUUsQ0FBQyxDQUFILENBQUssV0FBUyt6QyxFQUFFVSxPQUFYLEtBQXFCejBDLElBQUUsQ0FBQyxDQUF4QixFQUEyQixpQkFBZSt6QyxFQUFFVSxPQUFqQixLQUEyQnowQyxJQUFFLENBQUMsQ0FBOUIsRUFBaUMsWUFBVSt6QyxFQUFFVSxPQUFaLEtBQXNCejBDLElBQUUsQ0FBQyxDQUF6QixFQUE0QixZQUFVK3pDLEVBQUVVLE9BQVosS0FBc0J6MEMsSUFBRSxDQUFDLENBQXpCLEVBQTRCLGdCQUFjK3pDLEVBQUVVLE9BQWhCLEtBQTBCejBDLElBQUUsQ0FBQyxDQUE3QixFQUFnQyxJQUFHLGFBQVcrekMsRUFBRVUsT0FBYixJQUFzQixhQUFXVixFQUFFUyxPQUF0QyxFQUE4Q3gwQyxJQUFFLENBQUMsQ0FBSCxDQUFLLElBQUcsWUFBVSt6QyxFQUFFVSxPQUFaLElBQXFCLFlBQVVWLEVBQUVTLE9BQXBDLEVBQTRDeDBDLElBQUUsQ0FBQyxDQUFILENBQUssWUFBVSt6QyxFQUFFUyxPQUFaLEtBQXNCeDBDLElBQUUsQ0FBQyxDQUF6QixFQUE0QixhQUFXK3pDLEVBQUVTLE9BQWIsS0FBdUJ4MEMsSUFBRSxDQUFDLENBQTFCLEVBQTZCLElBQUcsZ0JBQWMrekMsRUFBRVMsT0FBaEIsSUFBeUIsY0FBWVQsRUFBRVMsT0FBdkMsSUFBZ0QsY0FBWVQsRUFBRVcsUUFBOUQsSUFBd0UsZUFBYVgsRUFBRVcsUUFBdkYsSUFBaUcsV0FBU1gsRUFBRVcsUUFBNUcsSUFBc0gsWUFBVVgsRUFBRVcsUUFBbEksSUFDOVcsZ0JBQWNYLEVBQUVVLE9BRDJWLEVBQ25WejBDLElBQUUsQ0FBQyxDQUFILENBQUssZ0JBQWMrekMsRUFBRVksT0FBaEIsS0FBMEIzMEMsSUFBRSxDQUFDLENBQTdCLEVBQWdDK3pDLEVBQUVhLFNBQUYsS0FBYzUwQyxJQUFFLENBQUMsQ0FBakIsRUFBb0IsSUFBRyxtQkFBaUIrekMsRUFBRVMsT0FBbkIsSUFBNEIsbUJBQWlCVCxFQUFFWSxPQUEvQyxJQUF3RCxjQUFZWixFQUFFYyxLQUF6RSxFQUErRTcwQyxJQUFFLENBQUMsQ0FBSCxDQUFLLGFBQVcrekMsRUFBRWUsT0FBYixLQUF1QjkwQyxJQUFFLENBQUMsQ0FBMUIsRUFBNkIsY0FBWSt6QyxFQUFFYyxLQUFkLEtBQXNCNzBDLElBQUUsQ0FBQyxDQUF6QixFQUE0QixtQkFBaUIrekMsRUFBRVksT0FBbkIsS0FBNkIzMEMsSUFBRSxDQUFDLENBQWhDLEVBQW1DLG1CQUFpQit6QyxFQUFFUyxPQUFuQixLQUE2QngwQyxJQUFFLENBQUMsQ0FBaEMsRUFBbUMsZUFBYSt6QyxFQUFFWSxPQUFmLEtBQXlCMzBDLElBQUUsQ0FBQyxDQUE1QixFQUErQit6QyxFQUFFZ0IsVUFBRixLQUFlLzBDLElBQUUsQ0FBQyxDQUFsQixFQUFxQixtQkFBaUIrekMsRUFBRVksT0FBbkIsS0FBNkIzMEMsSUFBRSxDQUFDLENBQWhDLEVBQW1DLFFBQU9BLENBQVAsR0FBVSxLQUFLLENBQUMsQ0FBTjtBQUFRaTBDLGlCQUFHRyxTQUFTTCxDQUFULEVBQVd4ckMsQ0FBWCxDQUFILENBQWlCMHJDLEtBQUdJLFVBQVVOLENBQVYsQ0FBSCxDQUFnQkUsS0FBR0ssU0FBU1AsQ0FBVCxFQUFXbm9ELEVBQUVpSCxHQUFGLENBQU0sVUFBTixJQUFrQixHQUFsQixHQUFzQmpILEVBQUU4aUIsS0FBRixFQUFqQyxDQUFILENBQStDLE1BQU0sS0FBSyxDQUFDLENBQU47QUFBUXVsQyxpQkFBR0csU0FBU0wsQ0FBVCxFQUM5ZXhyQyxDQUQ4ZSxDQUFILENBQWhILENBQ3hYLE9BQU0saUNBQStCMHJDLENBQS9CLEdBQWlDLFFBQXZDO0FBQWdELENBSGhEO0FBSUEsU0FBU0csUUFBVCxDQUFrQnhvRCxDQUFsQixFQUFvQkQsQ0FBcEIsRUFBc0I7QUFBQyxRQUFJb29ELElBQUUsRUFBTjtBQUFBLFFBQVNFLElBQUUsTUFBWCxDQUFrQnRvRCxLQUFHLENBQUMsQ0FBRCxJQUFJQSxFQUFFdUUsT0FBRixDQUFVLGFBQVYsQ0FBUCxLQUFrQytqRCxJQUFFLE9BQUYsRUFBVXRvRCxJQUFFQSxFQUFFa1QsT0FBRixDQUFVLGFBQVYsRUFBd0IsYUFBeEIsQ0FBOUMsRUFBc0YsSUFBR2pULEVBQUVFLElBQUYsSUFBUUYsRUFBRSxZQUFGLENBQVIsSUFBeUJBLEVBQUUsV0FBRixDQUF6QixJQUF5Q0EsRUFBRSxlQUFGLENBQTVDLEVBQStEO0FBQUMsWUFBR0EsRUFBRUUsSUFBTCxFQUFVLElBQUlrVSxJQUFFcFUsRUFBRUUsSUFBUixDQUFhRixFQUFFLFlBQUYsTUFBa0JvVSxJQUFFcFUsRUFBRSxZQUFGLENBQXBCLEVBQXFDQSxFQUFFLFdBQUYsTUFBaUJvVSxJQUFFcFUsRUFBRSxXQUFGLENBQW5CLEVBQW1DQSxFQUFFLGVBQUYsTUFBcUJvVSxJQUFFcFUsRUFBRSxlQUFGLENBQXZCLEVBQTJDbW9ELEtBQUdwb0QsSUFBRSxlQUFhQSxDQUFiLEdBQWUsV0FBZixHQUEyQnNvRCxDQUEzQixHQUE2QixVQUE3QixHQUF3Q2owQyxDQUF4QyxHQUEwQyxTQUExQyxHQUFvREEsQ0FBcEQsR0FBc0QsOENBQXRELEdBQXFHQSxDQUFyRyxHQUF1RyxRQUF6RyxHQUFrSCxZQUFVQSxDQUFWLEdBQVksU0FBWixHQUFzQkEsQ0FBdEIsR0FBd0IsOENBQXhCLEdBQ2pjQSxDQURpYyxHQUMvYixRQUQwVTtBQUNqVSxLQUR1SCxNQUNsSHJVLE1BQUlvb0QsS0FBRyxlQUFhcG9ELENBQWIsR0FBZSxXQUFmLEdBQTJCc29ELENBQTNCLEdBQTZCLFVBQTdCLEdBQXdDdG9ELENBQXhDLEdBQTBDLFNBQTFDLEdBQW9EQSxDQUFwRCxHQUFzRCxJQUE3RCxFQUFtRW9vRCxLQUFHaUIsb0JBQW9CcHBELENBQXBCLENBQUgsQ0FBMEIsT0FBTSxtQ0FBaUNtb0QsQ0FBakMsR0FBbUMsUUFBekM7QUFBa0Q7QUFDNUosU0FBU08sUUFBVCxDQUFrQjFvRCxDQUFsQixFQUFvQkQsQ0FBcEIsRUFBc0I7QUFBQyxRQUFJb29ELElBQUUsRUFBTjtBQUFBLFFBQVNFLElBQUUsQ0FBQyxDQUFaLENBQWNyb0QsRUFBRSxnQkFBRixNQUFzQm1vRCxLQUFHLHFCQUFxQm5vRCxFQUFFLGdCQUFGLENBQXJCLEdBQXlDLE9BQTVDLEVBQW9EcW9ELElBQUUsQ0FBQyxDQUE3RSxFQUFnRnJvRCxFQUFFLFlBQUYsS0FBaUJtb0QsS0FBRyxZQUFVbm9ELEVBQUUsWUFBRixDQUFWLEdBQTBCLE9BQTdCLEVBQXFDcW9ELElBQUUsQ0FBQyxDQUF6RCxJQUE0RHJvRCxFQUFFLFlBQUYsTUFBa0Jtb0QsS0FBRyxZQUFVbm9ELEVBQUUsWUFBRixDQUFWLEdBQTBCLE9BQTdCLEVBQXFDcW9ELElBQUUsQ0FBQyxDQUExRCxDQUE1RCxDQUF5SHJvRCxFQUFFLGFBQUYsTUFBbUJtb0QsS0FBR25vRCxFQUFFLGFBQUYsQ0FBSCxFQUFvQm1vRCxJQUFFbm9ELEVBQUUsa0JBQUYsSUFBc0Jtb0QsS0FBRyxNQUFJbm9ELEVBQUUsa0JBQUYsQ0FBSixHQUEwQixPQUE3QixDQUF0QixHQUE0RG1vRCxJQUFFLE9BQXBGLEVBQTRGRSxJQUFFLENBQUMsQ0FBbEgsRUFBcUhyb0QsRUFBRSxlQUFGLE1BQXFCbW9ELEtBQUdub0QsRUFBRSxlQUFGLElBQW1CLEdBQTNDLEVBQWdEQSxFQUFFLFdBQUYsTUFBaUJtb0QsS0FBR25vRCxFQUFFLFdBQUYsSUFBZSxPQUFsQixFQUEwQnFvRCxJQUFFLENBQUMsQ0FBOUMsRUFBaUQsSUFBR3JvRCxFQUFFcXBELElBQUwsRUFBVSxJQUFHcnBELEVBQUVxcEQsSUFBRixHQUFPLEtBQUdycEQsRUFBRXFwRCxJQUFaLEVBQWlCLElBQUVycEQsRUFBRXFwRCxJQUFGLENBQU9qcEQsTUFBN0IsRUFBb0M7QUFBQyxZQUFJZ1UsSUFDMWZwVSxFQUFFcXBELElBQUYsQ0FBT2pwRCxNQUFQLEdBQWMsQ0FEd2U7QUFBQSxZQUN0ZXVjLElBQUUsSUFBRXZJLENBQUYsR0FBSXBVLEVBQUVxcEQsSUFBRixDQUFPdEosU0FBUCxDQUFpQixDQUFqQixFQUFtQjNyQyxDQUFuQixDQUFKLEdBQTBCLEVBRDBjLENBQ3ZjLEtBQUl4VSxJQUFFLENBQU4sRUFBUUEsSUFBRWdoQixLQUFLSSxLQUFMLENBQVdoaEIsRUFBRXFwRCxJQUFGLENBQU9qcEQsTUFBUCxHQUFjLENBQXpCLENBQVYsRUFBc0NSLEdBQXRDO0FBQTBDK2MsZ0JBQUUsS0FBR3ZJLENBQUgsSUFBTSxLQUFHeFUsQ0FBVCxHQUFXK2MsSUFBRTNjLEVBQUVxcEQsSUFBRixDQUFPdEosU0FBUCxDQUFpQjNyQyxJQUFFLElBQUV4VSxDQUFyQixFQUF1QndVLElBQUUsSUFBRXhVLENBQUosR0FBTSxDQUE3QixDQUFiLEdBQTZDK2MsS0FBRyxNQUFJM2MsRUFBRXFwRCxJQUFGLENBQU90SixTQUFQLENBQWlCM3JDLElBQUUsSUFBRXhVLENBQXJCLEVBQXVCd1UsSUFBRSxJQUFFeFUsQ0FBSixHQUFNLENBQTdCLENBQVAsQ0FBL0M7QUFBMUMsU0FBaUl1b0QsS0FBRyxnQkFBZ0J4ckMsQ0FBaEIsR0FBa0IsY0FBckI7QUFBc0MsS0FEMlAsTUFDdFB3ckMsS0FBRyxlQUFlbm9ELEVBQUVxcEQsSUFBakIsR0FBc0IsT0FBekIsQ0FBaUNycEQsRUFBRSxlQUFGLE1BQXFCbW9ELElBQUVOLGFBQVdNLEtBQUcsMkJBQXlCbm9ELEVBQUUsZUFBRixDQUF6QixHQUE0QyxJQUE1QyxHQUFpREEsRUFBRSxlQUFGLENBQWpELEdBQW9FLFdBQXZFLENBQVgsR0FBK0Ztb0QsS0FBRyw4QkFBNEJub0QsRUFBRSxlQUFGLENBQTVCLEdBQStDLElBQS9DLEdBQW9EQSxFQUFFLGVBQUYsQ0FBcEQsR0FBdUUsV0FBMUUsQ0FBakcsRUFBd0xxb0QsSUFBRSxDQUFDLENBQWhOLEVBQW1Ocm9ELEVBQUVzcEQsS0FBRixLQUFVbkIsSUFBRU4sYUFBV00sS0FBRywyQkFDemVub0QsRUFBRXNwRCxLQUR1ZSxHQUNqZSxJQURpZSxHQUM1ZHRwRCxFQUFFc3BELEtBRDBkLEdBQ3BkLFdBRGlkLENBQVgsR0FDemJuQixLQUFHLDhCQUE0Qm5vRCxFQUFFc3BELEtBQTlCLEdBQW9DLElBQXBDLEdBQXlDdHBELEVBQUVzcEQsS0FBM0MsR0FBaUQsV0FBcEQsQ0FEdWIsRUFDdFhqQixJQUFFLENBQUMsQ0FEeVcsRUFDdFdyb0QsRUFBRSxhQUFGLEtBQWtCbW9ELEtBQUcsY0FBWW5vRCxFQUFFLGFBQUYsQ0FBWixHQUE2QixPQUFoQyxFQUF3Q3FvRCxJQUFFLENBQUMsQ0FBN0QsSUFBZ0Vyb0QsRUFBRXVwRCxHQUFGLEtBQVFwQixLQUFHLGNBQVlub0QsRUFBRXVwRCxHQUFkLEdBQWtCLE9BQXJCLEVBQTZCbEIsSUFBRSxDQUFDLENBQXhDLENBQWhFLENBQTJHcm9ELEVBQUUsZUFBRixLQUFvQm1vRCxLQUFHLHFDQUFtQ25vRCxFQUFFLGVBQUYsQ0FBbkMsR0FBc0QsSUFBdEQsR0FBMkRBLEVBQUUsZUFBRixDQUEzRCxHQUE4RSxXQUFqRixFQUE2RnFvRCxJQUFFLENBQUMsQ0FBcEgsSUFBdUhyb0QsRUFBRXdwRCxLQUFGLEtBQVVyQixLQUFHLHFDQUFtQ25vRCxFQUFFd3BELEtBQXJDLEdBQTJDLElBQTNDLEdBQWdEeHBELEVBQUV3cEQsS0FBbEQsR0FBd0QsV0FBM0QsRUFBdUVuQixJQUFFLENBQUMsQ0FBcEYsQ0FBdkgsQ0FBOE1BLE1BQUlGLEtBQUcsT0FBUCxFQUFnQixJQUFHbm9ELEVBQUV5cEQsYUFBTCxFQUFtQjtBQUFDcEIsWUFBRXJvRCxFQUFFeXBELGFBQUosQ0FBa0IsS0FBSXIxQyxJQUFFLENBQU4sRUFBUSxLQUFHQSxDQUFILElBQU0sSUFBRWkwQyxFQUFFL2pELE9BQUYsQ0FBVSxHQUFWLENBQWhCO0FBQWdDK2pELGdCQUN4ZkEsRUFBRXAxQyxPQUFGLENBQVUsSUFBVixFQUFlLElBQWYsQ0FEd2YsRUFDbmVvMUMsSUFBRUEsRUFBRXAxQyxPQUFGLENBQVUsSUFBVixFQUFlLElBQWYsQ0FEaWUsRUFDNWNvMUMsSUFBRUEsRUFBRXAxQyxPQUFGLENBQVUsSUFBVixFQUFlLElBQWYsQ0FEMGMsRUFDcmJvMUMsSUFBRUEsRUFBRXAxQyxPQUFGLENBQVUsSUFBVixFQUFlLElBQWYsQ0FEbWIsRUFDOVpvMUMsSUFBRUEsRUFBRXAxQyxPQUFGLENBQVUsSUFBVixFQUFlLElBQWYsQ0FENFosRUFDdllvMUMsSUFBRUEsRUFBRXAxQyxPQUFGLENBQVUsS0FBVixFQUFnQixRQUFoQixDQURxWSxFQUN6V28xQyxJQUFFQSxFQUFFcDFDLE9BQUYsQ0FBVSxLQUFWLEVBQWdCLEtBQWhCLENBRHVXLEVBQ2hWbzFDLElBQUVBLEVBQUVwMUMsT0FBRixDQUFVLEtBQVYsRUFBZ0IsS0FBaEIsQ0FEOFUsRUFDdlRvMUMsSUFBRUEsRUFBRXAxQyxPQUFGLENBQVUsS0FBVixFQUFnQixLQUFoQixDQURxVCxFQUM5Um8xQyxJQUFFQSxFQUFFcDFDLE9BQUYsQ0FBVSw2QkFBVixFQUF3QyxzQ0FBeEMsQ0FENFIsRUFDNU1vMUMsSUFBRUEsRUFBRXAxQyxPQUFGLENBQVUsS0FBVixFQUFnQixhQUFoQixDQUQwTSxFQUMzSyxJQUFFbUIsQ0FBRixLQUFNaTBDLElBQUVBLEVBQUVwMUMsT0FBRixDQUFVLEdBQVYsRUFBYyxPQUFkLENBQVIsQ0FEMkssRUFDM0ltQixHQUQySTtBQUFoQyxTQUN2Ryt6QyxLQUFHLDBEQUF3REUsQ0FBeEQsR0FBMEQsUUFBN0QsQ0FBc0VGLElBQUUsSUFBRUUsRUFBRS9qRCxPQUFGLENBQVUsSUFBVixDQUFGLEdBQWtCNmpELElBQUUsc0JBQXBCLEdBQTJDQSxJQUFFLE9BQS9DO0FBQXVELFNBQUdub0QsRUFBRSxvQkFBRixDQUFILEVBQTJCO0FBQUNxb0QsWUFDMWdCcm9ELEVBQUUsb0JBQUYsQ0FEMGdCLENBQ2xmLEtBQUlvVSxJQUFFLENBQU4sRUFBUSxLQUFHQSxDQUFILElBQU0sSUFBRWkwQyxFQUFFL2pELE9BQUYsQ0FBVSxHQUFWLENBQWhCO0FBQWdDK2pELGdCQUFFQSxFQUFFcDFDLE9BQUYsQ0FBVSxJQUFWLEVBQWUsSUFBZixDQUFGLEVBQXVCbzFDLElBQUVBLEVBQUVwMUMsT0FBRixDQUFVLElBQVYsRUFBZSxJQUFmLENBQXpCLEVBQThDbzFDLElBQUVBLEVBQUVwMUMsT0FBRixDQUFVLElBQVYsRUFBZSxJQUFmLENBQWhELEVBQXFFbzFDLElBQUVBLEVBQUVwMUMsT0FBRixDQUFVLElBQVYsRUFBZSxJQUFmLENBQXZFLEVBQTRGbzFDLElBQUVBLEVBQUVwMUMsT0FBRixDQUFVLElBQVYsRUFBZSxJQUFmLENBQTlGLEVBQW1IbzFDLElBQUVBLEVBQUVwMUMsT0FBRixDQUFVLEtBQVYsRUFBZ0IsUUFBaEIsQ0FBckgsRUFBaUpvMUMsSUFBRUEsRUFBRXAxQyxPQUFGLENBQVUsS0FBVixFQUFnQixLQUFoQixDQUFuSixFQUEwS28xQyxJQUFFQSxFQUFFcDFDLE9BQUYsQ0FBVSxLQUFWLEVBQWdCLEtBQWhCLENBQTVLLEVBQW1NbzFDLElBQUVBLEVBQUVwMUMsT0FBRixDQUFVLEtBQVYsRUFBZ0IsS0FBaEIsQ0FBck0sRUFBNE4sSUFBRW1CLENBQUYsS0FBTWkwQyxJQUFFQSxFQUFFcDFDLE9BQUYsQ0FBVSxHQUFWLEVBQWMsT0FBZCxDQUFSLENBQTVOLEVBQTRQbUIsR0FBNVA7QUFBaEMsU0FBZ1MrekMsS0FBRywwREFBd0RFLENBQXhELEdBQTBELFFBQTdELENBQXNFRixJQUFFLElBQUVFLEVBQUUvakQsT0FBRixDQUFVLElBQVYsQ0FBRixHQUFrQjZqRCxJQUFFLHNCQUFwQixHQUEyQ0EsSUFBRSxPQUEvQztBQUF1RCxPQUFFLFVBQUYsTUFBZ0JFLElBQUUsRUFBRixFQUFLQSxJQUFFcm9ELEVBQUUsVUFBRixDQUFQLEVBQXFCZ25ELEtBQUtxQixDQUFMLENBQXJCLEVBQTZCLENBQUMsQ0FBRCxJQUFJQSxFQUFFL2pELE9BQUYsQ0FBVSxVQUFWLEVBQ3RlLENBRHNlLENBQUosSUFDOWQsQ0FBQyxDQUFELElBQUkrakQsRUFBRS9qRCxPQUFGLENBQVUsU0FBVixFQUFvQixDQUFwQixDQUQwZCxLQUNqYytqRCxJQUFFLFlBQVVBLENBRHFiLENBQTdCLEVBQ3JaRixLQUFHLHVCQUFxQkUsQ0FBckIsR0FBdUIsNkNBRDJXLEVBQzVUcm9ELEVBQUUsaUJBQUYsS0FBc0Jxb0QsSUFBRXJvRCxFQUFFLGlCQUFGLENBQUYsRUFBdUJnbkQsS0FBS3FCLENBQUwsQ0FBdkIsRUFBK0IsQ0FBQyxDQUFELElBQUlBLEVBQUUvakQsT0FBRixDQUFVLFVBQVYsRUFBcUIsQ0FBckIsQ0FBSixJQUE2QixDQUFDLENBQUQsSUFBSStqRCxFQUFFL2pELE9BQUYsQ0FBVSxTQUFWLEVBQW9CLENBQXBCLENBQWpDLEtBQTBEK2pELElBQUUsWUFBVUEsQ0FBdEUsQ0FBL0IsRUFBd0dGLEtBQUcsdUJBQXFCRSxDQUFyQixHQUF1Qiw2Q0FBeEosSUFBdU1yb0QsRUFBRTBwRCxPQUFGLEtBQVlyQixJQUFFcm9ELEVBQUUwcEQsT0FBSixFQUFZMUMsS0FBS3FCLENBQUwsQ0FBWixFQUFvQixDQUFDLENBQUQsSUFBSUEsRUFBRS9qRCxPQUFGLENBQVUsVUFBVixFQUFxQixDQUFyQixDQUFKLElBQTZCLENBQUMsQ0FBRCxJQUFJK2pELEVBQUUvakQsT0FBRixDQUFVLFNBQVYsRUFBb0IsQ0FBcEIsQ0FBakMsS0FBMEQrakQsSUFBRSxZQUFVQSxDQUF0RSxDQUFwQixFQUE2RkYsS0FBRyx1QkFBcUJFLENBQXJCLEdBQXVCLDZDQUFuSSxDQUF2TSxDQUF5WHJvRCxFQUFFMnBELFNBQUYsS0FDcmZ0QixJQUFFcm9ELEVBQUUycEQsU0FBSixFQUFjM0MsS0FBS3FCLENBQUwsQ0FBZCxFQUFzQixDQUFDLENBQUQsSUFBSUEsRUFBRS9qRCxPQUFGLENBQVUsVUFBVixFQUFxQixDQUFyQixDQUFKLElBQTZCLENBQUMsQ0FBRCxJQUFJK2pELEVBQUUvakQsT0FBRixDQUFVLFNBQVYsRUFBb0IsQ0FBcEIsQ0FBakMsS0FBMEQrakQsSUFBRSxnQ0FBOEJBLENBQTFGLENBQXRCLEVBQW1IRixLQUFHLHlCQUF1QkUsQ0FBdkIsR0FBeUIsOENBRHNXLEVBQ3RUcm9ELEVBQUU0cEQsaUJBQUYsS0FBc0J2QixJQUFFcm9ELEVBQUU0cEQsaUJBQUosRUFBc0I1QyxLQUFLcUIsQ0FBTCxDQUF0QixFQUE4QixDQUFDLENBQUQsSUFBSUEsRUFBRS9qRCxPQUFGLENBQVUsVUFBVixFQUFxQixDQUFyQixDQUFKLElBQTZCLENBQUMsQ0FBRCxJQUFJK2pELEVBQUUvakQsT0FBRixDQUFVLFNBQVYsRUFBb0IsQ0FBcEIsQ0FBakMsS0FBMEQrakQsSUFBRSx3Q0FBc0NBLENBQWxHLENBQTlCLEVBQW1JRixLQUFHLHlCQUF1QkUsQ0FBdkIsR0FBeUIsOENBQXJMLEVBQXFPcm9ELEVBQUUsZ0JBQUYsTUFBc0Jxb0QsSUFBRXJvRCxFQUFFLGdCQUFGLENBQUYsRUFBc0JnbkQsS0FBS3FCLENBQUwsQ0FBdEIsRUFBOEIsQ0FBQyxDQUFELElBQUlBLEVBQUUvakQsT0FBRixDQUFVLFVBQVYsRUFBcUIsQ0FBckIsQ0FBSixJQUN6ZCxDQUFDLENBQUQsSUFBSStqRCxFQUFFL2pELE9BQUYsQ0FBVSxTQUFWLEVBQW9CLENBQXBCLENBRHFkLEtBQzViK2pELElBQUUsWUFBVUEsQ0FEZ2IsQ0FBOUIsRUFDL1lGLEtBQUcsc0JBQW9CRSxDQUFwQixHQUFzQiw0Q0FEZ1csRUFDbFRyb0QsRUFBRXNrQixLQUFGLEtBQVU2akMsS0FBRyxlQUFhbm9ELEVBQUVza0IsS0FBZixHQUFxQix3QkFBckIsR0FBOEN0a0IsRUFBRUUsSUFBaEQsR0FBcUQsU0FBckQsR0FBK0RGLEVBQUVFLElBQWpFLEdBQXNFLFNBQW5GLEVBQThGbW9ELElBQUUsRUFBRixDQUFLcm9ELEVBQUU2cEQsZUFBRixLQUFvQnhCLEtBQUcsc0JBQW9Cbm1DLFVBQVVsaUIsRUFBRTZwRCxlQUFaLENBQXBCLEdBQWlELE9BQXhFLEVBQWlGN3BELEVBQUUscUJBQUYsTUFBMkJxb0QsS0FBRyx5QkFBeUJubUMsVUFBVWxpQixFQUFFLHFCQUFGLENBQVYsQ0FBekIsR0FBNkQsT0FBM0YsRUFBb0dBLEVBQUUsc0JBQUYsTUFBNEJxb0QsS0FBRyxxQkFBbUJyb0QsRUFBRSxzQkFBRixDQUFuQixHQUE2QyxPQUE1RSxFQUFxRkEsRUFBRSx3QkFBRixNQUMvZHFvRCxLQUFHLHVCQUFxQnJvRCxFQUFFLHdCQUFGLENBQXJCLEdBQWlELE9BRDJhLEVBQ2xhQSxFQUFFLGtCQUFGLE1BQXdCcW9ELEtBQUcsZ0JBQWNyb0QsRUFBRSxrQkFBRixDQUFkLEdBQW9DLE9BQS9ELEVBQXdFLE1BQUlxb0QsQ0FBSixLQUFRRixLQUFHLHdFQUFzRUUsQ0FBdEUsR0FBd0UsYUFBbkYsRUFBa0dyb0QsRUFBRSt2QyxVQUFGLEtBQWVvWSxLQUFHLHdCQUFzQmptQyxVQUFVbGlCLEVBQUUrdkMsVUFBWixDQUF0QixHQUE4QyxPQUFoRSxFQUF5RS92QyxFQUFFLHdCQUFGLE1BQThCbW9ELEtBQUcsbUJBQWlCbm9ELEVBQUUsd0JBQUYsQ0FBakIsR0FBNkMsT0FBOUUsRUFBdUZBLEVBQUUsMkJBQUYsTUFBaUNtb0QsS0FBRyxnQ0FBOEJub0QsRUFBRSwyQkFBRixDQUE5QixHQUE2RCxPQUFqRyxFQUEwR0EsRUFBRSx3QkFBRixNQUNqZm1vRCxLQUFHLHlDQUF5Q25vRCxFQUFFLHdCQUFGLENBQXpDLEdBQXFFLE9BRHlhLEVBQ2hhQSxFQUFFLGtCQUFGLE1BQXdCbW9ELEtBQUcseUNBQXlDbm9ELEVBQUUsa0JBQUYsQ0FBekMsR0FBK0QsT0FBMUYsRUFBbUdBLEVBQUUsbUJBQUYsTUFBeUJtb0QsS0FBRyxvQ0FBb0Nub0QsRUFBRSxtQkFBRixDQUFwQyxHQUEyRCxPQUF2RixFQUFnR0EsRUFBRSxhQUFGLE1BQW1CbW9ELEtBQUcsb0NBQW9Dbm9ELEVBQUUsbUJBQUYsQ0FBcEMsR0FBMkQsT0FBakYsRUFBMEZBLEVBQUUsaUJBQUYsTUFBdUJtb0QsS0FBRyxtQ0FBbUNub0QsRUFBRSxpQkFBRixDQUFuQyxHQUF3RCxPQUFsRixFQUEyRkEsRUFBRSxtQkFBRixNQUF5Qm1vRCxLQUFHLCtCQUNsZWptQyxVQUFVbGlCLEVBQUUsbUJBQUYsQ0FBVixDQURrZSxHQUNoYyxPQURvYSxFQUMzWkEsRUFBRSxvQkFBRixNQUEwQm1vRCxLQUFHLG1DQUFpQ2ptQyxVQUFVbGlCLEVBQUUsb0JBQUYsQ0FBVixDQUFqQyxHQUFvRSxPQUFqRyxFQUEwR0EsRUFBRThwRCxVQUFGLEtBQWUzQixLQUFHLDBCQUEwQm5vRCxFQUFFOHBELFVBQTVCLEdBQXVDLE9BQXpELEVBQWtFOXBELEVBQUUrcEQsSUFBRixLQUFTNUIsS0FBR25vRCxFQUFFK3BELElBQUYsR0FBTyxPQUFuQixFQUE0Qi9wRCxFQUFFKzBDLFdBQUYsS0FBZ0JvVCxLQUFHbm9ELEVBQUUrMEMsV0FBRixHQUFjLE9BQWpDLEVBQTBDLzBDLEVBQUVncUQsUUFBRixLQUFhN0IsS0FBRyxnQkFBY25vRCxFQUFFZ3FELFFBQWhCLEdBQXlCLE9BQXpDLEVBQWtEaHFELEVBQUUyVCxHQUFGLEtBQVF3MEMsS0FBRyxlQUFhbm9ELEVBQUUyVCxHQUFmLEdBQW1CLE9BQTlCLEVBQXVDLFNBQU8zVCxFQUFFaXFELEdBQVQsS0FBZTlCLEtBQUcsb0NBQWxCLEVBQXdEbm9ELEVBQUVrcUQsSUFBRixLQUFTN0IsSUFBRSxFQUFGLEVBQUtyb0QsRUFBRW1xRCxLQUFGLEtBQVU5QixLQUFHLG9CQUFrQnJvRCxFQUFFbXFELEtBQXBCLEdBQTBCLE9BQXZDLENBQUwsRUFBcURucUQsRUFBRW9xRCxLQUFGLEtBQy9lL0IsS0FBRyxlQUFhcm9ELEVBQUVvcUQsS0FBZixHQUFxQixPQUR1ZCxDQUFyRCxFQUN6WnBxRCxFQUFFcXFELE1BQUYsS0FBV2hDLEtBQUcseUJBQXlCcm9ELEVBQUVxcUQsTUFBM0IsR0FBa0MsT0FBaEQsQ0FEeVosRUFDaFcsU0FBT3JxRCxFQUFFc3FELFNBQVQsS0FBcUJqQyxLQUFHLDRCQUF4QixDQURnVyxFQUN0UyxNQUFJQSxDQUFKLEtBQVFGLEtBQUcsK0RBQTZERSxDQUE3RCxHQUErRCxhQUExRSxDQUQ2UixFQUNuTXRvRCxNQUFJc29ELElBQUV0b0QsQ0FBRixFQUFJaW5ELEtBQUtxQixDQUFMLENBQUosRUFBWUEsSUFBRUEsRUFBRXAxQyxPQUFGLENBQVUsSUFBVixFQUFlLEdBQWYsQ0FBZCxFQUFrQ2sxQyxJQUFFQSxJQUFFLE9BQUYsSUFBVyxtREFBaURFLENBQWpELEdBQW1ELG1EQUE5RCxDQUF4QyxFQUE0SixPQUFPRixJQUFFLG1DQUFpQ0EsQ0FBakMsR0FBbUMsUUFBNUM7QUFBcUQ7QUFDemIsU0FBU2lCLG1CQUFULENBQTZCcHBELENBQTdCLEVBQStCO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVMsSUFBRyxhQUFXQyxFQUFFNG9ELE9BQWIsSUFBc0IsWUFBVTVvRCxFQUFFdXFELFVBQXJDLEVBQWdEeHFELEtBQUcsV0FBSCxDQUFlLElBQUcsY0FBWUMsRUFBRTRvRCxPQUFkLElBQXVCLFlBQVU1b0QsRUFBRTRvRCxPQUFuQyxJQUE0QyxjQUFZNW9ELEVBQUV1cUQsVUFBMUQsSUFBc0UsWUFBVXZxRCxFQUFFdXFELFVBQXJGLEVBQWdHeHFELElBQUUsU0FBT0MsRUFBRXdxRCxTQUFULEdBQW1CenFELElBQUUsa0NBQXJCLEdBQXdEQSxJQUFFLGtCQUE1RCxDQUErRSxhQUFXQyxFQUFFNG9ELE9BQWIsS0FBdUI3b0QsS0FBRyxlQUExQixFQUEyQyxJQUFHLGNBQVlDLEVBQUU0b0QsT0FBZCxJQUF1QixjQUFZNW9ELEVBQUUsc0JBQUYsQ0FBdEMsRUFBZ0VELEtBQUcsZUFBSCxDQUFtQixJQUFHLHFCQUFtQkMsRUFBRXVxRCxVQUFyQixJQUFpQyxTQUFPdnFELEVBQUUsaUNBQUYsQ0FBM0MsRUFBZ0ZELEtBQUcsc0JBQUg7QUFDeGUsUUFBRyw0QkFBMEJDLEVBQUV1cUQsVUFBNUIsSUFBd0MsU0FBT3ZxRCxFQUFFLHdDQUFGLENBQS9DLElBQTRGLFNBQU9BLEVBQUUsdUNBQUYsQ0FBdEcsRUFBaUpELEtBQUcsb0JBQUgsQ0FBd0IsSUFBRyxxQkFBbUJDLEVBQUV1cUQsVUFBckIsSUFBaUMsU0FBT3ZxRCxFQUFFLGlDQUFGLENBQTNDLEVBQWdGRCxLQUFHLHNCQUFILENBQTBCLGlCQUFlQyxFQUFFdXFELFVBQWpCLEtBQThCeHFELEtBQUcsK0NBQWpDLEVBQW9GLGFBQVdDLEVBQUV1cUQsVUFBYixLQUEwQnhxRCxLQUFHLGNBQTdCLEVBQTZDLElBQUcsc0JBQW9CQyxFQUFFdXFELFVBQXRCLElBQWtDLFNBQU92cUQsRUFBRSxrQ0FBRixDQUE1QyxFQUFrRkQsS0FBRyxrQkFBSDtBQUN0ZSxhQUFPQyxFQUFFLGlDQUFGLENBQVAsS0FBOENELEtBQUcscUJBQWpELEVBQXdFLGdCQUFjQyxFQUFFNG9ELE9BQWhCLEtBQTBCN29ELEtBQUcsZUFBN0IsRUFBOEMsa0JBQWdCQyxFQUFFNG9ELE9BQWxCLEtBQTRCN29ELEtBQUcsb0JBQS9CLEVBQXFELHVCQUFxQkMsRUFBRXdxRCxTQUF2QixLQUFtQ3pxRCxLQUFHLHNCQUF0QyxFQUFnRSxTQUFPQyxFQUFFd3FELFNBQVQsS0FBcUJ6cUQsS0FBRywyQkFBeEIsRUFBcUQsbUJBQWlCQyxFQUFFd3FELFNBQW5CLEtBQStCenFELEtBQUcsMkJBQWxDLEVBQStELFdBQVNDLEVBQUV3cUQsU0FBWCxLQUF1QnpxRCxLQUFHLHFCQUExQixFQUFtRCxZQUFVQyxFQUFFNG9ELE9BQVosS0FBc0I3b0QsS0FBRyxtQkFBekIsRUFBOEMsdUJBQXFCQyxFQUFFd3FELFNBQXZCLEtBQW1DenFELEtBQUcsb0JBQXRDO0FBQ2hjLG1CQUFhQyxFQUFFeXFELGlCQUFmLEtBQW1DMXFELEtBQUcsNEJBQXRDLEVBQW9FLFdBQVNDLEVBQUV5cUQsaUJBQVgsS0FBK0IxcUQsS0FBRyw0QkFBbEMsRUFBZ0UsY0FBWUMsRUFBRTBxRCxRQUFkLEtBQXlCM3FELEtBQUcsa0JBQTVCLEVBQWdELFNBQU9DLEVBQUV5cUQsaUJBQVQsS0FBNkIxcUQsS0FBRywyQkFBaEMsRUFBNkQsNEJBQTBCQyxFQUFFMnFELE9BQTVCLEtBQXNDNXFELEtBQUcsbUJBQXpDLEVBQThELElBQUcsc0JBQW9CQyxFQUFFNG9ELE9BQXRCLElBQStCLHNCQUFvQjVvRCxFQUFFd3FELFNBQXhELEVBQWtFenFELEtBQUcsMEJBQUgsQ0FBOEIsZUFBYUMsRUFBRXdxRCxTQUFmLEtBQTJCenFELEtBQUcsbUJBQTlCLEVBQW1ELFdBQVNDLEVBQUV3cUQsU0FBWCxLQUF1QnpxRCxLQUFHLGFBQTFCLEVBQXlDLGVBQzNlQyxFQUFFNG9ELE9BRHllLEtBQy9kN29ELEtBQUcsbUJBRDRkLEVBQ3ZjLG9CQUFrQkMsRUFBRTRvRCxPQUFwQixLQUE4QjdvRCxLQUFHLHNCQUFqQyxFQUF5RCxrQkFBZ0JDLEVBQUV3cUQsU0FBbEIsS0FBOEIsaUJBQWV4cUQsRUFBRSxtQkFBRixDQUFmLEdBQXNDRCxLQUFHLHVCQUF6QyxHQUFpRSxZQUFVQyxFQUFFLG1CQUFGLENBQVYsR0FBaUNELEtBQUcseUJBQXBDLEdBQWdFLFVBQVFDLEVBQUUsbUJBQUYsQ0FBUixHQUErQkQsS0FBRyxrQkFBbEMsR0FBcUQsVUFBUUMsRUFBRSxtQkFBRixDQUFSLEtBQWlDRCxLQUFHLGlCQUFwQyxDQUFwTixFQUE0USxtQkFBaUJDLEVBQUV3cUQsU0FBbkIsS0FBK0J6cUQsS0FBRyxpQkFBbEMsRUFBcUQscUJBQW1CQyxFQUFFd3FELFNBQXJCLEtBQWlDenFELEtBQUcsb0JBQXBDLEVBQTRELGNBQVlDLEVBQUV5cUQsaUJBQWQsS0FDemQxcUQsS0FBRywwQkFEc2QsRUFDMWIsZ0JBQWNDLEVBQUV3cUQsU0FBaEIsS0FBNEJ6cUQsS0FBRyx5QkFBL0IsRUFBNEQsZUFBYUMsRUFBRTRxRCxjQUFmLEtBQWdDN3FELEtBQUcsMEJBQW5DLEVBQStELGVBQWFDLEVBQUU0b0QsT0FBZixJQUF3QixTQUFPNW9ELEVBQUUscUJBQUYsQ0FBL0IsSUFBeUQsY0FBWUEsRUFBRSx1Q0FBRixDQUFyRSxHQUFnSEQsS0FBRyxvQkFBbkgsR0FBd0ksZUFBYUMsRUFBRTRvRCxPQUFmLEtBQXlCN29ELEtBQUcsbUJBQTVCLENBQXhJLENBQXlMLFNBQU9DLEVBQUUsa0JBQUYsQ0FBUCxHQUE2QkQsS0FBRyx1Q0FBaEMsR0FBd0UsVUFBUUMsRUFBRSxrQkFBRixDQUFSLEtBQWdDRCxLQUFHLGlDQUFuQyxDQUF4RSxDQUE4SSxTQUFPQyxFQUFFLGlCQUFGLENBQVAsR0FDOWRELEtBQUcsc0NBRDJkLEdBQ3BiLFVBQVFDLEVBQUUsaUJBQUYsQ0FBUixLQUErQkQsS0FBRyxnQ0FBbEMsQ0FEb2IsQ0FDaFgsU0FBT0MsRUFBRSx1QkFBRixDQUFQLEdBQWtDRCxLQUFHLDRDQUFyQyxHQUFrRixVQUFRQyxFQUFFLHVCQUFGLENBQVIsS0FBcUNELEtBQUcsc0NBQXhDLENBQWxGLENBQWtLLFNBQU9DLEVBQUUscUJBQUYsQ0FBUCxHQUFnQ0QsS0FBRywwQ0FBbkMsR0FBOEUsVUFBUUMsRUFBRSxxQkFBRixDQUFSLEtBQW1DRCxLQUFHLG9DQUF0QyxDQUE5RSxDQUEwSixTQUFPQyxFQUFFLFlBQUYsQ0FBUCxHQUF1QkQsS0FBRyxnQ0FBMUIsR0FBMkQsVUFBUUMsRUFBRSxZQUFGLENBQVIsS0FDcGVELEtBQUcsMEJBRGllLENBQTNELENBQzFZLFNBQU9DLEVBQUUsaUJBQUYsQ0FBUCxHQUE0QkQsS0FBRyxxQ0FBL0IsR0FBcUUsVUFBUUMsRUFBRSxpQkFBRixDQUFSLEtBQStCRCxLQUFHLCtCQUFsQyxDQUFyRSxDQUF3SSxTQUFPQyxFQUFFLFVBQUYsQ0FBUCxHQUFxQkQsS0FBRyx5Q0FBeEIsR0FBb0UsVUFBUUMsRUFBRSxVQUFGLENBQVIsS0FBd0JELEtBQUcsbUNBQTNCLENBQXBFLENBQXNJLFNBQU9DLEVBQUUsa0JBQUYsQ0FBUCxHQUE2QkQsS0FBRyxxQ0FBaEMsR0FBc0UsVUFBUUMsRUFBRSxrQkFBRixDQUFSLEtBQWdDRCxLQUFHLCtCQUFuQyxDQUF0RSxDQUEwSSxTQUFPQyxFQUFFLGlCQUFGLENBQVAsR0FBNEJELEtBQUcsb0NBQS9CLEdBQ3hiLFVBQVFDLEVBQUUsaUJBQUYsQ0FBUixLQUErQkQsS0FBRyw4QkFBbEMsQ0FEd2IsQ0FDdFgsU0FBT0MsRUFBRSxtQkFBRixDQUFQLEdBQThCRCxLQUFHLHNDQUFqQyxHQUF3RSxVQUFRQyxFQUFFLG1CQUFGLENBQVIsS0FBaUNELEtBQUcsZ0NBQXBDLENBQXhFLENBQThJLFNBQU9DLEVBQUUsWUFBRixDQUFQLEdBQXVCRCxLQUFHLG9DQUExQixHQUErRCxVQUFRQyxFQUFFLFlBQUYsQ0FBUixLQUEwQkQsS0FBRyw4QkFBN0IsQ0FBL0QsQ0FBNEgsU0FBT0MsRUFBRSxhQUFGLENBQVAsR0FBd0JELEtBQUcsa0NBQTNCLEdBQThELFVBQVFDLEVBQUUsYUFBRixDQUFSLEtBQTJCRCxLQUFHLDRCQUE5QixDQUE5RCxDQUEwSCxTQUFPQyxFQUFFNG9ELE9BQVQsS0FBbUI3b0QsS0FBRyxvQkFBdEIsRUFBOEMsU0FDeGZDLEVBQUU0b0QsT0FEc2YsS0FDNWU3b0QsS0FBRyxVQUR5ZSxFQUM3ZCxTQUFPQyxFQUFFNnFELGFBQVQsS0FBeUI5cUQsS0FBRywrQkFBNUIsRUFBNkQsU0FBT0MsRUFBRThxRCxTQUFULEtBQXFCL3FELEtBQUcsMkJBQXhCLEVBQXFELFNBQU9DLEVBQUUrcUQsSUFBVCxLQUFnQmhyRCxLQUFHLGdEQUFuQixFQUF1RSxTQUFPQyxFQUFFZ3JELE1BQVQsS0FBa0JqckQsS0FBRyxtQ0FBckIsRUFBNEQsU0FBT0MsRUFBRWlyRCxNQUFULEtBQWtCbHJELEtBQUcsNkJBQXJCLEVBQXNELGdCQUFjQyxFQUFFNG9ELE9BQWhCLEtBQTBCN29ELEtBQUcsaUJBQTdCLEVBQWdELGdCQUFjQyxFQUFFNG9ELE9BQWhCLEtBQTBCN29ELEtBQUcsaUJBQTdCLEVBQWdELGVBQWFDLEVBQUU0b0QsT0FBZixLQUF5QjdvRCxLQUFHLDJCQUE1QixFQUF5RCxJQUFHLENBQUMsVUFBUUMsRUFBRTRvRCxPQUFWLElBQy9kLGlCQUFlNW9ELEVBQUU0b0QsT0FENmMsS0FDbmMsZUFBYTVvRCxFQUFFa3JELE9BRGliLEVBQ3phbnJELEtBQUcsc0JBQUgsQ0FBNEIsSUFBRyxVQUFRQyxFQUFFNG9ELE9BQVYsSUFBbUIsZUFBYTVvRCxFQUFFa3JELE9BQWxDLElBQTJDLGVBQWFsckQsRUFBRTRvRCxPQUE3RCxFQUFxRTdvRCxLQUFHLGNBQUgsQ0FBa0IsZ0JBQWNDLEVBQUU2b0QsT0FBaEIsS0FBMEI5b0QsS0FBRyxtQkFBN0IsRUFBb0QsY0FBWUMsRUFBRTZvRCxPQUFkLEtBQXdCOW9ELEtBQUcsZUFBM0IsRUFBNEMsZUFBYUMsRUFBRTZvRCxPQUFmLEtBQXlCOW9ELEtBQUcsb0JBQTVCLEVBQWtELGdCQUFjQyxFQUFFNm9ELE9BQWhCLEtBQTBCOW9ELEtBQUcsMEJBQTdCLEVBQTJELGFBQVdDLEVBQUU2b0QsT0FBYixLQUF1QjlvRCxLQUFHLGVBQTFCLEVBQTJDLGVBQWFDLEVBQUU2b0QsT0FBZixLQUF5QjlvRCxLQUFHLG1CQUE1QixFQUFpRCxrQkFBZ0JDLEVBQUU2b0QsT0FBbEIsS0FBNEI5b0QsS0FBRywwQkFBL0I7QUFDbGQsZ0JBQVVDLEVBQUU2b0QsT0FBWixLQUFzQjlvRCxLQUFHLDJCQUF6QixFQUFzRCxhQUFXQyxFQUFFNm9ELE9BQWIsS0FBdUI5b0QsS0FBRyxtQkFBMUIsRUFBK0MsaUJBQWVDLEVBQUU2b0QsT0FBakIsS0FBMkI5b0QsS0FBRyx5Q0FBOUIsRUFBeUUsWUFBVUMsRUFBRTZvRCxPQUFaLEtBQXNCOW9ELEtBQUcsNkJBQXpCLEVBQXdELFdBQVNDLEVBQUU2b0QsT0FBWCxLQUFxQjlvRCxLQUFHLFlBQXhCLEVBQXNDLFdBQVNDLEVBQUU2b0QsT0FBWCxLQUFxQjlvRCxLQUFHLFlBQXhCLEVBQXNDLFlBQVVDLEVBQUU2b0QsT0FBWixLQUFzQjlvRCxLQUFHLGFBQXpCLEVBQXdDLGlCQUFlQyxFQUFFNm9ELE9BQWpCLEtBQTJCOW9ELEtBQUcsOEJBQTlCLEVBQThELGdCQUFjQyxFQUFFNm9ELE9BQWhCLEtBQTBCOW9ELEtBQUcsZ0NBQTdCLEVBQStELGVBQWFDLEVBQUU2b0QsT0FBZixLQUF5QjlvRCxLQUFHLHFCQUE1QjtBQUN2ZCx3QkFBa0JDLEVBQUU2b0QsT0FBcEIsS0FBOEI5b0QsS0FBRyxxQkFBakMsRUFBMEQsaUJBQWVDLEVBQUU2b0QsT0FBakIsS0FBMkI5b0QsS0FBRyxpQkFBOUIsRUFBaUQsU0FBT0MsRUFBRTZvRCxPQUFULEtBQW1COW9ELEtBQUcscUJBQUgsRUFBeUIsZUFBYUMsRUFBRW1yRCxHQUFmLEtBQXFCcHJELEtBQUcscUJBQXhCLENBQXpCLEVBQXdFLGlCQUFlQyxFQUFFbXJELEdBQWpCLEtBQXVCcHJELEtBQUcsdUJBQTFCLENBQXhFLEVBQTJILGNBQVlDLEVBQUVtckQsR0FBZCxLQUFvQnByRCxLQUFHLG9CQUF2QixDQUE5SSxFQUE0TCwwQkFBd0JDLEVBQUU2b0QsT0FBMUIsS0FBb0M5b0QsS0FBRyx3QkFBdkMsRUFBaUUsYUFBV0MsRUFBRW9yRCxJQUFiLEtBQW9CcnJELEtBQUcsa0JBQXZCLEVBQTJDLFdBQVNDLEVBQUVvckQsSUFBWCxJQUFpQixhQUFXcHJELEVBQUVpcEQsS0FBOUIsS0FBc0NscEQsS0FBRyxtQkFBekMsRUFBOEQsbUJBQWlCQyxFQUFFb3JELElBQW5CLEtBQTBCcnJELEtBQUcsb0JBQTdCO0FBQ2pkLGFBQU9DLEVBQUVvckQsSUFBVCxLQUFnQnJyRCxLQUFHLGtCQUFuQixFQUF1QyxlQUFhQyxFQUFFb3JELElBQWYsS0FBc0JyckQsS0FBRyx1QkFBekIsRUFBa0QsZ0JBQWNDLEVBQUVvckQsSUFBaEIsS0FBdUJyckQsS0FBRyxzQkFBMUIsRUFBa0QsaUJBQWVDLEVBQUVvckQsSUFBakIsS0FBd0JyckQsS0FBRyx1QkFBM0IsRUFBb0QsZ0JBQWNDLEVBQUVvckQsSUFBaEIsS0FBdUJyckQsS0FBRyx3QkFBMUIsRUFBb0QsYUFBV0MsRUFBRW9yRCxJQUFiLEtBQW9CcnJELEtBQUcscUJBQXZCLEVBQThDLFdBQVNDLEVBQUVvckQsSUFBWCxLQUFrQnJyRCxLQUFHLG1CQUFyQixFQUEwQyxZQUFVQyxFQUFFb3JELElBQVosS0FBbUJyckQsS0FBRyxpQkFBdEIsRUFBeUMsYUFBV0MsRUFBRW9yRCxJQUFiLEtBQW9CcnJELEtBQUcsaUJBQXZCLEVBQTBDLGFBQVdDLEVBQUVvckQsSUFBYixLQUFvQnJyRCxLQUFHLG1CQUF2QixFQUE0QyxrQkFBZ0JDLEVBQUVvckQsSUFBbEIsS0FBeUJyckQsS0FBRywwQkFBNUI7QUFDMWMsb0JBQWNDLEVBQUVvckQsSUFBaEIsS0FBdUJyckQsS0FBRyxpQkFBMUIsRUFBNkMsWUFBVUMsRUFBRW9yRCxJQUFaLEtBQW1CcnJELEtBQUcsd0JBQXRCLEVBQWdELFNBQU9DLEVBQUVvckQsSUFBVCxLQUFnQnJyRCxLQUFHLGdCQUFuQixFQUFxQyxpQkFBZUMsRUFBRW9yRCxJQUFqQixLQUF3QnJyRCxLQUFHLHdCQUEzQixFQUFxRCxVQUFRQyxFQUFFb3JELElBQVYsS0FBaUJyckQsS0FBRyxtQkFBcEIsRUFBeUMsYUFBV0MsRUFBRW9yRCxJQUFiLEtBQW9CcnJELEtBQUcscURBQXZCLEVBQWdGLGFBQVdDLEVBQUVvckQsSUFBYixLQUFvQnJyRCxLQUFHLGlCQUF2QixFQUEwQyxXQUFTQyxFQUFFb3JELElBQVgsS0FBa0JyckQsS0FBRyxtQkFBckIsRUFBMEMsZ0JBQWNDLEVBQUVvckQsSUFBaEIsS0FBdUJyckQsS0FBRyxxQkFBMUIsRUFBaUQsV0FBU0MsRUFBRW9yRCxJQUFYLEtBQWtCcnJELEtBQUcsa0JBQXJCLEVBQXlDLFlBQVVDLEVBQUVvckQsSUFBWixLQUFtQnJyRCxLQUFHLGtCQUF0QjtBQUM5ZCxnQkFBVUMsRUFBRW9yRCxJQUFaLEtBQW1CcnJELEtBQUcsbUNBQXRCLEVBQTJELGlCQUFlQyxFQUFFb3JELElBQWpCLEtBQXdCcnJELEtBQUcsdUJBQTNCLEVBQW9ELGNBQVlDLEVBQUVvckQsSUFBZCxLQUFxQnJyRCxLQUFHLDRCQUF4QixFQUF3RCxjQUFZQyxFQUFFb3JELElBQWQsS0FBcUJyckQsS0FBRyx5QkFBeEIsRUFBbUQsV0FBU0MsRUFBRW9yRCxJQUFYLEtBQWtCcnJELEtBQUcsOEJBQXJCLEVBQXFELFdBQVNDLEVBQUVvckQsSUFBWCxLQUFrQnJyRCxLQUFHLG9CQUFyQixFQUEyQyxXQUFTQyxFQUFFb3JELElBQVgsS0FBa0JyckQsS0FBRyxrQkFBckIsRUFBeUMsYUFBV0MsRUFBRW9yRCxJQUFiLEtBQW9CcnJELEtBQUcsb0JBQXZCLEVBQTZDLGNBQVlDLEVBQUVvckQsSUFBZCxLQUFxQnJyRCxLQUFHLGdCQUF4QixFQUEwQyxzQkFBb0JDLEVBQUUrb0QsT0FBdEIsS0FBZ0NocEQsS0FBRyxpQkFBbkMsRUFBc0Qsa0JBQ2hmQyxFQUFFK29ELE9BRDhlLEtBQ3BlaHBELEtBQUcsZUFEaWUsRUFDaGQsZUFBYUMsRUFBRStvRCxPQUFmLEtBQXlCaHBELEtBQUcsNkJBQTVCLEVBQTJELFlBQVVDLEVBQUUrb0QsT0FBWixLQUFzQmhwRCxLQUFHLHVDQUF6QixFQUF3RSxVQUFRQyxFQUFFK29ELE9BQVYsS0FBb0JocEQsS0FBRyxrQkFBdkIsRUFBMkMsV0FBU0MsRUFBRStvRCxPQUFYLEtBQXFCaHBELEtBQUcsYUFBeEIsRUFBdUMsY0FBWUMsRUFBRStvRCxPQUFkLEtBQXdCaHBELEtBQUcsZ0JBQTNCLEVBQTZDLGFBQVdDLEVBQUUrb0QsT0FBYixLQUF1QmhwRCxLQUFHLGtCQUExQixFQUE4QyxhQUFXQyxFQUFFK29ELE9BQWIsS0FBdUJocEQsS0FBRyxrQkFBMUIsRUFBOEMsWUFBVUMsRUFBRStvRCxPQUFaLEtBQXNCaHBELEtBQUcsYUFBekIsRUFBd0MsaUJBQWVDLEVBQUUrb0QsT0FBakIsS0FBMkJocEQsS0FBRyxnQkFBOUIsRUFBZ0QsaUJBQWVDLEVBQUUrb0QsT0FBakIsS0FBMkJocEQsS0FBRywrQkFBOUI7QUFDdGQsc0JBQWdCQyxFQUFFK29ELE9BQWxCLEtBQTRCaHBELEtBQUcsNEJBQS9CLEVBQTZELGNBQVlDLEVBQUUrb0QsT0FBZCxLQUF3QmhwRCxLQUFHLGtCQUEzQixFQUErQyxvQkFBa0JDLEVBQUUrb0QsT0FBcEIsS0FBOEJocEQsS0FBRyw4QkFBakMsRUFBaUUsVUFBUUMsRUFBRStvRCxPQUFWLEtBQW9CaHBELEtBQUcsb0JBQXZCLEVBQStDLG9CQUFrQkMsRUFBRStvRCxPQUFwQixLQUE4QmhwRCxLQUFHLGVBQWpDLEVBQWtELFdBQVNDLEVBQUUrb0QsT0FBWCxLQUFxQmhwRCxLQUFHLGdCQUF4QixFQUEwQyxXQUFTQyxFQUFFK29ELE9BQVgsSUFBb0IsU0FBTy9vRCxFQUFFcXJELFFBQTdCLEtBQXdDdHJELEtBQUcsaUJBQTNDLEVBQThELGdCQUFjQyxFQUFFK29ELE9BQWhCLElBQXlCLFNBQU8vb0QsRUFBRXFyRCxRQUFsQyxHQUEyQ3RyRCxLQUFHLG1CQUE5QyxHQUFrRSxnQkFBY0MsRUFBRStvRCxPQUFoQixLQUEwQmhwRCxLQUFHLGlCQUE3QixDQUFsRSxDQUFrSCxpQkFDeGVDLEVBQUUrb0QsT0FEc2UsS0FDNWRocEQsS0FBRyx3Q0FEeWQsRUFDN2EsU0FBT0MsRUFBRStvRCxPQUFULEtBQW1CaHBELEtBQUcsb0JBQXRCLEVBQTRDLG1CQUFpQkMsRUFBRStvRCxPQUFuQixLQUE2QmhwRCxLQUFHLG1CQUFoQyxFQUFxRCx3QkFBc0JDLEVBQUVpcEQsS0FBeEIsS0FBZ0NscEQsS0FBRyxpQkFBbkMsRUFBc0QsYUFBV0MsRUFBRStvRCxPQUFiLEtBQXVCaHBELEtBQUcsY0FBMUIsRUFBMEMsbUJBQWlCQyxFQUFFK29ELE9BQW5CLEtBQTZCaHBELEtBQUcsb0JBQWhDLEVBQXNELFdBQVNDLEVBQUUrb0QsT0FBWCxLQUFxQmhwRCxLQUFHLGVBQXhCLEVBQXlDLGdCQUFjQyxFQUFFK29ELE9BQWhCLEtBQTBCaHBELEtBQUcsaUJBQTdCLEVBQWdELG1CQUFpQkMsRUFBRStvRCxPQUFuQixLQUE2QmhwRCxLQUFHLDRCQUFoQyxFQUE4RCx5QkFBdUJDLEVBQUUrb0QsT0FBekIsS0FBbUNocEQsS0FBRyxpQkFBdEM7QUFDemMsdUJBQWlCQyxFQUFFK29ELE9BQW5CLElBQTRCLFdBQVMvb0QsRUFBRWlwRCxLQUF2QyxLQUErQ2xwRCxLQUFHLG9CQUFsRCxFQUF3RSxtQkFBaUJDLEVBQUUrb0QsT0FBbkIsSUFBNEIsVUFBUS9vRCxFQUFFaXBELEtBQXRDLEtBQThDbHBELEtBQUcsZ0JBQWpELEVBQW1FLElBQUcsYUFBV0MsRUFBRWlwRCxLQUFiLElBQW9CLFdBQVNqcEQsRUFBRWlwRCxLQUFsQyxFQUF3Q2xwRCxLQUFHLHVCQUFILENBQTJCLElBQUcsV0FBU0MsRUFBRWlwRCxLQUFYLElBQWtCLFVBQVFqcEQsRUFBRWlwRCxLQUEvQixFQUFxQ2xwRCxLQUFHLFlBQUgsQ0FBZ0IsSUFBR0MsRUFBRSxZQUFGLENBQUgsRUFBbUIsUUFBT0EsRUFBRSxZQUFGLENBQVAsR0FBd0IsS0FBSyxTQUFMO0FBQWVELGlCQUFHLDZCQUFILENBQW1DLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRywrQkFBSCxDQUFtQyxNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFDM2YsdUNBRDJmLENBQ25kLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxnQkFBSCxDQURtTixDQUMvTCxJQUFHQyxFQUFFaXBELEtBQUwsRUFBVyxRQUFPanBELEVBQUVpcEQsS0FBVCxHQUFnQixLQUFLLFNBQUw7QUFBZWxwRCxpQkFBRyxhQUFILENBQWlCLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsZ0JBQUgsQ0FBckgsQ0FBeUksSUFBR0MsRUFBRWdwRCxTQUFMLEVBQWUsUUFBT2hwRCxFQUFFZ3BELFNBQVQsR0FBb0IsS0FBSyxXQUFMO0FBQWlCanBELGlCQUFHLHVCQUFILENBQTJCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLHVCQUFILENBQTJCLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsbUNBQUgsQ0FBdUMsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGNBQUg7QUFDemUsa0JBQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLGFBQUgsQ0FBaUIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcseUJBQUgsQ0FBNkIsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsMkJBQUgsQ0FBK0IsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLG1CQUFILENBQXlCLE1BQU0sS0FBSyxjQUFMO0FBQW9CQSxpQkFBRywwQkFBSCxDQUFnQyxNQUFNO0FBQVFBLGlCQUFHLFdBQUgsQ0FEVCxDQUN3QixZQUFVQyxFQUFFcXJELFFBQVosS0FBdUJ0ckQsS0FBRyxjQUExQixFQUEwQyxlQUFhQyxFQUFFcXJELFFBQWYsS0FBMEJ0ckQsS0FBRyxlQUE3QixFQUE4QyxnQkFBY0MsRUFBRXFyRCxRQUFoQixLQUEyQnRyRCxLQUFHLGNBQTlCLEVBQThDLFVBQVFDLEVBQUVxckQsUUFBVixLQUFxQnRyRCxLQUFHLFdBQXhCLEVBQXFDLFdBQVNDLEVBQUVxckQsUUFBWCxLQUFzQnRyRCxLQUFHLFlBQXpCLEVBQXVDLFdBQVNDLEVBQUVxckQsUUFBWCxLQUNuZXRyRCxLQUFHLFdBRGdlLEVBQ25kLGNBQVlDLEVBQUVxckQsUUFBZCxLQUF5QnRyRCxLQUFHLGtCQUE1QixFQUFnRCxpQkFBZUMsRUFBRXFyRCxRQUFqQixLQUE0QnRyRCxLQUFHLGVBQS9CLEVBQWdELElBQUcsY0FBWUMsRUFBRXFyRCxRQUFkLElBQXdCLHNCQUFvQnJyRCxFQUFFcXJELFFBQWpELEVBQTBEdHJELEtBQUcsZUFBSCxDQUFtQixhQUFXQyxFQUFFcXJELFFBQWIsS0FBd0J0ckQsS0FBRyxlQUEzQixFQUE0QyxlQUFhQyxFQUFFcXJELFFBQWYsS0FBMEJ0ckQsS0FBRyxlQUE3QixFQUE4QyxjQUFZQyxFQUFFcXJELFFBQWQsS0FBeUJ0ckQsS0FBRyxlQUE1QixFQUE2QyxvQkFBa0JDLEVBQUVxckQsUUFBcEIsS0FBK0J0ckQsS0FBRywwQkFBbEMsRUFBOEQsZ0JBQWNDLEVBQUVxckQsUUFBaEIsS0FBMkJ0ckQsS0FBRyxrQkFBOUIsRUFBa0QsWUFBVUMsRUFBRXFyRCxRQUFaLEtBQXVCdHJELEtBQUcsY0FBMUIsRUFBMEMsZUFBYUMsRUFBRXFyRCxRQUFmLEtBQzlkdHJELEtBQUcsZ0JBRDJkLEVBQ3pjLGVBQWFDLEVBQUVxckQsUUFBZixLQUEwQnRyRCxLQUFHLGdCQUE3QixFQUErQyxZQUFVQyxFQUFFcXJELFFBQVosS0FBdUJ0ckQsS0FBRyxhQUExQixFQUF5QyxZQUFVQyxFQUFFcXJELFFBQVosS0FBdUJ0ckQsS0FBRyxjQUExQixFQUEwQyxXQUFTQyxFQUFFcXJELFFBQVgsS0FBc0J0ckQsS0FBRyxvQkFBekIsRUFBaUQsYUFBV0MsRUFBRXFyRCxRQUFiLEtBQXdCdHJELEtBQUcsY0FBM0IsRUFBMkMsbUJBQWlCQyxFQUFFcXJELFFBQW5CLEtBQThCdHJELEtBQUcsY0FBakMsRUFBaUQsZ0JBQWNDLEVBQUVxckQsUUFBaEIsS0FBMkJ0ckQsS0FBRyxxQkFBOUIsRUFBdUQsWUFBVUMsRUFBRXFyRCxRQUFaLEtBQXVCdHJELEtBQUcsaUNBQTFCLEVBQWlFLFlBQVVDLEVBQUVxckQsUUFBWixLQUF1QnRyRCxLQUFHLGdCQUExQixFQUE4QyxZQUFVQyxFQUFFcXJELFFBQVosS0FBdUJ0ckQsS0FBRyxhQUExQixFQUF5QyxXQUNwZkMsRUFBRXFyRCxRQURrZixLQUN2ZXRyRCxLQUFHLGVBRG9lLEVBQ2pkLGtCQUFnQkMsRUFBRXFyRCxRQUFsQixLQUE2QnRyRCxLQUFHLG1CQUFoQyxFQUFxRCxrQkFBZ0JDLEVBQUVxckQsUUFBbEIsS0FBNkJ0ckQsS0FBRyxhQUFoQyxFQUErQyxZQUFVQyxFQUFFcXJELFFBQVosS0FBdUJ0ckQsS0FBRyxhQUExQixFQUF5QyxhQUFXQyxFQUFFcXJELFFBQWIsS0FBd0J0ckQsS0FBRyxjQUEzQixFQUEyQyxnQkFBY0MsRUFBRXFyRCxRQUFoQixLQUEyQnRyRCxLQUFHLHFCQUE5QixFQUF1RCxZQUFVQyxFQUFFcXJELFFBQVosS0FBdUJ0ckQsS0FBRyxhQUExQixFQUF5QyxTQUFPQyxFQUFFcXJELFFBQVQsS0FBb0J0ckQsS0FBRyxlQUF2QixFQUEwQyxlQUFhQyxFQUFFcXJELFFBQWYsS0FBMEJ0ckQsS0FBRyxnQkFBN0IsRUFBK0MsVUFBUUMsRUFBRXFyRCxRQUFWLEtBQXFCdHJELEtBQUcsbUJBQXhCLEVBQStDLFVBQVFDLEVBQUVxckQsUUFBVixLQUFxQnRyRCxLQUFHLHdCQUF4QjtBQUNuYywyQkFBcUJDLEVBQUVxckQsUUFBdkIsS0FBa0N0ckQsS0FBRyx5QkFBckMsRUFBZ0UsYUFBV0MsRUFBRXFyRCxRQUFiLEtBQXdCdHJELEtBQUcscUJBQTNCLEVBQWtELFdBQVNDLEVBQUVxckQsUUFBWCxLQUFzQnRyRCxLQUFHLFlBQXpCLEVBQXVDLGFBQVdDLEVBQUVxckQsUUFBYixLQUF3QnRyRCxLQUFHLGNBQTNCLEVBQTJDLFdBQVNDLEVBQUVxckQsUUFBWCxLQUFzQnRyRCxLQUFHLGFBQXpCLEVBQXdDLGNBQVlDLEVBQUU0b0QsT0FBZCxLQUF3QjdvRCxLQUFHLGlCQUEzQixFQUE4QyxhQUFXQyxFQUFFNG9ELE9BQWIsS0FBdUI3b0QsS0FBRyxrQkFBMUIsRUFBZ0QsY0FBWUMsRUFBRTRvRCxPQUFkLEtBQXdCN29ELEtBQUcsY0FBM0IsRUFBMkMsZ0JBQWNDLEVBQUU0b0QsT0FBaEIsS0FBMEI3b0QsS0FBRywwQkFBN0IsRUFBMkQsSUFBRyxtQkFBaUJDLEVBQUU0b0QsT0FBbkIsSUFBNEIsVUFBUTVvRCxFQUFFNG9ELE9BQXpDLEVBQWlEN29ELEtBQUcsb0JBQUg7QUFDamUsa0JBQVlDLEVBQUU0b0QsT0FBZCxLQUF3QjdvRCxLQUFHLDhCQUEzQixFQUE2RCxXQUFTQyxFQUFFNG9ELE9BQVgsS0FBcUI3b0QsS0FBRyxlQUF4QixFQUF5QyxJQUFHLGdCQUFjQyxFQUFFNG9ELE9BQWhCLElBQXlCLGNBQVk1b0QsRUFBRXNyRCxPQUExQyxFQUFrRHZyRCxLQUFHLGVBQUgsQ0FBbUIsY0FBWUMsRUFBRTRvRCxPQUFkLEtBQXdCN29ELEtBQUcsa0JBQTNCLEVBQStDLGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsY0FBOUIsRUFBOEMsZUFBYUMsRUFBRTRvRCxPQUFmLEtBQXlCN29ELEtBQUcsY0FBNUIsRUFBNEMsU0FBT0MsRUFBRTRvRCxPQUFULEtBQW1CN29ELEtBQUcsa0JBQXRCLEVBQTBDLFVBQVFDLEVBQUU0b0QsT0FBVixLQUFvQjdvRCxLQUFHLGtCQUF2QixFQUEyQyxhQUFXQyxFQUFFNG9ELE9BQWIsSUFBc0IsU0FBTzVvRCxFQUFFdXJELE1BQS9CLEdBQXNDeHJELEtBQUcsOENBQXpDLEdBQTBGLGFBQVdDLEVBQUU0b0QsT0FBYixLQUM5ZDdvRCxLQUFHLDhCQUQyZCxDQUExRixDQUMvVixZQUFVQyxFQUFFNG9ELE9BQVosSUFBcUIsT0FBSzVvRCxFQUFFLGFBQUYsQ0FBMUIsR0FBMkNELEtBQUcsa0JBQTlDLEdBQWlFLFlBQVVDLEVBQUU0b0QsT0FBWixJQUFxQixPQUFLNW9ELEVBQUUsYUFBRixDQUExQixHQUEyQ0QsS0FBRyxzQkFBOUMsR0FBcUUsWUFBVUMsRUFBRTRvRCxPQUFaLElBQXFCLE9BQUs1b0QsRUFBRSxhQUFGLENBQTFCLEdBQTJDRCxLQUFHLHVCQUE5QyxHQUFzRSxZQUFVQyxFQUFFNG9ELE9BQVosS0FBc0I3b0QsS0FBRyxhQUF6QixDQUE1TSxDQUFvUCxrQkFBZ0JDLEVBQUU0b0QsT0FBbEIsS0FBNEI3b0QsS0FBRyxtQkFBL0IsRUFBb0QsbUJBQWlCQyxFQUFFNG9ELE9BQW5CLEtBQTZCN29ELEtBQUcsc0JBQWhDLEVBQTBELGFBQVdDLEVBQUU0b0QsT0FBYixLQUF1QjdvRCxLQUFHLHVDQUExQixFQUFxRSxlQUFhQyxFQUFFNG9ELE9BQWYsS0FBeUI3b0QsS0FBRyx1Q0FBNUI7QUFDamQsb0JBQWNDLEVBQUU0b0QsT0FBaEIsS0FBMEI3b0QsS0FBRyxnQ0FBN0IsRUFBaUUsYUFBV0MsRUFBRTRvRCxPQUFiLEtBQXVCN29ELEtBQUcsZ0NBQTFCLEVBQThELGFBQVdDLEVBQUU0b0QsT0FBYixLQUF1QjdvRCxLQUFHLGlCQUExQixFQUE2QyxTQUFPQyxFQUFFNG9ELE9BQVQsS0FBbUI3b0QsS0FBRyxpQkFBdEIsRUFBeUMsZUFBYUMsRUFBRTRvRCxPQUFmLEtBQXlCN29ELEtBQUcsNEJBQTVCLEVBQTBELHFCQUFtQkMsRUFBRTRvRCxPQUFyQixLQUErQjdvRCxLQUFHLHVCQUFsQyxFQUEyRCxvQkFBa0JDLEVBQUU0b0QsT0FBcEIsS0FBOEI3b0QsS0FBRyxxQkFBakMsRUFBd0Qsa0JBQWdCQyxFQUFFNG9ELE9BQWxCLEtBQTRCN29ELEtBQUcsbUJBQS9CLEVBQW9ELGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsa0JBQTlCLEVBQWtELFlBQVVDLEVBQUU0b0QsT0FBWixLQUN2ZTdvRCxLQUFHLFdBRG9lLEVBQ3ZkLG1CQUFpQkMsRUFBRTRvRCxPQUFuQixLQUE2QjdvRCxLQUFHLGlCQUFoQyxFQUFtRCxJQUFHLGFBQVdDLEVBQUU0b0QsT0FBYixJQUFzQixhQUFXNW9ELEVBQUV3ckQsVUFBdEMsRUFBaUR6ckQsS0FBRyxnQkFBSCxDQUFvQixhQUFXQyxFQUFFNG9ELE9BQWIsSUFBc0IsZUFBYTVvRCxFQUFFd3JELFVBQXJDLEtBQWtEenJELEtBQUcsZ0JBQXJELEVBQXVFLGFBQVdDLEVBQUU0b0QsT0FBYixJQUFzQix1QkFBcUI1b0QsRUFBRXdyRCxVQUE3QyxLQUEwRHpyRCxLQUFHLHVCQUE3RCxFQUFzRixhQUFXQyxFQUFFNG9ELE9BQWIsSUFBc0Isd0JBQXNCNW9ELEVBQUV3ckQsVUFBOUMsS0FBMkR6ckQsS0FBRyx1QkFBOUQsRUFBdUYsYUFBV0MsRUFBRTRvRCxPQUFiLElBQXNCLHVCQUFxQjVvRCxFQUFFd3JELFVBQTdDLEtBQTBEenJELEtBQUcsNkJBQTdELEVBQThGLGFBQVdDLEVBQUU0b0QsT0FBYixJQUFzQixnQkFDamY1b0QsRUFBRXdyRCxVQUR5ZCxLQUM1Y3pyRCxLQUFHLGlCQUR5YyxFQUN0YixhQUFXQyxFQUFFNG9ELE9BQWIsSUFBc0IscUJBQW1CNW9ELEVBQUV3ckQsVUFBM0MsS0FBd0R6ckQsS0FBRyx1QkFBM0QsRUFBb0YsaUJBQWVDLEVBQUU0b0QsT0FBakIsS0FBMkI3b0QsS0FBRyxvQkFBOUIsRUFBc0QsWUFBVUMsRUFBRTRvRCxPQUFaLEtBQXNCN29ELEtBQUcsYUFBekIsRUFBd0MsU0FBT0MsRUFBRTRvRCxPQUFULEtBQW1CN29ELEtBQUcsb0JBQXRCLEVBQTRDLGFBQVdDLEVBQUU0b0QsT0FBYixLQUF1QjdvRCxLQUFHLDRCQUExQixFQUF3RCxvQkFBa0JDLEVBQUU0b0QsT0FBcEIsS0FBOEI3b0QsS0FBRywrQkFBakMsRUFBb0UsU0FBT0MsRUFBRXlyRCxjQUFULEtBQTBCMXJELEtBQUcsK0JBQTdCLEVBQWdFLGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsaUNBQTlCO0FBQy9iLGNBQVFDLEVBQUU0b0QsT0FBVixLQUFvQjdvRCxLQUFHLFdBQXZCLEVBQW9DLGNBQVlDLEVBQUU0b0QsT0FBZCxLQUF3QjdvRCxLQUFHLHNCQUEzQixFQUFtRCxhQUFXQyxFQUFFNG9ELE9BQWIsS0FBdUI3b0QsS0FBRywyQkFBMUIsRUFBdUQsZUFBYUMsRUFBRTRvRCxPQUFmLEtBQXlCN29ELEtBQUcsZ0JBQTVCLEVBQThDLGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsa0JBQTlCLEVBQWtELGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsa0JBQTlCLEVBQWtELGdCQUFjQyxFQUFFNG9ELE9BQWhCLEtBQTBCN29ELEtBQUcsY0FBN0IsRUFBNkMsaUJBQWVDLEVBQUU0b0QsT0FBakIsS0FBMkI3b0QsS0FBRyxrQkFBOUIsRUFBa0QsSUFBRyxXQUFTQyxFQUFFNG9ELE9BQVgsSUFBb0IsV0FBUzVvRCxFQUFFcXJELFFBQWxDLEVBQTJDdHJELEtBQUcsYUFBSCxDQUFpQixtQkFBaUJDLEVBQUU0b0QsT0FBbkIsS0FBNkI3b0QsS0FBRyxlQUFoQyxFQUFpRCxpQkFDNWVDLEVBQUU0b0QsT0FEMGUsS0FDaGU3b0QsS0FBRyxrQkFENmQsRUFDemMsWUFBVUMsRUFBRTRvRCxPQUFaLEtBQXNCN29ELEtBQUcsbUJBQXpCLEVBQWdELG9CQUFrQkMsRUFBRTRvRCxPQUFwQixLQUE4QjdvRCxLQUFHLG1DQUFqQyxFQUFzRSxxQkFBbUJDLEVBQUU0b0QsT0FBckIsS0FBK0I3b0QsS0FBRyxpQkFBbEMsRUFBcUQsaUJBQWVDLEVBQUU0b0QsT0FBakIsS0FBMkI3b0QsS0FBRywrQkFBOUIsRUFBK0QsY0FBWUMsRUFBRTRvRCxPQUFkLEtBQXdCN29ELEtBQUcsZUFBM0IsRUFBNEMsV0FBU0MsRUFBRTRvRCxPQUFYLEtBQXFCN29ELEtBQUcsWUFBeEIsRUFBc0MsWUFBVUMsRUFBRTRvRCxPQUFaLEtBQXNCN29ELEtBQUcsNEJBQXpCLEVBQXlELElBQUcsb0JBQWtCQyxFQUFFNG9ELE9BQXBCLEtBQThCN29ELEtBQUcsdURBQUgsRUFDcmJDLEVBQUUwckQsS0FEcVosQ0FBSCxFQUMzWSxRQUFPM3JELEtBQUcsT0FBSCxFQUFXQyxFQUFFMHJELEtBQXBCLEdBQTJCLEtBQUssT0FBTDtBQUFhM3JELGlCQUFHLDBCQUFILENBQWdDLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLFVBQUgsQ0FBYyxNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLGNBQUgsQ0FBa0IsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsYUFBSCxDQUFpQixNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsaUJBQUgsQ0FBcUIsTUFBTTtBQUFRQSxpQkFBRywwQkFBSCxDQUFqVSxDQUFpVyxJQUFHLGtCQUFnQkMsRUFBRTRvRCxPQUFsQixJQUEyQixtQkFBaUI1b0QsRUFBRTByRCxLQUFqRCxFQUF1RDNyRCxLQUFHLGtDQUFILENBQXdDLElBQUcsZ0JBQWNDLEVBQUU0b0QsT0FBaEIsSUFBeUIsZUFBYTVvRCxFQUFFNG9ELE9BQXhDLElBQzVjLGdCQUFjNW9ELEVBQUU0b0QsT0FEeWIsRUFDamI3b0QsS0FBRyxxQkFBSCxDQUF5QixvQkFBa0JDLEVBQUU0b0QsT0FBcEIsS0FBOEI3b0QsS0FBRyxtQkFBakMsRUFBd0Qsc0JBQW9CQyxFQUFFNG9ELE9BQXRCLEtBQWdDN29ELEtBQUcsdUJBQW5DLEVBQTRELGdCQUFjQyxFQUFFNG9ELE9BQWhCLEtBQTBCN29ELEtBQUcsb0JBQTdCLEVBQW1ELHNCQUFvQkMsRUFBRTRvRCxPQUF0QixLQUFnQzdvRCxLQUFHLHlCQUFuQyxFQUFnRSxJQUFHLFNBQU9DLEVBQUUyckQsUUFBVCxJQUFtQixTQUFPM3JELEVBQUU0ckQsU0FBL0IsRUFBeUM3ckQsS0FBRyx5QkFBSCxDQUE2QixJQUFHLHFCQUFtQkMsRUFBRTRvRCxPQUF4QixFQUFnQyxJQUFHNW9ELEVBQUU2ckQsT0FBTCxFQUFhLFFBQU83ckQsRUFBRTZyRCxPQUFULEdBQWtCLEtBQUssbUJBQUw7QUFBeUI5ckQsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLHdCQUFIO0FBQ2hmLGtCQUFNLEtBQUssY0FBTDtBQUFvQkEsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsdUJBQUgsQ0FBNkIsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsb0JBQUgsQ0FBd0IsTUFBTSxLQUFLLFlBQUw7QUFBa0JBLGlCQUFHLHdCQUFILENBQTRCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLGlDQUFILENBQXFDLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLG9CQUFILENBQXdCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLHlCQUFILENBQStCLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRyx3Q0FBSCxDQUFnRCxNQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLGdDQUFILENBQXdDO0FBQ25mLGFBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLDJCQUFILENBQWlDLE1BQU0sS0FBSyxrQkFBTDtBQUF3QkEsaUJBQUcsMENBQUgsQ0FBZ0QsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLDBCQUFILENBQThCLE1BQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcscUNBQUgsQ0FBNkMsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLGlCQUFHLDJCQUFILENBQWlDLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLG9CQUFILENBQXdCLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLDJCQUFILENBQStCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRywwQkFBSCxDQUFnQyxNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsK0JBQUg7QUFDdGUsa0JBQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLG1CQUFMO0FBQXlCQSxpQkFBRyx5QkFBSCxDQUE2QixNQUFNLEtBQUssMEJBQUw7QUFBZ0NBLGlCQUFHLHdCQUFILENBQTRCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxzQkFBSCxDQUEwQixNQUFNLEtBQUssZUFBTDtBQUFxQkEsaUJBQUcsa0JBQUgsQ0FBc0IsTUFBTSxLQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyxtQkFBSCxDQUF1QixNQUFNLEtBQUssaUJBQUw7QUFBdUJBLGlCQUFHLHdCQUFILENBQTRCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLGtCQUFILENBQXNCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxrQ0FBSCxDQUF3QztBQUN0ZixhQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGdDQUFILENBQXNDLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLHlCQUFILENBQTZCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLCtCQUFILENBQXVDLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxzQkFBSCxDQUEwQixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxtQkFBSCxDQUF1QixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyx1QkFBSCxDQUEyQixNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcseUJBQUgsQ0FBNkIsTUFBTTtBQUFRQSxpQkFBRyxzQkFBSCxDQUpnQyxDQUFiLE1BSVlBLEtBQUcsc0JBQUgsQ0FBMEIsaUJBQWVDLEVBQUU0b0QsT0FBakIsS0FBMkI3b0QsS0FBRyxvQkFBOUIsRUFBb0QsYUFBV0MsRUFBRTRvRCxPQUFiLEtBQXVCN29ELEtBQUcsOEJBQTFCO0FBQzVkLGdCQUFVQyxFQUFFNG9ELE9BQVosS0FBc0I3b0QsS0FBRyxhQUF6QixFQUF3QyxhQUFXQyxFQUFFNG9ELE9BQWIsS0FBdUI3b0QsS0FBRyxjQUExQixFQUEwQyxlQUFhQyxFQUFFcXJELFFBQWYsS0FBMEJ0ckQsS0FBRyxpQkFBN0IsRUFBZ0QsWUFBVUMsRUFBRXFyRCxRQUFaLEtBQXVCdHJELEtBQUcsYUFBMUIsRUFBeUMsWUFBVUMsRUFBRXFyRCxRQUFaLEtBQXVCdHJELEtBQUcsY0FBMUIsRUFBMEMsc0JBQW9CQyxFQUFFNG9ELE9BQXRCLEtBQWdDN29ELEtBQUcsNkJBQW5DLEVBQW9FLGFBQVdDLEVBQUU4ckQsU0FBYixLQUF5Qi9yRCxLQUFHLHVCQUE1QixFQUFxRCxnQkFBY0MsRUFBRSxtQkFBRixDQUFkLEtBQXVDRCxLQUFHLHFDQUExQyxFQUFtRixpQkFBZUMsRUFBRSxtQkFBRixDQUFmLElBQXVDLHdCQUFzQixDQUFDLG9CQUFELENBQTdELEtBQ2hhRCxLQUFHLHlCQUQ2WixFQUNoWSxTQUFPQyxFQUFFOHJELFNBQVQsSUFBb0IsWUFBVTlyRCxFQUFFK3JELFFBQWhDLEtBQTJDaHNELEtBQUcsOEJBQTlDLEVBQThFLFNBQU9DLEVBQUU4ckQsU0FBVCxJQUFvQixjQUFZOXJELEVBQUUrckQsUUFBbEMsS0FBNkNoc0QsS0FBRyxvQ0FBaEQsRUFBd0YsU0FBT0MsRUFBRThyRCxTQUFULElBQW9CLGNBQVk5ckQsRUFBRStyRCxRQUFsQyxLQUE2Q2hzRCxLQUFHLHFDQUFoRCxFQUF5RixlQUFhQyxFQUFFOG9ELFFBQWYsS0FBMEIvb0QsS0FBRywyQkFBN0IsRUFBMEQsZUFBYUMsRUFBRTRvRCxPQUFmLEtBQXlCN29ELEtBQUcsY0FBNUIsRUFBNEMsZUFBYUMsRUFBRXFyRCxRQUFmLEtBQTBCdHJELEtBQUcsY0FBN0IsRUFBNkMsV0FBU0MsRUFBRThvRCxRQUFYLEtBQXNCL29ELEtBQUcsNEJBQXpCLEVBQXVELG9CQUMxZUMsRUFBRThvRCxRQUR3ZSxLQUM3ZC9vRCxLQUFHLDhCQUQwZCxFQUMxYixlQUFhQyxFQUFFOG9ELFFBQWYsS0FBMEIvb0QsS0FBRywrQkFBN0IsRUFBOEQsY0FBWUMsRUFBRThvRCxRQUFkLEtBQXlCL29ELEtBQUcsZUFBNUIsRUFBNkMsWUFBVUMsRUFBRThvRCxRQUFaLEtBQXVCL29ELEtBQUcsYUFBMUIsRUFBeUMsVUFBUUMsRUFBRThvRCxRQUFWLEtBQXFCL29ELEtBQUcsc0JBQXhCLEVBQWdELFdBQVNDLEVBQUU4b0QsUUFBWCxLQUFzQi9vRCxLQUFHLFlBQXpCLEVBQXVDLGFBQVdDLEVBQUVnc0QsY0FBYixLQUE4QmpzRCxLQUFHLHlCQUFqQyxFQUE0RCxnQkFBY0MsRUFBRThvRCxRQUFoQixLQUEyQi9vRCxLQUFHLGlCQUE5QixFQUFpRCxpQkFBZUMsRUFBRThvRCxRQUFqQixLQUE0Qi9vRCxLQUFHLG1CQUEvQixFQUFvRCxnQkFBY0MsRUFBRThvRCxRQUFoQixLQUEyQi9vRCxLQUFHLDJCQUE5QjtBQUM1YixRQUFHLGlCQUFlQyxFQUFFOG9ELFFBQWpCLElBQTJCLG9CQUFrQjlvRCxFQUFFOG9ELFFBQWxELEVBQTJEL29ELEtBQUcsMEJBQUgsQ0FBOEIsZUFBYUMsRUFBRThvRCxRQUFmLEtBQTBCL29ELEtBQUcsZUFBN0IsRUFBOEMsbUJBQWlCQyxFQUFFOG9ELFFBQW5CLEtBQThCL29ELEtBQUcsZUFBakMsRUFBa0QsY0FBWUMsRUFBRTRvRCxPQUFkLEtBQXdCN29ELEtBQUcsY0FBM0IsRUFBMkMsY0FBWUMsRUFBRThvRCxRQUFkLEtBQXlCL29ELEtBQUcsY0FBNUIsRUFBNEMsdUJBQXFCQyxFQUFFOG9ELFFBQXZCLEtBQWtDL29ELEtBQUcsMEJBQXJDLEVBQWlFLElBQUcsWUFBVUMsRUFBRThvRCxRQUFmLEVBQXdCLElBQUc5b0QsRUFBRWlzRCxXQUFMLEVBQWlCLFFBQU9qc0QsRUFBRWlzRCxXQUFULEdBQXNCLEtBQUssV0FBTDtBQUFpQmxzRCxpQkFBRyxXQUFILENBQWUsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsYUFBSCxDQUFpQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFIO0FBQ3RlLGtCQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsY0FBSCxDQUFrQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxtQ0FBSCxDQUEyQyxNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLFlBQUgsQ0FBZ0IsTUFBTTtBQUFRQSxpQkFBRyxxQkFBSCxDQURnSixDQUFqQixNQUNqR0EsS0FBRyxxQkFBSCxDQUF5Qix5QkFBdUJDLEVBQUU4b0QsUUFBekIsS0FBb0Mvb0QsS0FBRyxzQ0FBdkMsRUFBbUYsSUFBRyxVQUFRQyxFQUFFOG9ELFFBQWIsRUFBc0IsSUFBRzlvRCxFQUFFa3NELElBQUwsRUFBVSxRQUFPbHNELEVBQUVrc0QsSUFBVCxHQUFlLEtBQUssU0FBTDtBQUFlbnNELGlCQUFHLG1CQUFILENBQXlCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxlQUFILENBQW1CO0FBQ2hmLGFBQUssVUFBTDtBQUFnQkEsaUJBQUcsa0JBQUgsQ0FBd0IsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLHVCQUFILENBQTJCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxnQkFBSCxDQUFvQixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsa0JBQUgsQ0FBc0IsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsYUFBSCxDQUFpQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxlQUFILENBQW1CLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRyxnQkFBSCxDQUFvQixNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxnQkFBSCxDQUFvQixNQUFNO0FBQVFBLGlCQUFHLGdDQUFILENBRE8sQ0FBVixNQUM4Q0EsS0FBRyxnQ0FBSCxDQUFzQyxnQkFBY0MsRUFBRW1zRCxNQUFoQixLQUF5QnBzRCxLQUNuZix1Q0FEMGQsRUFDL2Esb0JBQWtCQyxFQUFFbXNELE1BQXBCLEtBQTZCcHNELEtBQUcscUNBQWhDLEVBQXlFLGVBQWFDLEVBQUVtc0QsTUFBZixLQUF3QnBzRCxLQUFHLHlCQUEzQixFQUF3RCxpQkFBZUMsRUFBRW1zRCxNQUFqQixLQUEwQnBzRCxLQUFHLHNEQUE3QixFQUFxRixlQUFhQyxFQUFFbXNELE1BQWYsS0FBd0Jwc0QsS0FBRyxXQUEzQixFQUF3QyxhQUFXQyxFQUFFbXNELE1BQWIsS0FBc0Jwc0QsS0FBRyx1REFBekIsRUFBb0YsYUFBV0MsRUFBRW1zRCxNQUFiLEtBQXNCcHNELEtBQUcsZ0NBQXpCLEVBQTJELDZCQUEyQkMsRUFBRW1zRCxNQUE3QixLQUFzQ3BzRCxLQUFHLDBCQUF6QztBQUM1YiwyQkFBcUJDLEVBQUVtc0QsTUFBdkIsS0FBZ0Nwc0QsS0FBRyxzQ0FBbkMsRUFBMkUsa0JBQWdCQyxFQUFFbXNELE1BQWxCLEtBQTJCcHNELEtBQUcsbURBQTlCLEVBQW1GLGNBQVlDLEVBQUVtc0QsTUFBZCxLQUF1QnBzRCxLQUFHLGVBQTFCLEVBQTJDLGdCQUFjQyxFQUFFbXNELE1BQWhCLEtBQXlCcHNELEtBQUcsd0NBQTVCLEVBQXdFLGdCQUFjQyxFQUFFbXNELE1BQWhCLEtBQXlCcHNELEtBQUcseUNBQTVCLEVBQXlFLFdBQVNDLEVBQUVtc0QsTUFBWCxLQUFvQnBzRCxLQUFHLDJDQUF2QixFQUEwRSxlQUFhQyxFQUFFbXNELE1BQWYsS0FBd0Jwc0QsS0FBRywyQkFBM0IsRUFBMEQsUUFBTUMsRUFBRW1zRCxNQUFSLEtBQWlCcHNELEtBQUcscUJBQXBCO0FBQzlkLGdCQUFVQyxFQUFFbXNELE1BQVosS0FBcUJwc0QsS0FBRywyQkFBeEIsRUFBcUQsZUFBYUMsRUFBRW1zRCxNQUFmLEtBQXdCcHNELEtBQUcsd0JBQTNCLEVBQXFELFNBQU9DLEVBQUVtc0QsTUFBVCxLQUFrQnBzRCxLQUFHLGdEQUFyQixFQUF5RSxZQUFVQyxFQUFFbXNELE1BQVosS0FBcUJwc0QsS0FBRyxZQUF4QixFQUFzQyxxQkFBbUJDLEVBQUVtc0QsTUFBckIsS0FBOEJwc0QsS0FBRyx1Q0FBakMsRUFBNEUsWUFBVUMsRUFBRW1zRCxNQUFaLEtBQXFCcHNELEtBQUcsaURBQXhCLEVBQTZFLGFBQVdDLEVBQUVtc0QsTUFBYixLQUFzQnBzRCxLQUFHLG1EQUF6QixFQUE4RSx1QkFBcUJDLEVBQUVtc0QsTUFBdkIsS0FBZ0Nwc0QsS0FBRyxtREFBbkM7QUFDaGMsa0JBQVlDLEVBQUVtc0QsTUFBZCxLQUF1QnBzRCxLQUFHLGlCQUExQixFQUE2QyxjQUFZQyxFQUFFbXNELE1BQWQsS0FBdUJwc0QsS0FBRywwQ0FBMUIsRUFBMEUsY0FBWUMsRUFBRW1zRCxNQUFkLEtBQXVCcHNELEtBQUcsMkNBQTFCLEVBQXVFLFNBQU9DLEVBQUVtc0QsTUFBVCxLQUFrQnBzRCxLQUFHLGdCQUFyQixFQUF1Qyx1QkFBcUJDLEVBQUVtc0QsTUFBdkIsS0FBZ0Nwc0QsS0FBRyw4QkFBbkMsRUFBbUUsa0JBQWdCQyxFQUFFbXNELE1BQWxCLEtBQTJCcHNELEtBQUcsbUNBQTlCLEVBQW1FLG1CQUFpQkMsRUFBRW1zRCxNQUFuQixLQUE0QnBzRCxLQUFHLDJCQUEvQixFQUE0RCxlQUFhQyxFQUFFbXNELE1BQWYsS0FBd0Jwc0QsS0FBRyxnQkFBM0IsRUFBNkMsVUFBUUMsRUFBRW9zRCxLQUFWLEtBQWtCcnNELEtBQUcsbUJBQXJCO0FBQ3BkLGNBQVFDLEVBQUVvc0QsS0FBVixLQUFrQnJzRCxLQUFHLHVCQUFyQixFQUE4QyxhQUFXQyxFQUFFb3NELEtBQWIsS0FBcUJyc0QsS0FBRyxXQUF4QixFQUFxQyxlQUFhQyxFQUFFb3NELEtBQWYsS0FBdUJyc0QsS0FBRyxnQkFBMUIsRUFBNEMsV0FBU0MsRUFBRW9zRCxLQUFYLEtBQW1CcnNELEtBQUcsWUFBdEIsRUFBb0MsV0FBU0MsRUFBRTJxRCxPQUFYLEtBQXFCNXFELEtBQUcsK0JBQXhCLEVBQXlELGFBQVdDLEVBQUUycUQsT0FBYixLQUF1QjVxRCxLQUFHLHFCQUExQixFQUFpRCxnQkFBY0MsRUFBRXFzRCxPQUFoQixLQUEwQnRzRCxLQUFHLGFBQTdCLEVBQTRDLFVBQVFDLEVBQUUycUQsT0FBVixLQUFvQjVxRCxLQUFHLGdCQUF2QixFQUEyQyxhQUFXQyxFQUFFNG9ELE9BQWIsS0FBdUI3b0QsS0FBRyxnQkFBMUIsRUFBNEMsY0FBWUMsRUFBRTJxRCxPQUFkLEtBQXdCNXFELEtBQUcsb0JBQTNCLEVBQW1ELGVBQWFDLEVBQUUycUQsT0FBZixLQUF5QjVxRCxLQUFHLGdCQUE1QixFQUE4QyxvQkFDamZDLEVBQUUycUQsT0FEK2UsS0FDcmU1cUQsS0FBRyw2QkFEa2UsRUFDbmMsYUFBV0MsRUFBRTJxRCxPQUFiLEtBQXVCNXFELEtBQUcsOENBQTFCLEVBQThFLGNBQVlDLEVBQUUycUQsT0FBZCxLQUF3QjVxRCxLQUFHLGVBQTNCLEVBQTRDLHVCQUFxQkMsRUFBRTJxRCxPQUF2QixLQUFpQzVxRCxLQUFHLHVCQUFwQyxFQUE2RCxlQUFhQyxFQUFFMnFELE9BQWYsS0FBeUI1cUQsS0FBRyxjQUE1QixFQUE0QyxTQUFPQyxFQUFFc3NELE1BQVQsS0FBa0J2c0QsS0FBRyx1QkFBckIsRUFBZ0QsU0FBT0MsRUFBRXVzRCxTQUFULEtBQXFCeHNELEtBQUcsb0JBQXhCLEVBQThDLGFBQVdDLEVBQUV1c0QsU0FBYixLQUF5QnhzRCxLQUFHLG9CQUE1QixFQUFrRCxTQUFPQyxFQUFFdXNELFNBQVQsS0FBcUJ4c0QsS0FBRyxvQkFBeEIsRUFBOEMsVUFBUUMsRUFBRXVzRCxTQUFWLEtBQXNCeHNELEtBQUcsb0JBQXpCO0FBQy9jLGtCQUFZQyxFQUFFMnFELE9BQWQsS0FBd0I1cUQsS0FBRyxxQkFBM0IsRUFBa0QsZ0JBQWNDLEVBQUUycUQsT0FBaEIsS0FBMEI1cUQsS0FBRywwQkFBN0IsRUFBNkQsaUJBQWVDLEVBQUUycUQsT0FBakIsS0FBMkI1cUQsS0FBRyxzQkFBOUIsRUFBc0QscUJBQW1CQyxFQUFFMnFELE9BQXJCLEtBQStCNXFELEtBQUcsWUFBbEMsRUFBZ0QscUJBQW1CQyxFQUFFd3NELFFBQXJCLEtBQWdDenNELEtBQUcsMkJBQW5DLEVBQW9FLGtCQUFnQkMsRUFBRTJxRCxPQUFsQixLQUE0QjVxRCxLQUFHLGNBQS9CLEVBQStDLFNBQU9DLEVBQUV5c0QsZUFBVCxLQUEyQkMsT0FBSyxpQ0FBaEMsRUFBbUUsVUFBUTFzRCxFQUFFeXNELGVBQVYsS0FBNEIxc0QsS0FBRyx1QkFBL0IsRUFBd0QsYUFBV0MsRUFBRXlzRCxlQUFiLEtBQStCMXNELEtBQUcsa0NBQWxDO0FBQ25jLGdCQUFVQyxFQUFFeXNELGVBQVosS0FBOEIxc0QsS0FBRyw4REFBakMsRUFBbUcsYUFBV0MsRUFBRXlzRCxlQUFiLEtBQStCMXNELEtBQUcsaUVBQWxDLEVBQXVHLFVBQVFDLEVBQUV5c0QsZUFBVixLQUE0QjFzRCxLQUFHLGlFQUEvQixFQUFvRyxZQUFVQyxFQUFFeXNELGVBQVosS0FBOEIxc0QsS0FBRyx5QkFBakMsRUFBNEQsa0JBQWdCQyxFQUFFeXNELGVBQWxCLEtBQW9DMXNELEtBQUcscUJBQXZDLEVBQThELFdBQVNDLEVBQUV5c0QsZUFBWCxLQUE2QjFzRCxLQUFHLG1EQUFoQztBQUN4YSx1QkFBaUJDLEVBQUUsY0FBRixDQUFqQixLQUFxQ0QsS0FBRyxxQkFBeEMsRUFBK0Qsa0JBQWdCQyxFQUFFLGNBQUYsQ0FBaEIsS0FBb0NELEtBQUcsbUJBQXZDLEVBQTRELDBCQUF3QkMsRUFBRSxjQUFGLENBQXhCLEtBQTRDRCxLQUFHLG9CQUEvQyxFQUFxRSxXQUFTQyxFQUFFLDhCQUFGLENBQVQsS0FBNkNELEtBQUcsYUFBaEQsRUFBK0QsVUFBUUMsRUFBRTRvRCxPQUFWLElBQW1CLGtCQUFnQjVvRCxFQUFFLHVDQUFGLENBQW5DLEdBQThFRCxLQUFHLHdCQUFqRixHQUEwRyxVQUFRQyxFQUFFNG9ELE9BQVYsS0FBb0I3b0QsS0FBRyxpQkFBdkIsQ0FBMUcsQ0FBb0osSUFBRyxzQkFBb0JDLEVBQUU0b0QsT0FBekIsRUFBaUM7QUFBQyxZQUFJN29ELElBQUVBLElBQUUsb0NBQVI7QUFBQSxZQUE2Q29vRCxJQUFFbm9ELEVBQUUyc0QsT0FBakQsQ0FBeUQsSUFBRzNzRCxFQUFFaXZDLEdBQUwsRUFBUztBQUFDLG9CQUFPanZDLEVBQUVpdkMsR0FBVCxHQUFjLEtBQUssS0FBTDtBQUFXbHZDLHlCQUM3Z0Isa0JBRDZnQixDQUN4ZixNQUFNLEtBQUssSUFBTDtBQUFVQSx5QkFBRyxvQkFBSCxDQUEwQixNQUFNO0FBQVFBLHlCQUFHLHlCQUFILENBRHVhLENBQ3hZQSxLQUFHLE9BQUg7QUFBVyxTQURtWCxNQUM5V0EsS0FBRyw4QkFBSCxDQUFvQyxJQUFHQyxFQUFFcXNELE9BQUwsRUFBYTtBQUFDLG9CQUFPcnNELEVBQUVxc0QsT0FBVCxHQUFrQixLQUFLLEtBQUw7QUFBV3RzRCx5QkFBRyxtQkFBSCxDQUF5QixNQUFNLEtBQUssSUFBTDtBQUFVQSx5QkFBRyxxQkFBSCxDQUEyQixNQUFNO0FBQVFBLHlCQUFHLDBCQUFILENBQS9HLENBQStJQSxLQUFHLE9BQUg7QUFBVyxTQUF4SyxNQUE2S0EsS0FBRywrQkFBSCxDQUFxQyxRQUFNQyxFQUFFLGVBQUYsQ0FBTixLQUEyQkQsS0FBRywyQkFBOUIsRUFBMkQsU0FBT0MsRUFBRSxlQUFGLENBQVAsS0FBNEJELEtBQUcseUJBQS9CLEVBQTBELFFBQU1DLEVBQUUsaUJBQUYsQ0FBTixLQUMxZUQsS0FBRyw2QkFEdWUsRUFDeGMsU0FBT0MsRUFBRSxpQkFBRixDQUFQLEtBQThCRCxLQUFHLDJCQUFqQyxFQUE4RCxRQUFNQyxFQUFFLG9CQUFGLENBQU4sS0FBZ0NELEtBQUcsZ0NBQW5DLEVBQXFFLFNBQU9DLEVBQUUsb0JBQUYsQ0FBUCxLQUFpQ0QsS0FBRyw4QkFBcEMsRUFBb0UsUUFBTUMsRUFBRSxvQkFBRixDQUFOLEtBQWdDRCxLQUFHLGdDQUFuQyxFQUFxRSxTQUFPQyxFQUFFLG9CQUFGLENBQVAsS0FBaUNELEtBQUcsOEJBQXBDLEVBQW9FLFFBQU1DLEVBQUUsb0JBQUYsQ0FBTixLQUFnQ0QsS0FBRyxnQ0FBbkMsRUFBcUUsU0FBT0MsRUFBRSxvQkFBRixDQUFQLEtBQWlDRCxLQUFHLDhCQUFwQztBQUNwYixnQkFBTUMsRUFBRSxxQkFBRixDQUFOLEtBQWlDRCxLQUFHLGlDQUFwQyxFQUF1RSxTQUFPQyxFQUFFLHFCQUFGLENBQVAsS0FBa0NELEtBQUcsK0JBQXJDLEVBQXNFLFFBQU1DLEVBQUUsa0JBQUYsQ0FBTixLQUE4QkQsS0FBRyw4QkFBakMsRUFBaUUsU0FBT0MsRUFBRSxrQkFBRixDQUFQLEtBQStCRCxLQUFHLDRCQUFsQyxFQUFnRSxRQUFNQyxFQUFFLGtCQUFGLENBQU4sS0FBOEJELEtBQUcsOEJBQWpDLEVBQWlFLFNBQU9DLEVBQUUsa0JBQUYsQ0FBUCxLQUErQkQsS0FBRyw0QkFBbEMsRUFBZ0UsUUFBTUMsRUFBRSxtQkFBRixDQUFOLEtBQStCRCxLQUFHLCtCQUFsQyxFQUFtRSxTQUFPQyxFQUFFLG1CQUFGLENBQVAsS0FBZ0NELEtBQzllLDZCQUQ4YyxFQUMvYSxVQUFRQyxFQUFFLG1CQUFGLENBQVIsS0FBaUNELEtBQUcsZ0NBQXBDLEVBQXNFLFNBQU9DLEVBQUUsbUJBQUYsQ0FBUCxLQUFnQ0QsS0FBRyw2QkFBbkMsRUFBa0UsVUFBUUMsRUFBRSxlQUFGLENBQVIsS0FBNkJELEtBQUcsNEJBQWhDLEVBQThELFNBQU9DLEVBQUUsZUFBRixDQUFQLEtBQTRCRCxLQUFHLDBCQUEvQixFQUEyRCxRQUFNQyxFQUFFLGNBQUYsQ0FBTixLQUEwQkQsS0FBRyx5QkFBN0IsRUFBd0QsU0FBT0MsRUFBRSxjQUFGLENBQVAsS0FBMkJELEtBQUcsd0JBQTlCLEVBQXdELFFBQU1DLEVBQUUsb0JBQUYsQ0FBTixLQUFnQ0QsS0FBRyxnQ0FBbkMsRUFBcUUsU0FBT0MsRUFBRSxvQkFBRixDQUFQLEtBQ3hkRCxLQUFHLDhCQURxZCxFQUNyYixVQUFRQyxFQUFFLGNBQUYsQ0FBUixLQUE0QkQsS0FBRywwQkFBL0IsRUFBMkQsU0FBT0MsRUFBRSxjQUFGLENBQVAsS0FBMkJELEtBQUcsd0JBQTlCLEVBQXdELFFBQU1DLEVBQUUsb0JBQUYsQ0FBTixLQUFnQ0QsS0FBRyxnQ0FBbkMsRUFBcUUsU0FBT0MsRUFBRSxvQkFBRixDQUFQLEtBQWlDRCxLQUFHLDhCQUFwQyxFQUFvRSxRQUFNQyxFQUFFLGNBQUYsQ0FBTixLQUEwQkQsS0FBRyx3QkFBN0IsRUFBdUQsU0FBT0MsRUFBRSxjQUFGLENBQVAsS0FBMkJELEtBQUcsd0JBQTlCLEVBQXdELFFBQU1DLEVBQUUsZ0JBQUYsQ0FBTixLQUE0QkQsS0FBRyw0QkFBL0IsRUFBNkQsU0FBT0MsRUFBRSxnQkFBRixDQUFQLEtBQTZCRCxLQUFHLDBCQUFoQztBQUM1YyxnQkFBTUMsRUFBRSxxQkFBRixDQUFOLEtBQWlDRCxLQUFHLDJCQUFwQyxFQUFpRSxTQUFPQyxFQUFFLHFCQUFGLENBQVAsS0FBa0NELEtBQUcseUJBQXJDLEVBQWdFLFFBQU1DLEVBQUUsdUJBQUYsQ0FBTixLQUFtQ0QsS0FBRyxtQ0FBdEMsRUFBMkUsU0FBT0MsRUFBRSx1QkFBRixDQUFQLEtBQW9DRCxLQUFHLG1DQUF2QyxFQUE0RSxRQUFNQyxFQUFFLDBCQUFGLENBQU4sS0FBc0NELEtBQUcsNkNBQXpDLEVBQXdGLFNBQU9DLEVBQUUsMEJBQUYsQ0FBUCxLQUF1Q0QsS0FBRywyQ0FBMUMsRUFBdUYsUUFBTUMsRUFBRSx1QkFBRixDQUFOLEtBQW1DRCxLQUFHLG1DQUF0QztBQUN2YyxpQkFBT0MsRUFBRSx1QkFBRixDQUFQLEtBQW9DRCxLQUFHLGlDQUF2QyxFQUEwRUMsRUFBRSxlQUFGLE1BQXFCRCxLQUFHLHFCQUFtQkMsRUFBRSxlQUFGLENBQW5CLEdBQXNDLE9BQTlELEVBQXVFQSxFQUFFLGlCQUFGLE1BQXVCRCxLQUFHLHVCQUFxQkMsRUFBRSxpQkFBRixDQUFyQixHQUEwQyxPQUFwRSxFQUE2RUEsRUFBRSxvQkFBRixNQUEwQkQsS0FBRywwQkFBd0JDLEVBQUUsb0JBQUYsQ0FBeEIsR0FBZ0QsT0FBN0UsRUFBc0ZBLEVBQUUsb0JBQUYsTUFBMEJELEtBQUcsMEJBQXdCQyxFQUFFLG9CQUFGLENBQXhCLEdBQWdELE9BQTdFLEVBQXNGQSxFQUFFLG9CQUFGLE1BQTBCRCxLQUFHLDBCQUF3QkMsRUFBRSxvQkFBRixDQUF4QixHQUFnRCxPQUE3RSxFQUFzRkEsRUFBRSxxQkFBRixNQUMvZEQsS0FBRywyQkFBeUJDLEVBQUUscUJBQUYsQ0FBekIsR0FBa0QsT0FEMGEsRUFDamFBLEVBQUUsa0JBQUYsTUFBd0JELEtBQUcsd0JBQXNCQyxFQUFFLGtCQUFGLENBQXRCLEdBQTRDLE9BQXZFLEVBQWdGQSxFQUFFLGtCQUFGLE1BQXdCRCxLQUFHLHdCQUFzQkMsRUFBRSxrQkFBRixDQUF0QixHQUE0QyxPQUF2RSxFQUFnRkEsRUFBRSxtQkFBRixNQUF5QkQsS0FBRyx5QkFBdUJDLEVBQUUsbUJBQUYsQ0FBdkIsR0FBOEMsT0FBMUUsRUFBbUZBLEVBQUUsbUJBQUYsTUFBeUJELEtBQUcseUJBQXVCQyxFQUFFLG1CQUFGLENBQXZCLEdBQThDLE9BQTFFLEVBQW1GQSxFQUFFLGVBQUYsTUFBcUJELEtBQUcsc0JBQW9CQyxFQUFFLGVBQUYsQ0FBcEIsR0FBdUMsT0FBL0QsRUFBd0VBLEVBQUUsY0FBRixNQUFvQkQsS0FBRyxvQkFDaGVDLEVBQUUsY0FBRixDQURnZSxHQUM5YyxPQUR1YixFQUM5YUEsRUFBRSxvQkFBRixNQUEwQkQsS0FBRywwQkFBd0JDLEVBQUUsZUFBRixDQUF4QixHQUEyQyxPQUF4RSxFQUFpRkEsRUFBRSxjQUFGLE1BQW9CRCxLQUFHLG9CQUFrQkMsRUFBRSxjQUFGLENBQWxCLEdBQW9DLE9BQTNELEVBQW9FQSxFQUFFLG9CQUFGLE1BQTBCRCxLQUFHLDBCQUF3QkMsRUFBRSxvQkFBRixDQUF4QixHQUFnRCxPQUE3RSxFQUFzRkEsRUFBRSxjQUFGLE1BQW9CRCxLQUFHLG9CQUFrQkMsRUFBRSxjQUFGLENBQWxCLEdBQW9DLE9BQTNELEVBQW9FQSxFQUFFLGdCQUFGLE1BQXNCRCxLQUFHLHNCQUFvQkMsRUFBRSxnQkFBRixDQUFwQixHQUF3QyxPQUFqRSxFQUEwRUEsRUFBRSxxQkFBRixNQUEyQkQsS0FBRyxxQkFBbUJDLEVBQUUscUJBQUYsQ0FBbkIsR0FBNEMsT0FBMUUsRUFBbUZBLEVBQUUsdUJBQUYsTUFDMWVELEtBQUcsNkJBQTJCQyxFQUFFLHVCQUFGLENBQTNCLEdBQXNELE9BRGliLEVBQ3hhQSxFQUFFLDBCQUFGLE1BQWdDRCxLQUFHLHVDQUFxQ0MsRUFBRSwwQkFBRixDQUFyQyxHQUFtRSxPQUF0RyxFQUErR0EsRUFBRSx1QkFBRixNQUE2QkQsS0FBRyw2QkFBMkJDLEVBQUUsdUJBQUYsQ0FBM0IsR0FBc0QsT0FBdEYsRUFBK0ZELEtBQUcsT0FBSCxDQUFXQyxFQUFFMnNELE9BQUYsS0FBWTVzRCxLQUFHLFdBQVNvb0QsQ0FBVCxHQUFXLE9BQTFCO0FBQW1DLGNBQU9ub0QsRUFBRTRzRCxNQUFULEtBQWtCN3NELEtBQUcsYUFBckIsRUFBb0MsSUFBR0MsRUFBRTZzRCxNQUFMLEVBQVksUUFBTzlzRCxLQUFHLGtCQUFILEVBQXdCQyxFQUFFNnNELE1BQWpDLEdBQXlDLEtBQUssT0FBTDtBQUFhOXNELGlCQUFHLGVBQUgsQ0FBcUIsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLDRCQUFILENBQWdDO0FBQ2hmLGFBQUssU0FBTDtBQUFlQSxpQkFBRywwQkFBSCxDQUFnQyxNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsV0FBSCxDQUFlLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRyxtQkFBSCxDQUF5QixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxvQkFBSCxDQUEwQixNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsZ0JBQUgsQ0FBc0IsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLGVBQUgsQ0FBcUIsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsY0FBSCxDQUFvQixNQUFNLEtBQUssb0JBQUw7QUFBMEJBLGlCQUFHLG1CQUFILENBQXlCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyx1QkFBSCxDQUE2QixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxrQkFBSCxDQUF3QixNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsbUJBQUg7QUFDamUsa0JBQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLG1CQUFILENBQXlCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLFNBQUgsQ0FGd1MsQ0FFM1IsSUFBR0MsRUFBRSxnQkFBRixDQUFILEVBQXVCLFFBQU9BLEVBQUUsZ0JBQUYsQ0FBUCxHQUE0QixLQUFLLE9BQUw7QUFBYUQsaUJBQUcsZUFBSCxDQUFxQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRywwQkFBSCxDQUFnQyxNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsZ0JBQUgsQ0FBc0IsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsY0FBSCxDQUFvQixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsZUFBSCxDQUFxQixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsaUJBQUgsQ0FBdUIsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGdCQUFILENBQTlULENBQW9WLElBQUcsa0JBQWdCQyxFQUFFNG9ELE9BQWxCLElBQTJCLHFCQUFtQjVvRCxFQUFFNG9ELE9BQW5ELEVBQTJEN29ELEtBQzFmLGdDQUQwZixDQUN6ZCxxQkFBbUJDLEVBQUU0b0QsT0FBckIsS0FBK0I3b0QsS0FBRyxnQ0FBbEMsRUFBb0UsSUFBR0MsRUFBRThzRCxlQUFMLEVBQXFCO0FBQUMsd0JBQWM5c0QsRUFBRThzRCxlQUFoQixJQUFpQyxZQUFVOXNELEVBQUUscUJBQUYsQ0FBM0MsS0FBc0VELEtBQUcsbUJBQXpFLEVBQThGLHFCQUFtQkMsRUFBRThzRCxlQUFyQixLQUF1Qy9zRCxLQUFHLHVCQUExQyxFQUFtRSxjQUFZQyxFQUFFOHNELGVBQWQsS0FBZ0Mvc0QsS0FBRyxzQkFBbkMsRUFBMkQsY0FBWUMsRUFBRThzRCxlQUFkLEtBQWdDL3NELEtBQUcsd0JBQW5DLEVBQTZELElBQUcscUJBQW1CQyxFQUFFOHNELGVBQXJCLElBQXNDLGdCQUFjOXNELEVBQUU4c0QsZUFBekQsRUFBeUUvc0QsS0FBRyw4QkFBSDtBQUM3ZCxxQkFBV0MsRUFBRThzRCxlQUFiLElBQThCLFlBQVU5c0QsRUFBRSxxQkFBRixDQUF4QyxLQUFtRUQsS0FBRywrQkFBdEUsRUFBdUcsYUFBV0MsRUFBRThzRCxlQUFiLElBQThCLFlBQVU5c0QsRUFBRSxxQkFBRixDQUF4QyxLQUFtRUQsS0FBRyxvQkFBdEUsRUFBNEYsZUFBYUMsRUFBRThzRCxlQUFmLEtBQWlDL3NELEtBQUcsd0JBQXBDLEVBQThELGFBQVdDLEVBQUU4c0QsZUFBYixLQUErQi9zRCxLQUFHLGFBQWxDO0FBQWlELE9BQUVndEQsT0FBRixLQUFZaHRELEtBQUcsK0JBQTZCQyxFQUFFK3NELE9BQS9CLEdBQXVDLE9BQXRELEVBQStELGFBQVcvc0QsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsdUJBQXZCLEVBQWdELFlBQVVDLEVBQUVrcUQsSUFBWixLQUFtQm5xRCxLQUFHLGtCQUF0QixFQUE0QyxlQUFhQyxFQUFFa3FELElBQWYsS0FBc0JucUQsS0FBRyx3QkFBekI7QUFDamQsaUJBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLGtCQUF2QixFQUEyQyxZQUFVQyxFQUFFa3FELElBQVosS0FBbUJucUQsS0FBRyw2QkFBdEIsRUFBeUQsZUFBYUMsRUFBRWtxRCxJQUFmLEtBQXNCbnFELEtBQUcsaUNBQXpCLEVBQThELFlBQVVDLEVBQUVrcUQsSUFBWixLQUFtQm5xRCxLQUFHLDRCQUF0QixFQUFzRCxtQkFBaUJDLEVBQUVrcUQsSUFBbkIsS0FBMEJucUQsS0FBRywwQkFBN0IsRUFBNkQsaUJBQWVDLEVBQUVrcUQsSUFBakIsS0FBd0JucUQsS0FBRyw4QkFBM0IsRUFBNkQsVUFBUUMsRUFBRWtxRCxJQUFWLEtBQWlCbnFELEtBQUcsb0JBQXBCLEVBQTBDLFdBQVNDLEVBQUVrcUQsSUFBWCxLQUFrQm5xRCxLQUFHLGlCQUFyQixFQUF3QyxVQUFRQyxFQUFFa3FELElBQVYsS0FBaUJucUQsS0FBRyxlQUFwQixFQUFxQyxpQkFBZUMsRUFBRWtxRCxJQUFqQixLQUF3Qm5xRCxLQUFHLDBCQUEzQjtBQUN6YyxpQkFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsOEJBQXZCLEVBQXlELGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLDRCQUF2QixFQUFxRCxXQUFTQyxFQUFFa3FELElBQVgsS0FBa0JucUQsS0FBRyx1QkFBckIsRUFBZ0QsYUFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsMkJBQXZCLEVBQXNELFNBQU9DLEVBQUVrcUQsSUFBVCxLQUFnQm5xRCxLQUFHLHlCQUFuQixFQUFnRCxVQUFRQyxFQUFFa3FELElBQVYsS0FBaUJucUQsS0FBRyxtQkFBcEIsRUFBeUMsc0JBQW9CQyxFQUFFa3FELElBQXRCLEtBQTZCbnFELEtBQUcsZUFBaEMsRUFBaUQsYUFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsNEJBQXZCLEVBQXFELFdBQVNDLEVBQUVrcUQsSUFBWCxLQUFrQm5xRCxLQUFHLFlBQXJCLEVBQW1DLFVBQVFDLEVBQUVrcUQsSUFBVixLQUFpQm5xRCxLQUFHLHNCQUFwQixFQUE0QyxpQkFBZUMsRUFBRWtxRCxJQUFqQixLQUNqZW5xRCxLQUFHLGlCQUQ4ZCxFQUMzYyxnQkFBY0MsRUFBRWtxRCxJQUFoQixLQUF1Qm5xRCxLQUFHLG9CQUExQixFQUFnRCxTQUFPQyxFQUFFa3FELElBQVQsS0FBZ0JucUQsS0FBRyx5QkFBbkIsRUFBOEMsY0FBWUMsRUFBRWtxRCxJQUFkLEtBQXFCbnFELEtBQUcsZUFBeEIsRUFBeUMsYUFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsaUJBQXZCLEVBQTBDLFlBQVVDLEVBQUVrcUQsSUFBWixLQUFtQm5xRCxLQUFHLHdCQUF0QixFQUFrRCxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxjQUF2QixFQUF1QyxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxlQUF2QixFQUF3QyxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxpQkFBdkIsRUFBMEMsV0FBU0MsRUFBRWtxRCxJQUFYLEtBQWtCbnFELEtBQUcsMkJBQXJCLEVBQW9ELG1CQUFpQkMsRUFBRWtxRCxJQUFuQixLQUEwQm5xRCxLQUFHLHFCQUE3QixFQUFvRCxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxlQUF2QjtBQUMzZCxtQkFBYUMsRUFBRWtxRCxJQUFmLEtBQXNCbnFELEtBQUcsOEJBQXpCLEVBQTJELGVBQWFDLEVBQUVrcUQsSUFBZixLQUFzQm5xRCxLQUFHLHdDQUF6QixFQUFtRSxlQUFhQyxFQUFFa3FELElBQWYsS0FBc0JucUQsS0FBRyxvQkFBekIsRUFBaUQsWUFBVUMsRUFBRWtxRCxJQUFaLEtBQW1CbnFELEtBQUcsbUJBQXRCLEVBQTJDLGlCQUFlQyxFQUFFa3FELElBQWpCLEtBQXdCbnFELEtBQUcsY0FBM0IsRUFBMkMsa0JBQWdCQyxFQUFFa3FELElBQWxCLEtBQXlCbnFELEtBQUcsc0JBQTVCLEVBQXdELGVBQWFDLEVBQUVrcUQsSUFBZixLQUFzQm5xRCxLQUFHLHVCQUF6QixFQUFvRCxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxtQkFBdkIsRUFBNEMsb0JBQWtCQyxFQUFFa3FELElBQXBCLEtBQTJCbnFELEtBQUcsc0JBQTlCLEVBQXdELGNBQVlDLEVBQUVrcUQsSUFBZCxLQUFxQm5xRCxLQUFHLGNBQXhCO0FBQ3JkLGdCQUFVQyxFQUFFa3FELElBQVosS0FBbUJucUQsS0FBRyxvQkFBdEIsRUFBOEMseUJBQXVCQyxFQUFFa3FELElBQXpCLEtBQWdDbnFELEtBQUcsbUNBQW5DLEVBQTBFLGtCQUFnQkMsRUFBRWtxRCxJQUFsQixLQUF5Qm5xRCxLQUFHLDhCQUE1QixFQUE0RCxZQUFVQyxFQUFFa3FELElBQVosS0FBbUJucUQsS0FBRyxvQkFBdEIsRUFBNEMsYUFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsd0JBQXZCLEVBQW1ELGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLDBCQUF2QixFQUFxRCxtQkFBaUJDLEVBQUVrcUQsSUFBbkIsS0FBMEJucUQsS0FBRyxtQkFBN0IsRUFBa0QsU0FBT0MsRUFBRWtxRCxJQUFULEtBQWdCbnFELEtBQUcsNkNBQW5CLEVBQXNFLGNBQVlDLEVBQUVrcUQsSUFBZCxLQUFxQm5xRCxLQUFHLGVBQXhCLEVBQXlDLGNBQ3plQyxFQUFFa3FELElBRHVlLEtBQ2hlbnFELEtBQUcsaUJBRDZkLEVBQzFjLGVBQWFDLEVBQUVrcUQsSUFBZixLQUFzQm5xRCxLQUFHLDBDQUF6QixFQUFxRSxlQUFhQyxFQUFFa3FELElBQWYsS0FBc0JucUQsS0FBRyx5QkFBekIsRUFBc0QsV0FBU0MsRUFBRWtxRCxJQUFYLEtBQWtCbnFELEtBQUcsNEJBQXJCLEVBQXFELFdBQVNDLEVBQUVrcUQsSUFBWCxLQUFrQm5xRCxLQUFHLHFCQUFyQixFQUE0QyxjQUFZQyxFQUFFa3FELElBQWQsS0FBcUJucUQsS0FBRyxzQkFBeEIsRUFBa0QsU0FBT0MsRUFBRWtxRCxJQUFULEtBQWdCbnFELEtBQUcsdUNBQW5CLEVBQThELGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLHdCQUF2QixFQUFtRCxZQUFVQyxFQUFFa3FELElBQVosS0FBbUJucUQsS0FBRyx3QkFBdEIsRUFBZ0QsYUFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsOEJBQXZCO0FBQzljLG1CQUFhQyxFQUFFa3FELElBQWYsS0FBc0JucUQsS0FBRyxxQ0FBekIsRUFBa0UseUJBQXVCQyxFQUFFa3FELElBQXpCLEtBQWdDbnFELEtBQUcsd0NBQW5DLEVBQTZFLGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLGdCQUF2QixFQUEyQyxrQkFBZ0JDLEVBQUVrcUQsSUFBbEIsS0FBeUJucUQsS0FBRyxnQ0FBNUIsRUFBZ0UsY0FBWUMsRUFBRWtxRCxJQUFkLEtBQXFCbnFELEtBQUcsOEJBQXhCLEVBQTBELGlCQUFlQyxFQUFFa3FELElBQWpCLEtBQXdCbnFELEtBQUcsc0JBQTNCLEVBQW1ELFVBQVFDLEVBQUVrcUQsSUFBVixLQUFpQm5xRCxLQUFHLDBCQUFwQixFQUFrRCxrQkFBZ0JDLEVBQUVrcUQsSUFBbEIsS0FBeUJucUQsS0FBRyxpQkFBNUIsRUFBK0MsbUJBQWlCQyxFQUFFa3FELElBQW5CLEtBQTBCbnFELEtBQUcsZ0NBQTdCO0FBQ3hjLHdCQUFrQkMsRUFBRWtxRCxJQUFwQixLQUEyQm5xRCxLQUFHLGlDQUE5QixFQUFtRSxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyw2QkFBdkIsRUFBd0QsU0FBT0MsRUFBRWtxRCxJQUFULEtBQWdCbnFELEtBQUcsZUFBbkIsRUFBb0MsZ0JBQWNDLEVBQUVrcUQsSUFBaEIsS0FBdUJucUQsS0FBRyxvQkFBMUIsRUFBZ0QsZUFBYUMsRUFBRWtxRCxJQUFmLEtBQXNCbnFELEtBQUcsK0JBQXpCLEVBQTRELElBQUcsVUFBUUMsRUFBRWtxRCxJQUFWLElBQWdCLGtCQUFnQmxxRCxFQUFFa3FELElBQXJDLEVBQTBDbnFELEtBQUcseUJBQUgsQ0FBK0IsYUFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsMkJBQXZCLEVBQXNELGlCQUFlQyxFQUFFa3FELElBQWpCLEtBQXdCbnFELEtBQUcsOEJBQTNCLEVBQTZELGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLHdCQUF2QjtBQUN2YyxvQkFBY0MsRUFBRWtxRCxJQUFoQixLQUF1Qm5xRCxLQUFHLDBCQUExQixFQUF3RCxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyw2QkFBdkIsRUFBc0QsWUFBVUMsRUFBRWtxRCxJQUFaLEtBQW1CbnFELEtBQUcsdUJBQXRCLEVBQWlELFdBQVNDLEVBQUVrcUQsSUFBWCxLQUFrQm5xRCxLQUFHLHVCQUFyQixFQUE4QyxrQkFBZ0JDLEVBQUVrcUQsSUFBbEIsS0FBeUJucUQsS0FBRyx3QkFBNUIsRUFBc0QsU0FBT0MsRUFBRWtxRCxJQUFULEtBQWdCbnFELEtBQUcsaUJBQW5CLEVBQXNDLFdBQVNDLEVBQUVrcUQsSUFBWCxLQUFrQm5xRCxLQUFHLG9CQUFyQixFQUEyQyxXQUFTQyxFQUFFa3FELElBQVgsS0FBa0JucUQsS0FBRyw4QkFBckIsRUFBdUQsV0FBU0MsRUFBRWtxRCxJQUFYLEtBQWtCbnFELEtBQUcsdUJBQXJCLEVBQWdELHNCQUFvQkMsRUFBRWtxRCxJQUF0QixLQUE2Qm5xRCxLQUFHLGdCQUFoQyxFQUFrRCxXQUM3ZUMsRUFBRWtxRCxJQUQyZSxLQUNwZW5xRCxLQUFHLDBCQURpZSxFQUNuYyxXQUFTQyxFQUFFa3FELElBQVgsS0FBa0JucUQsS0FBRyxnQkFBckIsRUFBdUMsaUJBQWVDLEVBQUVrcUQsSUFBakIsS0FBd0JucUQsS0FBRyxrQkFBM0IsRUFBK0MsV0FBU0MsRUFBRWtxRCxJQUFYLEtBQWtCbnFELEtBQUcsWUFBckIsRUFBbUMsV0FBU0MsRUFBRWtxRCxJQUFYLEtBQWtCbnFELEtBQUcsbUJBQXJCLEVBQTBDLFVBQVFDLEVBQUVrcUQsSUFBVixLQUFpQm5xRCxLQUFHLGdEQUFwQixFQUFzRSxlQUFhQyxFQUFFa3FELElBQWYsS0FBc0JucUQsS0FBRyx5QkFBekIsRUFBc0QsZ0JBQWNDLEVBQUVrcUQsSUFBaEIsS0FBdUJucUQsS0FBRyxtQkFBMUIsRUFBK0MsWUFBVUMsRUFBRWtxRCxJQUFaLEtBQW1CbnFELEtBQUcsaUJBQXRCLEVBQXlDLGNBQVlDLEVBQUVrcUQsSUFBZCxLQUFxQm5xRCxLQUFHLGtCQUF4QixFQUE0Qyx1QkFBcUJDLEVBQUVrcUQsSUFBdkIsS0FBOEJucUQsS0FBRyw2QkFBakM7QUFDN2MsaUJBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLGdDQUF2QixFQUEyRCxrQkFBZ0JDLEVBQUVrcUQsSUFBbEIsS0FBeUJucUQsS0FBRywwQkFBNUIsRUFBd0Qsa0JBQWdCQyxFQUFFa3FELElBQWxCLEtBQXlCbnFELEtBQUcsb0JBQTVCLEVBQWtELGdCQUFjQyxFQUFFa3FELElBQWhCLEtBQXVCbnFELEtBQUcsOEJBQTFCLEVBQTBELFNBQU9DLEVBQUVrcUQsSUFBVCxLQUFnQm5xRCxLQUFHLDRCQUFuQixFQUFpRCxrQkFBZ0JDLEVBQUVrcUQsSUFBbEIsS0FBeUJucUQsS0FBRyxnQkFBNUIsRUFBOEMsY0FBWUMsRUFBRWtxRCxJQUFkLEtBQXFCbnFELEtBQUcsMkJBQXhCLEVBQXVELFlBQVVDLEVBQUVrcUQsSUFBWixLQUFtQm5xRCxLQUFHLHlCQUF0QixFQUFtRCxjQUFZQyxFQUFFa3FELElBQWQsS0FBcUJucUQsS0FBRyxlQUF4QixFQUF5QyxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxpQkFBdkI7QUFDamQsY0FBUUMsRUFBRWtxRCxJQUFWLEtBQWlCbnFELEtBQUcsaUJBQXBCLEVBQXVDLG1CQUFpQkMsRUFBRWtxRCxJQUFuQixLQUEwQm5xRCxLQUFHLG1CQUE3QixFQUFvRCxpQkFBZUMsRUFBRWtxRCxJQUFqQixLQUF3Qm5xRCxLQUFHLGlCQUEzQixFQUE4QyxZQUFVQyxFQUFFa3FELElBQVosS0FBbUJucUQsS0FBRywrQkFBdEIsRUFBdUQsYUFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsa0JBQXZCLEVBQTJDLGFBQVdDLEVBQUVndEQsUUFBYixLQUF3Qmp0RCxLQUFHLHlCQUEzQixFQUFzRCxVQUFRQyxFQUFFaXRELEdBQVYsS0FBZ0JsdEQsS0FBRyxpQkFBbkIsRUFBc0MsMkJBQXlCQyxFQUFFa3RELEtBQTNCLEtBQW1DbnRELEtBQUcsdUJBQXRDLEVBQStELGtCQUFnQkMsRUFBRWt0RCxLQUFsQixLQUEwQm50RCxLQUFHLGlCQUE3QixFQUFnRCxlQUFhQyxFQUFFa3RELEtBQWYsS0FBdUJudEQsS0FBRyxZQUExQixFQUF3QyxnQkFBY0MsRUFBRWt0RCxLQUFoQixLQUM3ZG50RCxLQUFHLGNBRDBkLEVBQzFjLGFBQVdDLEVBQUVrdEQsS0FBYixLQUFxQm50RCxLQUFHLGVBQXhCLEVBQXlDLFNBQU9DLEVBQUVtdEQsWUFBVCxLQUF3QnB0RCxLQUFHLG1CQUEzQixFQUFnRCxpQkFBZUMsRUFBRWt0RCxLQUFqQixLQUF5Qm50RCxLQUFHLGlCQUE1QixFQUErQyxnQkFBY0MsRUFBRWt0RCxLQUFoQixLQUF3Qm50RCxLQUFHLGlCQUEzQixFQUE4QyxhQUFXQyxFQUFFa3RELEtBQWIsS0FBcUJudEQsS0FBRyxjQUF4QixFQUF3QyxlQUFhQyxFQUFFa3RELEtBQWYsS0FBdUJudEQsS0FBRyxxQ0FBMUIsRUFBaUUsa0JBQWdCQyxFQUFFa3RELEtBQWxCLEtBQTBCbnRELEtBQUcsbUJBQTdCLEVBQWtELGFBQVdDLEVBQUVrdEQsS0FBYixLQUFxQm50RCxLQUFHLGVBQXhCLEVBQXlDLGdCQUFjQyxFQUFFa3RELEtBQWhCLEtBQXdCbnRELEtBQUcsZ0JBQTNCLEVBQTZDLG1CQUFpQkMsRUFBRWt0RCxLQUFuQixLQUEyQm50RCxLQUFHLGlCQUE5QixFQUFpRCxnQkFDNWVDLEVBQUVrdEQsS0FEMGUsS0FDbGVudEQsS0FBRyxnQkFEK2QsRUFDN2MsaUJBQWVDLEVBQUVrdEQsS0FBakIsS0FBeUJudEQsS0FBRyxpQkFBNUIsRUFBK0MsY0FBWUMsRUFBRWt0RCxLQUFkLEtBQXNCbnRELEtBQUcsbUNBQXpCLEVBQThELGNBQVlDLEVBQUVrdEQsS0FBZCxLQUFzQm50RCxLQUFHLGVBQXpCLEVBQTBDLGdCQUFjQyxFQUFFa3RELEtBQWhCLEtBQXdCbnRELEtBQUcscUJBQTNCLEVBQWtELFVBQVFDLEVBQUVrdEQsS0FBVixLQUFrQm50RCxLQUFHLDJFQUFyQixFQUF3RyxnQkFBY0MsRUFBRWt0RCxLQUFoQixLQUF3Qm50RCxLQUFHLHlDQUEzQixFQUE0RSxjQUFZQyxFQUFFa3RELEtBQWQsS0FBc0JudEQsS0FBRyxxQ0FBekIsRUFBZ0UsZ0JBQWNDLEVBQUVrdEQsS0FBaEIsS0FBd0JudEQsS0FDaGYseUJBRHdkLEVBQzNiLGVBQWFDLEVBQUVrdEQsS0FBZixLQUF1Qm50RCxLQUFHLHlCQUExQixFQUF1RCx3QkFBc0JDLEVBQUVrdEQsS0FBeEIsS0FBZ0NudEQsS0FBRyxrQkFBbkMsRUFBdUQsY0FBWUMsRUFBRWt0RCxLQUFkLEtBQXNCbnRELEtBQUcsY0FBekIsRUFBeUMsYUFBV0MsRUFBRWt0RCxLQUFiLEtBQXFCbnRELEtBQUcsWUFBeEIsRUFBc0MsbUJBQWlCQyxFQUFFa3RELEtBQW5CLEtBQTJCbnRELEtBQUcsc0JBQTlCLEVBQXNELGtCQUFnQkMsRUFBRWt0RCxLQUFsQixLQUEwQm50RCxLQUFHLGVBQTdCLEVBQThDLDZCQUEyQkMsRUFBRWt0RCxLQUE3QixLQUFxQ250RCxLQUFHLGdCQUF4QyxFQUEwRCxlQUFhQyxFQUFFa3RELEtBQWYsS0FBdUJudEQsS0FBRyxvQ0FBMUIsRUFBZ0UsYUFBV0MsRUFBRWt0RCxLQUFiLEtBQXFCbnRELEtBQUcsaUVBQXhCO0FBQzViLGlCQUFXQyxFQUFFa3RELEtBQWIsS0FBcUJudEQsS0FBRyxrQkFBeEIsRUFBOEMsWUFBVUMsRUFBRWt0RCxLQUFaLEtBQW9CbnRELEtBQUcsaURBQXZCLEVBQTRFLFlBQVVDLEVBQUVrdEQsS0FBWixLQUFvQm50RCxLQUFHLGlCQUF2QixFQUEwQyxhQUFXQyxFQUFFa3RELEtBQWIsS0FBcUJudEQsS0FBRyxjQUF4QixFQUF3QyxlQUFhQyxFQUFFa3RELEtBQWYsS0FBdUJudEQsS0FBRyxrQkFBMUIsRUFBOEMsYUFBV0MsRUFBRWt0RCxLQUFiLEtBQXFCbnRELEtBQUcsK0JBQXhCLEVBQXlELGdCQUFjQyxFQUFFa3RELEtBQWhCLEtBQXdCbnRELEtBQUcscUJBQTNCLEVBQW9ELGNBQVlDLEVBQUVrdEQsS0FBZCxLQUFzQm50RCxLQUFHLGdCQUF6QixFQUEyQyxlQUFhQyxFQUFFa3RELEtBQWYsS0FBdUJudEQsS0FBRyxrQkFBMUIsRUFBOEMsbUJBQWlCQyxFQUFFa3RELEtBQW5CLEtBQTJCbnRELEtBQUcsMEJBQTlCO0FBQ2hjLG9CQUFjQyxFQUFFa3RELEtBQWhCLEtBQXdCbnRELEtBQUcsZ0JBQTNCLEVBQTZDLG9CQUFrQkMsRUFBRWt0RCxLQUFwQixLQUE0Qm50RCxLQUFHLGtDQUEvQixFQUFtRSxXQUFTQyxFQUFFa3RELEtBQVgsS0FBbUJudEQsS0FBRyx1QkFBdEIsRUFBK0MsWUFBVUMsRUFBRWt0RCxLQUFaLEtBQW9CbnRELEtBQUcsZ0JBQXZCLEVBQXlDLFdBQVNDLEVBQUVrdEQsS0FBWCxLQUFtQm50RCxLQUFHLHlDQUF0QixFQUFpRSxjQUFZQyxFQUFFa3RELEtBQWQsS0FBc0JudEQsS0FBRyx5QkFBekIsRUFBb0QsaUJBQWVDLEVBQUVrdEQsS0FBakIsS0FBeUJudEQsS0FBRyxnQkFBNUIsRUFBOEMsZ0JBQWNDLEVBQUVrdEQsS0FBaEIsS0FBd0JudEQsS0FBRyxnQkFBM0IsRUFBNkMseUJBQXVCQyxFQUFFa3RELEtBQXpCLEtBQWlDbnRELEtBQUcsbUJBQXBDLEVBQXlELGNBQVlDLEVBQUVvdEQsTUFBZCxLQUF1QnJ0RCxLQUFHLHVCQUExQjtBQUNqZCxvQkFBY0MsRUFBRTRvRCxPQUFoQixLQUEwQjdvRCxLQUFHLGtCQUE3QixFQUFpRCxnQkFBY0MsRUFBRXNyRCxPQUFoQixLQUEwQnZyRCxLQUFHLHFCQUE3QixFQUFvRCxXQUFTQyxFQUFFc3JELE9BQVgsS0FBcUJ2ckQsS0FBRyxvQ0FBeEIsRUFBZ0UsZ0JBQWNDLEVBQUVzckQsT0FBaEIsS0FBMEJ2ckQsS0FBRywyQkFBN0IsRUFBMEQsZ0JBQWNDLEVBQUVzckQsT0FBaEIsS0FBMEJ2ckQsS0FBRyxzQkFBN0IsRUFBcUQsa0JBQWdCQyxFQUFFc3JELE9BQWxCLEtBQTRCdnJELEtBQUcsZ0JBQS9CLEVBQWlELGNBQVlDLEVBQUVzckQsT0FBZCxLQUF3QnZyRCxLQUFHLHFCQUEzQixFQUFvRCxjQUFZQyxFQUFFc3JELE9BQWQsS0FBd0J2ckQsS0FBRyxtQ0FBM0IsRUFBZ0UsWUFBVUMsRUFBRXNyRCxPQUFaLEtBQXNCdnJELEtBQUcsWUFBekIsRUFBdUMsYUFBV0MsRUFBRXNyRCxPQUFiLEtBQy9kdnJELEtBQUcscUJBRDRkLEVBQ3JjLFdBQVNDLEVBQUVzckQsT0FBWCxLQUFxQnZyRCxLQUFHLHNCQUF4QixFQUFrRCxnQkFBY0MsRUFBRXNyRCxPQUFoQixLQUEwQnZyRCxLQUFHLHdCQUE3QixFQUF1RCw2QkFBMkJDLEVBQUVzckQsT0FBN0IsS0FBdUN2ckQsS0FBRywrQkFBMUMsRUFBK0UsZ0JBQWNDLEVBQUVzckQsT0FBaEIsS0FBMEJ2ckQsS0FBRywrQkFBN0IsRUFBOEQsY0FBWUMsRUFBRXNyRCxPQUFkLEtBQXdCdnJELEtBQUcscUJBQTNCLEVBQW9ELFlBQVVDLEVBQUVzckQsT0FBWixLQUFzQnZyRCxLQUFHLHVCQUF6QixFQUFzRCxhQUFXQyxFQUFFc3JELE9BQWIsS0FBdUJ2ckQsS0FBRyxtQkFBMUIsRUFBK0MsbUJBQWlCQyxFQUFFc3JELE9BQW5CLEtBQTZCdnJELEtBQUcsaUJBQWhDLEVBQW1ELFlBQVVDLEVBQUVzckQsT0FBWixLQUFzQnZyRCxLQUMvZSwwQkFEeWQsRUFDN2IsYUFBV0MsRUFBRXNyRCxPQUFiLEtBQXVCdnJELEtBQUcscUNBQTFCLEVBQW1FLHVCQUFxQkMsRUFBRXNyRCxPQUF2QixLQUFpQ3ZyRCxLQUFHLHNCQUFwQyxFQUE0RCxlQUFhQyxFQUFFc3JELE9BQWYsS0FBeUJ2ckQsS0FBRyxzQkFBNUIsRUFBb0QsaUJBQWVDLEVBQUVzckQsT0FBakIsS0FBMkJ2ckQsS0FBRyxpQkFBOUIsRUFBaUQsWUFBVUMsRUFBRXNyRCxPQUFaLEtBQXNCdnJELEtBQUcsc0JBQXpCLEVBQWlELGVBQWFDLEVBQUVzckQsT0FBZixLQUF5QnZyRCxLQUFHLGFBQTVCLEVBQTJDLG1CQUFpQkMsRUFBRXNyRCxPQUFuQixLQUE2QnZyRCxLQUFHLHVCQUFoQyxFQUE2RCxjQUFZQyxFQUFFc3JELE9BQWQsS0FBd0J2ckQsS0FBRyxlQUEzQixFQUE0QyxVQUFRQyxFQUFFc3JELE9BQVYsS0FBb0J2ckQsS0FBRyxvQkFBdkIsRUFBNkMsZUFDdGZDLEVBQUVzckQsT0FEb2YsS0FDMWV2ckQsS0FBRyxhQUR1ZSxFQUN4ZCxvQkFBa0JDLEVBQUVzckQsT0FBcEIsS0FBOEJ2ckQsS0FBRyx3Q0FBakMsRUFBNkUsU0FBT0MsRUFBRXF0RCxRQUFULEtBQW9CdHRELEtBQUcsNkJBQXZCLEVBQXdELFVBQVFDLEVBQUVxdEQsUUFBVixLQUFxQnR0RCxLQUFHLG1CQUF4QixFQUE2QyxhQUFXQyxFQUFFcXRELFFBQWIsS0FBd0J0dEQsS0FBRyx1REFBM0IsRUFBc0YsVUFBUUMsRUFBRXF0RCxRQUFWLEtBQXFCdHRELEtBQUcsOEJBQXhCLEVBQTBELGVBQWFDLEVBQUVxdEQsUUFBZixLQUEwQnR0RCxLQUFHLGlCQUE3QixFQUFnRCxTQUFPQyxFQUFFc3RELE9BQVQsS0FBbUJ2dEQsS0FBRyxZQUF0QixFQUFvQyxXQUFTQyxFQUFFc3RELE9BQVgsS0FBcUJ2dEQsS0FBRyxhQUF4QixFQUF1QyxVQUFRQyxFQUFFc3RELE9BQVYsS0FBb0J2dEQsS0FBRywwQkFBdkI7QUFDM2QsaUJBQVdDLEVBQUVzdEQsT0FBYixLQUF1QnZ0RCxLQUFHLGdCQUExQixFQUE0QyxtQkFBaUJDLEVBQUVzdEQsT0FBbkIsS0FBNkJ2dEQsS0FBRyxlQUFoQyxFQUFtRCxZQUFVQyxFQUFFc3RELE9BQVosS0FBc0J2dEQsS0FBRywyQkFBekIsRUFBd0QsZUFBYUMsRUFBRXN0RCxPQUFmLEtBQXlCdnRELEtBQUcsaUJBQTVCLEVBQStDLFdBQVNDLEVBQUVzdEQsT0FBWCxLQUFxQnZ0RCxLQUFHLCtCQUF4QixFQUF5RCxlQUFhQyxFQUFFc3RELE9BQWYsS0FBeUJ2dEQsS0FBRyw4QkFBNUIsRUFBNEQsYUFBV0MsRUFBRXN0RCxPQUFiLEtBQXVCdnRELEtBQUcsbUJBQTFCLEVBQStDLFVBQVFDLEVBQUVzdEQsT0FBVixLQUFvQnZ0RCxLQUFHLE1BQXZCLEVBQStCLFVBQVFDLEVBQUVzdEQsT0FBVixJQUFtQixTQUFPdHRELEVBQUUsY0FBRixDQUExQixLQUE4Q0QsS0FBRyxrQkFBakQsRUFBcUUsY0FBWUMsRUFBRXN0RCxPQUFkLEtBQXdCdnRELEtBQUcsd0JBQTNCO0FBQzljLGVBQVNDLEVBQUVzdEQsT0FBWCxLQUFxQnZ0RCxLQUFHLFlBQXhCLEVBQXNDLFVBQVFDLEVBQUVzdEQsT0FBVixLQUFvQnZ0RCxLQUFHLGVBQXZCLEVBQXdDLGVBQWFDLEVBQUVzdEQsT0FBZixLQUF5QnZ0RCxLQUFHLDhCQUE1QixFQUE0RCxVQUFRQyxFQUFFc3RELE9BQVYsS0FBb0J2dEQsS0FBRyx1Q0FBdkIsRUFBZ0UsZUFBYUMsRUFBRXN0RCxPQUFmLEtBQXlCdnRELEtBQUcsbUJBQTVCLEVBQWlELFdBQVNDLEVBQUVzdEQsT0FBWCxLQUFxQnZ0RCxLQUFHLDBCQUF4QixFQUFvRCxhQUFXQyxFQUFFc3RELE9BQWIsS0FBdUJ2dEQsS0FBRyxhQUExQixFQUF5QyxZQUFVQyxFQUFFc3RELE9BQVosS0FBc0J2dEQsS0FBRyxVQUF6QixFQUFxQyxXQUFTQyxFQUFFc3RELE9BQVgsS0FBcUJ2dEQsS0FBRyxlQUF4QixFQUF5QyxTQUFPQyxFQUFFc3RELE9BQVQsS0FBbUJ2dEQsS0FBRyxXQUF0QixFQUFtQyxtQkFBaUJDLEVBQUV1dEQsUUFBbkIsS0FBOEJ4dEQsS0FBRyxtQkFBakM7QUFDemMsd0JBQWtCQyxFQUFFdXRELFFBQXBCLEtBQStCeHRELEtBQUcsbUJBQWxDLEVBQXVELFNBQU9DLEVBQUV3dEQsYUFBVCxLQUF5Qnp0RCxLQUFHLGtCQUE1QixFQUFnRCxlQUFhQyxFQUFFMHFELFFBQWYsS0FBMEIzcUQsS0FBRyxpQkFBN0IsRUFBZ0QsV0FBU0MsRUFBRTBxRCxRQUFYLEtBQXNCM3FELEtBQUcsWUFBekIsRUFBdUMsV0FBU0MsRUFBRXl0RCxLQUFYLEtBQW1CMXRELEtBQUcsWUFBdEIsRUFBb0MsV0FBU0MsRUFBRTBxRCxRQUFYLEtBQXNCM3FELEtBQUcsWUFBekIsRUFBdUMsV0FBU0MsRUFBRXl0RCxLQUFYLEtBQW1CMXRELEtBQUcsWUFBdEIsRUFBb0MsZUFBYUMsRUFBRTBxRCxRQUFmLEtBQTBCM3FELEtBQUcsWUFBN0IsRUFBMkMsV0FBU0MsRUFBRTBxRCxRQUFYLEtBQXNCM3FELEtBQUcsNkJBQXpCLEVBQTBELFlBQVVDLEVBQUUwcUQsUUFBWixLQUF1QjNxRCxLQUFHLFdBQTFCLEVBQXVDLFdBQVNDLEVBQUUwdEQsS0FBWCxLQUFtQjN0RCxLQUFHLHdCQUF0QixFQUFrRCxtQkFDM2VDLEVBQUUwcUQsUUFEeWUsS0FDOWQzcUQsS0FBRyxrQkFEMmQsRUFDdmMsSUFBRyxVQUFRQyxFQUFFeXRELEtBQVYsSUFBaUIsV0FBU3p0RCxFQUFFc3RELE9BQS9CLEVBQXVDdnRELEtBQUcsVUFBSCxDQUFjLFVBQVFDLEVBQUV5dEQsS0FBVixLQUFrQjF0RCxLQUFHLG1CQUFyQixFQUEwQyxZQUFVQyxFQUFFeXRELEtBQVosS0FBb0IxdEQsS0FBRyxhQUF2QixFQUFzQyxVQUFRQyxFQUFFeXRELEtBQVYsS0FBa0IxdEQsS0FBRyxZQUFyQixFQUFtQyxlQUFhQyxFQUFFeXRELEtBQWYsS0FBdUIxdEQsS0FBRyxzQkFBMUIsRUFBa0QsV0FBU0MsRUFBRXl0RCxLQUFYLEtBQW1CMXRELEtBQUcsbUJBQXRCLEVBQTJDLFVBQVFDLEVBQUV5dEQsS0FBVixLQUFrQjF0RCxLQUFHLHNCQUFyQixFQUE2QyxVQUFRQyxFQUFFeXRELEtBQVYsS0FBa0IxdEQsS0FBRyxpQkFBckIsRUFBd0MsZ0JBQWNDLEVBQUV5dEQsS0FBaEIsS0FBd0IxdEQsS0FBRyxvQkFBM0IsRUFBbUQsV0FBU0MsRUFBRTJ0RCxPQUFYLElBQW9CLFVBQVEzdEQsRUFBRTR0RCxRQUE5QixJQUF3QyxtQkFBaUI1dEQsRUFBRSx1Q0FBRixDQUF6RCxHQUM3YUQsS0FBRyxxQkFEMGEsR0FDcFosVUFBUUMsRUFBRTR0RCxRQUFWLEtBQXFCN3RELEtBQUcsbUJBQXhCLENBRG9aLENBQ3ZXLGNBQVlDLEVBQUUwcUQsUUFBZCxLQUF5QjNxRCxLQUFHLG1CQUE1QixFQUFpRCxhQUFXQyxFQUFFLGNBQUYsQ0FBWCxJQUE4QixhQUFXQSxFQUFFLDBCQUFGLENBQXpDLEtBQXlFRCxLQUFHLGFBQTVFLEVBQTJGLFVBQVFDLEVBQUUwdEQsS0FBVixLQUFrQjN0RCxLQUFHLGdCQUFyQixFQUF1QyxZQUFVQyxFQUFFMHRELEtBQVosS0FBb0IzdEQsS0FBRyxnQkFBdkIsRUFBeUMsSUFBRyxTQUFPQyxFQUFFNnRELE1BQVQsSUFBaUIsaUJBQWU3dEQsRUFBRTZvRCxPQUFyQyxFQUE2QzlvRCxLQUFHLGdCQUFILENBQTdDLEtBQXNFLElBQUcsaUJBQWVDLEVBQUU2b0QsT0FBakIsSUFBMEIsaUJBQWU3b0QsRUFBRTZvRCxPQUE5QyxFQUFzRCxJQUFHN29ELEVBQUU4dEQsV0FBTCxFQUFpQixRQUFPOXRELEVBQUU4dEQsV0FBVCxHQUFzQixLQUFLLE9BQUw7QUFBYS90RCxpQkFBRyx3QkFBSCxDQUE0QixNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFDL2Ysa0NBRCtmLENBQzVkLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLDJCQUFILENBQStCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRywyQkFBSCxDQUErQixNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsaUJBQUgsQ0FBcUIsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGdCQUFILENBQW9CLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRyxzQkFBSCxDQUEwQixNQUFNLEtBQUssZUFBTDtBQUFxQkEsaUJBQUcsc0JBQUgsQ0FBMEIsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLGlCQUFHLDBCQUFILENBQThCLE1BQU07QUFBUUEsaUJBQUcsd0JBQUgsQ0FEOEIsQ0FBakIsTUFDb0JBLEtBQUcsd0JBQUgsQ0FBNEIsYUFBV0MsRUFBRTB0RCxLQUFiLEtBQXFCM3RELEtBQUcsbUJBQXhCO0FBQ2xkLGFBQU9DLEVBQUUwdEQsS0FBVCxLQUFpQjN0RCxLQUFHLHdCQUFwQixFQUE4QyxXQUFTQyxFQUFFMHRELEtBQVgsS0FBbUIzdEQsS0FBRyxvQkFBdEIsRUFBNEMsZUFBYUMsRUFBRXN0RCxPQUFmLEtBQXlCdnRELEtBQUcscUJBQTVCLEVBQXFELFdBQVNDLEVBQUVzdEQsT0FBWCxLQUFxQnZ0RCxLQUFHLGFBQXhCLEVBQXVDLFNBQU9DLEVBQUUwcUQsUUFBVCxLQUFvQjNxRCxLQUFHLGVBQXZCLEVBQXdDLFVBQVFDLEVBQUUwcUQsUUFBVixLQUFxQjNxRCxLQUFHLFdBQXhCLEVBQXFDLGVBQWFDLEVBQUUwcUQsUUFBZixLQUEwQjNxRCxLQUFHLG1CQUE3QixFQUFrRCxTQUFPQyxFQUFFK3RELElBQVQsS0FBZ0JodUQsS0FBRyxlQUFuQixFQUFvQyxpQkFBZUMsRUFBRTBxRCxRQUFqQixLQUE0QjNxRCxLQUFHLFdBQS9CLEVBQTRDLHFCQUFtQkMsRUFBRTR0RCxRQUFyQixLQUFnQzd0RCxLQUFHLG9CQUFuQyxFQUEyRCxZQUFVQyxFQUFFNHRELFFBQVosS0FBdUI3dEQsS0FBRyxZQUExQixFQUF3QyxVQUFRQyxFQUFFNHRELFFBQVYsS0FDdmU3dEQsS0FBRyxZQURvZSxFQUN0ZCxXQUFTQyxFQUFFNHRELFFBQVgsS0FBc0I3dEQsS0FBRyxZQUF6QixFQUF1QyxlQUFhQyxFQUFFNHRELFFBQWYsS0FBMEI3dEQsS0FBRyxxQkFBN0IsRUFBc0QsY0FBWUMsRUFBRStyRCxRQUFkLEtBQXlCaHNELEtBQUcsMEJBQTVCLEVBQTBELGdCQUFjQyxFQUFFK3JELFFBQWhCLEtBQTJCaHNELEtBQUcsMEJBQTlCLEVBQTRELFdBQVNDLEVBQUUrckQsUUFBWCxLQUFzQmhzRCxLQUFHLDJCQUF6QixFQUF3RCxjQUFZQyxFQUFFc3JELE9BQWQsS0FBd0J2ckQsS0FBRyxzQ0FBM0IsRUFBcUUsbUJBQWlCQyxFQUFFK3JELFFBQW5CLEtBQThCaHNELEtBQUcsNEJBQWpDLEVBQWlFLG9CQUFrQkMsRUFBRStyRCxRQUFwQixLQUErQmhzRCxLQUFHLHNDQUFsQyxFQUE0RSxpQkFDL2VDLEVBQUUrckQsUUFENmUsS0FDbGVoc0QsS0FBRyxtQ0FEK2QsRUFDeGIsY0FBWUMsRUFBRStyRCxRQUFkLEtBQXlCaHNELEtBQUcsY0FBNUIsRUFBNEMsNEJBQTBCQyxFQUFFK3JELFFBQTVCLEtBQXVDaHNELEtBQUcsK0JBQTFDLEVBQTZFLFNBQU9DLEVBQUVndUQsWUFBVCxHQUFzQmp1RCxLQUFHLGdCQUF6QixHQUEwQyxrQkFBZ0JDLEVBQUUycUQsT0FBbEIsS0FBNEI1cUQsS0FBRyxnQkFBL0IsQ0FBMUMsQ0FBMkYsb0JBQWtCQyxFQUFFNHRELFFBQXBCLEtBQStCN3RELEtBQUcsb0JBQWxDLEVBQTBELGtCQUFnQkMsRUFBRTR0RCxRQUFsQixLQUE2Qjd0RCxLQUFHLG1CQUFoQyxFQUFxRCxzQkFBb0JDLEVBQUU0dEQsUUFBdEIsS0FBaUM3dEQsS0FBRyxvQkFBcEMsRUFBNEQsVUFBUUMsRUFBRTR0RCxRQUFWLEtBQXFCN3RELEtBQUcsV0FBeEIsRUFBcUMsaUJBQWVDLEVBQUU0dEQsUUFBakIsS0FDMWQ3dEQsS0FBRyxpQkFEdWQsRUFDcGMsY0FBWUMsRUFBRTR0RCxRQUFkLEtBQXlCN3RELEtBQUcsbUJBQTVCLEVBQW1ELHdCQUFzQkMsRUFBRTR0RCxRQUF4QixLQUFtQzd0RCxLQUFHLGFBQXRDLEVBQXFELFdBQVNDLEVBQUU0dEQsUUFBWCxLQUFzQjd0RCxLQUFHLE1BQXpCLEVBQWlDLGdCQUFjQyxFQUFFNHRELFFBQWhCLEtBQTJCN3RELEtBQUcsWUFBOUIsRUFBNEMsWUFBVUMsRUFBRTR0RCxRQUFaLEtBQXVCN3RELEtBQUcsYUFBMUIsRUFBeUMsZ0JBQWNDLEVBQUU0dEQsUUFBaEIsS0FBMkI3dEQsS0FBRyxlQUE5QixFQUErQyxVQUFRQyxFQUFFNHRELFFBQVYsSUFBb0IsaUJBQWU1dEQsRUFBRSxXQUFGLENBQW5DLEtBQW9ERCxLQUFHLHNCQUF2RCxFQUErRSxhQUFXQyxFQUFFaXVELFlBQWIsS0FBNEJsdUQsS0FBRyxzQkFBL0IsRUFBdUQsZ0JBQWNDLEVBQUVpdUQsWUFBaEIsS0FBK0JsdUQsS0FBRyxnQkFBbEMsRUFBb0QsaUJBQWVDLEVBQUVpdUQsWUFBakIsS0FDN2RsdUQsS0FBRyxrQkFEMGQsRUFDdGMsY0FBWUMsRUFBRWl1RCxZQUFkLEtBQTZCbHVELEtBQUcsaUJBQWhDLEVBQW1ELGFBQVdDLEVBQUVpdUQsWUFBYixLQUE0Qmx1RCxLQUFHLGdCQUEvQixFQUFpRCxJQUFHQyxFQUFFaXVELFlBQUYsSUFBZ0JqdUQsRUFBRSxjQUFGLENBQW5CLEVBQXFDLFFBQU9ELEtBQUcsYUFBSCxFQUFpQkMsRUFBRSxjQUFGLENBQXhCLEdBQTJDLEtBQUssS0FBTDtBQUFXRCxpQkFBRyxLQUFILENBQVMsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLFlBQUgsQ0FBZ0IsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLGlCQUFHLFdBQUgsQ0FBZSxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxTQUFILENBQWEsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGlCQUFILENBQXFCLE1BQU0sS0FBSyxjQUFMO0FBQW9CQSxpQkFBRywwQkFBSCxDQUE4QixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxNQUFILENBQVUsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsbUJBQUg7QUFDamUsa0JBQU0sS0FBSyxzQkFBTDtBQUE0QkEsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLHFCQUFMO0FBQTJCQSxpQkFBRyxnQ0FBSCxDQUFvQyxNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsa0JBQUgsQ0FBc0IsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsa0JBQUgsQ0FBc0IsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsS0FBSCxDQUFTLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLE9BQUgsQ0FBVyxNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyxZQUFILENBQWdCLE1BQU07QUFBUUEsaUJBQUcsV0FBSCxDQUQ1SyxDQUMyTCxvQkFBa0JDLEVBQUU0b0QsT0FBcEIsS0FBOEI3b0QsS0FBRyxrQkFBakMsRUFBcUQsU0FBT0MsRUFBRWt1RCxjQUFULEtBQTBCbnVELEtBQUcsa0JBQTdCLEVBQWlELFdBQVNDLEVBQUU0dEQsUUFBWCxHQUFvQjd0RCxLQUFHLDBCQUF2QixHQUFvRCxnQkFDdGZDLEVBQUVxckQsUUFEb2YsR0FDM2V0ckQsS0FBRywwQkFEd2UsR0FDM2MsZ0JBQWNDLEVBQUVzckQsT0FBaEIsR0FBd0J2ckQsS0FBRyxzQkFBM0IsR0FBa0QsZ0JBQWNDLEVBQUVtdUQsUUFBaEIsR0FBeUJwdUQsS0FBRyxzQkFBNUIsR0FBbUQsZ0JBQWNDLEVBQUVtdUQsUUFBaEIsS0FBMkJwdUQsS0FBRyxvQkFBOUIsQ0FEa1QsQ0FDOVAsSUFBR0MsRUFBRSxrQkFBRixDQUFILEVBQXlCLFFBQU9ELEtBQUcsZUFBSCxFQUFtQkMsRUFBRSxrQkFBRixDQUExQixHQUFpRCxLQUFLLFNBQUw7QUFBZUQsaUJBQUcsY0FBSCxDQUFrQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLGNBQUgsQ0FBa0IsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsZ0JBQUgsQ0FBb0IsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsaUJBQUgsQ0FBdUIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsMkJBQUg7QUFDemQsa0JBQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLGVBQUgsQ0FBbUIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsZ0JBQUgsQ0FBb0IsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsaUJBQUgsQ0FBcUIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsbUJBQUgsQ0FBdUIsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsaUJBQUgsQ0FBcUIsTUFBTSxLQUFLLFlBQUw7QUFBa0JBLGlCQUFHLFlBQUgsQ0FBZ0IsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsaUJBQUgsQ0FBcUIsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsZUFBSCxDQUFtQixNQUFNO0FBQVFBLGlCQUFHLGdCQUFILENBRHBILENBQ3dJLGtCQUFnQkMsRUFBRW91RCxZQUFsQixLQUFpQ3J1RCxLQUFHLGdCQUFwQyxFQUFzRCxVQUFRQyxFQUFFcXVELEtBQVYsS0FBa0J0dUQsS0FBRywyQ0FBckIsRUFBb0UsV0FBU0MsRUFBRXF1RCxLQUFYLEtBQW1CdHVELEtBQUcsc0JBQXRCO0FBQy9kLG9DQUE4QkMsRUFBRXF1RCxLQUFoQyxLQUF3Q3R1RCxLQUFHLDRCQUEzQyxFQUF5RSxXQUFTQyxFQUFFcXVELEtBQVgsS0FBbUJ0dUQsS0FBRyxnQ0FBdEIsRUFBMEQsYUFBV0MsRUFBRXF1RCxLQUFiLEtBQXFCdHVELEtBQUcsZ0NBQXhCLEVBQTRELGlCQUFlQyxFQUFFcXVELEtBQWpCLEtBQXlCdHVELEtBQUcsZ0NBQTVCLEVBQWdFLGlCQUFlQyxFQUFFcXVELEtBQWpCLEtBQXlCdHVELEtBQUcsa0JBQTVCLEVBQWdELGVBQWFDLEVBQUVxdUQsS0FBZixLQUF1QnR1RCxLQUFHLGdCQUExQixFQUE0QyxlQUFhQyxFQUFFcXVELEtBQWYsS0FBdUJ0dUQsS0FBRyxnQkFBMUIsRUFBNEMsZUFBYUMsRUFBRXF1RCxLQUFmLEtBQXVCdHVELEtBQUcsZ0JBQTFCLEVBQTRDLGVBQWFDLEVBQUVxdUQsS0FBZixLQUF1QnR1RCxLQUFHLGVBQTFCLEVBQTJDLFlBQVVDLEVBQUVzdUQsSUFBWixLQUFtQnZ1RCxLQUFHLG9CQUF0QjtBQUM5ZCxhQUFPQyxFQUFFc3VELElBQVQsS0FBZ0J2dUQsS0FBRyw2Q0FBbkIsRUFBa0UsZ0JBQWNDLEVBQUVxdUQsS0FBaEIsS0FBd0J0dUQsS0FBRyxpQkFBM0IsRUFBOEMsVUFBUUMsRUFBRXF1RCxLQUFWLEtBQWtCdHVELEtBQUcsWUFBckIsRUFBbUMsWUFBVUMsRUFBRXF1RCxLQUFaLEtBQW9CdHVELEtBQUcseUJBQXZCLEVBQW9ELG1CQUFpQkMsRUFBRXF1RCxLQUFuQixLQUEyQnR1RCxLQUFHLHVCQUE5QixFQUF1RCxnQkFBY0MsRUFBRXF1RCxLQUFoQixLQUF3QnR1RCxLQUFHLGtCQUEzQixFQUErQyxZQUFVQyxFQUFFcXVELEtBQVosS0FBb0J0dUQsS0FBRyxtQkFBdkIsRUFBNEMsY0FBWUMsRUFBRXF1RCxLQUFkLEtBQXNCdHVELEtBQUcsMkJBQXpCLEVBQXNELFdBQVNDLEVBQUVxdUQsS0FBWCxLQUFtQnR1RCxLQUFHLDRCQUF0QixFQUFvRCxpQkFBZUMsRUFBRXF1RCxLQUFqQixLQUF5QnR1RCxLQUFHLGlCQUE1QixFQUErQyxJQUFHQyxFQUFFdXVELE9BQUwsRUFBYSxRQUFPdnVELEVBQUV1dUQsT0FBVCxHQUFrQixLQUFLLFNBQUw7QUFBZXh1RCxpQkFDNWhCLHNCQUQ0aEIsQ0FDcmdCLE1BQU0sS0FBSyxlQUFMO0FBQXFCQSxpQkFBRyxxQ0FBSCxDQUEyQyxNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxvQkFBSCxDQUF3QixNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyx3QkFBSCxDQUE4QixNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsaUJBQUgsQ0FBcUIsTUFBTSxLQUFLLE9BQUw7QUFBYSxvQkFBT0MsRUFBRXd1RCxVQUFULEdBQXFCLEtBQUssYUFBTDtBQUFtQnp1RCx5QkFBRyx1QkFBSCxDQUEyQixNQUFNLEtBQUssTUFBTDtBQUFZQSx5QkFBRyxlQUFILENBQW1CLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSx5QkFBRyx1QkFBSCxDQUEyQixNQUFNLEtBQUssVUFBTDtBQUFnQkEseUJBQ3ZmLGdCQUR1ZixDQUN0ZSxNQUFNLEtBQUssU0FBTDtBQUFlQSx5QkFBRyxrQkFBSCxDQUF3QixNQUFNLEtBQUssTUFBTDtBQUFZQSx5QkFBRywwQkFBSCxDQUE4QixNQUFNLEtBQUssT0FBTDtBQUFhQSx5QkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssTUFBTDtBQUFZQSx5QkFBRyxvQkFBSCxDQUEwQixNQUFNO0FBQVFBLHlCQUFHLFdBQUgsQ0FEc0gsQ0FDdkcsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsWUFBSCxDQUFnQixNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxhQUFILENBQWlCLE1BQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcscUJBQUgsQ0FBeUIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsWUFBSCxDQUFnQixNQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLG9CQUFILENBQTBCLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRyxnQkFBSCxDQUFvQixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQzFmLHVCQUQwZixDQUNoZSxNQUFNO0FBQVFBLGlCQUFHLGdCQUFILENBSG1kLENBRy9iLG1CQUFpQkMsRUFBRXl1RCxJQUFuQixLQUEwQjF1RCxLQUFHLHdCQUE3QixFQUF5RCxvQkFBa0JDLEVBQUUwdUQsV0FBcEIsS0FBa0MzdUQsS0FBRyx3QkFBckMsRUFBaUUsbUJBQWlCQyxFQUFFMHVELFdBQW5CLEtBQWlDM3VELEtBQUcsd0JBQXBDLEVBQWdFLGtCQUFnQkMsRUFBRTR0RCxRQUFsQixLQUE2Qjd0RCxLQUFHLDZCQUFoQyxFQUFpRSxJQUFHQyxFQUFFMnVELE9BQUwsRUFBYSxRQUFPNXVELEtBQUcsYUFBSCxFQUFpQkMsRUFBRTJ1RCxPQUExQixHQUFtQyxLQUFLLFdBQUw7QUFBaUI1dUQsaUJBQUcsV0FBSCxDQUFlLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLFNBQUgsQ0FBYSxNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxNQUFILENBQVUsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsd0JBQUgsQ0FBNEI7QUFDcGYsYUFBSyxRQUFMO0FBQWNBLGlCQUFHLFFBQUgsQ0FBWSxNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyxrQkFBSCxDQUFzQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxTQUFILENBQWEsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLHFCQUFILENBQTJCLE1BQU07QUFBUUEsaUJBQUcsZ0JBQUgsQ0FEK0osQ0FDM0ksVUFBUUMsRUFBRWtwRCxPQUFWLEtBQW9CbnBELEtBQUcsc0JBQXZCLEVBQStDLGNBQVlDLEVBQUVrcEQsT0FBZCxLQUF3Qm5wRCxLQUFHLHNCQUEzQixFQUFxRCxvQkFBa0JDLEVBQUVrcEQsT0FBcEIsS0FBOEJucEQsS0FBRyxzQkFBakMsRUFBMkQsYUFBV0MsRUFBRWtwRCxPQUFiLEtBQXVCbnBELEtBQUcsY0FBMUIsRUFBMEMsaUJBQWVDLEVBQUU0b0QsT0FBakIsS0FBMkI3b0QsS0FBRyxpQkFBOUIsRUFBaUQsaUJBQWUsQ0FBQ0MsRUFBRTRvRCxPQUFsQixJQUE0QixhQUFXNW9ELEVBQUU0dUQsZ0JBQWIsSUFBK0IsU0FDOWU1dUQsRUFBRTZ1RCxHQURpYixLQUMxYTl1RCxLQUFHLGlCQUR1YSxFQUNwWixVQUFRQyxFQUFFa3BELE9BQVYsS0FBb0JucEQsS0FBRyxnQkFBSCxFQUFvQixrQkFBZ0JDLEVBQUU4dUQsV0FBbEIsS0FBZ0MvdUQsS0FBRyxpREFBbkMsQ0FBeEMsRUFBK0gsVUFBUUMsRUFBRWtwRCxPQUFWLEtBQW9CbnBELEtBQUcsMEJBQXZCLEVBQXFELElBQUcsYUFBV0MsRUFBRSx1Q0FBRixDQUFYLElBQXVELGFBQVdBLEVBQUUrdUQsT0FBcEUsSUFBNkUsYUFBVy91RCxFQUFFK29ELE9BQTdGLEVBQXFHaHBELEtBQUcsaUJBQUgsQ0FBcUIsSUFBRyxhQUFXQyxFQUFFLGNBQUYsQ0FBZCxFQUFnQyxJQUFHQSxFQUFFLDBCQUFGLENBQUgsRUFBaUMsUUFBT0EsRUFBRSwwQkFBRixDQUFQLEdBQXNDLEtBQUssT0FBTDtBQUFhRCxpQkFBRyxtQkFBSCxDQUF5QixNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcscUJBQUg7QUFDamYsa0JBQU0sS0FBSyxRQUFMO0FBQWMsd0JBQVVDLEVBQUUrb0QsT0FBWixLQUFzQmhwRCxLQUFHLGlCQUF6QixFQUE0QyxNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsbUJBQUgsQ0FBdUIsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsK0JBQUgsQ0FBdUMsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLDBCQUFILENBQThCLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLHlCQUFILENBQStCLE1BQU07QUFBUUEsaUJBQUcsWUFBSCxDQURnSCxDQUFqQyxNQUMxREEsS0FBRyxZQUFILENBQWdCLFlBQVVDLEVBQUUrb0QsT0FBWixLQUFzQmhwRCxLQUFHLGlCQUF6QixFQUE0QyxXQUFTQyxFQUFFOG9ELFFBQVgsS0FBc0Ivb0QsS0FBRyxZQUF6QixFQUF1QyxvQkFBa0JDLEVBQUU0b0QsT0FBcEIsS0FBOEI3b0QsS0FBRyxlQUFqQyxFQUFrRCxhQUFXQyxFQUFFZ3ZELE1BQWIsS0FBc0JqdkQsS0FBRyxlQUF6QixFQUEwQyxrQkFDdGZDLEVBQUVndkQsTUFEb2YsS0FDM2VqdkQsS0FBRyx3QkFEd2UsRUFDOWMsU0FBT0MsRUFBRWl2RCxjQUFULEtBQTBCbHZELEtBQUcsZUFBN0IsRUFBOEMsU0FBT0MsRUFBRWl2RCxjQUFULEtBQTBCbHZELEtBQUcsZUFBN0IsRUFBOEMsU0FBT0MsRUFBRWl2RCxjQUFULEtBQTBCbHZELEtBQUcsZUFBN0IsRUFBOEMscUJBQW1CQyxFQUFFNG9ELE9BQXJCLEtBQStCN29ELEtBQUcsa0JBQWxDLEVBQXNELFNBQU9DLEVBQUVrdkQsZUFBVCxLQUEyQm52RCxLQUFHLGtCQUE5QixFQUFrRCxTQUFPQyxFQUFFa3ZELGVBQVQsS0FBMkJudkQsS0FBRyxrQkFBOUIsRUFBa0QsV0FBU0MsRUFBRWt2RCxlQUFYLEtBQTZCbnZELEtBQUcsa0JBQWhDLEVBQW9ELFNBQU9DLEVBQUVrdkQsZUFBVCxLQUEyQm52RCxLQUFHLGtCQUE5QixFQUFrRCxhQUFXQyxFQUFFa3ZELGVBQWIsS0FBK0JudkQsS0FBRyxrQkFBbEMsRUFBc0QsYUFBV0MsRUFBRWt2RCxlQUFiLEtBQ3ZlbnZELEtBQUcsa0JBRG9lLEVBQ2hkLElBQUcsWUFBVUMsRUFBRWd2RCxNQUFaLElBQW9CLFdBQVNodkQsRUFBRWd2RCxNQUEvQixJQUF1QyxxQkFBbUJodkQsRUFBRTRvRCxPQUEvRCxFQUF1RTdvRCxLQUFHLG1CQUFILENBQXVCLGNBQVlDLEVBQUVndkQsTUFBZCxLQUF1Qmp2RCxLQUFHLDhCQUExQixFQUE0RCxJQUFHLG1CQUFpQkMsRUFBRTRvRCxPQUFuQixJQUE0QixvQkFBa0I1b0QsRUFBRTR0RCxRQUFoRCxJQUEwRCxvQkFBa0I1dEQsRUFBRTRvRCxPQUFqRixFQUF5RjdvRCxLQUFHLDBCQUFILENBQWdDLElBQUcsc0JBQW9CQyxFQUFFNG9ELE9BQXRCLElBQStCLGtCQUFnQjVvRCxFQUFFNG9ELE9BQWpELElBQTBELGtCQUFnQjVvRCxFQUFFNG9ELE9BQS9FLEVBQXVGN29ELEtBQUcsdUJBQUgsQ0FBNkIsSUFBRyxZQUFVQyxFQUFFNG9ELE9BQVosSUFBcUIsWUFBVTVvRCxFQUFFNHRELFFBQWpDLElBQTJDLGtCQUFnQjV0RCxFQUFFNG9ELE9BQWhFLEVBQXdFN29ELEtBQUcsa0JBQUg7QUFDdmUsZ0JBQVVDLEVBQUU0b0QsT0FBWixLQUFzQjdvRCxLQUFHLGFBQXpCLEVBQXdDLGVBQWFDLEVBQUU0dEQsUUFBZixLQUEwQjd0RCxLQUFHLGdCQUE3QixFQUErQyxXQUFTQyxFQUFFbXZELFVBQVgsS0FBd0JwdkQsS0FBRyxtQkFBM0IsRUFBZ0QsY0FBWUMsRUFBRTRvRCxPQUFkLEtBQXdCN29ELEtBQUcsaUJBQTNCLEVBQThDLGNBQVlDLEVBQUVndkQsTUFBZCxLQUF1Qmp2RCxLQUFHLGlCQUExQixFQUE2QyxjQUFZQyxFQUFFZ3ZELE1BQWQsS0FBdUJqdkQsS0FBRyx3QkFBMUIsRUFBb0QsSUFBRyxZQUFVQyxFQUFFcXJELFFBQVosSUFBc0IsWUFBVXJyRCxFQUFFLGNBQUYsQ0FBbkMsRUFBcURELEtBQUcsa0JBQUgsQ0FBc0IsYUFBV0MsRUFBRXFyRCxRQUFiLEtBQXdCdHJELEtBQUcsZUFBM0IsRUFBNEMsU0FBT0MsRUFBRXFyRCxRQUFULEtBQW9CdHJELEtBQUcsb0JBQXZCLEVBQTZDLFVBQVFDLEVBQUVxckQsUUFBVixLQUFxQnRyRCxLQUFHLHdDQUF4QjtBQUMxYix3QkFBa0JDLEVBQUVxckQsUUFBcEIsS0FBK0J0ckQsS0FBRyx1Q0FBbEMsRUFBNkUsSUFBR0MsRUFBRSx5QkFBRixLQUE4QixlQUFhQSxFQUFFMHFELFFBQWhELEVBQXlEM3FELEtBQUcscUJBQUgsQ0FBeUIsZUFBYUMsRUFBRTJxRCxPQUFmLEtBQXlCNXFELEtBQUcsd0JBQTVCLEVBQXNELFlBQVVDLEVBQUUsY0FBRixDQUFWLEtBQThCRCxLQUFHLHNCQUFqQyxFQUF5RCxVQUFRQyxFQUFFLGNBQUYsQ0FBUixLQUE0QkQsS0FBRyw0QkFBL0IsRUFBNkQsV0FBU0MsRUFBRSxjQUFGLENBQVQsS0FBNkJELEtBQUcsc0JBQWhDLEVBQXdELGFBQVdDLEVBQUUsY0FBRixDQUFYLEtBQStCRCxLQUFHLHlCQUFsQyxFQUE2RCxPQUFNLCtDQUE2Q0EsQ0FBN0MsR0FDbGMsY0FENGI7QUFDN2E7QUFDaEIsSUFBSTBvRCxZQUFVLFNBQVZBLFNBQVUsQ0FBU3pvRCxDQUFULEVBQVc7QUFBQyxRQUFJRCxDQUFKLENBQU1BLElBQUUsS0FBR3F2RCw2QkFBNkJwdkQsQ0FBN0IsQ0FBTCxDQUFxQ0QsS0FBR3N2RCxvQkFBb0JydkQsQ0FBcEIsQ0FBSCxDQUEwQkQsS0FBR3V2RCxtQkFBbUJ0dkQsQ0FBbkIsQ0FBSCxDQUF5QkQsS0FBR3d2RCxpQkFBaUJ2dkQsQ0FBakIsQ0FBSCxDQUF1QkQsS0FBR3l2RCxrQkFBa0J4dkQsQ0FBbEIsQ0FBSCxDQUF3QkQsS0FBRzB2RCxrQkFBa0J6dkQsQ0FBbEIsQ0FBSCxDQUF3QkQsS0FBRzJ2RCxnQkFBZ0IxdkQsQ0FBaEIsQ0FBSCxDQUFzQkQsS0FBRzR2RCx3QkFBd0IzdkQsQ0FBeEIsQ0FBSCxDQUE4QkQsS0FBRzZ2RCx5QkFBeUI1dkQsQ0FBekIsQ0FBSCxDQUErQkQsS0FBRzh2RCxtQkFBbUI3dkQsQ0FBbkIsQ0FBSCxDQUF5QkQsS0FBRyt2RCxpQkFBaUI5dkQsQ0FBakIsQ0FBSCxDQUF1QkQsS0FBR2d3RCxpQkFBaUIvdkQsQ0FBakIsQ0FBSCxDQUF1QkQsS0FBR2l3RCxpQkFBaUJod0QsQ0FBakIsQ0FBSCxDQUF1QkQsS0FBR2t3RCxlQUFlandELENBQWYsQ0FBSCxDQUFxQkQsS0FBR213RCxnQkFBZ0Jsd0QsQ0FBaEIsQ0FBSCxDQUFzQkQsS0FBR293RCxrQkFBa0Jud0QsQ0FBbEIsQ0FBSCxDQUF3QkQsS0FBR3F3RCxpQkFBaUJwd0QsQ0FBakIsQ0FBSCxDQUF1QkQsS0FBR3N3RCxpQkFBaUJyd0QsQ0FBakIsQ0FBSCxDQUF1QkQsS0FBR3V3RCxvQkFBb0J0d0QsQ0FBcEIsQ0FBSCxDQUEwQkQsS0FDOWZ3d0QsdUJBQXVCdndELENBQXZCLENBRDhmLENBQ3BlRCxLQUFHeXdELDBCQUEwQnh3RCxDQUExQixDQUFILENBQWdDRCxLQUFHMHdELGdCQUFnQnp3RCxDQUFoQixDQUFILENBQXNCRCxLQUFHMndELGNBQWMxd0QsQ0FBZCxDQUFILENBQW9CRCxLQUFHNHdELGdCQUFnQjN3RCxDQUFoQixDQUFILENBQXNCLENBQUNELEtBQUc2d0QsdUJBQXVCNXdELENBQXZCLENBQUosTUFBaUNELElBQUUsVUFBUUEsQ0FBM0MsRUFBOEMsT0FBTSxvQ0FBa0NBLENBQWxDLEdBQW9DLFFBQTFDO0FBQW1ELENBRHhOO0FBQUEsSUFDeU51dkQscUJBQW1CLFNBQW5CQSxrQkFBbUIsQ0FBU3R2RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBU0MsRUFBRTZ3RCxTQUFGLEtBQWMsbUJBQWlCN3dELEVBQUU2d0QsU0FBbkIsS0FBK0I5d0QsS0FBRywrQ0FBbEMsR0FBbUYsY0FBWUMsRUFBRTZ3RCxTQUFkLEtBQTBCOXdELEtBQUcsMENBQTdCLENBQW5GLEVBQTRKLGFBQVdDLEVBQUU2d0QsU0FBYixLQUF5Qjl3RCxLQUFHLG9DQUE1QixDQUE1SixFQUE4TixhQUNwZkMsRUFBRTZ3RCxTQURrZixLQUN0ZTl3RCxLQUFHLHFDQURtZSxDQUE1TyxFQUMvTUMsRUFBRTh3RCxJQUFGLEtBQVMvd0QsS0FBRyxnQkFBY0MsRUFBRTh3RCxJQUFoQixHQUFxQixPQUFqQyxFQUEwQzl3RCxFQUFFK3dELElBQUYsS0FBU2h4RCxLQUFHLGdCQUFjQyxFQUFFK3dELElBQWhCLEdBQXFCLE9BQWpDLEVBQTBDLE9BQU9oeEQsQ0FBUDtBQUFTLENBRi9JO0FBQUEsSUFFZ0pzd0QsbUJBQWlCLFNBQWpCQSxnQkFBaUIsQ0FBU3J3RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxJQUFHQyxFQUFFZ3hELE1BQUYsSUFBVWh4RCxFQUFFaXhELElBQWYsRUFBb0I7QUFBQyxZQUFHLGlCQUFlanhELEVBQUVreEQsU0FBakIsSUFBNEIsZUFBYWx4RCxFQUFFaXhELElBQTlDLEVBQW1EbHhELEtBQUcsZUFBSCxDQUFtQixJQUFHLGtCQUFnQkMsRUFBRWt4RCxTQUFsQixJQUE2QixnQkFBY2x4RCxFQUFFaXhELElBQWhELEVBQXFEbHhELEtBQUcsZ0JBQUgsQ0FBb0IsSUFBRyxXQUFTQyxFQUFFa3hELFNBQVgsSUFBc0IsV0FBU2x4RCxFQUFFaXhELElBQXBDLEVBQXlDbHhELEtBQUcsZ0JBQUgsQ0FBb0IsY0FBWUMsRUFBRWt4RCxTQUFkLEtBQTBCbnhELEtBQUcsMkJBQTdCLEVBQTBELGVBQWFDLEVBQUVpeEQsSUFBZixLQUFzQmx4RCxLQUFHLG1CQUF6QjtBQUNwZCxrQkFBUUMsRUFBRWl4RCxJQUFWLEtBQWlCbHhELEtBQUcsYUFBcEIsRUFBbUMsZUFBYUMsRUFBRWl4RCxJQUFmLEtBQXNCbHhELEtBQUcsaUJBQXpCLEVBQTRDLGNBQVlDLEVBQUVpeEQsSUFBZCxLQUFxQmx4RCxLQUFHLGlCQUF4QixFQUEyQyxJQUFHLFdBQVNDLEVBQUVpeEQsSUFBWCxJQUFpQixlQUFhanhELEVBQUVpeEQsSUFBbkMsRUFBd0NseEQsS0FBRyw0QkFBSDtBQUFrQyxTQUFHLFVBQVFDLEVBQUVzdEQsT0FBVixLQUFvQixDQUFDdHRELEVBQUUsVUFBRixDQUFELElBQWdCLENBQUNBLEVBQUUsWUFBRixDQUFqQixJQUFrQ0EsRUFBRWt4RCxTQUFwQyxLQUFnRG54RCxJQUFFLGlCQUFlQyxFQUFFa3hELFNBQWpCLElBQTRCLGVBQWFseEQsRUFBRWt4RCxTQUEzQyxJQUFzRCxpQkFBZWx4RCxFQUFFa3hELFNBQXZFLEdBQWlGbnhELElBQUUsZUFBbkYsR0FBbUdBLElBQUUsZ0JBQXZKLEdBQXlLQyxFQUFFbXhELEtBQUYsS0FBVXB4RCxLQUFHQyxFQUFFbXhELEtBQUYsR0FBUSxPQUFyQixDQUF6SyxFQUF1TW54RCxFQUFFLFVBQUYsTUFBZ0JELEtBQUdDLEVBQUUsVUFBRixJQUFjLE9BQWpDLENBQXZNLEVBQWlQQSxFQUFFb3hELE9BQUYsS0FBWXJ4RCxLQUFHQyxFQUFFb3hELE9BQUYsR0FBVSxPQUF6QixDQUFqUCxFQUFtUnB4RCxFQUFFLFlBQUYsTUFDamZELEtBQUdDLEVBQUUsWUFBRixJQUFnQixPQUQ4ZCxDQUFuUixFQUNsTSxjQUFZQSxFQUFFcXhELFVBQWQsS0FBMkJ0eEQsS0FBRyx5R0FBOUIsQ0FEa00sRUFDckQsc0JBQW9CQyxFQUFFcXhELFVBQXRCLElBQWtDLFNBQU9yeEQsRUFBRXN4RCxRQURWLENBQUgsRUFDdUJ2eEQsS0FBRyxxREFBSCxDQUF5RCxZQUFVQyxFQUFFLGNBQUYsQ0FBVixLQUE4QkQsS0FBRyxxQ0FBakMsRUFBMEUsZUFBYUMsRUFBRSxjQUFGLENBQWIsS0FBaUNELEtBQUcsY0FBcEMsRUFBb0QsSUFBR0MsRUFBRSxhQUFGLENBQUgsRUFBb0IsUUFBT0EsRUFBRSxhQUFGLENBQVAsR0FBeUIsS0FBSyxPQUFMO0FBQWFELGlCQUFHLG1CQUFILENBQXVCLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUN0ZixrQkFEc2YsQ0FDbmUsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsZ0JBQUgsQ0FBb0IsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsc0JBQUgsQ0FBMEIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsaUJBQUgsQ0FBcUIsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsbUJBQUgsQ0FBdUIsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsb0JBQUgsQ0FBd0IsTUFBTSxLQUFLLFlBQUw7QUFBa0JBLGlCQUFHLDZCQUFILENBQWlDLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLGtCQUFILENBQXNCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyw2QkFBSCxDQUFtQyxNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsNkJBQUg7QUFDcmUsa0JBQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLGtCQUFILENBQXNCLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLG1CQUFILENBQXVCLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLG1CQUFILENBQXVCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLHFCQUFILENBQXlCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLG9CQUFILENBQXdCLE1BQU07QUFBUUEsaUJBQUcsMkJBQUgsQ0FGaU0sQ0FFbEssSUFBR0MsRUFBRSxnQkFBRixDQUFILEVBQXVCLFFBQU9BLEVBQUUsZ0JBQUYsQ0FBUCxHQUE0QixLQUFLLEtBQUw7QUFBV0QsaUJBQUcsMEJBQUgsQ0FBZ0MsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsK0JBQUgsQ0FBcUMsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsNEJBQUgsQ0FBa0MsTUFBTTtBQUFRQSxpQkFBRyxvQ0FBSCxDQUFqTSxDQUEyTyxhQUMxZ0JDLEVBQUVzdEQsT0FEd2dCLElBQy9mLFlBQVV0dEQsRUFBRXV4RCxNQURtZixLQUMxZXh4RCxLQUFHLHFCQUR1ZSxFQUNoZCxhQUFXQyxFQUFFc3RELE9BQWIsSUFBc0IsYUFBV3R0RCxFQUFFdXhELE1BQW5DLEtBQTRDeHhELEtBQUcsc0JBQS9DLEVBQXVFLGFBQVdDLEVBQUVzdEQsT0FBYixJQUFzQixhQUFXdHRELEVBQUV1eEQsTUFBbkMsS0FBNEN4eEQsS0FBRyx5QkFBL0MsRUFBMEUsYUFBV0MsRUFBRXN0RCxPQUFiLElBQXNCLG1CQUFpQnR0RCxFQUFFbU8sSUFBekMsS0FBZ0RwTyxLQUFHLDhCQUFuRCxFQUFtRixhQUFXQyxFQUFFc3RELE9BQWIsSUFBc0IsWUFBVXR0RCxFQUFFbU8sSUFBbEMsS0FBeUNwTyxLQUFHLDZCQUE1QyxFQUEyRSxhQUFXQyxFQUFFc3RELE9BQWIsSUFBc0IsWUFBVXR0RCxFQUFFbU8sSUFBbEMsS0FBeUNwTyxLQUFHLDJDQUE1QyxFQUF5RixPQUFPQSxDQUFQO0FBQVMsQ0FQcGM7QUFBQSxJQU9xYzZ3RCx5QkFBdUIsU0FBdkJBLHNCQUF1QixDQUFTNXdELENBQVQsRUFBVztBQUFDLFFBQUlELElBQy9lLEVBRDJlO0FBQUEsUUFDeGVvb0QsSUFBRSxFQURzZSxDQUNuZSxvQkFBa0Jub0QsRUFBRXV0RCxRQUFwQixLQUErQnZ0RCxFQUFFd3hELGFBQUYsS0FBa0JySixJQUFFbm9ELEVBQUV3eEQsYUFBdEIsR0FBcUN4eEQsRUFBRXl4RCxVQUFGLEtBQWV0SixJQUFFbm9ELEVBQUV5eEQsVUFBbkIsQ0FBckMsRUFBb0UsT0FBS3RKLENBQUwsS0FBU3BvRCxJQUFFLDBEQUFYLENBQXBFLEVBQTJJLE9BQUtvb0QsQ0FBTCxLQUFTcG9ELElBQUUsaUNBQVgsQ0FBM0ksRUFBeUwsT0FBS29vRCxDQUFMLEtBQVNwb0QsSUFBRSxrQ0FBWCxDQUF6TCxFQUF3TyxPQUFLb29ELENBQUwsS0FBU3BvRCxJQUFFLDREQUFYLENBQXhPLEVBQWlULE9BQUtvb0QsQ0FBTCxLQUFTcG9ELElBQUUsMkVBQVgsQ0FBalQsRUFBNlksT0FBS29vRCxDQUFMLEtBQVNwb0QsSUFBRSwwREFBWCxDQUE3WSxFQUMzQyxPQUFLb29ELENBQUwsS0FBU3BvRCxJQUFFLGlEQUFYLENBRDJDLEVBQ3FCLFFBQU1vb0QsQ0FBTixLQUFVcG9ELElBQUUsaUdBQVosQ0FEckIsRUFDc0ksUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSxpSEFBWixDQUR0SSxFQUN1USxRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLGNBQVosQ0FEdlEsRUFDbVMsUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSxzRUFBWixDQURuUyxFQUN1WCxRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLHdGQUFaLENBRHZYLEVBRTNDLFFBQU1vb0QsQ0FBTixLQUFVcG9ELElBQUUsc0RBQVosQ0FGMkMsRUFFeUIsUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSw2Q0FBWixDQUZ6QixFQUVvRixRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLGtEQUFaLENBRnBGLEVBRXNKLFFBQU1vb0QsQ0FBTixLQUFVcG9ELElBQUUsOENBQVosQ0FGdEosRUFFa04sUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSw0REFBWixDQUZsTixFQUU0UixRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLHNGQUFaLENBRjVSLEVBRWdZLFFBQU1vb0QsQ0FBTixLQUFVcG9ELElBQUUsNkZBQVosQ0FGaFksRUFHM0MsUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSxpR0FBWixDQUgyQyxFQUdvRSxRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLGlIQUFaLENBSHBFLEVBR21NLFFBQU1vb0QsQ0FBTixLQUFVcG9ELElBQUUsa0hBQVosQ0FIbk0sRUFHcVUsUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSx3RkFBWixDQUhyVSxFQUcyYSxRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLDhDQUFaLENBSDFjO0FBSVIsV0FBT0EsQ0FBUDtBQUFTLENBWk47QUFBQSxJQVlPcXdELG1CQUFpQixTQUFqQkEsZ0JBQWlCLENBQVNwd0QsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVMsWUFBVUMsRUFBRXNyRCxPQUFaLElBQXFCdHJELEVBQUUweEQsUUFBdkIsS0FBa0MzeEQsS0FBRyxlQUFhQyxFQUFFMHhELFFBQWYsR0FBd0IsT0FBN0QsRUFBc0UsaUJBQWUxeEQsRUFBRSxxQkFBRixDQUFmLEtBQTBDRCxLQUFHLGlCQUE3QyxFQUFnRSxtQkFBaUJDLEVBQUUscUJBQUYsQ0FBakIsS0FBNENELEtBQUcsMkJBQS9DLEVBQTRFLGFBQVdDLEVBQUUscUJBQUYsQ0FBWCxLQUFzQ0QsS0FBRyxjQUF6QyxFQUF5REMsRUFBRTJ4RCxjQUFGLEtBQW1CNXhELEtBQUcsbUJBQXRCLEVBQTJDLE9BQU9BLENBQVA7QUFBUyxDQVo1VztBQUFBLElBWTZXMndELGdCQUFjLFNBQWRBLGFBQWMsQ0FBUzF3RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxTQUFPQyxFQUFFLHdCQUFGLENBQVAsS0FBcUNELEtBQUcsaUJBQXhDLEVBQTJELFNBQU9DLEVBQUUsNkJBQUYsQ0FBUCxLQUNqZEQsS0FBRyxnQ0FEOGMsRUFDMWEsU0FBT0MsRUFBRSx1QkFBRixDQUFQLEtBQW9DRCxLQUFHLGdCQUF2QyxFQUF5RCxTQUFPQyxFQUFFLG9CQUFGLENBQVAsS0FBaUNELEtBQUcsa0JBQXBDLEVBQXdELFNBQU9DLEVBQUUsd0JBQUYsQ0FBUCxLQUFxQ0QsS0FBRyxzQkFBeEMsRUFBa0UsT0FBT0EsQ0FBUDtBQUFTLENBYjdOO0FBQUEsSUFhOE5rd0QsaUJBQWUsU0FBZkEsY0FBZSxDQUFTandELENBQVQsRUFBVztBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTQyxFQUFFMHRELEtBQUYsS0FBVSxTQUFPMXRELEVBQUU0eEQsU0FBVCxLQUFxQjd4RCxLQUFHLGNBQXhCLEdBQXdDQyxFQUFFSSxNQUFGLEtBQVdMLEtBQUcsdUJBQXVCQyxFQUFFSSxNQUF6QixHQUFnQyxPQUE5QyxDQUF4QyxFQUErRkosRUFBRTRZLFFBQUYsS0FBYTdZLEtBQUcsdUJBQXVCQyxFQUFFNFksUUFBekIsR0FBa0MsT0FBbEQsQ0FBL0YsRUFBMEo1WSxFQUFFNnhELE1BQUYsS0FBVzl4RCxLQUFHLGFBQVdDLEVBQUU2eEQsTUFBYixHQUFvQixPQUFsQyxDQUFwSyxFQUFnTixPQUFPOXhELENBQVA7QUFBUyxDQWIzZDtBQUFBLElBYTRkbXdELGtCQUFnQixTQUFoQkEsZUFBZ0IsQ0FBU2x3RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUMvZixFQUQyZixDQUN4ZixVQUFRQyxFQUFFNG9ELE9BQVYsS0FBb0IsU0FBTzVvRCxFQUFFLGdCQUFGLENBQVAsS0FBNkJELEtBQUcsZ0JBQWhDLEdBQWtELFNBQU9DLEVBQUUsVUFBRixDQUFQLEtBQXVCRCxLQUFHLGNBQTFCLENBQWxELEVBQTRGLFNBQU9DLEVBQUUsVUFBRixDQUFQLEtBQXVCRCxLQUFHLFVBQTFCLENBQTVGLEVBQWtJLFNBQU9DLEVBQUUsVUFBRixDQUFQLEtBQXVCRCxLQUFHLGNBQTFCLENBQWxJLEVBQTRLLFNBQU9DLEVBQUUsVUFBRixDQUFQLEtBQXVCRCxLQUFHLGFBQTFCLENBQTVLLEVBQXFOLFlBQVVDLEVBQUU4eEQsSUFBWixLQUFtQi94RCxLQUFHLGFBQXRCLENBQXJOLEVBQTBQLFNBQU9DLEVBQUU4eEQsSUFBVCxLQUFnQi94RCxLQUFHLGNBQW5CLENBQTFQLEVBQTZSLFNBQU9DLEVBQUUsZ0JBQUYsQ0FBUCxLQUE2QkQsS0FBRyxxQkFBaEMsQ0FBN1IsRUFBb1YsU0FBT0MsRUFBRSxnQkFBRixDQUFQLEtBQTZCRCxLQUFHLGlCQUFoQyxDQUFwVixFQUF1WSxTQUFPQyxFQUFFLGlCQUFGLENBQVAsS0FBOEJELEtBQUcscUJBQWpDLENBQXZZLEVBQStiLFNBQU9DLEVBQUUsaUJBQUYsQ0FBUCxLQUE4QkQsS0FDcGYsZUFEc2QsQ0FBL2IsRUFDTixTQUFPQyxFQUFFLGFBQUYsQ0FBUCxLQUEwQkQsS0FBRyxhQUE3QixDQURNLEVBQ3NDLFNBQU9DLEVBQUUsa0JBQUYsQ0FBUCxLQUErQkQsS0FBRyxvQ0FBbEMsQ0FEMUQsRUFDbUksT0FBT0EsQ0FBUDtBQUFTLENBZjVJO0FBQUEsSUFlNklneUQsb0JBQWtCLFNBQWxCQSxpQkFBa0IsQ0FBUy94RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxJQUFHLHlCQUF1QkMsRUFBRThvRCxRQUF6QixJQUFtQzlvRCxFQUFFZ3lELFNBQXhDLEVBQWtELFFBQU9oeUQsRUFBRWd5RCxTQUFULEdBQW9CLEtBQUssVUFBTDtBQUFnQmp5RCxpQkFBRyxlQUFILENBQW1CLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxlQUFILENBQW1CLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLG1CQUFILENBQXlCLE1BQU0sS0FBSyxlQUFMO0FBQXFCQSxpQkFBRyxpQ0FBSCxDQUFxQyxNQUFNO0FBQVFBLGlCQUFHLGdCQUFILENBQTVOLENBQWdQLE9BQU9BLENBQVA7QUFBUyxDQWYvZDtBQUFBLElBZWdlb3dELG9CQUNuZSxTQURtZUEsaUJBQ25lLENBQVNud0QsQ0FBVCxFQUFXRCxDQUFYLEVBQWE7QUFBQyxRQUFJb29ELElBQUUsRUFBTixDQUFTLElBQUcsVUFBUW5vRCxFQUFFdXVELE9BQVYsSUFBbUIsYUFBV3Z1RCxFQUFFdXVELE9BQW5DLEVBQTJDdnVELEVBQUVpeUQsUUFBRixLQUFhOUosS0FBRyxlQUFham1DLFVBQVVsaUIsRUFBRWl5RCxRQUFaLENBQWIsR0FBbUMsT0FBbkQsRUFBNEQsT0FBTzlKLENBQVA7QUFBUyxDQWhCcEk7QUFBQSxJQWdCcUk2SCxtQkFBaUIsU0FBakJBLGdCQUFpQixDQUFTaHdELENBQVQsRUFBVztBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTLElBQUcsZUFBYUMsRUFBRTZvRCxPQUFsQixFQUEwQjtBQUFDLGlCQUFPN29ELEVBQUVreUQsR0FBVCxLQUFlbnlELEtBQUcsb0JBQWxCLEVBQXdDLFFBQU1DLEVBQUVreUQsR0FBUixLQUFjbnlELEtBQUcsMEJBQWpCLEVBQTZDQyxFQUFFbXlELEtBQUYsS0FBVXB5RCxLQUFHQyxFQUFFbXlELEtBQUYsR0FBUSxhQUFyQixFQUFvQ255RCxFQUFFb3lELFFBQUYsS0FBYXJ5RCxLQUFHLDhCQUFoQixFQUFrRCxJQUFHLFNBQU9DLEVBQUUyckQsUUFBVCxJQUFtQixTQUFPM3JELEVBQUU0ckQsU0FBL0IsRUFBeUM3ckQsS0FBRyw2QkFBSCxDQUFpQyxTQUFPQyxFQUFFcXlELGVBQVQsS0FBMkJ0eUQsS0FBRyxxQkFBOUIsRUFBcUQsU0FDdmZDLEVBQUVzeUQsS0FEcWYsS0FDN2V2eUQsS0FBRyxlQUQwZSxFQUN6ZCxTQUFPQyxFQUFFdXlELFVBQVQsS0FBc0J4eUQsS0FBRyxnQ0FBekIsRUFBMkQsZUFBYUMsRUFBRXd5RCxTQUFmLEtBQTJCenlELEtBQUcsMEJBQTlCO0FBQTBELHNCQUFlQyxFQUFFNm9ELE9BQWpCLElBQTBCLFNBQU83b0QsRUFBRTh0RCxXQUFuQyxLQUFpRCxVQUFROXRELEVBQUV5eUQsUUFBVixLQUFxQjF5RCxLQUFHLDBCQUF4QixHQUFvRCxZQUFVQyxFQUFFeXlELFFBQVosS0FBdUIxeUQsS0FBRyxzQkFBMUIsQ0FBcEQsRUFBd0csWUFBVUMsRUFBRXl5RCxRQUFaLEtBQXVCMXlELEtBQUcseUJBQTFCLENBQXhHLEVBQTZKLGVBQWFDLEVBQUV5eUQsUUFBZixLQUEwQjF5RCxLQUFHLHlCQUE3QixDQUE5TSxFQUF1USxpQkFBZUMsRUFBRTZvRCxPQUFqQixJQUEwQixTQUFPN29ELEVBQUU4dEQsV0FBbkMsS0FBaUQsVUFBUTl0RCxFQUFFMHlELFFBQVYsS0FBcUIzeUQsS0FBRyx5QkFBeEIsR0FDM2MsVUFBUUMsRUFBRTB5RCxRQUFWLEtBQXFCM3lELEtBQUcsZ0JBQXhCLENBRDJjLEVBQ2phLFlBQVVDLEVBQUUweUQsUUFBWixLQUF1QjN5RCxLQUFHLHVCQUExQixDQURnWCxFQUM1VCxhQUFXQyxFQUFFMnlELFVBQWIsS0FBMEI1eUQsS0FBRyxnQ0FBN0IsRUFBK0QsYUFBV0MsRUFBRTJ5RCxVQUFiLEtBQTBCNXlELEtBQUcsZ0NBQTdCLEVBQStELFlBQVVDLEVBQUUyeUQsVUFBWixLQUF5QjV5RCxLQUFHLGtDQUE1QixFQUFrRSxZQUFVQyxFQUFFMnlELFVBQVosS0FBeUI1eUQsS0FBRyw2QkFBNUIsRUFBMkQsWUFBVUMsRUFBRTJ5RCxVQUFaLEtBQXlCNXlELEtBQUcscUNBQTVCLEVBQXFFLGNBQVlDLEVBQUUyeUQsVUFBZCxLQUEyQjV5RCxLQUFHLGlDQUE5QixFQUFtRSxPQUFPQSxDQUFQO0FBQVMsQ0FsQm5lO0FBQUEsSUFrQm9lZ3dELG1CQUN2ZSxTQUR1ZUEsZ0JBQ3ZlLENBQVMvdkQsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVMsa0JBQWdCQyxFQUFFNG9ELE9BQWxCLEtBQTRCN29ELEtBQUdDLEVBQUU0eUQsUUFBRixHQUFXLE9BQTFDLEVBQW1ELGFBQVc1eUQsRUFBRTRvRCxPQUFiLEtBQXVCN29ELEtBQUdDLEVBQUU2eUQsT0FBRixHQUFVLE9BQXBDLEVBQTZDLElBQUc3eUQsRUFBRTZyRCxPQUFMLEVBQWEsUUFBTzdyRCxFQUFFNnJELE9BQVQsR0FBa0IsS0FBSyxtQkFBTDtBQUF5QjlyRCxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxnQkFBSCxDQUFzQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxhQUFILENBQWlCLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLGtCQUFILENBQXdCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRywwQkFBSCxDQUE4QjtBQUM3ZSxhQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxhQUFILENBQWlCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxVQUFILENBQWMsTUFBTSxLQUFLLG1CQUFMO0FBQXlCQSxpQkFBRyxrQkFBSCxDQUFzQixNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsY0FBSCxDQUFrQixNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsaUJBQUgsQ0FBcUIsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsd0JBQUgsQ0FBZ0MsTUFBTSxLQUFLLGVBQUw7QUFBcUJBLGlCQUFHLG1CQUFILENBQXVCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxtQkFBSCxDQUF5QixNQUFNLEtBQUssMEJBQUw7QUFBZ0NBLGlCQUFHLG1EQUFIO0FBQzdiLGtCQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLGlCQUFILENBQXFCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxtQkFBSCxDQUF1QixNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyxrQkFBSCxDQUFzQixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxrQkFBSCxDQUFzQixNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsbUJBQUgsQ0FBdUIsTUFBTTtBQUFRQSxpQkFBRyx1QkFBSCxDQUZsSCxDQUU2SSxjQUFZQyxFQUFFNG9ELE9BQWQsS0FBd0I1b0QsRUFBRTh5RCxnQkFBRixLQUFxQi95RCxLQUFHLHFCQUFtQkMsRUFBRTh5RCxnQkFBckIsR0FBc0MsT0FBOUQsR0FBdUUsU0FBTzl5RCxFQUFFK3lELGFBQVQsS0FBeUJoekQsS0FBRyxnQ0FBNUIsQ0FBL0YsRUFBOEosT0FBT0EsQ0FBUDtBQUFTLENBckJuYjtBQUFBLElBcUJvYit2RCxtQkFBaUIsU0FBakJBLGdCQUFpQixDQUFTOXZELENBQVQsRUFBVztBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTLElBQUcsa0JBQWdCQyxFQUFFNHRELFFBQXJCLEVBQThCO0FBQUMsWUFBRzV0RCxFQUFFZ08sT0FBTCxFQUFhO0FBQUMsZ0JBQUltNkMsSUFDOWdCbm9ELEVBQUVnTyxPQUR3Z0IsQ0FDaGdCLFFBQU9tNkMsQ0FBUCxHQUFVLEtBQUssTUFBTDtBQUFZQSx3QkFBRSxRQUFGLENBQVcsTUFBTSxLQUFLLEtBQUw7QUFBV0Esd0JBQUUsT0FBRixDQUFZLE1BQU0sS0FBSyxLQUFMO0FBQVdBLHdCQUFFLEtBQUYsQ0FBUSxNQUFNLEtBQUssUUFBTDtBQUFjQSx3QkFBRSxVQUFGLENBQWUsTUFBTSxLQUFLLFFBQUw7QUFBY0Esd0JBQUUsUUFBRixDQUFXLE1BQU0sS0FBSyxPQUFMO0FBQWFBLHdCQUFFLFFBQUYsQ0FBVyxNQUFNLEtBQUssUUFBTDtBQUFjQSx3QkFBRSxXQUFGLENBQWdCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLHdCQUFFLFFBQUYsQ0FBL08sQ0FBMFBwb0QsS0FBRyxhQUFXb29ELENBQVgsR0FBYSxPQUFoQjtBQUF3QixhQUFHbm9ELEVBQUVnekQsUUFBTCxFQUFjO0FBQUM3SyxnQkFBRW5vRCxFQUFFZ3pELFFBQUosQ0FBYSxRQUFPN0ssQ0FBUCxHQUFVLEtBQUssTUFBTDtBQUFZQSx3QkFBRSxRQUFGLENBQVcsTUFBTSxLQUFLLEtBQUw7QUFBV0Esd0JBQUUsT0FBRixDQUFZLE1BQU0sS0FBSyxLQUFMO0FBQVdBLHdCQUFFLEtBQUYsQ0FBUSxNQUFNLEtBQUssUUFBTDtBQUFjQSx3QkFBRSxVQUFGLENBQWUsTUFBTSxLQUFLLFFBQUw7QUFBY0Esd0JBQUUsUUFBRixDQUFXLE1BQU0sS0FBSyxPQUFMO0FBQWFBLHdCQUFFLFFBQUYsQ0FBVztBQUMvZSxxQkFBSyxRQUFMO0FBQWNBLHdCQUFFLFdBQUYsQ0FBZ0IsTUFBTSxLQUFLLFFBQUw7QUFBY0Esd0JBQUUsUUFBRixDQURzUSxDQUMzUHBvRCxLQUFHLGFBQVdvb0QsQ0FBWCxHQUFhLE9BQWhCO0FBQXdCO0FBQUMsT0FBRXZpQixPQUFGLEtBQVksU0FBTzVsQyxFQUFFNGxDLE9BQVQsS0FBbUI3bEMsS0FBRyxrQkFBdEIsR0FBMEMsU0FBT0MsRUFBRTRsQyxPQUFULEtBQW1CN2xDLEtBQUcsb0JBQXRCLENBQXRELEVBQXFHLE9BQU9BLENBQVA7QUFBUyxDQXZCak07QUFBQSxJQXVCa002dkQsMkJBQXlCLFNBQXpCQSx3QkFBeUIsQ0FBUzV2RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBU0MsRUFBRSxTQUFGLE1BQWVELEtBQUcscUJBQW1CQyxFQUFFLFNBQUYsQ0FBbkIsR0FBZ0MsT0FBbEQsRUFBMkQsSUFBRyxPQUFLQSxFQUFFaXpELFVBQVYsRUFBcUIsSUFBR2p6RCxFQUFFaXpELFVBQUYsR0FBYSxLQUFHanpELEVBQUVpekQsVUFBbEIsRUFBNkIsSUFBRWp6RCxFQUFFaXpELFVBQUYsQ0FBYTd5RCxNQUEvQyxFQUFzRDtBQUFDLFlBQUkrbkQsSUFBRW5vRCxFQUFFaXpELFVBQUYsQ0FBYTd5RCxNQUFiLEdBQW9CLENBQTFCO0FBQUEsWUFBNEJpb0QsSUFBRSxJQUFFRixDQUFGLEdBQUlub0QsRUFBRWl6RCxVQUFGLENBQWFsVCxTQUFiLENBQXVCLENBQXZCLEVBQXlCb0ksQ0FBekIsQ0FBSixHQUFnQyxFQUE5RCxDQUFpRSxLQUFJdm9ELElBQUUsQ0FBTixFQUFRQSxJQUFFZ2hCLEtBQUtJLEtBQUwsQ0FBV2hoQixFQUFFaXpELFVBQUYsQ0FBYTd5RCxNQUFiLEdBQW9CLENBQS9CLENBQVYsRUFBNENSLEdBQTVDO0FBQWdEeW9ELGdCQUFFLEtBQUdGLENBQUgsSUFBTSxLQUN2ZnZvRCxDQURpZixHQUMvZXlvRCxJQUFFcm9ELEVBQUVpekQsVUFBRixDQUFhbFQsU0FBYixDQUF1Qm9JLElBQUUsSUFBRXZvRCxDQUEzQixFQUE2QnVvRCxJQUFFLElBQUV2b0QsQ0FBSixHQUFNLENBQW5DLENBRDZlLEdBQ3ZjeW9ELEtBQUcsTUFBSXJvRCxFQUFFaXpELFVBQUYsQ0FBYWxULFNBQWIsQ0FBdUJvSSxJQUFFLElBQUV2b0QsQ0FBM0IsRUFBNkJ1b0QsSUFBRSxJQUFFdm9ELENBQUosR0FBTSxDQUFuQyxDQUFQLENBRHFjO0FBQWhELFNBQ3ZXRyxLQUFHLG9CQUFrQnNvRCxDQUFsQixHQUFvQixPQUF2QjtBQUErQixLQURnTixNQUMzTXRvRCxLQUFHLG1CQUFpQkMsRUFBRWl6RCxVQUFuQixHQUE4QixPQUFqQyxDQUF5QyxPQUFLanpELEVBQUVpekQsVUFBUCxLQUFvQmx6RCxLQUFHLG9CQUFrQkMsRUFBRWl6RCxVQUFwQixHQUErQixPQUF0RCxFQUErRCxPQUFPbHpELENBQVA7QUFBUyxDQXhCdE87QUFBQSxJQXdCdU84dkQscUJBQW1CLFNBQW5CQSxrQkFBbUIsQ0FBUzd2RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBU0MsRUFBRWt6RCxRQUFGLEtBQWEsYUFBV2x6RCxFQUFFa3pELFFBQWIsR0FBc0JuekQsS0FBRyxzQ0FBekIsR0FBZ0UsY0FBWUMsRUFBRWt6RCxRQUFkLEtBQXlCbnpELEtBQUcsc0NBQTVCLENBQTdFLEVBQWtKQyxFQUFFLGdCQUFGLE1BQXNCRCxLQUFHLGVBQWFDLEVBQUUsZ0JBQUYsQ0FBYixHQUFpQyxPQUExRCxFQUFtRSxJQUFHQSxFQUFFLFlBQUYsQ0FBSCxFQUFtQjtBQUFDLFlBQUltb0QsSUFDL2Zub0QsRUFBRSxZQUFGLENBRDJmLENBQzNlLFFBQU9tb0QsQ0FBUCxHQUFVLEtBQUssWUFBTDtBQUFrQkEsb0JBQUUsWUFBRixDQUFlLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxvQkFBRSxjQUFGLENBQWlCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxvQkFBRSxhQUFGLENBQWdCLE1BQU0sS0FBSyxpQkFBTDtBQUF1QkEsb0JBQUUsbUJBQUYsQ0FBeEosQ0FBOEtwb0QsS0FBRyxVQUFRb29ELENBQVIsR0FBVSxPQUFiO0FBQXFCLFNBQUdub0QsRUFBRSxlQUFGLENBQUgsRUFBc0I7QUFBQ21vRCxZQUFFbm9ELEVBQUUsZUFBRixDQUFGLENBQXFCLFFBQU9tb0QsQ0FBUCxHQUFVLEtBQUssVUFBTDtBQUFnQkEsb0JBQUUsWUFBRixDQUFlLE1BQU0sS0FBSyxTQUFMO0FBQWVBLG9CQUFFLFNBQUYsQ0FBWSxNQUFNLEtBQUssT0FBTDtBQUFhQSxvQkFBRSxPQUFGLENBQVUsTUFBTSxLQUFLLGVBQUw7QUFBcUJBLG9CQUFFLHVCQUFGLENBQTRCLE1BQU0sS0FBSyxNQUFMO0FBQVlBLG9CQUFFLE9BQUYsQ0FBaEwsQ0FBMExwb0QsS0FBRyxjQUFZb29ELENBQVosR0FBYyxPQUFqQjtBQUF5QixPQUFFLGFBQUYsTUFBbUJwb0QsS0FBRyxZQUFVQyxFQUFFLGFBQUYsQ0FBVixHQUN4ZSxPQURrZCxFQUN6Y0EsRUFBRSxhQUFGLE1BQW1CRCxLQUFHLGtCQUFrQkMsRUFBRSxhQUFGLENBQWxCLEdBQW1DLE9BQXpELEVBQWtFLE9BQU9ELENBQVA7QUFBUyxDQTFCakY7QUFBQSxJQTBCa0Z3dkQsbUJBQWlCLFNBQWpCQSxnQkFBaUIsQ0FBU3Z2RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxJQUFHQyxFQUFFa3JELE9BQUwsRUFBYTtBQUFDLFlBQUkvQyxJQUFFLEVBQU47QUFBQSxZQUFTcG9ELElBQUUsQ0FBQyxpQkFBZUMsRUFBRWtxRCxJQUFqQixJQUF1QixpQkFBZWxxRCxFQUFFa3FELElBQXhDLElBQThDLFVBQVFscUQsRUFBRWtxRCxJQUF4RCxJQUE4RCxhQUFXbHFELEVBQUVrcUQsSUFBNUUsS0FBbUYsZ0JBQWNscUQsRUFBRTRvRCxPQUFuRyxHQUEyRzdvRCxJQUFFLG9CQUE3RyxHQUFvSUEsSUFBRSxZQUFqSixDQUFnSyxZQUFVQyxFQUFFa3JELE9BQVosS0FBc0IvQyxLQUFHLGVBQXpCLEVBQTBDLGFBQVdub0QsRUFBRWtyRCxPQUFiLEtBQXVCL0MsS0FBRyxtQkFBMUIsRUFBK0MsbUJBQWlCbm9ELEVBQUVrckQsT0FBbkIsS0FBNkIvQyxLQUFHLHFCQUFoQyxFQUF1RCxjQUFZbm9ELEVBQUVrckQsT0FBZCxLQUF3Qi9DLEtBQUcsZ0JBQTNCLEVBQTZDLGFBQVdub0QsRUFBRWtyRCxPQUFiLEtBQ3plL0MsS0FBRyxrQkFEc2UsRUFDbGQsV0FBU25vRCxFQUFFa3JELE9BQVgsS0FBcUIvQyxLQUFHLGtCQUF4QixFQUE0QyxhQUFXbm9ELEVBQUVrckQsT0FBYixLQUF1Qi9DLEtBQUcsbUJBQTFCLEVBQStDLFlBQVVub0QsRUFBRWtyRCxPQUFaLEtBQXNCL0MsS0FBRyxlQUF6QixFQUEwQyxhQUFXbm9ELEVBQUVrckQsT0FBYixLQUF1Qi9DLEtBQUcsbUJBQTFCLEVBQStDLFlBQVVub0QsRUFBRWtyRCxPQUFaLEtBQXNCL0MsS0FBRyxzQkFBekIsRUFBbUQsWUFBVW5vRCxFQUFFa3JELE9BQVosS0FBc0IvQyxLQUFHLGVBQXpCLEVBQTBDLGFBQVdub0QsRUFBRWtyRCxPQUFiLEtBQXVCL0MsS0FBRyxnQkFBMUIsRUFBNEMsY0FBWW5vRCxFQUFFa3JELE9BQWQsS0FBd0IvQyxLQUFHLG1CQUEzQixFQUFnRCxVQUFRbm9ELEVBQUVrckQsT0FBVixLQUFvQi9DLEtBQUcsdUJBQXZCLEVBQWtELFlBQVVub0QsRUFBRWtyRCxPQUFaLEtBQXNCL0MsS0FBRyxjQUF6QixFQUF5QyxhQUFXbm9ELEVBQUVrckQsT0FBYixLQUMvZC9DLEtBQUcsbUJBRDRkLEVBQ3JjLGNBQVlub0QsRUFBRWtyRCxPQUFkLEtBQXdCL0MsS0FBRyxnQkFBM0IsRUFBNkMsV0FBU25vRCxFQUFFa3JELE9BQVgsS0FBcUIvQyxLQUFHLG1CQUF4QixFQUE2QyxnQkFBY25vRCxFQUFFa3JELE9BQWhCLEtBQTBCL0MsS0FBRyxxQkFBN0IsRUFBb0QsYUFBV25vRCxFQUFFa3JELE9BQWIsS0FBdUIvQyxLQUFHLGdCQUExQixFQUE0QyxjQUFZbm9ELEVBQUVrckQsT0FBZCxLQUF3Qi9DLEtBQUcsaUJBQTNCLEVBQThDLFVBQVFub0QsRUFBRWtyRCxPQUFWLEtBQW9CL0MsS0FBRyxhQUF2QixFQUFzQyxlQUFhbm9ELEVBQUVrckQsT0FBZixLQUF5Qi9DLEtBQUcscUJBQTVCLEVBQW1ELFdBQVNub0QsRUFBRWtyRCxPQUFYLEtBQXFCL0MsS0FBRyxpQkFBeEIsRUFBMkMsbUJBQWlCbm9ELEVBQUVrckQsT0FBbkIsS0FBNkIvQyxLQUFHLGtCQUFoQyxFQUFvRCxhQUFXbm9ELEVBQUVrckQsT0FBYixLQUF1Qi9DLEtBQUcsd0JBQTFCLEVBQXNELGVBQ2pmbm9ELEVBQUVrckQsT0FEK2UsS0FDcmUvQyxLQUFHLGVBRGtlLEVBQ2pkLFlBQVVub0QsRUFBRWtyRCxPQUFaLEtBQXNCL0MsS0FBRyxpQkFBekIsRUFBNEMsbUJBQWlCbm9ELEVBQUVrckQsT0FBbkIsS0FBNkIvQyxLQUFHLHFCQUFoQyxFQUF1RCxNQUFJQSxDQUFKLEtBQVFBLElBQUVub0QsRUFBRWtyRCxPQUFGLEdBQVUsT0FBcEIsRUFBNkJuckQsS0FBR29vRCxDQUFIO0FBQUssWUFBT3BvRCxDQUFQO0FBQVMsQ0E3QnZLO0FBQUEsSUE2QndLeXZELG9CQUFrQixTQUFsQkEsaUJBQWtCLENBQVN4dkQsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVNDLEVBQUUrdUQsT0FBRixHQUFVLEtBQVYsQ0FBZ0IsU0FBTy91RCxFQUFFLGFBQUYsQ0FBUCxLQUEwQkQsS0FBRyx5Q0FBN0IsRUFBMEUsU0FBT0MsRUFBRSxjQUFGLENBQVAsS0FBMkJELEtBQUcsNENBQTlCLEVBQThFLFNBQU9DLEVBQUUsWUFBRixDQUFQLEtBQXlCRCxLQUFHLHdDQUE1QixFQUF3RUMsRUFBRW16RCxXQUFGLEtBQWdCcHpELEtBQUcsZ0JBQWNDLEVBQUVtekQsV0FBaEIsR0FDcmQsT0FEa2MsRUFDemJuekQsRUFBRW96RCxJQUFGLEtBQVNyekQsS0FBRyxrQkFBZ0JDLEVBQUVvekQsSUFBbEIsR0FBdUIsT0FBbkMsRUFBNENwekQsRUFBRSxxQkFBRixNQUEyQkQsS0FBRyxrQkFBZ0JDLEVBQUUscUJBQUYsQ0FBaEIsR0FBeUMsT0FBdkUsRUFBZ0YsU0FBT0EsRUFBRXF6RCxTQUFULEtBQXFCdHpELEtBQUcsK0JBQXhCLEVBQXlELFFBQU1DLEVBQUVxekQsU0FBUixLQUFvQnR6RCxLQUFHLHFDQUF2QixFQUE4REMsRUFBRXN6RCxJQUFGLEtBQVN2ekQsS0FBRyxXQUFTQyxFQUFFc3pELElBQVgsR0FBZ0IsT0FBNUIsRUFBcUMsU0FBT3R6RCxFQUFFdXpELFlBQVQsS0FBd0J4ekQsS0FBRyxvQ0FBM0IsRUFBaUUsU0FBT0MsRUFBRXd6RCxLQUFULEtBQWlCenpELEtBQUcsNENBQXBCLEVBQW9FQyxFQUFFeXpELEtBQUYsS0FBVTF6RCxLQUFHLHNCQUFvQkMsRUFBRXl6RCxLQUF0QixHQUE0QixTQUF6QyxFQUFvRCxJQUFHLGFBQVd6ekQsRUFBRStvRCxPQUFiLElBQXNCLGFBQ25mL29ELEVBQUUrdUQsT0FEd2QsRUFDaGQsVUFBUS91RCxFQUFFMHpELFNBQVYsS0FBc0IzekQsS0FBRyw2Q0FBekIsR0FBd0UsU0FBT0MsRUFBRTB6RCxTQUFULEtBQXFCM3pELEtBQUcsaURBQXhCLENBQXhFLEVBQXFKLGlCQUFlQyxFQUFFMHpELFNBQWpCLEtBQTZCM3pELEtBQUcsZ0NBQWhDLENBQXJKLEVBQXVOLGdCQUFjQyxFQUFFMHpELFNBQWhCLEtBQTRCM3pELEtBQUcsaUNBQS9CLENBQXZOLEVBQXlSLFdBQVNDLEVBQUU0dEQsUUFBWCxLQUFzQjd0RCxLQUFHLGVBQUgsRUFBbUJDLEVBQUUsZUFBRixNQUFxQkQsS0FBRyxvQkFBa0JDLEVBQUUsZUFBRixDQUFsQixHQUFxQyxPQUE3RCxDQUFuQixFQUF5RkEsRUFBRSxlQUFGLE1BQXFCRCxLQUFHLHlCQUF1QkMsRUFBRSxlQUFGLENBQXZCLEdBQTBDLE9BQWxFLENBQXpGLEVBQW9LQSxFQUFFLGdCQUFGLE1BQXNCRCxLQUNuZiw2QkFBNkJDLEVBQUUsZ0JBQUYsQ0FBN0IsR0FBaUQsT0FENGEsQ0FBMUwsQ0FBelIsRUFDaUQsU0FBT0EsRUFBRTJ6RCxPQUFULEtBQW1CNXpELEtBQUcsOEJBQXRCLENBRGpELENBQ3VHQSxLQUFHNnpELFlBQVk1ekQsQ0FBWixDQUFILENBQWtCLElBQUcsV0FBU0EsRUFBRTB0RCxLQUFYLElBQWtCLG9CQUFrQjF0RCxFQUFFNG9ELE9BQXRDLElBQStDLFNBQU81b0QsRUFBRTZ6RCxLQUEzRCxFQUFpRTtBQUFDLFlBQUkxTCxJQUFFbm9ELEVBQUUwekMsUUFBUixDQUFpQixNQUFJeVUsQ0FBSixJQUFRLGVBQWFBLENBQWIsSUFBZ0IsUUFBTUEsQ0FBOUIsS0FBbUNwb0QsS0FBRyx5QkFBdUJvb0QsQ0FBdkIsR0FBeUIsT0FBL0QsRUFBd0UsU0FBT25vRCxFQUFFOHpELFFBQVQsS0FBb0IvekQsS0FBRyxxQkFBdkIsRUFBOEMsUUFBTUMsRUFBRTh6RCxRQUFSLEtBQW1CL3pELEtBQUcsMkJBQXRCLEVBQW1ELFFBQU1DLEVBQUUrekQsYUFBUixLQUF3QmgwRCxLQUFHLCtCQUEzQixFQUE0RCxTQUFPQyxFQUFFK3pELGFBQVQsS0FBeUJoMEQsS0FBRyx5QkFBNUIsRUFBdUQsU0FDdGZDLEVBQUUyekQsT0FEb2YsS0FDMWU1ekQsS0FBRyx5QkFEdWUsRUFDNWMsUUFBTUMsRUFBRTJ6RCxPQUFSLEtBQWtCNXpELEtBQUcsc0JBQXJCLEVBQTZDLFFBQU1DLEVBQUVxc0QsT0FBUixLQUFrQnRzRCxLQUFHLHlCQUFyQixFQUFrRCxRQUFNQyxFQUFFcXNELE9BQVIsS0FBa0J0c0QsS0FBRywyQkFBckIsRUFBb0QsU0FBT0MsRUFBRW92QyxHQUFULEtBQWVydkMsS0FBRyxtQkFBbEIsRUFBdUMsUUFBTUMsRUFBRW92QyxHQUFSLEtBQWNydkMsS0FBRyx5QkFBakIsRUFBNEMsU0FBT0MsRUFBRTZ2QyxJQUFULEtBQWdCOXZDLEtBQUcsNkJBQW5CLEVBQW9ELFFBQU1DLEVBQUU2dkMsSUFBUixLQUFlOXZDLEtBQUcsbUNBQWxCLEVBQXlELFNBQU9DLEVBQUVxc0QsT0FBVCxLQUFtQnRzRCxLQUFHLDZCQUF0QixFQUFxRCxRQUFNQyxFQUFFcXNELE9BQVIsS0FBa0J0c0QsS0FBRyxtQ0FBckIsRUFBMEQsU0FBT0MsRUFBRSxhQUFGLENBQVAsS0FDM2VELEtBQUcsbUJBRHdlO0FBQ2pkLFNBQUdDLEVBQUUsd0JBQUYsQ0FBSCxFQUErQjtBQUFDbW9ELFlBQUVub0QsRUFBRSx3QkFBRixDQUFGLENBQThCLFFBQU9tb0QsQ0FBUCxHQUFVLEtBQUssT0FBTDtBQUFhQSxvQkFBRSxTQUFGLENBQWMsTUFBTSxLQUFLLEtBQUw7QUFBV0Esb0JBQUUsS0FBRixDQUFRLE1BQU0sS0FBSyxPQUFMO0FBQWFBLG9CQUFFLFNBQUYsQ0FBYyxNQUFNLEtBQUssTUFBTDtBQUFZQSxvQkFBRSxNQUFGLENBQVMsTUFBTSxLQUFLLFFBQUw7QUFBY0Esb0JBQUUsTUFBRixDQUFTLE1BQU0sS0FBSyxPQUFMO0FBQWFBLG9CQUFFLGlCQUFGLENBQTFLLENBQThMcG9ELEtBQUcsdUJBQXFCb29ELENBQXJCLEdBQXVCLE9BQTFCO0FBQWtDLHFCQUFjbm9ELEVBQUU0dEQsUUFBaEIsS0FBMkI1dEQsRUFBRSwyQkFBRixNQUFpQ0QsS0FBRywwQkFBd0JDLEVBQUUsMkJBQUYsQ0FBeEIsR0FBdUQsT0FBM0YsR0FBb0dBLEVBQUUsd0JBQUYsTUFBOEJELEtBQUcsY0FBWUMsRUFBRSx3QkFBRixDQUFaLEdBQ3JkLE9BRG9iLENBQXBHLEVBQ3ZVQSxFQUFFLHdCQUFGLE1BQThCRCxLQUFHLGNBQWNDLEVBQUUsd0JBQUYsQ0FBZCxHQUEwQyxTQUEzRSxDQUR1VSxFQUNqUEEsRUFBRSx1QkFBRixNQUE2QkQsS0FBRyxpQkFBZUMsRUFBRSx1QkFBRixDQUFmLEdBQTBDLFVBQTFFLENBRHNOLEVBQy9ILElBQUdBLEVBQUUsc0JBQUYsQ0FBSCxFQUE2QjtBQUFDbW9ELFlBQUVub0QsRUFBRSxzQkFBRixDQUFGLENBQTRCLFFBQU9tb0QsQ0FBUCxHQUFVLEtBQUssT0FBTDtBQUFhQSxvQkFBRSxTQUFGLENBQWMsTUFBTSxLQUFLLEtBQUw7QUFBV0Esb0JBQUUsS0FBRixDQUFRLE1BQU0sS0FBSyxPQUFMO0FBQWFBLG9CQUFFLFNBQUYsQ0FBYyxNQUFNLEtBQUssTUFBTDtBQUFZQSxvQkFBRSxNQUFGLENBQVMsTUFBTSxLQUFLLFFBQUw7QUFBY0Esb0JBQUUsTUFBRixDQUFTLE1BQU0sS0FBSyxPQUFMO0FBQWFBLG9CQUFFLGlCQUFGLENBQTFLLENBQThMcG9ELEtBQUcsdUJBQXFCb29ELENBQXJCLEdBQXVCLE9BQTFCO0FBQWtDLHFCQUFjbm9ELEVBQUU0dEQsUUFBaEIsS0FBMkI1dEQsRUFBRSx5QkFBRixNQUM5ZUQsS0FBRywwQkFBd0JDLEVBQUUseUJBQUYsQ0FBeEIsR0FBcUQsT0FEc2IsR0FDN2FBLEVBQUUsc0JBQUYsTUFBNEJELEtBQUcsY0FBY0MsRUFBRSxzQkFBRixDQUFkLEdBQXdDLFNBQXZFLENBRDZhLEVBQzNWQSxFQUFFLHFCQUFGLE1BQTJCRCxLQUFHLGlCQUFlQyxFQUFFLHFCQUFGLENBQWYsR0FBd0MsVUFBdEUsQ0FEMlYsRUFDelFBLEVBQUUsc0JBQUYsTUFBNEJELEtBQUcsY0FBWUMsRUFBRSxzQkFBRixDQUFaLEdBQXNDLE9BQXJFLENBRDhPLEVBQy9KLE9BQU9ELENBQVA7QUFBUyxDQXBDdlQ7QUFBQSxJQW9Dd1QwdkQsb0JBQWtCLFNBQWxCQSxpQkFBa0IsQ0FBU3p2RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxJQUFHLGtCQUFnQkMsRUFBRXdxRCxTQUFyQixFQUErQjtBQUFDLFlBQUlyQyxJQUFFbm9ELEVBQUUsb0JBQUYsQ0FBTixDQUE4QixlQUFhbW9ELENBQWIsSUFBaUIsUUFBTUEsQ0FBTixJQUFTLE1BQUlBLENBQTlCLEtBQW1DcG9ELEtBQUcsYUFBV29vRCxDQUFYLEdBQWEsT0FBbkQsRUFBNERBLElBQUVub0QsRUFBRSx1QkFBRixDQUFGO0FBQzVkLHVCQUFhbW9ELENBQWIsSUFBaUIsUUFBTUEsQ0FBTixJQUFTLE1BQUlBLENBQTlCLEtBQW1DcG9ELEtBQUcsc0JBQW9Cb29ELENBQXBCLEdBQXNCLFVBQTVELEVBQXdFQSxJQUFFbm9ELEVBQUUsdUJBQUYsQ0FBRixDQUE2QixlQUFhbW9ELENBQWIsSUFBaUIsUUFBTUEsQ0FBTixJQUFTLE1BQUlBLENBQTlCLEtBQW1DcG9ELElBQUUsYUFBV29vRCxDQUFYLEdBQWFwb0QsSUFBRSw4Q0FBZixHQUE4REEsS0FBRyxpQ0FBK0Jvb0QsQ0FBL0IsR0FBaUMsT0FBcEMsQ0FBbkcsRUFBaUpBLElBQUVub0QsRUFBRSx1QkFBRixDQUFGLENBQTZCLGVBQWFtb0QsQ0FBYixJQUFpQixRQUFNQSxDQUFOLElBQVMsTUFBSUEsQ0FBOUIsS0FBbUMsVUFBUUEsQ0FBUixHQUFVcG9ELEtBQUcseUJBQWIsR0FBdUMsaUJBQWVvb0QsQ0FBZixHQUFpQnBvRCxLQUFHLDBCQUFwQixHQUErQyxjQUFZb29ELENBQVosR0FBY3BvRCxLQUFHLCtCQUFqQixHQUFtRCxXQUFTb29ELENBQVQsS0FBYXBvRCxLQUFHLHNCQUFoQixDQUE1SyxFQUFxTm9vRCxJQUFFbm9ELEVBQUVnMEQsWUFBSjtBQUN4ZSx1QkFBYTdMLENBQWIsSUFBaUIsUUFBTUEsQ0FBTixJQUFTLE1BQUlBLENBQTlCLEtBQW1DcG9ELEtBQUcsY0FBWW9vRCxDQUFaLEdBQWMsT0FBcEQsRUFBNkRBLElBQUVub0QsRUFBRSx5QkFBRixDQUFGLENBQStCLGVBQWFtb0QsQ0FBYixJQUFnQixRQUFNQSxDQUF0QixJQUF5QixNQUFJQSxDQUE3QixHQUErQnBvRCxLQUFHLGtCQUFnQm9vRCxDQUFoQixHQUFrQixPQUFwRCxJQUE2REEsSUFBRW5vRCxFQUFFaTBELFNBQUosRUFBYyxlQUFhOUwsQ0FBYixJQUFpQixRQUFNQSxDQUFOLElBQVMsTUFBSUEsQ0FBOUIsS0FBbUNwb0QsS0FBRyxpQkFBZW9vRCxDQUFmLEdBQWlCLE9BQXZELENBQTNFLEVBQTRJQSxJQUFFbm9ELEVBQUVrMEQsWUFBSixDQUFpQixlQUFhL0wsQ0FBYixJQUFpQixRQUFNQSxDQUFOLElBQVMsTUFBSUEsQ0FBYixJQUFnQixVQUFRQSxDQUF6QyxLQUE4Q3BvRCxLQUFHLG1CQUFpQm9vRCxDQUFqQixHQUFtQixPQUFwRSxFQUE2RUEsSUFBRW5vRCxFQUFFLGdCQUFGLENBQUYsQ0FBc0IsZUFBYW1vRCxDQUFiLElBQWlCLFFBQU1BLENBQU4sSUFBUyxNQUFJQSxDQUE5QixLQUFtQ3BvRCxLQUFHLG1CQUFpQm9vRCxDQUFqQixHQUFtQixPQUF6RCxFQUFrRUEsSUFBRW5vRCxFQUFFLG9CQUFGLENBQUYsQ0FBMEIsZUFBYW1vRCxDQUFiLElBQWlCLFFBQU1BLENBQU4sSUFBUyxNQUFJQSxDQUE5QixLQUFtQ3BvRCxLQUFHLDJCQUMxZG9vRCxDQUQwZCxHQUN4ZCxPQURrYixFQUN6YUEsSUFBRW5vRCxFQUFFLGFBQUYsQ0FBRixDQUFtQixpQkFBZW1vRCxDQUFmLEtBQW1CcG9ELEtBQUcsNkJBQTZCb29ELENBQTdCLEdBQStCLE9BQXJELEVBQThELG1CQUFpQm5vRCxFQUFFLG1CQUFGLENBQWpCLEtBQTBDRCxLQUFHLHNCQUE3QyxFQUFxRSxNQUFJQSxDQUFKLEtBQVFBLElBQUUsMEJBQVY7QUFBc0MsWUFBT0EsQ0FBUDtBQUFTLENBdkNqTjtBQUFBLElBdUNrTjR2RCwwQkFBd0IsU0FBeEJBLHVCQUF3QixDQUFTM3ZELENBQVQsRUFBVztBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTLFNBQU9DLEVBQUUsZ0JBQUYsQ0FBUCxLQUE2QkQsS0FBRyw2QkFBaEMsRUFBaUUsUUFBTUMsRUFBRSxnQkFBRixDQUFOLEtBQTRCRCxLQUFHLDhCQUEvQixFQUFpRUMsRUFBRTZzRCxNQUFGLEtBQVc3c0QsRUFBRTZoQixNQUFGLEtBQVc5aEIsS0FBRyxnQ0FBa0NDLEVBQUU2aEIsTUFBcEMsR0FBMkMsU0FBekQsR0FBb0U3aEIsRUFBRUksTUFBRixLQUFXTCxLQUFHLDZCQUNqZUMsRUFBRUksTUFEK2QsR0FDeGQsU0FEMGMsQ0FBcEUsRUFDM1hKLEVBQUVtMEQsVUFBRixLQUFlcDBELEtBQUcscUJBQW1CQyxFQUFFbTBELFVBQXJCLEdBQWdDLE9BQWxELENBRDJYLEVBQ2hVbjBELEVBQUVvMEQsVUFBRixLQUFlcjBELEtBQUcsY0FBWUMsRUFBRW8wRCxVQUFkLEdBQXlCLFFBQTNDLENBRGdVLEVBQzNRcDBELEVBQUVxMEQsU0FBRixLQUFjdDBELEtBQUcsdUJBQXVCQyxFQUFFcTBELFNBQXpCLEdBQW1DLFNBQXBELENBRGdRLEVBQ2hNcjBELEVBQUUycUQsT0FBRixJQUFXLFNBQU8zcUQsRUFBRXMwRCxJQUFwQixLQUEyQnYwRCxLQUFHLCtCQUE5QixFQUFpRSxTQUFPQyxFQUFFLFVBQUYsQ0FBUCxLQUF1QkQsS0FBRywyQ0FBMUIsRUFBMkUsSUFBR0MsRUFBRXUwRCxPQUFMLEVBQWE7QUFBQyxZQUFJcE0sSUFBRW5vRCxFQUFFdTBELE9BQVI7QUFBQSxZQUFnQngwRCxJQUFFQSxJQUFFLGlCQUFwQixDQUF3QyxRQUFPb29ELENBQVAsR0FBVSxLQUFLLE9BQUw7QUFBYXBvRCxxQkFBRyxXQUFILENBQWUsTUFBTSxLQUFLLE9BQUw7QUFBYUEscUJBQUcsaUJBQUgsQ0FBcUIsTUFBTSxLQUFLLFNBQUw7QUFBZUEscUJBQUcsY0FBSDtBQUN6ZSxzQkFBTSxLQUFLLGFBQUw7QUFBbUJBLHFCQUFHLDJCQUFILENBQStCLE1BQU0sS0FBSyxNQUFMO0FBQVlBLHFCQUFHLDhCQUFILENBQWtDLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxxQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLHFCQUFHLDJCQUFILENBQWlDLE1BQU0sS0FBSyxlQUFMO0FBQXFCQSxxQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssV0FBTDtBQUFpQkEscUJBQUcscURBQUgsQ0FBeUQsTUFBTSxLQUFLLE1BQUw7QUFBWUEscUJBQUcsa0JBQUgsQ0FBc0IsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLHFCQUFHLGtCQUFILENBQXNCLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxxQkFBRyx3QkFBSCxDQUE0QixNQUFNLEtBQUssUUFBTDtBQUFjQSxxQkFBRyxlQUFIO0FBQzVlLHNCQUFNLEtBQUssT0FBTDtBQUFhQSxxQkFBRyxtQ0FBSCxDQUF5QyxNQUFNLEtBQUssUUFBTDtBQUFjQSxxQkFBRyxtQ0FBSCxDQUF5QyxNQUFNLEtBQUssT0FBTDtBQUFhQSxxQkFBRyxhQUFILENBQWlCLE1BQU0sS0FBSyxLQUFMO0FBQVdBLHFCQUFHLHFCQUFILENBQXlCLE1BQU0sS0FBSyxNQUFMO0FBQVlBLHFCQUFHLFdBQUgsQ0FBZSxNQUFNLEtBQUssTUFBTDtBQUFZQSxxQkFBRyxXQUFILENBQWUsTUFBTSxLQUFLLFFBQUw7QUFBY0EscUJBQUcsbUNBQUgsQ0FBdUMsTUFBTSxLQUFLLGlCQUFMO0FBQXVCQSxxQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssTUFBTDtBQUFZQSxxQkFBRyxpQkFBSCxDQUFxQixNQUFNO0FBQVFBLHFCQUFHLGdCQUFILENBRnJDO0FBRTBELGlCQUFVQyxFQUFFdzBELFNBQVosS0FBd0J6MEQsS0FBRyw4RUFBM0I7QUFDaGMsZ0JBQVVDLEVBQUV3MEQsU0FBWixLQUF3QnowRCxLQUFHLHdGQUEzQixFQUFxSCxZQUFVQyxFQUFFdzBELFNBQVosS0FBd0J6MEQsS0FBRyxvSkFBM0IsRUFBbUwsWUFBVUMsRUFBRXcwRCxTQUFaLEtBQXdCejBELEtBQUcsc0pBQTNCLEVBQXFMLFlBQVVDLEVBQUV3MEQsU0FBWixLQUF3QnowRCxLQUNqZiwwS0FEeWQsRUFDelMsU0FBT0MsRUFBRXkwRCxVQUFULEtBQXNCMTBELEtBQUcsbUNBQXpCLEVBQThELFFBQU1DLEVBQUV5MEQsVUFBUixLQUFxQjEwRCxLQUFHLHFEQUF4QixFQUErRSxlQUFhQyxFQUFFMDBELGdCQUFmLEtBQWtDMzBELEtBQUcsOENBQXJDLEVBQXFGLFVBQVFDLEVBQUUwMEQsZ0JBQVYsS0FBNkIzMEQsS0FBRyxvRkFBaEM7QUFDdFosc0JBQWdCQyxFQUFFMDBELGdCQUFsQixLQUFxQzMwRCxLQUFHLHNEQUF4QyxFQUFnRyxTQUFPQyxFQUFFMDBELGdCQUFULEtBQTRCMzBELEtBQUcscURBQS9CLEVBQXNGLGNBQVlDLEVBQUUwMEQsZ0JBQWQsS0FBaUMzMEQsS0FBRywrQ0FBcEMsRUFBcUYsUUFBTUMsRUFBRTAwRCxnQkFBUixLQUEyQjMwRCxLQUFHLDJEQUE5QixFQUEyRixZQUFVQyxFQUFFMjBELFNBQVosS0FBd0I1MEQsS0FBRyxvREFBM0IsRUFBaUYscUJBQW1CQyxFQUFFMjBELFNBQXJCLEtBQWlDNTBELEtBQUcsd0ZBQXBDO0FBQ3ZiLG1DQUE2QkMsRUFBRTIwRCxTQUEvQixLQUEyQzUwRCxLQUFHLHdMQUE5QyxFQUFrUCxvQkFBa0JDLEVBQUUyMEQsU0FBcEIsS0FBZ0M1MEQsS0FBRyw2SEFBbkMsRUFBc0ssOEJBQTRCQyxFQUFFMjBELFNBQTlCLEtBQTBDNTBELEtBQUcsd0ZBQTdDO0FBQ3haLGlDQUEyQkMsRUFBRTIwRCxTQUE3QixLQUF5QzUwRCxLQUFHLG1GQUE1QyxFQUFpSUMsRUFBRSxVQUFGLE1BQWdCRCxLQUFHLHFCQUFtQkMsRUFBRSxVQUFGLENBQW5CLEdBQWlDLE9BQXBELEVBQTZELE9BQUtBLEVBQUUsV0FBRixDQUFMLEtBQXNCRCxLQUFHLG9SQUF6QjtBQUM5TCxXQUFLQyxFQUFFLFdBQUYsQ0FBTCxLQUFzQkQsS0FBRyxvYkFBekIsRUFBaWUsT0FBS0MsRUFBRSxXQUFGLENBQUwsS0FDaGVELEtBQUcsNFlBRDZkLEVBQzNELE9BQUtDLEVBQUUsV0FBRixDQUFMLEtBQXNCRCxLQUFHLHFZQUF6QjtBQUN0YSxXQUFLQyxFQUFFLFdBQUYsQ0FBTCxLQUFzQkQsS0FBRywwZ0JBQXpCO0FBQ0EsV0FBS0MsRUFBRSxXQUFGLENBQUwsS0FBc0JELEtBQUcsNm1CQUF6QjtBQUNBLFdBQUtDLEVBQUUsV0FBRixDQUFMLEtBQXNCRCxLQUFHLDhZQUF6QixFQUFtYixRQUFNQyxFQUFFNDBELFFBQVIsS0FBbUI3MEQsS0FBRyw4SEFBdEI7QUFDbmIsWUFBTUMsRUFBRTQwRCxRQUFSLEtBQW1CNzBELEtBQUcsK0dBQXRCLEVBQXlJLFFBQU1DLEVBQUU0MEQsUUFBUixLQUFtQjcwRCxLQUFHLHVGQUF0QixFQUFpSCxRQUFNQyxFQUFFNDBELFFBQVIsS0FBbUI3MEQsS0FBRyx1RkFBdEIsRUFBaUgsUUFBTUMsRUFBRTQwRCxRQUFSLEtBQW1CNzBELEtBQUcsK0VBQXRCLEVBQXlHLFNBQU9DLEVBQUU0MEQsUUFBVCxLQUFvQjcwRCxLQUFHLGdGQUF2QjtBQUNwZCxZQUFNQyxFQUFFNjBELFVBQVIsS0FBcUI5MEQsS0FBRyxpRUFBeEIsRUFBaUcsU0FBT0MsRUFBRTgwRCxNQUFULEtBQWtCLzBELEtBQUcsa0VBQXJCLEVBQTJGLFNBQU9DLEVBQUVzc0QsTUFBVCxLQUFrQnZzRCxLQUFHLGlIQUFyQixFQUE4SSxnQkFBY0MsRUFBRSswRCxhQUFoQixLQUFnQ2gxRCxLQUFHLHFKQUFuQztBQUMxVSxhQUFPQyxFQUFFKzBELGFBQVQsS0FBeUJoMUQsS0FBRyx5RUFBNUIsRUFBeUcsbUJBQWlCQyxFQUFFMnFELE9BQW5CLEtBQTZCNXFELEtBQUcsZ0dBQWhDLEVBQXNJLFNBQU9DLEVBQUV5c0QsZUFBVCxLQUEyQjFzRCxLQUFHLGlDQUE5QixFQUFpRSxVQUFRQyxFQUFFeXNELGVBQVYsS0FBNEIxc0QsS0FBRyx1QkFBL0IsRUFBd0QsYUFBV0MsRUFBRXlzRCxlQUFiLEtBQStCMXNELEtBQUcsa0NBQWxDLEVBQXNFLFlBQVVDLEVBQUV5c0QsZUFBWixLQUE4QjFzRCxLQUFHLDhEQUFqQztBQUM5YSxpQkFBV0MsRUFBRXlzRCxlQUFiLEtBQStCMXNELEtBQUcsaUVBQWxDLEVBQXVHLFVBQVFDLEVBQUV5c0QsZUFBVixLQUE0QjFzRCxLQUFHLGlFQUEvQixFQUFvRyxZQUFVQyxFQUFFeXNELGVBQVosS0FBOEIxc0QsS0FBRyx5QkFBakMsRUFBNEQsa0JBQWdCQyxFQUFFeXNELGVBQWxCLEtBQW9DMXNELEtBQUcscUJBQXZDLEVBQThELFdBQVNDLEVBQUV5c0QsZUFBWCxLQUE2QjFzRCxLQUFHLG1EQUFoQyxFQUF1RixJQUFHLGFBQVdDLEVBQUU0b0QsT0FBYixLQUF1QixTQUFPNW9ELEVBQUVnMUQsR0FBVCxLQUFlajFELEtBQUcsc0JBQWxCLEdBQTBDb29ELElBQUVub0QsRUFBRSxnQkFBRixDQUE1QyxFQUN0YixNQUFJbW9ELENBQUosSUFBTyxRQUFNQSxDQUFiLElBQWdCLFFBQU1BLENBRHlZLENBQUgsRUFDblk7QUFBQyxZQUFJRSxJQUFFLFdBQU4sQ0FBa0IsU0FBT0YsQ0FBUCxLQUFXRSxJQUFFRixDQUFiLEVBQWdCcG9ELEtBQUcsa0NBQWtDc29ELENBQWxDLEdBQW9DLFNBQXZDO0FBQWlELE9BQUVrRSxTQUFGLEtBQWMsU0FBT3ZzRCxFQUFFdXNELFNBQVQsS0FBcUJ4c0QsS0FBRyxtQkFBeEIsR0FBNkMsVUFBUUMsRUFBRXVzRCxTQUFWLEtBQXNCeHNELEtBQUcsb0JBQXpCLENBQTdDLEVBQTRGLGFBQVdDLEVBQUV1c0QsU0FBYixLQUF5QnhzRCxLQUFHLCtCQUE1QixDQUExRyxFQUF3S0MsRUFBRSxrQkFBRixNQUF3QkQsS0FBRyxxQ0FBbUNDLEVBQUUsa0JBQUYsQ0FBbkMsR0FBeUQsT0FBcEYsRUFBNkZBLEVBQUVpMUQsT0FBRixLQUFZbDFELEtBQUcsVUFBUUMsRUFBRWkxRCxPQUFWLEdBQWtCLE9BQWpDLEVBQTBDLE9BQU9sMUQsQ0FBUDtBQUFTLENBekRsYTtBQUFBLElBeURtYTJ2RCxrQkFBZ0IsU0FBaEJBLGVBQWdCLENBQVMxdkQsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVMsVUFBUUMsRUFBRWlwRCxLQUFWLEtBQWtCbHBELEtBQUcsbUNBQXJCO0FBQzNjLGVBQVNDLEVBQUVpcEQsS0FBWCxLQUFtQmxwRCxLQUFHLG9DQUF0QixFQUE4RCx1QkFBcUJDLEVBQUVpcEQsS0FBdkIsS0FBK0JscEQsS0FBRyw4Q0FBbEMsRUFBb0YsWUFBVUMsRUFBRWlwRCxLQUFaLEtBQW9CbHBELEtBQUcsbUNBQXZCLEVBQThELGFBQVdDLEVBQUVpcEQsS0FBYixLQUFxQmxwRCxLQUFHLDZDQUF4QixFQUEyRSxlQUFhQyxFQUFFaXBELEtBQWYsS0FBdUJscEQsS0FBRywyQ0FBMUIsRUFBeUUseUJBQXVCQyxFQUFFaXBELEtBQXpCLEtBQWlDbHBELEtBQUcsZ0RBQXBDLEVBQXdGLFVBQVFDLEVBQUVpcEQsS0FBVixLQUFrQmxwRCxLQUFHLDJDQUFyQjtBQUM1YixtQkFBYUMsRUFBRWlwRCxLQUFmLEtBQXVCbHBELEtBQUcsc0NBQTFCLEVBQW9FLGNBQVlDLEVBQUVpcEQsS0FBZCxLQUFzQmxwRCxLQUFHLHFDQUF6QixFQUFrRSxnQkFBY0MsRUFBRWlwRCxLQUFoQixLQUF3QmxwRCxLQUFHLHVDQUEzQixFQUFzRSxxQkFBbUJDLEVBQUVpcEQsS0FBckIsS0FBNkJscEQsS0FBRyw0Q0FBaEMsRUFBZ0YsU0FBT0MsRUFBRWlwRCxLQUFULEtBQWlCbHBELEtBQUcsZ0NBQXBCLEVBQXdELFlBQVVDLEVBQUVpcEQsS0FBWixLQUFvQmxwRCxLQUFHLG1DQUF2QixFQUE4RCxXQUFTQyxFQUFFaXBELEtBQVgsS0FBbUJscEQsS0FBRyxtQ0FBdEIsRUFBNkQsV0FBU0MsRUFBRWlwRCxLQUFYLEtBQW1CbHBELEtBQUcsa0NBQXRCO0FBQy9jLGdCQUFVQyxFQUFFaXBELEtBQVosS0FBb0JscEQsS0FBRyxrQ0FBdkIsRUFBNkQsdUJBQXFCQyxFQUFFaXBELEtBQXZCLEtBQStCbHBELEtBQUcsOENBQWxDLEVBQW9GLFdBQVNDLEVBQUVpcEQsS0FBWCxLQUFtQmxwRCxLQUFHLG9DQUF0QixFQUE4RCxXQUFTQyxFQUFFaXBELEtBQVgsS0FBbUJscEQsS0FBRyxtQ0FBdEIsRUFBNkQsa0JBQWdCQyxFQUFFaXBELEtBQWxCLEtBQTBCbHBELEtBQUcsNENBQTdCLEVBQTZFLGNBQVlDLEVBQUVpcEQsS0FBZCxLQUFzQmxwRCxLQUFHLHFDQUF6QixFQUFrRSx3QkFBc0JDLEVBQUVpcEQsS0FBeEIsS0FBZ0NscEQsS0FBRyxxQ0FBbkMsRUFBNEUsYUFBV0MsRUFBRWlwRCxLQUFiLEtBQ3RlbHBELEtBQUcsb0NBRG1lLEVBQzNiLGtCQUFnQkMsRUFBRWlwRCxLQUFsQixLQUEwQmxwRCxLQUFHLHlDQUE3QixFQUEwRSxhQUFXQyxFQUFFaXBELEtBQWIsS0FBcUJscEQsS0FBRyxvQ0FBeEIsRUFBZ0UsYUFBV0MsRUFBRWlwRCxLQUFiLEtBQXFCbHBELEtBQUcsb0NBQXhCLEVBQWdFLGFBQVdDLEVBQUVpcEQsS0FBYixLQUFxQmxwRCxLQUFHLGdEQUF4QixFQUE0RSxnQkFBY0MsRUFBRWlwRCxLQUFoQixLQUF3QmxwRCxLQUFHLHdDQUEzQixFQUF1RSxJQUFHLFdBQVNDLEVBQUVpcEQsS0FBWCxJQUFrQixVQUFRanBELEVBQUVpcEQsS0FBL0IsRUFBcUNscEQsS0FBRyxZQUFILENBQWdCLGFBQVdDLEVBQUVpcEQsS0FBYixLQUFxQmxwRCxLQUFHLG9DQUF4QjtBQUM5YixvQkFBY0MsRUFBRWlwRCxLQUFoQixLQUF3QmxwRCxLQUFHLG1DQUEzQixFQUFrRSxjQUFZQyxFQUFFaXBELEtBQWQsS0FBc0JscEQsS0FBRyw4Q0FBekIsRUFBMkUsaUJBQWVDLEVBQUVpcEQsS0FBakIsS0FBeUJscEQsS0FBRyx1Q0FBNUIsRUFBdUUsa0JBQWdCQyxFQUFFaXBELEtBQWxCLEtBQTBCbHBELEtBQUcseUNBQTdCLEVBQTBFLFVBQVFDLEVBQUVpcEQsS0FBVixLQUFrQmxwRCxLQUFHLGlDQUFyQixFQUEwRCxnQkFBY0MsRUFBRWlwRCxLQUFoQixLQUF3QmxwRCxLQUFHLHNDQUEzQixFQUFxRSxZQUFVQyxFQUFFaXBELEtBQVosS0FBb0JscEQsS0FBRyxtQ0FBdkIsRUFBOEQsZ0JBQWNDLEVBQUVpcEQsS0FBaEIsS0FBd0JscEQsS0FDL2UsMkNBRHVkLEVBQ3hhLGtCQUFnQkMsRUFBRWlwRCxLQUFsQixLQUEwQmxwRCxLQUFHLHlDQUE3QixFQUEwRSxlQUFhQyxFQUFFaXBELEtBQWYsS0FBdUJscEQsS0FBRyxnREFBMUIsRUFBZ0YsVUFBUUMsRUFBRWlwRCxLQUFWLEtBQWtCbHBELEtBQUcsaUNBQXJCLEVBQTBELGFBQVdDLEVBQUVpcEQsS0FBYixLQUFxQmxwRCxLQUFHLHVDQUF4QixFQUFtRSxpQkFBZUMsRUFBRWlwRCxLQUFqQixLQUF5QmxwRCxLQUFHLHdDQUE1QixFQUF3RSxjQUFZQyxFQUFFaXBELEtBQWQsS0FBc0JscEQsS0FBRyxxQ0FBekIsRUFBa0UsV0FBU0MsRUFBRWlwRCxLQUFYLEtBQW1CbHBELEtBQUcsdUNBQXRCO0FBQ3BkLGVBQVNDLEVBQUVpcEQsS0FBWCxLQUFtQmxwRCxLQUFHLDBDQUF0QixFQUFvRSxxQkFBbUJDLEVBQUVpcEQsS0FBckIsS0FBNkJscEQsS0FBRywwQ0FBaEMsRUFBOEUsa0JBQWdCQyxFQUFFaXBELEtBQWxCLEtBQTBCbHBELEtBQUcsOENBQTdCLEVBQStFLG1CQUFpQkMsRUFBRWlwRCxLQUFuQixLQUEyQmxwRCxLQUFHLDBDQUE5QixFQUE0RSxpQkFBZUMsRUFBRWlwRCxLQUFqQixLQUF5QmxwRCxLQUFHLCtDQUE1QixFQUErRSxZQUFVQyxFQUFFaXBELEtBQVosS0FBb0JscEQsS0FBRyxtQ0FBdkIsRUFBOEQsYUFBV0MsRUFBRWlwRCxLQUFiLEtBQXFCbHBELEtBQUcsd0NBQXhCO0FBQzFiLGdCQUFVQyxFQUFFaXBELEtBQVosS0FBb0JscEQsS0FBRyxtQ0FBdkIsRUFBOEQsa0JBQWdCQyxFQUFFaXBELEtBQWxCLEtBQTBCbHBELEtBQUcseUNBQTdCLEVBQTBFLGlCQUFlQyxFQUFFaXBELEtBQWpCLEtBQXlCbHBELEtBQUcsd0NBQTVCLEVBQXdFLGFBQVdDLEVBQUVpcEQsS0FBYixLQUFxQmxwRCxLQUFHLHNDQUF4QixFQUFrRSxrQkFBZ0JDLEVBQUVpcEQsS0FBbEIsS0FBMEJscEQsS0FBRyx5Q0FBN0IsRUFBMEUsY0FBWUMsRUFBRWlwRCxLQUFkLEtBQXNCbHBELEtBQUcsNkNBQXpCLEVBQTRFLGFBQVdDLEVBQUVpcEQsS0FBYixLQUFxQmxwRCxLQUFHLHlDQUF4QixFQUFxRSxnQkFDN2VDLEVBQUVpcEQsS0FEMmUsS0FDbmVscEQsS0FBRyx1Q0FEZ2UsRUFDcmIsWUFBVUMsRUFBRWlwRCxLQUFaLEtBQW9CbHBELEtBQUcsc0NBQXZCLEVBQWlFLFlBQVVDLEVBQUVpcEQsS0FBWixLQUFvQmxwRCxLQUFHLHVDQUF2QixFQUFvRSxhQUFXQyxFQUFFaXBELEtBQWIsS0FBcUJscEQsS0FBRyxtQ0FBeEIsRUFBK0QsY0FBWUMsRUFBRWlwRCxLQUFkLEtBQXNCbHBELEtBQUcsc0NBQXpCLEVBQW1FLGtCQUFnQkMsRUFBRWlwRCxLQUFsQixLQUEwQmxwRCxLQUFHLHdDQUE3QixFQUF5RSxlQUFhQyxFQUFFaXBELEtBQWYsS0FBdUJscEQsS0FBRyxzQ0FBMUIsRUFBb0UsbUJBQWlCQyxFQUFFaXBELEtBQW5CLEtBQTJCbHBELEtBQUcscUNBQTlCO0FBQzVjLGdCQUFVQyxFQUFFaXBELEtBQVosS0FBb0JscEQsS0FBRyxtQ0FBdkIsRUFBOEQsY0FBWUMsRUFBRWlwRCxLQUFkLEtBQXNCbHBELEtBQUcsbUNBQXpCLEVBQWdFLGdCQUFjQyxFQUFFaXBELEtBQWhCLEtBQXdCbHBELEtBQUcsdUNBQTNCLEVBQXNFLGVBQWFDLEVBQUVpcEQsS0FBZixLQUF1QmxwRCxLQUFHLHNDQUExQixFQUFvRSxtQkFBaUJDLEVBQUVpcEQsS0FBbkIsS0FBMkJscEQsS0FBRyx5Q0FBOUIsRUFBMkUsZUFBYUMsRUFBRWlwRCxLQUFmLEtBQXVCbHBELEtBQUcsbUNBQTFCLEVBQWlFLE9BQU9BLENBQVA7QUFBUyxDQW5FMVo7QUFvRUEsU0FBU20xRCxVQUFULENBQW9CbDFELENBQXBCLEVBQXNCO0FBQUMsUUFBSUQsSUFBRSxFQUFOO0FBQUEsUUFBU29vRCxJQUFFLEVBQVg7QUFBQSxRQUFjRSxJQUFFcm9ELEVBQUUsdUJBQUYsQ0FBaEIsQ0FBMkMsTUFBSXFvRCxDQUFKLEtBQVEsYUFBV0EsQ0FBWCxLQUFlRixLQUFHLHVCQUFsQixHQUEyQyxpQkFBZUUsQ0FBZixLQUFtQkYsS0FBRyxtQkFBdEIsQ0FBM0MsRUFBc0Ysa0JBQWdCRSxDQUFoQixLQUFvQkYsS0FBRyx5QkFBdkIsQ0FBdEYsRUFBMEksa0JBQWdCRSxDQUFoQixLQUFvQkYsS0FBRyxpREFBdkIsQ0FBMUksRUFBb04sNEJBQTBCRSxDQUExQixLQUE4QkYsS0FBRyxpQ0FBakMsQ0FBcE4sRUFBMFIsYUFBV0UsQ0FBWCxLQUFlRixLQUFHLDRCQUFsQixDQUExUixFQUEwVSxnQkFBY0UsQ0FBZCxLQUFrQkYsS0FBRyxrQkFBckIsQ0FBMVUsRUFBbVgscUJBQW1CRSxDQUFuQixLQUF1QkYsS0FBRyw4QkFBMUIsQ0FBblgsRUFDakYsc0JBQW9CRSxDQUFwQixLQUF3QkYsS0FBRyxrQ0FBM0IsQ0FEaUYsRUFDbEIsd0NBQXNDRSxDQUF0QyxLQUEwQ0YsS0FBRyxrREFBN0MsQ0FEa0IsRUFDK0UsaUJBQWVFLENBQWYsS0FBbUJGLEtBQUcsc0JBQXRCLENBRC9FLEVBQzZILHdCQUFzQkUsQ0FBdEIsS0FBMEJGLEtBQUcsdUNBQTdCLENBRDdILEVBQ21NLDBCQUF3QkUsQ0FBeEIsS0FBNEJGLEtBQUcsK0JBQS9CLENBRG5NLEVBQ21RLGVBQWFFLENBQWIsS0FBaUJGLEtBQUcsaUNBQXBCLENBRG5RLEVBQzBULG1CQUFpQkUsQ0FBakIsS0FBcUJGLEtBQUcscUJBQXhCLENBRDFULEVBQ3lXLGlDQUErQkUsQ0FBL0IsS0FBbUNGLEtBQUcscUNBQXRDLENBRHpXLEVBRWpGLHNCQUFvQkUsQ0FBcEIsS0FBd0JGLEtBQUcsd0JBQTNCLENBRmlGLEVBRTVCLGdCQUFjRSxDQUFkLEtBQWtCRixLQUFHLGdCQUFyQixDQUY0QixFQUVXLGlCQUFlRSxDQUFmLEtBQW1CRixLQUFHLHVDQUF0QixDQUZYLEVBRTBFLGlCQUFlRSxDQUFmLEtBQW1CRixLQUFHLGdDQUF0QixDQUYxRSxFQUVvSSxnQkFBY0UsQ0FBZCxLQUFrQkYsS0FBRyxrQkFBckIsQ0FGcEksRUFFNkssZ0JBQWNFLENBQWQsS0FBa0JGLEtBQUcsa0JBQXJCLENBRjdLLEVBRXNOLHlCQUF1QkUsQ0FBdkIsS0FBMkJGLEtBQUcsOEJBQTlCLENBRnROLEVBRW9SLGVBQWFFLENBQWIsS0FBaUJGLEtBQUcsc0JBQXBCLENBRnBSLEVBRWdVLGNBQVlFLENBQVosS0FBZ0JGLEtBQUcsa0NBQW5CLENBRmhVLEVBRXVYLDJCQUF5QkUsQ0FBekIsS0FBNkJGLEtBQUcsb0NBQWhDLENBRnZYLEVBR2pGLGdCQUFjRSxDQUFkLEtBQWtCRixLQUFHLHdCQUFyQixDQUhpRixFQUdsQyxlQUFhRSxDQUFiLEtBQWlCRixLQUFHLGlCQUFwQixDQUhrQyxFQUdLLHFCQUFtQkUsQ0FBbkIsS0FBdUJGLEtBQUcsaUNBQTFCLENBSEwsRUFHa0UscUJBQW1CRSxDQUFuQixLQUF1QkYsS0FBRyxtREFBMUIsQ0FIbEUsRUFHaUosa0JBQWdCRSxDQUFoQixLQUFvQkYsS0FBRyxxQkFBdkIsQ0FIakosRUFHK0wsYUFBV0UsQ0FBWCxLQUFlRixLQUFHLHFCQUFsQixDQUgvTCxFQUd3TyxrQkFBZ0JFLENBQWhCLEtBQW9CRixLQUFHLHNCQUF2QixDQUh4TyxFQUd1UixjQUFZRSxDQUFaLEtBQWdCRixLQUFHLGdCQUFuQixDQUh2UixFQUc0VCxtQkFBaUJFLENBQWpCLEtBQXFCRixLQUFHLHFCQUF4QixDQUg1VCxFQUcyVyxrQkFBZ0JFLENBQWhCLEtBQW9CRixLQUFHLG9CQUF2QixDQUgzVyxFQUcwWixvQkFDM2VFLENBRDJlLEtBQ3ZlRixLQUFHLGlDQURvZSxDQUgxWixFQUl2Qyx3QkFBc0JFLENBQXRCLEtBQTBCRixLQUFHLHNCQUE3QixDQUp1QyxFQUljLGlCQUFlRSxDQUFmLEtBQW1CRixLQUFHLHNCQUF0QixDQUpkLEVBSTRELGdCQUFjRSxDQUFkLEtBQWtCRixLQUFHLHVCQUFyQixDQUo1RCxFQUkwRyxlQUFhRSxDQUFiLEtBQWlCRixLQUFHLDhDQUFwQixDQUoxRyxFQUk4SyxxQkFBbUJFLENBQW5CLEtBQXVCRixLQUFHLDJCQUExQixDQUo5SyxFQUlxTyxnQkFBY0UsQ0FBZCxLQUFrQkYsS0FBRyxrQkFBckIsQ0FKck8sRUFJOFEsZ0JBQWNFLENBQWQsS0FBa0JGLEtBQUcsa0JBQXJCLENBSjlRLEVBSXVULGlCQUFlRSxDQUFmLEtBQW1CRixLQUFHLHFDQUF0QixDQUp2VCxFQUlvWCxlQUFhRSxDQUFiLEtBQWlCRixLQUFHLGlCQUFwQixDQUpwWCxFQUkyWixrQkFDNWVFLENBRDRlLEtBQ3hlRixLQUFHLHVCQURxZSxDQUozWixFQUtqRCxrQkFBZ0JFLENBQWhCLEtBQW9CRixLQUFHLG9CQUF2QixDQUxpRCxFQUtKLGlCQUFlRSxDQUFmLEtBQW1CRixLQUFHLG1CQUF0QixDQUxJLEVBS3VDLGFBQVdFLENBQVgsS0FBZUYsS0FBRyxnQkFBbEIsQ0FMdkMsRUFLMkUsdUJBQXFCRSxDQUFyQixLQUF5QkYsS0FBRyxxQkFBNUIsQ0FMM0UsRUFLOEgsc0JBQW9CRSxDQUFwQixLQUF3QkYsS0FBRyxzQkFBM0IsQ0FMOUgsRUFLaUwsZ0JBQWNFLENBQWQsS0FBa0JGLEtBQUcsOEJBQXJCLENBTGpMLEVBS3NPLFlBQVVFLENBQVYsS0FBY0YsS0FBRyxzQkFBakIsQ0FMdE8sRUFLK1EsY0FBWUUsQ0FBWixLQUFnQkYsS0FBRyxvQkFBbkIsQ0FML1EsRUFLd1QsYUFBV0UsQ0FBWCxLQUFlRixLQUFHLGVBQWxCLENBTHhULEVBSzJWLHNCQUFvQkUsQ0FBcEIsS0FBd0JGLEtBQUcsMkJBQTNCLENBTDNWLEVBS3VaLGlCQUN4ZUUsQ0FEd2UsS0FDcGVGLEtBQUcsNkJBRGllLENBTHZaLEVBTTNDLGlCQUFlRSxDQUFmLEtBQW1CRixLQUFHLGlCQUF0QixDQU4yQyxFQU1GLGlCQUFlRSxDQUFmLEtBQW1CRixLQUFHLHFCQUF0QixDQU5FLEVBTTJDLGtCQUFnQkUsQ0FBaEIsS0FBb0JGLEtBQUcsb0JBQXZCLENBTjNDLEVBTXdGLGdCQUFjRSxDQUFkLEtBQWtCRixLQUFHLHFCQUFyQixDQU54RixFQU1zSSxnQkFBY0UsQ0FBZCxLQUFrQkYsS0FBRyxrQkFBckIsQ0FOOUksRUFNd0wsTUFBSW5vRCxFQUFFbTFELGdCQUFOLEtBQXlCLFNBQU9uMUQsRUFBRSxrQ0FBRixDQUFQLEtBQStDbW9ELEtBQUcsdUJBQWxELEdBQTJFLFNBQU9ub0QsRUFBRSxxQ0FBRixDQUFQLEtBQWtEbW9ELEtBQUcscUJBQXJELENBQTNFLEVBQXVKLFNBQU9ub0QsRUFBRSxrQ0FBRixDQUFQLEtBQStDbW9ELEtBQUcsb0JBQWxELENBQXZKLEVBQzFSLFNBQU9ub0QsRUFBRSw4QkFBRixDQUFQLEtBQTJDbW9ELEtBQUcsbUJBQTlDLENBRDBSLEVBQ3ZOLFNBQU9ub0QsRUFBRSxrQ0FBRixDQUFQLEtBQStDbW9ELEtBQUcsK0JBQWxELENBRHVOLEVBQ3BJLFNBQU9ub0QsRUFBRSx3Q0FBRixDQUFQLEtBQXFEbW9ELEtBQUcsc0JBQXhELENBRG9JLEVBQ3BELFNBQU9ub0QsRUFBRSxvQ0FBRixDQUFQLEtBQWlEbW9ELEtBQUcscUJBQXBELENBRG9ELEVBQ3VCLFNBQU9ub0QsRUFBRSw0QkFBRixDQUFQLEtBQXlDbW9ELEtBQUcsaUJBQTVDLENBRHZCLEVBQ3NGLFNBQU9ub0QsRUFBRSxnQ0FBRixDQUFQLEtBQTZDbW9ELEtBQUcscUJBQWhELENBRHRGLEVBQzZKLFNBQU9ub0QsRUFBRSxzQ0FBRixDQUFQLEtBQW1EbW9ELEtBQUcsdUJBQXRELENBRDdKLEVBRTFSLFNBQU9ub0QsRUFBRSw2QkFBRixDQUFQLEtBQTBDbW9ELEtBQUcsaUJBQTdDLENBRjBSLEVBRTFOLFNBQU9ub0QsRUFBRSw4QkFBRixDQUFQLEtBQTJDbW9ELEtBQUcscUJBQTlDLENBRjBOLEVBRW5KLFNBQU9ub0QsRUFBRSwwQkFBRixDQUFQLEtBQXVDbW9ELEtBQUcsZUFBMUMsQ0FGbUosRUFFeEYsU0FBT25vRCxFQUFFLGdDQUFGLENBQVAsS0FBNkNtb0QsS0FBRyxxQkFBaEQsQ0FGd0YsRUFFakIsU0FBT25vRCxFQUFFLHlDQUFGLENBQVAsS0FBc0Rtb0QsS0FBRyxvQkFBekQsQ0FGaUIsRUFFOEQsU0FBT25vRCxFQUFFLHlDQUFGLENBQVAsS0FBc0Rtb0QsS0FBRyxzQkFBekQsQ0FGOUQsRUFFK0ksU0FBT25vRCxFQUFFLDhCQUFGLENBQVAsS0FBMkNtb0QsS0FBRywrQkFBOUMsQ0FGL0ksRUFHMVIsU0FBT25vRCxFQUFFLDRCQUFGLENBQVAsS0FBeUNtb0QsS0FBRywrQ0FBNUMsQ0FIMFIsRUFHN0wsU0FBT25vRCxFQUFFLDRCQUFGLENBQVAsS0FBeUNtb0QsS0FBRyxpQkFBNUMsQ0FINkwsRUFHOUgsU0FBT25vRCxFQUFFLDBCQUFGLENBQVAsS0FBdUNtb0QsS0FBRyx1QkFBMUMsQ0FIOEgsRUFHM0QsU0FBT25vRCxFQUFFLHVDQUFGLENBQVAsS0FBb0Rtb0QsS0FBRyxtQkFBdkQsQ0FIMkQsRUFHaUIsU0FBT25vRCxFQUFFLDhCQUFGLENBQVAsS0FBMkNtb0QsS0FBRyxrQkFBOUMsQ0FIakIsRUFHbUYsU0FBT25vRCxFQUFFLDhCQUFGLENBQVAsS0FBMkNtb0QsS0FBRyxpQkFBOUMsQ0FIbkYsRUFHb0osU0FBT25vRCxFQUFFLCtCQUFGLENBQVAsS0FBNENtb0QsS0FBRyxvQkFBL0MsQ0FIcEosRUFJMVIsU0FBT25vRCxFQUFFLCtCQUFGLENBQVAsS0FBNENtb0QsS0FBRyxtQkFBL0MsQ0FKMFIsRUFJdE4sU0FBT25vRCxFQUFFLGtDQUFGLENBQVAsS0FBK0Ntb0QsS0FBRyxtQkFBbEQsQ0FKNkwsRUFJckgsTUFBSUEsQ0FBSixLQUFRcG9ELElBQUVBLElBQUUsZUFBRixJQUFtQixnQ0FBOEJvb0QsQ0FBOUIsR0FBZ0MsUUFBbkQsQ0FBVixFQUF3RSxPQUFPcG9ELENBQVA7QUFBUztBQUN0TixTQUFTMHdELGVBQVQsQ0FBeUJ6d0QsQ0FBekIsRUFBMkI7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxJQUFHQyxFQUFFLGtCQUFGLENBQUgsRUFBeUI7QUFBQ0QsYUFBRyxpQkFBSCxDQUFxQixRQUFPQyxFQUFFLGtCQUFGLENBQVAsR0FBOEIsS0FBSyxZQUFMO0FBQWtCRCxxQkFBRyxhQUFILENBQWlCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLHFCQUFHLHdDQUFILENBQTRDLE1BQU0sS0FBSyxTQUFMO0FBQWVBLHFCQUFHLGdEQUFILENBQW9ELE1BQU0sS0FBSyxjQUFMO0FBQW9CQSxxQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxjQUFMO0FBQW9CQSxxQkFBRywrQkFBSCxDQUFtQyxNQUFNLEtBQUsscUJBQUw7QUFBMkJBLHFCQUFHLHlDQUFILENBQStDLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxxQkFBRywrQ0FBSDtBQUNsZixzQkFBTSxLQUFLLFNBQUw7QUFBZUEscUJBQUcsY0FBSCxDQUFrQixNQUFNLEtBQUssUUFBTDtBQUFjQSxxQkFBRyxZQUFILENBQWdCLE1BQU07QUFBUUEscUJBQUcsZ0JBQUgsQ0FERixDQUNzQkEsS0FBRyxPQUFIO0FBQVcsU0FBR0MsRUFBRW91RCxZQUFMLEVBQWtCO0FBQUNydUQsYUFBRyxpQkFBSCxDQUFxQixRQUFPQyxFQUFFb3VELFlBQVQsR0FBdUIsS0FBSyxjQUFMO0FBQW9CcnVELHFCQUFHLGNBQUgsQ0FBa0IsTUFBTTtBQUFRQSxxQkFBRyxnQkFBSCxDQUEzRSxDQUErRkEsS0FBRyxPQUFIO0FBQVcsT0FBRSw4QkFBRixNQUFvQ0EsS0FBRyw4QkFBNEJDLEVBQUUsOEJBQUYsQ0FBNUIsR0FBOEQsT0FBckcsRUFBOEdBLEVBQUUsdUJBQUYsTUFBNkJELEtBQUcsOEJBQTRCQyxFQUFFLHVCQUFGLENBQTVCLEdBQXVELE9BQXZGLEVBQWdHQSxFQUFFLHVCQUFGLE1BQTZCRCxLQUNyZiw4QkFBNEJDLEVBQUUsdUJBQUYsQ0FBNUIsR0FBdUQsT0FEaWEsRUFDeFpBLEVBQUUsa0JBQUYsTUFBd0JELEtBQUcsbUJBQWlCQyxFQUFFLGtCQUFGLENBQWpCLEdBQXVDLE9BQWxFLEVBQTJFQSxFQUFFLDBCQUFGLE1BQWdDRCxLQUFHLCtCQUE2QkMsRUFBRSwwQkFBRixDQUE3QixHQUEyRCxPQUE5RixFQUF1R0EsRUFBRSw2QkFBRixNQUFtQ0QsS0FBRywrQkFBNkJDLEVBQUUsNkJBQUYsQ0FBN0IsR0FBOEQsT0FBcEcsRUFBNkdBLEVBQUUsMkJBQUYsTUFBaUNELEtBQUcsK0JBQTZCQyxFQUFFLDJCQUFGLENBQTdCLEdBQTRELE9BQWhHLEVBQXlHQSxFQUFFLGlDQUFGLE1BQXVDRCxLQUFHLCtCQUNsZkMsRUFBRSxpQ0FBRixDQURrZixHQUM3YyxPQURtYSxFQUMxWkEsRUFBRSx3QkFBRixNQUE4QkQsS0FBRywrQkFBNkJDLEVBQUUsd0JBQUYsQ0FBN0IsR0FBeUQsT0FBMUYsRUFBbUdBLEVBQUUseUJBQUYsTUFBK0JELEtBQUcsK0JBQTZCQyxFQUFFLHlCQUFGLENBQTdCLEdBQTBELE9BQTVGLEVBQXFHQSxFQUFFLG1DQUFGLE1BQXlDRCxLQUFHLCtCQUE2QkMsRUFBRSxtQ0FBRixDQUE3QixHQUFvRSxPQUFoSCxFQUF5SCxTQUFPQSxFQUFFLGdCQUFGLENBQVAsS0FBNkJELEtBQUcsbUJBQWlCQyxFQUFFLGdCQUFGLENBQWpCLEdBQXFDLE9BQXJFLEVBQThFLFdBQVNBLEVBQUUsZ0JBQUYsQ0FBVCxLQUErQkQsS0FBRyxtQkFBaUJDLEVBQUUsZ0JBQUYsQ0FBakIsR0FDL2QsT0FENmIsRUFDcGIsV0FBU0EsRUFBRSxnQkFBRixDQUFULEtBQStCRCxLQUFHLG1CQUFpQkMsRUFBRSxnQkFBRixDQUFqQixHQUFxQyxPQUF2RSxFQUFnRixXQUFTQSxFQUFFLGdCQUFGLENBQVQsS0FBK0JELEtBQUcsbUJBQWlCQyxFQUFFLGdCQUFGLENBQWpCLEdBQXFDLE9BQXZFLEVBQWdGLFdBQVNBLEVBQUUsZ0JBQUYsQ0FBVCxLQUErQkQsS0FBRyxtQkFBaUJDLEVBQUUsZ0JBQUYsQ0FBakIsR0FBcUMsT0FBdkUsRUFBZ0YsV0FBU0EsRUFBRSxnQkFBRixDQUFULEtBQStCRCxLQUFHLG1CQUFpQkMsRUFBRSxnQkFBRixDQUFqQixHQUFxQyxPQUF2RSxFQUFnRixXQUFTQSxFQUFFLGdCQUFGLENBQVQsS0FBK0JELEtBQUcsbUJBQWlCQyxFQUFFLGdCQUFGLENBQWpCLEdBQXFDLE9BQXZFLEVBQWdGLFVBQVFBLEVBQUUsZ0JBQUYsQ0FBUixLQUE4QkQsS0FBRyxtQkFBaUJDLEVBQUUsZ0JBQUYsQ0FBakIsR0FBcUMsT0FBdEUsRUFBK0UsU0FBT0EsRUFBRSxnQkFBRixDQUFQLEtBQzNlRCxLQUFHLG1CQUFpQkMsRUFBRSxnQkFBRixDQUFqQixHQUFxQyxPQURtYyxFQUMxYixTQUFPQSxFQUFFLGdCQUFGLENBQVAsS0FBNkJELEtBQUcsbUJBQWlCQyxFQUFFLGdCQUFGLENBQWpCLEdBQXFDLE9BQXJFLEVBQThFLGVBQWFBLEVBQUUsZ0JBQUYsQ0FBYixLQUFtQ0QsS0FBRyxtQkFBaUJDLEVBQUUsZ0JBQUYsQ0FBakIsR0FBcUMsT0FBM0UsRUFBb0YsZUFBYUEsRUFBRSxnQkFBRixDQUFiLEtBQW1DRCxLQUFHLG1CQUFpQkMsRUFBRSxnQkFBRixDQUFqQixHQUFxQyxPQUEzRSxFQUFvRixVQUFRQSxFQUFFLGdCQUFGLENBQVIsS0FBOEJELEtBQUcsbUJBQWlCQyxFQUFFLGdCQUFGLENBQWpCLEdBQXFDLE9BQXRFLEVBQStFLFdBQVNBLEVBQUUsZ0JBQUYsQ0FBVCxLQUErQkQsS0FBRyxtQkFBaUJDLEVBQUUsZ0JBQUYsQ0FBakIsR0FBcUMsT0FBdkUsRUFBZ0YsY0FBWUEsRUFBRSxnQkFBRixDQUFaLEtBQWtDRCxLQUFHLG1CQUN4ZUMsRUFBRSxnQkFBRixDQUR3ZSxHQUNwZCxPQUQrYSxFQUN0YSxTQUFPQSxFQUFFLGdCQUFGLENBQVAsS0FBNkJELEtBQUcsbUJBQWlCQyxFQUFFLGdCQUFGLENBQWpCLEdBQXFDLE9BQXJFLEVBQThFLGFBQVdBLEVBQUUsZ0JBQUYsQ0FBWCxLQUFpQ0QsS0FBRyxtQkFBaUJDLEVBQUUsZ0JBQUYsQ0FBakIsR0FBcUMsT0FBekUsRUFBa0YsaUJBQWVBLEVBQUUsZ0JBQUYsQ0FBZixLQUFxQ0QsS0FBRyxtQkFBaUJDLEVBQUUsZ0JBQUYsQ0FBakIsR0FBcUMsT0FBN0UsRUFBc0YsU0FBT0EsRUFBRSxnQkFBRixDQUFQLEtBQTZCRCxLQUFHLG1CQUFpQkMsRUFBRSxnQkFBRixDQUFqQixHQUFxQyxPQUFyRSxFQUE4RSxpQkFBZUEsRUFBRSxnQkFBRixDQUFmLEtBQXFDRCxLQUFHLG1CQUFpQkMsRUFBRSxnQkFBRixDQUFqQixHQUFxQyxPQUE3RSxFQUFzRixrQkFBZ0JBLEVBQUUsa0JBQUYsQ0FBaEIsSUFBdUMscUJBQW1CQSxFQUFFLGdCQUFGLENBQTFELEtBQzFiRCxLQUFHLHdEQUR1YixFQUM3WCxrQkFBZ0JDLEVBQUUsa0JBQUYsQ0FBaEIsSUFBdUMsc0JBQW9CQSxFQUFFLGdCQUFGLENBQTNELEtBQWlGRCxLQUFHLGtDQUFwRixFQUF3SCxxQkFBbUJDLEVBQUUsZ0JBQUYsQ0FBbkIsS0FBeUNELEtBQUcsb0NBQTVDLEVBQWtGLG9CQUFrQkMsRUFBRSxnQkFBRixDQUFsQixLQUF3Q0QsS0FBRyxtQ0FBM0MsRUFBZ0Ysb0JBQWtCQyxFQUFFLGdCQUFGLENBQWxCLEtBQXdDRCxLQUFHLG1DQUEzQyxFQUFnRixZQUFVQyxFQUFFLGtCQUFGLENBQVYsSUFBaUMscUJBQW1CQSxFQUFFLGdCQUFGLENBQXBELEtBQTBFRCxLQUM5ZSxrRUFEb2EsRUFDaFcsWUFBVUMsRUFBRSxrQkFBRixDQUFWLElBQWlDLG1CQUFpQkEsRUFBRSxnQkFBRixDQUFsRCxLQUF3RUQsS0FBRyxnRUFBM0UsRUFBNkksbUJBQWlCQyxFQUFFLGdCQUFGLENBQWpCLEtBQXVDRCxLQUFHLGlDQUExQyxFQUE2RSxlQUFhQyxFQUFFLGdCQUFGLENBQWIsS0FBbUNELEtBQUcsa0NBQXRDLEVBQTRFLDZCQUEyQkMsRUFBRSxnQkFBRixDQUEzQixLQUFpREQsS0FBRyxvQ0FBcEQsRUFBMEYsOEJBQTRCQyxFQUFFLGdCQUFGLENBQTVCLEtBQ3ZjRCxLQUFHLHdDQURvYyxFQUMxWixxQkFBbUJDLEVBQUUsZ0JBQUYsQ0FBbkIsS0FBeUNELEtBQUcsbUNBQTVDLEVBQWlGLGlCQUFlQyxFQUFFLGdCQUFGLENBQWYsS0FBcUNELEtBQUcsK0JBQXhDLEVBQXlFLG9CQUFrQkMsRUFBRSxnQkFBRixDQUFsQixLQUF3Q0QsS0FBRyxtQ0FBM0MsRUFBZ0YsMEJBQXdCQyxFQUFFLGdCQUFGLENBQXhCLEtBQThDRCxLQUFHLHlEQUFqRCxFQUE0RyxPQUFPQSxDQUFQO0FBQVM7QUFDdFksU0FBUzR3RCxlQUFULENBQXlCM3dELENBQXpCLEVBQTJCO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVMsSUFBRyxlQUFhQyxFQUFFNHFELGNBQWYsSUFBK0IsWUFBVTVxRCxFQUFFNHFELGNBQTNDLElBQTJELGVBQWE1cUQsRUFBRTRvRCxPQUE3RSxFQUFxRixTQUFPNW9ELEVBQUUsaUJBQUYsQ0FBUCxLQUE4QkQsS0FBRyx1QkFBakMsR0FBMEQsU0FBT0MsRUFBRSxpQkFBRixDQUFQLEtBQThCRCxLQUFHLHNCQUFqQyxDQUExRCxFQUFtSCxTQUFPQyxFQUFFLHVCQUFGLENBQVAsS0FBb0NELEtBQUcsOEJBQXZDLENBQW5ILEVBQTRMLFNBQU9DLEVBQUUsaUJBQUYsQ0FBUCxLQUE4QkQsS0FBRyx1QkFBakMsQ0FBNUwsRUFBc1AsU0FBT0MsRUFBRSxzQkFBRixDQUFQLEtBQW1DRCxLQUFHLHdEQUF0QyxDQUF0UCxFQUEwVixTQUFPQyxFQUFFLG1CQUFGLENBQVAsS0FBZ0NELEtBQ3ZmLDBCQUR1ZCxDQUExVixFQUNqRyxTQUFPQyxFQUFFLHlCQUFGLENBQVAsS0FBc0NELEtBQUcsZ0NBQXpDLENBRGlHLEVBQ3RCLFNBQU9DLEVBQUUsZ0JBQUYsQ0FBUCxLQUE2QkQsS0FBRywyQkFBaEMsQ0FEc0IsRUFDdUMsU0FBT0MsRUFBRSx1QkFBRixDQUFQLEtBQW9DRCxLQUFHLDBCQUF2QyxDQUR2QyxFQUMwRyxTQUFPQyxFQUFFLG1CQUFGLENBQVAsS0FBZ0NELEtBQUcsd0JBQW5DLENBRDFHLEVBQ3VLLFNBQU9DLEVBQUUsc0JBQUYsQ0FBUCxLQUFtQ0QsS0FBRyx5QkFBdEMsQ0FEdkssRUFDd08sU0FBT0MsRUFBRSwyQkFBRixDQUFQLEtBQXdDRCxLQUFHLGdDQUEzQyxDQUR4TyxFQUNxVCxTQUFPQyxFQUFFLHVCQUFGLENBQVAsS0FBb0NELEtBQUcsd0JBQXZDLENBRHJULEVBRWpJLFNBQU9DLEVBQUUsb0JBQUYsQ0FBUCxLQUFpQ0QsS0FBRyxrREFBcEMsQ0FGaUksQ0FFdkMsT0FBT0EsQ0FBUDtBQUFTO0FBQ25HLElBQUlxdkQsK0JBQTZCLFNBQTdCQSw0QkFBNkIsQ0FBU3B2RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBU0MsRUFBRW9nQixLQUFGLEtBQVVyZ0IsS0FBRyxhQUFXQyxFQUFFb2dCLEtBQWIsR0FBbUIsU0FBaEMsRUFBMkNwZ0IsRUFBRTZoQixNQUFGLEtBQVc5aEIsS0FBRyxjQUFjQyxFQUFFNmhCLE1BQWhCLEdBQXVCLFNBQXJDLEVBQWdEN2hCLEVBQUVvMUQsUUFBRixLQUFhcjFELEtBQUcsb0JBQWtCQyxFQUFFbzFELFFBQXBCLEdBQTZCLFNBQTdDLEVBQXdEcDFELEVBQUVxMUQsU0FBRixLQUFjdDFELEtBQUcscUJBQXFCQyxFQUFFcTFELFNBQXZCLEdBQWlDLFNBQWxELEVBQTZEcjFELEVBQUVxMEQsU0FBRixLQUFjdDBELEtBQUcscUJBQW1CQyxFQUFFcTBELFNBQXJCLEdBQStCLFNBQWhELEVBQTJEcjBELEVBQUU0MEQsUUFBRixLQUFhNzBELEtBQUcsK0JBQStCQyxFQUFFNDBELFFBQWpDLEdBQTBDLFlBQTFELEVBQXdFNTBELEVBQUVzMUQsT0FBRixLQUFZdjFELEtBQUcsbUJBQWlCQyxFQUFFczFELE9BQW5CLEdBQTJCLE9BQTFDLEVBQW1EdDFELEVBQUV1MUQsT0FBRixLQUFZeDFELEtBQUcsbUJBQWlCQyxFQUFFdTFELE9BQW5CLEdBQTJCLE9BQTFDLEVBQW1ELFNBQy9ldjFELEVBQUV3MUQsTUFENmUsS0FDcGV6MUQsS0FBRywwQkFEaWUsRUFDbmMsU0FBT0MsRUFBRXkxRCxLQUFULEtBQWlCMTFELEtBQUcsWUFBcEIsRUFBa0NDLEVBQUUwMUQsR0FBRixLQUFRMzFELEtBQUcseUJBQTJCQyxFQUFFMDFELEdBQTdCLEdBQWlDLFNBQTVDLEVBQXVEMTFELEVBQUUsZUFBRixNQUFxQkQsS0FBRyxzQkFBb0JDLEVBQUUsZUFBRixDQUFwQixHQUF1QyxPQUEvRCxFQUF3RUEsRUFBRSxnQkFBRixNQUFzQkQsS0FBRyx1QkFBcUJDLEVBQUUsZ0JBQUYsQ0FBckIsR0FBeUMsU0FBbEUsRUFBNkVBLEVBQUUsV0FBRixNQUFpQkQsS0FBRyxjQUFZQyxFQUFFLFdBQUYsQ0FBWixHQUEyQixPQUEvQyxFQUF3RCxVQUFRQSxFQUFFLGlDQUFGLENBQVIsS0FBK0NELEtBQUcsZUFBbEQsRUFBbUUsZUFBYUMsRUFBRSxpQ0FBRixDQUFiLEtBQW9ERCxLQUFHLGlCQUF2RCxFQUEwRSxTQUFPQyxFQUFFLHdCQUFGLENBQVAsS0FDOWRELEtBQUcscUJBRDJkLEVBQ3BjLFNBQU9DLEVBQUUsd0JBQUYsQ0FBUCxLQUFxQ0QsS0FBRyx1QkFBeEMsRUFBaUUsU0FBT0MsRUFBRSx3QkFBRixDQUFQLEtBQXFDRCxLQUFHLHFCQUF4QyxFQUErRCxTQUFPQyxFQUFFLHNCQUFGLENBQVAsS0FBbUNELEtBQUcsMkNBQXRDLEVBQXFGLFNBQU9DLEVBQUUscUJBQUYsQ0FBUCxLQUFrQ0QsS0FBRyx3Q0FBckMsRUFBaUYsU0FBT0MsRUFBRSwwQkFBRixDQUFQLEtBQXVDRCxLQUFHLG9DQUExQyxFQUFrRixTQUFPQyxFQUFFLDZCQUFGLENBQVAsS0FBMENELEtBQUcsNENBQTdDLEVBQTZGLFNBQ2hmQyxFQUFFLDBCQUFGLENBRGdmLEtBQ2hkRCxLQUFHLG9EQUQ2YyxFQUNuWixTQUFPQyxFQUFFMjFELElBQVQsS0FBZ0I1MUQsS0FBRywwQkFBbkIsRUFBaUQsU0FBT0MsRUFBRTQxRCxTQUFULEtBQXFCNzFELEtBQUcseUNBQXhCLEVBQXVFLFNBQU9DLEVBQUU2MUQsS0FBVCxLQUFpQjkxRCxLQUFHLGlDQUFwQixFQUF1RCxTQUFPQyxFQUFFODFELGNBQVQsS0FBMEIvMUQsS0FBRywyQ0FBN0IsRUFBNEUsU0FBT0MsRUFBRSsxRCxlQUFULEtBQTJCaDJELEtBQUcsOENBQTlCLEVBQWtGLFNBQU9DLEVBQUVnMkQsWUFBVCxLQUF3QmoyRCxLQUFHLGtDQUEzQixFQUFpRSxTQUFPQyxFQUFFaTJELFNBQVQsS0FDMWVsMkQsS0FBRyxnQkFEdWUsRUFDcmQsU0FBT0MsRUFBRWsyRCxXQUFULEtBQXVCbjJELEtBQUcsbUNBQTFCLEVBQWlFLFNBQU9DLEVBQUVtMkQsVUFBVCxLQUFzQnAyRCxLQUFHLDhDQUF6QixFQUF5RSxVQUFRQyxFQUFFbTJELFVBQVYsS0FBdUJwMkQsS0FBRyw4REFBMUIsRUFBNEYsUUFBTUMsRUFBRW0yRCxVQUFSLEtBQXFCcDJELEtBQUcsNkNBQXhCLEVBQXVFLE9BQU9BLENBQVA7QUFBUyxDQUo1VTtBQUFBLElBSTZVc3ZELHNCQUFvQixTQUFwQkEsbUJBQW9CLENBQVNydkQsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVMsSUFBRyxhQUFXQyxFQUFFNG9ELE9BQWIsSUFBc0IsZUFBYTVvRCxFQUFFbXNELE1BQXJDLElBQTZDLFlBQVVuc0QsRUFBRXVxRCxVQUE1RCxFQUF1RXhxRCxLQUFHbTFELFdBQVdsMUQsQ0FBWCxDQUFILEVBQWlCQSxFQUFFbzJELFlBQUYsS0FBaUJyMkQsS0FBR0MsRUFBRW8yRCxZQUFGLEdBQWUsT0FBbkMsQ0FBakIsRUFDN2JwMkQsRUFBRW1PLElBQUYsS0FBU3BPLEtBQUdDLEVBQUVtTyxJQUFGLEdBQU8sT0FBbkIsQ0FENmIsRUFDamFuTyxFQUFFLFlBQUYsTUFBa0JELEtBQUdDLEVBQUUsWUFBRixJQUFnQixPQUFyQyxDQURpYSxFQUNuWEEsRUFBRSxTQUFGLE1BQWVELEtBQUdDLEVBQUUsU0FBRixJQUFhLE9BQS9CLENBRG1YLENBQzNVLFNBQU9BLEVBQUVxMkQsVUFBVCxLQUFzQnQyRCxLQUFHLHNDQUF6QixFQUFtRSxZQUFVQyxFQUFFLHFCQUFGLENBQVYsS0FBcUNELEtBQUcsbUVBQXhDLEVBQStHLFdBQVNDLEVBQUUscUJBQUYsQ0FBVCxLQUFvQ0QsS0FBRyxpQ0FBdkMsRUFBNEUsY0FBWUMsRUFBRSxxQkFBRixDQUFaLEtBQXVDRCxLQUFHLGtGQUExQyxFQUFrSSxjQUNsZkMsRUFBRSxxQkFBRixDQURrZixLQUN2ZEQsS0FBRyw2Q0FEb2QsRUFDbmEsbUJBQWlCQyxFQUFFLHFCQUFGLENBQWpCLEtBQTRDRCxLQUFHLDRDQUEvQyxFQUFpRyxjQUFZQyxFQUFFLHFCQUFGLENBQVosS0FBdUNELEtBQUcscUNBQTFDLEVBQW1GLGNBQVlDLEVBQUUscUJBQUYsQ0FBWixLQUF1Q0QsS0FBRyxtREFBMUMsRUFBaUcsbUJBQWlCQyxFQUFFLHFCQUFGLENBQWpCLEtBQTRDRCxLQUFHLDZEQUEvQyxFQUFnSCxhQUFXQyxFQUFFLHFCQUFGLENBQVgsS0FDbmRELEtBQUcsNkRBRGdkLEVBQy9ZLFlBQVVDLEVBQUUscUJBQUYsQ0FBVixLQUFxQ0QsS0FBRyxpQ0FBeEMsRUFBNkUsWUFBVUMsRUFBRSxxQkFBRixDQUFWLEtBQXFDRCxLQUFHLG1DQUF4QyxFQUErRSxxQkFBbUJDLEVBQUUscUJBQUYsQ0FBbkIsS0FBOENELEtBQUcsNERBQWpELEVBQWlILGdCQUFjQyxFQUFFLHFCQUFGLENBQWQsS0FBeUNELEtBQUcsc0NBQTVDLEVBQXNGLFlBQVVDLEVBQUUscUJBQUYsQ0FBVixLQUFxQ0QsS0FBRyxrREFBeEM7QUFDcGEsV0FBT0EsQ0FBUDtBQUFTLENBUmI7QUFTTyxTQUFTeXdELHlCQUFULENBQW1DeHdELENBQW5DLEVBQXFDO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVNDLEVBQUUsZ0JBQUYsTUFBc0JELEtBQUcsdUJBQXVCQyxFQUFFLGdCQUFGLENBQXZCLEdBQTJDLE9BQXBFLEVBQTZFQSxFQUFFLGlCQUFGLE1BQXVCRCxLQUFHLHlCQUEyQkMsRUFBRSxpQkFBRixDQUEzQixHQUFnRCxTQUExRSxFQUFxRkEsRUFBRSxnQkFBRixNQUFzQkQsS0FBRyxZQUFVQyxFQUFFLGdCQUFGLENBQVYsR0FBOEIsT0FBdkQsRUFBZ0VBLEVBQUUsZUFBRixNQUFxQkQsS0FBRyxzQkFBc0JDLEVBQUUsZUFBRixDQUF0QixHQUF5QyxPQUFqRSxFQUEwRUEsRUFBRSxZQUFGLE1BQWtCRCxLQUFHLGdCQUFjQyxFQUFFLGFBQUYsQ0FBZCxHQUErQixPQUFwRCxFQUE2REEsRUFBRSxZQUFGLE1BQWtCRCxLQUFHLGVBQWFDLEVBQUUsWUFBRixDQUFiLEdBQTZCLE9BQWxELEVBQTJEQSxFQUFFLGFBQUYsTUFBbUJELEtBQUcsa0JBQWtCQyxFQUFFLGFBQUYsQ0FBbEIsR0FDNWUsU0FEc2QsRUFDM2NBLEVBQUUsZUFBRixNQUFxQkQsS0FBRyxtQkFBaUJDLEVBQUUsZUFBRixDQUFqQixHQUFvQyxRQUE1RCxFQUFzRUEsRUFBRSxrQkFBRixNQUF3QkQsS0FBRyxzQkFBb0JDLEVBQUUsa0JBQUYsQ0FBcEIsR0FBMEMsUUFBckUsRUFBK0VBLEVBQUUsZ0JBQUYsTUFBc0JELEtBQUcsc0JBQW9CQyxFQUFFLGdCQUFGLENBQXBCLEdBQXdDLFFBQWpFLEVBQTJFQSxFQUFFLGVBQUYsTUFBcUJELEtBQUcscUJBQXFCQyxFQUFFLGVBQUYsQ0FBckIsR0FBd0MsT0FBaEUsRUFBeUUsT0FBT0QsQ0FBUDtBQUFTO0FBQzFULFNBQVN3d0Qsc0JBQVQsQ0FBZ0N2d0QsQ0FBaEMsRUFBa0M7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxrQkFBZ0JDLEVBQUU0dEQsUUFBbEIsS0FBNkIsWUFBVTV0RCxFQUFFczJELFlBQVosS0FBMkJ2MkQsS0FBRyxnQ0FBOUIsR0FBa0UsYUFBV0MsRUFBRXMyRCxZQUFiLEtBQTRCdjJELEtBQUcsbUNBQS9CLENBQWxFLEVBQTBJLFlBQVVDLEVBQUVzMkQsWUFBWixLQUEyQnYyRCxLQUFHLCtCQUE5QixDQUExSSxFQUE2TSxZQUFVQyxFQUFFLG1CQUFGLENBQVYsS0FBbUNELEtBQUcsNEJBQXRDLENBQTdNLEVBQW1SLFdBQVNDLEVBQUUsbUJBQUYsQ0FBVCxLQUFrQ0QsS0FBRyxnQ0FBckMsQ0FBblIsRUFBOFYsVUFBUUMsRUFBRSxtQkFBRixDQUFSLEtBQWlDRCxLQUFHLDBCQUFwQyxDQUE5VixFQUFnYSxVQUFRQyxFQUFFLG1CQUFGLENBQVIsS0FDL2VELEtBQUcsNkJBRDRlLENBQWhhLEVBQzNDLGFBQVdDLEVBQUUsbUJBQUYsQ0FBWCxLQUFvQ0QsS0FBRyxtQ0FBdkMsQ0FEMkMsRUFDbUMsYUFBV0MsRUFBRSxtQkFBRixDQUFYLEtBQW9DRCxLQUFHLGlDQUF2QyxDQURuQyxFQUMrRyxVQUFRQyxFQUFFLG1CQUFGLENBQVIsS0FBaUNELEtBQUcsK0JBQXBDLENBRC9HLEVBQ3NMLFVBQVFDLEVBQUUsbUJBQUYsQ0FBUixLQUFpQ0QsS0FBRyw4QkFBcEMsQ0FEdEwsRUFDNFAsY0FBWUMsRUFBRSxtQkFBRixDQUFaLEtBQXFDRCxLQUFHLG9DQUF4QyxDQUR6UixFQUM0VyxPQUFPQSxDQUFQO0FBQVM7QUFDamEsU0FBUzZ6RCxXQUFULENBQXFCNXpELENBQXJCLEVBQXVCO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVMsV0FBU0MsRUFBRThvRCxRQUFYLEtBQXNCOW9ELEVBQUUsaUJBQUYsTUFBdUJELEtBQUcsa0JBQWdCQyxFQUFFLGlCQUFGLENBQWhCLEdBQXFDLE9BQS9ELEdBQXdFQSxFQUFFLGFBQUYsTUFBbUJELEtBQUcsWUFBVUMsRUFBRSxhQUFGLENBQVYsR0FBMkIsT0FBakQsQ0FBeEUsRUFBa0lBLEVBQUUsaUJBQUYsTUFBdUJELEtBQUcsZUFBYUMsRUFBRSxpQkFBRixDQUFiLEdBQWtDLE9BQTVELENBQWxJLEVBQXVNQSxFQUFFLHlCQUFGLE1BQStCRCxLQUFHLHFCQUFtQkMsRUFBRSx5QkFBRixDQUFuQixHQUFnRCxPQUFsRixDQUF2TSxFQUFrU0EsRUFBRSxxQkFBRixNQUEyQkQsS0FBRyxjQUFZQyxFQUFFLHFCQUFGLENBQVosR0FBcUMsT0FBbkUsQ0FBbFMsRUFBOFdBLEVBQUUsY0FBRixNQUFvQkQsS0FBRyxlQUFlQyxFQUFFLGNBQUYsQ0FBZixHQUFpQyxPQUF4RCxDQUE5VyxFQUErYUEsRUFBRSxhQUFGLE1BQzVlRCxLQUFHLGFBQVdDLEVBQUUsYUFBRixDQUFYLEdBQTRCLE9BRDZjLENBQS9hLEVBQ3JCQSxFQUFFLGFBQUYsTUFBbUJELElBQUUsWUFBVUMsRUFBRSxhQUFGLENBQVYsR0FBMkJELElBQUUsbUJBQTdCLEdBQWlELFVBQVFDLEVBQUUsYUFBRixDQUFSLEdBQXlCRCxJQUFFLG9CQUEzQixHQUFnREEsS0FBRyxhQUFXQyxFQUFFLGFBQUYsQ0FBWCxHQUE0QixPQUEvQixDQUF0SCxDQURxQixFQUMwSSxTQUFPQSxFQUFFLDJCQUFGLENBQVAsS0FBd0NELEtBQUcscUNBQTNDLENBRDFJLEVBQzROLFFBQU1DLEVBQUUsMkJBQUYsQ0FBTixLQUF1Q0QsS0FBRyx1Q0FBMUMsQ0FENU4sRUFDK1MsU0FBT0MsRUFBRSw0QkFBRixDQUFQLEtBQXlDRCxLQUFHLGtDQUE1QyxDQUQvUyxFQUMrWCxRQUFNQyxFQUFFLDRCQUFGLENBQU4sS0FBd0NELEtBQUcsb0NBQTNDLENBRC9YLEVBRTlELFNBQU9DLEVBQUV1MkQsTUFBVCxLQUFrQngyRCxLQUFHLHlCQUFyQixDQUY4RCxFQUVaLFFBQU1DLEVBQUV1MkQsTUFBUixLQUFpQngyRCxLQUFHLCtCQUFwQixDQUZZLEVBRTJDLHFCQUFtQkMsRUFBRXUyRCxNQUFyQixLQUE4QngyRCxLQUFHLGtDQUFqQyxDQUZqRSxFQUV1SSxPQUFPQSxDQUFQO0FBQVM7QUFDakwsU0FBU3V3RCxtQkFBVCxDQUE2QnR3RCxDQUE3QixFQUErQjtBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTLElBQUdDLEVBQUUsZ0JBQUYsQ0FBSCxFQUF1QixRQUFPQSxFQUFFLGdCQUFGLENBQVAsR0FBNEIsS0FBSyxXQUFMO0FBQWlCRCxpQkFBRyxvREFBSCxDQUEwRCxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxpREFBSCxDQUF1RCxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRywrQkFBSCxDQUFtQyxNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsNkNBQUgsQ0FBcUQsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLG1DQUFILENBQXVDLE1BQU07QUFBUUEsaUJBQUcscUJBQUgsQ0FBblksQ0FBNFpDLEVBQUUsa0JBQUYsTUFBd0IsVUFDM2ZBLEVBQUUsa0JBQUYsQ0FEMmYsS0FDbmVELEtBQUcsd0NBRGdlLEdBQ3BiLFlBQVVDLEVBQUUsa0JBQUYsQ0FBVixLQUFrQ0QsS0FBRyxxQ0FBckMsQ0FENFosRUFDL1VDLEVBQUV3MkQsY0FBRixLQUFtQixXQUFTeDJELEVBQUV3MkQsY0FBWCxHQUEwQnoyRCxLQUFHLGdDQUE3QixHQUFnRSxXQUFTQyxFQUFFdzJELGNBQVgsS0FBNEJ6MkQsS0FBRyxtQ0FBL0IsQ0FBbkYsRUFBMEosU0FBT0MsRUFBRXkyRCxNQUFULEtBQWtCMTJELEtBQUcsb0RBQXJCLEVBQTJFLFNBQU9DLEVBQUUwMkQsU0FBVCxLQUFxQjMyRCxLQUFHLHFEQUF4QixFQUErRSxJQUFHQyxFQUFFMjJELFFBQUwsRUFBYyxRQUFPMzJELEVBQUUyMkQsUUFBVCxHQUFtQixLQUFLLFNBQUw7QUFBZTUyRCxpQkFDcGYsaUNBRG9mLENBQ2xkLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLHNCQUFILENBQTBCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyw2QkFBSCxDQUFpQyxNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsMkJBQUgsQ0FBK0IsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLGlCQUFMO0FBQXVCQSxpQkFBRyxnQ0FBSCxDQUFvQyxNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRywyQkFBSCxDQUFpQyxNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsMkJBQUg7QUFDL2RvTyxvQkFBTSxjQUFOLENBQXFCLE1BQU0sS0FBSyxPQUFMO0FBQWFwTyxpQkFBRywwQkFBSCxDQUE4QixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLGVBQUw7QUFBcUJBLGlCQUFHLCtCQUFILENBQW1DLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLCtCQUFILENBQW1DLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLHFCQUFILENBQXlCLE1BQU0sS0FBSyxjQUFMO0FBQW9CQSxpQkFBRyw4QkFBSCxDQUFrQyxNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRywyQkFBSCxDQUErQixNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsMEJBQUgsQ0FBOEIsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsdUJBQUgsQ0FBMkI7QUFDbmYsYUFBSyxhQUFMO0FBQW1CQSxpQkFBRyw2QkFBSCxDQUFpQyxNQUFNO0FBQVFBLGlCQUFHLDBCQUFILENBSGdaLENBR2xYLElBQUdDLEVBQUU0MkQsWUFBTCxFQUFrQixRQUFPNTJELEVBQUU0MkQsWUFBVCxHQUF1QixLQUFLLFVBQUw7QUFBZ0I3MkQsaUJBQUcsa0RBQUgsQ0FBc0QsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsNEJBQUgsQ0FBZ0MsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLG1FQUFILENBQXVFLE1BQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcsZ0RBQUgsQ0FBc0QsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLGlCQUFHLHFFQUFIO0FBQzdjLGtCQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLG1JQUFILENBQXlJLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRyw4S0FBSCxDQUFrTCxNQUFNLEtBQUssa0JBQUw7QUFBd0JBLGlCQUFHLGlDQUFILENBQXFDLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxxREFBSDtBQUN6YyxrQkFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLDZCQUFILENBQWlDLE1BQU0sS0FBSyxrQkFBTDtBQUF3QkEsaUJBQUcsMEZBQUgsQ0FBOEYsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLHFEQUFILENBQXlELE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLDJCQUFILENBQStCLE1BQU0sS0FBSyxlQUFMO0FBQXFCQSxpQkFBRyx5Q0FBSCxDQUE2QyxNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcseURBQUgsQ0FBNkQsTUFBTSxLQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyxzQ0FBSDtBQUM5ZSxrQkFBTSxLQUFLLGlCQUFMO0FBQXVCQSxpQkFBRyw2RkFBSCxDQUFtRyxNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsa0NBQUgsQ0FBc0MsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLGlCQUFHLDRDQUFILENBQWdELE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRyx1Q0FBSCxDQUEyQyxNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyw0QkFBSCxDQUFrQyxNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsMENBQUgsQ0FBOEMsTUFBTSxLQUFLLGtCQUFMO0FBQXdCQSxpQkFBRyxvQ0FBSDtBQUNwZSxrQkFBTSxLQUFLLHVCQUFMO0FBQTZCQSxpQkFBRyw2Q0FBSCxDQUFpRCxNQUFNLEtBQUsscUJBQUw7QUFBMkJBLGlCQUFHLGtJQUFILENBQXdJLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyx1RkFBSCxDQUEyRixNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsMEhBQUg7QUFDclksa0JBQU0sS0FBSyxtQkFBTDtBQUF5QkEsaUJBQUcsNEVBQUgsQ0FBZ0YsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLHNDQUFILENBQTBDLE1BQU0sS0FBSyxvQkFBTDtBQUEwQkEsaUJBQUcsb0ZBQUgsQ0FBd0YsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLDRPQUFIO0FBQzlULGtCQUFNLEtBQUssa0JBQUw7QUFBd0JBLGlCQUFHLCtHQUFILENBQW1ILE1BQU0sS0FBSyxvQkFBTDtBQUEwQkEsaUJBQUcseUpBQUgsQ0FBNkosTUFBTSxLQUFLLHNCQUFMO0FBQTRCQSxpQkFBRywyUUFBSDtBQUNoWCxrQkFBTSxLQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyx3SEFBSCxDQUFvSSxNQUFNLEtBQUssb0JBQUw7QUFBMEJBLGlCQUFHLHFDQUFILENBQXlDLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRyxnRUFBSCxDQUFvRSxNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsa0dBQUgsQ0FBd0csTUFBTSxLQUFLLHNCQUFMO0FBQTRCQSxpQkFBRyxpREFBSDtBQUN4ZSxrQkFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGdDQUFILENBQW9DLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxpSkFBSCxDQUF1SixNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsd1BBQUg7QUFDOVAsa0JBQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxrSEFBSCxDQUFzSCxNQUFNLEtBQUssbUJBQUw7QUFBeUJBLGlCQUFHLGlEQUFILENBQXFELE1BQU0sS0FBSyxlQUFMO0FBQXFCQSxpQkFBRyxtTEFBSCxDQUFpTSxNQUFNLEtBQUssaUJBQUw7QUFBdUJBLGlCQUFHLDhDQUFIO0FBQ3pkLGtCQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLHlHQUFILENBQWlILE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRywrRkFBSCxDQUFxRyxNQUFNLEtBQUssa0JBQUw7QUFBd0JBLGlCQUFHLDZIQUFILENBQWlJLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRywwRkFBSDtBQUNqYyxrQkFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsdUZBQUgsQ0FBK0YsTUFBTSxLQUFLLHlCQUFMO0FBQStCQSxpQkFBRyx1RUFBSCxDQUEyRSxNQUFNLEtBQUssZ0NBQUw7QUFBc0NBLGlCQUFHLHVHQUFILENBQTJHLE1BQU0sS0FBSyxrQkFBTDtBQUF3QkEsaUJBQUcsd0pBQUg7QUFDeFosa0JBQU0sS0FBSyxpQkFBTDtBQUF1QkEsaUJBQUcsaUlBQUgsQ0FBdUksTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsc0hBQUgsQ0FBOEgsTUFBTSxLQUFLLGtCQUFMO0FBQXdCQSxpQkFBRyxtSEFBSCxDQUF1SCxNQUFNLEtBQUssbUNBQUw7QUFBeUNBLGlCQUMzZixzRkFEMmYsQ0FDcGEsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLDhCQUFILENBQWtDLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyw0QkFBSCxDQUFnQyxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRywwQkFBSCxDQUE4QixNQUFNLEtBQUssY0FBTDtBQUFvQkEsaUJBQUcsK0JBQUgsQ0FBbUMsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLDhCQUFILENBQWtDLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLDBCQUFILENBQThCLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRyw2QkFBSCxDQUFpQyxNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQ3RmLDJCQURzZixDQUMxZCxNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsMEJBQUgsQ0FBOEIsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsMEJBQUgsQ0FBOEIsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLDRCQUFILENBQWdDLE1BQU0sS0FBSyxxQkFBTDtBQUEyQkEsaUJBQUcsc0NBQUgsQ0FBMEMsTUFBTSxLQUFLLG1CQUFMO0FBQXlCQSxpQkFBRyxvQ0FBSCxDQUF3QyxNQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLGlDQUFILENBQXFDLE1BQU0sS0FBSyx1QkFBTDtBQUE2QkEsaUJBQUcsd0NBQUg7QUFDMWUsa0JBQU0sS0FBSyxrQkFBTDtBQUF3QkEsaUJBQUcsbUNBQUgsQ0FBdUMsTUFBTSxLQUFLLG1CQUFMO0FBQXlCQSxpQkFBRyxvQ0FBSCxDQUF3QyxNQUFNLEtBQUssaUJBQUw7QUFBdUJBLGlCQUFHLGtDQUFILENBQXNDLE1BQU0sS0FBSyxjQUFMO0FBQW9CQSxpQkFBRywrQkFBSCxDQUFtQyxNQUFNLEtBQUssbUJBQUw7QUFBeUJBLGlCQUFHLG9DQUFILENBQXdDLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRywyQkFBSCxDQUErQixNQUFNLEtBQUssbUJBQUw7QUFBeUJBLGlCQUFHLG9DQUFILENBQXdDLE1BQU0sS0FBSyxpQkFBTDtBQUF1QkEsaUJBQUcsa0NBQUg7QUFDNWUsa0JBQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRyw4QkFBSCxDQUFrQyxNQUFNLEtBQUssbUJBQUw7QUFBeUJBLGlCQUFHLG9DQUFILENBQXdDLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLHlCQUFILENBQTZCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLDBCQUFILENBQThCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyw0QkFBSCxDQUFnQyxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRywwQkFBSCxDQUE4QixNQUFNLEtBQUssbUJBQUw7QUFBeUJBLGlCQUFHLG9DQUFILENBQXdDLE1BQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcsaUNBQUgsQ0FBcUMsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLDhCQUFIO0FBQ2pmLGtCQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLGlDQUFILENBQXFDLE1BQU0sS0FBSyxjQUFMO0FBQW9CQSxpQkFBRywrQkFBSCxDQUFtQyxNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsMkJBQUgsQ0FBK0IsTUFBTSxLQUFLLGlCQUFMO0FBQXVCQSxpQkFBRyxrQ0FBSCxDQUFzQyxNQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLGlDQUFILENBQXFDLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRywyQkFBSCxDQUErQixNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsMkJBQUgsQ0FBK0IsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsd0JBQUgsQ0FBNEIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsd0JBQUg7QUFDbmUsa0JBQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLDBCQUFILENBQThCLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLHVCQUFILENBQTJCLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLHdCQUFILENBQTRCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRywyQkFBSCxDQUErQixNQUFNLEtBQUssY0FBTDtBQUFvQkEsaUJBQUcsK0JBQUgsQ0FBbUMsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLDJCQUFILENBQStCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyw0QkFBSCxDQUFnQyxNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsc0JBQUgsQ0FBMEIsTUFBTSxLQUFLLGlCQUFMO0FBQXVCQSxpQkFBRyxrQ0FBSDtBQUNoZixrQkFBTSxLQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyxpQ0FBSCxDQUFxQyxNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyx5QkFBSCxDQUE2QixNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyx5QkFBSCxDQUE2QixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsd0JBQUgsQ0FBNEIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsd0JBQUgsQ0FBNEIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsd0JBQUgsQ0FBNEIsTUFBTTtBQUFRQSxpQkFBRyxnQkFBSCxDQW5CdlEsQ0FtQjJSLElBQUdDLEVBQUU2MkQsU0FBTCxFQUFlLFFBQU83MkQsRUFBRTYyRCxTQUFULEdBQW9CLEtBQUssSUFBTDtBQUFVOTJELGlCQUFHLCtEQUFIO0FBQzFiLGtCQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxxRkFBSCxDQUF5RixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyw4REFBSCxDQUFrRSxNQUFNLEtBQUssSUFBTDtBQUFVQSxpQkFBRywwQ0FBSCxDQUE4QyxNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyx5RUFBSCxDQUE2RSxNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyw4RkFBSCxDQUFrRyxNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyxvREFBSDtBQUNoZSxrQkFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsaUVBQUgsQ0FBdUUsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsZ0ZBQUgsQ0FBMEYsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcscUdBQUgsQ0FBeUcsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsa0ZBQUgsQ0FBd0YsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsa0ZBQUg7QUFDM2Isa0JBQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLHFFQUFILENBQXlFLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLHVFQUFILENBQWlGLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLGdGQUFILENBQXNGLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLDZFQUFILENBQW1GLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLDJEQUFILENBQStELE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLG1FQUFIO0FBQzVlLGtCQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyw0REFBSCxDQUFrRSxNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRywwRkFBSCxDQUE4RixNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRywyRUFBSCxDQUFpRixNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyx3RUFBSCxDQUE4RSxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyw0RUFBSCxDQUFrRixNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFDL2YsZ0VBRCtmLENBQzliLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLGdEQUFILENBQW9ELE1BQU0sS0FBSyxJQUFMO0FBQVVBLGlCQUFHLGdFQUFILENBQXdFLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLHVGQUFILENBQWlHLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLHdEQUFILENBQTRELE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLGtGQUFIO0FBQ2piLGtCQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRywwREFBSCxDQUE4RCxNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyx1RkFBSCxDQUEyRixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRywrRkFBSCxDQUFtRyxNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyw2REFBSCxDQUFxRSxNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyw0RUFBSCxDQUFzRixNQUFNLEtBQUssSUFBTDtBQUFVQSxpQkFDOWYscURBRDhmLENBQ3RjLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLHFEQUFILENBQXlELE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLHFGQUFILENBQXlGLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLHNEQUFILENBQTBELE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLG1FQUFILENBQXVFLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLDREQUFILENBQWdFLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUNwZix1RUFEb2YsQ0FDNWEsTUFBTTtBQUFRQSxpQkFBRyxnQkFBSCxDQVJzVSxDQVFsVCxPQUFPQSxDQUFQO0FBQVMsS0FBSSsyRCxrQkFBZ0IsU0FBaEJBLGVBQWdCLENBQVM5MkQsQ0FBVCxFQUFXO0FBQUNBLFFBQUVBLEVBQUVvb0QsYUFBRixFQUFGLENBQW9CLElBQUlyb0QsSUFBRSxFQUFOO0FBQUEsUUFBU29vRCxDQUFULENBQVcsS0FBSUEsQ0FBSixJQUFTbm9ELENBQVQ7QUFBV0QsWUFBRUEsSUFBRW9vRCxDQUFGLEdBQUksR0FBSixHQUFRbm9ELEVBQUVtb0QsQ0FBRixDQUFSLEdBQWEsT0FBZjtBQUFYLEtBQWtDLE9BQU0sc0RBQW9EcG9ELENBQXBELEdBQXNELFFBQTVEO0FBQXFFLENBQXRLLEM7Ozs7Ozs7Ozs7Ozs7QUN6UnZIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFLTyxTQUFTaW5ELElBQVQsQ0FBY2huRCxDQUFkLEVBQWdCO0FBQUMsV0FBT0EsRUFBRWlULE9BQUYsQ0FBVSxNQUFWLEVBQWlCLEVBQWpCLEVBQXFCQSxPQUFyQixDQUE2QixNQUE3QixFQUFvQyxFQUFwQyxDQUFQO0FBQStDO0FBQ2hFLFNBQVM0MEMsUUFBVCxHQUFtQjtBQUFDLFdBQU0sK1VBQThVQyxJQUE5VSxDQUFtVjlqRCxVQUFVK2pELFNBQVYsSUFBcUIvakQsVUFBVWdrRCxNQUEvQixJQUF1Q3I4QyxPQUFPczhDLEtBQWpZLEtBQXlZLDBrREFBMGtESCxJQUExa0QsQ0FBK2tELENBQUM5akQsVUFBVStqRCxTQUFWLElBQXFCL2pELFVBQVVna0QsTUFBL0IsSUFDdC9EcjhDLE9BQU9zOEMsS0FEOCtELEVBQ3YrRG4xQyxNQUR1K0QsQ0FDaCtELENBRGcrRCxFQUM5OUQsQ0FEODlELENBQS9rRDtBQUEvWTtBQUNJLFVBQVNvUCxTQUFULENBQW1CbGlCLENBQW5CLEVBQXFCO0FBQUMsUUFBSUQsSUFBRWluRCxLQUFLaG5ELENBQUwsQ0FBTixDQUFjLE9BQU0sU0FBT0QsQ0FBUCxJQUFVLFNBQU9BLENBQWpCLEdBQW1CLEtBQW5CLEdBQXlCLFFBQU1BLENBQU4sSUFBUyxRQUFNQSxDQUFmLEdBQWlCLElBQWpCLEdBQXNCLGFBQVdBLENBQVgsR0FBYSxTQUFiLEdBQXVCLGdCQUFjQSxDQUFkLEdBQWdCLFlBQWhCLEdBQTZCLFVBQVFBLENBQVIsR0FBVSxNQUFWLEdBQWlCLFdBQVNBLENBQVQsR0FBVyxPQUFYLEdBQW1CLGNBQVlBLENBQVosR0FBYyxVQUFkLEdBQXlCLGFBQVdBLENBQVgsR0FBYSxTQUFiLEdBQXVCLFdBQVNBLENBQVQsR0FBVyxPQUFYLEdBQW1CLFdBQVNBLENBQVQsR0FBVyxPQUFYLEdBQW1CLFdBQVNBLENBQVQsR0FBVyxPQUFYLEdBQW1CLHlCQUF1QkEsQ0FBdkIsR0FBeUIscUJBQXpCLEdBQStDLGFBQVdBLENBQVgsR0FBYSxTQUFiLEdBQXVCQyxDQUE1VDtBQUE4VDtBQUMxWCxJQUFJa29ELHNCQUFvQixTQUFwQkEsbUJBQW9CLENBQVNsb0QsQ0FBVCxFQUFXRCxDQUFYLEVBQWE7QUFBQyxRQUFJb29ELElBQUVub0QsRUFBRW9vRCxhQUFGLEVBQU47QUFBQSxRQUF3QkMsSUFBRSxFQUExQjtBQUFBLFFBQTZCajBDLENBQTdCLENBQStCLElBQUcsZUFBYSxPQUFPclUsQ0FBdkIsRUFBeUI7QUFBQyxZQUFJNGMsSUFBRTVjLEVBQUU0M0IsSUFBRixDQUFPMzNCLENBQVAsRUFBVSxDQUFWLEVBQWFtUixRQUFiLEVBQU4sQ0FBOEIsSUFBR3dMLENBQUgsRUFBSyxJQUFHO0FBQUN2SSxnQkFBRXVJLEVBQUVrbkIsTUFBRixFQUFGO0FBQWEsU0FBakIsQ0FBaUIsT0FBTXlrQixDQUFOLEVBQVE7QUFBQ2wwQyxnQkFBRSxFQUFGO0FBQUs7QUFBQyxLQUE3RixNQUFpRztBQUFDdUksWUFBRTVjLEVBQUVvUixRQUFGLEVBQUYsQ0FBZSxJQUFHO0FBQUNpRCxnQkFBRXVJLEVBQUVrbkIsTUFBRixFQUFGO0FBQWEsU0FBakIsQ0FBaUIsT0FBTTBrQixDQUFOLEVBQVE7QUFBQ24wQyxnQkFBRSxFQUFGO0FBQUs7QUFBQyxVQUFHbzBDLFNBQVNMLENBQVQsRUFBVy96QyxDQUFYLENBQUgsQ0FBaUJpMEMsS0FBR0ksVUFBVU4sQ0FBVixDQUFILENBQWdCRSxLQUFHSyxTQUFTUCxDQUFULEVBQVdub0QsRUFBRWlILEdBQUYsQ0FBTSxVQUFOLElBQWtCLEdBQWxCLEdBQXNCakgsRUFBRThpQixLQUFGLEVBQWpDLENBQUgsQ0FBK0MsT0FBTSxpQ0FBK0J1bEMsQ0FBL0IsR0FBaUMsUUFBdkM7QUFBZ0QsQ0FBdFY7QUFBQSxJQUF1Vk0scUJBQW1CLFNBQW5CQSxrQkFBbUIsQ0FBUzNvRCxDQUFULEVBQVdELENBQVgsRUFBYTtBQUFDLFFBQUlvb0QsSUFBRW5vRCxFQUFFb29ELGFBQUYsRUFBTjtBQUFBLFFBQXdCQyxJQUFFLEVBQTFCO0FBQUEsUUFBNkJqMEMsSUFBRSxDQUFDLENBQWhDO0FBQUEsUUFBa0N1SSxDQUFsQyxDQUFvQ0EsSUFBRSxlQUFhLE9BQU81YyxDQUFwQixHQUFzQkEsRUFBRTQzQixJQUFGLENBQU8zM0IsQ0FBUCxFQUFVLENBQVYsRUFBYW1SLFFBQWIsR0FBd0IweUIsTUFBeEIsRUFBdEIsR0FBdUQ5akMsRUFBRW9SLFFBQUYsR0FBYTB5QixNQUFiLEVBQXpELENBQStFLElBQUcsZ0JBQ2pmc2tCLEVBQUVTLE9BRCtlLElBQ3RlLFNBQU9ULEVBQUVTLE9BRDZkLElBQ3BkLGdCQUFjVCxFQUFFUyxPQURpYyxFQUN6YngwQyxJQUFFLENBQUMsQ0FBSCxDQUFLLFdBQVMrekMsRUFBRVUsT0FBWCxLQUFxQnowQyxJQUFFLENBQUMsQ0FBeEIsRUFBMkIsaUJBQWUrekMsRUFBRVUsT0FBakIsS0FBMkJ6MEMsSUFBRSxDQUFDLENBQTlCLEVBQWlDLFlBQVUrekMsRUFBRVUsT0FBWixLQUFzQnowQyxJQUFFLENBQUMsQ0FBekIsRUFBNEIsWUFBVSt6QyxFQUFFVSxPQUFaLEtBQXNCejBDLElBQUUsQ0FBQyxDQUF6QixFQUE0QixnQkFBYyt6QyxFQUFFVSxPQUFoQixLQUEwQnowQyxJQUFFLENBQUMsQ0FBN0IsRUFBZ0MsSUFBRyxhQUFXK3pDLEVBQUVVLE9BQWIsSUFBc0IsYUFBV1YsRUFBRVMsT0FBdEMsRUFBOEN4MEMsSUFBRSxDQUFDLENBQUgsQ0FBSyxJQUFHLFlBQVUrekMsRUFBRVUsT0FBWixJQUFxQixZQUFVVixFQUFFUyxPQUFwQyxFQUE0Q3gwQyxJQUFFLENBQUMsQ0FBSCxDQUFLLFlBQVUrekMsRUFBRVMsT0FBWixLQUFzQngwQyxJQUFFLENBQUMsQ0FBekIsRUFBNEIsYUFBVyt6QyxFQUFFUyxPQUFiLEtBQXVCeDBDLElBQUUsQ0FBQyxDQUExQixFQUE2QixJQUFHLGdCQUFjK3pDLEVBQUVTLE9BQWhCLElBQXlCLGNBQVlULEVBQUVTLE9BQXZDLElBQWdELGNBQVlULEVBQUVXLFFBQTlELElBQXdFLGVBQWFYLEVBQUVXLFFBQXZGLElBQWlHLFdBQVNYLEVBQUVXLFFBQTVHLElBQXNILFlBQVVYLEVBQUVXLFFBQWxJLElBQzlXLGdCQUFjWCxFQUFFVSxPQUQyVixFQUNuVnowQyxJQUFFLENBQUMsQ0FBSCxDQUFLLGdCQUFjK3pDLEVBQUVZLE9BQWhCLEtBQTBCMzBDLElBQUUsQ0FBQyxDQUE3QixFQUFnQyt6QyxFQUFFYSxTQUFGLEtBQWM1MEMsSUFBRSxDQUFDLENBQWpCLEVBQW9CLElBQUcsbUJBQWlCK3pDLEVBQUVTLE9BQW5CLElBQTRCLG1CQUFpQlQsRUFBRVksT0FBL0MsSUFBd0QsY0FBWVosRUFBRWMsS0FBekUsRUFBK0U3MEMsSUFBRSxDQUFDLENBQUgsQ0FBSyxhQUFXK3pDLEVBQUVlLE9BQWIsS0FBdUI5MEMsSUFBRSxDQUFDLENBQTFCLEVBQTZCLGNBQVkrekMsRUFBRWMsS0FBZCxLQUFzQjcwQyxJQUFFLENBQUMsQ0FBekIsRUFBNEIsbUJBQWlCK3pDLEVBQUVZLE9BQW5CLEtBQTZCMzBDLElBQUUsQ0FBQyxDQUFoQyxFQUFtQyxtQkFBaUIrekMsRUFBRVMsT0FBbkIsS0FBNkJ4MEMsSUFBRSxDQUFDLENBQWhDLEVBQW1DLGVBQWErekMsRUFBRVksT0FBZixLQUF5QjMwQyxJQUFFLENBQUMsQ0FBNUIsRUFBK0IrekMsRUFBRWdCLFVBQUYsS0FBZS8wQyxJQUFFLENBQUMsQ0FBbEIsRUFBcUIsbUJBQWlCK3pDLEVBQUVZLE9BQW5CLEtBQTZCMzBDLElBQUUsQ0FBQyxDQUFoQyxFQUFtQyxRQUFPQSxDQUFQLEdBQVUsS0FBSyxDQUFDLENBQU47QUFBUWkwQyxpQkFBR0csU0FBU0wsQ0FBVCxFQUFXeHJDLENBQVgsQ0FBSCxDQUFpQjByQyxLQUFHSSxVQUFVTixDQUFWLENBQUgsQ0FBZ0JFLEtBQUdLLFNBQVNQLENBQVQsRUFBV25vRCxFQUFFaUgsR0FBRixDQUFNLFVBQU4sSUFBa0IsR0FBbEIsR0FBc0JqSCxFQUFFOGlCLEtBQUYsRUFBakMsQ0FBSCxDQUErQyxNQUFNLEtBQUssQ0FBQyxDQUFOO0FBQVF1bEMsaUJBQUdHLFNBQVNMLENBQVQsRUFDOWV4ckMsQ0FEOGUsQ0FBSCxDQUFoSCxDQUN4WCxPQUFNLGlDQUErQjByQyxDQUEvQixHQUFpQyxRQUF2QztBQUFnRCxDQUhoRDtBQUlBLFNBQVNHLFFBQVQsQ0FBa0J4b0QsQ0FBbEIsRUFBb0JELENBQXBCLEVBQXNCO0FBQUMsUUFBSW9vRCxJQUFFLEVBQU47QUFBQSxRQUFTRSxJQUFFLE1BQVgsQ0FBa0J0b0QsS0FBRyxDQUFDLENBQUQsSUFBSUEsRUFBRXVFLE9BQUYsQ0FBVSxhQUFWLENBQVAsS0FBa0MrakQsSUFBRSxPQUFGLEVBQVV0b0QsSUFBRUEsRUFBRWtULE9BQUYsQ0FBVSxhQUFWLEVBQXdCLGFBQXhCLENBQTlDLEVBQXNGLElBQUdqVCxFQUFFRSxJQUFGLElBQVFGLEVBQUUsWUFBRixDQUFSLElBQXlCQSxFQUFFLFdBQUYsQ0FBekIsSUFBeUNBLEVBQUUsZUFBRixDQUE1QyxFQUErRDtBQUFDLFlBQUdBLEVBQUVFLElBQUwsRUFBVSxJQUFJa1UsSUFBRXBVLEVBQUVFLElBQVIsQ0FBYUYsRUFBRSxZQUFGLE1BQWtCb1UsSUFBRXBVLEVBQUUsWUFBRixDQUFwQixFQUFxQ0EsRUFBRSxXQUFGLE1BQWlCb1UsSUFBRXBVLEVBQUUsV0FBRixDQUFuQixFQUFtQ0EsRUFBRSxlQUFGLE1BQXFCb1UsSUFBRXBVLEVBQUUsZUFBRixDQUF2QixFQUEyQ21vRCxLQUFHcG9ELElBQUUsZUFBYUEsQ0FBYixHQUFlLFdBQWYsR0FBMkJzb0QsQ0FBM0IsR0FBNkIsVUFBN0IsR0FBd0NqMEMsQ0FBeEMsR0FBMEMsU0FBMUMsR0FBb0RBLENBQXBELEdBQXNELDhDQUF0RCxHQUFxR0EsQ0FBckcsR0FBdUcsUUFBekcsR0FBa0gsWUFBVUEsQ0FBVixHQUFZLFNBQVosR0FBc0JBLENBQXRCLEdBQXdCLDhDQUF4QixHQUNqY0EsQ0FEaWMsR0FDL2IsUUFEMFU7QUFDalUsS0FEdUgsTUFDbEhyVSxNQUFJb29ELEtBQUcsZUFBYXBvRCxDQUFiLEdBQWUsV0FBZixHQUEyQnNvRCxDQUEzQixHQUE2QixVQUE3QixHQUF3Q3RvRCxDQUF4QyxHQUEwQyxTQUExQyxHQUFvREEsQ0FBcEQsR0FBc0QsSUFBN0QsRUFBbUVvb0QsS0FBR2lCLG9CQUFvQnBwRCxDQUFwQixDQUFILENBQTBCLE9BQU0sbUNBQWlDbW9ELENBQWpDLEdBQW1DLFFBQXpDO0FBQWtEO0FBQzVKLFNBQVNPLFFBQVQsQ0FBa0Ixb0QsQ0FBbEIsRUFBb0JELENBQXBCLEVBQXNCO0FBQUMsUUFBSW9vRCxJQUFFLEVBQU47QUFBQSxRQUFTRSxJQUFFLENBQUMsQ0FBWixDQUFjcm9ELEVBQUUsZ0JBQUYsTUFBc0Jtb0QsS0FBRyxnQkFBY25vRCxFQUFFLGdCQUFGLENBQWQsR0FBa0MsT0FBckMsRUFBNkNxb0QsSUFBRSxDQUFDLENBQXRFLEVBQXlFcm9ELEVBQUUsWUFBRixLQUFpQm1vRCxLQUFHLFlBQVVub0QsRUFBRSxZQUFGLENBQVYsR0FBMEIsT0FBN0IsRUFBcUNxb0QsSUFBRSxDQUFDLENBQXpELElBQTREcm9ELEVBQUUsWUFBRixNQUFrQm1vRCxLQUFHLFlBQVVub0QsRUFBRSxZQUFGLENBQVYsR0FBMEIsT0FBN0IsRUFBcUNxb0QsSUFBRSxDQUFDLENBQTFELENBQTVELENBQXlIcm9ELEVBQUUsYUFBRixNQUFtQm1vRCxLQUFHbm9ELEVBQUUsYUFBRixDQUFILEVBQW9CbW9ELElBQUVub0QsRUFBRSxrQkFBRixJQUFzQm1vRCxLQUFHLE1BQUlub0QsRUFBRSxrQkFBRixDQUFKLEdBQTBCLE9BQTdCLENBQXRCLEdBQTREbW9ELElBQUUsT0FBcEYsRUFBNEZFLElBQUUsQ0FBQyxDQUFsSCxFQUFxSHJvRCxFQUFFLGVBQUYsTUFBcUJtb0QsS0FBR25vRCxFQUFFLGVBQUYsSUFBbUIsR0FBM0MsRUFBZ0RBLEVBQUUsV0FBRixNQUFpQm1vRCxLQUFHbm9ELEVBQUUsV0FBRixJQUFlLE9BQWxCLEVBQTBCcW9ELElBQUUsQ0FBQyxDQUE5QyxFQUFpRCxJQUFHcm9ELEVBQUVxcEQsSUFBTCxFQUFVLElBQUdycEQsRUFBRXFwRCxJQUFGLEdBQU8sS0FBR3JwRCxFQUFFcXBELElBQVosRUFBaUIsSUFBRXJwRCxFQUFFcXBELElBQUYsQ0FBT2pwRCxNQUE3QixFQUFvQztBQUFDLFlBQUlnVSxJQUFFcFUsRUFBRXFwRCxJQUFGLENBQU9qcEQsTUFBUCxHQUNyZixDQUQrZTtBQUFBLFlBQzdldWMsSUFBRSxJQUFFdkksQ0FBRixHQUFJcFUsRUFBRXFwRCxJQUFGLENBQU90SixTQUFQLENBQWlCLENBQWpCLEVBQW1CM3JDLENBQW5CLENBQUosR0FBMEIsRUFEaWQsQ0FDOWMsS0FBSXhVLElBQUUsQ0FBTixFQUFRQSxJQUFFZ2hCLEtBQUtJLEtBQUwsQ0FBV2hoQixFQUFFcXBELElBQUYsQ0FBT2pwRCxNQUFQLEdBQWMsQ0FBekIsQ0FBVixFQUFzQ1IsR0FBdEM7QUFBMEMrYyxnQkFBRSxLQUFHdkksQ0FBSCxJQUFNLEtBQUd4VSxDQUFULEdBQVcrYyxJQUFFM2MsRUFBRXFwRCxJQUFGLENBQU90SixTQUFQLENBQWlCM3JDLElBQUUsSUFBRXhVLENBQXJCLEVBQXVCd1UsSUFBRSxJQUFFeFUsQ0FBSixHQUFNLENBQTdCLENBQWIsR0FBNkMrYyxLQUFHLE1BQUkzYyxFQUFFcXBELElBQUYsQ0FBT3RKLFNBQVAsQ0FBaUIzckMsSUFBRSxJQUFFeFUsQ0FBckIsRUFBdUJ3VSxJQUFFLElBQUV4VSxDQUFKLEdBQU0sQ0FBN0IsQ0FBUCxDQUEvQztBQUExQyxTQUFpSXVvRCxLQUFHLFdBQVN4ckMsQ0FBVCxHQUFXLGNBQWQ7QUFBK0IsS0FEeVEsTUFDcFF3ckMsS0FBRyxVQUFRbm9ELEVBQUVxcEQsSUFBVixHQUFlLE9BQWxCLENBQTBCcnBELEVBQUUsZUFBRixNQUFxQm1vRCxJQUFFTixhQUFXTSxLQUFHLHlCQUF1Qm5vRCxFQUFFLGVBQUYsQ0FBdkIsR0FBMEMsSUFBMUMsR0FBK0NBLEVBQUUsZUFBRixDQUEvQyxHQUFrRSxXQUFyRSxDQUFYLEdBQTZGbW9ELEtBQUcsNEJBQTBCbm9ELEVBQUUsZUFBRixDQUExQixHQUE2QyxJQUE3QyxHQUFrREEsRUFBRSxlQUFGLENBQWxELEdBQXFFLFdBQXhFLENBQS9GLEVBQW9McW9ELElBQUUsQ0FBQyxDQUE1TSxFQUErTXJvRCxFQUFFc3BELEtBQUYsS0FBVW5CLElBQUVOLGFBQVdNLEtBQUcseUJBQXVCbm9ELEVBQUVzcEQsS0FBekIsR0FBK0IsSUFBL0IsR0FBb0N0cEQsRUFBRXNwRCxLQUF0QyxHQUN6YyxXQURzYyxDQUFYLEdBQzlhbkIsS0FBRyw0QkFBMEJub0QsRUFBRXNwRCxLQUE1QixHQUFrQyxJQUFsQyxHQUF1Q3RwRCxFQUFFc3BELEtBQXpDLEdBQStDLFdBQWxELENBRDRhLEVBQzdXakIsSUFBRSxDQUFDLENBRGdXLEVBQzdWcm9ELEVBQUUsYUFBRixLQUFrQm1vRCxLQUFHLFVBQVFub0QsRUFBRSxhQUFGLENBQVIsR0FBeUIsT0FBNUIsRUFBb0Nxb0QsSUFBRSxDQUFDLENBQXpELElBQTREcm9ELEVBQUV1cEQsR0FBRixLQUFRcEIsS0FBRyxVQUFRbm9ELEVBQUV1cEQsR0FBVixHQUFjLE9BQWpCLEVBQXlCbEIsSUFBRSxDQUFDLENBQXBDLENBQTVELENBQW1Hcm9ELEVBQUUsZUFBRixLQUFvQm1vRCxLQUFHLDRCQUEwQm5vRCxFQUFFLGVBQUYsQ0FBMUIsR0FBNkMsSUFBN0MsR0FBa0RBLEVBQUUsZUFBRixDQUFsRCxHQUFxRSxXQUF4RSxFQUFvRnFvRCxJQUFFLENBQUMsQ0FBM0csSUFBOEdyb0QsRUFBRXdwRCxLQUFGLEtBQVVyQixLQUFHLDRCQUEwQm5vRCxFQUFFd3BELEtBQTVCLEdBQWtDLElBQWxDLEdBQXVDeHBELEVBQUV3cEQsS0FBekMsR0FBK0MsV0FBbEQsRUFBOERuQixJQUFFLENBQUMsQ0FBM0UsQ0FBOUcsQ0FBNExBLE1BQUlGLEtBQUcsT0FBUCxFQUFnQixJQUFHbm9ELEVBQUV5cEQsYUFBTCxFQUFtQjtBQUFDcEIsWUFBRXJvRCxFQUFFeXBELGFBQUosQ0FBa0IsS0FBSXIxQyxJQUFFLENBQU4sRUFBUSxLQUFHQSxDQUFILElBQU0sSUFBRWkwQyxFQUFFL2pELE9BQUYsQ0FBVSxHQUFWLENBQWhCO0FBQWdDLGdCQUFFOFAsQ0FBRixLQUFNaTBDLElBQUVBLEVBQUVwMUMsT0FBRixDQUFVLEdBQVYsRUFBYyxPQUFkLENBQVIsR0FBZ0NtQixHQUFoQztBQUFoQyxTQUFvRSt6QyxLQUFHLG9EQUM5ZUUsQ0FEOGUsR0FDNWUsUUFEeWUsQ0FDaGVGLElBQUUsSUFBRUUsRUFBRS9qRCxPQUFGLENBQVUsSUFBVixDQUFGLEdBQWtCNmpELElBQUUsNEJBQXBCLEdBQWlEQSxJQUFFLE9BQXJEO0FBQTZELFNBQUdub0QsRUFBRSxvQkFBRixDQUFILEVBQTJCO0FBQUNxb0QsWUFBRXJvRCxFQUFFLG9CQUFGLENBQUYsQ0FBMEIsS0FBSW9VLElBQUUsQ0FBTixFQUFRLEtBQUdBLENBQUgsSUFBTSxJQUFFaTBDLEVBQUUvakQsT0FBRixDQUFVLEdBQVYsQ0FBaEI7QUFBZ0MsZ0JBQUU4UCxDQUFGLEtBQU1pMEMsSUFBRUEsRUFBRXAxQyxPQUFGLENBQVUsR0FBVixFQUFjLE9BQWQsQ0FBUixHQUFnQ21CLEdBQWhDO0FBQWhDLFNBQW9FK3pDLEtBQUcsb0RBQWtERSxDQUFsRCxHQUFvRCxRQUF2RCxDQUFnRUYsSUFBRSxJQUFFRSxFQUFFL2pELE9BQUYsQ0FBVSxJQUFWLENBQUYsR0FBa0I2akQsSUFBRSw0QkFBcEIsR0FBaURBLElBQUUsT0FBckQ7QUFBNkQsT0FBRSxVQUFGLE1BQWdCRSxJQUFFLEVBQUYsRUFBS0EsSUFBRXJvRCxFQUFFLFVBQUYsQ0FBUCxFQUFxQmduRCxLQUFLcUIsQ0FBTCxDQUFyQixFQUE2QixDQUFDLENBQUQsSUFBSUEsRUFBRS9qRCxPQUFGLENBQVUsVUFBVixFQUFxQixDQUFyQixDQUFKLElBQTZCLENBQUMsQ0FBRCxJQUFJK2pELEVBQUUvakQsT0FBRixDQUFVLFNBQVYsRUFBb0IsQ0FBcEIsQ0FBakMsS0FBMEQrakQsSUFBRSxZQUFVQSxDQUF0RSxDQUE3QixFQUFzR0YsS0FBRyx1QkFBcUJFLENBQXJCLEdBQXVCLHlDQUFoSjtBQUMvVHJvRCxNQUFFLGlCQUFGLEtBQXNCcW9ELElBQUVyb0QsRUFBRSxpQkFBRixDQUFGLEVBQXVCZ25ELEtBQUtxQixDQUFMLENBQXZCLEVBQStCLENBQUMsQ0FBRCxJQUFJQSxFQUFFL2pELE9BQUYsQ0FBVSxVQUFWLEVBQXFCLENBQXJCLENBQUosSUFBNkIsQ0FBQyxDQUFELElBQUkrakQsRUFBRS9qRCxPQUFGLENBQVUsU0FBVixFQUFvQixDQUFwQixDQUFqQyxLQUEwRCtqRCxJQUFFLFlBQVVBLENBQXRFLENBQS9CLEVBQXdHRixLQUFHLHVCQUFxQkUsQ0FBckIsR0FBdUIseUNBQXhKLElBQW1Ncm9ELEVBQUUwcEQsT0FBRixLQUFZckIsSUFBRXJvRCxFQUFFMHBELE9BQUosRUFBWTFDLEtBQUtxQixDQUFMLENBQVosRUFBb0IsQ0FBQyxDQUFELElBQUlBLEVBQUUvakQsT0FBRixDQUFVLFVBQVYsRUFBcUIsQ0FBckIsQ0FBSixJQUE2QixDQUFDLENBQUQsSUFBSStqRCxFQUFFL2pELE9BQUYsQ0FBVSxTQUFWLEVBQW9CLENBQXBCLENBQWpDLEtBQTBEK2pELElBQUUsWUFBVUEsQ0FBdEUsQ0FBcEIsRUFBNkZGLEtBQUcsdUJBQXFCRSxDQUFyQixHQUF1Qix5Q0FBbkksQ0FBbk0sQ0FBaVhyb0QsRUFBRTJwRCxTQUFGLEtBQWN0QixJQUFFcm9ELEVBQUUycEQsU0FBSixFQUFjM0MsS0FBS3FCLENBQUwsQ0FBZCxFQUFzQixDQUFDLENBQUQsSUFBSUEsRUFBRS9qRCxPQUFGLENBQVUsVUFBVixFQUFxQixDQUFyQixDQUFKLElBQTZCLENBQUMsQ0FBRCxJQUFJK2pELEVBQUUvakQsT0FBRixDQUFVLFNBQVYsRUFBb0IsQ0FBcEIsQ0FBakMsS0FBMEQrakQsSUFBRSxnQ0FBOEJBLENBQTFGLENBQXRCLEVBQW1IRixLQUM5ZSx5QkFBdUJFLENBQXZCLEdBQXlCLDJDQURvVixFQUN2U3JvRCxFQUFFNHBELGlCQUFGLEtBQXNCdkIsSUFBRXJvRCxFQUFFNHBELGlCQUFKLEVBQXNCNUMsS0FBS3FCLENBQUwsQ0FBdEIsRUFBOEIsQ0FBQyxDQUFELElBQUlBLEVBQUUvakQsT0FBRixDQUFVLFVBQVYsRUFBcUIsQ0FBckIsQ0FBSixJQUE2QixDQUFDLENBQUQsSUFBSStqRCxFQUFFL2pELE9BQUYsQ0FBVSxTQUFWLEVBQW9CLENBQXBCLENBQWpDLEtBQTBEK2pELElBQUUsd0NBQXNDQSxDQUFsRyxDQUE5QixFQUFtSUYsS0FBRyx5QkFBdUJFLENBQXZCLEdBQXlCLDJDQUFyTCxFQUFrT3JvRCxFQUFFLGdCQUFGLE1BQXNCcW9ELElBQUVyb0QsRUFBRSxnQkFBRixDQUFGLEVBQXNCZ25ELEtBQUtxQixDQUFMLENBQXRCLEVBQThCLENBQUMsQ0FBRCxJQUFJQSxFQUFFL2pELE9BQUYsQ0FBVSxVQUFWLEVBQXFCLENBQXJCLENBQUosSUFBNkIsQ0FBQyxDQUFELElBQUkrakQsRUFBRS9qRCxPQUFGLENBQVUsU0FBVixFQUFvQixDQUFwQixDQUFqQyxLQUEwRCtqRCxJQUFFLFlBQVVBLENBQXRFLENBQTlCLEVBQXVHRixLQUFHLHNCQUFvQkUsQ0FBcEIsR0FBc0Isd0NBQXRKLEVBQWdNcm9ELEVBQUVza0IsS0FBRixLQUFVNmpDLEtBQ2xmLGVBQWFub0QsRUFBRXNrQixLQUFmLEdBQXFCLHdCQUFyQixHQUE4Q3RrQixFQUFFRSxJQUFoRCxHQUFxRCxTQUFyRCxHQUErREYsRUFBRUUsSUFBakUsR0FBc0UsU0FEa2EsRUFDdlptb0QsSUFBRSxFQUFGLENBQUtyb0QsRUFBRTZwRCxlQUFGLEtBQW9CeEIsS0FBRyxzQkFBb0JubUMsVUFBVWxpQixFQUFFNnBELGVBQVosQ0FBcEIsR0FBaUQsT0FBeEUsRUFBaUY3cEQsRUFBRSxxQkFBRixNQUEyQnFvRCxLQUFHLFVBQVFubUMsVUFBVWxpQixFQUFFLHFCQUFGLENBQVYsQ0FBUixHQUE0QyxPQUExRSxFQUFtRkEsRUFBRSxzQkFBRixNQUE0QnFvRCxLQUFHLG9CQUFrQnJvRCxFQUFFLHNCQUFGLENBQWxCLEdBQTRDLE9BQTNFLEVBQW9GQSxFQUFFLHdCQUFGLE1BQThCcW9ELEtBQUcsc0JBQW9Ccm9ELEVBQUUsd0JBQUYsQ0FBcEIsR0FBZ0QsT0FBakYsRUFBMEZBLEVBQUUsa0JBQUYsTUFBd0Jxb0QsS0FBRyxnQkFBY3JvRCxFQUFFLGtCQUFGLENBQWQsR0FBb0MsT0FBL0QsRUFBd0UsTUFBSXFvRCxDQUFKLEtBQ25mRixLQUFHLHlFQUF1RUUsQ0FBdkUsR0FBeUUsYUFEdWEsRUFDeFpyb0QsRUFBRSt2QyxVQUFGLEtBQWVvWSxLQUFHLGlCQUFlam1DLFVBQVVsaUIsRUFBRSt2QyxVQUFaLENBQWYsR0FBdUMsT0FBekQsRUFBa0UvdkMsRUFBRSx3QkFBRixNQUE4Qm1vRCxLQUFHLGtCQUFnQm5vRCxFQUFFLHdCQUFGLENBQWhCLEdBQTRDLE9BQTdFLEVBQXNGQSxFQUFFLDJCQUFGLE1BQWlDbW9ELEtBQUcsMEJBQXdCbm9ELEVBQUUsMkJBQUYsQ0FBeEIsR0FBdUQsT0FBM0YsRUFBb0dBLEVBQUUsd0JBQUYsTUFBOEJtb0QsS0FBRyx1QkFBcUJub0QsRUFBRSx3QkFBRixDQUFyQixHQUFpRCxPQUFsRixFQUEyRkEsRUFBRSxrQkFBRixNQUF3Qm1vRCxLQUFHLFlBQVVub0QsRUFBRSxrQkFBRixDQUFWLEdBQWdDLE9BQTNEO0FBQ25iQSxNQUFFLG1CQUFGLE1BQXlCbW9ELEtBQUcsYUFBV25vRCxFQUFFLG1CQUFGLENBQVgsR0FBa0MsT0FBOUQsRUFBdUVBLEVBQUUsYUFBRixNQUFtQm1vRCxLQUFHLGFBQVdub0QsRUFBRSxtQkFBRixDQUFYLEdBQWtDLE9BQXhELEVBQWlFQSxFQUFFLGlCQUFGLE1BQXVCbW9ELEtBQUcsV0FBU25vRCxFQUFFLGlCQUFGLENBQVQsR0FBOEIsT0FBeEQsRUFBaUVBLEVBQUUsbUJBQUYsTUFBeUJtb0QsS0FBRyx1QkFBcUJqbUMsVUFBVWxpQixFQUFFLG1CQUFGLENBQVYsQ0FBckIsR0FBdUQsT0FBbkYsRUFBNEZBLEVBQUUsb0JBQUYsTUFBMEJtb0QsS0FBRyxjQUFZam1DLFVBQVVsaUIsRUFBRSxvQkFBRixDQUFWLENBQVosR0FBK0MsT0FBNUUsRUFBcUZBLEVBQUU4cEQsVUFBRixLQUFlM0IsS0FBRyxpQkFBZW5vRCxFQUFFOHBELFVBQWpCLEdBQTRCLE9BQTlDLEVBQXVEOXBELEVBQUUrcEQsSUFBRixLQUFTNUIsS0FBR25vRCxFQUFFK3BELElBQUYsR0FBTyxPQUFuQixFQUE0Qi9wRCxFQUFFKzBDLFdBQUYsS0FBZ0JvVCxLQUFHbm9ELEVBQUUrMEMsV0FBRixHQUFjLE9BQWpDO0FBQzdjLzBDLE1BQUVncUQsUUFBRixLQUFhN0IsS0FBRyxlQUFhbm9ELEVBQUVncUQsUUFBZixHQUF3QixPQUF4QyxFQUFpRGhxRCxFQUFFMlQsR0FBRixLQUFRdzBDLEtBQUcsZ0JBQWNub0QsRUFBRTJULEdBQWhCLEdBQW9CLE9BQS9CLEVBQXdDLFNBQU8zVCxFQUFFaXFELEdBQVQsS0FBZTlCLEtBQUcsa0NBQWxCLEVBQXNEbm9ELEVBQUVrcUQsSUFBRixLQUFTN0IsSUFBRSxFQUFGLEVBQUtyb0QsRUFBRW1xRCxLQUFGLEtBQVU5QixLQUFHLFlBQVVyb0QsRUFBRW1xRCxLQUFaLEdBQWtCLE9BQS9CLENBQUwsRUFBNkNucUQsRUFBRW9xRCxLQUFGLEtBQVUvQixLQUFHLFlBQVVyb0QsRUFBRW9xRCxLQUFaLEdBQWtCLE9BQS9CLENBQTdDLEVBQXFGcHFELEVBQUVxcUQsTUFBRixLQUFXaEMsS0FBRyxvQkFBa0Jyb0QsRUFBRXFxRCxNQUFwQixHQUEyQixPQUF6QyxDQUFyRixFQUF1SSxTQUFPcnFELEVBQUVzcUQsU0FBVCxLQUFxQmpDLEtBQUcsdUJBQXhCLENBQXZJLEVBQXdMLE1BQUlBLENBQUosS0FBUUYsS0FBRywwREFBd0RFLENBQXhELEdBQTBELGFBQXJFLENBQWpNLEVBQXNSdG9ELE1BQUlzb0QsSUFBRXRvRCxDQUFGLEVBQUlpbkQsS0FBS3FCLENBQUwsQ0FBSixFQUFZQSxJQUFFQSxFQUFFcDFDLE9BQUYsQ0FBVSxJQUFWLEVBQWUsR0FBZixDQUFkLEVBQWtDazFDLElBQUVBLElBQUUsT0FBRixJQUFXLG1EQUNwZEUsQ0FEb2QsR0FDbGQsK0NBRHVjLENBQXhDLEVBQzdXLE9BQU9GLElBQUUsbUNBQWlDQSxDQUFqQyxHQUFtQyxRQUE1QztBQUFxRDtBQUMxRyxTQUFTaUIsbUJBQVQsQ0FBNkJwcEQsQ0FBN0IsRUFBK0I7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxJQUFHLGFBQVdDLEVBQUU0b0QsT0FBYixJQUFzQixZQUFVNW9ELEVBQUV1cUQsVUFBckMsRUFBZ0R4cUQsS0FBRyxhQUFILENBQWlCLElBQUcsY0FBWUMsRUFBRTRvRCxPQUFkLElBQXVCLFlBQVU1b0QsRUFBRTRvRCxPQUFuQyxJQUE0QyxjQUFZNW9ELEVBQUV1cUQsVUFBMUQsSUFBc0UsWUFBVXZxRCxFQUFFdXFELFVBQXJGLEVBQWdHeHFELElBQUUsU0FBT0MsRUFBRXdxRCxTQUFULEdBQW1CenFELElBQUUseUNBQXJCLEdBQStEQSxJQUFFLGVBQW5FLENBQW1GLGFBQVdDLEVBQUU0b0QsT0FBYixLQUF1QjdvRCxLQUFHLGNBQTFCLEVBQTBDLElBQUcsY0FBWUMsRUFBRTRvRCxPQUFkLElBQXVCLGNBQVk1b0QsRUFBRSxzQkFBRixDQUF0QyxFQUFnRUQsS0FBRyxlQUFILENBQW1CLElBQUcscUJBQW1CQyxFQUFFdXFELFVBQXJCLElBQWlDLFNBQU92cUQsRUFBRSxpQ0FBRixDQUEzQyxFQUFnRkQsS0FBRyxzQkFBSDtBQUM3ZSxRQUFHLDRCQUEwQkMsRUFBRXVxRCxVQUE1QixJQUF3QyxTQUFPdnFELEVBQUUsd0NBQUYsQ0FBL0MsSUFBNEYsU0FBT0EsRUFBRSx1Q0FBRixDQUF0RyxFQUFpSkQsS0FBRyw2QkFBSCxDQUFpQyxJQUFHLHFCQUFtQkMsRUFBRXVxRCxVQUFyQixJQUFpQyxTQUFPdnFELEVBQUUsaUNBQUYsQ0FBM0MsRUFBZ0ZELEtBQUcsc0JBQUgsQ0FBMEIsaUJBQWVDLEVBQUV1cUQsVUFBakIsS0FBOEJ4cUQsS0FBRyxrQkFBakMsRUFBcUQsYUFBV0MsRUFBRXVxRCxVQUFiLEtBQTBCeHFELEtBQUcsY0FBN0IsRUFBNkMsSUFBRyxzQkFBb0JDLEVBQUV1cUQsVUFBdEIsSUFBa0MsU0FBT3ZxRCxFQUFFLGtDQUFGLENBQTVDLEVBQWtGRCxLQUFHLHVCQUFILENBQTJCLFNBQU9DLEVBQUUsaUNBQUYsQ0FBUCxLQUMxZUQsS0FBRyxvQkFEdWUsRUFDamQsZ0JBQWNDLEVBQUU0b0QsT0FBaEIsS0FBMEI3b0QsS0FBRyxpQkFBN0IsRUFBZ0Qsa0JBQWdCQyxFQUFFNG9ELE9BQWxCLEtBQTRCN29ELEtBQUcsbUJBQS9CLEVBQW9ELHVCQUFxQkMsRUFBRXdxRCxTQUF2QixLQUFtQ3pxRCxLQUFHLHdCQUF0QyxFQUFnRSxTQUFPQyxFQUFFd3FELFNBQVQsS0FBcUJ6cUQsS0FBRyxVQUF4QixFQUFvQyxtQkFBaUJDLEVBQUV3cUQsU0FBbkIsS0FBK0J6cUQsS0FBRyxvQkFBbEMsRUFBd0QsV0FBU0MsRUFBRXdxRCxTQUFYLEtBQXVCenFELEtBQUcsZUFBMUIsRUFBMkMsWUFBVUMsRUFBRTRvRCxPQUFaLEtBQXNCN29ELEtBQUcsYUFBekIsRUFBd0MsdUJBQXFCQyxFQUFFd3FELFNBQXZCLEtBQW1DenFELEtBQUcsd0JBQXRDLEVBQWdFLGVBQWFDLEVBQUV5cUQsaUJBQWYsS0FBbUMxcUQsS0FBRyxnQkFBdEMsRUFBd0QsV0FBU0MsRUFBRXlxRCxpQkFBWCxLQUNwZTFxRCxLQUFHLFlBRGllLEVBQ25kLGNBQVlDLEVBQUUwcUQsUUFBZCxLQUF5QjNxRCxLQUFHLGVBQTVCLEVBQTZDLFNBQU9DLEVBQUV5cUQsaUJBQVQsS0FBNkIxcUQsS0FBRyx3QkFBaEMsRUFBMEQsNEJBQTBCQyxFQUFFMnFELE9BQTVCLEtBQXNDNXFELEtBQUcsNkJBQXpDLEVBQXdFLElBQUcsc0JBQW9CQyxFQUFFNG9ELE9BQXRCLElBQStCLHNCQUFvQjVvRCxFQUFFd3FELFNBQXhELEVBQWtFenFELEtBQUcsdUJBQUgsQ0FBMkIsZUFBYUMsRUFBRXdxRCxTQUFmLEtBQTJCenFELEtBQUcsZ0JBQTlCLEVBQWdELFdBQVNDLEVBQUV3cUQsU0FBWCxLQUF1QnpxRCxLQUFHLFlBQTFCLEVBQXdDLGVBQWFDLEVBQUU0b0QsT0FBZixLQUF5QjdvRCxLQUFHLGdCQUE1QixFQUE4QyxvQkFBa0JDLEVBQUU0b0QsT0FBcEIsS0FBOEI3b0QsS0FBRyxxQkFBakMsRUFBd0Qsa0JBQWdCQyxFQUFFd3FELFNBQWxCLEtBQzNkLGlCQUFleHFELEVBQUUsbUJBQUYsQ0FBZixHQUFzQ0QsS0FBRywwQkFBekMsR0FBb0UsWUFBVUMsRUFBRSxtQkFBRixDQUFWLEdBQWlDRCxLQUFHLHFCQUFwQyxHQUEwRCxVQUFRQyxFQUFFLG1CQUFGLENBQVIsR0FBK0JELEtBQUcsbUJBQWxDLEdBQXNELFVBQVFDLEVBQUUsbUJBQUYsQ0FBUixLQUFpQ0QsS0FBRyxvQkFBcEMsQ0FEdVMsRUFDNU8sbUJBQWlCQyxFQUFFd3FELFNBQW5CLEtBQStCenFELEtBQUcsb0JBQWxDLEVBQXdELHFCQUFtQkMsRUFBRXdxRCxTQUFyQixLQUFpQ3pxRCxLQUFHLDJCQUFwQyxFQUFpRSxjQUFZQyxFQUFFeXFELGlCQUFkLEtBQWtDMXFELEtBQUcsOEJBQXJDLEVBQXFFLGdCQUFjQyxFQUFFd3FELFNBQWhCLEtBQTRCenFELEtBQUcsc0JBQS9CLEVBQXVELGVBQWFDLEVBQUU0cUQsY0FBZixLQUNwZTdxRCxLQUFHLDBCQURpZSxFQUNyYyxlQUFhQyxFQUFFNG9ELE9BQWYsSUFBd0IsU0FBTzVvRCxFQUFFLHFCQUFGLENBQS9CLElBQXlELGNBQVlBLEVBQUUsdUNBQUYsQ0FBckUsR0FBZ0hELEtBQUcsc0JBQW5ILEdBQTBJLGVBQWFDLEVBQUU0b0QsT0FBZixLQUF5QjdvRCxLQUFHLHNCQUE1QixDQUExSSxDQUE4TCxTQUFPQyxFQUFFLGtCQUFGLENBQVAsR0FBNkJELEtBQUcsNEJBQWhDLEdBQTZELFVBQVFDLEVBQUUsa0JBQUYsQ0FBUixLQUFnQ0QsS0FBRyx1QkFBbkMsQ0FBN0QsQ0FBeUgsU0FBT0MsRUFBRSxpQkFBRixDQUFQLEdBQTRCRCxLQUFHLDJCQUEvQixHQUEyRCxVQUFRQyxFQUFFLGlCQUFGLENBQVIsS0FBK0JELEtBQUcsc0JBQWxDLENBQTNELENBQXFILFNBQU9DLEVBQUUsdUJBQUYsQ0FBUCxHQUFrQ0QsS0FBRyxpQ0FBckMsR0FDeGMsVUFBUUMsRUFBRSx1QkFBRixDQUFSLEtBQXFDRCxLQUFHLDRCQUF4QyxDQUR3YyxDQUNsWSxTQUFPQyxFQUFFLHFCQUFGLENBQVAsR0FBZ0NELEtBQUcsK0JBQW5DLEdBQW1FLFVBQVFDLEVBQUUscUJBQUYsQ0FBUixLQUFtQ0QsS0FBRywwQkFBdEMsQ0FBbkUsQ0FBcUksU0FBT0MsRUFBRSxZQUFGLENBQVAsR0FBdUJELEtBQUcsc0JBQTFCLEdBQWlELFVBQVFDLEVBQUUsWUFBRixDQUFSLEtBQTBCRCxLQUFHLGlCQUE3QixDQUFqRCxDQUFpRyxTQUFPQyxFQUFFLGlCQUFGLENBQVAsR0FBNEJELEtBQUcsMkJBQS9CLEdBQTJELFVBQVFDLEVBQUUsaUJBQUYsQ0FBUixLQUErQkQsS0FBRyxzQkFBbEMsQ0FBM0QsQ0FBcUgsU0FBT0MsRUFBRSxVQUFGLENBQVAsR0FBcUJELEtBQUcsb0JBQXhCLEdBQTZDLFVBQVFDLEVBQUUsVUFBRixDQUFSLEtBQXdCRCxLQUFHLGVBQTNCLENBQTdDO0FBQ3JhLGFBQU9DLEVBQUUsa0JBQUYsQ0FBUCxHQUE2QkQsS0FBRyw0QkFBaEMsR0FBNkQsVUFBUUMsRUFBRSxrQkFBRixDQUFSLEtBQWdDRCxLQUFHLHVCQUFuQyxDQUE3RCxDQUF5SCxTQUFPQyxFQUFFLGlCQUFGLENBQVAsR0FBNEJELEtBQUcsMkJBQS9CLEdBQTJELFVBQVFDLEVBQUUsaUJBQUYsQ0FBUixLQUErQkQsS0FBRyxzQkFBbEMsQ0FBM0QsQ0FBcUgsU0FBT0MsRUFBRSxtQkFBRixDQUFQLEdBQThCRCxLQUFHLDZCQUFqQyxHQUErRCxVQUFRQyxFQUFFLG1CQUFGLENBQVIsS0FBaUNELEtBQUcsd0JBQXBDLENBQS9ELENBQTZILFNBQU9DLEVBQUUsWUFBRixDQUFQLEdBQXVCRCxLQUFHLHNCQUExQixHQUFpRCxVQUFRQyxFQUFFLFlBQUYsQ0FBUixLQUEwQkQsS0FBRyxpQkFBN0IsQ0FBakQsQ0FBaUcsU0FBT0MsRUFBRSxhQUFGLENBQVAsR0FBd0JELEtBQUcsdUJBQTNCLEdBQ3hjLFVBQVFDLEVBQUUsYUFBRixDQUFSLEtBQTJCRCxLQUFHLGtCQUE5QixDQUR3YyxDQUN0WixTQUFPQyxFQUFFNG9ELE9BQVQsS0FBbUI3b0QsS0FBRyxVQUF0QixFQUFrQyxTQUFPQyxFQUFFNG9ELE9BQVQsS0FBbUI3b0QsS0FBRyxVQUF0QixFQUFrQyxTQUFPQyxFQUFFNnFELGFBQVQsS0FBeUI5cUQsS0FBRyxvQkFBNUIsRUFBa0QsU0FBT0MsRUFBRThxRCxTQUFULEtBQXFCL3FELEtBQUcsZ0JBQXhCLEVBQTBDLFNBQU9DLEVBQUUrcUQsSUFBVCxLQUFnQmhyRCxLQUFHLFdBQW5CLEVBQWdDLFNBQU9DLEVBQUVnckQsTUFBVCxLQUFrQmpyRCxLQUFHLGFBQXJCLEVBQW9DLFNBQU9DLEVBQUVpckQsTUFBVCxLQUFrQmxyRCxLQUFHLGFBQXJCLEVBQW9DLGdCQUFjQyxFQUFFNG9ELE9BQWhCLEtBQTBCN29ELEtBQUcsaUJBQTdCLEVBQWdELGdCQUFjQyxFQUFFNG9ELE9BQWhCLEtBQTBCN29ELEtBQUcsaUJBQTdCLEVBQWdELGVBQWFDLEVBQUU0b0QsT0FBZixLQUF5QjdvRCxLQUFHLGdCQUE1QixFQUE4QyxJQUFHLENBQUMsVUFBUUMsRUFBRTRvRCxPQUFWLElBQW1CLGlCQUFlNW9ELEVBQUU0b0QsT0FBckMsS0FDM2MsZUFBYTVvRCxFQUFFa3JELE9BRHliLEVBQ2pibnJELEtBQUcsV0FBSCxDQUFlLElBQUcsVUFBUUMsRUFBRTRvRCxPQUFWLElBQW1CLGVBQWE1b0QsRUFBRWtyRCxPQUFsQyxJQUEyQyxlQUFhbHJELEVBQUU0b0QsT0FBN0QsRUFBcUU3b0QsS0FBRyxnQkFBSCxDQUFvQixnQkFBY0MsRUFBRTZvRCxPQUFoQixLQUEwQjlvRCxLQUFHLGlCQUE3QixFQUFnRCxjQUFZQyxFQUFFNm9ELE9BQWQsS0FBd0I5b0QsS0FBRyxlQUEzQixFQUE0QyxlQUFhQyxFQUFFNm9ELE9BQWYsS0FBeUI5b0QsS0FBRyxnQkFBNUIsRUFBOEMsZ0JBQWNDLEVBQUU2b0QsT0FBaEIsS0FBMEI5b0QsS0FBRyxpQkFBN0IsRUFBZ0QsYUFBV0MsRUFBRTZvRCxPQUFiLEtBQXVCOW9ELEtBQUcsY0FBMUIsRUFBMEMsZUFBYUMsRUFBRTZvRCxPQUFmLEtBQXlCOW9ELEtBQUcsZ0JBQTVCLEVBQThDLGtCQUFnQkMsRUFBRTZvRCxPQUFsQixLQUE0QjlvRCxLQUFHLG1CQUEvQixFQUFvRCxZQUFVQyxFQUFFNm9ELE9BQVosS0FBc0I5b0QsS0FBRyxhQUF6QixFQUF3QyxhQUNqZkMsRUFBRTZvRCxPQUQrZSxLQUNyZTlvRCxLQUFHLGNBRGtlLEVBQ2xkLGlCQUFlQyxFQUFFNm9ELE9BQWpCLEtBQTJCOW9ELEtBQUcsa0JBQTlCLEVBQWtELFlBQVVDLEVBQUU2b0QsT0FBWixLQUFzQjlvRCxLQUFHLGFBQXpCLEVBQXdDLFdBQVNDLEVBQUU2b0QsT0FBWCxLQUFxQjlvRCxLQUFHLFlBQXhCLEVBQXNDLFdBQVNDLEVBQUU2b0QsT0FBWCxLQUFxQjlvRCxLQUFHLFlBQXhCLEVBQXNDLFlBQVVDLEVBQUU2b0QsT0FBWixLQUFzQjlvRCxLQUFHLGFBQXpCLEVBQXdDLGlCQUFlQyxFQUFFNm9ELE9BQWpCLEtBQTJCOW9ELEtBQUcsa0JBQTlCLEVBQWtELGdCQUFjQyxFQUFFNm9ELE9BQWhCLEtBQTBCOW9ELEtBQUcsaUJBQTdCLEVBQWdELGVBQWFDLEVBQUU2b0QsT0FBZixLQUF5QjlvRCxLQUFHLGdCQUE1QixFQUE4QyxvQkFBa0JDLEVBQUU2b0QsT0FBcEIsS0FBOEI5b0QsS0FBRyxxQkFBakMsRUFBd0QsaUJBQWVDLEVBQUU2b0QsT0FBakIsS0FBMkI5b0QsS0FBRyxrQkFBOUIsRUFBa0QsU0FBT0MsRUFBRTZvRCxPQUFULEtBQ3RlOW9ELEtBQUcsVUFBSCxFQUFjLGVBQWFDLEVBQUVtckQsR0FBZixLQUFxQnByRCxLQUFHLGdCQUF4QixDQUFkLEVBQXdELGlCQUFlQyxFQUFFbXJELEdBQWpCLEtBQXVCcHJELEtBQUcsa0JBQTFCLENBQXhELEVBQXNHLGNBQVlDLEVBQUVtckQsR0FBZCxLQUFvQnByRCxLQUFHLGVBQXZCLENBRGdZLEVBQ3ZWLDBCQUF3QkMsRUFBRTZvRCxPQUExQixLQUFvQzlvRCxLQUFHLDJCQUF2QyxFQUFvRSxhQUFXQyxFQUFFb3JELElBQWIsS0FBb0JyckQsS0FBRyxtQkFBdkIsRUFBNEMsV0FBU0MsRUFBRW9yRCxJQUFYLElBQWlCLGFBQVdwckQsRUFBRWlwRCxLQUE5QixLQUFzQ2xwRCxLQUFHLG1CQUF6QyxFQUE4RCxtQkFBaUJDLEVBQUVvckQsSUFBbkIsS0FBMEJyckQsS0FBRyx5QkFBN0IsRUFBd0QsU0FBT0MsRUFBRW9yRCxJQUFULEtBQWdCcnJELEtBQUcsZUFBbkIsRUFBb0MsZUFBYUMsRUFBRW9yRCxJQUFmLEtBQXNCcnJELEtBQUcscUJBQXpCLEVBQWdELGdCQUFjQyxFQUFFb3JELElBQWhCLEtBQXVCcnJELEtBQUcsc0JBQTFCO0FBQzFjLHFCQUFlQyxFQUFFb3JELElBQWpCLEtBQXdCcnJELEtBQUcsdUJBQTNCLEVBQW9ELGdCQUFjQyxFQUFFb3JELElBQWhCLEtBQXVCcnJELEtBQUcsc0JBQTFCLEVBQWtELGFBQVdDLEVBQUVvckQsSUFBYixLQUFvQnJyRCxLQUFHLG1CQUF2QixFQUE0QyxXQUFTQyxFQUFFb3JELElBQVgsS0FBa0JyckQsS0FBRyxpQkFBckIsRUFBd0MsWUFBVUMsRUFBRW9yRCxJQUFaLEtBQW1CcnJELEtBQUcsa0JBQXRCLEVBQTBDLGFBQVdDLEVBQUVvckQsSUFBYixLQUFvQnJyRCxLQUFHLG1CQUF2QixFQUE0QyxhQUFXQyxFQUFFb3JELElBQWIsS0FBb0JyckQsS0FBRyxtQkFBdkIsRUFBNEMsa0JBQWdCQyxFQUFFb3JELElBQWxCLEtBQXlCcnJELEtBQUcsd0JBQTVCLEVBQXNELGdCQUFjQyxFQUFFb3JELElBQWhCLEtBQXVCcnJELEtBQUcsc0JBQTFCLEVBQWtELFlBQVVDLEVBQUVvckQsSUFBWixLQUFtQnJyRCxLQUFHLGtCQUF0QixFQUEwQyxTQUFPQyxFQUFFb3JELElBQVQsS0FBZ0JyckQsS0FBRyxlQUFuQixFQUFvQyxpQkFDbGZDLEVBQUVvckQsSUFEZ2YsS0FDemVyckQsS0FBRyx1QkFEc2UsRUFDN2MsVUFBUUMsRUFBRW9yRCxJQUFWLEtBQWlCcnJELEtBQUcsZ0JBQXBCLEVBQXNDLGFBQVdDLEVBQUVvckQsSUFBYixLQUFvQnJyRCxLQUFHLG1CQUF2QixFQUE0QyxhQUFXQyxFQUFFb3JELElBQWIsS0FBb0JyckQsS0FBRyxtQkFBdkIsRUFBNEMsV0FBU0MsRUFBRW9yRCxJQUFYLEtBQWtCcnJELEtBQUcsaUJBQXJCLEVBQXdDLGdCQUFjQyxFQUFFb3JELElBQWhCLEtBQXVCcnJELEtBQUcsc0JBQTFCLEVBQWtELFdBQVNDLEVBQUVvckQsSUFBWCxLQUFrQnJyRCxLQUFHLGlCQUFyQixFQUF3QyxZQUFVQyxFQUFFb3JELElBQVosS0FBbUJyckQsS0FBRyxrQkFBdEIsRUFBMEMsWUFBVUMsRUFBRW9yRCxJQUFaLEtBQW1CcnJELEtBQUcsa0JBQXRCLEVBQTBDLGlCQUFlQyxFQUFFb3JELElBQWpCLEtBQXdCcnJELEtBQUcsdUJBQTNCLEVBQW9ELGNBQVlDLEVBQUVvckQsSUFBZCxLQUFxQnJyRCxLQUFHLG9CQUF4QixFQUE4QyxjQUFZQyxFQUFFb3JELElBQWQsS0FBcUJyckQsS0FBRyxvQkFBeEI7QUFDM2QsZUFBU0MsRUFBRW9yRCxJQUFYLEtBQWtCcnJELEtBQUcsaUJBQXJCLEVBQXdDLFdBQVNDLEVBQUVvckQsSUFBWCxLQUFrQnJyRCxLQUFHLGlCQUFyQixFQUF3QyxXQUFTQyxFQUFFb3JELElBQVgsS0FBa0JyckQsS0FBRyxpQkFBckIsRUFBd0MsYUFBV0MsRUFBRW9yRCxJQUFiLEtBQW9CcnJELEtBQUcsbUJBQXZCLEVBQTRDLGNBQVlDLEVBQUVvckQsSUFBZCxLQUFxQnJyRCxLQUFHLG9CQUF4QixFQUE4QyxzQkFBb0JDLEVBQUUrb0QsT0FBdEIsS0FBZ0NocEQsS0FBRyxtQ0FBbkMsRUFBd0Usa0JBQWdCQyxFQUFFK29ELE9BQWxCLEtBQTRCaHBELEtBQUcsbUJBQS9CLEVBQW9ELGVBQWFDLEVBQUUrb0QsT0FBZixLQUF5QmhwRCxLQUFHLGdCQUE1QixFQUE4QyxZQUFVQyxFQUFFK29ELE9BQVosS0FBc0JocEQsS0FBRyxhQUF6QixFQUF3QyxVQUFRQyxFQUFFK29ELE9BQVYsS0FBb0JocEQsS0FBRyxXQUF2QixFQUFvQyxXQUFTQyxFQUFFK29ELE9BQVgsS0FBcUJocEQsS0FBRyxZQUF4QixFQUFzQyxjQUM5ZUMsRUFBRStvRCxPQUQ0ZSxLQUNsZWhwRCxLQUFHLGVBRCtkLEVBQzljLGFBQVdDLEVBQUUrb0QsT0FBYixLQUF1QmhwRCxLQUFHLGNBQTFCLEVBQTBDLGFBQVdDLEVBQUUrb0QsT0FBYixLQUF1QmhwRCxLQUFHLGNBQTFCLEVBQTBDLFlBQVVDLEVBQUUrb0QsT0FBWixLQUFzQmhwRCxLQUFHLGFBQXpCLEVBQXdDLGlCQUFlQyxFQUFFK29ELE9BQWpCLEtBQTJCaHBELEtBQUcsa0JBQTlCLEVBQWtELGlCQUFlQyxFQUFFK29ELE9BQWpCLEtBQTJCaHBELEtBQUcsa0JBQTlCLEVBQWtELGtCQUFnQkMsRUFBRStvRCxPQUFsQixLQUE0QmhwRCxLQUFHLG1CQUEvQixFQUFvRCxjQUFZQyxFQUFFK29ELE9BQWQsS0FBd0JocEQsS0FBRyxlQUEzQixFQUE0QyxvQkFBa0JDLEVBQUUrb0QsT0FBcEIsS0FBOEJocEQsS0FBRyxxQkFBakMsRUFBd0QsVUFBUUMsRUFBRStvRCxPQUFWLEtBQW9CaHBELEtBQUcsV0FBdkIsRUFBb0Msb0JBQWtCQyxFQUFFK29ELE9BQXBCLEtBQThCaHBELEtBQUcscUJBQWpDLEVBQXdELFdBQ3BmQyxFQUFFK29ELE9BRGtmLEtBQ3hlaHBELEtBQUcsWUFEcWUsRUFDdmQsV0FBU0MsRUFBRStvRCxPQUFYLElBQW9CLFNBQU8vb0QsRUFBRXFyRCxRQUE3QixLQUF3Q3RyRCxLQUFHLFVBQTNDLEVBQXVELGdCQUFjQyxFQUFFK29ELE9BQWhCLElBQXlCLFNBQU8vb0QsRUFBRXFyRCxRQUFsQyxHQUEyQ3RyRCxLQUFHLGlCQUE5QyxHQUFnRSxnQkFBY0MsRUFBRStvRCxPQUFoQixLQUEwQmhwRCxLQUFHLGlCQUE3QixDQUFoRSxDQUFnSCxpQkFBZUMsRUFBRStvRCxPQUFqQixLQUEyQmhwRCxLQUFHLGtCQUE5QixFQUFrRCxTQUFPQyxFQUFFK29ELE9BQVQsS0FBbUJocEQsS0FBRyxVQUF0QixFQUFrQyxtQkFBaUJDLEVBQUUrb0QsT0FBbkIsS0FBNkJocEQsS0FBRyxvQkFBaEMsRUFBc0Qsd0JBQXNCQyxFQUFFaXBELEtBQXhCLEtBQWdDbHBELEtBQUcseUJBQW5DLEVBQThELGFBQVdDLEVBQUUrb0QsT0FBYixLQUF1QmhwRCxLQUFHLGNBQTFCLEVBQTBDLG1CQUFpQkMsRUFBRStvRCxPQUFuQixLQUE2QmhwRCxLQUFHLG9CQUFoQyxFQUFzRCxXQUM1ZUMsRUFBRStvRCxPQUQwZSxLQUNoZWhwRCxLQUFHLFlBRDZkLEVBQy9jLGdCQUFjQyxFQUFFK29ELE9BQWhCLEtBQTBCaHBELEtBQUcsaUJBQTdCLEVBQWdELG1CQUFpQkMsRUFBRStvRCxPQUFuQixLQUE2QmhwRCxLQUFHLG9CQUFoQyxFQUFzRCx5QkFBdUJDLEVBQUUrb0QsT0FBekIsS0FBbUNocEQsS0FBRywwQkFBdEMsRUFBa0UsbUJBQWlCQyxFQUFFK29ELE9BQW5CLElBQTRCLFdBQVMvb0QsRUFBRWlwRCxLQUF2QyxLQUErQ2xwRCxLQUFHLDBCQUFsRCxFQUE4RSxtQkFBaUJDLEVBQUUrb0QsT0FBbkIsSUFBNEIsVUFBUS9vRCxFQUFFaXBELEtBQXRDLEtBQThDbHBELEtBQUcseUJBQWpELEVBQTRFLElBQUcsYUFBV0MsRUFBRWlwRCxLQUFiLElBQW9CLFdBQVNqcEQsRUFBRWlwRCxLQUFsQyxFQUF3Q2xwRCxLQUFHLGNBQUgsQ0FBa0IsSUFBRyxXQUFTQyxFQUFFaXBELEtBQVgsSUFBa0IsVUFBUWpwRCxFQUFFaXBELEtBQS9CLEVBQXFDbHBELEtBQUcsWUFBSCxDQUFnQixJQUFHQyxFQUFFLFlBQUYsQ0FBSCxFQUFtQixRQUFPQSxFQUFFLFlBQUYsQ0FBUCxHQUF3QixLQUFLLFNBQUw7QUFBZUQsaUJBQ3BnQixjQURvZ0IsQ0FDcmYsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLGVBQUgsQ0FBbUIsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsV0FBSCxDQUFlLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLGFBQUgsQ0FBaUIsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsV0FBSCxDQUFlLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxnQkFBSCxDQUR1UyxDQUNuUixJQUFHQyxFQUFFaXBELEtBQUwsRUFBVyxRQUFPanBELEVBQUVpcEQsS0FBVCxHQUFnQixLQUFLLFNBQUw7QUFBZWxwRCxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRyxrQkFBSCxDQUFzQixNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsZ0JBQUgsQ0FBdkgsQ0FBMkksSUFBR0MsRUFBRWdwRCxTQUFMLEVBQWUsUUFBT2hwRCxFQUFFZ3BELFNBQVQsR0FBb0IsS0FBSyxXQUFMO0FBQWlCanBELGlCQUFHLGdCQUFILENBQW9CLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLGNBQUgsQ0FBa0IsTUFBTSxLQUFLLFlBQUw7QUFBa0JBLGlCQUFHLGlCQUFIO0FBQ3ZlLGtCQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsaUJBQUgsQ0FBcUIsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGdCQUFILENBQW9CLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLFlBQUgsQ0FBZ0IsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsWUFBSCxDQUFnQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxlQUFILENBQW1CLE1BQU0sS0FBSyxjQUFMO0FBQW9CQSxpQkFBRyxtQkFBSCxDQUF1QixNQUFNO0FBQVFBLGlCQUFHLFNBQUgsQ0FEa0UsQ0FDckQsWUFBVUMsRUFBRXFyRCxRQUFaLEtBQXVCdHJELEtBQUcsYUFBMUIsRUFBeUMsZUFBYUMsRUFBRXFyRCxRQUFmLEtBQTBCdHJELEtBQUcsZ0JBQTdCLEVBQStDLFlBQVVDLEVBQUVxckQsUUFBWixLQUF1QnRyRCxLQUFHLGFBQTFCLEVBQXlDLGdCQUFjQyxFQUFFcXJELFFBQWhCLEtBQTJCdHJELEtBQUcsaUJBQTlCLEVBQWlELFVBQVFDLEVBQUVxckQsUUFBVixLQUMvZXRyRCxLQUFHLFdBRDRlLEVBQy9kLFdBQVNDLEVBQUVxckQsUUFBWCxLQUFzQnRyRCxLQUFHLFlBQXpCLEVBQXVDLFdBQVNDLEVBQUVxckQsUUFBWCxLQUFzQnRyRCxLQUFHLFlBQXpCLEVBQXVDLGNBQVlDLEVBQUVxckQsUUFBZCxLQUF5QnRyRCxLQUFHLGVBQTVCLEVBQTZDLGlCQUFlQyxFQUFFcXJELFFBQWpCLEtBQTRCdHJELEtBQUcsa0JBQS9CLEVBQW1ELElBQUcsY0FBWUMsRUFBRXFyRCxRQUFkLElBQXdCLHNCQUFvQnJyRCxFQUFFcXJELFFBQWpELEVBQTBEdHJELEtBQUcsZUFBSCxDQUFtQixhQUFXQyxFQUFFcXJELFFBQWIsS0FBd0J0ckQsS0FBRyxjQUEzQixFQUEyQyxlQUFhQyxFQUFFcXJELFFBQWYsS0FBMEJ0ckQsS0FBRyxnQkFBN0IsRUFBK0MsY0FBWUMsRUFBRXFyRCxRQUFkLEtBQXlCdHJELEtBQUcsZUFBNUIsRUFBNkMsb0JBQWtCQyxFQUFFcXJELFFBQXBCLEtBQStCdHJELEtBQUcscUJBQWxDLEVBQXlELGdCQUFjQyxFQUFFcXJELFFBQWhCLEtBQTJCdHJELEtBQUcsaUJBQTlCO0FBQzVjLGdCQUFVQyxFQUFFcXJELFFBQVosS0FBdUJ0ckQsS0FBRyxhQUExQixFQUF5QyxlQUFhQyxFQUFFcXJELFFBQWYsS0FBMEJ0ckQsS0FBRyxnQkFBN0IsRUFBK0MsZUFBYUMsRUFBRXFyRCxRQUFmLEtBQTBCdHJELEtBQUcsZ0JBQTdCLEVBQStDLFlBQVVDLEVBQUVxckQsUUFBWixLQUF1QnRyRCxLQUFHLGFBQTFCLEVBQXlDLFdBQVNDLEVBQUVxckQsUUFBWCxLQUFzQnRyRCxLQUFHLFlBQXpCLEVBQXVDLGFBQVdDLEVBQUVxckQsUUFBYixLQUF3QnRyRCxLQUFHLGNBQTNCLEVBQTJDLG1CQUFpQkMsRUFBRXFyRCxRQUFuQixLQUE4QnRyRCxLQUFHLG9CQUFqQyxFQUF1RCxnQkFBY0MsRUFBRXFyRCxRQUFoQixLQUEyQnRyRCxLQUFHLGlCQUE5QixFQUFpRCxZQUFVQyxFQUFFcXJELFFBQVosS0FBdUJ0ckQsS0FBRyxhQUExQixFQUF5QyxZQUFVQyxFQUFFcXJELFFBQVosS0FBdUJ0ckQsS0FBRyxhQUExQixFQUF5QyxZQUFVQyxFQUFFcXJELFFBQVosS0FBdUJ0ckQsS0FBRyxhQUExQixFQUF5QyxXQUFTQyxFQUFFcXJELFFBQVgsS0FDcGV0ckQsS0FBRyxZQURpZSxFQUNuZCxrQkFBZ0JDLEVBQUVxckQsUUFBbEIsS0FBNkJ0ckQsS0FBRyxtQkFBaEMsRUFBcUQsa0JBQWdCQyxFQUFFcXJELFFBQWxCLEtBQTZCdHJELEtBQUcsbUJBQWhDLEVBQXFELFlBQVVDLEVBQUVxckQsUUFBWixLQUF1QnRyRCxLQUFHLGFBQTFCLEVBQXlDLGFBQVdDLEVBQUVxckQsUUFBYixLQUF3QnRyRCxLQUFHLGNBQTNCLEVBQTJDLGdCQUFjQyxFQUFFcXJELFFBQWhCLEtBQTJCdHJELEtBQUcsaUJBQTlCLEVBQWlELFlBQVVDLEVBQUVxckQsUUFBWixLQUF1QnRyRCxLQUFHLGFBQTFCLEVBQXlDLFNBQU9DLEVBQUVxckQsUUFBVCxLQUFvQnRyRCxLQUFHLFVBQXZCLEVBQW1DLGVBQWFDLEVBQUVxckQsUUFBZixLQUEwQnRyRCxLQUFHLGdCQUE3QixFQUErQyxVQUFRQyxFQUFFcXJELFFBQVYsS0FBcUJ0ckQsS0FBRyxXQUF4QixFQUFxQyxVQUFRQyxFQUFFcXJELFFBQVYsS0FBcUJ0ckQsS0FBRyxXQUF4QixFQUFxQyx1QkFBcUJDLEVBQUVxckQsUUFBdkIsS0FBa0N0ckQsS0FBRyx3QkFBckM7QUFDdGMsaUJBQVdDLEVBQUVxckQsUUFBYixLQUF3QnRyRCxLQUFHLGNBQTNCLEVBQTJDLFdBQVNDLEVBQUVxckQsUUFBWCxLQUFzQnRyRCxLQUFHLFlBQXpCLEVBQXVDLGFBQVdDLEVBQUVxckQsUUFBYixLQUF3QnRyRCxLQUFHLGNBQTNCLEVBQTJDLFdBQVNDLEVBQUVxckQsUUFBWCxLQUFzQnRyRCxLQUFHLFlBQXpCLEVBQXVDLGNBQVlDLEVBQUU0b0QsT0FBZCxLQUF3QjdvRCxLQUFHLG1CQUEzQixFQUFnRCxhQUFXQyxFQUFFNG9ELE9BQWIsS0FBdUI3b0QsS0FBRyxjQUExQixFQUEwQyxjQUFZQyxFQUFFNG9ELE9BQWQsS0FBd0I3b0QsS0FBRyxlQUEzQixFQUE0QyxnQkFBY0MsRUFBRTRvRCxPQUFoQixLQUEwQjdvRCxLQUFHLGlCQUE3QixFQUFnRCxJQUFHLG1CQUFpQkMsRUFBRTRvRCxPQUFuQixJQUE0QixVQUFRNW9ELEVBQUU0b0QsT0FBekMsRUFBaUQ3b0QsS0FBRyxvQkFBSCxDQUF3QixjQUFZQyxFQUFFNG9ELE9BQWQsS0FBd0I3b0QsS0FBRyxlQUEzQixFQUE0QyxXQUFTQyxFQUFFNG9ELE9BQVgsS0FBcUI3b0QsS0FBRyxZQUF4QjtBQUMvYyxRQUFHLGdCQUFjQyxFQUFFNG9ELE9BQWhCLElBQXlCLGNBQVk1b0QsRUFBRXNyRCxPQUExQyxFQUFrRHZyRCxLQUFHLGlCQUFILENBQXFCLGNBQVlDLEVBQUU0b0QsT0FBZCxLQUF3QjdvRCxLQUFHLGVBQTNCLEVBQTRDLGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsa0JBQTlCLEVBQWtELGVBQWFDLEVBQUU0b0QsT0FBZixLQUF5QjdvRCxLQUFHLGdCQUE1QixFQUE4QyxTQUFPQyxFQUFFNG9ELE9BQVQsS0FBbUI3b0QsS0FBRyxVQUF0QixFQUFrQyxVQUFRQyxFQUFFNG9ELE9BQVYsS0FBb0I3b0QsS0FBRyxXQUF2QixFQUFvQyxhQUFXQyxFQUFFNG9ELE9BQWIsSUFBc0IsU0FBTzVvRCxFQUFFdXJELE1BQS9CLEdBQXNDeHJELEtBQUcseUNBQXpDLEdBQW1GLGFBQVdDLEVBQUU0b0QsT0FBYixLQUF1QjdvRCxLQUFHLGNBQTFCLENBQW5GLENBQTZILFlBQVVDLEVBQUU0b0QsT0FBWixJQUFxQixPQUFLNW9ELEVBQUUsYUFBRixDQUExQixHQUEyQ0QsS0FBRyxxQkFBOUMsR0FBb0UsWUFBVUMsRUFBRTRvRCxPQUFaLElBQXFCLE9BQUs1b0QsRUFBRSxhQUFGLENBQTFCLEdBQ3RkRCxLQUFHLHVCQURtZCxHQUMzYixZQUFVQyxFQUFFNG9ELE9BQVosSUFBcUIsT0FBSzVvRCxFQUFFLGFBQUYsQ0FBMUIsR0FBMkNELEtBQUcsd0JBQTlDLEdBQXVFLFlBQVVDLEVBQUU0b0QsT0FBWixLQUFzQjdvRCxLQUFHLGFBQXpCLENBRGdULENBQ3hRLGtCQUFnQkMsRUFBRTRvRCxPQUFsQixLQUE0QjdvRCxLQUFHLG1CQUEvQixFQUFvRCxtQkFBaUJDLEVBQUU0b0QsT0FBbkIsS0FBNkI3b0QsS0FBRyxvQkFBaEMsRUFBc0QsYUFBV0MsRUFBRTRvRCxPQUFiLEtBQXVCN29ELEtBQUcsY0FBMUIsRUFBMEMsZUFBYUMsRUFBRTRvRCxPQUFmLEtBQXlCN29ELEtBQUcsZ0JBQTVCLEVBQThDLGdCQUFjQyxFQUFFNG9ELE9BQWhCLEtBQTBCN29ELEtBQUcsaUJBQTdCLEVBQWdELGFBQVdDLEVBQUU0b0QsT0FBYixLQUF1QjdvRCxLQUFHLGNBQTFCLEVBQTBDLGFBQVdDLEVBQUU0b0QsT0FBYixLQUF1QjdvRCxLQUFHLGNBQTFCLEVBQTBDLFNBQU9DLEVBQUU0b0QsT0FBVCxLQUFtQjdvRCxLQUFHLFVBQXRCLEVBQWtDLGVBQ3RmQyxFQUFFNG9ELE9BRG9mLEtBQzFlN29ELEtBQUcsZ0JBRHVlLEVBQ3JkLHFCQUFtQkMsRUFBRTRvRCxPQUFyQixLQUErQjdvRCxLQUFHLHNCQUFsQyxFQUEwRCxvQkFBa0JDLEVBQUU0b0QsT0FBcEIsS0FBOEI3b0QsS0FBRyxxQkFBakMsRUFBd0Qsa0JBQWdCQyxFQUFFNG9ELE9BQWxCLEtBQTRCN29ELEtBQUcsbUJBQS9CLEVBQW9ELGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsa0JBQTlCLEVBQWtELFlBQVVDLEVBQUU0b0QsT0FBWixLQUFzQjdvRCxLQUFHLGFBQXpCLEVBQXdDLG1CQUFpQkMsRUFBRTRvRCxPQUFuQixLQUE2QjdvRCxLQUFHLG9CQUFoQyxFQUFzRCxJQUFHLGFBQVdDLEVBQUU0b0QsT0FBYixJQUFzQixhQUFXNW9ELEVBQUV3ckQsVUFBdEMsRUFBaUR6ckQsS0FBRyxjQUFILENBQWtCLGFBQVdDLEVBQUU0b0QsT0FBYixJQUFzQixlQUFhNW9ELEVBQUV3ckQsVUFBckMsS0FBa0R6ckQsS0FBRyxnQkFBckQsRUFBdUUsYUFBV0MsRUFBRTRvRCxPQUFiLElBQ2plLHVCQUFxQjVvRCxFQUFFd3JELFVBRDBjLEtBQzdienJELEtBQUcsd0JBRDBiLEVBQ2hhLGFBQVdDLEVBQUU0b0QsT0FBYixJQUFzQix3QkFBc0I1b0QsRUFBRXdyRCxVQUE5QyxLQUEyRHpyRCxLQUFHLHlCQUE5RCxFQUF5RixhQUFXQyxFQUFFNG9ELE9BQWIsSUFBc0IsdUJBQXFCNW9ELEVBQUV3ckQsVUFBN0MsS0FBMER6ckQsS0FBRyx3QkFBN0QsRUFBdUYsYUFBV0MsRUFBRTRvRCxPQUFiLElBQXNCLGdCQUFjNW9ELEVBQUV3ckQsVUFBdEMsS0FBbUR6ckQsS0FBRyxpQkFBdEQsRUFBeUUsYUFBV0MsRUFBRTRvRCxPQUFiLElBQXNCLHFCQUFtQjVvRCxFQUFFd3JELFVBQTNDLEtBQXdEenJELEtBQUcsc0JBQTNELEVBQW1GLGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsbUJBQTlCLEVBQW1ELFlBQVVDLEVBQUU0b0QsT0FBWixLQUFzQjdvRCxLQUFHLGFBQXpCLEVBQXdDLFNBQU9DLEVBQUU0b0QsT0FBVCxLQUN2ZTdvRCxLQUFHLFVBRG9lLEVBQ3hkLGFBQVdDLEVBQUU0b0QsT0FBYixLQUF1QjdvRCxLQUFHLGNBQTFCLEVBQTBDLG9CQUFrQkMsRUFBRTRvRCxPQUFwQixLQUE4QjdvRCxLQUFHLHFCQUFqQyxFQUF3RCxTQUFPQyxFQUFFeXJELGNBQVQsS0FBMEIxckQsS0FBRyxxQkFBN0IsRUFBb0QsaUJBQWVDLEVBQUU0b0QsT0FBakIsS0FBMkI3b0QsS0FBRyxrQkFBOUIsRUFBa0QsVUFBUUMsRUFBRTRvRCxPQUFWLEtBQW9CN29ELEtBQUcsV0FBdkIsRUFBb0MsY0FBWUMsRUFBRTRvRCxPQUFkLEtBQXdCN29ELEtBQUcsZUFBM0IsRUFBNEMsYUFBV0MsRUFBRTRvRCxPQUFiLEtBQXVCN29ELEtBQUcsY0FBMUIsRUFBMEMsZUFBYUMsRUFBRTRvRCxPQUFmLEtBQXlCN29ELEtBQUcsZ0JBQTVCLEVBQThDLGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsa0JBQTlCLEVBQWtELGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsa0JBQTlCLEVBQWtELGdCQUFjQyxFQUFFNG9ELE9BQWhCLEtBQ25lN29ELEtBQUcsa0JBRGdlLEVBQzVjLGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsa0JBQTlCLEVBQWtELElBQUcsV0FBU0MsRUFBRTRvRCxPQUFYLElBQW9CLFdBQVM1b0QsRUFBRXFyRCxRQUFsQyxFQUEyQ3RyRCxLQUFHLFlBQUgsQ0FBZ0IsbUJBQWlCQyxFQUFFNG9ELE9BQW5CLEtBQTZCN29ELEtBQUcsb0JBQWhDLEVBQXNELGlCQUFlQyxFQUFFNG9ELE9BQWpCLEtBQTJCN29ELEtBQUcsa0JBQTlCLEVBQWtELFlBQVVDLEVBQUU0b0QsT0FBWixLQUFzQjdvRCxLQUFHLGFBQXpCLEVBQXdDLG9CQUFrQkMsRUFBRTRvRCxPQUFwQixLQUE4QjdvRCxLQUFHLHFCQUFqQyxFQUF3RCxxQkFBbUJDLEVBQUU0b0QsT0FBckIsS0FBK0I3b0QsS0FBRyxzQkFBbEMsRUFBMEQsaUJBQWVDLEVBQUU0b0QsT0FBakIsS0FBMkI3b0QsS0FBRyxrQkFBOUIsRUFBa0QsY0FBWUMsRUFBRTRvRCxPQUFkLEtBQXdCN29ELEtBQUcsZUFBM0IsRUFBNEMsV0FBU0MsRUFBRTRvRCxPQUFYLEtBQ3BlN29ELEtBQUcsWUFEaWUsRUFDbmQsWUFBVUMsRUFBRTRvRCxPQUFaLEtBQXNCN29ELEtBQUcsYUFBekIsRUFBd0MsSUFBRyxvQkFBa0JDLEVBQUU0b0QsT0FBcEIsS0FBOEI3b0QsS0FBRyxxQkFBSCxFQUF5QkMsRUFBRTByRCxLQUF6RCxDQUFILEVBQW1FLFFBQU8zckQsS0FBRyxPQUFILEVBQVdDLEVBQUUwckQsS0FBcEIsR0FBMkIsS0FBSyxPQUFMO0FBQWEzckQsaUJBQUcsY0FBSCxDQUFrQixNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyxVQUFILENBQWMsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcscUJBQUgsQ0FBeUIsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsY0FBSCxDQUFrQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLGFBQUgsQ0FBaUIsTUFBTSxLQUFLLFlBQUw7QUFBa0JBLGlCQUFHLGlCQUFILENBQXFCLE1BQU07QUFBUUEsaUJBQUcsY0FBSCxDQUFuVCxDQUFxVSxJQUFHLGtCQUFnQkMsRUFBRTRvRCxPQUFsQixJQUEyQixtQkFBaUI1b0QsRUFBRTByRCxLQUFqRCxFQUF1RDNyRCxLQUNyZix3QkFEcWYsQ0FDNWQsSUFBRyxnQkFBY0MsRUFBRTRvRCxPQUFoQixJQUF5QixlQUFhNW9ELEVBQUU0b0QsT0FBeEMsSUFBaUQsZ0JBQWM1b0QsRUFBRTRvRCxPQUFwRSxFQUE0RTdvRCxLQUFHLGlCQUFILENBQXFCLG9CQUFrQkMsRUFBRTRvRCxPQUFwQixLQUE4QjdvRCxLQUFHLHFCQUFqQyxFQUF3RCxzQkFBb0JDLEVBQUU0b0QsT0FBdEIsS0FBZ0M3b0QsS0FBRyx1QkFBbkMsRUFBNEQsZ0JBQWNDLEVBQUU0b0QsT0FBaEIsS0FBMEI3b0QsS0FBRyxpQkFBN0IsRUFBZ0Qsc0JBQW9CQyxFQUFFNG9ELE9BQXRCLEtBQWdDN29ELEtBQUcsdUJBQW5DLEVBQTRELElBQUcsU0FBT0MsRUFBRTJyRCxRQUFULElBQW1CLFNBQU8zckQsRUFBRTRyRCxTQUEvQixFQUF5QzdyRCxLQUFHLGdCQUFILENBQW9CLElBQUcscUJBQW1CQyxFQUFFNG9ELE9BQXhCLEVBQWdDLElBQUc1b0QsRUFBRTZyRCxPQUFMLEVBQWEsUUFBTzdyRCxFQUFFNnJELE9BQVQsR0FBa0IsS0FBSyxtQkFBTDtBQUF5QjlyRCxpQkFBRyx3Q0FBSDtBQUMvZSxrQkFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGtDQUFILENBQXNDLE1BQU0sS0FBSyxjQUFMO0FBQW9CQSxpQkFBRyxtQ0FBSCxDQUF1QyxNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyw0QkFBSCxDQUFnQyxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyw4QkFBSCxDQUFrQyxNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsaUNBQUgsQ0FBcUMsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGtDQUFIO0FBQ25lLGtCQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLHFDQUFILENBQXlDLE1BQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcscUNBQUgsQ0FBeUMsTUFBTSxLQUFLLGtCQUFMO0FBQXdCQSxpQkFBRyx1Q0FBSCxDQUEyQyxNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsZ0NBQUgsQ0FBb0MsTUFBTSxLQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyxxQ0FBSCxDQUF5QyxNQUFNLEtBQUssY0FBTDtBQUFvQkEsaUJBQUcsbUNBQUgsQ0FBdUMsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsMkJBQUg7QUFDN2Qsa0JBQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxnQ0FBSCxDQUFvQyxNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsZ0NBQUgsQ0FBb0MsTUFBTSxLQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyxxQ0FBSCxDQUF5QyxNQUFNLEtBQUssbUJBQUw7QUFBeUJBLGlCQUFHLHdDQUFILENBQTRDLE1BQU0sS0FBSywwQkFBTDtBQUFnQ0EsaUJBQUcsK0NBQUgsQ0FBbUQsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGdDQUFILENBQW9DLE1BQU0sS0FBSyxlQUFMO0FBQXFCQSxpQkFBRyxvQ0FBSCxDQUF3QyxNQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUN6ZixzQkFEeWYsQ0FDbGUsTUFBTSxLQUFLLGlCQUFMO0FBQXVCQSxpQkFBRyxzQ0FBSCxDQUEwQyxNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyw2QkFBSCxDQUFpQyxNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsK0JBQUgsQ0FBbUMsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGdDQUFILENBQW9DLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLDZCQUFILENBQWlDLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLDZCQUFILENBQWlDLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRywrQkFBSCxDQUFtQyxNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRywyQkFBSCxDQUErQixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRywyQkFBSDtBQUM3ZSxrQkFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGdDQUFILENBQW9DLE1BQU07QUFBUUEsaUJBQUcsc0JBQUgsQ0FMMlgsQ0FBYixNQUsvVUEsS0FBRyxzQkFBSCxDQUEwQixpQkFBZUMsRUFBRTRvRCxPQUFqQixLQUEyQjdvRCxLQUFHLGtCQUE5QixFQUFrRCxhQUFXQyxFQUFFNG9ELE9BQWIsS0FBdUI3b0QsS0FBRyxjQUExQixFQUEwQyxZQUFVQyxFQUFFNG9ELE9BQVosS0FBc0I3b0QsS0FBRyxhQUF6QixFQUF3QyxhQUFXQyxFQUFFNG9ELE9BQWIsS0FBdUI3b0QsS0FBRyxjQUExQixFQUEwQyxlQUFhQyxFQUFFcXJELFFBQWYsS0FBMEJ0ckQsS0FBRyxnQkFBN0IsRUFBK0MsWUFBVUMsRUFBRXFyRCxRQUFaLEtBQXVCdHJELEtBQUcsYUFBMUIsRUFBeUMsWUFBVUMsRUFBRXFyRCxRQUFaLEtBQXVCdHJELEtBQUcsYUFBMUIsRUFBeUMsc0JBQW9CQyxFQUFFNG9ELE9BQXRCLEtBQWdDN29ELEtBQUcsdUJBQW5DLEVBQTRELGFBQ2pmQyxFQUFFOHJELFNBRCtlLEtBQ25lL3JELEtBQUcsd0JBRGdlLEVBQ3RjLGdCQUFjQyxFQUFFLG1CQUFGLENBQWQsS0FBdUNELEtBQUcsMkJBQTFDLEVBQXVFLGlCQUFlQyxFQUFFLG1CQUFGLENBQWYsSUFBdUMsd0JBQXNCLENBQUMsb0JBQUQsQ0FBN0QsS0FBc0ZELEtBQUcsbUNBQXpGLEVBQThILFNBQU9DLEVBQUU4ckQsU0FBVCxJQUFvQixZQUFVOXJELEVBQUUrckQsUUFBaEMsS0FBMkNoc0QsS0FBRyx1QkFBOUMsRUFBdUUsU0FBT0MsRUFBRThyRCxTQUFULElBQW9CLGNBQVk5ckQsRUFBRStyRCxRQUFsQyxLQUE2Q2hzRCxLQUFHLHlCQUFoRCxFQUEyRSxTQUFPQyxFQUFFOHJELFNBQVQsSUFBb0IsY0FBWTlyRCxFQUFFK3JELFFBQWxDLEtBQTZDaHNELEtBQUcseUJBQWhELEVBQTJFLGVBQWFDLEVBQUU4b0QsUUFBZixLQUEwQi9vRCxLQUFHLHlCQUE3QjtBQUM3YyxtQkFBYUMsRUFBRTRvRCxPQUFmLEtBQXlCN29ELEtBQUcsZ0JBQTVCLEVBQThDLGVBQWFDLEVBQUVxckQsUUFBZixLQUEwQnRyRCxLQUFHLGdCQUE3QixFQUErQyxXQUFTQyxFQUFFOG9ELFFBQVgsS0FBc0Ivb0QsS0FBRyxxQkFBekIsRUFBZ0Qsb0JBQWtCQyxFQUFFOG9ELFFBQXBCLEtBQStCL29ELEtBQUcsOEJBQWxDLEVBQWtFLGVBQWFDLEVBQUU4b0QsUUFBZixLQUEwQi9vRCxLQUFHLHlCQUE3QixFQUF3RCxjQUFZQyxFQUFFOG9ELFFBQWQsS0FBeUIvb0QsS0FBRyxlQUE1QixFQUE2QyxZQUFVQyxFQUFFOG9ELFFBQVosS0FBdUIvb0QsS0FBRyxzQkFBMUIsRUFBa0QsVUFBUUMsRUFBRThvRCxRQUFWLEtBQXFCL29ELEtBQUcsb0JBQXhCLEVBQThDLFdBQVNDLEVBQUU4b0QsUUFBWCxLQUFzQi9vRCxLQUFHLFlBQXpCLEVBQXVDLGFBQVdDLEVBQUVnc0QsY0FBYixLQUE4QmpzRCxLQUFHLHVCQUFqQztBQUMzYixvQkFBY0MsRUFBRThvRCxRQUFoQixLQUEyQi9vRCxLQUFHLGlCQUE5QixFQUFpRCxpQkFBZUMsRUFBRThvRCxRQUFqQixLQUE0Qi9vRCxLQUFHLDJCQUEvQixFQUE0RCxnQkFBY0MsRUFBRThvRCxRQUFoQixLQUEyQi9vRCxLQUFHLDBCQUE5QixFQUEwRCxJQUFHLGlCQUFlQyxFQUFFOG9ELFFBQWpCLElBQTJCLG9CQUFrQjlvRCxFQUFFOG9ELFFBQWxELEVBQTJEL29ELEtBQUcsYUFBSCxDQUFpQixlQUFhQyxFQUFFOG9ELFFBQWYsS0FBMEIvb0QsS0FBRyx5QkFBN0IsRUFBd0QsbUJBQWlCQyxFQUFFOG9ELFFBQW5CLEtBQThCL29ELEtBQUcsNkJBQWpDLEVBQWdFLGNBQVlDLEVBQUU0b0QsT0FBZCxLQUF3QjdvRCxLQUFHLGVBQTNCLEVBQTRDLGNBQVlDLEVBQUU4b0QsUUFBZCxLQUF5Qi9vRCxLQUFHLGVBQTVCLEVBQTZDLHVCQUFxQkMsRUFBRThvRCxRQUF2QixLQUFrQy9vRCxLQUFHLGlDQUFyQztBQUNwYyxRQUFHLFlBQVVDLEVBQUU4b0QsUUFBZixFQUF3QixJQUFHOW9ELEVBQUVpc0QsV0FBTCxFQUFpQixRQUFPanNELEVBQUVpc0QsV0FBVCxHQUFzQixLQUFLLFdBQUw7QUFBaUJsc0QsaUJBQUcsdUJBQUgsQ0FBMkIsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsYUFBSCxDQUFpQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxlQUFILENBQW1CLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLGNBQUgsQ0FBa0IsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsWUFBSCxDQUFnQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFILENBQWtCLE1BQU07QUFBUUEsaUJBQUcsYUFBSCxDQUFoVyxDQUFqQixNQUF1WUEsS0FBRyxhQUFILENBQWlCLHlCQUF1QkMsRUFBRThvRCxRQUF6QixLQUFvQy9vRCxLQUFHLDBCQUF2QyxFQUFtRSxJQUFHLFVBQ2xmQyxFQUFFOG9ELFFBRDZlLEVBQ3BlLElBQUc5b0QsRUFBRWtzRCxJQUFMLEVBQVUsUUFBT2xzRCxFQUFFa3NELElBQVQsR0FBZSxLQUFLLFNBQUw7QUFBZW5zRCxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxXQUFILENBQWUsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLGVBQUgsQ0FBbUIsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGdCQUFILENBQW9CLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxnQkFBSCxDQUFvQixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsa0JBQUgsQ0FBc0IsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsWUFBSCxDQUFnQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRyxrQkFBSCxDQUFzQixNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxnQkFBSCxDQUFvQixNQUFNO0FBQVFBLGlCQUFHLG9CQUFILENBQXhkLENBQVYsTUFBK2ZBLEtBQzFnQixvQkFEMGdCLENBQ3JmLGdCQUFjQyxFQUFFbXNELE1BQWhCLEtBQXlCcHNELEtBQUcsaUJBQTVCLEVBQStDLG9CQUFrQkMsRUFBRW1zRCxNQUFwQixLQUE2QnBzRCxLQUFHLHFCQUFoQyxFQUF1RCxlQUFhQyxFQUFFbXNELE1BQWYsS0FBd0Jwc0QsS0FBRyxnQkFBM0IsRUFBNkMsaUJBQWVDLEVBQUVtc0QsTUFBakIsS0FBMEJwc0QsS0FBRyxrQkFBN0IsRUFBaUQsZUFBYUMsRUFBRW1zRCxNQUFmLEtBQXdCcHNELEtBQUcsZ0JBQTNCLEVBQTZDLGFBQVdDLEVBQUVtc0QsTUFBYixLQUFzQnBzRCxLQUFHLHFCQUF6QixFQUFnRCxhQUFXQyxFQUFFbXNELE1BQWIsS0FBc0Jwc0QsS0FBRyxjQUF6QixFQUF5Qyw2QkFBMkJDLEVBQUVtc0QsTUFBN0IsS0FBc0Nwc0QsS0FBRyw4QkFBekMsRUFBeUUsdUJBQXFCQyxFQUFFbXNELE1BQXZCLEtBQWdDcHNELEtBQUcsd0JBQW5DLEVBQTZELGtCQUN6ZUMsRUFBRW1zRCxNQUR1ZSxLQUM5ZHBzRCxLQUFHLG1CQUQyZCxFQUN0YyxjQUFZQyxFQUFFbXNELE1BQWQsS0FBdUJwc0QsS0FBRyxlQUExQixFQUEyQyxnQkFBY0MsRUFBRW1zRCxNQUFoQixLQUF5QnBzRCxLQUFHLGlCQUE1QixFQUErQyxnQkFBY0MsRUFBRW1zRCxNQUFoQixLQUF5QnBzRCxLQUFHLGlCQUE1QixFQUErQyxXQUFTQyxFQUFFbXNELE1BQVgsS0FBb0Jwc0QsS0FBRyxtQkFBdkIsRUFBNEMsZUFBYUMsRUFBRW1zRCxNQUFmLEtBQXdCcHNELEtBQUcsZ0JBQTNCLEVBQTZDLFFBQU1DLEVBQUVtc0QsTUFBUixLQUFpQnBzRCxLQUFHLGdCQUFwQixFQUFzQyxZQUFVQyxFQUFFbXNELE1BQVosS0FBcUJwc0QsS0FBRyxhQUF4QixFQUF1QyxlQUFhQyxFQUFFbXNELE1BQWYsS0FBd0Jwc0QsS0FBRyxnQkFBM0IsRUFBNkMsU0FBT0MsRUFBRW1zRCxNQUFULEtBQWtCcHNELEtBQUcsaUJBQXJCLEVBQXdDLFlBQVVDLEVBQUVtc0QsTUFBWixLQUFxQnBzRCxLQUFHLGFBQXhCLEVBQXVDLHFCQUFtQkMsRUFBRW1zRCxNQUFyQixLQUE4QnBzRCxLQUFHLHNCQUFqQztBQUM5YyxnQkFBVUMsRUFBRW1zRCxNQUFaLEtBQXFCcHNELEtBQUcsb0JBQXhCLEVBQThDLGFBQVdDLEVBQUVtc0QsTUFBYixLQUFzQnBzRCxLQUFHLGNBQXpCLEVBQXlDLHVCQUFxQkMsRUFBRW1zRCxNQUF2QixLQUFnQ3BzRCxLQUFHLHdCQUFuQyxFQUE2RCxjQUFZQyxFQUFFbXNELE1BQWQsS0FBdUJwc0QsS0FBRyxlQUExQixFQUEyQyxjQUFZQyxFQUFFbXNELE1BQWQsS0FBdUJwc0QsS0FBRyx1QkFBMUIsRUFBbUQsY0FBWUMsRUFBRW1zRCxNQUFkLEtBQXVCcHNELEtBQUcsc0JBQTFCLEVBQWtELFNBQU9DLEVBQUVtc0QsTUFBVCxLQUFrQnBzRCxLQUFHLGlCQUFyQixFQUF3Qyx1QkFBcUJDLEVBQUVtc0QsTUFBdkIsS0FBZ0Nwc0QsS0FBRywrQkFBbkMsRUFBb0Usa0JBQWdCQyxFQUFFbXNELE1BQWxCLEtBQTJCcHNELEtBQUcsbUJBQTlCLEVBQW1ELG1CQUFpQkMsRUFBRW1zRCxNQUFuQixLQUE0QnBzRCxLQUFHLDJCQUEvQjtBQUNuYyxtQkFBYUMsRUFBRW1zRCxNQUFmLEtBQXdCcHNELEtBQUcsZ0JBQTNCLEVBQTZDLFVBQVFDLEVBQUVvc0QsS0FBVixLQUFrQnJzRCxLQUFHLFdBQXJCLEVBQWtDLFVBQVFDLEVBQUVvc0QsS0FBVixLQUFrQnJzRCxLQUFHLFdBQXJCLEVBQWtDLGFBQVdDLEVBQUVvc0QsS0FBYixLQUFxQnJzRCxLQUFHLGNBQXhCLEVBQXdDLGVBQWFDLEVBQUVvc0QsS0FBZixLQUF1QnJzRCxLQUFHLGdCQUExQixFQUE0QyxXQUFTQyxFQUFFb3NELEtBQVgsS0FBbUJyc0QsS0FBRyxZQUF0QixFQUFvQyxXQUFTQyxFQUFFMnFELE9BQVgsS0FBcUI1cUQsS0FBRyxZQUF4QixFQUFzQyxhQUFXQyxFQUFFMnFELE9BQWIsS0FBdUI1cUQsS0FBRyxjQUExQixFQUEwQyxnQkFBY0MsRUFBRXFzRCxPQUFoQixLQUEwQnRzRCxLQUFHLGlCQUE3QixFQUFnRCxVQUFRQyxFQUFFMnFELE9BQVYsS0FBb0I1cUQsS0FBRyxnQkFBdkIsRUFBeUMsYUFBV0MsRUFBRTRvRCxPQUFiLEtBQXVCN29ELEtBQUcsY0FBMUIsRUFBMEMsY0FBWUMsRUFBRTJxRCxPQUFkLEtBQXdCNXFELEtBQUcsZUFBM0IsRUFBNEMsZUFDeGVDLEVBQUUycUQsT0FEc2UsS0FDNWQ1cUQsS0FBRyxnQkFEeWQsRUFDdmMsb0JBQWtCQyxFQUFFMnFELE9BQXBCLEtBQThCNXFELEtBQUcscUJBQWpDLEVBQXdELGFBQVdDLEVBQUUycUQsT0FBYixLQUF1QjVxRCxLQUFHLG1CQUExQixFQUErQyxjQUFZQyxFQUFFMnFELE9BQWQsS0FBd0I1cUQsS0FBRyxlQUEzQixFQUE0Qyx1QkFBcUJDLEVBQUUycUQsT0FBdkIsS0FBaUM1cUQsS0FBRyx3QkFBcEMsRUFBOEQsZUFBYUMsRUFBRTJxRCxPQUFmLEtBQXlCNXFELEtBQUcsZ0JBQTVCLEVBQThDLFNBQU9DLEVBQUVzc0QsTUFBVCxLQUFrQnZzRCxLQUFHLGFBQXJCLEVBQW9DLFNBQU9DLEVBQUV1c0QsU0FBVCxLQUFxQnhzRCxLQUFHLG9CQUF4QixFQUE4QyxhQUFXQyxFQUFFdXNELFNBQWIsS0FBeUJ4c0QsS0FBRyxvQkFBNUIsRUFBa0QsU0FBT0MsRUFBRXVzRCxTQUFULEtBQXFCeHNELEtBQUcsb0JBQXhCLEVBQThDLFVBQVFDLEVBQUV1c0QsU0FBVixLQUFzQnhzRCxLQUFHLG9CQUF6QjtBQUNsZCxrQkFBWUMsRUFBRTJxRCxPQUFkLEtBQXdCNXFELEtBQUcsZUFBM0IsRUFBNEMsZ0JBQWNDLEVBQUUycUQsT0FBaEIsS0FBMEI1cUQsS0FBRyxpQkFBN0IsRUFBZ0QsaUJBQWVDLEVBQUUycUQsT0FBakIsS0FBMkI1cUQsS0FBRyxrQkFBOUIsRUFBa0QscUJBQW1CQyxFQUFFMnFELE9BQXJCLEtBQStCNXFELEtBQUcsc0JBQWxDLEVBQTBELHFCQUFtQkMsRUFBRXdzRCxRQUFyQixLQUFnQ3pzRCxLQUFHLHNCQUFuQyxFQUEyRCxrQkFBZ0JDLEVBQUUycUQsT0FBbEIsS0FBNEI1cUQsS0FBRyxtQkFBL0IsRUFBb0QsU0FBT0MsRUFBRXlzRCxlQUFULEtBQTJCQyxPQUFLLHNCQUFoQyxFQUF3RCxVQUFRMXNELEVBQUV5c0QsZUFBVixLQUE0QjFzRCxLQUFHLFdBQS9CLEVBQTRDLGFBQVdDLEVBQUV5c0QsZUFBYixLQUErQjFzRCxLQUFHLGNBQWxDLEVBQWtELFlBQVVDLEVBQUV5c0QsZUFBWixLQUE4QjFzRCxLQUFHLGFBQWpDO0FBQzdjLGlCQUFXQyxFQUFFeXNELGVBQWIsS0FBK0Ixc0QsS0FBRyxjQUFsQyxFQUFrRCxVQUFRQyxFQUFFeXNELGVBQVYsS0FBNEIxc0QsS0FBRyxXQUEvQixFQUE0QyxZQUFVQyxFQUFFeXNELGVBQVosS0FBOEIxc0QsS0FBRyxhQUFqQyxFQUFnRCxrQkFBZ0JDLEVBQUV5c0QsZUFBbEIsS0FBb0Mxc0QsS0FBRyxtQkFBdkMsRUFBNEQsV0FBU0MsRUFBRXlzRCxlQUFYLEtBQTZCMXNELEtBQUcsWUFBaEMsRUFBOEMsbUJBQWlCQyxFQUFFLGNBQUYsQ0FBakIsS0FBcUNELEtBQUcsb0JBQXhDLEVBQThELGtCQUFnQkMsRUFBRSxjQUFGLENBQWhCLEtBQW9DRCxLQUFHLG1CQUF2QyxFQUE0RCwwQkFBd0JDLEVBQUUsY0FBRixDQUF4QixLQUE0Q0QsS0FBRywyQkFBL0MsRUFBNEUsV0FBU0MsRUFBRSw4QkFBRixDQUFULEtBQTZDRCxLQUFHLFlBQWhEO0FBQzliLGNBQVFDLEVBQUU0b0QsT0FBVixJQUFtQixrQkFBZ0I1b0QsRUFBRSx1Q0FBRixDQUFuQyxHQUE4RUQsS0FBRyxtQkFBakYsR0FBcUcsVUFBUUMsRUFBRTRvRCxPQUFWLEtBQW9CN29ELEtBQUcsV0FBdkIsQ0FBckcsQ0FBeUksSUFBRyxzQkFBb0JDLEVBQUU0b0QsT0FBekIsRUFBaUM7QUFBQyxZQUFJN29ELElBQUVBLElBQUUsdUJBQVI7QUFBQSxZQUFnQ29vRCxJQUFFbm9ELEVBQUUyc0QsT0FBcEMsQ0FBNEMsSUFBRzNzRCxFQUFFaXZDLEdBQUwsRUFBUztBQUFDLG9CQUFPanZDLEVBQUVpdkMsR0FBVCxHQUFjLEtBQUssS0FBTDtBQUFXbHZDLHlCQUFHLFVBQUgsQ0FBYyxNQUFNLEtBQUssSUFBTDtBQUFVQSx5QkFBRyxTQUFILENBQWEsTUFBTTtBQUFRQSx5QkFBRyxjQUFILENBQWxGLENBQW9HQSxLQUFHLE9BQUg7QUFBVyxTQUF6SCxNQUE4SEEsS0FBRyxtQkFBSCxDQUF1QixJQUFHQyxFQUFFcXNELE9BQUwsRUFBYTtBQUFDLG9CQUFPcnNELEVBQUVxc0QsT0FBVCxHQUFrQixLQUFLLEtBQUw7QUFBV3RzRCx5QkFBRyxhQUFILENBQWlCLE1BQU0sS0FBSyxJQUFMO0FBQVVBLHlCQUFHLFlBQUgsQ0FBZ0IsTUFBTTtBQUFRQSx5QkFBRyxnQkFBSCxDQUE1RixDQUFnSEEsS0FBRyxPQUFIO0FBQVcsU0FBekksTUFBOElBLEtBQ3RmLHFCQURzZixDQUNoZUMsRUFBRSxlQUFGLE1BQXFCRCxLQUFHLG9CQUFrQkMsRUFBRSxlQUFGLENBQWxCLEdBQXFDLE9BQTdELEVBQXNFQSxFQUFFLGlCQUFGLE1BQXVCRCxLQUFHLHFCQUFtQkMsRUFBRSxpQkFBRixDQUFuQixHQUF3QyxPQUFsRSxFQUEyRUEsRUFBRSxvQkFBRixNQUEwQkQsS0FBRyx3QkFBc0JDLEVBQUUsb0JBQUYsQ0FBdEIsR0FBOEMsT0FBM0UsRUFBb0ZBLEVBQUUsb0JBQUYsTUFBMEJELEtBQUcsd0JBQXNCQyxFQUFFLG9CQUFGLENBQXRCLEdBQThDLE9BQTNFLEVBQW9GQSxFQUFFLG9CQUFGLE1BQTBCRCxLQUFHLHdCQUFzQkMsRUFBRSxvQkFBRixDQUF0QixHQUE4QyxPQUEzRSxFQUFvRkEsRUFBRSxxQkFBRixNQUEyQkQsS0FBRyx5QkFBdUJDLEVBQUUscUJBQUYsQ0FBdkIsR0FBZ0QsT0FBOUU7QUFDbmFBLFVBQUUsa0JBQUYsTUFBd0JELEtBQUcsc0JBQW9CQyxFQUFFLGtCQUFGLENBQXBCLEdBQTBDLE9BQXJFLEVBQThFQSxFQUFFLGtCQUFGLE1BQXdCRCxLQUFHLHNCQUFvQkMsRUFBRSxrQkFBRixDQUFwQixHQUEwQyxPQUFyRSxFQUE4RUEsRUFBRSxtQkFBRixNQUF5QkQsS0FBRyx1QkFBcUJDLEVBQUUsbUJBQUYsQ0FBckIsR0FBNEMsT0FBeEUsRUFBaUZBLEVBQUUsbUJBQUYsTUFBeUJELEtBQUcsdUJBQXFCQyxFQUFFLG1CQUFGLENBQXJCLEdBQTRDLE9BQXhFLEVBQWlGQSxFQUFFLGVBQUYsTUFBcUJELEtBQUcsbUJBQWlCQyxFQUFFLGVBQUYsQ0FBakIsR0FBb0MsT0FBNUQsRUFBcUVBLEVBQUUsY0FBRixNQUFvQkQsS0FBRyxtQkFBaUJDLEVBQUUsY0FBRixDQUFqQixHQUFtQyxPQUExRCxFQUFtRUEsRUFBRSxvQkFBRixNQUEwQkQsS0FBRyx5QkFDL2RDLEVBQUUsZUFBRixDQUQrZCxHQUM1YyxPQUQrYSxFQUN0YUEsRUFBRSxjQUFGLE1BQW9CRCxLQUFHLG1CQUFpQkMsRUFBRSxjQUFGLENBQWpCLEdBQW1DLE9BQTFELEVBQW1FQSxFQUFFLG9CQUFGLE1BQTBCRCxLQUFHLHlCQUF1QkMsRUFBRSxvQkFBRixDQUF2QixHQUErQyxPQUE1RSxFQUFxRkEsRUFBRSxjQUFGLE1BQW9CRCxLQUFHLG1CQUFpQkMsRUFBRSxjQUFGLENBQWpCLEdBQW1DLE9BQTFELEVBQW1FQSxFQUFFLGdCQUFGLE1BQXNCRCxLQUFHLG9CQUFrQkMsRUFBRSxnQkFBRixDQUFsQixHQUFzQyxPQUEvRCxFQUF3RUEsRUFBRSxxQkFBRixNQUEyQkQsS0FBRyx5QkFBdUJDLEVBQUUscUJBQUYsQ0FBdkIsR0FBZ0QsT0FBOUUsRUFBdUZBLEVBQUUsdUJBQUYsTUFBNkJELEtBQUcsMkJBQXlCQyxFQUFFLHVCQUFGLENBQXpCLEdBQW9ELE9BQXBGLEVBQTZGQSxFQUFFLDBCQUFGLE1BQ3RmRCxLQUFHLHdCQUFzQkMsRUFBRSwwQkFBRixDQUF0QixHQUFvRCxPQUQrYixFQUN0YkEsRUFBRSx1QkFBRixNQUE2QkQsS0FBRywyQkFBeUJDLEVBQUUsdUJBQUYsQ0FBekIsR0FBb0QsT0FBcEYsRUFBNkZELEtBQUcsT0FBSCxDQUFXQyxFQUFFMnNELE9BQUYsS0FBWTVzRCxLQUFHLFdBQVNvb0QsQ0FBVCxHQUFXLE9BQTFCO0FBQW1DLGNBQU9ub0QsRUFBRTRzRCxNQUFULEtBQWtCN3NELEtBQUcsYUFBckIsRUFBb0MsSUFBR0MsRUFBRTZzRCxNQUFMLEVBQVksUUFBTzlzRCxLQUFHLFVBQUgsRUFBY0MsRUFBRTZzRCxNQUF2QixHQUErQixLQUFLLE9BQUw7QUFBYTlzRCxpQkFBRyxPQUFILENBQVcsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLFVBQUgsQ0FBYyxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxhQUFILENBQWlCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxXQUFILENBQWUsTUFBTSxLQUFLLFlBQUw7QUFBa0JBLGlCQUFHLFlBQUgsQ0FBZ0IsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsU0FBSCxDQUFhLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFDcmdCLFlBRHFnQixDQUN4ZixNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsVUFBSCxDQUFjLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLE1BQUgsQ0FBVSxNQUFNLEtBQUssb0JBQUw7QUFBMEJBLGlCQUFHLG9CQUFILENBQXdCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxVQUFILENBQWMsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsU0FBSCxDQUFhLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLFNBQUgsQ0FBYSxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxTQUFILENBRDlDLENBQzJELElBQUdDLEVBQUUsZ0JBQUYsQ0FBSCxFQUF1QixRQUFPQSxFQUFFLGdCQUFGLENBQVAsR0FBNEIsS0FBSyxPQUFMO0FBQWFELGlCQUFHLE9BQUgsQ0FBVyxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxTQUFILENBQWEsTUFBTSxLQUFLLFlBQUw7QUFBa0JBLGlCQUFHLFlBQUgsQ0FBZ0IsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsTUFBSCxDQUFVLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFDamdCLGFBRGlnQixDQUNuZixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsYUFBSCxDQUFpQixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsYUFBSCxDQUQ2UCxDQUM1TyxJQUFHLGtCQUFnQkMsRUFBRTRvRCxPQUFsQixJQUEyQixxQkFBbUI1b0QsRUFBRTRvRCxPQUFuRCxFQUEyRDdvRCxLQUFHLHFDQUFILENBQXlDLHFCQUFtQkMsRUFBRTRvRCxPQUFyQixLQUErQjdvRCxLQUFHLHNCQUFsQyxFQUEwRCxJQUFHQyxFQUFFOHNELGVBQUwsRUFBcUI7QUFBQyx3QkFBYzlzRCxFQUFFOHNELGVBQWhCLElBQWlDLFlBQVU5c0QsRUFBRSxxQkFBRixDQUEzQyxLQUFzRUQsS0FBRyx3QkFBekUsRUFBbUcscUJBQW1CQyxFQUFFOHNELGVBQXJCLEtBQXVDL3NELEtBQUcsc0JBQTFDLEVBQWtFLGNBQVlDLEVBQUU4c0QsZUFBZCxLQUFnQy9zRCxLQUFHLGVBQW5DLEVBQW9ELGNBQ25mQyxFQUFFOHNELGVBRGlmLEtBQy9kL3NELEtBQUcsZUFENGQsRUFDM2MsSUFBRyxxQkFBbUJDLEVBQUU4c0QsZUFBckIsSUFBc0MsZ0JBQWM5c0QsRUFBRThzRCxlQUF6RCxFQUF5RS9zRCxLQUFHLHNCQUFILENBQTBCLGFBQVdDLEVBQUU4c0QsZUFBYixJQUE4QixZQUFVOXNELEVBQUUscUJBQUYsQ0FBeEMsS0FBbUVELEtBQUcscUJBQXRFLEVBQTZGLGFBQVdDLEVBQUU4c0QsZUFBYixJQUE4QixZQUFVOXNELEVBQUUscUJBQUYsQ0FBeEMsS0FBbUVELEtBQUcscUJBQXRFLEVBQTZGLGVBQWFDLEVBQUU4c0QsZUFBZixLQUFpQy9zRCxLQUFHLGdCQUFwQyxFQUFzRCxhQUFXQyxFQUFFOHNELGVBQWIsS0FBK0Ivc0QsS0FBRyxjQUFsQztBQUFrRCxPQUFFZ3RELE9BQUYsS0FBWWh0RCxLQUFHLG9CQUFrQkMsRUFBRStzRCxPQUFwQixHQUE0QixPQUEzQyxFQUFvRCxhQUFXL3NELEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUNqZixtQkFENmQsRUFDeGMsWUFBVUMsRUFBRWtxRCxJQUFaLEtBQW1CbnFELEtBQUcsa0JBQXRCLEVBQTBDLGVBQWFDLEVBQUVrcUQsSUFBZixLQUFzQm5xRCxLQUFHLHFCQUF6QixFQUFnRCxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxtQkFBdkIsRUFBNEMsWUFBVUMsRUFBRWtxRCxJQUFaLEtBQW1CbnFELEtBQUcsa0JBQXRCLEVBQTBDLGVBQWFDLEVBQUVrcUQsSUFBZixLQUFzQm5xRCxLQUFHLHFCQUF6QixFQUFnRCxZQUFVQyxFQUFFa3FELElBQVosS0FBbUJucUQsS0FBRyxrQkFBdEIsRUFBMEMsbUJBQWlCQyxFQUFFa3FELElBQW5CLEtBQTBCbnFELEtBQUcseUJBQTdCLEVBQXdELGlCQUFlQyxFQUFFa3FELElBQWpCLEtBQXdCbnFELEtBQUcsdUJBQTNCLEVBQW9ELFVBQVFDLEVBQUVrcUQsSUFBVixLQUFpQm5xRCxLQUFHLGdCQUFwQixFQUFzQyxXQUFTQyxFQUFFa3FELElBQVgsS0FBa0JucUQsS0FBRyxpQkFBckIsRUFBd0MsVUFBUUMsRUFBRWtxRCxJQUFWLEtBQWlCbnFELEtBQUcsZ0JBQXBCO0FBQzdkLHFCQUFlQyxFQUFFa3FELElBQWpCLEtBQXdCbnFELEtBQUcsdUJBQTNCLEVBQW9ELGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLG1CQUF2QixFQUE0QyxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxtQkFBdkIsRUFBNEMsV0FBU0MsRUFBRWtxRCxJQUFYLEtBQWtCbnFELEtBQUcsaUJBQXJCLEVBQXdDLGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLG1CQUF2QixFQUE0QyxTQUFPQyxFQUFFa3FELElBQVQsS0FBZ0JucUQsS0FBRyxlQUFuQixFQUFvQyxVQUFRQyxFQUFFa3FELElBQVYsS0FBaUJucUQsS0FBRyxnQkFBcEIsRUFBc0Msc0JBQW9CQyxFQUFFa3FELElBQXRCLEtBQTZCbnFELEtBQUcsdUJBQWhDLEVBQXlELGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLG1CQUF2QixFQUE0QyxXQUFTQyxFQUFFa3FELElBQVgsS0FBa0JucUQsS0FBRyxZQUFyQixFQUFtQyxVQUFRQyxFQUFFa3FELElBQVYsS0FBaUJucUQsS0FBRyxXQUFwQixFQUFpQyxpQkFBZUMsRUFBRWtxRCxJQUFqQixLQUF3Qm5xRCxLQUFHLGtCQUEzQjtBQUNuZCxvQkFBY0MsRUFBRWtxRCxJQUFoQixLQUF1Qm5xRCxLQUFHLHNCQUExQixFQUFrRCxTQUFPQyxFQUFFa3FELElBQVQsS0FBZ0JucUQsS0FBRyxlQUFuQixFQUFvQyxjQUFZQyxFQUFFa3FELElBQWQsS0FBcUJucUQsS0FBRyxlQUF4QixFQUF5QyxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxtQkFBdkIsRUFBNEMsWUFBVUMsRUFBRWtxRCxJQUFaLEtBQW1CbnFELEtBQUcsa0JBQXRCLEVBQTBDLGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLG1CQUF2QixFQUE0QyxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxtQkFBdkIsRUFBNEMsYUFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsbUJBQXZCLEVBQTRDLFdBQVNDLEVBQUVrcUQsSUFBWCxLQUFrQm5xRCxLQUFHLGlCQUFyQixFQUF3QyxtQkFBaUJDLEVBQUVrcUQsSUFBbkIsS0FBMEJucUQsS0FBRyxvQkFBN0IsRUFBbUQsYUFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsY0FBdkIsRUFBdUMsZUFBYUMsRUFBRWtxRCxJQUFmLEtBQXNCbnFELEtBQUcscUJBQXpCO0FBQzNkLG1CQUFhQyxFQUFFa3FELElBQWYsS0FBc0JucUQsS0FBRyxnQkFBekIsRUFBMkMsZUFBYUMsRUFBRWtxRCxJQUFmLEtBQXNCbnFELEtBQUcsZ0JBQXpCLEVBQTJDLFlBQVVDLEVBQUVrcUQsSUFBWixLQUFtQm5xRCxLQUFHLGtCQUF0QixFQUEwQyxpQkFBZUMsRUFBRWtxRCxJQUFqQixLQUF3Qm5xRCxLQUFHLGtCQUEzQixFQUErQyxrQkFBZ0JDLEVBQUVrcUQsSUFBbEIsS0FBeUJucUQsS0FBRyxtQkFBNUIsRUFBaUQsZUFBYUMsRUFBRWtxRCxJQUFmLEtBQXNCbnFELEtBQUcsZ0JBQXpCLEVBQTJDLGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLGNBQXZCLEVBQXVDLG9CQUFrQkMsRUFBRWtxRCxJQUFwQixLQUEyQm5xRCxLQUFHLDBCQUE5QixFQUEwRCxjQUFZQyxFQUFFa3FELElBQWQsS0FBcUJucUQsS0FBRyxlQUF4QixFQUF5QyxZQUFVQyxFQUFFa3FELElBQVosS0FBbUJucUQsS0FBRyxhQUF0QixFQUFxQyx5QkFBdUJDLEVBQUVrcUQsSUFBekIsS0FBZ0NucUQsS0FBRywwQkFBbkM7QUFDMWIsc0JBQWdCQyxFQUFFa3FELElBQWxCLEtBQXlCbnFELEtBQUcsbUJBQTVCLEVBQWlELFlBQVVDLEVBQUVrcUQsSUFBWixLQUFtQm5xRCxLQUFHLGFBQXRCLEVBQXFDLGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLGNBQXZCLEVBQXVDLGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLG1CQUF2QixFQUE0QyxtQkFBaUJDLEVBQUVrcUQsSUFBbkIsS0FBMEJucUQsS0FBRyxvQkFBN0IsRUFBbUQsU0FBT0MsRUFBRWtxRCxJQUFULEtBQWdCbnFELEtBQUcsVUFBbkIsRUFBK0IsY0FBWUMsRUFBRWtxRCxJQUFkLEtBQXFCbnFELEtBQUcsZUFBeEIsRUFBeUMsY0FBWUMsRUFBRWtxRCxJQUFkLEtBQXFCbnFELEtBQUcsb0JBQXhCLEVBQThDLGVBQWFDLEVBQUVrcUQsSUFBZixLQUFzQm5xRCxLQUFHLHFCQUF6QixFQUFnRCxlQUFhQyxFQUFFa3FELElBQWYsS0FBc0JucUQsS0FBRyxnQkFBekIsRUFBMkMsV0FBU0MsRUFBRWtxRCxJQUFYLEtBQWtCbnFELEtBQUcsaUJBQXJCLEVBQXdDLFdBQVNDLEVBQUVrcUQsSUFBWCxLQUFrQm5xRCxLQUFHLFlBQXJCO0FBQ3JkLGtCQUFZQyxFQUFFa3FELElBQWQsS0FBcUJucUQsS0FBRyxvQkFBeEIsRUFBOEMsU0FBT0MsRUFBRWtxRCxJQUFULEtBQWdCbnFELEtBQUcsZUFBbkIsRUFBb0MsYUFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsbUJBQXZCLEVBQTRDLFlBQVVDLEVBQUVrcUQsSUFBWixLQUFtQm5xRCxLQUFHLGtCQUF0QixFQUEwQyxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxtQkFBdkIsRUFBNEMsZUFBYUMsRUFBRWtxRCxJQUFmLEtBQXNCbnFELEtBQUcsc0JBQXpCLEVBQWlELHlCQUF1QkMsRUFBRWtxRCxJQUF6QixLQUFnQ25xRCxLQUFHLGtDQUFuQyxFQUF1RSxhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxtQkFBdkIsRUFBNEMsa0JBQWdCQyxFQUFFa3FELElBQWxCLEtBQXlCbnFELEtBQUcsd0JBQTVCLEVBQXNELGNBQVlDLEVBQUVrcUQsSUFBZCxLQUFxQm5xRCxLQUFHLG9CQUF4QixFQUE4QyxpQkFBZUMsRUFBRWtxRCxJQUFqQixLQUF3Qm5xRCxLQUNoZix1QkFEd2QsRUFDL2IsVUFBUUMsRUFBRWtxRCxJQUFWLEtBQWlCbnFELEtBQUcsZ0JBQXBCLEVBQXNDLGtCQUFnQkMsRUFBRWtxRCxJQUFsQixLQUF5Qm5xRCxLQUFHLHdCQUE1QixFQUFzRCxtQkFBaUJDLEVBQUVrcUQsSUFBbkIsS0FBMEJucUQsS0FBRyx5QkFBN0IsRUFBd0Qsb0JBQWtCQyxFQUFFa3FELElBQXBCLEtBQTJCbnFELEtBQUcsMEJBQTlCLEVBQTBELGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLG1CQUF2QixFQUE0QyxTQUFPQyxFQUFFa3FELElBQVQsS0FBZ0JucUQsS0FBRyxlQUFuQixFQUFvQyxnQkFBY0MsRUFBRWtxRCxJQUFoQixLQUF1Qm5xRCxLQUFHLGlCQUExQixFQUE2QyxlQUFhQyxFQUFFa3FELElBQWYsS0FBc0JucUQsS0FBRyxxQkFBekIsRUFBZ0QsSUFBRyxVQUFRQyxFQUFFa3FELElBQVYsSUFBZ0Isa0JBQWdCbHFELEVBQUVrcUQsSUFBckMsRUFBMENucUQsS0FBRyx3QkFBSCxDQUE0QixhQUFXQyxFQUFFa3FELElBQWIsS0FBb0JucUQsS0FBRyxtQkFBdkI7QUFDOWQscUJBQWVDLEVBQUVrcUQsSUFBakIsS0FBd0JucUQsS0FBRyx1QkFBM0IsRUFBb0QsYUFBV0MsRUFBRWtxRCxJQUFiLEtBQW9CbnFELEtBQUcsbUJBQXZCLEVBQTRDLGdCQUFjQyxFQUFFa3FELElBQWhCLEtBQXVCbnFELEtBQUcsc0JBQTFCLEVBQWtELGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLG1CQUF2QixFQUE0QyxZQUFVQyxFQUFFa3FELElBQVosS0FBbUJucUQsS0FBRyxrQkFBdEIsRUFBMEMsV0FBU0MsRUFBRWtxRCxJQUFYLEtBQWtCbnFELEtBQUcsWUFBckIsRUFBbUMsa0JBQWdCQyxFQUFFa3FELElBQWxCLEtBQXlCbnFELEtBQUcsd0JBQTVCLEVBQXNELFNBQU9DLEVBQUVrcUQsSUFBVCxLQUFnQm5xRCxLQUFHLFVBQW5CLEVBQStCLFdBQVNDLEVBQUVrcUQsSUFBWCxLQUFrQm5xRCxLQUFHLFlBQXJCLEVBQW1DLFdBQVNDLEVBQUVrcUQsSUFBWCxLQUFrQm5xRCxLQUFHLGlCQUFyQixFQUF3QyxXQUFTQyxFQUFFa3FELElBQVgsS0FBa0JucUQsS0FBRyxpQkFBckIsRUFBd0Msc0JBQW9CQyxFQUFFa3FELElBQXRCLEtBQTZCbnFELEtBQUcsNkJBQWhDO0FBQ25kLGVBQVNDLEVBQUVrcUQsSUFBWCxLQUFrQm5xRCxLQUFHLGlCQUFyQixFQUF3QyxXQUFTQyxFQUFFa3FELElBQVgsS0FBa0JucUQsS0FBRyxZQUFyQixFQUFtQyxpQkFBZUMsRUFBRWtxRCxJQUFqQixLQUF3Qm5xRCxLQUFHLGtCQUEzQixFQUErQyxXQUFTQyxFQUFFa3FELElBQVgsS0FBa0JucUQsS0FBRyxZQUFyQixFQUFtQyxXQUFTQyxFQUFFa3FELElBQVgsS0FBa0JucUQsS0FBRyxpQkFBckIsRUFBd0MsVUFBUUMsRUFBRWtxRCxJQUFWLEtBQWlCbnFELEtBQUcsZ0JBQXBCLEVBQXNDLGVBQWFDLEVBQUVrcUQsSUFBZixLQUFzQm5xRCxLQUFHLGdCQUF6QixFQUEyQyxnQkFBY0MsRUFBRWtxRCxJQUFoQixLQUF1Qm5xRCxLQUFHLGlCQUExQixFQUE2QyxZQUFVQyxFQUFFa3FELElBQVosS0FBbUJucUQsS0FBRyxrQkFBdEIsRUFBMEMsY0FBWUMsRUFBRWtxRCxJQUFkLEtBQXFCbnFELEtBQUcsZUFBeEIsRUFBeUMsdUJBQXFCQyxFQUFFa3FELElBQXZCLEtBQThCbnFELEtBQUcsd0JBQWpDLEVBQTJELGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLGNBQXZCO0FBQ2pkLHNCQUFnQkMsRUFBRWtxRCxJQUFsQixLQUF5Qm5xRCxLQUFHLG1CQUE1QixFQUFpRCxrQkFBZ0JDLEVBQUVrcUQsSUFBbEIsS0FBeUJucUQsS0FBRyxtQkFBNUIsRUFBaUQsZ0JBQWNDLEVBQUVrcUQsSUFBaEIsS0FBdUJucUQsS0FBRyxpQkFBMUIsRUFBNkMsU0FBT0MsRUFBRWtxRCxJQUFULEtBQWdCbnFELEtBQUcsZUFBbkIsRUFBb0Msa0JBQWdCQyxFQUFFa3FELElBQWxCLEtBQXlCbnFELEtBQUcsd0JBQTVCLEVBQXNELGNBQVlDLEVBQUVrcUQsSUFBZCxLQUFxQm5xRCxLQUFHLGVBQXhCLEVBQXlDLFlBQVVDLEVBQUVrcUQsSUFBWixLQUFtQm5xRCxLQUFHLGFBQXRCLEVBQXFDLGNBQVlDLEVBQUVrcUQsSUFBZCxLQUFxQm5xRCxLQUFHLGVBQXhCLEVBQXlDLGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLG1CQUF2QixFQUE0QyxVQUFRQyxFQUFFa3FELElBQVYsS0FBaUJucUQsS0FBRyxnQkFBcEIsRUFBc0MsbUJBQWlCQyxFQUFFa3FELElBQW5CLEtBQTBCbnFELEtBQUcsb0JBQTdCLEVBQW1ELGlCQUFlQyxFQUFFa3FELElBQWpCLEtBQ3BlbnFELEtBQUcsa0JBRGllLEVBQzdjLFlBQVVDLEVBQUVrcUQsSUFBWixLQUFtQm5xRCxLQUFHLGFBQXRCLEVBQXFDLGFBQVdDLEVBQUVrcUQsSUFBYixLQUFvQm5xRCxLQUFHLG1CQUF2QixFQUE0QyxhQUFXQyxFQUFFZ3RELFFBQWIsS0FBd0JqdEQsS0FBRyxjQUEzQixFQUEyQyxVQUFRQyxFQUFFaXRELEdBQVYsS0FBZ0JsdEQsS0FBRyxrQkFBbkIsRUFBdUMsMkJBQXlCQyxFQUFFa3RELEtBQTNCLEtBQW1DbnRELEtBQUcsNEJBQXRDLEVBQW9FLGtCQUFnQkMsRUFBRWt0RCxLQUFsQixLQUEwQm50RCxLQUFHLG1CQUE3QixFQUFrRCxlQUFhQyxFQUFFa3RELEtBQWYsS0FBdUJudEQsS0FBRyxnQkFBMUIsRUFBNEMsZ0JBQWNDLEVBQUVrdEQsS0FBaEIsS0FBd0JudEQsS0FBRyxpQkFBM0IsRUFBOEMsYUFBV0MsRUFBRWt0RCxLQUFiLEtBQXFCbnRELEtBQUcsY0FBeEIsRUFBd0MsU0FBT0MsRUFBRW10RCxZQUFULEtBQXdCcHRELEtBQUcsb0JBQTNCLEVBQWlELGlCQUFlQyxFQUFFa3RELEtBQWpCLEtBQ25lbnRELEtBQUcsa0JBRGdlLEVBQzVjLGdCQUFjQyxFQUFFa3RELEtBQWhCLEtBQXdCbnRELEtBQUcsaUJBQTNCLEVBQThDLGFBQVdDLEVBQUVrdEQsS0FBYixLQUFxQm50RCxLQUFHLG9CQUF4QixFQUE4QyxlQUFhQyxFQUFFa3RELEtBQWYsS0FBdUJudEQsS0FBRyxvQ0FBMUIsRUFBZ0Usa0JBQWdCQyxFQUFFa3RELEtBQWxCLEtBQTBCbnRELEtBQUcsbUJBQTdCLEVBQWtELGFBQVdDLEVBQUVrdEQsS0FBYixLQUFxQm50RCxLQUFHLGNBQXhCLEVBQXdDLGdCQUFjQyxFQUFFa3RELEtBQWhCLEtBQXdCbnRELEtBQUcsaUJBQTNCLEVBQThDLG1CQUFpQkMsRUFBRWt0RCxLQUFuQixLQUEyQm50RCxLQUFHLG9CQUE5QixFQUFvRCxnQkFBY0MsRUFBRWt0RCxLQUFoQixLQUF3Qm50RCxLQUFHLGlCQUEzQixFQUE4QyxpQkFBZUMsRUFBRWt0RCxLQUFqQixLQUF5Qm50RCxLQUFHLGtCQUE1QixFQUFnRCxjQUFZQyxFQUFFa3RELEtBQWQsS0FBc0JudEQsS0FBRywyQkFBekI7QUFDOWMsa0JBQVlDLEVBQUVrdEQsS0FBZCxLQUFzQm50RCxLQUFHLGVBQXpCLEVBQTBDLGdCQUFjQyxFQUFFa3RELEtBQWhCLEtBQXdCbnRELEtBQUcsaUJBQTNCLEVBQThDLFVBQVFDLEVBQUVrdEQsS0FBVixLQUFrQm50RCxLQUFHLGtFQUFyQixFQUF5RixnQkFBY0MsRUFBRWt0RCxLQUFoQixLQUF3Qm50RCxLQUFHLHlCQUEzQixFQUFzRCxjQUFZQyxFQUFFa3RELEtBQWQsS0FBc0JudEQsS0FBRyxtQ0FBekIsRUFBOEQsZ0JBQWNDLEVBQUVrdEQsS0FBaEIsS0FBd0JudEQsS0FBRyxpQkFBM0IsRUFBOEMsZUFBYUMsRUFBRWt0RCxLQUFmLEtBQXVCbnRELEtBQUcsZ0JBQTFCLEVBQTRDLHdCQUFzQkMsRUFBRWt0RCxLQUF4QixLQUFnQ250RCxLQUFHLGtCQUFuQyxFQUF1RCxjQUFZQyxFQUFFa3RELEtBQWQsS0FBc0JudEQsS0FBRyxlQUF6QixFQUEwQyxhQUFXQyxFQUFFa3RELEtBQWIsS0FBcUJudEQsS0FDamYsY0FENGQsRUFDNWMsbUJBQWlCQyxFQUFFa3RELEtBQW5CLEtBQTJCbnRELEtBQUcsb0JBQTlCLEVBQW9ELGtCQUFnQkMsRUFBRWt0RCxLQUFsQixLQUEwQm50RCxLQUFHLG1CQUE3QixFQUFrRCw2QkFBMkJDLEVBQUVrdEQsS0FBN0IsS0FBcUNudEQsS0FBRyw4QkFBeEMsRUFBd0UsZUFBYUMsRUFBRWt0RCxLQUFmLEtBQXVCbnRELEtBQUcsZ0JBQTFCLEVBQTRDLGFBQVdDLEVBQUVrdEQsS0FBYixLQUFxQm50RCxLQUFHLGNBQXhCLEVBQXdDLGFBQVdDLEVBQUVrdEQsS0FBYixLQUFxQm50RCxLQUFHLGNBQXhCLEVBQXdDLFlBQVVDLEVBQUVrdEQsS0FBWixLQUFvQm50RCxLQUFHLGtCQUF2QixFQUEyQyxZQUFVQyxFQUFFa3RELEtBQVosS0FBb0JudEQsS0FBRyxhQUF2QixFQUFzQyxhQUFXQyxFQUFFa3RELEtBQWIsS0FBcUJudEQsS0FBRyxjQUF4QixFQUF3QyxlQUFhQyxFQUFFa3RELEtBQWYsS0FBdUJudEQsS0FBRyxnQkFBMUIsRUFBNEMsYUFBV0MsRUFBRWt0RCxLQUFiLEtBQXFCbnRELEtBQ3BmLGNBRCtkLEVBQy9jLGdCQUFjQyxFQUFFa3RELEtBQWhCLEtBQXdCbnRELEtBQUcsaUJBQTNCLEVBQThDLGNBQVlDLEVBQUVrdEQsS0FBZCxLQUFzQm50RCxLQUFHLGVBQXpCLEVBQTBDLGVBQWFDLEVBQUVrdEQsS0FBZixLQUF1Qm50RCxLQUFHLGdCQUExQixFQUE0QyxtQkFBaUJDLEVBQUVrdEQsS0FBbkIsS0FBMkJudEQsS0FBRywrQkFBOUIsRUFBK0QsZ0JBQWNDLEVBQUVrdEQsS0FBaEIsS0FBd0JudEQsS0FBRyxpQkFBM0IsRUFBOEMsb0JBQWtCQyxFQUFFa3RELEtBQXBCLEtBQTRCbnRELEtBQUcsOERBQS9CLEVBQStGLFdBQVNDLEVBQUVrdEQsS0FBWCxLQUFtQm50RCxLQUFHLG9CQUF0QixFQUE0QyxZQUFVQyxFQUFFa3RELEtBQVosS0FBb0JudEQsS0FBRyxhQUF2QixFQUFzQyxXQUFTQyxFQUFFa3RELEtBQVgsS0FBbUJudEQsS0FBRyxZQUF0QixFQUFvQyxjQUFZQyxFQUFFa3RELEtBQWQsS0FBc0JudEQsS0FBRyw0QkFBekI7QUFDMWQscUJBQWVDLEVBQUVrdEQsS0FBakIsS0FBeUJudEQsS0FBRyxrQkFBNUIsRUFBZ0QsZ0JBQWNDLEVBQUVrdEQsS0FBaEIsS0FBd0JudEQsS0FBRyxpQkFBM0IsRUFBOEMseUJBQXVCQyxFQUFFa3RELEtBQXpCLEtBQWlDbnRELEtBQUcseUJBQXBDLEVBQStELGNBQVlDLEVBQUVvdEQsTUFBZCxLQUF1QnJ0RCxLQUFHLCtCQUExQixFQUEyRCxnQkFBY0MsRUFBRTRvRCxPQUFoQixLQUEwQjdvRCxLQUFHLHlCQUE3QixFQUF3RCxnQkFBY0MsRUFBRXNyRCxPQUFoQixLQUEwQnZyRCxLQUFHLHVCQUE3QixFQUFzRCxXQUFTQyxFQUFFc3JELE9BQVgsS0FBcUJ2ckQsS0FBRyx3QkFBeEIsRUFBa0QsZ0JBQWNDLEVBQUVzckQsT0FBaEIsS0FBMEJ2ckQsS0FBRyxpQkFBN0IsRUFBZ0QsZ0JBQWNDLEVBQUVzckQsT0FBaEIsS0FBMEJ2ckQsS0FBRyxzQkFBN0IsRUFBcUQsa0JBQWdCQyxFQUFFc3JELE9BQWxCLEtBQzVkdnJELEtBQUcsd0JBRHlkLEVBQy9iLGNBQVlDLEVBQUVzckQsT0FBZCxLQUF3QnZyRCxLQUFHLGVBQTNCLEVBQTRDLGNBQVlDLEVBQUVzckQsT0FBZCxLQUF3QnZyRCxLQUFHLGVBQTNCLEVBQTRDLFlBQVVDLEVBQUVzckQsT0FBWixLQUFzQnZyRCxLQUFHLGFBQXpCLEVBQXdDLGFBQVdDLEVBQUVzckQsT0FBYixLQUF1QnZyRCxLQUFHLGNBQTFCLEVBQTBDLFdBQVNDLEVBQUVzckQsT0FBWCxLQUFxQnZyRCxLQUFHLFlBQXhCLEVBQXNDLGdCQUFjQyxFQUFFc3JELE9BQWhCLEtBQTBCdnJELEtBQUcsaUJBQTdCLEVBQWdELDZCQUEyQkMsRUFBRXNyRCxPQUE3QixLQUF1Q3ZyRCxLQUFHLDhCQUExQyxFQUEwRSxnQkFBY0MsRUFBRXNyRCxPQUFoQixLQUEwQnZyRCxLQUFHLG9CQUE3QixFQUFtRCxjQUFZQyxFQUFFc3JELE9BQWQsS0FBd0J2ckQsS0FBRyxlQUEzQixFQUE0QyxZQUFVQyxFQUFFc3JELE9BQVosS0FBc0J2ckQsS0FBRyxhQUF6QixFQUF3QyxhQUMvZUMsRUFBRXNyRCxPQUQ2ZSxLQUNuZXZyRCxLQUFHLGNBRGdlLEVBQ2hkLG1CQUFpQkMsRUFBRXNyRCxPQUFuQixLQUE2QnZyRCxLQUFHLG9CQUFoQyxFQUFzRCxZQUFVQyxFQUFFc3JELE9BQVosS0FBc0J2ckQsS0FBRyxhQUF6QixFQUF3QyxhQUFXQyxFQUFFc3JELE9BQWIsS0FBdUJ2ckQsS0FBRyxjQUExQixFQUEwQyx1QkFBcUJDLEVBQUVzckQsT0FBdkIsS0FBaUN2ckQsS0FBRyx3QkFBcEMsRUFBOEQsZUFBYUMsRUFBRXNyRCxPQUFmLEtBQXlCdnJELEtBQUcsZ0JBQTVCLEVBQThDLGlCQUFlQyxFQUFFc3JELE9BQWpCLEtBQTJCdnJELEtBQUcsa0JBQTlCLEVBQWtELFlBQVVDLEVBQUVzckQsT0FBWixLQUFzQnZyRCxLQUFHLGNBQXpCLEVBQXlDLGVBQWFDLEVBQUVzckQsT0FBZixLQUF5QnZyRCxLQUFHLGdCQUE1QixFQUE4QyxtQkFBaUJDLEVBQUVzckQsT0FBbkIsS0FBNkJ2ckQsS0FBRyxvQkFBaEMsRUFBc0QsY0FBWUMsRUFBRXNyRCxPQUFkLEtBQXdCdnJELEtBQUcsZUFBM0I7QUFDbGQsY0FBUUMsRUFBRXNyRCxPQUFWLEtBQW9CdnJELEtBQUcsV0FBdkIsRUFBb0MsZUFBYUMsRUFBRXNyRCxPQUFmLEtBQXlCdnJELEtBQUcsZ0JBQTVCLEVBQThDLG9CQUFrQkMsRUFBRXNyRCxPQUFwQixLQUE4QnZyRCxLQUFHLHFCQUFqQyxFQUF3RCxTQUFPQyxFQUFFcXRELFFBQVQsS0FBb0J0dEQsS0FBRyxlQUF2QixFQUF3QyxVQUFRQyxFQUFFcXRELFFBQVYsS0FBcUJ0dEQsS0FBRyxvQkFBeEIsRUFBOEMsYUFBV0MsRUFBRXF0RCxRQUFiLEtBQXdCdHRELEtBQUcsMkNBQTNCLEVBQXdFLFVBQVFDLEVBQUVxdEQsUUFBVixLQUFxQnR0RCxLQUFHLFdBQXhCLEVBQXFDLGVBQWFDLEVBQUVxdEQsUUFBZixLQUEwQnR0RCxLQUFHLGdCQUE3QixFQUErQyxTQUFPQyxFQUFFc3RELE9BQVQsS0FBbUJ2dEQsS0FBRyxVQUF0QixFQUFrQyxXQUFTQyxFQUFFc3RELE9BQVgsS0FBcUJ2dEQsS0FBRyxZQUF4QixFQUFzQyxVQUFRQyxFQUFFc3RELE9BQVYsS0FBb0J2dEQsS0FBRyxXQUF2QixFQUFvQyxhQUFXQyxFQUFFc3RELE9BQWIsS0FDdmV2dEQsS0FBRyxjQURvZSxFQUNwZCxtQkFBaUJDLEVBQUVzdEQsT0FBbkIsS0FBNkJ2dEQsS0FBRyxvQkFBaEMsRUFBc0QsWUFBVUMsRUFBRXN0RCxPQUFaLEtBQXNCdnRELEtBQUcsYUFBekIsRUFBd0MsZUFBYUMsRUFBRXN0RCxPQUFmLEtBQXlCdnRELEtBQUcsZ0JBQTVCLEVBQThDLFdBQVNDLEVBQUVzdEQsT0FBWCxLQUFxQnZ0RCxLQUFHLFlBQXhCLEVBQXNDLGVBQWFDLEVBQUVzdEQsT0FBZixLQUF5QnZ0RCxLQUFHLGdCQUE1QixFQUE4QyxhQUFXQyxFQUFFc3RELE9BQWIsS0FBdUJ2dEQsS0FBRyxjQUExQixFQUEwQyxVQUFRQyxFQUFFc3RELE9BQVYsS0FBb0J2dEQsS0FBRyxNQUF2QixFQUErQixVQUFRQyxFQUFFc3RELE9BQVYsSUFBbUIsU0FBT3R0RCxFQUFFLGNBQUYsQ0FBMUIsS0FBOENELEtBQUcsd0NBQWpELEVBQTJGLGNBQVlDLEVBQUVzdEQsT0FBZCxLQUF3QnZ0RCxLQUFHLCtCQUEzQixFQUE0RCxXQUFTQyxFQUFFc3RELE9BQVgsS0FBcUJ2dEQsS0FBRyxZQUF4QjtBQUNwZCxjQUFRQyxFQUFFc3RELE9BQVYsS0FBb0J2dEQsS0FBRyxXQUF2QixFQUFvQyxlQUFhQyxFQUFFc3RELE9BQWYsS0FBeUJ2dEQsS0FBRyxnQkFBNUIsRUFBOEMsVUFBUUMsRUFBRXN0RCxPQUFWLEtBQW9CdnRELEtBQUcsbUNBQXZCLEVBQTRELGVBQWFDLEVBQUVzdEQsT0FBZixLQUF5QnZ0RCxLQUFHLGdCQUE1QixFQUE4QyxXQUFTQyxFQUFFc3RELE9BQVgsS0FBcUJ2dEQsS0FBRyxZQUF4QixFQUFzQyxhQUFXQyxFQUFFc3RELE9BQWIsS0FBdUJ2dEQsS0FBRyxjQUExQixFQUEwQyxZQUFVQyxFQUFFc3RELE9BQVosS0FBc0J2dEQsS0FBRyxhQUF6QixFQUF3QyxXQUFTQyxFQUFFc3RELE9BQVgsS0FBcUJ2dEQsS0FBRyxZQUF4QixFQUFzQyxTQUFPQyxFQUFFc3RELE9BQVQsS0FBbUJ2dEQsS0FBRyxVQUF0QixFQUFrQyxtQkFBaUJDLEVBQUV1dEQsUUFBbkIsS0FBOEJ4dEQsS0FBRyxvQkFBakMsRUFBdUQsb0JBQWtCQyxFQUFFdXRELFFBQXBCLEtBQStCeHRELEtBQUcscUJBQWxDLEVBQXlELFNBQU9DLEVBQUV3dEQsYUFBVCxLQUMzZXp0RCxLQUFHLG9CQUR3ZSxFQUNsZCxlQUFhQyxFQUFFMHFELFFBQWYsS0FBMEIzcUQsS0FBRyxnQkFBN0IsRUFBK0MsV0FBU0MsRUFBRTBxRCxRQUFYLEtBQXNCM3FELEtBQUcsWUFBekIsRUFBdUMsV0FBU0MsRUFBRXl0RCxLQUFYLEtBQW1CMXRELEtBQUcsWUFBdEIsRUFBb0MsV0FBU0MsRUFBRTBxRCxRQUFYLEtBQXNCM3FELEtBQUcsWUFBekIsRUFBdUMsV0FBU0MsRUFBRXl0RCxLQUFYLEtBQW1CMXRELEtBQUcsWUFBdEIsRUFBb0MsZUFBYUMsRUFBRTBxRCxRQUFmLEtBQTBCM3FELEtBQUcsWUFBN0IsRUFBMkMsV0FBU0MsRUFBRTBxRCxRQUFYLEtBQXNCM3FELEtBQUcsWUFBekIsRUFBdUMsWUFBVUMsRUFBRTBxRCxRQUFaLEtBQXVCM3FELEtBQUcsYUFBMUIsRUFBeUMsV0FBU0MsRUFBRTB0RCxLQUFYLEtBQW1CM3RELEtBQUcsWUFBdEIsRUFBb0MsbUJBQWlCQyxFQUFFMHFELFFBQW5CLEtBQThCM3FELEtBQUcsb0JBQWpDLEVBQXVELElBQUcsVUFBUUMsRUFBRXl0RCxLQUFWLElBQWlCLFdBQVN6dEQsRUFBRXN0RCxPQUEvQixFQUF1Q3Z0RCxLQUFHLFdBQUgsQ0FBZSxVQUFRQyxFQUFFeXRELEtBQVYsS0FDMWUxdEQsS0FBRyxXQUR1ZSxFQUMxZCxZQUFVQyxFQUFFeXRELEtBQVosS0FBb0IxdEQsS0FBRyxhQUF2QixFQUFzQyxVQUFRQyxFQUFFeXRELEtBQVYsS0FBa0IxdEQsS0FBRyxXQUFyQixFQUFrQyxlQUFhQyxFQUFFeXRELEtBQWYsS0FBdUIxdEQsS0FBRyxxQkFBMUIsRUFBaUQsV0FBU0MsRUFBRXl0RCxLQUFYLEtBQW1CMXRELEtBQUcsaUJBQXRCLEVBQXlDLFVBQVFDLEVBQUV5dEQsS0FBVixLQUFrQjF0RCxLQUFHLG1CQUFyQixFQUEwQyxVQUFRQyxFQUFFeXRELEtBQVYsS0FBa0IxdEQsS0FBRyxrQkFBckIsRUFBeUMsZ0JBQWNDLEVBQUV5dEQsS0FBaEIsS0FBd0IxdEQsS0FBRyxpQ0FBM0IsRUFBOEQsV0FBU0MsRUFBRTJ0RCxPQUFYLElBQW9CLFVBQVEzdEQsRUFBRTR0RCxRQUE5QixJQUF3QyxtQkFBaUI1dEQsRUFBRSx1Q0FBRixDQUF6RCxHQUFvR0QsS0FBRyx1QkFBdkcsR0FBK0gsVUFBUUMsRUFBRTR0RCxRQUFWLEtBQXFCN3RELEtBQUcsV0FBeEIsQ0FBL0gsQ0FBb0ssY0FBWUMsRUFBRTBxRCxRQUFkLEtBQ3ZlM3FELEtBQUcsZUFEb2UsRUFDbmQsYUFBV0MsRUFBRSxjQUFGLENBQVgsSUFBOEIsYUFBV0EsRUFBRSwwQkFBRixDQUF6QyxLQUF5RUQsS0FBRyxjQUE1RSxFQUE0RixVQUFRQyxFQUFFMHRELEtBQVYsS0FBa0IzdEQsS0FBRyxlQUFyQixFQUFzQyxZQUFVQyxFQUFFMHRELEtBQVosS0FBb0IzdEQsS0FBRyxtQkFBdkIsRUFBNEMsSUFBRyxTQUFPQyxFQUFFNnRELE1BQVQsSUFBaUIsaUJBQWU3dEQsRUFBRTZvRCxPQUFyQyxFQUE2QzlvRCxLQUFHLHNCQUFILENBQTdDLEtBQTRFLElBQUcsaUJBQWVDLEVBQUU2b0QsT0FBakIsSUFBMEIsaUJBQWU3b0QsRUFBRTZvRCxPQUE5QyxFQUFzRCxJQUFHN29ELEVBQUU4dEQsV0FBTCxFQUFpQixRQUFPOXRELEVBQUU4dEQsV0FBVCxHQUFzQixLQUFLLE9BQUw7QUFBYS90RCxpQkFBRyxzQkFBSCxDQUEwQixNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyxpQ0FBSCxDQUFxQyxNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyxpQ0FBSDtBQUN6ZCxrQkFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLG1DQUFILENBQXVDLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsZ0JBQUgsQ0FBb0IsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGtCQUFILENBQXNCLE1BQU0sS0FBSyxlQUFMO0FBQXFCQSxpQkFBRyxvQkFBSCxDQUF3QixNQUFNLEtBQUssY0FBTDtBQUFvQkEsaUJBQUcsbUJBQUgsQ0FBdUIsTUFBTTtBQUFRQSxpQkFBRyxzQkFBSCxDQUQ0QixDQUFqQixNQUNvQkEsS0FBRyxzQkFBSCxDQUEwQixhQUFXQyxFQUFFMHRELEtBQWIsS0FBcUIzdEQsS0FBRyxrQkFBeEIsRUFBNEMsU0FBT0MsRUFBRTB0RCxLQUFULEtBQWlCM3RELEtBQUcsMEJBQXBCLEVBQWdELFdBQVNDLEVBQUUwdEQsS0FBWCxLQUFtQjN0RCxLQUFHLGdCQUF0QixFQUF3QyxlQUN2ZkMsRUFBRXN0RCxPQURxZixLQUMzZXZ0RCxLQUFHLGdCQUR3ZSxFQUN0ZCxXQUFTQyxFQUFFc3RELE9BQVgsS0FBcUJ2dEQsS0FBRyxZQUF4QixFQUFzQyxTQUFPQyxFQUFFMHFELFFBQVQsS0FBb0IzcUQsS0FBRyxVQUF2QixFQUFtQyxVQUFRQyxFQUFFMHFELFFBQVYsS0FBcUIzcUQsS0FBRyxXQUF4QixFQUFxQyxlQUFhQyxFQUFFMHFELFFBQWYsS0FBMEIzcUQsS0FBRyxnQkFBN0IsRUFBK0MsU0FBT0MsRUFBRSt0RCxJQUFULEtBQWdCaHVELEtBQUcsV0FBbkIsRUFBZ0MsaUJBQWVDLEVBQUUwcUQsUUFBakIsS0FBNEIzcUQsS0FBRyxrQkFBL0IsRUFBbUQscUJBQW1CQyxFQUFFNHRELFFBQXJCLEtBQWdDN3RELEtBQUcsc0JBQW5DLEVBQTJELFlBQVVDLEVBQUU0dEQsUUFBWixLQUF1Qjd0RCxLQUFHLGFBQTFCLEVBQXlDLFVBQVFDLEVBQUU0dEQsUUFBVixLQUFxQjd0RCxLQUFHLFdBQXhCLEVBQXFDLFdBQVNDLEVBQUU0dEQsUUFBWCxLQUFzQjd0RCxLQUFHLFlBQXpCLEVBQXVDLGVBQWFDLEVBQUU0dEQsUUFBZixLQUEwQjd0RCxLQUFHLGdCQUE3QixFQUErQyxjQUNoZkMsRUFBRStyRCxRQUQ4ZSxLQUNuZWhzRCxLQUFHLHdCQURnZSxFQUN0YyxnQkFBY0MsRUFBRStyRCxRQUFoQixLQUEyQmhzRCxLQUFHLGlCQUE5QixFQUFpRCxXQUFTQyxFQUFFK3JELFFBQVgsS0FBc0Joc0QsS0FBRyxxQkFBekIsRUFBZ0QsY0FBWUMsRUFBRXNyRCxPQUFkLEtBQXdCdnJELEtBQUcsd0JBQTNCLEVBQXFELG1CQUFpQkMsRUFBRStyRCxRQUFuQixLQUE4QmhzRCxLQUFHLDZCQUFqQyxFQUFnRSxvQkFBa0JDLEVBQUUrckQsUUFBcEIsS0FBK0Joc0QsS0FBRyw4QkFBbEMsRUFBa0UsaUJBQWVDLEVBQUUrckQsUUFBakIsS0FBNEJoc0QsS0FBRywyQkFBL0IsRUFBNEQsY0FBWUMsRUFBRStyRCxRQUFkLEtBQXlCaHNELEtBQUcsZUFBNUIsRUFBNkMsNEJBQTBCQyxFQUFFK3JELFFBQTVCLEtBQXVDaHNELEtBQUcsc0NBQTFDO0FBQzNhLGFBQU9DLEVBQUVndUQsWUFBVCxHQUFzQmp1RCxLQUFHLG1CQUF6QixHQUE2QyxrQkFBZ0JDLEVBQUUycUQsT0FBbEIsS0FBNEI1cUQsS0FBRyxtQkFBL0IsQ0FBN0MsQ0FBaUcsb0JBQWtCQyxFQUFFNHRELFFBQXBCLEtBQStCN3RELEtBQUcscUJBQWxDLEVBQXlELGtCQUFnQkMsRUFBRTR0RCxRQUFsQixLQUE2Qjd0RCxLQUFHLG1CQUFoQyxFQUFxRCxzQkFBb0JDLEVBQUU0dEQsUUFBdEIsS0FBaUM3dEQsS0FBRyx1QkFBcEMsRUFBNkQsVUFBUUMsRUFBRTR0RCxRQUFWLEtBQXFCN3RELEtBQUcsV0FBeEIsRUFBcUMsaUJBQWVDLEVBQUU0dEQsUUFBakIsS0FBNEI3dEQsS0FBRyxrQkFBL0IsRUFBbUQsY0FBWUMsRUFBRTR0RCxRQUFkLEtBQXlCN3RELEtBQUcsZUFBNUIsRUFBNkMsd0JBQXNCQyxFQUFFNHRELFFBQXhCLEtBQW1DN3RELEtBQUcsb0JBQXRDLEVBQTRELFdBQVNDLEVBQUU0dEQsUUFBWCxLQUFzQjd0RCxLQUFHLE9BQXpCLEVBQWtDLGdCQUMvZUMsRUFBRTR0RCxRQUQ2ZSxLQUNsZTd0RCxLQUFHLFlBRCtkLEVBQ2pkLFlBQVVDLEVBQUU0dEQsUUFBWixLQUF1Qjd0RCxLQUFHLFFBQTFCLEVBQW9DLGdCQUFjQyxFQUFFNHRELFFBQWhCLEtBQTJCN3RELEtBQUcsWUFBOUIsRUFBNEMsVUFBUUMsRUFBRTR0RCxRQUFWLElBQW9CLGlCQUFlNXRELEVBQUUsV0FBRixDQUFuQyxLQUFvREQsS0FBRyxrQkFBdkQsRUFBMkUsYUFBV0MsRUFBRWl1RCxZQUFiLEtBQTRCbHVELEtBQUcsYUFBL0IsRUFBOEMsZ0JBQWNDLEVBQUVpdUQsWUFBaEIsS0FBK0JsdUQsS0FBRyxpQkFBbEMsRUFBcUQsaUJBQWVDLEVBQUVpdUQsWUFBakIsS0FBZ0NsdUQsS0FBRyxrQkFBbkMsRUFBdUQsY0FBWUMsRUFBRWl1RCxZQUFkLEtBQTZCbHVELEtBQUcsZUFBaEMsRUFBaUQsYUFBV0MsRUFBRWl1RCxZQUFiLEtBQTRCbHVELEtBQUcsY0FBL0IsRUFBK0MsSUFBR0MsRUFBRWl1RCxZQUFGLElBQWdCanVELEVBQUUsY0FBRixDQUFuQixFQUFxQyxRQUFPRCxLQUFHLGFBQUgsRUFBaUJDLEVBQUUsY0FBRixDQUF4QixHQUEyQyxLQUFLLEtBQUw7QUFBV0QsaUJBQzFnQixLQUQwZ0IsQ0FDcGdCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxVQUFILENBQWMsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLGlCQUFHLGNBQUgsQ0FBa0IsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsU0FBSCxDQUFhLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxXQUFILENBQWUsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLGlCQUFHLGNBQUgsQ0FBa0IsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsTUFBSCxDQUFVLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLG1CQUFILENBQXVCLE1BQU0sS0FBSyxzQkFBTDtBQUE0QkEsaUJBQUcsc0JBQUgsQ0FBMEIsTUFBTSxLQUFLLHFCQUFMO0FBQTJCQSxpQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsYUFBSCxDQUFpQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxTQUFILENBQWEsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsS0FBSCxDQUFTLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUNoZ0IsT0FEZ2dCLENBQ3hmLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLEtBQUgsQ0FBUyxNQUFNO0FBQVFBLGlCQUFHLFFBQUgsQ0FGb2EsQ0FFeFosb0JBQWtCQyxFQUFFNG9ELE9BQXBCLEtBQThCN29ELEtBQUcscUJBQWpDLEVBQXdELFNBQU9DLEVBQUVrdUQsY0FBVCxLQUEwQm51RCxLQUFHLHFCQUE3QixFQUFvRCxXQUFTQyxFQUFFNHRELFFBQVgsR0FBb0I3dEQsS0FBRywwQkFBdkIsR0FBa0QsZ0JBQWNDLEVBQUVxckQsUUFBaEIsR0FBeUJ0ckQsS0FBRywwQkFBNUIsR0FBdUQsZ0JBQWNDLEVBQUVzckQsT0FBaEIsR0FBd0J2ckQsS0FBRyxzQkFBM0IsR0FBa0QsZ0JBQWNDLEVBQUVtdUQsUUFBaEIsR0FBeUJwdUQsS0FBRyxzQkFBNUIsR0FBbUQsZ0JBQWNDLEVBQUVtdUQsUUFBaEIsS0FBMkJwdUQsS0FBRyxpQkFBOUIsQ0FBOU0sQ0FBK1AsSUFBR0MsRUFBRSxrQkFBRixDQUFILEVBQXlCLFFBQU9ELEtBQUcsZ0JBQUgsRUFBb0JDLEVBQUUsa0JBQUYsQ0FBM0IsR0FBa0QsS0FBSyxTQUFMO0FBQWVELGlCQUNqZ0IsU0FEaWdCLENBQ3ZmLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLFNBQUgsQ0FBYSxNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyxRQUFILENBQVksTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsTUFBSCxDQUFVLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLEtBQUgsQ0FBUyxNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxPQUFILENBQVcsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsTUFBSCxDQUFVLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLE9BQUgsQ0FBVyxNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxPQUFILENBQVcsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsT0FBSCxDQUFXLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLE1BQUgsQ0FBVSxNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsWUFBSCxDQUFnQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxTQUFILENBQWEsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsU0FBSCxDQUFhLE1BQU07QUFBUUEsaUJBQUcsY0FBSCxDQURvQixDQUNGLGtCQUFnQkMsRUFBRW91RCxZQUFsQixLQUFpQ3J1RCxLQUFHLGNBQXBDLEVBQW9ELFVBQ3RmQyxFQUFFcXVELEtBRG9mLEtBQzVldHVELEtBQUcsaUJBRHllLEVBQ3RkLFdBQVNDLEVBQUVxdUQsS0FBWCxLQUFtQnR1RCxLQUFHLFlBQXRCLEVBQW9DLGdDQUE4QkMsRUFBRXF1RCxLQUFoQyxLQUF3Q3R1RCxLQUFHLGlDQUEzQyxFQUE4RSxXQUFTQyxFQUFFcXVELEtBQVgsS0FBbUJ0dUQsS0FBRyxZQUF0QixFQUFvQyxhQUFXQyxFQUFFcXVELEtBQWIsS0FBcUJ0dUQsS0FBRyxjQUF4QixFQUF3QyxpQkFBZUMsRUFBRXF1RCxLQUFqQixLQUF5QnR1RCxLQUFHLGlCQUE1QixFQUErQyxpQkFBZUMsRUFBRXF1RCxLQUFqQixLQUF5QnR1RCxLQUFHLGtCQUE1QixFQUFnRCxlQUFhQyxFQUFFcXVELEtBQWYsS0FBdUJ0dUQsS0FBRyxnQkFBMUIsRUFBNEMsZUFBYUMsRUFBRXF1RCxLQUFmLEtBQXVCdHVELEtBQUcsZ0JBQTFCLEVBQTRDLGVBQWFDLEVBQUVxdUQsS0FBZixLQUF1QnR1RCxLQUFHLGdCQUExQixFQUE0QyxlQUFhQyxFQUFFcXVELEtBQWYsS0FBdUJ0dUQsS0FBRyxnQkFBMUIsRUFBNEMsWUFDN2VDLEVBQUVzdUQsSUFEMmUsS0FDcGV2dUQsS0FBRyxhQURpZSxFQUNsZCxTQUFPQyxFQUFFc3VELElBQVQsS0FBZ0J2dUQsS0FBRyxVQUFuQixFQUErQixnQkFBY0MsRUFBRXF1RCxLQUFoQixLQUF3QnR1RCxLQUFHLGlCQUEzQixFQUE4QyxVQUFRQyxFQUFFcXVELEtBQVYsS0FBa0J0dUQsS0FBRyxXQUFyQixFQUFrQyxZQUFVQyxFQUFFcXVELEtBQVosS0FBb0J0dUQsS0FBRyxhQUF2QixFQUFzQyxtQkFBaUJDLEVBQUVxdUQsS0FBbkIsS0FBMkJ0dUQsS0FBRyxvQkFBOUIsRUFBb0QsZ0JBQWNDLEVBQUVxdUQsS0FBaEIsS0FBd0J0dUQsS0FBRyxpQkFBM0IsRUFBOEMsWUFBVUMsRUFBRXF1RCxLQUFaLEtBQW9CdHVELEtBQUcsYUFBdkIsRUFBc0MsY0FBWUMsRUFBRXF1RCxLQUFkLEtBQXNCdHVELEtBQUcsZUFBekIsRUFBMEMsV0FBU0MsRUFBRXF1RCxLQUFYLEtBQW1CdHVELEtBQUcsWUFBdEIsRUFBb0MsaUJBQWVDLEVBQUVxdUQsS0FBakIsS0FBeUJ0dUQsS0FBRyxrQkFBNUIsRUFBZ0QsSUFBR0MsRUFBRXV1RCxPQUFMLEVBQWEsUUFBT3Z1RCxFQUFFdXVELE9BQVQsR0FBa0IsS0FBSyxTQUFMO0FBQWV4dUQsaUJBQUcsY0FBSDtBQUNoZSxrQkFBTSxLQUFLLGVBQUw7QUFBcUJBLGlCQUFHLG9CQUFILENBQXdCLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLFdBQUgsQ0FBZSxNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxnQkFBSCxDQUFvQixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxXQUFILENBQWUsTUFBTSxLQUFLLFlBQUw7QUFBa0JBLGlCQUFHLGlCQUFILENBQXFCLE1BQU0sS0FBSyxPQUFMO0FBQWEsb0JBQU9DLEVBQUV3dUQsVUFBVCxHQUFxQixLQUFLLGFBQUw7QUFBbUJ6dUQseUJBQUcsa0JBQUgsQ0FBc0IsTUFBTSxLQUFLLE1BQUw7QUFBWUEseUJBQUcsV0FBSCxDQUFlLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSx5QkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssVUFBTDtBQUFnQkEseUJBQUcsZUFBSCxDQUFtQixNQUFNLEtBQUssU0FBTDtBQUFlQSx5QkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxNQUFMO0FBQVlBLHlCQUFHLFdBQUg7QUFDamYsMEJBQU0sS0FBSyxPQUFMO0FBQWFBLHlCQUFHLFlBQUgsQ0FBZ0IsTUFBTSxLQUFLLE1BQUw7QUFBWUEseUJBQUcsV0FBSCxDQUFlLE1BQU07QUFBUUEseUJBQUcsWUFBSCxDQURpTCxDQUNqSyxNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLFlBQUgsQ0FBZ0IsTUFBTSxLQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcscUJBQUgsQ0FBeUIsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGtCQUFILENBQXNCLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxpQkFBRyxrQkFBSCxDQUFzQixNQUFNO0FBQVFBLGlCQUFHLGNBQUgsQ0FGOEIsQ0FFWixtQkFBaUJDLEVBQUV5dUQsSUFBbkIsS0FBMEIxdUQsS0FBRyxvQkFBN0IsRUFBbUQsb0JBQzFlQyxFQUFFMHVELFdBRHdlLEtBQzFkM3VELEtBQUcsb0JBRHVkLEVBQ2pjLG1CQUFpQkMsRUFBRTB1RCxXQUFuQixLQUFpQzN1RCxLQUFHLG9CQUFwQyxFQUEwRCxrQkFBZ0JDLEVBQUU0dEQsUUFBbEIsS0FBNkI3dEQsS0FBRyxtQkFBaEMsRUFBcUQsSUFBR0MsRUFBRTJ1RCxPQUFMLEVBQWEsUUFBTzV1RCxLQUFHLFdBQUgsRUFBZUMsRUFBRTJ1RCxPQUF4QixHQUFpQyxLQUFLLFdBQUw7QUFBaUI1dUQsaUJBQUcsU0FBSCxDQUFhLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLE9BQUgsQ0FBVyxNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxNQUFILENBQVUsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsU0FBSCxDQUFhLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLFFBQUgsQ0FBWSxNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyxRQUFILENBQVksTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsU0FBSCxDQUFhLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyxVQUFILENBQWMsTUFBTTtBQUFRQSxpQkFBRyxjQUFILENBQS9TLENBQWlVLFVBQVFDLEVBQUVrcEQsT0FBVixLQUNyZW5wRCxLQUFHLG1CQURrZSxFQUM3YyxjQUFZQyxFQUFFa3BELE9BQWQsS0FBd0JucEQsS0FBRyxlQUEzQixFQUE0QyxvQkFBa0JDLEVBQUVrcEQsT0FBcEIsS0FBOEJucEQsS0FBRyxvQkFBakMsRUFBdUQsYUFBV0MsRUFBRWtwRCxPQUFiLEtBQXVCbnBELEtBQUcsY0FBMUIsRUFBMEMsaUJBQWVDLEVBQUU0b0QsT0FBakIsS0FBMkI3b0QsS0FBRyxrQkFBOUIsRUFBa0QsaUJBQWUsQ0FBQ0MsRUFBRTRvRCxPQUFsQixJQUE0QixhQUFXNW9ELEVBQUU0dUQsZ0JBQWIsSUFBK0IsU0FBTzV1RCxFQUFFNnVELEdBQXBFLEtBQTJFOXVELEtBQUcsa0JBQTlFLEVBQWtHLFVBQVFDLEVBQUVrcEQsT0FBVixLQUFvQm5wRCxLQUFHLGNBQUgsRUFBa0Isa0JBQWdCQyxFQUFFOHVELFdBQWxCLEtBQWdDL3VELEtBQUcsNEJBQW5DLENBQXRDLEVBQXdHLFVBQVFDLEVBQUVrcEQsT0FBVixLQUFvQm5wRCxLQUFHLFdBQXZCLEVBQW9DLElBQUcsYUFBV0MsRUFBRSx1Q0FBRixDQUFYLElBQ3JjLGFBQVdBLEVBQUUrdUQsT0FEd2IsSUFDL2EsYUFBVy91RCxFQUFFK29ELE9BRCtaLEVBQ3ZaaHBELEtBQUcsY0FBSCxDQUFrQixJQUFHLGFBQVdDLEVBQUUsY0FBRixDQUFkLEVBQWdDLElBQUdBLEVBQUUsMEJBQUYsQ0FBSCxFQUFpQyxRQUFPQSxFQUFFLDBCQUFGLENBQVAsR0FBc0MsS0FBSyxPQUFMO0FBQWFELGlCQUFHLFlBQUgsQ0FBZ0IsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGdCQUFILENBQW9CLE1BQU0sS0FBSyxRQUFMO0FBQWMsd0JBQVVDLEVBQUUrb0QsT0FBWixLQUFzQmhwRCxLQUFHLGFBQXpCLEVBQXdDLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyxhQUFILENBQWlCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxnQkFBSCxDQUFvQixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxXQUFILENBQWUsTUFBTTtBQUFRQSxpQkFBRyxhQUFILENBQXRWLENBQWpDLE1BQTZZQSxLQUFHLGFBQUg7QUFDOWUsZ0JBQVVDLEVBQUUrb0QsT0FBWixLQUFzQmhwRCxLQUFHLGFBQXpCLEVBQXdDLFdBQVNDLEVBQUU4b0QsUUFBWCxLQUFzQi9vRCxLQUFHLFlBQXpCLEVBQXVDLG9CQUFrQkMsRUFBRTRvRCxPQUFwQixLQUE4QjdvRCxLQUFHLHFCQUFqQyxFQUF3RCxhQUFXQyxFQUFFZ3ZELE1BQWIsS0FBc0JqdkQsS0FBRyxjQUF6QixFQUF5QyxrQkFBZ0JDLEVBQUVndkQsTUFBbEIsS0FBMkJqdkQsS0FBRyxtQkFBOUIsRUFBbUQsU0FBT0MsRUFBRWl2RCxjQUFULEtBQTBCbHZELEtBQUcscUJBQTdCLEVBQW9ELFNBQU9DLEVBQUVpdkQsY0FBVCxLQUEwQmx2RCxLQUFHLHFCQUE3QixFQUFvRCxTQUFPQyxFQUFFaXZELGNBQVQsS0FBMEJsdkQsS0FBRyxxQkFBN0IsRUFBb0QscUJBQW1CQyxFQUFFNG9ELE9BQXJCLEtBQStCN29ELEtBQUcsc0JBQWxDLEVBQTBELFNBQU9DLEVBQUVrdkQsZUFBVCxLQUEyQm52RCxLQUFHLHNCQUE5QixFQUFzRCxTQUMvZUMsRUFBRWt2RCxlQUQ2ZSxLQUMzZG52RCxLQUFHLHNCQUR3ZCxFQUNoYyxXQUFTQyxFQUFFa3ZELGVBQVgsS0FBNkJudkQsS0FBRyxzQkFBaEMsRUFBd0QsU0FBT0MsRUFBRWt2RCxlQUFULEtBQTJCbnZELEtBQUcsc0JBQTlCLEVBQXNELGFBQVdDLEVBQUVrdkQsZUFBYixLQUErQm52RCxLQUFHLHNCQUFsQyxFQUEwRCxhQUFXQyxFQUFFa3ZELGVBQWIsS0FBK0JudkQsS0FBRyxzQkFBbEMsRUFBMEQsSUFBRyxZQUFVQyxFQUFFZ3ZELE1BQVosSUFBb0IsV0FBU2h2RCxFQUFFZ3ZELE1BQS9CLElBQXVDLHFCQUFtQmh2RCxFQUFFNG9ELE9BQS9ELEVBQXVFN29ELEtBQUcsc0JBQUgsQ0FBMEIsY0FBWUMsRUFBRWd2RCxNQUFkLEtBQXVCanZELEtBQUcsd0JBQTFCLEVBQW9ELElBQUcsbUJBQWlCQyxFQUFFNG9ELE9BQW5CLElBQTRCLG9CQUFrQjVvRCxFQUFFNHRELFFBQWhELElBQTBELG9CQUMvZDV0RCxFQUFFNG9ELE9BRGdhLEVBQ3haN29ELEtBQUcscUJBQUgsQ0FBeUIsSUFBRyxzQkFBb0JDLEVBQUU0b0QsT0FBdEIsSUFBK0Isa0JBQWdCNW9ELEVBQUU0b0QsT0FBakQsSUFBMEQsa0JBQWdCNW9ELEVBQUU0b0QsT0FBL0UsRUFBdUY3b0QsS0FBRyx1QkFBSCxDQUEyQixJQUFHLFlBQVVDLEVBQUU0b0QsT0FBWixJQUFxQixZQUFVNW9ELEVBQUU0dEQsUUFBakMsSUFBMkMsa0JBQWdCNXRELEVBQUU0b0QsT0FBaEUsRUFBd0U3b0QsS0FBRyxtQkFBSCxDQUF1QixZQUFVQyxFQUFFNG9ELE9BQVosS0FBc0I3b0QsS0FBRyxhQUF6QixFQUF3QyxlQUFhQyxFQUFFNHRELFFBQWYsS0FBMEI3dEQsS0FBRyxnQkFBN0IsRUFBK0MsV0FBU0MsRUFBRW12RCxVQUFYLEtBQXdCcHZELEtBQUcsYUFBM0IsRUFBMEMsY0FBWUMsRUFBRTRvRCxPQUFkLEtBQXdCN29ELEtBQUcsZUFBM0IsRUFBNEMsY0FBWUMsRUFBRWd2RCxNQUFkLEtBQXVCanZELEtBQUcsa0JBQTFCLEVBQThDLGNBQVlDLEVBQUVndkQsTUFBZCxLQUF1Qmp2RCxLQUFHLDRCQUExQjtBQUNuZCxRQUFHLFlBQVVDLEVBQUVxckQsUUFBWixJQUFzQixZQUFVcnJELEVBQUUsY0FBRixDQUFuQyxFQUFxREQsS0FBRyxhQUFILENBQWlCLGFBQVdDLEVBQUVxckQsUUFBYixLQUF3QnRyRCxLQUFHLGNBQTNCLEVBQTJDLFNBQU9DLEVBQUVxckQsUUFBVCxLQUFvQnRyRCxLQUFHLFVBQXZCLEVBQW1DLFVBQVFDLEVBQUVxckQsUUFBVixLQUFxQnRyRCxLQUFHLFdBQXhCLEVBQXFDLG9CQUFrQkMsRUFBRXFyRCxRQUFwQixLQUErQnRyRCxLQUFHLHFCQUFsQyxFQUF5RCxJQUFHQyxFQUFFLHlCQUFGLEtBQThCLGVBQWFBLEVBQUUwcUQsUUFBaEQsRUFBeUQzcUQsS0FBRyxxQ0FBSCxDQUF5QyxlQUFhQyxFQUFFMnFELE9BQWYsS0FBeUI1cUQsS0FBRyxnQkFBNUIsRUFBOEMsWUFBVUMsRUFBRSxjQUFGLENBQVYsS0FBOEJELEtBQUcscUJBQWpDLEVBQXdELFVBQVFDLEVBQUUsY0FBRixDQUFSLEtBQTRCRCxLQUFHLDZCQUEvQjtBQUMxYixlQUFTQyxFQUFFLGNBQUYsQ0FBVCxLQUE2QkQsS0FBRyxxQkFBaEMsRUFBdUQsYUFBV0MsRUFBRSxjQUFGLENBQVgsS0FBK0JELEtBQUcsdUJBQWxDLEVBQTJELE9BQU0sK0NBQTZDQSxDQUE3QyxHQUErQyxjQUFyRDtBQUFvRTtBQUNuTCxJQUFJMG9ELFlBQVUsU0FBVkEsU0FBVSxDQUFTem9ELENBQVQsRUFBVztBQUFDLFFBQUlELENBQUosQ0FBTUEsSUFBRSxLQUFHcXZELDZCQUE2QnB2RCxDQUE3QixDQUFMLENBQXFDRCxLQUFHc3ZELG9CQUFvQnJ2RCxDQUFwQixDQUFILENBQTBCRCxLQUFHdXZELG1CQUFtQnR2RCxDQUFuQixDQUFILENBQXlCRCxLQUFHd3ZELGlCQUFpQnZ2RCxDQUFqQixDQUFILENBQXVCRCxLQUFHeXZELGtCQUFrQnh2RCxDQUFsQixDQUFILENBQXdCRCxLQUFHMHZELGtCQUFrQnp2RCxDQUFsQixDQUFILENBQXdCRCxLQUFHMnZELGdCQUFnQjF2RCxDQUFoQixDQUFILENBQXNCRCxLQUFHNHZELHdCQUF3QjN2RCxDQUF4QixDQUFILENBQThCRCxLQUFHNnZELHlCQUF5QjV2RCxDQUF6QixDQUFILENBQStCRCxLQUFHOHZELG1CQUFtQjd2RCxDQUFuQixDQUFILENBQXlCRCxLQUFHK3ZELGlCQUFpQjl2RCxDQUFqQixDQUFILENBQXVCRCxLQUFHZ3dELGlCQUFpQi92RCxDQUFqQixDQUFILENBQXVCRCxLQUFHaXdELGlCQUFpQmh3RCxDQUFqQixDQUFILENBQXVCRCxLQUFHa3dELGVBQWVqd0QsQ0FBZixDQUFILENBQXFCRCxLQUFHbXdELGdCQUFnQmx3RCxDQUFoQixDQUFILENBQXNCRCxLQUFHb3dELGtCQUFrQm53RCxDQUFsQixDQUFILENBQXdCRCxLQUFHcXdELGlCQUFpQnB3RCxDQUFqQixDQUFILENBQXVCRCxLQUFHc3dELGlCQUFpQnJ3RCxDQUFqQixDQUFILENBQXVCRCxLQUFHdXdELG9CQUFvQnR3RCxDQUFwQixDQUFIO0FBQ2hlRCxTQUFHd3dELHVCQUF1QnZ3RCxDQUF2QixDQUFILENBQTZCRCxLQUFHeXdELDBCQUEwQnh3RCxDQUExQixDQUFILENBQWdDRCxLQUFHMHdELGdCQUFnQnp3RCxDQUFoQixDQUFILENBQXNCRCxLQUFHMndELGNBQWMxd0QsQ0FBZCxDQUFILENBQW9CRCxLQUFHNHdELGdCQUFnQjN3RCxDQUFoQixDQUFILENBQXNCLENBQUNELEtBQUc2d0QsdUJBQXVCNXdELENBQXZCLENBQUosTUFBaUNELElBQUUsVUFBUUEsQ0FBM0MsRUFBOEMsT0FBTSxvQ0FBa0NBLENBQWxDLEdBQW9DLFFBQTFDO0FBQW1ELENBRC9OO0FBQUEsSUFDZ091dkQscUJBQW1CLFNBQW5CQSxrQkFBbUIsQ0FBU3R2RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBU0MsRUFBRTZ3RCxTQUFGLEtBQWMsbUJBQWlCN3dELEVBQUU2d0QsU0FBbkIsS0FBK0I5d0QsS0FBRyxxQ0FBbEMsR0FBeUUsY0FBWUMsRUFBRTZ3RCxTQUFkLEtBQTBCOXdELEtBQUcsZ0NBQTdCLENBQXpFLEVBQXdJLGFBQVdDLEVBQUU2d0QsU0FBYixLQUF5Qjl3RCxLQUFHLCtCQUE1QixDQUF4SSxFQUFxTSxhQUFXQyxFQUFFNndELFNBQWIsS0FBeUI5d0QsS0FDbmYsK0JBRDBkLENBQW5OLEVBQ3JPQyxFQUFFOHdELElBQUYsS0FBUy93RCxLQUFHLGdCQUFjQyxFQUFFOHdELElBQWhCLEdBQXFCLE9BQWpDLEVBQTBDOXdELEVBQUUrd0QsSUFBRixLQUFTaHhELEtBQUcsZ0JBQWNDLEVBQUUrd0QsSUFBaEIsR0FBcUIsT0FBakMsRUFBMEMsT0FBT2h4RCxDQUFQO0FBQVMsQ0FGaEk7QUFBQSxJQUVpSXN3RCxtQkFBaUIsU0FBakJBLGdCQUFpQixDQUFTcndELENBQVQsRUFBVztBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTLElBQUdDLEVBQUVneEQsTUFBRixJQUFVaHhELEVBQUVpeEQsSUFBZixFQUFvQjtBQUFDLFlBQUcsaUJBQWVqeEQsRUFBRWt4RCxTQUFqQixJQUE0QixlQUFhbHhELEVBQUVpeEQsSUFBOUMsRUFBbURseEQsS0FBRyxrQkFBSCxDQUFzQixJQUFHLGtCQUFnQkMsRUFBRWt4RCxTQUFsQixJQUE2QixnQkFBY2x4RCxFQUFFaXhELElBQWhELEVBQXFEbHhELEtBQUcsbUJBQUgsQ0FBdUIsSUFBRyxXQUFTQyxFQUFFa3hELFNBQVgsSUFBc0IsV0FBU2x4RCxFQUFFaXhELElBQXBDLEVBQXlDbHhELEtBQUcsWUFBSCxDQUFnQixjQUFZQyxFQUFFa3hELFNBQWQsS0FBMEJueEQsS0FBRyxlQUE3QixFQUE4QyxlQUFhQyxFQUFFaXhELElBQWYsS0FBc0JseEQsS0FBRyxnQkFBekIsRUFBMkMsVUFBUUMsRUFBRWl4RCxJQUFWLEtBQWlCbHhELEtBQ25mLFdBRGtlLEVBQ3JkLGVBQWFDLEVBQUVpeEQsSUFBZixLQUFzQmx4RCxLQUFHLGdCQUF6QixFQUEyQyxjQUFZQyxFQUFFaXhELElBQWQsS0FBcUJseEQsS0FBRyxlQUF4QixFQUF5QyxJQUFHLFdBQVNDLEVBQUVpeEQsSUFBWCxJQUFpQixlQUFhanhELEVBQUVpeEQsSUFBbkMsRUFBd0NseEQsS0FBRyxnQkFBSDtBQUFvQixTQUFHLFVBQVFDLEVBQUVzdEQsT0FBVixLQUFvQixDQUFDdHRELEVBQUUsVUFBRixDQUFELElBQWdCLENBQUNBLEVBQUUsWUFBRixDQUFqQixJQUFrQ0EsRUFBRWt4RCxTQUFwQyxLQUFnRG54RCxJQUFFLGlCQUFlQyxFQUFFa3hELFNBQWpCLElBQTRCLGVBQWFseEQsRUFBRWt4RCxTQUEzQyxJQUFzRCxpQkFBZWx4RCxFQUFFa3hELFNBQXZFLEdBQWlGbnhELElBQUUsbUJBQW5GLEdBQXVHQSxJQUFFLGNBQTNKLEdBQTJLQyxFQUFFbXhELEtBQUYsS0FBVXB4RCxLQUFHQyxFQUFFbXhELEtBQUYsR0FBUSxPQUFyQixDQUEzSyxFQUF5TW54RCxFQUFFLFVBQUYsTUFBZ0JELEtBQUdDLEVBQUUsVUFBRixJQUFjLE9BQWpDLENBQXpNLEVBQW1QQSxFQUFFb3hELE9BQUYsS0FBWXJ4RCxLQUFHQyxFQUFFb3hELE9BQUYsR0FBVSxPQUF6QixDQUFuUCxFQUFxUnB4RCxFQUFFLFlBQUYsTUFBa0JELEtBQUdDLEVBQUUsWUFBRixJQUFnQixPQUFyQyxDQUFyUixFQUN4TCxjQUFZQSxFQUFFcXhELFVBQWQsS0FBMkJ0eEQsS0FBRyxlQUE5QixDQUR3TCxFQUN6SSxzQkFBb0JDLEVBQUVxeEQsVUFBdEIsSUFBa0MsU0FBT3J4RCxFQUFFc3hELFFBRDBFLENBQUgsRUFDN0R2eEQsS0FBRyx1QkFBSCxDQUEyQixZQUFVQyxFQUFFLGNBQUYsQ0FBVixLQUE4QkQsS0FBRyw2QkFBakMsRUFBZ0UsZUFBYUMsRUFBRSxjQUFGLENBQWIsS0FBaUNELEtBQUcsZ0JBQXBDLEVBQXNELElBQUdDLEVBQUUsYUFBRixDQUFILEVBQW9CLFFBQU9BLEVBQUUsYUFBRixDQUFQLEdBQXlCLEtBQUssT0FBTDtBQUFhRCxpQkFBRyxvQkFBSCxDQUF3QixNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxvQkFBSCxDQUF3QixNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyxrQkFBSCxDQUFzQixNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRyxvQkFBSCxDQUF3QjtBQUM3ZSxhQUFLLEtBQUw7QUFBV0EsaUJBQUcsbUJBQUgsQ0FBdUIsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsb0JBQUgsQ0FBd0IsTUFBTSxLQUFLLFlBQUw7QUFBa0JBLGlCQUFHLDBCQUFILENBQThCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLHNCQUFILENBQTBCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyx3QkFBSCxDQUE0QixNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyxtQkFBSCxDQUF1QixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxvQkFBSCxDQUF3QixNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsMEJBQUgsQ0FBOEIsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsc0JBQUgsQ0FBMEIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcscUJBQUgsQ0FBeUIsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsb0JBQUgsQ0FBd0IsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQy9mLHVCQUQrZixDQUN2ZSxNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyxzQkFBSCxDQUEwQixNQUFNO0FBQVFBLGlCQUFHLHNCQUFILENBRjZLLENBRW5KLElBQUdDLEVBQUUsZ0JBQUYsQ0FBSCxFQUF1QixRQUFPQSxFQUFFLGdCQUFGLENBQVAsR0FBNEIsS0FBSyxLQUFMO0FBQVdELGlCQUFHLHFCQUFILENBQXlCLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLHVCQUFILENBQTJCLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLHVCQUFILENBQTJCLE1BQU07QUFBUUEsaUJBQUcseUJBQUgsQ0FBekssQ0FBc00sYUFBV0MsRUFBRXN0RCxPQUFiLElBQXNCLFlBQVV0dEQsRUFBRXV4RCxNQUFsQyxLQUEyQ3h4RCxLQUFHLHFCQUE5QyxFQUFxRSxhQUFXQyxFQUFFc3RELE9BQWIsSUFBc0IsYUFBV3R0RCxFQUFFdXhELE1BQW5DLEtBQTRDeHhELEtBQUcsc0JBQS9DLEVBQXVFLGFBQVdDLEVBQUVzdEQsT0FBYixJQUFzQixhQUNyZnR0RCxFQUFFdXhELE1BRDZkLEtBQ3BkeHhELEtBQUcsc0JBRGlkLEVBQ3piLGFBQVdDLEVBQUVzdEQsT0FBYixJQUFzQixtQkFBaUJ0dEQsRUFBRW1PLElBQXpDLEtBQWdEcE8sS0FBRyxzQ0FBbkQsRUFBMkYsYUFBV0MsRUFBRXN0RCxPQUFiLElBQXNCLFlBQVV0dEQsRUFBRW1PLElBQWxDLEtBQXlDcE8sS0FBRywrQkFBNUMsRUFBNkUsYUFBV0MsRUFBRXN0RCxPQUFiLElBQXNCLFlBQVV0dEQsRUFBRW1PLElBQWxDLEtBQXlDcE8sS0FBRywrQkFBNUMsRUFBNkUsT0FBT0EsQ0FBUDtBQUFTLENBUGpTO0FBQUEsSUFPa1M2d0QseUJBQXVCLFNBQXZCQSxzQkFBdUIsQ0FBUzV3RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU47QUFBQSxRQUFTb29ELElBQUUsRUFBWCxDQUFjLG9CQUFrQm5vRCxFQUFFdXRELFFBQXBCLEtBQStCdnRELEVBQUV3eEQsYUFBRixLQUFrQnJKLElBQUVub0QsRUFBRXd4RCxhQUF0QixHQUFxQ3h4RCxFQUFFeXhELFVBQUYsS0FBZXRKLElBQUVub0QsRUFBRXl4RCxVQUFuQixDQUFyQyxFQUFvRSxPQUFLdEosQ0FBTCxLQUFTcG9ELElBQUUsMERBQVgsQ0FBcEUsRUFDclgsT0FBS29vRCxDQUFMLEtBQVNwb0QsSUFBRSxpQ0FBWCxDQURxWCxFQUN2VSxPQUFLb29ELENBQUwsS0FBU3BvRCxJQUFFLCtDQUFYLENBRHVVLEVBQzNRLE9BQUtvb0QsQ0FBTCxLQUFTcG9ELElBQUUsbURBQVgsQ0FEMlEsRUFDM00sT0FBS29vRCxDQUFMLEtBQVNwb0QsSUFBRSxpREFBWCxDQUQyTSxFQUM3SSxPQUFLb29ELENBQUwsS0FBU3BvRCxJQUFFLDRFQUFYLENBRDZJLEVBQ3BELE9BQUtvb0QsQ0FBTCxLQUFTcG9ELElBQUUsdUNBQVgsQ0FEb0QsRUFDQSxRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLHVEQUFaLENBREEsRUFDcUUsUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSx5RUFBWixDQURyRSxFQUVyWCxRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLG1FQUFaLENBRnFYLEVBRXBTLFFBQU1vb0QsQ0FBTixLQUFVcG9ELElBQUUsOEZBQVosQ0FGb1MsRUFFeEwsUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSx5SEFBWixDQUZ3TCxFQUVqRCxRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLG9EQUFaLENBRmlELEVBRWlCLFFBQU1vb0QsQ0FBTixLQUFVcG9ELElBQUUsd0NBQVosQ0FGakIsRUFFdUUsUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSxnRUFBWixDQUZ2RSxFQUdyWCxRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLG1FQUFaLENBSHFYLEVBR3BTLFFBQU1vb0QsQ0FBTixLQUFVcG9ELElBQUUsZ0RBQVosQ0FIb1MsRUFHdE8sUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSw2REFBWixDQUhzTyxFQUczSixRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLDJGQUFaLENBSDJKLEVBR2xELFFBQU1vb0QsQ0FBTixLQUFVcG9ELElBQUUsZ0pBQVosQ0FIa0QsRUFHNEcsUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSxrR0FBWixDQUg1RyxFQUlyWCxRQUFNb29ELENBQU4sS0FBVXBvRCxJQUFFLHVHQUFaLENBSnFYLEVBSWhRLFFBQU1vb0QsQ0FBTixLQUFVcG9ELElBQUUsK0ZBQVosQ0FKZ1EsRUFJbkosUUFBTW9vRCxDQUFOLEtBQVVwb0QsSUFBRSw0REFBWixDQUpvSCxFQUl6QyxPQUFPQSxDQUFQO0FBQVMsQ0FYblQ7QUFBQSxJQVdvVHF3RCxtQkFBaUIsU0FBakJBLGdCQUFpQixDQUFTcHdELENBQVQsRUFBVztBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTLFlBQVVDLEVBQUVzckQsT0FBWixJQUFxQnRyRCxFQUFFMHhELFFBQXZCLEtBQWtDM3hELEtBQUcsZUFBYUMsRUFBRTB4RCxRQUFmLEdBQXdCLE9BQTdELEVBQXNFLGlCQUFlMXhELEVBQUUscUJBQUYsQ0FBZixLQUEwQ0QsS0FBRyxrQkFBN0MsRUFBaUUsbUJBQ3BlQyxFQUFFLHFCQUFGLENBRG9lLEtBQ3pjRCxLQUFHLG9CQURzYyxFQUNoYixhQUFXQyxFQUFFLHFCQUFGLENBQVgsS0FBc0NELEtBQUcsY0FBekMsRUFBeURDLEVBQUUyeEQsY0FBRixLQUFtQjV4RCxLQUFHLHNCQUF0QixFQUE4QyxPQUFPQSxDQUFQO0FBQVMsQ0Faaks7QUFBQSxJQVlrSzJ3RCxnQkFBYyxTQUFkQSxhQUFjLENBQVMxd0QsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVMsU0FBT0MsRUFBRSx3QkFBRixDQUFQLEtBQXFDRCxLQUFHLGtCQUF4QyxFQUE0RCxTQUFPQyxFQUFFLDZCQUFGLENBQVAsS0FBMENELEtBQUcsdUJBQTdDLEVBQXNFLFNBQU9DLEVBQUUsdUJBQUYsQ0FBUCxLQUFvQ0QsS0FBRyxpQkFBdkMsRUFBMEQsU0FBT0MsRUFBRSxvQkFBRixDQUFQLEtBQWlDRCxLQUFHLGNBQXBDLEVBQW9ELFNBQU9DLEVBQUUsd0JBQUYsQ0FBUCxLQUFxQ0QsS0FBRyxrQkFBeEMsRUFBNEQsT0FBT0EsQ0FBUDtBQUFTLENBWjFmO0FBQUEsSUFhSGt3RCxpQkFBZSxTQUFmQSxjQUFlLENBQVNqd0QsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVNDLEVBQUUwdEQsS0FBRixLQUFVLFNBQU8xdEQsRUFBRTR4RCxTQUFULEtBQXFCN3hELEtBQUcsZ0JBQXhCLEdBQTBDQyxFQUFFSSxNQUFGLEtBQVdMLEtBQUcsYUFBV0MsRUFBRUksTUFBYixHQUFvQixPQUFsQyxDQUExQyxFQUFxRkosRUFBRTRZLFFBQUYsS0FBYTdZLEtBQUcsZUFBYUMsRUFBRTRZLFFBQWYsR0FBd0IsT0FBeEMsQ0FBckYsRUFBc0k1WSxFQUFFNnhELE1BQUYsS0FBVzl4RCxLQUFHLGFBQVdDLEVBQUU2eEQsTUFBYixHQUFvQixPQUFsQyxDQUFoSixFQUE0TCxPQUFPOXhELENBQVA7QUFBUyxDQWJ0TztBQUFBLElBYXVPbXdELGtCQUFnQixTQUFoQkEsZUFBZ0IsQ0FBU2x3RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxVQUFRQyxFQUFFNG9ELE9BQVYsS0FBb0IsU0FBTzVvRCxFQUFFLGdCQUFGLENBQVAsS0FBNkJELEtBQUcsZ0JBQWhDLEdBQWtELFNBQU9DLEVBQUUsVUFBRixDQUFQLEtBQXVCRCxLQUFHLFVBQTFCLENBQWxELEVBQXdGLFNBQU9DLEVBQUUsVUFBRixDQUFQLEtBQXVCRCxLQUFHLFVBQTFCLENBQXhGLEVBQThILFNBQU9DLEVBQUUsVUFBRixDQUFQLEtBQXVCRCxLQUFHLFVBQTFCLENBQTlILEVBQW9LLFNBQU9DLEVBQUUsVUFBRixDQUFQLEtBQXVCRCxLQUFHLFVBQTFCLENBQXBLLEVBQTBNLFlBQzdlQyxFQUFFOHhELElBRDJlLEtBQ3BlL3hELEtBQUcsYUFEaWUsQ0FBMU0sRUFDeFEsU0FBT0MsRUFBRTh4RCxJQUFULEtBQWdCL3hELEtBQUcsVUFBbkIsQ0FEd1EsRUFDek8sU0FBT0MsRUFBRSxnQkFBRixDQUFQLEtBQTZCRCxLQUFHLGdCQUFoQyxDQUR5TyxFQUN2TCxTQUFPQyxFQUFFLGdCQUFGLENBQVAsS0FBNkJELEtBQUcsZ0JBQWhDLENBRHVMLEVBQ3JJLFNBQU9DLEVBQUUsaUJBQUYsQ0FBUCxLQUE4QkQsS0FBRyxpQkFBakMsQ0FEcUksRUFDakYsU0FBT0MsRUFBRSxpQkFBRixDQUFQLEtBQThCRCxLQUFHLGlCQUFqQyxDQURpRixFQUM3QixTQUFPQyxFQUFFLGFBQUYsQ0FBUCxLQUEwQkQsS0FBRyxhQUE3QixDQUQ2QixFQUNlLFNBQU9DLEVBQUUsa0JBQUYsQ0FBUCxLQUErQkQsS0FBRyx5Q0FBbEMsQ0FEbkMsRUFDaUgsT0FBT0EsQ0FBUDtBQUFTLENBZHRZO0FBQUEsSUFjdVlneUQsb0JBQWtCLFNBQWxCQSxpQkFBa0IsQ0FBUy94RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxJQUFHLHlCQUF1QkMsRUFBRThvRCxRQUF6QixJQUFtQzlvRCxFQUFFZ3lELFNBQXhDLEVBQWtELFFBQU9oeUQsRUFBRWd5RCxTQUFULEdBQW9CLEtBQUssVUFBTDtBQUFnQmp5RCxpQkFDbmdCLGVBRG1nQixDQUNuZixNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsZUFBSCxDQUFtQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxlQUFMO0FBQXFCQSxpQkFBRyxvQkFBSCxDQUF3QixNQUFNO0FBQVFBLGlCQUFHLGNBQUgsQ0FEOFQsQ0FDNVMsT0FBT0EsQ0FBUDtBQUFTLENBZjdMO0FBQUEsSUFlOExvd0Qsb0JBQWtCLFNBQWxCQSxpQkFBa0IsQ0FBU253RCxDQUFULEVBQVdELENBQVgsRUFBYTtBQUFDLFFBQUlvb0QsSUFBRSxFQUFOLENBQVMsSUFBRyxVQUFRbm9ELEVBQUV1dUQsT0FBVixJQUFtQixhQUFXdnVELEVBQUV1dUQsT0FBbkMsRUFBMkN2dUQsRUFBRWl5RCxRQUFGLEtBQWE5SixLQUFHLGVBQWFqbUMsVUFBVWxpQixFQUFFaXlELFFBQVosQ0FBYixHQUFtQyxPQUFuRCxFQUE0RCxPQUFPOUosQ0FBUDtBQUFTLENBZnZWO0FBQUEsSUFld1Y2SCxtQkFBaUIsU0FBakJBLGdCQUFpQixDQUFTaHdELENBQVQsRUFBVztBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTLElBQUcsZUFBYUMsRUFBRTZvRCxPQUFsQixFQUEwQjtBQUFDLGlCQUFPN29ELEVBQUVreUQsR0FBVCxLQUFlbnlELEtBQUcsbUJBQWxCLEVBQXVDLFFBQU1DLEVBQUVreUQsR0FBUixLQUFjbnlELEtBQUcscUJBQWpCLEVBQXdDQyxFQUFFbXlELEtBQUYsS0FBVXB5RCxLQUFHQyxFQUFFbXlELEtBQUYsR0FDeGYsWUFEMmUsRUFDN2RueUQsRUFBRW95RCxRQUFGLEtBQWFyeUQsS0FBRyxvQkFBaEIsRUFBc0MsSUFBRyxTQUFPQyxFQUFFMnJELFFBQVQsSUFBbUIsU0FBTzNyRCxFQUFFNHJELFNBQS9CLEVBQXlDN3JELEtBQUcsNkJBQUgsQ0FBaUMsU0FBT0MsRUFBRXF5RCxlQUFULEtBQTJCdHlELEtBQUcsc0JBQTlCLEVBQXNELFNBQU9DLEVBQUVzeUQsS0FBVCxLQUFpQnZ5RCxLQUFHLFlBQXBCLEVBQWtDLFNBQU9DLEVBQUV1eUQsVUFBVCxLQUFzQnh5RCxLQUFHLDBCQUF6QixFQUFxRCxlQUFhQyxFQUFFd3lELFNBQWYsS0FBMkJ6eUQsS0FBRywwQkFBOUI7QUFBMEQsc0JBQWVDLEVBQUU2b0QsT0FBakIsSUFBMEIsU0FBTzdvRCxFQUFFOHRELFdBQW5DLEtBQWlELFVBQVE5dEQsRUFBRXl5RCxRQUFWLEtBQXFCMXlELEtBQUcsV0FBeEIsR0FBcUMsWUFBVUMsRUFBRXl5RCxRQUFaLEtBQXVCMXlELEtBQUcsYUFBMUIsQ0FBckMsRUFBOEUsWUFBVUMsRUFBRXl5RCxRQUFaLEtBQXVCMXlELEtBQUcsYUFBMUIsQ0FBOUUsRUFBdUgsZUFDN2VDLEVBQUV5eUQsUUFEMmUsS0FDaGUxeUQsS0FBRyxnQkFENmQsQ0FBeEssRUFDbFMsaUJBQWVDLEVBQUU2b0QsT0FBakIsSUFBMEIsU0FBTzdvRCxFQUFFOHRELFdBQW5DLEtBQWlELFVBQVE5dEQsRUFBRTB5RCxRQUFWLEtBQXFCM3lELEtBQUcsa0JBQXhCLEdBQTRDLFVBQVFDLEVBQUUweUQsUUFBVixLQUFxQjN5RCxLQUFHLGVBQXhCLENBQTVDLEVBQXFGLFlBQVVDLEVBQUUweUQsUUFBWixLQUF1QjN5RCxLQUFHLG9CQUExQixDQUF0SSxFQUF1TCxhQUFXQyxFQUFFMnlELFVBQWIsS0FBMEI1eUQsS0FBRywyQkFBN0IsRUFBMEQsYUFBV0MsRUFBRTJ5RCxVQUFiLEtBQTBCNXlELEtBQUcsMkJBQTdCLEVBQTBELFlBQVVDLEVBQUUyeUQsVUFBWixLQUF5QjV5RCxLQUFHLCtCQUE1QixFQUE2RCxZQUFVQyxFQUFFMnlELFVBQVosS0FBeUI1eUQsS0FBRywwQkFBNUIsRUFBd0QsWUFBVUMsRUFBRTJ5RCxVQUFaLEtBQXlCNXlELEtBQUcsK0JBQTVCO0FBQy9iLGtCQUFZQyxFQUFFMnlELFVBQWQsS0FBMkI1eUQsS0FBRyxpQ0FBOUIsRUFBaUUsT0FBT0EsQ0FBUDtBQUFTLENBbEIzRTtBQUFBLElBa0I0RWd3RCxtQkFBaUIsU0FBakJBLGdCQUFpQixDQUFTL3ZELENBQVQsRUFBVztBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTLGtCQUFnQkMsRUFBRTRvRCxPQUFsQixLQUE0QjdvRCxLQUFHQyxFQUFFNHlELFFBQUYsR0FBVyxPQUExQyxFQUFtRCxhQUFXNXlELEVBQUU0b0QsT0FBYixLQUF1QjdvRCxLQUFHQyxFQUFFNnlELE9BQUYsR0FBVSxPQUFwQyxFQUE2QyxJQUFHN3lELEVBQUU2ckQsT0FBTCxFQUFhLFFBQU83ckQsRUFBRTZyRCxPQUFULEdBQWtCLEtBQUssbUJBQUw7QUFBeUI5ckQsaUJBQUcsY0FBSCxDQUFrQixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsa0JBQUgsQ0FBc0IsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsWUFBSCxDQUFnQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUM1ZixhQUQ0ZixDQUM5ZSxNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcseUJBQUgsQ0FBNkIsTUFBTSxLQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxnQkFBSCxDQUFvQixNQUFNLEtBQUssbUJBQUw7QUFBeUJBLGlCQUFHLHdCQUFILENBQTRCLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRyxpQkFBSCxDQUFxQixNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsZ0JBQUgsQ0FBb0IsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsYUFBSCxDQUFpQixNQUFNLEtBQUssZUFBTDtBQUFxQkEsaUJBQUcsb0JBQUgsQ0FBd0IsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGdCQUFILENBQW9CLE1BQU0sS0FBSywwQkFBTDtBQUFnQ0EsaUJBQ3JnQiwrQkFEcWdCLENBQ3JlLE1BQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcsc0JBQUgsQ0FBMEIsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLGVBQUgsQ0FBbUIsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsYUFBSCxDQUFpQixNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxXQUFILENBQWUsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLGdCQUFILENBQW9CLE1BQU07QUFBUUEsaUJBQUcsc0JBQUgsQ0FGaEMsQ0FFMEQsY0FBWUMsRUFBRTRvRCxPQUFkLEtBQXdCNW9ELEVBQUU4eUQsZ0JBQUYsS0FBcUIveUQsS0FBRyx1QkFBcUJDLEVBQUU4eUQsZ0JBQXZCLEdBQXdDLE9BQWhFLEdBQXlFLFNBQU85eUQsRUFBRSt5RCxhQUFULEtBQXlCaHpELEtBQUcsMEJBQTVCLENBQWpHLEVBQTBKLE9BQU9BLENBQVA7QUFBUyxDQXBCNWI7QUFBQSxJQW9CNmIrdkQsbUJBQWlCLFNBQWpCQSxnQkFBaUIsQ0FBUzl2RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxJQUFHLGtCQUN6ZUMsRUFBRTR0RCxRQURvZSxFQUMzZDtBQUFDLFlBQUc1dEQsRUFBRWdPLE9BQUwsRUFBYTtBQUFDLGdCQUFJbTZDLElBQUVub0QsRUFBRWdPLE9BQVIsQ0FBZ0IsUUFBT202QyxDQUFQLEdBQVUsS0FBSyxNQUFMO0FBQVlBLHdCQUFFLE1BQUYsQ0FBUyxNQUFNLEtBQUssS0FBTDtBQUFXQSx3QkFBRSxLQUFGLENBQVEsTUFBTSxLQUFLLEtBQUw7QUFBV0Esd0JBQUUsS0FBRixDQUFRLE1BQU0sS0FBSyxRQUFMO0FBQWNBLHdCQUFFLFFBQUYsQ0FBVyxNQUFNLEtBQUssUUFBTDtBQUFjQSx3QkFBRSxRQUFGLENBQVcsTUFBTSxLQUFLLE9BQUw7QUFBYUEsd0JBQUUsT0FBRixDQUFVLE1BQU0sS0FBSyxRQUFMO0FBQWNBLHdCQUFFLFFBQUYsQ0FBVyxNQUFNLEtBQUssUUFBTDtBQUFjQSx3QkFBRSxRQUFGLENBQS9OLENBQTBPcG9ELEtBQUcsY0FBWW9vRCxDQUFaLEdBQWMsT0FBakI7QUFBeUIsYUFBR25vRCxFQUFFZ3pELFFBQUwsRUFBYztBQUFDN0ssZ0JBQUVub0QsRUFBRWd6RCxRQUFKLENBQWEsUUFBTzdLLENBQVAsR0FBVSxLQUFLLE1BQUw7QUFBWUEsd0JBQUUsTUFBRixDQUFTLE1BQU0sS0FBSyxLQUFMO0FBQVdBLHdCQUFFLEtBQUYsQ0FBUSxNQUFNLEtBQUssS0FBTDtBQUFXQSx3QkFBRSxLQUFGLENBQVEsTUFBTSxLQUFLLFFBQUw7QUFBY0Esd0JBQUUsUUFBRixDQUFXLE1BQU0sS0FBSyxRQUFMO0FBQWNBLHdCQUFFLFFBQUYsQ0FBVyxNQUFNLEtBQUssT0FBTDtBQUFhQSx3QkFBRSxPQUFGO0FBQ3ZlLDBCQUFNLEtBQUssUUFBTDtBQUFjQSx3QkFBRSxRQUFGLENBQVcsTUFBTSxLQUFLLFFBQUw7QUFBY0Esd0JBQUUsUUFBRixDQURrUixDQUN2UXBvRCxLQUFHLGNBQVlvb0QsQ0FBWixHQUFjLE9BQWpCO0FBQXlCO0FBQUMsT0FBRXZpQixPQUFGLEtBQVksU0FBTzVsQyxFQUFFNGxDLE9BQVQsS0FBbUI3bEMsS0FBRyxtQkFBdEIsR0FBMkMsU0FBT0MsRUFBRTRsQyxPQUFULEtBQW1CN2xDLEtBQUcsbUJBQXRCLENBQXZELEVBQW1HLE9BQU9BLENBQVA7QUFBUyxDQXRCck07QUFBQSxJQXNCc002dkQsMkJBQXlCLFNBQXpCQSx3QkFBeUIsQ0FBUzV2RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBU0MsRUFBRSxTQUFGLE1BQWVELEtBQUcsa0JBQWdCQyxFQUFFLFNBQUYsQ0FBaEIsR0FBNkIsT0FBL0MsRUFBd0QsSUFBRyxPQUFLQSxFQUFFaXpELFVBQVYsRUFBcUIsSUFBR2p6RCxFQUFFaXpELFVBQUYsR0FBYSxLQUFHanpELEVBQUVpekQsVUFBbEIsRUFBNkIsSUFBRWp6RCxFQUFFaXpELFVBQUYsQ0FBYTd5RCxNQUEvQyxFQUFzRDtBQUFDLFlBQUkrbkQsSUFBRW5vRCxFQUFFaXpELFVBQUYsQ0FBYTd5RCxNQUFiLEdBQW9CLENBQTFCO0FBQUEsWUFBNEJpb0QsSUFBRSxJQUFFRixDQUFGLEdBQUlub0QsRUFBRWl6RCxVQUFGLENBQWFsVCxTQUFiLENBQXVCLENBQXZCLEVBQXlCb0ksQ0FBekIsQ0FBSixHQUFnQyxFQUE5RCxDQUFpRSxLQUFJdm9ELElBQUUsQ0FBTixFQUFRQSxJQUFFZ2hCLEtBQUtJLEtBQUwsQ0FBV2hoQixFQUFFaXpELFVBQUYsQ0FBYTd5RCxNQUFiLEdBQW9CLENBQS9CLENBQVYsRUFBNENSLEdBQTVDO0FBQWdEeW9ELGdCQUFFLEtBQUdGLENBQUgsSUFBTSxLQUFHdm9ELENBQVQsR0FDOWV5b0QsSUFBRXJvRCxFQUFFaXpELFVBQUYsQ0FBYWxULFNBQWIsQ0FBdUJvSSxJQUFFLElBQUV2b0QsQ0FBM0IsRUFBNkJ1b0QsSUFBRSxJQUFFdm9ELENBQUosR0FBTSxDQUFuQyxDQUQ0ZSxHQUN0Y3lvRCxLQUFHLE1BQUlyb0QsRUFBRWl6RCxVQUFGLENBQWFsVCxTQUFiLENBQXVCb0ksSUFBRSxJQUFFdm9ELENBQTNCLEVBQTZCdW9ELElBQUUsSUFBRXZvRCxDQUFKLEdBQU0sQ0FBbkMsQ0FBUCxDQURvYztBQUFoRCxTQUN0V0csS0FBRyxpQkFBZXNvRCxDQUFmLEdBQWlCLE9BQXBCO0FBQTRCLEtBRGtOLE1BQzdNdG9ELEtBQUcsZ0JBQWNDLEVBQUVpekQsVUFBaEIsR0FBMkIsT0FBOUIsQ0FBc0MsT0FBS2p6RCxFQUFFaXpELFVBQVAsS0FBb0JsekQsS0FBRyxpQkFBZUMsRUFBRWl6RCxVQUFqQixHQUE0QixPQUFuRCxFQUE0RCxPQUFPbHpELENBQVA7QUFBUyxDQXZCL047QUFBQSxJQXVCZ084dkQscUJBQW1CLFNBQW5CQSxrQkFBbUIsQ0FBUzd2RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBU0MsRUFBRWt6RCxRQUFGLEtBQWEsYUFBV2x6RCxFQUFFa3pELFFBQWIsR0FBc0JuekQsS0FBRywyQkFBekIsR0FBcUQsY0FBWUMsRUFBRWt6RCxRQUFkLEtBQXlCbnpELEtBQUcsNEJBQTVCLENBQWxFLEVBQTZIQyxFQUFFLGdCQUFGLE1BQXNCRCxLQUFHLG1CQUFpQkMsRUFBRSxnQkFBRixDQUFqQixHQUFxQyxPQUE5RCxFQUF1RSxJQUFHQSxFQUFFLFlBQUYsQ0FBSCxFQUFtQjtBQUFDLFlBQUltb0QsSUFBRW5vRCxFQUFFLFlBQUYsQ0FBTjtBQUMvZCxnQkFBT21vRCxDQUFQLEdBQVUsS0FBSyxZQUFMO0FBQWtCQSxvQkFBRSxZQUFGLENBQWUsTUFBTSxLQUFLLFlBQUw7QUFBa0JBLG9CQUFFLFlBQUYsQ0FBZSxNQUFNLEtBQUssV0FBTDtBQUFpQkEsb0JBQUUsV0FBRixDQUFjLE1BQU0sS0FBSyxpQkFBTDtBQUF1QkEsb0JBQUUsaUJBQUYsQ0FBcEosQ0FBd0twb0QsS0FBRyxVQUFRb29ELENBQVIsR0FBVSxPQUFiO0FBQXFCLFNBQUdub0QsRUFBRSxlQUFGLENBQUgsRUFBc0I7QUFBQ21vRCxZQUFFbm9ELEVBQUUsZUFBRixDQUFGLENBQXFCLFFBQU9tb0QsQ0FBUCxHQUFVLEtBQUssVUFBTDtBQUFnQkEsb0JBQUUsVUFBRixDQUFhLE1BQU0sS0FBSyxTQUFMO0FBQWVBLG9CQUFFLFNBQUYsQ0FBWSxNQUFNLEtBQUssT0FBTDtBQUFhQSxvQkFBRSxPQUFGLENBQVUsTUFBTSxLQUFLLGVBQUw7QUFBcUJBLG9CQUFFLGVBQUYsQ0FBa0IsTUFBTSxLQUFLLE1BQUw7QUFBWUEsb0JBQUUsTUFBRixDQUFwSyxDQUE2S3BvRCxLQUFHLFVBQVFvb0QsQ0FBUixHQUFVLE9BQWI7QUFBcUIsT0FBRSxhQUFGLE1BQW1CcG9ELEtBQUcsWUFBVUMsRUFBRSxhQUFGLENBQVYsR0FBMkIsT0FBakQsRUFBMERBLEVBQUUsYUFBRixNQUN4ZUQsS0FBRyxxQkFBbUJDLEVBQUUsYUFBRixDQUFuQixHQUFvQyxPQURpYyxFQUN4YixPQUFPRCxDQUFQO0FBQVMsQ0F6QnZEO0FBQUEsSUF5QndEd3ZELG1CQUFpQixTQUFqQkEsZ0JBQWlCLENBQVN2dkQsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVMsSUFBR0MsRUFBRWtyRCxPQUFMLEVBQWE7QUFBQyxZQUFJL0MsSUFBRSxFQUFOO0FBQUEsWUFBU3BvRCxJQUFFLENBQUMsaUJBQWVDLEVBQUVrcUQsSUFBakIsSUFBdUIsaUJBQWVscUQsRUFBRWtxRCxJQUF4QyxJQUE4QyxVQUFRbHFELEVBQUVrcUQsSUFBeEQsSUFBOEQsYUFBV2xxRCxFQUFFa3FELElBQTVFLEtBQW1GLGdCQUFjbHFELEVBQUU0b0QsT0FBbkcsR0FBMkc3b0QsSUFBRSxlQUE3RyxHQUE2SEEsSUFBRSxXQUExSSxDQUFzSixZQUFVQyxFQUFFa3JELE9BQVosS0FBc0IvQyxLQUFHLGFBQXpCLEVBQXdDLGFBQVdub0QsRUFBRWtyRCxPQUFiLEtBQXVCL0MsS0FBRyxlQUExQixFQUEyQyxtQkFBaUJub0QsRUFBRWtyRCxPQUFuQixLQUE2Qi9DLEtBQUcscUJBQWhDLEVBQXVELGNBQVlub0QsRUFBRWtyRCxPQUFkLEtBQXdCL0MsS0FBRyxnQkFBM0IsRUFBNkMsYUFBV25vRCxFQUFFa3JELE9BQWIsS0FBdUIvQyxLQUFHLGVBQTFCLEVBQTJDLFdBQVNub0QsRUFBRWtyRCxPQUFYLEtBQ3RlL0MsS0FBRyxhQURtZSxFQUNwZCxhQUFXbm9ELEVBQUVrckQsT0FBYixLQUF1Qi9DLEtBQUcsZUFBMUIsRUFBMkMsWUFBVW5vRCxFQUFFa3JELE9BQVosS0FBc0IvQyxLQUFHLGNBQXpCLEVBQXlDLGFBQVdub0QsRUFBRWtyRCxPQUFiLEtBQXVCL0MsS0FBRyxlQUExQixFQUEyQyxZQUFVbm9ELEVBQUVrckQsT0FBWixLQUFzQi9DLEtBQUcsY0FBekIsRUFBeUMsWUFBVW5vRCxFQUFFa3JELE9BQVosS0FBc0IvQyxLQUFHLGNBQXpCLEVBQXlDLGFBQVdub0QsRUFBRWtyRCxPQUFiLEtBQXVCL0MsS0FBRyxlQUExQixFQUEyQyxjQUFZbm9ELEVBQUVrckQsT0FBZCxLQUF3Qi9DLEtBQUcsZ0JBQTNCLEVBQTZDLFVBQVFub0QsRUFBRWtyRCxPQUFWLEtBQW9CL0MsS0FBRyxZQUF2QixFQUFxQyxZQUFVbm9ELEVBQUVrckQsT0FBWixLQUFzQi9DLEtBQUcsY0FBekIsRUFBeUMsYUFBV25vRCxFQUFFa3JELE9BQWIsS0FBdUIvQyxLQUFHLGVBQTFCLEVBQTJDLGNBQVlub0QsRUFBRWtyRCxPQUFkLEtBQXdCL0MsS0FBRyxnQkFBM0IsRUFBNkMsV0FBU25vRCxFQUFFa3JELE9BQVgsS0FDamUvQyxLQUFHLGFBRDhkLEVBQy9jLGdCQUFjbm9ELEVBQUVrckQsT0FBaEIsS0FBMEIvQyxLQUFHLGtCQUE3QixFQUFpRCxhQUFXbm9ELEVBQUVrckQsT0FBYixLQUF1Qi9DLEtBQUcsZUFBMUIsRUFBMkMsY0FBWW5vRCxFQUFFa3JELE9BQWQsS0FBd0IvQyxLQUFHLGdCQUEzQixFQUE2QyxVQUFRbm9ELEVBQUVrckQsT0FBVixLQUFvQi9DLEtBQUcsWUFBdkIsRUFBcUMsZUFBYW5vRCxFQUFFa3JELE9BQWYsS0FBeUIvQyxLQUFHLGlCQUE1QixFQUErQyxXQUFTbm9ELEVBQUVrckQsT0FBWCxLQUFxQi9DLEtBQUcsYUFBeEIsRUFBdUMsbUJBQWlCbm9ELEVBQUVrckQsT0FBbkIsS0FBNkIvQyxLQUFHLG9CQUFoQyxFQUFzRCxhQUFXbm9ELEVBQUVrckQsT0FBYixLQUF1Qi9DLEtBQUcsZUFBMUIsRUFBMkMsZUFBYW5vRCxFQUFFa3JELE9BQWYsS0FBeUIvQyxLQUFHLGlCQUE1QixFQUErQyxZQUFVbm9ELEVBQUVrckQsT0FBWixLQUFzQi9DLEtBQUcsY0FBekIsRUFBeUMsbUJBQWlCbm9ELEVBQUVrckQsT0FBbkIsS0FBNkIvQyxLQUFHLHFCQUFoQztBQUM1YyxjQUFJQSxDQUFKLEtBQVFBLElBQUVub0QsRUFBRWtyRCxPQUFGLEdBQVUsT0FBcEIsRUFBNkJuckQsS0FBR29vRCxDQUFIO0FBQUssWUFBT3BvRCxDQUFQO0FBQVMsQ0E1QjVDO0FBQUEsSUE0QjZDeXZELG9CQUFrQixTQUFsQkEsaUJBQWtCLENBQVN4dkQsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVNDLEVBQUUrdUQsT0FBRixHQUFVLEtBQVYsQ0FBZ0IsU0FBTy91RCxFQUFFLGFBQUYsQ0FBUCxLQUEwQkQsS0FBRyxnQ0FBN0IsRUFBK0QsU0FBT0MsRUFBRSxjQUFGLENBQVAsS0FBMkJELEtBQUcsaUNBQTlCLEVBQWlFLFNBQU9DLEVBQUUsWUFBRixDQUFQLEtBQXlCRCxLQUFHLCtCQUE1QixFQUE2REMsRUFBRW16RCxXQUFGLEtBQWdCcHpELEtBQUcsa0JBQWdCQyxFQUFFbXpELFdBQWxCLEdBQThCLE9BQWpELEVBQTBEbnpELEVBQUVvekQsSUFBRixLQUFTcnpELEtBQUcsa0JBQWdCQyxFQUFFb3pELElBQWxCLEdBQXVCLE9BQW5DLEVBQTRDcHpELEVBQUUscUJBQUYsTUFBMkJELEtBQUcsa0JBQWdCQyxFQUFFLHFCQUFGLENBQWhCLEdBQXlDLE9BQXZFLEVBQWdGLFNBQU9BLEVBQUVxekQsU0FBVCxLQUFxQnR6RCxLQUFHLHdCQUF4QjtBQUN0ZCxZQUFNQyxFQUFFcXpELFNBQVIsS0FBb0J0ekQsS0FBRyw0QkFBdkIsRUFBcURDLEVBQUVzekQsSUFBRixLQUFTdnpELEtBQUcsV0FBU0MsRUFBRXN6RCxJQUFYLEdBQWdCLE9BQTVCLEVBQXFDLFNBQU90ekQsRUFBRXV6RCxZQUFULEtBQXdCeHpELEtBQUcsbUNBQTNCLEVBQWdFLFNBQU9DLEVBQUV3ekQsS0FBVCxLQUFpQnp6RCxLQUFHLCtCQUFwQixFQUFxREMsRUFBRXl6RCxLQUFGLEtBQVUxekQsS0FBRyw4QkFBNEJDLEVBQUV5ekQsS0FBOUIsR0FBb0MsU0FBakQsRUFBNEQsSUFBRyxhQUFXenpELEVBQUUrb0QsT0FBYixJQUFzQixhQUFXL29ELEVBQUUrdUQsT0FBdEMsRUFBOEMsVUFBUS91RCxFQUFFMHpELFNBQVYsS0FBc0IzekQsS0FBRyx5QkFBekIsR0FBb0QsU0FBT0MsRUFBRTB6RCxTQUFULEtBQXFCM3pELEtBQUcsc0NBQXhCLENBQXBELEVBQW9ILGlCQUFlQyxFQUFFMHpELFNBQWpCLEtBQTZCM3pELEtBQUcsa0NBQWhDLENBQXBILEVBQXdMLGdCQUNqZkMsRUFBRTB6RCxTQUQrZSxLQUNuZTN6RCxLQUFHLCtCQURnZSxDQUF4TCxFQUN2USxXQUFTQyxFQUFFNHRELFFBQVgsS0FBc0I3dEQsS0FBRyxlQUFILEVBQW1CQyxFQUFFLGVBQUYsTUFBcUJELEtBQUcsY0FBWUMsRUFBRSxlQUFGLENBQVosR0FBK0IsT0FBdkQsQ0FBbkIsRUFBbUZBLEVBQUUsZUFBRixNQUFxQkQsS0FBRyxrQ0FBZ0NDLEVBQUUsZUFBRixDQUFoQyxHQUFtRCxPQUEzRSxDQUFuRixFQUF1S0EsRUFBRSxnQkFBRixNQUFzQkQsS0FBRywyQ0FBeUNDLEVBQUUsZ0JBQUYsQ0FBekMsR0FBNkQsT0FBdEYsQ0FBN0wsQ0FEdVEsRUFDc0IsU0FBT0EsRUFBRTJ6RCxPQUFULEtBQW1CNXpELEtBQUcsNEJBQXRCLENBRHRCLENBQzBFQSxLQUFHNnpELFlBQVk1ekQsQ0FBWixDQUFILENBQWtCLElBQUcsV0FBU0EsRUFBRTB0RCxLQUFYLElBQWtCLG9CQUFrQjF0RCxFQUFFNG9ELE9BQXRDLElBQStDLFNBQU81b0QsRUFBRTZ6RCxLQUEzRCxFQUFpRWtELFdBQVMvMkQsRUFBRTB6QyxRQUFYLEVBQW9CLE1BQUlxakIsUUFBSixJQUN6ZSxlQUFhQSxRQUFiLElBQXVCLFFBQU1BLFFBRDRjLEtBQ2hjaDNELEtBQUcseUJBQXVCZzNELFFBQXZCLEdBQWdDLE9BRDZaLENBQXBCLEVBQ2hZLFNBQU8vMkQsRUFBRTh6RCxRQUFULEtBQW9CL3pELEtBQUcsd0JBQXZCLENBRGdZLEVBQy9VLFFBQU1DLEVBQUU4ekQsUUFBUixLQUFtQi96RCxLQUFHLDJCQUF0QixDQUQrVSxFQUM1UixRQUFNQyxFQUFFK3pELGFBQVIsS0FBd0JoMEQsS0FBRyxnQ0FBM0IsQ0FENFIsRUFDL04sU0FBT0MsRUFBRSt6RCxhQUFULEtBQXlCaDBELEtBQUcsNkJBQTVCLENBRCtOLEVBQ3BLLFNBQU9DLEVBQUUyekQsT0FBVCxLQUFtQjV6RCxLQUFHLHVCQUF0QixDQURvSyxFQUNySCxRQUFNQyxFQUFFMnpELE9BQVIsS0FBa0I1ekQsS0FBRyxrQkFBckIsQ0FEcUgsRUFDNUUsUUFBTUMsRUFBRXFzRCxPQUFSLEtBQWtCdHNELEtBQUcsa0JBQXJCLENBRDRFLEVBQ25DLFFBQU1DLEVBQUVxc0QsT0FBUixLQUFrQnRzRCxLQUFHLHVCQUFyQixDQURtQyxFQUNXLFNBQU9DLEVBQUVvdkMsR0FBVCxLQUFlcnZDLEtBQUcsa0JBQWxCLENBRFgsRUFFdGQsUUFBTUMsRUFBRW92QyxHQUFSLEtBQWNydkMsS0FBRyxxQkFBakIsQ0FGc2QsRUFFOWEsU0FBT0MsRUFBRTZ2QyxJQUFULEtBQWdCOXZDLEtBQUcseUJBQW5CLENBRjhhLEVBRWhZLFFBQU1DLEVBQUU2dkMsSUFBUixLQUFlOXZDLEtBQUcsNkJBQWxCLENBRmdZLEVBRS9VLFNBQU9DLEVBQUVxc0QsT0FBVCxLQUFtQnRzRCxLQUFHLHVCQUF0QixDQUYrVSxFQUVoUyxRQUFNQyxFQUFFcXNELE9BQVIsS0FBa0J0c0QsS0FBRywwQkFBckIsQ0FGZ1MsRUFFL08sU0FBT0MsRUFBRSxhQUFGLENBQVAsS0FBMEJELEtBQUcsa0JBQTdCLENBRitPLENBRTlMLElBQUdDLEVBQUUsd0JBQUYsQ0FBSCxFQUErQjtBQUFDLFlBQUltb0QsSUFBRW5vRCxFQUFFLHdCQUFGLENBQU4sQ0FBa0MsUUFBT21vRCxDQUFQLEdBQVUsS0FBSyxPQUFMO0FBQWFBLG9CQUFFLE9BQUYsQ0FBVSxNQUFNLEtBQUssS0FBTDtBQUFXQSxvQkFBRSxLQUFGLENBQVEsTUFBTSxLQUFLLE9BQUw7QUFBYUEsb0JBQUUsT0FBRixDQUFVLE1BQU0sS0FBSyxNQUFMO0FBQVlBLG9CQUFFLE1BQUYsQ0FBUyxNQUFNLEtBQUssUUFBTDtBQUFjQSxvQkFBRSxRQUFGLENBQVcsTUFBTSxLQUFLLE9BQUw7QUFBYUEsb0JBQzFmLE9BRDBmLENBQXBLLENBQzlVcG9ELEtBQUcsc0JBQW9Cb29ELENBQXBCLEdBQXNCLE9BQXpCO0FBQWlDLHFCQUFjbm9ELEVBQUU0dEQsUUFBaEIsS0FBMkI1dEQsRUFBRSwyQkFBRixNQUFpQ0QsS0FBRyxzQkFBb0JDLEVBQUUsMkJBQUYsQ0FBcEIsR0FBbUQsT0FBdkYsR0FBZ0dBLEVBQUUsd0JBQUYsTUFBOEJELEtBQUcsYUFBV0MsRUFBRSx3QkFBRixDQUFYLEdBQXVDLE9BQXhFLENBQWhHLEVBQWlMQSxFQUFFLHdCQUFGLE1BQThCRCxLQUFHLGFBQVdDLEVBQUUsd0JBQUYsQ0FBWCxHQUF1QyxTQUF4RSxDQUFqTCxFQUFvUUEsRUFBRSx1QkFBRixNQUE2QkQsS0FBRyxZQUFVQyxFQUFFLHVCQUFGLENBQVYsR0FBcUMsVUFBckUsQ0FBL1IsRUFBaVgsSUFBR0EsRUFBRSxzQkFBRixDQUFILEVBQTZCO0FBQUNtb0QsWUFBRW5vRCxFQUFFLHNCQUFGLENBQUYsQ0FBNEIsUUFBT21vRCxDQUFQLEdBQVUsS0FBSyxPQUFMO0FBQWFBLG9CQUFFLE9BQUY7QUFDM2Usc0JBQU0sS0FBSyxLQUFMO0FBQVdBLG9CQUFFLEtBQUYsQ0FBUSxNQUFNLEtBQUssT0FBTDtBQUFhQSxvQkFBRSxPQUFGLENBQVUsTUFBTSxLQUFLLE1BQUw7QUFBWUEsb0JBQUUsTUFBRixDQUFTLE1BQU0sS0FBSyxRQUFMO0FBQWNBLG9CQUFFLFFBQUYsQ0FBVyxNQUFNLEtBQUssT0FBTDtBQUFhQSxvQkFBRSxPQUFGLENBRGlWLENBQ3ZVcG9ELEtBQUcsc0JBQW9Cb29ELENBQXBCLEdBQXNCLE9BQXpCO0FBQWlDLHFCQUFjbm9ELEVBQUU0dEQsUUFBaEIsS0FBMkI1dEQsRUFBRSx5QkFBRixNQUErQkQsS0FBRyxzQkFBb0JDLEVBQUUseUJBQUYsQ0FBcEIsR0FBaUQsT0FBbkYsR0FBNEZBLEVBQUUsc0JBQUYsTUFBNEJELEtBQUcsYUFBV0MsRUFBRSxzQkFBRixDQUFYLEdBQXFDLFNBQXBFLENBQTVGLEVBQTJLQSxFQUFFLHFCQUFGLE1BQTJCRCxLQUFHLFlBQVVDLEVBQUUscUJBQUYsQ0FBVixHQUFtQyxVQUFqRSxDQUEzSyxFQUF3UEEsRUFBRSxzQkFBRixNQUE0QkQsS0FBRyxhQUFXQyxFQUFFLHNCQUFGLENBQVgsR0FDcGUsT0FEcWMsQ0FBblIsRUFDeEssT0FBT0QsQ0FBUDtBQUFTLENBbkNwQjtBQUFBLElBbUNxQjB2RCxvQkFBa0IsU0FBbEJBLGlCQUFrQixDQUFTenZELENBQVQsRUFBVztBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTLElBQUcsa0JBQWdCQyxFQUFFd3FELFNBQXJCLEVBQStCO0FBQUMsWUFBSXJDLElBQUVub0QsRUFBRSxvQkFBRixDQUFOLENBQThCLGVBQWFtb0QsQ0FBYixJQUFpQixRQUFNQSxDQUFOLElBQVMsTUFBSUEsQ0FBOUIsS0FBbUNwb0QsS0FBRyxhQUFXb29ELENBQVgsR0FBYSxPQUFuRCxFQUE0REEsSUFBRW5vRCxFQUFFLHVCQUFGLENBQUYsQ0FBNkIsZUFBYW1vRCxDQUFiLElBQWlCLFFBQU1BLENBQU4sSUFBUyxNQUFJQSxDQUE5QixLQUFtQ3BvRCxLQUFHLG9CQUFrQm9vRCxDQUFsQixHQUFvQixVQUExRCxFQUFzRUEsSUFBRW5vRCxFQUFFLHVCQUFGLENBQUYsQ0FBNkIsZUFBYW1vRCxDQUFiLElBQWlCLFFBQU1BLENBQU4sSUFBUyxNQUFJQSxDQUE5QixLQUFtQ3BvRCxJQUFFLGFBQVdvb0QsQ0FBWCxHQUFhcG9ELElBQUUseUNBQWYsR0FBeURBLEtBQUcsZ0NBQThCb29ELENBQTlCLEdBQWdDLE9BQW5DLENBQTlGLEVBQTJJQSxJQUFFbm9ELEVBQUUsdUJBQUYsQ0FBRixDQUE2QixlQUFhbW9ELENBQWIsSUFBaUIsUUFBTUEsQ0FBTixJQUNsZixNQUFJQSxDQUQ2ZCxLQUN4ZCxVQUFRQSxDQUFSLEdBQVVwb0QsS0FBRyxxQkFBYixHQUFtQyxpQkFBZW9vRCxDQUFmLEdBQWlCcG9ELEtBQUcsNEJBQXBCLEdBQWlELGNBQVlvb0QsQ0FBWixHQUFjcG9ELEtBQUcseUJBQWpCLEdBQTJDLFdBQVNvb0QsQ0FBVCxLQUFhcG9ELEtBQUcsc0JBQWhCLENBRHlWLEVBQ2hUb29ELElBQUVub0QsRUFBRWcwRCxZQUFKLENBQWlCLGVBQWE3TCxDQUFiLElBQWlCLFFBQU1BLENBQU4sSUFBUyxNQUFJQSxDQUE5QixLQUFtQ3BvRCxLQUFHLGFBQVdvb0QsQ0FBWCxHQUFhLE9BQW5ELEVBQTREQSxJQUFFbm9ELEVBQUUseUJBQUYsQ0FBRixDQUErQixlQUFhbW9ELENBQWIsSUFBZ0IsUUFBTUEsQ0FBdEIsSUFBeUIsTUFBSUEsQ0FBN0IsR0FBK0Jwb0QsS0FBRyxpQkFBZW9vRCxDQUFmLEdBQWlCLE9BQW5ELElBQTREQSxJQUFFbm9ELEVBQUVpMEQsU0FBSixFQUFjLGVBQWE5TCxDQUFiLElBQWlCLFFBQU1BLENBQU4sSUFBUyxNQUFJQSxDQUE5QixLQUFtQ3BvRCxLQUFHLGdCQUFjb29ELENBQWQsR0FBZ0IsT0FBdEQsQ0FBMUUsRUFBMElBLElBQUVub0QsRUFBRWswRCxZQUFKLENBQWlCLGVBQWEvTCxDQUFiLElBQWlCLFFBQU1BLENBQU4sSUFBUyxNQUFJQSxDQUFiLElBQWdCLFVBQVFBLENBQXpDLEtBQThDcG9ELEtBQUcsbUJBQ3plb29ELENBRHllLEdBQ3ZlLE9BRHNiLEVBQzdhQSxJQUFFbm9ELEVBQUUsZ0JBQUYsQ0FBRixDQUFzQixlQUFhbW9ELENBQWIsSUFBaUIsUUFBTUEsQ0FBTixJQUFTLE1BQUlBLENBQTlCLEtBQW1DcG9ELEtBQUcscUJBQW1Cb29ELENBQW5CLEdBQXFCLE9BQTNELEVBQW9FQSxJQUFFbm9ELEVBQUUsb0JBQUYsQ0FBRixDQUEwQixlQUFhbW9ELENBQWIsSUFBaUIsUUFBTUEsQ0FBTixJQUFTLE1BQUlBLENBQTlCLEtBQW1DcG9ELEtBQUcseUJBQXVCb29ELENBQXZCLEdBQXlCLE9BQS9ELEVBQXdFQSxJQUFFbm9ELEVBQUUsYUFBRixDQUFGLENBQW1CLGlCQUFlbW9ELENBQWYsS0FBbUJwb0QsS0FBRyxrQkFBZ0Jvb0QsQ0FBaEIsR0FBa0IsT0FBeEMsRUFBaUQsbUJBQWlCbm9ELEVBQUUsbUJBQUYsQ0FBakIsS0FBMENELEtBQUcsbUJBQTdDLEVBQWtFLE1BQUlBLENBQUosS0FBUUEsSUFBRSx1QkFBVjtBQUFtQyxZQUFPQSxDQUFQO0FBQVMsQ0FyQ3RYO0FBQUEsSUFxQ3VYNHZELDBCQUF3QixTQUF4QkEsdUJBQXdCLENBQVMzdkQsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVMsU0FBT0MsRUFBRSxnQkFBRixDQUFQLEtBQTZCRCxLQUFHLDZDQUFoQztBQUNuYSxZQUFNQyxFQUFFLGdCQUFGLENBQU4sS0FBNEJELEtBQUcsZ0RBQS9CLEVBQWlGQyxFQUFFNnNELE1BQUYsS0FBVzdzRCxFQUFFNmhCLE1BQUYsS0FBVzloQixLQUFHLGFBQVdDLEVBQUU2aEIsTUFBYixHQUFvQixTQUFsQyxHQUE2QzdoQixFQUFFSSxNQUFGLEtBQVdMLEtBQUcsYUFBV0MsRUFBRUksTUFBYixHQUFvQixTQUFsQyxDQUE3QyxFQUEwRkosRUFBRW0wRCxVQUFGLEtBQWVwMEQsS0FBRyxpQkFBZUMsRUFBRW0wRCxVQUFqQixHQUE0QixPQUE5QyxDQUExRixFQUFpSm4wRCxFQUFFbzBELFVBQUYsS0FBZXIwRCxLQUFHLGlCQUFlQyxFQUFFbzBELFVBQWpCLEdBQTRCLFFBQTlDLENBQWpKLEVBQXlNcDBELEVBQUVxMEQsU0FBRixLQUFjdDBELEtBQUcsZ0JBQWNDLEVBQUVxMEQsU0FBaEIsR0FBMEIsU0FBM0MsQ0FBcE4sRUFBMlFyMEQsRUFBRTJxRCxPQUFGLElBQVcsU0FBTzNxRCxFQUFFczBELElBQXBCLEtBQTJCdjBELEtBQUcsbUJBQTlCLEVBQW1ELFNBQU9DLEVBQUUsVUFBRixDQUFQLEtBQXVCRCxLQUFHLGVBQTFCLEVBQTJDLElBQUdDLEVBQUV1MEQsT0FBTCxFQUFhO0FBQUMsWUFBSXBNLElBQUVub0QsRUFBRXUwRCxPQUFSO0FBQUEsWUFBZ0J4MEQsSUFBRUEsSUFBRSxXQUFwQixDQUFnQyxRQUFPb29ELENBQVAsR0FBVSxLQUFLLE9BQUw7QUFBYXBvRCxxQkFDM2YsWUFEMmYsQ0FDOWUsTUFBTSxLQUFLLE9BQUw7QUFBYUEscUJBQUcsWUFBSCxDQUFnQixNQUFNLEtBQUssU0FBTDtBQUFlQSxxQkFBRyxjQUFILENBQWtCLE1BQU0sS0FBSyxhQUFMO0FBQW1CQSxxQkFBRyxrQkFBSCxDQUFzQixNQUFNLEtBQUssTUFBTDtBQUFZQSxxQkFBRyxXQUFILENBQWUsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLHFCQUFHLGVBQUgsQ0FBbUIsTUFBTSxLQUFLLFNBQUw7QUFBZUEscUJBQUcsY0FBSCxDQUFrQixNQUFNLEtBQUssZUFBTDtBQUFxQkEscUJBQUcsb0JBQUgsQ0FBd0IsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLHFCQUFHLGdCQUFILENBQW9CLE1BQU0sS0FBSyxNQUFMO0FBQVlBLHFCQUFHLFdBQUgsQ0FBZSxNQUFNLEtBQUssYUFBTDtBQUFtQkEscUJBQUcsa0JBQUgsQ0FBc0IsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLHFCQUFHLGtCQUFILENBQXNCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLHFCQUFHLGFBQUg7QUFDeGUsc0JBQU0sS0FBSyxPQUFMO0FBQWFBLHFCQUFHLFlBQUgsQ0FBZ0IsTUFBTSxLQUFLLFFBQUw7QUFBY0EscUJBQUcsYUFBSCxDQUFpQixNQUFNLEtBQUssT0FBTDtBQUFhQSxxQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxLQUFMO0FBQVdBLHFCQUFHLFVBQUgsQ0FBYyxNQUFNLEtBQUssTUFBTDtBQUFZQSxxQkFBRyxXQUFILENBQWUsTUFBTSxLQUFLLE1BQUw7QUFBWUEscUJBQUcsV0FBSCxDQUFlLE1BQU0sS0FBSyxRQUFMO0FBQWNBLHFCQUFHLGFBQUgsQ0FBaUIsTUFBTSxLQUFLLGlCQUFMO0FBQXVCQSxxQkFBRyxzQkFBSCxDQUEwQixNQUFNLEtBQUssTUFBTDtBQUFZQSxxQkFBRyxXQUFILENBQWUsTUFBTTtBQUFRQSxxQkFBRyxjQUFILENBRjZJO0FBRTFILGlCQUFVQyxFQUFFdzBELFNBQVosS0FBd0J6MEQsS0FBRyxrRkFBM0IsRUFBK0csWUFBVUMsRUFBRXcwRCxTQUFaLEtBQXdCejBELEtBQUcsdUlBQTNCO0FBQzdkLGdCQUFVQyxFQUFFdzBELFNBQVosS0FBd0J6MEQsS0FBRyw2RkFBM0IsRUFBMEgsWUFBVUMsRUFBRXcwRCxTQUFaLEtBQXdCejBELEtBQUcsa0tBQTNCLEVBQStMLFlBQVVDLEVBQUV3MEQsU0FBWixLQUF3QnowRCxLQUFHLCtIQUEzQixFQUE0SixTQUFPQyxFQUFFeTBELFVBQVQsS0FBc0IxMEQsS0FBRyw4QkFBekI7QUFDcmQsWUFBTUMsRUFBRXkwRCxVQUFSLEtBQXFCMTBELEtBQUcsbUNBQXhCLEVBQTZELGVBQWFDLEVBQUUwMEQsZ0JBQWYsS0FBa0MzMEQsS0FBRywrREFBckMsRUFBc0csVUFBUUMsRUFBRTAwRCxnQkFBVixLQUE2QjMwRCxLQUFHLDBGQUFoQyxFQUE0SCxrQkFBZ0JDLEVBQUUwMEQsZ0JBQWxCLEtBQXFDMzBELEtBQUcsNkNBQXhDLEVBQXVGLFNBQU9DLEVBQUUwMEQsZ0JBQVQsS0FBNEIzMEQsS0FBRyx3RUFBL0IsRUFBeUcsY0FBWUMsRUFBRTAwRCxnQkFBZCxLQUM5ZDMwRCxLQUFHLHVDQUQyZCxFQUNsYixRQUFNQyxFQUFFMDBELGdCQUFSLEtBQTJCMzBELEtBQUcsd0NBQTlCLEVBQXdFLFlBQVVDLEVBQUUyMEQsU0FBWixLQUF3QjUwRCxLQUFHLDBEQUEzQixFQUF1RixxQkFBbUJDLEVBQUUyMEQsU0FBckIsS0FBaUM1MEQsS0FBRyxrRkFBcEMsRUFBd0gsK0JBQTZCQyxFQUFFMjBELFNBQS9CLEtBQTJDNTBELEtBQUcsNkhBQTlDLEVBQTZLLG9CQUNqZkMsRUFBRTIwRCxTQUQrZSxLQUNuZTUwRCxLQUFHLDZFQURnZSxFQUNqWiw4QkFBNEJDLEVBQUUyMEQsU0FBOUIsS0FBMEM1MEQsS0FBRywrRUFBN0MsRUFBOEgsNkJBQTJCQyxFQUFFMjBELFNBQTdCLEtBQXlDNTBELEtBQUcsZ0VBQTVDLEVBQThHQyxFQUFFLFVBQUYsTUFBZ0JELEtBQUcsZUFBYUMsRUFBRSxVQUFGLENBQWIsR0FBMkIsT0FBOUMsRUFBdUQsT0FBS0EsRUFBRSxXQUFGLENBQUwsS0FBc0JELEtBQUcsdWNBQXpCO0FBQ25ZLFdBQUtDLEVBQUUsV0FBRixDQUFMLEtBQXNCRCxLQUFHLCtnQkFBekI7QUFDQSxXQUFLQyxFQUFFLFdBQUYsQ0FBTCxLQUFzQkQsS0FBRyw2YkFBekIsRUFBd2QsT0FBS0MsRUFBRSxXQUFGLENBQUwsS0FBc0JELEtBQUcsaWtCQUF6QjtBQUN4ZCxXQUFLQyxFQUFFLFdBQUYsQ0FBTCxLQUFzQkQsS0FBRyw0a0JBQXpCO0FBQ0EsV0FBS0MsRUFBRSxXQUFGLENBQUwsS0FBc0JELEtBQUcsbXRCQUF6QjtBQUNBLFdBQUtDLEVBQUUsV0FBRixDQUFMLEtBQXNCRCxLQUFHLDh4QkFBekI7QUFDQSxZQUFNQyxFQUFFNDBELFFBQVIsS0FBbUI3MEQsS0FBRyxvRUFBdEIsRUFBNEYsUUFBTUMsRUFBRTQwRCxRQUFSLEtBQW1CNzBELEtBQUcsb0VBQXRCLEVBQTRGLFFBQU1DLEVBQUU0MEQsUUFBUixLQUFtQjcwRCxLQUFHLHVCQUF0QixFQUErQyxRQUFNQyxFQUFFNDBELFFBQVIsS0FBbUI3MEQsS0FBRyx1QkFBdEIsRUFBK0MsUUFBTUMsRUFBRTQwRCxRQUFSLEtBQW1CNzBELEtBQUcsdUJBQXRCLEVBQStDLFNBQU9DLEVBQUU0MEQsUUFBVCxLQUFvQjcwRCxLQUFHLHlCQUF2QixFQUFrRCxRQUFNQyxFQUFFNjBELFVBQVIsS0FBcUI5MEQsS0FBRyxxQkFBeEIsRUFBK0MsU0FBT0MsRUFBRTgwRCxNQUFULEtBQWtCLzBELEtBQUcsYUFBckIsRUFBb0MsU0FBT0MsRUFBRXNzRCxNQUFULEtBQWtCdnNELEtBQUcsYUFBckIsRUFBb0MsZ0JBQzllQyxFQUFFKzBELGFBRDRlLEtBQzVkaDFELEtBQUcsK0JBRHlkLEVBQ3hiLFNBQU9DLEVBQUUrMEQsYUFBVCxLQUF5QmgxRCxLQUFHLHlCQUE1QixFQUF1RCxtQkFBaUJDLEVBQUUycUQsT0FBbkIsS0FBNkI1cUQsS0FBRyxvQkFBaEMsRUFBc0QsU0FBT0MsRUFBRXlzRCxlQUFULEtBQTJCMXNELEtBQUcsc0JBQTlCLEVBQXNELFVBQVFDLEVBQUV5c0QsZUFBVixLQUE0QjFzRCxLQUFHLFdBQS9CLEVBQTRDLGFBQVdDLEVBQUV5c0QsZUFBYixLQUErQjFzRCxLQUFHLGNBQWxDLEVBQWtELFlBQVVDLEVBQUV5c0QsZUFBWixLQUE4QjFzRCxLQUFHLGFBQWpDLEVBQWdELGFBQVdDLEVBQUV5c0QsZUFBYixLQUErQjFzRCxLQUFHLGNBQWxDLEVBQWtELFVBQVFDLEVBQUV5c0QsZUFBVixLQUE0QjFzRCxLQUFHLFdBQS9CLEVBQTRDLFlBQVVDLEVBQUV5c0QsZUFBWixLQUE4QjFzRCxLQUFHLGFBQWpDO0FBQ3JjLHNCQUFnQkMsRUFBRXlzRCxlQUFsQixLQUFvQzFzRCxLQUFHLG1CQUF2QyxFQUE0RCxXQUFTQyxFQUFFeXNELGVBQVgsS0FBNkIxc0QsS0FBRyxZQUFoQyxFQUE4QyxJQUFHLGFBQVdDLEVBQUU0b0QsT0FBYixLQUF1QixTQUFPNW9ELEVBQUVnMUQsR0FBVCxLQUFlajFELEtBQUcsbUJBQWxCLEdBQXVDb29ELElBQUVub0QsRUFBRSxnQkFBRixDQUF6QyxFQUE2RCxNQUFJbW9ELENBQUosSUFBTyxRQUFNQSxDQUFiLElBQWdCLFFBQU1BLENBQTFHLENBQUgsRUFBZ0g7QUFBQyxZQUFJRSxJQUFFLFFBQU4sQ0FBZSxTQUFPRixDQUFQLEtBQVdFLElBQUVGLENBQWIsRUFBZ0Jwb0QsS0FBRyxxQ0FBbUNzb0QsQ0FBbkMsR0FBcUMsU0FBeEM7QUFBa0QsT0FBRWtFLFNBQUYsS0FBYyxTQUFPdnNELEVBQUV1c0QsU0FBVCxLQUFxQnhzRCxLQUFHLHFCQUF4QixHQUErQyxVQUFRQyxFQUFFdXNELFNBQVYsS0FBc0J4c0QsS0FBRyxzQkFBekIsQ0FBL0MsRUFBZ0csYUFBV0MsRUFBRXVzRCxTQUFiLEtBQXlCeHNELEtBQUcsdUJBQTVCLENBQTlHLEVBQW9LQyxFQUFFLGtCQUFGLE1BQXdCRCxLQUFHLDJCQUMzZUMsRUFBRSxrQkFBRixDQUQyZSxHQUNyZCxPQUQwYixFQUNqYkEsRUFBRWkxRCxPQUFGLEtBQVlsMUQsS0FBRyxVQUFRQyxFQUFFaTFELE9BQVYsR0FBa0IsT0FBakMsRUFBMEMsT0FBT2wxRCxDQUFQO0FBQVMsQ0FyRG5GO0FBQUEsSUFxRG9GMnZELGtCQUFnQixTQUFoQkEsZUFBZ0IsQ0FBUzF2RCxDQUFULEVBQVc7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxVQUFRQyxFQUFFaXBELEtBQVYsS0FBa0JscEQsS0FBRyw0QkFBckIsRUFBbUQsV0FBU0MsRUFBRWlwRCxLQUFYLEtBQW1CbHBELEtBQUcsNkJBQXRCLEVBQXFELHVCQUFxQkMsRUFBRWlwRCxLQUF2QixLQUErQmxwRCxLQUFHLHlDQUFsQyxFQUE2RSxZQUFVQyxFQUFFaXBELEtBQVosS0FBb0JscEQsS0FBRyw4QkFBdkIsRUFBdUQsYUFBV0MsRUFBRWlwRCxLQUFiLEtBQXFCbHBELEtBQUcsK0JBQXhCLEVBQXlELGVBQWFDLEVBQUVpcEQsS0FBZixLQUF1QmxwRCxLQUFHLGlDQUExQixFQUE2RCx5QkFBdUJDLEVBQUVpcEQsS0FBekIsS0FDN2RscEQsS0FBRywyQ0FEMGQsRUFDN2EsVUFBUUMsRUFBRWlwRCxLQUFWLEtBQWtCbHBELEtBQUcsNEJBQXJCLEVBQW1ELGVBQWFDLEVBQUVpcEQsS0FBZixLQUF1QmxwRCxLQUFHLGlDQUExQixFQUE2RCxjQUFZQyxFQUFFaXBELEtBQWQsS0FBc0JscEQsS0FBRyxnQ0FBekIsRUFBMkQsZ0JBQWNDLEVBQUVpcEQsS0FBaEIsS0FBd0JscEQsS0FBRyxrQ0FBM0IsRUFBK0QscUJBQW1CQyxFQUFFaXBELEtBQXJCLEtBQTZCbHBELEtBQUcsdUNBQWhDLEVBQXlFLFNBQU9DLEVBQUVpcEQsS0FBVCxLQUFpQmxwRCxLQUFHLDJCQUFwQixFQUFpRCxZQUFVQyxFQUFFaXBELEtBQVosS0FBb0JscEQsS0FBRyw4QkFBdkIsRUFBdUQsV0FBU0MsRUFBRWlwRCxLQUFYLEtBQW1CbHBELEtBQUcsNkJBQXRCO0FBQ3hjLGVBQVNDLEVBQUVpcEQsS0FBWCxLQUFtQmxwRCxLQUFHLDZCQUF0QixFQUFxRCxZQUFVQyxFQUFFaXBELEtBQVosS0FBb0JscEQsS0FBRyw4QkFBdkIsRUFBdUQsdUJBQXFCQyxFQUFFaXBELEtBQXZCLEtBQStCbHBELEtBQUcseUNBQWxDLEVBQTZFLFdBQVNDLEVBQUVpcEQsS0FBWCxLQUFtQmxwRCxLQUFHLDZCQUF0QixFQUFxRCxXQUFTQyxFQUFFaXBELEtBQVgsS0FBbUJscEQsS0FBRyw2QkFBdEIsRUFBcUQsa0JBQWdCQyxFQUFFaXBELEtBQWxCLEtBQTBCbHBELEtBQUcsb0NBQTdCLEVBQW1FLGNBQVlDLEVBQUVpcEQsS0FBZCxLQUFzQmxwRCxLQUFHLGdDQUF6QixFQUEyRCx3QkFBc0JDLEVBQUVpcEQsS0FBeEIsS0FBZ0NscEQsS0FBRywwQ0FBbkMsRUFBK0UsYUFDaGZDLEVBQUVpcEQsS0FEOGUsS0FDdGVscEQsS0FBRywrQkFEbWUsRUFDbGMsa0JBQWdCQyxFQUFFaXBELEtBQWxCLEtBQTBCbHBELEtBQUcsb0NBQTdCLEVBQW1FLGFBQVdDLEVBQUVpcEQsS0FBYixLQUFxQmxwRCxLQUFHLCtCQUF4QixFQUF5RCxhQUFXQyxFQUFFaXBELEtBQWIsS0FBcUJscEQsS0FBRywrQkFBeEIsRUFBeUQsYUFBV0MsRUFBRWlwRCxLQUFiLEtBQXFCbHBELEtBQUcsK0JBQXhCLEVBQXlELElBQUcsV0FBU0MsRUFBRWlwRCxLQUFYLElBQWtCLFVBQVFqcEQsRUFBRWlwRCxLQUEvQixFQUFxQ2xwRCxLQUFHLFlBQUgsQ0FBZ0IsZ0JBQWNDLEVBQUVpcEQsS0FBaEIsS0FBd0JscEQsS0FBRyxrQ0FBM0IsRUFBK0QsYUFBV0MsRUFBRWlwRCxLQUFiLEtBQXFCbHBELEtBQUcsK0JBQXhCLEVBQXlELGdCQUFjQyxFQUFFaXBELEtBQWhCLEtBQXdCbHBELEtBQUcsa0NBQTNCO0FBQ3pjLGtCQUFZQyxFQUFFaXBELEtBQWQsS0FBc0JscEQsS0FBRyx3Q0FBekIsRUFBbUUsaUJBQWVDLEVBQUVpcEQsS0FBakIsS0FBeUJscEQsS0FBRyxrQ0FBNUIsRUFBZ0Usa0JBQWdCQyxFQUFFaXBELEtBQWxCLEtBQTBCbHBELEtBQUcsbUNBQTdCLEVBQWtFLFVBQVFDLEVBQUVpcEQsS0FBVixLQUFrQmxwRCxLQUFHLDJCQUFyQixFQUFrRCxnQkFBY0MsRUFBRWlwRCxLQUFoQixLQUF3QmxwRCxLQUFHLGdDQUEzQixFQUE2RCxZQUFVQyxFQUFFaXBELEtBQVosS0FBb0JscEQsS0FBRyw2QkFBdkIsRUFBc0QsZ0JBQWNDLEVBQUVpcEQsS0FBaEIsS0FBd0JscEQsS0FBRyxpQ0FBM0IsRUFBOEQsa0JBQWdCQyxFQUFFaXBELEtBQWxCLEtBQTBCbHBELEtBQUcsbUNBQTdCLEVBQWtFLGVBQzFlQyxFQUFFaXBELEtBRHdlLEtBQ2hlbHBELEtBQUcsZ0NBRDZkLEVBQzNiLFVBQVFDLEVBQUVpcEQsS0FBVixLQUFrQmxwRCxLQUFHLDJCQUFyQixFQUFrRCxhQUFXQyxFQUFFaXBELEtBQWIsS0FBcUJscEQsS0FBRyw4QkFBeEIsRUFBd0QsaUJBQWVDLEVBQUVpcEQsS0FBakIsS0FBeUJscEQsS0FBRyxrQ0FBNUIsRUFBZ0UsY0FBWUMsRUFBRWlwRCxLQUFkLEtBQXNCbHBELEtBQUcsK0JBQXpCLEVBQTBELFdBQVNDLEVBQUVpcEQsS0FBWCxLQUFtQmxwRCxLQUFHLDRCQUF0QixFQUFvRCxXQUFTQyxFQUFFaXBELEtBQVgsS0FBbUJscEQsS0FBRyw0QkFBdEIsRUFBb0QscUJBQW1CQyxFQUFFaXBELEtBQXJCLEtBQTZCbHBELEtBQUcsc0NBQWhDLEVBQXdFLGtCQUFnQkMsRUFBRWlwRCxLQUFsQixLQUEwQmxwRCxLQUFHLG1DQUE3QjtBQUNuYyx1QkFBaUJDLEVBQUVpcEQsS0FBbkIsS0FBMkJscEQsS0FBRyxvQ0FBOUIsRUFBb0UsaUJBQWVDLEVBQUVpcEQsS0FBakIsS0FBeUJscEQsS0FBRyxrQ0FBNUIsRUFBZ0UsWUFBVUMsRUFBRWlwRCxLQUFaLEtBQW9CbHBELEtBQUcsNkJBQXZCLEVBQXNELGFBQVdDLEVBQUVpcEQsS0FBYixLQUFxQmxwRCxLQUFHLDhCQUF4QixFQUF3RCxZQUFVQyxFQUFFaXBELEtBQVosS0FBb0JscEQsS0FBRyw2QkFBdkIsRUFBc0Qsa0JBQWdCQyxFQUFFaXBELEtBQWxCLEtBQTBCbHBELEtBQUcsbUNBQTdCLEVBQWtFLGlCQUFlQyxFQUFFaXBELEtBQWpCLEtBQXlCbHBELEtBQUcsa0NBQTVCLEVBQWdFLGFBQVdDLEVBQUVpcEQsS0FBYixLQUFxQmxwRCxLQUFHLDhCQUF4QixFQUF3RCxrQkFBZ0JDLEVBQUVpcEQsS0FBbEIsS0FDamVscEQsS0FBRyxtQ0FEOGQsRUFDemIsY0FBWUMsRUFBRWlwRCxLQUFkLEtBQXNCbHBELEtBQUcsK0JBQXpCLEVBQTBELGFBQVdDLEVBQUVpcEQsS0FBYixLQUFxQmxwRCxLQUFHLDhCQUF4QixFQUF3RCxnQkFBY0MsRUFBRWlwRCxLQUFoQixLQUF3QmxwRCxLQUFHLGlDQUEzQixFQUE4RCxZQUFVQyxFQUFFaXBELEtBQVosS0FBb0JscEQsS0FBRyw2QkFBdkIsRUFBc0QsWUFBVUMsRUFBRWlwRCxLQUFaLEtBQW9CbHBELEtBQUcsNkJBQXZCLEVBQXNELGFBQVdDLEVBQUVpcEQsS0FBYixLQUFxQmxwRCxLQUFHLDhCQUF4QixFQUF3RCxjQUFZQyxFQUFFaXBELEtBQWQsS0FBc0JscEQsS0FBRywrQkFBekIsRUFBMEQsa0JBQWdCQyxFQUFFaXBELEtBQWxCLEtBQTBCbHBELEtBQUcsbUNBQTdCO0FBQ3ZiLG1CQUFhQyxFQUFFaXBELEtBQWYsS0FBdUJscEQsS0FBRyxnQ0FBMUIsRUFBNEQsbUJBQWlCQyxFQUFFaXBELEtBQW5CLEtBQTJCbHBELEtBQUcsb0NBQTlCLEVBQW9FLFlBQVVDLEVBQUVpcEQsS0FBWixLQUFvQmxwRCxLQUFHLDZCQUF2QixFQUFzRCxjQUFZQyxFQUFFaXBELEtBQWQsS0FBc0JscEQsS0FBRywrQkFBekIsRUFBMEQsZ0JBQWNDLEVBQUVpcEQsS0FBaEIsS0FBd0JscEQsS0FBRyxpQ0FBM0IsRUFBOEQsZUFBYUMsRUFBRWlwRCxLQUFmLEtBQXVCbHBELEtBQUcsZ0NBQTFCLEVBQTRELG1CQUFpQkMsRUFBRWlwRCxLQUFuQixLQUEyQmxwRCxLQUFHLG9DQUE5QixFQUFvRSxlQUFhQyxFQUFFaXBELEtBQWYsS0FBdUJscEQsS0FBRyxnQ0FBMUIsRUFBNEQsT0FBT0EsQ0FBUDtBQUFTLENBN0RwZjtBQThEQSxTQUFTbTFELFVBQVQsQ0FBb0JsMUQsQ0FBcEIsRUFBc0I7QUFBQyxRQUFJRCxJQUFFLEVBQU47QUFBQSxRQUFTb29ELElBQUUsRUFBWDtBQUFBLFFBQWNFLElBQUVyb0QsRUFBRSx1QkFBRixDQUFoQixDQUEyQyxNQUFJcW9ELENBQUosS0FBUSxhQUFXQSxDQUFYLEtBQWVGLEtBQUcsY0FBbEIsR0FBa0MsaUJBQWVFLENBQWYsS0FBbUJGLEtBQUcsa0JBQXRCLENBQWxDLEVBQTRFLGtCQUFnQkUsQ0FBaEIsS0FBb0JGLEtBQUcsbUJBQXZCLENBQTVFLEVBQXdILGtCQUFnQkUsQ0FBaEIsS0FBb0JGLEtBQUcsbUJBQXZCLENBQXhILEVBQW9LLDRCQUEwQkUsQ0FBMUIsS0FBOEJGLEtBQUcsNkJBQWpDLENBQXBLLEVBQW9PLGFBQVdFLENBQVgsS0FBZUYsS0FBRyxjQUFsQixDQUFwTyxFQUFzUSxnQkFBY0UsQ0FBZCxLQUFrQkYsS0FBRyxpQkFBckIsQ0FBdFEsRUFBOFMscUJBQW1CRSxDQUFuQixLQUF1QkYsS0FBRyxzQkFBMUIsQ0FBOVMsRUFBZ1csc0JBQW9CRSxDQUFwQixLQUF3QkYsS0FBRyx1QkFBM0IsQ0FBaFcsRUFBb1osd0NBQ3JlRSxDQURxZSxLQUNqZUYsS0FBRyxrREFEOGQsQ0FBcFosRUFDdEIsaUJBQWVFLENBQWYsS0FBbUJGLEtBQUcsa0JBQXRCLENBRHNCLEVBQ29CLHdCQUFzQkUsQ0FBdEIsS0FBMEJGLEtBQUcseUJBQTdCLENBRHBCLEVBQzRFLDBCQUF3QkUsQ0FBeEIsS0FBNEJGLEtBQUcsMkJBQS9CLENBRDVFLEVBQ3dJLGVBQWFFLENBQWIsS0FBaUJGLEtBQUcsZ0JBQXBCLENBRHhJLEVBQzhLLG1CQUFpQkUsQ0FBakIsS0FBcUJGLEtBQUcsb0JBQXhCLENBRDlLLEVBQzROLGlDQUErQkUsQ0FBL0IsS0FBbUNGLEtBQUcsa0NBQXRDLENBRDVOLEVBQ3NTLHNCQUFvQkUsQ0FBcEIsS0FBd0JGLEtBQUcsdUJBQTNCLENBRHRTLEVBQzBWLGdCQUFjRSxDQUFkLEtBQWtCRixLQUFHLGlCQUFyQixDQUQxVixFQUNrWSxpQkFBZUUsQ0FBZixLQUFtQkYsS0FBRyxrQkFBdEIsQ0FEbFksRUFFakYsaUJBQWVFLENBQWYsS0FBbUJGLEtBQUcsa0JBQXRCLENBRmlGLEVBRXZDLGdCQUFjRSxDQUFkLEtBQWtCRixLQUFHLGlCQUFyQixDQUZ1QyxFQUVDLGdCQUFjRSxDQUFkLEtBQWtCRixLQUFHLGlCQUFyQixDQUZELEVBRXlDLHlCQUF1QkUsQ0FBdkIsS0FBMkJGLEtBQUcsMEJBQTlCLENBRnpDLEVBRW1HLGVBQWFFLENBQWIsS0FBaUJGLEtBQUcsZ0JBQXBCLENBRm5HLEVBRXlJLGNBQVlFLENBQVosS0FBZ0JGLEtBQUcsZUFBbkIsQ0FGekksRUFFNkssMkJBQXlCRSxDQUF6QixLQUE2QkYsS0FBRyw0QkFBaEMsQ0FGN0ssRUFFMk8sZ0JBQWNFLENBQWQsS0FBa0JGLEtBQUcsaUJBQXJCLENBRjNPLEVBRW1SLGVBQWFFLENBQWIsS0FBaUJGLEtBQUcsZ0JBQXBCLENBRm5SLEVBRXlULHFCQUFtQkUsQ0FBbkIsS0FBdUJGLEtBQUcsc0JBQTFCLENBRnpULEVBRTJXLHFCQUFtQkUsQ0FBbkIsS0FBdUJGLEtBQUcsc0JBQTFCLENBRjNXLEVBRTZaLGtCQUM5ZUUsQ0FEOGUsS0FDMWVGLEtBQUcsbUJBRHVlLENBRjdaLEVBR3JELGFBQVdFLENBQVgsS0FBZUYsS0FBRyxjQUFsQixDQUhxRCxFQUduQixrQkFBZ0JFLENBQWhCLEtBQW9CRixLQUFHLG9CQUF2QixDQUhtQixFQUcwQixjQUFZRSxDQUFaLEtBQWdCRixLQUFHLGVBQW5CLENBSDFCLEVBRzhELG1CQUFpQkUsQ0FBakIsS0FBcUJGLEtBQUcsb0JBQXhCLENBSDlELEVBRzRHLGtCQUFnQkUsQ0FBaEIsS0FBb0JGLEtBQUcsbUJBQXZCLENBSDVHLEVBR3dKLG9CQUFrQkUsQ0FBbEIsS0FBc0JGLEtBQUcscUJBQXpCLENBSHhKLEVBR3dNLHdCQUFzQkUsQ0FBdEIsS0FBMEJGLEtBQUcseUJBQTdCLENBSHhNLEVBR2dRLGlCQUFlRSxDQUFmLEtBQW1CRixLQUFHLGtCQUF0QixDQUhoUSxFQUcwUyxnQkFBY0UsQ0FBZCxLQUFrQkYsS0FBRyxpQkFBckIsQ0FIMVMsRUFHa1YsZUFBYUUsQ0FBYixLQUFpQkYsS0FBRyxnQkFBcEIsQ0FIbFYsRUFHd1gscUJBQW1CRSxDQUFuQixLQUF1QkYsS0FBRyxzQkFBMUIsQ0FIeFgsRUFJakYsZ0JBQWNFLENBQWQsS0FBa0JGLEtBQUcsaUJBQXJCLENBSmlGLEVBSXpDLGdCQUFjRSxDQUFkLEtBQWtCRixLQUFHLGlCQUFyQixDQUp5QyxFQUlELGlCQUFlRSxDQUFmLEtBQW1CRixLQUFHLGtCQUF0QixDQUpDLEVBSXlDLGVBQWFFLENBQWIsS0FBaUJGLEtBQUcsZ0JBQXBCLENBSnpDLEVBSStFLGtCQUFnQkUsQ0FBaEIsS0FBb0JGLEtBQUcsbUJBQXZCLENBSi9FLEVBSTJILGtCQUFnQkUsQ0FBaEIsS0FBb0JGLEtBQUcsbUJBQXZCLENBSjNILEVBSXVLLGlCQUFlRSxDQUFmLEtBQW1CRixLQUFHLGtCQUF0QixDQUp2SyxFQUlpTixhQUFXRSxDQUFYLEtBQWVGLEtBQUcsY0FBbEIsQ0FKak4sRUFJbVAsdUJBQXFCRSxDQUFyQixLQUF5QkYsS0FBRyx3QkFBNUIsQ0FKblAsRUFJeVMsc0JBQW9CRSxDQUFwQixLQUF3QkYsS0FBRyx1QkFBM0IsQ0FKelMsRUFJNlYsZ0JBQWNFLENBQWQsS0FBa0JGLEtBQUcsaUJBQXJCLENBSjdWLEVBSXFZLFlBQVVFLENBQVYsS0FBY0YsS0FBRyxhQUFqQixDQUpyWSxFQUtqRixjQUFZRSxDQUFaLEtBQWdCRixLQUFHLGVBQW5CLENBTGlGLEVBSzdDLGFBQVdFLENBQVgsS0FBZUYsS0FBRyxjQUFsQixDQUw2QyxFQUtYLHNCQUFvQkUsQ0FBcEIsS0FBd0JGLEtBQUcsdUJBQTNCLENBTFcsRUFLeUMsaUJBQWVFLENBQWYsS0FBbUJGLEtBQUcsa0JBQXRCLENBTHpDLEVBS21GLGlCQUFlRSxDQUFmLEtBQW1CRixLQUFHLGtCQUF0QixDQUxuRixFQUs2SCxpQkFBZUUsQ0FBZixLQUFtQkYsS0FBRyxrQkFBdEIsQ0FMN0gsRUFLdUssa0JBQWdCRSxDQUFoQixLQUFvQkYsS0FBRyxvQkFBdkIsQ0FMdkssRUFLb04sZ0JBQWNFLENBQWQsS0FBa0JGLEtBQUcsaUJBQXJCLENBTHBOLEVBSzRQLGdCQUFjRSxDQUFkLEtBQWtCRixLQUFHLGlCQUFyQixDQUxwUSxFQUs2UyxNQUFJbm9ELEVBQUVtMUQsZ0JBQU4sS0FBeUIsU0FBT24xRCxFQUFFLGtDQUFGLENBQVAsS0FBK0Ntb0QsS0FBRyxzQkFBbEQsR0FBMEUsU0FBT25vRCxFQUFFLHFDQUFGLENBQVAsS0FDeGRtb0QsS0FBRyx5QkFEcWQsQ0FBMUUsRUFDaFgsU0FBT25vRCxFQUFFLGtDQUFGLENBQVAsS0FBK0Ntb0QsS0FBRyxzQkFBbEQsQ0FEZ1gsRUFDdFMsU0FBT25vRCxFQUFFLDhCQUFGLENBQVAsS0FBMkNtb0QsS0FBRyxrQkFBOUMsQ0FEc1MsRUFDcE8sU0FBT25vRCxFQUFFLGtDQUFGLENBQVAsS0FBK0Ntb0QsS0FBRyx5Q0FBbEQsQ0FEb08sRUFDdkksU0FBT25vRCxFQUFFLHdDQUFGLENBQVAsS0FBcURtb0QsS0FBRyw0QkFBeEQsQ0FEdUksRUFDakQsU0FBT25vRCxFQUFFLG9DQUFGLENBQVAsS0FBaURtb0QsS0FBRyx3QkFBcEQsQ0FEaUQsRUFDNkIsU0FBT25vRCxFQUFFLDRCQUFGLENBQVAsS0FBeUNtb0QsS0FBRyxnQkFBNUMsQ0FEN0IsRUFDMkYsU0FBT25vRCxFQUFFLGdDQUFGLENBQVAsS0FDemVtb0QsS0FBRyxvQkFEc2UsQ0FEM0YsRUFFclgsU0FBT25vRCxFQUFFLHNDQUFGLENBQVAsS0FBbURtb0QsS0FBRywwQkFBdEQsQ0FGcVgsRUFFblMsU0FBT25vRCxFQUFFLDZCQUFGLENBQVAsS0FBMENtb0QsS0FBRyxpQkFBN0MsQ0FGbVMsRUFFbk8sU0FBT25vRCxFQUFFLDhCQUFGLENBQVAsS0FBMkNtb0QsS0FBRyxrQkFBOUMsQ0FGbU8sRUFFakssU0FBT25vRCxFQUFFLDBCQUFGLENBQVAsS0FBdUNtb0QsS0FBRyxjQUExQyxDQUZpSyxFQUV2RyxTQUFPbm9ELEVBQUUsZ0NBQUYsQ0FBUCxLQUE2Q21vRCxLQUFHLG9CQUFoRCxDQUZ1RyxFQUVqQyxTQUFPbm9ELEVBQUUseUNBQUYsQ0FBUCxLQUFzRG1vRCxLQUFHLDZCQUF6RCxDQUZpQyxFQUV1RCxTQUFPbm9ELEVBQUUseUNBQUYsQ0FBUCxLQUNyY21vRCxLQUFHLDZCQURrYyxDQUZ2RCxFQUc1VyxTQUFPbm9ELEVBQUUsOEJBQUYsQ0FBUCxLQUEyQ21vRCxLQUFHLGtCQUE5QyxDQUg0VyxFQUcxUyxTQUFPbm9ELEVBQUUsNEJBQUYsQ0FBUCxLQUF5Q21vRCxLQUFHLGdCQUE1QyxDQUgwUyxFQUc1TyxTQUFPbm9ELEVBQUUsNEJBQUYsQ0FBUCxLQUF5Q21vRCxLQUFHLGdCQUE1QyxDQUg0TyxFQUc5SyxTQUFPbm9ELEVBQUUsMEJBQUYsQ0FBUCxLQUF1Q21vRCxLQUFHLGNBQTFDLENBSDhLLEVBR3BILFNBQU9ub0QsRUFBRSx1Q0FBRixDQUFQLEtBQW9EbW9ELEtBQUcsMkJBQXZELENBSG9ILEVBR2hDLFNBQU9ub0QsRUFBRSw4QkFBRixDQUFQLEtBQTJDbW9ELEtBQUcsa0JBQTlDLENBSGdDLEVBR2tDLFNBQU9ub0QsRUFBRSw4QkFBRixDQUFQLEtBQTJDbW9ELEtBQUcsa0JBQTlDLENBSGxDLEVBR29HLFNBQ25mbm9ELEVBQUUsK0JBQUYsQ0FEbWYsS0FDOWNtb0QsS0FBRyxtQkFEMmMsQ0FIcEcsRUFJbFYsU0FBT25vRCxFQUFFLCtCQUFGLENBQVAsS0FBNENtb0QsS0FBRyxtQkFBL0MsQ0FKa1YsRUFJOVEsU0FBT25vRCxFQUFFLGtDQUFGLENBQVAsS0FBK0Ntb0QsS0FBRyxzQkFBbEQsQ0FKcVAsRUFJMUssTUFBSUEsQ0FBSixLQUFRcG9ELElBQUVBLElBQUUsWUFBRixJQUFnQixnQ0FBOEJvb0QsQ0FBOUIsR0FBZ0MsUUFBaEQsQ0FBVixFQUFxRSxPQUFPcG9ELENBQVA7QUFBUztBQUNuUixTQUFTMHdELGVBQVQsQ0FBeUJ6d0QsQ0FBekIsRUFBMkI7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxJQUFHQyxFQUFFLGtCQUFGLENBQUgsRUFBeUI7QUFBQ0QsYUFBRyx3QkFBSCxDQUE0QixRQUFPQyxFQUFFLGtCQUFGLENBQVAsR0FBOEIsS0FBSyxZQUFMO0FBQWtCRCxxQkFBRyxZQUFILENBQWdCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLHFCQUFHLFNBQUgsQ0FBYSxNQUFNLEtBQUssU0FBTDtBQUFlQSxxQkFBRyxTQUFILENBQWEsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLHFCQUFHLGNBQUgsQ0FBa0IsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLHFCQUFHLGNBQUgsQ0FBa0IsTUFBTSxLQUFLLHFCQUFMO0FBQTJCQSxxQkFBRyxxQkFBSCxDQUF5QixNQUFNLEtBQUssV0FBTDtBQUFpQkEscUJBQUcsV0FBSCxDQUFlLE1BQU0sS0FBSyxTQUFMO0FBQWVBLHFCQUFHLFNBQUgsQ0FBYSxNQUFNLEtBQUssUUFBTDtBQUFjQSxxQkFBRyxRQUFILENBQVksTUFBTTtBQUFRQSxxQkFBRyxjQUFILENBQTVZLENBQThaQSxLQUM1ZixPQUQ0ZjtBQUNwZixTQUFHQyxFQUFFb3VELFlBQUwsRUFBa0I7QUFBQ3J1RCxhQUFHLGdCQUFILENBQW9CLFFBQU9DLEVBQUVvdUQsWUFBVCxHQUF1QixLQUFLLGNBQUw7QUFBb0JydUQscUJBQUcsY0FBSCxDQUFrQixNQUFNO0FBQVFBLHFCQUFHLGNBQUgsQ0FBM0UsQ0FBNkZBLEtBQUcsT0FBSDtBQUFXLE9BQUUsOEJBQUYsTUFBb0NBLEtBQUcsNkJBQTJCQyxFQUFFLDhCQUFGLENBQTNCLEdBQTZELE9BQXBHLEVBQTZHQSxFQUFFLHVCQUFGLE1BQTZCRCxLQUFHLHNCQUFvQkMsRUFBRSx1QkFBRixDQUFwQixHQUErQyxPQUEvRSxFQUF3RkEsRUFBRSx1QkFBRixNQUE2QkQsS0FBRyxzQkFBb0JDLEVBQUUsdUJBQUYsQ0FBcEIsR0FBK0MsT0FBL0UsRUFBd0ZBLEVBQUUsa0JBQUYsTUFBd0JELEtBQUcsYUFBV0MsRUFBRSxrQkFBRixDQUFYLEdBQWlDLE9BQTVEO0FBQ3BiQSxNQUFFLDBCQUFGLE1BQWdDRCxLQUFHLHlCQUF1QkMsRUFBRSwwQkFBRixDQUF2QixHQUFxRCxPQUF4RixFQUFpR0EsRUFBRSw2QkFBRixNQUFtQ0QsS0FBRyw0QkFBMEJDLEVBQUUsNkJBQUYsQ0FBMUIsR0FBMkQsT0FBakcsRUFBMEdBLEVBQUUsMkJBQUYsTUFBaUNELEtBQUcsMEJBQXdCQyxFQUFFLDJCQUFGLENBQXhCLEdBQXVELE9BQTNGLEVBQW9HQSxFQUFFLGlDQUFGLE1BQXVDRCxLQUFHLGdDQUE4QkMsRUFBRSxpQ0FBRixDQUE5QixHQUFtRSxPQUE3RyxFQUFzSEEsRUFBRSx3QkFBRixNQUE4QkQsS0FBRyx1QkFBcUJDLEVBQUUsd0JBQUYsQ0FBckIsR0FDbGMsT0FEaWEsRUFDeFpBLEVBQUUseUJBQUYsTUFBK0JELEtBQUcsd0JBQXNCQyxFQUFFLHlCQUFGLENBQXRCLEdBQW1ELE9BQXJGLEVBQThGQSxFQUFFLG1DQUFGLE1BQXlDRCxLQUFHLHVCQUFxQkMsRUFBRSxtQ0FBRixDQUFyQixHQUE0RCxPQUF4RyxFQUFpSCxTQUFPQSxFQUFFLGdCQUFGLENBQVAsS0FBNkJELEtBQUcscUJBQW1CQyxFQUFFLGdCQUFGLENBQW5CLEdBQXVDLE9BQXZFLEVBQWdGLFdBQVNBLEVBQUUsZ0JBQUYsQ0FBVCxLQUErQkQsS0FBRyxxQkFBbUJDLEVBQUUsZ0JBQUYsQ0FBbkIsR0FBdUMsT0FBekUsRUFBa0YsV0FBU0EsRUFBRSxnQkFBRixDQUFULEtBQStCRCxLQUFHLHFCQUFtQkMsRUFBRSxnQkFBRixDQUFuQixHQUF1QyxPQUF6RSxFQUFrRixXQUFTQSxFQUFFLGdCQUFGLENBQVQsS0FBK0JELEtBQUcscUJBQzllQyxFQUFFLGdCQUFGLENBRDhlLEdBQzFkLE9BRHdiLEVBQy9hLFdBQVNBLEVBQUUsZ0JBQUYsQ0FBVCxLQUErQkQsS0FBRyxxQkFBbUJDLEVBQUUsZ0JBQUYsQ0FBbkIsR0FBdUMsT0FBekUsRUFBa0YsV0FBU0EsRUFBRSxnQkFBRixDQUFULEtBQStCRCxLQUFHLHFCQUFtQkMsRUFBRSxnQkFBRixDQUFuQixHQUF1QyxPQUF6RSxFQUFrRixXQUFTQSxFQUFFLGdCQUFGLENBQVQsS0FBK0JELEtBQUcscUJBQW1CQyxFQUFFLGdCQUFGLENBQW5CLEdBQXVDLE9BQXpFLEVBQWtGLFVBQVFBLEVBQUUsZ0JBQUYsQ0FBUixLQUE4QkQsS0FBRyxxQkFBbUJDLEVBQUUsZ0JBQUYsQ0FBbkIsR0FBdUMsT0FBeEUsRUFBaUYsU0FBT0EsRUFBRSxnQkFBRixDQUFQLEtBQTZCRCxLQUFHLHFCQUFtQkMsRUFBRSxnQkFBRixDQUFuQixHQUF1QyxPQUF2RSxFQUFnRixTQUFPQSxFQUFFLGdCQUFGLENBQVAsS0FBNkJELEtBQUcscUJBQW1CQyxFQUFFLGdCQUFGLENBQW5CLEdBQ3BkLE9BRG9iLEVBQzNhLGVBQWFBLEVBQUUsZ0JBQUYsQ0FBYixLQUFtQ0QsS0FBRyxxQkFBbUJDLEVBQUUsZ0JBQUYsQ0FBbkIsR0FBdUMsT0FBN0UsRUFBc0YsZUFBYUEsRUFBRSxnQkFBRixDQUFiLEtBQW1DRCxLQUFHLHFCQUFtQkMsRUFBRSxnQkFBRixDQUFuQixHQUF1QyxPQUE3RSxFQUFzRixVQUFRQSxFQUFFLGdCQUFGLENBQVIsS0FBOEJELEtBQUcscUJBQW1CQyxFQUFFLGdCQUFGLENBQW5CLEdBQXVDLE9BQXhFLEVBQWlGLFdBQVNBLEVBQUUsZ0JBQUYsQ0FBVCxLQUErQkQsS0FBRyxxQkFBbUJDLEVBQUUsZ0JBQUYsQ0FBbkIsR0FBdUMsT0FBekUsRUFBa0YsY0FBWUEsRUFBRSxnQkFBRixDQUFaLEtBQWtDRCxLQUFHLHFCQUFtQkMsRUFBRSxnQkFBRixDQUFuQixHQUF1QyxPQUE1RSxFQUFxRixTQUFPQSxFQUFFLGdCQUFGLENBQVAsS0FBNkJELEtBQUcscUJBQW1CQyxFQUFFLGdCQUFGLENBQW5CLEdBQXVDLE9BQXZFO0FBQ2piLGlCQUFXQSxFQUFFLGdCQUFGLENBQVgsS0FBaUNELEtBQUcscUJBQW1CQyxFQUFFLGdCQUFGLENBQW5CLEdBQXVDLE9BQTNFLEVBQW9GLGlCQUFlQSxFQUFFLGdCQUFGLENBQWYsS0FBcUNELEtBQUcscUJBQW1CQyxFQUFFLGdCQUFGLENBQW5CLEdBQXVDLE9BQS9FLEVBQXdGLFNBQU9BLEVBQUUsZ0JBQUYsQ0FBUCxLQUE2QkQsS0FBRyxxQkFBbUJDLEVBQUUsZ0JBQUYsQ0FBbkIsR0FBdUMsT0FBdkUsRUFBZ0YsaUJBQWVBLEVBQUUsZ0JBQUYsQ0FBZixLQUFxQ0QsS0FBRyxxQkFBbUJDLEVBQUUsZ0JBQUYsQ0FBbkIsR0FBdUMsT0FBL0UsRUFBd0Ysa0JBQWdCQSxFQUFFLGtCQUFGLENBQWhCLElBQXVDLHFCQUFtQkEsRUFBRSxnQkFBRixDQUExRCxLQUFnRkQsS0FBRyxxREFBbkYsRUFBMEksa0JBQWdCQyxFQUFFLGtCQUFGLENBQWhCLElBQzlkLG1CQUFpQkEsRUFBRSxnQkFBRixDQUQ2YyxLQUN2YkQsS0FBRyxtREFEb2IsRUFDL1gscUJBQW1CQyxFQUFFLGdCQUFGLENBQW5CLEtBQXlDRCxLQUFHLHNDQUE1QyxFQUFvRixvQkFBa0JDLEVBQUUsZ0JBQUYsQ0FBbEIsS0FBd0NELEtBQUcscUNBQTNDLEVBQWtGLG9CQUFrQkMsRUFBRSxnQkFBRixDQUFsQixLQUF3Q0QsS0FBRyxxQ0FBM0MsRUFBa0YsWUFBVUMsRUFBRSxrQkFBRixDQUFWLElBQWlDLHFCQUFtQkEsRUFBRSxnQkFBRixDQUFwRCxLQUEwRUQsS0FBRyxrRUFBN0UsRUFBaUosWUFBVUMsRUFBRSxrQkFBRixDQUFWLElBQ3hlLG1CQUFpQkEsRUFBRSxnQkFBRixDQUR1ZCxLQUNqY0QsS0FBRyw4REFEOGIsRUFDOVgsbUJBQWlCQyxFQUFFLGdCQUFGLENBQWpCLEtBQXVDRCxLQUFHLG9DQUExQyxFQUFnRixlQUFhQyxFQUFFLGdCQUFGLENBQWIsS0FBbUNELEtBQUcsZ0NBQXRDLEVBQXdFLDZCQUEyQkMsRUFBRSxnQkFBRixDQUEzQixLQUFpREQsS0FBRyw4Q0FBcEQsRUFBb0csOEJBQTRCQyxFQUFFLGdCQUFGLENBQTVCLEtBQWtERCxLQUFHLCtDQUFyRCxFQUFzRyxxQkFBbUJDLEVBQUUsZ0JBQUYsQ0FBbkIsS0FBeUNELEtBQ2pmLHNDQUR3YyxFQUNoYSxpQkFBZUMsRUFBRSxnQkFBRixDQUFmLEtBQXFDRCxLQUFHLGtDQUF4QyxFQUE0RSxvQkFBa0JDLEVBQUUsZ0JBQUYsQ0FBbEIsS0FBd0NELEtBQUcscUNBQTNDLEVBQWtGLDBCQUF3QkMsRUFBRSxnQkFBRixDQUF4QixLQUE4Q0QsS0FBRywyQ0FBakQsRUFBOEYsT0FBT0EsQ0FBUDtBQUFTO0FBQzlTLFNBQVM0d0QsZUFBVCxDQUF5QjN3RCxDQUF6QixFQUEyQjtBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTLElBQUcsZUFBYUMsRUFBRTRxRCxjQUFmLElBQStCLFlBQVU1cUQsRUFBRTRxRCxjQUEzQyxJQUEyRCxlQUFhNXFELEVBQUU0b0QsT0FBN0UsRUFBcUYsU0FBTzVvRCxFQUFFLGlCQUFGLENBQVAsS0FBOEJELEtBQUcsc0JBQWpDLEdBQXlELFNBQU9DLEVBQUUsaUJBQUYsQ0FBUCxLQUE4QkQsS0FBRyxxQkFBakMsQ0FBekQsRUFBaUgsU0FBT0MsRUFBRSx1QkFBRixDQUFQLEtBQW9DRCxLQUFHLCtCQUF2QyxDQUFqSCxFQUF5TCxTQUFPQyxFQUFFLGlCQUFGLENBQVAsS0FBOEJELEtBQUcseUJBQWpDLENBQXpMLEVBQXFQLFNBQU9DLEVBQUUsc0JBQUYsQ0FBUCxLQUFtQ0QsS0FBRyw4QkFBdEMsQ0FBclAsRUFBMlQsU0FBT0MsRUFBRSxtQkFBRixDQUFQLEtBQWdDRCxLQUFHLDJCQUFuQyxDQUEzVCxFQUNqSSxTQUFPQyxFQUFFLHlCQUFGLENBQVAsS0FBc0NELEtBQUcsaUNBQXpDLENBRGlJLEVBQ3JELFNBQU9DLEVBQUUsZ0JBQUYsQ0FBUCxLQUE2QkQsS0FBRyx3QkFBaEMsQ0FEcUQsRUFDSyxTQUFPQyxFQUFFLHVCQUFGLENBQVAsS0FBb0NELEtBQUcsK0JBQXZDLENBREwsRUFDNkUsU0FBT0MsRUFBRSxtQkFBRixDQUFQLEtBQWdDRCxLQUFHLDJCQUFuQyxDQUQ3RSxFQUM2SSxTQUFPQyxFQUFFLHNCQUFGLENBQVAsS0FBbUNELEtBQUcsOEJBQXRDLENBRDdJLEVBQ21OLFNBQU9DLEVBQUUsMkJBQUYsQ0FBUCxLQUF3Q0QsS0FBRyxtQ0FBM0MsQ0FEbk4sRUFDbVMsU0FBT0MsRUFBRSx1QkFBRixDQUFQLEtBQW9DRCxLQUFHLCtCQUF2QyxDQURuUyxFQUMyVyxTQUFPQyxFQUFFLG9CQUFGLENBQVAsS0FDM2VELEtBQUcsNEJBRHdlLENBRDNXLENBRS9GLE9BQU9BLENBQVA7QUFBUztBQUMzQyxJQUFJcXZELCtCQUE2QixTQUE3QkEsNEJBQTZCLENBQVNwdkQsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVNDLEVBQUVvZ0IsS0FBRixLQUFVcmdCLEtBQUcsWUFBVUMsRUFBRW9nQixLQUFaLEdBQWtCLFNBQS9CLEVBQTBDcGdCLEVBQUU2aEIsTUFBRixLQUFXOWhCLEtBQUcsYUFBV0MsRUFBRTZoQixNQUFiLEdBQW9CLFNBQWxDLEVBQTZDN2hCLEVBQUVvMUQsUUFBRixLQUFhcjFELEtBQUcsZUFBYUMsRUFBRW8xRCxRQUFmLEdBQXdCLFNBQXhDLEVBQW1EcDFELEVBQUVxMUQsU0FBRixLQUFjdDFELEtBQUcsZ0JBQWNDLEVBQUVxMUQsU0FBaEIsR0FBMEIsU0FBM0MsRUFBc0RyMUQsRUFBRXEwRCxTQUFGLEtBQWN0MEQsS0FBRyxnQkFBY0MsRUFBRXEwRCxTQUFoQixHQUEwQixTQUEzQyxFQUFzRHIwRCxFQUFFNDBELFFBQUYsS0FBYTcwRCxLQUFHLGVBQWFDLEVBQUU0MEQsUUFBZixHQUF3QixZQUF4QyxFQUFzRDUwRCxFQUFFczFELE9BQUYsS0FBWXYxRCxLQUFHLGtCQUFnQkMsRUFBRXMxRCxPQUFsQixHQUEwQixPQUF6QyxFQUFrRHQxRCxFQUFFdTFELE9BQUYsS0FBWXgxRCxLQUFHLGtCQUFnQkMsRUFBRXUxRCxPQUFsQixHQUEwQixPQUF6QyxFQUFrRCxTQUFPdjFELEVBQUV3MUQsTUFBVCxLQUFrQnoxRCxLQUFHLGFBQXJCLEVBQW9DLFNBQU9DLEVBQUV5MUQsS0FBVCxLQUN6ZTExRCxLQUFHLFlBRHNlLEVBQ3hkQyxFQUFFMDFELEdBQUYsS0FBUTMxRCxLQUFHLDZCQUEyQkMsRUFBRTAxRCxHQUE3QixHQUFpQyxTQUE1QyxFQUF1RDExRCxFQUFFLGVBQUYsTUFBcUJELEtBQUcseUJBQXVCQyxFQUFFLGVBQUYsQ0FBdkIsR0FBMEMsT0FBbEUsRUFBMkVBLEVBQUUsZ0JBQUYsTUFBc0JELEtBQUcsd0JBQXNCQyxFQUFFLGdCQUFGLENBQXRCLEdBQTBDLFNBQW5FLEVBQThFQSxFQUFFLFdBQUYsTUFBaUJELEtBQUcsa0JBQWdCQyxFQUFFLFdBQUYsQ0FBaEIsR0FBK0IsT0FBbkQsRUFBNEQsVUFBUUEsRUFBRSxpQ0FBRixDQUFSLEtBQStDRCxLQUFHLFdBQWxELEVBQStELGVBQWFDLEVBQUUsaUNBQUYsQ0FBYixLQUFvREQsS0FBRyxnQkFBdkQsRUFBeUUsU0FBT0MsRUFBRSx3QkFBRixDQUFQLEtBQXFDRCxLQUFHLHNCQUF4QyxFQUFnRSxTQUFPQyxFQUFFLHdCQUFGLENBQVAsS0FDcmVELEtBQUcsc0JBRGtlLEVBQzFjLFNBQU9DLEVBQUUsd0JBQUYsQ0FBUCxLQUFxQ0QsS0FBRyxzQkFBeEMsRUFBZ0UsU0FBT0MsRUFBRSxzQkFBRixDQUFQLEtBQW1DRCxLQUFHLGdDQUF0QyxFQUF3RSxTQUFPQyxFQUFFLHFCQUFGLENBQVAsS0FBa0NELEtBQUcsc0JBQXJDLEVBQTZELFNBQU9DLEVBQUUsMEJBQUYsQ0FBUCxLQUF1Q0QsS0FBRyx3QkFBMUMsRUFBb0UsU0FBT0MsRUFBRSw2QkFBRixDQUFQLEtBQTBDRCxLQUFHLG1DQUE3QyxFQUFrRixTQUFPQyxFQUFFLDBCQUFGLENBQVAsS0FBdUNELEtBQUcsMENBQTFDLEVBQXNGLFNBQU9DLEVBQUUyMUQsSUFBVCxLQUFnQjUxRCxLQUFHLFdBQW5CLEVBQWdDLFNBQU9DLEVBQUU0MUQsU0FBVCxLQUM1ZTcxRCxLQUFHLGdCQUR5ZSxFQUN2ZCxTQUFPQyxFQUFFNjFELEtBQVQsS0FBaUI5MUQsS0FBRyxZQUFwQixFQUFrQyxTQUFPQyxFQUFFODFELGNBQVQsS0FBMEIvMUQsS0FBRyxxQkFBN0IsRUFBb0QsU0FBT0MsRUFBRSsxRCxlQUFULEtBQTJCaDJELEtBQUcsc0JBQTlCLEVBQXNELFNBQU9DLEVBQUVnMkQsWUFBVCxLQUF3QmoyRCxLQUFHLG1CQUEzQixFQUFnRCxTQUFPQyxFQUFFaTJELFNBQVQsS0FBcUJsMkQsS0FBRyxnQkFBeEIsRUFBMEMsU0FBT0MsRUFBRWsyRCxXQUFULEtBQXVCbjJELEtBQUcsa0JBQTFCLEVBQThDLFNBQU9DLEVBQUVtMkQsVUFBVCxLQUFzQnAyRCxLQUFHLGlCQUF6QixFQUE0QyxVQUFRQyxFQUFFbTJELFVBQVYsS0FBdUJwMkQsS0FBRyxzQkFBMUIsRUFBa0QsUUFBTUMsRUFBRW0yRCxVQUFSLEtBQXFCcDJELEtBQUcsb0JBQXhCLEVBQThDLE9BQU9BLENBQVA7QUFBUyxDQUgvYjtBQUFBLElBR2djc3ZELHNCQUFvQixTQUFwQkEsbUJBQW9CLENBQVNydkQsQ0FBVCxFQUFXO0FBQUMsUUFBSUQsSUFBRSxFQUFOLENBQVMsSUFBRyxhQUN4ZUMsRUFBRTRvRCxPQURzZSxJQUM3ZCxlQUFhNW9ELEVBQUVtc0QsTUFEOGMsSUFDdGMsWUFBVW5zRCxFQUFFdXFELFVBRHViLEVBQzVheHFELEtBQUdtMUQsV0FBV2wxRCxDQUFYLENBQUgsRUFBaUJBLEVBQUVvMkQsWUFBRixLQUFpQnIyRCxLQUFHQyxFQUFFbzJELFlBQUYsR0FBZSxPQUFuQyxDQUFqQixFQUE2RHAyRCxFQUFFbU8sSUFBRixLQUFTcE8sS0FBR0MsRUFBRW1PLElBQUYsR0FBTyxPQUFuQixDQUE3RCxFQUF5Rm5PLEVBQUUsWUFBRixNQUFrQkQsS0FBR0MsRUFBRSxZQUFGLElBQWdCLE9BQXJDLENBQXpGLEVBQXVJQSxFQUFFLFNBQUYsTUFBZUQsS0FBR0MsRUFBRSxTQUFGLElBQWEsT0FBL0IsQ0FBdkksQ0FBK0ssU0FBT0EsRUFBRXEyRCxVQUFULEtBQXNCdDJELEtBQUcsK0JBQXpCLEVBQTBELFlBQVVDLEVBQUUscUJBQUYsQ0FBVixLQUFxQ0QsS0FBRyx5Q0FBeEMsRUFBbUYsV0FBU0MsRUFBRSxxQkFBRixDQUFULEtBQW9DRCxLQUFHLG9DQUF2QyxFQUE2RSxjQUFZQyxFQUFFLHFCQUFGLENBQVosS0FBdUNELEtBQUcsMkNBQTFDO0FBQ2xjLGtCQUFZQyxFQUFFLHFCQUFGLENBQVosS0FBdUNELEtBQUcsMkNBQTFDLEVBQXVGLG1CQUFpQkMsRUFBRSxxQkFBRixDQUFqQixLQUE0Q0QsS0FBRyxnREFBL0MsRUFBaUcsY0FBWUMsRUFBRSxxQkFBRixDQUFaLEtBQXVDRCxLQUFHLG9DQUExQyxFQUFnRixjQUFZQyxFQUFFLHFCQUFGLENBQVosS0FBdUNELEtBQUcsaURBQTFDLEVBQTZGLG1CQUFpQkMsRUFBRSxxQkFBRixDQUFqQixLQUE0Q0QsS0FBRyw4REFBL0MsRUFBK0csYUFBV0MsRUFBRSxxQkFBRixDQUFYLEtBQ25kRCxLQUFHLG9DQURnZCxFQUMxYSxZQUFVQyxFQUFFLHFCQUFGLENBQVYsS0FBcUNELEtBQUcsbUNBQXhDLEVBQTZFLFlBQVVDLEVBQUUscUJBQUYsQ0FBVixLQUFxQ0QsS0FBRyxtQ0FBeEMsRUFBNkUscUJBQW1CQyxFQUFFLHFCQUFGLENBQW5CLEtBQThDRCxLQUFHLGtEQUFqRCxFQUFxRyxnQkFBY0MsRUFBRSxxQkFBRixDQUFkLEtBQXlDRCxLQUFHLHNDQUE1QyxFQUFvRixZQUFVQyxFQUFFLHFCQUFGLENBQVYsS0FBcUNELEtBQUcsbUNBQXhDLEVBQTZFLE9BQU9BLENBQVA7QUFBUyxDQU52ZDtBQU9PLFNBQVN5d0QseUJBQVQsQ0FBbUN4d0QsQ0FBbkMsRUFBcUM7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBU0MsRUFBRSxnQkFBRixNQUFzQkQsS0FBRyxxQkFBbUJDLEVBQUUsZ0JBQUYsQ0FBbkIsR0FBdUMsT0FBaEUsRUFBeUVBLEVBQUUsaUJBQUYsTUFBdUJELEtBQUcsc0JBQW9CQyxFQUFFLGlCQUFGLENBQXBCLEdBQXlDLFNBQW5FLEVBQThFQSxFQUFFLGdCQUFGLE1BQXNCRCxLQUFHLFlBQVVDLEVBQUUsZ0JBQUYsQ0FBVixHQUE4QixPQUF2RCxFQUFnRUEsRUFBRSxlQUFGLE1BQXFCRCxLQUFHLG9CQUFrQkMsRUFBRSxlQUFGLENBQWxCLEdBQXFDLE9BQTdELEVBQXNFQSxFQUFFLFlBQUYsTUFBa0JELEtBQUcsaUJBQWVDLEVBQUUsYUFBRixDQUFmLEdBQWdDLE9BQXJELEVBQThEQSxFQUFFLFlBQUYsTUFBa0JELEtBQUcsaUJBQWVDLEVBQUUsWUFBRixDQUFmLEdBQStCLE9BQXBELEVBQTZEQSxFQUFFLGFBQUYsTUFBbUJELEtBQUcsa0JBQWdCQyxFQUFFLGFBQUYsQ0FBaEIsR0FDaGUsU0FEMGMsRUFDL2JBLEVBQUUsZUFBRixNQUFxQkQsS0FBRyxvQkFBa0JDLEVBQUUsZUFBRixDQUFsQixHQUFxQyxRQUE3RCxFQUF1RUEsRUFBRSxrQkFBRixNQUF3QkQsS0FBRyx1QkFBcUJDLEVBQUUsa0JBQUYsQ0FBckIsR0FBMkMsUUFBdEUsRUFBZ0ZBLEVBQUUsZ0JBQUYsTUFBc0JELEtBQUcscUJBQW1CQyxFQUFFLGdCQUFGLENBQW5CLEdBQXVDLFFBQWhFLEVBQTBFQSxFQUFFLGVBQUYsTUFBcUJELEtBQUcsb0JBQWtCQyxFQUFFLGVBQUYsQ0FBbEIsR0FBcUMsT0FBN0QsRUFBc0UsT0FBT0QsQ0FBUDtBQUFTO0FBQ3hULFNBQVN3d0Qsc0JBQVQsQ0FBZ0N2d0QsQ0FBaEMsRUFBa0M7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxrQkFBZ0JDLEVBQUU0dEQsUUFBbEIsS0FBNkIsWUFBVTV0RCxFQUFFczJELFlBQVosS0FBMkJ2MkQsS0FBRyxxQkFBOUIsR0FBcUQsYUFBV0MsRUFBRXMyRCxZQUFiLEtBQTRCdjJELEtBQUcsc0JBQS9CLENBQXJELEVBQTRHLFlBQVVDLEVBQUVzMkQsWUFBWixLQUEyQnYyRCxLQUFHLHFCQUE5QixDQUE1RyxFQUFpSyxZQUFVQyxFQUFFLG1CQUFGLENBQVYsS0FBbUNELEtBQUcsOEJBQXRDLENBQWpLLEVBQXVPLFdBQVNDLEVBQUUsbUJBQUYsQ0FBVCxLQUFrQ0QsS0FBRyw2QkFBckMsQ0FBdk8sRUFBMlMsVUFBUUMsRUFBRSxtQkFBRixDQUFSLEtBQWlDRCxLQUFHLDRCQUFwQyxDQUEzUyxFQUE2VyxVQUFRQyxFQUFFLG1CQUFGLENBQVIsS0FBaUNELEtBQUcsNEJBQXBDLENBQTdXLEVBQ2hGLGFBQVdDLEVBQUUsbUJBQUYsQ0FBWCxLQUFvQ0QsS0FBRywrQkFBdkMsQ0FEZ0YsRUFDUixhQUFXQyxFQUFFLG1CQUFGLENBQVgsS0FBb0NELEtBQUcsK0JBQXZDLENBRFEsRUFDZ0UsVUFBUUMsRUFBRSxtQkFBRixDQUFSLEtBQWlDRCxLQUFHLDRCQUFwQyxDQURoRSxFQUNrSSxVQUFRQyxFQUFFLG1CQUFGLENBQVIsS0FBaUNELEtBQUcsNEJBQXBDLENBRGxJLEVBQ29NLGNBQVlDLEVBQUUsbUJBQUYsQ0FBWixLQUFxQ0QsS0FBRyxnQ0FBeEMsQ0FEak8sRUFDNFMsT0FBT0EsQ0FBUDtBQUFTO0FBQ2pXLFNBQVM2ekQsV0FBVCxDQUFxQjV6RCxDQUFyQixFQUF1QjtBQUFDLFFBQUlELElBQUUsRUFBTixDQUFTLFdBQVNDLEVBQUU4b0QsUUFBWCxLQUFzQjlvRCxFQUFFLGlCQUFGLE1BQXVCRCxLQUFHLFdBQVNDLEVBQUUsaUJBQUYsQ0FBVCxHQUE4QixPQUF4RCxHQUFpRUEsRUFBRSxhQUFGLE1BQW1CRCxLQUFHLFlBQVVDLEVBQUUsYUFBRixDQUFWLEdBQTJCLE9BQWpELENBQWpFLEVBQTJIQSxFQUFFLGlCQUFGLE1BQXVCRCxLQUFHLGdCQUFjQyxFQUFFLGlCQUFGLENBQWQsR0FBbUMsT0FBN0QsQ0FBM0gsRUFBaU1BLEVBQUUseUJBQUYsTUFBK0JELEtBQUcsbUJBQWlCQyxFQUFFLHlCQUFGLENBQWpCLEdBQThDLE9BQWhGLENBQWpNLEVBQTBSQSxFQUFFLHFCQUFGLE1BQTJCRCxLQUFHLG9CQUFrQkMsRUFBRSxxQkFBRixDQUFsQixHQUEyQyxPQUF6RSxDQUExUixFQUE0V0EsRUFBRSxjQUFGLE1BQW9CRCxLQUFHLGFBQVdDLEVBQUUsY0FBRixDQUFYLEdBQTZCLE9BQXBELENBQTVXLEVBQXlhQSxFQUFFLGFBQUYsTUFBbUJELEtBQ3RmLFlBQVVDLEVBQUUsYUFBRixDQUFWLEdBQTJCLE9BRHdjLENBQXphLEVBQ3RCQSxFQUFFLGFBQUYsTUFBbUJELElBQUUsWUFBVUMsRUFBRSxhQUFGLENBQVYsR0FBMkJELElBQUUsb0JBQTdCLEdBQWtELFVBQVFDLEVBQUUsYUFBRixDQUFSLEdBQXlCRCxJQUFFLGtCQUEzQixHQUE4Q0EsS0FBRyxZQUFVQyxFQUFFLGFBQUYsQ0FBVixHQUEyQixPQUE5QixDQUFySCxDQURzQixFQUN1SSxTQUFPQSxFQUFFLDJCQUFGLENBQVAsS0FBd0NELEtBQUcsK0JBQTNDLENBRHZJLEVBQ21OLFFBQU1DLEVBQUUsMkJBQUYsQ0FBTixLQUF1Q0QsS0FBRyw4QkFBMUMsQ0FEbk4sRUFDNlIsU0FBT0MsRUFBRSw0QkFBRixDQUFQLEtBQXlDRCxLQUFHLGdDQUE1QyxDQUQ3UixFQUMyVyxRQUFNQyxFQUFFLDRCQUFGLENBQU4sS0FBd0NELEtBQUcsK0JBQTNDLENBRDNXLEVBQ3ViLFNBQ3JmQyxFQUFFdTJELE1BRG1mLEtBQzFleDJELEtBQUcsaUJBRHVlLENBRHZiLEVBRTdCLFFBQU1DLEVBQUV1MkQsTUFBUixLQUFpQngyRCxLQUFHLHlCQUFwQixDQUY2QixFQUVrQixxQkFBbUJDLEVBQUV1MkQsTUFBckIsS0FBOEJ4MkQsS0FBRyxnQ0FBakMsQ0FGeEMsRUFFNEcsT0FBT0EsQ0FBUDtBQUFTO0FBQ3RKLFNBQVN1d0QsbUJBQVQsQ0FBNkJ0d0QsQ0FBN0IsRUFBK0I7QUFBQyxRQUFJRCxJQUFFLEVBQU4sQ0FBUyxJQUFHQyxFQUFFLGdCQUFGLENBQUgsRUFBdUIsUUFBT0EsRUFBRSxnQkFBRixDQUFQLEdBQTRCLEtBQUssV0FBTDtBQUFpQkQsaUJBQUcsc0JBQUgsQ0FBMEIsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsb0JBQUgsQ0FBd0IsTUFBTSxLQUFLLFNBQUw7QUFBZUEsaUJBQUcsb0JBQUgsQ0FBd0IsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLHNCQUFILENBQTBCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyxzQkFBSCxDQUEwQixNQUFNO0FBQVFBLGlCQUFHLG9CQUFILENBQWpSLENBQXlTQyxFQUFFLGtCQUFGLE1BQXdCLFVBQVFBLEVBQUUsa0JBQUYsQ0FBUixLQUFnQ0QsS0FBRyxtQkFBbkMsR0FBd0QsWUFBVUMsRUFBRSxrQkFBRixDQUFWLEtBQWtDRCxLQUFHLHFCQUFyQyxDQUFoRjtBQUM1V0MsTUFBRXcyRCxjQUFGLEtBQW1CLFdBQVN4MkQsRUFBRXcyRCxjQUFYLEdBQTBCejJELEtBQUcsNEJBQTdCLEdBQTBELFdBQVNDLEVBQUV3MkQsY0FBWCxLQUE0QnoyRCxLQUFHLDRCQUEvQixDQUE3RSxFQUEySSxTQUFPQyxFQUFFeTJELE1BQVQsS0FBa0IxMkQsS0FBRyxzQkFBckIsRUFBNkMsU0FBT0MsRUFBRTAyRCxTQUFULEtBQXFCMzJELEtBQUcseUJBQXhCLEVBQW1ELElBQUdDLEVBQUUyMkQsUUFBTCxFQUFjLFFBQU8zMkQsRUFBRTIyRCxRQUFULEdBQW1CLEtBQUssU0FBTDtBQUFlNTJELGlCQUFHLDZCQUFILENBQWlDLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLHNCQUFILENBQTBCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyx5QkFBSCxDQUE2QixNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsMEJBQUgsQ0FBOEIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsc0JBQUg7QUFDaGUsa0JBQU0sS0FBSyxpQkFBTDtBQUF1QkEsaUJBQUcsZ0NBQUgsQ0FBb0MsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcscUJBQUgsQ0FBeUIsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsdUJBQUgsQ0FBMkIsTUFBTSxLQUFLLFlBQUw7QUFBa0JBLGlCQUFHLDJCQUFILENBQStCLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLHVCQUFILENBQTJCb08sUUFBTSxhQUFOLENBQW9CLE1BQU0sS0FBSyxPQUFMO0FBQWFwTyxpQkFBRyxzQkFBSCxDQUEwQixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsNEJBQUgsQ0FBZ0MsTUFBTSxLQUFLLGVBQUw7QUFBcUJBLGlCQUFHLDhCQUFILENBQWtDLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLHVCQUFILENBQTJCLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUN6ZixxQkFEeWYsQ0FDbmUsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLGlCQUFHLDZCQUFILENBQWlDLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLHVCQUFILENBQTJCLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRywwQkFBSCxDQUE4QixNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRyx1QkFBSCxDQUEyQixNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsMkJBQUgsQ0FBK0IsTUFBTTtBQUFRQSxpQkFBRyx3QkFBSCxDQUZyRCxDQUVpRixJQUFHQyxFQUFFNDJELFlBQUwsRUFBa0IsUUFBTzUyRCxFQUFFNDJELFlBQVQsR0FBdUIsS0FBSyxVQUFMO0FBQWdCNzJELGlCQUFHLGtDQUFILENBQXNDLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLDRCQUFILENBQWdDLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyw2QkFBSDtBQUNoZixrQkFBTSxLQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyxtQ0FBSCxDQUF1QyxNQUFNLEtBQUssY0FBTDtBQUFvQkEsaUJBQUcsaUNBQUgsQ0FBcUMsTUFBTSxLQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyxtQ0FBSCxDQUF1QyxNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQUcsMkJBQUgsQ0FBK0IsS0FBSyxrQkFBTDtBQUF3QkEsaUJBQUcscUNBQUgsQ0FBeUMsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLDZCQUFILENBQWlDLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyw4QkFBSCxDQUFrQyxNQUFNLEtBQUssa0JBQUw7QUFBd0JBLGlCQUFHLHFDQUFIO0FBQzVjLGtCQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsMkJBQUgsQ0FBK0IsTUFBTSxLQUFLLGVBQUw7QUFBcUJBLGlCQUFHLGtDQUFILENBQXNDLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyw2QkFBSCxDQUFpQyxNQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLG1DQUFILENBQXVDLE1BQU0sS0FBSyxpQkFBTDtBQUF1QkEsaUJBQUcsb0NBQUgsQ0FBd0MsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGdDQUFILENBQW9DLE1BQU0sS0FBSyxjQUFMO0FBQW9CQSxpQkFBRyxpQ0FBSCxDQUFxQyxNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQ2hnQiwrQkFEZ2dCLENBQ2hlLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLDJCQUFILENBQStCLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyw2QkFBSCxDQUFpQyxNQUFNLEtBQUssa0JBQUw7QUFBd0JBLGlCQUFHLHFDQUFILENBQXlDLE1BQU0sS0FBSyx1QkFBTDtBQUE2QkEsaUJBQUcsMENBQUgsQ0FBOEMsTUFBTSxLQUFLLHFCQUFMO0FBQTJCQSxpQkFBRyx3Q0FBSCxDQUE0QyxNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLDZCQUFILENBQWlDLE1BQU0sS0FBSyxtQkFBTDtBQUF5QkEsaUJBQzlmLHNDQUQ4ZixDQUN2ZCxNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLG9CQUFMO0FBQTBCQSxpQkFBRyx1Q0FBSCxDQUEyQyxNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLGtCQUFMO0FBQXdCQSxpQkFBRyxxQ0FBSCxDQUF5QyxNQUFNLEtBQUssb0JBQUw7QUFBMEJBLGlCQUFHLHVDQUFILENBQTJDLE1BQU0sS0FBSyxzQkFBTDtBQUE0QkEsaUJBQUcseUNBQUgsQ0FBNkMsTUFBTSxLQUFLLGdCQUFMO0FBQXNCQSxpQkFBRyxtQ0FBSDtBQUMvZCxrQkFBTSxLQUFLLG9CQUFMO0FBQTBCQSxpQkFBRyx1Q0FBSCxDQUEyQyxNQUFNLEtBQUssWUFBTDtBQUFrQkEsaUJBQUcsK0JBQUgsQ0FBbUMsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGdDQUFILENBQW9DLE1BQU0sS0FBSyxzQkFBTDtBQUE0QkEsaUJBQUcseUNBQUgsQ0FBNkMsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLDhCQUFILENBQWtDLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyw2QkFBSCxDQUFpQyxNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLDZCQUFILENBQWlDO0FBQ2hmLGFBQUssbUJBQUw7QUFBeUJBLGlCQUFHLHNDQUFILENBQTBDLE1BQU0sS0FBSyxlQUFMO0FBQXFCQSxpQkFBRyxrQ0FBSCxDQUFzQyxNQUFNLEtBQUssaUJBQUw7QUFBdUJBLGlCQUFHLG9DQUFILENBQXdDLE1BQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcsbUNBQUgsQ0FBdUMsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGdDQUFILENBQW9DLE1BQU0sS0FBSyxrQkFBTDtBQUF3QkEsaUJBQUcsc0NBQUgsQ0FBMEMsTUFBTSxLQUFLLFdBQUw7QUFBaUJBLGlCQUFHLDhCQUFILENBQWtDLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLDJCQUFIO0FBQzFkLGtCQUFNLEtBQUsseUJBQUw7QUFBK0JBLGlCQUFHLDRDQUFILENBQWdELE1BQU0sS0FBSyxnQ0FBTDtBQUFzQ0EsaUJBQUcsbURBQUgsQ0FBdUQsTUFBTSxLQUFLLGtCQUFMO0FBQXdCQSxpQkFBRyxxQ0FBSCxDQUF5QyxNQUFNLEtBQUssaUJBQUw7QUFBdUJBLGlCQUFHLG9DQUFILENBQXdDLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLDRCQUFILENBQWdDLE1BQU0sS0FBSyxrQkFBTDtBQUF3QkEsaUJBQUcscUNBQUgsQ0FBeUMsTUFBTSxLQUFLLG1DQUFMO0FBQXlDQSxpQkFBRyxzREFBSDtBQUMvZSxrQkFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGdDQUFILENBQW9DLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyw4QkFBSCxDQUFrQyxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyw0QkFBSCxDQUFnQyxNQUFNLEtBQUssY0FBTDtBQUFvQkEsaUJBQUcsaUNBQUgsQ0FBcUMsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGdDQUFILENBQW9DLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLDRCQUFILENBQWdDLE1BQU0sS0FBSyxZQUFMO0FBQWtCQSxpQkFBRywrQkFBSCxDQUFtQyxNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGdDQUFIO0FBQ3ZlLGtCQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyw0QkFBSCxDQUFnQyxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyw0QkFBSCxDQUFnQyxNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLHFCQUFMO0FBQTJCQSxpQkFBRyx3Q0FBSCxDQUE0QyxNQUFNLEtBQUssbUJBQUw7QUFBeUJBLGlCQUFHLHNDQUFILENBQTBDLE1BQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcsbUNBQUgsQ0FBdUMsTUFBTSxLQUFLLHVCQUFMO0FBQTZCQSxpQkFBRywwQ0FBSCxDQUE4QyxNQUFNLEtBQUssa0JBQUw7QUFBd0JBLGlCQUFHLHFDQUFIO0FBQzNlLGtCQUFNLEtBQUssbUJBQUw7QUFBeUJBLGlCQUFHLHNDQUFILENBQTBDLE1BQU0sS0FBSyxpQkFBTDtBQUF1QkEsaUJBQUcsb0NBQUgsQ0FBd0MsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLGlCQUFHLGlDQUFILENBQXFDLE1BQU0sS0FBSyxtQkFBTDtBQUF5QkEsaUJBQUcsc0NBQUgsQ0FBMEMsTUFBTSxLQUFLLFVBQUw7QUFBZ0JBLGlCQUFHLDZCQUFILENBQWlDLE1BQU0sS0FBSyxtQkFBTDtBQUF5QkEsaUJBQUcsc0NBQUgsQ0FBMEMsTUFBTSxLQUFLLGlCQUFMO0FBQXVCQSxpQkFBRyxvQ0FBSCxDQUF3QyxNQUFNLEtBQUssYUFBTDtBQUFtQkEsaUJBQ3BmLGdDQURvZixDQUNuZCxNQUFNLEtBQUssbUJBQUw7QUFBeUJBLGlCQUFHLHNDQUFILENBQTBDLE1BQU0sS0FBSyxRQUFMO0FBQWNBLGlCQUFHLDJCQUFILENBQStCLE1BQU0sS0FBSyxTQUFMO0FBQWVBLGlCQUFHLDRCQUFILENBQWdDLE1BQU0sS0FBSyxXQUFMO0FBQWlCQSxpQkFBRyw4QkFBSCxDQUFrQyxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyw0QkFBSCxDQUFnQyxNQUFNLEtBQUssbUJBQUw7QUFBeUJBLGlCQUFHLHNDQUFILENBQTBDLE1BQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcsbUNBQUgsQ0FBdUMsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGdDQUFIO0FBQ3JlLGtCQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLG1DQUFILENBQXVDLE1BQU0sS0FBSyxjQUFMO0FBQW9CQSxpQkFBRyxpQ0FBSCxDQUFxQyxNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLGlCQUFMO0FBQXVCQSxpQkFBRyxvQ0FBSCxDQUF3QyxNQUFNLEtBQUssZ0JBQUw7QUFBc0JBLGlCQUFHLG1DQUFILENBQXVDLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyw2QkFBSCxDQUFpQyxNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsMEJBQUgsQ0FBOEIsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQ25mLDBCQURtZixDQUN4ZCxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyw0QkFBSCxDQUFnQyxNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyx5QkFBSCxDQUE2QixNQUFNLEtBQUssT0FBTDtBQUFhQSxpQkFBRywwQkFBSCxDQUE4QixNQUFNLEtBQUssVUFBTDtBQUFnQkEsaUJBQUcsNkJBQUgsQ0FBaUMsTUFBTSxLQUFLLGNBQUw7QUFBb0JBLGlCQUFHLGlDQUFILENBQXFDLE1BQU0sS0FBSyxVQUFMO0FBQWdCQSxpQkFBRyw2QkFBSCxDQUFpQyxNQUFNLEtBQUssV0FBTDtBQUFpQkEsaUJBQUcsOEJBQUgsQ0FBa0MsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGdDQUFILENBQW9DLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLHdCQUFIO0FBQ3BlLGtCQUFNLEtBQUssaUJBQUw7QUFBdUJBLGlCQUFHLG9DQUFILENBQXdDLE1BQU0sS0FBSyxnQkFBTDtBQUFzQkEsaUJBQUcsbUNBQUgsQ0FBdUMsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsMkJBQUgsQ0FBK0IsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsMkJBQUgsQ0FBK0IsTUFBTSxLQUFLLGFBQUw7QUFBbUJBLGlCQUFHLGdDQUFILENBQW9DLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLDBCQUFILENBQThCLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLDBCQUFILENBQThCLE1BQU0sS0FBSyxPQUFMO0FBQWFBLGlCQUFHLDBCQUFILENBQThCLE1BQU07QUFBUUEsaUJBQUcsY0FBSCxDQWR4SCxDQWMwSSxJQUFHQyxFQUFFNjJELFNBQUwsRUFBZSxRQUFPNzJELEVBQUU2MkQsU0FBVCxHQUFvQixLQUFLLElBQUw7QUFBVTkyRCxpQkFDL2dCLHNEQUQrZ0IsQ0FDeGQsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsNEVBQUgsQ0FBZ0YsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcscURBQUgsQ0FBeUQsTUFBTSxLQUFLLElBQUw7QUFBVUEsaUJBQUcsaUNBQUgsQ0FBcUMsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsZ0VBQUgsQ0FBb0UsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcscUZBQUgsQ0FBeUYsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsMkNBQUg7QUFDMWUsa0JBQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLHdEQUFILENBQThELE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLHVFQUFILENBQWlGLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLDRGQUFILENBQWdHLE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLHlFQUFILENBQStFLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLHdFQUFILENBQTRFLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUNwZiw0REFEb2YsQ0FDdmIsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsOERBQUgsQ0FBd0UsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsdUVBQUgsQ0FBNkUsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsb0VBQUgsQ0FBMEUsTUFBTSxLQUFLLE9BQUw7QUFBYUEsaUJBQUcsa0RBQUgsQ0FBc0QsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsMERBQUgsQ0FBOEQsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQzFmLG1EQUQwZixDQUNwYyxNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxxRkFBSCxDQUF5RixNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyxrRUFBSCxDQUF3RSxNQUFNLEtBQUssUUFBTDtBQUFjQSxpQkFBRywrREFBSCxDQUFxRSxNQUFNLEtBQUssU0FBTDtBQUFlQSxpQkFBRyxtRUFBSCxDQUF5RSxNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyx1REFBSDtBQUNsYyxrQkFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsdUNBQUgsQ0FBMkMsTUFBTSxLQUFLLElBQUw7QUFBVUEsaUJBQUcsdURBQUgsQ0FBK0QsTUFBTSxLQUFLLFFBQUw7QUFBY0EsaUJBQUcsOEVBQUgsQ0FBd0YsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsK0NBQUgsQ0FBbUQsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcseUVBQUgsQ0FBNkUsTUFBTSxLQUFLLE1BQUw7QUFBWUEsaUJBQUcsaURBQUgsQ0FBcUQsTUFBTSxLQUFLLEtBQUw7QUFBV0EsaUJBQUcsOEVBQUg7QUFDamYsa0JBQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLHNGQUFILENBQTBGLE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLG9EQUFILENBQTRELE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLG1FQUFILENBQTZFLE1BQU0sS0FBSyxJQUFMO0FBQVVBLGlCQUFHLDRDQUFILENBQWtELE1BQU0sS0FBSyxLQUFMO0FBQVdBLGlCQUFHLDRDQUFILENBQWdELE1BQU0sS0FBSyxNQUFMO0FBQVlBLGlCQUFHLDRFQUFIO0FBQzVhLGtCQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyw2Q0FBSCxDQUFpRCxNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRywwREFBSCxDQUE4RCxNQUFNLEtBQUssTUFBTDtBQUFZQSxpQkFBRyxtREFBSCxDQUF1RCxNQUFNLEtBQUssS0FBTDtBQUFXQSxpQkFBRyw4REFBSCxDQUFrRSxNQUFNO0FBQVFBLGlCQUFHLGNBQUgsQ0FQcUwsQ0FPbkssT0FBT0EsQ0FBUDtBQUFTLEtBQUkrMkQsa0JBQWdCLFNBQWhCQSxlQUFnQixDQUFTOTJELENBQVQsRUFBVztBQUFDQSxRQUFFQSxFQUFFb29ELGFBQUYsRUFBRixDQUFvQixJQUFJcm9ELElBQUUsRUFBTjtBQUFBLFFBQVNvb0QsQ0FBVCxDQUFXLEtBQUlBLENBQUosSUFBU25vRCxDQUFUO0FBQVdELFlBQUVBLElBQUVvb0QsQ0FBRixHQUFJLEdBQUosR0FBUW5vRCxFQUFFbW9ELENBQUYsQ0FBUixHQUFhLE9BQWY7QUFBWCxLQUFrQyxPQUFNLHNEQUFvRHBvRCxDQUFwRCxHQUFzRCxRQUE1RDtBQUFxRSxDQUF0SyxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDelAvVjtBQUNBOztBQUVBLEtBQUtpTCxHQUFMLEdBQVcsS0FBS0EsR0FBTCxJQUFZLEVBQXZCO0FBQ0EsS0FBS0EsR0FBTCxDQUFTeUssSUFBVCxHQUFnQixLQUFLekssR0FBTCxDQUFTeUssSUFBVCxJQUFpQixFQUFqQzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJOGdCLGdCQUFnQixFQUFwQjs7QUFFQSxJQUFJLE9BQU83dUIsT0FBUCxLQUFtQixXQUF2QixFQUFvQztBQUNsQyxNQUFJQSxRQUFROHVCLElBQVIsS0FBaUIsSUFBckIsRUFBMkI7QUFDekJELG9CQUFnQmhILHVGQUFoQjtBQUNELEdBRkQsTUFFTyxJQUFJN25CLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUNoQ0Qsb0JBQWdCOUcsd0ZBQWhCO0FBQ0QsR0FGTSxNQUVBO0FBQ0w7QUFDQThHLG9CQUFnQmhILHVGQUFoQjtBQUNEO0FBQ0Y7O0FBRUQsSUFBSXZrQixNQUFNLEtBQUtBLEdBQWY7QUFDTyxJQUFNZ3NELFFBQWI7QUFDRSxvQkFBWXo0RCxPQUFaLEVBQW9CO0FBQUE7O0FBQ2xCLFFBQUltSixPQUFKOztBQUVBLFNBQUtuSixPQUFMLEdBQWVJLE9BQU95RCxNQUFQLENBQWM7QUFDM0I5RCxxQkFBZTtBQURZLEtBQWQsRUFFWkMsT0FGWSxDQUFmO0FBR0EsUUFBSSxDQUFDLEtBQUtBLE9BQUwsQ0FBYUQsYUFBbEIsRUFBaUM7QUFDL0IsYUFBTyxLQUFQO0FBQ0Q7O0FBRUQwTSxRQUFJeUssSUFBSixDQUFTd2hELFlBQVQsR0FBd0Jqc0QsSUFBSXlLLElBQUosQ0FBU3doRCxZQUFULElBQXlCLEVBQWpEOztBQUVBOztBQUVBLFNBQUsxMUQscUJBQUwsR0FBNkIsRUFBN0I7QUFDQSxTQUFLK0gseUJBQUwsR0FBaUMsRUFBakM7QUFDQSxTQUFLbUMsaUJBQUwsR0FBeUIsRUFBekI7QUFDQSxTQUFLZ1AscUJBQUwsR0FBNkIsRUFBN0I7QUFDQSxTQUFLeThDLGNBQUwsR0FBc0IsRUFBdEI7QUFDQSxTQUFLdFcsYUFBTCxHQUFxQixFQUFyQjs7QUFFQTtBQUNBajFDLFdBQU9DLFlBQVAsR0FBc0JELE9BQU9DLFlBQVAsSUFBdUIsRUFBN0M7QUFDQUQsV0FBT0MsWUFBUCxDQUFvQkMsa0JBQXBCLEdBQXlDRixPQUFPQyxZQUFQLENBQW9CQyxrQkFBcEIsSUFBMEMsRUFBbkY7O0FBRUEsU0FBS3BOLFlBQUwsR0FBb0IsRUFBcEI7QUFDQSxTQUFLeUMsaUJBQUwsR0FBeUIrUCxTQUF6QjtBQUNBLFNBQUt2RixRQUFMLEdBQWdCLEVBQWhCO0FBQ0EsU0FBS21ELGNBQUwsR0FBc0IsRUFBdEI7O0FBRUEsU0FBSzRKLGdCQUFMLEdBQXdCLEVBQXhCO0FBQ0EsU0FBSzArQyxPQUFMLEdBQWUsRUFBZjs7QUFFQSxTQUFLOTFELGlCQUFMLEdBQXlCLEtBQXpCO0FBQ0EsU0FBS21LLGFBQUwsR0FBcUIsS0FBckI7O0FBRUE5RCxjQUFVLEtBQUtuSixPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQXJDOztBQUVBLFNBQUtxTSxLQUFMLEdBQWExRCxRQUFRckgsRUFBckI7O0FBRUEsU0FBS3hCLGlCQUFMLEdBQXlCLEtBQUtOLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0NzK0IsR0FBaEMsQ0FBb0NuK0IsU0FBcEMsR0FBZ0QsR0FBaEQsR0FBc0R3SSxRQUFRNDFCLE9BQXZGO0FBQ0EsU0FBS2p5QixhQUFMLEdBQXFCLEtBQUs5TSxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDcytCLEdBQWhDLENBQW9DcjhCLEtBQXBDLEdBQTRDLEdBQTVDLEdBQWtELEtBQUtvSyxLQUE1RTtBQUNBLFNBQUsrTyxvQkFBTCxHQUE0QixLQUFLNWIsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ3MrQixHQUFoQyxDQUFvQys1QixZQUFoRTtBQUNBO0FBQ0EsU0FBS3Y5Qyx3QkFBTCxHQUFnQyxpQ0FBaEM7QUFDQSxTQUFLdUUsZ0JBQUwsR0FBd0IsS0FBSzdmLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0NzK0IsR0FBaEMsQ0FBb0N6akIsUUFBNUQ7QUFDQSxTQUFLcUMsa0JBQUwsR0FBMEIsS0FBSzFkLE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0NzK0IsR0FBaEMsQ0FBb0NnNkIsVUFBOUQ7QUFDQSxTQUFLOTRELE9BQUwsR0FBZUEsT0FBZjs7QUFJQTtBQUNEOztBQXJESDtBQUFBO0FBQUEsaUNBdURlO0FBQ1gsVUFBSUcsSUFBSixFQUNFZ0gsR0FERjs7QUFHQWhILGFBQU8sSUFBUDtBQUNBZ0gsWUFBTSxLQUFLbkgsT0FBTCxDQUFhRCxhQUFiLENBQTJCb0gsR0FBakM7O0FBRUEsV0FBSzAzQyxtQkFBTCxHQUEyQixJQUFJaC9DLHlGQUFKLENBQTJCLElBQTNCLENBQTNCO0FBQ0EsV0FBS2cvQyxtQkFBTCxDQUF5QmthLGNBQXpCO0FBQ0EsV0FBS3BiLGVBQUwsR0FBdUIsSUFBSWp4QyxpRkFBSixDQUF1QixJQUF2QixDQUF2QjtBQUNBLFdBQUtpeEMsZUFBTCxDQUFxQnFiLFVBQXJCO0FBQ0EsV0FBSzFtRCx1QkFBTCxHQUErQixJQUFJZ04saUdBQUosQ0FBK0IsSUFBL0IsQ0FBL0I7QUFDQSxXQUFLMjVDLFFBQUw7O0FBRUE7QUFDQTl4RCxVQUFJc1QsRUFBSixDQUFPLGFBQVAsRUFBc0IsWUFBWTtBQUNoQztBQUNBO0FBQ0F0VCxZQUFJQyxPQUFKLEdBQWNxVCxFQUFkLENBQWlCLG1CQUFqQixFQUFzQyxZQUFZO0FBQ2hELGNBQUlvRSxPQUFKLEVBQ0VwYyxLQURGOztBQUdBO0FBQ0E7QUFDQSxlQUFLb2MsT0FBTCxJQUFnQjFlLEtBQUttUSxjQUFyQixFQUFxQztBQUNuQyxnQkFBSW5RLEtBQUttUSxjQUFMLENBQW9CdkosY0FBcEIsQ0FBbUM4WCxPQUFuQyxDQUFKLEVBQWlEO0FBQy9DcGMsc0JBQVF0QyxLQUFLdzlDLGVBQUwsQ0FBcUJoeEMsU0FBckIsQ0FBK0JrUyxPQUEvQixDQUFSO0FBQ0Esa0JBQUkxZSxLQUFLZ1EseUJBQUwsQ0FBK0IwTyxPQUEvQixDQUFKLEVBQTZDO0FBQzNDLG9CQUFJcGMsTUFBTTJOLFVBQVYsRUFBc0I7QUFDcEJqUSx1QkFBS3c5QyxlQUFMLENBQXFCL2pDLFNBQXJCLENBQStCaUYsT0FBL0I7QUFDRDtBQUNGLGVBSkQsTUFJTztBQUNMMWUscUJBQUt3OUMsZUFBTCxDQUFxQmhrQyxTQUFyQixDQUErQmtGLE9BQS9CLEVBQXdDLElBQXhDO0FBQ0Q7QUFDRjtBQUNGOztBQUVEO0FBQ0E5Yyx3RUFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCNUMsS0FBS2tpRCxhQUE3Qjs7QUFFQSxjQUFJbGlELEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0NnN0MsT0FBaEMsSUFBMkNyMEMsSUFBSUMsT0FBSixHQUFjMkIsT0FBZCxFQUEvQyxFQUF3RTtBQUNwRWhILDBFQUFLQSxDQUFDczZDLFVBQU4sQ0FBaUIsTUFBakIsRUFBeUJsMUMsSUFBSUMsT0FBSixHQUFjMkIsT0FBZCxFQUF6QjtBQUNIO0FBR0YsU0EzQkQsRUFIZ0MsQ0E4QjVCO0FBQ0wsT0EvQkQsRUFmVyxDQThDUDs7QUFFSjtBQUNBO0FBQ0E1QixVQUFJQyxPQUFKLEdBQWNxVCxFQUFkLENBQWlCLG1CQUFqQixFQUFzQyxZQUFZO0FBQ2hELFlBQUlvRSxPQUFKLEVBQ0VwYyxLQURGOztBQUlBO0FBQ0E7QUFDQSxhQUFLb2MsT0FBTCxJQUFnQjFlLEtBQUttUSxjQUFyQixFQUFxQztBQUNuQyxjQUFJblEsS0FBS21RLGNBQUwsQ0FBb0J2SixjQUFwQixDQUFtQzhYLE9BQW5DLENBQUosRUFBaUQ7QUFDL0NwYyxvQkFBUXRDLEtBQUt3OUMsZUFBTCxDQUFxQmh4QyxTQUFyQixDQUErQmtTLE9BQS9CLENBQVI7QUFDQSxnQkFBSTFlLEtBQUtnUSx5QkFBTCxDQUErQjBPLE9BQS9CLENBQUosRUFBNkM7QUFDM0Msa0JBQUlwYyxNQUFNMk4sVUFBVixFQUFzQjtBQUNwQmpRLHFCQUFLdzlDLGVBQUwsQ0FBcUIvakMsU0FBckIsQ0FBK0JpRixPQUEvQjtBQUNEO0FBQ0YsYUFKRCxNQUlPO0FBQ0wxZSxtQkFBS3c5QyxlQUFMLENBQXFCaGtDLFNBQXJCLENBQStCa0YsT0FBL0IsRUFBd0MsSUFBeEM7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQ7QUFDQTljLHNFQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0JxSyxPQUFPQyxZQUFQLENBQW9CZzFDLGFBQTVDLEVBQTBEbGlELElBQTFEOztBQUVBLFlBQUlBLEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0NnN0MsT0FBaEMsSUFBMkNyMEMsSUFBSUMsT0FBSixHQUFjMkIsT0FBZCxFQUEvQyxFQUF3RTtBQUNwRWhILHdFQUFLQSxDQUFDczZDLFVBQU4sQ0FBaUIsTUFBakIsRUFBeUJsMUMsSUFBSUMsT0FBSixHQUFjMkIsT0FBZCxFQUF6QjtBQUNIO0FBRUYsT0EzQkQsRUFsRFcsQ0E2RVA7O0FBRUo1QixVQUFJQyxPQUFKLEdBQWNxVCxFQUFkLENBQWlCLGVBQWpCLEVBQWtDLFVBQVNzZixHQUFULEVBQWE7QUFDM0MsWUFBSTU1QixLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDZzdDLE9BQXBDLEVBQTZDO0FBQ3pDLGNBQUlsVixhQUFhOWlDLEdBQUc2USxJQUFILENBQVFzNUIsUUFBUixDQUFpQnhtQyxJQUFJQyxPQUFKLEdBQWM2QixTQUFkLEVBQWpCLENBQWpCO0FBQ0EsY0FBSXE5QixVQUFKLEVBQWdCO0FBQ1p2a0MsMEVBQUtBLENBQUNzNkMsVUFBTixDQUFpQixLQUFqQixFQUF3Qi9WLFdBQVcsQ0FBWCxDQUF4QjtBQUNBdmtDLDBFQUFLQSxDQUFDczZDLFVBQU4sQ0FBaUIsS0FBakIsRUFBd0IvVixXQUFXLENBQVgsQ0FBeEI7QUFDSDtBQUNKO0FBQ0RsNUIsZUFBT0MsWUFBUCxDQUFvQjZyRCxrQkFBcEIsR0FBeUM5ckQsT0FBT0MsWUFBUCxDQUFvQjZyRCxrQkFBcEIsSUFBMEMsRUFBbkY7QUFDQW4zRCxzRUFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCcUssT0FBT0MsWUFBUCxDQUFvQjZyRCxrQkFBNUMsRUFBZ0UveEQsSUFBSUMsT0FBSixHQUFjNkIsU0FBZCxFQUFoRTtBQUNILE9BVkQsRUEvRVcsQ0F5RlA7O0FBRUo7QUFDQTtBQUNBOUIsVUFBSXNULEVBQUosQ0FBTyxPQUFQLEVBQWdCLFVBQVUwK0MsVUFBVixFQUFzQjs7QUFFcEMsWUFBSXJuRCxPQUFKLEVBQ0VFLFNBREYsRUFFRXZQLEtBRkYsRUFHRTBhLFVBSEYsRUFJRXJQLFdBSkYsRUFLRXhHLE9BTEYsRUFNRTh4RCxTQU5GLEVBT0V4aEQsUUFQRixFQVFFeUYsS0FSRixFQVNFSSxRQVRGLEVBVUU0N0MsU0FWRixFQVdFQyxZQVhGLEVBWUUvN0MsUUFaRjs7QUFjQTtBQUNBekwsa0JBQVUzSyxJQUFJNmdELHFCQUFKLENBQTBCbVIsV0FBV2xSLEtBQXJDLEVBQ1IsVUFBVW4yQyxPQUFWLEVBQW1CclAsS0FBbkIsRUFBMEI7QUFDeEIsaUJBQU9xUCxPQUFQO0FBQ0QsU0FITyxDQUFWOztBQUtBclAsZ0JBQVEwRSxJQUFJNmdELHFCQUFKLENBQTBCbVIsV0FBV2xSLEtBQXJDLEVBQ04sVUFBVW4yQyxPQUFWLEVBQW1CclAsS0FBbkIsRUFBMEI7QUFDeEIsaUJBQU9BLEtBQVA7QUFDRCxTQUhLLENBQVI7O0FBS0EsWUFBR0EsU0FBU0EsTUFBTWtRLFFBQU4sRUFBWixFQUE4QjtBQUM1QjBtRCxzQkFBWTUyRCxNQUFNa1EsUUFBTixFQUFaO0FBQ0EsY0FBRyxPQUFPMG1ELFNBQVAsS0FBcUIsVUFBckIsSUFBbUNBLFVBQVV2bkQsT0FBVixFQUFtQmhFLFdBQW5CLENBQW5DLElBQXNFdXJELFVBQVV2bkQsT0FBVixFQUFtQmhFLFdBQW5CLEVBQWdDLEdBQWhDLENBQXpFLEVBQThHO0FBQzVHd3JELDJCQUFlRCxVQUFVdm5ELE9BQVYsRUFBbUJoRSxXQUFuQixFQUFnQyxHQUFoQyxFQUFxQ3dsQyxLQUFyQyxFQUFmO0FBQ0EsZ0JBQUlnbUIsZ0JBQWdCQSxhQUFhMW1ELFFBQWIsRUFBcEIsRUFBNkM7QUFDekMwbUQsMkJBQWExbUQsUUFBYixHQUF3QjJtRCxRQUF4QixDQUFpQ0QsYUFBYTFtRCxRQUFiLEdBQXdCMnlCLFFBQXhCLEtBQW1DLEdBQXBFO0FBQ0g7QUFDRjtBQUNGOztBQUVEdnpCLG9CQUFZRixVQUFVQSxRQUFRcEosR0FBUixDQUFZLFVBQVosQ0FBVixHQUFvQyxLQUFoRDtBQUNBLFlBQUksRUFBRXNKLGFBQWFBLFVBQVVuUSxNQUFWLEtBQXFCLENBQXBDLENBQUosRUFBNEM7QUFDMUM7QUFDQSxjQUFJbVEsU0FBSixFQUFlO0FBQ2IsZ0JBQUdBLFVBQVUsQ0FBVixFQUFhdEosR0FBYixDQUFpQixlQUFqQixLQUFxQyxDQUF4QyxFQUNBO0FBQ0V2QixrQkFBSUMsT0FBSixHQUFjZ1YsU0FBZCxDQUF3Qis4QyxXQUFXN3lCLFVBQW5DO0FBQ0F4NEIsNEJBQWMzRyxJQUFJQyxPQUFKLEdBQWMyQixPQUFkLEVBQWQ7QUFDQXpCLHdCQUFVbkgsS0FBS0gsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ2c1RCxXQUFoQyxHQUE4Q3I1RCxLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDMlYsWUFBOUUsR0FBNkZuRSxVQUFVLEdBQVYsRUFBZXRKLEdBQWYsQ0FBbUIsY0FBbkIsQ0FBdkc7QUFDQSxrQkFBR29GLGVBQWV4RyxPQUFsQixFQUNBO0FBQ0VtVywyQkFBVSxFQUFWO0FBQ0FBLHlCQUFTaE8sT0FBVCxHQUFtQixFQUFuQjtBQUNBZ08seUJBQVNILEtBQVQsR0FBaUIsS0FBakI7QUFDQSxxQkFBSSxJQUFJamMsSUFBSSxDQUFaLEVBQWVBLElBQUkyUSxVQUFVblEsTUFBN0IsRUFBcUNSLEdBQXJDLEVBQXlDO0FBQ3ZDb2MsMkJBQVNoTyxPQUFULEdBQW1CZ08sU0FBU2hPLE9BQVQsQ0FBaUIrNEIsTUFBakIsQ0FBd0J4MkIsVUFBVTNRLENBQVYsRUFBYXFILEdBQWIsQ0FBaUIsT0FBakIsRUFBMEIrRyxPQUFsRCxDQUFuQjtBQUNEO0FBQ0RxQywwQkFBVUUsVUFBVSxDQUFWLEVBQWFzaEMsS0FBYixFQUFWO0FBQ0F4aEMsd0JBQVFvRSxHQUFSLENBQVksT0FBWixFQUFvQnVILFFBQXBCO0FBQ0QsZUFWRCxNQVlBO0FBQ0V0VyxvQkFBSUMsT0FBSixHQUFjOEIsT0FBZCxDQUFzQjRFLGNBQVksQ0FBbEM7QUFDRDtBQUVGLGFBckJELE1Bc0JLOztBQUdIZ0Usc0JBQVFtRixRQUFSLENBQWlCLElBQUl6VCxHQUFHWCxLQUFILENBQVN1USxLQUFiLENBQW1CO0FBQ2xDMlMsdUJBQU8sSUFBSXZpQixHQUFHWCxLQUFILENBQVNtYixNQUFiLENBQW9CO0FBQ3pCdEssd0JBQU0sSUFBSWxRLEdBQUdYLEtBQUgsQ0FBUzhRLElBQWIsQ0FBa0I7QUFDdEJpUCw2QkFBUztBQURhLG1CQUFsQixDQURtQjtBQUl6QjFRLDBCQUFRO0FBSmlCLGlCQUFwQjtBQUQyQixlQUFuQixDQUFqQjtBQVFBSix3QkFBVSxLQUFWOztBQUVBO0FBQ0EzSyxrQkFBSUMsT0FBSixHQUFjNnRDLE9BQWQsQ0FBc0I7QUFDcEI5dUIsdUJBQU8sQ0FBQyxJQUFJK3VCLElBQUosRUFEWTtBQUVwQkMsMEJBQVUsSUFGVTtBQUdwQnhxQyw0QkFBWXhELElBQUlDLE9BQUosR0FBY3dELGFBQWQsRUFIUTtBQUlwQjVCLHdCQUFRLENBQUMsQ0FBRCxFQUFJLENBQUo7QUFDUjtBQUxvQixlQUF0Qjs7QUFRQThFLDRCQUFjM0csSUFBSUMsT0FBSixHQUFjMkIsT0FBZCxFQUFkO0FBQ0Fxd0QsMEJBQVlqeUQsSUFBSXVoRCxzQkFBSixDQUEyQnlRLFdBQVdsUixLQUF0QyxDQUFaO0FBQ0EzZ0Qsd0JBQVVuSCxLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJTLElBQTNCLENBQWdDZzVELFdBQWhDLEdBQThDcjVELEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0MyVixZQUE5RSxHQUE2Rm5FLFVBQVUsR0FBVixFQUFldEosR0FBZixDQUFtQixjQUFuQixDQUF2Rzs7QUFFQTtBQUNBLGtCQUFJb0YsZUFBZXhHLE9BQW5CLEVBQTRCOztBQUUxQjtBQUNBO0FBQ0Esb0JBQUlteUQsTUFBTXR5RCxJQUFJQyxPQUFKLEdBQWN3RCxhQUFkLEVBQVY7QUFDQSxvQkFBSTh1RCxNQUFNMW5ELFVBQVVuUSxNQUFwQjtBQUNBLG9CQUFJODNELElBQUlGLE1BQU0sRUFBTixJQUFZLE1BQU1DLE1BQU0sQ0FBeEIsQ0FBUjtBQUNBLHFCQUFLLElBQUlyNEQsSUFBSSxDQUFiLEVBQWdCQSxJQUFJcTRELEdBQXBCLEVBQXlCcjRELEdBQXpCLEVBQThCO0FBQzVCLHNCQUFJRyxJQUFJLElBQUk2Z0IsS0FBS0MsRUFBVCxHQUFjamhCLENBQWQsR0FBa0JxNEQsR0FBMUI7QUFDQSxzQkFBSUEsT0FBTyxDQUFQLElBQVlBLE9BQU8sQ0FBdkIsRUFBMEJsNEQsS0FBSzZnQixLQUFLQyxFQUFMLEdBQVUsQ0FBZjtBQUMxQixzQkFBSTVVLElBQUksQ0FBQzByRCxVQUFVLENBQVYsSUFBZU8sSUFBSXQzQyxLQUFLdTNDLEdBQUwsQ0FBU3A0RCxDQUFULENBQXBCLEVBQWlDNDNELFVBQVUsQ0FBVixJQUFlTyxJQUFJdDNDLEtBQUt3M0MsR0FBTCxDQUFTcjRELENBQVQsQ0FBcEQsQ0FBUjtBQUNBLHNCQUFJOGtDLGFBQWE5aUMsR0FBRzZRLElBQUgsQ0FBUXM1QixRQUFSLENBQWlCamdDLENBQWpCLENBQWpCO0FBQ0Esc0JBQUkwUSxJQUFJLEVBQVI7QUFDQUEsb0JBQUVuYyxJQUFGLENBQU8rUCxVQUFVM1EsQ0FBVixDQUFQO0FBQ0Esc0JBQUl5NEQsS0FBSyxJQUFJdDJELEdBQUdtVSxPQUFQLENBQWU7QUFDdEJDLDhCQUFVLElBQUlwVSxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCcEosQ0FBbEIsQ0FEWTtBQUV0QjhDLDhCQUFVNE4sQ0FGWTtBQUd0QnZiLDJCQUFPbVAsVUFBVTNRLENBQVYsRUFBYXFILEdBQWIsQ0FBaUIsT0FBakI7QUFIZSxtQkFBZixDQUFUO0FBS0FqRyx3QkFBTWdYLFNBQU4sR0FBa0JRLFVBQWxCLENBQTZCNi9DLEVBQTdCO0FBQ0EzeUQsc0JBQUlDLE9BQUosR0FBY2dWLFNBQWQsQ0FBd0JnOUMsU0FBeEI7QUFDRDtBQUNGLGVBdEJELE1Bc0JPO0FBQ0x0ckQsK0JBQWUsQ0FBZjtBQUNEOztBQUdEM0csa0JBQUlDLE9BQUosR0FBY2dWLFNBQWQsQ0FBd0JnOUMsU0FBeEI7QUFDQWp5RCxrQkFBSUMsT0FBSixHQUFjOEIsT0FBZCxDQUFzQjRFLFdBQXRCO0FBQ0Q7QUFDRjtBQUNGLFNBbkZELE1BbUZPLElBQUtrRSxhQUFhQSxVQUFVblEsTUFBVixLQUFxQixDQUF2QyxFQUEyQztBQUNoRGlRLG9CQUFVRSxVQUFVLENBQVYsQ0FBVjtBQUNEOztBQUVELFlBQUk3UixLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJvUCxRQUEzQixDQUFvQzJSLE1BQXBDLElBQThDM2dCLEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9QLFFBQTNCLENBQW9DMlIsTUFBcEMsQ0FBMkN5N0IsTUFBM0MsRUFBbEQsRUFBdUc7QUFDckc7QUFDQSxjQUFJenFDLFdBQVdBLFFBQVFwSixHQUFSLENBQVksV0FBWixDQUFmLEVBQXlDO0FBQ3JDO0FBQ0EsZ0JBQUk2OUMsU0FBU3hrRCw4REFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCNUMsS0FBS3c0RCxjQUE3QixFQUE2Q1EsVUFBN0MsQ0FBYjtBQUNBLG1CQUFPLEtBQVA7QUFDSDtBQUNGO0FBQ0RoOEMscUJBQWEsRUFBYjtBQUNBLFlBQUlyTCxXQUFXQSxRQUFRcEosR0FBUixDQUFZLE9BQVosQ0FBZixFQUFxQztBQUNuQztBQUNBeVUsdUJBQWFyTCxRQUFRcEosR0FBUixDQUFZLE9BQVosQ0FBYjtBQUNELFNBSEQsTUFHTyxJQUFJakcsU0FBU0EsTUFBTStPLEtBQW5CLEVBQTBCO0FBQy9CMkwsdUJBQWExYSxNQUFNK08sS0FBbkI7QUFDRCxTQUZNLE1BRUE7QUFDTE0sb0JBQVUsS0FBVjtBQUNEO0FBQ0QsWUFBSUEsV0FBV0EsUUFBUXBKLEdBQVIsQ0FBWSxhQUFaLENBQWYsRUFBMkM7QUFDekMsY0FBR3ZJLEtBQUtILE9BQUwsQ0FBYUQsYUFBYixDQUEyQlMsSUFBM0IsQ0FBZ0N1NUQsY0FBaEMsS0FBaUQsR0FBcEQsRUFBeUQ7QUFDdkQzc0QsbUJBQU8rdEIsSUFBUCxDQUFZcnBCLFFBQVFwSixHQUFSLENBQVksYUFBWixDQUFaO0FBQ0QsV0FGRCxNQUdJO0FBQ0YwRSxtQkFBTyt0QixJQUFQLENBQVlycEIsUUFBUXBKLEdBQVIsQ0FBWSxhQUFaLENBQVosRUFBdUMsT0FBdkM7QUFDRDtBQUVGLFNBUkQsTUFTSztBQUNILGNBQUdvSixXQUFXQSxRQUFRcEosR0FBUixDQUFZLGNBQVosQ0FBWCxJQUEwQ29KLFFBQVFwSixHQUFSLENBQVksY0FBWixLQUErQixDQUE1RSxFQUE4RTtBQUM1RXZCLGdCQUFJQyxPQUFKLEdBQWM4QixPQUFkLENBQXNCNEksUUFBUXBKLEdBQVIsQ0FBWSxjQUFaLENBQXRCO0FBQ0F2QixnQkFBSUMsT0FBSixHQUFjZ1YsU0FBZCxDQUF3QnRLLFFBQVFrRSxXQUFSLEdBQXNCVyxjQUF0QixFQUF4QjtBQUNELFdBSEQsTUFJSyxJQUFHbFUsU0FBU0EsTUFBTW1QLFlBQWYsSUFBK0JuUCxNQUFNbVAsWUFBTixJQUFzQixDQUF4RCxFQUEwRDtBQUM3RHpLLGdCQUFJQyxPQUFKLEdBQWM4QixPQUFkLENBQXNCekcsTUFBTW1QLFlBQTVCO0FBQ0F6SyxnQkFBSUMsT0FBSixHQUFjZ1YsU0FBZCxDQUF3Qis4QyxXQUFXN3lCLFVBQW5DO0FBQ0Q7O0FBRUQsY0FBSXgwQixPQUFKLEVBQWE7QUFDWDhGLHVCQUFXOUYsUUFBUWtFLFdBQVIsRUFBWDtBQUNBLGdCQUFJNEIsb0JBQW9CcFUsR0FBR3FULElBQUgsQ0FBUUMsS0FBaEMsRUFBdUM7QUFDckN1RyxzQkFBUXpGLFNBQVNqQixjQUFULEVBQVI7QUFDRCxhQUZELE1BRU87QUFDTDBHLHNCQUFRODdDLFdBQVc3eUIsVUFBbkI7QUFDRDs7QUFFRDc1QixnQkFBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZUEsS0FBZixDQUFxQmsxQixXQUFyQixDQUFpQ3JwQixLQUFqQztBQUNBLGdCQUFJRixXQUFXMU4sT0FBZixFQUF3QjtBQUN0QmhELGtCQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFlbUwsUUFBZixDQUF3QkMsSUFBeEIsQ0FBNkIsRUFBN0I7QUFDQW5RLGtCQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFlcUwsTUFBZixDQUFzQkMsUUFBdEIsQ0FBK0JwVCx3RUFBWUEsQ0FBQ3VULE1BQTVDLEVBQW9ESCxRQUFwRCxDQUE2RHBULHdFQUFZQSxDQUFDd1QsT0FBMUU7QUFDQXpRLGtCQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFleFEsT0FBZixDQUF1Qm9hLElBQXZCOztBQUVBLGtCQUFJK0IsV0FBV0csS0FBWCxLQUFxQixLQUFyQixJQUE4QkgsV0FBV0csS0FBWCxJQUFvQixHQUF0RCxFQUEyRDtBQUN6REMsMkJBQVcsRUFBWDtBQUNBQSx5QkFBUy9MLEtBQVQsR0FBaUIyTCxVQUFqQjtBQUNBSSx5QkFBU3pMLE9BQVQsR0FBbUJBLE9BQW5CO0FBQ0F5TCx5QkFBUzlhLEtBQVQsR0FBaUJBLEtBQWpCO0FBQ0E7QUFDQSxvQkFBSTJLLE9BQU9DLFlBQVAsS0FBd0JxRixTQUF4QixJQUFxQyxRQUFPdEYsT0FBT0MsWUFBUCxDQUFvQm1RLGVBQTNCLE1BQStDLFFBQXhGLEVBQWtHO0FBQ2hHemIsZ0ZBQUtBLENBQUNnQixpQkFBTixDQUF3QnFLLE9BQU9DLFlBQVAsQ0FBb0JtUSxlQUE1QyxFQUE2REQsUUFBN0Q7QUFDRDtBQUNEcGQscUJBQUtzZCxRQUFMLENBQWNGLFFBQWQ7QUFDRCxlQVZELE1BVU87QUFDTG5kLHVCQUFPQyxJQUFQLENBQVk7QUFDVkUsNEJBQVUsTUFEQTtBQUVWK0MsdUJBQUtuRCxLQUFLdWQsa0JBQUwsR0FBMEIsR0FBMUIsR0FBZ0NQLFdBQVcxTjtBQUZ0QyxpQkFBWixFQUdHL08sSUFISCxDQUdRLFVBQVNGLElBQVQsRUFBZTtBQUNyQixzQkFBSW1kLFlBQVk7QUFDZEwsMkJBQU9ILFdBQVdHLEtBREo7QUFFZDdOLDZCQUFTalAsS0FBS2lQLE9BRkE7QUFHZCtCLDJCQUFPMkwsV0FBVzNMLEtBSEo7QUFJZG9NLGtDQUFjVCxXQUFXUztBQUpYLG1CQUFoQjs7QUFPQUwsNkJBQVcsRUFBWDtBQUNBQSwyQkFBUy9MLEtBQVQsR0FBaUJtTSxTQUFqQjtBQUNBSiwyQkFBU3pMLE9BQVQsR0FBbUJBLE9BQW5CO0FBQ0F5TCwyQkFBUzlhLEtBQVQsR0FBaUJBLEtBQWpCOztBQUVBO0FBQ0Esc0JBQUkySyxPQUFPQyxZQUFQLEtBQXdCcUYsU0FBeEIsSUFBcUMsUUFBT3RGLE9BQU9DLFlBQVAsQ0FBb0JtUSxlQUEzQixNQUErQyxRQUF4RixFQUFrRztBQUNoR3piLGtGQUFLQSxDQUFDZ0IsaUJBQU4sQ0FBd0JxSyxPQUFPQyxZQUFQLENBQW9CbVEsZUFBNUMsRUFBNkRELFFBQTdEO0FBQ0Q7O0FBRURwZCx1QkFBS3NkLFFBQUwsQ0FBY0YsUUFBZDtBQUNELGlCQXRCRDtBQXVCRDtBQUNGLGFBeENELE1Bd0NPO0FBQ0w5USxrQkFBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZXFMLE1BQWYsQ0FBc0JnYyxXQUF0QixDQUFrQ252Qix3RUFBWUEsQ0FBQ3VULE1BQS9DO0FBQ0Q7QUFFRixXQXJERCxNQXFETztBQUNMeFEsZ0JBQUl5SyxJQUFKLENBQVMxRixLQUFULENBQWVxTCxNQUFmLENBQXNCZ2MsV0FBdEIsQ0FBa0NudkIsd0VBQVlBLENBQUN1VCxNQUEvQztBQUNEOztBQUVEO0FBQ0FsYix3RUFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCcUssT0FBT0MsWUFBUCxDQUFvQnNyRCxjQUE1QyxFQUE0RFEsVUFBNUQ7QUFDRDtBQUNGLE9BN05ELEVBN0ZXLENBMFRQOzs7QUFHSjtBQUNBO0FBQ0E7O0FBR0QsS0F6WEgsQ0F5WEk7O0FBelhKO0FBQUE7QUFBQSw0QkEwWFVyNUQsS0ExWFYsRUEwWGdCO0FBQ1osVUFBSWs2RCxPQUFPLFNBQVBBLElBQU8sQ0FBU2xoQyxLQUFULEVBQWdCO0FBQ3pCaDVCLGNBQU1tNkQsYUFBTixDQUFvQm42RCxLQUFwQjtBQUNBQSxjQUFNRSxPQUFOLENBQWNELGFBQWQsQ0FBNEJvSCxHQUE1QixDQUFnQ3duQyxFQUFoQyxDQUFtQyxZQUFuQyxFQUFnRHFyQixJQUFoRDtBQUNELE9BSEQ7QUFJQWw2RCxZQUFNRSxPQUFOLENBQWNELGFBQWQsQ0FBNEJvSCxHQUE1QixDQUFnQ3NULEVBQWhDLENBQW1DLFlBQW5DLEVBQWlEdS9DLElBQWpEO0FBQ0Q7QUFoWUg7QUFBQTtBQUFBLDZCQWtZV0UsV0FsWVgsRUFrWXdCO0FBQ3BCLFVBQUlwb0QsT0FBSjtBQUFBLFVBQ0VyUCxLQURGO0FBQUEsVUFFRTZXLFlBRkY7QUFBQSxVQUdFNmdELE1BSEY7QUFBQSxVQUlFQyxrQkFKRjtBQUFBLFVBS0VDLGVBTEY7QUFBQSxVQU1FQyxtQkFORjtBQUFBLFVBT0VDLGFBUEY7QUFBQSxVQVFFQyxpQkFSRjtBQUFBLFVBU0VDLGNBVEY7QUFBQSxVQVVFdDZELE9BQU8sSUFWVDs7QUFZQTJSLGdCQUFVb29ELFlBQVlwb0QsT0FBdEI7QUFDQXJQLGNBQVF5M0QsWUFBWXozRCxLQUFwQjs7QUFFQTZXLHFCQUFldlgsOERBQUtBLENBQUN5bUQsc0JBQU4sQ0FBNkIwUixZQUFZMW9ELEtBQVosQ0FBa0IvQixPQUEvQyxFQUF3RHFDLE9BQXhELEVBQWlFclAsS0FBakUsQ0FBZjtBQUNBO0FBQ0E7QUFDQSxVQUFJLEtBQUt6QyxPQUFMLENBQWFELGFBQWIsQ0FBMkJvUCxRQUEzQixDQUFvQ2dyRCxNQUFwQyxJQUE4Q0QsWUFBWTFvRCxLQUFaLENBQWtCb00sWUFBcEUsRUFBa0Y7QUFDaEZ1OEMsaUJBQVMsS0FBS242RCxPQUFMLENBQWFELGFBQWIsQ0FBMkJvUCxRQUEzQixDQUFvQ2dyRCxNQUE3Qzs7QUFFQU0seUJBQWlCLHdCQUFVM2hDLEtBQVYsRUFBaUI7QUFDaEMsY0FBSTM0QixLQUFLSCxPQUFMLENBQWFELGFBQWIsQ0FBMkJxMUMsY0FBM0IsS0FBOEMra0IsTUFBbEQsRUFBMEQ7QUFDeERBLG1CQUFPaC9CLElBQVA7QUFDRDs7QUFFRGcvQixpQkFBT3RuQixRQUFQLENBQ0U3dUMsRUFBRTgwQixNQUFNNGhDLGFBQVIsRUFBdUJyNkMsUUFBdkIsQ0FBZ0MzVyx3RUFBWUEsQ0FBQzZpQixnQkFBN0MsQ0FERixFQUVFemEsUUFBUWtFLFdBQVIsR0FBc0JXLGNBQXRCLEVBRkY7QUFJRCxTQVRELENBSGdGLENBWTdFOztBQUVIeWpELDZCQUFxQjd3RCxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQXJCO0FBQ0E0d0QsMkJBQW1CM3dELFNBQW5CLEdBQStCQyx3RUFBWUEsQ0FBQzhwQixtQkFBNUM7O0FBRUE2bUMsMEJBQWtCOXdELFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBbEI7QUFDQTZ3RCx3QkFBZ0I1d0QsU0FBaEIsR0FBNEJDLHdFQUFZQSxDQUFDNm5CLElBQWIsR0FBb0IsR0FBcEIsR0FBMEI3bkIsd0VBQVlBLENBQUM2aUIsZ0JBQW5FO0FBQ0Fuc0IsZUFBT2k2RCxlQUFQLEVBQXdCNy9CLEtBQXhCLENBQThCaWdDLGNBQTlCO0FBQ0FMLDJCQUFtQnprRCxXQUFuQixDQUErQjBrRCxlQUEvQjs7QUFFQUMsOEJBQXNCL3dELFNBQVNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBdEI7QUFDQTh3RCw0QkFBb0Ixa0QsU0FBcEIsR0FBZ0NvaUIsY0FBY3pMLGdCQUE5QztBQUNBOHRDLHdCQUFnQjFrRCxXQUFoQixDQUE0QjJrRCxtQkFBNUI7O0FBRUFDLHdCQUFnQmh4RCxTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWhCO0FBQ0Erd0Qsc0JBQWM5d0QsU0FBZCxHQUEwQkMsd0VBQVlBLENBQUM2bkIsSUFBYixHQUFvQixHQUFwQixHQUEwQjduQix3RUFBWUEsQ0FBQzhpQixjQUFqRTtBQUNBcHNCLGVBQU9tNkQsYUFBUCxFQUFzQi8vQixLQUF0QixDQUE0QmlnQyxjQUE1QjtBQUNBTCwyQkFBbUJ6a0QsV0FBbkIsQ0FBK0I0a0QsYUFBL0I7O0FBRUFDLDRCQUFvQmp4RCxTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBQXBCO0FBQ0FneEQsMEJBQWtCNWtELFNBQWxCLEdBQThCb2lCLGNBQWN4TCxjQUE1QztBQUNBK3RDLHNCQUFjNWtELFdBQWQsQ0FBMEI2a0QsaUJBQTFCO0FBQ0Q7O0FBRUQsVUFBSWxoRCxhQUFhbXZDLElBQWIsTUFBdUIwUixNQUEzQixFQUFtQztBQUNqQzF0RCxZQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFlbUwsUUFBZixDQUF3QkMsSUFBeEIsQ0FBNkJ0RCxZQUE3QjtBQUNBLFlBQUk2Z0QsTUFBSixFQUFZO0FBQ1YxdEQsY0FBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZW1MLFFBQWYsQ0FBd0JpL0IsTUFBeEIsQ0FBK0J3ZSxrQkFBL0I7QUFDRDtBQUNELFlBQUd0b0QsUUFBUWtFLFdBQVIsTUFBeUJsRSxRQUFRa0UsV0FBUixjQUFpQ3hTLEdBQUdxVCxJQUFILENBQVFDLEtBQXJFLEVBQTJFO0FBQ3pFckssY0FBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZUEsS0FBZixDQUFxQmsxQixXQUFyQixDQUFpQzUwQixRQUFRa0UsV0FBUixHQUFzQlcsY0FBdEIsRUFBakM7QUFDRDtBQUNGLE9BUkQsTUFRTztBQUNMO0FBQ0FsSyxZQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFlcUwsTUFBZixDQUFzQmdjLFdBQXRCLENBQWtDbnZCLHdFQUFZQSxDQUFDdVQsTUFBL0M7QUFDRDs7QUFFRHhRLFVBQUl5SyxJQUFKLENBQVMxRixLQUFULENBQWVxTCxNQUFmLENBQXNCZ2MsV0FBdEIsQ0FBa0NudkIsd0VBQVlBLENBQUN3VCxPQUEvQztBQUNBelEsVUFBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZXhRLE9BQWYsQ0FBdUJDLElBQXZCO0FBQ0QsS0F4Y0gsQ0F3Y0k7OztBQXhjSjtBQUFBO0FBQUEsK0JBMmNhOztBQUVULFVBQUkwNUQscUJBQUo7QUFBQSxVQUNFQywwQkFERjtBQUFBLFVBRUVDLHFCQUZGO0FBQUEsVUFHRXJwRCxjQUhGOztBQU1BbXBELHFCQUFlcHhELFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZjtBQUNBbXhELG1CQUFhamxELFlBQWIsQ0FBMEIsSUFBMUIsRUFBZ0MsZUFBZSxLQUFLMVYsT0FBTCxDQUFhRCxhQUFiLENBQTJCUyxJQUEzQixDQUFnQ3FNLEtBQS9FO0FBQ0E4dEQsbUJBQWFseEQsU0FBYixHQUF5QixtQkFBekI7O0FBRUFteEQsMEJBQW9CcnhELFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBcEI7QUFDQW94RCx3QkFBa0JueEQsU0FBbEIsR0FBOEIsMEJBQTlCOztBQUVBb3hELHFCQUFldHhELFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZjtBQUNBcXhELG1CQUFhcHhELFNBQWIsR0FBeUIsbUJBQXpCOztBQUVBa3hELG1CQUFhaGxELFdBQWIsQ0FBeUJpbEQsaUJBQXpCO0FBQ0FELG1CQUFhaGxELFdBQWIsQ0FBeUJrbEQsWUFBekI7O0FBRUF6NkQsYUFBT3c2RCxpQkFBUCxFQUEwQnBnQyxLQUExQixDQUFnQyxVQUFVMUIsS0FBVixFQUFpQjtBQUMvQ0EsY0FBTThZLGNBQU47QUFDQW5sQyxZQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFlcUwsTUFBZixDQUFzQmdjLFdBQXRCLENBQWtDbnZCLHdFQUFZQSxDQUFDdVQsTUFBL0M7QUFDRCxPQUhEOztBQUtBekwsY0FBUSxJQUFJaE8sR0FBR3dsRCxPQUFQLENBQWU7QUFDckI4UixpQkFBUyxJQURZO0FBRXJCOXpELGlCQUFTMnpELFlBRlk7QUFHckJ6UixxQkFBYSxhQUhRO0FBSXJCNUIsZ0JBQVEsQ0FBQyxDQUFDLEVBQUYsRUFBTSxDQUFOLENBSmEsQ0FJTDs7Ozs7O0FBSkssT0FBZixDQUFSOztBQVlBNzZDLFVBQUl5SyxJQUFKLENBQVMxRixLQUFULEdBQWlCLEVBQWpCO0FBQ0EvRSxVQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFlQSxLQUFmLEdBQXVCQSxLQUF2QjtBQUNBO0FBQ0EvRSxVQUFJeUssSUFBSixDQUFTMUYsS0FBVCxDQUFleFEsT0FBZixHQUF5QixJQUFJKzZDLHVFQUFKLENBQVksRUFBQzFpQixRQUFRc2hDLFlBQVQsRUFBWixDQUF6Qjs7QUFFQSxXQUFLMzZELE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCZ2lELFVBQS9CLENBQTBDMzNDLEtBQTFDOztBQUVBL0UsVUFBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZXFMLE1BQWYsR0FBd0J6YyxPQUFPcU0sSUFBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZUEsS0FBZixDQUFxQm9yQyxVQUFyQixFQUFQLENBQXhCO0FBQ0Fud0MsVUFBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZW1MLFFBQWYsR0FBMEJ2YyxPQUFPLG9CQUFQLEVBQTZCcU0sSUFBSXlLLElBQUosQ0FBUzFGLEtBQVQsQ0FBZXFMLE1BQTVDLENBQTFCO0FBRUQsS0EzZkgsQ0EyZkk7OztBQUdGOzs7Ozs7OztBQTlmRjtBQUFBO0FBQUEsd0NBcWdCc0IyQyxXQXJnQnRCLEVBcWdCbUM7O0FBRS9CLFVBQUl4ZixPQUFKO0FBQUEsVUFDRSs2RCxpQkFERjtBQUFBLFVBRUVDLGNBRkY7QUFBQSxVQUdFNzZELE9BQU8sSUFIVDs7QUFLQSxVQUFJcWYsZUFBZSxRQUFPQSxXQUFQLHlDQUFPQSxXQUFQLE9BQXVCLFFBQTFDLEVBQW9EO0FBQ2xEeGYsa0JBQVV3ZixXQUFWO0FBQ0QsT0FGRCxNQUVPO0FBQ0x4ZixrQkFBVSxFQUFWO0FBQ0Q7O0FBRUQsV0FBS3NTLHVCQUFMLENBQTZCQyxZQUE3QixHQUEyQyxLQUFLRCx1QkFBTCxDQUE2QkMsWUFBN0IsSUFBNkMsRUFBeEY7O0FBRUF3b0QsMEJBQW9CLEVBQXBCO0FBQ0FDLHVCQUFpQix3QkFBVTcwRCxNQUFWLEVBQWtCO0FBQ2pDLFlBQUk5RSxDQUFKLEVBQ0UyRixPQURGLEVBRUVGLEtBRkY7O0FBSUE7QUFDQSxhQUFLQSxLQUFMLElBQWNYLE1BQWQsRUFBc0I7QUFDcEIsY0FBSUEsT0FBT1ksY0FBUCxDQUFzQkQsS0FBdEIsQ0FBSixFQUFrQztBQUNoQ0Usc0JBQVViLE9BQU9XLEtBQVAsQ0FBVjs7QUFFQSxnQkFBSUUsUUFBUXlJLE9BQVosRUFBcUI7QUFDbkIsbUJBQUtwTyxJQUFJLENBQVQsRUFBWUEsSUFBSTJGLFFBQVF5SSxPQUFSLENBQWdCNU4sTUFBaEMsRUFBd0NSLEtBQUssQ0FBN0MsRUFBZ0Q7O0FBRTlDLG9CQUFJMkYsUUFBUXlJLE9BQVIsQ0FBZ0JwTyxDQUFoQixDQUFKLEVBQXdCO0FBQ3RCLHNCQUNFMkYsUUFBUXlJLE9BQVIsQ0FBZ0JwTyxDQUFoQixFQUFtQmdSLGFBQW5CLElBQ0dyTCxRQUFReUksT0FBUixDQUFnQnBPLENBQWhCLEVBQW1CZ1IsYUFBbkIsS0FBcUMsR0FEeEMsSUFFRzBvRCxrQkFBa0JoMUQsT0FBbEIsQ0FBMEJpQixRQUFReUksT0FBUixDQUFnQnBPLENBQWhCLEVBQW1CZ1IsYUFBN0MsTUFBZ0UsQ0FBQyxDQUZwRSxLQUlFLENBQUNsUyxLQUFLbVMsdUJBQUwsQ0FBNkJDLFlBQTdCLENBQTBDdkwsUUFBUXlJLE9BQVIsQ0FBZ0JwTyxDQUFoQixFQUFtQmdSLGFBQTdELENBQUQsSUFDR2xTLEtBQUttUyx1QkFBTCxDQUE2QkMsWUFBN0IsQ0FBMEN2TCxRQUFReUksT0FBUixDQUFnQnBPLENBQWhCLEVBQW1CZ1IsYUFBN0QsRUFBNEV4UCxLQUE1RSxLQUFzRjZQLFNBTDNGLENBREYsRUFRRTtBQUNBcW9ELHNDQUFrQjk0RCxJQUFsQixDQUF1QitFLFFBQVF5SSxPQUFSLENBQWdCcE8sQ0FBaEIsRUFBbUJnUixhQUExQztBQUNEO0FBQ0Y7QUFDRjtBQUNGO0FBQ0Y7QUFDRjtBQUNGLE9BOUJEOztBQWdDQTJvRCxxQkFBZSxLQUFLcmQsZUFBTCxDQUFxQmh4QyxTQUFwQzs7QUFFQSxVQUFJb3VELGtCQUFrQmw1RCxNQUFsQixHQUEyQixDQUEvQixFQUFrQztBQUNoQyxhQUFLeVEsdUJBQUwsQ0FBNkJrSCxrQkFBN0IsQ0FBZ0R1aEQsaUJBQWhELEVBQW1FLzZELE9BQW5FO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsWUFBSUEsUUFBUVUsSUFBUixJQUFnQixPQUFPVixRQUFRVSxJQUFmLEtBQXdCLFVBQTVDLEVBQXdEO0FBQ3REVixrQkFBUVUsSUFBUjtBQUNEO0FBQ0Y7QUFDRixLQTlqQkgsQ0E4akJJOztBQTlqQko7QUFBQTtBQUFBLGtDQWdrQmdCWixLQWhrQmhCLEVBZ2tCc0I7O0FBRWxCLFVBQUl1QixDQUFKO0FBQUEsVUFDRUMsQ0FERjtBQUFBLFVBRUVtTSxDQUZGO0FBQUEsVUFHRW9SLE9BSEY7QUFBQSxVQUlFMVksTUFKRjtBQUFBLFVBS0U4MEQsZ0JBTEY7QUFBQSxVQU1FdHFELFdBTkY7QUFBQSxVQU9FbE8sS0FQRjtBQUFBLFVBUUV5NEQsY0FBYSxFQVJmO0FBQUEsVUFTRXgzRCxNQVRGO0FBQUEsVUFVRWIsS0FWRjtBQUFBLFVBV0UyTixXQUFTLEVBWFg7QUFBQSxVQVlFMnFELFNBQU8sRUFaVDtBQUFBLFVBYUVDLFVBYkY7QUFBQSxVQWNFdHBELE9BZEY7QUFBQSxVQWVFZCxZQWZGO0FBQUEsVUFnQkVFLGFBaEJGO0FBQUEsVUFpQkVILFdBakJGOztBQW9CQSxVQUFHalIsTUFBTUUsT0FBTixDQUFjRCxhQUFkLENBQTRCUyxJQUE1QixDQUFpQ2c1RCxXQUFqQyxLQUFpRCxHQUFwRCxFQUF3RDtBQUN0RDdvRCxzQkFBYzdRLE1BQU1FLE9BQU4sQ0FBY0QsYUFBZCxDQUE0QlMsSUFBMUM7QUFDQSxhQUFLYSxDQUFMLElBQVV2QixNQUFNd1EsY0FBaEIsRUFBZ0M7QUFBQztBQUMvQm5LLG1CQUFTc0csSUFBSXlLLElBQUosQ0FBUy9RLE1BQVQsQ0FBZ0I5RSxDQUFoQixDQUFUOztBQUVBLGNBQUc4RSxPQUFPeUosSUFBUCxLQUFnQixLQUFuQixFQUF5QjtBQUN2QjtBQUNEOztBQUVELGNBQUd6SixVQUFVQSxPQUFPNEssV0FBcEIsRUFBaUM7QUFDL0IsZ0JBQUc1SyxPQUFPNEssV0FBUCxDQUFtQnZJLFNBQW5CLE1BQWtDckMsT0FBTzRLLFdBQVAsQ0FBbUJ2SSxTQUFuQixHQUErQitULFFBQS9CLEdBQTBDLENBQTFDLENBQWxDLElBQWtGcFcsT0FBTzRLLFdBQVAsQ0FBbUJ2SSxTQUFuQixHQUErQitULFFBQS9CLEdBQTBDLENBQTFDLEVBQTZDOUMsU0FBN0MsRUFBbEYsSUFBOEl0VCxPQUFPNEssV0FBUCxDQUFtQnZJLFNBQW5CLEdBQStCK1QsUUFBL0IsR0FBMEMsQ0FBMUMsRUFBNkM5QyxTQUE3QyxHQUF5RDJELFdBQXpELEdBQXVFdmIsTUFBdkUsR0FBZ0YsQ0FBak8sRUFBbU87QUFDak8vQixvQkFBTUUsT0FBTixDQUFjRCxhQUFkLENBQTRCb0gsR0FBNUIsQ0FBZ0M4VSxXQUFoQyxDQUE0QzlWLE9BQU80SyxXQUFuRDtBQUNEOztBQUVEa3FELCtCQUFtQjkwRCxPQUFPc0osT0FBMUI7QUFDQXRKLG1CQUFPNEssV0FBUCxDQUFtQnZJLFNBQW5CLEdBQStCaUgsT0FBL0IsR0FBeUN3ckQsZ0JBQXpDO0FBQ0FDLHdCQUFZajVELElBQVosQ0FBaUJrRSxPQUFPNEssV0FBUCxDQUFtQnZJLFNBQW5CLEVBQWpCO0FBR0Q7QUFDRjtBQUNELGFBQUlpRixJQUFHLENBQVAsRUFBVUEsSUFBRXl0RCxZQUFZcjVELE1BQXhCLEVBQStCNEwsR0FBL0IsRUFBbUM7QUFBQztBQUNsQyxjQUFHeXRELFlBQVl6dEQsQ0FBWixFQUFlOE8sUUFBZixHQUEwQjFhLE1BQTFCLEdBQWlDLENBQXBDLEVBQXNDO0FBQ3BDWSxvQkFBUXk0RCxZQUFZenRELENBQVosRUFBZThPLFFBQWYsRUFBUjtBQUNBN1kscUJBQVNqQixNQUFNLEdBQU4sRUFBV2dYLFNBQVgsRUFBVDtBQUNBNVcsb0JBQVFKLE1BQU0sR0FBTixFQUFXa1EsUUFBWCxFQUFSOztBQUVBeW9ELHlCQUFhLElBQWI7QUFDQXRwRCxzQkFBVXBPLE9BQU8wWixXQUFQLEVBQVY7QUFDQSxpQkFBSTliLElBQUksQ0FBUixFQUFXQSxJQUFJd1EsUUFBUWpRLE1BQXZCLEVBQStCUCxHQUEvQixFQUFvQztBQUFDO0FBQ25DLGtCQUFHd1EsUUFBUXhRLENBQVIsRUFBV29ILEdBQVgsQ0FBZSxVQUFmLENBQUgsRUFBOEI7QUFDNUIscUJBQUlySCxJQUFJLENBQVIsRUFBV0EsSUFBSXlRLFFBQVF4USxDQUFSLEVBQVdvSCxHQUFYLENBQWUsVUFBZixFQUEyQjdHLE1BQTFDLEVBQWtEUixHQUFsRCxFQUFzRDtBQUFDO0FBQ3JELHNCQUFHNjVELFlBQVl6dEQsQ0FBWixFQUFlZ0MsT0FBZixDQUF1Qm5PLENBQXZCLENBQUgsRUFBNkI7QUFDM0J1Qiw0QkFBUSxLQUFLeVAsdUJBQUwsQ0FBNkJDLFlBQTdCLENBQTBDMm9ELFlBQVl6dEQsQ0FBWixFQUFlZ0MsT0FBZixDQUF1Qm5PLENBQXZCLEVBQTBCK1EsYUFBcEUsQ0FBUjtBQUNELG1CQUZELE1BR0ssSUFBRzZvRCxZQUFZenRELENBQVosRUFBZWdDLE9BQWYsQ0FBdUIsQ0FBdkIsQ0FBSCxFQUE2QjtBQUNoQzVNLDRCQUFRLEtBQUt5UCx1QkFBTCxDQUE2QkMsWUFBN0IsQ0FBMEMyb0QsWUFBWXp0RCxDQUFaLEVBQWVnQyxPQUFmLENBQXVCLENBQXZCLEVBQTBCNEMsYUFBcEUsQ0FBUjtBQUNEOztBQUVEUCwwQkFBUXhRLENBQVIsRUFBV29ILEdBQVgsQ0FBZSxVQUFmLEVBQTJCckgsQ0FBM0IsRUFBOEI0VixRQUE5QixDQUF1Q3BVLE1BQU1BLEtBQTdDO0FBQ0Esc0JBQUcsQ0FBQ2lQLFFBQVF4USxDQUFSLEVBQVdvSCxHQUFYLENBQWUsVUFBZixFQUEyQnJILENBQTNCLEVBQThCcUgsR0FBOUIsQ0FBa0MsT0FBbEMsQ0FBSixFQUErQztBQUM3Q29KLDRCQUFReFEsQ0FBUixFQUFXb0gsR0FBWCxDQUFlLFVBQWYsRUFBMkJySCxDQUEzQixFQUE4QjZVLEdBQTlCLENBQWtDLE9BQWxDLEVBQTBDelQsTUFBTSxHQUFOLEVBQVcrTyxLQUFyRDtBQUNEO0FBRUY7QUFDRGhCLHlCQUFTdk8sSUFBVCxDQUFjNlAsUUFBUXhRLENBQVIsRUFBV29ILEdBQVgsQ0FBZSxVQUFmLENBQWQ7O0FBRUEweUQsNkJBQWEsS0FBYjtBQUNEO0FBRUY7QUFDRCxnQkFBR0EsVUFBSCxFQUFjO0FBQUM7QUFDYixrQkFBR3RwRCxRQUFRalEsTUFBUixJQUFrQixDQUFyQixFQUF1QjtBQUNyQixvQkFBRyxDQUFDaVEsUUFBUSxHQUFSLEVBQWFwSixHQUFiLENBQWlCLE9BQWpCLENBQUosRUFBOEI7QUFDNUJvSiwwQkFBUSxHQUFSLEVBQWFvRSxHQUFiLENBQWlCLE9BQWpCLEVBQXlCelQsTUFBTStPLEtBQS9CO0FBQ0Q7QUFDRGhCLHlCQUFTdk8sSUFBVCxDQUFjNlAsT0FBZDtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUVEZCx1QkFBZSxJQUFJeE4sR0FBR0UsTUFBSCxDQUFVdVEsTUFBZCxDQUFxQjtBQUNsQzFKLHNCQUFZOztBQURzQixTQUFyQixDQUFmOztBQUtBLGFBQUlsSixJQUFJLENBQVIsRUFBV0EsSUFBSW1QLFNBQVMzTyxNQUF4QixFQUFnQ1IsR0FBaEMsRUFBcUM7QUFDbkMyUCx1QkFBYXVILFdBQWIsQ0FBeUIvSCxTQUFTblAsQ0FBVCxDQUF6QjtBQUNEOztBQUVENlAsd0JBQWdCLElBQUkxTixHQUFHRSxNQUFILENBQVUwVyxPQUFkLENBQXNCO0FBQ3BDQyxvQkFBVSxFQUQwQjtBQUVwQztBQUNBM1csa0JBQVFzTjtBQUg0QixTQUF0QixDQUFoQjtBQUtBLFlBQUlHLGtCQUFrQixTQUFsQkEsZUFBa0IsQ0FBU1csT0FBVCxFQUFrQm5ILFVBQWxCLEVBQTZCO0FBQ2pELGNBQUdtSCxXQUFXQSxRQUFRcEosR0FBUixDQUFZLFVBQVosQ0FBWCxJQUFzQ29KLFFBQVFwSixHQUFSLENBQVksVUFBWixFQUF3QixHQUF4QixFQUE2QmlLLFFBQTdCLEVBQXpDLEVBQWlGO0FBQy9FOVAsb0JBQVFpUCxRQUFRcEosR0FBUixDQUFZLFVBQVosRUFBd0IsR0FBeEIsRUFBNkJpSyxRQUE3QixHQUF3Q2IsT0FBeEMsQ0FBUjtBQUNBLGdCQUFJQSxZQUFZWSxTQUFaLElBQXlCWixZQUFZLElBQXJDLElBQTZDQSxRQUFRM1IsSUFBUixLQUFpQmlOLE1BQWxFLEVBQTBFO0FBQ3hFLGtCQUFJNEUsWUFBWUYsUUFBUXBKLEdBQVIsQ0FBWSxVQUFaLENBQWhCO0FBQ0Esa0JBQUlxSixPQUFPQyxVQUFVblEsTUFBckI7QUFDQSxrQkFBSWtRLE9BQU8sQ0FBWCxFQUFjO0FBQ1osb0JBQUksQ0FBQ2xQLEtBQUwsRUFBWTtBQUNWQSwwQkFBUSxFQUFSO0FBQ0Q7O0FBRUQ7QUFDQSxvQkFBSW9QLGFBQWEsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFqQjtBQUNBLG9CQUFJcFAsTUFBTSxDQUFOLENBQUosRUFBYztBQUNaLHNCQUFJLE9BQU9BLE1BQU0sQ0FBTixFQUFTK1AsUUFBVCxHQUFvQkMsU0FBM0IsS0FBeUMsVUFBN0MsRUFBeUQ7QUFDdkQsd0JBQUlYLFNBQVN4USxTQUFTbUIsTUFBTSxDQUFOLEVBQVMrUCxRQUFULEdBQW9CQyxTQUFwQixFQUFULEVBQTBDLEVBQTFDLENBQWI7QUFDQSx3QkFBSVgsTUFBSixFQUFZO0FBQ1ZELG1DQUFhLENBQUMsQ0FBRCxFQUFJQyxNQUFKLENBQWI7QUFDRDtBQUNGLG1CQUxELE1BS08sSUFBSSxPQUFPclAsTUFBTSxDQUFOLEVBQVMrUCxRQUFULEdBQW9CRSxTQUEzQixLQUF5QyxVQUE3QyxFQUF5RDtBQUM5RGIsaUNBQWFwUCxNQUFNLENBQU4sRUFBUytQLFFBQVQsR0FBb0JFLFNBQXBCLE1BQW1DLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBaEQ7QUFDRDtBQUNGOztBQUVELG9CQUFJWCxZQUFZcFEsOERBQUtBLENBQUNnUix3QkFBTixDQUErQixRQUEvQixFQUF3QztBQUN0REMsd0JBQU0sR0FEZ0Q7QUFFdERDLHlCQUFPO0FBRitDLGlCQUF4QyxDQUFoQjs7QUFLQSxvQkFBSXRDLFlBQVl1QyxpQkFBaEIsRUFBbUM7QUFDakNmLDhCQUFZcFEsOERBQUtBLENBQUNnUix3QkFBTixDQUErQnBDLFlBQVl1QyxpQkFBM0MsRUFBNkQ7QUFDdkVGLDBCQUFNLEdBRGlFO0FBRXZFQywyQkFBTztBQUZnRSxtQkFBN0QsQ0FBWjtBQUlEO0FBQ0Qsb0JBQUliLFlBQVl6QixZQUFZd0MsaUJBQVosR0FBZ0MsTUFBTXhDLFlBQVl3QyxpQkFBbEQsR0FBc0UsU0FBdEY7O0FBRUF0USxzQkFBTVosSUFBTixDQUNFLElBQUl1QixHQUFHWCxLQUFILENBQVN1USxLQUFiLENBQW1CO0FBQ2pCQyx3QkFBTSxJQUFJN1AsR0FBR1gsS0FBSCxDQUFTeVEsSUFBYixDQUFrQjtBQUN0QkQsMEJBQU0sR0FEZ0I7QUFFdEJFLDBCQUFNLGlCQUZnQjtBQUd0QkMsNkJBQVMsQ0FBQyxDQUFELEdBQUt2QixXQUFXLENBQVgsQ0FIUTtBQUl0QndCLDZCQUFTLENBQUMsQ0FBRCxHQUFLeEIsV0FBVyxDQUFYLENBSlE7QUFLdEJ5QiwwQkFBTSxJQUFJbFEsR0FBR1gsS0FBSCxDQUFTOFEsSUFBYixDQUFrQjtBQUN0QkMsNkJBQU96QjtBQURlLHFCQUFsQjtBQUxnQixtQkFBbEI7QUFEVyxpQkFBbkIsQ0FERjtBQWFBdFAsc0JBQU1aLElBQU4sQ0FDRSxJQUFJdUIsR0FBR1gsS0FBSCxDQUFTdVEsS0FBYixDQUFtQjtBQUNqQkMsd0JBQU0sSUFBSTdQLEdBQUdYLEtBQUgsQ0FBU3lRLElBQWIsQ0FBa0I7QUFDdEJELDBCQUFNdEIsS0FBSzhCLFFBQUwsRUFEZ0I7QUFFdEJMLDZCQUFTLENBQUMsQ0FBRCxHQUFLdkIsV0FBVyxDQUFYLENBRlE7QUFHdEJ3Qiw2QkFBUyxDQUFDLENBQUQsR0FBS3hCLFdBQVcsQ0FBWCxDQUFMLEdBQXFCLENBSFI7QUFJdEJ5QiwwQkFBTSxJQUFJbFEsR0FBR1gsS0FBSCxDQUFTOFEsSUFBYixDQUFrQjtBQUN0QkMsNkJBQU94QjtBQURlLHFCQUFsQjtBQUpnQixtQkFBbEI7QUFEVyxpQkFBbkIsQ0FERjtBQVlEO0FBQ0Y7QUFFRixXQWhFRCxNQWtFSTtBQUNGLGdCQUFHTixXQUFXQSxRQUFRcEosR0FBUixDQUFZLFVBQVosQ0FBWCxJQUFzQ29KLFFBQVFwSixHQUFSLENBQVksVUFBWixFQUF3QixHQUF4QixFQUE2QmlLLFFBQTdCLEVBQXpDLEVBQWlGO0FBQy9FLHFCQUFPYixRQUFRcEosR0FBUixDQUFZLFVBQVosRUFBd0IsR0FBeEIsRUFBNkJpSyxRQUE3QixHQUF3Q2IsT0FBeEMsQ0FBUDtBQUNELGFBRkQsTUFHSTtBQUNGLHFCQUFPLElBQVA7QUFDRDtBQUNGO0FBQ0QsaUJBQU9qUCxLQUFQO0FBQ0QsU0E1RUQ7O0FBOEVBOztBQUVBa08sc0JBQWMsSUFBSXZOLEdBQUdmLEtBQUgsQ0FBU3dSLE1BQWIsQ0FBb0I7QUFDaEN0UyxnQkFBTSxTQUQwQjtBQUVoQytCLGtCQUFRd04sYUFGd0I7QUFHaENyTyxpQkFBT3NPOztBQUh5QixTQUFwQixDQUFkOztBQU9BLFlBQUlrcUQsWUFBWXY3RCxNQUFNRSxPQUFOLENBQWNELGFBQWQsQ0FBNEJvSCxHQUE1QixDQUFnQ3FCLFNBQWhDLEdBQTRDK1QsUUFBNUMsRUFBaEI7QUFDQSxZQUFJKytDLGVBQWUsSUFBbkI7QUFDQSxhQUFJajZELElBQUksQ0FBUixFQUFXQSxJQUFJZzZELFVBQVV4NUQsTUFBekIsRUFBaUNSLEdBQWpDLEVBQXFDOztBQUVuQyxjQUFHZzZELFVBQVVoNkQsQ0FBVixFQUFhazZELFFBQWhCLEVBQTBCO0FBQ3hCRixzQkFBVWg2RCxDQUFWLElBQWUwUCxXQUFmO0FBQ0F1cUQsMkJBQWUsS0FBZjtBQUNEO0FBQ0Y7QUFDRCxZQUFHQSxZQUFILEVBQWdCO0FBQ2R4N0QsZ0JBQU1FLE9BQU4sQ0FBY0QsYUFBZCxDQUE0Qm9ILEdBQTVCLENBQWdDK1QsUUFBaEMsQ0FBeUNuSyxXQUF6QztBQUNEO0FBQ0Y7QUFJRixLQXp3QkgsQ0F5d0JHOzs7QUF6d0JIO0FBQUE7QUFBQSw4Q0E0d0I0QjhOLE9BNXdCNUIsRUE0d0JxQzI4QyxRQTV3QnJDLEVBNHdCK0M7QUFDM0MsVUFBSS80RCxLQUFKLEVBQ0VxRyxJQURGLEVBRUU2UixZQUZGLEVBR0VVLFFBSEY7O0FBS0EsVUFBSSxDQUFDLEtBQUtzaUMsZUFBTCxDQUFxQmh4QyxTQUFyQixDQUErQmtTLE9BQS9CLENBQUwsRUFBOEM7QUFDNUMsZUFBTyxLQUFQO0FBQ0Q7O0FBRURwYyxjQUFRLEtBQUtrN0MsZUFBTCxDQUFxQmh4QyxTQUFyQixDQUErQmtTLE9BQS9CLENBQVI7O0FBRUEsVUFBSTI4QyxRQUFKLEVBQWM7QUFDWjF5RCxlQUFPMHlELFFBQVA7QUFDRCxPQUZELE1BRU8sSUFBSSxLQUFLeDdELE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCQyxPQUEvQixHQUF5QzJCLE9BQXpDLEtBQXFELENBQUMsQ0FBMUQsRUFBNkQ7QUFDbEVELGVBQU8sS0FBSzlJLE9BQUwsQ0FBYUQsYUFBYixDQUEyQm9ILEdBQTNCLENBQStCQyxPQUEvQixHQUF5QzJCLE9BQXpDLEVBQVA7QUFDRCxPQUZNLE1BRUE7QUFDTEQsZUFBTyxLQUFQO0FBQ0Q7QUFDRCxVQUFJckcsTUFBTXFHLElBQU4sS0FBZTRKLFNBQW5CLEVBQThCO0FBQzVCLFlBQUlqUSxNQUFNZ04sT0FBTixJQUFpQmhOLE1BQU1nTixPQUFOLENBQWM1TixNQUFkLEdBQXVCLENBQTVDLEVBQStDO0FBQzdDLGVBQUssSUFBSVIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJb0IsTUFBTWdOLE9BQU4sQ0FBYzVOLE1BQWxDLEVBQTBDUixHQUExQyxFQUErQztBQUM3Q3NaLDJCQUFlbFksTUFBTWdOLE9BQU4sQ0FBY3BPLENBQWQsQ0FBZjtBQUNBLGdCQUFJc1osYUFBYXRJLGFBQWpCLEVBQWdDO0FBQzlCZ0oseUJBQVcsS0FBSy9JLHVCQUFMLENBQTZCQyxZQUE3QixDQUEwQ29JLGFBQWF0SSxhQUF2RCxDQUFYO0FBQ0E7QUFDQSxrQkFBSWdKLFFBQUosRUFBYztBQUNaNVksc0JBQU1xRyxJQUFOLEdBQWEsRUFBYjtBQUNBLG9CQUFJdVMsU0FBUzRGLE9BQWIsRUFBc0I7QUFDcEJ4ZSx3QkFBTXFHLElBQU4sQ0FBVzR3RCxHQUFYLEdBQWlCcitDLFNBQVM0RixPQUExQjtBQUNEO0FBQ0Qsb0JBQUk1RixTQUFTMkYsT0FBYixFQUFzQjtBQUNwQnZlLHdCQUFNcUcsSUFBTixDQUFXMnlELEdBQVgsR0FBaUJwZ0QsU0FBUzJGLE9BQTFCO0FBQ0Q7QUFDRCxvQkFBSXZlLE1BQU1xRyxJQUFOLENBQVc0d0QsR0FBWCxJQUFrQmozRCxNQUFNcUcsSUFBTixDQUFXMnlELEdBQWpDLEVBQXNDO0FBQ3BDO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUFDRjtBQUNGO0FBQ0QsVUFBSyxPQUFPM3lELElBQVAsS0FBZ0IsUUFBakIsSUFBOEJyRyxNQUFNcUcsSUFBcEMsS0FDRXJHLE1BQU1xRyxJQUFOLENBQVcyeUQsR0FBWCxHQUFpQjN5RCxJQUFqQixJQUEwQnJHLE1BQU1xRyxJQUFOLENBQVc0d0QsR0FBWCxHQUFpQixDQUFqQixJQUFzQmozRCxNQUFNcUcsSUFBTixDQUFXNHdELEdBQVgsR0FBaUI1d0QsSUFEbkUsQ0FBSixFQUVFO0FBQ0EsZUFBTyxLQUFQO0FBQ0Q7O0FBRUQsYUFBTyxJQUFQO0FBQ0QsS0E3ekJILENBNnpCSTs7QUE3ekJKOztBQUFBO0FBQUEsSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlCQTtBQUNBOztBQUVBLEtBQUsyRCxHQUFMLEdBQVcsS0FBS0EsR0FBTCxJQUFZLEVBQXZCO0FBQ0EsS0FBS0EsR0FBTCxDQUFTeUssSUFBVCxHQUFnQixLQUFLekssR0FBTCxDQUFTeUssSUFBVCxJQUFpQixFQUFqQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUl3a0QsaUJBQWlCLEVBQXJCOztBQUVBLElBQUksT0FBT3Z5RCxPQUFQLEtBQW1CLFdBQXZCLEVBQW9DO0FBQ2xDLE1BQUlBLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUN6QnlqQyxxQkFBaUJDLHFEQUFqQjtBQUNELEdBRkQsTUFFTyxJQUFJeHlELFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUNoQ3lqQyxxQkFBaUJFLHFEQUFqQjtBQUNELEdBRk0sTUFFQTtBQUNMO0FBQ0FGLHFCQUFpQkMscURBQWpCO0FBQ0Q7QUFDRjs7QUFFQSxXQUFVMzNELENBQVYsRUFBYXlJLEdBQWIsRUFBa0I7QUFDakI7O0FBRUE7Ozs7QUFHQUEsTUFBSXlLLElBQUosQ0FBU25WLEtBQVQsR0FBaUJpQyxFQUFFSCxNQUFGLENBQVM0SSxJQUFJeUssSUFBSixDQUFTblYsS0FBbEIsRUFBeUI7QUFDeEM7Ozs7Ozs7QUFPQTA1QywyQkFBdUIsK0JBQVVvZ0IsTUFBVixFQUFrQjtBQUN2QyxhQUFPQSxPQUFPQyxNQUFQLENBQWMsQ0FBZCxFQUFpQm4zQixXQUFqQixLQUFpQ2szQixPQUFPdlQsS0FBUCxDQUFhLENBQWIsQ0FBeEM7QUFDRCxLQVZ1Qzs7QUFheEM7Ozs7Ozs7QUFPQXRtRCxpQkFBYSx1QkFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxhQUFPLE1BQU1xZ0IsS0FBSzZqQyxNQUFMLEdBQWNyeUMsUUFBZCxDQUF1QixFQUF2QixFQUEyQlUsTUFBM0IsQ0FBa0MsQ0FBbEMsRUFBcUMsQ0FBckMsQ0FBYjtBQUNELEtBekJ1Qzs7QUEyQnhDOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQTh0QiwyQkFBdUIsK0JBQVUwNUIsS0FBVixFQUFpQjtBQUN0QyxVQUFJQyxNQUFKOztBQUVBLFVBQUksQ0FBQ0QsS0FBTCxFQUFZO0FBQ1YsZUFBTyxFQUFQO0FBQ0Q7O0FBRURDLGVBQVNELE1BQU1ybkQsT0FBTixDQUNMLEtBREssRUFDRSxNQURGLEVBRVBBLE9BRk8sQ0FHTCxLQUhLLEVBR0UsTUFIRixFQUlQQSxPQUpPLENBS0wsSUFMSyxFQUtDLFFBTEQsRUFNUEEsT0FOTyxDQU9MLElBUEssRUFPQyxRQVBELEVBUVBBLE9BUk8sQ0FTTCxJQVRLLEVBU0MsUUFURCxFQVVQQSxPQVZPLENBV0wsSUFYSyxFQVdDLFFBWEQsRUFZUEEsT0FaTyxDQWFMLElBYkssRUFhQyxRQWJELEVBY1BBLE9BZE8sQ0FlTCxJQWZLLEVBZUMsUUFmRCxDQUFUOztBQWtCQSxhQUFPc25ELE1BQVA7QUFDRCxLQXRFdUMsRUFzRXJDOztBQUVIOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQXI0QiwyQkFBdUIsK0JBQVVvNEIsS0FBVixFQUFpQjtBQUN0QyxVQUFJQyxNQUFKOztBQUVBLFVBQUksQ0FBQ0QsS0FBTCxFQUFZO0FBQ1YsZUFBTyxFQUFQO0FBQ0Q7QUFDRCxVQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0JBLGdCQUFRQSxRQUFRLEVBQWhCO0FBQ0Q7O0FBRURDLGVBQVNELE1BQU1ybkQsT0FBTixDQUNMLE9BREssRUFDSSxJQURKLEVBRVBBLE9BRk8sQ0FHTCxPQUhLLEVBR0ksSUFISixFQUlQQSxPQUpPLENBS0wsU0FMSyxFQUtNLEdBTE4sRUFNUEEsT0FOTyxDQU9MLFNBUEssRUFPTSxHQVBOLEVBUVBBLE9BUk8sQ0FTTCxTQVRLLEVBU00sR0FUTixFQVVQQSxPQVZPLENBV0wsU0FYSyxFQVdNLEdBWE4sRUFZUEEsT0FaTyxDQWFMLFNBYkssRUFhTSxJQWJOLEVBY1BBLE9BZE8sQ0FlTCxTQWZLLEVBZU0sR0FmTixDQUFUOztBQWtCQSxhQUFPc25ELE1BQVA7QUFDRCxLQXRIdUMsRUFzSHJDOztBQUVIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkFqZ0MsaUJBQWEscUJBQVVrZ0MsS0FBVixFQUFpQkMsVUFBakIsRUFBNkJDLFdBQTdCLEVBQTBDO0FBQ3JELFVBQUkzZ0MsSUFBSixFQUNJNGdDLFdBREosRUFFSUMsYUFGSixFQUdJaDdELENBSEo7O0FBS0EsVUFBSSxRQUFPNDZELEtBQVAseUNBQU9BLEtBQVAsT0FBaUJ2cEQsU0FBckIsRUFBZ0M7QUFDOUIsZUFBTyxLQUFQO0FBQ0Q7O0FBRUQ4b0IsYUFBT21NLFNBQVNta0IsTUFBVCxHQUFrQm5rQixTQUFTQyxRQUFsQzs7QUFFQSxVQUFJLENBQUNzMEIsVUFBTCxFQUFpQjtBQUNmO0FBQ0EsWUFBSUMsV0FBSixFQUFpQjtBQUNmeDBCLG1CQUFTMjBCLElBQVQsR0FBZ0JMLEtBQWhCO0FBQ0EsaUJBQU8sSUFBUDtBQUNEO0FBQ0R6Z0MsZ0JBQVFtTSxTQUFTanNCLE1BQVQsR0FBa0IsR0FBbEIsR0FBd0J1Z0QsS0FBaEM7QUFDRCxPQVBELE1BT087QUFDTDtBQUNBLFlBQUl0MEIsU0FBU2pzQixNQUFiLEVBQXFCO0FBQ25CO0FBQ0EyZ0QsMEJBQWdCLEtBQWhCO0FBQ0FILHVCQUFhQSxXQUFXdDZELFdBQVgsRUFBYjtBQUNBO0FBQ0F3NkQsd0JBQWN6MEIsU0FBU2pzQixNQUFULENBQWdCaEgsT0FBaEIsQ0FDVix1QkFEVSxFQUVWLFVBQVVxM0IsS0FBVixFQUFpQmxtQyxHQUFqQixFQUFzQm9OLEtBQXRCLEVBQTZCcTBDLE1BQTdCLEVBQXFDaVYsWUFBckMsRUFBbUQ7QUFDakQsZ0JBQUkxMkQsUUFBUXEyRCxVQUFaLEVBQXdCO0FBQ3RCRyw4QkFBZ0IsSUFBaEI7QUFDQSxxQkFBT3gyRCxNQUFNLEdBQU4sR0FBWW8yRCxLQUFuQjtBQUNEO0FBQ0QsbUJBQU9sd0IsS0FBUDtBQUNELFdBUlMsQ0FBZDtBQVVBO0FBQ0EsY0FBSSxDQUFDc3dCLGFBQUwsRUFBb0I7QUFDbEJELDJCQUFlLE1BQU1GLFVBQU4sR0FBbUIsR0FBbkIsR0FBeUJELEtBQXhDO0FBQ0Q7QUFDRixTQW5CRCxNQW1CTztBQUNMO0FBQ0FHLHdCQUFjLE1BQU1GLFVBQU4sR0FBbUIsR0FBbkIsR0FBeUJELEtBQXZDO0FBQ0Q7QUFDRCxZQUFJRSxXQUFKLEVBQWlCO0FBQ2Z4MEIsbUJBQVNqc0IsTUFBVCxHQUFrQjBnRCxXQUFsQjtBQUNBLGlCQUFPLElBQVA7QUFDRDtBQUNENWdDLGdCQUFRNGdDLGNBQWN6MEIsU0FBUzIwQixJQUEvQjtBQUNEOztBQUVELGFBQU85Z0MsSUFBUDtBQUNELEtBcE11QyxFQW9NckM7O0FBRUg7Ozs7Ozs7Ozs7OztBQVlBZ2hDLGlCQUFhLHFCQUFVTixVQUFWLEVBQXNCO0FBQ2pDLFVBQUlELEtBQUosRUFDSVEsS0FESjs7QUFHQSxVQUFJLENBQUNQLFVBQUwsRUFBaUI7QUFDZkQsZ0JBQVF0MEIsU0FBUzIwQixJQUFULENBQWM5YSxTQUFkLENBQXdCLENBQXhCLENBQVI7QUFDRCxPQUZELE1BRU87QUFDTCxZQUFJLENBQUM3WixTQUFTanNCLE1BQWQsRUFBc0I7QUFDcEJ1Z0Qsa0JBQVEsRUFBUjtBQUNELFNBRkQsTUFFTztBQUNMUSxrQkFBUSxJQUFJQyxNQUFKLENBQVcsV0FBV1IsVUFBWCxHQUF3QixVQUFuQyxFQUErQyxHQUEvQyxDQUFSO0FBQ0FELGtCQUFRUSxNQUFNRSxJQUFOLENBQVdoMUIsU0FBU2pzQixNQUFwQixDQUFSO0FBQ0F1Z0Qsa0JBQVFBLFFBQVFBLE1BQU0sQ0FBTixDQUFSLEdBQW1CLEVBQTNCO0FBQ0Q7QUFDRjs7QUFFRCxhQUFPQSxLQUFQO0FBQ0QsS0FuT3VDLEVBbU9yQzs7QUFFSDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQXBnQyxpQkFBYSxxQkFBVStnQyxRQUFWLEVBQW9CO0FBQy9CLFVBQUlDLFNBQUosRUFDSXg3RCxDQURKOztBQUdBLFVBQUksQ0FBQ3U3RCxRQUFMLEVBQWU7QUFDYixlQUFPLEVBQVA7QUFDRDtBQUNELFVBQUlBLFNBQVMvNkQsTUFBVCxLQUFvQixDQUF4QixFQUEyQjtBQUN6QixlQUFPKzZELFFBQVA7QUFDRDs7QUFFREEsZUFBU3I3RCxJQUFULENBQWMsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQzVCLGVBQU9ELElBQUlDLENBQVg7QUFDRCxPQUZEOztBQUlBbzdELGtCQUFZLEVBQVo7QUFDQUEsZ0JBQVUsQ0FBVixJQUFlRCxTQUFTLENBQVQsQ0FBZjtBQUNBLFdBQUt2N0QsSUFBSSxDQUFULEVBQVlBLElBQUl1N0QsU0FBUy82RCxNQUF6QixFQUFpQ1IsS0FBSyxDQUF0QyxFQUF5QztBQUN2Q3c3RCxrQkFBVXg3RCxDQUFWLElBQWV1N0QsU0FBU3Y3RCxDQUFULElBQWN1N0QsU0FBU3Y3RCxJQUFJLENBQWIsQ0FBN0I7QUFDRDs7QUFFRCxhQUFPdzdELFNBQVA7QUFFRCxLQWxSdUMsRUFrUnJDOztBQUVIOzs7Ozs7OztBQVFBQyxpQkFBYSxxQkFBVUYsUUFBVixFQUFvQjtBQUMvQixVQUFJQyxTQUFKLEVBQ0l4N0QsQ0FESjs7QUFHQSxVQUFJLENBQUN1N0QsUUFBTCxFQUFlO0FBQ2IsZUFBTyxFQUFQO0FBQ0Q7O0FBRURDLGtCQUFZLEVBQVo7QUFDQUEsZ0JBQVUsQ0FBVixJQUFlbjdELFNBQVNrN0QsU0FBUyxDQUFULENBQVQsRUFBc0IsRUFBdEIsQ0FBZjtBQUNBLFVBQUk1WSxNQUFNNFksU0FBUyxDQUFULENBQU4sQ0FBSixFQUF3QjtBQUN0QixlQUFPLEVBQVA7QUFDRDtBQUNELFdBQUt2N0QsSUFBSSxDQUFULEVBQVlBLElBQUl1N0QsU0FBUy82RCxNQUF6QixFQUFpQ1IsS0FBSyxDQUF0QyxFQUF5QztBQUN2Q3c3RCxrQkFBVXg3RCxDQUFWLElBQWVLLFNBQVNrN0QsU0FBU3Y3RCxDQUFULENBQVQsRUFBc0IsRUFBdEIsSUFBNEJ3N0QsVUFBVXg3RCxJQUFJLENBQWQsQ0FBM0M7QUFDQSxZQUFJMmlELE1BQU02WSxVQUFVeDdELENBQVYsQ0FBTixDQUFKLEVBQXlCO0FBQ3ZCLGlCQUFPLEVBQVA7QUFDRDtBQUNGOztBQUVELGFBQU93N0QsU0FBUDtBQUVELEtBbFR1QyxFQWtUckM7O0FBRUg7Ozs7OztBQU1BOTVELHVCQUFtQiwyQkFBVWc2RCxnQkFBVixFQUE0QnhoQyxVQUE1QixFQUF3QztBQUN6RCxVQUFJajZCLENBQUo7O0FBRUEsVUFBSXk3RCxvQkFBb0JBLGlCQUFpQmw3RCxNQUFqQixHQUEwQixDQUFsRCxFQUFxRDtBQUNuRCxhQUFLUCxJQUFJLENBQVQsRUFBWUEsSUFBSXk3RCxpQkFBaUJsN0QsTUFBakMsRUFBeUNQLEtBQUssQ0FBOUMsRUFBaUQ7QUFDL0MsY0FBSSxPQUFPeTdELGlCQUFpQno3RCxDQUFqQixDQUFQLEtBQStCLFVBQW5DLEVBQStDO0FBQzdDeTdELDZCQUFpQno3RCxDQUFqQixFQUFvQmk2QixVQUFwQjtBQUNEO0FBQ0Y7QUFDRjtBQUNGLEtBcFV1QyxFQW9VckM7O0FBRUg7Ozs7Ozs7O0FBUUF4b0IsOEJBQTBCLGtDQUFVaXFELEdBQVYsRUFBZUMsV0FBZixFQUE0QkMsU0FBNUIsRUFBdUM7O0FBRS9ELFVBQUlDLE1BQUosRUFBWXhELENBQVosRUFBZTVQLENBQWYsRUFBa0J0b0QsQ0FBbEIsRUFBcUJELENBQXJCOztBQUVBMjdELGVBQVN6N0QsU0FBU3M3RCxHQUFULEVBQWMsRUFBZCxDQUFUO0FBQ0EsVUFBSUMsZUFBZUEsWUFBWWhxRCxLQUEvQixFQUFzQztBQUNwQ2dxRCxvQkFBWWhxRCxLQUFaLEdBQW9CdlIsU0FBU3U3RCxZQUFZaHFELEtBQXJCLENBQXBCO0FBQ0Q7O0FBRUQsVUFBSWdxRCxlQUFlLE9BQU9BLFdBQVAsS0FBdUIsUUFBMUMsRUFBb0Q7QUFDbEQsWUFBSSxRQUFPQSxXQUFQLHlDQUFPQSxXQUFQLE9BQXVCLFFBQXZCLElBQW1DQSxZQUFZaHFELEtBQW5ELEVBQTBEO0FBQ3hEZ3FELHdCQUFjQSxZQUFZaHFELEtBQTFCO0FBQ0QsU0FGRCxNQUVPO0FBQ0xncUQsd0JBQWMsR0FBZDtBQUNEO0FBQ0Y7O0FBRUR0RCxVQUFLd0QsVUFBVSxFQUFYLEdBQWlCLEdBQXJCO0FBQ0FwVCxVQUFLb1QsVUFBVSxDQUFYLEdBQWdCLEdBQXBCO0FBQ0ExN0QsVUFBSTA3RCxTQUFTLEdBQWI7QUFDQTM3RCxVQUFJeTdELGNBQWVBLGNBQWMsR0FBN0IsR0FBb0MsQ0FBeEM7QUFDQSxVQUFHQyxTQUFILEVBQWE7QUFDWCxlQUFPLENBQUN2RCxDQUFELEVBQUc1UCxDQUFILEVBQUt0b0QsQ0FBTCxFQUFPRCxDQUFQLENBQVA7QUFDRDs7QUFFRCxhQUFPLFVBQVVtNEQsQ0FBVixHQUFjLEdBQWQsR0FBb0I1UCxDQUFwQixHQUF3QixHQUF4QixHQUE4QnRvRCxDQUE5QixHQUFrQyxHQUFsQyxHQUF3Q0QsQ0FBeEMsR0FBNEMsR0FBbkQ7QUFDRCxLQXhXdUM7O0FBMFd4Qzs7Ozs7Ozs7Ozs7OztBQWFBMlYsaUJBQWEscUJBQVVvQyxPQUFWLEVBQW1CO0FBQzlCLFVBQUkxVyxLQUFKLEVBQ0l1NkQsWUFESixFQUVJLzdDLFNBRkosRUFHSUQsV0FISjs7QUFLQSxVQUFJLENBQUMzVSxJQUFJeUssSUFBSixDQUFTOHZCLGNBQVQsQ0FBd0J6dEIsT0FBeEIsQ0FBRCxJQUFxQyxDQUFDOU0sSUFBSXlLLElBQUosQ0FBUzh2QixjQUFULENBQXdCenRCLE9BQXhCLEVBQWlDMVcsS0FBM0UsRUFBa0Y7QUFDaEYsZUFBTyxFQUFQO0FBQ0Q7O0FBRURBLGNBQVE0SixJQUFJeUssSUFBSixDQUFTOHZCLGNBQVQsQ0FBd0J6dEIsT0FBeEIsRUFBaUMxVyxLQUFqQyxHQUF5QyxDQUF6QyxDQUFSOztBQUVBd2Usa0JBQVl4ZSxNQUFNNGlDLE9BQU4sRUFBWjtBQUNBcmtCLG9CQUFjdmUsTUFBTStpQyxTQUFOLEVBQWQ7QUFDQXhrQixrQkFBWWk4QyxRQUFaLENBQXFCLENBQXJCOztBQUVBRCxxQkFBZSxJQUFJNTVELEdBQUdYLEtBQUgsQ0FBU3VRLEtBQWIsQ0FBbUI7QUFDaEMyUyxlQUFPLElBQUl2aUIsR0FBR1gsS0FBSCxDQUFTbWIsTUFBYixDQUFvQjtBQUN6QnRLLGdCQUFNMk4sU0FEbUI7QUFFekJhLGtCQUFRZCxXQUZpQjtBQUd6QmxQLGtCQUFRO0FBSGlCLFNBQXBCLENBRHlCO0FBTWhDO0FBQ0FnUSxnQkFBUWQsV0FQd0I7QUFRaEMxTixjQUFNMk47QUFSMEIsT0FBbkIsQ0FBZjs7QUFXQSxhQUFPLENBQUMrN0MsWUFBRCxDQUFQO0FBQ0QsS0FuWnVDLEVBbVpyQzs7QUFFSDs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQTUyQixxQkFBaUIseUJBQVU1dUIsUUFBVixFQUFvQjBsRCxvQkFBcEIsRUFBMENDLHVCQUExQyxFQUFtRTtBQUNsRixVQUFJdHFELEtBQUosRUFDSXVxRCxNQURKLEVBRUkvWixXQUZKLEVBR0lnYSxNQUhKLEVBSUlDLE1BSkosRUFLSW5YLE1BTEosRUFNSWxsRCxDQU5KOztBQVFBLFVBQUksQ0FBQ3VXLFFBQUwsRUFBZTtBQUNiLGVBQU8sS0FBUDtBQUNEOztBQUVEO0FBQ0EydUMsZUFBUyxFQUFUOztBQUVBLFVBQUkzdUMsb0JBQW9CcFUsR0FBR3FULElBQUgsQ0FBUXlCLFVBQTVCLElBQTJDVixvQkFBb0JwVSxHQUFHcVQsSUFBSCxDQUFRdUIsT0FBNUIsSUFBdUNrbEQsb0JBQXRGLEVBQTZHOztBQUUzRzdaLHNCQUFjN3JDLFNBQVNqQixjQUFULEVBQWQ7QUFDQSxZQUFJaUIsb0JBQW9CcFUsR0FBR3FULElBQUgsQ0FBUXVCLE9BQWhDLEVBQXlDO0FBQ3ZDcXJDLHdCQUFjQSxZQUFZLENBQVosQ0FBZDtBQUNEO0FBQ0R4d0MsZ0JBQVEsQ0FBUjtBQUNBLGFBQUs1UixJQUFJLENBQVQsRUFBWUEsSUFBSW9pRCxZQUFZNWhELE1BQVosR0FBcUIsQ0FBckMsRUFBd0NSLEtBQUssQ0FBN0MsRUFBZ0Q7QUFDOUNvOEQsbUJBQVNqNkQsR0FBRzZRLElBQUgsQ0FBUXFELFNBQVIsQ0FBa0IrckMsWUFBWXBpRCxDQUFaLENBQWxCLEVBQWtDLFdBQWxDLEVBQStDLFdBQS9DLENBQVQ7QUFDQXE4RCxtQkFBU2w2RCxHQUFHNlEsSUFBSCxDQUFRcUQsU0FBUixDQUFrQityQyxZQUFZcGlELElBQUksQ0FBaEIsQ0FBbEIsRUFBc0MsV0FBdEMsRUFBbUQsV0FBbkQsQ0FBVDtBQUNBNFIsbUJBQVN6UCxHQUFHZzZELE1BQUgsQ0FBVUcsV0FBVixDQUFzQkYsTUFBdEIsRUFBOEJDLE1BQTlCLEVBQXNDLE9BQXRDLENBQVQ7QUFDRDtBQUNEblgsZUFBTzlmLFFBQVAsR0FBa0IsQ0FBQ3BrQixLQUFLNGpDLEtBQUwsQ0FBV2h6QyxRQUFRLEdBQW5CLElBQTBCLEdBQTNCLEVBQWdDMm9CLE9BQWhDLENBQXdDLENBQXhDLENBQWxCO0FBQ0EsWUFBSTNvQixRQUFRLElBQVosRUFBa0I7QUFDaEJzekMsaUJBQU96aUIsU0FBUCxHQUFtQixDQUFDemhCLEtBQUs0akMsS0FBTCxDQUFXaHpDLFFBQVEsSUFBUixHQUFlLEdBQTFCLElBQWlDLEdBQWxDLEVBQXVDMm9CLE9BQXZDLENBQStDLENBQS9DLElBQ2YsR0FEZSxHQUNULElBRFY7QUFFRCxTQUhELE1BR087QUFDTDJxQixpQkFBT3ppQixTQUFQLEdBQW1CeWlCLE9BQU85ZixRQUFQLEdBQ2YsR0FEZSxHQUNULEdBRFY7QUFFRDtBQUVGLE9BckJELE1BcUJPLElBQUk3dUIsb0JBQW9CcFUsR0FBR3FULElBQUgsQ0FBUXVCLE9BQWhDLEVBQXlDO0FBQzlDO0FBQ0E7QUFDQW5GLGdCQUFRb1AsS0FBS3U3QyxHQUFMLENBQVNwNkQsR0FBR2c2RCxNQUFILENBQVVLLE9BQVYsQ0FBa0JqbUQsUUFBbEIsQ0FBVCxDQUFSO0FBQ0EydUMsZUFBTzlmLFFBQVAsR0FBa0IsQ0FBQ3BrQixLQUFLNGpDLEtBQUwsQ0FBV2h6QyxRQUFRLEdBQW5CLElBQTBCLEdBQTNCLEVBQWdDMm9CLE9BQWhDLENBQXdDLENBQXhDLENBQWxCO0FBQ0EsWUFBSTNvQixRQUFRLEtBQVosRUFBbUI7QUFDakJzekMsaUJBQU96aUIsU0FBUCxHQUFtQixDQUFDemhCLEtBQUs0akMsS0FBTCxDQUFXaHpDLFFBQVEsT0FBUixHQUFrQixHQUE3QixJQUFvQyxHQUFyQyxFQUEwQzJvQixPQUExQyxDQUFrRCxDQUFsRCxJQUNmLEdBRGUsR0FDVCxnQkFEVjtBQUVELFNBSEQsTUFHTztBQUNMMnFCLGlCQUFPemlCLFNBQVAsR0FBbUJ5aUIsT0FBTzlmLFFBQVAsR0FDZixHQURlLEdBQ1QsZUFEVjtBQUVEO0FBRUYsT0FiTSxNQWFBLElBQUk3dUIsb0JBQW9CcFUsR0FBR3FULElBQUgsQ0FBUW1ILE1BQTVCLElBQXNDdS9DLHVCQUExQyxFQUFtRTtBQUN0RSxZQUFJdjBELFNBQVM0TyxTQUFTM08sU0FBVCxFQUFiO0FBQ0EsWUFBSWlKLFNBQVMwRixTQUFTL0UsU0FBVCxFQUFiO0FBQ0EsWUFBSWlyRCxpQkFBaUIsQ0FBQzkwRCxPQUFPLENBQVAsSUFBWWtKLE1BQWIsRUFBcUJsSixPQUFPLENBQVAsQ0FBckIsQ0FBckI7QUFDQTtBQUNBLFlBQUlpSyxRQUFRelAsR0FBR2c2RCxNQUFILENBQVVHLFdBQVYsQ0FDUm42RCxHQUFHNlEsSUFBSCxDQUFRcUQsU0FBUixDQUFrQjFPLE1BQWxCLEVBQTBCLFdBQTFCLEVBQXVDLFdBQXZDLENBRFEsRUFFUnhGLEdBQUc2USxJQUFILENBQVFxRCxTQUFSLENBQWtCb21ELGNBQWxCLEVBQWtDLFdBQWxDLEVBQStDLFdBQS9DLENBRlEsRUFHUixPQUhRLENBQVo7O0FBTUE3cUQsZ0JBQVFvUCxLQUFLQyxFQUFMLEdBQVVELEtBQUtrRSxJQUFMLENBQVV0VCxLQUFWLENBQWxCOztBQUVBc3pDLGVBQU85ZixRQUFQLEdBQWtCLENBQUNwa0IsS0FBSzRqQyxLQUFMLENBQVdoekMsUUFBUSxHQUFuQixJQUEwQixHQUEzQixFQUFnQzJvQixPQUFoQyxDQUF3QyxDQUF4QyxDQUFsQjtBQUNBLFlBQUkzb0IsUUFBUSxLQUFaLEVBQW1CO0FBQ2ZzekMsaUJBQU96aUIsU0FBUCxHQUFtQixDQUFDemhCLEtBQUs0akMsS0FBTCxDQUFXaHpDLFFBQVEsT0FBUixHQUFrQixHQUE3QixJQUFvQyxHQUFyQyxFQUEwQzJvQixPQUExQyxDQUFrRCxDQUFsRCxJQUNmLEdBRGUsR0FDVCxnQkFEVjtBQUVILFNBSEQsTUFHTztBQUNIMnFCLGlCQUFPemlCLFNBQVAsR0FBbUJ5aUIsT0FBTzlmLFFBQVAsR0FDZixHQURlLEdBQ1QsZUFEVjtBQUVIO0FBR0osT0F2Qk0sTUF1QkEsSUFBSTd1QixvQkFBb0JwVSxHQUFHcVQsSUFBSCxDQUFRbUgsTUFBaEMsRUFBd0M7QUFDM0MsWUFBSWhWLFNBQVM0TyxTQUFTM08sU0FBVCxFQUFiO0FBQ0EsWUFBSWlKLFNBQVMwRixTQUFTL0UsU0FBVCxFQUFiO0FBQ0EsWUFBSWlyRCxpQkFBaUIsQ0FBQzkwRCxPQUFPLENBQVAsSUFBWWtKLE1BQWIsRUFBcUJsSixPQUFPLENBQVAsQ0FBckIsQ0FBckI7QUFDQTtBQUNBLFlBQUlpSyxRQUFRelAsR0FBR2c2RCxNQUFILENBQVVHLFdBQVYsQ0FDUm42RCxHQUFHNlEsSUFBSCxDQUFRcUQsU0FBUixDQUFrQjFPLE1BQWxCLEVBQTBCLFdBQTFCLEVBQXVDLFdBQXZDLENBRFEsRUFFUnhGLEdBQUc2USxJQUFILENBQVFxRCxTQUFSLENBQWtCb21ELGNBQWxCLEVBQWtDLFdBQWxDLEVBQStDLFdBQS9DLENBRlEsRUFHUixPQUhRLENBQVo7O0FBTUF2WCxlQUFPOWYsUUFBUCxHQUFrQixDQUFDcGtCLEtBQUs0akMsS0FBTCxDQUFXaHpDLFFBQVEsR0FBbkIsSUFBMEIsR0FBM0IsRUFBZ0Myb0IsT0FBaEMsQ0FBd0MsQ0FBeEMsQ0FBbEI7QUFDQSxZQUFJMnFCLE9BQU85ZixRQUFQLEdBQWtCLEtBQXRCLEVBQTZCO0FBQ3pCOGYsaUJBQU96aUIsU0FBUCxHQUFtQixDQUFDemhCLEtBQUs0akMsS0FBTCxDQUFZaHpDLFFBQVEsR0FBVCxHQUFnQixHQUEzQixJQUFrQyxJQUFuQyxFQUF5QzJvQixPQUF6QyxDQUFpRCxDQUFqRCxJQUNmLEdBRGUsR0FDVCxJQURWO0FBRUgsU0FIRCxNQUdPO0FBQ0gycUIsaUJBQU96aUIsU0FBUCxHQUFtQnlpQixPQUFPOWYsUUFBUCxHQUNmLEdBRGUsR0FDVCxHQURWO0FBRUg7QUFDSixPQW5CTSxNQW1CQTtBQUNMOGYsaUJBQVMsQ0FBVDtBQUNEOztBQUVELGFBQU9BLE1BQVA7QUFDRCxLQXRnQnVDOztBQXdnQnhDOzs7Ozs7O0FBT0F6ZCw0QkFBd0IsZ0NBQVVpMUIsYUFBVixFQUF5QjtBQUMvQyxVQUFJQyxZQUFKOztBQUVBLFVBQUksQ0FBQ0QsYUFBTCxFQUFvQjtBQUNsQmo5RCxnQkFBUUMsSUFBUixDQUFhLDJDQUFiO0FBQ0EsZUFBTyxLQUFQO0FBQ0Q7O0FBRURpOUQscUJBQWUsSUFBSXg2RCxHQUFHRSxNQUFILENBQVV1USxNQUFkLEVBQWY7QUFDQStwRCxtQkFBYXpsRCxXQUFiLENBQXlCd2xELGFBQXpCOztBQUVBLGFBQU9DLGFBQWF2ckQsU0FBYixNQUE0QmpQLEdBQUd5NkQsTUFBSCxDQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUFWLENBQW5DO0FBQ0QsS0EzaEJ1QyxFQTJoQnJDOztBQUVIOzs7Ozs7Ozs7O0FBVUF2akQsa0JBQWMsc0JBQVV3akQsT0FBVixFQUFtQi8yRCxHQUFuQixFQUF3QmczRCxXQUF4QixFQUFxQ0MscUJBQXJDLEVBQTREO0FBQ3hFLFVBQUl2MkQsSUFBSixFQUNJNHRDLE9BREosRUFFSTd4QyxNQUZKLEVBR0lpQyxHQUhKOztBQUtBLFVBQUksQ0FBQ3E0RCxPQUFELElBQVksQ0FBQy8yRCxHQUFqQixFQUFzQjtBQUNwQnJHLGdCQUFRQyxJQUFSLENBQWEscUNBQWI7QUFDQSxlQUFPLEtBQVA7QUFDRDtBQUNEOztBQUVBLFdBQUs4RSxHQUFMLElBQVlxNEQsT0FBWixFQUFxQjtBQUNuQixZQUFJQSxRQUFRbjNELGNBQVIsQ0FBdUJsQixHQUF2QixDQUFKLEVBQWlDO0FBQy9CLGNBQUksT0FBT2pDLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDakNBLHFCQUFTczZELFFBQVFyNEQsR0FBUixDQUFUO0FBQ0QsV0FGRCxNQUVPO0FBQ0xyQyxlQUFHSSxNQUFILENBQVVDLE1BQVYsQ0FBaUJELE1BQWpCLEVBQXlCczZELFFBQVFyNEQsR0FBUixDQUF6QjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFLZ2pDLFdBQUwsQ0FBaUJqbEMsTUFBakIsRUFBeUJ1RCxHQUF6QixFQUE4QmczRCxXQUE5QixFQUEyQyxDQUEzQyxFQUE4QyxDQUE5QyxFQUFpRCxDQUFqRCxFQUFvRCxDQUFwRDtBQUdELEtBaGtCdUMsRUFna0JyQzs7QUFFSDs7Ozs7Ozs7Ozs7Ozs7QUFjQXQxQixpQkFBYSxxQkFBVWpsQyxNQUFWLEVBQWtCdUQsR0FBbEIsRUFBdUJnM0QsV0FBdkIsRUFBb0NDLHFCQUFwQyxFQUEyREMsV0FBM0QsRUFBd0VDLFdBQXhFLEVBQXFGQyxpQkFBckYsRUFBd0c7QUFDbkgsVUFBSTEyRCxJQUFKLEVBQ0k0dEMsT0FESixFQUVJK29CLFVBRko7O0FBSUEsVUFBSSxDQUFDNTZELE1BQUQsSUFBVyxDQUFDdUQsR0FBaEIsRUFBcUI7QUFDbkJyRyxnQkFBUUMsSUFBUixDQUFhLHFDQUFiO0FBQ0EsZUFBTyxLQUFQO0FBQ0Q7O0FBRUQ4RyxhQUFPVixJQUFJQyxPQUFKLEVBQVA7O0FBRUFvM0QsbUJBQWE7QUFDWCxtQkFBV0wsZUFBZSxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsRUFBVCxFQUFhLEVBQWI7QUFEZixPQUFiOztBQUlBLFVBQUlJLHFCQUFxQkEsb0JBQW9CLENBQTdDLEVBQWdEO0FBQzlDQyxtQkFBV0MsYUFBWCxHQUEyQkYsaUJBQTNCO0FBQ0Q7O0FBRUQsVUFBSUYsZUFBZUEsZUFBZSxDQUFsQyxFQUFxQztBQUNuQ0csbUJBQVdsM0QsT0FBWCxHQUFxQisyRCxXQUFyQjtBQUNEOztBQUVELFVBQUlDLGVBQWVBLGVBQWUsQ0FBbEMsRUFBcUM7QUFDbkNFLG1CQUFXdDNELE9BQVgsR0FBcUJvM0QsV0FBckI7QUFDRDs7QUFFRDtBQUNBLFVBQUlGLHlCQUF5QkEsd0JBQXdCLENBQXJELEVBQXdEO0FBQ3REdjJELGFBQUtvdEMsT0FBTCxDQUFhO0FBQ1g5dUIsaUJBQU8sQ0FBQyxJQUFJK3VCLElBQUosRUFERztBQUVYQyxvQkFBVWlwQixxQkFGQztBQUdYenpELHNCQUFZOUMsS0FBSytDLGFBQUwsRUFIRDtBQUlYNUIsa0JBQVEsQ0FBQyxDQUFELEVBQUksQ0FBSjtBQUNSO0FBTFcsU0FBYjtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNEOztBQUVELFVBQUk7QUFDRm5CLGFBQUswdEMsR0FBTCxDQUFTM3hDLE1BQVQsRUFBaUJ1RCxJQUFJcXVDLE9BQUosRUFBakIsRUFBZ0MsRUFBQ0MsU0FBUyxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsRUFBVCxFQUFhLEVBQWIsQ0FBVixFQUFoQztBQUNBO0FBQ0E7QUFDQSxlQUFPLElBQVA7QUFDRCxPQUxELENBS0UsT0FBTzUvQixDQUFQLEVBQVU7QUFDVixlQUFPLEtBQVA7QUFDRDtBQUNGLEtBM29CdUMsRUEyb0JyQzs7QUFFSDs7Ozs7Ozs7O0FBU0EyeUMsNEJBQXdCLGdDQUFVa1csUUFBVixFQUFvQjVzRCxPQUFwQixFQUE2QjZzRCxTQUE3QixFQUF3QztBQUM5RCxVQUFJQyxTQUFKOztBQUVBO0FBQ0E7QUFDQSxVQUFJLENBQUNGLFFBQUQsSUFBYSxDQUFDNXNELE9BQWxCLEVBQTJCO0FBQ3pCLGVBQU80c0QsUUFBUDtBQUNEOztBQUVERSxrQkFBWSxLQUFLQywyQkFBTCxDQUFpQ0gsUUFBakMsRUFBMkM1c0QsT0FBM0MsRUFBb0Q2c0QsU0FBcEQsQ0FBWjtBQUNBQyxrQkFBWSxLQUFLRSw2QkFBTCxDQUFtQ0YsU0FBbkMsRUFBOEM5c0QsT0FBOUMsQ0FBWjtBQUNBOHNELGtCQUFZLEtBQUtHLDRCQUFMLENBQWtDSCxTQUFsQyxFQUE2QzlzRCxPQUE3QyxDQUFaOztBQUVBLGFBQU84c0QsU0FBUDtBQUNELEtBcHFCdUMsRUFvcUJyQzs7QUFFSDs7Ozs7Ozs7Ozs7O0FBWUFDLGlDQUE2QixxQ0FBVUgsUUFBVixFQUFvQjVzRCxPQUFwQixFQUE2QnJQLEtBQTdCLEVBQW9DO0FBQy9ELFVBQUltOEQsU0FBSjs7QUFFQSxVQUFJLENBQUNGLFFBQUQsSUFBYSxDQUFDNXNELE9BQWQsSUFBeUIsQ0FBQ3JQLEtBQTlCLEVBQXFDO0FBQ25DLGVBQU9pOEQsUUFBUDtBQUNEOztBQUVERSxrQkFBWUYsU0FBU2hxRCxPQUFULENBQ1IsbUJBRFEsRUFFUixVQUFVcTNCLEtBQVYsRUFBaUJpekIsWUFBakIsRUFBK0IxWCxNQUEvQixFQUF1Q2lWLFlBQXZDLEVBQXFEO0FBQ25ELFlBQUkxNUQsS0FBSjs7QUFFQTtBQUNBLFlBQUksT0FBTzY0RCxlQUFlc0QsWUFBZixDQUFQLEtBQXdDLFVBQTVDLEVBQXdEO0FBQ3REO0FBQ0EsY0FBSSxPQUFPbHRELFFBQVFhLFFBQWYsS0FBNEIsVUFBNUIsSUFBMENiLFFBQVFhLFFBQVIsRUFBMUMsSUFBZ0UsT0FBT2IsUUFBUWEsUUFBUixFQUFQLEtBQThCLFVBQWxHLEVBQThHO0FBQzVHOVAsb0JBQVFpUCxRQUFRYSxRQUFSLEVBQVI7QUFDRCxXQUZELE1BRU8sSUFBSSxPQUFPbFEsTUFBTWtRLFFBQWIsS0FBMEIsVUFBMUIsSUFBd0NsUSxNQUFNa1EsUUFBTixFQUE1QyxFQUE4RDtBQUNuRTlQLG9CQUFRSixNQUFNa1EsUUFBTixFQUFSO0FBQ0QsV0FGTSxNQUVBO0FBQ0wsbUJBQU8sRUFBUDtBQUNEO0FBQ0QsaUJBQU8rb0QsZUFBZXNELFlBQWYsRUFBNkJsdEQsT0FBN0IsRUFBc0NqUCxLQUF0QyxDQUFQO0FBQ0Q7QUFDRCxlQUFPLEVBQVA7QUFDRCxPQWxCTyxDQUFaLENBUCtELENBMEI1RDs7QUFFSCxhQUFPKzdELFNBQVA7QUFDRCxLQS9zQnVDLEVBK3NCckM7O0FBRUg7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkFFLG1DQUErQix1Q0FBVUosUUFBVixFQUFvQjVzRCxPQUFwQixFQUE2QjtBQUMxRCxVQUFJOHNELFNBQUo7O0FBRUEsVUFBSSxDQUFDRixRQUFELElBQWEsQ0FBQzVzRCxPQUFkLElBQXlCLE9BQU9BLFFBQVFwSixHQUFmLEtBQXVCLFVBQXBELEVBQWdFO0FBQzlELGVBQU9nMkQsUUFBUDtBQUNEOztBQUVERSxrQkFBWUYsU0FBU2hxRCxPQUFULENBQ1IsMEJBRFEsRUFFUixVQUFVcTNCLEtBQVYsRUFBaUJuOEIsSUFBakIsRUFBdUJxdkQsS0FBdkIsRUFBOEIzWCxNQUE5QixFQUFzQ2lWLFlBQXRDLEVBQW9EO0FBQ2xELFlBQUlyN0IsVUFBSixFQUNJNy9CLENBREo7O0FBR0E7QUFDQSxZQUFJeVEsUUFBUXBKLEdBQVIsQ0FBWSxZQUFaLENBQUosRUFBK0I7QUFDN0J3NEIsdUJBQWFwdkIsUUFBUXBKLEdBQVIsQ0FBWSxZQUFaLENBQWI7QUFDQTtBQUNBLGVBQUtySCxJQUFJLENBQVQsRUFBWUEsSUFBSTYvQixXQUFXci9CLE1BQTNCLEVBQW1DUixLQUFLLENBQXhDLEVBQTJDO0FBQ3pDLGdCQUFJNi9CLFdBQVc3L0IsQ0FBWCxFQUFjd0UsR0FBZCxLQUFzQm81RCxLQUExQixFQUFpQztBQUMvQjtBQUNBLGtCQUFJcnZELFNBQVMsSUFBVCxJQUFrQkEsU0FBUyxLQUFULElBQWtCc3hCLFdBQVc3L0IsQ0FBWCxFQUFjNFIsS0FBdEQsRUFBOEQ7QUFDNUQsdUJBQU9pdUIsV0FBVzcvQixDQUFYLEVBQWNzUSxLQUFyQjtBQUNELGVBRkQsTUFFTztBQUNMLHVCQUFPdXZCLFdBQVc3L0IsQ0FBWCxFQUFjNFIsS0FBckI7QUFDRDtBQUNGO0FBQ0Y7QUFDRjtBQUNELGVBQU8sRUFBUDtBQUNELE9BdEJPLENBQVosQ0FQMEQsQ0E4QnZEOztBQUVILGFBQU8yckQsU0FBUDtBQUNELEtBbHdCdUMsRUFrd0JyQzs7QUFFSDs7Ozs7Ozs7OztBQVVBRyxrQ0FBOEIsc0NBQVVMLFFBQVYsRUFBb0I1c0QsT0FBcEIsRUFBNkI7QUFDekQsVUFBSThzRCxTQUFKOztBQUVBLFVBQUksQ0FBQ0YsUUFBRCxJQUFhLENBQUM1c0QsT0FBZCxJQUF5QixPQUFPQSxRQUFRcEosR0FBZixLQUF1QixVQUFwRCxFQUFnRTtBQUM5RCxlQUFPZzJELFFBQVA7QUFDRDs7QUFFREUsa0JBQVlGLFNBQVNocUQsT0FBVCxDQUNSLGlCQURRLEVBRVIsVUFBVXEzQixLQUFWLEVBQWlCZ04sSUFBakIsRUFBdUJ1TyxNQUF2QixFQUErQmlWLFlBQS9CLEVBQTZDO0FBQzNDLGVBQU96cUQsUUFBUXBKLEdBQVIsQ0FBWXF3QyxJQUFaLEtBQXFCLEVBQTVCO0FBQ0QsT0FKTyxDQUFaLENBUHlELENBWXREOztBQUVILGFBQU82bEIsU0FBUDtBQUNELEtBN3hCdUMsRUE2eEJyQzs7QUFFSGx2RCxtQkFBZSx1QkFBVXd2RCxNQUFWLEVBQWtCO0FBQy9CLFVBQUlBLFVBQVUsUUFBT0EsTUFBUCx5Q0FBT0EsTUFBUCxPQUFrQixRQUFoQyxFQUEwQztBQUN4Q0EsaUJBQVM1dUIsT0FBT0MsSUFBUCxDQUFZMnVCLE1BQVosRUFBb0IvM0QsR0FBcEIsQ0FBd0IsVUFBVXRCLEdBQVYsRUFBZTtBQUM5QyxpQkFBT3E1RCxPQUFPcjVELEdBQVAsQ0FBUDtBQUNELFNBRlEsQ0FBVDtBQUdEO0FBQ0QsYUFBT3E1RCxNQUFQO0FBQ0QsS0F0eUJ1QyxFQXN5QnJDOztBQUVIM2tELGtCQXh5QndDLDBCQXd5QnpCN1csTUF4eUJ5QixFQXd5QmpCYixLQXh5QmlCLEVBd3lCVjtBQUMxQixVQUFJczhELE9BQUo7O0FBRUE7QUFDQSxVQUFJLE9BQU90OEQsS0FBUCxLQUFpQixVQUFyQixFQUFpQztBQUM3QnM4RCxrQkFBVXQ4RCxLQUFWO0FBQ0gsT0FGRCxNQUVPLElBQUlBLFVBQVU2UCxTQUFkLEVBQXlCO0FBQzVCeXNELGtCQUFVLG1CQUFZO0FBQ2xCLGlCQUFPdDhELEtBQVA7QUFDSCxTQUZEO0FBR0g7O0FBRUQsYUFBTyxJQUFJVyxHQUFHZixLQUFILENBQVN3UixNQUFiLENBQW9CO0FBQ3ZCdlEsZ0JBQVFBLE1BRGU7QUFFdkJiLGVBQU9zOEQ7QUFGZ0IsT0FBcEIsQ0FBUDtBQUlILEtBeHpCdUM7QUF3ekJ0Qzs7QUFFRjs7OztBQUlBQyx1QkE5ekJ3QyxpQ0E4ekJsQjtBQUNwQixhQUFPaHlELE9BQU91NkIsUUFBUCxDQUFnQm1PLElBQXZCO0FBQ0QsS0FoMEJ1Qzs7O0FBazBCeENockMsbUJBQWUsdUJBQVUvSyxhQUFWLEVBQXlCO0FBQ3RDLFVBQUlvSixVQUFVcEosY0FBY1MsSUFBNUI7QUFDQSxVQUFJOEksMEJBQTBCQyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQTlCO0FBQ0FGLDhCQUF3QkcsU0FBeEIsR0FBb0NDLHdFQUFZQSxDQUFDQyxvQkFBYixHQUFvQyxHQUFwQyxHQUEwQ0Qsd0VBQVlBLENBQUNFLGVBQTNGO0FBQ0E3SixvQkFBYzhKLDJCQUFkLENBQTBDQyxPQUExQyxDQUFrRFIsdUJBQWxEOztBQUVBLFVBQUlTLDZCQUE2QlIsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFqQztBQUNBTyxpQ0FBMkJOLFNBQTNCLEdBQXVDQyx3RUFBWUEsQ0FBQ00sb0JBQWIsR0FBb0MsR0FBcEMsR0FBMENOLHdFQUFZQSxDQUFDRSxlQUE5RjtBQUNBNUYsUUFBRXNGLHVCQUFGLEVBQTJCVyxLQUEzQixDQUFpQ0YsMEJBQWpDO0FBQ0FoSyxvQkFBY21LLGlCQUFkLENBQWdDakksSUFBaEMsQ0FBcUM4SCwwQkFBckM7O0FBRUEsVUFBSUksZ0NBQWdDWixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQXBDO0FBQ0FXLG9DQUE4QlYsU0FBOUIsR0FBMENDLHdFQUFZQSxDQUFDVSx3QkFBYixHQUF3QyxHQUF4QyxHQUE4Q1Ysd0VBQVlBLENBQUNFLGVBQXJHOztBQUVBLFVBQUlULFFBQVFrMkQsU0FBWixFQUF1QjtBQUNyQnQvRCxzQkFBY29ILEdBQWQsQ0FBa0JtNEQsYUFBbEIsQ0FBZ0N2L0QsY0FBY29QLFFBQWQsQ0FBdUJrd0QsU0FBdkQ7QUFDQXQvRCxzQkFBY29QLFFBQWQsQ0FBdUJrd0QsU0FBdkIsR0FBbUMsSUFBSTc3RCxHQUFHdTBCLE9BQUgsQ0FBV3duQyxTQUFmLENBQXlCO0FBQzFEamtDLG1CQUFTdjdCLGNBQWNvSCxHQUFkLENBQWtCQyxPQUFsQixFQURpRDtBQUUxRGl5QixrQkFBUXR2QiwwQkFGa0Q7QUFHMURpN0MseUJBQWU7QUFIMkMsU0FBekIsQ0FBbkM7QUFLQWpsRCxzQkFBY29ILEdBQWQsQ0FBa0JxNEQsVUFBbEIsQ0FBNkJ6L0QsY0FBY29QLFFBQWQsQ0FBdUJrd0QsU0FBcEQ7QUFDRDs7QUFFRHI3RCxRQUFFK0YsMEJBQUYsRUFBOEI2eEMsTUFBOUIsQ0FBcUN6eEMsNkJBQXJDOztBQUVBLFVBQUloQixRQUFRQyxTQUFaLEVBQXVCO0FBQ3JCckosc0JBQWNvSCxHQUFkLENBQWtCbTRELGFBQWxCLENBQWdDdi9ELGNBQWNvUCxRQUFkLENBQXVCL0YsU0FBdkQ7QUFDQXJKLHNCQUFjb1AsUUFBZCxDQUF1Qi9GLFNBQXZCLEdBQW1DLElBQUkwN0MsOEVBQUosQ0FBYztBQUMvQ3hwQixtQkFBU3Y3QixjQUFjb0gsR0FBZCxDQUFrQkMsT0FBbEIsRUFEc0M7QUFFL0NpeUIsa0JBQVFsdkIsNkJBRnVDO0FBRy9DNjZDLHlCQUFlO0FBSGdDLFNBQWQsQ0FBbkM7QUFLQWpsRCxzQkFBY29ILEdBQWQsQ0FBa0JxNEQsVUFBbEIsQ0FBNkJ6L0QsY0FBY29QLFFBQWQsQ0FBdUIvRixTQUFwRDtBQUNEOztBQUVELFVBQUlELFFBQVFFLGFBQVosRUFBMkI7QUFDekJ0SixzQkFBY29ILEdBQWQsQ0FBa0JtNEQsYUFBbEIsQ0FBZ0N2L0QsY0FBY29QLFFBQWQsQ0FBdUI5RixhQUF2RDtBQUNBdEosc0JBQWNvUCxRQUFkLENBQXVCOUYsYUFBdkIsR0FBdUMsSUFBSTdGLEdBQUd1MEIsT0FBSCxDQUFXMG5DLGFBQWYsQ0FBNkI7QUFDbEVsMUQsc0JBQVksV0FEc0Q7QUFFbEVtMUQsNEJBQWtCbDhELEdBQUc4aUMsVUFBSCxDQUFjcTVCLFlBRmtDO0FBR2xFdG1DLGtCQUFRbHZCLDZCQUgwRDtBQUlsRTY2Qyx5QkFBZTtBQUptRCxTQUE3QixDQUF2QztBQU1BamxELHNCQUFjb0gsR0FBZCxDQUFrQnE0RCxVQUFsQixDQUE2QnovRCxjQUFjb1AsUUFBZCxDQUF1QjlGLGFBQXBEO0FBQ0Q7QUFDRixLQWgzQnVDO0FBaTNCeEMyeUMsY0FBVSxrQkFBVW4yQyxHQUFWLEVBQWU7QUFDckIsYUFBT2lpQyxhQUFhamlDLEdBQWIsS0FBcUIsRUFBNUI7QUFDSCxLQW4zQnVDO0FBbzNCeEN3MkMsZ0JBQVksb0JBQVV4MkMsR0FBVixFQUFlb04sS0FBZixFQUFzQjtBQUNoQzYwQixtQkFBYWppQyxHQUFiLElBQW9Cb04sS0FBcEIsQ0FEZ0MsQ0FDTDtBQUM1QjtBQXQzQnVDLEdBQXpCLENBQWpCO0FBeTNCRCxDQS8zQkEsRUErM0JDN1MsTUEvM0JELEVBKzNCUyxLQUFLcU0sR0EvM0JkLENBQUQ7O0FBaTRCTyxJQUFJMUssUUFBUSxLQUFLMEssR0FBTCxDQUFTeUssSUFBVCxDQUFjblYsS0FBMUIsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzE1QlA7QUFDQSxLQUFLMEssR0FBTCxHQUFXLEtBQUtBLEdBQUwsSUFBWSxFQUF2QjtBQUNBLEtBQUtBLEdBQUwsQ0FBU3lLLElBQVQsR0FBZ0IsS0FBS3pLLEdBQUwsQ0FBU3lLLElBQVQsSUFBaUIsRUFBakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUl6SyxNQUFNLEtBQUtBLEdBQWY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUl1ckIsZ0JBQWdCLEVBQXBCOztBQUVBLElBQUksT0FBTzd1QixPQUFQLEtBQW1CLFdBQXZCLEVBQW9DO0FBQ2xDLFFBQUlBLFFBQVE4dUIsSUFBUixLQUFpQixJQUFyQixFQUEyQjtBQUN6QkQsd0JBQWdCaEgsdUZBQWhCO0FBQ0QsS0FGRCxNQUVPLElBQUk3bkIsUUFBUTh1QixJQUFSLEtBQWlCLElBQXJCLEVBQTJCO0FBQ2hDRCx3QkFBZ0I5Ryx3RkFBaEI7QUFDRCxLQUZNLE1BRUE7QUFDTDtBQUNBOEcsd0JBQWdCaEgsdUZBQWhCO0FBQ0Q7QUFDRjs7QUFFQSxXQUFVaHRCLENBQVYsRUFBYXlJLEdBQWIsRUFBa0I7QUFDZjs7QUFFQTs7Ozs7OztBQU1BQSxRQUFJeUssSUFBSixDQUFTNnZDLGFBQVQsR0FBeUIsVUFBVTU5QyxPQUFWLEVBQW1COztBQUV4QztBQUNBLGFBQUtoQyxHQUFMLEdBQVcsSUFBWDtBQUNBO0FBQ0EsYUFBSytDLGlCQUFMLEdBQXlCLEVBQXpCO0FBQ0EsYUFBS3cxQyxrQkFBTCxHQUEwQixFQUExQjs7QUFFQSxZQUFJdi9DLE9BQU8sSUFBWDtBQUFBLFlBQ0l5L0QsWUFBWSxLQURoQjtBQUFBLFlBRUl0NEQsT0FGSjtBQUFBLFlBR0lKLE9BSEo7QUFBQSxZQUlJVyxJQUpKO0FBQUEsWUFLSTh4QixXQUxKO0FBQUEsWUFNSXhxQixXQUFXLEVBTmY7QUFBQSxZQU9JMHdELGVBQWUsRUFQbkI7QUFBQSxZQVFJQyxvQkFSSjtBQUFBLFlBU0lDLFNBVEo7QUFBQSxZQVVJQyxPQVZKO0FBQUEsWUFXSTEyRCx1QkFYSjtBQUFBLFlBWUlTLDBCQVpKO0FBQUEsWUFhSWsyRCx3QkFiSjtBQUFBLFlBY0lDLDJCQWRKO0FBQUEsWUFlSS8xRCw2QkFmSjtBQUFBLFlBZ0JJZzJELGVBaEJKO0FBQUEsWUFpQklDLFFBakJKO0FBQUEsWUFrQklDLFdBbEJKO0FBQUEsWUFtQklDLGFBbkJKO0FBQUEsWUFvQklDLGtCQUFrQixJQXBCdEI7O0FBc0JBO0FBQ0FwM0Qsa0JBQVVuRixFQUFFSCxNQUFGLENBQVM7QUFDZmk3QixpQkFBSyxFQURVO0FBRWYwaEMsd0JBQVksS0FGRztBQUdmM3pELG1CQUFPLENBSFE7QUFJZjR6RCxvQkFBUSxTQUpPO0FBS2Z6M0Qsb0JBQVEsRUFMTztBQU1mMDNELHlCQUFhLFlBTkU7QUFPZmg2RCx5QkFBYSxFQVBFO0FBUWZvYSxvQkFBUSxFQVJPO0FBU2Y2L0MsMEJBQWMsRUFUQztBQVVmdDNCLHNCQUFVLEVBVks7QUFXZnpNLHFCQUFTLEVBWE07QUFZZnR1Qix1QkFBVyxFQVpJO0FBYWZ1dkMsMkJBQWUsRUFiQTtBQWNmSSwrQkFBbUIsRUFkSjtBQWVmOTFDLHVCQUFXO0FBZkksU0FBVCxFQWdCUGdCLE9BaEJPLENBQVY7QUFpQkEsWUFBSUEsUUFBUXUzRCxXQUFSLEtBQXdCLFdBQTVCLEVBQXlDO0FBQ3JDdjNELHNCQUFVbkYsRUFBRUgsTUFBRixDQUFTO0FBQ2YrOEQseUJBQVM7QUFETSxhQUFULEVBRVB6M0QsT0FGTyxDQUFWO0FBR0g7O0FBRUQ7QUFDQUEsZ0JBQVFILE1BQVIsR0FBaUJoRixFQUFFSCxNQUFGLENBQVM7QUFDdEI0VCxpQkFBSyxLQURpQjtBQUV0QkQsaUJBQUssSUFGaUI7QUFHdEIvTSxzQkFBVSxDQUhZO0FBSXRCM0Isa0JBQU07QUFKZ0IsU0FBVCxFQUtkSyxRQUFRSCxNQUxNLENBQWpCO0FBTUE7QUFDQUcsZ0JBQVF6QyxXQUFSLEdBQXNCMUMsRUFBRUgsTUFBRixDQUFTO0FBQzNCb0gsb0JBQVEsSUFEbUI7QUFFM0JzdkIsdUJBQVcsS0FGZ0I7QUFHM0JHLHlCQUFhO0FBSGMsU0FBVCxFQUluQnZ4QixRQUFRekMsV0FKVyxDQUF0QjtBQUtBO0FBQ0F5QyxnQkFBUWhCLFNBQVIsR0FBb0JuRSxFQUFFSCxNQUFGLENBQVM7QUFDekJvSCxvQkFBUSxLQURpQjtBQUV6QjQxRCxpQkFBSztBQUZvQixTQUFULEVBR2pCMTNELFFBQVFoQixTQUhTLENBQXBCO0FBSUE7QUFDQWdCLGdCQUFReTJELFNBQVIsR0FBb0I1N0QsRUFBRUgsTUFBRixDQUFTO0FBQ3pCb0gsb0JBQVEsS0FEaUI7QUFFekI2MUQsMkJBQWU7QUFGVSxTQUFULEVBR2pCMzNELFFBQVF5MkQsU0FIUyxDQUFwQjtBQUlBLGFBQUtwL0QsSUFBTCxHQUFZMkksT0FBWjtBQUNBLFlBQUlBLFFBQVFxM0QsVUFBWixFQUF3QjtBQUNwQnIzRCxvQkFBUXMzRCxNQUFSLElBQWtCLE1BQU10M0QsUUFBUTBELEtBQWhDO0FBQ0g7QUFDRDtBQUNBO0FBQ0E7QUFDQSxZQUFJTyxPQUFPMnpELFFBQVAsSUFBbUJDLFFBQVFDLFFBQS9CLEVBQXlDO0FBQ3JDQSx1QkFBV0QsUUFBUUMsUUFBbkI7QUFDSDtBQUNELGFBQUtuaEUsS0FBTCxHQUFhLElBQUkyNEQsaUVBQUosQ0FBYSxFQUFDMTRELGVBQWUsSUFBaEIsRUFBYixDQUFiOztBQUVBO0FBQ0EsWUFBSW9KLFFBQVF5MkQsU0FBUixDQUFrQjMwRCxNQUF0QixFQUE4QjtBQUMxQjIwRCx3QkFBWTc5RCw4REFBS0EsQ0FBQ3k2RCxXQUFOLENBQWtCcnpELFFBQVF5MkQsU0FBUixDQUFrQmtCLGFBQXBDLENBQVo7O0FBRUEsZ0JBQUlsQixTQUFKLEVBQWU7QUFDWEEsNEJBQVlBLFVBQVVoaEQsS0FBVixDQUFnQixHQUFoQixDQUFaO0FBQ0Esd0JBQVFnaEQsVUFBVS85RCxNQUFsQjtBQUNBLHlCQUFLLENBQUw7QUFDSSs5RCxrQ0FBVSxDQUFWLElBQWVua0QsV0FBV21rRCxVQUFVLENBQVYsQ0FBWCxDQUFmO0FBQ0F6MkQsZ0NBQVFILE1BQVIsQ0FBZXdPLEdBQWYsR0FBcUIsQ0FBQ3dzQyxNQUFNNGIsVUFBVSxDQUFWLENBQU4sQ0FBRCxHQUF1QkEsVUFBVSxDQUFWLENBQXZCLEdBQXNDejJELFFBQVFILE1BQVIsQ0FBZXdPLEdBQTFFO0FBQ0Fvb0Qsa0NBQVUsQ0FBVixJQUFlbmtELFdBQVdta0QsVUFBVSxDQUFWLENBQVgsQ0FBZjtBQUNBejJELGdDQUFRSCxNQUFSLENBQWV5TyxHQUFmLEdBQXFCLENBQUN1c0MsTUFBTTRiLFVBQVUsQ0FBVixDQUFOLENBQUQsR0FBdUJBLFVBQVUsQ0FBVixDQUF2QixHQUFzQ3oyRCxRQUFRSCxNQUFSLENBQWV5TyxHQUExRTtBQUNBbW9ELGtDQUFVLENBQVYsSUFBZWwrRCxTQUFTaytELFVBQVUsQ0FBVixDQUFULEVBQXVCLEVBQXZCLENBQWY7QUFDQXoyRCxnQ0FBUUgsTUFBUixDQUFlRixJQUFmLEdBQXNCLENBQUNrN0MsTUFBTTRiLFVBQVUsQ0FBVixDQUFOLENBQUQsR0FBdUJBLFVBQVUsQ0FBVixDQUF2QixHQUFzQ3oyRCxRQUFRSCxNQUFSLENBQWVGLElBQTNFO0FBQ0E4MkQsa0NBQVUsQ0FBVixJQUFlbmtELFdBQVdta0QsVUFBVSxDQUFWLENBQVgsQ0FBZjtBQUNBejJELGdDQUFRSCxNQUFSLENBQWV5QixRQUFmLEdBQTBCLENBQUN1NUMsTUFBTTRiLFVBQVUsQ0FBVixDQUFOLENBQUQsR0FBdUJBLFVBQVUsQ0FBVixDQUF2QixHQUFzQ3oyRCxRQUFRSCxNQUFSLENBQWV5QixRQUEvRTtBQUNBbTFELGtDQUFVLENBQVYsSUFBZWwrRCxTQUFTaytELFVBQVUsQ0FBVixDQUFULEVBQXVCLEVBQXZCLENBQWY7QUFDQXoyRCxnQ0FBUXhJLFNBQVIsR0FBb0IsQ0FBQ3FqRCxNQUFNNGIsVUFBVSxDQUFWLENBQU4sQ0FBRCxHQUF1QkEsVUFBVSxDQUFWLENBQXZCLEdBQXNDejJELFFBQVF4SSxTQUFsRTtBQUNBd0ksZ0NBQVFoRCxNQUFSLEdBQWlCeTVELFVBQVUsQ0FBVixFQUFhaGhELEtBQWIsQ0FBbUIsR0FBbkIsQ0FBakI7QUFDQTtBQUNBelYsZ0NBQVFoRCxNQUFSLEdBQWlCcEUsOERBQUtBLENBQUMrNkQsV0FBTixDQUFrQjN6RCxRQUFRaEQsTUFBMUIsQ0FBakI7QUFDQTtBQUNKLHlCQUFLLENBQUw7QUFDSTtBQUNBeTVELGtDQUFVLENBQVYsSUFBZWwrRCxTQUFTaytELFVBQVUsQ0FBVixDQUFULEVBQXVCLEVBQXZCLENBQWY7QUFDQXoyRCxnQ0FBUXhJLFNBQVIsR0FBb0IsQ0FBQ3FqRCxNQUFNNGIsVUFBVSxDQUFWLENBQU4sQ0FBRCxHQUF1QkEsVUFBVSxDQUFWLENBQXZCLEdBQXNDejJELFFBQVF4SSxTQUFsRTtBQUNBd0ksZ0NBQVFoRCxNQUFSLEdBQWlCeTVELFVBQVUsQ0FBVixFQUFhaGhELEtBQWIsQ0FBbUIsR0FBbkIsQ0FBakI7QUFDQTtBQUNBelYsZ0NBQVFoRCxNQUFSLEdBQWlCcEUsOERBQUtBLENBQUMrNkQsV0FBTixDQUFrQjN6RCxRQUFRaEQsTUFBMUIsQ0FBakI7QUFDQTtBQUNKLHlCQUFLLENBQUw7QUFDSTtBQUNBZ0QsZ0NBQVFoRCxNQUFSLEdBQWlCeTVELFVBQVUsQ0FBVixFQUFhaGhELEtBQWIsQ0FBbUIsR0FBbkIsQ0FBakI7QUFDQTtBQUNBelYsZ0NBQVFoRCxNQUFSLEdBQWlCcEUsOERBQUtBLENBQUMrNkQsV0FBTixDQUFrQjN6RCxRQUFRaEQsTUFBMUIsQ0FBakI7QUFDQTtBQUNKO0FBQ0k7QUFDQXk1RCxvQ0FBWSxLQUFaO0FBaENKO0FBa0NBLG9CQUFJejJELFFBQVFoRCxNQUFSLENBQWV0RSxNQUFmLEdBQXdCLENBQTVCLEVBQStCO0FBQzNCc0gsNEJBQVFoRCxNQUFSLEdBQWlCLEtBQWpCO0FBQ0F5NUQsZ0NBQVksS0FBWjtBQUNIO0FBQ0osYUF4Q0QsTUF3Q087QUFDSDtBQUNBQSw0QkFBWSxLQUFaO0FBQ0g7QUFDSjs7QUFFRCxZQUFJejJELFFBQVE3QixPQUFSLElBQW1CNkIsUUFBUTdCLE9BQVIsR0FBa0IsQ0FBekMsRUFBNEM7QUFDeENBLHNCQUFVNkIsUUFBUTdCLE9BQWxCO0FBQ0gsU0FGRCxNQUVPO0FBQ0hBLHNCQUFVLENBQVY7QUFDSDs7QUFFRCxZQUFJNkIsUUFBUWpDLE9BQVIsSUFBbUJpQyxRQUFRakMsT0FBUixHQUFrQixDQUF6QyxFQUE0QztBQUN4Q0Esc0JBQVVpQyxRQUFRakMsT0FBbEI7QUFDSCxTQUZELE1BRU87QUFDSEEsc0JBQVUsRUFBVjtBQUNIOztBQUVELFlBQUlpQyxRQUFRcXlDLE9BQVosRUFBcUI7QUFDakIsZ0JBQUt6NUMsOERBQUtBLENBQUNpNkMsUUFBTixDQUFlLEtBQWYsQ0FBRCxJQUE0Qmo2Qyw4REFBS0EsQ0FBQ2k2QyxRQUFOLENBQWUsS0FBZixDQUFoQyxFQUF3RDtBQUNwRDd5Qyx3QkFBUUgsTUFBUixDQUFld08sR0FBZixHQUFxQnpWLDhEQUFLQSxDQUFDaTZDLFFBQU4sQ0FBZSxLQUFmLENBQXJCO0FBQ0E3eUMsd0JBQVFILE1BQVIsQ0FBZXlPLEdBQWYsR0FBcUIxViw4REFBS0EsQ0FBQ2k2QyxRQUFOLENBQWUsS0FBZixDQUFyQjtBQUNIOztBQUVELGdCQUFJajZDLDhEQUFLQSxDQUFDaTZDLFFBQU4sQ0FBZSxNQUFmLENBQUosRUFBNEI7QUFDeEI3eUMsd0JBQVFILE1BQVIsQ0FBZUYsSUFBZixHQUFzQi9HLDhEQUFLQSxDQUFDaTZDLFFBQU4sQ0FBZSxNQUFmLENBQXRCO0FBQ0g7QUFDSjs7QUFFRG4wQyxlQUFPLElBQUlyRSxHQUFHOEcsSUFBUCxDQUFZO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQXRCLG9CQUFReEYsR0FBRzZRLElBQUgsQ0FBUXFELFNBQVIsQ0FBa0IsQ0FBQytELFdBQVd0UyxRQUFRSCxNQUFSLENBQWV3TyxHQUExQixDQUFELEVBQWlDaUUsV0FBV3RTLFFBQVFILE1BQVIsQ0FBZXlPLEdBQTFCLENBQWpDLENBQWxCLEVBQW9GLFdBQXBGLEVBQWlHLFdBQWpHLENBTE87QUFNZjNPLGtCQUFNcEgsU0FBU3lILFFBQVFILE1BQVIsQ0FBZUYsSUFBeEIsRUFBOEIsRUFBOUIsQ0FOUztBQU9meEIscUJBQVM1RixTQUFTNEYsT0FBVCxFQUFrQixFQUFsQixDQVBNO0FBUWZKLHFCQUFTeEYsU0FBU3dGLE9BQVQsRUFBa0IsRUFBbEIsQ0FSTTtBQVNmdUQsc0JBQVVnUixXQUFXdFMsUUFBUUgsTUFBUixDQUFleUIsUUFBMUI7QUFUSyxTQUFaLENBQVA7O0FBWUE7QUFDQSxZQUFJdEIsUUFBUXl3QixXQUFSLElBQXVCLENBQUNnbUMsU0FBNUIsRUFBd0M7QUFDcENqbUMsMEJBQWMsSUFBSW4yQixHQUFHcTJCLFdBQVAsQ0FBbUI7QUFDN0I7QUFDQUMsMEJBQVUsSUFGbUI7QUFHN0J2dkIsNEJBQVkxQyxLQUFLMkMsYUFBTDtBQUhpQixhQUFuQixDQUFkO0FBS0FtdkIsd0JBQVlsZixFQUFaLENBQWUsUUFBZixFQUF5QixVQUFVc2YsR0FBVixFQUFlO0FBQ3RDLG9CQUFJSixXQUFKLEVBQWlCO0FBQ2Y5eEIseUJBQUt1VSxTQUFMLENBQWV1ZCxZQUFZSyxXQUFaLEVBQWY7QUFDQSx3QkFBSTd3QixRQUFROHdCLGdCQUFaLEVBQThCO0FBQzVCcHlCLDZCQUFLcUIsT0FBTCxDQUFheEgsU0FBU3lILFFBQVE4d0IsZ0JBQWpCLEVBQW1DLEVBQW5DLENBQWI7QUFDRDtBQUNETixnQ0FBWU8sV0FBWixDQUF3QixLQUF4QjtBQUNBLHdCQUFJLzVCLEtBQUtnSCxHQUFULEVBQWM7QUFDWmhILDZCQUFLZ0gsR0FBTCxDQUFTMEQsT0FBVCxDQUFpQmhELElBQWpCO0FBQ0EsNEJBQUkxSCxLQUFLMEosMkJBQVQsRUFBc0M7QUFDcEM5SCwwRkFBS0EsQ0FBQytJLGFBQU4sQ0FBb0IzSyxJQUFwQjtBQUNEO0FBQ0Y7QUFDRjtBQUNGLGFBZEQ7QUFlSDs7QUFFRDtBQUNBO0FBQ0EsWUFBSSxDQUFDZ0osUUFBUTQxQixPQUFiLEVBQXNCO0FBQ2xCNXZCLHVCQUFXM0wsR0FBR3UwQixPQUFILENBQVdtcEMsUUFBWCxFQUFYO0FBQ0FyQiwyQkFBZXI4RCxHQUFHaTZCLFdBQUgsQ0FBZXlqQyxRQUFmLEVBQWY7QUFDSDs7QUFFRDtBQUNBLFlBQUkvM0QsUUFBUXE4QyxTQUFSLElBQXFCcjhDLFFBQVFxOEMsU0FBUixDQUFrQjUxQyxJQUFsQixLQUEyQixTQUFwRCxFQUErRDtBQUMzRCxnQkFBSXpHLFFBQVE2MkMsaUJBQVosRUFBK0I7QUFDM0IscUJBQUtsZ0QsS0FBTCxDQUFXa0QscUJBQVgsQ0FBaUNmLElBQWpDLENBQXNDLFVBQVUvQixZQUFWLEVBQXdCO0FBQzFEQyx5QkFBS0wsS0FBTCxDQUFXKytDLG1CQUFYLENBQStCMThDLGFBQS9CLENBQTZDZ0gsUUFBUTYyQyxpQkFBckQ7QUFDSCxpQkFGRDtBQUdILGFBTDBELENBS3pEO0FBQ0YsaUJBQUs3NEMsR0FBTCxHQUFXLElBQUkzRCxHQUFHMjlELEdBQVAsQ0FBVztBQUNsQmh5RCwwQkFBVUEsUUFEUTtBQUVsQjB3RCw4QkFBY0EsWUFGSTtBQUdsQjE1RCx3QkFBUSxDQUNKLElBQUkzQyxHQUFHZixLQUFILENBQVNnRixLQUFiLENBQW1CO0FBQ2Z3eEIsMkJBQU8sV0FEUTtBQUVmOXlCLDRCQUFRLEVBRk87QUFHZmk3RCw4QkFBVTtBQUhLLGlCQUFuQixDQURJLENBSFU7QUFVbEJDLHlDQUF5QixJQVZQO0FBV2xCaG9DLHdCQUFRbHdCLFFBQVFzM0QsTUFYRTtBQVlsQjU0RCxzQkFBTUE7QUFaWSxhQUFYLENBQVg7QUFjSCxTQXBCRCxNQW9CTztBQUNIO0FBQ0E7O0FBRUEsZ0JBQUlzQixRQUFRNjJDLGlCQUFaLEVBQStCO0FBQzNCLHFCQUFLbGdELEtBQUwsQ0FBV2tELHFCQUFYLENBQWlDZixJQUFqQyxDQUFzQyxVQUFVL0IsWUFBVixFQUF3QjtBQUMxRCx3QkFBSWlKLFFBQVF4SSxTQUFSLElBQXFCVCxhQUFhNkYsT0FBYixDQUFxQm9ELFFBQVF4SSxTQUFSLENBQWtCa1QsUUFBbEIsRUFBckIsSUFBcUQsQ0FBQyxDQUEvRSxFQUFrRjtBQUM5RTFLLGdDQUFRNjJDLGlCQUFSLEdBQTRCNzJDLFFBQVF4SSxTQUFwQztBQUNIOztBQUVELHdCQUFJd0ksUUFBUXF5QyxPQUFaLEVBQXFCO0FBQ2pCLDRCQUFJejVDLDhEQUFLQSxDQUFDaTZDLFFBQU4sQ0FBZSxXQUFmLENBQUosRUFBaUM7QUFDN0I3eUMsb0NBQVE2MkMsaUJBQVIsR0FBNEJqK0MsOERBQUtBLENBQUNpNkMsUUFBTixDQUFlLFdBQWYsQ0FBNUI7QUFDSDtBQUNKOztBQUVENzdDLHlCQUFLTCxLQUFMLENBQVcrK0MsbUJBQVgsQ0FBK0IxOEMsYUFBL0IsQ0FBNkNnSCxRQUFRNjJDLGlCQUFyRDtBQUNILGlCQVpEO0FBYUg7QUFDRCxpQkFBSzc0QyxHQUFMLEdBQVcsSUFBSTNELEdBQUcyOUQsR0FBUCxDQUFXO0FBQ2xCaHlELDBCQUFVQSxRQURRO0FBRWxCMHdELDhCQUFjQSxZQUZJO0FBR2xCMTVELHdCQUFRLENBQ0osSUFBSTNDLEdBQUdmLEtBQUgsQ0FBU2dGLEtBQWIsQ0FBbUI7QUFDZnd4QiwyQkFBTyxXQURRO0FBRWY5eUIsNEJBQVEsRUFGTztBQUdmaTdELDhCQUFVO0FBSEssaUJBQW5CLENBREksQ0FIVTtBQVVsQkMseUNBQXlCLElBVlA7QUFXbEJob0Msd0JBQVFsd0IsUUFBUXMzRCxNQVhFO0FBWWxCNTRELHNCQUFNQTtBQVpZLGFBQVgsQ0FBWDtBQWNIOztBQUVEc0IsZ0JBQVFoQyxHQUFSLEdBQWMsS0FBS0EsR0FBbkI7O0FBRUY7QUFDRSxZQUFJZ0MsUUFBUXUzRCxXQUFSLEtBQXdCLFdBQTVCLEVBQXlDO0FBQ3JDWixtQ0FBc0IsNkJBQVUzeUQsUUFBVixFQUFvQjtBQUN0QyxvQkFBSWhILFNBQVNoRyxLQUFLTCxLQUFMLENBQVc2OUMsZUFBWCxDQUEyQmh4QyxTQUF4QztBQUFBLG9CQUNJbEssS0FESjtBQUFBLG9CQUVJbVYsUUFGSjtBQUFBLG9CQUdJMHJDLE1BSEo7QUFBQSxvQkFJSTdOLE9BSko7QUFBQSxvQkFLSWdPLFdBTEo7QUFBQSxvQkFNSTcvQyxNQU5KO0FBQUEsb0JBT0kyL0MsV0FQSjtBQUFBLG9CQVFJQyxZQVJKO0FBQUEsb0JBU0kzOUMsR0FUSjtBQUFBLG9CQVVJdzlDLFdBVko7QUFBQSxvQkFXSTkyQyxVQVhKO0FBQUEsb0JBWUl2RCxNQVpKO0FBYUE7QUFDQSx1QkFBTyxLQUFLLEtBQUtqRCxPQUFMLENBQWErNUQsb0JBQWIsQ0FBTCxDQUFQO0FBQ0FyYyw4QkFBYyxFQUFkO0FBQ0E7QUFDQSxxQkFBSzU5QyxHQUFMLElBQVlNLE1BQVosRUFBb0I7QUFDaEIsd0JBQUlBLE9BQU9ZLGNBQVAsQ0FBc0JsQixHQUF0QixDQUFKLEVBQWdDO0FBQzVCcEQsZ0NBQVEwRCxPQUFPTixHQUFQLENBQVI7QUFDQSw0QkFBR3BELE1BQU1tTixJQUFOLElBQWMsVUFBakIsRUFBNEI7QUFDeEI7QUFDSDtBQUNEeXpDLHNDQUFjNWdELE1BQU1nTixPQUFwQjtBQUNBLDRCQUFJNHpDLGdCQUFnQjN3QyxTQUFwQixFQUErQjtBQUMzQjtBQUNBO0FBQ0g7QUFDRCw0QkFBSSxRQUFPMndDLFdBQVAseUNBQU9BLFdBQVAsT0FBdUIsUUFBM0IsRUFBcUM7QUFDakNBLDBDQUFjdGhELDhEQUFLQSxDQUFDMk4sYUFBTixDQUFvQjJ6QyxXQUFwQixDQUFkO0FBQ0g7QUFDRDkyQyxxQ0FBYTlKLE1BQU1zTyxXQUFuQjtBQUNBLDRCQUFJc3lDLGVBQWVBLFlBQVkxNkMsT0FBM0IsSUFBc0MsT0FBTzA2QyxZQUFZMTZDLE9BQW5CLEtBQStCLFVBQXpFLEVBQXFGO0FBQ2pGMDZDLHdDQUFZMTZDLE9BQVosQ0FBb0IsVUFBVW9JLFdBQVYsRUFBdUI7QUFDdkMsb0NBQUlBLGVBQ0lBLFlBQVl2USxJQURoQixJQUVJdVEsWUFBWXZRLElBQVosQ0FBaUJvWCxRQUZyQixJQUdJN0csWUFBWXZRLElBQVosQ0FBaUJvWCxRQUFqQixDQUEwQjZyQyxXQUhsQyxFQUcrQztBQUMzQyx3Q0FBSTF5QyxZQUFZdlEsSUFBWixDQUFpQm9YLFFBQWpCLENBQTBCaEksSUFBMUIsS0FBbUMsT0FBdkMsRUFBZ0Q7QUFDNUMwekMsaURBQVM5L0MsR0FBRzZRLElBQUgsQ0FBUXFELFNBQVIsQ0FBa0IsQ0FBQytELFdBQVcxSyxZQUFZdlEsSUFBWixDQUFpQm9YLFFBQWpCLENBQTBCNnJDLFdBQTFCLENBQXNDLENBQXRDLENBQVgsQ0FBRCxFQUN2QmhvQyxXQUFXMUssWUFBWXZRLElBQVosQ0FBaUJvWCxRQUFqQixDQUEwQjZyQyxXQUExQixDQUFzQyxDQUF0QyxDQUFYLENBRHVCLENBQWxCLEVBQ2tELFdBRGxELEVBQytELFdBRC9ELENBQVQ7QUFFQSw0Q0FBR0gsT0FBTyxDQUFQLEtBQVcsVUFBWCxJQUF1QkEsT0FBTyxDQUFQLEtBQVcsV0FBckMsRUFBaUQ7QUFDN0M7QUFDSDtBQUNEMXJDLG1EQUFXLElBQUlwVSxHQUFHcVQsSUFBSCxDQUFRQyxLQUFaLENBQWtCd3NDLE1BQWxCLENBQVg7QUFDQUcsb0RBQVl4aEQsSUFBWixDQUFpQjJWLFNBQVNqQixjQUFULEVBQWpCO0FBQ0g7QUFDSjtBQUNKLDZCQWZEO0FBZ0JIO0FBQ0QsNEJBQUlwSyxVQUFKLEVBQWdCO0FBQ2Q7QUFDRWczQywwQ0FBY2gzQyxXQUFXL0QsU0FBWCxFQUFkO0FBQ0FnN0MsMkNBQWVELFlBQVlobkMsUUFBWixFQUFmO0FBQ0FpbkMseUNBQWE3NkMsT0FBYixDQUFxQixVQUFVbUosT0FBVixFQUFtQjtBQUNwQyxvQ0FBSXJQLE1BQU1tTixJQUFOLEtBQWUsS0FBbkIsRUFBMEI7QUFDdEIsd0NBQUlsTSxTQUFTb08sUUFBUTJILFNBQVIsRUFBYjtBQUNJO0FBQ0ovViwyQ0FBTytPLFNBQVAsR0FBbUI5SixPQUFuQixDQUEyQixVQUFVMjlCLFVBQVYsRUFBc0I7QUFDN0NtZCxvREFBWXhoRCxJQUFaLENBQWlCcWtDLFVBQWpCO0FBQ0gscUNBRkQ7QUFHSCxpQ0FORCxNQU1PO0FBQ0htZCxnREFBWXhoRCxJQUFaLENBQWlCdUIsR0FBR0ksTUFBSCxDQUFVOC9DLFdBQVYsQ0FBc0I1eEMsUUFBUTJILFNBQVIsR0FBb0JoSCxTQUFwQixFQUF0QixDQUFqQjtBQUNBZ3hDLGdEQUFZeGhELElBQVosQ0FBaUJ1QixHQUFHSSxNQUFILENBQVUrL0MsVUFBVixDQUFxQjd4QyxRQUFRMkgsU0FBUixHQUFvQmhILFNBQXBCLEVBQXJCLENBQWpCO0FBQ0FneEMsZ0RBQVl4aEQsSUFBWixDQUFpQnVCLEdBQUdJLE1BQUgsQ0FBVWdnRCxjQUFWLENBQXlCOXhDLFFBQVEySCxTQUFSLEdBQW9CaEgsU0FBcEIsRUFBekIsQ0FBakI7QUFDQWd4QyxnREFBWXhoRCxJQUFaLENBQWlCdUIsR0FBR0ksTUFBSCxDQUFVaWdELGFBQVYsQ0FBd0IveEMsUUFBUTJILFNBQVIsR0FBb0JoSCxTQUFwQixFQUF4QixDQUFqQjtBQUNIO0FBQ0osNkJBYkQ7QUFjSDtBQUNKO0FBQ0o7QUFDRDdPLHlCQUFTSixHQUFHSSxNQUFILENBQVVrZ0QsY0FBVixDQUF5QkwsV0FBekIsQ0FBVDtBQUNBLG9CQUFHNy9DLE9BQU8sQ0FBUCxLQUFXLFVBQVgsSUFBdUJBLE9BQU8sQ0FBUCxLQUFXLFdBQXJDLEVBQWlEO0FBQzdDO0FBQ0g7QUFDRDtBQUNBNnhDLDBCQUFVLENBQUN0c0MsUUFBUXkzRCxPQUFULEVBQWtCejNELFFBQVF5M0QsT0FBMUIsRUFBbUN6M0QsUUFBUXkzRCxPQUEzQyxFQUFvRHozRCxRQUFReTNELE9BQTVELENBQVY7QUFDQXpnRSxxQkFBS2dILEdBQUwsQ0FBU0MsT0FBVCxHQUFtQm11QyxHQUFuQixDQUF1QjN4QyxNQUF2QixFQUErQnpELEtBQUtnSCxHQUFMLENBQVNxdUMsT0FBVCxFQUEvQixFQUFtRCxFQUFDQyxTQUFTQSxPQUFWLEVBQW5EO0FBQ0F6c0MseUJBQVM3SSxLQUFLZ0gsR0FBTCxDQUFTQyxPQUFULEdBQW1CNkIsU0FBbkIsRUFBVDtBQUNBLG9CQUFJKzZDLE1BQU1oN0MsT0FBTyxDQUFQLENBQU4sQ0FBSixFQUFzQjtBQUNsQjdJLHlCQUFLZ0gsR0FBTCxDQUFTQyxPQUFULEdBQW1CZ1YsU0FBbkIsQ0FBNkIsQ0FBQyxFQUFELEVBQUssRUFBTCxDQUE3QjtBQUNBamMseUJBQUtnSCxHQUFMLENBQVNDLE9BQVQsR0FBbUI4QixPQUFuQixDQUEyQkMsUUFBUTdCLE9BQVIsSUFBbUIsRUFBOUM7QUFDSDtBQUNKLGFBcEZEO0FBcUZBLGlCQUFLeEgsS0FBTCxDQUFXb2MscUJBQVgsQ0FBaUNqYSxJQUFqQyxDQUFzQzY5RCxvQkFBdEM7QUFDSDs7QUFFRDtBQUNBQyxvQkFBWXgyRCxTQUFTbWxDLGNBQVQsQ0FBd0J2bEMsUUFBUXMzRCxNQUFoQyxDQUFaOztBQUVBLFlBQUlWLGFBQWFBLFVBQVVsOUQsS0FBM0IsRUFBa0M7QUFDOUIsZ0JBQUlzRyxRQUFRMFksS0FBWixFQUFtQjtBQUNmaytDLDBCQUFVbDlELEtBQVYsQ0FBZ0JnZixLQUFoQixHQUF3QjFZLFFBQVEwWSxLQUFoQztBQUNIO0FBQ0QsZ0JBQUkxWSxRQUFRbWEsTUFBWixFQUFvQjtBQUNoQnk4QywwQkFBVWw5RCxLQUFWLENBQWdCeWdCLE1BQWhCLEdBQXlCbmEsUUFBUW1hLE1BQWpDO0FBQ0g7QUFDRCxnQkFBSW5hLFFBQVFpOEIsTUFBWixFQUFvQjtBQUNoQjI2QiwwQkFBVWw5RCxLQUFWLENBQWdCdWlDLE1BQWhCLEdBQXlCajhCLFFBQVFpOEIsTUFBakM7QUFDSDtBQUNKLFNBVkQsTUFVTztBQUNIdGtDLG9CQUFRQyxJQUFSLENBQWEsMENBQWI7QUFDQTtBQUNIOztBQUVELGFBQUtvRyxHQUFMLENBQVNtNkQsVUFBVDtBQUNBLGFBQUt4aEUsS0FBTCxDQUFXeWhFLFVBQVg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFLMTNELDJCQUFMLEdBQW1DN0YsRUFBRSxNQUFNbUYsUUFBUXMzRCxNQUFkLEdBQXVCLElBQXZCLEdBQThCLzJELHdFQUFZQSxDQUFDeXRCLHNCQUE3QyxDQUFuQztBQUNBO0FBQ0EsYUFBS24yQixPQUFMLEdBQWUsSUFBSSs2Qyx1RUFBSixDQUFZLEVBQUN0eUMsV0FBV0Msd0VBQVlBLENBQUNrb0IsS0FBekIsRUFBWixDQUFmO0FBQ0E7QUFDQSxhQUFLb1MsUUFBTCxHQUFnQixJQUFJaWpCLHlFQUFKLENBQWEsRUFBQ2xuRCxlQUFlLElBQWhCLEVBQWIsQ0FBaEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFlBQUlvSixRQUFRcTRELFNBQVosRUFBdUI7QUFDbkI7QUFDQSxnQkFBSXI0RCxRQUFRcTRELFNBQVIsQ0FBa0JDLFFBQXRCLEVBQWdDO0FBQzVCekIsMEJBQVU3MkQsUUFBUXE0RCxTQUFSLENBQWtCeEIsT0FBbEIsR0FBNEIsSUFBSXg4RCxHQUFHaytELE9BQVAsQ0FBZSxDQUFDLEtBQWhCLEVBQXVCLElBQXZCLEVBQTZCLEdBQTdCLENBQTVCLEdBQWdFLElBQTFFO0FBQ0EscUJBQUt2NkQsR0FBTCxDQUFTNjdCLGNBQVQsQ0FBd0IsSUFBSXgvQixHQUFHaTZCLFdBQUgsQ0FBZWtrQyxPQUFuQixDQUEyQixFQUFDM0IsU0FBU0EsT0FBVixFQUEzQixDQUF4QjtBQUNIO0FBQ0Q7QUFDQSxnQkFBSTcyRCxRQUFRcTRELFNBQVIsQ0FBa0JJLFVBQXRCLEVBQWtDO0FBQzlCLHFCQUFLejZELEdBQUwsQ0FBUzY3QixjQUFULENBQXdCLElBQUl4L0IsR0FBR2k2QixXQUFILENBQWVva0MsY0FBbkIsRUFBeEI7QUFDSDtBQUNEO0FBQ0EsZ0JBQUkxNEQsUUFBUXE0RCxTQUFSLENBQWtCTSxnQkFBdEIsRUFBd0M7QUFDcEMscUJBQUszNkQsR0FBTCxDQUFTNjdCLGNBQVQsQ0FBd0IsSUFBSXgvQixHQUFHaTZCLFdBQUgsQ0FBZXNrQyxlQUFuQixFQUF4QjtBQUNIO0FBQ0Q7QUFDQSxnQkFBSTU0RCxRQUFRcTRELFNBQVIsQ0FBa0JRLFNBQXRCLEVBQWlDO0FBQzdCLHFCQUFLNzZELEdBQUwsQ0FBUzY3QixjQUFULENBQXdCLElBQUl4L0IsR0FBR2k2QixXQUFILENBQWV3a0MsUUFBbkIsQ0FBNEIsRUFBQ3ZoQyxXQUFXbDlCLEdBQUdpOUIsTUFBSCxDQUFVQyxTQUFWLENBQW9CSyxZQUFoQyxFQUE1QixDQUF4QjtBQUNIO0FBQ0Q7QUFDQSxnQkFBSTUzQixRQUFRcTRELFNBQVIsQ0FBa0JVLGdCQUF0QixFQUF3QztBQUNwQyxxQkFBSy82RCxHQUFMLENBQVM2N0IsY0FBVCxDQUF3QixJQUFJeC9CLEdBQUdpNkIsV0FBSCxDQUFlMGtDLGlCQUFuQixDQUFxQyxFQUFDemhDLFdBQVdsOUIsR0FBR2k5QixNQUFILENBQVVDLFNBQVYsQ0FBb0IwaEMsVUFBaEMsRUFBckMsQ0FBeEI7QUFDSCxhQUZELE1BRU8sSUFBSWo1RCxRQUFRcTRELFNBQVIsQ0FBa0JhLFdBQXRCLEVBQW1DO0FBQ3RDLHFCQUFLbDdELEdBQUwsQ0FBUzY3QixjQUFULENBQXdCLElBQUl4L0IsR0FBR2k2QixXQUFILENBQWU2a0MsVUFBbkIsQ0FBOEIsRUFBQzVoQyxXQUFXbDlCLEdBQUdpOUIsTUFBSCxDQUFVQyxTQUFWLENBQW9CMGhDLFVBQWhDLEVBQTlCLENBQXhCO0FBQ0g7QUFDSjtBQUNEO0FBQ0EsWUFBSWo1RCxRQUFRbzVELFNBQVosRUFBdUI7QUFDbkI7QUFDQSxnQkFBSXA1RCxRQUFRbzVELFNBQVIsQ0FBa0JDLE1BQXRCLEVBQThCO0FBQzFCLHFCQUFLcjdELEdBQUwsQ0FBUzY3QixjQUFULENBQXdCLElBQUl4L0IsR0FBR2k2QixXQUFILENBQWVnbEMsV0FBbkIsRUFBeEI7QUFDSDtBQUNEO0FBQ0EsZ0JBQUl0NUQsUUFBUW81RCxTQUFSLENBQWtCejVELElBQXRCLEVBQTRCO0FBQ3hCLHFCQUFLM0IsR0FBTCxDQUFTNjdCLGNBQVQsQ0FBd0IsSUFBSXgvQixHQUFHaTZCLFdBQUgsQ0FBZWlsQyxTQUFuQixDQUE2QixFQUFDQyxxQkFBcUIsSUFBdEIsRUFBN0IsQ0FBeEI7QUFDSDtBQUNKO0FBQ0Q7QUFDQSxZQUFJeDVELFFBQVF5NUQsWUFBWixFQUEwQjtBQUN0QjtBQUNBLGdCQUFJejVELFFBQVF5NUQsWUFBUixDQUFxQkMsR0FBekIsRUFBOEI7QUFDMUIscUJBQUsxN0QsR0FBTCxDQUFTNjdCLGNBQVQsQ0FBd0IsSUFBSXgvQixHQUFHaTZCLFdBQUgsQ0FBZXFsQyxXQUFuQixFQUF4QjtBQUNIO0FBQ0Q7QUFDQSxnQkFBSTM1RCxRQUFReTVELFlBQVIsQ0FBcUI5NUQsSUFBekIsRUFBK0I7QUFDM0IscUJBQUszQixHQUFMLENBQVM2N0IsY0FBVCxDQUF3QixJQUFJeC9CLEdBQUdpNkIsV0FBSCxDQUFlc2xDLFlBQW5CLEVBQXhCO0FBQ0g7QUFDSjtBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBejVELGtDQUEwQkMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUExQjtBQUNBRixnQ0FBd0JHLFNBQXhCLEdBQW9DQyx3RUFBWUEsQ0FBQ0Msb0JBQWIsR0FBb0MsR0FBcEMsR0FBMENELHdFQUFZQSxDQUFDRSxlQUEzRjtBQUNBLGFBQUtDLDJCQUFMLENBQWlDQyxPQUFqQyxDQUF5Q1IsdUJBQXpDO0FBQ0E7QUFDQVMscUNBQTZCUixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQTdCO0FBQ0FPLG1DQUEyQk4sU0FBM0IsR0FBdUNDLHdFQUFZQSxDQUFDTSxvQkFBYixHQUFvQyxHQUFwQyxHQUEwQ04sd0VBQVlBLENBQUNFLGVBQTlGO0FBQ0E1RixVQUFFc0YsdUJBQUYsRUFBMkJXLEtBQTNCLENBQWlDRiwwQkFBakM7QUFDQTtBQUNBLGFBQUtHLGlCQUFMLENBQXVCakksSUFBdkIsQ0FBNEI4SCwwQkFBNUI7QUFDQTtBQUNBazJELG1DQUEyQjEyRCxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQTNCO0FBQ0F5MkQsaUNBQXlCeDJELFNBQXpCLEdBQXFDQyx3RUFBWUEsQ0FBQ3VvQixvQkFBYixHQUFvQyxHQUFwQyxHQUEwQ3ZvQix3RUFBWUEsQ0FBQ0UsZUFBNUY7QUFDQTVGLFVBQUUrRiwwQkFBRixFQUE4QkUsS0FBOUIsQ0FBb0NnMkQsd0JBQXBDO0FBQ0E7QUFDQSxhQUFLdmdCLGtCQUFMLENBQXdCejlDLElBQXhCLENBQTZCZytELHdCQUE3QjtBQUNBO0FBQ0FDLHNDQUE4QjMyRCxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQTlCO0FBQ0EwMkQsb0NBQTRCejJELFNBQTVCLEdBQXdDQyx3RUFBWUEsQ0FBQ3dvQixvQkFBYixHQUFvQyxHQUFwQyxHQUEwQ3hvQix3RUFBWUEsQ0FBQ0UsZUFBL0Y7QUFDQTVGLFVBQUVpOEQsd0JBQUYsRUFBNEJoMkQsS0FBNUIsQ0FBa0NpMkQsMkJBQWxDO0FBQ0E7QUFDQSxhQUFLeGdCLGtCQUFMLENBQXdCejlDLElBQXhCLENBQTZCaStELDJCQUE3QjtBQUNBO0FBQ0E7QUFDQSxhQUFLL3dELFFBQUwsR0FBZ0IsRUFBaEI7QUFDQTs7O0FBR0E7QUFDQSxZQUFJaEcsUUFBUXl6QixPQUFSLElBQW1CLE9BQU9YLG9GQUFQLEtBQW1CLFVBQTFDLEVBQXNEO0FBQ2xELGlCQUFLOXNCLFFBQUwsQ0FBY3l0QixPQUFkLEdBQXdCLElBQUlYLG9GQUFKLENBQVk7QUFDaEN6RCwwQkFBVVIsY0FBY3JOLFlBRFE7QUFFaEMwTyx3QkFBUS92Qix1QkFGd0I7QUFHaENreUMseUJBQVNyeUMsUUFBUXF5QyxPQUhlO0FBSWhDejdDLCtCQUFlO0FBSmlCLGFBQVosQ0FBeEI7QUFNQSxpQkFBS29ILEdBQUwsQ0FBU3E0RCxVQUFULENBQW9CLEtBQUtyd0QsUUFBTCxDQUFjeXRCLE9BQWxDO0FBQ0g7O0FBRUQ7QUFDQSxZQUFJenpCLFFBQVE2NUQsVUFBUixJQUFzQjc1RCxRQUFRODVELFdBQWxDLEVBQStDO0FBQzNDLGlCQUFLOXpELFFBQUwsQ0FBY3JHLElBQWQsR0FBcUIsSUFBSXRGLEdBQUd1MEIsT0FBSCxDQUFXbXJDLElBQWYsQ0FBb0I7QUFDckNDLDZCQUFhLEdBRHdCO0FBRXJDQyw4QkFBYyxHQUZ1QjtBQUdyQ0MsZ0NBQWdCcnJDLGNBQWNsTyxZQUhPO0FBSXJDdzVDLGlDQUFpQnRyQyxjQUFjak8sYUFKTTtBQUtyQ3NQLHdCQUFRL3ZCO0FBTDZCLGFBQXBCLENBQXJCO0FBT0EsaUJBQUtuQyxHQUFMLENBQVNxNEQsVUFBVCxDQUFvQixLQUFLcndELFFBQUwsQ0FBY3JHLElBQWxDOztBQUVBLGdCQUFJSyxRQUFRODVELFdBQVosRUFBeUI7QUFDckIscUJBQUs5ekQsUUFBTCxDQUFjbzBELFVBQWQsR0FBMkIsSUFBSS8vRCxHQUFHdTBCLE9BQUgsQ0FBV3lyQyxVQUFmLENBQ3ZCO0FBQ0k3eEQsMkJBQU8sR0FEWDtBQUVJNm1CLDhCQUFVUixjQUFjN04sZ0JBRjVCO0FBR0lrUCw0QkFBUS92QjtBQUhaLGlCQUR1QixDQUEzQjtBQU9BLHFCQUFLbkMsR0FBTCxDQUFTcTRELFVBQVQsQ0FBb0IsS0FBS3J3RCxRQUFMLENBQWNvMEQsVUFBbEM7QUFDSDtBQUNKO0FBQ0QsWUFBSXA2RCxRQUFRczZELFdBQVIsR0FBcUIsQ0FBRXQ2RCxRQUFRODVELFdBQW5DLEVBQWdEO0FBQzVDLGlCQUFLOXpELFFBQUwsQ0FBY3MwRCxXQUFkLEdBQTRCLElBQUlqZ0UsR0FBR3UwQixPQUFILENBQVcyckMsWUFBZixDQUE0QjtBQUNwRC94RCx1QkFBTyxHQUQ2QztBQUVwRDZtQiwwQkFBVVIsY0FBY2hPLGFBRjRCO0FBR3BEcVAsd0JBQVEvdkI7QUFINEMsYUFBNUIsQ0FBNUI7QUFLQSxpQkFBS25DLEdBQUwsQ0FBU3E0RCxVQUFULENBQW9CLEtBQUtyd0QsUUFBTCxDQUFjczBELFdBQWxDO0FBQ0g7QUFDRCxZQUFJdDZELFFBQVF3NkQsU0FBUixHQUFtQixDQUFFeDZELFFBQVE4NUQsV0FBakMsRUFBOEM7QUFDMUMsaUJBQUs5ekQsUUFBTCxDQUFjdzBELFNBQWQsR0FBMEIsSUFBSW5xQyxxRUFBSixDQUFTO0FBQy9CN25CLHVCQUFPLEdBRHdCO0FBRS9COG1CLDhCQUFjLEdBRmlCO0FBRy9CRCwwQkFBVVIsY0FBYy9OLGNBSE87QUFJL0JvUCx3QkFBUS92Qix1QkFKdUI7QUFLL0J2SiwrQkFBZTtBQUxnQixhQUFULENBQTFCO0FBT0EsaUJBQUtvSCxHQUFMLENBQVNxNEQsVUFBVCxDQUFvQixLQUFLcndELFFBQUwsQ0FBY3cwRCxTQUFsQztBQUNIOztBQUVELFlBQUl4NkQsUUFBUXk2RCxhQUFSLEdBQXVCLENBQUV6NkQsUUFBUTg1RCxXQUFyQyxFQUFrRDtBQUM5QyxpQkFBSzl6RCxRQUFMLENBQWN5MEQsYUFBZCxHQUE4QixJQUFJN3BCLDZFQUFKLENBQWE7QUFDdkNwb0MsdUJBQU8sR0FEZ0M7QUFFdkM4bUIsOEJBQWMsR0FGeUI7QUFHdkNELDBCQUFVUixjQUFjOU4sYUFIZTtBQUl2Q21QLHdCQUFRL3ZCLHVCQUorQjtBQUt2Q3ZKLCtCQUFlO0FBTHdCLGFBQWIsQ0FBOUI7QUFPQSxpQkFBS29ILEdBQUwsQ0FBU3E0RCxVQUFULENBQW9CLEtBQUtyd0QsUUFBTCxDQUFjeTBELGFBQWxDO0FBQ0g7O0FBRUQ7QUFDQSxZQUFJejZELFFBQVE4NUQsV0FBWixFQUF5QjtBQUNyQmovRCxjQUFFLE1BQU1tRixRQUFRczNELE1BQWQsR0FBdUIsSUFBdkIsR0FBOEIvMkQsd0VBQVlBLENBQUMydEIsT0FBN0MsRUFBc0R2YSxRQUF0RCxDQUErRHBULHdFQUFZQSxDQUFDb3VCLG1CQUE1RSxFQUFpR2UsV0FBakcsQ0FBNkdudkIsd0VBQVlBLENBQUMydEIsT0FBMUg7QUFDQXJ6QixjQUFFLE1BQU1tRixRQUFRczNELE1BQWQsR0FBdUIsSUFBdkIsR0FBOEIvMkQsd0VBQVlBLENBQUM0dEIsVUFBN0MsRUFBeURydEIsS0FBekQsQ0FBK0RqRyxFQUFFLE1BQU1tRixRQUFRczNELE1BQWQsR0FBdUIsSUFBdkIsR0FBOEIvMkQsd0VBQVlBLENBQUNtdUIsY0FBM0MsR0FBNEQsU0FBOUQsRUFBeUUvYSxRQUF6RSxDQUFrRnBULHdFQUFZQSxDQUFDbXVCLGNBQS9GLENBQS9EO0FBQ0E3ekIsY0FBRSxNQUFNbUYsUUFBUXMzRCxNQUFkLEdBQXVCLElBQXZCLEdBQThCLzJELHdFQUFZQSxDQUFDbXVCLGNBQTNDLEdBQTRELEdBQTVELEdBQWtFbnVCLHdFQUFZQSxDQUFDdXRCLFVBQWpGLEVBQTZGd00sTUFBN0Y7QUFDSDs7QUFFRCxZQUFJdDZCLFFBQVE2NUQsVUFBUixJQUFzQjc1RCxRQUFRczZELFdBQWxDLEVBQStDO0FBQzNDei9ELGNBQUUsTUFBTW1GLFFBQVFzM0QsTUFBZCxHQUF1QixJQUF2QixHQUE4Qi8yRCx3RUFBWUEsQ0FBQzJ0QixPQUE3QyxFQUFzRHZhLFFBQXRELENBQStEcFQsd0VBQVlBLENBQUNndUIsZ0JBQTVFLEVBQThGbUIsV0FBOUYsQ0FBMEdudkIsd0VBQVlBLENBQUMydEIsT0FBdkg7QUFDQXJ6QixjQUFFLE1BQU1tRixRQUFRczNELE1BQWQsR0FBdUIsSUFBdkIsR0FBOEIvMkQsd0VBQVlBLENBQUM0dEIsVUFBN0MsRUFBeURydEIsS0FBekQsQ0FBK0RqRyxFQUFFLE1BQU1tRixRQUFRczNELE1BQWQsR0FBdUIsSUFBdkIsR0FBOEIvMkQsd0VBQVlBLENBQUM2dEIsV0FBM0MsR0FBeUQsU0FBM0QsRUFBc0V6YSxRQUF0RSxDQUErRXBULHdFQUFZQSxDQUFDNnRCLFdBQTVGLENBQS9EO0FBQ0F2ekIsY0FBRSxNQUFNbUYsUUFBUXMzRCxNQUFkLEdBQXVCLElBQXZCLEdBQThCLzJELHdFQUFZQSxDQUFDNnRCLFdBQTNDLEdBQXlELEdBQXpELEdBQStEN3RCLHdFQUFZQSxDQUFDdXRCLFVBQTlFLEVBQTBGd00sTUFBMUY7QUFDSDs7QUFFRCxZQUFJdDZCLFFBQVE2NUQsVUFBUixJQUFzQjc1RCxRQUFRdzZELFNBQWxDLEVBQTZDO0FBQ3pDMy9ELGNBQUUsTUFBTW1GLFFBQVFzM0QsTUFBZCxHQUF1QixJQUF2QixHQUE4Qi8yRCx3RUFBWUEsQ0FBQzJ0QixPQUE3QyxFQUFzRHZhLFFBQXRELENBQStEcFQsd0VBQVlBLENBQUNpdUIsaUJBQTVFLEVBQStGa0IsV0FBL0YsQ0FBMkdudkIsd0VBQVlBLENBQUMydEIsT0FBeEg7QUFDQXJ6QixjQUFFLE1BQU1tRixRQUFRczNELE1BQWQsR0FBdUIsSUFBdkIsR0FBOEIvMkQsd0VBQVlBLENBQUM0dEIsVUFBN0MsRUFBeURydEIsS0FBekQsQ0FBK0RqRyxFQUFFLE1BQU1tRixRQUFRczNELE1BQWQsR0FBdUIsSUFBdkIsR0FBOEIvMkQsd0VBQVlBLENBQUM4dEIsWUFBM0MsR0FBMEQsU0FBNUQsRUFBdUUxYSxRQUF2RSxDQUFnRnBULHdFQUFZQSxDQUFDOHRCLFlBQTdGLENBQS9EO0FBQ0E4b0MsNEJBQWdCaDNELHdCQUF3QjIzQyxhQUF4QixDQUFzQyxNQUFNdjNDLHdFQUFZQSxDQUFDOHRCLFlBQW5CLEdBQWtDLEdBQWxDLEdBQXdDOXRCLHdFQUFZQSxDQUFDRSxlQUFyRCxHQUF1RSxTQUE3RyxDQUFoQjtBQUNBLGdCQUFJMDJELGFBQUosRUFBbUI7QUFDZixvQkFBSTtBQUNBQSxrQ0FBYzc4QixNQUFkO0FBQ0gsaUJBRkQsQ0FFRSxPQUFNb2dDLEdBQU4sRUFBVztBQUNUO0FBQ0g7QUFDSjtBQUNKOztBQUVELFlBQUkxNkQsUUFBUTY1RCxVQUFSLElBQXNCNzVELFFBQVF5NkQsYUFBbEMsRUFBaUQ7QUFDN0M1L0QsY0FBRSxNQUFNbUYsUUFBUXMzRCxNQUFkLEdBQXVCLElBQXZCLEdBQThCLzJELHdFQUFZQSxDQUFDMnRCLE9BQTdDLEVBQXNEdmEsUUFBdEQsQ0FBK0RwVCx3RUFBWUEsQ0FBQ2t1QixnQkFBNUUsRUFBOEZpQixXQUE5RixDQUEwR252Qix3RUFBWUEsQ0FBQzJ0QixPQUF2SDtBQUNBcnpCLGNBQUUsTUFBTW1GLFFBQVFzM0QsTUFBZCxHQUF1QixJQUF2QixHQUE4Qi8yRCx3RUFBWUEsQ0FBQzR0QixVQUE3QyxFQUF5RHJ0QixLQUF6RCxDQUErRGpHLEVBQUUsTUFBTW1GLFFBQVFzM0QsTUFBZCxHQUF1QixJQUF2QixHQUE4Qi8yRCx3RUFBWUEsQ0FBQyt0QixXQUEzQyxHQUF5RCxTQUEzRCxFQUFzRTNhLFFBQXRFLENBQStFcFQsd0VBQVlBLENBQUMrdEIsV0FBNUYsQ0FBL0Q7QUFDQXp6QixjQUFFLE1BQU1tRixRQUFRczNELE1BQWQsR0FBdUIsSUFBdkIsR0FBOEIvMkQsd0VBQVlBLENBQUMrdEIsV0FBM0MsR0FBeUQsR0FBekQsR0FBK0QvdEIsd0VBQVlBLENBQUN1dEIsVUFBOUUsRUFBMEZ3TSxNQUExRjtBQUNBNjhCLDRCQUFnQmgzRCx3QkFBd0IyM0MsYUFBeEIsQ0FBc0MsTUFBTXYzQyx3RUFBWUEsQ0FBQyt0QixXQUFuQixHQUFpQyxHQUFqQyxHQUF1Qy90Qix3RUFBWUEsQ0FBQ0UsZUFBcEQsR0FBc0UsU0FBNUcsQ0FBaEI7QUFDQSxnQkFBSTAyRCxhQUFKLEVBQW1CO0FBQ2Ysb0JBQUk7QUFDQUEsa0NBQWM3OEIsTUFBZDtBQUNILGlCQUZELENBRUUsT0FBTW9nQyxHQUFOLEVBQVc7QUFDVDtBQUNIO0FBQ0o7QUFDSjs7QUFFRDtBQUNBLFlBQUkxNkQsUUFBUTI2RCxVQUFaLEVBQXdCO0FBQ3BCLGlCQUFLMzBELFFBQUwsQ0FBYzIwRCxVQUFkLEdBQTJCLElBQUl0Z0UsR0FBR3UwQixPQUFILENBQVdnc0MsVUFBZixDQUEwQjtBQUNqRHB5RCx1QkFBTyxHQUQwQztBQUVqRHF5RCw2QkFBYSxHQUZvQztBQUdqRHhyQywwQkFBVVIsY0FBY3pNLGVBSHlCO0FBSWpEOE4sd0JBQVEvdkI7QUFKeUMsYUFBMUIsQ0FBM0I7QUFNQSxpQkFBS25DLEdBQUwsQ0FBU3E0RCxVQUFULENBQW9CLEtBQUtyd0QsUUFBTCxDQUFjMjBELFVBQWxDO0FBQ0g7O0FBRUQ7QUFDQSxZQUFJMzZELFFBQVE4NkQsYUFBUixJQUF5QixPQUFPOTNCLGlGQUFQLEtBQWtCLFVBQS9DLEVBQTJEO0FBQ3ZELGlCQUFLaDlCLFFBQUwsQ0FBY2dyRCxNQUFkLEdBQXVCLElBQUlodUIsaUZBQUosQ0FBVztBQUM5QjNULDBCQUFVUixjQUFjMU4sV0FETTtBQUU5QitPLHdCQUFRL3ZCLHVCQUZzQjtBQUc5Qmt5Qyx5QkFBU3J5QyxRQUFRcXlDLE9BSGE7QUFJOUJ6N0MsK0JBQWU7QUFKZSxhQUFYLENBQXZCO0FBTUEsaUJBQUtvSCxHQUFMLENBQVNxNEQsVUFBVCxDQUFvQixLQUFLcndELFFBQUwsQ0FBY2dyRCxNQUFsQztBQUNIO0FBQ0Q7QUFDQSxZQUFJaHhELFFBQVEyWCxNQUFSLENBQWU3VixNQUFmLElBQXlCLE9BQU82eUIsa0ZBQVAsS0FBa0IsVUFBL0MsRUFBMkQ7QUFDdkQsaUJBQUszdUIsUUFBTCxDQUFjMlIsTUFBZCxHQUF1QixJQUFJZ2Qsa0ZBQUosQ0FBVztBQUM5QnRGLDBCQUFVUixjQUFjek4sV0FETTtBQUU5QjNhLHNCQUFNekcsUUFBUTJYLE1BQVIsQ0FBZWxSLElBQWYsSUFBdUIsVUFGQztBQUc5QnlwQix3QkFBUWx3QixRQUFRMlgsTUFBUixDQUFldVksTUFBZixJQUF5Qi92Qix1QkFISDtBQUk5QjQ2RCwwQkFBVS82RCxRQUFRMlgsTUFBUixDQUFlcWEsSUFBZixJQUF1QixLQUpIO0FBSzlCNEMsMkJBQVc1MEIsUUFBUTJYLE1BQVIsQ0FBZXFqRCxVQUFmLElBQTZCLEtBTFY7QUFNOUIzb0IseUJBQVNyeUMsUUFBUXF5QyxPQU5hO0FBTzlCejdDLCtCQUFlO0FBUGUsYUFBWCxDQUF2QjtBQVNBLGlCQUFLb0gsR0FBTCxDQUFTcTRELFVBQVQsQ0FBb0IsS0FBS3J3RCxRQUFMLENBQWMyUixNQUFsQztBQUNIO0FBQ0Q7QUFDQSxZQUFJM1gsUUFBUXczRCxZQUFSLENBQXFCMTFELE1BQXJCLElBQStCLE9BQU93K0IsNkZBQVAsS0FBd0IsVUFBM0QsRUFBdUU7QUFDbkUsaUJBQUt0NkIsUUFBTCxDQUFjd3hELFlBQWQsR0FBNkIsSUFBSWwzQiw2RkFBSixDQUFpQjtBQUMxQ2pSLDBCQUFVUixjQUFjeE4saUJBRGtCO0FBRTFDNk8sd0JBQVEvdkIsdUJBRmtDO0FBRzFDa3lDLHlCQUFTcnlDLFFBQVFxeUMsT0FIeUI7QUFJMUN6N0MsK0JBQWU7QUFKMkIsYUFBakIsQ0FBN0I7QUFNQSxpQkFBS29ILEdBQUwsQ0FBU3E0RCxVQUFULENBQW9CLEtBQUtyd0QsUUFBTCxDQUFjd3hELFlBQWxDO0FBQ0g7QUFDRDtBQUNBLFlBQUl4M0QsUUFBUWttQyxLQUFaLEVBQWtCO0FBQ2hCLGlCQUFLbGdDLFFBQUwsQ0FBY2tnQyxLQUFkLEdBQXNCLElBQUkySyxzRUFBSixDQUFVO0FBQzlCcm9DLHVCQUFRLEVBRHNCO0FBRTlCNm1CLDBCQUFXUixjQUFjeE0sVUFGSztBQUc5QjZOLHdCQUFRL3ZCLHVCQUhzQjtBQUk5QnZKLCtCQUFlO0FBSmUsYUFBVixDQUF0QjtBQU1BLGlCQUFLb0gsR0FBTCxDQUFTcTRELFVBQVQsQ0FBb0IsS0FBS3J3RCxRQUFMLENBQWNrZ0MsS0FBbEM7QUFDRDs7QUFFRDtBQUNBLFlBQUlsbUMsUUFBUWk3RCxTQUFaLEVBQXVCO0FBQ25CLGlCQUFLajFELFFBQUwsQ0FBY2kxRCxTQUFkLEdBQTBCLElBQUlsc0MscUVBQUosQ0FBUztBQUMvQnZtQix1QkFBTyxHQUR3QjtBQUUvQjhtQiw4QkFBYyxHQUZpQjtBQUcvQkQsMEJBQVVSLGNBQWMzTSxTQUhPO0FBSS9CbXdCLHlCQUFTcnlDLFFBQVFxeUMsT0FKYztBQUsvQm5pQix3QkFBUS92QjtBQUx1QixhQUFULENBQTFCO0FBT0EsaUJBQUtuQyxHQUFMLENBQVNxNEQsVUFBVCxDQUFvQixLQUFLcndELFFBQUwsQ0FBY2kxRCxTQUFsQztBQUNIO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsWUFBSWo3RCxRQUFRcTRELFNBQVIsS0FBc0JyNEQsUUFBUXE0RCxTQUFSLENBQWtCYSxXQUFsQixJQUFrQ2w1RCxRQUFRcTRELFNBQVIsQ0FBa0JhLFdBQWxCLElBQWlDbDVELFFBQVFxNEQsU0FBUixDQUFrQlUsZ0JBQTNHLENBQUosRUFBbUk7QUFDL0gsaUJBQUsveUQsUUFBTCxDQUFjcXpELE1BQWQsR0FBdUIsSUFBSWgvRCxHQUFHdTBCLE9BQUgsQ0FBV3NzQyxNQUFmLENBQXNCO0FBQ3pDMXlELHVCQUFPLEdBRGtDO0FBRXpDNm1CLDBCQUFVUixjQUFjNU4sbUJBRmlCO0FBR3pDaVAsd0JBQVEvdkI7QUFIaUMsYUFBdEIsQ0FBdkI7QUFLQSxpQkFBS25DLEdBQUwsQ0FBU3E0RCxVQUFULENBQW9CLEtBQUtyd0QsUUFBTCxDQUFjcXpELE1BQWxDO0FBQ0g7QUFDRDtBQUNBLFlBQUlyNUQsUUFBUWtnQyxRQUFSLElBQW9CLE9BQU9KLHNGQUFQLEtBQW9CLFVBQTVDLEVBQXdEO0FBQ3BELGlCQUFLOTVCLFFBQUwsQ0FBY2s2QixRQUFkLEdBQXlCLElBQUlKLHNGQUFKLENBQWE7QUFDbEN6USwwQkFBVVIsY0FBY3ZOLGFBRFU7QUFFbEM0Tyx3QkFBUS92Qix1QkFGMEI7QUFHbENreUMseUJBQVNyeUMsUUFBUXF5QyxPQUhpQjtBQUlsQ3o3QywrQkFBZTtBQUptQixhQUFiLENBQXpCO0FBTUEsaUJBQUtvSCxHQUFMLENBQVNxNEQsVUFBVCxDQUFvQixLQUFLcndELFFBQUwsQ0FBY2s2QixRQUFsQztBQUNIO0FBQ0Q7QUFDRjs7Ozs7Ozs7Ozs7QUFZQTtBQUNFLFlBQUlsZ0MsUUFBUWsyRCxTQUFaLEVBQXVCO0FBQ25CLGlCQUFLbHdELFFBQUwsQ0FBY2t3RCxTQUFkLEdBQTBCLElBQUk3N0QsR0FBR3UwQixPQUFILENBQVd3bkMsU0FBZixDQUF5QjtBQUMvQ2xtQyx3QkFBUXR2QjtBQUR1QyxhQUF6QixDQUExQjtBQUdBLGlCQUFLNUMsR0FBTCxDQUFTcTRELFVBQVQsQ0FBb0IsS0FBS3J3RCxRQUFMLENBQWNrd0QsU0FBbEM7QUFDSDs7QUFFRDtBQUNBLFlBQUlsMkQsUUFBUUMsU0FBUixJQUFxQkQsUUFBUUUsYUFBakMsRUFBZ0Q7QUFDOUM7QUFDRWMsNENBQWdDWixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWhDO0FBQ0FXLDBDQUE4QlYsU0FBOUIsR0FBMENDLHdFQUFZQSxDQUFDVSx3QkFBYixHQUF3QyxHQUF4QyxHQUE4Q1Ysd0VBQVlBLENBQUNFLGVBQXJHO0FBQ0E1RixjQUFFK0YsMEJBQUYsRUFBOEI2eEMsTUFBOUIsQ0FBcUN6eEMsNkJBQXJDO0FBQ0E7QUFDQSxnQkFBSWhCLFFBQVFDLFNBQVosRUFBdUI7QUFDbkIscUJBQUsrRixRQUFMLENBQWMvRixTQUFkLEdBQTBCLElBQUkwN0MsK0VBQUosQ0FBYztBQUNwQ3hwQiw2QkFBU3p6QixJQUQyQjtBQUVwQ3d4Qiw0QkFBUWx2Qiw2QkFGNEI7QUFHcEM2NkMsbUNBQWU7QUFIcUIsaUJBQWQsQ0FBMUI7QUFLQSxxQkFBSzc5QyxHQUFMLENBQVNxNEQsVUFBVCxDQUFvQixLQUFLcndELFFBQUwsQ0FBYy9GLFNBQWxDO0FBQ0g7QUFDRDtBQUNBLGdCQUFJRCxRQUFRRSxhQUFaLEVBQTJCO0FBQ3ZCLHFCQUFLOEYsUUFBTCxDQUFjOUYsYUFBZCxHQUE4QixJQUFJN0YsR0FBR3UwQixPQUFILENBQVcwbkMsYUFBZixDQUE2QjtBQUN2RGwxRCxnQ0FBWSxXQUQyQztBQUV2RG0xRCxzQ0FBa0JsOEQsR0FBRzhpQyxVQUFILENBQWNxNUIsWUFGdUI7QUFHdkR0bUMsNEJBQVFsdkIsNkJBSCtDO0FBSXZENjZDLG1DQUFlO0FBSndDLGlCQUE3QixDQUE5QjtBQU1BLHFCQUFLNzlDLEdBQUwsQ0FBU3E0RCxVQUFULENBQW9CLEtBQUtyd0QsUUFBTCxDQUFjOUYsYUFBbEM7QUFDSDtBQUNKOztBQUVEO0FBQ0EsWUFBSW9ELElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxJQUFvQnRyQixJQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJ1c0MsU0FBckMsSUFBa0QsT0FBTzczRCxJQUFJeUssSUFBSixDQUFTNmdCLE9BQVQsQ0FBaUJ1c0MsU0FBeEIsS0FBc0MsVUFBeEYsSUFBdUduN0QsUUFBUWhCLFNBQVIsQ0FBa0I4QyxNQUE3SCxFQUFzSTtBQUNsSSxpQkFBS2tFLFFBQUwsQ0FBY2hILFNBQWQsR0FBMEIsSUFBSXNFLElBQUl5SyxJQUFKLENBQVM2Z0IsT0FBVCxDQUFpQnVzQyxTQUFyQixDQUErQjtBQUNyRHZrRSwrQkFBZSxJQURzQztBQUVyRHM1Qix3QkFBUTRtQyx3QkFGNkM7QUFHckR6bEIsd0JBQVFyeEMsUUFBUWhCLFNBQVIsQ0FBa0IwNEQsR0FBbEIsSUFBeUIsS0FIb0I7QUFJckRubUMsNkJBQWEsSUFKd0M7QUFLckRILDJCQUFZcHhCLFFBQVFoQixTQUFSLENBQWtCb3lCLFNBTHVCO0FBTXJENW9CLHVCQUFPLEdBTjhDO0FBT3JENHlELGdDQUFnQixFQVBxQztBQVFyRDtBQUNBQyw0QkFBWXI3RCxRQUFRaEIsU0FBUixDQUFrQnM4RCxVQVR1QjtBQVVyREMsNEJBQVl2N0QsUUFBUWhCLFNBQVIsQ0FBa0J3OEQsVUFWdUI7QUFXckRDLDZCQUFhLElBWHdDO0FBWXJEM3ZCLHlCQUFTOXJDLFFBQVFoQixTQUFSLENBQWtCOHNDLE9BWjBCO0FBYXJENHZCLDRCQUFZMTdELFFBQVFoQixTQUFSLENBQWtCMjhELFVBYnVCO0FBY3JEdHpELHVCQUFPckksUUFBUWhCLFNBQVIsQ0FBa0JxSixLQWQ0QjtBQWVyRHV6RCwwQkFBVTU3RCxRQUFRcThDLFNBZm1DO0FBZ0JyRGhLLHlCQUFTcnlDLFFBQVFxeUMsT0FoQm9DO0FBaUJyRHdwQix5QkFBUzc3RCxRQUFRaEIsU0FBUixDQUFrQjY4RDtBQWpCMEIsYUFBL0IsQ0FBMUI7QUFtQkEsaUJBQUs3OUQsR0FBTCxDQUFTcTRELFVBQVQsQ0FBb0IsS0FBS3J3RCxRQUFMLENBQWNoSCxTQUFsQztBQUNIOztBQUVEO0FBQ0EsWUFBSWdCLFFBQVE4N0QsWUFBWixFQUEwQjtBQUN0QixpQkFBSzkxRCxRQUFMLENBQWM4MUQsWUFBZCxHQUE2QixJQUFJemhFLEdBQUd1MEIsT0FBSCxDQUFXbXRDLFdBQWYsQ0FBMkI7QUFDcEQ7QUFDQXZ6RCx1QkFBTyxHQUY2QztBQUdwRDZtQiwwQkFBVVIsY0FBYy9NLGlCQUg0QjtBQUlwRGkxQiw2QkFBYWxvQixjQUFjdkgsd0JBSnlCO0FBS3BEMDBDLDJCQUFXLGtCQUx5QyxDQUt2QjtvRkFMdUIsQ0FNYjtBQU5hLGFBQTNCLENBQTdCO0FBUUEsaUJBQUtoK0QsR0FBTCxDQUFTcTRELFVBQVQsQ0FBb0IsS0FBS3J3RCxRQUFMLENBQWM4MUQsWUFBbEM7QUFDQSxpQkFBS3ZsQixrQkFBTCxDQUF3Qno5QyxJQUF4QixDQUE2QixjQUE3QjtBQUVIOztBQUVEO0FBQ0EsWUFBSWtILFFBQVFpOEQsV0FBWixFQUF5QjtBQUNyQixpQkFBS2oyRCxRQUFMLENBQWNpMkQsV0FBZCxHQUE0QixJQUFJanJDLG1GQUFKLENBQWdCO0FBQ3hDZCx3QkFBUTRtQztBQURnQyxhQUFoQixDQUE1QjtBQUdBLGlCQUFLOTRELEdBQUwsQ0FBU3E0RCxVQUFULENBQW9CLEtBQUtyd0QsUUFBTCxDQUFjaTJELFdBQWxDO0FBQ0g7O0FBRUQ7QUFDRixZQUFJajhELFFBQVFxOEMsU0FBUixJQUFxQnI4QyxRQUFRcThDLFNBQVIsQ0FBa0I1MUMsSUFBbEIsS0FBMkIsU0FBcEQsRUFBK0Q7QUFDN0Qyd0QsOEJBQWtCLEtBQWxCO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBOztBQUVBLFlBQUksT0FBT25qQiwrRUFBUCxLQUFxQixVQUFyQixJQUFtQ21qQixlQUF2QyxFQUF3RDtBQUNwRCxpQkFBS254RCxtQkFBTDtBQUNEOztBQUVEO0FBQ0EsWUFBSWpHLFFBQVFxOEMsU0FBUixLQUFzQnI4QyxRQUFRcThDLFNBQVIsQ0FBa0I1MUMsSUFBbEIsS0FBMkIsU0FBM0IsSUFBd0N6RyxRQUFRcThDLFNBQVIsQ0FBa0I1MUMsSUFBbEIsS0FBMkIsVUFBekYsQ0FBSixFQUEwRztBQUN4RyxpQkFBS1QsUUFBTCxDQUFjcTJDLFNBQWQsR0FBMEIsSUFBSVAsbUZBQUosQ0FBYztBQUNwQ0MsOEJBQWM7QUFEc0IsYUFBZCxDQUExQjtBQUdBLGlCQUFLLzlDLEdBQUwsQ0FBUzY3QixjQUFULENBQXdCLEtBQUs3ekIsUUFBTCxDQUFjcTJDLFNBQXRDO0FBQ0EsZ0JBQUlyOEMsUUFBUXE4QyxTQUFSLENBQWtCNTFDLElBQWxCLEtBQTJCLFVBQS9CLEVBQTJDO0FBQ3pDO0FBQ0Esb0JBQUl6RyxRQUFRcThDLFNBQVIsQ0FBa0JDLFdBQWxCLElBQWlDdDhDLFFBQVFxOEMsU0FBUixDQUFrQkMsV0FBdkQsRUFBb0U7QUFDbEUsd0JBQUk0ZixZQUFZOTdELFNBQVNtbEMsY0FBVCxDQUF3QnZsQyxRQUFRcThDLFNBQVIsQ0FBa0JDLFdBQWxCLENBQThCakUsU0FBOUIsQ0FBd0MsQ0FBeEMsQ0FBeEIsQ0FBaEI7QUFDQSx3QkFBSThqQixZQUFZLzdELFNBQVNtbEMsY0FBVCxDQUF3QnZsQyxRQUFRcThDLFNBQVIsQ0FBa0JHLFdBQWxCLENBQThCbkUsU0FBOUIsQ0FBd0MsQ0FBeEMsQ0FBeEIsQ0FBaEI7QUFDQSx3QkFBSTZqQixhQUFhQyxTQUFqQixFQUE0QjtBQUMxQiw0QkFBSUMsVUFBVUYsVUFBVXB5RCxLQUF4QjtBQUNBLDRCQUFJdXlELFVBQVVGLFVBQVVyeUQsS0FBeEI7QUFDQSw0QkFBSXN5RCxXQUFXQyxPQUFmLEVBQXdCO0FBQ3RCLGdDQUFJQyxZQUFZLENBQUNocUQsV0FBVzhwRCxPQUFYLEVBQW9CLEVBQXBCLENBQUQsRUFBMEI5cEQsV0FBVytwRCxPQUFYLEVBQW9CLEVBQXBCLENBQTFCLENBQWhCO0FBQ0EsZ0NBQUlFLGNBQWNsaUUsR0FBRzZRLElBQUgsQ0FBUXFELFNBQVIsQ0FBa0IrdEQsU0FBbEIsRUFBNkJqaUUsR0FBRzZRLElBQUgsQ0FBUTNMLEdBQVIsQ0FBWSxXQUFaLENBQTdCLEVBQXVEbEYsR0FBRzZRLElBQUgsQ0FBUTNMLEdBQVIsQ0FBWSxXQUFaLENBQXZELENBQWxCO0FBQ0FpeEIsMENBQWMsSUFBZDtBQUNBLGlDQUFLeHlCLEdBQUwsQ0FBU0MsT0FBVCxHQUFtQmdWLFNBQW5CLENBQTZCc3BELFdBQTdCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUFDRjs7QUFFRDtBQUNBLFlBQUl2OEQsUUFBUXpDLFdBQVIsQ0FBb0J1RSxNQUF4QixFQUFnQztBQUM1QjtBQUNBLGdCQUFJOUIsUUFBUXpDLFdBQVIsQ0FBb0JpL0QsUUFBeEIsRUFBa0M7QUFDOUJ2RiwyQkFBVzcyRCxTQUFTQyxhQUFULENBQXVCLEdBQXZCLENBQVg7QUFDQTQyRCx5QkFBU3RxQixJQUFULEdBQWdCLHFCQUFoQjtBQUNBc3FCLHlCQUFTbm5DLEtBQVQsR0FBaUIsb0JBQWpCO0FBQ0FtbkMseUJBQVMvbUMsTUFBVCxHQUFrQixRQUFsQjtBQUNBK21DLHlCQUFTMzJELFNBQVQsR0FBcUJDLHdFQUFZQSxDQUFDc29CLGdCQUFsQztBQUNBcXVDLDhCQUFjOTJELFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZDtBQUNBNjJELDRCQUFZdjlDLEdBQVosR0FBa0IsNkNBQWxCO0FBQ0FzOUMseUJBQVN6cUQsV0FBVCxDQUFxQjBxRCxXQUFyQjtBQUNBSCw0Q0FBNEJ2cUQsV0FBNUIsQ0FBd0N5cUQsUUFBeEM7QUFDSDtBQUNELGlCQUFLanhELFFBQUwsQ0FBY3pJLFdBQWQsR0FBNEIsSUFBSWxELEdBQUd1MEIsT0FBSCxDQUFXNnRDLFdBQWYsQ0FBMkI7QUFDbkRqMEQsdUJBQU8sR0FENEM7QUFFbkQ2bUIsMEJBQVVSLGNBQWM1TSxnQkFGMkI7QUFHbkR5NkMsK0JBQWUsR0FIb0M7QUFJbkR4c0Msd0JBQVE2bUMsMkJBSjJDO0FBS25EeGxDLDZCQUFhO0FBTHNDLGFBQTNCLENBQTVCO0FBT0EsaUJBQUt2ckIsUUFBTCxDQUFjekksV0FBZCxDQUEwQm8vRCxZQUExQixDQUF1QzM4RCxRQUFRekMsV0FBUixDQUFvQjZ6QixTQUFwQixLQUFrQyxHQUF6RTtBQUNBLGlCQUFLcHpCLEdBQUwsQ0FBU3E0RCxVQUFULENBQW9CLEtBQUtyd0QsUUFBTCxDQUFjekksV0FBbEM7QUFDSDs7QUFFRDtBQUNBLFlBQUl5QyxRQUFReTJELFNBQVIsQ0FBa0IzMEQsTUFBdEIsRUFBOEI7QUFDMUIsaUJBQUtrRSxRQUFMLENBQWN5d0QsU0FBZCxHQUEwQixJQUFJamxDLCtFQUFKLENBQWM7QUFDcENocEIsdUJBQU8sR0FENkI7QUFFcEM2bUIsMEJBQVVSLGNBQWMxTSxjQUZZO0FBR3BDdnJCLCtCQUFlLElBSHFCO0FBSXBDKzZCLDhCQUFjM3hCLFFBQVF5MkQsU0FBUixDQUFrQmtCLGFBSkk7QUFLcEN6bkMsd0JBQVE2bUM7QUFMNEIsYUFBZCxDQUExQjtBQU9BLGlCQUFLLzRELEdBQUwsQ0FBU3E0RCxVQUFULENBQW9CLEtBQUtyd0QsUUFBTCxDQUFjeXdELFNBQWxDO0FBQ0g7O0FBRUQ7QUFDQSxZQUFJejJELFFBQVE0OEQsU0FBWixFQUF1QjtBQUNuQmhHLHdCQUFZeDJELFNBQVNtbEMsY0FBVCxDQUF3QnZsQyxRQUFRczNELE1BQWhDLENBQVo7QUFDQSxnQkFBSXQzRCxRQUFRNDhELFNBQVIsQ0FBa0IsV0FBbEIsQ0FBSixFQUFvQztBQUNsQ2hHLDRCQUFZeDJELFNBQVNtbEMsY0FBVCxDQUF3QixTQUF4QixDQUFaO0FBQ0Q7O0FBRUQsZ0JBQUl2bEMsUUFBUTQ4RCxTQUFSLENBQWtCLFdBQWxCLENBQUosRUFBb0M7QUFDaEMsb0JBQUlDLFlBQVlqa0UsOERBQUtBLENBQUNnUix3QkFBTixDQUErQjVKLFFBQVE0OEQsU0FBUixDQUFrQixXQUFsQixDQUEvQixFQUErRDU4RCxRQUFRNDhELFNBQVIsQ0FBa0IsYUFBbEIsQ0FBL0QsQ0FBaEI7QUFDQSxvQkFBSUUsWUFBWWxrRSw4REFBS0EsQ0FBQ2dSLHdCQUFOLENBQStCNUosUUFBUTQ4RCxTQUFSLENBQWtCLFdBQWxCLENBQS9CLEVBQStENThELFFBQVE0OEQsU0FBUixDQUFrQixhQUFsQixDQUEvRCxDQUFoQjtBQUNBLG9CQUFJRyxjQUFjbmtFLDhEQUFLQSxDQUFDZ1Isd0JBQU4sQ0FBK0I1SixRQUFRNDhELFNBQVIsQ0FBa0IsYUFBbEIsQ0FBL0IsRUFBaUU1OEQsUUFBUTQ4RCxTQUFSLENBQWtCLGVBQWxCLENBQWpFLENBQWxCOztBQUVBLG9CQUFJaEcsYUFBYUEsVUFBVWw5RCxLQUEzQixFQUFrQztBQUM5Qms5RCw4QkFBVWw5RCxLQUFWLENBQWdCc2pFLFdBQWhCLENBQTRCLGNBQTVCLEVBQTRDSCxTQUE1QztBQUNBakcsOEJBQVVsOUQsS0FBVixDQUFnQnNqRSxXQUFoQixDQUE0QixjQUE1QixFQUE0Q0YsU0FBNUM7QUFDQWxHLDhCQUFVbDlELEtBQVYsQ0FBZ0JzakUsV0FBaEIsQ0FBNEIsZ0JBQTVCLEVBQThDRCxXQUE5QztBQUNIO0FBQ0o7O0FBRUQsZ0JBQUkvOEQsUUFBUTQ4RCxTQUFSLENBQWtCLGNBQWxCLENBQUosRUFBdUM7QUFDbkNoRywwQkFBVWw5RCxLQUFWLENBQWdCc2pFLFdBQWhCLENBQTRCLHlCQUE1QixFQUF1RGg5RCxRQUFRNDhELFNBQVIsQ0FBa0IsY0FBbEIsSUFBa0MsR0FBekY7QUFDQWhHLDBCQUFVbDlELEtBQVYsQ0FBZ0JzakUsV0FBaEIsQ0FBNEIsdUJBQTVCLEVBQXFEaDlELFFBQVE0OEQsU0FBUixDQUFrQixjQUFsQixJQUFrQyxJQUF2RjtBQUNIO0FBQ0o7QUFDSCxZQUFJMzRELE9BQU9DLFlBQVAsS0FBd0JxRixTQUF4QixJQUFxQ3NoQyxNQUFNb3lCLE9BQU4sQ0FBY2g1RCxPQUFPQyxZQUFQLENBQW9CZzVELHlCQUFsQyxDQUF6QyxFQUF1RztBQUNyR3RrRSwwRUFBS0EsQ0FBQ2dCLGlCQUFOLENBQXdCcUssT0FBT0MsWUFBUCxDQUFvQmc1RCx5QkFBNUMsRUFBdUUsRUFBQ3RtRSxlQUFlLElBQWhCLEVBQXNCdW1FLFdBQVdoOUQsdUJBQWpDLEVBQXZFO0FBQ0Q7QUFDRixLQXQxQkQ7QUF1MUJBO0FBQ0ZtRCxRQUFJeUssSUFBSixDQUFTNnZDLGFBQVQsQ0FBdUJ4dEIsU0FBdkIsR0FBbUN2MUIsRUFBRUgsTUFBRixDQUFTNEksSUFBSXlLLElBQUosQ0FBUzZ2QyxhQUFULENBQXVCeHRCLFNBQWhDLEVBQTJDO0FBQzFFbnFCLDZCQUFxQiwrQkFBVztBQUM5QixnQkFBTWpHLFVBQVUsS0FBSzNJLElBQXJCO0FBQ0UsZ0JBQUkyL0Qsd0JBQUo7QUFDQSxnQkFBSWgzRCxRQUFRbUYsU0FBUixDQUFrQnFELEtBQXRCLEVBQTZCO0FBQzdCd3VELGtDQUFrQm5vQyxjQUFjN00sY0FBZCxDQUE2QnpXLE9BQTdCLENBQXFDLFdBQXJDLEVBQWtEdkwsUUFBUW1GLFNBQVIsQ0FBa0JxRCxLQUFwRSxFQUEyRStDLE9BQTNFLENBQW1GLFdBQW5GLEVBQWdHdkwsUUFBUW1GLFNBQVIsQ0FBa0JxRCxLQUFsSCxDQUFsQjtBQUNEOztBQUdELGlCQUFLeEMsUUFBTCxDQUFjYixTQUFkLEdBQTBCLElBQUk4dUMsK0VBQUosQ0FBYztBQUN0Q2poQix3QkFBUWh6QixRQUFRbUYsU0FBUixDQUFrQnJELE1BQWxCLElBQTRCLEtBREU7QUFFdENpeEIsMEJBQVUveUIsUUFBUW1GLFNBQVIsQ0FBa0JxRCxLQUZVO0FBR3RDNm1CLDBCQUFVMm5DLG1CQUFtQixLQUhTO0FBSXRDM2tCLHlCQUFTcnlDLFFBQVFxeUMsT0FKcUI7QUFLdEN6N0MsK0JBQWUsSUFMdUI7QUFNdEN5NkMsd0JBQVFyeEMsUUFBUW1GLFNBQVIsQ0FBa0J1eUQsR0FOWTtBQU90Q3BtQiw2QkFBYXR4QyxRQUFRbUYsU0FBUixDQUFrQjZzQixJQVBPO0FBUXRDa2lCLHdCQUFRbDBDLFFBQVFtRixTQUFSLENBQWtCK3VDLE1BUlk7QUFTdENsbEIsd0JBQVFodkIsUUFBUW1GLFNBQVIsQ0FBa0I2cEIsTUFUWTtBQVV0QzZsQix5Q0FBeUI3MEMsUUFBUTgwQyxpQkFBUixDQUEwQmh6QyxNQVZiO0FBV3RDc3pDLHdDQUF3QnAxQyxRQUFRODBDLGlCQUFSLENBQTBCdHNDLEtBWFo7QUFZdENpc0MscUNBQXFCejBDLFFBQVEwMEMsYUFBUixDQUFzQjV5QyxNQVpMO0FBYXRDcTJDLG9DQUFvQm40QyxRQUFRMDBDLGFBQVIsQ0FBc0Jsc0M7QUFiSixhQUFkLENBQTFCO0FBZUEsaUJBQUt4SyxHQUFMLENBQVNxNEQsVUFBVCxDQUFvQixLQUFLcndELFFBQUwsQ0FBY2IsU0FBbEM7QUFDRDtBQXpCeUUsS0FBM0MsQ0FBbkM7QUE0QkQsQ0E3M0JBLEVBNjNCQ2xPLE1BNzNCRCxFQTYzQlMsS0FBS3FNLEdBNzNCZCxDQUFELEMsQ0E2M0JzQjs7QUFFZixJQUFJczZDLGdCQUFnQixLQUFLdDZDLEdBQUwsQ0FBU3lLLElBQVQsQ0FBYzZ2QyxhQUFsQyxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2g3QlA7QUFDQTs7QUFFTyxJQUFNdjZDLG9CQUFiO0FBQ0ksa0NBQVk3TCxTQUFaLEVBQXNCO0FBQUE7O0FBQ2xCLGFBQUtBLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsYUFBSzRCLFdBQUwsR0FBbUIsRUFBbkI7QUFDSDs7QUFKTDtBQUFBO0FBQUEseUNBTXFCdTlDLFNBTnJCLEVBTStCO0FBQ3ZCLGdCQUFJMy9DLE9BQU8sSUFBWDtBQUFBLGdCQUNJb21FLGtCQURKO0FBQUEsZ0JBRUlDLG1CQUFtQjErRCxnRUFBTUEsQ0FBQ2hFLEdBRjlCO0FBQUEsZ0JBR0kyaUUsc0JBQXNCMytELGdFQUFNQSxDQUFDN0QsTUFIakM7QUFBQSxnQkFJSWhCLFlBSko7QUFBQSxnQkFLSXlqRSxZQUxKO0FBQUEsZ0JBTUlyakUsS0FOSjs7QUFRQUosMkJBQWUsRUFBZjtBQUNBeWpFLDJCQUFlLElBQUlsakUsR0FBR2YsS0FBSCxDQUFTZ0IsSUFBYixDQUFrQjtBQUM3QkMsd0JBQVEsSUFBSUYsR0FBR0UsTUFBSCxDQUFVSyxHQUFkO0FBRHFCLGFBQWxCLENBQWY7O0FBSUF3aUUsaUNBQXFCLEtBQUtoa0UsV0FBTCxDQUFpQnU5QyxTQUFqQixDQUFyQjs7QUFFQSxvQkFBUXltQixtQkFBbUIzakUsUUFBM0I7QUFDSSxxQkFBSyxLQUFMO0FBQ0ksd0JBQUk0akUsaUJBQWlCRCxtQkFBbUIxakUsS0FBcEMsQ0FBSixFQUFnRDtBQUM1QzZqRSx1Q0FBZSxJQUFJbGpFLEdBQUdmLEtBQUgsQ0FBU2dCLElBQWIsQ0FBa0I7QUFDN0JDLG9DQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVUssR0FBZCxDQUNKM0QsT0FBT3lELE1BQVAsQ0FDSTJpRSxpQkFBaUJELG1CQUFtQjFqRSxLQUFwQyxDQURKLEVBRUlJLFlBRkosQ0FESTtBQURxQix5QkFBbEIsQ0FBZjtBQVFILHFCQVRELE1BU08sSUFBSXdqRSxvQkFBb0JGLG1CQUFtQjFqRSxLQUF2QyxDQUFKLEVBQW1EO0FBQ3REO0FBQ0E2akUsdUNBQWUsSUFBSWxqRSxHQUFHZixLQUFILENBQVNnQixJQUFiLENBQWtCO0FBQzdCQyxvQ0FBUSxJQUFJRixHQUFHRSxNQUFILENBQVVRLE1BQWQsQ0FDSjlELE9BQU95RCxNQUFQLENBQ0k0aUUsb0JBQW9CRixtQkFBbUIxakUsS0FBdkMsQ0FESixFQUVJSSxZQUZKLENBREk7QUFEcUIseUJBQWxCLENBQWY7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0gscUJBZk0sTUFlQSxJQUFJc2pFLG1CQUFtQjFqRSxLQUFuQixLQUE2QixZQUFqQyxFQUErQztBQUNsRDtBQUNBUSxnQ0FBUSxJQUFSO0FBQ0EsNEJBQUlrakUsbUJBQW1CNy9ELFdBQXZCLEVBQW9DO0FBQ2hDekQseUNBQWF3RCxZQUFiLEdBQTRCOC9ELG1CQUFtQjcvRCxXQUFuQixHQUFpQyxHQUFqQyxHQUF1Q2xELEdBQUdFLE1BQUgsQ0FBVUssR0FBVixDQUFjNEMsV0FBakY7QUFDSDs7QUFFRCw0QkFBSTQvRCxtQkFBbUJqakUsR0FBdkIsRUFBNEI7QUFDeEJMLHlDQUFhSyxHQUFiLEdBQW1CaWpFLG1CQUFtQmpqRSxHQUF0QztBQUNBRCxvQ0FBUSxLQUFSO0FBQ0gseUJBSEQsTUFHTyxJQUFJa2pFLG1CQUFtQmhqRSxJQUF2QixFQUE2QjtBQUNoQ04seUNBQWFNLElBQWIsR0FBb0JnakUsbUJBQW1CaGpFLElBQXZDO0FBQ0FGLG9DQUFRLEtBQVI7QUFDSDtBQUNELDRCQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNScWpFLDJDQUFlLElBQUlsakUsR0FBR2YsS0FBSCxDQUFTZ0IsSUFBYixDQUFrQjtBQUM3QkMsd0NBQVEsSUFBSUYsR0FBR0UsTUFBSCxDQUFVQyxHQUFkLENBQWtCVixZQUFsQjtBQURxQiw2QkFBbEIsQ0FBZjtBQUdILHlCQUpELE1BSU87QUFDSG5DLG9DQUFRQyxJQUFSLENBQWEsNENBQWI7QUFDSDtBQUNKLHFCQXJCTSxNQXFCQTtBQUNIRCxnQ0FBUUMsSUFBUixDQUFhLDRDQUFiO0FBQ0g7QUFDRDtBQUNKLHFCQUFLLFFBQUw7QUFDSTtBQUNBRCw0QkFBUUMsSUFBUixDQUFhLHVDQUFiO0FBQ0E7QUFDSixxQkFBSyxNQUFMO0FBQ0ksd0JBQUltQyxnQkFBZ0J5akUsTUFBaEIsSUFBMEJKLG1CQUFtQjFqRSxLQUFqRCxFQUF3RDtBQUNwRDZqRSx1Q0FBZSxJQUFJbGpFLEdBQUdmLEtBQUgsQ0FBU2dCLElBQWIsQ0FBa0I7QUFDN0JDLG9DQUFRLElBQUlGLEdBQUdFLE1BQUgsQ0FBVTZCLFFBQWQsQ0FBdUI7QUFDM0JDLHlDQUFTQyxVQUFVQyxTQUFWLEdBQXNCRCxVQUFVQyxTQUFWLENBQW9CLENBQXBCLENBQXRCLEdBQWdERCxVQUFVRSxRQUFWLElBQXNCRixVQUFVRyxZQUQ5RDtBQUUzQkMscUNBQUswZ0UsbUJBQW1CSSxNQUZHO0FBRzNCN2dFLDRDQUFZeWdFLG1CQUFtQjFqRTtBQUhKLDZCQUF2QjtBQURxQix5QkFBbEIsQ0FBZjtBQU9ILHFCQVJELE1BUU87QUFDSC9CLGdDQUFRQyxJQUFSLENBQWEsd0NBQWI7QUFDSDtBQUNEO0FBQ0oscUJBQUssS0FBTDtBQUNJMmxFLG1DQUFlLElBQUlsakUsR0FBR2YsS0FBSCxDQUFTZ0IsSUFBYixDQUFrQjtBQUM3QkMsZ0NBQVEsSUFBSUYsR0FBR0UsTUFBSCxDQUFVc0MsT0FBZCxDQUFzQjtBQUMxQjFDLGlDQUFLaWpFLG1CQUFtQmpqRSxHQURFO0FBRTFCMkMsb0NBQVE7QUFDSkMsd0NBQVFxZ0UsbUJBQW1CdGdFLE1BQW5CLENBQTBCRSxNQUQ5QjtBQUVKQyx5Q0FBU21nRSxtQkFBbUJ0Z0UsTUFBbkIsQ0FBMEJJLE9BRi9CO0FBR0o7QUFDQUMsNkNBQWFpZ0UsbUJBQW1CdGdFLE1BQW5CLENBQTBCTTtBQUpuQyw2QkFGa0I7QUFRMUJDLG9DQUFRKy9ELG1CQUFtQi8vRCxNQVJEO0FBUzFCQywwQ0FBYzgvRCxtQkFBbUI3L0QsV0FBbkIsR0FBaUMsR0FBakMsR0FBdUNsRCxHQUFHRSxNQUFILENBQVVLLEdBQVYsQ0FBYzRDO0FBVHpDLHlCQUF0QjtBQVdSO0FBWjZCLHFCQUFsQixDQUFmO0FBY0E7QUFDSixxQkFBSyxLQUFMO0FBQ0krL0QsbUNBQWUsSUFBSWxqRSxHQUFHZixLQUFILENBQVNnQixJQUFiLENBQWtCO0FBQzdCQyxnQ0FBUSxJQUFJRixHQUFHRSxNQUFILENBQVVDLEdBQWQsQ0FBa0I7QUFDdEJMLGlDQUFLaWpFLG1CQUFtQmpqRSxHQUFuQixHQUF5QmlqRSxtQkFBbUJuaUUsTUFBNUMsR0FBcUQsb0JBQXJELEdBQTRFbWlFLG1CQUFtQnBpRSxPQUQ5RTtBQUV0QnNDLDBDQUFjOC9ELG1CQUFtQjcvRCxXQUFuQixHQUFpQyxHQUFqQyxHQUF1Q2xELEdBQUdFLE1BQUgsQ0FBVUssR0FBVixDQUFjNEM7QUFGN0MseUJBQWxCO0FBSVI7QUFMNkIscUJBQWxCLENBQWY7QUFPQTtBQUNKO0FBQ0k3Riw0QkFBUUMsSUFBUixDQUFhLHNCQUFiO0FBQ0E7QUEvRlI7QUFpR0EybEUseUJBQWFFLFVBQWIsQ0FBd0JsbEUsU0FBUzZrRSxtQkFBbUIzakQsT0FBNUIsSUFBcUMsR0FBN0Q7QUFDQSxpQkFBS3JnQixXQUFMLENBQWlCdTlDLFNBQWpCLEVBQTRCcjlDLEtBQTVCLEdBQW9DaWtFLFlBQXBDO0FBQ0EsbUJBQU8sS0FBS25rRSxXQUFMLENBQWlCdTlDLFNBQWpCLEVBQTRCcjlDLEtBQW5DO0FBQ0g7QUExSEw7O0FBQUE7QUFBQSxJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNITyxJQUFNRCxVQUFiO0FBRUksd0JBQVlxa0UsVUFBWixFQUF3QjltRSxhQUF4QixFQUFzQztBQUFBOztBQUNsQyxhQUFLK0IsRUFBTCxHQUFxQitrRSxXQUFXLElBQVgsQ0FBckI7QUFDQSxhQUFLbjdELEdBQUwsR0FBcUJtN0QsV0FBVyxLQUFYLENBQXJCO0FBQ0EsYUFBS2xsRSxJQUFMLEdBQXFCa2xFLFdBQVcsTUFBWCxDQUFyQjtBQUNBLGFBQUtqa0UsUUFBTCxHQUFxQmlrRSxXQUFXLFVBQVgsQ0FBckI7QUFDQSxhQUFLaGtFLEtBQUwsR0FBcUJna0UsV0FBVyxPQUFYLENBQXJCO0FBQ0EsYUFBS3ZqRSxHQUFMLEdBQXFCdWpFLFdBQVcsS0FBWCxDQUFyQjtBQUNBLGFBQUt0akUsSUFBTCxHQUFxQnNqRSxXQUFXLE1BQVgsQ0FBckI7QUFDQSxhQUFLamtELE9BQUwsR0FBcUJpa0QsV0FBVyxTQUFYLENBQXJCO0FBQ0EsYUFBS25nRSxXQUFMLEdBQXFCbWdFLFdBQVcsYUFBWCxDQUFyQjtBQUNBLGFBQUtyZ0UsTUFBTCxHQUFxQnFnRSxXQUFXLFFBQVgsQ0FBckI7QUFDQSxhQUFLNWdFLE1BQUwsR0FBcUI0Z0UsV0FBVyxRQUFYLENBQXJCO0FBQ0EsYUFBS3BrRSxLQUFMLEdBQXFCLEtBQXJCO0FBQ0EsYUFBS29rRSxVQUFMLEdBQXFCQSxVQUFyQjtBQUNBLGFBQUs5bUUsYUFBTCxHQUF3QkEsYUFBeEI7QUFDSDs7QUFqQkw7QUFBQTtBQUFBLHNDQXFCa0JrVCxLQXJCbEIsRUFxQndCO0FBQ2hCLGdCQUFJeFEsS0FBSjs7QUFFQUEsb0JBQVEsS0FBS0EsS0FBYjtBQUNBLGdCQUFJQSxLQUFKLEVBQVc7QUFDUCxxQkFBSzFDLGFBQUwsQ0FBbUJvSCxHQUFuQixDQUF1QjhVLFdBQXZCLENBQW1DeFosS0FBbkM7QUFDQUEsc0JBQU1ta0UsVUFBTixDQUFpQjN6RCxRQUFNLEdBQXZCO0FBQ0EscUJBQUtsVCxhQUFMLENBQW1Cb0gsR0FBbkIsQ0FBdUIrVCxRQUF2QixDQUFnQ3pZLEtBQWhDO0FBQ0g7QUFDSjtBQTlCTDs7QUFBQTtBQUFBLEkiLCJmaWxlIjoiYzRnLW1hcHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvYnVpbGQvXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtbWFpbi5qc1wiKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBiYjk3NzAzOTlhZDI2MDAwOTA3OCIsImltcG9ydCB7QzRnQmFzZWxheWVyfSBmcm9tIFwiLi9jNGctYmFzZWxheWVyXCI7XG5pbXBvcnQge0M0Z092ZXJsYXl9IGZyb20gXCIuL2M0Zy1vdmVybGF5XCI7XG5pbXBvcnQge2NvbmZpZ30gZnJvbSBcIi4vYzRnLW1hcHMtY29uZmlnXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcblxuZXhwb3J0IGNsYXNzIEM0Z0Jhc2VsYXllckNvbnRyb2xsZXIge1xuICAgIGNvbnN0cnVjdG9yKHByb3h5KSB7XG4gICAgICAgIHRoaXMucHJveHkgPSBwcm94eTtcbiAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyID0gcHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyO1xuICAgICAgICB0aGlzLmFyckJhc2VsYXllcnMgPSB7fTtcbiAgICAgICAgdGhpcy5iYXNlbGF5ZXJJZHMgPSBbXTtcbiAgICB9XG5cbiAgICBsb2FkQmFzZUxheWVycygpIHtcbiAgICAgICAgdmFyIHNlbGY7XG5cbiAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgalF1ZXJ5LmFqYXgodGhpcy5wcm94eS5hcGlfYmFzZWxheWVyX3VybCx7XG4gICAgICAgICAgICBkYXRhVHlwZTogdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuanNvbnAgPyBcImpzb25wXCIgOiBcImpzb25cIlxuICAgICAgICB9KVxuICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5iYXNlbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRCYXNlTGF5ZXJzKGRhdGEuYmFzZWxheWVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIEBUT0RPIGVycm9yLW1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgLy8gICAxKSBWaXNpYmxlIG1lc3NhZ2UgNCB1c2VycyAoaTE4bilcbiAgICAgICAgICAgICAgICAvLyAgIDIpIFRlY2huaWNhbCBjb25zb2xlLndhcm5cbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0FuIGVycm9yIG9jY3VyZWQgd2hpbGUgdHJ5aW5nIHRvIGxvYWQgdGhlIGJhc2VsYXllcnMuIERvIHlvdSBoYXZlIGNvbmZpZ3VyZWQgYSBkZWZhdWx0IHByb2ZpbGUgd2l0aCBiYXNlbGF5ZXJzPycpO1xuICAgICAgICAgICAgICAgIHNlbGYubWFwQ29udHJvbGxlci5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy9zZWxmLm1hcENvbnRyb2xsZXIuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgIH0vLyBlbmQgb2YgXCJsb2FkQmFzZUxheWVycygpXCJcblxuICAgIGFkZEJhc2VMYXllcnMoYmFzZWxheWVycykge1xuICAgICAgICB2YXIgYmFzZWxheWVyLFxuICAgICAgICAgICAgdWlkLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGo7XG5cbiAgICAgICAgLy8gc29ydCBiYXNlbGF5ZXIgKGZvciBpbnRlcm5hbCBsaXN0KVxuICAgICAgICBiYXNlbGF5ZXJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIGlmICgoIWEuc29ydCAmJiAhYi5zb3J0KSB8fCAocGFyc2VJbnQoYS5zb3J0LCAxMCkgPT09IHBhcnNlSW50KGIuc29ydCwgMTApKSkge1xuICAgICAgICAgICAgICAgIGlmICghYS5uYW1lIHx8ICFiLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICghYi5uYW1lKSA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhLm5hbWUudG9Mb3dlckNhc2UoKSA+IGIubmFtZS50b0xvd2VyQ2FzZSgpKSA/IDEgOiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYS5zb3J0IHx8ICFiLnNvcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCFiLnNvcnQpID8gLTEgOiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChwYXJzZUludChhLnNvcnQsIDEwKSA+IHBhcnNlSW50KGIuc29ydCwgMTApKSA/IDEgOiAtMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYnVpbGQgYmFzZWxheWVyLWxpc3RcbiAgICAgICAgaWYgKGJhc2VsYXllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGJhc2VsYXllcnMubGVuZ3RoOyBpICs9IDEpIHtcblxuICAgICAgICAgICAgICAgIGJhc2VsYXllciA9IGJhc2VsYXllcnNbaV07XG5cbiAgICAgICAgICAgICAgICB1aWQgPSBiYXNlbGF5ZXIuaWQgfHwgdXRpbHMuZ2V0VW5pcXVlSWQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2VsYXllcklkcy5wdXNoKHVpZCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFyckJhc2VsYXllcnNbdWlkXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFyckJhc2VsYXllcnNbdWlkXSA9IG5ldyBDNGdCYXNlbGF5ZXIoYmFzZWxheWVyLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBAVE9ETzogY2hlY2sgaW5pdGlhbCBiYXNlbGF5ZXItaGFuZGxpbmdcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYmFzZWxheWVyICYmIHBhcnNlSW50KHVpZCwgMTApID09PSBwYXJzZUludCh0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5iYXNlbGF5ZXIsIDEwKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dCYXNlTGF5ZXIodWlkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZih0aGlzLmFyckJhc2VsYXllcnNbdWlkXS5oYXNPdmVybGF5cyl7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGo8IHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5c1t0aGlzLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5c1tqXS5pZF0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW3RoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLmlkXSA9IG5ldyBDNGdPdmVybGF5KHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLCB0aGlzLm1hcENvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW3RoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlzW2pdLmlkXS5sYXllciA9IHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLnNob3dPdmVybGF5TGF5ZXIodGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXNbal0uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZUJhc2VsYXllcklkKSB7XG4gICAgICAgICAgICAvLyBubyBiYXNlbGF5ZXIgd2FzIGFjdGl2YXRlZFxuICAgICAgICAgICAgaWYgKGJhc2VsYXllcnMubGVuZ3RoID4gMCAmJiBiYXNlbGF5ZXJzWzBdLmlkKSB7XG4gICAgICAgICAgICAgICAgLy8gdGFrZSBmaXJzdCBiYXNlbGF5ZXIgaWYgcG9zc2libGVcbiAgICAgICAgICAgICAgICB1aWQgPSBiYXNlbGF5ZXJzWzBdLmlkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgYnVpbGQgZGVmYXVsdCBiYXNlbGF5ZXJcbiAgICAgICAgICAgICAgICB1aWQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZWxheWVySWRzLnB1c2godWlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYXJyQmFzZWxheWVyc1t1aWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXJyQmFzZWxheWVyc1t1aWRdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYzRnX2RlZmF1bHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6ICdvc20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdNYXBuaWsnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zaG93QmFzZUxheWVyKHVpZCk7XG5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb3h5LmJhc2VsYXllcnNfbG9hZGVkID0gdHJ1ZTtcblxuICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh0aGlzLnByb3h5Lmhvb2tfYmFzZWxheWVyX2xvYWRlZCwgdGhpcy5iYXNlbGF5ZXJJZHMpO1xuICAgIH0gLy8gZW5kIG9mIFwiYWRkQmFzZUxheWVycygpXCJcbiAgICBjcmVhdGVCYXNlTGF5ZXIobGF5ZXJPcHRpb25zLCBiYXNlTGF5ZXJDb25maWcsIHNvdXJjZUNvbmZpZ3Mpe1xuICAgICAgICB2YXIgbmV3QmFzZWxheWVyO1xuICAgICAgICBsYXllck9wdGlvbnMgPSBsYXllck9wdGlvbnMgfHwge307XG4gICAgICAgIHN3aXRjaCAoYmFzZUxheWVyQ29uZmlnLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjYXNlICdjdXN0b20nOlxuICAgICAgICAgICAgICAvLyBjdXN0b21cbiAgICAgICAgICAgICAgbGV0IG5vVXJsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy51cmwpIHtcbiAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybDtcbiAgICAgICAgICAgICAgICBub1VybCA9IGZhbHNlO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJhc2VMYXllckNvbmZpZy51cmxzKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybHMgPSBiYXNlTGF5ZXJDb25maWcudXJscztcbiAgICAgICAgICAgICAgICBub1VybCA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghbm9VcmwpIHtcbiAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKGxheWVyT3B0aW9ucyksXG4gICAgICAgICAgICAgICAgICBleHRlbnQ6IGJhc2VMYXllckNvbmZpZy5leHRlbmRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2N1c3RvbSB1cmwocykgbWlzc2luZyAtPiBzd2l0Y2ggdG8gZGVmYXVsdCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdvc20nOlxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VDb25maWdzLm9zbVtiYXNlTGF5ZXJDb25maWcuc3R5bGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5PU00oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3Mub3NtW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VDb25maWdzLnN0YW1lbltiYXNlTGF5ZXJDb25maWcuc3R5bGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN0YW1lblxuICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuU3RhbWVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb25maWdzLnN0YW1lbltiYXNlTGF5ZXJDb25maWcuc3R5bGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2UgaWYgKG1hcFF1ZXN0U291cmNlQ29uZmlnc1tiYXNlTGF5ZXJDb25maWcuc3R5bGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgLy8gbWFwUXVlc3RcbiAgICAgICAgICAgICAgICAgICAgLy8gICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuTWFwUXVlc3QobWFwUXVlc3RTb3VyY2VDb25maWdzW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0pXG4gICAgICAgICAgICAgICAgICAgIC8vICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUgPT09ICdvc21fY3VzdG9tJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXN0b21cbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vVXJsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy51cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBiYXNlTGF5ZXJDb25maWcudXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9VcmwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChiYXNlTGF5ZXJDb25maWcudXJscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybHMgPSBiYXNlTGF5ZXJDb25maWcudXJscztcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vVXJsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub1VybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5YWVoobGF5ZXJPcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2N1c3RvbSB1cmwocykgbWlzc2luZyAtPiBzd2l0Y2ggdG8gZGVmYXVsdCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd1bnN1cHBvcnRlZCBvc20tc3R5bGUgLT4gc3dpdGNoIHRvIGRlZmF1bHQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtYXBib3gnOlxuICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuYXBpX2tleSAmJiBiYXNlTGF5ZXJDb25maWcuYXBwX2lkICYmIGJhc2VMYXllckNvbmZpZy5tYXBib3hfdHlwZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcubWFwYm94X3R5cGUgPT09ICdNYXBib3gnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybCArIGJhc2VMYXllckNvbmZpZy5hcHBfaWQgKyAnL3RpbGVzL3t6fS97eH0ve3l9P2FjY2Vzc190b2tlbj0nICsgYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlhZWihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV4dGVuZChzb3VyY2VDb25maWdzLm1hcGJveFtiYXNlTGF5ZXJDb25maWcubWFwYm94X3R5cGVdLCBsYXllck9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybF9jbGFzc2ljICsgYmFzZUxheWVyQ29uZmlnLmFwcF9pZCArICcve3p9L3t4fS97eX0ucG5nP2FjY2Vzc190b2tlbj0nICsgYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MubWFwYm94W2Jhc2VMYXllckNvbmZpZy5tYXBib3hfdHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNlIGlmKGJhc2VMYXllckNvbmZpZy5oaWRlX2luX2JlKXtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IFwiY29uNGdpcy9iYXNlTGF5ZXJUaWxlU2VydmljZS9cIiArIGJhc2VMYXllckNvbmZpZy5pZCArIFwiL3t6fS97eH0ve3l9XCI7XG4gICAgICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5YWVooJC5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5tYXBib3hbYmFzZUxheWVyQ29uZmlnLm1hcGJveF90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignd3JvbmcgbWFwYm94IGNvbmZpZ3VyYXRpb24hJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAna2xva2FuJzpcbiAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmFwaV9rZXkgJiYgYmFzZUxheWVyQ29uZmlnLmtsb2thbl90eXBlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5rbG9rYW5fdHlwZSA9PT0gJ09wZW5NYXBUaWxlcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBiYXNlTGF5ZXJDb25maWcudXJsICsgJ3t6fS97eH0ve3l9LnBiZic7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvclRpbGUoalF1ZXJ5LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5rbG9rYW5bYmFzZUxheWVyQ29uZmlnLmtsb2thbl90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1RvRG8gc3R5bGUgdXJsXG4gICAgICAgICAgICAgICAgICAgICAgICBmZXRjaChiYXNlTGF5ZXJDb25maWcudXJsICsgJy9zdHlsZXMvJytiYXNlTGF5ZXJDb25maWcuc3R5bGUrJy9zdHlsZS5qc29uJykudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKGZ1bmN0aW9uKGdsU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xtcy5hcHBseVN0eWxlKG5ld0Jhc2VsYXllciwgZ2xTdHlsZSwgJ29wZW5tYXB0aWxlcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybCArICcvZGF0YS92My97en0ve3h9L3t5fS5wYmY/a2V5PScrYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvclRpbGUoalF1ZXJ5LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5rbG9rYW5bYmFzZUxheWVyQ29uZmlnLmtsb2thbl90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmZXRjaChiYXNlTGF5ZXJDb25maWcudXJsICsgJy9zdHlsZXMvJytiYXNlTGF5ZXJDb25maWcuc3R5bGUrJy9zdHlsZS5qc29uP2tleT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4oZnVuY3Rpb24oZ2xTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbG1zLmFwcGx5U3R5bGUobmV3QmFzZWxheWVyLCBnbFN0eWxlLCAnb3Blbm1hcHRpbGVzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignd3Jvbmcga2xva2FuIGNvbmZpZ3VyYXRpb24hJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaGVyZSc6XG4gICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5hcGlfa2V5ICYmIGJhc2VMYXllckNvbmZpZy5hcHBfaWQgJiYgYmFzZUxheWVyQ29uZmlnLmhlcmVfdHlwZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUgPT0gJ25vcm1hbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5iYXNlLm1hcHMuY2l0LmFwaS5oZXJlLmNvbS9tYXB0aWxlLzIuMS9tYXB0aWxlL25ld2VzdC9ub3JtYWwuZGF5L3t6fS97eH0ve3l9LzI1Ni9wbmcnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnP2FwcF9pZD0nK2Jhc2VMYXllckNvbmZpZy5hcHBfaWQrJyZhcHBfY29kZT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSA9PSAndHJhbnNpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5iYXNlLm1hcHMuY2l0LmFwaS5oZXJlLmNvbS9tYXB0aWxlLzIuMS9tYXB0aWxlL25ld2VzdC9ub3JtYWwuZGF5LnRyYW5zaXQve3p9L3t4fS97eX0vMjU2L3BuZycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc/YXBwX2lkPScrYmFzZUxheWVyQ29uZmlnLmFwcF9pZCsnJmFwcF9jb2RlPScrYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLnN0eWxlID09ICdwZWRlc3RyaWFuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9ICdodHRwczovL3sxLTR9LmJhc2UubWFwcy5jaXQuYXBpLmhlcmUuY29tL21hcHRpbGUvMi4xL21hcHRpbGUvbmV3ZXN0L3BlZGVzdHJpYW4uZGF5L3t6fS97eH0ve3l9LzI1Ni9wbmcnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnP2FwcF9pZD0nK2Jhc2VMYXllckNvbmZpZy5hcHBfaWQrJyZhcHBfY29kZT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSA9PSAndGVycmFpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5hZXJpYWwubWFwcy5jaXQuYXBpLmhlcmUuY29tL21hcHRpbGUvMi4xL21hcHRpbGUvbmV3ZXN0L3RlcnJhaW4uZGF5L3t6fS97eH0ve3l9LzI1Ni9wbmcnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnP2FwcF9pZD0nK2Jhc2VMYXllckNvbmZpZy5hcHBfaWQrJyZhcHBfY29kZT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSA9PSAnc2F0ZWxsaXRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9ICdodHRwczovL3sxLTR9LmFlcmlhbC5tYXBzLmNpdC5hcGkuaGVyZS5jb20vbWFwdGlsZS8yLjEvbWFwdGlsZS9uZXdlc3Qvc2F0ZWxsaXRlLmRheS97en0ve3h9L3t5fS8yNTYvcG5nJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJz9hcHBfaWQ9JytiYXNlTGF5ZXJDb25maWcuYXBwX2lkKycmYXBwX2NvZGU9JytiYXNlTGF5ZXJDb25maWcuYXBpX2tleTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUgPT0gJ2h5YnJpZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5hZXJpYWwubWFwcy5jaXQuYXBpLmhlcmUuY29tL21hcHRpbGUvMi4xL21hcHRpbGUvbmV3ZXN0L2h5YnJpZC5kYXkve3p9L3t4fS97eX0vMjU2L3BuZycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc/YXBwX2lkPScrYmFzZUxheWVyQ29uZmlnLmFwcF9pZCsnJmFwcF9jb2RlPScrYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKCQuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MuaGVyZVtiYXNlTGF5ZXJDb25maWcuaGVyZV90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihiYXNlTGF5ZXJDb25maWcuaGlkZV9pbl9iZSl7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBsYXllck9wdGlvbnMudXJsID0gXCJjb240Z2lzL2Jhc2VMYXllclRpbGVTZXJ2aWNlL1wiICsgYmFzZUxheWVyQ29uZmlnLmlkICsgXCIve3p9L3t4fS97eX1cIjtcbiAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlhZWigkLmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb25maWdzLm1hcGJveFtiYXNlTGF5ZXJDb25maWcuaGVyZV90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignd3JvbmcgSEVSRSBjb25maWd1cmF0aW9uIScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RodW5kZXInOlxuICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuYXBpX2tleSAmJiBiYXNlTGF5ZXJDb25maWcudGh1bmRlcmZvcmVzdF90eXBlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IFwiaHR0cHM6Ly90aWxlLnRodW5kZXJmb3Jlc3QuY29tL1wiK2Jhc2VMYXllckNvbmZpZy5zdHlsZStcIi97en0ve3h9L3t5fS5wbmc/YXBpa2V5PVwiK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLlhZWihqUXVlcnkuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MudGh1bmRlcmZvcmVzdFtiYXNlTGF5ZXJDb25maWcudGh1bmRlcmZvcmVzdF90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihiYXNlTGF5ZXJDb25maWcuaGlkZV9pbl9iZSl7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBcImNvbjRnaXMvYmFzZUxheWVyVGlsZVNlcnZpY2UvXCIgKyBiYXNlTGF5ZXJDb25maWcuaWQgKyBcIi97en0ve3h9L3t5fVwiO1xuICAgICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5tYXBib3hbYmFzZUxheWVyQ29uZmlnLnRodW5kZXJmb3Jlc3RfdHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3dyb25nIFRodW5kZXJmb3Jlc3QgY29uZmlndXJhdGlvbiEnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdnb29nbGUnOlxuICAgICAgICAgICAgICAgIC8vQHRvZG9cbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2dvb2dsZS1tYXBzIGFyZSBjdXJyZW50bHkgdW5zdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JpbmcnOlxuICAgICAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuYXBpX2tleSAmJiBiYXNlTGF5ZXJDb25maWcuc3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLkJpbmdNYXBzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdWx0dXJlOiBuYXZpZ2F0b3IubGFuZ3VhZ2VzID8gbmF2aWdhdG9yLmxhbmd1YWdlc1swXSA6IChuYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLnVzZXJMYW5ndWFnZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBiYXNlTGF5ZXJDb25maWcuYXBpX2tleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZXJ5U2V0OiBiYXNlTGF5ZXJDb25maWcuc3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignd3JvbmcgYmluZy1rZXkgb3IgaW52YWxpZCBpbWFnZXJ5LXNldCEnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3bXMnOlxuICAgICAgICAgICAgICAgIGlmKGJhc2VMYXllckNvbmZpZy51cmwuaW5kZXhPZignaHR0cHMnKSAhPT0gLTEpe1xuICAgICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuVGlsZVdNUyh7XG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiBiYXNlTGF5ZXJDb25maWcudXJsLFxuICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgTEFZRVJTOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLmxheWVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFZFUlNJT046IGJhc2VMYXllckNvbmZpZy5wYXJhbXMudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vRk9STUFUOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFRSQU5TUEFSRU5UOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLnRyYW5zcGFyZW50XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBndXR0ZXI6IGJhc2VMYXllckNvbmZpZy5ndXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRpb25zOiBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgICAgICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJ1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgLy9leHRlbnQ6IG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KFs1LjU5MzM0LCA1MC4wNTc4LCA5Ljc0MTU4LCA1Mi43OTk4XSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5UaWxlV01TKHtcbiAgICAgICAgICAgICAgICAgICAgICB1cmw6IGJhc2VMYXllckNvbmZpZy51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMQVlFUlM6IGJhc2VMYXllckNvbmZpZy5wYXJhbXMubGF5ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgVkVSU0lPTjogYmFzZUxheWVyQ29uZmlnLnBhcmFtcy52ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy9GT1JNQVQ6IGJhc2VMYXllckNvbmZpZy5wYXJhbXMuZm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgVFJBTlNQQVJFTlQ6IGJhc2VMYXllckNvbmZpZy5wYXJhbXMudHJhbnNwYXJlbnRcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGd1dHRlcjogYmFzZUxheWVyQ29uZmlnLmd1dHRlcixcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGlvbnM6IGJhc2VMYXllckNvbmZpZy5hdHRyaWJ1dGlvbiArICcgJyArIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAvL2V4dGVudDogb2wucHJvai50cmFuc2Zvcm1FeHRlbnQoWzUuNTkzMzQsIDUwLjA1NzgsIDkuNzQxNTgsIDUyLjc5OThdLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ293bSc6XG4gICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYmFzZUxheWVyQ29uZmlnLnVybCArIGJhc2VMYXllckNvbmZpZy5hcHBfaWQgKyAnL3t6fS97eH0ve3l9P2hhc2g9JyArIGJhc2VMYXllckNvbmZpZy5hcGlfa2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRpb25zOiBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAvL2V4dGVudDogb2wucHJvai50cmFuc2Zvcm1FeHRlbnQoWzUuNTkzMzQsIDUwLjA1NzgsIDkuNzQxNTgsIDUyLjc5OThdLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdncm91cCc6XG4gICAgICAgICAgICAgICAgbGV0IGJhc2VMYXllckdyb3VwID0gW107XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpbmRleCBpbiBiYXNlTGF5ZXJDb25maWdbJ2xheWVyR3JvdXAnXSl7XG4gICAgICAgICAgICAgICAgICBpZihiYXNlTGF5ZXJDb25maWdbJ2xheWVyR3JvdXAnXS5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgZWxlbWVudCA9IHRoaXMuY3JlYXRlQmFzZUxheWVyKG51bGwsIGJhc2VMYXllckNvbmZpZ1snbGF5ZXJHcm91cCddW2luZGV4XSwgc291cmNlQ29uZmlncyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXhab29tID0gdGhpcy5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uRm9yWm9vbShiYXNlTGF5ZXJDb25maWdbJ2xheWVyR3JvdXAnXVtpbmRleF1bJ21pblpvb20nXSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtaW5ab29tID0gdGhpcy5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uRm9yWm9vbShiYXNlTGF5ZXJDb25maWdbJ2xheWVyR3JvdXAnXVtpbmRleF1bJ21heFpvb20nXSk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0TWluUmVzb2x1dGlvbihtaW5ab29tKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRNYXhSZXNvbHV0aW9uKG1heFpvb20pO1xuICAgICAgICAgICAgICAgICAgICBiYXNlTGF5ZXJHcm91cC5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgb2wubGF5ZXIuR3JvdXAoe1xuICAgICAgICAgICAgICAgICAgICBsYXllcnM6IGJhc2VMYXllckdyb3VwXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3Vuc3VwcG9ydGVkIHByb3ZpZGVyJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0Jhc2VsYXllcjtcblxuICAgIH1cbiAgICBzaG93QmFzZUxheWVyKGJhc2VMYXllclVpZCkge1xuXG4gICAgICAgIGxldCBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgIGxheWVycyxcbiAgICAgICAgICAgIGJhc2VsYXllcixcbiAgICAgICAgICAgIGFkZEJhc2VsYXllcixcbiAgICAgICAgICAgIGJhc2VMYXllcnMsXG4gICAgICAgICAgICBzb3VyY2VDb25maWdzID0gW10sXG4gICAgICAgICAgICBuZXdCYXNlbGF5ZXIsXG4gICAgICAgICAgICBsYXllck9wdGlvbnMsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgdmlldztcblxuICAgICAgICBsZXQgYmFzZUxheWVyQ29uZmlnID0gdGhpcy5hcnJCYXNlbGF5ZXJzW2Jhc2VMYXllclVpZF07XG5cblxuICAgICAgICBpZiAoKHR5cGVvZiBiYXNlTGF5ZXJDb25maWcgIT09IFwidW5kZWZpbmVkXCIpICYmICFiYXNlTGF5ZXJDb25maWcubGF5ZXIpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBsYXllclxuICAgICAgICAgICAgc291cmNlQ29uZmlncy5vc20gPSBjb25maWcub3NtO1xuICAgICAgICAgICAgc291cmNlQ29uZmlncy5zdGFtZW4gPSBjb25maWcuc3RhbWVuO1xuICAgICAgICAgICAgLy9tYXBRdWVzdFNvdXJjZUNvbmZpZ3MgPSBjNGcubWFwcy5jb25maWcubWFwcXVlc3Q7XG4gICAgICAgICAgICBzb3VyY2VDb25maWdzLm1hcGJveCA9IGNvbmZpZy5tYXBib3g7XG4gICAgICAgICAgICBzb3VyY2VDb25maWdzLmtsb2thbiA9IGNvbmZpZy5rbG9rYW47XG4gICAgICAgICAgICBzb3VyY2VDb25maWdzLmhlcmUgPSBjb25maWcuaGVyZTtcbiAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MudGh1bmRlcmZvcmVzdCA9IGNvbmZpZy50aHVuZGVyZm9yZXN0O1xuXG4gICAgICAgICAgICAvL25ld0Jhc2VsYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgIC8vICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuT1NNKClcbiAgICAgICAgICAgIC8vfSk7XG5cbiAgICAgICAgICAgIGxheWVyT3B0aW9ucyA9IHt9O1xuXG4gICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgKyAnICcgKyBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb247XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04gKyAnICcgKyBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoYmFzZUxheWVyQ29uZmlnLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ29zbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlQ29uZmlncy5zdGFtZW5bYmFzZUxheWVyQ29uZmlnLnN0eWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBzb3VyY2VDb25maWdzLnN0YW1lbltiYXNlTGF5ZXJDb25maWcuc3R5bGVdLmF0dHJpYnV0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXBRdWVzdFNvdXJjZUNvbmZpZ3NbYmFzZUxheWVyQ29uZmlnLnN0eWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gbWFwUXVlc3RTb3VyY2VDb25maWdzW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0uYXR0cmlidXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZUNvbmZpZ3Mub3NtW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gc291cmNlQ29uZmlncy5vc21bYmFzZUxheWVyQ29uZmlnLnN0eWxlXS5hdHRyaWJ1dGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hcGJveCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gc291cmNlQ29uZmlncy5tYXBib3hbYmFzZUxheWVyQ29uZmlnLm1hcGJveF90eXBlXS5hdHRyaWJ1dGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAna2xva2FuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBzb3VyY2VDb25maWdzLmtsb2thbltiYXNlTGF5ZXJDb25maWcua2xva2FuX3R5cGVdLmF0dHJpYnV0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdoZXJlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBzb3VyY2VDb25maWdzLmhlcmVbYmFzZUxheWVyQ29uZmlnLmhlcmVfdHlwZV0uYXR0cmlidXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RodW5kZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IHNvdXJjZUNvbmZpZ3MudGh1bmRlcmZvcmVzdFtiYXNlTGF5ZXJDb25maWcudGh1bmRlcmZvcmVzdF90eXBlXS5hdHRyaWJ1dGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL1RvRG8gaGVscGVyIGNsYXNzIGZvciBhdHRyaWJ1dGlvbnNcblxuICAgICAgICAgICAgLy9hZGRpdGlvbmFsIGF0dHJpYnV0aW9uXG4gICAgICAgICAgICBpZiAodGhpcy5tYXBDb250cm9sbGVyLmRhdGEgJiYgdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYXR0cmlidXRpb24gJiYgdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYXR0cmlidXRpb24uYWRkaXRpb25hbCkge1xuICAgICAgICAgICAgICAgIGlmIChsYXllck9wdGlvbnMuYXR0cmlidXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhZGRpdGlvbmFsQXR0cmlidXRpb24gPSB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5hdHRyaWJ1dGlvbi5hZGRpdGlvbmFsO1xuXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnNbaV0gPT0gYWRkaXRpb25hbEF0dHJpYnV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyArICcgJyArIGFkZGl0aW9uYWxBdHRyaWJ1dGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5hdHRyaWJ1dGlvbi5hZGRpdGlvbmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9Ub0RvIHR5cGUgY2xhc3MgZm9yIGdlb3NlYXJjaF9lbmdpbmVcbiAgICAgICAgICAgIC8vZ2Vvc2VhcmNoIGF0dHJpYnV0aW9uXG4gICAgICAgICAgICB2YXIgZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uID0gJyc7XG4gICAgICAgICAgICBpZiAodGhpcy5tYXBDb250cm9sbGVyLmRhdGEuZ2Vvc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdlb3NlYXJjaF9lbmdpbmUgPSB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5nZW9zZWFyY2guZ2Vvc2VhcmNoX2VuZ2luZTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hcENvbnRyb2xsZXIuZGF0YSAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5hdHRyaWJ1dGlvbikge1xuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZ2Vvc2VhcmNoX2VuZ2luZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnNCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uID0gJyc7IC8vY29uNGdpcyBtYXBzZXJ2aWNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmdlb3NlYXJjaC5jdXN0b21fYXR0cmlidXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuZ2Vvc2VhcmNoLmN1c3RvbV9hdHRyaWJ1dGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9zZWFyY2hfYXR0cmlidXRpb24gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTm9taW5hdGltIFNlYXJjaCBDb3VydGVzeSBvZiA8YSBocmVmPVwiaHR0cDovL3d3dy5tYXBxdWVzdC5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+TWFwUXVlc3Q8L2E+IDxpbWcgc3JjPVwiaHR0cDovL2RldmVsb3Blci5tYXBxdWVzdC5jb20vY29udGVudC9vc20vbXFfbG9nby5wbmdcIiBhbHQ9XCJcIiAvPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vbWluYXRpbSBTZWFyY2ggQ291cnRlc3kgb2YgPGEgaHJlZj1cImh0dHA6Ly93aWtpLm9wZW5zdHJlZXRtYXAub3JnL3dpa2kvTm9taW5hdGltX3VzYWdlX3BvbGljeVwiIHRhcmdldD1cIl9ibGFua1wiPk9wZW5TdHJlZXRNYXA8L2E+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGdlb3NlYXJjaEF0dHJpYnV0aW9uID0gZ2Vvc2VhcmNoX2F0dHJpYnV0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBleGlzdHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsYXllck9wdGlvbnMuYXR0cmlidXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllck9wdGlvbnMuYXR0cmlidXRpb25zW2ldID09IGdlb3NlYXJjaEF0dHJpYnV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyArICcgJyArIGdlb3NlYXJjaEF0dHJpYnV0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IGdlb3NlYXJjaEF0dHJpYnV0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLnNvcnRpbmcpIHtcbiAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuc29ydCA9IGJhc2VMYXllckNvbmZpZy5zb3J0aW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5taW5ab29tICYmIGJhc2VMYXllckNvbmZpZy5taW5ab29tID49IDApIHtcbiAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMubWluWm9vbSA9IGJhc2VMYXllckNvbmZpZy5taW5ab29tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5tYXhab29tICYmIGJhc2VMYXllckNvbmZpZy5tYXhab29tID49IDApIHtcbiAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMubWF4Wm9vbSA9IGJhc2VMYXllckNvbmZpZy5tYXhab29tO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSB0aGlzLmNyZWF0ZUJhc2VMYXllcihsYXllck9wdGlvbnMsIGJhc2VMYXllckNvbmZpZywgc291cmNlQ29uZmlncyk7XG4gICAgICAgICAgICBpZihiYXNlTGF5ZXJDb25maWcuaGFzT3ZlcmxheXMpe1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGk8IGJhc2VMYXllckNvbmZpZy5vdmVybGF5cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKCFiYXNlTGF5ZXJDb25maWcub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlzW2ldLmlkXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlTGF5ZXJDb25maWcub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlzW2ldLmlkXSA9IG5ldyBDNGdPdmVybGF5KGJhc2VMYXllckNvbmZpZy5vdmVybGF5c1tpXSx0aGlzLm1hcENvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW2Jhc2VMYXllckNvbmZpZy5vdmVybGF5c1tpXS5pZF0ubGF5ZXIgPSBiYXNlTGF5ZXJDb25maWcub3ZlcmxheUNvbnRyb2xsZXIuc2hvd092ZXJsYXlMYXllcihiYXNlTGF5ZXJDb25maWcub3ZlcmxheXNbaV0uaWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgKGJhc2VMYXllckNvbmZpZy5oYXNPdmVybGF5cykge1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgICBmb3IgKGkgPSAwOyBpIDwgYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIGlmKCFjNGcubWFwcy5vdmVybGF5cyl7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBjNGcubWFwcy5vdmVybGF5cyA9IFtdO1xuICAgICAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgICAgIGM0Zy5tYXBzLm92ZXJsYXlzW2Jhc2VMYXllckNvbmZpZy5vdmVybGF5c1tpXS5pZF0gPSBiYXNlTGF5ZXJDb25maWcub3ZlcmxheXNbaV07XG4gICAgICAgICAgICAvLyAgICAgICAgIGlmKHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmJhc2VsYXllciAmJiBwYXJzZUludChiYXNlTGF5ZXJDb25maWcuaWQsIDEwKSA9PT0gcGFyc2VJbnQodGhpcy5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZCwgMTApKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBzZWxmLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKHNlbGYuc2hvd092ZXJsYXlMYXllcihiYXNlTGF5ZXJDb25maWcub3ZlcmxheXNbaV0uaWQpKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgIHRoaXMuYXJyQmFzZWxheWVyc1tiYXNlTGF5ZXJVaWRdLmxheWVyID0gbmV3QmFzZWxheWVyO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF5ZXJzID0gdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRMYXllcnMoKTtcblxuICAgICAgICAvLyBzZWN1cmVcbiAgICAgICAgaWYgKGxheWVycy5pdGVtKDApLmdldCgnY2hlY2tTdW0nKSA9PT0gXCJiYXNlTWFwc0xheWVyXCIpIHtcbiAgICAgICAgICAgIGJhc2VMYXllcnMgPSBsYXllcnMuaXRlbSgwKS5nZXRMYXllcnMoKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmFyckJhc2VsYXllcnNbYmFzZUxheWVyVWlkXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGJhc2VsYXllciA9IHRoaXMuYXJyQmFzZWxheWVyc1tiYXNlTGF5ZXJVaWRdLmxheWVyO1xuXG4gICAgICAgICAgICAgICAgaWYgKGJhc2VsYXllcikge1xuICAgICAgICAgICAgICAgICAgICBhZGRCYXNlbGF5ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBiYXNlTGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgKGVsZW1lbnQgPT09IGJhc2VsYXllcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQmFzZWxheWVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRCYXNlbGF5ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkZEJhc2VsYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUxheWVycy5wdXNoKGJhc2VsYXllcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2aWV3ID0gdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCk7XG4gICAgICAgICAgICAgICAgdmFyIHpvb20gPSB2aWV3LmdldFpvb20oKTtcbiAgICAgICAgICAgICAgICB2YXIgY2VudGVyID0gdmlldy5nZXRDZW50ZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoKGJhc2VMYXllckNvbmZpZy5taW5ab29tICYmIGJhc2VMYXllckNvbmZpZy5taW5ab29tID49IDApIHx8XG4gICAgICAgICAgICAgICAgICAgIChiYXNlTGF5ZXJDb25maWcubWF4Wm9vbSAmJiBiYXNlTGF5ZXJDb25maWcubWF4Wm9vbSA+PSAwKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLm1pblpvb20gJiYgKHZpZXcuZ2V0Wm9vbSgpIDwgYmFzZUxheWVyQ29uZmlnLm1pblpvb20pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LnNldFpvb20oYmFzZUxheWVyQ29uZmlnLm1pblpvb20pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJhc2VMYXllckNvbmZpZy5tYXhab29tICYmICh2aWV3LmdldFpvb20oKSA+IGJhc2VMYXllckNvbmZpZy5tYXhab29tKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5zZXRab29tKGJhc2VMYXllckNvbmZpZy5tYXhab29tKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXBEYXRhID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXBEYXRhLnpvb21sZXZlbCB8fCBtYXBEYXRhLm1vdXNlcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cm9sQ29udGFpbmVyVG9wTGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbENvbnRhaW5lclRvcExlZnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX1RMICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQucHJlcGVuZChjb250cm9sQ29udGFpbmVyVG9wTGVmdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX0JMICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoY29udHJvbENvbnRhaW5lclRvcExlZnQpLmFmdGVyKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5sZWZ0U2xpZGVFbGVtZW50cy5wdXNoKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1Yi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTF9DT05UQUlORVJfQkxfU1VCICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZpZXcgPSBuZXcgb2wuVmlldyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBjZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbjogdmlldy5nZXRQcm9qZWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbTogem9vbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5ab29tOiBwYXJzZUludChiYXNlTGF5ZXJDb25maWcubWluWm9vbSwgMTApIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4Wm9vbTogcGFyc2VJbnQoYmFzZUxheWVyQ29uZmlnLm1heFpvb20sIDEwKSB8fCAxOSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogdmlldy5nZXRSb3RhdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb246IHZpZXcuZ2V0UmVzb2x1dGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAuc2V0VmlldyhuZXdWaWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLnJlZHJhd01hcFZpZXcodGhpcy5tYXBDb250cm9sbGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKG1hcERhdGEuc2NhbGVsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlQ29udHJvbCh0aGlzLm1hcENvbnRyb2xsZXIuY29udHJvbHMuc2NhbGVsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnNjYWxlbGluZSA9IG5ldyBvbC5jb250cm9sLlNjYWxlTGluZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgbWFwVmlldzogdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB1bmRlZmluZWRIVE1MOiAnTi9BJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5hZGRDb250cm9sKHRoaXMubWFwQ29udHJvbGxlci5jb250cm9scy5zY2FsZWxpbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICQoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQpLmFwcGVuZChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1Yik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKG1hcERhdGEuem9vbWxldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlQ29udHJvbCh0aGlzLm1hcENvbnRyb2xsZXIuY29udHJvbHMuem9vbWxldmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnpvb21sZXZlbCA9IG5ldyBjNGcubWFwcy5jb250cm9sLlpvb21sZXZlbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgbWFwVmlldzogdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB1bmRlZmluZWRIVE1MOiAnTi9BJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5hZGRDb250cm9sKHRoaXMubWFwQ29udHJvbGxlci5jb250cm9scy56b29tbGV2ZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChtYXBEYXRhLm1vdXNlcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVDb250cm9sKHRoaXMubWFwQ29udHJvbGxlci5jb250cm9scy5tb3VzZXBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLm1vdXNlcG9zaXRpb24gPSBuZXcgb2wuY29udHJvbC5Nb3VzZVBvc2l0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBwcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBjb29yZGluYXRlRm9ybWF0OiBvbC5jb29yZGluYXRlLnRvU3RyaW5nSERNUyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHVuZGVmaW5lZEhUTUw6ICdOL0EnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmFkZENvbnRyb2wodGhpcy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLm1vdXNlcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGJhc2VMYXllckNvbmZpZyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZCA9IGJhc2VMYXllckNvbmZpZy5pZDtcblxuICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnModGhpcy5wcm94eS5ob29rX2Jhc2VsYXllcl92aXNpYmlsaXR5LCBiYXNlTGF5ZXJDb25maWcpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENlc2l1bSBpbnRlZ3JhdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJhc2VMYXllckNvbmZpZyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHZhciBtYXBEYXRhID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGE7XG4gICAgICAgICAgICAgICAgaWYgKG1hcERhdGEuY2VzaXVtICYmIG1hcERhdGEuY2VzaXVtLmVuYWJsZSAmJiAobWFwRGF0YS5jZXNpdW0uYWx3YXlzIHx8IGJhc2VMYXllckNvbmZpZy5jZXNpdW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vbDNkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9sM2QgPSBuZXcgb2xjcy5PTENlc2l1bSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiB0aGlzLm1hcENvbnRyb2xsZXIubWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVN5bmNocm9uaXplcnM6IGZhbHNlLyosXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gdGltZUVsdC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sM2QuZ2V0Q2VzaXVtU2NlbmUoKS5nbG9iZS5lbmFibGVMaWdodGluZyAmJiB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zZXRVVENIb3Vycyh2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENlc2l1bS5KdWxpYW5EYXRlLmZyb21EYXRlKGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDZXNpdW0uSnVsaWFuRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki99KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvKmNvbnN0IHNjZW5lID0gb2wzZC5nZXRDZXNpdW1TY2VuZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXJyYWluUHJvdmlkZXIgPSBuZXcgQ2VzaXVtLkNlc2l1bVRlcnJhaW5Qcm92aWRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICcvL2Fzc2V0cy5hZ2kuY29tL3N0ay10ZXJyYWluL3dvcmxkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RWZXJ0ZXhOb3JtYWxzOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzY2VuZS50ZXJyYWluUHJvdmlkZXIgPSB0ZXJyYWluUHJvdmlkZXI7Ki9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbDNkLnNldEVuYWJsZWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8qd2luZG93Wyd0b2dnbGVUaW1lJ10gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjZW5lLmdsb2JlLmVuYWJsZUxpZ2h0aW5nID0gIXNjZW5lLmdsb2JlLmVuYWJsZUxpZ2h0aW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVFbHQuc3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRWx0LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZUVsdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9OyovXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2wzZCAmJiB0aGlzLm9sM2QuZ2V0RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9sM2Quc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5yZWRyYXdNYXBWaWV3KHRoaXMubWFwQ29udHJvbGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IC8vIGVuZCBvZiBcInNob3dCYXNlTGF5ZXIoKVwiXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctYmFzZWxheWVyLWNvbnRyb2xsZXIuanMiLCJpbXBvcnQge0M0Z092ZXJsYXlDb250cm9sbGVyfSBmcm9tIFwiLi9jNGctb3ZlcmxheS1jb250cm9sbGVyXCJcblxuZXhwb3J0IGNsYXNzIEM0Z0Jhc2VsYXllcntcbiAgICBjb25zdHJ1Y3RvcihiYXNlbGF5ZXJBcnIsIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgdGhpcy5pZCA9IGJhc2VsYXllckFyclsnaWQnXTtcbiAgICAgICAgdGhpcy5waWQgPSBiYXNlbGF5ZXJBcnJbJ3BpZCddO1xuICAgICAgICB0aGlzLm5hbWUgPSBiYXNlbGF5ZXJBcnJbJ25hbWUnXTtcbiAgICAgICAgdGhpcy5kaXNwbGF5X25hbWUgPSBiYXNlbGF5ZXJBcnJbJ2Rpc3BsYXlfbmFtZSddO1xuICAgICAgICB0aGlzLnByb3ZpZGVyID0gYmFzZWxheWVyQXJyWydwcm92aWRlciddO1xuICAgICAgICB0aGlzLm9zbV9zdHlsZSA9IGJhc2VsYXllckFyclsnb3NtX3N0eWxlJ107XG4gICAgICAgIHRoaXMub3NtX3N0eWxlX3VybDEgPSBiYXNlbGF5ZXJBcnJbJ29zbV9zdHlsZV91cmwxJ107XG4gICAgICAgIHRoaXMub3NtX3N0eWxlX3VybDIgPSBiYXNlbGF5ZXJBcnJbJ29zbV9zdHlsZV91cmwyJ107XG4gICAgICAgIHRoaXMub3NtX3N0eWxlX3VybDMgPSBiYXNlbGF5ZXJBcnJbJ29zbV9zdHlsZV91cmwzJ107XG4gICAgICAgIHRoaXMub3NtX3N0eWxlX3VybDQgPSBiYXNlbGF5ZXJBcnJbJ29zbV9zdHlsZV91cmw0J107XG4gICAgICAgIHRoaXMub3NtX2tleW5hbWUgPSBiYXNlbGF5ZXJBcnJbJ29zbV9rZXluYW1lJ107XG4gICAgICAgIHRoaXMubWFwYm94X3R5cGUgPSBiYXNlbGF5ZXJBcnJbJ21hcGJveF90eXBlJ107XG4gICAgICAgIHRoaXMuYmluZ19zdHlsZSA9IGJhc2VsYXllckFyclsnYmluZ19zdHlsZSddO1xuICAgICAgICB0aGlzLnN0eWxlID0gYmFzZWxheWVyQXJyWydzdHlsZSddO1xuICAgICAgICB0aGlzLmF0dHJpYnV0aW9uID0gYmFzZWxheWVyQXJyWydhdHRyaWJ1dGlvbiddO1xuICAgICAgICB0aGlzLnBhcmFtcyA9IGJhc2VsYXllckFyclsncGFyYW1zJ107XG4gICAgICAgIHRoaXMud21zX2d1dHRlciA9IGJhc2VsYXllckFyclsnd21zX2d1dHRlciddO1xuICAgICAgICB0aGlzLm1pblpvb20gPSBiYXNlbGF5ZXJBcnJbJ21pblpvb20nXTtcbiAgICAgICAgdGhpcy5tYXhab29tID0gYmFzZWxheWVyQXJyWydtYXhab29tJ107XG4gICAgICAgIHRoaXMucHJvdGVjdF9iYXNlbGF5ZXIgPSBiYXNlbGF5ZXJBcnJbJ3Byb3RlY3RfYmFzZWxheWVyJ107XG4gICAgICAgIHRoaXMucGVybWl0dGVkX2dyb3VwcyA9IGJhc2VsYXllckFyclsncGVybWl0dGVkX2dyb3VwcyddO1xuICAgICAgICB0aGlzLmFwaV9rZXkgPSBiYXNlbGF5ZXJBcnJbJ2FwaUtleSddID8gYmFzZWxheWVyQXJyWydhcGlLZXknXSA6IGJhc2VsYXllckFyclsnYXBpX2tleSddO1xuICAgICAgICB0aGlzLmFwcF9pZCA9IGJhc2VsYXllckFyclsnYXBwX2lkJ107XG4gICAgICAgIHRoaXMudGh1bmRlcmZvcmVzdF90eXBlID0gYmFzZWxheWVyQXJyWyd0aHVuZGVyZm9yZXN0X3R5cGUnXTtcbiAgICAgICAgdGhpcy5oZXJlX3R5cGUgPSBiYXNlbGF5ZXJBcnJbJ2hlcmVfdHlwZSddO1xuICAgICAgICB0aGlzLmNlc2l1bSA9IGJhc2VsYXllckFyclsnY2VzaXVtJ107XG4gICAgICAgIHRoaXMuaGlkZV9pbl9iZSA9IGJhc2VsYXllckFyclsnaGlkZV9pbl9iZSddO1xuICAgICAgICB0aGlzLnVybCA9IGJhc2VsYXllckFyclsndXJsJ107XG4gICAgICAgIHRoaXMudXJscyA9IGJhc2VsYXllckFyclsndXJscyddO1xuICAgICAgICB0aGlzLmtsb2thbl90eXBlID0gYmFzZWxheWVyQXJyWydrbG9rYW5fdHlwZSddO1xuICAgICAgICB0aGlzLnN0eWxlX3VybCA9IGJhc2VsYXllckFyclsnc3R5bGVfdXJsJ107XG4gICAgICAgIHRoaXMuaGFzT3ZlcmxheXMgPSBiYXNlbGF5ZXJBcnJbJ2hhc092ZXJsYXlzJ107XG4gICAgICAgIHRoaXMub3ZlcmxheXMgPSBiYXNlbGF5ZXJBcnJbJ292ZXJsYXlzJ107XG4gICAgICAgIGlmKGJhc2VsYXllckFyclsnbGF5ZXJHcm91cCddKXtcbiAgICAgICAgICAgIGxldCBsYXllckdyb3VwID0gW107XG4gICAgICAgICAgICBmb3IobGV0IGluZGV4IGluIGJhc2VsYXllckFyclsnbGF5ZXJHcm91cCddICl7XG4gICAgICAgICAgICAgICAgaWYoYmFzZWxheWVyQXJyWydsYXllckdyb3VwJ10uaGFzT3duUHJvcGVydHkoaW5kZXgpKXtcbiAgICAgICAgICAgICAgICAgIGxheWVyR3JvdXBbaW5kZXhdID0gbmV3IEM0Z0Jhc2VsYXllcihiYXNlbGF5ZXJBcnJbJ2xheWVyR3JvdXAnXVtpbmRleF1bJ2VudHJ5J10pO1xuICAgICAgICAgICAgICAgICAgbGF5ZXJHcm91cFtpbmRleF1bJ21pblpvb20nXSA9IGJhc2VsYXllckFyclsnbGF5ZXJHcm91cCddW2luZGV4XVsnbWluWm9vbSddO1xuICAgICAgICAgICAgICAgICAgbGF5ZXJHcm91cFtpbmRleF1bJ21heFpvb20nXSA9IGJhc2VsYXllckFyclsnbGF5ZXJHcm91cCddW2luZGV4XVsnbWF4Wm9vbSddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGF5ZXJHcm91cCA9IGxheWVyR3JvdXA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vdmVybGF5Q29udHJvbGxlciA9IG5ldyBDNGdPdmVybGF5Q29udHJvbGxlcih0aGlzKTtcbiAgICAgICAgdGhpcy5sYXllciA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyXG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWJhc2VsYXllci5qcyIsImltcG9ydCB7QzRnTGF5ZXJ9IGZyb20gXCIuL2M0Zy1sYXllclwiXG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiXG5cbnZhciBjNGcgPSB0aGlzLmM0ZztcblxuaW1wb3J0IHtDdXN0b210YWJ9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWN1c3RvbXRhYlwiO1xuXG5leHBvcnQgY2xhc3MgQzRnTGF5ZXJDb250cm9sbGVye1xuICBjb25zdHJ1Y3Rvcihwcm94eSl7XG4gICAgdGhpcy5wcm94eSA9IHByb3h5O1xuICAgIHRoaXMubWFwQ29udHJvbGxlciA9IHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlcjtcbiAgICB0aGlzLmFyckxheWVycyA9IHt9O1xuICAgIHRoaXMubGF5ZXJSZXF1ZXN0cyA9IHt9O1xuICB9XG4gIFxuICBsb2FkTGF5ZXJzICgpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHRoaXMubWFwSWQgPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvL2pRdWVyeS5hamF4KFwibWFwcy9sYXllclNlcnZpY2VcIix7Ly90aGlzLnByb3h5LmFwaV9sYXllcl91cmwse1xuICAgIGpRdWVyeS5hamF4KHRoaXMucHJveHkuYXBpX2xheWVyX3VybCx7XG4gICAgICBkYXRhVHlwZTogdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuanNvbnAgPyBcImpzb25wXCIgOiBcImpzb25cIlxuXG4gICAgfSkuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgc2VsZi5hZGRMYXllcnMoZGF0YS5sYXllciwgZGF0YS5mb3JlaWduTGF5ZXJzKTtcbiAgICAgIHNlbGYucHJveHkubGF5ZXJzX2xvYWRlZCA9IHRydWU7XG4gICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhzZWxmLnByb3h5Lmhvb2tfbGF5ZXJfbG9hZGVkLCBzZWxmLnByb3h5LmxheWVySWRzKTtcbiAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfbGF5ZXJfbG9hZGVkLCB7bGF5ZXJJZHM6IHNlbGYucHJveHkubGF5ZXJJZHMsIHByb3h5OiBzZWxmLnByb3h5fSk7XG4gICAgICBzZWxmLnByb3h5LmNoZWNrTG9jYXRpb25TdHlsZXMoe1xuICAgICAgICBkb25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi5kcmF3TGF5ZXJJbml0aWFsKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkuZmFpbChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBAVE9ETzogZXJyb3ItbWVzc2FnZXNcbiAgICAgIC8vICAgMSkgVmlzaWJsZSBtZXNzYWdlIDQgdXNlcnMgKGkxOG4pXG4gICAgICAvLyAgIDIpIFRlY2huaWNhbCBjb25zb2xlLndhcm5cbiAgICAgIGNvbnNvbGUud2FybignQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSB0cnlpbmcgdG8gbG9hZCB0aGUgbGF5ZXJzLi4uJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSkuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHRoaXMucHJveHkuc3RhcmJvYXJkLnNwaW5uZXIuaGlkZSgpO1xuICAgIH0pO1xuICB9IC8vIGVuZCBvZiBcImxvYWRMYXllcigpXCJcbiAgYWRkTGF5ZXJzKGxheWVycywgZm9yZWlnbkxheWVycykge1xuICAgIHZhciBpLFxuICAgICAgaixcbiAgICAgIGssXG4gICAgICBwLFxuICAgICAgaXNWaXNpYmxlLFxuICAgICAgbGF5ZXIsXG4gICAgICBzdG9yZWRJdGVtLFxuICAgICAgbGlua0l0ZW1zLFxuICAgICAgdWlkLFxuICAgICAgY3VycmVudFpvb20sXG4gICAgICBmbkhhbmRsZUFuZEFwcGVuZExheWVyQ2hpbGRzLFxuICAgICAgZW5kbGVzc0xvb3BJZCxcbiAgICAgIHBhcmVudElkLFxuICAgICAgcGFyZW50SWRzLFxuICAgICAgcGVybWFsaW5rZWRMYXllcnMsXG4gICAgICBjaGlsZCxcbiAgICAgIGZuSGFuZGxlQ2hpbGRzLFxuICAgICAga2V5LFxuICAgICAgc3RhcmJvYXJkLFxuICAgICAgZm5BZGRUb0hvb2s7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgaXNWaXNpYmxlID0gZmFsc2U7XG5cbiAgICBwZXJtYWxpbmtlZExheWVycyA9IHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmxheWVycyB8fCBbXTtcblxuICAgIGZuSGFuZGxlQW5kQXBwZW5kTGF5ZXJDaGlsZHMgPSBmdW5jdGlvbiAob2JqSXRlbSkge1xuICAgICAgdmFyIHRvZ2dsZSxcbiAgICAgICAgZW50cnlXcmFwcGVyO1xuXG4gICAgICBpZiAob2JqSXRlbS5oYXNDaGlsZHMpIHtcbiAgICAgICAgb2JqSXRlbS52aXNpYmxlQ2hpbGRzID0gc2VsZi5hZGRMYXllcnMob2JqSXRlbS5jaGlsZHMsIGZvcmVpZ25MYXllcnMpO1xuICAgICAgfVxuICAgIH07IC8vIGVuZCBvZiBcImZuSGFuZGxlQW5kQXBwZW5kTGF5ZXJDaGlsZHMoKVwiXG5cbiAgICAvLyB3cmFwcGVyIGZ1bmN0aW9uIHRvIGF2b2lkIGNsb3N1cmUgYWNjZXNzaWJpbGl0eVxuICAgIGZuQWRkVG9Ib29rID0gZnVuY3Rpb24obGF5ZXIpIHtcbiAgICAgIHZhciBsYXllcm5hbWUsIGxheWVyaWQsIGxheWVyaWNvbjtcblxuICAgICAgaWYgKGxheWVyLmNoaWxkcyAmJiBsYXllci5jaGlsZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBsYXllcm5hbWUgPSBsYXllci5uYW1lO1xuICAgICAgICBsYXllcmlkID0gbGF5ZXIudGFiSWQ7XG4gICAgICAgIGxheWVyaWNvbiA9IGxheWVyLmF3ZXNvbWVpY29uO1xuICAgICAgICBzdGFyYm9hcmQgPSBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5jb250cm9scy5zdGFyYm9hcmQ7XG4gICAgICAgIGlmICghc3RhcmJvYXJkKSB7XG4gICAgICAgICAgc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIuaW5pdGlhbGl6ZVN0YXJib2FyZCgpO1xuICAgICAgICAgIHN0YXJib2FyZCA9IHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnN0YXJib2FyZDtcbiAgICAgICAgfVxuICAgICAgICBzdGFyYm9hcmQuaG9va19sYXllcnN3aXRjaGVyX2xvYWRlZC5wdXNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgc3RhcmJvYXJkLnN0YXJib2FyZFRhYnMgPSBzdGFyYm9hcmQuc3RhcmJvYXJkVGFicyB8fCB7fTtcbiAgICAgICAgICBzdGFyYm9hcmQuc3RhcmJvYXJkVGFic1tsYXllcmlkXSA9IG5ldyBDdXN0b210YWIoc3RhcmJvYXJkLCB7XG4gICAgICAgICAgICBuYW1lOiBsYXllcm5hbWUsXG4gICAgICAgICAgICB0YWJJZDogbGF5ZXJpZCxcbiAgICAgICAgICAgIGF3ZXNvbWVpY29uOiBsYXllcmljb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChsYXllcnMgJiYgbGF5ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHRoaXMuYXJyTGF5ZXJzW2xheWVyc1tpXS5pZF0pIHtcbiAgICAgICAgICBsYXllciA9IHRoaXMuYXJyTGF5ZXJzW2xheWVyc1tpXS5pZF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGF5ZXIgPSBuZXcgQzRnTGF5ZXIobGF5ZXJzW2ldKTsvL2xheWVyc1tpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbmtJdGVtcyA9IGZhbHNlO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGxheWVyKTtcbiAgICAgICAgaWYgKHR5cGVvZiBsYXllci5jb250ZW50ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgbGF5ZXIuY29udGVudCA9IHV0aWxzLm9iamVjdFRvQXJyYXkobGF5ZXIuY29udGVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlbmRsZXNzLWxvb3AgcHJldmVudGlvblxuICAgICAgICAvL1xuICAgICAgICBwYXJlbnRJZCA9IGxheWVyLnBpZDtcbiAgICAgICAgcGFyZW50SWRzID0ge307XG4gICAgICAgIC8vIGJ1aWxkIHBhcmVudC1pZHMgY2hhaW5cbiAgICAgICAgd2hpbGUgKHNlbGYuYXJyTGF5ZXJzW3BhcmVudElkXSkge1xuICAgICAgICAgIGlmIChwYXJlbnRJZHNbcGFyZW50SWRdKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NhdWdodCBlbmRsZXNzLWxvb3AgKElEOiAnICsgbGF5ZXIuaWQgKyAnKScpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudElkc1twYXJlbnRJZF0gPSB0cnVlO1xuICAgICAgICAgIHBhcmVudElkID0gdGhpcy5hcnJMYXllcnNbcGFyZW50SWRdLnBpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXllci5jb250ZW50ICYmIGxheWVyLmNvbnRlbnRbMF0gJiYgbGF5ZXIuY29udGVudFswXS5jc3NDbGFzcykge1xuICAgICAgICAgIGxheWVyLmNzc0NsYXNzID0gbGF5ZXIuY29udGVudFswXS5jc3NDbGFzcztcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKCFwYXJlbnRJZHNbcGFyZW50SWRdKSB7XG5cbiAgICAgICAgICAvLyBwcmVwYXJlIGxheWVyIGRhdGEgaWYgdGhleSBhcmUgYSBuZXcgc3RhcmJvYXJkIHRhYlxuICAgICAgICAgIGlmIChsYXllci50eXBlID09PSBcInN0YXJ0YWJcIikge1xuICAgICAgICAgICAgbGF5ZXIuZWRpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgbGF5ZXIucmVuZGVyU3BlY2lhbCA9IHRydWU7XG4gICAgICAgICAgICBsYXllci50YWJJZCA9IGxheWVyLmlkO1xuICAgICAgICAgICAgaWYgKCFsYXllci5sYXllcm5hbWUpIHtcbiAgICAgICAgICAgICAgbGF5ZXIuZGlzcGxheSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGNoaWxkcyBhbmQgdGVsbCB0aGVtIHRvIG5vdCBsb2FkIGluIGxheWVyc3dpdGNoZXJcbiAgICAgICAgICAgIGZuSGFuZGxlQ2hpbGRzID0gZnVuY3Rpb24oZkxheWVyKSB7XG4gICAgICAgICAgICAgIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCBmTGF5ZXIuY2hpbGRzLmxlbmd0aDsgY291bnQrKykge1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZEFyciA9IGZMYXllci5jaGlsZHNbY291bnRdO1xuICAgICAgICAgICAgICAgIGNoaWxkQXJyLmVkaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjaGlsZEFyci50YWJJZCA9IGZMYXllci50YWJJZDtcbiAgICAgICAgICAgICAgICBjaGlsZEFyci5yZW5kZXJTcGVjaWFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5hcnJMYXllcnNbY2hpbGRBcnIuaWRdKSB7XG4gICAgICAgICAgICAgICAgICBjaGlsZCA9IHNlbGYuYXJyTGF5ZXJzW2NoaWxkQXJyLmlkXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY2hpbGQgPSBuZXcgQzRnTGF5ZXIoY2hpbGRBcnIpOy8vbGF5ZXJzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBzZXQgcmVuZGVyU3BlY2lhbCB0byByZW1vdmUgaXQgZnJvbSBub3JtYWwgbGF5ZXJzd2l0Y2hlclxuICAgICAgICAgICAgICAgIHNlbGYuYXJyTGF5ZXJzW2NoaWxkLmlkXSA9IGNoaWxkO1xuICAgICAgICAgICAgICAgIGZMYXllci5jaGlsZHNbY291bnRdID0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmhhc0NoaWxkcykge1xuICAgICAgICAgICAgICAgICAgLy8gcmVjdXJzaXZlIGNhbGxcbiAgICAgICAgICAgICAgICAgIGZuSGFuZGxlQ2hpbGRzKGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07IC8vIGVuZCBvZiBmbkhhbmRsZUNoaWxkc1xuXG4gICAgICAgICAgICBpZiAobGF5ZXIuaGFzQ2hpbGRzKSB7XG4gICAgICAgICAgICAgIGZuSGFuZGxlQ2hpbGRzKGxheWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZuQWRkVG9Ib29rKGxheWVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB1aWQgPSBsYXllci5pZCB8fCB1dGlscy5nZXRVbmlxdWVJZCgpO1xuICAgICAgICAgIHRoaXMuYXJyTGF5ZXJzW3VpZF0gPSBsYXllcjtcbiAgICAgICAgICBpZih0aGlzLnByb3h5LmNoZWNrTGF5ZXJJc0FjdGl2ZUZvclpvb20obGF5ZXIuaWQpKXtcbiAgICAgICAgICAgIGxheWVyLmlzSW5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGxheWVyLmlzSW5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMucHJveHkubGF5ZXJJZHMucHVzaChsYXllci5pZCk7XG5cbiAgICAgICAgICBpZiAobGF5ZXIuZGlzcGxheSkge1xuICAgICAgICAgICAgaXNWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGZuSGFuZGxlQW5kQXBwZW5kTGF5ZXJDaGlsZHMobGF5ZXIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobGF5ZXIucGlkICYmIHRoaXMuYXJyTGF5ZXJzW2xheWVyLnBpZF0pIHtcbiAgICAgICAgICAgIC8vIHNldCBoaWRlIHdoZW4gbGF5ZXJzIGFyZSBub3QgZGlzcGxheWVkIGluIHRoZSBzdGFyYm9hcmRcbiAgICAgICAgICAgIGxheWVyLmhpZGUgPSB0aGlzLmFyckxheWVyc1tsYXllci5waWRdLmhpZGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICBpZiAocGVybWFsaW5rZWRMYXllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChwID0gMDsgcCA8IHBlcm1hbGlua2VkTGF5ZXJzLmxlbmd0aDsgcCArPSAxKSB7XG4gICAgICAgICAgICAgIGlmIChwZXJtYWxpbmtlZExheWVyc1twXSA9PSBsYXllci5pZCkge1xuICAgICAgICAgICAgICAgIHZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKChsYXllci5oaWRlICE9PSBcIjFcIikgfHwgKHZpc2libGUpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW2xheWVyLmlkXSA9ICdpbnZpc2libGUnO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICB9IC8vIGVuZCBvZiBmb3ItbG9vcFxuXG4gICAgICAvLyB3cmFwcGVyRWxlbWVudC5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNWaXNpYmxlO1xuICB9IC8vIGVuZCBvZiBcImFkZExheWVycygpXCJcbiAgbG9hZExheWVyQ29udGVudChpdGVtVWlkKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICBpLFxuICAgICAgbGF5ZXJzLFxuICAgICAgZmVhdHVyZXMsXG4gICAgICBmZWF0dXJlUHJvamVjdGlvbixcbiAgICAgIGRhdGFQcm9qZWN0aW9uLFxuICAgICAgbGF5ZXJHcm91cCxcbiAgICAgIGNvbnRlbnREYXRhLFxuICAgICAgcmVxdWVzdERhdGEsXG4gICAgICByZXF1ZXN0Q29udGVudERhdGEsXG4gICAgICByZXF1ZXN0VmVjdG9yU291cmNlLFxuICAgICAgdmVjdG9yTGF5ZXIsXG4gICAgICB2ZWN0b3JTb3VyY2UsXG4gICAgICB2ZWN0b3JTdHlsZSxcbiAgICAgIGNsdXN0ZXJTb3VyY2UsXG4gICAgICBzdHlsZUZvckNsdXN0ZXIsXG4gICAgICByZWZyZXNoSW50ZXJ2YWwsXG4gICAgICByZWZyZXNoQWpheFZhcnMsXG4gICAgICBmbkF0dGFjaERhdGFUb0xheWVyO1xuXG4gICAgcmVmcmVzaEFqYXhWYXJzID0ge307XG5cbiAgICBmbkF0dGFjaERhdGFUb0xheWVyID0gZnVuY3Rpb24gKGxheWVyLCBkYXRhKSB7XG4gICAgICBkYXRhLnByb3BlcnRpZXMgPSBkYXRhLnByb3BlcnRpZXMgfHwge307XG5cbiAgICAgIGxheWVyLnBvcHVwID0gZGF0YS5wb3B1cCB8fCBkYXRhLnByb3BlcnRpZXMucG9wdXAgfHwgZmFsc2U7XG4gICAgICBsYXllci50b29sdGlwID0gZGF0YS50b29sdGlwIHx8IGRhdGEucHJvcGVydGllcy50b29sdGlwIHx8IGZhbHNlO1xuICAgICAgbGF5ZXIudG9vbHRpcF9sZW5ndGggPSBkYXRhLnRvb2x0aXBfbGVuZ3RoIHx8IGRhdGEucHJvcGVydGllcy50b29sdGlwX2xlbmd0aCB8fCBmYWxzZTtcbiAgICAgIGxheWVyLmxhYmVsID0gZGF0YS5sYWJlbCB8fCBkYXRhLnByb3BlcnRpZXMubGFiZWwgfHwgZmFsc2U7XG4gICAgICBsYXllci56b29tX29uY2xpY2sgPSBkYXRhLnpvb21fb25jbGljayB8fCBkYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrIHx8IGZhbHNlO1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5hcnJMYXllcnNbaXRlbVVpZF0uY29udGVudCkge1xuICAgICAgbGF5ZXJzID0gW107XG5cbiAgICAgICAgICB2YXIgY29udGVudEZlYXR1cmVzID0gW107XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNvbnRlbnQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb250ZW50RGF0YSA9IHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNvbnRlbnRbaV07XG4gICAgICAgICAgc3R5bGVGb3JDbHVzdGVyID0gZnVuY3Rpb24gKGZlYXR1cmUsIHJlc29sdXRpb24pIHtcblxuICAgICAgICAgICAgdmFyIHNpemUsXG4gICAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgICBmRmVhdHVyZXMsXG4gICAgICAgICAgICAgIGljb25PZmZzZXQsXG4gICAgICAgICAgICAgIHJhZGl1cyxcbiAgICAgICAgICAgICAgayxcbiAgICAgICAgICAgICAgZmlsbGNvbG9yLFxuICAgICAgICAgICAgICBmb250Y29sb3I7XG5cbiAgICAgICAgICAgIGlmIChjb250ZW50RGF0YSAmJiBjb250ZW50RGF0YS5sb2NhdGlvblN0eWxlICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2NvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGVdKSB7XG4gICAgICAgICAgICAgIHN0eWxlID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbY29udGVudERhdGEubG9jYXRpb25TdHlsZV0uc3R5bGUoZmVhdHVyZSwgcmVzb2x1dGlvbik7XG5cbiAgICAgICAgICAgICAgaWYgKCFzdHlsZSkge1xuICAgICAgICAgICAgICAgIHN0eWxlID0gW107XG4gICAgICAgICAgICAgICAgc2VsZi5maXR0aW5nRXh0ZW5kc1tpdGVtVWlkXSA9IHZlY3RvclNvdXJjZS5nZXRFeHRlbnQoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChmZWF0dXJlICE9PSB1bmRlZmluZWQgJiYgZmVhdHVyZSAhPT0gbnVsbCAmJiBmZWF0dXJlLnNlbGYgIT09IHdpbmRvdykge1xuICAgICAgICAgICAgICAgIGlmKGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpKXtcbiAgICAgICAgICAgICAgICAgIGZGZWF0dXJlcyA9IGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgZkZlYXR1cmVzID0gW107XG4gICAgICAgICAgICAgICAgICBmRmVhdHVyZXNbMF0gPSBmZWF0dXJlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzaXplID0gZkZlYXR1cmVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChmRmVhdHVyZXNbMF0uZ2V0U3R5bGUoKSAmJiBzaXplIDwgMTAwMCkgeyAvLyBsaW1pdCBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVbMF0gPSBmRmVhdHVyZXNbMF0uZ2V0U3R5bGUoKVswXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGZGZWF0dXJlcy5sZW5ndGg7IGsgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICghZkZlYXR1cmVzW2tdLmdldFN0eWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbY29udGVudERhdGEubG9jYXRpb25TdHlsZV0uc3R5bGUoZkZlYXR1cmVzWzBdLCByZXNvbHV0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tjb250ZW50RGF0YS5sb2NhdGlvblN0eWxlXS5zdHlsZShmRmVhdHVyZXNbMF0sIHJlc29sdXRpb24pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKCFzdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgYnViYmxlLW9mZnNldFxuICAgICAgICAgICAgICAgICAgaWNvbk9mZnNldCA9IFswLCAwXTtcbiAgICAgICAgICAgICAgICAgIGlmIChzdHlsZVswXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlWzBdLmdldEltYWdlKCkgJiYgc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMgJiYgdHlwZW9mIHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICByYWRpdXMgPSBwYXJzZUludChzdHlsZVswXS5nZXRJbWFnZSgpLmdldFJhZGl1cygpLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbk9mZnNldCA9IFswLCByYWRpdXNdO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdHlsZVswXS5nZXRJbWFnZSgpICYmIHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0QW5jaG9yICYmIHR5cGVvZiBzdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWNvbk9mZnNldCA9IHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0QW5jaG9yKCkgfHwgWzAsIDBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGZpbGxjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eSgnNDk3NUE4Jyx7XG4gICAgICAgICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDcwXG4gICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLmNsdXN0ZXJfZmlsbGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShjb250ZW50RGF0YS5jbHVzdGVyX2ZpbGxjb2xvcix7XG4gICAgICAgICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiA3MFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGZvbnRjb2xvciA9ICcjRkZGRkZGJztcbiAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5jbHVzdGVyX2ZvbnRjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBmb250Y29sb3IgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoY29udGVudERhdGEuY2x1c3Rlcl9mb250Y29sb3Ise1xuICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMTAwXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBzdHlsZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG5ldyBvbC5zdHlsZS5UZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwi4pePXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250OiBcIjYwcHggc2Fucy1zZXJpZlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogLTEgKiBpY29uT2Zmc2V0WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEgKiBpY29uT2Zmc2V0WzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZmlsbGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgc3R5bGUucHVzaChcbiAgICAgICAgICAgICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgb2wuc3R5bGUuVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBzaXplLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiAtMSAqIGljb25PZmZzZXRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtMSAqIGljb25PZmZzZXRbMV0gKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZm9udGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2l6ZSA9PT0gMSAmJiBmRmVhdHVyZXNbMF0uZ2V0U3R5bGUoKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZGZWF0dXJlc1swXS5nZXRTdHlsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICAgICAgfTsgLy8gZW5kIG9mIHN0eWxlRm9yQ2x1c3RlcigpXG5cbiAgICAgICAgICBpZiAoY29udGVudERhdGEgJiYgKGNvbnRlbnREYXRhLnR5cGUgPT09IFwidXJsRGF0YVwiKSkge1xuXG4gICAgICAgICAgICByZXF1ZXN0RGF0YSA9IHt9O1xuICAgICAgICAgICAgcmVxdWVzdERhdGEudXJsID0gY29udGVudERhdGEuZGF0YS51cmw7XG4gICAgICAgICAgICBpZiAoY29udGVudERhdGEuZGF0YS5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgcmVxdWVzdERhdGEucGFyYW1zID0gZGVjb2RlVVJJQ29tcG9uZW50KGNvbnRlbnREYXRhLmRhdGEucGFyYW1zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLnNldHRpbmdzLmJvdW5kaW5nQm94KSB7XG4gICAgICAgICAgICAgIHJlcXVlc3RDb250ZW50RGF0YSA9IGNvbnRlbnREYXRhO1xuICAgICAgICAgICAgICByZXF1ZXN0VmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICAgICAgICAgIGxvYWRlcjogZnVuY3Rpb24gKGV4dGVudCwgcmVzb2x1dGlvbiwgcHJvamVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgdmFyIGJvdW5kaW5nQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIHN0ckJvdW5kaW5nQm94LFxuICAgICAgICAgICAgICAgICAgICB1cmw7XG5cbiAgICAgICAgICAgICAgICAgIGJvdW5kaW5nQXJyYXkgPSBvbC5wcm9qLnRyYW5zZm9ybUV4dGVudChleHRlbnQsIHByb2plY3Rpb24sICdFUFNHOjQzMjYnKTtcbiAgICAgICAgICAgICAgICAgIC8vZGlmZmVyZW50IGNhc2VzIGZvciBPdmVycGFzc19RTCBhbmQgb2xkIE92ZXJwYXNzXG4gICAgICAgICAgICAgICAgICBpZihyZXF1ZXN0RGF0YS5wYXJhbXMuc3Vic3RyKDAsIDEpID09IFwiPFwiKXtcbiAgICAgICAgICAgICAgICAgICAgc3RyQm91bmRpbmdCb3ggPSAnPGJib3gtcXVlcnkgcz1cIicgKyBib3VuZGluZ0FycmF5WzFdICsgJ1wiIG49XCInICsgYm91bmRpbmdBcnJheVszXSArICdcIiB3PVwiJyArIGJvdW5kaW5nQXJyYXlbMF0gKyAnXCIgZT1cIicgKyBib3VuZGluZ0FycmF5WzJdICsgJ1wiLz4nO1xuXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBzdHJCb3VuZGluZ0JveCA9Ym91bmRpbmdBcnJheVsxXSArICcsJyArIGJvdW5kaW5nQXJyYXlbMF0gKyAnLCcgKyBib3VuZGluZ0FycmF5WzNdICsgJywnICsgYm91bmRpbmdBcnJheVsyXTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgdXJsID0gcmVxdWVzdERhdGEudXJsO1xuICAgICAgICAgICAgICAgICAgY29uc3QgYmJveFRhZyA9IHJlcXVlc3REYXRhLnBhcmFtcy5pbmRleE9mKCcoYmJveCknKSA+PSAwID8gL1xcKGJib3hcXCkvZyA6IC9cXHt7YmJveFxcfX0vZ1xuXG4gICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdERhdGEucGFyYW1zKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdXJsICs9ICc/ZGF0YT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHJlcXVlc3REYXRhLnBhcmFtcy5yZXBsYWNlKGJib3hUYWcsIHN0ckJvdW5kaW5nQm94KSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmxheWVyUmVxdWVzdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxheWVyUmVxdWVzdHMgPSB7fTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmxheWVyUmVxdWVzdHNbJ2xheWVyUmVxdWVzdCcgKyBpdGVtVWlkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGF5ZXJSZXF1ZXN0c1snbGF5ZXJSZXF1ZXN0JyArIGl0ZW1VaWRdLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHNlbGYubGF5ZXJSZXF1ZXN0c1snbGF5ZXJSZXF1ZXN0JyArIGl0ZW1VaWRdID0galF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGosXG4gICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzLFxuICAgICAgICAgICAgICAgICAgICAgIG9zbU5vZGVzLFxuICAgICAgICAgICAgICAgICAgICAgIG9zbU5kcyxcbiAgICAgICAgICAgICAgICAgICAgICBub2RlSWR4LFxuICAgICAgICAgICAgICAgICAgICAgIG5kSWR4LFxuICAgICAgICAgICAgICAgICAgICAgIGluZm9Ob2RlcyxcbiAgICAgICAgICAgICAgICAgICAgICBuZXdUYWcsXG4gICAgICAgICAgICAgICAgICAgICAgcmVmO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZWxmLmxheWVyUmVxdWVzdHNbJ2xheWVyUmVxdWVzdCcgKyBpdGVtVWlkXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBwcmVwcm9jZXNzaW5nIHRoZSBvc21feG1sIHRvIGZpbmQgcmVsYXRpb24tbm9kZXMgd2l0aCBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuY2hpbGRyZW4gJiYgcmVzcG9uc2UuY2hpbGRyZW5bMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyAxKSBmaW5kIG5vZGVzIHdpdGggZGF0YVxuICAgICAgICAgICAgICAgICAgICAgIG9zbU5vZGVzID0gcmVzcG9uc2UuY2hpbGRyZW5bMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ25vZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAob3NtTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm9Ob2RlcyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChub2RlSWR4IGluIG9zbU5vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvc21Ob2Rlcy5oYXNPd25Qcm9wZXJ0eShub2RlSWR4KSAmJiBvc21Ob2Rlc1tub2RlSWR4XSAmJiBvc21Ob2Rlc1tub2RlSWR4XS5jaGlsZHJlbiAmJiBvc21Ob2Rlc1tub2RlSWR4XS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb05vZGVzW29zbU5vZGVzW25vZGVJZHhdLmdldEF0dHJpYnV0ZSgnaWQnKV0gPSBvc21Ob2Rlc1tub2RlSWR4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmZvTm9kZXNbb3NtTm9kZXNbbm9kZUlkeF0uZ2V0QXR0cmlidXRlKCdpZCcpXSA9IG5vZGVJZHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyAyKSBjaGVjayBhbmQgaGFuZGxlIHJlbGF0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgIG9zbU5kcyA9IHJlc3BvbnNlLmNoaWxkcmVuWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCduZCcpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChvc21OZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobmRJZHggaW4gb3NtTmRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZElkeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvc21OZHMuaGFzT3duUHJvcGVydHkobmRJZHgpICYmIG9zbU5kc1tuZElkeF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gb3NtTmRzW25kSWR4XS5nZXRBdHRyaWJ1dGUoJ3JlZicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mb05vZGVzICYmIHJlZiAmJiBpbmZvTm9kZXNbcmVmXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0Q29udGVudERhdGEgJiYgcmVxdWVzdENvbnRlbnREYXRhLnNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdENvbnRlbnREYXRhLnNldHRpbmdzLnNob3dBZGRpdGlvbmFsR2VvbWV0cmllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXJrIGFzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VGFnID0gcmVzcG9uc2UuY3JlYXRlRWxlbWVudCgndGFnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1RhZyAmJiBvc21OZHNbbmRJZHhdLnBhcmVudEVsZW1lbnQgJiYgb3NtTmRzW25kSWR4XS5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VGFnLnNldEF0dHJpYnV0ZSgnaycsICdjNGdfb3NtX3JlZicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VGFnLnNldEF0dHJpYnV0ZSgndicsIG9zbU5kc1tuZElkeF0ucGFyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb05vZGVzW3JlZl0uYXBwZW5kQ2hpbGQobmV3VGFnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9Ob2Rlc1tyZWZdLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBjaGVjayBhbmQgaGFuZGxlIHJlbGF0aW9ucy4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgLy8gaW1wb3J0IG9zbV94bWxcbiAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSBuZXcgb2wuZm9ybWF0Lk9TTVhNTCgpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQgJiYgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlcyA9IGZvcm1hdC5yZWFkRmVhdHVyZXMocmVzcG9uc2UsIHtmZWF0dXJlUHJvamVjdGlvbjogcHJvamVjdGlvbn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NhbiBub3QgcmVhZCBmZWF0dXJlLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGUuc3RhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIC8vIHBvc3Rwcm9jZXNzaW5nIGZlYXR1cmVzXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJGZWF0dXJlcyAmJiByRmVhdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHJGZWF0dXJlcy5sZW5ndGg7IGogKz0gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyRmVhdHVyZXNbal0uZ2V0R2VvbWV0cnkoKS5nZXRUeXBlKCkgPT09IFwiUG9pbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXQoJ29zbV90eXBlJywgJ25vZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0KCdvc21fdHlwZScsICd3YXknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0KCdjNGdfdHlwZScsICdvc20nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldCgnY2x1c3Rlcl96b29tJywgY29udGVudERhdGEuY2x1c3Rlcl96b29tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldCgnY2x1c3Rlcl9wb3B1cCcsIGNvbnRlbnREYXRhLmNsdXN0ZXJfcG9wdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0KCdsb2NfbGlua3VybCcsIGNvbnRlbnREYXRhLmxvY19saW5rdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldCgnaG92ZXJfbG9jYXRpb24nLCBjb250ZW50RGF0YS5ob3Zlcl9sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXQoJ2hvdmVyX3N0eWxlJywgY29udGVudERhdGEuaG92ZXJfc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0KCd6b29tX29uY2xpY2snLCBjb250ZW50RGF0YS5kYXRhLnpvb21fb25jbGljayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXQoJ2xhYmVsJywgY29udGVudERhdGEuZGF0YS5sYWJlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RDb250ZW50RGF0YS5zZXR0aW5ncy5mb3JjZU5vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29udmVydCB0cmFja3MgYW5kIGFyZWFzIHRvIHBvaW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyRmVhdHVyZXNbal0uZ2V0R2VvbWV0cnkoKS5nZXRUeXBlKCkgPT09IFwiUG9seWdvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VudGVyUG9pbnQgPSByRmVhdHVyZXNbal0uZ2V0R2VvbWV0cnkoKS5nZXRJbnRlcmlvclBvaW50KCkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlc1tqXS5zZXRHZW9tZXRyeShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IG9sLmdlb20uUG9pbnQoY2VudGVyUG9pbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAockZlYXR1cmVzW2pdLmdldEdlb21ldHJ5KCkuZ2V0VHlwZSgpID09PSBcIkxpbmVTdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQFRPRE86IHByw7xmZW4gb2IgZGllcyBrb3JyZWt0ZXIgbWl0dGVscHVua3QgaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGluZUV4dGVudCA9IHJGZWF0dXJlc1tqXS5nZXRHZW9tZXRyeSgpLmdldEV4dGVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyUG9pbnQgPSBvbC5leHRlbnQuZ2V0Q2VudGVyKGxpbmVFeHRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgckZlYXR1cmVzW2pdLnNldEdlb21ldHJ5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuZ2VvbS5Qb2ludChjZW50ZXJQb2ludClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyRmVhdHVyZXNbal0uZ2V0KCdjNGdfb3NtX3JlZicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHJlcXVlc3RDb250ZW50RGF0YS5zZXR0aW5ncy5zaG93QWRkaXRpb25hbEdlb21ldHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdENvbnRlbnREYXRhLnNldHRpbmdzLmFkZGl0aW9uYWxTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQFRPRE86IGxvYWQgYW5kIGF0dGFjaCBzdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXNbal0uc2V0U3R5bGUoYzRnLm1hcHMudXRpbHMucmVkdWNlU3R5bGUocmVxdWVzdENvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHJlc3BvbnNlICYmIHJlc3BvbnNlLmVsZW1lbnRzKXtcbiAgICAgICAgICAgICAgICAgICAgICByRmVhdHVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGVsZW1lbnRJZCA9IDA7IGVsZW1lbnRJZCA8IHJlc3BvbnNlLmVsZW1lbnRzLmxlbmd0aDsgZWxlbWVudElkKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSByZXNwb25zZS5lbGVtZW50c1tlbGVtZW50SWRdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihlbGVtZW50LnR5cGUgPT0gXCJub2RlXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZighZWxlbWVudC50YWdzKXsvL25vdCBhIGZlYXR1cmUsIGJ1dCBwYXJ0IG9mIGEgd2F5IG9yIHJlbGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gbmV3IG9sLmdlb20uUG9pbnQoW2VsZW1lbnQubG9uLGVsZW1lbnQubGF0XSkudHJhbnNmb3JtKCdFUFNHOjQzMjYnLCdFUFNHOjM4NTcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0SWQoZWxlbWVudC5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdvc21fdHlwZScsICdub2RlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGVsZW1lbnQudHlwZSA9PSBcIndheVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyckNvb3JkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZWxlbWVudC5ub2Rlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGUgPSByZXNwb25zZS5lbGVtZW50cy5maW5kKGZ1bmN0aW9uKG9iak5vZGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iak5vZGUuaWQgPT09IGVsZW1lbnQubm9kZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyQ29vcmRzLnB1c2goW25vZGUubG9uLG5vZGUubGF0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYXJyQ29vcmRzWzBdWzBdID09IGFyckNvb3Jkc1thcnJDb29yZHMubGVuZ3RoLTFdWzBdICYmIGFyckNvb3Jkc1swXVsxXSA9PSBhcnJDb29yZHNbYXJyQ29vcmRzLmxlbmd0aC0xXVsxXSl7IC8vcG9seWdvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhcnJDb29yZHNbYXJyQ29vcmRzLmxlbmd0aC0xXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJDb29yZHMubGVuZ3RoID0gYXJyQ29vcmRzLmxlbmd0aC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb2x5Z29uID0gbmV3IG9sLmdlb20uUG9seWdvbihbYXJyQ29vcmRzXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9seWdvbi50cmFuc2Zvcm0oJ0VQU0c6NDMyNicsJ0VQU0c6Mzg1NycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0Q29udGVudERhdGEuc2V0dGluZ3MuZm9yY2VOb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29udmVydCB0cmFja3MgYW5kIGFyZWFzIHRvIHBvaW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbnRlclBvaW50ID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldEludGVyaW9yUG9pbnQoKS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXRHZW9tZXRyeShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IG9sLmdlb20uUG9pbnQoY2VudGVyUG9pbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IHBvbHlnb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7IC8vbGluZXN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaW5lU3RyaW5nID0gbmV3IG9sLmdlb20uTGluZVN0cmluZyhbYXJyQ29vcmRzXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVN0cmluZy50cmFuc2Zvcm0oJ0VQU0c6NDMyNicsJ0VQU0c6Mzg1NycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogbGluZVN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RDb250ZW50RGF0YS5zZXR0aW5ncy5mb3JjZU5vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGluZUV4dGVudCA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRFeHRlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlclBvaW50ID0gb2wuZXh0ZW50LmdldENlbnRlcihsaW5lRXh0ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0R2VvbWV0cnkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBvbC5nZW9tLlBvaW50KGNlbnRlclBvaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnb3NtX3R5cGUnLCAnd2F5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnYzRnX3R5cGUnLCAnb3NtJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnY2x1c3Rlcl96b29tJywgY29udGVudERhdGEuY2x1c3Rlcl96b29tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdjbHVzdGVyX3BvcHVwJywgY29udGVudERhdGEuY2x1c3Rlcl9wb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbG9jX2xpbmt1cmwnLCBjb250ZW50RGF0YS5sb2NfbGlua3VybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnaG92ZXJfbG9jYXRpb24nLCBjb250ZW50RGF0YS5ob3Zlcl9sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnaG92ZXJfc3R5bGUnLCBjb250ZW50RGF0YS5ob3Zlcl9zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnem9vbV9vbmNsaWNrJywgY29udGVudERhdGEuZGF0YS56b29tX29uY2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2xhYmVsJywgY29udGVudERhdGEuZGF0YS5sYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHRhZ3MgaW4gZWxlbWVudC50YWdzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQodGFncywgZWxlbWVudC50YWdzW3RhZ3NdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJGZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VmVjdG9yU291cmNlLmFkZEZlYXR1cmVzKHJGZWF0dXJlcyk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBhZGQgZmVhdHVyZXMgdG8gc291cmNlLiBUaGUgXCJmb3JjZU5vZGVzXCItb3B0aW9uIHNob3VsZCBiZSB1c2VkLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vc2VsZi5jb21iaW5lTGF5ZXJzKHNlbGYpO1xuICAgICAgICAgICAgICAgICAgfSk7IC8vIGVuZCBvZiBBSkFYXG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0cmF0ZWd5OiBvbC5sb2FkaW5nc3RyYXRlZ3kuYmJveFxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UgPSByZXF1ZXN0VmVjdG9yU291cmNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIG9sLmZvcm1hdFtjb250ZW50RGF0YS5mb3JtYXRdID09PSBcImZ1bmN0aW9uXCIpIHtcblxuICAgICAgICAgICAgICAgIC8vU3RhdGljVmVjdG9yXG4gICAgICAgICAgICAgICAgdmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgZm9ybWF0OiBuZXcgb2wuZm9ybWF0W2NvbnRlbnREYXRhLmZvcm1hdF0oKSxcbiAgICAgICAgICAgICAgICAgIHVybDogcmVxdWVzdERhdGEudXJsLFxuICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbjogJ0VQU0c6Mzg1NycsXG4gICAgICAgICAgICAgICAgICBzdHJhdGVneTogb2wubG9hZGluZ3N0cmF0ZWd5LmFsbFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLnNldHRpbmdzICYmIGNvbnRlbnREYXRhLnNldHRpbmdzLnJlZnJlc2ggPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmxheWVyUmVxdWVzdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxheWVyUmVxdWVzdHMgPSB7fTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmVmcmVzaEludGVydmFsID0gKHR5cGVvZiBjb250ZW50RGF0YS5zZXR0aW5ncy5pbnRlcnZhbCA9PT0gJ251bWJlcicpID8gY29udGVudERhdGEuc2V0dGluZ3MuaW50ZXJ2YWwgOiAxMDAwMDtcbiAgICAgICAgICAgICAgICAgIC8qIGRvIGl0IHdpdGggYmV0dGVyIGFqYXgtaGFuZGxpbmdcbiAgICAgICAgICAgICAgICAgICBzZWxmLmxheWVyUmVxdWVzdHNbJ2xheWVyUmVxdWVzdCcgKyBpdGVtVWlkXSA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgdmVjdG9yU291cmNlLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgfSwgcmVmcmVzaEludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgICAvLyBBbmZhbmcgRWluc2NodWIgbmV1ZSBBSkFYLUxheWVyXG4gICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuYmxuSGFzUG9zaXRpb25JZHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5hcnJQb3NpdGlvbklkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLm9iakZlYXR1cmVzID0ge307XG5cbiAgICAgICAgICAgICAgICAgIHZlY3RvclNvdXJjZS5zZXQoJ3JlZnJlc2hJbnRlcnZhbCcsIHJlZnJlc2hJbnRlcnZhbCk7XG5cbiAgICAgICAgICAgICAgICAgIHZlY3RvclNvdXJjZS5zZXQoJ3JlZnJlc2hGdW5jdGlvbicsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZlY3RvclNvdXJjZS5nZXQoJ2hhc0lkcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmVjdG9yU291cmNlLmZvckVhY2hGZWF0dXJlKGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZS5nZXQoJ3Bvc2l0aW9uSWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuYmxuSGFzUG9zaXRpb25JZHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuYXJyUG9zaXRpb25JZHMucHVzaChmZWF0dXJlLmdldCgncG9zaXRpb25JZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLm9iakZlYXR1cmVzW2ZlYXR1cmUuZ2V0KCdwb3NpdGlvbklkJyldID0gZmVhdHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVmcmVzaEFqYXhWYXJzLmJsbkhhc1Bvc2l0aW9uSWRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2Uuc2V0KCdoYXNJZHMnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiByZXF1ZXN0RGF0YS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgZG9uZTogZnVuY3Rpb24gKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucmVuZXdhYmxlUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIG9mIHN0YXRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5lYWNoKGRhdGEuZmVhdHVyZXMsIGZ1bmN0aW9uIChpbmRleCwgZmVhdHVyZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZURhdGEudHlwZSAmJiBmZWF0dXJlRGF0YS50eXBlID09PSBcIkZlYXR1cmVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZlYXR1cmUgPSAobmV3IG9sLmZvcm1hdFtjb250ZW50RGF0YS5mb3JtYXRdKCkpLnJlYWRGZWF0dXJlKGZlYXR1cmVEYXRhLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246ICdFUFNHOjM4NTcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXllciA9IHNlbGYuYXJyTGF5ZXJzW2ZlYXR1cmVEYXRhLnByb3BlcnRpZXMuaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHVwQ29udGVudCA9IGZlYXR1cmVEYXRhLnByb3BlcnRpZXMucG9wdXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2ZlYXR1cmVEYXRhLnByb3BlcnRpZXMuc3R5bGVJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhbZmVhdHVyZURhdGEucHJvcGVydGllcy5zdHlsZUlkXSwge2RvbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldFN0eWxlKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2ZlYXR1cmVEYXRhLnByb3BlcnRpZXMuc3R5bGVJZF0uc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZURhdGEucHJvcGVydGllcy5zdHlsZUlkXS5zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5nZXRTb3VyY2UoKS5mb3JFYWNoRmVhdHVyZShmdW5jdGlvbihuZXN0ZWRGZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVzdGVkRmVhdHVyZS5zZXQoJ3BvcHVwJywgcG9wdXBDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmNvbnRlbnRbMF0ubG9jYXRpb25TdHlsZSA9IGZlYXR1cmVEYXRhLnByb3BlcnRpZXMuc3R5bGVJZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tmZWF0dXJlRGF0YS5wcm9wZXJ0aWVzLnN0eWxlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIubG9hZExvY2F0aW9uU3R5bGVzKFtmZWF0dXJlRGF0YS5wcm9wZXJ0aWVzLnN0eWxlSWRdLCB7ZG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldFN0eWxlKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2ZlYXR1cmVEYXRhLnByb3BlcnRpZXMuc3R5bGVJZF0uc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZURhdGEucHJvcGVydGllcy5zdHlsZUlkXS5zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnByb3h5LmFjdGl2ZUxheWVySWRzW2xheWVyLmlkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhpZGVMYXllcihsYXllci5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2hvd0xheWVyKGxheWVyLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZlY3RvclNvdXJjZS5hZGRGZWF0dXJlKGZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmZlYXR1cmVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmFyck5ld1Bvc2l0aW9uSWRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5vYmpOZXdGZWF0dXJlcyA9IHt9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5lYWNoKGRhdGEuZmVhdHVyZXMsIGZ1bmN0aW9uIChpbmRleCwgZmVhdHVyZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZURhdGEudHlwZSAmJiBmZWF0dXJlRGF0YS50eXBlID09IFwiRmVhdHVyZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuZmVhdHVyZSA9IChuZXcgb2wuZm9ybWF0W2NvbnRlbnREYXRhLmZvcm1hdF0oKSkucmVhZEZlYXR1cmUoZmVhdHVyZURhdGEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb246ICdFUFNHOjQzMjYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogJ0VQU0c6Mzg1NydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmZlYXR1cmUuc2V0KCdjbHVzdGVyX3pvb20nLCBjb250ZW50RGF0YS5jbHVzdGVyX3pvb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmZlYXR1cmUuc2V0KCdsb2NfbGlua3VybCcsIGNvbnRlbnREYXRhLmxvY19saW5rdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5mZWF0dXJlLnNldCgnaG92ZXJfbG9jYXRpb24nLCBjb250ZW50RGF0YS5ob3Zlcl9sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMuZmVhdHVyZS5zZXQoJ2hvdmVyX3N0eWxlJywgY29udGVudERhdGEuaG92ZXJfc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZnJlc2hBamF4VmFycy5mZWF0dXJlLmdldCgncG9zaXRpb25JZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hBamF4VmFycy5hcnJOZXdQb3NpdGlvbklkcy5wdXNoKHJlZnJlc2hBamF4VmFycy5mZWF0dXJlLmdldCgncG9zaXRpb25JZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLm9iak5ld0ZlYXR1cmVzW3JlZnJlc2hBamF4VmFycy5mZWF0dXJlLmdldCgncG9zaXRpb25JZCcpXSA9IHJlZnJlc2hBamF4VmFycy5mZWF0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmVhY2gocmVmcmVzaEFqYXhWYXJzLmFyclBvc2l0aW9uSWRzLCBmdW5jdGlvbiAoaW5kZXgsIHBvc2l0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVmcmVzaEFqYXhWYXJzLmFyck5ld1Bvc2l0aW9uSWRzLmluZGV4T2YocG9zaXRpb25JZCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvc2l0aW9ucyBpZCBpbiBuZXVlciBhbnR3b3J0IG5pY2h0IG1laHIgZW50aGFsdGVuIC0+IGzDtnNjaGUgZmVhdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWZyZXNoQWpheFZhcnMub2JqRmVhdHVyZXNbcG9zaXRpb25JZF0gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yU291cmNlLnJlbW92ZUZlYXR1cmUocmVmcmVzaEFqYXhWYXJzLm9iakZlYXR1cmVzW3Bvc2l0aW9uSWRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlKHJlZnJlc2hBamF4VmFycy5hcnJQb3NpdGlvbklkc1tpbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmVhY2gocmVmcmVzaEFqYXhWYXJzLmFyck5ld1Bvc2l0aW9uSWRzLCBmdW5jdGlvbiAoaW5kZXgsIHBvc2l0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVmcmVzaEFqYXhWYXJzLmFyclBvc2l0aW9uSWRzLmluZGV4T2YocG9zaXRpb25JZCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvc2l0aW9ucyBpZCBpc3Qgbm9jaCBuaWNodCB2b3JoYW5kZW4gLT4gbmV1ZXMgZmVhdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFqYXhWYXJzLmFyclBvc2l0aW9uSWRzLnB1c2gocG9zaXRpb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQWpheFZhcnMub2JqRmVhdHVyZXNbcG9zaXRpb25JZF0gPSByZWZyZXNoQWpheFZhcnMub2JqTmV3RmVhdHVyZXNbcG9zaXRpb25JZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UuYWRkRmVhdHVyZShyZWZyZXNoQWpheFZhcnMub2JqTmV3RmVhdHVyZXNbcG9zaXRpb25JZF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkucmVxdWVzdEZ1bmN0aW9uc1sncmVxdWVzdF8nICsgaXRlbVVpZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICdmdW5jdGlvbic6IHZlY3RvclNvdXJjZS5nZXQoJ3JlZnJlc2hGdW5jdGlvbicpLFxuICAgICAgICAgICAgICAgICAgICAnaW50ZXJ2YWwnOiByZWZyZXNoSW50ZXJ2YWxcbiAgICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgICAgICAgLy8gRW5kZSBFaW5zY2h1YiBuZXVlIEFKQVgtTGF5ZXJcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRm9ybWF0IHR5cGUgJyArIGNvbnRlbnREYXRhLmZvcm1hdCArICcgaW4gb2wuZm9ybWF0IG5vdCBmb3VuZC4nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29udGVudERhdGEuc2V0dGluZ3MuY2x1c3Rlcikge1xuXG4gICAgICAgICAgICAgIGNsdXN0ZXJTb3VyY2UgPSBuZXcgb2wuc291cmNlLkNsdXN0ZXIoe1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlOiA0MCxcbiAgICAgICAgICAgICAgICAvL3RocmVzaG9sZDogMiwgLy9taW5pbXVtIGVsZW1lbnQgY291bnRcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHZlY3RvclNvdXJjZSxcbiAgICAgICAgICAgICAgICB6b29tOiBjb250ZW50RGF0YS5jbHVzdGVyX3pvb21cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coY2x1c3RlclNvdXJjZSk7XG4gICAgICAgICAgICAgIHRoaXMuc3R5bGVGb3JDbHVzdGVyID0gc3R5bGVGb3JDbHVzdGVyO1xuXG4gICAgICAgICAgICAgIC8vdmVjdG9yTGF5ZXIgPSB1dGlscy5nZXRWZWN0b3JMYXllcihjbHVzdGVyU291cmNlLCBzdHlsZUZvckNsdXN0ZXIpO1xuXG4gICAgICAgICAgICAgIHZlY3RvckxheWVyID0gbmV3IG9sLmxheWVyLkFuaW1hdGVkQ2x1c3RlcihcbiAgICAgICAgICAgICAgICB7XHRuYW1lOiAnQ2x1c3RlcicsXG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IGNsdXN0ZXJTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAvLyBVc2UgYSBzdHlsZSBmdW5jdGlvbiBmb3IgY2x1c3RlciBzeW1ib2xpc2F0aW9uXG4gICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVGb3JDbHVzdGVyXG4gICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIgPSB1dGlscy5nZXRWZWN0b3JMYXllcih2ZWN0b3JTb3VyY2UsIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2NvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGVdID8gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbY29udGVudERhdGEubG9jYXRpb25TdHlsZV0uc3R5bGUgOiBudWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogRml0IHRvIGV4dGVuZCAqL1xuICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLnNldHRpbmdzICYmIGNvbnRlbnREYXRhLnNldHRpbmdzLmZpdFRvRXh0ZW5kKSB7XG5cbiAgICAgICAgICAgICAgc2VsZi5maXR0aW5nRXh0ZW5kcyA9IHNlbGYuZml0dGluZ0V4dGVuZHMgfHwge307XG5cbiAgICAgICAgICAgICAgdmVjdG9yU291cmNlLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBjdXJyZW50bHkgc3RvcmVkIGlkJ3NcbiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gc2VsZi5maXR0aW5nRXh0ZW5kcykge1xuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuZml0dGluZ0V4dGVuZHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLnByb3h5LmFjdGl2ZUxheWVySWRzW2ldID09PSBcInVuZGVmaW5lZFwiIHx8IHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHNbMF0gPT0gXCJpbnZpc2libGVcIikge1xuICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzZWxmLmZpdHRpbmdFeHRlbmRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZi5maXR0aW5nRXh0ZW5kc1tpdGVtVWlkXSA9IHZlY3RvclNvdXJjZS5nZXRFeHRlbnQoKTsvL3ZlY3RvclNvdXJjZS5nZXRGZWF0dXJlcygpO1xuICAgICAgICAgICAgICAgIHV0aWxzLmZpdFRvRXh0ZW50cyhzZWxmLmZpdHRpbmdFeHRlbmRzLCBzZWxmLm1hcENvbnRyb2xsZXIubWFwKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVuZCBvZiBmaXQgdG8gZXh0ZW5kXG5cbiAgICAgICAgICAgIGZuQXR0YWNoRGF0YVRvTGF5ZXIodmVjdG9yTGF5ZXIsIGNvbnRlbnREYXRhLmRhdGEpO1xuICAgICAgICAgICAgbGF5ZXJzLnB1c2godmVjdG9yTGF5ZXIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLnR5cGUgPT09IFwidGFibGVcIikgfHwgKHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLnR5cGUgPT09IFwibGlua1wiKSkge1xuICAgICAgICAgICAgdmFyIGxheWVyQ29udGVudCA9IHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNvbnRlbnQ7XG4gICAgICAgICAgICBjb250ZW50RGF0YSA9IGxheWVyQ29udGVudFswXTtcbiAgICAgICAgICAgIGlmIChjb250ZW50RGF0YSAmJiBjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMgJiYgY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLnByb2plY3Rpb24pIHtcbiAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb24gPSBjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMucHJvamVjdGlvbjtcbiAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb24gPSB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZm9yY2UgYWxsIG5vZGVzIGludG8gb25lIGxheWVyXG5cblxuICAgICAgICAgICAgdmFyIGNvbnRlbnRGZWF0dXJlID0gbmV3IG9sLmZvcm1hdFtsYXllckNvbnRlbnRbaV0uZm9ybWF0XSh7fSkucmVhZEZlYXR1cmVzKGxheWVyQ29udGVudFtpXS5kYXRhLCB7XG4gICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBmZWF0dXJlUHJvamVjdGlvbixcbiAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb246IGRhdGFQcm9qZWN0aW9uXG4gICAgICAgICAgICB9KVswXTtcbiAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnY2x1c3Rlcl96b29tJywgY29udGVudERhdGEuY2x1c3Rlcl96b29tKTtcbiAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnY2x1c3Rlcl9wb3B1cCcsIGNvbnRlbnREYXRhLmNsdXN0ZXJfcG9wdXApO1xuICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdsb2NfbGlua3VybCcsIGNvbnRlbnREYXRhLmxvY19saW5rdXJsKTtcbiAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnaG92ZXJfbG9jYXRpb24nLCBjb250ZW50RGF0YS5ob3Zlcl9sb2NhdGlvbik7XG4gICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2hvdmVyX3N0eWxlJywgY29udGVudERhdGEuaG92ZXJfc3R5bGUpO1xuICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdwb3B1cCcsIGxheWVyQ29udGVudFtpXS5kYXRhLnByb3BlcnRpZXMucG9wdXApO1xuICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCd6b29tX29uY2xpY2snLCBjb250ZW50RGF0YS56b29tX29uY2xpY2spO1xuICAgICAgICAgICAgY29udGVudEZlYXR1cmVzLnB1c2goY29udGVudEZlYXR1cmUpO1xuXG5cbiAgICAgICAgICAgIGlmKGkrMSA9PT0gdGhpcy5hcnJMYXllcnNbaXRlbVVpZF0uY29udGVudC5sZW5ndGgpe1xuICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3Rvcih7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXM6IGNvbnRlbnRGZWF0dXJlcyxcbiAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiAnRVBTRzozODU3JyxcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IG5ldyBvbC5mb3JtYXQuR2VvSlNPTigpLFxuXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEgJiYgY29udGVudERhdGEuc2V0dGluZ3MgJiYgY29udGVudERhdGEuc2V0dGluZ3MuY2x1c3Rlcikge1xuICAgICAgICAgICAgICAgIGNsdXN0ZXJTb3VyY2UgPSBuZXcgb2wuc291cmNlLkNsdXN0ZXIoe1xuICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IDQwLFxuICAgICAgICAgICAgICAgICAgem9vbTogY29udGVudERhdGEuY2x1c3Rlcl96b29tLFxuXG4gICAgICAgICAgICAgICAgICAvL3RocmVzaG9sZDogMiwgLy9taW5pbXVtIGVsZW1lbnQgY291bnRcbiAgICAgICAgICAgICAgICAgIHNvdXJjZTogdmVjdG9yU291cmNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy92ZWN0b3JMYXllciA9IHV0aWxzLmdldFZlY3RvckxheWVyKGNsdXN0ZXJTb3VyY2UsIHN0eWxlRm9yQ2x1c3Rlcik7XG5cbiAgICAgICAgICAgICAgICB2ZWN0b3JMYXllciA9IG5ldyBvbC5sYXllci5BbmltYXRlZENsdXN0ZXIoXG4gICAgICAgICAgICAgICAgICB7XHRuYW1lOiAnQ2x1c3RlcicsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogY2x1c3RlclNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIGEgc3R5bGUgZnVuY3Rpb24gZm9yIGNsdXN0ZXIgc3ltYm9saXNhdGlvblxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVGb3JDbHVzdGVyXG4gICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZlY3RvckxheWVyID0gdXRpbHMuZ2V0VmVjdG9yTGF5ZXIodmVjdG9yU291cmNlLCBjb250ZW50RGF0YSAmJiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tjb250ZW50RGF0YS5sb2NhdGlvblN0eWxlXSA/IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2NvbnRlbnREYXRhLmxvY2F0aW9uU3R5bGVdLnN0eWxlIDogbnVsbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGF5ZXJzLnB1c2godmVjdG9yTGF5ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9yZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFyckxheWVyc1tpdGVtVWlkXS5jb250ZW50Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgLy9UT0RPOiByZWZhY3RvcmVuIHVuZCBrw7xyemVuIVxuICAgICAgICAgICAgICAvLyB3ZSBoYXZlIG92ZXJwYXNzIHJlcXVlc3Qgd2l0aCByZWFzc2lnbmVkIGZvcnVtIGxheWVyc1xuICAgICAgICAgICAgICAvLyBmb3J1bSBsYXllcnMgY2FuIG5vdCBiZSBkcmF3biB2aWEgdGhlIG5vcm1hbCBkcmF3TGF5ZXIsIGJlY2F1c2UgdGhleSBkbyBub3QgaGF2ZSBhIFVpZFxuICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEgJiYgKHR5cGVvZiBvbC5mb3JtYXRbY29udGVudERhdGEuZm9ybWF0XSA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMgJiYgY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLnByb2plY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uID0gY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLnByb2plY3Rpb247XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbiA9IHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFByb2plY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZmVhdHVyZXMgPSAobmV3IG9sLmZvcm1hdFtjb250ZW50RGF0YS5mb3JtYXRdKHt9KSkucmVhZEZlYXR1cmVzKGNvbnRlbnREYXRhLmRhdGEsIHtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBmZWF0dXJlUHJvamVjdGlvbixcbiAgICAgICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiBkYXRhUHJvamVjdGlvblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1pc3NpbmdTdHlsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgdW5zdHlsZWRGZWF0dXJlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmVhdHVyZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlc1tqXS5nZXQoJ3N0eWxlSWQnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJyldICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2ZlYXR1cmVzW2pdLmdldCgnc3R5bGVJZCcpXS5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzW2pdLnNldFN0eWxlKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2ZlYXR1cmVzW2pdLmdldCgnc3R5bGVJZCcpXS5zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgbWlzc2luZ1N0eWxlcy5wdXNoKGZlYXR1cmVzW2pdLmdldCgnc3R5bGVJZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICB1bnN0eWxlZEZlYXR1cmVzLnB1c2goZmVhdHVyZXNbal0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmVjdG9yU3R5bGUgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tjb250ZW50RGF0YS5sb2NhdGlvblN0eWxlXSAmJiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tjb250ZW50RGF0YS5sb2NhdGlvblN0eWxlXS5zdHlsZTtcblxuICAgICAgICAgICAgICAgIGlmIChtaXNzaW5nU3R5bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIC8vVE9ETyB0aGVyZSBhcmUgdW5zdHlsZWQgZmVhdHVyZXMgYmVjYXVzZSBzb21lIHN0eWxlcyB3ZXJlIG5vdCBsb2FkZWRcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlczogZmVhdHVyZXMsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Rpb246ICdFUFNHOjM4NTcnLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IG5ldyBvbC5mb3JtYXQuR2VvSlNPTigpXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGNsdXN0ZXJTb3VyY2UgPSBuZXcgb2wuc291cmNlLkNsdXN0ZXIoe1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZTogNDAsXG4gICAgICAgICAgICAgICAgICAgIHpvb206IGNvbnRlbnREYXRhLmNsdXN0ZXJfem9vbSxcblxuICAgICAgICAgICAgICAgICAgICAvL3RocmVzaG9sZDogMiwgLy9taW5pbXVtIGVsZW1lbnQgY291bnRcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiB2ZWN0b3JTb3VyY2VcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllciA9IHV0aWxzLmdldFZlY3RvckxheWVyKGNsdXN0ZXJTb3VyY2UsIHZlY3RvclN0eWxlKTtcbiAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5kYXRhICYmIGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMucG9wdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIucG9wdXAgPSBjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMucG9wdXA7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMudG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci50b29sdGlwID0gY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLnRvb2x0aXA7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIubGFiZWwgPSBjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMub25jbGlja196b29tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLm9uY2xpY2tfem9vbSA9IGNvbnRlbnREYXRhLmRhdGEucHJvcGVydGllcy5vbmNsaWNrX3pvb207XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgbGF5ZXJzLnB1c2godmVjdG9yTGF5ZXIpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0Zvcm1hdCB0eXBlICcgKyBjb250ZW50RGF0YS5mb3JtYXQgKyAnIGluIG9sLmZvcm1hdCBub3QgZm91bmQuJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vbm8gY29udGVudERhdGEsIG1heWJlIGEgbGlua1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbm9ybWFsLCBub3Qgb3ZlcnBhc3MgbGF5ZXJcbiAgICAgICAgICAgICAgc2VsZi5kcmF3TGF5ZXIoaXRlbVVpZCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG5cblxuICAgICAgLy8gYWRkIHZlY3RvciBsYXllciBncm91cFxuICAgICAgbGF5ZXJHcm91cCA9IG5ldyBvbC5sYXllci5Hcm91cCh7XG4gICAgICAgIGxheWVyczogbGF5ZXJzXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLnZlY3RvckxheWVyID0gbGF5ZXJHcm91cDtcbiAgICAgIHNlbGYubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIobGF5ZXJHcm91cCk7XG4gICAgICAvL3NlbGYuY29tYmluZShzZWxmKTtcblxuICAgIH1cbiAgICBlbHNlIGlmKHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLmFzeW5jX2NvbnRlbnQgPT0gMSl7XG4gICAgICAgICAgc3R5bGVGb3JDbHVzdGVyID0gZnVuY3Rpb24oZmVhdHVyZSwgcmVzb2x1dGlvbil7XG4gICAgICAgICAgICAgIHZhciBzdHlsZUlkLFxuICAgICAgICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICAgICAgICBpY29uT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgcmFkaXVzLFxuICAgICAgICAgICAgICAgICAgZmlsbGNvbG9yLFxuICAgICAgICAgICAgICAgICAgZm9udGNvbG9yO1xuICAgICAgICAgICAgICBpZihmZWF0dXJlICYmIGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpKXtcbiAgICAgICAgICAgICAgICAgIGlmKHN0eWxlSWQgPSBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKVswXS5nZXQoJ2xvY2F0aW9uU3R5bGUnKSl7XG4gICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0gJiYgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWzBdLHJlc29sdXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmKCFzdHlsZSl7XG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSBbXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmKGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpLmxlbmd0aCA+IDEpe1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBidWJibGUtb2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgaWNvbk9mZnNldCA9IFswLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZVswXS5nZXRJbWFnZSgpLmdldFJhZGl1cyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXMgPSBwYXJzZUludChzdHlsZVswXS5nZXRJbWFnZSgpLmdldFJhZGl1cygpLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbk9mZnNldCA9IFswLCByYWRpdXNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uT2Zmc2V0ID0gc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRBbmNob3IoKSB8fCBbMCwgMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBmaWxsY29sb3IgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoJzQ5NzVBOCcse1xuICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiA3MFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYoY29udGVudERhdGEuY2x1c3Rlcl9maWxsY29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KGNvbnRlbnREYXRhLmNsdXN0ZXJfZmlsbGNvbG9yLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiA3MFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYoZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbMF0uZ2V0KCdjbHVzdGVyX2ZpbGxjb2xvcicpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWzBdLmdldCgnY2x1c3Rlcl9maWxsY29sb3InKSx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogNzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGZvbnRjb2xvciA9ICcjRkZGRkZGJztcbiAgICAgICAgICAgICAgICAgICAgICBpZihmZWF0dXJlLmdldCgnZmVhdHVyZXMnKVswXS5nZXQoJ2NsdXN0ZXJfZm9udGNvbG9yJykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmb250Y29sb3IgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbMF0uZ2V0KCdjbHVzdGVyX2ZvbnRjb2xvcicpLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAxMDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGUucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG5ldyBvbC5zdHlsZS5UZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIuKXj1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IFwiNjBweCBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogLTEgKiBpY29uT2Zmc2V0WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IC0xICogaWNvbk9mZnNldFsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBmaWxsY29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgb2wuc3R5bGUuVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykubGVuZ3RoLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogLTEgKiBpY29uT2Zmc2V0WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IC0xICogaWNvbk9mZnNldFsxXSArIDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZm9udGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYoc3R5bGUpe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXF1ZXN0VmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICAgICAgICBsb2FkZXI6IGZ1bmN0aW9uIChleHRlbnQsIHJlc29sdXRpb24sIHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIHZhciBib3VuZGluZ0FycmF5LFxuICAgICAgICAgICAgICAgICAgICAgIHN0ckJvdW5kaW5nQm94LFxuICAgICAgICAgICAgICAgICAgICAgIHVybDtcbiAgICAgICAgICAgICAgICAgIHNlbGYubWFwQ29udHJvbGxlci5zcGlubmVyLnNob3coKTtcbiAgICAgICAgICAgICAgICAgIGJvdW5kaW5nQXJyYXkgPSBvbC5wcm9qLnRyYW5zZm9ybUV4dGVudChleHRlbnQsIHByb2plY3Rpb24sICdFUFNHOjQzMjYnKTtcbiAgICAgICAgICAgICAgICAgIHN0ckJvdW5kaW5nQm94ID0gYm91bmRpbmdBcnJheVswXSsnLCcrYm91bmRpbmdBcnJheVsxXSsnOycrYm91bmRpbmdBcnJheVsyXSsnLCcrYm91bmRpbmdBcnJheVszXTtcbiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmxheWVyUmVxdWVzdHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYubGF5ZXJSZXF1ZXN0cyA9IHt9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYubGF5ZXJSZXF1ZXN0c1snbGF5ZXJEYXRhUmVxdWVzdCcgKyBpdGVtVWlkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5sYXllclJlcXVlc3RzWydsYXllckRhdGFSZXF1ZXN0JyArIGl0ZW1VaWRdLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZighc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc2VsZi5hcnJMYXllcnNbaXRlbVVpZF0ubG9jc3R5bGVdKXtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhbc2VsZi5hcnJMYXllcnNbaXRlbVVpZF0ubG9jc3R5bGVdLCB7ZG9uZTogZnVuY3Rpb24oKSB7fX0pO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBzZWxmLmxheWVyUmVxdWVzdHNbJ2xheWVyRGF0YVJlcXVlc3QnICsgaXRlbVVpZF0gPSBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiBzZWxmLnByb3h5LmFwaV9sYXllcmNvbnRlbnRkYXRhX3VybCArICcvJyArIHNlbGYuYXJyTGF5ZXJzW2l0ZW1VaWRdLmlkICsnLycrc3RyQm91bmRpbmdCb3gsXG4gICAgICAgICAgICAgICAgICB9KS5kb25lKCBmdW5jdGlvbiAoZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5sZW5ndGggPiAwICYmICFjb250ZW50RmVhdHVyZXMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgbGV0IGxheWVyID0gc2VsZi5hcnJMYXllcnNbaXRlbVVpZF07XG4gICAgICAgICAgICAgICAgICAgICAgbG9vcERhdGE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnREYXRhID0gZGF0YVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBjb250ZW50RmVhdHVyZXMubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNvbnRlbnREYXRhLmlkID09PSBjb250ZW50RmVhdHVyZXNbal0uaWQpIGNvbnRpbnVlIGxvb3BEYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdENvb3JkaW5hdGUgPSBvbC5wcm9qLnRyYW5zZm9ybShbcGFyc2VGbG9hdChjb250ZW50RGF0YVsnZ2VveCddKSwgcGFyc2VGbG9hdChjb250ZW50RGF0YVsnZ2VveSddKV0sICdFUFNHOjQzMjYnLCAnRVBTRzozODU3JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IG5ldyBvbC5nZW9tLlBvaW50KHJlc3VsdENvb3JkaW5hdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZShwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXRJZChjb250ZW50RGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2NsdXN0ZXJfem9vbScsIGxheWVyLmNsdXN0ZXIuem9vbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2NsdXN0ZXJfcG9wdXAnLCBsYXllci5jbHVzdGVyLnBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnY2x1c3Rlcl9maWxsY29sb3InLCBsYXllci5jbHVzdGVyLmZpbGxjb2xvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2NsdXN0ZXJfZm9udGNvbG9yJywgbGF5ZXIuY2x1c3Rlci5mb250Y29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdsb2NfbGlua3VybCcsIGxheWVyLmxvY19saW5rdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnaG92ZXJfbG9jYXRpb24nLCBsYXllci5ob3Zlcl9sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2hvdmVyX3N0eWxlJywgbGF5ZXIuaG92ZXJfc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvcHVwID0gY29udGVudERhdGFbJ3BvcHVwJ10gPyBjb250ZW50RGF0YVsncG9wdXAnXSA6ICQuZXh0ZW5kKHt9LGxheWVyLnBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBvcHVwICYmIHBvcHVwLmNvbnRlbnQgJiYgcG9wdXAuY29udGVudC5zZWFyY2ggJiYgcG9wdXAuY29udGVudC5zZWFyY2goJ2l0ZW1JZCcpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXAuY29udGVudCA9IHBvcHVwLmNvbnRlbnQucmVwbGFjZSgnaXRlbUlkJyxjb250ZW50RGF0YVsnaWQnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb250ZW50RGF0YVsnbGFiZWwnXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnbGFiZWwnLGNvbnRlbnREYXRhWydsYWJlbCddKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29udGVudERhdGFbJ3Rvb2x0aXAnXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCd0b29sdGlwJyxjb250ZW50RGF0YVsndG9vbHRpcCddKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdwb3B1cCcsIHBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnem9vbV9vbmNsaWNrJywgbGF5ZXIuem9vbV9vbmNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgndGlkJywgY29udGVudERhdGFbJ2lkJ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvY3N0eWxlID0gY29udGVudERhdGFbJ2xvY3N0eWxlJ10gfHwgbGF5ZXIubG9jc3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2xvY2F0aW9uU3R5bGUnLCBsb2NzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihsb2NzdHlsZSAmJiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsb2NzdHlsZV0gJiYgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbbG9jc3R5bGVdLnN0eWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXRTdHlsZShzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsb2NzdHlsZV0uc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlcy5wdXNoKGNvbnRlbnRGZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXVuc3R5bGVkRmVhdHVyZXMpe3Vuc3R5bGVkRmVhdHVyZXMgPVtdO31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighbWlzc2luZ1N0eWxlcyl7bWlzc2luZ1N0eWxlcyA9IFtdO31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ3N0eWxlSWQnLGxvY3N0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnN0eWxlZEZlYXR1cmVzLnB1c2goY29udGVudEZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NpbmdTdHlsZXNbbG9jc3R5bGVdID0gbG9jc3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmKG1pc3NpbmdTdHlsZXMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhtaXNzaW5nU3R5bGVzLCB7ZG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgdW5zdHlsZWRGZWF0dXJlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZUlkID11bnN0eWxlZEZlYXR1cmVzW2ldLmdldCgnc3R5bGVJZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnN0eWxlZEZlYXR1cmVzW2ldLnNldFN0eWxlKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFZlY3RvclNvdXJjZS5hZGRGZWF0dXJlKHVuc3R5bGVkRmVhdHVyZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nU3R5bGVzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RWZWN0b3JTb3VyY2UuYWRkRmVhdHVyZXMoY29udGVudEZlYXR1cmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1hcENvbnRyb2xsZXIuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdHJhdGVneTogb2wubG9hZGluZ3N0cmF0ZWd5LmJib3hcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmKHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNsdXN0ZXIpe1xuICAgICAgICAgICAgbGV0IGxheWVyID0gc2VsZi5hcnJMYXllcnNbaXRlbVVpZF07XG4gICAgICAgICAgICBsZXQgbWFwID0gc2VsZi5tYXBDb250cm9sbGVyLm1hcDtcbiAgICAgICAgICAgIGxldCBjdXJyZW50Wm9vbSA9IG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpO1xuICAgICAgICAgICAgbGV0IGNsdXN0ZXJEaXN0YW5jZSA9IHRoaXMuYXJyTGF5ZXJzW2l0ZW1VaWRdLmNsdXN0ZXIuZGlzdGFuY2UgfHwgMjA7XG4gICAgICAgICAgICBpZiAoY3VycmVudFpvb20gPj0gbGF5ZXIuY2x1c3Rlci56b29tKSB7XG4gICAgICAgICAgICAgIGNsdXN0ZXJEaXN0YW5jZSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsdXN0ZXJTb3VyY2UgPSBuZXcgb2wuc291cmNlLkNsdXN0ZXIoe1xuICAgICAgICAgICAgICBkaXN0YW5jZTogY2x1c3RlckRpc3RhbmNlLFxuICAgICAgICAgICAgICAvL3RocmVzaG9sZDogMiwgLy9taW5pbXVtIGVsZW1lbnQgY291bnRcbiAgICAgICAgICAgICAgc291cmNlOiByZXF1ZXN0VmVjdG9yU291cmNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIgPSBuZXcgb2wubGF5ZXIuQW5pbWF0ZWRDbHVzdGVyKFxuICAgICAgICAgICAgICAgICAge1x0bmFtZTogJ0NsdXN0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogY2x1c3RlclNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgYSBzdHlsZSBmdW5jdGlvbiBmb3IgY2x1c3RlciBzeW1ib2xpc2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlRm9yQ2x1c3RlclxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgIHZlY3RvckxheWVyID0gbmV3IG9sLmxheWVyLlZlY3RvcihcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnTGF5ZXInLFxuICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogcmVxdWVzdFZlY3RvclNvdXJjZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXllcnMgPSBsYXllcnMgfHwgW107XG4gICAgICAgICAgbGF5ZXJzLnB1c2godmVjdG9yTGF5ZXIpO1xuICAgICAgICBsYXllckdyb3VwID0gbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgICAgIGxheWVyczogbGF5ZXJzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFyckxheWVyc1tpdGVtVWlkXS52ZWN0b3JMYXllciA9IGxheWVyR3JvdXA7XG4gICAgICAgIHNlbGYubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIobGF5ZXJHcm91cCk7XG5cblxuICAgICAgfVxuICAgICAgIGVsc2V7XG4gICAgICAgIHNlbGYubWFwQ29udHJvbGxlci5zcGlubmVyLnNob3coKTtcbiAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgIGRhdGFUeXBlOiBzZWxmLm1hcENvbnRyb2xsZXIuZGF0YS5qc29ucCA/IFwianNvbnBcIiA6IFwianNvblwiLFxuICAgICAgICAgIHVybDogc2VsZi5wcm94eS5hcGlfbGF5ZXJjb250ZW50X3VybCArICcvJyArIHNlbGYuYXJyTGF5ZXJzW2l0ZW1VaWRdLmlkLFxuICAgICAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgbGV0IGosXG4gICAgICAgICAgICAgICAgbmV3TG9jYXRpb25TdHlsZXM7XG5cbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBuZXdMb2NhdGlvblN0eWxlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGRhdGEubGVuZ3RoOyBqICs9IDEpIHtcblxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFyckxheWVyc1tpdGVtVWlkXS5jb250ZW50ID0gc2VsZi5hcnJMYXllcnNbaXRlbVVpZF0uY29udGVudCB8fCBbXTtcblxuICAgICAgICAgICAgICAgICAgICBzZWxmLmFyckxheWVyc1tpdGVtVWlkXS5jb250ZW50LnB1c2goZGF0YVtqXSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0xvY2F0aW9uU3R5bGVzLnB1c2goZGF0YVtqXS5sb2NhdGlvblN0eWxlKTtcbiAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZi5wcm94eS5jaGVja0xvY2F0aW9uU3R5bGVzKHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQFRPRE86IGNoZWNrIHRoaXMhXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvYWRMYXllckNvbnRlbnQoaXRlbVVpZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9KS5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5tYXBDb250cm9sbGVyLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuXG4gIH0gLy8gZW5kIG9mIFwibG9hZExheWVyQ29udGVudCgpXCJcblxuICBoaWRlTGF5ZXIobGF5ZXJVaWQsIGtlZXBMYXllcikge1xuXG4gICAgdmFyIGxheWVyLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgICBsYXllciA9IHRoaXMuYXJyTGF5ZXJzW2xheWVyVWlkXTtcbiAgICBpZiAoIWxheWVyKSB7XG4gICAgICAvL2NvbnNvbGUud2FybignQ2Fubm90IGhpZGUgdW5rbm93biBsYXllciAoJyArIGxheWVyVWlkICsgJyknKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBsYXllciBpcyBsaXN0ZWQgYXMgXCJhY3RpdmVcIlxuICAgIC8vIG90aGVyd2lzZSB0aGVyZSBpcyBub3RoaW5nIHRvIHJlbW92ZSBvciBjaGFuZ2VcbiAgICBpZiAodGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllclVpZF0pIHtcbiAgICAgIC8vIHJlbW92ZSBsYXllciBmcm9tIG1hcCAoaWYgaXQgd2FzIHZpc2libGUgYmVmb3JlKVxuICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJVaWRdID09PSAndmlzaWJsZScgJiYgbGF5ZXIudmVjdG9yTGF5ZXIpIHtcbiAgICAgICAgLy8gW2luZm9dOiBkbyBub3QgdXNlIFwibGF5ZXIudmVjdG9yTGF5ZXIuc2V0VmlzaWJsZShmYWxzZSk7XCJcbiAgICAgICAgLy8gICAgICAgICBzZWUgXCJzaG93TGF5ZXIoKVwiIGZvciBtb3JlIGluZm9ybWF0aW9uXG4gICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlTGF5ZXIobGF5ZXIudmVjdG9yTGF5ZXIpO1xuICAgICAgfVxuICAgICAgLy8gb25seSBtYXJrIGFzIFwiaW52aXNpYmxlXCIgaWYgXCJrZWVwTGF5ZXJcIiBpcyBcInRydWVcIlxuICAgICAgLy8gdGhpcyBpcyBuZWVkZWQgZm9yIHRoZSB6b29tLWJvdW5kc1xuICAgICAgaWYgKGtlZXBMYXllcikge1xuICAgICAgICB0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW2xheWVyVWlkXSA9ICdpbnZpc2libGUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJVaWRdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNoaWxkcyBuZWVkZWQgdG8gYmUgY2hlY2tlZCBpbmRlcGVuZGVudCBmcm9tIGl0cyBwYXJlbnRzIHN0YXRlXG5cblxuICAgIC8vVG9EbyBsb2FkaW5nIHByb2JsZW1cbiAgICBpZiAobGF5ZXIgJiYgbGF5ZXIuaGFzQ2hpbGRzKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGF5ZXIuY2hpbGRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuaGlkZUxheWVyKGxheWVyLmNoaWxkc1tpXS5pZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKGxheWVyLmlzSW5hY3RpdmUpe1xuICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnModGhpcy5wcm94eS5ob29rX2xheWVyX3Zpc2liaWxpdHksIGxheWVyVWlkKTtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsYXllci5pc0luYWN0aXZlID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLmxheWVyUmVxdWVzdHMgJiYgdHlwZW9mIHRoaXMubGF5ZXJSZXF1ZXN0c1snbGF5ZXJfcmVxdWVzdF8nICsgbGF5ZXJVaWRdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMubGF5ZXJSZXF1ZXN0c1snbGF5ZXJfcmVxdWVzdF8nICsgbGF5ZXJVaWRdID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmxheWVyUmVxdWVzdHNbJ2xheWVyX3JlcXVlc3RfJyArIGxheWVyVWlkXSk7XG4gICAgICAgICAgZGVsZXRlIHRoaXMubGF5ZXJSZXF1ZXN0c1snbGF5ZXJfcmVxdWVzdF8nICsgbGF5ZXJVaWRdO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvL3RoaXMuY29tYmluZUxheWVycyh0aGlzKTtcbiAgICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5zZXRDZW50ZXIoW3RoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldENlbnRlcigpWzBdKzAuMDAxLHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldENlbnRlcigpWzFdXSk7XG4gICAgLy8gaG9va3NcbiAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh0aGlzLnByb3h5Lmhvb2tfbGF5ZXJfdmlzaWJpbGl0eSwgbGF5ZXJVaWQpO1xuICB9IC8vIGVuZCBvZiBcImhpZGVMYXllcigpXCJcbiAgaGlkZUNoaWxkTGF5ZXIobGF5ZXJVaWQsIGNoaWxkVWlkKXtcbiAgICBsZXQgbGF5ZXIgPSB0aGlzLmFyckxheWVyc1tsYXllclVpZF1cbiAgICBjaGlsZFVpZCA9IGNoaWxkVWlkLnJlcGxhY2UobGF5ZXJVaWQsJycpO1xuICAgIGxldCBjaGlsZExheWVyID0gbGF5ZXIudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVtjaGlsZFVpZF1cbiAgICBjaGlsZExheWVyLnNldCgndmlzaWJsZScsIGZhbHNlKTtcbiAgfVxuICBzaG93Q2hpbGRMYXllcihsYXllclVpZCwgY2hpbGRVaWQpe1xuICAgICAgbGV0IGxheWVyID0gdGhpcy5hcnJMYXllcnNbbGF5ZXJVaWRdXG4gICAgICBjaGlsZFVpZCA9IGNoaWxkVWlkLnJlcGxhY2UobGF5ZXJVaWQsJycpO1xuICAgICAgbGV0IGNoaWxkTGF5ZXIgPSBsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpW2NoaWxkVWlkXVxuICAgICAgY2hpbGRMYXllci5zZXQoJ3Zpc2libGUnLCB0cnVlKTtcbiAgfVxuXG4gIHNob3dMYXllcihsYXllclVpZCkge1xuICAgIHZhciBsYXllcixcbiAgICAgIG1hcExheWVycyxcbiAgICAgIGFkZExheWVyLFxuICAgICAgaSxcbiAgICAgIGosXG4gICAgICBhY3RpdmVGb3Jab29tO1xuXG4gICAgYWN0aXZlRm9yWm9vbSA9IHRoaXMucHJveHkuY2hlY2tMYXllcklzQWN0aXZlRm9yWm9vbShsYXllclVpZCk7XG4gICAgbGF5ZXIgPSB0aGlzLmFyckxheWVyc1tsYXllclVpZF07XG5cbiAgICBpZiAoYWN0aXZlRm9yWm9vbSkge1xuICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJVaWRdICE9PSAndmlzaWJsZScpIHtcbiAgICAgICAgLy9pZiAobGF5ZXIubGlua19pZCkge1xuICAgICAgICAvLyAgdGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllci5saW5rX2lkXSA9ICd2aXNpYmxlJztcbiAgICAgICAgLy99IGVsc2VcbiAgICAgICAgaWYgKGxheWVyICYmIGxheWVyLnZlY3RvckxheWVyKSB7XG4gICAgICAgICAgLy8gW2luZm9dOiBkbyBub3QgdXNlOiBcImxheWVyLnZlY3RvckxheWVyLnNldFZpc2libGUodHJ1ZSk7XCJcbiAgICAgICAgICAvLyAgICAgICAgIEFsd2F5cyBhZGQgYW5kIHJlbW92ZSBMYXllcnMsIHNvIHRoYXQgdGhlIGxhc3RcbiAgICAgICAgICAvLyAgICAgICAgIGNsaWNrZWQgbGF5ZXIgaXMgYWx3YXlzIG9udG9wIG9mIHRoZSBvdGhlcnMuXG5cbiAgICAgICAgICAvLyBjaGVjayBpZiBsYXllciBpcyByZWFsbHkgbm90IGFscmVhZHkgb24gdGhlIG1hcFxuICAgICAgICAgIC8vIHRvIHByZXZlbnQgYWRkaW5nIHRoZSBzYW1lIGxheWVyIG11bHRpcGxlIHRpbWVzXG4gICAgICAgICAgYWRkTGF5ZXIgPSB0cnVlO1xuICAgICAgICAgIG1hcExheWVycyA9IHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0TGF5ZXJzKCk7XG4gICAgICAgICAgbWFwTGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT09IGxheWVyLnZlY3RvckxheWVyKSB7XG4gICAgICAgICAgICAgIGFkZExheWVyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGFkZExheWVyKSB7XG4gICAgICAgICAgICBpZihsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdICYmIGxheWVyLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0ucG9wdXAgJiYgbGF5ZXIudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXS5wb3B1cC5zaG93UG9wdXBPbkFjdGl2ZSl7XG4gICAgICAgICAgICAgIGM0Zy5tYXBzLnBvcHVwLiRjb250ZW50Lmh0bWwoJycpO1xuICAgICAgICAgICAgICBjNGcubWFwcy5wb3B1cC4kcG9wdXAuYWRkQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkFDVElWRSkuYWRkQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkxPQURJTkcpO1xuICAgICAgICAgICAgICBjNGcubWFwcy5wb3B1cC5zcGlubmVyLnNob3coKTtcbiAgICAgICAgICAgICAgdmFyIHBvcHVwSW5mb3MgPSBsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdLnBvcHVwO1xuICAgICAgICAgICAgICB2YXIgZmVhdHVyZXMgPSBsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgIHZhciBjb29yZCA9IGZlYXR1cmVzWycwJ10uZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgICAgICAgICBpZiAocG9wdXBJbmZvcy5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mb3M7XG4gICAgICAgICAgICAgICAgb2JqUG9wdXAuZmVhdHVyZSA9IGZlYXR1cmVzWycwJ107XG4gICAgICAgICAgICAgICAgb2JqUG9wdXAubGF5ZXIgPSBsYXllci52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdO1xuICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCwgb2JqUG9wdXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnByb3h5LnNldFBvcHVwKG9ialBvcHVwKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICAgICAgdXJsOiBzZWxmLmFwaV9pbmZvd2luZG93X3VybCArICcvJyArIHBvcHVwSW5mb3MuY29udGVudCxcbiAgICAgICAgICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3B1cEluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHBvcHVwSW5mb3MuYXN5bmMsXG4gICAgICAgICAgICAgICAgICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgIHBvcHVwOiBwb3B1cEluZm9zLnBvcHVwLFxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRpbmdfbGluazogcG9wdXBJbmZvcy5yb3V0aW5nX2xpbmtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm87XG4gICAgICAgICAgICAgICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBmZWF0dXJlc1snMCddO1xuICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5sYXllciA9IGxheWVyO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwLCBvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LnNldFBvcHVwKG9ialBvcHVwKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihsYXllci52ZWN0b3JMYXllcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubG9hZExheWVyQ29udGVudChsYXllclVpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllclVpZF0gPSAndmlzaWJsZSc7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy9pZiAobGF5ZXIubGlua19pZCkge1xuICAgICAgICAvLyAgdGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllci5saW5rX2lkXSA9ICdpbnZpc2libGUnO1xuICAgICAgICAvL30gZWxzZSB7XG4gICAgICAgIC8vdGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllclVpZF0gPSAnaW52aXNpYmxlJztcbiAgICAgICAgLy99XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxheWVyICYmIGxheWVyLmhhc0NoaWxkcyAmJiBhY3RpdmVGb3Jab29tKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGF5ZXIuY2hpbGRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuc2hvd0xheWVyKGxheWVyLmNoaWxkc1tpXS5pZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxheWVyICYmIGFjdGl2ZUZvclpvb20pIHtcbiAgICAgIGxheWVyLmlzSW5hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRoaXMucHJveHkucmVxdWVzdEZ1bmN0aW9uc1sncmVxdWVzdF8nICsgbGF5ZXJVaWRdICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cbiAgICAgIGlmICh0aGlzLmxheWVyUmVxdWVzdHMgJiYgdHlwZW9mIHRoaXMubGF5ZXJSZXF1ZXN0c1snbGF5ZXJfcmVxdWVzdF8nICsgbGF5ZXJVaWRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRoaXMubGF5ZXJSZXF1ZXN0c1snbGF5ZXJfcmVxdWVzdF8nICsgbGF5ZXJVaWRdID0gd2luZG93LnNldEludGVydmFsKHRoaXMucHJveHkucmVxdWVzdEZ1bmN0aW9uc1sncmVxdWVzdF8nICsgbGF5ZXJVaWRdLmZ1bmN0aW9uLCB0aGlzLnByb3h5LnJlcXVlc3RGdW5jdGlvbnNbJ3JlcXVlc3RfJyArIGxheWVyVWlkXS5pbnRlcnZhbCk7XG4gICAgICB9XG5cbiAgICB9XG4gICAgLy90aGlzLmNvbWJpbmVMYXllcnModGhpcyk7XG4gICAgLy8gaG9va3NcbiAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh0aGlzLnByb3h5Lmhvb2tfbGF5ZXJfdmlzaWJpbGl0eSwgbGF5ZXJVaWQpO1xuICB9IC8vIGVuZCBvZiBcInNob3dMYXllcigpXCJcblxuICBkcmF3TGF5ZXIoaXRlbVVpZCkge1xuXG4gICAgdmFyIHNlbGYsXG4gICAgICBlbGVtZW50LFxuICAgICAgZWxlbWVudENvbnRlbnQsXG4gICAgICBsYXllcnMsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIG1pc3NpbmdTdHlsZXMsXG4gICAgICB1bnN0eWxlZEZlYXR1cmVzLFxuICAgICAgZmVhdHVyZXMsXG4gICAgICBkYXRhUHJvamVjdGlvbixcbiAgICAgIGZlYXR1cmVQcm9qZWN0aW9uLFxuICAgICAgdmVjdG9yU291cmNlLFxuICAgICAgdmVjdG9yTGF5ZXIsXG4gICAgICB2ZWN0b3JTdHlsZSxcbiAgICAgIGxheWVyR3JvdXA7XG5cbiAgICBzZWxmID0gdGhpcztcbiAgICBlbGVtZW50ID0gdGhpcy5hcnJMYXllcnNbaXRlbVVpZF07XG5cbiAgICAvLyBpZiAoIWVsZW1lbnQuaGlkZSkge1xuXG4gICAgbGF5ZXJzID0gW107XG4gICAgaWYgKGVsZW1lbnQuY29udGVudCAmJiBlbGVtZW50LmNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnQuY29udGVudC5sZW5ndGg7IGkgKz0gMSkge1xuXG4gICAgICAgIGVsZW1lbnRDb250ZW50ID0gZWxlbWVudC5jb250ZW50W2ldO1xuICAgICAgICBpZiAoIWVsZW1lbnRDb250ZW50KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvbC5mb3JtYXRbZWxlbWVudENvbnRlbnQuZm9ybWF0XSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cbiAgICAgICAgICAvLyBpZiAoZWxlbWVudC5jb250ZW50W2ldLm9yaWdUeXBlID09PSAnc2luZ2xlJykge1xuICAgICAgICAgIC8vICAgZmVhdHVyZVByb2plY3Rpb24gPSB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAvLyAgIGZlYXR1cmVQcm9qZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzICYmIGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICBkYXRhUHJvamVjdGlvbiA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wcm9qZWN0aW9uO1xuICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb24gPSB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5mb3JtYXQgPT09IFwiT1NNWE1MXCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5nZW9tZXRyeSAmJiBlbGVtZW50Q29udGVudC5kYXRhLmdlb21ldHJ5LnR5cGUgPT09IFwiQ2lyY2xlXCIpIHtcbiAgICAgICAgICAgIC8vIGRyYXcgY2lyY2xlIGdlb21ldHJpZXNcbiAgICAgICAgICAgIGZlYXR1cmVzID0gW107XG4gICAgICAgICAgICBsZXQgZmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKFxuICAgICAgICAgICAgICBuZXcgb2wuZ2VvbS5DaXJjbGUoXG4gICAgICAgICAgICAgICAgb2wucHJvai5mcm9tTG9uTGF0KGVsZW1lbnRDb250ZW50LmRhdGEuZ2VvbWV0cnkuY2VudGVyKSxcbiAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KGVsZW1lbnRDb250ZW50LmRhdGEuZ2VvbWV0cnkucmFkaXVzKVxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdzdHlsZUlkJywgZWxlbWVudENvbnRlbnQubG9jYXRpb25TdHlsZSk7XG4gICAgICAgICAgICBmZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyByZW1haW5pbmcgZ2VvbWV0cmllc1xuICAgICAgICAgICAgZmVhdHVyZXMgPSAobmV3IG9sLmZvcm1hdFtlbGVtZW50Q29udGVudC5mb3JtYXRdKHt9KSkucmVhZEZlYXR1cmVzKGVsZW1lbnRDb250ZW50LmRhdGEsIHtcbiAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246IGZlYXR1cmVQcm9qZWN0aW9uLFxuICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogZGF0YVByb2plY3Rpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1pc3NpbmdTdHlsZXMgPSBbXTtcbiAgICAgICAgICB1bnN0eWxlZEZlYXR1cmVzID0gW107XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGZlYXR1cmVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAvLyBmZWF0dXJlc1tqXS5zZXRJZCh1dGlscy5nZXRVbmlxdWVJZCgpKTtcbiAgICAgICAgICAgIC8vIGZlYXR1cmVzW2pdLnNldCgncHJvamVjdGlvbicsIHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFByb2plY3Rpb24oKSk7XG4gICAgICAgICAgICAvLyBmZWF0dXJlc1tqXS5zZXQoJ3Byb2plY3Rpb24nLCBcIkVQU0c6NDMyNlwiKTtcbiAgICAgICAgICAgIGZlYXR1cmVzW2pdLnNldCgnaG92ZXJfbG9jYXRpb24nLCBlbGVtZW50Q29udGVudC5ob3Zlcl9sb2NhdGlvbik7XG4gICAgICAgICAgICBmZWF0dXJlc1tqXS5zZXQoJ2hvdmVyX3N0eWxlJywgZWxlbWVudENvbnRlbnQuaG92ZXJfc3R5bGUpO1xuICAgICAgICAgICAgaWYgKGZlYXR1cmVzW2pdLmdldCgnc3R5bGVJZCcpKSB7XG4gICAgICAgICAgICAgIGlmIChzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tmZWF0dXJlc1tqXS5nZXQoJ3N0eWxlSWQnKV0gJiYgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJyldLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXNbal0uc2V0U3R5bGUoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJyldLnN0eWxlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtaXNzaW5nU3R5bGVzLnB1c2goZmVhdHVyZXNbal0uZ2V0KCdzdHlsZUlkJykpO1xuICAgICAgICAgICAgICAgIHVuc3R5bGVkRmVhdHVyZXMucHVzaChmZWF0dXJlc1tqXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudENvbnRlbnQubG9jYXRpb25TdHlsZSkge1xuICAgICAgICAgICAgICAvLyBmZWF0dXJlIGhhcyBubyBwcm9wZXJ0eSBzdHlsZUlkLCBidXQgZWxlbWVudENvbnRlbnQgaGFzIGxvY2F0aW9uc3R5bGVcbiAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgLy9mZWF0dXJlc1tqXS5zZXRTdHlsZShzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tlbGVtZW50Q29udGVudC5sb2NhdGlvblN0eWxlXS5zdHlsZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWlzc2luZ1N0eWxlcy5wdXNoKGVsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGUpO1xuICAgICAgICAgICAgICAgIHVuc3R5bGVkRmVhdHVyZXMucHVzaChmZWF0dXJlc1tqXSk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXNbal0uc2V0KCdzdHlsZUlkJywgZWxlbWVudENvbnRlbnQubG9jYXRpb25TdHlsZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2ZWN0b3JTdHlsZSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdLnN0eWxlO1xuICAgICAgICAgIGlmKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdICYmIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnRDb250ZW50LmxvY2F0aW9uU3R5bGVdLmZuU3R5bGVGdW5jdGlvbikge1xuXG4gICAgICAgICAgICB2ZWN0b3JTdHlsZSA9IEZ1bmN0aW9uKFwiZmVhdHVyZVwiLFwiZGF0YVwiLFwibWFwXCIsc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZWxlbWVudENvbnRlbnQubG9jYXRpb25TdHlsZV0uZm5TdHlsZUZ1bmN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1pc3NpbmdTdHlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMobWlzc2luZ1N0eWxlcywge1xuICAgICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYsXG4gICAgICAgICAgICAgICAgICBmTGF5ZXJHcm91cCxcbiAgICAgICAgICAgICAgICAgIGZMYXllcnMsXG4gICAgICAgICAgICAgICAgICBmVmVjdG9yTGF5ZXIsXG4gICAgICAgICAgICAgICAgICBmVmVjdG9yU291cmNlO1xuICAgICAgICAgICAgICAgIGZvciAoZiA9IDA7IGYgPCB1bnN0eWxlZEZlYXR1cmVzLmxlbmd0aDsgZiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbdW5zdHlsZWRGZWF0dXJlc1tmXS5nZXQoJ3N0eWxlSWQnKV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdW5zdHlsZWRGZWF0dXJlc1tmXS5zZXRTdHlsZShzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1t1bnN0eWxlZEZlYXR1cmVzW2ZdLmdldCgnc3R5bGVJZCcpXS5zdHlsZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBmVmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlcyxcbiAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiAnRVBTRzozODU3JyxcbiAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IG5ldyBvbC5mb3JtYXQuR2VvSlNPTigpXG4gICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyID0gdXRpbHMuZ2V0VmVjdG9yTGF5ZXIoZlZlY3RvclNvdXJjZSwgdmVjdG9yU3R5bGUpO1xuXG4gICAgICAgICAgICAgICAgICAvLyBsYXllcnMucHVzaCh2ZWN0b3JMYXllcik7XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZi5hcnJMYXllcnNbaXRlbVVpZF0uZlZlY3RvckxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZkxheWVyR3JvdXAgPSBzZWxmLmFyckxheWVyc1tpdGVtVWlkXS52ZWN0b3JMYXllcjtcbiAgICAgICAgICAgICAgICAgICAgICBmTGF5ZXJzID0gZkxheWVyR3JvdXAuZ2V0TGF5ZXJzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YSAmJiBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wb3B1cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyLnBvcHVwID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyLnRvb2x0aXAgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmVmVjdG9yTGF5ZXIubGFiZWwgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy56b29tX29uY2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZWZWN0b3JMYXllci56b29tX29uY2xpY2sgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgZkxheWVycy5wdXNoKGZWZWN0b3JMYXllcik7XG4gICAgICAgICAgICAgICAgICAgICAgZkxheWVyR3JvdXAuc2V0TGF5ZXJzKGZMYXllcnMpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YSAmJiBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy5wb3B1cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyLnBvcHVwID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlZlY3RvckxheWVyLnRvb2x0aXAgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmVmVjdG9yTGF5ZXIubGFiZWwgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy56b29tX29uY2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZWZWN0b3JMYXllci56b29tX29uY2xpY2sgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGZMYXllckdyb3VwID0gbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBbZlZlY3RvckxheWVyXVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXJyTGF5ZXJzW2l0ZW1VaWRdLnZlY3RvckxheWVyID0gZkxheWVyR3JvdXA7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihmTGF5ZXJHcm91cCk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKGVsZW1lbnQuc3BsaXRfZ2VvanNvbikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbjogJ0VQU0c6Mzg1NycsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IG5ldyBvbC5mb3JtYXQuR2VvSlNPTigpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UuYWRkRmVhdHVyZShmZWF0dXJlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyID0gdXRpbHMuZ2V0VmVjdG9yTGF5ZXIodmVjdG9yU291cmNlLCB2ZWN0b3JTdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGo8IGVsZW1lbnQuZ2VvanNvbl9hdHRyaWJ1dGVzLnNwbGl0KCcsJykubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLnNldChlbGVtZW50Lmdlb2pzb25fYXR0cmlidXRlcy5zcGxpdCgnLCcpW2pdLGZlYXR1cmVzW2ldLmdldChlbGVtZW50Lmdlb2pzb25fYXR0cmlidXRlcy5zcGxpdCgnLCcpW2pdKSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYXllcnMucHVzaCh2ZWN0b3JMYXllcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMucG9wdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLnBvcHVwID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIudG9vbHRpcCA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy50b29sdGlwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmxhYmVsID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci56b29tX29uY2xpY2sgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3Rvcih7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlcyxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbjogJ0VQU0c6Mzg1NycsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogbmV3IG9sLmZvcm1hdC5HZW9KU09OKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2ZWN0b3JMYXllciA9IHV0aWxzLmdldFZlY3RvckxheWVyKHZlY3RvclNvdXJjZSwgdmVjdG9yU3R5bGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRDb250ZW50LmRhdGEgJiYgZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMucG9wdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLnBvcHVwID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnBvcHVwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMudG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIudG9vbHRpcCA9IGVsZW1lbnRDb250ZW50LmRhdGEucHJvcGVydGllcy50b29sdGlwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmxhYmVsID0gZWxlbWVudENvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLmxhYmVsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci56b29tX29uY2xpY2sgPSBlbGVtZW50Q29udGVudC5kYXRhLnByb3BlcnRpZXMuem9vbV9vbmNsaWNrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGF5ZXJzLnB1c2godmVjdG9yTGF5ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybignRm9ybWF0IHR5cGUgJyArIGVsZW1lbnRDb250ZW50LmZvcm1hdCArICcgaW4gb2wuZm9ybWF0IG5vdCBmb3VuZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGF5ZXJHcm91cCA9IG5ldyBvbC5sYXllci5Hcm91cCh7XG4gICAgICBsYXllcnM6IGxheWVyc1xuICAgIH0pO1xuXG4gICAgdGhpcy5hcnJMYXllcnNbaXRlbVVpZF0udmVjdG9yTGF5ZXIgPSBsYXllckdyb3VwO1xuICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIobGF5ZXJHcm91cCk7XG4gICAgaWYobGF5ZXJHcm91cC5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdICYmIGxheWVyR3JvdXAuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXS5wb3B1cCAmJiBsYXllckdyb3VwLmdldExheWVycygpLmdldEFycmF5KClbMF0ucG9wdXAuc2hvd1BvcHVwT25BY3RpdmUpe1xuICAgICAgYzRnLm1hcHMucG9wdXAuJGNvbnRlbnQuaHRtbCgnJyk7XG4gICAgICBjNGcubWFwcy5wb3B1cC4kcG9wdXAuYWRkQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkFDVElWRSkuYWRkQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkxPQURJTkcpO1xuICAgICAgYzRnLm1hcHMucG9wdXAuc3Bpbm5lci5zaG93KCk7XG4gICAgICB2YXIgcG9wdXBJbmZvcyA9IGxheWVyR3JvdXAuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXS5wb3B1cDtcbiAgICAgIHZhciBsYXllciA9IGxheWVyR3JvdXAuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKVswXTtcbiAgICAgIHZhciBjb29yZCA9IGZlYXR1cmVzWycwJ10uZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgaWYgKHBvcHVwSW5mb3MuYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgIHZhciBvYmpQb3B1cCA9IHt9O1xuICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mb3M7XG4gICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBmZWF0dXJlc1snMCddO1xuICAgICAgICBvYmpQb3B1cC5sYXllciA9IGxheWVyO1xuICAgICAgICAvLyBDYWxsIHRoZSBwb3B1cCBob29rIGZvciBwbHVnaW4gc3BlY2lmaWMgcG9wdXAgY29udGVudFxuICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCwgb2JqUG9wdXApO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYucHJveHkuc2V0UG9wdXAob2JqUG9wdXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICB1cmw6IHNlbGYuYXBpX2luZm93aW5kb3dfdXJsICsgJy8nICsgcG9wdXBJbmZvcy5jb250ZW50LFxuICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB2YXIgcG9wdXBJbmZvID0ge1xuICAgICAgICAgICAgICBhc3luYzogcG9wdXBJbmZvcy5hc3luYyxcbiAgICAgICAgICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgICAgICAgICBwb3B1cDogcG9wdXBJbmZvcy5wb3B1cCxcbiAgICAgICAgICAgICAgcm91dGluZ19saW5rOiBwb3B1cEluZm9zLnJvdXRpbmdfbGlua1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIG9ialBvcHVwID0ge307XG4gICAgICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mbztcbiAgICAgICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBmZWF0dXJlc1snMCddO1xuICAgICAgICAgICAgb2JqUG9wdXAubGF5ZXIgPSBsYXllcjtcblxuICAgICAgICAgICAgLy8gQ2FsbCB0aGUgcG9wdXAgaG9vayBmb3IgcGx1Z2luIHNwZWNpZmljIHBvcHVwIGNvbnRlbnRcbiAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCwgb2JqUG9wdXApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLnByb3h5LnNldFBvcHVwKG9ialBvcHVwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vaG9va3NcbiAgICAvLyB9XG4gIH0gLy8gZW5kIG9mIFwiZHJhd0xheWVyKClcIlxuXG4gIGRyYXdMYXllckluaXRpYWwoKSB7XG4gICAgdmFyIGxheWVySWQsXG4gICAgICBsYXllcjtcblxuICAgIGZvciAobGF5ZXJJZCBpbiB0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzKSB7XG4gICAgICBpZiAodGhpcy5wcm94eS5hY3RpdmVMYXllcklkcy5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICB0aGlzLnNob3dMYXllcihsYXllcklkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgbCBpbiB0aGlzLmFyckxheWVycykge1xuICAgICAgaWYgKHRoaXMuYXJyTGF5ZXJzLmhhc093blByb3BlcnR5KGwpKSB7XG4gICAgICAgIGxheWVyID0gdGhpcy5hcnJMYXllcnNbbF07XG4gICAgICAgIGlmIChsYXllci5oaWRlID09PSBcIjFcIikge1xuICAgICAgICAgIHRoaXMuaGlkZUxheWVyKGxheWVyLmlkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSAvLyBlbmQgb2YgXCJkcmF3TGF5ZXJJbml0aWFsKClcIlxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbGF5ZXItY29udHJvbGxlci5qcyIsImV4cG9ydCBjbGFzcyBDNGdMYXllcntcbiAgXG4gIGNvbnN0cnVjdG9yKGxheWVyQXJyKSB7XG4gICAgdGhpcy5pZCA9IGxheWVyQXJyWydpZCddO1xuICAgIHRoaXMucGlkID0gbGF5ZXJBcnJbJ3BpZCddO1xuICAgIHRoaXMuYXN5bmNfY29udGVudCA9IGxheWVyQXJyWydhc3luY19jb250ZW50J107XG4gICAgdGhpcy5jb250ZW50ID0gbGF5ZXJBcnJbJ2NvbnRlbnQnXTtcbiAgICB0aGlzLmNzc0NsYXNzID0gbGF5ZXJBcnJbJ2Nzc0NsYXNzJ107XG4gICAgdGhpcy5oaWRlID0gbGF5ZXJBcnJbJ2hpZGUnXTtcbiAgICB0aGlzLmhpZGVfY2hpbGQgPSBsYXllckFyclsnaGlkZV9jaGlsZCddO1xuICAgIHRoaXMudHlwZSA9IGxheWVyQXJyWyd0eXBlJ107XG4gICAgdGhpcy5jbHVzdGVyID0gbGF5ZXJBcnJbJ2NsdXN0ZXInXTtcbiAgICB0aGlzLnpvb20gPSBsYXllckFyclsnem9vbSddO1xuICAgIHRoaXMuem9vbV9sb2NhdGlvbnMgPSBsYXllckFyclsnem9vbV9sb2NhdGlvbnMnXTtcbiAgICB0aGlzLmRpc3BsYXkgPSBsYXllckFyclsnZGlzcGxheSddO1xuICAgIHRoaXMuaGFzQ2hpbGRzID0gbGF5ZXJBcnJbJ2hhc0NoaWxkcyddO1xuICAgIHRoaXMuY2hpbGRzID0gbGF5ZXJBcnJbJ2NoaWxkcyddO1xuICAgIHRoaXMuY2hpbGRzQ291bnQgPSBsYXllckFyclsnY2hpbGRzQ291bnQnXTtcbiAgICB0aGlzLnJlbmRlclNwZWNpYWwgPSBsYXllckFyclsncmVuZGVyU3BlY2lhbCddO1xuICAgIHRoaXMuZWRpdGFibGUgPSB0cnVlO1xuICAgIHRoaXMudHlwZSA9IGxheWVyQXJyWyd0eXBlJ107XG4gICAgdGhpcy5sb2NzdHlsZSA9IGxheWVyQXJyWydsb2NzdHlsZSddO1xuICAgIHRoaXMubmFtZSA9IGxheWVyQXJyWyduYW1lJ107XG4gICAgdGhpcy50YWJJZCA9IGxheWVyQXJyWyd0YWJJZCddO1xuICAgIHRoaXMuc3BsaXRfZ2VvanNvbiA9IGxheWVyQXJyWydzcGxpdF9nZW9qc29uJ107XG4gICAgdGhpcy5nZW9qc29uX2F0dHJpYnV0ZXMgPSBsYXllckFyclsnZ2VvanNvbl9hdHRyaWJ1dGVzJ107XG4gICAgdGhpcy5nZW9qc29uX3pvb20gPSBsYXllckFyclsnZ2VvanNvbl96b29tJ107XG4gICAgdGhpcy5sYXllcm5hbWUgPSBsYXllckFyclsnbGF5ZXJuYW1lJ107XG4gICAgdGhpcy52aXNpYmxlQ2hpbGRzID0gZmFsc2U7XG4gICAgdGhpcy52ZWN0b3JMYXllciA9IG51bGw7XG4gICAgdGhpcy5oaWRlV2hlbkluVGFiID0gbGF5ZXJBcnJbJ2hpZGVfd2hlbl9pbl90YWInXTtcblxuICAgIGlmIChsYXllckFyci5wcm9qZWN0SWQpIHtcbiAgICAgIHRoaXMucHJvamVjdElkID0gbGF5ZXJBcnIucHJvamVjdElkO1xuICAgIH1cbiAgICBpZihsYXllckFyci5wb3B1cCl7XG4gICAgICB0aGlzLnBvcHVwID0gbGF5ZXJBcnIucG9wdXA7XG4gICAgfVxuICAgIHRoaXMuYXdlc29tZWljb24gPSBsYXllckFyclsnYXdlc29tZWljb24nXVxuICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbGF5ZXIuanMiLCJpbXBvcnQge0M0Z0xvY2F0aW9uU3R5bGV9IGZyb20gXCIuL2M0Zy1sb2NhdGlvbnN0eWxlXCI7XG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcblxuZXhwb3J0IGNsYXNzIEM0Z0xvY2F0aW9uU3R5bGVDb250cm9sbGVye1xuICAgIGNvbnN0cnVjdG9yKHByb3h5KXtcbiAgICAgICAgdGhpcy5wcm94eSA9IHByb3h5O1xuICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIgPSBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXI7XG4gICAgICAgIHRoaXMuYXJyTG9jU3R5bGVzID0ge307XG4gICAgfVxuXG4gICAgbG9hZExvY2F0aW9uU3R5bGVzKGFycklkcywgb3B0X29wdGlvbnMpIHtcbiAgICAgICAgbGV0IG9wdGlvbnMsXG4gICAgICAgICAgICBjb21wbGV0ZSA9IHt9LFxuICAgICAgICAgICAgc3VjY2VzcyA9IHt9LFxuICAgICAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBjb3VudCA9IDEsXG4gICAgICAgICAgICBtYWtlQWpheDtcblxuICAgICAgICBpZiAob3B0X29wdGlvbnMgJiYgdHlwZW9mIG9wdF9vcHRpb25zID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0X29wdGlvbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5zcGlubmVyLnNob3coKTtcblxuICAgICAgICBtYWtlQWpheCA9IGZ1bmN0aW9uKHN0eWxlSWRzLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVbaW5kZXhdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3VjY2Vzc1tpbmRleF0gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGdldCBsb2NhdGlvbnN0eWxlcyBvdmVyIEFQSVxuICAgICAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmpzb25wID8gXCJqc29ucFwiIDogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBzZWxmLnByb3h5LmFwaV9sb2NzdHlsZV91cmwsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBpZHM6IHN0eWxlSWRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGxldCBpLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZURhdGEsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWwgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVEYXRhID0gZGF0YVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXJyTG9jU3R5bGVzW3N0eWxlRGF0YS5pZF0gPSBuZXcgQzRnTG9jYXRpb25TdHlsZShzdHlsZURhdGEsIHNlbGYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzW2luZGV4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWNjZXNzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZG9uZSAmJiB0eXBlb2Ygb3B0aW9ucy5kb25lID09PSBcImZ1bmN0aW9uXCIgJiYgKGluZGV4ID8gc3VjY2Vzc2Z1bCA6IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbiAoalhociwgc3RyU3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVbaW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29tcGxldGVba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFsd2F5cyAmJiB0eXBlb2Ygb3B0aW9ucy5hbHdheXMgPT09IFwiZnVuY3Rpb25cIiAmJiAoaW5kZXggPyBjb21wbGV0ZWQgOiB0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmFsd2F5cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoISQoc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIuc3Bpbm5lci5lbGVtZW50KS5oYXNDbGFzcyhjc3NDb25zdGFudHMuSElERSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duICkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnJvclRocm93bik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzcGxpdCBhcnJJZHMgaWYgaXQncyB0b28gbG9uZ1xuICAgICAgICBpZiAoYXJySWRzLmxlbmd0aCA+IDEwMCkge1xuICAgICAgICAgICAgdmFyIG4gPSAxMDA7XG4gICAgICAgICAgICB3aGlsZShhcnJJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG1ha2VBamF4KGFycklkcy5zcGxpY2UoMCwgbiksIGNvdW50KTtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWFrZUFqYXgoYXJySWRzKTtcbiAgICAgICAgfVxuICAgICAgICAvL30pO1xuICAgIH0gLy8gZW5kIG9mIFwibG9hZExvY2F0aW9uU3R5bGVzKClcIlxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWxvY2F0aW9uc3R5bGUtY29udHJvbGxlci5qcyIsImltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBDNGdMb2NhdGlvblN0eWxle1xuICAgIGNvbnN0cnVjdG9yKGxvY1N0eWxlQXJyLCBjb250cm9sbGVyKXtcbiAgICAgICAgdGhpcy5pZCAgICAgICAgPSBsb2NTdHlsZUFyclsnaWQnXTtcbiAgICAgICAgdGhpcy5zdHlsZSAgICAgPSB0aGlzLmdldFN0eWxlRnVuY3Rpb24obG9jU3R5bGVBcnIpO1xuICAgICAgICB0aGlzLmVkaXRvciAgICA9IHRoaXMuZ2V0U3R5bGVFZGl0b3JDb25maWcobG9jU3R5bGVBcnIpO1xuICAgICAgICB0aGlzLm5hbWUgICAgICA9IGxvY1N0eWxlQXJyWyduYW1lJ107XG4gICAgICAgIHRoaXMudG9vbHRpcCAgID0gbG9jU3R5bGVBcnJbJ3Rvb2x0aXAnXTtcbiAgICAgICAgdGhpcy5sYWJlbCAgICAgPSBsb2NTdHlsZUFyclsnbGFiZWwnXTtcbiAgICAgICAgdGhpcy5taW56b29tICAgPSBsb2NTdHlsZUFyclsnbWluem9vbSddO1xuICAgICAgICB0aGlzLm1heHpvb20gICA9IGxvY1N0eWxlQXJyWydtYXh6b29tJ107XG4gICAgICAgIHRoaXMuZm5TdHlsZUZ1bmN0aW9uID0gbG9jU3R5bGVBcnJbJ3N0eWxlX2Z1bmN0aW9uX2pzJ107XG4gICAgICAgIHRoaXMuY29udHJvbGxlcj0gY29udHJvbGxlcjtcbiAgICAgICAgdGhpcy5sb2NTdHlsZUFyciA9IGxvY1N0eWxlQXJyO1xuICAgIH1cblxuICAgIGdldFN0eWxlRnVuY3Rpb24oc3R5bGVEYXRhKSB7XG4gICAgICAgIHZhciBzZWxmLFxuICAgICAgICAgICAgc3R5bGVGdW5jdGlvbixcbiAgICAgICAgICAgIGltYWdlU3R5bGUsXG4gICAgICAgICAgICBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgIGZpbGxTdHlsZSxcbiAgICAgICAgICAgIHRleHRTdHlsZSxcbiAgICAgICAgICAgIHRleHRTdHlsZU91dGxpbmUsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kRmlsbCxcbiAgICAgICAgICAgIGJhY2tncm91bmRTdHJva2U7XG5cbiAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gZ2VuZXJhbFxuICAgICAgICBzdHJva2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgY29sb3I6IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShzdHlsZURhdGEuc3Ryb2tlY29sb3IsIHN0eWxlRGF0YS5zdHJva2VvcGFjaXR5KSxcbiAgICAgICAgICAgIHdpZHRoOiBwYXJzZUludChzdHlsZURhdGEuc3Ryb2tld2lkdGgudmFsdWUsIDEwKVxuICAgICAgICB9KTtcbiAgICAgICAgZmlsbFN0eWxlID0gbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgY29sb3I6IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShzdHlsZURhdGEuZmlsbGNvbG9yLCBzdHlsZURhdGEuZmlsbG9wYWNpdHkpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGltYWdlXG4gICAgICAgIHN3aXRjaCAoc3R5bGVEYXRhLnN0eWxldHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3F1YXJlJzpcbiAgICAgICAgICAgICAgICBpbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLlJlZ3VsYXJTaGFwZSh7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiA0LFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgMTAsXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiBNYXRoLlBJIC8gNFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc3Rhcic6XG4gICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5SZWd1bGFyU2hhcGUoe1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czE6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgMTAsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czI6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgPyBNYXRoLmZsb29yKHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgKiAwLjUpIDogNCxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiA1LFxuICAgICAgICAgICAgICAgICAgICBhbmdsZTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5SZWd1bGFyU2hhcGUoe1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50czogNCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBzdHlsZURhdGEucmFkaXVzLnZhbHVlIHx8IDEwLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXMyOiAwLFxuICAgICAgICAgICAgICAgICAgICBhbmdsZTogTWF0aC5QSSAvIDRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Nyb3NzJzpcbiAgICAgICAgICAgICAgICBpbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLlJlZ3VsYXJTaGFwZSh7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiA0LFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgMTAsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czI6IDAsXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0cmlhbmdsZSc6XG4gICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5SZWd1bGFyU2hhcGUoe1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50czogMyxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBzdHlsZURhdGEucmFkaXVzLnZhbHVlIHx8IDEwLFxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogTWF0aC5QSSAvIDQsXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdvbF9pY29uJzogLy8gZmFsbHRocm91Z2hcbiAgICAgICAgICAgIGNhc2UgJ2N1c3RfaWNvbic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZURhdGEuaWNvbl9zcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlU3R5bGUgPSBuZXcgb2wuc3R5bGUuSWNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogcGFyc2VGbG9hdChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlLCAxMCkgLyAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBzdHlsZURhdGEuaWNvbl9zcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogW3BhcnNlSW50KHN0eWxlRGF0YS5pY29uX3NpemVbMF0sIDEwKSwgcGFyc2VJbnQoc3R5bGVEYXRhLmljb25fc2l6ZVsxXSwgMTApXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZTogcGFyc2VGbG9hdChzdHlsZURhdGEuaWNvbl9zY2FsZSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjdXN0X2ljb25fc3ZnJzpcbiAgICAgICAgICAgICAgICAgICAgaWYoc3R5bGVEYXRhLnN2Z1NyYyAmJiBzdHlsZURhdGEuaWNvbl9zY2FsZSAmJiBzdHlsZURhdGEuaWNvbl9zaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IChzdHlsZURhdGEuaWNvbl9zaXplWzBdKnN0eWxlRGF0YS5pY29uX3NjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoZWlnaHQgPSAoc3R5bGVEYXRhLmljb25fc2l6ZVsxXSpzdHlsZURhdGEuaWNvbl9zY2FsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdHJva2V3aWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVEYXRhLnN0cm9rZXdpZHRoICYmIHN0eWxlRGF0YS5zdHJva2V3aWR0aC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZXdpZHRoID0gc3R5bGVEYXRhLnN0cm9rZXdpZHRoLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoICA9IHdpZHRoKygyKnN0cm9rZXdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQrKDIqc3Ryb2tld2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVEYXRhLmZpbGxjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLmZpbGxjb2xvciwgc3R5bGVEYXRhLmZpbGxvcGFjaXR5LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cm9rZXdpZHRoICYmIHN0eWxlRGF0YS5zdHJva2Vjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShzdHlsZURhdGEuc3Ryb2tlY29sb3IsIHN0eWxlRGF0YS5zdHJva2VvcGFjaXR5LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gc3R5bGVEYXRhLnN0cm9rZXdpZHRoLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLjUsIDAuNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlICYmIChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlID4gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBjdHguZ2xvYmFsQWxwaGEgPSAoc3R5bGVEYXRhLmljb25fb3BhY2l0eS52YWx1ZSAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSBzdHlsZURhdGEuc3ZnU3JjO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnpJbmRleCA9IDEwMDsgLy9UZXN0XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgc3Ryb2tld2lkdGgsIHN0cm9rZXdpZHRoLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5JY29uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGNhbnZhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWdTaXplOiBbY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0XS8qLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlIC8gMTAwKSovXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwaG90bycgOlxuICAgICAgICAgICAgICAgIGltYWdlU3R5bGUgPSBuZXcgb2wuc3R5bGUuUGhvdG8oe1xuICAgICAgICAgICAgICAgICAgICBraW5kOiBzdHlsZURhdGEucGhvdG9LaW5kLFxuICAgICAgICAgICAgICAgICAgICBjcm9wOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBwYXJzZUZsb2F0KHN0eWxlRGF0YS5pY29uX29wYWNpdHkudmFsdWUsIDEwKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBwYXJzZUZsb2F0KHN0eWxlRGF0YS5yYWRpdXMudmFsdWUsMTApLFxuICAgICAgICAgICAgICAgICAgICBzaGFkb3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHNyYzogc3R5bGVEYXRhLmljb25fc3JjXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwb2ludCc6XG4gICAgICAgICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogc3R5bGVEYXRhLnJhZGl1cy52YWx1ZSB8fCA3XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGltYWdlU3R5bGUgPSBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogZmlsbFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgN1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYnVpbGQgZnVuY3Rpb25cbiAgICAgICAgc3R5bGVGdW5jdGlvbiA9IGZ1bmN0aW9uIChmZWF0dXJlLCBwcm9qZWN0aW9uLCBnZXRJZCkge1xuICAgICAgICAgICAgdmFyIHN0eWxlc0FycmF5LFxuICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgIGFycm93U2l6ZSxcbiAgICAgICAgICAgICAgICBhcnJvd1NpemVVbml0LFxuICAgICAgICAgICAgICAgIHNlZ21lbnRMZW5ndGgsXG4gICAgICAgICAgICAgICAgYXJyb3dzX21pbnpvb20sXG4gICAgICAgICAgICAgICAgc3RhcnRfcGl4ZWwsXG4gICAgICAgICAgICAgICAgZW5kX3BpeGVsO1xuXG4gICAgICAgICAgICBpZiAoZ2V0SWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVEYXRhLmlkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIGEgZmVhdHVyZS5zdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAoIShmZWF0dXJlIGluc3RhbmNlb2Ygb2wuRmVhdHVyZSkpIHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0aW9uID0gZmVhdHVyZTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlID0gdGhpcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3R5bGVzQXJyYXkgPSBbXTtcblxuICAgICAgICAgICAgaWYgKGZlYXR1cmUgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nICYmIGZlYXR1cmUuZ2V0KCdsYWJlbCcpKSB7XG4gICAgICAgICAgICAgICAgbGFiZWwgPSBmZWF0dXJlLmdldCgnbGFiZWwnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3R5bGVEYXRhLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgbGFiZWwgPSBzdHlsZURhdGEubGFiZWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhYmVsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZGVmYXVsdENvbG9yID0gc2VsZi5jb250cm9sbGVyLm1hcENvbnRyb2xsZXIuZGF0YS5kZWZhdWx0X2xhYmVsX2NvbG9yO1xuICAgICAgICAgICAgLy8gbGFiZWxcbiAgICAgICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZURhdGEubGFiZWxfb3V0bF9jb2xvciAmJiBzdHlsZURhdGEubGFiZWxfb3V0bF93aWR0aC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0U3R5bGVPdXRsaW5lID0gbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5sYWJlbF9vdXRsX2NvbG9yIHx8IGRlZmF1bHRDb2xvciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMTAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBwYXJzZUludChzdHlsZURhdGEubGFiZWxfb3V0bF93aWR0aC52YWx1ZSwgMTApXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZihzdHlsZURhdGEubGFiZWxfb3V0bF9ib3ggPT09IFwiMVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kRmlsbCA9IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLmxhYmVsX291dGxfY29sb3IgfHwgZGVmYXVsdENvbG9yLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDEwMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXN0eWxlRGF0YS5sYWJlbF9vZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVEYXRhLmxhYmVsX29mZnNldCA9IFswLCAwLCBcInB4XCJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihzdHlsZURhdGEubGFiZWxfb3V0bF9ib3ggPT09IFwiMVwiKXtcbiAgICAgICAgICAgICAgICAgIHRleHRTdHlsZSA9IG5ldyBvbC5zdHlsZS5UZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogbGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIGZvbnQ6IChzdHlsZURhdGEuZm9udF93ZWlnaHQgfHwgJ25vcm1hbCcpICsgJyAnICsgKHN0eWxlRGF0YS5mb250X3N0eWxlIHx8ICdub3JtYWwnKSArICcgJyArIChzdHlsZURhdGEuZm9udF9zaXplIHx8ICcxMycpICsgJ3B4ICcgKyAoc3R5bGVEYXRhLmZvbnRfZmFtaWx5IHx8ICdzYW5zLXNlcmlmJyksXG4gICAgICAgICAgICAgICAgICAgIC8vIHNjYWxlOiBwYXJzZUludChzdHlsZURhdGEuZm9udF9zaXplIHx8IDAsIDEwKSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IHBhcnNlSW50KHN0eWxlRGF0YS5sYWJlbF9vZmZzZXRbMF0gfHwgMCwgMTApLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiBwYXJzZUludChzdHlsZURhdGEubGFiZWxfb2Zmc2V0WzFdIHx8IDAsIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiBzdHlsZURhdGEubGFiZWxfYWxpZ25faG9yLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0QmFzZWxpbmU6IHN0eWxlRGF0YS5sYWJlbF9hbGlnbl92ZXIsXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5mb250X2NvbG9yIHx8IGRlZmF1bHRDb2xvciwgc3R5bGVEYXRhLmZvbnRfb3BhY2l0eSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRGaWxsOiBiYWNrZ3JvdW5kRmlsbCxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZFN0cm9rZTogdGV4dFN0eWxlT3V0bGluZVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICB0ZXh0U3R5bGUgPSBuZXcgb2wuc3R5bGUuVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgICAgICBmb250OiAoc3R5bGVEYXRhLmZvbnRfd2VpZ2h0IHx8ICdub3JtYWwnKSArICcgJyArIChzdHlsZURhdGEuZm9udF9zdHlsZSB8fCAnbm9ybWFsJykgKyAnICcgKyAoc3R5bGVEYXRhLmZvbnRfc2l6ZSB8fCAnMTMnKSArICdweCAnICsgKHN0eWxlRGF0YS5mb250X2ZhbWlseSB8fCAnc2Fucy1zZXJpZicpLFxuICAgICAgICAgICAgICAgICAgICAvLyBzY2FsZTogcGFyc2VJbnQoc3R5bGVEYXRhLmZvbnRfc2l6ZSB8fCAwLCAxMCkgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiBwYXJzZUludChzdHlsZURhdGEubGFiZWxfb2Zmc2V0WzBdIHx8IDAsIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogcGFyc2VJbnQoc3R5bGVEYXRhLmxhYmVsX29mZnNldFsxXSB8fCAwLCAxMCksXG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogc3R5bGVEYXRhLmxhYmVsX2FsaWduX2hvcixcbiAgICAgICAgICAgICAgICAgICAgdGV4dEJhc2VsaW5lOiBzdHlsZURhdGEubGFiZWxfYWxpZ25fdmVyLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShzdHlsZURhdGEuZm9udF9jb2xvciB8fCBkZWZhdWx0Q29sb3IsIHN0eWxlRGF0YS5mb250X29wYWNpdHkpXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHRleHRTdHlsZU91dGxpbmVcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjcmVhdGUgc3R5bGUtb2JqZWN0XG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRoaXMgY2hlY2sgYmVjYXVzZSB0ZXh0U3R5bGUgaXMgYSB2YXIgYWNjZXNzaWJsZSBmcm9tIGNsb3N1cmUgYW5kIHdpbGwgYmUgc2V0IGV2ZW4gaWYgbm8gbGFiZWwgaXMgc2V0XG4gICAgICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICBzdHlsZXNBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IGltYWdlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogZmlsbFN0eWxlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3R5bGVzQXJyYXkucHVzaChcbiAgICAgICAgICAgICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBpbWFnZVN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgLy8gYWRkIGxpbmUtYXJyb3dzXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3R5bGVEYXRhLmxpbmVfYXJyb3dzXG4gICAgICAgICAgICAgICAgJiYgZmVhdHVyZVxuICAgICAgICAgICAgICAgICYmICh0eXBlb2YgZmVhdHVyZS5nZXRHZW9tZXRyeSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICAmJiAhKGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uUG9pbnQpXG4gICAgICAgICAgICAgICAgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5mb3JFYWNoU2VnbWVudCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgYXJyb3dTaXplID0gKHN0eWxlRGF0YS5saW5lX2Fycm93c19yYWRpdXMpID8gKHBhcnNlSW50KHN0eWxlRGF0YS5saW5lX2Fycm93c19yYWRpdXMudmFsdWUsIDEwKSAqIDIpIDogMDtcbiAgICAgICAgICAgICAgICBhcnJvd1NpemVVbml0ID0gYXJyb3dTaXplICsgc3R5bGVEYXRhLmxpbmVfYXJyb3dzX3JhZGl1cy51bml0O1xuICAgICAgICAgICAgICAgIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5mb3JFYWNoU2VnbWVudChmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIG1pbnpvb20gaXMgMCAodW5saW1pdGVkKSwgaGlkZSBhcnJvd3MgaWYgdGhleSBhcmUgYmlnZ2VyIHRoYW4gdGhlIHNlZ21lbnRcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzX21pbnpvb20gPSBwYXJzZUludChzdHlsZURhdGEubGluZV9hcnJvd3NfbWluem9vbSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBzdGFydF9waXhlbCA9IHNlbGYuY29udHJvbGxlci5tYXBDb250cm9sbGVyLm1hcC5nZXRQaXhlbEZyb21Db29yZGluYXRlKHN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgZW5kX3BpeGVsID0gc2VsZi5jb250cm9sbGVyLm1hcENvbnRyb2xsZXIubWFwLmdldFBpeGVsRnJvbUNvb3JkaW5hdGUoZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXVjbGlkLWRpc3RhbmNlIGJldHdlZW4gc3RhcnQgYW5kIGVuZFxuICAgICAgICAgICAgICAgICAgICBzZWdtZW50TGVuZ3RoID0gTWF0aC5zcXJ0KE1hdGgucG93KGVuZF9waXhlbFsxXSAtIHN0YXJ0X3BpeGVsWzFdLCAyKSArIE1hdGgucG93KGVuZF9waXhlbFswXSAtIHN0YXJ0X3BpeGVsWzBdLCAyKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGFycm93c19taW56b29tIDwgMCAmJiBhcnJvd1NpemUgKyBwYXJzZUludChzdHlsZURhdGEuc3Ryb2tld2lkdGgudmFsdWUsIDEwKSA8IHNlZ21lbnRMZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCAoYXJyb3dzX21pbnpvb20gPj0gMCAmJiBzZWxmLmNvbnRyb2xsZXIubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFpvb20oKSA+PSBhcnJvd3NfbWluem9vbSlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3J3YXJkIGFycm93c1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzQXJyYXkucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogbmV3IG9sLmdlb20uUG9pbnQoZW5kKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbmV3IG9sLnN0eWxlLlRleHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCLhkLNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IGFycm93U2l6ZVVuaXQgKyBcIiBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVXaXRoVmlldzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAtTWF0aC5hdGFuMigoZW5kWzFdIC0gc3RhcnRbMV0pLCAoZW5kWzBdIC0gc3RhcnRbMF0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmFja3dhcmQgYXJyb3dzIChpZiB3YW50ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVEYXRhLmxpbmVfYXJyb3dzX2JhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXNBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IG5ldyBvbC5nZW9tLlBvaW50KHN0YXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG5ldyBvbC5zdHlsZS5UZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIuGQs1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IGFycm93U2l6ZVVuaXQgKyBcIiBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlV2l0aFZpZXc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IC1NYXRoLmF0YW4yKChzdGFydFsxXSAtIGVuZFsxXSksIChzdGFydFswXSAtIGVuZFswXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc3R5bGVzQXJyYXk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHN0eWxlRnVuY3Rpb247XG4gICAgfSAvLyBlbmQgb2YgXCJnZXRTdHlsZUZ1bmN0aW9uKClcIlxuXG5cbiAgICBnZXRTdHlsZUVkaXRvckNvbmZpZyhzdHlsZURhdGEpIHtcbiAgICAgICAgdmFyIGVkaXRvckNvbmZpZztcblxuICAgICAgICAvLyBjcmVhdGUgZWRpdG9yLWNvbmZpZ1xuICAgICAgICBlZGl0b3JDb25maWcgPSB7fTtcbiAgICAgICAgZWRpdG9yQ29uZmlnLmNvbGxlY3QgPSBzdHlsZURhdGEuZWRpdG9yX2NvbGxlY3QgfHwgdW5kZWZpbmVkO1xuICAgICAgICBlZGl0b3JDb25maWcuaWNvblNyYyA9IHN0eWxlRGF0YS5lZGl0b3JfaWNvbiB8fCB1bmRlZmluZWQ7XG4gICAgICAgIGVkaXRvckNvbmZpZy52YXJzID0gc3R5bGVEYXRhLmVkaXRvcl92YXJzIHx8IHVuZGVmaW5lZDtcblxuICAgICAgICBlZGl0b3JDb25maWcuc29ydCA9IHN0eWxlRGF0YS5lZGl0b3Jfc29ydCB8fCBmYWxzZTtcbiAgICAgICAgaWYgKGVkaXRvckNvbmZpZy5zb3J0KSB7XG4gICAgICAgICAgICBlZGl0b3JDb25maWcuc29ydCA9IHBhcnNlSW50KGVkaXRvckNvbmZpZy5zb3J0LCAxMCkgfHwgZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWRpdG9yQ29uZmlnO1xuICAgIH0vLyBlbmQgb2YgXCJnZXRTdHlsZUVkaXRvckNvbmZpZygpXCJcbiAgICBcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1sb2NhdGlvbnN0eWxlLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb25maWcgPSB0aGlzLmM0Zy5tYXBzLmNvbmZpZyB8fCB7fTtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBvc21Tb3VyY2VEZWZpbml0aW9uc1xuICAgKi9cbiAgYzRnLm1hcHMuY29uZmlnLm9zbSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbmZpZy5vc20sIHtcblxuICAgIEN5Y2xlTWFwOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6ICdTdHlsZSBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL3d3dy5vcGVuY3ljbGVtYXAub3JnL1wiPk9wZW5DeWNsZU1hcDwvYT4nICsgJyAnICtcbiAgICAgICAgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOSxcbiAgICAgIHVybDogJ2h0dHBzOi8ve2EtY30udGlsZS5vcGVuY3ljbGVtYXAub3JnL2N5Y2xlL3t6fS97eH0ve3l9LnBuZydcbiAgICB9LFxuXG4gICAgR2VybWFuOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6ICdTdHlsZSBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL3d3dy5vcGVuc3RyZWV0bWFwLmRlL2dlcm1hbnN0eWxlLmh0bWxcIj5vcGVuc3RyZWV0bWFwLmRlPC9hPicgKyAnICcgK1xuICAgICAgICBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDE5LFxuICAgICAgdXJsOiAnaHR0cHM6Ly97YS1jfS50aWxlLm9wZW5zdHJlZXRtYXAuZGUvdGlsZXMvb3NtZGUve3p9L3t4fS97eX0ucG5nJ1xuICAgIH0sXG5cbiAgICBHZXJtYW5UcmFuc3BvcnQ6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogJ1N0eWxlIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vd3d3Lm1lbW9tYXBzLmRlXCI+TWVtb21hcHM8L2E+JyArICcgJyArXG4gICAgICAgIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTksXG4gICAgICB1cmw6ICdodHRwczovL3RpbGUubWVtb21hcHMuZGUvdGlsZWdlbi97en0ve3h9L3t5fS5wbmcnXG4gICAgfSxcblxuICAgIExhbmRzY2FwZU1hcDoge1xuICAgICAgYXR0cmlidXRpb25zOiAnU3R5bGUgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHA6Ly93d3cub3BlbmN5Y2xlbWFwLm9yZy9cIj5PcGVuQ3ljbGVNYXA8L2E+JyArICcgJyArXG4gICAgICAgIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTksXG4gICAgICB1cmw6ICdodHRwczovL3thLWN9LnRpbGUub3BlbmN5Y2xlbWFwLm9yZy9sYW5kc2NhcGUve3p9L3t4fS97eX0ucG5nJ1xuICAgIH0sXG5cbiAgICBNYXBuaWs6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgTk9ORTogJycgLy8gbGFzdCBsaW5lXG4gIH0pOyAvLyBlbmQgb2YgXCJvc21Tb3VyY2VEZWZpbml0aW9uc1wiIC0tLVxuXG4gIC8qKlxuICAgKiBzdGFtZW5Tb3VyY2VEZWZpbml0aW9uc1xuICAgKi9cbiAgYzRnLm1hcHMuY29uZmlnLnN0YW1lbiA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbmZpZy5zdGFtZW4sIHtcblxuICAgIFRvbmVyOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6IG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBsYXllcjogJ3RvbmVyJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOCxcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgVG9uZXJMYWJlbHM6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIGxheWVyOiAndG9uZXItbGFiZWxzJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOCxcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgVG9uZXJMaW5lczoge1xuICAgICAgYXR0cmlidXRpb25zOiBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgbGF5ZXI6ICd0b25lci1saW5lcycsXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTgsXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgfSxcblxuICAgIFRlcnJhaW46IHtcbiAgICAgIGF0dHJpYnV0aW9uczogb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIGxheWVyOiAndGVycmFpbicsXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTgsXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgfSxcblxuICAgIFdhdGVyY29sb3I6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgIGxheWVyOiAnd2F0ZXJjb2xvcicsXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTgsXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgfSxcblxuICAgIE5PTkU6ICcnXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBtYXBxdWVzdFNvdXJjZURlZmluaXRpb25zXG4gICAqL1xuICBjNGcubWFwcy5jb25maWcubWFwcXVlc3QgPSAkLmV4dGVuZChjNGcubWFwcy5jb25maWcubWFwcXVlc3QsIHtcblxuICAgIE1hcFF1ZXN0T3Blbjoge1xuICAgICAgbGF5ZXI6ICdvc20nXG4gICAgfSxcblxuICAgIE1hcFF1ZXN0SHliOiB7XG4gICAgICBsYXllcjogJ2h5YidcbiAgICB9LFxuXG4gICAgTWFwUXVlc3RTYXQ6IHtcbiAgICAgIGxheWVyOiAnc2F0J1xuICAgIH0sXG5cbiAgICBOT05FOiAnJ1xuICB9KTtcblxuICAvKipcbiAgICogbWFwYm94U291cmNlRGVmaW5pdGlvbnNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbmZpZy5tYXBib3ggPSB7XG5cbiAgICBNYXBib3g6IHtcbiAgICAgIHRpbGVTaXplOiBbNTEyLCA1MTJdLFxuICAgICAgYXR0cmlidXRpb25zOiAnwqkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3Lm1hcGJveC5jb20vYWJvdXQvbWFwcy9cIj5NYXBib3g8L2E+JyArICcgJyArXG4gICAgICAgIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMjIsXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgfSxcblxuICAgIE1hcGJveENsYXNzaWM6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogJ8KpIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5tYXBib3guY29tL2Fib3V0L21hcHMvXCI+TWFwYm94PC9hPicgKyAnICcgK1xuICAgICAgICBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDIyLFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH1cbiAgfTtcblxuICAgIC8qKlxuICAgICAqIGtsb2thblNvdXJjZURlZmluaXRpb25zXG4gICAgICovXG4gICAgLy9Ub0RvIG5vdCByZWFkeVxuICAgIGM0Zy5tYXBzLmNvbmZpZy5rbG9rYW4gPSB7XG5cbiAgICAgICAgT3Blbk1hcFRpbGVzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6IG5ldyBvbC5mb3JtYXQuTVZUKCksXG4gICAgICAgICAgICB0aWxlR3JpZDogIG9sLnRpbGVncmlkLmNyZWF0ZVhZWih7dGlsZVNpemU6IDUxMiwgbWF4Wm9vbTogMjJ9KSwgLy9Ub0RvIG1heFpvb20gZnJvbSBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICB0aWxlUGl4ZWxSYXRpbzogOCxcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uczogJ8KpIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL29wZW5tYXB0aWxlcy5vcmcvXCI+T3Blbk1hcFRpbGVzPC9hPicgKyAnICcgK1xuICAgICAgICAgICAgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTixcbiAgICAgICAgICAgIG1pblpvb206IDAsXG4gICAgICAgICAgICBtYXhab29tOiAyMixcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJ1xuICAgICAgICB9LFxuXG4gICAgICAgIFRpbGVIb3N0aW5nOiB7XG4gICAgICAgICAgICBmb3JtYXQ6IG5ldyBvbC5mb3JtYXQuTVZUKCksXG4gICAgICAgICAgICB0aWxlR3JpZDogIG9sLnRpbGVncmlkLmNyZWF0ZVhZWih7dGlsZVNpemU6IDUxMiwgbWF4Wm9vbTogMjJ9KSwgLy9Ub0RvIG1heFpvb20gZnJvbSBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICB0aWxlUGl4ZWxSYXRpbzogOCxcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uczogJ8KpIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3RpbGVob3N0aW5nLmNvbS9cIj5UaWxlSG9zdGluZzwvYT4nICsgJyAnICtcbiAgICAgICAgICAgIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICAgICAgICBtaW5ab29tOiAwLFxuICAgICAgICAgICAgbWF4Wm9vbTogMjIsXG4gICAgICAgICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogaGVyZVNvdXJjZURlZmluaXRpb25zXG4gICAgICovXG4gICAgYzRnLm1hcHMuY29uZmlnLmhlcmUgPSB7XG5cbiAgICAgICAgSEVSRToge1xuICAgICAgICAgICAgdGlsZVNpemU6IFs1MTIsIDUxMl0sXG4gICAgICAgICAgICBhdHRyaWJ1dGlvbnM6ICdNYXAgVGlsZXMgwqkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLmhlcmUuY29tXCI+SEVSRTwvYT4nKyAnICcgK1xuICAgICAgICAgICAgICAgIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT04sXG4gICAgICAgICAgICBtaW5ab29tOiAwLFxuICAgICAgICAgICAgbWF4Wm9vbTogMjIsXG4gICAgICAgICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiB0aHVuZGVyZm9yZXN0U291cmNlRGVmaW5pdGlvbnNcbiAgICAgKi9cbiAgICBjNGcubWFwcy5jb25maWcudGh1bmRlcmZvcmVzdCA9IHtcblxuICAgICAgICBUaHVuZGVyZm9yZXN0OiB7XG4gICAgICAgICAgICB0aWxlU2l6ZTogWzUxMiwgNTEyXSxcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uczogJ01hcCBUaWxlcyDCqSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cudGh1bmRlcmZvcmVzdC5jb20vXCI+VGh1bmRlcmZvcmVzdDwvYT4nICsgJyAnICtcbiAgICAgICAgICAgICAgICBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OLFxuICAgICAgICAgICAgbWluWm9vbTogMCxcbiAgICAgICAgICAgIG1heFpvb206IDE5LFxuICAgICAgICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgICAgICB9XG5cbiAgICB9O1xuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBjb25maWcgPSB0aGlzLmM0Zy5tYXBzLmNvbmZpZztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbmZpZy5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29uc3RhbnQgPSB0aGlzLmM0Zy5tYXBzLmNvbnN0YW50IHx8IHt9O1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIExhbmd1YWdlIGNvbnN0YW50cyAoZW4pXG4gICAqL1xuICBjNGcubWFwcy5jb25zdGFudC5pMThuID0gJC5leHRlbmQoYzRnLm1hcHMuY29uc3RhbnQuaTE4biwge1xuXG4gICAgTEFORzogJ2RlJyxcblxuICAgIE5BTUU6ICdOYW1lJyxcbiAgICBISURFOiAnWnVrbGFwcGVuJyxcbiAgICBDTE9TRTogJ1NjaGxpZcOfZW4nLFxuICAgIFBPSU5UOiAnUE9JJyxcbiAgICBGUkVFSEFORDogJ0ZyZWloYW5kJyxcbiAgICBMSU5FOiAnTGluaWUnLFxuICAgIFBPTFlHT046ICdGbMOkY2hlJyxcbiAgICBDSVJDTEU6ICdSYWRpdXMnLFxuICAgIFBFUklNRVRFUjogJ1VtZmFuZycsXG4gICAgTEVOR1RIOiAnTMOkbmdlJyxcbiAgICBTVVJGQUNFQVJFQTogJ0Zsw6RjaGVuaW5oYWx0JyxcbiAgICBSQURJVVM6ICdSYWRpdXMnLFxuICAgIFJFRlJFU0g6ICdBa3R1YWxpc2llcmVuJyxcbiAgICBDT1BZX1RPX0NMSVBCT0FSRDogJ0luIFp3aXNjaGVuYWJsYWdlIGtvcGllcmVuJyxcblxuICAgIENUUkxfWk9PTV9JTjogJ1Zlcmdyw7bDn2VybicsXG4gICAgQ1RSTF9aT09NX09VVDogJ1ZlcmtsZWluZXJuJyxcbiAgICBDVFJMX1pPT01fRVhUOiAnTWF4aW1hbCB2ZXJrbGVpbmVybicsXG4gICAgQ1RSTF9aT09NX0hPTUU6ICdadXIgdXJzcHLDvG5nbGljaGVuIFBvc2l0aW9uJyxcbiAgICBDVFJMX1pPT01fUE9TOiAnWnVtIGFrdHVlbGxlbiBTdGFuZG9ydCcsXG4gICAgQ1RSTF9aT09NX1NMSURFUjogJ1pvb20gU2xpZGVyJyxcbiAgICBDVFJMX1JFU0VUX1JPVEFUSU9OOiAnUm90YXRpb24gKHRvdWNoLCBhbHQrbW91c2UpIHp1csO8Y2tzZXR6ZW4nLFxuICAgIENUUkxfUE9SVFNJREU6ICdQb3J0c2lkZSBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfUk9VVEVSOiAnUm91dGVyIGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9FRElUT1I6ICdFZGl0b3IgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX01FQVNVUkVUT09MUzogJ01lc3N3ZXJremV1Z2UgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX0lORk9QQUdFOiAnSW5mb3NlaXRlIGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9BRERJVElPTkFMUEFORUw6ICdQYW5lbCBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfQUNDT1VOVDogJ0FjY291bnQgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX1pPT01MRVZFTDogJ1pvb20nLFxuICAgIENUUkxfTU9VU0VDT09SRFM6ICdMb24vTGF0JyxcbiAgICBDVFJMX0dFT1NFQVJDSDogJ1N1Y2hlIGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9TVEFSVF9TRUFSQ0g6ICdTdWNoZSBzdGFydGVuJyxcbiAgICBDVFJMX09WRVJWSUVXTUFQOiAnw5xiZXJzaWNodHNrYXJ0ZSBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfR0VPQk9PS01BUktTOiAnRmF2b3JpdGVuIHZlcndhbHRlbicsXG4gICAgQ1RSTF9TSURFQk9BUkQ6ICdTaWRlYm9hcmQgZWluLS9hdXNibGVuZGVuJyxcbiAgICBDVFJMX1NUQVJCT0FSRDogJ1N0YXJib2FyZCBlaW4tL2F1c2JsZW5kZW4nLFxuICAgIENUUkxfQVRUUklCVVRJT046ICdBdHRyaWJ1dGlvbiBhbnplaWdlbicsXG4gICAgQ1RSTF9HUklEOiAnR2l0dGVyIGVpbi0vYXVzYmxlbmRlbicsXG4gICAgQ1RSTF9QRVJNQUxJTks6ICdQZXJtYWxpbmsgZ2VuZXJpZXJlbicsXG4gICAgQ1RSTF9GVUxMU0NSRUVOOiAnVm9sbGJpbGRtb2R1cyBlaW4tL2F1c3NjaGFsdGVuJyxcbiAgICBDVFJMX1BSSU5UOiAnS2FydGUgZXhwb3J0aWVyZW4nLFxuXG4gICAgRURJVE9SOiAnRWRpdG9yJyxcbiAgICBFRElUT1JfRU5BQkxFX0lOU1RBTlRfTUVBU1VSRTogJ01lc3NlbiB3w6RocmVuZCBkZXMgWmVpY2huZW5zJyxcbiAgICBFRElUT1JfRU5BQkxFX0ZSRUVIQU5EX0RSQVc6ICdGcmVpaGFuZCB6ZWljaG5lbicsXG4gICAgRURJVE9SX0ZFQVRVUkVfQVBQTFk6ICdFZGl0aWVyZW4gYmVlbmRlbicsXG4gICAgRURJVE9SX0ZFQVRVUkVfREVMRVRFOiAnRWxlbWVudCBsw7ZzY2hlbicsXG4gICAgRURJVE9SX0ZFQVRVUkVfTU9ESUZZOiAnRWxlbWVudCBlZGl0aWVyZW4gLyB2ZXJzY2hpZWJlbicsXG4gICAgRURJVE9SX1NFTEVDVF9JTkZPOiAnWnVyIEF1c3dhaGwgZWluIEVsZW1lbnQgYXVmIGRlciBLYXJ0ZSBhbmtsaWNrZW4uJyxcbiAgICBFRElUT1JfU0VMRUNUX0lORk9fQURESVRJT05BTDogJ1tTdHJnXSArIFtLbGlja10gZsO8ciBNZWhyZmFjaGF1c3dhaGwgPGJyPltTaGlmdF0gaGFsdGVuIGbDvHIgQXVzd2FobGJveCcsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9TRUxFQ1Q6ICdBdXN3YWhsIE1vZHVzJyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfUE9JTlQ6ICdLYXJ0ZW5lbGVtZW50ZScsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0ZSRUVIQU5EOiAnRnJlaWhhbmR3ZXJremV1Z2UnLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19MSU5FU1RSSU5HOiAnU3RyZWNrZW53ZXJremV1Z2UnLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19QT0xZR09OOiAnRmzDpGNoZW53ZXJremV1Z2UnLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19DSVJDTEU6ICdLcmVpc3dlcmt6ZXVnZScsXG5cbiAgICBQT1BVUF9ST1VURV9GUk9NOiAnUm91dGUgdm9uIGhpZXInLFxuICAgIFBPUFVQX1JPVVRFX1RPOiAnUm91dGUgaGllcmhpbicsXG5cbiAgICBTVEFSQk9BUkQ6ICdTdGFyYm9hcmQnLFxuICAgIFNUQVJCT0FSRF9CQVNFTEFZRVI6ICdCYXNpc2thcnRlbicsXG4gICAgU1RBUkJPQVJEX0xBWUVSOiAnRWJlbmVuJyxcbiAgICBTVEFSQk9BUkRfVklFV19UUklHR0VSX0JBU0VMQVlFUlNXSVRDSEVSOiAnQmFzaXNrYXJ0ZW4nLFxuICAgIFNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUjogJ0thcnRlbmVsZW1lbnRlJyxcblxuICAgIFNJREVCT0FSRDogJ1NpZGVib2FyZCcsXG5cbiAgICBST1VURVJfVklFV19BRERSRVNTX0lOUFVUOiAnUm91dGUgZmluZGVuJyxcbiAgICBST1VURVJfRlJPTV9MQUJFTDogJ1N0YXJ0JyxcbiAgICBST1VURVJfT1ZFUl9MQUJFTDogJ1p3aXNjaGVuemllbCcsXG4gICAgUk9VVEVSX1RPX0xBQkVMOiAnWmllbCcsXG4gICAgUk9VVEVSX0NMRUFSX1RJVExFOiAnTMO2c2NoZW4nLFxuICAgIFJPVVRFUl9DTEVBUl9IVE1MOiAnJyxcbiAgICBST1VURVJfTGFiZWxfSW50ZXJpbTogJ1p3aXNjaGVuemllbCcsXG5cbiAgICBST1VURVJfU1dJVENIOidXZWNoc2VsIHZvbiBTdGFydCB1bmQgWmllbCcsXG4gICAgUk9VVEVSX09WRVI6J1p3aXNjaGVuemllbCBoaW56dWbDvGdlbicsXG4gICAgUk9VVEVSX1BSSU5UOidSb3V0ZW5iZXNjaHJlaWJ1bmcgZHJ1Y2tlbicsXG5cbiAgICBST1VURVJfVklFV19MQUJFTF9ST1VURTogJ1JvdXRlOicsXG4gICAgUk9VVEVSX1ZJRVdfTEFCRUxfRElTVEFOQ0U6ICdFbnRmZXJudW5nOicsXG4gICAgUk9VVEVSX1ZJRVdfTEFCRUxfVElNRTogJ1plaXQ6JyxcbiAgICBST1VURVJfVklFV19MQUJFTF9QUk9GSUxFOiAnUHJvZmlsOicsXG5cbiAgICBST1VURVJfVklFV19BTEVSVF9BRERSRVNTOiAnQWRyZXNzZSBuaWNodCBnZWZ1bmRlbi4nLFxuICAgIFJPVVRFUl9WSUVXX0FMRVJUX0dPQ09ESU5HOiAnWnVncmlmZiBhdWYgR2VvY29kZXIgZmVobGdlc2NobGFnZW4uJyxcblxuICAgIFJPVVRFUjogJ1JvdXRlcicsXG4gICAgUk9VVEVSX046ICdOb3JkZW4nLFxuICAgIFJPVVRFUl9FOiAnT3N0JyxcbiAgICBST1VURVJfUzogJ1PDvGRlbicsXG4gICAgUk9VVEVSX1c6ICdXZXN0ZW4nLFxuICAgIFJPVVRFUl9ORTogJ05vcmRvc3QnLFxuICAgIFJPVVRFUl9TRTogJ1PDvGRvc3QnLFxuICAgIFJPVVRFUl9TVzogJ1PDvGR3ZXN0JyxcbiAgICBST1VURVJfTlc6ICdOb3Jkd2VzdCcsXG4gICAgUk9VVEVSX0RJUkVDVElPTl8wOiAnVW5iZWthbm50ZSBBbndlaXN1bmdbIGF1ZiA8Yj4lczwvYj5dJyxcbiAgICBST1VURVJfRElSRUNUSU9OXzE6ICdHZXJhZGVhdXMgd2VpdGVyZmFocmVuWyBhdWYgPGI+JXM8L2I+XScsXG4gICAgUk9VVEVSX0RJUkVDVElPTl8yOiAnTGVpY2h0IHJlY2h0cyBhYmJpZWdlbiBbYXVmIDxiPiVzPC9iPl0nLFxuICAgIFJPVVRFUl9ESVJFQ1RJT05fMzogJ1JlY2h0cyBhYmJpZWdlblsgYXVmIDxiPiVzPC9iPl0nLFxuICAgIFJPVVRFUl9ESVJFQ1RJT05fNDogJ1NjaGFyZiByZWNodHMgYWJiaWVnZW5bIGF1ZiA8Yj4lczwvYj5dJyxcbiAgICBST1VURVJfRElSRUNUSU9OXzU6ICdXZW5kZW5bIGF1ZiA8Yj4lczwvYj5dJyxcbiAgICBST1VURVJfRElSRUNUSU9OXzY6ICdTY2hhcmYgbGlua3MgYWJiaWVnZW5bIGF1ZiA8Yj4lczwvYj5dJyxcbiAgICBST1VURVJfRElSRUNUSU9OXzc6ICdMaW5rcyBhYmJpZWdlblsgYXVmIDxiPiVzPC9iPl0nLFxuICAgIFJPVVRFUl9ESVJFQ1RJT05fODogJ0xlaWNodCBsaW5rcyBhYmJpZWdlblsgYXVmIDxiPiVzPC9iPl0nLFxuICAgIFJPVVRFUl9ESVJFQ1RJT05fMTA6ICdGYWhyZW4gU2llIFJpY2h0dW5nIDxiPiVkPC9iPlsgYXVmIDxiPiVzPC9iPl0nLFxuICAgICdST1VURVJfRElSRUNUSU9OXzExLTEnOiAnSW4gZGVuIEtyZWlzdmVya2VociBlaW5mYWhyZW4gdW5kIGJlaSBlcnN0ZXIgTcO2Z2xpY2hrZWl0WyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtMic6ICdJbiBkZW4gS3JlaXN2ZXJrZWhyIGVpbmZhaHJlbiB1bmQgYmVpIHp3ZWl0ZXIgTcO2Z2xpY2hrZWl0WyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtMyc6ICdJbiBkZW4gS3JlaXN2ZXJrZWhyIGVpbmZhaHJlbiB1bmQgYmVpIGRyaXR0ZXIgTcO2Z2xpY2hrZWl0WyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtNCc6ICdJbiBkZW4gS3JlaXN2ZXJrZWhyIGVpbmZhaHJlbiB1bmQgYmVpIHZpZXJ0ZXIgTcO2Z2xpY2hrZWl0WyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtNSc6ICdJbiBkZW4gS3JlaXN2ZXJrZWhyIGVpbmZhaHJlbiB1bmQgYmVpIGbDvG5mdGVyIE3DtmdsaWNoa2VpdFsgaW4gUmljaHR1bmcgPGI+JXM8L2I+XSB2ZXJsYXNzZW4nLFxuICAgICdST1VURVJfRElSRUNUSU9OXzExLTYnOiAnSW4gZGVuIEtyZWlzdmVya2VociBlaW5mYWhyZW4gdW5kIGJlaSBzZWNoc3RlciBNw7ZnbGljaGtlaXRbIGluIFJpY2h0dW5nIDxiPiVzPC9iPl0gdmVybGFzc2VuJyxcbiAgICAnUk9VVEVSX0RJUkVDVElPTl8xMS03JzogJ0luIGRlbiBLcmVpc3ZlcmtlaHIgZWluZmFocmVuIHVuZCBiZWkgc2llYnRlciBNw7ZnbGljaGtlaXRbIGluIFJpY2h0dW5nIDxiPiVzPC9iPl0gdmVybGFzc2VuJyxcbiAgICAnUk9VVEVSX0RJUkVDVElPTl8xMS04JzogJ0luIGRlbiBLcmVpc3ZlcmtlaHIgZWluZmFocmVuIHVuZCBiZWkgYWNodGVyIE3DtmdsaWNoa2VpdFsgaW4gUmljaHR1bmcgPGI+JXM8L2I+XSB2ZXJsYXNzZW4nLFxuICAgICdST1VURVJfRElSRUNUSU9OXzExLTknOiAnSW4gZGVuIEtyZWlzdmVya2VociBlaW5mYWhyZW4gdW5kIGJlaSBuZXVudGVyIE3DtmdsaWNoa2VpdFsgaW4gUmljaHR1bmcgPGI+JXM8L2I+XSB2ZXJsYXNzZW4nLFxuICAgICdST1VURVJfRElSRUNUSU9OXzExLXgnOiAnSW4gZGVuIEtyZWlzdmVya2VociBlaW5mYWhyZW4gdW5kIGJlaSBlaW5lciBkZXIgdmllbGVuIE3DtmdsaWNoa2VpdGVuWyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICAgUk9VVEVSX0RJUkVDVElPTl8xNTogJ1NpZSBoYWJlbiBJaHIgWmllbCBlcnJlaWNodCcsXG5cbiAgICAnUk9VVEVSXzUuWF9UWVBFXzAnOiAnICVtIGZhaHJlblsgYXVmIDxiPiVzPC9iPl0nLFxuICAgICdST1VURVJfNS5YX1RZUEVfMSc6ICcgJW0gZGVtIFN0cmHDn2VudmVybGF1ZiBmb2xnZW5bIGFscyA8Yj4lczwvYj5dJyxcbiAgICAnUk9VVEVSXzUuWF9UWVBFXzInOiAnIEZhaHJlbiBTaWVbIGF1ZiA8Yj4lczwvYj5dIGxvcycsXG4gICAgJ1JPVVRFUl81LlhfVFlQRV8zJzogJyBEYXMgWmllbCBiZWZpbmRldCBzaWNoIDxiPiVtPC9iPicsXG4gICAgJ1JPVVRFUl81LlhfVFlQRV80JzogJyBXZWl0ZXJmYWhyZW5bIGF1ZiA8Yj4lczwvYj5dJyxcbiAgICAnUk9VVEVSXzUuWF9UWVBFXzUnOiAnICVtIFthdWYgPGI+JXM8L2I+IF1hdWZmYWhyZW4nLFxuICAgICdST1VURVJfNS5YX1RZUEVfNic6ICcgJW0gW2F1ZiA8Yj4lczwvYj4gXWFiZmFocmVuJyxcbiAgICAnUk9VVEVSXzUuWF9UWVBFXzcnOiAnIERlbiBGYWhyc3RyZWlmZW4gJW0gYmVudXR6ZW4gW2F1ZiA8Yj4lczwvYj5dJyxcbiAgICAnUk9VVEVSXzUuWF9UWVBFXzgnOiAnICVtIGFiYmllZ2VuIFthdWYgPGI+JXM8L2I+XScsXG4gICAgJ1JPVVRFUl81LlhfVFlQRV85JzogJyBEZW4gRmFocnN0cmVpZmVuICVtIGJlbnV0emVuIFthdWYgPGI+JXM8L2I+XScsXG4gICAgJ1JPVVRFUl81LlhfVFlQRV8xMCc6ICcgJW0gZmFocmVuIHVtIGF1ZiBkZXIgU3RyYcOfZSB6dSBibGVpYmVuJyxcbiAgICAnUk9VVEVSXzUuWF9UWVBFXzExJzogJyBJbSBLcmVpc3ZlcmtlaHIgZGllIDxiPiV6LjwvYj4gQXVzZmFocnQgbmVobWVuIFthdWYgPGI+JXM8L2I+XScsXG4gICAgJ1JPVVRFUl81LlhfVFlQRV8xMic6ICcgSW0gS3JlaXN2ZXJrZWhyIGRpZSA8Yj4lei48L2I+IEF1c2ZhaHJ0IG5laG1lbiBbYXVmIDxiPiVzPC9iPl0nLFxuICAgICdST1VURVJfNS5YX1RZUEVfMTMnOiAnICVtIGZhaHJlbiBbYXVmIDxiPiVzPC9iPl0nLFxuICAgICdST1VURVJfNS5YX1RZUEVfMTQnOiAnIGFiYmllZ2VuWyBhdWYgPGI+JXM8L2I+XScsXG5cbiAgICAnUk9VVEVSXzUuWF9NT0RfMCcgIDogJ1V0dXJuJyxcbiAgICAnUk9VVEVSXzUuWF9NT0RfMScgIDogJ1NjaGFyZiByZWNodHMnLFxuICAgICdST1VURVJfNS5YX01PRF8yJyAgOiAnUmVjaHRzJyxcbiAgICAnUk9VVEVSXzUuWF9NT0RfMycgIDogJ0xlaWNodCByZWNodHMnLFxuICAgICdST1VURVJfNS5YX01PRF80JyAgOiAnR2VyYWRlYXVzJyxcbiAgICAnUk9VVEVSXzUuWF9NT0RfNScgIDogJ0xlaWNodCBsaW5rcycsXG4gICAgJ1JPVVRFUl81LlhfTU9EXzYnICA6ICdMaW5rcycsXG4gICAgJ1JPVVRFUl81LlhfTU9EXzcnICA6ICdTY2hhcmYgbGlua3MnLFxuICAgICdST1VURVJfNS5YX01PRF84JyAgOiAnaW4gZGVyIE7DpGhlJyxcblxuICAgIFJPVVRFUl9GUk9NOiAnU3RhcnQnLFxuICAgIFJPVVRFUl9UTzogJ1ppZWwnLFxuICAgIFJPVVRFUl9GSU5EX1JPVVRFOiAnUm91dGUgZmluZGVuJyxcbiAgICBST1VURVJfTE9DX1JPVVRFX1RPOiAnUm91dGUgaGllcmhpbicsXG4gICAgUk9VVEVSX1JPVVRFREVTQzogJ1JvdXRlbmJlc2NocmVpYnVuZycsXG4gICAgUk9VVEVSX1JPVVRFTkFNRTogJ1JvdXRlJyxcbiAgICBST1VURVJfRElTVEFOQ0U6ICdEaXN0YW56JyxcbiAgICBST1VURVJfVElNRTogJ1plaXQnLFxuICAgIFJPVVRFUl9SRVZfR0VPQ09ESU5HOiAnRXJtaXR0bGUgQWRyZXNzZS4uLicsXG4gICAgUk9VVEVSX0VSUk9SX1JFVl9HRU9DT0RJTkc6ICdGZWhsZXIgYmVpbSBFcm1pdHRlbG4gZGVyIEFkcmVzc2UnLFxuICAgIFJPVVRFUl9TRUFSQ0hJTkc6ICdTdWNoZSBBZHJlc3NlLi4uJyxcbiAgICBST1VURVJfRVJST1JfU0VBUkNISU5HOiAnRmVobGVyIGJlaW0gU3VjaGVuIGRlciBBZHJlc3NlJyxcbiAgICBST1VURVJfQ0FMQ19ST1VURTogJ0JlcmVjaG5lIFJvdXRlLi4uJyxcbiAgICBST1VURVJfRVJST1JfQ0FMQ19ST1VURTogJ0ZlaGxlciBiZWltIEJlcmVjaG5lbiBkZXIgUm91dGUnLFxuXG4gICAgTUVBU1VSRVRPT0xTOiAnTWVzc3dlcmt6ZXVnZScsXG4gICAgTUVBU1VSRVRPT0xTX0lORk86ICdXw6RobGVuIFNpZSB3ZWl0ZXIgdW50ZW4gZWluZW4gTWVzc3R5cCBhdXMgdW5kIHN0YXJ0ZW4gU2llIGRpZSBNZXNzdW5nIGR1cmNoIGRhcyBLbGlja2VuIGF1ZiBkZXIgS2FydGUuJyxcbiAgICBNRUFTVVJFVE9PTFNfSU5GT19BRERJVElPTkFMOiAnKEVpbnplbG5lIE1lc3N1bmdlbiBrw7ZubmVuIG1pdCBlaW5lbSBEb3BwZWxrbGljayBiZWVuZGV0IHdlcmRlbi4pJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX1NFTEVDVDogJ0F1c3dhaGwgTW9kdXMnLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19MSU5FU1RSSU5HOiAnU3RyZWNrZW4gbWVzc2VuJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfUE9MWUdPTjogJ0Zsw6RjaGVuIG1lc3NlbicsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0NJUkNMRTogJ1JhZGl1cyBtZXNzZW4nLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19GUkVFSEFORDogJ0ZyZWloYW5kIG1lc3NlbicsXG5cbiAgICBHRU9CT09LTUFSS1NfUExBQ0VIT0xERVI6ICdOZXVlIEJlemVpY2hudW5nJyxcblxuICAgIElORk9QQUdFOiAnSW5mb3JtYXRpb25lbicsXG4gICAgQURESVRJT05BTFBBTkVMOiAnUGFuZWwnLFxuICAgIEFERElUSU9OQUxQQU5FTF9WSUVXX1RSSUdHRVI6ICdQYW5lbCBhbnplaWdlbicsXG4gICAgQUNDT1VOVDogJ0FjY291bnQnLFxuICAgIEFDQ09VTlRfVklFV19UUklHR0VSOiAnQWNjb3VudCBhbnplaWdlbicsXG5cbiAgICBTRUFSQ0hfTk9UX0ZPVU5EOiAnRGllIExva2F0aW9uIGtvbm50ZSBuaWNodCBnZWZ1bmRlbiB3ZXJkZW4uIEJpdHRlIHZlcnN1Y2hlbiBTaWUgZWluZSBhbmRlcmUgRWluZ2FiZS4nLFxuXG4gICAgTk9ORTogJycgLy8gbGFzdCBsaW5lXG4gIH0pOyAvLyBlbmQgb2YgXCJsYW5ndWFnZSBjb25zdGFudHNcIiAtLS1cblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgbGFuZ0NvbnN0YW50c0dlcm1hbiA9IHRoaXMuYzRnLm1hcHMuY29uc3RhbnQuaTE4bjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGUuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnN0YW50ID0gdGhpcy5jNGcubWFwcy5jb25zdGFudCB8fCB7fTtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBMYW5ndWFnZSBjb25zdGFudHMgKGVuKVxuICAgKi9cbiAgYzRnLm1hcHMuY29uc3RhbnQuaTE4biA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnN0YW50LmkxOG4sIHtcblxuICAgIExBTkc6ICdlbicsXG5cbiAgICBOQU1FOiAnTmFtZScsXG4gICAgSElERTogJ0hpZGUnLFxuICAgIENMT1NFOiAnQ2xvc2UnLFxuICAgIFBPSU5UOiAnUE9JJyxcbiAgICBGUkVFSEFORDogJ2ZyZWVoYW5kJyxcbiAgICBMSU5FOiAnTGluZScsXG4gICAgUE9MWUdPTjogJ0FyZWEnLFxuICAgIENJUkNMRTogJ1JhZGl1cycsXG4gICAgUEVSSU1FVEVSOiAnUGVyaW1ldGVyJyxcbiAgICBMRU5HVEg6ICdMZW5ndGgnLFxuICAgIFNVUkZBQ0VBUkVBOiAnU3VyZmFjZSBhcmVhJyxcbiAgICBSQURJVVM6ICdSYWRpdXMnLFxuICAgIFJFRlJFU0g6ICdSZWZyZXNoJyxcbiAgICBDT1BZX1RPX0NMSVBCT0FSRDogJ0NvcHkgdG8gY2xpcGJvYXJkJyxcblxuICAgIENUUkxfWk9PTV9JTjogJ1pvb20gaW4nLFxuICAgIENUUkxfWk9PTV9PVVQ6ICdab29tIG91dCcsXG4gICAgQ1RSTF9aT09NX0VYVDogJ0ZpdCB0byBleHRlbnQnLFxuICAgIENUUkxfWk9PTV9IT01FOiAnanVtcCB0byBpbml0aWFsIHBvc2l0aW9uJyxcbiAgICBDVFJMX1pPT01fUE9TOiAnanVtcCB0byBicm93c2VyL2RldmljZSBwb3NpdGlvbicsXG4gICAgQ1RSTF9aT09NX1NMSURFUjogJ1pvb20gc2xpZGVyJyxcbiAgICBDVFJMX1JFU0VUX1JPVEFUSU9OOiAnUmVzZXQgcm90YXRpb24gKHRvdWNoLCBhbHQrbW91c2UpJyxcbiAgICBDVFJMX1BPUlRTSURFOiAnVG9nZ2xlIHBvcnRzaWRlJyxcbiAgICBDVFJMX1JPVVRFUjogJ1RvZ2dsZSByb3V0ZXInLFxuICAgIENUUkxfRURJVE9SOiAnVG9nZ2xlIGVkaXRvcicsXG4gICAgQ1RSTF9NRUFTVVJFVE9PTFM6ICdUb2dnbGUgbWVhc3VyZXRvb2xzJyxcbiAgICBDVFJMX0lORk9QQUdFOiAnVG9nZ2xlIGluZm9wYWdlJyxcbiAgICBDVFJMX0FERElUSU9OQUxQQU5FTDogJ1RvZ2dsZSBwYW5lbCcsXG4gICAgQ1RSTF9BQ0NPVU5UOiAnVG9nZ2xlIGFjY291bnQnLFxuICAgIENUUkxfWk9PTUxFVkVMOiAnWm9vbScsXG4gICAgQ1RSTF9NT1VTRUNPT1JEUzogJ0xvbi9MYXQnLFxuICAgIENUUkxfR0VPU0VBUkNIOiAnVG9nZ2xlIGdlb3NlYXJjaCcsXG4gICAgQ1RSTF9TVEFSVF9TRUFSQ0g6ICdzdGFydCBzZWFyY2gnLFxuICAgIENUUkxfT1ZFUlZJRVdNQVA6ICdUb2dnbGUgb3ZlcnZpZXdtYXAnLFxuICAgIENUUkxfR0VPQk9PS01BUktTOiAnTWFuYWdlIGZhdm9yaXRlcycsXG4gICAgQ1RSTF9TSURFQk9BUkQ6ICdUb2dnbGUgc2lkZWJvYXJkJyxcbiAgICBDVFJMX1NUQVJCT0FSRDogJ1RvZ2dsZSBzdGFyYm9hcmQnLFxuICAgIENUUkxfQVRUUklCVVRJT046ICdTaG93IGF0dHJpYnV0aW9uJyxcbiAgICBDVFJMX0dSSUQ6ICdUb2dnbGUgZ3JpZCcsXG4gICAgQ1RSTF9QRVJNQUxJTks6ICdHZW5lcmF0ZSBQZXJtYWxpbmsnLFxuICAgIENUUkxfRlVMTFNDUkVFTjogJ1RvZ2dsZSBmdWxsc2NyZWVuLW1vZGUnLFxuICAgIENUUkxfUFJJTlQ6ICdFeHBvcnQgbWFwJyxcblxuICAgIEVESVRPUjogJ0VkaXRvcicsXG4gICAgRURJVE9SX0VOQUJMRV9JTlNUQU5UX01FQVNVUkU6ICdNZWFzdXJlIHdoaWxlIGRyYXdpbmcnLFxuICAgIEVESVRPUl9FTkFCTEVfRlJFRUhBTkRfRFJBVzogJ0ZyZWVoYW5kIGRyYXcnLFxuICAgIEVESVRPUl9GRUFUVVJFX0FQUExZOiAnRW5kIG1vZGlmaWNhdGlvbicsXG4gICAgRURJVE9SX0ZFQVRVUkVfREVMRVRFOiAnRGVsZXRlIGZlYXR1cmUnLFxuICAgIEVESVRPUl9GRUFUVVJFX01PRElGWTogJ01vZGlmeSBmZWF0dXJlJyxcbiAgICBFRElUT1JfU0VMRUNUX0lORk86ICdDbGljayBhbiBlbGVtZW50IG9uIHRoZSBtYXAgdG8gc2VsZWN0IGl0LicsXG4gICAgRURJVE9SX1NFTEVDVF9JTkZPX0FERElUSU9OQUw6ICdbY3RybF0gKyBbY2xpY2tdIGZvciBtdWx0aXNlbGVjdCA8YnI+W3NoaWZ0XSBmb3IgYm94c2VsZWN0JyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX1NFTEVDVDogJ1NlbGVjdC1tb2RlJyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfUE9JTlQ6ICdBZGQgUE9JcycsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0ZSRUVIQU5EOiAnRHJhdyBmcmVlaGFuZCcsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0xJTkVTVFJJTkc6ICdBZGQgdHJhY2tzJyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfUE9MWUdPTjogJ0FkZCBhcmVhcycsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0NJUkNMRTogJ0FkZCBjaXJjbGVzJyxcblxuICAgIFBPUFVQX1JPVVRFX0ZST006ICdSb3V0ZSBmcm9tIGhlcmUnLFxuICAgIFBPUFVQX1JPVVRFX1RPOiAnUm91dGUgdG8gaGVyZScsXG5cbiAgICBTVEFSQk9BUkQ6ICdTdGFyYm9hcmQnLFxuICAgIFNUQVJCT0FSRF9CQVNFTEFZRVI6ICdCYXNlbGF5ZXInLFxuICAgIFNUQVJCT0FSRF9MQVlFUjogJ0xheWVyJyxcbiAgICBTVEFSQk9BUkRfVklFV19UUklHR0VSX0JBU0VMQVlFUlNXSVRDSEVSOiAnQmFzZWxheWVyc3dpdGNoZXInLFxuICAgIFNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUjogJ0xheWVyc3dpdGNoZXInLFxuXG4gICAgUk9VVEVSX1ZJRVdfQUREUkVTU19JTlBVVDogJ0ZpbmQgcm91dGUnLFxuICAgIFJPVVRFUl9GUk9NX0xBQkVMOiAnU3RhcnQnLFxuICAgIFJPVVRFUl9UT19MQUJFTDogJ0VuZCcsXG4gICAgUk9VVEVSX0NMRUFSX1RJVExFOiAnRGVsZXRlJyxcbiAgICBST1VURVJfQ0xFQVJfSFRNTDogJycsXG4gICAgUk9VVEVSX0xhYmVsX0ludGVyaW06ICdJbnRlcmltIEdvYWxzJyxcblxuICAgIFJPVVRFUl9TV0lUQ0g6J1N3aXRjaCBiZXR3ZWVuIFN0YXJ0IGFuZCBFbmQnLFxuICAgIFJPVVRFUl9PVkVSOidBZGQgaW50ZXJpbSBnb2FsJyxcbiAgICBST1VURVJfUFJJTlQ6J1ByaW50IHJvdXRlIGRlc2NyaXB0aW9uJyxcblxuXG4gICAgUk9VVEVSX1ZJRVdfTEFCRUxfUk9VVEU6ICdSb3V0ZTonLFxuICAgIFJPVVRFUl9WSUVXX0xBQkVMX0RJU1RBTkNFOiAnRGlzdGFuY2U6JyxcbiAgICBST1VURVJfVklFV19MQUJFTF9USU1FOiAnVGltZTonLFxuICAgIFJPVVRFUl9WSUVXX0xBQkVMX1BST0ZJTEU6J1Byb2ZpbGUnLFxuXG4gICAgUk9VVEVSX1ZJRVdfQUxFUlRfQUREUkVTUzogJ0FkZHJlc3Mgbm90IGZvdW5kLicsXG4gICAgUk9VVEVSX1ZJRVdfQUxFUlRfR09DT0RJTkc6ICdObyBhY2Nlc3MgdG8gZ2VvY29kaW5nLicsXG5cbiAgICBST1VURVI6ICdSb3V0ZXInLFxuICAgIFJPVVRFUl9OOiAnSGVhZCBub3J0aCcsXG4gICAgUk9VVEVSX0U6ICdIZWFkIGVhc3QnLFxuICAgIFJPVVRFUl9TOiAnSGVhZCBzb3V0aCcsXG4gICAgUk9VVEVSX1c6ICdIZWFkIHdlc3QnLFxuICAgIFJPVVRFUl9ORTogJ0hlYWQgbm9ydGhlYXN0JyxcbiAgICBST1VURVJfU0U6ICdIZWFkIHNvdXRoZWFzdCcsXG4gICAgUk9VVEVSX1NXOiAnSGVhZCBzb3V0aHdlc3QnLFxuICAgIFJPVVRFUl9OVzogJ0hlYWQgbm9ydGh3ZXN0JyxcbiAgICBST1VURVJfRElSRUNUSU9OXzA6ICd1bmtub3duIGRpcmVjdGlvblsgb250byA8Yj4lczwvYj5dJyxcbiAgICBST1VURVJfRElSRUNUSU9OXzE6ICdzdHJhaWdodCBhaGVhZFsgb250byA8Yj4lczwvYj5dJyxcbiAgICBST1VURVJfRElSRUNUSU9OXzI6ICdzbGlnaHQgcmlnaHRbIG9udG8gPGI+JXM8L2I+XScsXG4gICAgUk9VVEVSX0RJUkVDVElPTl8zOiAncmlnaHRbIG9udG8gPGI+JXM8L2I+XScsXG4gICAgUk9VVEVSX0RJUkVDVElPTl80OiAnc2hhcnAgcmlnaHRbIG9udG8gPGI+JXM8L2I+XScsXG4gICAgUk9VVEVSX0RJUkVDVElPTl81OiAndHVyblsgb250byA8Yj4lczwvYj5dJyxcbiAgICBST1VURVJfRElSRUNUSU9OXzY6ICdzaGFycCB0dXJuIGxlZnRbIG9udG8gPGI+JXM8L2I+XScsXG4gICAgUk9VVEVSX0RJUkVDVElPTl83OiAndHVybiBsZWZ0WyBvbnRvIDxiPiVzPC9iPl0nLFxuICAgIFJPVVRFUl9ESVJFQ1RJT05fODogJ2xpZ2h0IHR1cm4gbGVmdFsgb250byA8Yj4lczwvYj5dJyxcbiAgICBST1VURVJfRElSRUNUSU9OXzEwOiAnZHJpdmUgaW4gZGlyZWN0aW9uIG9mIDxiPiVkPC9iPlsgb250byA8Yj4lczwvYj5dJyxcbiAgICAnUk9VVEVSX0RJUkVDVElPTl8xMS0xJzogJ1Rha2UgdGhlIGZpcnN0IGV4aXQgaW4gdGhlIHJvdW5kYWJvdXRbIG9udG8gPGI+JXM8L2I+XScsXG4gICAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtMic6ICdUYWtlIHRoZSAybmQgZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgICAnUk9VVEVSX0RJUkVDVElPTl8xMS0zJzogJ1Rha2UgdGhlIDNyZCBleGl0IGluIHRoZSByb3VuZGFib3V0WyBvbnRvIDxiPiVzPC9iPl0nLFxuICAgICdST1VURVJfRElSRUNUSU9OXzExLTQnOiAnVGFrZSB0aGUgNHRoIGV4aXQgaW4gdGhlIHJvdW5kYWJvdXRbIG9udG8gPGI+JXM8L2I+XScsXG4gICAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtNSc6ICdUYWtlIHRoZSA1dGggZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgICAnUk9VVEVSX0RJUkVDVElPTl8xMS02JzogJ1Rha2UgdGhlIDZ0aCBleGl0IGluIHRoZSByb3VuZGFib3V0WyBvbnRvIDxiPiVzPC9iPl0nLFxuICAgICdST1VURVJfRElSRUNUSU9OXzExLTcnOiAnVGFrZSB0aGUgN3RoIGV4aXQgaW4gdGhlIHJvdW5kYWJvdXRbIG9udG8gPGI+JXM8L2I+XScsXG4gICAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtOCc6ICdUYWtlIHRoZSA4dGggZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgICAnUk9VVEVSX0RJUkVDVElPTl8xMS05JzogJ1Rha2UgdGhlIDl0aCBleGl0IGluIHRoZSByb3VuZGFib3V0WyBvbnRvIDxiPiVzPC9iPl0nLFxuICAgICdST1VURVJfRElSRUNUSU9OXzExLXgnOiAnVGFrZSBvbmUgb2YgdGhlIGV4aXRzIGluIHRoZSByb3VuZGFib3V0WyBvbnRvIDxiPiVzPC9iPl0nLFxuICAgIFJPVVRFUl9ESVJFQ1RJT05fMTU6ICdEZXN0aW5hdGlvbiByZWFjaGVkJyxcblxuICAgICAgJ1JPVVRFUl81LlhfVFlQRV8wJzogJyBUdXJuICVtIG9uWyA8Yj4lczwvYj5dJyxcbiAgICAgICdST1VURVJfNS5YX1RZUEVfMSc6ICcgRm9sbG93IHRoZSBjb3Vyc2Ugb2YgdGhlIHJvYWQgJW1bIGFzIDxiPiVzPC9iPl0nLFxuICAgICAgJ1JPVVRFUl81LlhfVFlQRV8yJzogJyBEZXBhcnRbIG9uIDxiPiVzPC9iPl0nLFxuICAgICAgJ1JPVVRFUl81LlhfVFlQRV8zJzogJyBBcnJpdmUgPGI+JW08L2I+JyxcbiAgICAgICdST1VURVJfNS5YX1RZUEVfNCc6ICcgQ29udGludWUgZHJpdmluZ1sgb24gPGI+JXM8L2I+XScsXG4gICAgICAnUk9VVEVSXzUuWF9UWVBFXzUnOiAnIFRha2UgdGhlIHJhbXAgJW1bIG9uIDxiPiVzPC9iPl0nLFxuICAgICAgJ1JPVVRFUl81LlhfVFlQRV82JzogJyBUYWtlIHRoZSByYW1wICVtWyB0byBleGl0IG9uPGI+JXM8L2I+XScsXG4gICAgICAnUk9VVEVSXzUuWF9UWVBFXzcnOiAnIFRha2UgdGhlICVtIHNpdGUgb2YgdGhlIGZvcmsgdG9bIDxiPiVzPC9iPl0nLFxuICAgICAgJ1JPVVRFUl81LlhfVFlQRV84JzogJyBUdXJuICVtWyBvbiA8Yj4lczwvYj5dJyxcbiAgICAgICdST1VURVJfNS5YX1RZUEVfOSc6ICcgVGFrZSB0aGUgbGFuZSAlbVsgb24gPGI+JXM8L2I+XScsXG4gICAgICAnUk9VVEVSXzUuWF9UWVBFXzEwJzogJyBUdXJuICVtIHRvIHN0YXkgb24gdGhlIHJvYWQnLFxuICAgICAgJ1JPVVRFUl81LlhfVFlQRV8xMSc6ICcgTGVhdmUgdGhlIHJvdW5kYWJvdXQgb24gdGhlICV6LiBleGl0WyB0byA8Yj4lczwvYj5dJyxcbiAgICAgICdST1VURVJfNS5YX1RZUEVfMTInOiAnIExlYXZlIHRoZSByb3VuZGFib3V0IG9uIHRoZSAlei4gZXhpdFsgdG8gPGI+JXM8L2I+XScsXG4gICAgICAnUk9VVEVSXzUuWF9UWVBFXzEzJzogJyBUdXJuICVtWyBvbiA8Yj4lczwvYj5dJyxcbiAgICAgICdST1VURVJfNS5YX1RZUEVfMTQnOiAnIEZvbGxvdyB0aGUgcm9hZCAlbScsXG5cbiAgICAgICdST1VURVJfNS5YX01PRF8wJyAgOiAnVXR1cm4nLFxuICAgICAgJ1JPVVRFUl81LlhfTU9EXzEnICA6ICdzaGFycCByaWdodCcsXG4gICAgICAnUk9VVEVSXzUuWF9NT0RfMicgIDogJ3JpZ2h0JyxcbiAgICAgICdST1VURVJfNS5YX01PRF8zJyAgOiAnc2xpZ2h0IHJpZ2h0JyxcbiAgICAgICdST1VURVJfNS5YX01PRF80JyAgOiAnc3RyYWlnaHQnLFxuICAgICAgJ1JPVVRFUl81LlhfTU9EXzUnICA6ICdzbGlnaHQgbGVmdCcsXG4gICAgICAnUk9VVEVSXzUuWF9NT0RfNicgIDogJ2xlZnQnLFxuICAgICAgJ1JPVVRFUl81LlhfTU9EXzcnICA6ICdzaGFycCBsZWZ0JyxcbiAgICAgICdST1VURVJfNS5YX01PRF84JyAgOiAnc29tZWhvdycsXG5cbiAgICBST1VURVJfRlJPTTogJ1N0YXJ0JyxcbiAgICBST1VURVJfVE86ICdFbmQnLFxuICAgIFJPVVRFUl9GSU5EX1JPVVRFOiAnRmluZCByb3V0ZScsXG4gICAgUk9VVEVSX0xPQ19ST1VURV9UTzogJ1JvdXRlIHRvIGhlcmUnLFxuICAgIFJPVVRFUl9ST1VURURFU0M6ICdEZXNjcmlwdGlvbicsXG4gICAgUk9VVEVSX1JPVVRFTkFNRTogJ1JvdXRlJyxcbiAgICBST1VURVJfRElTVEFOQ0U6ICdEaXN0YW5jZScsXG4gICAgUk9VVEVSX1RJTUU6ICdUaW1lJyxcbiAgICBST1VURVJfUkVWX0dFT0NPRElORzogJ0lkZW50aWZpZWQgYWRkcmVzcy4uLicsXG4gICAgUk9VVEVSX0VSUk9SX1JFVl9HRU9DT0RJTkc6ICdGYXVsdCEgQ2FuIG5vdCBpZGVudGlmaXkgYWRkcmVzcycsXG4gICAgUk9VVEVSX1NFQVJDSElORzogJ1NlYXJjaCBhZGRyZXNzLi4uJyxcbiAgICBST1VURVJfRVJST1JfU0VBUkNISU5HOiAnRmF1bHQhIENhbiBub3QgZmluZCBhZGRyZXNzJyxcbiAgICBST1VURVJfQ0FMQ19ST1VURTogJ0NhbGMgcm91dGUuLi4nLFxuICAgIFJPVVRFUl9FUlJPUl9DQUxDX1JPVVRFOiAnRmF1bHQhIENhbiBub3QgY2FsYyBhZGRyZXNzJyxcblxuICAgIE1FQVNVUkVUT09MUzogJ01lYXN1cmV0b29scycsXG4gICAgTUVBU1VSRVRPT0xTX0lORk86ICdTZWxlY3QgYSBtZWFzdXJldHlwZSBiZWxvdyBhbmQgc3RhcnQgbWVhc3VyaW5nIGJ5IGNsaWNraW5nIG9uIHRoZSBtYXAuJyxcbiAgICBNRUFTVVJFVE9PTFNfSU5GT19BRERJVElPTkFMOiAnKFRvIHN0b3AgYSBtZWFzdXJlbWVudCwgZG91YmxlLWNsaWNrIG9uIHRoZSBtYXAuKScsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9TRUxFQ1Q6ICdTZWxlY3QtbW9kZScsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0xJTkVTVFJJTkc6ICdNZWFzdXJlIHRyYWNrcycsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX1BPTFlHT046ICdNZWFzdXJlIGFyZWFzJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfQ0lSQ0xFOiAnTWVhc3VyZSByYWRpdXMnLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19GUkVFSEFORDogJ01lYXN1cmUgZnJlZWhhbmQnLFxuXG4gICAgR0VPQk9PS01BUktTX1BMQUNFSE9MREVSOiAnRW50ZXIgbmV3IGNhcHRpb24nLFxuXG4gICAgSU5GT1BBR0U6ICdJbmZvcGFnZScsXG4gICAgSU5GT1BBR0VfVklFV19UUklHR0VSOiAnU2hvdyBpbmZvcm1hdGlvbnMnLFxuXG4gICAgQURESVRJT05BTFBBTkVMOiAnUGFuZWwnLFxuICAgIEFERElUSU9OQUxQQU5FTF9WSUVXX1RSSUdHRVI6ICdTaG93IHBhbmVsJyxcblxuICAgIEFDQ09VTlQ6ICdBY2NvdW50JyxcbiAgICBBQ0NPVU5UX1ZJRVdfVFJJR0dFUjogJ1Nob3cgYWNjb3VudCcsXG5cbiAgICBTRUFSQ0hfTk9UX0ZPVU5EOiAnTG9jYXRpb24gbm90IGZvdW5kLiBTb3JyeS4uLiA6KCcsXG5cbiAgICBOT05FOiAnJyAvLyBsYXN0IGxpbmVcbiAgfSk7IC8vIGVuZCBvZiBcImxhbmd1YWdlIGNvbnN0YW50c1wiIC0tLVxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBsYW5nQ29uc3RhbnRzRW5nbGlzaCA9IHRoaXMuYzRnLm1hcHMuY29uc3RhbnQuaTE4bjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW4uanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnN0YW50ID0gdGhpcy5jNGcubWFwcy5jb25zdGFudCB8fCB7fTtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDU1MgY29uc3RhbnRzXG4gICAqL1xuICBjNGcubWFwcy5jb25zdGFudC5jc3MgPSAkLmV4dGVuZChjNGcubWFwcy5jb25zdGFudC5jc3MsIHtcblxuICAgIE9QRU46ICdjNGctb3BlbicsXG4gICAgQ0xPU0U6ICdjNGctY2xvc2UnLFxuICAgIENMT1NFQUJMRTogJ2M0Zy1jbG9zZWFibGUnLFxuICAgIEVOQUJMRUQ6ICdjNGctZW5hYmxlZCcsXG4gICAgRElTQUJMRUQ6ICdjNGctZGlzYWJsZWQnLFxuICAgIEhJREU6ICdjNGctaGlkZScsXG4gICAgSUNPTjogJ2M0Zy1pY29uJyxcbiAgICBDT05UUk9MOiAnYzRnLWNvbnRyb2wnLFxuICAgIENPUFk6ICdjNGctY29weScsXG4gICAgUkVGUkVTSDogJ2M0Zy1yZWZyZXNoJyxcbiAgICBBQ1RJVkU6ICdjNGctYWN0aXZlJyxcbiAgICBJTkFDVElWRTogJ2M0Zy1pbmFjdGl2ZScsXG4gICAgTE9BRElORzogJ2M0Zy1sb2FkaW5nJyxcbiAgICBBTklNQVRJT05fU1BJTjogJ2M0Zy1hbmltYXRpb24tc3BpbicsXG4gICAgTEFSR0U6ICdjNGctbGFyZ2UnLFxuICAgIFNNQUxMOiAnYzRnLXNtYWxsJyxcbiAgICBIT1JJWk9OVEFMOiAnYzRnLWhvcml6b250YWwnLFxuICAgIFZFUlRJQ0FMOiAnYzRnLXZlcnRpY2FsJyxcblxuICAgIEFUVFJJQlVUSU9OX0xPR086ICdjNGctYXR0cmlidXRpb24tbG9nbycsXG4gICAgQ09OVFJPTF9DT05UQUlORVJfVEw6ICdjNGctY29udHJvbC1jb250YWluZXItdG9wLWxlZnQnLFxuICAgIENPTlRST0xfQ09OVEFJTkVSX1RSOiAnYzRnLWNvbnRyb2wtY29udGFpbmVyLXRvcC1yaWdodCcsXG4gICAgQ09OVFJPTF9DT05UQUlORVJfQkw6ICdjNGctY29udHJvbC1jb250YWluZXItYm90dG9tLWxlZnQnLFxuICAgIENPTlRST0xfQ09OVEFJTkVSX0JMX1NVQjogJ2M0Zy1jb250cm9sLWNvbnRhaW5lci1ib3R0b20tbGVmdC1zdWInLFxuICAgIENPTlRST0xfQ09OVEFJTkVSX0JSOiAnYzRnLWNvbnRyb2wtY29udGFpbmVyLWJvdHRvbS1yaWdodCcsXG4gICAgRURJVE9SX0RSQVdfQ09OVEVOVF9QT0lOVDogJ2M0Zy1kcmF3LWNvbnRlbnQtcG9pbnQnLFxuICAgIEVESVRPUl9EUkFXX0NPTlRFTlRfRlJFRUhBTkQ6ICdjNGctZHJhdy1jb250ZW50LWZyZWVoYW5kJyxcbiAgICBFRElUT1JfRFJBV19DT05URU5UX0xJTkVTVFJJTkc6ICdjNGctZHJhdy1jb250ZW50LWxpbmUnLFxuICAgIEVESVRPUl9EUkFXX0NPTlRFTlRfUE9MWUdPTjogJ2M0Zy1kcmF3LWNvbnRlbnQtcG9seWdvbicsXG4gICAgRURJVE9SX0RSQVdfQ09OVEVOVF9DSVJDTEU6ICdjNGctZHJhdy1jb250ZW50LWNpcmNsZScsXG4gICAgRURJVE9SX0RSQVdfQ09OVEVOVF9QUk9KRUNUOiAnYzRnLWRyYXctY29udGVudC1wcm9qZWN0JyxcbiAgICBFRElUT1JfRFJBV19UUklHR0VSOiAnYzRnLWRyYXctdHJpZ2dlcicsXG4gICAgRURJVE9SX0NPTlRFTlRfU0VMRUNUOiAnYzRnLWNvbnRlbnQtc2VsZWN0JyxcbiAgICBFRElUT1JfRFJBV19PUFRJT05TOiAnYzRnLWVkaXRvci1kcmF3LW9wdGlvbnMnLFxuICAgIEVESVRPUl9GRUFUVVJFX0FQUExZOiAnYzRnLWVkaXRvci1mZWF0dXJlLWFwcGx5JyxcbiAgICBFRElUT1JfRkVBVFVSRV9ERUxFVEU6ICdjNGctZWRpdG9yLWZlYXR1cmUtZGVsZXRlJyxcbiAgICBFRElUT1JfRkVBVFVSRV9NT0RJRlk6ICdjNGctZWRpdG9yLWZlYXR1cmUtbW9kaWZ5JyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX1NFTEVDVDogJ2M0Zy1lZGl0b3Itdmlldy10cmlnZ2VyLXNlbGVjdCcsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX1BPSU5UOiAnYzRnLWVkaXRvci12aWV3LXRyaWdnZXItZHJhdy1wb2ludCcsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0ZSRUVIQU5EOiAnYzRnLWVkaXRvci12aWV3LXRyaWdnZXItZHJhdy1mcmVlaGFuZCcsXG4gICAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0xJTkVTVFJJTkc6ICdjNGctZWRpdG9yLXZpZXctdHJpZ2dlci1kcmF3LWxpbmUnLFxuICAgIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19QT0xZR09OOiAnYzRnLWVkaXRvci12aWV3LXRyaWdnZXItZHJhdy1wb2x5Z29uJyxcbiAgICBFRElUT1JfVklFV19UUklHR0VSX0RSQVdfQ0lSQ0xFOiAnYzRnLWVkaXRvci12aWV3LXRyaWdnZXItZHJhdy1jaXJjbGUnLFxuICAgIEdFT1NFQVJDSDogJ2M0Zy1nZW9zZWFyY2gnLFxuICAgIEdFT1NFQVJDSF9XUkFQUEVSOiAnYzRnLWdlb3NlYXJjaC13cmFwcGVyJyxcbiAgICBHRU9TRUFSQ0hfVFJJR0dFUjogJ2M0Zy1nZW9zZWFyY2gtdHJpZ2dlcicsXG4gICAgR0VPU0VBUkNIX1NUQVJUOiAnYzRnLWdlb3NlYXJjaC1zdGFydCcsXG4gICAgR1JBVElDVUxFOiAnYzRnLWdyYXRpY3VsZScsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9TRUxFQ1Q6ICdjNGctbWVhc3VyZXRvb2xzLXZpZXctdHJpZ2dlci1zZWxlY3QnLFxuICAgIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19MSU5FU1RSSU5HOiAnYzRnLW1lYXN1cmV0b29scy12aWV3LXRyaWdnZXItZHJhdy1saW5lJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfUE9MWUdPTjogJ2M0Zy1tZWFzdXJldG9vbHMtdmlldy10cmlnZ2VyLWRyYXctcG9seWdvbicsXG4gICAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0NJUkNMRTogJ2M0Zy1tZWFzdXJldG9vbHMtdmlldy10cmlnZ2VyLWRyYXctY2lyY2xlJyxcbiAgICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfRlJFRUhBTkQ6ICdjNGctbWVhc3VyZXRvb2xzLXZpZXctdHJpZ2dlci1kcmF3LWZyZWVoYW5kJyxcbiAgICBQUklOVDonYzRnLXByaW50JyxcbiAgICBJTkZPUEFHRV9WSUVXX1RSSUdHRVI6ICdjNGctaW5mb3BhZ2Utdmlldy10cmlnZ2VyJyxcbiAgICBJTkZPUEFHRTogJ2M0Zy1pbmZvcGFnZScsXG4gICAgQURESVRJT05BTFBBTkVMX1ZJRVdfVFJJR0dFUjogJ2M0Zy1hZGRpdGlvbmFscGFuZWwtdmlldy10cmlnZ2VyJyxcbiAgICBBRERJVElPTkFMUEFORUw6ICdjNGctYWRkaXRpb25hbHBhbmVsJyxcbiAgICBBQ0NPVU5UX1ZJRVdfVFJJR0dFUjogJ2M0Zy1hY2NvdW50LXZpZXctdHJpZ2dlcicsXG4gICAgQUNDT1VOVDogJ2M0Zy1hY2NvdW50JyxcbiAgICBPVkVSVklFV01BUDogJ2M0Zy1vdmVydmlld21hcCcsXG4gICAgT1ZFUlZJRVdNQVBfV1JBUFBFUjogJ2M0Zy1vdmVydmlld21hcC13cmFwcGVyJyxcbiAgICBHRU9CT09LTUFSS1M6ICdjNGctZ2VvYm9va21hcmtzJyxcbiAgICBQRVJNQUxJTks6ICdjNGctcGVybWFsaW5rJyxcbiAgICBQRVJNQUxJTktfUE9QVVA6ICdjNGctcGVybWFsaW5rLXBvcHVwJyxcbiAgICBQT1BVUF9DTE9TRTogJ2M0Zy1wb3B1cC1jbG9zZScsXG4gICAgUE9QVVBfUk9VVEVfV1JBUFBFUjogJ2M0Zy1wb3B1cC1yb3V0ZS13cmFwcGVyJyxcbiAgICBQT1BVUF9ST1VURV9GUk9NOiAnYzRnLXBvcHVwLXJvdXRlLWZyb20nLFxuICAgIFBPUFVQX1JPVVRFX1RPOiAnYzRnLXBvcHVwLXJvdXRlLXRvJyxcbiAgICBQT1JUU0lERTogJ2M0Zy1wb3J0c2lkZScsXG4gICAgUE9SVFNJREVfQ09OVEFJTkVSOiAnYzRnLXBvcnRzaWRlLWNvbnRhaW5lcicsXG4gICAgUE9SVFNJREVfQ09OVFJPTDogJ2M0Zy1wb3J0c2lkZS1jb250cm9sJyxcbiAgICBQT1JUU0lERV9XUkFQUEVSOiAnYzRnLXBvcnRzaWRlLXdyYXBwZXInLFxuICAgIFBPUlRTSURFX1RJVExFQkFSOiAnYzRnLXBvcnRzaWRlLXRpdGxlYmFyJyxcbiAgICBQT1JUU0lERV9UT1BfVE9PTEJBUjogJ2M0Zy1wb3J0c2lkZS10b3AtdG9vbGJhcicsXG4gICAgUE9SVFNJREVfQ09OVEVOVF9DT05UQUlORVI6ICdjNGctcG9ydHNpZGUtY29udGVudC1jb250YWluZXInLFxuICAgIFBPUlRTSURFX0JPVFRPTV9UT09MQkFSOiAnYzRnLXBvcnRzaWRlLWJvdHRvbS10b29sYmFyJyxcbiAgICBQT1JUU0lERV9TVEFUVVNCQVI6ICdjNGctcG9ydHNpZGUtc3RhdHVzYmFyJyxcbiAgICBQT1JUU0lERV9WSUVXVFJJR0dFUkJBUjogJ2M0Zy1wb3J0c2lkZS12aWV3dHJpZ2dlcmJhcicsXG4gICAgUE9SVFNJREVfSEVBRExJTkU6ICdjNGctcG9ydHNpZGUtaGVhZGxpbmUnLFxuICAgIFBPUlRTSURFX0JVVFRPTkJBUjogJ2M0Zy1wb3J0c2lkZS1idXR0b25iYXInLFxuICAgIFBPUlRTSURFX0JVVFRPTjogJ2M0Zy1wb3J0c2lkZS1idXR0b24nLFxuICAgIFBPUlRTSURFX0hJREU6ICdjNGctcG9ydHNpZGUtaGlkZScsXG4gICAgUE9SVFNJREVfQ0xPU0U6ICdjNGctcG9ydHNpZGUtY2xvc2UnLFxuICAgIFNQSU5ORVI6ICdjNGctc3Bpbm5lcicsXG4gICAgU1RBUkJPQVJEOiAnYzRnLXN0YXJib2FyZCcsXG4gICAgU1RBUkJPQVJEX0NPTlRBSU5FUjogJ2M0Zy1zdGFyYm9hcmQtY29udGFpbmVyJyxcbiAgICBTVEFSQk9BUkRfQ09OVFJPTDogJ2M0Zy1zdGFyYm9hcmQtY29udHJvbCcsXG4gICAgU1RBUkJPQVJEX1dSQVBQRVI6ICdjNGctc3RhcmJvYXJkLXdyYXBwZXInLFxuICAgIFNUQVJCT0FSRF9USVRMRUJBUjogJ2M0Zy1zdGFyYm9hcmQtdGl0bGViYXInLFxuICAgIFNUQVJCT0FSRF9DT05URU5UX0NPTlRBSU5FUjogJ2M0Zy1zdGFyYm9hcmQtY29udGVudC1jb250YWluZXInLFxuICAgIFNUQVJCT0FSRF9CT1RUT01fVE9PTEJBUjogJ2M0Zy1zdGFyYm9hcmQtYm90dG9tLXRvb2xiYXInLFxuICAgIFNUQVJCT0FSRF9TVEFUVVNCQVI6ICdjNGctc3RhcmJvYXJkLXN0YXR1c2JhcicsXG4gICAgU1RBUkJPQVJEX1ZJRVdUUklHR0VSQkFSOiAnYzRnLXN0YXJib2FyZC12aWV3dHJpZ2dlcmJhcicsXG4gICAgU1RBUkJPQVJEX0hFQURMSU5FOiAnYzRnLXN0YXJib2FyZC1oZWFkbGluZScsXG4gICAgU1RBUkJPQVJEX0JVVFRPTkJBUjogJ2M0Zy1zdGFyYm9hcmQtYnV0dG9uYmFyJyxcbiAgICBTVEFSQk9BUkRfQlVUVE9OOiAnYzRnLXN0YXJib2FyZC1idXR0b24nLFxuICAgIFNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfQkFTRUxBWUVSU1dJVENIRVI6ICdjNGctc3RhcmJvYXJkLXZpZXctdHJpZ2dlci1iYXNlbGF5ZXJzd2l0Y2hlcicsXG4gICAgU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9MQVlFUlNXSVRDSEVSOiAnYzRnLXN0YXJib2FyZC12aWV3LXRyaWdnZXItbGF5ZXJzd2l0Y2hlcicsXG4gICAgU1RBUkJPQVJEX0NMT1NFOiAnYzRnLXN0YXJib2FyZC1jbG9zZScsXG4gICAgU1RBUkJPQVJEX0NPTlRFTlRfQkFTRUxBWUVSU1dJVENIRVI6ICdjNGctY29udGVudC1iYXNlbGF5ZXJzd2l0Y2hlcicsXG4gICAgU1RBUkJPQVJEX0JBU0VMQVlFUlRSRUU6ICdjNGctYmFzZWxheWVydHJlZScsXG4gICAgU1RBUkJPQVJEX0xBWUVSVFJFRTogJ2M0Zy1sYXllcnRyZWUnLFxuICAgIFNUQVJCT0FSRF9DT05URU5UX0xBWUVSU1dJVENIRVI6ICdjNGctY29udGVudC1sYXllcnN3aXRjaGVyJyxcbiAgICBUT09MVElQX1BPUFVQOiAnYzRnLXRvb2x0aXAtcG9wdXAnLFxuICAgIFpPT01fTEVWRUw6ICdjNGctem9vbS1sZXZlbCcsXG5cbiAgICBST1VURVJfSU5QVVRfV1JBUFBFUjogJ2M0Zy1yb3V0ZXItaW5wdXQtd3JhcHBlcicsXG4gICAgUk9VVEVSX1BST0ZJTEVfV1JBUFBFUjogJ2M0Zy1yb3V0ZXItcHJvZmlsZS13cmFwcGVyJyxcbiAgICBST1VURVJfSU5QVVRfRlJPTTogJ2M0Zy1yb3V0ZXItaW5wdXQtZnJvbScsXG4gICAgUk9VVEVSX0lOUFVUX1RPOiAnYzRnLXJvdXRlci1pbnB1dC10bycsXG4gICAgUk9VVEVSX0lOUFVUX0NMRUFSOiAnYzRnLXJvdXRlci1pbnB1dC1jbGVhcicsXG4gICAgUk9VVEVSX0JVVFRPTkJBUjogJ2M0Zy1yb3V0ZXItYnV0dG9uYmFyJyxcbiAgICBST1VURVJfQVRUUklCVVRJT05fV1JBUFBFUjogJ2M0Zy1yb3V0ZXItYXR0cmlidXRpb24td3JhcHBlcicsXG4gICAgUk9VVEVSX0lOU1RSVUNUSU9OU19XUkFQUEVSOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbnMtd3JhcHBlcicsXG4gICAgUk9VVEVSX0lOU1RSVUNUSU9OU19IRUFERVI6ICdjNGctcm91dGVyLWluc3RydWN0aW9ucy1oZWFkZXInLFxuXG4gICAgUk9VVEVSX1NXSVRDSDogJ2M0Zy1yb3V0ZXItc3dpdGNoJyxcbiAgICBST1VURVJfT1ZFUjogJ2M0Zy1yb3V0ZXItb3ZlcicsXG4gICAgUk9VVEVSX1BSSU5UOiAnYzRnLXJvdXRlci1wcmludCcsXG5cbiAgICBST1VURVJfUFJPRklMRV9DQVI6ICdjNGctcm91dGVyLXByb2ZpbGUtY2FyJyxcbiAgICBST1VURVJfUFJPRklMRV9IR1Y6ICdjNGctcm91dGVyLXByb2ZpbGUtaGd2JyxcbiAgICBST1VURVJfUFJPRklMRV9CSUtFOiAnYzRnLXJvdXRlci1wcm9maWxlLWJpa2UnLFxuICAgIFJPVVRFUl9QUk9GSUxFX0ZPT1Q6ICdjNGctcm91dGVyLXByb2ZpbGUtZm9vdCcsXG4gICAgUk9VVEVSX1BST0ZJTEVfV0hFRUxDSEFJUjogJ2M0Zy1yb3V0ZXItcHJvZmlsZS13aGVlbGNoYWlyJyxcblxuXG5cbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX1RBQkxFOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi10YWJsZScsXG4gICAgUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi1pdGVtJyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fT0REOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi1pdGVtLS1vZGQnLFxuICAgIFJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9FVkVOOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi1pdGVtLS1ldmVuJyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi1pdGVtX2RpcmVjdGlvbicsXG4gICAgUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9JQ09OOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi1pdGVtX2RpcmVjdGlvbi1pY29uJyxcbiAgICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX1RFWFQ6ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW1fdGV4dCcsXG4gICAgUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9ESVNUQU5DRTogJ2M0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb24taXRlbV9kaXN0YW5jZScsXG5cbiAgICBPTF9DT05UUk9MOiAnb2wtY29udHJvbCcsXG4gICAgT0xfVU5TRUxFQ1RBQkxFOiAnb2wtdW5zZWxlY3RhYmxlJyxcblxuICAgIE9MX09WRVJMQVlDT05UQUlORVI6ICdvbC1vdmVybGF5Y29udGFpbmVyJyxcbiAgICBPTF9PVkVSTEFZQ09OVEFJTkVSX1NFOiAnb2wtb3ZlcmxheWNvbnRhaW5lci1zdG9wZXZlbnQnLFxuICAgIE9MX1ZJRVdQT1JUOiAnb2wtdmlld3BvcnQnLFxuICAgIE9MX1pPT006ICdvbC16b29tJyxcbiAgICBPTF9aT09NX0lOOiAnb2wtem9vbS1pbicsXG4gICAgT0xfWk9PTV9FWFQ6ICdvbC16b29tLWV4dGVudCcsXG4gICAgT0xfWk9PTV9IT01FOiAnb2wtem9vbS1ob21lJyxcbiAgICBPTF9aT09NX1BPUzogJ29sLXpvb20tcG9zaXRpb24nLFxuICAgIE9MX1pPT01fV0lUSF9FWFQ6ICdvbC16b29tLXdpdGgtZXh0ZW50JyxcbiAgICBPTF9aT09NX1dJVEhfSE9NRTogJ29sLXpvb20td2l0aC1ob21lJyxcbiAgICBPTF9aT09NX1dJVEhfUE9TOiAnb2wtem9vbS13aXRoLXBvc2l0aW9uJyxcbiAgICBPTF9aT09NX1NMSURFUjogJ29sLXpvb20tc2xpZGVyJyxcbiAgICBPTF9aT09NX1dJVEhfU0xJREVSOiAnb2wtem9vbS13aXRoLXNsaWRlcicsXG5cbiAgICBOT05FOiAnJyAvLyBsYXN0IGxpbmVcbiAgfSk7IC8vIGVuZCBvZiBcImNzcyBjb25zdGFudHNcIiAtLS1cblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgY3NzQ29uc3RhbnRzID0gdGhpcy5jNGcubWFwcy5jb25zdGFudC5jc3M7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb25zdGFudC5qcyIsIi8vIFwibmFtZXNwYWNlXCJcblxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0dlcm1hbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb250cm9sIHRvIHRvZ2dsZSBhIGdyaWQgb24gdGhlIG1hcC5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzICB7b2wuY29udHJvbC5Db250cm9sfVxuICAgKlxuICAgKiBAcGFyYW0gICAge09iamVjdH0gICAgICAgICAgICAgIG9wdF9vcHRpb25zICAqb3B0aW9uYWwqIGNvbnRyb2wgb3B0aW9ucy5cbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuR3JpZCA9IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBvcHRpb25zID0gb3B0X29wdGlvbnMgfHwge307XG5cbiAgICB2YXIgZWxlbWVudCxcbiAgICAgICAgYnV0dG9uO1xuXG4gICAgdmFyIG9iakdyaWQgPSBuZXcgb2wuR3JhdGljdWxlKHtcbiAgICAgICAgLypcbiAgICAgICAgc3Ryb2tlU3R5bGU6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgICAgICBsaW5lRGFzaDogWzAuNSwgNF1cbiAgICAgICAgfSksKi9cbiAgICAgICAgc2hvd0xhYmVsczogdHJ1ZVxuICAgIH0pO1xuXG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLkdSQVRJQ1VMRSxcbiAgICAgIHN3aXRjaGFibGU6IHRydWUsXG4gICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX0dSSUQsXG4gICAgICBsYWJlbDogJyMnLFxuICAgICAgZGlzYWJsZUxhYmVsOiAnW10nXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICAvLyBAVE9ETyBtb3ZlIGZ1bmN0aW9ucyB0byBwcm90b3R5cGU/XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiB0byBlbmFibGUgdGhlIGdyaWRcbiAgICB2YXIgZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgb2JqR3JpZC5zZXRNYXAoc2VsZi5nZXRNYXAoKSk7XG4gICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5FTkFCTEVEKTtcbiAgICAgIC8vIGlmIChvcHRpb25zLmNhY2hpbmcpIHtcbiAgICAgIC8vICAgICBjNGcubWFwcy51dGlscy5zdG9yZVZhbHVlKCdncmlkJywgJzEnKTtcbiAgICAgIC8vIH1cbiAgICB9O1xuXG4gICAgLy8gZnVuY3Rpb24gdG8gZGlzYWJsZSB0aGUgZ3JpZFxuICAgIHZhciBkaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgb2JqR3JpZC5zZXRNYXAobnVsbCk7XG4gICAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5FTkFCTEVEKTtcbiAgICAgIC8vIGlmIChvcHRpb25zLmNhY2hpbmcpIHtcbiAgICAgIC8vICAgICBjNGcubWFwcy51dGlscy5zdG9yZVZhbHVlKCdncmlkJywgJzAnKTtcbiAgICAgIC8vIH1cbiAgICB9O1xuXG4gICAgLy8gZnVuY3Rpb24gdG8gdG9nZ2xlIHRoZSBncmlkXG4gICAgdmFyIHRvZ2dsZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAvLyBsb29zZSBmb2N1cywgb3RoZXJ3aXNlIGl0IGxvb2tzIG1lc3N5XG4gICAgICB0aGlzLmJsdXIoKTtcbiAgICAgIGlmIChvYmpHcmlkLmdldE1hcCgpKSB7XG4gICAgICAgIGRpc2FibGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuYWJsZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyB3cmFwcGVyIGRpdlxuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRSArICcgJyArIGNzc0NvbnN0YW50cy5PTF9DT05UUk9MO1xuXG4gICAgaWYgKG9wdGlvbnMuc3dpdGNoYWJsZSkge1xuICAgICAgLy8gYnV0dG9uXG4gICAgICBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGJ1dHRvbi50aXRsZSA9IG9wdGlvbnMudGlwTGFiZWw7XG4gICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGJ1dHRvbik7XG5cbiAgICAgIC8vIHNldCBvbkNsaWNrIHRvIHRoZSB0b2dnbGUtZnVuY3Rpb25cbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZSwgZmFsc2UpO1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0b2dnbGUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyBpbmhlcml0YW5jZS1zdHVmZlxuICAgIG9sLmNvbnRyb2wuQ29udHJvbC5jYWxsKHRoaXMsIHtcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICB0YXJnZXQ6IG9wdGlvbnMudGFyZ2V0XG4gICAgfSk7XG5cbiAgICAvLyBpZiAob3B0aW9ucy5jYWNoaW5nICYmIChjNGcubWFwcy51dGlscy5nZXRWYWx1ZSgnZ3JpZCcpID09ICcxJykpIHtcbiAgICAvLyAgICAgb2JqR3JpZC5zZXRNYXAoc2VsZi5nZXRNYXAoKSk7XG4gICAgLy8gICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkVOQUJMRUQpO1xuICAgIC8vIH1cblxuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLkdyaWQsIG9sLmNvbnRyb2wuQ29udHJvbCk7XG5cblxuICAvKlxuICAgKiBBZGQgbWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5HcmlkLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuR3JpZC5wcm90b3R5cGUsIHtcblxuICAgIC8vIG5vdGhpbmcgdG8gYWRkIGhlcmVcblxuICB9KTsgLy8gZW5kIG9mIFwiYWRkIG1ldGhvZHNcIiAtLS1cblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgR3JpZCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5HcmlkO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1ncmlkLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzR2VybWFufSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnRyb2wgdG8gdG9nZ2xlIHRoZSBpbnRpYWwgbWFwIHBvc2l0aW9uIG9uIHRoZSBtYXAuXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyAge29sLmNvbnRyb2wuQ29udHJvbH1cbiAgICpcbiAgICogQHBhcmFtICAgIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRfb3B0aW9ucyAgKm9wdGlvbmFsKiBjb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLkhvbWUgPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIGVsZW1lbnQsXG4gICAgICAgIGJ1dHRvbjtcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5PTF9aT09NX0hPTUUsXG4gICAgICBzd2l0Y2hhYmxlOiB0cnVlLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZFxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgaWYgKCFvcHRpb25zLm1hcENvbnRyb2xsZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmlldyA9IG9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpO1xuICAgIHZhciBtYXBEYXRhID0gb3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGE7XG5cbiAgICB2YXIgdG9nZ2xlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIC8vIGxvb3NlIGZvY3VzLCBvdGhlcndpc2UgaXQgbG9va3MgbWVzc3lcbiAgICAgIHRoaXMuYmx1cigpO1xuXG4gICAgICB2aWV3LnNldENlbnRlcihvbC5wcm9qLnRyYW5zZm9ybShbcGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlci5sb24pLCBwYXJzZUZsb2F0KG1hcERhdGEuY2VudGVyLmxhdCldLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpKTtcbiAgICAgIHZpZXcuc2V0Wm9vbShwYXJzZUludChtYXBEYXRhLmNlbnRlci56b29tLCAxMCkpO1xuICAgICAgdmlldy5zZXRSb3RhdGlvbihwYXJzZUZsb2F0KG1hcERhdGEuY2VudGVyLnJvdGF0aW9uKSk7XG5cbiAgICAgIC8vIGNoZWNrIHVzZXJwb3NpdGlvblxuICAgICAgdmFyIGdlb0xvY2F0aW9uO1xuICAgICAgaWYgKG1hcERhdGEuZ2VvbG9jYXRpb24pIHtcbiAgICAgICAgZ2VvTG9jYXRpb24gPSBuZXcgb2wuR2VvbG9jYXRpb24oe1xuICAgICAgICAgIHRyYWNraW5nOiB0cnVlLFxuICAgICAgICAgIHByb2plY3Rpb246IHZpZXcuZ2V0UHJvamVjdGlvbigpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGdlb0xvY2F0aW9uLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgdmlldy5zZXRDZW50ZXIoZ2VvTG9jYXRpb24uZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgICAgaWYgKG1hcERhdGEuZ2VvbG9jYXRpb25fem9vbSkge1xuICAgICAgICAgICAgdmlldy5zZXRab29tKHBhcnNlSW50KG1hcERhdGEuZ2VvbG9jYXRpb25fem9vbSwgMTApKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZ2VvTG9jYXRpb24uc2V0VHJhY2tpbmcoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5zZXRWaWV3KHZpZXcpO1xuICAgICAgdXRpbHMucmVkcmF3TWFwVmlldyhvcHRpb25zLm1hcENvbnRyb2xsZXIpO1xuICAgIH07XG5cbiAgICAvLyB3cmFwcGVyIGRpdlxuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRSArICcgYnV0dG9uJztcblxuICAgIGlmIChvcHRpb25zLnN3aXRjaGFibGUpIHtcbiAgICAgIC8vIGJ1dHRvblxuICAgICAgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b24udGl0bGUgPSBvcHRpb25zLnRpcExhYmVsO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChidXR0b24pO1xuXG4gICAgICAvLyBzZXQgb25DbGljayB0byB0aGUgdG9nZ2xlLWZ1bmN0aW9uXG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGUsIGZhbHNlKTtcbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdG9nZ2xlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gaW5oZXJpdGFuY2Utc3R1ZmZcbiAgICBvbC5jb250cm9sLkNvbnRyb2wuY2FsbCh0aGlzLCB7XG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgdGFyZ2V0OiBvcHRpb25zLnRhcmdldFxuICAgIH0pO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLkhvbWUsIG9sLmNvbnRyb2wuQ29udHJvbCk7XG5cblxuICAvKlxuICAgKiBBZGQgbWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5Ib21lLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuSG9tZS5wcm90b3R5cGUsIHtcblxuICAgIC8vIG5vdGhpbmcgdG8gYWRkIGhlcmVcblxuICB9KTsgLy8gZW5kIG9mIFwiYWRkIG1ldGhvZHNcIiAtLS1cblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgSG9tZSA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5Ib21lO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1ob21lLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzR2VybWFufSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5cbmxldCBsYW5nQ29uc3RhbnRzID0ge307XG5cbmlmICh0eXBlb2YgbWFwRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBpZiAobWFwRGF0YS5sYW5nID09PSBcImRlXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfSBlbHNlIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzRW5nbGlzaDtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9XG59XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogRGlzcGxheXMgYSBvdmVydmlld21hcCBvbiB0aGUgbWFwLlxuICAgKiAgIFRoaXMgY2xhc3Mgd3JhcHMgdGhlIG92bSBhIGJpdCBkaWZmZXJlbnRseSB0aGFuXG4gICAqICAgdGhlIHN0YW5kYXJkIG9sLW92ZXJ2aWVtYXAsIHRvIGFsbG93IHByb3BlciBjc3MtdHJhbnNpdGlvbnMuXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyAge29sLmNvbnRyb2wuQ29udHJvbH1cbiAgICpcbiAgICogQHBhcmFtICAgIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRfb3B0aW9ucyAgKm9wdGlvbmFsKiBjb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLk92ZXJ2aWV3TWFwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgIHZhciBlbGVtZW50LFxuICAgICAgICB0cmlnZ2VyLFxuICAgICAgICB0cmlnZ2VySWNvbixcbiAgICAgICAgb3ZtO1xuXG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfT1ZFUlZJRVdNQVAsXG4gICAgICBsYXllcnM6IFtuZXcgb2wubGF5ZXIuVGlsZSh7c291cmNlOiBuZXcgb2wuc291cmNlLk9TTSgpfSldXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuT0xfQ09OVFJPTCArICcgJyArIGNzc0NvbnN0YW50cy5PVkVSVklFV01BUCArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgaWYgKG9wdGlvbnMuY29sbGFwc2VkKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAnICcgKyBjc3NDb25zdGFudHMuQ0xPU0U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9ICcgJyArIGNzc0NvbnN0YW50cy5PUEVOO1xuICAgIH1cbiAgICBvcHRpb25zLnRhcmdldC5hcHBlbmRDaGlsZChlbGVtZW50KTtcblxuICAgIHRyaWdnZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICB0cmlnZ2VyLnRpdGxlID0gb3B0aW9ucy50aXBMYWJlbDtcbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKHRyaWdnZXIpO1xuXG4gICAgdHJpZ2dlckljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgdHJpZ2dlckljb24uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT047XG4gICAgdHJpZ2dlci5hcHBlbmRDaGlsZCh0cmlnZ2VySWNvbik7XG5cbiAgICAkKHRyaWdnZXIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgkKGVsZW1lbnQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChlbGVtZW50KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICB9IGNhdGNoIChpZ25vcmUpIHtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG92bSA9IG5ldyBvbC5jb250cm9sLk92ZXJ2aWV3TWFwKHtcbiAgICAgIGNvbGxhcHNpYmxlOiBmYWxzZSxcbiAgICAgIGNvbGxhcHNlZDogZmFsc2UsXG4gICAgICB0YXJnZXQ6IGVsZW1lbnQsXG4gICAgICBsYXllcnM6IG9wdGlvbnMubGF5ZXJzXG4gICAgfSk7XG5cbiAgICByZXR1cm4gb3ZtO1xuICB9O1xuXG5cbiAgLypcbiAgICogQWRkIG1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuT3ZlcnZpZXdNYXAucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5PdmVydmlld01hcC5wcm90b3R5cGUsIHtcblxuICAgIC8vIG5vdGhpbmcgdG8gYWRkIGhlcmVcblxuICB9KTsgLy8gZW5kIG9mIFwiYWRkIG1ldGhvZHNcIiAtLS1cblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgT3ZlcnZpZXdNYXAgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuT3ZlcnZpZXdNYXA7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLW92ZXJ2aWV3bWFwLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzR2VybWFufSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNFbmdsaXNofSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWVuXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnRyb2wgdG8gZ2VuZXJhdGUgYSBwZXJtYWxpbmsgdG8gdGhlIGN1cnJlbnQgTWFwIHN0YXRlLlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgIHtvbC5jb250cm9sLkNvbnRyb2x9XG4gICAqXG4gICAqIEBwYXJhbSAgICB7T2JqZWN0fSAgICAgICAgICAgICAgb3B0aW9ucyAgY29udHJvbCBvcHRpb25zLlxuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5QZXJtYWxpbmsgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgdmFyIHNlbGYsXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgY29weUJ1dHRvbixcbiAgICAgICAgcmVmcmVzaEJ1dHRvbjtcblxuICAgIHRoaXMuY29uZmlnID0gb3B0aW9ucyB8fCB7fTtcbiAgICBzZWxmID0gdGhpcztcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIHRoaXMuY29uZmlnID0gJC5leHRlbmQoe1xuICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuUEVSTUFMSU5LLFxuICAgICAgLy8gbWFwQ29udHJvbGxlcjogdW5kZWZpbmVkLFxuICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9QRVJNQUxJTkssXG4gICAgICBnZXRQYXJhbWV0ZXI6IGZhbHNlLFxuICAgICAgbGFiZWw6ICdQJyxcbiAgICAgIHRhcmdldDogdW5kZWZpbmVkXG4gICAgfSwgdGhpcy5jb25maWcpO1xuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5tYXBDb250cm9sbGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gd3JhcHBlciBkaXZcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gdGhpcy5jb25maWcuY2xhc3NOYW1lICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRSArICcgJyArIGNzc0NvbnN0YW50cy5PTF9DT05UUk9MO1xuXG4gICAgLy8gYnV0dG9uXG4gICAgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgYnV0dG9uLnRpdGxlID0gdGhpcy5jb25maWcudGlwTGFiZWw7XG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGJ1dHRvbik7XG5cbiAgICAvLyBzZXQgb25DbGljayB0byB0aGUgdG9nZ2xlLWZ1bmN0aW9uXG4gICAgLy8gYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy50b2dnbGUsIGZhbHNlKTtcbiAgICAvLyBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMudG9nZ2xlLCBmYWxzZSk7XG4gICAgJChidXR0b24pLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgfSBjYXRjaCAoaWdub3JlKSB7XG5cbiAgICAgIH1cbiAgICAgIHNlbGYudG9nZ2xlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBwb3B1cFxuICAgIC8vIHdpbGwgYmUgYXR0YWNoZWQgd2hlbiBvcGVuZWQgdGhlIGZpcnN0IHRpbWVcbiAgICAvLyB0byBtYWtlIHN1cmUgaXRzIHJlYWxseSB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSBjb250YWluZXJcbiAgICB0aGlzLnBvcHVwQXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLnBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5wb3B1cC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTCArICcgJyArIGNzc0NvbnN0YW50cy5QRVJNQUxJTktfUE9QVVAgKyAnICcgKyBjc3NDb25zdGFudHMuQ0xPU0U7XG5cbiAgICAvLyB0ZXh0ZmllbGRcbiAgICB0aGlzLnRleHRmaWVsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgdGhpcy50ZXh0ZmllbGQudHlwZSA9ICd0ZXh0JztcbiAgICB0aGlzLnBvcHVwLmFwcGVuZENoaWxkKHRoaXMudGV4dGZpZWxkKTtcblxuICAgIC8vIGNvcHkgYnV0dG9uXG4gICAgY29weUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGNvcHlCdXR0b24uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPUFkgKyAnICcgKyBjc3NDb25zdGFudHMuSUNPTjtcbiAgICBjb3B5QnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5DT1BZX1RPX0NMSVBCT0FSRDtcbiAgICBjb3B5QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1jbGlwYm9hcmQtdGFyZ2V0JywgJy4nICsgY3NzQ29uc3RhbnRzLlBFUk1BTElOS19QT1BVUCArICcgPiBpbnB1dFt0eXBlPVwidGV4dFwiXScpO1xuICAgIHRoaXMucG9wdXAuYXBwZW5kQ2hpbGQoY29weUJ1dHRvbik7XG4gICAgbmV3IENsaXBib2FyZChjb3B5QnV0dG9uKTtcblxuICAgIC8vIHJlZnJlc2ggYnV0dG9uXG4gICAgcmVmcmVzaEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIHJlZnJlc2hCdXR0b24uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJFRlJFU0ggKyAnICcgKyBjc3NDb25zdGFudHMuSUNPTjtcbiAgICByZWZyZXNoQnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5SRUZSRVNIO1xuICAgICQocmVmcmVzaEJ1dHRvbikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5nZW5lcmF0ZUxpbmtGcm9tQ3VycmVudFN0YXRlKHt0YXJnZXQ6IHNlbGYudGV4dGZpZWxkfSk7XG4gICAgfSk7XG4gICAgdGhpcy5wb3B1cC5hcHBlbmRDaGlsZChyZWZyZXNoQnV0dG9uKTtcblxuICAgIC8vIGluaGVyaXRhbmNlLXN0dWZmXG4gICAgb2wuY29udHJvbC5Db250cm9sLmNhbGwodGhpcywge1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgdGFyZ2V0OiB0aGlzLmNvbmZpZy50YXJnZXRcbiAgICB9KTtcbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5QZXJtYWxpbmssIG9sLmNvbnRyb2wuQ29udHJvbCk7XG5cblxuICAvKlxuICAgKiBBZGQgbWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5QZXJtYWxpbmsucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5QZXJtYWxpbmsucHJvdG90eXBlLCB7XG5cbiAgICBvcGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMucG9wdXBBdHRhY2hlZCkge1xuICAgICAgICAkKHRoaXMucG9wdXApLnNsaWRlRG93bigxKTtcbiAgICAgICAgdGhpcy5jb25maWcudGFyZ2V0LmFwcGVuZENoaWxkKHRoaXMucG9wdXApO1xuICAgICAgICB0aGlzLnBvcHVwQXR0YWNoZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgJCh0aGlzLnBvcHVwKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICQodGhpcy5lbGVtZW50KS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICB0aGlzLmdlbmVyYXRlTGlua0Zyb21DdXJyZW50U3RhdGUoe3RhcmdldDogdGhpcy50ZXh0ZmllbGR9KTtcbiAgICB9LFxuXG4gICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQodGhpcy5wb3B1cCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSk7XG4gICAgICAkKHRoaXMuZWxlbWVudCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pO1xuICAgIH0sXG5cbiAgICB0b2dnbGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgkKHRoaXMucG9wdXApLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGdlbmVyYXRlTGlua0Zyb21DdXJyZW50U3RhdGU6IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuICAgICAgdmFyIG9wdGlvbnMsXG4gICAgICAgICAgcHJveHksXG4gICAgICAgICAgbWFwVmlldyxcbiAgICAgICAgICBwYXJhbWV0ZXJzLFxuICAgICAgICAgIGxpbmssXG4gICAgICAgICAgY2VudGVyLFxuICAgICAgICAgIGJhc2VMYXllcklkeCxcbiAgICAgICAgICBsYXllcklkeCxcbiAgICAgICAgICBsYXllcnM7XG5cbiAgICAgIG9wdGlvbnMgPSBvcHRfb3B0aW9ucyB8fCB7fTtcbiAgICAgIGlmICghb3B0aW9ucy5wYXJhbUNvdW50IHx8ICEob3B0aW9ucy5wYXJhbUNvdW50ID09PSA2IHx8IG9wdGlvbnMucGFyYW1Db3VudCA9PT0gMiB8fCBvcHRpb25zLnBhcmFtQ291bnQgPT09IDEpKSB7XG4gICAgICAgIG9wdGlvbnMucGFyYW1Db3VudCA9IDY7XG4gICAgICB9XG5cbiAgICAgIHBhcmFtZXRlcnMgPSBbXTtcbiAgICAgIG1hcFZpZXcgPSB0aGlzLmNvbmZpZy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCk7XG4gICAgICBwcm94eSA9IHRoaXMuY29uZmlnLm1hcENvbnRyb2xsZXIucHJveHk7XG5cbiAgICAgIGNlbnRlciA9IG1hcFZpZXcuZ2V0Q2VudGVyKCk7XG4gICAgICBjZW50ZXIgPSBvbC5wcm9qLnRyYW5zZm9ybShbY2VudGVyWzBdLCBjZW50ZXJbMV1dLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpO1xuXG4gICAgICBwYXJhbWV0ZXJzLnB1c2goK2NlbnRlclswXS50b0ZpeGVkKDUpKTtcbiAgICAgIHBhcmFtZXRlcnMucHVzaCgrY2VudGVyWzFdLnRvRml4ZWQoNSkpO1xuICAgICAgcGFyYW1ldGVycy5wdXNoKG1hcFZpZXcuZ2V0Wm9vbSgpKTtcbiAgICAgIHBhcmFtZXRlcnMucHVzaCgrbWFwVmlldy5nZXRSb3RhdGlvbigpLnRvRml4ZWQoMikpO1xuXG4gICAgICAvLyBmaW5kIGFjdGl2ZSBiYXNlbGF5ZXJcbiAgICAgIGlmIChwcm94eS5hY3RpdmVCYXNlbGF5ZXJJZCkge1xuICAgICAgICBwYXJhbWV0ZXJzLnB1c2gocHJveHkuYWN0aXZlQmFzZWxheWVySWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1ldGVycy5wdXNoKDApO1xuICAgICAgfVxuXG4gICAgICAvLyBmaW5kIGFjdGl2ZSBsYXllcnNcbiAgICAgIGxheWVycyA9IFtdO1xuICAgICAgZm9yIChsYXllcklkeCBpbiBwcm94eS5hY3RpdmVMYXllcklkcykge1xuICAgICAgICBpZiAocHJveHkuYWN0aXZlTGF5ZXJJZHMuaGFzT3duUHJvcGVydHkobGF5ZXJJZHgpKSB7XG4gICAgICAgICAgbGF5ZXJzLnB1c2gocGFyc2VJbnQobGF5ZXJJZHgsIDEwKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGRlbHRhLWRlY29kZSBpZiB0aGVyZSBhcmUgbW9yZSB0aGFuIG9uZSBsYXllclxuICAgICAgaWYgKGxheWVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGxheWVycyA9IHV0aWxzLmRlbHRhRW5jb2RlKGxheWVycyk7XG4gICAgICAgIGxheWVycyA9IGxheWVycy5qb2luKCc6Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsYXllcnMgPSBsYXllcnNbMF0gfHwgJzAnO1xuICAgICAgfVxuICAgICAgcGFyYW1ldGVycy5wdXNoKGxheWVycyk7XG4gICAgICBwYXJhbWV0ZXJzID0gcGFyYW1ldGVycy5qb2luKCcvJyk7XG5cbiAgICAgIC8vIGJ1aWxkIGxpbmtcbiAgICAgIGxpbmsgPSB1dGlscy5zZXRVcmxQYXJhbShwYXJhbWV0ZXJzLCB0aGlzLmNvbmZpZy5nZXRQYXJhbWV0ZXIpO1xuXG4gICAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgb3B0aW9ucy50YXJnZXQudmFsdWUgPSBsaW5rO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxpbms7XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIGdlbmVyYXRlTGlua0Zyb21DdXJyZW50U3RhdGVcblxuICAgIGdlbmVyYXRlTGluazogZnVuY3Rpb24gKHBhcmFtZXRlcnMpIHtcbiAgICAgIGlmICghcGFyYW1ldGVycyB8fCAhKHBhcmFtZXRlcnMubGVuZ3RoID09PSA2IHx8IHBhcmFtZXRlcnMubGVuZ3RoID09PSAyIHx8IHBhcmFtZXRlcnMubGVuZ3RoID09PSAxKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIGJ1aWxkIGFuZCByZXR1cm4gbGlua1xuICAgICAgcmV0dXJuIHV0aWxzLnNldFVybFBhcmFtKHBhcmFtZXRlcnMuam9pbignLycpLCB0aGlzLmNvbmZpZy5nZXRQYXJhbWV0ZXIpO1xuICAgIH0gLy8gZW5kIG9mIGdlbmVyYXRlTGlua1xuXG4gIH0pOyAvLyBlbmQgb2YgXCJhZGQgbWV0aG9kc1wiIC0tLVxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBQZXJtYWxpbmsgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuUGVybWFsaW5rO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wZXJtYWxpbmsuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcblxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG5pbXBvcnQge1NpZGVib2FyZH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1zaWRlYm9hcmRcIjtcbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBleHRlbmRzIHtjNGcubWFwcy5jb250cm9sLlNpZGVib2FyZH1cbiAgICpcbiAgICogQHBhcmFtICB7W3R5cGVdfSAgbWFwQ29udHJvbGxlciAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIHtbdHlwZV19ICBjb25maWcgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLkFjY291bnQgPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIC8vIGV4dGVuZCBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuQUNDT1VOVCxcbiAgICAgIG5hbWU6ICdhY2NvdW50JyxcbiAgICAgIGhlYWRsaW5lOiBsYW5nQ29uc3RhbnRzLkFDQ09VTlQsXG4gICAgICBjcmVhdGU6IHRydWUsXG4gICAgICBtYXBDb250cm9sbGVyOiB1bmRlZmluZWQsXG4gICAgICBkaXJlY3Rpb246ICdsZWZ0J1xuICAgIH0sIG9wdF9vcHRpb25zKTtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLm1haW5TZWN0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAvLyBjYWxsIHBhcmVudCBjb25zdHJ1Y3RvclxuICAgIFNpZGVib2FyZC5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucyk7XG4gIH07XG4gIG9sLmluaGVyaXRzKGM0Zy5tYXBzLmNvbnRyb2wuQWNjb3VudCwgU2lkZWJvYXJkKTtcblxuICAvKipcbiAgICogTWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5BY2NvdW50LnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuQWNjb3VudC5wcm90b3R5cGUsIHtcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVkIHdoZW4gdGhlIHBhbmVsIHdpbGwgYmUgb3BlbmVkIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICAgKiBbaW5pdCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgUmV0dXJucyB8dHJ1ZXwgb24gc3VjY2Vzc1xuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgdGhpcy5zcGlubmVyLnNob3coKTtcblxuICAgICAgdGhpcy52aWV3QWNjb3VudCA9IHRoaXMuYWRkQWNjb3VudFZpZXcoKTtcbiAgICAgIHRoaXMudmlld0FjY291bnQuYWN0aXZhdGUoKTtcblxuICAgICAgdmFyIHByb3h5ID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHk7XG4gICAgICB2YXIgbWFwID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwO1xuXG4gICAgICB0aGlzLm1haW5TZWN0aW9uQWNjb3VudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgIHRoaXMubWFpblNlY3Rpb25BY2NvdW50LmlubmVySFRNTCA9IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYWNjb3VudDtcbiAgICAgIHRoaXMubWFpblNlY3Rpb24uYXBwZW5kQ2hpbGQodGhpcy5tYWluU2VjdGlvbkFjY291bnQpO1xuICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLnNldEVsZW1lbnQodGhpcy5tYWluU2VjdGlvbik7XG5cbiAgICAgIHRoaXMuc3Bpbm5lci5oaWRlKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LCAvLyBlbmQgb2YgXCJpbml0KClcIlxuXG5cbiAgICBhZGRBY2NvdW50VmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFjY291bnRWaWV3O1xuXG4gICAgICAgIGFjY291bnRWaWV3ID0gdGhpcy5hZGRWaWV3KHtcbiAgICAgICAgbmFtZTogJ2FjY291bnQnLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQUNDT1VOVF9WSUVXX1RSSUdHRVIsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuQUNDT1VOVF9WSUVXX1RSSUdHRVIsXG4gICAgICAgICAgd2l0aEhlYWRsaW5lOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBzZWN0aW9uRWxlbWVudHM6IFtcbiAgICAgICAgICB7c2VjdGlvbjogdGhpcy5jb250ZW50Q29udGFpbmVyLCBlbGVtZW50OiB0aGlzLm1haW5TZWN0aW9ufSxcbiAgICAgICAgICB7c2VjdGlvbjogdGhpcy50b3BUb29sYmFyLCBlbGVtZW50OiB0aGlzLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICBdXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGFjY291bnRWaWV3O1xuICAgIH0sIC8vIGVuZCBvZiBcImFkZEFjY291bnRWaWV3KClcIlxuXG4gICAgYWRkQWNjb3VudDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIFRSSUdHRVJfQUNDT1VOVCxcbiAgICAgICAgICB2aWV3QWNjb3VudCxcbiAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgaW50ZXJhY3Rpb24sXG4gICAgICAgICAgZmVhdHVyZXM7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvL1RSSUdHRVJfQUNDT1VOVCA9ICdBQ0NPVU5UX1ZJRVdfVFJJR0dFUl8nICsgb3B0aW9ucy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIHZpZXdBY2NvdW50ID0gc2VsZi5hZGRBY2NvdW50KHtcbiAgICAgICAgbmFtZTogJ0FjY291bnQnLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6ICdBY2NvdW50JywvL2xhbmdDb25zdGFudHNbVFJJR0dFUl9EUkFXXSxcbiAgICAgICAgICBjbGFzc05hbWU6ICdjNGdfYWNjb3VudF90cmlnZ2VyJywvL2Nzc0NvbnN0YW50c1tUUklHR0VSX0RSQVddXG4gICAgICAgICAgd2l0aEhlYWRsaW5lOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBzZWN0aW9uRWxlbWVudHM6IFtcbiAgICAgICAgICB7c2VjdGlvbjogc2VsZi50b3BUb29sYmFyLCBlbGVtZW50OiBzZWxmLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICBdLFxuICAgICAgICBpbml0RnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgIC8vIFNob3cgbG9hZGluZyBhbmltYXRpb25cbiAgICAgICAgICBzZWxmLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgICAgLy8gcHJpbnRGdW5jdGlvbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIC8vICAgdmFyIGluZm9CdXR0b24sXG4gICAgICAgICAgLy8gICAgICAgZmVhdHVyZUdlb21ldHJ5LFxuICAgICAgICAgIC8vICAgICAgIHRyYW5zbGF0ZUludGVyYWN0aW9uLFxuICAgICAgICAgIC8vICAgICAgIG1vZGlmeUludGVyYWN0aW9uLFxuICAgICAgICAgIC8vICAgICAgIG1vZGlmeUJ1dHRvbixcbiAgICAgICAgICAvLyAgICAgICBhcHBseUJ1dHRvbjtcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gICAgIGluZm9CdXR0b24gPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyAgIC8vIGFkZCBhcHBseSBidXR0b25cbiAgICAgICAgICAvLyAgIGFwcGx5QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgLy8gICBhcHBseUJ1dHRvbi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuSUNPTiArICcgJyArIGNzc0NvbnN0YW50cy5FRElUT1JfRkVBVFVSRV9BUFBMWTtcbiAgICAgICAgICAvLyAgIGFwcGx5QnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5FRElUT1JfRkVBVFVSRV9BUFBMWTtcbiAgICAgICAgICAvLyAgIGFwcGx5QnV0dG9uLnNldEF0dHJpYnV0ZSgnZmVhdF9pZCcsIGkpO1xuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gfTsgLy8gZW5kIG9mIFwibW9kaWZ5RmVhdHVyZUZ1bmN0aW9uKClcIlxuXG4gICAgICAgICAgZmVhdHVyZXMgPSBuZXcgb2wuQ29sbGVjdGlvbigpO1xuXG4gICAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB9LFxuICAgICAgICBkZWFjdGl2YXRlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB2aWV3QWNjb3VudDtcbiAgICB9IC8vIGVuZCBvZiBcImFkZEFjY291bnQoKVwiXG5cbiAgfSk7XG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgbGV0IEFjY291bnQgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuQWNjb3VudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtcG9ydHNpZGUtYWNjb3VudC5qcyIsIi8vIFwibmFtZXNwYWNlXCJcblxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0dlcm1hbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcbmltcG9ydCB7U2lkZWJvYXJkfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXNpZGVib2FyZFwiO1xuaW1wb3J0IHtUb29sdGlwUG9wVXB9IGZyb20gXCIuL2M0Zy1tYXBzLW1pc2MtdG9vbHRpcHBvcHVwXCI7XG5cbmxldCBsYW5nQ29uc3RhbnRzID0ge307XG5cbmlmICh0eXBlb2YgbWFwRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBpZiAobWFwRGF0YS5sYW5nID09PSBcImRlXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfSBlbHNlIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzRW5nbGlzaDtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9XG59XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmQge2M0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkfVxuICAgKlxuICAgKiBAcGFyYW0gIHtbdHlwZV19ICBtYXBDb250cm9sbGVyICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLkVkaXRvciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICAvLyBleHRlbmQgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIG5hbWU6ICdlZGl0b3InLFxuICAgICAgdHlwZTogJ2Zyb250ZW5kJyxcbiAgICAgIGRhdGFGaWVsZDogZmFsc2UsXG4gICAgICBjcmVhdGU6IHRydWUsXG4gICAgICBtYXBDb250cm9sbGVyOiB1bmRlZmluZWQsXG4gICAgICBkcmF3TW9kZXM6IFtcbiAgICAgICAgJ1BvaW50JyxcbiAgICAgICAgJ0xpbmUnLFxuICAgICAgICAnUG9seWdvbicsXG4gICAgICAgICdDaXJjbGUnLFxuICAgICAgICAnRnJlZWhhbmQnXG4gICAgICBdLFxuICAgICAgZGlyZWN0aW9uOiAnbGVmdCcsXG4gICAgICBoZWFkbGluZTogbGFuZ0NvbnN0YW50cy5FRElUT1JcbiAgICAgIC8vIGluaXRNb2RlOiAnc2VsZWN0J1xuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcikge1xuICAgICAgY29uc29sZS53YXJuKCdDb3VsIG5vdCBpbml0aWFsbGl6ZSBFZGl0b3IsIHdpdGhvdXQgdmFsaWQgbWFwQ29udHJvbGxlci4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvL3dpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX2xvYWRUYWJzID0gW107XG4gICAgLy93aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9mZWF0dXJlQ2hhbmdlZCA9IFtdO1xuICAgIHRoaXMudGFicyA9IFtdO1xuICAgIC8vIEBUT0RPXG4gICAgLy8gdGhpcy50eXBlTGF5ZXIgPSB1bmRlZmluZWQ7XG4gICAgLy8gdGhpcy5hY3RpdmVNb2RlID0gdGhpcy5vcHRpb25zLmluaXRNb2RlO1xuICAgIC8vIHRoaXMudmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3IoKTtcbiAgICAvLyB0aGlzLmFjdGl2ZURyYXdJbnRlcmFjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxhc3REcmF3SW50ZXJhY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wcm94eSA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5O1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhRmllbGQgJiYgdHlwZW9mIHRoaXMub3B0aW9ucy5kYXRhRmllbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuZGF0YUZpZWxkID0gJCh0aGlzLm9wdGlvbnMuZGF0YUZpZWxkKSB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBjYWxsIHBhcmVudCBjb25zdHJ1Y3RvclxuICAgIFNpZGVib2FyZC5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucyk7XG4gIH07XG4gIG9sLmluaGVyaXRzKGM0Zy5tYXBzLmNvbnRyb2wuRWRpdG9yLCBTaWRlYm9hcmQpO1xuXG4gIC8qKlxuICAgKiBNZXRob2RzXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLkVkaXRvci5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLkVkaXRvci5wcm90b3R5cGUsIHtcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVkIHdoZW4gdGhlIGVkaXRvciB3aWxsIGJlIG9wZW5lZCBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gICAgICogW2luaXQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gIFJldHVybnMgfHRydWV8IG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbiAob3B0X2V4dGVybmFsaW5pdCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgbGF5ZXJTdHlsZUZ1bmN0aW9uLFxuICAgICAgICAgIHZpZXdTZWxlY3Q7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5zcGlubmVyLnNob3coKTtcblxuICAgICAgbGF5ZXJTdHlsZUZ1bmN0aW9uID0gZnVuY3Rpb24gKGZlYXR1cmUsIHByb2plY3Rpb24pIHtcbiAgICAgICAgdmFyIHN0eWxlSWQ7XG5cbiAgICAgICAgaWYgKGZlYXR1cmUgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8gZ2V0IHRoZSBzdHlsZUlkIG9mIHRoZSBjdXJyZW50IGZlYXR1cmVcbiAgICAgICAgICBzdHlsZUlkID0gZmVhdHVyZS5nZXQoJ3N0eWxlSWQnKTtcbiAgICAgICAgICAvLyBhbmQgZXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgZnVuY3Rpb25cbiAgICAgICAgICBpZiAoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0pIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS5zdHlsZShmZWF0dXJlLCBwcm9qZWN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgLy8gQWRkIGVkaXRvciBsYXllcnNcbiAgICAgIHRoaXMuZWRpdFBvaW50TGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yKHtzb3VyY2U6IG5ldyBvbC5zb3VyY2UuVmVjdG9yKCksIHN0eWxlOiBsYXllclN0eWxlRnVuY3Rpb259KTtcbiAgICAgIHRoaXMuZWRpdExpbmVMYXllciA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe3NvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3IoKSwgc3R5bGU6IGxheWVyU3R5bGVGdW5jdGlvbn0pO1xuICAgICAgdGhpcy5lZGl0UG9seWdvbkxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpLCBzdHlsZTogbGF5ZXJTdHlsZUZ1bmN0aW9ufSk7XG4gICAgICB0aGlzLmVkaXRDaXJjbGVMYXllciA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe3NvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3IoKSwgc3R5bGU6IGxheWVyU3R5bGVGdW5jdGlvbn0pO1xuICAgICAgdGhpcy5lZGl0RnJlZWhhbmRMYXllciA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe3NvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3IoKSwgc3R5bGU6IGxheWVyU3R5bGVGdW5jdGlvbn0pO1xuXG4gICAgICB0aGlzLmVkaXRMYXllckdyb3VwID0gbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgbGF5ZXJzOiBuZXcgb2wuQ29sbGVjdGlvbihbXG4gICAgICAgICAgdGhpcy5lZGl0RnJlZWhhbmRMYXllcixcbiAgICAgICAgICB0aGlzLmVkaXRDaXJjbGVMYXllcixcbiAgICAgICAgICB0aGlzLmVkaXRQb2x5Z29uTGF5ZXIsXG4gICAgICAgICAgdGhpcy5lZGl0TGluZUxheWVyLFxuICAgICAgICAgIHRoaXMuZWRpdFBvaW50TGF5ZXJcbiAgICAgICAgXSksXG4gICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKHRoaXMuZWRpdExheWVyR3JvdXApO1xuXG4gICAgICAvLyBBZGQgYW5kIGFjdGl2YXRlIHNlbGVjdCB2aWV3XG4gICAgICB0aGlzLnRhYnMucHVzaCh0aGlzLmFkZFNlbGVjdFZpZXcoKSk7XG4gICAgICB0aGlzLnRhYnNbMF0uYWN0aXZhdGUoKTtcblxuICAgICAgLy8gICBBSkFYOiBnZXQgZWRpdG9yIGNvbmZpZ1xuICAgICAgJC5nZXRKU09OKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmVkaXRvciArICcvJyArIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucHJvZmlsZSlcbiAgICAgICAgICAvLyBDcmVhdGUgdmlld3MgZm9yIGRyYXctZmVhdHVyZXMgd2l0aCBhdCBsZWFzdCBvbmUgbG9jYXRpb25zdHlsZVxuICAgICAgICAgIC5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICAgICAgICAgIC8vIERyYXctcG9pbnQgdmlld1xuICAgICAgICAgICAgaWYgKGRhdGEuc3R5bGVzX3BvaW50Lmxlbmd0aCAmJiBkYXRhLnN0eWxlc19wb2ludC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHNlbGYudGFicy5wdXNoKHNlbGYuYWRkRHJhd1ZpZXcoe3R5cGU6ICdQb2ludCcsIHN0eWxlSWRzOiBkYXRhLnN0eWxlc19wb2ludH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERyYXctbGluZSB2aWV3XG4gICAgICAgICAgICBpZiAoZGF0YS5zdHlsZXNfbGluZS5sZW5ndGggJiYgZGF0YS5zdHlsZXNfbGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHNlbGYudGFicy5wdXNoKHNlbGYuYWRkRHJhd1ZpZXcoe3R5cGU6ICdMaW5lU3RyaW5nJywgc3R5bGVJZHM6IGRhdGEuc3R5bGVzX2xpbmV9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEcmF3LXBvbHlnb24gdmlld1xuICAgICAgICAgICAgaWYgKGRhdGEuc3R5bGVzX3BvbHlnb24ubGVuZ3RoICYmIGRhdGEuc3R5bGVzX3BvbHlnb24ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBzZWxmLnRhYnMucHVzaChzZWxmLmFkZERyYXdWaWV3KHt0eXBlOiAnUG9seWdvbicsIHN0eWxlSWRzOiBkYXRhLnN0eWxlc19wb2x5Z29ufSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRHJhdy1jaXJjbGUgdmlld1xuICAgICAgICAgICAgaWYgKGRhdGEuc3R5bGVzX2NpcmNsZS5sZW5ndGggJiYgZGF0YS5zdHlsZXNfY2lyY2xlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzZWxmLnRhYnMucHVzaChzZWxmLmFkZERyYXdWaWV3KHt0eXBlOiAnQ2lyY2xlJywgc3R5bGVJZHM6IGRhdGEuc3R5bGVzX2NpcmNsZX0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERyYXctZnJlZWhhbmQgdmlld1xuICAgICAgICAgICAgaWYgKGRhdGEuc3R5bGVzX2ZyZWVoYW5kLmxlbmd0aCAmJiBkYXRhLnN0eWxlc19mcmVlaGFuZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgc2VsZi50YWJzLnB1c2goc2VsZi5hZGREcmF3Vmlldyh7dHlwZTogJ0ZyZWVoYW5kJywgc3R5bGVJZHM6IGRhdGEuc3R5bGVzX2ZyZWVoYW5kfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2FsbCBob29rIGZ1bmN0aW9uIGZvciBkeW5hbWljYWxseSBhZGRlZCB0YWJzXG4gICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9sb2FkVGFicyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5lZGl0b3JfbG9hZFRhYnMsIHNlbGYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIEBUT0RPIGVycm9yLW1lc3NhZ2VzXG4gICAgICAgICAgICAvLyAgIDEpIFZpc2libGUgbWVzc2FnZSA0IHVzZXJzIChpMThuKVxuICAgICAgICAgICAgLy8gICAyKSBUZWNobmljYWwgY29uc29sZS53YXJuXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0FuIGVycm9yIG9jY3VyZWQgd2hpbGUgdHJ5aW5nIHRvIGxvYWQgdGhlIGVkaXRvciBjb25maWd1cmF0aW9uLi4uJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBsYXllcnM7XG4gICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLnR5cGUgPT09ICdiYWNrZW5kJykge1xuICAgICAgICAgICAgICAvLyBpbXBvcnQgR2VvSlNPTiB3aGVuIGluIGJhY2tlbmQgbW9kZVxuICAgICAgICAgICAgICBzZWxmLmltcG9ydEdlb0pTT04oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGxvYWQgc2Vzc2lvbi1mZWF0dXJlcyB3aGVuIGluIGZyb250ZW5kIG1vZGVcbiAgICAgICAgICAgICAgc2VsZi5sb2FkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBZGQgYXV0b3NhdmUgdG8gdGhlIGxheWVycyB3aGVuIGEgZmVhdHVyZSBpcyBhZGRlZFxuICAgICAgICAgICAgbGF5ZXJzID0gc2VsZi5lZGl0TGF5ZXJHcm91cC5nZXRMYXllcnMoKTtcbiAgICAgICAgICAgIGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5nZXRTb3VyY2UoKS5vbignYWRkZmVhdHVyZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnNhdmUoKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvL3NlbGYuZWRpdFBvaW50TGF5ZXIuZ2V0U291cmNlKCkub24oJ2FkZGZlYXR1cmUnLCBmdW5jdGlvbiAoKSB7c2VsZi5zYXZlKCk7IH0pO1xuICAgICAgICAgICAgLy9zZWxmLmVkaXRMaW5lTGF5ZXIuZ2V0U291cmNlKCkub24oJ2FkZGZlYXR1cmUnLCBmdW5jdGlvbiAoKSB7c2VsZi5zYXZlKCk7IH0pO1xuICAgICAgICAgICAgLy9zZWxmLmVkaXRQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCkub24oJ2FkZGZlYXR1cmUnLCBmdW5jdGlvbiAoKSB7c2VsZi5zYXZlKCk7IH0pO1xuICAgICAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgIGlmIChvcHRfZXh0ZXJuYWxpbml0KSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZWQgYmVmb3JlIGVkaXRvciB3aWxsIGJlIGNsb3NlZFxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBwcmVDbG9zZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5lZGl0TGF5ZXJHcm91cC5nZXRWaXNpYmxlKCkpIHtcbiAgICAgICAgdGhpcy5lZGl0TGF5ZXJHcm91cC5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUxheWVyKHRoaXMuZWRpdExheWVyR3JvdXApO1xuICAgICAgfVxuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVkIGJlZm9yZSBlZGl0b3Igd2lsbCBiZSBvcGVuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHByZU9wZW5GdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLmVkaXRMYXllckdyb3VwLmdldFZpc2libGUoKSkge1xuICAgICAgICB0aGlzLmVkaXRMYXllckdyb3VwLnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcih0aGlzLmVkaXRMYXllckdyb3VwKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWRkU2VsZWN0VmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgc2VsZWN0SW50ZXJhY3Rpb24sXG4gICAgICAgICAgc2VsZWN0Qm94SW50ZXJhY3Rpb24sXG4gICAgICAgICAgc2VsZWN0ZWRGZWF0dXJlcyxcbiAgICAgICAgICBzZWxlY3RDb250ZW50V3JhcHBlcixcbiAgICAgICAgICBzZWxlY3RDb250ZW50SGVhZGxpbmUsXG4gICAgICAgICAgc2VsZWN0Q29udGVudCxcbiAgICAgICAgICBzZWxlY3RDb250ZW50SW5mbyxcbiAgICAgICAgICBzZWxlY3RWaWV3LFxuICAgICAgICAgIGZuSGFuZGxlU2VsZWN0aW9uO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgc2VsZWN0Q29udGVudFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgc2VsZWN0Q29udGVudEhlYWRsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzZWxlY3RDb250ZW50SGVhZGxpbmUuaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5FRElUT1JfVklFV19UUklHR0VSX1NFTEVDVDtcbiAgICAgIHNlbGVjdENvbnRlbnRIZWFkbGluZS5jbGFzc05hbWUgPSAnY29udGVudEhlYWRsaW5lJztcbiAgICAgIHNlbGVjdENvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKHNlbGVjdENvbnRlbnRIZWFkbGluZSk7XG5cbiAgICAgIHNlbGVjdENvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHNlbGVjdENvbnRlbnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkVESVRPUl9DT05URU5UX1NFTEVDVDtcbiAgICAgIHNlbGVjdENvbnRlbnRJbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgc2VsZWN0Q29udGVudEluZm8uaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5FRElUT1JfU0VMRUNUX0lORk87XG4gICAgICBzZWxlY3RDb250ZW50SW5mby5pbm5lckhUTUwgKz0gJzxicj48YnI+PHN1Yj4nICsgbGFuZ0NvbnN0YW50cy5FRElUT1JfU0VMRUNUX0lORk9fQURESVRJT05BTCArICc8L3N1Yj4nO1xuICAgICAgc2VsZWN0Q29udGVudC5hcHBlbmRDaGlsZChzZWxlY3RDb250ZW50SW5mbyk7XG4gICAgICBzZWxlY3RDb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZChzZWxlY3RDb250ZW50KTtcblxuICAgICAgc2VsZWN0VmlldyA9IHRoaXMuYWRkVmlldyh7XG4gICAgICAgIG5hbWU6ICdzZWxlY3QnLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuRURJVE9SX1ZJRVdfVFJJR0dFUl9TRUxFQ1QsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuRURJVE9SX1ZJRVdfVFJJR0dFUl9TRUxFQ1QsXG4gICAgICAgICAgd2l0aEhlYWRsaW5lOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiB0aGlzLmNvbnRlbnRDb250YWluZXIsIGVsZW1lbnQ6IHNlbGVjdENvbnRlbnRXcmFwcGVyfSxcbiAgICAgICAgICB7c2VjdGlvbjogdGhpcy50b3BUb29sYmFyLCBlbGVtZW50OiB0aGlzLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICBdLFxuICAgICAgICBpbml0RnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxlY3RJbnRlcmFjdGlvbiA9IG5ldyBvbC5pbnRlcmFjdGlvbi5TZWxlY3Qoe1xuICAgICAgICAgICAgbGF5ZXJzOiBzZWxmLmVkaXRMYXllckdyb3VwLmdldExheWVycygpLmdldEFycmF5KCksXG4gICAgICAgICAgICB0b2dnbGVDb25kaXRpb246IG9sLmV2ZW50cy5jb25kaXRpb24ucGxhdGZvcm1Nb2RpZmllcktleU9ubHksXG4gICAgICAgICAgICBzdHlsZTogZnVuY3Rpb24gKGZlYXR1cmUsIHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgICAgdmFyIHN0eWxlSWQsXG4gICAgICAgICAgICAgICAgICBzdHlsZUFycmF5LFxuICAgICAgICAgICAgICAgICAgc3R5bGVSYWRpdXM7XG5cbiAgICAgICAgICAgICAgaWYgKGZlYXR1cmUgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBzdHlsZUlkIG9mIHRoZSBjdXJyZW50IGZlYXR1cmVcbiAgICAgICAgICAgICAgICBzdHlsZUlkID0gZmVhdHVyZS5nZXQoJ3N0eWxlSWQnKTtcbiAgICAgICAgICAgICAgICAvLyBhbmQgZXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0pIHtcbiAgICAgICAgICAgICAgICAgIHN0eWxlQXJyYXkgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS5zdHlsZShmZWF0dXJlLCBwcm9qZWN0aW9uKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZUFycmF5WzBdLmdldEltYWdlID09PSAnZnVuY3Rpb24nICYmIHN0eWxlQXJyYXlbMF0uZ2V0SW1hZ2UoKSBpbnN0YW5jZW9mIG9sLnN0eWxlLkljb24pIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVSYWRpdXMgPSA1O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVSYWRpdXMgPSBwYXJzZUludChzdHlsZUFycmF5WzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzKCksIDEwKSArIDQ7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHN0eWxlQXJyYXkucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNTUsMjU1LDI1NSwuNyknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA1XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHN0eWxlUmFkaXVzXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNTUsMjU1LDI1NSwuNyknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNTUsMjU1LDI1NSwuNSknXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVBcnJheTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pOyAvLyBzZWxlY3RJbnRlcmFjdGlvblxuXG4gICAgICAgICAgc2VsZWN0ZWRGZWF0dXJlcyA9IHNlbGVjdEludGVyYWN0aW9uLmdldEZlYXR1cmVzKCk7XG5cbiAgICAgICAgICBzZWxlY3RCb3hJbnRlcmFjdGlvbiA9IG5ldyBvbC5pbnRlcmFjdGlvbi5EcmFnQm94KHtjb25kaXRpb246IG9sLmV2ZW50cy5jb25kaXRpb24uc2hpZnRLZXlPbmx5fSk7XG5cbiAgICAgICAgICBzZWxlY3RCb3hJbnRlcmFjdGlvbi5vbignYm94ZW5kJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBleHRlbnQgPSBzZWxlY3RCb3hJbnRlcmFjdGlvbi5nZXRHZW9tZXRyeSgpLmdldEV4dGVudCgpO1xuXG4gICAgICAgICAgICBzZWxmLmVkaXRMYXllckdyb3VwLmdldExheWVycygpLmZvckVhY2goZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgICAgICAgIGxheWVyLmdldFNvdXJjZSgpLmZvckVhY2hGZWF0dXJlSW50ZXJzZWN0aW5nRXh0ZW50KGV4dGVudCwgZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZm5IYW5kbGVTZWxlY3Rpb24oKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIGNsZWFyIHNlbGVjdGlvbiB3aGVuIGRyYXdpbmcgYSBuZXcgYm94IGFuZCB3aGVuIGNsaWNraW5nIG9uIHRoZSBtYXBcbiAgICAgICAgICBzZWxlY3RCb3hJbnRlcmFjdGlvbi5vbignYm94c3RhcnQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgc2VsZWN0ZWRGZWF0dXJlcy5jbGVhcigpO1xuICAgICAgICAgICAgZm5IYW5kbGVTZWxlY3Rpb24oKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZuSGFuZGxlU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgICAgICBlZGl0b3JWYXJzLFxuICAgICAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudCxcbiAgICAgICAgICAgICAgICBpbnB1dE5hbWVFbGVtZW50LFxuICAgICAgICAgICAgICAgIG1vZGlmeUJ1dHRvbkVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZGVsZXRlQnV0dG9uRWxlbWVudCxcbiAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LFxuICAgICAgICAgICAgICAgIHN0cm9uZ0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LFxuICAgICAgICAgICAgICAgIGZlYXR1cmVDb3VudCxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEZlYXR1cmUsXG4gICAgICAgICAgICAgICAgYmx1ck9uRW50ZXIsXG4gICAgICAgICAgICAgICAgaW5wdXRDaGFuZ2VIYW5kbGVyLFxuICAgICAgICAgICAgICAgIG5hbWVDaGFuZ2VIYW5kbGVyLFxuICAgICAgICAgICAgICAgIG1vZGlmeUZlYXR1cmVGdW5jdGlvbixcbiAgICAgICAgICAgICAgICBkZWxldGVGZWF0dXJlRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgcmVuZGVyU2VsZWN0ZWRGZWF0dXJlc0xpc3Q7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYmx1ck9uRW50ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAxMykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuYmx1cigpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwiYmx1ck9uRW50ZXIoKVwiXG5cbiAgICAgICAgICAgIG5hbWVDaGFuZ2VIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhciBjaGFuZ2VkRmVhdHVyZTtcbiAgICAgICAgICAgICAgY2hhbmdlZEZlYXR1cmUgPSBzZWxlY3RlZEZlYXR1cmVzLml0ZW0oZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZmVhdF9pZCcpKTtcbiAgICAgICAgICAgICAgY2hhbmdlZEZlYXR1cmUuc2V0KFxuICAgICAgICAgICAgICAgICAgJ3Rvb2x0aXAnLFxuICAgICAgICAgICAgICAgICAgdXRpbHMuZW5jb2RlR2VvSnNvblByb3BlcnR5KGV2ZW50LnRhcmdldC52YWx1ZSB8fCAnJylcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgc2VsZi5zYXZlKCk7XG4gICAgICAgICAgICAgIC8vIENhbGwgaG9vayB0byBub3RpZnkgdGhlIGZlYXR1cmUgY2hhbmdlXG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkLCB7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlOiBjaGFuZ2VkRmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3JlbmFtZWQnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07IC8vIGVuZCBvZiBcIm5hbWVDaGFuZ2VIYW5kbGVyKClcIlxuXG4gICAgICAgICAgICBpbnB1dENoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYXJzLFxuICAgICAgICAgICAgICAgICAgY2hhbmdlZEZlYXR1cmU7XG4gICAgICAgICAgICAgIGNoYW5nZWRGZWF0dXJlID0gc2VsZWN0ZWRGZWF0dXJlcy5pdGVtKGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2ZlYXRfaWQnKSk7XG4gICAgICAgICAgICAgIGN1cnJlbnRWYXJzID0gY2hhbmdlZEZlYXR1cmUuZ2V0KCdlZGl0b3JWYXJzJyk7XG4gICAgICAgICAgICAgIGN1cnJlbnRWYXJzW2V2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3Zhcl9pZCcpXS52YWx1ZSA9IHV0aWxzLmVuY29kZUdlb0pzb25Qcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSB8fCAnJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBjaGFuZ2VkRmVhdHVyZS5zZXQoJ2VkaXRvclZhcnMnLCBjdXJyZW50VmFycyk7XG4gICAgICAgICAgICAgIHNlbGYuc2F2ZSgpO1xuICAgICAgICAgICAgICAvLyBDYWxsIGhvb2sgdG8gbm90aWZ5IHRoZSBmZWF0dXJlIGNoYW5nZVxuICAgICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9mZWF0dXJlQ2hhbmdlZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9mZWF0dXJlQ2hhbmdlZCwge1xuICAgICAgICAgICAgICAgICAgZmVhdHVyZTogY2hhbmdlZEZlYXR1cmUsXG4gICAgICAgICAgICAgICAgICBhY3Rpb246ICdjaGFuZ2VkX3ZhcidcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTsgLy8gZW5kIG9mIFwiaW5wdXRDaGFuZ2VIYW5kbGVyKClcIlxuXG4gICAgICAgICAgICBtb2RpZnlGZWF0dXJlRnVuY3Rpb24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIG1vZGlmeUZlYXR1cmUsXG4gICAgICAgICAgICAgICAgICBmZWF0dXJlR2VvbWV0cnksXG4gICAgICAgICAgICAgICAgICB0cmFuc2xhdGVJbnRlcmFjdGlvbixcbiAgICAgICAgICAgICAgICAgIG1vZGlmeUludGVyYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgbW9kaWZ5QnV0dG9uLFxuICAgICAgICAgICAgICAgICAgYXBwbHlCdXR0b247XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLmFwcGx5RmVhdHVyZU1vZGlmaWNhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHNlbGYuYXBwbHlGZWF0dXJlTW9kaWZpY2F0aW9uKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBtb2RpZnlCdXR0b24gPSBldmVudC50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgLy8gZ2V0IGZlYXR1cmUgdGhhdCBzaG91bGQgYmUgbW9kaWZpZWRcbiAgICAgICAgICAgICAgbW9kaWZ5RmVhdHVyZSA9IHNlbGVjdGVkRmVhdHVyZXMuaXRlbShtb2RpZnlCdXR0b24uZ2V0QXR0cmlidXRlKCdmZWF0X2lkJykpO1xuICAgICAgICAgICAgICBpZiAoIW1vZGlmeUZlYXR1cmUgfHwgdHlwZW9mIG1vZGlmeUZlYXR1cmUuZ2V0R2VvbWV0cnkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmZWF0dXJlR2VvbWV0cnkgPSBtb2RpZnlGZWF0dXJlLmdldEdlb21ldHJ5KCk7XG4gICAgICAgICAgICAgIHRyYW5zbGF0ZUludGVyYWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgIG1vZGlmeUludGVyYWN0aW9uID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgaWYgKCEoZmVhdHVyZUdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5MaW5lU3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLlRyYW5zbGF0ZSh7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlczogbmV3IG9sLkNvbGxlY3Rpb24oW21vZGlmeUZlYXR1cmVdKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbih0cmFuc2xhdGVJbnRlcmFjdGlvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCEoZmVhdHVyZUdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5Qb2ludCkpIHtcbiAgICAgICAgICAgICAgICBtb2RpZnlJbnRlcmFjdGlvbiA9IG5ldyBvbC5pbnRlcmFjdGlvbi5Nb2RpZnkoe1xuICAgICAgICAgICAgICAgICAgZmVhdHVyZXM6IG5ldyBvbC5Db2xsZWN0aW9uKFttb2RpZnlGZWF0dXJlXSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkSW50ZXJhY3Rpb24obW9kaWZ5SW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2VsZWN0SW50ZXJhY3Rpb24uc2V0QWN0aXZlKGZhbHNlKTtcblxuICAgICAgICAgICAgICAvLyBhZGQgYXBwbHkgYnV0dG9uXG4gICAgICAgICAgICAgIGFwcGx5QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgIGFwcGx5QnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLkVESVRPUl9GRUFUVVJFX0FQUExZO1xuICAgICAgICAgICAgICBhcHBseUJ1dHRvbi50aXRsZSA9IGxhbmdDb25zdGFudHMuRURJVE9SX0ZFQVRVUkVfQVBQTFk7XG4gICAgICAgICAgICAgIGFwcGx5QnV0dG9uLnNldEF0dHJpYnV0ZSgnZmVhdF9pZCcsIGkpO1xuXG4gICAgICAgICAgICAgIHNlbGYuYXBwbHlGZWF0dXJlTW9kaWZpY2F0aW9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZUludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICB0cmFuc2xhdGVJbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUludGVyYWN0aW9uKHRyYW5zbGF0ZUludGVyYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUludGVyYWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtb2RpZnlJbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUludGVyYWN0aW9uKG1vZGlmeUludGVyYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIG1vZGlmeUludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICBtb2RpZnlJbnRlcmFjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxlY3RJbnRlcmFjdGlvbi5zZXRBY3RpdmUodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBhcHBseUJ1dHRvbiA9IGFwcGx5QnV0dG9uLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG1vZGlmeUJ1dHRvbiwgYXBwbHlCdXR0b24pO1xuICAgICAgICAgICAgICAgIHNlbGYuc2F2ZSgpO1xuICAgICAgICAgICAgICAgIHNlbGYuYXBwbHlGZWF0dXJlTW9kaWZpY2F0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgLy8gQ2FsbCBob29rIHRvIG5vdGlmeSB0aGUgZmVhdHVyZSBjaGFuZ2VcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9mZWF0dXJlQ2hhbmdlZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX2ZlYXR1cmVDaGFuZ2VkLCB7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmU6IG1vZGlmeUZlYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2VkaXRlZCdcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAkKGFwcGx5QnV0dG9uKS5jbGljayhzZWxmLmFwcGx5RmVhdHVyZU1vZGlmaWNhdGlvbik7XG4gICAgICAgICAgICAgIG1vZGlmeUJ1dHRvbiA9IG1vZGlmeUJ1dHRvbi5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChhcHBseUJ1dHRvbiwgbW9kaWZ5QnV0dG9uKTtcbiAgICAgICAgICAgIH07IC8vIGVuZCBvZiBcIm1vZGlmeUZlYXR1cmVGdW5jdGlvbigpXCJcblxuICAgICAgICAgICAgZGVsZXRlRmVhdHVyZUZ1bmN0aW9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhciBmZWF0dXJlSW5kZXgsXG4gICAgICAgICAgICAgICAgICBmZWF0dXJlR2VvbWV0cnksXG4gICAgICAgICAgICAgICAgICBmZWF0dXJlU291cmNlLFxuICAgICAgICAgICAgICAgICAgZGVsZXRlRmVhdHVyZTtcblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlbGYuYXBwbHlGZWF0dXJlTW9kaWZpY2F0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZlYXR1cmVJbmRleCA9IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2ZlYXRfaWQnKTtcbiAgICAgICAgICAgICAgZGVsZXRlRmVhdHVyZSA9IHNlbGVjdGVkRmVhdHVyZXMuaXRlbShmZWF0dXJlSW5kZXgpO1xuICAgICAgICAgICAgICBmZWF0dXJlR2VvbWV0cnkgPSBkZWxldGVGZWF0dXJlLmdldEdlb21ldHJ5KCk7XG5cbiAgICAgICAgICAgICAgLy8gZmluZCByaWdodCBzb3VyY2VcbiAgICAgICAgICAgICAgaWYgKGZlYXR1cmVHZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9pbnQpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlU291cmNlID0gc2VsZi5lZGl0UG9pbnRMYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlR2VvbWV0cnkgaW5zdGFuY2VvZiBvbC5nZW9tLkxpbmVTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgZmVhdHVyZVNvdXJjZSA9IHNlbGYuZWRpdExpbmVMYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlR2VvbWV0cnkgaW5zdGFuY2VvZiBvbC5nZW9tLlBvbHlnb24pIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlU291cmNlID0gc2VsZi5lZGl0UG9seWdvbkxheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmVHZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uQ2lyY2xlKSB7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlU291cmNlID0gc2VsZi5lZGl0Q2lyY2xlTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY291bGQgbm90IGZpbmQgcmlnaHQgc291cmNlXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgZGVsZXRlIHRoZSBmZWF0dXJlLiBVbmFibGUgdG8gZmluZCBhcHByb3ByaWF0ZSBzb3VyY2UuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gcmVtb3ZlIEZlYXR1cmUgZnJvbSB0aGUgc291cmNlXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlU291cmNlLnJlbW92ZUZlYXR1cmUoZGVsZXRlRmVhdHVyZSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVHZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uTGluZVN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UgPSBzZWxmLmVkaXRGcmVlaGFuZExheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVTb3VyY2UucmVtb3ZlRmVhdHVyZShkZWxldGVGZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBhbmQgZnJvbSB0aGUgc2VsZWN0aW9uXG4gICAgICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZXMucmVtb3ZlKGRlbGV0ZUZlYXR1cmUpO1xuXG4gICAgICAgICAgICAgIC8vIHJlcmVuZGVyIHRoZSBzZWxlY3Rpb25MaXN0XG4gICAgICAgICAgICAgIHJlbmRlclNlbGVjdGVkRmVhdHVyZXNMaXN0KCk7XG4gICAgICAgICAgICAgIHNlbGYuc2F2ZSgpO1xuICAgICAgICAgICAgICAvLyBDYWxsIGhvb2sgdG8gbm90aWZ5IHRoZSBmZWF0dXJlIGNoYW5nZVxuICAgICAgICAgICAgICAvLyBNYXliZSBwYXNzIHRoZSByZW1haW5pbmcgZmVhdHVyZXMgaW5zdGVhZCBvZiB0aGUgZGVsZXRlZEZlYXR1cmUgP1xuICAgICAgICAgICAgICAvLyBPciBtYXliZSBhIHNlY29uZCBob29rIGZvciBkZWxldGlvbiwgd2hlcmUgYm90aCBpcyBwYXNzZWQgP1xuICAgICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9mZWF0dXJlQ2hhbmdlZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9mZWF0dXJlQ2hhbmdlZCwge1xuICAgICAgICAgICAgICAgICAgZmVhdHVyZTogZGVsZXRlRmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2RlbGV0ZWQnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07IC8vIGVuZCBvZiBcImRlbGV0ZUZlYXR1cmVGdW5jdGlvbigpXCJcblxuICAgICAgICAgICAgcmVuZGVyU2VsZWN0ZWRGZWF0dXJlc0xpc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGZlYXR1cmVDb3VudCA9IHNlbGVjdGVkRmVhdHVyZXMuZ2V0TGVuZ3RoKCk7XG4gICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgIGlmIChmZWF0dXJlQ291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGZlYXR1cmVDb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZEZlYXR1cmUgPSBzZWxlY3RlZEZlYXR1cmVzLml0ZW0oaSk7XG4gICAgICAgICAgICAgICAgICBoZWFkbGluZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoNCcpO1xuICAgICAgICAgICAgICAgICAgLy8gYWRkIG5hbWUgaW5wdXRmaWVsZFxuICAgICAgICAgICAgICAgICAgaW5wdXROYW1lRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgICBpbnB1dE5hbWVFbGVtZW50LnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgICAgICAgICBpbnB1dE5hbWVFbGVtZW50LmlkID0gaTtcbiAgICAgICAgICAgICAgICAgIGlucHV0TmFtZUVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgdXRpbHMuZGVjb2RlR2VvSnNvblByb3BlcnR5KHNlbGVjdGVkRmVhdHVyZS5nZXQoJ3Rvb2x0aXAnKSB8fCAnJylcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBpbnB1dE5hbWVFbGVtZW50LnNldEF0dHJpYnV0ZSgnZmVhdF9pZCcsIGkpO1xuICAgICAgICAgICAgICAgICAgJChpbnB1dE5hbWVFbGVtZW50KS5rZXlkb3duKGJsdXJPbkVudGVyKTtcbiAgICAgICAgICAgICAgICAgIGlucHV0TmFtZUVsZW1lbnQub25jaGFuZ2UgPSBuYW1lQ2hhbmdlSGFuZGxlcjtcbiAgICAgICAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudC5hcHBlbmRDaGlsZChpbnB1dE5hbWVFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgIC8vIGFkZCBtb2RpZnkgYnV0dG9uXG4gICAgICAgICAgICAgICAgICBtb2RpZnlCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgICBtb2RpZnlCdXR0b25FbGVtZW50LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLkVESVRPUl9GRUFUVVJFX01PRElGWTtcbiAgICAgICAgICAgICAgICAgIG1vZGlmeUJ1dHRvbkVsZW1lbnQudGl0bGUgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9GRUFUVVJFX01PRElGWTtcbiAgICAgICAgICAgICAgICAgIG1vZGlmeUJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdmZWF0X2lkJywgaSk7XG4gICAgICAgICAgICAgICAgICAkKG1vZGlmeUJ1dHRvbkVsZW1lbnQpLmNsaWNrKG1vZGlmeUZlYXR1cmVGdW5jdGlvbik7XG4gICAgICAgICAgICAgICAgICBoZWFkbGluZUVsZW1lbnQuYXBwZW5kQ2hpbGQobW9kaWZ5QnV0dG9uRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAvLyBhZGQgZGVsZXRlIGJ1dHRvblxuICAgICAgICAgICAgICAgICAgZGVsZXRlQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgZGVsZXRlQnV0dG9uRWxlbWVudC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuSUNPTiArICcgJyArIGNzc0NvbnN0YW50cy5FRElUT1JfRkVBVFVSRV9ERUxFVEU7XG4gICAgICAgICAgICAgICAgICBkZWxldGVCdXR0b25FbGVtZW50LnRpdGxlID0gbGFuZ0NvbnN0YW50cy5FRElUT1JfRkVBVFVSRV9ERUxFVEU7XG4gICAgICAgICAgICAgICAgICBkZWxldGVCdXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgnZmVhdF9pZCcsIGkpO1xuICAgICAgICAgICAgICAgICAgJChkZWxldGVCdXR0b25FbGVtZW50KS5jbGljayhkZWxldGVGZWF0dXJlRnVuY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LmFwcGVuZENoaWxkKGRlbGV0ZUJ1dHRvbkVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICBzZWxlY3RDb250ZW50LmFwcGVuZENoaWxkKGhlYWRsaW5lRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGZWF0dXJlLmdldCgnbWVhc3VyZWRMZW5ndGgnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGZWF0dXJlLmdldEdlb21ldHJ5KCkgaW5zdGFuY2VvZiBvbC5nZW9tLkxpbmVTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IGxhbmdDb25zdGFudHMuTEVOR1RIO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGVkRmVhdHVyZS5nZXRHZW9tZXRyeSgpIGluc3RhbmNlb2Ygb2wuZ2VvbS5Qb2x5Z29uKXtcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IGxhbmdDb25zdGFudHMuUEVSSU1FVEVSO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBsYW5nQ29uc3RhbnRzLlJBRElVUztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmlubmVySFRNTCArPSAnPHN0cm9uZz4nICsgbGFiZWwgKyAnOjwvc3Ryb25nPiAnICsgc2VsZWN0ZWRGZWF0dXJlLmdldCgnbWVhc3VyZWRMZW5ndGgnKS5odG1sVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuYXBwZW5kQ2hpbGQocGFyYWdyYXBoRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGZWF0dXJlLmdldCgnbWVhc3VyZWRBcmVhJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5pbm5lckhUTUwgKz0gJzxzdHJvbmc+JyArIGxhbmdDb25zdGFudHMuU1VSRkFDRUFSRUEgKyAnOjwvc3Ryb25nPiAnICsgc2VsZWN0ZWRGZWF0dXJlLmdldCgnbWVhc3VyZWRBcmVhJykuaHRtbFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RDb250ZW50LmFwcGVuZENoaWxkKHBhcmFncmFwaEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRmVhdHVyZS5nZXQoJ21lYXN1cmVkUmFkaXVzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQuaW5uZXJIVE1MICs9ICc8c3Ryb25nPicgKyBsYW5nQ29uc3RhbnRzLlJBRElVUyArICc6PC9zdHJvbmc+ICcgKyBzZWxlY3RlZEZlYXR1cmUuZ2V0KCdtZWFzdXJlZFJhZGl1cycpLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RDb250ZW50LmFwcGVuZENoaWxkKHBhcmFncmFwaEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgYW5kIGFwcGVuZCBlZGl0b3ItdmFyc1xuICAgICAgICAgICAgICAgICAgZWRpdG9yVmFycyA9IHNlbGVjdGVkRmVhdHVyZS5nZXQoJ2VkaXRvclZhcnMnKTtcbiAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBlZGl0b3JWYXJzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICAgICAgICAgIHN0cm9uZ0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHJvbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgc3Ryb25nRWxlbWVudC5pbm5lckhUTUwgPSBlZGl0b3JWYXJzW2pdLmxhYmVsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC50eXBlID0gJ3RleHQnO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuaWQgPSBpICsgJy0nICsgajtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5kZWNvZGVHZW9Kc29uUHJvcGVydHkoZWRpdG9yVmFyc1tqXS52YWx1ZSB8fCAnJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZSgnZmVhdF9pZCcsIGkpO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKCd2YXJfaWQnLCBqKTtcbiAgICAgICAgICAgICAgICAgICAgJChpbnB1dEVsZW1lbnQpLmtleWRvd24oYmx1ck9uRW50ZXIpO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEVsZW1lbnQub25jaGFuZ2UgPSBpbnB1dENoYW5nZUhhbmRsZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5hcHBlbmRDaGlsZChzdHJvbmdFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5hcHBlbmRDaGlsZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RDb250ZW50LmFwcGVuZENoaWxkKHBhcmFncmFwaEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxlY3RDb250ZW50SGVhZGxpbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAvLyBzZWxmLnN0YXR1c0Jhci5pbm5lckhUTUwgPSBmZWF0dXJlQ291bnQ7XG5cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RDb250ZW50LmFwcGVuZENoaWxkKHNlbGVjdENvbnRlbnRJbmZvKTtcbiAgICAgICAgICAgICAgICAvLyBzZWxmLnN0YXR1c0Jhci5pbm5lckhUTUwgPSAwO1xuICAgICAgICAgICAgICAgIHNlbGVjdENvbnRlbnRIZWFkbGluZS5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICAgIH07IC8vIGVuZCBvZiBcInJlbmRlclNlbGVjdGVkRmVhdHVyZXNMaXN0XCJcblxuICAgICAgICAgICAgcmVuZGVyU2VsZWN0ZWRGZWF0dXJlc0xpc3QoKTtcbiAgICAgICAgICB9OyAvLyBlbmQgb2YgXCJmbkhhbmRsZVNlbGVjdGlvblwiXG5cbiAgICAgICAgICBzZWxlY3RJbnRlcmFjdGlvbi5vbignc2VsZWN0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBmbkhhbmRsZVNlbGVjdGlvbihldmVudC50YXJnZXQuZ2V0RmVhdHVyZXMoKSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkSW50ZXJhY3Rpb24oc2VsZWN0SW50ZXJhY3Rpb24pO1xuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihzZWxlY3RCb3hJbnRlcmFjdGlvbik7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2YXRlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgIC8vIERpc2FibGUgbWFwSG92ZXJcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXBIb3Zlci5kZWFjdGl2YXRlKCk7XG5cbiAgICAgICAgICAvLyBSZXNldCBkaXNwbGF5LCBpZiBubyBmZWF0dXJlcyBhcmUgc2VsZWN0ZWRcbiAgICAgICAgICBpZiAoc2VsZWN0SW50ZXJhY3Rpb24uZ2V0RmVhdHVyZXMoKS5nZXRMZW5ndGgoKSA8IDEpIHtcbiAgICAgICAgICAgIHNlbGVjdENvbnRlbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICBzZWxlY3RDb250ZW50LmFwcGVuZENoaWxkKHNlbGVjdENvbnRlbnRJbmZvKTtcbiAgICAgICAgICAgIC8vIHNlbGYuc3RhdHVzQmFyLmlubmVySFRNTCA9IDA7XG4gICAgICAgICAgICBzZWxlY3RDb250ZW50SGVhZGxpbmUuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEVuYWJsZSBpbnRlcmFjdGlvblxuICAgICAgICAgIHNlbGVjdEludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkSW50ZXJhY3Rpb24oc2VsZWN0SW50ZXJhY3Rpb24pO1xuICAgICAgICAgIHNlbGVjdEJveEludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkSW50ZXJhY3Rpb24oc2VsZWN0Qm94SW50ZXJhY3Rpb24pO1xuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGRlYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5hcHBseUZlYXR1cmVNb2RpZmljYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNlbGYuYXBwbHlGZWF0dXJlTW9kaWZpY2F0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIERpc2FibGUgaW50ZXJhY3Rpb25cbiAgICAgICAgICBzZWxlY3RJbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVJbnRlcmFjdGlvbihzZWxlY3RJbnRlcmFjdGlvbik7XG4gICAgICAgICAgc2VsZWN0Qm94SW50ZXJhY3Rpb24uc2V0QWN0aXZlKGZhbHNlKTtcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlSW50ZXJhY3Rpb24oc2VsZWN0Qm94SW50ZXJhY3Rpb24pO1xuXG4gICAgICAgICAgLy8gZW5hYmxlIG1hcEhvdmVyXG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwSG92ZXIuYWN0aXZhdGUoKTtcblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHNlbGVjdFZpZXc7XG4gICAgfSxcblxuICAgIGFkZERyYXdWaWV3OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgVFJJR0dFUl9EUkFXLFxuICAgICAgICAgIGRyYXdDb250ZW50LFxuICAgICAgICAgIG9wdGlvbnNEaXYsXG4gICAgICAgICAgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveCxcbiAgICAgICAgICBlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94TGFiZWwsXG4gICAgICAgICAgLy8gZW5hYmxlRnJlZWhhbmREcmF3Q2hlY2tib3gsXG4gICAgICAgICAgLy8gZW5hYmxlRnJlZWhhbmREcmF3Q2hlY2tib3hMYWJlbCxcbiAgICAgICAgICBjaGVja2JveENoYW5nZUhhbmRsZXIsXG4gICAgICAgICAgZHJhd1ZpZXcsXG4gICAgICAgICAgYWRkRHJhd1N0eWxlLFxuICAgICAgICAgIG9sVHlwZTtcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgIHN0eWxlSWRzOiBbXVxuICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgIGNoZWNrYm94Q2hhbmdlSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIC8vIHZhciBpbnRlcmFjdGlvbiA9IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5pbnRlcmFjdGlvbjtcbiAgICAgICAgICAvLyBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlSW50ZXJhY3Rpb24oaW50ZXJhY3Rpb24pO1xuICAgICAgICAgIC8vIC8vc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZEludGVyYWN0aW9uKGludGVyYWN0aW9uKTtcblxuICAgICAgfVxuXG4gICAgICBUUklHR0VSX0RSQVcgPSAnRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXXycgKyBvcHRpb25zLnR5cGUudG9VcHBlckNhc2UoKTtcblxuICAgICAgZHJhd0NvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRyYXdDb250ZW50LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50c1snRURJVE9SX0RSQVdfQ09OVEVOVF8nICsgb3B0aW9ucy50eXBlLnRvVXBwZXJDYXNlKCldO1xuICAgICAgZHJhd0NvbnRlbnQuaW5uZXJIVE1MID0gJzxoND4nICsgbGFuZ0NvbnN0YW50c1tUUklHR0VSX0RSQVddICsgJzwvaDQ+JztcblxuICAgICAgaWYgKG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpICE9PSAncG9pbnQnKSB7XG4gICAgICAgIG9wdGlvbnNEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgb3B0aW9uc0Rpdi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuRURJVE9SX0RSQVdfT1BUSU9OUztcbiAgICAgICAgZHJhd0NvbnRlbnQuYXBwZW5kQ2hpbGQob3B0aW9uc0Rpdik7XG5cbiAgICAgICAgZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3gudHlwZSA9ICdjaGVja2JveCc7XG4gICAgICAgIGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3guaWQgPSAnZW5hYmxlSW5zdGFudE1lYXN1cmVGb3InICsgb3B0aW9ucy50eXBlO1xuICAgICAgICBvcHRpb25zRGl2LmFwcGVuZENoaWxkKGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3gpO1xuXG4gICAgICAgIGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3hMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgIGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3hMYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsICdlbmFibGVJbnN0YW50TWVhc3VyZUZvcicgKyBvcHRpb25zLnR5cGUpO1xuICAgICAgICBlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94TGFiZWwuaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5FRElUT1JfRU5BQkxFX0lOU1RBTlRfTUVBU1VSRTtcbiAgICAgICAgb3B0aW9uc0Rpdi5hcHBlbmRDaGlsZChlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94TGFiZWwpO1xuXG4gICAgICAgIG9wdGlvbnNEaXYuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKSk7XG5cbiAgICAgICAgLy8gZW5hYmxlRnJlZWhhbmREcmF3Q2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgLy8gZW5hYmxlRnJlZWhhbmREcmF3Q2hlY2tib3guaWQgPSAnZW5hYmxlRnJlZWhhbmREcmF3Rm9yJyArIG9wdGlvbnMudHlwZTtcbiAgICAgICAgLy8gZW5hYmxlRnJlZWhhbmREcmF3Q2hlY2tib3gub25jaGFuZ2UgPSBjaGVja2JveENoYW5nZUhhbmRsZXI7XG4gICAgICAgIC8vIG9wdGlvbnNEaXYuYXBwZW5kQ2hpbGQoZW5hYmxlRnJlZWhhbmREcmF3Q2hlY2tib3gpO1xuICAgICAgICAvL1xuICAgICAgICAvLyBlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgLy8gZW5hYmxlRnJlZWhhbmREcmF3Q2hlY2tib3hMYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsICdlbmFibGVGcmVlaGFuZERyYXdGb3InICsgb3B0aW9ucy50eXBlKTtcbiAgICAgICAgLy8gZW5hYmxlRnJlZWhhbmREcmF3Q2hlY2tib3hMYWJlbC5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLkVESVRPUl9FTkFCTEVfRlJFRUhBTkRfRFJBVztcbiAgICAgICAgLy8gb3B0aW9uc0Rpdi5hcHBlbmRDaGlsZChlbmFibGVGcmVlaGFuZERyYXdDaGVja2JveExhYmVsKTtcbiAgICAgIH1cblxuICAgICAgYWRkRHJhd1N0eWxlID0gZnVuY3Rpb24gKHN0eWxlSWQpIHtcbiAgICAgICAgdmFyIGludGVyYWN0aW9uVmlldyxcbiAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgIGludGVyYWN0aW9uLFxuICAgICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgICBlZGl0b3JTdHlsZSxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgc3R5bGVEYXRhLFxuICAgICAgICAgICAgc3R5bGVJY29uLFxuICAgICAgICAgICAgc3ZnU3JjLFxuICAgICAgICAgICAgc3R5bGVJbWFnZSxcbiAgICAgICAgICAgIHN0eWxlVHJpZ2dlckxhYmVsLFxuICAgICAgICAgICAgZmVhdHVyZUlkQ291bnQsXG4gICAgICAgICAgICBuYW1lO1xuXG4gICAgICAgIC8vIFN0eWxlIFwic2hvcnRjdXRcIlxuICAgICAgICBzdHlsZSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKClbMF07XG4gICAgICAgIGVkaXRvclN0eWxlID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uZWRpdG9yO1xuICAgICAgICBzdHlsZURhdGEgPSBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS5sb2NTdHlsZUFycjtcbiAgICAgICAgc3ZnU3JjID0gc3R5bGVEYXRhLnN2Z1NyYztcblxuICAgICAgICBmZWF0dXJlSWRDb3VudCA9IDA7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGxhYmVsIGZvciBpbnRlcmFjdGlvbi10cmlnZ2VyXG4gICAgICAgIHN0eWxlVHJpZ2dlckxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAvLyBAVE9ETyB1c2UgY3NzLWNsYXNzIGZvciBkaW1lbnNpb25zXG4gICAgICAgIHN0eWxlVHJpZ2dlckxhYmVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBzdHlsZVRyaWdnZXJMYWJlbC5zdHlsZS5taW5XaWR0aCA9ICczMHB4JztcbiAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwuc3R5bGUubWluSGVpZ2h0ID0gJzMwcHgnO1xuICAgICAgICBzdHlsZVRyaWdnZXJMYWJlbC5zdHlsZS5tYXJnaW4gPSAnMnB4JztcbiAgICAgICAgLy8gXCJzdHlsZS5nZXRJbWFnZSgpLmdldEltYWdlKClcIiwgZG9lcyBub3Qgd29yayBpbiBldmVyeSBjYXNlXG4gICAgICAgIHN0eWxlSW1hZ2UgPSBzdHlsZS5nZXRJbWFnZSgpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGVkaXRvclN0eWxlLmljb25TcmMgfHwgc3R5bGVJbWFnZSBpbnN0YW5jZW9mIG9sLnN0eWxlLkljb24pIHtcbiAgICAgICAgICBzdHlsZUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgIGlmIChlZGl0b3JTdHlsZS5pY29uU3JjICYmIChlZGl0b3JTdHlsZS5pY29uU3JjLmluZGV4T2YoJy4nKSAhPSAtMSkpIHtcbiAgICAgICAgICAgIHN0eWxlSWNvbi5zcmMgPSBlZGl0b3JTdHlsZS5pY29uU3JjO1xuICAgICAgICAgICAgaWYgKHN0eWxlRGF0YS5lZGl0b3JfaWNvbl9zaXplKSB7XG4gICAgICAgICAgICAgICAgc3R5bGVJY29uLmhlaWdodCA9IHN0eWxlRGF0YS5lZGl0b3JfaWNvbl9zaXplWzBdO1xuICAgICAgICAgICAgICAgIHN0eWxlSWNvbi53aWR0aCA9IHN0eWxlRGF0YS5lZGl0b3JfaWNvbl9zaXplWzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHlsZUljb24uaGVpZ2h0ID0gJzMyJztcbiAgICAgICAgICAgICAgICBzdHlsZUljb24ud2lkdGggPSAnMzInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHlsZUljb24uc3JjID0gc3R5bGVJbWFnZS5nZXRTcmMoKTtcbiAgICAgICAgICAgIHN0eWxlSWNvbi5zY2FsZSA9IHN0eWxlSW1hZ2UuZ2V0U2NhbGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwuYXBwZW5kQ2hpbGQoc3R5bGVJY29uKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdmdTcmMpIHtcbiAgICAgICAgICAgIGlmIChzdHlsZURhdGEuc3ZnU3JjICYmIHN0eWxlRGF0YS5pY29uX3NjYWxlICYmIHN0eWxlRGF0YS5pY29uX3NpemUpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICAgICAgbGV0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgICAgICAgICAgbGV0IGhlaWdodCA9IChzdHlsZURhdGEuaWNvbl9zaXplWzBdICogc3R5bGVEYXRhLmljb25fc2NhbGUpO1xuICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IChzdHlsZURhdGEuaWNvbl9zaXplWzFdICogc3R5bGVEYXRhLmljb25fc2NhbGUpO1xuXG4gICAgICAgICAgICAgICAgbGV0IHN0cm9rZXdpZHRoID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGVEYXRhLnN0cm9rZXdpZHRoICYmIHN0eWxlRGF0YS5zdHJva2V3aWR0aC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBzdHJva2V3aWR0aCA9IHN0eWxlRGF0YS5zdHJva2V3aWR0aC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICsgKDIgKiBzdHJva2V3aWR0aCk7XG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGggKyAoMiAqIHN0cm9rZXdpZHRoKTtcbiAgICAgICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3R5bGVEYXRhLmZpbGxjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5maWxsY29sb3IsIHN0eWxlRGF0YS5maWxsb3BhY2l0eS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdHJva2V3aWR0aCAmJiBzdHlsZURhdGEuc3Ryb2tlY29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5zdHJva2Vjb2xvciwgc3R5bGVEYXRhLnN0cm9rZW9wYWNpdHkudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gc3Ryb2tld2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoMC41LCAwLjUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGlmIChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlICYmIChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlID4gMCkpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgY3R4Lmdsb2JhbEFscGhhID0gKHN0eWxlRGF0YS5pY29uX29wYWNpdHkudmFsdWUgLyAxMDApO1xuICAgICAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgICAgIGxldCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICBpbWcuc3JjID0gc3R5bGVEYXRhLnN2Z1NyYztcbiAgICAgICAgICAgICAgICBpbWcuekluZGV4ID0gMTAwO1xuXG4gICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIHN0cm9rZXdpZHRoLCBzdHJva2V3aWR0aCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3R5bGVJY29uID0gY2FudmFzO1xuXG4gICAgICAgICAgICAgICAgc3R5bGVUcmlnZ2VyTGFiZWwuc3R5bGUud2lkdGggPSAod2lkdGggKiBzY2FsZSkgKyAncHgnO1xuICAgICAgICAgICAgICAgIHN0eWxlVHJpZ2dlckxhYmVsLnN0eWxlLmhlaWdodCA9IChoZWlnaHQgKiBzY2FsZSkgKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlVHJpZ2dlckxhYmVsLnN0eWxlLmJhY2tncm91bmQgPSBzdHlsZS5nZXRGaWxsKCkuZ2V0Q29sb3IoKTtcbiAgICAgICAgICBzdHlsZVRyaWdnZXJMYWJlbC5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkICcgKyBzdHlsZS5nZXRTdHJva2UoKS5nZXRDb2xvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGludGVyYWN0aW9uVmlld1xuICAgICAgICAvLyAgIFwiYWRkVmlld1wiIHdpbGwgYmUgdXNlZCBmb3IgdGhpcywgYmVjYXVzZSB0aGUgZnVuY3Rpb25hbGl0eVxuICAgICAgICAvLyAgIGlzdCBtb3N0bHkgZXF1YWxcbiAgICAgICAgbmFtZSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLm5hbWUucmVwbGFjZShcIiYjNDA7XCIsIFwiKFwiKS5yZXBsYWNlKFwiJiM0MTtcIiwgXCIpXCIpO1xuICAgICAgICBpbnRlcmFjdGlvblZpZXcgPSBzZWxmLmFkZFZpZXcoe1xuICAgICAgICAgIG5hbWU6ICdkcmF3OicgKyAoc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0udG9vbHRpcCB8fCBuYW1lKSxcbiAgICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgICBsYWJlbDogc3R5bGVUcmlnZ2VyTGFiZWwsXG4gICAgICAgICAgICB0aXBMYWJlbDogc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0udG9vbHRpcCB8fCBuYW1lLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuRURJVE9SX0RSQVdfVFJJR0dFUixcbiAgICAgICAgICAgIHRhcmdldDogZHJhd0NvbnRlbnQsXG4gICAgICAgICAgICB3aXRoSGVhZGxpbmU6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgICAge3NlY3Rpb246IHNlbGYuY29udGVudENvbnRhaW5lciwgZWxlbWVudDogZHJhd0NvbnRlbnR9LFxuICAgICAgICAgICAge3NlY3Rpb246IHNlbGYudG9wVG9vbGJhciwgZWxlbWVudDogc2VsZi52aWV3VHJpZ2dlckJhcn1cbiAgICAgICAgICBdLFxuICAgICAgICAgIGluaXRGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uU3R5bGVJbWFnZSxcbiAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2gsXG4gICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcDtcblxuICAgICAgICAgICAgLy8gT25seSBzaG93IG9yaWdpbmFsIGljb24sIHdoZW4gdGhlIGRyYXdpbmcgUE9Jc1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpID09PSAncG9pbnQnICYmIHN0eWxlLmdldEltYWdlKCkpIHtcbiAgICAgICAgICAgICAgaW50ZXJhY3Rpb25TdHlsZUltYWdlID0gc3R5bGUuZ2V0SW1hZ2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGludGVyYWN0aW9uU3R5bGVJbWFnZSA9IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgICAgICAgIGZpbGw6IHN0eWxlLmdldEZpbGwoKSxcbiAgICAgICAgICAgICAgICBzdHJva2U6IHN0eWxlLmdldFN0cm9rZSgpLFxuICAgICAgICAgICAgICAgIHJhZGl1czogNSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCBhcHByb3ByaWF0ZSBzb3VyY2VcbiAgICAgICAgICAgIHN3aXRjaCAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgY2FzZSAnZnJlZWhhbmQnOlxuICAgICAgICAgICAgICAgICAgc291cmNlID0gc2VsZi5lZGl0RnJlZWhhbmRMYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdjaXJjbGUnOlxuICAgICAgICAgICAgICAgICAgc291cmNlID0gc2VsZi5lZGl0Q2lyY2xlTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAncG9seWdvbic6XG4gICAgICAgICAgICAgICAgc291cmNlID0gc2VsZi5lZGl0UG9seWdvbkxheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdsaW5lc3RyaW5nJzpcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLmVkaXRMaW5lTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3BvaW50JzpcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLmVkaXRQb2ludExheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvbFR5cGUgPSBvcHRpb25zLnR5cGU7XG4gICAgICAgICAgICBpZiAob2xUeXBlID09ICdGcmVlaGFuZCcpIHtcbiAgICAgICAgICAgICAgb2xUeXBlID0gJ0xpbmVTdHJpbmcnXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZlYXR1cmVzID0gbmV3IG9sLkNvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIGludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLkRyYXcoe1xuICAgICAgICAgICAgICBmZWF0dXJlczogZmVhdHVyZXMsXG4gICAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgICB0eXBlOiBvbFR5cGUsXG4gICAgICAgICAgICAgIGZyZWVoYW5kOiBvcHRpb25zLnR5cGUgPT0gJ0ZyZWVoYW5kJyxcbiAgICAgICAgICAgICAgc3R5bGU6IFtcbiAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LC41KScsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzdHlsZS5nZXRTdHJva2UoKS5nZXRXaWR0aCgpICsgMlxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBpbWFnZTogaW50ZXJhY3Rpb25TdHlsZUltYWdlXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBzdHlsZS5nZXRHZW9tZXRyeSgpLFxuICAgICAgICAgICAgICAgICAgZmlsbDogc3R5bGUuZ2V0RmlsbCgpLFxuICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHlsZS5nZXRTdHJva2UoKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBAVE9ETyBkb2t1XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgaW50ZXJhY3Rpb24ub24oJ2RyYXdzdGFydCcsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2ggPSBldmVudC5mZWF0dXJlO1xuICAgICAgICAgICAgICAgICAgYWN0aXZlU2tldGNoLnNldCgnc3R5bGVJZCcsIHN0eWxlSWQpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoZW5hYmxlSW5zdGFudE1lYXN1cmVDaGVja2JveCAmJiBlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcCA9IG5ldyBUb29sdGlwUG9wVXAoe1xuICAgICAgICAgICAgICAgICAgICAgIG1hcDogc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLFxuICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBldmVudC5jb29yZGluYXRlLFxuICAgICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgc2VsZik7XG5cbiAgICAgICAgICAgIC8vIEBUT0RPIGRva3VcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAub24oJ3BvaW50ZXJtb3ZlJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVJbnN0YW50TWVhc3VyZUNoZWNrYm94ICYmIGVuYWJsZUluc3RhbnRNZWFzdXJlQ2hlY2tib3guY2hlY2tlZCAmJiBhY3RpdmVTa2V0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZihhY3RpdmVUb29sdGlwICYmIHV0aWxzLm1lYXN1cmVHZW9tZXRyeShhY3RpdmVTa2V0Y2guZ2V0R2VvbWV0cnkoKSwgdHJ1ZSkucmF3VmFsdWUgJiYgdXRpbHMubWVhc3VyZUdlb21ldHJ5KGFjdGl2ZVNrZXRjaC5nZXRHZW9tZXRyeSgpLCB0cnVlKS5yYXdWYWx1ZSA9PSBcIjAuMDBcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXAuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoIWFjdGl2ZVRvb2x0aXAgJiYgdXRpbHMubWVhc3VyZUdlb21ldHJ5KGFjdGl2ZVNrZXRjaC5nZXRHZW9tZXRyeSgpLCB0cnVlKS5yYXdWYWx1ZSAmJiB1dGlscy5tZWFzdXJlR2VvbWV0cnkoYWN0aXZlU2tldGNoLmdldEdlb21ldHJ5KCksIHRydWUpLnJhd1ZhbHVlICE9IFwiMC4wMFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcCA9IG5ldyBUb29sdGlwUG9wVXAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogZXZlbnQuY29vcmRpbmF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmKGFjdGl2ZVRvb2x0aXApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwLnNldFBvc2l0aW9uKGV2ZW50LmNvb3JkaW5hdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwLnNldENvbnRlbnQodXRpbHMubWVhc3VyZUdlb21ldHJ5KGFjdGl2ZVNrZXRjaC5nZXRHZW9tZXRyeSgpLCB0cnVlKS5odG1sVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBzZWxmKTtcblxuICAgICAgICAgICAgLy8gQFRPRE8gZG9rdVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIGludGVyYWN0aW9uLm9uKCdkcmF3ZW5kJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICAgIHZhcnMsXG4gICAgICAgICAgICAgICAgICAgICAgZWRpdG9yVmFycyxcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lO1xuXG4gICAgICAgICAgICAgICAgICAvLyBuYW1lIHRoZSBmZWF0dXJlXG4gICAgICAgICAgICAgICAgICBmZWF0dXJlSWRDb3VudCArPSAxO1xuICAgICAgICAgICAgICAgICAgbmFtZSA9IHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLm5hbWUucmVwbGFjZShcIiYjNDA7XCIsIFwiKFwiKS5yZXBsYWNlKFwiJiM0MTtcIiwgXCIpXCIpO1xuICAgICAgICAgICAgICAgICAgYWN0aXZlU2tldGNoLnNldCgndG9vbHRpcCcsIChzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS50b29sdGlwIHx8IG5hbWUpICsgJyAoJyArIGZlYXR1cmVJZENvdW50ICsgJyknKTtcbiAgICAgICAgICAgICAgICAgIC8vIGFkZCBzdHlsZUlkXG4gICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCdzdHlsZUlkJywgc3R5bGVJZCk7XG4gICAgICAgICAgICAgICAgICAvLyBhZGQgbWVhc3VyZW1lbnRzIHRvIHRoZSBmZWF0dXJlXG4gICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCdtZWFzdXJlZExlbmd0aCcsIHV0aWxzLm1lYXN1cmVHZW9tZXRyeShhY3RpdmVTa2V0Y2guZ2V0R2VvbWV0cnkoKSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpID09PSAncG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlU2tldGNoLnNldCgnbWVhc3VyZWRBcmVhJywgdXRpbHMubWVhc3VyZUdlb21ldHJ5KGFjdGl2ZVNrZXRjaC5nZXRHZW9tZXRyeSgpKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdjaXJjbGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYWN0aXZlU2tldGNoLnNldCgnbWVhc3VyZWRSYWRpdXMnLCB1dGlscy5tZWFzdXJlR2VvbWV0cnkoYWN0aXZlU2tldGNoLmdldEdlb21ldHJ5KCkpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC8vYWN0aXZlU2tldGNoLnNldFN0eWxlKHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKTtcbiAgICAgICAgICAgICAgICAgIC8vIGFkZCBlZGl0b3ItdmFyc1xuICAgICAgICAgICAgICAgICAgdmFycyA9IGVkaXRvclN0eWxlLnZhcnM7XG4gICAgICAgICAgICAgICAgICBlZGl0b3JWYXJzID0gW107XG4gICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdmFycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3JWYXJzW2ldID0ge307XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvclZhcnNbaV0ua2V5ID0gdmFyc1tpXS5rZXk7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvclZhcnNbaV0ubGFiZWwgPSB2YXJzW2ldLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3JWYXJzW2ldLnZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2guc2V0KCdlZGl0b3JWYXJzJywgZWRpdG9yVmFycyk7XG4gICAgICAgICAgICAgICAgICAvLyByZXNldCBhY3RpdmUtZWxlbWVudCB2YXJpYWJsZXNcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlVG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHNlbGYpO1xuXG4gICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkSW50ZXJhY3Rpb24oaW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICB9LCAvLyBlbmQgb2YgXCJpbml0RnVuY3Rpb24oKVwiXG5cbiAgICAgICAgICBhY3RpdmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIC8vIGRlYWN0aXZhdGUgbWFwSG92ZXJcbiAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcEhvdmVyLmRlYWN0aXZhdGUoKTtcblxuICAgICAgICAgICAgLy8gUmVzZXQgZmVhdHVyZS1saXN0XG4gICAgICAgICAgICBmZWF0dXJlcy5jbGVhcigpO1xuXG4gICAgICAgICAgICAvLyBFbmFibGUgaW50ZXJhY3Rpb25cbiAgICAgICAgICAgIC8vIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgICAgICAgICBpbnRlcmFjdGlvbi5zZXRBY3RpdmUodHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZGVhY3RpdmF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIC8vIHJlYWN0aXZhdGUgbWFwSG92ZXJcbiAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcEhvdmVyLmFjdGl2YXRlKCk7XG5cbiAgICAgICAgICAgIC8vIGZpbmlzaCBkcmF3aW5ncywgaWYgbm90IGFscmVhZHkgZG9uZVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpICE9PSAncG9pbnQnKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb24uZmluaXNoRHJhd2luZygpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHtcbiAgICAgICAgICAgICAgICAvLyAwX29cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZW1vdmUgZnJvbSBtYXBcbiAgICAgICAgICAgIC8vIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVJbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgICAgICAgICBpbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBkcmF3Vmlldyk7XG5cbiAgICAgICAgcmV0dXJuIGludGVyYWN0aW9uVmlldztcbiAgICAgIH07XG5cbiAgICAgIGRyYXdWaWV3ID0gc2VsZi5hZGRWaWV3KHtcbiAgICAgICAgbmFtZTogJ2RyYXc6JyArIG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHNbVFJJR0dFUl9EUkFXXSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50c1tUUklHR0VSX0RSQVddLFxuICAgICAgICAgIHdpdGhIZWFkbGluZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBzZWN0aW9uRWxlbWVudHM6IFtcbiAgICAgICAgICB7c2VjdGlvbjogc2VsZi5jb250ZW50Q29udGFpbmVyLCBlbGVtZW50OiBkcmF3Q29udGVudH0sXG4gICAgICAgICAge3NlY3Rpb246IHNlbGYudG9wVG9vbGJhciwgZWxlbWVudDogc2VsZi52aWV3VHJpZ2dlckJhcn1cbiAgICAgICAgXSxcbiAgICAgICAgaW5pdEZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgIHN0eWxlSWQsXG4gICAgICAgICAgICAgIG5lZWRlZFN0eWxlcyxcbiAgICAgICAgICAgICAgc29ydEFuZEFkZFN0eWxlcztcblxuICAgICAgICAgIC8vIFNob3cgbG9hZGluZyBhbmltYXRpb25cbiAgICAgICAgICBzZWxmLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgICAgbmVlZGVkU3R5bGVzID0gW107XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAVE9ET1xuICAgICAgICAgICAqIFtzb3J0QW5kQWRkU3R5bGVzIGRlc2NyaXB0aW9uXVxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBzb3J0QW5kQWRkU3R5bGVzID0gZnVuY3Rpb24gKGFyclN0eWxlSWRzKSB7XG4gICAgICAgICAgICB2YXIgaixcbiAgICAgICAgICAgICAgICBsb2NhdGlvblN0eWxlcyxcbiAgICAgICAgICAgICAgICBkcmF3SW50ZXJhY3Rpb24sXG4gICAgICAgICAgICAgICAgc3R5bGVJZHM7XG5cbiAgICAgICAgICAgIC8vIHByZXBhcmVcbiAgICAgICAgICAgIGxvY2F0aW9uU3R5bGVzID0gc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXM7XG4gICAgICAgICAgICBzdHlsZUlkcyA9IGFyclN0eWxlSWRzIHx8IG9wdGlvbnMuc3R5bGVJZHM7XG4gICAgICAgICAgICBpZiAoIXN0eWxlSWRzIHx8ICFsb2NhdGlvblN0eWxlcykge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNvcnRcbiAgICAgICAgICAgIHN0eWxlSWRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgICAgICAgICAgICAvL1RvRG8gY2hlY2tcbiAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uU3R5bGVzW2FdICYmIGxvY2F0aW9uU3R5bGVzW2JdICYmIGxvY2F0aW9uU3R5bGVzW2FdLmVkaXRvcikge1xuICAgICAgICAgICAgICAgIGlmICgoIWxvY2F0aW9uU3R5bGVzW2FdLmVkaXRvci5zb3J0ICYmICFsb2NhdGlvblN0eWxlc1tiXS5lZGl0b3Iuc29ydCkgfHwgKGxvY2F0aW9uU3R5bGVzW2FdLmVkaXRvci5zb3J0ID09PSBsb2NhdGlvblN0eWxlc1tiXS5lZGl0b3Iuc29ydCkpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghbG9jYXRpb25TdHlsZXNbYV0ubmFtZSB8fCAhbG9jYXRpb25TdHlsZXNbYl0ubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCFsb2NhdGlvblN0eWxlc1tiXS5uYW1lKSA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiAobG9jYXRpb25TdHlsZXNbYV0ubmFtZS50b0xvd2VyQ2FzZSgpID4gbG9jYXRpb25TdHlsZXNbYl0ubmFtZS50b0xvd2VyQ2FzZSgpKSA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFsb2NhdGlvblN0eWxlc1thXS5lZGl0b3Iuc29ydCB8fCAhbG9jYXRpb25TdHlsZXNbYl0uZWRpdG9yLnNvcnQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoIWxvY2F0aW9uU3R5bGVzW2JdLmVkaXRvci5zb3J0KSA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKGxvY2F0aW9uU3R5bGVzW2FdLmVkaXRvci5zb3J0ID4gbG9jYXRpb25TdHlsZXNbYl0uZWRpdG9yLnNvcnQpID8gMSA6IC0xO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTsgLy8gZW5kIHNvcnRcblxuICAgICAgICAgICAgLy8gY3JlYXRlXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgc3R5bGVJZHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgZHJhd0ludGVyYWN0aW9uID0gYWRkRHJhd1N0eWxlKHN0eWxlSWRzW2pdKTtcbiAgICAgICAgICAgICAgLy8gYWN0aXZhdGUgdGhlIGZpcnN0IGRyYXdTdHlsZVxuICAgICAgICAgICAgICBpZiAoaiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRyYXdJbnRlcmFjdGlvbi5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9OyAvLyBlbmQgb2YgXCJzb3J0QW5kQWRkU3R5bGVzXCJcblxuICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGFsbCBuZWVkZWQgc3R5bGVzIGFyZSBsb2FkZWRcbiAgICAgICAgICBpZiAoIXNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzKSB7XG4gICAgICAgICAgICAvLyBubyBzdHlsZXMgYXJlIGxvYWRlZCwgc28gbG9hZCBhbGwgc3R5bGVzXG4gICAgICAgICAgICBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlcyA9IHt9O1xuICAgICAgICAgICAgbmVlZGVkU3R5bGVzID0gb3B0aW9ucy5zdHlsZUlkcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY2hlY2sgd2ljaCBzdHlsZXMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBvcHRpb25zLnN0eWxlSWRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgIHN0eWxlSWQgPSBvcHRpb25zLnN0eWxlSWRzW2ldO1xuICAgICAgICAgICAgICBpZiAoIXNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdIHx8ICFzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzdHlsZUlkXS5zdHlsZSkge1xuICAgICAgICAgICAgICAgIG5lZWRlZFN0eWxlcy5wdXNoKHN0eWxlSWQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG5lZWRlZFN0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGYucHJveHkpIHtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgbG9hZCBsb2NTdHlsZXMsIGFzIHRoZSBtYXAtcHJveHkgd2FzIG5vdCBpbml0aWFsbGl6ZWQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhcbiAgICAgICAgICAgICAgICBuZWVkZWRTdHlsZXMsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgZG9uZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzb3J0QW5kQWRkU3R5bGVzKCk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgYWx3YXlzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhpZGUgbG9hZGluZy1hbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzb3J0QW5kQWRkU3R5bGVzKCk7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBkZWFjdGl2YXRlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkcmF3VmlldztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSWYgb3B0X3Nsb3QgaXMgZW1wdHksIHRoZSBmdW5jdGlvbiB3aWxsIGp1c3Qgc2F2ZSB0aGUgZGF0YSBpbiB0aGUgc2Vzc2lvblN0b3JhZ2UuXG4gICAgICogW3NhdmUgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7W3R5cGVdfSAgb3B0X3Nsb3QgIFtkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHNhdmU6IGZ1bmN0aW9uIChvcHRfc2xvdCkge1xuICAgICAgdmFyIGZvcm1hdCxcbiAgICAgICAgICBzYXZlRGF0YSxcbiAgICAgICAgICBzbG90TmFtZSxcbiAgICAgICAgICBzdG9yYWdlO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnR5cGUgPT09ICdiYWNrZW5kJykge1xuICAgICAgICByZXR1cm4gdGhpcy5leHBvcnRHZW9KU09OKCk7XG4gICAgICB9XG5cbiAgICAgIGZvcm1hdCA9IG5ldyBvbC5mb3JtYXQuR2VvSlNPTigpO1xuICAgICAgc2F2ZURhdGEgPSB7fTtcblxuICAgICAgc2F2ZURhdGEucG9pbnRzID0gZm9ybWF0LndyaXRlRmVhdHVyZXModGhpcy5lZGl0UG9pbnRMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpKTtcbiAgICAgIHNhdmVEYXRhLmxpbmVzID0gZm9ybWF0LndyaXRlRmVhdHVyZXModGhpcy5lZGl0TGluZUxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCkpO1xuICAgICAgc2F2ZURhdGEucG9seWdvbnMgPSBmb3JtYXQud3JpdGVGZWF0dXJlcyh0aGlzLmVkaXRQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG4gICAgICBzYXZlRGF0YS5jaXJjbGVzID0gZm9ybWF0LndyaXRlRmVhdHVyZXModGhpcy5lZGl0Q2lyY2xlTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG4gICAgICBzYXZlRGF0YS5mcmVlaGFuZCA9IGZvcm1hdC53cml0ZUZlYXR1cmVzKHRoaXMuZWRpdEZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG5cbiAgICAgIHNsb3ROYW1lID0gJ2M0Z01hcHNfJztcbiAgICAgIHNsb3ROYW1lICs9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEubWFwSWQ7XG4gICAgICBzbG90TmFtZSArPSAnXycgKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICBpZiAoIW9wdF9zbG90KSB7XG4gICAgICAgIHN0b3JhZ2UgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90TmFtZSArPSAnXycgKyBvcHRfc2xvdDtcbiAgICAgICAgc3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gICAgICB9XG4gICAgICAvLyBDYWxsIGhvb2sgZnVuY3Rpb25zIGJlZm9yZSBzYXZlXG4gICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9vblNhdmUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX29uU2F2ZSwgc2F2ZURhdGEpO1xuICAgICAgfVxuICAgICAgc3RvcmFnZS5zZXRJdGVtKHNsb3ROYW1lLCBKU09OLnN0cmluZ2lmeShzYXZlRGF0YSkpO1xuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIElmIG9wdF9zbG90IGlzIGVtcHR5LCB0aGUgZnVuY3Rpb24gd2lsbCBqdXN0IGxvYWQgdGhlIGRhdGEgZnJvbSB0aGUgc2Vzc2lvblN0b3JhZ2UuXG4gICAgICogW2xvYWQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7W3R5cGVdfSAgb3B0X3Nsb3QgIFtkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBsb2FkOiBmdW5jdGlvbiAob3B0X3Nsb3QpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIHNlbGYsXG4gICAgICAgICAgZm9ybWF0LFxuICAgICAgICAgIGxvYWREYXRhLFxuICAgICAgICAgIGZlYXR1cmVDb2xsZWN0aW9uLFxuICAgICAgICAgIHNsb3ROYW1lLFxuICAgICAgICAgIHN0b3JhZ2UsXG4gICAgICAgICAgbmVlZGVkU3R5bGVzLFxuICAgICAgICAgIHN0eWxlSWQsXG4gICAgICAgICAgaW1wb3J0RmVhdHVyZXM7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgZm9ybWF0ID0gbmV3IG9sLmZvcm1hdC5HZW9KU09OKCk7XG4gICAgICBzZWxmLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICBzbG90TmFtZSA9ICdjNGdNYXBzXyc7XG4gICAgICBzbG90TmFtZSArPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLm1hcElkO1xuICAgICAgc2xvdE5hbWUgKz0gJ18nICsgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgICAgaWYgKCFvcHRfc2xvdCkge1xuICAgICAgICBzdG9yYWdlID0gd2luZG93LnNlc3Npb25TdG9yYWdlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdE5hbWUgKz0gJ18nICsgb3B0X3Nsb3Q7XG4gICAgICAgIHN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgICAgfVxuICAgICAgbG9hZERhdGEgPSBzdG9yYWdlLmdldEl0ZW0oc2xvdE5hbWUpO1xuICAgICAgaWYgKCFsb2FkRGF0YSkge1xuICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBsb2FkRGF0YSA9IEpTT04ucGFyc2UobG9hZERhdGEpO1xuXG4gICAgICBmZWF0dXJlQ29sbGVjdGlvbiA9IFtdO1xuICAgICAgbmVlZGVkU3R5bGVzID0gW107XG5cbiAgICAgIGZlYXR1cmVDb2xsZWN0aW9uID0gZm9ybWF0LnJlYWRGZWF0dXJlcyhsb2FkRGF0YS5wb2ludHMpLmNvbmNhdChmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLmxpbmVzKSwgZm9ybWF0LnJlYWRGZWF0dXJlcyhsb2FkRGF0YS5wb2x5Z29ucyksIGZvcm1hdC5yZWFkRmVhdHVyZXMobG9hZERhdGEuY2lyY2xlcyksIGZvcm1hdC5yZWFkRmVhdHVyZXMobG9hZERhdGEuZnJlZWhhbmQpKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmZWF0dXJlQ29sbGVjdGlvbi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHlsZUlkID0gZmVhdHVyZUNvbGxlY3Rpb25baV0uZ2V0KCdzdHlsZUlkJyk7XG5cbiAgICAgICAgaWYgKCghc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0gfHwgIXNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKSAmJiAkLmluQXJyYXkoc3R5bGVJZCwgbmVlZGVkU3R5bGVzKSA9PT0gLTEpIHtcbiAgICAgICAgICBuZWVkZWRTdHlsZXMucHVzaChzdHlsZUlkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbXBvcnRGZWF0dXJlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5lZGl0UG9pbnRMYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLnBvaW50cykpO1xuICAgICAgICBzZWxmLmVkaXRMaW5lTGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZXMoZm9ybWF0LnJlYWRGZWF0dXJlcyhsb2FkRGF0YS5saW5lcykpO1xuICAgICAgICBzZWxmLmVkaXRQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZXMoZm9ybWF0LnJlYWRGZWF0dXJlcyhsb2FkRGF0YS5wb2x5Z29ucykpO1xuICAgICAgICBzZWxmLmVkaXRDaXJjbGVMYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLmNpcmNsZXMpKTtcbiAgICAgICAgc2VsZi5lZGl0RnJlZWhhbmRMYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhmb3JtYXQucmVhZEZlYXR1cmVzKGxvYWREYXRhLmZyZWVoYW5kKSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAobmVlZGVkU3R5bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKCFzZWxmLnByb3h5KSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgbG9hZCBsb2NTdHlsZXMsIGFzIHRoZSBtYXAtcHJveHkgd2FzIG5vdCBpbml0aWFsbGl6ZWQuJyk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIubG9hZExvY2F0aW9uU3R5bGVzKFxuICAgICAgICAgICAgbmVlZGVkU3R5bGVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaW1wb3J0RmVhdHVyZXMoKTtcbiAgICAgICAgICAgICAgICAvLyBDYWxsIGhvb2sgZnVuY3Rpb25zIG9uIGxvYWRcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9vbkxvYWQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLmVkaXRvcl9vbkxvYWQsIGxvYWREYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFsd2F5czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIEhpZGUgbG9hZGluZy1hbmltYXRpb25cbiAgICAgICAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbXBvcnRGZWF0dXJlcygpO1xuICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAvLyBDYWxsIGhvb2sgZnVuY3Rpb25zIG9uIGxvYWRcbiAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5lZGl0b3Jfb25Mb2FkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MuZWRpdG9yX29uTG9hZCwgbG9hZERhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgLy8gRW5kIG9mIFwibG9hZFwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2V4cG9ydCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgZXhwb3J0R2VvSlNPTjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGZvcm1hdCxcbiAgICAgICAgICBmZWF0dXJlcztcblxuICAgICAgZm9ybWF0ID0gbmV3IG9sLmZvcm1hdC5HZW9KU09OKCk7XG5cbiAgICAgIGZlYXR1cmVzID0gdGhpcy5lZGl0UG9pbnRMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICAgICAgZmVhdHVyZXMgPSBmZWF0dXJlcy5jb25jYXQodGhpcy5lZGl0TGluZUxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCkpO1xuICAgICAgZmVhdHVyZXMgPSBmZWF0dXJlcy5jb25jYXQodGhpcy5lZGl0UG9seWdvbkxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCkpO1xuICAgICAgZmVhdHVyZXMgPSBmZWF0dXJlcy5jb25jYXQodGhpcy5lZGl0Q2lyY2xlTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKSk7XG4gICAgICBmZWF0dXJlcyA9IGZlYXR1cmVzLmNvbmNhdCh0aGlzLmVkaXRGcmVlaGFuZExheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCkpO1xuXG4gICAgICBmZWF0dXJlcyA9IGZvcm1hdC53cml0ZUZlYXR1cmVzKGZlYXR1cmVzKTtcbiAgICAgIC8vIGZlYXR1cmVzID0gSlNPTi5zdHJpbmdpZnkoZmVhdHVyZXMpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnR5cGUgPT09ICdiYWNrZW5kJyAmJiB0aGlzLm9wdGlvbnMuZGF0YUZpZWxkKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5kYXRhRmllbGQudmFsKGZlYXR1cmVzKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmVhdHVyZXM7XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwiZXhwb3J0XCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbaW1wb3J0IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBpbXBvcnRHZW9KU09OOiBmdW5jdGlvbiAob3B0X2dlb2pzb24pIHtcbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIHN0eWxlSWQsXG4gICAgICAgICAgZm9ybWF0LFxuICAgICAgICAgIGZlYXR1cmVzLFxuICAgICAgICAgIHBvaW50cyxcbiAgICAgICAgICBmcmVlaGFuZCxcbiAgICAgICAgICBsaW5lcyxcbiAgICAgICAgICBwb2x5Z29ucyxcbiAgICAgICAgICBjaXJjbGVzLFxuICAgICAgICAgIG5lZWRlZFN0eWxlcyxcbiAgICAgICAgICBpbXBvcnRGZWF0dXJlcyxcbiAgICAgICAgICBpO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy50eXBlID09PSAnYmFja2VuZCcgJiYgdGhpcy5vcHRpb25zLmRhdGFGaWVsZCkge1xuICAgICAgICBmZWF0dXJlcyA9IHRoaXMub3B0aW9ucy5kYXRhRmllbGQudmFsKCk7XG4gICAgICB9IGVsc2UgaWYgKG9wdF9nZW9qc29uKSB7XG4gICAgICAgIGZlYXR1cmVzID0gb3B0X2dlb2pzb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghZmVhdHVyZXMpIHtcbiAgICAgICAgLy8gbm8gZmVhdHVyZXMgdG8gbG9hZFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIHRyeSB7XG4gICAgICAvLyAgIGZlYXR1cmVzID0gSlNPTi5wYXJzZShmZWF0dXJlcyk7XG4gICAgICAvLyB9IGNhdGNoIChpZ25vcmUpIHt9XG5cbiAgICAgIGZvcm1hdCA9IG5ldyBvbC5mb3JtYXQuR2VvSlNPTigpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZmVhdHVyZXMgPSBmb3JtYXQucmVhZEZlYXR1cmVzKGZlYXR1cmVzKTtcbiAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBsb2FkIGZlYXR1cmVzOiBJbnZhbGlkIEpTT04gc3RyaW5nLi4uJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgbmVlZGVkU3R5bGVzID0gW107XG4gICAgICBwb2ludHMgPSBbXTtcbiAgICAgIGZyZWVoYW5kID0gW107XG4gICAgICBsaW5lcyA9IFtdO1xuICAgICAgcG9seWdvbnMgPSBbXTtcbiAgICAgIGNpcmNsZXMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmZWF0dXJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHlsZUlkID0gZmVhdHVyZXNbaV0uZ2V0KCdzdHlsZUlkJykgfHwgZmVhdHVyZXNbaV0uZ2V0KCdsb2NzdHlsZScpIHx8IGZhbHNlO1xuXG4gICAgICAgIGlmIChmZWF0dXJlc1tpXSAmJiB0eXBlb2YgZmVhdHVyZXNbaV0uZ2V0R2VvbWV0cnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBpZiAoZmVhdHVyZXNbaV0uZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uUG9pbnQpIHtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKGZlYXR1cmVzW2ldKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmVzW2ldLmdldEdlb21ldHJ5KCkgaW5zdGFuY2VvZiBvbC5nZW9tLkxpbmVTdHJpbmcpIHtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlcy5vcHRpb25zICYmIGZlYXR1cmVzLm9wdGlvbnMudHlwZSAmJiBmZWF0dXJlcy5vcHRpb25zLnR5cGUudG9Mb3dlckNhc2UoKSA9PSAnZnJlZWhhbmQnKSB7XG4gICAgICAgICAgICAgICAgZnJlZWhhbmQucHVzaChmZWF0dXJlc1tpXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goZmVhdHVyZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZmVhdHVyZXNbaV0uZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbikge1xuICAgICAgICAgICAgcG9seWdvbnMucHVzaChmZWF0dXJlc1tpXSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlc1tpXS5nZXRHZW9tZXRyeSgpIGluc3RhbmNlb2Ygb2wuZ2VvbS5DaXJjbGUpIHtcbiAgICAgICAgICAgIGNpcmNsZXMucHVzaChmZWF0dXJlc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IGxvYWQgZmVhdHVyZSB3aXRob3V0IGdlb21ldHJ5LicpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHlsZUlkICYmICghc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0gfHwgIXNlbGYucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3N0eWxlSWRdLnN0eWxlKSAmJiAkLmluQXJyYXkoc3R5bGVJZCwgbmVlZGVkU3R5bGVzKSA9PT0gLTEpIHtcbiAgICAgICAgICBuZWVkZWRTdHlsZXMucHVzaChzdHlsZUlkKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIGltcG9ydEZlYXR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLmVkaXRQb2ludExheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKHBvaW50cyk7XG4gICAgICAgIHNlbGYuZWRpdExpbmVMYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhsaW5lcyk7XG4gICAgICAgIHNlbGYuZWRpdFBvbHlnb25MYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhwb2x5Z29ucyk7XG4gICAgICAgIHNlbGYuZWRpdENpcmNsZUxheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGNpcmNsZXMpO1xuICAgICAgICBzZWxmLmVkaXRGcmVlaGFuZExheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGZyZWVoYW5kKTtcbiAgICAgICAgdXRpbHMuZml0VG9FeHRlbnQoXG4gICAgICAgICAgICB1dGlscy5nZXRFeHRlbnRGb3JHZW9tZXRyaWVzKHBvaW50cy5jb25jYXQobGluZXMsIHBvbHlnb25zLCBjaXJjbGVzLCBmcmVlaGFuZCkpLFxuICAgICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLFxuICAgICAgICAgICAgWzI1LCAyNSwgMjUsIHNlbGYuY29udGFpbmVyLm9mZnNldFdpZHRoICsgMjVdLFxuICAgICAgICAgICAgMTAwMFxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5zcGlubmVyLnNob3coKTtcbiAgICAgIGlmIChuZWVkZWRTdHlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoIXNlbGYucHJveHkpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBsb2FkIGxvY1N0eWxlcywgYXMgdGhlIG1hcC1wcm94eSB3YXMgbm90IGluaXRpYWxsaXplZC4nKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMoXG4gICAgICAgICAgICBuZWVkZWRTdHlsZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbXBvcnRGZWF0dXJlcygpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBhbHdheXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBIaWRlIGxvYWRpbmctYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW1wb3J0RmVhdHVyZXMoKTtcbiAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgIH1cblxuICAgIH0gLy8gZW5kIG9mIFwiaW1wb3J0XCJcblxuICB9KTtcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgRWRpdG9yID0gdGhpcy5jNGcubWFwcy5jb250cm9sLkVkaXRvcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtcG9ydHNpZGUtZWRpdG9yLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzR2VybWFufSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge1NpZGVib2FyZH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1zaWRlYm9hcmRcIjtcblxubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9IGVsc2UgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJlblwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNFbmdsaXNoO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrXG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH1cbn1cblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAZXh0ZW5kcyB7YzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmR9XG4gICAqXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gIG1hcENvbnRyb2xsZXIgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICB7W3R5cGVdfSAgY29uZmlnICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5JbmZvcGFnZSA9IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuXG4gICAgLy8gZXh0ZW5kIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5JTkZPUEFHRSxcbiAgICAgIG5hbWU6ICdpbmZvcGFnZScsXG4gICAgICBoZWFkbGluZTogbGFuZ0NvbnN0YW50cy5JTkZPUEFHRSxcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgIGRpcmVjdGlvbjogJ2xlZnQnXG4gICAgfSwgb3B0X29wdGlvbnMpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMubWFpblNlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIC8vIGNhbGwgcGFyZW50IGNvbnN0cnVjdG9yXG4gICAgU2lkZWJvYXJkLmNhbGwodGhpcywgdGhpcy5vcHRpb25zKTtcbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5JbmZvcGFnZSwgU2lkZWJvYXJkKTtcblxuICAvKipcbiAgICogTWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5JbmZvcGFnZS5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLkluZm9wYWdlLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZWQgd2hlbiB0aGUgcGFuZWwgd2lsbCBiZSBvcGVuZWQgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICAgICAqIFtpbml0IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICBSZXR1cm5zIHx0cnVlfCBvbiBzdWNjZXNzXG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgLy92YXIgaW5mb0J1dHRvbjtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgdGhpcy5zcGlubmVyLnNob3coKTtcblxuICAgICAgdGhpcy52aWV3SW5mb3BhZ2UgPSB0aGlzLmFkZEluZm9WaWV3KCk7XG4gICAgICB0aGlzLnZpZXdJbmZvcGFnZS5hY3RpdmF0ZSgpO1xuXG4gICAgICB2YXIgcHJveHkgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eTtcbiAgICAgIHZhciBtYXAgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXA7XG5cbiAgICAgIHRoaXMubWFpblNlY3Rpb25JbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgdGhpcy5tYWluU2VjdGlvbkluZm8uaW5uZXJIVE1MID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5pbmZvcGFnZTtcbiAgICAgIHRoaXMubWFpblNlY3Rpb24uYXBwZW5kQ2hpbGQodGhpcy5tYWluU2VjdGlvbkluZm8pO1xuICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLnNldEVsZW1lbnQodGhpcy5tYWluU2VjdGlvbik7XG5cbiAgICAgIHRoaXMuc3Bpbm5lci5oaWRlKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LCAvLyBlbmQgb2YgXCJpbml0KClcIlxuXG5cbiAgICBhZGRJbmZvVmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGluZm9WaWV3O1xuXG4gICAgICAgIGluZm9WaWV3ID0gdGhpcy5hZGRWaWV3KHtcbiAgICAgICAgbmFtZTogJ2luZm8nLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuSU5GT1BBR0VfVklFV19UUklHR0VSLFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLklORk9QQUdFX1ZJRVdfVFJJR0dFUixcbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiB0aGlzLmNvbnRlbnRDb250YWluZXIsIGVsZW1lbnQ6IHRoaXMubWFpblNlY3Rpb259LFxuICAgICAgICAgIHtzZWN0aW9uOiB0aGlzLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHRoaXMudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gaW5mb1ZpZXc7XG4gICAgfSwgLy8gZW5kIG9mIFwiYWRkSW5mb1ZpZXcoKVwiXG5cbiAgICBhZGRJbmZvcGFnZTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIFRSSUdHRVJfSU5GT1BBR0UsXG4gICAgICAgICAgdmlld0luZm9wYWdlLFxuICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICBpbnRlcmFjdGlvbixcbiAgICAgICAgICBmZWF0dXJlcztcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vVFJJR0dFUl9JTkZPUEFHRSA9ICdJTkZPUEFHRV9WSUVXX1RSSUdHRVJfJyArIG9wdGlvbnMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICB2aWV3SW5mb3BhZ2UgPSBzZWxmLmFkZEluZm9wYWdlKHtcbiAgICAgICAgbmFtZTogJ0luZm9wYWdlJyxcbiAgICAgICAgdHJpZ2dlckNvbmZpZzoge1xuICAgICAgICAgIHRpcExhYmVsOiAnSW5mb3BhZ2UnLC8vbGFuZ0NvbnN0YW50c1tUUklHR0VSX0RSQVddLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ2M0Z19pbmZvcGFnZV90cmlnZ2VyJywvL2Nzc0NvbnN0YW50c1tUUklHR0VSX0RSQVddXG4gICAgICAgICAgd2l0aEhlYWRsaW5lOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBzZWN0aW9uRWxlbWVudHM6IFtcbiAgICAgICAgICB7c2VjdGlvbjogc2VsZi50b3BUb29sYmFyLCBlbGVtZW50OiBzZWxmLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICBdLFxuICAgICAgICBpbml0RnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgIC8vIFNob3cgbG9hZGluZyBhbmltYXRpb25cbiAgICAgICAgICBzZWxmLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgICAgLy8gcHJpbnRGdW5jdGlvbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIC8vICAgdmFyIGluZm9CdXR0b24sXG4gICAgICAgICAgLy8gICAgICAgZmVhdHVyZUdlb21ldHJ5LFxuICAgICAgICAgIC8vICAgICAgIHRyYW5zbGF0ZUludGVyYWN0aW9uLFxuICAgICAgICAgIC8vICAgICAgIG1vZGlmeUludGVyYWN0aW9uLFxuICAgICAgICAgIC8vICAgICAgIG1vZGlmeUJ1dHRvbixcbiAgICAgICAgICAvLyAgICAgICBhcHBseUJ1dHRvbjtcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gICAgIGluZm9CdXR0b24gPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyAgIC8vIGFkZCBhcHBseSBidXR0b25cbiAgICAgICAgICAvLyAgIGFwcGx5QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgLy8gICBhcHBseUJ1dHRvbi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuSUNPTiArICcgJyArIGNzc0NvbnN0YW50cy5FRElUT1JfRkVBVFVSRV9BUFBMWTtcbiAgICAgICAgICAvLyAgIGFwcGx5QnV0dG9uLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5FRElUT1JfRkVBVFVSRV9BUFBMWTtcbiAgICAgICAgICAvLyAgIGFwcGx5QnV0dG9uLnNldEF0dHJpYnV0ZSgnZmVhdF9pZCcsIGkpO1xuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gfTsgLy8gZW5kIG9mIFwibW9kaWZ5RmVhdHVyZUZ1bmN0aW9uKClcIlxuXG4gICAgICAgICAgZmVhdHVyZXMgPSBuZXcgb2wuQ29sbGVjdGlvbigpO1xuXG4gICAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB9LFxuICAgICAgICBkZWFjdGl2YXRlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB2aWV3SW5mb3BhZ2U7XG4gICAgfSAvLyBlbmQgb2YgXCJhZGRJbmZvcGFnZSgpXCJcblxuICB9KTtcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgSW5mb3BhZ2UgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuSW5mb3BhZ2U7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXBvcnRzaWRlLWluZm9wYWdlLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzR2VybWFufSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNFbmdsaXNofSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWVuXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtTaWRlYm9hcmR9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc2lkZWJvYXJkXCI7XG5pbXBvcnQge1Rvb2x0aXBQb3BVcH0gZnJvbSBcIi4vYzRnLW1hcHMtbWlzYy10b29sdGlwcG9wdXBcIjtcbmxldCBsYW5nQ29uc3RhbnRzID0ge307XG5cbmlmICh0eXBlb2YgbWFwRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBpZiAobWFwRGF0YS5sYW5nID09PSBcImRlXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfSBlbHNlIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzRW5nbGlzaDtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9XG59XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmQge2M0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkfVxuICAgKlxuICAgKiBAcGFyYW0gIHtbdHlwZV19ICBtYXBDb250cm9sbGVyICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLk1lYXN1cmV0b29scyA9IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuXG4gICAgLy8gZXh0ZW5kIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBuYW1lOiAnbWVhc3VyZScsXG4gICAgICBoZWFkbGluZTogbGFuZ0NvbnN0YW50cy5NRUFTVVJFVE9PTFMsXG4gICAgICBjcmVhdGU6IHRydWUsXG4gICAgICBtYXBDb250cm9sbGVyOiB1bmRlZmluZWQsXG4gICAgICBkaXJlY3Rpb246ICdsZWZ0JyxcbiAgICAgIGZpcnN0RWxlbWVudDogdHJ1ZVxuICAgIH0sIG9wdF9vcHRpb25zKTtcblxuICAgIHRoaXMubWFpblNlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIC8vIGNhbGwgcGFyZW50IGNvbnN0cnVjdG9yXG4gICAgU2lkZWJvYXJkLmNhbGwodGhpcywgdGhpcy5vcHRpb25zKTtcbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5NZWFzdXJldG9vbHMsIFNpZGVib2FyZCk7XG5cbiAgLyoqXG4gICAqIE1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuTWVhc3VyZXRvb2xzLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuTWVhc3VyZXRvb2xzLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZWQgd2hlbiB0aGUgcGFuZWwgd2lsbCBiZSBvcGVuZWQgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICAgICAqIFtpbml0IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICBSZXR1cm5zIHx0cnVlfCBvbiBzdWNjZXNzXG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuXG4gICAgICB0aGlzLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAvLyBBZGQgbWVhc3VyZSBsYXllcnNcbiAgICAgIHRoaXMubWVhc3VyZUxpbmVMYXllciA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe3NvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3IoKX0pO1xuICAgICAgdGhpcy5tZWFzdXJlUG9seWdvbkxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7c291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpfSk7XG4gICAgICB0aGlzLm1lYXN1cmVDaXJjbGVMYXllciA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe3NvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3IoKX0pO1xuICAgICAgdGhpcy5tZWFzdXJlRnJlZWhhbmRMYXllciA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe3NvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3IoKX0pO1xuXG4gICAgICB0aGlzLm1lYXN1cmVMYXllckdyb3VwID0gbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgbGF5ZXJzOiBuZXcgb2wuQ29sbGVjdGlvbihbXG4gICAgICAgICAgdGhpcy5tZWFzdXJlRnJlZWhhbmRMYXllcixcbiAgICAgICAgICB0aGlzLm1lYXN1cmVDaXJjbGVMYXllcixcbiAgICAgICAgICB0aGlzLm1lYXN1cmVQb2x5Z29uTGF5ZXIsXG4gICAgICAgICAgdGhpcy5tZWFzdXJlTGluZUxheWVyLFxuICAgICAgICBdKSxcbiAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIodGhpcy5tZWFzdXJlTGF5ZXJHcm91cCk7XG5cbiAgICAgIC8vIEFkZCBhbmQgYWN0aXZhdGUgbWVhc3VyZS1WaWV3c1xuICAgICAgdGhpcy52aWV3TWVhc3VyZVNlbGVjdCA9IHRoaXMuYWRkU2VsZWN0VmlldygpO1xuICAgICAgdGhpcy52aWV3TWVhc3VyZVNlbGVjdC5hY3RpdmF0ZSgpO1xuICAgICAgdGhpcy52aWV3TWVhc3VyZUxpbmUgPSB0aGlzLmFkZE1lYXN1cmVWaWV3KHt0eXBlOiAnTGluZVN0cmluZyd9KTtcbiAgICAgIHRoaXMudmlld01lYXN1cmVBcmVhID0gdGhpcy5hZGRNZWFzdXJlVmlldyh7dHlwZTogJ1BvbHlnb24nfSk7XG4gICAgICB0aGlzLnZpZXdNZWFzdXJlUmFkaXVzID0gdGhpcy5hZGRNZWFzdXJlVmlldyh7dHlwZTogJ0NpcmNsZSd9KTtcbiAgICAgIHRoaXMudmlld01lYXN1cmVGcmVlaGFuZCA9IHRoaXMuYWRkTWVhc3VyZVZpZXcoe3R5cGU6ICdGcmVlaGFuZCd9KTtcblxuICAgICAgLy8gc2V0IGNvbnRlbnQtc2VjdGlvblxuICAgICAgdGhpcy5tYWluU2VjdGlvbkluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICB0aGlzLm1haW5TZWN0aW9uSW5mby5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLk1FQVNVUkVUT09MU19JTkZPO1xuICAgICAgdGhpcy5tYWluU2VjdGlvbkluZm8uaW5uZXJIVE1MICs9ICc8YnI+PGJyPjxzdWI+JyArIGxhbmdDb25zdGFudHMuTUVBU1VSRVRPT0xTX0lORk9fQURESVRJT05BTCArICc8c3ViPic7XG4gICAgICB0aGlzLm1haW5TZWN0aW9uLmFwcGVuZENoaWxkKHRoaXMubWFpblNlY3Rpb25JbmZvKTtcbiAgICAgIHRoaXMuY29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLm1haW5TZWN0aW9uKTtcblxuICAgICAgdGhpcy5zcGlubmVyLmhpZGUoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sIC8vIGVuZCBvZiBcImluaXQoKVwiXG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlZCBiZWZvcmUgcGFuZWwgd2lsbCBiZSBjbG9zZWRcbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcHJlQ2xvc2VGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGxpbmVGZWF0dXJlcyxcbiAgICAgICAgICBwb2x5Z29uRmVhdHVyZXMsXG4gICAgICAgICAgY2lyY2xlRmVhdHVyZXMsXG4gICAgICAgICAgZnJlZWhhbmRGZWF0dXJlcyxcbiAgICAgICAgICBpO1xuXG4gICAgICBpZiAodGhpcy5tZWFzdXJlTGF5ZXJHcm91cC5nZXRWaXNpYmxlKCkpIHtcbiAgICAgICAgdGhpcy5tZWFzdXJlTGF5ZXJHcm91cC5zZXRWaXNpYmxlKGZhbHNlKTtcblxuICAgICAgICAvLyBoaWRlIGxpbmUtZmVhdHVyZSB0b29sdGlwc1xuICAgICAgICBsaW5lRmVhdHVyZXMgPSB0aGlzLm1lYXN1cmVMaW5lTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpbmVGZWF0dXJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGxpbmVGZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGlkZSBwb2x5Z29uLWZlYXR1cmUgdG9vbHRpcHNcbiAgICAgICAgcG9seWdvbkZlYXR1cmVzID0gdGhpcy5tZWFzdXJlUG9seWdvbkxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwb2x5Z29uRmVhdHVyZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBwb2x5Z29uRmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJykuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGhpZGUgY2lyY2xlLWZlYXR1cmUgdG9vbHRpcHNcbiAgICAgICAgY2lyY2xlRmVhdHVyZXMgPSB0aGlzLm1lYXN1cmVDaXJjbGVMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2lyY2xlRmVhdHVyZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNpcmNsZUZlYXR1cmVzW2ldLmdldCgndG9vbHRpcCcpLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBoaWRlIGZyZWVoYW5kLWZlYXR1cmUgdG9vbHRpcHNcbiAgICAgICAgZnJlZWhhbmRGZWF0dXJlcyA9IHRoaXMubWVhc3VyZUZyZWVoYW5kTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGZyZWVoYW5kRmVhdHVyZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGZyZWVoYW5kRmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJykuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwicHJlQ2xvc2VGdW5jdGlvbigpXCJcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVkIGJlZm9yZSBwYW5lbCB3aWxsIGJlIG9wZW5lZFxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBwcmVPcGVuRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBsaW5lRmVhdHVyZXMsXG4gICAgICAgICAgcG9seWdvbkZlYXR1cmVzLFxuICAgICAgICAgIGNpcmNsZUZlYXR1cmVzLFxuICAgICAgICAgIGZyZWVoYW5kRmVhdHVyZXMsXG4gICAgICAgICAgaTtcblxuICAgICAgaWYgKCF0aGlzLm1lYXN1cmVMYXllckdyb3VwLmdldFZpc2libGUoKSkge1xuICAgICAgICB0aGlzLm1lYXN1cmVMYXllckdyb3VwLnNldFZpc2libGUodHJ1ZSk7XG5cbiAgICAgICAgLy8gc2hvdyBsaW5lLWZlYXR1cmUgdG9vbHRpcHNcbiAgICAgICAgbGluZUZlYXR1cmVzID0gdGhpcy5tZWFzdXJlTGluZUxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaW5lRmVhdHVyZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBsaW5lRmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJykuc2hvdygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNob3cgcG9seWdvbi1mZWF0dXJlIHRvb2x0aXBzXG4gICAgICAgIHBvbHlnb25GZWF0dXJlcyA9IHRoaXMubWVhc3VyZVBvbHlnb25MYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcG9seWdvbkZlYXR1cmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgcG9seWdvbkZlYXR1cmVzW2ldLmdldCgndG9vbHRpcCcpLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzaG93IGNpcmNsZS1mZWF0dXJlIHRvb2x0aXBzXG4gICAgICAgIGNpcmNsZUZlYXR1cmVzID0gdGhpcy5tZWFzdXJlQ2lyY2xlTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNpcmNsZUZlYXR1cmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjaXJjbGVGZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKS5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2hvdyBmcmVlaGFuZC1mZWF0dXJlIHRvb2x0aXBzXG4gICAgICAgIGZyZWVoYW5kRmVhdHVyZXMgPSB0aGlzLm1lYXN1cmVGcmVlaGFuZExheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBmcmVlaGFuZEZlYXR1cmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBmcmVlaGFuZEZlYXR1cmVzW2ldLmdldCgndG9vbHRpcCcpLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIC8vIGVuZCBvZiBcInByZU9wZW5GdW5jdGlvbigpXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbYWRkU2VsZWN0VmlldyBkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhZGRTZWxlY3RWaWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZWN0VmlldztcblxuICAgICAgc2VsZWN0VmlldyA9IHRoaXMuYWRkVmlldyh7XG4gICAgICAgIG5hbWU6ICdzZWxlY3QnLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9TRUxFQ1QsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9TRUxFQ1QsXG4gICAgICAgICAgd2l0aEhlYWRsaW5lOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiB0aGlzLmNvbnRlbnRDb250YWluZXIsIGVsZW1lbnQ6IHRoaXMubWFpblNlY3Rpb259LFxuICAgICAgICAgIHtzZWN0aW9uOiB0aGlzLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHRoaXMudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2VsZWN0VmlldztcbiAgICB9LCAvLyBlbmQgb2YgXCJhZGRTZWxlY3RWaWV3KClcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthZGRNZWFzdXJlVmlldyBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIG9wdGlvbnMgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhZGRNZWFzdXJlVmlldzogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIFRSSUdHRVJfRFJBVyxcbiAgICAgICAgICBtZWFzdXJlVmlldyxcbiAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgaW50ZXJhY3Rpb24sXG4gICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgb2xUeXBlO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgdHlwZTogJ0xpbmVTdHJpbmcnXG4gICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgVFJJR0dFUl9EUkFXID0gJ01FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV18nICsgb3B0aW9ucy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIG1lYXN1cmVWaWV3ID0gc2VsZi5hZGRWaWV3KHtcbiAgICAgICAgbmFtZTogJ2RyYXc6JyArIG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB7XG4gICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHNbVFJJR0dFUl9EUkFXXSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50c1tUUklHR0VSX0RSQVddLFxuICAgICAgICAgIHdpdGhIZWFkbGluZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBzZWN0aW9uRWxlbWVudHM6IFtcbiAgICAgICAgICB7c2VjdGlvbjogc2VsZi50b3BUb29sYmFyLCBlbGVtZW50OiBzZWxmLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICBdLFxuICAgICAgICBpbml0RnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZmVhdHVyZUlkQ291bnQsXG4gICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaCxcbiAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcCxcbiAgICAgICAgICAgICAgYWRkTWVhc3VyZUZlYXR1cmUsXG4gICAgICAgICAgICAgIHVwZGF0ZU1lYXN1cmVGZWF0dXJlLFxuICAgICAgICAgICAgICBnZXRWYWx1ZU9mR2VvbWV0cnksXG4gICAgICAgICAgICAgIGdldExlbmd0aE9mTWVhc3VyZSxcbiAgICAgICAgICAgICAgcmVtb3ZlTWVhc3VyZUZlYXR1cmU7XG5cbiAgICAgICAgICAvLyBTaG93IGxvYWRpbmcgYW5pbWF0aW9uXG4gICAgICAgICAgc2VsZi5zcGlubmVyLnNob3coKTtcblxuICAgICAgICAgIGZlYXR1cmVJZENvdW50ID0gMTtcblxuICAgICAgICAgIGlmIChvcHRpb25zLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2ZyZWVoYW5kJykge1xuICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLm1lYXN1cmVGcmVlaGFuZExheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdjaXJjbGUnKSB7XG4gICAgICAgICAgICAgIHNvdXJjZSA9IHNlbGYubWVhc3VyZUNpcmNsZUxheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdwb2x5Z29uJykge1xuICAgICAgICAgICAgICBzb3VyY2UgPSBzZWxmLm1lYXN1cmVQb2x5Z29uTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc291cmNlID0gc2VsZi5tZWFzdXJlTGluZUxheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZlYXR1cmVzID0gbmV3IG9sLkNvbGxlY3Rpb24oKTtcblxuICAgICAgICAgIG9sVHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICAgICAgICBpZiAob2xUeXBlID09ICdGcmVlaGFuZCcpIHtcbiAgICAgICAgICAgICAgb2xUeXBlID0gJ0xpbmVTdHJpbmcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbnRlcmFjdGlvbiA9IG5ldyBvbC5pbnRlcmFjdGlvbi5EcmF3KHtcbiAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlcyxcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgdHlwZTogb2xUeXBlLFxuICAgICAgICAgICAgZnJlZWhhbmQ6IG9wdGlvbnMudHlwZSA9PSAnRnJlZWhhbmQnLFxuICAgICAgICAgICAgLy8gQFRPRE86IHVzZSBjdXN0b20gc3R5bGU/IChCRS1vcHRpb24pXG4gICAgICAgICAgICAvLyBzdHlsZTogdXNlIGRlZmF1bHQgc3R5bGVcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGFkZE1lYXN1cmVGZWF0dXJlID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgIHZhciBsaXN0RWxlbWVudCxcbiAgICAgICAgICAgICAgICBoZWFkbGluZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgbGFiZWxFbGVtZW50LFxuICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudCxcbiAgICAgICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LFxuICAgICAgICAgICAgICAgIHN0cm9uZ0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgc3BhbkVsZW1lbnQsXG4gICAgICAgICAgICAgICAgc3RyTGFiZWwsXG4gICAgICAgICAgICAgICAgc3RyVHlwZSxcbiAgICAgICAgICAgICAgICBtZWFzdXJlQXJlYSxcbiAgICAgICAgICAgICAgICBtZWFzdXJlUmFkaXVzO1xuXG4gICAgICAgICAgICBpZiAoIWZlYXR1cmUgaW5zdGFuY2VvZiBvbC5GZWF0dXJlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGluZm9tZXNzYWdlIG5lZWRzIHRvIGJlIHJlbW92ZWRcbiAgICAgICAgICAgIGlmIChzZWxmLm1haW5TZWN0aW9uLmNoaWxkRWxlbWVudENvdW50ID09PSAxICYmIHNlbGYubWFpblNlY3Rpb24uY2hpbGRyZW5bMF0gPT09IHNlbGYubWFpblNlY3Rpb25JbmZvKSB7XG4gICAgICAgICAgICAgIHNlbGYubWFpblNlY3Rpb24ucmVtb3ZlQ2hpbGQoc2VsZi5tYWluU2VjdGlvbkluZm8pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjaGVjayBmZWF0dXJlLXR5cGVcbiAgICAgICAgICAgIGlmIChmZWF0dXJlLmdldEdlb21ldHJ5KCkgaW5zdGFuY2VvZiBvbC5nZW9tLkxpbmVTdHJpbmcpIHtcbiAgICAgICAgICAgICAgc3RyTGFiZWwgPSBsYW5nQ29uc3RhbnRzLkxFTkdUSDtcbiAgICAgICAgICAgICAgc3RyVHlwZSA9IGxhbmdDb25zdGFudHMuTElORTtcbiAgICAgICAgICAgICAgbWVhc3VyZUFyZWEgPSBmYWxzZTtcbiAgICAgICAgICAgICAgbWVhc3VyZVJhZGl1cyA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlLmdldEdlb21ldHJ5KCkgaW5zdGFuY2VvZiBvbC5nZW9tLlBvbHlnb24pIHtcbiAgICAgICAgICAgICAgc3RyTGFiZWwgPSBsYW5nQ29uc3RhbnRzLlBFUklNRVRFUjtcbiAgICAgICAgICAgICAgc3RyVHlwZSA9IGxhbmdDb25zdGFudHMuUE9MWUdPTjtcbiAgICAgICAgICAgICAgbWVhc3VyZUFyZWEgPSB0cnVlO1xuICAgICAgICAgICAgICBtZWFzdXJlUmFkaXVzID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uQ2lyY2xlKSB7XG4gICAgICAgICAgICAgIHN0ckxhYmVsID0gbGFuZ0NvbnN0YW50cy5SQURJVVM7XG4gICAgICAgICAgICAgIHN0clR5cGUgPSBsYW5nQ29uc3RhbnRzLkNJUkNMRTtcbiAgICAgICAgICAgICAgbWVhc3VyZUFyZWEgPSB0cnVlO1xuICAgICAgICAgICAgICBtZWFzdXJlUmFkaXVzID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vZnJlZWhhbmQgaXN0IExpbmVTdHJpbmcgdG9vXG4gICAgICAgICAgICAgIHN0ckxhYmVsID0gbGFuZ0NvbnN0YW50cy5MRU5HVEg7XG4gICAgICAgICAgICAgIHN0clR5cGUgPSBsYW5nQ29uc3RhbnRzLkZSRUVIQU5EO1xuICAgICAgICAgICAgICBtZWFzdXJlQXJlYSA9IGZhbHNlO1xuICAgICAgICAgICAgICBtZWFzdXJlUmFkaXVzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBsaXN0IGVsZW1lbnRcbiAgICAgICAgICAgIGxpc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbmQgYXBwZW5kIGhlYWRsaW5lXG4gICAgICAgICAgICBoZWFkbGluZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudC5jbGFzc05hbWUgPSAnYzRnX21hcHNfcG9ydHNpZGVfbWVhc3VyZV9lbGVtZW50JztcbiAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMuZmlyc3RFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaGVhZGxpbmVFbGVtZW50LmNsYXNzTmFtZSA9ICdjNGdfbWFwc19wb3J0c2lkZV9tZWFzdXJlX2VsZW1lbnQgYzRnX21hcHNfcG9ydHNpZGVfbWVhc3VyZV9lbGVtZW50X2ZpcnN0JztcbiAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMuZmlyc3RFbGVtZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0RWxlbWVudC5hcHBlbmRDaGlsZChoZWFkbGluZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICAvLyBjcmVhdGUgYW5kIGFwcGVuZCBsYWJlbCBmb3IgbmFtZS1pbnB1dGZpZWxkXG4gICAgICAgICAgICBsYWJlbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICAgICAgbGFiZWxFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9yJywgJ21lYXN1cmVFbGVtZW50XycgKyBmZWF0dXJlSWRDb3VudCk7XG4gICAgICAgICAgICBsYWJlbEVsZW1lbnQuaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5OQU1FICsgJzogJztcbiAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudC5hcHBlbmRDaGlsZChsYWJlbEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAvLyBjcmVhdGUgYW5kIGFwcGVuZCBuYW1lLWlucHV0ZmllbGRcbiAgICAgICAgICAgIGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgICAgIGlucHV0RWxlbWVudC5uYW1lID0gJ21lYXN1cmVFbGVtZW50XycgKyBmZWF0dXJlSWRDb3VudDtcbiAgICAgICAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9IHN0clR5cGUgKyAnICcgKyBmZWF0dXJlSWRDb3VudDtcbiAgICAgICAgICAgIC8vIGF0dGFjaC1jaGFuZ2UtaGFuZGxlclxuICAgICAgICAgICAgJChpbnB1dEVsZW1lbnQpLmNoYW5nZShmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdXBkYXRlTWVhc3VyZUZlYXR1cmUoZmVhdHVyZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGhlYWRsaW5lRWxlbWVudC5hcHBlbmRDaGlsZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2xpc3RFbGVtZW50VmFsdWVOYW1lJywgaW5wdXRFbGVtZW50KTtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIGFuZCBhcHBlbmQgcGFyYWdyYXBoc1xuICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQuY2xhc3NOYW1lID0gJ2M0Z19tYXBzX3BvcnRzaWRlX21lYXN1cmVfcGFyYWdyYXBoJztcbiAgICAgICAgICAgIHN0cm9uZ0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHJvbmcnKTtcbiAgICAgICAgICAgIHN0cm9uZ0VsZW1lbnQuaW5uZXJIVE1MID0gc3RyTGFiZWwgKyAnOiAnO1xuICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5hcHBlbmRDaGlsZChzdHJvbmdFbGVtZW50KTtcbiAgICAgICAgICAgIHNwYW5FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgc3BhbkVsZW1lbnQuaW5uZXJIVE1MID0gJy4uLic7XG4gICAgICAgICAgICBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKHNwYW5FbGVtZW50KTtcbiAgICAgICAgICAgIGxpc3RFbGVtZW50LmFwcGVuZENoaWxkKHBhcmFncmFwaEVsZW1lbnQpO1xuICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2xpc3RFbGVtZW50VmFsdWVMaW5lJywgc3BhbkVsZW1lbnQpO1xuXG4gICAgICAgICAgICBpZiAobWVhc3VyZUFyZWEpIHtcbiAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5jbGFzc05hbWUgPSAnYzRnX21hcHNfcG9ydHNpZGVfbWVhc3VyZV9wYXJhZ3JhcGhfc3VyZmFjZWFyZWEnO1xuICAgICAgICAgICAgICBzdHJvbmdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3Ryb25nJyk7XG4gICAgICAgICAgICAgIHN0cm9uZ0VsZW1lbnQuaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5TVVJGQUNFQVJFQSArICc6ICc7XG4gICAgICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQuYXBwZW5kQ2hpbGQoc3Ryb25nRWxlbWVudCk7XG4gICAgICAgICAgICAgIHNwYW5FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICBzcGFuRWxlbWVudC5pbm5lckhUTUwgPSAnLi4uJztcbiAgICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5hcHBlbmRDaGlsZChzcGFuRWxlbWVudCk7XG4gICAgICAgICAgICAgIGxpc3RFbGVtZW50LmFwcGVuZENoaWxkKHBhcmFncmFwaEVsZW1lbnQpO1xuICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbGlzdEVsZW1lbnRWYWx1ZUFyZWEnLCBzcGFuRWxlbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtZWFzdXJlUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgLy8gcGFyYWdyYXBoRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgICAvLyBwYXJhZ3JhcGhFbGVtZW50LmNsYXNzTmFtZSA9ICdjNGdfbWFwc19wb3J0c2lkZV9tZWFzdXJlX3BhcmFncmFwaF9zdXJmYWNlYXJlYSc7XG4gICAgICAgICAgICAgICAgLy8gc3Ryb25nRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0cm9uZycpO1xuICAgICAgICAgICAgICAgIC8vIHN0cm9uZ0VsZW1lbnQuaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5TVVJGQUNFQVJFQSArICc6ICc7XG4gICAgICAgICAgICAgICAgLy8gcGFyYWdyYXBoRWxlbWVudC5hcHBlbmRDaGlsZChzdHJvbmdFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAvLyBzcGFuRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgICAgICAvLyBzcGFuRWxlbWVudC5pbm5lckhUTUwgPSAnLi4uJztcbiAgICAgICAgICAgICAgICAvLyBwYXJhZ3JhcGhFbGVtZW50LmFwcGVuZENoaWxkKHNwYW5FbGVtZW50KTtcbiAgICAgICAgICAgICAgICAvLyBsaXN0RWxlbWVudC5hcHBlbmRDaGlsZChwYXJhZ3JhcGhFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbGlzdEVsZW1lbnRWYWx1ZVJhZGl1cycsIHNwYW5FbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAvLyBpbmNyZWFzZSB0aGUgaWQtY291bnRlclxuICAgICAgICAgICAgZmVhdHVyZUlkQ291bnQgKz0gMTtcblxuICAgICAgICAgICAgLy8gYXBwZW5kIGVsZW1lbnQgdG8gdGhlIGxpc3RcbiAgICAgICAgICAgIHNlbGYubWFpblNlY3Rpb24uYXBwZW5kQ2hpbGQobGlzdEVsZW1lbnQpO1xuICAgICAgICAgICAgLy8gYXR0YWNoIGVsZW1lbnQgdG8gdGhlIGZlYXR1cmVcbiAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdsaXN0RWxlbWVudCcsIGxpc3RFbGVtZW50KTtcblxuICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICB9OyAvLyBlbmQgb2YgXCJhZGRNZWFzdXJlRmVhdHVyZSgpXCJcblxuICAgICAgICAgIHVwZGF0ZU1lYXN1cmVGZWF0dXJlID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgIHZhciBmZWF0dXJlVG9vbHRpcCxcbiAgICAgICAgICAgICAgICBuZXdDb250ZW50LFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgICAgICAgIGFyZWEsXG4gICAgICAgICAgICAgICAgcmFkaXVzO1xuXG4gICAgICAgICAgICBmZWF0dXJlVG9vbHRpcCA9IGZlYXR1cmUuZ2V0KCd0b29sdGlwJyk7XG4gICAgICAgICAgICBuYW1lID0gZmVhdHVyZS5nZXQoJ2xpc3RFbGVtZW50VmFsdWVOYW1lJykudmFsdWU7XG4gICAgICAgICAgICBsZW5ndGggPSB1dGlscy5tZWFzdXJlR2VvbWV0cnkoZmVhdHVyZS5nZXRHZW9tZXRyeSgpLCB0cnVlKTtcbiAgICAgICAgICAgIG5ld0NvbnRlbnQgPSAnPHN0cm9uZz4nICsgbmFtZSArICc8L3N0cm9uZz48YnI+JztcblxuICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ21lYXN1cmVkTGVuZ3RoJywgbGVuZ3RoKTtcbiAgICAgICAgICAgIGZlYXR1cmUuZ2V0KCdsaXN0RWxlbWVudFZhbHVlTGluZScpLmlubmVySFRNTCA9IGxlbmd0aC5odG1sVmFsdWU7XG4gICAgICAgICAgICBpZiAoZmVhdHVyZS5nZXQoJ2dlb21ldHJ5VHlwZScpID09PSAnY2lyY2xlJykge1xuICAgICAgICAgICAgICByYWRpdXMgPSB1dGlscy5tZWFzdXJlR2VvbWV0cnkoZmVhdHVyZS5nZXRHZW9tZXRyeSgpKTtcbiAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ21lYXN1cmVkUmFkaXVzJywgcmFkaXVzKTtcbiAgICAgICAgICAgICAgZmVhdHVyZS5nZXQoJ2xpc3RFbGVtZW50VmFsdWVSYWRpdXMnKS5pbm5lckhUTUwgPSByYWRpdXMuaHRtbFZhbHVlO1xuICAgICAgICAgICAgICBuZXdDb250ZW50ICs9IHJhZGl1cy5odG1sVmFsdWU7XG5cbiAgICAgICAgICAgICAgYXJlYSA9IHV0aWxzLm1lYXN1cmVHZW9tZXRyeShmZWF0dXJlLmdldEdlb21ldHJ5KCksIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ21lYXN1cmVkQXJlYScsIGFyZWEpO1xuICAgICAgICAgICAgICBmZWF0dXJlLmdldCgnbGlzdEVsZW1lbnRWYWx1ZUFyZWEnKS5pbm5lckhUTUwgPSBhcmVhLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgICAgLy8gbmV3Q29udGVudCArPSBhcmVhLmh0bWxWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmVhdHVyZS5nZXQoJ2dlb21ldHJ5VHlwZScpID09PSAncG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICBhcmVhID0gdXRpbHMubWVhc3VyZUdlb21ldHJ5KGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ21lYXN1cmVkQXJlYScsIGFyZWEpO1xuICAgICAgICAgICAgICAgIGZlYXR1cmUuZ2V0KCdsaXN0RWxlbWVudFZhbHVlQXJlYScpLmlubmVySFRNTCA9IGFyZWEuaHRtbFZhbHVlO1xuICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQgKz0gYXJlYS5odG1sVmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdDb250ZW50ICs9IGxlbmd0aC5odG1sVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmZWF0dXJlVG9vbHRpcC5zZXRDb250ZW50KG5ld0NvbnRlbnQpO1xuICAgICAgICAgIH07IC8vIGVuZCBvZiBcInVwZGF0ZU1lYXN1cmVGZWF0dXJlKClcIlxuXG4gICAgICAgICAgcmVtb3ZlTWVhc3VyZUZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgc2VsZi5tYWluU2VjdGlvbi5yZW1vdmVDaGlsZChmZWF0dXJlLmdldCgnbGlzdEVsZW1lbnQnKSk7XG5cbiAgICAgICAgICAgIC8vIGxhc3QgZWxlbWVudD8gLT4gYWRkIGluZm9tZXNzYWdlXG4gICAgICAgICAgICBpZiAoc2VsZi5tYWluU2VjdGlvbi5jaGlsZEVsZW1lbnRDb3VudCA8IDEpIHtcbiAgICAgICAgICAgICAgc2VsZi5tYWluU2VjdGlvbi5hcHBlbmRDaGlsZChzZWxmLm1haW5TZWN0aW9uSW5mbyk7XG4gICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTsgLy8gZW5kIG9mIFwicmVtb3ZlTWVhc3VyZUZlYXR1cmUoKVwiXG5cbiAgICAgICAgICAgIC8vU3RhcnQgV29ya2Fyb3VuZFxuICAgICAgICAgICAgZ2V0VmFsdWVPZkdlb21ldHJ5ID0gZnVuY3Rpb24gKGZlYXR1cmUpe1xuICAgICAgICAgICAgICAgIHZhciBsZW5nID0gdXRpbHMubWVhc3VyZUdlb21ldHJ5KGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgLy8gZmVhdHVyZS5zZXQoJ21lYXN1cmVkTGVuZ3RoJywgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gbGVuZy5odG1sVmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlbnVtYiA9IHZhbC5tYXRjaCgvXFxkL2cpO1xuICAgICAgICAgICAgICAgIHZhbHVlbnVtYiA9IHZhbHVlbnVtYi5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZW51bWI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldExlbmd0aE9mTWVhc3VyZSA9IGZ1bmN0aW9uICgpe1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSAnMC4wMCBtJztcbiAgICAgICAgICAgICAgICB2YXIgbGVuZ3RobnVtYiA9IGxlbmd0aC5tYXRjaCgvXFxkL2cpO1xuICAgICAgICAgICAgICAgIGxlbmd0aG51bWIgPSBsZW5ndGhudW1iLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgbGVuZ3RobnVtYiA9Kzg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlbmd0aG51bWI7XG4gICAgICAgICAgICB9Ly8gRW5kIFdvcmthcm91bmRcblxuICAgICAgICAgIGludGVyYWN0aW9uLm9uKCdkcmF3c3RhcnQnLFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVTa2V0Y2ggPSBldmVudC5mZWF0dXJlO1xuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSB0b29sdGlwXG4gICAgICAgICAgICAgICAgYWN0aXZlVG9vbHRpcCA9IG5ldyBUb29sdGlwUG9wVXAoe1xuICAgICAgICAgICAgICAgICAgbWFwOiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAsXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbjogZXZlbnQuY29vcmRpbmF0ZSxcbiAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICBjbG9zZWFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICBjbG9zZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy9Xb3JrYXJvdW5kLCBmb3Igc21hbGwgb3IgemVybyB2YWx1ZXMgb2YgRnJlZWhhbmRcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gZ2V0VmFsdWVPZkdlb21ldHJ5KGV2ZW50LmZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBsZW5nID0gZ2V0TGVuZ3RoT2ZNZWFzdXJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCAhPSBsZW5nICYmIHZhbCA+IGxlbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTWVhc3VyZUZlYXR1cmUoZXZlbnQuZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5yZW1vdmVGZWF0dXJlKGV2ZW50LmZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTWVhc3VyZUZlYXR1cmUoZXZlbnQuZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgYWN0aXZlU2tldGNoLnNldCgndG9vbHRpcCcsIGFjdGl2ZVRvb2x0aXApO1xuICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaC5zZXQoJ2dlb21ldHJ5VHlwZScsIG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgICAgICBhZGRNZWFzdXJlRmVhdHVyZShhY3RpdmVTa2V0Y2gpO1xuICAgICAgICAgICAgICB9LCBzZWxmKTtcblxuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5vbigncG9pbnRlcm1vdmUnLFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlU2tldGNoICYmIGFjdGl2ZVRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvb2x0aXAuc2V0UG9zaXRpb24oZXZlbnQuY29vcmRpbmF0ZSk7XG4gICAgICAgICAgICAgICAgICB1cGRhdGVNZWFzdXJlRmVhdHVyZShhY3RpdmVTa2V0Y2gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgc2VsZik7XG5cbiAgICAgICAgICBpbnRlcmFjdGlvbi5vbignZHJhd2VuZCcsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVTa2V0Y2ggJiYgYWN0aXZlVG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlTWVhc3VyZUZlYXR1cmUoYWN0aXZlU2tldGNoKTtcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVNrZXRjaCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBhY3RpdmVUb29sdGlwID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIHNlbGYpO1xuXG4gICAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZhdGVGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgLy8gZGlzYWJsZSBtYXBIb3ZlclxuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcEhvdmVyLmRlYWN0aXZhdGUoKTtcblxuICAgICAgICAgIGZlYXR1cmVzLmNsZWFyKCk7XG5cbiAgICAgICAgICAvLyBFbmFibGUgaW50ZXJhY3Rpb25cbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkSW50ZXJhY3Rpb24oaW50ZXJhY3Rpb24pO1xuICAgICAgICB9LFxuICAgICAgICBkZWFjdGl2YXRlRnVuY3Rpb246IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgIC8vIHJlYWN0aXZhdGUgbWFwSG92ZXJcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXBIb3Zlci5hY3RpdmF0ZSgpO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpICE9PSAncG9pbnQnKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5maW5pc2hEcmF3aW5nKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHtcbiAgICAgICAgICAgICAgLy8gMF9vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUmVtb3ZlIGZyb20gbWFwXG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUludGVyYWN0aW9uKGludGVyYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBtZWFzdXJlVmlldztcbiAgICB9IC8vIGVuZCBvZiBcImFkZE1lYXN1cmVWaWV3KClcIlxuXG4gIH0pO1xuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBNZWFzdXJldG9vbHMgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuTWVhc3VyZXRvb2xzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1tZWFzdXJldG9vbHMuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG5cbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcblxuaW1wb3J0IHtTaWRlYm9hcmR9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc2lkZWJvYXJkXCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBleHRlbmRzIHtjNGcubWFwcy5jb250cm9sLlNpZGVib2FyZH1cbiAgICpcbiAgICogQHBhcmFtICB7W3R5cGVdfSAgbWFwQ29udHJvbGxlciAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gIHtbdHlwZV19ICBjb25maWcgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLlJvdXRlciA9IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuXG4gICAgLy8gZXh0ZW5kIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBuYW1lOiAncm91dGVyJyxcbiAgICAgIGNyZWF0ZTogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgIGhlYWRsaW5lOiBsYW5nQ29uc3RhbnRzLlJPVVRFUixcbiAgICAgIGRpcmVjdGlvbjogJ2xlZnQnXG4gICAgfSwgb3B0X29wdGlvbnMpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmluZGV4PTA7XG5cbiAgICAvLyBjYWxsIHBhcmVudCBjb25zdHJ1Y3RvclxuICAgIFNpZGVib2FyZC5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEluaGVyaXQgZnJvbSBcIlNpZGVib2FyZFwiXG4gICAqL1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLlJvdXRlciwgU2lkZWJvYXJkKTtcblxuICAvKipcbiAgICogTWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5Sb3V0ZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5Sb3V0ZXIucHJvdG90eXBlLCB7XG5cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHZhciBzZWxmLFxuICAgICAgICAgIHZpZXdSb3V0ZXIsXG4gICAgICAgICAgc2VsZWN0SW50ZXJhY3Rpb24sXG4gICAgICAgICAgcHJvZmlsZUlkO1xuXG4gICAgICBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuc3Bpbm5lci5zaG93KCk7XG5cblxuICAgICAgLy8gY2hlY2sgYW5kIGxvYWQgbG9jYXRpb24gc3R5bGVzIHZpYSBtYXAtcHJveHlcbiAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhbXG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2Zyb21fbG9jc3R5bGUsXG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3RvX2xvY3N0eWxlLFxuICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wb2ludF9sb2NzdHlsZVxuICAgICAgXSk7XG5cblxuICAgICAgLy8gQWRkIHJvdXRlciBsYXllcihzKVxuICAgICAgdGhpcy5yb3V0aW5nQWx0V2F5U291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3IoKTtcbiAgICAgIHRoaXMucm91dGluZ1dheVNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKCk7XG4gICAgICB0aGlzLnJvdXRlcldheUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgICAgIHNvdXJjZTogdGhpcy5yb3V0aW5nV2F5U291cmNlLFxuICAgICAgICB6SW5kZXg6IDEsXG4gICAgICAgIHN0eWxlOiBbXG4gICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYpJyxcbiAgICAgICAgICAgICAgd2lkdGg6IDhcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCA1MSwgMTE5LCAwLjkpJyxcbiAgICAgICAgICAgICAgd2lkdGg6IDRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgXVxuICAgICAgfSk7XG4gICAgICB0aGlzLnJvdXRlckFsdFdheUxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgICAgIHNvdXJjZTogdGhpcy5yb3V0aW5nQWx0V2F5U291cmNlLFxuICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgIHN0eWxlOiBbXG4gICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYpJyxcbiAgICAgICAgICAgICAgd2lkdGg6IDhcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCA1MSwgMTE5LCAwLjQpJyxcbiAgICAgICAgICAgICAgd2lkdGg6IDRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgXVxuICAgICAgfSk7XG5cbiAgICAgIHNlbGVjdEludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLlNlbGVjdCh7XG4gICAgICAgICAgc3R5bGU6W1xuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wKScsXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDhcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMjU1LCA1MSwgMTE5LCAwLjApJyxcbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICBdXG5cbiAgICAgIH0pO1xuICAgICAgc2VsZWN0SW50ZXJhY3Rpb24ub24oJ3NlbGVjdCcsIGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgICAgaWYoZXZlbnQuc2VsZWN0ZWRbMF0gKSB7XG4gICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IGV2ZW50LnNlbGVjdGVkWzBdLmdldEdlb21ldHJ5KCk7XG4gICAgICAgICAgICAgIGlmKGdlb21ldHJ5ICYmIGdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5MaW5lU3RyaW5nKXtcbiAgICAgICAgICAgICAgICAgIHNlbGYuc2hvd0FsdFJvdXRlKHNlbGYucmVzcG9uc2UsZXZlbnQuc2VsZWN0ZWRbMF0uZ2V0SWQoKSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgIH1cblxuICAgICAgfSk7XG5cbiAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRJbnRlcmFjdGlvbihzZWxlY3RJbnRlcmFjdGlvbik7XG5cblxuICAgICAgICB0aGlzLnJvdXRpbmdIaW50U291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3IoKTtcbiAgICAgIHRoaXMucm91dGVySGludExheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgICAgIHNvdXJjZTogdGhpcy5yb3V0aW5nSGludFNvdXJjZSxcbiAgICAgICAgc3R5bGU6IGZ1bmN0aW9uIChmZWF0dXJlLCByZXNvbHV0aW9uKSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcG9pbnRfbG9jc3R5bGVdLnN0eWxlKTtcbiAgICAgICAgICByZXR1cm4gKCFzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eSkgfHwgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3NlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3BvaW50X2xvY3N0eWxlXS5zdHlsZShmZWF0dXJlLCByZXNvbHV0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMubG9jYXRpb25zU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3IoKTtcbiAgICAgIHRoaXMubG9jYXRpb25zTGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yKHtcbiAgICAgICAgc291cmNlOiB0aGlzLmxvY2F0aW9uc1NvdXJjZSxcbiAgICAgICAgekluZGV4OiAyXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5yb3V0ZXJMYXllckdyb3VwID0gbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgbGF5ZXJzOiBuZXcgb2wuQ29sbGVjdGlvbihbXG4gICAgICAgICAgdGhpcy5yb3V0ZXJXYXlMYXllcixcbiAgICAgICAgICB0aGlzLnJvdXRlckFsdFdheUxheWVyLFxuICAgICAgICAgIHRoaXMubG9jYXRpb25zTGF5ZXIsXG4gICAgICAgICAgdGhpcy5yb3V0ZXJIaW50TGF5ZXJcbiAgICAgICAgXSksXG4gICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKHRoaXMucm91dGVyTGF5ZXJHcm91cCk7XG5cbiAgICAgIHZpZXdSb3V0ZXIgPSB0aGlzLmFkZFVzZXJJbnRlcmZhY2UoKTtcbiAgICAgIHZpZXdSb3V0ZXIuYWN0aXZhdGUoKTtcblxuICAgICAgLy8gc3RvcmUgc29tZSB2YXJzIGZvciBhamF4LXJlcXVlc3RzXG4gICAgICBwcm9maWxlSWQgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnByb2ZpbGU7XG4gICAgICB0aGlzLmdlb1NlYXJjaEFwaSA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmdlb3NlYXJjaCArICcvJyArIHByb2ZpbGVJZDtcbiAgICAgIHRoaXMuZ2VvUmV2ZXJzZVNlYXJjaEFwaSA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmdlb3NlYXJjaF9yZXZlcnNlICsgJy8nICsgcHJvZmlsZUlkO1xuICAgICAgdGhpcy5yb3V0aW5nQXBpID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkucm91dGluZyArICcvJyArIHByb2ZpbGVJZDtcblxuICAgICAgdGhpcy5zcGlubmVyLmhpZGUoKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIHByZU9wZW5GdW5jdGlvbjogZnVuY3Rpb24gKG9wdF9vcHRpb25zKSB7XG5cbiAgICAgIHRoaXMuYWRkTWFwSW5wdXRJbnRlcmFjdGlvbigpO1xuXG4gICAgICBpZiAob3B0X29wdGlvbnMgJiYgb3B0X29wdGlvbnMudG9Mb25MYXQpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtUmV2ZXJzZVNlYXJjaCh0aGlzLiR0b0lucHV0LCBvcHRfb3B0aW9ucy50b0xvbkxhdCk7XG4gICAgICAgIHRoaXMudG9WYWx1ZSA9IG5ldyBvbC5nZW9tLlBvaW50KFtvcHRfb3B0aW9ucy50b0xvbkxhdFsxXSwgb3B0X29wdGlvbnMudG9Mb25MYXRbMF1dKTtcbiAgICAgICAgdGhpcy5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICB9XG5cbiAgICB9LFxuXG4gICAgcHJlSGlkZUZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnJlbW92ZU1hcElucHV0SW50ZXJhY3Rpb24oKTtcbiAgICB9LFxuXG4gICAgcHJlQ2xvc2VGdW5jdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICB0aGlzLnJvdXRpbmdXYXlTb3VyY2UuY2xlYXIoKTtcbiAgICAgIHRoaXMucm91dGluZ0FsdFdheVNvdXJjZS5jbGVhcigpO1xuICAgICAgdGhpcy5yb3V0aW5nSGludFNvdXJjZS5jbGVhcigpO1xuICAgICAgdGhpcy5sb2NhdGlvbnNTb3VyY2UuY2xlYXIoKTtcblxuICAgICAgJCh0aGlzLnJvdXRlckluc3RydWN0aW9uc1dyYXBwZXIpLmVtcHR5KCk7XG4gICAgICB0aGlzLmNsZWFySW5wdXQodGhpcy4kZnJvbUlucHV0KTtcbiAgICAgIGlmKHRoaXMub3ZlclZhbHVlKXtcbiAgICAgICAgICBmb3IodmFyIGlkIGluIHRoaXMub3ZlclZhbHVlKXtcbiAgICAgICAgICAgICAgdGhpcy5jbGVhck92ZXIodGhpcy4kb3ZlcklucHV0LGlkKTtcbiAgICAgICAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgICAgICAgIGlmKGVsZW0pe1xuICAgICAgICAgICAgICAgICAgZWxlbS5wYXJlbnROb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbS5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuY2xlYXJJbnB1dCh0aGlzLiR0b0lucHV0KTtcblxuICAgICAgdGhpcy5yZW1vdmVNYXBJbnB1dEludGVyYWN0aW9uKCk7XG5cbiAgICB9LFxuXG4gICAgcmVtb3ZlTWFwSW5wdXRJbnRlcmFjdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAudW4oJ2NsaWNrJywgc2VsZi5mbk1hcFJvdXRlckludGVyYWN0aW9uKTtcbiAgICB9LFxuXG4gICAgYWRkTWFwSW5wdXRJbnRlcmFjdGlvbjogZnVuY3Rpb24gKCkge1xuXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgY29vcmRpbmF0ZTtcblxuICAgICAgc2VsZi5mbk1hcFJvdXRlckludGVyYWN0aW9uID0gZnVuY3Rpb24gKGV2dCkge1xuXG4gICAgICAgIGNvb3JkaW5hdGUgPSBvbC5wcm9qLnRvTG9uTGF0KGV2dC5jb29yZGluYXRlKTtcblxuICAgICAgICBpZiAoc2VsZi4kZnJvbUlucHV0LnZhbCgpID09PSBcIlwiKSB7XG4gICAgICAgICAgLy9zZWxmLiRmcm9tSW5wdXQudmFsKG9sLnByb2oudG9Mb25MYXQoZXZ0LmNvb3JkaW5hdGUpKTtcbiAgICAgICAgICBzZWxmLnBlcmZvcm1SZXZlcnNlU2VhcmNoKHNlbGYuJGZyb21JbnB1dCwgY29vcmRpbmF0ZSk7XG4gICAgICAgICAgc2VsZi5mcm9tVmFsdWUgPSBuZXcgb2wuZ2VvbS5Qb2ludChjb29yZGluYXRlKTtcbiAgICAgICAgICBzZWxmLnJlY2FsY3VsYXRlUm91dGUoKTtcblxuICAgICAgICAgIC8vc2VsZi4kZnJvbUlucHV0LnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuJHRvSW5wdXQudmFsKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAvL3NlbGYuJHRvSW5wdXQudmFsKG9sLnByb2oudG9Mb25MYXQoZXZ0LmNvb3JkaW5hdGUpKTtcbiAgICAgICAgICBzZWxmLnBlcmZvcm1SZXZlcnNlU2VhcmNoKHNlbGYuJHRvSW5wdXQsIGNvb3JkaW5hdGUpO1xuICAgICAgICAgIHNlbGYudG9WYWx1ZSA9IG5ldyBvbC5nZW9tLlBvaW50KGNvb3JkaW5hdGUpO1xuICAgICAgICAgIHNlbGYucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuJG92ZXJJbnB1dCkge1xuICAgICAgICAgICAgaWYoc2VsZi4kb3ZlcklucHV0LnZhbCgpID09PVwiXCIpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnBlcmZvcm1SZXZlcnNlU2VhcmNoKHNlbGYuJG92ZXJJbnB1dCwgY29vcmRpbmF0ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLm92ZXJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm92ZXJWYWx1ZT17fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZi5vdmVyVmFsdWVbc2VsZi5pbmRleF09bmV3IG9sLmdlb20uUG9pbnQoY29vcmRpbmF0ZSk7XG4gICAgICAgICAgICAgICAgc2VsZi5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICAgICAgICAgICAgc2VsZi4kYnV0dG9uT3Zlci5wcm9wKFwiZGlzYWJsZWRcIixmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5vbignY2xpY2snLCBzZWxmLmZuTWFwUm91dGVySW50ZXJhY3Rpb24pO1xuICAgICAgaWYoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldEludGVyYWN0aW9ucygpLmdldEFycmF5KClbJzknXSl7XG4gICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldEludGVyYWN0aW9ucygpLmdldEFycmF5KClbJzknXS5zZXRBY3RpdmUodHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRJbnRlcmFjdGlvbnMoKS5nZXRBcnJheSgpWyc4J10uc2V0QWN0aXZlKHRydWUpXG4gICAgICB9XG4gICAgfSxcblxuXG4gICAgYWRkVXNlckludGVyZmFjZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICBsZXQgc2VsZixcbiAgICAgICAgICByb3V0ZXJWaWV3LFxuICAgICAgICAgIHJvdXRlclZpZXdJbnB1dFdyYXBwZXIsXG4gICAgICAgICAgcm91dGVyVmlld0NvbnRlbnRXcmFwcGVyLFxuICAgICAgICAgIHJvdXRlclZpZXdDb250ZW50SGVhZGxpbmUsXG4gICAgICAgICAgcHJpbnQsXG4gICAgICAgICAgcm91dGVQcm9maWxlID1bXSxcbiAgICAgICAgICByb3V0ZXJGcm9tTGFiZWwsXG4gICAgICAgICAgcm91dGVyT3ZlckxhYmVsLFxuICAgICAgICAgIHJvdXRlclRvTGFiZWwsXG4gICAgICAgICAgcm91dGVyRnJvbUNsZWFyLFxuICAgICAgICAgIHJvdXRlck92ZXJDbGVhcixcbiAgICAgICAgICByb3V0ZXJUb0NsZWFyLFxuICAgICAgICAgIHN3aXRjaEZyb21UbyxcbiAgICAgICAgICBidXR0b25PdmVyO1xuXG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICByb3V0ZXJWaWV3SW5wdXRXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICByb3V0ZXJWaWV3Q29udGVudFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgc2VsZi5yb3V0ZXJWaWV3Q29udGVudFdyYXBwZXIgPSByb3V0ZXJWaWV3Q29udGVudFdyYXBwZXI7XG5cbiAgICAgIC8vIEBUT0RPOiBBZGQgcm91dGVyLWluZm8tdGV4dFxuICAgICAgLy8gcm91dGVyVmlld0NvbnRlbnRIZWFkbGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2g0Jyk7XG4gICAgICAvLyByb3V0ZXJWaWV3Q29udGVudEhlYWRsaW5lLmlubmVySFRNTCA9IGxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfQUREUkVTU19JTlBVVDtcbiAgICAgIC8vIHJvdXRlclZpZXdDb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZChyb3V0ZXJWaWV3Q29udGVudEhlYWRsaW5lKTtcblxuICAgICAgdGhpcy5mcm9tSW5wdXRXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmZyb21JbnB1dFdyYXBwZXIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlBVVF9XUkFQUEVSO1xuXG4gICAgICB0aGlzLmZyb21JbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgIHRoaXMuZnJvbUlucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgIHRoaXMuZnJvbUlucHV0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5ST1VURVJfSU5QVVRfRlJPTTtcbiAgICAgIHRoaXMuZnJvbUlucHV0LmlkID0gdGhpcy5mcm9tSW5wdXQubmFtZSA9IFwicm91dGluZ0Zyb21cIjtcblxuICAgICAgcm91dGVyRnJvbUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgIHJvdXRlckZyb21MYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsICdyb3V0aW5nRnJvbScpO1xuICAgICAgcm91dGVyRnJvbUxhYmVsLmlubmVySFRNTCA9IGxhbmdDb25zdGFudHMuUk9VVEVSX0ZST01fTEFCRUw7XG5cbiAgICAgIHJvdXRlckZyb21DbGVhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgcm91dGVyRnJvbUNsZWFyLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5ST1VURVJfSU5QVVRfQ0xFQVI7XG4gICAgICByb3V0ZXJGcm9tQ2xlYXIudGl0bGUgPSBsYW5nQ29uc3RhbnRzLlJPVVRFUl9DTEVBUl9USVRMRTtcbiAgICAgIHJvdXRlckZyb21DbGVhci5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLlJPVVRFUl9DTEVBUl9IVE1MO1xuICAgICAgdGhpcy4kcm91dGVyRnJvbUNsZWFyID0gJChyb3V0ZXJGcm9tQ2xlYXIpO1xuXG4gICAgICBzd2l0Y2hGcm9tVG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIHN3aXRjaEZyb21Uby5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX1NXSVRDSDtcbiAgICAgIHN3aXRjaEZyb21Uby50aXRsZSA9IGxhbmdDb25zdGFudHMuUk9VVEVSX1NXSVRDSDtcbiAgICAgIHRoaXMuJHN3aXRjaEZyb21UbyA9ICQoc3dpdGNoRnJvbVRvKTtcblxuICAgICAgYnV0dG9uT3ZlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uT3Zlci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX09WRVI7XG4gICAgICBidXR0b25PdmVyLnRpdGxlID0gbGFuZ0NvbnN0YW50cy5ST1VURVJfT1ZFUjtcbiAgICAgIHRoaXMuJGJ1dHRvbk92ZXIgPSAkKGJ1dHRvbk92ZXIpO1xuXG4gICAgICBwcmludCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgcHJpbnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9QUklOVDtcbiAgICAgIHByaW50LnRpdGxlID0gbGFuZ0NvbnN0YW50cy5ST1VURVJfUFJJTlQ7XG4gICAgICB0aGlzLiRwcmludCA9ICQocHJpbnQpO1xuXG5cblxuXG4gICAgICB0aGlzLnJvdXRlckJ1dHRvbkJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy5yb3V0ZXJCdXR0b25CYXIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9CVVRUT05CQVI7XG4gICAgICB0aGlzLnJvdXRlckJ1dHRvbkJhci5hcHBlbmRDaGlsZChzd2l0Y2hGcm9tVG8pO1xuICAgICAgdGhpcy5yb3V0ZXJCdXR0b25CYXIuYXBwZW5kQ2hpbGQoYnV0dG9uT3Zlcik7XG4gICAgICB0aGlzLnJvdXRlckJ1dHRvbkJhci5hcHBlbmRDaGlsZChwcmludCk7XG5cbiAgICAgICAgLy8gJChwcmludCkuaW5zZXJ0QmVmb3JlKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjNGctcG9ydHNpZGUtaGlkZVwiKVswXSk7XG5cbiAgICAgICAgaWYodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA9PSAnMicpeyAvL09wZW5Sb3V0ZVNlcnZpY2VcbiAgICAgICAgICAgIGlmKE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzKS5sZW5ndGggPT0gMSl7Ly9jaGVjayBmb3Igc2luZ2xlIHByb2ZpbGUgYW5kIHNldCB0aGlzIGFzICBhY3RpdmUgcm91dGluZyBwcm9maWxlXG4gICAgICAgICAgICAgICAgdGhpcy5yb3V0ZVByb2ZpbGUgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlUHJvZmlsZS5hY3RpdmUgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlcylbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzKS5sZW5ndGggPiAxKXsgLy9jaGVjayBmb3IgbXVsdGlwbGUgcHJvZmlsZXMgYW5kIGFkZCBwcm9maWxlLWNoYW5nZXJcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlUHJvZmlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICQodGhpcy5yb3V0ZVByb2ZpbGUpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5ST1VURVJfUFJPRklMRV9XUkFQUEVSKTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlc1snMCddKXsgLy9hZGQgYnV0dG9uIGZvciBwcm9maWxlIGRyaXZpbmctY2FyXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlUHJvZmlsZS5jYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICAgICAgJChyb3V0ZVByb2ZpbGUuY2FyKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuUk9VVEVSX1BST0ZJTEVfQ0FSKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVQcm9maWxlQ2FyID0gJChyb3V0ZVByb2ZpbGUuY2FyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3V0ZVByb2ZpbGUuYXBwZW5kQ2hpbGQocm91dGVQcm9maWxlLmNhcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlUHJvZmlsZUNhci5jbGljayhmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyU2libGluZ3ModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJvdXRlUHJvZmlsZS5hY3RpdmUgPSAnMCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY2FsY3VsYXRlUm91dGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXNbJzEnXSkgeyAvL2FkZCBidXR0b24gZm9yIHByb2ZpbGUgZHJpdmluZy1oZ3ZcbiAgICAgICAgICAgICAgICAgICAgcm91dGVQcm9maWxlLmhndiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAkKHJvdXRlUHJvZmlsZS5oZ3YpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5ST1VURVJfUFJPRklMRV9IR1YpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlUHJvZmlsZS5hcHBlbmRDaGlsZChyb3V0ZVByb2ZpbGUuaGd2KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVQcm9maWxlSGd2ID0gJChyb3V0ZVByb2ZpbGUuaGd2KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZVByb2ZpbGVIZ3YuY2xpY2soZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGVhclNpYmxpbmdzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yb3V0ZVByb2ZpbGUuYWN0aXZlID0gJzEnO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlc1snMiddXG4gICAgICAgICAgICAgICAgICAgIHx8IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzWyczJ11cbiAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXNbJzQnXVxuICAgICAgICAgICAgICAgICAgICB8fCB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlc1snNSddXG4gICAgICAgICAgICAgICAgICAgIHx8IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzWyc2J11cbiAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXNbJzcnXSl7IC8vYWRkIGJ1dHRvbiBhbmQgZHJvcGRvd24gZm9yIGN5Y2xpbmcgcHJvZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNwYW5CaWtlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgICAgICByb3V0ZVByb2ZpbGUuYmlrZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICByb3V0ZVByb2ZpbGUuYmlrZS5saXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVQcm9maWxlQmlrZSA9ICQocm91dGVQcm9maWxlLmJpa2UpO1xuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAyOyBpIDwgODsgaSsrKXsgLy9pdGVyYXRlIG92ZXIgYWxsIHBvc3NpYmxlIGN5Y2xpbmcgcHJvZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzW2ldKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmlubmVySFRNTCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoY2hpbGQpLmRhdGEoJ3Byb2ZpbGUnLCBbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoY2hpbGQpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jaGlsZENsaWNrKCQoY2hpbGQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighdGhpcy4kcm91dGVQcm9maWxlQmlrZS5kYXRhKCdwcm9maWxlJykpeyAvL2FkZCBleGlzdGluZyBkZWZhdWx0IHByb2ZpbGUgdG8gYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlUHJvZmlsZUJpa2UuZGF0YSgncHJvZmlsZScsaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoY2hpbGQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZVByb2ZpbGUuYmlrZS5saXN0LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICQocm91dGVQcm9maWxlLmJpa2UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5ST1VURVJfUFJPRklMRV9CSUtFKTtcblxuICAgICAgICAgICAgICAgICAgICBpZihyb3V0ZVByb2ZpbGUuYmlrZS5saXN0LmNoaWxkcmVuLmxlbmd0aCA9PSAxKXsgLy9pZ25vcmUgZHJvcGRvd24gbGlzdCwgaWYgb25seSBvbmUgY3ljbGluZyBwcm9maWxlIGlzIGVuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm91dGVQcm9maWxlLmFwcGVuZENoaWxkKHJvdXRlUHJvZmlsZS5iaWtlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlUHJvZmlsZUJpa2UuY2xpY2soZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2xlYXJTaWJsaW5ncyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJvdXRlUHJvZmlsZS5hY3RpdmUgPSAkKHRoaXMpLmRhdGEoJ3Byb2ZpbGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY2FsY3VsYXRlUm91dGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7IC8vYXBwZW5kIHdpdGggZHJvcGRvd24sIGlmIG11bHRpcGxlIGN5Y2xpbmcgcHJvZmlsZXMgYXJlIGVuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5CaWtlLmFwcGVuZENoaWxkKHJvdXRlUHJvZmlsZS5iaWtlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5CaWtlLmFwcGVuZENoaWxkKHJvdXRlUHJvZmlsZS5iaWtlLmxpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3V0ZVByb2ZpbGUuYXBwZW5kQ2hpbGQoc3BhbkJpa2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVQcm9maWxlQmlrZS5jbGljayhmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGVhclNpYmxpbmdzKCQodGhpcykucGFyZW50KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucm91dGVQcm9maWxlLmFjdGl2ZSA9ICQodGhpcykuZGF0YSgncHJvZmlsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXNbJzgnXVxuICAgICAgICAgICAgICAgICAgICB8fCB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlc1snOSddKXsgLy9hZGQgYnV0dG9uIGFuZCBkcm9wZG93biBmb3Igd2Fsa2luZyBwcm9maWxlc1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3BhbkZvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlUHJvZmlsZS5mb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlUHJvZmlsZS5mb290Lmxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZVByb2ZpbGVGb290ID0gJChyb3V0ZVByb2ZpbGUuZm9vdCk7XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDg7IGkgPCAxMDsgaSsrKXsgLy9pdGVyYXRlIG92ZXIgcG9zc2libGUgcHJvZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzW2ldKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmlubmVySFRNTCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoY2hpbGQpLmRhdGEoJ3Byb2ZpbGUnLCBbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoY2hpbGQpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jaGlsZENsaWNrKCQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLiRyb3V0ZVByb2ZpbGVGb290LmRhdGEoJ3Byb2ZpbGUnKSl7IC8vYWRkIGV4aXN0aW5nIGRlZmF1bHQgcHJvZmlsZSB0byBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVQcm9maWxlRm9vdC5kYXRhKCdwcm9maWxlJyxpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChjaGlsZCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlUHJvZmlsZS5mb290Lmxpc3QuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJChyb3V0ZVByb2ZpbGUuZm9vdCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLlJPVVRFUl9QUk9GSUxFX0ZPT1QpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKHJvdXRlUHJvZmlsZS5mb290Lmxpc3QuY2hpbGRyZW4ubGVuZ3RoID09IDEpeyAvL2lnbm9yZSBkcm9wZG93biBsaXN0LCBpZiBvbmx5IG9uZSB3YWxraW5nIHByb2ZpbGUgaXMgZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3V0ZVByb2ZpbGUuYXBwZW5kQ2hpbGQocm91dGVQcm9maWxlLmZvb3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVQcm9maWxlRm9vdC5jbGljayhmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGVhclNpYmxpbmdzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucm91dGVQcm9maWxlLmFjdGl2ZSA9ICQodGhpcykuZGF0YSgncHJvZmlsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXsgLy9hcHBlbmQgd2l0aCBkcm9wZG93biwgaWYgbXVsdGlwbGUgd2Fsa2luZyBwcm9maWxlcyBhcmUgZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkZvb3QuYXBwZW5kQ2hpbGQocm91dGVQcm9maWxlLmZvb3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3BhbkZvb3QuYXBwZW5kQ2hpbGQocm91dGVQcm9maWxlLmZvb3QubGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlUHJvZmlsZS5hcHBlbmRDaGlsZChzcGFuRm9vdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZVByb2ZpbGVGb290LmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyU2libGluZ3MoJCh0aGlzKS5wYXJlbnQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yb3V0ZVByb2ZpbGUuYWN0aXZlID0gJCh0aGlzKS5kYXRhKCdwcm9maWxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlc1snMTAnXSl7IC8vYWRkIGJ1dHRvbiBmb3IgcHJvZmlsZSB3aGVlbGNoYWlyXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlUHJvZmlsZS53aGVlbGNoYWlyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgICAgICQocm91dGVQcm9maWxlLndoZWVsY2hhaXIpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5ST1VURVJfUFJPRklMRV9XSEVFTENIQUlSKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVQcm9maWxlV2hlZWxjaGFpciA9ICQocm91dGVQcm9maWxlLndoZWVsY2hhaXIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlUHJvZmlsZS5hcHBlbmRDaGlsZChyb3V0ZVByb2ZpbGUud2hlZWxjaGFpcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlUHJvZmlsZVdoZWVsY2hhaXIuY2xpY2soZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGVhclNpYmxpbmdzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yb3V0ZVByb2ZpbGUuYWN0aXZlID0gJzEwJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZENsaWNrID0gZnVuY3Rpb24oJGVsZW1lbnQpeyAvL2hhbmRsZSB0aGUgY2xpY2sgaW5zaWRlIHRoZSBwcm9maWxlIGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucm91dGVQcm9maWxlLmFjdGl2ZSA9ICRlbGVtZW50LmRhdGEoJ3Byb2ZpbGUnKTsgLy9hY3RpdmF0ZSBzZWxlY3RlZCBwcm9maWxlXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2xlYXJTaWJsaW5ncygkZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucmVjYWxjdWxhdGVSb3V0ZSgpOyAvL3VwZGF0ZSB0aGUgcm91dGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJTaWJsaW5ncyA9IGZ1bmN0aW9uKGVsZW1lbnQpeyAvL2Z1bmN0aW9uIHRvIGFkanVzdCBjc3MtY2xhc3NlcyBhZnRlciBjaGFuZ2luZyBwcm9maWxlXG4gICAgICAgICAgICAgICAgICAgIGxldCBzaWJsaW5ncyA9ICQoZWxlbWVudCkucGFyZW50KCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNpYmxpbmdzLmxlbmd0aCA7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHNpYmxpbmdzW2ldKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZm9yKGxldCBwcm9maWxlIGluIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzKXsgLy9zZXQgZGVmYXVsdCB2YWx1ZSBmb3IgaW5pdGlhbCByb3V0aW5nXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzLmhhc093blByb3BlcnR5KHByb2ZpbGUpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm91dGVQcm9maWxlLmFjdGl2ZSA9IHByb2ZpbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdObyBSb3V0ZXIgUHJvZmlsZXMgZW5hYmxlZCcpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG5cblxuICAgICAgdGhpcy5mcm9tSW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHJvdXRlckZyb21MYWJlbCk7XG4gICAgICB0aGlzLmZyb21JbnB1dFdyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5mcm9tSW5wdXQpO1xuICAgICAgdGhpcy5mcm9tSW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHJvdXRlckZyb21DbGVhcik7XG4gICAgICBpZiAoYnV0dG9uT3ZlciAmJiB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcwJyl7XG4gICAgICAgICAgdGhpcy4kYnV0dG9uT3Zlci5oaWRlKCk7XG4gICAgICB9XG5cblxuICAgICAgdGhpcy4kcm91dGVyRnJvbUNsZWFyLmhpZGUoKTtcblxuICAgICAgdGhpcy4kcm91dGVyRnJvbUNsZWFyLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZWxmLmNsZWFySW5wdXQoc2VsZi4kZnJvbUlucHV0KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLiRidXR0b25PdmVyLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBzZWxmLmluZGV4Kys7XG4gICAgICAgICAgc2VsZi4kYnV0dG9uT3Zlci5wcm9wKFwiZGlzYWJsZWRcIix0cnVlKTtcblxuICAgICAgICAgIHNlbGYub3ZlcklucHV0V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIHNlbGYub3ZlcklucHV0V3JhcHBlci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOUFVUX1dSQVBQRVI7XG5cbiAgICAgICAgICBzZWxmLm92ZXJJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICBzZWxmLm92ZXJJbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgICAgc2VsZi5vdmVySW5wdXQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlBVVF9GUk9NO1xuICAgICAgICAgIHNlbGYub3ZlcklucHV0LmlkID0gc2VsZi5vdmVySW5wdXQubmFtZSA9IFwicm91dGluZ092ZXJcIjtcblxuICAgICAgICAgIHJvdXRlck92ZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgICAgcm91dGVyT3ZlckxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ3JvdXRpbmdGcm9tJyk7XG4gICAgICAgICAgcm91dGVyT3ZlckxhYmVsLmlubmVySFRNTCA9IGxhbmdDb25zdGFudHMuUk9VVEVSX0xhYmVsX0ludGVyaW07XG5cbiAgICAgICAgICByb3V0ZXJPdmVyQ2xlYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICByb3V0ZXJPdmVyQ2xlYXIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlBVVF9DTEVBUjtcbiAgICAgICAgICByb3V0ZXJPdmVyQ2xlYXIudGl0bGUgPSBsYW5nQ29uc3RhbnRzLlJPVVRFUl9DTEVBUl9USVRMRTtcbiAgICAgICAgICByb3V0ZXJPdmVyQ2xlYXIuaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5ST1VURVJfQ0xFQVJfSFRNTDtcbiAgICAgICAgICByb3V0ZXJPdmVyQ2xlYXIuaWQgPSBzZWxmLmluZGV4O1xuICAgICAgICAgIHNlbGYuJHJvdXRlck92ZXJDbGVhciA9ICQocm91dGVyT3ZlckNsZWFyKTtcblxuICAgICAgICAgIHNlbGYub3ZlcklucHV0V3JhcHBlci5hcHBlbmRDaGlsZChyb3V0ZXJPdmVyTGFiZWwpO1xuICAgICAgICAgIHNlbGYub3ZlcklucHV0V3JhcHBlci5hcHBlbmRDaGlsZChzZWxmLm92ZXJJbnB1dCk7XG4gICAgICAgICAgc2VsZi5vdmVySW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHJvdXRlck92ZXJDbGVhcik7XG5cbiAgICAgICAgICByb3V0ZXJWaWV3SW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHNlbGYub3ZlcklucHV0V3JhcHBlcik7XG4gICAgICAgICAgc2VsZi4kcm91dGVyT3ZlckNsZWFyLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBzZWxmLmNsZWFyT3ZlcihzZWxmLiRvdmVySW5wdXQsdGhpcy5pZCk7XG4gICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlKCk7XG4gICAgICAgICAgICAgIC8vYnV0dG9uT3Zlci5zaG93KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2VsZi4kb3ZlcklucHV0ID0gJChzZWxmLm92ZXJJbnB1dCk7XG4gICAgICAgICAgc2VsZi4kb3ZlcklucHV0Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHNlbGYucGVyZm9ybVNlYXJjaChzZWxmLiRvdmVySW5wdXQsIFwib3ZlclZhbHVlXCIpO1xuICAgICAgICAgICAgc2VsZi5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcblxuXG5cblxuICAgICAgdGhpcy4kc3dpdGNoRnJvbVRvLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdmFyIHN3aXRjaFZhck5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvdXRpbmdGcm9tXCIpLnZhbHVlO1xuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm91dGluZ0Zyb21cIikudmFsdWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvdXRpbmdUb1wiKS52YWx1ZTtcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvdXRpbmdUb1wiKS52YWx1ZSA9IHN3aXRjaFZhck5hbWU7XG4gICAgICAgICAgdmFyIHN3aXRjaFZhclZhbCA9IHNlbGYuZnJvbVZhbHVlO1xuICAgICAgICAgIHNlbGYuZnJvbVZhbHVlID0gc2VsZi50b1ZhbHVlO1xuICAgICAgICAgIHNlbGYudG9WYWx1ZSA9IHN3aXRjaFZhclZhbDtcbiAgICAgICAgICBzZWxmLnJlY2FsY3VsYXRlUm91dGUoKTtcblxuICAgICAgfSk7XG4gICAgICB0aGlzLiRwcmludC5jbGljayhmdW5jdGlvbiAoZXZlbnQpe1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbGV0IHJvdXRpbmdDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImM0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb25zLXdyYXBwZXJcIilbMF07XG4gICAgICAgICAgaWYoIXJvdXRpbmdDb250ZW50KSByZXR1cm47XG4gICAgICAgICAgbGV0IFdpblByaW50ID0gd2luZG93Lm9wZW4oJycsICcnLCAnbGVmdD0wLHRvcD0wLHdpZHRoPTgwMCxoZWlnaHQ9OTAwLHRvb2xiYXI9MCxzY3JvbGxiYXJzPTAsc3RhdHVzPTAnKTtcbiAgICAgICAgICBXaW5QcmludC5kb2N1bWVudC53cml0ZShyb3V0aW5nQ29udGVudC5pbm5lckhUTUwpO1xuICAgICAgICAgIFdpblByaW50LmRvY3VtZW50LmNsb3NlKCk7XG4gICAgICAgICAgV2luUHJpbnQuZm9jdXMoKTtcbiAgICAgICAgICBXaW5QcmludC5wcmludCgpO1xuICAgICAgICAgIFdpblByaW50LmNsb3NlKCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kZnJvbUlucHV0ID0gJCh0aGlzLmZyb21JbnB1dCk7XG4gICAgICB0aGlzLiRmcm9tSW5wdXQub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5wZXJmb3JtU2VhcmNoKHNlbGYuJGZyb21JbnB1dCwgXCJmcm9tVmFsdWVcIik7XG4gICAgICAgIHNlbGYucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgICBpZiAoc2VsZi4kZnJvbUlucHV0LnZhbCgpICE9PSBcIlwiKSB7XG4gICAgICAgICAgc2VsZi4kcm91dGVyRnJvbUNsZWFyLnNob3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLiRyb3V0ZXJGcm9tQ2xlYXIuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcm91dGVyVmlld0lucHV0V3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnJvdXRlckJ1dHRvbkJhcik7XG4gICAgICBpZih0aGlzLnJvdXRlUHJvZmlsZSAmJiB0aGlzLnJvdXRlUHJvZmlsZS5jaGlsZHJlbil7XG4gICAgICAgICAgcm91dGVyVmlld0lucHV0V3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnJvdXRlUHJvZmlsZSk7XG4gICAgICB9XG4gICAgICByb3V0ZXJWaWV3SW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuZnJvbUlucHV0V3JhcHBlcik7XG5cbiAgICAgIHRoaXMudG9JbnB1dFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMudG9JbnB1dFdyYXBwZXIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlBVVF9XUkFQUEVSO1xuXG4gICAgICB0aGlzLnRvSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICB0aGlzLnRvSW5wdXQudHlwZSA9IFwidGV4dFwiO1xuICAgICAgdGhpcy50b0lucHV0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5ST1VURVJfSU5QVVRfVE87XG4gICAgICB0aGlzLnRvSW5wdXQuaWQgPSB0aGlzLnRvSW5wdXQubmFtZSA9IFwicm91dGluZ1RvXCI7XG5cbiAgICAgIHJvdXRlclRvTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgcm91dGVyVG9MYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsICdyb3V0aW5nVG8nKTtcbiAgICAgIHJvdXRlclRvTGFiZWwuaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5ST1VURVJfVE9fTEFCRUw7XG5cbiAgICAgIHJvdXRlclRvQ2xlYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIHJvdXRlclRvQ2xlYXIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlBVVF9DTEVBUjtcbiAgICAgIHJvdXRlclRvQ2xlYXIudGl0bGUgPSBsYW5nQ29uc3RhbnRzLlJPVVRFUl9DTEVBUl9USVRMRTtcbiAgICAgIHJvdXRlclRvQ2xlYXIuaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5ST1VURVJfQ0xFQVJfSFRNTDtcbiAgICAgIHRoaXMuJHJvdXRlclRvQ2xlYXIgPSAkKHJvdXRlclRvQ2xlYXIpO1xuXG4gICAgICB0aGlzLnRvSW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKHJvdXRlclRvTGFiZWwpO1xuICAgICAgdGhpcy50b0lucHV0V3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnRvSW5wdXQpO1xuICAgICAgdGhpcy50b0lucHV0V3JhcHBlci5hcHBlbmRDaGlsZChyb3V0ZXJUb0NsZWFyKTtcblxuXG4gICAgICB0aGlzLiRyb3V0ZXJUb0NsZWFyLmhpZGUoKTtcblxuICAgICAgc2VsZi4kcm91dGVyVG9DbGVhci5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2VsZi5jbGVhcklucHV0KHNlbGYuJHRvSW5wdXQpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuJHRvSW5wdXQgPSAkKHRoaXMudG9JbnB1dCk7XG4gICAgICB0aGlzLiR0b0lucHV0Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYucGVyZm9ybVNlYXJjaChzZWxmLiR0b0lucHV0LCBcInRvVmFsdWVcIik7XG4gICAgICAgIHNlbGYucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgICBpZiAoc2VsZi4kdG9JbnB1dC52YWwoKSAhPT0gXCJcIikge1xuICAgICAgICAgIHNlbGYuJHJvdXRlclRvQ2xlYXIuc2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuJHJvdXRlclRvQ2xlYXIuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcm91dGVyVmlld0lucHV0V3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnRvSW5wdXRXcmFwcGVyKTtcblxuICAgICAgc2VsZi5zdGF0dXNCYXIuYXBwZW5kQ2hpbGQodGhpcy5nZXRBdHRyaWJ1dGlvbigpKTtcblxuICAgICAgcm91dGVyVmlldyA9IHRoaXMuYWRkVmlldyh7XG4gICAgICAgIG5hbWU6ICdyb3V0ZXItdmlldycsXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5ST1VURVJfVklFV19BRERSRVNTX0lOUFVULFxuICAgICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLlJPVVRFUl9WSUVXX0FERFJFU1NfSU5QVVQsXG4gICAgICAgICAgd2l0aEhlYWRsaW5lOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBzZWN0aW9uRWxlbWVudHM6IFtcbiAgICAgICAgICB7c2VjdGlvbjogdGhpcy50b3BUb29sYmFyLCBlbGVtZW50OiByb3V0ZXJWaWV3SW5wdXRXcmFwcGVyfSxcbiAgICAgICAgICB7c2VjdGlvbjogdGhpcy5jb250ZW50Q29udGFpbmVyLCBlbGVtZW50OiByb3V0ZXJWaWV3Q29udGVudFdyYXBwZXJ9XG4gICAgICAgIF1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcm91dGVyVmlldztcblxuICAgIH0sXG5cbiAgICBzZXRJbnB1dDogZnVuY3Rpb24gKGZyb20sIGNvb3JkaW5hdGUpIHtcbiAgICAgIC8vIHBlcmZvcm0gZ2VvU2VhcmNoIG9uIGdpdmVuIGxvY2F0aW9uXG4gICAgICAvLyBmaWxsIGZyb20vdG8gZmllbGRcbiAgICAgIC8vXG5cbiAgICAgIGlmICghY29vcmRpbmF0ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGNvb3JkaW5hdGUgPSBvbC5wcm9qLnRvTG9uTGF0KGNvb3JkaW5hdGUpO1xuXG4gICAgICBpZiAoZnJvbSkge1xuICAgICAgICB0aGlzLnBlcmZvcm1SZXZlcnNlU2VhcmNoKHRoaXMuJGZyb21JbnB1dCwgY29vcmRpbmF0ZSk7XG4gICAgICAgIHRoaXMucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgICB0aGlzLmZyb21WYWx1ZSA9IG5ldyBvbC5nZW9tLlBvaW50KGNvb3JkaW5hdGUpO1xuXG4gICAgICAgIC8vdGhpcy4kZnJvbUlucHV0LnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybVJldmVyc2VTZWFyY2godGhpcy4kdG9JbnB1dCwgY29vcmRpbmF0ZSk7XG4gICAgICAgIHRoaXMucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgICB0aGlzLnRvVmFsdWUgPSBuZXcgb2wuZ2VvbS5Qb2ludChjb29yZGluYXRlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgfSxcblxuICAgIGdldEF0dHJpYnV0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgYXR0cmlidXRpb25TZWFyY2gsXG4gICAgICAgICAgYXR0cmlidXRpb25Sb3V0ZXIsXG4gICAgICAgICAgYXR0cmlidXRpb25Sb3V0ZXJIb3N0LFxuICAgICAgICAgIGF0dHJpYnV0aW9uV3JhcHBlcixcbiAgICAgICAgICBhdHRyaWJ1dGlvbkh0bWw7XG4gICAgICBzd2l0Y2goc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbil7XG4gICAgICAgICAgY2FzZSBcIjBcIjpcbiAgICAgICAgICAgICAgYXR0cmlidXRpb25Sb3V0ZXIgPSAnPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHA6Ly9wcm9qZWN0LW9zcm0ub3JnL1wiPlByb2plY3QgT1NSTTwvYT4nO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiMVwiOlxuICAgICAgICAgICAgICBhdHRyaWJ1dGlvblJvdXRlciA9ICc8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL3Byb2plY3Qtb3NybS5vcmcvXCI+UHJvamVjdCBPU1JNPC9hPic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCIyXCI6XG4gICAgICAgICAgICAgIGF0dHJpYnV0aW9uUm91dGVyID0gJzxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL29wZW5yb3V0ZXNlcnZpY2Uub3JnL1wiPm9wZW5yb3V0ZXNlcnZpY2U8L2E+JztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzd2l0Y2goc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5nZW9zZWFyY2guZ2Vvc2VhcmNoX2VuZ2luZSl7XG4gICAgICAgICAgY2FzZSBcIjFcIjogLy9PU01cbiAgICAgICAgICAgICAgYXR0cmlidXRpb25TZWFyY2ggPSAnLSBHZW9jb2RlciBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9ub21pbmF0aW0ub3BlbnN0cmVldG1hcC5vcmcvXCI+T3BlblN0cmVldE1hcDwvYT4gJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIjJcIjogLy9NYXBxdWVzdFxuICAgICAgICAgICAgICBhdHRyaWJ1dGlvblNlYXJjaCA9ICctIEdlb2NvZGVyIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vd3d3Lm1hcHF1ZXN0LmNvbS9cIj5NYXBRdWVzdDwvYT4gJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIjNcIjogLy9jdXN0b21cbiAgICAgICAgICAgICAgYXR0cmlidXRpb25TZWFyY2ggPSAnLSBOb21pbmF0aW0tR2VvY29kZXIgJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIjRcIjogLy9jb240Z2lzXG4gICAgICAgICAgICAgIGF0dHJpYnV0aW9uU2VhcmNoID0gJy0gR2VvY29kZXIgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmNvbjRnaXMub3JnL2thcnRlbmRpZW5zdGUuaHRtbFwiPmNvbjRnaXM8L2E+ICc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgICBzd2l0Y2goc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbil7XG4gICAgICAgICAgICBjYXNlIFwiMFwiOlxuICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uUm91dGVySG9zdCA9ICctIE9TUk0gaG9zdGluZyBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL2FsZ28yLml0aS5raXQuZWR1L1wiPktJVDwvYT4nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIjFcIjpcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGlvblJvdXRlckhvc3QgPSAnLSBPU1JNIGhvc3RpbmcgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHA6Ly9hbGdvMi5pdGkua2l0LmVkdS9cIj5LSVQ8L2E+JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIyXCI6XG4gICAgICAgICAgICAgICAgYXR0cmlidXRpb25Sb3V0ZXJIb3N0ID0gJ1xcJy0gT1JTIGhvc3RpbmcgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3Lmdlb2cudW5pLWhlaWRlbGJlcmcuZGUvZ2lzL2hlaWdpdF9lbi5odG1sXCI+SGVpR0lUPC9hPlxcJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgLy9Ub0RvIGNoZWNrIHBhcmFtc1xuICAgICAgYXR0cmlidXRpb25IdG1sID0gYXR0cmlidXRpb25Sb3V0ZXIgKyBhdHRyaWJ1dGlvblNlYXJjaCArIGF0dHJpYnV0aW9uUm91dGVySG9zdDtcbiAgICAgIGF0dHJpYnV0aW9uV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgYXR0cmlidXRpb25XcmFwcGVyLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5ST1VURVJfQVRUUklCVVRJT05fV1JBUFBFUjtcblxuICAgICAgYXR0cmlidXRpb25XcmFwcGVyLmlubmVySFRNTCA9IGF0dHJpYnV0aW9uSHRtbDtcblxuICAgICAgaWYgKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2F0dHJpYnV0aW9uKSB7XG4gICAgICAgIGF0dHJpYnV0aW9uV3JhcHBlci5pbm5lckhUTUwgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hdHRyaWJ1dGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGF0dHJpYnV0aW9uV3JhcHBlcjtcblxuICAgIH0sXG5cbiAgICByZWNhbGN1bGF0ZVJvdXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdG1wRmVhdHVyZSxcbiAgICAgIHByb3h5ID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHk7XG5cbiAgICAgIHRoaXMubG9jYXRpb25zU291cmNlLmNsZWFyKCk7XG4gICAgICBpZiAodGhpcy5mcm9tVmFsdWUpIHtcbiAgICAgICAgdG1wRmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICAgICAgICBnZW9tZXRyeTogdGhpcy5mcm9tVmFsdWUuY2xvbmUoKS50cmFuc2Zvcm0oJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2Zyb21fbG9jc3R5bGUgJiYgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3RoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2Zyb21fbG9jc3R5bGVdKSB7XG4gICAgICAgICAgdG1wRmVhdHVyZS5zZXRTdHlsZShwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfZnJvbV9sb2NzdHlsZV0uc3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9jYXRpb25zU291cmNlLmFkZEZlYXR1cmUodG1wRmVhdHVyZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50b1ZhbHVlKSB7XG4gICAgICAgIHRtcEZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgICAgZ2VvbWV0cnk6IHRoaXMudG9WYWx1ZS5jbG9uZSgpLnRyYW5zZm9ybSgnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfdG9fbG9jc3R5bGUgJiYgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3RoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3RvX2xvY3N0eWxlXSkge1xuICAgICAgICAgIHRtcEZlYXR1cmUuc2V0U3R5bGUocHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3RoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3RvX2xvY3N0eWxlXS5zdHlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2NhdGlvbnNTb3VyY2UuYWRkRmVhdHVyZSh0bXBGZWF0dXJlKTtcbiAgICAgIH1cbiAgICAgIGlmKHRoaXMub3ZlclZhbHVlKXtcbiAgICAgICAgICBmb3IodmFyIHByb3B0IGluIHRoaXMub3ZlclZhbHVlKXtcbiAgICAgICAgICAgICAgdG1wRmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiB0aGlzLm92ZXJWYWx1ZVtwcm9wdF0uY2xvbmUoKS50cmFuc2Zvcm0oJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2ludGVyaW1fbG9jc3R5bGUgJiYgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3RoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2ludGVyaW1fbG9jc3R5bGVdKSB7XG4gICAgICAgICAgICAgICAgICB0bXBGZWF0dXJlLnNldFN0eWxlKHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1t0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9pbnRlcmltX2xvY3N0eWxlXS5zdHlsZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5sb2NhdGlvbnNTb3VyY2UuYWRkRmVhdHVyZSh0bXBGZWF0dXJlKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5mcm9tVmFsdWUgJiYgdGhpcy50b1ZhbHVlKSB7XG4gICAgICAgICAgaWYodGhpcy5vdmVyVmFsdWUpe1xuICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1WaWFSb3V0ZSh0aGlzLmZyb21WYWx1ZSwgdGhpcy50b1ZhbHVlLCB0aGlzLm92ZXJWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1WaWFSb3V0ZSh0aGlzLmZyb21WYWx1ZSwgdGhpcy50b1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9LFxuXG4gICAgcGVyZm9ybVZpYVJvdXRlOiBmdW5jdGlvbiAoZnJvbVBvaW50LCB0b1BvaW50LCBvdmVyUG9pbnQpIHtcblxuICAgICAgdmFyIHVybCxcbiAgICAgICAgICBzZWxmLFxuICAgICAgICAgIGZyb21Db29yZCxcbiAgICAgICAgICB0b0Nvb3JkLFxuICAgICAgICAgIG92ZXJDb29yZDtcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGZyb21Db29yZCA9IFtmcm9tUG9pbnQuZ2V0Q29vcmRpbmF0ZXMoKVsxXSwgZnJvbVBvaW50LmdldENvb3JkaW5hdGVzKClbMF1dO1xuICAgICAgdG9Db29yZCA9IFt0b1BvaW50LmdldENvb3JkaW5hdGVzKClbMV0sIHRvUG9pbnQuZ2V0Q29vcmRpbmF0ZXMoKVswXV07XG4gICAgICBpZihvdmVyUG9pbnQpe1xuICAgICAgICAgIG92ZXJDb29yZCA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgIGZvcih2YXIgcHJvcHQgaW4gb3ZlclBvaW50KXtcbiAgICAgICAgICAgICAgb3ZlckNvb3JkLnB1c2goW292ZXJQb2ludFtwcm9wdF0uZ2V0Q29vcmRpbmF0ZXMoKVsxXSwgb3ZlclBvaW50W3Byb3B0XS5nZXRDb29yZGluYXRlcygpWzBdXSk7XG4gICAgICAgICAgfVxuXG4gICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcxJyB8fCB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcyJyl7Ly9PU1JNLUFQSTo1Lnggb3IgT1JTLSBBUElcbiAgICAgICAgICAgIHVybCA9IHNlbGYucm91dGluZ0FwaSArICcvJyArIGZyb21Db29yZCA7XG5cbiAgICAgICAgICAgIGlmKG92ZXJQb2ludCl7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDtpPG92ZXJDb29yZC5sZW5ndGg7aSsrKVxuICAgICAgICAgICAgICAgIHVybCArPScvJytvdmVyQ29vcmRbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cmwgKz0nLycrdG9Db29yZDtcbiAgICAgICAgICAgIGlmKHRoaXMucm91dGVQcm9maWxlICYmIHRoaXMucm91dGVQcm9maWxlLmFjdGl2ZSl7XG4gICAgICAgICAgICAgICAgdXJsICs9ICc/cHJvZmlsZT0nK3RoaXMucm91dGVQcm9maWxlLmFjdGl2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgICAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgICAgICAndXJsJzogdXJsfSlcbiAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zaG93Um91dGUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiAnJztcblxuICAgICAgICB9IGVsc2V7Ly9PU1JNLUFQSTo8NVxuICAgICAgICAgICAgdXJsID0gc2VsZi5yb3V0aW5nQXBpICsgJz9vdXRwdXQ9anNvbiZpbnN0cnVjdGlvbnM9dHJ1ZSZhbHQ9ZmFsc2UmbG9jX2Zyb209JyArIGZyb21Db29yZCArICcmbG9jX3RvPScgKyB0b0Nvb3JkO1xuICAgICAgICAgICAgdGhpcy5zcGlubmVyLnNob3coKTtcblxuICAgICAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgICAgICd1cmwnOiB1cmx9KVxuICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zaG93Um91dGUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuXG4gICAgfSxcblxuICAgIHNob3dSb3V0ZTogZnVuY3Rpb24gKHJvdXRlUmVzcG9uc2UpIHtcblxuICAgICAgdGhpcy5zaG93Um91dGVMYXllcihyb3V0ZVJlc3BvbnNlLDApO1xuICAgICAgdGhpcy5zaG93Um91dGVJbnN0cnVjdGlvbnMocm91dGVSZXNwb25zZSwwKTtcbiAgICB9LFxuICAgIHNob3dBbHRSb3V0ZTogZnVuY3Rpb24gKHJvdXRlUmVzcG9uc2UsIHJvdXRlTnVtYmVyKXtcbiAgICAgIHRoaXMuc2hvd1JvdXRlTGF5ZXIocm91dGVSZXNwb25zZSxyb3V0ZU51bWJlcik7XG4gICAgICB0aGlzLnNob3dSb3V0ZUluc3RydWN0aW9ucyhyb3V0ZVJlc3BvbnNlLHJvdXRlTnVtYmVyKTtcbiAgICB9LFxuXG4gICAgc2hvd1JvdXRlTGF5ZXI6IGZ1bmN0aW9uIChyb3V0ZVJlc3BvbnNlLHJvdXRlTnVtYmVyKSB7XG5cbiAgICAgIHZhciBtYXBWaWV3LFxuICAgICAgICAgIHdheVBvbHlsaW5lLFxuICAgICAgICAgIHJvdXRlRmVhdHVyZXMsXG4gICAgICAgICAgYWx0Um91dGVGZWF0dXJlcyxcbiAgICAgICAgICByaWdodFBhZGRpbmcsXG4gICAgICAgICAgbGVmdFBhZGRpbmcsXG4gICAgICAgICAgcm91dGVOdW1iZXIgPSByb3V0ZU51bWJlciB8fCAwO1xuXG4gICAgICBpZihyb3V0ZVJlc3BvbnNlKSB7XG4gICAgICAgICAgdGhpcy5yb3V0aW5nV2F5U291cmNlLmNsZWFyKCk7XG4gICAgICAgICAgdGhpcy5yb3V0aW5nQWx0V2F5U291cmNlLmNsZWFyKCk7XG4gICAgICAgICAgbWFwVmlldyA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA9PSAnMScgfHx0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcyJyApIHsvL09TUk0tQVBJOjUueFxuICAgICAgICAgICAgICB3YXlQb2x5bGluZSA9IG5ldyBvbC5mb3JtYXQuUG9seWxpbmUoKTtcblxuICAgICAgICAgICAgICAvLyBhZGQgcm91dGVcblxuICAgICAgICAgICAgICBpZiAocm91dGVSZXNwb25zZS5yb3V0ZXMgJiYgcm91dGVSZXNwb25zZS5yb3V0ZXNbMV0pIHsvL2NoZWNrIGZvciBhbHRlcm5hdGl2ZSByb3V0ZVxuICAgICAgICAgICAgICAgICAgaWYgKHJvdXRlTnVtYmVyID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhbHRSb3V0ZUZlYXR1cmVzID0gd2F5UG9seWxpbmUucmVhZEZlYXR1cmVzKHJvdXRlUmVzcG9uc2Uucm91dGVzWzBdLmdlb21ldHJ5LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246IG1hcFZpZXcuZ2V0UHJvamVjdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgYWx0Um91dGVGZWF0dXJlc1swXS5zZXRJZCgwKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGFsdFJvdXRlRmVhdHVyZXMgPSB3YXlQb2x5bGluZS5yZWFkRmVhdHVyZXMocm91dGVSZXNwb25zZS5yb3V0ZXNbMV0uZ2VvbWV0cnksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb246ICdFUFNHOjQzMjYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogbWFwVmlldy5nZXRQcm9qZWN0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICBhbHRSb3V0ZUZlYXR1cmVzWzBdLnNldElkKDEpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJvdXRlRmVhdHVyZXMgPSB3YXlQb2x5bGluZS5yZWFkRmVhdHVyZXMocm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmdlb21ldHJ5LCB7XG4gICAgICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogbWFwVmlldy5nZXRQcm9qZWN0aW9uKClcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJvdXRlRmVhdHVyZXNbMF0uc2V0SWQocm91dGVOdW1iZXIpO1xuXG5cbiAgICAgICAgICB9IGVsc2Ugey8vT1NSTS1BUEk6PDVcbiAgICAgICAgICAgICAgd2F5UG9seWxpbmUgPSBuZXcgb2wuZm9ybWF0LlBvbHlsaW5lKHtcbiAgICAgICAgICAgICAgICAgICdmYWN0b3InOiB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl92aWFyb3V0ZV9wcmVjaXNpb24gfHwgMWU2XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIC8vIGFkZCByb3V0ZVxuICAgICAgICAgICAgICByb3V0ZUZlYXR1cmVzID0gd2F5UG9seWxpbmUucmVhZEZlYXR1cmVzKHJvdXRlUmVzcG9uc2Uucm91dGVfZ2VvbWV0cnksIHtcbiAgICAgICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBtYXBWaWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FsdGVybmF0aXZlID09ICcxJykge1xuICAgICAgICAgICAgICBpZiAocm91dGVSZXNwb25zZS5yb3V0ZXMgJiYgKHJvdXRlUmVzcG9uc2Uucm91dGVzLmxlbmd0aCA+IDEpICYmIChyb3V0ZVJlc3BvbnNlLnJvdXRlc1sxXSkpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMucm91dGluZ0FsdFdheVNvdXJjZS5hZGRGZWF0dXJlcyhhbHRSb3V0ZUZlYXR1cmVzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnJvdXRpbmdXYXlTb3VyY2UuYWRkRmVhdHVyZXMocm91dGVGZWF0dXJlcyk7XG4gICAgICAgICAgLy8gcmVuZGVyIHZpZXdcbiAgICAgICAgICAvLyBzbyB0aGUgcm91dGUgZ2V0cyBkcmF3biBiZWZvcmUgdGhlIGFuaW1hdGlvbiBzdGFydHNcbiAgICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVuZGVyU3luYygpO1xuXG4gICAgICAgICAgLy8gYW5pbWF0aW9uXG4gICAgICAgICAgbWFwVmlldy5hbmltYXRlKHtcbiAgICAgICAgICAgICAgc3RhcnQ6ICtuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogMjAwMCxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjogbWFwVmlldy5nZXRSZXNvbHV0aW9uKCksXG4gICAgICAgICAgICAgIGNlbnRlcjogWzAsIDBdXG4gICAgICAgICAgICAgIC8vcm90YXRpb246IE1hdGguUElcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYmVmb3JlUmVuZGVyKFxuICAgICAgICAgIC8vICAgICBvbC5hbmltYXRpb24ucGFuKHtcbiAgICAgICAgICAvLyAgICAgICBzdGFydDogK25ldyBEYXRlKCksXG4gICAgICAgICAgLy8gICAgICAgZHVyYXRpb246IDIwMDAsXG4gICAgICAgICAgLy8gICAgICAgc291cmNlOiBtYXBWaWV3LmdldENlbnRlcigpXG4gICAgICAgICAgLy8gICAgIH0pLFxuICAgICAgICAgIC8vICAgICBvbC5hbmltYXRpb24uem9vbSh7XG4gICAgICAgICAgLy8gICAgICAgc3RhcnQ6ICtuZXcgRGF0ZSgpLFxuICAgICAgICAgIC8vICAgICAgIGR1cmF0aW9uOiAyMDAwLFxuICAgICAgICAgIC8vICAgICAgIHJlc29sdXRpb246IG1hcFZpZXcuZ2V0UmVzb2x1dGlvbigpXG4gICAgICAgICAgLy8gICAgIH0pXG4gICAgICAgICAgLy8gKTtcblxuICAgICAgICAgIC8vIGNhbGN1bGF0ZSBwYWRkaW5nXG4gICAgICAgICAgbGVmdFBhZGRpbmcgPSAwO1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5hY3RpdmVQb3J0c2lkZSAmJiB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5hY3RpdmVQb3J0c2lkZS5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgbGVmdFBhZGRpbmcgPSAkKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmFjdGl2ZVBvcnRzaWRlLmNvbnRhaW5lcikub3V0ZXJXaWR0aCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJpZ2h0UGFkZGluZyA9IDA7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmFjdGl2ZVN0YXJib2FyZCAmJiB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5hY3RpdmVTdGFyYm9hcmQuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgIHJpZ2h0UGFkZGluZyA9ICQodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuYWN0aXZlU3RhcmJvYXJkLmNvbnRhaW5lcikub3V0ZXJXaWR0aCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGNlbnRlciBvbiByb3V0ZVxuICAgICAgICAgIG1hcFZpZXcuZml0KFxuICAgICAgICAgICAgICByb3V0ZUZlYXR1cmVzWzBdLmdldEdlb21ldHJ5KCksXG4gICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRTaXplKCksXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IFswLCByaWdodFBhZGRpbmcsIDAsIGxlZnRQYWRkaW5nXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuXG5cblxuICAgICAgZ2V0SW5zdHJ1Y3Rpb25JY29uOiBmdW5jdGlvbihzdHJNb2Qsc3RyVHlwZSkge1xuICAgICAgICAgIHZhciBpbWFnZSA9IFwiXCI7XG5cbiAgICAgICAgICBzd2l0Y2goc3RyTW9kKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBcInR1cm4tcmlnaHQucG5nXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgICAgICAgICAgIGltYWdlID0gXCJ0dXJuLWxlZnQucG5nXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNoYXJwIGxlZnRcIjpcbiAgICAgICAgICAgICAgICAgIGltYWdlID0gXCJzaGFycC1sZWZ0LnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJzaGFycCByaWdodFwiOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBcInNoYXJwLXJpZ2h0LnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJzbGlnaHQgbGVmdFwiOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBcInNsaWdodC1sZWZ0LnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJzbGlnaHQgcmlnaHRcIjpcbiAgICAgICAgICAgICAgICAgIGltYWdlID0gXCJzbGlnaHQtcmlnaHQucG5nXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInV0dXJuXCI6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9IFwidS10dXJuLnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJzdHJhaWdodFwiOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBcImNvbnRpbnVlLnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9XCJkZWZhdWx0LnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXRjaChzdHJUeXBlKXtcbiAgICAgICAgICAgICAgY2FzZSBcImRlcGFydFwiOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPVwiaGVhZC5wbmdcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiYXJyaXZlXCI6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9XCJ0YXJnZXQucG5nXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInJvdW5kYWJvdXRcIjpcbiAgICAgICAgICAgICAgICAgIGltYWdlID1cInJvdW5kLWFib3V0LnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gXCJidW5kbGVzL2NvbjRnaXNtYXBzL3ZlbmRvci9vc3JtL2ltYWdlcy9cIiArIGltYWdlO1xuICAgICAgfSxcbiAgICAgIGdldEluc3RydWN0aW9uSWNvbk9SUzogZnVuY3Rpb24oaW50VHlwZSl7XG4gICAgICAgIGxldCBpbWFnZTtcbiAgICAgICAgc3dpdGNoKGludFR5cGUpe1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGltYWdlID0gXCJ0dXJuLWxlZnQucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBcInR1cm4tcmlnaHQucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBcInNoYXJwLWxlZnQucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBcInNoYXJwLXJpZ2h0LnBuZ1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGltYWdlID0gXCJzbGlnaHQtbGVmdC5wbmdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBpbWFnZSA9IFwic2xpZ2h0LXJpZ2h0LnBuZ1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIGltYWdlID0gXCJjb250aW51ZS5wbmdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBpbWFnZSA9IFwicm91bmQtYWJvdXQucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBcInJvdW5kLWFib3V0LnBuZ1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGltYWdlID0gXCJ1LXR1cm4ucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgIGltYWdlID0gXCJ0YXJnZXQucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgIGltYWdlID0gXCJoZWFkLnBuZ1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICBpbWFnZSA9IFwic2xpZ2h0LWxlZnQucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgIGltYWdlID0gXCJzbGlnaHQtcmlnaHQucG5nXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYmFzZScpWzBdLmhyZWYgKyBcImJ1bmRsZXMvY29uNGdpc21hcHMvdmVuZG9yL29zcm0vaW1hZ2VzL1wiICsgaW1hZ2U7XG4gICAgICB9LFxuXG4gICAgICBnZXRUeXBlVGV4dDogZnVuY3Rpb24oc3RyVHlwZSkge1xuICAgICAgICAgIHZhciB0ZXh0SUQ7XG5cbiAgICAgICAgICBzd2l0Y2goc3RyVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFwidHVyblwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX1RZUEVfMFwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJuZXcgbmFtZVwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX1RZUEVfMVwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJkZXBhcnRcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9UWVBFXzJcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiYXJyaXZlXCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfVFlQRV8zXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcIm1lcmdlXCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfVFlQRV80XCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcIm9uIHJhbXBcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9UWVBFXzVcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwib2ZmIHJhbXBcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9UWVBFXzZcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiZm9ya1wiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX1RZUEVfN1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmQgb2Ygcm9hZFwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX1RZUEVfOFwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ1c2UgbGFuZVwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX1RZUEVfOVwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJjb250aW51ZVwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX1RZUEVfMTBcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwicm91bmRhYm91dFwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZXhpdCByb3VuZGFib3V0XCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfVFlQRV8xMVwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJyb3RhcnlcIjpcbiAgICAgICAgICAgICAgY2FzZSBcImV4aXQgcm90YXJ5XCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfVFlQRV8xMlwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJyb3VuZGFib3V0IHR1cm5cIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9UWVBFXzEzXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcIm5vdGlmaWNhdGlvblwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX1RZUEVfMTRcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBsYW5nQ29uc3RhbnRzW3RleHRJRF07XG4gICAgICB9LFxuXG4gICAgICBnZXRNb2RpZmllclRleHQ6IGZ1bmN0aW9uKHN0ck1vZGlmaWVyKSB7XG4gICAgICAgICAgdmFyIHRleHRJRDtcblxuICAgICAgICAgIHN3aXRjaChzdHJNb2RpZmllcikge1xuICAgICAgICAgICAgICBjYXNlIFwidXR1cm5cIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9NT0RfMFwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJzaGFycCByaWdodFwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX01PRF8xXCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfTU9EXzJcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwic2xpZ2h0IHJpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfTU9EXzNcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwic3RyYWlnaHRcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9NT0RfNFwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJzbGlnaHQgbGVmdFwiOlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX01PRF81XCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgICAgICAgICAgIHRleHRJRCA9IFwiUk9VVEVSXzUuWF9NT0RfNlwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJzaGFycCBsZWZ0XCI6XG4gICAgICAgICAgICAgICAgICB0ZXh0SUQgPSBcIlJPVVRFUl81LlhfTU9EXzdcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgdGV4dElEID0gXCJST1VURVJfNS5YX01PRF84XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBsYW5nQ29uc3RhbnRzW3RleHRJRF07XG4gICAgICB9LFxuICAgICAgZ2V0RHJpdmluZ0luc3RydWN0aW9uSWNvbjogZnVuY3Rpb24gKGluc3RydWN0aW9uSWQpIHtcbiAgICAgICAgICB2YXIgaWQsXG4gICAgICAgICAgICAgIGltYWdlO1xuXG4gICAgICAgICAgaWQgPSBpbnN0cnVjdGlvbklkLnJlcGxhY2UoL14xMS1cXGR7MSx9JC8sIFwiMTFcIik7ICAgIC8vIGR1bWIgY2hlY2ssIGlmIHRoZXJlIGlzIGEgcm91bmRhYm91dCAoYWxsIGhhdmUgdGhlIHNhbWUgaWNvbilcblxuICAgICAgICAgIGltYWdlID0gJ2RlZmF1bHQucG5nJztcblxuICAgICAgICAgIHN3aXRjaCAoaWQpIHtcbiAgICAgICAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9ICdjb250aW51ZS5wbmcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJzInOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSAnc2xpZ2h0LXJpZ2h0LnBuZyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnMyc6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9ICd0dXJuLXJpZ2h0LnBuZyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnNCc6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9ICdzaGFycC1yaWdodC5wbmcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJzUnOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSAndS10dXJuLnBuZyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnNic6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9ICdzaGFycC1sZWZ0LnBuZyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnNyc6XG4gICAgICAgICAgICAgICAgICBpbWFnZSA9ICd0dXJuLWxlZnQucG5nJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICc4JzpcbiAgICAgICAgICAgICAgICAgIGltYWdlID0gJ3NsaWdodC1sZWZ0LnBuZyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnMTAnOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSAnaGVhZC5wbmcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJzExJzpcbiAgICAgICAgICAgICAgICAgIGltYWdlID0gJ3JvdW5kLWFib3V0LnBuZyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnMTUnOlxuICAgICAgICAgICAgICAgICAgaW1hZ2UgPSAndGFyZ2V0LnBuZyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdiYXNlJylbMF0uaHJlZiArIFwiYnVuZGxlcy9jb240Z2lzbWFwcy92ZW5kb3Ivb3NybS9pbWFnZXMvXCIgKyBpbWFnZTtcblxuICAgICAgfSxcbiAgICAgIGdldFRleHQ6IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgICAgICAgdmFyIHRleHRfaWQgPSBcIlJPVVRFUl9cIiArIGlkO1xuXG4gICAgICAgICAgaWYgKGxhbmdDb25zdGFudHNbdGV4dF9pZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4odGV4dF9pZCArIFwiIGNhbid0IGZpbmQgaW4gbGFuZ3VhZ2UgZmlsZXMuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbGFuZ0NvbnN0YW50c1t0ZXh0X2lkXTtcbiAgICAgIH0sXG5cbiAgICAgIGdldERyaXZpbmdJbnN0cnVjdGlvbjogZnVuY3Rpb24gKGluc3RydWN0aW9uSWQpIHtcblxuICAgICAgICAgIHZhciBpZCxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb247XG5cbiAgICAgICAgICBpZCA9IFwiRElSRUNUSU9OX1wiICsgaW5zdHJ1Y3Rpb25JZC5yZXBsYWNlKC9eMTEtXFxkezIsfSQvLCBcIjExLXhcIik7ICAgLy8gZHVtYiBjaGVjaywgaWYgdGhlcmUgYXJlIDEwKyBleGl0cyBvbiBhIHJvdW5kYWJvdXQgKHNheSB0aGUgc2FtZSBmb3IgZXhpdCAxMCspXG5cbiAgICAgICAgICBkZXNjcmlwdGlvbiA9IHRoaXMuZ2V0VGV4dChpZCk7XG4gICAgICAgICAgaWYgKCFkZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9IHRoaXMuZ2V0VGV4dCgnRElSRUNUSU9OXzAnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgICB9LFxuICAgICAgc2hvd1JvdXRlSW5zdHJ1Y3Rpb25zOiBmdW5jdGlvbiAocm91dGVSZXNwb25zZSxyb3V0ZU51bWJlcikge1xuXG4gICAgICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uLFxuICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIZWFkZXIsXG4gICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwsXG4gICAgICAgICAgICAgIGluc3RyLFxuICAgICAgICAgICAgICBzdHJUeXBlLFxuICAgICAgICAgICAgICBzdHJNb2QsXG4gICAgICAgICAgICAgIHJvd3N0eWxlLFxuICAgICAgICAgICAgICByb3V0ZU51bWJlciA9IHJvdXRlTnVtYmVyIHx8IDAsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIGosXG4gICAgICAgICAgICAgIHJvdXRlX25hbWVfMCA9IFwiXCIsXG4gICAgICAgICAgICAgIHJvdXRlX25hbWVfMSA9IFwiXCIsXG4gICAgICAgICAgICAgIHRvdGFsX2Rpc3RhbmNlID0gXCJcIixcbiAgICAgICAgICAgICAgdG90YWxfdGltZSA9IFwiXCI7XG5cbiAgICAgICAgICBzZWxmID0gdGhpcztcblxuXG4gICAgICAgICAgaWYgKHNlbGYucm91dGVySW5zdHJ1Y3Rpb25zV3JhcHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHNlbGYucm91dGVySW5zdHJ1Y3Rpb25zV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICBzZWxmLnJvdXRlckluc3RydWN0aW9uc1dyYXBwZXIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfV1JBUFBFUjtcbiAgICAgICAgICAgICAgc2VsZi5yb3V0ZXJWaWV3Q29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZi5yb3V0ZXJJbnN0cnVjdGlvbnNXcmFwcGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkKHNlbGYucm91dGVySW5zdHJ1Y3Rpb25zV3JhcHBlcikuZW1wdHkoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIZWFkZXIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSEVBREVSO1xuXG4gICAgICAgICAgaWYgKHJvdXRlUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT0gJzEnKSB7Ly9PU1JNLUFQSTo1LnhcbiAgICAgICAgICAgICAgICAgIGlmIChyb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0ubGVnc1swXS5zdW1tYXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVfbmFtZV8wID0gcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmxlZ3NbMF0uc3VtbWFyeS5zcGxpdChcIixcIilbMF07XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVfbmFtZV8xID0gcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmxlZ3NbMF0uc3VtbWFyeS5zcGxpdChcIixcIilbMV07XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5sZWdzWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlX25hbWVfMSA9IHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5sZWdzWzFdLnN1bW1hcnkuc3BsaXQoXCIsXCIpWzFdO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdG90YWxfZGlzdGFuY2UgPSB0aGlzLnRvSHVtYW5EaXN0YW5jZShyb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0uZGlzdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgdG90YWxfdGltZSA9IHRoaXMudG9IdW1hblRpbWUocm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgZWxzZSBpZih0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcwJykgey8vT1NSTS1BUEk6PDVcbiAgICAgICAgICAgICAgaWYgKHJvdXRlUmVzcG9uc2Uucm91dGVfbmFtZSkge1xuICAgICAgICAgICAgICAgICAgcm91dGVfbmFtZV8wID0gcm91dGVSZXNwb25zZS5yb3V0ZV9uYW1lWzBdO1xuICAgICAgICAgICAgICAgICAgcm91dGVfbmFtZV8xID0gcm91dGVSZXNwb25zZS5yb3V0ZV9uYW1lWzFdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHJvdXRlUmVzcG9uc2Uucm91dGVfc3VtbWFyeSkge1xuICAgICAgICAgICAgICAgICAgdG90YWxfZGlzdGFuY2UgPSB0aGlzLnRvSHVtYW5EaXN0YW5jZShyb3V0ZVJlc3BvbnNlLnJvdXRlX3N1bW1hcnkudG90YWxfZGlzdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgdG90YWxfdGltZSA9IHRoaXMudG9IdW1hblRpbWUocm91dGVSZXNwb25zZS5yb3V0ZV9zdW1tYXJ5LnRvdGFsX3RpbWUpO1xuICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcyJyl7Ly9PU1ItQVBJXG4gICAgICAgICAgICAgICAgICB0b3RhbF90aW1lID0gdGhpcy50b0h1bWFuVGltZShyb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0uc3VtbWFyeS5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICB0b3RhbF9kaXN0YW5jZSA9IHRoaXMudG9IdW1hbkRpc3RhbmNlKHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5zdW1tYXJ5LmRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgaWYocm91dGVfbmFtZV8wICYmIHJvdXRlX25hbWVfMSl7XG4gICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0hlYWRlci5pbm5lckhUTUwgPSAnPGxhYmVsPicgKyBsYW5nQ29uc3RhbnRzLlJPVVRFUl9WSUVXX0xBQkVMX1JPVVRFICsgJzwvbGFiZWw+IDxlbT4nICsgcm91dGVfbmFtZV8wICsgJyAmIzg1OTQ7ICcgKyByb3V0ZV9uYW1lXzEgKyAnPC9lbT48YnI+JyArICc8bGFiZWw+JyArIGxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfTEFCRUxfRElTVEFOQ0UgKyAnPC9sYWJlbD4gPGVtPicgKyB0b3RhbF9kaXN0YW5jZSArICc8L2VtPjxicj4nICsgJzxsYWJlbD4nICsgbGFuZ0NvbnN0YW50cy5ST1VURVJfVklFV19MQUJFTF9USU1FICsgJzwvbGFiZWw+IDxlbT4nICsgdG90YWxfdGltZSArICc8L2VtPjxicj4nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKHRoaXMucm91dGVQcm9maWxlLmFjdGl2ZSl7XG4gICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0hlYWRlci5pbm5lckhUTUwgPSAnPGxhYmVsPicgKyBsYW5nQ29uc3RhbnRzLlJPVVRFUl9WSUVXX0xBQkVMX1BST0ZJTEUgKyAnPC9sYWJlbD4gPGVtPicrdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcHJvZmlsZXNbdGhpcy5yb3V0ZVByb2ZpbGUuYWN0aXZlXSAgKyAnPC9lbT48YnI+JyArICc8bGFiZWw+JyArIGxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfTEFCRUxfRElTVEFOQ0UgKyAnPC9sYWJlbD4gPGVtPicgKyB0b3RhbF9kaXN0YW5jZSArICc8L2VtPjxicj4nICsgJzxsYWJlbD4nICsgbGFuZ0NvbnN0YW50cy5ST1VURVJfVklFV19MQUJFTF9USU1FICsgJzwvbGFiZWw+IDxlbT4nICsgdG90YWxfdGltZSArICc8L2VtPjxicj4nO1xuICAgICAgICAgIH1cblxuXG5cbiAgICAgICAgICBzZWxmLnJvdXRlckluc3RydWN0aW9uc1dyYXBwZXIuYXBwZW5kQ2hpbGQocm91dGVySW5zdHJ1Y3Rpb25zSGVhZGVyKTtcblxuICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sID0gJzx0YWJsZSBjbGFzcz1cIicgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19UQUJMRSArICdcIiBjZWxscGFkZGluZz1cIjBcIiBjZWxsc3BhY2luZz1cIjBcIj4nO1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09PSAnMScpIHsvL09TUk0tQVBJOjUueFxuICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmxlZ3MubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0ubGVnc1tqXS5zdGVwcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGluc3RyID0gcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmxlZ3Nbal0uc3RlcHNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgICBzdHJUeXBlID0gaW5zdHIubWFuZXV2ZXIudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdHIubWFuZXV2ZXIubW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyTW9kID0gaW5zdHIubWFuZXV2ZXIubW9kaWZpZXI7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHJvd3N0eWxlID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9PREQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c3R5bGUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0VWRU47XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgcm93c3R5bGUgKz0gXCIgXCIgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPHRyIGNsYXNzPVwiJyArIHJvd3N0eWxlICsgJ1wiPic7XG5cbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8dGQgY2xhc3M9XCInICsgY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT04gKyAnXCI+JztcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8aW1nIGNsYXNzPVwiJyArIGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0lDT04gKyAnXCIgc3JjPVwiJyArIHRoaXMuZ2V0SW5zdHJ1Y3Rpb25JY29uKHN0ck1vZCwgc3RyVHlwZSkgKyAnXCIgYWx0PVwiXCIvPic7XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPC90ZD4nO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8dGQgY2xhc3M9XCInICsgY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT05fVEVYVCArICdcIiBkYXRhLXBvcz1cIicgKyBpbnN0ci5tYW5ldXZlci5sb2NhdGlvbiArICdcIj4nO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBidWlsZCByb3V0ZSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnN0cnVjdGlvbnRleHQgPSB0aGlzLmdldFR5cGVUZXh0KGluc3RyLm1hbmV1dmVyLnR5cGUpLnJlcGxhY2UoLyVzLywgaW5zdHIubmFtZSkucmVwbGFjZSgvJW0vLCB0aGlzLmdldE1vZGlmaWVyVGV4dChpbnN0ci5tYW5ldXZlci5tb2RpZmllcikpLnJlcGxhY2UoLyV6LywgaW5zdHIubWFuZXV2ZXIuZXhpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RyLm5hbWUubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbnRleHQgPSBpbnN0cnVjdGlvbnRleHQucmVwbGFjZSgvXFxbLio/XFxdL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbnRleHQgPSBpbnN0cnVjdGlvbnRleHQucmVwbGFjZSgvXFxbKC4qKVxcXS8sIFwiJDFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gaW5zdHJ1Y3Rpb250ZXh0O1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8L2Rpdj4nO1xuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gXCI8L3RkPlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPHRkIGNsYXNzPVwiJyArIGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0RJU1RBTkNFICsgJ1wiPic7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5sZWdzWzBdLnN0ZXBzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSB0aGlzLnRvSHVtYW5EaXN0YW5jZShpbnN0ci5kaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gXCI8L3RkPlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSBcIjwvdHI+XCI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZih0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09PSAnMCcpey8vT1NSTS1BUEk6PDVcbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJvdXRlUmVzcG9uc2Uucm91dGVfaW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBpbnN0ciA9IHJvdXRlUmVzcG9uc2Uucm91dGVfaW5zdHJ1Y3Rpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgcm93c3R5bGUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX09ERDtcblxuICAgICAgICAgICAgICAgICAgaWYgKGkgJSAyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcm93c3R5bGUgPSBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0VWRU47XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHJvd3N0eWxlICs9IFwiIFwiICsgY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTTtcblxuICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPHRyIGNsYXNzPVwiJyArIHJvd3N0eWxlICsgJ1wiPic7XG5cbiAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzx0ZCBjbGFzcz1cIicgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTiArICdcIj4nO1xuICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPGltZyBjbGFzcz1cIicgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9JQ09OICsgJ1wiIHNyYz1cIicgKyB0aGlzLmdldERyaXZpbmdJbnN0cnVjdGlvbkljb24oaW5zdHJbMF0pICsgJ1wiIGFsdD1cIlwiLz4nO1xuICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPC90ZD4nO1xuXG4gICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8dGQgY2xhc3M9XCInICsgY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT05fVEVYVCArICdcIiBkYXRhLXBvcz1cIicgKyBpbnN0clszXSArICdcIj4nO1xuXG4gICAgICAgICAgICAgICAgICAvLyBidWlsZCByb3V0ZSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgaWYgKGluc3RyWzFdICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSB0aGlzLmdldERyaXZpbmdJbnN0cnVjdGlvbihpbnN0clswXSkucmVwbGFjZSgvXFxbKC4qKVxcXS8sIFwiJDFcIikucmVwbGFjZSgvJXMvLCBpbnN0clsxXSkucmVwbGFjZSgvJWQvLCB0aGlzLmdldFRleHQoaW5zdHJbNl0pKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSB0aGlzLmdldERyaXZpbmdJbnN0cnVjdGlvbihpbnN0clswXSkucmVwbGFjZSgvXFxbKC4qKVxcXS8sIFwiXCIpLnJlcGxhY2UoLyVkLywgdGhpcy5nZXRUZXh0KGluc3RyWzZdKSk7XG4gICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gXCI8L3RkPlwiO1xuXG4gICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8dGQgY2xhc3M9XCInICsgY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT05fRElTVEFOQ0UgKyAnXCI+JztcbiAgICAgICAgICAgICAgICAgIGlmIChpICE9PSByb3V0ZVJlc3BvbnNlLnJvdXRlX2luc3RydWN0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSB0aGlzLnRvSHVtYW5EaXN0YW5jZShpbnN0cls1XSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9IFwiPC90ZD5cIjtcblxuICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSBcIjwvdHI+XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZih0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09PSAnMicgKXsvL09wZW5Sb3V0ZVNlcnZpY2VcbiAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5zZWdtZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5zZWdtZW50c1tqXS5zdGVwcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGluc3RyID0gcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLnNlZ21lbnRzW2pdLnN0ZXBzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgc3RyVHlwZSA9IGluc3RyLnR5cGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICByb3dzdHlsZSA9IGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fT0REO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGkgJSAyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3N0eWxlID0gY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9FVkVOO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIHJvd3N0eWxlICs9IFwiIFwiICsgY3NzQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTTtcblxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzx0ciBjbGFzcz1cIicgKyByb3dzdHlsZSArICdcIj4nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPHRkIGNsYXNzPVwiJyArIGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OICsgJ1wiPic7XG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPGltZyBjbGFzcz1cIicgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9JQ09OICsgJ1wiIHNyYz1cIicgKyB0aGlzLmdldEluc3RydWN0aW9uSWNvbk9SUyhzdHJUeXBlKSArICdcIiBhbHQ9XCJcIi8+JztcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8L3RkPic7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZihpbnN0ci5tYW5ldXZlcil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzx0ZCBjbGFzcz1cIicgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9URVhUICsgJ1wiIGRhdGEtcG9zPVwiJyArIGluc3RyLm1hbmV1dmVyLmxvY2F0aW9uICsgJ1wiPic7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzx0ZCBjbGFzcz1cIicgKyBjc3NDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9URVhUICsgJ1wiIGRhdGEtcG9zPVwiJyArIDAgKyAnXCI+JztcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1aWxkIHJvdXRlIGRlc2NyaXB0aW9uXG5cbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9IGluc3RyLmluc3RydWN0aW9uO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8L2Rpdj4nO1xuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gXCI8L3RkPlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zSHRtbCArPSAnPHRkIGNsYXNzPVwiJyArIGNzc0NvbnN0YW50cy5ST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0RJU1RBTkNFICsgJ1wiPic7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5zZWdtZW50c1swXS5zdGVwcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gdGhpcy50b0h1bWFuRGlzdGFuY2UoaW5zdHIuZGlzdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9IFwiPC90ZD5cIjtcblxuICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gXCI8L3RyPlwiO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG5cbiAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sICs9ICc8L3RhYmxlPic7XG5cbiAgICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbi5pbm5lckhUTUwgPSByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sO1xuXG4gICAgICAgICAgc2VsZi5yb3V0ZXJJbnN0cnVjdGlvbnNXcmFwcGVyLmFwcGVuZENoaWxkKHJvdXRlckluc3RydWN0aW9uKTtcblxuICAgICAgICAgIHRoaXMuYWRqdXN0SW5zdHJ1Y3Rpb25NYXBJbnRlcmFjdGlvbigpO1xuXG4gICAgICB9XG4gICAgfSxcblxuICAgIGFkanVzdEluc3RydWN0aW9uTWFwSW50ZXJhY3Rpb246IGZ1bmN0aW9uIChyb3V0ZXJJbnN0cnVjdGlvbikge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIGZuSXRlbUNsaWNrLFxuICAgICAgICAgIGZuSXRlbU92ZXIsXG4gICAgICAgICAgZm5JdGVtT3V0O1xuXG4gICAgICBmbkl0ZW1DbGljayA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgaWYgKHNlbGYucm91dGluZ1dheVNvdXJjZSAmJiBzZWxmLnJvdXRpbmdXYXlTb3VyY2UuZ2V0RmVhdHVyZXMoKSAmJiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcwJyApIHtcbiAgICAgICAgICAgICAgdmFyIGZlYXR1cmUgPSBzZWxmLnJvdXRpbmdXYXlTb3VyY2UuZ2V0RmVhdHVyZXMoKVswXTtcbiAgICAgICAgICAgICAgaWYgKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q29vcmRpbmF0ZXMgPSBmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKVtlbGVtZW50LmRhdGEoJ3BvcycpXTtcbiAgICAgICAgICAgICAgICAgIHNlbGYucm91dGluZ0hpbnRTb3VyY2UuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SGludEZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IG5ldyBvbC5nZW9tLlBvaW50KGN1cnJlbnRDb29yZGluYXRlcylcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgc2VsZi5yb3V0aW5nSGludFNvdXJjZS5hZGRGZWF0dXJlKGN1cnJlbnRIaW50RmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLnNldENlbnRlcihjdXJyZW50Q29vcmRpbmF0ZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHNlbGYucm91dGluZ1dheVNvdXJjZSAmJiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID49ICcxJyl7XG4gICAgICAgICAgICAgIHNlbGYucm91dGluZ0hpbnRTb3VyY2UuY2xlYXIoKTtcbiAgICAgICAgICAgICAgdmFyIGNvb3JkTG9uTGF0ID0gZWxlbWVudC5kYXRhKCdwb3MnKTtcbiAgICAgICAgICAgICAgdmFyIHN0cmluZ2xvbmxhdCA9IGNvb3JkTG9uTGF0LnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgICAgc3RyaW5nbG9ubGF0WzBdID0gcGFyc2VGbG9hdChzdHJpbmdsb25sYXRbMF0pO1xuICAgICAgICAgICAgICBzdHJpbmdsb25sYXRbMV0gPSBwYXJzZUZsb2F0KHN0cmluZ2xvbmxhdFsxXSk7XG4gICAgICAgICAgICAgIHZhciBuZXdDb29yZCA9IG9sLnByb2ouZnJvbUxvbkxhdChzdHJpbmdsb25sYXQpO1xuICAgICAgICAgICAgICB2YXIgY3VycmVudEhpbnRGZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoe1xuICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IG5ldyBvbC5nZW9tLlBvaW50KG5ld0Nvb3JkKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBzZWxmLnJvdXRpbmdIaW50U291cmNlLmFkZEZlYXR1cmUoY3VycmVudEhpbnRGZWF0dXJlKTtcbiAgICAgICAgICAgICAgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5zZXRDZW50ZXIobmV3Q29vcmQpO1xuICAgICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZuSXRlbU92ZXIgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoc2VsZi5yb3V0aW5nV2F5U291cmNlICYmIHNlbGYucm91dGluZ1dheVNvdXJjZS5nZXRGZWF0dXJlcygpICYmIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT0gJzAnKSB7XG4gICAgICAgICAgICB2YXIgZmVhdHVyZSA9IHNlbGYucm91dGluZ1dheVNvdXJjZS5nZXRGZWF0dXJlcygpWzBdO1xuICAgICAgICAgICAgaWYgKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnJvdXRpbmdIaW50U291cmNlLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRIaW50RmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IG5ldyBvbC5nZW9tLlBvaW50KGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpW2VsZW1lbnQuZGF0YSgncG9zJyldKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNlbGYucm91dGluZ0hpbnRTb3VyY2UuYWRkRmVhdHVyZShjdXJyZW50SGludEZlYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLnJvdXRpbmdXYXlTb3VyY2UgJiYgc2VsZi5yb3V0aW5nV2F5U291cmNlLmdldEZlYXR1cmVzKCkgJiYgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA+PSAnMScpIHtcbiAgICAgICAgICAgIHZhciBmZWF0dXJlID0gc2VsZi5yb3V0aW5nV2F5U291cmNlLmdldEZlYXR1cmVzKClbMF07XG4gICAgICAgICAgICBpZiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgIHNlbGYucm91dGluZ0hpbnRTb3VyY2UuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgY29vcmRMb25MYXQgPSBlbGVtZW50LmRhdGEoJ3BvcycpO1xuICAgICAgICAgICAgICAgIHZhciBzdHJpbmdsb25sYXQgPSBjb29yZExvbkxhdC5zcGxpdChcIixcIik7XG4gICAgICAgICAgICAgICAgc3RyaW5nbG9ubGF0WzBdID0gcGFyc2VGbG9hdChzdHJpbmdsb25sYXRbMF0pO1xuICAgICAgICAgICAgICAgIHN0cmluZ2xvbmxhdFsxXSA9IHBhcnNlRmxvYXQoc3RyaW5nbG9ubGF0WzFdKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q29vcmQgPSBvbC5wcm9qLmZyb21Mb25MYXQoc3RyaW5nbG9ubGF0KTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEhpbnRGZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoe1xuICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogbmV3IG9sLmdlb20uUG9pbnQobmV3Q29vcmQpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2VsZi5yb3V0aW5nSGludFNvdXJjZS5hZGRGZWF0dXJlKGN1cnJlbnRIaW50RmVhdHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm5JdGVtT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnJvdXRpbmdIaW50U291cmNlLmNsZWFyKCk7XG4gICAgICB9O1xuXG5cbiAgICAgICQoJ1tkYXRhLXBvc10nLCByb3V0ZXJJbnN0cnVjdGlvbikuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcblxuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuXG4gICAgICAgICRlbGVtZW50LmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmbkl0ZW1DbGljaygkZWxlbWVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRlbGVtZW50Lm9uKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZuSXRlbU92ZXIoJGVsZW1lbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkZWxlbWVudC5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmbkl0ZW1PdXQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBjbGVhcklucHV0OiBmdW5jdGlvbiAoJGlucHV0KSB7XG5cbiAgICAgICRpbnB1dC52YWwoJycpO1xuICAgICAgJGlucHV0LnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgdGhpcy5yb3V0aW5nV2F5U291cmNlLmNsZWFyKCk7XG4gICAgICB0aGlzLnJvdXRpbmdBbHRXYXlTb3VyY2UuY2xlYXIoKTtcbiAgICAgIHRoaXMucm91dGluZ0hpbnRTb3VyY2UuY2xlYXIoKTtcblxuXG4gICAgICAkKHRoaXMucm91dGVySW5zdHJ1Y3Rpb25zV3JhcHBlcikuZW1wdHkoKTtcbiAgICAgIHRoaXMucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9LFxuICAgIGNsZWFyT3ZlcjogZnVuY3Rpb24gKCRpbnB1dCwgaW5kZXgpe1xuICAgICAgICBpZih0aGlzLm92ZXJWYWx1ZSl7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5vdmVyVmFsdWVbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJGJ1dHRvbk92ZXIucHJvcChcImRpc2FibGVkXCIsZmFsc2UpO1xuICAgICAgICAkKHRoaXMucm91dGVySW5zdHJ1Y3Rpb25zV3JhcHBlcikuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfSxcblxuICAgIHBlcmZvcm1SZXZlcnNlU2VhcmNoOiBmdW5jdGlvbiAoJGlucHV0LCB2YWx1ZSkge1xuXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgdXJsO1xuXG4gICAgICB1cmwgPSB0aGlzLmdlb1JldmVyc2VTZWFyY2hBcGkgKyAnP2Zvcm1hdD1qc29uJmxhdD0nICsgdmFsdWVbMV0gKyAnJmxvbj0nICsgdmFsdWVbMF07XG4gICAgICB0aGlzLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICd1cmwnOiB1cmx9KVxuICAgICAgICAgIC5kb25lKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5hZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmFkZHJlc3MuY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3BvbnNlLmFkZHJlc3MuY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmFkZHJlc3Mucm9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnLCAnICsgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmFkZHJlc3MudG93bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3BvbnNlLmFkZHJlc3MudG93bjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmFkZHJlc3Mucm9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnLCAnICsgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmFkZHJlc3Mucm9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYWRkcmVzcy5ob3VzZV9udW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJyAnICsgcmVzcG9uc2UuYWRkcmVzcy5ob3VzZV9udW1iZXIgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3BvbnNlLmFkZHJlc3Mucm9hZCArIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByZXNwb25zZS5kaXNwbGF5X25hbWU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKHZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKCRpbnB1dC5hdHRyKCduYW1lJykgPT09IFwicm91dGluZ0Zyb21cIikge1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJHJvdXRlckZyb21DbGVhci5zaG93KCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRpbnB1dC5hdHRyKCduYW1lJykgPT09IFwicm91dGluZ1RvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRyb3V0ZXJUb0NsZWFyLnNob3coKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSlcbiAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgfSk7XG5cbiAgICB9LFxuXG4gICAgcGVyZm9ybVNlYXJjaDogZnVuY3Rpb24gKCRpbnB1dCwgdmFsdWUsIG9wdF9jYWxsYmFjaykge1xuXG4gICAgICB2YXIgbWFwLFxuICAgICAgICAgIGJvdW5kcyxcbiAgICAgICAgICB2aWV3Ym94LFxuICAgICAgICAgIHNlbGYsXG4gICAgICAgICAgdXJsO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgaWYgKCRpbnB1dC52YWwoKSA9PT0gXCJcIikge1xuICAgICAgICAvL3NlbGYuY2xlYXJJbnB1dCgkaW5wdXQpO1xuICAgICAgICBkZWxldGUgc2VsZlt2YWx1ZV07XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfVxuXG4gICAgICBtYXAgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXA7XG4gICAgICBib3VuZHMgPSBtYXAuZ2V0VmlldygpLmNhbGN1bGF0ZUV4dGVudChtYXAuZ2V0U2l6ZSgpKTtcbiAgICAgIGJvdW5kcyA9IG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KGJvdW5kcywgbWFwLmdldFZpZXcoKS5nZXRQcm9qZWN0aW9uKCksICdFUFNHOjQzMjYnKTtcbiAgICAgIHZpZXdib3ggPSAnJnZpZXdib3g9JyArIGJvdW5kc1swXSArICcsJyArIGJvdW5kc1sxXSArICcsJyArIGJvdW5kc1syXSArICcsJyArIGJvdW5kc1szXTtcblxuICAgICAgdXJsID0gc2VsZi5nZW9TZWFyY2hBcGkgKyAnP2Zvcm1hdD1qc29uJmxpbWl0PTEmcT0nICsgZW5jb2RlVVJJKCRpbnB1dC52YWwoKSkgKyB2aWV3Ym94O1xuXG4gICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICd1cmwnOiB1cmxcbiAgICAgIH0pLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICBpZiAocmVzcG9uc2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBpZih2YWx1ZSA9PT1cIm92ZXJWYWx1ZVwiKXtcbiAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5vdmVyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLm92ZXJWYWx1ZT17fTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHNlbGYub3ZlclZhbHVlW3NlbGYuaW5kZXhdPW5ldyBvbC5nZW9tLlBvaW50KFtwYXJzZUZsb2F0KHJlc3BvbnNlWzBdLmxvbiksIHBhcnNlRmxvYXQocmVzcG9uc2VbMF0ubGF0KV0pO1xuICAgICAgICAgICAgICAgICAgc2VsZi4kYnV0dG9uT3Zlci5wcm9wKFwiZGlzYWJsZWRcIixmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgIHNlbGZbdmFsdWVdID0gbmV3IG9sLmdlb20uUG9pbnQoXG4gICAgICAgICAgICAgICAgICAgICAgW3BhcnNlRmxvYXQocmVzcG9uc2VbMF0ubG9uKSwgcGFyc2VGbG9hdChyZXNwb25zZVswXS5sYXQpXVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFsZXJ0KGxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfQUxFUlRfQUREUkVTUyk7XG4gICAgICAgICAgICAgIHNlbGYuY2xlYXJJbnB1dCgkaW5wdXQpO1xuICAgICAgICAgICAgICBkZWxldGUgc2VsZlt2YWx1ZV07XG4gICAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRfY2FsbGJhY2sgJiYgdHlwZW9mIG9wdF9jYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgb3B0X2NhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuZXJyb3IoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGFsZXJ0KGxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfQUxFUlRfR0VPQ09ESU5HKTtcbiAgICAgIH0pO1xuXG5cblxuICAgICAgcmV0dXJuIFwiXCI7XG5cbiAgICB9LFxuXG4gICAgdG9IdW1hbkRpc3RhbmNlOiBmdW5jdGlvbiAoZGlzdGFuY2VJbk1ldGVycykge1xuXG4gICAgICAvLyBjb3BpZWQgZnJvbSBvbGQgc291cmNlc1xuXG4gICAgICB2YXIgZGlzdGFuY2UsXG4gICAgICAgICAgaHVtYW5EaXN0YW5jZTtcblxuICAgICAgZGlzdGFuY2UgPSBwYXJzZUludChkaXN0YW5jZUluTWV0ZXJzLCAxMCk7XG4gICAgICBkaXN0YW5jZSA9IGRpc3RhbmNlIC8gMTAwMDtcblxuICAgICAgaWYgKGRpc3RhbmNlID49IDEwMCkge1xuICAgICAgICBodW1hbkRpc3RhbmNlID0gZGlzdGFuY2UudG9GaXhlZCgwKSArICcmbmJzcDsnICsgJ2ttJztcbiAgICAgIH0gZWxzZSBpZiAoZGlzdGFuY2UgPj0gMTApIHtcbiAgICAgICAgaHVtYW5EaXN0YW5jZSA9IGRpc3RhbmNlLnRvRml4ZWQoMSkgKyAnJm5ic3A7JyArICdrbSc7XG4gICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlID49IDAuMSkge1xuICAgICAgICBodW1hbkRpc3RhbmNlID0gZGlzdGFuY2UudG9GaXhlZCgyKSArICcmbmJzcDsnICsgJ2ttJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGh1bWFuRGlzdGFuY2UgPSAoZGlzdGFuY2UgKiAxMDAwKS50b0ZpeGVkKDApICsgJyZuYnNwOycgKyAnbSc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBodW1hbkRpc3RhbmNlO1xuICAgIH0sXG5cbiAgICB0b0h1bWFuVGltZTogZnVuY3Rpb24gKHRpbWVJblNlY29uZHMpIHtcblxuICAgICAgLy8gY29waWVkIGZyb20gb2xkIHNvdXJjZXNcblxuICAgICAgdmFyIHNlY29uZHMsXG4gICAgICAgICAgbWludXRlcyxcbiAgICAgICAgICBob3VycyxcbiAgICAgICAgICBodW1hblRpbWU7XG5cbiAgICAgIHNlY29uZHMgPSBwYXJzZUludCh0aW1lSW5TZWNvbmRzLCAxMCk7XG4gICAgICBtaW51dGVzID0gcGFyc2VJbnQoc2Vjb25kcyAvIDYwLCAxMCk7XG4gICAgICBzZWNvbmRzID0gc2Vjb25kcyAlIDYwO1xuXG4gICAgICBob3VycyA9IHBhcnNlSW50KG1pbnV0ZXMgLyA2MCwgMTApO1xuICAgICAgbWludXRlcyA9IG1pbnV0ZXMgJSA2MDtcblxuICAgICAgaWYgKGhvdXJzID09PSAwICYmIG1pbnV0ZXMgPT09IDApIHtcbiAgICAgICAgaHVtYW5UaW1lID0gc2Vjb25kcyArICcmbmJzcDsnICsgJ3MnO1xuICAgICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgICBodW1hblRpbWUgPSBtaW51dGVzICsgJyZuYnNwOycgKyAnbWluJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGh1bWFuVGltZSA9IGhvdXJzICsgJyZuYnNwOycgKyAnaCcgKyAnJm5ic3A7JyArIG1pbnV0ZXMgKyAnJm5ic3A7JyArICdtaW4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaHVtYW5UaW1lO1xuICAgIH1cblxuICB9KTtcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgUm91dGVyID0gdGhpcy5jNGcubWFwcy5jb250cm9sLlJvdXRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtcG9ydHNpZGUtcm91dGVyLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5jb250cm9sID0gdGhpcy5jNGcubWFwcy5jb250cm9sIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnRyb2wgdG8gdG9nZ2xlIHRoZSBicm93c2VyL2Rlc3ZpY2UgcG9zaXRpb24gb24gdGhlIG1hcC5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzICB7b2wuY29udHJvbC5Db250cm9sfVxuICAgKlxuICAgKiBAcGFyYW0gICAge09iamVjdH0gICAgICAgICAgICAgIG9wdF9vcHRpb25zICAqb3B0aW9uYWwqIGNvbnRyb2wgb3B0aW9ucy5cbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuUG9zaXRpb24gPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIGVsZW1lbnQsXG4gICAgICAgIGJ1dHRvbjtcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5PTF9aT09NX1BPUyxcbiAgICAgIHN3aXRjaGFibGU6IHRydWUsXG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgbWFwQ29udHJvbGxlcjogdW5kZWZpbmVkXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoIW9wdGlvbnMubWFwQ29udHJvbGxlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB2aWV3ID0gb3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCk7XG4gICAgdmFyIG1hcERhdGEgPSBvcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YTtcblxuICAgIHZhciBlbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkKGVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5FTkFCTEVEKTtcbiAgICB9O1xuXG4gICAgdmFyIGRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5FTkFCTEVEKTtcbiAgICB9O1xuXG4gICAgdmFyIHRvZ2dsZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAvLyBsb29zZSBmb2N1cywgb3RoZXJ3aXNlIGl0IGxvb2tzIG1lc3N5XG4gICAgICB0aGlzLmJsdXIoKTtcblxuICAgICAgdmFyIGdlb0xvY2F0aW9uID0gbmV3IG9sLkdlb2xvY2F0aW9uKHtcbiAgICAgICAgdHJhY2tpbmc6IHRydWUsXG4gICAgICAgIHByb2plY3Rpb246IHZpZXcuZ2V0UHJvamVjdGlvbigpXG4gICAgICB9KTtcblxuICAgICAgZ2VvTG9jYXRpb24ub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdmlldy5zZXRDZW50ZXIoZ2VvTG9jYXRpb24uZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgIC8vIGlmIChtYXBEYXRhLmdlb2xvY2F0aW9uX3pvb20pIHtcbiAgICAgICAgLy8gICAgdmlldy5zZXRab29tKG1hcERhdGEuZ2VvbG9jYXRpb25fem9vbSk7XG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgIHZpZXcuc2V0Wm9vbSgxOCk7XG4gICAgICAgIC8vfVxuICAgICAgICBnZW9Mb2NhdGlvbi5zZXRUcmFja2luZyhmYWxzZSk7XG4gICAgICAgIG9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuc2V0Vmlldyh2aWV3KTtcbiAgICAgICAgYzRnLm1hcHMudXRpbHMucmVkcmF3TWFwVmlldyhvcHRpb25zLm1hcENvbnRyb2xsZXIpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIHdyYXBwZXIgZGl2XG4gICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc05hbWUgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFICsgJyBidXR0b24nO1xuXG4gICAgaWYgKG9wdGlvbnMuc3dpdGNoYWJsZSkge1xuICAgICAgLy8gYnV0dG9uXG4gICAgICBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGJ1dHRvbi50aXRsZSA9IG9wdGlvbnMudGlwTGFiZWw7XG4gICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGJ1dHRvbik7XG5cbiAgICAgIC8vIHNldCBvbkNsaWNrIHRvIHRoZSB0b2dnbGUtZnVuY3Rpb25cbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZSwgZmFsc2UpO1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0b2dnbGUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyBpbmhlcml0YW5jZS1zdHVmZlxuICAgIG9sLmNvbnRyb2wuQ29udHJvbC5jYWxsKHRoaXMsIHtcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICB0YXJnZXQ6IG9wdGlvbnMudGFyZ2V0XG4gICAgfSk7XG4gIH07XG4gIG9sLmluaGVyaXRzKGM0Zy5tYXBzLmNvbnRyb2wuUG9zaXRpb24sIG9sLmNvbnRyb2wuQ29udHJvbCk7XG5cblxuICAvKlxuICAgKiBBZGQgbWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5Qb3NpdGlvbi5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLlBvc2l0aW9uLnByb3RvdHlwZSwge1xuXG4gICAgLy8gbm90aGluZyB0byBhZGQgaGVyZVxuXG4gIH0pOyAvLyBlbmQgb2YgXCJhZGQgbWV0aG9kc1wiIC0tLVxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBQb3NpdGlvbiA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5Qb3NpdGlvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtcG9zaXRpb24uanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnRyb2wgdG8gdG9nZ2xlIHRoZSBicm93c2VyL2Rlc3ZpY2UgcG9zaXRpb24gb24gdGhlIG1hcC5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzICB7b2wuY29udHJvbC5Db250cm9sfVxuICAgKlxuICAgKiBAcGFyYW0gICAge09iamVjdH0gICAgICAgICAgICAgIG9wdF9vcHRpb25zICAqb3B0aW9uYWwqIGNvbnRyb2wgb3B0aW9ucy5cbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuUHJpbnQgPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gICAgdmFyIGVsZW1lbnQsXG4gICAgICBidXR0b247XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuUFJJTlQsXG4gICAgICBzd2l0Y2hhYmxlOiB0cnVlLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZFxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgaWYgKCFvcHRpb25zLm1hcENvbnRyb2xsZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmlldyA9IG9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpO1xuICAgIHZhciBtYXBEYXRhID0gb3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGE7XG5cbiAgICB2YXIgdG9nZ2xlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwib2wtdW5zZWxlY3RhYmxlXCIpWzBdO1xuXG4gICAgICBjYW52YXMudG9CbG9iKGZ1bmN0aW9uKGJsb2IpIHtcbiAgICAgICAgbGV0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTtcbiAgICAgICAgYS5zdHlsZSA9IFwiZGlzcGxheTogbm9uZVwiO1xuICAgICAgICBsZXQgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIGEuaHJlZiA9IHVybDtcbiAgICAgICAgYS5kb3dubG9hZCA9ICdtYXAucG5nJztcbiAgICAgICAgYS5jbGljaygpO1xuICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIHdyYXBwZXIgZGl2XG4gICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc05hbWUgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFICsgJyBjNGctcG9ydHNpZGUtY29udHJvbCBvbC1jb250cm9sJztcblxuICAgIGlmIChvcHRpb25zLnN3aXRjaGFibGUpIHtcbiAgICAgIC8vIGJ1dHRvblxuICAgICAgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b24udGl0bGUgPSBvcHRpb25zLnRpcExhYmVsO1xuICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5QUklOVFxuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChidXR0b24pO1xuXG4gICAgICAvLyBzZXQgb25DbGljayB0byB0aGUgdG9nZ2xlLWZ1bmN0aW9uXG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGUsIGZhbHNlKTtcbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdG9nZ2xlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gaW5oZXJpdGFuY2Utc3R1ZmZcbiAgICBvbC5jb250cm9sLkNvbnRyb2wuY2FsbCh0aGlzLCB7XG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgdGFyZ2V0OiBvcHRpb25zLnRhcmdldFxuICAgIH0pO1xuICB9O1xuICBvbC5pbmhlcml0cyhjNGcubWFwcy5jb250cm9sLlByaW50LCBvbC5jb250cm9sLkNvbnRyb2wpO1xuXG5cbiAgLypcbiAgICogQWRkIG1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuUHJpbnQucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5QcmludC5wcm90b3R5cGUsIHtcblxuICAgIC8vIG5vdGhpbmcgdG8gYWRkIGhlcmVcblxuICB9KTsgLy8gZW5kIG9mIFwiYWRkIG1ldGhvZHNcIiAtLS1cblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgUHJpbnQgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuUHJpbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXByaW50LmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtTcGlubmVyfSBmcm9tIFwiLi9jNGctbWFwcy1taXNjLXNwaW5uZXJcIjtcblxubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9IGVsc2UgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJlblwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNFbmdsaXNoO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrXG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH1cbn1cblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBzaWRlYm9hcmQgc3RydWN0dXJlcy4gUHJvdmlkZXMgc3RhbmRhcmQgY29uZmlndXJhdGlvbnMgd2hpY2ggYXJlIGVxdWFsIGZvciBlYWNoIHNpZGVib2FyZCBlbGVtZW50LlxuICovXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBleHRlbmRzIHtvbC5jb250cm9sLkNvbnRyb2x9XG4gICAqIEBwYXJhbSAgIHtvYmplY3R9ICAgICAgICAgICAgICBvcHRpb25zICBtaXNjIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgKlxuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgY3JlYXRlOiB0cnVlLFxuICAgICAgZXh0RGl2OiBmYWxzZSxcbiAgICAgIGRlZmF1bHRPcGVuOiBmYWxzZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgIG5hbWU6ICdzaWRlYm9hcmQnLFxuICAgICAgZGlyZWN0aW9uOiAncmlnaHQnLFxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgLy9hY3RpdmUgSWRlbnRpZmllciAod2hpY2ggc2lkZSBpcyB0aGlzIGVsZW1lbnQgb24/KVxuICAgIC8vY3NzbmFtZSBuZWVkZWQgdG8gc2V0IHRoZSBjc3MgY2xhc3MgY29ycmVjdGx5XG4gICAgc3dpdGNoICh0aGlzLm9wdGlvbnMuZGlyZWN0aW9uKSB7XG4gICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gJ1BvcnRzaWRlJztcbiAgICAgICAgdGhpcy5jc3NuYW1lID0gJ3BvcnRzaWRlJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9ICdTdGFyYm9hcmQnO1xuICAgICAgICB0aGlzLmNzc25hbWUgPSAnc3RhcmJvYXJkJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vdGhpcy5jc3NuYW1lID0gdGhpcy5pZGVudGlmaWVyLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgdGhpcy5pZGVudGlmaWVyLnNsaWNlKDEpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLm9wdGlvbnMudGlwTGFiZWwgPSB0aGlzLm9wdGlvbnMudGlwTGFiZWwgfHwgdGhpcy5vcHRpb25zLmhlYWRsaW5lIHx8IGxhbmdDb25zdGFudHMuQ1RSTF9TSURFQk9BUkQ7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmJ1dHRvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNwaW5uZXIgPSB1bmRlZmluZWQ7XG4gICAgLy8gbWFpbnN0cnVjdHVyZSBlbGVtZW50c1xuICAgIHRoaXMud3JhcHBlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRpdGxlQmFyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVhZGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50b3BUb29sYmFyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY29udGVudENvbnRhaW5lciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJvdHRvbVRvb2xiYXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdGF0dXNCYXIgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLnNlY3Rpb25zID0gW107XG4gICAgdGhpcy52aWV3VHJpZ2dlckJhciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnZpZXdzID0gW107XG4gICAgdGhpcy5hY3RpdmVWaWV3ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGF1c2VkVmlldyA9IHVuZGVmaW5lZDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY3JlYXRlICYmIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyKSB7XG4gICAgICB0aGlzLmNyZWF0ZSgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLmV4dERpdikge1xuICAgICAgb2wuY29udHJvbC5Db250cm9sLmNhbGwodGhpcywge1xuICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICAgIHRhcmdldDogdGhpcy5vcHRpb25zLnRhcmdldCB8fCB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmQsIG9sLmNvbnRyb2wuQ29udHJvbCk7XG5cbiAgLy8gQWRkIG1ldGhvZHNcbiAgYzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmQucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5TaWRlYm9hcmQucHJvdG90eXBlLCB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBiYXNpYyBodG1sLWVsZW1lbnRzIGZvciB0aGUgc2lkZWJvYXJkXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gICd0cnVlJyBvbiBzdWNjZXNzXG4gICAgICovXG4gICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBpbml0Q2xhc3MsXG4gICAgICAgICAgdGl0bGVCdXR0b25CYXIsXG4gICAgICAgICAgY2xvc2VCdXR0b24sXG4gICAgICAgICAgY2FwaXRhbGl6ZWROYW1lLFxuICAgICAgICAgIGhpZGVCdXR0b24sXG4gICAgICAgICAgY2FjaGluZztcblxuICAgICAgY2FjaGluZyA9IHRoaXMub3B0aW9ucy5jYWNoaW5nO1xuICAgICAgY2FwaXRhbGl6ZWROYW1lID0gdXRpbHMuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHRoaXMub3B0aW9ucy5uYW1lKTtcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG5cbiAgICAgIC8vIERvIG5vdCBoaWRlIHdoZW4gaXQgaXMgaW5pdGlhbGl6ZWQgb3Blbiwgb3IgaW4gYW4gZXh0ZXJuYWwgZGl2XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dERpdikge1xuICAgICAgICBpbml0Q2xhc3MgPSAnICcgKyBjc3NDb25zdGFudHMuT1BFTjtcbiAgICAgICAgLy8gaWYgKGNhY2hpbmcpIHtcbiAgICAgICAgLy8gICAgIHV0aWxzLnN0b3JlVmFsdWUodGhpcy5vcHRpb25zLm5hbWUsICcxJyk7XG4gICAgICAgIC8vIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRDbGFzcyA9ICcgJyArIGNzc0NvbnN0YW50cy5DTE9TRTtcbiAgICAgICAgLy8gaWYgKGNhY2hpbmcpIHtcbiAgICAgICAgLy8gICAgIHV0aWxzLnN0b3JlVmFsdWUodGhpcy5vcHRpb25zLm5hbWUsICcwJyk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0gPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSB8fCBmYWxzZTtcblxuICAgICAgICB0aGlzLmJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAkKHRoaXMuYnV0dG9uKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAvLyBsb29zZSBmb2N1cywgb3RoZXJ3aXNlIGl0IGxvb2tzIG1lc3N5XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIFtub3RlXSBcInRoaXMuYmx1cigpXCIgZG9lcyBub3Qgd29yayBpbiBJRS1mdWxsc2NyZWVuLW1vZGVcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlLm5hbWUgKyAnOiAnICsgZS5tZXNzYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoY2FwaXRhbGl6ZWROYW1lID09IFwiUm91dGVyXCIgfHwgY2FwaXRhbGl6ZWROYW1lID09IFwiTWVhc3VyZVwiIHx8IGNhcGl0YWxpemVkTmFtZSA9PSBcIkVkaXRvclwiKXtcbiAgICAgICAgICAgICAgc2VsZi50b2dnbGUodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgIHNlbGYudG9nZ2xlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5idXR0b24udGl0bGUgPSB0aGlzLm9wdGlvbnMudGlwTGFiZWw7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmJ1dHRvbik7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCBhdHRyaWJ1dGVzXG4gICAgICAkKHRoaXMuY29udGFpbmVyKS5hZGRDbGFzcygnYzRnLScgKyB0aGlzLm9wdGlvbnMubmFtZSArICcgJyArICdjNGctJyArIHRoaXMuY3NzbmFtZSArICctY29udGFpbmVyJyArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEUgKyBpbml0Q2xhc3MpO1xuICAgICAgJCh0aGlzLmVsZW1lbnQpLmFkZENsYXNzKCdjNGctJyArIHRoaXMub3B0aW9ucy5uYW1lICsgJyAnICsgJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy1jb250cm9sJyArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEUgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfQ09OVFJPTCArIGluaXRDbGFzcyk7XG5cbiAgICAgIC8vIFNldCBpbml0aWFsIGRpbWVuc2lvbnNcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIC8vdGhpcy5jb250YWluZXIuc3R5bGUubWluV2lkdGggPSAnMjUwcHgnO1xuICAgICAgICAvL3RoaXMuY29udGFpbmVyLnN0eWxlW3RoaXMub3B0aW9ucy5kaXJlY3Rpb25dID0gJy0xOTIwcHgnO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZVt0aGlzLm9wdGlvbnMuZGlyZWN0aW9uXSA9ICctMTAwJSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL3RoaXMuY29udGFpbmVyLnN0eWxlLm1pbldpZHRoID0gJzI1MHB4JztcbiAgICAgICAgLy90aGlzLmNvbnRhaW5lci5zdHlsZVt0aGlzLm9wdGlvbnMuZGlyZWN0aW9uXSA9ICctMTkyMHB4JztcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGVbdGhpcy5vcHRpb25zLmRpcmVjdGlvbl0gPSAnLTEwMCUnO1xuICAgICAgfVxuXG4gICAgICAvLyBQbGFjZSBjb250YWluZXJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0RGl2KSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMub3B0aW9ucy5leHREaXYpLmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgLy8gICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdID0gdGhpcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAkKCcjJyArIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRUYXJnZXQoKSArICcgLicgKyBjc3NDb25zdGFudHMuT0xfT1ZFUkxBWUNPTlRBSU5FUl9TRSkuYXBwZW5kKHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQuYXBwZW5kKHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBCdWlsZCBjb250ZW50LWFyZWFcbiAgICAgIC8vXG4gICAgICAvLyBXcmFwcGVyXG4gICAgICB0aGlzLndyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMud3JhcHBlci5jbGFzc05hbWUgPSAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLXdyYXBwZXInO1xuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy53cmFwcGVyKTtcbiAgICAgIC8vIFRpdGxlYmFyXG4gICAgICB0aGlzLnRpdGxlQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLnRpdGxlQmFyLmNsYXNzTmFtZSA9ICdjNGctJyArIHRoaXMuY3NzbmFtZSArICctdGl0bGViYXInO1xuICAgICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMudGl0bGVCYXIpO1xuXG4gICAgICAvLyBUcmlnZ2VyYmFyXG4gICAgICB0aGlzLnZpZXdUcmlnZ2VyQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLnZpZXdUcmlnZ2VyQmFyLmNsYXNzTmFtZSA9ICdjNGctJyArIHRoaXMuY3NzbmFtZSArICctdmlld3RyaWdnZXJiYXInO1xuXG4gICAgICAvLyBUb3AtVG9vbGJhclxuICAgICAgdGhpcy50b3BUb29sYmFyID0gdGhpcy5hZGRTZWN0aW9uKHtcbiAgICAgICAgY2xhc3NOYW1lOiAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLXRvcC10b29sYmFyJyxcbiAgICAgICAgdGFyZ2V0OiB0aGlzLndyYXBwZXJcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDb250ZW50LUNvbnRhaW5lclxuICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyID0gdGhpcy5hZGRTZWN0aW9uKHtcbiAgICAgICAgY2xhc3NOYW1lOiAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLWNvbnRlbnQtY29udGFpbmVyJyxcbiAgICAgICAgdGFyZ2V0OiB0aGlzLndyYXBwZXJcbiAgICAgIH0pO1xuXG4gICAgICAvLyBhZGQgY29udGVudCBoZWFkbGluZVxuICAgICAgdGhpcy5jb250ZW50SGVhZGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMuY29udGVudEhlYWRsaW5lLmNsYXNzTmFtZSA9ICdjb250ZW50SGVhZGxpbmUnO1xuICAgICAgdGhpcy5jb250ZW50SGVhZGxpbmUuaW5uZXJIVE1MID0gJyc7XG4gICAgICB0aGlzLmNvbnRlbnRDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50SGVhZGxpbmUpO1xuXG4gICAgICAvLyBCb3R0b20tVG9vbGJhclxuICAgICAgdGhpcy5ib3R0b21Ub29sYmFyID0gdGhpcy5hZGRTZWN0aW9uKHtcbiAgICAgICAgICBjbGFzc05hbWU6ICdjNGctJyArIHRoaXMuY3NzbmFtZSArICctYm90dG9tLXRvb2xiYXIgYzRnLWNsb3NlJyxcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMud3JhcHBlclxuICAgICAgfSk7XG5cbiAgICAgICAvLyBTdGF0dXNiYXJcbiAgICAgIHRoaXMuc3RhdHVzQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLnN0YXR1c0Jhci5jbGFzc05hbWUgPSAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLXN0YXR1c2JhciBjNGctY2xvc2UnO1xuICAgICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuc3RhdHVzQmFyKTtcblxuICAgICAgLy8gQWRkIHNwaW5uZXJcbiAgICAgIHRoaXMuc3Bpbm5lciA9IG5ldyBTcGlubmVyKHtcbiAgICAgICAgdGFyZ2V0OiB0aGlzLmNvbnRlbnRDb250YWluZXIsXG4gICAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLkxBUkdFXG4gICAgICB9KTtcblxuICAgICAgLy8gRmlsbCB0aXRsZWJhclxuICAgICAgLy9cbiAgICAgIC8vIEhlYWRsaW5lXG4gICAgICB0aGlzLmhlYWRsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgdGhpcy5oZWFkbGluZS5jbGFzc05hbWUgPSAnYzRnLScgKyB0aGlzLmNzc25hbWUgKyAnLWhlYWRsaW5lJztcbiAgICAgIHRoaXMuaGVhZGxpbmUuaW5uZXJIVE1MID0gdGhpcy5vcHRpb25zLmhlYWRsaW5lO1xuICAgICAgdGhpcy50aXRsZUJhci5hcHBlbmRDaGlsZCh0aGlzLmhlYWRsaW5lKTtcbiAgICAgIC8vIEJ1dHRvbmJhclxuICAgICAgdGl0bGVCdXR0b25CYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRpdGxlQnV0dG9uQmFyLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MICsgJyAnICsgJ2M0Zy0nICsgdGhpcy5jc3NuYW1lICsgJy1idXR0b25iYXInO1xuICAgICAgdGhpcy50aXRsZUJhci5hcHBlbmRDaGlsZCh0aXRsZUJ1dHRvbkJhcik7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgLy8gSGlkZWJ1dHRvblxuICAgICAgICBoaWRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIGhpZGVCdXR0b24uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlBPUlRTSURFX0hJREU7XG4gICAgICAgIGhpZGVCdXR0b24udGl0bGUgPSBsYW5nQ29uc3RhbnRzLkhJREU7XG4gICAgICAgICQoaGlkZUJ1dHRvbikuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBzZWxmLmNsb3NlKHRydWUpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRpdGxlQnV0dG9uQmFyLmFwcGVuZENoaWxkKGhpZGVCdXR0b24pO1xuICAgICAgfVxuXG4gICAgICAvLyBDbG9zZWJ1dHRvblxuICAgICAgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGNsb3NlQnV0dG9uLmNsYXNzTmFtZSA9ICdjNGctJyArIHRoaXMuY3NzbmFtZSArICctY2xvc2UnO1xuICAgICAgY2xvc2VCdXR0b24udGl0bGUgPSBsYW5nQ29uc3RhbnRzLkNMT1NFO1xuICAgICAgJChjbG9zZUJ1dHRvbikuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgICB0aXRsZUJ1dHRvbkJhci5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbik7XG5cbiAgICAgIC8vQWRkIHNwaW5uZXIgZm9yIGxlZnQgc2lkZWQgc2lkZWJvYXJkIGVsZW1lbnRzXG4gICAgICB0aGlzLnNwaW5uZXIgPSBuZXcgU3Bpbm5lcih7XG4gICAgICAgIHRhcmdldDogdGhpcy5jb250ZW50Q29udGFpbmVyLFxuICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5MQVJHRVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEhhbmRsZSBleHRlcm5hbCBESVYgYW5kIGRlZmF1bHQgc3RhdGVcbiAgICAgIC8vIGNhdGNoIHRvdWNoIGV2ZW50cyBhbmQgc3RvcCB0aGVpciBwcm9wYWdhdGlvblxuICAgICAgLy8gb3RoZXJ3aXNlIHRvdWNoLXNjcm9sbGluZyB3aWxsIGJlIHN0b3BwZWQgYnkgb2wzXG4gICAgICAkKHRoaXMuY29udGFpbmVyKS5vbigndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQmluZCB0aGUgdXBkYXRlIG1ldGhvZCB0byB0aGUgbWFwLXJlc2l6ZSBldmVudFxuICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLm9uKCdjaGFuZ2U6c2l6ZScsIHRoaXMudXBkYXRlLCB0aGlzKTtcblxuICAgICAgLy8gU2hvdyBvcGVuIGlmIGRlc2lyZWRcbiAgICAgIGlmICgodGhpcy5vcHRpb25zLmRlZmF1bHRPcGVuKSB8fCAodGhpcy5vcHRpb25zLmNhY2hpbmcgJiYgKHV0aWxzLmdldFZhbHVlKHRoaXMub3B0aW9ucy5uYW1lKSA9PSAnMScpKSkge1xuICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgLy8gZW5kIG9mIFwiY3JlYXRlXCJcblxuICAgIC8qKlxuICAgICAqICAgVXBkYXRlIHRoZSBzaWRlYm9hcmRzIGh0bWwtZWxlbWVudHNcbiAgICAgKiAgIHJlc2l6ZXMgdGhlIGNvbnRlbnQtY29udGFpbmVyXG4gICAgICogICBhbmQgdGhlIHRvcC10b29sYmFyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtldmVudC1vYmplY3R9ICBvcHRfZXZlbnQgICpvcHRpb25hbCogIEp1c3QgbmVlZGVkIGJ5IHRoZSBvbC1iaW5kLW1ldGhvZCxcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dCBub3QgdXNlZCBpbiB0aGUgZnVuY3Rpb25cbiAgICAgKi9cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChvcHRfZXZlbnQpIHtcblxuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgY29udGVudENvbnRhaW5lck91dGVySGVpZ2h0LFxuICAgICAgICAgIGNvbnRhaW5lck9mZnNldFdpZHRoO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgLypcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLm5hbWUpIHtcbiAgICAgICAgICBjYXBpdGFsaXplZE5hbWUgPSB1dGlscy5jYXBpdGFsaXplRmlyc3RMZXR0ZXIodGhpcy5vcHRpb25zLm5hbWUpO1xuICAgICAgfSovXG5cbiAgICAgIGNvbnRlbnRDb250YWluZXJPdXRlckhlaWdodCA9ICQodGhpcy53cmFwcGVyKS5oZWlnaHQoKSAtICgkKHRoaXMudGl0bGVCYXIpLm91dGVySGVpZ2h0KHRydWUpICsgJCh0aGlzLnN0YXR1c0Jhcikub3V0ZXJIZWlnaHQodHJ1ZSkpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uICYmIHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gIT0gXCJ1bmRlZmluZWRcIiAmJiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgaWYgKHRoaXMgIT09IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdKSB7XG4gICAgICAgICAgY29udGFpbmVyT2Zmc2V0V2lkdGggPSAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvcC1Ub29sYmFyXG4gICAgICBpZiAodGhpcy50b3BUb29sYmFyKSB7XG4gICAgICAgICAgaWYgKHRoaXMudG9wVG9vbGJhci5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLy8gdGhpcy50b3BUb29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICB0aGlzLnRvcFRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgICAgICBjb250ZW50Q29udGFpbmVyT3V0ZXJIZWlnaHQgLT0gJCh0aGlzLnRvcFRvb2xiYXIpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMudG9wVG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQm90dG9tLXRvb2xiYXJcbiAgICAgIGlmICh0aGlzLmJvdHRvbVRvb2xiYXIpIHtcbiAgICAgICAgICBpZiAodGhpcy5ib3R0b21Ub29sYmFyLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvLyB0aGlzLmJvdHRvbVRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgIHRoaXMuYm90dG9tVG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgICAgIGNvbnRlbnRDb250YWluZXJPdXRlckhlaWdodCAtPSAkKHRoaXMuYm90dG9tVG9vbGJhcikub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5ib3R0b21Ub29sYmFyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDb250ZW50LWNvbnRhaW5lclxuICAgICAgJCh0aGlzLmNvbnRlbnRDb250YWluZXIpLm91dGVySGVpZ2h0KGNvbnRlbnRDb250YWluZXJPdXRlckhlaWdodCk7XG5cbiAgICAgIC8vIENvcnJlY3Qgd2lkdGhcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0gPT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy90aGlzLmNvbnRhaW5lci5zdHlsZS53aWR0aCA9ICdhdXRvJztcbiAgICAgICAgICAgICAgY29udGFpbmVyT2Zmc2V0V2lkdGggPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbdGhpcy5vcHRpb25zLmRpcmVjdGlvbiArIFwiU2xpZGVFbGVtZW50c1wiXS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyhzZWxmLm9wdGlvbnMuZGlyZWN0aW9uLCBjb250YWluZXJPZmZzZXRXaWR0aCk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIC8vb25seSBtb3ZlIHRoZSB0b2dnbGUgYnV0dG9uIG9uIHN0YXJib2FyZCBlbGVtZW50c1xuICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmNzcyh0aGlzLm9wdGlvbnMuZGlyZWN0aW9uLCBjb250YWluZXJPZmZzZXRXaWR0aCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0sIC8vIGVuZCBvZiBcInVwZGF0ZVwiXG5cbiAgICAvKipcbiAgICAgKiBPcGVucyB0aGlzIHNpZGVib2FyZCBlbGVtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7b2JqZWN0fSAgICAqb3B0aW9uYWwqIG9wdGlvbnMgdG8gYmUgcGFzc2VkIHRvIHRoZSBpbml0aWFsaXplLWZ1bmN0aW9uIGlmIGl0IGV4aXN0c1xuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgJ3RydWUnIGFuIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBvcGVuOiBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcbiAgICAgIHZhciBjb250YWluZXJPZmZzZXRXaWR0aCxcbiAgICAgICAgICBzZWxmO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgLy8gQ2FsbCBpbml0aWFsaXplLWZ1bmN0aW9ucywgaWYgZXhpc3RlbnRcbiAgICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0aGlzLmluaXQob3B0X29wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGNhbGwgcHJlT3BlbkZ1bmN0aW9uc1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLnByZU9wZW5GdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnByZU9wZW5GdW5jdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBjb250YWluZXJPZmZzZXRXaWR0aCA9IHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dERpdikge1xuICAgICAgICAvLyBOb3QgYXZhaWxhYmxlIG9uIGV4dGVybmFsIGRpdnNcbiAgICAgICAgY29uc29sZS53YXJuKCdZb3UgY2Fubm90IHVzZSB0aGlzIGZ1bmN0aW9uIG9uIGV4dGVybmFsIGVtYmVkZGVkIHNpZGVib2FyZC4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSkge1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSA9PT0gdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL2Nsb3NlIG90aGVyIGFjdGl2ZSBzaWRlYm9hcmQgb24gdGhpcyBzaWRlXG4gICAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0uY2xvc2UodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gc2xpZGUgb3RoZXIgZWxlbWVudHMgd2hlbiBubyBvdGhlciBzaWRlYm9hcmQgd2FzIGFjdGl2ZSBvbiB0aGlzIHNpZGVcbiAgICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlclt0aGlzLm9wdGlvbnMuZGlyZWN0aW9uICsgXCJTbGlkZUVsZW1lbnRzXCJdLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKHNlbGYub3B0aW9ucy5kaXJlY3Rpb24sIGNvbnRhaW5lck9mZnNldFdpZHRoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcy5jb250YWluZXIpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmNzcyh0aGlzLm9wdGlvbnMuZGlyZWN0aW9uLCAwKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICQodGhpcy5lbGVtZW50KS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKHRoaXMuZWxlbWVudCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTikuY3NzKHRoaXMub3B0aW9ucy5kaXJlY3Rpb24sIGNvbnRhaW5lck9mZnNldFdpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldCB0aGlzIGFzIGFjdGl2ZSBTaWRlYm9hcmRcbiAgICAgICAgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXJbXCJhY3RpdmVcIiArIHRoaXMuaWRlbnRpZmllcl0gPSB0aGlzO1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIGEgdmlldyBuZWVkcyB0byBiZSByZWFjdGl2YXRlZFxuICAgICAgICBpZiAodGhpcy5hY3RpdmVWaWV3KSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVWaWV3LmFjdGl2YXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJCh0aGlzLnN0YXR1c0JhcikuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKSkge1xuICAgICAgICAgICQodGhpcy5zdGF0dXNCYXIpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCQodGhpcy5ib3R0b21Ub29sYmFyKS5oYXNDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpKSB7XG4gICAgICAgICAgJCh0aGlzLmJvdHRvbVRvb2xiYXIpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hvdyBjb250YWluZXIgdG8gZml4IHJlc2l6aW5nIGlzc3VlXG4gICAgICAgICQodGhpcy5jb250YWluZXIpLmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG5cbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jYWNoaW5nKSB7XG4gICAgICAgICAgdXRpbHMuc3RvcmVWYWx1ZSh0aGlzLm9wdGlvbnMubmFtZSwgJzEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbGwgcG9zdE9wZW5GdW5jdGlvbnNcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnBvc3RPcGVuRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLnBvc3RPcGVuRnVuY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sIC8vIGVuZCBvZiBcIm9wZW5cIlxuXG4gICAgaXNPcGVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdICYmIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdID09PSB0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoaXMgc2lkZWJvYXJkIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtib29sZWFufSAgb3B0X2hpZGUgICAgICAgICAgICAgICAqb3B0aW9uYWwqIENob29zZSBpZiB0aGlzIGZ1bmN0aW9uIHNob3VsZCB0cmlnZ2VyIHxwcmVIaWRlRnVuY3Rpb258XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RlYWQgb2YgfHByZUNsb3NlRnVuY3Rpb258LiBEZWZhdWx0IGlzIHxmYWxzZXwuXG4gICAgICogQHBhcmFtICAge2Jvb2xlYW59ICBvcHRfb3Blbk90aGVyU2lkZWJvYXJkICAqb3B0aW9uYWwqIEluZGljYXRlcyBpZiBhbm90aGVyIHNpZGVib2FyZCBlbGVtZW50IHdpbGwgYmUgb3BlbmVkIGluc3RlYWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQgaXMgfGZhbHNlfC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgICAgICAgICAgICAgICAgICAgICAgICB8dHJ1ZXwgb24gc3VjY2Vzcy5cbiAgICAgKi9cbiAgICBjbG9zZTogZnVuY3Rpb24gKG9wdF9oaWRlLCBvcHRfb3Blbk90aGVyU2lkZWJvYXJkKSB7XG4gICAgICB2YXIgY29udGFpbmVyT2Zmc2V0V2lkdGgsXG4gICAgICAgICAgZGlyZWN0aW9uO1xuXG4gICAgICBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuXG4gICAgICBpZiAob3B0X2hpZGUgKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcmVIaWRlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLnByZUhpZGVGdW5jdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucHJlQ2xvc2VGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMucHJlQ2xvc2VGdW5jdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnRhaW5lck9mZnNldFdpZHRoID0gdGhpcy5jb250YWluZXIub2Zmc2V0V2lkdGg7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0RGl2KSB7XG4gICAgICAgIC8vIE5vdCBhdmFpbGFibGUgb24gZXh0ZXJuYWwgZGl2c1xuICAgICAgICBjb25zb2xlLndhcm4oJ1lvdSBjYW5ub3QgdXNlIHRoaXMgZnVuY3Rpb24gb24gZXh0ZXJuYWwgZW1iZWRkZWQgc2lkZWJvYXJkLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW1wiYWN0aXZlXCIgKyB0aGlzLmlkZW50aWZpZXJdICE9PSB0aGlzKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdUaGlzICcgKyB0aGlzLm9wdGlvbnMubmFtZSArICctZWxlbWVudCAoJyArIHRoaXMub3B0aW9ucy5uYW1lICsgJykgaXMgYWxyZWFkeSBjbG9zZWQuJyk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgICQodGhpcy5jb250YWluZXIpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PUEVOKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmNzcyhkaXJlY3Rpb24sIC1jb250YWluZXJPZmZzZXRXaWR0aCk7XG4gICAgICAgICQodGhpcy5lbGVtZW50KS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5jc3MoZGlyZWN0aW9uLCAwKTtcblxuICAgICAgICBpZiAoIW9wdF9vcGVuT3RoZXJTaWRlYm9hcmQpIHtcbiAgICAgICAgICAvLyBzbGlkZSBvdGhlciBlbGVtZW50c1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyW2RpcmVjdGlvbiArIFwiU2xpZGVFbGVtZW50c1wiXS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyhkaXJlY3Rpb24sIDApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGlkZSBjb250YWluZXIgdG8gZml4IHJlc2l6aW5nIGlzc3VlXG4gICAgICAgICQodGhpcy5jb250YWluZXIpLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcblxuICAgICAgICAvLyBjaGVjayBpZiBhIHZpZXcgbmVlZHMgdG8gYmUgZGVhY3RpdmF0ZWRcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlVmlldykge1xuICAgICAgICAgIHRoaXMuYWN0aXZlVmlldy5kZWFjdGl2YXRlKHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIGFjdGl2ZSBTaWRlYm9hcmRlbnRyeVxuICAgICAgICB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2FjaGluZykge1xuICAgICAgICAgICAgdXRpbHMuc3RvcmVWYWx1ZSh0aGlzLm9wdGlvbnMubmFtZSwgJzAnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCAvLyBlbmQgb2YgXCJjbG9zZVwiXG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgdGhpcyBzaWRlYm9hcmQgZWxlbWVudFxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICBSZXR1cm5zIHx0cnVlfCBvbiBzdWNjZXNzLlxuICAgICAqL1xuICAgIHRvZ2dsZTogZnVuY3Rpb24gKG9wdF9oaWRlKSB7XG4gICAgICB2YXIgY2FwaXRhbGl6ZWROYW1lO1xuICAgICAgY2FwaXRhbGl6ZWROYW1lID0gdXRpbHMuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHRoaXMub3B0aW9ucy5uYW1lKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcltcImFjdGl2ZVwiICsgdGhpcy5pZGVudGlmaWVyXSA9PT0gdGhpcykge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9zZShvcHRfaGlkZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5vcGVuKCk7XG4gICAgfSwgLy8gZW5kIG9mIFwidG9nZ2xlXCJcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBidXR0b24gd2hpY2ggY2hhcmFjdGVyaXN0aWNzIGFyZSBkZWZpbmVkIGJ5IHRoZSBvcHRpb25zIHBhcmFtZXRlclxuICAgICAqIFRoZXNlIG9wdGlvbnMgaW5jbHVkZSBlLmcuIHRoZSB0YXJnZXQgY29udGFpbmVyIHdoZXJlIHRoZSBidXR0b24gd2lsbCBiZSBhcHBlbmRlZCBhbmQgdGhlIGNsaWNrIGFjdGlvbiBvZiB0aGUgYnV0dG9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7b2JqZWN0fSAgb3B0X29wdGlvbnMgIFRoZSBidXR0b24gY29uZmlndXJhdGlvblxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBtYWtlQnV0dG9uOiBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgICAgdmFyIG9wdGlvbnMsXG4gICAgICAgICAgYnV0dG9uO1xuXG4gICAgICBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgICBsYWJlbDogdW5kZWZpbmVkLFxuICAgICAgICB0aXBMYWJlbDogdW5kZWZpbmVkLFxuICAgICAgICBjbGFzc05hbWU6ICcnLFxuICAgICAgICB0YXJnZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgY2xpY2tBY3Rpb246IHVuZGVmaW5lZFxuICAgICAgfSwgb3B0X29wdGlvbnMpO1xuXG4gICAgICBpZiAob3B0aW9ucy5jbGFzc05hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jbGFzc05hbWUgPSAnICcgKyBvcHRpb25zLmNsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b24uY2xhc3NOYW1lID0gJ2M0Zy0nICsgdGhpcy5vcHRpb25zLm5hbWUgKyAnLWJ1dHRvbicgKyBvcHRpb25zLmNsYXNzTmFtZTtcbiAgICAgIGlmKG9wdGlvbnMuaWQpIHtcbiAgICAgICAgYnV0dG9uLmlkID0gb3B0aW9ucy5pZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnRpcExhYmVsID09PSAnc3RyaW5nJykge1xuICAgICAgICBidXR0b24udGl0bGUgPSBvcHRpb25zLnRpcExhYmVsO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMubGFiZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBvcHRpb25zLmxhYmVsO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5sYWJlbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYnV0dG9uLmFwcGVuZENoaWxkKG9wdGlvbnMubGFiZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY2xpY2tBY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgJChidXR0b24pLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGUubWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wdGlvbnMuY2xpY2tBY3Rpb24oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnRhcmdldCkge1xuICAgICAgICAkKG9wdGlvbnMudGFyZ2V0KS5hcHBlbmQoYnV0dG9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1dHRvbjtcbiAgICB9LCAvLyBlbmQgb2YgXCJtYWtlQnV0dG9uXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICogW2FkZFNlY3Rpb24gZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBvcHRfb3B0aW9ucyAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGFkZFNlY3Rpb246IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuXG4gICAgICB2YXIgb3B0aW9ucyxcbiAgICAgICAgICBzZWN0aW9uLFxuICAgICAgICAgIGVsZW1lbnQ7XG5cbiAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAgIHR5cGU6ICdkaXYnLFxuICAgICAgICBjbGFzc05hbWU6ICcnLFxuICAgICAgICB0YXJnZXQ6IHVuZGVmaW5lZFxuICAgICAgfSwgb3B0X29wdGlvbnMpO1xuXG4gICAgICAvLyB0cnkgdG8gY3JlYXRlIHRoZSBuZXcgc2VjdGlvblxuICAgICAgdHJ5IHtcbiAgICAgICAgc2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQob3B0aW9ucy50eXBlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdDYW5ub3QgY3JlYXRlIHNlY3Rpb24uIFwiJyArIG9wdGlvbnMudHlwZSArICcgaXMgbm90IGEgdmFsaWQgSFRNTC1ub2RlLicpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHNlY3Rpb24uY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc05hbWU7XG5cbiAgICAgIC8vIHRyeSB0byBhcHBlbmQgdGhlIHNlY3Rpb24gdG8gdGhlIGdpdmVuIHRhcmdldFxuICAgICAgaWYgKG9wdGlvbnMudGFyZ2V0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgb3B0aW9ucy50YXJnZXQuYXBwZW5kQ2hpbGQoc2VjdGlvbik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oZS5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWN0aW9uLmdldEVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50IHx8IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgc2VjdGlvbi5zZXRFbGVtZW50ID0gZnVuY3Rpb24gKG5ld0VsZW1lbnQpIHtcbiAgICAgICAgaWYgKG5ld0VsZW1lbnQgJiYgdHlwZW9mIG5ld0VsZW1lbnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaWYgKCEoZWxlbWVudCAmJiBlbGVtZW50ID09PSBuZXdFbGVtZW50KSkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQobmV3RWxlbWVudCk7XG4gICAgICAgICAgICBlbGVtZW50ID0gbmV3RWxlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cblxuICAgICAgLy8gYWRkIHRvIHNlY3Rpb25zLWFycmF5XG4gICAgICB0aGlzLnNlY3Rpb25zLnB1c2goc2VjdGlvbik7XG4gICAgICByZXR1cm4gc2VjdGlvbjtcbiAgICB9LCAvLyBlbmQgb2YgXCJhZGRTZWN0aW9uXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICogW2FkZFZpZXcgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBvcHRpb25zICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgYWRkVmlldzogZnVuY3Rpb24gKG9wdGlvbnMsIG9wdF92aWV3U2NvcGUpIHtcblxuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgdmlld1Njb3BlLFxuICAgICAgICAgIGFkZGl0aW9uYWxUcmlnZ2VyQ2xhc3MsXG4gICAgICAgICAgdHJpZ2dlcixcbiAgICAgICAgICB2aWV3O1xuXG4gICAgICBzZWxmID0gdGhpcztcbiAgICAgIHZpZXdTY29wZSA9IG9wdF92aWV3U2NvcGUgfHwgdGhpcztcblxuICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgLy8gbmFtZTogdW5kZWZpbmVkLFxuICAgICAgICB0cmlnZ2VyQ29uZmlnOiB1bmRlZmluZWQsIC8vIEBUT0RPIGRva3UgZm9ybWF0OiB7b3B0X3RhcmdldDogW3N0cmluZ3xodG1sT2JqZWN0XSwgb3B0X2NsYXNzTmFtZTogW3N0cmluZ10sIG9wdF90aXBMYWJlbDogW3N0cmluZ119XG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW10sIC8vIEBUT0RPIGRva3UgZm9ybWF0OiBbe3NlY3Rpb246IFtzZWN0aW9uT2JqZWN0XSwgZWxlbWVudDogW2VsZW1lbnRPYmplY3RdfV1cbiAgICAgICAgaW5pdEZ1bmN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGFjdGl2YXRlRnVuY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZGVhY3RpdmF0ZUZ1bmN0aW9uOiB1bmRlZmluZWRcbiAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMubmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdDYW5ub3QgYWRkIGEgdmlldyB3aXRob3V0IGEgbmFtZSAob2YgdHlwZSBcInN0cmluZ1wiKS4nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2aWV3ID0ge307XG5cbiAgICAgIHZpZXcuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgIHZpZXcucGF1c2VkID0gZmFsc2U7XG5cbiAgICAgIHZpZXcuYWN0aXZhdGUgPSBmdW5jdGlvbiAob3B0X29wZW5TaWRlYm9hcmQpIHtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudHJpZ2dlckNvbmZpZy53aXRoSGVhZGxpbmUpIHtcbiAgICAgICAgICAgIHNlbGYuY29udGVudEhlYWRsaW5lLmlubmVySFRNTCA9IG9wdGlvbnMudHJpZ2dlckNvbmZpZy50aXBMYWJlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9wZW4gU2lkZWJvYXJkIGlmIGNsb3NlZFxuICAgICAgICBpZiAob3B0X29wZW5TaWRlYm9hcmQgJiYgIXNlbGYuaXNPcGVuKCkpIHtcbiAgICAgICAgICBzZWxmLm9wZW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlYWN0aXZhdGUgY3VycmVudCBhY3RpdmVWaWV3LCBpZiBleGlzdGVudFxuICAgICAgICBpZiAodHlwZW9mIHZpZXdTY29wZS5hY3RpdmVWaWV3ID09PSAnb2JqZWN0JyAmJiB2aWV3U2NvcGUuYWN0aXZlVmlldyAhPT0gdmlldykge1xuICAgICAgICAgIHZpZXdTY29wZS5hY3RpdmVWaWV3LmRlYWN0aXZhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICB2aWV3U2NvcGUuYWN0aXZlVmlldyA9IHZpZXc7XG5cbiAgICAgICAgLy8gSGFuZGxlIHN1Yi12aWV3c1xuICAgICAgICBpZiAodmlldy5hY3RpdmVWaWV3KSB7XG4gICAgICAgICAgdmlldy5hY3RpdmVWaWV3LmFjdGl2YXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxsIGluaXRpYWxpemUtZnVuY3Rpb25zLCBpZiBleGlzdGVudFxuICAgICAgICBpZiAoIXZpZXcuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuaW5pdEZ1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2aWV3LmluaXRpYWxpemVkID0gb3B0aW9ucy5pbml0RnVuY3Rpb24oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmlldy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGlzcGxheSBlbGVtZW50cyBpbiBnaXZlbiBzZWN0aW9uc1xuICAgICAgICBpZiAob3B0aW9ucy5zZWN0aW9uRWxlbWVudHMgJiYgb3B0aW9ucy5zZWN0aW9uRWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBvcHRpb25zLnNlY3Rpb25FbGVtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgb3B0aW9ucy5zZWN0aW9uRWxlbWVudHNbaV0uc2VjdGlvbi5zZXRFbGVtZW50KG9wdGlvbnMuc2VjdGlvbkVsZW1lbnRzW2ldLmVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoYW5nZSB0cmlnZ2VyLXN0YXRlLCBpZiBleGlzdGVudFxuICAgICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICAgICQodHJpZ2dlcikuYWRkQ2xhc3MoJ2M0Zy1hY3RpdmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhbGwgYWN0aXZhdGUgZnVuY3Rpb24sIGlmIGV4aXN0ZW50XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hY3RpdmF0ZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFvcHRpb25zLmFjdGl2YXRlRnVuY3Rpb24odmlldy5wYXVzZWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmlldy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuXG4gICAgICB2aWV3LmRlYWN0aXZhdGUgPSBmdW5jdGlvbiAob3B0X3BhdXNlKSB7XG5cbiAgICAgICAgdmlldy5wYXVzZWQgPSBvcHRfcGF1c2UgfHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2aWV3U2NvcGUuYWN0aXZlVmlldyA9PT0gJ29iamVjdCcgJiYgdmlld1Njb3BlLmFjdGl2ZVZpZXcgPT09IHZpZXcpIHtcbiAgICAgICAgICBpZiAodHJpZ2dlciAmJiAhdmlldy5wYXVzZWQpIHtcbiAgICAgICAgICAgICQodHJpZ2dlcikucmVtb3ZlQ2xhc3MoJ2M0Zy1hY3RpdmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBIYW5kbGUgc3ViLXZpZXdzXG4gICAgICAgICAgaWYgKHZpZXcuYWN0aXZlVmlldykge1xuICAgICAgICAgICAgdmlldy5hY3RpdmVWaWV3LmRlYWN0aXZhdGUodmlldy5wYXVzZWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIENhbGwgZGVhY3RpdmF0ZSBmdW5jdGlvbiwgaWYgZXhpc3RlbnRcbiAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVhY3RpdmF0ZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kZWFjdGl2YXRlRnVuY3Rpb24odmlldy5wYXVzZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcblxuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJpZ2dlckNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucy50cmlnZ2VyQ29uZmlnID0gJC5leHRlbmQoe1xuICAgICAgICAgIHRhcmdldDogdGhpcy52aWV3VHJpZ2dlckJhcixcbiAgICAgICAgICB0aXBMYWJlbDogb3B0aW9ucy5uYW1lLFxuICAgICAgICB9LCBvcHRpb25zLnRyaWdnZXJDb25maWcpO1xuXG4gICAgICAgIG9wdGlvbnMudHJpZ2dlckNvbmZpZy5jbGlja0FjdGlvbiA9IHZpZXcuYWN0aXZhdGU7XG4gICAgICAgIGlmIChvcHRpb25zLnRyaWdnZXJDb25maWcuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgYWRkaXRpb25hbFRyaWdnZXJDbGFzcyA9ICcgJyArIG9wdGlvbnMudHJpZ2dlckNvbmZpZy5jbGFzc05hbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkaXRpb25hbFRyaWdnZXJDbGFzcyA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMudHJpZ2dlckNvbmZpZy5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuSUNPTiArIGFkZGl0aW9uYWxUcmlnZ2VyQ2xhc3M7XG4gICAgICAgIC8vIEBUT0RPIGNoZWNrOiB0cmlnZ2VyID0gdGhpcy5tYWtlQnV0dG9uKG9wdGlvbnMudHJpZ2dlckNvbmZpZyk7XG4gICAgICAgIHRyaWdnZXIgPSB0aGlzLm1ha2VCdXR0b24ob3B0aW9ucy50cmlnZ2VyQ29uZmlnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy52aWV3cy5wdXNoKHZpZXcpO1xuICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfSAvLyBlbmQgb2YgXCJhZGRWaWV3XCJcblxuICB9KTsgLy8gZW5kIG9mIFwiYWRkIG1ldGhvZHNcIlxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBTaWRlYm9hcmQgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuU2lkZWJvYXJkO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zaWRlYm9hcmQuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG5cbnZhciBjNGcgPSB0aGlzLmM0ZztcblxuaW1wb3J0IHtTaWRlYm9hcmR9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc2lkZWJvYXJkXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtCYXNlbGF5ZXJzd2l0Y2hlcn0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRwbHVnaW4tYmFzZWxheWVyc3dpdGNoZXJcIjtcbmltcG9ydCB7TGF5ZXJzd2l0Y2hlcn0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRwbHVnaW4tbGF5ZXJzd2l0Y2hlclwiO1xuaW1wb3J0IHtDdXN0b210YWJ9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWN1c3RvbXRhYlwiO1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBleHRlbmRzIHtjNGcubWFwcy5jb250cm9sLlNpZGVib2FyZH1cbiAgICogQHBhcmFtICAge29iamVjdH0gICAgICAgICAgICAgIG9wdF9vcHRpb25zICAqb3B0aW9uYWwqIG1pc2MgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLlN0YXJib2FyZCA9IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuXG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgY3JlYXRlOiB0cnVlLFxuICAgICAgZXh0RGl2OiBmYWxzZSxcbiAgICAgIGRlZmF1bHRPcGVuOiBmYWxzZSxcbiAgICAgIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgIG5hbWU6ICdzdGFyYm9hcmQnLFxuICAgICAgZGlyZWN0aW9uOiAncmlnaHQnLFxuICAgICAgZmlsdGVyOiBmYWxzZVxuICAgIH0sIG9wdF9vcHRpb25zKTtcblxuICAgIC8vd2luZG93LmM0Z01hcHNIb29rcy5zdGFyYm9hcmRfbG9hZFBsdWdpbnMgPSBbXTtcblxuICAgIC8vc2V0IGhlYWRsaW5lLCBzaW5jZSB0aGUgZGVmaW5pdGlvbiBhYm92ZSBkb2VzIG5vdCB3b3JrIGZvciBoZWFkbGluZVxuICAgIGlmICghdGhpcy5vcHRpb25zLmhlYWRsaW5lIHx8IHRoaXMub3B0aW9ucy5oZWFkbGluZS5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vdGhpcy5vcHRpb25zLmhlYWRsaW5lID0gYzRnLm1hcHMuY29uc3RhbnQuaTE4bi5TVEFSQk9BUkQ7XG4gICAgfVxuXG4gICAgdGhpcy5ob29rX2xheWVyc3dpdGNoZXJfbG9hZGVkID0gdGhpcy5ob29rX2xheWVyc3dpdGNoZXJfbG9hZGVkIHx8IFtdO1xuXG4gICAgLy9jYWxsIFNpZGVib2FyZCAocGFyZW50KSBjb25zdHJ1Y3RvclxuICAgIFNpZGVib2FyZC5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucyk7XG4gIH07XG4gIG9sLmluaGVyaXRzKGM0Zy5tYXBzLmNvbnRyb2wuU3RhcmJvYXJkLCBTaWRlYm9hcmQpO1xuXG4gIC8vIEFkZCBtZXRob2RzXG4gIGM0Zy5tYXBzLmNvbnRyb2wuU3RhcmJvYXJkLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuU3RhcmJvYXJkLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgYmFzaWMgaHRtbC1lbGVtZW50cyBmb3IgdGhlIHN0YXJib2FyZFxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICAndHJ1ZScgb24gc3VjY2Vzc1xuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgdmFyIHBsdWdpbixcbiAgICAgICAgICByZW5kZXJMYXllcnRyZWUsXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIGxheWVyLFxuICAgICAgICAgIHNlbGYsXG4gICAgICAgICAgZm5SZW5kZXIsXG4gICAgICAgICAgZGlzcGxheUxheWVyc3dpdGNoZXIgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBMb2FkIFN0YXJib2FyZCBwbHVnaW5zXG4gICAgICB0aGlzLnBsdWdpbnMgPSB7fTtcblxuICAgICAgLy8gY3JlYXRlcyBhbmQgcmVuZGVycyB0aGUgc3RhcmJvYXJkIHBsdWdpbnNcbiAgICAgIGZuUmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGxvb3AgdGhyb3VnaCBsYXllcnMgYW5kIGNoZWNrIGlmIHRoZXJlIGlzIGFueSBub3JtYWwgbGF5ZXJ0cmVlIHRvIHJlbmRlclxuICAgICAgICBmb3IgKGtleSBpbiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzKSB7XG4gICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgbGF5ZXIgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2tleV07XG4gICAgICAgICAgICBpZiAoIWxheWVyLnJlbmRlclNwZWNpYWwpIHtcbiAgICAgICAgICAgICAgcmVuZGVyTGF5ZXJ0cmVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbmRlckxheWVydHJlZSkge1xuICAgICAgICAgIC8vIGRvIG5vdCBkaXNwbGF5IGxheWVyc3dpdGNoZXIgaWYgdGhlcmUgaXMgbm90aGluZyB0byBzd2l0Y2hcbiAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVycykge1xuICAgICAgICAgICAgZm9yKGxldCBpZCBpbiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzKSB7XG4gICAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2lkXS5kaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheUxheWVyc3dpdGNoZXIgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gLSBsb2FkIFwiTGF5ZXJzd2l0Y2hlclwiXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMubGF5ZXJTd2l0Y2hlckNyZWF0ZSAmJiByZW5kZXJMYXllcnRyZWUgJiYgZGlzcGxheUxheWVyc3dpdGNoZXIpIHtcbiAgICAgICAgICBzZWxmLnBsdWdpbnMubGF5ZXJzd2l0Y2hlciA9IG5ldyBMYXllcnN3aXRjaGVyKHNlbGYpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FsbCBob29rIHRvIGxvYWQgYWRkaXRpb25hbCBzdGFyYm9hcmQgdGFicyAobGF5ZXJzKVxuICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhzZWxmLmhvb2tfbGF5ZXJzd2l0Y2hlcl9sb2FkZWQpO1xuXG5cbiAgICAgICAgLy8gLSBjaGVjayAmIGxvYWQgb3RoZXIgU3RhcmJvYXJkLXBsdWdpbnMgKHZpYSBob29rKVxuICAgICAgICAvLyBjYWxsZWQgZnVuY3Rpb25zIGhhdmUgdG8gYWRkIHRoZW1zZWx2ZXMgdG8gdGhpcy5wbHVnaW5zXG4gICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3Muc3RhcmJvYXJkX2xvYWRQbHVnaW5zID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3Muc3RhcmJvYXJkX2xvYWRQbHVnaW5zLCBzZWxmKTtcbiAgICAgICAgICAvLyAtIGFjdGl2YXRlIG5ldyBwbHVnaW5zIGlmIHRoZXkgYXJlIG5vdCBhY3RpdmF0ZWQgYWxyZWFkeVxuICAgICAgICAgIGZvciAocGx1Z2luIGluIHNlbGYucGx1Z2lucykge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcGx1Z2luIGlzIGEgcmVhbCBwbHVnaW4gYW5kIG5vdCBhIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgcHJvdG90eXBlXG4gICAgICAgICAgICBpZiAoc2VsZi5wbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbikpIHtcbiAgICAgICAgICAgICAgc2VsZi5wbHVnaW5zW3BsdWdpbl0uYWN0aXZhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyAtIGxvYWQgXCJCYXNlbGF5ZXJzd2l0Y2hlclwiXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMuYmFzZWxheWVyU3dpdGNoZXJDcmVhdGUpIHtcbiAgICAgICAgICBzZWxmLnBsdWdpbnMuYmFzZWxheWVyc3dpdGNoZXIgPSBuZXcgQmFzZWxheWVyc3dpdGNoZXIoc2VsZik7XG4gICAgICAgICAgc2VsZi5wbHVnaW5zLmJhc2VsYXllcnN3aXRjaGVyLmFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYucGx1Z2lucy5sYXllcnN3aXRjaGVyKSB7XG4gICAgICAgICAgc2VsZi5wbHVnaW5zLmxheWVyc3dpdGNoZXIuYWN0aXZhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gZW5kIG9mIFwiZm5SZW5kZXIoKVwiXG5cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5sYXllcnNfbG9hZGVkKSB7XG4gICAgICAgIHRoaXMuc3Bpbm5lci5zaG93KCk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5Lmhvb2tfbGF5ZXJfbG9hZGVkLnB1c2goZnVuY3Rpb24obGF5ZXJJZHMpIHtcbiAgICAgICAgICBzZWxmLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgIGZuUmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbGF5ZXJzIGFyZSBhbHJlYWR5IGxvYWRlZFxuICAgICAgICBmblJlbmRlcigpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblxuXG5cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLyBlbmQgb2YgXCJpbml0XCJcblxuICB9KTsgLy8gRW5kIG9mIGFkZCBtZXRob2RzXG59KGpRdWVyeSwgYzRnKSk7XG5cbmV4cG9ydCB2YXIgU3RhcmJvYXJkID0gdGhpcy5jNGcubWFwcy5jb250cm9sLlN0YXJib2FyZDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxuaW1wb3J0IHtsYW5nQ29uc3RhbnRzR2VybWFufSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5cbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4gPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNFbmdsaXNofSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWVuXCI7XG5cbmxldCBsYW5nQ29uc3RhbnRzID0ge307XG5cbmlmICh0eXBlb2YgbWFwRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBpZiAobWFwRGF0YS5sYW5nID09PSBcImRlXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfSBlbHNlIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzRW5nbGlzaDtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9XG59XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICpcbiAgICogQGV4dGVuZHMge29sLmNvbnRyb2wuQ29udHJvbH1cbiAgICogQHBhcmFtICAge29iamVjdH0gICAgICAgICAgICAgIHN0YXJib2FyZFxuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uQmFzZWxheWVyc3dpdGNoZXIgPSBmdW5jdGlvbiAoc3RhcmJvYXJkKSB7XG4gICAgaWYgKCFzdGFyYm9hcmQpIHtcbiAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IGluaXRpYWxpemUgQmFzZWxheWVyc3dpdGNoZXIgd2l0aG91dCBhIHN0YXJib2FyZC4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5iYXNlbGF5ZXJzID0ge307XG5cbiAgICB0aGlzLnN0YXJib2FyZCA9IHN0YXJib2FyZDtcbiAgICB0aGlzLnByb3h5ID0gc3RhcmJvYXJkLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eTtcblxuICAgIHRoaXMuY3JlYXRlKCk7XG4gICAgdGhpcy5sb2FkQ29udGVudCgpO1xuICB9O1xuXG4gIC8vIEFkZCBtZXRob2RzXG4gIGM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luLkJhc2VsYXllcnN3aXRjaGVyLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luLkJhc2VsYXllcnN3aXRjaGVyLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtjcmVhdGUgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgICAgY29udGVudFdyYXBwZXIsXG4gICAgICAgICAgY29udGVudEhlYWRsaW5lLFxuICAgICAgICAgIGNvbnRlbnRJbmZvO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgY29udGVudFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgY29udGVudEhlYWRsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250ZW50SGVhZGxpbmUuaW5uZXJIVE1MID0gKHRoaXMuc3RhcmJvYXJkLm9wdGlvbnMuYmFzZWxheWVyU3dpdGNoZXJUaXRsZSB8fCBsYW5nQ29uc3RhbnRzLlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfQkFTRUxBWUVSU1dJVENIRVIpO1xuICAgICAgY29udGVudEhlYWRsaW5lLmNsYXNzTmFtZSA9ICdjb250ZW50SGVhZGxpbmUnO1xuICAgICAgY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQoY29udGVudEhlYWRsaW5lKTtcblxuICAgICAgdGhpcy5jb250ZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmNvbnRlbnREaXYuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlNUQVJCT0FSRF9DT05URU5UX0JBU0VMQVlFUlNXSVRDSEVSO1xuICAgICAgY29udGVudEluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICB0aGlzLmNvbnRlbnREaXYuYXBwZW5kQ2hpbGQoY29udGVudEluZm8pO1xuICAgICAgY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RGl2KTtcblxuICAgICAgc2VsZi52aWV3ID0gc2VsZi5zdGFyYm9hcmQuYWRkVmlldyh7XG4gICAgICAgIG5hbWU6ICdsYXllcnN3aXRjaGVyJyxcbiAgICAgICAgdHJpZ2dlckNvbmZpZzoge1xuICAgICAgICAgIHRpcExhYmVsOiAodGhpcy5zdGFyYm9hcmQub3B0aW9ucy5iYXNlbGF5ZXJTd2l0Y2hlclRpdGxlIHx8IGxhbmdDb25zdGFudHMuU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9CQVNFTEFZRVJTV0lUQ0hFUiksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9CQVNFTEFZRVJTV0lUQ0hFUixcbiAgICAgICAgICB3aXRoSGVhZGxpbmU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHNlY3Rpb25FbGVtZW50czogW1xuICAgICAgICAgIHtzZWN0aW9uOiBzZWxmLnN0YXJib2FyZC5jb250ZW50Q29udGFpbmVyLCBlbGVtZW50OiBjb250ZW50V3JhcHBlcn0sXG4gICAgICAgICAge3NlY3Rpb246IHNlbGYuc3RhcmJvYXJkLnRvcFRvb2xiYXIsIGVsZW1lbnQ6IHNlbGYuc3RhcmJvYXJkLnZpZXdUcmlnZ2VyQmFyfVxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFthY3RpdmF0ZSBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudmlldy5hY3RpdmF0ZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW3NldENvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBuZXdDb250ZW50ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2V0Q29udGVudDogZnVuY3Rpb24gKG5ld0NvbnRlbnQpIHtcbiAgICAgIGlmIChuZXdDb250ZW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3Q29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHRoaXMuY29udGVudERpdi5pbm5lckhUTUwgPSBuZXdDb250ZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50RGl2LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb250ZW50RGl2LnJlcGxhY2VDaGlsZChuZXdDb250ZW50LCB0aGlzLmNvbnRlbnREaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmNvbnRlbnREaXYuYXBwZW5kQ2hpbGQobmV3Q29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gQFRPRE9cbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY29udGVudERpdi5pbm5lckhUTUw7XG4gICAgfSxcblxuICAgIGxvYWRDb250ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBmbkRyYXdDb250ZW50O1xuXG4gICAgICBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuc3RhcmJvYXJkLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICBmbkRyYXdDb250ZW50ID0gZnVuY3Rpb24gKGJhc2VsYXllcklkcykge1xuICAgICAgICBzZWxmLmJhc2VMYXllckNvbnRyb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgJChzZWxmLmJhc2VMYXllckNvbnRyb2wpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5TVEFSQk9BUkRfQkFTRUxBWUVSVFJFRSk7XG4gICAgICAgIHNlbGYuc2V0Q29udGVudChzZWxmLmJhc2VMYXllckNvbnRyb2wpO1xuXG4gICAgICAgIHNlbGYuYWRkSXRlbXMoYmFzZWxheWVySWRzLCBzZWxmLmJhc2VMYXllckNvbnRyb2wpO1xuXG4gICAgICAgIHNlbGYuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICBzZWxmLnN0YXJib2FyZC5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgc2VsZi5zdGFyYm9hcmQudXBkYXRlKCk7XG4gICAgICB9IC8vIGVuZCBvZiBcImZuRHJhd0NvbnRlbnQoKVwiXG5cbiAgICAgIGlmICh0aGlzLnByb3h5LmJhc2VsYXllcnNfbG9hZGVkKSB7XG4gICAgICAgIGZuRHJhd0NvbnRlbnQodGhpcy5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmJhc2VsYXllcklkcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByb3h5Lmhvb2tfYmFzZWxheWVyX2xvYWRlZC5wdXNoKGZuRHJhd0NvbnRlbnQpO1xuICAgICAgfVxuICAgIH0sIC8vIGVuZCBvZiBcImxvYWRDb250ZW50KClcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtkcmF3Q29udGVudCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtbdHlwZV19ICBjb250ZW50RGF0YSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGRyYXdDb250ZW50OiBmdW5jdGlvbiAoY29udGVudERhdGEpIHtcbiAgICAgIC8vIFBBU1NcbiAgICB9LCAvLyBlbmQgb2YgXCJkcmF3Q29udGVudCgpXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbYWRkSXRlbXMgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBpdGVtRGF0YSAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIHdyYXBwZXJFbGVtZW50ICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgb3B0aW9ucyAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhZGRJdGVtczogZnVuY3Rpb24gKGl0ZW1EYXRhLCB3cmFwcGVyRWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgaixcbiAgICAgICAgICBzZWxmLFxuICAgICAgICAgIHdyYXBwZXIsXG4gICAgICAgICAgaXRlbSxcbiAgICAgICAgICB1aWQsXG4gICAgICAgICAgbGlzdEl0ZW0sXG4gICAgICAgICAgY2hpbGRMaXN0LFxuICAgICAgICAgIGNoaWxkSXRlbSxcbiAgICAgICAgICBjaGlsZEVudHJ5LFxuICAgICAgICAgIHRvZ2dsZSxcbiAgICAgICAgICBlbnRyeSxcbiAgICAgICAgICAkZW50cnksXG4gICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgIGhhbmRsZUVudHJ5Q2xpY2ssXG4gICAgICAgICAgaGFuZGxlQ2hhbmdlQmFzZWxheWVyVmlzaWJpbGl0eTtcblxuICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgIHBhcnNlQXNMaXN0OiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZUVudHJ5Q2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGl0ZW1VaWQsXG4gICAgICAgICAgICBzaWJsaW5ncyxcbiAgICAgICAgICAgIGJhc2VsYXllckl0ZW07XG4gICAgICAgICAgc2libGluZ3MgPSAkKHRoaXMpLnBhcmVudCgpLnNpYmxpbmdzKCk7XG4gICAgICAgICAgZm9yKHZhciBpID0gMDsgaTwgc2libGluZ3MubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICBpZiAoc2libGluZ3NbaV0gJiYgJChzaWJsaW5nc1tpXSkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pKSB7XG4gICAgICAgICAgICAgICAgICBpZihzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1tzZWxmLnByb3h5LmFjdGl2ZUJhc2VsYXllcklkXSAmJiBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1tzZWxmLnByb3h5LmFjdGl2ZUJhc2VsYXllcklkXS5oYXNPdmVybGF5cyl7XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaiBpbiBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1tzZWxmLnByb3h5LmFjdGl2ZUJhc2VsYXllcklkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5cyl7XG4gICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbc2VsZi5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXMuaGFzT3duUHJvcGVydHkoaikpXG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUxheWVyKHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3NlbGYucHJveHkuYWN0aXZlQmFzZWxheWVySWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW2pdLmxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgJChzaWJsaW5nc1tpXSkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbVVpZCA9ICQodGhpcykuZGF0YSgndWlkJyk7XG5cbiAgICAgICAgICBpZiAoc2VsZi5zdGFyYm9hcmQub3B0aW9ucy5jYWNoaW5nKSB7XG4gICAgICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUoJ2Jhc2VsYXllcicsIGl0ZW1VaWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCQodGhpcykucGFyZW50KCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKSkge1xuICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5yaWdodFNsaWRlRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5yaWdodFNsaWRlRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcygncmlnaHQnLCBzZWxmLnN0YXJib2FyZC5jb250YWluZXIub2Zmc2V0V2lkdGgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJChzZWxmLnN0YXJib2FyZC5lbGVtZW50KS5jc3MoJ3JpZ2h0Jywgc2VsZi5zdGFyYm9hcmQuY29udGFpbmVyLm9mZnNldFdpZHRoKTtcblxuICAgICAgICAgIGlmIChzZWxmLnByb3h5LmFjdGl2ZUJhc2VsYXllcklkICE9PSBpdGVtVWlkKSB7XG4gICAgICAgICAgICBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuc2hvd0Jhc2VMYXllcihpdGVtVWlkKTtcbiAgICAgICAgICAgIGlmKHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW2l0ZW1VaWRdLmhhc092ZXJsYXlzKXtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGogaW4gc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbaXRlbVVpZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXMpe1xuICAgICAgICAgICAgICAgICAgaWYoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbaXRlbVVpZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXMuaGFzT3duUHJvcGVydHkoaikpe1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1tpdGVtVWlkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5c1tqXS5sYXllcik7ICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcblxuICAgICAgICAgICAgLy8gaWYodGhpcy5uZXh0U2libGluZyl7XG4gICAgICAgICAgICAvLyAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5uZXh0U2libGluZy5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgLy8gICAgIGZvcihpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIC8vICAgICAgICAgJChjaGlsZHJlbltpXS5maXJzdENoaWxkKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIHdpbmRvdy5jNGdNYXBzSG9va3MuYmFzZWxheWVyX2NoYW5nZWQgPSB3aW5kb3cuYzRnTWFwc0hvb2tzLmJhc2VsYXllcl9jaGFuZ2VkIHx8IFtdO1xuICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5iYXNlbGF5ZXJfY2hhbmdlZCwgaXRlbVVpZCk7XG4gICAgICAgICAgfVxuICAgICAgfTsgLy8gZW5kIG9mIFwiaGFuZGxlRW50cnlDbGljaygpXCJcblxuICAgICAgaGFuZGxlQ2hhbmdlQmFzZWxheWVyVmlzaWJpbGl0eSA9IGZ1bmN0aW9uIChiYXNlbGF5ZXJDb25maWcpIHtcbiAgICAgICAgdmFyIGlkO1xuXG4gICAgICAgIGZvciAoaWQgaW4gc2VsZi5iYXNlbGF5ZXJzKSB7XG4gICAgICAgICAgaWYgKHNlbGYuYmFzZWxheWVycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgIGlmIChpZCA9PT0gYmFzZWxheWVyQ29uZmlnLmlkKSB7XG4gICAgICAgICAgICAgIHNlbGYuYmFzZWxheWVyc1tpZF0uJGVudHJ5LmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZWxmLmJhc2VsYXllcnNbaWRdLiRlbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuXG4gICAgICB3cmFwcGVyID0gb3B0aW9ucy5wYXJzZUFzTGlzdCA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJykgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgaWYgKGl0ZW1EYXRhLmxlbmd0aCA+IDApIHtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbURhdGEubGVuZ3RoOyBpICs9IDEpIHtcblxuICAgICAgICAgIHVpZCA9IGl0ZW1EYXRhW2ldO1xuICAgICAgICAgIHRoaXMuYmFzZWxheWVyc1t1aWRdID0ge307XG5cbiAgICAgICAgICBsaXN0SXRlbSA9IG9wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgdGhpcy5iYXNlbGF5ZXJzW3VpZF0uZW50cnlXcmFwcGVyID0gbGlzdEl0ZW07XG4gICAgICAgICAgZW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgZW50cnkuc2V0QXR0cmlidXRlKCdocmVmJywgJyMnKTtcbiAgICAgICAgICBlbnRyeS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm5hbWUpKTtcbiAgICAgICAgICAkKGVudHJ5KS5kYXRhKCdpZCcsIHVpZCk7XG4gICAgICAgICAgaWYoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5oYXNPdmVybGF5cyl7XG5cblxuICAgICAgICAgICAgY2hpbGRMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZm9yKGogPSAwOyBqIDwgc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5cy5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgIGNoaWxkSXRlbSA9IG9wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgIGNoaWxkRW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICAgIGlmKHNlbGYucHJveHkuYWN0aXZlQmFzZWxheWVySWQgPT0gdWlkKXtcbiAgICAgICAgICAgICAgICAgICQoY2hpbGRFbnRyeSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgICAgICAgICBsZXQgb3ZlcmxheUlkID0gc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5c1tqXS5pZDtcbiAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbb3ZlcmxheUlkXS5jaGFuZ2VPcGFjaXR5KHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXNbal0ub3BhY2l0eSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICQoY2hpbGRFbnRyeSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNoaWxkRW50cnkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5c1tqXS5uYW1lKSk7XG4gICAgICAgICAgICAgICQoY2hpbGRFbnRyeSkuZGF0YSgnaWQnLHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW3VpZF0ub3ZlcmxheXNbal0uaWQpO1xuICAgICAgICAgICAgICAkKGNoaWxkRW50cnkpLmRhdGEoJ3BpZCcsdWlkKTtcbiAgICAgICAgICAgICAgdG9nZ2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgdG9nZ2xlLmNsYXNzTmFtZSA9ICdjNGctb3ZlcmxheS10b2dnbGUnO1xuICAgICAgICAgICAgICB0b2dnbGUuc2V0QXR0cmlidXRlKCd0eXBlJywncmFuZ2UnKTtcbiAgICAgICAgICAgICAgdG9nZ2xlLnNldEF0dHJpYnV0ZSgnbWluJywwKTtcbiAgICAgICAgICAgICAgdG9nZ2xlLnNldEF0dHJpYnV0ZSgnbWF4JywxMDApO1xuICAgICAgICAgICAgICB0b2dnbGUuc2V0QXR0cmlidXRlKCd2YWx1ZScsc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5c1tqXS5vcGFjaXR5KTtcbiAgICAgICAgICAgICAgdG9nZ2xlLnNldEF0dHJpYnV0ZSgnc3RlcHMnLDEwKTtcbiAgICAgICAgICAgICAgJCh0b2dnbGUpLm9uKCdpbnB1dCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbJCh0aGlzKS5wYXJlbnQoKS5kYXRhKCdwaWQnKV0ub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbJCh0aGlzKS5wYXJlbnQoKS5kYXRhKCdpZCcpXS5jaGFuZ2VPcGFjaXR5KHRoaXMudmFsdWUpXG4gICAgICAgICAgICAgIH0pO1xuXG5cblxuICAgICAgICAgICAgICBjaGlsZEVudHJ5LmFwcGVuZENoaWxkKHRvZ2dsZSk7XG4gICAgICAgICAgICAgIGNoaWxkSXRlbS5hcHBlbmRDaGlsZChjaGlsZEVudHJ5KTtcbiAgICAgICAgICAgICAgY2hpbGRMaXN0LmFwcGVuZENoaWxkKGNoaWxkSXRlbSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICAgICAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZW50cnkpO1xuICAgICAgICAgIGlmKGNoaWxkTGlzdCl7XG4gICAgICAgICAgICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGNoaWxkTGlzdCk7XG4gICAgICAgICAgICAgIGNoaWxkTGlzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkZW50cnkgPSAkKGVudHJ5KTtcbiAgICAgICAgICB0aGlzLmJhc2VsYXllcnNbdWlkXS4kZW50cnkgPSAkZW50cnk7XG5cbiAgICAgICAgICBpZiAodGhpcy5zdGFyYm9hcmQub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuZGVmYXVsdF9iYXNlbGF5ZXIgJiYgcGFyc2VJbnQodWlkLCAxMCkgPT09IHBhcnNlSW50KHNlbGYuc3RhcmJvYXJkLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmRlZmF1bHRfYmFzZWxheWVyLCAxMCkpIHtcbiAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgICQobGlzdEl0ZW0pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICAgICAgICAgaWYoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5oYXNPdmVybGF5cyl7XG4gICAgICAgICAgICAgICAgICBmb3IobGV0IGogaW4gc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5cyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzLmhhc093blByb3BlcnR5KGopKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuYXJyQmFzZWxheWVyc1t1aWRdLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW2pdLmNoYW5nZU9wYWNpdHkoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdWlkXS5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5c1tqXS5vcGFjaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgJChsaXN0SXRlbSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkZW50cnkuZGF0YSgndWlkJywgdWlkKTtcbiAgICAgICAgICAkZW50cnkuY2xpY2soaGFuZGxlRW50cnlDbGljayk7XG5cbiAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgICAgLy8gU3RhcmJvYXJkIEZpbHRlclxuICAgICAgICAgIGlmICh0aGlzLnN0YXJib2FyZC5vcHRpb25zLmZpbHRlcikge1xuICAgICAgICAgICAgICB2YXIgZHYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgZHYuY2xhc3NOYW1lID0gXCJjNGctc3RhcmJvYXJkLWZpbHRlciBjNGctY29udGVudC1zZWxlY3RcIjtcbiAgICAgICAgICAgICAgdmFyIGZpbHRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICAgIGZpbHRlci50eXBlID0gJ3RleHQnO1xuICAgICAgICAgICAgICBmaWx0ZXIucGxhY2Vob2xkZXIgPSBcIlwiOyAvL0ZvbnQgQXdlc29tZVxuICAgICAgICAgICAgICB2YXIgaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgICAgICAgICAgaS5jbGFzc05hbWUgPSAnZmFzIGZhLWZpbHRlcic7XG4gICAgICAgICAgICAgIGkuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgICBkdi5hcHBlbmRDaGlsZChmaWx0ZXIpO1xuICAgICAgICAgICAgICBkdi5hcHBlbmRDaGlsZChpKTtcbiAgICAgICAgICAgICAgZmlsdGVyLm9ua2V5dXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmaWx0ZXJfdWxsaShlbGVtZW50LCBzaG93U3VidHJlZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gZG8gbm90IGFwcGx5IGZpbHRlciBmb3Igc2hvcnQgc2VhcmNoIHRlcm1zXG5cbiAgICAgICAgICAgICAgICAgICAgICBzaG93U3VidHJlZSA9IHNob3dTdWJ0cmVlIHx8IGZhbHNlOyAgLy8gdXNlZCB3aGlsZSB0cmF2ZXJzaW5nIGRvd24gdGhlIHRyZWVcblxuICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAqIFJldHVybnMgYW4gYXJyYXkgKG1vZGlmaWVkOiBmaXJzdCBlbGVtZW50KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudHMuIE9ubHkgZmluZHMgY2hpbGRyZW4gb2YgdGhlIGdpdmVuIHBhcmVudCBlbGVtZW50LCBidXRcbiAgICAgICAgICAgICAgICAgICAgICAgKiBubyBmdXJ0aGVyIGRlc2NlbmRhbnRzIGxpa2UgZ2V0RWxlbWVudHNCeVRhZ05hbWUgZG9lcy5cbiAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRDaGlsZHJlbkJ5VGFnTmFtZShlbGVtZW50LCB0YWdOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuW2ldLnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PSB0YWdOYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZC5wdXNoKGVsZW1lbnQuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm91bmRbMF07IC8vICEhIVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoRmxhZ1VsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnRyZWVNYXRjaGVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggTEkgZG9cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzTWF0Y2ggPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VhcmNoIGN1cnJlbnQgTEkgZm9yIGZpbHRlciB0ZXJtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jaGlsZHJlbltpXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpWzBdLmlubmVySFRNTC50b1VwcGVyQ2FzZSgpLmluZGV4T2YoZmlsdGVyLnZhbHVlLnRvVXBwZXJDYXNlKCkpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIGEgbWF0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc01hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVjdXJzZSBpZiBhIHN1YnRyZWUgKFVMKSBleGlzdHMgaW4gY3VycmVudCBMSSAobWF4IDEgZXhwZWN0ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdWwgPSBnZXRDaGlsZHJlbkJ5VGFnTmFtZShlbGVtZW50LmNoaWxkcmVuW2ldLCBcInVsXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWN1cnNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzU3VidHJlZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VidHJlZU1hdGNoZXMgPSBmaWx0ZXJfdWxsaSh1bCwgc2hvd1N1YnRyZWUgfHwgaXNNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNTdWJ0cmVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc01hdGNoIHx8IHN1YnRyZWVNYXRjaGVzIHx8IHNob3dTdWJ0cmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hGbGFnVWwgPSB0cnVlOyAvLyB1c2VkIHdoaWxlIHRyYXZlcnNpbmcgdXAgdGhlIHRyZWUgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY3VycmVudCBMSSB2aXNpYmxlIGFuZCBvcGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIudmFsdWUubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZChcImM0Zy1vcGVuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1zdGFyYm9hcmQtZmlsdGVyLW1hdGNoXCIpOyAvLyBhbHdheXMgcmVtb3ZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWF0Y2ggJiYgZmlsdGVyLnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QuYWRkKFwiYzRnLXN0YXJib2FyZC1maWx0ZXItbWF0Y2hcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY3VycmVudCBMSSBpbnZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctb3BlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoXCJjNGctY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYzRnLXN0YXJib2FyZC1maWx0ZXItbWF0Y2hcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaEZsYWdVbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgLy8gZG8gbm90IHJlYWN0IGltbWVkaWF0ZWx5IGJ1dCBhbGxvdyBmb3Igc29tZSBrZXlzdHJva2VzXG4gICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyB0d28gb3IgemVybyBsZXR0ZXJzIGFyZSByZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIudmFsdWUubGVuZ3RoICE9IDEpIGZpbHRlcl91bGxpKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jNGctYmFzZWxheWVydHJlZSA+IHVsOm50aC1jaGlsZCgyKScpKVxuICAgICAgICAgICAgICAgICAgfSwgMzUwKTtcblxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdyYXBwZXJFbGVtZW50LmFwcGVuZENoaWxkKGR2KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm94eS5ob29rX2Jhc2VsYXllcl92aXNpYmlsaXR5LnB1c2goaGFuZGxlQ2hhbmdlQmFzZWxheWVyVmlzaWJpbGl0eSk7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWxlbWVudC5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgICB9IC8vIGVuZCBvZiBcImFkZEl0ZW1zKClcIlxuXG4gIH0pOyAvLyBlbmQgb2YgXCJhZGQgbWV0aG9kc1wiXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIEJhc2VsYXllcnN3aXRjaGVyID0gdGhpcy5jNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5CYXNlbGF5ZXJzd2l0Y2hlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWJhc2VsYXllcnN3aXRjaGVyLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luID0gdGhpcy5jNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbiB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcblxubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIGxhbmdDb25zdGFudHMgPSBsYW5nQ29uc3RhbnRzR2VybWFuO1xuICB9IGVsc2UgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJlblwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNFbmdsaXNoO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrXG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH1cbn1cblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gc3RhcmJvYXJkXG4gICAqIEBwYXJhbSBwbHVnaW5cbiAgICogQHBhcmFtIHByb2plY3RDb25mXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luLkN1c3RvbXRhYiA9IGZ1bmN0aW9uIChzdGFyYm9hcmQsIHByb2plY3RDb25mKSB7XG4gICAgaWYgKCFzdGFyYm9hcmQpIHtcbiAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IGluaXRpYWxpemUgUHJvamVjdC10YWIgd2l0aG91dCBhIHN0YXJib2FyZC4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcHJvamVjdENvbmYgPSAkLmV4dGVuZCh7XG4gICAgICB0YWJJZDogbnVsbCxcbiAgICAgIG5hbWU6IFwiQ3VzdG9tdGFiXCIsXG4gICAgICBhd2Vzb21laWNvbjogJydcbiAgICB9LCBwcm9qZWN0Q29uZik7XG5cbiAgICBpZiAoIXByb2plY3RDb25mLnRhYklkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCBpbml0aWFsaXplIFByb2plY3QtdGFiIHdpdGhvdXQgYW4gaWQuJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgLy90aGlzLnBsdWdpbiA9IHBsdWdpbiB8fCBmYWxzZTtcbiAgICB0aGlzLmNvbnRlbnRMb2FkZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0YXJib2FyZCA9IHN0YXJib2FyZDtcbiAgICB0aGlzLnByb3h5ID0gc3RhcmJvYXJkLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eTtcbiAgICB0aGlzLm1hcCA9IHRoaXMucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcDtcbiAgICB0aGlzLmxheWVycyA9IHt9O1xuICAgIHRoaXMudGFiSWQgPSBwcm9qZWN0Q29uZi50YWJJZDtcbiAgICB0aGlzLm5hbWUgPSBwcm9qZWN0Q29uZi5uYW1lO1xuICAgIHRoaXMuYXdlc29tZWljb24gPSBwcm9qZWN0Q29uZi5hd2Vzb21laWNvbi5yZXBsYWNlKCcmIzkyOycsIFwiXFxcXFwiKTtcbiAgICBzdGFyYm9hcmQucGx1Z2luc1tcImN1c3RvbVRhYlwiKyB0aGlzLnRhYklkXSA9IHRoaXM7XG4gICAgdGhpcy5jcmVhdGUoKTtcbiAgfTtcblxuICAvLyBBZGQgbWV0aG9kc1xuICBjNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5DdXN0b210YWIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uQ3VzdG9tdGFiLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtjcmVhdGUgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlbGYsXG4gICAgICAgIGNvbnRlbnRXcmFwcGVyLFxuICAgICAgICBjb250ZW50SGVhZGxpbmUsXG4gICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmssXG4gICAgICAgIHNlbGVjdG9yLFxuICAgICAgICBsYXllclN3aXRjaGVyVGl0bGU7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgY29udGVudFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRlbnRIZWFkbGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udGVudEhlYWRsaW5lLmNsYXNzTmFtZSA9ICdjb250ZW50SGVhZGxpbmUnO1xuXG4gICAgICBsYXllclN3aXRjaGVyVGl0bGUgPSB0aGlzLnN0YXJib2FyZC5vcHRpb25zLmxheWVyU3dpdGNoZXJUaXRsZTtcblxuICAgICAgaWYgKHNlbGYubmFtZSkge1xuICAgICAgICAgIGxheWVyU3dpdGNoZXJUaXRsZSA9IHNlbGYubmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYoIXRoaXMuc3RhcmJvYXJkLm9wdGlvbnMuYnV0dG9uKSB7XG4gICAgICAgIGNvbnRlbnRIZWFkbGluZS5pbm5lckhUTUwgPSAobGF5ZXJTd2l0Y2hlclRpdGxlIHx8IGxhbmdDb25zdGFudHMuU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9MQVlFUlNXSVRDSEVSKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgICQoY29udGVudEhlYWRsaW5lKS5hZGRDbGFzcyhcImM0Zy1zdGFyYm9hcmQtaGVhZGxpbmVcIik7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmVMaW5rLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKFwiYzRnLWFjdGl2ZVwiKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5wcm94eS5sYXllcklkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLmhpZGVMYXllcihzZWxmLnByb3h5LmxheWVySWRzW2ldKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJjNGctYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImM0Zy1pbmFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5wcm94eS5sYXllcklkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLnNob3dMYXllcihzZWxmLnByb3h5LmxheWVySWRzW2ldKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJjNGctaW5hY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwiYzRnLWFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgJChjb250ZW50SGVhZGxpbmVMaW5rKS5hZGRDbGFzcyhcImM0Zy1pbmFjdGl2ZSBjNGctc3RhcmJvYXJkLWhlYWRsaW5lLWxpbmtcIik7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lTGluay5pbm5lckhUTUwgPSAobGF5ZXJTd2l0Y2hlclRpdGxlIHx8IGxhbmdDb25zdGFudHMuU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9MQVlFUlNXSVRDSEVSKTtcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmVMaW5rLmlubmVySFRNTCA9IGNvbnRlbnRIZWFkbGluZUxpbmsuaW5uZXJIVE1MKycgJztcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmUuYXBwZW5kQ2hpbGQoY29udGVudEhlYWRsaW5lTGluayk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKGNvbnRlbnRIZWFkbGluZSk7XG5cbiAgICAgIHRoaXMuY29udGVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGhpcy5jb250ZW50RGl2LmNsYXNzTmFtZSA9ICdjNGdfc3RhcmJvYXJkcGx1Z2luX2NvbnRlbnQnO1xuICAgICAgY29udGVudFdyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RGl2KTtcblxuICAgICAgc2VsZi52aWV3ID0gc2VsZi5zdGFyYm9hcmQuYWRkVmlldyh7XG4gICAgICAgIG5hbWU6IHNlbGYubmFtZSxcbiAgICAgICAgdHJpZ2dlckNvbmZpZzoge1xuICAgICAgICAgIHRpcExhYmVsOiBzZWxmLm5hbWUsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnYzRnLXN0YXJib2FyZC12aWV3LXRyaWdnZXItc3RhcmJvYXJkcGx1Z2luLScgKyBzZWxmLnRhYklkLFxuICAgICAgICAgIHdpdGhIZWFkbGluZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHNlbGYuc3RhcmJvYXJkLmNvbnRlbnRDb250YWluZXIsIGVsZW1lbnQ6IGNvbnRlbnRXcmFwcGVyfSxcbiAgICAgICAgICB7c2VjdGlvbjogc2VsZi5zdGFyYm9hcmQudG9wVG9vbGJhciwgZWxlbWVudDogc2VsZi5zdGFyYm9hcmQudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF1cbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMuYXdlc29tZWljb24uc3Vic3RyaW5nKDAsIDEpID09PSBcIlxcXFxcIikge1xuICAgICAgICB0aGlzLmF3ZXNvbWVpY29uID0gdGhpcy5hd2Vzb21laWNvbi5zdWJzdHJpbmcoMSwgdGhpcy5hd2Vzb21laWNvbi5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgc2VsZWN0b3IgPSAnYnV0dG9uLmM0Zy1zdGFyYm9hcmQtdmlldy10cmlnZ2VyLXN0YXJib2FyZHBsdWdpbi0nICsgc2VsZi50YWJJZDtcbiAgICAgIC8vVG9EbyBtw7ZnbGljaGVyd2Vpc2Ugc3RhbmRhcmQgaWNvbiA/XG4gICAgICBpZiAodGhpcy5hd2Vzb21laWNvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIHN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgICAgICAgICAgICBzdHlsZVNoZWV0O1xuXG4gICAgICAgICAgLy8gQXBwZW5kIHN0eWxlIGVsZW1lbnQgdG8gaGVhZFxuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbCk7XG5cbiAgICAgICAgICAvLyBHcmFiIHN0eWxlIHNoZWV0XG4gICAgICAgICAgc3R5bGVTaGVldCA9IHN0eWxlRWwuc2hlZXQ7XG4gICAgICAgIC8vIGNhdGNoIGZpcmVmb3gsIGJlY2F1c2UgRkYgZG9lcyBub3Qga25vdyBcImFkZFJ1bGVcIlxuICAgICAgICBpZiAoc3R5bGVTaGVldC5hZGRSdWxlICYmIHR5cGVvZiBkb2N1bWVudC5zdHlsZVNoZWV0c1swXS5hZGRSdWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdHlsZVNoZWV0LmFkZFJ1bGUoc2VsZWN0b3IgKyAnOmJlZm9yZScsICdjb250ZW50OiBcIlxcXFwnKyB0aGlzLmF3ZXNvbWVpY29uICsnXCI7Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGUoc2VsZWN0b3IgKyAnOmJlZm9yZSB7IGNvbnRlbnQ6IFwiXFxcXCcrIHRoaXMuYXdlc29tZWljb24gKydcIjt9JywgMCk7XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgICAgdGhpcy5hY3RpdmF0ZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2FjdGl2YXRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy52aWV3LmFjdGl2YXRlKCk7XG4gICAgICBpZiAoIXRoaXMuY29udGVudExvYWRlZCkge1xuICAgICAgICB0aGlzLmxvYWRDb250ZW50KCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbc2V0Q29udGVudCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge05vZGV9ICBuZXdDb250ZW50ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2V0Q29udGVudDogZnVuY3Rpb24gKG5ld0NvbnRlbnQpIHtcbiAgICAgIGlmIChuZXdDb250ZW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3Q29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHRoaXMuY29udGVudERpdi5pbm5lckhUTUwgPSBuZXdDb250ZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50RGl2LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb250ZW50RGl2LnJlcGxhY2VDaGlsZChuZXdDb250ZW50LCB0aGlzLmNvbnRlbnREaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmNvbnRlbnREaXYuYXBwZW5kQ2hpbGQobmV3Q29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gQFRPRE9cbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY29udGVudERpdi5pbm5lckhUTUw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbbG9hZENvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGxvYWRDb250ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgZm5EcmF3Q29udGVudDtcblxuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLnN0YXJib2FyZC5zcGlubmVyLnNob3coKTtcblxuICAgICAgZm5EcmF3Q29udGVudCA9IGZ1bmN0aW9uIChsYXllcklkcykge1xuICAgICAgICBzZWxmLnRyZWVDb250cm9sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICQoc2VsZi50cmVlQ29udHJvbCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLlNUQVJCT0FSRF9MQVlFUlRSRUUpO1xuICAgICAgICBzZWxmLnNldENvbnRlbnQoc2VsZi50cmVlQ29udHJvbCk7XG4gICAgICAgIHNlbGYuYWRkSXRlbXMobGF5ZXJJZHMsIHNlbGYudHJlZUNvbnRyb2wsIHtwYXJzZUFzTGlzdDogdHJ1ZX0pO1xuICAgICAgICBzZWxmLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5jb250ZW50TG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5zdGFyYm9hcmQuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgIHNlbGYuc3RhcmJvYXJkLnVwZGF0ZSgpO1xuICAgICAgfTsgLy8gZW5kIG9mIFwiZm5EcmF3Q29udGVudCgpXCJcblxuICAgICAgZm5EcmF3Q29udGVudCh0aGlzLnByb3h5LmxheWVySWRzKTtcbiAgICB9LCAvLyBlbmQgb2YgXCJsb2FkQ29udGVudCgpXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbYWRkSXRlbXMgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBpdGVtRGF0YSAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIHdyYXBwZXJFbGVtZW50ICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgb3B0aW9ucyAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhZGRJdGVtczogZnVuY3Rpb24gKGl0ZW1EYXRhLCB3cmFwcGVyRWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdmFyIGksXG4gICAgICAgIHdyYXBwZXIsXG4gICAgICAgIGl0ZW0sXG4gICAgICAgIGxheWVyLFxuICAgICAgICB1aWQsXG4gICAgICAgIGxpc3RJdGVtLFxuICAgICAgICBlbnRyeSxcbiAgICAgICAgJGVudHJ5LFxuICAgICAgICBoYW5kbGVFbnRyeUNsaWNrLFxuICAgICAgICBzZWxmLFxuICAgICAgICBwV3JhcHBlcixcbiAgICAgICAgdG9nZ2xlLFxuICAgICAgICBjaGlsZFdyYXBwZXI7XG5cbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgcGFyc2VBc0xpc3Q6IHRydWVcbiAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgaGFuZGxlRW50cnlDbGljayA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBpdGVtVWlkO1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIFwidGhpc1wiIGlzIHRoZSBldmVudCBzZW5kaW5nIGVudHJ5XG4gICAgICAgIGl0ZW1VaWQgPSAkKHRoaXMpLmRhdGEoJ3VpZCcpO1xuICAgICAgICBpZiAoc2VsZi5wcm94eS5hY3RpdmVMYXllcklkc1tpdGVtVWlkXSkge1xuICAgICAgICAgIC8vIGhpZGUgbGF5ZXJcbiAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcbiAgICAgICAgICBzZWxmLmhpZGVMYXllcihpdGVtVWlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBzaG93IGxheWVyXG4gICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgc2VsZi5zaG93TGF5ZXIoaXRlbVVpZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIHJlZ2lzdGVyIGhvb2sgdG8gc3dpdGNoIGNoaWxkcyBvZiBsYXllcnMgYXMgd2VsbFxuICAgICAgdGhpcy5wcm94eS5ob29rX2xheWVyX3Zpc2liaWxpdHkucHVzaChmdW5jdGlvbiAobGF5ZXJJZCkge1xuICAgICAgICB2YXIgaixcbiAgICAgICAgICBjaGFuZ2VkTGF5ZXI7XG5cbiAgICAgICAgY2hhbmdlZExheWVyID0gc2VsZi5sYXllcnNbbGF5ZXJJZF07XG4gICAgICAgIGlmIChjaGFuZ2VkTGF5ZXIgJiYgY2hhbmdlZExheWVyLiRlbnRyaWVzKSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNoYW5nZWRMYXllci4kZW50cmllcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHNbbGF5ZXJJZF0pIHtcbiAgICAgICAgICAgICAgY2hhbmdlZExheWVyLiRlbnRyaWVzW2pdLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGFuZ2VkTGF5ZXIuJGVudHJpZXNbal0uYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBlbmQgb2YgaG9va1xuXG4gICAgICAvLyBhZGQgaG9vayBmdW5jdGlvbiBmb3IgY2hhbmdlZCB6b29tXG4gICAgICAvLyAgIG5lZWRlZCB0byBjaGFuZ2UgdGhlIGVudHJ5LWNsYXNzZXNcbiAgICAgIHRoaXMucHJveHkuaG9va19tYXBfem9vbS5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGosXG4gICAgICAgICAgaWQsXG4gICAgICAgICAgbGF5ZXI7XG5cbiAgICAgICAgZm9yIChpZCBpbiBzZWxmLmxheWVycykge1xuICAgICAgICAgIGlmIChzZWxmLmxheWVycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgIGxheWVyID0gc2VsZi5sYXllcnNbaWRdO1xuICAgICAgICAgICAgaWYgKGxheWVyICYmIGxheWVyLiRlbnRyaWVzKSB7XG4gICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsYXllci4kZW50cmllcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnByb3h5LmNoZWNrTGF5ZXJJc0FjdGl2ZUZvclpvb20oaWQpKSB7XG4gICAgICAgICAgICAgICAgICBsYXllci4kZW50cmllc1tqXS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuRElTQUJMRUQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBsYXllci4kZW50cmllc1tqXS5hZGRDbGFzcyhjc3NDb25zdGFudHMuRElTQUJMRUQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7IC8vIGVuZCBvZiBob29rXG5cbiAgICAgIC8vIGJ1aWxkIHRoZSBsYXllciB0cmVlXG4gICAgICB3cmFwcGVyID0gb3B0aW9ucy5wYXJzZUFzTGlzdCA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJykgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGlmIChpdGVtRGF0YSAmJiBpdGVtRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtRGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHVpZCA9IGl0ZW1EYXRhW2ldO1xuICAgICAgICAgIC8vbGF5ZXIgPSB0aGlzLnBsdWdpbi5jdXN0b21UYWJzW3RoaXMudGFiSWRdLmRyYXduRmVhdHVyZXNbdWlkXTtcbiAgICAgICAgICBsYXllciA9IHRoaXMucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1t1aWRdO1xuICAgICAgICAgIC8vIHNraXAgbGF5ZXIgaWYgaXQgZG9lc24ndCBiZWxvbmcgdG8gdGhpcyB0YWJcbiAgICAgICAgICBpZiAoIShsYXllci5yZW5kZXJTcGVjaWFsID09IHRydWUgJiYgKGxheWVyLnRhYklkID09IHRoaXMudGFiSWQpKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGRvIG5vdCByZW5kZXIgdGhlIHN0YXJ0YWIgbGF5ZXIgaXRzZWxmIGFzIHBhcmVudCBsZXZlbFxuICAgICAgICAgIGlmIChsYXllci50eXBlID09PSBcInN0YXJ0YWJcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGNoZWNrIGlmIGxheWVyIHdhbnRzIHRvIGJlIGRpc3BsYXllZCBpbiBzdGFyYm9hcmQgdGFiXG4gICAgICAgICAgaWYgKGxheWVyLmhpZGVXaGVuSW5UYWIgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobGF5ZXIuaGlkZSA9PT0gXCIxXCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3h5LmFjdGl2ZUxheWVySWRzW2xheWVyLmlkXSkge1xuICAgICAgICAgICAgICAvLyB0aGlzLmhpZGVMYXllcihsYXllci5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBsYXllciBzaG91bGQgYmUgZGlzcGxheWVkXG4gICAgICAgICAgaWYgKCFsYXllci5kaXNwbGF5KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbSA9IHt9O1xuICAgICAgICAgIHRoaXMubGF5ZXJzW3VpZF0gPSBpdGVtO1xuICAgICAgICAgIGxpc3RJdGVtID0gb3B0aW9ucy5wYXJzZUFzTGlzdCA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJykgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBpdGVtLmVudHJ5V3JhcHBlcnMgPSBpdGVtLmVudHJ5V3JhcHBlcnMgfHwgW107XG4gICAgICAgICAgaXRlbS5lbnRyeVdyYXBwZXJzLnB1c2gobGlzdEl0ZW0pO1xuICAgICAgICAgIGVudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgIGVudHJ5LnNldEF0dHJpYnV0ZSgnaHJlZicsICcjJyk7XG4gICAgICAgICAgZW50cnkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobGF5ZXIubGF5ZXJuYW1lIHx8IGxheWVyLm5hbWUpKTtcbiAgICAgICAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChlbnRyeSk7XG4gICAgICAgICAgJGVudHJ5ID0gJChlbnRyeSk7XG4gICAgICAgICAgaXRlbS4kZW50cmllcyA9IGl0ZW0uJGVudHJpZXMgfHwgW107XG4gICAgICAgICAgaXRlbS4kZW50cmllcy5wdXNoKCRlbnRyeSk7XG4gICAgICAgICAgJGVudHJ5LmRhdGEoJ3VpZCcsIHVpZCk7XG4gICAgICAgICAgJGVudHJ5LmNsaWNrKGhhbmRsZUVudHJ5Q2xpY2spO1xuXG4gICAgICAgICAgLy8gcHJlcGFyZSBpbnNlcnRpb24gb2YgY2hpbGRzXG4gICAgICAgICAgaWYgKGxheWVyLnZpc2libGVDaGlsZHMpIHtcbiAgICAgICAgICAgIHRvZ2dsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgICQobGlzdEl0ZW0pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSk7XG4gICAgICAgICAgICAkKHRvZ2dsZSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklDT04pO1xuICAgICAgICAgICAgJCh0b2dnbGUpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKCQodGhpcykucGFyZW50KCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKSkge1xuICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIucmlnaHRTbGlkZUVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIucmlnaHRTbGlkZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKCdyaWdodCcsIHNlbGYuc3RhcmJvYXJkLmNvbnRhaW5lci5vZmZzZXRXaWR0aCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgJChzZWxmLnN0YXJib2FyZC5lbGVtZW50KS5jc3MoJ3JpZ2h0Jywgc2VsZi5zdGFyYm9hcmQuY29udGFpbmVyLm9mZnNldFdpZHRoKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKHRvZ2dsZSkuaW5zZXJ0QmVmb3JlKCRlbnRyeSk7XG4gICAgICAgICAgICBjaGlsZFdyYXBwZXIgPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaXRlbS5jaGlsZFdyYXBwZXJzID0gaXRlbS5jaGlsZFdyYXBwZXJzIHx8IFtdO1xuICAgICAgICAgICAgaXRlbS5jaGlsZFdyYXBwZXJzLnB1c2goY2hpbGRXcmFwcGVyKTtcbiAgICAgICAgICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGNoaWxkV3JhcHBlcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbdWlkXSkge1xuICAgICAgICAgICAgJGVudHJ5LmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkZW50cnkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMubGF5ZXJzW2xheWVyLnBpZF0pIHtcbiAgICAgICAgICAgIC8vIGlzIGNoaWxkLWVsZW1lbnRcbiAgICAgICAgICAgIHBXcmFwcGVyID0gdGhpcy5sYXllcnNbbGF5ZXIucGlkXS5jaGlsZFdyYXBwZXJzO1xuICAgICAgICAgICAgaWYgKHBXcmFwcGVyKSB7XG4gICAgICAgICAgICAgIHBXcmFwcGVyW3BXcmFwcGVyLmxlbmd0aCAtIDFdLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGVuZCBvZiBmb3ItbG9vcFxuICAgICAgICAvLyBTdGFyYm9hcmQgRmlsdGVyXG4gICAgICAgIGlmICh0aGlzLnN0YXJib2FyZC5vcHRpb25zLmZpbHRlcikge1xuICAgICAgICAgIHZhciBkdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGR2LmNsYXNzTmFtZSA9IFwiYzRnLXN0YXJib2FyZC1maWx0ZXIgYzRnLWNvbnRlbnQtc2VsZWN0XCI7XG4gICAgICAgICAgdmFyIGZpbHRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgZmlsdGVyLnR5cGUgPSAndGV4dCc7XG4gICAgICAgICAgZmlsdGVyLnBsYWNlaG9sZGVyID0gXCJcIjsgLy9Gb250IEF3ZXNvbWVcbiAgICAgICAgICB2YXIgaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgICAgICBpLmNsYXNzTmFtZSA9ICdmYXMgZmEtZmlsdGVyJztcbiAgICAgICAgICBpLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICBkdi5hcHBlbmRDaGlsZChmaWx0ZXIpO1xuICAgICAgICAgIGR2LmFwcGVuZENoaWxkKGkpO1xuICAgICAgICAgIGZpbHRlci5vbmtleXVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZmlsdGVyX3VsbGkoZWxlbWVudCwgc2hvd1N1YnRyZWUpIHtcblxuICAgICAgICAgICAgICAvLyBkbyBub3QgYXBwbHkgZmlsdGVyIGZvciBzaG9ydCBzZWFyY2ggdGVybXNcblxuICAgICAgICAgICAgICBzaG93U3VidHJlZSA9IHNob3dTdWJ0cmVlIHx8IGZhbHNlOyAgLy8gdXNlZCB3aGlsZSB0cmF2ZXJzaW5nIGRvd24gdGhlIHRyZWVcblxuICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICogUmV0dXJucyBhbiBhcnJheSAobW9kaWZpZWQ6IGZpcnN0IGVsZW1lbnQpIG9mIHRoZSBnaXZlbiBlbGVtZW50cy4gT25seSBmaW5kcyBjaGlsZHJlbiBvZiB0aGUgZ2l2ZW4gcGFyZW50IGVsZW1lbnQsIGJ1dFxuICAgICAgICAgICAgICAgKiBubyBmdXJ0aGVyIGRlc2NlbmRhbnRzIGxpa2UgZ2V0RWxlbWVudHNCeVRhZ05hbWUgZG9lcy5cbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGdldENoaWxkcmVuQnlUYWdOYW1lKGVsZW1lbnQsIHRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuW2ldLnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PSB0YWdOYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQucHVzaChlbGVtZW50LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZFswXTsgLy8gISEhXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBtYXRjaEZsYWdVbCA9IGZhbHNlO1xuICAgICAgICAgICAgICB2YXIgc3VidHJlZU1hdGNoZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggTEkgZG9cbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgICAgICAgICAgICAgdmFyIGlzTWF0Y2ggPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBjdXJyZW50IExJIGZvciBmaWx0ZXIgdGVybVxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF0uaW5uZXJIVE1MLnRvVXBwZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIudmFsdWUudG9VcHBlckNhc2UoKSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgLy8gaXQncyBhIG1hdGNoXG4gICAgICAgICAgICAgICAgICBpc01hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyByZWN1cnNlIGlmIGEgc3VidHJlZSAoVUwpIGV4aXN0cyBpbiBjdXJyZW50IExJIChtYXggMSBleHBlY3RlZClcbiAgICAgICAgICAgICAgICB2YXIgdWwgPSBnZXRDaGlsZHJlbkJ5VGFnTmFtZShlbGVtZW50LmNoaWxkcmVuW2ldLCBcInVsXCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHVsKSB7XG4gICAgICAgICAgICAgICAgICAvLyByZWN1cnNpb25cbiAgICAgICAgICAgICAgICAgIHZhciBoYXNTdWJ0cmVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHN1YnRyZWVNYXRjaGVzID0gZmlsdGVyX3VsbGkodWwsIHNob3dTdWJ0cmVlIHx8IGlzTWF0Y2gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaGFzU3VidHJlZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc01hdGNoIHx8IHN1YnRyZWVNYXRjaGVzIHx8IHNob3dTdWJ0cmVlKSB7XG4gICAgICAgICAgICAgICAgICBtYXRjaEZsYWdVbCA9IHRydWU7IC8vIHVzZWQgd2hpbGUgdHJhdmVyc2luZyB1cCB0aGUgdHJlZSBhZ2FpblxuICAgICAgICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgTEkgdmlzaWJsZSBhbmQgb3BlblxuICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlci52YWx1ZS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1jbG9zZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QuYWRkKFwiYzRnLW9wZW5cIik7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1zdGFyYm9hcmQtZmlsdGVyLW1hdGNoXCIpOyAvLyBhbHdheXMgcmVtb3ZlXG4gICAgICAgICAgICAgICAgICBpZiAoaXNNYXRjaCAmJiBmaWx0ZXIudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBzZXQgY3VycmVudCBMSSBpbnZpc2libGVcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYzRnLW9wZW5cIik7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoXCJjNGctY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJjNGctc3RhcmJvYXJkLWZpbHRlci1tYXRjaFwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChtYXRjaEZsYWdVbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkbyBub3QgcmVhY3QgaW1tZWRpYXRlbHkgYnV0IGFsbG93IGZvciBzb21lIGtleXN0cm9rZXNcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAvLyB0d28gb3IgemVybyBsZXR0ZXJzIGFyZSByZXF1aXJlZFxuICAgICAgICAgICAgICBpZiAoZmlsdGVyLnZhbHVlLmxlbmd0aCAhPSAxKSBmaWx0ZXJfdWxsaShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYzRnLWxheWVydHJlZSA+IHVsOm50aC1jaGlsZCgyKScpKVxuICAgICAgICAgICAgfSwgMzUwKTtcblxuICAgICAgICAgIH1cblxuICAgICAgICAgIHdyYXBwZXJFbGVtZW50LmFwcGVuZENoaWxkKGR2KTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVyRWxlbWVudC5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgXCJhZGRJdGVtcygpXCJcblxuICAgIHNob3dMYXllcjogZnVuY3Rpb24oaXRlbVVpZCkge1xuICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbaXRlbVVpZF0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByb3h5LmxheWVyQ29udHJvbGxlci5zaG93TGF5ZXIoaXRlbVVpZCk7XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwic2hvd0xheWVyKClcIlxuXG4gICAgaGlkZUxheWVyOiBmdW5jdGlvbihpdGVtVWlkKSB7XG4gICAgICBpZiAoIXRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbaXRlbVVpZF0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByb3h5LmxheWVyQ29udHJvbGxlci5oaWRlTGF5ZXIoaXRlbVVpZCk7XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwiaGlkZUxheWVyKClcIlxuXG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCJcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgQ3VzdG9tdGFiID0gdGhpcy5jNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5DdXN0b210YWI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkcGx1Z2luLWN1c3RvbXRhYi5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0dlcm1hbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wgPSB0aGlzLmM0Zy5tYXBzLmNvbnRyb2wgfHwge307XG50aGlzLmM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luID0gdGhpcy5jNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbiB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBleHRlbmRzIHtvbC5jb250cm9sLkNvbnRyb2x9XG4gICAqIEBwYXJhbSAgIHtvYmplY3R9ICAgICAgICAgICAgICBzdGFyYm9hcmRcbiAgICovXG4gIGM0Zy5tYXBzLmNvbnRyb2wuc3RhcmJvYXJkcGx1Z2luLkxheWVyc3dpdGNoZXIgPSBmdW5jdGlvbiAoc3RhcmJvYXJkKSB7XG4gICAgaWYgKCFzdGFyYm9hcmQpIHtcbiAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IGluaXRpYWxpemUgTGF5ZXJzd2l0Y2hlciB3aXRob3V0IGEgc3RhcmJvYXJkLicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmxheWVycyA9IHt9O1xuXG4gICAgdGhpcy5zdGFyYm9hcmQgPSBzdGFyYm9hcmQ7XG4gICAgdGhpcy5wcm94eSA9IHN0YXJib2FyZC5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHk7XG4gICAgdGhpcy5jcmVhdGUoKTtcbiAgICB0aGlzLmxvYWRDb250ZW50KCk7XG4gIH07XG5cbiAgLy8gQWRkIG1ldGhvZHNcbiAgYzRnLm1hcHMuY29udHJvbC5zdGFyYm9hcmRwbHVnaW4uTGF5ZXJzd2l0Y2hlci5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5MYXllcnN3aXRjaGVyLnByb3RvdHlwZSwge1xuXG4gICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBjb250ZW50V3JhcHBlcixcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmUsXG4gICAgICAgICAgY29udGVudEhlYWRsaW5lTGluayxcbiAgICAgICAgICBjb250ZW50SW5mbyxcbiAgICAgICAgICBsYXllclN3aXRjaGVyVGl0bGU7XG5cbiAgICAgIGxheWVyU3dpdGNoZXJUaXRsZSA9IHRoaXMuc3RhcmJvYXJkLm9wdGlvbnMubGF5ZXJTd2l0Y2hlclRpdGxlO1xuXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgICAgY29udGVudFdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRlbnRIZWFkbGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udGVudEhlYWRsaW5lLmNsYXNzTmFtZSA9ICdjb250ZW50SGVhZGxpbmUnO1xuXG4gICAgICBpZighdGhpcy5zdGFyYm9hcmQub3B0aW9ucy5idXR0b24pIHtcbiAgICAgICAgICBjb250ZW50SGVhZGxpbmUuaW5uZXJIVE1MID0gKGxheWVyU3dpdGNoZXJUaXRsZSB8fCBsYW5nQ29uc3RhbnRzLlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgICAkKGNvbnRlbnRIZWFkbGluZSkuYWRkQ2xhc3MoXCJjNGctc3RhcmJvYXJkLWhlYWRsaW5lXCIpO1xuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lTGluay5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcyhcImM0Zy1hY3RpdmVcIikgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYucHJveHkubGF5ZXJJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5oaWRlTGF5ZXIoc2VsZi5wcm94eS5sYXllcklkc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwiYzRnLWFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJjNGctaW5hY3RpdmVcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYucHJveHkubGF5ZXJJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5zaG93TGF5ZXIoc2VsZi5wcm94eS5sYXllcklkc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwiYzRnLWluYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImM0Zy1hY3RpdmVcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgICQoY29udGVudEhlYWRsaW5lTGluaykuYWRkQ2xhc3MoXCJjNGctaW5hY3RpdmUgYzRnLXN0YXJib2FyZC1oZWFkbGluZS1saW5rXCIpO1xuICAgICAgICAgIGNvbnRlbnRIZWFkbGluZUxpbmsuaW5uZXJIVE1MID0gKGxheWVyU3dpdGNoZXJUaXRsZSB8fCBsYW5nQ29uc3RhbnRzLlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUik7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lTGluay5pbm5lckhUTUwgPSBjb250ZW50SGVhZGxpbmVMaW5rLmlubmVySFRNTCsnICc7XG4gICAgICAgICAgY29udGVudEhlYWRsaW5lLmFwcGVuZENoaWxkKGNvbnRlbnRIZWFkbGluZUxpbmspO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50V3JhcHBlci5hcHBlbmRDaGlsZChjb250ZW50SGVhZGxpbmUpO1xuXG4gICAgICB0aGlzLmNvbnRlbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRoaXMuY29udGVudERpdi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuU1RBUkJPQVJEX0NPTlRFTlRfTEFZRVJTV0lUQ0hFUjtcbiAgICAgIGNvbnRlbnRJbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgdGhpcy5jb250ZW50RGl2LmFwcGVuZENoaWxkKGNvbnRlbnRJbmZvKTtcbiAgICAgIGNvbnRlbnRXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuY29udGVudERpdik7XG5cbiAgICAgIHNlbGYudmlldyA9IHNlbGYuc3RhcmJvYXJkLmFkZFZpZXcoe1xuICAgICAgICBuYW1lOiAnbGF5ZXJzd2l0Y2hlcicsXG4gICAgICAgIHRyaWdnZXJDb25maWc6IHtcbiAgICAgICAgICB0aXBMYWJlbDogKGxheWVyU3dpdGNoZXJUaXRsZSB8fCBsYW5nQ29uc3RhbnRzLlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUiksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjc3NDb25zdGFudHMuU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9MQVlFUlNXSVRDSEVSLFxuICAgICAgICAgIHdpdGhIZWFkbGluZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdGlvbkVsZW1lbnRzOiBbXG4gICAgICAgICAge3NlY3Rpb246IHNlbGYuc3RhcmJvYXJkLmNvbnRlbnRDb250YWluZXIsIGVsZW1lbnQ6IGNvbnRlbnRXcmFwcGVyfSxcbiAgICAgICAgICB7c2VjdGlvbjogc2VsZi5zdGFyYm9hcmQudG9wVG9vbGJhciwgZWxlbWVudDogc2VsZi5zdGFyYm9hcmQudmlld1RyaWdnZXJCYXJ9XG4gICAgICAgIF1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2FjdGl2YXRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy52aWV3LmFjdGl2YXRlKCk7XG4gICAgfSwgLy8gZW5kIG9mIFwiYWN0aXZhdGUoKVwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW3NldENvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICBuZXdDb250ZW50ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2V0Q29udGVudDogZnVuY3Rpb24gKG5ld0NvbnRlbnQpIHtcbiAgICAgIGlmIChuZXdDb250ZW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3Q29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHRoaXMuY29udGVudERpdi5pbm5lckhUTUwgPSBuZXdDb250ZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50RGl2LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb250ZW50RGl2LnJlcGxhY2VDaGlsZChuZXdDb250ZW50LCB0aGlzLmNvbnRlbnREaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmNvbnRlbnREaXYuYXBwZW5kQ2hpbGQobmV3Q29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gQFRPRE9cbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY29udGVudERpdi5pbm5lckhUTUw7XG4gICAgfSwgLy8gZW5kIG9mIFwic2V0Q29udGVudCgpXCJcblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbbG9hZENvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGxvYWRDb250ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZixcbiAgICAgICAgICBmbkRyYXdDb250ZW50O1xuXG4gICAgICBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuc3RhcmJvYXJkLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICBmbkRyYXdDb250ZW50ID0gZnVuY3Rpb24gKGxheWVySWRzKSB7XG4gICAgICAgIHNlbGYudHJlZUNvbnRyb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgJChzZWxmLnRyZWVDb250cm9sKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuU1RBUkJPQVJEX0xBWUVSVFJFRSk7XG4gICAgICAgIHNlbGYuc2V0Q29udGVudChzZWxmLnRyZWVDb250cm9sKTtcblxuICAgICAgICBzZWxmLmFkZEl0ZW1zKGxheWVySWRzLCBzZWxmLnRyZWVDb250cm9sKTtcblxuICAgICAgICBzZWxmLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5zdGFyYm9hcmQuc3Bpbm5lci5oaWRlKCk7XG4gICAgICAgIHNlbGYuc3RhcmJvYXJkLnVwZGF0ZSgpO1xuICAgICAgfTsgLy8gZW5kIG9mIFwiZm5EcmF3Q29udGVudCgpXCJcblxuICAgICAgaWYgKHRoaXMucHJveHkubGF5ZXJzX2xvYWRlZCkge1xuICAgICAgICBmbkRyYXdDb250ZW50KHRoaXMucHJveHkubGF5ZXJJZHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm94eS5ob29rX2xheWVyX2xvYWRlZC5wdXNoKGZuRHJhd0NvbnRlbnQpO1xuICAgICAgfVxuICAgIH0sIC8vIGVuZCBvZiBcImxvYWRDb250ZW50KClcIlxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtkcmF3Q29udGVudCBkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBkcmF3Q29udGVudDogZnVuY3Rpb24gKGNvbnRlbnREYXRhKSB7XG4gICAgICAvLyBQQVNTXG4gICAgfSwgLy8gZW5kIG9mIFwiZHJhd0NvbnRlbnQoKVwiXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2FkZEl0ZW1zIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgaXRlbURhdGEgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICB3cmFwcGVyRWxlbWVudCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIG9wdGlvbnMgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgYWRkSXRlbXM6IGZ1bmN0aW9uIChpdGVtRGF0YSwgd3JhcHBlckVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIHNlbGYsXG4gICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgIHdyYXBwZXIsXG4gICAgICAgICAgY2hpbGRXcmFwcGVyLFxuICAgICAgICAgIHBXcmFwcGVyLFxuICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgdWlkLFxuICAgICAgICAgIGxpc3RJdGVtLFxuICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgICRlbnRyeSxcbiAgICAgICAgICB0b2dnbGUsXG4gICAgICAgICAgZm5IYW5kbGVFbnRyeUNsaWNrLFxuICAgICAgICAgIGZuQ2hpbGRFbnRyeUNsaWNrLFxuICAgICAgICAgIGZuQ2hpbGRFbnRyeVNob3csXG4gICAgICAgICAgem9vbVRvRXh0ZW50LFxuICAgICAgICAgIGxheWVyQ2xhc3M7XG5cbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAgIHBhcnNlQXNMaXN0OiB0cnVlXG4gICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgd3JhcHBlciA9IG9wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgIC8vIGNyZWF0ZSBoYW5kbGVyIGZvciBlbnRyeS1jbGlja3NcbiAgICAgIGZuSGFuZGxlRW50cnlDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgaXRlbVVpZCxcbiAgICAgICAgICAgIGxheWVySXRlbTtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGl0ZW1VaWQgPSAkKHRoaXMpLmRhdGEoJ3VpZCcpO1xuICAgICAgICBsYXllckl0ZW0gPSBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbaXRlbVVpZF07XG5cbiAgICAgICAgaWYgKHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHNbaXRlbVVpZF0pIHtcbiAgICAgICAgICAvLyBoaWRlIGxheWVyXG4gICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuaGlkZUxheWVyKGl0ZW1VaWQpO1xuICAgICAgICAgIGlmIChwYXJzZUludChsYXllci5waWQsIDEwKSA9PSAwKSB7XG4gICAgICAgICAgICAvLyBoaWRlIGFsbCBjaGlsZHMsIGJlY2F1c2UgY2xpY2tlZCBsYXllciBpcyB0aGUgbWFwIGl0c2VsZlxuICAgICAgICAgICAgZm9yICh2YXIgaWQgaW4gc2VsZi5wcm94eS5hY3RpdmVMYXllcklkcykge1xuICAgICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5hY3RpdmVMYXllcklkcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5oaWRlTGF5ZXIoaWQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHNob3cgbGF5ZXJcbiAgICAgICAgICBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5zaG93TGF5ZXIoaXRlbVVpZCk7XG4gICAgICAgICAgLy96b29vbSB0byBleHRlbnRcbiAgICAgICAgICB6b29tVG9FeHRlbnQoaXRlbVVpZCk7XG5cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5oYW5kbGVTZWxlY3RlZENoaWxkcyh0aGlzKSkge1xuICAgICAgICAgIHNlbGYudXBkYXRlUGFyZW50TGF5ZXJzKHRoaXMsIGl0ZW1VaWQsIGxheWVySXRlbSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjNGcubWFwcy5sYXllcnNbaXRlbVVpZF0gPSBsYXllckl0ZW07XG4gICAgICB9OyAvLyBlbmQgb2YgXCJmbkhhbmRsZUVudHJ5Q2xpY2soKVwiXG4gICAgICAgIGZuQ2hpbGRFbnRyeUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbGV0IGl0ZW1VaWQgPSAkKHRoaXMpLmRhdGEoJ3VpZCcpO1xuICAgICAgICAgICAgbGV0IHBhcmVudCA9ICQodGhpcykucGFyZW50KCkucGFyZW50KCkucGFyZW50KCk7XG4gICAgICAgICAgICBsZXQgY2hpbGRzID0gJChwYXJlbnQpLmNoaWxkcmVuKCk7XG4gICAgICAgICAgICBsZXQgcGFyZW50VWlkID0gJChjaGlsZHNbMV0pLmRhdGEoJ3VpZCcpO1xuICAgICAgICAgICAgaWYoJCh0aGlzKS5oYXNDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKSl7XG4gICAgICAgICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuaGlkZUNoaWxkTGF5ZXIocGFyZW50VWlkLCBpdGVtVWlkKTtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKCQodGhpcykuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKSl7XG4gICAgICAgICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuc2hvd0NoaWxkTGF5ZXIocGFyZW50VWlkLCBpdGVtVWlkKTtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm5DaGlsZEVudHJ5U2hvdyA9IGZ1bmN0aW9uIChldmVudCl7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgIGxldCB1aWQgPSAkKHBhcmVudC5maXJzdENoaWxkKS5kYXRhKCd1aWQnKTtcbiAgICAgICAgICBwYXJlbnQgPSAkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLnBhcmVudCgpO1xuICAgICAgICAgIGxldCBjaGlsZHMgPSAkKHBhcmVudCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICBsZXQgcGFyZW50VWlkID0gJChjaGlsZHNbMV0pLmRhdGEoJ3VpZCcpO1xuICAgICAgICAgIHVpZCA9IHVpZC5yZXBsYWNlKHBhcmVudFVpZCwnJylcbiAgICAgICAgICBsZXQgbGF5ZXIgPSBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbcGFyZW50VWlkXS52ZWN0b3JMYXllcjtcbiAgICAgICAgICBpZiAobGF5ZXIpIHtcbiAgICAgICAgICAgIGxldCBzaW5nbGVMYXllciA9IGxheWVyLmdldExheWVycygpLmdldEFycmF5KClbdWlkXTtcbiAgICAgICAgICAgIGxldCBmZWF0dXJlID0gc2luZ2xlTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKVswXTtcbiAgICAgICAgICAgIHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZml0KGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICB6b29tVG9FeHRlbnQgPSBmdW5jdGlvbihpdGVtVWlkKXsgLy9mdW5jdGlvbiB0byB6b29tIHRvIHRoZSBleHRlbnQgb2YgYSBtYXAgc3RydWN0dXJlIGFuZCBpdHMgY2hpbGRyZW5cbiAgICAgICAgICAgIHZhciBsYXllckl0ZW0sXG4gICAgICAgICAgICAgICAgdmVjdG9yQXJyYXksXG4gICAgICAgICAgICAgICAgbGF5ZXJHcm91cCxcbiAgICAgICAgICAgICAgICBjb29yZHMsXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnksXG4gICAgICAgICAgICAgICAgZmVhdHVyZUxpc3QsXG4gICAgICAgICAgICAgICAgZmVhdHVyZUFycmF5LFxuICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzID0gW10sXG4gICAgICAgICAgICAgICAgZXh0ZW50LFxuICAgICAgICAgICAgICAgIGNlbnRlcixcbiAgICAgICAgICAgICAgICBrZXk7XG4gICAgICAgICAgICBsYXllckl0ZW0gPSBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbaXRlbVVpZF07XG4gICAgICAgICAgICBpZiAobGF5ZXJJdGVtICYmIGxheWVySXRlbS56b29tX2xvY2F0aW9ucyA9PT0gXCIxXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobGF5ZXJJdGVtLmhhc0NoaWxkcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBsYXllckl0ZW0uY2hpbGRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJJdGVtLmNoaWxkcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIgPSBsYXllckl0ZW0uY2hpbGRzW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobGF5ZXIudHlwZSA9PSBcIm92ZXJwYXNzXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JBcnJheSA9IGxheWVyLmNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckFycmF5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2F0Y2ggY2FzZSBvZiBsaW5rZWQgbGF5ZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZlY3RvckFycmF5ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckFycmF5ID0gdXRpbHMub2JqZWN0VG9BcnJheSh2ZWN0b3JBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyR3JvdXAgPSBsYXllci52ZWN0b3JMYXllcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVjdG9yQXJyYXkgJiYgdmVjdG9yQXJyYXkuZm9yRWFjaCAmJiB0eXBlb2YgdmVjdG9yQXJyYXkuZm9yRWFjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JBcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2ZWN0b3JMYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckxheWVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LmNvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkudHlwZSA9PT0gXCJQb2ludFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkcyA9IG9sLnByb2oudHJhbnNmb3JtKFtwYXJzZUZsb2F0KHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCh2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdKV0sICdFUFNHOjQzMjYnLCAnRVBTRzozODU3Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5ID0gbmV3IG9sLmdlb20uUG9pbnQoY29vcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChnZW9tZXRyeS5nZXRDb29yZGluYXRlcygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgbW9yZSBjb21wbGV4IGdlb21ldHJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUxpc3QgPSBsYXllckdyb3VwLmdldExheWVycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlQXJyYXkgPSBmZWF0dXJlTGlzdC5nZXRBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLnR5cGUgPT09IFwia21sXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gZmVhdHVyZS5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3ZhciBzb3VyY2VGZWF0dXJlcyA9IHNvdXJjZS5nZXRGZWF0dXJlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5nZXRFeHRlbnQoKS5mb3JFYWNoKGZ1bmN0aW9uIChjb29yZGluYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2goY29vcmRpbmF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG9sLmV4dGVudC5nZXRUb3BSaWdodChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKVsnMCddICE9XCJJbmZpbml0eVwiICYmIG9sLmV4dGVudC5nZXRUb3BSaWdodChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKVsnMCddICE9XCItSW5maW5pdHlcIil7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKG9sLmV4dGVudC5nZXRUb3BMZWZ0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0Qm90dG9tUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKG9sLmV4dGVudC5nZXRCb3R0b21MZWZ0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKGxheWVySXRlbS50eXBlICE9PSBcIm92ZXJwYXNzXCIgJiYgbGF5ZXJJdGVtLnZlY3RvckxheWVyKXtcbiAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXkgPSBsYXllci5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAodmVjdG9yQXJyYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2F0Y2ggY2FzZSBvZiBsaW5rZWQgbGF5ZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZlY3RvckFycmF5ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXkgPSB1dGlscy5vYmplY3RUb0FycmF5KHZlY3RvckFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyR3JvdXAgPSBsYXllci52ZWN0b3JMYXllcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JBcnJheSAmJiB2ZWN0b3JBcnJheS5mb3JFYWNoICYmIHR5cGVvZiB2ZWN0b3JBcnJheS5mb3JFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodmVjdG9yTGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckxheWVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5kYXRhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LmNvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeS50eXBlID09PSBcIlBvaW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZHMgPSBvbC5wcm9qLnRyYW5zZm9ybShbcGFyc2VGbG9hdCh2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCh2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdKV0sICdFUFNHOjQzMjYnLCAnRVBTRzozODU3Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkgPSBuZXcgb2wuZ2VvbS5Qb2ludChjb29yZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2goZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllckdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIG1vcmUgY29tcGxleCBnZW9tZXRyaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUxpc3QgPSBsYXllckdyb3VwLmdldExheWVycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVBcnJheSA9IGZlYXR1cmVMaXN0LmdldEFycmF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUFycmF5LmZvckVhY2goZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobGF5ZXIudHlwZSAhPT0gXCJvdmVycGFzc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci50eXBlID09PSBcImttbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZlYXR1cmUuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgc291cmNlRmVhdHVyZXMgPSBzb3VyY2UuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UuZ2V0RXh0ZW50KCkuZm9yRWFjaChmdW5jdGlvbiAoY29vcmRpbmF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKGNvb3JkaW5hdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKG9sLmV4dGVudC5nZXRUb3BSaWdodChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wTGVmdChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0Qm90dG9tUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2gob2wuZXh0ZW50LmdldEJvdHRvbUxlZnQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIGV4dGVudCA9IG9sLmV4dGVudC5ib3VuZGluZ0V4dGVudChjb29yZGluYXRlcyk7XG4gICAgICAgICAgICAgICAgaWYgKGV4dGVudFswXSA9PT0gSW5maW5pdHkgfHwgZXh0ZW50WzBdID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZml0KGV4dGVudCwgc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFNpemUoKSk7XG4gICAgICAgICAgICAgICAgY2VudGVyID0gc2VsZi5wcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRDZW50ZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oY2VudGVyWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLnNldENlbnRlcihbNTAsIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuc2V0Wm9vbShtYXBEYXRhLm1pblpvb20gfHwgMTApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTsgLy9lbmQgb2Ygem9vbSB0byBleHRlbnRcbiAgICAgIC8vIGFkZCBob29rIGZ1bmN0aW9uIGZvciBjaGFuZ2VkIGxheWVyLXZpc2liaWxpdHlcbiAgICAgIC8vICAgbmVlZGVkIHRvIGNoYW5nZSB0aGUgZW50cnktY2xhc3Nlc1xuICAgICAgdGhpcy5wcm94eS5ob29rX2xheWVyX3Zpc2liaWxpdHkucHVzaChmdW5jdGlvbiAobGF5ZXJJZCkge1xuICAgICAgICB2YXIgaixcbiAgICAgICAgICAgIGNoYW5nZWRMYXllcjtcblxuICAgICAgICBjaGFuZ2VkTGF5ZXIgPSBzZWxmLmxheWVyc1tsYXllcklkXTtcbiAgICAgICAgaWYgKGNoYW5nZWRMYXllciAmJiBjaGFuZ2VkTGF5ZXIuJGVudHJpZXMpIHtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgY2hhbmdlZExheWVyLiRlbnRyaWVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5hY3RpdmVMYXllcklkc1tsYXllcklkXSkge1xuICAgICAgICAgICAgICBjaGFuZ2VkTGF5ZXIuJGVudHJpZXNbal0uYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLklOQUNUSVZFKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoYW5nZWRMYXllci4kZW50cmllc1tqXS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5oYW5kbGVTZWxlY3RlZENoaWxkcyggY2hhbmdlZExheWVyLiRlbnRyaWVzW2pdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBhZGQgaG9vayBmdW5jdGlvbiBmb3IgY2hhbmdlZCB6b29tXG4gICAgICAvLyAgIG5lZWRlZCB0byBjaGFuZ2UgdGhlIGVudHJ5LWNsYXNzZXNcbiAgICAgIHRoaXMucHJveHkuaG9va19tYXBfem9vbS5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGosXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIGxheWVyO1xuXG4gICAgICAgIGZvciAoaWQgaW4gc2VsZi5sYXllcnMpIHtcbiAgICAgICAgICBpZiAoc2VsZi5sYXllcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICBsYXllciA9IHNlbGYubGF5ZXJzW2lkXTtcbiAgICAgICAgICAgIGlmIChsYXllciAmJiBsYXllci4kZW50cmllcykge1xuICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGF5ZXIuJGVudHJpZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5wcm94eS5jaGVja0xheWVySXNBY3RpdmVGb3Jab29tKGlkKSkge1xuICAgICAgICAgICAgICAgICAgbGF5ZXIuJGVudHJpZXNbal0ucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkRJU0FCTEVEKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbGF5ZXIuJGVudHJpZXNbal0uYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkRJU0FCTEVEKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9KTsgLy8gZW5kIG9mIGhvb2tcblxuICAgICAgaWYgKGl0ZW1EYXRhICYmIGl0ZW1EYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW1EYXRhLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgdWlkID0gaXRlbURhdGFbaV07XG4gICAgICAgICAgbGF5ZXIgPSBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbdWlkXTtcbiAgICAgICAgICBpdGVtID0ge307XG4gICAgICAgICAgdGhpcy5sYXllcnNbdWlkXSA9IGl0ZW07XG4gICAgICAgICAgLy8gcmVuZGVyU3BlY2lhbCBpcyBzZXQgd2hlbiBhIGxheWVyIGlzIHJlbmRlcmVkIGluIGl0cyBvd24gdGFiXG4gICAgICAgICAgaWYgKGxheWVyLnJlbmRlclNwZWNpYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChsYXllciAmJiBsYXllci5kaXNwbGF5KSB7XG4gICAgICAgICAgICBsaXN0SXRlbSA9IG9wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBpdGVtLmVudHJ5V3JhcHBlcnMgPSBpdGVtLmVudHJ5V3JhcHBlcnMgfHwgW107XG4gICAgICAgICAgICBpdGVtLmVudHJ5V3JhcHBlcnMucHVzaChsaXN0SXRlbSk7XG5cbiAgICAgICAgICAgIGVudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgZW50cnkuc2V0QXR0cmlidXRlKCdocmVmJywgJyMnKTtcbiAgICAgICAgICAgIGVudHJ5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxheWVyLm5hbWUpKTtcbiAgICAgICAgICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGVudHJ5KTtcblxuICAgICAgICAgICAgJGVudHJ5ID0gJChlbnRyeSk7XG4gICAgICAgICAgICBpdGVtLiRlbnRyaWVzID0gaXRlbS4kZW50cmllcyB8fCBbXTtcbiAgICAgICAgICAgIGl0ZW0uJGVudHJpZXMucHVzaCgkZW50cnkpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMucHJveHkuY2hlY2tMYXllcklzQWN0aXZlRm9yWm9vbSh1aWQpKSB7XG4gICAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuRElTQUJMRUQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkZW50cnkuZGF0YSgndWlkJywgdWlkKTtcbiAgICAgICAgICAgICRlbnRyeS5jbGljayhmbkhhbmRsZUVudHJ5Q2xpY2spO1xuXG4gICAgICAgICAgICBpZiAobGF5ZXIudmlzaWJsZUNoaWxkcyB8fCBsYXllci5zcGxpdF9nZW9qc29uKSB7XG4gICAgICAgICAgICAgIHRvZ2dsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblxuICAgICAgICAgICAgICBpZiAobGF5ZXIuaGlkZV9jaGlsZCAhPT0gJzEnKSB7XG4gICAgICAgICAgICAgICAgICAkKGxpc3RJdGVtKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpO1xuICAgICAgICAgICAgICAgICAgJCh0b2dnbGUpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5JQ09OKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAkKHRvZ2dsZSkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnBhcmVudCgpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSkpIHtcbiAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT1BFTik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9QRU4pLmFkZENsYXNzKGNzc0NvbnN0YW50cy5DTE9TRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLnJpZ2h0U2xpZGVFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLnJpZ2h0U2xpZGVFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKCdyaWdodCcsIHNlbGYuc3RhcmJvYXJkLmNvbnRhaW5lci5vZmZzZXRXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAkKHNlbGYuc3RhcmJvYXJkLmVsZW1lbnQpLmNzcygncmlnaHQnLCBzZWxmLnN0YXJib2FyZC5jb250YWluZXIub2Zmc2V0V2lkdGgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgJCh0b2dnbGUpLmluc2VydEJlZm9yZSgkZW50cnkpO1xuICAgICAgICAgICAgICBjaGlsZFdyYXBwZXIgPSBvcHRpb25zLnBhcnNlQXNMaXN0ID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICBpdGVtLmNoaWxkV3JhcHBlcnMgPSBpdGVtLmNoaWxkV3JhcHBlcnMgfHwgW107XG4gICAgICAgICAgICAgIGl0ZW0uY2hpbGRXcmFwcGVycy5wdXNoKGNoaWxkV3JhcHBlcik7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVyLmhpZGVfY2hpbGQgIT09ICcxJykge1xuICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChjaGlsZFdyYXBwZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihsYXllci5zcGxpdF9nZW9qc29uICYmIGxheWVyLmNvbnRlbnRbMF0pe1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IGxheWVyLmNvbnRlbnRbMF0uZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5mZWF0dXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGRhdGEuZmVhdHVyZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlID0gZGF0YS5mZWF0dXJlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGRMaXN0SXRlbSA9IG9wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkSXRlbSA9e307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRJdGVtLmVudHJ5V3JhcHBlcnMgPSBjaGlsZEl0ZW0uZW50cnlXcmFwcGVycyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEl0ZW0uZW50cnlXcmFwcGVycy5wdXNoKGNoaWxkTGlzdEl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZEVudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkRW50cnkuc2V0QXR0cmlidXRlKCdocmVmJywgJyMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEVudHJ5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGZlYXR1cmUucHJvcGVydGllc1tsYXllci5nZW9qc29uX2F0dHJpYnV0ZXMuc3BsaXQoJywnKVswXV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZExpc3RJdGVtLmFwcGVuZENoaWxkKGNoaWxkRW50cnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZFVpZCA9IHVpZCArIFwiXCIgKyBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCAkY2hpbGRFbnRyeSA9ICQoY2hpbGRFbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRJdGVtLiRlbnRyaWVzID0gaXRlbS4kZW50cmllcyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEl0ZW0uJGVudHJpZXMucHVzaCgkZW50cnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkV3JhcHBlci5hcHBlbmRDaGlsZChjaGlsZExpc3RJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2hpbGRFbnRyeS5kYXRhKCd1aWQnLCBjaGlsZFVpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobGF5ZXIuZ2VvanNvbl96b29tKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjaGlsZEVudHJ5LmNsaWNrKGZuQ2hpbGRFbnRyeVNob3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNoaWxkRW50cnkuYWRkQ2xhc3MoJ2M0Zy1nZW9qc29uLWJ1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNoaWxkRW50cnkuY2xpY2soZm5DaGlsZEVudHJ5Q2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbdWlkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2hpbGRFbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjaGlsZEVudHJ5LmFkZENsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5hZGRDaGlsZHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLmFkZENoaWxkcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYod2luZG93LmM0Z01hcHNIb29rcy5zdGFyYm9hcmRfbGF5ZXJfYWN0aXZhdGUgJiYgd2luZG93LmM0Z01hcHNIb29rcy5zdGFyYm9hcmRfbGF5ZXJfYWN0aXZhdGUubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXJhbU9iaiA9IHsnZmVhdHVyZSc6IGZlYXR1cmUsICdwYXJlbnRJdGVtJzogY2hpbGRMaXN0SXRlbSwgJ2VudHJ5JzokY2hpbGRFbnRyeX07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3Muc3RhcmJvYXJkX2xheWVyX2FjdGl2YXRlLCBwYXJhbU9iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm94eS5hY3RpdmVMYXllcklkc1t1aWRdKSB7XG4gICAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBbaW5mb106ICBJbiBvcmRlciBmb3IgdGhpcyB0byB3b3JrLFxuICAgICAgICAgICAgLy8gICAgICAgICAgdGhlIHBhcmVudCBsYXllcnMgbmVlZCB0byBiZVxuICAgICAgICAgICAgLy8gICAgICAgICAgbGlzdGVkIGJlZm9yZSB0aGVpciBjaGlsZHNcbiAgICAgICAgICAgIGlmICh0aGlzLmxheWVyc1tsYXllci5waWRdKSB7XG4gICAgICAgICAgICAgIC8vIGlzIGNoaWxkLWVsZW1lbnRcbiAgICAgICAgICAgICAgcFdyYXBwZXIgPSB0aGlzLmxheWVyc1tsYXllci5waWRdLmNoaWxkV3JhcHBlcnM7XG4gICAgICAgICAgICAgIHBXcmFwcGVyW3BXcmFwcGVyLmxlbmd0aCAtIDFdLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChsYXllci5waWQsIDEwKSA9PSAwKSB7XG4gICAgICAgICAgICAgIC8vIGxheWVyIGlzIG1hcCBpdHNlbGYgd2l0aCBhIGxheWVyXG4gICAgICAgICAgICAgIHRvZ2dsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgICAgaWYobGF5ZXIuaGlkZV9jaGlsZCAhPT0gJzEnKSB7XG4gICAgICAgICAgICAgICAgICAkKGxpc3RJdGVtKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICQodG9nZ2xlKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuSUNPTik7XG4gICAgICAgICAgICAgICQodG9nZ2xlKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQodGhpcykucGFyZW50KCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKSkge1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQ0xPU0UpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PUEVOKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuT1BFTikuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkNMT1NFKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAkKHRvZ2dsZSkuaW5zZXJ0QmVmb3JlKCRlbnRyeSk7XG4gICAgICAgICAgICAgIGNoaWxkV3JhcHBlciA9IG9wdGlvbnMucGFyc2VBc0xpc3QgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgIGl0ZW0uY2hpbGRXcmFwcGVycyA9IGl0ZW0uY2hpbGRXcmFwcGVycyB8fCBbXTtcbiAgICAgICAgICAgICAgaXRlbS5jaGlsZFdyYXBwZXJzLnB1c2goY2hpbGRXcmFwcGVyKTtcbiAgICAgICAgICAgICAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoY2hpbGRXcmFwcGVyKTtcbiAgICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBpcyBub3QgYSBjaGlsZC1lbGVtZW50IChwaWQgPT0gbWFwSWQpXG4gICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobGF5ZXIuaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWRzdHIgPSBsYXllci5pZC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGxheWVyQ2xhc3MgPSBlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgICAgICAgICAgIGlkc3RyLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICApLnJlcGxhY2UoLyVbMC05QS1GXXsyfS9naSwnJyk7XG4gICAgICAgICAgICAgICAgJChsaXN0SXRlbSkuYWRkQ2xhc3MoJ2M0Z19zdGFyYm9hcmRfaXRlbV8nK2xheWVyQ2xhc3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobGF5ZXIuY3NzQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAkKGxpc3RJdGVtKS5hZGRDbGFzcyhsYXllci5jc3NDbGFzcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNhbGwgaG9vayBcImxheWVyc3dpdGNoZXJfZm9yRWFjaEl0ZW1cIlxuICAgICAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5sYXllcnN3aXRjaGVyX2ZvckVhY2hJdGVtID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKFxuICAgICAgICAgICAgICAgICAgd2luZG93LmM0Z01hcHNIb29rcy5sYXllcnN3aXRjaGVyX2ZvckVhY2hJdGVtLFxuICAgICAgICAgICAgICAgICAge3RoYXQ6IHRoaXMsIGl0ZW06IGl0ZW0sIGVudHJ5OiAkZW50cnl9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGVuZCBvZiBmb3ItbG9vcFxuXG4gICAgICAgIC8vIFN0YXJib2FyZCBGaWx0ZXJcbiAgICAgICAgaWYgKHRoaXMuc3RhcmJvYXJkLm9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICAgICAgICB2YXIgZHYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGR2LmNsYXNzTmFtZSA9IFwiYzRnLXN0YXJib2FyZC1maWx0ZXIgYzRnLWNvbnRlbnQtc2VsZWN0XCI7XG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGZpbHRlci50eXBlID0gJ3RleHQnO1xuICAgICAgICAgICAgZmlsdGVyLnBsYWNlaG9sZGVyID0gXCJcIjsgLy9Gb250IEF3ZXNvbWVcbiAgICAgICAgICAgIHZhciBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICAgICAgICAgICAgaS5jbGFzc05hbWUgPSAnZmFzIGZhLWZpbHRlcic7XG4gICAgICAgICAgICBpLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICAgIGR2LmFwcGVuZENoaWxkKGZpbHRlcik7XG4gICAgICAgICAgICBkdi5hcHBlbmRDaGlsZChpKTtcbiAgICAgICAgICAgIGZpbHRlci5vbmtleXVwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZmlsdGVyX3VsbGkoZWxlbWVudCwgc2hvd1N1YnRyZWUpIHtcblxuICAgICAgICAgICAgICAgICAgLy8gZG8gbm90IGFwcGx5IGZpbHRlciBmb3Igc2hvcnQgc2VhcmNoIHRlcm1zXG5cbiAgICAgICAgICAgICAgICAgICAgc2hvd1N1YnRyZWUgPSBzaG93U3VidHJlZSB8fCBmYWxzZTsgIC8vIHVzZWQgd2hpbGUgdHJhdmVyc2luZyBkb3duIHRoZSB0cmVlXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFJldHVybnMgYW4gYXJyYXkgKG1vZGlmaWVkOiBmaXJzdCBlbGVtZW50KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudHMuIE9ubHkgZmluZHMgY2hpbGRyZW4gb2YgdGhlIGdpdmVuIHBhcmVudCBlbGVtZW50LCBidXRcbiAgICAgICAgICAgICAgICAgICAgICogbm8gZnVydGhlciBkZXNjZW5kYW50cyBsaWtlIGdldEVsZW1lbnRzQnlUYWdOYW1lIGRvZXMuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRDaGlsZHJlbkJ5VGFnTmFtZShlbGVtZW50LCB0YWdOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuW2ldLnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PSB0YWdOYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQucHVzaChlbGVtZW50LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihmb3VuZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kWzBdOyAvLyAhISFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoRmxhZ1VsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJ0cmVlTWF0Y2hlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgZWFjaCBMSSBkb1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc01hdGNoID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBjdXJyZW50IExJIGZvciBmaWx0ZXIgdGVybVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGRyZW5baV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXS5pbm5lckhUTUwudG9VcHBlckNhc2UoKS5pbmRleE9mKGZpbHRlci52YWx1ZS50b1VwcGVyQ2FzZSgpKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQncyBhIG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2UgaWYgYSBzdWJ0cmVlIChVTCkgZXhpc3RzIGluIGN1cnJlbnQgTEkgKG1heCAxIGV4cGVjdGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVsID0gZ2V0Q2hpbGRyZW5CeVRhZ05hbWUoZWxlbWVudC5jaGlsZHJlbltpXSxcInVsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih1bCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNTdWJ0cmVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0cmVlTWF0Y2hlcyA9IGZpbHRlcl91bGxpKHVsLCBzaG93U3VidHJlZSB8fCBpc01hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc1N1YnRyZWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWF0Y2ggfHwgc3VidHJlZU1hdGNoZXMgfHwgc2hvd1N1YnRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaEZsYWdVbCA9IHRydWU7IC8vIHVzZWQgd2hpbGUgdHJhdmVyc2luZyB1cCB0aGUgdHJlZSBhZ2FpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjdXJyZW50IExJIHZpc2libGUgYW5kIG9wZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlci52YWx1ZS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1jbG9zZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QuYWRkKFwiYzRnLW9wZW5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYzRnLXN0YXJib2FyZC1maWx0ZXItbWF0Y2hcIik7IC8vIGFsd2F5cyByZW1vdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXRjaCAmJiBmaWx0ZXIudmFsdWUubGVuZ3RoID4gMCkge2VsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LmFkZChcImM0Zy1zdGFyYm9hcmQtZmlsdGVyLW1hdGNoXCIpfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgTEkgaW52aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QucmVtb3ZlKFwiYzRnLW9wZW5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbltpXS5jbGFzc0xpc3QuYWRkKFwiYzRnLWNsb3NlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uY2xhc3NMaXN0LnJlbW92ZShcImM0Zy1zdGFyYm9hcmQtZmlsdGVyLW1hdGNoXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hGbGFnVWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGRvIG5vdCByZWFjdCBpbW1lZGlhdGVseSBidXQgYWxsb3cgZm9yIHNvbWUga2V5c3Ryb2tlcyBcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgLy8gdHdvIG9yIHplcm8gbGV0dGVycyBhcmUgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIudmFsdWUubGVuZ3RoICE9IDEpIGZpbHRlcl91bGxpKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jNGctbGF5ZXJ0cmVlID4gdWw6bnRoLWNoaWxkKDIpJykpXG4gICAgICAgICAgICAgICAgfSwgMzUwKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd3JhcHBlckVsZW1lbnQuYXBwZW5kQ2hpbGQoZHYpO1xuXG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlckVsZW1lbnQuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwiYWRkSXRlbXMoKVwiXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gd2hpY2ggY2hlY2tzIGZvciBhIGdpdmVuIGxheWVyIGlkLCBpZiBhbnkgb2YgdGhlIGNoaWxkcyBhcmUgY3VycmVudGx5IHNlbGVjdGVkLlxuICAgICAqIEBwYXJhbSBsYXllclVpZFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGNoZWNrQ2hpbGRTZWxlY3Rpb25zOiBmdW5jdGlvbiAobGF5ZXJVaWQpIHtcbiAgICAgIHZhciBsYXllcixcbiAgICAgICAgICBjaGlsZEFjdGl2ZSxcbiAgICAgICAgICBzZWxmO1xuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICBjaGlsZEFjdGl2ZSA9IDA7XG4gICAgICBsYXllciA9IHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1tsYXllclVpZF07XG4gICAgICBpZiAobGF5ZXIgJiYgbGF5ZXIuY2hpbGRzICYmIGxheWVyLmNoaWxkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIGxheWVyIGhhcyBjaGlsZHNcbiAgICAgICAgbGF5ZXIuY2hpbGRzLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgaWYgKHNlbGYucHJveHkuYWN0aXZlTGF5ZXJJZHNbY2hpbGQuaWRdKSB7XG4gICAgICAgICAgICBjaGlsZEFjdGl2ZSA9IGNoaWxkQWN0aXZlICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgYW55IGNoaWxkcyBvZiBjaGlsZHMgYXJlIGFjdGl2ZVxuICAgICAgICAgICAgY2hpbGRBY3RpdmUgPSBjaGlsZEFjdGl2ZSArIHNlbGYuY2hlY2tDaGlsZFNlbGVjdGlvbnMoY2hpbGQudWlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoaWxkQWN0aXZlO1xuICAgIH0sIC8vIGVuZCBvZiBcImNoZWNrQ2hpbGRTZWxlY3Rpb25zKClcIlxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gZm9yIGNvbG9yaW5nIHRoZSBsYXllcnN3aXRjaGVyIGVudHJpZXMsIGlmIHRoZXJlIGFyZSBhbnkgc3VibGF5ZXJzIHNlbGVjdGVkXG4gICAgICogQHBhcmFtIGVudHJ5XG4gICAgICovXG4gICAgaGFuZGxlU2VsZWN0ZWRDaGlsZHM6IGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgaWYgKHRoaXMuY2hlY2tDaGlsZFNlbGVjdGlvbnMoJChlbnRyeSkuZGF0YSgndWlkJykpID49IDEpIHtcbiAgICAgICAgJChlbnRyeSkuY3NzKCdmb250LXdlaWdodCcsICdib2xkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGVudHJ5KS5jc3MoJ2ZvbnQtd2VpZ2h0JywgJ25vcm1hbCcpO1xuICAgICAgfVxuICAgICAgdGhpcy5zdGFyYm9hcmQudXBkYXRlKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgdXBkYXRlUGFyZW50TGF5ZXJzOiBmdW5jdGlvbiAoZW50cnksIGxheWVyVWlkLCBjbGlja2VkTGF5ZXIpIHtcbiAgICAgIHZhciBsYXllcixcbiAgICAgICAgICBwYXJlbnRFbnRyeSxcbiAgICAgICAgICBwYXJlbnRMYXllcjtcblxuICAgICAgbGF5ZXIgPSB0aGlzLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbbGF5ZXJVaWRdO1xuICAgICAgaWYgKGxheWVyLnBpZCAhPSB0aGlzLnN0YXJib2FyZC5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5tYXBJZCkge1xuICAgICAgICAvLyB0aGUgbGF5ZXIgaGFzIHBhcmVudHNcbiAgICAgICAgLy8gYnkgdGhpcyB3ZSBjYW4gYWNjZXNzIG9ubHkgdGhlIHNpbmdsZSBzcGFuIHdoZXJlIHRoZSBwYXJlbnQgZW50cnkgaXMgaW5cbiAgICAgICAgcGFyZW50TGF5ZXIgPSB0aGlzLnByb3h5LmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbbGF5ZXIucGlkXTtcbiAgICAgICAgaWYgKHBhcmVudExheWVyKSB7XG4gICAgICAgICAgcGFyZW50RW50cnkgPSBlbnRyeS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpWzBdO1xuICAgICAgICAgIGlmIChwYXJlbnRFbnRyeSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJveHkuYWN0aXZlTGF5ZXJJZHNbY2xpY2tlZExheWVyLmlkXSkge1xuICAgICAgICAgICAgICAkKHBhcmVudEVudHJ5KS5jc3MoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrQ2hpbGRTZWxlY3Rpb25zKCQocGFyZW50RW50cnkpLmRhdGEoJ3VpZCcpKSA+PSAxKSB7XG4gICAgICAgICAgICAgICAgJChwYXJlbnRFbnRyeSkuY3NzKCdmb250LXdlaWdodCcsICdib2xkJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChwYXJlbnRFbnRyeSkuY3NzKCdmb250LXdlaWdodCcsICdub3JtYWwnKTtcbiAgICAgICAgICAgICAgICAvLyQocGFyZW50RW50cnkpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5JTkFDVElWRSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlUGFyZW50TGF5ZXJzKHBhcmVudEVudHJ5LCBwYXJlbnRMYXllci5pZCwgcGFyZW50TGF5ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICB9KTsgLy8gZW5kIG9mIFwiYWRkIG1ldGhvZHNcIlxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBMYXllcnN3aXRjaGVyID0gdGhpcy5jNGcubWFwcy5jb250cm9sLnN0YXJib2FyZHBsdWdpbi5MYXllcnN3aXRjaGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC1zdGFyYm9hcmRwbHVnaW4tbGF5ZXJzd2l0Y2hlci5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuY29udHJvbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbCB8fCB7fTtcblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5cbihmdW5jdGlvbiAoJCwgYzRnKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogRGlzcGxheXMgdGhlIGN1cnJlbnQgem9vbWxldmVsIG9uIHRoZSBtYXAuXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyAge29sLmNvbnRyb2wuQ29udHJvbH1cbiAgICpcbiAgICogQHBhcmFtICAgIHtPYmplY3R9ICAgICAgICAgICAgICBvcHRfb3B0aW9ucyAgKm9wdGlvbmFsKiBjb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5jb250cm9sLlpvb21sZXZlbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICB2YXIgc2VsZixcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgdXBkYXRlWm9vbWxldmVsO1xuXG4gICAgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMubWFwVmlldykge1xuICAgICAgY29uc29sZS53YXJuKCdab29tbGV2ZWwgY29udHJvbCBuZWVkcyB0byBrbm93IHRoZSBtYXAuJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLlpPT01fTEVWRUwsXG4gICAgICB1bmRlZmluZWRIVE1MOiAnJ1xuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc05hbWU7XG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSBvcHRpb25zLm1hcFZpZXcuZ2V0Wm9vbSgpO1xuXG4gICAgdXBkYXRlWm9vbWxldmVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBwYXJzZUludChvcHRpb25zLm1hcFZpZXcuZ2V0Wm9vbSgpKTtcbiAgICB9O1xuXG4gICAgb3B0aW9ucy5tYXBWaWV3Lm9uKCdjaGFuZ2U6cmVzb2x1dGlvbicsIHVwZGF0ZVpvb21sZXZlbCk7XG4gICAgb2wuY29udHJvbC5Db250cm9sLmNhbGwodGhpcywge1xuICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIHRhcmdldDogb3B0aW9ucy50YXJnZXRcbiAgICB9KTtcbiAgfTtcbiAgb2wuaW5oZXJpdHMoYzRnLm1hcHMuY29udHJvbC5ab29tbGV2ZWwsIG9sLmNvbnRyb2wuQ29udHJvbCk7XG5cblxuICAvKlxuICAgKiBBZGQgbWV0aG9kc1xuICAgKi9cbiAgYzRnLm1hcHMuY29udHJvbC5ab29tbGV2ZWwucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuY29udHJvbC5ab29tbGV2ZWwucHJvdG90eXBlLCB7XG5cbiAgICAvLyBub3RoaW5nIHRvIGFkZCBoZXJlXG5cbiAgfSk7IC8vIGVuZCBvZiBcImFkZCBtZXRob2RzXCIgLS0tXG5cbn0oalF1ZXJ5LCB0aGlzLmM0ZykpO1xuXG5leHBvcnQgdmFyIFpvb21sZXZlbCA9IHRoaXMuYzRnLm1hcHMuY29udHJvbC5ab29tbGV2ZWw7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb250cm9sLXpvb21sZXZlbC5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMuaW50ZXJhY3Rpb24gPSB0aGlzLmM0Zy5tYXBzLmludGVyYWN0aW9uIHx8IHt9O1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGM0Zy5tYXBzLmludGVyYWN0aW9uLkdlb1BpY2tlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIG1hcERhdGEsXG4gICAgICAgIG1hcENvbnRhaW5lcixcbiAgICAgICAgbGF0LFxuICAgICAgICBsb24sXG4gICAgICAgIGxhdElkeCxcbiAgICAgICAgbG9uSWR4LFxuICAgICAgICBsYXRSbmQsXG4gICAgICAgIGxvblJuZDtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXBDb250YWluZXIgfHwgIXRoaXMub3B0aW9ucy5tYXBDb250YWluZXIuZGF0YSkge1xuICAgICAgY29uc29sZS53YXJuKCdUaGUgR2VvUGlja2VyIG5lZWRzIGEgXCJtYXBDb250YWluZXJcIiBpbiBvcmRlciB0byB3b3JrLicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG1hcERhdGEgPSB0aGlzLm9wdGlvbnMubWFwQ29udGFpbmVyLmRhdGE7XG4gICAgbWFwQ29udGFpbmVyID0gdGhpcy5vcHRpb25zLm1hcENvbnRhaW5lcjtcbiAgICAvLyBjb25maWd1cmF0ZSBnZW9waWNrZXJcbiAgICB0aGlzLiRmaWVsZEdlb1ggPSAkKG1hcERhdGEuZ2VvcGlja2VyLmlucHV0X2dlb194KTtcbiAgICB0aGlzLiRmaWVsZEdlb1kgPSAkKG1hcERhdGEuZ2VvcGlja2VyLmlucHV0X2dlb195KTtcblxuICAgIHRoaXMub3B0aWNMYXllclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHt9KTtcbiAgICB0aGlzLm9wdGljTGF5ZXJWZWN0b3IgPSBuZXcgb2wubGF5ZXIuVmVjdG9yKHtcbiAgICAgIHNvdXJjZTogdGhpcy5vcHRpY0xheWVyU291cmNlLFxuICAgICAgc3R5bGU6IHRoaXMuZ2VvUGlja2VyU3R5bGVGdW5jdGlvblxuICAgIH0pO1xuICAgIHRoaXMub3B0aWNMYXllckZlYXR1cmUgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMuJGZpZWxkR2VvWC52YWwoKSAmJiB0aGlzLiRmaWVsZEdlb1kudmFsKCkpIHtcbiAgICAgIGxhdCA9IHRoaXMuJGZpZWxkR2VvWS52YWwoKTtcbiAgICAgIGxvbiA9IHRoaXMuJGZpZWxkR2VvWC52YWwoKTtcblxuICAgICAgaWYgKG1hcERhdGEuZ2VvcGlja2VyLmFub255bW91cykge1xuICAgICAgICAgIHRoaXMuJGZpZWxkR2VvWS5yZW1vdmUoKTtcbiAgICAgICAgICB0aGlzLiRmaWVsZEdlb1gucmVtb3ZlKCk7XG5cbiAgICAgICAgICBsYXRJZHggPSBsYXQuaW5kZXhPZignLicpO1xuICAgICAgICAgIGxvbklkeCA9IGxvbi5pbmRleE9mKCcuJyk7XG4gICAgICAgICAgbGF0ID0gbGF0LnJlcGxhY2UoL1xcRC9nLCBcIlwiKTtcbiAgICAgICAgICBsb24gPSBsb24ucmVwbGFjZSgvXFxEL2csIFwiXCIpO1xuICAgICAgICAgIGxhdFJuZCA9IE1hdGgucm91bmQoKE1hdGgucmFuZG9tKCkgKiAoOTk5OTk5OTk5OTkgLSAxKSkgKyAxKTtcbiAgICAgICAgICBsb25SbmQgPSBNYXRoLnJvdW5kKChNYXRoLnJhbmRvbSgpICogKDk5OTk5OTk5OTk5IC0gMSkpICsgMSk7XG4gICAgICAgICAgaWYgKGxhdFJuZCA+IDQ5OTk5OTk5OTk5KSB7XG4gICAgICAgICAgICAgIGxhdCA9IHBhcnNlSW50KGxhdCkgLSBsYXRSbmQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGF0ID0gcGFyc2VJbnQobGF0KSArIGxhdFJuZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGxvblJuZCA8IDUwMDAwMDAwMDAwKSB7XG4gICAgICAgICAgICAgIGxvbiA9IHBhcnNlSW50KGxvbikgLSBsb25SbmQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbG9uID0gcGFyc2VJbnQobG9uKSArIGxvblJuZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGF0ID0gbGF0ICsgXCJcIjtcbiAgICAgICAgICBsb24gPSBsb24gKyBcIlwiO1xuICAgICAgICAgIGxhdCA9IGxhdC5zdWJzdHIoMCwgbGF0SWR4KSArICcuJyArIGxhdC5zdWJzdHIobGF0SWR4LCBsYXQubGVuZ3RoIC0gbGF0SWR4KTtcbiAgICAgICAgICBsb24gPSBsb24uc3Vic3RyKDAsIGxvbklkeCkgKyAnLicgKyBsb24uc3Vic3RyKGxvbklkeCwgbG9uLmxlbmd0aCAtIGxvbklkeCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub3B0aWNMYXllckZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgIGdlb21ldHJ5OiBuZXcgb2wuZ2VvbS5Qb2ludChvbC5wcm9qLmZyb21Mb25MYXQoW3BhcnNlRmxvYXQobG9uKSwgcGFyc2VGbG9hdChsYXQpXSkpLFxuICAgICAgICBwaWNrZXJDb2xvcjogWzAsIDE4MCwgMTAwLCAxXSxcbiAgICAgICAgYW5vbnltb3VzOiBtYXBEYXRhLmdlb3BpY2tlci5hbm9ueW1vdXNcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLm9wdGljTGF5ZXJTb3VyY2UuYWRkRmVhdHVyZSh0aGlzLm9wdGljTGF5ZXJGZWF0dXJlKTtcblxuICAgICAgbWFwQ29udGFpbmVyLm1hcC5nZXRWaWV3KCkuZml0KHRoaXMub3B0aWNMYXllclNvdXJjZS5nZXRFeHRlbnQoKSwgbWFwQ29udGFpbmVyLm1hcC5nZXRTaXplKCkpO1xuICAgICAgLy8gc2V0IHpvb20gc28gd2UgY2FuIHNlZSBzb21lIHRpbGVzIHdpdGhvdXQgZXJyb3JcbiAgICAgIG1hcENvbnRhaW5lci5tYXAuZ2V0VmlldygpLnNldFpvb20oMTUpO1xuICAgIH0gZWxzZSBpZiAobWFwRGF0YS5nZW9Mb2NhdGlvbiAmJiB0eXBlb2YgbWFwRGF0YS5nZW9Mb2NhdGlvbi5zZXRUcmFja2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbWFwRGF0YS5nZW9Mb2NhdGlvbi5zZXRUcmFja2luZyh0cnVlKTtcbiAgICB9XG4gICAgbWFwQ29udGFpbmVyLm1hcC5hZGRMYXllcih0aGlzLm9wdGljTGF5ZXJWZWN0b3IpO1xuXG4gICAgLy9UT0RPIHdlbm4gZ2VvcGlja2VyLmNsaWNrRGlzYWJsZWQgKG9kZXIgc28pIGdlc2V0enQgaXN0LCB0aGlzLm9wdGlvbnMuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbigpe31cblxuICAgIC8vIGluaGVyaXRhbmNlLXN0dWZmXG4gICAgb2wuaW50ZXJhY3Rpb24uSW50ZXJhY3Rpb24uY2FsbCh0aGlzLCB7XG4gICAgICBoYW5kbGVFdmVudDogdGhpcy5vcHRpb25zLmhhbmRsZUV2ZW50IHx8IHRoaXMuaGFuZGxlRXZlbnRcbiAgICAgIC8vIGhhbmRsZUV2ZW50OiB0aGlzLm9wdGlvbnMuaGFuZGxlRXZlbnQgfHwgYzRnLm1hcHMuaW50ZXJhY3Rpb24uR2VvUGlja2VyLmhhbmRsZUV2ZW50XG4gICAgfSk7XG4gIH07XG4gIG9sLmluaGVyaXRzKGM0Zy5tYXBzLmludGVyYWN0aW9uLkdlb1BpY2tlciwgb2wuaW50ZXJhY3Rpb24uSW50ZXJhY3Rpb24pO1xuXG5cbiAgLypcbiAgICogQWRkIG1ldGhvZHNcbiAgICovXG4gIGM0Zy5tYXBzLmludGVyYWN0aW9uLkdlb1BpY2tlci5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5pbnRlcmFjdGlvbi5HZW9QaWNrZXIucHJvdG90eXBlLCB7XG5cbiAgICBnZW9QaWNrZXJTdHlsZUZ1bmN0aW9uOiBmdW5jdGlvbiAoZmVhdHVyZSwgcHJvamVjdGlvbiwgZ2V0SWQpIHtcbiAgICAgIHZhciBjb2xvcixcbiAgICAgICAgICB3aGl0ZSxcbiAgICAgICAgICByZXN1bHQ7XG5cbiAgICAgIGlmIChnZXRJZCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIHdoaXRlID0gWzI1NSwgMjU1LCAyNTUsIDFdO1xuICAgICAgaWYgKGZlYXR1cmUgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nICYmIGZlYXR1cmUuZ2V0KCdwaWNrZXJDb2xvcicpKSB7XG4gICAgICAgIGNvbG9yID0gZmVhdHVyZS5nZXQoJ3BpY2tlckNvbG9yJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2xvciA9IFsyMDAsIDAsIDAsIDAuN107XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKGZlYXR1cmUgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nICYmICFmZWF0dXJlLmdldCgnYW5vbnltb3VzJykpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChcbiAgICAgICAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgICAgICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcbiAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgekluZGV4OiBJbmZpbml0eVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyMCxcbiAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0XG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgekluZGV4OiBJbmZpbml0eVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyMCxcbiAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgekluZGV4OiBJbmZpbml0eVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiA0MCxcbiAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0XG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgekluZGV4OiBJbmZpbml0eVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiA0MCxcbiAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgekluZGV4OiBJbmZpbml0eVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcbiAgICAgICAgICAgIHJhZGl1czogNjAsXG4gICAgICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgICBjb2xvcjogd2hpdGUsXG4gICAgICAgICAgICAgIHdpZHRoOiA0XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgfSkpO1xuXG4gICAgICByZXN1bHQucHVzaChcbiAgICAgICAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICAgICAgICByYWRpdXM6IDYwLFxuICAgICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB6SW5kZXg6IEluZmluaXR5XG4gICAgICAgIH0pKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgaGFuZGxlRXZlbnQ6IGZ1bmN0aW9uIChtYXBCcm93c2VyRXZlbnQpIHtcbiAgICAgIGlmIChtYXBCcm93c2VyRXZlbnQudHlwZSA9PT0gXCJzaW5nbGVjbGlja1wiKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVDbGlja0V2ZW50ICYmICF0aGlzLm9wdGlvbnMubWFwQ29udGFpbmVyLmRhdGEuZ2VvcGlja2VyLmRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuICF0aGlzLnBpY2sobWFwQnJvd3NlckV2ZW50LmNvb3JkaW5hdGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBwaWNrOiBmdW5jdGlvbiAoY29vcmRpbmF0ZSkge1xuICAgICAgdmFyIGFyckxhdExvbjtcblxuICAgICAgYXJyTGF0TG9uID0gb2wucHJvai50b0xvbkxhdChjb29yZGluYXRlKTtcblxuICAgICAgdGhpcy5vcHRpY0xheWVyRmVhdHVyZSA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICAgICAgZ2VvbWV0cnk6IG5ldyBvbC5nZW9tLlBvaW50KGNvb3JkaW5hdGUpXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5vcHRpY0xheWVyU291cmNlLmNsZWFyKCk7XG4gICAgICB0aGlzLm9wdGljTGF5ZXJTb3VyY2UuYWRkRmVhdHVyZSh0aGlzLm9wdGljTGF5ZXJGZWF0dXJlKTtcblxuICAgICAgdGhpcy4kZmllbGRHZW9YLnZhbChhcnJMYXRMb25bMF0pO1xuICAgICAgdGhpcy4kZmllbGRHZW9ZLnZhbChhcnJMYXRMb25bMV0pO1xuICAgICAgdGhpcy4kZmllbGRHZW9YLmNoYW5nZSgpO1xuICAgICAgdGhpcy4kZmllbGRHZW9ZLmNoYW5nZSgpO1xuXG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICB9KTsgLy8gZW5kIG9mIFwiYWRkIG1ldGhvZHNcIiAtLS1cblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCBsZXQgR2VvUGlja2VyID0gdGhpcy5jNGcubWFwcy5pbnRlcmFjdGlvbi5HZW9QaWNrZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1pbnRlcmFjdGlvbi1nZW9waWNrZXIuanMiLCJpbXBvcnQge01hcENvbnRyb2xsZXJ9IGZyb20gXCIuL2M0Zy1tYXBzXCJcblxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgd2luZG93LmluaXRNYXBzKG1hcERhdGEpO1xuICB9XG59KTtcblxud2luZG93LmluaXRNYXBzID0gZnVuY3Rpb24obWFwRGF0YSkge1xuICBsZXQgbWFwQ29udHJvbGxlciA9IG5ldyBNYXBDb250cm9sbGVyKG1hcERhdGEpO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLW1haW4uanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLm1pc2MgPSB0aGlzLmM0Zy5tYXBzLm1pc2MgfHwge307XG5cbmltcG9ydCB7VG9vbHRpcFBvcFVwfSBmcm9tIFwiLi9jNGctbWFwcy1taXNjLXRvb2x0aXBwb3B1cFwiO1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBAVE9ET1xuICAgKiBbTWFwSG92ZXIgZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9vcHRpb25zIENvbnRyb2wgb3B0aW9ucy5cbiAgICovXG4gIGM0Zy5tYXBzLm1pc2MuTWFwSG92ZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIC8vIG1hcENvbnRyb2xsZXI6IHVuZGVmaW5lZCxcbiAgICAgIGFjdGl2YXRlOiB0cnVlXG4gICAgfSwgdGhpcy5vcHRpb25zKTtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnNvbGUud2FybignTWFwSG92ZXIgbmVlZHMgYSBtYXBDb250cm9sbGVyJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gc2V0IG5lZWRlZCB2YXJzXG4gICAgdGhpcy5saXN0ZW5lcktleSA9IGZhbHNlO1xuICAgIHRoaXMubWFwID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwO1xuICAgIHRoaXMubGFzdEZlYXR1cmVTdHlsZSA9IG51bGw7XG4gICAgdGhpcy5sYXN0SG92ZXJlZEZlYXR1cmUgPSBudWxsO1xuXG4gICAgLy8gY3JlYXRlIHRvb2x0aXBcbiAgICB0aGlzLmhvdmVyVG9vbHRpcCA9IG5ldyBUb29sdGlwUG9wVXAoe1xuICAgICAgbWFwOiB0aGlzLm1hcCxcbiAgICAgIG9mZnNldDogWzEwLCAxMF0sXG4gICAgICBob3Jpem9udGFsOiB0cnVlLFxuICAgICAgY2xvc2VhYmxlOiBmYWxzZVxuICAgIH0pO1xuICAgIHRoaXMuaG92ZXJUb29sdGlwLmhpZGUoKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuYWN0aXZhdGUpIHtcbiAgICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQWRkIG1ldGhvZHMgdG8gTWFwSG92ZXJcbiAgYzRnLm1hcHMubWlzYy5NYXBIb3Zlci5wcm90b3R5cGUgPSAkLmV4dGVuZChjNGcubWFwcy5taXNjLk1hcEhvdmVyLnByb3RvdHlwZSwge1xuXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2FjdGl2YXRlIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyS2V5KSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJLZXkgPSB0aGlzLm1hcC5vbigncG9pbnRlcm1vdmUnLCB0aGlzLmdldEhvdmVyRnVuY3Rpb24oKSwgdGhpcyk7XG4gICAgICAgIC8vdGhpcy5tYXAub24oJ3BvaW50ZXJtb3ZlJywgdGhpcy5jaGFuZ2VGZWF0dXJlU3R5bGVzKCksIHRoaXMpO1xuICAgICAgfVxuICAgIH0sIC8vIGVuZCBvZiBcImFjdGl2YXRlKClcIlxuXG5cbiAgICAvKipcbiAgICAgKiBAVE9ETzogW2RlYWN0aXZhdGUgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGRlYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmxpc3RlbmVyS2V5KSB7XG4gICAgICAgIG9sLk9ic2VydmFibGUudW5CeUtleSh0aGlzLmxpc3RlbmVyS2V5KTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcktleSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sIC8vIGVuZCBvZiBcImRlYWN0aXZhdGUoKVwiXG5cblxuICAgIC8qKlxuICAgICAqIEBUT0RPOiBbaXNBY3RpdmUgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGlzQWN0aXZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5saXN0ZW5lcktleSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCAvLyBlbmQgb2YgXCJnZXRTdGF0ZSgpXCJcblxuXG4gICAgLyoqXG4gICAgICogQFRPRE86IFtnZXRIb3ZlckZ1bmN0aW9uIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBnZXRIb3ZlckZ1bmN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgIHZhciBob3ZlcmVkLFxuICAgICAgICAgICAgY2x1c3RlcmVkLFxuICAgICAgICAgICAgdG9vbHRpcENvbnRlbnQsXG4gICAgICAgICAgICB0b29sdGlwSGVscGVyLFxuICAgICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgICB0b29sdGlwTGVuZ3RoLFxuICAgICAgICAgICAgcmVzb2x1dGlvbixcbiAgICAgICAgICAgIGNhbnZhcyxcbiAgICAgICAgICAgIG1hcERhdGEgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLFxuICAgICAgICAgICAgcHJveHkgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eTtcblxuXG4gICAgICAgIGNsdXN0ZXJlZCA9IGZhbHNlO1xuICAgICAgICBob3ZlcmVkID0gc2VsZi5tYXAuZm9yRWFjaEZlYXR1cmVBdFBpeGVsKGV2ZW50LnBpeGVsLFxuICAgICAgICAgICAgZnVuY3Rpb24gKGZlYXR1cmUsIGxheWVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZTogZmVhdHVyZSxcbiAgICAgICAgICAgICAgICBsYXllcjogbGF5ZXJcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXNvbHV0aW9uID0gc2VsZi5tYXAuZ2V0VmlldygpLmdldFJlc29sdXRpb24oKTtcblxuICAgICAgICBpZiAoIWhvdmVyZWQpIHtcbiAgICAgICAgICBzZWxmLmhvdmVyVG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKTtcbiAgICAgICAgICAkKGNhbnZhcykuY3NzKCdjdXJzb3InLCAnZGVmYXVsdCcpO1xuICAgICAgICAgIGlmKG1hcERhdGEuaG92ZXJfcG9wdXBzID09PSAnMScgJiYgbWFwRGF0YS5ob3Zlcl9wb3B1cHNfc3RheSAhPSAnMScpe1xuICAgICAgICAgICAgICBjNGcubWFwcy5wb3B1cC4kcG9wdXAucmVtb3ZlQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkFDVElWRSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlICYmIHNlbGYubGFzdEZlYXR1cmVTdHlsZSkge1xuICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlLnNldFN0eWxlKHNlbGYubGFzdEZlYXR1cmVTdHlsZSk7XG4gICAgICAgICAgICAgc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKTtcbiAgICAgICAgJChjYW52YXMpLmNzcygnY3Vyc29yJywgJ3BvaW50ZXInKTtcblxuICAgICAgICBpZiAoaG92ZXJlZC5mZWF0dXJlICYmIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nICYmIGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykpIHtcbiAgICAgICAgICBpZiAoaG92ZXJlZC5mZWF0dXJlLmdldCgnZmVhdHVyZXMnKVsxXSkge1xuICAgICAgICAgICAgY2x1c3RlcmVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgaG92ZXJlZC5mZWF0dXJlID0gaG92ZXJlZC5mZWF0dXJlLmdldCgnZmVhdHVyZXMnKVswXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoaG92ZXJlZC5mZWF0dXJlLmdldEdlb21ldHJ5KCkgJiYgaG92ZXJlZC5mZWF0dXJlLmdldEdlb21ldHJ5KCkgaW5zdGFuY2VvZiBvbC5nZW9tLkxpbmVTdHJpbmcpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmKGhvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9sb2NhdGlvblwiKSB8fCAoc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUgJiYgc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUuZ2V0KFwiaG92ZXJfbG9jYXRpb25cIikpKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUgJiYgaG92ZXJlZC5mZWF0dXJlID09PSBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9zZXQgYmFjayBzdHlsZXMgd2hlbiB0aGUgZmVhdHVyZXMgYXJlIG5vdCBob3ZlcmVkIGFueW1vcmVcbiAgICAgICAgICAgIGlmIChzZWxmLmxhc3RGZWF0dXJlU3R5bGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhvdmVyZWQuZmVhdHVyZSAhPT0gc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmxhc3RGZWF0dXJlU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZS5zZXRTdHlsZShzZWxmLmxhc3RGZWF0dXJlU3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJDaGFuZ2VkIGJhY2sgZmVhdHVyZSBzdHlsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZi5sYXN0TGF5ZXJTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlLnNldFN0eWxlKHNlbGYubGFzdExheWVyU3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJDaGFuZ2VkIGJhY2sgbGF5ZXItZmVhdHVyZSBzdHlsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBpZiAoaG92ZXJlZC5mZWF0dXJlICYmIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbiAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbigpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUgPSBob3ZlcmVkLmZlYXR1cmU7XG5cbiAgICAgICAgICAgICAgICBzZWxmLmxhc3RMYXllclN0eWxlID0gaG92ZXJlZC5sYXllci5nZXRTdHlsZSgpO1xuICAgICAgICAgICAgICAgIHNlbGYubGFzdEZlYXR1cmVTdHlsZSA9IHNlbGYubGFzdExheWVyU3R5bGUoc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIC8vVE9ETyBnZXQgb25ob3ZlciBzdHlsZSBmcm9tIGRiICh2bGx0IHNjaG9uIGluIHByb3h5IGRyaW4/KVxuICAgICAgICAgICAgICAgIGlmKGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2hvdmVyX3N0eWxlJykgJiYgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKV0pe1xuICAgICAgICAgICAgICAgICAgICBpZihwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldChcImhvdmVyX3N0eWxlXCIpXS5mblN0eWxlRnVuY3Rpb24pe1xuICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJlZC5mZWF0dXJlLnNldFN0eWxlKEZ1bmN0aW9uKFwiZmVhdHVyZVwiLFwiZGF0YVwiLFwibWFwXCIscHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKV0uZm5TdHlsZUZ1bmN0aW9uKShob3ZlcmVkLmZlYXR1cmUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJlZC5mZWF0dXJlLnNldFN0eWxlKHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildLnN0eWxlKGhvdmVyZWQuZmVhdHVyZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChob3ZlcmVkLmxheWVyICYmIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24gJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGhvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbigpID09PSAnZnVuY3Rpb24nKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaG92ZXJlZC5mZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlID0gaG92ZXJlZC5mZWF0dXJlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUgPSBob3ZlcmVkLmxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKClbMF07XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlID0gc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWzBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNlbGYubGFzdExheWVyU3R5bGUgPSBob3ZlcmVkLmxheWVyLmdldFN0eWxlKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5sYXN0RmVhdHVyZVN0eWxlID0gc2VsZi5sYXN0TGF5ZXJTdHlsZShzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgaWYoaG92ZXJlZC5mZWF0dXJlLmdldCgnaG92ZXJfc3R5bGUnKSApe1xuICAgICAgICAgICAgICAgICAgICBpZighcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKV0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycklkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJySWRzLnB1c2goaG92ZXJlZC5mZWF0dXJlLmdldChcImhvdmVyX3N0eWxlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhhcnJJZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYocHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKV0uZm5TdHlsZUZ1bmN0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyZWQuZmVhdHVyZS5zZXRTdHlsZShGdW5jdGlvbihcImZlYXR1cmVcIixcImRhdGFcIixcIm1hcFwiLHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildLmZuU3R5bGVGdW5jdGlvbikoaG92ZXJlZC5mZWF0dXJlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyZWQuZmVhdHVyZS5zZXRTdHlsZShwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldChcImhvdmVyX3N0eWxlXCIpXS5zdHlsZShob3ZlcmVkLmZlYXR1cmUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhvdmVyZWQgJiYgaG92ZXJlZC5mZWF0dXJlICYmIGhvdmVyZWQuZmVhdHVyZS5nZXQoJ3N0eWxlVXJsJykpIHtcbiAgICAgICAgICAvL2lmIHRoaXMgcHJvcGVydHkgaXMgc2V0LCB3ZSBoYXZlIGEgZmVhdHVyZSB0aGF0IGhhcyBub25lIG9mIG91ciBzdHlsZXMgPT4gbm8gdG9vbHRpcFxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjYXRjaCB0aGUgY2FzZSB0aGUgbGF5ZXIgaXMgYSBiYXNlbGF5ZXIgKHZlY3RvciB0aWxlcylcbiAgICAgICAgaWYgKGhvdmVyZWQgJiYgaG92ZXJlZC5sYXllciAmJiBob3ZlcmVkLmxheWVyLnR5cGUgPT09IFwiVkVDVE9SX1RJTEVcIikge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldCBob3ZlciB0b29sdGlwc1xuICAgICAgICB0b29sdGlwQ29udGVudCA9IGZhbHNlO1xuICAgICAgICBpZiAoIWNsdXN0ZXJlZCAmJiBob3ZlcmVkLmZlYXR1cmUgJiYgdHlwZW9mIGhvdmVyZWQuZmVhdHVyZS5nZXQgPT09ICdmdW5jdGlvbicgJiYgKGhvdmVyZWQuZmVhdHVyZS5nZXQoJ3Rvb2x0aXAnKSB8fCBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdncmFwaGljVGl0bGUnKSkpIHtcbiAgICAgICAgICB0b29sdGlwQ29udGVudCA9IGhvdmVyZWQuZmVhdHVyZS5nZXQoJ3Rvb2x0aXAnKTtcbiAgICAgICAgICBpZiAoIXRvb2x0aXBDb250ZW50KSB7XG4gICAgICAgICAgICB0b29sdGlwQ29udGVudCA9IGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2dyYXBoaWNUaXRsZScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRvb2x0aXBDb250ZW50ID09PSAnb2JqZWN0JyAmJiB0b29sdGlwQ29udGVudC5lbGVtZW50ICYmIHRvb2x0aXBDb250ZW50LmVsZW1lbnQuY2hpbGROb2Rlc1sxXSkge1xuICAgICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSB0b29sdGlwQ29udGVudC5lbGVtZW50LmNoaWxkTm9kZXNbMV0uaW5uZXJIVE1MO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBAVE9ETzogQ2hlY2sgJiBmaXhcbiAgICAgICAgfSBlbHNlIGlmIChob3ZlcmVkLmZlYXR1cmUgJiYgdHlwZW9mIGhvdmVyZWQuZmVhdHVyZS5nZXRTdHlsZUZ1bmN0aW9uICYmXG4gICAgICAgICAgICB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbigpID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXMgJiZcbiAgICAgICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbigpKHJlc29sdXRpb24pXSAmJlxuICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXRTdHlsZUZ1bmN0aW9uKCkocmVzb2x1dGlvbildLnRvb2x0aXApIHtcbiAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbigpKHJlc29sdXRpb24pXS50b29sdGlwO1xuICAgICAgICAgIC8vIEBUT0RPOiBDaGVja1xuICAgICAgICB9IGVsc2UgaWYgKGhvdmVyZWQubGF5ZXIgJiYgdHlwZW9mIGhvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbiAmJlxuICAgICAgICAgICAgdHlwZW9mIGhvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgdHlwZW9mIGhvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbigpID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXMgJiZcbiAgICAgICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSgpXSAmJlxuICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbigpKCldLnRvb2x0aXApIHtcbiAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSgpXS50b29sdGlwO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdmVyZWQubGF5ZXIgJiZcbiAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzICYmXG4gICAgICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkobnVsbCwgbnVsbCwgMSldICYmXG4gICAgICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkobnVsbCwgbnVsbCwgMSldLnRvb2x0aXApIHtcbiAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKShudWxsLCBudWxsLCAxKV0udG9vbHRpcDtcbiAgICAgICAgfSBlbHNlIGlmIChob3ZlcmVkLmxheWVyICYmIGhvdmVyZWQubGF5ZXIudG9vbHRpcCkge1xuICAgICAgICAgIHRvb2x0aXBDb250ZW50ID0gaG92ZXJlZC5sYXllci50b29sdGlwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbHVzdGVyZWQgJiYgaG92ZXJlZC5mZWF0dXJlLmdldCgnZmVhdHVyZXMnKSl7XG4gICAgICAgICAgICBmZWF0dXJlcyA9IGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJyk7XG4gICAgICAgICAgICBpZihmZWF0dXJlc1swXS5nZXQoJ3Rvb2x0aXAnKSAmJiBmZWF0dXJlc1swXS5nZXQoJ3Rvb2x0aXBfbGVuZ3RoJykpe1xuICAgICAgICAgICAgICAgIHRvb2x0aXBDb250ZW50ID0gZmVhdHVyZXNbMF0uZ2V0KCd0b29sdGlwJyk7XG4gICAgICAgICAgICAgICAgdG9vbHRpcExlbmd0aCA9IHBhcnNlSW50KGZlYXR1cmVzWzBdLmdldCgndG9vbHRpcF9sZW5ndGgnKSk7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMTsgaTxmZWF0dXJlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGZlYXR1cmVzW2ldLmdldCgndG9vbHRpcCcpICYmIGZlYXR1cmVzW2ldLmdldCgndG9vbHRpcCcpICE9ICcnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBDb250ZW50ID0gdG9vbHRpcENvbnRlbnQgKyAnLCAnICsgZmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYodG9vbHRpcENvbnRlbnQubGVuZ3RoID4gdG9vbHRpcExlbmd0aCArIDMpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZih0b29sdGlwQ29udGVudCA9IHRvb2x0aXBDb250ZW50LnNsaWNlKDAsIHRvb2x0aXBMZW5ndGgpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBDb250ZW50ID0gdG9vbHRpcENvbnRlbnQgKyAnLi4uJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihob3ZlcmVkLmxheWVyLnRvb2x0aXAgJiYgaG92ZXJlZC5sYXllci50b29sdGlwX2xlbmd0aCl7XG4gICAgICAgICAgICAgICAgdG9vbHRpcEhlbHBlciA9IHRvb2x0aXBDb250ZW50O1xuICAgICAgICAgICAgICAgIHRvb2x0aXBDb250ZW50ID0gJyc7XG4gICAgICAgICAgICAgICAgdG9vbHRpcExlbmd0aCA9IHBhcnNlSW50KGhvdmVyZWQubGF5ZXIudG9vbHRpcF9sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGZvcihpID0gMDsgaTxmZWF0dXJlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaW5nbGVUb29sdGlwID0gdXRpbHMucmVwbGFjZUFsbFBsYWNlaG9sZGVycyh0b29sdGlwSGVscGVyLCBmZWF0dXJlc1tpXSwgaG92ZXJlZC5sYXllcik7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNpbmdsZVRvb2x0aXAgIT0gJycpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodG9vbHRpcENvbnRlbnQgPT0gJycpIHRvb2x0aXBDb250ZW50ID0gc2luZ2xlVG9vbHRpcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgdG9vbHRpcENvbnRlbnQgPSB0b29sdGlwQ29udGVudCArICcsICcgKyBzaW5nbGVUb29sdGlwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRvb2x0aXBDb250ZW50Lmxlbmd0aCA+IHRvb2x0aXBMZW5ndGggKzMpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZih0b29sdGlwQ29udGVudCA9IHRvb2x0aXBDb250ZW50LnNsaWNlKDAsIHRvb2x0aXBMZW5ndGgpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBDb250ZW50ID0gdG9vbHRpcENvbnRlbnQgKyAnLi4uJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodG9vbHRpcENvbnRlbnQpIHtcbiAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHV0aWxzLmRlY29kZUdlb0pzb25Qcm9wZXJ0eSh0b29sdGlwQ29udGVudCk7XG5cbiAgICAgICAgICAvLyByZXBsYWNlIHBsYWNlaG9sZGVycyBpZiBwb3NzaWJsZVxuICAgICAgICAgICAgaWYoaG92ZXJlZC5mZWF0dXJlLmdldCgnZmVhdHVyZXMnKSl7XG5cblxuICAgICAgICAgICAgfVxuICAgICAgICAgIHRvb2x0aXBDb250ZW50ID0gdXRpbHMucmVwbGFjZUFsbFBsYWNlaG9sZGVycyh0b29sdGlwQ29udGVudCwgaG92ZXJlZC5mZWF0dXJlLCBob3ZlcmVkLmxheWVyKTtcblxuXG4gICAgICAgICAgaWYgKHRvb2x0aXBDb250ZW50LnRyaW0oKSkge1xuICAgICAgICAgICAgLy8gcG9wdXAgY29uZmlnXG4gICAgICAgICAgICBzZWxmLmhvdmVyVG9vbHRpcC5zZXRQb3NpdGlvbihldmVudC5jb29yZGluYXRlKTtcbiAgICAgICAgICAgIHNlbGYuaG92ZXJUb29sdGlwLnNldENvbnRlbnQodG9vbHRpcENvbnRlbnQpO1xuICAgICAgICAgICAgc2VsZi5ob3ZlclRvb2x0aXAuc2hvdygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLmhvdmVyVG9vbHRpcC5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuaG92ZXJUb29sdGlwLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZihtYXBEYXRhLmhvdmVyX3BvcHVwcyA9PT0gJzEnICYmICFjbHVzdGVyZWQgJiYgaG92ZXJlZC5mZWF0dXJlICl7XG4gICAgICAgICAgdmFyIHBvcHVwSW5mb3MgPSB7fTtcblxuICAgICAgICAgIGlmKGhvdmVyZWQuZmVhdHVyZS5nZXQoJ3BvcHVwJykpIHtcbiAgICAgICAgICAgIHBvcHVwSW5mb3MgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdwb3B1cCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2xvY19saW5rdXJsJykpe1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYoaG92ZXJlZC5sYXllciAmJiBob3ZlcmVkLmxheWVyLnBvcHVwKXtcbiAgICAgICAgICAgIHBvcHVwSW5mb3MgPSBob3ZlcmVkLmxheWVyLnBvcHVwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY29vcmQgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgICAgIGlmKCFjb29yZCB8fChjb29yZCAmJiBjb29yZFswXSAmJiBjb29yZFswXS5sZW5ndGgpKXtcbiAgICAgICAgICAgICAgdmFyIGV4dGVudCA9IGhvdmVyZWQuZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldEV4dGVudCgpO1xuICAgICAgICAgICAgICBjb29yZCA9IHNlbGYubWFwLmdldENvb3JkaW5hdGVGcm9tUGl4ZWwoZXZlbnQucGl4ZWwpO1xuICAgICAgICAgICAgICBjb29yZCA9IFsoZXh0ZW50WzBdK2V4dGVudFsyXSkvMiwoZXh0ZW50WzFdK2V4dGVudFszXSkvMl07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgICBjNGcubWFwcy5wb3B1cC5wb3B1cC5zZXRQb3NpdGlvbihjb29yZCk7XG5cbiAgICAgICAgICAgIGlmIChwb3B1cEluZm9zLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICBjNGcubWFwcy5wb3B1cC4kY29udGVudC5odG1sKCcnKTtcbiAgICAgICAgICAgICAgICBjNGcubWFwcy5wb3B1cC4kcG9wdXAuYWRkQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkFDVElWRSkuYWRkQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkxPQURJTkcpO1xuICAgICAgICAgICAgICAgIGM0Zy5tYXBzLnBvcHVwLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvcHVwSW5mb3MuYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmpQb3B1cCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mb3M7XG4gICAgICAgICAgICAgICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBob3ZlcmVkLmZlYXR1cmU7XG4gICAgICAgICAgICAgICAgICAgIG9ialBvcHVwLmxheWVyID0gaG92ZXJlZC5sYXllcjtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgcG9wdXAgaG9vayBmb3IgcGx1Z2luIHNwZWNpZmljIHBvcHVwIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCwgb2JqUG9wdXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByb3h5LnNldFBvcHVwKG9ialBvcHVwLCBwcm94eSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcHJveHkuYXBpX2luZm93aW5kb3dfdXJsICsgJy8nICsgcG9wdXBJbmZvcy5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9wdXBJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogcG9wdXBJbmZvcy5hc3luYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cDogcG9wdXBJbmZvcy5wb3B1cCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGluZ19saW5rOiBwb3B1cEluZm9zLnJvdXRpbmdfbGlua1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gaG92ZXJlZC5mZWF0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialBvcHVwLmxheWVyID0gaG92ZXJlZC5sYXllcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwLCBvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJveHkuc2V0UG9wdXAob2JqUG9wdXAsIHByb3h5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjNGcubWFwcy5wb3B1cC4kcG9wdXAucmVtb3ZlQ2xhc3MoYzRnLm1hcHMuY29uc3RhbnQuY3NzLkFDVElWRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG5cblxuXG4gICAgICB9O1xuICAgIH0sIC8vIGVuZCBvZiBcImdldEhvdmVyRnVuY3Rpb24oKVwiXG5cbiAgICBjaGFuZ2VGZWF0dXJlU3R5bGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAvL1RPRE86IGNoYW5nZSBzdHlsZSBvZiBmZWF0dXJlcyB3aGljaCBhcmUgaG92ZXJlZCBhbmQgaGF2ZSB0aGUgb3B0aW9uIHRvIGNoYW5nZSBzdHlsZSBvbiBob3ZlciBlbmFibGVkXG4gICAgfVxuXG4gIH0pOyAvLyBFbmQgb2YgXCJhZGQgbWV0aG9kcyB0byBUb29sdGlwUG9wVXBcIlxuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciBNYXBIb3ZlciA9IHRoaXMuYzRnLm1hcHMubWlzYy5NYXBIb3ZlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLW1pc2MtbWFwaG92ZXIuanMiLCIvLyBcIm5hbWVzcGFjZVwiXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG50aGlzLmM0Zy5tYXBzLm1pc2MgPSB0aGlzLmM0Zy5tYXBzLm1pc2MgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIEBUT0RPXG4gICAqIFtTcGlubmVyIGRlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfb3B0aW9ucyBDb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5taXNjLlNwaW5uZXIgPSBmdW5jdGlvbiAob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBvcHRpb25zLFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIHNwaW5uZXJTcGFuO1xuXG4gICAgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIGNsYXNzTmFtZTogJycsXG4gICAgICB0YXJnZXQ6ICcuJyArIGNzc0NvbnN0YW50cy5PTF9WSUVXUE9SVFxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgaWYgKG9wdGlvbnMuY2xhc3NOYW1lKSB7XG4gICAgICBvcHRpb25zLmNsYXNzTmFtZSA9ICcgJyArIG9wdGlvbnMuY2xhc3NOYW1lO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuU1BJTk5FUiArIG9wdGlvbnMuY2xhc3NOYW1lICsgJyAnICsgY3NzQ29uc3RhbnRzLkhJREU7XG4gICAgJChvcHRpb25zLnRhcmdldCkuYXBwZW5kKHRoaXMuZWxlbWVudCk7XG5cbiAgICBzcGlubmVyU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBzcGlubmVyU3Bhbi5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuSUNPTiArICcgJyArIGNzc0NvbnN0YW50cy5BTklNQVRJT05fU1BJTjtcbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoc3Bpbm5lclNwYW4pO1xuXG4gICAgdGhpcy5hZGRpdGlvbmFsQWN0aXZhdGlvbkNvdW50ZXIgPSAwO1xuXG4gIH07XG5cbiAgLy8gQWRkIG1ldGhvZHMgdG8gc3Bpbm5lclxuICBjNGcubWFwcy5taXNjLlNwaW5uZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMubWlzYy5TcGlubmVyLnByb3RvdHlwZSwge1xuXG4gICAgLyoqXG4gICAgICogQFRPRE9cbiAgICAgKiBbc2hvdyBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgc2hvdzogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQodGhpcy5lbGVtZW50KS5oYXNDbGFzcyhjc3NDb25zdGFudHMuSElERSkpIHtcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5ISURFKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWRkaXRpb25hbEFjdGl2YXRpb25Db3VudGVyICs9IDE7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICogW2hpZGUgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgkKHRoaXMuZWxlbWVudCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkhJREUpKSB7XG4gICAgICAgIC8vY29uc29sZS53YXJuKCdTcGlubmVyIGlzIGFscmVhZHkgaGlkZGVuLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuYWRkaXRpb25hbEFjdGl2YXRpb25Db3VudGVyID09PSAwKSB7XG4gICAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5ISURFKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFkZGl0aW9uYWxBY3RpdmF0aW9uQ291bnRlciAtPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9LFxuXG4gIH0pOyAvLyBFbmQgb2YgXCJhZGQgbWV0aG9kcyB0byBzcGlubmVyXCJcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgU3Bpbm5lciA9IHRoaXMuYzRnLm1hcHMubWlzYy5TcGlubmVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtbWlzYy1zcGlubmVyLmpzIiwiLy8gXCJuYW1lc3BhY2VcIlxudGhpcy5jNGcgPSB0aGlzLmM0ZyB8fCB7fTtcbnRoaXMuYzRnLm1hcHMgPSB0aGlzLmM0Zy5tYXBzIHx8IHt9O1xudGhpcy5jNGcubWFwcy5taXNjID0gdGhpcy5jNGcubWFwcy5taXNjIHx8IHt9O1xuXG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcblxuKGZ1bmN0aW9uICgkLCBjNGcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBAVE9ET1xuICAgKiBbVG9vbHRpcFBvcFVwIGRlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfb3B0aW9ucyBDb250cm9sIG9wdGlvbnMuXG4gICAqL1xuICBjNGcubWFwcy5taXNjLlRvb2x0aXBQb3BVcCA9IGZ1bmN0aW9uIChvcHRfb3B0aW9ucykge1xuXG4gICAgdmFyIHNlbGYsXG4gICAgICAgIGFkZENsYXNzTmFtZSxcbiAgICAgICAgY2xvc2VCdXR0b247XG5cbiAgICBzZWxmID0gdGhpcztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRfb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgIC8vIGNsYXNzTmFtZTogJydcbiAgICAgIC8vIGNsb3NlRnVuY3Rpb246IG51bGxcbiAgICAgIC8vIG1hcDogbnVsbFxuICAgICAgaG9yaXpvbnRhbDogZmFsc2UsXG4gICAgICBjbG9zZWFibGU6IGZhbHNlLFxuICAgICAgb2Zmc2V0OiBbMSwgLTFdLFxuICAgICAgcG9zaXRpb246IFswLCAwXVxuICAgIH0sIHRoaXMub3B0aW9ucyk7XG5cbiAgICAvLyBwcmVwYXJlIGFkZGl0aW9uYWwgY2xhc3Nlc1xuICAgIGFkZENsYXNzTmFtZSA9ICcnO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xhc3NOYW1lKSB7XG4gICAgICBhZGRDbGFzc05hbWUgPSAnICcgKyB0aGlzLm9wdGlvbnMuY2xhc3NOYW1lO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmhvcml6b250YWwpIHtcbiAgICAgIGFkZENsYXNzTmFtZSArPSAnICcgKyBjc3NDb25zdGFudHMuSE9SSVpPTlRBTDtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZWFibGUpIHtcbiAgICAgIGFkZENsYXNzTmFtZSArPSAnICcgKyBjc3NDb25zdGFudHMuQ0xPU0VBQkxFO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuVE9PTFRJUF9QT1BVUCArIGFkZENsYXNzTmFtZTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VhYmxlKSB7XG4gICAgICBjbG9zZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgY2xvc2VCdXR0b24uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyAnICcgKyBjc3NDb25zdGFudHMuUE9QVVBfQ0xPU0U7XG4gICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b24pO1xuXG4gICAgICAkKGNsb3NlQnV0dG9uKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuY29udGVudENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRDb250YWluZXIpO1xuXG4gICAgdGhpcy5vdmVybGF5ID0gbmV3IG9sLk92ZXJsYXkoe1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgaW5zZXJ0Rmlyc3Q6IGZhbHNlLFxuICAgICAgb2Zmc2V0OiB0aGlzLm9wdGlvbnMub2Zmc2V0LFxuICAgICAgcG9zaXRpb25pbmc6ICdib3R0b20tbGVmdCdcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMubWFwKSB7XG4gICAgICB0aGlzLm9wdGlvbnMubWFwLmFkZE92ZXJsYXkodGhpcy5vdmVybGF5KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgICB0aGlzLm92ZXJsYXkuc2V0UG9zaXRpb24odGhpcy5vcHRpb25zLnBvc2l0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQWRkIG1ldGhvZHMgdG8gVG9vbHRpcFBvcFVwXG4gIGM0Zy5tYXBzLm1pc2MuVG9vbHRpcFBvcFVwLnByb3RvdHlwZSA9ICQuZXh0ZW5kKGM0Zy5tYXBzLm1pc2MuVG9vbHRpcFBvcFVwLnByb3RvdHlwZSwge1xuXG4gICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmNsb3NlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmNsb3NlRnVuY3Rpb24oKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXApIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLm1hcC5yZW1vdmVPdmVybGF5KHRoaXMub3ZlcmxheSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICogW3Nob3cgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgkKHRoaXMuZWxlbWVudCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkhJREUpKSB7XG4gICAgICAgICQodGhpcy5lbGVtZW50KS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSElERSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICogW2hpZGUgZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghJCh0aGlzLmVsZW1lbnQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5ISURFKSkge1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkhJREUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAVE9ET1xuICAgICAqIFtnZXRDb250ZW50IGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICovXG4gICAgZ2V0Q29udGVudDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGVudENvbnRhaW5lci5pbm5lckhUTUw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICogW2dldFBvc2l0aW9uIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICovXG4gICAgZ2V0UG9zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm92ZXJsYXkuZ2V0UG9zaXRpb24oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQFRPRE9cbiAgICAgKiBbc2V0Q29udGVudCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gIGNvbnRlbnQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBzZXRDb250ZW50OiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgdGhpcy5jb250ZW50Q29udGFpbmVyLmlubmVySFRNTCA9IGNvbnRlbnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBUT0RPXG4gICAgICogW3NldFBvc2l0aW9uIGRlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHBhcmFtICB7W3R5cGVdfSAgY29vcmRpbmF0ZXMgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBzZXRQb3NpdGlvbjogZnVuY3Rpb24gKGNvb3JkaW5hdGVzKSB7XG4gICAgICB0aGlzLm92ZXJsYXkuc2V0UG9zaXRpb24oY29vcmRpbmF0ZXMpO1xuICAgIH1cblxuICB9KTsgLy8gRW5kIG9mIFwiYWRkIG1ldGhvZHMgdG8gVG9vbHRpcFBvcFVwXCJcblxufShqUXVlcnksIHRoaXMuYzRnKSk7XG5cbmV4cG9ydCB2YXIgVG9vbHRpcFBvcFVwID0gdGhpcy5jNGcubWFwcy5taXNjLlRvb2x0aXBQb3BVcDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLW1pc2MtdG9vbHRpcHBvcHVwLmpzIiwiLypcbiAgSz9zdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnbiAyMDExIC0gMjAxOFxuIEBhdXRob3IgICAgIEs/c3RlbnNjaG1pZWRlIDxodHRwOi8vd3d3Lmt1ZXN0ZW5zY2htaWVkZS5kZT5cbiBAbGljZW5zZSAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbGdwbC0zLjAuaHRtbFxuKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmltKGIpe3JldHVybiBiLnJlcGxhY2UoL15cXHMrLyxcIlwiKS5yZXBsYWNlKC9cXHMrJC8sXCJcIil9XG5leHBvcnQgZnVuY3Rpb24gaXNNb2JpbGUoKXtyZXR1cm4vKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyAoY2V8cGhvbmUpfHhkYXx4aWlub3xhbmRyb2lkfGlwYWR8cGxheWJvb2t8c2lsay9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudHx8bmF2aWdhdG9yLnZlbmRvcnx8d2luZG93Lm9wZXJhKXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdCgobmF2aWdhdG9yLnVzZXJBZ2VudHx8bmF2aWdhdG9yLnZlbmRvcnx8XG4gICAgd2luZG93Lm9wZXJhKS5zdWJzdHIoMCw0KSl9ZnVuY3Rpb24gdHJhbnNsYXRlKGIpe3ZhciBhPXRyaW0oYik7cmV0dXJuXCJ5ZXNcIj09YXx8XCJZZXNcIj09YT9cIkphXCI6XCJub1wiPT1hP1wiTmVpblwiOlwiTm9cIj09YT9cIm5laW5cIjpcImxpbWl0ZWRcIj09YT9cIkVpbmdlc2NoclxcdTAwZTRua3RcIjpcImRlc2lnbmF0ZWRcIj09YT9cIkphXCI6XCJ3b29kXCI9PWE/XCJIb2x6XCI6XCJtZXRhbFwiPT1hP1wiTWV0YWxsXCI6XCJjb25jcmV0ZVwiPT1hP1wiQmV0b25cIjpcInBsYXN0aWNcIj09YT9cIlBsYXN0aWtcIjpcInN0b25lXCI9PWE/XCJTdGVpblwiOlwic3RlZWxcIj09YT9cIlN0YWhsXCI6XCJicmlja1wiPT1hP1wiWmllZ2VsXCI6XCJyZWluZm9yY2VkX2NvbmNyZXRlXCI9PWE/XCJTdGFobGJldG9uXCI6XCJtYXNvbnJ5XCI9PWE/XCJNYXVlcndlcmtcIjpifVxuZXhwb3J0IHZhciBmblN0YW5kYXJkSW5mb1BvcHVwPWZ1bmN0aW9uKGIsYSl7dmFyIGM9Yi5nZXRQcm9wZXJ0aWVzKCksZD1cIlwiLGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpe3ZhciBmPWEuY2FsbChiKVswXS5nZXRJbWFnZSgpO2lmKGYpdHJ5e2U9Zi5nZXRTcmMoKX1jYXRjaChnKXtlPVwiXCJ9fWVsc2V7Zj1hLmdldEltYWdlKCk7dHJ5e2U9Zi5nZXRTcmMoKX1jYXRjaChoKXtlPVwiXCJ9fWQrPWZuSGVhZGVyKGMsZSk7ZCs9Zm5Db250ZW50KGMpO2QrPWZuRm9vdGVyKGMsYi5nZXQoXCJvc21fdHlwZVwiKStcIi9cIitiLmdldElkKCkpO3JldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX3RleHRcIj4nK2QrXCI8L2Rpdj5cIn0sZm5SZWR1Y2VkSW5mb1BvcHVwPWZ1bmN0aW9uKGIsYSl7dmFyIGM9Yi5nZXRQcm9wZXJ0aWVzKCksZD1cIlwiLGU9ITEsZjtmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChiKVswXS5nZXRJbWFnZSgpLmdldFNyYygpOmEuZ2V0SW1hZ2UoKS5nZXRTcmMoKTtpZihcInJlc3RhdXJhbnRcIj09XG4gICAgYy5hbWVuaXR5fHxcInB1YlwiPT1jLmFtZW5pdHl8fFwiYmllcmdhcnRlblwiPT1jLmFtZW5pdHkpZT0hMDtcImhvdGVsXCI9PWMudG91cmlzbSYmKGU9ITApO1wiZ3Vlc3RfaG91c2VcIj09Yy50b3VyaXNtJiYoZT0hMCk7XCJjaGFsZXRcIj09Yy50b3VyaXNtJiYoZT0hMCk7XCJob3N0ZWxcIj09Yy50b3VyaXNtJiYoZT0hMCk7XCJhbHBpbmVfaHV0XCI9PWMudG91cmlzbSYmKGU9ITApO2lmKFwiYXJ0d29ya1wiPT1jLnRvdXJpc218fFwiYXJ0d29ya1wiPT1jLmFtZW5pdHkpZT0hMDtpZihcIm11c2V1bVwiPT1jLnRvdXJpc218fFwibXVzZXVtXCI9PWMuYW1lbml0eSllPSEwO1wiY2luZW1hXCI9PWMuYW1lbml0eSYmKGU9ITApO1widGhlYXRyZVwiPT1jLmFtZW5pdHkmJihlPSEwKTtpZihcImF0dHJhY3Rpb25cIj09Yy5hbWVuaXR5fHxcImZvdW50YWluXCI9PWMuYW1lbml0eXx8XCJtb251bWVudFwiPT1jLmhpc3RvcmljfHxcImNpdHlfZ2F0ZVwiPT1jLmhpc3RvcmljfHxcInJ1aW5zXCI9PWMuaGlzdG9yaWN8fFwiY2FzdGxlXCI9PWMuaGlzdG9yaWN8fFxuICAgIFwiYXR0cmFjdGlvblwiPT1jLnRvdXJpc20pZT0hMDtcInBsYXlncm91bmRcIj09Yy5sZWlzdXJlJiYoZT0hMCk7Yy5hZXJpYWx3YXkmJihlPSEwKTtpZihcInN3aW1taW5nX3Bvb2xcIj09Yy5hbWVuaXR5fHxcInN3aW1taW5nX3Bvb2xcIj09Yy5sZWlzdXJlfHxcInN3aW1taW5nXCI9PWMuc3BvcnQpZT0hMDtcInN0YXRpb25cIj09Yy5yYWlsd2F5JiYoZT0hMCk7XCJzd2ltbWluZ1wiPT1jLnNwb3J0JiYoZT0hMCk7XCJzd2ltbWluZ19wb29sXCI9PWMubGVpc3VyZSYmKGU9ITApO1wic3dpbW1pbmdfcG9vbFwiPT1jLmFtZW5pdHkmJihlPSEwKTtcIndhdGVycGFya1wiPT1jLmxlaXN1cmUmJihlPSEwKTtjLndhdGVyX3BhcmsmJihlPSEwKTtcInNwb3J0c19jZW50cmVcIj09Yy5sZWlzdXJlJiYoZT0hMCk7c3dpdGNoKGUpe2Nhc2UgITE6ZCs9Zm5IZWFkZXIoYyxmKTtkKz1mbkNvbnRlbnQoYyk7ZCs9Zm5Gb290ZXIoYyxiLmdldChcIm9zbV90eXBlXCIpK1wiL1wiK2IuZ2V0SWQoKSk7YnJlYWs7Y2FzZSAhMDpkKz1mbkhlYWRlcihjLFxuICAgIGYpfXJldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX3RleHRcIj4nK2QrXCI8L2Rpdj5cIn07XG5leHBvcnQgZnVuY3Rpb24gZm5IZWFkZXIoYixhKXt2YXIgYz1cIlwiLGQ9XCIzMnB4XCI7YSYmLTEhPWEuaW5kZXhPZihcImljb25fbWFwY2lsXCIpJiYoZD1cIjI1MHB4XCIsYT1hLnJlcGxhY2UoXCJpY29uX21hcGNpbFwiLFwibG9nb19tYXBjaWxcIikpO2lmKGIubmFtZXx8YltcInBpc3RlOm5hbWVcIl18fGJbXCJ4bWFzOm5hbWVcIl18fGJbXCJ4bWFzOmxvY2F0aW9uXCJdKXtpZihiLm5hbWUpdmFyIGU9Yi5uYW1lO2JbXCJwaXN0ZTpuYW1lXCJdJiYoZT1iW1wicGlzdGU6bmFtZVwiXSk7YltcInhtYXM6bmFtZVwiXSYmKGU9YltcInhtYXM6bmFtZVwiXSk7YltcInhtYXM6bG9jYXRpb25cIl0mJihlPWJbXCJ4bWFzOmxvY2F0aW9uXCJdKTtjKz1hPyc8aW1nIHNyYz1cIicrYSsnXCIgd2lkdGg9XCInK2QrJ1wiIG5hbWU9XCInK2UrJ1wiIGFsdD1cIicrZSsnXCI+PGRpdiBjbGFzcz1cImM0Z19wb3B1cF9oZWFkZXJfZmVhdHVyZW5hbWVcIj4nK2UrXCI8L2Rpdj5cIjonPG5hbWU9XCInK2UrJ1wiIGFsdD1cIicrZSsnXCI+PGRpdiBjbGFzcz1cImM0Z19wb3B1cF9oZWFkZXJfZmVhdHVyZW5hbWVcIj4nK1xuICAgIGUrXCI8L2Rpdj5cIn1lbHNlIGEmJihjKz0nPGltZyBzcmM9XCInK2ErJ1wiIHdpZHRoPVwiJytkKydcIiBuYW1lPVwiJythKydcIiBhbHQ9XCInK2ErJ1wiPicpO2MrPWZuR2V0VHJhbnNsYXRlX1R5cGUoYik7cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfaGVhZGVyXCI+JytjK1wiPC9kaXY+XCJ9XG5leHBvcnQgZnVuY3Rpb24gZm5Gb290ZXIoYixhKXt2YXIgYz1cIlwiLGQ9ITE7YltcImFkZHI6aG91c2VuYW1lXCJdJiYoYys9XCJHZWJcXHUwMGU0dWRlbmFtZTogXCIrYltcImFkZHI6aG91c2VuYW1lXCJdK1wiPGJyLz5cIixkPSEwKTtiW1wiYWRkcjpmbG9vclwiXT8oYys9XCJFdGFnZTogXCIrYltcImFkZHI6Zmxvb3JcIl0rXCI8YnIvPlwiLGQ9ITApOmJbXCJhZGRyOmxldmVsXCJdJiYoYys9XCJFdGFnZTogXCIrYltcImFkZHI6bGV2ZWxcIl0rXCI8YnIvPlwiLGQ9ITApO2JbXCJhZGRyOnN0cmVldFwiXSYmKGMrPWJbXCJhZGRyOnN0cmVldFwiXSxjPWJbXCJhZGRyOmhvdXNlbnVtYmVyXCJdP2MrKFwiIFwiK2JbXCJhZGRyOmhvdXNlbnVtYmVyXCJdK1wiPGJyLz5cIik6YytcIjxici8+XCIsZD0hMCk7YltcImFkZHI6cG9zdGNvZGVcIl0mJihjKz1iW1wiYWRkcjpwb3N0Y29kZVwiXStcIiBcIik7YltcImFkZHI6Y2l0eVwiXSYmKGMrPWJbXCJhZGRyOmNpdHlcIl0rXCI8YnIvPlwiLGQ9ITApO2lmKGIuc3FrbSlpZihiLnNxa209XCJcIitiLnNxa20sMzxiLnNxa20ubGVuZ3RoKXt2YXIgZT1cbiAgICBiLnNxa20ubGVuZ3RoJTMsZj0wPGU/Yi5zcWttLnN1YnN0cmluZygwLGUpOlwiXCI7Zm9yKGk9MDtpPE1hdGguZmxvb3IoYi5zcWttLmxlbmd0aC8zKTtpKyspZj0wPT1lJiYwPT1pP2YrYi5zcWttLnN1YnN0cmluZyhlKzMqaSxlKzMqaSszKTpmKyhcIi5cIitiLnNxa20uc3Vic3RyaW5nKGUrMyppLGUrMyppKzMpKTtjKz1cIkZsXFx1MDBlNGNoZTogXCIrZitcIiBLbVxcdTAwYjI8YnIvPlwifWVsc2UgYys9XCJGbFxcdTAwZTRjaGUgXCIrYi5zcWttK1wiPGJyLz5cIjtiW1wiY29udGFjdDpwaG9uZVwiXSYmKGM9aXNNb2JpbGUoKT9jKygnVGVsZWZvbjogPGEgaHJlZj1cInRlbDonK2JbXCJjb250YWN0OnBob25lXCJdKydcIj4nK2JbXCJjb250YWN0OnBob25lXCJdK1wiPC9hPjxici8+XCIpOmMrKCdUZWxlZm9uOiA8YSBocmVmPVwiY2FsbHRvOicrYltcImNvbnRhY3Q6cGhvbmVcIl0rJ1wiPicrYltcImNvbnRhY3Q6cGhvbmVcIl0rXCI8L2E+PGJyLz5cIiksZD0hMCk7Yi5waG9uZSYmKGM9aXNNb2JpbGUoKT9jKygnVGVsZWZvbjogPGEgaHJlZj1cInRlbDonK1xuICAgIGIucGhvbmUrJ1wiPicrYi5waG9uZStcIjwvYT48YnIvPlwiKTpjKygnVGVsZWZvbjogPGEgaHJlZj1cImNhbGx0bzonK2IucGhvbmUrJ1wiPicrYi5waG9uZStcIjwvYT48YnIvPlwiKSxkPSEwKTtiW1wiY29udGFjdDpmYXhcIl0/KGMrPVwiVGVsZWZheDogXCIrYltcImNvbnRhY3Q6ZmF4XCJdK1wiPGJyLz5cIixkPSEwKTpiLmZheCYmKGMrPVwiVGVsZWZheDogXCIrYi5mYXgrXCI8YnIvPlwiLGQ9ITApO2JbXCJjb250YWN0OmVtYWlsXCJdPyhjKz0nRS1NYWlsLUFkcmVzc2U6IDxhIGhyZWY9XCJtYWlsdG86JytiW1wiY29udGFjdDplbWFpbFwiXSsnXCI+JytiW1wiY29udGFjdDplbWFpbFwiXStcIjwvYT48YnIvPlwiLGQ9ITApOmIuZW1haWwmJihjKz0nRS1NYWlsLUFkcmVzc2U6IDxhIGhyZWY9XCJtYWlsdG86JytiLmVtYWlsKydcIj4nK2IuZW1haWwrXCI8L2E+PGJyLz5cIixkPSEwKTtkJiYoYys9XCI8YnIvPlwiKTtpZihiLm9wZW5pbmdfaG91cnMpe2Q9Yi5vcGVuaW5nX2hvdXJzO2ZvcihlPTA7MD09ZXx8MDxkLmluZGV4T2YoXCI7XCIpOylkPVxuICAgIGQucmVwbGFjZShcIlBIXCIsXCJGVFwiKSxkPWQucmVwbGFjZShcIlR1XCIsXCJEaVwiKSxkPWQucmVwbGFjZShcIldlXCIsXCJNaVwiKSxkPWQucmVwbGFjZShcIlRoXCIsXCJEb1wiKSxkPWQucmVwbGFjZShcIlN1XCIsXCJTb1wiKSxkPWQucmVwbGFjZShcIk1hclwiLFwiTVxcdTAwZTRyXCIpLGQ9ZC5yZXBsYWNlKFwiTWF5XCIsXCJNYWlcIiksZD1kLnJlcGxhY2UoXCJPY3RcIixcIk9rdFwiKSxkPWQucmVwbGFjZShcIkRlY1wiLFwiRGV6XCIpLGQ9ZC5yZXBsYWNlKCdcIlBsZWFzZSBtYWtlIGEgcmVzZXJ2YXRpb25cIicsJ1wiQml0dGUgdmVyZWluYmFyZW4gU2llIGVpbmVuIFRlcm1pblwiJyksZD1kLnJlcGxhY2UoXCJvZmZcIixcImF1c2dlbm9tbWVuXCIpLDA8ZSYmKGQ9ZC5yZXBsYWNlKFwiO1wiLFwiPGJyLz5cIikpLGUrKztjKz0nXFx1MDBkNmZmbnVuZ3N6ZWl0ZW46IDxici8+PGRpdiBjbGFzcz1cImM0Z19vcGVuX3RleHRcIj4nK2QrXCI8L2Rpdj5cIjtjPTA8ZC5pbmRleE9mKFwiRlRcIik/YytcIihGVCA9IEZlaWVydGFnKTxici8+XCI6YytcIjxici8+XCJ9aWYoYltcInhtYXM6b3BlbmluZ19ob3Vyc1wiXSl7ZD1cbiAgICBiW1wieG1hczpvcGVuaW5nX2hvdXJzXCJdO2ZvcihlPTA7MD09ZXx8MDxkLmluZGV4T2YoXCI7XCIpOylkPWQucmVwbGFjZShcIlBIXCIsXCJGVFwiKSxkPWQucmVwbGFjZShcIlR1XCIsXCJEaVwiKSxkPWQucmVwbGFjZShcIldlXCIsXCJNaVwiKSxkPWQucmVwbGFjZShcIlRoXCIsXCJEb1wiKSxkPWQucmVwbGFjZShcIlN1XCIsXCJTb1wiKSxkPWQucmVwbGFjZShcIk1hclwiLFwiTVxcdTAwZTRyXCIpLGQ9ZC5yZXBsYWNlKFwiTWF5XCIsXCJNYWlcIiksZD1kLnJlcGxhY2UoXCJPY3RcIixcIk9rdFwiKSxkPWQucmVwbGFjZShcIkRlY1wiLFwiRGV6XCIpLDA8ZSYmKGQ9ZC5yZXBsYWNlKFwiO1wiLFwiPGJyLz5cIikpLGUrKztjKz0nXFx1MDBkNmZmbnVuZ3N6ZWl0ZW46IDxici8+PGRpdiBjbGFzcz1cImM0Z19vcGVuX3RleHRcIj4nK2QrXCI8L2Rpdj5cIjtjPTA8ZC5pbmRleE9mKFwiRlRcIik/YytcIihGVCA9IEZlaWVydGFnKTxici8+XCI6YytcIjxici8+XCJ9YltcInhtYXM6dXJsXCJdJiYoZD1cIlwiLGQ9YltcInhtYXM6dXJsXCJdLHRyaW0oZCksLTE9PWQuaW5kZXhPZihcImh0dHBzOi8vXCIsXG4gICAgMCkmJi0xPT1kLmluZGV4T2YoXCJodHRwOi8vXCIsMCkmJihkPVwiaHR0cDovL1wiK2QpLGMrPSdXZWJzaXRlOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rIHp1ciBXZWJzaXRlPC9hPjxici8+Jyk7YltcImNvbnRhY3Q6d2Vic2l0ZVwiXT8oZD1iW1wiY29udGFjdDp3ZWJzaXRlXCJdLHRyaW0oZCksLTE9PWQuaW5kZXhPZihcImh0dHBzOi8vXCIsMCkmJi0xPT1kLmluZGV4T2YoXCJodHRwOi8vXCIsMCkmJihkPVwiaHR0cDovL1wiK2QpLGMrPSdXZWJzaXRlOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rIHp1ciBXZWJzaXRlPC9hPjxici8+Jyk6Yi53ZWJzaXRlJiYoZD1iLndlYnNpdGUsdHJpbShkKSwtMT09ZC5pbmRleE9mKFwiaHR0cHM6Ly9cIiwwKSYmLTE9PWQuaW5kZXhPZihcImh0dHA6Ly9cIiwwKSYmKGQ9XCJodHRwOi8vXCIrZCksYys9J1dlYnNpdGU6IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPkxpbmsgenVyIFdlYnNpdGU8L2E+PGJyLz4nKTtiLndpa2lwZWRpYSYmXG4oZD1iLndpa2lwZWRpYSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHBzOi8vd2lraXBlZGlhLm9yZy93aWtpL1wiK2QpLGMrPSdXaWtpcGVkaWE6IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPkxpbmsgenUgV2lraXBlZGlhPC9hPjxici8+Jyk7Yi53aWtpbWVkaWFfY29tbW9ucyYmKGQ9Yi53aWtpbWVkaWFfY29tbW9ucyx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHBzOi8vY29tbW9ucy53aWtpbWVkaWEub3JnL3dpa2kvXCIrZCksYys9J1dpa2ltZWRpYTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+TGluayB6dSBXaWtpbWVkaWE8L2E+PGJyLz4nKTtiW1wiY29udGFjdDp3ZWJjYW1cIl0mJihkPWJbXCJjb250YWN0OndlYmNhbVwiXSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiZcbi0xPT1kLmluZGV4T2YoXCJodHRwOi8vXCIsMCkmJihkPVwiaHR0cDovL1wiK2QpLGMrPSdXZWJjYW06IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPkxpbmsgenVyIFdlYmNhbTwvYT48YnIvPicpO2IuaW1hZ2UmJihjKz0nPGltZyBzcmM9XCInK2IuaW1hZ2UrJ1wiIHdpZHRoPVwiMjAwcHhcIiBuYW1lPVwiJytiLm5hbWUrJ1wiIGFsdD1cIicrYi5uYW1lKydcIj48YnIvPicpO2Q9XCJcIjtiLmludGVybmV0X2FjY2VzcyYmKGQrPVwiSW50ZXJuZXR6dWdyaWZmOiBcIit0cmFuc2xhdGUoYi5pbnRlcm5ldF9hY2Nlc3MpK1wiPGJyLz5cIik7YltcImludGVybmV0X2FjY2VzczpmZWVcIl0mJihkKz1cIkludGVybmV0IEdlYlxcdTAwZmNocjogXCIrdHJhbnNsYXRlKGJbXCJpbnRlcm5ldF9hY2Nlc3M6ZmVlXCJdKStcIjxici8+XCIpO2JbXCJ3aWZpX2FjY2VzczpvcGVyYXRvclwiXSYmKGQrPVwid2lmaSBCZXRyZWliZXI6IFwiK2JbXCJ3aWZpX2FjY2VzczpvcGVyYXRvclwiXStcIjxici8+XCIpO2JbXCJ3aWZpX2FjY2Vzczp0ZWNobm9sb2d5XCJdJiZcbihkKz1cIndpZmkgVGVjaG5vbG9naWU6IFwiK2JbXCJ3aWZpX2FjY2Vzczp0ZWNobm9sb2d5XCJdK1wiPGJyLz5cIik7YltcIndpZmlfYWNjZXNzOnNzaWRcIl0mJihkKz1cIndpZmkgc3NpZDogXCIrYltcIndpZmlfYWNjZXNzOnNzaWRcIl0rXCI8YnIvPlwiKTtcIlwiIT1kJiYoYys9J0ludGVybmV0enVnYW5nIHZvcmhhbmRlbjxici8+PGRpdiBjbGFzcz1cImM0Z19zaG9wX2ludGVybmV0X2FjY2Vzc1wiPicrZCtcIjwvZGl2Pjxici8+XCIpO2Iud2hlZWxjaGFpciYmKGMrPVwicm9sbHN0dWhsZ2VlaWduZXQ6IFwiK3RyYW5zbGF0ZShiLndoZWVsY2hhaXIpK1wiPGJyLz5cIik7YltcIndoZWVsY2hhaXI6ZGVzY3JpcHRpb25cIl0mJihjKz1cIkJlc2NocmVpYnVuZzogXCIrYltcIndoZWVsY2hhaXI6ZGVzY3JpcHRpb25cIl0rXCI8YnIvPlwiKTtiW1wid2hlZWxjaGFpcjplbnRyYW5jZV93aWR0aFwiXSYmKGMrPVwiQnJlaXRlIGRlcyBFaW5nYW5ncyBpbiBDTTogXCIrYltcIndoZWVsY2hhaXI6ZW50cmFuY2Vfd2lkdGhcIl0rXCI8YnIvPlwiKTtiW1wid2hlZWxjaGFpcjpzdGVwX2hlaWdodFwiXSYmXG4oYys9XCJIXFx1MDBmNmhlIGRlciBTdHVmZSBhbSBFaW5nYW5nIGluIENNOiBcIitiW1wid2hlZWxjaGFpcjpzdGVwX2hlaWdodFwiXStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOnJvb21zXCJdJiYoYys9XCJBbnphaGwgcm9sbHN0dWhsZ2VyZWNodGVyIFJcXHUwMGU0dW1lOiBcIitiW1wid2hlZWxjaGFpcjpyb29tc1wiXStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOnBsYWNlc1wiXSYmKGMrPVwiQW56YWhsIGRlciBSb2xsc3R1aGxwbFxcdTAwZTR0emU6IFwiK2JbXCJ3aGVlbGNoYWlyOnBsYWNlc1wiXStcIjxici8+XCIpO2JbXCJjZW50OnBsYWNlc1wiXSYmKGMrPVwiQW56YWhsIGRlciBSb2xsc3R1aGxwbFxcdTAwZTR0emU6IFwiK2JbXCJ3aGVlbGNoYWlyOnBsYWNlc1wiXStcIjxici8+XCIpO2JbXCJyYW1wOndoZWVsY2hhaXJcIl0mJihjKz1cIlJhbXBlIGZcXHUwMGZjciBSb2xsc3R1aGxmYWhyZXI6IFwiK2JbXCJyYW1wOndoZWVsY2hhaXJcIl0rXCI8YnIvPlwiKTtiW1wiY2FwYWNpdHk6ZGlzYWJsZWRcIl0mJihjKz1cIkJlaGluZGVydGVucGFya3BsXFx1MDBlNHR6ZTogXCIrXG4gICAgdHJhbnNsYXRlKGJbXCJjYXBhY2l0eTpkaXNhYmxlZFwiXSkrXCI8YnIvPlwiKTtiW1widG9pbGV0czp3aGVlbGNoYWlyXCJdJiYoYys9XCJCZWhpbmRlcmRlbmdlcmVjaHRlIFRvaWxldHRlOiBcIit0cmFuc2xhdGUoYltcInRvaWxldHM6d2hlZWxjaGFpclwiXSkrXCI8YnIvPlwiKTtiLmNlbnRyYWxrZXkmJihjKz1cIlplbnRyYWxzY2hsXFx1MDBmY3NzZWw6IFwiK2IuY2VudHJhbGtleStcIjxici8+XCIpO2Iubm90ZSYmKGMrPWIubm90ZStcIjxici8+XCIpO2IuZGVzY3JpcHRpb24mJihjKz1iLmRlc2NyaXB0aW9uK1wiPGJyLz5cIik7Yi5vcGVyYXRvciYmKGMrPVwiQmV0cmVpYmVyOiBcIitiLm9wZXJhdG9yK1wiPGJyLz5cIik7Yi5yZWYmJihjKz1cIlJlZmVyZW56OiBcIitiLnJlZitcIjxici8+XCIpO1wieWVzXCI9PWIubGl0JiYoYys9XCJEaWVzZXMgT2JqZWt0IGlzdCBiZWxldWNodGV0Ljxici8+XCIpO2Iuc2hvcCYmKGQ9XCJcIixiLmJyYW5kJiYoZCs9XCJNYXJrZW56ZWljaGVuOiBcIitiLmJyYW5kK1wiPGJyLz5cIiksYi5zZWxscyYmXG4oZCs9XCJWZXJrYXVmczogXCIrYi5zZWxscytcIjxici8+XCIpLGIub3JpZ2luJiYoZCs9XCJIZXJrdW5mdHNsXFx1MDBlNG5kZXI6IFwiK2Iub3JpZ2luK1wiPGJyLz5cIiksXCJ5ZXNcIj09Yi53aG9sZXNhbGUmJihkKz1cIkdyb1xcdTAwZGZoXFx1MDBlNG5kbGVyOiBKYTxici8+XCIpLFwiXCIhPWQmJihjKz0nV2VpdGVyZSBBbmdhYmVuIHp1bSBTaG9wOiA8YnIvPjxkaXYgY2xhc3M9XCJjNGdfc2hvcF90ZXh0XCI+JytkK1wiPC9kaXY+PGJyLz5cIikpO2EmJihkPWEsdHJpbShkKSxkPWQucmVwbGFjZSgvXFwuLyxcIi9cIiksYz1jK1wiPGJyLz5cIisoJ09TTTogICAgPGEgaHJlZj1cImh0dHA6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rIHp1ciBPcGVuU3RyZWV0TWFwPC9hPjxici8+JykpO3JldHVybiBjPSc8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2Zvb3RlclwiPicrYytcIjwvZGl2PlwifVxuZXhwb3J0IGZ1bmN0aW9uIGZuR2V0VHJhbnNsYXRlX1R5cGUoYil7dmFyIGE9XCJcIjtpZihcImRvY3RvcnNcIj09Yi5hbWVuaXR5fHxcImRvY3RvclwiPT1iLmhlYWx0aGNhcmUpYSs9XCJBcnp0PGJyLz5cIjtpZihcImhvc3BpdGFsXCI9PWIuYW1lbml0eXx8XCJjbGluaWNcIj09Yi5hbWVuaXR5fHxcImhvc3BpdGFsXCI9PWIuaGVhbHRoY2FyZXx8XCJjbGluaWNcIj09Yi5oZWFsdGhjYXJlKWE9XCJ5ZXNcIj09Yi5lbWVyZ2VuY3k/YStcIktyYW5rZW5oYXVzIG1pdCBOb3RhdWZuYWhtZTxici8+XCI6YStcIktyYW5rZW5oYXVzPGJyLz5cIjtcImRlbnRpc3RcIj09Yi5hbWVuaXR5JiYoYSs9XCJaYWhuYXJ6dDxici8+XCIpO2lmKFwicGhhcm1hY3lcIj09Yi5hbWVuaXR5fHxcInBoYXJtYWN5XCI9PWJbXCJoZWFsdGhfZmFjaWxpdHk6dHlwZVwiXSlhKz1cIkFwb3RoZWtlPGJyLz5cIjtpZihcInBoeXNpb3RoZXJhcGlzdFwiPT1iLmhlYWx0aGNhcmV8fFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbGl0eTpwaHlzaW90aGVyYXB5XCJdKWErPVwiUGh5c2lvdGhlcmFwZXV0PGJyLz5cIjtcbiAgICBpZihcIm9jY3VwYXRpb25hbF90aGVyYXBpc3RcIj09Yi5oZWFsdGhjYXJlfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6b2NjdXBhdGlvbmFsX3RoZXJhcHlcIl18fFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om9jY3VwYXRpb25hbF90aGVyYXB5XCJdKWErPVwiRXJnb3RoZXJhcGV1dDxici8+XCI7aWYoXCJwc3ljaG90aGVyYXBpc3RcIj09Yi5oZWFsdGhjYXJlfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6cHN5Y2hvdGhlcmFweVwiXSlhKz1cIlBzeWNob3RoZXJhcGV1dDxici8+XCI7XCJhbHRlcm5hdGl2ZVwiPT1iLmhlYWx0aGNhcmUmJihhKz1cIkFsdGVybmF0aXYtIHVuZCBLb21wbGVtZW50XFx1MDBlNHJtZWRpemluZXI8YnIvPlwiKTtcIm1pZHdpZmVcIj09Yi5oZWFsdGhjYXJlJiYoYSs9XCJIZWJhbW1lPGJyLz5cIik7aWYoXCJzcGVlY2hfdGhlcmFwaXN0XCI9PWIuaGVhbHRoY2FyZXx8XCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsaXR5OnNwZWVjaF90aGVyYXB5XCJdKWErPVwiTG9nb3BcXHUwMGU0ZGU8YnIvPlwiO1xuICAgIFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbGl0eTptdXNpY190aGVyYXB5XCJdJiYoYSs9XCJNdXNpa3RoZXJhcGV1dDxici8+XCIpO1widmV0ZXJpbmFyeVwiPT1iLmFtZW5pdHkmJihhKz1cIlRpZXJhcnp0PGJyLz5cIik7XCJmaXJlX3N0YXRpb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJGZXVlcndlaHJoYXVzPGJyLz5cIik7XCJmaXJlX2V4dGluZ3Vpc2hlclwiPT1iLmVtZXJnZW5jeSYmKGErPVwiRmV1ZXJsXFx1MDBmNnNjaGVyPGJyLz5cIik7XCJhZWRcIj09Yi5lbWVyZ2VuY3kmJihhKz1cIk1vYmlsZXIgRGVmaWJyaWxhdG9yPGJyLz5cIik7XCJkZWZpYnJpbGxhdG9yXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJNb2JpbGVyIERlZmlicmlsYXRvcjxici8+XCIpO1wicGhvbmVcIj09Yi5lbWVyZ2VuY3kmJihhKz1cIk5vdHJ1ZnNcXHUwMGU0dWxlPGJyLz5cIik7XCJwb2xpY2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJQb2xpemVpd2FjaGU8YnIvPlwiKTtcImFtYnVsYW5jZV9zdGF0aW9uXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJSZXR0dW5nc3dhY2hlPGJyLz5cIik7XG4gICAgXCJ0ZWNobmljYWxcIj09Yi5lbWVyZ2VuY3lfc2VydmljZSYmKGErPVwiVGVjaG5pc2NoZXMgSGlsZnN3ZXJrPGJyLz5cIik7XCJ3YXRlclwiPT1iLmVtZXJnZW5jeV9zZXJ2aWNlJiYoYSs9XCJXYXNzZXJyZXR0dW5nc3N0YXRpb248YnIvPlwiKTtcImJheXdhdGNoXCI9PWIud2F0ZXJ3YXkmJihhKz1cIldhc3NlcndhY2h0PGJyLz5cIik7XCJhaXJcIj09Yi5lbWVyZ2VuY3lfc2VydmljZSYmKGErPVwiUmV0dHVuZ3NodWJzY2hyYXViZXI8YnIvPlwiKTtcImVtZXJnZW5jeV9hY2Nlc3NfcG9pbnRcIj09Yi5oaWdod2F5JiYoYSs9XCJOb3RmYWxscHVua3Q8YnIvPlwiKTtpZihcImxpZmVib2F0X3N0YXRpb25cIj09Yi5hbWVuaXR5fHxcImxpZmVib2F0X3N0YXRpb25cIj09Yi5lbWVyZ2VuY3kpYSs9XCJSZXR0dW5nc2Jvb3RzdGF0aW9uPGJyLz5cIjtcImxpZmVfcmluZ1wiPT1iLmVtZXJnZW5jeSYmKGErPVwiUmV0dHVuZ3NyaW5nPGJyLz5cIik7XCJzaXJlblwiPT1iLmVtZXJnZW5jeSYmKGErPVwiU2lyZW5lPGJyLz5cIik7XCJsaWZlX3JpbmdcIj09XG4gICAgYi5hbWVuaXR5JiYoYSs9XCJSZXR0dW5nc3Jpbmc8YnIvPlwiKTtcInJlc2N1ZV9zdGF0aW9uXCI9PWIuYW1lbml0eSYmKGErPVwiUmV0dHVuZ3NzdGF0aW9uPGJyLz5cIik7XCJmaXJlX2h5ZHJhbnRcIj09Yi5lbWVyZ2VuY3kmJihcInVuZGVyZ3JvdW5kXCI9PWJbXCJmaXJlX2h5ZHJhbnQ6dHlwZVwiXT9hKz1cIlVudGVyZmx1cmh5ZHJhbnQ8YnIvPlwiOlwicGlsbGFyXCI9PWJbXCJmaXJlX2h5ZHJhbnQ6dHlwZVwiXT9hKz1cIlxcdTAwZGNiZXJmbHVyaHlkcmFudDxici8+XCI6XCJ3YWxsXCI9PWJbXCJmaXJlX2h5ZHJhbnQ6dHlwZVwiXT9hKz1cIldhbmRoeWRyYW50PGJyLz5cIjpcInBvbmRcIj09YltcImZpcmVfaHlkcmFudDp0eXBlXCJdJiYoYSs9XCJTYXVnc3RlbGxlPGJyLz5cIikpO1wic3VjdGlvbl9wb2ludFwiPT1iLmVtZXJnZW5jeSYmKGErPVwiU2F1Z3N0ZWxsZTxici8+XCIpO1wiZmlyZV93YXRlcl9wb25kXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJMXFx1MDBmNnNjaHRlaWNoPGJyLz5cIik7XCJtb3VudGFpblwiPT1iLmVtZXJnZW5jeV9zZXJ2aWNlJiZcbiAgICAoYSs9XCJCZXJncmV0dHVuZ3NzdGF0aW9uPGJyLz5cIik7XCJ3YXRlcl90YW5rXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJMXFx1MDBmNnNjaHdhc3NlcnRhbms8YnIvPlwiKTtcImNvbnRhaW5lclwiPT1iLnJlY3ljbGluZ190eXBlJiYoYSs9XCJSZWN5Y2xpbmcgQ29udGFpbmVyPGJyLz5cIik7XCJyZWN5Y2xpbmdcIj09Yi5hbWVuaXR5JiZcInllc1wiPT1iW1wicmVjeWNsaW5nOmV4Y3JlbWVudFwiXXx8XCJwdW1wLW91dFwiPT1iW1wic2VhbWFyazpzbWFsbF9jcmFmdF9mYWNpbGl0eTpjYXRlZ29yeVwiXT9hKz1cIkFic2F1Z3N0YXRpb248YnIvPlwiOlwicmVjeWNsaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiV2VydHN0b2ZmaG9mPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6cGVzY2V0YXJpYW5cIl0/YSs9XCJwZXNjZXRhcmlzY2hlIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnBlc2NldGFyaWFuXCJdJiYoYSs9XCJudXIgcGVzY2V0YXJpc2NoZSBHZXJpY2h0ZTxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OnZlZ2V0YXJpYW5cIl0/XG4gICAgICAgIGErPVwidmVnZXRhcmlzY2hlIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnZlZ2V0YXJpYW5cIl0mJihhKz1cIm51ciB2ZWdldGFyaXNjaGUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpsYWN0b192ZWdldGFyaWFuXCJdP2ErPVwibGFjdG8tdmVnZXRhcmlzY2hlIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmxhY3RvX3ZlZ2V0YXJpYW5cIl0mJihhKz1cIm51ciBsYWN0by12ZWdldGFyaXNjaGUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpvdm9fdmVnZXRhcmlhblwiXT9hKz1cIm92by12ZWdldGFyaXNjaGUgR2VyaWNodGUgdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6b3ZvX3ZlZ2V0YXJpYW5cIl0mJihhKz1cIm51ciBvdm8tdmVnZXRhcmlzY2hlIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6dmVnYW5cIl0/YSs9XCJ2ZWdhbmUgR2VyaWNodGUgdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6dmVnYW5cIl0mJlxuICAgICAgICAoYSs9XCJudXIgdmVnYW5lIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6ZnJ1aXRhcmlhblwiXT9hKz1cImZydXRhcmlzY2hlIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmZydWl0YXJpYW5cIl0mJihhKz1cIm51ciBmcnV0YXJpc2NoZSBHZXJpY2h0ZTxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OnJhd1wiXT9hKz1cInJvaGtcXHUwMGY2c3RsaWNoZSBHZXJpY2h0ZSB2b3JoYW5kZW48YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpyYXdcIl0mJihhKz1cIm51ciByb2hrXFx1MDBmNnN0bGljaGUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpnbHV0ZW5fZnJlZVwiXT9hKz1cImdsdXRlbmZyZWllIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmdsdXRlbl9mcmVlXCJdJiYoYSs9XCJudXIgZ2x1dGVuZnJlaWUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpkYWlyeV9mcmVlXCJdP2ErPVwibWlsY2hmcmVpZSBHZXJpY2h0ZSB2b3JoYW5kZW48YnIvPlwiOlxuICAgICAgICBcIm9ubHlcIj09YltcImRpZXQ6ZGFpcnlfZnJlZVwiXSYmKGErPVwibnVyIG1pbGNoZnJlaWUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpsYWN0b3NlX2ZyZWVcIl0/YSs9XCJsYWt0b3NlZnJlaWUgR2VyaWNodGUgdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6bGFjdG9zZV9mcmVlXCJdJiYoYSs9XCJudXIgbGFrdG9zZWZyZWllIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6aGFsYWxcIl0/YSs9XCJIYWxcXHUwMTAxbCBHZXJpY2h0ZSB2b3JoYW5kZW48YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpoYWxhbFwiXSYmKGErPVwibnVyIEhhbFxcdTAxMDFsIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6a29zaGVyXCJdP2ErPVwia29zY2hlcmUgR2VyaWNodGUgdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6a29zaGVyXCJdJiYoYSs9XCJudXIga29zY2hlcmUgR2VyaWNodGU8YnIvPlwiKTtcInB1YlwiPT1iLmFtZW5pdHkmJihhKz1cIkdhc3RzdFxcdTAwZTR0dGU8YnIvPlwiKTtcImJhclwiPT1cbiAgICBiLmFtZW5pdHkmJihhKz1cIkJhcjxici8+XCIpO1wieWVzXCI9PWIuZnJvemVuX3lvZ3VydCYmKGErPVwiRnJvemVuIFlvZ3VydCBpbSBBbmdlYm90PGJyLz5cIik7XCJ5ZXNcIj09Yi5zbHVzaF9pY2UmJihhKz1cIlNsdXNoIEljZSBpbSBBbmdlYm90PGJyLz5cIik7XCJ5ZXNcIj09Yi5jYWtlJiYoYSs9XCJLdWNoZW50ZWlsY2hlbiwgR2ViXFx1MDBlNGNrIGV0Yy4gaW0gQW5nZWJvdDxici8+XCIpO1wieWVzXCI9PWIuY29mZmVlJiYoYSs9XCJLYWZmZWVnZXRyXFx1MDBlNG5rZSBpbSBBbmdlYm90PGJyLz5cIik7XCJ5ZXNcIj09Yi5kcmlua3MmJihhKz1cIkdldHJcXHUwMGU0bmtlIGltIEFuZ2Vib3Q8YnIvPlwiKTtcImJpZXJnYXJ0ZW5cIj09Yi5hbWVuaXR5JiYoYSs9XCJCaWVyZ2FydGVuPGJyLz5cIik7XCJyZXN0YXVyYW50XCI9PWIuYW1lbml0eSYmKGErPVwiUmVzdGF1cmFudDxici8+XCIpO1wiZmFzdF9mb29kXCI9PWIuYW1lbml0eSYmKGErPVwiRmFzdCBGb29kIFJlc3RhdXJhbnQ8YnIvPlwiKTtpZigoXCJjYWZlXCI9PWIuYW1lbml0eXx8XG4gICAgICAgIFwiY29mZmVlX3Nob3BcIj09Yi5hbWVuaXR5KSYmXCJpY2VfY3JlYW1cIiE9Yi5jdWlzaW5lKWErPVwiQ2FmXFx1MDBlOSwgQmlzdHJvPGJyLz5cIjtpZihcImNhZmVcIj09Yi5hbWVuaXR5JiZcImljZV9jcmVhbVwiPT1iLmN1aXNpbmV8fFwiaWNlX2NyZWFtXCI9PWIuYW1lbml0eSlhKz1cIkVpc2NhZmU8YnIvPlwiO1wiYWxwaW5lX2h1dFwiPT1iLnRvdXJpc20mJihhKz1cIkJlcmdoXFx1MDBmY3R0ZTxici8+XCIpO1wiYXF1YXJpdW1cIj09Yi50b3VyaXNtJiYoYSs9XCJBcXVhcml1bTxici8+XCIpO1wiYXBhcnRtZW50XCI9PWIudG91cmlzbSYmKGErPVwiRmVyaWVud29obnVuZzxici8+XCIpO1wiYXR0cmFjdGlvblwiPT1iLnRvdXJpc20mJihhKz1cIlNlaGVuc3dcXHUwMGZjcmRpZ2tlaXQ8YnIvPlwiKTtcImFydHdvcmtcIj09Yi50b3VyaXNtJiYoYSs9XCJTa3VscHR1cjxici8+XCIpO1wiY2FtcF9zaXRlXCI9PWIudG91cmlzbSYmKGErPVwiQ2FtcGluZ3BsYXR6PGJyLz5cIik7XCJjYXJhdmFuX3NpdGVcIj09Yi50b3VyaXNtJiYoYSs9XCJXb2hubW9iaWxzdGVsbHBsYXR6PGJyLz5cIik7XG4gICAgXCJjaGFsZXRcIj09Yi50b3VyaXNtJiYoYSs9XCJGZXJpZW53b2hudW5nIC8taGF1czxici8+XCIpO1wiZ2FsbGVyeVwiPT1iLnRvdXJpc20mJihhKz1cIkt1bnN0Z2FsZXJpZTxici8+XCIpO1wiZ3Vlc3RfaG91c2VcIj09Yi50b3VyaXNtJiYoYSs9XCJQZW5zaW9uLCBHYXN0aGF1cywgQmVkICYgQnJlYWtmYXN0PGJyLz5cIik7XCJob3N0ZWxcIj09Yi50b3VyaXNtJiYoYSs9XCJKdWdlbmRoZXJiZXJnZSwgSG9zdGVsPGJyLz5cIik7XCJob3RlbFwiPT1iLnRvdXJpc20mJihhKz1cIkhvdGVsPGJyLz5cIik7XCJtb3RlbFwiPT1iLnRvdXJpc20mJihhKz1cIk1vdGVsPGJyLz5cIik7XCJtdXNldW1cIj09Yi50b3VyaXNtJiYoYSs9XCJNdXNldW08YnIvPlwiKTtcInBpY25pY19zaXRlXCI9PWIudG91cmlzbSYmKGErPVwiUmFzdC0gdW5kIFBpY2tuaWNrcGxhdHo8YnIvPlwiKTtcInRoZW1lX3BhcmtcIj09Yi50b3VyaXNtJiYoYSs9XCJGcmVpemVpdC0gb2RlciBUaGVtZW5wYXJrPGJyLz5cIik7XCJ2aWV3cG9pbnRcIj09Yi50b3VyaXNtJiYoYSs9XCJBdXNzaWNodHNwdW5rdDxici8+XCIpO1xuICAgIFwid2lsZGVybmVzc19odXRcIj09Yi50b3VyaXNtJiYoYSs9XCJTY2h1dHpoXFx1MDBmY3R0ZTxici8+XCIpO1wid2luZV9jZWxsYXJcIj09Yi50b3VyaXNtJiYoYSs9XCJXZWlua2VsbGVyPGJyLz5cIik7XCJ6b29cIj09Yi50b3VyaXNtJiYoYSs9XCJab28gLyBUaWVycGFyazxici8+XCIsXCJlbmNsb3N1cmVcIj09Yi56b28mJihhKz1cIm1pdCBXaWxkZ2VoZWdlPGJyLz5cIiksXCJwZXR0aW5nX3pvb1wiPT1iLnpvbyYmKGErPVwibWl0IFN0cmVpY2hlbHpvbzxici8+XCIpLFwiZmFsY29ucnlcIj09Yi56b28mJihhKz1cIm1pdCBGYWxrbmVyZWk8YnIvPlwiKSk7XCJ0cmFpbF9yaWRpbmdfc3RhdGlvblwiPT1iLnRvdXJpc20mJihhKz1cIldhbmRlcnJlaXRzdGF0aW9uPGJyLz5cIik7XCJmaXNoaW5nXCI9PWIuY2x1YiYmKGErPVwiQW5nZWx2ZXJlaW48YnIvPlwiKTtcInNwb3J0XCI9PWIuY2x1YiYmXCJmaXNoaW5nXCI9PWIuc3BvcnQmJihhKz1cImZpc2hpbmcgY2x1Yjxici8+XCIpO1wiYW1hdGV1cl9yYWRpb1wiPT1iLmNsdWImJihhKz1cIkFtYXRldXJmdW5rZXI8YnIvPlwiKTtcbiAgICBcImFydFwiPT1iLmNsdWImJihhKz1cIkt1bnN0dmVyZWluPGJyLz5cIik7XCJhc3Ryb25vbXlcIj09Yi5jbHViJiYoYSs9XCJBc3Ryb25vbWlldmVyZWluPGJyLz5cIik7XCJhdXRvbW9iaWxlXCI9PWIuY2x1YiYmKGErPVwiQXV0b21vYmlsdmVyZWluPGJyLz5cIik7XCJib2FyZF9nYW1lc1wiPT1iLmNsdWImJihhKz1cIkJyZXR0c3BpZWx2ZXJlaW48YnIvPlwiKTtcImNhcmRfZ2FtZXNcIj09Yi5jbHViJiYoYSs9XCJLYXJ0ZW5zcGllbHZlcmVpbjxici8+XCIpO1wiY2hhcml0eVwiPT1iLmNsdWImJihhKz1cIkNoYXJpdHktVmVyZWluPGJyLz5cIik7XCJjaGVzc1wiPT1iLmNsdWImJihhKz1cIlNjaGFjaHZlcmVpbjxici8+XCIpO1wiY2luZW1hXCI9PWIuY2x1YiYmKGErPVwiS2lub3ZlcmVpbjxici8+XCIpO1wiY29va2luZ1wiPT1iLmNsdWImJihhKz1cIktvY2h2ZXJlaW48YnIvPlwiKTtcImN1bHR1cmVcIj09Yi5jbHViJiYoYSs9XCJLdWx0dXJ2ZXJlaW48YnIvPlwiKTtcImRvaXR5b3Vyc2VsZlwiPT1iLmNsdWImJihhKz1cImRvaXR5b3Vyc2VsZi1WZXJlaW48YnIvPlwiKTtcbiAgICBcImVxdWVzdHJpYW5cIj09Yi5jbHViJiYoYSs9XCJSZWl0dmVyZWluPGJyLz5cIik7XCJldGhuaWNcIj09Yi5jbHViJiYoYSs9XCJFdGhuaXNjaGVyIFZlcmVpbjxici8+XCIpO1wiZmFuXCI9PWIuY2x1YiYmKGErPVwiRmFudmVyZWluPGJyLz5cIik7XCJmcmVlbWFzb25yeVwiPT1iLmNsdWImJihhKz1cIkZyZWltYXVyZXItVmVyZWluPGJyLz5cIik7XCJnYW1lXCI9PWIuY2x1YiYmKGErPVwiU3BpZWxldmVyZWluPGJyLz5cIik7XCJoaXN0b3J5XCI9PWIuY2x1YiYmKGErPVwiSGlzdG9yaXNjaGVyLVZlcmVpbiAvIFZlcmVpbiBmXFx1MDBmY3IgR2VzY2hpY2h0ZTxici8+XCIpO1wiaHVudGluZ1wiPT1iLmNsdWImJihhKz1cIkphZ2R2ZXJlaW48YnIvPlwiKTtcImxpbnV4XCI9PWIuY2x1YiYmKGErPVwiTGludXgtVmVyZWluPGJyLz5cIik7XCJtb3RvcmN5Y2xlXCI9PWIuY2x1YiYmKGErPVwiTW90b3JyYWR2ZXJlaW48YnIvPlwiKTtcIm11c2ljXCI9PWIuY2x1YiYmKGErPVwiTXVzaWt2ZXJlaW48YnIvPlwiKTtcIm5hdHVyZVwiPT1iLmNsdWImJihhKz1cIk5hdHVydmVyZWluPGJyLz5cIik7XG4gICAgXCJudWRpc21cIj09Yi5jbHViJiYoYSs9XCJOdWRpc3Rlbi1WZXJlaW4gLyBGS0stVmVyZWluPGJyLz5cIik7XCJwaG90b2dyYXBoeVwiPT1iLmNsdWImJihhKz1cIkZvdG9ncmFmaWV2ZXJlaW48YnIvPlwiKTtcInBvbGl0aWNzXCI9PWIuY2x1YiYmKGErPVwiVmVyZWluIGZcXHUwMGZjciBQb2xpdGlrPGJyLz5cIik7XCJyZWxlZ2lvblwiPT1iLmNsdWImJihhKz1cIlBvbGl0aXNjaGVyLVZlcmVpbjxici8+XCIpO1wic2NvdXRcIj09Yi5jbHViJiYoYSs9XCJQZmFkZmluZGVyaW4vUGZhZGZpbmRlcjxici8+XCIpO1wic21va2VcIj09Yi5jbHViJiYoYSs9XCJSYXVjaGVydmVyZWluPGJyLz5cIik7XCJzcG9ydFwiPT1iLmNsdWImJihhKz1cIlNwb3J0dmVyZWluPGJyLz5cIik7XCJ0aGVhdHJlXCI9PWIuY2x1YiYmKGErPVwiVGhlYXRlcnZlcmVpbjxici8+XCIpO1widmV0ZXJhbnNcIj09Yi5jbHViJiYoYSs9XCJWZXRlcmFuZW48YnIvPlwiKTtcImFtdXNlbWVudF9hcmNhZGVcIj09Yi5sZWlzdXJlJiYoYSs9XCJTcGllbGhhbGxlPGJyLz5cIik7XCJiZWFjaF9yZXNvcnRcIj09XG4gICAgYi5sZWlzdXJlJiYoYSs9XCJTdGFuZGJhZDxici8+XCIpO1wiYmlyZF9oaWRlXCI9PWIubGVpc3VyZSYmKGErPVwiVm9nZWxiZW9iYWNodHVuZ3NwdW5rdDxici8+XCIpO1wiY29tbW9uXCI9PWIubGVpc3VyZSYmKGErPVwiXFx1MDBkNmZmZW50bGljaGUgR3JcXHUwMGZjbmZsXFx1MDBlNGNoZW48YnIvPlwiKTtcImNsdWJcIj09Yi5sZWlzdXJlJiYoYSs9XCJDbHViL1ZlcmVpbjxici8+XCIpO1wiZGFuY2VcIj09Yi5sZWlzdXJlJiYoYSs9XCJUYW56ZW48YnIvPlwiKTtcImRvZ19wYXJrXCI9PWIubGVpc3VyZSYmKGErPVwiSHVuZGVwYXJrPGJyLz5cIik7XCJmaXJlcGl0XCI9PWIubGVpc3VyZSYmKGErPVwiRmV1ZXJzdGVsbGU8YnIvPlwiKTtcImZpc2hpbmdcIj09Yi5sZWlzdXJlJiYoYSs9XCJBbmdlbHN0ZWxsZTxici8+XCIpO1wiZ2FyZGVuXCI9PWIubGVpc3VyZSYmKGErPVwiR2FydGVuPGJyLz5cIik7XCJnb2xmX2NvdXJzZVwiPT1iLmxlaXN1cmUmJihhKz1cIkdvbGZwbGF0ejxici8+XCIpO1wiaGFja2Vyc3BhY2VcIj09Yi5sZWlzdXJlJiYoYSs9XCJPcnQgZlxcdTAwZmNyIEhhY2tlcnRyZWZmZW48YnIvPlwiKTtcbiAgICBcImhvcnNlX3JpZGluZ1wiPT1iLmxlaXN1cmUmJihhKz1cIlJlaXRzdGFsbCAvIFJlaXRlcmhvZjxici8+XCIpO1wiaWNlX3JpbmtcIj09Yi5sZWlzdXJlJiYoYSs9XCJFaXNsYXVmYmFobjxici8+XCIpO1wibmF0dXJlX3Jlc2VydmVcIj09Yi5sZWlzdXJlJiYoYSs9XCJOYXR1cnNjaHV0emdlYmlldCAoTlNHKTxici8+XCIpO1wicGFya1wiPT1iLmxlaXN1cmUmJihhKz1cIkdyXFx1MDBmY25hbmxhZ2U8YnIvPlwiKTtcIm1pbmlhdHVyZV9nb2xmXCI9PWIubGVpc3VyZSYmKGErPVwiTWluaWdvbGY8YnIvPlwiKTtcInBpdGNoXCI9PWIubGVpc3VyZSYmKGErPVwiU3BpZWxmZWxkPGJyLz5cIik7XCJwaXRjaFwiPT1iLmxlaXN1cmUmJlwieWVzXCI9PWIuYnVpbGRpbmcmJihhKz1cIlNwb3J0aGFsbGU8YnIvPlwiKTtcInBsYXlncm91bmRcIj09Yi5sZWlzdXJlJiZcInllc1wiPT1iLmJ1aWxkaW5nP2ErPVwiU3BpZWxzY2hldW5lPGJyLz5cIjpcInBsYXlncm91bmRcIj09Yi5sZWlzdXJlJiYoYSs9XCJTcGllbHBsYXR6PGJyLz5cIik7XCJzb2NpYWxfY2x1YlwiPT1cbiAgICBiLmxlaXN1cmUmJihhKz1cIlRyZWZmcHVua3QgZlxcdTAwZmNyIEZyZWl6ZWl0Z3J1cHBlbjxici8+XCIpO1wic3BhXCI9PWIubGVpc3VyZSYmKGErPVwiSGVpbGJhZCAvIFNwYTxici8+XCIpO1wic3BvcnRzX2NlbnRyZVwiPT1iLmxlaXN1cmUmJihhKz1cIlNwb3J0emVudHJ1bTxici8+XCIpO1wiY2xpbWJpbmdfYWR2ZW50dXJlXCI9PWIuc3BvcnQmJihhKz1cIlNlaWxnYXJ0ZW48YnIvPlwiKTtcInN0YWRpdW1cIj09Yi5sZWlzdXJlJiYoYSs9XCJTdGFkaW9uPGJyLz5cIik7XCJzd2ltbWluZ19wb29sXCI9PWIubGVpc3VyZSYmKGErPVwiU2Nod2ltbWJlY2tlbjxici8+XCIpO1widHJhY2tcIj09Yi5sZWlzdXJlJiYoYSs9XCJSZW5uYmFobjxici8+XCIpO1wid2F0ZXJfcGFya1wiPT1iLmxlaXN1cmUmJihhKz1cIldhc3NlcnBhcms8YnIvPlwiKTtcIndpbGRsaWZlX2hpZGVcIj09Yi5sZWlzdXJlJiYoYSs9XCJXaWxkYmVvYmFjaHR1bmdzcHVua3Q8YnIvPlwiKTtcImFkdWx0X2dhbWluZ19jZW50cmVcIj09Yi5sZWlzdXJlJiYoYSs9XCJTcGllbG90aGVrPGJyLz5cIik7XG4gICAgXCJib3dsaW5nX2FsbGV5XCI9PWIubGVpc3VyZSYmXCIxMHBpblwiPT1iLnNwb3J0JiYoYSs9XCJCb3dsaW5nY2VudGVyPGJyLz5cIik7XCJib3dsaW5nX2FsbGV5XCI9PWIubGVpc3VyZSYmXCI5cGluXCI9PWIuc3BvcnQmJihhKz1cIktlZ2VsYmFobjxici8+XCIpO2lmKFwia2FydGluZ1wiPT1iLnNwb3J0fHxcIm1vdG9yXCI9PWIuc3BvcnQpYSs9XCJLYXJ0LS9Nb3RvcnNwb3J0PGJyLz5cIjtpZihcImRhcnRzXCI9PWIuc3BvcnR8fFwiZGFydFwiPT1iLnNwb3J0KWErPVwiRGFydHM8YnIvPlwiO2lmKGJbXCJwaXN0ZTp0eXBlXCJdKXN3aXRjaChiW1wicGlzdGU6dHlwZVwiXSl7Y2FzZSBcInNraXRvdXJcIjphKz1cIlBpc3RlIGZcXHUwMGZjciBTa2l0b3VyZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJkb3duaGlsbFwiOmErPVwiU2tpYWJmYWhydDxici8+XCI7YnJlYWs7Y2FzZSBcInNsZWRcIjphKz1cIlJvZGVsYmVyZyAvIFJvZGVsc3RyZWNrZTxici8+XCI7YnJlYWs7Y2FzZSBcIm5vcmRpY1wiOmErPVwiTGFuZ2xhdWYgUGlzdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJoaWtlXCI6YSs9XG4gICAgICAgIFwiU2NobmVlc2NodWgtIHVuZCBXaW50ZXJ3YW5kZXJ3ZWc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzbm93X3BhcmtcIjphKz1cIlNub3ctUGFyazxici8+XCJ9aWYoYi5zcG9ydClzd2l0Y2goYi5zcG9ydCl7Y2FzZSBcInN1cmZpbmdcIjphKz1cIlN1cmZlbjxici8+XCI7YnJlYWs7Y2FzZSBcImtpdGVzdXJmaW5nXCI6YSs9XCJLaXRlc3VyZmVuPGJyLz5cIjticmVhaztjYXNlIFwid2F0ZXJfc2tpXCI6YSs9XCJXYXNzZXJza2k8YnIvPlwifWlmKGIuYWVyaWFsd2F5KXN3aXRjaChiLmFlcmlhbHdheSl7Y2FzZSBcImNhYmxlX2JhclwiOmErPVwiTGlmdCBtaXQgR29uZGVsbjxici8+XCI7YnJlYWs7Y2FzZSBcImdvbmRvbGFcIjphKz1cIkxpZnQgbWl0IEdvbmRlbG48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaGFpcl9saWZ0XCI6YSs9XCJTZXNzZWxsaWZ0PGJyLz5cIjticmVhaztjYXNlIFwibWl4ZWRfbGlmdFwiOmErPVwiTGlmdCBtaXQgU2Vzc2VsbiB1bmQgR29uZGVsbjxici8+XCI7YnJlYWs7Y2FzZSBcImRyYWdfbGlmdFwiOmErPVwiU2tpbGlmdDxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJ0LWJhclwiOmErPVwiVC1MaWZ0PGJyLz5cIjticmVhaztjYXNlIFwidC1iYXJcIjphKz1cIlQtTGlmdCAoZWluc2VpdGlnKTxici8+XCI7YnJlYWs7Y2FzZSBcInBsYXR0ZXJcIjphKz1cIkxpZnQgbWl0IFNpdHpzY2hlaWJlPGJyLz5cIjticmVhaztjYXNlIFwicm9wZV90b3dcIjphKz1cIkJcXHUwMGZjZ2VsbGlmdDxici8+XCI7YnJlYWs7Y2FzZSBcIm1hZ2ljX2NhcnBldFwiOmErPVwiQmVmXFx1MDBmNnJkZXJ1bmdzYmFuZDxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVuYmVrYW5udFwifVwibW9zcXVlXCI9PWIuYnVpbGRpbmcmJihhKz1cIk1vc2NoZWU8YnIvPlwiKTtcInN5bmFnb2d1ZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJTeW5hZ29nZTxici8+XCIpO1wiYXBhcnRtZW50c1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJXb2hudW5nPGJyLz5cIik7XCJmYXJtXCI9PWIuYnVpbGRpbmcmJihhKz1cIkZhcm08YnIvPlwiKTtcImhvdGVsXCI9PWIuYnVpbGRpbmcmJihhKz1cIkhvdGVsPGJyLz5cIik7XCJob3VzZVwiPT1iLmJ1aWxkaW5nJiZcbiAgICAoYSs9XCJIYXVzPGJyLz5cIik7XCJkZXRhY2hlZFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJGcmVpc3RlaGVuZDxici8+XCIpO1wicmVzaWRlbnRpYWxcIj09Yi5idWlsZGluZyYmKGErPVwiUmVzaWRlbno8YnIvPlwiKTtpZihcImRvbWl0b3J5XCI9PWIuYnVpbGRpbmd8fFwicmVzaWRlbnRpYWwgcGx1c1wiPT1iLmJ1aWxkaW5nKWErPVwiV29obmhlaW08YnIvPlwiO1widGVycmFjZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJUZXJyYXNzZTxici8+XCIpO1wiaG91c2Vib2F0XCI9PWIuYnVpbGRpbmcmJihhKz1cIkhhdXNib290PGJyLz5cIik7XCJidW5nYWxvd1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJCdW5nYWxvdzxici8+XCIpO1wic3RhdGljX2NhcmF2YW5cIj09Yi5idWlsZGluZyYmKGErPVwiU3RlaGVuZGVyIFdvaG53YWdlbjxici8+XCIpO1wiY29tbWVyY2lhbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLb21tZXJ6aWVsbDxici8+XCIpO1wicmV0YWlsXCI9PWIuYnVpbGRpbmcmJihhKz1cIlZlcmthdWY8YnIvPlwiKTtcIndhcmVob3VzZVwiPT1iLmJ1aWxkaW5nJiZcbiAgICAoYSs9XCJMYWdlcmhhdXM8YnIvPlwiKTtcImJha2Vob3VzZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJCYWNrc3R1YmU8YnIvPlwiKTtcInRlbXBsZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJUZW1wZWw8YnIvPlwiKTtcInNocmluZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJTY2hyZWluPGJyLz5cIik7XCJjaXZpY1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJCXFx1MDBmY3JnZXJsaWNoPGJyLz5cIik7XCJzdGFkaXVtXCI9PWIuYnVpbGRpbmcmJihhKz1cIlN0YWRpdW08YnIvPlwiKTtcInRyYWluX3N0YXRpb25cIj09Yi5idWlsZGluZyYmKGErPVwiQmFobmhvZjxici8+XCIpO1widW5pdmVyc2l0eVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJVbml2ZXJzaXRcXHUwMGU0dDxici8+XCIpO1wicHVibGljXCI9PWIuYnVpbGRpbmcmJihhKz1cIlxcdTAwZDZmZmVudGxpY2hlcyBHZWJcXHUwMGU0dWRlPGJyLz5cIik7XCJicmlkZ2VcIj09Yi5idWlsZGluZyYmKGErPVwiQnJcXHUwMGZjY2tlPGJyLz5cIik7XCJidW5rZXJcIj09Yi5idWlsZGluZyYmKGErPVwiQnVua2VyPGJyLz5cIik7XCJjYWJpblwiPT1cbiAgICBiLmJ1aWxkaW5nJiYoYSs9XCJIXFx1MDBmY3R0ZTxici8+XCIpO1wiY29uc2VydmF0b3J5XCI9PWIuYnVpbGRpbmcmJihhKz1cIldpbnRlcmdhcnRlbjxici8+XCIpO1wiY29uc3RydWN0aW9uXCI9PWIuYnVpbGRpbmcmJihhKz1cIkltIEJhdTxici8+XCIpO1wiZ2FyYWdlXCI9PWIuYnVpbGRpbmcmJihhKz1cIkdhcmFnZTxici8+XCIpO1wiZ2FyYWdlc1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJHYXJhZ2VuPGJyLz5cIik7XCJncmVlbmhvdXNlXCI9PWIuYnVpbGRpbmcmJihhKz1cIkdld1xcdTAwZTRjaHNoYXVzPGJyLz5cIik7XCJoYW5nYXJcIj09Yi5idWlsZGluZyYmKGErPVwiSGFuZ2FyPGJyLz5cIik7XCJodXRcIj09Yi5idWlsZGluZyYmKGErPVwiSFxcdTAwZmN0dGU8YnIvPlwiKTtcInBhdmlsbGlvblwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJQYXZpbGxpb248YnIvPlwiKTtcInJvb2ZcIj09Yi5idWlsZGluZyYmKGErPVwiXFx1MDBkY2JlcmRhY2h0PGJyLz5cIik7XCJzaGVkXCI9PWIuYnVpbGRpbmcmJihhKz1cIkdhcnRlbmhcXHUwMGU0dXNjaGVuPGJyLz5cIik7XG4gICAgXCJ0cmFuc2Zvcm1lcl90b3dlclwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJUcmFuc2Zvcm1hdG9yIFR1cm08YnIvPlwiKTtcInNlcnZpY2VcIj09Yi5idWlsZGluZyYmKGErPVwiU2VydmljZS1TdGVsbGU8YnIvPlwiKTtcImtpb3NrXCI9PWIuYnVpbGRpbmcmJihhKz1cIktpb3NrPGJyLz5cIik7XCJjYXJwb3J0XCI9PWIuYnVpbGRpbmcmJihhKz1cIkNhcnBvcnQ8YnIvPlwiKTtcInJ1aW5zXCI9PWIuYnVpbGRpbmcmJihhKz1cIlJ1aW5lbjxici8+XCIpO1wiZ2FtYmxpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJTcGllbGhhbGxlPGJyLz5cIik7XCJsaWJyYXJ5XCI9PWIuYW1lbml0eSYmKGErPVwiQlxcdTAwZmNjaGVyZWk8YnIvPlwiKTtcImZvdW50YWluXCI9PWIuYW1lbml0eSYmKGErPVwiQnJ1bm5lbjxici8+XCIpO1wiYXR0cmFjdGlvblwiPT1iLmFtZW5pdHkmJihhKz1cIlNlaGVuc3dcXHUwMGZjcmRpZ2tlaXQ8YnIvPlwiKTtpZihcInNvY2lhbF9jZW50cmVcIj09Yi5hbWVuaXR5fHxcImNsdWJcIj09Yi5hbWVuaXR5KWErPVwiVmVyZWluIC8gQ2x1Yjxici8+XCI7XG4gICAgXCJ0b3duaGFsbFwiPT1iLmFtZW5pdHkmJihhKz1cIlJhdGhhdXMgLyBCXFx1MDBmY3JnZXJoYXVzPGJyLz5cIik7XCJiZW5jaFwiPT1iLmFtZW5pdHkmJihhKz1cIlBhcmtiYW5rPGJyLz5cIik7aWYoXCJncmF2ZV95YXJkXCI9PWIuYW1lbml0eXx8XCJjZW1ldGVyeVwiPT1iLmxhbmR1c2UpYSs9XCJGcmllZGhvZjxici8+XCI7XCJwb3N0X2JveFwiPT1iLmFtZW5pdHkmJihhKz1cIkJyaWVma2FzdGVuPGJyLz5cIik7XCJwb3N0X29mZmljZVwiPT1iLmFtZW5pdHkmJihhKz1cIlBvc3RhbXQ8YnIvPlwiKTtcInRlbGVwaG9uZVwiPT1iLmFtZW5pdHkmJihhKz1cIlRlbGVmb248YnIvPlwiKTtcImF0bVwiPT1iLmFtZW5pdHkmJihhKz1cIkdlbGRhdXRvbWF0PGJyLz5cIik7XCJiYW5rXCI9PWIuYW1lbml0eSYmKGErPVwiQmFua2ZpbGlhbGU8YnIvPlwiKTtcInRvaWxldHNcIj09Yi5hbWVuaXR5JiZcInllc1wiPT1iLmRpYXBlcj9hKz1cIlxcdTAwZDZmZmVudGxpY2hlIFRvaWxldHRlIG1pdCBXaWNrZWx0aXNjaDxici8+XCI6XCJ0b2lsZXRzXCI9PWIuYW1lbml0eSYmXG4gICAgICAgIChhKz1cIlxcdTAwZDZmZmVudGxpY2hlIFRvaWxldHRlPGJyLz5cIik7XCJzY2hvb2xcIj09Yi5hbWVuaXR5JiZcIjFcIj09YltcImlzY2VkOmxldmVsXCJdP2ErPVwiR3J1bmRzY2h1bGU8YnIvPlwiOlwic2Nob29sXCI9PWIuYW1lbml0eSYmXCIyXCI9PWJbXCJpc2NlZDpsZXZlbFwiXT9hKz1cIlNla3VuZGFyc3R1ZmUgSTxici8+XCI6XCJzY2hvb2xcIj09Yi5hbWVuaXR5JiZcIjNcIj09YltcImlzY2VkOmxldmVsXCJdP2ErPVwiU2VrdW5kYXJzdHVmZSBJSTxici8+XCI6XCJzY2hvb2xcIj09Yi5hbWVuaXR5JiYoYSs9XCJTY2h1bGU8YnIvPlwiKTtcImtpbmRlcmdhcnRlblwiPT1iLmFtZW5pdHkmJihhKz1cIktpbmRlcmdhcnRlbjxici8+XCIpO1wiaW50ZXJuZXRfY2FmZVwiPT1iLmFtZW5pdHkmJihhKz1cIkludGVybmV0Y2FmXFx1MDBlOTxici8+XCIpO1wiZGF5Y2FyZVwiPT1iLmFtZW5pdHkmJihhKz1cIktpbmRlci0gdW5kIEp1Z2VuZHRhZ2Vzc3RcXHUwMGU0dHRlPGJyLz5cIik7XCJjaGlsZGNhcmVcIj09Yi5hbWVuaXR5JiYoYSs9XCJLaW5kZXItIHVuZCBKdWdlbmR0YWdlc3N0XFx1MDBlNHR0ZTxici8+XCIpO1xuICAgIFwidW5pdmVyc2l0eVwiPT1iLmFtZW5pdHkmJihhKz1cIlVuaXZlcnNpdFxcdTAwZTR0L0hvY2hzY2h1bGU8YnIvPlwiKTtcImNvbGxlZ2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJVbml2ZXJzaXRcXHUwMGU0dC9Ib2Noc2NodWxlPGJyLz5cIik7XCJzaGVsdGVyXCI9PWIuYW1lbml0eSYmKGErPVwiVW50ZXJzdGFuZDxici8+XCIpO1wiYmJxXCI9PWIuYW1lbml0eSYmKGErPVwiR3JpbGxwbGF0ejxici8+XCIpO1wibmlnaHRjbHViXCI9PWIuYW1lbml0eSYmKGErPVwiRGlza290aGVrIC8gTmFjaHRrbHViPGJyLz5cIik7XCJiaWN5Y2xlX3BhcmtpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJGYWhycmFkcGFya3BsYXR6PGJyLz5cIik7XCJiaWN5Y2xlX3JlbnRhbFwiPT1iLmFtZW5pdHkmJihhKz1cIkZhaHJyYWR2ZXJsZWloPGJyLz5cIik7XCJib2F0X3NoYXJpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJCb290c3ZlcmxlaWg8YnIvPlwiKTtcImNhcl9zaGFyaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiQ2FyLVNoYXJpbmc8YnIvPlwiKTtcImNpbmVtYVwiPT1iLmFtZW5pdHkmJlxuICAgIChhKz1cIktpbm88YnIvPlwiKTtcInN3aW1taW5nX3Bvb2xcIj09Yi5hbWVuaXR5JiYoYSs9XCJTY2h3aW1tYmFkPGJyLz5cIik7aWYoXCJlbWJhc3N5XCI9PWIuYW1lbml0eXx8XCJlbWJhc3N5XCI9PWIuZGlwbG9tYXRpYylhKz1cIkJvdHNjaGFmdDxici8+XCI7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmXCJjb25zdWxhdGVcIj09Yi5kaXBsb21hdGljJiYoYSs9XCJLb25zdWxhdGU8YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcImNvbnN1bGF0ZV9nZW5lcmFsXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwiR2VuZXJhbGtvbnN1bGF0ZTxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwiaG9ub3JhcnlfY29uc3VsYXRlXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwiSG9ub3JhcmtvbnN1bGF0ZTxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwicGVybWFuZW50X21pc3Npb25cIj09Yi5kaXBsb21hdGljJiYoYSs9XCJTdFxcdTAwZTRuZGlnZSBWZXJ0cmV0dW5nPGJyLz5cIik7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmXCJkZWxlZ2F0aW9uXCI9PVxuICAgIGIuZGlwbG9tYXRpYyYmKGErPVwiRGVsZWdhdGlvbjxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwiaGlnaF9jb21taXNzaW9uXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwiSG9jaGtvbW1pc3NhcmlhdDxici8+XCIpO1wiQmFyZnVzc3BmYWRcIj09Yi5hbWVuaXR5JiYoYSs9XCJCYXJmdVxcdTAwZGZwZmFkPGJyLz5cIik7XCJjYXNpbm9cIj09Yi5hbWVuaXR5JiYoYSs9XCJDYXNpbm88YnIvPlwiKTtcInNwYVwiPT1iLmFtZW5pdHkmJihhKz1cIkhlaWxiYWQgLyBTcGE8YnIvPlwiKTtcInN0YWJsZXNcIj09Yi5hbWVuaXR5JiYoYSs9XCJSZWl0c3RhbGwgLyBSZWl0ZXJob2Y8YnIvPlwiKTtcIndhdGVyaW5nX3BsYWNlXCI9PWIuYW1lbml0eSYmKGErPVwiV2Fzc2Vyc3RlbGxlIC8gVHJcXHUwMGU0bmtlPGJyLz5cIik7XCJ5ZXNcIj09Yi53YXRlcmluZ19wbGFjZSYmKGErPVwiV2Fzc2Vyc3RlbGxlIC8gVHJcXHUwMGU0bmtlPGJyLz5cIik7XCJ3YXRlcl9wb2ludFwiPT1iLmFtZW5pdHkmJihhKz1cImdyb1xcdTAwZGZlIFRyaW5rd2Fzc2Vyc3RlbGxlPGJyLz5cIik7XG4gICAgXCJ0YXhpXCI9PWIuYW1lbml0eSYmKGErPVwiVGF4aTxici8+XCIpO1wiY2FyX3dhc2hcIj09Yi5hbWVuaXR5JiYoYSs9XCJBdXRvd2FzY2hhbmxhZ2U8YnIvPlwiKTtcImJyb3RoZWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJCb3JkZWxsLCBGcmV1ZGVuaGF1czxici8+XCIpO1wic3RyaXBjbHViXCI9PWIuYW1lbml0eSYmKGErPVwiU3RyaXBjbHViPGJyLz5cIik7XCJzd2luZ2VyY2x1YlwiPT1iLmFtZW5pdHkmJihhKz1cIlN3aW5nZXJjbHViPGJyLz5cIik7XCJwbGFuZXRhcml1bVwiPT1iLmFtZW5pdHkmJihhKz1cIlBsYW5ldGFyaXVtPGJyLz5cIik7XCJjb3VydGhvdXNlXCI9PWIuYW1lbml0eSYmKGErPVwiR2VyaWNodDxici8+XCIpO1wiY3JlbWF0b3JpdW1cIj09Yi5hbWVuaXR5JiYoYSs9XCJLcmVtYXRvcml1bTxici8+XCIpO2lmKFwiY3J5cHRcIj09Yi5hbWVuaXR5fHxcImNyeXB0XCI9PWIuYnVpbGRpbmcpYSs9XCJLcnlwdGE8YnIvPlwiO1wiaHVudGluZ19zdGFuZFwiPT1iLmFtZW5pdHkmJihhKz1cIkhvY2hzaXR6PGJyLz5cIik7XCJwaG90b19ib290aFwiPT1cbiAgICBiLmFtZW5pdHkmJihhKz1cIkZvdG9hdXRvbWF0PGJyLz5cIik7XCJwcmlzb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJHZWZcXHUwMGU0bmduaXM8YnIvPlwiKTtcInJhbmdlcl9zdGF0aW9uXCI9PWIuYW1lbml0eSYmKGErPVwiTmF0aW9uYWwgUGFyayBSYW5nZXIgU3RhdGlvbjxici8+XCIpO1wicmVnaXN0ZXJfb2ZmaWNlXCI9PWIuYW1lbml0eSYmKGErPVwiU3RhbmRlc2FtdDxici8+XCIpO1wibWFya2V0cGxhY2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJNYXJrdHBsYXR6IC8gV29jaGVubWFya3Q8YnIvPlwiKTtcInNvbGFyaXVtXCI9PWIuYW1lbml0eSYmKGErPVwiU29sYXJpdW08YnIvPlwiKTtcInNhdW5hXCI9PWIuYW1lbml0eSYmKGErPVwiU2F1bmE8YnIvPlwiKTtcInNob3dlclwiPT1iLmFtZW5pdHkmJihhKz1cIlxcdTAwZjZmZmVudGxpY2hlIER1c2NoZTxici8+XCIpO2lmKFwid2FzdGVfZGlzcG9zYWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJNXFx1MDBmY2xsZW50c29yZ3VuZyBhdWYgXFx1MDBmNmZmZW50bGljaGVuIFBsXFx1MDBlNHR6ZW48YnIvPlwiLFxuICAgICAgICBiLndhc3RlKSlzd2l0Y2goYSs9XCJBcnQ6IFwiLGIud2FzdGUpe2Nhc2UgXCJ0cmFzaFwiOmErPVwiQWxsZ2VtZWluZXIgTVxcdTAwZmNsbDxici8+XCI7YnJlYWs7Y2FzZSBcIm9pbFwiOmErPVwiT2lsPGJyLz5cIjticmVhaztjYXNlIFwiZHJ1Z3NcIjphKz1cIlBoYXJtYXpldXRpc2NoPGJyLz5cIjticmVhaztjYXNlIFwib3JnYW5pY1wiOmErPVwiS29tcG9zdDxici8+XCI7YnJlYWs7Y2FzZSBcInBsYXN0aWNcIjphKz1cIlBsYXN0aWs8YnIvPlwiO2JyZWFrO2Nhc2UgXCJydWJibGVcIjphKz1cIlNjaHV0dDxici8+XCI7YnJlYWs7Y2FzZSBcImNpZ2FyZXR0ZXNcIjphKz1cIlppZ2FyZXR0ZW48YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJBbGxnZW1laW5lciBNXFx1MDBmY2xsPGJyLz5cIn1pZihcIndhc3RlX2Jhc2tldFwiPT1iLmFtZW5pdHl8fFwiZG9nX2V4Y3JlbWVudFwiPT1iLndhc3RlKWErPVwiSHVuZGUtQ29kZSBNXFx1MDBmY2xsY29udGFpbmVyPGJyLz5cIjtpZihcInNjb3V0X2NhbXBcIj09Yi5hbWVuaXR5fHxcInNjb3V0X2h1dFwiPT1iLmFtZW5pdHl8fFxuICAgICAgICBcInNjb3V0X2hhbGxcIj09Yi5hbWVuaXR5KWErPVwiUGZhZGZpbmRlcmhlaW08YnIvPlwiO1wiZmVycnlfdGVybWluYWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJGXFx1MDBlNGhyaGFmZW48YnIvPlwiKTtcImJ1cmVhdV9kZV9jaGFuZ2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJHZWxkd2VjaHNlbHN0dWJlPGJyLz5cIik7XCJ5b3V0aF9jbHViXCI9PWIuYW1lbml0eSYmKGErPVwiSnVnZW5kemVudHJ1bTxici8+XCIpO1wiZmVzdGl2YWxfZ3JvdW5kc1wiPT1iLmFtZW5pdHkmJihhKz1cIkZlc3RpdmFsZ2VsXFx1MDBlNG5kZTxici8+XCIpO2lmKFwieWVzXCI9PWIub3BlbmZpcmV8fFwieWVzXCI9PWIuZmlyZXBsYWNlKWErPVwiT2ZmZW5lIEZldWVyc3RlbGxlPGJyLz5cIjtpZihcInZlbmRpbmdfbWFjaGluZVwiPT1iLmFtZW5pdHkpaWYoYi52ZW5kaW5nKXN3aXRjaChiLnZlbmRpbmcpe2Nhc2UgXCJhZG1pc3Npb25fdGlja2V0c1wiOmErPVwiRWludHJpdHRza2FydGVuYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImFuaW1hbF9mZWVkXCI6YSs9XCJUaWVyZnV0dGVyYXV0b21hdDxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJiaWN5Y2xlX3R1YmVcIjphKz1cIkZhaHJyYWRzY2hsYXVjaGF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJib29rc1wiOmErPVwiQlxcdTAwZmNjaGVyYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImNhbmRsZXNcIjphKz1cIktlcnplbmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaWdhcmV0dGVzXCI6YSs9XCJaaWdhcmV0dGVuYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImNoZW1pc3RcIjphKz1cIkFwb3RoZWtlbi9Ecm9nZXJpZSBBdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiY29uZG9tc1wiOmErPVwiS29uZG9tYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImRyaW5rc1wiOmErPVwiR2V0clxcdTAwZTRua2VhdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiZWxlY3Ryb25pY3NcIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIEVsZWt0cm8tWnViZWhcXHUwMGY2cjxici8+XCI7YnJlYWs7Y2FzZSBcImVsb25nYXRlZF9jb2luXCI6YSs9XCJNXFx1MDBmY256cHJcXHUwMGU0Z3VuZ3NhdXRvbWF0PGJyLz5cIjticmVhaztcbiAgICAgICAgY2FzZSBcImV4Y3JlbWVudF9iYWdzXCI6YSs9XCJIdW5kZXRcXHUwMGZjdGVuc3BlbmRlcjxici8+XCI7YnJlYWs7Y2FzZSBcImZlbWluaW5lX2h5Z2llbmVcIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIERhbWVuaHlnaWVuZXByb2R1a3RlPGJyLz5cIjticmVhaztjYXNlIFwiZmlyc3RfYWlkXCI6YSs9XCJFcnN0ZS1IaWxmZS1BdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiZmlzaGluZ190YWNrbGVcIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIEFuZ2VsenViZWhcXHUwMGY2cjxici8+XCI7YnJlYWs7Y2FzZSBcImZpc2hpbmdfYmFpdFwiOmErPVwiQW5nZWxrXFx1MDBmNmRlcmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmbG93ZXJzXCI6YSs9XCJCbHVtZW5hdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiZm9vZFwiOmErPVwiTGViZW5zbWl0dGVsLUF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJpY2VfY3ViZXNcIjphKz1cIkVpc3dcXHUwMGZjcmZlbGF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJpY2VfY3JlYW1cIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIFNwZWlzZWVpczxici8+XCI7XG4gICAgICAgICAgICBicmVhaztjYXNlIFwiaW5rX2NhcnRyaWRnZXNcIjphKz1cIkRydWNrZXJwYXRyb25lbiBBdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwibGF1bmRyeV9kZXRlcmdlbnRcIjphKz1cIldhc2NobWl0dGVsYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInB1YmxpY190cmFuc3BvcnRfdGlja2V0c1wiOmErPVwiRmFocmthcnRlbmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJuZXdzcGFwZXJcIjphKz1cIlplaXR1bmdzYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInBhcmNlbF9waWNrdXBcIjphKz1cIlBhY2tzdGF0aW9uPGJyLz5cIjticmVhaztjYXNlIFwicGFyY2VsX21haWxfaW5cIjphKz1cIlBha2V0c3RhdGlvbjxici8+XCI7YnJlYWs7Y2FzZSBcInBhcmtpbmdfdGlja2V0c1wiOmErPVwiUGFya3NjaGVpbmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwaG90b3NcIjphKz1cIkZvdG9hdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwic2V4X3RveXNcIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIFNleHNwaWVsemV1Zzxici8+XCI7YnJlYWs7XG4gICAgICAgIGNhc2UgXCJTSU1fY2FyZHNcIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIFNJTSBLYXJ0ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJzdGFtcHNcIjphKz1cIkJyaWVmbWFya2VuYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInN3ZWV0c1wiOmErPVwiU1xcdTAwZmNcXHUwMGRmaWdrZWl0ZW5hdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwic3lyaW5nZXNcIjphKz1cIlNwcml0emVuYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInRvbGxcIjphKz1cIk1hdXQtQXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInRveXNcIjphKz1cIlNwaWVsemV1Z2F1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bWJyZWxsYXNcIjphKz1cIlJlZ2Vuc2NoaXJtYXV0b21hdDxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIlZlcmthdWZzYXV0b21hdDxici8+XCJ9ZWxzZSBhKz1cIlZlcmthdWZzYXV0b21hdDxici8+XCI7XCJhcnRzX2NlbnRyZVwiPT1iLmFtZW5pdHkmJihhKz1cIkt1bHR1cnplbnRydW08YnIvPlwiKTtcImFydHdvcmtcIj09Yi5hbWVuaXR5JiYoYSs9XCJLdW5zdHdlcmsgLyBLdW5zdG9iamVrdDxici8+XCIpO1xuICAgIFwibXVzZXVtXCI9PWIuYW1lbml0eSYmKGErPVwiTXVzZXVtPGJyLz5cIik7XCJ0aGVhdHJlXCI9PWIuYW1lbml0eSYmKGErPVwiVGhlYXRlcjxici8+XCIpO1wiY2F0aGVkcmFsXCI9PWIuYnVpbGRpbmcmJihhKz1cIkthdGhlZHJhbGU8YnIvPlwiKTtcImNodXJjaFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLaXJjaGU8YnIvPlwiKTtcImNoYXBlbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLYXBlbGxlPGJyLz5cIik7XCJwbGFjZV9vZl93b3JzaGlwXCI9PWIuYW1lbml0eSYmKGErPVwiS2lyY2hlIC8gS3VsdHN0XFx1MDBlNHR0ZTxici8+XCIpO1widmlsbGFnZVwiPT1iLmFiYW5kb25lZCYmKGErPVwiVmVybGFzc2VuZSBTdGFkdDxici8+XCIpO1widGhlbWVfcGFya1wiPT1iW1wiYWJhbmRvbmVkOnRvdXJpc21cIl0mJihhKz1cIlZlcmxhc3NlbmVyIFZlcmduXFx1MDBmY2d1bmdzcGFyazxici8+XCIpO1wicHJpc29uX2NhbXBcIj09YltcImFiYW5kb25lZDphbWVuaXR5XCJdJiZcImNvbmNlbnRyYXRpb25fY2FtcFwiPT1bXCJjb25jZW50cmF0aW9uX2NhbXBcIl0mJlxuICAgIChhKz1cIktaIEdlZGVua3N0XFx1MDBlNHR0ZTxici8+XCIpO1wieWVzXCI9PWIuYWJhbmRvbmVkJiZcImJ1bmtlclwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJWZXJsYXNzZW5lIEJ1bmtlcmFubGFnZTxici8+XCIpO1wieWVzXCI9PWIuYWJhbmRvbmVkJiZcImJhcnJhY2tzXCI9PWIubWlsaXRhcnkmJihhKz1cIlZlcmxhc3NlbmUgTWlsaXRcXHUwMGU0cmJhcmFja2VuPGJyLz5cIik7XCJ5ZXNcIj09Yi5hYmFuZG9uZWQmJlwiYWlyZmllbGRcIj09Yi5taWxpdGFyeSYmKGErPVwiVmVybGFzc2VuZSBNaWxpdFxcdTAwZTRyZmx1Z3BsYXR6PGJyLz5cIik7XCJtb25hc3RlcnlcIj09Yi5oaXN0b3JpYyYmKGErPVwiSGlzdG9yaXNjaGVzIEtsb3N0ZXI8YnIvPlwiKTtcIm1vbmFzdGVyeVwiPT1iLmFtZW5pdHkmJihhKz1cIktsb3N0ZXI8YnIvPlwiKTtcIm1vbmFzdGVyeVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLbG9zdGVyPGJyLz5cIik7XCJtYW5vclwiPT1iLmhpc3RvcmljJiYoYSs9XCJHdXRzaGF1cyAvIEhlcnJlbmhhdXM8YnIvPlwiKTtcImJvdW5kYXJ5X3N0b25lXCI9PVxuICAgIGIuaGlzdG9yaWMmJihhKz1cIkhpc3RvcmlzY2hlciBHcmVuenN0ZWluPGJyLz5cIik7XCJtaWxlc3RvbmVcIj09Yi5oaXN0b3JpYyYmKGErPVwiSGlzdG9yaXNjaGVyIE1laWxlbnN0ZWluPGJyLz5cIik7XCJtb251bWVudFwiPT1iLmhpc3RvcmljJiYoYSs9XCJNb251bWVudDxici8+XCIpO1wicGFsYWNlXCI9PWIuaGlzdG9yaWMmJihhKz1cIlBhbGFzdDxici8+XCIpO1wibWluZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJWZXJsYXNzZW5lIE1pbmU8YnIvPlwiKTtcInJ1aW5zXCI9PWIuaGlzdG9yaWMmJihhKz1cIlJ1aW5lPGJyLz5cIik7XCJoYXJib3VyXCI9PWIuaGlzdG9yaWNfdXNhZ2UmJihhKz1cImhpc3RvcmlzY2hlciBIYWZlbjxici8+XCIpO1wicnVuZV9zdG9uZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJSdW5lbnN0ZWluPGJyLz5cIik7XCJiYXR0bGVmaWVsZFwiPT1iLmhpc3RvcmljJiYoYSs9XCJTY2hsYWNodGZlbGQ8YnIvPlwiKTtcImJsYWNrc21pdGhcIj09Yi5oaXN0b3JpYyYmKGErPVwiSGlzdG9yaXNjaGUgU2NobWllZGU8YnIvPlwiKTtcbiAgICBpZihcInRyZWVfc2hyaW5lXCI9PWIuaGlzdG9yaWN8fFwid2F5c2lkZV9zaHJpbmVcIj09Yi5oaXN0b3JpYylhKz1cIlNjaHJlaW4gLyBCaWxkc3RvY2s8YnIvPlwiO1wiY2l0eV9nYXRlXCI9PWIuaGlzdG9yaWMmJihhKz1cIlN0YWR0dG9yPGJyLz5cIik7XCJ3YXlzaWRlX2Nyb3NzXCI9PWIuaGlzdG9yaWMmJihhKz1cIldlZ2tyZXV6PGJyLz5cIik7XCJtb251bWVudFwiPT1iLmFtZW5pdHkmJihhKz1cIkRlbmttYWw8YnIvPlwiKTtcIm1lbW9yaWFsXCI9PWIuaGlzdG9yaWMmJihhKz1cIkRlbmttYWw8YnIvPlwiKTtcIm9wdGljYWxfdGVsZWdyYXBoXCI9PWIuaGlzdG9yaWMmJihhKz1cIk9wdGlzY2hlciBUZWxlZ3JhcGg8YnIvPlwiKTtpZihcImNhc3RsZVwiPT1iLmhpc3RvcmljKWlmKGIuY2FzdGxlX3R5cGUpc3dpdGNoKGIuY2FzdGxlX3R5cGUpe2Nhc2UgXCJkZWZlbnNpdmVcIjphKz1cIkJ1cmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYWxhY2VcIjphKz1cIlBhbGFzdDxici8+XCI7YnJlYWs7Y2FzZSBcInN0YXRlbHlcIjphKz1cIlNjaGxvc3M8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwibWFub3JcIjphKz1cIkhlcnJlbmhhdXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmb3J0cmVzc1wiOmErPVwiRmVzdHVuZzxici8+XCI7YnJlYWs7Y2FzZSBcImNhc3RydW1cIjphKz1cIlJcXHUwMGY2bWlzY2hlcyBNaWxpdFxcdTAwZTRybGFnZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzaGlyb1wiOmErPVwiU2hpcm88YnIvPlwiO2JyZWFrO2Nhc2UgXCJrcmVtbGluXCI6YSs9XCJLcmVtbDxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIlNjaGxvc3MgLyBCdXJnPGJyLz5cIn1lbHNlIGErPVwiU2NobG9zcyAvIEJ1cmc8YnIvPlwiO1wiYXJjaGFlb2xvZ2ljYWxfc2l0ZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJBcmNoXFx1MDBlNG9sb2dpc2NoZSBGdW5kc3RcXHUwMGU0dHRlPGJyLz5cIik7aWYoXCJ0b21iXCI9PWIuaGlzdG9yaWMpaWYoYi50b21iKXN3aXRjaChiLnRvbWIpe2Nhc2UgXCJ0dW11bHVzXCI6YSs9XCJIXFx1MDBmY2dlbGdyYWI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyb2NrLWN1dFwiOmErPVwiRmVsc2dyYWI8YnIvPlwiO2JyZWFrO1xuICAgICAgICBjYXNlIFwiaHlwb2dldW1cIjphKz1cIkh5cG9nXFx1MDBlNHVtPGJyLz5cIjticmVhaztjYXNlIFwid2FyX2dyYXZlXCI6YSs9XCJTb2xkYXRlbmZyaWVkaG9mPGJyLz5cIjticmVhaztjYXNlIFwibWF1c29sZXVtXCI6YSs9XCJNYXVzb2xldW08YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb2x1bWJhcml1bVwiOmErPVwiS29sdW1iYXJpdW08YnIvPlwiO2JyZWFrO2Nhc2UgXCJjcnlwdFwiOmErPVwiS3J5cHRhPGJyLz5cIjticmVhaztjYXNlIFwicHlyYW1pZFwiOmErPVwiUHlyYW1pZGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzYXJjb3BoYWd1c1wiOmErPVwiU2Fya29waGFnPGJyLz5cIjticmVhaztjYXNlIFwidmF1bHRcIjphKz1cIkdydWZ0PGJyLz5cIjticmVhaztjYXNlIFwidG9tYnN0b25lXCI6YSs9XCJHcmFic3RlaW48YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJIaXN0b3Jpc2NoZSBHcmFic3RcXHUwMGU0dHRlPGJyLz5cIn1lbHNlIGErPVwiSGlzdG9yaXNjaGUgR3JhYnN0XFx1MDBlNHR0ZTxici8+XCI7XCJhY2NvdW50YW50XCI9PWIub2ZmaWNlJiYoYSs9XG4gICAgICAgIFwiQnVjaGhhbHRlciAvIFdpcnRzY2hhZnRwclxcdTAwZmNmZXI8YnIvPlwiKTtcImFkbWluaXN0cmF0aXZlXCI9PWIub2ZmaWNlJiYoYSs9XCJLcmVpcy0gYnp3LiBHZW1laW5kZWJlaFxcdTAwZjZyZGU8YnIvPlwiKTtcImFyY2hpdGVjdFwiPT1iLm9mZmljZSYmKGErPVwiQXJjaGl0ZWt0dXJiXFx1MDBmY3JvPGJyLz5cIik7XCJhc3NvY2lhdGlvblwiPT1iLm9mZmljZSYmKGErPVwiVmVyZWluLCBWZXJlaW5pZ3VuZyBiencuIEludGVyZXNzZW5nZW1laW5zY2hhZnQ8YnIvPlwiKTtcInBoeXNpY2lhblwiPT1iLm9mZmljZSYmKGErPVwiQXJ6dDxici8+XCIpO1wiY2FtcGluZ1wiPT1iLm9mZmljZSYmKGErPVwiUmV6ZXB0aW9uIENhbXBpbmdwbGF0eiBvZGVyIEJcXHUwMGZjcm8gRnJlaXplaXRwYXJrPGJyLz5cIik7XCJjb21wYW55XCI9PWIub2ZmaWNlJiYoYSs9XCJTaXR6IGVpbmVyIHByaXZhdGVuIEZpcm1hPGJyLz5cIik7XCJlZHVjYXRpb25hbF9pbnN0aXR1dGlvblwiPT1iLm9mZmljZSYmKGErPVwiQmlsZHVuZ3NlaW5yaWNodHVuZzxici8+XCIpO1xuICAgIFwiZW1wbG95bWVudF9hZ2VuY3lcIj09Yi5vZmZpY2UmJihhKz1cIkpvYi1DZW50ZXIgLyBBcmJlaXRzdmVybWl0dGx1bmc8YnIvPlwiKTtcImVzdGF0ZV9hZ2VudFwiPT1iLm9mZmljZSYmKGErPVwiSW1tb2JpbGllbm1ha2xlciAvIFdvaG51bmdzYmF1Z2Vub3NzZW5zY2hhZnQ8YnIvPlwiKTtcImZvcmVzdHJ5XCI9PWIub2ZmaWNlJiYoYSs9XCJGb3JzdGFtdDxici8+XCIpO1wiZm91bmRhdGlvblwiPT1iLm9mZmljZSYmKGErPVwiR2VzY2hcXHUwMGU0ZnRzc3RlbGxlIGVpbmVyIFN0aWZ0dW5nPGJyLz5cIik7XCJnb3Zlcm5tZW50XCI9PWIub2ZmaWNlJiYoYSs9XCJCZWhcXHUwMGY2cmRlIC8gUmVnaWVydW5nc2VpbnJpY2h0dW5nPGJyLz5cIik7XCJndWlkZVwiPT1iLm9mZmljZSYmKGErPVwiQlxcdTAwZmNybyBmXFx1MDBmY3IgVG91cmlzdGVuZlxcdTAwZmNocnVuZ2VuPGJyLz5cIik7XCJpbnN1cmFuY2VcIj09Yi5vZmZpY2UmJihhKz1cIlZlcnNpY2hlcnVuZ3NiXFx1MDBmY3JvPGJyLz5cIik7XCJpdFwiPT1iLm9mZmljZSYmKGErPVwiSVQtVW50ZXJuZWhtZW48YnIvPlwiKTtcbiAgICBcImxhd3llclwiPT1iLm9mZmljZSYmKGErPVwiUmVjaHRzYW53YWx0c2thbnpsZWk8YnIvPlwiKTtcIm5ld3NwYXBlclwiPT1iLm9mZmljZSYmKGErPVwiWmVpdHVuZ3NyZWRha3Rpb248YnIvPlwiKTtcIm5nb1wiPT1iLm9mZmljZSYmKGErPVwiQlxcdTAwZmNybyBlaW5lciBOaWNodHJlZ2llcnVuZ3NvcmdhbmlzYXRpb248YnIvPlwiKTtcIm5vdGFyeVwiPT1iLm9mZmljZSYmKGErPVwiTm90YXI8YnIvPlwiKTtcInBvbGl0aWNhbF9wYXJ0eVwiPT1iLm9mZmljZSYmKGErPVwiQlxcdTAwZmNybyBlaW5lciBwb2xpdGlzY2hlbiBQYXJ0ZWk8YnIvPlwiKTtcInF1YW5nb1wiPT1iLm9mZmljZSYmKGErPVwiQlxcdTAwZmNybyBlaW5lciBoYWxic3RhYXRsaWNoZW4gT3JnYW5pc2F0aW9uPGJyLz5cIik7XCJyZWFsdG9yXCI9PWIub2ZmaWNlJiYoYSs9XCJJbW1vYmlsaWVubWFrbGVyIC8gV29obnVuZ3NiYXVnZW5vc3NlbnNjaGFmdDxici8+XCIpO1wicmVhbF9lc3RhdGVfYWdlbnRcIj09Yi5vZmZpY2UmJihhKz1cIkltbW9iaWxpZW5tYWtsZXIgLyBXb2hudW5nc2JhdWdlbm9zc2Vuc2NoYWZ0PGJyLz5cIik7XG4gICAgXCJyZWdpc3RlclwiPT1iLm9mZmljZSYmKGErPVwiU3RhbmRlc2FtdDxici8+XCIpO1wicmVsaWdpb25cIj09Yi5vZmZpY2UmJihhKz1cIkJcXHUwMGZjcm8gZWluZXIgcmVsaWdpXFx1MDBmNnNlbiBJbnN0YW56PGJyLz5cIik7XCJyZXNlYXJjaFwiPT1iLm9mZmljZSYmKGErPVwiRm9yc2NodW5nc3VudGVybmVobWVuIG9kZXIgLWluc3RpdHV0PGJyLz5cIik7XCJ0YXhcIj09Yi5vZmZpY2UmJihhKz1cIkZpbmFuemFtdDxici8+XCIpO1widGVsZWNvbW11bmljYXRpb25cIj09Yi5vZmZpY2UmJihhKz1cIlRlbGVrb21tdW5pa2F0aW9uc2Zpcm1hPGJyLz5cIik7XCJ0cmF2ZWxfYWdlbnRcIj09Yi5vZmZpY2UmJihhKz1cIlNpdHogZWluZXMgUmVpc2V1bnRlcm5laG1lbnM8YnIvPlwiKTtcIndhdGVyX3V0aWxpdHlcIj09Yi5vZmZpY2UmJihhKz1cIldhc3NlcndpcnRzY2hhZnRzYW10PGJyLz5cIik7XCJ0aGVyYXBpc3RcIj09Yi5vZmZpY2UmJihhKz1cIlRoZXJhcGV1dDxici8+XCIpO1wiY2l0eVwiPT1iLnBsYWNlJiYoYSs9XCJHcm9cXHUwMGRmc3RhZHQ8YnIvPlwiKTtcbiAgICBcInRvd25cIj09Yi5wbGFjZSYmKGErPVwiU3RhZHQvS2xlaW5zdGFkdDxici8+XCIpO1widmlsbGFnZVwiPT1iLnBsYWNlJiYoYSs9XCJEb3JmPGJyLz5cIik7XCJjb250aW5lbnRcIj09Yi5wbGFjZSYmKGErPVwiS29udGluZW50PGJyLz5cIik7XCJvY2VhblwiPT1iLnBsYWNlJiYoYSs9XCJPemVhbjwvYnI+XCIpO1widHJhY2tcIj09Yi5oaWdod2F5JiYoYSs9XCJGb3JzdC0sIFdhbGQgdW5kIEZlbGR3ZWc8YnIvPlwiKTtcInJhY2V3YXlcIj09Yi5oaWdod2F5JiYoYSs9XCJNb3RvcnNwb3J0YmFobjxici8+XCIpO1wiZGVzaWduYXRlZFwiPT1iLmJpY3ljbGUmJihhKz1cIlJhZHdlZzxici8+XCIpO1wicGF0aFwiPT1iLmhpZ2h3YXkmJihhKz1cIkZ1XFx1MDBkZndlZzxici8+XCIpO1wicGFya2luZ1wiPT1iLmFtZW5pdHkmJihhKz1cIlBhcmtwbGF0ejxici8+XCIpO1wic2VydmljZXNcIj09Yi5oaWdod2F5JiYoYSs9XCJSYXN0c3RcXHUwMGU0dHRlPGJyLz5cIik7XCJyZXN0X2FyZWFcIj09Yi5oaWdod2F5JiYoYSs9XCJSYXN0cGxhdHo8YnIvPlwiKTtcInR1cm5pbmdfY2lyY2xlXCI9PVxuICAgIGIuaGlnaHdheSYmKGErPVwiV2VuZGVwbGF0ei9XZW5kZWhhbW1lcjxici8+XCIpO1wic2VydmljZVwiPT1iLmhpZ2h3YXkmJihhKz1cIlp1ZmFocnRzc3RyYVxcdTAwZGZlIC8gRXJzY2hsaWVcXHUwMGRmdW5nc3dlZzxici8+XCIpO1wibW90b3J3YXlcIj09Yi5oaWdod2F5JiYoYSs9XCJBdXRvYmFobjxici8+XCIpO1wibW90b3J3YXlfanVuY3Rpb25cIj09Yi5oaWdod2F5JiYoYSs9XCJBdXRvYmFobmF1ZmZhaHJ0PGJyLz5cIik7XCJicmlkbGV3YXlcIj09Yi5oaWdod2F5JiYoYSs9XCJSZWl0d2VnPGJyLz5cIik7XCJ5ZXNcIj09Yi5vbmV3YXkmJihhKz1cIkVpbmJhaG5zdHJhXFx1MDBkZmU8YnIvPlwiKTtcInllc1wiPT1iLnBhcmtfcmlkZSYmKGErPVwiUGFyayBhbmQgUmlkZTxici8+XCIpO1widW5rbm93blwiPT1iLnBhcmtfcmlkZSYmKGErPVwiUGFyayBhbmQgUmlkZTxici8+XCIpO1wiYnVzXCI9PWIucGFya19yaWRlJiYoYSs9XCJQYXJrIGFuZCBSaWRlPGJyLz5cIik7XCJ0cmFtXCI9PWIucGFya19yaWRlJiYoYSs9XCJQYXJrIGFuZCBSaWRlPGJyLz5cIik7XG4gICAgXCJidXNfc3RvcFwiPT1iLmhpZ2h3YXkmJihhKz1cIkJ1c2hhbHRlc3RlbGxlPGJyLz5cIik7XCJwZWRlc3RyaWFuXCI9PWIuaGlnaHdheSYmKGErPVwiRnVcXHUwMGRmZ1xcdTAwZTRuZ2Vyem9uZTxici8+XCIpO1wic3RyZWV0X2xhbXBcIj09Yi5oaWdod2F5JiYoYSs9XCJTdHJhc3NlbmxhdGVybmU8YnIvPlwiKTtcInRyYWZmaWNfc2lnbmFsc1wiPT1iLmhpZ2h3YXkmJihhKz1cIkFtcGVsPGJyLz5cIik7XCJ0cmFmZmljX3NpZ25hbHNcIj09Yi5jcm9zc2luZyYmKGErPVwiRnVcXHUwMGRmZ1xcdTAwZTRuZ2VyYW1wZWw8YnIvPlwiKTtcInNwZWVkX2NhbWVyYVwiPT1iLmhpZ2h3YXkmJihhKz1cIkJsaXR6ZXI8YnIvPlwiKTtcInllc1wiPT1iLnRyYWZmaWNfY2FsbWluZyYmKHJldCs9XCJWZXJrZWhyc2JlcnVoaWd0ZXIgQmVyZWljaDwvYnI+XCIpO1wiYnVtcFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiS3VyemUgQm9kZW53ZWxsZTwvYnI+XCIpO1wiY2hpY2FuZVwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiWnUgdW1mYWhyZW5kZW5lcyBIaW5kZXJuaXNzPC9icj5cIik7XG4gICAgXCJjaG9rZXJcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkZhaHJiYWhudmVyZW5ndW5nLCB6dSB1bWZhaHJlbmRlIEhpbmRlcm5pc3NlIG1cXHUwMGY2Z2xpY2g8L2JyPlwiKTtcImN1c2hpb25cIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkJvZGVud2VsbGUgbWl0IExcXHUwMGZjY2tlbiBhdXMgbWVocmVyZW4gcmVjaHRlY2tpZ2VuIEh1Y2tlbG48L2JyPlwiKTtcImh1bXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cInZlcmdsZWljaGJhcmUgQm9kZW53ZWxsZSBtaXQgZXR3YXIgZWluZXIgTFxcdTAwZTRuZ2Ugdm9uIDItNE08L2JyPlwiKTtcImlzbGFuZFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiRWluZSBWZXJrZWhyc2luc2VsPC9icj5cIik7XCJydW1ibGVfc3RyaXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkhvbHBlcnN0cmVpZmVuPC9icj5cIik7XCJ0YWJsZVwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwibGFuZ2UgQm9kZW53ZWxsZW4gbWl0IGZsYWNoZW4gTWl0dGVsc3RcXHUwMGZjY2s8L2JyPlwiKTtcbiAgICBcImJ1b3lfY2FyZGluYWxcIj09YltcInNlYW1hcms6dHlwZVwiXSYmKGErPVwiS2FyZGluYWxzdG9ubmU8YnIvPlwiKTtcImJ1b3lfbGF0ZXJhbFwiPT1iW1wic2VhbWFyazp0eXBlXCJdJiYoYSs9XCJMYXRlcmFsdG9ubmU8YnIvPlwiKTtcImJ1b3lfaXNvbGF0ZWRfZGFuZ2VyXCI9PWJbXCJzZWFtYXJrOnR5cGVcIl0mJihhKz1cIkdlZmFocmVudG9ubmU8YnIvPlwiKTtcInBlcmNoXCI9PWJbXCJzZWFtYXJrOmJlYWNvbl9sYXRlcmFsOnNoYXBlXCJdJiYoYSs9XCJQcmlja2U8YnIvPlwiKTtcImZ1ZWxcIj09Yi5hbWVuaXR5JiZcImZ1ZWxfc3RhdGlvblwiPT1iW1wic2VhbWFyazpzbWFsbF9jcmFmdF9mYWNpbGl0eTpjYXRlZ29yeVwiXT9hKz1cIlNjaGlmZnN0YW5rc3RlbGxlPGJyLz5cIjpcImZ1ZWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJUYW5rc3RlbGxlPGJyLz5cIik7aWYoXCJjaGFyZ2luZ19zdGF0aW9uXCI9PWIuYW1lbml0eSl7dmFyIGE9YStcIkxhZGVzdGF0aW9uIC8gU3Ryb210YW5rc3RlbGxlPGJyLz5cIixjPWIudm9sdGFnZTtpZihiLmNhcil7c3dpdGNoKGIuY2FyKXtjYXNlIFwieWVzXCI6YSs9XG4gICAgICAgIFwiRlxcdTAwZmNyIEF1dG9zOiBKYVwiO2JyZWFrO2Nhc2UgXCJub1wiOmErPVwiRlxcdTAwZmNyIEF1dG9zOiBOZWluXCI7YnJlYWs7ZGVmYXVsdDphKz1cIkZcXHUwMGZjciBBdXRvczogVW5iZWthbm50XCJ9YSs9XCI8YnIvPlwifWVsc2UgYSs9XCJGXFx1MDBmY3IgQXV0b3M6IFVuYmVrYW5udDxici8+XCI7aWYoYi5iaWN5Y2xlKXtzd2l0Y2goYi5iaWN5Y2xlKXtjYXNlIFwieWVzXCI6YSs9XCJGXFx1MDBmY3IgRS1CaWtlOiBKYVwiO2JyZWFrO2Nhc2UgXCJub1wiOmErPVwiRlxcdTAwZmNyIEUtQmlrZTogTmVpblwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJGXFx1MDBmY3IgRS1CaWtlOiBVbmJla2FubnRcIn1hKz1cIjxici8+XCJ9ZWxzZSBhKz1cIkZcXHUwMGZjciBFLUJpa2U6IFVuYmVrYW5udDxici8+XCI7XCJub1wiPT1iW1wic29ja2V0OnNjaHVrb1wiXSYmKGErPVwiU3RlY2tlciBTY2h1a286IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OnNjaHVrb1wiXSYmKGErPVwiU3RlY2tlciBTY2h1a286IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OmNlZV9ibHVlXCJdJiZcbiAgICAoYSs9XCJTdGVja2VyIENFRSBCbGF1OiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDpjZWVfYmx1ZVwiXSYmKGErPVwiU3RlY2tlciBDRUUgQmxhdTogSmE8YnIvPlwiKTtcIm5vXCI9PWJbXCJzb2NrZXQ6Y2VlX3JlZF8xNmFcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIFJvdCAxNmE6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OmNlZV9yZWRfMTZhXCJdJiYoYSs9XCJTdGVja2VyIENFRSBSb3QgMTZhOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDpjZWVfcmVkXzMyYVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDMyYTogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6Y2VlX3JlZF8zMmFcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIFJvdCAzMmE6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OmNlZV9yZWRfNjRhXCJdJiYoYSs9XCJTdGVja2VyIENFRSBSb3QgNjRhOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDpjZWVfcmVkXzY0YVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDY0YTogSmE8YnIvPlwiKTtcbiAgICAgICAgXCJub1wiPT1iW1wic29ja2V0OmNlZV9yZWRfMTI1YVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDEyNWE6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OmNlZV9yZWRfMTI1YVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDEyNWE6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0Om5lbWFfNV8xNVwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDUgMTU6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0Om5lbWFfNV8xNVwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDUgMTU6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0Om5lbWFfNV8yMFwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDUgMjA6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0Om5lbWFfNV8yMFwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDUgMjA6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0Om5lbWFfMTRfMzBcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSAxNCAzMDogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6bmVtYV8xNF8zMFwiXSYmKGErPVxuICAgICAgICAgICAgXCJTdGVja2VyIE5lbWEgMTQgMzA6IEphPGJyLz5cIik7XCJOZWluXCI9PWJbXCJzb2NrZXQ6bmVtYV8xNF81MFwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDE0ICA1MDogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6bmVtYV8xNF81MFwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDE0IDUwOiBKYTxici8+XCIpO1wibmVpblwiPT1iW1wic29ja2V0OmJzMTM2M1wiXSYmKGErPVwiU3RlY2tlciBCUyAxMzYzOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDpiczEzNjNcIl0mJihhKz1cIlN0ZWNrZXIgQlMgMTM2MzogSmE8YnIvPlwiKTtcIm5vXCI9PWJbXCJzb2NrZXQ6dHlwZTFcIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDE6TmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6dHlwZTFcIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDE6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OnR5cGUxX2NvbWJvXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAxIEtvbWJvOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDp0eXBlMV9jb21ib1wiXSYmXG4gICAgICAgIChhKz1cIlN0ZWNrZXIgVHlwIDEgS29tYm86IEphPGJyLz5cIik7XCJOZWluXCI9PWJbXCJzb2NrZXQ6dHlwZTJcIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDI6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OnR5cGUyXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAyOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDp0eXBlMl9jb21ib1wiXSYmKGErPVwiU3RlY2tlciBUeXAgMiBLb21ibzogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6dHlwZTJfY29tYm9cIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDIgS29tYm86IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OnR5cGUzXCJdJiYoYSs9XCJTdGVja2VyIFR5cDogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6dHlwZTNcIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDM6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OmNoYWRlbW9cIl0mJihhKz1cIlN0ZWNrZXIgQ0hBZGVNTzogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6Y2hhZGVtb1wiXSYmKGErPVwiU3RlY2tlciBDSEFkZU1POiBKYTxici8+XCIpO1xuICAgICAgICBcIm5vXCI9PWJbXCJzb2NrZXQ6bWFnbmVfY2hhcmdlXCJdJiYoYSs9XCJTdGVja2VyIE1hZ25lIDogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6bWFnbmVfY2hhcmdlXCJdJiYoYSs9XCJTdGVja2VyIE1hZ25lIDogSmE8YnIvPlwiKTtcIm5vXCI9PWJbXCJzb2NrZXQ6dGVzbGFfc3RhbmRhcmRcIl0mJihhKz1cIlN0ZWNrZXIgVGVzbGEgU3RhbmRhcmQ6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OnRlc2xhX3N0YW5kYXJkXCJdJiYoYSs9XCJTdGVja2VyIFRlc2xhIFN0YW5kYXJkOiBOZWluPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OnRlc2xhX3N1cGVyY2hhcmdlXCJdJiYoYSs9XCJTdGVja2VyIFRlc2xhIFNjaG5lbGxsYWRlc3RhdGlvbjogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6dGVzbGFfc3VwZXJjaGFyZ2VcIl0mJihhKz1cIlN0ZWNrZXIgVGVzbGEgU2NobmVsbGxhZGVzdGF0aW9uOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDp0ZXNsYV9yb2Fkc3RlclwiXSYmKGErPVwiU3RlY2tlciBUZXNsYSBSb2Fkc3RlcjogTmVpbjxici8+XCIpO1xuICAgICAgICBcInllc1wiPT1iW1wic29ja2V0OnRlc2xhX3JvYWRzdGVyXCJdJiYoYSs9XCJTdGVja2VyIFRlc2xhIFJvYWRzdGVyOiBKYTxici8+XCIpO2JbXCJzb2NrZXQ6c2NodWtvXCJdJiYoYSs9XCJTdGVja2VyIFNjaHVrbzogXCIrYltcInNvY2tldDpzY2h1a29cIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmNlZV9ibHVlXCJdJiYoYSs9XCJTdGVja2VyIENFRSBCbGF1OiBcIitiW1wic29ja2V0OmNlZV9ibHVlXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfcmVkXzE2YVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDE2YTogXCIrYltcInNvY2tldDpjZWVfcmVkXzE2YVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6Y2VlX3JlZF8zMmFcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIFJvdCAzMmE6IFwiK2JbXCJzb2NrZXQ6Y2VlX3JlZF8zMmFcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmNlZV9yZWRfNjRhXCJdJiYoYSs9XCJTdGVja2VyIENFRSBSb3QgNjRhOiBcIitiW1wic29ja2V0OmNlZV9yZWRfNjRhXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfcmVkXzEyNWFcIl0mJlxuICAgICAgICAoYSs9XCJTdGVja2VyIENFRSBSb3QgMTI1YTogXCIrYltcInNvY2tldDpjZWVfcmVkXzEyNWFcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om5lbWFfNV8xNVwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDUgMTU6IFwiK2JbXCJzb2NrZXQ6bmVtYV81XzE1XCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpuZW1hXzVfMjBcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSA1IDIwOiBcIitiW1wic29ja2V0Om5lbWFfNV8yMFwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6bmVtYV8xNF8zMFwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDE0IDMwOiBcIitiW1wic29ja2V0Om5lbWFfMTRfMzBcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om5lbWFfMTRfNTBcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSAxNCA1MDogXCIrYltcInNvY2tldDpuZW1hXzE0XzUwXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpiczEzNjNcIl0mJihhKz1cIlN0ZWNrZXIgQlMgMTM2MzogXCIrYltcInNvY2tldDpiczEzNjNcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OnR5cGUxXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAxOiBcIitcbiAgICAgICAgICAgIGJbXCJzb2NrZXQ6dHlwZTFcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OnR5cGUxX2NvbWJvXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAxIEtvbWJvOiBcIitiW1wic29ja2V0OnNjaHVrb1wiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dHlwZTJcIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDI6IFwiK2JbXCJzb2NrZXQ6dHlwZTJcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OnR5cGUyX2NvbWJvXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAyIEtvbWJvOiBcIitiW1wic29ja2V0OnR5cGUyX2NvbWJvXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlM1wiXSYmKGErPVwiU3RlY2tlciBUeXAgMzogXCIrYltcInNvY2tldDp0eXBlM1wiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6Y2hhZGVtb1wiXSYmKGErPVwiU3RlY2tlciBDSEFkZU1POiBcIitiW1wic29ja2V0OmNoYWRlbW9cIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om1hZ25lX2NoYXJnZVwiXSYmKGErPVwiU3RlY2tlciBNYWduZSA6IFwiK2JbXCJzb2NrZXQ6bWFnbmVfY2hhcmdlXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0ZXNsYV9zdGFuZGFyZFwiXSYmXG4gICAgICAgIChhKz1cIlN0ZWNrZXIgVGVzbGEgU3RhbmRhcmQ6IFwiK2JbXCJzb2NrZXQ6dGVzbGFfc3RhbmRhcmRcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OnRlc2xhX3N1cGVyY2hhcmdlXCJdJiYoYSs9XCJTdGVja2VyIFRlc2xhIFNjaG5lbGxsYWRlc3RhdGlvbjogXCIrYltcInNvY2tldDp0ZXNsYV9zdXBlcmNoYXJnZVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dGVzbGFfcm9hZHN0ZXJcIl0mJihhKz1cIlN0ZWNrZXIgVGVzbGEgUm9hZHN0ZXI6IFwiK2JbXCJzb2NrZXQ6dGVzbGFfcm9hZHN0ZXJcIl0rXCI8YnIvPlwiKTthKz1cIjxici8+XCI7Yi52b2x0YWdlJiYoYSs9XCJWb2x0OiBcIitjK1wiPGJyLz5cIil9XCJ5ZXNcIj09Yi50dW5uZWwmJihhKz1cIlR1bm5lbDxici8+XCIpO2lmKGIuYnJpZGdlKXN3aXRjaChhKz1cIkJyXFx1MDBmY2NrZW4tVHlwOiBcIixiLmJyaWRnZSl7Y2FzZSBcInN3aW5nXCI6YSs9XCJEcmVoYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcImFxdWVkdWN0XCI6YSs9XCJIaXN0b3Jpc2NoZSBXYXNzZXJwaXBlbGluZVwiO2JyZWFrO1xuICAgICAgICBjYXNlIFwiYmFzY3VsZVwiOmErPVwiS2xhcHAgYnp3LiBXaXBwYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcImJvYXJkd2Fsa1wiOmErPVwiQm9obGVud2VnXCI7YnJlYWs7Y2FzZSBcImNhbnRpbGV2ZXJcIjphKz1cIkF1c2xlZ2VyYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcImNvdmVyZWRcIjphKz1cImdlZGVja3RlIEJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJkcmF3YnJpZGdlXCI6YSs9XCJLbGFwcGJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJodW1wYmFja1wiOmErPVwiRHJlaGJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJsaWZ0XCI6YSs9XCJIdWJiclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwibG93X3dhdGVyX2Nyb3NzaW5nXCI6YSs9XCJJcmlzY2hlIEJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJtb3ZlYWJsZVwiOmErPVwiQmV3ZWdsaWNoZSBCclxcdTAwZmNja2VuXCI7YnJlYWs7Y2FzZSBcInBvbnRvb25cIjphKz1cIlNjaHdpbW1iclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwic3VzcGVuc2lvblwiOmErPVwiSFxcdTAwZTRuZ2ViclxcdTAwZmNja2VcIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJ0cmVzdGxlXCI6YSs9XCJUcmVzdGxlLUJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJ2aWFkdWN0XCI6YSs9XCJWaWFkdWt0XCJ9aWYoYltcImJyaWRnZTptb3ZhYmxlXCJdKXN3aXRjaChiW1wiYnJpZGdlOm1vdmFibGVcIl0pe2Nhc2UgXCJzd2luZ1wiOmErPVwiRHJlaGJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJiYXNjdWxlXCI6YSs9XCJLbGFwcCBiencuIFdpcHBiclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwiZHJhd2JyaWRnZVwiOmErPVwiS2xhcHBiclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwibGlmdFwiOmErPVwiSHViYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcInN1Ym1lcnNpYmxlXCI6YSs9XCJTZW5rYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcInRyYW5zcG9ydGVyXCI6YSs9XCJTY2h3ZWJlZlxcdTAwZTRocmVcIjticmVhaztjYXNlIFwicmV0cmFjdGFibGVcIjphKz1cIlNjaHViYnJcXHUwMGZjY2tlXCJ9aWYoXCJudXJzaW5nX2hvbWVcIj09Yi5hbWVuaXR5fHxcInJldGlyZW1lbnRfaG9tZVwiPT1iLmFtZW5pdHkpYSs9XG4gICAgICAgIFwiU2VuaW9yZW5oZWltIC8gUGZsZWdlaGVpbTxici8+XCI7XCJzb2NpYWxfZmFjaWxpdHlcIj09Yi5hbWVuaXR5JiYoYSs9XCJBbGxnLiBzb3ppYWxlIEVpbnJpY2h0dW5nPGJyLz5cIik7aWYoYi5zb2NpYWxfZmFjaWxpdHkpe1wiZ3JvdXBfaG9tZVwiPT1iLnNvY2lhbF9mYWNpbGl0eSYmXCJzZW5pb3JcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cIlNlbmlvcmVuaGVpbTxici8+XCIpO1wiYXNzaXN0ZWRfbGl2aW5nXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJCZXRyZXV0ZXMgV29obmVuPGJyLz5cIik7XCJvdXRyZWFjaFwiPT1iLnNvY2lhbF9mYWNpbGl0eSYmKGErPVwiQmVyYXR1bmdzc3RlbGxlPGJyLz5cIik7XCJ3b3Jrc2hvcFwiPT1iLnNvY2lhbF9mYWNpbGl0eSYmKGErPVwic296aWFsZSBXZXJrc3RhdHQ8YnIvPlwiKTtpZihcImFtYnVsYXRvcnlfY2FyZVwiPT1iLnNvY2lhbF9mYWNpbGl0eXx8XCJoZWFsdGhjYXJlXCI9PWIuc29jaWFsX2ZhY2lsaXR5KWErPVwiQW1idWxhbnRlciBQZmxlZ2VkaWVuc3Q8YnIvPlwiO1xuICAgICAgICBcInNoZWx0ZXJcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJlwic2VuaW9yXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJUYWdlcy0gdS4gS3VyenplaXRwZmxlZ2U8YnIvPlwiKTtcInNoZWx0ZXJcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJlwiYWJ1c2VkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJOb3R1bnRlcmt1bmZ0PGJyLz5cIik7XCJmb29kX2JhbmtcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJihhKz1cIkxlYmVuc21pdHRlbGhpbGZlPGJyLz5cIik7XCJob3NwaWNlXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJIb3NwaXo8YnIvPlwiKX1iLmJyZXdlcnkmJihhKz1cIkF1c2dlc2NoZW5rdGUgQmllcnNvcnRlbjogXCIrYi5icmV3ZXJ5K1wiPGJyLz5cIik7XCJhbGNvaG9sXCI9PWIuc2hvcCYmKGErPVwiU3Bpcml0dW9zZW5sYWRlbjxici8+XCIpO1wiYmFrZXJ5XCI9PWIuc2hvcCYmKGErPVwiQlxcdTAwZTRja2VyZWk8YnIvPlwiKTtcImJldmVyYWdlc1wiPT1iLnNob3AmJihhKz1cIkdldHJcXHUwMGU0bmtlaGFuZGVsPGJyLz5cIik7XG4gICAgXCJidXRjaGVyXCI9PWIuc2hvcCYmKGErPVwiRmxlaXNjaGVyZWk8YnIvPlwiKTtcImNoZWVzZVwiPT1iLnNob3AmJihhKz1cIktcXHUwMGU0c2VmYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcImNob2NvbGF0ZVwiPT1iLnNob3AmJihhKz1cIlNjaG9rb2xhZGVuZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJjb2ZmZWVcIj09Yi5zaG9wJiYoYSs9XCJLYWZmZWVmYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcImNvbmZlY3Rpb25lcnlcIj09Yi5zaG9wJiYoYSs9XCJTXFx1MDBmY1xcdTAwZGZ3YXJlbmxhZGVuPGJyLz5cIik7XCJjb252ZW5pZW5jZVwiPT1iLnNob3AmJihhKz1cIkxlYmVuc21pdHRlbGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJkZWxpXCI9PWIuc2hvcCYmKGErPVwiRmVpbmtvc3RsYWRlbjxici8+XCIpO1wiZGFpcnlcIj09Yi5zaG9wJiYoYSs9XCJNaWxjaGxhZGVuPGJyLz5cIik7XCJmYXJtXCI9PWIuc2hvcCYmKGErPVwiSG9mbGFkZW48YnIvPlwiKTtcImdyZWVuZ3JvY2VyXCI9PWIuc2hvcCYmKGErPVwiR2VtXFx1MDBmY3NlaFxcdTAwZTRuZGxlcjxici8+XCIpO1xuICAgIFwiZ3JvY2VyeVwiPT1iLnNob3AmJihhKz1cIkxlYmVuc21pdHRlbGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJvcmdhbmljXCI9PWIuc2hvcCYmKGErPVwiQmlvLUxhZGVuLCBSZWZvcm1oYXVzPGJyLz5cIik7XCJwYXN0YVwiPT1iLnNob3AmJihhKz1cIlBhc3RhZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcInNlYWZvb2RcIj09Yi5zaG9wJiYoYSs9XCJGaXNjaGZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1widGVhXCI9PWIuc2hvcCYmKGErPVwiVGVlZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJ3aW5lXCI9PWIuc2hvcCYmKGErPVwiV2VpbmhhbmRsdW5nPGJyLz5cIik7XCJkZXBhcnRtZW50X3N0b3JlXCI9PWIuc2hvcCYmKGErPVwiS2F1ZmhhdXM8YnIvPlwiKTtcImdlbmVyYWxcIj09Yi5zaG9wJiYoYSs9XCJHZW1pc2NodHdhcmVuaGFuZGx1bmc8YnIvPlwiKTtcImtpb3NrXCI9PWIuc2hvcCYmKGErPVwiS2lvc2s8YnIvPlwiKTtcIm1hbGxcIj09Yi5zaG9wJiYoYSs9XCJFaW5rYXVmc3plbnRydW08YnIvPlwiKTtcInN1cGVybWFya2V0XCI9PWIuc2hvcCYmXG4gICAgKGErPVwiU3VwZXJtYXJrdDxici8+XCIpO1wiYmFieV9nb29kc1wiPT1iLnNob3AmJihhKz1cIkJhYnlmYWNobWFya3Q8YnIvPlwiKTtcImJhZ1wiPT1iLnNob3AmJihhKz1cIlRhc2NoZW4gdW5kIEtvZmZlcjxici8+XCIpO1wiYm91dGlxdWVcIj09Yi5zaG9wJiYoYSs9XCJCb3V0aXF1ZTxici8+XCIpO1wiY2xvdGhlc1wiPT1iLnNob3AmJihhKz1cIkJla2xlaWR1bmc8YnIvPlwiKTtcImZhYnJpY1wiPT1iLnNob3AmJihhKz1cIlRleHRpbGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJmYXNoaW9uXCI9PWIuc2hvcCYmKGErPVwiRmFzaGlvbjxici8+XCIpO1wiamV3ZWxyeVwiPT1iLnNob3AmJihhKz1cIkp1d2VsaWVyPGJyLz5cIik7XCJsZWF0aGVyXCI9PWIuc2hvcCYmKGErPVwiTGVkZXJ3YXJlbjxici8+XCIpO1wic2hvZXNcIj09Yi5zaG9wJiYoYSs9XCJTY2h1aGZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1widmFyaWV0eV9zdG9yZVwiPT1iLnNob3AmJihhKz1cIkVpbi1FdXJvLUxhZGVuPGJyLz5cIik7XCJjaGVtaXN0XCI9PWIuc2hvcCYmKGErPVwiRHJvZ2VyaWU8YnIvPlwiKTtcbiAgICBcImNvc21ldGljc1wiPT1iLnNob3AmJihhKz1cIktvc21ldGlrZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJkcnVnc3RvcmVcIj09Yi5zaG9wJiYoYSs9XCJEcm9nZXJpZSBvZGVyIEFwb3RoZWtlICh2ZXJhbHRldCk8YnIvPlwiKTtcInBlcmZ1bWVyeVwiPT1iLnNob3AmJihhKz1cIlBhcmZcXHUwMGZjbWVyaWU8YnIvPlwiKTtcImVyb3RpY1wiPT1iLnNob3AmJihhKz1cIkVyb3Rpa2hhbmRlbDxici8+XCIpO1wiaGFpcmRyZXNzZXJcIj09Yi5zaG9wJiYoYSs9XCJGcmlzZXVyPGJyLz5cIik7XCJoZWFyaW5nX2FpZHNcIj09Yi5zaG9wJiYoYSs9XCJIXFx1MDBmNnJnZXJcXHUwMGU0dGU8YnIvPlwiKTtcImhlcmJhbGlzdFwiPT1iLnNob3AmJihhKz1cIktyXFx1MDBlNHV0ZXJoYW5kZWw8YnIvPlwiKTtcIm1hc3NhZ2VcIj09Yi5zaG9wJiYoYSs9XCJNYXNzYWdlc2Fsb248YnIvPlwiKTtcIm1lZGljYWxfc3VwcGx5XCI9PWIuc2hvcCYmKGErPVwiU2FuaXRcXHUwMGU0dHNoYXVzPGJyLz5cIik7XCJvcHRpY2lhblwiPT1iLnNob3AmJihhKz1cIk9wdGlrZXI8YnIvPlwiKTtcbiAgICBcInRhdHRvb1wiPT1iLnNob3AmJihhKz1cIlRcXHUwMGU0dG93aWVyZXI8YnIvPlwiKTtcImJhdGhyb29tX2Z1cm5pc2hpbmdcIj09Yi5zaG9wJiYoYSs9XCJCYWRtXFx1MDBmNmJlbCB1bmQgLWFjY2Vzc29pcmVzPGJyLz5cIik7XCJkb2l0eW91cnNlbGZcIj09Yi5zaG9wJiYoYSs9XCJCYXVtYXJrdC9CYXVzdG9mZmhhbmRlbDxici8+XCIpO1wiZW5lcmd5XCI9PWIuc2hvcCYmKGErPVwiRW5lcmdpZWhhbmRlbDxici8+XCIpO1wiZmxvcmlzdFwiPT1iLnNob3AmJihhKz1cIkJsdW1lbmdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJmdXJuYWNlXCI9PWIuc2hvcCYmKGErPVwiT2ZlbmZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1wiZ2FyZGVuX2NlbnRyZVwiPT1iLnNob3AmJihhKz1cIkdhcnRlbmNlbnRlcjxici8+XCIpO1wiZ2FzXCI9PWIuc2hvcCYmKGErPVwiRmFjaGdlc2NoXFx1MDBlNGZ0IGZcXHUwMGZjciB0ZWNobmlzY2hlIEdhc2U8YnIvPlwiKTtcImdsYXppZXJ5XCI9PWIuc2hvcCYmKGErPVwiR2xhc2VyZWk8YnIvPlwiKTtcImhhcmR3YXJlXCI9PVxuICAgIGIuc2hvcCYmKGErPVwiRWlzZW53YXJlbjxici8+XCIpO1wiaG91c2V3YXJlXCI9PWIuc2hvcCYmKGErPVwiSGF1c2hhbHRzd2FyZW4gdW5kIElubmVuZWlucmljaHR1bmc8YnIvPlwiKTtcImxvY2tzbWl0aFwiPT1iLnNob3AmJihhKz1cIlNjaGxcXHUwMGZjc3NlbGRpZW5zdDxici8+XCIpO1wicGFpbnRcIj09Yi5zaG9wJiYoYSs9XCJGYXJiZW5mYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcInRyYWRlXCI9PWIuc2hvcCYmKGErPVwiQmF1c3RvZmZoYW5kZWw8YnIvPlwiKTtcImFudGlxdWVzXCI9PWIuc2hvcCYmKGErPVwiQW50aXF1aXRcXHUwMGU0dGVuPGJyLz5cIik7XCJiZWRcIj09Yi5zaG9wJiYoYSs9XCJCZXR0ZW4tIHVuZCBNYXRyYXR6ZW5nZXNjaFxcdTAwZTRmdDxici8+XCIpO1wiY2FuZGxlc1wiPT1iLnNob3AmJihhKz1cIktlcnplbmdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJjYXJwZXRcIj09Yi5zaG9wJiYoYSs9XCJUZXBwaWNoZmFjaGhhbmRlbDxici8+XCIpO1wiY3VydGFpblwiPT1iLnNob3AmJihhKz1cIkdhcmRpbmVuZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XG4gICAgXCJmdXJuaXR1cmVcIj09Yi5zaG9wJiYoYSs9XCJNXFx1MDBmNmJlbC0gdW5kIEVpbnJpY2h0dW5nc2hhdXM8YnIvPlwiKTtcImludGVyaW9yX2RlY29yYXRpb25cIj09Yi5zaG9wJiYoYSs9XCJJbm5lbmRla29yYXRpb24gLyBSYXVtYXVzc3RhdHR1bmc8YnIvPlwiKTtcImtpdGNoZW5cIj09Yi5zaG9wJiYoYSs9XCJLXFx1MDBmY2NoZW48YnIvPlwiKTtcIndpbmRvd19ibGluZFwiPT1iLnNob3AmJihhKz1cIkphbG91c2llbiB1bmQgUm9sbFxcdTAwZTRkZW48YnIvPlwiKTtcImNvbXB1dGVyXCI9PWIuc2hvcCYmKGErPVwiQ29tcHV0ZXItRmFjaGhcXHUwMGU0bmRsZXI8YnIvPlwiKTtcImVsZWN0cm9uaWNzXCI9PWIuc2hvcCYmKGErPVwiRWxla3Ryb25pa21hcmt0PGJyLz5cIik7XCJoaWZpXCI9PWIuc2hvcCYmKGErPVwiSGlmaS1GYWNoaFxcdTAwZTRuZGxlcjxici8+XCIpO1wibW9iaWxlX3Bob25lXCI9PWIuc2hvcCYmKGErPVwiSGFuZHktU2hvcDxici8+XCIpO1wicmFkaW90ZWNobmljc1wiPT1iLnNob3AmJihhKz1cIlJhZGlvLSB1bmQgRmVybnNlaHRlY2huaWs8YnIvPlwiKTtcbiAgICBcInZhY3V1bV9jbGVhbmVyXCI9PWIuc2hvcCYmKGErPVwiU3RhdWJzYXVnZXJmYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcImJpY3ljbGVcIj09Yi5zaG9wJiYoYSs9XCJGYWhycmFkZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJjYXJcIj09Yi5zaG9wJiYoYSs9XCJBdXRvaGF1czxici8+XCIpO1wiY2FyX3JlcGFpclwiPT1iLnNob3AmJihhKz1cIkF1dG93ZXJrc3RhdHQ8YnIvPlwiKTtcImNhcl9wYXJ0c1wiPT1iLnNob3AmJihhKz1cIkF1dG90ZWlsZWZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO2lmKFwiZGl2ZVwiPT1iLnNob3B8fFwic2N1YmFfZGl2aW5nXCI9PWIuc2hvcClhKz1cIlRhdWNoYXVzclxcdTAwZmNzdHVuZzxici8+XCI7XCJmaXNoaW5nXCI9PWIuc2hvcCYmKGErPVwiQW5nZWxmYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcImZyZWVfZmx5aW5nXCI9PWIuc2hvcCYmKGErPVwiRmFsbHNjaGlybWF1c3JcXHUwMGZjc3R1bmc8YnIvPlwiKTtcImh1bnRpbmdcIj09Yi5zaG9wJiYoYSs9XCJKYWdkYXVzclxcdTAwZmNzdHVuZzxici8+XCIpO1xuICAgIFwibW90b3JjeWNsZVwiPT1iLnNob3AmJihhKz1cIk1vdG9ycmFkZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcIm91dGRvb3JcIj09Yi5zaG9wJiYoYSs9XCJUcmVra2luZy0vT3V0ZG9vcmxhZGVuPGJyLz5cIik7XCJzcG9ydHNcIj09Yi5zaG9wJiYoYSs9XCJTcG9ydGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJ0eXJlc1wiPT1iLnNob3AmJihhKz1cIlJlaWZlbmZhY2hoYW5kZWw8YnIvPlwiKTtcIndhdGVyX3Nwb3J0c1wiPT1iLnNob3AmJihhKz1cIldhc3NlcnNwb3J0YmVkYXJmPGJyLz5cIik7XCJhcnRcIj09Yi5zaG9wJiYoYSs9XCJLdW5zdGxhZGVuPGJyLz5cIik7XCJjcmFmdFwiPT1iLnNob3AmJihhKz1cIkt1bnN0aGFuZHdlcms8YnIvPlwiKTtcImZyYW1lXCI9PWIuc2hvcCYmKGErPVwiQmlsZGVycmFobWVuZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcIm11c2ljXCI9PWIuc2hvcCYmKGErPVwiTXVzaWtnZXNjaFxcdTAwZTRmdDxici8+XCIpO1wibXVzaWNfaW5zdHJ1bWVudFwiPT1iLnNob3AmJihhKz1cIk11c2lraGF1czxici8+XCIpO1wicGhvdG9cIj09XG4gICAgYi5zaG9wJiYoYSs9XCJGb3RvZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJ2aWRlb1wiPT1iLnNob3AmJihhKz1cIlZpZGVvdGhlazxici8+XCIpO1widmlkZW9fZ2FtZXNcIj09Yi5zaG9wJiYoYSs9XCJWaWRlb3NwaWVsZTxici8+XCIpO1wiYW5pbWVcIj09Yi5zaG9wJiYoYSs9XCJBbmltZTxici8+XCIpO1wiYm9va3NcIj09Yi5zaG9wJiYoYSs9XCJCdWNoaGFuZGx1bmc8YnIvPlwiKTtcImdpZnRcIj09Yi5zaG9wJiYoYSs9XCJBbmRlbmtlbiwgUmVpc2VtaXRicmluZ3NlbCwgU291dmVuaWVyc2hvcDxici8+XCIpO1wibmV3c2FnZW50XCI9PWIuc2hvcCYmKGErPVwiWmVpdHVuZ3NoXFx1MDBlNG5kbGVyPGJyLz5cIik7XCJzdGF0aW9uZXJ5XCI9PWIuc2hvcCYmKGErPVwiU2NocmVpYndhcmVuPGJyLz5cIik7XCJ0aWNrZXRcIj09Yi5zaG9wJiYoYSs9XCJUaWNrZXRzaG9wPGJyLz5cIik7XCJjb3B5c2hvcFwiPT1iLnNob3AmJihhKz1cIktvcGllcmxhZGVuPGJyLz5cIik7XCJmdW5lcmFsX2RpcmVjdG9yc1wiPT1iLnNob3AmJihhKz1cIkJlc3RhdHR1bmdzdW50ZXJuZWhtZW48YnIvPlwiKTtcbiAgICBcImxhdW5kcnlcIj09Yi5zaG9wJiYoYSs9XCJXYXNjaHNhbG9uIC8gV1xcdTAwZTRzY2hlcmVpPGJyLz5cIik7XCJkcnlfY2xlYW5pbmdcIj09Yi5zaG9wJiYoYSs9XCJjaGVtaXNjaGUgUmVpbmlndW5nPGJyLz5cIik7XCJtb25leV9sZW5kZXJcIj09Yi5zaG9wJiYoYSs9XCJHZWxkdmVybGVpaGVyPGJyLz5cIik7XCJwYXduYnJva2VyXCI9PWIuc2hvcCYmKGErPVwiUGZhbmRoYXVzIC8gUGZhbmRsZWloZXI8YnIvPlwiKTtcInBldFwiPT1iLnNob3AmJihhKz1cIlpvby0gdW5kIFRpZXJoYW5kbHVuZzxici8+XCIpO1wicHlyb3RlY2huaWNzXCI9PWIuc2hvcCYmKGErPVwiRmV1ZXJ3ZXJrPGJyLz5cIik7XCJyZWxpZ2lvblwiPT1iLnNob3AmJihhKz1cIlJlbGlnaVxcdTAwZjZzZSBBcnRpa2VsPGJyLz5cIik7XCJiZWF1dHlcIj09Yi5zaG9wJiYoYSs9XCJTY2hcXHUwMGY2bmhlaXRzc2Fsb248YnIvPlwiKTtcInNvbGFyaXVtXCI9PWIuc2hvcCYmKGErPVwiU29sYXJpdW08YnIvPlwiKTtcInRvYmFjY29cIj09Yi5zaG9wJiYoYSs9XCJUYWJha3dhcmVuPGJyLz5cIik7XG4gICAgXCJ0b3lzXCI9PWIuc2hvcCYmKGErPVwiU3BpZWx3YXJlbjxici8+XCIpO1widHJhdmVsX2FnZW5jeVwiPT1iLnNob3AmJihhKz1cIlJlaXNlYlxcdTAwZmNybzxici8+XCIpO1wibWFya2V0X2hhbGxcIj09Yi5zaG9wJiYoYSs9XCJNYXJrdGhhbGxlPGJyLz5cIik7XCJ2YWNhbnRcIj09Yi5zaG9wJiYoYSs9XCJsZWVyc3RlaGVuZGVzIExhZGVubG9rYWw8YnIvPlwiKTtcIndlYXBvbnNcIj09Yi5zaG9wJiYoYSs9XCJXYWZmZW5sYWRlbjxici8+XCIpO1wibG90dGVyeVwiPT1iLmdhbWJsaW5nJiYoYSs9XCJMb3R0b2FubmFobWVzdGVsbGU8YnIvPlwiKTtcImZpc2hcIj09Yi5wZXQmJihhKz1cIkFxdWFyaXN0aWs8YnIvPlwiKTtcImFncml1Y3VsdHVyYWxfZW5naW5lc1wiPT1iLmNyYWZ0JiYoYSs9XCJMYW5kbWFzY2hpbmVuYmF1PGJyLz5cIik7XCJiYXNrZXRfbWFrZXJcIj09Yi5jcmFmdCYmKGErPVwiS29yYm1hY2hlcjxici8+XCIpO1wiYmVla2VlcGVyXCI9PWIuY3JhZnQmJihhKz1cIklta2VyPGJyLz5cIik7XCJibGFja3NtaXRoXCI9PWIuY3JhZnQmJlxuICAgIChhKz1cIlNjaG1pZWQ8YnIvPlwiKTtcImJyZXdlcnlcIj09Yi5jcmFmdCYmKGErPVwiQnJhdWVyZWk8YnIvPlwiKTtcInllc1wiPT1iLm1pY3JvYnJld2VyeSYmKGErPVwiSGF1c2JyYXVlcmVpPGJyLz5cIik7XCJib2F0YnVpbGRlclwiPT1iLmNyYWZ0JiYoYSs9XCJCb290c2JhdWVyPGJyLz5cIik7XCJib29rYmluZGVyXCI9PWIuY3JhZnQmJihhKz1cIkJ1Y2hiaW5kZXI8YnIvPlwiKTtcImJ1aWxkZXJcIj09Yi5jcmFmdCYmKGErPVwiSGF1c2JhdTxici8+XCIpO1wiY2FycGVudGVyXCI9PWIuY3JhZnQmJihhKz1cIlRpc2NobGVyL1NjaHJlaW5lciwgWmltbWVybWFubjxici8+XCIpO1wiY2FycGV0X2xheWVyXCI9PWIuY3JhZnQmJihhKz1cIlRlcHBpY2hsZWdlcjxici8+XCIpO1wiY2F0ZXJlclwiPT1iLmNyYWZ0JiYoYSs9XCJDYXRlcmluZzxici8+XCIpO1wiY2xvY2ttYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJVaHJtYWNoZXI8YnIvPlwiKTtcImNvbmZlY3Rpb25lcnlcIj09Yi5jcmFmdCYmKGErPVwiS29uZGl0b3JlaTxici8+XCIpO1wiZHJlc3NtYWtlclwiPT1cbiAgICBiLmNyYWZ0JiYoYSs9XCJTY2huZWlkZXI8YnIvPlwiKTtcImVsZWN0cmljaWFuXCI9PWIuY3JhZnQmJihhKz1cIkVsZWt0cmlrZXI8YnIvPlwiKTtcImdhcmRlbmVyXCI9PWIuY3JhZnQmJihhKz1cIkdhcnRlbi0gdW5kIExhbmRzY2hhZnRzYmF1ZXI8YnIvPlwiKTtcImdsYXppZXJ5XCI9PWIuY3JhZnQmJihhKz1cIkdsYXNlcmVpPGJyLz5cIik7XCJoYW5kaWNyYWZ0XCI9PWIuY3JhZnQmJihhKz1cIkhhbmR3ZXJrc2t1bnN0PGJyLz5cIik7XCJodmFjXCI9PWIuY3JhZnQmJihhKz1cIktcXHUwMGU0bHRlYW5sYWdlbmJhdWVyIGZcXHUwMGZjciBMXFx1MDBmY2Z0dW5ncy0sIEhlaXp1bmdzLSB1bmQgS2xpbWF0ZWNobmlrPGJyLz5cIik7XCJpbnN1bGF0aW9uXCI9PWIuY3JhZnQmJihhKz1cIldcXHUwMGU0cm1lZFxcdTAwZTRtbXVuZyB2b24gR2ViXFx1MDBlNHVkZW48YnIvPlwiKTtcImpld2VsbGVyXCI9PWIuY3JhZnQmJihhKz1cIkp1d2VsaWVyLCBHb2xkLS9TaWxiZXItU2NobWllZDxici8+XCIpO1wia2V5X2N1dHRlclwiPT1iLmNyYWZ0JiYoYSs9XG4gICAgICAgIFwiU2NobFxcdTAwZmNzc2VsbWFjaGVyPGJyLz5cIik7XCJsb2Nrc21pdGhcIj09Yi5jcmFmdCYmKGErPVwiU2NobFxcdTAwZmNzc2VsZGllbnN0PGJyLz5cIik7XCJtZXRhbF9jb25zdHJ1Y3Rpb25cIj09Yi5jcmFmdCYmKGErPVwiTWV0YWxsYmF1ZXI8YnIvPlwiKTtcIm9wdGljaWFuXCI9PWIuY3JhZnQmJihhKz1cIk9wdGlrZXI8YnIvPlwiKTtcInBhaW50ZXJcIj09Yi5jcmFmdCYmKGErPVwiTWFsZXI8YnIvPlwiKTtcInBhcnF1ZXRfbGF5ZXJcIj09Yi5jcmFmdCYmKGErPVwiUGFya2V0dHZlcmxlZ2VyPGJyLz5cIik7XCJwaG90b2dyYXBoZXJcIj09Yi5jcmFmdCYmKGErPVwiRm90b2dyYWY8YnIvPlwiKTtcInBob3RvZ3JhcGhpY19sYWJvcmF0b3J5XCI9PWIuY3JhZnQmJihhKz1cIkZvdG9sYWJvcjxici8+XCIpO1wicGxhc3RlcmVyXCI9PWIuY3JhZnQmJihhKz1cIkdpcHNlciwgVmVycHV0emVyLCBTdHVja2F0ZXVyPGJyLz5cIik7XCJwbHVtYmVyXCI9PWIuY3JhZnQmJihhKz1cIkFubGFnZW5tZWNoYW5pa2VyIFNhbml0XFx1MDBlNHItLCBIZWl6dW5ncy0gdW5kIEtsaW1hdGVjaG5pay48YnIvPlwiKTtcbiAgICBcInBvdHRlcnlcIj09Yi5jcmFmdCYmKGErPVwiVFxcdTAwZjZwZmVyZWk8YnIvPlwiKTtcInJpZ2dlclwiPT1iLmNyYWZ0JiYoYSs9XCJSaWdnZW1hY2hlciAoVGFrZWxhZ2UgZlxcdTAwZmNyIFNlZ2Vsc2NoaWZmZSk8YnIvPlwiKTtcInJvb2ZlclwiPT1iLmNyYWZ0JiYoYSs9XCJEYWNoZGVja2VyPGJyLz5cIik7XCJzYWRkbGVyXCI9PWIuY3JhZnQmJihhKz1cIlNhdHRsZXI8YnIvPlwiKTtcInNhaWxtYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJTZWdlbG1hY2hlcjxici8+XCIpO1wic2F3bWlsbFwiPT1iLmNyYWZ0JiYoYSs9XCJIb2x6dmVyYXJiZWl0dW5nc2JldHJpZWI8YnIvPlwiKTtcInNjYWZmb2xkZXJcIj09Yi5jcmFmdCYmKGErPVwiR2VyXFx1MDBmY3N0YmF1ZXI8YnIvPlwiKTtcInNjdWxwdG9yXCI9PWIuY3JhZnQmJihhKz1cIkJpbGRoYXVlcjxici8+XCIpO1wic2hvZW1ha2VyXCI9PWIuY3JhZnQmJihhKz1cIlNjaHVobWFjaGVyPGJyLz5cIik7XCJzdGFuZF9idWlsZGVyXCI9PWIuY3JhZnQmJihhKz1cIk1lc3NlLSAvIFN0YW5kYmF1ZXI8YnIvPlwiKTtcbiAgICBcInN0b25lbWFzb25cIj09Yi5jcmFmdCYmKGErPVwiU3RlaW5tZXR6PGJyLz5cIik7XCJzdW5fcHJvdGVjdGlvblwiPT1iLmNyYWZ0JiYoYSs9XCJSb2xsYWRlbi0gdW5kIEphbG91c2llYmF1ZXI8YnIvPlwiKTtcInN3ZWVwXCI9PWIuY3JhZnQmJihhKz1cIlNjaG9ybnN0ZWluZmVnZXI8YnIvPlwiKTtcInRhaWxvclwiPT1iLmNyYWZ0JiYoYSs9XCJTY2huZWlkZXI8YnIvPlwiKTtcInRpbGVyXCI9PWIuY3JhZnQmJihhKz1cIkZsaWVzZW4tLCBQbGF0dGVuLSB1bmQgTW9zYWlrbGVnZXI8YnIvPlwiKTtcInRpbnNtaXRoXCI9PWIuY3JhZnQmJihhKz1cIlNwZW5nbGVyLCBLbGVtcG5lcjxici8+XCIpO1widXBob2xzdGVyZXJcIj09Yi5jcmFmdCYmKGErPVwiUG9sc3RlcmVyPGJyLz5cIik7XCJ3YXRjaG1ha2VyXCI9PWIuY3JhZnQmJihhKz1cIlVocm1hY2hlcjxici8+XCIpO1wid2luZG93X2NvbnN0cnVjdGlvblwiPT1iLmNyYWZ0JiYoYSs9XCJGZW5zdGVyYmF1ZXI8YnIvPlwiKTtcIm1hY2hpbmVzXCI9PWIucmVudGFsJiYoYSs9XCJNYXNjaGluZW52ZXJsZWloPGJyLz5cIik7XG4gICAgXCJjYXJfcmVudGFsXCI9PWIuYW1lbml0eSYmKGErPVwiQXV0b3ZlcmxlaWg8YnIvPlwiKTtcImFsbG90bWVudHNcIj09Yi5sYW5kdXNlJiYoYSs9XCJTY2hyZWJlcmdhcnRlbjxici8+XCIpO1wiYmFzaW5cIj09Yi5sYW5kdXNlJiYoYSs9XCJSZWdlbndhc3NlcnJcXHUwMGZjY2toYWx0ZWJlY2tlbjxici8+XCIpO1wiYnJvd25maWVsZFwiPT1iLmxhbmR1c2UmJihhKz1cIlZvcmhlciBiZWJhdXRlcyBMYW5kPGJyLz5cIik7XCJjb21tZXJjaWFsXCI9PWIubGFuZHVzZSYmKGErPVwiSW5kdXN0cmllZ2ViaWV0PGJyLz5cIik7XCJjb25zdHJ1Y3Rpb25cIj09Yi5sYW5kdXNlJiYoYSs9XCJCYXVnZWJpZXQ8YnIvPlwiKTtcImZhcm1sYW5kXCI9PWIubGFuZHVzZSYmKGErPVwiQWNrZXJmbFxcdTAwZTRjaGU8YnIvPlwiKTtcImZhcm15YXJkXCI9PWIubGFuZHVzZSYmKGErPVwibGFuZHdpcnRzY2hhZnRsaWNoZXIgQmV0cmllYjxici8+XCIpO1wiZm9yZXN0XCI9PWIubGFuZHVzZSYmKGErPVwiRm9yc3Q8YnIvPlwiKTtcImdhcmFnZXNcIj09Yi5sYW5kdXNlJiZcbiAgICAoYSs9XCJHYXJhZ2Vua29tcGxleDxici8+XCIpO1wiZ3Jhc3NcIj09Yi5sYW5kdXNlJiYoYSs9XCJSYXNlbmZsXFx1MDBlNGNoZW48YnIvPlwiKTtcImdyZWVuZmllbGRcIj09Yi5sYW5kdXNlJiYoYSs9XCJCYXVlcndhcnR1bmdzbGFuZDxici8+XCIpO1wiZ3JlZW5ob3VzZV9ob3J0aWN1bHR1cmVcIj09Yi5sYW5kdXNlJiYoYSs9XCJHZXdcXHUwMGU0Y2hzaGF1cy1GbFxcdTAwZTRjaGU8YnIvPlwiKTtcImluZHVzdHJpYWxcIj09Yi5sYW5kdXNlJiYoYSs9XCJHZXdlcmJlLS9JbmR1c3RyaWVnZWJpZXQ8YnIvPlwiKTtcImxhbmRmaWxsXCI9PWIubGFuZHVzZSYmKGErPVwiTVxcdTAwZmNsbGRlcG9uaWU8YnIvPlwiKTtcIm1lYWRvd1wiPT1iLmxhbmR1c2UmJihhKz1cIkdyXFx1MDBmY25mbFxcdTAwZTRjaGU8YnIvPlwiKTtcIm9yY2hhcmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJPYnN0cGxhbnRhZ2U8YnIvPlwiKTtcInBsYW50X251cnNlcnlcIj09Yi5sYW5kdXNlJiYoYSs9XCJCYXVtc2NodWxlPGJyLz5cIik7XCJxdWFycnlcIj09Yi5sYW5kdXNlJiYoYSs9XG4gICAgICAgIFwiU2FuZC0gdW5kIEtpZXNncnViZTxici8+XCIpO1wicmFpbHdheVwiPT1iLmxhbmR1c2UmJihhKz1cIkdlYmlldCBmXFx1MDBmY3IgRWlzZW5iYWhubnV0enVuZzxici8+XCIpO1wicmVjcmVhdGlvbl9ncm91bmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJFcmhvbHVuZ3NnZWJpZXQ8YnIvPlwiKTtcInJlc2Vydm9pclwiPT1iLmxhbmR1c2UmJihhKz1cIldhc3NlcnJlc2Vydm9pcjxici8+XCIpO1wicmVzaWRlbnRpYWxcIj09Yi5sYW5kdXNlJiYoYSs9XCJXb2huZ2ViaWV0PGJyLz5cIik7XCJyZXRhaWxcIj09Yi5sYW5kdXNlJiYoYSs9XCJFaW5rYXVmc3plbnRydW08YnIvPlwiKTtcInNhbHRfcG9uZFwiPT1iLmxhbmR1c2UmJihhKz1cIlNhbGluZTxici8+XCIpO1widmlsbGFnZV9ncmVlblwiPT1iLmxhbmR1c2UmJihhKz1cIkdyXFx1MDBmY25mbFxcdTAwZTRjaGU8YnIvPlwiKTtcInZpbmV5YXJkXCI9PWIubGFuZHVzZSYmKGErPVwiV2VpbmJlcmc8YnIvPlwiKTtcInBvbmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJrbGVpbmVyIFRlaWNoPGJyLz5cIik7XCJzYWx0X3BvbmRcIj09XG4gICAgYi5sYW5kdXNlJiYoYSs9XCJTYWxpbmU8YnIvPlwiKTtcImFuaW1hbF9rZWVwaW5nXCI9PWIubGFuZHVzZSYmKGErPVwiV2VpZGUsIFBhZGRvY2sgZlxcdTAwZmNyIFRpZXJoYWx0dW5nPGJyLz5cIik7XCJ5ZXNcIj09Yi5lbnRyYW5jZSYmKGErPVwiRWluZ2FuZyB6dW0gR2ViXFx1MDBlNHVkZTxici8+XCIpO1wibWFpblwiPT1iLmVudHJhbmNlJiYoYSs9XCJIYXVwdGVpbmdhbmc8YnIvPlwiKTtcInNlcnZpY2VcIj09Yi5lbnRyYW5jZSYmKGErPVwiSGludGVyYXVzZ2FuZyBmXFx1MDBmY3IgQW5nZXN0ZWxsdGUgb2RlciBadWxpZWZlcmVyPGJyLz5cIik7XCJleGl0XCI9PWIuZW50cmFuY2UmJihhKz1cIkF1c2dhbmcgZGVzIEdlYlxcdTAwZTR1ZGVzPGJyLz5cIik7XCJlbWVyZ2VuY3lcIj09Yi5lbnRyYW5jZSYmKGErPVwiTm90YXVzZ2FuZzxici8+XCIpO1wiYmF5XCI9PWIubmF0dXJhbCYmKGErPVwiQnVjaHQ8YnIvPlwiKTtcImJlYWNoXCI9PWIubmF0dXJhbCYmKGErPVwiU3RyYW5kPGJyLz5cIik7XCJ3b29kXCI9PWIubmF0dXJhbCYmKGErPVwibmF0XFx1MDBmY3JsaWNoZXIgV2FsZDxici8+XCIpO1xuICAgIFwiZ2xhY2llclwiPT1iLm5hdHVyYWwmJihhKz1cIkdsZXRzY2hlcjxici8+XCIpO1wiY2F2ZV9lbnRyYW5jZVwiPT1iLm5hdHVyYWwmJihhKz1cIkhcXHUwMGY2aGxlPGJyLz5cIik7XCJzcHJpbmdcIj09Yi5uYXR1cmFsJiYoYSs9XCJuYXRcXHUwMGZjcmxpY2hlIFF1ZWxsZTxici8+XCIpO1wid2F0ZXJmYWxsXCI9PWIubmF0dXJhbCYmKGErPVwiV2Fzc2VyZmFsbDxici8+XCIpO1wic2NydWJcIj09Yi5uYXR1cmFsJiYoYSs9XCJ1bmt1bHRpdmllcnRlcyBCdXNjaGxhbmQ8YnIvPlwiKTtcImdyYXNzbGFuZFwiPT1iLm5hdHVyYWwmJihhKz1cInVua3VsdGl2aWVydGVzIEdyYXNsYW5kPGJyLz5cIik7XCJ3ZXRsYW5kXCI9PWIubmF0dXJhbCYmKGErPVwiRmV1Y2h0Z2ViaWV0PGJyLz5cIik7XCJ0cmVlXCI9PWIubmF0dXJhbCYmKGErPVwiQmF1bVwiKTtcInBlYWtcIj09Yi5uYXR1cmFsJiZcInllc1wiPT1iW1wic3VtbWl0OmNyb3NzXCJdJiYoYSs9XCJHaXBmZWxrcmV1ejxici8+XCIpO1widHJlZV9yb3dcIj09Yi5uYXR1cmFsJiYoYSs9XCJCYXVtcmVpaGUgLyBBbGxlZTxici8+XCIpO1xuICAgIFwiaGVhdGhcIj09Yi5uYXR1cmFsJiYoYSs9XCJIZWlkZTxici8+XCIpO1wibW9vclwiPT1iLm5hdHVyYWwmJihhKz1cIkhvY2htb29yPGJyLz5cIik7XCJncmFzc2xhbmRcIj09Yi5uYXR1cmFsJiYoYSs9XCJ1bmt1bHRpdmllcnRlcyBHcmFzbGFuZDxici8+XCIpO1wiZmVsbFwiPT1iLm5hdHVyYWwmJihhKz1cIkdyYXNsYW5kIG9iZXJoYWxiIGRlciBCYXVtZ3JlbnplPGJyLz5cIik7XCJiYXJlX3JvY2tcIj09Yi5uYXR1cmFsJiYoYSs9XCJOYWNrdGVyIEZlbHM8YnIvPlwiKTtcInNjcmVlXCI9PWIubmF0dXJhbCYmKGErPVwiU2NodXR0IChIYW5nc2NodXR0KTxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJihhKz1cIlZ1bGthbjxici8+XCIpO1widmFsbGV5XCI9PWIubmF0dXJhbCYmKGErPVwiVGFsPGJyLz5cIik7XCJzdG9uZVwiPT1iLm5hdHVyYWwmJihhKz1cIkZpbmRsaW5nPGJyLz5cIik7XCJzZWFcIj09Yi5uYXR1cmFsJiYoYSs9XCJNZWVyPGJyLz5cIik7XCJuYXRpb25hbF9wYXJrXCI9PWIuYm91bmRhcnkmJihhKz1cIk5hdGlvbmFscGFyazxici8+XCIpO1xuICAgIFwicHJvdGVjdGVkX2FyZWFcIj09Yi5ib3VuZGFyeSYmKGErPVwiU2NodXR6Z2ViaWV0PGJyLz5cIik7XCJ5ZXNcIj09Yi5tb3VudGFpbl9wYXNzJiYoYSs9XCJHZWJpcmdzcGFzczxici8+XCIpO1wid2F0ZXJmYWxsXCI9PWIud2F0ZXJ3YXkmJihhKz1cIldhc3NlcmZhbGw8YnIvPlwiKTtcImNhbmFsXCI9PWIud2F0ZXJ3YXkmJihhKz1cIkthbmFsPGJyLz5cIik7XCJjYW5hbFwiPT1iLndhdGVyJiYoYSs9XCJLYW5hbDxici8+XCIpO1wicml2ZXJcIj09Yi53YXRlcndheSYmKGErPVwiRmx1c3M8YnIvPlwiKTtcInJpdmVyXCI9PWIud2F0ZXImJihhKz1cIkZsdXNzPGJyLz5cIik7XCJyaXZlcmJhbmtcIj09Yi53YXRlcndheSYmKGErPVwiRmx1c3M8YnIvPlwiKTtcImRpdGNoXCI9PWIud2F0ZXJ3YXkmJihhKz1cIkVudHdcXHUwMGU0c3NlcnVuZ3NncmFiZW48YnIvPlwiKTtcInN0cmVhbVwiPT1iLndhdGVyd2F5JiYoYSs9XCJCYWNoPGJyLz5cIik7XCJmZXJyeVwiPT1iLnJvdXRlJiYoYSs9XCJGXFx1MDBlNGhydmVyYmluZHVuZzxici8+XCIpO1widHVybmluZ19wb2ludFwiPT1cbiAgICBiLndhdGVyd2F5JiYoYSs9XCJXZW5kZXN0ZWxsZTxici8+XCIpO2lmKFwibGFrZVwiPT1iLndhdGVyfHxcIndhdGVyXCI9PWIubmF0dXJhbClhKz1cIlNlZTxici8+XCI7XCJjb3ZlXCI9PWIud2F0ZXImJihhKz1cImtsZWluZSBCdWNodDxici8+XCIpO1wibGFnb29uXCI9PWIud2F0ZXImJihhKz1cIkxhZ3VuZTxici8+XCIpO1wicG9uZFwiPT1iLndhdGVyJiYoYSs9XCJUZWljaDxici8+XCIpO1wicmVzZXJ2b2lyXCI9PWIud2F0ZXImJihhKz1cIldhc3NlcnJlc2Vydm9pcjxici8+XCIpO1wib3hib3dcIj09Yi53YXRlciYmKGErPVwiQWx0d2Fzc2Vyc2VlPGJyLz5cIik7XCJsb2NrXCI9PWIud2F0ZXImJihhKz1cIlNjaGxldXNlbmthbW1lcjxici8+XCIpO1wibW9hdFwiPT1iLndhdGVyJiYoYSs9XCJCdXJnZ3JhYmVuPGJyLz5cIik7XCJ3YXN0ZXdhdGVyXCI9PWIud2F0ZXImJihhKz1cIktsXFx1MDBlNHJhbmxhZ2U8YnIvPlwiKTtcImd1ZXN0XCI9PWIubW9vcmluZyYmXCJwaWVyXCI9PWIubWFuX21hZGV8fFwidmlzaXRvcl9iZXJ0aFwiPT1iW1wic2VhbWFyazpzbWFsbF9jcmFmdF9mYWNpbGl0eTpjYXRlZ29yeVwiXT9cbiAgICAgICAgYSs9XCJHYXN0bGllZ2VwbGF0ejxici8+XCI6XCJwaWVyXCI9PWIubWFuX21hZGUmJihhKz1cIkFubGVnZXN0ZWxsZTxici8+XCIpO1wiYm9hdHlhcmRcIj09Yi53YXRlcndheSYmKGErPVwiU2NoaWZmc3dlcmZ0PGJyLz5cIik7XCJtb29yaW5nXCI9PWJbXCJzZWFtYXJrOnR5cGVcIl0mJlwiZG9scGhpblwiPT1iW1wic2VhbWFyazptb29yaW5nOmNhdGVnb3J5XCJdJiYoYSs9XCJEYWxiZW48YnIvPlwiKTtcImZvb3RcIj09Yi5yb3V0ZSYmKGErPVwiV2FuZGVyd2VnPGJyLz5cIik7XCJoaWtpbmdcIj09Yi5yb3V0ZSYmKGErPVwiV2FuZGVyd2VnPGJyLz5cIik7aWYoXCJ5ZXNcIj09Yi5oaWtpbmcmJlwiaW5mb3JtYXRpb25cIj09Yi50b3VyaXNtKWErPVwiV2Vnd2Vpc2VyPGJyLz5cIjtlbHNlIGlmKFwiaW5mb3JtYXRpb25cIj09Yi50b3VyaXNtJiZcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSlpZihiLmluZm9ybWF0aW9uKXN3aXRjaChiLmluZm9ybWF0aW9uKXtjYXNlIFwiYm9hcmRcIjphKz1cIkluZm9ybWF0aW9uc3RhZmVsPGJyLz5cIjticmVhaztjYXNlIFwibWFwXCI6YSs9XG4gICAgICAgIFwiSW5mb3JtYXRpb25zdGFmZWwgbWl0IEthcnRlPGJyLz5cIjticmVhaztjYXNlIFwib2ZmaWNlXCI6YSs9XCJUb3VyaXN0ZW5pbmZvcm1hdGlvbjxici8+XCI7YnJlYWs7Y2FzZSBcInRlcm1pbmFsXCI6YSs9XCJJbmZvcm1hdGlvbnN0ZXJtaW5hbDxici8+XCI7YnJlYWs7Y2FzZSBcImF1ZGlvZ3VpZGVcIjphKz1cIkF1ZGlvZ3VpZGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJndWlkZXBvc3RcIjphKz1cIldlZ3dlaXNlcjxici8+XCI7YnJlYWs7Y2FzZSBcInRhY3RpbGVfbWFwXCI6YSs9XCJCbGluZGVua2FydGUgMkQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0YWN0aWxlX21vZGVsXCI6YSs9XCJCbGluZGVua2FydGUgM0Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyb3V0ZV9tYXJrZXJcIjphKz1cIldlZ2Vya2VubnVuZ3NtYXJrZXI8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJJbmZvcm1hdGlvbnN0YWZlbDxici8+XCJ9ZWxzZSBhKz1cIkluZm9ybWF0aW9uc3RhZmVsPGJyLz5cIjtcImJpY3ljbGVcIj09Yi5yb3V0ZSYmKGErPVwiUmFkd2FuZGVyd2VnPGJyLz5cIik7XG4gICAgXCJtdGJcIj09Yi5yb3V0ZSYmKGErPVwiTW91bnRhaW5iaWtlcm91dGU8YnIvPlwiKTtcImhvcnNlXCI9PWIucm91dGUmJihhKz1cIlJlaXR3YW5kZXJ3ZWc8YnIvPlwiKTtcImNvYXN0bGluZVwiPT1iLm5hdHVyYWwmJihhKz1cIktcXHUwMGZjc3RlbmxpbmllPGJyLz5cIik7XCJjbGlmZlwiPT1iLm5hdHVyYWwmJihhKz1cIktsaXBwZTxici8+XCIpO1wiZGFtXCI9PWIud2F0ZXJ3YXkmJihhKz1cIlN0YXVkYW1tPGJyLz5cIik7XCJ3ZWlyXCI9PWIud2F0ZXJ3YXkmJihhKz1cIldlaHI8YnIvPlwiKTtcImxvY2tfZ2F0ZVwiPT1iLndhdGVyd2F5JiYoYSs9XCJTY2hsZXVzZW50b3I8YnIvPlwiKTtcInllc1wiPT1iLmxvY2smJihhKz1cIlNjaGxldXNlPGJyLz5cIik7XCJzbHVpY2VfZ2F0ZVwiPT1iLndhdGVyd2F5JiYoYSs9XCJTaWVsPGJyLz5cIik7XCJwdW1waW5nX3N0YXRpb25cIj09Yi5tYW5fbWFkZSYmKGErPVwiU2NoXFx1MDBmNnBmd2Vyazxici8+XCIpO1wiZ3JveW5lXCI9PWIubWFuX21hZGUmJihhKz1cIkJ1aG5lPGJyLz5cIik7XCJkeWtlXCI9PWIubWFuX21hZGUmJlxuICAgIChhKz1cIkRlaWNoPGJyLz5cIik7XCJsZXZlZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJEZWljaDxici8+XCIpO1wid2F0ZXJtaWxsXCI9PWIubWFuX21hZGUmJihhKz1cIldhc3Nlcm1cXHUwMGZjaGxlPGJyLz5cIik7XCJhaXJmaWVsZFwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJNaWxpdFxcdTAwZTRyZmx1Z3BsYXR6PGJyLz5cIik7XCJuYXZhbF9iYXNlXCI9PWIubWlsaXRhcnkmJihhKz1cIk1hcmluZXN0XFx1MDBmY3R6cHVua3Q8YnIvPlwiKTtcInJhbmdlXCI9PWIubWlsaXRhcnkmJihhKz1cIldhZmZlblxcdTAwZmNidW5nc3BsYXR6PGJyLz5cIik7XCJtaWxpdGFyeVwiPT1iLmxhbmR1c2UmJihhKz1cIm1pbGl0XFx1MDBlNHJpc2NoIGdlbnV0enRlcyBHZWJpZXQ8YnIvPlwiKTtcInRyYWluaW5nX2FyZWFcIj09Yi5taWxpdGFyeSYmKGErPVwiVHJ1cHBlblxcdTAwZmNidW5nc3BsYXR6PGJyLz5cIik7XCJleGNsdXNpb25fem9uZVwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJtaWxpdFxcdTAwZTRyaXNjaCBnZW51dHp0ZXMgR2ViaWV0PGJyLz5cIik7XCJkYW5nZXJfYXJlYVwiPT1cbiAgICBiLm1pbGl0YXJ5JiYoYSs9XCJtaWxpdFxcdTAwZTRyaXNjaGUgR2VmYWhyZW56b25lPGJyLz5cIik7XCJiYXJyYWNrc1wiPT1iLm1pbGl0YXJ5JiYoYSs9XCJLYXNlcm5lPGJyLz5cIik7XCJudWNsZWFyX2V4cGxvc2lvbl9zaXRlXCI9PWIubWlsaXRhcnkmJihhKz1cIkF0b213YWZmZW50ZXN0Z2VsXFx1MDBlNG5kZTxici8+XCIpO1wieWVzXCI9PWIuY29uc3RydWN0aW9uP2ErPVwiQmF1c3RlbGxlPGJyLz5cIjpcImNvbnN0cnVjdGlvblwiPT1iLmhpZ2h3YXkmJihhKz1cIkJhdXN0ZWxsZTxici8+XCIpO1wicGV0cm9sZXVtX3dlbGxcIj09Yi5tYW5fbWFkZSYmKGErPVwiRXJkXFx1MDBmNmxwdW1wZTxici8+XCIpO1wic3RvcmFnZV90YW5rXCI9PWIubWFuX21hZGUmJihhKz1cIlNwZWljaGVydGFuazxici8+XCIpO1wid2FzdGV3YXRlcl9wbGFudFwiPT1iLm1hbl9tYWRlJiYoYSs9XCJLbFxcdTAwZTRyYW5sYWdlPGJyLz5cIik7XCJzaWxvXCI9PWIubWFuX21hZGUmJihhKz1cIlNpbG88YnIvPlwiKTtcIndhdGVyX3Rvd2VyXCI9PWIubWFuX21hZGUmJlxuICAgIChhKz1cIldhc3NlcnR1cm08YnIvPlwiKTtcIndpbmRtaWxsXCI9PWIubWFuX21hZGUmJihhKz1cIldpbmRtXFx1MDBmY2hsZTxici8+XCIpO1wibW9uaXRvcmluZ19zdGF0aW9uXCI9PWIubWFuX21hZGUmJihhKz1cIk1lc3NzdGF0aW9uXCIpO1wiY3JhbmVcIj09Yi5tYW5fbWFkZSYmKGErPVwiS3JhblwiKTtcImxpZ2h0aG91c2VcIj09Yi5tYW5fbWFkZSYmKGErPVwiTGV1Y2h0dHVybVwiKTtcImJlYWNvblwiPT1iLm1hbl9tYWRlJiYoYSs9XCJMZXVjaHRmZXVlclwiKTtcImJyZWFrd2F0ZXJcIj09Yi5tYW5fbWFkZSYmKGErPVwiV2VsbGVuYnJlY2hlclwiKTtcImxhbXBcIj09Yi5tYW5fbWFkZSYmXCJzdHJlZXRfbGFtcFwiPT1iW1wibGFtcDp0eXBlXCJdJiYoYSs9XCJTdHJhc3NlbmxhdGVybmU8YnIvPlwiKTtcImxhbnRlcm5cIj09Yi5saWdodF9zb3VyY2UmJihhKz1cIlN0cmFzc2VubGF0ZXJuZTxici8+XCIpO1wiZmxvb2RsaWdodFwiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwiRmx1dGxpY2h0PGJyLz5cIik7XCJzaWduYWxfbGFtcFwiPT1iLmxpZ2h0X3NvdXJjZSYmXG4gICAgKGErPVwiU2lnbmFsbGljaHQ8YnIvPlwiKTtcImF2aWF0aW9uXCI9PWIubGlnaHRfc291cmNlJiYoYSs9XCJCZWZldWVydW5nPGJyLz5cIik7XCJ3YXJuaW5nXCI9PWIubGlnaHRfc291cmNlJiYoYSs9XCJXYXJubGljaHQ8YnIvPlwiKTtpZihiLmxpZ2h0X3NvdXJjZSYmYltcImxpZ2h0Om1ldGhvZFwiXSlzd2l0Y2goYSs9XCJMaWNodCBBcnQ6IFwiLGJbXCJsaWdodDptZXRob2RcIl0pe2Nhc2UgXCJnYXNcIjphKz1cIkdhc1wiO2JyZWFrO2Nhc2UgXCJlbGVjdHJpY1wiOmErPVwiRWxla3RyaXNjaFwiO2JyZWFrO2Nhc2UgXCJpbmNhbmRlc2NlbnRcIjphKz1cInN0cmFobGVuZFwiO2JyZWFrO2Nhc2UgXCJoYWxvZ2VuXCI6YSs9XCJIYWxvZ2VuXCI7YnJlYWs7Y2FzZSBcImRpc2NoYXJnZVwiOmErPVwiRW50bGFkdW5nc2xpY2h0XCI7YnJlYWs7Y2FzZSBcIm1ldGFsLWhhbGlkZVwiOmErPVwiSGFsb2dlbi1NZXRhbGxkYW1wZmxhbXBlXCI7YnJlYWs7Y2FzZSBcIm5lb25cIjphKz1cIk5lb25cIjticmVhaztjYXNlIFwic29kaXVtXCI6YSs9XCJOYXRyaXVtZGFtcGZsYW1wZVwiO1xuICAgICAgICBicmVhaztjYXNlIFwiaGlnaF9wcmVzc3VyZV9zb2RpdW1cIjphKz1cIkhvY2hkcnVjayBOYXRyaXVtZGFtcGZsYW1wZVwiO2JyZWFrO2Nhc2UgXCJsb3dfcHJlc3N1cmVfc29kaXVtXCI6YSs9XCJOaWVkcmlnZHJ1Y2sgTmF0cml1bWRhbXBmbGFtcGVcIjticmVhaztjYXNlIFwiZmx1b3Jlc2NlbnRcIjphKz1cIkZsdW9yZXN6ZW56bGFtcGVcIjticmVhaztjYXNlIFwibWVyY3VyeVwiOmErPVwiUXVlY2tzaWxiZXJsYW1wZVwiO2JyZWFrO2Nhc2UgXCJMRURcIjphKz1cIkxFRFwiO2JyZWFrO2Nhc2UgXCJsYXNlclwiOmErPVwiTGFzZXJcIjticmVhaztjYXNlIFwiYXJjXCI6YSs9XCJMaWNodGJvZ2VuXCI7YnJlYWs7ZGVmYXVsdDphKz1cIlVuYmVrYW5udFwifVwiZHJpbmtpbmdfd2F0ZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJUcmlua3dhc3Nlcjxici8+XCIpO1wieWVzXCI9PWIuZHJpbmtpbmdfd2F0ZXImJihhKz1cIlRyaW5rd2Fzc2VyPGJyLz5cIik7XCJ3b3Jrc1wiPT1iLm1hbl9tYWRlP2ErPVwiSW5kdXN0cmllZ2ViXFx1MDBlNHVkZTxici8+XCI6XCJpbmR1c3RyaWFsXCI9PVxuICAgIGIuYnVpbGRpbmc/YSs9XCJJbmR1c3RyaWVnZWJcXHUwMGU0dWRlPGJyLz5cIjpcImluZHVzdHJpYWxcIj09Yi5sYW5kdXNlP2ErPVwiSW5kdXN0cmllZ2ViaWV0PGJyLz5cIjpcImluZHVzdHJpYWxcIj09Yi5hYnV0dGVycz9hKz1cIkluZHVzdHJpZWdlYmlldDxici8+XCI6XCJjb21tZXJjaWFsXCI9PWIuYWJ1dHRlcnMmJihhKz1cIkdld2VyYmVnZWJpZXQ8YnIvPlwiKTtpZihiW1wiZ2VuZXJhdG9yOnNvdXJjZVwiXSlzd2l0Y2goYSs9XCJBbmxhZ2VuLVR5cDogXCIsYltcImdlbmVyYXRvcjpzb3VyY2VcIl0pe2Nhc2UgXCJiaW9tYXNzXCI6YSs9XCJCaW9nYXNhbmxhZ2VcIjticmVhaztjYXNlIFwiYmlvZnVlbFwiOmErPVwiQmlvZ2FzYW5sYWdlXCI7YnJlYWs7Y2FzZSBcImJpb2dhc1wiOmErPVwiQmlvZ2FzYW5sYWdlXCI7YnJlYWs7Y2FzZSBcImNvYWxcIjphKz1cIktvaGxla3JhZnR3ZXJrXCI7YnJlYWs7Y2FzZSBcIm9pbFwiOmErPVwiXFx1MDBkNmxyYWZmaW5lcmllXCI7YnJlYWs7Y2FzZSBcIndhc3RlXCI6YSs9XCJNXFx1MDBmY2xsdmVyYnJlbm51bmdzYW5sYWdlXCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJ3aW5kXCI6YSs9XCJXaW5ka3JhZnR3ZXJrXCI7YnJlYWs7Y2FzZSBcInNvbGFyXCI6YSs9XCJTb2xhcmtyYWZ0d2Vya1wiO2JyZWFrO2Nhc2UgXCJoeWRyb1wiOmErPVwiV2Fzc2Vya3JhZnR3ZXJrXCI7YnJlYWs7Y2FzZSBcInRpZGFsXCI6YSs9XCJHZXplaXRlbmtyYWZ0d2Vya1wiO2JyZWFrO2Nhc2UgXCJ3YXZlXCI6YSs9XCJXZWxsZW5rcmFmdHdlcmtcIjticmVhaztjYXNlIFwiZ2VvdGhlcm1hbFwiOmErPVwiR2VvdGhlcm1pZVwiO2JyZWFrO2Nhc2UgXCJvc21vdGljXCI6YSs9XCJPc21vc2VrcmFmdHdlcmtcIjticmVhaztjYXNlIFwibnVjbGVhclwiOmErPVwiQXRvbWtyYWZ0d2Vya1wiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnQ8YnIvPlwifVwicGhvdG92b2x0YWljXCI9PWIucG93ZXJfc291cmNlJiYoYSs9XCJTb2xhcmtyYWZ0d2Vya1wiKTtcImxpbmVcIj09Yi5wb3dlciYmKGErPVwiSG9jaHNwYW5udW5ncy1cXHUwMGRjYmVydHJhZ3VuZ3NsZWl0dW5nPGJyLz5cIik7XCJjYWJsZVwiPT1iLnBvd2VyJiYoYSs9XCJVbnRlcmdydW5ka2FiZWw8YnIvPlwiKTtcbiAgICBcImNhYmxlX2Rpc3RyaWJ1dGlvbl9jYWJpbmV0XCI9PWIucG93ZXImJihhKz1cIkthYmVsdmVydGVpbGVyc2NocmFuazxici8+XCIpO1wicGxhbnRcIj09Yi5wb3dlciYmKGErPVwiRWxla3RyaXppdFxcdTAwZTR0c2tyYWZ0d2Vyazxici8+XCIpO1wic3RhdGlvblwiPT1iLnBvd2VyJiYoYSs9XCJFbGVrdHJpeml0XFx1MDBlNHRza3JhZnR3ZXJrPGJyLz5cIik7XCJzdWJfc3RhdGlvblwiPT1iLnBvd2VyJiYoYSs9XCJFbGVrdHJpeml0XFx1MDBlNHRza3JhZnR3ZXJrPGJyLz5cIik7XCJjb21wZW5zYXRvclwiPT1iLnBvd2VyJiYoYSs9XCJLb21wZW5zYXRvcjxici8+XCIpO1wiY29udmVydGVyXCI9PWIucG93ZXImJihhKz1cIktvbnZlcnRlcjxici8+XCIpO1wiZ2VuZXJhdG9yXCI9PWIucG93ZXImJihhKz1cIkdlbmVyYXRvcjxici8+XCIpO1wiaGVsaW9zdGF0XCI9PWIucG93ZXImJihhKz1cIkhlbGlvc3RhdDxici8+XCIpO1wiaW5zdWxhdG9yXCI9PWIucG93ZXImJihhKz1cIklzdWxhdG9yPGJyLz5cIik7XCJidXNiYXJcIj09Yi5saW5lJiYoYSs9XCJTYW1tZWxzY2hpZW5lPGJyLz5cIik7XG4gICAgXCJiYXlcIj09Yi5saW5lJiYoYSs9XCJWZXJiaW5kdW5nIFNjaGFsdHVuZyB1bmQgU2FtbWVsc2NoaWVuZTxici8+XCIpO1wibWlub3JfbGluZVwiPT1iLnBvd2VyJiYoYSs9XCJOZWJlbmxpbmllPGJyLz5cIik7XCJwb2xlXCI9PWIucG93ZXImJihhKz1cIlBmYWhsPGJyLz5cIik7XCJwb3J0YWxcIj09Yi5wb3dlciYmKGErPVwiSC1mXFx1MDBmNnJtaWdlciBNYXN0PGJyLz5cIik7XCJjYXRlbmFyeV9tYXN0XCI9PWIucG93ZXImJihhKz1cIkZhaHJsZWl0dW5nc21hc3Q8YnIvPlwiKTtcInN1YnN0YXRpb25cIj09Yi5wb3dlciYmKGErPVwiVW1zcGFubndlcms8YnIvPlwiKTtcInN3aXRjaFwiPT1iLnBvd2VyJiYoYSs9XCJMYXN0c2NoYWx0ZXI8YnIvPlwiKTtcInRlcm1pbmFsXCI9PWIucG93ZXImJihhKz1cIlRlcm1pbmFsIC8gQW5zY2hsdXNzPGJyLz5cIik7XCJ0b3dlclwiPT1iLnBvd2VyJiYoYSs9XCJIb2Noc3Bhbm51bmdzbGVpdHVuZ3M8YnIvPlwiKTtcInRyYW5zZm9ybWVyXCI9PWIucG93ZXImJihhKz1cIk5lYmVubGluaWU8YnIvPlwiKTtpZihiLmJhcnJpZXIpc3dpdGNoKGIuYmFycmllcil7Y2FzZSBcImJvbGxhcmRcIjphKz1cbiAgICAgICAgXCJQb2xsZXIsIFBmb3N0ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjeWNsZV9iYXJyaWVyXCI6YSs9XCJVbWxhdWZzcGVycmUsIERyXFx1MDBlNG5nZWxnaXR0ZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJnYXRlXCI6YSs9XCJUb3IsIFNjaHJhbmtlPGJyLz5cIjticmVhaztjYXNlIFwiY2hhaW5cIjphKz1cIktldHRlPGJyLz5cIjticmVhaztjYXNlIFwibGlmdF9nYXRlXCI6YSs9XCJTY2hsYWdiYXVtPGJyLz5cIjticmVhaztjYXNlIFwid2FsbFwiOmErPVwiTFxcdTAwZTRybXNjaHV0endhbmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b2xsX2Jvb3RoXCI6YSs9XCJNYXV0c3RlbGxlPGJyLz5cIjticmVhaztjYXNlIFwiZmVuY2VcIjpzd2l0Y2goYi5mZW5jZV90eXBlKXtjYXNlIFwiYmFyYmVkX3dpcmVcIjphKz1cIlN0YWNoZWxkcmFodHphdW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJ3b29kXCI6YSs9XCJIb2x6emF1bjxici8+XCI7YnJlYWs7Y2FzZSBcImNoYWluX2xpbmtcIjphKz1cIk1hc2NoZW5kcmFodHphdW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJlbGVjdHJpY1wiOmErPVxuICAgICAgICBcIldlaWRlemF1bjxici8+XCI7YnJlYWs7Y2FzZSBcInJhaWxpbmdcIjphKz1cIkdlbFxcdTAwZTRuZGVyPGJyLz5cIjticmVhaztjYXNlIFwid2lyZVwiOmErPVwiZWluZmFjaGVyIERyYWh0emF1bjxici8+XCI7YnJlYWs7Y2FzZSBcIm1ldGFsXCI6YSs9XCJNZXRhbGx6YXVuPGJyLz5cIjticmVhaztjYXNlIFwicG9sZVwiOmErPVwiSG9senBmXFx1MDBlNGhsZTxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIlphdW48YnIvPlwifWJyZWFrO2Nhc2UgXCJibG9ja1wiOmErPVwiQmxvY2s8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkaXRjaFwiOmErPVwiR3JhYmVuPGJyLz5cIjticmVhaztjYXNlIFwiYm9yZGVyX2NvbnRyb2xcIjphKz1cIkdyZW56a29udHJvbGxlPGJyLz5cIjticmVhaztjYXNlIFwiaGVkZ2VcIjphKz1cIkhlY2tlPGJyLz5cIjticmVhaztjYXNlIFwicmV0YWluaW5nX3dhbGxcIjphKz1cIlN0XFx1MDBmY3R6bWF1ZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYXR0bGVfZ3JpZFwiOmErPVwiV2VpZGVyb3N0PGJyLz5cIjticmVhaztjYXNlIFwiaG9yc2Vfc3RpbGVcIjphKz1cbiAgICAgICAgXCJaYXVuXFx1MDBmY2JlcnRyaXR0PGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn1cIm5vaXNlX2JhcnJpZXJcIj09Yi53YWxsJiYoYSs9XCJMXFx1MDBlNHJtc2NodXR6d2FuZDxici8+XCIpO1wicmV0YWluaW5nX3dhbGxcIj09Yi5kZXNpZ25hdGlvbiYmKGErPVwiTFxcdTAwZTRybXNjaHV0endhbmQ8YnIvPlwiKTtcIm5vaXNlX2JhcnJpZXJcIj09Yi5kZXNpZ25hdGlvbiYmKGErPVwiTFxcdTAwZTRybXNjaHV0endhbmQ8YnIvPlwiKTtcInN1cnZlaWxsYW5jZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJcXHUwMGRjYmVyd2FjaHRlciBCZXJlaWNoPGJyLz5cIik7aWYoYi5hZXJvd2F5KXN3aXRjaChhKz1cIkZsdWdoYWZlbjogXCIsYi5hZXJvd2F5KXtjYXNlIFwiYWVyb2Ryb21lXCI6YSs9XCJGbHVncGxhdHpcIjticmVhaztjYXNlIFwiYXByb25cIjphKz1cIlZvcmZlbGRcIjticmVhaztjYXNlIFwiZ2F0ZVwiOmErPVwiZ2F0ZVwiO2JyZWFrO2Nhc2UgXCJoZWxpcGFkXCI6YSs9XCJIdWJzY2hyYXViZXJsYW5kZXBsYXR6XCI7YnJlYWs7XG4gICAgICAgIGNhc2UgXCJoYW5nYXJcIjphKz1cIkhhbmdhclwiO2JyZWFrO2Nhc2UgXCJydW53YXlcIjphKz1cIlN0YXJ0LS9MYW5kZWJhaG5cIjticmVhaztjYXNlIFwidGF4aXdheVwiOmErPVwiUm9sbHdlZ1wiO2JyZWFrO2Nhc2UgXCJ0ZXJtaW5hbFwiOmErPVwiRmx1Z2hhZmVuZ2ViXFx1MDBlNHVkZVwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnQ8YnIvPlwifVwiaGFsdFwiPT1iLnJhaWx3YXkmJihhKz1cIkJhaG4tSGFsdGVwdW5rdDxici8+XCIpO1wiY3Jvc3NpbmdcIj09Yi5yYWlsd2F5JiYoYSs9XCJCYWhuXFx1MDBmY2Jlcmdhbmc8YnIvPlwiKTtcImxldmVsX2Nyb3NzaW5nXCI9PWIucmFpbHdheSYmKGErPVwiQmFoblxcdTAwZmNiZXJnYW5nPGJyLz5cIik7XCJzdGF0aW9uXCI9PWIucmFpbHdheSYmKGErPVwiQmFobmhvZjxici8+XCIpO1wiYnVzX3N0YXRpb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJCdXNiYWhuaG9mPGJyLz5cIik7XCJidXNfc3RhdGlvblwiPT0hYi5hbWVuaXR5JiYoXCJzdGF0aW9uXCI9PWIucHVibGljX3RyYW5zcG9ydCYmXCJ5ZXNcIj09XG4gICAgICAgIGIuYnVzKSYmKGErPVwiQnVzYmFobmhvZjxici8+XCIpO1wicmFpbFwiPT1iLnJhaWx3YXkmJihhKz1cIkJhaG5saW5pZTxici8+XCIsXCJjb250YWN0X2xpbmVcIj09Yi5lbGVjdHJpZmllZCYmKGErPVwiZWxla3RyaWZpemllcnRlIEJhaG50cmFzc2UgbWl0IE9iZXJsZWl0dW5nPGJyLz5cIikpO1widHJhbVwiPT1iLnJhaWx3YXkmJihhKz1cIlN0cmFcXHUwMGRmZW5iYWhubGluaWU8YnIvPlwiKTtpZihcInNsaXB3YXlcIj09YltcInNlYW1hcms6c21hbGxfY3JhZnRfZmFjaWxpdHk6Y2F0ZWdvcnlcIl18fFwic2xpcHdheVwiPT1iLmhhcmJvdXJ8fFwic2xpcHdheVwiPT1iLmxlaXN1cmUpYSs9XCJTbGlwYW5sYWdlPGJyLz5cIjtpZihcImhhcmJvdXJcIj09YltcInNlYW1hcms6dHlwZVwiXSlpZihiW1wic2VhbWFyazpoYXJib3VyOmNhdGVnb3J5XCJdKXN3aXRjaChiW1wic2VhbWFyazpoYXJib3VyOmNhdGVnb3J5XCJdKXtjYXNlIFwiZmVycnlcIjphKz1cIkZcXHUwMGU0aHJoYWZlbjxici8+XCI7YnJlYWs7Y2FzZSBcImNvbnRhaW5lclwiOmErPVwiQ29udGFpbmVyaGFmZW48YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwibWFyaW5hXCI6XCJtYXJpbmFcIiE9Yi5sZWlzdXJlJiYoYSs9XCJKYWNodGhhZmVuPGJyLz5cIik7YnJlYWs7Y2FzZSBcIm5hdmVsX2Jhc2VcIjphKz1cIk1hcmluZS1IYWZlbjxici8+XCI7YnJlYWs7Y2FzZSBcInRhbmtlclwiOmErPVwiSGFmZW4gZlxcdTAwZmNyIFxcdTAwZDZsdGFua2VyPGJyLz5cIjticmVhaztjYXNlIFwicGFzc2VuZ2VyXCI6YSs9XCJQZXJzb25lbnNjaGlmZmZhaHJ0PGJyLz5cIjticmVhaztjYXNlIFwiYnVsa1wiOmErPVwiU2NoXFx1MDBmY3R0Z3V0LUhhZmVuPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiSGFmZW48YnIvPlwifWVsc2UgYSs9XCJIYWZlbjxici8+XCI7XCJtYXJpbmFcIj09Yi5sZWlzdXJlJiYoYSs9XCJKYWNodGhhZmVuPGJyLz5cIik7XCJ3cmVja1wiPT1iLmhpc3RvcmljJiYoYSs9XCJXcmFjazxici8+XCIpO1wiYW5pbWFsX3NoZWx0ZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJUaWVyaGVpbTxici8+XCIpO1wic2hlbHRlclwiPT1iLmFuaW1hbCYmKGErPVwiVGllcmhlaW08YnIvPlwiKTtcImhvcnNlX3dhbGtlclwiPT1cbiAgICBiLmFuaW1hbCYmKGErPVwiUGZlcmRlbGF1ZnRyYWluZXI8YnIvPlwiKTtcInllc1wiPT1iLmFuaW1hbF9zaGVsdGVyJiYoYSs9XCJUaWVyaGVpbTxici8+XCIpO1wiZG9nXCI9PWIuYW5pbWFsX3NoZWx0ZXImJihhKz1cIlRpZXJoZWltPGJyLz5cIik7XCJjYXRcIj09Yi5hbmltYWxfc2hlbHRlciYmKGErPVwiVGllcmhlaW08YnIvPlwiKTtcImFuaW1hbF9ib2FyZGluZ1wiPT1iLmFtZW5pdHkmJihhKz1cIlRpZXJwZW5zaW9uPGJyLz5cIik7XCJ5ZXNcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cIlRpZXJwZW5zaW9uPGJyLz5cIik7XCJkb2dcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cIlRpZXJwZW5zaW9uPGJyLz5cIik7XCJob3JzZVwiPT1iLmFuaW1hbF9ib2FyZGluZyYmKGErPVwiVGllcnBlbnNpb248YnIvPlwiKTtcImNhdFwiPT1iLmFuaW1hbF9ib2FyZGluZyYmKGErPVwiVGllcnBlbnNpb248YnIvPlwiKTtcImRvZztjYXRcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cIlRpZXJwZW5zaW9uPGJyLz5cIik7XCJjYXQ7ZG9nXCI9PWIuYW5pbWFsX2JvYXJkaW5nJiZcbiAgICAoYSs9XCJUaWVycGVuc2lvbjxici8+XCIpO2lmKFwic2Nob29sXCI9PWIuYW5pbWFsfHxcInNwb3J0XCI9PWIuYW5pbWFsfHxcImFuaW1hbF90cmFpbmluZ1wiPT1iLmFtZW5pdHkpYSs9XCJUaWVydHJhaW5pbmc8YnIvPlwiO1wic3dpbW1pbmdcIj09Yi5hbmltYWwmJihhKz1cIkJhZGVzdGVsbGUgZlxcdTAwZmNyIEh1bmRlPGJyLz5cIik7aWYoXCJmZWVkaW5nX3BsYWNlXCI9PWIuYW1lbml0eXx8XCJhbmltYWxfZmVlZGluZ1wiPT1iLm1hbl9tYWRlfHxcImFuaW1hbF9mZWVkaW5nXCI9PWIuYW1lbml0eSlhKz1cIkZcXHUwMGZjdHRlcnVuZ3NzdGVsbGU8YnIvPlwiO2lmKFwid2lsZGxpZmVfZmVlZGluZ1wiPT1iLmFtZW5pdHl8fFwiZGVlcl9mZWVkaW5nXCI9PWIuYW1lbml0eXx8XCJnYW1lX2ZlZWRpbmdcIj09Yi5hbWVuaXR5KWErPVwiV2lsZGZcXHUwMGZjdHRlcnVuZzxici8+XCI7aWYoXCJjcmF0Y2hcIj09Yi5hbWVuaXR5fHxcImNyYXRjaFwiPT1iLm1hbl9tYWRlfHxcImZlZWRpbmdfcmFja1wiPT1iLmFtZW5pdHkpYSs9XCJGdXR0ZXJyYXVmZTxici8+XCI7XG4gICAgXCJtYW5nZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJLcmlwcGU8YnIvPlwiKTtcImJpcmRob3VzZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJWb2dlbGhhdXM8YnIvPlwiKTtcInN0b3JrXCI9PWIuYmlyZHNfbmVzdCYmKGErPVwiU3RvcmNoZW5uZXN0PGJyLz5cIik7XCJuZXN0X2JveFwiPT1iLmFtZW5pdHkmJihhKz1cIk5pc3RrYXN0ZW48YnIvPlwiKTtcIndlbGxuZXNzXCI9PWIuYW5pbWFsJiYoYSs9XCJIdW5kZXNhbG9uPGJyLz5cIik7XCJjZW1ldGVyeVwiPT1iLmFuaW1hbCYmKGErPVwiS2xlaW50aWVyZnJpZWRob2Y8YnIvPlwiKTtpZihcInN0YWJsZVwiPT1iLmJ1aWxkaW5nfHxcInN0YWJsZVwiPT1iW1wiYnVpbGRpbmc6dXNlXCJdKWErPVwiUGZlcmRlc3RhbGw8YnIvPlwiO1wiY293c2hlZFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLdWhzdGFsbDxici8+XCIpO1wic3R5XCI9PWIuYnVpbGRpbmcmJihhKz1cIlNjaHdlaW5lc3RhbGw8YnIvPlwiKTtcImJhcm5cIj09Yi5idWlsZGluZyYmKGErPVwiU2NoZXVuZSAvIGxhbmR3aXJ0c2NoLiBMYWdlcmhhbGxlPGJyLz5cIik7XG4gICAgXCJmYXJtX2F1eGlsaWFyeVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJsYW5kd2lydHNjaGFmdGwuIE5lYmVuZ2ViXFx1MDBlNHVkZTxici8+XCIpO2lmKGJbXCJyaXZlcjp3YXRlcndheV9kaXN0YW5jZVwiXXx8XCJtaWxlc3RvbmVcIj09Yi53YXRlcndheSlhKz1cIkZsdXNza2lsb21ldGVyPGJyLz5cIjtcIm1pbGVzdG9uZVwiPT1iLmhpZ2h3YXkmJihhKz1cIlN0cmFzc2Vua2lsb21ldGVyPGJyLz5cIik7XCJtYXJrZXRcIj09YltcInhtYXM6ZmVhdHVyZVwiXSYmKGErPVwiV2VpaG5hY2h0c21hcmt0PGJyLz5cIik7XCJ0cmVlXCI9PWJbXCJ4bWFzOmZlYXR1cmVcIl0mJihhKz1cIldlaWhuYWNodHNiYXVtdmVya2F1Zjxici8+XCIpO1wiZXZlbnRcIj09YltcInhtYXM6ZmVhdHVyZVwiXSYmKGErPVwiV2VpaG5hY2h0c2V2ZW50PGJyLz5cIik7XCJweXJhbWlkXCI9PWJbXCJ4bWFzOmZlYXR1cmVcIl0mJihhKz1cIldlaWhuYWNodHNweXJhbWlkZTxici8+XCIpO3JldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2hlYWRlcl9mZWF0dXJldHlwZVwiPicrYStcbiAgICAgICAgXCI8YnIvPiA8L2Rpdj5cIn1cbmV4cG9ydCB2YXIgZm5Db250ZW50PWZ1bmN0aW9uKGIpe3ZhciBhO2E9XCJcIitmbkNvbnRlbnRHZW5lcmFsSW5mb3JtYXRpb25zKGIpO2ErPWZuQ29udGVudEhlYWx0aGNhcmUoYik7YSs9Zm5Db250ZW50QWVyb2Ryb21lKGIpO2ErPWZuQ29udGVudEN1aXNpbmUoYik7YSs9Zm5Db250ZW50U2hpcHBpbmcoYik7YSs9Zm5Db250ZW50SHlkcmFudHMoYik7YSs9Zm5Db250ZW50U3BvcnRzKGIpO2ErPWZuQ29udGVudFN0cmVldHNUcmFmZmljKGIpO2ErPWZuQ29udGVudEluZm9ybWF0aW9uQ2l0eShiKTthKz1mbkNvbnRlbnRFbWVyZ2VuY3koYik7YSs9Zm5Db250ZW50U3RvcmFnZShiKTthKz1mbkNvbnRlbnRBbWVuaXR5KGIpO2ErPWZuQ29udGVudFRvdXJpc20oYik7YSs9Zm5Db250ZW50Um91dGUoYik7YSs9Zm5Db250ZW50UGV0cm9sKGIpO2ErPWZuQ29udGVudEJhcnJpZXJzKGIpO2ErPWZuQ29udGVudExhbmR1c2UoYik7YSs9Zm5Db250ZW50TmF0dXJhbChiKTthKz1mbktsb3N0ZXJBZGRpdGlvbmFsKGIpO2ErPVxuICAgIGZuU2ljaGVyaGVpdEFkZGl0aW9uYWwoYik7YSs9Zm5BZGRpdGlvbmFsQnVpbGRpbmdJbmZvcyhiKTthKz1mbktyYWZ0d2Vya0luZm8oYik7YSs9Zm5NZXNzc3RhdGlvbihiKTthKz1mbldlcnRzdG9mZmluZm8oYik7KGErPWZuQ29udGVudFByb3RlY3RlZEFyZWEoYikpJiYoYT1cIjxici8+XCIrYSk7cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfY29udGVudFwiPicrYStcIjwvZGl2PlwifSxmbkNvbnRlbnRBZXJvZHJvbWU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtiLmFlcm9kcm9tZSYmKFwiaW50ZXJuYXRpb25hbFwiPT1iLmFlcm9kcm9tZSYmKGErPVwiRmx1Z2hhZmVudHlwZTogaW50ZXJuYXRpb25hbGVyIEZsdWdwbGF0ejxici8+XCIpLFwicmVnaW9uYWxcIj09Yi5hZXJvZHJvbWUmJihhKz1cIkZsdWdoYWZlbnR5cGU6IHJlZ2lvbmFsZXIgRmx1Z3BsYXR6PGJyLz5cIiksXCJnbGlkaW5nXCI9PWIuYWVyb2Ryb21lJiYoYSs9XCJGbHVnaGFmZW50eXBlOiBTZWdlbGZsdWdwbGF0ejxici8+XCIpLFwicHJpdmF0ZVwiPT1cbmIuYWVyb2Ryb21lJiYoYSs9XCJGbHVnaGFmZW50eXBlOiBQcml2YXRmbHVncGxhdHo8YnIvPlwiKSk7Yi5pYXRhJiYoYSs9XCJJQVRBLUNvZGU6IFwiK2IuaWF0YStcIjxici8+XCIpO2IuaWNhbyYmKGErPVwiSUNBTy1Db2RlOiBcIitiLmljYW8rXCI8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50TmF0dXJhbD1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKGIuZm9yZXN0fHxiLndvb2Qpe2lmKFwiYnJvYWRsZWF2ZWRcIj09Yi5sZWFmX3R5cGV8fFwiZGVjaWR1b3VzXCI9PWIud29vZClhKz1cIkxhdWJ3YWxkPGJyLz5cIjtpZihcIm5lZWRsZWxlYXZlZFwiPT1iLmxlYWZfdHlwZXx8XCJjb25pZmVyb3VzXCI9PWIud29vZClhKz1cIk5hZGVsd2FsZDxici8+XCI7aWYoXCJtaXhlZFwiPT1iLmxlYWZfdHlwZXx8XCJtaXhlZFwiPT1iLndvb2QpYSs9XCJNaXNjaHdhbGQ8YnIvPlwiO1wibGVhZmxlc3NcIj09Yi5sZWFmX3R5cGUmJihhKz1cIkJsYXR0bG9zZSBWZWdldGF0aW9uPGJyLz5cIik7XCJldmVyZ3JlZW5cIj09Yi53b29kJiYoYSs9XCJpbW1lcmdyXFx1MDBmY248YnIvPlwiKTtcbiAgICBcInBhbG1cIj09Yi53b29kJiYoYSs9XCJQYWxtZW48YnIvPlwiKTtcIm5pcGFfcGFsbVwiPT1iLndvb2QmJihhKz1cIk5pcGFwYWxtZW48YnIvPlwiKTtcImV1Y2FseXB0XCI9PWIud29vZCYmKGErPVwiRXVrYWx5cHRlbjxici8+XCIpO2lmKFwiZmlsYW9cIj09Yi53b29kfHxcImNhc3VhcmluYVwiPT1iLndvb2QpYSs9XCJLYXN1YXJpbmVuZ2V3XFx1MDBlNGNoc2U8YnIvPlwifWlmKFwidHJlZVwiPT1iLm5hdHVyYWwmJighYltcImdlbnVzOmRlXCJdJiYhYltcInNwZWNpZXM6ZGVcIl0mJmIubGVhZl90eXBlJiYoYT1cImJyb2FkbGVhdmVkXCI9PWIubGVhZl90eXBlfHxcImRlY2lkdW91c1wiPT1iLmxlYWZfdHlwZXx8XCJicm9hZGxlYWZlZFwiPT1iLmxlYWZfdHlwZT9hK1wiTGF1YmJhdW08YnIvPlwiOmErXCJOYWRlbGJhdW08YnIvPlwiKSxiLmdlbnVzJiYoYSs9Yi5nZW51cytcIjxici8+XCIpLGJbXCJnZW51czpkZVwiXSYmKGErPWJbXCJnZW51czpkZVwiXStcIjxici8+XCIpLGIuc3BlY2llcyYmKGErPWIuc3BlY2llcytcIjxici8+XCIpLGJbXCJzcGVjaWVzOmRlXCJdJiZcbihhKz1iW1wic3BlY2llczpkZVwiXStcIjxici8+XCIpLFwibGFuZG1hcmtcIj09Yi5kZW5vdGF0aW9uJiYoYSs9XCJkdXJjaCBHclxcdTAwZjZcXHUwMGRmZSB1bmQgaGVyYXVzcmFnZW5kZXIgUG9zaXRpb24gc2ljaCBkZXV0bGljaCBhdXMgc2VpbmVtIFVtZmVsZCBoZXJ2b3JoZWJlbmRlciBCYXVtLjxici8+XCIpLFwibmF0dXJhbF9tb251bWVudFwiPT1iLmRlbm90YXRpb258fFwieWVzXCI9PWIubW9udW1lbnQpKWErPVwiYWx0ZXIsIHVudGVyIGJlc29uZGVyZW0gU2NodXR6IHN0ZWhlbmRlciBCYXVtLjxici8+XCI7XCJtYW5nZXJcIj09YltcImZlZWRpbmc6dHlwZVwiXSYmKGErPVwiRnV0dGVyYmVoXFx1MDBlNGx0ZXI6IEZ1dHRlcnJhdWZlPGJyLz5cIik7XCJhdXRvbWF0ZWRcIj09YltcImZlZWRpbmc6dHlwZVwiXSYmKGErPVwiQXV0b21hdDxici8+XCIpO2lmKGJbXCJmZWVkaW5nOmZvclwiXSlzd2l0Y2goYltcImZlZWRpbmc6Zm9yXCJdKXtjYXNlIFwic2hlZXBcIjphKz1cIlRpZXI6IFNjaGFhZjxici8+XCI7YnJlYWs7Y2FzZSBcImhvcnNlXCI6YSs9XG4gICAgXCJUaWVyOiBQZmVyZDxici8+XCI7YnJlYWs7Y2FzZSBcImNvd1wiOmErPVwiVGllcjogS3VoPGJyLz5cIjticmVhaztjYXNlIFwicmFiYml0XCI6YSs9XCJUaWVyOiBLYW5pbmNoZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJidW5ueVwiOmErPVwiVGllcjogSGFzZTxici8+XCI7YnJlYWs7Y2FzZSBcImNhdFwiOmErPVwiVGllcjogS2F0emUgPC9icj5cIjticmVhaztjYXNlIFwic3dhblwiOmErPVwiVGllcjogU2Nod2FuIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImd1aW5lYSBwaWdcIjphKz1cIlRpZXI6IE1lZXJzY2h3ZWluY2hlbiA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJkb25rZXlcIjphKz1cIlRpZXI6IEVzZWwgPC9icj5cIjticmVhaztjYXNlIFwic3F1aXJyZWxcIjphKz1cIlRpZXI6IEVpY2hoXFx1MDBmNnJuY2hlbiA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJwaWdcIjphKz1cIlRpZXI6IFNjaHdlaW4gPC9icj5cIjticmVhaztjYXNlIFwiZGVlclwiOmErPVwiVGllcjogUmVoIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImd1aW5lYSBwaWdcIjphKz1cIlRpZXI6IE1lZXJzY2h3ZWluY2hlbiA8L2JyPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJtb25rZXlcIjphKz1cIlRpZXI6IEFmZmUgPC9icj5cIjticmVhaztjYXNlIFwiY2FtZWxcIjphKz1cIlRpZXI6IEthbWVsIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImdvYXRcIjphKz1cIlRpZXI6IFppZWdlIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImhhbXN0ZXJcIjphKz1cIlRpZXI6IEhhbXN0ZXIgPC9icj5cIjticmVhaztjYXNlIFwiYWxwYWNhXCI6YSs9XCJUaWVyOiBBbHBha2EgPC9icj5cIjticmVhaztkZWZhdWx0OmErPVwiVGllcmU6IG5pY2h0IGJla2FubnQ8YnIvPlwifWlmKGJbXCJmZWVkaW5nOmZvZGRlclwiXSlzd2l0Y2goYltcImZlZWRpbmc6Zm9kZGVyXCJdKXtjYXNlIFwiaGF5XCI6YSs9XCJGXFx1MDBmY3R0ZXJuIG1pdDogSGV1PC9icj5cIjticmVhaztjYXNlIFwiZ3JhaW5cIjphKz1cIkZcXHUwMGZjdHRlcm4gbWl0OiBHZXRyZWlkZTwvYnI+XCI7YnJlYWs7Y2FzZSBcImNvcm5cIjphKz1cIkZcXHUwMGZjdHRlcm4gbWl0OiBLb3JuPC8qYnI+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIkZcXHUwMGZjdHRlcm4gbWl0OiBuaWNodCBiZWthbm50PC9icj5cIn1cInZvbGNhbm9cIj09XG5iLm5hdHVyYWwmJlwiYWN0aXZlXCI9PWIuc3RhdHVzJiYoYSs9XCJBa3RpdmVyIFZ1bGthbjxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwiZG9ybWFudFwiPT1iLnN0YXR1cyYmKGErPVwiUnVoZW5kZXIgVnVsa2FuPGJyLz5cIik7XCJ2b2xjYW5vXCI9PWIubmF0dXJhbCYmXCJleHRpbmN0XCI9PWIuc3RhdHVzJiYoYSs9XCJFcmxvc2NoZW5lciBWdWxrYW48YnIvPlwiKTtcInZvbGNhbm9cIj09Yi5uYXR1cmFsJiZcInN0cmF0b3ZvbGNhbm9cIj09Yi50eXBlJiYoYSs9XCJWdWxrYW50eXA6U2NoaWNodHZ1bGthbjxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwic2hpZWxkXCI9PWIudHlwZSYmKGErPVwiVnVsa2FudHlwOlNjaGlsZHZ1bGthbjxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwic2NvcmlhXCI9PWIudHlwZSYmKGErPVwiVnVsa2FudHlwOlNjaGxhY2tlbi0gdW5kIEFzY2hlbmtlZ2VsPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudFByb3RlY3RlZEFyZWE9ZnVuY3Rpb24oYil7dmFyIGE9XG4gICAgXCJcIixjPVwiXCI7XCJwcm90ZWN0ZWRfYXJlYVwiPT1iLmJvdW5kYXJ5JiYoYi5wcm90ZWN0X2NsYXNzJiYoYz1iLnByb3RlY3RfY2xhc3MpLGIucHJvdGVjdF9pZCYmKGM9Yi5wcm90ZWN0X2lkKSxcIjFcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFN0cmVuZ2VzIE5hdHVycmVzZXJ2YXQsIFdpbGRuaXNnZWJpZXQ8YnIvPlwiKSxcIjJcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IE5hdGlvbmFscGFyazxici8+XCIpLFwiM1wiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogTmF0dXJtb251bWVudDxici8+XCIpLFwiNFwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogQmlvdG9wL0FydGVuc2NodXR6Z2ViaWV0IG1pdCBNYW5hZ2VtZW50PGJyLz5cIiksXCI1XCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBHZXNjaFxcdTAwZmN0enRlIExhbmRzY2hhZnQvR2VzY2hcXHUwMGZjdHp0ZXMgbWFyaW5lcyBHZWJpZXQ8YnIvPlwiKSxcIjZcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFJlc3NvdXJjZW5zY2h1dHpnZWJpZXQgbWl0IE1hbmFnZW1lbnQ8YnIvPlwiKSxcblwiN1wiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogTG9rYWwgZ2VzY2hcXHUwMGZjdHp0ZSBCZXJlaWNoZTxici8+XCIpLFwiOTdcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IEdlc2NoXFx1MDBmY3R6dCBvZGVyIGF1c2dlemVpY2huZXQgZHVyY2ggVmVyZWluYmFydW5nZW4gYXVmIGtvbnRpbmVudGFsZXIgRWJlbmU8YnIvPlwiKSxcIjk4XCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBHZXNjaFxcdTAwZmN0enQgb2RlciBhdXNnZXplaWNobmV0IGR1cmNoIHp3aXNjaGVuc3RhYXRsaWNoZS0gb2RlciBpbnRlcm5hdGlvbmFsZSBWZXJlaW5iYXJ1bmdlbjxici8+XCIpLFwiOTlcIj09YyYmKGE9XCJhbmRlcmUgPGJyLz5cIiksXCIyMVwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogR2VtZWluZGViZWZpbmRlbiAoaGVpbGlnZSBPcnRlLCBhc3NvemlhdGljZSBPcnRlKTxici8+XCIpLFwiMjJcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IEt1bHR1cmVsbGUgV2VydGUgKEt1bHR1cmdcXHUwMGZjdGVyLCBoaXN0b3Jpc2NoZXMgRXJiZSwgRGVua21hbHNjaHV0eik8YnIvPlwiKSxcblwiMjNcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFNjaHV0eiB6dSBHdW5kc3RlbiBkZXIgV2lydHNjaGFmdDxici8+XCIpLFwiMjRcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFBvbGl0aXNjaGUgU2NodXR6Z2ViaWV0ZTxici8+XCIpLFwiMjVcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IE1pbGl0XFx1MDBlNHJpc2NoZSBTY2h1dHpnZWJpZXRlPGJyLz5cIiksXCIyNlwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogSGlzdG9yaXNjaGUgU2NodXR6Z2ViaWV0ZTxici8+XCIpLFwiMjlcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFdlaXRlcmUgZ2VzZWxsc2NoYWZ0bGljaGUgU2NodXR6Z2ViaWV0ZTxici8+XCIpLFwiMTFcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IEJvZGVuc2NodXR6IChWb3JnYWJlIHp1bSBGcnVjaHRiYXJrZWl0c2VyaGFsdCB1bmQgRXJvc2lvbnNzY2h1dHopPGJyLz5cIiksXCIxMlwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogV2Fzc2Vyc2NodXR6Z2ViaWV0IChUcmlua3dhc3NlcnNjaHV0emdlYmlldCwgSGVpbHF1ZWxsZW5zY2h1dHpnZWJpZXQsLi4pPGJyLz5cIiksXG5cIjEzXCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBLbGltYSB1bmQgTHVmdCAoS2FsdGx1ZnRlbnN0ZWh1bmcvRnJpc2NobHVmdHZlcnNvcmd1bmcsIEltbWlzc2lvbnNzY2h1dHosLi4pPGJyLz5cIiksXCIxNFwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogQXJ0ZW5zY2h1dHpnZWJpZXQgKEFuZ2VsdmVyYm90LCBGaXNjaGVyZWlzY2h1dHp6b25lLCBKYWdkc2NodXR6Z2ViaWV0LCBWb2dlbHNjaHV0emdlYmlldCwuLik8YnIvPlwiKSxcIjE1XCI9PWMmJihhPSdCZXNjaHJlaWJ1bmc6IFwiU3RhbmRvcnRhdXNzdGF0dHVuZ1wiOiBSZXRlbnRpb25zcmF1bSAoZ2VzZXR6bGljaCBnZXNjaFxcdTAwZmN0enRlcyBcXHUwMGRjYmVyc2Nod2VtbXVuZ3NnZWJpZXQpIDxici8+JyksXCIxNlwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogRGF1ZXJoYWZ0ZSBHZWZhaHJlbmJlcmVpY2hlIChMZWJlbnNzY2h1dHosIEJvZGVuYmV3ZWd1bmdzZ2ViaWV0LC4uKTxici8+XCIpLFwiMTlcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFdlaXRlcmUgbmF0aW9uYWxlIEdlYmlldGU8YnIvPlwiKSk7XG4gICAgcmV0dXJuIGF9LGZuQ29udGVudExhbmR1c2U9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtcInF1YXJyeVwiPT1iLmxhbmR1c2UmJmIucmVzb3VyY2UmJihhKz1cIlJlc291cmNlOiBcIitiLnJlc291cmNlK1wiPGJyLz5cIik7XCJvcGVuX3N0YWJsZVwiPT1iW1wiYW5pbWFsX2tlZXBpbmc6dHlwZVwiXSYmKGErPVwiT2ZmZW5zdGFsbDxici8+XCIpO1wiZmllbGRfc2hlbHRlclwiPT1iW1wiYW5pbWFsX2tlZXBpbmc6dHlwZVwiXSYmKGErPVwiV2VpZGUgbWl0IFVudGVyc3RhbmQ8YnIvPlwiKTtcInBhZGRvY2tcIj09YltcImFuaW1hbF9rZWVwaW5nOnR5cGVcIl0mJihhKz1cIlBhZGRvY2s8YnIvPlwiKTtiLmFuaW1hbF9rZWVwaW5nJiYoYSs9XCJUaWVyZTogUGVyZGU8YnIvPlwiKTtyZXR1cm4gYX0sZm5NZXNzc3RhdGlvbj1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO1wieWVzXCI9PWJbXCJtb25pdG9yaW5nOndhdGVyX2xldmVsXCJdJiYoYSs9XCJQZWdlbHN0YW5kPGJyLz5cIik7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6c2Vpc21pY19hY3Rpdml0eVwiXSYmXG4oYSs9XCJzZWlzbWlzY2hlIEFrdGl2aXRcXHUwMGU0dGVuPGJyLz5cIik7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6dGlkZV9nYXVnZVwiXSYmKGErPVwiVGlkZXN0YW5kPGJyLz5cIik7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6d2VhdGhlclwiXSYmKGErPVwiV2V0dGVyZGF0ZW48YnIvPlwiKTtcInllc1wiPT1iW1wibW9uaXRvcmluZzphaXJfcXVhbGl0eVwiXSYmKGErPVwiTHVmdHF1YWxpdFxcdTAwZTR0PGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudFJvdXRlPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7Yi5yb3V0ZSYmKFwieWVzXCI9PWIucm91bmR0cmlwJiYoYSs9XCJSdW5kd2VnPGJyLz5cIiksYi5sZW5ndGgmJihhKz1cIkxcXHUwMGU0bmdlL0Rpc3Rhbno6IFwiK2IubGVuZ3RoK1wiPGJyLz5cIiksYi5kaXN0YW5jZSYmKGErPVwiTFxcdTAwZTRuZ2UvRGlzdGFuejogXCIrYi5kaXN0YW5jZStcIjxici8+XCIpLGIuc3ltYm9sJiYoYSs9XCJTeW1ib2w6IFwiK2Iuc3ltYm9sK1wiPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRQZXRyb2w9ZnVuY3Rpb24oYil7dmFyIGE9XG4gICAgXCJcIjtcImZ1ZWxcIj09Yi5hbWVuaXR5JiYoXCJ5ZXNcIj09YltcImZ1ZWw6YmlvZGllc2VsXCJdJiYoYSs9XCJCaW9kaWVzZWw8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDplODVcIl0mJihhKz1cIkV0aGFub2w8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDplMTBcIl0mJihhKz1cIkUxMDxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmxwZ1wiXSYmKGErPVwiQXV0b2dhczxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmNuZ1wiXSYmKGErPVwiRXJkZ2FzPGJyLz5cIiksXCJkaWVzZWxcIj09Yi5mdWVsJiYoYSs9XCJEaWVzZWw8YnIvPlwiKSxcImxwZ1wiPT1iLmZ1ZWwmJihhKz1cIkF1dG9nYXM8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpvY3RhbmVfOTVcIl0mJihhKz1cIlN1cGVyIEJsZWlmcmVpPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6b2N0YW5lXzk4XCJdJiYoYSs9XCJTdXBlciBQbHVzPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6b2N0YW5lXzEwMFwiXSYmKGErPVwiVi1Qb3dlciBSYWNpbmc8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpvY3RhbmVfMTAyXCJdJiYoYSs9XG4gICAgXCJVbHRpbWF0ZTxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmRpZXNlbFwiXSYmKGErPVwiRGllc2VsPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6ZWxlY3RyaWNpdHlcIl0mJihhKz1cIkxhZGVzdGF0aW9uIC8gU3Ryb210YW5rc3RlbGxlPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRIaXN0b3JpYz1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKFwiYXJjaGFlb2xvZ2ljYWxfc2l0ZVwiPT1iLmhpc3RvcmljJiZiLnNpdGVfdHlwZSlzd2l0Y2goYi5zaXRlX3R5cGUpe2Nhc2UgXCJtZWdhbGl0aFwiOmErPVwiTWVnYWxpdGg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJiaWdzdG9uZVwiOmErPVwiRmluZGxpbmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0dW11bHVzXCI6YSs9XCJIXFx1MDBmY2dlbGdyYWI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmb3J0aWZpY2F0aW9uXCI6YSs9XCJoaXN0b3Jpc2NoZXIgR3JhYmVuIC8gV2FsbDxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVuYmVrYW5udDxici8+XCJ9cmV0dXJuIGF9LGZuQ29udGVudEJhcnJpZXJzPVxuICAgIGZ1bmN0aW9uKGIsYSl7dmFyIGM9XCJcIjtpZihcIndhbGxcIj09Yi5iYXJyaWVyfHxcImJvbGxhcmRcIj09Yi5iYXJyaWVyKWIubWF0ZXJpYWwmJihjKz1cIk1hdGVyaWFsOiBcIit0cmFuc2xhdGUoYi5tYXRlcmlhbCkrXCI8YnIvPlwiKTtyZXR1cm4gY30sZm5Db250ZW50VG91cmlzbT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKFwiY2FtcF9zaXRlXCI9PWIudG91cmlzbSl7XCJ5ZXNcIj09Yi5kb2cmJihhKz1cIkh1bmRlIGVybGF1YnQ8YnIvPlwiKTtcIm5vXCI9PWIuZG9nJiYoYSs9XCJIdW5kZSBuaWNodCBlcmxhdWJ0PGJyLz5cIik7Yi5zdGFycyYmKGErPWIuc3RhcnMrXCJTdGVybmU8YnIvPlwiKTtiLmNhcmF2YW5zJiYoYSs9XCJXb2hubW9iaWxzdGVsbHBsXFx1MDBlNHR6ZTxici8+XCIpO2lmKFwieWVzXCI9PWIub3BlbmZpcmV8fFwieWVzXCI9PWIuZmlyZXBsYWNlKWErPVwiRmV1ZXJzdGVsbGVuIHZvcmhhbmRlbjxici8+XCI7XCJ5ZXNcIj09Yi53YXNoaW5nX21hY2hpbmUmJihhKz1cIldhc2NobWFzY2hpbmVuPGJyLz5cIik7XCJ5ZXNcIj09XG5iLmRyeWVyJiYoYSs9XCJUcm9ja25lcjxici8+XCIpO1wieWVzXCI9PWIuZ3JvdXBfb25seSYmKGErPVwiTnV0enVuZyBudXIgZHVyY2ggR3J1cHBlbjxici8+XCIpO1wicmVjZXB0aW9uXCI9PWIuY2FtcF9zaXRlJiYoYSs9XCJSZWNlcHRpb24gdm9yaGFuZGVuPGJyLz5cIil9XCJpbmZvcm1hdGlvblwiPT1iLnRvdXJpc20mJlwibWFwXCI9PWIuaW5mb3JtYXRpb24mJihcInRvcG9cIj09Yi5tYXBfdHlwZSYmKGErPVwiVG9wb2dyYWZpc2NoZSBLYXJ0ZTwvYnI+XCIpLFwic3RyZWV0XCI9PWIubWFwX3R5cGUmJihhKz1cIlN0cmFcXHUwMGRmZW5rYXJ0ZTwvYnI+XCIpLFwic2NoZW1lXCI9PWIubWFwX3R5cGUmJihhKz1cIlNjaGVtYXRpc2NoZSBLYXJ0ZTwvYnI+XCIpLFwidG9wb3Njb3BlXCI9PWIubWFwX3R5cGUmJihhKz1cIlNjaGVtYXRpc2NoZSBLYXJ0ZTwvYnI+XCIpKTtcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSYmXCJtYXBcIj09Yi5pbmZvcm1hdGlvbiYmKFwic2l0ZVwiPT1iLm1hcF9zaXplJiYoYSs9XCJLYXJ0ZSBlaW5lciBBbmxhZ2U8L2JyPlwiKSxcblwiY2l0eVwiPT1iLm1hcF9zaXplJiYoYSs9XCJTdGFkdHBsYW48L2JyPlwiKSxcInJlZ2lvblwiPT1iLm1hcF9zaXplJiYoYSs9XCJLYXJ0ZSBkZXIgUmVnaW9uPC9icj5cIikpO1wiZ2VvbG9neVwiPT1iLmJvYXJkX3R5cGUmJihhKz1cIkdlb2xvZ2lzY2hlIEluZm9ybWF0aW9uZW48YnIvPlwiKTtcImhpc3RvcnlcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJIaXN0b3Jpc2NoZSBJbmZvcm1hdGlvbmVuPGJyLz5cIik7XCJuYXR1cmVcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJJbmZvcm1hdGlvbmVuIFxcdTAwZmNiZXIgTmF0dXI8YnIvPlwiKTtcIm5vdGljZVwiPT1iLmJvYXJkX3R5cGUmJihhKz1cIkFsbGdlbWVpbmUgSW5mb3JtYXRpb248YnIvPlwiKTtcInBsYW50c1wiPT1iLmJvYXJkX3R5cGUmJihhKz1cIkluZm9ybWF0aW9uZW4gXFx1MDBmY2JlciBQZmxhbnplbjxici8+XCIpO1wid2lsZGxpZmVcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJJbmZvcm1hdGlvbmVuIFxcdTAwZmNiZXIgV2lsZDxici8+XCIpO3JldHVybiBhfSxmbkNvbnRlbnRBbWVuaXR5PVxuICAgIGZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJib2F0X3NoYXJpbmdcIj09Yi5hbWVuaXR5JiYoYSs9Yi5ib2F0dHlwZStcIjxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJihhKz1iLmNvdW50cnkrXCI8YnIvPlwiKTtpZihiLnZlbmRpbmcpc3dpdGNoKGIudmVuZGluZyl7Y2FzZSBcImFkbWlzc2lvbl90aWNrZXRzXCI6YSs9XCJUaWNrZXRzPGJyLz5cIjticmVhaztjYXNlIFwiYW5pbWFsX2ZlZWRcIjphKz1cIlRpZXJmdXR0ZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJib29rc1wiOmErPVwiQlxcdTAwZmNjaGVyPGJyLz5cIjticmVhaztjYXNlIFwiY2FuZGxlc1wiOmErPVwiS2VyemVuPGJyLz5cIjticmVhaztjYXNlIFwiY2lnYXJldHRlc1wiOmErPVwiWmlnYXJldHRlbjxici8+XCI7YnJlYWs7Y2FzZSBcImNvbmRvbXNcIjphKz1cIktvbmRvbWU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkcmlua3NcIjphKz1cIkdldHJcXHUwMGU0bmtlPGJyLz5cIjticmVhaztjYXNlIFwiZmlyc3RfYWlkXCI6YSs9XCJFcnN0ZSBIaWxmZSBBcnRpa2VsPGJyLz5cIjticmVhaztcbiAgICAgICAgY2FzZSBcImZpc2hpbmdfdGFja2xlXCI6YSs9XCJBbmdlbGVxdWlwbWVudDxici8+XCI7YnJlYWs7Y2FzZSBcImZsb3dlcnNcIjphKz1cIkJsdW1lbjxici8+XCI7YnJlYWs7Y2FzZSBcImljZV9jcmVhbVwiOmErPVwiRWlzPGJyLz5cIjticmVhaztjYXNlIFwibGF1bmRyeV9kZXRlcmdlbnRcIjphKz1cIldhc2NobWl0dGVsPGJyLz5cIjticmVhaztjYXNlIFwibmV3c3BhcGVyc1wiOmErPVwiWmVpdHVuZzxici8+XCI7YnJlYWs7Y2FzZSBcIlNJTV9jYXJkc1wiOmErPVwiU0lNLUthcnRlbjxici8+XCI7YnJlYWs7Y2FzZSBcInN3ZWV0c1wiOmErPVwiU1xcdTAwZmNcXHUwMGRmaWdrZWl0ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXJjZWxfcGlja3VwXCI6YSs9XCJQYWtldHN0YXRpb248YnIvPlwiO2JyZWFrO2Nhc2UgXCJpY2VfY3ViZXNcIjphKz1cIkVpc3dcXHUwMGZjcmZlbDxici8+XCI7YnJlYWs7Y2FzZSBcInB1YmxpY190cmFuc3BvcnRfdGlja2V0c1wiOmErPVwiVGlja2V0cyBmXFx1MDBmY3IgXFx1MDBmNmZmZW50bGljaGUgVmVya2VocnNtaXR0ZWw8YnIvPlwiO1xuICAgICAgICAgICAgYnJlYWs7Y2FzZSBcInBhcmtpbmdfdGlja2V0XCI6YSs9XCJQYXJrdGlja2V0PGJyLz5cIjticmVhaztjYXNlIFwic2V4X3RveXNcIjphKz1cIlNleHNwaWVsemV1Zzxici8+XCI7YnJlYWs7Y2FzZSBcInN0YW1wc1wiOmErPVwiQnJpZWZtYXJrZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b2xsXCI6YSs9XCJNYXV0dGlja2V0czxici8+XCI7YnJlYWs7Y2FzZSBcInVtYnJlbGxhc1wiOmErPVwiUmVnZW5zY2hpcm1lPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiSW5oYWx0IHVuYmVrYW5udDxici8+XCJ9XCJwb3N0X2JveFwiPT1iLmFtZW5pdHkmJihiLmNvbGxlY3Rpb25fdGltZXMmJihhKz1cIkxlZXJ1bmdzemVpdGVuOiBcIitiLmNvbGxlY3Rpb25fdGltZXMrXCI8YnIvPlwiKSxcInllc1wiPT1iLmRyaXZlX3Rocm91Z2gmJihhKz1cIlZvbSBBdXRvIGF1cyBlcnJlaWNoYmFyLiA8YnIvPlwiKSk7cmV0dXJuIGF9LGZuQ29udGVudFN0b3JhZ2U9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcInN0b3JhZ2VfdGFua1wiPT1iLm1hbl9tYWRlKXtpZihiLmNvbnRlbnQpe3ZhciBjPVxuICAgIGIuY29udGVudDtzd2l0Y2goYyl7Y2FzZSBcImZ1ZWxcIjpjPVwiRGllc2VsXCI7YnJlYWs7Y2FzZSBcIm9pbFwiOmM9XCJcXHUwMGQ2bFwiO2JyZWFrO2Nhc2UgXCJnYXNcIjpjPVwiR2FzXCI7YnJlYWs7Y2FzZSBcInNsdXJyeVwiOmM9XCJHXFx1MDBmY2xsZVwiO2JyZWFrO2Nhc2UgXCJjZW1lbnRcIjpjPVwiWmVtZW50XCI7YnJlYWs7Y2FzZSBcIndhdGVyXCI6Yz1cIldhc3NlclwiO2JyZWFrO2Nhc2UgXCJtYW51cmVcIjpjPVwiRFxcdTAwZmNuZ2VyXCI7YnJlYWs7Y2FzZSBcInNpbGFnZVwiOmM9XCJTaWxhZ2VcIn1hKz1cIkluaGFsdDogXCIrYytcIjxici8+XCJ9aWYoYi5jb250ZW50cyl7Yz1iLmNvbnRlbnRzO3N3aXRjaChjKXtjYXNlIFwiZnVlbFwiOmM9XCJEaWVzZWxcIjticmVhaztjYXNlIFwib2lsXCI6Yz1cIlxcdTAwZDZsXCI7YnJlYWs7Y2FzZSBcImdhc1wiOmM9XCJHYXNcIjticmVhaztjYXNlIFwic2x1cnJ5XCI6Yz1cIkdcXHUwMGZjbGxlXCI7YnJlYWs7Y2FzZSBcImNlbWVudFwiOmM9XCJaZW1lbnRcIjticmVhaztjYXNlIFwid2F0ZXJcIjpjPVwiV2Fzc2VyXCI7YnJlYWs7XG4gICAgY2FzZSBcIm1hbnVyZVwiOmM9XCJEXFx1MDBmY25nZXJcIjticmVhaztjYXNlIFwic2lsYWdlXCI6Yz1cIlNpbGFnZVwifWErPVwiSW5oYWx0OiBcIitjK1wiPGJyLz5cIn19Yi5zdG9yYWdlJiYoXCJnYXNcIj09Yi5zdG9yYWdlJiYoYSs9XCJJbmhhbHQ6IEdhczxici8+XCIpLFwib2lsXCI9PWIuc3RvcmFnZSYmKGErPVwiSW5oYWx0OiBcXHUwMGQ2bDxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50SW5mb3JtYXRpb25DaXR5PWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7YltcIm5hbWU6ZGVcIl0mJihhKz1cImRldXRzY2hlciBOYW1lOiBcIitiW1wibmFtZTpkZVwiXStcIjxici8+XCIpO2lmKDFFNDw9Yi5wb3B1bGF0aW9uKWlmKGIucG9wdWxhdGlvbj1cIlwiK2IucG9wdWxhdGlvbiwzPGIucG9wdWxhdGlvbi5sZW5ndGgpe3ZhciBjPWIucG9wdWxhdGlvbi5sZW5ndGglMyxkPTA8Yz9iLnBvcHVsYXRpb24uc3Vic3RyaW5nKDAsYyk6XCJcIjtmb3IoaT0wO2k8TWF0aC5mbG9vcihiLnBvcHVsYXRpb24ubGVuZ3RoLzMpO2krKylkPTA9PWMmJjA9PVxuaT9kK2IucG9wdWxhdGlvbi5zdWJzdHJpbmcoYyszKmksYyszKmkrMyk6ZCsoXCIuXCIrYi5wb3B1bGF0aW9uLnN1YnN0cmluZyhjKzMqaSxjKzMqaSszKSk7YSs9XCJFaW53b2huZXJ6YWhsOiBcIitkK1wiPGJyLz5cIn1lbHNlIGErPVwiRWlud29obmVyemFobCBcIitiLnBvcHVsYXRpb24rXCI8YnIvPlwiOzFFND49Yi5wb3B1bGF0aW9uJiYoYSs9XCJFaW53b2huZXJ6YWhsOiBcIitiLnBvcHVsYXRpb24rXCI8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50RW1lcmdlbmN5PWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7Yi5saWZlYm9hdCYmKFwiaW5zaG9yZVwiPT1iLmxpZmVib2F0P2ErPVwiRWluc2F0emdlYmlldDogSW5zaG9yZSAoQmlubmVuKTxici8+XCI6XCJvZmZzaG9yZVwiPT1iLmxpZmVib2F0JiYoYSs9XCJFaW5zYXR6Z2ViaWV0OiBPZmZzaG9yZSAoQnV0ZW4pPGJyLz5cIikpO2JbXCJsaWZlYm9hdDpjbGFzc1wiXSYmKGErPVwiQm9vdHN0eXA6IFwiK2JbXCJsaWZlYm9hdDpjbGFzc1wiXStcIjxici8+XCIpO2lmKGJbXCJzaXJlbjp0eXBlXCJdKXt2YXIgYz1cbiAgICBiW1wic2lyZW46dHlwZVwiXTtzd2l0Y2goYyl7Y2FzZSBcIm1lY2hhbmljYWxcIjpjPVwibWVjaGFuaXNjaFwiO2JyZWFrO2Nhc2UgXCJlbGVjdHJvbmljXCI6Yz1cImVsZWt0cm9uaXNjaFwiO2JyZWFrO2Nhc2UgXCJwbmV1bWF0aWNcIjpjPVwicG5ldW1hdGlzY2hcIjticmVhaztjYXNlIFwiZWxlY3Ryb21lY2hhbmljXCI6Yz1cImVsZWt0cm9tZWNoYW5pc2NoXCJ9YSs9XCJUeXA6IFwiK2MrXCI8YnIvPlwifWlmKGJbXCJzaXJlbjpwdXJwb3NlXCJdKXtjPWJbXCJzaXJlbjpwdXJwb3NlXCJdO3N3aXRjaChjKXtjYXNlIFwiYWlyX3JhaWRcIjpjPVwiTHVmdHNjaHV0elwiO2JyZWFrO2Nhc2UgXCJ0b3JuYWRvXCI6Yz1cIlRvcm5hZG9cIjticmVhaztjYXNlIFwic3Rvcm1cIjpjPVwiU3R1cm1cIjticmVhaztjYXNlIFwiY2l2aWxfZGVmZW5zZVwiOmM9XCJCZXZcXHUwMGY2bGtlcnVuZ3NzY2h1dHpcIjticmVhaztjYXNlIFwiZmlyZVwiOmM9XCJGZXVlclwifWErPVwiTnV0enVuZzogXCIrYytcIjxici8+XCJ9YltcInNpcmVuOm1vZGVsXCJdJiYoYSs9XCJNb2RlbDogXCIrYltcInNpcmVuOm1vZGVsXCJdK1xuICAgIFwiPGJyLz5cIik7YltcInNpcmVuOnJhbmdlXCJdJiYoYSs9XCJIXFx1MDBmNnJ3ZWl0ZTogXCIrYltcInNpcmVuOnJhbmdlXCJdK1wiPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEN1aXNpbmU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihiLmN1aXNpbmUpe3ZhciBjPVwiXCIsYT0oXCJzdXBlcm1hcmtldFwiPT1iLnNob3B8fFwiY29udmVuaWVuY2VcIj09Yi5zaG9wfHxcImRlbGlcIj09Yi5zaG9wfHxcIm9yZ2FuaWNcIj09Yi5zaG9wKSYmXCJyZXN0YXVyYW50XCIhPWIuYW1lbml0eT9hK1wiU3BlemlhbGl0XFx1MDBlNHRlbjogXCI6YStcIktcXHUwMGZjY2hlOiBcIjtcImFyYWJpY1wiPT1iLmN1aXNpbmUmJihjKz1cImFyYWJpc2NoPGJyLz5cIik7XCJpdGFsaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGl0YWxpZW5pc2NoPGJyLz5cIik7XCJpbnRlcm5hdGlvbmFsXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGludGVybmF0aW9uYWw8YnIvPlwiKTtcInJlZ2lvbmFsXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHJlZ2lvbmFsPGJyLz5cIik7XCJjaGluZXNlXCI9PWIuY3Vpc2luZSYmXG4oYys9XCIgY2hpbmVzaXNjaDxici8+XCIpO1wiZ3JlZWtcIj09Yi5jdWlzaW5lJiYoYys9XCIgZ3JpZWNoaXNjaDxici8+XCIpO1wiYWZyaWNhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBhZnJpa2FuaXNjaDxici8+XCIpO1wiZ2VybWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGRldXRzY2g8YnIvPlwiKTtcIm1leGljYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgbWV4aWthbmlzY2g8YnIvPlwiKTtcImZyZW5jaFwiPT1iLmN1aXNpbmUmJihjKz1cIiBmcmFuelxcdTAwZjZzaXNjaDxici8+XCIpO1wiaW5kaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGluZGlzY2g8YnIvPlwiKTtcImlyYW5pYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgaXJhbmlzY2g8YnIvPlwiKTtcImxlYmFuZXNlXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGxpYmFuZXNpc2NoPGJyLz5cIik7XCJ0aGFpXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHRoYWlsXFx1MDBlNG5kaXNjaDxici8+XCIpO1wiYmFsa2FuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGJhbGthbjxici8+XCIpO1widHVya2lzaFwiPT1iLmN1aXNpbmUmJlxuKGMrPVwiIHRcXHUwMGZjcmtpc2NoPGJyLz5cIik7XCJiYXZhcmlhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBiYXlyaXNjaDxici8+XCIpO1wiY3plY2hcIj09Yi5jdWlzaW5lJiYoYys9XCIgdHNjaGVjaGlzY2g8YnIvPlwiKTtcInBvcnR1Z3Vlc2VcIj09Yi5jdWlzaW5lJiYoYys9XCIgcG9ydHVnaWVzaXNjaDxici8+XCIpO1wic3BhbmlzaFwiPT1iLmN1aXNpbmUmJihjKz1cIiBzcGFuaXNjaDxici8+XCIpO1wiamFwYW5lc2VcIj09Yi5jdWlzaW5lJiYoYys9XCIgamFwYW5pc2NoPGJyLz5cIik7XCJmaXNoXCI9PWIuY3Vpc2luZSYmKGMrPVwiIEZpc2NoPGJyLz5cIik7XCJicmF6aWxpYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgYnJhc2lsaWFuaXNjaDxici8+XCIpO1wiYXNpYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgYXNpYXRpc2NoPGJyLz5cIik7XCJtZWRpdGVycmFuZWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIG1lZGl0ZXJyYW48YnIvPlwiKTtcInNlYWZvb2RcIj09Yi5jdWlzaW5lJiYoYys9XCIgTWVlcmVzZnJcXHUwMGZjY2h0ZTxici8+XCIpO1wiaWNlX2NyZWFtXCI9PVxuYi5jdWlzaW5lJiYoYys9XCIgRWlzY3JlbTxici8+XCIpO1wiYnVyZ2VyXCI9PWIuY3Vpc2luZSYmKGMrPVwiIEZhc3QgRm9vZDxici8+XCIpO1wiZnJvemVuX3lvZ3VydFwiPT1iLmN1aXNpbmUmJihjKz1cIiBGcm96ZW4gWW9ndXJ0PGJyLz5cIik7XCJcIj09YyYmKGM9Yi5jdWlzaW5lK1wiPGJyLz5cIik7YSs9Y31yZXR1cm4gYX0sZm5Db250ZW50U2hpcHBpbmc9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtiLmhhcmJvdXI9XCJ5ZXNcIjtcInllc1wiPT1iW1wiYWNjZXNzOnRpZGVcIl0mJihhKz1cIlp1ZmFocnRzYmVzY2hyXFx1MDBlNG5rdW5nIGR1cmNoIFRpZGU8L2JyPlwiKTtcInllc1wiPT1iW1wiYWNjZXNzOnN3ZWxsXCJdJiYoYSs9XCJadWZhaHJ0c2Jlc2NoclxcdTAwZTRua3VuZyBkdXJjaCBTY2h3ZWxsPC9icj5cIik7XCJ5ZXNcIj09YltcImFjY2VzczppY2VcIl0mJihhKz1cIlp1ZmFocnRzYmVzY2hyXFx1MDBlNG5rdW5nIGR1cmNoIEVpczwvYnI+XCIpO2IudmhmX2NoYW5uZWwmJihhKz1cIlVLVy1LYW5hbDogXCIrYi52aGZfY2hhbm5lbCtcbiAgICBcIjwvYnI+XCIpO2IubW1zaSYmKGErPVwiTU1TSS1OdW1tZXI6IFwiK2IubW1zaStcIjwvYnI+XCIpO2JbXCJoYXJib3VyOmluZm9ybWF0aW9uXCJdJiYoYSs9XCJJbmZvcm1hdGlvbiA6XCIrYltcImhhcmJvdXI6aW5mb3JtYXRpb25cIl0rXCI8L2JyPlwiKTtcInllc1wiPT1iLm1vdG9yYm9hdCYmKGErPVwiRmFocmVuIG1pdCBNb3RvciBlcmxhdWJ0PC9icj5cIik7XCJub1wiPT1iLm1vdG9yYm9hdCYmKGErPVwiRmFocmVuIG1pdCBNb3RvciBuaWNodCBlcmxhdWJ0PC9icj5cIik7Yi5DRU1UJiYoYSs9XCJDRU1UOiBcIitiLkNFTVQrXCI8L2JyPlwiKTtcInllc1wiPT1iLmludGVybWl0dGVudCYmKGErPVwiRmx1c3MgemVpdHdlaXNlIGF1c2dldHJvY2tuZXQ8L2JyPlwiKTtcInllc1wiPT1iLnRpZGFsJiYoYSs9XCJHZXplaXRlbiBiZWVpbmZsdXNzZW4gZGllIFN0clxcdTAwZjZtdW5nPC9icj5cIik7Yi5kcmFmdCYmKGErPVwiRmFocndhc3NlcnRpZWZlOiBcIitiLmRyYWZ0K1wiIG08L2JyPlwiKTtpZihcInNsaXB3YXlcIj09Yi5sZWlzdXJlfHxcInNsaXB3YXlcIj09XG4gICAgYi5oYXJib3VyKVwiaGFuZFwiPT1iLm9wZXJhdGluZyYmKGErPVwiRnVua3Rpb25zd2Vpc2U6IEhhbmRiZXRyaWViLCBTbGlwd2FnZW48YnIvPlwiKSxcImNhclwiPT1iLm9wZXJhdGluZyYmKGErPVwiRnVua3Rpb25zd2Vpc2U6IG1pdCBBdXRvLCBCb290c2FuaFxcdTAwZTRuZ2VyPGJyLz5cIiksXCJjYWJsZV93aW5jaFwiPT1iLm9wZXJhdGluZyYmKGErPVwiRnVua3Rpb25zd2Vpc2U6IFNlaWx3aW5kZTxici8+XCIpLFwidHJhdmVsbGlmdFwiPT1iLm9wZXJhdGluZyYmKGErPVwiRnVua3Rpb25zd2Vpc2U6IFRyYXZlbGxpZnQ8YnIvPlwiKSxcImNyYW5lXCI9PWIubWFuX21hZGUmJihhKz1cIm1pdCBLcmFuPGJyLz5cIixiW1wiY3JhbmU6bWF4bG9hZFwiXSYmKGErPVwiTWF4aW1hbGUgTGFzdDogXCIrYltcImNyYW5lOm1heGxvYWRcIl0rXCI8YnIvPlwiKSxiW1wic2hpcDptYXhkcmFmdFwiXSYmKGErPVwiTWF4aW1hbGVyIFRpZWZnYW5nOiBcIitiW1wic2hpcDptYXhkcmFmdFwiXStcIjxici8+XCIpLGJbXCJzaGlwOm1heGxlbmd0aFwiXSYmKGErPVxuICAgIFwiTWF4aW1hbGUgQm9vdHNsXFx1MDBlNG5nZTogXCIrYltcInNoaXA6bWF4bGVuZ3RoXCJdK1wiPGJyLz5cIikpLFwieWVzXCI9PWIudmVoaWNsZSYmKGErPVwiTWl0IEZhaHJ6ZXVnIGVycmVpY2hiYXI8YnIvPlwiKTthKz1mbldyZWNrSW5mbyhiKTtpZihcImZlcnJ5XCI9PWIucm91dGV8fFwiZmVycnlfdGVybWluYWxcIj09Yi5hbWVuaXR5fHxcInllc1wiPT1iLmZlcnJ5KXt2YXIgYz1iLmR1cmF0aW9uO1wiXCIhPWMmJihcInVuZGVmaW5lZFwiIT1jJiZudWxsIT1jKSYmKGErPVwiRmFocnR6ZWl0IGluIFN0ZC4gOiBcIitjK1wiPGJyLz5cIik7XCJ5ZXNcIj09Yi5tb3RvcmNhciYmKGErPVwiQXV0b3MgZXJsYXVidCA8YnIvPlwiKTtcIm5vXCI9PWIubW90b3JjYXImJihhKz1cIkF1dG9zIG5pY2h0IGVybGF1YnQgPGJyLz5cIik7XCJub1wiPT1iLm1vdG9yX3ZlaGljbGUmJihhKz1cIkZhaHJ6ZXVnZSBuaWNodCBlcmxhdWJ0IDxici8+XCIpO1wieWVzXCI9PWIubW90b3JfdmVoaWNsZSYmKGErPVwiRmFocnpldWdlIGVybGF1YnQgPGJyLz5cIik7XCJ5ZXNcIj09XG5iLnZlaGljbGUmJihhKz1cIkZhaHJ6ZXVnZSBlcmxhdWJ0IDxici8+XCIpO1wibm9cIj09Yi52ZWhpY2xlJiYoYSs9XCJLZWluZSBGYWhyemV1Z2U8YnIvPlwiKTtcIm5vXCI9PWIuYmljeWNsZSYmKGErPVwiS2VpbmUgRmFocnJcXHUwMGU0ZGVyPGJyLz5cIik7XCJub1wiPT1iLmJpY3ljbGUmJihhKz1cIkZhaHJyXFx1MDBlNGRlciBlcmxhdWJ0PGJyLz5cIik7XCJ5ZXNcIj09Yi5oZ3YmJihhKz1cIkxLVyBlcmxhdWJ0IDxici8+XCIpO1wibm9cIj09Yi5oZ3YmJihhKz1cIkxLVyBuaWNodCBlcmxhdWJ0IDxici8+XCIpO1wieWVzXCI9PWIuZm9vdCYmKGErPVwiRnVzc2dcXHUwMGU0bmdlciBlcmxhdWJ0IDxici8+XCIpO1wibm9cIj09Yi5mb290JiYoYSs9XCJGdXNzZ1xcdTAwZTRuZ2VyIG5pY2h0IGVybGF1YnQgPGJyLz5cIik7XCJ5ZXNcIj09Yi5iaWN5Y2xlJiYoYSs9XCJGYWhycmFkZmFocmVyIGVybGF1YnQgPGJyLz5cIik7XCJub1wiPT1iLmJpY3ljbGUmJihhKz1cIkZhaHJyYWRmYWhyZXIgbmljaHQgZXJsYXVidCA8YnIvPlwiKTtcInllc1wiPT1iW1wiZmVycnk6Y2FibGVcIl0mJlxuKGErPVwiU2VpbGZcXHUwMGU0aHJlPGJyLz5cIil9aWYoYltcInNlYW1hcms6bGlnaHQ6MTpjb2xvdXJcIl0pe2M9YltcInNlYW1hcms6bGlnaHQ6MTpjb2xvdXJcIl07c3dpdGNoKGMpe2Nhc2UgXCJ3aGl0ZVwiOmM9XCJXZWlcXHUwMGRmXCI7YnJlYWs7Y2FzZSBcInJlZFwiOmM9XCJSb3RcIjticmVhaztjYXNlIFwiZ3JlZW5cIjpjPVwiR3JcXHUwMGZjblwiO2JyZWFrO2Nhc2UgXCJibHVlXCI6Yz1cIkJsYXVcIjticmVhaztjYXNlIFwieWVsbG93XCI6Yz1cIkdlbGJcIjticmVhaztjYXNlIFwiYW1iZXJcIjpjPVwiQmVybnN0ZWluZmFyYmVuXCJ9YSs9XCJGYXJiZSBkZXMgTGljaHRzOiBcIitjK1wiPGJyLz5cIn1cImxpZ2h0aG91c2VcIj09Yi5tYW5fbWFkZSYmKGJbXCJzZWFtYXJrOmxpZ2h0OjE6Y2hhcmFjdGVyXCJdJiYoYSs9XCJSaHl0bXVzIGRlcyBMaWNodGVzOiBcIitiW1wic2VhbWFyazpsaWdodDoxOmNoYXJhY3RlclwiXStcIjxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OjE6cGVyaW9kXCJdJiYoYSs9XCJQZXJpb2RlOiBcIitiW1wic2VhbWFyazpsaWdodDoxOnBlcmlvZFwiXStcbiAgICBcIjxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OjE6aGVpZ2h0XCJdJiYoYSs9XCJIXFx1MDBmNmhlOiBcIitiW1wic2VhbWFyazpsaWdodDoxOmhlaWdodFwiXStcIiBtPGJyLz5cIiksYltcInNlYW1hcms6bGlnaHQ6MTpyYW5nZVwiXSYmKGErPVwiUmVpY2h3ZWl0ZTogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpyYW5nZVwiXStcIiBzbTxici8+XCIpKTtpZihiW1wic2VhbWFyazpsaWdodDpjb2xvdXJcIl0pe2M9YltcInNlYW1hcms6bGlnaHQ6Y29sb3VyXCJdO3N3aXRjaChjKXtjYXNlIFwid2hpdGVcIjpjPVwiV2VpXFx1MDBkZlwiO2JyZWFrO2Nhc2UgXCJyZWRcIjpjPVwiUm90XCI7YnJlYWs7Y2FzZSBcImdyZWVuXCI6Yz1cIkdyXFx1MDBmY25cIjticmVhaztjYXNlIFwiYmx1ZVwiOmM9XCJCbGF1XCI7YnJlYWs7Y2FzZSBcInllbGxvd1wiOmM9XCJHZWxiXCI7YnJlYWs7Y2FzZSBcImFtYmVyXCI6Yz1cIkJlcm5zdGVpbmZhcmJlblwifWErPVwiRmFyYmUgZGVzIExpY2h0czogXCIrYytcIjxici8+XCJ9XCJsaWdodGhvdXNlXCI9PWIubWFuX21hZGUmJihiW1wic2VhbWFyazpsaWdodDpjaGFyYWN0ZXJcIl0mJlxuKGErPVwiUmh5dG11cyBkZXMgTGljaHRlczogXCIrYltcInNlYW1hcms6bGlnaHQ6Y2hhcmFjdGVyXCJdK1wiPGJyLz5cIiksYltcInNlYW1hcms6bGlnaHQ6aGVpZ2h0XCJdJiYoYSs9XCJIXFx1MDBmNmhlOiBcIitiW1wic2VhbWFyazpsaWdodDpoZWlnaHRcIl0rXCIgbTxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OnJhbmdlXCJdJiYoYSs9XCJSZWljaHdlaXRlOiBcIitiW1wic2VhbWFyazpsaWdodDpyYW5nZVwiXStcIiBzbTxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OnBlcmlvZFwiXSYmKGErPVwiUGVyaW9kZTogXCIrYltcInNlYW1hcms6bGlnaHQ6cGVyaW9kXCJdK1wiPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRIeWRyYW50cz1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKFwiZmlyZV9oeWRyYW50XCI9PWIuZW1lcmdlbmN5KXt2YXIgYz1iW1wiZmlyZV9oeWRyYW50OmNvdW50XCJdO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGErPVwiQW56YWhsOiBcIitjK1wiPGJyLz5cIik7Yz1iW1wiZmlyZV9oeWRyYW50OmRpYW1ldGVyXCJdO1xuICAgIFwidW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGErPVwiUm9ocmR1cmNobWVzc2VyOiBcIitjK1wiIG1tPGJyLz5cIik7Yz1iW1wiZmlyZV9oeWRyYW50OnByZXNzdXJlXCJdO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGE9XCJzdWN0aW9uXCI9PWM/YStcIkRydWNrIGluIGJhciAvIFNhdWdsZWl0dW5nOiBTYXVnbGVpdHVuZzxici8+XCI6YSsoXCJEcnVjayBpbiBiYXIgLyBTYXVnbGVpdHVuZzogXCIrYytcIjxici8+XCIpKTtjPWJbXCJmaXJlX2h5ZHJhbnQ6cG9zaXRpb25cIl07XCJ1bmRlZmluZWRcIiE9YyYmKG51bGwhPWMmJlwiXCIhPWMpJiYoXCJsYW5lXCI9PWM/YSs9XCJQb3NpdGlvbjogRmFocmJhaG48YnIvPlwiOlwicGFya2luZ19sb3RcIj09Yz9hKz1cIlBvc2l0aW9uOiBQYXJrYnVjaHQ8YnIvPlwiOlwic2lkZXdhbGtcIj09Yz9hKz1cIlBvc2l0aW9uOiBCXFx1MDBmY3JnZXJzdGVpZzxici8+XCI6XCJncmVlblwiPT1jJiYoYSs9XCJQb3NpdGlvbjogV2llc2U8YnIvPlwiKSk7Yz1iLndhdGVyX3ZvbHVtZTtcbiAgICBcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIlZvbHVtZW46IFwiK2MrXCI8YnIvPlwiKTtjPWJbXCJmaXJlX2h5ZHJhbnQ6YXd3YV9jbGFzc1wiXTtcInVuZGVmaW5lZFwiIT1jJiZudWxsIT1jJiZcIlwiIT1jP2ErPVwiQVdXQSBLbGFzc2U6IFwiK2MrXCI8YnIvPlwiOihjPWIuZmxvd19yYXRlLFwidW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGErPVwiRHVyY2hmbHVzczogXCIrYytcIjxici8+XCIpKTtjPWIud2F0ZXJfc291cmNlO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jJiZcIm1haW5cIiE9YykmJihhKz1cIldhc3NlcnF1ZWxsZTogXCIrYytcIjxici8+XCIpO2M9YltcImNvdXBsaW5nczp0eXBlXCJdO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGErPVwiS29wcGx1bmdzdHlwOiBcIitjK1wiPGJyLz5cIik7Yz1iW1wiY291cGxpbmdzOmRpYW1ldGVyXCJdO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGErPVwiS29wcGx1bmdzZHVyY2htZXNzZXI6IFwiK1xuICAgICAgICBjK1wiPGJyLz5cIik7Yz1iW1wicGlsbGFyOnR5cGVcIl07XCJkcnlfYmFycmVsXCI9PT1jJiYoYSs9XCJUeXAgXFx1MDBkY2JlcmZsdXJoeWRyYW50OiBcIitjK1wiPGJyLz5cIik7XCJmaXJlX2h5ZHJhbnRcIj09PWJbXCJkaXN1c2VkOmVtZXJnZW5jeVwiXSYmKGErPVwiQWt0dWVsbCB1bmJyYXVjaGJhci5cIik7XCJcIj09YSYmKGE9XCJLZWluZSBEZXRhaWxzIHZvcmhhbmRlbi5cIil9cmV0dXJuIGF9LGZuQ29udGVudFN0cmVldHNUcmFmZmljPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJ5ZXNcIj09YltcInJlZF90dXJuOnJpZ2h0XCJdJiYoYSs9XCJBbXBlbCBtaXQgR3JcXHUwMGZjbnBmZWlsPGJyLz5cIik7XCJub1wiPT1iW1wicmVkX3R1cm46cmlnaHRcIl0mJihhKz1cIkFtcGVsIG9obmUgR3JcXHUwMGZjbnBmZWlsPGJyLz5cIik7Yi5icmlkZ2UmJihiLmhlaWdodCYmKGErPVwiSFxcdTAwZjZoZSBcXHUwMGZjYmVyIGRlbSBHcnVuZDogXCIrYi5oZWlnaHQrXCIgbTxici8+XCIpLGIubGVuZ3RoJiYoYSs9XCJMXFx1MDBlNG5nZSBkZXIgQnJcXHUwMGZjY2tlOiBcIitcbiAgICBiLmxlbmd0aCtcIiBtPGJyLz5cIiksYi5icmlkZ2VfcmVmJiYoYSs9XCJCYXV3ZXJrc251bW1lcjogXCIrYi5icmlkZ2VfcmVmK1wiPGJyLz5cIiksYi5zdGFydF9kYXRlJiYoYSs9XCJCYXVqYWhyOiBcIitiLnN0YXJ0X2RhdGUrXCI8L2JyPjtcIiksYi5tYXh3ZWlnaHQmJihhKz1cIlRyYWdmXFx1MDBlNGhpZ2tlaXQ6IFwiK2IubWF4d2VpZ2h0K1wiIHQ8L2JyPlwiKSk7Yi5oaWdod2F5JiZcInllc1wiPT1iLnRvbGwmJihhKz1cIk1hdXRwZmxpY2h0aWdlIFN0cmFcXHUwMGRmZTxici8+XCIpO1wieWVzXCI9PWJbXCJ0b2xsOmhndlwiXSYmKGErPVwiTWF1dHBmbGljaHRpZ2UgU3RyYVxcdTAwZGZlIGZcXHUwMGZjciBMS1dzPGJyLz5cIik7aWYoYi5zdXJmYWNlKXt2YXIgYz1iLnN1cmZhY2UsYT1hK1wiT2JlcmZsXFx1MDBlNGNoZTogXCI7c3dpdGNoKGMpe2Nhc2UgXCJncmFzc1wiOmErPVwiR3Jhczxici8+XCI7YnJlYWs7Y2FzZSBcInBhdmVkXCI6YSs9XCJ2ZXJzaWVnZWx0PGJyLz5cIjticmVhaztjYXNlIFwiYXNwaGFsdFwiOmErPVwiQXNwaGFsdDxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImNvYmJsZXN0b25lXCI6YSs9XCJOYXR1cnN0ZWluIHVuYmVoYXVlbjxici8+XCI7YnJlYWs7Y2FzZSBcInNldHRcIjphKz1cImJlaGF1ZW5lcyBTdGVpbnBmbGFzdGVyPGJyLz5cIjticmVhaztjYXNlIFwiY29uY3JldGVcIjphKz1cIkJldG9uPGJyLz5cIjticmVhaztjYXNlIFwidW5wYXZlZFwiOmErPVwib2huZSBTdHJhXFx1MDBkZmVuYmVsYWc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXZpbmdfc3RvbmVzXCI6YSs9XCJQZmxhc3RlcnN0ZWluZTxici8+XCI7YnJlYWs7Y2FzZSBcImNvbXBhY3RlZFwiOmErPVwidmVyZGljaHRldGUgRGVja3NjaGljaHQgYXVzIE5hdHVyc3RlaW5tYXRlcmlhbDxici8+XCI7YnJlYWs7Y2FzZSBcImRpcnRcIjphKz1cInVuYmVmZXN0aWd0PGJyLz5cIjticmVhaztjYXNlIFwiZmluZV9ncmF2ZWxcIjphKz1cIlNwbGl0dC9LaWVzPGJyLz5cIjticmVhaztjYXNlIFwiZ3Jhc3NfcGF2ZXJcIjphKz1cIlJhc2VuZ2l0dGVyc3RlaW5lPGJyLz5cIjticmVhaztjYXNlIFwiZ3JhdmVsXCI6YSs9XCJTY2hvdHRlcjxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImVhcnRoXCI6YSs9XCJuYXR1cmJlbGFzc2VuZSBPYmVyZmxcXHUwMGU0Y2hlPGJyLz5cIjticmVhaztjYXNlIFwiZ3JvdW5kXCI6YSs9XCJuYXR1cmJlbGFzc2VuZSBPYmVyZmxcXHUwMGU0Y2hlPGJyLz5cIjticmVhaztjYXNlIFwibWV0YWxcIjphKz1cIk1ldGFsbDxici8+XCI7YnJlYWs7Y2FzZSBcIm11ZFwiOmErPVwiTWF0c2NoLCBNb3Jhc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzYW5kXCI6YSs9XCJTYW5kPGJyLz5cIjticmVhaztjYXNlIFwid29vZFwiOmErPVwiSG9sejxici8+XCI7YnJlYWs7Y2FzZSBcInRhcnRhblwiOmErPVwiVGFydGFuLSBvZGVyIEt1bnN0c3RvZmZiZWxhZzxici8+XCI7YnJlYWs7Y2FzZSBcImFydGlmaWNpYWxfdHVyZlwiOmErPVwiS3Vuc3RyYXNlbjxici8+XCI7YnJlYWs7Y2FzZSBcImNsYXlcIjphKz1cIkFzY2hlcGxhdHo8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnQ8YnIvPlwifX1cImdyYWRlMVwiPT1iLnRyYWNrdHlwZSYmKGErPVwiV2VnYmVzY2hhZmZlbmhlaXQ6IEJlZmVzdGlndGVyIFdlZyAoQXNwaGFsdCwgQmV0b24gb2RlciBQZmxhc3RlcnN0ZWluZSk8YnIvPlwiKTtcbiAgICBcImdyYWRlMlwiPT1iLnRyYWNrdHlwZSYmKGErPVwiV2VnYmVzY2hhZmZlbmhlaXQ6IEJlZmVzdGlndGVyIFdlZyAoU2Nob3R0ZXIgb2RlciBhbmRlcmUgdmVyZGljaHRldGUgTWF0ZXJpYWxpZW4pPGJyLz5cIik7XCJncmFkZTNcIj09Yi50cmFja3R5cGUmJihhKz1cIldlZ2Jlc2NoYWZmZW5oZWl0OiBCZWZlc3RpZ3RlciBvZGVyIGF1c2dlYmVzc2VydGVyIFdlZywgZGVyIGhhcnRlbiB1bmQgd2VpY2hlbiBVbnRlcmdydW5kIGVudGhcXHUwMGU0bHQgKHouIEIuIEZlaW5zY2hvdHRlci0sIFNhbmQtIG9kZXIgRXJkd2VnKTxici8+XCIpO1wiZ3JhZGU0XCI9PWIudHJhY2t0eXBlJiYoYSs9XCJXZWdiZXNjaGFmZmVuaGVpdDogVW5iZWZlc3RpZ3RlciBXZWcsIGhhdXB0c1xcdTAwZTRjaGxpY2ggd2VpY2hlIE1hdGVyaWFsaWVuLCBQZmxhbnplbnd1Y2hzIGVudGxhbmcgZGVyIFNwdXJtaXR0ZSAoei4gQi4gR3Jhcy0sIFNhbmQtIG9kZXIgRXJkd2VnKTxici8+XCIpO1wiZ3JhZGU1XCI9PWIudHJhY2t0eXBlJiYoYSs9XG4gICAgICAgIFwiV2VnYmVzY2hhZmZlbmhlaXQ6IFVuYmVmZXN0aWd0ZXIgV2VnLCBPYmVyZmxcXHUwMGU0Y2hlIGJlc3RlaHQgYXVzIFNhbmQsIEVyZGUgZXRjLiwgb2Z0IG51ciBBYmRydWNrIGluIEdyYXMsIHRlaWx3ZWlzZSBzY2h3ZXIgdm9uIHVtZ2ViZW5kZW0gR2VsXFx1MDBlNG5kZSB1bnRlcnNjaGVpZGJhcjxici8+XCIpO1wieWVzXCI9PWIubW90b3JjeWNsZSYmKGErPVwiPGJyLz5taXQgZGVtIEF1dG8gYmVmYWhyYmFyLjxici8+XCIpO1wibm9cIj09Yi5tb3RvcmN5Y2xlJiYoYSs9XCI8YnIvPmtlaW5lIG1vdG9yaXNpZXJ0ZW4gRmFocnpldWdlIHp1Z2VsYXNzZW4uPGJyLz5cIik7XCJleGNlbGxlbnRcIj09Yi50cmFpbF92aXNpYmlsaXR5JiYoYSs9XCJXZWdlcmtlbm5iYXJrZWl0OiBHdXQgYXVzZ2V3aWVzZW5lciBXZWc8YnIvPlwiKTtcImdvb2RcIj09Yi50cmFpbF92aXNpYmlsaXR5JiYoYSs9XCJXZWdlcmtlbm5iYXJrZWl0OiBXZWdtYXJraWVydW5nIHNpY2hiYXIsIGFiZXIgbWFuY2htYWwgZXR3YXMgc2Nod2VyIHp1IGZpbmRlbjxici8+XCIpO1xuICAgIFwiaW50ZXJtZWRpYXRlXCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwiV2VnZXJrZW5uYmFya2VpdDogV2VnIG5pY2h0IGR1cmNoZ2VnZW5kIHNpY2hiYXI8YnIvPlwiKTtcImJhZFwiPT1iLnRyYWlsX3Zpc2liaWxpdHkmJihhKz1cIldlZ2Vya2VubmJhcmtlaXQ6IFdlZ3NwdXIgaXN0IGthdW0genUgZXJrZW5uZW48YnIvPlwiKTtcImhvcnJpYmxlXCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwiV2VnZXJrZW5uYmFya2VpdDogT2Z0IGtlaW4gV2VnIHZvcmhhbmRlbjxici8+XCIpO1wibm9cIj09Yi50cmFpbF92aXNpYmlsaXR5JiYoYSs9XCJXZWdlcmtlbm5iYXJrZWl0OiBNZWlzdGVucyBrZWluZSBXZWdzcHVyIHp1IGVya2VubmVuPGJyLz5cIik7XCJoaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cIldlZzogV2VnIGd1dCBnZWJhaG50LiAoU2Nod2llcmlnc2tlaXRzdHlwOiAxKTwvYnI+XCIpO1wibW91bnRhaW5faGlraW5nXCI9PWIuc2FjX3NjYWxlJiYoYSs9XCJXZWc6IER1cmNoZ2VoZW5kIGd1dCBlcnNpY2h0bGljaGVyIHVuZCBndXQgYmVnZWhiYXJlciBXZWcgKFNjaHdpZXJpZ3NrZWl0c3R5cDogMik8L2JyPlwiKTtcbiAgICBcImRlbWFuZGluZ19tb3VudGFpbl9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cIldlZzogSGVpa2xlIFN0ZWxsZW4ga1xcdTAwZjZubmVuIG1pdCBTZWlsZW4gb2RlciBLZXR0ZW4gZ2VzaWNoZXJ0IHNlaW4uIExlaXRlcm4gc2luZCBtXFx1MDBmNmdsaWNoLiBFdmVudHVlbGwgc2luZCBkaWUgSFxcdTAwZTRuZGUgZlxcdTAwZmNycyBHbGVpY2hnZXdpY2h0IG5cXHUwMGY2dGlnLiAoU2Nod2llcmlnc2tlaXRzdHlwOiAzKTwvYnI+XCIpO1wiYWxwaGluZV9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cIldlZzogV2Vnc3B1ciBrYXVtIHZvcmhhbmRlbi4gQW4gZ2V3aXNzZW4gU3RlbGxlbiBiZW5cXHUwMGY2dGlndCBtYW4gZGllIEhcXHUwMGU0bmRlIHp1bSB3ZWl0ZXJrb21tZW4gKFNjaHdpZXJpZ3NrZWl0c3R5cDogNCk8L2JyPlwiKTtcImRlbWFuZGluZ19hbHBoaW5lX2hpa2luZ1wiPT1iLnNhY19zY2FsZSYmKGErPVwiV2VnOiBPZnQgd2VnbG9zLCBlaW56ZWxuZSBlaW5mYWNoZSBLbGV0dGVyc3RlbGxlbiBiaXMgSUkuIChTY2h3aWVyaWdza2VpdHN0eXA6IDUpPC9icj5cIik7XG4gICAgXCJkaWZmaWN1bHRfYWxwaW5lX2hpa2luZ1wiPT1iLnNhY19zY2FsZSYmKGErPVwiV2VnOiBTY2h3aWVyaWdlcyBBbHBpbmVud2FuZGVybixLbGV0dGVyc3RlbGxlbiBiaXMgSUkuIFNjaHdpZXJpZ3NrZWl0c3R5cDogNjwvYnI+XCIpO2JbXCJtdGI6bmFtZVwiXSYmKGErPVwiRmFocnJhZHN0cmVja2UgOlwiK2JbXCJtdGI6bmFtZVwiXStcIjwvYnI+XCIpO1wiMFwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2VzdHJlY2tlOiBLZWluZSBiZXNvbmRlcmUgU2Nod2llcmlna2VpdGVuLjwvYnI+V2VnYmVzY2hhZmZlbmhlaXQ6IGZlc3RlciB1bmQgZ3JpZmZpZ2VyIFVudGVyZ3J1bmQuPC9icj5IaW5kZXJuaXNzZTogS2VpbmUgSGluZGVybmlzc2U8L2JyPkdlZlxcdTAwZTRsbGU6IExlaWNodCBiaXMgbVxcdTAwZTRcXHUwMGRmaWc8L2JyPkt1cnZlbjogd2VpdDwvYnI+RmFocnRlY2huaWs6IGtlaW5lIGJlc29uZGVyZXMgZmFocnRlY2huaXNjaGVzIEtcXHUwMGY2bm5lbiBuXFx1MDBmNnRpZzwvYnI+XCIpO1xuICAgIFwiMVwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2VzdHJlY2tlOiBEZXIgV2VnIGVudGhcXHUwMGU0bHQgZmxhY2hlIFd1cnplbG4gdW5kIGtsZWluZXJlIFN0ZWluZS4gSFxcdTAwZTR1ZmlnIGF1Y2ggdmVyZWl6ZWx0ZSBXYXNzZXJyaW5uZW4gdW5kIEVyb3Npb25zc2NoXFx1MDBlNGRlbjwvYnI+V2VnYmVzY2hhZmZlbmhlaXQ6IGxvc2VyZXIgVW50ZXJncnVuZCBtXFx1MDBmNmdsaWNoLCBrbGVpbmUgV3VyemVsbiB1bmQgU3RlaW5lPC9icj5IaW5kZXJuaXNzZToga2xlaW5lIEhpbmRlcm5pc3NlLCBXYXNzZXJyaW5uZW4sIEVyb3Npb25zc2NoXFx1MDBlNGRlbjwvYnI+R2VmXFx1MDBlNGxsZTogYmlzIHp1IDQwJTwvYnI+S3VydmVuOiBlbmc8L2JyPkZhaHJ0ZWNobmlrOiBGYWhydGVjaG5pc2NoZSBHcnVuZGtlbnRuaXNzZSBuXFx1MDBmNnRpZy4gSGluZGVybmlzc2Uga1xcdTAwZjZubmVuIFxcdTAwZmNiZXJyb2xsdCB3ZXJkZW48L2JyPlwiKTtcIjJcIj09YltcIm10YjpzY2FsZVwiXSYmXG4gICAgKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogRGVyIFdlZyBlbnRoXFx1MDBlNGx0IGdyXFx1MDBmNlxcdTAwZGZlcmUgV3VyemVsbiB1bmQgU3RlaW5lLiBIXFx1MDBlNHVmaWcgYXVjaCB2ZXJlaXplbHRlIFdhc3NlcnJpbm5lbiB1bmQgRXJvc2lvbnNzY2hcXHUwMGU0ZGVuPC9icj5XZWdiZXNjaGFmZmVuaGVpdDogVW50ZXJncnVuZCBtZWlzdCBuaWNodCB2ZXJmZXN0aWd0LCBnclxcdTAwZjZcXHUwMGRmZXJlIFd1cnplbG4gdW5kIFN0ZWluZTwvYnI+SGluZGVybmlzc2U6ICBmbGFjaGUgQWJzXFx1MDBlNHR6ZSB1bmQgVHJlcHBlbjwvYnI+R2VmXFx1MDBlNGxsZTogYmlzIHp1IDcwJTwvYnI+S3VydmVuOiBsZWljaHRlIFNwaXR6a2VocmVuPC9icj5GYWhydGVjaG5pazogRm9ydGdlc2Nocml0dGVuZSBGYWhydGVjaG5payBuXFx1MDBmNnRpZy48L2JyPlwiKTtcIjNcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogQXVmIGRlbSBXZWcgZmluZGV0IG1hbiB2ZXJibG9ja3RlIFNpbmdsZXRyYWlscyBtaXQgdmllbGVuIGdyXFx1MDBmNlxcdTAwZGZlcmVuIEZlbHNicm9ja2VuIHVuZC9vZGVyIFd1cnplbHBhc3NhZ2VuPC9icj5XZWdiZXNjaGFmZmVuaGVpdDogdmVyYmxvY2t0LCB2aWVsZSBncm9cXHUwMGRmZSBXdXJ6ZWxuL0ZlbHNlbiAtIHJ1dHNjaGlnZXIgVW50ZXJncnVuZCwgbG9zZXMgR2VyXFx1MDBmNmxsPC9icj5IaW5kZXJuaXNzZTogIGhvaGUgQWJzXFx1MDBlNHR6ZTwvYnI+R2VmXFx1MDBlNGxsZTogNzAlIG9kZXIgbWVocjwvYnI+S3VydmVuOiBlbmdlIFNwaXR6a2VocmVuPC9icj5GYWhydGVjaG5pazogU2VociBndXRlIEJpa2UtQmVoZXJyc2NodW5nIG5cXHUwMGY2dGlnLjwvYnI+XCIpO1xuICAgIFwiNFwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2VzdHJlY2tlOiBBdWYgZGVtIFdlZyBzaW5kIHNlaHIgc3RlaWxlIHVuZCBzdGFyayB2ZXJibG9ja3RlIFNpbmdsZXRyYWlscyBtaXQgZ3JvXFx1MDBkZmVuIEZlbHNicm9ja2VuIHVuZC9vZGVyIGFuc3BydWNoc3ZvbGxlbiBXdXJ6ZWxwYXNzYWdlbiwgZGF6d2lzY2hlbiBoXFx1MDBlNHVmaWcgbG9zZXMgR2VyXFx1MDBmNmxsIHVuZCBleHRyZW1lIFN0ZWlscmFtcGVuPC9icj5XZWdiZXNjaGFmZmVuaGVpdDogdmVyYmxvY2t0LCB2aWVsZSBncm9cXHUwMGRmZSBXdXJ6ZWxuL0ZlbHNlbiAtIHJ1dHNjaGlnZXIgVW50ZXJncnVuZCwgbG9zZXMgR2VyXFx1MDBmNmxsPC9icj5IaW5kZXJuaXNzZTogIFN0ZWlscmFtcGVuLCBrYXVtIGZhaHJiYXJlIEFic1xcdTAwZTR0emU8L2JyPkdlZlxcdTAwZTRsbGU6IDcwJSBvZGVyIG1laHI8L2JyPkt1cnZlbjogIFxcdTAwZDZzZW5hcnRpZ2UgU3BpdHprZWhyZW48L2JyPkZhaHJ0ZWNobmlrOiBQZXJmZWt0ZSBCaWtlLUJlaGVycnNjaHVuZyBtaXQgVHJpYWwtVGVjaG5pa2VuIG5cXHUwMGY2dGlnLjwvYnI+XCIpO1xuICAgIFwiNVwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2VzdHJlY2tlOiBEZXIgd2VnIHdpcmQgY2hhcmFrdGVyaXNpZXJ0IGR1cmNoIGJsb2NrYXJ0aWdlcyBHZWxcXHUwMGU0bmRlIG1pdCBHZWdlbmFuc3RpZWdlbiwgR2VyXFx1MDBmNmxsZmVsZGVybiB1bmQgRXJkcnV0c2NoZW4sIFxcdTAwZjZzZW5hcnRpZ2VuIFNwaXR6a2VocmVuLCBtZWhyZXJlbiBob2hlbiwgZGlyZWt0IGF1ZmVpbmFuZGVyZm9sZ2VuZGVuIEFic1xcdTAwZTR0emVuIHVuZCBIaW5kZXJuaXNzZW4gd2llIHVtZ2VmYWxsZW5lbiBCXFx1MDBlNHVtZW48L2JyPldlZ2Jlc2NoYWZmZW5oZWl0OiB2ZXJibG9ja3QgbWl0IEdlZ2VuYW5zdGllZ2VuIC8gcnV0c2NoaWdlciBVbnRlcmdydW5kLCBsb3NlcyBHZXJcXHUwMGY2bGwgLyBkZXIgV2VnIGlzdCBlaGVyIGVpbiBXYW5kZXJzdGVpZzwvYnI+SGluZGVybmlzc2U6ICBTdGVpbHJhbXBlbiwga2F1bSBmYWhyYmFyZSBBYnNcXHUwMGU0dHplPC9icj5HZWZcXHUwMGU0bGxlOiA3MCUgb2RlciBtZWhyPC9icj5LdXJ2ZW46ICBcXHUwMGQ2c2VuYXJ0aWdlIFNwaXR6a2VocmVuIG1pdCBIaW5kZXJuaXNzZW48L2JyPkZhaHJ0ZWNobmlrOiBleGNlbGxlbnRlIEJpa2UtQmVoZXJyc2NodW5nIHNwZXppZWxsZXIgVHJpYWwtVGVjaG5pa2VuIG5cXHUwMGY2dGlnLjwvYnI+XCIpO1xuICAgIFwiNlwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2VzdHJlY2tlOiBEZXIgd2VnIGlzdCBob2NoYW5zcHJ1Y2hzdm9sbCwgdW5kIHNlbGJzdCBmXFx1MDBmY3IgUHJvZmlzIHVuZCBUcmlhbC1GYWhyZXIgbmljaHQgcGFzc2llcmJhcjwvYnI+V2VnYmVzY2hhZmZlbmhlaXQ6ICBHcm9cXHUwMGRmdGVpbHMgbnVyIG5vY2gga2xldHRlcmJhcjwvYnI+SGluZGVybmlzc2U6IEFic1xcdTAwZTR0emUgPiAyIG0sIExlaXRlcm4sIFRyaXR0c3R1ZmVuLCBLbGV0dGVyc3RlbGxlbiBiZWkgZGVuZW4gbWFuIGJlaWRlIEhcXHUwMGU0bmRlIGJyYXVjaHQuPC9icj5HZWZcXHUwMGU0bGxlOiAxMDAlIG9kZXIgbWVocjwvYnI+S3VydmVuOiAtIDwvYnI+RmFocnRlY2huaWs6ICBoaWVyIHJlaWNodCBhdWNoIGRpZSBiZXN0ZSBGYWhydGVjaG5payBuaWNodCBtZWhyPC9icj5cIik7XCIxMFwiPT1iLm1heHNwZWVkJiYoYSs9XCJWZWtlaHJzYmVyXFx1MDBmY2hpZ3RlciBCZXJlaWNoLiBIaWVyIGdpbHQgZWluZSBtYXhpbWFsZSBGYWhyZ2VzY2h3aW5kaWdrZWl0IHZvbiAxMCBLbS9oIHNvd2llIGRpZSBSZWdlbCByZWNodHMgdm9yIGxpbmtzLjwvYnI+XCIpO1xuICAgIFwiMzBcIj09Yi5tYXhzcGVlZCYmKGErPVwiVmVrZWhyc2JlclxcdTAwZmNoaWd0ZXIgQmVyZWljaC4gSGllciBnaWx0IHJlY2h0cyB2b3IgbGlua3Mgc293aWUgZWluZSBtYXhpbWFsZSBHZXNjaHdpbmRpZ2tlaXQgdm9uIDMwIEttL2g8L2JyPlwiKTtcIjUwXCI9PWIubWF4c3BlZWQmJihhKz1cIk1heGltYWwgZXJsYXVidGUgR2VzY2h3aW5kaWdrZWl0IHZvbiA1MCBLbS9oIGRhcmYgbmljaHQgXFx1MDBmY2JlcnNjaHJpdHRlbiB3ZXJkZW4gPC9icj5cIik7XCI3MFwiPT1iLm1heHNwZWVkJiYoYSs9XCJNYXhpbWFsIGVybGF1YnRlIEdlc2Nod2luZGlna2VpdCB2b24gNTAgS20vaCBkYXJmIG5pY2h0IFxcdTAwZmNiZXJzY2hyaXR0ZW4gd2VyZGVuIDwvYnI+XCIpO1wiODBcIj09Yi5tYXhzcGVlZCYmKGErPVwiTWF4aW1hbGUgR2VzY2h3aW5kaWdrZWl0IHZvbiA4MCBLbS9oIGRhcmYgbmljaHQgXFx1MDBmY2JlcnNjaHJpdHRlbiB3ZXJkZW4uPC9icj5cIik7XCIxMDBcIj09Yi5tYXhzcGVlZCYmKGErPVwiTWF4aW1hbGUgR2VzY2h3aW5kaWdrZWl0IHZvbiAxMDAgS20vaCBkYXJmIG5pY2h0IFxcdTAwZmNiZXJzY2hyaXR0ZW4gd2VyZGVuLjwvYnI+XCIpO1xuICAgIFwibm9cIj09Yi5vdmVydGFraW5nJiYoYSs9XCJcXHUwMGRjYmVyaG9sdmVyYm90LCBGYWhyemV1Z2UgZFxcdTAwZmNyZmVuIG5pY2h0IFxcdTAwZmNiZXJob2xlbiAhPC9icj5cIik7XCJ5ZXNcIj09Yi5ub2V4aXQmJihhKz1cIkRpZSBTdHJhXFx1MDBkZmUgZW5kZXQgaGllciwgZXMgaGFuZGVsdCBzaWNoIHVtIGVpbmUgU2Fja2dhc3NlPC9icj5cIik7XCJ5ZXNcIj09Yi5vbmV3YXkmJihhKz1cIkVzIGhhbmRlbHQgc2ljaCBoaWVyIHVtIGVpbmUgRWluYmFobnN0cmFcXHUwMGRmZSwgc2llIGRcXHUwMGZjcmZlbiBkaWVzZSBTdHJhXFx1MDBkZmUgbnVyIGluIGVpbmUgUmljaHR1bmcgYmVmYWhyZW48L2JyPlwiKTtcImRlc2lnbmF0ZWRcIj09Yi5wcmlvcml0eV9yb2FkJiYoYSs9XCJFcyBoYW5kZWx0IHNpY2ggaGllcmJlaSB1bSBlaW5lIFZvcmZhaHJ0c3N0cmFcXHUwMGRmZSwgZGVyamVuaWdlLCBkZXIgc2ljaCBhdWYgZGllc2VyIGJlZmluZGV0LCBoYXQgZ2VnZW5cXHUwMGZjYmVyIGFuZGVyZW4gRmFocnpldWdlbiBkaWUgVm9yZmFocnQhPC9icj5cIik7XG4gICAgXCJlbmRcIj09Yi5wcmlvcml0eV9yb2FkJiYoYSs9XCJEaWUgVm9yZmFocnRzc3RyYVxcdTAwZGZlIGVuZGV0IGhpZXIgdW5kIGRpZSBSZWdlbHVuZyB3aXJkIGF1ZmdlaG9iZW48L2JyPlwiKTtcImVtZXJnZW5jeV9iYXlcIj09Yi5oaWdod2F5JiYoYSs9XCJIaWVyIGJlZmluZGV0IHNpY2ggZWluZSBCdWNodCBkaWUgbnVyIGluIE5vdGZcXHUwMGU0bGxlbiB6dXIgQmVudXp1bmcgenVyIFZlcmZcXHUwMGZjZ3VuZyBzdGVodDwvYnI+XCIpO1wieWVzXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJWZXJrZWhyc2JlcnVoaWd0ZXIgQmVyZWljaDwvYnI+XCIpO1wiYnVtcFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiS3VyemUgQm9kZW53ZWxsZTwvYnI+XCIpO1wiY2hpY2FuZVwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiWnUgdW1mYWhyZW5kZW5lcyBIaW5kZXJuaXNzPC9icj5cIik7XCJjaG9rZXJcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkZhaHJiYWhudmVyZW5ndW5nLCB6dSB1bWZhaHJlbmRlIEhpbmRlcm5pc3NlIG1cXHUwMGY2Z2xpY2g8L2JyPlwiKTtcbiAgICBcImN1c2hpb25cIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkJvZGVud2VsbGUgbWl0IExcXHUwMGZjY2tlbiBhdXMgbWVocmVyZW4gcmVjaHRlY2tpZ2VuIEh1Y2tlbG48L2JyPlwiKTtcImh1bXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cInZlcmdsZWljaGJhcmUgQm9kZW53ZWxsZSBtaXQgZXR3YXIgZWluZXIgTFxcdTAwZTRuZ2Ugdm9uIDItNE08L2JyPlwiKTtcImlzbGFuZFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiRWluZSBWZXJrZWhyc2luc2VsPC9icj5cIik7XCJydW1ibGVfc3RyaXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkhvbHBlcnN0cmVpZmVuPC9icj5cIik7XCJ0YWJsZVwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwibGFuZ2UgQm9kZW53ZWxsZW4gbWl0IGZsYWNoZW4gTWl0dGVsc3RcXHUwMGZjY2s8L2JyPlwiKTtpZihcInBhcmtpbmdcIj09Yi5hbWVuaXR5JiYoXCJ5ZXNcIj09Yi5mZWUmJihhKz1cImtvc3RlbnBmbGljaHRpZzxici8+XCIpLGM9YltcImNhcGFjaXR5OndvbWVuXCJdLFxuICAgIFwiXCIhPWMmJlwibm9cIiE9YyYmbnVsbCE9Yykpe3ZhciBkPVwidW5iZWthbm50XCI7XCJ5ZXNcIiE9YyYmKGQ9Yyk7YSs9XCJGcmF1ZW5wYXJrcGxcXHUwMGU0dHplIChBbnphaGw6IFwiK2QrXCIpIDxici8+XCJ9Yi5wYXJrX3JpZGUmJihcImJ1c1wiPT1iLnBhcmtfcmlkZSYmKGErPVwiQnVzYW5iaW5kdW5nPGJyLz5cIiksXCJ0cmFtXCI9PWIucGFya19yaWRlJiYoYSs9XCJCYWhuYW5iaW5kdW5nPGJyLz5cIiksXCJ1bmtub3duXCI9PWIucGFya19yaWRlJiYoYSs9XCJWZXJrZWhyc21pdHRlbCB1bmJla2FubnQ8YnIvPlwiKSk7YltcInJhaWx3YXk6cG9zaXRpb25cIl0mJihhKz1cIlN0cmVja2Vua2lsb21ldGVyPGJyLz5Qb3NpdGlvbjogXCIrYltcInJhaWx3YXk6cG9zaXRpb25cIl0rXCI8YnIvPlwiKTtiLnVpY19yZWYmJihhKz1cIlVJQzogXCIrYi51aWNfcmVmK1wiPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudFNwb3J0cz1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO1wiOXBpblwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogS2VnZWxuPGJyLz5cIik7XG4gICAgXCIxMHBpblwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQm93bGluZzxici8+XCIpO1wiYW1lcmljYW5fZm9vdGJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEFtZXJpY2FuIEZvb3RiYWxsPGJyLz5cIik7XCJhaWtpZG9cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEFpa2lkbzxici8+XCIpO1wiYXJjaGVyeVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQm9nZW5zY2hpZVxcdTAwZGZlbjxici8+XCIpO1wiYXRobGV0aWNzXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBMZWljaHRhdGhsZXRpazxici8+XCIpO1wiYXVzdHJhbGlhbl9mb290YmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQXVzdHJhbGlhbiBGb290YmFsbDxici8+XCIpO1wiYmFzZVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogT2JqZWt0c3ByaW5nZW48YnIvPlwiKTtcbiAgICBcImJhZG1pbnRvblwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQmFkbWludG9uPGJyLz5cIik7XCJiYXNlYmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQmFzZWJhbGw8YnIvPlwiKTtcImJhc2tldGJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJhc2tldGJhbGw8YnIvPlwiKTtcImJlYWNodm9sbGV5YmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQmVhY2h2b2xsZXliYWxsPGJyLz5cIik7XCJibXhcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJNWDxici8+XCIpO1wiYm91bGVzXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBCb2NjaWE8YnIvPlwiKTtcImJvdWxlXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBCb2NjaWE8YnIvPlwiKTtcImJvd2xzXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBCb3dsczxici8+XCIpO1xuICAgIFwiYm94aW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBCb3hlbjxici8+XCIpO1wiY2FuYWRpYW5fZm9vdGJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IENhbmFkaWFuIEZvb3RiYWxsPGJyLz5cIik7XCJjYW5vZVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogUGFkZGVsbjxici8+XCIpO1wiY2hlc3NcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFNjaGFjaDxici8+XCIpO1wiY2xpZmZfZGl2aW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBLbGlwcGVuc3ByaW5nZW48YnIvPlwiKTtcImNsaW1iaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBLbGV0dGVybjxici8+XCIpO1wiY2xpbWJpbmdfYWR2ZW50dXJlXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBLbGV0dGVybjxici8+XCIpO1wiY3JpY2tldFwiPT1iLnNwb3J0JiZcbiAgICAoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQ3JpY2tldDxici8+XCIpO1wiY3JpY2tldF9uZXRzXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBDcmlja2V0IE5ldHo8YnIvPlwiKTtcImNyb3F1ZXRcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IENyb3F1ZXQ8YnIvPlwiKTtcImN1cmxpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEN1cmxpbmc8YnIvPlwiKTtcImN5Y2xpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFJhZHJlbm5lbiwgUmFkc3BvcnQ8YnIvPlwiKTtcImRvZ19yYWNpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEh1bmRlcmVubmVuPGJyLz5cIik7aWYoXCJkYXJ0c1wiPT1iLnNwb3J0fHxcImRhcnRcIj09Yi5zcG9ydClhKz1cIkRhcnRzPGJyLz5cIjtcImZlbmNpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEZlY2h0ZW48YnIvPlwiKTtcbiAgICBcImVxdWVzdHJpYW5cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFJlaXRlbjxici8+XCIpO1wiZm9vdGJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEFtZXJpY2FuIEZvb3RiYWxsPGJyLz5cIik7XCJmcmVlX2ZseWluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogRnJlZWZseWluZzxici8+XCIpO1wiZ2FlbGljX2dhbWVzXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBHYWVsaWMgZ2FtZXM8YnIvPlwiKTtcImdvbGZcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEdvbGY8YnIvPlwiKTtcImd5bW5hc3RpY3NcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEd5bW5hc3Rpazxici8+XCIpO1wiaG9ja2V5XCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBIb2NrZXk8YnIvPlwiKTtcImhvcnNlc2hvZXNcIj09Yi5zcG9ydCYmKGErPVxuICAgICAgICBcIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBIdWZlaXNlbndlcmZlbjxici8+XCIpO1wiaG9yc2VfcmFjaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBQZmVyZGVyZW5uZW48YnIvPlwiKTtcImljZV9zdG9ja1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogRWlzc3RvY2tzY2hpZVxcdTAwZGZlbjxici8+XCIpO1wianVkb1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogSnVkbzxici8+XCIpO1wia2FydGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogS2FydGZhaHJlbjxici8+XCIpO1wia2l0ZXN1cmZpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEtpdGVzdXJmaW5nPGJyLz5cIik7XCJrb3JmYmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogS29yZmJhbGw8YnIvPlwiKTtcIm1vdG9yXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBNb3RvcnNwb3J0PGJyLz5cIik7XG4gICAgXCJtdWx0aVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogTWVocmZhY2hzcG9ydDxici8+XCIpO1wib2JzdGFjbGVfY291cnNlXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBIaW5kZXJuaXNsYXVmPGJyLz5cIik7XCJvcmllbnRlZXJpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IE9yaWVudGllcnVuZ3NsYXVmPGJyLz5cIik7XCJwYWRkbGVfdGVubmlzXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBQYWRkbGUtVGVubmlzPGJyLz5cIik7XCJwYXJhZ2xpZGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogR2xlaXRzY2hpcm1mbGllZ2VuPGJyLz5cIik7XCJQZWxvdGFcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFBlbG90YTxici8+XCIpO1wicmFzcXVldFwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogUmFjcXVldGJhbGw8YnIvPlwiKTtcbiAgICBcInJvd2luZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogUnVkZXJuPGJyLz5cIik7XCJydWdieV9sZWFndWVcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFJ1Z2J5IExlYWd1ZTxici8+XCIpO1wicnVnYnlfdW5pb25cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFJ1Z2J5IFVuaW9uPGJyLz5cIik7XCJydW5uaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBMYXVmc3BvcnQ8YnIvPlwiKTtcInNjdWJhX2RpdmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogU3BvcnR0YXVjaGVuPGJyLz5cIik7XCJzaG9vdGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogU3BvcnRzY2hpZVxcdTAwZGZlbjxici8+XCIpO1wic2thdGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogRWlzbGF1ZnNwb3J0PGJyLz5cIik7XCJza2F0ZWJvYXJkXCI9PVxuICAgIGIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBTa2F0ZWJvYXJkPGJyLz5cIik7XCJza2lpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFNraWZhaHJlbjxici8+XCIpO1wic29jY2VyXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBGdVxcdTAwZGZiYWxsPGJyLz5cIik7XCJzdXJmaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBTdXJmZW48YnIvPlwiKTtcInN3aW1taW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBTY2h3aW1tZW48YnIvPlwiKTtcInRhYmxlX3Rlbm5pc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogVGlzY2h0ZW5uaXM8YnIvPlwiKTtcInRhZWt3b25kb1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogVGFla3dvbmRvPGJyLz5cIik7XCJ0ZWFtX2hhbmRiYWxsXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBIYW5kYmFsbDxici8+XCIpO1xuICAgIFwidGVubmlzXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBUZW5uaXM8YnIvPlwiKTtcInRvYm9nZ2FuXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBSb2RlbG48YnIvPlwiKTtcInZvbGxleWJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFZvbGxleWJhbGw8YnIvPlwiKTtcIndhdGVyX3NraVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogV2Fzc2Vyc2tpPGJyLz5cIik7XCJ3ZWlnaHRsaWZ0aW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBHZXdpY2h0aGViZW48YnIvPlwiKTtcIndyZXN0bGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogUmluZ2VuPGJyLz5cIik7cmV0dXJuIGF9O1xuZXhwb3J0IGZ1bmN0aW9uIGZuQXJ6dEluZm8oYil7dmFyIGE9XCJcIixjPVwiXCIsZD1iW1wiaGVhbHRoY2FyZTpzcGVjaWFsaXR5XCJdO1wiXCIhPWQmJihcImdlbmVyYWxcIj09ZCYmKGMrPVwiQWxsZ2VtZWlubWVkaXppbjxici8+XCIpLFwiYWxsZXJnb2xvZ3lcIj09ZCYmKGMrPVwiQWxsZXJnb2xvZ2llPGJyLz5cIiksXCJhbmFlc3RoZXRpY3NcIj09ZCYmKGMrPVwiQW5cXHUwMGU0c3RoZXNpb2xvZ2llPGJyLz5cIiksXCJiaW9jaGVtaXN0cnlcIj09ZCYmKGMrPVwiTWVkaXppbmlzY2hlIHVuZCBjaGVtaXNjaGUgTGFib3JkaWFnbm9zdGlrPGJyLz5cIiksXCJiaW9sb2dpY2FsX2hhZW1hdG9sb2d5XCI9PWQmJihjKz1cIkJpb2xvZ2lzY2hlIEhcXHUwMGU0bWF0b2xvZ2llPGJyLz5cIiksXCJiaW9sb2d5XCI9PWQmJihjKz1cIk1lZGl6aW5pc2NoZSBCaW9sb2dpZTxici8+XCIpLFwiY2FyZGlvbG9neVwiPT1kJiYoYys9XCJLYXJkaW9sb2dpZTxici8+XCIpLFwiY2FyZGlhY19zdXJnZXJ5XCI9PWQmJihjKz1cIkthcmRpb3Zhc2t1bGFyY2hpcnVyZ2llPGJyLz5cIiksXG5cImNoaWxkX3BzeWNoaWF0cnlcIj09ZCYmKGMrPVwiS2luZGVyLSB1LiBKdWdlbmRwc3ljaGF0cmllPGJyLz5cIiksXCJkZW50YWxfb3JhbF9tYXhpbGxvX2ZhY2lhbF9zdXJnZXJ5XCI9PWQmJihjKz1cIlphaG4tLCBNdW5kLSwgS2llZmVyLSB1bmQgR2VzaWNodHNjaGlydXJnaWU8YnIvPlwiKSxcImRlcm1hdG9sb2d5XCI9PWQmJihjKz1cIkhhdXRrcmFua2hlaXRlbjxici8+XCIpLFwiZGVybWF0b3ZlbmVyZW9sb2d5XCI9PWQmJihjKz1cIkhhdXQtIHVuZCBHZXNjaGxlY2h0c2tyYW5raGVpdGVuPGJyLz5cIiksXCJkaWFnbm9zdGljX3JhZGlvbG9neVwiPT1kJiYoYys9XCJEaWFnbm9zdGlzY2hlIFJhZGlvbG9naWU8YnIvPlwiKSxcImVtZXJnZW5jeVwiPT1kJiYoYys9XCJVbmZhbGwtIHVuZCBOb3RmYWxsbWVkaXppbjxici8+XCIpLFwiZW5kb2NyaW5vbG9neVwiPT1kJiYoYys9XCJFbmRva3Jpbm9sb2dpZTxici8+XCIpLFwiZ2FzdHJvZW50ZXJvbG9naWNhbF9zdXJnZXJ5XCI9PWQmJihjKz1cIkdhc3Ryb2VudGVyb2xvZ2lzY2hlIENoaXJ1cmdpZTxici8+XCIpLFxuXCJnYXN0cm9lbnRlcm9sb2d5XCI9PWQmJihjKz1cIkdhc3Ryb2VudGVyb2xvZ2llPGJyLz5cIiksXCJnZXJpYXRyaWNzXCI9PWQmJihjKz1cIkdlcmlhdHJpZTxici8+XCIpLFwiZ3luYWVjb2xvZ3lcIj09ZCYmKGMrPVwiR2VidXJ0c2hpbGZlIHVuZCBGcmF1ZW5oZWlsa3VuZGU8YnIvPlwiKSxcImhhZW1hdG9sb2d5XCI9PWQmJihjKz1cIkFsbGdlbWVpbmUgSFxcdTAwZTRtYXRvbG9naWU8YnIvPlwiKSxcImhlcGF0b2xvZ3lcIj09ZCYmKGMrPVwiSGVwYXRvbG9naWU8YnIvPlwiKSxcImltbXVub2xvZ3lcIj09ZCYmKGMrPVwiSW1tdW5vbG9naWU8YnIvPlwiKSxcImluZmVjdGlvdXNfZGlzZWFzZXNcIj09ZCYmKGMrPVwiQW5zdGVja2VuZGUgS3JhbmtoZWl0ZW48YnIvPlwiKSxcImludGVuc2l2ZVwiPT1kJiYoYys9XCJJbnRlbnNpdm1lZGl6aW48YnIvPlwiKSxcImludGVybmFsXCI9PWQmJihjKz1cIkFsbGdlbWVpbmUgKGlubmVyZSkgTWVkaXppbjxici8+XCIpLFwibWF4aWxsb2ZhY2lhbF9zdXJnZXJ5XCI9PWQmJihjKz1cIk11bmQtS2llZmVyLUdlc2ljaHRzY2hpcnVyZ2llPGJyLz5cIiksXG5cIm5lcGhyb2xvZ3lcIj09ZCYmKGMrPVwiTmllcmVua3JhbmtoZWl0ZW48YnIvPlwiKSxcIm5ldXJvbG9neVwiPT1kJiYoYys9XCJOZXVyb2xvZ2llPGJyLz5cIiksXCJuZXVyb3BoeXNpb2xvZ3lcIj09ZCYmKGMrPVwiS2xpbmlzY2hlIE5ldXJvcGh5c2lvbG9naWU8YnIvPlwiKSxcIm5ldXJvcHN5Y2hpYXRyeVwiPT1kJiYoYys9XCJOZXVyb3BzeWNoaWF0cmllKE5ldXJvbG9naWUgdW5kIFBzeWNoaWF0cmllKTxici8+XCIpLFwibmV1cm9zdXJnZXJ5XCI9PWQmJihjKz1cIk5ldXJvY2hpcnVyZ2llPGJyLz5cIiksXCJudWNsZWFyXCI9PWQmJihjKz1cIk51a2xlYXJtZWRpemluPGJyLz5cIiksXCJvY2N1cGF0aW9uYWxcIj09ZCYmKGMrPVwiQXJiZWl0c21lZGl6aW4gPGJyLz5cIiksXCJvbmNvbG9neVwiPT1kJiYoYys9XCJPbmtvbG9naWU8YnIvPlwiKSxcIm9waHRoYWxtb2xvZ3lcIj09ZCYmKGMrPVwiQXVnZW5oZWlsa3VuZGU8YnIvPlwiKSxcIm9ydGhvcGFlZGljc1wiPT1kJiYoYys9XCJPcnRob3BcXHUwMGU0ZGllPGJyLz5cIiksXCJvdG9sYXJ5bmdvbG9neVwiPT1cbmQmJihjKz1cIkhhbHMtTmFzZW4tT2hyZW4tSGVpbGt1bmRlPGJyLz5cIiksXCJwYWVkaWF0cmljX3N1cmdlcnlcIj09ZCYmKGMrPVwiS2luZGVyY2hpcnVyZ2llPGJyLz5cIiksXCJwYWVkaWF0cmljc1wiPT1kJiYoYys9XCJLaW5kZXJoZWlsa3VuZGU8YnIvPlwiKSxcInBhbGxpYXRpdmVcIj09ZCYmKGMrPVwiUGFsbGlhdGl2bWVkaXppbjxici8+XCIpLFwicGh5c2lhdHJ5XCI9PWQmJihjKz1cIlBoeXNpa2FsaXNjaGV1bmQgUmVoYWJpbGl0YXRpdmUgTWVkaXppbjxici8+XCIpLFwicGxhc3RpY19zdXJnZXJ5XCI9PWQmJihjKz1cIlBsYXN0aXNjaGUgQ2hpcnVyZ2llPGJyLz5cIiksXCJwcm9jdG9sb2d5XCI9PWQmJihjKz1cIlByb2t0b2xvZ2llPGJyLz5cIiksXCJwc3ljaGlhdHJ5XCI9PWQmJihjKz1cIlBzeWNoaWF0cmllPGJyLz5cIiksXCJwdWxtb25vbG9neVwiPT1kJiYoYys9XCJMdW5nZW4tIHVuZCBCcm9uY2hpYWxoZWlsa3VuZGU8YnIvPlwiKSxcInJhZGlvbG9neVwiPT1kJiYoYys9XCJSYWRpb2xvZ2llPGJyLz5cIiksXCJyYWRpb3RoZXJhcHlcIj09XG5kJiYoYys9XCJTdHJhaGxlbnRoZXJhcGllPGJyLz5cIiksXCJyaGV1bWF0b2xvZ3lcIj09ZCYmKGMrPVwiUmhldW1hdG9sb2dpZTxici8+XCIpLFwic3RvbWF0b2xvZ3lcIj09ZCYmKGMrPVwiU3RvbWF0b2xvZ2llPGJyLz5cIiksXCJzdXJnZXJ5XCI9PWQmJihjKz1cIkNoaXJ1cmdpZTxici8+XCIpLFwic3VyZ2ljYWxfb25jb2xvZ3lcIj09ZCYmKGMrPVwiS3JlYnNjaGlydXJnaWU8YnIvPlwiKSxcInRob3JhY2ljX3N1cmdlcnlcIj09ZCYmKGMrPVwiVGhvcmF4Y2hpcnVyZ2llPGJyLz5cIiksXCJ0cmFuc3BsYW50XCI9PWQmJihjKz1cIlRyYW5zcGxhbnRhdGlvbnNtZWRpemluPGJyLz5cIiksXCJ0cmF1bWFcIj09ZCYmKGMrPVwiVW5mYWxsY2hpcnVyZ2llPGJyLz5cIiksXCJ0cm9waWNhbFwiPT1kJiYoYys9XCJUcm9wZW5tZWRpemluPGJyLz5cIiksXCJ1cm9sb2d5XCI9PWQmJihjKz1cIlVyb2xvZ2llPGJyLz5cIiksXCJ2YXNjdWxhcl9zdXJnZXJ5XCI9PWQmJihjKz1cIkdlZlxcdTAwZTRcXHUwMGRmY2hpcnVyZ2llPGJyLz5cIiksXCJ2ZW5lcmVvbG9neVwiPT1cbmQmJihjKz1cIkdlc2NobGVjaHRza3JhbmtoZWl0ZW48YnIvPlwiKSxcImFjdXB1bmN0dXJlXCI9PWQmJihjKz1cIkFrdXB1bmt0dXI8YnIvPlwiKSxcIm5hdHVyb3BhdGh5XCI9PWQmJihjKz1cIk5hdHVyaGVpbGt1bmRlPGJyLz5cIiksXCJjaGlyb3ByYWN0aWNcIj09ZCYmKGMrPVwiQ2hpcm9wcmFrdGlrIDxici8+XCIpLFwiaG9tZW9wYXRoeVwiPT1kJiYoYys9XCJIb21cXHUwMGY2b3BhdGhpZTxici8+XCIpLFwib3N0ZW9wYXRoeVwiPT1kJiYoYys9XCJPc3Rlb3BhdGhpZTxici8+XCIpKTtcIlwiIT1iLmhlYWx0aF9zcGVjaWFsdHkmJihcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpmYW1pbHlfbWVkaWNpbmVcIl0mJihjKz1cIkFsbGdlbWVpbm1lZGl6aW48YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTplbWVyZ2VuY3lfbWVkaWNpbmVcIl0mJihjKz1cIk5vdGZhbGxtZWRpemluPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6YW5hZXN0aGVzaW9sb2d5XCJdJiYoYys9XCJBblxcdTAwZTRzdGhlc2llPGJyLz5cIiksXG5cInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpkZXJtYXRvbG9neVwiXSYmKGMrPVwiRGVybWF0b2xvZ2llPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZWFyX25vc2VfdGhyb2F0XCJdJiYoYys9XCJIYWxzLCBOYXNlbiwgT2hyZW4gKEhOTyk8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvY2N1cGF0aW9uYWxfbWVkaWNpbmVcIl0mJihjKz1cIkFyYmVpdHNubWVkaXppbjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmludGVybmFsX21lZGljaW5lXCJdJiYoYys9XCJpbm5lcmUgTWVkaXppbjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om5ldXJvbG9neVwiXSYmKGMrPVwiTmV1cm9sb2dpZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om9waHRoYWxtb2xvZ3lcIl0mJihjKz1cIkF1Z2VuaGVpbGt1bmRlPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cGFsbGlhdGl2ZV9tZWRpY2luZVwiXSYmKGMrPVwiUGFsbGlhdGl2bWVkaXppbjxici8+XCIpLFxuXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cHN5Y2hpYXRyeVwiXSYmKGMrPVwiUHN5Y2hhdHJpZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Omd5bmFlY29sb2d5XCJdJiYoYys9XCJHeW5cXHUwMGU0a29sb2dpZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnVyb2xvZ3lcIl0mJihjKz1cIlVyb2xvZ2llPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cGFpbl9tZWRpY2luZVwiXSYmKGMrPVwiU2NobWVyem1lZGl6aW48YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTplbnZpcm9ubWVudGFsX21lZGljaW5lXCJdJiYoYys9XCJVbXdlbHRtZWRpemluPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6aW50ZW5zaXZlX2NhcmVfbWVkaWNpblwiXSYmKGMrPVwiSW50ZW5zaXZtZWRpemluPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cGFlZGlhdHJpY3NcIl0mJihjKz1cIktpbmRlci0gdS4gSnVnZW5kbWVkaXppbjxici8+XCIpLFxuXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cGh5c2lhdHJ5XCJdJiYoYys9XCJQaHlzaWthbGlzY2hlIHVuZCBSZWhhYmlsaXRhdGl2ZSBNZWRpemluPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cmFkaW9sb2d5XCJdJiYoYys9XCJSYWRpb2xvZ2llPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6Z2VuZXJhbFwiXSYmKGMrPVwiQWxsZ2VtZWlubWVkaXppbjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om9jY3VwYXRpb25hbF90aGVyYXB5XCJdJiYoYys9XCJFcmdvdGhlcmFwaWU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpwdWxtb25vbG9neVwiXSYmKGMrPVwiUG5ldW1vbG9naWU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTphY3VwdW5jdHVyZVwiXSYmKGMrPVwiQWt1cHVua3R1cjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om9ydGhvcGFlZGljc1wiXSYmKGMrPVwiT3J0aG9wXFx1MDBlNGRpZTxici8+XCIpLFxuXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6Y2hpcm9wcmFjdGljXCJdJiYoYys9XCJDaGlyb3ByYWt0aWs8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpzcG9ydHNfbWVkaWNpbmVcIl0mJihjKz1cIlNwb3J0bWVkaXppbjxici8+XCIpKTtcIlwiIT1jJiYoYT1hK1wiRmFjaGdlYmlldGU6IFwiKygnPGRpdiBjbGFzcz1cImM0Z19vcGVuX3RleHRcIj4nK2MrXCI8L2Rpdj5cIikpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuS3JhZnR3ZXJrSW5mbyhiKXt2YXIgYT1cIlwiO2lmKGJbXCJnZW5lcmF0b3I6bWV0aG9kXCJdKXthKz1cIkVyemV1Z3VuZ3NhcnQ6IFwiO3N3aXRjaChiW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSl7Y2FzZSBcImNvbWJ1c3Rpb25cIjphKz1cIlZlcmJyZW5udW5nXCI7YnJlYWs7Y2FzZSBcInRoZXJtYWxcIjphKz1cInRoZXJtaXNjaGUgTnV0enVuZyAoei5CLiBTb2xhcnRoZXJtaWUpXCI7YnJlYWs7Y2FzZSBcInB1bXBpbmdcIjphKz1cImR1cmNoIFB1bXBlbiAoei5CLiBkaWUgTnV0enVuZyB2b24gR2VvdGhlcm1pZSlcIjticmVhaztjYXNlIFwicGhvdG92b2x0YWljXCI6YSs9XCJQaG90b3ZvbHRhaWtcIjticmVhaztjYXNlIFwiZ2FzaWZpY2F0aW9uXCI6YSs9XCJWZXJnYXN1bmcsIGRhbmFjaCBWZXJicmVubnVuZ1wiO2JyZWFrO2Nhc2UgXCJhbmFlcm9iaWNfZGlnZXN0aW9uXCI6YSs9XCJFcnpldWd1bmcgdm9uIEJpb2dhcyBkdXJjaCBWZXJnXFx1MDBlNHJ1bmdcIjticmVhaztjYXNlIFwicHlyb2x5c2lzXCI6YSs9XCJQeXJvbHlzZSwgQXVmc3BhbHR1bmcgZHVyY2ggaG9oZSBUZW1wZXJhdHVyZW5cIjtcbiAgICBicmVhaztjYXNlIFwiZmlzc2lvblwiOmErPVwiS2VybnNwYWx0dW5nXCI7YnJlYWs7Y2FzZSBcImZ1c2lvblwiOmErPVwiS2VybmZ1c2lvblwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnQ8YnIvPlwifWErPVwiPGJyLz5cIn1pZihiLnBvd2VyX3NvdXJjZSl7YSs9XCJFcnpldWd1bmdzYXJ0OiBcIjtzd2l0Y2goYi5wb3dlcl9zb3VyY2Upe2Nhc2UgXCJwaG90b3ZvbHRhaWNcIjphKz1cIlBob3Rvdm9sdGFpa1wiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnQ8YnIvPlwifWErPVwiPGJyLz5cIn1iW1wiZ2VuZXJhdG9yOm91dHB1dDplbGVjdHJpY2l0eVwiXSYmKGErPVwiZWxla3QuIEVuZXJnaWVlcnpldWd1bmc6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmVsZWN0cmljaXR5XCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6aGVhdFwiXSYmKGErPVwidGhlcm0uIEVuZXJnaWVlcnpldWd1bmc6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmhlYXRcIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dDpjb2xkXCJdJiYoYSs9XG4gICAgXCJ0aGVybS4gRW5lcmdpZWVyemV1Z3VuZzogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZFwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0XCJdJiYoYSs9XCJOZW5ubGVpc3R1bmc6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0XCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6aG90X2FpclwiXSYmKGErPVwiQXJ0IGRlcyBUcmFuc3BvcnRtZWRpdW1zOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpob3RfYWlyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZF93YXRlclwiXSYmKGErPVwiQXJ0IGRlcyBUcmFuc3BvcnRtZWRpdW1zOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpjb2xkX3dhdGVyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZF9haXJcIl0mJihhKz1cIkFydCBkZXMgVHJhbnNwb3J0bWVkaXVtczogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZF9haXJcIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dDpjb21wcmVzc2VkX2FpclwiXSYmKGErPVwiQXJ0IGRlcyBUcmFuc3BvcnRtZWRpdW1zOiBcIitcbiAgICBiW1wiZ2VuZXJhdG9yOm91dHB1dDpjb21wcmVzc2VkX2FpclwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OnN0ZWFtXCJdJiYoYSs9XCJBcnQgZGVzIFRyYW5zcG9ydG1lZGl1bXM6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OnN0ZWFtXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6dmFjdXVtXCJdJiYoYSs9XCJBcnQgZGVzIFRyYW5zcG9ydG1lZGl1bXM6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OnZhY3V1bVwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmJhdHRlcnlfY2hhcmdpbmdcIl0mJihhKz1cIkFydCBkZXMgVHJhbnNwb3J0bWVkaXVtczogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6YmF0dGVyeV9jaGFyZ2luZ1wiXStcIjxici8+XCIpO1wiUFdSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkJXUi0xXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXG4gICAgXCI8YnIvPlwiKTtcIkJXUi0yXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkJXUi0zXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkJXUi00XCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkJXUi01XCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkJXUi02XCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIlBIV1JcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiR0NSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmXG4oYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiRkJSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIlJCTUstMTAwMFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJSQk1LLTE1MDBcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiVlZFUlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJDQU5EVVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJDUFItMTAwMFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrXG4gICAgYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJFUFJcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1widG9rYW1ha1wiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJzdGVsbGFyYXRvclwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJJQ0ZcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiY29sZC1mdXNpb25cIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wid2luZF90dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6bWV0aG9kXCJdJiZcImhvcml6b250YWxfYXhpc1wiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJlxuKGErPVwiR2VuZXJhdG9ydHlwOiBIb3Jpem9udGFsLUFjaHNlbiBXaW5kZW5lcmdpZWFubGFnZTxici8+XCIpO1wid2luZF90dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6bWV0aG9kXCJdJiZcInZlcnRpY2FsX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFZlcnRpa2Fscm90b3I8YnIvPlwiKTtcImZyYW5jaXNfdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogRnJhbmNpcy1UdXJiaW5lPGJyLz5cIik7XCJrYXBsYW5fdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogS2FwbGFuLVR1cmJpbmU8YnIvPlwiKTtcInBlbHRvbl90dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBQZWx0b24tVHVyYmluZTxici8+XCIpO1wic3RyZWFtXCI9PWJbXCJnZW5lcmF0b3I6bWV0aG9kXCJdJiZcImhvcml6b250YWxfYXhpc1wiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cbiAgICBcIkdlbmVyYXRvcnR5cDogR2V6ZWl0ZW5zdHJvbWdlbmVyYXRvciBtaXQgaG9yaXpvbnRhbGVyIEFjaHNlPGJyLz5cIik7XCJzdHJlYW1cIj09YltcImdlbmVyYXRvcjptZXRob2RcIl0mJlwidmVydGljYWxfYXhpc1wiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogR2V6ZWl0ZW5zdHJvbWdlbmVyYXRvciBtaXQgdmVydGlrYWxlciBBY2hzZTxici8+XCIpO1wic3RlYW1fdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogRGFtcGZ0dXJiaW5lPGJyLz5cIik7XCJoZWF0X3B1bXBcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFdcXHUwMGU0cm1lcHVtcGU8YnIvPlwiKTtcInNvbGFyX3RoZXJtYWxfY29sbGVjdG9yXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBTb25uZW5rb2xsZWt0b3I8YnIvPlwiKTtcInNvbGFyX3Bob3Rvdm9sdGFpY19wYW5lbFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJlxuKGErPVwiR2VuZXJhdG9ydHlwOiBQaG90b3ZvbHRhaWMtU3lzdGVtPGJyLz5cIik7XCJzdGVhbV9nZW5lcmF0b3JcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IERhbXBmZ2VuZXJhdG9yPGJyLz5cIik7XCJnYXNfdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogR2FzdHVyYmluZTxici8+XCIpO1wiY29tYmluZWRfY3ljbGVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IERhbXBmZ2VuZXJhdG9yPGJyLz5cIik7XCJyZWNpcHJvY2F0aW5nX2VuZ2luZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogVmVyYnJlbm51bmdzbW90b3IvQmxvY2toZWl6a3JhZnR3ZXJrPGJyLz5cIik7cmV0dXJuIGF9XG5leHBvcnQgZnVuY3Rpb24gZm5XZXJ0c3RvZmZpbmZvKGIpe3ZhciBhPVwiXCI7aWYoXCJjb250YWluZXJcIj09Yi5yZWN5Y2xpbmdfdHlwZXx8XCJjZW50cmVcIj09Yi5yZWN5Y2xpbmdfdHlwZXx8XCJyZWN5Y2xpbmdcIj09Yi5hbWVuaXR5KVwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6Z2xhc3NcIl0mJihhKz1cIkFsdGdsYXNjb250YWluZXI8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnNob2VzXCJdJiYoYSs9XCJTY2h1aGVudHNvcmd1bmc8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmNvb2tpbmdfb2lsXCJdJiYoYSs9XCJTcGVpc2UtXFx1MDBkNmwtRW50c29yZ3VuZzwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6cGFwZXJcIl0mJihhKz1cIlBhcGllcmVudHNvcmd1bmc8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmVuZ2luZV9vaWxcIl0mJihhKz1cIlxcdTAwZDZsLUVudHNvcmd1bmcgKE1hc2NoaW5lbi0sIEFsdC11bmQgTW90b3JcXHUwMGY2bCk8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmNsb3RoZXNcIl0mJihhKz1cbiAgICBcIkFsdGtsZWlkZXJjb250YWluZXI8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmNhcl9iYXR0ZXJpZXNcIl0mJihhKz1cIkF1dG8tQmF0dGVyaWVuLUVudHNvcmd1bmc8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmNhbnNcIl0mJihhKz1cIkJsZWNoZG9zZW5lbnRzb3JndW5nPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpzY3JhcF9tZXRhbFwiXSYmKGErPVwiQWx0bWV0YWxsZW50c29yZ3VuZzwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6cGxhc3RpY1wiXSYmKGErPVwiUGxhc3Rpa2VudHNvcmd1bmc8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmJhdHRlcnJpZXNcIl0mJihhKz1cIkJhdHRlcmllZW50c29yZ3VuZzwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6cGxhc3RpY19ib3R0bGVzXCJdJiYoYSs9XCJQbGFzdGlrZmxhc2NoZW5lbnRzb3JndW5nPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpncmVlbl93YXN0ZVwiXSYmKGErPVwiR3JcXHUwMGZjbmFiZlxcdTAwZTRsbGU8L2JyPlwiKSxcblwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6aGFyZGNvcmVcIl0mJihhKz1cIkJhdXNjaHV0dCB1bmQgU3RyYVxcdTAwZGZlbm1hdGVyaWFsIEVudHNvcmd1bmc8L2JyPlwiKTtyZXR1cm4gYX1cbnZhciBmbkNvbnRlbnRHZW5lcmFsSW5mb3JtYXRpb25zPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7Yi53aWR0aCYmKGErPVwiQnJlaXRlOiBcIitiLndpZHRoK1wiIG08YnIvPlwiKTtiLmhlaWdodCYmKGErPVwiSFxcdTAwZjZoZTogXCIrYi5oZWlnaHQrXCIgbTxici8+XCIpO2IubWF4d2lkdGgmJihhKz1cIk1heGltYWxicmVpdGU6IFwiK2IubWF4d2lkdGgrXCIgbTxici8+XCIpO2IubWF4aGVpZ2h0JiYoYSs9XCJNYXhpbWFsaFxcdTAwZjZoZTogXCIrYi5tYXhoZWlnaHQrXCIgbTxici8+XCIpO2IubWF4d2VpZ2h0JiYoYSs9XCJNYXhpbWFsZ2V3aWNodDogXCIrYi5tYXh3ZWlnaHQrXCIgdDxici8+XCIpO2IubWF4c3BlZWQmJihhKz1cIkhcXHUwMGY2Y2hzdGdlc2Nod2luZGlna2VpdDogXCIrYi5tYXhzcGVlZCtcIiBrbS9oPGJyLz5cIik7Yi5taW5fYWdlJiYoYSs9XCJNaW5kZXN0YWx0ZXI6IFwiK2IubWluX2FnZStcIjxici8+XCIpO2IubWF4X2FnZSYmKGErPVwiTWF4aW1hbGFsdGVyOiBcIitiLm1heF9hZ2UrXCI8YnIvPlwiKTtcInllc1wiPT1cbmIubnVkaXNtJiYoYSs9XCJGcmVpa1xcdTAwZjZycGVya3VsdHVyPGJyLz5cIik7XCJ5ZXNcIj09Yi5ydWlucyYmKGErPVwiUnVpbmU8YnIvPlwiKTtiLmVsZSYmKGErPVwiSFxcdTAwZjZoZSBcXHUwMGZjYmVyIE5OOiBcIitiLmVsZStcIiBtPGJyLz5cIik7YltcInhtYXM6ZGF5X2RhdGVcIl0mJihhKz1cIkRhdWVyIHZvbiAtIGJpczogXCIrYltcInhtYXM6ZGF5X2RhdGVcIl0rXCI8YnIvPlwiKTtiW1wicm90b3I6ZGlhbWV0ZXJcIl0mJihhKz1cIlJvdG9yZHVyY2htZXNzZXI6IFwiK2JbXCJyb3RvcjpkaWFtZXRlclwiXStcIiBtPGJyLz5cIik7YltcInhtYXM6bm90ZVwiXSYmKGErPVwiSGlud2VpczogXCIrYltcInhtYXM6bm90ZVwiXStcIjxici8+XCIpO1wicG9ydFwiPT1iW1wic2VhbWFyazpiZWFjb25fbGF0ZXJhbDpjYXRlZ29yeVwiXSYmKGErPVwiQmFja2JvcmQ8YnIvPlwiKTtcInN0YXJib2FyZFwiPT1iW1wic2VhbWFyazpiZWFjb25fbGF0ZXJhbDpjYXRlZ29yeVwiXSYmKGErPVwiU3RldWVyYm9yZDxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6cmV0YWlsXCJdJiZcbihhKz1cIkZhaHJyYWR2ZXJrYXVmPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpyZXBhaXJcIl0mJihhKz1cIkZhaHJyYWRyZXBhcmF0dXI8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOnJlbnRhbFwiXSYmKGErPVwiRmFocnJhZHZlcmxlaWg8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOnB1bXBcIl0mJihhKz1cIkJlbnV0enVuZyBlaW5lciBMdWZ0cHVtcGUgbVxcdTAwZjZnbGljaDxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6ZGl5XCJdJiYoYSs9XCJCZW51dHp1bmcgdm9uIFdlcmt6ZXVnIG1cXHUwMGY2Z2xpY2g8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOmNsZWFuaW5nXCJdJiYoYSs9XCJGYWhyclxcdTAwZTRkZXIgd2VyZGVuIGdld2FzY2hlbjxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6c2Vjb25kX2hhbmRcIl0mJihhKz1cIlZlcmthdWYgdm9uIGdlYnJhdWNodGVuIEZhaHJyXFx1MDBlNGRlcm48YnIvPlwiKTtcInllc1wiPT1cbmJbXCJzZXJ2aWNlOmJpY3ljbGU6Y2hhcmdpbmdcIl0mJihhKz1cIkVsZWt0cm8tRmFocnJcXHUwMGU0ZGVyIGtcXHUwMGY2bm5lbiBnZWxhZGVuIHdlcmRlbjxici8+XCIpO1wieWVzXCI9PWIuY2FmZSYmKGErPVwiS2xlaW5lIENhZlxcdTAwZTktRWNrZTxici8+XCIpO1wieWVzXCI9PWIuYnJlYWtmYXN0JiYoYSs9XCJCZXNvbmRlcmVzIEZyXFx1MDBmY2hzdFxcdTAwZmNja3NhbmdlYm90PGJyLz5cIik7XCJ5ZXNcIj09Yi5zbmFjayYmKGErPVwiQmFjay1TbmFja3Mgd2FybSBvZGVyIGthbHQ8YnIvPlwiKTtcInllc1wiPT1iLmluZG9vcl9zZWF0aW5nJiYoYSs9XCJTaXR6bVxcdTAwZjZnbGljaGtlaXRlbiBpbSBJbm5lbmJlcmVpY2g8YnIvPlwiKTtcInllc1wiPT1iLm91dGRvb3Jfc2VhdGluZyYmKGErPVwiU2l0em1cXHUwMGY2Z2xpY2hrZWl0ZW4gaW0gQXVcXHUwMGRmZW5iZXJlaWNoPGJyLz5cIik7XCJ5ZXNcIj09Yi5zZWxmX3NlcnZpY2UmJihhKz1cIlNlbGJzdGJlZGllbnVuZ3NiXFx1MDBlNGNrZXJlaTxici8+XCIpO1wieWVzXCI9PWIuYmFrZWhvdXNlJiZcbihhKz1cIkJhY2tzdHViZTxici8+XCIpO1wieWVzXCI9PWIucGFzdHJ5X3Nob3AmJihhKz1cIkdlYlxcdTAwZTRjayBhdXMgZGVyIEtvbmRpdG9yZWk8YnIvPlwiKTtcInllc1wiPT1iLmZhaXJfdHJhZGUmJihhKz1cImVpbmlnZSBGYWlyLVRyYWRlLVByb2R1a3RlIGltIFNvcnRpbWVudDxici8+XCIpO1wib25seVwiPT1iLmZhaXJfdHJhZGUmJihhKz1cImZhc3QgYXVzc2NobGllXFx1MDBkZmxpY2ggRmFpci1UcmFkZS1Qcm9kdWt0ZSBpbSBTb3J0aW1lbnQ8YnIvPlwiKTtcIm5vXCI9PWIuZmFpcl90cmFkZSYmKGErPVwia2VpbmUgRmFpci1UcmFkZS1Qcm9kdWt0ZSBpbSBTb3J0aW1lbnQ8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50SGVhbHRoY2FyZT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKFwiZG9jdG9yc1wiPT1iLmFtZW5pdHl8fFwicGh5c2ljaWFuXCI9PWIub2ZmaWNlfHxcImRvY3RvclwiPT1iLmhlYWx0aGNhcmUpYSs9Zm5Bcnp0SW5mbyhiKSxiLm1lZGljYWxfYXJlYSYmKGErPWIubWVkaWNhbF9hcmVhK1wiPGJyLz5cIiksXG5iLnR5cGUmJihhKz1iLnR5cGUrXCI8YnIvPlwiKSxiW1wiZG9jdG9yczpkZVwiXSYmKGErPWJbXCJkb2N0b3JzOmRlXCJdK1wiPGJyLz5cIiksYltcIm5vdGU6ZGVcIl0mJihhKz1iW1wibm90ZTpkZVwiXStcIjxici8+XCIpO1wieWVzXCI9PWIuZGlzcGVuc2luZyYmKGErPVwiQXBvdGhla2UgbWl0IFJlemVwdGVpbmxcXHUwMGY2c3VuZzxici8+XCIpO1wiYWJ1c2VkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IE1lbnNjaGVuIGRpZSBNaXNzaGFuZGx1bmcgZXJsaXR0ZW4gaGFiZW48YnIvPlwiKTtcImNoaWxkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IEtpbmRlcjxici8+XCIpO1wiZGlzYWJsZWRcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cIkVpbnJpY2h0dW5nIGZcXHUwMGZjcjogTWVuc2NoZW4gbWl0IGtcXHUwMGY2cnBlcmxpY2hlciBvZGVyIGdlaXN0aWdlciBCZWhpbmRlcnVuZzxici8+XCIpO1wiZGlzZWFzZWRcIj09XG5iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBFcmtyYW5rdGUgTWVuc2NoZW48YnIvPlwiKTtcImRydWdfYWRkaWN0ZWRcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cIkVpbnJpY2h0dW5nIGZcXHUwMGZjcjogRHJvZ2Vuc1xcdTAwZmNjaHRpZ2U8YnIvPlwiKTtcImhvbWVsZXNzXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IE9iZGFjaGxvc2U8YnIvPlwiKTtcImp1dmVuaWxlXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IEp1Z2VuZGxpY2hlIHVuZCBUZWVuYWdlcjxici8+XCIpO1wibWVudGFsX2hlYWx0aFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBNZW5zY2hlbiBtaXQgcHN5Y2hpc2NoZW4gUHJvYmxlbWVuPGJyLz5cIik7XCJtaWdyYW50XCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiZcbihhKz1cIkVpbnJpY2h0dW5nIGZcXHUwMGZjcjogTWVuc2NoZW4gbWl0IE1pZ3JhdGlvbnNoaW50ZXJncnVuZDxici8+XCIpO1wib3JwaGFuXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IFdhaXNlbjxici8+XCIpO1wic2VuaW9yXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IFNlbmlvcmVuPGJyLz5cIik7XCJ1bmRlcnByaXZpbGVnZWRcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cIkVpbnJpY2h0dW5nIGZcXHUwMGZjcjogQXJtZSBvZGVyIGJlbmFjaHRlaWxpZ3RlIE1lbnNjaGVuPGJyLz5cIik7XCJ1bmVtcGxveWVkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IEFyYmVpdHNsb3NlPGJyLz5cIik7XCJ2aWN0aW1cIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cIkVpbnJpY2h0dW5nIGZcXHUwMGZjcjogT3BmZXIgZWluZXMgVmVyYnJlY2hlbnM8YnIvPlwiKTtcbiAgICByZXR1cm4gYX07XG5leHBvcnQgZnVuY3Rpb24gZm5BZGRpdGlvbmFsQnVpbGRpbmdJbmZvcyhiKXt2YXIgYT1cIlwiO2JbXCJidWlsZGluZzpjb2xvclwiXSYmKGErPVwiR2ViXFx1MDBlNHVkZW5mYXJiZTogXCIrYltcImJ1aWxkaW5nOmNvbG9yXCJdK1wiPC9icj5cIik7YltcImJ1aWxkaW5nOmhlaWdodFwiXSYmKGErPVwiR2ViXFx1MDBlNHVkZW5oXFx1MDBmNmhlOiBcIitiW1wiYnVpbGRpbmc6aGVpZ2h0XCJdK1wiIG08L2JyPlwiKTtiW1wiYnVpbGRpbmc6bGV2ZWxcIl0mJihhKz1cIkV0YWdlOiBcIitiW1wiYnVpbGRpbmc6bGV2ZWxcIl0rXCI8L2JyPlwiKTtiW1wiYnVpbGRpbmc6cGFydFwiXSYmKGErPVwiR2ViXFx1MDBlNHVkZXRlaWxlOiBcIitiW1wiYnVpbGRpbmc6cGFydFwiXStcIjwvYnI+XCIpO2JbXCJyb29mOmNvbG9yXCJdJiYoYSs9XCJEYWNoZmFyYmU6IFwiK2JbXCJyb29mOmNvbG91clwiXStcIjwvYnI+XCIpO2JbXCJyb29mOnNoYXBlXCJdJiYoYSs9XCJEYWNoZm9ybTogXCIrYltcInJvb2Y6c2hhcGVcIl0rXCI8L2JyPlwiKTtiW1wicm9vZjpoZWlnaHRcIl0mJihhKz1cIkRhY2hoXFx1MDBmNmhlOiBcIitiW1wicm9vZjpoZWlnaHRcIl0rXG4gICAgXCIgbTwvYnI+XCIpO2JbXCJyb29mOm1hdGVyaWFsXCJdJiYoYSs9XCJEYWNobWF0ZXJpYWw6IFwiK2JbXCJyb29mOm1hdGVyaWFsXCJdK1wiIDwvYnI+XCIpO2JbXCJyb29mOm9yaWVudGF0aW9uXCJdJiYoYSs9XCJEYWNoYXVzcmljaHR1bmc6IFwiK2JbXCJyb29mOm9yaWVudGF0aW9uXCJdK1wiIDwvYnI+XCIpO2JbXCJyb29mOmRpcmVjdGlvblwiXSYmKGErPVwiRGFjaGF1c3JpY2h0dW5nOiBcIitiW1wicm9vZjpkaXJlY3Rpb25cIl0rXCIgPC9icj5cIik7YltcImJ1aWxkaW5nOnR5cGVcIl0mJihhKz1cIkdlYlxcdTAwZTR1ZGVudHlwOiBcIitiW1wiYnVpbGRpbmc6dHlwZVwiXStcIjwvYnI+XCIpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuU2ljaGVyaGVpdEFkZGl0aW9uYWwoYil7dmFyIGE9XCJcIjtcInN1cnZlaWxsYW5jZVwiPT1iLm1hbl9tYWRlJiYoXCJpbmRvb3JcIj09Yi5zdXJ2ZWlsbGFuY2UmJihhKz1cIklubmVuYmVyZWljaCB3aXJkIFxcdTAwZmNiZXJ3YWNodFwiKSxcIm91dGRvb3JcIj09Yi5zdXJ2ZWlsbGFuY2UmJihhKz1cIkF1XFx1MDBkZmVuYmVyZWljaCB3aXJkIFxcdTAwZmNiZXJ3YWNodFwiKSxcInB1YmxpY1wiPT1iLnN1cnZlaWxsYW5jZSYmKGErPVwiXFx1MDBkNmZmZW50bGljaGUgXFx1MDBkY2JlcndhY2h1bmdcIiksXCJjYW1lcmFcIj09YltcInN1cnZlaWxsYW5jZTp0eXBlXCJdJiYoYSs9XCJcXHUwMGRjYmVyd2FjaHVuZ3N0eXA6IEthbWVyYVwiKSxcImd1YXJkXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6dHlwZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzdHlwOiBXXFx1MDBlNGNodGVyXCIpLFwiQUxQUlwiPT1iW1wic3VydmVpbGxhbmNlOnR5cGVcIl0mJihhKz1cIlxcdTAwZGNiZXJ3YWNodW5nc3R5cDogQUxQUlwiKSxcInRvd25cIj09YltcInN1cnZlaWxsYW5jZTp6b25lXCJdJiZcbihhKz1cIlxcdTAwZGNiZXJ3YWNodW5nc2JlcmVpY2g6IE9ydFwiKSxcInBhcmtpbmdcIj09YltcInN1cnZlaWxsYW5jZTp6b25lXCJdJiYoYSs9XCJcXHUwMGRjYmVyd2FjaHVuZ3NiZXJlaWNoOiBQYXJrcGxhdHpcIiksXCJ0cmFmZmljXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzYmVyZWljaDogVmVya2VoclwiKSxcInNob3BcIj09YltcInN1cnZlaWxsYW5jZTp6b25lXCJdJiYoYSs9XCJcXHUwMGRjYmVyd2FjaHVuZ3NiZXJlaWNoOiBTaG9wc1wiKSxcImJhbmtcIj09YltcInN1cnZlaWxsYW5jZTp6b25lXCJdJiYoYSs9XCJcXHUwMGRjYmVyd2FjaHVuZ3NiZXJlaWNoOiBCYW5rXCIpLFwiYnVpbGRpbmdcIj09YltcInN1cnZlaWxsYW5jZTp6b25lXCJdJiYoYSs9XCJcXHUwMGRjYmVyd2FjaHVuZ3NiZXJlaWNoOiBHZWJcXHUwMGU0dWRlXCIpKTtyZXR1cm4gYX1cbmV4cG9ydCBmdW5jdGlvbiBmbldyZWNrSW5mbyhiKXt2YXIgYT1cIlwiO1wid3JlY2tcIj09Yi5oaXN0b3JpYyYmKGJbXCJ3cmVjazpkYXRlX3N1bmtcIl0mJihhKz1cIkdlc3Vua2VuIGFtOiBcIitiW1wid3JlY2s6ZGF0ZV9zdW5rXCJdK1wiPGJyLz5cIiksYltcIndyZWNrOmRlcHRoXCJdJiYoYSs9XCJUaWVmZTogXCIrYltcIndyZWNrOmRlcHRoXCJdK1wiPGJyLz5cIiksYltcIndyZWNrOmNsZWFyYW5jZVwiXSYmKGErPVwiRnJlaXJhdW06IFwiK2JbXCJ3cmVjazpjbGVhcmFuY2VcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6ZGF0ZV9jb21taXNzaW9uZWRcIl0mJihhKz1cIkFuZXJrYW5udCBzZWl0OiBcIitiW1wid3JlY2s6ZGF0ZV9jb21taXNzaW9uZWRcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6Z3Jvc3NfdG9ubmFnZVwiXSYmKGErPVwiR2V3aWNodDogXCIrYltcIndyZWNrOmdyb3NzX3Rvbm5hZ2VcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6bGVuZ3RoXCJdJiYoYSs9XCJMXFx1MDBlNG5nZTogXCIrYltcIndyZWNrOmxlbmd0aFwiXStcIjxici8+XCIpLGJbXCJ3cmVjazp3aWR0aFwiXSYmXG4oYSs9XCJCcmVpdGU6IFwiK2JbXCJ3cmVjazp3aWR0aFwiXStcIjxici8+XCIpLGJbXCJ3cmVjazpjYXJnb1wiXSYmKGE9XCJ0aW1iZXJcIj09YltcIndyZWNrOmNhcmdvXCJdP2ErXCJMYWR1bmc6IEhvbHo8YnIvPlwiOlwiY29hbFwiPT1iW1wid3JlY2s6Y2FyZ29cIl0/YStcIkxhZHVuZzogS29obGU8YnIvPlwiOmErKFwiTGFkdW5nOiBcIitiW1wid3JlY2s6Y2FyZ29cIl0rXCI8YnIvPlwiKSksXCJ5ZXNcIj09YltcIndyZWNrOnZpc2libGVfYXRfbG93X3RpZGVcIl0mJihhKz1cIlNpY2h0YmFyIGJlaSBOaWVkcmlnd2Fzc2VyOiBKYTxici8+XCIpLFwibm9cIj09YltcIndyZWNrOnZpc2libGVfYXRfbG93X3RpZGVcIl0mJihhKz1cIlNpY2h0YmFyIGJlaSBOaWVkcmlnd2Fzc2VyOiBOZWluPGJyLz5cIiksXCJ5ZXNcIj09YltcIndyZWNrOnZpc2libGVfYXRfaGlnaF90aWRlXCJdJiYoYSs9XCJTaWNodGJhciBiZWkgSG9jaHdhc3NlcjogSmE8YnIvPlwiKSxcIm5vXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2hpZ2hfdGlkZVwiXSYmKGErPVwiU2ljaHRiYXIgYmVpIEhvY2h3YXNzZXI6IE5laW48YnIvPlwiKSxcblwieWVzXCI9PWIuYWNjZXNzJiYoYSs9XCJadXRyaXR0IG1cXHUwMGY2Z2xpY2g8YnIvPlwiKSxcIm5vXCI9PWIuYWNjZXNzJiYoYSs9XCJadXRyaXR0IG5pY2h0IG1cXHUwMGY2Z2xpY2g8YnIvPlwiKSxcInBlcm1pdF9yZXF1aXJlZFwiPT1iLmFjY2VzcyYmKGErPVwiWnV0cml0dCBudXIgbWl0IEdlbmVobWlndW5nPGJyLz5cIikpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuS2xvc3RlckFkZGl0aW9uYWwoYil7dmFyIGE9XCJcIjtpZihiW1wibW9uYXN0ZXJ5OnR5cGVcIl0pc3dpdGNoKGJbXCJtb25hc3Rlcnk6dHlwZVwiXSl7Y2FzZSBcIm1vbmFzdGVyeVwiOmErPVwiVHlwOiBLbFxcdTAwZjZzdGVybGljaGUgR2VtZWluc2NoYWZ0IChtb25hc3RlcnkpPGJyLz5cIjticmVhaztjYXNlIFwiY29udmVudFwiOmErPVwiVHlwOiBCZXR0ZWxtXFx1MDBmNm5jaCBHZW1laW5zY2hhZnQgKGNvbnZlbnQpPGJyLz5cIjticmVhaztjYXNlIFwiY2Fub25yeVwiOmErPVwiVHlwOiBLYW5vbmlrYXQgKGNhbm9ucnkpPGJyLz5cIjticmVhaztjYXNlIFwiY29tbWFuZHJ5XCI6YSs9XCJUeXA6IE1pbGl0XFx1MDBlNHIgZ2VmXFx1MDBmY2hydCAoY29tbWFuZHJ5KTxici8+XCI7YnJlYWs7Y2FzZSBcImhlcm1pdGFnZVwiOmErPVwiVHlwOiBFaW5zaWVkZWxlaSAoaGVybWl0YWdlKTxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIlR5cDogdW5iZWthbm50PGJyLz5cIn1iW1wiY29tbXVuaXR5OmdlbmRlclwiXSYmKFwibWFsZVwiPT1cbmJbXCJjb21tdW5pdHk6Z2VuZGVyXCJdJiYoYSs9XCJHZXNjaGxlY2h0OiBNXFx1MDBlNG5uZXJnZW1laW5zY2hhZnQ8YnIvPlwiKSxcImZlbWFsZVwiPT1iW1wiY29tbXVuaXR5OmdlbmRlclwiXSYmKGErPVwiR2VzY2hsZWNodDogRnJhdWVuZ2VtZWluc2NoYWZ0PGJyLz5cIikpO2IucmVsaWdpb3VzX3JhbmsmJihcImFiYmV5XCI9PWIucmVsaWdpb3VzX3Jhbms/YSs9XCJSZWxpZ2lcXHUwMGY2c2VyIFJhbmc6IEFidGVpPGJyLz5cIjpcImFiYmV5XCI9PWIucmVsaWdpb3VzX3JhbmsmJihhKz1cIlJlbGlnaVxcdTAwZjZzZXIgUmFuZzogRXJ6YWJ0ZWk8YnIvPlwiKSk7XCJ5ZXNcIj09Yi5zaHJpbmUmJihhKz1cIkJlc29uZGVyaGVpdDogSGVpbGlnZW5ncmFiIC8gUmVsaXF1aWVuc2NocmVpbjxici8+XCIpO1wieWVzXCI9PWIuc2FuY3R1YXJ5JiYoYSs9XCJCZXNvbmRlcmhlaXQ6IEhlaWxpZ3R1bSAvIEFsdGFycmF1bSAoU2Fua3R1YXIpPGJyLz5cIik7aWYoYi5yZWxpZ2lvbilzd2l0Y2goYi5yZWxpZ2lvbil7Y2FzZSBcImFuaW1pc3RcIjphKz1cbiAgICBcIlJlbGlnaW9uOiBhbmltaXN0aXNjaDxici8+PGJyLz5cIjticmVhaztjYXNlIFwiYmFoYWlcIjphKz1cIlJlbGlnaW9uOiBiYWhhaTxici8+XCI7YnJlYWs7Y2FzZSBcImJ1ZGRoaXN0XCI6YSs9XCJSZWxpZ2lvbjogYnVkZGhpc3Rpc2NoPGJyLz5cIjticmVhaztjYXNlIFwiY2hyaXN0aWFuXCI6YSs9XCJSZWxpZ2lvbjogY2hyaXN0bGljaDxici8+XCI7YnJlYWs7Y2FzZSBcImhpbmR1XCI6YSs9XCJSZWxpZ2lvbjogaGluZHVpc3Rpc2NoPGJyLz5cIjticmVhaztjYXNlIFwiSWdsZXNpYU5pQ3Jpc3RvXCI6YSs9XCJSZWxpZ2lvbjogSWdsZXNpYU5pQ3Jpc3RvPGJyLz5cIjticmVhaztjYXNlIFwiamFpblwiOmErPVwiUmVsaWdpb246IGphaW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJqZXdpc2hcIjphKz1cIlJlbGlnaW9uOiBqXFx1MDBmY2Rpc2NoPGJyLz5cIjticmVhaztjYXNlIFwibXVsdGlmYWl0aFwiOmErPVwiUmVsaWdpb246IHBsdXJhbGlzdGlzY2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtdXNsaW1cIjphKz1cIlJlbGlnaW9uOiBtdXNsaW1pc2NoPGJyLz5cIjtcbiAgICB0eXBlKz1cIk1vc2NoZWU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYWdhblwiOmErPVwiUmVsaWdpb246IGhlaWRuaXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcInBhc3RhZmFyaWFuXCI6YSs9XCJSZWxpZ2lvbjogcGFzdGFmYXJpc2NoPGJyLz5cIjticmVhaztjYXNlIFwic2NpZW50b2xvZ2lzdFwiOmErPVwiUmVsaWdpb246IHNjaWVudG9sb2dpc2NoPGJyLz5cIjticmVhaztjYXNlIFwic2hpbnRvXCI6YSs9XCJSZWxpZ2lvbjogc2NoaW50b2lzdGlzY2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzaWtoXCI6YSs9XCJSZWxpZ2lvbjogc2lraDxici8+XCI7YnJlYWs7Y2FzZSBcInNwaXJpdHVhbGlzdFwiOmErPVwiUmVsaWdpb246IHNwaXJpdGlzdGlzY2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0YW9pc3RcIjphKz1cIlJlbGlnaW9uOiB0YW9pc3Rpc2NoPGJyLz5cIjticmVhaztjYXNlIFwidW5pdGFyaWFuXCI6YSs9XCJSZWxpZ2lvbjogdW5pdGFyaWFuPGJyLz5cIjticmVhaztjYXNlIFwieWF6aWRpXCI6YSs9XCJSZWxpZ2lvbjogeWF6aWRpPGJyLz5cIjticmVhaztcbiAgICBjYXNlIFwiem9yb2FzdHJpYW5cIjphKz1cIlJlbGlnaW9uOiB6b3JvYXN0cmlzY2g8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJSZWxpZ2lvbjogdW5iZWthbm50PGJyLz5cIn1pZihiLmRlbm9taW5hdGlvbilzd2l0Y2goYi5kZW5vbWluYXRpb24pe2Nhc2UgXCJhbmdsaWNhblwiOmErPVwiS29uZmVzc2lvbjogQW5nbGlrYW5pc2NoZSBHZW1laW5zY2hhZnQ8YnIvPjxici8+XCI7YnJlYWs7Y2FzZSBcImJhcHRpc3RcIjphKz1cIktvbmZlc3Npb246IEJhcHRpc3Rlbjxici8+XCI7YnJlYWs7Y2FzZSBcImNhdGhvbGljXCI6YSs9XCJLb25mZXNzaW9uOiBLYXRob2xpc2NoZSBLaXJjaGUsIG9obmUgZ2VuYXVlcmUgU3BlemlmaXppZXJ1bmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyb21hbl9jYXRob2xpY1wiOmErPVwiS29uZmVzc2lvbjogUlxcdTAwZjZtaXNjaC1LYXRob2xpc2NoZSBLaXJjaGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvbGRfY2F0aG9saWNcIjphKz1cIktvbmZlc3Npb246IEFsdGthdGhvbGlzY2hlIEtpcmNoZSAoU2Nod2VpejogQ2hyaXN0LUthdGhvbGlzY2gpPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwiZ3JlZWtfY2F0aG9saWNcIjphKz1cIktvbmZlc3Npb246IEdyaWVjaGlzY2gtS2F0aG9saXNjaGUgS2lyY2hlLCBTYW1tZWxiZXplaWNobnVuZyBmXFx1MDBmY3IgZGllIG1pdCBSb20gdW5pZXJ0ZW4gT3N0a2lyY2hlbiBkZXMgYnl6YW50aW5pc2NoZW4gUml0dXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJldmFuZ2VsaWNhbFwiOmErPVwiS29uZmVzc2lvbjogRXZhbmdlbGlrYWxpc211cyBpc3QgZWluZSB0aGVvbG9naXNjaGUgUmljaHR1bmcgaW5uZXJoYWxiIGRlcyBQcm90ZXN0YW50aXNtdXMuIEFjaHR1bmchIE5pY2h0IHZlcndlY2hzZWxuIG1pdCBkZXIgZXZhbmdlbGlzY2hlbiAoPSBwcm90ZXN0YW50aXNjaGVuKSBLaXJjaGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJqZWhvdmFoc193aXRuZXNzXCI6YSs9XCJLb25mZXNzaW9uOiBaZXVnZW4gSmVob3Zhczxici8+XCI7YnJlYWs7Y2FzZSBcImx1dGhlcmFuXCI6YSs9XCJLb25mZXNzaW9uOiBMdXRoZXJhbmVyLCBldmFuZ2VsaXNjaC1sdXRoZXJpc2NoPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwibWVubm9uaXRlXCI6YSs9XCJLb25mZXNzaW9uOiBNZW5ub25pdGVuPGJyLz5cIjticmVhaztjYXNlIFwibWVzc2lhbmljX2pld2lzaFwiOmErPVwiS29uZmVzc2lvbjogTWVzc2lhbmlzY2hlIEp1ZGVuLCBzdGVoZW4gdGhlb2xvZ2lzY2ggZGVuIGV2YW5nZWxpa2FsZW4gQ2hyaXN0ZW4gbmFoZS48YnIvPlwiO2JyZWFrO2Nhc2UgXCJtZXRob2Rpc3RcIjphKz1cIktvbmZlc3Npb246IE1ldGhvZGlzdCBDaHVyY2ggKGVuZ2wuIE1ldGhvZGlzbSk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtb3Jtb25cIjphKz1cIktvbmZlc3Npb246IE1vcm1vbmVuPGJyLz5cIjticmVhaztjYXNlIFwibmV3X2Fwb3N0b2xpY1wiOmErPVwiS29uZmVzc2lvbjogTmV1YXBvc3RvbGlzY2hlIEtpcmNoZTxici8+XCI7YnJlYWs7Y2FzZSBcIm9ydGhvZG94XCI6YSs9XCJLb25mZXNzaW9uOiBPcnRob2RveCwgb2huZSBnZW5hdWVyZSBTcGV6aWZpemllcnVuZzxici8+XCI7YnJlYWs7Y2FzZSBcImdyZWVrX29ydGhvZG94XCI6YSs9XCJLb25mZXNzaW9uOiBHcmllY2hpc2NoLU9ydGhvZG94PGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwiY29wdGljX29ydGhvZG94XCI6YSs9XCJLb25mZXNzaW9uOiBLb3B0aXNjaGUgS2lyY2hlLCBpc3QgZGllIGNocmlzdGxpY2hlIGFsdG9yaWVudGFsaXNjaGUgS2lyY2hlIFxcdTAwYzRneXB0ZW5zLjxici8+XCI7YnJlYWs7Y2FzZSBcInBlbnRlY29zdGFsXCI6YSs9XCJLb25mZXNzaW9uOiBQZmluZ3N0YmV3ZWd1bmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwcmVzYnl0ZXJpYW5cIjphKz1cIktvbmZlc3Npb246IFByZXNieXRlcmlhbmlzY2hlIEtpcmNoZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJwcm90ZXN0YW50XCI6YSs9XCJLb25mZXNzaW9uOiBFdmFuZ2VsaXNjaGUgS2lyY2hlbjxici8+XCI7YnJlYWs7Y2FzZSBcInF1YWtlclwiOmErPVwiS29uZmVzc2lvbjogUXVcXHUwMGU0a2VyPGJyLz5cIjticmVhaztjYXNlIFwicmVmb3JtZWRcIjphKz1cIktvbmZlc3Npb246IEV2YW5nZWxpc2NoLXJlZm9ybWllcnRlPGJyLz5cIjticmVhaztjYXNlIFwicnVzc2lhbl9vcnRob2RveFwiOmErPVwiS29uZmVzc2lvbjogUnVzc2lzY2gtT3J0aG9kb3g8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJzZXZlbnRoX2RheV9hZHZlbnRpc3RcIjphKz1cIktvbmZlc3Npb246IFNpZWJlbnRlbi1UYWdzLUFkdmVudGlzdGVuPGJyLz5cIjticmVhaztjYXNlIFwiY2hyaXN0aWFuX2NvbW11bml0eVwiOmErPVwiS29uZmVzc2lvbjogRGllIENocmlzdGVuZ2VtZWluc2NoYWZ0IGlzdCBlaW5lIGNocmlzdGxpY2hlIEtpcmNoZSwgZGllIHNpY2ggYWxzIHNlbGJzdFxcdTAwZTRuZGlnZSBLdWx0dXNnZW1laW5zY2hhZnQgdmVyc3RlaHQuPGJyLz5cIjticmVhaztjYXNlIFwiYWR2ZW50aXN0XCI6YSs9XCJLb25mZXNzaW9uOiBBZHZlbnRpc3RlbiwgbmljaHQgYWxsZSBBZHZlbnRpc3RlbiBzaW5kIFNpZWJlbnRlbi1UYWdzLUFkdmVudGlzdGVuLjxici8+XCI7YnJlYWs7Y2FzZSBcImFsbGlhbmNlXCI6YSs9XCJLb25mZXNzaW9uOiBDaHJpc3RpYW4gYW5kIE1pc3Npb25hcnkgQWxsaWFuY2UgKEMmTUEpIGlzIGFuIGV2YW5nZWxpY2FsIFByb3Rlc3RhbnQgZGVub21pbmF0aW9uIHdpdGhpbiBDaHJpc3RpYW5pdHkuPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwiYXNzZW1ibGllc19vZl9nb2RcIjphKz1cIktvbmZlc3Npb246IEFzc2VtYmxpZXMgb2YgR29kLCBpc3QgZWluZSBwZmluZ3N0bGVyaXNjaGUgRGVub21pbmF0aW9uLjxici8+XCI7YnJlYWs7Y2FzZSBcImFwb3N0b2xpY1wiOmErPVwiS29uZmVzc2lvbjogQXBvc3RvbGlzY2hlIEtpcmNoZTxici8+XCI7YnJlYWs7Y2FzZSBcImFybWVuaWFuX2Fwb3N0b2xpY1wiOmErPVwiS29uZmVzc2lvbjogQXJtZW5pc2NoZSBBcG9zdG9saXNjaGUgS2lyY2hlLCBpc3QgZWluZSBhbHRvcmllbnRhbGlzY2hlIEtpcmNoZS48YnIvPlwiO2JyZWFrO2Nhc2UgXCJhc3N5cmlhblwiOmErPVwiS29uZmVzc2lvbjogQXNzeXJpc2NoZSBLaXJjaGUgZGVzIE9zdGVucywgYXVjaCBBcG9zdG9saXNjaGUgS2lyY2hlIGRlcyBPc3RlbnMsIGlzdCBlaW5lIGF1dG9rZXBoYWxlIHVuZCB2XFx1MDBmNmxsaWcgZWlnZW5zdFxcdTAwZTRuZGlnZSBPc3RraXJjaGUgc3lyaXNjaGVyIFRyYWRpdGlvbiBpbiBOYWNoZm9sZ2UgZGVzIGFsdGNocmlzdGxpY2hlbiBLYXRob2xpa2F0cyB2b24gU2VsZXVraWEtS3Rlc2lwaG9uLjxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImNocmlzdF9zY2llbnRpc3RcIjphKz1cIktvbmZlc3Npb246IENocmlzdGlhbiBTY2llbmNlIChkZXV0c2NoOiBDaHJpc3RsaWNoZSBXaXNzZW5zY2hhZnQpIGdpbmcgYXVzIGRlciBOZXVnZWlzdC1CZXdlZ3VuZyBoZXJ2b3IuPGJyLz5cIjticmVhaztjYXNlIFwiY2h1cmNoX29mX3Njb3RsYW5kXCI6YSs9XCJLb25mZXNzaW9uOiBDaHVyY2ggb2YgU2NvdGxhbmQgKGR0LiBLaXJjaGUgU2Nob3R0bGFuZHMpIGlzdCBkaWUgTmF0aW9uYWxraXJjaGUgaW4gU2Nob3R0bGFuZC4gSW0gU3ByYWNoZ2VicmF1Y2ggYXVjaCBcXHUyMDFldGhlIEtpcmtcXHUyMDFjIGdlbmFubnQuPGJyLz5cIjticmVhaztjYXNlIFwiY3plY2hvc2xvdmFrX2h1c3NpdGVcIjphKz1cIktvbmZlc3Npb246IFRzY2hlY2hvc2xvd2FraXNjaGUgSHVzc2l0aXNjaGUgS2lyY2hlLCBpc3QgZWluZSBjaHJpc3RsaWNoZSBLaXJjaGUsIGRpZSBkdXJjaCBBYnNwYWx0dW5nIHZvbiBkZXIgUlxcdTAwZjZtaXNjaC1LYXRob2xpc2NoZW4gS2lyY2hlIGVudHN0YW5kZW4gaXN0LiBPZnQgYXVjaCBOZXVodXNzaXRpc2NoZSBLaXJjaGUgZ2VuYW5udCwgdm9ybmVobWxpY2ggaW4gVHNjaGVjaGllbiB2ZXJicmVpdGV0LCBhYmVyIGF1Y2ggaW4gZGVyIFNsb3dha2VpPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwiZHV0Y2hfcmVmb3JtZWRcIjphKz1cIktvbmZlc3Npb246IE5pZWRlcmxcXHUwMGU0bmRpc2NoLXJlZm9ybWllcnRlIEtpcmNoZSwgKGVpbnNjaGxpZVxcdTAwZGZsaWNoIE5HSyB1bmQgXFx1MDBlNGhubGljaGUgS2lyY2hlbiBpbiBTXFx1MDBmY2RhZnJpa2EpPGJyLz5cIjticmVhaztjYXNlIFwiZXhjbHVzaXZlX2JyZXRocmVuXCI6YSs9XCJLb25mZXNzaW9uOiBFeGNsdXNpdmUgQnJldGhyZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJmb3Vyc3F1YXJlXCI6YSs9XCJLb25mZXNzaW9uOiBJbnRlcm5hdGlvbmFsIENodXJjaCBvZiB0aGUgRm91cnNxdWFyZSBHb3NwZWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJraW1iYW5ndWlzdFwiOmErPVwiS29uZmVzc2lvbjogS2ltYmFuZ3Vpc3RlbmtpcmNoZSwgaXN0IGVpbmUgYWZyaWthbmlzY2hlLCB1bmFiaFxcdTAwZTRuZ2lnZSwgY2hyaXN0bGljaGUgS2lyY2hlLjxici8+XCI7YnJlYWs7Y2FzZSBcImxpdmluZ193YXRlcnNfY2h1cmNoXCI6YSs9XCJLb25mZXNzaW9uOiBMaXZpbmcgV2F0ZXJzIENocmlzdGlhbiBDaHVyY2g8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJtYXJpYXZpdGVcIjphKz1cIktvbmZlc3Npb246IE1hcmlhdml0aXNtdXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtYXJvbml0ZVwiOmErPVwiS29uZmVzc2lvbjogU3lyaXNjaC1tYXJvbml0aXNjaGUgS2lyY2hlLCBpc3QgZWluZSBtaXQgUm9tIHVuaWVydGUsIGNocmlzdGxpY2hlIEtpcmNoZSwgZGllIGRlbiByXFx1MDBmNm1pc2NoZW4gUGFwc3QgYWxzIE9iZXJoYXVwdCBhbmVya2VubnQuPGJyLz5cIjticmVhaztjYXNlIFwibW9yYXZpYW5cIjphKz1cIktvbmZlc3Npb246IEhlcnJuaHV0ZXIgQnJcXHUwMGZjZGVyZ2VtZWluZSwgKGF1Y2g6IFVuaXRhcyBGcmF0cnVtLCBFdmFuZ2VsaXNjaGUgb2RlciBFcm5ldWVydGUgQnJcXHUwMGZjZGVyLVVuaXRcXHUwMGU0dCwgZW5nbC4gTW9yYXZpYW4gQ2h1cmNoKSBpc3QgZWluZSBhdXMgZGVyIGJcXHUwMGY2aG1pc2NoZW4gUmVmb3JtYXRpb24gaGVya29tbWVuZGUgXFx1MDBmY2JlcmtvbmZlc3Npb25lbGwtY2hyaXN0bGljaGUgR2xhdWJlbnNiZXdlZ3VuZy48YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJuYXphcmVuZVwiOmErPVwiS29uZmVzc2lvbjogS2lyY2hlIGRlcyBOYXphcmVuZXJzLCBpc3QgZWluZSBGcmVpa2lyY2hlIHVuZCBIZWlsaWd1bmdzZ2VtZWluZGUgaW4gbWV0aG9kaXN0aXNjaGVyIFRyYWRpdGlvbi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJub25kZW5vbWluYXRpb25hbFwiOmErPVwiS29uZmVzc2lvbjogTm9uZGVub21pbmF0aW9uYWwgQ2hyaXN0aWFuaXR5PGJyLz5cIjticmVhaztjYXNlIFwib2xkX2JlbGlldmVyc1wiOmErPVwiS29uZmVzc2lvbjogQWx0b3J0aG9kb3hlLCAoaFxcdTAwZTR1ZmlnZXIgQWx0Z2xcXHUwMGU0dWJpZ2UpIGlzdCBlaW5lIFNhbW1lbGJlemVpY2hudW5nIGZcXHUwMGZjciByZWxpZ2lcXHUwMGY2c2UgU3RyXFx1MDBmNm11bmdlbiB1bmQgR3J1cHBlbiBpbm5lcmhhbGIgZGVyIHJ1c3Npc2NoLW9ydGhvZG94ZW4gVHJhZGl0aW9uLjxici8+XCI7YnJlYWs7Y2FzZSBcInBvbGlzaF9jYXRob2xpY1wiOmErPVwiS29uZmVzc2lvbjogUG9sbmlzY2gtS2F0aG9saXNjaGUgS2lyY2hlPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwic2FsdmF0aW9uX2FybXlcIjphKz1cIktvbmZlc3Npb246IEhlaWxzYXJtZWUsIGlzdCBlaW5lIGNocmlzdGxpY2hlIEZyZWlraXJjaGUgbWl0IGF1c2dlcHJcXHUwMGU0Z3RlciBzb3ppYWxlciBUXFx1MDBlNHRpZ2tlaXQuPGJyLz5cIjticmVhaztjYXNlIFwic2FudG9fZGFpbWVcIjphKz1cIktvbmZlc3Npb246IFNhbnRvIERhaW1lLCBpc3QgZWluZXIgc3lua3JldGlzdGlzY2hlbiByZWxpZ2lcXHUwMGY2c2UgQmV3ZWd1bmcgYXVzIEJyYXNpbGllbi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZXJiaWFuX29ydGhvZG94XCI6YSs9XCJLb25mZXNzaW9uOiBTZXJiaXNjaC1PcnRob2RveGUgS2lyY2hlLCBiZXplaWNobmV0IGRpZSBvcnRob2RveGUgS2lyY2hlIHZvbiBTZXJiaWVuIHVuZCBkaWUgaWhyIG5hY2hnZW9yZG5ldGVuIEtpcmNoZW4uPGJyLz5cIjticmVhaztjYXNlIFwic3Bpcml0aXNtXCI6YSs9XCJLb25mZXNzaW9uOiBTcGlyaXRpc211cywgb2RlciBTcGlyaXR1YWxpc211cyBkaWUgTGVocmUgZGVzIFNwaXJpdGlzdGVuIEFsbGFuIEthcmRlYzxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcInVuaXRlZFwiOmErPVwiS29uZmVzc2lvbjogVW5pdGVkIENodXJjaCBvZiBDYW5hZGEsIGlzdCBkaWUgendlaXRnclxcdTAwZjZcXHUwMGRmdGUgS2lyY2hlIGluIEthbmFkYS48YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bml0ZWRfY2h1cmNoX29mX2NocmlzdFwiOmErPVwiS29uZmVzc2lvbjogVW5pdGVkIENodXJjaCBvZiBDaHJpc3QsIGlzdCBlaW5lIEtpcmNoZSBpbiBkZW4gVVNBLjxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRlZF9mcmVlX2NodXJjaF9vZl9zY290bGFuZFwiOmErPVwiS29uZmVzc2lvbjogVW5pdGVkIEZyZWUgQ2h1cmNoIG9mIFNjb3RsYW5kLCBpc3QgZWluZSBwcmVzYnl0ZXJpYW5pc2NoZSBGcmVpa2lyY2hlIGluIFNjaG90dGxhbmQuPGJyLz5cIjticmVhaztjYXNlIFwidW5pdGVkX21ldGhvZGlzdFwiOmErPVwiS29uZmVzc2lvbjogRXZhbmdlbGlzY2gtbWV0aG9kaXN0aXNjaGUgS2lyY2hlLCAoZW5nbC4gVW5pdGVkIE1ldGhvZGlzdCBDaHVyY2ggKFVNQykpIGlzdCBlaW5lIGNocmlzdGxpY2hlIEtpcmNoZSBpbiBkZXIgd2VzbGV5YW5pc2NoZW4gVHJhZGl0aW9uLjxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcInVuaXRlZF9yZWZvcm1lZFwiOmErPVwiS29uZmVzc2lvbjogVW5pdGVkIFJlZm9ybWVkIENodXJjaCwgKFZlcmVpbmlndGUgUmVmb3JtaWVydGUgS2lyY2hlLCBVUkMpIGlzdCBlaW5lIHJlZm9ybWllcnRlIEtpcmNoZSBpbiBHcm9cXHUwMGRmYnJpdGFubmllbi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bml0aW5nXCI6YSs9XCJLb25mZXNzaW9uOiBVbml0aW5nIENodXJjaCBpbiBBdXN0cmFsaWEgKFVDQSkgaXN0IGRpZSBkcml0dGdyXFx1MDBmNlxcdTAwZGZ0ZSBjaHJpc3RsaWNoZSBEZW5vbWluYXRpb24gaW4gQXVzdHJhbGllbi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaHVyY2hfb2Zfc3dlZGVuXCI6YSs9XCJLb25mZXNzaW9uOiBTY2h3ZWRpc2NoZSBLaXJjaGUsIGlzdCBkaWUgZXZhbmdlbGlzY2gtbHV0aGVyaXNjaGUgS2lyY2hlIHVuZCBlaGVtYWxpZ2UgU3RhYXRza2lyY2hlIFNjaHdlZGVucy48YnIvPlwiO2JyZWFrO2Nhc2UgXCJtaXNzaW9uX2NvdmVuYW50X2NodXJjaF9vZl9zd2VkZW5cIjphKz1cbiAgICBcIktvbmZlc3Npb246IFNjaHdlZGlzY2hlIE1pc3Npb25za2lyY2hlIGlzdCBlaW5lIHJlZm9ybWllcnRlIEtpcmNoZSBpbiBTY2h3ZWRlbi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJhbHRlcm5hdGl2ZVwiOmErPVwiS29uZmVzc2lvbjogYWx0ZXJuYXRpdmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhc2hrZW5hemlcIjphKz1cIktvbmZlc3Npb246IGFzaGtlbmF6aTxici8+XCI7YnJlYWs7Y2FzZSBcImJ1Y2hhcmlcIjphKz1cIktvbmZlc3Npb246IGJ1Y2hhcmk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb25zZXJ2YXRpdmVcIjphKz1cIktvbmZlc3Npb246IGNvbnNlcnZhdGl2ZTxici8+XCI7YnJlYWs7Y2FzZSBcImVnYWxpdGFyaWFuXCI6YSs9XCJLb25mZXNzaW9uOiBlZ2FsaXRhcmlhbjxici8+XCI7YnJlYWs7Y2FzZSBcImhhc2lkaWNcIjphKz1cIktvbmZlc3Npb246IGhhc2lkaWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJodW1hbmlzdGljXCI6YSs9XCJLb25mZXNzaW9uOiBodW1hbmlzdGljPGJyLz5cIjticmVhaztjYXNlIFwia2FiYmFsYWhcIjphKz1cbiAgICBcIktvbmZlc3Npb246IGthYmJhbGFoPGJyLz5cIjticmVhaztjYXNlIFwia2FiYmFsaXN0aWNcIjphKz1cIktvbmZlc3Npb246IGthYmJhbGlzdGljPGJyLz5cIjticmVhaztjYXNlIFwia2FyYWl0ZVwiOmErPVwiS29uZmVzc2lvbjoga2FyYWl0ZTxici8+XCI7YnJlYWs7Y2FzZSBcImxpYmVyYWxcIjphKz1cIktvbmZlc3Npb246IGxpYmVyYWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsdWJhdml0Y2hcIjphKz1cIktvbmZlc3Npb246IGx1YmF2aXRjaDxici8+XCI7YnJlYWs7Y2FzZSBcImx1YmF2aXRjaF9tZXNzaWFuaWNcIjphKz1cIktvbmZlc3Npb246IGx1YmF2aXRjaF9tZXNzaWFuaWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtaXpyYWNoaV9iYWdoZGFkaVwiOmErPVwiS29uZmVzc2lvbjogbWl6cmFjaGlfYmFnaGRhZGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtaXpyYWNoaV9jaGlkYVwiOmErPVwiS29uZmVzc2lvbjogbWl6cmFjaGlfY2hpZGE8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtaXpyYWNoaV9qZXJ1c2FsZW1pdGVcIjphKz1cIktvbmZlc3Npb246IG1penJhY2hpX2plcnVzYWxlbWl0ZTxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcIm1penJhY2hpX2xpdm9ybm9cIjphKz1cIktvbmZlc3Npb246IG1penJhY2hpX2xpdm9ybm88YnIvPlwiO2JyZWFrO2Nhc2UgXCJtaXpyYWNoaV9tb3JvY2NhblwiOmErPVwiS29uZmVzc2lvbjogbWl6cmFjaGlfbW9yb2NjYW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJtb2Rlcm5fb3J0aG9kb3hcIjphKz1cIktvbmZlc3Npb246IG1vZGVybl9vcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcIm5lb19vcnRob2RveFwiOmErPVwiS29uZmVzc2lvbjogbmVvX29ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwibm9uZGVub21pbmF0aW9uYWxcIjphKz1cIktvbmZlc3Npb246IG5vbmRlbm9taW5hdGlvbmFsPGJyLz5cIjticmVhaztjYXNlIFwib3J0aG9kb3hcIjphKz1cIktvbmZlc3Npb246IG9ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwib3J0aG9kb3hfYXNoa2VuYXpcIjphKz1cIktvbmZlc3Npb246IG9ydGhvZG94X2FzaGtlbmF6PGJyLz5cIjticmVhaztjYXNlIFwib3J0aG9kb3hfc2VmYXJkXCI6YSs9XCJLb25mZXNzaW9uOiBvcnRob2RveF9zZWZhcmQ8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJwcm9ncmVzc2l2ZVwiOmErPVwiS29uZmVzc2lvbjogcHJvZ3Jlc3NpdmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyZWNvbnN0cnVjdGlvbmlzdFwiOmErPVwiS29uZmVzc2lvbjogcmVjb25zdHJ1Y3Rpb25pc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyZWZvcm1cIjphKz1cIktvbmZlc3Npb246IHJlZm9ybTxici8+XCI7YnJlYWs7Y2FzZSBcInJlbmV3YWxcIjphKz1cIktvbmZlc3Npb246IHJlbmV3YWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzYW1hcml0YW5cIjphKz1cIktvbmZlc3Npb246IHNhbWFyaXRhbjxici8+XCI7YnJlYWs7Y2FzZSBcInNlZmFyZGlcIjphKz1cIktvbmZlc3Npb246IHNlZmFyZGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZWZhcmRpX2Ftc3RlcmRhbVwiOmErPVwiS29uZmVzc2lvbjogc2VmYXJkaV9hbXN0ZXJkYW08YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZWZhcmRpX2xvbmRvblwiOmErPVwiS29uZmVzc2lvbjogc2VmYXJkaV9sb25kb248YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0cmFkaXRpb25hbFwiOmErPVwiS29uZmVzc2lvbjogdHJhZGl0aW9uYWw8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJ1bHRyYV9vcnRob2RveFwiOmErPVwiS29uZmVzc2lvbjogdWx0cmFfb3J0aG9kb3g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bmFmZmlsaWF0ZWRcIjphKz1cIktvbmZlc3Npb246IHVuYWZmaWxpYXRlZDxici8+XCI7YnJlYWs7Y2FzZSBcInllbWVuaXRlXCI6YSs9XCJLb25mZXNzaW9uOiB5ZW1lbml0ZTxici8+XCI7YnJlYWs7Y2FzZSBcInllbWVuaXRlX2JhbGFkaVwiOmErPVwiS29uZmVzc2lvbjogeWVtZW5pdGVfYmFsYWRpPGJyLz5cIjticmVhaztjYXNlIFwieWVtZW5pdGVfc2hhbWlcIjphKz1cIktvbmZlc3Npb246IHllbWVuaXRlX3NoYW1pPGJyLz5cIjticmVhaztjYXNlIFwiYWhtYWRpeWFcIjphKz1cIktvbmZlc3Npb246IGFobWFkaXlhPGJyLz5cIjticmVhaztjYXNlIFwiYWxhb3VpdGVcIjphKz1cIktvbmZlc3Npb246IGFsYW91aXRlPGJyLz5cIjticmVhaztjYXNlIFwiZHJ1emVcIjphKz1cIktvbmZlc3Npb246IGRydXplPGJyLz5cIjticmVhaztjYXNlIFwiaWJhZGlcIjphKz1cIktvbmZlc3Npb246IGliYWRpPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwiaXNtYWlsaVwiOmErPVwiS29uZmVzc2lvbjogaXNtYWlsaTxici8+XCI7YnJlYWs7Y2FzZSBcInNoaWFcIjphKz1cIktvbmZlc3Npb246IHNoaWE8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzdW5uaVwiOmErPVwiS29uZmVzc2lvbjogc3Vubmk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJuaWNoaXJlblwiOmErPVwiS29uZmVzc2lvbjogbmljaGlyZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJqb2RvX3NoaW5zaHVcIjphKz1cIktvbmZlc3Npb246IGpvZG9fc2hpbnNodTxici8+XCI7YnJlYWs7Y2FzZSBcImpvZG9fc2h1XCI6YSs9XCJLb25mZXNzaW9uOiBqb2RvX3NodTxici8+XCI7YnJlYWs7Y2FzZSBcInZhanJheWFuYVwiOmErPVwiS29uZmVzc2lvbjogdmFqcmF5YW5hPGJyLz5cIjticmVhaztjYXNlIFwic2hpbmdvbl9zaHVcIjphKz1cIktvbmZlc3Npb246IHNoaW5nb25fc2h1PGJyLz5cIjticmVhaztjYXNlIFwiemVuXCI6YSs9XCJLb25mZXNzaW9uOiB6ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0aGFpX21haGFuaWtheWFcIjphKz1cIktvbmZlc3Npb246IHRoYWlfbWFoYW5pa2F5YTxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcInRoYWlfdGhhbW1heXV0XCI6YSs9XCJLb25mZXNzaW9uOiB0aGFpX3RoYW1tYXl1dDxici8+XCI7YnJlYWs7Y2FzZSBcImFzYXRydVwiOmErPVwiS29uZmVzc2lvbjogYXNhdHJ1PGJyLz5cIjticmVhaztjYXNlIFwiY2VsdGljXCI6YSs9XCJLb25mZXNzaW9uOiBjZWx0aWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJncmVjby1yb21hblwiOmErPVwiS29uZmVzc2lvbjogZ3JlY28tcm9tYW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJ3aWNjYVwiOmErPVwiS29uZmVzc2lvbjogd2ljY2E8YnIvPlwiO2JyZWFrO2Nhc2UgXCJpcmFuaVwiOmErPVwiS29uZmVzc2lvbjogaXJhbmk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXJzaVwiOmErPVwiS29uZmVzc2lvbjogcGFyc2k8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnQ8YnIvPlwifWlmKGIuY29tbXVuaXR5KXN3aXRjaChiLmNvbW11bml0eSl7Y2FzZSBcIkFBXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKEFBKTogQXVndXN0aW5pYW5zIG9mIHRoZSBBc3N1bXB0aW9uIDxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcIkJTQ01cIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoQlNDTSk6IEFkb3JlcnMgb2YgdGhlIFNhY3JlZCBIZWFydCBvZiBKZXN1cyBvZiBNb250bWFydHJlIDxici8+XCI7YnJlYWs7Y2FzZSBcIkNCTVZcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoQ0JNVik6IEF1Z3VzdGluZXItQ2hvcmZyYXVlbiBCLk0uVi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJDT1wiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChDTyk6IE9yYXRvcmlhbnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDTUNcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoQ01DKTogQ29uZ3JlZ2F0aW9uIG9mIHRoZSBNb3RoZXIgQ28tUmVkZW1wdHJpeDxici8+XCI7YnJlYWs7Y2FzZSBcIkNSU1BcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoQ1JTUCk6IEtvbmdyZWdhdGlvbiBkZXIgUmVndWxhcmtsZXJpa2VyIHZvbSBobC4gUGF1bHVzIChCYXJuYWJpdGVuKTxici8+XCI7YnJlYWs7Y2FzZSBcIkNTSlwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChDU0opOiBDYXJtZWwgU2FpbnQtSm9zZXBoPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwiQ1NTUFwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChDU1NQKTogQ29uZ3JcXHUwMGU5Z2F0aW9uIGR1IFNhaW50LUVzcHJpdDxici8+XCI7YnJlYWs7Y2FzZSBcIkNTU1JcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoQ1NTUik6IENvbmdyXFx1MDBlOWdhdGlvbiBkdSBUclxcdTAwZThzIFNhaW50IFJcXHUwMGU5ZGVtcHRldXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJGQ0pNXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKEZDSk0pOiBGcmFuY2lzY2FuIFNpc3RlcnMsIERhdWdodGVycyBvZiB0aGUgU2FjcmVkIEhlYXJ0IG9mIEplc3VzIGFuZCBNYXJ5PGJyLz5cIjticmVhaztjYXNlIFwiRk1HQlwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChGTUdCKTogU3VvcmUgRnJhbmNlc2NhbmUgTWlzc2lvbmFyaWUgZGkgR2VzXFx1MDBmOSBCYW1iaW5vPGJyLz5cIjticmVhaztjYXNlIFwiRk1IXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKEZNSCk6IENvbmdyZWdhdGlvIEZpbGlhcnVtIE1hcmlhZSBTYW5jdGlzc2ltYWUgYWIgSG9ydG88YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJGTU1cIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoRk1NKTogRnJhbmNpc2NhaW5lcyBtaXNzaW9ubmFpcmVzIGRlIE1hcmllPGJyLz5cIjticmVhaztjYXNlIFwiRlNDXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKEZTQyk6IEZyXFx1MDBlOHJlcyBkZXMgXFx1MDBjOWNvbGVzIGNoclxcdTAwZTl0aWVubmVzPGJyLz5cIjticmVhaztjYXNlIFwiTUNDSVwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChNQ0NJKTogTWlzc2lvbm5haXJlcyBjb21ib25pZW5zIGR1IFNhY3JcXHUwMGU5LUNcXHUwMTUzdXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJNU0ZTXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE1TRlMpOiBNaXNzaW9ubmFpcmVzIGRlIFNhaW50IEZyYW5cXHUwMGU3b2lzIGRlIFNhbGVzPGJyLz5cIjticmVhaztjYXNlIFwiT0NhcnRcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT0NhcnQpOiBPcmRlciBvZiB0aGUgQ2FydGh1c2lhbnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPQ0NcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT0NDKTogT3JkcmUgZGUgTm90cmUgRGFtZSBkdSBNb250LUNhcm1lbDxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcIk9DRFwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChPQ0QpOiBPcmRyZSBkZXMgQ2FybWVzIGRcXHUwMGU5Y2hhdXg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPQ1NPXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9DU08pOiBaaXN0ZXJ6aWVuc2Vyb3JkZW4gZGVyIHN0cmVuZ2VyZW4gT2JzZXJ2YW56IChUcmFwcGlzdGVuKTxici8+XCI7YnJlYWs7Y2FzZSBcIk9GTVwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChPRk0pOiBPcmRyZSBkZXMgRnJcXHUwMGU4cmVzIE1pbmV1cnMgKEZyYW56aXNrYW5lcik8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPRk1DYXBcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT0ZNQ2FwKTogT3JkcmUgZGVzIEZyXFx1MDBlOHJlcyBNaW5ldXJzIENhcHVjaW5zPGJyLz5cIjticmVhaztjYXNlIFwiT0ZNQ29udlwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChPRk1Db252KTogT3JkcmUgZGVzIEZyXFx1MDBlOHJlcyBNaW5ldXJzIENvbnZlbnR1ZWxzPGJyLz5cIjticmVhaztjYXNlIFwiT0ZTXCI6YSs9XG4gICAgXCJPcmRlbnNnZW1laW5zY2hhZnQgKE9GUyk6IEZyYW5jaXNjYW5zIHNlY3VsYXIgVGhpcmQgT3JkZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPTUlcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT01JKTogT2JsYXRzIGRlIE1hcmllPGJyLz5cIjticmVhaztjYXNlIFwiT1BcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT1ApOiBPcmRyZSBkZXMgRnJcXHUwMGU4cmVzIFByXFx1MDBlYWNoZXVyczxici8+XCI7YnJlYWs7Y2FzZSBcIk9QcmFlbVwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChPUHJhZW0pOiBPcmRyZSBkZXMgY2hhbm9pbmVzIHJcXHUwMGU5Z3VsaWVycyBkZSBQclxcdTAwZTltb250clxcdTAwZTk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPU0JcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT1NCKTogT3JkZXIgb2YgU2FpbnQgQmVuZWRpY3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPU0NcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT1NDKTogT3JkcmUgZGUgU2FpbnRlLUNsYWlyZSBvdSBPcmRyZSBkZXMgUGF1dnJlcyBEYW1lczxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcIk9TU1NcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT1NTUyk6IE9yZHJlIGRlIFNhaW50ZS1CcmlnaXR0ZTxici8+XCI7YnJlYWs7Y2FzZSBcIk9WTVwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChPVk0pOiBPcmRlciBvZiB0aGUgVmlzaXRhdGlvbiBvZiBIb2x5IE1hcnkgKFNhbGVzaWFuZXJpbm5lbik8YnIvPlwiO2JyZWFrO2Nhc2UgXCJQU0RQXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKFBTRFApOiBQZXRpdGVzIHNcXHUwMTUzdXJzIGRlcyBwYXV2cmVzIChLbGVpbmVuIFNjaHdlc3Rlcm4gZGVyIEFybWVuKTxici8+XCI7YnJlYWs7Y2FzZSBcIlBGSlwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChQRkopOiBQZXRpdHMgRnJcXHUwMGU4cmVzIGRlIEpcXHUwMGU5c3VzPGJyLz5cIjticmVhaztjYXNlIFwiU0RCXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKFNEQik6IFNvY2lcXHUwMGU5dFxcdTAwZTkgZGUgU2FpbnQgRnJhblxcdTAwZTdvaXMgZGUgU2FsZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTSlwiOmErPVxuICAgIFwiT3JkZW5zZ2VtZWluc2NoYWZ0IChTSik6IENvbXBhZ25pZSBkZSBKXFx1MDBlOXN1czxici8+XCI7YnJlYWs7Y2FzZSBcIlNPQ1wiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChTT0MpOiBPcmRlciBvZiBDaXN0ZXJjaWFuczxici8+XCI7YnJlYWs7Y2FzZSBcIlNTQ0NcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoU1NDQyk6IENvbmdyZWdhdGlvbiBvZiB0aGUgU2FjcmVkIEhlYXJ0cyBvZiBKZXN1cyBhbmQgTWFyeTxici8+XCI7YnJlYWs7Y2FzZSBcIlNTRlwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChTU0YpOiBTb2NpZXR5IG9mIFN0IEZyYW5jaXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTU0pFXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKFNTSkUpOiBTb2NpZXR5IG9mIFN0IEpvaG4gdGhlIEV2YW5nZWxpc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTU3BTXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKFNTcFMpOiBTdGV5bGVyIE1pc3Npb25zc2Nod2VzdGVybjxici8+XCI7YnJlYWs7Y2FzZSBcIlRPUlwiOmErPVxuICAgIFwiT3JkZW5zZ2VtZWluc2NoYWZ0IChUT1IpOiBUZXJ6byBPcmRpbmUgUmVnb2xhcmUgZGkgU2FuIEZyYW5jZXNjbzxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVuYmVrYW5udDxici8+XCJ9cmV0dXJuIGF9dmFyIGZuVGVzdEluZm9Qb3B1cD1mdW5jdGlvbihiKXtiPWIuZ2V0UHJvcGVydGllcygpO3ZhciBhPVwiXCIsYztmb3IoYyBpbiBiKWE9YStjK1wiPVwiK2JbY10rXCI8YnIvPlwiO3JldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX3RleHRcIiBzdHlsZT1cIndpZHRoOjMwMHB4O1wiPicrYStcIjwvZGl2PlwifTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtcG9wdXAtaW5mby1kZS5qcyIsIi8qXG4gIEs/c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ24gMjAxMSAtIDIwMThcbiBAYXV0aG9yICAgICBLP3N0ZW5zY2htaWVkZSA8aHR0cDovL3d3dy5rdWVzdGVuc2NobWllZGUuZGU+XG4gQGxpY2Vuc2UgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL2xncGwtMy4wLmh0bWxcbiovXG5leHBvcnQgZnVuY3Rpb24gdHJpbShiKXtyZXR1cm4gYi5yZXBsYWNlKC9eXFxzKy8sXCJcIikucmVwbGFjZSgvXFxzKyQvLFwiXCIpfVxuZXhwb3J0IGZ1bmN0aW9uIGlzTW9iaWxlKCl7cmV0dXJuLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgKGNlfHBob25lKXx4ZGF8eGlpbm98YW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnR8fG5hdmlnYXRvci52ZW5kb3J8fHdpbmRvdy5vcGVyYSl8fC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLnRlc3QoKG5hdmlnYXRvci51c2VyQWdlbnR8fG5hdmlnYXRvci52ZW5kb3J8fFxuICAgIHdpbmRvdy5vcGVyYSkuc3Vic3RyKDAsNCkpfWZ1bmN0aW9uIHRyYW5zbGF0ZShiKXt2YXIgYT10cmltKGIpO3JldHVyblwieWVzXCI9PWF8fFwiWWVzXCI9PWE/XCJ5ZXNcIjpcIm5vXCI9PWF8fFwiTm9cIj09YT9cIm5vXCI6XCJsaW1pdGVkXCI9PWE/XCJsaW1pdGVkXCI6XCJkZXNpZ25hdGVkXCI9PWE/XCJkZXNpZ25hdGVkXCI6XCJ3b29kXCI9PWE/XCJ3b29kXCI6XCJtZXRhbFwiPT1hP1wibWV0YWxcIjpcImNvbmNyZXRlXCI9PWE/XCJjb25jcmV0ZVwiOlwicGxhc3RpY1wiPT1hP1wicGxhc3RpY1wiOlwic3RvbmVcIj09YT9cInN0b25lXCI6XCJzdGVlbFwiPT1hP1wic3RlZWxcIjpcImJyaWNrXCI9PWE/XCJicmlja1wiOlwicmVpbmZvcmNlZF9jb25jcmV0ZVwiPT1hP1wicmVpbmZvcmNlZF9jb25jcmV0ZVwiOlwibWFzb25yeVwiPT1hP1wibWFzb25yeVwiOmJ9XG5leHBvcnQgdmFyIGZuU3RhbmRhcmRJbmZvUG9wdXA9ZnVuY3Rpb24oYixhKXt2YXIgYz1iLmdldFByb3BlcnRpZXMoKSxkPVwiXCIsZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSl7dmFyIGY9YS5jYWxsKGIpWzBdLmdldEltYWdlKCk7aWYoZil0cnl7ZT1mLmdldFNyYygpfWNhdGNoKGcpe2U9XCJcIn19ZWxzZXtmPWEuZ2V0SW1hZ2UoKTt0cnl7ZT1mLmdldFNyYygpfWNhdGNoKGgpe2U9XCJcIn19ZCs9Zm5IZWFkZXIoYyxlKTtkKz1mbkNvbnRlbnQoYyk7ZCs9Zm5Gb290ZXIoYyxiLmdldChcIm9zbV90eXBlXCIpK1wiL1wiK2IuZ2V0SWQoKSk7cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfdGV4dFwiPicrZCtcIjwvZGl2PlwifSxmblJlZHVjZWRJbmZvUG9wdXA9ZnVuY3Rpb24oYixhKXt2YXIgYz1iLmdldFByb3BlcnRpZXMoKSxkPVwiXCIsZT0hMSxmO2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIpWzBdLmdldEltYWdlKCkuZ2V0U3JjKCk6YS5nZXRJbWFnZSgpLmdldFNyYygpO2lmKFwicmVzdGF1cmFudFwiPT1cbiAgICBjLmFtZW5pdHl8fFwicHViXCI9PWMuYW1lbml0eXx8XCJiaWVyZ2FydGVuXCI9PWMuYW1lbml0eSllPSEwO1wiaG90ZWxcIj09Yy50b3VyaXNtJiYoZT0hMCk7XCJndWVzdF9ob3VzZVwiPT1jLnRvdXJpc20mJihlPSEwKTtcImNoYWxldFwiPT1jLnRvdXJpc20mJihlPSEwKTtcImhvc3RlbFwiPT1jLnRvdXJpc20mJihlPSEwKTtcImFscGluZV9odXRcIj09Yy50b3VyaXNtJiYoZT0hMCk7aWYoXCJhcnR3b3JrXCI9PWMudG91cmlzbXx8XCJhcnR3b3JrXCI9PWMuYW1lbml0eSllPSEwO2lmKFwibXVzZXVtXCI9PWMudG91cmlzbXx8XCJtdXNldW1cIj09Yy5hbWVuaXR5KWU9ITA7XCJjaW5lbWFcIj09Yy5hbWVuaXR5JiYoZT0hMCk7XCJ0aGVhdHJlXCI9PWMuYW1lbml0eSYmKGU9ITApO2lmKFwiYXR0cmFjdGlvblwiPT1jLmFtZW5pdHl8fFwiZm91bnRhaW5cIj09Yy5hbWVuaXR5fHxcIm1vbnVtZW50XCI9PWMuaGlzdG9yaWN8fFwiY2l0eV9nYXRlXCI9PWMuaGlzdG9yaWN8fFwicnVpbnNcIj09Yy5oaXN0b3JpY3x8XCJjYXN0bGVcIj09Yy5oaXN0b3JpY3x8XG4gICAgXCJhdHRyYWN0aW9uXCI9PWMudG91cmlzbSllPSEwO1wicGxheWdyb3VuZFwiPT1jLmxlaXN1cmUmJihlPSEwKTtjLmFlcmlhbHdheSYmKGU9ITApO2lmKFwic3dpbW1pbmdfcG9vbFwiPT1jLmFtZW5pdHl8fFwic3dpbW1pbmdfcG9vbFwiPT1jLmxlaXN1cmV8fFwic3dpbW1pbmdcIj09Yy5zcG9ydCllPSEwO1wic3RhdGlvblwiPT1jLnJhaWx3YXkmJihlPSEwKTtcInN3aW1taW5nXCI9PWMuc3BvcnQmJihlPSEwKTtcInN3aW1taW5nX3Bvb2xcIj09Yy5sZWlzdXJlJiYoZT0hMCk7XCJzd2ltbWluZ19wb29sXCI9PWMuYW1lbml0eSYmKGU9ITApO1wid2F0ZXJwYXJrXCI9PWMubGVpc3VyZSYmKGU9ITApO2Mud2F0ZXJfcGFyayYmKGU9ITApO1wic3BvcnRzX2NlbnRyZVwiPT1jLmxlaXN1cmUmJihlPSEwKTtzd2l0Y2goZSl7Y2FzZSAhMTpkKz1mbkhlYWRlcihjLGYpO2QrPWZuQ29udGVudChjKTtkKz1mbkZvb3RlcihjLGIuZ2V0KFwib3NtX3R5cGVcIikrXCIvXCIrYi5nZXRJZCgpKTticmVhaztjYXNlICEwOmQrPWZuSGVhZGVyKGMsXG4gICAgZil9cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfdGV4dFwiPicrZCtcIjwvZGl2PlwifTtcbmV4cG9ydCBmdW5jdGlvbiBmbkhlYWRlcihiLGEpe3ZhciBjPVwiXCIsZD1cIjMycHhcIjthJiYtMSE9YS5pbmRleE9mKFwiaWNvbl9tYXBjaWxcIikmJihkPVwiMjUwcHhcIixhPWEucmVwbGFjZShcImljb25fbWFwY2lsXCIsXCJsb2dvX21hcGNpbFwiKSk7aWYoYi5uYW1lfHxiW1wicGlzdGU6bmFtZVwiXXx8YltcInhtYXM6bmFtZVwiXXx8YltcInhtYXM6bG9jYXRpb25cIl0pe2lmKGIubmFtZSl2YXIgZT1iLm5hbWU7YltcInBpc3RlOm5hbWVcIl0mJihlPWJbXCJwaXN0ZTpuYW1lXCJdKTtiW1wieG1hczpuYW1lXCJdJiYoZT1iW1wieG1hczpuYW1lXCJdKTtiW1wieG1hczpsb2NhdGlvblwiXSYmKGU9YltcInhtYXM6bG9jYXRpb25cIl0pO2MrPWE/JzxpbWcgc3JjPVwiJythKydcIiB3aWR0aD1cIicrZCsnXCIgbmFtZT1cIicrZSsnXCIgYWx0PVwiJytlKydcIj48ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2hlYWRlcl9mZWF0dXJlbmFtZVwiPicrZStcIjwvZGl2PlwiOic8bmFtZT1cIicrZSsnXCIgYWx0PVwiJytlKydcIj48ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2hlYWRlcl9mZWF0dXJlbmFtZVwiPicrXG4gICAgZStcIjwvZGl2PlwifWVsc2UgYSYmKGMrPSc8aW1nIHNyYz1cIicrYSsnXCIgd2lkdGg9XCInK2QrJ1wiIG5hbWU9XCInK2ErJ1wiIGFsdD1cIicrYSsnXCI+Jyk7Yys9Zm5HZXRUcmFuc2xhdGVfVHlwZShiKTtyZXR1cm4nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF9oZWFkZXJcIj4nK2MrXCI8L2Rpdj5cIn1cbmV4cG9ydCBmdW5jdGlvbiBmbkZvb3RlcihiLGEpe3ZhciBjPVwiXCIsZD0hMTtiW1wiYWRkcjpob3VzZW5hbWVcIl0mJihjKz1cImhvdXNlbmFtZTogXCIrYltcImFkZHI6aG91c2VuYW1lXCJdK1wiPGJyLz5cIixkPSEwKTtiW1wiYWRkcjpmbG9vclwiXT8oYys9XCJmbG9vcjogXCIrYltcImFkZHI6Zmxvb3JcIl0rXCI8YnIvPlwiLGQ9ITApOmJbXCJhZGRyOmxldmVsXCJdJiYoYys9XCJsZXZlbDogXCIrYltcImFkZHI6bGV2ZWxcIl0rXCI8YnIvPlwiLGQ9ITApO2JbXCJhZGRyOnN0cmVldFwiXSYmKGMrPWJbXCJhZGRyOnN0cmVldFwiXSxjPWJbXCJhZGRyOmhvdXNlbnVtYmVyXCJdP2MrKFwiIFwiK2JbXCJhZGRyOmhvdXNlbnVtYmVyXCJdK1wiPGJyLz5cIik6YytcIjxici8+XCIsZD0hMCk7YltcImFkZHI6cG9zdGNvZGVcIl0mJihjKz1iW1wiYWRkcjpwb3N0Y29kZVwiXStcIiBcIik7YltcImFkZHI6Y2l0eVwiXSYmKGMrPWJbXCJhZGRyOmNpdHlcIl0rXCI8YnIvPlwiLGQ9ITApO2lmKGIuc3FrbSlpZihiLnNxa209XCJcIitiLnNxa20sMzxiLnNxa20ubGVuZ3RoKXt2YXIgZT1iLnNxa20ubGVuZ3RoJVxuICAgIDMsZj0wPGU/Yi5zcWttLnN1YnN0cmluZygwLGUpOlwiXCI7Zm9yKGk9MDtpPE1hdGguZmxvb3IoYi5zcWttLmxlbmd0aC8zKTtpKyspZj0wPT1lJiYwPT1pP2YrYi5zcWttLnN1YnN0cmluZyhlKzMqaSxlKzMqaSszKTpmKyhcIi5cIitiLnNxa20uc3Vic3RyaW5nKGUrMyppLGUrMyppKzMpKTtjKz1cImFyZWE6IFwiK2YrXCIgS21cXHUwMGIyPGJyLz5cIn1lbHNlIGMrPVwiYXJlYSBcIitiLnNxa20rXCI8YnIvPlwiO2JbXCJjb250YWN0OnBob25lXCJdJiYoYz1pc01vYmlsZSgpP2MrKCdwaG9uZTogPGEgaHJlZj1cInRlbDonK2JbXCJjb250YWN0OnBob25lXCJdKydcIj4nK2JbXCJjb250YWN0OnBob25lXCJdK1wiPC9hPjxici8+XCIpOmMrKCdwaG9uZTogPGEgaHJlZj1cImNhbGx0bzonK2JbXCJjb250YWN0OnBob25lXCJdKydcIj4nK2JbXCJjb250YWN0OnBob25lXCJdK1wiPC9hPjxici8+XCIpLGQ9ITApO2IucGhvbmUmJihjPWlzTW9iaWxlKCk/YysoJ3Bob25lOiA8YSBocmVmPVwidGVsOicrYi5waG9uZSsnXCI+JytiLnBob25lK1xuICAgIFwiPC9hPjxici8+XCIpOmMrKCdwaG9uZTogPGEgaHJlZj1cImNhbGx0bzonK2IucGhvbmUrJ1wiPicrYi5waG9uZStcIjwvYT48YnIvPlwiKSxkPSEwKTtiW1wiY29udGFjdDpmYXhcIl0/KGMrPVwiZmF4OiBcIitiW1wiY29udGFjdDpmYXhcIl0rXCI8YnIvPlwiLGQ9ITApOmIuZmF4JiYoYys9XCJmYXg6IFwiK2IuZmF4K1wiPGJyLz5cIixkPSEwKTtiW1wiY29udGFjdDplbWFpbFwiXT8oYys9J2VtYWlsOiA8YSBocmVmPVwibWFpbHRvOicrYltcImNvbnRhY3Q6ZW1haWxcIl0rJ1wiPicrYltcImNvbnRhY3Q6ZW1haWxcIl0rXCI8L2E+PGJyLz5cIixkPSEwKTpiLmVtYWlsJiYoYys9J2VtYWlsOiA8YSBocmVmPVwibWFpbHRvOicrYi5lbWFpbCsnXCI+JytiLmVtYWlsK1wiPC9hPjxici8+XCIsZD0hMCk7ZCYmKGMrPVwiPGJyLz5cIik7aWYoYi5vcGVuaW5nX2hvdXJzKXtkPWIub3BlbmluZ19ob3Vycztmb3IoZT0wOzA9PWV8fDA8ZC5pbmRleE9mKFwiO1wiKTspMDxlJiYoZD1kLnJlcGxhY2UoXCI7XCIsXCI8YnIvPlwiKSksZSsrO2MrPSdvcGVuaW5nIGhvdXJzOiA8YnIvPjxkaXYgY2xhc3M9XCJjNGdfb3Blbl90ZXh0XCI+JytcbiAgICBkK1wiPC9kaXY+XCI7Yz0wPGQuaW5kZXhPZihcIlBIXCIpP2MrXCIoUEggPSBwdWJsaWMgaG9saWRheSk8YnIvPlwiOmMrXCI8YnIvPlwifWlmKGJbXCJ4bWFzOm9wZW5pbmdfaG91cnNcIl0pe2Q9YltcInhtYXM6b3BlbmluZ19ob3Vyc1wiXTtmb3IoZT0wOzA9PWV8fDA8ZC5pbmRleE9mKFwiO1wiKTspMDxlJiYoZD1kLnJlcGxhY2UoXCI7XCIsXCI8YnIvPlwiKSksZSsrO2MrPSdvcGVuaW5nIGhvdXJzOiA8YnIvPjxkaXYgY2xhc3M9XCJjNGdfb3Blbl90ZXh0XCI+JytkK1wiPC9kaXY+XCI7Yz0wPGQuaW5kZXhPZihcIlBIXCIpP2MrXCIoUEggPSBwdWJsaWMgaG9saWRheSk8YnIvPlwiOmMrXCI8YnIvPlwifWJbXCJ4bWFzOnVybFwiXSYmKGQ9XCJcIixkPWJbXCJ4bWFzOnVybFwiXSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHA6Ly9cIitkKSxjKz0nd2Vic2l0ZTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+d2Vic2l0ZSBsaW5rPC9hPjxici8+Jyk7XG4gICAgYltcImNvbnRhY3Q6d2Vic2l0ZVwiXT8oZD1iW1wiY29udGFjdDp3ZWJzaXRlXCJdLHRyaW0oZCksLTE9PWQuaW5kZXhPZihcImh0dHBzOi8vXCIsMCkmJi0xPT1kLmluZGV4T2YoXCJodHRwOi8vXCIsMCkmJihkPVwiaHR0cDovL1wiK2QpLGMrPSd3ZWJzaXRlOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj53ZWJzaXRlIGxpbms8L2E+PGJyLz4nKTpiLndlYnNpdGUmJihkPWIud2Vic2l0ZSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHA6Ly9cIitkKSxjKz0nd2Vic2l0ZTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+d2Vic2l0ZSBsaW5rPC9hPjxici8+Jyk7Yi53aWtpcGVkaWEmJihkPWIud2lraXBlZGlhLHRyaW0oZCksLTE9PWQuaW5kZXhPZihcImh0dHBzOi8vXCIsMCkmJi0xPT1kLmluZGV4T2YoXCJodHRwOi8vXCIsMCkmJihkPVwiaHR0cHM6Ly93aWtpcGVkaWEub3JnL3dpa2kvXCIrZCksYys9XG4gICAgICAgICdXaWtpcGVkaWE6IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPldpa2lwZWRpYSBsaW5rPC9hPjxici8+Jyk7Yi53aWtpbWVkaWFfY29tbW9ucyYmKGQ9Yi53aWtpbWVkaWFfY29tbW9ucyx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHBzOi8vY29tbW9ucy53aWtpbWVkaWEub3JnL3dpa2kvXCIrZCksYys9J1dpa2ltZWRpYTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+V2lraW1lZGlhIGxpbms8L2E+PGJyLz4nKTtiW1wiY29udGFjdDp3ZWJjYW1cIl0mJihkPWJbXCJjb250YWN0OndlYmNhbVwiXSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHA6Ly9cIitkKSxjKz0nd2ViY2FtOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj53ZWJjYW0gbGluazwvYT48YnIvPicpO2IuaW1hZ2UmJihjKz1cbiAgICAgICAgJzxpbWcgc3JjPVwiJytiLmltYWdlKydcIiB3aWR0aD1cIjIwMHB4XCIgbmFtZT1cIicrYi5uYW1lKydcIiBhbHQ9XCInK2IubmFtZSsnXCI+PGJyLz4nKTtkPVwiXCI7Yi5pbnRlcm5ldF9hY2Nlc3MmJihkKz1cImludGVybmV0IGFjY2VzczogXCIrdHJhbnNsYXRlKGIuaW50ZXJuZXRfYWNjZXNzKStcIjxici8+XCIpO2JbXCJpbnRlcm5ldF9hY2Nlc3M6ZmVlXCJdJiYoZCs9XCJmZWU6IFwiK3RyYW5zbGF0ZShiW1wiaW50ZXJuZXRfYWNjZXNzOmZlZVwiXSkrXCI8YnIvPlwiKTtiW1wid2lmaV9hY2Nlc3M6b3BlcmF0b3JcIl0mJihkKz1cIndpZmkgb3BlcmF0b3I6IFwiK2JbXCJ3aWZpX2FjY2VzczpvcGVyYXRvclwiXStcIjxici8+XCIpO2JbXCJ3aWZpX2FjY2Vzczp0ZWNobm9sb2d5XCJdJiYoZCs9XCJ3aWZpIHRlY2hub2xvZ3k6IFwiK2JbXCJ3aWZpX2FjY2Vzczp0ZWNobm9sb2d5XCJdK1wiPGJyLz5cIik7YltcIndpZmlfYWNjZXNzOnNzaWRcIl0mJihkKz1cIndpZmkgc3NpZDogXCIrYltcIndpZmlfYWNjZXNzOnNzaWRcIl0rXCI8YnIvPlwiKTtcIlwiIT1kJiZcbiAgICAoYys9J2ludGVybmV0IGFjY2VzcyBhdmFpbGFibGU8YnIvPjxkaXYgY2xhc3M9XCJjNGdfc2hvcF9pbnRlcm5ldF9hY2Nlc3NcIj4nK2QrXCI8L2Rpdj48YnIvPlwiKTtiLndoZWVsY2hhaXImJihjKz1cIndoZWVsY2hhaXI6IFwiK3RyYW5zbGF0ZShiLndoZWVsY2hhaXIpK1wiPGJyLz5cIik7YltcIndoZWVsY2hhaXI6ZGVzY3JpcHRpb25cIl0mJihjKz1cImRlc2NyaXB0aW9uOiBcIitiW1wid2hlZWxjaGFpcjpkZXNjcmlwdGlvblwiXStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOmVudHJhbmNlX3dpZHRoXCJdJiYoYys9XCJlbnRyYW5jZSB3aWR0aCAoY20pOiBcIitiW1wid2hlZWxjaGFpcjplbnRyYW5jZV93aWR0aFwiXStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOnN0ZXBfaGVpZ2h0XCJdJiYoYys9XCJzdGVwIGhlaWdodCAoY20pOiBcIitiW1wid2hlZWxjaGFpcjpzdGVwX2hlaWdodFwiXStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOnJvb21zXCJdJiYoYys9XCJyb29tczogXCIrYltcIndoZWVsY2hhaXI6cm9vbXNcIl0rXCI8YnIvPlwiKTtcbiAgICBiW1wid2hlZWxjaGFpcjpwbGFjZXNcIl0mJihjKz1cInBsYWNlczogXCIrYltcIndoZWVsY2hhaXI6cGxhY2VzXCJdK1wiPGJyLz5cIik7YltcImNlbnQ6cGxhY2VzXCJdJiYoYys9XCJwbGFjZXM6IFwiK2JbXCJ3aGVlbGNoYWlyOnBsYWNlc1wiXStcIjxici8+XCIpO2JbXCJyYW1wOndoZWVsY2hhaXJcIl0mJihjKz1cInJhbXA6IFwiK2JbXCJyYW1wOndoZWVsY2hhaXJcIl0rXCI8YnIvPlwiKTtiW1wiY2FwYWNpdHk6ZGlzYWJsZWRcIl0mJihjKz1cImNhcGFjaXR5IHBhcmtpbmc6IFwiK3RyYW5zbGF0ZShiW1wiY2FwYWNpdHk6ZGlzYWJsZWRcIl0pK1wiPGJyLz5cIik7YltcInRvaWxldHM6d2hlZWxjaGFpclwiXSYmKGMrPVwidG9pbGV0czogXCIrdHJhbnNsYXRlKGJbXCJ0b2lsZXRzOndoZWVsY2hhaXJcIl0pK1wiPGJyLz5cIik7Yi5jZW50cmFsa2V5JiYoYys9XCJjZW50cmFsa2V5OiBcIitiLmNlbnRyYWxrZXkrXCI8YnIvPlwiKTtiLm5vdGUmJihjKz1iLm5vdGUrXCI8YnIvPlwiKTtiLmRlc2NyaXB0aW9uJiYoYys9Yi5kZXNjcmlwdGlvbitcIjxici8+XCIpO1xuICAgIGIub3BlcmF0b3ImJihjKz1cIm9wZXJhdG9yOiBcIitiLm9wZXJhdG9yK1wiPGJyLz5cIik7Yi5yZWYmJihjKz1cInJlZmVyZW5jZTogXCIrYi5yZWYrXCI8YnIvPlwiKTtcInllc1wiPT1iLmxpdCYmKGMrPVwiVGhpcyBvYmplY3QgaXMgaWxsdWltYW50ZWQuPGJyLz5cIik7Yi5zaG9wJiYoZD1cIlwiLGIuYnJhbmQmJihkKz1cImJyYW5kOiBcIitiLmJyYW5kK1wiPGJyLz5cIiksYi5zZWxscyYmKGQrPVwic2VsbHM6IFwiK2Iuc2VsbHMrXCI8YnIvPlwiKSxiLm9yaWdpbiYmKGQrPVwic291cmNlIG1hcmtldDogXCIrYi5vcmlnaW4rXCI8YnIvPlwiKSxcInllc1wiPT1iLndob2xlc2FsZSYmKGQrPVwiZGlzdHJpYnV0b3I6IHllczxici8+XCIpLFwiXCIhPWQmJihjKz0nZnVydGhlciBwYXJ0aWN1bGFyczogPGJyLz48ZGl2IGNsYXNzPVwiYzRnX3Nob3BfdGV4dFwiPicrZCtcIjwvZGl2Pjxici8+XCIpKTthJiYoZD1hLHRyaW0oZCksZD1kLnJlcGxhY2UoL1xcLi8sXCIvXCIpLGM9YytcIjxici8+XCIrKCdPU006ICAgIDxhIGhyZWY9XCJodHRwOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnLycrXG4gICAgICAgIGQrJ1wiIHRhcmdldD1cIl9ibGFua1wiPk9wZW5TdHJlZXRNYXAgbGluazwvYT48YnIvPicpKTtyZXR1cm4gYz0nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF9mb290ZXJcIj4nK2MrXCI8L2Rpdj5cIn1cbmV4cG9ydCBmdW5jdGlvbiBmbkdldFRyYW5zbGF0ZV9UeXBlKGIpe3ZhciBhPVwiXCI7aWYoXCJkb2N0b3JzXCI9PWIuYW1lbml0eXx8XCJkb2N0b3JcIj09Yi5oZWFsdGhjYXJlKWErPVwiZG9jdG9yPGJyLz5cIjtpZihcImhvc3BpdGFsXCI9PWIuYW1lbml0eXx8XCJjbGluaWNcIj09Yi5hbWVuaXR5fHxcImhvc3BpdGFsXCI9PWIuaGVhbHRoY2FyZXx8XCJjbGluaWNcIj09Yi5oZWFsdGhjYXJlKWE9XCJ5ZXNcIj09Yi5lbWVyZ2VuY3k/YStcImhvc3BpdGFsIHdpdGggZW1lcmdlbmN5IGZhY2lsaXRpZXM8YnIvPlwiOmErXCJob3NwaXRhbDxici8+XCI7XCJkZW50aXN0XCI9PWIuYW1lbml0eSYmKGErPVwiZGVudGlzdDxici8+XCIpO2lmKFwicGhhcm1hY3lcIj09Yi5hbWVuaXR5fHxcInBoYXJtYWN5XCI9PWJbXCJoZWFsdGhfZmFjaWxpdHk6dHlwZVwiXSlhKz1cInBoYXJtYWN5PGJyLz5cIjtpZihcInBoeXNpb3RoZXJhcGlzdFwiPT1iLmhlYWx0aGNhcmV8fFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbGl0eTpwaHlzaW90aGVyYXB5XCJdKWErPVwicGh5c2lvdGhlcmFwaXN0PGJyLz5cIjtcbiAgICBpZihcIm9jY3VwYXRpb25hbF90aGVyYXBpc3RcIj09Yi5oZWFsdGhjYXJlfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6b2NjdXBhdGlvbmFsX3RoZXJhcHlcIl18fFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om9jY3VwYXRpb25hbF90aGVyYXB5XCJdKWErPVwib2NjdXBhdGlvbmFsX3RoZXJhcGlzdDxici8+XCI7aWYoXCJwc3ljaG90aGVyYXBpc3RcIj09Yi5oZWFsdGhjYXJlfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6cHN5Y2hvdGhlcmFweVwiXSlhKz1cInBzeWNob3RoZXJhcGlzdDxici8+XCI7XCJhbHRlcm5hdGl2ZVwiPT1iLmhlYWx0aGNhcmUmJihhKz1cImFsdGVybmF0aXZlPGJyLz5cIik7XCJtaWR3aWZlXCI9PWIuaGVhbHRoY2FyZSYmKGErPVwibWlkd2lmZTxici8+XCIpO2lmKFwic3BlZWNoX3RoZXJhcGlzdFwiPT1iLmhlYWx0aGNhcmV8fFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbGl0eTpzcGVlY2hfdGhlcmFweVwiXSlhKz1cInNwZWVjaF90aGVyYXBpc3Q8YnIvPlwiO1wieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbGl0eTptdXNpY190aGVyYXB5XCJdJiZcbiAgICAoYSs9XCJtdXNpY190aGVyYXB5PGJyLz5cIik7XCJ2ZXRlcmluYXJ5XCI9PWIuYW1lbml0eSYmKGErPVwidmV0ZXJpbmFyeTxici8+XCIpO1wiZmlyZV9zdGF0aW9uXCI9PWIuYW1lbml0eSYmKGErPVwiZmlyZSBzdGF0aW9uPGJyLz5cIik7XCJmaXJlX2V4dGluZ3Vpc2hlclwiPT1iLmVtZXJnZW5jeSYmKGErPVwiZmlyZSBleHRpbmd1aXNoZXI8YnIvPlwiKTtcImFlZFwiPT1iLmVtZXJnZW5jeSYmKGErPVwiYWVkPGJyLz5cIik7XCJkZWZpYnJpbGxhdG9yXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJkZWZpYnJpbGxhdG9yPGJyLz5cIik7XCJwaG9uZVwiPT1iLmVtZXJnZW5jeSYmKGErPVwiY2FsbCBib3g8YnIvPlwiKTtcInBvbGljZVwiPT1iLmFtZW5pdHkmJihhKz1cInBvbGljZTxici8+XCIpO1wiYW1idWxhbmNlX3N0YXRpb25cIj09Yi5lbWVyZ2VuY3kmJihhKz1cImFtYnVsYW5jZSBzdGF0aW9uPGJyLz5cIik7XCJ0ZWNobmljYWxcIj09Yi5lbWVyZ2VuY3lfc2VydmljZSYmKGErPVwidGVjaG5pY2FsPGJyLz5cIik7XCJ3YXRlclwiPT1iLmVtZXJnZW5jeV9zZXJ2aWNlJiZcbiAgICAoYSs9XCJ3YXRlcjxici8+XCIpO1wiYmF5d2F0Y2hcIj09Yi53YXRlcndheSYmKGErPVwiYmF5d2F0Y2g8YnIvPlwiKTtcImFpclwiPT1iLmVtZXJnZW5jeV9zZXJ2aWNlJiYoYSs9XCJyZXNjdWUgaGVsaWNvcHRlcjxici8+XCIpO1wiZW1lcmdlbmN5X2FjY2Vzc19wb2ludFwiPT1iLmhpZ2h3YXkmJihhKz1cImVtZXJnZW5jeSBhY2Nlc3MgcG9pbnQ8YnIvPlwiKTtpZihcImxpZmVib2F0X3N0YXRpb25cIj09Yi5hbWVuaXR5fHxcImxpZmVib2F0X3N0YXRpb25cIj09Yi5lbWVyZ2VuY3kpYSs9XCJsaWZlYm9hdCBzdGF0aW9uPGJyLz5cIjtcImxpZmVfcmluZ1wiPT1iLmVtZXJnZW5jeSYmKGErPVwibGlmZSByaW5nPGJyLz5cIik7XCJzaXJlblwiPT1iLmVtZXJnZW5jeSYmKGErPVwic2lyZW48YnIvPlwiKTtcImxpZmVfcmluZ1wiPT1iLmFtZW5pdHkmJihhKz1cImxpZmUgcmluZzxici8+XCIpO1wicmVzY3VlX3N0YXRpb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJyZXNjdWUgc3RhdGlvbjxici8+XCIpO1wiZmlyZV9oeWRyYW50XCI9PWIuZW1lcmdlbmN5JiZcbiAgICAoXCJ1bmRlcmdyb3VuZFwiPT1iW1wiZmlyZV9oeWRyYW50OnR5cGVcIl0/YSs9XCJ1bmRlcmdyb3VuZCBoeWRyYW50PGJyLz5cIjpcInBpbGxhclwiPT1iW1wiZmlyZV9oeWRyYW50OnR5cGVcIl0/YSs9XCJwaWxsYXIgaHlkcmFudDxici8+XCI6XCJ3YWxsXCI9PWJbXCJmaXJlX2h5ZHJhbnQ6dHlwZVwiXT9hKz1cIndhbGwgaHlkcmFudDxici8+XCI6XCJwb25kXCI9PWJbXCJmaXJlX2h5ZHJhbnQ6dHlwZVwiXSYmKGErPVwic3VjdGlvbiBwb2ludDxici8+XCIpKTtcInN1Y3Rpb25fcG9pbnRcIj09Yi5lbWVyZ2VuY3kmJihhKz1cInN1Y3Rpb24gcG9pbnQ8YnIvPlwiKTtcImZpcmVfd2F0ZXJfcG9uZFwiPT1iLmVtZXJnZW5jeSYmKGErPVwiZmlyZSBwcm90ZWN0aW9uIHBvbmQ8YnIvPlwiKTtcIm1vdW50YWluXCI9PWIuZW1lcmdlbmN5X3NlcnZpY2UmJihhKz1cIm1vdW50YWluIHJlc2N1ZSBzZXJ2aWNlPGJyLz5cIik7XCJ3YXRlcl90YW5rXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJmaXJlIHdhdGVyIHRhbms8YnIvPlwiKTtcImNvbnRhaW5lclwiPT1iLnJlY3ljbGluZ190eXBlJiZcbiAgICAoYSs9XCJSZWN5Y2xpbmcgY29udGFpbmVyPGJyLz5cIik7XCJyZWN5Y2xpbmdcIj09Yi5hbWVuaXR5JiZcInllc1wiPT1iW1wicmVjeWNsaW5nOmV4Y3JlbWVudFwiXXx8XCJwdW1wLW91dFwiPT1iW1wic2VhbWFyazpzbWFsbF9jcmFmdF9mYWNpbGl0eTpjYXRlZ29yeVwiXT9hKz1cInN1Y3Rpb24gc3RhdGlvbjxici8+XCI6XCJyZWN5Y2xpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCIgYnV5YmFjayBjZW50cmU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpwZXNjZXRhcmlhblwiXT9hKz1cInBlc2NldGFyaWFuIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnBlc2NldGFyaWFuXCJdJiYoYSs9XCJqdXN0IHBlc2NldGFyaWFuPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6dmVnZXRhcmlhblwiXT9hKz1cInZlZ2V0YXJpYW4gdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6dmVnZXRhcmlhblwiXSYmKGErPVwianVzdCB2ZWdldGFyaWFuPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6bGFjdG9fdmVnZXRhcmlhblwiXT9hKz1cImxhY3RvX3ZlZ2V0YXJpYW4gYXZhaWxhYmxlPGJyLz5cIjpcbiAgICAgICAgXCJvbmx5XCI9PWJbXCJkaWV0OmxhY3RvX3ZlZ2V0YXJpYW5cIl0mJihhKz1cImp1c3QgbGFjdG8gdmVnZXRhcmlhbjxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0Om92b192ZWdldGFyaWFuXCJdP2ErPVwib3ZvIHZlZ2V0YXJpYW4gYXZhaWxhYmxlPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6b3ZvX3ZlZ2V0YXJpYW5cIl0mJihhKz1cImp1c3Qgb3ZvX3ZlZ2V0YXJpYW48YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDp2ZWdhblwiXT9hKz1cInZlZ2FuIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnZlZ2FuXCJdJiYoYSs9XCJqdXN0IHZlZ2FuPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6ZnJ1aXRhcmlhblwiXT9hKz1cImZydWl0YXJpYW4gYXZhaWxhYmxlPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6ZnJ1aXRhcmlhblwiXSYmKGErPVwiaHVzdCBmcnVpdGFyaWFuPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6cmF3XCJdP2ErPVwicmF3IGF2YWlsYWliZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnJhd1wiXSYmKGErPVwianVzdCByYXc8YnIvPlwiKTtcbiAgICBcInllc1wiPT1iW1wiZGlldDpnbHV0ZW5fZnJlZVwiXT9hKz1cImdsdXRlbiBmcmVlIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmdsdXRlbl9mcmVlXCJdJiYoYSs9XCJqdXN0IGdsdXRlbiBmcmVlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6ZGFpcnlfZnJlZVwiXT9hKz1cImRhaXJ5IGZyZWUgYXZhaWxhYmxlPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6ZGFpcnlfZnJlZVwiXSYmKGErPVwianVzdCBkYWlyeSBmcmVlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6bGFjdG9zZV9mcmVlXCJdP2ErPVwibGFjdG9zZSBmcmVlIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmxhY3Rvc2VfZnJlZVwiXSYmKGErPVwianVzdCBsYWN0b3NlIGZyZWU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpoYWxhbFwiXT9hKz1cImhhbGFsIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmhhbGFsXCJdJiYoYSs9XCJqdXN0IGhhbGFsPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6a29zaGVyXCJdP2ErPVwia29zaGVyIGF2YWlsYWJsZTxici8+XCI6XG4gICAgICAgIFwib25seVwiPT1iW1wiZGlldDprb3NoZXJcIl0mJihhKz1cImp1c3Qga29zaGVyPGJyLz5cIik7XCJwdWJcIj09Yi5hbWVuaXR5JiYoYSs9XCJwdWI8YnIvPlwiKTtcImJhclwiPT1iLmFtZW5pdHkmJihhKz1cImJhcjxici8+XCIpO1wieWVzXCI9PWIuZnJvemVuX3lvZ3VydCYmKGErPVwiZnJvemVuIHlvZ3VydDxici8+XCIpO1wieWVzXCI9PWIuc2x1c2hfaWNlJiYoYSs9XCJzbHVzaCBpY2U8YnIvPlwiKTtcInllc1wiPT1iLmNha2UmJihhKz1cImNha2U8YnIvPlwiKTtcInllc1wiPT1iLmNvZmZlZSYmKGErPVwiY29mZmVlPGJyLz5cIik7XCJ5ZXNcIj09Yi5kcmlua3MmJihhKz1cImRyaW5rczxici8+XCIpO1wiYmllcmdhcnRlblwiPT1iLmFtZW5pdHkmJihhKz1cImJpZXJnYXJ0ZW48YnIvPlwiKTtcInJlc3RhdXJhbnRcIj09Yi5hbWVuaXR5JiYoYSs9XCJyZXN0YXVyYW50PGJyLz5cIik7XCJmYXN0X2Zvb2RcIj09Yi5hbWVuaXR5JiYoYSs9XCJmYXN0IGZvb2Q8YnIvPlwiKTtpZigoXCJjYWZlXCI9PWIuYW1lbml0eXx8XCJjb2ZmZWVfc2hvcFwiPT1iLmFtZW5pdHkpJiZcbiAgICAgICAgXCJpY2VfY3JlYW1cIiE9Yi5jdWlzaW5lKWErPVwiY2FmZTxici8+XCI7aWYoXCJjYWZlXCI9PWIuYW1lbml0eSYmXCJpY2VfY3JlYW1cIj09Yi5jdWlzaW5lfHxcImljZV9jcmVhbVwiPT1iLmFtZW5pdHkpYSs9XCJpY2UgY3JlYW08YnIvPlwiO1wiYWxwaW5lX2h1dFwiPT1iLnRvdXJpc20mJihhKz1cImFscGluZSBodXQ8YnIvPlwiKTtcImFxdWFyaXVtXCI9PWIudG91cmlzbSYmKGErPVwiYXF1YXJpdW08YnIvPlwiKTtcImFwYXJ0bWVudFwiPT1iLnRvdXJpc20mJihhKz1cImFwYXJ0bWVudDxici8+XCIpO1wiYXR0cmFjdGlvblwiPT1iLnRvdXJpc20mJihhKz1cImF0dHJhY3Rpb248YnIvPlwiKTtcImFydHdvcmtcIj09Yi50b3VyaXNtJiYoYSs9XCJhcnR3b3JrPGJyLz5cIik7XCJjYW1wX3NpdGVcIj09Yi50b3VyaXNtJiYoYSs9XCJjYW1wIHNpdGU8YnIvPlwiKTtcImNhcmF2YW5fc2l0ZVwiPT1iLnRvdXJpc20mJihhKz1cImNhcmF2YW4gc2l0ZTxici8+XCIpO1wiY2hhbGV0XCI9PWIudG91cmlzbSYmKGErPVwiY2hhbGV0PGJyLz5cIik7XCJnYWxsZXJ5XCI9PVxuICAgIGIudG91cmlzbSYmKGErPVwiZ2FsbGVyeTxici8+XCIpO1wiZ3Vlc3RfaG91c2VcIj09Yi50b3VyaXNtJiYoYSs9XCJndWVzdCBob3VzZTxici8+XCIpO1wiaG9zdGVsXCI9PWIudG91cmlzbSYmKGErPVwiaG9zdGVsPGJyLz5cIik7XCJob3RlbFwiPT1iLnRvdXJpc20mJihhKz1cImhvdGVsPGJyLz5cIik7XCJtb3RlbFwiPT1iLnRvdXJpc20mJihhKz1cIm1vdGVsPGJyLz5cIik7XCJtdXNldW1cIj09Yi50b3VyaXNtJiYoYSs9XCJtdXNldW08YnIvPlwiKTtcInBpY25pY19zaXRlXCI9PWIudG91cmlzbSYmKGErPVwicGljbmljIHNpdGU8YnIvPlwiKTtcInRoZW1lX3BhcmtcIj09Yi50b3VyaXNtJiYoYSs9XCJ0aGVtZSBwYXJrPGJyLz5cIik7XCJ2aWV3cG9pbnRcIj09Yi50b3VyaXNtJiYoYSs9XCJ2aWV3cG9pbnQ8YnIvPlwiKTtcIndpbGRlcm5lc3NfaHV0XCI9PWIudG91cmlzbSYmKGErPVwid2lsZGVybmVzc19odXQ8YnIvPlwiKTtcIndpbmVfY2VsbGFyXCI9PWIudG91cmlzbSYmKGErPVwid2luZSBjZWxsYXI8YnIvPlwiKTtcInpvb1wiPT1iLnRvdXJpc20mJlxuICAgIChhKz1cInpvbzxici8+XCIsXCJlbmNsb3N1cmVcIj09Yi56b28mJihhKz1cImVuY2xvc3VyZTxici8+XCIpLFwicGV0dGluZ196b29cIj09Yi56b28mJihhKz1cInBldHRpbmcgem9vPGJyLz5cIiksXCJmYWxjb25yeVwiPT1iLnpvbyYmKGErPVwiZmFsY29ucnk8YnIvPlwiKSk7XCJ0cmFpbF9yaWRpbmdfc3RhdGlvblwiPT1iLnRvdXJpc20mJihhKz1cInRyYWlsIHJpZGluZyBzdGF0aW9uPGJyLz5cIik7XCJmaXNoaW5nXCI9PWIuY2x1YiYmKGErPVwiZmlzaGluZyBjbHViPGJyLz5cIik7XCJzcG9ydFwiPT1iLmNsdWImJlwiZmlzaGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJmaXNoaW5nIGNsdWI8YnIvPlwiKTtcImFtYXRldXJfcmFkaW9cIj09Yi5jbHViJiYoYSs9XCJhbWF0ZXVyIHJhZGlvIGNsdWI8YnIvPlwiKTtcImFydFwiPT1iLmNsdWImJihhKz1cImFydCBjbHViPGJyLz5cIik7XCJhc3Ryb25vbXlcIj09Yi5jbHViJiYoYSs9XCJhc3Ryb25vbXkgY2x1Yjxici8+XCIpO1wiYXV0b21vYmlsZVwiPT1iLmNsdWImJihhKz1cImF1dG9tb2JpbGUgY2x1Yjxici8+XCIpO1xuICAgIFwiYm9hcmRfZ2FtZXNcIj09Yi5jbHViJiYoYSs9XCJib2FyZCBnYW1lcyBjbHViPGJyLz5cIik7XCJjYXJkX2dhbWVzXCI9PWIuY2x1YiYmKGErPVwiY2FyZCBnYW1lcyBjbHViPGJyLz5cIik7XCJjaGFyaXR5XCI9PWIuY2x1YiYmKGErPVwiY2hhcml0eSBjbHViPGJyLz5cIik7XCJjaGVzc1wiPT1iLmNsdWImJihhKz1cImNoZXNzIGNsdWI8YnIvPlwiKTtcImNpbmVtYVwiPT1iLmNsdWImJihhKz1cImNpbmVtYSBjbHViPGJyLz5cIik7XCJjb29raW5nXCI9PWIuY2x1YiYmKGErPVwiY29va2luZyBjbHViPGJyLz5cIik7XCJjdWx0dXJlXCI9PWIuY2x1YiYmKGErPVwiY3VsdHVyZSBjbHViPGJyLz5cIik7XCJkb2l0eW91cnNlbGZcIj09Yi5jbHViJiYoYSs9XCJkb2l0eW91cnNlbGYgY2x1Yjxici8+XCIpO1wiZXF1ZXN0cmlhblwiPT1iLmNsdWImJihhKz1cImVxdWVzdHJpYW4gY2x1Yjxici8+XCIpO1wiZXRobmljXCI9PWIuY2x1YiYmKGErPVwiZXRobmljIGNsdWI8YnIvPlwiKTtcImZhblwiPT1iLmNsdWImJihhKz1cImZhbiBjbHViPGJyLz5cIik7XCJmcmVlbWFzb25yeVwiPT1cbiAgICBiLmNsdWImJihhKz1cImZyZWVtYXNvbnJ5IGNsdWI8YnIvPlwiKTtcImdhbWVcIj09Yi5jbHViJiYoYSs9XCJnYW1lIGNsdWI8YnIvPlwiKTtcImhpc3RvcnlcIj09Yi5jbHViJiYoYSs9XCJoaXN0b3J5IGNsdWI8YnIvPlwiKTtcImh1bnRpbmdcIj09Yi5jbHViJiYoYSs9XCJodW50aW5nIGNsdWI8YnIvPlwiKTtcImxpbnV4XCI9PWIuY2x1YiYmKGErPVwibGludXggY2x1Yjxici8+XCIpO1wibW90b3JjeWNsZVwiPT1iLmNsdWImJihhKz1cIm1vdG9yY3ljbGUgY2x1Yjxici8+XCIpO1wibXVzaWNcIj09Yi5jbHViJiYoYSs9XCJtdXNpYyBjbHViPGJyLz5cIik7XCJuYXR1cmVcIj09Yi5jbHViJiYoYSs9XCJuYXR1cmUgY2x1Yjxici8+XCIpO1wibnVkaXNtXCI9PWIuY2x1YiYmKGErPVwibnVkaXNtIGNsdWI8YnIvPlwiKTtcInBob3RvZ3JhcGh5XCI9PWIuY2x1YiYmKGErPVwicGhvdG9ncmFwaHkgY2x1Yjxici8+XCIpO1wicG9saXRpY3NcIj09Yi5jbHViJiYoYSs9XCJwb2xpdGljcyBjbHViPGJyLz5cIik7XCJyZWxpZ2lvblwiPT1iLmNsdWImJihhKz1cInJlbGlnaW9uIGNsdWI8YnIvPlwiKTtcbiAgICBcInNjb3V0XCI9PWIuY2x1YiYmKGErPVwic2NvdXQgY2x1Yjxici8+XCIpO1wic21va2VcIj09Yi5jbHViJiYoYSs9XCJzbW9rZSBjbHViPGJyLz5cIik7XCJzcG9ydFwiPT1iLmNsdWImJihhKz1cInNwb3J0IGNsdWI8YnIvPlwiKTtcInRoZWF0cmVcIj09Yi5jbHViJiYoYSs9XCJ0aGVhdHJlIGNsdWI8YnIvPlwiKTtcInZldGVyYW5zXCI9PWIuY2x1YiYmKGErPVwidmV0ZXJhbnMgY2x1Yjxici8+XCIpO1wiYW11c2VtZW50X2FyY2FkZVwiPT1iLmxlaXN1cmUmJihhKz1cInBlbm55IGFyY2FkZSAvIGdhbWJsaW5nIGhhbGw8YnIvPlwiKTtcImJlYWNoX3Jlc29ydFwiPT1iLmxlaXN1cmUmJihhKz1cImJlYWNoIHJlc29ydDxici8+XCIpO1wiYmlyZF9oaWRlXCI9PWIubGVpc3VyZSYmKGErPVwiYmlyZCBoaWRlPGJyLz5cIik7XCJjb21tb25cIj09Yi5sZWlzdXJlJiYoYSs9XCJjb21tb248YnIvPlwiKTtcImNsdWJcIj09Yi5sZWlzdXJlJiYoYSs9XCJjbHViPGJyLz5cIik7XCJkYW5jZVwiPT1iLmxlaXN1cmUmJihhKz1cImRhbmNlPGJyLz5cIik7XCJkb2dfcGFya1wiPT1cbiAgICBiLmxlaXN1cmUmJihhKz1cImRvZ19wYXJrPGJyLz5cIik7XCJmaXJlcGl0XCI9PWIubGVpc3VyZSYmKGErPVwiZmlyZXBpdDxici8+XCIpO1wiZmlzaGluZ1wiPT1iLmxlaXN1cmUmJihhKz1cImZpc2hpbmc8YnIvPlwiKTtcImdhcmRlblwiPT1iLmxlaXN1cmUmJihhKz1cImdhcmRlbjxici8+XCIpO1wiZ29sZl9jb3Vyc2VcIj09Yi5sZWlzdXJlJiYoYSs9XCJnb2xmIGNvdXJzZTxici8+XCIpO1wiaGFja2Vyc3BhY2VcIj09Yi5sZWlzdXJlJiYoYSs9XCJoYWNrZXJzcGFjZTxici8+XCIpO1wiaG9yc2VfcmlkaW5nXCI9PWIubGVpc3VyZSYmKGErPVwiaG9yc2UgcmlkaW5nPGJyLz5cIik7XCJpY2Vfcmlua1wiPT1iLmxlaXN1cmUmJihhKz1cImljZSByaW5rPGJyLz5cIik7XCJuYXR1cmVfcmVzZXJ2ZVwiPT1iLmxlaXN1cmUmJihhKz1cIm5hdHVyZSByZXNlcnZlPGJyLz5cIik7XCJwYXJrXCI9PWIubGVpc3VyZSYmKGErPVwicGFyazxici8+XCIpO1wibWluaWF0dXJlX2dvbGZcIj09Yi5sZWlzdXJlJiYoYSs9XCJtaW5pYXR1cmUgZ29sZjxici8+XCIpO1wicGl0Y2hcIj09XG4gICAgYi5sZWlzdXJlJiYoYSs9XCJwaXRjaDxici8+XCIpO1wicGl0Y2hcIj09Yi5sZWlzdXJlJiZcInllc1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJneW08YnIvPlwiKTtcInBsYXlncm91bmRcIj09Yi5sZWlzdXJlJiZcInllc1wiPT1iLmJ1aWxkaW5nP2ErPVwicGxheWdyb3VuZDxici8+XCI6XCJwbGF5Z3JvdW5kXCI9PWIubGVpc3VyZSYmKGErPVwicGxheWdyb3VuZDxici8+XCIpO1wic29jaWFsX2NsdWJcIj09Yi5sZWlzdXJlJiYoYSs9XCJzb2NpYWwgY2x1Yjxici8+XCIpO1wic3BhXCI9PWIubGVpc3VyZSYmKGErPVwic3BhPGJyLz5cIik7XCJzcG9ydHNfY2VudHJlXCI9PWIubGVpc3VyZSYmKGErPVwic3BvcnRzIGNlbnRyZTxici8+XCIpO1wiY2xpbWJpbmdfYWR2ZW50dXJlXCI9PWIuc3BvcnQmJihhKz1cImNsaW1iaW5nIGFkdmVudHVyZTxici8+XCIpO1wic3RhZGl1bVwiPT1iLmxlaXN1cmUmJihhKz1cInN0YWRpdW08YnIvPlwiKTtcInN3aW1taW5nX3Bvb2xcIj09Yi5sZWlzdXJlJiYoYSs9XCJzd2ltbWluZyBwb29sPGJyLz5cIik7XCJ0cmFja1wiPT1cbiAgICBiLmxlaXN1cmUmJihhKz1cInRyYWNrPGJyLz5cIik7XCJ3YXRlcl9wYXJrXCI9PWIubGVpc3VyZSYmKGErPVwid2F0ZXIgcGFyazxici8+XCIpO1wid2lsZGxpZmVfaGlkZVwiPT1iLmxlaXN1cmUmJihhKz1cIndpbGRsaWZlIGhpZGU8YnIvPlwiKTtcImFkdWx0X2dhbWluZ19jZW50cmVcIj09Yi5sZWlzdXJlJiYoYSs9XCJhZHVsdCBnYW1pbmdfY2VudHJlPGJyLz5cIik7XCJib3dsaW5nX2FsbGV5XCI9PWIubGVpc3VyZSYmXCIxMHBpblwiPT1iLnNwb3J0JiYoYSs9XCIxMHBpbiBib3dsaW5nX2FsbGV5PGJyLz5cIik7XCJib3dsaW5nX2FsbGV5XCI9PWIubGVpc3VyZSYmXCI5cGluXCI9PWIuc3BvcnQmJihhKz1cIjlwaW4gYm93bGluZ19hbGxleTxici8+XCIpO2lmKFwia2FydGluZ1wiPT1iLnNwb3J0fHxcIm1vdG9yXCI9PWIuc3BvcnQpYSs9XCJrYXJ0aW5nPGJyLz5cIjtpZihcImRhcnRzXCI9PWIuc3BvcnR8fFwiZGFydFwiPT1iLnNwb3J0KWErPVwiRGFydHM8YnIvPlwiO2lmKGJbXCJwaXN0ZTp0eXBlXCJdKXN3aXRjaChiW1wicGlzdGU6dHlwZVwiXSl7Y2FzZSBcInNraXRvdXJcIjphKz1cbiAgICAgICAgXCJza2l0b3VyPGJyLz5cIjticmVhaztjYXNlIFwiZG93bmhpbGxcIjphKz1cImRvd25oaWxsPGJyLz5cIjticmVhaztjYXNlIFwic2xlZFwiOmErPVwic2xlZDxici8+XCI7YnJlYWs7Y2FzZSBcIm5vcmRpY1wiOmErPVwibm9yZGljPGJyLz5cIjticmVhaztjYXNlIFwiaGlrZVwiOmErPVwiaGlrZTxici8+XCI7YnJlYWs7Y2FzZSBcInNub3dfcGFya1wiOmErPVwic25vdyBwYXJrPGJyLz5cIn1pZihiLnNwb3J0KXN3aXRjaChiLnNwb3J0KXtjYXNlIFwic3VyZmluZ1wiOmErPVwic3VyZmluZzxici8+XCI7YnJlYWs7Y2FzZSBcImtpdGVzdXJmaW5nXCI6YSs9XCJraXRlc3VyZmluZzxici8+XCI7YnJlYWs7Y2FzZSBcIndhdGVyX3NraVwiOmErPVwid2F0ZXIgc2tpPGJyLz5cIn1pZihiLmFlcmlhbHdheSlzd2l0Y2goYi5hZXJpYWx3YXkpe2Nhc2UgXCJjYWJsZV9iYXJcIjphKz1cImNhYmxlIGJhcjxici8+XCI7YnJlYWs7Y2FzZSBcImdvbmRvbGFcIjphKz1cImdvbmRvbGE8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaGFpcl9saWZ0XCI6YSs9XCJjaGFpciBsaWZ0PGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcIm1peGVkX2xpZnRcIjphKz1cIm1peGVkIGxpZnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkcmFnX2xpZnRcIjphKz1cImRyYWcgbGlmdDxici8+XCI7YnJlYWs7Y2FzZSBcInQtYmFyXCI6YSs9XCJ0LWJhcjxici8+XCI7YnJlYWs7Y2FzZSBcInQtYmFyXCI6YSs9XCJ0LWJhcjxici8+XCI7YnJlYWs7Y2FzZSBcInBsYXR0ZXJcIjphKz1cInBsYXR0ZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyb3BlX3Rvd1wiOmErPVwicm9wZSB0b3c8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtYWdpY19jYXJwZXRcIjphKz1cIm1hZ2ljIGNhcnBldDxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVua25vd25cIn1cIm1vc3F1ZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJtb3NxdWU8YnIvPlwiKTtcInN5bmFnb2d1ZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJzeW5hZ29ndWU8YnIvPlwiKTtcInRlbXBsZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJ0ZW1wbGU8YnIvPlwiKTtcImFwYXJ0bWVudHNcIj09Yi5idWlsZGluZyYmKGErPVwiYXBhcnRtZW50czxici8+XCIpO1wiZmFybVwiPT1iLmJ1aWxkaW5nJiZcbiAgICAoYSs9XCJmYXJtPGJyLz5cIik7XCJob3RlbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJob3RlbDxici8+XCIpO1wiaG91c2VcIj09Yi5idWlsZGluZyYmKGErPVwiaG91c2U8YnIvPlwiKTtcImRldGFjaGVkXCI9PWIuYnVpbGRpbmcmJihhKz1cImRldGFjaGVkPGJyLz5cIik7XCJyZXNpZGVudGlhbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJyZXNpZGVudGlhbDxici8+XCIpO2lmKFwiZG9taXRvcnlcIj09Yi5idWlsZGluZ3x8XCJyZXNpZGVudGlhbCBwbHVzXCI9PWIuYnVpbGRpbmcpYSs9XCJkb21pdG9yeTxici8+XCI7XCJ0ZXJyYWNlXCI9PWIuYnVpbGRpbmcmJihhKz1cInRlcnJhY2U8YnIvPlwiKTtcImhvdXNlYm9hdFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJob3VzZWJvYXQ8YnIvPlwiKTtcImJ1bmdhbG93XCI9PWIuYnVpbGRpbmcmJihhKz1cImJ1bmdhbG93PGJyLz5cIik7XCJzdGF0aWNfY2FyYXZhblwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJzdGF0aWMgY2FyYXZhbjxici8+XCIpO1wiY29tbWVyY2lhbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJjb21tZXJjaWFsPGJyLz5cIik7XG4gICAgXCJyZXRhaWxcIj09Yi5idWlsZGluZyYmKGErPVwicmV0YWlsPGJyLz5cIik7XCJ3YXJlaG91c2VcIj09Yi5idWlsZGluZyYmKGErPVwid2FyZWhvdXNlPGJyLz5cIik7XCJiYWtlaG91c2VcIj09Yi5idWlsZGluZyYmKGErPVwiYmFrZWhvdXNlPGJyLz5cIik7XCJzaHJpbmVcIj09Yi5idWlsZGluZyYmKGErPVwic2hyaW5lPGJyLz5cIik7XCJjaXZpY1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJjaXZpYzxici8+XCIpO1wic3RhZGl1bVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJzdGFkaXVtPGJyLz5cIik7XCJ0cmFpbl9zdGF0aW9uXCI9PWIuYnVpbGRpbmcmJihhKz1cInRyYWluIHN0YXRpb248YnIvPlwiKTtcInVuaXZlcnNpdHlcIj09Yi5idWlsZGluZyYmKGErPVwidW5pdmVyc2l0eTxici8+XCIpO1wicHVibGljXCI9PWIuYnVpbGRpbmcmJihhKz1cInB1YmxpYzxici8+XCIpO1wiYnJpZGdlXCI9PWIuYnVpbGRpbmcmJihhKz1cImJyaWRnZTxici8+XCIpO1wiYnVua2VyXCI9PWIuYnVpbGRpbmcmJihhKz1cImJ1bmtlcjxici8+XCIpO1wiY2FiaW5cIj09Yi5idWlsZGluZyYmXG4gICAgKGErPVwiY2FiaW48YnIvPlwiKTtcImNvbnNlcnZhdG9yeVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJjb25zZXJ2YXRvcnk8YnIvPlwiKTtcImNvbnN0cnVjdGlvblwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJjb25zdHJ1Y3Rpb248YnIvPlwiKTtcImdhcmFnZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJnYXJhZ2U8YnIvPlwiKTtcImdhcmFnZXNcIj09Yi5idWlsZGluZyYmKGErPVwiZ2FyYWdlczxici8+XCIpO1wiZ3JlZW5ob3VzZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJncmVlbmhvdXNlPGJyLz5cIik7XCJoYW5nYXJcIj09Yi5idWlsZGluZyYmKGErPVwiaGFuZ2FyPGJyLz5cIik7XCJodXRcIj09Yi5idWlsZGluZyYmKGErPVwiaHV0PGJyLz5cIik7XCJwYXZpbGxpb25cIj09Yi5idWlsZGluZyYmKGErPVwicGF2aWxsaW9uPGJyLz5cIik7XCJyb29mXCI9PWIuYnVpbGRpbmcmJihhKz1cInJvb2Y8YnIvPlwiKTtcInNoZWRcIj09Yi5idWlsZGluZyYmKGErPVwic2hlZDxici8+XCIpO1widHJhbnNmb3JtZXJfdG93ZXJcIj09Yi5idWlsZGluZyYmKGErPVwidHJhbnNmb3JtZXIgdG93ZXI8YnIvPlwiKTtcbiAgICBcInNlcnZpY2VcIj09Yi5idWlsZGluZyYmKGErPVwic2VydmljZTxici8+XCIpO1wia2lvc2tcIj09Yi5idWlsZGluZyYmKGErPVwia2lvc2s8YnIvPlwiKTtcImNhcnBvcnRcIj09Yi5idWlsZGluZyYmKGErPVwiY2FycG9ydDxici8+XCIpO1wicnVpbnNcIj09Yi5idWlsZGluZyYmKGErPVwicnVpbnM8YnIvPlwiKTtcImdhbWJsaW5nXCI9PWIuYW1lbml0eSYmKGErPVwicGVubnkgYXJjYWRlPGJyLz5cIik7XCJsaWJyYXJ5XCI9PWIuYW1lbml0eSYmKGErPVwibGlicmFyeTxici8+XCIpO1wiZm91bnRhaW5cIj09Yi5hbWVuaXR5JiYoYSs9XCJmb3VudGFpbjxici8+XCIpO1wiYXR0cmFjdGlvblwiPT1iLmFtZW5pdHkmJihhKz1cImF0dHJhY3Rpb248YnIvPlwiKTtpZihcInNvY2lhbF9jZW50cmVcIj09Yi5hbWVuaXR5fHxcImNsdWJcIj09Yi5hbWVuaXR5KWErPVwic29jaWFsIGNlbnRyZTxici8+XCI7XCJ0b3duaGFsbFwiPT1iLmFtZW5pdHkmJihhKz1cInRvd25oYWxsPGJyLz5cIik7XCJiZW5jaFwiPT1iLmFtZW5pdHkmJihhKz1cImJlbmNoPGJyLz5cIik7XG4gICAgaWYoXCJncmF2ZV95YXJkXCI9PWIuYW1lbml0eXx8XCJjZW1ldGVyeVwiPT1iLmxhbmR1c2UpYSs9XCJncmF2ZSB5YXJkPGJyLz5cIjtcInBvc3RfYm94XCI9PWIuYW1lbml0eSYmKGErPVwicG9zdCBib3g8YnIvPlwiKTtcInBvc3Rfb2ZmaWNlXCI9PWIuYW1lbml0eSYmKGErPVwicG9zdCBvZmZpY2U8YnIvPlwiKTtcInRlbGVwaG9uZVwiPT1iLmFtZW5pdHkmJihhKz1cInRlbGVwaG9uZTxici8+XCIpO1wiYXRtXCI9PWIuYW1lbml0eSYmKGErPVwiYXRtPGJyLz5cIik7XCJiYW5rXCI9PWIuYW1lbml0eSYmKGErPVwiYmFuazxici8+XCIpO1widG9pbGV0c1wiPT1iLmFtZW5pdHkmJlwieWVzXCI9PWIuZGlhcGVyP2ErPVwidG9pbGV0cyB3aXRoIGRpYXBlciBjaGFuZ2luZyB0YWJsZTxici8+XCI6XCJ0b2lsZXRzXCI9PWIuYW1lbml0eSYmKGErPVwidG9pbGV0czxici8+XCIpO1wic2Nob29sXCI9PWIuYW1lbml0eSYmXCIxXCI9PWJbXCJpc2NlZDpsZXZlbFwiXT9hKz1cInByaW1hcnkgc2Nob29sPGJyLz5cIjpcInNjaG9vbFwiPT1iLmFtZW5pdHkmJlwiMlwiPT1iW1wiaXNjZWQ6bGV2ZWxcIl0/XG4gICAgICAgIGErPVwic2Vjb25kYXJ5IHNjaG9vbDxici8+XCI6XCJzY2hvb2xcIj09Yi5hbWVuaXR5JiZcIjNcIj09YltcImlzY2VkOmxldmVsXCJdP2ErPVwic2Vjb25kYXJ5IHNjaG9vbHM8YnIvPlwiOlwic2Nob29sXCI9PWIuYW1lbml0eSYmKGErPVwic2Nob29sPGJyLz5cIik7XCJraW5kZXJnYXJ0ZW5cIj09Yi5hbWVuaXR5JiYoYSs9XCJraW5kZXJnYXJ0ZW48YnIvPlwiKTtcImludGVybmV0X2NhZmVcIj09Yi5hbWVuaXR5JiYoYSs9XCJpbnRlcm5ldCBjYWZlPGJyLz5cIik7XCJkYXljYXJlXCI9PWIuYW1lbml0eSYmKGErPVwiZGF5Y2FyZTxici8+XCIpO1wiY2hpbGRjYXJlXCI9PWIuYW1lbml0eSYmKGErPVwiY2hpbGRjYXJlPGJyLz5cIik7XCJ1bml2ZXJzaXR5XCI9PWIuYW1lbml0eSYmKGErPVwidW5pdmVyc2l0eTxici8+XCIpO1wiY29sbGVnZVwiPT1iLmFtZW5pdHkmJihhKz1cImNvbGxlZ2U8YnIvPlwiKTtcInNoZWx0ZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJzaGVsdGVyPGJyLz5cIik7XCJiYnFcIj09Yi5hbWVuaXR5JiYoYSs9XCJiYnE8YnIvPlwiKTtcIm5pZ2h0Y2x1YlwiPT1cbiAgICBiLmFtZW5pdHkmJihhKz1cIm5pZ2h0Y2x1Yjxici8+XCIpO1wiYmljeWNsZV9wYXJraW5nXCI9PWIuYW1lbml0eSYmKGErPVwiYmljeWNsZSBwYXJraW5nPGJyLz5cIik7XCJiaWN5Y2xlX3JlbnRhbFwiPT1iLmFtZW5pdHkmJihhKz1cImJpY3ljbGUgcmVudGFsPGJyLz5cIik7XCJib2F0X3NoYXJpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJib2F0IHNoYXJpbmc8YnIvPlwiKTtcImNhcl9zaGFyaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiY2FyIHNoYXJpbmc8YnIvPlwiKTtcImNpbmVtYVwiPT1iLmFtZW5pdHkmJihhKz1cImNpbmVtYTxici8+XCIpO1wic3dpbW1pbmdfcG9vbFwiPT1iLmFtZW5pdHkmJihhKz1cInN3aW1taW5nIHBvb2w8YnIvPlwiKTtpZihcImVtYmFzc3lcIj09Yi5hbWVuaXR5fHxcImVtYmFzc3lcIj09Yi5kaXBsb21hdGljKWErPVwiZW1iYXNzeTxici8+XCI7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmXCJjb25zdWxhdGVcIj09Yi5kaXBsb21hdGljJiYoYSs9XCJjb25zdWxhdGU8YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcbiAgICBcImNvbnN1bGF0ZV9nZW5lcmFsXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwiY29uc3VsYXRlIGdlbmVyYWw8YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcImhvbm9yYXJ5X2NvbnN1bGF0ZVwiPT1iLmRpcGxvbWF0aWMmJihhKz1cImhvbm9yYXJ5IGNvbnN1bGF0ZTxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwicGVybWFuZW50X21pc3Npb25cIj09Yi5kaXBsb21hdGljJiYoYSs9XCJwZXJtYW5lbnQgbWlzc2lvbjxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwiZGVsZWdhdGlvblwiPT1iLmRpcGxvbWF0aWMmJihhKz1cImRlbGVnYXRpb248YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcImhpZ2hfY29tbWlzc2lvblwiPT1iLmRpcGxvbWF0aWMmJihhKz1cImhpZ2ggY29tbWlzc2lvbjxici8+XCIpO1wiQmFyZnVzc3BmYWRcIj09Yi5hbWVuaXR5JiYoYSs9XCJiYXJlZm9vZHBhdGg8YnIvPlwiKTtcImNhc2lub1wiPT1iLmFtZW5pdHkmJihhKz1cImNhc2lubzxici8+XCIpO1wic3BhXCI9PWIuYW1lbml0eSYmXG4gICAgKGErPVwic3BhPGJyLz5cIik7XCJzdGFibGVzXCI9PWIuYW1lbml0eSYmKGErPVwic3RhYmxlczxici8+XCIpO1wid2F0ZXJpbmdfcGxhY2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJ3YXRlcmluZyBwbGFjZTxici8+XCIpO1wieWVzXCI9PWIud2F0ZXJpbmdfcGxhY2UmJihhKz1cIndhdGVyaW5nIHBsYWNlPGJyLz5cIik7XCJ3YXRlcl9wb2ludFwiPT1iLmFtZW5pdHkmJihhKz1cIndhdGVyIHBvaW50PGJyLz5cIik7XCJ0YXhpXCI9PWIuYW1lbml0eSYmKGErPVwidGF4aTxici8+XCIpO1wiY2FyX3dhc2hcIj09Yi5hbWVuaXR5JiYoYSs9XCJjYXIgd2FzaDxici8+XCIpO1wiYnJvdGhlbFwiPT1iLmFtZW5pdHkmJihhKz1cImJyb3RoZWw8YnIvPlwiKTtcInN0cmlwY2x1YlwiPT1iLmFtZW5pdHkmJihhKz1cInN0cmlwY2x1Yjxici8+XCIpO1wic3dpbmdlcmNsdWJcIj09Yi5hbWVuaXR5JiYoYSs9XCJzd2luZ2VyY2x1Yjxici8+XCIpO1wicGxhbmV0YXJpdW1cIj09Yi5hbWVuaXR5JiYoYSs9XCJwbGFuZXRhcml1bTxici8+XCIpO1wiY291cnRob3VzZVwiPT1iLmFtZW5pdHkmJlxuICAgIChhKz1cImNvdXJ0IGhvdXNlPGJyLz5cIik7XCJjcmVtYXRvcml1bVwiPT1iLmFtZW5pdHkmJihhKz1cImNyZW1hdG9yaXVtPGJyLz5cIik7aWYoXCJjcnlwdFwiPT1iLmFtZW5pdHl8fFwiY3J5cHRcIj09Yi5idWlsZGluZylhKz1cImNyeXB0PGJyLz5cIjtcImh1bnRpbmdfc3RhbmRcIj09Yi5hbWVuaXR5JiYoYSs9XCJodW50aW5nIHN0YW5kPGJyLz5cIik7XCJwaG90b19ib290aFwiPT1iLmFtZW5pdHkmJihhKz1cInBob3RvIGJvb3RoPGJyLz5cIik7XCJwcmlzb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJwcmlzb248YnIvPlwiKTtcInJhbmdlcl9zdGF0aW9uXCI9PWIuYW1lbml0eSYmKGErPVwicmFuZ2VyIHN0YXRpb248YnIvPlwiKTtcInJlZ2lzdGVyX29mZmljZVwiPT1iLmFtZW5pdHkmJihhKz1cInJlZ2lzdGVyIG9mZmljZTxici8+XCIpO1wibWFya2V0cGxhY2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJtYXJrZXRwbGFjZTxici8+XCIpO1wic29sYXJpdW1cIj09Yi5hbWVuaXR5JiYoYSs9XCJzb2xhcml1bTxici8+XCIpO1wic2F1bmFcIj09Yi5hbWVuaXR5JiZcbiAgICAoYSs9XCJzYXVuYTxici8+XCIpO1wic2hvd2VyXCI9PWIuYW1lbml0eSYmKGErPVwic2hvd2VyPGJyLz5cIik7aWYoXCJ3YXN0ZV9kaXNwb3NhbFwiPT1iLmFtZW5pdHkmJihhKz1cIndhc3RlIGRpc3Bvc2FsPGJyLz5cIixiLndhc3RlKSlzd2l0Y2goYSs9XCJUeXA6IFwiLGIud2FzdGUpe2Nhc2UgXCJ0cmFzaFwiOmErPVwiR2VuZXJhbDxici8+XCI7YnJlYWs7Y2FzZSBcIm9pbFwiOmErPVwiT2lsPGJyLz5cIjticmVhaztjYXNlIFwiZHJ1Z3NcIjphKz1cIlBoYXJtYWNldXRpY2FsPGJyLz5cIjticmVhaztjYXNlIFwib3JnYW5pY1wiOmErPVwiT3JnYW5pYzxici8+XCI7YnJlYWs7Y2FzZSBcInBsYXN0aWNcIjphKz1cIlBsYXN0aWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJydWJibGVcIjphKz1cIlJ1YmJsZTxici8+XCI7YnJlYWs7Y2FzZSBcImNpZ2FyZXR0ZXNcIjphKz1cIkNpZ2FyZXR0ZXM8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJHZW5lcmFsPGJyLz5cIn1pZihcIndhc3RlX2Jhc2tldFwiPT1iLmFtZW5pdHl8fFwiZG9nX2V4Y3JlbWVudFwiPT1iLndhc3RlKWErPVxuICAgICAgICBcImRvZyB3YXN0ZSBzdGF0aW9uPGJyLz5cIjtpZihcInNjb3V0X2NhbXBcIj09Yi5hbWVuaXR5fHxcInNjb3V0X2h1dFwiPT1iLmFtZW5pdHl8fFwic2NvdXRfaGFsbFwiPT1iLmFtZW5pdHkpYSs9XCJzY291dCBjYW1wPGJyLz5cIjtcImZlcnJ5X3Rlcm1pbmFsXCI9PWIuYW1lbml0eSYmKGErPVwiZmVycnkgdGVybWluYWw8YnIvPlwiKTtcImJ1cmVhdV9kZV9jaGFuZ2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJidXJlYXUgZGUgY2hhbmdlPGJyLz5cIik7XCJ5b3V0aF9jbHViXCI9PWIuYW1lbml0eSYmKGErPVwieW91dGggY2x1Yjxici8+XCIpO1wiZmVzdGl2YWxfZ3JvdW5kc1wiPT1iLmFtZW5pdHkmJihhKz1cImZlc3RpdmFsIGdyb3VuZHM8YnIvPlwiKTtpZihcInllc1wiPT1iLm9wZW5maXJlfHxcInllc1wiPT1iLmZpcmVwbGFjZSlhKz1cImZpcmVwbGFjZTxici8+XCI7aWYoXCJ2ZW5kaW5nX21hY2hpbmVcIj09Yi5hbWVuaXR5KWlmKGIudmVuZGluZylzd2l0Y2goYi52ZW5kaW5nKXtjYXNlIFwiYWRtaXNzaW9uX3RpY2tldHNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBhZG1pc3Npb24gdGlja2V0czxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJhbmltYWxfZmVlZFwiOmErPVwidmVuZGluZyBtYWNoaW5lIGFuaW1hbCBmZWVkPGJyLz5cIjticmVhaztjYXNlIFwiYmljeWNsZV90dWJlXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgYmljeWNsZSB0dWJlPGJyLz5cIjticmVhaztjYXNlIFwiYm9va3NcIjphKz1cInZlbmRpbmcgbWFjaGluZSBib29rczxici8+XCI7YnJlYWs7Y2FzZSBcImNhbmRsZXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBjYW5kbGVzPGJyLz5cIjticmVhaztjYXNlIFwiY2lnYXJldHRlc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIGNpZ2FyZXR0ZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaGVtaXN0XCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgY2hlbWlzdDxici8+XCI7YnJlYWs7Y2FzZSBcImNvbmRvbXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBjb25kb21zPGJyLz5cIjticmVhaztjYXNlIFwiZHJpbmtzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgZHJpbmtzPGJyLz5cIjticmVhaztjYXNlIFwiZWxlY3Ryb25pY3NcIjphKz1cInZlbmRpbmcgbWFjaGluZSBlbGVjdHJvbmljczxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJlbG9uZ2F0ZWRfY29pblwiOmErPVwidmVuZGluZyBtYWNoaW5lIGVsb25nYXRlZF9jb2luPGJyLz5cIjticmVhaztjYXNlIFwiZXhjcmVtZW50X2JhZ3NcIjphKz1cInZlbmRpbmcgbWFjaGluZSBleGNyZW1lbnRfYmFnczxici8+XCI7YnJlYWs7Y2FzZSBcImZlbWluaW5lX2h5Z2llbmVcIjphKz1cInZlbmRpbmcgbWFjaGluZSBmZW1pbmluZV9oeWdpZW5lPGJyLz5cIjticmVhaztjYXNlIFwiZmlyc3RfYWlkXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgZmlyc3RfYWlkPGJyLz5cIjticmVhaztjYXNlIFwiZmlzaGluZ190YWNrbGVcIjphKz1cInZlbmRpbmcgbWFjaGluZSBmaXNoaW5nIHRhY2tsZTxici8+XCI7YnJlYWs7Y2FzZSBcImZpc2hpbmdfYmFpdFwiOmErPVwidmVuZGluZyBtYWNoaW5lIGZpc2hpbmcgYmFpdDxici8+XCI7YnJlYWs7Y2FzZSBcImZsb3dlcnNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBmbG93ZXJzPGJyLz5cIjticmVhaztjYXNlIFwiZm9vZFwiOmErPVwidmVuZGluZyBtYWNoaW5lIGZvb2Q8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwiaWNlX2N1YmVzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgaWNlIGN1YmVzPGJyLz5cIjticmVhaztjYXNlIFwiaWNlX2NyZWFtXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgaWNlIGNyZWFtPGJyLz5cIjticmVhaztjYXNlIFwiaW5rX2NhcnRyaWRnZXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBpbmsgY2FydHJpZGdlczxici8+XCI7YnJlYWs7Y2FzZSBcImxhdW5kcnlfZGV0ZXJnZW50XCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgbGF1bmRyeSBkZXRlcmdlbnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwdWJsaWNfdHJhbnNwb3J0X3RpY2tldHNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBwdWJsaWMgdHJhbnNwb3J0IHRpY2tldHM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJuZXdzcGFwZXJcIjphKz1cInZlbmRpbmcgbWFjaGluZSBuZXdzcGFwZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXJjZWxfcGlja3VwXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgcGFyY2VsIHBpY2t1cDxici8+XCI7YnJlYWs7Y2FzZSBcInBhcmNlbF9tYWlsX2luXCI6YSs9XG4gICAgICAgIFwiUGFja2VnZSBzdGF0aW9uPGJyLz5cIjticmVhaztjYXNlIFwicGFya2luZ190aWNrZXRzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgcGFya2luZyB0aWNrZXRzPGJyLz5cIjticmVhaztjYXNlIFwicGhvdG9zXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgcGhvdG9zPGJyLz5cIjticmVhaztjYXNlIFwic2V4X3RveXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBzZXhfdG95czxici8+XCI7YnJlYWs7Y2FzZSBcIlNJTV9jYXJkc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIFNJTV9jYXJkczxici8+XCI7YnJlYWs7Y2FzZSBcInN0YW1wc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIHN0YW1wczxici8+XCI7YnJlYWs7Y2FzZSBcInN3ZWV0c1wiOmErPVwidmVuZGluZyBtYWNoaW5lIHN3ZWV0czxici8+XCI7YnJlYWs7Y2FzZSBcInN5cmluZ2VzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgc3lyaW5nZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b2xsXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgdG9sbDxici8+XCI7YnJlYWs7Y2FzZSBcInRveXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSB0b3lzPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcInVtYnJlbGxhc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIHVtYnJlbGxhczxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInZlbmRpbmcgbWFjaGluZTxici8+XCJ9ZWxzZSBhKz1cInZlbmRpbmcgbWFjaGluZTxici8+XCI7XCJhcnRzX2NlbnRyZVwiPT1iLmFtZW5pdHkmJihhKz1cImFydHMgY2VudHJlPGJyLz5cIik7XCJhcnR3b3JrXCI9PWIuYW1lbml0eSYmKGErPVwiYXJ0d29yazxici8+XCIpO1wibXVzZXVtXCI9PWIuYW1lbml0eSYmKGErPVwibXVzZXVtPGJyLz5cIik7XCJ0aGVhdHJlXCI9PWIuYW1lbml0eSYmKGErPVwidGhlYXRyZTxici8+XCIpO1wiY2F0aGVkcmFsXCI9PWIuYnVpbGRpbmcmJihhKz1cImNhdGhlZHJhbDxici8+XCIpO1wiY2h1cmNoXCI9PWIuYnVpbGRpbmcmJihhKz1cImNodXJjaDxici8+XCIpO1wiY2hhcGVsXCI9PWIuYnVpbGRpbmcmJihhKz1cImNoYXBlbDxici8+XCIpO1wicGxhY2Vfb2Zfd29yc2hpcFwiPT1iLmFtZW5pdHkmJihhKz1cInBsYWNlIG9mIHdvcnNoaXA8YnIvPlwiKTtcInZpbGxhZ2VcIj09XG4gICAgYi5hYmFuZG9uZWQmJihhKz1cImFiYW5kb25lZCB2aWxsYWdlPGJyLz5cIik7XCJ0aGVtZV9wYXJrXCI9PWJbXCJhYmFuZG9uZWQ6dG91cmlzbVwiXSYmKGErPVwiYWJhbmRvbmVkIHRoZW1lIHBhcms8YnIvPlwiKTtcInByaXNvbl9jYW1wXCI9PWJbXCJhYmFuZG9uZWQ6YW1lbml0eVwiXSYmXCJjb25jZW50cmF0aW9uX2NhbXBcIj09W1wiY29uY2VudHJhdGlvbl9jYW1wXCJdJiYoYSs9XCJhYmFuZG9uZWQgY29uY2VudHJhdGlvbiBjYW1wPGJyLz5cIik7XCJ5ZXNcIj09Yi5hYmFuZG9uZWQmJlwiYnVua2VyXCI9PWIubWlsaXRhcnkmJihhKz1cImFiYW5kb25lZCBidW5rZXI8YnIvPlwiKTtcInllc1wiPT1iLmFiYW5kb25lZCYmXCJiYXJyYWNrc1wiPT1iLm1pbGl0YXJ5JiYoYSs9XCJhYmFuZG9uZWQgYmFycmFja3M8YnIvPlwiKTtcInllc1wiPT1iLmFiYW5kb25lZCYmXCJhaXJmaWVsZFwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJhYmFuZG9uZWQgYWlyZmllbGQ8YnIvPlwiKTtcIm1vbmFzdGVyeVwiPT1iLmhpc3RvcmljJiYoYSs9XCJoaXN0b3JpYyBtb25hc3Rlcnk8YnIvPlwiKTtcbiAgICBcIm1vbmFzdGVyeVwiPT1iLmFtZW5pdHkmJihhKz1cIm1vbmFzdGVyeTxici8+XCIpO1wibW9uYXN0ZXJ5XCI9PWIuYnVpbGRpbmcmJihhKz1cIm1vbmFzdGVyeTxici8+XCIpO1wibWFub3JcIj09Yi5oaXN0b3JpYyYmKGErPVwiaGlzdG9yaWMgbWFub3I8YnIvPlwiKTtcImJvdW5kYXJ5X3N0b25lXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIGJvdW5kYXJ5IHN0b25lPGJyLz5cIik7XCJtaWxlc3RvbmVcIj09Yi5oaXN0b3JpYyYmKGErPVwiaGlzdG9yaWMgbWlsZXN0b25lPGJyLz5cIik7XCJtb251bWVudFwiPT1iLmhpc3RvcmljJiYoYSs9XCJtb251bWVudDxici8+XCIpO1wicGFsYWNlXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIHBhbGFjZTxici8+XCIpO1wibWluZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJoaXN0b3JpYyBtaW5lPGJyLz5cIik7XCJydWluc1wiPT1iLmhpc3RvcmljJiYoYSs9XCJydWluczxici8+XCIpO1wiaGFyYm91clwiPT1iLmhpc3RvcmljX3VzYWdlJiYoYSs9XCJoaXN0b3JpYyBoYXJib3VyPGJyLz5cIik7XG4gICAgXCJydW5lIHN0b25lXCI9PWIuaGlzdG9yaWMmJihhKz1cInJ1bmUgc3RvbmU8YnIvPlwiKTtcImJhdHRsZWZpZWxkXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIGJhdHRsZWZpZWxkPGJyLz5cIik7XCJibGFja3NtaXRoXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIGJsYWNrc21pdGg8YnIvPlwiKTtpZihcInRyZWVfc2hyaW5lXCI9PWIuaGlzdG9yaWN8fFwid2F5c2lkZV9zaHJpbmVcIj09Yi5oaXN0b3JpYylhKz1cInNocmluZTxici8+XCI7XCJjaXR5X2dhdGVcIj09Yi5oaXN0b3JpYyYmKGErPVwiaGlzdG9yaWMgY2l0eSBnYXRlPGJyLz5cIik7XCJ3YXlzaWRlX2Nyb3NzXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIHdheXNpZGUgY3Jvc3M8YnIvPlwiKTtcIm1vbnVtZW50XCI9PWIuYW1lbml0eSYmKGErPVwibW9udW1lbnQ8YnIvPlwiKTtcIm1lbW9yaWFsXCI9PWIuaGlzdG9yaWMmJihhKz1cIm1lbW9yaWFsPGJyLz5cIik7XCJvcHRpY2FsX3RlbGVncmFwaFwiPT1iLmhpc3RvcmljJiYoYSs9XCJoaXN0b3JpYyBvcHRpY2FsIHRlbGVncmFwaDxici8+XCIpO1xuICAgIGlmKFwiY2FzdGxlXCI9PWIuaGlzdG9yaWMpaWYoYi5jYXN0bGVfdHlwZSlzd2l0Y2goYi5jYXN0bGVfdHlwZSl7Y2FzZSBcImRlZmVuc2l2ZVwiOmErPVwiZGVmZW5zaXZlIGNhc3RsZTxici8+XCI7YnJlYWs7Y2FzZSBcInBhbGFjZVwiOmErPVwicGFsYWNlPGJyLz5cIjticmVhaztjYXNlIFwic3RhdGVseVwiOmErPVwic3RhdGVseSBjYXN0bGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtYW5vclwiOmErPVwibWFub3I8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmb3J0cmVzc1wiOmErPVwiZm9ydHJlc3M8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYXN0cnVtXCI6YSs9XCJjYXN0cnVtPGJyLz5cIjticmVhaztjYXNlIFwic2hpcm9cIjphKz1cInNoaXJvPGJyLz5cIjticmVhaztjYXNlIFwia3JlbWxpblwiOmErPVwia3JlbWxpbjxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cImNhc3RsZTxici8+XCJ9ZWxzZSBhKz1cImNhc3RsZTxici8+XCI7XCJhcmNoYWVvbG9naWNhbF9zaXRlXCI9PWIuaGlzdG9yaWMmJihhKz1cImFyY2hhZW9sb2dpY2FsIHNpdGU8YnIvPlwiKTtpZihcInRvbWJcIj09XG4gICAgICAgIGIuaGlzdG9yaWMpaWYoYi50b21iKXN3aXRjaChiLnRvbWIpe2Nhc2UgXCJ0dW11bHVzXCI6YSs9XCJ0dW11bHVzPGJyLz5cIjticmVhaztjYXNlIFwicm9jay1jdXRcIjphKz1cInJvY2s8YnIvPlwiO2JyZWFrO2Nhc2UgXCJoeXBvZ2V1bVwiOmErPVwiaHlwb2dldW08YnIvPlwiO2JyZWFrO2Nhc2UgXCJ3YXJfZ3JhdmVcIjphKz1cIndhciBncmF2ZTxici8+XCI7YnJlYWs7Y2FzZSBcIm1hdXNvbGV1bVwiOmErPVwibWF1c29sZXVtPGJyLz5cIjticmVhaztjYXNlIFwiY29sdW1iYXJpdW1cIjphKz1cImNvbHVtYmFyaXVtPGJyLz5cIjticmVhaztjYXNlIFwiY3J5cHRcIjphKz1cImNyeXB0PGJyLz5cIjticmVhaztjYXNlIFwicHlyYW1pZFwiOmErPVwicHlyYW1pZDxici8+XCI7YnJlYWs7Y2FzZSBcInNhcmNvcGhhZ3VzXCI6YSs9XCJzYXJjb3BoYWd1czxici8+XCI7YnJlYWs7Y2FzZSBcInZhdWx0XCI6YSs9XCJ2YXVsdDxici8+XCI7YnJlYWs7Y2FzZSBcInRvbWJzdG9uZVwiOmErPVwidG9tYnN0b25lPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiaGlzdG9yaWMgdG9tYjxici8+XCJ9ZWxzZSBhKz1cbiAgICAgICAgXCJoaXN0b3JpYyB0b21iPGJyLz5cIjtcImFjY291bnRhbnRcIj09Yi5vZmZpY2UmJihhKz1cImFjY291bnRhbnQ8YnIvPlwiKTtcImFkbWluaXN0cmF0aXZlXCI9PWIub2ZmaWNlJiYoYSs9XCJhZG1pbmlzdHJhdGl2ZTxici8+XCIpO1wiYXJjaGl0ZWN0XCI9PWIub2ZmaWNlJiYoYSs9XCJhcmNoaXRlY3Q8YnIvPlwiKTtcImFzc29jaWF0aW9uXCI9PWIub2ZmaWNlJiYoYSs9XCJhc3NvY2lhdGlvbjxici8+XCIpO1wicGh5c2ljaWFuXCI9PWIub2ZmaWNlJiYoYSs9XCJwaHlzaWNpYW48YnIvPlwiKTtcImNhbXBpbmdcIj09Yi5vZmZpY2UmJihhKz1cImNhbXBpbmcgb2ZmaWNlPGJyLz5cIik7XCJjb21wYW55XCI9PWIub2ZmaWNlJiYoYSs9XCJjb21wYW55PGJyLz5cIik7XCJlZHVjYXRpb25hbF9pbnN0aXR1dGlvblwiPT1iLm9mZmljZSYmKGErPVwiZWR1Y2F0aW9uYWwgaW5zdGl0dXRpb248YnIvPlwiKTtcImVtcGxveW1lbnRfYWdlbmN5XCI9PWIub2ZmaWNlJiYoYSs9XCJlbXBsb3ltZW50IGFnZW5jeTxici8+XCIpO1wiZXN0YXRlX2FnZW50XCI9PVxuICAgIGIub2ZmaWNlJiYoYSs9XCJlc3RhdGUgYWdlbnQ8YnIvPlwiKTtcImZvcmVzdHJ5XCI9PWIub2ZmaWNlJiYoYSs9XCJmb3Jlc3RyeTxici8+XCIpO1wiZm91bmRhdGlvblwiPT1iLm9mZmljZSYmKGErPVwiZm91bmRhdGlvbjxici8+XCIpO1wiZ292ZXJubWVudFwiPT1iLm9mZmljZSYmKGErPVwiZ292ZXJubWVudDxici8+XCIpO1wiZ3VpZGVcIj09Yi5vZmZpY2UmJihhKz1cImd1aWRlIG9mZmljZTxici8+XCIpO1wiaW5zdXJhbmNlXCI9PWIub2ZmaWNlJiYoYSs9XCJpbnN1cmFuY2U8YnIvPlwiKTtcIml0XCI9PWIub2ZmaWNlJiYoYSs9XCJpdCBvZmZpY2U8YnIvPlwiKTtcImxhd3llclwiPT1iLm9mZmljZSYmKGErPVwibGF3eWVyPGJyLz5cIik7XCJuZXdzcGFwZXJcIj09Yi5vZmZpY2UmJihhKz1cIm5ld3NwYXBlcjxici8+XCIpO1wibmdvXCI9PWIub2ZmaWNlJiYoYSs9XCJuZ28gb2ZmaWNlPGJyLz5cIik7XCJub3RhcnlcIj09Yi5vZmZpY2UmJihhKz1cIm5vdGFyeTxici8+XCIpO1wicG9saXRpY2FsX3BhcnR5XCI9PWIub2ZmaWNlJiYoYSs9XCJwb2xpdGljYWwgcGFydHk8YnIvPlwiKTtcbiAgICBcInF1YW5nb1wiPT1iLm9mZmljZSYmKGErPVwicXVhbmdvIG9mZmljZTxici8+XCIpO1wicmVhbHRvclwiPT1iLm9mZmljZSYmKGErPVwicmVhbHRvcjxici8+XCIpO1wicmVhbF9lc3RhdGVfYWdlbnRcIj09Yi5vZmZpY2UmJihhKz1cInJlYWwgZXN0YXRlIGFnZW50PGJyLz5cIik7XCJyZWdpc3RlclwiPT1iLm9mZmljZSYmKGErPVwicmVnaXN0ZXI8YnIvPlwiKTtcInJlbGlnaW9uXCI9PWIub2ZmaWNlJiYoYSs9XCJyZWxpZ2lvdXMgb2ZmaWNlPGJyLz5cIik7XCJyZXNlYXJjaFwiPT1iLm9mZmljZSYmKGErPVwicmVzZWFyY2ggb2ZmaWNlPGJyLz5cIik7XCJ0YXhcIj09Yi5vZmZpY2UmJihhKz1cInRheCBvZmZpY2U8YnIvPlwiKTtcInRlbGVjb21tdW5pY2F0aW9uXCI9PWIub2ZmaWNlJiYoYSs9XCJ0ZWxlY29tbXVuaWNhdGlvbiBvZmZpY2U8YnIvPlwiKTtcInRyYXZlbF9hZ2VudFwiPT1iLm9mZmljZSYmKGErPVwidHJhdmVsIGFnZW50PGJyLz5cIik7XCJ3YXRlcl91dGlsaXR5XCI9PWIub2ZmaWNlJiYoYSs9XCJ3YXRlciB1dGlsaXR5IG9mZmljZTxici8+XCIpO1xuICAgIFwidGhlcmFwaXN0XCI9PWIub2ZmaWNlJiYoYSs9XCJ0aGVyYXBpc3Q8YnIvPlwiKTtcImNpdHlcIj09Yi5wbGFjZSYmKGErPVwiY2l0eTxici8+XCIpO1widG93blwiPT1iLnBsYWNlJiYoYSs9XCJ0b3duPGJyLz5cIik7XCJ2aWxsYWdlXCI9PWIucGxhY2UmJihhKz1cInZpbGxhZ2U8YnIvPlwiKTtcImNvbnRpbmVudFwiPT1iLnBsYWNlJiYoYSs9XCJjb250aW5lbnQ8YnIvPlwiKTtcIm9jZWFuXCI9PWIucGxhY2UmJihhKz1cIm9jZWFuPC9icj5cIik7XCJ0cmFja1wiPT1iLmhpZ2h3YXkmJihhKz1cInRyYWNrPGJyLz5cIik7XCJyYWNld2F5XCI9PWIuaGlnaHdheSYmKGErPVwicmFjZXdheTxici8+XCIpO1wiZGVzaWduYXRlZFwiPT1iLmJpY3ljbGUmJihhKz1cImN5Y2xlIHBhdGg8YnIvPlwiKTtcInBhdGhcIj09Yi5oaWdod2F5JiYoYSs9XCJmb29kIHBhdGg8YnIvPlwiKTtcInBhcmtpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJwYXJraW5nPGJyLz5cIik7XCJzZXJ2aWNlc1wiPT1iLmhpZ2h3YXkmJihhKz1cInNlcnZpY2VzPGJyLz5cIik7XCJyZXN0X2FyZWFcIj09XG4gICAgYi5oaWdod2F5JiYoYSs9XCJyZXN0IGFyZWE8YnIvPlwiKTtcInR1cm5pbmdfY2lyY2xlXCI9PWIuaGlnaHdheSYmKGErPVwidHVybmluZyBjaXJjbGU8YnIvPlwiKTtcInNlcnZpY2VcIj09Yi5oaWdod2F5JiYoYSs9XCJzZXJ2aWNlIHJvYWQ8YnIvPlwiKTtcIm1vdG9yd2F5XCI9PWIuaGlnaHdheSYmKGErPVwibW90b3J3YXk8YnIvPlwiKTtcIm1vdG9yd2F5X2p1bmN0aW9uXCI9PWIuaGlnaHdheSYmKGErPVwibW90b3J3YXkganVuY3Rpb248YnIvPlwiKTtcImJyaWRsZXdheVwiPT1iLmhpZ2h3YXkmJihhKz1cImJyaWRsZXdheTxici8+XCIpO1wieWVzXCI9PWIub25ld2F5JiYoYSs9XCJvbmV3YXk8YnIvPlwiKTtcInllc1wiPT1iLnBhcmtfcmlkZSYmKGErPVwicGFyayBhbmQgcmlkZTxici8+XCIpO1widW5rbm93blwiPT1iLnBhcmtfcmlkZSYmKGErPVwicGFyayBhbmQgcmlkZTxici8+XCIpO1wiYnVzXCI9PWIucGFya19yaWRlJiYoYSs9XCJwYXJrIGFuZCByaWRlPGJyLz5cIik7XCJ0cmFtXCI9PWIucGFya19yaWRlJiYoYSs9XCJwYXJrIGFuZCByaWRlPGJyLz5cIik7XG4gICAgXCJidXNfc3RvcFwiPT1iLmhpZ2h3YXkmJihhKz1cImJ1cyBzdG9wPGJyLz5cIik7XCJwZWRlc3RyaWFuXCI9PWIuaGlnaHdheSYmKGErPVwicGVkZXN0cmlhbjxici8+XCIpO1wic3RyZWV0X2xhbXBcIj09Yi5oaWdod2F5JiYoYSs9XCJzdHJlZXQgbGFtcDxici8+XCIpO1widHJhZmZpY19zaWduYWxzXCI9PWIuaGlnaHdheSYmKGErPVwidHJhZmZpYyBzaWduYWxzPGJyLz5cIik7XCJ0cmFmZmljX3NpZ25hbHNcIj09Yi5jcm9zc2luZyYmKGErPVwidHJhZmZpYyBzaWduYWxzPGJyLz5cIik7XCJzcGVlZF9jYW1lcmFcIj09Yi5oaWdod2F5JiYoYSs9XCJzcGVlZCBjYW1lcmE8YnIvPlwiKTtcInllc1wiPT1iLnRyYWZmaWNfY2FsbWluZyYmKHJldCs9XCJ0cmFmZmljIGNhbG1pbmc8L2JyPlwiKTtcImJ1bXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImJ1bXA8L2JyPlwiKTtcImNoaWNhbmVcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImNoaWNhbmU8L2JyPlwiKTtcImNob2tlclwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiY2hva2VyPC9icj5cIik7XG4gICAgXCJjdXNoaW9uXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJjdXNoaW9uPC9icj5cIik7XCJodW1wXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJodW1wPC9icj5cIik7XCJpc2xhbmRcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImlzbGFuZDwvYnI+XCIpO1wicnVtYmxlX3N0cmlwXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJydW1ibGVfc3RyaXA8L2JyPlwiKTtcInRhYmxlXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJ0YWJsZTwvYnI+XCIpO1wiYnVveV9jYXJkaW5hbFwiPT1iW1wic2VhbWFyazp0eXBlXCJdJiYoYSs9XCJidW95IGNhcmRpbmFsPGJyLz5cIik7XCJidW95X2xhdGVyYWxcIj09YltcInNlYW1hcms6dHlwZVwiXSYmKGErPVwiYnVveSBsYXRlcmFsPGJyLz5cIik7XCJidW95X2lzb2xhdGVkX2RhbmdlclwiPT1iW1wic2VhbWFyazp0eXBlXCJdJiYoYSs9XCJidW95IGlzb2xhdGVkX2Rhbmdlcjxici8+XCIpO1wicGVyY2hcIj09YltcInNlYW1hcms6YmVhY29uX2xhdGVyYWw6c2hhcGVcIl0mJihhKz1cInBlcmNoPGJyLz5cIik7XG4gICAgXCJmdWVsXCI9PWIuYW1lbml0eSYmXCJmdWVsX3N0YXRpb25cIj09YltcInNlYW1hcms6c21hbGxfY3JhZnRfZmFjaWxpdHk6Y2F0ZWdvcnlcIl0/YSs9XCJmdWVsIHN0YXRpb248YnIvPlwiOlwiZnVlbFwiPT1iLmFtZW5pdHkmJihhKz1cImZ1ZWw8YnIvPlwiKTtpZihcImNoYXJnaW5nX3N0YXRpb25cIj09Yi5hbWVuaXR5KXt2YXIgYT1hK1wiY2hhcmdpbmcgc3RhdGlvbjxici8+XCIsYz1iLnZvbHRhZ2U7aWYoYi5jYXIpe3N3aXRjaChiLmNhcil7Y2FzZSBcInllc1wiOmErPVwiQ2FyOiB5ZXNcIjticmVhaztjYXNlIFwibm9cIjphKz1cIkNhcjogTm9cIjticmVhaztkZWZhdWx0OmErPVwiQ2FyczogdW5rb3duXCJ9YSs9XCI8YnIvPlwifWVsc2UgYSs9XCJDYXJzOiB1bmtvd248YnIvPlwiO2lmKGIuYmljeWNsZSl7c3dpdGNoKGIuYmljeWNsZSl7Y2FzZSBcInllc1wiOmErPVwiRS1CaWtlOiB5ZXNcIjticmVhaztjYXNlIFwibm9cIjphKz1cIkUtQmlrZTogbm9cIjticmVhaztkZWZhdWx0OmErPVwiRS1CaWtlOiB1bmtvd25cIn1hKz1cIjxici8+XCJ9ZWxzZSBhKz1cbiAgICAgICAgXCJFLUJpa2U6IHVua293bjxici8+XCI7YltcInNvY2tldDpzY2h1a29cIl0mJihhKz1cIlNjaHVrbyBzb2NrZXQ6IFwiK2JbXCJzb2NrZXQ6c2NodWtvXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfYmx1ZVwiXSYmKGErPVwiQ2VlIGJsdWUgc29ja2V0IFwiK2JbXCJzb2NrZXQ6Y2VlX2JsdWVcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmNlZV9yZWRfMTZhXCJdJiYoYSs9XCJDZWUgcmVkIDE2YSBzb2NrZXQgXCIrYltcInNvY2tldDpjZWVfcmVkXzE2YVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6Y2VlX3JlZF8zMmFcIl0mJihhKz1cIkNlZSByZWQgMzJhIHNvY2tldCBcIitiW1wic29ja2V0OmNlZV9yZWRfMzJhXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfcmVkXzY0YVwiXSYmKGErPVwiQ2VlIHJlZCA2NGEgc29ja2V0IFwiK2JbXCJzb2NrZXQ6Y2VlX3JlZF82NGFcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmNlZV9yZWRfMTI1YVwiXSYmKGErPVwiQ2VlIHJlZCAxMjVhIHNvY2tldCBcIitiW1wic29ja2V0OmNlZV9yZWRfMTI1YVwiXStcIjxici8+XCIpO1xuICAgICAgICBiW1wic29ja2V0Om5lbWFfNV8xNVwiXSYmKGErPVwiTmVtYSA1IDE1IHNvY2tldCBcIitiW1wic29ja2V0Om5lbWFfNV8xNVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6bmVtYV81XzIwXCJdJiYoYSs9XCJOZW1hIDUgMjAgc29ja2V0IFwiK2JbXCJzb2NrZXQ6bmVtYV81XzIwXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpuZW1hXzE0XzMwXCJdJiYoYSs9XCJOZW1hIDE0IDMwIHNvY2tldCBcIitiW1wic29ja2V0Om5lbWFfMTRfMzBcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om5lbWFfMTRfNTBcIl0mJihhKz1cIk5lbWEgMTQgNTAgc29ja2V0IFwiK2JbXCJzb2NrZXQ6bmVtYV8xNF81MFwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6YnMxMzYzXCJdJiYoYSs9XCJCczEzNjMgc29ja2V0IFwiK2JbXCJzb2NrZXQ6YnMxMzYzXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlMVwiXSYmKGErPVwiVHlwZSAxIHNvY2tldCBcIitiW1wic29ja2V0OnR5cGUxXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlMV9jb21ib1wiXSYmKGErPVwiVHlwZSAxIGNvbWJvIHNvY2tldCBcIitcbiAgICAgICAgICAgIGJbXCJzb2NrZXQ6c2NodWtvXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlMlwiXSYmKGErPVwiVHlwZSAyIHNvY2tldCBcIitiW1wic29ja2V0OnR5cGUyXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlMl9jb21ib1wiXSYmKGErPVwiVHlwZSAyIGNvbWJvIHNvY2tldCBcIitiW1wic29ja2V0OnR5cGUyX2NvbWJvXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlM1wiXSYmKGErPVwiVHlwZSAzIHNvY2tldCBcIitiW1wic29ja2V0OnR5cGUzXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjaGFkZW1vXCJdJiYoYSs9XCJDaGFkZW1vIHNvY2tldCBcIitiW1wic29ja2V0OmNoYWRlbW9cIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om1hZ25lX2NoYXJnZVwiXSYmKGErPVwiTWFnbmUgY2hhcmdlIHNvY2tldCBcIitiW1wic29ja2V0Om1hZ25lX2NoYXJnZVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dGVzbGFfc3RhbmRhcmRcIl0mJihhKz1cIlRlc2xhIHN0YW5kYXJkIHNvY2tldCBcIitiW1wic29ja2V0OnRlc2xhX3N0YW5kYXJkXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0ZXNsYV9zdXBlcmNoYXJnZVwiXSYmXG4gICAgICAgIChhKz1cIlRlc2xhIHN1cGVyY2hhcmdlOiBcIitiW1wic29ja2V0OnRlc2xhX3N1cGVyY2hhcmdlXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0ZXNsYV9yb2Fkc3RlclwiXSYmKGErPVwiVGVzbGFfcm9hZHN0ZXIgc29ja2V0IFwiK2JbXCJzb2NrZXQ6dGVzbGFfcm9hZHN0ZXJcIl0rXCI8YnIvPlwiKTthKz1cIjxici8+XCI7Yi52b2x0YWdlJiYoYSs9XCJWb2x0OiBcIitjK1wiPGJyLz5cIil9XCJ5ZXNcIj09Yi50dW5uZWwmJihhKz1cInR1bm5lbDxici8+XCIpO2lmKGIuYnJpZGdlKXN3aXRjaChhKz1cImJyaWRnZTogXCIsYi5icmlkZ2Upe2Nhc2UgXCJzd2luZ1wiOmErPVwic3dpbmdcIjticmVhaztjYXNlIFwiYXF1ZWR1Y3RcIjphKz1cImFxdWVkdWN0XCI7YnJlYWs7Y2FzZSBcImJhc2N1bGVcIjphKz1cImZsYXAgYnJpZGdlXCI7YnJlYWs7Y2FzZSBcImJvYXJkd2Fsa1wiOmErPVwiYm9hcmR3YWxrXCI7YnJlYWs7Y2FzZSBcImNhbnRpbGV2ZXJcIjphKz1cImNhbnRpbGV2ZXJcIjticmVhaztjYXNlIFwiY292ZXJlZFwiOmErPVwiY292ZXJlZFwiO2JyZWFrO2Nhc2UgXCJkcmF3YnJpZGdlXCI6YSs9XG4gICAgICAgIFwiZHJhd2JyaWRnZVwiO2JyZWFrO2Nhc2UgXCJodW1wYmFja1wiOmErPVwiaHVtcGJhY2tcIjticmVhaztjYXNlIFwibGlmdFwiOmErPVwibGlmdFwiO2JyZWFrO2Nhc2UgXCJsb3dfd2F0ZXJfY3Jvc3NpbmdcIjphKz1cImxvdyB3YXRlciBjcm9zc2luZ1wiO2JyZWFrO2Nhc2UgXCJtb3ZlYWJsZVwiOmErPVwibW92ZWFibGVcIjticmVhaztjYXNlIFwicG9udG9vblwiOmErPVwicG9udG9vblwiO2JyZWFrO2Nhc2UgXCJzdXNwZW5zaW9uXCI6YSs9XCJzdXNwZW5zaW9uXCI7YnJlYWs7Y2FzZSBcInRyZXN0bGVcIjphKz1cInRyZXN0bGVcIjticmVhaztjYXNlIFwidmlhZHVjdFwiOmErPVwidmlhZHVjdFwifWlmKGJbXCJicmlkZ2U6bW92YWJsZVwiXSlzd2l0Y2goYltcImJyaWRnZTptb3ZhYmxlXCJdKXtjYXNlIFwic3dpbmdcIjphKz1cInN3aW5nXCI7YnJlYWs7Y2FzZSBcImJhc2N1bGVcIjphKz1cImJhc2N1bGVcIjticmVhaztjYXNlIFwiZHJhd2JyaWRnZVwiOmErPVwiZHJhd2JyaWRnZVwiO2JyZWFrO2Nhc2UgXCJsaWZ0XCI6YSs9XCJsaWZ0XCI7YnJlYWs7Y2FzZSBcInN1Ym1lcnNpYmxlXCI6YSs9XG4gICAgICAgIFwic3VibWVyc2libGVcIjticmVhaztjYXNlIFwidHJhbnNwb3J0ZXJcIjphKz1cInRyYW5zcG9ydGVyXCI7YnJlYWs7Y2FzZSBcInJldHJhY3RhYmxlXCI6YSs9XCJyZXRyYWN0YWJsZVwifWlmKFwibnVyc2luZ19ob21lXCI9PWIuYW1lbml0eXx8XCJyZXRpcmVtZW50X2hvbWVcIj09Yi5hbWVuaXR5KWErPVwibnVyc2luZyBob21lIC8gcmV0aXJlbWVudCBob21lPGJyLz5cIjtcInNvY2lhbF9mYWNpbGl0eVwiPT1iLmFtZW5pdHkmJihhKz1cInNvY2lhbCBmYWNpbGl0eTxici8+XCIpO2lmKGIuc29jaWFsX2ZhY2lsaXR5KXtcImdyb3VwX2hvbWVcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJlwic2VuaW9yXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzZW5pb3IgZ3JvdXAgaG9tZTxici8+XCIpO1wiYXNzaXN0ZWRfbGl2aW5nXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJhc3Npc3RlZCBsaXZpbmc8YnIvPlwiKTtcIm91dHJlYWNoXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJvdXRyZWFjaDxici8+XCIpO1wid29ya3Nob3BcIj09XG4gICAgYi5zb2NpYWxfZmFjaWxpdHkmJihhKz1cIndvcmtzaG9wPGJyLz5cIik7aWYoXCJhbWJ1bGF0b3J5X2NhcmVcIj09Yi5zb2NpYWxfZmFjaWxpdHl8fFwiaGVhbHRoY2FyZVwiPT1iLnNvY2lhbF9mYWNpbGl0eSlhKz1cImFtYnVsYXRvcnkgY2FyZTxici8+XCI7XCJzaGVsdGVyXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiZcInNlbmlvclwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic2VuaW9yIHNoZWx0ZXI8YnIvPlwiKTtcInNoZWx0ZXJcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJlwiYWJ1c2VkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJhYnVzZWQgc2hlbHRlcjxici8+XCIpO1wiZm9vZF9iYW5rXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJmb29kIGJhbms8YnIvPlwiKTtcImhvc3BpY2VcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJihhKz1cImhvc3BpY2U8YnIvPlwiKX1iLmJyZXdlcnkmJihhKz1cImJyYW5kIG9mIGJlZXI6IFwiK2IuYnJld2VyeStcIjxici8+XCIpO1wiYWxjb2hvbFwiPT1iLnNob3AmJihhKz1cbiAgICAgICAgXCJhbGNvaG9sIHNob3A8YnIvPlwiKTtcImJha2VyeVwiPT1iLnNob3AmJihhKz1cImJha2VyeSBzaG9wPGJyLz5cIik7XCJiZXZlcmFnZXNcIj09Yi5zaG9wJiYoYSs9XCJiZXZlcmFnZXMgc2hvcDxici8+XCIpO1wiYnV0Y2hlclwiPT1iLnNob3AmJihhKz1cImJ1dGNoZXIgc2hvcDxici8+XCIpO1wiY2hlZXNlXCI9PWIuc2hvcCYmKGErPVwiY2hlZXNlIHNob3A8YnIvPlwiKTtcImNob2NvbGF0ZVwiPT1iLnNob3AmJihhKz1cImNob2NvbGF0ZSBzaG9wPGJyLz5cIik7XCJjb2ZmZWVcIj09Yi5zaG9wJiYoYSs9XCJjb2ZmZWUgc2hvcDxici8+XCIpO1wiY29uZmVjdGlvbmVyeVwiPT1iLnNob3AmJihhKz1cImNvbmZlY3Rpb25lcnkgc2hvcDxici8+XCIpO1wiY29udmVuaWVuY2VcIj09Yi5zaG9wJiYoYSs9XCJjb252ZW5pZW5jZSBzaG9wPGJyLz5cIik7XCJkZWxpXCI9PWIuc2hvcCYmKGErPVwiZGVsaSBzaG9wPGJyLz5cIik7XCJkYWlyeVwiPT1iLnNob3AmJihhKz1cImRhaXJ5IHNob3A8YnIvPlwiKTtcImZhcm1cIj09Yi5zaG9wJiYoYSs9XCJmYXJtIHNob3A8YnIvPlwiKTtcbiAgICBcImdyZWVuZ3JvY2VyXCI9PWIuc2hvcCYmKGErPVwiZ3JlZW5ncm9jZXIgc2hvcDxici8+XCIpO1wiZ3JvY2VyeVwiPT1iLnNob3AmJihhKz1cImdyb2Nlcnkgc2hvcDxici8+XCIpO1wib3JnYW5pY1wiPT1iLnNob3AmJihhKz1cIm9yZ2FuaWMgc2hvcDxici8+XCIpO1wicGFzdGFcIj09Yi5zaG9wJiYoYSs9XCJwYXN0YSBzaG9wPGJyLz5cIik7XCJzZWFmb29kXCI9PWIuc2hvcCYmKGErPVwic2VhZm9vZCBzaG9wPGJyLz5cIik7XCJ0ZWFcIj09Yi5zaG9wJiYoYSs9XCJ0ZWEgc2hvcDxici8+XCIpO1wid2luZVwiPT1iLnNob3AmJihhKz1cIndpbmUgc2hvcDxici8+XCIpO1wiZGVwYXJ0bWVudF9zdG9yZVwiPT1iLnNob3AmJihhKz1cImRlcGFydG1lbnQgc3RvcmU8YnIvPlwiKTtcImdlbmVyYWxcIj09Yi5zaG9wJiYoYSs9XCJnZW5lcmFsIHNob3A8YnIvPlwiKTtcImtpb3NrXCI9PWIuc2hvcCYmKGErPVwia2lvc2s8YnIvPlwiKTtcIm1hbGxcIj09Yi5zaG9wJiYoYSs9XCJtYWxsPGJyLz5cIik7XCJzdXBlcm1hcmtldFwiPT1iLnNob3AmJihhKz1cInN1cGVybWFya2V0PGJyLz5cIik7XG4gICAgXCJiYWJ5X2dvb2RzXCI9PWIuc2hvcCYmKGErPVwiYmFieSBnb29kcyBzaG9wPGJyLz5cIik7XCJiYWdcIj09Yi5zaG9wJiYoYSs9XCJiYWcgc2hvcDxici8+XCIpO1wiYm91dGlxdWVcIj09Yi5zaG9wJiYoYSs9XCJib3V0aXF1ZTxici8+XCIpO1wiY2xvdGhlc1wiPT1iLnNob3AmJihhKz1cImNsb3RoZXMgc2hvcDxici8+XCIpO1wiZmFicmljXCI9PWIuc2hvcCYmKGErPVwiZmFicmljIHNob3A8YnIvPlwiKTtcImZhc2hpb25cIj09Yi5zaG9wJiYoYSs9XCJmYXNoaW9uIHNob3A8YnIvPlwiKTtcImpld2VscnlcIj09Yi5zaG9wJiYoYSs9XCJqZXdlbHJ5IHNob3A8YnIvPlwiKTtcImxlYXRoZXJcIj09Yi5zaG9wJiYoYSs9XCJsZWF0aGVyIHNob3A8YnIvPlwiKTtcInNob2VzXCI9PWIuc2hvcCYmKGErPVwic2hvZXMgc2hvcDxici8+XCIpO1widmFyaWV0eV9zdG9yZVwiPT1iLnNob3AmJihhKz1cInZhcmlldHkgc3RvcmU8YnIvPlwiKTtcImNoZW1pc3RcIj09Yi5zaG9wJiYoYSs9XCJjaGVtaXN0PGJyLz5cIik7XCJjb3NtZXRpY3NcIj09Yi5zaG9wJiYoYSs9XCJjb3NtZXRpY3Mgc2hvcDxici8+XCIpO1xuICAgIFwiZHJ1Z3N0b3JlXCI9PWIuc2hvcCYmKGErPVwiZHJ1Z3N0b3JlPGJyLz5cIik7XCJwZXJmdW1lcnlcIj09Yi5zaG9wJiYoYSs9XCJwZXJmdW1lcnk8YnIvPlwiKTtcImVyb3RpY1wiPT1iLnNob3AmJihhKz1cImVyb3RpYyBzaG9wPGJyLz5cIik7XCJoYWlyZHJlc3NlclwiPT1iLnNob3AmJihhKz1cImhhaXJkcmVzc2VyPGJyLz5cIik7XCJoZWFyaW5nX2FpZHNcIj09Yi5zaG9wJiYoYSs9XCJoZWFyaW5nIGFpZHM8YnIvPlwiKTtcImhlcmJhbGlzdFwiPT1iLnNob3AmJihhKz1cImhlcmJhbGlzdDxici8+XCIpO1wibWFzc2FnZVwiPT1iLnNob3AmJihhKz1cIm1hc3NhZ2U8YnIvPlwiKTtcIm1lZGljYWxfc3VwcGx5XCI9PWIuc2hvcCYmKGErPVwibWVkaWNhbCBzdXBwbHkgc2hvcDxici8+XCIpO1wib3B0aWNpYW5cIj09Yi5zaG9wJiYoYSs9XCJvcHRpY2lhbjxici8+XCIpO1widGF0dG9vXCI9PWIuc2hvcCYmKGErPVwidGF0dG9vPGJyLz5cIik7XCJiYXRocm9vbV9mdXJuaXNoaW5nXCI9PWIuc2hvcCYmKGErPVwiYmF0aHJvb20gZnVybmlzaGluZzxici8+XCIpO1xuICAgIFwiZG9pdHlvdXJzZWxmXCI9PWIuc2hvcCYmKGErPVwiZG9pdHlvdXJzZWxmPGJyLz5cIik7XCJlbmVyZ3lcIj09Yi5zaG9wJiYoYSs9XCJlbmVyZ3k8YnIvPlwiKTtcImZsb3Jpc3RcIj09Yi5zaG9wJiYoYSs9XCJmbG9yaXN0PGJyLz5cIik7XCJmdXJuYWNlXCI9PWIuc2hvcCYmKGErPVwiZnVybmFjZSBzaG9wPGJyLz5cIik7XCJnYXJkZW5fY2VudHJlXCI9PWIuc2hvcCYmKGErPVwiZ2FyZGVuIGNlbnRyZTxici8+XCIpO1wiZ2FzXCI9PWIuc2hvcCYmKGErPVwiZ2FzPGJyLz5cIik7XCJnbGF6aWVyeVwiPT1iLnNob3AmJihhKz1cImdsYXppZXJ5PGJyLz5cIik7XCJoYXJkd2FyZVwiPT1iLnNob3AmJihhKz1cImhhcmR3YXJlIHNob3A8YnIvPlwiKTtcImhvdXNld2FyZVwiPT1iLnNob3AmJihhKz1cImhvdXNld2FyZSBzaG9wPGJyLz5cIik7XCJsb2Nrc21pdGhcIj09Yi5zaG9wJiYoYSs9XCJsb2Nrc21pdGg8YnIvPlwiKTtcInBhaW50XCI9PWIuc2hvcCYmKGErPVwicGFpbnQgc2hvcDxici8+XCIpO1widHJhZGVcIj09Yi5zaG9wJiYoYSs9XCJ0cmFkZTxici8+XCIpO1xuICAgIFwiYW50aXF1ZXNcIj09Yi5zaG9wJiYoYSs9XCJhbnRpcXVlcyBzaG9wPGJyLz5cIik7XCJiZWRcIj09Yi5zaG9wJiYoYSs9XCJiZWQgc2hvcDxici8+XCIpO1wiY2FuZGxlc1wiPT1iLnNob3AmJihhKz1cImNhbmRsZXMgc2hvcDxici8+XCIpO1wiY2FycGV0XCI9PWIuc2hvcCYmKGErPVwiY2FycGV0IHNob3A8YnIvPlwiKTtcImN1cnRhaW5cIj09Yi5zaG9wJiYoYSs9XCJjdXJ0YWluIHNob3A8YnIvPlwiKTtcImZ1cm5pdHVyZVwiPT1iLnNob3AmJihhKz1cImZ1cm5pdHVyZSBzdG9yZTxici8+XCIpO1wiaW50ZXJpb3JfZGVjb3JhdGlvblwiPT1iLnNob3AmJihhKz1cImludGVyaW9yIGRlY29yYXRpb24gY29tcGFueTxici8+XCIpO1wia2l0Y2hlblwiPT1iLnNob3AmJihhKz1cImtpdGNoZW4gc2hvcDxici8+XCIpO1wid2luZG93X2JsaW5kXCI9PWIuc2hvcCYmKGErPVwid2luZG93IGJsaW5kIHNob3A8YnIvPlwiKTtcImNvbXB1dGVyXCI9PWIuc2hvcCYmKGErPVwiY29tcHV0ZXIgc2hvcDxici8+XCIpO1wiZWxlY3Ryb25pY3NcIj09Yi5zaG9wJiYoYSs9XG4gICAgICAgIFwiZWxlY3Ryb25pY3Mgc2hvcDxici8+XCIpO1wiaGlmaVwiPT1iLnNob3AmJihhKz1cImhpZmkgc2hvcDxici8+XCIpO1wibW9iaWxlX3Bob25lXCI9PWIuc2hvcCYmKGErPVwibW9iaWxlIHBob25lIHNob3A8YnIvPlwiKTtcInJhZGlvdGVjaG5pY3NcIj09Yi5zaG9wJiYoYSs9XCJyYWRpb3RlY2huaWNzIHNob3A8YnIvPlwiKTtcInZhY3V1bV9jbGVhbmVyXCI9PWIuc2hvcCYmKGErPVwidmFjdXVtIGNsZWFuZXIgc2hvcDxici8+XCIpO1wiYmljeWNsZVwiPT1iLnNob3AmJihhKz1cImJpY3ljbGUgc2hvcDxici8+XCIpO1wiY2FyXCI9PWIuc2hvcCYmKGErPVwiY2FyIHNob3A8YnIvPlwiKTtcImNhciByZXBhaXJcIj09Yi5zaG9wJiYoYSs9XCJjYXIgcmVwYWlyPGJyLz5cIik7XCJjYXJfcGFydHNcIj09Yi5zaG9wJiYoYSs9XCJjYXIgcGFydHMgc2hvcDxici8+XCIpO2lmKFwiZGl2ZVwiPT1iLnNob3B8fFwic2N1YmFfZGl2aW5nXCI9PWIuc2hvcClhKz1cInNjdWJhIGRpdmluZyBzaG9wPGJyLz5cIjtcImZpc2hpbmdcIj09Yi5zaG9wJiYoYSs9XCJmaXNoaW5nIHNob3A8YnIvPlwiKTtcbiAgICBcImZyZWVfZmx5aW5nXCI9PWIuc2hvcCYmKGErPVwiZnJlZSBmbHlpbmcgc2hvcDxici8+XCIpO1wiaHVudGluZ1wiPT1iLnNob3AmJihhKz1cImh1bnRpbmcgc2hvcDxici8+XCIpO1wibW90b3JjeWNsZVwiPT1iLnNob3AmJihhKz1cIm1vdG9yY3ljbGUgc2hvcDxici8+XCIpO1wib3V0ZG9vclwiPT1iLnNob3AmJihhKz1cIm91dGRvb3Igc2hvcDxici8+XCIpO1wic3BvcnRzXCI9PWIuc2hvcCYmKGErPVwic3BvcnRzIHNob3A8YnIvPlwiKTtcInR5cmVzXCI9PWIuc2hvcCYmKGErPVwidHlyZXM8YnIvPlwiKTtcIndhdGVyX3Nwb3J0c1wiPT1iLnNob3AmJihhKz1cIndhdGVyIHNwb3J0cyBzaG9wPGJyLz5cIik7XCJhcnRcIj09Yi5zaG9wJiYoYSs9XCJhcnQ8YnIvPlwiKTtcImNyYWZ0XCI9PWIuc2hvcCYmKGErPVwiY3JhZnQ8YnIvPlwiKTtcImZyYW1lXCI9PWIuc2hvcCYmKGErPVwiZnJhbWUgc2hvcDxici8+XCIpO1wibXVzaWNcIj09Yi5zaG9wJiYoYSs9XCJtdXNpYyBzaG9wPGJyLz5cIik7XCJtdXNpY19pbnN0cnVtZW50XCI9PWIuc2hvcCYmKGErPVwibXVzaWMgaW5zdHJ1bWVudHMgc2hvcDxici8+XCIpO1xuICAgIFwicGhvdG9cIj09Yi5zaG9wJiYoYSs9XCJwaG90byBzaG9wPGJyLz5cIik7XCJ2aWRlb1wiPT1iLnNob3AmJihhKz1cInZpZGVvPGJyLz5cIik7XCJ2aWRlb19nYW1lc1wiPT1iLnNob3AmJihhKz1cInZpZGVvIGdhbWVzPGJyLz5cIik7XCJhbmltZVwiPT1iLnNob3AmJihhKz1cImFuaW1lPGJyLz5cIik7XCJib29rc1wiPT1iLnNob3AmJihhKz1cImJvb2tzIHNob3A8YnIvPlwiKTtcImdpZnRcIj09Yi5zaG9wJiYoYSs9XCJnaWZ0IHNob3A8YnIvPlwiKTtcIm5ld3NhZ2VudFwiPT1iLnNob3AmJihhKz1cIm5ld3NhZ2VudDxici8+XCIpO1wic3RhdGlvbmVyeVwiPT1iLnNob3AmJihhKz1cInN0YXRpb25lcnk8YnIvPlwiKTtcInRpY2tldFwiPT1iLnNob3AmJihhKz1cInRpY2tldCBzaG9wPGJyLz5cIik7XCJjb3B5c2hvcFwiPT1iLnNob3AmJihhKz1cImNvcHlzaG9wPGJyLz5cIik7XCJmdW5lcmFsX2RpcmVjdG9yc1wiPT1iLnNob3AmJihhKz1cImZ1bmVyYWwgZGlyZWN0b3JzPGJyLz5cIik7XCJsYXVuZHJ5XCI9PWIuc2hvcCYmKGErPVwibGF1bmRyeTxici8+XCIpO1xuICAgIFwiZHJ5X2NsZWFuaW5nXCI9PWIuc2hvcCYmKGErPVwiZHJ5IGNsZWFuaW5nPGJyLz5cIik7XCJtb25leV9sZW5kZXJcIj09Yi5zaG9wJiYoYSs9XCJtb25leSBsZW5kZXI8YnIvPlwiKTtcInBhd25icm9rZXJcIj09Yi5zaG9wJiYoYSs9XCJwYXduYnJva2VyPGJyLz5cIik7XCJwZXRcIj09Yi5zaG9wJiYoYSs9XCJwZXQgc2hvcDxici8+XCIpO1wicHlyb3RlY2huaWNzXCI9PWIuc2hvcCYmKGErPVwicHlyb3RlY2huaWNzIHNob3A8YnIvPlwiKTtcInJlbGlnaW9uXCI9PWIuc2hvcCYmKGErPVwicmVsaWdpb248YnIvPlwiKTtcImJlYXV0eVwiPT1iLnNob3AmJihhKz1cImJlYXV0eTxici8+XCIpO1wic29sYXJpdW1cIj09Yi5zaG9wJiYoYSs9XCJzb2xhcml1bTxici8+XCIpO1widG9iYWNjb1wiPT1iLnNob3AmJihhKz1cInRvYmFjY28gc2hvcDxici8+XCIpO1widG95c1wiPT1iLnNob3AmJihhKz1cInRveXMgc2hvcDxici8+XCIpO1widHJhdmVsX2FnZW5jeVwiPT1iLnNob3AmJihhKz1cInRyYXZlbCBhZ2VuY3k8YnIvPlwiKTtcIm1hcmtldF9oYWxsXCI9PWIuc2hvcCYmXG4gICAgKGErPVwibWFya2V0IGhhbGw8YnIvPlwiKTtcInZhY2FudFwiPT1iLnNob3AmJihhKz1cInZhY2FudDxici8+XCIpO1wid2VhcG9uc1wiPT1iLnNob3AmJihhKz1cIndlYXBvbnMgc2hvcDxici8+XCIpO1wibG90dGVyeVwiPT1iLmdhbWJsaW5nJiYoYSs9XCJsb3R0ZXJ5PGJyLz5cIik7XCJmaXNoXCI9PWIucGV0JiYoYSs9XCJmaXNoa2VlcGluZzxici8+XCIpO1wiYWdyaXVjdWx0dXJhbF9lbmdpbmVzXCI9PWIuY3JhZnQmJihhKz1cImFncml1Y3VsdHVyYWwgZW5naW5lczxici8+XCIpO1wiYmFza2V0X21ha2VyXCI9PWIuY3JhZnQmJihhKz1cImJhc2tldCBtYWtlcjxici8+XCIpO1wiYmVla2VlcGVyXCI9PWIuY3JhZnQmJihhKz1cImJlZWtlZXBlcjxici8+XCIpO1wiYmxhY2tzbWl0aFwiPT1iLmNyYWZ0JiYoYSs9XCJibGFja3NtaXRoPGJyLz5cIik7XCJicmV3ZXJ5XCI9PWIuY3JhZnQmJihhKz1cImJyZXdlcnk8YnIvPlwiKTtcInllc1wiPT1iLm1pY3JvYnJld2VyeSYmKGErPVwibWljcm8tYnJld2VyeTxici8+XCIpO1wiYm9hdGJ1aWxkZXJcIj09Yi5jcmFmdCYmXG4gICAgKGErPVwiYm9hdGJ1aWxkZXI8YnIvPlwiKTtcImJvb2tiaW5kZXJcIj09Yi5jcmFmdCYmKGErPVwiYm9va2JpbmRlcjxici8+XCIpO1wiYnVpbGRlclwiPT1iLmNyYWZ0JiYoYSs9XCJob3VzZWJ1aWxkaW5nPGJyLz5cIik7XCJjYXJwZW50ZXJcIj09Yi5jcmFmdCYmKGErPVwiY2FycGVudGVyLCB3b29kd29ya2VyLCBqb2luZXI8YnIvPlwiKTtcImNhcnBldF9sYXllclwiPT1iLmNyYWZ0JiYoYSs9XCJjYXJwZXQgbGF5ZXI8YnIvPlwiKTtcImNhdGVyZXJcIj09Yi5jcmFmdCYmKGErPVwiY2F0ZXJlcjxici8+XCIpO1wiY2xvY2ttYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJjbG9ja21ha2VyPGJyLz5cIik7XCJjb25mZWN0aW9uZXJ5XCI9PWIuY3JhZnQmJihhKz1cImNvbmZlY3Rpb25lcnk8YnIvPlwiKTtcImRyZXNzbWFrZXJcIj09Yi5jcmFmdCYmKGErPVwiZHJlc3NtYWtlcjxici8+XCIpO1wiZWxlY3RyaWNpYW5cIj09Yi5jcmFmdCYmKGErPVwiZWxlY3RyaWNpYW48YnIvPlwiKTtcImdhcmRlbmVyXCI9PWIuY3JhZnQmJihhKz1cImdhcmRlbmVyLCBsYW5kc2NhcGVyPGJyLz5cIik7XG4gICAgXCJnbGF6aWVyeVwiPT1iLmNyYWZ0JiYoYSs9XCJnbGF6aWVyeTxici8+XCIpO1wiaGFuZGljcmFmdFwiPT1iLmNyYWZ0JiYoYSs9XCJoYW5kaWNyYWZ0PGJyLz5cIik7XCJodmFjXCI9PWIuY3JhZnQmJihhKz1cImhlYXRpbmcsIHZlbnRpbGF0aW9uIGFuZCBhaXItY29uZGl0aW9uaW5nIHRlY2hub2xvZ3kgKEhWQUMpPGJyLz5cIik7XCJpbnN1bGF0aW9uXCI9PWIuY3JhZnQmJihhKz1cInRoZXJtYWwgaW5zdWxhdGlvbjxici8+XCIpO1wiamV3ZWxsZXJcIj09Yi5jcmFmdCYmKGErPVwiamV3ZWxsZXIsIGdvbGQtL3NpbHZlcnNtaXRoczxici8+XCIpO1wia2V5X2N1dHRlclwiPT1iLmNyYWZ0JiYoYSs9XCJrZXkgY3V0dGVyPGJyLz5cIik7XCJsb2Nrc21pdGhcIj09Yi5jcmFmdCYmKGErPVwibG9ja3NtaXRoPGJyLz5cIik7XCJtZXRhbF9jb25zdHJ1Y3Rpb25cIj09Yi5jcmFmdCYmKGErPVwibWV0YWx3b3JrZXI8YnIvPlwiKTtcIm9wdGljaWFuXCI9PWIuY3JhZnQmJihhKz1cIm9wdGljaWFuPGJyLz5cIik7XCJwYWludGVyXCI9PWIuY3JhZnQmJihhKz1cbiAgICAgICAgXCJwYWludGVyPGJyLz5cIik7XCJwYXJxdWV0X2xheWVyXCI9PWIuY3JhZnQmJihhKz1cInBhcnF1ZXQgbGF5ZXI8YnIvPlwiKTtcInBob3RvZ3JhcGhlclwiPT1iLmNyYWZ0JiYoYSs9XCJwaG90b2dyYXBoZXI8YnIvPlwiKTtcInBob3RvZ3JhcGhpY19sYWJvcmF0b3J5XCI9PWIuY3JhZnQmJihhKz1cInBob3RvZ3JhcGhpYyBsYWJvcmF0b3J5PGJyLz5cIik7XCJwbGFzdGVyZXJcIj09Yi5jcmFmdCYmKGErPVwicGxhc3RlcmVyPGJyLz5cIik7XCJwbHVtYmVyXCI9PWIuY3JhZnQmJihhKz1cInBsdW1iZXI8YnIvPlwiKTtcInBvdHRlcnlcIj09Yi5jcmFmdCYmKGErPVwicG90dGVyeTxici8+XCIpO1wicmlnZ2VyXCI9PWIuY3JhZnQmJihhKz1cInNoaXAgcmlnZ2VyPGJyLz5cIik7XCJyb29mZXJcIj09Yi5jcmFmdCYmKGErPVwicm9vZmVyPGJyLz5cIik7XCJzYWRkbGVyXCI9PWIuY3JhZnQmJihhKz1cInNhZGRsZXI8YnIvPlwiKTtcInNhaWxtYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJzYWlsbWFrZXI8YnIvPlwiKTtcInNhd21pbGxcIj09Yi5jcmFmdCYmKGErPVxuICAgICAgICBcInNhd21pbGw8YnIvPlwiKTtcInNjYWZmb2xkZXJcIj09Yi5jcmFmdCYmKGErPVwic2NhZmZvbGRlcjxici8+XCIpO1wic2N1bHB0b3JcIj09Yi5jcmFmdCYmKGErPVwic2N1bHB0b3I8YnIvPlwiKTtcInNob2VtYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJzaG9lbWFrZXI8YnIvPlwiKTtcInN0YW5kX2J1aWxkZXJcIj09Yi5jcmFmdCYmKGErPVwiZXhoaWJpdGlvbiBzdGFuZCBidWlsZGVyPGJyLz5cIik7XCJzdG9uZW1hc29uXCI9PWIuY3JhZnQmJihhKz1cInN0b25lbWFzb248YnIvPlwiKTtcInN1bl9wcm90ZWN0aW9uXCI9PWIuY3JhZnQmJihhKz1cImNvbnN0cnVjdG9yIGZvciBzdW4gcHJvdGVjdGlvbiwgdmVuZXRpYW4gYmxpbmQsIHNodXR0ZXI8YnIvPlwiKTtcInN3ZWVwXCI9PWIuY3JhZnQmJihhKz1cImNoaW1uZXkgc3dlZXA8YnIvPlwiKTtcInRhaWxvclwiPT1iLmNyYWZ0JiYoYSs9XCJ0YWlsb3I8YnIvPlwiKTtcInRpbGVyXCI9PWIuY3JhZnQmJihhKz1cInRpbGVyPGJyLz5cIik7XCJ0aW5zbWl0aFwiPT1iLmNyYWZ0JiYoYSs9XCJ0aW5zbWl0aCwgbWV0YWx3b3JrZXI8YnIvPlwiKTtcbiAgICBcInVwaG9sc3RlcmVyXCI9PWIuY3JhZnQmJihhKz1cInVwaG9sc3RlcmVyPGJyLz5cIik7XCJ3YXRjaG1ha2VyXCI9PWIuY3JhZnQmJihhKz1cIndhdGNobWFrZXI8YnIvPlwiKTtcIndpbmRvd19jb25zdHJ1Y3Rpb25cIj09Yi5jcmFmdCYmKGErPVwid2luZG93IGNvbnN0cnVjdG9yPGJyLz5cIik7XCJtYWNoaW5lc1wiPT1iLnJlbnRhbCYmKGErPVwicmVudGFsIHBhcmsgZm9yIG1hY2hpbmVzPGJyLz5cIik7XCJjYXJfcmVudGFsXCI9PWIuYW1lbml0eSYmKGErPVwiY2FyIHJlbnRhbCBjb21wYW55PGJyLz5cIik7XCJhbGxvdG1lbnRzXCI9PWIubGFuZHVzZSYmKGErPVwiYWxsb3RtZW50IGdhcmRlbjxici8+XCIpO1wiYmFzaW5cIj09Yi5sYW5kdXNlJiYoYSs9XCJob2xkaW5nIHJlc2Vydm9pcjxici8+XCIpO1wiYnJvd25maWVsZFwiPT1iLmxhbmR1c2UmJihhKz1cImJyb3duZmllbGQ8YnIvPlwiKTtcImNvbW1lcmNpYWxcIj09Yi5sYW5kdXNlJiYoYSs9XCJjb21tZXJjaWFsIGFyZWE8YnIvPlwiKTtcImNvbnN0cnVjdGlvblwiPT1iLmxhbmR1c2UmJlxuICAgIChhKz1cImNvbnN0cnVjdGlvbiBhcmVhPGJyLz5cIik7XCJmYXJtbGFuZFwiPT1iLmxhbmR1c2UmJihhKz1cImZhcm1sYW5kPGJyLz5cIik7XCJmYXJteWFyZFwiPT1iLmxhbmR1c2UmJihhKz1cImZhcm15YXJkPGJyLz5cIik7XCJmb3Jlc3RcIj09Yi5sYW5kdXNlJiYoYSs9XCJmb3Jlc3Q8YnIvPlwiKTtcImdhcmFnZXNcIj09Yi5sYW5kdXNlJiYoYSs9XCJnYXJhZ2VzPGJyLz5cIik7XCJncmFzc1wiPT1iLmxhbmR1c2UmJihhKz1cImdyYXNzPGJyLz5cIik7XCJncmVlbmZpZWxkXCI9PWIubGFuZHVzZSYmKGErPVwiZ3JlZW5maWVsZDxici8+XCIpO1wiZ3JlZW5ob3VzZV9ob3J0aWN1bHR1cmVcIj09Yi5sYW5kdXNlJiYoYSs9XCJncmVlbmhvdXNlIGhvcnRpY3VsdHVyZTxici8+XCIpO1wiaW5kdXN0cmlhbFwiPT1iLmxhbmR1c2UmJihhKz1cImluZHVzdHJ5IGFyZWE8YnIvPlwiKTtcImxhbmRmaWxsXCI9PWIubGFuZHVzZSYmKGErPVwibGFuZGZpbGw8YnIvPlwiKTtcIm1lYWRvd1wiPT1iLmxhbmR1c2UmJihhKz1cIm1lYWRvdzxici8+XCIpO1wib3JjaGFyZFwiPT1cbiAgICBiLmxhbmR1c2UmJihhKz1cIm9yY2hhcmQ8YnIvPlwiKTtcInBsYW50X251cnNlcnlcIj09Yi5sYW5kdXNlJiYoYSs9XCJwbGFudCBudXJzZXJ5PGJyLz5cIik7XCJxdWFycnlcIj09Yi5sYW5kdXNlJiYoYSs9XCJxdWFycnk8YnIvPlwiKTtcInJhaWx3YXlcIj09Yi5sYW5kdXNlJiYoYSs9XCJyYWlsd2F5PGJyLz5cIik7XCJyZWNyZWF0aW9uX2dyb3VuZFwiPT1iLmxhbmR1c2UmJihhKz1cInJlY3JlYXRpb24gZ3JvdW5kPGJyLz5cIik7XCJyZXNlcnZvaXJcIj09Yi5sYW5kdXNlJiYoYSs9XCJyZXNlcnZvaXI8YnIvPlwiKTtcInJlc2lkZW50aWFsXCI9PWIubGFuZHVzZSYmKGErPVwicmVzaWRlbnRpYWw8YnIvPlwiKTtcInJldGFpbFwiPT1iLmxhbmR1c2UmJihhKz1cInJldHJhaWw8YnIvPlwiKTtcInNhbHRfcG9uZFwiPT1iLmxhbmR1c2UmJihhKz1cInNhbHQgcG9uZDxici8+XCIpO1widmlsbGFnZV9ncmVlblwiPT1iLmxhbmR1c2UmJihhKz1cInZpbGxhZ2UgZ3JlZW48YnIvPlwiKTtcInZpbmV5YXJkXCI9PWIubGFuZHVzZSYmKGErPVwidmluZXlhcmQ8YnIvPlwiKTtcbiAgICBcInBvbmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJwb25kPGJyLz5cIik7XCJzYWx0X3BvbmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJzYWx0IHBvbmQ8YnIvPlwiKTtcImFuaW1hbF9rZWVwaW5nXCI9PWIubGFuZHVzZSYmKGErPVwiYW5pbWFsIGtlZXBpbmc8YnIvPlwiKTtcInllc1wiPT1iLmVudHJhbmNlJiYoYSs9XCJlbnRyYW5jZTxici8+XCIpO1wibWFpblwiPT1iLmVudHJhbmNlJiYoYSs9XCJtYWluLWVudHJhbmNlPGJyLz5cIik7XCJzZXJ2aWNlXCI9PWIuZW50cmFuY2UmJihhKz1cInJlYXIgZXhpdCBmb3Igc3RhZmZpbmcgYW5kIHN1cHBsaWVyczxici8+XCIpO1wiZXhpdFwiPT1iLmVudHJhbmNlJiYoYSs9XCJleGl0PGJyLz5cIik7XCJlbWVyZ2VuY3lcIj09Yi5lbnRyYW5jZSYmKGErPVwiZW1lcmdlbmN5PGJyLz5cIik7XCJiYXlcIj09Yi5uYXR1cmFsJiYoYSs9XCJiYXk8YnIvPlwiKTtcImJlYWNoXCI9PWIubmF0dXJhbCYmKGErPVwiYmVhY2g8YnIvPlwiKTtcIndvb2RcIj09Yi5uYXR1cmFsJiYoYSs9XCJ3b29kPGJyLz5cIik7XCJnbGFjaWVyXCI9PWIubmF0dXJhbCYmXG4gICAgKGErPVwiZ2xhY2llcjxici8+XCIpO1wiY2F2ZV9lbnRyYW5jZVwiPT1iLm5hdHVyYWwmJihhKz1cImNhdmUgZW50cmFuY2U8YnIvPlwiKTtcInNwcmluZ1wiPT1iLm5hdHVyYWwmJihhKz1cInNwcmluZzxici8+XCIpO1wid2F0ZXJmYWxsXCI9PWIubmF0dXJhbCYmKGErPVwid2F0ZXJmYWxsPGJyLz5cIik7XCJzY3J1YlwiPT1iLm5hdHVyYWwmJihhKz1cInNjcnViPGJyLz5cIik7XCJncmFzc2xhbmRcIj09Yi5uYXR1cmFsJiYoYSs9XCJncmFzc2xhbmQ8YnIvPlwiKTtcIndldGxhbmRcIj09Yi5uYXR1cmFsJiYoYSs9XCJ3ZXRsYW5kPGJyLz5cIik7XCJ0cmVlXCI9PWIubmF0dXJhbCYmKGErPVwidHJlZVwiKTtcInBlYWtcIj09Yi5uYXR1cmFsJiZcInllc1wiPT1iW1wic3VtbWl0OmNyb3NzXCJdJiYoYSs9XCJjcm9zcyBvbiB0aGUgc3VtbWl0IG9mIGEgbW91bnRhaW48YnIvPlwiKTtcInRyZWVfcm93XCI9PWIubmF0dXJhbCYmKGErPVwidHJlZSByb3csIGFsbGV5IG9mIHRyZWVzPGJyLz5cIik7XCJoZWF0aFwiPT1iLm5hdHVyYWwmJihhKz1cImhlYXRoPGJyLz5cIik7XG4gICAgXCJtb29yXCI9PWIubmF0dXJhbCYmKGErPVwibW9vcjxici8+XCIpO1wiZ3Jhc3NsYW5kXCI9PWIubmF0dXJhbCYmKGErPVwiZ3Jhc3NsYW5kPGJyLz5cIik7XCJmZWxsXCI9PWIubmF0dXJhbCYmKGErPVwiZ3Jhc2xhbmQgYWJvdmUgdGhlIHRyZWUgbGFuZDxici8+XCIpO1wiYmFyZV9yb2NrXCI9PWIubmF0dXJhbCYmKGErPVwiYmFyZSByb2NrPGJyLz5cIik7XCJzY3JlZVwiPT1iLm5hdHVyYWwmJihhKz1cInNjcmVlPGJyLz5cIik7XCJ2b2xjYW5vXCI9PWIubmF0dXJhbCYmKGErPVwidm9sY2Fubzxici8+XCIpO1widmFsbGV5XCI9PWIubmF0dXJhbCYmKGErPVwidmFsbGV5PGJyLz5cIik7XCJzdG9uZVwiPT1iLm5hdHVyYWwmJihhKz1cInN0b25lPGJyLz5cIik7XCJzZWFcIj09Yi5uYXR1cmFsJiYoYSs9XCJzZWE8YnIvPlwiKTtcIm5hdGlvbmFsX3BhcmtcIj09Yi5ib3VuZGFyeSYmKGErPVwibmF0aW9uYWwgcGFyazxici8+XCIpO1wicHJvdGVjdGVkX2FyZWFcIj09Yi5ib3VuZGFyeSYmKGErPVwicHJvdGVjdGVkIGFyZWE8YnIvPlwiKTtcInllc1wiPT1iLm1vdW50YWluX3Bhc3MmJlxuICAgIChhKz1cIm1vdW50YWluIHBhc3M8YnIvPlwiKTtcIndhdGVyZmFsbFwiPT1iLndhdGVyd2F5JiYoYSs9XCJ3YXRlcmZhbGw8YnIvPlwiKTtcImNhbmFsXCI9PWIud2F0ZXJ3YXkmJihhKz1cImNhbmFsPGJyLz5cIik7XCJjYW5hbFwiPT1iLndhdGVyJiYoYSs9XCJjYW5hbDxici8+XCIpO1wicml2ZXJcIj09Yi53YXRlcndheSYmKGErPVwicml2ZXI8YnIvPlwiKTtcInJpdmVyXCI9PWIud2F0ZXImJihhKz1cInJpdmVyPGJyLz5cIik7XCJyaXZlcmJhbmtcIj09Yi53YXRlcndheSYmKGErPVwicml2ZXI8YnIvPlwiKTtcImRpdGNoXCI9PWIud2F0ZXJ3YXkmJihhKz1cImRpdGNoPGJyLz5cIik7XCJzdHJlYW1cIj09Yi53YXRlcndheSYmKGErPVwic3RyZWFtPGJyLz5cIik7XCJmZXJyeVwiPT1iLnJvdXRlJiYoYSs9XCJmZXJyeTxici8+XCIpO1widHVybmluZ19wb2ludFwiPT1iLndhdGVyd2F5JiYoYSs9XCJ0dXJuaW5nIHBvaW50PGJyLz5cIik7aWYoXCJsYWtlXCI9PWIud2F0ZXJ8fFwid2F0ZXJcIj09Yi5uYXR1cmFsKWErPVwibGFrZTxici8+XCI7XCJjb3ZlXCI9PWIud2F0ZXImJlxuICAgIChhKz1cImNvdmU8YnIvPlwiKTtcImxhZ29vblwiPT1iLndhdGVyJiYoYSs9XCJsYWdvb248YnIvPlwiKTtcInBvbmRcIj09Yi53YXRlciYmKGErPVwicG9uZDxici8+XCIpO1wicmVzZXJ2b2lyXCI9PWIud2F0ZXImJihhKz1cIndhdGVycmVzZXJ2b2lyPGJyLz5cIik7XCJveGJvd1wiPT1iLndhdGVyJiYoYSs9XCJveGJvdyBsYWtlPGJyLz5cIik7XCJsb2NrXCI9PWIud2F0ZXImJihhKz1cImxvY2sgY2hhbWJlcjxici8+XCIpO1wibW9hdFwiPT1iLndhdGVyJiYoYSs9XCJjYXN0bGUgbW9hdDxici8+XCIpO1wid2FzdGV3YXRlclwiPT1iLndhdGVyJiYoYSs9XCJ3YXN0ZXdhdGVyIHRyZWF0bWVudCBwbGFudDxici8+XCIpO1wiZ3Vlc3RcIj09Yi5tb29yaW5nJiZcInBpZXJcIj09Yi5tYW5fbWFkZXx8XCJ2aXNpdG9yX2JlcnRoXCI9PWJbXCJzZWFtYXJrOnNtYWxsX2NyYWZ0X2ZhY2lsaXR5OmNhdGVnb3J5XCJdP2ErPVwiZ2FzdHJvaW50ZXN0aW5hbDxici8+XCI6XCJwaWVyXCI9PWIubWFuX21hZGUmJihhKz1cInBpZXI8YnIvPlwiKTtcImJvYXR5YXJkXCI9PWIud2F0ZXJ3YXkmJlxuICAgIChhKz1cImJvYXR5YXJkPGJyLz5cIik7XCJtb29yaW5nXCI9PWJbXCJzZWFtYXJrOnR5cGVcIl0mJlwiZG9scGhpblwiPT1iW1wic2VhbWFyazptb29yaW5nOmNhdGVnb3J5XCJdJiYoYSs9XCJkb2xwaGluPGJyLz5cIik7XCJmb290XCI9PWIucm91dGUmJihhKz1cImZvb3RwYXRoPGJyLz5cIik7XCJoaWtpbmdcIj09Yi5yb3V0ZSYmKGErPVwiaGlraW5nIHRyYWlsPGJyLz5cIik7aWYoXCJ5ZXNcIj09Yi5oaWtpbmcmJlwiaW5mb3JtYXRpb25cIj09Yi50b3VyaXNtKWErPVwiZGlyZWN0aW9uIGJvYXJkPGJyLz5cIjtlbHNlIGlmKFwiaW5mb3JtYXRpb25cIj09Yi50b3VyaXNtJiZcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSlpZihiLmluZm9ybWF0aW9uKXN3aXRjaChiLmluZm9ybWF0aW9uKXtjYXNlIFwiYm9hcmRcIjphKz1cImRpcmVjdGlvbiBib2FyZDxici8+XCI7YnJlYWs7Y2FzZSBcIm1hcFwiOmErPVwiZGlyZWN0aW9uIGJvYXJkIHdpdGggYSBtYXA8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvZmZpY2VcIjphKz1cInRvdXJpc3QgaW5mb3JtYXRpb24gb2ZmaWNlPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcInRlcm1pbmFsXCI6YSs9XCJ0b3VyaXN0IGluZm9ybWF0aW9uIHRlcm1pbmFsPGJyLz5cIjticmVhaztjYXNlIFwiYXVkaW9ndWlkZVwiOmErPVwiYXVkaW9ndWlkZTxici8+XCI7YnJlYWs7Y2FzZSBcImd1aWRlcG9zdFwiOmErPVwiZ3VpZGVwb3N0PGJyLz5cIjticmVhaztjYXNlIFwidGFjdGlsZV9tYXBcIjphKz1cInRhY3RpbGUgbWFwPGJyLz5cIjticmVhaztjYXNlIFwidGFjdGlsZV9tb2RlbFwiOmErPVwidGFjdGlsZSBtb2RlbDxici8+XCI7YnJlYWs7Y2FzZSBcInJvdXRlX21hcmtlclwiOmErPVwicm91dGUgbWFya2VyPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiZGlyZWN0aW9uIGJvYXJkPGJyLz5cIn1lbHNlIGErPVwiZGlyZWN0aW9uIGJvYXJkPGJyLz5cIjtcImJpY3ljbGVcIj09Yi5yb3V0ZSYmKGErPVwiY3ljbGUgdHJhY2s8YnIvPlwiKTtcIm10YlwiPT1iLnJvdXRlJiYoYSs9XCJtb3VudGFpbiBiaWtlIHJvdXRlPGJyLz5cIik7XCJob3JzZVwiPT1iLnJvdXRlJiYoYSs9XCJicmlkbGV3YXk8YnIvPlwiKTtcImNvYXN0bGluZVwiPT1cbiAgICBiLm5hdHVyYWwmJihhKz1cImNvYXN0bGluZTxici8+XCIpO1wiY2xpZmZcIj09Yi5uYXR1cmFsJiYoYSs9XCJjbGlmZjxici8+XCIpO1wiZGFtXCI9PWIud2F0ZXJ3YXkmJihhKz1cImRhbTxici8+XCIpO1wid2VpclwiPT1iLndhdGVyd2F5JiYoYSs9XCJ3ZWlyPGJyLz5cIik7XCJsb2NrX2dhdGVcIj09Yi53YXRlcndheSYmKGErPVwibG9jayBnYXRlPGJyLz5cIik7XCJ5ZXNcIj09Yi5sb2NrJiYoYSs9XCJsb2NrPGJyLz5cIik7XCJzbHVpY2VfZ2F0ZVwiPT1iLndhdGVyd2F5JiYoYSs9XCJzbHVpY2UgZ2F0ZTxici8+XCIpO1wicHVtcGluZ19zdGF0aW9uXCI9PWIubWFuX21hZGUmJihhKz1cInB1bXBpbmcgc3RhdGlvbjxici8+XCIpO1wiZ3JveW5lXCI9PWIubWFuX21hZGUmJihhKz1cImdyb3luZTxici8+XCIpO1wiZHlrZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJkeWtlPGJyLz5cIik7XCJsZXZlZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJsZXZlZTxici8+XCIpO1wid2F0ZXJtaWxsXCI9PWIubWFuX21hZGUmJihhKz1cIndhdGVybWlsbDxici8+XCIpO1wiYWlyZmllbGRcIj09XG4gICAgYi5taWxpdGFyeSYmKGErPVwibWlsaXRhcnkgYWlyZmllbGQ8YnIvPlwiKTtcIm5hdmFsX2Jhc2VcIj09Yi5taWxpdGFyeSYmKGErPVwibmF2YWwgYmFzZTxici8+XCIpO1wicmFuZ2VcIj09Yi5taWxpdGFyeSYmKGErPVwibWlsaXRhcnkgcmFuZ2U8YnIvPlwiKTtcIm1pbGl0YXJ5XCI9PWIubGFuZHVzZSYmKGErPVwibWlsaXRhcnkgbGFuZCB1c2U8YnIvPlwiKTtcInRyYWluaW5nX2FyZWFcIj09Yi5taWxpdGFyeSYmKGErPVwibWlsaXRhcnkgdHJhaW5pbmcgYXJlYTxici8+XCIpO1wiZXhjbHVzaW9uX3pvbmVcIj09Yi5taWxpdGFyeSYmKGErPVwibWlsaXRhcnkgZXhjbHVzaW9uIHpvbmU8YnIvPlwiKTtcImRhbmdlcl9hcmVhXCI9PWIubWlsaXRhcnkmJihhKz1cIm1pbGl0YXJ5IGRhbmdlciBhcmVhPGJyLz5cIik7XCJiYXJyYWNrc1wiPT1iLm1pbGl0YXJ5JiYoYSs9XCJiYXJyYWNrczxici8+XCIpO1wibnVjbGVhcl9leHBsb3Npb25fc2l0ZVwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJtaWxpdGFyeSBudWNsZWFyIGV4cGxvc2lvbiBzaXRlPGJyLz5cIik7XG4gICAgXCJ5ZXNcIj09Yi5jb25zdHJ1Y3Rpb24/YSs9XCJjb25zdHJ1Y3Rpb248YnIvPlwiOlwiY29uc3RydWN0aW9uXCI9PWIuaGlnaHdheSYmKGErPVwiY29uc3RydWN0aW9uPGJyLz5cIik7XCJwZXRyb2xldW1fd2VsbFwiPT1iLm1hbl9tYWRlJiYoYSs9XCJwZXRyb2xldW0gd2VsbDxici8+XCIpO1wic3RvcmFnZV90YW5rXCI9PWIubWFuX21hZGUmJihhKz1cInN0b3JhZ2UgdGFuazxici8+XCIpO1wid2FzdGV3YXRlcl9wbGFudFwiPT1iLm1hbl9tYWRlJiYoYSs9XCJ3YXN0ZXdhdGVyIHBsYW50PGJyLz5cIik7XCJzaWxvXCI9PWIubWFuX21hZGUmJihhKz1cInNpbG88YnIvPlwiKTtcIndhdGVyX3Rvd2VyXCI9PWIubWFuX21hZGUmJihhKz1cIndhdGVyIHRvd2VyPGJyLz5cIik7XCJ3aW5kbWlsbFwiPT1iLm1hbl9tYWRlJiYoYSs9XCJ3aW5kbWlsbDxici8+XCIpO1wibW9uaXRvcmluZ19zdGF0aW9uXCI9PWIubWFuX21hZGUmJihhKz1cIm1vbml0b3Jpbmcgc3RhdGlvblwiKTtcImNyYW5lXCI9PWIubWFuX21hZGUmJihhKz1cImNyYW5lXCIpO1wibGlnaHRob3VzZVwiPT1cbiAgICBiLm1hbl9tYWRlJiYoYSs9XCJsaWdodGhvdXNlXCIpO1wiYmVhY29uXCI9PWIubWFuX21hZGUmJihhKz1cImJlYWNvblwiKTtcImJyZWFrd2F0ZXJcIj09Yi5tYW5fbWFkZSYmKGErPVwiYnJlYWt3YXRlclwiKTtcImxhbXBcIj09Yi5tYW5fbWFkZSYmXCJzdHJlZXRfbGFtcFwiPT1iW1wibGFtcDp0eXBlXCJdJiYoYSs9XCJzdHJlZXQgbGFtcDxici8+XCIpO1wibGFudGVyblwiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwic3RyZWV0IGxhbXBcIik7XCJmbG9vZGxpZ2h0XCI9PWIubGlnaHRfc291cmNlJiYoYSs9XCJmbG9vZGxpZ2h0PGJyLz5cIik7XCJzaWduYWxfbGFtcFwiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwic2lnbmFsIGxhbXA8YnIvPlwiKTtcImF2aWF0aW9uXCI9PWIubGlnaHRfc291cmNlJiYoYSs9XCJhdmlhdGlvbjxici8+XCIpO1wid2FybmluZ1wiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwid2FybmluZzxici8+XCIpO2lmKGIubGlnaHRfc291cmNlJiZiW1wibGlnaHQ6bWV0aG9kXCJdKXN3aXRjaChhKz1cIkxpZ2h0IFR5cDogXCIsYltcImxpZ2h0Om1ldGhvZFwiXSl7Y2FzZSBcImdhc1wiOmErPVxuICAgICAgICBcIkdhc1wiO2JyZWFrO2Nhc2UgXCJlbGVjdHJpY1wiOmErPVwiZWxlY3RyaWNcIjticmVhaztjYXNlIFwiaW5jYW5kZXNjZW50XCI6YSs9XCJpbmNhbmRlc2NlbnRcIjticmVhaztjYXNlIFwiaGFsb2dlblwiOmErPVwiaGFsb2dlblwiO2JyZWFrO2Nhc2UgXCJkaXNjaGFyZ2VcIjphKz1cImRpc2NoYXJnZVwiO2JyZWFrO2Nhc2UgXCJtZXRhbC1oYWxpZGVcIjphKz1cIm1ldGFsLWhhbGlkZVwiO2JyZWFrO2Nhc2UgXCJuZW9uXCI6YSs9XCJuZW9uXCI7YnJlYWs7Y2FzZSBcInNvZGl1bVwiOmErPVwiTmF0cml1bWRhbXBmbGFtcGVcIjticmVhaztjYXNlIFwiaGlnaF9wcmVzc3VyZV9zb2RpdW1cIjphKz1cImhpZ2ggcHJlc3N1cmUgc29kaXVtXCI7YnJlYWs7Y2FzZSBcImxvd19wcmVzc3VyZV9zb2RpdW1cIjphKz1cImxvdyBwcmVzc3VyZSBzb2RpdW1cIjticmVhaztjYXNlIFwiZmx1b3Jlc2NlbnRcIjphKz1cIkZsdW9yZXNjZW50XCI7YnJlYWs7Y2FzZSBcIm1lcmN1cnlcIjphKz1cIk1lcmN1cnlcIjticmVhaztjYXNlIFwiTEVEXCI6YSs9XCJMRURcIjticmVhaztjYXNlIFwibGFzZXJcIjphKz1cbiAgICAgICAgXCJMYXNlclwiO2JyZWFrO2Nhc2UgXCJhcmNcIjphKz1cIkFyY1wiO2JyZWFrO2RlZmF1bHQ6YSs9XCJVbmtvd25cIn1cImRyaW5raW5nX3dhdGVyXCI9PWIuYW1lbml0eSYmKGErPVwiZHJpbmtpbmcgd2F0ZXI8YnIvPlwiKTtcInllc1wiPT1iLmRyaW5raW5nX3dhdGVyJiYoYSs9XCJkcmlua2luZyB3YXRlcjxici8+XCIpO1wid29ya3NcIj09Yi5tYW5fbWFkZT9hKz1cImluZHVzdHJpYWwgYnVpbGRpbmc8YnIvPlwiOlwiaW5kdXN0cmlhbFwiPT1iLmJ1aWxkaW5nP2ErPVwiaW5kdXN0cmlhbCBidWlsZGluZzxici8+XCI6XCJpbmR1c3RyaWFsXCI9PWIubGFuZHVzZT9hKz1cImluZHVzdHJpYWwgYXJlYTxici8+XCI6XCJpbmR1c3RyaWFsXCI9PWIuYWJ1dHRlcnM/YSs9XCJpbmR1c3RyaWFsIGFyZWE8YnIvPlwiOlwiY29tbWVyY2lhbFwiPT1iLmFidXR0ZXJzJiYoYSs9XCJjb21tZXJjaWFsPGJyLz5cIik7aWYoYltcImdlbmVyYXRvcjpzb3VyY2VcIl0pc3dpdGNoKGErPVwiaW5zdGFsbGF0aW9uOiBcIixiW1wiZ2VuZXJhdG9yOnNvdXJjZVwiXSl7Y2FzZSBcImJpb21hc3NcIjphKz1cbiAgICAgICAgXCJiaW9tYXNzXCI7YnJlYWs7Y2FzZSBcImJpb2Z1ZWxcIjphKz1cImJpb2Z1ZWxcIjticmVhaztjYXNlIFwiYmlvZ2FzXCI6YSs9XCJiaW9nYXNcIjticmVhaztjYXNlIFwiY29hbFwiOmErPVwiY29hbFwiO2JyZWFrO2Nhc2UgXCJvaWxcIjphKz1cIm9pbFwiO2JyZWFrO2Nhc2UgXCJ3YXN0ZVwiOmErPVwid2FzdGVcIjticmVhaztjYXNlIFwid2luZFwiOmErPVwid2luZFwiO2JyZWFrO2Nhc2UgXCJzb2xhclwiOmErPVwic29sYXJcIjticmVhaztjYXNlIFwiaHlkcm9cIjphKz1cImh5ZHJvXCI7YnJlYWs7Y2FzZSBcInRpZGFsXCI6YSs9XCJ0aWRhbFwiO2JyZWFrO2Nhc2UgXCJ3YXZlXCI6YSs9XCJ3YXZlXCI7YnJlYWs7Y2FzZSBcImdlb3RoZXJtYWxcIjphKz1cImdlb3RoZXJtYWxcIjticmVhaztjYXNlIFwib3Ntb3RpY1wiOmErPVwib3Ntb3RpY1wiO2JyZWFrO2Nhc2UgXCJudWNsZWFyXCI6YSs9XCJudWNsZWFyXCI7YnJlYWs7ZGVmYXVsdDphKz1cInVua25vd248YnIvPlwifVwicGhvdG92b2x0YWljXCI9PWIucG93ZXJfc291cmNlJiYoYSs9XCJwaG90b3ZvbHRhaWNcIik7XCJsaW5lXCI9PVxuICAgIGIucG93ZXImJihhKz1cInBvd2VyIGxpbmU8YnIvPlwiKTtcImNhYmxlXCI9PWIucG93ZXImJihhKz1cImNhYmxlPGJyLz5cIik7XCJjYWJsZV9kaXN0cmlidXRpb25fY2FiaW5ldFwiPT1iLnBvd2VyJiYoYSs9XCJjYWJsZSBkaXN0cmlidXRpb24gY2FiaW5ldDxici8+XCIpO1wicGxhbnRcIj09Yi5wb3dlciYmKGErPVwicGxhbnQ8YnIvPlwiKTtcInN0YXRpb25cIj09Yi5wb3dlciYmKGErPVwic3RhdGlvbjxici8+XCIpO1wic3ViX3N0YXRpb25cIj09Yi5wb3dlciYmKGErPVwic3Vic3RhdGlvbjxici8+XCIpO1wiY29tcGVuc2F0b3JcIj09Yi5wb3dlciYmKGErPVwiY29tcGVuc2F0b3I8YnIvPlwiKTtcImNvbnZlcnRlclwiPT1iLnBvd2VyJiYoYSs9XCJjb252ZXJ0ZXI8YnIvPlwiKTtcImdlbmVyYXRvclwiPT1iLnBvd2VyJiYoYSs9XCJnZW5lcmF0b3I8YnIvPlwiKTtcImhlbGlvc3RhdFwiPT1iLnBvd2VyJiYoYSs9XCJoZWxpb3N0YXQ8YnIvPlwiKTtcImluc3VsYXRvclwiPT1iLnBvd2VyJiYoYSs9XCJpbnN1bGF0b3I8YnIvPlwiKTtcImJ1c2JhclwiPT1cbiAgICBiLmxpbmUmJihhKz1cImJ1c2Jhcjxici8+XCIpO1wiYmF5XCI9PWIubGluZSYmKGErPVwiYmF5PGJyLz5cIik7XCJtaW5vcl9saW5lXCI9PWIucG93ZXImJihhKz1cIm1pbm9yIGxpbmU8YnIvPlwiKTtcInBvbGVcIj09Yi5wb3dlciYmKGErPVwicG9sZTxici8+XCIpO1wicG9ydGFsXCI9PWIucG93ZXImJihhKz1cInBvcnRhbDxici8+XCIpO1wiY2F0ZW5hcnlfbWFzdFwiPT1iLnBvd2VyJiYoYSs9XCJjYXRlbmFyeSBtYXN0PGJyLz5cIik7XCJzdWJzdGF0aW9uXCI9PWIucG93ZXImJihhKz1cInN1YnN0YXRpb248YnIvPlwiKTtcInN3aXRjaFwiPT1iLnBvd2VyJiYoYSs9XCJzd2l0Y2g8YnIvPlwiKTtcInRlcm1pbmFsXCI9PWIucG93ZXImJihhKz1cInRlcm1pbmFsPGJyLz5cIik7XCJ0b3dlclwiPT1iLnBvd2VyJiYoYSs9XCJ0b3dlcjxici8+XCIpO1widHJhbnNmb3JtZXJcIj09Yi5wb3dlciYmKGErPVwidHJhbnNmb3JtZXI8YnIvPlwiKTtpZihiLmJhcnJpZXIpc3dpdGNoKGIuYmFycmllcil7Y2FzZSBcImJvbGxhcmRcIjphKz1cImJvbGxhcmQ8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwiY3ljbGVfYmFycmllclwiOmErPVwiY3ljbGUgYmFycmllcjxici8+XCI7YnJlYWs7Y2FzZSBcImdhdGVcIjphKz1cImdhdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaGFpblwiOmErPVwiY2hhaW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJsaWZ0X2dhdGVcIjphKz1cImxpZnQgZ2F0ZTxici8+XCI7YnJlYWs7Y2FzZSBcIndhbGxcIjphKz1cIndhbGw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b2xsX2Jvb3RoXCI6YSs9XCJ0b2xsIGJvb3RoPGJyLz5cIjticmVhaztjYXNlIFwiZmVuY2VcIjpzd2l0Y2goYi5mZW5jZV90eXBlKXtjYXNlIFwiYmFyYmVkX3dpcmVcIjphKz1cImJhcmJlZCB3aXJlPGJyLz5cIjticmVhaztjYXNlIFwid29vZFwiOmErPVwid29vZDxici8+XCI7YnJlYWs7Y2FzZSBcImNoYWluX2xpbmtcIjphKz1cImNoYWluIGxpbms8YnIvPlwiO2JyZWFrO2Nhc2UgXCJlbGVjdHJpY1wiOmErPVwiZWxlY3RyaWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyYWlsaW5nXCI6YSs9XCJyYWlsaW5nPGJyLz5cIjticmVhaztjYXNlIFwid2lyZVwiOmErPVwid2lyZTxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJtZXRhbFwiOmErPVwibWV0YWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwb2xlXCI6YSs9XCJwb2xlPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiZmVuY2U8YnIvPlwifWJyZWFrO2Nhc2UgXCJibG9ja1wiOmErPVwiYmxvY2s8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkaXRjaFwiOmErPVwiZGl0Y2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJib3JkZXJfY29udHJvbFwiOmErPVwiYm9yZGVyIGNvbnRyb2w8YnIvPlwiO2JyZWFrO2Nhc2UgXCJoZWRnZVwiOmErPVwiaGVkZ2U8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyZXRhaW5pbmdfd2FsbFwiOmErPVwicmV0YWluaW5nIHdhbGw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYXR0bGVfZ3JpZFwiOmErPVwiY2F0dGxlIGdyaWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJob3JzZV9zdGlsZVwiOmErPVwiaG9yc2Ugc3RpbGU8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmtub3duPGJyLz5cIn1cIm5vaXNlX2JhcnJpZXJcIj09Yi53YWxsJiYoYSs9XCJub2lzZSBiYXJyaWVyPGJyLz5cIik7XCJyZXRhaW5pbmdfd2FsbFwiPT1cbiAgICBiLmRlc2lnbmF0aW9uJiYoYSs9XCJub2lzZSBiYXJyaWVyPGJyLz5cIik7XCJub2lzZV9iYXJyaWVyXCI9PWIuZGVzaWduYXRpb24mJihhKz1cIm5vaXNlIGJhcnJpZXI8YnIvPlwiKTtcInN1cnZlaWxsYW5jZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJzdXJ2ZWlsbGFuY2U8YnIvPlwiKTtpZihiLmFlcm93YXkpc3dpdGNoKGErPVwiYWlycG9ydDogXCIsYi5hZXJvd2F5KXtjYXNlIFwiYWVyb2Ryb21lXCI6YSs9XCJhaXJwb3J0XCI7YnJlYWs7Y2FzZSBcImFwcm9uXCI6YSs9XCJhcHJvblwiO2JyZWFrO2Nhc2UgXCJnYXRlXCI6YSs9XCJnYXRlXCI7YnJlYWs7Y2FzZSBcImhlbGlwYWRcIjphKz1cImhlbGlwYWRcIjticmVhaztjYXNlIFwiaGFuZ2FyXCI6YSs9XCJoYW5nYXJcIjticmVhaztjYXNlIFwicnVud2F5XCI6YSs9XCJydW53YXlcIjticmVhaztjYXNlIFwidGF4aXdheVwiOmErPVwidGF4aXdheVwiO2JyZWFrO2Nhc2UgXCJ0ZXJtaW5hbFwiOmErPVwidGVybWluYWxcIjticmVhaztkZWZhdWx0OmErPVwidW5rbm93bjxici8+XCJ9XCJzdG9wXCI9PWIucmFpbHdheSYmXG4gICAgKGErPVwicmFpbHdheSBzdG9wPGJyLz5cIik7XCJjcm9zc2luZ1wiPT1iLnJhaWx3YXkmJihhKz1cImNyb3NzaW5nPGJyLz5cIik7XCJsZXZlbF9jcm9zc2luZ1wiPT1iLnJhaWx3YXkmJihhKz1cImx2ZWwgY3Jvc3Npbmc8YnIvPlwiKTtcInN0YXRpb25cIj09Yi5yYWlsd2F5JiYoYSs9XCJzdGF0aW9uPGJyLz5cIik7XCJidXNfc3RhdGlvblwiPT1iLmFtZW5pdHkmJihhKz1cImJ1cyBzdGF0aW9uPGJyLz5cIik7XCJidXNfc3RhdGlvblwiPT0hYi5hbWVuaXR5JiYoXCJzdGF0aW9uXCI9PWIucHVibGljX3RyYW5zcG9ydCYmXCJ5ZXNcIj09Yi5idXMpJiYoYSs9XCJidXMgc3RhdGlvbjxici8+XCIpO1wicmFpbFwiPT1iLnJhaWx3YXkmJihhKz1cInJhaWx3YXk8YnIvPlwiLFwiY29udGFjdF9saW5lXCI9PWIuZWxlY3RyaWZpZWQmJihhKz1cIm92ZXJoZWFkIGNvbnRhY3QgbGluZTxici8+XCIpKTtcInRyYW1cIj09Yi5yYWlsd2F5JiYoYSs9XCJ0cmFtPGJyLz5cIik7aWYoXCJzbGlwd2F5XCI9PWJbXCJzZWFtYXJrOnNtYWxsX2NyYWZ0X2ZhY2lsaXR5OmNhdGVnb3J5XCJdfHxcbiAgICAgICAgXCJzbGlwd2F5XCI9PWIuaGFyYm91cnx8XCJzbGlwd2F5XCI9PWIubGVpc3VyZSlhKz1cInNsaXB3YXk8YnIvPlwiO2lmKFwiaGFyYm91clwiPT1iW1wic2VhbWFyazp0eXBlXCJdKWlmKGJbXCJzZWFtYXJrOmhhcmJvdXI6Y2F0ZWdvcnlcIl0pc3dpdGNoKGJbXCJzZWFtYXJrOmhhcmJvdXI6Y2F0ZWdvcnlcIl0pe2Nhc2UgXCJmZXJyeVwiOmErPVwiZmVycnk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb250YWluZXJcIjphKz1cImNvbnRhaW5lcjxici8+XCI7YnJlYWs7Y2FzZSBcIm1hcmluYVwiOlwibWFyaW5hXCIhPWIubGVpc3VyZSYmKGErPVwibWFyaW5hPGJyLz5cIik7YnJlYWs7Y2FzZSBcIm5hdmVsX2Jhc2VcIjphKz1cIm5hdmVsIGJhc2U8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0YW5rZXJcIjphKz1cInRhbmtlcjxici8+XCI7YnJlYWs7Y2FzZSBcInBhc3NlbmdlclwiOmErPVwicGFzc2VuZ2VyPGJyLz5cIjticmVhaztjYXNlIFwiYnVsa1wiOmErPVwiYnVsazxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cImhhYm91cjxici8+XCJ9ZWxzZSBhKz1cImhhYm91cjxici8+XCI7XG4gICAgXCJtYXJpbmFcIj09Yi5sZWlzdXJlJiYoYSs9XCJtYXJpbmE8YnIvPlwiKTtcIndyZWNrXCI9PWIuaGlzdG9yaWMmJihhKz1cIndyZWNrPGJyLz5cIik7XCJhbmltYWxfc2hlbHRlclwiPT1iLmFtZW5pdHkmJihhKz1cImFuaW1hbCBzaGVsdGVyPGJyLz5cIik7XCJzaGVsdGVyXCI9PWIuYW5pbWFsJiYoYSs9XCJzaGVsdGVyPGJyLz5cIik7XCJob3JzZV93YWxrZXJcIj09Yi5hbmltYWwmJihhKz1cImhvcnNlIHdhbGtlcjxici8+XCIpO1wieWVzXCI9PWIuYW5pbWFsX3NoZWx0ZXImJihhKz1cImFuaW1hbCBzaGVsdGVyPGJyLz5cIik7XCJkb2dcIj09Yi5hbmltYWxfc2hlbHRlciYmKGErPVwiYW5pbWFsIHNoZWx0ZXI8YnIvPlwiKTtcImNhdFwiPT1iLmFuaW1hbF9zaGVsdGVyJiYoYSs9XCJhbmltYWwgc2hlbHRlcjxici8+XCIpO1wiYW5pbWFsX2JvYXJkaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiYW5pbWFsIGJvYXJkaW5nPGJyLz5cIik7XCJ5ZXNcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cImFuaW1hbCBib2FyZGluZzxici8+XCIpO1wiZG9nXCI9PVxuICAgIGIuYW5pbWFsX2JvYXJkaW5nJiYoYSs9XCJhbmltYWwgYm9hcmRpbmc8YnIvPlwiKTtcImhvcnNlXCI9PWIuYW5pbWFsX2JvYXJkaW5nJiYoYSs9XCJhbmltYWwgYm9hcmRpbmc8YnIvPlwiKTtcImNhdFwiPT1iLmFuaW1hbF9ib2FyZGluZyYmKGErPVwiYW5pbWFsIGJvYXJkaW5nPGJyLz5cIik7XCJkb2c7Y2F0XCI9PWIuYW5pbWFsX2JvYXJkaW5nJiYoYSs9XCJhbmltYWwgYm9hcmRpbmc8YnIvPlwiKTtcImNhdDtkb2dcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cImFuaW1hbCBib2FyZGluZzxici8+XCIpO2lmKFwic2Nob29sXCI9PWIuYW5pbWFsfHxcInNwb3J0XCI9PWIuYW5pbWFsfHxcImFuaW1hbF90cmFpbmluZ1wiPT1iLmFtZW5pdHkpYSs9XCJhbmltYWwgdHJhaW5pbmc8YnIvPlwiO1wic3dpbW1pbmdcIj09Yi5hbmltYWwmJihhKz1cInN3aW1taW5nIGZvciBkb2dzPGJyLz5cIik7aWYoXCJmZWVkaW5nX3BsYWNlXCI9PWIuYW1lbml0eXx8XCJhbmltYWxfZmVlZGluZ1wiPT1iLm1hbl9tYWRlfHxcImFuaW1hbF9mZWVkaW5nXCI9PVxuICAgICAgICBiLmFtZW5pdHkpYSs9XCJhbmltYWwgZmVlZGluZzxici8+XCI7aWYoXCJ3aWxkbGlmZV9mZWVkaW5nXCI9PWIuYW1lbml0eXx8XCJkZWVyX2ZlZWRpbmdcIj09Yi5hbWVuaXR5fHxcImdhbWVfZmVlZGluZ1wiPT1iLmFtZW5pdHkpYSs9XCJ3aWxkbGlmZSBmZWVkaW5nPGJyLz5cIjtpZihcImNyYXRjaFwiPT1iLmFtZW5pdHl8fFwiY3JhdGNoXCI9PWIubWFuX21hZGV8fFwiZmVlZGluZ19yYWNrXCI9PWIuYW1lbml0eSlhKz1cImZlZWRpbmcgcmFjazxici8+XCI7XCJtYW5nZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJtYW5nZXI8YnIvPlwiKTtcImJpcmRob3VzZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJiaXJkaG91c2U8YnIvPlwiKTtcInN0b3JrXCI9PWIuYmlyZHNfbmVzdCYmKGErPVwic3RvcmNrPGJyLz5cIik7XCJuZXN0X2JveFwiPT1iLmFtZW5pdHkmJihhKz1cIm5lc3QgYm94PGJyLz5cIik7XCJ3ZWxsbmVzc1wiPT1iLmFuaW1hbCYmKGErPVwiZG9nIHBhcmxvdXI8YnIvPlwiKTtcImNlbWV0ZXJ5XCI9PWIuYW5pbWFsJiYoYSs9XCJzbWFsbCBhbmltYWwgY2VtZXRlcnk8YnIvPlwiKTtcbiAgICBpZihcInN0YWJsZVwiPT1iLmJ1aWxkaW5nfHxcInN0YWJsZVwiPT1iW1wiYnVpbGRpbmc6dXNlXCJdKWErPVwic3RhYmxlPGJyLz5cIjtcImNvd3NoZWRcIj09Yi5idWlsZGluZyYmKGErPVwiY293c2hlZDxici8+XCIpO1wic3R5XCI9PWIuYnVpbGRpbmcmJihhKz1cInN0eTxici8+XCIpO1wiYmFyblwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJiYXJuPGJyLz5cIik7XCJmYXJtX2F1eGlsaWFyeVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJmYXJtIGF1eGlsaWFyeTxici8+XCIpO2lmKGJbXCJyaXZlcjp3YXRlcndheV9kaXN0YW5jZVwiXXx8XCJtaWxlc3RvbmVcIj09Yi53YXRlcndheSlhKz1cIm1pbGVzdG9uZSBvZiB3YXRlcndheSBkaXN0YW5jZTxici8+XCI7XCJtaWxlc3RvbmVcIj09Yi5oaWdod2F5JiYoYSs9XCJtaWxlc3RvbmU8YnIvPlwiKTtcIm1hcmtldFwiPT1iW1wieG1hczpmZWF0dXJlXCJdJiYoYSs9XCJDaHJpc3RtYXMgZmFpcjxici8+XCIpO1widHJlZVwiPT1iW1wieG1hczpmZWF0dXJlXCJdJiYoYSs9XCJzYWxlIG9mIENocmlzbWFzIHRyZWVzPGJyLz5cIik7XG4gICAgXCJldmVudFwiPT1iW1wieG1hczpmZWF0dXJlXCJdJiYoYSs9XCJDaHJpc21hcyBldmVudDxici8+XCIpO1wicHlyYW1pZFwiPT1iW1wieG1hczpmZWF0dXJlXCJdJiYoYSs9XCJDaHJpc21hcyBweXJhbWlkPGJyLz5cIik7cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfaGVhZGVyX2ZlYXR1cmV0eXBlXCI+JythK1wiPGJyLz4gPC9kaXY+XCJ9XG5leHBvcnQgdmFyIGZuQ29udGVudD1mdW5jdGlvbihiKXt2YXIgYTthPVwiXCIrZm5Db250ZW50R2VuZXJhbEluZm9ybWF0aW9ucyhiKTthKz1mbkNvbnRlbnRIZWFsdGhjYXJlKGIpO2ErPWZuQ29udGVudEFlcm9kcm9tZShiKTthKz1mbkNvbnRlbnRDdWlzaW5lKGIpO2ErPWZuQ29udGVudFNoaXBwaW5nKGIpO2ErPWZuQ29udGVudEh5ZHJhbnRzKGIpO2ErPWZuQ29udGVudFNwb3J0cyhiKTthKz1mbkNvbnRlbnRTdHJlZXRzVHJhZmZpYyhiKTthKz1mbkNvbnRlbnRJbmZvcm1hdGlvbkNpdHkoYik7YSs9Zm5Db250ZW50RW1lcmdlbmN5KGIpO2ErPWZuQ29udGVudFN0b3JhZ2UoYik7YSs9Zm5Db250ZW50QW1lbml0eShiKTthKz1mbkNvbnRlbnRUb3VyaXNtKGIpO2ErPWZuQ29udGVudFJvdXRlKGIpO2ErPWZuQ29udGVudFBldHJvbChiKTthKz1mbkNvbnRlbnRCYXJyaWVycyhiKTthKz1mbkNvbnRlbnRMYW5kdXNlKGIpO2ErPWZuQ29udGVudE5hdHVyYWwoYik7YSs9Zm5LbG9zdGVyQWRkaXRpb25hbChiKTtcbiAgICAgICAgYSs9Zm5TaWNoZXJoZWl0QWRkaXRpb25hbChiKTthKz1mbkFkZGl0aW9uYWxCdWlsZGluZ0luZm9zKGIpO2ErPWZuS3JhZnR3ZXJrSW5mbyhiKTthKz1mbk1lc3NzdGF0aW9uKGIpO2ErPWZuV2VydHN0b2ZmaW5mbyhiKTsoYSs9Zm5Db250ZW50UHJvdGVjdGVkQXJlYShiKSkmJihhPVwiPGJyLz5cIithKTtyZXR1cm4nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF9jb250ZW50XCI+JythK1wiPC9kaXY+XCJ9LGZuQ29udGVudEFlcm9kcm9tZT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2IuYWVyb2Ryb21lJiYoXCJpbnRlcm5hdGlvbmFsXCI9PWIuYWVyb2Ryb21lJiYoYSs9XCJ0eXBlIG9mIGFpcnBvcnQ6IGludGVybmF0aW9uYWw8YnIvPlwiKSxcInJlZ2lvbmFsXCI9PWIuYWVyb2Ryb21lJiYoYSs9XCJ0eXBlIG9mIGFpcnBvcnQ6IHJlZ2lvbmFsPGJyLz5cIiksXCJnbGlkaW5nXCI9PWIuYWVyb2Ryb21lJiYoYSs9XCJ0eXBlIG9mIGFpcnBvcnQ6IGdsaWRpbmc8YnIvPlwiKSxcInByaXZhdGVcIj09Yi5hZXJvZHJvbWUmJihhKz1cbiAgICAgICAgXCJ0eXBlIG9mIGFpcnBvcnQ6IHByaXZhdGU8YnIvPlwiKSk7Yi5pYXRhJiYoYSs9XCJJQVRBLUNvZGU6IFwiK2IuaWF0YStcIjxici8+XCIpO2IuaWNhbyYmKGErPVwiSUNBTy1Db2RlOiBcIitiLmljYW8rXCI8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50TmF0dXJhbD1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKGIuZm9yZXN0fHxiLndvb2Qpe2lmKFwiYnJvYWRsZWF2ZWRcIj09Yi5sZWFmX3R5cGV8fFwiZGVjaWR1b3VzXCI9PWIud29vZClhKz1cImJyb2FkbGVhdmVkPGJyLz5cIjtpZihcIm5lZWRsZWxlYXZlZFwiPT1iLmxlYWZfdHlwZXx8XCJjb25pZmVyb3VzXCI9PWIud29vZClhKz1cIm5lZWRsZWxlYXZlZDxici8+XCI7aWYoXCJtaXhlZFwiPT1iLmxlYWZfdHlwZXx8XCJtaXhlZFwiPT1iLndvb2QpYSs9XCJtaXhlZDxici8+XCI7XCJsZWFmbGVzc1wiPT1iLmxlYWZfdHlwZSYmKGErPVwibGVhZmxlc3M8YnIvPlwiKTtcImV2ZXJncmVlblwiPT1iLndvb2QmJihhKz1cImV2ZXJncmVlbjxici8+XCIpO1wicGFsbVwiPT1iLndvb2QmJihhKz1cbiAgICAgICAgXCJwYWxtPGJyLz5cIik7XCJuaXBhX3BhbG1cIj09Yi53b29kJiYoYSs9XCJuaXBhIHBhbG08YnIvPlwiKTtcImV1Y2FseXB0XCI9PWIud29vZCYmKGErPVwiZXVjYWx5cHQ8YnIvPlwiKTtpZihcImZpbGFvXCI9PWIud29vZHx8XCJjYXN1YXJpbmFcIj09Yi53b29kKWErPVwiY2FzdWFyaW5hPGJyLz5cIn1pZihcInRyZWVcIj09Yi5uYXR1cmFsJiYoIWJbXCJnZW51czpkZVwiXSYmIWJbXCJzcGVjaWVzOmRlXCJdJiZiLmxlYWZfdHlwZSYmKGE9XCJicm9hZGxlYXZlZFwiPT1iLmxlYWZfdHlwZXx8XCJkZWNpZHVvdXNcIj09Yi5sZWFmX3R5cGV8fFwiYnJvYWRsZWFmZWRcIj09Yi5sZWFmX3R5cGU/YStcImJyb2FkLWxlYXZlZDxici8+XCI6YStcImNvbmlmZXI8YnIvPlwiKSxiLmdlbnVzJiYoYSs9Yi5nZW51cytcIjxici8+XCIpLGJbXCJnZW51czpkZVwiXSYmKGErPWJbXCJnZW51czpkZVwiXStcIjxici8+XCIpLGIuc3BlY2llcyYmKGErPWIuc3BlY2llcytcIjxici8+XCIpLGJbXCJzcGVjaWVzOmRlXCJdJiYoYSs9YltcInNwZWNpZXM6ZGVcIl0rXCI8YnIvPlwiKSxcbiAgICBcImxhbmRtYXJrXCI9PWIuZGVub3RhdGlvbiYmKGErPVwibGFuZG1hcms8YnIvPlwiKSxcIm5hdHVyYWxfbW9udW1lbnRcIj09Yi5kZW5vdGF0aW9ufHxcInllc1wiPT1iLm1vbnVtZW50KSlhKz1cIm5hdHVyYWwgbW9udW1lbnQ8YnIvPlwiO1wibWFuZ2VyXCI9PWJbXCJmZWVkaW5nOnR5cGVcIl0mJihhKz1cIm1hbmdlcjpyYWNrIGZvciBmb2RkZXI8YnIvPlwiKTtcImF1dG9tYXRlZFwiPT1iW1wiZmVlZGluZzp0eXBlXCJdJiYoYSs9XCJhdXRvbWF0ZWQ8YnIvPlwiKTtpZihiW1wiZmVlZGluZzpmb3JcIl0pc3dpdGNoKGJbXCJmZWVkaW5nOmZvclwiXSl7Y2FzZSBcInNoZWVwXCI6YSs9XCJhbmltYWw6IHNoZWVwPGJyLz5cIjticmVhaztjYXNlIFwiaG9yc2VcIjphKz1cImFuaW1hbDogaG9yc2U8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb3dcIjphKz1cImFuaW1hbDogY293PGJyLz5cIjticmVhaztjYXNlIFwicmFiYml0XCI6YSs9XCJhbmltYWw6IHJhYmJpdDxici8+XCI7YnJlYWs7Y2FzZSBcImJ1bm55XCI6YSs9XCJhbmltYWw6IGJ1bm55PGJyLz5cIjticmVhaztcbiAgICAgICAgY2FzZSBcImNhdFwiOmErPVwiYW5pbWFsOiBjYXQgPC9icj5cIjticmVhaztjYXNlIFwic3dhblwiOmErPVwiYW5pbWFsOiBzd2FuIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImd1aW5lYSBwaWdcIjphKz1cImFuaW1hbDogZ3VpbmVhIHBpZyA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJkb25rZXlcIjphKz1cImFuaW1hbDogZG9ua2V5IDwvYnI+XCI7YnJlYWs7Y2FzZSBcInNxdWlycmVsXCI6YSs9XCJhbmltYWw6IHNxdWlycmVsIDwvYnI+XCI7YnJlYWs7Y2FzZSBcInBpZ1wiOmErPVwiYW5pbWFsOiBwaWcgPC9icj5cIjticmVhaztjYXNlIFwiZGVlclwiOmErPVwiYW5pbWFsOiBkZWVyIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImd1aW5lYSBwaWdcIjphKz1cImFuaW1hbDogZ3VpbmVhIHBpZyA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJtb25rZXlcIjphKz1cImFuaW1hbDogbW9ua2V5IDwvYnI+XCI7YnJlYWs7Y2FzZSBcImNhbWVsXCI6YSs9XCJhbmltYWw6IGNhbWVsIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImdvYXRcIjphKz1cImFuaW1hbDogZ29hdCA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJoYW1zdGVyXCI6YSs9XG4gICAgICAgICAgICBcImFuaW1hbDogaGFtc3RlciA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJhbHBhY2FcIjphKz1cImFuaW1hbDogYWxwYWNhIDwvYnI+XCI7YnJlYWs7ZGVmYXVsdDphKz1cImFuaW1hbDogdW5rbm93bjxici8+XCJ9aWYoYltcImZlZWRpbmc6Zm9kZGVyXCJdKXN3aXRjaChiW1wiZmVlZGluZzpmb2RkZXJcIl0pe2Nhc2UgXCJoYXlcIjphKz1cImZlZWQgd2l0aDogaGF5PC9icj5cIjticmVhaztjYXNlIFwiZ3JhaW5cIjphKz1cImZlZWQgd2l0aDogZ3JhaW48L2JyPlwiO2JyZWFrO2Nhc2UgXCJjb3JuXCI6YSs9XCJmZWVkIHdpdGg6IGNvcm48Lypicj5cIjticmVhaztkZWZhdWx0OmErPVwiZmVlZCB3aXRoOiB1bmtub3duPC9icj5cIn1cInZvbGNhbm9cIj09Yi5uYXR1cmFsJiZcImFjdGl2ZVwiPT1iLnN0YXR1cyYmKGErPVwiYWN0aXZlIHZvbGNhbm88YnIvPlwiKTtcInZvbGNhbm9cIj09Yi5uYXR1cmFsJiZcImRvcm1hbnRcIj09Yi5zdGF0dXMmJihhKz1cImRvcm1hbnQgdm9sY2Fubzxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwiZXh0aW5jdFwiPT1cbiAgICBiLnN0YXR1cyYmKGErPVwiZXh0aW5jdCB2b2xjYW5vPGJyLz5cIik7XCJ2b2xjYW5vXCI9PWIubmF0dXJhbCYmXCJzdHJhdG92b2xjYW5vXCI9PWIudHlwZSYmKGErPVwidHlwZSBvZiB2b2xjYW5pc206c3RyYXRvdm9sY2Fubzxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwic2hpZWxkXCI9PWIudHlwZSYmKGErPVwidHlwZSBvZiB2b2xjYW5pc206c2hpZWxkPGJyLz5cIik7XCJ2b2xjYW5vXCI9PWIubmF0dXJhbCYmXCJzY29yaWFcIj09Yi50eXBlJiYoYSs9XCJ0eXBlIG9mIHZvbGNhbmlzbTpzY29yaWE8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50UHJvdGVjdGVkQXJlYT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiLGM9XCJcIjtcInByb3RlY3RlZF9hcmVhXCI9PWIuYm91bmRhcnkmJihiLnByb3RlY3RfY2xhc3MmJihjPWIucHJvdGVjdF9jbGFzcyksYi5wcm90ZWN0X2lkJiYoYz1iLnByb3RlY3RfaWQpLFwiMVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBTdHJpY3QgTmF0dXJlIFJlc2VydmUsIFdpbGRlcm5lc3MgQXJlYTxici8+XCIpLFxuICAgIFwiMlwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBOYXRpb25hbCBQYXJrPGJyLz5cIiksXCIzXCI9PWMmJihhPVwiZGVzY3JpcHRpb246IE5hdHVyYWwgTW9udW1lbnQgb3IgRmVhdHVyZTxici8+XCIpLFwiNFwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBIYWJpdGF0L1NwZWNpZXMgTWFuYWdlbWVudCBBcmVhPGJyLz5cIiksXCI1XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IFByb3RlY3RlZCBMYW5kc2NhcGUvIFNlYXNjYXBlPGJyLz5cIiksXCI2XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IFByb3RlY3RlZCBhcmVhIHdpdGggc3VzdGFpbmFibGUgdXNlIG9mIG5hdHVyYWwgcmVzb3VyY2VzPGJyLz5cIiksXCI3XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IG5hdHVyZS1mZWF0dXJlIGFyZWE8YnIvPlwiKSxcIjk3XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IHByb3RlY3RlZCBieSBjb250aW5lbnRhbCBhZ3JlZW1lbnRzPGJyLz5cIiksXCI5OFwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBwcm90ZWN0ZWQgYnkgaW50ZXJzdGF0ZS0gb3IgaW50ZXJuYXRpb25hbCBjb252ZW50aW9uczxici8+XCIpLFxuICAgIFwiOTlcIj09YyYmKGE9XCJvdGhlciBjb250aW5lbnRhbCBvciBpbnRlcm5hdGlvbmFsIG5hdGlvbmFsIHByb3RlY3RlZCBhcmVhcyA8YnIvPlwiKSxcIjIxXCI9PWMmJihhPVwiZGVzY3JpcHRpb246IENvbW11bml0eSBsaWZlOiByZWxpZ2lvdXMsIHNhY3JlZCBhcmVhcywgYXNzb2NpYXRpdmUgbG9jYXRpb25zLCByZWNyZWF0aW9uPGJyLz5cIiksXCIyMlwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBDdWx0dXJhbCBhc3NldHMgKGN1bHR1cmFsIGFzc2V0cyBhbmQgLSBlZmZvcnRzLCBkaXN0cmljdHMgaGlzdG9yaWNhbCBoZXJpdGFnZSwgbW9udW1lbnQgY29uc2VydmF0aW9uKTxici8+XCIpLFwiMjNcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogUHJvdGVjdGlvbiBpbiBmYXZvciBvZiBlY29ub21pY3M8YnIvPlwiKSxcIjI0XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IFBvbGl0aWNhbCBwcm90ZWN0aW9uPGJyLz5cIiksXCIyNVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBNaWxpdGFyeSBhcmVhcyAobWlsaXRhcnkgcmVmdWdlcywgdGVzdCBhcmVhKTxici8+XCIpLFxuICAgIFwiMjZcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogSGlzdG9yaWM6IGZvciBjb2xvbmlhbC1zdHVmZiBhbmQgcHJvdGVjdG9yYXRlcy48YnIvPlwiKSxcIjI5XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IG90aGVyIHNvY2lhbCBwcm90ZWN0ZWQgYXJlYXM8YnIvPlwiKSxcIjExXCI9PWMmJihhPVwiZGVzY3JpcHRpb246IHNvaWw6IGNyb3AgeWllbGQsIGVyb3Npb24gcHJvdGVjdGlvbiwgLi4uPGJyLz5cIiksXCIxMlwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiB3YXRlcjogd2F0ZXIgcHJvdGVjdGlvbiBhcmVhLCBmcmVzaCB3YXRlciwgZHJpbmtpbmcgd2F0ZXIsIHNwcmluZ3MsIC4uLjxici8+XCIpLFwiMTNcIj09YyYmKGE9J2Rlc2NyaXB0aW9uOiBjbGltYXRlIGFuZCAtYWlyOiBnYXNwZXIgc3VwcGx5L2NvbGQgYWlyLCAuLi5mb3IgZW1pc3Npb24tLCBpbW1pc3Npb24gY29udHJvbCBpbiBPU00gZXhpc3RlbnQsIHNlZSBcIkxvdyBFbWlzc2lvbiBab25lXCIgKExFWik8YnIvPicpLFwiMTRcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogc3BlY2llczogbm8gZmlzaGluZywgcHJvdGVjdGVkIGZvciBmaXNoZXJ5LCBwcm90ZWN0ZWQgZm9yIGh1bnRpbmcsIHBsYW50cywgLi4uPGJyLz5cIiksXG4gICAgXCIxNVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBsb2NhdGlvbiBjb25kaXRpb246IGZsb29kd2F0ZXIgcmV0ZW50aW9uIGFyZWEsIHByb3RlY3Rpb24gZm9yZXN0LCBncmF6aW5nIGxhbmQsIC4uLjxici8+XCIpLFwiMTZcIj09YyYmKGE9J2Rlc2NyaXB0aW9uOiBsb25ndGltZSBoYXphcmQgYXJlYTogY29udGFtaW5hdGlvbiwgZWFydGgtbW92aW5nIGFyZWEsIFwicHJvYmxlbSBzaXRlc1wiIC4uLjxici8+JyksXCIxOVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBvdGhlciBuYXRpb25hbCByZXNvdXJjZXMgcHJvdGVjdGVkIGFyZWFzPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRMYW5kdXNlPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJxdWFycnlcIj09Yi5sYW5kdXNlJiZiLnJlc291cmNlJiYoYSs9XCJSZXNvdXJjZTogXCIrYi5yZXNvdXJjZStcIjxici8+XCIpO1wib3Blbl9zdGFibGVcIj09YltcImFuaW1hbF9rZWVwaW5nOnR5cGVcIl0mJihhKz1cIm9wZW4gc3RhYmxlPGJyLz5cIik7XCJmaWVsZF9zaGVsdGVyXCI9PVxuICAgIGJbXCJhbmltYWxfa2VlcGluZzp0eXBlXCJdJiYoYSs9XCJmaWVsZCBzaGVsdGVyPGJyLz5cIik7XCJwYWRkb2NrXCI9PWJbXCJhbmltYWxfa2VlcGluZzp0eXBlXCJdJiYoYSs9XCJwYWRkb2NrPGJyLz5cIik7Yi5hbmltYWxfa2VlcGluZyYmKGErPVwiYW5pbWFsczogaG9yc2VzPGJyLz5cIik7cmV0dXJuIGF9LGZuTWVzc3N0YXRpb249ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtcInllc1wiPT1iW1wibW9uaXRvcmluZzp3YXRlcl9sZXZlbFwiXSYmKGErPVwid2F0ZXIgbGV2ZWw8YnIvPlwiKTtcInllc1wiPT1iW1wibW9uaXRvcmluZzpzZWlzbWljX2FjdGl2aXR5XCJdJiYoYSs9XCJzZWlzbWljIGFjdGl2aXR5PGJyLz5cIik7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6dGlkZV9nYXVnZVwiXSYmKGErPVwidGlkZSBnYXVnZTxici8+XCIpO1wieWVzXCI9PWJbXCJtb25pdG9yaW5nOndlYXRoZXJcIl0mJihhKz1cIndlYXRoZXI8YnIvPlwiKTtcInllc1wiPT1iW1wibW9uaXRvcmluZzphaXJfcXVhbGl0eVwiXSYmKGErPVwiYWlyIHF1YWxpdHk8YnIvPlwiKTtyZXR1cm4gYX0sXG4gICAgZm5Db250ZW50Um91dGU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtiLnJvdXRlJiYoXCJ5ZXNcIj09Yi5yb3VuZHRyaXAmJihhKz1cInJvdW5kdHJpcDxici8+XCIpLGIubGVuZ3RoJiYoYSs9XCJsZW5ndGg6IFwiK2IubGVuZ3RoK1wiPGJyLz5cIiksYi5kaXN0YW5jZSYmKGErPVwiZGlzdGFuY2U6IFwiK2IuZGlzdGFuY2UrXCI8YnIvPlwiKSxiLnN5bWJvbCYmKGErPVwic3ltYm9sOiBcIitiLnN5bWJvbCtcIjxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50UGV0cm9sPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJmdWVsXCI9PWIuYW1lbml0eSYmKFwieWVzXCI9PWJbXCJmdWVsOmJpb2RpZXNlbFwiXSYmKGErPVwiYmlvZGllc2VsPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6ZTg1XCJdJiYoYSs9XCJlODU8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDplMTBcIl0mJihhKz1cImUxMDxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmxwZ1wiXSYmKGErPVwibHBnPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6Y25nXCJdJiYoYSs9XCJjbmc8YnIvPlwiKSxcImRpZXNlbFwiPT1cbiAgICBiLmZ1ZWwmJihhKz1cImRpZXNlbDxici8+XCIpLFwibHBnXCI9PWIuZnVlbCYmKGErPVwibHBnPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6b2N0YW5lXzk1XCJdJiYoYSs9XCJvY3RhbmUgOTU8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpvY3RhbmVfOThcIl0mJihhKz1cIm9jdGFuZSA5ODxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOm9jdGFuZV8xMDBcIl0mJihhKz1cIm9jdGFuZSAxMDA8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpvY3RhbmVfMTAyXCJdJiYoYSs9XCJvY3RhbmUgMTAyPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6ZGllc2VsXCJdJiYoYSs9XCJkaWVzZWw8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDplbGVjdHJpY2l0eVwiXSYmKGErPVwiY2hhcmdpbmcgc3RhdGlvbiAvIGxvYWRpbmcgc3RhdGlvbjxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50SGlzdG9yaWM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImFyY2hhZW9sb2dpY2FsX3NpdGVcIj09Yi5oaXN0b3JpYyYmYi5zaXRlX3R5cGUpc3dpdGNoKGIuc2l0ZV90eXBlKXtjYXNlIFwibWVnYWxpdGhcIjphKz1cbiAgICAgICAgXCJtZWdhbGl0aDxici8+XCI7YnJlYWs7Y2FzZSBcImJpZ3N0b25lXCI6YSs9XCJiaWdzdG9uZTxici8+XCI7YnJlYWs7Y2FzZSBcInR1bXVsdXNcIjphKz1cInR1bXVsdXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmb3J0aWZpY2F0aW9uXCI6YSs9XCJmb3J0aWZpY2F0aW9uPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidW5rbm93bjxici8+XCJ9cmV0dXJuIGF9LGZuQ29udGVudEJhcnJpZXJzPWZ1bmN0aW9uKGIsYSl7dmFyIGM9XCJcIjtpZihcIndhbGxcIj09Yi5iYXJyaWVyfHxcImJvbGxhcmRcIj09Yi5iYXJyaWVyKWIubWF0ZXJpYWwmJihjKz1cIm1hdGVyaWFsOiBcIit0cmFuc2xhdGUoYi5tYXRlcmlhbCkrXCI8YnIvPlwiKTtyZXR1cm4gY30sZm5Db250ZW50VG91cmlzbT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKFwiY2FtcF9zaXRlXCI9PWIudG91cmlzbSl7XCJ5ZXNcIj09Yi5kb2cmJihhKz1cImRvZ3MgYWxsb3dlZDxici8+XCIpO1wibm9cIj09Yi5kb2cmJihhKz1cImRvZ3MgZm9yYmlkZGVuPGJyLz5cIik7Yi5zdGFycyYmKGErPWIuc3RhcnMrXG4gICAgXCJzdGFyczxici8+XCIpO2IuY2FyYXZhbnMmJihhKz1cImNhcmF2YW4gc2l0ZXM8YnIvPlwiKTtpZihcInllc1wiPT1iLm9wZW5maXJlfHxcInllc1wiPT1iLmZpcmVwbGFjZSlhKz1cIlRoZXJzIGlzIGFuIG9wZW5maXJlLiA8YnIvPlwiO1wieWVzXCI9PWIud2FzaGluZ19tYWNoaW5lJiYoYSs9XCJ3YXNoaW5nIG1hY2hpbmU8YnIvPlwiKTtcInllc1wiPT1iLmRyeWVyJiYoYSs9XCJkcnllcjxici8+XCIpO1wieWVzXCI9PWIuZ3JvdXBfb25seSYmKGErPVwidXNlIGZvciBncm91cHMgb25seTxici8+XCIpO1wicmVjZXB0aW9uXCI9PWIuY2FtcF9zaXRlJiYoYSs9XCJyZWNlcHRpb24gYXZhaWxhYmxlPGJyLz5cIil9XCJpbmZvcm1hdGlvblwiPT1iLnRvdXJpc20mJlwibWFwXCI9PWIuaW5mb3JtYXRpb24mJihcInRvcG9cIj09Yi5tYXBfdHlwZSYmKGErPVwidG9wbzwvYnI+XCIpLFwic3RyZWV0XCI9PWIubWFwX3R5cGUmJihhKz1cInN0cmVldDwvYnI+XCIpLFwic2NoZW1lXCI9PWIubWFwX3R5cGUmJihhKz1cInNjaGVtZTwvYnI+XCIpLFwidG9wb3Njb3BlXCI9PVxuICAgIGIubWFwX3R5cGUmJihhKz1cInRvcG9zY29wZTwvYnI+XCIpKTtcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSYmXCJtYXBcIj09Yi5pbmZvcm1hdGlvbiYmKFwic2l0ZVwiPT1iLm1hcF9zaXplJiYoYSs9XCJtYXAgb2Ygc2l0ZTwvYnI+XCIpLFwiY2l0eVwiPT1iLm1hcF9zaXplJiYoYSs9XCJjaXR5IG1hcDwvYnI+XCIpLFwicmVnaW9uXCI9PWIubWFwX3NpemUmJihhKz1cIm1hcCBvZiByZWdpb248L2JyPlwiKSk7XCJnZW9sb2d5XCI9PWIuYm9hcmRfdHlwZSYmKGErPVwiZ2VvbG9naWMgaW5mb3JtYXRpb248YnIvPlwiKTtcImhpc3RvcnlcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJoaXN0b3JpYyBpbmZvcm1hdGlvbjxici8+XCIpO1wibmF0dXJlXCI9PWIuYm9hcmRfdHlwZSYmKGErPVwiaW5mb3JtYXRpb24gYWJvdXQgbmF0dXJlPGJyLz5cIik7XCJub3RpY2VcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJnZW5lcmFsIGluZm9ybWF0aW9uPGJyLz5cIik7XCJwbGFudHNcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJpbmZvcm1hdGlvbiBhYm91dCBwbGFudHM8YnIvPlwiKTtcbiAgICAgICAgXCJ3aWxkbGlmZVwiPT1iLmJvYXJkX3R5cGUmJihhKz1cImluZm9ybWF0aW9uIGFib3V0IHdpbGRsaWZlPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEFtZW5pdHk9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtcImJvYXRfc2hhcmluZ1wiPT1iLmFtZW5pdHkmJihhKz1iLmJvYXR0eXBlK1wiPGJyLz5cIik7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmKGErPWIuY291bnRyeStcIjxici8+XCIpO2lmKGIudmVuZGluZylzd2l0Y2goYi52ZW5kaW5nKXtjYXNlIFwiYWRtaXNzaW9uX3RpY2tldHNcIjphKz1cInRpY2tldHM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhbmltYWxfZmVlZFwiOmErPVwiYW5pbWFsIGZlZWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJib29rc1wiOmErPVwiYm9va3M8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYW5kbGVzXCI6YSs9XCJjYW5kbGVzPGJyLz5cIjticmVhaztjYXNlIFwiY2lnYXJldHRlc1wiOmErPVwiY2lnYXJldHRlczxici8+XCI7YnJlYWs7Y2FzZSBcImNvbmRvbXNcIjphKz1cImNvbmRvbXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkcmlua3NcIjphKz1cbiAgICAgICAgXCJkcmlua3M8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmaXJzdF9haWRcIjphKz1cImZpcnN0IGFpZCBhcnRpY2xlczxici8+XCI7YnJlYWs7Y2FzZSBcImZpc2hpbmdfdGFja2xlXCI6YSs9XCJmaXNoaW5nIHRhY2tsZTxici8+XCI7YnJlYWs7Y2FzZSBcImZsb3dlcnNcIjphKz1cImZsb3dlcnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJpY2VfY3JlYW1cIjphKz1cImljZSBjcmVhbTxici8+XCI7YnJlYWs7Y2FzZSBcImxhdW5kcnlfZGV0ZXJnZW50XCI6YSs9XCJsYXVuZHJ5IGRldGVyZ2VudDxici8+XCI7YnJlYWs7Y2FzZSBcIm5ld3NwYXBlcnNcIjphKz1cIm5ld3NwYXBlcnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTSU1fY2FyZHNcIjphKz1cInNJTS1jYXJkczxici8+XCI7YnJlYWs7Y2FzZSBcInN3ZWV0c1wiOmErPVwic3dlZXRzPGJyLz5cIjticmVhaztjYXNlIFwicGFyY2VsX3BpY2t1cFwiOmErPVwicGFyY2VsIHBpY2t1cDxici8+XCI7YnJlYWs7Y2FzZSBcImljZV9jdWJlc1wiOmErPVwiaWNlIGN1YmVzPGJyLz5cIjticmVhaztjYXNlIFwicHVibGljX3RyYW5zcG9ydF90aWNrZXRzXCI6YSs9XG4gICAgICAgIFwicHVibGljIHRyYW5zcG9ydCB0aWNrZXRzPGJyLz5cIjticmVhaztjYXNlIFwicGFya2luZ190aWNrZXRcIjphKz1cInBhcmtpbmcgdGlja2V0czxici8+XCI7YnJlYWs7Y2FzZSBcInNleF90b3lzXCI6YSs9XCJzZXggdG95czxici8+XCI7YnJlYWs7Y2FzZSBcInN0YW1wc1wiOmErPVwic3RhbXBzPGJyLz5cIjticmVhaztjYXNlIFwidG9sbFwiOmErPVwidG9sbDxici8+XCI7YnJlYWs7Y2FzZSBcInVtYnJlbGxhc1wiOmErPVwidW1icmVsbGFzPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiY29udGVudCB1bmtub3duPGJyLz5cIn1cInBvc3RfYm94XCI9PWIuYW1lbml0eSYmKGIuY29sbGVjdGlvbl90aW1lcyYmKGErPVwiY29sbGVjdGlvbiB0aW1lczogXCIrYi5jb2xsZWN0aW9uX3RpbWVzK1wiPGJyLz5cIiksXCJ5ZXNcIj09Yi5kcml2ZV90aHJvdWdoJiYoYSs9XCJhY2Nlc3NpYmxlIGJ5IGNhci4gPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRTdG9yYWdlPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7aWYoXCJzdG9yYWdlX3RhbmtcIj09XG4gICAgYi5tYW5fbWFkZSl7aWYoYi5jb250ZW50KXt2YXIgYz1iLmNvbnRlbnQ7c3dpdGNoKGMpe2Nhc2UgXCJmdWVsXCI6Yz1cImZ1ZWxcIjticmVhaztjYXNlIFwib2lsXCI6Yz1cIm9pbFwiO2JyZWFrO2Nhc2UgXCJnYXNcIjpjPVwiZ2FzXCI7YnJlYWs7Y2FzZSBcInNsdXJyeVwiOmM9XCJzbHVycnlcIjticmVhaztjYXNlIFwiY2VtZW50XCI6Yz1cImNlbWVudFwiO2JyZWFrO2Nhc2UgXCJ3YXRlclwiOmM9XCJ3YXRlclwiO2JyZWFrO2Nhc2UgXCJtYW51cmVcIjpjPVwibWFudXJlXCI7YnJlYWs7Y2FzZSBcInNpbGFnZVwiOmM9XCJzaWxhZ2VcIn1hKz1cImNvbnRlbnQ6IFwiK2MrXCI8YnIvPlwifWlmKGIuY29udGVudHMpe2M9Yi5jb250ZW50cztzd2l0Y2goYyl7Y2FzZSBcImZ1ZWxcIjpjPVwiZnVlbFwiO2JyZWFrO2Nhc2UgXCJvaWxcIjpjPVwib2lsXCI7YnJlYWs7Y2FzZSBcImdhc1wiOmM9XCJnYXNcIjticmVhaztjYXNlIFwic2x1cnJ5XCI6Yz1cInNsdXJyeVwiO2JyZWFrO2Nhc2UgXCJjZW1lbnRcIjpjPVwiY2VtZW50XCI7YnJlYWs7Y2FzZSBcIndhdGVyXCI6Yz1cIndhdGVyXCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJtYW51cmVcIjpjPVwibWFudXJlXCI7YnJlYWs7Y2FzZSBcInNpbGFnZVwiOmM9XCJzaWxhZ2VcIn1hKz1cImNvbnRlbnQ6IFwiK2MrXCI8YnIvPlwifX1iLnN0b3JhZ2UmJihcImdhc1wiPT1iLnN0b3JhZ2UmJihhKz1cImNvbnRlbnQ6IGdhczxici8+XCIpLFwib2lsXCI9PWIuc3RvcmFnZSYmKGErPVwiY29udGVudDogb2lsPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRJbmZvcm1hdGlvbkNpdHk9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtiW1wibmFtZTpkZVwiXSYmKGErPVwiZ2VybWFuIG5hbWU6IFwiK2JbXCJuYW1lOmRlXCJdK1wiPGJyLz5cIik7aWYoMUU0PD1iLnBvcHVsYXRpb24paWYoYi5wb3B1bGF0aW9uPVwiXCIrYi5wb3B1bGF0aW9uLDM8Yi5wb3B1bGF0aW9uLmxlbmd0aCl7dmFyIGM9Yi5wb3B1bGF0aW9uLmxlbmd0aCUzLGQ9MDxjP2IucG9wdWxhdGlvbi5zdWJzdHJpbmcoMCxjKTpcIlwiO2ZvcihpPTA7aTxNYXRoLmZsb29yKGIucG9wdWxhdGlvbi5sZW5ndGgvMyk7aSsrKWQ9MD09YyYmMD09aT9cbiAgICBkK2IucG9wdWxhdGlvbi5zdWJzdHJpbmcoYyszKmksYyszKmkrMyk6ZCsoXCIuXCIrYi5wb3B1bGF0aW9uLnN1YnN0cmluZyhjKzMqaSxjKzMqaSszKSk7YSs9XCJwb3B1bGF0aW9uOiBcIitkK1wiPGJyLz5cIn1lbHNlIGErPVwicG9wdWxhdGlvbiBcIitiLnBvcHVsYXRpb24rXCI8YnIvPlwiOzFFND49Yi5wb3B1bGF0aW9uJiYoYSs9XCJwb3B1bGF0aW9uOiBcIitiLnBvcHVsYXRpb24rXCI8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50RW1lcmdlbmN5PWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7Yi5saWZlYm9hdCYmKFwiaW5zaG9yZVwiPT1iLmxpZmVib2F0P2ErPVwiYXBwbGljYXRpb246IGluc2hvcmU8YnIvPlwiOlwib2Zmc2hvcmVcIj09Yi5saWZlYm9hdCYmKGErPVwiYXBwbGljYXRpb246IG9mZnNob3JlPGJyLz5cIikpO2JbXCJsaWZlYm9hdDpjbGFzc1wiXSYmKGErPVwidHlwZSBvZiBib2F0OiBcIitiW1wibGlmZWJvYXQ6Y2xhc3NcIl0rXCI8YnIvPlwiKTtpZihiW1wic2lyZW46dHlwZVwiXSl7dmFyIGM9YltcInNpcmVuOnR5cGVcIl07XG4gICAgICAgIHN3aXRjaChjKXtjYXNlIFwibWVjaGFuaWNhbFwiOmM9XCJtZWNoYW5pY2FsXCI7YnJlYWs7Y2FzZSBcImVsZWN0cm9uaWNcIjpjPVwiZWxlY3Ryb25pY1wiO2JyZWFrO2Nhc2UgXCJwbmV1bWF0aWNcIjpjPVwicG5ldW1hdGljXCI7YnJlYWs7Y2FzZSBcImVsZWN0cm9tZWNoYW5pY1wiOmM9XCJlbGVjdHJvbWVjaGFuaWNcIn1hKz1cIlR5cDogXCIrYytcIjxici8+XCJ9aWYoYltcInNpcmVuOnB1cnBvc2VcIl0pe2M9YltcInNpcmVuOnB1cnBvc2VcIl07c3dpdGNoKGMpe2Nhc2UgXCJhaXJfcmFpZFwiOmM9XCJhaXIgcmFpZFwiO2JyZWFrO2Nhc2UgXCJ0b3JuYWRvXCI6Yz1cInRvcm5hZG9cIjticmVhaztjYXNlIFwic3Rvcm1cIjpjPVwic3Rvcm1cIjticmVhaztjYXNlIFwiY2l2aWxfZGVmZW5zZVwiOmM9XCJjaXZpbCBkZWZlbmNlXCI7YnJlYWs7Y2FzZSBcImZpcmVcIjpjPVwiZmlyZVwifWErPVwidXNlOiBcIitjK1wiPGJyLz5cIn1iW1wic2lyZW46bW9kZWxcIl0mJihhKz1cIm1vZGVsOiBcIitiW1wic2lyZW46bW9kZWxcIl0rXCI8YnIvPlwiKTtiW1wic2lyZW46cmFuZ2VcIl0mJlxuICAgIChhKz1cInJhbmdlIG9mIHNpcmVuOiBcIitiW1wic2lyZW46cmFuZ2VcIl0rXCI8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50Q3Vpc2luZT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKGIuY3Vpc2luZSl7dmFyIGM9XCJcIixhPShcInN1cGVybWFya2V0XCI9PWIuc2hvcHx8XCJjb252ZW5pZW5jZVwiPT1iLnNob3B8fFwiZGVsaVwiPT1iLnNob3B8fFwib3JnYW5pY1wiPT1iLnNob3ApJiZcInJlc3RhdXJhbnRcIiE9Yi5hbWVuaXR5P2ErXCJzcGVjaWFsdGllczogXCI6YStcImN1aXNpbmU6IFwiO1wiYXJhYmljXCI9PWIuY3Vpc2luZSYmKGMrPVwiYXJhYmljPGJyLz5cIik7XCJpdGFsaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGl0YWxpYW48YnIvPlwiKTtcImludGVybmF0aW9uYWxcIj09Yi5jdWlzaW5lJiYoYys9XCIgaW50ZXJuYXRpb25hbDxici8+XCIpO1wicmVnaW9uYWxcIj09Yi5jdWlzaW5lJiYoYys9XCIgcmVnaW9uYWw8YnIvPlwiKTtcImNoaW5lc2VcIj09Yi5jdWlzaW5lJiYoYys9XCIgY2hpbmVzZTxici8+XCIpO1wiZ3JlZWtcIj09Yi5jdWlzaW5lJiZcbiAgICAoYys9XCIgZ3JlZWs8YnIvPlwiKTtcImFmcmljYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgYWZyaWNhbjxici8+XCIpO1wiZ2VybWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGdlcm1hbjxici8+XCIpO1wibWV4aWNhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBtZXhpY2FuPGJyLz5cIik7XCJmcmVuY2hcIj09Yi5jdWlzaW5lJiYoYys9XCIgZnJlbmNoPGJyLz5cIik7XCJpbmRpYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgaW5kaWFuPGJyLz5cIik7XCJpcmFuaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGlyYW5pYW48YnIvPlwiKTtcImxlYmFuZXNlXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGxlYmFuZXNlPGJyLz5cIik7XCJ0aGFpXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHRoYWk8YnIvPlwiKTtcImJhbGthblwiPT1iLmN1aXNpbmUmJihjKz1cIiBiYWxrYW48YnIvPlwiKTtcInR1cmtpc2hcIj09Yi5jdWlzaW5lJiYoYys9XCIgdHVya2lzaDxici8+XCIpO1wiYmF2YXJpYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgYmF2YXJpYW48YnIvPlwiKTtcImN6ZWNoXCI9PWIuY3Vpc2luZSYmXG4gICAgKGMrPVwiIGN6ZWNoPGJyLz5cIik7XCJwb3J0dWd1ZXNlXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHBvcnR1Z3Vlc2U8YnIvPlwiKTtcInNwYW5pc2hcIj09Yi5jdWlzaW5lJiYoYys9XCIgc3BhbmlzaDxici8+XCIpO1wiamFwYW5lc2VcIj09Yi5jdWlzaW5lJiYoYys9XCIgamFwYW5lc2U8YnIvPlwiKTtcImZpc2hcIj09Yi5jdWlzaW5lJiYoYys9XCIgZmlzaDxici8+XCIpO1wiYnJhemlsaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGJyYXppbGlhbjxici8+XCIpO1wiYXNpYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgYXNpYW48YnIvPlwiKTtcIm1lZGl0ZXJyYW5lYW5cIj09Yi5jdWlzaW5lJiYoYys9XCJtZWRpdGVycmFuZWFuPGJyLz5cIik7XCJzZWFmb29kXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHNlYWZvb2Q8YnIvPlwiKTtcImljZV9jcmVhbVwiPT1iLmN1aXNpbmUmJihjKz1cIiBpY2UgY3JlYW08YnIvPlwiKTtcImJ1cmdlclwiPT1iLmN1aXNpbmUmJihjKz1cIiBidXJnZXI8YnIvPlwiKTtcImZyb3plbl95b2d1cnRcIj09Yi5jdWlzaW5lJiYoYys9XCIgZnJvemVuIHlvZ3VydDxici8+XCIpO1xuICAgICAgICBcIlwiPT1jJiYoYz1iLmN1aXNpbmUrXCI8YnIvPlwiKTthKz1jfXJldHVybiBhfSxmbkNvbnRlbnRTaGlwcGluZz1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2IuaGFyYm91cj1cInllc1wiO1wieWVzXCI9PWJbXCJhY2Nlc3M6dGlkZVwiXSYmKGErPVwiQWNjZXNzIHJlc3RyaWN0ZWQgYnkgdGlkZTwvYnI+XCIpO1wieWVzXCI9PWJbXCJhY2Nlc3M6c3dlbGxcIl0mJihhKz1cImFjY2VzcyByZXN0cmljdGVkIGJ5IHN3ZWxsPC9icj5cIik7XCJ5ZXNcIj09YltcImFjY2VzczppY2VcIl0mJihhKz1cImFjY2VzcyByZXN0cmljdGVkIGJ5IGljZTwvYnI+XCIpO2IudmhmX2NoYW5uZWwmJihhKz1cIlVLVy1DaGFubmVsOiBcIitiLnZoZl9jaGFubmVsK1wiPC9icj5cIik7Yi5tbXNpJiYoYSs9XCJNTVNJLU51bWJlcjogXCIrYi5tbXNpK1wiPC9icj5cIik7YltcImhhcmJvdXI6aW5mb3JtYXRpb25cIl0mJihhKz1cImluZm9ybWF0aW9uIDpcIitiW1wiaGFyYm91cjppbmZvcm1hdGlvblwiXStcIjwvYnI+XCIpO1wieWVzXCI9PWIubW90b3Jib2F0JiYoYSs9XCJtb3RvcmJvYXQgYWxsb3dlZDwvYnI+XCIpO1xuICAgICAgICBcIm5vXCI9PWIubW90b3Jib2F0JiYoYSs9XCJtb3RvcmJvYXQgcHJvaGliaXRlZCA8L2JyPlwiKTtiLkNFTVQmJihhKz1cIkNFTVQ6IFwiK2IuQ0VNVCtcIjwvYnI+XCIpO1wieWVzXCI9PWIuaW50ZXJtaXR0ZW50JiYoYSs9XCJyaXZlciBpbnRlcm1pdHRlbnQgZHJpZWQgb3V0PC9icj5cIik7XCJ5ZXNcIj09Yi50aWRhbCYmKGErPVwidGlkYWwgaW5mbHVlbmNlIHRoZSBmbG93PC9icj5cIik7Yi5kcmFmdCYmKGErPVwiIGRyaXZpbmcgZGVwdGggb2Ygd2F0ZXI6IFwiK2IuZHJhZnQrXCIgbTwvYnI+XCIpO2lmKFwic2xpcHdheVwiPT1iLmxlaXN1cmV8fFwic2xpcHdheVwiPT1iLmhhcmJvdXIpXCJoYW5kXCI9PWIub3BlcmF0aW5nJiYoYSs9XCJvcGVyYXRpbmc6IGJ5IGhhbmQ8YnIvPlwiKSxcImNhclwiPT1iLm9wZXJhdGluZyYmKGErPVwib3BlcmF0aW5nOiBieSBjYXIsIGJvYXQgdHJhaWxlcjxici8+XCIpLFwiY2FibGVfd2luY2hcIj09Yi5vcGVyYXRpbmcmJihhKz1cIm9wZXJhdGluZzogd2l0aCBjYWJsZSB3aW5jaDxici8+XCIpLFwidHJhdmVsbGlmdFwiPT1cbiAgICAgICAgYi5vcGVyYXRpbmcmJihhKz1cIm9wZXJhdGluZzogYnkgdHJhdmVsbGlmdDxici8+XCIpLFwiY3JhbmVcIj09Yi5tYW5fbWFkZSYmKGErPVwiYnkgY3JhbmU8YnIvPlwiLGJbXCJjcmFuZTptYXhsb2FkXCJdJiYoYSs9XCJtYXhsb2FkOiBcIitiW1wiY3JhbmU6bWF4bG9hZFwiXStcIjxici8+XCIpLGJbXCJzaGlwOm1heGRyYWZ0XCJdJiYoYSs9XCJtYXhpbXVtIHBlcm1pc3NpYmxlIGRyYXVnaHQ6IFwiK2JbXCJzaGlwOm1heGRyYWZ0XCJdK1wiPGJyLz5cIiksYltcInNoaXA6bWF4bGVuZ3RoXCJdJiYoYSs9XCJtYXhpbXVtIHBlcm1pc3NpYmxlIGxlbmd0aCBvZiBhIHNoaXA6IFwiK2JbXCJzaGlwOm1heGxlbmd0aFwiXStcIjxici8+XCIpKSxcInllc1wiPT1iLnZlaGljbGUmJihhKz1cImFjY2Vzc2libGUgYnkgdmVoaWNsZTxici8+XCIpO2ErPWZuV3JlY2tJbmZvKGIpO2lmKFwiZmVycnlcIj09Yi5yb3V0ZXx8XCJmZXJyeV90ZXJtaW5hbFwiPT1iLmFtZW5pdHl8fFwieWVzXCI9PWIuZmVycnkpZmFocnplaXQ9Yi5kdXJhdGlvbixcIlwiIT1mYWhyemVpdCYmXG4gICAgICAgIChcInVuZGVmaW5lZFwiIT1mYWhyemVpdCYmbnVsbCE9ZmFocnplaXQpJiYoYSs9XCJkdXJhdGlvbiBpbiBob3VycyA6IFwiK2ZhaHJ6ZWl0K1wiPGJyLz5cIiksXCJ5ZXNcIj09Yi5tb3RvcmNhciYmKGErPVwibW90b3JjYXJzIGFsbG93ZWQ8YnIvPlwiKSxcIm5vXCI9PWIubW90b3JjYXImJihhKz1cIm1vdG9yY2FycyBwcm9oaWJpdGVkPGJyLz5cIiksXCJub1wiPT1iLm1vdG9yX3ZlaGljbGUmJihhKz1cIm1vdG9yIHZlaGljbGVzIHByb2hpYml0ZWQ8YnIvPlwiKSxcInllc1wiPT1iLm1vdG9yX3ZlaGljbGUmJihhKz1cIm1vdG9yIHZlaGljbGVzIGFsbG93ZWQ8YnIvPlwiKSxcInllc1wiPT1iLnZlaGljbGUmJihhKz1cInZlaGljbGVzIGFsbG93ZWQ8YnIvPlwiKSxcIm5vXCI9PWIudmVoaWNsZSYmKGErPVwibm8gdmVoaWNsZXM8YnIvPlwiKSxcIm5vXCI9PWIuYmljeWNsZSYmKGErPVwibm8gYmljeWNsZXM8YnIvPlwiKSxcIm5vXCI9PWIuYmljeWNsZSYmKGErPVwiYmljeWNsZXMgYWxsb3dlZDxici8+XCIpLFwieWVzXCI9PWIuaGd2JiYoYSs9XCJoZ3YgYWxsb3dlZDxici8+XCIpLFxuICAgICAgICBcIm5vXCI9PWIuaGd2JiYoYSs9XCJoZ3YgcHJvaGliaXRlZDxici8+XCIpLFwieWVzXCI9PWIuZm9vdCYmKGErPVwicGVkZXN0cmlhbiBhbGxvd2VkPGJyLz5cIiksXCJub1wiPT1iLmZvb3QmJihhKz1cInBlZGVzdHJpYW4gcHJvaGliaXRlZCA8YnIvPlwiKSxcInllc1wiPT1iLmJpY3ljbGUmJihhKz1cImN5Y2xpc3QgYWxsb3dlZCA8YnIvPlwiKSxcIm5vXCI9PWIuYmljeWNsZSYmKGErPVwiY3ljbGlzdCBwcm9oaWJpdGVkIDxici8+XCIpLFwieWVzXCI9PWJbXCJmZXJyeTpjYWJsZVwiXSYmKGErPVwiY2FibGUgZmVycnk8YnIvPlwiKTtpZihiW1wic2VhbWFyazpsaWdodDoxOmNvbG91clwiXSl7dmFyIGM9YltcInNlYW1hcms6bGlnaHQ6MTpjb2xvdXJcIl07c3dpdGNoKGMpe2Nhc2UgXCJ3aGl0ZVwiOmM9XCJ3aGl0ZVwiO2JyZWFrO2Nhc2UgXCJyZWRcIjpjPVwicmVkXCI7YnJlYWs7Y2FzZSBcImdyZWVuXCI6Yz1cImdyZWVuXCI7YnJlYWs7Y2FzZSBcImJsdWVcIjpjPVwiYmx1ZVwiO2JyZWFrO2Nhc2UgXCJ5ZWxsb3dcIjpjPVwieWVsbG93XCI7YnJlYWs7Y2FzZSBcImFtYmVyXCI6Yz1cbiAgICAgICAgICAgIFwiYW1iZXJcIn1hKz1cImNvbG91ciBvZiBsaWdodDogXCIrYytcIjxici8+XCJ9XCJsaWdodGhvdXNlXCI9PWIubWFuX21hZGUmJihiW1wic2VhbWFyazpsaWdodDoxOmNoYXJhY3RlclwiXSYmKGErPVwibGlnaHQgY2hhcmFjdGVyOiBcIitiW1wic2VhbWFyazpsaWdodDoxOmNoYXJhY3RlclwiXStcIjxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OjE6cGVyaW9kXCJdJiYoYSs9XCJwZXJpb2Q6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OjE6cGVyaW9kXCJdK1wiPGJyLz5cIiksYltcInNlYW1hcms6bGlnaHQ6MTpoZWlnaHRcIl0mJihhKz1cImhlaWdodDogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpoZWlnaHRcIl0rXCIgbTxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OjE6cmFuZ2VcIl0mJihhKz1cInJhbmdlOiBcIitiW1wic2VhbWFyazpsaWdodDoxOnJhbmdlXCJdK1wiIHNtPGJyLz5cIikpO2lmKGJbXCJzZWFtYXJrOmxpZ2h0OmNvbG91clwiXSl7Yz1iW1wic2VhbWFyazpsaWdodDpjb2xvdXJcIl07c3dpdGNoKGMpe2Nhc2UgXCJ3aGl0ZVwiOmM9XCJ3aGl0ZVwiO1xuICAgICAgICAgICAgYnJlYWs7Y2FzZSBcInJlZFwiOmM9XCJyZWRcIjticmVhaztjYXNlIFwiZ3JlZW5cIjpjPVwiZ3JlZW5cIjticmVhaztjYXNlIFwiYmx1ZVwiOmM9XCJibHVlXCI7YnJlYWs7Y2FzZSBcInllbGxvd1wiOmM9XCJ5ZWxsb3dcIjticmVhaztjYXNlIFwiYW1iZXJcIjpjPVwiYW1iZXJcIn1hKz1cImNvbG91ciBvZiBsaWdodDogXCIrYytcIjxici8+XCJ9XCJsaWdodGhvdXNlXCI9PWIubWFuX21hZGUmJihiW1wic2VhbWFyazpsaWdodDpjaGFyYWN0ZXJcIl0mJihhKz1cImxpZ2h0IGNoYXJhY3RlcjogXCIrYltcInNlYW1hcms6bGlnaHQ6Y2hhcmFjdGVyXCJdK1wiPGJyLz5cIiksYltcInNlYW1hcms6bGlnaHQ6aGVpZ2h0XCJdJiYoYSs9XCJoZWlnaHQ6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OmhlaWdodFwiXStcIiBtPGJyLz5cIiksYltcInNlYW1hcms6bGlnaHQ6cmFuZ2VcIl0mJihhKz1cInJhbmdlOiBcIitiW1wic2VhbWFyazpsaWdodDpyYW5nZVwiXStcIiBzbTxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OnBlcmlvZFwiXSYmKGErPVwicGVyaW9kOiBcIitiW1wic2VhbWFyazpsaWdodDpwZXJpb2RcIl0rXG4gICAgICAgIFwiPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRIeWRyYW50cz1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKFwiZmlyZV9oeWRyYW50XCI9PWIuZW1lcmdlbmN5KXt2YXIgYz1iW1wiZmlyZV9oeWRyYW50OmNvdW50XCJdO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGErPVwiTnVtYmVyOiBcIitjK1wiPGJyLz5cIik7Yz1iW1wiZmlyZV9oeWRyYW50OmRpYW1ldGVyXCJdO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGErPVwiUGlwZSBkaWFtZXRlcjogXCIrYytcIiBtbTxici8+XCIpO2M9YltcImZpcmVfaHlkcmFudDpwcmVzc3VyZVwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhPVwic3VjdGlvblwiPT1jP2ErXCJQcmVzc3VyZSBpbiBiYXIgLyBTdWN0aW9uOiBTdWN0aW9uPGJyLz5cIjphKyhcIlByZXNzdXJlIGluIGJhciAvIFN1Y3Rpb246IFwiK2MrXCI8YnIvPlwiKSk7Yz1iW1wiZmlyZV9oeWRyYW50OnBvc2l0aW9uXCJdO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcbiAgICBcIlwiIT1jKSYmKFwibGFuZVwiPT1jP2ErPVwiUG9zaXRpb246IExhbmU8YnIvPlwiOlwicGFya2luZ19sb3RcIj09Yz9hKz1cIlBvc2l0aW9uOiBQYXJraW5nIExvdDxici8+XCI6XCJzaWRld2Fsa1wiPT1jP2ErPVwiUG9zaXRpb246IFNpZGV3YWxrPGJyLz5cIjpcImdyZWVuXCI9PWMmJihhKz1cIlBvc2l0aW9uOiBHcmVlbjxici8+XCIpKTtjPWIud2F0ZXJfdm9sdW1lO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGErPVwiVm9sdW1lOiBcIitjK1wiPGJyLz5cIik7Yz1iW1wiZmlyZV9oeWRyYW50OmF3d2FfY2xhc3NcIl07XCJ1bmRlZmluZWRcIiE9YyYmbnVsbCE9YyYmXCJcIiE9Yz9hKz1cIkFXV0EgQ2xhc3M6IFwiK2MrXCI8YnIvPlwiOihjPWIuZmxvd19yYXRlLFwidW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGErPVwiRmxvdyByYXRlOiBcIitjK1wiPGJyLz5cIikpO2M9Yi53YXRlcl9zb3VyY2U7XCJ1bmRlZmluZWRcIiE9YyYmKG51bGwhPWMmJlwiXCIhPWMmJlwibWFpblwiIT1jKSYmKGErPVwiV2F0ZXIgc291cmNlOiBcIitcbiAgICBjK1wiPGJyLz5cIik7Yz1iW1wiY291cGxpbmdzOnR5cGVcIl07XCJ1bmRlZmluZWRcIiE9YyYmKG51bGwhPWMmJlwiXCIhPWMpJiYoYSs9XCJDb3VwbGluZ3MgdHlwZTogXCIrYytcIjxici8+XCIpO2M9YltcImNvdXBsaW5nczpkaWFtZXRlclwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIkNvdXBsaW5ncyBkaWFtZXRlcjogXCIrYytcIjxici8+XCIpO2M9YltcInBpbGxhcjp0eXBlXCJdO1wiZHJ5X2JhcnJlbFwiPT09YyYmKGErPVwiUGlsbGFyIHR5cGU6IFwiK2MrXCI8YnIvPlwiKTtcImZpcmVfaHlkcmFudFwiPT09YltcImRpc3VzZWQ6ZW1lcmdlbmN5XCJdJiYoYSs9XCJDdXJyZW50bHkgZGlzdXNlZFwiKTtcIlwiPT1hJiYoYT1cIk5vIGRldGFpbHMgYXZhaWxhYmxlLlwiKX1yZXR1cm4gYX0sZm5Db250ZW50U3RyZWV0c1RyYWZmaWM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtcInllc1wiPT1iW1wicmVkX3R1cm46cmlnaHRcIl0mJihhKz1cInJlZCB0dXJuOiBhbGxvd2VkIHRvIHR1cm4gdG8gdGhlIHJpZ2h0PGJyLz5cIik7XG4gICAgICAgIFwibm9cIj09YltcInJlZF90dXJuOnJpZ2h0XCJdJiYoYSs9XCJyZWQgdHVybjogcHJvaGliaXRlZCB0byB0dXJuIHRvIHRoZSByaWdodDxici8+XCIpO2IuYnJpZGdlJiYoYi5oZWlnaHQmJihhKz1cImhlaWdodDogXCIrYi5oZWlnaHQrXCIgbTxici8+XCIpLGIubGVuZ3RoJiYoYSs9XCJsZW5ndGg6IFwiK2IubGVuZ3RoK1wiIG08YnIvPlwiKSxiLmJyaWRnZV9yZWYmJihhKz1cImJyaWRnZSByZWY6IFwiK2IuYnJpZGdlX3JlZitcIjxici8+XCIpLGIuc3RhcnRfZGF0ZSYmKGErPVwic3RhcnQgZGF0ZTogXCIrYi5zdGFydF9kYXRlK1wiPC9icj47XCIpLGIubWF4d2VpZ2h0JiYoYSs9XCJtYXh3ZWlnaHQ6IFwiK2IubWF4d2VpZ2h0K1wiIHQ8L2JyPlwiKSk7Yi5oaWdod2F5JiZcInllc1wiPT1iLnRvbGwmJihhKz1cInRvbGwgaGlnaHdheTxici8+XCIpO1wieWVzXCI9PWJbXCJ0b2xsOmhndlwiXSYmKGErPVwiSEdWIHRvbGw8YnIvPlwiKTtpZihiLnN1cmZhY2Upe3ZhciBjPWIuc3VyZmFjZSxhPWErXCJzdXJmYWNlOiBcIjtzd2l0Y2goYyl7Y2FzZSBcImdyYXNzXCI6YSs9XG4gICAgICAgICAgICBcImdyYXNzPGJyLz5cIjticmVhaztjYXNlIFwicGF2ZWRcIjphKz1cInBhdmVkPGJyLz5cIjticmVhaztjYXNlIFwiYXNwaGFsdFwiOmErPVwiYXNwaGFsdDxici8+XCI7YnJlYWs7Y2FzZSBcImNvYmJsZXN0b25lXCI6YSs9XCJjb2JibGVzdG9uZTxici8+XCI7YnJlYWs7Y2FzZSBcInNldHRcIjphKz1cInNldHQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb25jcmV0ZVwiOmErPVwiY29uY3JldGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bnBhdmVkXCI6YSs9XCJ1bnBhdmVkPGJyLz5cIjticmVhaztjYXNlIFwicGF2aW5nX3N0b25lc1wiOmErPVwicGF2aW5nIHN0b25lczxici8+XCI7YnJlYWs7Y2FzZSBcImNvbXBhY3RlZFwiOmErPVwiY29tcGFjdGVkPGJyLz5cIjticmVhaztjYXNlIFwiZGlydFwiOmErPVwiZGlydDxici8+XCI7YnJlYWs7Y2FzZSBcImZpbmVfZ3JhdmVsXCI6YSs9XCJmaW5lIGdyYXZlbDxici8+XCI7YnJlYWs7Y2FzZSBcImdyYXNzX3BhdmVyXCI6YSs9XCJncmFzcyBwYXZlcjxici8+XCI7YnJlYWs7Y2FzZSBcImdyYXZlbFwiOmErPVwiZ3JhdmVsPGJyLz5cIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJlYXJ0aFwiOmErPVwiZWFydGg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJncm91bmRcIjphKz1cImdyb3VuZDxici8+XCI7YnJlYWs7Y2FzZSBcIm1ldGFsXCI6YSs9XCJtZXRhbDxici8+XCI7YnJlYWs7Y2FzZSBcIm11ZFwiOmErPVwibXVkPGJyLz5cIjticmVhaztjYXNlIFwic2FuZFwiOmErPVwic2FuZDxici8+XCI7YnJlYWs7Y2FzZSBcIndvb2RcIjphKz1cIndvb2Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0YXJ0YW5cIjphKz1cInRhcnRhbjxici8+XCI7YnJlYWs7Y2FzZSBcImFydGlmaWNpYWxfdHVyZlwiOmErPVwiYXJ0aWZpY2lhbCB0dXJmPGJyLz5cIjticmVhaztjYXNlIFwiY2xheVwiOmErPVwiY2xheTxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVua25vd248YnIvPlwifX1cImdyYWRlMVwiPT1iLnRyYWNrdHlwZSYmKGErPVwicGF0aCBzdXJmYWNlOiBTb2xpZC4gVXN1YWxseSBhIHBhdmVkIG9yIGhlYXZpbHkgY29tcGFjdGVkIGhhcmRjb3JlIHN1cmZhY2UuPGJyLz5cIik7XCJncmFkZTJcIj09Yi50cmFja3R5cGUmJihhKz1cInBhdGggc3VyZmFjZTogTW9zdGx5IHNvbGlkLiBVc3VhbGx5IGFuIHVucGF2ZWQgdHJhY2sgd2l0aCBzdXJmYWNlIG9mIGdyYXZlbCBtaXhlZCB3aXRoIGEgdmFyeWluZyBhbW91bnQgb2Ygc2FuZCwgc2lsdCwgYW5kIGNsYXkuPGJyLz5cIik7XG4gICAgICAgIFwiZ3JhZGUzXCI9PWIudHJhY2t0eXBlJiYoYSs9XCJwYXRoIHN1cmZhY2U6IEV2ZW4gbWl4dHVyZSBvZiBoYXJkIGFuZCBzb2Z0IG1hdGVyaWFscy4gQWxtb3N0IGFsd2F5cyBhbiB1bnBhdmVkIHRyYWNrLjxici8+XCIpO1wiZ3JhZGU0XCI9PWIudHJhY2t0eXBlJiYoYSs9XCJwYXRoIHN1cmZhY2U6IE1vc3RseSBzb2Z0LiBBbG1vc3QgYWx3YXlzIGFuIHVucGF2ZWQgdHJhY2sgcHJvbWluZW50bHkgd2l0aCBzb2lsL3NhbmQvZ3Jhc3MsIGJ1dCB3aXRoIHNvbWUgaGFyZCBtYXRlcmlhbHMsIG9yIGNvbXByZXNzZWQgbWF0ZXJpYWxzIG1peGVkIGluLjxici8+XCIpO1wiZ3JhZGU1XCI9PWIudHJhY2t0eXBlJiYoYSs9XCJwYXRoIHN1cmZhY2U6IFNvZnQuIEFsbW9zdCBhbHdheXMgYW4gdW5wYXZlZCB0cmFjayBsYWNraW5nIGhhcmQgbWF0ZXJpYWxzLCB1bmNvbXBhY3RlZCwgd2l0aCBzdXJmYWNlIG9mIHNvaWwvc2FuZC9ncmFzcy48YnIvPlwiKTtcInllc1wiPT1iLm1vdG9yY3ljbGUmJihhKz1cIjxici8+bW90b3JjeWxlIGFsbG93ZWQuPGJyLz5cIik7XG4gICAgICAgIFwibm9cIj09Yi5tb3RvcmN5Y2xlJiYoYSs9XCI8YnIvPm1vdG9yY3ljbGVzIHByb2hpYml0ZWQuPGJyLz5cIik7XCJleGNlbGxlbnRcIj09Yi50cmFpbF92aXNpYmlsaXR5JiYoYSs9XCJ0cmFpbCB2aXNpYmlsaXR5OiBVbmFtYmlndW91cyBwYXRoIG9yIG1hcmtlcnMgZXZlcnl3aGVyZTxici8+XCIpO1wiZ29vZFwiPT1iLnRyYWlsX3Zpc2liaWxpdHkmJihhKz1cInRyYWlsIHZpc2liaWxpdHk6IE5leHQgbWFya2VyIGFsd2F5cyB2aXNpYmxlLCBidXQgc29tZXRpbWVzIGhhcyB0byBiZSBzZWFyY2hlZCBmb3IuPGJyLz5cIik7XCJpbnRlcm1lZGlhdGVcIj09Yi50cmFpbF92aXNpYmlsaXR5JiYoYSs9XCJ0cmFpbCB2aXNpYmlsaXR5OiBUcmFjayBtb3N0bHkgdmlzaWJsZTxici8+XCIpO1wiYmFkXCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwidHJhaWwgdmlzaWJpbGl0eTogUGF0aCBzb21ldGltZXMgaW52aXNpYmxlLCByb3V0ZSBwYXJ0bHkgcGF0aGxlc3M8YnIvPlwiKTtcImhvcnJpYmxlXCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmXG4gICAgICAgIChhKz1cInRyYWlsIHZpc2liaWxpdHk6IE9mdGVuIHBhdGhsZXNzPGJyLz5cIik7XCJub1wiPT1iLnRyYWlsX3Zpc2liaWxpdHkmJihhKz1cInRyYWlsIHZpc2liaWxpdHk6IE1vc3RseSBwYXRobGVzczxici8+XCIpO1wiaGlraW5nXCI9PWIuc2FjX3NjYWxlJiYoYSs9XCJ0cmFpbDogVHJhaWwgd2VsbCBjbGVhcmVkLiAoU0FDIFNjYWxlOiBUMSAoeWVsbG93KSk8L2JyPlwiKTtcIm1vdW50YWluX2hpa2luZ1wiPT1iLnNhY19zY2FsZSYmKGErPVwidHJhaWw6IFRyYWlsIHdpdGggY29udGludW91cyBsaW5lIGFuZCBiYWxhbmNlZCBhc2NlbnQgKFNBQyBTY2FsZTogVDIgKHJlZCkpPC9icj5cIik7XCJkZW1hbmRpbmdfbW91bnRhaW5faGlraW5nXCI9PWIuc2FjX3NjYWxlJiYoYSs9XCJ0cmFpbDogZXhwb3NlZCBzaXRlcyBtYXkgYmUgc2VjdXJlZCB3aXRoIHJvcGVzIG9yIGNoYWlucywgcG9zc2libGUgbmVlZCB0byB1c2UgaGFuZHMgZm9yIGJhbGFuY2UgKFNBQyBTY2FsZTogVDMgKHJlZCkpPC9icj5cIik7XCJhbHBoaW5lX2hpa2luZ1wiPT1cbiAgICAgICAgYi5zYWNfc2NhbGUmJihhKz1cInRyYWlsOiBzb21ldGltZXMgbmVlZCBmb3IgaGFuZCB1c2UgdG8gZ2V0IGFoZWFkIChTQUMgU2NhbGU6IFQ0IChibHVlKSk8L2JyPlwiKTtcImRlbWFuZGluZ19hbHBoaW5lX2hpa2luZ1wiPT1iLnNhY19zY2FsZSYmKGErPVwidHJhaWw6IHNpbmdsZSBwbGFpbmx5IGNsaW1iaW5nIHVwIHRvIHNlY29uZCBncmFkZSAoU0FDIFNjYWxlOiBUNSAoYmx1ZSkpPC9icj5cIik7XCJkaWZmaWN1bHRfYWxwaW5lX2hpa2luZ1wiPT1iLnNhY19zY2FsZSYmKGErPVwidHJhaWw6IGNsaW1iaW5nIHVwIHRvIHNlY29uZCBncmFkZSAoU0FDIFNjYWxlOiBUNiAoYmx1ZSkpPC9icj5cIik7YltcIm10YjpuYW1lXCJdJiYoYSs9XCJjeWNsZXdheSA6XCIrYltcIm10YjpuYW1lXCJdK1wiPC9icj5cIik7XCIwXCI9PWJbXCJtdGI6c2NhbGVcIl0mJihhKz1cIk1vdW50YWluYmlrZXJvdXRlOiBWZXJ5IGVhc3kgd2F5IC0gR3JhdmVsIG9yIHBhY2tlZCBlYXJ0aC4gTm8gcGFydGljdWxhciBkaWZmaWN1bHRpZXMuIE1vc3RseSBmb3Jlc3QgYW5kIG1lYWRvdyBwYXRocyAoaGlnaHdheT1wYXRoKS4gU2VjdGlvbnMgd2l0aCBzdGVwcywgcm9ja3MsIG9yIHJvb3RzIGFyZSBub3QgZXhwZWN0ZWQuIFdpZGUgY3VydmVzLCBlYXN5IHRvIG1vZGVyYXRlIHNsb3BlLiBObyBzcGVjaWFsIHNraWxscyBhcmUgbmVlZGVkIHRvIHJpZGUgdGhpcy4gRWFzeSB0byByaWRlIHVwaGlsbC48L2JyPlN1cmZhY2U6IHNvbGlkIGFuZCBoYW5keTwvYnI+T2JzdGFjbGVzOiBubyBvYnN0YWNsZXM8L2JyPkdyYWRpZW50OiBtaWxkIHRvIG1vZGVyYXRlPC9icj5CZW5kczogd2lkZTwvYnI+RHJpdmluZyBza2lsbHM6IG5vIHNwZWNpYWwgZHJpdmluZyBza2lsbHMgcmVxdWlyZWQ8L2JyPlwiKTtcbiAgICAgICAgXCIxXCI9PWJbXCJtdGI6c2NhbGVcIl0mJihhKz1cIk1vdW50YWluYmlrZXJvdXRlOiBTbWFsbGVyIG9ic3RhY2xlcyBsaWtlIHJvb3RzIGFuZCBzbWFsbCBzdG9uZXMuIEVyb3Npb24gZGFtYWdlIG1heSBpbmNyZWFzZSBkaWZmaWN1bHR5LiBTb2lsIG1heSBiZSBsb29zZSBpbiBwbGFjZXMuIFRpZ2h0IHR1cm5zLCBidXQgbm8gaGFpcnBpbiB0dXJucy4gUmlkaW5nIHJlcXVpcmVzIGNhcmUgYW5kIGF0dGVudGlvbiwgYnV0IG5vIHNwZWNpYWwgc2tpbGwuIE9ic3RhY2xlcyBjYW4gYmUgcmlkZGVuIG92ZXIuIERpZmZpY3VsdCB0byByaWRlIHVwaGlsbC48L2JyPlN1cmZhY2U6IGxvb3NlIHN1cmZhY2UgcG9zc2libGUsIHNtYWxsIHJvb3RzIGFuZCBzdG9uZXM8L2JyPk9ic3RhY2xlczogc21hbGwgb2JzdGFjbGVzLCB3YXRlciBndXR0ZXIsIGVyb3Npb24gZGFtYWdlPC9icj5HcmFkaWVudDogPCA0MCU8L2JyPkJlbmRzOiB3aWRlPC9icj5Ecml2aW5nIHNraWxsczogYmFzaWMgZHJpdmluZyBza2lsbHMgcmVxdWlyZWQsIG9ic3RhY2xlcyBjYW4gYmUgcGFzc2VkIG92ZXI8L2JyPlwiKTtcbiAgICAgICAgXCIyXCI9PWJbXCJtdGI6c2NhbGVcIl0mJihhKz1cIk1vdW50YWluYmlrZXJvdXRlOiBPYnN0YWNsZXMgc3VjaCBhcyBsYXJnZSByb2NrcyBhbmQgc3RvbmVzLiBTb2lsIGlzIG9mdGVuIGxvb3NlLiAgU3RlcHMgYXJlIGV4cGVjdGVkLiBXaWRlciBoYWlycGluIHR1cm5zLCBzdGVlcG5lc3Mgb2YgdXAgdG8gNzAlLiBSZXF1aXJlcyBzb21lIGFkdmFuY2VkIHJpZGluZyBza2lsbHMuIE9ubHkgdmVyeSBza2lsbGVkIHJpZGVycyBjYW4gZ28gdXBoaWxsIG9uIHRoaXMuPC9icj5TdXJmYWNlOiBzdXJmYWNlIHVzdWFsbHkgbm90IGNvbXBhY3RlZCwgbGFyZ2VyIHJvb3RzIGFuZCBzdG9uZXMuPC9icj5PYnN0YWNsZXM6IHBsYWluIHN0ZXBzIGFuZCBzdGFpcnM8L2JyPkdyYWRpZW50OiA8IDcwJTwvYnI+QmVuZHM6IGVhc3kgaGFpcnBpbnM8L2JyPkRyaXZpbmcgc2tpbGxzOiBhZHZhbmNlZCBkcml2aW5nIHNraWxscyByZXF1aXJlZDwvYnI+XCIpO1wiM1wiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2Vyb3V0ZTogTWFueSBzZWN0aW9ucyB3aXRoIGxhcmdlIG9ic3RhY2xlcyBzdWNoIGFzIGJvdWxkZXJzIGFuZCBsYXJnZSByb290cy4gTWFueSBoYWlycGluIGFuZCBvZmYtYmFsYW5jZSB0dXJucy4gU2xpcHBlcnkgc3VyZmFjZSBhbmQgdGFsdXMgc2VjdGlvbnMgbWF5IGJlIGZvdW5kLiBUaGUgc3VyZmFjZSBtYXkgYmUgdmVyeSBzbGlwcGVyeS4gQ29uc3RhbnQgY29uY2VudHJhdGlvbiBhbmQgdmVyeSBnb29kIHNraWxscyBuZWVkZWQuIE5lYXJseSBpbXBvc3NpYmxlIHRvIHJpZGUgdXBoaWxsLjwvYnI+U3VyZmFjZTogbWFueSBsYXJnZSByb290cyAvIHJvY2tzIG9yIHNsaXBwZXJ5IGdyb3VuZCwgbG9vc2Ugc2NyZWU8L2JyPk9ic3RhY2xlczogZHJhZ3MsIGhhcmRseSBkcml2ZWFibGUgc3RlcHM8L2JyPkdyYWRpZW50OiA+NzAlPC9icj5CZW5kczogYmFpbCBsaWtlIGhhaXJwaW5zPC9icj5Ecml2aW5nIHNraWxsczogcGVyZmVjdCBiaWtlIGNvbnRyb2wgd2l0aCB0cmlhbCBza2lsbHMgcmVxdWlyZWQsIGxpa2UgbW92aW5nIHRoZSByZWFyIHdoZWVsIG9ubHkgaW4gaGFpcnBpbnM8L2JyPlwiKTtcbiAgICAgICAgXCI0XCI9PWJbXCJtdGI6c2NhbGVcIl0mJihhKz1cIk1vdW50YWluYmlrZXJvdXRlOiBWZXJ5IHN0ZWVwIGFuZCBkaWZmaWN1bHQsIHdpdGggc2VjdGlvbnMgaGF2aW5nIGxhcmdlIGJvdWxkZXJzIGFuZCByb290cy4gRnJlcXVlbnQgbG9vc2UgZGVicmlzLiBWZXJ5IHN0ZWVwIHNlY3Rpb25zIHdpdGggdmVyeSB0aWdodCBoYWlycGluIHR1cm5zIGFuZCBoaWdoIHN0ZXBzIHRoYXQgd2lsbCBjYXVzZSB0aGUgY2hhaW5yaW5nIHRvIGhpdCB0aGUgZ3JvdW5kLiBTb21lIHRyaWFscyB0ZWNobmlxdWVzIHdpbGwgYmUgbmVjZXNzYXJ5LiBOZWFybHkgaW1wb3NzaWJsZSB0byByaWRlIHVwaGlsbC48L2JyPlN1cmZhY2U6IG1hbnkgbGFyZ2Ugcm9vdHMgLyByb2NrcyBvciBzbGlwcGVyeSBncm91bmQsIGxvb3NlIHNjcmVlPC9icj5PYnN0YWNsZXM6IGRyYWdzLCBoYXJkbHkgZHJpdmVhYmxlIHN0ZXBzPC9icj5HcmFkaWVudDogPjcwJTwvYnI+QmVuZHM6IGJhaWwgbGlrZSBoYWlycGluczwvYnI+RHJpdmluZyBza2lsbHM6IHBlcmZlY3QgYmlrZSBjb250cm9sIHdpdGggdHJpYWwgc2tpbGxzIHJlcXVpcmVkLCBsaWtlIG1vdmluZyB0aGUgcmVhciB3aGVlbCBvbmx5IGluIGhhaXJwaW5zPC9icj5cIik7XG4gICAgICAgIFwiNVwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2Vyb3V0ZTogVmVyeSBzdGVlcCBhbmQgZGlmZmljdWx0IHdpdGggYmlnIGJvdWxkZXIgZmllbGRzIGFuZCBkZWJyaXMsIGFuZCBsYW5kc2xpZGVzLiBTcGVlZCBtdXN0IGJlIGNhcnJpZWQgZm9yIGNvdW50ZXItYXNjZW50cy4gSWYgYXQgYWxsIG9ubHkgc2hvcnQgcGFzc2FnZXMgYXJlIGF2YWlsYWJsZSBmb3IgYWNjZWxlcmF0aW5nIGFuZCBicmFraW5nLiBGYWxsZW4gdHJlZXMgbWF5IG1ha2UgdmVyeSBzdGVlcCBwYXNzYWdlcyBldmVuIG1vcmUgZGlmZmljdWx0LiBWZXJ5IGZldyBNb3VudGFpbmJpa2VycyBjYW4gYWN0dWFsbHkgcmlkZSBhdCB0aGlzIGxldmVsLiBNb3N0IHdpbGwgaGF2ZSB0byBwdXNoLjwvYnI+U3VyZmFjZTogY291bnRlci1hc2NlbnRzIC8gcm9ja3Mgb3Igc2xpcHBlcnkgZ3JvdW5kLCBsb29zZSBzY3JlZSAvIHBhdGggaXMgcmF0aGVyIGEgQWxwaW5lIGhpa2luZyAoPlQ0KSBwYXRoPC9icj5PYnN0YWNsZXM6IGRyYWdzLCBjb21iaW5hdGlvbnMgb2YgaGFyZGx5IGRyaXZlYWJsZSBzdGVwczwvYnI+R3JhZGllbnQ6ID43MCU8L2JyPkJlbmRzOiBiYWlsIGxpa2UgaGFpcnBpbnMgd2l0aCBvYnN0YWNsZXM8L2JyPkRyaXZpbmcgc2tpbGxzOiBleGNlbGxlbnQgYmlrZSBjb250cm9sIHdpdGggc3BlY2lhbCB0cmlhbCBza2lsbHMgcmVxdWlyZWQsIG1vdmluZyB0aGUgZnJvbnQgYW5kIHJlYXIgd2hlZWwgaXMgbGltaXRlZDwvYnI+XCIpO1xuICAgICAgICBcIjZcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlcm91dGU6IENsYXNzaWZ5IHdheXMgd2l0aCA2IHRoYXQgYXJlIG5vdCByaWRlYWJsZSBhdCBhbGwgZm9yIGEgbXRiaWtlci4gRS5nLiBDaGFpbnMgb3Igc3RlbXBsZXMgKG1ldGFsIHJ1bmdzKSBvbiBhIHZpYSBmZXJyYXRhIG9yIHNpbXBseSB1bnNlY3VyZWQgYWxwaW5lIHBhdGhlcyB0aGF0IGFyZSBub3QgZXZlbiBwYXJ0bHkgcmlkZWFibGUgZm9yIHRoZSB2ZXJ5IGJlc3QgbXRiaWtlcnMgKHVzaW5nIHRyaWFsIHRlY2huaXF1ZXMpLiBTdGVlcG5lc3MgaXMgb2Z0ZW4gPjQ1XFx1MDBiMC4gSWYgdXNlZCBmb3Igc2luZ2xlIHBvaW50cywgdGhlbiB0aGlzIGhpZ2hsaWdodHMgZXhjZXB0aW9uYWxseSBkaWZmaWN1bHQgc3BvdHMuIE9mdGVuIHNwb3R0aW5nIGlzIGltcG9zc2libGUgYW5kIGZhbGxpbmcgbWF5IGJlIGxldGhhbC48L2JyPlN1cmZhY2U6IFBhdGggaXMgcmF0aGVyIGEgQWxwaW5lIGhpa2luZyAoVDUgb3IgVDYpIHBhdGggb3IgYmFyZSByb2NrIHdpdGhvdXQgdmlzaWJsZSBwYXRoLjwvYnI+T2JzdGFjbGVzOiBTdGVwcyBvdmVyIDJtLCByb2NrIGZhY2VzLC4uLjwvYnI+R3JhZGllbnQ6ID4xMDAlPC9icj5CZW5kczogbm8gYmVuZHMgY2FuIGJlIGRpc3Rpbmd1aXNoZWQgYXMgc3VjaC48L2JyPkRyaXZpbmcgc2tpbGxzOiBvbmx5IHRoZSB2ZXJ5IGJlc3QgdHJpYWwgc3BlY2lhbGlzdHMgb3IgdmVydHJpZGVycyB3aWxsIHRyeSB0byByaWRlIHRoZXNlIHNwb3RzLiBXYWxraW5nIHRoZSBwbGFjZSBmaXJzdCB0byBmaW5kIGEgd2F5IHRvIGNsZWFyIGlzIG5lZWRlZC48L2JyPlwiKTtcbiAgICAgICAgXCIxMFwiPT1iLm1heHNwZWVkJiYoYSs9J3RyYWZmaWMtY2FsbWVkIHNlY3RvcjogbWF4c3BlZWQgMTAgS20vaCBhbmQgXCJyaWdodCBvdmVyIGxlZnRcIjwvYnI+Jyk7XCIzMFwiPT1iLm1heHNwZWVkJiYoYSs9J3RyYWZmaWMtY2FsbWVkIHNlY3RvcjogXCJyaWdodCBvdmVyIGxlZnRcIiBhbmQgbWF4c3BlZWQgMzAgS20vaDwvYnI+Jyk7XCI1MFwiPT1iLm1heHNwZWVkJiYoYSs9XCJtYXhzcGVlZCA1MCBLbS9oPC9icj5cIik7XCI3MFwiPT1iLm1heHNwZWVkJiYoYSs9XCJtYXhzcGVlZCA1MCBLbS9oPC9icj5cIik7XCI4MFwiPT1iLm1heHNwZWVkJiYoYSs9XCJtYXhzcGVlZCA4MCBLbS9oPC9icj5cIik7XCIxMDBcIj09Yi5tYXhzcGVlZCYmKGErPVwibWF4c3BlZWQgIDEwMCBLbS9oPC9icj5cIik7XCJub1wiPT1iLm92ZXJ0YWtpbmcmJihhKz1cIk5vIG92ZXJ0YWtpbmchPC9icj5cIik7XCJ5ZXNcIj09Yi5ub2V4aXQmJihhKz1cIm5vZXhpdDwvYnI+XCIpO1wieWVzXCI9PWIub25ld2F5JiYoYSs9XCJvbmV3YXk8L2JyPlwiKTtcImRlc2lnbmF0ZWRcIj09XG4gICAgICAgIGIucHJpb3JpdHlfcm9hZCYmKGErPVwicHJpb3JpdHkgcm9hZCBkZXNpZ25hdGVkPC9icj5cIik7XCJlbmRcIj09Yi5wcmlvcml0eV9yb2FkJiYoYSs9XCJwcmlvcml0eSByb2FkIGVuZHM8L2JyPlwiKTtcImVtZXJnZW5jeV9iYXlcIj09Yi5oaWdod2F5JiYoYSs9XCJlbWVyZ2VuY3kgYmF5PC9icj5cIik7XCJ5ZXNcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cInRyYWZmaWMgY2FsbWluZzwvYnI+XCIpO1wiYnVtcFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiYnVtcDwvYnI+XCIpO1wiY2hpY2FuZVwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiY2hpY2FuZTwvYnI+XCIpO1wiY2hva2VyXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJjaG9rZXI8L2JyPlwiKTtcImN1c2hpb25cIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImN1c2hpb248L2JyPlwiKTtcImh1bXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImh1bXA8L2JyPlwiKTtcImlzbGFuZFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiaXNsYW5kPC9icj5cIik7XG4gICAgICAgIFwicnVtYmxlX3N0cmlwXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJydW1ibGUgc3RyaXA8L2JyPlwiKTtcInRhYmxlXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJ0YWJsZTwvYnI+XCIpO2lmKFwicGFya2luZ1wiPT1iLmFtZW5pdHkmJihcInllc1wiPT1iLmZlZSYmKGErPVwiZmVlIHJlcXVpcmVkPGJyLz5cIiksYz1iW1wiY2FwYWNpdHk6d29tZW5cIl0sXCJcIiE9YyYmXCJub1wiIT1jJiZudWxsIT1jKSl7dmFyIGQ9XCJ1bmtvd25cIjtcInllc1wiIT1jJiYoZD1jKTthKz1cImxhZGllcyBwYXJraW5nIHNwYWNlcyAobnVtYmVyczogXCIrZCtcIikgPGJyLz5cIn1iLnBhcmtfcmlkZSYmKFwiYnVzXCI9PWIucGFya19yaWRlJiYoYSs9XCJidXMgY29ubmVjdGlvbjxici8+XCIpLFwidHJhbVwiPT1iLnBhcmtfcmlkZSYmKGErPVwidHJhbSBjb25uZWN0aW9uPGJyLz5cIiksXCJ1bmtub3duXCI9PWIucGFya19yaWRlJiYoYSs9XCJwYXJrIHJpZGUgdW5rb3duPGJyLz5cIikpO2JbXCJyYWlsd2F5OnBvc2l0aW9uXCJdJiYoYSs9XCJyYWlsd2F5PGJyLz5wb3NpdGlvbjogXCIrXG4gICAgICAgIGJbXCJyYWlsd2F5OnBvc2l0aW9uXCJdK1wiPGJyLz5cIik7Yi51aWNfcmVmJiYoYSs9XCJVSUM6IFwiK2IudWljX3JlZitcIjxici8+XCIpO3JldHVybiBhfSxmbkNvbnRlbnRTcG9ydHM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtcIjlwaW5cIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiA5cGluPGJyLz5cIik7XCIxMHBpblwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IDEwcGluPGJyLz5cIik7XCJhbWVyaWNhbl9mb290YmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGFtZXJpY2FuIGZvb3RiYWxsPGJyLz5cIik7XCJhaWtpZG9cIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBhaWtpZG88YnIvPlwiKTtcImFyY2hlcnlcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBhcmNoZXJ5PGJyLz5cIik7XCJhdGhsZXRpY3NcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBhdGhsZXRpY3M8YnIvPlwiKTtcImF1c3RyYWxpYW5fZm9vdGJhbGxcIj09Yi5zcG9ydCYmXG4gICAgKGErPVwicG9zc2libGUgc3BvcnQgOiBhdXN0cmFsaWFuIGZvb3RiYWxsPGJyLz5cIik7XCJiYXNlXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYmFzZTxici8+XCIpO1wiYmFkbWludG9uXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYmFkbWludG9uPGJyLz5cIik7XCJiYXNlYmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJhc2ViYWxsPGJyLz5cIik7XCJiYXNrZXRiYWxsXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYmFza2V0YmFsbDxici8+XCIpO1wiYmVhY2h2b2xsZXliYWxsXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYmVhY2h2b2xsZXliYWxsPGJyLz5cIik7XCJibXhcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBibXg8YnIvPlwiKTtcImJvdWxlc1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJvdWxlczxici8+XCIpO1wiYm91bGVcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBib3VsZTxici8+XCIpO1xuICAgICAgICBcImJvd2xzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYm93bHM8YnIvPlwiKTtcImJveGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJveGluZzxici8+XCIpO1wiY2FuYWRpYW5fZm9vdGJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBjYW5hZGlhbiBmb290YmFsbDxici8+XCIpO1wiY2Fub2VcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBjYW5vZTxici8+XCIpO1wiY2hlc3NcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBjaGVzczxici8+XCIpO1wiY2xpZmZfZGl2aW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY2xpZmYgZGl2aW5nPGJyLz5cIik7XCJjbGltYmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGNsaW1iaW5nPGJyLz5cIik7XCJjbGltYmluZ19hZHZlbnR1cmVcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBhZHZlbnR1cmUgY2xpbWJpbmc8YnIvPlwiKTtcImNyaWNrZXRcIj09XG4gICAgICAgIGIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY3JpY2tldDxici8+XCIpO1wiY3JpY2tldF9uZXRzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY3JpY2tldCBuZXRzPGJyLz5cIik7XCJjcm9xdWV0XCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY3JvcXVldDxici8+XCIpO1wiY3VybGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGN1cmxpbmc8YnIvPlwiKTtcImN5Y2xpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBjeWNsaW5nPGJyLz5cIik7aWYoXCJkYXJ0c1wiPT1iLnNwb3J0fHxcImRhcnRcIj09Yi5zcG9ydClhKz1cIkRhcnRzPGJyLz5cIjtcImRvZ19yYWNpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBkb2cgcmFjaW5nPGJyLz5cIik7XCJmZW5jaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogZmVuY2luZzxici8+XCIpO1wiZXF1ZXN0cmlhblwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGVxdWVzdHJpYW48YnIvPlwiKTtcbiAgICAgICAgXCJmb290YmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogYW1lcmljYW4gZm9vdGJhbGw8YnIvPlwiKTtcImZyZWVfZmx5aW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBmcmVlIGZseWluZzxici8+XCIpO1wiZ2FlbGljX2dhbWVzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBnYWVsaWMgZ2FtZXM8YnIvPlwiKTtcImdvbGZcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IGdvbGY8YnIvPlwiKTtcImd5bW5hc3RpY3NcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IGd5bW5hc3Rpazxici8+XCIpO1wiaG9ja2V5XCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBob2NrZXk8YnIvPlwiKTtcImhvcnNlc2hvZXNcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IGhvcnNlc2hvZXM8YnIvPlwiKTtcImhvcnNlX3JhY2luZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogaG9yc2UgcmFjaW5nPGJyLz5cIik7XCJpY2Vfc3RvY2tcIj09XG4gICAgICAgIGIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBpY2Ugc3RvY2s8YnIvPlwiKTtcImp1ZG9cIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IGp1ZG88YnIvPlwiKTtcImthcnRpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IGthcnRpbmc8YnIvPlwiKTtcImtpdGVzdXJmaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBraXRlc3VyZmluZzxici8+XCIpO1wia29yZmJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IGtvcmZiYWxsPGJyLz5cIik7XCJtb3RvclwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogbW90b3I8YnIvPlwiKTtcIm11bHRpXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBtdWx0aTxici8+XCIpO1wib2JzdGFjbGVfY291cnNlXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBvYnN0YWNsZSBjb3Vyc2U8YnIvPlwiKTtcIm9yaWVudGVlcmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogb3JpZW50ZWVyaW5nPGJyLz5cIik7XG4gICAgICAgIFwicGFkZGxlX3Rlbm5pc1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogcGFkZGxlLXRlbm5pczxici8+XCIpO1wicGFyYWdsaWRpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHBhcmFnbGlkaW5nPGJyLz5cIik7XCJQZWxvdGFcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IFBlbG90YTxici8+XCIpO1wicmFzcXVldFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogcmFjcXVldDxici8+XCIpO1wicm93aW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiByb3dpbmc8YnIvPlwiKTtcInJ1Z2J5X2xlYWd1ZVwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogcnVnYnkgbGVhZ3VlPGJyLz5cIik7XCJydWdieV91bmlvblwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogcnVnYnkgdW5pb248YnIvPlwiKTtcInJ1bm5pbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHJ1bm5pbmc8YnIvPlwiKTtcInNjdWJhX2RpdmluZ1wiPT1iLnNwb3J0JiZcbiAgICAgICAgKGErPVwicG9zc2libGUgc3BvcnQ6IHNjdWJhIGRpdmluZzxici8+XCIpO1wic2hvb3RpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHNob290aW5nPGJyLz5cIik7XCJza2F0aW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBza2F0aW5nPGJyLz5cIik7XCJza2F0ZWJvYXJkXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBza2F0ZWJvYXJkPGJyLz5cIik7XCJza2lpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHNraWluZzxici8+XCIpO1wic29jY2VyXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBzb2NjZXI8YnIvPlwiKTtcInN1cmZpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHN1cmZpbmc8YnIvPlwiKTtcInN3aW1taW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBzd2ltbWluZzxici8+XCIpO1widGFibGVfdGVubmlzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiB0YWJsZSB0ZW5uaXM8YnIvPlwiKTtcbiAgICAgICAgXCJ0YWVrd29uZG9cIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHRhZWt3b25kbzxici8+XCIpO1widGVhbV9oYW5kYmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogdGVhbSBoYW5kYmFsbDxici8+XCIpO1widGVubmlzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiB0ZW5uaXM8YnIvPlwiKTtcInRvYm9nZ2FuXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiB0b2JvZ2dhbjxici8+XCIpO1widm9sbGV5YmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogdm9sbGV5YmFsbDxici8+XCIpO1wid2F0ZXJfc2tpXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiB3YXRlciBza2k8YnIvPlwiKTtcIndlaWdodGxpZnRpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHdlaWdodGxpZnRpbmc8YnIvPlwiKTtcIndyZXN0bGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogd3Jlc3RsaW5nPGJyLz5cIik7cmV0dXJuIGF9O1xuZXhwb3J0IGZ1bmN0aW9uIGZuQXJ6dEluZm8oYil7dmFyIGE9XCJcIixjPVwiXCIsZD1iW1wiaGVhbHRoY2FyZTpzcGVjaWFsaXR5XCJdO1wiXCIhPWQmJihcImdlbmVyYWxcIj09ZCYmKGMrPVwiZ2VuZXJhbDxici8+XCIpLFwiYWxsZXJnb2xvZ3lcIj09ZCYmKGMrPVwiYWxsZXJnb2xvZ3k8YnIvPlwiKSxcImFuYWVzdGhldGljc1wiPT1kJiYoYys9XCJhbmFlc3RoZXRpY3M8YnIvPlwiKSxcImJpb2NoZW1pc3RyeVwiPT1kJiYoYys9XCJiaW9jaGVtaXN0cnk8YnIvPlwiKSxcImJpb2xvZ2ljYWxfaGFlbWF0b2xvZ3lcIj09ZCYmKGMrPVwiYmlvbG9naWNhbCBoYWVtYXRvbG9neTxici8+XCIpLFwiYmlvbG9neVwiPT1kJiYoYys9XCJiaW9sb2d5PGJyLz5cIiksXCJjYXJkaW9sb2d5XCI9PWQmJihjKz1cImNhcmRpb2xvZ3k8YnIvPlwiKSxcImNhcmRpYWNfc3VyZ2VyeVwiPT1kJiYoYys9XCJjYXJkaWFjIHN1cmdlcnk8YnIvPlwiKSxcImNoaWxkX3BzeWNoaWF0cnlcIj09ZCYmKGMrPVwiY2hpbGQgcHN5Y2hpYXRyeTxici8+XCIpLFwiZGVudGFsX29yYWxfbWF4aWxsb19mYWNpYWxfc3VyZ2VyeVwiPT1cbmQmJihjKz1cImRlbnRhbC0sIG9yYWwtLCBtYXhpbGxvLSBhbmQgZmFjaWFsLXN1cmdlcnk8YnIvPlwiKSxcImRlcm1hdG9sb2d5XCI9PWQmJihjKz1cImRlcm1hdG9sb2d5PGJyLz5cIiksXCJkZXJtYXRvdmVuZXJlb2xvZ3lcIj09ZCYmKGMrPVwiZGVybWF0b3ZlbmVyZW9sb2d5PGJyLz5cIiksXCJkaWFnbm9zdGljX3JhZGlvbG9neVwiPT1kJiYoYys9XCJkaWFnbm9zdGljIHJhZGlvbG9neTxici8+XCIpLFwiZW1lcmdlbmN5XCI9PWQmJihjKz1cImVtZXJnZW5jeTxici8+XCIpLFwiZW5kb2NyaW5vbG9neVwiPT1kJiYoYys9XCJlbmRvY3Jpbm9sb2d5PGJyLz5cIiksXCJnYXN0cm9lbnRlcm9sb2dpY2FsX3N1cmdlcnlcIj09ZCYmKGMrPVwiZ2FzdHJvZW50ZXJvbG9naWNhbCBzdXJnZXJ5PGJyLz5cIiksXCJnYXN0cm9lbnRlcm9sb2d5XCI9PWQmJihjKz1cImdhc3Ryb2VudGVyb2xvZ3k8YnIvPlwiKSxcImdlcmlhdHJpY3NcIj09ZCYmKGMrPVwiZ2VyaWF0cmljczxici8+XCIpLFwiZ3luYWVjb2xvZ3lcIj09ZCYmKGMrPVwiZ3luYWVjb2xvZ3k8YnIvPlwiKSxcblwiaGFlbWF0b2xvZ3lcIj09ZCYmKGMrPVwiaGFlbWF0b2xvZ3k8YnIvPlwiKSxcImhlcGF0b2xvZ3lcIj09ZCYmKGMrPVwiaGVwYXRvbG9neTxici8+XCIpLFwiaW1tdW5vbG9neVwiPT1kJiYoYys9XCJpbW11bm9sb2d5PGJyLz5cIiksXCJpbmZlY3Rpb3VzX2Rpc2Vhc2VzXCI9PWQmJihjKz1cImluZmVjdGlvdXMgZGlzZWFzZXM8YnIvPlwiKSxcImludGVuc2l2ZVwiPT1kJiYoYys9XCJpbnRlbnNpdmU8YnIvPlwiKSxcImludGVybmFsXCI9PWQmJihjKz1cImludGVybmFsPGJyLz5cIiksXCJtYXhpbGxvZmFjaWFsX3N1cmdlcnlcIj09ZCYmKGMrPVwibWF4aWxsb2ZhY2lhbCBzdXJnZXJ5PGJyLz5cIiksXCJuZXBocm9sb2d5XCI9PWQmJihjKz1cIm5lcGhyb2xvZ3k8YnIvPlwiKSxcIm5ldXJvbG9neVwiPT1kJiYoYys9XCJuZXVyb2xvZ3k8YnIvPlwiKSxcIm5ldXJvcGh5c2lvbG9neVwiPT1kJiYoYys9XCJuZXVyb3BoeXNpb2xvZ3k8YnIvPlwiKSxcIm5ldXJvcHN5Y2hpYXRyeVwiPT1kJiYoYys9XCJuZXVyb3BzeWNoaWF0cnk8YnIvPlwiKSxcIm5ldXJvc3VyZ2VyeVwiPT1cbmQmJihjKz1cIm5ldXJvc3VyZ2VyeTxici8+XCIpLFwibnVjbGVhclwiPT1kJiYoYys9XCJudWNsZWFyPGJyLz5cIiksXCJvY2N1cGF0aW9uYWxcIj09ZCYmKGMrPVwib2NjdXBhdGlvbmFsIDxici8+XCIpLFwib25jb2xvZ3lcIj09ZCYmKGMrPVwib25jb2xvZ3k8YnIvPlwiKSxcIm9waHRoYWxtb2xvZ3lcIj09ZCYmKGMrPVwib3BodGhhbG1vbG9neTxici8+XCIpLFwib3J0aG9wYWVkaWNzXCI9PWQmJihjKz1cIm9ydGhvcGFlZGljczxici8+XCIpLFwib3RvbGFyeW5nb2xvZ3lcIj09ZCYmKGMrPVwib3RvbGFyeW5nb2xvZ3k8YnIvPlwiKSxcInBhZWRpYXRyaWNfc3VyZ2VyeVwiPT1kJiYoYys9XCJwYWVkaWF0cmljIHN1cmdlcnk8YnIvPlwiKSxcInBhZWRpYXRyaWNzXCI9PWQmJihjKz1cInBhZWRpYXRyaWNzPGJyLz5cIiksXCJwYWxsaWF0aXZlXCI9PWQmJihjKz1cInBhbGxpYXRpdmU8YnIvPlwiKSxcInBoeXNpYXRyeVwiPT1kJiYoYys9XCJwaHlzaWF0cnk8YnIvPlwiKSxcInBsYXN0aWNfc3VyZ2VyeVwiPT1kJiYoYys9XCJwbGFzdGljIHN1cmdlcnk8YnIvPlwiKSxcblwicHJvY3RvbG9neVwiPT1kJiYoYys9XCJwcm9jdG9sb2d5PGJyLz5cIiksXCJwc3ljaGlhdHJ5XCI9PWQmJihjKz1cInBzeWNoaWF0cnk8YnIvPlwiKSxcInB1bG1vbm9sb2d5XCI9PWQmJihjKz1cInB1bG1vbm9sb2d5PGJyLz5cIiksXCJyYWRpb2xvZ3lcIj09ZCYmKGMrPVwicmFkaW9sb2d5PGJyLz5cIiksXCJyYWRpb3RoZXJhcHlcIj09ZCYmKGMrPVwicmFkaW90aGVyYXB5PGJyLz5cIiksXCJyaGV1bWF0b2xvZ3lcIj09ZCYmKGMrPVwicmhldW1hdG9sb2d5PGJyLz5cIiksXCJzdG9tYXRvbG9neVwiPT1kJiYoYys9XCJzdG9tYXRvbG9neTxici8+XCIpLFwic3VyZ2VyeVwiPT1kJiYoYys9XCJzdXJnZXJ5PGJyLz5cIiksXCJzdXJnaWNhbF9vbmNvbG9neVwiPT1kJiYoYys9XCJzdXJnaWNhbCBvbmNvbG9neTxici8+XCIpLFwidGhvcmFjaWNfc3VyZ2VyeVwiPT1kJiYoYys9XCJ0aG9yYWNpYyBzdXJnZXJ5PGJyLz5cIiksXCJ0cmFuc3BsYW50XCI9PWQmJihjKz1cInRyYW5zcGxhbnQ8YnIvPlwiKSxcInRyYXVtYVwiPT1kJiYoYys9XCJ0cmF1bWE8YnIvPlwiKSxcblwidHJvcGljYWxcIj09ZCYmKGMrPVwidHJvcGljYWw8YnIvPlwiKSxcInVyb2xvZ3lcIj09ZCYmKGMrPVwidXJvbG9neTxici8+XCIpLFwidmFzY3VsYXJfc3VyZ2VyeVwiPT1kJiYoYys9XCJ2YXNjdWxhciBzdXJnZXJ5PGJyLz5cIiksXCJ2ZW5lcmVvbG9neVwiPT1kJiYoYys9XCJ2ZW5lcmVvbG9neTxici8+XCIpLFwiYWN1cHVuY3R1cmVcIj09ZCYmKGMrPVwiYWN1cHVuY3R1cmU8YnIvPlwiKSxcIm5hdHVyb3BhdGh5XCI9PWQmJihjKz1cIm5hdHVyb3BhdGh5PGJyLz5cIiksXCJjaGlyb3ByYWN0aWNcIj09ZCYmKGMrPVwiY2hpcm9wcmFjdGljIDxici8+XCIpLFwiaG9tZW9wYXRoeVwiPT1kJiYoYys9XCJob21lb3BhdGh5PGJyLz5cIiksXCJvc3Rlb3BhdGh5XCI9PWQmJihjKz1cIm9zdGVvcGF0aHk8YnIvPlwiKSk7XCJcIiE9Yi5oZWFsdGhfc3BlY2lhbHR5JiYoXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZmFtaWx5X21lZGljaW5lXCJdJiYoYys9XCJmYW1pbHkgbWVkaWNpbmU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTplbWVyZ2VuY3lfbWVkaWNpbmVcIl0mJlxuKGMrPVwiZW1lcmdlbmN5IG1lZGljaW5lPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6YW5hZXN0aGVzaW9sb2d5XCJdJiYoYys9XCJhbmFlc3RoZXNpb2xvZ3k8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpkZXJtYXRvbG9neVwiXSYmKGMrPVwiZGVybWF0b2xvZ3k8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTplYXJfbm9zZV90aHJvYXRcIl0mJihjKz1cImVhciwgbm9zZSwgdGhyb2F0IChFTlQgc3BlY2lhbGlzdCk8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvY2N1cGF0aW9uYWxfbWVkaWNpbmVcIl0mJihjKz1cIm9jY3VwYXRpb25hbCBtZWRpY2luZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmludGVybmFsX21lZGljaW5lXCJdJiYoYys9XCJpbnRlcm5hbCBtZWRpY2luZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om5ldXJvbG9neVwiXSYmKGMrPVwibmV1cm9sb2d5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6b3BodGhhbG1vbG9neVwiXSYmXG4oYys9XCJvcGh0aGFsbW9sb2d5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cGFsbGlhdGl2ZV9tZWRpY2luZVwiXSYmKGMrPVwicGFsbGlhdGl2ZSBtZWRpY2luZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBzeWNoaWF0cnlcIl0mJihjKz1cInBzeWNoaWF0cnk8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpneW5hZWNvbG9neVwiXSYmKGMrPVwiZ3luYWVjb2xvZ3k8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTp1cm9sb2d5XCJdJiYoYys9XCJ1cm9sb2d5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cGFpbl9tZWRpY2luZVwiXSYmKGMrPVwicGFpbiBtZWRpY2luZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmVudmlyb25tZW50YWxfbWVkaWNpbmVcIl0mJihjKz1cImVudmlyb25tZW50YWwgbWVkaWNpbmU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTppbnRlbnNpdmVfY2FyZV9tZWRpY2luXCJdJiZcbihjKz1cImludGVuc2l2ZSBjYXJlIG1lZGljaW48YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpwYWVkaWF0cmljc1wiXSYmKGMrPVwicGFlZGlhdHJpY3M8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpwaHlzaWF0cnlcIl0mJihjKz1cInBoeXNpYXRyeTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnJhZGlvbG9neVwiXSYmKGMrPVwicmFkaW9sb2d5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6Z2VuZXJhbFwiXSYmKGMrPVwiZ2VuZXJhbDxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om9jY3VwYXRpb25hbF90aGVyYXB5XCJdJiYoYys9XCJvY2N1cGF0aW9uYWwgdGhlcmFweTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnB1bG1vbm9sb2d5XCJdJiYoYys9XCJwdWxtb25vbG9neTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmFjdXB1bmN0dXJlXCJdJiYoYys9XCJhY3VwdW5jdHVyZTxici8+XCIpLFwieWVzXCI9PVxuYltcImhlYWx0aF9zcGVjaWFsdHk6b3J0aG9wYWVkaWNzXCJdJiYoYys9XCJvcnRob3BhZWRpY3M8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpjaGlyb3ByYWN0aWNcIl0mJihjKz1cImNoaXJvcHJhY3RpYzxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnNwb3J0c19tZWRpY2luZVwiXSYmKGMrPVwic3BvcnRzIG1lZGljaW5lPGJyLz5cIikpO1wiXCIhPWMmJihhPWErXCJzdWJqZWN0czogXCIrKCc8ZGl2IGNsYXNzPVwiYzRnX29wZW5fdGV4dFwiPicrYytcIjwvZGl2PlwiKSk7cmV0dXJuIGF9XG5leHBvcnQgZnVuY3Rpb24gZm5LcmFmdHdlcmtJbmZvKGIpe3ZhciBhPVwiXCI7aWYoYltcImdlbmVyYXRvcjptZXRob2RcIl0pe2ErPVwibWV0aG9kIG9mIGdlbmVyYXRpb246IFwiO3N3aXRjaChiW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSl7Y2FzZSBcImNvbWJ1c3Rpb25cIjphKz1cImNvbWJ1c3Rpb25cIjticmVhaztjYXNlIFwidGhlcm1hbFwiOmErPVwidGhlcm1hbFwiO2JyZWFrO2Nhc2UgXCJwdW1waW5nXCI6YSs9XCJwdW1waW5nXCI7YnJlYWs7Y2FzZSBcInBob3Rvdm9sdGFpY1wiOmErPVwicGhvdG92b2x0YWljXCI7YnJlYWs7Y2FzZSBcImdhc2lmaWNhdGlvblwiOmErPVwiZ2FzaWZpY2F0aW9uXCI7YnJlYWs7Y2FzZSBcImFuYWVyb2JpY19kaWdlc3Rpb25cIjphKz1cImFuYWVyb2JpYyBkaWdlc3Rpb25cIjticmVhaztjYXNlIFwicHlyb2x5c2lzXCI6YSs9XCJweXJvbHlzaXNcIjticmVhaztjYXNlIFwiZmlzc2lvblwiOmErPVwiZmlzc2lvblwiO2JyZWFrO2Nhc2UgXCJmdXNpb25cIjphKz1cImZ1c2lvblwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmtub3duPGJyLz5cIn1hKz1cbiAgICBcIjxici8+XCJ9aWYoYi5wb3dlcl9zb3VyY2Upe2ErPVwicG93ZXIgc291cmNlOiBcIjtzd2l0Y2goYi5wb3dlcl9zb3VyY2Upe2Nhc2UgXCJwaG90b3ZvbHRhaWNcIjphKz1cInBob3Rvdm9sdGFpY1wiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmtub3duPGJyLz5cIn1hKz1cIjxici8+XCJ9YltcImdlbmVyYXRvcjpvdXRwdXQ6ZWxlY3RyaWNpdHlcIl0mJihhKz1cImVsZWN0cmljaXR5IGdlbmVyYXRpb246IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmVsZWN0cmljaXR5XCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6aGVhdFwiXSYmKGErPVwiaGVhdCBnZW5lcmF0aW9uOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpoZWF0XCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZFwiXSYmKGErPVwiY29sZCBnZW5lcmF0aW9uOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpjb2xkXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXRcIl0mJihhKz1cIm91dHB1dDogXCIrYltcImdlbmVyYXRvcjpvdXRwdXRcIl0rXCI8YnIvPlwiKTtcbiAgICBiW1wiZ2VuZXJhdG9yOm91dHB1dDpob3RfYWlyXCJdJiYoYSs9XCJob3QtYWlyIGdlbmVyYXRpb246IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmhvdF9haXJcIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dDpjb2xkX3dhdGVyXCJdJiYoYSs9XCJjb2xkIHdhdGVyIGdlbmVyYXRpb246IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRfd2F0ZXJcIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dDpjb2xkX2FpclwiXSYmKGErPVwiY29sZCBhaXIgZ2VuZXJhdGlvbjogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZF9haXJcIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dDpjb21wcmVzc2VkX2FpclwiXSYmKGErPVwiY29tcHJlc3NlZCBhaXIgZ2VuZXJhdGlvbjogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6Y29tcHJlc3NlZF9haXJcIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dDpzdGVhbVwiXSYmKGErPVwic3RlYW0gZ2VuZXJhdGlvbjogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6c3RlYW1cIl0rXG4gICAgICAgIFwiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6dmFjdXVtXCJdJiYoYSs9XCJ2YWN1dW0gZ2VuZXJhdGlvbjogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6dmFjdXVtXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6YmF0dGVyeV9jaGFyZ2luZ1wiXSYmKGErPVwiYmF0dGVyeSBjaGFyZ2luZzogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6YmF0dGVyeV9jaGFyZ2luZ1wiXStcIjxici8+XCIpO1wiUFdSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiQldSLTFcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItMlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkJXUi0zXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK1xuICAgICAgICBiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkJXUi00XCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiQldSLTVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItNlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIlBIV1JcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJHQ1JcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJGQlJcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1xuICAgICAgICBcIjxici8+XCIpO1wiUkJNSy0xMDAwXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiUkJNSy0xNTAwXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiVlZFUlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkNBTkRVXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiQ1BSLTEwMDBcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJFUFJcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XG4gICAgXCJ0b2thbWFrXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wic3RlbGxhcmF0b3JcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJJQ0ZcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJjb2xkLWZ1c2lvblwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIndpbmRfdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSYmXCJob3Jpem9udGFsX2F4aXNcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgbWV0aG9kOiBob3Jpem9udGFsIGF4aXMgd2luZCB0dXJiaW5lPGJyLz5cIik7XCJ3aW5kX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjptZXRob2RcIl0mJlxuICAgIFwidmVydGljYWxfYXhpc1wiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciBtZXRob2Q6IHZlcnRpY2FsIGF4aXMgd2luZCB0dXJiaW5lPGJyLz5cIik7XCJmcmFuY2lzX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogZnJhbmNpcy10dXJiaW5lPGJyLz5cIik7XCJrYXBsYW5fdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBrYXBsYW4tdHVyYmluZTxici8+XCIpO1wicGVsdG9uX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogcGVsdG9uLXR1cmJpbmU8YnIvPlwiKTtcInN0cmVhbVwiPT1iW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSYmXCJob3Jpem9udGFsX2F4aXNcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgbWV0aG9kOiBob3Jpem9udGFsIGF4aXMgc2VhIGN1cnJlbnQgcG93ZXIgc3RhdGlvbjxici8+XCIpO1wic3RyZWFtXCI9PWJbXCJnZW5lcmF0b3I6bWV0aG9kXCJdJiZcbiAgICBcInZlcnRpY2FsX2F4aXNcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogdmVydGljYWwgYXhpcyBzZWEgY3VycmVudCBwb3dlciBzdGF0aW9uPGJyLz5cIik7XCJzdGVhbV90dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IHN0ZWFtIHR1cmJpbmU8YnIvPlwiKTtcImhlYXRfcHVtcFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBoZWF0IHB1bXA8YnIvPlwiKTtcInNvbGFyX3RoZXJtYWxfY29sbGVjdG9yXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IHNvbGFyIHRoZXJtYWwgY29sbGVjdG9yPGJyLz5cIik7XCJzb2xhcl9waG90b3ZvbHRhaWNfcGFuZWxcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogc29sYXIgcGhvdG92b2x0YWljIHBhbmVsPGJyLz5cIik7XCJzdGVhbV9nZW5lcmF0b3JcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XG4gICAgICAgIFwiZ2VuZXJhdG9yIHR5cGU6IHN0ZWFtIGdlbmVyYXRvcjxici8+XCIpO1wiZ2FzX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogZ2FzIHR1cmJpbmU8YnIvPlwiKTtcImNvbWJpbmVkX2N5Y2xlXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IGNvbWJpbmVkIGN5Y2xlPGJyLz5cIik7XCJyZWNpcHJvY2F0aW5nX2VuZ2luZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiByZWNpcHJvY2F0aW5nIGVuZ2luZTxici8+XCIpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuV2VydHN0b2ZmaW5mbyhiKXt2YXIgYT1cIlwiO2lmKFwiY29udGFpbmVyXCI9PWIucmVjeWNsaW5nX3R5cGV8fFwiY2VudHJlXCI9PWIucmVjeWNsaW5nX3R5cGV8fFwicmVjeWNsaW5nXCI9PWIuYW1lbml0eSlcInllc1wiPT1iW1wicmVjeWNsaW5nOmdsYXNzXCJdJiYoYSs9XCJnbGFzcyBjb250YWluZXI8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnNob2VzXCJdJiYoYSs9XCJzaG9lIGNvbnRhaW5lcjwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6Y29va2luZ19vaWxcIl0mJihhKz1cInJlY3ljbGluZyBvZiBjb29raW5nIG9pbDwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6cGFwZXJcIl0mJihhKz1cInJlY3ljbGluZyBvZiBwYXBlcjwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6ZW5naW5lX29pbFwiXSYmKGErPVwicmVjeWNsaW5nIG9mIGVuZ2luZSBvaWw8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmNsb3RoZXNcIl0mJihhKz1cInJlY3ljbGluZyBvZiBjbG90aGVzPC9icj5cIiksXG5cInllc1wiPT1iW1wicmVjeWNsaW5nOmNhcl9iYXR0ZXJpZXNcIl0mJihhKz1cInJlY3ljbGluZyBvZiBjYXIgYmF0dGVyaWVzPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjYW5zXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgY2FuczwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6c2NyYXBfbWV0YWxcIl0mJihhKz1cInJlY3ljbGluZyBvZiBzY3JhcCBtZXRhbDwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6cGxhc3RpY1wiXSYmKGErPVwicmVjeWNsaW5nIG9mIHBsYXN0aWM8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmJhdHRlcnJpZXNcIl0mJihhKz1cInJlY3ljbGluZyBvZiBiYXR0ZXJyaWVzPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpwbGFzdGljX2JvdHRsZXNcIl0mJihhKz1cInJlY3ljbGluZyBvZiBwbGFzdGljIGJvdHRsZXM8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmdyZWVuX3dhc3RlXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgZ3JlZW4gd2FzdGU8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmhhcmRjb3JlXCJdJiZcbihhKz1cInJlY3ljbGluZyBvZiBoYXJkY29yZTwvYnI+XCIpO3JldHVybiBhfVxudmFyIGZuQ29udGVudEdlbmVyYWxJbmZvcm1hdGlvbnM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtiLndpZHRoJiYoYSs9XCJ3aWR0aDogXCIrYi53aWR0aCtcIiBtPGJyLz5cIik7Yi5oZWlnaHQmJihhKz1cImhlaWdodDogXCIrYi5oZWlnaHQrXCIgbTxici8+XCIpO2IubWF4d2lkdGgmJihhKz1cIm1heHdpZHRoOiBcIitiLm1heHdpZHRoK1wiIG08YnIvPlwiKTtiLm1heGhlaWdodCYmKGErPVwibWF4aGVpZ2h0OiBcIitiLm1heGhlaWdodCtcIiBtPGJyLz5cIik7Yi5tYXh3ZWlnaHQmJihhKz1cIm1heHdlaWdodDogXCIrYi5tYXh3ZWlnaHQrXCIgdDxici8+XCIpO2IubWF4c3BlZWQmJihhKz1cIm1heHNwZWVkOiBcIitiLm1heHNwZWVkK1wiIGttL2g8YnIvPlwiKTtiLm1pbl9hZ2UmJihhKz1cIm1pbmltdW0gYWdlOiBcIitiLm1pbl9hZ2UrXCI8YnIvPlwiKTtiLm1heF9hZ2UmJihhKz1cIm1heGltdW0gYWdlOiBcIitiLm1heF9hZ2UrXCI8YnIvPlwiKTtcInllc1wiPT1iLm51ZGlzbSYmKGErPVwibnVkaXNtPGJyLz5cIik7XCJ5ZXNcIj09Yi5ydWlucyYmXG4oYSs9XCJydWluczxici8+XCIpO2IuZWxlJiYoYSs9XCJoZWlnaHQgYWJvdmUgc2VhIGxldmVsOiBcIitiLmVsZStcIiBtPGJyLz5cIik7YltcInhtYXM6ZGF5X2RhdGVcIl0mJihhKz1cInBlcmlvZCBmcm9tIC0gdGlsbDogXCIrYltcInhtYXM6ZGF5X2RhdGVcIl0rXCI8YnIvPlwiKTtiW1wicm90b3I6ZGlhbWV0ZXJcIl0mJihhKz1cImRpYW1ldGVyIG9mIHJvdG9yOiBcIitiW1wicm90b3I6ZGlhbWV0ZXJcIl0rXCIgbTxici8+XCIpO2JbXCJ4bWFzOm5vdGVcIl0mJihhKz1cImluZm9ybWF0aW9uOiBcIitiW1wieG1hczpub3RlXCJdK1wiPGJyLz5cIik7XCJwb3J0XCI9PWJbXCJzZWFtYXJrOmJlYWNvbl9sYXRlcmFsOmNhdGVnb3J5XCJdJiYoYSs9XCJwb3J0PGJyLz5cIik7XCJzdGFyYm9hcmRcIj09YltcInNlYW1hcms6YmVhY29uX2xhdGVyYWw6Y2F0ZWdvcnlcIl0mJihhKz1cInN0YXJib2FyZDxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6cmV0YWlsXCJdJiYoYSs9XCJyZXRhaWwgYmljeWNsZXM8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOnJlcGFpclwiXSYmXG4oYSs9XCJyZXBhaXIgYmljeWNsZXM8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOnJlbnRhbFwiXSYmKGErPVwicmVudGFsIGJpY3ljbGVzPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpwdW1wXCJdJiYoYSs9XCJ1c2Ugb2YgYSBwdW1wIGlzIHBvc3NpYmxlPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpkaXlcIl0mJihhKz1cImRpeSBpcyBwb3NzaWJsZTxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6Y2xlYW5pbmdcIl0mJihhKz1cImNsZWFuaW5nIGJpY3ljbGVzPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpzZWNvbmRfaGFuZFwiXSYmKGErPVwic2FsZSBvZiBzZWNvbmQgaGFuZCBiaWN5Y2xlczxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6Y2hhcmdpbmdcIl0mJihhKz1cImNoYXJnaW5nIGVsZWN0cmljIGJpa2VzIGlzIHBvc3NpYmxlPGJyLz5cIik7XCJ5ZXNcIj09Yi5jYWZlJiYoYSs9XCJjYWZlPGJyLz5cIik7XCJ5ZXNcIj09Yi5icmVha2Zhc3QmJlxuKGErPVwiYnJlYWtmYXN0PGJyLz5cIik7XCJ5ZXNcIj09Yi5zbmFjayYmKGErPVwic25hY2s8YnIvPlwiKTtcInllc1wiPT1iLmluZG9vcl9zZWF0aW5nJiYoYSs9XCJpbmRvb3Igc2VhdGluZzxici8+XCIpO1wieWVzXCI9PWIub3V0ZG9vcl9zZWF0aW5nJiYoYSs9XCJvdXRkb29yIHNlYXRpbmc8YnIvPlwiKTtcInllc1wiPT1iLnNlbGZfc2VydmljZSYmKGErPVwic2VsZiBzZXJ2aWNlPGJyLz5cIik7XCJ5ZXNcIj09Yi5iYWtlaG91c2UmJihhKz1cImJha2Vob3VzZTxici8+XCIpO1wieWVzXCI9PWIucGFzdHJ5X3Nob3AmJihhKz1cInBhc3RyeSBzaG9wPGJyLz5cIik7XCJ5ZXNcIj09Yi5mYWlyX3RyYWRlJiYoYSs9XCJmYWlyIHRyYWRlPGJyLz5cIik7XCJvbmx5XCI9PWIuZmFpcl90cmFkZSYmKGErPVwib25seSBmYWlyIHRyYWRlPGJyLz5cIik7XCJub1wiPT1iLmZhaXJfdHJhZGUmJihhKz1cIm5vIGZhaXIgdHJhZGU8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50SGVhbHRoY2FyZT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKFwiZG9jdG9yc1wiPT1cbiAgICBiLmFtZW5pdHl8fFwicGh5c2ljaWFuXCI9PWIub2ZmaWNlfHxcImRvY3RvclwiPT1iLmhlYWx0aGNhcmUpYSs9Zm5Bcnp0SW5mbyhiKSxiLm1lZGljYWxfYXJlYSYmKGErPWIubWVkaWNhbF9hcmVhK1wiPGJyLz5cIiksYi50eXBlJiYoYSs9Yi50eXBlK1wiPGJyLz5cIiksYltcImRvY3RvcnM6ZGVcIl0mJihhKz1iW1wiZG9jdG9yczpkZVwiXStcIjxici8+XCIpLGJbXCJub3RlOmRlXCJdJiYoYSs9YltcIm5vdGU6ZGVcIl0rXCI8YnIvPlwiKTtcInllc1wiPT1iLmRpc3BlbnNpbmcmJihhKz1cInBoYXJtYWN5IHdpdGggZGlzcGVuc2luZzxici8+XCIpO1wiYWJ1c2VkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBhYnVzZWQgcGVvcGxlPGJyLz5cIik7XCJjaGlsZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogY2hpbGRyZW48YnIvPlwiKTtcImRpc2FibGVkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBkaXNhYmxlZCBwZW9wbGU8YnIvPlwiKTtcbiAgICBcImRpc2Vhc2VkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBkaXNlYXNlZCBwZW9wbGU8YnIvPlwiKTtcImRydWdfYWRkaWN0ZWRcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cInNvY2lhbCBmYWNpbGl0eSBmb3I6IGRydWcgYWRkaWN0ZWQgcGVvcGxlPGJyLz5cIik7XCJob21lbGVzc1wiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogaG9tZWxlc3M8YnIvPlwiKTtcImp1dmVuaWxlXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBqdXZlbmlsZSBhbmQgdGVlbmFnZXI8YnIvPlwiKTtcIm1lbnRhbF9oZWFsdGhcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cInNvY2lhbCBmYWNpbGl0eSBmb3I6IHBlb3BsZSB3aXRoIG1lbnRhbCBoZWFsdGggcHJvYmxlbXM8YnIvPlwiKTtcIm1pZ3JhbnRcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJlxuICAgIChhKz1cInNvY2lhbCBmYWNpbGl0eSBmb3I6IG1pZ3JhbnRzPGJyLz5cIik7XCJvcnBoYW5cIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cInNvY2lhbCBmYWNpbGl0eSBmb3I6IG9ycGhhbnM8YnIvPlwiKTtcInNlbmlvclwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogc2VuaW9yczxici8+XCIpO1widW5kZXJwcml2aWxlZ2VkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiB1bmRlcnByaXZpbGVnZWQgcGVvcGxlPGJyLz5cIik7XCJ1bmVtcGxveWVkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiB1bmVtcGxveWVkPGJyLz5cIik7XCJ2aWN0aW1cIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cInNvY2lhbCBmYWNpbGl0eSBmb3I6IHZpY3RpbXM8YnIvPlwiKTtyZXR1cm4gYX07XG5leHBvcnQgZnVuY3Rpb24gZm5BZGRpdGlvbmFsQnVpbGRpbmdJbmZvcyhiKXt2YXIgYT1cIlwiO2JbXCJidWlsZGluZzpjb2xvclwiXSYmKGErPVwiYnVpbGRpbmcgY29sb3I6IFwiK2JbXCJidWlsZGluZzpjb2xvclwiXStcIjwvYnI+XCIpO2JbXCJidWlsZGluZzpoZWlnaHRcIl0mJihhKz1cImJ1aWxkaW5nIGhlaWdodDogXCIrYltcImJ1aWxkaW5nOmhlaWdodFwiXStcIiBtPC9icj5cIik7YltcImJ1aWxkaW5nOmxldmVsXCJdJiYoYSs9XCJsZXZlbDogXCIrYltcImJ1aWxkaW5nOmxldmVsXCJdK1wiPC9icj5cIik7YltcImJ1aWxkaW5nOnBhcnRcIl0mJihhKz1cImJ1aWxkaW5nIHBhcnQ6IFwiK2JbXCJidWlsZGluZzpwYXJ0XCJdK1wiPC9icj5cIik7YltcInJvb2Y6Y29sb3JcIl0mJihhKz1cInJvb2YgY29sb3I6IFwiK2JbXCJyb29mOmNvbG91clwiXStcIjwvYnI+XCIpO2JbXCJyb29mOnNoYXBlXCJdJiYoYSs9XCJyb29mIHNoYXBlOiBcIitiW1wicm9vZjpzaGFwZVwiXStcIjwvYnI+XCIpO2JbXCJyb29mOmhlaWdodFwiXSYmKGErPVwicm9vZiBoZWlnaHQ6IFwiK2JbXCJyb29mOmhlaWdodFwiXStcbiAgICBcIiBtPC9icj5cIik7YltcInJvb2Y6bWF0ZXJpYWxcIl0mJihhKz1cInJvb2YgbWF0ZXJpYWw6IFwiK2JbXCJyb29mOm1hdGVyaWFsXCJdK1wiIDwvYnI+XCIpO2JbXCJyb29mOm9yaWVudGF0aW9uXCJdJiYoYSs9XCJyb29mIG9yaWVudGF0aW9uOiBcIitiW1wicm9vZjpvcmllbnRhdGlvblwiXStcIiA8L2JyPlwiKTtiW1wicm9vZjpkaXJlY3Rpb25cIl0mJihhKz1cInJvb2YgZGlyZWN0aW9uOiBcIitiW1wicm9vZjpkaXJlY3Rpb25cIl0rXCIgPC9icj5cIik7YltcImJ1aWxkaW5nOnR5cGVcIl0mJihhKz1cImJ1aWxkaW5nIHR5cGU6IFwiK2JbXCJidWlsZGluZzp0eXBlXCJdK1wiPC9icj5cIik7cmV0dXJuIGF9XG5leHBvcnQgZnVuY3Rpb24gZm5TaWNoZXJoZWl0QWRkaXRpb25hbChiKXt2YXIgYT1cIlwiO1wic3VydmVpbGxhbmNlXCI9PWIubWFuX21hZGUmJihcImluZG9vclwiPT1iLnN1cnZlaWxsYW5jZSYmKGErPVwiaW5kb29yIHN1cnZlaWxsYW5jZVwiKSxcIm91dGRvb3JcIj09Yi5zdXJ2ZWlsbGFuY2UmJihhKz1cIm91dGRvb3Igc3VydmVpbGxhbmNlXCIpLFwicHVibGljXCI9PWIuc3VydmVpbGxhbmNlJiYoYSs9XCJwdWJsaWMgc3VydmVpbGxhbmNlXCIpLFwiY2FtZXJhXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6dHlwZVwiXSYmKGErPVwidHlwZSBvZiBzdXJ2ZWlsbGFuY2U6IGNhbWVyYVwiKSxcImd1YXJkXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6dHlwZVwiXSYmKGErPVwidHlwZSBvZiBzdXJ2ZWlsbGFuY2U6IGd1YXJkXCIpLFwiQUxQUlwiPT1iW1wic3VydmVpbGxhbmNlOnR5cGVcIl0mJihhKz1cInR5cGUgb2Ygc3VydmVpbGxhbmNlOiBBTFBSXCIpLFwidG93blwiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cInpvbmUgb2Ygc3VydmVpbGxhbmNlOiB0b3duXCIpLFxuXCJwYXJraW5nXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiem9uZSBvZiBzdXJ2ZWlsbGFuY2U6IHBhcmtpbmdcIiksXCJ0cmFmZmljXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiem9uZSBvZiBzdXJ2ZWlsbGFuY2U6IHRyYWZmaWNcIiksXCJzaG9wXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiem9uZSBvZiBzdXJ2ZWlsbGFuY2U6IHNob3BcIiksXCJiYW5rXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiem9uZSBvZiBzdXJ2ZWlsbGFuY2U6IGJhbmtcIiksXCJidWlsZGluZ1wiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cInpvbmUgb2Ygc3VydmVpbGxhbmNlOiBidWlsZGluZ1wiKSk7cmV0dXJuIGF9XG5leHBvcnQgZnVuY3Rpb24gZm5XcmVja0luZm8oYil7dmFyIGE9XCJcIjtcIndyZWNrXCI9PWIuaGlzdG9yaWMmJihiW1wid3JlY2s6ZGF0ZV9zdW5rXCJdJiYoYSs9XCJzdW5rOiBcIitiW1wid3JlY2s6ZGF0ZV9zdW5rXCJdK1wiPGJyLz5cIiksYltcIndyZWNrOmRlcHRoXCJdJiYoYSs9XCJkZXB0aDogXCIrYltcIndyZWNrOmRlcHRoXCJdK1wiPGJyLz5cIiksYltcIndyZWNrOmNsZWFyYW5jZVwiXSYmKGErPVwiY2xlYXJhbmNlOiBcIitiW1wid3JlY2s6Y2xlYXJhbmNlXCJdK1wiPGJyLz5cIiksYltcIndyZWNrOmRhdGVfY29tbWlzc2lvbmVkXCJdJiYoYSs9XCJjb21taXNzaW9uZWQ6IFwiK2JbXCJ3cmVjazpkYXRlX2NvbW1pc3Npb25lZFwiXStcIjxici8+XCIpLGJbXCJ3cmVjazpncm9zc190b25uYWdlXCJdJiYoYSs9XCJncm9zcyB0b25uYWdlOiBcIitiW1wid3JlY2s6Z3Jvc3NfdG9ubmFnZVwiXStcIjxici8+XCIpLGJbXCJ3cmVjazpsZW5ndGhcIl0mJihhKz1cImxlbmd0aDogXCIrYltcIndyZWNrOmxlbmd0aFwiXStcIjxici8+XCIpLGJbXCJ3cmVjazp3aWR0aFwiXSYmKGErPVxuICAgIFwid2lkdGg6IFwiK2JbXCJ3cmVjazp3aWR0aFwiXStcIjxici8+XCIpLGJbXCJ3cmVjazpjYXJnb1wiXSYmKGE9XCJ0aW1iZXJcIj09YltcIndyZWNrOmNhcmdvXCJdP2ErXCJjYXJnbzogdGltYmVyPGJyLz5cIjpcImNvYWxcIj09YltcIndyZWNrOmNhcmdvXCJdP2ErXCJjYXJnbzogY29hbDxici8+XCI6YSsoXCJjYXJnbzogXCIrYltcIndyZWNrOmNhcmdvXCJdK1wiPGJyLz5cIikpLFwieWVzXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2xvd190aWRlXCJdJiYoYSs9XCJ2aXNpYmxlIGF0IGxvdyB0aWRlOiB5ZXM8YnIvPlwiKSxcIm5vXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2xvd190aWRlXCJdJiYoYSs9XCJ2aXNpYmxlIGF0IGxvdyB0aWRlOiBubzxici8+XCIpLFwieWVzXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2hpZ2hfdGlkZVwiXSYmKGErPVwidmlzaWJsZSBhdCBoaWdoIHRpZGU6IHllczxici8+XCIpLFwibm9cIj09YltcIndyZWNrOnZpc2libGVfYXRfaGlnaF90aWRlXCJdJiYoYSs9XCJ2aXNpYmxlIGF0IGhpZ2ggdGlkZTogbm88YnIvPlwiKSxcInllc1wiPT1cbmIuYWNjZXNzJiYoYSs9XCJhY2Nlc3NpYmxlPGJyLz5cIiksXCJub1wiPT1iLmFjY2VzcyYmKGErPVwibm8gYWNjZXNzIHBvc3NpYmxlPGJyLz5cIiksXCJwZXJtaXRfcmVxdWlyZWRcIj09Yi5hY2Nlc3MmJihhKz1cInBlcm1pdCByZXF1aXJlZCBmb3IgYWNjZXM8YnIvPlwiKSk7cmV0dXJuIGF9XG5leHBvcnQgZnVuY3Rpb24gZm5LbG9zdGVyQWRkaXRpb25hbChiKXt2YXIgYT1cIlwiO2lmKGJbXCJtb25hc3Rlcnk6dHlwZVwiXSlzd2l0Y2goYltcIm1vbmFzdGVyeTp0eXBlXCJdKXtjYXNlIFwibW9uYXN0ZXJ5XCI6YSs9XCJ0eXBlOiBtb25hc3Rlcnk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb252ZW50XCI6YSs9XCJ0eXBlOiBjb252ZW50PGJyLz5cIjticmVhaztjYXNlIFwiY2Fub25yeVwiOmErPVwidHlwZTogY2Fub25yeTxici8+XCI7YnJlYWs7Y2FzZSBcImNvbW1hbmRyeVwiOmErPVwidHlwZTogY29tbWFuZHJ5PGJyLz5cIjticmVhaztjYXNlIFwiaGVybWl0YWdlXCI6YSs9XCJ0eXBlOiBoZXJtaXRhZ2U8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ0eXBlOiB1bmtub3duPGJyLz5cIn1iW1wiY29tbXVuaXR5OmdlbmRlclwiXSYmKFwibWFsZVwiPT1iW1wiY29tbXVuaXR5OmdlbmRlclwiXSYmKGErPVwiZ2VuZGVyOiBtYWxlPGJyLz5cIiksXCJmZW1hbGVcIj09YltcImNvbW11bml0eTpnZW5kZXJcIl0mJihhKz1cImdlbmRlcjogZmVtYWxlPGJyLz5cIikpO1xuICAgIGIucmVsaWdpb3VzX3JhbmsmJihcImFiYmV5XCI9PWIucmVsaWdpb3VzX3Jhbms/YSs9XCJyZWxpZ2lvdXMgcmFuazogYWJiZXk8YnIvPlwiOlwiYWJiZXlcIj09Yi5yZWxpZ2lvdXNfcmFuayYmKGErPVwicmVsaWdpb3VzIHJhbms6IGFiYmV5PGJyLz5cIikpO1wieWVzXCI9PWIuc2hyaW5lJiYoYSs9XCJmZWF0dXJlOiBzaHJpbmU8YnIvPlwiKTtcInllc1wiPT1iLnNhbmN0dWFyeSYmKGErPVwiZmVhdHVyZTogc2FuY3R1YXJ5PGJyLz5cIik7aWYoYi5yZWxpZ2lvbilzd2l0Y2goYi5yZWxpZ2lvbil7Y2FzZSBcImFuaW1pc3RcIjphKz1cInJlbGlnaW9uOiBhbmltaXN0PGJyLz48YnIvPlwiO2JyZWFrO2Nhc2UgXCJiYWhhaVwiOmErPVwicmVsaWdpb246IGJhaGFpPGJyLz5cIjticmVhaztjYXNlIFwiYnVkZGhpc3RcIjphKz1cInJlbGlnaW9uOiBidWRkaGlzdDxici8+XCI7YnJlYWs7Y2FzZSBcImNocmlzdGlhblwiOmErPVwicmVsaWdpb246IGNocmlzdGlhbjxici8+XCI7YnJlYWs7Y2FzZSBcImhpbmR1XCI6YSs9XCJyZWxpZ2lvbjogaGluZHU8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwiSWdsZXNpYU5pQ3Jpc3RvXCI6YSs9XCJyZWxpZ2lvbjogSWdsZXNpYU5pQ3Jpc3RvPGJyLz5cIjticmVhaztjYXNlIFwiamFpblwiOmErPVwicmVsaWdpb246IGphaW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJqZXdpc2hcIjphKz1cInJlbGlnaW9uOiBqZXdpc2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtdWx0aWZhaXRoXCI6YSs9XCJyZWxpZ2lvbjogbXVsdGlmYWl0aDxici8+XCI7YnJlYWs7Y2FzZSBcIm11c2xpbVwiOmErPVwicmVsaWdpb246IG11c2xpbTxici8+XCI7dHlwZSs9XCJNb3NxdWU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYWdhblwiOmErPVwicmVsaWdpb246IHBhZ2FuPGJyLz5cIjticmVhaztjYXNlIFwicGFzdGFmYXJpYW5cIjphKz1cInJlbGlnaW9uOiBwYXN0YWZhcmlhbjxici8+XCI7YnJlYWs7Y2FzZSBcInNjaWVudG9sb2dpc3RcIjphKz1cInJlbGlnaW9uOiBzY2llbnRvbG9naXN0PGJyLz5cIjticmVhaztjYXNlIFwic2hpbnRvXCI6YSs9XCJyZWxpZ2lvbjogc2hpbnRvPGJyLz5cIjticmVhaztjYXNlIFwic2lraFwiOmErPVxuICAgICAgICBcInJlbGlnaW9uOiBzaWtoPGJyLz5cIjticmVhaztjYXNlIFwic3Bpcml0dWFsaXN0XCI6YSs9XCJyZWxpZ2lvbjogc3Bpcml0dWFsaXN0PGJyLz5cIjticmVhaztjYXNlIFwidGFvaXN0XCI6YSs9XCJyZWxpZ2lvbjogdGFvaXN0PGJyLz5cIjticmVhaztjYXNlIFwidW5pdGFyaWFuXCI6YSs9XCJyZWxpZ2lvbjogdW5pdGFyaWFuPGJyLz5cIjticmVhaztjYXNlIFwieWF6aWRpXCI6YSs9XCJyZWxpZ2lvbjogeWF6aWRpPGJyLz5cIjticmVhaztjYXNlIFwiem9yb2FzdHJpYW5cIjphKz1cImVsaWdpb246IHpvcm9hc3RyaWFuPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwicmVsaWdpb246IHVua25vd248YnIvPlwifWlmKGIuZGVub21pbmF0aW9uKXN3aXRjaChiLmRlbm9taW5hdGlvbil7Y2FzZSBcImFuZ2xpY2FuXCI6YSs9XCJkZW5vbWluYXRpb246IEFuZ2xpY2FuPGJyLz48YnIvPlwiO2JyZWFrO2Nhc2UgXCJiYXB0aXN0XCI6YSs9XCJkZW5vbWluYXRpb246IEJhcHRpc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYXRob2xpY1wiOmErPVwiZGVub21pbmF0aW9uOiBDYXRob2xpYzxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJyb21hbl9jYXRob2xpY1wiOmErPVwiZGVub21pbmF0aW9uOiBSb21hbiBDYXRob2xpYzxici8+XCI7YnJlYWs7Y2FzZSBcIm9sZF9jYXRob2xpY1wiOmErPVwiZGVub21pbmF0aW9uOiBPbGQgQ2F0aG9saWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJncmVla19jYXRob2xpY1wiOmErPVwiZGVub21pbmF0aW9uOiBHcmVlayBDYXRob2xpYzxici8+XCI7YnJlYWs7Y2FzZSBcImV2YW5nZWxpY2FsXCI6YSs9XCJkZW5vbWluYXRpb246IEV2YW5nZWxpY2FsXCI7Y2FzZSBcImplaG92YWhzX3dpdG5lc3NcIjphKz1cImRlbm9taW5hdGlvbjogSmVob3ZhaHMgV2l0bmVzczxici8+XCI7YnJlYWs7Y2FzZSBcImx1dGhlcmFuXCI6YSs9XCJkZW5vbWluYXRpb246IEx1dGhlcmFuPGJyLz5cIjticmVhaztjYXNlIFwibWVubm9uaXRlXCI6YSs9XCJkZW5vbWluYXRpb246IE1lbm5vbml0ZTxici8+XCI7YnJlYWs7Y2FzZSBcIm1lc3NpYW5pY19qZXdpc2hcIjphKz1cImRlbm9taW5hdGlvbjogTWVzc2lhbmljIEpld2lzaDxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJtZXRob2Rpc3RcIjphKz1cImRlbm9taW5hdGlvbjogTWV0aG9kaXN0PGJyLz5cIjticmVhaztjYXNlIFwibW9ybW9uXCI6YSs9XCJkZW5vbWluYXRpb246IE1vcm1vbjxici8+XCI7YnJlYWs7Y2FzZSBcIm5ld19hcG9zdG9saWNcIjphKz1cImRlbm9taW5hdGlvbjogTmV3IEFwb3N0b2xpYzxici8+XCI7YnJlYWs7Y2FzZSBcIm9ydGhvZG94XCI6YSs9XCJkZW5vbWluYXRpb246IE9ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwiZ3JlZWtfb3J0aG9kb3hcIjphKz1cImRlbm9taW5hdGlvbjogR3JlZWsgT3J0aG9kb3g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb3B0aWNfb3J0aG9kb3hcIjphKz1cImRlbm9taW5hdGlvbjogY29wdGljIG9ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwicGVudGVjb3N0YWxcIjphKz1cImRlbm9taW5hdGlvbjogcGVudGVjb3N0YWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwcmVzYnl0ZXJpYW5cIjphKz1cImRlbm9taW5hdGlvbjogUHJlc2J5dGVyaWFuPGJyLz5cIjticmVhaztjYXNlIFwicHJvdGVzdGFudFwiOmErPVxuICAgICAgICBcImRlbm9taW5hdGlvbjogUHJvdGVzdGFudDxici8+XCI7YnJlYWs7Y2FzZSBcInF1YWtlclwiOmErPVwiZGVub21pbmF0aW9uOiBRdWFrZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyZWZvcm1lZFwiOmErPVwiZGVub21pbmF0aW9uOiBSZWZvcm1lZDxici8+XCI7YnJlYWs7Y2FzZSBcInJ1c3NpYW5fb3J0aG9kb3hcIjphKz1cImRlbm9taW5hdGlvbjogUnVzc2lhbi1PcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcInNldmVudGhfZGF5X2FkdmVudGlzdFwiOmErPVwiZGVub21pbmF0aW9uOiBTZXZlbnRoIERheSBBZHZlbnRpc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaHJpc3RpYW5fY29tbXVuaXR5XCI6YSs9XCJkZW5vbWluYXRpb246IENocmlzdGlhbiBDb21tdW5pdHk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhZHZlbnRpc3RcIjphKz1cImRlbm9taW5hdGlvbjogQWR2ZW50aXN0PGJyLz5cIjticmVhaztjYXNlIFwiYWxsaWFuY2VcIjphKz1cImRlbm9taW5hdGlvbjogQWxsaWFuY2U8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhc3NlbWJsaWVzX29mX2dvZFwiOmErPVxuICAgICAgICBcImRlbm9taW5hdGlvbjogQXNzZW1ibGllcyBvZiBHb2Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhcG9zdG9saWNcIjphKz1cImRlbm9taW5hdGlvbjogQXBvc3RvbGljPGJyLz5cIjticmVhaztjYXNlIFwiYXJtZW5pYW5fYXBvc3RvbGljXCI6YSs9XCJkZW5vbWluYXRpb246IEFybWVuaWFuIEFwb3N0b2xpYzxici8+XCI7YnJlYWs7Y2FzZSBcImFzc3lyaWFuXCI6YSs9XCJkZW5vbWluYXRpb246IEFzc3lyaWFuPGJyLz5cIjticmVhaztjYXNlIFwiY2hyaXN0X3NjaWVudGlzdFwiOmErPVwiZGVub21pbmF0aW9uOiBDaHJpc3QgU2NpZW50aXN0PGJyLz5cIjticmVhaztjYXNlIFwiY2h1cmNoX29mX3Njb3RsYW5kXCI6YSs9XCJkZW5vbWluYXRpb246IENodXJjaCBvZiBTY290bGFuZDxici8+XCI7YnJlYWs7Y2FzZSBcImN6ZWNob3Nsb3Zha19odXNzaXRlXCI6YSs9XCJkZW5vbWluYXRpb246IEN6ZWNob3Nsb3ZhayBIdXNzaXRlPGJyLz5cIjticmVhaztjYXNlIFwiZHV0Y2hfcmVmb3JtZWRcIjphKz1cImRlbm9taW5hdGlvbjogRHV0Y2ggUmVmb3JtZWQ8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwiZXhjbHVzaXZlX2JyZXRocmVuXCI6YSs9XCJkZW5vbWluYXRpb246IEV4Y2x1c2l2ZSBCcmV0aHJlbjxici8+XCI7YnJlYWs7Y2FzZSBcImZvdXJzcXVhcmVcIjphKz1cImRlbm9taW5hdGlvbjogRm91cnNxdWFyZTxici8+XCI7YnJlYWs7Y2FzZSBcImtpbWJhbmd1aXN0XCI6YSs9XCJkZW5vbWluYXRpb246IEtpbWJhbmd1aXN0PGJyLz5cIjticmVhaztjYXNlIFwibGl2aW5nX3dhdGVyc19jaHVyY2hcIjphKz1cImRlbm9taW5hdGlvbjogTGl2aW5nIFdhdGVycyBDaHVyY2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtYXJpYXZpdGVcIjphKz1cImRlbm9taW5hdGlvbjogTWFyaWF2aXRlPGJyLz5cIjticmVhaztjYXNlIFwibWFyb25pdGVcIjphKz1cImRlbm9taW5hdGlvbjogTWFyb25pdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtb3JhdmlhblwiOmErPVwiZGVub21pbmF0aW9uOiBNb3Jhdmlhbjxici8+XCI7YnJlYWs7Y2FzZSBcIm5hemFyZW5lXCI6YSs9XCJkZW5vbWluYXRpb246IE5hemFyZW5lPGJyLz5cIjticmVhaztcbiAgICAgICAgY2FzZSBcIm5vbmRlbm9taW5hdGlvbmFsXCI6YSs9XCJkZW5vbWluYXRpb246IE5vbmRlbm9taW5hdGlvbmFsPGJyLz5cIjticmVhaztjYXNlIFwib2xkX2JlbGlldmVyc1wiOmErPVwiZGVub21pbmF0aW9uOiBPbGQgQmVsaWV2ZXJzPGJyLz5cIjticmVhaztjYXNlIFwicG9saXNoX2NhdGhvbGljXCI6YSs9XCJkZW5vbWluYXRpb246IFBvbGlzaC1DYXRob2xpYzxici8+XCI7YnJlYWs7Y2FzZSBcInNhbHZhdGlvbl9hcm15XCI6YSs9XCJkZW5vbWluYXRpb246IFNhbHZhdGlvbiBBcm15PGJyLz5cIjticmVhaztjYXNlIFwic2FudG9fZGFpbWVcIjphKz1cImRlbm9taW5hdGlvbjogU2FudG8gRGFpbWU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZXJiaWFuX29ydGhvZG94XCI6YSs9XCJkZW5vbWluYXRpb246IFNlcmJpc2NoLU9ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwic3Bpcml0aXNtXCI6YSs9XCJkZW5vbWluYXRpb246IFNwaXJpdGlzbTxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRlZFwiOmErPVwiZGVub21pbmF0aW9uOiBVbml0ZWQ8YnIvPlwiO1xuICAgICAgICAgICAgYnJlYWs7Y2FzZSBcInVuaXRlZF9jaHVyY2hfb2ZfY2hyaXN0XCI6YSs9XCJkZW5vbWluYXRpb246IFVuaXRlZCBDaHVyY2ggb2YgQ2hyaXN0PGJyLz5cIjticmVhaztjYXNlIFwidW5pdGVkX2ZyZWVfY2h1cmNoX29mX3Njb3RsYW5kXCI6YSs9XCJkZW5vbWluYXRpb246IFVuaXRlZCBGcmVlIENodXJjaCBvZiBTY290bGFuZDxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRlZF9tZXRob2Rpc3RcIjphKz1cImRlbm9taW5hdGlvbjogVW5pdGVkIE1ldGhvZGlzdDxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRlZF9yZWZvcm1lZFwiOmErPVwiZGVub21pbmF0aW9uOiBVbml0ZWQgUmVmb3JtZWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bml0aW5nXCI6YSs9XCJkZW5vbWluYXRpb246IFVuaXRpbmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaHVyY2hfb2Zfc3dlZGVuXCI6YSs9XCJkZW5vbWluYXRpb246IENodXJjaCBvZiBTd2VkZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJtaXNzaW9uX2NvdmVuYW50X2NodXJjaF9vZl9zd2VkZW5cIjphKz1cImRlbm9taW5hdGlvbjogTWlzc2lvbiBDb3ZlbmFudCBDaHVyY2ggT2YgU3dlZGVuPGJyLz5cIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJhbHRlcm5hdGl2ZVwiOmErPVwiZGVub21pbmF0aW9uOiBhbHRlcm5hdGl2ZTxici8+XCI7YnJlYWs7Y2FzZSBcImFzaGtlbmF6aVwiOmErPVwiZGVub21pbmF0aW9uOiBhc2hrZW5hemk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJidWNoYXJpXCI6YSs9XCJkZW5vbWluYXRpb246IGJ1Y2hhcmk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb25zZXJ2YXRpdmVcIjphKz1cImRlbm9taW5hdGlvbjogY29uc2VydmF0aXZlPGJyLz5cIjticmVhaztjYXNlIFwiZWdhbGl0YXJpYW5cIjphKz1cImRlbm9taW5hdGlvbjogZWdhbGl0YXJpYW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJoYXNpZGljXCI6YSs9XCJkZW5vbWluYXRpb246IGhhc2lkaWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJodW1hbmlzdGljXCI6YSs9XCJkZW5vbWluYXRpb246IGh1bWFuaXN0aWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJrYWJiYWxhaFwiOmErPVwiZGVub21pbmF0aW9uOiBrYWJiYWxhaDxici8+XCI7YnJlYWs7Y2FzZSBcImthYmJhbGlzdGljXCI6YSs9XCJkZW5vbWluYXRpb246IGthYmJhbGlzdGljPGJyLz5cIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJrYXJhaXRlXCI6YSs9XCJkZW5vbWluYXRpb246IGthcmFpdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsaWJlcmFsXCI6YSs9XCJkZW5vbWluYXRpb246IGxpYmVyYWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsdWJhdml0Y2hcIjphKz1cImRlbm9taW5hdGlvbjogbHViYXZpdGNoPGJyLz5cIjticmVhaztjYXNlIFwibHViYXZpdGNoX21lc3NpYW5pY1wiOmErPVwiZGVub21pbmF0aW9uOiBsdWJhdml0Y2ggbWVzc2lhbmljPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfYmFnaGRhZGlcIjphKz1cImRlbm9taW5hdGlvbjogbWl6cmFjaGkgYmFnaGRhZGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtaXpyYWNoaV9jaGlkYVwiOmErPVwiZGVub21pbmF0aW9uOiBtaXpyYWNoaSBjaGlkYTxici8+XCI7YnJlYWs7Y2FzZSBcIm1penJhY2hpX2plcnVzYWxlbWl0ZVwiOmErPVwiZGVub21pbmF0aW9uOiBtaXpyYWNoaSBqZXJ1c2FsZW1pdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtaXpyYWNoaV9saXZvcm5vXCI6YSs9XCJkZW5vbWluYXRpb246IG1penJhY2hpIGxpdm9ybm88YnIvPlwiO1xuICAgICAgICAgICAgYnJlYWs7Y2FzZSBcIm1penJhY2hpX21vcm9jY2FuXCI6YSs9XCJkZW5vbWluYXRpb246IG1penJhY2hpIG1vcm9jY2FuPGJyLz5cIjticmVhaztjYXNlIFwibW9kZXJuX29ydGhvZG94XCI6YSs9XCJkZW5vbWluYXRpb246IG1vZGVybiBvcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcIm5lb19vcnRob2RveFwiOmErPVwiZGVub21pbmF0aW9uOiBuZW8gb3J0aG9kb3g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJub25kZW5vbWluYXRpb25hbFwiOmErPVwiZGVub21pbmF0aW9uOiBub25kZW5vbWluYXRpb25hbDxici8+XCI7YnJlYWs7Y2FzZSBcIm9ydGhvZG94XCI6YSs9XCJkZW5vbWluYXRpb246IG9ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwib3J0aG9kb3hfYXNoa2VuYXpcIjphKz1cImRlbm9taW5hdGlvbjogb3J0aG9kb3ggYXNoa2VuYXo8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvcnRob2RveF9zZWZhcmRcIjphKz1cImRlbm9taW5hdGlvbjogb3J0aG9kb3ggc2VmYXJkPGJyLz5cIjticmVhaztjYXNlIFwicHJvZ3Jlc3NpdmVcIjphKz1cbiAgICAgICAgICAgIFwiZGVub21pbmF0aW9uOiBwcm9ncmVzc2l2ZTxici8+XCI7YnJlYWs7Y2FzZSBcInJlY29uc3RydWN0aW9uaXN0XCI6YSs9XCJkZW5vbWluYXRpb246IHJlY29uc3RydWN0aW9uaXN0PGJyLz5cIjticmVhaztjYXNlIFwicmVmb3JtXCI6YSs9XCJkZW5vbWluYXRpb246IHJlZm9ybTxici8+XCI7YnJlYWs7Y2FzZSBcInJlbmV3YWxcIjphKz1cImRlbm9taW5hdGlvbjogcmVuZXdhbDxici8+XCI7YnJlYWs7Y2FzZSBcInNhbWFyaXRhblwiOmErPVwiZGVub21pbmF0aW9uOiBzYW1hcml0YW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZWZhcmRpXCI6YSs9XCJkZW5vbWluYXRpb246IHNlZmFyZGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZWZhcmRpX2Ftc3RlcmRhbVwiOmErPVwiZGVub21pbmF0aW9uOiBzZWZhcmRpIGFtc3RlcmRhbTxici8+XCI7YnJlYWs7Y2FzZSBcInNlZmFyZGlfbG9uZG9uXCI6YSs9XCJkZW5vbWluYXRpb246IHNlZmFyZGkgbG9uZG9uPGJyLz5cIjticmVhaztjYXNlIFwidHJhZGl0aW9uYWxcIjphKz1cImRlbm9taW5hdGlvbjogdHJhZGl0aW9uYWw8YnIvPlwiO1xuICAgICAgICAgICAgYnJlYWs7Y2FzZSBcInVsdHJhX29ydGhvZG94XCI6YSs9XCJkZW5vbWluYXRpb246IHVsdHJhIG9ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwidW5hZmZpbGlhdGVkXCI6YSs9XCJkZW5vbWluYXRpb246IHVuYWZmaWxpYXRlZDxici8+XCI7YnJlYWs7Y2FzZSBcInllbWVuaXRlXCI6YSs9XCJkZW5vbWluYXRpb246IHllbWVuaXRlPGJyLz5cIjticmVhaztjYXNlIFwieWVtZW5pdGVfYmFsYWRpXCI6YSs9XCJkZW5vbWluYXRpb246IHllbWVuaXRlIGJhbGFkaTxici8+XCI7YnJlYWs7Y2FzZSBcInllbWVuaXRlX3NoYW1pXCI6YSs9XCJkZW5vbWluYXRpb246IHllbWVuaXRlIHNoYW1pPGJyLz5cIjticmVhaztjYXNlIFwiYWhtYWRpeWFcIjphKz1cImRlbm9taW5hdGlvbjogYWhtYWRpeWE8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhbGFvdWl0ZVwiOmErPVwiZGVub21pbmF0aW9uOiBhbGFvdWl0ZTxici8+XCI7YnJlYWs7Y2FzZSBcImRydXplXCI6YSs9XCJkZW5vbWluYXRpb246IGRydXplPGJyLz5cIjticmVhaztjYXNlIFwiaWJhZGlcIjphKz1cbiAgICAgICAgICAgIFwiZGVub21pbmF0aW9uOiBpYmFkaTxici8+XCI7YnJlYWs7Y2FzZSBcImlzbWFpbGlcIjphKz1cImRlbm9taW5hdGlvbjogaXNtYWlsaTxici8+XCI7YnJlYWs7Y2FzZSBcInNoaWFcIjphKz1cImRlbm9taW5hdGlvbjogc2hpYTxici8+XCI7YnJlYWs7Y2FzZSBcInN1bm5pXCI6YSs9XCJkZW5vbWluYXRpb246IHN1bm5pPGJyLz5cIjticmVhaztjYXNlIFwibmljaGlyZW5cIjphKz1cImRlbm9taW5hdGlvbjogbmljaGlyZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJqb2RvX3NoaW5zaHVcIjphKz1cImRlbm9taW5hdGlvbjogam9kbyBzaGluc2h1PGJyLz5cIjticmVhaztjYXNlIFwiam9kb19zaHVcIjphKz1cImRlbm9taW5hdGlvbjogam9kbyBzaHU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ2YWpyYXlhbmFcIjphKz1cImRlbm9taW5hdGlvbjogdmFqcmF5YW5hPGJyLz5cIjticmVhaztjYXNlIFwic2hpbmdvbl9zaHVcIjphKz1cImRlbm9taW5hdGlvbjogc2hpbmdvbiBzaHU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ6ZW5cIjphKz1cImRlbm9taW5hdGlvbjogemVuPGJyLz5cIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJ0aGFpX21haGFuaWtheWFcIjphKz1cImRlbm9taW5hdGlvbjogdGhhaSBtYWhhbmlrYXlhPGJyLz5cIjticmVhaztjYXNlIFwidGhhaV90aGFtbWF5dXRcIjphKz1cImRlbm9taW5hdGlvbjogdGhhaSB0aGFtbWF5dXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhc2F0cnVcIjphKz1cImRlbm9taW5hdGlvbjogYXNhdHJ1PGJyLz5cIjticmVhaztjYXNlIFwiY2VsdGljXCI6YSs9XCJkZW5vbWluYXRpb246IGNlbHRpYzxici8+XCI7YnJlYWs7Y2FzZSBcImdyZWNvX3JvbWFuXCI6YSs9XCJkZW5vbWluYXRpb246IGdyZWNvIHJvbWFuPGJyLz5cIjticmVhaztjYXNlIFwid2ljY2FcIjphKz1cImRlbm9taW5hdGlvbjogd2ljY2E8YnIvPlwiO2JyZWFrO2Nhc2UgXCJpcmFuaVwiOmErPVwiZGVub21pbmF0aW9uOiBpcmFuaTxici8+XCI7YnJlYWs7Y2FzZSBcInBhcnNpXCI6YSs9XCJkZW5vbWluYXRpb246IHBhcnNpPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidW5rbm93bjxici8+XCJ9aWYoYi5jb21tdW5pdHkpc3dpdGNoKGIuY29tbXVuaXR5KXtjYXNlIFwiQUFcIjphKz1cbiAgICAgICAgXCJjb21tdW5pdHkgKEFBKTogQXVndXN0aW5pYW5zIG9mIHRoZSBBc3N1bXB0aW9uIDxici8+XCI7YnJlYWs7Y2FzZSBcIkJTQ01cIjphKz1cImNvbW11bml0eSAoQlNDTSk6IEFkb3JlcnMgb2YgdGhlIFNhY3JlZCBIZWFydCBvZiBKZXN1cyBvZiBNb250bWFydHJlIDxici8+XCI7YnJlYWs7Y2FzZSBcIkNCTVZcIjphKz1cImNvbW11bml0eSAoQ0JNVik6IEF1Z3VzdGluZXItQ2hvcmZyYXVlbiBCLk0uVi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJDT1wiOmErPVwiY29tbXVuaXR5IChDTyk6IE9yYXRvcmlhbnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDTUNcIjphKz1cImNvbW11bml0eSAoQ01DKTogQ29uZ3JlZ2F0aW9uIG9mIHRoZSBNb3RoZXIgQ28tUmVkZW1wdHJpeDxici8+XCI7YnJlYWs7Y2FzZSBcIkNSU1BcIjphKz1cImNvbW11bml0eSAoQ1JTUCk6IEtvbmdyZWdhdGlvbiBkZXIgUmVndWxhcmtsZXJpa2VyIHZvbSBobC4gUGF1bHVzIChCYXJuYWJpdGVuKTxici8+XCI7YnJlYWs7Y2FzZSBcIkNTSlwiOmErPVwiY29tbXVuaXR5IChDU0opOiBDYXJtZWwgU2FpbnQtSm9zZXBoPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcIkNTU1BcIjphKz1cImNvbW11bml0eSAoQ1NTUCk6IENvbmdyXFx1MDBlOWdhdGlvbiBkdSBTYWludC1Fc3ByaXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDU1NSXCI6YSs9XCJjb21tdW5pdHkgKENTU1IpOiBDb25nclxcdTAwZTlnYXRpb24gZHUgVHJcXHUwMGU4cyBTYWludCBSXFx1MDBlOWRlbXB0ZXVyPGJyLz5cIjticmVhaztjYXNlIFwiRkNKTVwiOmErPVwiY29tbXVuaXR5IChGQ0pNKTogRnJhbmNpc2NhbiBTaXN0ZXJzLCBEYXVnaHRlcnMgb2YgdGhlIFNhY3JlZCBIZWFydCBvZiBKZXN1cyBhbmQgTWFyeTxici8+XCI7YnJlYWs7Y2FzZSBcIkZNR0JcIjphKz1cImNvbW11bml0eSAoRk1HQik6IFN1b3JlIEZyYW5jZXNjYW5lIE1pc3Npb25hcmllIGRpIEdlc1xcdTAwZjkgQmFtYmlubzxici8+XCI7YnJlYWs7Y2FzZSBcIkZNSFwiOmErPVwiY29tbXVuaXR5KEZNSCk6IENvbmdyZWdhdGlvIEZpbGlhcnVtIE1hcmlhZSBTYW5jdGlzc2ltYWUgYWIgSG9ydG88YnIvPlwiO2JyZWFrO2Nhc2UgXCJGTU1cIjphKz1cbiAgICAgICAgXCJjb21tdW5pdHkgKEZNTSk6IEZyYW5jaXNjYWluZXMgbWlzc2lvbm5haXJlcyBkZSBNYXJpZTxici8+XCI7YnJlYWs7Y2FzZSBcIkZTQ1wiOmErPVwiY29tbXVuaXR5IChGU0MpOiBGclxcdTAwZThyZXMgZGVzIFxcdTAwYzljb2xlcyBjaHJcXHUwMGU5dGllbm5lczxici8+XCI7YnJlYWs7Y2FzZSBcIk1DQ0lcIjphKz1cImNvbW11bml0eSAoTUNDSSk6IE1pc3Npb25uYWlyZXMgY29tYm9uaWVucyBkdSBTYWNyXFx1MDBlOS1DXFx1MDE1M3VyPGJyLz5cIjticmVhaztjYXNlIFwiTVNGU1wiOmErPVwiY29tbXVuaXR5IChNU0ZTKTogTWlzc2lvbm5haXJlcyBkZSBTYWludCBGcmFuXFx1MDBlN29pcyBkZSBTYWxlczxici8+XCI7YnJlYWs7Y2FzZSBcIk9DYXJ0XCI6YSs9XCJjb21tdW5pdHkgKE9DYXJ0KTogT3JkZXIgb2YgdGhlIENhcnRodXNpYW5zPGJyLz5cIjticmVhaztjYXNlIFwiT0NDXCI6YSs9XCJjb21tdW5pdHkgKE9DQyk6IE9yZHJlIGRlIE5vdHJlIERhbWUgZHUgTW9udC1DYXJtZWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPQ0RcIjphKz1cbiAgICAgICAgXCJjb21tdW5pdHkgKE9DRCk6IE9yZHJlIGRlcyBDYXJtZXMgZFxcdTAwZTljaGF1eDxici8+XCI7YnJlYWs7Y2FzZSBcIk9DU09cIjphKz1cImNvbW11bml0eSAoT0NTTyk6IFRyYXBwaXN0cyAobGF0LiBPcmRvIENpc3RlcmNpZW5zaXMgU3RyaWN0aW9yaXMgT2JzZXJ2YW50aWFlKTxici8+XCI7YnJlYWs7Y2FzZSBcIk9GTVwiOmErPVwiY29tbXVuaXR5IChPRk0pOiBPcmRyZSBkZXMgRnJcXHUwMGU4cmVzIE1pbmV1cnMgKEZyYW56aXNrYW5lcik8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPRk1DYXBcIjphKz1cImNvbW11bml0eSAoT0ZNQ2FwKTogT3JkcmUgZGVzIEZyXFx1MDBlOHJlcyBNaW5ldXJzIENhcHVjaW5zPGJyLz5cIjticmVhaztjYXNlIFwiT0ZNQ29udlwiOmErPVwiY29tbXVuaXR5IChPRk1Db252KTogT3JkcmUgZGVzIEZyXFx1MDBlOHJlcyBNaW5ldXJzIENvbnZlbnR1ZWxzPGJyLz5cIjticmVhaztjYXNlIFwiT0ZTXCI6YSs9XCJjb21tdW5pdHkgKE9GUyk6IEZyYW5jaXNjYW5zIHNlY3VsYXIgVGhpcmQgT3JkZXI8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwiT01JXCI6YSs9XCJjb21tdW5pdHkgKE9NSSk6IE9ibGF0cyBkZSBNYXJpZTxici8+XCI7YnJlYWs7Y2FzZSBcIk9QXCI6YSs9XCJjb21tdW5pdHkgKE9QKTogT3JkcmUgZGVzIEZyXFx1MDBlOHJlcyBQclxcdTAwZWFjaGV1cnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPUHJhZW1cIjphKz1cImNvbW11bml0eSAoT1ByYWVtKTogT3JkcmUgZGVzIGNoYW5vaW5lcyByXFx1MDBlOWd1bGllcnMgZGUgUHJcXHUwMGU5bW9udHJcXHUwMGU5PGJyLz5cIjticmVhaztjYXNlIFwiT1NCXCI6YSs9XCJjb21tdW5pdHkgKE9TQik6IE9yZGVyIG9mIFNhaW50IEJlbmVkaWN0PGJyLz5cIjticmVhaztjYXNlIFwiT1NDXCI6YSs9XCJjb21tdW5pdHkgKE9TQyk6IE9yZHJlIGRlIFNhaW50ZS1DbGFpcmUgb3UgT3JkcmUgZGVzIFBhdXZyZXMgRGFtZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPU1NTXCI6YSs9XCJjb21tdW5pdHkgKE9TU1MpOiBPcmRyZSBkZSBTYWludGUtQnJpZ2l0dGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPVk1cIjphKz1cImNvbW11bml0eSAoT1ZNKTogT3JkZXIgb2YgdGhlIFZpc2l0YXRpb24gb2YgSG9seSBNYXJ5IChTYWxlc2lhbmVyaW5uZW4pPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcIlBTRFBcIjphKz1cImNvbW11bml0eSAoUFNEUCk6IFBldGl0ZXMgc1xcdTAxNTN1cnMgZGVzIHBhdXZyZXMgKEtsZWluZW4gU2Nod2VzdGVybiBkZXIgQXJtZW4pPGJyLz5cIjticmVhaztjYXNlIFwiUEZKXCI6YSs9XCJjb21tdW5pdHkgKFBGSik6IFBldGl0cyBGclxcdTAwZThyZXMgZGUgSlxcdTAwZTlzdXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTREJcIjphKz1cImNvbW11bml0eSAoU0RCKTogU29jaVxcdTAwZTl0XFx1MDBlOSBkZSBTYWludCBGcmFuXFx1MDBlN29pcyBkZSBTYWxlczxici8+XCI7YnJlYWs7Y2FzZSBcIlNKXCI6YSs9XCJjb21tdW5pdHkgKFNKKTogQ29tcGFnbmllIGRlIEpcXHUwMGU5c3VzPGJyLz5cIjticmVhaztjYXNlIFwiU09DXCI6YSs9XCJjb21tdW5pdHkgKFNPQyk6IE9yZGVyIG9mIENpc3RlcmNpYW5zPGJyLz5cIjticmVhaztjYXNlIFwiU1NDQ1wiOmErPVwiY29tbXVuaXR5IChTU0NDKTogQ29uZ3JlZ2F0aW9uIG9mIHRoZSBTYWNyZWQgSGVhcnRzIG9mIEplc3VzIGFuZCBNYXJ5PGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcIlNTRlwiOmErPVwiY29tbXVuaXR5IChTU0YpOiBTb2NpZXR5IG9mIFN0IEZyYW5jaXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTU0pFXCI6YSs9XCJjb21tdW5pdHkgKFNTSkUpOiBTb2NpZXR5IG9mIFN0IEpvaG4gdGhlIEV2YW5nZWxpc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTU3BTXCI6YSs9XCJjb21tdW5pdHkgKFNTcFMpOiBTdGV5bGVyIE1pc3Npb25zc2Nod2VzdGVybjxici8+XCI7YnJlYWs7Y2FzZSBcIlRPUlwiOmErPVwiY29tbXVuaXR5IChUT1IpOiBUZXJ6byBPcmRpbmUgUmVnb2xhcmUgZGkgU2FuIEZyYW5jZXNjbzxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVua25vd248YnIvPlwifXJldHVybiBhfXZhciBmblRlc3RJbmZvUG9wdXA9ZnVuY3Rpb24oYil7Yj1iLmdldFByb3BlcnRpZXMoKTt2YXIgYT1cIlwiLGM7Zm9yKGMgaW4gYilhPWErYytcIj1cIitiW2NdK1wiPGJyLz5cIjtyZXR1cm4nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF90ZXh0XCIgc3R5bGU9XCJ3aWR0aDozMDBweDtcIj4nK2ErXCI8L2Rpdj5cIn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLXBvcHVwLWluZm8tZW4uanMiLCIvLyAnbmFtZXNwYWNlJ1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtDNGdCYXNlbGF5ZXJDb250cm9sbGVyfSBmcm9tIFwiLi9jNGctYmFzZWxheWVyLWNvbnRyb2xsZXJcIjtcbmltcG9ydCB7QzRnTGF5ZXJDb250cm9sbGVyfSBmcm9tIFwiLi9jNGctbGF5ZXItY29udHJvbGxlclwiO1xuaW1wb3J0IHtDNGdMb2NhdGlvblN0eWxlQ29udHJvbGxlcn0gZnJvbSBcIi4vYzRnLWxvY2F0aW9uc3R5bGUtY29udHJvbGxlclwiO1xuaW1wb3J0IHtTcGlubmVyfSBmcm9tIFwiLi9jNGctbWFwcy1taXNjLXNwaW5uZXJcIjtcbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0dlcm1hbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuXG52YXIgYzRnID0gdGhpcy5jNGc7XG5leHBvcnQgY2xhc3MgTWFwUHJveHkge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKXtcbiAgICB2YXIgbWFwRGF0YTtcblxuICAgIHRoaXMub3B0aW9ucyA9IGpRdWVyeS5leHRlbmQoe1xuICAgICAgbWFwQ29udHJvbGxlcjogZmFsc2VcbiAgICB9LCBvcHRpb25zKTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgYzRnLm1hcHMuZWRpdG9yU3R5bGVzID0gYzRnLm1hcHMuZWRpdG9yU3R5bGVzIHx8IHt9O1xuXG4gICAgLy93aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCA9IFtdO1xuXG4gICAgdGhpcy5ob29rX2Jhc2VsYXllcl9sb2FkZWQgPSBbXTtcbiAgICB0aGlzLmhvb2tfYmFzZWxheWVyX3Zpc2liaWxpdHkgPSBbXTtcbiAgICB0aGlzLmhvb2tfbGF5ZXJfbG9hZGVkID0gW107XG4gICAgdGhpcy5ob29rX2xheWVyX3Zpc2liaWxpdHkgPSBbXTtcbiAgICB0aGlzLmhvb2tfbWFwX2NsaWNrID0gW107XG4gICAgdGhpcy5ob29rX21hcF96b29tID0gW107XG5cbiAgICAvLyBhZGQgZ2xvYmFsIGhvb2sgZm9yIGFjY2Vzc2liaWxpdHkgd2hlbiB0aGVyZSBpcyBubyBwcm94eSByZWZlcmVuY2VcbiAgICB3aW5kb3cuYzRnTWFwc0hvb2tzID0gd2luZG93LmM0Z01hcHNIb29rcyB8fCB7fTtcbiAgICB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2xheWVyX2xvYWRlZCA9IHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfbGF5ZXJfbG9hZGVkIHx8IFtdO1xuXG4gICAgdGhpcy5iYXNlbGF5ZXJJZHMgPSBbXTtcbiAgICB0aGlzLmFjdGl2ZUJhc2VsYXllcklkID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGF5ZXJJZHMgPSBbXTtcbiAgICB0aGlzLmFjdGl2ZUxheWVySWRzID0ge307XG5cbiAgICB0aGlzLnJlcXVlc3RGdW5jdGlvbnMgPSB7fTtcbiAgICB0aGlzLnJlcXVlc3QgPSB7fTtcblxuICAgIHRoaXMuYmFzZWxheWVyc19sb2FkZWQgPSBmYWxzZTtcbiAgICB0aGlzLmxheWVyc19sb2FkZWQgPSBmYWxzZTtcblxuICAgIG1hcERhdGEgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhO1xuXG4gICAgdGhpcy5tYXBJZCA9IG1hcERhdGEuaWQ7XG5cbiAgICB0aGlzLmFwaV9iYXNlbGF5ZXJfdXJsID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkuYmFzZWxheWVyICsgJy8nICsgbWFwRGF0YS5wcm9maWxlO1xuICAgIHRoaXMuYXBpX2xheWVyX3VybCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmxheWVyICsgJy8nICsgdGhpcy5tYXBJZDtcbiAgICB0aGlzLmFwaV9sYXllcmNvbnRlbnRfdXJsID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkubGF5ZXJjb250ZW50O1xuICAgIC8vdGhpcy5hcGlfbGF5ZXJjb250ZW50ZGF0YV91cmwgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmFwaS5sYXllcmNvbnRlbnRkYXRhO1xuICAgIHRoaXMuYXBpX2xheWVyY29udGVudGRhdGFfdXJsID0gXCJjb240Z2lzL2xheWVyQ29udGVudERhdGFTZXJ2aWNlXCI7XG4gICAgdGhpcy5hcGlfbG9jc3R5bGVfdXJsID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkubG9jc3R5bGU7XG4gICAgdGhpcy5hcGlfaW5mb3dpbmRvd191cmwgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmFwaS5pbmZvd2luZG93O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cblxuXG4gICAgLy8gdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHZhciBzZWxmLFxuICAgICAgbWFwO1xuXG4gICAgc2VsZiA9IHRoaXM7XG4gICAgbWFwID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwO1xuXG4gICAgdGhpcy5iYXNlbGF5ZXJDb250cm9sbGVyID0gbmV3IEM0Z0Jhc2VsYXllckNvbnRyb2xsZXIodGhpcyk7XG4gICAgdGhpcy5iYXNlbGF5ZXJDb250cm9sbGVyLmxvYWRCYXNlTGF5ZXJzKCk7XG4gICAgdGhpcy5sYXllckNvbnRyb2xsZXIgPSBuZXcgQzRnTGF5ZXJDb250cm9sbGVyKHRoaXMpO1xuICAgIHRoaXMubGF5ZXJDb250cm9sbGVyLmxvYWRMYXllcnMoKTtcbiAgICB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyID0gbmV3IEM0Z0xvY2F0aW9uU3R5bGVDb250cm9sbGVyKHRoaXMpO1xuICAgIHRoaXMuYWRkUG9wVXAoKTtcblxuICAgIC8vVE9ETyBjaGVjayB0aGlzLCBuZWFybHkgdGhlIHNhbWUgYXMgYmVsb3dcbiAgICBtYXAub24oJ2NoYW5nZTp2aWV3JywgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gem9vbS1vYnNlcnZlclxuICAgICAgLy9cbiAgICAgIG1hcC5nZXRWaWV3KCkub24oJ2NoYW5nZTpyZXNvbHV0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGF5ZXJJZCxcbiAgICAgICAgICBsYXllcjtcblxuICAgICAgICAvLyBjaGVjayBsYXllciB6b29tLWJvdW5kc1xuICAgICAgICAvLyBAVE9ETzogVXNlIFwic2VsZi5hY3RpdmVMYXllcklkcyA9IGZhbHNlXCIgP1xuICAgICAgICBmb3IgKGxheWVySWQgaW4gc2VsZi5hY3RpdmVMYXllcklkcykge1xuICAgICAgICAgIGlmIChzZWxmLmFjdGl2ZUxheWVySWRzLmhhc093blByb3BlcnR5KGxheWVySWQpKSB7XG4gICAgICAgICAgICBsYXllciA9IHNlbGYubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1tsYXllcklkXTtcbiAgICAgICAgICAgIGlmIChzZWxmLmNoZWNrTGF5ZXJJc0FjdGl2ZUZvclpvb20obGF5ZXJJZCkpIHtcbiAgICAgICAgICAgICAgaWYgKGxheWVyLmlzSW5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmxheWVyQ29udHJvbGxlci5zaG93TGF5ZXIobGF5ZXJJZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbGYubGF5ZXJDb250cm9sbGVyLmhpZGVMYXllcihsYXllcklkLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBob29rc1xuICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhzZWxmLmhvb2tfbWFwX3pvb20pO1xuXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmNhY2hpbmcgJiYgbWFwLmdldFZpZXcoKS5nZXRab29tKCkpIHtcbiAgICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUoJ3pvb20nLCBtYXAuZ2V0VmlldygpLmdldFpvb20oKSk7XG4gICAgICAgIH1cblxuXG4gICAgICB9KTsgLy8gZW5kIG9mIFwiem9vbS1vYnNlcnZlclwiXG4gICAgfSk7IC8vIGVuZCBvZiBcInpvb20tb2JzZXJ2ZXJcIlxuXG4gICAgLy8gem9vbS1vYnNlcnZlclxuICAgIC8vXG4gICAgbWFwLmdldFZpZXcoKS5vbignY2hhbmdlOnJlc29sdXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbGF5ZXJJZCxcbiAgICAgICAgbGF5ZXI7XG5cblxuICAgICAgLy8gY2hlY2sgbGF5ZXIgem9vbS1ib3VuZHNcbiAgICAgIC8vIEBUT0RPOiBVc2UgXCJzZWxmLmFjdGl2ZUxheWVySWRzID0gZmFsc2VcIiA/XG4gICAgICBmb3IgKGxheWVySWQgaW4gc2VsZi5hY3RpdmVMYXllcklkcykge1xuICAgICAgICBpZiAoc2VsZi5hY3RpdmVMYXllcklkcy5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICAgIGxheWVyID0gc2VsZi5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2xheWVySWRdO1xuICAgICAgICAgIGlmIChzZWxmLmNoZWNrTGF5ZXJJc0FjdGl2ZUZvclpvb20obGF5ZXJJZCkpIHtcbiAgICAgICAgICAgIGlmIChsYXllci5pc0luYWN0aXZlKSB7XG4gICAgICAgICAgICAgIHNlbGYubGF5ZXJDb250cm9sbGVyLnNob3dMYXllcihsYXllcklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5sYXllckNvbnRyb2xsZXIuaGlkZUxheWVyKGxheWVySWQsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBob29rc1xuICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5ob29rX21hcF96b29tLHNlbGYpO1xuXG4gICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jYWNoaW5nICYmIG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpKSB7XG4gICAgICAgICAgdXRpbHMuc3RvcmVWYWx1ZSgnem9vbScsIG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpKTtcbiAgICAgIH1cblxuICAgIH0pOyAvLyBlbmQgb2YgXCJ6b29tLW9ic2VydmVyXCJcblxuICAgIG1hcC5nZXRWaWV3KCkub24oJ2NoYW5nZTpjZW50ZXInLCBmdW5jdGlvbihldnQpe1xuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jYWNoaW5nKSB7XG4gICAgICAgICAgICB2YXIgY29vcmRpbmF0ZSA9IG9sLnByb2oudG9Mb25MYXQobWFwLmdldFZpZXcoKS5nZXRDZW50ZXIoKSk7XG4gICAgICAgICAgICBpZiAoY29vcmRpbmF0ZSkge1xuICAgICAgICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUoJ2xvbicsIGNvb3JkaW5hdGVbMF0pO1xuICAgICAgICAgICAgICAgIHV0aWxzLnN0b3JlVmFsdWUoJ2xhdCcsIGNvb3JkaW5hdGVbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5jNGdNYXBzSG9va3MubWFwX2NlbnRlcl9jaGFuZ2VkID0gd2luZG93LmM0Z01hcHNIb29rcy5tYXBfY2VudGVyX2NoYW5nZWQgfHwgW107XG4gICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MubWFwX2NlbnRlcl9jaGFuZ2VkLCBtYXAuZ2V0VmlldygpLmdldENlbnRlcigpKTtcbiAgICB9KTsgLy8gZW5kIG9mIFwiY2VudGVyLW9ic2VydmVyXCJcblxuICAgIC8vIGNsaWNrLW9ic2VydmVyXG4gICAgLy9cbiAgICBtYXAub24oJ2NsaWNrJywgZnVuY3Rpb24gKGNsaWNrRXZlbnQpIHtcblxuICAgICAgdmFyIGZlYXR1cmUsXG4gICAgICAgIGZGZWF0dXJlcyxcbiAgICAgICAgbGF5ZXIsXG4gICAgICAgIHBvcHVwSW5mb3MsXG4gICAgICAgIGN1cnJlbnRab29tLFxuICAgICAgICBtaW5ab29tLFxuICAgICAgICBuZXdDZW50ZXIsXG4gICAgICAgIGdlb21ldHJ5LFxuICAgICAgICBjb29yZCxcbiAgICAgICAgc2V0UG9wdXAsXG4gICAgICAgIHN0eWxlRnVuYyxcbiAgICAgICAgc3R5bGVDbHVzdGVyLFxuICAgICAgICBvYmpQb3B1cDtcblxuICAgICAgLy9Ub0RvIGNoZWNrIG5ldyBmdW5jdGlvbiBjYWxsIHdpdGggb2wgNC4zXG4gICAgICBmZWF0dXJlID0gbWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChjbGlja0V2ZW50LnBpeGVsLFxuICAgICAgICBmdW5jdGlvbiAoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICByZXR1cm4gZmVhdHVyZTtcbiAgICAgICAgfSk7XG5cbiAgICAgIGxheWVyID0gbWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChjbGlja0V2ZW50LnBpeGVsLFxuICAgICAgICBmdW5jdGlvbiAoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICByZXR1cm4gbGF5ZXI7XG4gICAgICAgIH0pO1xuXG4gICAgICBpZihsYXllciAmJiBsYXllci5nZXRTdHlsZSgpKSB7XG4gICAgICAgIHN0eWxlRnVuYyA9IGxheWVyLmdldFN0eWxlKCk7XG4gICAgICAgIGlmKHR5cGVvZiBzdHlsZUZ1bmMgPT09IFwiZnVuY3Rpb25cIiAmJiBzdHlsZUZ1bmMoZmVhdHVyZSwgY3VycmVudFpvb20pICYmIHN0eWxlRnVuYyhmZWF0dXJlLCBjdXJyZW50Wm9vbSlbJzAnXSl7XG4gICAgICAgICAgc3R5bGVDbHVzdGVyID0gc3R5bGVGdW5jKGZlYXR1cmUsIGN1cnJlbnRab29tKVsnMCddLmNsb25lKCk7XG4gICAgICAgICAgaWYgKHN0eWxlQ2x1c3RlciAmJiBzdHlsZUNsdXN0ZXIuZ2V0SW1hZ2UoKSkge1xuICAgICAgICAgICAgICBzdHlsZUNsdXN0ZXIuZ2V0SW1hZ2UoKS5zZXRTY2FsZShzdHlsZUNsdXN0ZXIuZ2V0SW1hZ2UoKS5nZXRTY2FsZSgpKjAuNyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZGZWF0dXJlcyA9IGZlYXR1cmUgPyBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKSA6IGZhbHNlO1xuICAgICAgaWYgKCEoZkZlYXR1cmVzICYmIGZGZWF0dXJlcy5sZW5ndGggPT09IDEpKSB7XG4gICAgICAgIC8vIGNsdXN0ZXIgbXVsdGlwbGUgUE9JXG4gICAgICAgIGlmIChmRmVhdHVyZXMpIHtcbiAgICAgICAgICBpZihmRmVhdHVyZXNbMF0uZ2V0KCdjbHVzdGVyX3BvcHVwJykgPT0gMSlcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihjbGlja0V2ZW50LmNvb3JkaW5hdGUpO1xuICAgICAgICAgICAgY3VycmVudFpvb20gPSBtYXAuZ2V0VmlldygpLmdldFpvb20oKTtcbiAgICAgICAgICAgIG1pblpvb20gPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmNsdXN0ZXJfYWxsID8gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jbHVzdGVyX3pvb20gOiBmRmVhdHVyZXNbJzAnXS5nZXQoJ2NsdXN0ZXJfem9vbScpO1xuICAgICAgICAgICAgaWYoY3VycmVudFpvb20gPj0gbWluWm9vbSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc2V0UG9wdXAgPVtdO1xuICAgICAgICAgICAgICBzZXRQb3B1cC5jb250ZW50ID0gJyc7XG4gICAgICAgICAgICAgIHNldFBvcHVwLmFzeW5jID0gZmFsc2U7XG4gICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBmRmVhdHVyZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIHNldFBvcHVwLmNvbnRlbnQgPSBzZXRQb3B1cC5jb250ZW50LmNvbmNhdChmRmVhdHVyZXNbaV0uZ2V0KCdwb3B1cCcpLmNvbnRlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZlYXR1cmUgPSBmRmVhdHVyZXNbMF0uY2xvbmUoKTtcbiAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ3BvcHVwJyxzZXRQb3B1cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Wm9vbShjdXJyZW50Wm9vbSsxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcblxuXG4gICAgICAgICAgICBmZWF0dXJlLnNldFN0eWxlKG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcbiAgICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgcmFkaXVzOiAwXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBmZWF0dXJlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIGFuaW1hdGlvblxuICAgICAgICAgICAgbWFwLmdldFZpZXcoKS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgc3RhcnQ6ICtuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogMTAwMCxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjogbWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uKCksXG4gICAgICAgICAgICAgIGNlbnRlcjogWzAsIDBdXG4gICAgICAgICAgICAgIC8vcm90YXRpb246IE1hdGguUElcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjdXJyZW50Wm9vbSA9IG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpO1xuICAgICAgICAgICAgbmV3Q2VudGVyID0gbWFwLmdldENvb3JkaW5hdGVGcm9tUGl4ZWwoY2xpY2tFdmVudC5waXhlbCk7XG4gICAgICAgICAgICBtaW5ab29tID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jbHVzdGVyX2FsbCA/IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuY2x1c3Rlcl96b29tIDogZkZlYXR1cmVzWycwJ10uZ2V0KCdjbHVzdGVyX3pvb20nKTtcblxuICAgICAgICAgICAgLy9Ub0RvIHJlbW92ZSB3aXRoIHN0cnVjdHVyZSBlbGVtZW50IHBhcmFtXG4gICAgICAgICAgICBpZiAoY3VycmVudFpvb20gPj0gbWluWm9vbSkge1xuXG4gICAgICAgICAgICAgIC8vaWYgKGN1cnJlbnRab29tID49IG1hcC5nZXRWaWV3KCkuZ2V0TWF4Wm9vbSgpKSB7XG4gICAgICAgICAgICAgIC8vb3BlbiB0aGUgY2x1c3RlciBhZnRlciB6b29taW5nXG4gICAgICAgICAgICAgIHZhciBwaXggPSBtYXAuZ2V0VmlldygpLmdldFJlc29sdXRpb24oKTtcbiAgICAgICAgICAgICAgdmFyIG1heCA9IGZGZWF0dXJlcy5sZW5ndGg7XG4gICAgICAgICAgICAgIHZhciByID0gcGl4ICogMTIgKiAoMC41ICsgbWF4IC8gNCk7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IDIgKiBNYXRoLlBJICogaSAvIG1heDtcbiAgICAgICAgICAgICAgICBpZiAobWF4ID09IDIgfHwgbWF4ID09IDQpIGEgKz0gTWF0aC5QSSAvIDQ7XG4gICAgICAgICAgICAgICAgdmFyIHAgPSBbbmV3Q2VudGVyWzBdICsgciAqIE1hdGguc2luKGEpLCBuZXdDZW50ZXJbMV0gKyByICogTWF0aC5jb3MoYSldO1xuICAgICAgICAgICAgICAgIHZhciBjb29yZGluYXRlID0gb2wucHJvai50b0xvbkxhdChwKTtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IFtdO1xuICAgICAgICAgICAgICAgIGYucHVzaChmRmVhdHVyZXNbaV0pO1xuICAgICAgICAgICAgICAgIHZhciBjZiA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBuZXcgb2wuZ2VvbS5Qb2ludChwKSxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBmLFxuICAgICAgICAgICAgICAgICAgc3R5bGU6IGZGZWF0dXJlc1tpXS5nZXQoJ3N0eWxlJylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlKGNmKTtcbiAgICAgICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihuZXdDZW50ZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdXJyZW50Wm9vbSArPSAxO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKG5ld0NlbnRlcik7XG4gICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldFpvb20oY3VycmVudFpvb20pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgoZkZlYXR1cmVzICYmIGZGZWF0dXJlcy5sZW5ndGggPT09IDEpKSB7XG4gICAgICAgIGZlYXR1cmUgPSBmRmVhdHVyZXNbMF07XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5jb250cm9scy5lZGl0b3IgJiYgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuY29udHJvbHMuZWRpdG9yLmlzT3BlbigpKSB7XG4gICAgICAgIC8vIGRvIG5vdCBzaG93IHBvcHVwIHdoZW4gZWRpdG9yIGlzIG9wZW5cbiAgICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ3Byb2plY3RJZCcpKSB7XG4gICAgICAgICAgICAvLyBidXQgY2FsbCBjbGljayBob29rc1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHNlbGYuaG9va19tYXBfY2xpY2ssIGNsaWNrRXZlbnQpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwb3B1cEluZm9zID0ge307XG4gICAgICBpZiAoZmVhdHVyZSAmJiBmZWF0dXJlLmdldCgncG9wdXAnKSkge1xuICAgICAgICAvLyBzaW5nbGUgUE9JXG4gICAgICAgIHBvcHVwSW5mb3MgPSBmZWF0dXJlLmdldCgncG9wdXAnKTtcbiAgICAgIH0gZWxzZSBpZiAobGF5ZXIgJiYgbGF5ZXIucG9wdXApIHtcbiAgICAgICAgcG9wdXBJbmZvcyA9IGxheWVyLnBvcHVwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmVhdHVyZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ2xvY19saW5rdXJsJykpIHtcbiAgICAgICAgaWYoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5saW5rX25ld3dpbmRvdz09PScxJykge1xuICAgICAgICAgIHdpbmRvdy5vcGVuKGZlYXR1cmUuZ2V0KCdsb2NfbGlua3VybCcpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgIHdpbmRvdy5vcGVuKGZlYXR1cmUuZ2V0KCdsb2NfbGlua3VybCcpLFwiX3NlbGZcIik7XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ3pvb21fb25jbGljaycpICYmIGZlYXR1cmUuZ2V0KCd6b29tX29uY2xpY2snKSAhPSAwKXtcbiAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldFpvb20oZmVhdHVyZS5nZXQoJ3pvb21fb25jbGljaycpKTtcbiAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihsYXllciAmJiBsYXllci56b29tX29uY2xpY2sgJiYgbGF5ZXIuem9vbV9vbmNsaWNrICE9IDApe1xuICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Wm9vbShsYXllci56b29tX29uY2xpY2spO1xuICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKGNsaWNrRXZlbnQuY29vcmRpbmF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmVhdHVyZSkge1xuICAgICAgICAgIGdlb21ldHJ5ID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpO1xuICAgICAgICAgIGlmIChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9pbnQpIHtcbiAgICAgICAgICAgIGNvb3JkID0gZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29vcmQgPSBjbGlja0V2ZW50LmNvb3JkaW5hdGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYzRnLm1hcHMucG9wdXAucG9wdXAuc2V0UG9zaXRpb24oY29vcmQpO1xuICAgICAgICAgIGlmIChwb3B1cEluZm9zLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIGM0Zy5tYXBzLnBvcHVwLiRjb250ZW50Lmh0bWwoJycpO1xuICAgICAgICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLmFkZENsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5MT0FESU5HKTtcbiAgICAgICAgICAgIGM0Zy5tYXBzLnBvcHVwLnNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgICAgICBpZiAocG9wdXBJbmZvcy5hc3luYyA9PT0gZmFsc2UgfHwgcG9wdXBJbmZvcy5hc3luYyA9PSAnMCcpIHtcbiAgICAgICAgICAgICAgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm9zO1xuICAgICAgICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gZmVhdHVyZTtcbiAgICAgICAgICAgICAgb2JqUG9wdXAubGF5ZXIgPSBsYXllcjtcbiAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgcG9wdXAgaG9vayBmb3IgcGx1Z2luIHNwZWNpZmljIHBvcHVwIGNvbnRlbnRcbiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9maWxsUG9wdXAsIG9ialBvcHVwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZWxmLnNldFBvcHVwKG9ialBvcHVwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBzZWxmLmFwaV9pbmZvd2luZG93X3VybCArICcvJyArIHBvcHVwSW5mb3MuY29udGVudFxuICAgICAgICAgICAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9wdXBJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgYXN5bmM6IHBvcHVwSW5mb3MuYXN5bmMsXG4gICAgICAgICAgICAgICAgICBjb250ZW50OiBkYXRhLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICBwb3B1cDogcG9wdXBJbmZvcy5wb3B1cCxcbiAgICAgICAgICAgICAgICAgIHJvdXRpbmdfbGluazogcG9wdXBJbmZvcy5yb3V0aW5nX2xpbmtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mbztcbiAgICAgICAgICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gZmVhdHVyZTtcbiAgICAgICAgICAgICAgICBvYmpQb3B1cC5sYXllciA9IGxheWVyO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgcG9wdXAgaG9vayBmb3IgcGx1Z2luIHNwZWNpZmljIHBvcHVwIGNvbnRlbnRcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwLCBvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZi5zZXRQb3B1cChvYmpQb3B1cCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjNGcubWFwcy5wb3B1cC4kcG9wdXAucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaG9va3NcbiAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5ob29rX21hcF9jbGljaywgY2xpY2tFdmVudCk7XG4gICAgICB9XG4gICAgfSk7IC8vIGVuZCBvZiBcImNsaWNrLW9ic2VydmVyXCJcblxuXG4gICAgLy8gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldExheWVycygpLm9uKCdjaGFuZ2U6bGVuZ3RoJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyAgICAgO1xuICAgIC8vIH0pO1xuXG5cbiAgfSAvLyBlbmQgb2YgXCJpbml0aWFsXCIqXG4gIGNvbWJpbmUocHJveHkpe1xuICAgIHZhciBmdW5jID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHByb3h5LmNvbWJpbmVMYXllcnMocHJveHkpO1xuICAgICAgcHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC51bigncG9zdHJlbmRlcicsZnVuYyk7XG4gICAgfTtcbiAgICBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLm9uKCdwb3N0cmVuZGVyJywgZnVuYylcbiAgfVxuXG4gIHNldFBvcHVwKHBvcHVwQ29uZmlnKSB7XG4gICAgdmFyIGZlYXR1cmUsXG4gICAgICBsYXllcixcbiAgICAgIHBvcHVwQ29udGVudCxcbiAgICAgIHJvdXRlcixcbiAgICAgIHJvdXRlQnV0dG9uV3JhcHBlcixcbiAgICAgIHJvdXRlRnJvbUJ1dHRvbixcbiAgICAgIHJvdXRlRnJvbUJ1dHRvblNwYW4sXG4gICAgICByb3V0ZVRvQnV0dG9uLFxuICAgICAgcm91dGVUb0J1dHRvblNwYW4sXG4gICAgICByb3V0aW5nSGFuZGxlcixcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgZmVhdHVyZSA9IHBvcHVwQ29uZmlnLmZlYXR1cmU7XG4gICAgbGF5ZXIgPSBwb3B1cENvbmZpZy5sYXllcjtcblxuICAgIHBvcHVwQ29udGVudCA9IHV0aWxzLnJlcGxhY2VBbGxQbGFjZWhvbGRlcnMocG9wdXBDb25maWcucG9wdXAuY29udGVudCwgZmVhdHVyZSwgbGF5ZXIpO1xuICAgIC8vIEBUT0RPOiBjaGVjayBmb3Igcm91dGUtb3B0aW9uICYgZGlzcGxheSBcInJvdXRlLXRvXCJcbiAgICAvLyBOT1RFOiBkb2VzIG5vdCB3b3JrIGFzeW5jIHRoaXMgd2F5XG4gICAgaWYgKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnJvdXRlciAmJiBwb3B1cENvbmZpZy5wb3B1cC5yb3V0aW5nX2xpbmspIHtcbiAgICAgIHJvdXRlciA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmNvbnRyb2xzLnJvdXRlcjtcblxuICAgICAgcm91dGluZ0hhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmFjdGl2ZVBvcnRzaWRlICE9PSByb3V0ZXIpIHtcbiAgICAgICAgICByb3V0ZXIub3BlbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcm91dGVyLnNldElucHV0KFxuICAgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLlBPUFVQX1JPVVRFX0ZST00pLFxuICAgICAgICAgIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpXG4gICAgICAgICk7XG4gICAgICB9OyAvLyBlbmQgb2YgXCJyb3V0aW5nSGFuZGxlcigpXCJcblxuICAgICAgcm91dGVCdXR0b25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICByb3V0ZUJ1dHRvbldyYXBwZXIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLlBPUFVQX1JPVVRFX1dSQVBQRVI7XG5cbiAgICAgIHJvdXRlRnJvbUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgcm91dGVGcm9tQnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLlBPUFVQX1JPVVRFX0ZST007XG4gICAgICBqUXVlcnkocm91dGVGcm9tQnV0dG9uKS5jbGljayhyb3V0aW5nSGFuZGxlcik7XG4gICAgICByb3V0ZUJ1dHRvbldyYXBwZXIuYXBwZW5kQ2hpbGQocm91dGVGcm9tQnV0dG9uKTtcblxuICAgICAgcm91dGVGcm9tQnV0dG9uU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIHJvdXRlRnJvbUJ1dHRvblNwYW4uaW5uZXJIVE1MID0gbGFuZ0NvbnN0YW50cy5QT1BVUF9ST1VURV9GUk9NO1xuICAgICAgcm91dGVGcm9tQnV0dG9uLmFwcGVuZENoaWxkKHJvdXRlRnJvbUJ1dHRvblNwYW4pO1xuXG4gICAgICByb3V0ZVRvQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICByb3V0ZVRvQnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLlBPUFVQX1JPVVRFX1RPO1xuICAgICAgalF1ZXJ5KHJvdXRlVG9CdXR0b24pLmNsaWNrKHJvdXRpbmdIYW5kbGVyKTtcbiAgICAgIHJvdXRlQnV0dG9uV3JhcHBlci5hcHBlbmRDaGlsZChyb3V0ZVRvQnV0dG9uKTtcblxuICAgICAgcm91dGVUb0J1dHRvblNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICByb3V0ZVRvQnV0dG9uU3Bhbi5pbm5lckhUTUwgPSBsYW5nQ29uc3RhbnRzLlBPUFVQX1JPVVRFX1RPO1xuICAgICAgcm91dGVUb0J1dHRvbi5hcHBlbmRDaGlsZChyb3V0ZVRvQnV0dG9uU3Bhbik7XG4gICAgfVxuXG4gICAgaWYgKHBvcHVwQ29udGVudC50cmltKCkgfHwgcm91dGVyKSB7XG4gICAgICBjNGcubWFwcy5wb3B1cC4kY29udGVudC5odG1sKHBvcHVwQ29udGVudCk7XG4gICAgICBpZiAocm91dGVyKSB7XG4gICAgICAgIGM0Zy5tYXBzLnBvcHVwLiRjb250ZW50LmFwcGVuZChyb3V0ZUJ1dHRvbldyYXBwZXIpO1xuICAgICAgfVxuICAgICAgaWYoZmVhdHVyZS5nZXRHZW9tZXRyeSgpICYmIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSBpbnN0YW5jZW9mIG9sLmdlb20uUG9pbnQpe1xuICAgICAgICBjNGcubWFwcy5wb3B1cC5wb3B1cC5zZXRQb3NpdGlvbihmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhpZGUgcG9wdXAgaWYgdGhlcmUgaXMgbm8gdmFsaWQgY29udGVudCBsZWZ0XG4gICAgICBjNGcubWFwcy5wb3B1cC4kcG9wdXAucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgfVxuXG4gICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5MT0FESU5HKTtcbiAgICBjNGcubWFwcy5wb3B1cC5zcGlubmVyLmhpZGUoKTtcbiAgfSAvLyBlbmQgb2YgXCJzZXRQb3B1cCgpXCJcblxuXG4gIGFkZFBvcFVwKCkge1xuXG4gICAgbGV0IHBvcFVwRWxlbWVudCxcbiAgICAgIHBvcFVwQ2xvc2VFbGVtZW50LFxuICAgICAgcG9wVXBDb250ZW50LFxuICAgICAgcG9wdXA7XG5cblxuICAgIHBvcFVwRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHBvcFVwRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2M0Z19wb3B1cF8nICsgdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5tYXBJZCk7XG4gICAgcG9wVXBFbGVtZW50LmNsYXNzTmFtZSA9ICdjNGctcG9wdXAtd3JhcHBlcic7XG5cbiAgICBwb3BVcENsb3NlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIHBvcFVwQ2xvc2VFbGVtZW50LmNsYXNzTmFtZSA9IFwiYzRnLXBvcHVwLWNsb3NlIGM0Zy1pY29uXCI7XG5cbiAgICBwb3BVcENvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwb3BVcENvbnRlbnQuY2xhc3NOYW1lID0gXCJjNGctcG9wdXAtY29udGVudFwiO1xuXG4gICAgcG9wVXBFbGVtZW50LmFwcGVuZENoaWxkKHBvcFVwQ2xvc2VFbGVtZW50KTtcbiAgICBwb3BVcEVsZW1lbnQuYXBwZW5kQ2hpbGQocG9wVXBDb250ZW50KTtcblxuICAgIGpRdWVyeShwb3BVcENsb3NlRWxlbWVudCkuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgYzRnLm1hcHMucG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgIH0pO1xuXG4gICAgcG9wdXAgPSBuZXcgb2wuT3ZlcmxheSh7XG4gICAgICBhdXRvUGFuOiB0cnVlLFxuICAgICAgZWxlbWVudDogcG9wVXBFbGVtZW50LFxuICAgICAgcG9zaXRpb25pbmc6ICdib3R0b20tbGVmdCcsXG4gICAgICBvZmZzZXQ6IFstNTAsIDBdLyosXG4gICAgICAgIGF1dG9QYW46IHRydWUsXG4gICAgICAgIGF1dG9QYW5BbmltYXRpb246IHtcbiAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgIH0sXG4gICAgICAgIGF1dG9QYW5NYXJnaW46IDIwKi9cbiAgICB9KTtcblxuICAgIGM0Zy5tYXBzLnBvcHVwID0ge307XG4gICAgYzRnLm1hcHMucG9wdXAucG9wdXAgPSBwb3B1cDtcbiAgICAvLyBhdHRhY2ggYSBzcGlubmVyIHRvIHRoZSBwb3B1cFxuICAgIGM0Zy5tYXBzLnBvcHVwLnNwaW5uZXIgPSBuZXcgU3Bpbm5lcih7dGFyZ2V0OiBwb3BVcEVsZW1lbnR9KTtcblxuICAgIHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5hZGRPdmVybGF5KHBvcHVwKTtcblxuICAgIGM0Zy5tYXBzLnBvcHVwLiRwb3B1cCA9IGpRdWVyeShjNGcubWFwcy5wb3B1cC5wb3B1cC5nZXRFbGVtZW50KCkpO1xuICAgIGM0Zy5tYXBzLnBvcHVwLiRjb250ZW50ID0galF1ZXJ5KCcuYzRnLXBvcHVwLWNvbnRlbnQnLCBjNGcubWFwcy5wb3B1cC4kcG9wdXApO1xuXG4gIH0gLy8gZW5kIG9mIFwiYWRkUG9wVXAoKVwiXG5cblxuICAvKipcbiAgICogQFRPRE86IFtjaGVja0xvY2F0aW9uU3R5bGVzIGRlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcGFyYW0gICB7W3R5cGVdfSAgb3B0X29wdGlvbnMgIFtkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQHJldHVybiAge1t0eXBlXX0gICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjaGVja0xvY2F0aW9uU3R5bGVzKG9wdF9vcHRpb25zKSB7XG5cbiAgICB2YXIgb3B0aW9ucyxcbiAgICAgIG5lZWRlZExheWVyU3R5bGVzLFxuICAgICAgZ2V0TGF5ZXJTdHlsZXMsXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgIGlmIChvcHRfb3B0aW9ucyAmJiB0eXBlb2Ygb3B0X29wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRfb3B0aW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHRoaXMubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzPSB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlcyB8fCB7fTtcblxuICAgIG5lZWRlZExheWVyU3R5bGVzID0gW107XG4gICAgZ2V0TGF5ZXJTdHlsZXMgPSBmdW5jdGlvbiAobGF5ZXJzKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgaW5kZXg7XG5cbiAgICAgIC8vIFRvRG86IFJla3Vyc2lvbiBpbnRlZ3JpZXJlbiAodGVzdCBtaXQgZm9ydW0pXG4gICAgICBmb3IgKGluZGV4IGluIGxheWVycykge1xuICAgICAgICBpZiAobGF5ZXJzLmhhc093blByb3BlcnR5KGluZGV4KSkge1xuICAgICAgICAgIGVsZW1lbnQgPSBsYXllcnNbaW5kZXhdO1xuXG4gICAgICAgICAgaWYgKGVsZW1lbnQuY29udGVudCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnQuY29udGVudC5sZW5ndGg7IGkgKz0gMSkge1xuXG4gICAgICAgICAgICAgIGlmIChlbGVtZW50LmNvbnRlbnRbaV0pIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBlbGVtZW50LmNvbnRlbnRbaV0ubG9jYXRpb25TdHlsZVxuICAgICAgICAgICAgICAgICAgJiYgZWxlbWVudC5jb250ZW50W2ldLmxvY2F0aW9uU3R5bGUgIT09IFwiMFwiXG4gICAgICAgICAgICAgICAgICAmJiBuZWVkZWRMYXllclN0eWxlcy5pbmRleE9mKGVsZW1lbnQuY29udGVudFtpXS5sb2NhdGlvblN0eWxlKSA9PT0gLTFcbiAgICAgICAgICAgICAgICAgICYmIChcbiAgICAgICAgICAgICAgICAgICAgIXNlbGYubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnQuY29udGVudFtpXS5sb2NhdGlvblN0eWxlXVxuICAgICAgICAgICAgICAgICAgICB8fCBzZWxmLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tlbGVtZW50LmNvbnRlbnRbaV0ubG9jYXRpb25TdHlsZV0uc3R5bGUgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgbmVlZGVkTGF5ZXJTdHlsZXMucHVzaChlbGVtZW50LmNvbnRlbnRbaV0ubG9jYXRpb25TdHlsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGdldExheWVyU3R5bGVzKHRoaXMubGF5ZXJDb250cm9sbGVyLmFyckxheWVycyk7XG5cbiAgICBpZiAobmVlZGVkTGF5ZXJTdHlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMobmVlZGVkTGF5ZXJTdHlsZXMsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kb25lICYmIHR5cGVvZiBvcHRpb25zLmRvbmUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBvcHRpb25zLmRvbmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gZW5kIG9mIFwiY2hlY2tMb2NhdGlvblN0eWxlcygpXCJcblxuICBjb21iaW5lTGF5ZXJzKHByb3h5KXtcblxuICAgIHZhciBpLFxuICAgICAgaixcbiAgICAgIGssXG4gICAgICBsYXllcklkLFxuICAgICAgbGF5ZXJzLFxuICAgICAgY29udGVudERhdGFMYXllcixcbiAgICAgIGNvbnRlbnREYXRhLFxuICAgICAgbGF5ZXIsXG4gICAgICBsYXllckdyb3VwcyA9W10sXG4gICAgICBzb3VyY2UsXG4gICAgICBzdHlsZSxcbiAgICAgIGZlYXR1cmVzPVtdLFxuICAgICAgc3R5bGVzPVtdLFxuICAgICAgb25lRmVhdHVyZSxcbiAgICAgIGZlYXR1cmUsXG4gICAgICB2ZWN0b3JTb3VyY2UsXG4gICAgICBjbHVzdGVyU291cmNlLFxuICAgICAgdmVjdG9yTGF5ZXI7XG5cblxuICAgIGlmKHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmNsdXN0ZXJfYWxsID09PSAnMScpe1xuICAgICAgY29udGVudERhdGEgPSBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YTtcbiAgICAgIGZvciggaSBpbiBwcm94eS5hY3RpdmVMYXllcklkcykgey8vbG9vcCB0byBnZXQgYWxsIGxheWVyc1xuICAgICAgICBsYXllcnMgPSBjNGcubWFwcy5sYXllcnNbaV07XG5cbiAgICAgICAgaWYobGF5ZXJzLnR5cGUgPT09IFwiZ3B4XCIpe1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZihsYXllcnMgJiYgbGF5ZXJzLnZlY3RvckxheWVyICl7XG4gICAgICAgICAgaWYobGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpICYmIGxheWVycy52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdICYmIGxheWVycy52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdLmdldFNvdXJjZSgpICYmIGxheWVycy52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpWzBdLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCkubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUxheWVyKGxheWVycy52ZWN0b3JMYXllcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGVudERhdGFMYXllciA9IGxheWVycy5jb250ZW50O1xuICAgICAgICAgIGxheWVycy52ZWN0b3JMYXllci5nZXRMYXllcnMoKS5jb250ZW50ID0gY29udGVudERhdGFMYXllcjtcbiAgICAgICAgICBsYXllckdyb3Vwcy5wdXNoKGxheWVycy52ZWN0b3JMYXllci5nZXRMYXllcnMoKSk7XG5cblxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IoayA9MDsgazxsYXllckdyb3Vwcy5sZW5ndGg7aysrKXsvL2xvb3AgdG8gZXh0cmFjdCBmZWF0dXJlcyBmcm9tIGxheWVyc1xuICAgICAgICBpZihsYXllckdyb3Vwc1trXS5nZXRBcnJheSgpLmxlbmd0aD4wKXtcbiAgICAgICAgICBsYXllciA9IGxheWVyR3JvdXBzW2tdLmdldEFycmF5KCk7XG4gICAgICAgICAgc291cmNlID0gbGF5ZXJbXCIwXCJdLmdldFNvdXJjZSgpO1xuICAgICAgICAgIHN0eWxlID0gbGF5ZXJbXCIwXCJdLmdldFN0eWxlKCk7XG5cbiAgICAgICAgICBvbmVGZWF0dXJlID0gdHJ1ZTtcbiAgICAgICAgICBmZWF0dXJlID0gc291cmNlLmdldEZlYXR1cmVzKCk7XG4gICAgICAgICAgZm9yKGogPSAwOyBqIDwgZmVhdHVyZS5sZW5ndGg7IGogKyspey8vbG9vcCBvdmVyIGFsbCBmZWF0dXJlcyBmcm9tIGEgc291cmNlXG4gICAgICAgICAgICBpZihmZWF0dXJlW2pdLmdldChcImZlYXR1cmVzXCIpKXtcbiAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgZmVhdHVyZVtqXS5nZXQoXCJmZWF0dXJlc1wiKS5sZW5ndGg7IGkrKyl7Ly9sb29wIGZvciBjbHVzdGVyZWQgZmVhdHVyZXNcbiAgICAgICAgICAgICAgICBpZihsYXllckdyb3Vwc1trXS5jb250ZW50W2pdKXtcbiAgICAgICAgICAgICAgICAgIHN0eWxlID0gdGhpcy5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbbGF5ZXJHcm91cHNba10uY29udGVudFtqXS5sb2NhdGlvblN0eWxlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihsYXllckdyb3Vwc1trXS5jb250ZW50WzBdKXtcbiAgICAgICAgICAgICAgICAgIHN0eWxlID0gdGhpcy5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbbGF5ZXJHcm91cHNba10uY29udGVudFswXS5sb2NhdGlvblN0eWxlXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmZWF0dXJlW2pdLmdldChcImZlYXR1cmVzXCIpW2ldLnNldFN0eWxlKHN0eWxlLnN0eWxlKTtcbiAgICAgICAgICAgICAgICBpZighZmVhdHVyZVtqXS5nZXQoXCJmZWF0dXJlc1wiKVtpXS5nZXQoJ3BvcHVwJykpe1xuICAgICAgICAgICAgICAgICAgZmVhdHVyZVtqXS5nZXQoXCJmZWF0dXJlc1wiKVtpXS5zZXQoJ3BvcHVwJyxsYXllclsnMCddLnBvcHVwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmZWF0dXJlcy5wdXNoKGZlYXR1cmVbal0uZ2V0KFwiZmVhdHVyZXNcIikpO1xuXG4gICAgICAgICAgICAgIG9uZUZlYXR1cmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihvbmVGZWF0dXJlKXsvL3NpbmdsZSBub3QgY2x1c3RlcmVkIGZlYXR1cmVcbiAgICAgICAgICAgIGlmKGZlYXR1cmUubGVuZ3RoID49IDEpe1xuICAgICAgICAgICAgICBpZighZmVhdHVyZVsnMCddLmdldCgncG9wdXAnKSl7XG4gICAgICAgICAgICAgICAgZmVhdHVyZVsnMCddLnNldCgncG9wdXAnLGxheWVyLnBvcHVwKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZlY3RvclNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHtcbiAgICAgICAgcHJvamVjdGlvbjogJ0VQU0c6Mzg1NydcblxuICAgICAgfSk7XG5cbiAgICAgIGZvcihpID0gMDsgaSA8IGZlYXR1cmVzLmxlbmd0aDsgaSArKyl7XG4gICAgICAgIHZlY3RvclNvdXJjZS5hZGRGZWF0dXJlcyhmZWF0dXJlc1tpXSk7XG4gICAgICB9XG5cbiAgICAgIGNsdXN0ZXJTb3VyY2UgPSBuZXcgb2wuc291cmNlLkNsdXN0ZXIoe1xuICAgICAgICBkaXN0YW5jZTogNDAsXG4gICAgICAgIC8vdGhyZXNob2xkOiAyLCAvL21pbmltdW0gZWxlbWVudCBjb3VudFxuICAgICAgICBzb3VyY2U6IHZlY3RvclNvdXJjZVxuICAgICAgfSk7XG4gICAgICB2YXIgc3R5bGVGb3JDbHVzdGVyID0gZnVuY3Rpb24oZmVhdHVyZSwgcmVzb2x1dGlvbil7XG4gICAgICAgIGlmKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykgJiYgZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbJzAnXS5nZXRTdHlsZSgpKXtcbiAgICAgICAgICBzdHlsZSA9IGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWycwJ10uZ2V0U3R5bGUoKShmZWF0dXJlKTtcbiAgICAgICAgICBpZiAoZmVhdHVyZSAhPT0gdW5kZWZpbmVkICYmIGZlYXR1cmUgIT09IG51bGwgJiYgZmVhdHVyZS5zZWxmICE9PSB3aW5kb3cpIHtcbiAgICAgICAgICAgIHZhciBmRmVhdHVyZXMgPSBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKTtcbiAgICAgICAgICAgIHZhciBzaXplID0gZkZlYXR1cmVzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChzaXplID4gMSkge1xuICAgICAgICAgICAgICBpZiAoIXN0eWxlKSB7XG4gICAgICAgICAgICAgICAgc3R5bGUgPSBbXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBidWJibGUtb2Zmc2V0XG4gICAgICAgICAgICAgIHZhciBpY29uT2Zmc2V0ID0gWzAsIDBdO1xuICAgICAgICAgICAgICBpZiAoc3R5bGVbMF0pIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByYWRpdXMgPSBwYXJzZUludChzdHlsZVswXS5nZXRJbWFnZSgpLmdldFJhZGl1cygpLCAxMCk7XG4gICAgICAgICAgICAgICAgICBpZiAocmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSBbMCwgcmFkaXVzXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICBpY29uT2Zmc2V0ID0gc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRBbmNob3IoKSB8fCBbMCwgMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIGZpbGxjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eSgnNDk3NUE4Jyx7XG4gICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiA3MFxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEuY2x1c3Rlcl9maWxsY29sb3IpIHtcbiAgICAgICAgICAgICAgICBmaWxsY29sb3IgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoY29udGVudERhdGEuY2x1c3Rlcl9maWxsY29sb3Ise1xuICAgICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IDcwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGZvbnRjb2xvciA9IGNvbnRlbnREYXRhLmNsdXN0ZXJfZm9udGNvbG9yID8gJyMnICsgY29udGVudERhdGEuY2x1c3Rlcl9mb250Y29sb3IgOiAnI0ZGRkZGRic7XG5cbiAgICAgICAgICAgICAgc3R5bGUucHVzaChcbiAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgdGV4dDogbmV3IG9sLnN0eWxlLlRleHQoe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIuKXj1wiLFxuICAgICAgICAgICAgICAgICAgICBmb250OiBcIjYwcHggc2Fucy1zZXJpZlwiLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiAtMSAqIGljb25PZmZzZXRbMF0sXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IC0xICogaWNvbk9mZnNldFsxXSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBmaWxsY29sb3JcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgc3R5bGUucHVzaChcbiAgICAgICAgICAgICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgdGV4dDogbmV3IG9sLnN0eWxlLlRleHQoe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBzaXplLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IC0xICogaWNvbk9mZnNldFswXSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEgKiBpY29uT2Zmc2V0WzFdICsgMyxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBmb250Y29sb3JcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgaWYoZmVhdHVyZSAmJiBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKSAmJiBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKVsnMCddLmdldFN0eWxlKCkpe1xuICAgICAgICAgICAgcmV0dXJuIGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWycwJ10uZ2V0U3R5bGUoKShmZWF0dXJlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9O1xuXG4gICAgICAvL3ZlY3RvckxheWVyID0gc2VsZi5nZXRWZWN0b3JMYXllcihjbHVzdGVyU291cmNlLCBzdHlsZUZvckNsdXN0ZXIpO1xuXG4gICAgICB2ZWN0b3JMYXllciA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe1xuICAgICAgICBuYW1lOiAnQ2x1c3RlcicsXG4gICAgICAgIHNvdXJjZTogY2x1c3RlclNvdXJjZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlRm9yQ2x1c3RlclxuXG4gICAgICB9KTtcblxuICAgICAgdmFyIGFsbExheWVycyA9IHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0TGF5ZXJzKCkuZ2V0QXJyYXkoKTtcbiAgICAgIHZhciBtaXNzaW5nTGF5ZXIgPSB0cnVlO1xuICAgICAgZm9yKGkgPSAwOyBpIDwgYWxsTGF5ZXJzLmxlbmd0aDsgaSsrKXtcblxuICAgICAgICBpZihhbGxMYXllcnNbaV0uY2x1c3RlcnMpIHtcbiAgICAgICAgICBhbGxMYXllcnNbaV0gPSB2ZWN0b3JMYXllcjtcbiAgICAgICAgICBtaXNzaW5nTGF5ZXIgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZihtaXNzaW5nTGF5ZXIpe1xuICAgICAgICBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKHZlY3RvckxheWVyKTtcbiAgICAgIH1cbiAgICB9XG5cblxuXG4gIH0vL2VuZCBvZiBjb21iaW5lTGF5ZXJzXG5cblxuICBjaGVja0xheWVySXNBY3RpdmVGb3Jab29tKGxheWVySWQsIG9wdF96b29tKSB7XG4gICAgdmFyIGxheWVyLFxuICAgICAgem9vbSxcbiAgICAgIGxheWVyQ29udGVudCxcbiAgICAgIGxvY3N0eWxlO1xuXG4gICAgaWYgKCF0aGlzLmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbbGF5ZXJJZF0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsYXllciA9IHRoaXMubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1tsYXllcklkXTtcblxuICAgIGlmIChvcHRfem9vbSkge1xuICAgICAgem9vbSA9IG9wdF96b29tO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRab29tKCkgPiAtMSkge1xuICAgICAgem9vbSA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB6b29tID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChsYXllci56b29tID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChsYXllci5jb250ZW50ICYmIGxheWVyLmNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxheWVyLmNvbnRlbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsYXllckNvbnRlbnQgPSBsYXllci5jb250ZW50W2ldO1xuICAgICAgICAgIGlmIChsYXllckNvbnRlbnQubG9jYXRpb25TdHlsZSkge1xuICAgICAgICAgICAgbG9jc3R5bGUgPSB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsYXllckNvbnRlbnQubG9jYXRpb25TdHlsZV07XG4gICAgICAgICAgICAvLyBUT0RPIGNoZWNrIGFsbCBsb2NzdHlsZXMgYW5kIHRha2UgdGhlIG1vc3QgY29uc3RyYWluaW5nIHpvb20gdmFsdWVcbiAgICAgICAgICAgIGlmIChsb2NzdHlsZSkge1xuICAgICAgICAgICAgICBsYXllci56b29tID0ge307XG4gICAgICAgICAgICAgIGlmIChsb2NzdHlsZS5tYXh6b29tKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXIuem9vbS5tYXggPSBsb2NzdHlsZS5tYXh6b29tO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChsb2NzdHlsZS5taW56b29tKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXIuem9vbS5taW4gPSBsb2NzdHlsZS5taW56b29tO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChsYXllci56b29tLm1heCB8fCBsYXllci56b29tLm1pbikge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgodHlwZW9mIHpvb20gPT09IFwibnVtYmVyXCIpICYmIGxheWVyLnpvb21cbiAgICAgICYmIChsYXllci56b29tLm1pbiA+IHpvb20gfHwgKGxheWVyLnpvb20ubWF4ID4gMCAmJiBsYXllci56b29tLm1heCA8IHpvb20pKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIGVuZCBvZiBcImNoZWNrTGF5ZXJJc0FjdGl2ZSgpXCJcblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1wcm94eS5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0dlcm1hbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1kZVwiO1xuXG50aGlzLmM0ZyA9IHRoaXMuYzRnIHx8IHt9O1xudGhpcy5jNGcubWFwcyA9IHRoaXMuYzRnLm1hcHMgfHwge307XG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtab29tbGV2ZWx9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtem9vbWxldmVsXCI7XG5pbXBvcnQgKiBhcyBwb3B1cEZ1bmN0aW9uc0RFIGZyb20gXCIuL2M0Zy1tYXBzLXBvcHVwLWluZm8tZGVcIjtcbmltcG9ydCAqIGFzIHBvcHVwRnVuY3Rpb25zRU4gZnJvbSBcIi4vYzRnLW1hcHMtcG9wdXAtaW5mby1lblwiO1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzRW5nbGlzaH0gZnJvbSBcIi4vYzRnLW1hcHMtY29uc3RhbnQtaTE4bi1lblwiO1xuXG5sZXQgcG9wdXBGdW5jdGlvbnMgPSB7fTtcblxuaWYgKHR5cGVvZiBtYXBEYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgIHBvcHVwRnVuY3Rpb25zID0gcG9wdXBGdW5jdGlvbnNERTtcbiAgfSBlbHNlIGlmIChtYXBEYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgIHBvcHVwRnVuY3Rpb25zID0gcG9wdXBGdW5jdGlvbnNFTjtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIHBvcHVwRnVuY3Rpb25zID0gcG9wdXBGdW5jdGlvbnNERTtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIGM0Zy1NYXBzIHV0aWxpdHkgZnVuY3Rpb25zXG4gICAqL1xuICBjNGcubWFwcy51dGlscyA9ICQuZXh0ZW5kKGM0Zy5tYXBzLnV0aWxzLCB7XG4gICAgLyoqXG4gICAgICogIENvbnZlcnRzIHRoZSBmaXJzdCBsZXR0ZXIgb2YgYSBnaXZlbiBzdHJpbmcgdG8gdXBwZXJjYXNlLCBsZWF2aW5nIHRoZSByZW1haW5pbmcgc3RyaW5nIHVudG91Y2hlZC5cbiAgICAgKlxuICAgICAqICBAcGFyYW0gICAge3N0cmluZ30gICAgdGhlIHN0cmluZyB0byBjYXBpdGFsaXplXG4gICAgICpcbiAgICAgKiAgQHJldHVybiAgIHtzdHJpbmd9ICAgIHRoZSBjYXBpdGFsaXplZCBzdHJpbmdcbiAgICAgKi9cbiAgICBjYXBpdGFsaXplRmlyc3RMZXR0ZXI6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYW4gdW5pcXVlIGlkLlxuICAgICAqXG4gICAgICogVGhlIGlkIGlzIDkgY2hhcmFjdGVycyBsb25nIGFuZCBwcmVmaXhlZCB3aXRoIGFuIHVuZGVyc2NvcmUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgVGhlIGdlbmVyYXRlZCBpZC5cbiAgICAgKi9cbiAgICBnZXRVbmlxdWVJZDogZnVuY3Rpb24gKCkge1xuICAgICAgLy8gTWF0aC5yYW5kb20gc2hvdWxkIGJlIHVuaXF1ZSBiZWNhdXNlIG9mIGl0cyBzZWVkaW5nIGFsZ29yaXRobS5cbiAgICAgIC8vIENvbnZlcnQgaXQgdG8gYmFzZSAzNiAobnVtYmVycyArIGxldHRlcnMpLCBhbmQgZ3JhYiB0aGUgZmlyc3QgOSBjaGFyYWN0ZXJzXG4gICAgICAvLyBhZnRlciB0aGUgZGVjaW1hbC5cbiAgICAgIHJldHVybiAnXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVuY29kZSBpbnB1dCBzdHJpbmdzIGZvciBHZW9KU09OLU9iamVjdHMgcHJvcGVybHksXG4gICAgICogc28gdGhleSB3aWxsIG5vdCBicmVhayB0aGUgQ29kZS5cbiAgICAgKiBUcmFuc2Zvcm1zOlxuICAgICAqICAgXFwgLT4gXFxcXDtcbiAgICAgKiAgIFwiIC0+ICcnO1xuICAgICAqICAgw4QgLT4gJkF1bWw7XG4gICAgICogICDDpCAtPiAmYXVtbDtcbiAgICAgKiAgIMOWIC0+ICZPdW1sO1xuICAgICAqICAgw7YgLT4gJm91bWw7XG4gICAgICogICDDnCAtPiAmVXVtbDtcbiAgICAgKiAgIMO8IC0+ICZ1dW1sO1xuICAgICAqXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gIGlucHV0ICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBlbmNvZGVHZW9Kc29uUHJvcGVydHk6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgdmFyIG91dHB1dDtcblxuICAgICAgaWYgKCFpbnB1dCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dCA9IGlucHV0LnJlcGxhY2UoXG4gICAgICAgICAgL1xcXFwvZywgJ1xcXFxcXFxcJ1xuICAgICAgKS5yZXBsYWNlKFxuICAgICAgICAgIC9cXFwiL2csICdcXCdcXCcnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OEL2csICcmQXVtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OkL2csICcmYXVtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OWL2csICcmT3VtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8O2L2csICcmb3VtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8OcL2csICcmVXVtbDsnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgL8O8L2csICcmdXVtbDsnXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0sIC8vIGVuZCBvZiBlbmNvZGVHZW9Kc29uUHJvcGVydHkoKVxuXG4gICAgLyoqXG4gICAgICogRGVjb2RlIGlucHV0IHN0cmluZ3MgZm9yIEdlb0pTT04tT2JqZWN0cyBwcm9wZXJseSxcbiAgICAgKiBzbyB0aGV5IHdpbGwgYmUgZGlzcGxheWVkIGNvcnJlY3RseS5cbiAgICAgKiBUcmFuc2Zvcm1zOlxuICAgICAqICAgXFxcXCAgICAgLT4gXFw7XG4gICAgICogICAnJyAgICAgLT4gXCI7XG4gICAgICogICAmQXVtbDsgLT4gw4RcbiAgICAgKiAgICZhdW1sOyAtPiDDpFxuICAgICAqICAgJk91bWw7IC0+IMOWXG4gICAgICogICAmb3VtbDsgLT4gw7ZcbiAgICAgKiAgICZVdW1sOyAtPiDDnFxuICAgICAqICAgJnV1bWw7IC0+IMO8XG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgaW5wdXQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGRlY29kZUdlb0pzb25Qcm9wZXJ0eTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICB2YXIgb3V0cHV0O1xuXG4gICAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaW5wdXQgPSBpbnB1dCArIFwiXCI7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dCA9IGlucHV0LnJlcGxhY2UoXG4gICAgICAgICAgL1xcXFxcXFxcL2csICdcXFxcJ1xuICAgICAgKS5yZXBsYWNlKFxuICAgICAgICAgIC9cXCdcXCcvZywgJ1xcXCInXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZBdW1sOy9nLCAnw4QnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZhdW1sOy9nLCAnw6QnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZPdW1sOy9nLCAnw5YnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZvdW1sOy9nLCAnw7YnXG4gICAgICApLnJlcGxhY2UoXG4gICAgICAgICAgLyZVdW1sOy9nLCAnw5w7J1xuICAgICAgKS5yZXBsYWNlKFxuICAgICAgICAgIC8mdXVtbDsvZywgJ8O8J1xuICAgICAgKTtcblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9LCAvLyBlbmQgb2YgZGVjb2RlR2VvSnNvblByb3BlcnR5KClcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBvciByZXBsYWNlIGFuIFVSTC1wYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBJZiBgb3B0X2dldEtleWAgaXMgYGZhbHNlYCBvciBgdW5kZWZpbmVkYCB0aGUgZ2l2ZW4gcGFyYW1ldGVyLCBgcGFyYW1gLFxuICAgICAqIHdpbGwgYmUgYXBwbGllZCBhcyBcImhhc2gtcGFyYW1ldGVyXCIuXG4gICAgICogZS5nLjpcbiAgICAgKiAgIGh0dHBzOi8vbXl1cmwuZGU6cG9ydC9wYXRoL3RvL21hcHMjcGFyYW1cbiAgICAgKiBOb3RlLCB0aGF0IGFscmVhZHkgZXhpc3RpbmcgXCJoYXNoLXBhcmFtZXRlcnNcIiB3aWxsIGJlIG92ZXJyaWRlbixcbiAgICAgKiB3aGVyZWFzIGV4aXN0aW5nIFwiR0VULXBhcmFtZXRlcnNcIiBzdGF5IHVudG91Y2hlZC5cbiAgICAgKlxuICAgICAqIElmIGBvcHRfZ2V0S2V5YCBpcyBzZXQsIGl0IHdpbGwgYmUgYXBwbGllZCBhcyBcIkdFVC1wYXJhbWV0ZXJcIi5cbiAgICAgKiBlLmcuOlxuICAgICAqICAgaHR0cHM6Ly9teXVybC5kZTpwb3J0L3BhdGgvdG8vbWFwcz9vcHRfZ2V0S2V5PXBhcmFtXG4gICAgICogSWYgdGhlIGtleSBkZXNjcmliZWQgYnkgYG9wdF9nZXRLZXlgIGlzIGFscmVhZHkgZXhpc3RpbmcsIGl0cyB2YWx1ZSB3aWxsIGJlIG92ZXJyaWRlbixcbiAgICAgKiBvdGhlcndpc2UgdGhlIGtleS12YWx1ZS1wYWlyIHdpbGwgYmUgYXBwZW5kZWQgYXBwcm9wcmlhdGx5LlxuICAgICAqIEFscmVhZHkgZXhpc3RpbmcgXCJoYXNoLXBhcmFtZXRlcnNcIiB3aWxsIHN0YXkgdW50b3VjaGVkLlxuICAgICAqXG4gICAgICogSWYgYG9wdF9leGVjdXRlYCBpcyBgZmFsc2VgIG9yIGB1bmRlZmluZWRgLCB0aGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gdGhlIG5ldyBsaW5rIGFzIGBzdHJpbmdgLFxuICAgICAqIG90aGVyd2lzZSB0aGUgXCJocmVmL2xvY2F0aW9uXCIgd2lsbCBiZSBjaGFuZ2VkIGRpcmVjdGx5IGluIHRoZSBicm93c2VyLCB3aGljaCBjYW4gY2F1c2UgYSBwYWdlcmVsb2FkLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgcGFyYW0gICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gIHt1bmRlZmluZWR8Ym9vbGVhbnxzdHJpbmd9ICBvcHRfZ2V0S2V5ICAgRGVmYXVsdDogYHVuZGVmaW5lZGBcbiAgICAgKiBAcGFyYW0gIHt1bmRlZmluZWR8Ym9vbGVhbn0gICAgICAgICBvcHRfZXhlY3V0ZSAgRGVmYXVsdDogYHVuZGVmaW5lZGBcbiAgICAgKi9cbiAgICBzZXRVcmxQYXJhbTogZnVuY3Rpb24gKHBhcmFtLCBvcHRfZ2V0S2V5LCBvcHRfZXhlY3V0ZSkge1xuICAgICAgdmFyIGxpbmssXG4gICAgICAgICAgc2VhcmNoUGFyYW0sXG4gICAgICAgICAgcGFyYW1SZXBsYWNlZCxcbiAgICAgICAgICBpO1xuXG4gICAgICBpZiAodHlwZW9mIHBhcmFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBsaW5rID0gbG9jYXRpb24ub3JpZ2luICsgbG9jYXRpb24ucGF0aG5hbWU7XG5cbiAgICAgIGlmICghb3B0X2dldEtleSkge1xuICAgICAgICAvLyB1c2UgaGFzaC1wYXJhbWV0ZXJcbiAgICAgICAgaWYgKG9wdF9leGVjdXRlKSB7XG4gICAgICAgICAgbG9jYXRpb24uaGFzaCA9IHBhcmFtO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxpbmsgKz0gbG9jYXRpb24uc2VhcmNoICsgJyMnICsgcGFyYW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1c2UgR0VULXBhcmFtZXRlclxuICAgICAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICAgICAgLy8gdGhlcmUgYXJlIGFscmVhZHkgc2VhcmNoLXBhcmFtZXRlcnNcbiAgICAgICAgICBwYXJhbVJlcGxhY2VkID0gZmFsc2U7XG4gICAgICAgICAgb3B0X2dldEtleSA9IG9wdF9nZXRLZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAvLyByZXBsYWNlIHBhcmFtZXRlciBpZiBhbHJlYWR5IGV4aXN0ZW50XG4gICAgICAgICAgc2VhcmNoUGFyYW0gPSBsb2NhdGlvbi5zZWFyY2gucmVwbGFjZShcbiAgICAgICAgICAgICAgLyhbXj1cXD9cXCZdKyk9KFteJl0rKS9naSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKG1hdGNoLCBrZXksIHZhbHVlLCBvZmZzZXQsIG9yaWdpblN0cmluZykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IG9wdF9nZXRLZXkpIHtcbiAgICAgICAgICAgICAgICAgIHBhcmFtUmVwbGFjZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleSArICc9JyArIHBhcmFtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIC8vIG90aGVyd2lzZSBhcHBlbmQgYXMgbmV3IHBhcmFtZXRlclxuICAgICAgICAgIGlmICghcGFyYW1SZXBsYWNlZCkge1xuICAgICAgICAgICAgc2VhcmNoUGFyYW0gKz0gJyYnICsgb3B0X2dldEtleSArICc9JyArIHBhcmFtO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB0aGlzIHdpbGwgYmUgdGhlIG9ubHkgc2VhcmNoLXBhcmFtZXRlciBpbiB0aGUgVVJMXG4gICAgICAgICAgc2VhcmNoUGFyYW0gPSAnPycgKyBvcHRfZ2V0S2V5ICsgJz0nICsgcGFyYW07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdF9leGVjdXRlKSB7XG4gICAgICAgICAgbG9jYXRpb24uc2VhcmNoID0gc2VhcmNoUGFyYW07XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGluayArPSBzZWFyY2hQYXJhbSArIGxvY2F0aW9uLmhhc2g7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaW5rO1xuICAgIH0sIC8vIGVuZCBvZiBzZXRVcmxQYXJhbSgpXG5cbiAgICAvKipcbiAgICAgKiBHZXQgc2VhcmNoIG9yIGhhc2ggVVJMLXBhcmFtZXRlciBhcyBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBJZiBgb3B0X2dldEtleWAgaXMgYGZhbHNlYCBvciBgdW5kZWZpbmVkYCwgdGhlIGhhc2gtcGFyYW1ldGVyIG9mIHRoZSBVUkwgaXMgcmV0dXJuZWQsXG4gICAgICogb3RoZXJ3aXNlIGl0IHdpbGwgc2VhcmNoIGZvciBhIEdFVC1wYXJhbWV0ZXIgYW5kIHJldHVybiBpdHMgdmFsdWUuXG4gICAgICpcbiAgICAgKiBJZiBhIHBhcmFtZXRlciBpcyBub3QgZXhpc3RlbnQsIG9yIGVtcHR5LCBhbiBlbXB0eSBzdHJpbmcgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHt1bmRlZmluZWR8c3RyaW5nfSAgb3B0X2dldEtleSAgRGVmYXVsdDogYHVuZGVmaW5lZGBcbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGZvdW5kIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBnZXRVcmxQYXJhbTogZnVuY3Rpb24gKG9wdF9nZXRLZXkpIHtcbiAgICAgIHZhciBwYXJhbSxcbiAgICAgICAgICByZWdFeDtcblxuICAgICAgaWYgKCFvcHRfZ2V0S2V5KSB7XG4gICAgICAgIHBhcmFtID0gbG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgICAgIHBhcmFtID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVnRXggPSBuZXcgUmVnRXhwKCdbXFw/XFwmXScgKyBvcHRfZ2V0S2V5ICsgJz0oW14mXSspJywgJ2knKTtcbiAgICAgICAgICBwYXJhbSA9IHJlZ0V4LmV4ZWMobG9jYXRpb24uc2VhcmNoKTtcbiAgICAgICAgICBwYXJhbSA9IHBhcmFtID8gcGFyYW1bMV0gOiAnJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyYW07XG4gICAgfSwgLy8gZW5kIG9mIGdldFVybFBhcmFtKClcblxuICAgIC8qKlxuICAgICAqIERlbHRhLWVuY29kZSBhbiBhcnJheSBvZiBudW1iZXJzLlxuICAgICAqIE5vdGUgdGhhdCB0aGUgYXJyYXkgd2lsbCBiZSBzb3J0ZWQgKGxvd2VzdCB0byBoaWdoZXN0KVxuICAgICAqIGJlZm9yZSBlbmNvZGluZy5cbiAgICAgKlxuICAgICAqIFNvIGFmdGVyIHRoZSBlbmNvZGluZyB0aGUgZmlyc3QgdmFsdWUgb2YgdGhlIG91dHB1dCBjb250YWluc1xuICAgICAqIHRoZSBzbWFsbGVzdCBudW1iZXIgb2YgdGhlIHNldCBhbmQgZWFjaCBmb2xsb3dpbmcgbnVtYmVyIGp1c3RcbiAgICAgKiByZXByZXNlbnRzIHRoZSBvZmZzZXQgdG8gaXRzIHByZXZpb3VzIG5laWdoYm9yLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBtb3N0bHkgZWZmaWNpZW50IGZvciBoaWdoIG51bWJlcnMsIHRoYXQgYXJlIFwiY2xvc2UgdG8gZWFjaCBvdGhlclwiLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiAgIFsxMzM3LCAxMSwgMTAxLCAxMjMsIDk2LCA2OSwgNDIsIDQyXVxuICAgICAqICAgd2lsbCBiZSBzb3J0ZWRcbiAgICAgKiAgIFsxMSwgNDIsIDQyLCA2OSwgOTYsIDEwMSwgMTIzLCAxMzM3XVxuICAgICAqICAgYW5kIGVuY29kZWQgdG9cbiAgICAgKiAgIFsxMSwgMzEsIDAsIDI3LCAyNywgNSwgMjIsIDEyMTRdXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7YXJyYXk8bnVtYmVycz59ICBhcnJJbnB1dCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2FycmF5PG51bWJlcnM+fSAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBkZWx0YUVuY29kZTogZnVuY3Rpb24gKGFycklucHV0KSB7XG4gICAgICB2YXIgYXJyT3V0cHV0LFxuICAgICAgICAgIGk7XG5cbiAgICAgIGlmICghYXJySW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGFycklucHV0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gYXJySW5wdXQ7XG4gICAgICB9XG5cbiAgICAgIGFycklucHV0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgfSk7XG5cbiAgICAgIGFyck91dHB1dCA9IFtdO1xuICAgICAgYXJyT3V0cHV0WzBdID0gYXJySW5wdXRbMF07XG4gICAgICBmb3IgKGkgPSAxOyBpIDwgYXJySW5wdXQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyT3V0cHV0W2ldID0gYXJySW5wdXRbaV0gLSBhcnJJbnB1dFtpIC0gMV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnJPdXRwdXQ7XG5cbiAgICB9LCAvLyBlbmQgb2YgZGVsdGFFbmNvZGUoKVxuXG4gICAgLyoqXG4gICAgICogRGVjb2RlIGEgZGVsdGEtZW5jb2RlZCBhcnJheS5cbiAgICAgKiBTZWUgYGRlbHRhRW5jb2RlYCBmdW5jdGlvbiBmb3IgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHthcnJheTxudW1iZXJzPn0gIGFycklucHV0ICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7YXJyYXk8bnVtYmVycz59ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGRlbHRhRGVjb2RlOiBmdW5jdGlvbiAoYXJySW5wdXQpIHtcbiAgICAgIHZhciBhcnJPdXRwdXQsXG4gICAgICAgICAgaTtcblxuICAgICAgaWYgKCFhcnJJbnB1dCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIGFyck91dHB1dCA9IFtdO1xuICAgICAgYXJyT3V0cHV0WzBdID0gcGFyc2VJbnQoYXJySW5wdXRbMF0sIDEwKTtcbiAgICAgIGlmIChpc05hTihhcnJJbnB1dFswXSkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMTsgaSA8IGFycklucHV0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFyck91dHB1dFtpXSA9IHBhcnNlSW50KGFycklucHV0W2ldLCAxMCkgKyBhcnJPdXRwdXRbaSAtIDFdO1xuICAgICAgICBpZiAoaXNOYU4oYXJyT3V0cHV0W2ldKSkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyT3V0cHV0O1xuXG4gICAgfSwgLy8gZW5kIG9mIGRlbHRhRGVjb2RlKClcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGFuZCBjYWxsIGZ1bmN0aW9ucyBpbiBgYXJySG9va0Z1bmN0aW9uc2Agd2l0aCBnaXZlbiBgcGFyYW1ldGVyc2AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7YXJyYXk8ZnVuY3Rpb24+fSAgIGFyckhvb2tGdW5jdGlvbnMgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7bWl4ZWR9ICAgICAgICAgICAgIHBhcmFtZXRlcnMgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBjYWxsSG9va0Z1bmN0aW9uczogZnVuY3Rpb24gKGFyckhvb2tGdW5jdGlvbnMsIHBhcmFtZXRlcnMpIHtcbiAgICAgIHZhciBqO1xuXG4gICAgICBpZiAoYXJySG9va0Z1bmN0aW9ucyAmJiBhcnJIb29rRnVuY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGFyckhvb2tGdW5jdGlvbnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyckhvb2tGdW5jdGlvbnNbal0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyckhvb2tGdW5jdGlvbnNbal0ocGFyYW1ldGVycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgLy8gZW5kIG9mIFwiY2FsbEhvb2tGdW5jdGlvbnMoKVwiXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgaGV4LWZvcm1hdGVkIGNvbG9yIHZhbHVlIGludG8gcmdiYSgpLWZvcm1hdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtzdHJpbmd8bnVtYmVyfSAgaGV4ICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7c3RyaW5nfG51bWJlcn0gIG9wdF9vcGFjaXR5ICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5OiBmdW5jdGlvbiAoaGV4LCBvcHRfb3BhY2l0eSwgb3B0X2FycmF5KSB7XG5cbiAgICAgIHZhciBiaWdpbnQsIHIsIGcsIGIsIGE7XG5cbiAgICAgIGJpZ2ludCA9IHBhcnNlSW50KGhleCwgMTYpO1xuICAgICAgaWYgKG9wdF9vcGFjaXR5ICYmIG9wdF9vcGFjaXR5LnZhbHVlKSB7XG4gICAgICAgIG9wdF9vcGFjaXR5LnZhbHVlID0gcGFyc2VJbnQob3B0X29wYWNpdHkudmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0X29wYWNpdHkgJiYgdHlwZW9mIG9wdF9vcGFjaXR5ICE9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdF9vcGFjaXR5ID09PSAnb2JqZWN0JyAmJiBvcHRfb3BhY2l0eS52YWx1ZSkge1xuICAgICAgICAgIG9wdF9vcGFjaXR5ID0gb3B0X29wYWNpdHkudmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0X29wYWNpdHkgPSAxMDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgciA9IChiaWdpbnQgPj4gMTYpICYgMjU1O1xuICAgICAgZyA9IChiaWdpbnQgPj4gOCkgJiAyNTU7XG4gICAgICBiID0gYmlnaW50ICYgMjU1O1xuICAgICAgYSA9IG9wdF9vcGFjaXR5ID8gKG9wdF9vcGFjaXR5IC8gMTAwKSA6IDE7XG4gICAgICBpZihvcHRfYXJyYXkpe1xuICAgICAgICByZXR1cm4gW3IsZyxiLGFdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJyZ2JhKFwiICsgciArIFwiLFwiICsgZyArIFwiLFwiICsgYiArIFwiLFwiICsgYSArIFwiKVwiO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2UgYSBkZWZpbmVkIHN0eWxlLCB0byBhIHNpbXBsZXIgdmVyc2lvbi5cbiAgICAgKlxuICAgICAqIFRoZSByZWR1Y2VkIHN0eWxlIGlzIHRoZSBmaXJzdCBzdHlsZSBvZiB0aGUgZGVmaW5lZCBzdHlsZXNldCxcbiAgICAgKiB3aXRoIGEgMXB4IHRoaWNrIHN0cm9rZSBhbmQgYSBjaXJjbGUgd2l0aCBhIDVweCByYWRpdXMuXG4gICAgICpcbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGRpc3BsYXkgYWRkaXRpb25hbCBnZW9tZXRyaWVzIHdpdGggYSBtYWluLWdlb21ldHJ5LFxuICAgICAqIHdpdGhvdXQgaGF2aW5nIHRvIGRlZmluZSBhIHdob2xlIG5ldyBzdHlsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtudW1iZXJ8c3RyaW5nfSAgICAgICAgICAgc3R5bGVJZCAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2FycmF5PG9sLnN0eWxlLlN0eWxlPn0gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcmVkdWNlU3R5bGU6IGZ1bmN0aW9uIChzdHlsZUlkKSB7XG4gICAgICB2YXIgc3R5bGUsXG4gICAgICAgICAgcmVkdWNlZFN0eWxlLFxuICAgICAgICAgIGZpbGxTdHlsZSxcbiAgICAgICAgICBzdHJva2VTdHlsZTtcblxuICAgICAgaWYgKCFjNGcubWFwcy5sb2NhdGlvblN0eWxlc1tzdHlsZUlkXSB8fCAhYzRnLm1hcHMubG9jYXRpb25TdHlsZXNbc3R5bGVJZF0uc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICBzdHlsZSA9IGM0Zy5tYXBzLmxvY2F0aW9uU3R5bGVzW3N0eWxlSWRdLnN0eWxlKClbMF07XG5cbiAgICAgIGZpbGxTdHlsZSA9IHN0eWxlLmdldEZpbGwoKTtcbiAgICAgIHN0cm9rZVN0eWxlID0gc3R5bGUuZ2V0U3Ryb2tlKCk7XG4gICAgICBzdHJva2VTdHlsZS5zZXRXaWR0aCgxKTtcblxuICAgICAgcmVkdWNlZFN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgIHJhZGl1czogNVxuICAgICAgICB9KSxcbiAgICAgICAgLy8gdGV4dDogc3R5bGUuZ2V0VGV4dCgpLFxuICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICBmaWxsOiBmaWxsU3R5bGVcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gW3JlZHVjZWRTdHlsZV07XG4gICAgfSwgLy8gZW5kIG9mIFwicmVkdWNlU3R5bGVcIlxuXG4gICAgLyoqXG4gICAgICogTWVhc3VyZSB0aGUgZGltZW5zaW9ucyBvZiB0aGUgZ2l2ZW4gZ2VvbWV0cnkuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgZ2VvbWV0cnkgaXMgYSBgTGluZVN0cmluZ2AgdGhlIGZ1bmN0aW9uIHdpbGwgbWVhc3VyZSBpdHMgbGVuZ3RoLFxuICAgICAqIGlzIGl0IGEgYFBvbHlnb25gIGl0IHdpbGwgbWVhc3VyZSB0aGUgYWNyZWFnZSxcbiAgICAgKiBvdGhlcndpc2UgaXQgd2lsbCByZXR1cm4gYDBgLlxuICAgICAqXG4gICAgICogSWYgdGhlIG9wdGlvbmFsIGBvcHRfZm9yY2VMaW5lTWVhc3VyZWAgcGFyYW1ldGVyIGlzIGB0cnVlYFxuICAgICAqIGFuZCB0aGUgZ2VvbWV0cnkgaXMgYSBgUG9seWdvbmAgaXQgd2lsbCBtZWFzdXJlIGl0cyBwZXJpbWV0ZXIgaW5zdGVhZFxuICAgICAqIG9mIGl0cyBhY3JlYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtICAge29sLmdlb20uTGluZVN0cmluZ3xvbC5nZW9tLlBvbHlnb259ICAgZ2VvbWV0cnkgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7dW5kZWZpbmVkfGJvb2xlYW59ICAgICAgICAgICAgICAgICAgICBvcHRfZm9yY2VMaW5lTWVhc3VyZSAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2FycmF5PHN0cmluZz58bnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBtZWFzdXJlR2VvbWV0cnk6IGZ1bmN0aW9uIChnZW9tZXRyeSwgb3B0X2ZvcmNlTGluZU1lYXN1cmUsIG9wdF9mb3JjZVN1cmZhY2VNZWFzdXJlKSB7XG4gICAgICB2YXIgdmFsdWUsXG4gICAgICAgICAgc3BoZXJlLFxuICAgICAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgICAgIGNvb3JkMSxcbiAgICAgICAgICBjb29yZDIsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIGk7XG5cbiAgICAgIGlmICghZ2VvbWV0cnkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvL3NwaGVyZSA9IG5ldyBvbC5TcGhlcmUoNjM3ODEzNyk7XG4gICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgaWYgKGdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5MaW5lU3RyaW5nIHx8IChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbiAmJiBvcHRfZm9yY2VMaW5lTWVhc3VyZSkpIHtcblxuICAgICAgICBjb29yZGluYXRlcyA9IGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgIGlmIChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbikge1xuICAgICAgICAgIGNvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXNbMF07XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29vcmRpbmF0ZXMubGVuZ3RoIC0gMTsgaSArPSAxKSB7XG4gICAgICAgICAgY29vcmQxID0gb2wucHJvai50cmFuc2Zvcm0oY29vcmRpbmF0ZXNbaV0sICdFUFNHOjM4NTcnLCAnRVBTRzo0MzI2Jyk7XG4gICAgICAgICAgY29vcmQyID0gb2wucHJvai50cmFuc2Zvcm0oY29vcmRpbmF0ZXNbaSArIDFdLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpO1xuICAgICAgICAgIHZhbHVlICs9IG9sLnNwaGVyZS5nZXREaXN0YW5jZShjb29yZDEsIGNvb3JkMiwgNjM3ODEzNyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnJhd1ZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICBpZiAodmFsdWUgPiAxMDAwKSB7XG4gICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlIC8gMTAwMCAqIDEwMCkgLyAxMDApLnRvRml4ZWQoMikgK1xuICAgICAgICAgICAgICAnICcgKyAna20nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSByZXN1bHQucmF3VmFsdWUgK1xuICAgICAgICAgICAgICAnICcgKyAnbSc7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIGlmIChnZW9tZXRyeSBpbnN0YW5jZW9mIG9sLmdlb20uUG9seWdvbikge1xuICAgICAgICAvL2dlb21ldHJ5ID0gLyoqIEB0eXBlIHtvbC5nZW9tLlBvbHlnb259ICovKGdlb21ldHJ5LmNsb25lKCkudHJhbnNmb3JtKCdFUFNHOjM4NTcnLCAnRVBTRzo0MzI2JykpO1xuICAgICAgICAvL2Nvb3JkaW5hdGVzID0gZ2VvbWV0cnkuZ2V0TGluZWFyUmluZygwKS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgICB2YWx1ZSA9IE1hdGguYWJzKG9sLnNwaGVyZS5nZXRBcmVhKGdlb21ldHJ5KSk7XG4gICAgICAgIHJlc3VsdC5yYXdWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgaWYgKHZhbHVlID4gMTAwMDApIHtcbiAgICAgICAgICByZXN1bHQuaHRtbFZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgLyAxMDAwMDAwICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKSArXG4gICAgICAgICAgICAgICcgJyArICdrbTxzdXA+Mjwvc3VwPic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IHJlc3VsdC5yYXdWYWx1ZSArXG4gICAgICAgICAgICAgICcgJyArICdtPHN1cD4yPC9zdXA+JztcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5IGluc3RhbmNlb2Ygb2wuZ2VvbS5DaXJjbGUgJiYgb3B0X2ZvcmNlU3VyZmFjZU1lYXN1cmUpIHtcbiAgICAgICAgICB2YXIgY2VudGVyID0gZ2VvbWV0cnkuZ2V0Q2VudGVyKCk7XG4gICAgICAgICAgdmFyIHJhZGl1cyA9IGdlb21ldHJ5LmdldFJhZGl1cygpO1xuICAgICAgICAgIHZhciBlZGdlQ29vcmRpbmF0ZSA9IFtjZW50ZXJbMF0gKyByYWRpdXMsIGNlbnRlclsxXV07XG4gICAgICAgICAgLy92YXIgd2dzODRTcGhlcmUgPSBuZXcgb2wuU3BoZXJlKDYzNzgxMzcpO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9sLnNwaGVyZS5nZXREaXN0YW5jZShcbiAgICAgICAgICAgICAgb2wucHJvai50cmFuc2Zvcm0oY2VudGVyLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpLFxuICAgICAgICAgICAgICBvbC5wcm9qLnRyYW5zZm9ybShlZGdlQ29vcmRpbmF0ZSwgJ0VQU0c6Mzg1NycsICdFUFNHOjQzMjYnKSxcbiAgICAgICAgICAgICAgNjM3ODEzN1xuICAgICAgICAgICk7XG5cbiAgICAgICAgICB2YWx1ZSA9IE1hdGguUEkgKiBNYXRoLnNxcnQodmFsdWUpO1xuXG4gICAgICAgICAgcmVzdWx0LnJhd1ZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICAgIGlmICh2YWx1ZSA+IDEwMDAwKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSAoTWF0aC5yb3VuZCh2YWx1ZSAvIDEwMDAwMDAgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpICtcbiAgICAgICAgICAgICAgICAgICcgJyArICdrbTxzdXA+Mjwvc3VwPic7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IHJlc3VsdC5yYXdWYWx1ZSArXG4gICAgICAgICAgICAgICAgICAnICcgKyAnbTxzdXA+Mjwvc3VwPic7XG4gICAgICAgICAgfVxuXG5cbiAgICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkgaW5zdGFuY2VvZiBvbC5nZW9tLkNpcmNsZSkge1xuICAgICAgICAgIHZhciBjZW50ZXIgPSBnZW9tZXRyeS5nZXRDZW50ZXIoKTtcbiAgICAgICAgICB2YXIgcmFkaXVzID0gZ2VvbWV0cnkuZ2V0UmFkaXVzKCk7XG4gICAgICAgICAgdmFyIGVkZ2VDb29yZGluYXRlID0gW2NlbnRlclswXSArIHJhZGl1cywgY2VudGVyWzFdXTtcbiAgICAgICAgICAvL3ZhciB3Z3M4NFNwaGVyZSA9IG5ldyBvbC5TcGhlcmUoNjM3ODEzNyk7XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2wuc3BoZXJlLmdldERpc3RhbmNlKFxuICAgICAgICAgICAgICBvbC5wcm9qLnRyYW5zZm9ybShjZW50ZXIsICdFUFNHOjM4NTcnLCAnRVBTRzo0MzI2JyksXG4gICAgICAgICAgICAgIG9sLnByb2oudHJhbnNmb3JtKGVkZ2VDb29yZGluYXRlLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpLFxuICAgICAgICAgICAgICA2Mzc4MTM3XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHJlc3VsdC5yYXdWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgICBpZiAocmVzdWx0LnJhd1ZhbHVlID4gMTAwMDApIHtcbiAgICAgICAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IChNYXRoLnJvdW5kKCh2YWx1ZSAqIDEwMCkgLyAxMDApIC8gMTAwMCkudG9GaXhlZCgyKSArXG4gICAgICAgICAgICAgICAgICAnICcgKyAna20nO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSByZXN1bHQucmF3VmFsdWUgK1xuICAgICAgICAgICAgICAgICAgJyAnICsgJ20nO1xuICAgICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBleHRlbnQgZm9yIGFuIGFycmF5IG9mIGdlb21ldHJpZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7QXJyYXkuPG9sLmdlb20uc2ltcGxlR2VvbWV0cnk+fSAgYXJyR2VvbWV0cmllcyAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge29sLkV4dGVudH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBnZXRFeHRlbnRGb3JHZW9tZXRyaWVzOiBmdW5jdGlvbiAoYXJyR2VvbWV0cmllcykge1xuICAgICAgdmFyIGV4dGVudFNvdXJjZTtcblxuICAgICAgaWYgKCFhcnJHZW9tZXRyaWVzKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignR2VvbWV0cmllcyBtaXNzaW5nIGZvciBleHRlbnQgY2FsY3VsYXRpb24nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBleHRlbnRTb3VyY2UgPSBuZXcgb2wuc291cmNlLlZlY3RvcigpO1xuICAgICAgZXh0ZW50U291cmNlLmFkZEZlYXR1cmVzKGFyckdlb21ldHJpZXMpO1xuXG4gICAgICByZXR1cm4gZXh0ZW50U291cmNlLmdldEV4dGVudCgpIHx8IG9sLkV4dGVudChbMCwgMCwgMCwgMF0pO1xuICAgIH0sIC8vIGVuZCBvZiBnZXRFeHRlbnRGb3JHZW9tZXRyaWVzKClcblxuICAgIC8qKlxuICAgICAqIEZpdCB2aWV3IG9mIGBtYXBgIHRvIGEgZ2l2ZW4gYXJyYXkgb2YgYGV4dGVudHNgLlxuICAgICAqIEFuaW1hdGVkIGlmIGBvcHRfYW5pbWF0aW9uRHVyYXRpb25gIGlzIGFuIGludGVnZXIgPiAwLlxuICAgICAqXG4gICAgICogQHBhcmFtICAge29iamVjdH0gICAgIGV4dGVudHMgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuTWFwfSAgICAgbWFwICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICAge2ludGVnZXJ9ICAgIG9wdF9hbmltYXRpb25EdXJhdGlvbiAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge2Jvb2xlYW59ICAgICAgICAgICAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGZpdFRvRXh0ZW50czogZnVuY3Rpb24gKGV4dGVudHMsIG1hcCwgb3B0X3BhZGRpbmcsIG9wdF9hbmltYXRpb25EdXJhdGlvbikge1xuICAgICAgdmFyIHZpZXcsXG4gICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICBleHRlbnQsXG4gICAgICAgICAga2V5O1xuXG4gICAgICBpZiAoIWV4dGVudHMgfHwgIW1hcCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ01pc3NpbmcgZXh0ZW50IG9yIG1hcCBmb3IgZml0RXh0ZW50Jyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vZXh0ZW50ID0gb2wuZXh0ZW50LmNyZWF0ZUVtcHR5KCk7XG5cbiAgICAgIGZvciAoa2V5IGluIGV4dGVudHMpIHtcbiAgICAgICAgaWYgKGV4dGVudHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZXh0ZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBleHRlbnQgPSBleHRlbnRzW2tleV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9sLmV4dGVudC5leHRlbmQoZXh0ZW50LCBleHRlbnRzW2tleV0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZml0VG9FeHRlbnQoZXh0ZW50LCBtYXAsIG9wdF9wYWRkaW5nLCA1LCAwLCAwLCAyKTtcblxuXG4gICAgfSwgLy8gZW5kIG9mIGZpdFRvRXh0ZW50c1xuXG4gICAgLyoqXG4gICAgICogRml0IHZpZXcgb2YgYG1hcGAgdG8gYSBnaXZlbiBgZXh0ZW50YC5cbiAgICAgKiBBbmltYXRlZCBpZiBgb3B0X2FuaW1hdGlvbkR1cmF0aW9uYCBpcyBhbiBpbnRlZ2VyID4gMC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtvbC5FeHRlbnR9ICBleHRlbnQgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuTWFwfSAgICAgbWFwICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICAge2FycmF5fSAgICAgIG9wdF9wYWRkaW5nICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtpbnRlZ2VyfSAgICBvcHRfYW5pbWF0aW9uRHVyYXRpb24gIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7aW50ZWdlcn0gICAgb3B0X21pblpvb20gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICAge2ludGVnZXJ9ICAgIG9wdF9tYXhab29tICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtpbnRlZ2VyfSAgICBvcHRfbWluUmVzb2x1dGlvbiAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gIHtib29sZWFufSAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBmaXRUb0V4dGVudDogZnVuY3Rpb24gKGV4dGVudCwgbWFwLCBvcHRfcGFkZGluZywgb3B0X2FuaW1hdGlvbkR1cmF0aW9uLCBvcHRfbWluWm9vbSwgb3B0X21heFpvb20sIG9wdF9taW5SZXNvbHV0aW9uKSB7XG4gICAgICB2YXIgdmlldyxcbiAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgIGZpdE9wdGlvbnM7XG5cbiAgICAgIGlmICghZXh0ZW50IHx8ICFtYXApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdNaXNzaW5nIGV4dGVudCBvciBtYXAgZm9yIGZpdEV4dGVudCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZpZXcgPSBtYXAuZ2V0VmlldygpO1xuXG4gICAgICBmaXRPcHRpb25zID0ge1xuICAgICAgICAncGFkZGluZyc6IG9wdF9wYWRkaW5nIHx8IFsyNSwgMjUsIDI1LCAyNV1cbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRfbWluUmVzb2x1dGlvbiAmJiBvcHRfbWluUmVzb2x1dGlvbiA+IDApIHtcbiAgICAgICAgZml0T3B0aW9ucy5taW5SZXNvbHV0aW9uID0gb3B0X21pblJlc29sdXRpb247XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRfbWluWm9vbSAmJiBvcHRfbWluWm9vbSA+PSAwKSB7XG4gICAgICAgIGZpdE9wdGlvbnMubWluWm9vbSA9IG9wdF9taW5ab29tO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0X21heFpvb20gJiYgb3B0X21heFpvb20gPj0gMCkge1xuICAgICAgICBmaXRPcHRpb25zLm1heFpvb20gPSBvcHRfbWF4Wm9vbTtcbiAgICAgIH1cblxuICAgICAgLy8gYW5pbWF0ZSB0aGUgXCJmaXR0aW5nXCIgd2hlbiBhIGR1cmF0aW9uIGlzIGdpdmVuIGFuZCBpdHMgZ3JlYXRlciB0aGFuIDBcbiAgICAgIGlmIChvcHRfYW5pbWF0aW9uRHVyYXRpb24gJiYgb3B0X2FuaW1hdGlvbkR1cmF0aW9uID4gMCkge1xuICAgICAgICB2aWV3LmFuaW1hdGUoe1xuICAgICAgICAgIHN0YXJ0OiArbmV3IERhdGUoKSxcbiAgICAgICAgICBkdXJhdGlvbjogb3B0X2FuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgIHJlc29sdXRpb246IHZpZXcuZ2V0UmVzb2x1dGlvbigpLFxuICAgICAgICAgIGNlbnRlcjogWzAsIDBdXG4gICAgICAgICAgLy9yb3RhdGlvbjogTWF0aC5QSVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gbWFwLmJlZm9yZVJlbmRlcihcbiAgICAgICAgLy8gICAgIG9sLmFuaW1hdGlvbi5wYW4oe1xuICAgICAgICAvLyAgICAgICBzdGFydDogK25ldyBEYXRlKCksXG4gICAgICAgIC8vICAgICAgIGR1cmF0aW9uOiBvcHRfYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICAgIC8vICAgICAgIHNvdXJjZTogdmlldy5nZXRDZW50ZXIoKVxuICAgICAgICAvLyAgICAgfSksXG4gICAgICAgIC8vICAgICBvbC5hbmltYXRpb24uem9vbSh7XG4gICAgICAgIC8vICAgICAgIHN0YXJ0OiArbmV3IERhdGUoKSxcbiAgICAgICAgLy8gICAgICAgZHVyYXRpb246IG9wdF9hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgLy8gICAgICAgcmVzb2x1dGlvbjogdmlldy5nZXRSZXNvbHV0aW9uKClcbiAgICAgICAgLy8gICAgIH0pXG4gICAgICAgIC8vICk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZpZXcuZml0KGV4dGVudCwgbWFwLmdldFNpemUoKSwge3BhZGRpbmc6IFsyNSwgMjUsIDI1LCAyNV19KTtcbiAgICAgICAgLy92aWV3LmZpdChleHRlbnQsIG1hcC5nZXRTaXplKCkpO1xuICAgICAgICAvL3ZpZXcuc2V0Wm9vbSh2aWV3LmdldFpvb20oKS0xKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCAvLyBlbmQgb2YgZml0VG9FeHRlbnQoKVxuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgZnVuY3Rpb24gdG8gcnVuIGFsbCBwbGFjZWhvbGRlciBmdW5jdGlvbnMgYXQgb25jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgIHN0cklucHV0ICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtvbC5GZWF0dXJlfSAgICAgICAgICAgICAgICAgIGZlYXR1cmUgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtvbC5sYXllci5MYXllciB8IHVuZGVmaW5lZH0gIG9wdF9sYXllciAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge3N0cmluZ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcmVwbGFjZUFsbFBsYWNlaG9sZGVyczogZnVuY3Rpb24gKHN0cklucHV0LCBmZWF0dXJlLCBvcHRfbGF5ZXIpIHtcbiAgICAgIHZhciBzdHJPdXRwdXQ7XG5cbiAgICAgIC8vIG9ubHkgY2hlY2sgdGhlIGZpcnN0IHR3byBwYXJhbWV0ZXJzIGFzIHRoZXkgd2lsbCBiZSB1c2VkIGJ5IGFsbCBwbGFjZWhvbGRlci1mdW5jdGlvbnNcbiAgICAgIC8vIC0+IGZvciBwZXJmb3JtYW5jZVxuICAgICAgaWYgKCFzdHJJbnB1dCB8fCAhZmVhdHVyZSkge1xuICAgICAgICByZXR1cm4gc3RySW5wdXQ7XG4gICAgICB9XG5cbiAgICAgIHN0ck91dHB1dCA9IHRoaXMucmVwbGFjZUZ1bmN0aW9uUGxhY2Vob2xkZXJzKHN0cklucHV0LCBmZWF0dXJlLCBvcHRfbGF5ZXIpO1xuICAgICAgc3RyT3V0cHV0ID0gdGhpcy5yZXBsYWNlRWRpdG9yVmFyc1BsYWNlaG9sZGVycyhzdHJPdXRwdXQsIGZlYXR1cmUpO1xuICAgICAgc3RyT3V0cHV0ID0gdGhpcy5yZXBsYWNlQXR0cmlidXRlUGxhY2Vob2xkZXJzKHN0ck91dHB1dCwgZmVhdHVyZSk7XG5cbiAgICAgIHJldHVybiBzdHJPdXRwdXQ7XG4gICAgfSwgLy8gZW5kIG9mIHJlcGxhY2VBbGxQbGFjZWhvbGRlcnMoKVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZSBldmVyeSBvY2N1cmFuY2Ugb2YgYCR7Rk5mdW5jdGlvbk5hbWV9YCwgaW4gYHN0cklucHV0YCxcbiAgICAgKiB3aXRoIHRoZSByZXN1bHQgb2YgYHdpbmRvdy5mdW5jdGlvbk5hbWUoZmVhdHVyZSwgc3R5bGUpYCwgaWYgaXQgZXhpc3QuXG4gICAgICogT3RoZXJ3aXNlIHRoZSBwbGFjZWhvbGRlciB3aWxsIGJlIHNpbXBseSByZW1vdmVkICgvcmVwbGFjZWQgd2l0aCAnJykuXG4gICAgICogU3R5bGUgd2lsbCBiZSB0YWtlbiBlaXRoZXIgZnJvbSB0aGUgZmVhdHVyZSwgb3IgdGhlIGxheWVyLlxuICAgICAqXG4gICAgICogQHBhcmFtICAge3N0cmluZ30gICAgICAgICAgc3RySW5wdXQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuRmVhdHVyZX0gICAgICBmZWF0dXJlICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSAgIHtvbC5sYXllci5MYXllcn0gIGxheWVyICAgICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHJlcGxhY2VGdW5jdGlvblBsYWNlaG9sZGVyczogZnVuY3Rpb24gKHN0cklucHV0LCBmZWF0dXJlLCBsYXllcikge1xuICAgICAgdmFyIHN0ck91dHB1dDtcblxuICAgICAgaWYgKCFzdHJJbnB1dCB8fCAhZmVhdHVyZSB8fCAhbGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuIHN0cklucHV0O1xuICAgICAgfVxuXG4gICAgICBzdHJPdXRwdXQgPSBzdHJJbnB1dC5yZXBsYWNlKFxuICAgICAgICAgIC9cXCRcXHtGTihbXlxcfV0qKVxcfS9nLFxuICAgICAgICAgIGZ1bmN0aW9uIChtYXRjaCwgZnVuY3Rpb25OYW1lLCBvZmZzZXQsIG9yaWdpblN0cmluZykge1xuICAgICAgICAgICAgdmFyIHN0eWxlO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBmdW5jdGlvbiBleGlzdHNcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcG9wdXBGdW5jdGlvbnNbZnVuY3Rpb25OYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAvLyBzZWFyY2ggc3R5bGVcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmZWF0dXJlLmdldFN0eWxlID09PSAnZnVuY3Rpb24nICYmIGZlYXR1cmUuZ2V0U3R5bGUoKSAmJiB0eXBlb2YgZmVhdHVyZS5nZXRTdHlsZSgpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgc3R5bGUgPSBmZWF0dXJlLmdldFN0eWxlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxheWVyLmdldFN0eWxlID09PSAnZnVuY3Rpb24nICYmIGxheWVyLmdldFN0eWxlKCkpIHtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IGxheWVyLmdldFN0eWxlKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBwb3B1cEZ1bmN0aW9uc1tmdW5jdGlvbk5hbWVdKGZlYXR1cmUsIHN0eWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9XG4gICAgICApOyAvLyBlbmQgb2YgcmVwbGFjZSgpXG5cbiAgICAgIHJldHVybiBzdHJPdXRwdXQ7XG4gICAgfSwgLy8gZW5kIG9mIHJlcGxhY2VGdW5jdGlvblBsYWNlaG9sZGVycygpXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIHBsYWNlaG9sZGVycywgaW4gYHN0cklucHV0YCwgZm9yIHZhcmlhYmxlcyBzZXQgYnkgdGhlIGdlb0VkaXRvci5cbiAgICAgKiBWYWxpZCBwbGFjZWhvbGRlcnMgYXJlOiAoW2tleV0gcmVwcmVzZW50cyB0aGUgc3RyaW5nbmFtZSBvZiB0aGUgdmFyaWFibGVzIGtleSlcbiAgICAgKiAgIGAke0VMW2tleV19YCAgID0+ICBMYWJlbCBmb3IgdGhlIHZhcmlhYmxlXG4gICAgICogICBgJHtFVkxba2V5XX1gICA9PiAgTGFiZWwgZm9yIHRoZSB2YXJpYWJsZSwgaWYgYSB2YWx1ZSBpcyBzZXQgdG9vXG4gICAgICogICBgJHtFVltrZXldfWAgICA9PiAgVmFsdWUgb2YgdGhlIHZhcmlhYmxlXG4gICAgICogICBgJHtFVlZba2V5XX1gICA9PiAgU2FtZSBhcyBgJHtFVltrZXldfWBcbiAgICAgKlxuICAgICAqIElmIG5vIGFwcHJvcHJpYXRlIHZhbHVlIGNhbiBiZSBmb3VuZCBmb3IgYSBwbGFjZWhvbGRlclxuICAgICAqIGl0IHdpbGwgc2ltcGx5IGJlIHJlbW92ZWQgKC9yZXBsYWNlZCB3aXRoICcnKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgc3RySW5wdXQgIFtkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0gICB7b2wuRmVhdHVyZX0gIGZlYXR1cmUgICBbZGVzY3JpcHRpb25dXG4gICAgICpcbiAgICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgcmVwbGFjZUVkaXRvclZhcnNQbGFjZWhvbGRlcnM6IGZ1bmN0aW9uIChzdHJJbnB1dCwgZmVhdHVyZSkge1xuICAgICAgdmFyIHN0ck91dHB1dDtcblxuICAgICAgaWYgKCFzdHJJbnB1dCB8fCAhZmVhdHVyZSB8fCB0eXBlb2YgZmVhdHVyZS5nZXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN0cklucHV0O1xuICAgICAgfVxuXG4gICAgICBzdHJPdXRwdXQgPSBzdHJJbnB1dC5yZXBsYWNlKFxuICAgICAgICAgIC9cXCRcXHsoRVY/W0xWXSkoW15cXH1dKilcXH0vZyxcbiAgICAgICAgICBmdW5jdGlvbiAobWF0Y2gsIHR5cGUsIGV2S2V5LCBvZmZzZXQsIG9yaWdpblN0cmluZykge1xuICAgICAgICAgICAgdmFyIGVkaXRvclZhcnMsXG4gICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgZmVhdHVyZSBoYXMgZWRpdG9yVmFyc1xuICAgICAgICAgICAgaWYgKGZlYXR1cmUuZ2V0KCdlZGl0b3JWYXJzJykpIHtcbiAgICAgICAgICAgICAgZWRpdG9yVmFycyA9IGZlYXR1cmUuZ2V0KCdlZGl0b3JWYXJzJyk7XG4gICAgICAgICAgICAgIC8vIHNlYXJjaCBmb3IgZWRpdG9yVmFyIHdpdGgga2V5ID09IGV2S2V5XG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBlZGl0b3JWYXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVkaXRvclZhcnNbaV0ua2V5ID09PSBldktleSkge1xuICAgICAgICAgICAgICAgICAgLy8gaWYgdHlwZSBpcyAnRVZMJyBkaXNwbGF5IGxhYmVsIG9ubHkgaWYgYSB2YWx1ZSBpcyBzZXQgdG9vXG4gICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ0VMJyB8fCAodHlwZSA9PT0gJ0VWTCcgJiYgZWRpdG9yVmFyc1tpXS52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVkaXRvclZhcnNbaV0ubGFiZWw7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWRpdG9yVmFyc1tpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9XG4gICAgICApOyAvLyBlbmQgb2YgcmVwbGFjZSgpXG5cbiAgICAgIHJldHVybiBzdHJPdXRwdXQ7XG4gICAgfSwgLy8gZW5kIG9mIHJlcGxhY2VFZGl0b3JWYXJzUGxhY2Vob2xkZXJzKClcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgZXZlcnkgb2NjdXJhbmNlIG9mIGAke2F0dHJ9YCwgaW4gYHN0cklucHV0YCxcbiAgICAgKiB3aXRoIHRoZSByZXN1bHQgb2YgYGZlYXR1cmUuZ2V0KGF0dHIpYCwgaWYgaXQgZXhpc3QuXG4gICAgICogT3RoZXJ3aXNlIHRoZSBwbGFjZWhvbGRlciB3aWxsIGJlIHNpbXBseSByZW1vdmVkICgvcmVwbGFjZWQgd2l0aCAnJykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgICAgIHN0cklucHV0ICBbZGVzY3JpcHRpb25dXG4gICAgICogQHBhcmFtICAge29sLkZlYXR1cmV9ICBmZWF0dXJlICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqXG4gICAgICogQHJldHVybiAge3N0cmluZ30gICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIHJlcGxhY2VBdHRyaWJ1dGVQbGFjZWhvbGRlcnM6IGZ1bmN0aW9uIChzdHJJbnB1dCwgZmVhdHVyZSkge1xuICAgICAgdmFyIHN0ck91dHB1dDtcblxuICAgICAgaWYgKCFzdHJJbnB1dCB8fCAhZmVhdHVyZSB8fCB0eXBlb2YgZmVhdHVyZS5nZXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN0cklucHV0O1xuICAgICAgfVxuXG4gICAgICBzdHJPdXRwdXQgPSBzdHJJbnB1dC5yZXBsYWNlKFxuICAgICAgICAgIC9cXCRcXHsoW15cXH1dKilcXH0vZyxcbiAgICAgICAgICBmdW5jdGlvbiAobWF0Y2gsIGF0dHIsIG9mZnNldCwgb3JpZ2luU3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmVhdHVyZS5nZXQoYXR0cikgfHwgJyc7XG4gICAgICAgICAgfVxuICAgICAgKTsgLy8gZW5kIG9mIHJlcGxhY2UoKVxuXG4gICAgICByZXR1cm4gc3RyT3V0cHV0O1xuICAgIH0sIC8vIGVuZCBvZiByZXBsYWNlQXR0cmlidXRlUGxhY2Vob2xkZXJzKClcblxuICAgIG9iamVjdFRvQXJyYXk6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0LmtleXMob2JqZWN0KS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0sIC8vIGVuZCBvZiBvYmplY3RUb0FycmF5KClcblxuICAgIGdldFZlY3RvckxheWVyKHNvdXJjZSwgc3R5bGUpIHtcbiAgICAgICAgdmFyIGZuU3R5bGU7XG5cbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIHN0eWxlIGlzIGEgZnVuY3Rpb25cbiAgICAgICAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZm5TdHlsZSA9IHN0eWxlO1xuICAgICAgICB9IGVsc2UgaWYgKHN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZuU3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgb2wubGF5ZXIuVmVjdG9yKHtcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgc3R5bGU6IGZuU3R5bGVcbiAgICAgICAgfSk7XG4gICAgfSwvLyBlbmQgb2YgXCJnZXRWZWN0b3JMYXllcigpXCJcblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSBzdWJkb21haW4gZnJvbSB0aGUgY3VycmVudCByZXF1ZXN0IGhvc3QgYW5kIHJldHVybnMgaXQuXG4gICAgICogQHJldHVybnMge3N0cmluZyB8ICp9XG4gICAgICovXG4gICAgZ2V0Q3VycmVudFN1YmRvbWFpbigpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICB9LFxuXG4gICAgcmVkcmF3TWFwVmlldzogZnVuY3Rpb24gKG1hcENvbnRyb2xsZXIpIHtcbiAgICAgIHZhciBtYXBEYXRhID0gbWFwQ29udHJvbGxlci5kYXRhO1xuICAgICAgdmFyIGNvbnRyb2xDb250YWluZXJUb3BMZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250cm9sQ29udGFpbmVyVG9wTGVmdC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTF9DT05UQUlORVJfVEwgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFO1xuICAgICAgbWFwQ29udHJvbGxlci4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQucHJlcGVuZChjb250cm9sQ29udGFpbmVyVG9wTGVmdCk7XG5cbiAgICAgIHZhciBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX0JMICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcbiAgICAgICQoY29udHJvbENvbnRhaW5lclRvcExlZnQpLmFmdGVyKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KTtcbiAgICAgIG1hcENvbnRyb2xsZXIubGVmdFNsaWRlRWxlbWVudHMucHVzaChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCk7XG5cbiAgICAgIHZhciBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX0JMX1NVQiArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG5cbiAgICAgIGlmIChtYXBEYXRhLnNjYWxlbGluZSkge1xuICAgICAgICBtYXBDb250cm9sbGVyLm1hcC5yZW1vdmVDb250cm9sKG1hcENvbnRyb2xsZXIuY29udHJvbHMuc2NhbGVsaW5lKTtcbiAgICAgICAgbWFwQ29udHJvbGxlci5jb250cm9scy5zY2FsZWxpbmUgPSBuZXcgb2wuY29udHJvbC5TY2FsZUxpbmUoe1xuICAgICAgICAgIG1hcFZpZXc6IG1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKSxcbiAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0LFxuICAgICAgICAgIHVuZGVmaW5lZEhUTUw6ICdOL0EnXG4gICAgICAgIH0pO1xuICAgICAgICBtYXBDb250cm9sbGVyLm1hcC5hZGRDb250cm9sKG1hcENvbnRyb2xsZXIuY29udHJvbHMuc2NhbGVsaW5lKTtcbiAgICAgIH1cblxuICAgICAgJChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCkuYXBwZW5kKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViKTtcblxuICAgICAgaWYgKG1hcERhdGEuem9vbWxldmVsKSB7XG4gICAgICAgIG1hcENvbnRyb2xsZXIubWFwLnJlbW92ZUNvbnRyb2wobWFwQ29udHJvbGxlci5jb250cm9scy56b29tbGV2ZWwpO1xuICAgICAgICBtYXBDb250cm9sbGVyLmNvbnRyb2xzLnpvb21sZXZlbCA9IG5ldyBab29tbGV2ZWwoe1xuICAgICAgICAgIG1hcFZpZXc6IG1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKSxcbiAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViLFxuICAgICAgICAgIHVuZGVmaW5lZEhUTUw6ICdOL0EnXG4gICAgICAgIH0pO1xuICAgICAgICBtYXBDb250cm9sbGVyLm1hcC5hZGRDb250cm9sKG1hcENvbnRyb2xsZXIuY29udHJvbHMuem9vbWxldmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1hcERhdGEubW91c2Vwb3NpdGlvbikge1xuICAgICAgICBtYXBDb250cm9sbGVyLm1hcC5yZW1vdmVDb250cm9sKG1hcENvbnRyb2xsZXIuY29udHJvbHMubW91c2Vwb3NpdGlvbik7XG4gICAgICAgIG1hcENvbnRyb2xsZXIuY29udHJvbHMubW91c2Vwb3NpdGlvbiA9IG5ldyBvbC5jb250cm9sLk1vdXNlUG9zaXRpb24oe1xuICAgICAgICAgIHByb2plY3Rpb246ICdFUFNHOjQzMjYnLFxuICAgICAgICAgIGNvb3JkaW5hdGVGb3JtYXQ6IG9sLmNvb3JkaW5hdGUudG9TdHJpbmdIRE1TLFxuICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIsXG4gICAgICAgICAgdW5kZWZpbmVkSFRNTDogJ04vQSdcbiAgICAgICAgfSk7XG4gICAgICAgIG1hcENvbnRyb2xsZXIubWFwLmFkZENvbnRyb2wobWFwQ29udHJvbGxlci5jb250cm9scy5tb3VzZXBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2Vba2V5XSB8fCAnJztcbiAgICB9LFxuICAgIHN0b3JlVmFsdWU6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBsb2NhbFN0b3JhZ2Vba2V5XSA9IHZhbHVlOyAvLyBvbmx5IHN0cmluZ3NcbiAgICB9XG4gIH0pO1xuXG59KGpRdWVyeSwgdGhpcy5jNGcpKTtcblxuZXhwb3J0IHZhciB1dGlscyA9IHRoaXMuYzRnLm1hcHMudXRpbHM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy11dGlscy5qcyIsIi8vIFwibmFtZXNwYWNlXCJcbnRoaXMuYzRnID0gdGhpcy5jNGcgfHwge307XG50aGlzLmM0Zy5tYXBzID0gdGhpcy5jNGcubWFwcyB8fCB7fTtcblxuLy9mb3IganNsaW50XG4vKmpzbGludCBicm93c2VyOnRydWUqL1xuLypqc2xpbnQgdG9kbzp0cnVlICovXG4vKmdsb2JhbCB3aW5kb3cqL1xuLypnbG9iYWwgb2wqL1xuLypnbG9iYWwgQnJvd3NlciovXG4vKmdsb2JhbCBEb2N1bWVudDp0cnVlICovXG4vKmdsb2JhbCBqUXVlcnkqL1xudmFyIGM0ZyA9IHRoaXMuYzRnO1xuXG5pbXBvcnQge01hcFByb3h5fSBmcm9tIFwiLi9jNGctbWFwcy1wcm94eVwiO1xuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNHZXJtYW59IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZGVcIjtcbmltcG9ydCB7bGFuZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW5cIjtcbmltcG9ydCB7U3Bpbm5lcn0gZnJvbSBcIi4vYzRnLW1hcHMtbWlzYy1zcGlubmVyXCI7XG5pbXBvcnQge01hcEhvdmVyfSBmcm9tIFwiLi9jNGctbWFwcy1taXNjLW1hcGhvdmVyXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtSb3V0ZXJ9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtcG9ydHNpZGUtcm91dGVyXCI7XG5pbXBvcnQge01lYXN1cmV0b29sc30gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1tZWFzdXJldG9vbHNcIjtcbmltcG9ydCB7UHJpbnR9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtcHJpbnRcIjtcbmltcG9ydCB7R3JpZH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1ncmlkXCI7XG5pbXBvcnQge1pvb21sZXZlbH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC16b29tbGV2ZWxcIjtcbmltcG9ydCB7T3ZlcnZpZXdNYXB9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtb3ZlcnZpZXdtYXBcIjtcbmltcG9ydCB7UGVybWFsaW5rfSBmcm9tIFwiLi9jNGctbWFwcy1jb250cm9sLXBlcm1hbGlua1wiO1xuaW1wb3J0IHtTdGFyYm9hcmR9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtc3RhcmJvYXJkXCI7XG5pbXBvcnQge0VkaXRvcn0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1lZGl0b3JcIjtcbmltcG9ydCB7QWNjb3VudH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1hY2NvdW50XCI7XG5pbXBvcnQge0dlb1BpY2tlcn0gZnJvbSBcIi4vYzRnLW1hcHMtaW50ZXJhY3Rpb24tZ2VvcGlja2VyXCI7XG5pbXBvcnQge0hvbWV9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnRyb2wtaG9tZVwiO1xuaW1wb3J0IHtQb3NpdGlvbn0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1wb3NpdGlvblwiO1xuaW1wb3J0IHtJbmZvcGFnZX0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC1wb3J0c2lkZS1pbmZvcGFnZVwiO1xuXG5sZXQgbGFuZ0NvbnN0YW50cyA9IHt9O1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YS5sYW5nID09PSBcImVuXCIpIHtcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0VuZ2xpc2g7XG4gIH0gZWxzZSB7XG4gICAgLy8gZmFsbGJhY2tcbiAgICBsYW5nQ29uc3RhbnRzID0gbGFuZ0NvbnN0YW50c0dlcm1hbjtcbiAgfVxufVxuXG4oZnVuY3Rpb24gKCQsIGM0Zykge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qKlxuICAgICAqIFtNYXBDb250cm9sbGVyIGRlc2NyaXB0aW9uXVxuICAgICAqIEBwYXJhbSB7anNvbi1vYmplY3R9ICBtYXBEYXRhICBPYmplY3QgdG8gY29uZmlndXJlIGNvbjRnaXMtbWFwcy5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VlIFwiZG9jcy9tYXBEYXRhLXZhbHVlcy5tZFwiXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGdldCBhIGxpc3Qgb2YgdmFsaWQgdmFsdWVzIGZvciB0aGlzIG9iamVjdC5cbiAgICAgKi9cbiAgICBjNGcubWFwcy5NYXBDb250cm9sbGVyID0gZnVuY3Rpb24gKG1hcERhdGEpIHtcblxuICAgICAgICAvLy0tLVxuICAgICAgICB0aGlzLm1hcCA9IG51bGw7XG4gICAgICAgIC8vIHRoaXMuY29udHJvbHMgPSBudWxsO1xuICAgICAgICB0aGlzLmxlZnRTbGlkZUVsZW1lbnRzID0gW107XG4gICAgICAgIHRoaXMucmlnaHRTbGlkZUVsZW1lbnRzID0gW107XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgcGVybWFsaW5rID0gZmFsc2UsXG4gICAgICAgICAgICBtaW5ab29tLFxuICAgICAgICAgICAgbWF4Wm9vbSxcbiAgICAgICAgICAgIHZpZXcsXG4gICAgICAgICAgICBnZW9Mb2NhdGlvbixcbiAgICAgICAgICAgIGNvbnRyb2xzID0gW10sXG4gICAgICAgICAgICBpbnRlcmFjdGlvbnMgPSBbXSxcbiAgICAgICAgICAgIGRpc3BsYXlBbGxMb2NhdGlvbnMsXG4gICAgICAgICAgICBkb21NYXBEaXYsXG4gICAgICAgICAgICBraW5ldGljLFxuICAgICAgICAgICAgY29udHJvbENvbnRhaW5lclRvcExlZnQsXG4gICAgICAgICAgICBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCxcbiAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJUb3BSaWdodCxcbiAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodCxcbiAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViLFxuICAgICAgICAgICAgc3RhcmJvYXJkX2xhYmVsLFxuICAgICAgICAgICAgbG9nb0xpbmssXG4gICAgICAgICAgICBsb2dvR3JhcGhpYyxcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQsXG4gICAgICAgICAgICBlbmFibGVTdGFyYm9hcmQgPSB0cnVlO1xuXG4gICAgICAgIC8vLS1cbiAgICAgICAgbWFwRGF0YSA9ICQuZXh0ZW5kKHtcbiAgICAgICAgICAgIGFwaToge30sXG4gICAgICAgICAgICBhZGRJZFRvRGl2OiBmYWxzZSxcbiAgICAgICAgICAgIG1hcElkOiAxLFxuICAgICAgICAgICAgbWFwRGl2OiAnYzRnX21hcCcsXG4gICAgICAgICAgICBjZW50ZXI6IHt9LFxuICAgICAgICAgICAgY2FsY19leHRlbnQ6ICdDRU5URVJaT09NJyxcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uOiB7fSxcbiAgICAgICAgICAgIGVkaXRvcjoge30sXG4gICAgICAgICAgICBtZWFzdXJldG9vbHM6IHt9LFxuICAgICAgICAgICAgaW5mb3BhZ2U6IHt9LFxuICAgICAgICAgICAgYWNjb3VudDogJycsXG4gICAgICAgICAgICBzdGFyYm9hcmQ6IHt9LFxuICAgICAgICAgICAgbGF5ZXJzd2l0Y2hlcjoge30sXG4gICAgICAgICAgICBiYXNlbGF5ZXJzd2l0Y2hlcjoge30sXG4gICAgICAgICAgICBnZW9zZWFyY2g6IHt9XG4gICAgICAgIH0sIG1hcERhdGEpO1xuICAgICAgICBpZiAobWFwRGF0YS5jYWxjX2V4dGVudCA9PT0gJ0xPQ0FUSU9OUycpIHtcbiAgICAgICAgICAgIG1hcERhdGEgPSAkLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgbWluX2dhcDogMjVcbiAgICAgICAgICAgIH0sIG1hcERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBjZW50ZXJcbiAgICAgICAgbWFwRGF0YS5jZW50ZXIgPSAkLmV4dGVuZCh7XG4gICAgICAgICAgICBsYXQ6IDUyLjIyLFxuICAgICAgICAgICAgbG9uOiA5LjQzLFxuICAgICAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgICAgICB6b29tOiA2XG4gICAgICAgIH0sIG1hcERhdGEuY2VudGVyKTtcbiAgICAgICAgLy8gYXR0cmlidXRpb25cbiAgICAgICAgbWFwRGF0YS5hdHRyaWJ1dGlvbiA9ICQuZXh0ZW5kKHtcbiAgICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbGxhcHNlZDogZmFsc2UsXG4gICAgICAgICAgICBjb2xsYXBzaWJsZTogdHJ1ZVxuICAgICAgICB9LCBtYXBEYXRhLmF0dHJpYnV0aW9uKTtcbiAgICAgICAgLy8gZ2Vvc2VhcmNoXG4gICAgICAgIG1hcERhdGEuZ2Vvc2VhcmNoID0gJC5leHRlbmQoe1xuICAgICAgICAgICAgZW5hYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGRpdjogZmFsc2VcbiAgICAgICAgfSwgbWFwRGF0YS5nZW9zZWFyY2gpO1xuICAgICAgICAvLyBwZXJtYWxpbmtcbiAgICAgICAgbWFwRGF0YS5wZXJtYWxpbmsgPSAkLmV4dGVuZCh7XG4gICAgICAgICAgICBlbmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0X3BhcmFtZXRlcjogZmFsc2VcbiAgICAgICAgfSwgbWFwRGF0YS5wZXJtYWxpbmspO1xuICAgICAgICB0aGlzLmRhdGEgPSBtYXBEYXRhO1xuICAgICAgICBpZiAobWFwRGF0YS5hZGRJZFRvRGl2KSB7XG4gICAgICAgICAgICBtYXBEYXRhLm1hcERpdiArPSAnXycgKyBtYXBEYXRhLm1hcElkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBIUFN0b3JtIG1hcmtzIHRoaXMgYXMgZXJyb3IsIGJ1dCBpdCBpcyBub25lXG4gICAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIGZvciBwcmV2ZW50aW5nIGFuIGVycm9yIHdpdGggdGhlIE9TTS1PdmVycGFzcyBBUElcbiAgICAgICAgLy8gd2hpY2ggb2NjdXJzIHdoZW4gTW9vVG9vbHMgaXMgbG9hZGVkXG4gICAgICAgIGlmICh3aW5kb3cuTW9vVG9vbHMgJiYgQnJvd3Nlci5Eb2N1bWVudCkge1xuICAgICAgICAgICAgRG9jdW1lbnQgPSBCcm93c2VyLkRvY3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJveHkgPSBuZXcgTWFwUHJveHkoe21hcENvbnRyb2xsZXI6IHRoaXN9KTtcblxuICAgICAgICAvLyBjaGVjayBwZXJtYWxpbmtcbiAgICAgICAgaWYgKG1hcERhdGEucGVybWFsaW5rLmVuYWJsZSkge1xuICAgICAgICAgICAgcGVybWFsaW5rID0gdXRpbHMuZ2V0VXJsUGFyYW0obWFwRGF0YS5wZXJtYWxpbmsuZ2V0X3BhcmFtZXRlcik7XG5cbiAgICAgICAgICAgIGlmIChwZXJtYWxpbmspIHtcbiAgICAgICAgICAgICAgICBwZXJtYWxpbmsgPSBwZXJtYWxpbmsuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHBlcm1hbGluay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHBlcm1hbGlua1swXSA9IHBhcnNlRmxvYXQocGVybWFsaW5rWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIubG9uID0gIWlzTmFOKHBlcm1hbGlua1swXSkgPyBwZXJtYWxpbmtbMF0gOiBtYXBEYXRhLmNlbnRlci5sb247XG4gICAgICAgICAgICAgICAgICAgIHBlcm1hbGlua1sxXSA9IHBhcnNlRmxvYXQocGVybWFsaW5rWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIubGF0ID0gIWlzTmFOKHBlcm1hbGlua1sxXSkgPyBwZXJtYWxpbmtbMV0gOiBtYXBEYXRhLmNlbnRlci5sYXQ7XG4gICAgICAgICAgICAgICAgICAgIHBlcm1hbGlua1syXSA9IHBhcnNlSW50KHBlcm1hbGlua1syXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmNlbnRlci56b29tID0gIWlzTmFOKHBlcm1hbGlua1syXSkgPyBwZXJtYWxpbmtbMl0gOiBtYXBEYXRhLmNlbnRlci56b29tO1xuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmtbM10gPSBwYXJzZUZsb2F0KHBlcm1hbGlua1szXSk7XG4gICAgICAgICAgICAgICAgICAgIG1hcERhdGEuY2VudGVyLnJvdGF0aW9uID0gIWlzTmFOKHBlcm1hbGlua1szXSkgPyBwZXJtYWxpbmtbM10gOiBtYXBEYXRhLmNlbnRlci5yb3RhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgcGVybWFsaW5rWzRdID0gcGFyc2VJbnQocGVybWFsaW5rWzRdLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIG1hcERhdGEuYmFzZWxheWVyID0gIWlzTmFOKHBlcm1hbGlua1s0XSkgPyBwZXJtYWxpbmtbNF0gOiBtYXBEYXRhLmJhc2VsYXllcjtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5sYXllcnMgPSBwZXJtYWxpbmtbNV0uc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVjb2RlIGRlbHRhRW5jb2RpbmdcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5sYXllcnMgPSB1dGlscy5kZWx0YURlY29kZShtYXBEYXRhLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgLy8gYmFzZWxheWVyIGFuZCBsYXllcnMgb25seVxuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmtbMF0gPSBwYXJzZUludChwZXJtYWxpbmtbMF0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5iYXNlbGF5ZXIgPSAhaXNOYU4ocGVybWFsaW5rWzBdKSA/IHBlcm1hbGlua1swXSA6IG1hcERhdGEuYmFzZWxheWVyO1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHBlcm1hbGlua1sxXS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWNvZGUgZGVsdGFFbmNvZGluZ1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHV0aWxzLmRlbHRhRGVjb2RlKG1hcERhdGEubGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAvLyBsYXllcnMgb25seVxuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHBlcm1hbGlua1swXS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWNvZGUgZGVsdGFFbmNvZGluZ1xuICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHV0aWxzLmRlbHRhRGVjb2RlKG1hcERhdGEubGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgLy8gaW52YWxpZCBjb3VudCBvZiBwZXJtYWxpbmsgcGFyYW1ldGVyc1xuICAgICAgICAgICAgICAgICAgICBwZXJtYWxpbmsgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hcERhdGEubGF5ZXJzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5sYXllcnMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcGVybWFsaW5rID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBqdXN0IHRvIG1ha2Ugc3VyZSB0aGlzIHZhciBpcyByZWFsbHkgXCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgcGVybWFsaW5rID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwRGF0YS5taW5ab29tICYmIG1hcERhdGEubWluWm9vbSA+IDApIHtcbiAgICAgICAgICAgIG1pblpvb20gPSBtYXBEYXRhLm1pblpvb207XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtaW5ab29tID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXBEYXRhLm1heFpvb20gJiYgbWFwRGF0YS5tYXhab29tID4gMCkge1xuICAgICAgICAgICAgbWF4Wm9vbSA9IG1hcERhdGEubWF4Wm9vbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heFpvb20gPSAxOTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXBEYXRhLmNhY2hpbmcpIHtcbiAgICAgICAgICAgIGlmICgodXRpbHMuZ2V0VmFsdWUoJ2xvbicpKSAmJiAodXRpbHMuZ2V0VmFsdWUoJ2xhdCcpKSkge1xuICAgICAgICAgICAgICAgIG1hcERhdGEuY2VudGVyLmxvbiA9IHV0aWxzLmdldFZhbHVlKCdsb24nKTtcbiAgICAgICAgICAgICAgICBtYXBEYXRhLmNlbnRlci5sYXQgPSB1dGlscy5nZXRWYWx1ZSgnbGF0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1dGlscy5nZXRWYWx1ZSgnem9vbScpKSB7XG4gICAgICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIuem9vbSA9IHV0aWxzLmdldFZhbHVlKCd6b29tJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2aWV3ID0gbmV3IG9sLlZpZXcoe1xuICAgICAgICAgICAgLy8gcHJvamVjdGlvbjogb2wucHJvai5nZXQoJ0VQU0c6NDMyNicpLFxuICAgICAgICAgICAgLy8gY2VudGVyOiBbcGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlcl9sb24pLCBwYXJzZUZsb2F0KG1hcERhdGEuY2VudGVyX2xhdCldLFxuICAgICAgICAgICAgLy8gbWluUmVzb2x1dGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgLy8gbWF4UmVzb2x1dGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY2VudGVyOiBvbC5wcm9qLnRyYW5zZm9ybShbcGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlci5sb24pLCBwYXJzZUZsb2F0KG1hcERhdGEuY2VudGVyLmxhdCldLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpLFxuICAgICAgICAgICAgem9vbTogcGFyc2VJbnQobWFwRGF0YS5jZW50ZXIuem9vbSwgMTApLFxuICAgICAgICAgICAgbWluWm9vbTogcGFyc2VJbnQobWluWm9vbSwgMTApLFxuICAgICAgICAgICAgbWF4Wm9vbTogcGFyc2VJbnQobWF4Wm9vbSwgMTApLFxuICAgICAgICAgICAgcm90YXRpb246IHBhcnNlRmxvYXQobWFwRGF0YS5jZW50ZXIucm90YXRpb24pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNoZWNrIHVzZXJwb3NpdGlvblxuICAgICAgICBpZiAobWFwRGF0YS5nZW9sb2NhdGlvbiAmJiAhcGVybWFsaW5rICkge1xuICAgICAgICAgICAgZ2VvTG9jYXRpb24gPSBuZXcgb2wuR2VvbG9jYXRpb24oe1xuICAgICAgICAgICAgICAgIC8vdHJhY2tpbmc6ICFtYXBEYXRhLmdlb3BpY2tlcixcbiAgICAgICAgICAgICAgICB0cmFja2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiB2aWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBnZW9Mb2NhdGlvbi5vbignY2hhbmdlJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgICBpZiAoZ2VvTG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNldENlbnRlcihnZW9Mb2NhdGlvbi5nZXRQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICBpZiAobWFwRGF0YS5nZW9sb2NhdGlvbl96b29tKSB7XG4gICAgICAgICAgICAgICAgICB2aWV3LnNldFpvb20ocGFyc2VJbnQobWFwRGF0YS5nZW9sb2NhdGlvbl96b29tLCAxMCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnZW9Mb2NhdGlvbi5zZXRUcmFja2luZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYubWFwKSB7XG4gICAgICAgICAgICAgICAgICBzZWxmLm1hcC5zZXRWaWV3KHZpZXcpO1xuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLnJlZHJhd01hcFZpZXcoc2VsZik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVuYWJsZSBkZWZhdWx0IENvbnRyb2xzL0ludGVyYWN0aW9ucyBpZiB0aGVyZSBpcyBubyBwcm9maWxlXG4gICAgICAgIC8vIFtub3RlXTogbWF5YmUgY2hhbmdlIHRoaXMgaW4gdGhlIGZ1dHVyZT8gLT4gXCJubyBkZWZhdWx0XCItb3B0aW9uP1xuICAgICAgICBpZiAoIW1hcERhdGEucHJvZmlsZSkge1xuICAgICAgICAgICAgY29udHJvbHMgPSBvbC5jb250cm9sLmRlZmF1bHRzKCk7XG4gICAgICAgICAgICBpbnRlcmFjdGlvbnMgPSBvbC5pbnRlcmFjdGlvbi5kZWZhdWx0cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IGRlZmF1bHQgYmFzZSBsYXllciB3aGVuIGJhY2tlbmQgZ2VvcGlja2VyIGlzIGVuYWJsZWRcbiAgICAgICAgaWYgKG1hcERhdGEuZ2VvcGlja2VyICYmIG1hcERhdGEuZ2VvcGlja2VyLnR5cGUgPT09IFwiYmFja2VuZFwiKSB7XG4gICAgICAgICAgICBpZiAobWFwRGF0YS5kZWZhdWx0X2Jhc2VsYXllcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfbG9hZGVkLnB1c2goZnVuY3Rpb24gKGJhc2VsYXllcklkcykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXIuc2hvd0Jhc2VMYXllcihtYXBEYXRhLmRlZmF1bHRfYmFzZWxheWVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gLy8gZW5kIGlubmVyIGlmXG4gICAgICAgICAgICB0aGlzLm1hcCA9IG5ldyBvbC5NYXAoe1xuICAgICAgICAgICAgICAgIGNvbnRyb2xzOiBjb250cm9scyxcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbnM6IGludGVyYWN0aW9ucyxcbiAgICAgICAgICAgICAgICBsYXllcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IG9sLmxheWVyLkdyb3VwKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQmFzZSBtYXBzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja1N1bTogJ2Jhc2VNYXBzTGF5ZXInXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBsb2FkVGlsZXNXaGlsZUFuaW1hdGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG1hcERhdGEubWFwRGl2LFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSBNYXBcbiAgICAgICAgICAgIC8vXG5cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLmRlZmF1bHRfYmFzZWxheWVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm94eS5ob29rX2Jhc2VsYXllcl9sb2FkZWQucHVzaChmdW5jdGlvbiAoYmFzZWxheWVySWRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXBEYXRhLmJhc2VsYXllciAmJiBiYXNlbGF5ZXJJZHMuaW5kZXhPZihtYXBEYXRhLmJhc2VsYXllci50b1N0cmluZygpKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBEYXRhLmRlZmF1bHRfYmFzZWxheWVyID0gbWFwRGF0YS5iYXNlbGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobWFwRGF0YS5jYWNoaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbHMuZ2V0VmFsdWUoJ2Jhc2VsYXllcicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5kZWZhdWx0X2Jhc2VsYXllciA9IHV0aWxzLmdldFZhbHVlKCdiYXNlbGF5ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5zaG93QmFzZUxheWVyKG1hcERhdGEuZGVmYXVsdF9iYXNlbGF5ZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXAgPSBuZXcgb2wuTWFwKHtcbiAgICAgICAgICAgICAgICBjb250cm9sczogY29udHJvbHMsXG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25zOiBpbnRlcmFjdGlvbnMsXG4gICAgICAgICAgICAgICAgbGF5ZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBvbC5sYXllci5Hcm91cCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0Jhc2UgbWFwcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllcnM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tTdW06ICdiYXNlTWFwc0xheWVyJ1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgbG9hZFRpbGVzV2hpbGVBbmltYXRpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBtYXBEYXRhLm1hcERpdixcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcERhdGEubWFwID0gdGhpcy5tYXA7XG5cbiAgICAgIC8vIHNldCBleHRlbnQgdG8gbWFrZSBhbGwgbG9jYXRpb25zIHZpc2libGUgaWYgd2FudGVkXG4gICAgICAgIGlmIChtYXBEYXRhLmNhbGNfZXh0ZW50ID09PSBcIkxPQ0FUSU9OU1wiKSB7XG4gICAgICAgICAgICBkaXNwbGF5QWxsTG9jYXRpb25zID0gZnVuY3Rpb24gKGxheWVySWRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxheWVycyA9IHNlbGYucHJveHkubGF5ZXJDb250cm9sbGVyLmFyckxheWVycyxcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LFxuICAgICAgICAgICAgICAgICAgICBjb29yZHMsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgICAgICAgICAgICAgICBleHRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVMaXN0LFxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXksXG4gICAgICAgICAgICAgICAgICAgIGxheWVyR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjtcbiAgICAgICAgICAgICAgICAvLyBkZWxldGUgZnVuY3Rpb24gZnJvbSBob29rIGFycmF5XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNbdGhpcy5pbmRleE9mKGRpc3BsYXlBbGxMb2NhdGlvbnMpXTtcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlcyA9IFtdO1xuICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSByZXN1bHRpbmcgZXh0ZW50IG9mIGFsbCBnZW9tZXRyaWVzXG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gbGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIgPSBsYXllcnNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxheWVyLnR5cGUgPT0gXCJvdmVycGFzc1wiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yQXJyYXkgPSBsYXllci5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckFycmF5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXRjaCBjYXNlIG9mIGxpbmtlZCBsYXllcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmVjdG9yQXJyYXkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JBcnJheSA9IHV0aWxzLm9iamVjdFRvQXJyYXkodmVjdG9yQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJHcm91cCA9IGxheWVyLnZlY3RvckxheWVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlY3RvckFycmF5ICYmIHZlY3RvckFycmF5LmZvckVhY2ggJiYgdHlwZW9mIHZlY3RvckFycmF5LmZvckVhY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JBcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2ZWN0b3JMYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVjdG9yTGF5ZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5kYXRhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuZGF0YS5nZW9tZXRyeSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZWN0b3JMYXllci5kYXRhLmdlb21ldHJ5LnR5cGUgPT09IFwiUG9pbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkcyA9IG9sLnByb2oudHJhbnNmb3JtKFtwYXJzZUZsb2F0KHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHZlY3RvckxheWVyLmRhdGEuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0pXSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb29yZHNbMF09PVwiSW5maW5pdHlcInx8Y29vcmRzWzBdPT1cIi1JbmZpbml0eVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5ID0gbmV3IG9sLmdlb20uUG9pbnQoY29vcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgbW9yZSBjb21wbGV4IGdlb21ldHJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlTGlzdCA9IGxheWVyR3JvdXAuZ2V0TGF5ZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUFycmF5ID0gZmVhdHVyZUxpc3QuZ2V0QXJyYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIudHlwZSA9PT0gXCJrbWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZlYXR1cmUuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgc291cmNlRmVhdHVyZXMgPSBzb3VyY2UuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5nZXRFeHRlbnQoKS5mb3JFYWNoKGZ1bmN0aW9uIChjb29yZGluYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChjb29yZGluYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wUmlnaHQoZmVhdHVyZS5nZXRTb3VyY2UoKS5nZXRFeHRlbnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChvbC5leHRlbnQuZ2V0VG9wTGVmdChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKG9sLmV4dGVudC5nZXRCb3R0b21SaWdodChmZWF0dXJlLmdldFNvdXJjZSgpLmdldEV4dGVudCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKG9sLmV4dGVudC5nZXRCb3R0b21MZWZ0KGZlYXR1cmUuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGV4dGVudCA9IG9sLmV4dGVudC5ib3VuZGluZ0V4dGVudChjb29yZGluYXRlcyk7XG4gICAgICAgICAgICAgICAgaWYoZXh0ZW50WzBdPT1cIkluZmluaXR5XCJ8fGV4dGVudFswXT09XCItSW5maW5pdHlcIil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL1RPRE86IGNhdGNoIGNhc2UgbWluX2dhcCBpcyBhbHJlYWR5IGFuIGFycmF5XG4gICAgICAgICAgICAgICAgcGFkZGluZyA9IFttYXBEYXRhLm1pbl9nYXAsIG1hcERhdGEubWluX2dhcCwgbWFwRGF0YS5taW5fZ2FwLCBtYXBEYXRhLm1pbl9nYXBdO1xuICAgICAgICAgICAgICAgIHNlbGYubWFwLmdldFZpZXcoKS5maXQoZXh0ZW50LCBzZWxmLm1hcC5nZXRTaXplKCksIHtwYWRkaW5nOiBwYWRkaW5nfSk7XG4gICAgICAgICAgICAgICAgY2VudGVyID0gc2VsZi5tYXAuZ2V0VmlldygpLmdldENlbnRlcigpO1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihjZW50ZXJbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubWFwLmdldFZpZXcoKS5zZXRDZW50ZXIoWzUwLCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm1hcC5nZXRWaWV3KCkuc2V0Wm9vbShtYXBEYXRhLm1pblpvb20gfHwgMTApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnByb3h5Lmhvb2tfbGF5ZXJfdmlzaWJpbGl0eS5wdXNoKGRpc3BsYXlBbGxMb2NhdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IG1hcC1zaXplIGFuZCAtbWFyZ2luXG4gICAgICAgIGRvbU1hcERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hcERhdGEubWFwRGl2KTtcblxuICAgICAgICBpZiAoZG9tTWFwRGl2ICYmIGRvbU1hcERpdi5zdHlsZSkge1xuICAgICAgICAgICAgaWYgKG1hcERhdGEud2lkdGgpIHtcbiAgICAgICAgICAgICAgICBkb21NYXBEaXYuc3R5bGUud2lkdGggPSBtYXBEYXRhLndpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcERhdGEuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLmhlaWdodCA9IG1hcERhdGEuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcERhdGEubWFyZ2luKSB7XG4gICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLm1hcmdpbiA9IG1hcERhdGEubWFyZ2luO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdjYW4gbm90IGdldCBlbGVtZW50IGJ5IGlkIG1hcERhdGEubWFwRGl2Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hcC51cGRhdGVTaXplKCk7XG4gICAgICAgIHRoaXMucHJveHkuaW5pdGlhbGl6ZSgpO1xuICAgICAgICAvLyB0aGlzLnByb3h5LmxvYWRCYXNlTGF5ZXJzKCk7XG4gICAgICAgIC8vIHRoaXMucHJveHkubG9hZExheWVycygpO1xuICAgICAgICAvLyAtLS1cblxuICAgICAgICAvLyBzYXZlIG92ZXJsYXljb250YWluZXJcbiAgICAgICAgdGhpcy4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQgPSAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9PVkVSTEFZQ09OVEFJTkVSX1NFKTtcbiAgICAgICAgLy8gYWRkIFNwaW5uZXJcbiAgICAgICAgdGhpcy5zcGlubmVyID0gbmV3IFNwaW5uZXIoe2NsYXNzTmFtZTogY3NzQ29uc3RhbnRzLkxBUkdFfSk7XG4gICAgICAgIC8vIGFkZCBtYXBIb3ZlclxuICAgICAgICB0aGlzLm1hcEhvdmVyID0gbmV3IE1hcEhvdmVyKHttYXBDb250cm9sbGVyOiB0aGlzfSk7XG5cbiAgICAgICAgLy8gYWRkIGludGVyYWN0aW9ucyA9PT1cbiAgICAgICAgLy9cblxuICAgICAgICAvLyBtb3VzZSBuYXZpZ2F0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLm1vdXNlX25hdikge1xuICAgICAgICAgICAgLy8gZHJhZyBwYW4gYW5kIGtpbmV0aWMgc2Nyb2xsaW5nXG4gICAgICAgICAgICBpZiAobWFwRGF0YS5tb3VzZV9uYXYuZHJhZ19wYW4pIHtcbiAgICAgICAgICAgICAgICBraW5ldGljID0gbWFwRGF0YS5tb3VzZV9uYXYua2luZXRpYyA/IG5ldyBvbC5LaW5ldGljKC0wLjAwNSwgMC4wNSwgMTAwKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IG9sLmludGVyYWN0aW9uLkRyYWdQYW4oe2tpbmV0aWM6IGtpbmV0aWN9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBtb3VzZXdoZWVsIHpvb21cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLm1vdXNlX25hdi53aGVlbF96b29tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IG9sLmludGVyYWN0aW9uLk1vdXNlV2hlZWxab29tKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG91YmxlY2xpY2sgem9vbVxuICAgICAgICAgICAgaWYgKG1hcERhdGEubW91c2VfbmF2LmRvdWJsZWNsaWNrX3pvb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uRG91YmxlQ2xpY2tab29tKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYm94IHpvb21cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLm1vdXNlX25hdi5kcmFnX3pvb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uRHJhZ1pvb20oe2NvbmRpdGlvbjogb2wuZXZlbnRzLmNvbmRpdGlvbi5zaGlmdEtleU9ubHl9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkcmFnIHJvdGF0ZSAoJiB6b29tKVxuICAgICAgICAgICAgaWYgKG1hcERhdGEubW91c2VfbmF2LmRyYWdfcm90YXRlX3pvb20pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uRHJhZ1JvdGF0ZUFuZFpvb20oe2NvbmRpdGlvbjogb2wuZXZlbnRzLmNvbmRpdGlvbi5hbHRLZXlPbmx5fSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXBEYXRhLm1vdXNlX25hdi5kcmFnX3JvdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBvbC5pbnRlcmFjdGlvbi5EcmFnUm90YXRlKHtjb25kaXRpb246IG9sLmV2ZW50cy5jb25kaXRpb24uYWx0S2V5T25seX0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB0b3VjaCBuYXZpZ2F0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLnRvdWNoX25hdikge1xuICAgICAgICAgICAgLy8gcm90YXRlIChwaW5jaClcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLnRvdWNoX25hdi5yb3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgb2wuaW50ZXJhY3Rpb24uUGluY2hSb3RhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB6b29tIChwaW5jaClcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLnRvdWNoX25hdi56b29tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IG9sLmludGVyYWN0aW9uLlBpbmNoWm9vbSh7Y29uc3RyYWluUmVzb2x1dGlvbjogdHJ1ZX0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBrZXlib2FyZCBuYXZpZ2F0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLmtleWJvYXJkX25hdikge1xuICAgICAgICAgICAgLy8gcGFuIChhcnJvdyBrZXlzKVxuICAgICAgICAgICAgaWYgKG1hcERhdGEua2V5Ym9hcmRfbmF2LnBhbikge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBvbC5pbnRlcmFjdGlvbi5LZXlib2FyZFBhbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHpvb20gKFwiK1wiIGFuZCBcIi1cIiBrZXkpXG4gICAgICAgICAgICBpZiAobWFwRGF0YS5rZXlib2FyZF9uYXYuem9vbSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBvbC5pbnRlcmFjdGlvbi5LZXlib2FyZFpvb20oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gPT09XG5cbiAgICAgICAgLy8gYWRkIGNvbnRyb2wtY29udGFpbmVycyA9PT1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gdG9wLWxlZnRcbiAgICAgICAgY29udHJvbENvbnRhaW5lclRvcExlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udHJvbENvbnRhaW5lclRvcExlZnQuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX1RMICsgJyAnICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRTtcbiAgICAgICAgdGhpcy4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQucHJlcGVuZChjb250cm9sQ29udGFpbmVyVG9wTGVmdCk7XG4gICAgICAgIC8vIGJvdHRvbS1sZWZ0XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9CTCArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgICQoY29udHJvbENvbnRhaW5lclRvcExlZnQpLmFmdGVyKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KTtcbiAgICAgICAgLy8gZWxlbWVudCBuZWVkcyB0byBiZSBtb3ZlZCB3aGVuIFBvcnRzaWRlIHdpbGwgYmUgb3BlbmVkXG4gICAgICAgIHRoaXMubGVmdFNsaWRlRWxlbWVudHMucHVzaChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCk7XG4gICAgICAgIC8vIHRvcC1yaWdodFxuICAgICAgICBjb250cm9sQ29udGFpbmVyVG9wUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udHJvbENvbnRhaW5lclRvcFJpZ2h0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9UUiArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgICQoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQpLmFmdGVyKGNvbnRyb2xDb250YWluZXJUb3BSaWdodCk7XG4gICAgICAgIC8vIGVsZW1lbnQgbmVlZHMgdG8gYmUgbW92ZWQgd2hlbiBTdGFyYm9hcmQgd2lsbCBiZSBvcGVuZWRcbiAgICAgICAgdGhpcy5yaWdodFNsaWRlRWxlbWVudHMucHVzaChjb250cm9sQ29udGFpbmVyVG9wUmlnaHQpO1xuICAgICAgICAvLyBib3R0b20tcmlnaHRcbiAgICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbVJpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTF9DT05UQUlORVJfQlIgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFO1xuICAgICAgICAkKGNvbnRyb2xDb250YWluZXJUb3BSaWdodCkuYWZ0ZXIoY29udHJvbENvbnRhaW5lckJvdHRvbVJpZ2h0KTtcbiAgICAgICAgLy8gZWxlbWVudCBuZWVkcyB0byBiZSBtb3ZlZCB3aGVuIFN0YXJib2FyZCB3aWxsIGJlIG9wZW5lZFxuICAgICAgICB0aGlzLnJpZ2h0U2xpZGVFbGVtZW50cy5wdXNoKGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodCk7XG4gICAgICAgIC8vID09PVxuICAgICAgICAvLyBhZGQgY29udHJvbHMgPT09XG4gICAgICAgIHRoaXMuY29udHJvbHMgPSB7fTtcbiAgICAgICAgLy9cblxuXG4gICAgICAgIC8vIGFjY291bnRcbiAgICAgICAgaWYgKG1hcERhdGEuYWNjb3VudCAmJiB0eXBlb2YgQWNjb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5hY2NvdW50ID0gbmV3IEFjY291bnQoe1xuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfQUNDT1VOVCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAgICAgICAgIGNhY2hpbmc6IG1hcERhdGEuY2FjaGluZyxcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5hY2NvdW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHpvb20tY29udHJvbHNcbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9wYW5lbCB8fCBtYXBEYXRhLnpvb21fc2xpZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnpvb20gPSBuZXcgb2wuY29udHJvbC5ab29tKHtcbiAgICAgICAgICAgICAgICB6b29tSW5MYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHpvb21PdXRMYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHpvb21JblRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfWk9PTV9JTixcbiAgICAgICAgICAgICAgICB6b29tT3V0VGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX09VVCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy56b29tKTtcblxuICAgICAgICAgICAgaWYgKG1hcERhdGEuem9vbV9zbGlkZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnpvb21zbGlkZXIgPSBuZXcgb2wuY29udHJvbC5ab29tU2xpZGVyKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX1NMSURFUixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcExlZnRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnpvb21zbGlkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtYXBEYXRhLnpvb21fZXh0ZW50ICYhIG1hcERhdGEuem9vbV9zbGlkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuem9vbV9leHRlbnQgPSBuZXcgb2wuY29udHJvbC5ab29tVG9FeHRlbnQoe1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX0VYVCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy56b29tX2V4dGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9ob21lICYhIG1hcERhdGEuem9vbV9zbGlkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuem9vbV9ob21lID0gbmV3IEhvbWUoe1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgZGlzYWJsZUxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX0hPTUUsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy56b29tX2hvbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9wb3NpdGlvbiAmISBtYXBEYXRhLnpvb21fc2xpZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLnpvb21fcG9zaXRpb24gPSBuZXcgUG9zaXRpb24oe1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgZGlzYWJsZUxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9aT09NX1BPUyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnpvb21fcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tYmluZWQgem9vbS1jb250cm9sc1xuICAgICAgICBpZiAobWFwRGF0YS56b29tX3NsaWRlcikge1xuICAgICAgICAgICAgJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT01fV0lUSF9TTElERVIpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fSU4pLmFmdGVyKCQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fU0xJREVSICsgJyBidXR0b24nKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTV9TTElERVIpKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fU0xJREVSICsgJy4nICsgY3NzQ29uc3RhbnRzLk9MX0NPTlRST0wpLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbV9wYW5lbCAmJiBtYXBEYXRhLnpvb21fZXh0ZW50KSB7XG4gICAgICAgICAgICAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTV9XSVRIX0VYVCkucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT00pO1xuICAgICAgICAgICAgJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTV9JTikuYWZ0ZXIoJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTV9FWFQgKyAnIGJ1dHRvbicpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NX0VYVCkpO1xuICAgICAgICAgICAgJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTV9FWFQgKyAnLicgKyBjc3NDb25zdGFudHMuT0xfQ09OVFJPTCkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwRGF0YS56b29tX3BhbmVsICYmIG1hcERhdGEuem9vbV9ob21lKSB7XG4gICAgICAgICAgICAkKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9aT09NKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTV9XSVRIX0hPTUUpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fSU4pLmFmdGVyKCQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fSE9NRSArICcgYnV0dG9uJykuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT01fSE9NRSkpO1xuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCA9IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fSE9NRSArICcuJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEUgKyAnLmJ1dHRvbicpO1xuICAgICAgICAgICAgaWYgKHJlbW92ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vaWUgMTEgZXJyb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwRGF0YS56b29tX3BhbmVsICYmIG1hcERhdGEuem9vbV9wb3NpdGlvbikge1xuICAgICAgICAgICAgJCgnIycgKyBtYXBEYXRhLm1hcERpdiArICcgLicgKyBjc3NDb25zdGFudHMuT0xfWk9PTSkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLk9MX1pPT01fV0lUSF9QT1MpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5PTF9aT09NKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fSU4pLmFmdGVyKCQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fUE9TICsgJyBidXR0b24nKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuT0xfWk9PTV9QT1MpKTtcbiAgICAgICAgICAgICQoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fUE9TICsgJy4nICsgY3NzQ29uc3RhbnRzLk9MX0NPTlRST0wpLnJlbW92ZSgpO1xuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCA9IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY3NzQ29uc3RhbnRzLk9MX1pPT01fUE9TICsgJy4nICsgY3NzQ29uc3RhbnRzLk9MX1VOU0VMRUNUQUJMRSArICcuYnV0dG9uJyk7XG4gICAgICAgICAgICBpZiAocmVtb3ZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZSAxMSBlcnJvclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZ1bGxzY3JlZW5cbiAgICAgICAgaWYgKG1hcERhdGEuZnVsbHNjcmVlbikge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5mdWxsc2NyZWVuID0gbmV3IG9sLmNvbnRyb2wuRnVsbFNjcmVlbih7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICcgJyxcbiAgICAgICAgICAgICAgICBsYWJlbEFjdGl2ZTogJyAnLFxuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfRlVMTFNDUkVFTixcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5mdWxsc2NyZWVuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJvdXRlclxuICAgICAgICBpZiAobWFwRGF0YS5yb3V0ZXJfZW5hYmxlICYmIHR5cGVvZiBSb3V0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMucm91dGVyID0gbmV3IFJvdXRlcih7XG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9ST1VURVIsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgICAgICBjYWNoaW5nOiBtYXBEYXRhLmNhY2hpbmcsXG4gICAgICAgICAgICAgICAgbWFwQ29udHJvbGxlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMucm91dGVyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlZGl0b3JcbiAgICAgICAgaWYgKG1hcERhdGEuZWRpdG9yLmVuYWJsZSAmJiB0eXBlb2YgRWRpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmVkaXRvciA9IG5ldyBFZGl0b3Ioe1xuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfRURJVE9SLFxuICAgICAgICAgICAgICAgIHR5cGU6IG1hcERhdGEuZWRpdG9yLnR5cGUgfHwgJ2Zyb250ZW5kJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG1hcERhdGEuZWRpdG9yLnRhcmdldCB8fCBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgICAgICBpbml0T3BlbjogbWFwRGF0YS5lZGl0b3Iub3BlbiB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICBkYXRhRmllbGQ6IG1hcERhdGEuZWRpdG9yLmRhdGFfZmllbGQgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgY2FjaGluZzogbWFwRGF0YS5jYWNoaW5nLFxuICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLmVkaXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVhc3VyZXRvb2xzXG4gICAgICAgIGlmIChtYXBEYXRhLm1lYXN1cmV0b29scy5lbmFibGUgJiYgdHlwZW9mIE1lYXN1cmV0b29scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5tZWFzdXJldG9vbHMgPSBuZXcgTWVhc3VyZXRvb2xzKHtcbiAgICAgICAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX01FQVNVUkVUT09MUyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAgICAgICAgIGNhY2hpbmc6IG1hcERhdGEuY2FjaGluZyxcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5tZWFzdXJldG9vbHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vXG4gICAgICAgIGlmIChtYXBEYXRhLnByaW50KXtcbiAgICAgICAgICB0aGlzLmNvbnRyb2xzLnByaW50ID0gbmV3IFByaW50KHtcbiAgICAgICAgICAgIGxhYmVsIDogXCJcIixcbiAgICAgICAgICAgIHRpcExhYmVsIDogbGFuZ0NvbnN0YW50cy5DVFJMX1BSSU5ULFxuICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXNcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5wcmludCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93IGdyYXRpY3VsZSAoZ3JpZClcbiAgICAgICAgaWYgKG1hcERhdGEuZ3JhdGljdWxlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmdyYXRpY3VsZSA9IG5ldyBHcmlkKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIGRpc2FibGVMYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfR1JJRCxcbiAgICAgICAgICAgICAgICBjYWNoaW5nOiBtYXBEYXRhLmNhY2hpbmcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuZ3JhdGljdWxlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByb3RhdGUtY29udHJvbFxuICAgICAgICAvL1RPRE86IHVzZSBzb21ldGhpbmcgbGlrZSBcIm1hcERhdGEucm90YXRlXCJcbiAgICAgICAgLy8gICBDaGVjazogbWFwRGF0YS5tb3VzZV9uYXYgKGRlZmluZWQ/KVxuICAgICAgICBpZiAobWFwRGF0YS5tb3VzZV9uYXYgJiYgKG1hcERhdGEubW91c2VfbmF2LmRyYWdfcm90YXRlIHx8IChtYXBEYXRhLm1vdXNlX25hdi5kcmFnX3JvdGF0ZSAmJiBtYXBEYXRhLm1vdXNlX25hdi5kcmFnX3JvdGF0ZV96b29tKSkpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMucm90YXRlID0gbmV3IG9sLmNvbnRyb2wuUm90YXRlKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfUkVTRVRfUk9UQVRJT04sXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMucm90YXRlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbmZvcGFnZVxuICAgICAgICBpZiAobWFwRGF0YS5pbmZvcGFnZSAmJiB0eXBlb2YgSW5mb3BhZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuaW5mb3BhZ2UgPSBuZXcgSW5mb3BhZ2Uoe1xuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfSU5GT1BBR0UsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyVG9wTGVmdCxcbiAgICAgICAgICAgICAgICBjYWNoaW5nOiBtYXBEYXRhLmNhY2hpbmcsXG4gICAgICAgICAgICAgICAgbWFwQ29udHJvbGxlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuaW5mb3BhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFkZGl0aW9uYWwgcGFuZWxcbiAgICAgIC8qXG4gICAgICAgIGlmIChtYXBEYXRhLmFkZGl0aW9uYWxQYW5lbCAmJiB0eXBlb2YgYzRnLm1hcHMuY29udHJvbC5hZGRpdGlvbmFsUGFuZWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLmNvbnRyb2xzLmFkZGl0aW9uYWxQYW5lbCA9IG5ldyBjNGcubWFwcy5jb250cm9sLmFkZGl0aW9uYWxQYW5lbCh7XG4gICAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX0FERElUSU9OQUxQQU5FTCxcbiAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcExlZnQsXG4gICAgICAgICAgICBjYWNoaW5nOiBtYXBEYXRhLmNhY2hpbmcsXG4gICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLmFkZGl0aW9uYWxQYW5lbCk7XG4gICAgICAgIH0qL1xuXG5cbiAgICAgIC8vIHNjYWxlbGluZVxuICAgICAgICBpZiAobWFwRGF0YS5zY2FsZWxpbmUpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuc2NhbGVsaW5lID0gbmV3IG9sLmNvbnRyb2wuU2NhbGVMaW5lKHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5zY2FsZWxpbmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gem9vbS1sZXZlbCAmIG1vdXNlLXBvc2l0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLnpvb21sZXZlbCB8fCBtYXBEYXRhLm1vdXNlcG9zaXRpb24pIHtcbiAgICAgICAgICAvLyB3cmFwcGVyIGZvciB6b29tLWxldmVsIGFuZCBtb3VzZS1wb3NpdGlvblxuICAgICAgICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9CTF9TVUIgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFO1xuICAgICAgICAgICAgJChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCkuYXBwZW5kKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViKTtcbiAgICAgICAgICAgIC8vIGRpc3BsYXkgem9vbS1sZXZlbFxuICAgICAgICAgICAgaWYgKG1hcERhdGEuem9vbWxldmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9scy56b29tbGV2ZWwgPSBuZXcgWm9vbWxldmVsKHtcbiAgICAgICAgICAgICAgICAgICAgbWFwVmlldzogdmlldyxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YixcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkSFRNTDogJ04vQSdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuem9vbWxldmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRpc3BsYXkgbW91c2UtcG9zaXRpb25cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLm1vdXNlcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzLm1vdXNlcG9zaXRpb24gPSBuZXcgb2wuY29udHJvbC5Nb3VzZVBvc2l0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVGb3JtYXQ6IG9sLmNvb3JkaW5hdGUudG9TdHJpbmdIRE1TLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViLFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWRIVE1MOiAnTi9BJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5tb3VzZXBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdlb3NlYXJjaFxuICAgICAgICBpZiAoYzRnLm1hcHMuY29udHJvbCAmJiBjNGcubWFwcy5jb250cm9sLkdlb1NlYXJjaCAmJiB0eXBlb2YgYzRnLm1hcHMuY29udHJvbC5HZW9TZWFyY2ggPT09ICdmdW5jdGlvbicgJiYgKG1hcERhdGEuZ2Vvc2VhcmNoLmVuYWJsZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuZ2Vvc2VhcmNoID0gbmV3IGM0Zy5tYXBzLmNvbnRyb2wuR2VvU2VhcmNoKHtcbiAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzLFxuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcFJpZ2h0LFxuICAgICAgICAgICAgICAgIGV4dERpdjogbWFwRGF0YS5nZW9zZWFyY2guZGl2IHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNlZDogIG1hcERhdGEuZ2Vvc2VhcmNoLmNvbGxhcHNlZCxcbiAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNlZExhYmVsOiAnJyxcbiAgICAgICAgICAgICAgICAvLyBlbmdpbmVVcmw6IG1hcERhdGEuZ2Vvc2VhcmNoLmVuZ2luZSxcbiAgICAgICAgICAgICAgICBzZWFyY2hab29tOiBtYXBEYXRhLmdlb3NlYXJjaC5zZWFyY2h6b29tLFxuICAgICAgICAgICAgICAgIHpvb21Cb3VuZHM6IG1hcERhdGEuZ2Vvc2VhcmNoLnpvb21ib3VuZHMsXG4gICAgICAgICAgICAgICAgcXVpY2tzZWFyY2g6IHRydWUsXG4gICAgICAgICAgICAgICAgYW5pbWF0ZTogbWFwRGF0YS5nZW9zZWFyY2guYW5pbWF0ZSxcbiAgICAgICAgICAgICAgICBtYXJrUmVzdWx0OiBtYXBEYXRhLmdlb3NlYXJjaC5tYXJrcmVzdWx0LFxuICAgICAgICAgICAgICAgIHBvcHVwOiBtYXBEYXRhLmdlb3NlYXJjaC5wb3B1cCxcbiAgICAgICAgICAgICAgICBhdXRvcGljazogbWFwRGF0YS5nZW9waWNrZXIsXG4gICAgICAgICAgICAgICAgY2FjaGluZzogbWFwRGF0YS5jYWNoaW5nLFxuICAgICAgICAgICAgICAgIHJlc3VsdHM6IG1hcERhdGEuZ2Vvc2VhcmNoLnJlc3VsdHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLmdlb3NlYXJjaCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBnZW9ib29rbWFya3MgLSBub3QgcmVhZHlcbiAgICAgICAgaWYgKG1hcERhdGEuZ2VvYm9va21hcmtzKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmdlb2Jvb2ttYXJrcyA9IG5ldyBvbC5jb250cm9sLkdlb0Jvb2ttYXJrKHtcbiAgICAgICAgICAgICAgICAvL3RhcmdldDogY29udHJvbENvbnRhaW5lclRvcFJpZ2h0XG4gICAgICAgICAgICAgICAgbGFiZWw6ICcgJyxcbiAgICAgICAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX0dFT0JPT0tNQVJLUyxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbGFuZ0NvbnN0YW50cy5HRU9CT09LTUFSS1NfUExBQ0VIT0xERVIsXG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlOiAnYzRnX2dlb2Jvb2ttYXJrcycvKixcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5HRU9CT09LTUFSS1MqLyAvL1RvRG8gaW1wbGVtZW50IGZvciBvd24gc3R5bGluZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuZ2VvYm9va21hcmtzKTtcbiAgICAgICAgICAgIHRoaXMucmlnaHRTbGlkZUVsZW1lbnRzLnB1c2goJy5vbC1ib29rbWFyaycpO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBvdmVydmlldy1tYXBcbiAgICAgICAgaWYgKG1hcERhdGEub3ZlcnZpZXdtYXApIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMub3ZlcnZpZXdtYXAgPSBuZXcgT3ZlcnZpZXdNYXAoe1xuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcFJpZ2h0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5vdmVydmlld21hcCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdGFyYm9hcmRcbiAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlciAmJiBtYXBEYXRhLmdlb3BpY2tlci50eXBlID09PSBcImJhY2tlbmRcIikge1xuICAgICAgICBlbmFibGVTdGFyYm9hcmQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gcG9wdXAgbWFyZ2luXG4gICAgICAvL3RoaXMubGVmdFNsaWRlRWxlbWVudHMucHVzaCgnLm9sLW92ZXJsYXktY29udGFpbmVyJyk7XG4gICAgICAvL3RoaXMucmlnaHRTbGlkZUVsZW1lbnRzLnB1c2goJy5vbC1vdmVybGF5LWNvbnRhaW5lcicpO1xuXG4gICAgICBpZiAodHlwZW9mIFN0YXJib2FyZCA9PT0gJ2Z1bmN0aW9uJyAmJiBlbmFibGVTdGFyYm9hcmQpIHtcbiAgICAgICAgICB0aGlzLmluaXRpYWxpemVTdGFyYm9hcmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJhY2tlbmQtZ2VvcGlja2VyXG4gICAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlciAmJiAobWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJiYWNrZW5kXCIgfHwgbWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJmcm9udGVuZFwiKSkge1xuICAgICAgICAgIHRoaXMuY29udHJvbHMuZ2VvcGlja2VyID0gbmV3IEdlb1BpY2tlcih7XG4gICAgICAgICAgICAgIG1hcENvbnRhaW5lcjogdGhpc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKHRoaXMuY29udHJvbHMuZ2VvcGlja2VyKTtcbiAgICAgICAgICBpZiAobWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJmcm9udGVuZFwiKSB7XG4gICAgICAgICAgICAvLyBzdWJzdHJpbmcgaXMgbmVlZGVkIGhlcmUgZm9yIHRha2luZyBvdXQgdGhlICNcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feCAmJiBtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feCkge1xuICAgICAgICAgICAgICB2YXIgZ2VveEZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWFwRGF0YS5nZW9waWNrZXIuaW5wdXRfZ2VvX3guc3Vic3RyaW5nKDEpKTtcbiAgICAgICAgICAgICAgdmFyIGdlb3lGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hcERhdGEuZ2VvcGlja2VyLmlucHV0X2dlb195LnN1YnN0cmluZygxKSk7XG4gICAgICAgICAgICAgIGlmIChnZW94RmllbGQgJiYgZ2VveUZpZWxkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY0dlb3ggPSBnZW94RmllbGQudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGxvY0dlb3kgPSBnZW95RmllbGQudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGxvY0dlb3ggJiYgbG9jR2VveSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG51bWVyaXplZCA9IFtwYXJzZUZsb2F0KGxvY0dlb3gsIDEwKSwgcGFyc2VGbG9hdChsb2NHZW95LCAxMCldO1xuICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVkID0gb2wucHJvai50cmFuc2Zvcm0obnVtZXJpemVkLCBvbC5wcm9qLmdldCgnRVBTRzo0MzI2JyksIG9sLnByb2ouZ2V0KCdFUFNHOjM4NTcnKSk7XG4gICAgICAgICAgICAgICAgICBnZW9Mb2NhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB0aGlzLm1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKHRyYW5zZm9ybWVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93IGF0dHJpYnV0aW9uXG4gICAgICAgIGlmIChtYXBEYXRhLmF0dHJpYnV0aW9uLmVuYWJsZSkge1xuICAgICAgICAgICAgLy8gQFRPRE86IGNyZWF0ZSBvd24gYXR0cmlidXRpb24tY29udHJvbFxuICAgICAgICAgICAgaWYgKG1hcERhdGEuYXR0cmlidXRpb24uY2ZnX2xvZ28pIHtcbiAgICAgICAgICAgICAgICBsb2dvTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgICAgICBsb2dvTGluay5ocmVmID0gJ2h0dHBzOi8vY29uNGdpcy5vcmcnO1xuICAgICAgICAgICAgICAgIGxvZ29MaW5rLnRpdGxlID0gJ2J1aWx0IHdpdGggY29uNGdpcyc7XG4gICAgICAgICAgICAgICAgbG9nb0xpbmsudGFyZ2V0ID0gJ19ibGFuayc7XG4gICAgICAgICAgICAgICAgbG9nb0xpbmsuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkFUVFJJQlVUSU9OX0xPR087XG4gICAgICAgICAgICAgICAgbG9nb0dyYXBoaWMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgICAgICAgICBsb2dvR3JhcGhpYy5zcmMgPSAnYnVuZGxlcy9jb240Z2lzbWFwcy9pbWFnZXMvbG9nb19jb240Z2lzLnN2Zyc7XG4gICAgICAgICAgICAgICAgbG9nb0xpbmsuYXBwZW5kQ2hpbGQobG9nb0dyYXBoaWMpO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodC5hcHBlbmRDaGlsZChsb2dvTGluayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmF0dHJpYnV0aW9uID0gbmV3IG9sLmNvbnRyb2wuQXR0cmlidXRpb24oe1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9BVFRSSUJVVElPTixcbiAgICAgICAgICAgICAgICBjb2xsYXBzZUxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tUmlnaHQsXG4gICAgICAgICAgICAgICAgY29sbGFwc2libGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5hdHRyaWJ1dGlvbi5zZXRDb2xsYXBzZWQobWFwRGF0YS5hdHRyaWJ1dGlvbi5jb2xsYXBzZWQgPT09ICcxJyk7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuYXR0cmlidXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hvdyBwZXJtYWxpbmtcbiAgICAgICAgaWYgKG1hcERhdGEucGVybWFsaW5rLmVuYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5wZXJtYWxpbmsgPSBuZXcgUGVybWFsaW5rKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJyAnLFxuICAgICAgICAgICAgICAgIHRpcExhYmVsOiBsYW5nQ29uc3RhbnRzLkNUUkxfUEVSTUFMSU5LLFxuICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgZ2V0UGFyYW1ldGVyOiBtYXBEYXRhLnBlcm1hbGluay5nZXRfcGFyYW1ldGVyLFxuICAgICAgICAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lckJvdHRvbVJpZ2h0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5wZXJtYWxpbmspO1xuICAgICAgICB9XG5cbiAgICAgICAgLy90aGVtZURhdGFcbiAgICAgICAgaWYgKG1hcERhdGEudGhlbWVEYXRhKSB7XG4gICAgICAgICAgICBkb21NYXBEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXBEYXRhLm1hcERpdik7XG4gICAgICAgICAgICBpZiAobWFwRGF0YS50aGVtZURhdGFbJ3VzZWdsb2JhbCddKSB7XG4gICAgICAgICAgICAgIGRvbU1hcERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cmFwcGVyJyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAobWFwRGF0YS50aGVtZURhdGFbJ21haW5jb2xvciddKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1haW5Db2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShtYXBEYXRhLnRoZW1lRGF0YVsnbWFpbmNvbG9yJ10sIG1hcERhdGEudGhlbWVEYXRhWydtYWlub3BhY2l0eSddKTtcbiAgICAgICAgICAgICAgICB2YXIgZm9udENvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KG1hcERhdGEudGhlbWVEYXRhWydmb250Y29sb3InXSwgbWFwRGF0YS50aGVtZURhdGFbJ2ZvbnRvcGFjaXR5J10pO1xuICAgICAgICAgICAgICAgIHZhciBzaGFkb3dDb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShtYXBEYXRhLnRoZW1lRGF0YVsnc2hhZG93Y29sb3InXSwgbWFwRGF0YS50aGVtZURhdGFbJ3NoYWRvd29wYWNpdHknXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9tTWFwRGl2ICYmIGRvbU1hcERpdi5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICBkb21NYXBEaXYuc3R5bGUuc2V0UHJvcGVydHkoJy0tbWFpbi1jb2xvcicsIG1haW5Db2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGRvbU1hcERpdi5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1mb250LWNvbG9yJywgZm9udENvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLnNldFByb3BlcnR5KCctLXNoYWRvdy1jb2xvcicsIHNoYWRvd0NvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtYXBEYXRhLnRoZW1lRGF0YVsnYnV0dG9ucmFkaXVzJ10pIHtcbiAgICAgICAgICAgICAgICBkb21NYXBEaXYuc3R5bGUuc2V0UHJvcGVydHkoJy0tYnV0dG9uLXJhZGl1cy1wZXJjZW50JywgbWFwRGF0YS50aGVtZURhdGFbJ2J1dHRvbnJhZGl1cyddKyclJyk7XG4gICAgICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLnNldFByb3BlcnR5KCctLWJ1dHRvbi1yYWRpdXMtcGl4ZWwnLCBtYXBEYXRhLnRoZW1lRGF0YVsnYnV0dG9ucmFkaXVzJ10rJ3B4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgQXJyYXkuaXNBcnJheSh3aW5kb3cuYzRnTWFwc0hvb2tzLm1hcENvbnRyb2xsZXJfYWRkQ29udHJvbHMpKSB7XG4gICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MubWFwQ29udHJvbGxlcl9hZGRDb250cm9scywge21hcENvbnRyb2xsZXI6IHRoaXMsIENvbnRhaW5lcjogY29udHJvbENvbnRhaW5lclRvcExlZnR9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIEFkZCBtZXRob2RzXG4gIGM0Zy5tYXBzLk1hcENvbnRyb2xsZXIucHJvdG90eXBlID0gJC5leHRlbmQoYzRnLm1hcHMuTWFwQ29udHJvbGxlci5wcm90b3R5cGUsIHtcbiAgICAgIGluaXRpYWxpemVTdGFyYm9hcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBtYXBEYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICAgIGxldCBzdGFyYm9hcmRfbGFiZWw7XG4gICAgICAgICAgaWYgKG1hcERhdGEuc3RhcmJvYXJkLmxhYmVsKSB7XG4gICAgICAgICAgc3RhcmJvYXJkX2xhYmVsID0gbGFuZ0NvbnN0YW50cy5DVFJMX1NUQVJCT0FSRC5yZXBsYWNlKCdTdGFyYm9hcmQnLCBtYXBEYXRhLnN0YXJib2FyZC5sYWJlbCkucmVwbGFjZSgnc3RhcmJvYXJkJywgbWFwRGF0YS5zdGFyYm9hcmQubGFiZWwpO1xuICAgICAgICB9XG5cblxuICAgICAgICB0aGlzLmNvbnRyb2xzLnN0YXJib2FyZCA9IG5ldyBTdGFyYm9hcmQoe1xuICAgICAgICAgIGNyZWF0ZTogbWFwRGF0YS5zdGFyYm9hcmQuZW5hYmxlIHx8IGZhbHNlLFxuICAgICAgICAgIGhlYWRsaW5lOiBtYXBEYXRhLnN0YXJib2FyZC5sYWJlbCxcbiAgICAgICAgICB0aXBMYWJlbDogc3RhcmJvYXJkX2xhYmVsIHx8IGZhbHNlLFxuICAgICAgICAgIGNhY2hpbmc6IG1hcERhdGEuY2FjaGluZyxcbiAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzLFxuICAgICAgICAgIGV4dERpdjogbWFwRGF0YS5zdGFyYm9hcmQuZGl2LFxuICAgICAgICAgIGRlZmF1bHRPcGVuOiBtYXBEYXRhLnN0YXJib2FyZC5vcGVuLFxuICAgICAgICAgIGZpbHRlcjogbWFwRGF0YS5zdGFyYm9hcmQuZmlsdGVyLFxuICAgICAgICAgIGJ1dHRvbjogbWFwRGF0YS5zdGFyYm9hcmQuYnV0dG9uLFxuICAgICAgICAgIGJhc2VsYXllclN3aXRjaGVyQ3JlYXRlOiBtYXBEYXRhLmJhc2VsYXllcnN3aXRjaGVyLmVuYWJsZSxcbiAgICAgICAgICBiYXNlbGF5ZXJTd2l0Y2hlclRpdGxlOiBtYXBEYXRhLmJhc2VsYXllcnN3aXRjaGVyLmxhYmVsLFxuICAgICAgICAgIGxheWVyU3dpdGNoZXJDcmVhdGU6IG1hcERhdGEubGF5ZXJzd2l0Y2hlci5lbmFibGUsXG4gICAgICAgICAgbGF5ZXJTd2l0Y2hlclRpdGxlOiBtYXBEYXRhLmxheWVyc3dpdGNoZXIubGFiZWxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5jb250cm9scy5zdGFyYm9hcmQpO1xuICAgICAgfVxuICB9KTtcblxufShqUXVlcnksIHRoaXMuYzRnKSk7IC8vICdUaGUgRW5kJyA6KSAgICAtICEgRG8gbm90IHdyaXRlIHN0dWZmIGFmdGVyIHRoaXMgbGluZSAhIC1cblxuZXhwb3J0IGxldCBNYXBDb250cm9sbGVyID0gdGhpcy5jNGcubWFwcy5NYXBDb250cm9sbGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMuanMiLCJpbXBvcnQge0M0Z092ZXJsYXl9IGZyb20gXCIuL2M0Zy1vdmVybGF5XCJcbmltcG9ydCB7Y29uZmlnfSBmcm9tIFwiLi9jNGctbWFwcy1jb25maWdcIjtcblxuZXhwb3J0IGNsYXNzIEM0Z092ZXJsYXlDb250cm9sbGVye1xuICAgIGNvbnN0cnVjdG9yKGJhc2VsYXllcil7XG4gICAgICAgIHRoaXMuYmFzZWxheWVyID0gYmFzZWxheWVyO1xuICAgICAgICB0aGlzLmFyck92ZXJsYXlzID0gW107XG4gICAgfVxuICAgIFxuICAgIHNob3dPdmVybGF5TGF5ZXIob3ZlcmxheUlkKXtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgb3ZlcmxheUxheWVyQ29uZmlnLFxuICAgICAgICAgICAgb3NtU291cmNlQ29uZmlncyA9IGNvbmZpZy5vc20sXG4gICAgICAgICAgICBzdGFtZW5Tb3VyY2VDb25maWdzID0gY29uZmlnLnN0YW1lbixcbiAgICAgICAgICAgIGxheWVyT3B0aW9ucyxcbiAgICAgICAgICAgIG92ZXJsYXlMYXllcixcbiAgICAgICAgICAgIG5vVXJsO1xuXG4gICAgICAgIGxheWVyT3B0aW9ucyA9IHt9O1xuICAgICAgICBvdmVybGF5TGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuT1NNKClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb3ZlcmxheUxheWVyQ29uZmlnID0gdGhpcy5hcnJPdmVybGF5c1tvdmVybGF5SWRdO1xuXG4gICAgICAgIHN3aXRjaCAob3ZlcmxheUxheWVyQ29uZmlnLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjYXNlICdvc20nOlxuICAgICAgICAgICAgICAgIGlmIChvc21Tb3VyY2VDb25maWdzW292ZXJsYXlMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLk9TTShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvc21Tb3VyY2VDb25maWdzW292ZXJsYXlMYXllckNvbmZpZy5zdHlsZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFtZW5Tb3VyY2VDb25maWdzW292ZXJsYXlMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RhbWVuXG4gICAgICAgICAgICAgICAgICAgIG92ZXJsYXlMYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5TdGFtZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhbWVuU291cmNlQ29uZmlnc1tvdmVybGF5TGF5ZXJDb25maWcuc3R5bGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2UgaWYgKG1hcFF1ZXN0U291cmNlQ29uZmlnc1tvdmVybGF5TGF5ZXJDb25maWcuc3R5bGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgLy8gbWFwUXVlc3RcbiAgICAgICAgICAgICAgICAgICAgLy8gICBvdmVybGF5TGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuTWFwUXVlc3QobWFwUXVlc3RTb3VyY2VDb25maWdzW292ZXJsYXlMYXllckNvbmZpZy5zdHlsZV0pXG4gICAgICAgICAgICAgICAgICAgIC8vICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvdmVybGF5TGF5ZXJDb25maWcuc3R5bGUgPT09ICdvc21fY3VzdG9tJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXN0b21cbiAgICAgICAgICAgICAgICAgICAgbm9VcmwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3ZlcmxheUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gb3ZlcmxheUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uICsgJyAnICsgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdmVybGF5TGF5ZXJDb25maWcudXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gb3ZlcmxheUxheWVyQ29uZmlnLnVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vVXJsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3ZlcmxheUxheWVyQ29uZmlnLnVybHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmxzID0gb3ZlcmxheUxheWVyQ29uZmlnLnVybHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBub1VybCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9VcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJsYXlMYXllciA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKGxheWVyT3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjdXN0b20gdXJsKHMpIG1pc3NpbmcgLT4gc3dpdGNoIHRvIGRlZmF1bHQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigndW5zdXBwb3J0ZWQgb3NtLXN0eWxlIC0+IHN3aXRjaCB0byBkZWZhdWx0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZ29vZ2xlJzpcbiAgICAgICAgICAgICAgICAvL0B0b2RvXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdnb29nbGUtbWFwcyBhcmUgY3VycmVudGx5IHVuc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdiaW5nJzpcbiAgICAgICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmFwaUtleSAmJiBvdmVybGF5TGF5ZXJDb25maWcuc3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBuZXcgb2wuc291cmNlLkJpbmdNYXBzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdWx0dXJlOiBuYXZpZ2F0b3IubGFuZ3VhZ2VzID8gbmF2aWdhdG9yLmxhbmd1YWdlc1swXSA6IChuYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLnVzZXJMYW5ndWFnZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBvdmVybGF5TGF5ZXJDb25maWcuYXBpS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlcnlTZXQ6IG92ZXJsYXlMYXllckNvbmZpZy5zdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd3cm9uZyBiaW5nLWtleSBvciBpbnZhbGlkIGltYWdlcnktc2V0IScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dtcyc6XG4gICAgICAgICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuVGlsZVdNUyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG92ZXJsYXlMYXllckNvbmZpZy51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMQVlFUlM6IG92ZXJsYXlMYXllckNvbmZpZy5wYXJhbXMubGF5ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZFUlNJT046IG92ZXJsYXlMYXllckNvbmZpZy5wYXJhbXMudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0ZPUk1BVDogb3ZlcmxheUxheWVyQ29uZmlnLnBhcmFtcy5mb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVFJBTlNQQVJFTlQ6IG92ZXJsYXlMYXllckNvbmZpZy5wYXJhbXMudHJhbnNwYXJlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBndXR0ZXI6IG92ZXJsYXlMYXllckNvbmZpZy5ndXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGlvbnM6IG92ZXJsYXlMYXllckNvbmZpZy5hdHRyaWJ1dGlvbiArICcgJyArIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT05cbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIC8vZXh0ZW50OiBvbC5wcm9qLnRyYW5zZm9ybUV4dGVudChbNS41OTMzNCwgNTAuMDU3OCwgOS43NDE1OCwgNTIuNzk5OF0sICdFUFNHOjQzMjYnLCAnRVBTRzozODU3JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ293bSc6XG4gICAgICAgICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuWFlaKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogb3ZlcmxheUxheWVyQ29uZmlnLnVybCArIG92ZXJsYXlMYXllckNvbmZpZy5hcHBfaWQgKyAnL3t6fS97eH0ve3l9P2hhc2g9JyArIG92ZXJsYXlMYXllckNvbmZpZy5hcGlfa2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRpb25zOiBvdmVybGF5TGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBvbC5zb3VyY2UuT1NNLkFUVFJJQlVUSU9OXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAvL2V4dGVudDogb2wucHJvai50cmFuc2Zvcm1FeHRlbnQoWzUuNTkzMzQsIDUwLjA1NzgsIDkuNzQxNTgsIDUyLjc5OThdLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigndW5zdXBwb3J0ZWQgcHJvdmlkZXInKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvdmVybGF5TGF5ZXIuc2V0T3BhY2l0eShwYXJzZUludChvdmVybGF5TGF5ZXJDb25maWcub3BhY2l0eSkvMTAwKTtcbiAgICAgICAgdGhpcy5hcnJPdmVybGF5c1tvdmVybGF5SWRdLmxheWVyID0gb3ZlcmxheUxheWVyO1xuICAgICAgICByZXR1cm4gdGhpcy5hcnJPdmVybGF5c1tvdmVybGF5SWRdLmxheWVyXG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW92ZXJsYXktY29udHJvbGxlci5qcyIsImV4cG9ydCBjbGFzcyBDNGdPdmVybGF5IHtcblxuICAgIGNvbnN0cnVjdG9yKG92ZXJsYXlBcnIsIG1hcENvbnRyb2xsZXIpe1xuICAgICAgICB0aGlzLmlkICAgICAgICAgICAgPSBvdmVybGF5QXJyWydpZCddO1xuICAgICAgICB0aGlzLnBpZCAgICAgICAgICAgPSBvdmVybGF5QXJyWydwaWQnXTtcbiAgICAgICAgdGhpcy5uYW1lICAgICAgICAgID0gb3ZlcmxheUFyclsnbmFtZSddO1xuICAgICAgICB0aGlzLnByb3ZpZGVyICAgICAgPSBvdmVybGF5QXJyWydwcm92aWRlciddO1xuICAgICAgICB0aGlzLnN0eWxlICAgICAgICAgPSBvdmVybGF5QXJyWydzdHlsZSddO1xuICAgICAgICB0aGlzLnVybCAgICAgICAgICAgPSBvdmVybGF5QXJyWyd1cmwnXTtcbiAgICAgICAgdGhpcy51cmxzICAgICAgICAgID0gb3ZlcmxheUFyclsndXJscyddO1xuICAgICAgICB0aGlzLm9wYWNpdHkgICAgICAgPSBvdmVybGF5QXJyWydvcGFjaXR5J107XG4gICAgICAgIHRoaXMuYXR0cmlidXRpb24gICA9IG92ZXJsYXlBcnJbJ2F0dHJpYnV0aW9uJ107XG4gICAgICAgIHRoaXMuZ3V0dGVyICAgICAgICA9IG92ZXJsYXlBcnJbJ2d1dHRlciddO1xuICAgICAgICB0aGlzLnBhcmFtcyAgICAgICAgPSBvdmVybGF5QXJyWydwYXJhbXMnXTtcbiAgICAgICAgdGhpcy5sYXllciAgICAgICAgID0gZmFsc2U7XG4gICAgICAgIHRoaXMub3ZlcmxheUFyciAgICA9IG92ZXJsYXlBcnI7XG4gICAgICAgIHRoaXMubWFwQ29udHJvbGxlciAgICA9IG1hcENvbnRyb2xsZXJcbiAgICB9XG5cbiAgICBcblxuICAgIGNoYW5nZU9wYWNpdHkodmFsdWUpe1xuICAgICAgICB2YXIgbGF5ZXI7XG5cbiAgICAgICAgbGF5ZXIgPSB0aGlzLmxheWVyO1xuICAgICAgICBpZiAobGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlTGF5ZXIobGF5ZXIpO1xuICAgICAgICAgICAgbGF5ZXIuc2V0T3BhY2l0eSh2YWx1ZS8xMDApO1xuICAgICAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihsYXllcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctb3ZlcmxheS5qcyJdLCJzb3VyY2VSb290IjoiIn0=