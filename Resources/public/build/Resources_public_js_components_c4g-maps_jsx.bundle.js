(self["webpackChunkmapsbundle"] = self["webpackChunkmapsbundle"] || []).push([["Resources_public_js_components_c4g-maps_jsx"],{

/***/ "./Resources/public/js/c4g-baselayer-controller.js":
/*!*********************************************************!*\
  !*** ./Resources/public/js/c4g-baselayer-controller.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.C4gBaselayerController = exports.OSM_REL_ATTRIBUTION = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _c4gBaselayer = __webpack_require__(/*! ./c4g-baselayer */ "./Resources/public/js/c4g-baselayer.js");

var _c4gOverlay = __webpack_require__(/*! ./c4g-overlay */ "./Resources/public/js/c4g-overlay.js");

var _c4gMapsConfig = __webpack_require__(/*! ./c4g-maps-config */ "./Resources/public/js/c4g-maps-config.js");

var _c4gMapsUtils = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");

var _Tile = _interopRequireDefault(__webpack_require__(/*! ol/layer/Tile */ "./node_modules/ol/layer/Tile.js"));

var _TileJSON = _interopRequireDefault(__webpack_require__(/*! ol/source/TileJSON */ "./node_modules/ol/source/TileJSON.js"));

var _source7 = __webpack_require__(/*! ol/source */ "./node_modules/ol/source.js");

var _VectorTile = _interopRequireDefault(__webpack_require__(/*! ol/source/VectorTile */ "./node_modules/ol/source/VectorTile.js"));

var _layer = __webpack_require__(/*! ol/layer */ "./node_modules/ol/layer.js");

var _Collection = _interopRequireDefault(__webpack_require__(/*! ol/Collection */ "./node_modules/ol/Collection.js"));

var _OLCesium = _interopRequireDefault(__webpack_require__(/*! ol-cesium/src/olcs/OLCesium.js */ "./node_modules/ol-cesium/src/olcs/OLCesium.js"));

var _olMapboxStyle = __webpack_require__(/*! ol-mapbox-style */ "./node_modules/ol-mapbox-style/dist/index.js");

var _VectorTile2 = _interopRequireDefault(__webpack_require__(/*! ol/layer/VectorTile */ "./node_modules/ol/layer/VectorTile.js"));

var _GeoImage = _interopRequireDefault(__webpack_require__(/*! ol-ext/source/GeoImage */ "./node_modules/ol-ext/source/GeoImage.js"));

var _Projection = _interopRequireDefault(__webpack_require__(/*! ol/proj/Projection */ "./node_modules/ol/proj/Projection.js"));

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
//copy link to add noopener
var OSM_REL_ATTRIBUTION = '&#169; ' + '<a href="https://www.openstreetmap.org/copyright" target="_blank" rel="noopener">OpenStreetMap</a> ' + 'contributors.';
exports.OSM_REL_ATTRIBUTION = OSM_REL_ATTRIBUTION;

var C4gBaselayerController = /*#__PURE__*/function () {
  function C4gBaselayerController(proxy) {
    (0, _classCallCheck2["default"])(this, C4gBaselayerController);
    this.proxy = proxy;
    this.mapController = proxy.options.mapController;
    this.arrBaselayers = {};
    this.baselayerIds = [];
    this.baseKeys = this.mapController.data.base_keys;
  }

  (0, _createClass2["default"])(C4gBaselayerController, [{
    key: "loadBaseLayers",
    value: function loadBaseLayers() {
      var self;
      self = this;
      jQuery.ajax(this.proxy.api_baselayer_url, {
        dataType: this.mapController.data.jsonp ? "jsonp" : "json"
      }).done(function (data) {
        if (data.baselayer) {
          self.addBaseLayers(data.baselayer);

          _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.proxy_baselayer_loaded);
        }

        return true;
      }).fail(function () {
        // @TODO error-messages
        //   1) Visible message 4 users (i18n)
        //   2) Technical console.warn
        console.warn('An error occured while trying to load the baselayers. Do you have configured a default profile with baselayers?');
        self.mapController.spinner.hide();
        return false;
      }).always(function () {//self.mapController.spinner.hide();
      });
    } // end of "loadBaseLayers()"

  }, {
    key: "addBaseLayers",
    value: function addBaseLayers(baselayers) {
      var baselayer, uid, i, j; // build baselayer-list

      if (baselayers.length > 0) {
        for (i = 0; i < baselayers.length; i += 1) {
          baselayer = baselayers[i];
          uid = baselayer.id || _c4gMapsUtils.utils.getUniqueId();
          this.baselayerIds.push(uid);

          if (!this.arrBaselayers[uid]) {
            this.arrBaselayers[uid] = new _c4gBaselayer.C4gBaselayer(baselayer, this);
          } // @TODO: check initial baselayer-handling


          if (this.mapController.data.baselayer && parseInt(uid, 10) === parseInt(this.mapController.data.baselayer, 10)) {
            // check default from content/module (overrides profile settings)
            this.showBaseLayer(uid);
          } else if (this.mapController.data.default_baselayer && parseInt(uid, 10) === parseInt(this.mapController.data.default_baselayer, 10)) {
            // check default from profile
            this.showBaseLayer(uid);
          }
        }
      }

      if (!this.proxy.activeBaselayerId) {
        // no baselayer was activated
        if (baselayers.length > 0 && baselayers[0].id) {
          // take first baselayer if possible
          uid = baselayers[0].id;
        } else {
          // otherwise build default baselayer
          uid = 0;
          this.baselayerIds.push(uid);

          if (!this.arrBaselayers[uid]) {
            this.arrBaselayers[uid] = {
              id: 0,
              name: 'c4g_default',
              provider: 'osm',
              style: 'Mapnik'
            };
          }
        }

        this.showBaseLayer(uid);
      }

      this.proxy.baselayers_loaded = true;

      _c4gMapsUtils.utils.callHookFunctions(this.proxy.hook_baselayer_loaded, this.baselayerIds);
    } // end of "addBaseLayers()"

  }, {
    key: "createBaseLayer",
    value: function createBaseLayer(layerOptions, baseLayerConfig, sourceConfigs) {
      var newBaselayer = {};
      layerOptions = layerOptions || {};

      if (window.isSecureContext) {
        layerOptions.crossOrigin = 'anonymous';
      }

      var cookie = 1;
      var mapData = this.mapController.data;

      if (mapData.cookie) {
        cookie = 0;
        var arrCoookies = document.cookie.split(";");

        for (var i in arrCoookies) {
          if (arrCoookies.hasOwnProperty(i)) {
            if (arrCoookies[i].indexOf(mapData.cookie.name) > -1) {
              //the cookies exists
              if (!mapData.cookie.value || arrCoookies[i].indexOf(mapData.cookie.value) > -1) {
                //no value provided or matching value
                cookie = 2;
              }
            }
          }
        }
      }

      var dummyUrl = '../../../' + this.mapController.data.dummyBaselayer;
      var dummySource = null;

      if (dummyUrl) {
        dummySource = new _source7.XYZ({
          url: dummyUrl
        });
      }

      if (dummySource && cookie === 0) {
        newBaselayer = new _Tile["default"]();
        newBaselayer.setSource(dummySource);
      } else {
        switch (baseLayerConfig.provider) {
          case 'custom':
            // custom
            var noUrl = true;

            if (baseLayerConfig.url) {
              layerOptions.url = baseLayerConfig.url;
              noUrl = false;
            } else if (baseLayerConfig.urls) {
              layerOptions.urls = baseLayerConfig.urls;
              noUrl = false;
            }

            if (!noUrl) {
              newBaselayer = new _Tile["default"]({
                source: new _source7.XYZ(layerOptions),
                extent: baseLayerConfig.extend
              });
            } else {
              console.warn('custom url(s) missing -> switch to default');
            }

            break;

          case 'osm':
            if (sourceConfigs.osm[baseLayerConfig.style]) {
              newBaselayer = new _Tile["default"]({
                source: new _source7.OSM(jQuery.extend(sourceConfigs.osm[baseLayerConfig.style], layerOptions))
              });
            } else if (baseLayerConfig.style === 'osm_custom') {
              // custom
              var _noUrl = true;

              if (baseLayerConfig.url) {
                layerOptions.url = baseLayerConfig.url;
                _noUrl = false;
              } else if (baseLayerConfig.urls) {
                layerOptions.urls = baseLayerConfig.urls;
                _noUrl = false;
              }

              if (!_noUrl) {
                newBaselayer = new _Tile["default"]({
                  source: new _source7.XYZ(layerOptions)
                });
              } else {
                console.warn('custom url(s) missing -> switch to default');
              }
            } else {
              console.warn('unsupported osm-style -> switch to default');
            }

            break;

          case 'stamen':
            if (sourceConfigs.stamen[baseLayerConfig.style]) {
              // Stamen
              var source1, source2;

              if (baseLayerConfig.style === 'Watercolor') {
                newBaselayer = new _layer.Group({
                  layers: [new _Tile["default"](), new _Tile["default"]()]
                });
                source1 = new _source7.Stamen({
                  layer: 'watercolor'
                });
                source2 = new _source7.Stamen({
                  layer: 'terrain-labels'
                });
              } else {
                newBaselayer = new _Tile["default"]();
                source1 = new _source7.Stamen(jQuery.extend(sourceConfigs.stamen[baseLayerConfig.style]));
              }

              if (newBaselayer instanceof _layer.Group) {
                var array = newBaselayer.getLayers().getArray();
                array[0].setSource(source1);
                array[1].setSource(source2);
              } else {
                newBaselayer.setSource(source1);
              }
            } else {
              console.warn('unsupported osm-style -> switch to default');
            }

            break;

          case 'con4gisIo':
            var _config = this.baseKeys[baseLayerConfig.id];
            layerOptions.url = baseLayerConfig.url.replace('{key}', _config['key']);
            layerOptions.attributions = _config.attribution + ' ' + layerOptions.attributions;
            var source = new _source7.XYZ(layerOptions);
            newBaselayer = new _Tile["default"]();
            newBaselayer.setSource(source);
            break;

          case 'mapbox':
            if (baseLayerConfig.api_key && baseLayerConfig.app_id && baseLayerConfig.mapbox_type) {
              var _source;

              newBaselayer = new _Tile["default"]();

              if (baseLayerConfig.mapbox_type === 'Mapbox') {
                layerOptions.url = baseLayerConfig.url + baseLayerConfig.app_id + '/tiles/{z}/{x}/{y}?access_token=' + baseLayerConfig.api_key;
                _source = new _source7.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions));
              } else {
                layerOptions.url = baseLayerConfig.url_classic + baseLayerConfig.app_id + '/{z}/{x}/{y}.png?access_token=' + baseLayerConfig.api_key;
                _source = new _source7.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions));
              }

              newBaselayer.setSource(_source);
            } else if (baseLayerConfig.hide_in_be) {
              layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
              newBaselayer = new _Tile["default"]({
                source: new _source7.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.mapbox_type], layerOptions))
              });
            } else {
              console.warn('wrong mapbox configuration!');
            }

            break;

          case 'mapz':
            newBaselayer = new _Tile["default"]();
            source = new _source7.XYZ(jQuery.extend(sourceConfigs.mapz, layerOptions));
            newBaselayer.setSource(source);
            break;

          case 'otm':
            newBaselayer = new _Tile["default"]();
            source = new _source7.XYZ(jQuery.extend(sourceConfigs.otm, layerOptions));
            newBaselayer.setSource(source);
            break;

          case 'klokan':
            if (baseLayerConfig.api_key && baseLayerConfig.klokan_type) {
              if (baseLayerConfig.url.charAt(baseLayerConfig.url.length - 1) != '/') {
                baseLayerConfig.url = baseLayerConfig.url + '/';
              }

              if (baseLayerConfig.klokan_type === 'OpenMapTiles') {
                layerOptions.url = baseLayerConfig.url + '{z}/{x}/{y}.pbf';
                newBaselayer = new _VectorTile2["default"]({
                  source: new _VectorTile["default"](jQuery.extend(sourceConfigs.klokan[baseLayerConfig.klokan_type], layerOptions))
                });
                fetch(baseLayerConfig.url + 'styles/' + baseLayerConfig.style + '.json').then(function (response) {
                  response.json().then(function (glStyle) {
                    (0, _olMapboxStyle.applyStyle)(newBaselayer, glStyle, 'openmaptiles');
                  });
                });
              } else {
                //layerOptions.url = baseLayerConfig.url + '{z}/{x}/{y}.pbf?key='+baseLayerConfig.api_key;
                newBaselayer = new _Tile["default"]();

                var _source2 = new _TileJSON["default"]({
                  url: baseLayerConfig.url + 'styles/' + baseLayerConfig.style + '.json?key=' + baseLayerConfig.api_key
                });

                newBaselayer.setSource(_source2); // newBaselayer = new VectorTileLayer({
                //   source: new VectorTileSource(jQuery.extend(
                //     sourceConfigs.klokan[baseLayerConfig.klokan_type],
                //     layerOptions))
                // });
                //
                // fetch(baseLayerConfig.url + baseLayerConfig.style+'/style.json?key='+baseLayerConfig.api_key).then(function(response) {
                //   response.json().then(function(glStyle) {
                //     applyStyle(newBaselayer, glStyle, 'openmaptiles');
                //   });
                // });
              }
            } else {
              console.warn('wrong klokan configuration!');
            }

            break;

          case 'here':
            if (baseLayerConfig.api_key && baseLayerConfig.app_id && baseLayerConfig.here_type) {
              if (baseLayerConfig.style === 'normal') {
                layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/normal.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
              } else if (baseLayerConfig.style === 'transit') {
                layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/normal.day.transit/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
              } else if (baseLayerConfig.style === 'pedestrian') {
                layerOptions.url = 'https://{1-4}.base.maps.cit.api.here.com/maptile/2.1/maptile/newest/pedestrian.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
              } else if (baseLayerConfig.style === 'terrain') {
                layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/terrain.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
              } else if (baseLayerConfig.style === 'satellite') {
                layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/satellite.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
              } else if (baseLayerConfig.style === 'hybrid') {
                layerOptions.url = 'https://{1-4}.aerial.maps.cit.api.here.com/maptile/2.1/maptile/newest/hybrid.day/{z}/{x}/{y}/256/png' + '?app_id=' + baseLayerConfig.app_id + '&app_code=' + baseLayerConfig.api_key;
              }

              var _source3 = new _source7.XYZ(jQuery.extend(sourceConfigs.here[baseLayerConfig.here_type], layerOptions));

              newBaselayer = new _Tile["default"]({
                preload: Infinity
              });
              newBaselayer.setSource(_source3);
            } else if (baseLayerConfig.hide_in_be) {
              layerOptions.url = layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
              newBaselayer = new _Tile["default"]({
                source: new _source7.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.here_type], layerOptions))
              });
            } else {
              console.warn('wrong HERE configuration!');
            }

            break;

          case 'thunder':
            if (baseLayerConfig.api_key && baseLayerConfig.thunderforest_type) {
              if (baseLayerConfig.style) {
                layerOptions.url = "https://tile.thunderforest.com/" + baseLayerConfig.style + "/{z}/{x}/{y}.png?apikey=" + baseLayerConfig.api_key;
              }

              newBaselayer = new _Tile["default"]();
              source = new _source7.XYZ(jQuery.extend(sourceConfigs.thunderforest[baseLayerConfig.thunderforest_type], layerOptions));
              newBaselayer.setSource(source);
            } else if (baseLayerConfig.hide_in_be) {
              layerOptions.url = "con4gis/baseLayerTileService/" + baseLayerConfig.id + "/{z}/{x}/{y}";
              newBaselayer = new _Tile["default"]({
                source: new _source7.XYZ(jQuery.extend(sourceConfigs.mapbox[baseLayerConfig.thunderforest_type], layerOptions))
              });
            } else {
              console.warn('wrong Thunderforest configuration!');
            }

            break;

          case 'google':
            //@todo
            console.warn('google-maps are currently unsupported');
            break;

          case 'bing':
            if (baseLayerConfig.api_key && baseLayerConfig.style) {
              newBaselayer = new _Tile["default"]();

              var _source4 = new _source7.BingMaps({
                culture: navigator.languages ? navigator.languages[0] : navigator.language || navigator.userLanguage,
                key: baseLayerConfig.api_key,
                imagerySet: baseLayerConfig.style
              });

              newBaselayer.setSource(_source4);
            } else {
              console.warn('wrong bing-key or invalid imagery-set!');
            }

            break;

          case 'wms':
            if (baseLayerConfig.url.indexOf('https') !== -1) {
              newBaselayer = new _Tile["default"]({
                source: new _source7.TileWMS({
                  url: baseLayerConfig.url,
                  params: {
                    LAYERS: baseLayerConfig.params.layers,
                    VERSION: baseLayerConfig.params.version,
                    //FORMAT: baseLayerConfig.params.format,
                    TRANSPARENT: baseLayerConfig.params.transparent
                  },
                  gutter: baseLayerConfig.gutter,
                  attributions: baseLayerConfig.attribution + ' ' + OSM_REL_ATTRIBUTION,
                  crossOrigin: 'anonymous'
                }) //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')

              });
            } else {
              newBaselayer = new _Tile["default"]({
                source: new _source7.TileWMS({
                  url: baseLayerConfig.url,
                  params: {
                    LAYERS: baseLayerConfig.params.layers,
                    VERSION: baseLayerConfig.params.version,
                    //FORMAT: baseLayerConfig.params.format,
                    TRANSPARENT: baseLayerConfig.params.transparent
                  },
                  gutter: baseLayerConfig.gutter,
                  attributions: baseLayerConfig.attribution + ' ' + OSM_REL_ATTRIBUTION
                }) //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')

              });
            }

            break;

          case 'image':
            var projection = new _Projection["default"]({
              code: 'image',
              units: 'pixels',
              extent: baseLayerConfig.extent ? baseLayerConfig.extent : [0, 0, 1920, 1080]
            });
            newBaselayer = new _layer.Image({
              source: new _source7.ImageStatic({
                url: baseLayerConfig.imageSrc,
                imageExtent: baseLayerConfig.extent ? baseLayerConfig.extent : [0, 0, 1920, 1080],
                projection: projection
              })
            }); // const self = this;
            // setTimeout(function(){
            //   self.mapController.map.getView().setCenter(ol.extent.getCenter(baseLayerConfig.extent ? baseLayerConfig.extent : [0, 0, 886, 435]));
            //   self.mapController.map.getView().setZoom(18);
            //   }, 3000);

            break;

          case 'geoimage':
            var arrSource = JSON.parse(baseLayerConfig.geoImageJson);
            arrSource.url = baseLayerConfig.imageSrc ? baseLayerConfig.imageSrc : arrSource.url;
            newBaselayer = new _layer.Image(jQuery.extend({
              source: new _GeoImage["default"](arrSource)
            }, layerOptions));
            break;

          case 'owm':
            newBaselayer = new _Tile["default"]({
              source: new _source7.XYZ({
                url: baseLayerConfig.url + baseLayerConfig.app_id + '/{z}/{x}/{y}?hash=' + baseLayerConfig.api_key,
                attributions: baseLayerConfig.attribution + ' ' + OSM_REL_ATTRIBUTION
              }) //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')

            });
            break;

          case 'group':
            var baseLayerGroup = [];

            for (var index in baseLayerConfig['layerGroup']) {
              if (baseLayerConfig['layerGroup'].hasOwnProperty(index)) {
                var element = this.createBaseLayer(null, baseLayerConfig['layerGroup'][index], sourceConfigs);
                var maxZoom = this.proxy.options.mapController.map.getView().getResolutionForZoom(baseLayerConfig['layerGroup'][index]['minZoom']);
                var minZoom = this.proxy.options.mapController.map.getView().getResolutionForZoom(baseLayerConfig['layerGroup'][index]['maxZoom']);
                element.setMinResolution(minZoom);
                element.setMaxResolution(maxZoom);
                baseLayerGroup.push(element);
              }
            }

            newBaselayer = new _layer.Group({
              layers: baseLayerGroup
            });
            break;

          default:
            console.warn('unsupported provider');
            break;
        }
      }

      if (baseLayerConfig['consentId']) {
        if (typeof klaro !== "undefined" && klaro.getManager && klaro.getManager()) {
          var manager = klaro.getManager();
          var watcher;

          if (newBaselayer instanceof _Tile["default"]) {
            var _source5 = newBaselayer.getSource();

            if (!manager.getConsent(baseLayerConfig['consentId'])) {
              newBaselayer.setSource(dummySource);
            }

            watcher = {
              update: function update(watcher, action, consentStatus) {
                if (consentStatus[baseLayerConfig['consentId']]) {
                  newBaselayer.setSource(_source5);
                } else {
                  newBaselayer.setSource(dummySource);
                }
              }
            };
          } else if (newBaselayer instanceof _layer.Group) {
            var layers = newBaselayer.getLayers();

            if (!manager.getConsent(baseLayerConfig['consentId'])) {
              newBaselayer.setLayers(new _Collection["default"]([new _Tile["default"]({
                source: dummySource
              })]));
            }

            watcher = {
              update: function update(watcher, action, consentStatus) {
                if (consentStatus[baseLayerConfig['consentId']]) {
                  newBaselayer.setLayers(layers);
                } else {
                  newBaselayer.setLayers(new _Collection["default"]([new _Tile["default"]({
                    source: dummySource
                  })]));
                }
              }
            };
          }

          manager.watch(watcher);
        } else if (typeof HofffConsentManager !== "undefined") {
          if (newBaselayer instanceof _Tile["default"]) {
            var _source6 = newBaselayer.getSource();

            HofffConsentManager.addEventListener('consent:accepted', function (event) {
              if (event.consentId == baseLayerConfig['consentId']) {
                newBaselayer.setSource(_source6);
              }
            });
            HofffConsentManager.addEventListener('consent:revoked', function (event) {
              if (event.consentId == baseLayerConfig['consentId']) {
                newBaselayer.setSource(dummySource);
              }
            });

            if (!HofffConsentManager.requiresConsent(baseLayerConfig['consentId'])) {
              newBaselayer.setSource(dummySource);
            }
          } else if (newBaselayer instanceof _layer.Group) {
            var _layers = newBaselayer.getLayers();

            HofffConsentManager.addEventListener('consent:accepted', function (event) {
              if (event.consentId == baseLayerConfig['consentId']) {
                newBaselayer.setLayers(_layers);
              }
            });
            HofffConsentManager.addEventListener('consent:revoked', function (event) {
              if (event.consentId == baseLayerConfig['consentId']) {
                newBaselayer.setLayers(new _Collection["default"]());
              }
            });

            if (!HofffConsentManager.requiresConsent(baseLayerConfig['consentId'])) {
              newBaselayer.setLayers(new _Collection["default"]());
            }
          }
        }
      }

      return newBaselayer;
    }
  }, {
    key: "filterLayersForBaselayer",
    value: function filterLayersForBaselayer(baselayerId) {
      var arrLayers = this.proxy.layerController.arrLayers;

      for (var id in arrLayers) {
        if (arrLayers.hasOwnProperty(id)) {
          var layer = arrLayers[id];

          if (layer) {
            var showLayer = false;

            if (layer.activeForBaselayers === "all" || layer.renderSpecial) {
              continue;
            } else {
              if (layer.activeForBaselayers) {
                showLayer = !!layer.activeForBaselayers.includes(baselayerId);
              }
            }

            if (showLayer) {
              arrLayers[id].display = true;
              this.proxy.layerController.showLayer(id);
            } else {
              arrLayers[id].display = false;
              this.proxy.layerController.hideLayer(id);
            }
          }
        }
      } // let starboard = this.proxy.options.mapController.controls.starboard;
      // if (this.proxy.options.mapController.data.layerswitcher.enable) {
      //   if (starboard && starboard.initialized) {
      //     if (!starboard.plugins.layerswitcher) {
      //       starboard.plugins.layerswitcher = new Layerswitcher(starboard);
      //     }
      //     starboard.plugins.layerswitcher.loadContent();
      //     // starboard.plugins.layerswitcher.activate();
      //   }
      // }

    }
  }, {
    key: "showBaseLayer",
    value: function showBaseLayer(baseLayerUid) {
      var self = this,
          layers,
          baselayer,
          addBaselayer,
          baseLayers,
          sourceConfigs = [],
          newBaselayer,
          layerOptions,
          i,
          view;
      var baseLayerConfig = this.arrBaselayers[baseLayerUid];

      if (this.proxy.layers_loaded) {
        this.filterLayersForBaselayer(baseLayerUid);
      } else {
        this.proxy.hook_layer_loaded.push(function () {
          self.filterLayersForBaselayer(baseLayerUid);
        });
      }

      if (typeof baseLayerConfig !== "undefined" && !baseLayerConfig.layer) {
        // create layer
        sourceConfigs.osm = _c4gMapsConfig.config.osm;
        sourceConfigs.stamen = _c4gMapsConfig.config.stamen;
        sourceConfigs.otm = _c4gMapsConfig.config.otm; //mapQuestSourceConfigs = c4g.maps.config.mapquest;

        sourceConfigs.mapbox = _c4gMapsConfig.config.mapbox;
        sourceConfigs.mapz = _c4gMapsConfig.config.mapz;
        sourceConfigs.klokan = _c4gMapsConfig.config.klokan;
        sourceConfigs.here = _c4gMapsConfig.config.here;
        sourceConfigs.thunderforest = _c4gMapsConfig.config.thunderforest; //newBaselayer = new TileLayer({
        //  source: new OSM()
        //});

        layerOptions = {};

        if (baseLayerConfig.attribution) {
          if (layerOptions.attributions) {
            layerOptions.attributions = layerOptions.attributions + ' ' + baseLayerConfig.attribution;
          } else {
            layerOptions.attributions = OSM_REL_ATTRIBUTION + ' ' + baseLayerConfig.attribution;
          }
        } else if (!layerOptions.attributions) {
          switch (baseLayerConfig.provider) {
            case 'osm':
              if (sourceConfigs.osm[baseLayerConfig.style]) {
                layerOptions.attributions = sourceConfigs.osm[baseLayerConfig.style].attributions;
              } else {
                layerOptions.attributions = OSM_REL_ATTRIBUTION;
              }

              break;

            case 'stamen':
              layerOptions.attributions = sourceConfigs.stamen[baseLayerConfig.style].attributions;
              break;

            case 'mapbox':
              layerOptions.attributions = sourceConfigs.mapbox[baseLayerConfig.mapbox_type].attributions;
              break;

            case 'mapz':
              layerOptions.url = baseLayerConfig.url;
              layerOptions.attributions = sourceConfigs.mapz.attributions;
              break;

            case 'otm':
              layerOptions.url = baseLayerConfig.url;
              layerOptions.attributions = sourceConfigs.otm.attributions;
              break;

            case 'klokan':
              layerOptions.attributions = sourceConfigs.klokan[baseLayerConfig.klokan_type].attributions;
              break;

            case 'here':
              layerOptions.attributions = sourceConfigs.here[baseLayerConfig.here_type].attributions;
              break;

            case 'thunder':
              layerOptions.attributions = sourceConfigs.thunderforest[baseLayerConfig.thunderforest_type].attributions;
              break;

            case 'con4gisIo':
              layerOptions.attributions = 'Mapservices via <a href="https://con4gis.io" target="_blank" rel="noopener">con4gis.io</a>. ' + OSM_REL_ATTRIBUTION;
              break;

            default:
              layerOptions.attributions = OSM_REL_ATTRIBUTION;
              break;
          }
        } //ToDo helper class for attributions
        //additional attribution


        if (this.mapController.data && this.mapController.data.attribution && this.mapController.data.attribution.additional) {
          if (layerOptions.attributions) {
            var additionalAttribution = this.mapController.data.attribution.additional;
            exists = false;

            for (i = 0; i < layerOptions.attributions.length; i += 1) {
              if (layerOptions.attributions[i] === additionalAttribution) {
                exists = true;
                break;
              }
            }

            if (!exists) {
              layerOptions.attributions = layerOptions.attributions + ' ' + additionalAttribution;
            }
          } else {
            layerOptions.attributions = this.mapController.data.attribution.additional;
          }
        } //ToDo type class for geosearch_engine
        //geosearch attribution


        if (this.mapController.data.geosearch) {
          if (this.mapController.data && this.mapController.data.attribution) {
            var geosearchAttribution = this.mapController.data.attribution.geosearch ? this.mapController.data.attribution.geosearch : "";
            var exists = false;

            if (!layerOptions.attributions) {
              layerOptions.attributions = [];
            }

            for (i = 0; i < layerOptions.attributions.length; i += 1) {
              if (layerOptions.attributions[i] === geosearchAttribution) {
                exists = true;
                break;
              }
            }

            if (!exists) {
              layerOptions.attributions = layerOptions.attributions + ' ' + geosearchAttribution;
            } else {
              layerOptions.attributions = geosearchAttribution;
            }

            var routerAttribution = this.mapController.data.attribution.router ? " - " + this.mapController.data.attribution.router : "";
            var exists = false;

            if (!layerOptions.attributions) {
              layerOptions.attributions = [];
            }

            for (i = 0; i < layerOptions.attributions.length; i += 1) {
              if (layerOptions.attributions[i] === routerAttribution) {
                exists = true;
                break;
              }
            }

            if (!exists) {
              layerOptions.attributions = layerOptions.attributions + ' ' + routerAttribution;
            } else {
              layerOptions.attributions = routerAttribution;
            }
          }
        }

        if (baseLayerConfig.sorting) {
          layerOptions.sort = baseLayerConfig.sorting;
        }

        if (baseLayerConfig.minZoom && baseLayerConfig.minZoom >= 0) {
          layerOptions.minZoom = baseLayerConfig.minZoom;
        }

        if (baseLayerConfig.maxZoom && baseLayerConfig.maxZoom >= 0) {
          layerOptions.maxZoom = baseLayerConfig.maxZoom;
        }

        newBaselayer = this.createBaseLayer(layerOptions, baseLayerConfig, sourceConfigs);

        if (baseLayerConfig.hasOverlays) {
          for (i = 0; i < baseLayerConfig.overlays.length; i++) {
            if (!baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id]) {
              baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id] = new _c4gOverlay.C4gOverlay(baseLayerConfig.overlays[i], this.mapController);
              baseLayerConfig.overlayController.arrOverlays[baseLayerConfig.overlays[i].id].layer = baseLayerConfig.overlayController.showOverlayLayer(baseLayerConfig.overlays[i].id);
            }
          }
        }

        this.arrBaselayers[baseLayerUid].layer = newBaselayer;
      } else if (typeof baseLayerConfig === "undefined") {
        console.log("config " + baseLayerUid + " not found");
        return;
      } // // deactivate old overlays


      if (this.proxy.activeBaselayerId && this.proxy.activeBaselayerId !== baseLayerUid) {
        var oldBaselayer = this.arrBaselayers[this.proxy.activeBaselayerId];

        if (oldBaselayer.overlayController && oldBaselayer.overlayController.arrOverlays && oldBaselayer.overlayController.arrOverlays.length > 0) {
          for (var key in oldBaselayer.overlayController.arrOverlays) {
            if (oldBaselayer.overlayController.arrOverlays.hasOwnProperty(key) && key !== "length") {
              var overlay = oldBaselayer.overlayController.arrOverlays[key];
              overlay.changeOpacity(0);
            }
          }
        }
      } // activate current overlays


      baselayer = this.arrBaselayers[baseLayerUid];

      if (baselayer.overlayController && baselayer.overlayController.arrOverlays && baselayer.overlayController.arrOverlays.length > 0) {
        for (var _key in baselayer.overlayController.arrOverlays) {
          if (baselayer.overlayController.arrOverlays.hasOwnProperty(_key) && _key !== "length") {
            var _overlay = baselayer.overlayController.arrOverlays[_key];

            _overlay.changeOpacity(_overlay.opacity);
          }
        }
      }

      layers = this.mapController.map.getLayers(); // secure

      if (layers.item(0).get('checkSum') === "baseMapsLayer") {
        baseLayers = layers.item(0).getLayers();

        if (typeof this.arrBaselayers[baseLayerUid] !== "undefined") {
          baselayer = this.arrBaselayers[baseLayerUid].layer;

          if (baselayer) {
            addBaselayer = true;
            baseLayers.forEach(function (element, index, array) {
              if (element && element === baselayer) {
                element.setVisible(true);
                addBaselayer = false;
              } else if (element) {
                element.setVisible(false);
              } else {
                addBaselayer = false;
              }
            }, this);

            if (addBaselayer) {
              baseLayers.push(baselayer);
            }
          }

          view = this.mapController.map.getView();
          var zoom = view.getZoom();
          var center = view.getCenter();

          if (baseLayerConfig.minZoom && baseLayerConfig.minZoom >= 0 || baseLayerConfig.maxZoom && baseLayerConfig.maxZoom >= 0) {
            if (baseLayerConfig.minZoom && view.getZoom() < baseLayerConfig.minZoom) {
              view.setZoom(baseLayerConfig.minZoom);
            } else if (baseLayerConfig.maxZoom && view.getZoom() > baseLayerConfig.maxZoom) {
              view.setZoom(baseLayerConfig.maxZoom);
            }

            var mapData = this.mapController.data; // if (mapData.zoomlevel || mapData.mouseposition) {

            view.setMinZoom(parseInt(baseLayerConfig.minZoom, 10) || 0);
            view.setMaxZoom(parseInt(baseLayerConfig.maxZoom, 10) || 19);
            this.mapController.map.setView(view); // }
          }
        }
      }

      if (typeof baseLayerConfig !== "undefined") {
        this.proxy.activeBaselayerId = baseLayerConfig.id;

        _c4gMapsUtils.utils.callHookFunctions(this.proxy.hook_baselayer_visibility, baseLayerConfig);
        /**
         * Cesium integration
         */


        if (typeof baseLayerConfig !== "undefined") {
          var mapData = this.mapController.data;

          if (mapData.cesium && mapData.cesium.enable && (mapData.cesium.always || baseLayerConfig.cesium)) {
            if (!this.ol3d) {
              this.ol3d = new _OLCesium["default"]({
                map: this.mapController.map,
                createSynchronizers: false
                /*,
                time() {
                const val = timeElt.value;
                if (ol3d.getCesiumScene().globe.enableLighting && val) {
                const d = new Date();
                d.setUTCHours(val);
                return Cesium.JulianDate.fromDate(d);
                }
                return Cesium.JulianDate.now();
                }*/

              });
            }
            /*const scene = ol3d.getCesiumScene();
            const terrainProvider = new Cesium.CesiumTerrainProvider({
                url: '//assets.agi.com/stk-terrain/world',
                requestVertexNormals: true
            });
            scene.terrainProvider = terrainProvider;*/


            this.ol3d.setEnabled(true);
            /*window['toggleTime'] = function() {
                scene.globe.enableLighting = !scene.globe.enableLighting;
                if (timeElt.style.display == 'none') {
                    timeElt.style.display = 'inline-block';
                } else {
                    timeElt.style.display = 'none';
                }
            };*/

            if (!jQuery(".c4g-control-container-top-left").hasClass("c4g-cesium-enabled")) {
              jQuery(".c4g-control-container-top-left").addClass("c4g-cesium-enabled");
            }
          } else {
            if (this.ol3d && this.ol3d.getEnabled()) {
              this.ol3d.setEnabled(false);
            }

            if (jQuery(".c4g-control-container-top-left").hasClass("c4g-cesium-enabled")) {
              jQuery(".c4g-control-container-top-left").removeClass("c4g-cesium-enabled");
            }
          }
        }
      }
    } // end of "showBaseLayer()"

  }]);
  return C4gBaselayerController;
}();

exports.C4gBaselayerController = C4gBaselayerController;

/***/ }),

/***/ "./Resources/public/js/c4g-baselayer.js":
/*!**********************************************!*\
  !*** ./Resources/public/js/c4g-baselayer.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.C4gBaselayer = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _c4gOverlayController = __webpack_require__(/*! ./c4g-overlay-controller */ "./Resources/public/js/c4g-overlay-controller.js");

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
var C4gBaselayer = function C4gBaselayer(baselayerArr, controller) {
  (0, _classCallCheck2["default"])(this, C4gBaselayer);
  this.id = baselayerArr['id'];
  this.pid = baselayerArr['pid'];
  this.name = baselayerArr['name'];
  this.display_name = baselayerArr['display_name'];
  this.provider = baselayerArr['provider'];
  this.osm_style = baselayerArr['osm_style'];
  this.osm_style_url1 = baselayerArr['osm_style_url1'];
  this.osm_style_url2 = baselayerArr['osm_style_url2'];
  this.osm_style_url3 = baselayerArr['osm_style_url3'];
  this.osm_style_url4 = baselayerArr['osm_style_url4'];
  this.osm_keyname = baselayerArr['osm_keyname'];
  this.mapbox_type = baselayerArr['mapbox_type'];
  this.bing_style = baselayerArr['bing_style'];
  this.style = baselayerArr['style'];
  this.attribution = baselayerArr['attribution'];
  this.params = baselayerArr['params'];
  this.wms_gutter = baselayerArr['wms_gutter'];
  this.minZoom = baselayerArr['minZoom'];
  this.maxZoom = baselayerArr['maxZoom'];
  this.protect_baselayer = baselayerArr['protect_baselayer'];
  this.permitted_groups = baselayerArr['permitted_groups'];
  this.api_key = baselayerArr['apiKey'] ? baselayerArr['apiKey'] : baselayerArr['api_key'];
  this.app_id = baselayerArr['app_id'];
  this.thunderforest_type = baselayerArr['thunderforest_type'];
  this.here_type = baselayerArr['here_type'];
  this.cesium = baselayerArr['cesium'];
  this.hide_in_be = baselayerArr['hide_in_be'];
  this.url = baselayerArr['url'];
  this.urls = baselayerArr['urls'];
  this.klokan_type = baselayerArr['klokan_type'];
  this.style_url = baselayerArr['style_url'];
  this.hasOverlays = baselayerArr['hasOverlays'];
  this.overlays = baselayerArr['overlays'];
  this.imageSrc = baselayerArr['image_src'];
  this.geoImageJson = baselayerArr['geoimage_json'];
  this.preview_image = baselayerArr['preview_image'];

  if (baselayerArr['layerGroup']) {
    var layerGroup = [];

    for (var index in baselayerArr['layerGroup']) {
      if (baselayerArr['layerGroup'].hasOwnProperty(index)) {
        layerGroup[index] = new C4gBaselayer(baselayerArr['layerGroup'][index]['entry']);
        layerGroup[index]['minZoom'] = baselayerArr['layerGroup'][index]['minZoom'];
        layerGroup[index]['maxZoom'] = baselayerArr['layerGroup'][index]['maxZoom'];
      }
    }

    this.layerGroup = layerGroup;
  }

  this.consentId = baselayerArr['consentId'] ? baselayerArr['consentId'] : false;
  this.overlayController = new _c4gOverlayController.C4gOverlayController(this);
  this.layer = false;
  this.controller = controller;
};

exports.C4gBaselayer = C4gBaselayer;

/***/ }),

/***/ "./Resources/public/js/c4g-layer-controller.js":
/*!*****************************************************!*\
  !*** ./Resources/public/js/c4g-layer-controller.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof3 = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.BetterLayerController = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _source = __webpack_require__(/*! ol/source */ "./node_modules/ol/source.js");

var _proj = __webpack_require__(/*! ol/proj */ "./node_modules/ol/proj.js");

var _OSMXML = _interopRequireDefault(__webpack_require__(/*! ol/format/OSMXML */ "./node_modules/ol/format/OSMXML.js"));

var _loadingstrategy = __webpack_require__(/*! ol/loadingstrategy */ "./node_modules/ol/loadingstrategy.js");

var _layer = __webpack_require__(/*! ol/layer */ "./node_modules/ol/layer.js");

var olFormats = _interopRequireWildcard(__webpack_require__(/*! ol/format */ "./node_modules/ol/format.js"));

var _proj2 = _interopRequireDefault(__webpack_require__(/*! proj4 */ "./node_modules/proj4/lib/index.js"));

var _proj3 = __webpack_require__(/*! ol/proj/proj4 */ "./node_modules/ol/proj/proj4.js");

var _Projection = _interopRequireDefault(__webpack_require__(/*! ol/proj/Projection */ "./node_modules/ol/proj/Projection.js"));

var _Collection = _interopRequireDefault(__webpack_require__(/*! ol/Collection */ "./node_modules/ol/Collection.js"));

var _c4gMapsUtils = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");

var _style = __webpack_require__(/*! ol/style */ "./node_modules/ol/style.js");

var _geom = __webpack_require__(/*! ol/geom */ "./node_modules/ol/geom.js");

var _Feature = _interopRequireDefault(__webpack_require__(/*! ol/Feature */ "./node_modules/ol/Feature.js"));

var olExtent = _interopRequireWildcard(__webpack_require__(/*! ol/extent */ "./node_modules/ol/extent.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
var osmtogeojson = __webpack_require__(/*! osmtogeojson */ "./node_modules/osmtogeojson/index.js");

var olFormat = jQuery.extend({
  OSMXML: _OSMXML["default"]
}, olFormats);

var BetterLayerController = /*#__PURE__*/function () {
  function BetterLayerController(proxy) {
    (0, _classCallCheck2["default"])(this, BetterLayerController);
    this.handleZoom = this.handleZoom.bind(this);
    var scope = this;
    this.proxy = proxy;
    this.loaders = [];
    this.controllers = {};
    this.arrLocstyles = [];
    this.objIds = {};
    this.currentZoomLevel = 0;
    this.extent = {
      maxX: -Infinity,
      maxY: -Infinity,
      minX: Infinity,
      minY: Infinity
    };
    this.mapController = proxy.options.mapController;
    this.vectorCollection = new _Collection["default"]();

    this.loaderFunction = function (extent, resolution, projection) {
      for (var i in scope.loaders) {
        if (scope.loaders.hasOwnProperty(i)) {
          (function () {
            var requestData = scope.loaders[i];

            if (!requestData.preventLoading) {
              if (!requestData.params && !requestData.url) {
                var responseFunc = function responseFunc(data) {
                  var features = [];
                  var layer = scope.objLayers.find(function (element) {
                    return element.id == requestData.layerId;
                  }) || {};

                  for (var _i = 0; _i < data.length; _i++) {
                    var contentData = data[_i];
                    var feature = scope.parseOwnData(contentData, layer);
                    features.push(feature);
                  }

                  scope.addFeatures(features, requestData.chain);
                  scope.mapController.setObjLayers(scope.arrLayers);
                };

                scope.performOwnData(requestData, {
                  "extent": extent,
                  "resolution": resolution,
                  "projection": projection
                }, responseFunc);
              } else {
                var layer = scope.objLayers.find(function (element) {
                  return element.id == requestData.layerId;
                }) || {};
                scope.performOvp({
                  "url": requestData.url,
                  "params": requestData.params,
                  "locstyleId": requestData.locstyle,
                  "chain": requestData.chain,
                  "layer": layer
                }, {
                  "extent": extent,
                  "resolution": resolution,
                  "projection": projection
                });
              }
            } else {
              requestData.arrExtents.push(extent);
            }
          })();
        }
      }
    };

    this.vectorSource = new _source.Vector({
      features: this.vectorCollection,
      loader: this.loaderFunction,
      strategy: _loadingstrategy.bbox
    });

    this.clusterStyleFunction = function (feature, resolution) {
      var size = false;
      var returnStyle = [];

      if (feature && feature.get && feature.get('features')) {
        var features = feature.get('features');
        size = features.length;
        feature = features[0];
      }

      if (feature && feature.getStyle()) {
        returnStyle = feature.getStyle();
      } else if (feature && feature.get && feature.get('locstyle')) {
        var _locstyle = feature.get('locstyle');

        if (scope.proxy.locationStyleController.arrLocStyles && scope.proxy.locationStyleController.arrLocStyles[_locstyle] && scope.proxy.locationStyleController.arrLocStyles[_locstyle].style) {
          var style = scope.proxy.locationStyleController.arrLocStyles[_locstyle].style;

          if (typeof style === "function") {
            returnStyle = style(feature, resolution, false);
          } else {
            returnStyle = scope.proxy.locationStyleController.arrLocStyles[_locstyle].style;
          }
        }
      }

      if (size > 1 && returnStyle && Array.isArray(returnStyle)) {
        var zIndex = 0;

        if (returnStyle[0] && returnStyle[0].setZIndex && feature.get('zindex')) {
          zIndex += feature.get('zindex');
        }

        if (returnStyle[0] && returnStyle[0].setZIndex) {
          var geometry = feature.getGeometry().clone().transform("EPSG:3857", "EPSG:4326").getCoordinates();
          zIndex += 100 - geometry[1];
          returnStyle[0].setZIndex(zIndex);
        }

        var iconOffset = [0, 0];
        var scale = 1;

        if (returnStyle[0]) {
          if (returnStyle[0].getImage() && returnStyle[0].getImage().getRadius && typeof returnStyle[0].getImage().getRadius === "function") {
            var radius = parseInt(returnStyle[0].getImage().getRadius(), 10);

            if (radius) {
              iconOffset = [-radius, radius];
            }
          } else if (returnStyle[0].getImage() && returnStyle[0].getImage().getAnchor && typeof returnStyle[0].getImage().getAnchor === "function") {
            iconOffset = returnStyle[0].getImage().getAnchor() || [0, 0];
          }

          if (returnStyle[0].getImage() && returnStyle[0].getImage().getScale() && returnStyle[0].getImage().getScale() !== 1) {
            scale = returnStyle[0].getImage().getScale();
            iconOffset = [iconOffset[0] * scale, iconOffset[1] * scale];
          }

          if (scope.proxy.mapData.cluster_fillcolor) {
            var countFeatures = scope.vectorCollection.getLength();
            var scaleForCount = (size / countFeatures - 1 / countFeatures) * 2;
            scale += scaleForCount;
          }
        }

        var fillcolor = _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(scope.proxy.mapData.cluster_fillcolor, {
          unit: '%',
          value: 70
        });

        var fontcolor = scope.proxy.mapData.cluster_fontcolor;

        if (feature.get('cluster_fillcolor')) {
          fillcolor = _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(feature.get('cluster_fillcolor'), {
            unit: '%',
            value: 70
          });
        }

        if (feature.get('cluster_fontcolor')) {
          fontcolor = feature.get('cluster_fontcolor');
        }

        fontcolor = _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(fontcolor);
        returnStyle.push(new _style.Style({
          text: new _style.Text({
            text: "â",
            font: "60px sans-serif",
            offsetX: -1 * iconOffset[0],
            offsetY: -1 * iconOffset[1],
            scale: scale,
            fill: new _style.Fill({
              color: fillcolor
            })
          }),
          zIndex: zIndex
        }));
        returnStyle.push(new _style.Style({
          text: new _style.Text({
            text: size.toString(),
            offsetX: -1 * iconOffset[0],
            offsetY: -1 * iconOffset[1] + 3,
            scale: scale,
            fill: new _style.Fill({
              color: fontcolor
            })
          }),
          zIndex: zIndex
        }));

        if (feature && feature.get("markLocstyle")) {
          var color = "#" + scope.proxy.mapData.starboard.colorZoomMarker;
          var markFill = new _style.Fill({
            color: color
          });

          var _radius;

          if (returnStyle[0].getImage() && returnStyle[0].getImage().getRadius && returnStyle[0].getImage().getRadius()) {
            _radius = parseInt(returnStyle[0].getImage().getRadius());
          } else if (returnStyle[0].getImage() && returnStyle[0].getImage().getIcon && returnStyle[0].getImage() && returnStyle[0].getImage().getIcon()) {
            _radius = returnStyle[0].getImage().getIcon().getSize();
            _radius = _radius[0];
          } else {
            _radius = 25;
          }

          var markStyle = new _style.Style({
            image: new _style.Circle({
              fill: markFill,
              radius: _radius
            }),
            fill: markFill
          });
          returnStyle.push(markStyle);
        }
      } else if (returnStyle && Array.isArray(returnStyle)) {
        var _zIndex = 0;

        if (returnStyle[0] && returnStyle[0].setZIndex && feature.get('zindex')) {
          _zIndex += feature.get('zindex');
        }

        if (returnStyle[0] && returnStyle[0].setZIndex) {
          var _geometry = feature.getGeometry().clone().transform("EPSG:3857", "EPSG:4326").getCoordinates();

          _geometry = typeof _geometry[0] == "number" ? _geometry : _geometry[0];
          _geometry = typeof _geometry[0] == "number" ? _geometry : _geometry[0];
          _zIndex += 100 - _geometry[1];
          returnStyle[0].setZIndex(_zIndex);
        }

        if (feature && feature.get("markLocstyle")) {
          var _color = "#" + scope.proxy.mapData.starboard.colorZoomMarker;

          var _markFill = new _style.Fill({
            color: _color
          });

          var _radius2;

          if (returnStyle[0].getImage() && returnStyle[0].getImage().getRadius && returnStyle[0].getImage().getRadius()) {
            _radius2 = parseInt(returnStyle[0].getImage().getRadius());
          } else if (returnStyle[0].getImage() && returnStyle[0].getImage().getIcon && returnStyle[0].getImage() && returnStyle[0].getImage().getIcon()) {
            _radius2 = returnStyle[0].getImage().getIcon().getSize();
            _radius2 = _radius2[0];
          } else {
            _radius2 = 25;
          }

          var _markStyle = new _style.Style({
            image: new _style.Circle({
              fill: _markFill,
              radius: _radius2
            }),
            fill: _markFill
          });

          returnStyle.push(_markStyle);
        }
      }

      return returnStyle;
    };

    if (this.mapController.data.cluster_all) {
      this.vectorSource = new _source.Cluster({
        source: this.vectorSource,
        geometryFunction: this.geometryFunction,
        distance: this.mapController.data.cluster_distance
      });
    }

    this.vectorLayer = new _layer.Vector({
      source: this.vectorSource,
      style: this.clusterStyleFunction
    });
    this.layerRequests = {};
    this.ovpKey = this.mapController.data.ovp_key;
    window.c4gMapsHooks.hook_map_zoom = window.c4gMapsHooks.hook_map_zoom || [];
    window.c4gMapsHooks.hook_map_zoom.push(this.handleZoom);
  }

  (0, _createClass2["default"])(BetterLayerController, [{
    key: "hide",
    value: function hide(id, hideElement, layerId) {
      var features, vectorLayer;

      if (Array.isArray(hideElement)) {
        features = hideElement;
      } else if (hideElement instanceof _layer.Vector) {
        vectorLayer = hideElement;
      } else {
        features = this.objIds[layerId];
      }

      if (features) {
        if (id >= 0) {
          var loader = this.loaders[id];

          if (loader) {
            this.loaders[id].preventLoading = true;

            if (loader.request) {
              loader.request.abort();
            }
          }
        }

        if (features.length > 0) {
          for (var featureId in features) {
            if (features.hasOwnProperty(featureId)) {
              this.vectorCollection.remove(features[featureId]);
            }
          }
        }
      } else if (vectorLayer) {
        this.mapController.map.removeLayer(vectorLayer);
      }
    }
  }, {
    key: "show",
    value: function show(id, hideElement, layerId) {
      var features, vectorLayer;

      if (Array.isArray(hideElement)) {
        features = hideElement;
        this.currentZoomLevel++;

        for (var i in features) {
          if (features.hasOwnProperty(i)) {
            if (this.mapController.filter) {
              features[i].set('zindex', this.currentZoomLevel);

              if (!!parseFloat(this.mapController.data.filterHandling)) {
                this.mapController.filter.hideFeatureMulti(features[i]);
              } else {
                this.mapController.filter.hideFeature(features[i]);
              }
            }
          }
        }
      } else if (hideElement instanceof _layer.Vector) {
        vectorLayer = hideElement;

        if (this.mapController.filter) {
          if (!!parseFloat(this.mapController.data.filterHandling)) {
            this.mapController.filter.filterLayerMulti(vectorLayer);
          } else {
            this.mapController.filter.filterLayer(vectorLayer);
          }
        }
      } else {
        features = this.objIds[layerId];
      }

      if (id >= 0 && this.loaders[id] && this.loaders[id].preventLoading) {
        this.loaders[id].preventLoading = false;

        for (var extentId in this.loaders[id].arrExtents) {
          if (this.loaders[id].arrExtents.hasOwnProperty(extentId) && this.vectorSource) {
            var extent = this.loaders[id].arrExtents[extentId];
            this.vectorSource.removeLoadedExtent(extent);
          }
        }

        this.loaders[id].arrExtents = [];
      }

      if (features) {
        this.vectorCollection.extend(features);
      } else if (vectorLayer) {
        this.mapController.map.addLayer(vectorLayer);
      }
    }
  }, {
    key: "zoomTo",
    value: function zoomTo(layer) {
      var extent;

      if (layer.childs && layer.childs.length) {
        for (var i in layer.childs) {
          if (layer.childs.hasOwnProperty(i)) {
            extent = this.getChildsExtent(extent, layer.childs[i]);
          }
        }
      }

      if (!layer.features || !layer.features.length) {
        extent = this.getExtentForLayer(extent, layer.id);
      } else {
        for (var _i2 in layer.features) {
          if (layer.features.hasOwnProperty(_i2)) {
            if (!extent) {
              extent = layer.features[_i2].getGeometry().clone().getExtent();
            } else {
              extent = olExtent.extend(extent, layer.features[_i2].getGeometry().clone().getExtent());
            }
          }
        }
      }

      if (!extent) {
        return;
      }

      var width = jQuery(".c4g-starboard-container").css('width');

      if (width) {
        width = width.split(".");
        width = Array.isArray(width) ? width[0] : width;
        width = parseInt(width) + 50;
      } else {
        width = 50;
      }

      var maxZoom = parseInt(this.proxy.mapData.starboard.maxZoom) || 22;
      this.mapController.map.getView().fit(extent, {
        padding: [50, width, 50, 50],
        duration: 500,
        maxZoom: maxZoom
      });
    }
  }, {
    key: "getChildsExtent",
    value: function getChildsExtent(extent, child) {
      if (child.childs && child.childs.length) {
        for (var i in child.childs) {
          if (child.childs.hasOwnProperty(i)) {
            extent = this.getChildsExtent(extent, child.childs[i]);
          }
        }
      }

      if (child.features && child.features.length) {
        for (var _i3 in child.features) {
          if (child.features.hasOwnProperty(_i3)) {
            if (!extent) {
              extent = child.features[_i3].getGeometry().clone().getExtent();
            } else {
              extent = olExtent.extend(extent, child.features[_i3].getGeometry().clone().getExtent());
            }
          }
        }
      } else {
        extent = this.getExtentForLayer(extent, child.id);
      }

      return extent;
    }
  }, {
    key: "getExtentForLayer",
    value: function getExtentForLayer(extent, layerId) {
      var features = this.objIds[layerId];

      if (features && features.length) {
        for (var i in features) {
          if (features.hasOwnProperty(i)) {
            if (!extent) {
              extent = features[i].getGeometry().getExtent();
            } else {
              extent = olExtent.extend(extent, features[i].getGeometry().getExtent());
            }
          }
        }
      }

      return extent;
    }
  }, {
    key: "setChildFeatureFlag",
    value: function setChildFeatureFlag(child, flag, value) {
      if (child.childs && child.childs.length) {
        for (var i in child.childs) {
          if (child.childs.hasOwnProperty(i)) {
            this.setChildFeatureFlag(child.childs[i], flag, value);
          }
        }
      }

      if (child.features && child.features.length) {
        for (var _i4 in child.features) {
          if (child.features.hasOwnProperty(_i4)) {
            child.features[_i4].set(flag, value);
          }
        }
      }
    }
  }, {
    key: "loadLayers",
    value: function loadLayers() {
      var self = this;

      if (this.proxy.mapId === 0) {
        window.setTimeout(function () {
          self.mapController.setLayersInitial([], []);
        }, 50);
        return false;
      }

      jQuery.ajax(this.proxy.api_layer_url, {
        dataType: this.mapController.data.jsonp ? "jsonp" : "json"
      }).done(function (data) {
        _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.hook_layer, data);

        self.objLayers = data.layer;
        var structure = [];
        var features = [];
        var tabStructures = [];

        for (var layerId in data.layer) {
          if (data.layer.hasOwnProperty(layerId)) {
            if (data.layer[layerId].type === "startab") {
              var newTab = [self.getStructureFromLayer(data.layer[layerId], tabStructures.length)];
              newTab.awesomeIcon = data.layer[layerId].awesomeicon;
              tabStructures.push(newTab);
            } else {
              var newChild = self.getStructureFromLayer(data.layer[layerId], structure.length);

              if (newChild.hide_in_starboard) {
                structure = newChild.childs ? structure.concat(newChild.childs) : structure;
                features = newChild.features ? features.concat(newChild.features) : features;
              } else {
                structure.push(newChild);
              }
            }
          }
        }

        var arrStates = [];

        for (var structId in structure) {
          if (structure.hasOwnProperty(structId)) {
            arrStates.push(self.getInitialStates(structure[structId]));

            if (features) {
              features = features.concat(self.getFeaturesFromStruct(structure[structId]));
            }
          }
        }

        var tabStates = [];

        for (var _structId in tabStructures) {
          if (tabStructures.hasOwnProperty(_structId)) {
            tabStates.push(self.getInitialStates(tabStructures[_structId][0]));
          }
        }

        self.arrLayers = structure;
        self.proxy.locationStyleController.loadLocationStyles(self.arrLocstyles, {
          "done": function done(styleData) {
            self.mapController.setLocStyles(styleData);
            window.setTimeout(function () {
              var getZoom = self.mapController.map.getView().getZoom();
              self.mapController.map.getView().setZoom(getZoom + 0.265); // self.mapController.map.getView().setZoom(getZoom);
            }, 200);
            window.setTimeout(function () {
              var getZoom = self.mapController.map.getView().getZoom();
              self.mapController.map.getView().setZoom(getZoom - 0.265);
            }, 201);
          }
        });
        self.vectorCollection.extend(features);
        self.mapController.map.addLayer(self.vectorLayer);
        self.mapController.setLayersInitial(self.arrLayers, arrStates);
        self.mapController.setTabLayers(tabStructures, tabStates);

        if (self.proxy.mapData.calc_extent === "LOCATIONS" || self.proxy.mapData.calc_extent === "CENTERLOCS") {
          if (self.extent && !(self.extent.maxX === Infinity || self.extent.maxX === -Infinity)) {
            var view = self.mapController.map.getView();
            var padding = [parseInt(self.mapController.props.mapData.min_gap, 10), parseInt(self.mapController.props.mapData.min_gap, 10), parseInt(self.mapController.props.mapData.min_gap, 10), parseInt(self.mapController.props.mapData.min_gap, 10)];
            var extent = [self.extent.minX, self.extent.minY, self.extent.maxX, self.extent.maxY];

            if (self.proxy.mapData.calc_extent === "CENTERLOCS") {
              // ssss
              view.fit(extent, {
                maxZoom: self.mapController.data.center.zoom
              });
            } else {
              view.fit(extent, {
                padding: padding
              });
            }
          }
        }

        _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.layer_loaded, self);

        return true;
      }).fail(function () {
        console.warn('An error occured while trying to load the layers...');
        return false;
      }).always(function () {// this.proxy.starboard.spinner.hide();
      });
    } // end of "loadLayer()"

  }, {
    key: "getInitialStates",
    value: function getInitialStates(layer) {
      var childStates = [];

      if (layer.childs && layer.childs.length > 0) {
        for (var childId in layer.childs) {
          if (layer.childs.hasOwnProperty(childId)) {
            childStates.push(this.getInitialStates(layer.childs[childId]));
          }
        }
      }

      var zoom = this.mapController.map.getView().getZoom();
      return {
        active: !layer.hide,
        collapsed: !parseFloat(layer.initial_opened),
        greyed: layer.zoom && !this.compareZoom(layer.zoom),
        id: layer.id,
        childStates: childStates
      };
    }
  }, {
    key: "getFeaturesFromStruct",
    value: function getFeaturesFromStruct(structure) {
      var features = [];
      var zoom = this.mapController.map.getView().getZoom();
      var greyed = structure.zoom && !this.compareZoom(structure.zoom);

      if (structure.childs && structure.childs.length > 0) {
        for (var structId in structure.childs) {
          if (structure.childs.hasOwnProperty(structId)) {
            features = features.concat(this.getFeaturesFromStruct(structure.childs[structId]));
          }
        }
      }

      if (structure.features && !greyed && !structure.hide) {
        features = features.concat(structure.features);
      }

      return features;
    }
  }, {
    key: "getStructureFromLayer",
    value: function getStructureFromLayer(layer, idChain) {
      var scope = this;
      var features = [];
      var childs = [];
      var hide = !!layer.hide;

      if (scope.mapController.data.layers && scope.mapController.data.layers.length > 0) {
        //hide or show according to permalink - overwrites layerService
        if (scope.mapController.data.layers.indexOf(layer.id) > -1) {
          //in permalink
          hide = false;
        } else {
          //not in permalink
          hide = true;
        }
      }

      if (layer.activeForBaselayers && layer.activeForBaselayers !== "all") {
        //initial handling for activate with baselayer
        var found = layer.activeForBaselayers.includes(scope.mapController.proxy.activeBaselayerId || scope.mapController.data.default_baselayer);
        hide = !found;
      }

      var vectorLayer = false;
      var loaderId = -1;
      var possibleLocstyle = layer.locstyle;

      if (layer.content && layer.content.length > 0) {
        features = this.getFeaturesForLayer(layer);
        possibleLocstyle = layer.locstyle || layer.content[0].locationStyle;
      }

      var checkLocstyle = this.arrLocstyles.findIndex(function (element) {
        return element === possibleLocstyle;
      });

      if (checkLocstyle === -1 && possibleLocstyle) {
        this.arrLocstyles.push(possibleLocstyle);
      }

      if (layer.async_content && layer.async_content != 0 && !layer.excludeFromSingleLayer) {
        var url = "";
        var locstyleId = 0;
        var params = "";
        var hoverLocation;
        var hoverStyle;
        var popup = false;
        var forceNodes = false;
        var showAddGeoms = false;
        var layerId = layer.id;

        if (layer.content && layer.content[0] && layer.content[0].data) {
          var data = layer.content[0].data;
          url = data.url;
          popup = data.popup;
          hoverLocation = data.hover_location;
          hoverStyle = data.hover_style;
          params = data.params;
          locstyleId = layer.locstyle;
        }

        if (layer.content && layer.content[0] && layer.content[0].settings) {
          forceNodes = layer.content[0].settings.forceNodes;
          showAddGeoms = !!layer.content[0].settings.showAdditionalGeometries;
        }

        checkLocstyle = this.arrLocstyles.findIndex(function (element) {
          return element === locstyleId;
        });

        if (checkLocstyle === -1 && locstyleId) {
          this.arrLocstyles.push(locstyleId);
        }

        loaderId = this.loaders.length;
        this.loaders.push({
          chain: idChain,
          url: url,
          preventLoading: hide,
          forceNodes: forceNodes,
          arrExtents: [],
          popup: popup,
          showAddGeoms: showAddGeoms,
          locstyleId: locstyleId,
          hover_location: hoverLocation,
          hover_style: hoverStyle,
          params: params,
          layerId: layerId
        });
      }

      if (layer.childs && layer.childs.length > 0) {
        for (var _layerId in layer.childs) {
          if (layer.childs.hasOwnProperty(_layerId)) {
            var childChain = idChain + "," + childs.length;
            var newChild = this.getStructureFromLayer(layer.childs[_layerId], childChain);

            if (newChild.hide_in_starboard) {
              childs = newChild.childs ? childs.concat(newChild.childs) : childs;
              features = newChild.features ? features.concat(newChild.features) : features;

              if (this.mapController.filter) {
                if (!!parseFloat(this.mapController.data.filterHandling)) {
                  this.mapController.filter.filterLayerMulti(vectorLayer);
                } else {
                  this.mapController.filter.filterLayer(vectorLayer);
                }
              }
            } else {
              childs.push(newChild);
            }
          }
        }
      } else if (layer.split_geojson) {
        var nameField = layer.geojson_attributes.split(',')[0];
        var zoomTo = !!layer.geojson_zoom;

        for (var featureId in features) {
          if (features.hasOwnProperty(featureId)) {
            childs.push({
              "features": [features[featureId]],
              "vectorLayer": false,
              "zoom": layer.zoom,
              "initial_opened": layer.initial_opened,
              "locstyle": possibleLocstyle,
              "zoomTo": zoomTo,
              "activateWithBl": layer.activeForBaselayers,
              "id": features[featureId].ol_uid,
              "name": features[featureId].get(nameField),
              "hide": hide,
              "childs": []
            });
          }
        }

        features = [];
      }

      if (layer.excludeFromSingleLayer) {
        var customStyleFunc = false;
        var vectorSource = new _source.Vector();
        var _popup = false;

        if (layer.async_content && layer.async_content !== "0") {
          var strategy = layer.type === "table" || layer.content && layer.content[0].settings.boundingBox ? _loadingstrategy.bbox : _loadingstrategy.all;
          vectorSource = new _source.Vector({
            "strategy": strategy
          });

          var _scope = this;

          var loaderFunc = function loaderFunc(extent, resolution, projection) {
            if (layer.content && layer.content[0].settings.boundingBox && (extent[0] === Infinity || extent[0] === -Infinity)) {
              vectorSource.removeLoadedExtent();
            } else if (layer.content && layer.content[0] && layer.content[0].data) {
              var content = layer.content[0];
              var _data = content.data;

              _scope.performOvp({
                "url": _data.url,
                "layerId": layer.id,
                "layer": layer,
                "vectorSource": vectorSource,
                "params": _data.params,
                "locstyleId": layer.locstyle
              }, {
                "extent": extent,
                "resolution": resolution,
                "projection": projection
              });
            } else if (layer.type === "table") {
              var responseFunc = function responseFunc(data) {
                var features = [];

                for (var i = 0; i < data.length; i++) {
                  var contentData = data[i];

                  var feature = _scope.parseOwnData(contentData, layer);

                  features.push(feature);
                }

                if (vectorSource instanceof _source.Cluster) {
                  vectorSource.getSource().addFeatures(features);
                } else {
                  vectorSource.addFeatures(features);
                }
              };

              _scope.performOwnData({
                "layerId": layer.id,
                "locstyleId": layer.locstyle
              }, {
                "extent": extent,
                "resolution": resolution,
                "projection": projection
              }, responseFunc);
            }
          };

          vectorSource.setLoader(loaderFunc);
        } else if (features && features.length) {
          vectorSource.addFeatures(features);
        } else {
          var content = layer.content[0];
          var featureProjection = "EPSG:3857";
          var dataProjection = "EPSG:4326";

          customStyleFunc = function customStyleFunc(feature, resolution) {
            var size = false;
            var returnStyle = [];

            if (feature && feature.get && feature.get('features')) {
              var _features = feature.get('features');

              size = _features.length;
              feature = _features[0];
            }

            if (layer && layer.locstyle && layer.locstyle !== "0") {
              if (scope.proxy.locationStyleController.arrLocStyles && scope.proxy.locationStyleController.arrLocStyles[layer.locstyle] && scope.proxy.locationStyleController.arrLocStyles[layer.locstyle].style) {
                var style = scope.proxy.locationStyleController.arrLocStyles[layer.locstyle].style;

                if (typeof style === "function") {
                  returnStyle = style(feature, resolution, false);
                } else {
                  returnStyle = scope.proxy.locationStyleController.arrLocStyles[locstyle].style;
                }
              }
            }

            if (size > 1 && returnStyle && Array.isArray(returnStyle)) {
              var iconOffset = [0, 0];

              if (returnStyle[0]) {
                if (returnStyle[0].getImage() && returnStyle[0].getImage().getRadius && typeof returnStyle[0].getImage().getRadius === "function") {
                  var radius = parseInt(returnStyle[0].getImage().getRadius(), 10);

                  if (radius) {
                    iconOffset = [-radius, radius];
                  }
                } else if (returnStyle[0].getImage() && returnStyle[0].getImage().getAnchor && typeof returnStyle[0].getImage().getAnchor === "function") {
                  iconOffset = returnStyle[0].getImage().getAnchor() || [0, 0];
                }
              }

              var fillcolor = _c4gMapsUtils.utils.getRgbaFromHexAndOpacity('4975A8', {
                unit: '%',
                value: 70
              });

              var fontcolor = '#FFFFFF';
              returnStyle.push(new _style.Style({
                text: new _style.Text({
                  text: "â",
                  font: "60px sans-serif",
                  offsetX: -1 * iconOffset[0],
                  offsetY: -1 * iconOffset[1],
                  fill: new _style.Fill({
                    color: fillcolor
                  })
                })
              }));
              returnStyle.push(new _style.Style({
                text: new _style.Text({
                  text: size.toString(),
                  offsetX: -1 * iconOffset[0],
                  offsetY: -1 * iconOffset[1] + 3,
                  fill: new _style.Fill({
                    color: fontcolor
                  })
                })
              }));
            }

            return returnStyle;
          };

          if (content) {
            if (content.data && content.data.properties && content.data.properties.projection && content.data.properties.projCode) {
              // if (!proj4(contentData.data.properties.projection)) {
              _proj2["default"].defs(content.data.properties.projection, content.data.properties.projCode);

              (0, _proj3.register)(_proj2["default"]); // }

              dataProjection = new _Projection["default"]({
                code: content.data.properties.projection
              });
            }

            var format = new olFormat[content['format']]({
              featureProjection: featureProjection,
              dataProjection: dataProjection
            });
            vectorSource = new _source.Vector({
              format: format,
              url: content.data.url
            });
            _popup = content.data && content.data.popup ? content.data.popup : false;
          }
        }

        if (layer.cluster) {
          vectorSource = new _source.Cluster({
            source: vectorSource,
            geometryFunction: this.geometryFunction,
            distance: parseInt(layer.cluster.distance, 10)
          });
        }

        vectorLayer = new _layer.Vector({
          source: vectorSource,
          style: customStyleFunc || this.clusterStyleFunction
        });
        vectorLayer.popup = _popup;
        scope.proxy.hook_locstyles_loaded.push(function (lostyleController) {
          vectorLayer.changed();
        });
        var greyed = layer.zoom && !this.compareZoom(layer.zoom);

        if (!hide && !greyed) {
          // vectorLayer.setZIndex(1);
          this.mapController.map.addLayer(vectorLayer);
        }

        features = false;
      }

      if (layer.hideInStarboard) {
        return {
          childs: childs,
          features: features,
          hide_in_starboard: true
        };
      } else {
        return {
          "features": features,
          "vectorLayer": vectorLayer,
          "loader": loaderId,
          "zoom": layer.zoom,
          "initial_opened": layer.initial_opened,
          "locstyle": possibleLocstyle,
          "activateWithBl": layer.activeForBaselayers,
          "id": layer.id,
          "name": layer.name,
          "tags": layer.tags,
          "hide": hide,
          "childs": childs,
          "addZoomTo": layer.addZoomTo
        };
      }
    }
  }, {
    key: "getFeaturesForLayer",
    value: function getFeaturesForLayer(layer) {
      var _this = this;

      var features = [];
      var featureProjection = "EPSG:3857";

      for (var contentId in layer.content) {
        if (layer.content.hasOwnProperty(contentId)) {
          var _ret = function () {
            var content = layer.content[contentId];
            var contentData = content.data;

            if (contentData) {
              var dataProjection = "EPSG:4326";

              if (contentData.properties && contentData.properties.projection && contentData.properties.projCode) {
                // if (!proj4(contentData.data.properties.projection)) {
                _proj2["default"].defs(contentData.properties.projection, contentData.properties.projCode);

                (0, _proj3.register)(_proj2["default"]); // }

                dataProjection = new _Projection["default"]({
                  code: contentData.properties.projection
                });
              }

              var format;

              if (layer.content[contentId].type === "urlData") {
                if (layer.type === "kml") {
                  return {
                    v: false
                  };
                } else if (layer.type === "gpx") {
                  return {
                    v: false
                  };
                }
              } else if (contentData.properties) {
                format = new olFormat[layer.content[contentId].type]({
                  featureProjection: featureProjection,
                  dataProjection: contentData.properties.projection
                });
              }

              var _locstyle2 = content.locationStyle || layer.locstyle;

              var checkLocstyle = _this.arrLocstyles.findIndex(function (element) {
                return element === _locstyle2;
              });

              if (checkLocstyle === -1 && _locstyle2) {
                _this.arrLocstyles.push(_locstyle2);
              }

              if (layer.content[contentId].type === "GeoJSON") {
                if (contentData.type === "FeatureCollection") {
                  for (var i in contentData.features) {
                    if (contentData.features.hasOwnProperty(i)) {
                      (function () {
                        var singleFeature = format.readFeature(contentData.features[i]);

                        if (!singleFeature.get('locstyle')) {
                          singleFeature.set('locstyle', _locstyle2);
                        } else {
                          checkLocstyle = _this.arrLocstyles.findIndex(function (element) {
                            return element === singleFeature.get('locstyle');
                          });

                          if (checkLocstyle === -1 && singleFeature.get('locstyle')) {
                            _this.arrLocstyles.push(singleFeature.get('locstyle'));
                          }
                        }

                        if (content.hover_location) {
                          singleFeature.set('hover_style', content.hover_style);
                          singleFeature.set('hover_location', content.hover_location);
                        }

                        if (content.loc_linkurl) {
                          singleFeature.set('loc_linkurl', content.loc_linkurl);
                        }

                        if (contentData.properties) {
                          if (!singleFeature.get('tooltip')) {
                            singleFeature.set('tooltip', contentData.properties.tooltip);
                          }

                          if (!singleFeature.get('label')) {
                            singleFeature.set('label', contentData.properties.label);
                          }

                          if (!singleFeature.get('popup')) {
                            singleFeature.set('popup', contentData.properties.popup);
                          }
                        }

                        features.push(singleFeature);
                      })();
                    }
                  }
                } else if (contentData && contentData.type) {
                  var feature = format.readFeature(contentData);
                  feature.set('locstyle', _locstyle2);
                  feature.set('noFilter', layer.noRealFilter);

                  if (content.hover_location) {
                    feature.set('hover_style', content.hover_style);
                    feature.set('hover_location', content.hover_location);
                  }

                  if (contentData.loc_linkurl) {
                    feature.set('loc_linkurl', contentData.loc_linkurl);
                  }

                  features.push(feature);
                }
              } else if (format) {
                fetch(contentData.url).then(function (response) {
                  response.text().then(function (text) {
                    var parser = new DOMParser();
                    var data = parser.parseFromString(text, "text/xml");
                    var tempFeatures = format.readFeature(data.childNodes[0].outerHTML);

                    for (var featId in tempFeatures) {
                      if (tempFeatures.hasOwnProperty(featId)) {
                        var _feature = tempFeatures[featId];

                        _feature.set('locstyle', _locstyle2);

                        if (contentData.hover_location) {
                          _feature.set('hover_style', contentData.hover_style);

                          _feature.set('hover_location', contentData.hover_location);
                        }

                        if (contentData.loc_linkurl) {
                          _feature.set('loc_linkurl', contentData.loc_linkurl);
                        }

                        features.push(_feature);
                      }
                    }
                  });
                });
              }
            }
          }();

          if ((0, _typeof2["default"])(_ret) === "object") return _ret.v;
        }
      }

      if (this.proxy.mapData.calc_extent === "LOCATIONS" || this.proxy.mapData.calc_extent === "CENTERLOCS") {
        for (var i in features) {
          if (features.hasOwnProperty(i)) {
            var extent = features[i].getGeometry().getExtent();

            if (this.extent.maxX < extent[2]) {
              this.extent.maxX = extent[2];
            }

            if (this.extent.maxY < extent[3]) {
              this.extent.maxY = extent[3];
            }

            if (this.extent.minX > extent[0]) {
              this.extent.minX = extent[0];
            }

            if (this.extent.minY > extent[1]) {
              this.extent.minY = extent[1];
            }
          }
        }
      }

      if (!this.objIds.hasOwnProperty(layer.id)) {
        if (!layer.split_geojson) {
          this.objIds[layer.id] = features;
        }

        return features;
      } else {
        return [];
      }
    }
  }, {
    key: "geometryFunction",
    value: function geometryFunction(feature) {
      var geometry = feature.getGeometry();

      if (geometry instanceof _geom.Point) {
        return geometry;
      } else {
        return null;
      }
    }
  }, {
    key: "performOvp",
    value: function performOvp(requestData, mapConf) {
      if (this.controllers[requestData.layerId]) {
        //abort request, if new exists
        this.controllers[requestData.layerId].abort();
        delete this.controllers[requestData.layerId];
      }

      var scope = this;
      this.controllers[requestData.layerId] = new AbortController();
      var signal = this.controllers[requestData.layerId].signal;
      var boundingArray = (0, _proj.transformExtent)(mapConf.extent, mapConf.projection, 'EPSG:4326');
      var strBoundingBox = "";
      var url = requestData.url;
      var params = decodeURIComponent(requestData.params);

      if (url) {
        if (url.indexOf('{key}') > -1) {
          url = url.replace('{key}', scope.ovpKey);
        }

        var bboxTag = params.indexOf('(bbox)') >= 0 ? /\(bbox\)/g : /\{{bbox\}}/g;
        url += url.includes("?") ? "&" : "?";

        if (params && params.substr(0, 1).trim() === "<") {
          strBoundingBox = '<bbox-query s="' + boundingArray[1] + '" n="' + boundingArray[3] + '" w="' + boundingArray[0] + '" e="' + boundingArray[2] + '"/>';
          url += 'data=' + encodeURIComponent(params.replace(bboxTag, strBoundingBox));
          fetch(url, {
            signal: signal
          }).then(function (response) {
            response.text().then(function (resp) {
              scope.parseOvpData(resp, requestData);
            })["catch"](function (error) {
              console.log(error.message);
            });
          })["catch"](function (error) {
            if (error.code && error.code !== 20) {
              console.log('Fetch Error :-S', error.message);
            }
          });
        } else {
          strBoundingBox = boundingArray[1] + ',' + boundingArray[0] + ',' + boundingArray[3] + ',' + boundingArray[2];
          url += 'data=' + encodeURIComponent(params.replace(bboxTag, strBoundingBox));
          fetch(url, {
            signal: signal
          }).then(function (response) {
            response.json().then(function (respo) {
              scope.parseOvpData(respo, requestData);
            })["catch"](function (error) {
              console.log(error.message);
            });
          })["catch"](function (error) {
            if (error.code && error.code !== 20) {
              console.log('Fetch Error :-S', error.message);
            }
          });
        }
      }
    }
  }, {
    key: "parseOvpData",
    value: function parseOvpData(response, requestData) {
      var layer = requestData.layer;
      var content = layer.content[0];
      var data = content.data;
      var features;

      if (typeof response === "string") {
        var text = response;

        if (!!!content.settings.showAdditionalGeometries) {
          var parser = new DOMParser();
          var xmlDoc = parser.parseFromString(response, "text/xml");
          var featuresDoc = xmlDoc.getElementsByTagName('way');

          for (var i = 0; i < featuresDoc.length; i++) {
            var singleFeature = featuresDoc[i];

            for (var j = 0; j < singleFeature.children.length; j++) {
              var nodeId = singleFeature.children[j].getAttribute('ref');
              var nodeElement = xmlDoc.getElementById(nodeId);

              while (nodeElement && nodeElement.children.length > 0) {
                nodeElement.removeChild(nodeElement.children[0]);
              }
            }
          }

          var serializer = new XMLSerializer();
          text = serializer.serializeToString(xmlDoc);
        }

        var format = new _OSMXML["default"]();

        try {
          features = format.readFeatures(text, {
            featureProjection: "EPSG:3857"
          });
        } catch (e) {
          console.warn('Can not read feature.');
        }
      } else if ((0, _typeof2["default"])(response) === "object") {
        var geojson = osmtogeojson(response);
        features = new olFormat.GeoJSON().readFeatures(geojson, {
          featureProjection: "EPSG:3857"
        });
      } else {
        return false;
      } // set popups for features


      if (data.popup) {
        for (var _i5 = 0; _i5 < features.length; _i5++) {
          var popup = {};

          for (var _j in data.popup) {
            if (data.popup.hasOwnProperty(_j)) {
              popup[_j] = data.popup[_j];
            }
          }

          features[_i5].set('popup', popup);

          features[_i5].set('noFilter', layer.noRealFilter);
        }
      }

      var requestDatas = layer.content && layer.content[0].settings ? layer.content[0].settings : {};

      for (var featureId in features) {
        if (features.hasOwnProperty(featureId)) {
          if (features[featureId].getGeometry().getType() === "Polygon") {
            if (requestDatas.forceNodes) {
              features[featureId].setGeometry(features[featureId].getGeometry().getInteriorPoint());
            }

            features[featureId].set('osm_type', 'way');
          } else if (features[featureId].getGeometry().getType() === "MultiPolygon") {
            if (requestDatas.forceNodes) {
              features[featureId].setGeometry(features[featureId].getGeometry()[0].getInteriorPoint());
            }

            features[featureId].set('osm_type', 'relation');
          } else if (features[featureId].getGeometry().getType() === "Point") {
            features[featureId].set('osm_type', 'node');
          }

          if (this.mapController.filter) {
            if (!!parseFloat(this.mapController.data.filterHandling)) {
              this.mapController.filter.hideFeatureMulti(features[featureId]);
            } else {
              this.mapController.filter.hideFeature(features[featureId]);
            }
          }

          features[featureId].set('locstyle', layer.locstyle);

          if (content.hover_location) {
            features[featureId].set('hover_style', content.hover_style);
            features[featureId].set('hover_location', content.hover_location);
          }

          if (content.loc_linkurl) {
            features[featureId].set('loc_linkurl', content.loc_linkurl);
          }

          if (content.cluster_fillcolor && content.cluster_fontcolor) {
            features[featureId].set('cluster_fillcolor', content.cluster_fillcolor);
            features[featureId].set('cluster_fontcolor', content.cluster_fontcolor);
          }
        }
      }

      if (requestData.chain || requestData.chain > -1) {
        this.addFeatures(features, requestData.chain);
        this.mapController.setObjLayers(this.arrLayers);
      } else {
        if (requestData.vectorSource instanceof _source.Cluster) {
          requestData.vectorSource.getSource().addFeatures(features);
        } else {
          requestData.vectorSource.addFeatures(features);
        }
      }
    }
  }, {
    key: "performOwnData",
    value: function performOwnData(requestData, mapConf, responseFunc) {
      var scope = this;

      if (this.controllers[requestData.layerId]) {
        //abort request, if new exists
        this.controllers[requestData.layerId].abort();
        delete this.controllers[requestData.layerId];
      }

      if (mapConf.extent[0] === Infinity || mapConf.extent[0] === -Infinity || mapConf.extent[1] === Infinity || mapConf.extent[1] === -Infinity || mapConf.extent[2] === Infinity || mapConf.extent[2] === -Infinity || mapConf.extent[3] === Infinity || mapConf.extent[3] === -Infinity) {
        return false;
      } // @TodelÃ¼ implement handling for other projections


      var boundingArray = (0, _proj.transformExtent)(mapConf.extent, mapConf.projection, 'EPSG:4326');
      var strBoundingBox = boundingArray[0] + ',' + boundingArray[1] + ';' + boundingArray[2] + ',' + boundingArray[3];
      var url = scope.proxy.api_layercontentdata_url + '/' + requestData.layerId + '/' + strBoundingBox;
      this.controllers[requestData.layerId] = new AbortController();
      var signal = this.controllers[requestData.layerId].signal;
      fetch(url, {
        signal: signal
      }).then(function (response) {
        response.json().then(responseFunc)["catch"](function (error) {
          console.log(error.message);
        });
      })["catch"](function (error) {
        if (error.code && error.code !== 20) {
          console.log('Fetch Error :-S', error.message);
        }
      });
    }
  }, {
    key: "parseOwnData",
    value: function parseOwnData(contentData, layer) {
      var resultCoordinate = (0, _proj.transform)([parseFloat(contentData['geox']), parseFloat(contentData['geoy'])], 'EPSG:4326', 'EPSG:3857');
      var point = new _geom.Point(resultCoordinate);
      var contentFeature = new _Feature["default"](point);
      contentFeature.setId(contentData.id);
      contentFeature.set('noFilter', layer.noRealFilter);
      contentFeature.set('hover_location', layer.hover_location);
      contentFeature.set('hover_style', layer.hover_style);
      var popup = contentData['popup'] ? contentData['popup'] : jQuery.extend({}, layer.popup);

      if (popup && popup.content && popup.content.search && popup.content.search('itemId')) {
        popup.content = popup.content.replace('itemId', contentData['id']);
      }

      if (contentData['label']) {
        contentFeature.set('label', contentData['label']);
      }

      if (contentData['tooltip']) {
        contentFeature.set('tooltip', contentData['tooltip']);
      }

      if (contentData.loc_linkurl) {
        contentFeature.set('loc_linkurl', contentData.loc_linkurl);
      }

      contentFeature.set('popup', popup);
      contentFeature.set('zoom_onclick', layer.zoom_onclick);
      contentFeature.set('tid', contentData['id']);
      var locstyle = contentData['locstyle'] || layer.locstyle;
      contentFeature.set('locstyle', locstyle);

      if (this.mapController.filter) {
        if (!!parseFloat(this.mapController.data.filterHandling)) {
          this.mapController.filter.hideFeatureMulti(contentFeature);
        } else {
          this.mapController.filter.hideFeature(contentFeature);
        }
      }

      return contentFeature;
    }
  }, {
    key: "addFeatures",
    value: function addFeatures(features, chain) {
      var scope = this;
      var addedFeatures;
      var layer;
      var oldLength = scope.vectorCollection.getLength(); //necesarry to distinct redundant features

      scope.vectorCollection.extend(features);
      addedFeatures = scope.vectorCollection.getArray().slice(oldLength);

      if (typeof chain === "string") {
        var arrChain = chain.split(',');
        var i = 1;
        layer = scope.arrLayers[arrChain[0]];

        while (chain[i]) {
          layer = layer.childs[arrChain[i]];
          i++;
        }
      } else {
        layer = scope.arrLayers[chain];
      }

      if (layer.features) {
        layer.features = layer.features.concat(addedFeatures);
      } else if (layer.vectorLayer) {
        var source = layer.vectorLayer.getSource().getSource();
        source.addFeatures(features);
      }
    }
  }, {
    key: "handleZoom",
    value: function handleZoom(proxy) {
      var mapController = proxy.options.mapController;
      var childStates = mapController.state.arrLayerStates;
      var objLayers = mapController.state.objLayers;
      var zoom = mapController.map.getView().getZoom();

      for (var id in childStates) {
        if (childStates.hasOwnProperty(id) && objLayers[id]) {
          childStates[id] = this.handleZoomChilds(zoom, childStates[id], objLayers[id]);
        }
      }

      this.mapController ? this.mapController.setLayerStates(childStates) : '';
    }
  }, {
    key: "handleZoomChilds",
    value: function handleZoomChilds(zoom, childState, child) {
      for (var id in childState.childStates) {
        if (childState.childStates.hasOwnProperty(id)) {
          childState.childStates[id] = this.handleZoomChilds(zoom, childState.childStates[id], child.childs[id]);
        }
      }

      var greyed = child.zoom && !this.compareZoom(child.zoom);

      if (childState['greyed'] !== greyed) {
        if (greyed || !!child.hide) {
          this.hide(child.loader, child.features || child.vectorLayer);
        } else {
          this.show(child.loader, child.features || child.vectorLayer);
        }
      }

      childState['greyed'] = greyed;
      return childState;
    }
  }, {
    key: "compareZoom",
    value: function compareZoom(layerZoom) {
      var zoom = this.mapController.map.getView().getZoom();
      return parseInt(layerZoom.min, 10) < zoom && parseInt(layerZoom.max, 10) > zoom;
    }
  }]);
  return BetterLayerController;
}();

exports.BetterLayerController = BetterLayerController;

/***/ }),

/***/ "./Resources/public/js/c4g-locationstyle-controller.js":
/*!*************************************************************!*\
  !*** ./Resources/public/js/c4g-locationstyle-controller.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.C4gLocationStyleController = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _c4gLocationstyle = __webpack_require__(/*! ./c4g-locationstyle */ "./Resources/public/js/c4g-locationstyle.js");

var _c4gMapsUtils = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
var C4gLocationStyleController = /*#__PURE__*/function () {
  function C4gLocationStyleController(proxy) {
    (0, _classCallCheck2["default"])(this, C4gLocationStyleController);
    this.proxy = proxy;
    this.mapController = proxy.options.mapController;
    this.arrLocStyles = {};
    this.resizeOnZoom = proxy.options.mapController.data.resizeLocstyles;
  }

  (0, _createClass2["default"])(C4gLocationStyleController, [{
    key: "loadLocationStyles",
    value: function loadLocationStyles(arrIds, opt_options) {
      var options,
          complete = {},
          success = {},
          self = this,
          count = 1,
          makeAjax;

      if (opt_options && (0, _typeof2["default"])(opt_options) === "object") {
        options = opt_options;
      } else {
        options = {};
      } // this.proxy.options.mapController.spinner.show();


      makeAjax = function makeAjax(styleIds, index) {
        if (index) {
          complete[index] = false;
          success[index] = false;
        } // get locationstyles over API


        jQuery.ajax({
          dataType: self.proxy.options.mapController.data.jsonp ? "jsonp" : "json",
          url: self.proxy.api_locstyle_url,
          data: {
            ids: styleIds
          }
        }).done(function (data) {
          var i,
              styleData,
              successful = true;

          if (data.length > 0) {
            for (i = 0; i < data.length; i += 1) {
              styleData = data[i];
              var style = new _c4gLocationstyle.C4gLocationStyle(styleData, self);
              style.style = style.getStyleFunction(styleData);
              self.arrLocStyles[styleData.id] = style;
            }

            self.proxy.layerController.vectorLayer.setStyle(self.proxy.layerController.clusterStyleFunction);
          }

          if (index) {
            success[index] = true;

            for (var key in success) {
              if (success.hasOwnProperty(key)) {
                if (!success[key]) {
                  successful = false;
                  break;
                }
              }
            }
          }

          if (options.done && typeof options.done === "function" && (index ? successful : true)) {
            options.done(self); // call hooks

            _c4gMapsUtils.utils.callHookFunctions(self.proxy.hook_locstyles_loaded, {
              locstyleController: self
            });
          }

          self.proxy.layerController.vectorLayer.changed();
        }).always(function (jXhr, strStatus) {
          var completed = true;

          if (index) {
            complete[index] = true;

            for (var key in complete) {
              if (complete.hasOwnProperty(key)) {
                if (!complete[key]) {
                  completed = false;
                  break;
                }
              }
            }
          }

          if (options.always && typeof options.always === "function" && (index ? completed : true)) {
            options.always();
          } // if (!jQuery(self.proxy.options.mapController.mapsControls.spinner.element).hasClass(cssConstants.HIDE)) {
          //   self.proxy.options.mapController.spinner.hide();
          // }

        }).fail(function (jqXHR, textStatus, errorThrown) {
          console.warn(errorThrown);
        });
      }; // split arrIds if it's too long


      if (arrIds.length > 100) {
        var n = 100;

        while (arrIds.length > 0) {
          makeAjax(arrIds.splice(0, n), count);
          count++;
        }
      } else if (arrIds.length > 0) {
        makeAjax(arrIds);
      } //});

    } // end of "loadLocationStyles()"

  }]);
  return C4gLocationStyleController;
}();

exports.C4gLocationStyleController = C4gLocationStyleController;

/***/ }),

/***/ "./Resources/public/js/c4g-locationstyle.js":
/*!**************************************************!*\
  !*** ./Resources/public/js/c4g-locationstyle.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.C4gLocationStyle = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _c4gMapsUtils = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");

var _style = __webpack_require__(/*! ol/style */ "./node_modules/ol/style.js");

var _geom = __webpack_require__(/*! ol/geom */ "./node_modules/ol/geom.js");

var _Circle = _interopRequireDefault(__webpack_require__(/*! ol/style/Circle */ "./node_modules/ol/style/Circle.js"));

var _Photo = _interopRequireDefault(__webpack_require__(/*! ol-ext/style/Photo */ "./node_modules/ol-ext/style/Photo.js"));

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
var C4gLocationStyle = /*#__PURE__*/function () {
  function C4gLocationStyle(locStyleArr, controller) {
    (0, _classCallCheck2["default"])(this, C4gLocationStyle);
    this.id = locStyleArr['id']; // this.style     = this.getStyleFunction(locStyleArr);

    this.editor = this.getStyleEditorConfig(locStyleArr);
    this.name = locStyleArr['name'];
    this.tooltip = locStyleArr['tooltip'];
    this.label = locStyleArr['label'];
    this.minzoom = locStyleArr['minzoom'];
    this.maxzoom = locStyleArr['maxzoom'];
    this.fnStyleFunction = locStyleArr['style_function_js'];

    if (this.fnStyleFunction && typeof this.fnStyleFunction === "string") {
      this.fnStyleFunction = this.fnStyleFunction.replace(/ol.Style./gi, "window.olStyle.");
      this.fnStyleFunction = this.fnStyleFunction.replace(/ol.Geom./gi, "window.olStyle.");

      if (!window.olStyle) {
        window.olStyle = {
          Stroke: _style.Stroke,
          Style: _style.Style,
          Icon: _style.Icon,
          Fill: _style.Fill,
          Point: _geom.Point,
          CircleStyle: _Circle["default"],
          Circle: _geom.Circle,
          Text: _style.Text
        };
      }
    }

    this.controller = controller;
    this.locStyleArr = locStyleArr;
  }

  (0, _createClass2["default"])(C4gLocationStyle, [{
    key: "getStyleFunction",
    value: function getStyleFunction(styleData) {
      var self, styleFunction, imageStyle, strokeStyle, fillStyle, textStyle, textStyleOutline, backgroundFill, backgroundStroke;
      self = this; // general

      strokeStyle = new _style.Stroke({
        color: _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(styleData.strokecolor[0], styleData.strokecolor[1]),
        width: parseInt(styleData.strokewidth.value ? styleData.strokewidth.value : 2, 10)
      });
      fillStyle = new _style.Fill({
        color: _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(styleData.fillcolor[0], styleData.fillcolor[1])
      });
      imageStyle = this.createImageStyle(styleData, strokeStyle, fillStyle); // build function

      styleFunction = function styleFunction(feature, projection, getId) {
        // if (self.fnStyleFunction) {
        //   return Function("feature","data","map",self.fnStyleFunction)(feature);
        // }
        var stylesArray, label;
        var mapZoom = self.controller.mapController.map.getView().getZoom();

        if (parseInt(self.locStyleArr.maxzoom, 10) && parseInt(self.locStyleArr.maxzoom, 10) < mapZoom) {
          return null;
        }

        if (parseInt(self.locStyleArr.minzoom, 10) && parseInt(self.locStyleArr.minzoom, 10) > mapZoom) {
          return null;
        }

        if (getId) {
          return styleData.id;
        } // check if this is a feature.styleFunction


        if (!feature) {
          projection = feature;
          feature = this;
        }

        stylesArray = [];

        if (feature && typeof feature.get === 'function' && feature.get('label')) {
          label = feature.get('label');
        } else if (styleData.label) {
          label = styleData.label;
        } else {
          label = false;
        }

        var defaultColor = self.controller.mapController.data.default_label_color; // label

        var newScale = self.getScaleFactor(styleData);

        if (label) {
          if (styleData.label_outl_color && styleData.label_outl_width.value) {
            textStyleOutline = new _style.Stroke({
              color: _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(styleData.label_outl_color || defaultColor, {
                unit: '%',
                value: 100
              }),
              width: parseInt(styleData.label_outl_width.value, 10)
            });

            if (styleData.label_outl_box === "1") {
              backgroundFill = new _style.Fill({
                color: _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(styleData.label_outl_color || defaultColor, {
                  unit: '%',
                  value: 100
                })
              });
            }
          }

          if (!styleData.label_offset) {
            styleData.label_offset = [0, 0, "px"];
          }

          var fontSize = styleData.font_size && (0, _typeof2["default"])(styleData.font_size) === "object" && styleData.font_size !== null ? styleData.font_size.value : styleData.font_size ? styleData.font_size : '13';
          var textOptions = {
            text: label,
            font: (styleData.font_weight || 'normal') + ' ' + (styleData.font_style || 'normal') + ' ' + fontSize + 'px ' + (styleData.font_family || 'sans-serif'),
            // scale: parseInt(styleData.font_size || 0, 10) || undefined,
            offsetX: parseInt(styleData.label_offset[0] || 0, 10),
            offsetY: parseInt(styleData.label_offset[1] || 0, 10),
            textAlign: styleData.label_align_hor,
            textBaseline: styleData.label_align_ver,
            scale: newScale,
            fill: new _style.Fill({
              color: _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(styleData.font_color[0] || defaultColor, styleData.font_color[1])
            }),
            stroke: textStyleOutline
          };

          if (styleData.label_outl_box === "1") {
            textOptions.backgroundFill = backgroundFill;
            textOptions.backgroundStroke = textStyleOutline;
          }

          textStyle = new _style.Text(textOptions);
        } // check if image has to be resized


        if (imageStyle && newScale !== 0.0 && imageStyle.setScale) {
          imageStyle.setScale(newScale);
        } // check if label should be displayed


        var showLabelForZoom = false;
        var labelMinZoom = parseInt(self.locStyleArr.label_minzoom, 10);
        var labelMaxZoom = parseInt(self.locStyleArr.label_maxzoom, 10);

        if (mapZoom >= labelMinZoom && (labelMaxZoom >= mapZoom || labelMaxZoom === 0)) {
          showLabelForZoom = true;
        } // create style-object


        if (label && showLabelForZoom) {
          var zIndex;

          if (feature && feature.get && typeof feature.get === "function" && feature.get('zIndex')) {
            zIndex = feature.get('zIndex');
          }

          stylesArray.push(new _style.Style({
            image: imageStyle,
            text: textStyle,
            stroke: strokeStyle,
            fill: fillStyle,
            zIndex: zIndex
          }));
        } else {
          stylesArray.push(new _style.Style({
            image: imageStyle,
            stroke: strokeStyle,
            fill: fillStyle
          }));
        } // add line-arrows


        if (styleData.line_arrows && feature && typeof feature.getGeometry === 'function' && !(feature.getGeometry().getType() === 'Point') && typeof feature.getGeometry().forEachSegment === 'function') {
          var arrowStyles = self.createLineArrowStyles(styleData, feature, strokeStyle, fillStyle);
          stylesArray = stylesArray.concat(arrowStyles);
        }

        return stylesArray;
      };

      if (this.fnStyleFunction) {
        styleFunction = Function("feature", "data", "map", this.fnStyleFunction);
      }

      return styleFunction;
    } // end of "getStyleFunction()"

    /**
     * Determines the current scaling factor according to the current zoomlevel and the profile/locstyle settings.
     * @param styleData
     */

  }, {
    key: "getScaleFactor",
    value: function getScaleFactor(styleData) {
      var newScale = 0.0;
      var initialZoom, scaleFactor, factor, minScale, maxScale;
      var currentZoom = this.controller.mapController.map.getView().getZoom();
      var initialScale = "cust_icon_svgphoto".includes(styleData.styletype) ? parseFloat(styleData.icon_scale) : 1; // locstyle setting overwrites profile setting

      if (styleData.icon_resize_zoom) {
        initialZoom = parseInt(styleData.icon_resize_src_zoom, 10);
        scaleFactor = parseFloat(styleData.icon_resize_scale_factor);
        minScale = parseFloat(styleData.icon_resize_min_scale);
        maxScale = parseFloat(styleData.icon_resize_max_scale);
      } else if (this.controller.resizeOnZoom) {
        initialZoom = parseInt(this.controller.resizeOnZoom.srcZoom, 10);
        scaleFactor = parseFloat(this.controller.resizeOnZoom.scaleFactor);
        minScale = parseFloat(this.controller.resizeOnZoom.minScale);
        maxScale = parseFloat(this.controller.resizeOnZoom.maxScale);
      }

      if (currentZoom > initialZoom) {
        // resize image bigger
        factor = currentZoom - initialZoom;
        var scaleSummand = scaleFactor * factor;
        newScale = initialScale + scaleSummand;

        if (newScale > maxScale) {
          newScale = maxScale;
        }
      } else if (currentZoom < initialZoom) {
        // resize image smaller
        factor = initialZoom - currentZoom;

        var _scaleSummand = scaleFactor * factor;

        newScale = initialScale - _scaleSummand;

        if (newScale <= minScale) {
          newScale = minScale;
        }
      } else {
        // resize to initial size
        newScale = initialScale;
      }

      return newScale;
    }
  }, {
    key: "createImageStyle",
    value: function createImageStyle(styleData, strokeStyle, fillStyle) {
      var imageStyle; // image

      switch (styleData.styletype) {
        case 'square':
          imageStyle = new _style.RegularShape({
            fill: fillStyle,
            stroke: strokeStyle,
            points: 4,
            radius: styleData.radius.value || 10,
            angle: Math.PI / 4
          });
          break;

        case 'star':
          imageStyle = new _style.RegularShape({
            fill: fillStyle,
            stroke: strokeStyle,
            radius1: styleData.radius.value || 10,
            radius2: styleData.radius.value ? Math.floor(styleData.radius.value * 0.5) : 4,
            points: 5,
            angle: 0
          });
          break;

        case 'x':
          imageStyle = new _style.RegularShape({
            fill: fillStyle,
            stroke: strokeStyle,
            points: 4,
            radius: styleData.radius.value || 10,
            radius2: 0,
            angle: Math.PI / 4
          });
          break;

        case 'cross':
          imageStyle = new _style.RegularShape({
            fill: fillStyle,
            stroke: strokeStyle,
            points: 4,
            radius: styleData.radius.value || 10,
            radius2: 0,
            angle: 0
          });
          break;

        case 'triangle':
          imageStyle = new _style.RegularShape({
            fill: fillStyle,
            stroke: strokeStyle,
            points: 3,
            radius: styleData.radius.value || 10,
            rotation: Math.PI / 4,
            angle: 0
          });
          break;

        case 'ol_icon': // fallthrough

        case 'cust_icon':
          if (styleData.icon_src) {
            var width, height, offsetX, offsetY;
            width = styleData.icon_size[0] * styleData.icon_scale;
            height = styleData.icon_size[1] * styleData.icon_scale;
            offsetX = styleData.icon_offset[0] * styleData.icon_scale;
            offsetY = styleData.icon_offset[1] * styleData.icon_scale;
            var anchorX = 1 / (parseInt(width) / (parseInt(offsetX) * -1));
            var anchorY = 1 / (parseInt(height) / (parseInt(offsetY) * -1));
            imageStyle = new _style.Icon({
              anchor: [anchorX, anchorY],
              opacity: parseFloat(styleData.icon_opacity.value) / 100,
              src: styleData.icon_src,
              scale: parseFloat(styleData.icon_scale),
              size: [parseInt(styleData.icon_size[0], 10), parseInt(styleData.icon_size[1], 10)]
            });
          }

          break;

        case 'cust_icon_svg':
          if (styleData.svgSrc && styleData.icon_scale && styleData.icon_size) {
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext("2d");

            var _width, _height, _offsetX, _offsetY;

            _width = styleData.icon_size[0] * styleData.icon_scale;
            _height = styleData.icon_size[1] * styleData.icon_scale;
            _offsetX = styleData.icon_offset[0] * styleData.icon_scale;
            _offsetY = styleData.icon_offset[1] * styleData.icon_scale;

            var _anchorX = 1 / (parseInt(_width) / (parseInt(_offsetX) * -1));

            var _anchorY = 1 / (parseInt(_height) / (parseInt(_offsetY) * -1));

            canvas.width = _width;
            canvas.height = _height;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            var img = new Image();
            img.src = styleData.svgSrc;

            img.onload = function () {
              ctx.drawImage(img, 0, 0, _width, _height);
            };

            imageStyle = new _style.Icon({
              anchor: [_anchorX, _anchorY],
              img: canvas,
              imgSize: [canvas.width, canvas.height]
            });
          }

          break;

        case 'photo':
          imageStyle = new _Photo["default"]({
            kind: styleData.photoKind,
            crop: true,
            opacity: parseFloat(styleData.icon_opacity.value, 10) / 100,
            radius: parseFloat(styleData.radius.value, 10),
            shadow: true,
            stroke: strokeStyle,
            src: styleData.icon_src
          });
          break;

        case 'point':
          imageStyle = new _Circle["default"]({
            fill: fillStyle,
            stroke: strokeStyle,
            radius: styleData.radius.value || 7
          });
          break;

        default:
          imageStyle = new _Circle["default"]({
            fill: fillStyle,
            stroke: strokeStyle,
            radius: styleData.radius.value || 7
          });
      }

      return imageStyle;
    }
  }, {
    key: "createLineArrowStyles",
    value: function createLineArrowStyles(styleData, feature, strokeStyle, fillStyle) {
      var scope = this;
      var stylesArray = [];
      var arrowSize = styleData.line_arrows_radius ? parseInt(styleData.line_arrows_radius.value, 10) * 2 : 0;
      var arrowSizeUnit = arrowSize + styleData.line_arrows_radius.unit;
      feature.getGeometry().forEachSegment(function (start, end) {
        //if minzoom is 0 (unlimited), hide arrows if they are bigger than the segment
        var arrows_minzoom = parseInt(styleData.line_arrows_minzoom, 10);
        var start_pixel = scope.controller.mapController.map.getPixelFromCoordinate(start);
        var end_pixel = scope.controller.mapController.map.getPixelFromCoordinate(end); // euclid-distance between start and end

        var segmentLength = Math.sqrt(Math.pow(end_pixel[1] - start_pixel[1], 2) + Math.pow(end_pixel[0] - start_pixel[0], 2));

        if (arrows_minzoom < 0 && arrowSize + parseInt(styleData.strokewidth.value, 10) < segmentLength || arrows_minzoom >= 0 && scope.controller.mapController.map.getView().getZoom() >= arrows_minzoom) {
          // forward arrows
          stylesArray.push(new _style.Style({
            geometry: new _geom.Point(end),
            text: new _style.Text({
              text: "á³",
              font: arrowSizeUnit + " sans-serif",
              offsetX: 0,
              offsetY: 1,
              fill: fillStyle,
              stroke: strokeStyle,
              textAlign: 'right',
              rotateWithView: true,
              rotation: -Math.atan2(end[1] - start[1], end[0] - start[0])
            })
          })); // backward arrows (if wanted)

          if (styleData.line_arrows_back) {
            stylesArray.push(new _style.Style({
              geometry: new _geom.Point(start),
              text: new _style.Text({
                text: "á³",
                font: arrowSizeUnit + " sans-serif",
                offsetX: 0,
                offsetY: -1,
                fill: fillStyle,
                stroke: strokeStyle,
                textAlign: 'right',
                rotateWithView: true,
                rotation: -Math.atan2(start[1] - end[1], start[0] - end[0])
              })
            }));
          }
        }
      });
      return stylesArray;
    }
  }, {
    key: "getStyleEditorConfig",
    value: function getStyleEditorConfig(styleData) {
      var editorConfig; // create editor-config

      editorConfig = {};
      editorConfig.collect = styleData.editor_collect || undefined;
      editorConfig.iconSrc = styleData.editor_icon || undefined;
      editorConfig.vars = styleData.editor_vars || undefined;
      editorConfig.sort = styleData.editor_sort || false;

      if (editorConfig.sort) {
        editorConfig.sort = parseInt(editorConfig.sort, 10) || false;
      }

      return editorConfig;
    } // end of "getStyleEditorConfig()"

  }]);
  return C4gLocationStyle;
}();

exports.C4gLocationStyle = C4gLocationStyle;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-config.js":
/*!************************************************!*\
  !*** ./Resources/public/js/c4g-maps-config.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.config = exports.OSM_REL_ATTRIBUTION = void 0;

var _format = __webpack_require__(/*! ol/format */ "./node_modules/ol/format.js");

var _tilegrid = __webpack_require__(/*! ol/tilegrid */ "./node_modules/ol/tilegrid.js");

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
//copy link to add noopener
var OSM_REL_ATTRIBUTION = '&#169; ' + '<a href="https://www.openstreetmap.org/copyright" target="_blank" rel="noopener">OpenStreetMap</a> ' + 'contributors.';
exports.OSM_REL_ATTRIBUTION = OSM_REL_ATTRIBUTION;
var config = {
  osm: {
    CycleMap: {
      attributions: 'Style by <a target="_blank" rel="noopener" href="https://www.opencyclemap.org/">OpenCycleMap</a>' + ' ' + OSM_REL_ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.opencyclemap.org/cycle/{z}/{x}/{y}.png'
    },
    German: {
      attributions: 'Style by <a target="_blank" rel="noopener" href="https://www.openstreetmap.de/germanstyle.html">openstreetmap.de</a>' + ' ' + OSM_REL_ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.openstreetmap.de/{z}/{x}/{y}.png'
    },
    LandscapeMap: {
      attributions: 'Style by <a target="_blank" rel="noopener" href="https://www.opencyclemap.org/">OpenCycleMap</a>' + ' ' + OSM_REL_ATTRIBUTION,
      crossOrigin: 'anonymous',
      minZoom: 0,
      maxZoom: 19,
      url: 'https://{a-c}.tile.opencyclemap.org/landscape/{z}/{x}/{y}.png'
    },
    Mapnik: {
      attributions: OSM_REL_ATTRIBUTION,
      crossOrigin: 'anonymous'
    },
    NONE: '' // last line

  },
  stamen: {
    Toner: {
      attributions: 'Map tiles by <a target="_blank" rel="noopener" href="https://stamen.com">Stamen Design</a>, under <a  target="_blank" rel="noopener" href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a  target="_blank" rel="noopener" href="http://openstreetmap.org">OpenStreetMap</a>, under <a  target="_blank" rel="noopener" href="http://www.openstreetmap.org/copyright">ODbL</a>.',
      layer: 'toner',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },
    TonerLabels: {
      attributions: 'Map tiles by <a target="_blank" rel="noopener" href="https://stamen.com">Stamen Design</a>, under <a target="_blank" rel="noopener" href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a target="_blank" rel="noopener" href="http://openstreetmap.org">OpenStreetMap</a>, under <a target="_blank" rel="noopener" href="http://www.openstreetmap.org/copyright">ODbL</a>.',
      layer: 'toner-labels',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },
    TonerLines: {
      attributions: 'Map tiles by <a target="_blank" rel="noopener" href="https://stamen.com">Stamen Design</a>, under <a target="_blank" rel="noopener" href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a target="_blank" rel="noopener" href="http://openstreetmap.org">OpenStreetMap</a>, under <a target="_blank" rel="noopener" href="http://www.openstreetmap.org/copyright">ODbL</a>.',
      layer: 'toner-lines',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },
    Terrain: {
      attributions: 'Map tiles by <a target="_blank" rel="noopener" href="https://stamen.com">Stamen Design</a>, under <a target="_blank" rel="noopener" href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a target="_blank" rel="noopener" href="http://openstreetmap.org">OpenStreetMap</a>, under <a target="_blank" rel="noopener" href="http://www.openstreetmap.org/copyright">ODbL</a>.',
      layer: 'terrain',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },
    Watercolor: {
      attributions: 'Map tiles by <a target="_blank" rel="noopener" href="https://stamen.com">Stamen Design</a>, under <a target="_blank" rel="noopener" href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a target="_blank" rel="noopener" href="http://openstreetmap.org">OpenStreetMap</a>, under <a target="_blank" rel="noopener" href="http://creativecommons.org/licenses/by-sa/3.0">CC BY SA</a>.',
      layer: 'watercolor',
      minZoom: 0,
      maxZoom: 18,
      crossOrigin: 'anonymous'
    },
    NONE: ''
  },
  mapquest: {
    MapQuestOpen: {
      layer: 'osm'
    },
    MapQuestHyb: {
      layer: 'hyb'
    },
    MapQuestSat: {
      layer: 'sat'
    },
    NONE: ''
  },
  mapbox: {
    Mapbox: {
      tileSize: [512, 512],
      attributions: 'Â© <a target="_blank" rel="noopener" href="https://www.mapbox.com/about/maps/">Mapbox</a>' + ' ' + OSM_REL_ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    },
    MapboxClassic: {
      attributions: 'Â© <a target="_blank" rel="noopener" href="https://www.mapbox.com/about/maps/">Mapbox</a>' + ' ' + OSM_REL_ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }
  },
  otm: {
    attributions: 'Kartendaten: ' + OSM_REL_ATTRIBUTION + ', SRTN | Kartendarstellung Â© <a target="_blank" rel="noopener" href="https://opentopomap.org/">OpenTopoMap</a> (<a target="_blank" rel="noopener" href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
  },
  mapz: {
    attributions: 'Â© 2021 <a target=\"_blank\" href=\"http://www.mapz.com\">mapz.com </a>' + ' ' + OSM_REL_ATTRIBUTION,
    minZoom: 0,
    maxZoom: 22,
    tilePixelRatio: 2
  },
  klokan: {
    OpenMapTiles: {
      format: new _format.MVT(),
      tileGrid: (0, _tilegrid.createXYZ)({
        tileSize: 512,
        maxZoom: 22
      }),
      //ToDo maxZoom from configuration
      tilePixelRatio: 8,
      attributions: 'Â© <a target="_blank" rel="noopener" href="https://openmaptiles.org/">OpenMapTiles</a>' + ' ' + OSM_REL_ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    },
    TileHosting: {
      format: new _format.MVT(),
      tileGrid: (0, _tilegrid.createXYZ)({
        tileSize: 512,
        maxZoom: 22
      }),
      //ToDo maxZoom from configuration
      tilePixelRatio: 8,
      attributions: 'Â© <a target="_blank" rel="noopener" href="https://tilehosting.com/">TileHosting</a>' + ' ' + OSM_REL_ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }
  },
  here: {
    HERE: {
      tileSize: [512, 512],
      attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' + '<a target="_blank" rel="noopener" href="https://developer.here.com">HERE</a>' + ' ' + OSM_REL_ATTRIBUTION,
      minZoom: 0,
      maxZoom: 22,
      crossOrigin: 'anonymous'
    }
  },
  thunderforest: {
    Thunderforest: {
      tileSize: [512, 512],
      attributions: 'Map Tiles Â© <a target="_blank" rel="noopener" href="https://www.thunderforest.com/">Thunderforest</a>' + ' ' + OSM_REL_ATTRIBUTION,
      minZoom: 0,
      maxZoom: 19,
      crossOrigin: 'anonymous'
    }
  }
};
exports.config = config;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-constant-i18n-de.js":
/*!**********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-constant-i18n-de.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */

/**
 * Language constants (en)
 */

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.langConstantsGerman = void 0;
var langConstantsGerman = {
  LANG: 'de',
  NAME: 'Name',
  HIDE: 'Zuklappen',
  CLOSE: 'SchlieÃen',
  POINT: 'POI',
  FREEHAND: 'Freihand',
  LINE: 'Linie',
  POLYGON: 'FlÃ¤che',
  CIRCLE: 'Kreis',
  PERIMETER: 'Umfang',
  LENGTH: 'LÃ¤nge',
  SURFACEAREA: 'FlÃ¤cheninhalt',
  RADIUS: 'Radius',
  REFRESH: 'Aktualisieren',
  ACCEPT: 'Akzeptieren',
  COPY_TO_CLIPBOARD: 'In Zwischenablage kopieren',
  CTRL_ZOOM_IN: 'VergrÃ¶Ãern',
  CTRL_ZOOM_OUT: 'Verkleinern',
  CTRL_ZOOM_EXT: 'Maximal verkleinern',
  CTRL_ZOOM_HOME: 'Zur ursprÃ¼nglichen Position',
  CTRL_ZOOM_POS: 'Zum aktuellen Standort',
  CTRL_ZOOM_SLIDER: 'Zoom Slider',
  CTRL_RESET_ROTATION: 'Rotation (touch, ctrl+shift+mouse) zurÃ¼cksetzen',
  CTRL_PORTSIDE: 'Portside ein-/ausblenden',
  CTRL_ROUTER: 'Router ein-/ausblenden',
  CTRL_MEASURETOOLS: 'Messwerkzeuge ein-/ausblenden',
  CTRL_INFOPAGE: 'Infoseite ein-/ausblenden',
  CTRL_ADDITIONALPANEL: 'Panel ein-/ausblenden',
  CTRL_ACCOUNT: 'Account ein-/ausblenden',
  CTRL_ZOOMLEVEL: 'Zoom',
  CTRL_MOUSECOORDS: 'Lon/Lat',
  CTRL_GEOSEARCH: 'Suche ein-/ausblenden',
  CTRL_START_SEARCH: 'Suche starten',
  CTRL_OVERVIEWMAP: 'Ãbersichtskarte ein-/ausblenden',
  CTRL_SIDEBOARD: 'Sideboard ein-/ausblenden',
  CTRL_STARBOARD: 'Starboard ein-/ausblenden',
  CTRL_ATTRIBUTION: 'Attribution anzeigen',
  CTRL_GRID: 'Gitter ein-/ausblenden',
  CTRL_PERMALINK: 'Permalink generieren',
  CTRL_FULLSCREEN: 'Vollbildmodus ein-/ausschalten',
  CTRL_PRINT: 'Karte exportieren',
  CTRL_BASELAYER: 'Basiskartenwechsler ein-/ausschalten',
  CTRL_INFOAREA: 'Infobereich Ã¶ffnen/schlieÃen',
  STARBOARD: 'Kartenelemente',
  STARBOARD_BASELAYER: 'Basiskarten',
  STARBOARD_LAYER: 'Ebenen',
  STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER: 'Basiskarten',
  STARBOARD_VIEW_TRIGGER_LAYERSWITCHER: 'Kartenelemente',
  STARBOARD_ELEMENT_ZOOM: 'Auf Element zoomen',
  STARBOARD_ELEMENT_ZOOM_BEFORE: 'Zu ',
  STARBOARD_ELEMENT_ZOOM_AFTER: ' zoomen',
  LAYERSWITCHER_TOGGLE_ALL: "Alle Elemente",
  SIDEBOARD: 'Sideboard',
  RESET_FILTER: 'Filter zurÃ¼cksetzen',
  GEOSEARCH: 'Suche',
  OVERVIEWMAP: 'Ãbersichtskarte',
  MEASURETOOLS: 'Messwerkzeuge',
  MEASURETOOLS_INFO: 'WÃ¤hlen Sie einen Messtyp overviewaus und starten Sie die Messung durch das Klicken in die Karte.',
  MEASURETOOLS_INFO_ADDITIONAL: '(Einzelne Messungen kÃ¶nnen mit einem Doppelklick beendet werden.)',
  MEASURETOOLS_VIEW_TRIGGER_SELECT: 'Auswahl Modus',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_LINESTRING: 'Strecken messen',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_POLYGON: 'FlÃ¤chen messen',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_CIRCLE: 'Radius messen',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_FREEHAND: 'Freihand messen',
  INFOPAGE: 'Informationen',
  ADDITIONALPANEL: 'Panel',
  ADDITIONALPANEL_VIEW_TRIGGER: 'Panel anzeigen',
  ACCOUNT: 'Account',
  ACCOUNT_VIEW_TRIGGER: 'Account anzeigen',
  SEARCH_NOT_FOUND: 'Die Lokation konnte nicht gefunden werden. Bitte versuchen Sie eine andere Eingabe.',
  NONE: '' // last line

};
exports.langConstantsGerman = langConstantsGerman;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-constant-i18n-en.js":
/*!**********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-constant-i18n-en.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.langConstantsEnglish = void 0;

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */

/**
 * Language constants (en)
 */
var langConstantsEnglish = {
  LANG: 'en',
  NAME: 'Name',
  HIDE: 'Hide',
  CLOSE: 'Close',
  POINT: 'POI',
  FREEHAND: 'freehand',
  LINE: 'Line',
  POLYGON: 'Area',
  CIRCLE: 'Circle',
  PERIMETER: 'Perimeter',
  LENGTH: 'Length',
  SURFACEAREA: 'Surface area',
  RADIUS: 'Radius',
  REFRESH: 'Refresh',
  ACCEPT: 'Accept',
  COPY_TO_CLIPBOARD: 'Copy to clipboard',
  CTRL_ZOOM_IN: 'Zoom in',
  CTRL_ZOOM_OUT: 'Zoom out',
  CTRL_ZOOM_EXT: 'Fit to extent',
  CTRL_ZOOM_HOME: 'jump to initial position',
  CTRL_ZOOM_POS: 'jump to browser/device position',
  CTRL_ZOOM_SLIDER: 'Zoom slider',
  CTRL_RESET_ROTATION: 'Reset rotation (touch, ctrl+shift+mouse)',
  CTRL_PORTSIDE: 'Toggle portside',
  CTRL_EDITOR: 'Toggle editor',
  CTRL_MEASURETOOLS: 'Toggle measuretools',
  CTRL_INFOPAGE: 'Toggle infopage',
  CTRL_ADDITIONALPANEL: 'Toggle panel',
  CTRL_ACCOUNT: 'Toggle account',
  CTRL_ZOOMLEVEL: 'Zoom',
  CTRL_MOUSECOORDS: 'Lon/Lat',
  CTRL_GEOSEARCH: 'Toggle geosearch',
  CTRL_START_SEARCH: 'start search',
  CTRL_OVERVIEWMAP: 'Toggle overviewmap',
  CTRL_SIDEBOARD: 'Toggle sideboard',
  CTRL_STARBOARD: 'Toggle starboard',
  CTRL_ATTRIBUTION: 'Show attribution',
  CTRL_GRID: 'Toggle grid',
  CTRL_PERMALINK: 'Generate Permalink',
  CTRL_FULLSCREEN: 'Toggle fullscreen-mode',
  CTRL_PRINT: 'Export map',
  CTRL_BASELAYER: 'Switch base map changer on/off',
  CTRL_INFOAREA: 'Open/close info area',
  EDITOR: 'Editor',
  EDITOR_ENABLE_INSTANT_MEASURE: 'Measure while drawing',
  EDITOR_ENABLE_FREEHAND_DRAW: 'Freehand draw',
  EDITOR_FEATURE_APPLY: 'End modification',
  EDITOR_FEATURE_DELETE: 'Delete feature',
  EDITOR_FEATURE_MODIFY: 'Modify feature',
  EDITOR_SELECT_INFO: 'Click an element on the map to select it.',
  EDITOR_SELECT_INFO_ADDITIONAL: '[ctrl] + [click] for multiselect <br>[shift] for boxselect',
  EDITOR_VIEW_TRIGGER_SELECT: 'Select-mode',
  EDITOR_VIEW_TRIGGER_DRAW_POINT: 'Add POIs',
  EDITOR_VIEW_TRIGGER_DRAW_FREEHAND: 'Draw freehand',
  EDITOR_VIEW_TRIGGER_DRAW_LINESTRING: 'Add tracks',
  EDITOR_VIEW_TRIGGER_DRAW_POLYGON: 'Add areas',
  EDITOR_VIEW_TRIGGER_DRAW_CIRCLE: 'Add circles',
  STARBOARD: 'Layerswitcher',
  STARBOARD_BASELAYER: 'Baselayer',
  STARBOARD_LAYER: 'Layer',
  STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER: 'Baselayerswitcher',
  STARBOARD_VIEW_TRIGGER_LAYERSWITCHER: 'Map elements',
  STARBOARD_ELEMENT_ZOOM: 'Zoom to element',
  STARBOARD_ELEMENT_ZOOM_BEFORE: 'Zoom to element ',
  STARBOARD_ELEMENT_ZOOM_AFTER: '',
  LAYERSWITCHER_TOGGLE_ALL: "All elements",
  RESET_FILTER: 'Reset filter',
  MEASURETOOLS: 'Measuretools',
  MEASURETOOLS_INFO: 'Select a measuretype and start measuring by clicking on the map.',
  MEASURETOOLS_INFO_ADDITIONAL: '(To stop a measurement, double-click on the map.)',
  MEASURETOOLS_VIEW_TRIGGER_SELECT: 'Select-mode',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_LINESTRING: 'Measure tracks',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_POLYGON: 'Measure areas',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_CIRCLE: 'Measure radius',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_FREEHAND: 'Measure freehand',
  GEOSEARCH: 'Search',
  OVERVIEWMAP: 'Overview map',
  INFOPAGE: 'Infopage',
  INFOPAGE_VIEW_TRIGGER: 'Show informations',
  ADDITIONALPANEL: 'Panel',
  ADDITIONALPANEL_VIEW_TRIGGER: 'Show panel',
  ACCOUNT: 'Account',
  ACCOUNT_VIEW_TRIGGER: 'Show account',
  SEARCH_NOT_FOUND: 'Location not found. Sorry... :(',
  NONE: '' // last line

};
exports.langConstantsEnglish = langConstantsEnglish;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-constant.js":
/*!**************************************************!*\
  !*** ./Resources/public/js/c4g-maps-constant.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.cssConstants = void 0;
var cssConstants = {
  OPEN: 'c4g-open',
  CLOSE: 'c4g-close',
  CLOSEABLE: 'c4g-closeable',
  ENABLED: 'c4g-enabled',
  DISABLED: 'c4g-disabled',
  HIDE: 'c4g-hide',
  ICON: 'c4g-icon',
  CONTROL: 'c4g-control',
  COPY: 'c4g-copy',
  REFRESH: 'c4g-refresh',
  ACTIVE: 'c4g-active',
  INACTIVE: 'c4g-inactive',
  LOADING: 'c4g-loading',
  ANIMATION_SPIN: 'c4g-animation-spin',
  LARGE: 'c4g-large',
  SMALL: 'c4g-small',
  HORIZONTAL: 'c4g-horizontal',
  VERTICAL: 'c4g-vertical',
  ATTRIBUTION_LOGO: 'c4g-attribution-logo',
  CONTROL_CONTAINER_TL: 'c4g-control-container-top-left',
  CONTROL_CONTAINER_TR: 'c4g-control-container-top-right',
  CONTROL_CONTAINER_BL: 'c4g-control-container-bottom-left',
  CONTROL_CONTAINER_BL_SUB: 'c4g-control-container-bottom-left-sub',
  CONTROL_CONTAINER_BR: 'c4g-control-container-bottom-right',
  GEOSEARCH: 'c4g-geosearch',
  GEOSEARCH_WRAPPER: 'c4g-geosearch-wrapper',
  GEOSEARCH_TRIGGER: 'c4g-geosearch-trigger',
  GEOSEARCH_START: 'c4g-geosearch-start',
  GRATICULE: 'c4g-graticule',
  MEASURETOOLS_VIEW_TRIGGER_SELECT: 'c4g-measuretools-view-trigger-select',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_LINESTRING: 'c4g-measuretools-view-trigger-draw-line',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_POLYGON: 'c4g-measuretools-view-trigger-draw-polygon',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_CIRCLE: 'c4g-measuretools-view-trigger-draw-circle',
  MEASURETOOLS_VIEW_TRIGGER_DRAW_FREEHAND: 'c4g-measuretools-view-trigger-draw-freehand',
  PRINT: 'c4g-print',
  INFOPAGE_VIEW_TRIGGER: 'c4g-infopage-view-trigger',
  INFOPAGE: 'c4g-infopage',
  ADDITIONALPANEL_VIEW_TRIGGER: 'c4g-additionalpanel-view-trigger',
  ADDITIONALPANEL: 'c4g-additionalpanel',
  OVERVIEWMAP: 'c4g-overviewmap',
  OVERVIEWMAP_WRAPPER: 'c4g-overviewmap-wrapper',
  PERMALINK: 'c4g-permalink',
  PERMALINK_POPUP: 'c4g-permalink-popup',
  POPUP_CLOSE: 'c4g-popup-close',
  POPUP_ROUTE_WRAPPER: 'c4g-popup-route-wrapper',
  POPUP_ROUTE_FROM: 'c4g-popup-route-from',
  POPUP_ROUTE_TO: 'c4g-popup-route-to',
  PORTSIDE: 'c4g-portside',
  PORTSIDE_CONTAINER: 'c4g-portside-container',
  PORTSIDE_CONTROL: 'c4g-portside-control',
  PORTSIDE_WRAPPER: 'c4g-portside-wrapper',
  PORTSIDE_TITLEBAR: 'c4g-portside-titlebar',
  PORTSIDE_TOP_TOOLBAR: 'c4g-portside-top-toolbar',
  PORTSIDE_CONTENT_CONTAINER: 'c4g-portside-content-container',
  PORTSIDE_BOTTOM_TOOLBAR: 'c4g-portside-bottom-toolbar',
  PORTSIDE_STATUSBAR: 'c4g-portside-statusbar',
  PORTSIDE_VIEWTRIGGERBAR: 'c4g-portside-viewtriggerbar',
  PORTSIDE_HEADLINE: 'c4g-portside-headline',
  PORTSIDE_BUTTONBAR: 'c4g-portside-buttonbar',
  PORTSIDE_BUTTON: 'c4g-portside-button',
  PORTSIDE_HIDE: 'c4g-portside-hide',
  PORTSIDE_CLOSE: 'c4g-portside-close',
  SPINNER: 'c4g-spinner',
  STARBOARD: 'c4g-starboard',
  STARBOARD_CONTAINER: 'c4g-starboard-container',
  STARBOARD_CONTROL: 'c4g-starboard-control',
  STARBOARD_WRAPPER: 'c4g-starboard-wrapper',
  STARBOARD_TITLEBAR: 'c4g-starboard-titlebar',
  STARBOARD_CONTENT_CONTAINER: 'c4g-starboard-content-container',
  STARBOARD_BOTTOM_TOOLBAR: 'c4g-starboard-bottom-toolbar',
  STARBOARD_STATUSBAR: 'c4g-starboard-statusbar',
  STARBOARD_VIEWTRIGGERBAR: 'c4g-starboard-viewtriggerbar',
  STARBOARD_HEADLINE: 'c4g-starboard-headline',
  STARBOARD_BUTTONBAR: 'c4g-starboard-buttonbar',
  STARBOARD_BUTTON: 'c4g-starboard-button',
  STARBOARD_VIEW_TRIGGER_BASELAYERSWITCHER: 'c4g-starboard-view-trigger-baselayerswitcher',
  STARBOARD_VIEW_TRIGGER_LAYERSWITCHER: 'c4g-starboard-view-trigger-layerswitcher',
  STARBOARD_CLOSE: 'c4g-starboard-close',
  STARBOARD_CONTENT_BASELAYERSWITCHER: 'c4g-content-baselayerswitcher',
  STARBOARD_BASELAYERTREE: 'c4g-baselayertree',
  STARBOARD_LAYERTREE: 'c4g-layertree',
  STARBOARD_CONTENT_LAYERSWITCHER: 'c4g-content-layerswitcher',
  STARBOARD_LOCSTYLE: 'c4g-starboard-locstyle',
  STARBOARD_LOCSTYLE_POINT: 'c4g-starboard-locstyle-point',
  STARBOARD_LOCSTYLE_SQUARE: 'c4g-starboard-locstyle-square',
  STARBOARD_LOCSTYLE_STAR: 'c4g-starboard-locstyle-star',
  STARBOARD_LOCSTYLE_X: 'c4g-starboard-locstyle-x',
  STARBOARD_LOCSTYLE_CROSS: 'c4g-starboard-locstyle-cross',
  STARBOARD_LOCSTYLE_TRIANGLE: 'c4g-starboard-locstyle-triangle',
  TOOLTIP_POPUP: 'c4g-tooltip-popup',
  ZOOM_LEVEL: 'c4g-zoom-level',
  OL_CONTROL: 'ol-control',
  OL_UNSELECTABLE: 'ol-unselectable',
  OL_OVERLAYCONTAINER: 'ol-overlaycontainer',
  OL_OVERLAYCONTAINER_SE: 'ol-overlaycontainer-stopevent',
  OL_VIEWPORT: 'ol-viewport',
  OL_ZOOM: 'ol-zoom',
  OL_ZOOM_IN: 'ol-zoom-in',
  OL_ZOOM_EXT: 'ol-zoom-extent',
  OL_ZOOM_HOME: 'ol-zoom-home',
  OL_ZOOM_POS: 'ol-zoom-position',
  OL_ZOOM_WITH_EXT: 'ol-zoom-with-extent',
  OL_ZOOM_WITH_HOME: 'ol-zoom-with-home',
  OL_ZOOM_WITH_POS: 'ol-zoom-with-position',
  OL_ZOOM_SLIDER: 'ol-zoom-slider',
  OL_ZOOM_WITH_SLIDER: 'ol-zoom-with-slider',
  NONE: '' // last line

};
exports.cssConstants = cssConstants;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-control-zoomlevel.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-control-zoomlevel.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Zoomlevel = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _c4gMapsConstant = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");

var _control = __webpack_require__(/*! ol/control */ "./node_modules/ol/control.js");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

'use strict';

var Zoomlevel = /*#__PURE__*/function (_Control) {
  (0, _inherits2["default"])(Zoomlevel, _Control);

  var _super = _createSuper(Zoomlevel);

  function Zoomlevel(options) {
    var _this;

    (0, _classCallCheck2["default"])(this, Zoomlevel);
    _this = _super.call(this, options);
    var self, element, updateZoomlevel;
    self = (0, _assertThisInitialized2["default"])(_this);

    if (!options || !options.mapController) {
      console.warn('Zoomlevel control needs to know the map.');
      return (0, _possibleConstructorReturn2["default"])(_this, false);
    } // default options


    options = jQuery.extend({
      className: _c4gMapsConstant.cssConstants.ZOOM_LEVEL,
      undefinedHTML: ''
    }, options);
    var mapView = options.mapController.map.getView();
    element = document.createElement('div');
    element.className = options.className;
    element.innerHTML = parseInt(mapView.getZoom());

    updateZoomlevel = function updateZoomlevel() {
      element.innerHTML = parseInt(mapView.getZoom());
    };

    options.mapController.map.getView().on('change:resolution', function () {
      updateZoomlevel();
    });
    _this.view = mapView; // inheritance-stuff

    _control.Control.call((0, _assertThisInitialized2["default"])(_this), {
      element: element,
      target: options.target
    });

    return _this;
  }

  return Zoomlevel;
}(_control.Control);

exports.Zoomlevel = Zoomlevel;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-controls.js":
/*!**************************************************!*\
  !*** ./Resources/public/js/c4g-maps-controls.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MapsControls = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _c4gMapsConstant = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");

var _c4gMapsControlZoomlevel = __webpack_require__(/*! ./c4g-maps-control-zoomlevel */ "./Resources/public/js/c4g-maps-control-zoomlevel.js");

var _c4gMapsInteractionGeopicker = __webpack_require__(/*! ./c4g-maps-interaction-geopicker */ "./Resources/public/js/c4g-maps-interaction-geopicker.js");

var _c4gMapsInteractionGeopickerGeojson = __webpack_require__(/*! ./c4g-maps-interaction-geopicker-geojson */ "./Resources/public/js/c4g-maps-interaction-geopicker-geojson.js");

var _proj = __webpack_require__(/*! ol/proj */ "./node_modules/ol/proj.js");

var _control = __webpack_require__(/*! ol/control */ "./node_modules/ol/control.js");

var _coordinate = __webpack_require__(/*! ol/coordinate */ "./node_modules/ol/coordinate.js");

var _c4gMapsI18n = __webpack_require__(/*! ./c4g-maps-i18n */ "./Resources/public/js/c4g-maps-i18n.js");

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
var langConstants = {};
'use strict';

var MapsControls = /*#__PURE__*/function () {
  /**
   * [MapController description]
   * @param {json-object}  mapData  Object to configure con4gis-maps.
   *                                See "docs/mapData-values.md"
   *                                to get a list of valid values for this object.
   */
  function MapsControls(mapController) {
    (0, _classCallCheck2["default"])(this, MapsControls);
    this.mapController = mapController;
    this.controls = {};
    this.leftSlideElements = [];
    this.rightSlideElements = [];
    langConstants = (0, _c4gMapsI18n.getLanguage)(mapController.data);
  }

  (0, _createClass2["default"])(MapsControls, [{
    key: "init",
    value: function init() {
      var map = this.mapController.map;
      var proxy = this.mapController.proxy;
      var mapData = this.mapController.data; // add control-containers ===
      //
      // top-left

      var controlContainerTopLeft = document.createElement('div');
      controlContainerTopLeft.className = _c4gMapsConstant.cssConstants.CONTROL_CONTAINER_TL + ' ' + _c4gMapsConstant.cssConstants.OL_UNSELECTABLE;
      this.mapController.$overlaycontainer_stopevent.prepend(controlContainerTopLeft);
      this.controlContainerTopLeft = controlContainerTopLeft; // bottom-left

      var controlContainerBottomLeft = document.createElement('div');
      controlContainerBottomLeft.className = _c4gMapsConstant.cssConstants.CONTROL_CONTAINER_BL + ' ' + _c4gMapsConstant.cssConstants.OL_UNSELECTABLE;
      jQuery(controlContainerTopLeft).after(controlContainerBottomLeft); // element needs to be moved when Portside will be opened

      this.leftSlideElements.push(controlContainerBottomLeft); // top-right

      var controlContainerTopRight = document.createElement('div');
      controlContainerTopRight.className = _c4gMapsConstant.cssConstants.CONTROL_CONTAINER_TR + ' ' + _c4gMapsConstant.cssConstants.OL_UNSELECTABLE;
      jQuery(controlContainerBottomLeft).after(controlContainerTopRight); // element needs to be moved when Starboard will be opened

      this.rightSlideElements.push(controlContainerTopRight); // bottom-right

      var controlContainerBottomRight = document.createElement('div');
      controlContainerBottomRight.className = _c4gMapsConstant.cssConstants.CONTROL_CONTAINER_BR + ' ' + _c4gMapsConstant.cssConstants.OL_UNSELECTABLE;
      jQuery(controlContainerTopRight).after(controlContainerBottomRight); // element needs to be moved when Starboard will be opened

      this.rightSlideElements.push(controlContainerBottomRight);
      var buttons = [{
        name: 'layerswitcher',
        sort: mapData.layerswitcher.enable
      }, {
        name: 'baselayerswitcher',
        sort: mapData.baselayerswitcher.enable
      }, {
        name: 'geosearch',
        sort: mapData.geosearch.enable
      }, {
        name: 'legend',
        sort: mapData.legend.enable
      }, {
        name: 'measure',
        sort: mapData.measuretools.enable
      }, {
        name: 'permalink',
        sort: mapData.permalink.enable
      }];

      var sortBy = function sortBy(key) {
        return function (a, b) {
          return a[key] > b[key] ? 1 : b[key] > a[key] ? -1 : 0;
        };
      };

      buttons.sort(sortBy('sort'));

      for (var i = 0; i < buttons.length; i++) {
        var button = buttons[i];

        if (parseInt(button.sort) <= 0) {
          continue;
        }

        switch (button.name) {
          case 'overview':
            var ovmTarget = document.createElement("div");
            ovmTarget.className = "c4g-sideboard c4g-overviewmap-container c4g-close";
            this.mapController.$overlaycontainer_stopevent.append(ovmTarget); // const scope = this;
            // const addOverviewMap = function() {
            //     var overviewMapOptions = {
            //         target: controlContainerTopLeft,
            //         mapController: scope.mapController,
            //         ovmTarget: ovmTarget,
            //         layers: [proxy.baselayerController.arrBaselayers[proxy.activeBaselayerId].layer]
            //     };
            //
            //     if (scope.overviewMap) {
            //         // we are reloading the overview map, so keep the collapsed-property
            //         overviewMapOptions.collapsed = !scope.overviewMap.isOpen();
            //     }
            //
            //     scope.overviewMap = new OverviewMap(overviewMapOptions);
            //     scope.controls.overviewmap = scope.overviewMap.getOverviewMap();
            //     map.addControl(scope.controls.overviewmap);
            // };
            //
            // if (proxy.baselayers_loaded) {
            //     addOverviewMap();
            // } else {
            //     proxy.hook_baselayer_loaded.push(addOverviewMap);
            // }
            //
            // // add hook to synchronize overviewmap with baselayer
            // window.c4gMapsHooks.baselayer_changed = window.c4gMapsHooks.baselayer_changed || [];
            // window.c4gMapsHooks.baselayer_changed.push(function(baselayerId) {
            //     map.removeControl(scope.controls.overviewmap);
            //     scope.overviewMap.removeFromMap();
            //     addOverviewMap();
            // });

            break;

          default:
        }
      } // backend-geopicker


      if (mapData.geopicker && (mapData.geopicker.type === "backend" || mapData.geopicker.type === "frontend")) {
        this.controls.geopicker = new _c4gMapsInteractionGeopicker.GeoPicker({
          mapContainer: this.mapController
        });
        this.mapController.map.addInteraction(this.controls.geopicker);

        if (mapData.geopicker.type === "frontend") {
          // substring is needed here for taking out the #
          if (mapData.geopicker.input_geo_x && mapData.geopicker.input_geo_x) {
            var geoxField = document.getElementById(mapData.geopicker.input_geo_x.substring(1));
            var geoyField = document.getElementById(mapData.geopicker.input_geo_y.substring(1));

            if (geoxField && geoyField) {
              var locGeox = geoxField.value;
              var locGeoy = geoyField.value;

              if (locGeox && locGeoy) {
                var numerized = [parseFloat(locGeox, 10), parseFloat(locGeoy, 10)];
                var transformed = (0, _proj.transform)(numerized, (0, _proj.get)('EPSG:4326'), (0, _proj.get)('EPSG:3857'));
                this.mapController.map.getView().setCenter(transformed);
              }
            }
          }
        }
      } else if (mapData.geopicker && mapData.geopicker.type) {
        this.controls.geopicker = new _c4gMapsInteractionGeopickerGeojson.GeoPickerGeoJSON({
          mapContainer: this.mapController
        });
        this.mapController.map.addInteraction(this.controls.geopicker);
      } //con4gis logo


      if (mapData.attribution.cfg_logo) {
        var logoLink = document.createElement('a');
        logoLink.href = 'https://con4gis.org';
        logoLink.title = 'built with con4gis';
        logoLink.target = '_blank';
        logoLink.rel = 'noopener noreferrer';
        logoLink.className = _c4gMapsConstant.cssConstants.ATTRIBUTION_LOGO;
        var logoGraphic = document.createElement('img');
        logoGraphic.src = 'bundles/con4gismaps/images/logo_con4gis.svg';
        logoGraphic.alt = 'con4gis logo';
        logoGraphic.height = '24px';
        logoGraphic.width = '67px';
        logoLink.appendChild(logoGraphic);
        controlContainerBottomLeft.appendChild(logoLink);
      } // scaleline


      if (mapData.scaleline) {
        this.controls.scaleline = new _control.ScaleLine({
          target: controlContainerBottomLeft
        });
        map.addControl(this.controls.scaleline);
      } // zoom-level & mouse-position


      if (mapData.zoomlevel || mapData.mouseposition) {
        // wrapper for zoom-level and mouse-position
        var controlContainerBottomLeftSub = document.createElement('div');
        controlContainerBottomLeftSub.className = _c4gMapsConstant.cssConstants.CONTROL_CONTAINER_BL_SUB + ' ' + _c4gMapsConstant.cssConstants.OL_UNSELECTABLE;
        jQuery(controlContainerBottomLeft).append(controlContainerBottomLeftSub); // display zoom-level

        if (mapData.zoomlevel) {
          this.controls.zoomlevel = new _c4gMapsControlZoomlevel.Zoomlevel({
            mapController: this.mapController,
            target: controlContainerBottomLeftSub,
            undefinedHTML: 'N/A'
          });
          map.addControl(this.controls.zoomlevel);
        } // display mouse-position


        if (mapData.mouseposition) {
          this.controls.mouseposition = new _control.MousePosition({
            projection: 'EPSG:4326',
            coordinateFormat: _coordinate.toStringHDMS,
            target: controlContainerBottomLeftSub,
            undefinedHTML: 'N/A'
          });
          map.addControl(this.controls.mouseposition);
        }
      } // show attribution


      if (mapData.attribution.enable) {
        var attrOptions = {
          label: ' ',
          tipLabel: langConstants.CTRL_ATTRIBUTION,
          collapseLabel: ' ',
          target: mapData.attribution.div ? mapData.attribution.div : controlContainerBottomLeft,
          collapsible: !mapData.attribution.div && !mapData.attribution.always_show
        };

        if (mapData.attribution.div) {
          attrOptions["className"] = "ol-attribution ol-attribution-ext-div";
        }

        this.controls.attribution = new _control.Attribution(attrOptions);

        if (!mapData.attribution.always_show) {
          this.controls.attribution.setCollapsed(mapData.attribution.div ? false : mapData.attribution.collapsed === '1');
        }

        map.addControl(this.controls.attribution);
      }
    }
  }]);
  return MapsControls;
}();

exports.MapsControls = MapsControls;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-i18n.js":
/*!**********************************************!*\
  !*** ./Resources/public/js/c4g-maps-i18n.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getLanguage = getLanguage;

var _c4gMapsConstantI18nDe = __webpack_require__(/*! ./c4g-maps-constant-i18n-de */ "./Resources/public/js/c4g-maps-constant-i18n-de.js");

var _c4gMapsConstantI18nEn = __webpack_require__(/*! ./c4g-maps-constant-i18n-en */ "./Resources/public/js/c4g-maps-constant-i18n-en.js");

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */

/**
 *  This script imports all different languages and exports the one that is valid for the configured language.
 */
function getLanguage(mapData) {
  if (mapData && mapData.lang === "de") {
    return _c4gMapsConstantI18nDe.langConstantsGerman;
  } else if (mapData && mapData.lang === "en") {
    return _c4gMapsConstantI18nEn.langConstantsEnglish;
  } else {
    // fallback
    return _c4gMapsConstantI18nEn.langConstantsEnglish;
  }
}

/***/ }),

/***/ "./Resources/public/js/c4g-maps-interaction-geopicker-geojson.js":
/*!***********************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-interaction-geopicker-geojson.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.GeoPickerGeoJSON = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _interaction = __webpack_require__(/*! ol/interaction */ "./node_modules/ol/interaction.js");

var _ol = __webpack_require__(/*! ol */ "./node_modules/ol/index.js");

var _geom = __webpack_require__(/*! ol/geom */ "./node_modules/ol/geom.js");

var _style = __webpack_require__(/*! ol/style */ "./node_modules/ol/style.js");

var _layer = __webpack_require__(/*! ol/layer */ "./node_modules/ol/layer.js");

var _format = __webpack_require__(/*! ol/format */ "./node_modules/ol/format.js");

var _source = __webpack_require__(/*! ol/source */ "./node_modules/ol/source.js");

var _proj = __webpack_require__(/*! ol/proj */ "./node_modules/ol/proj.js");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

'use strict';

var GeoPickerGeoJSON = /*#__PURE__*/function (_Draw) {
  (0, _inherits2["default"])(GeoPickerGeoJSON, _Draw);

  var _super = _createSuper(GeoPickerGeoJSON);

  /**
   *
   * @param options
   * @returns {boolean}
   * @constructor
   */
  function GeoPickerGeoJSON(options) {
    var _this;

    (0, _classCallCheck2["default"])(this, GeoPickerGeoJSON);
    var mapData = options.mapContainer.data;
    var vectorSource = new _source.Vector({});
    var vectorLayer = new _layer.Vector({
      source: vectorSource
    });
    options.mapContainer.map.addLayer(vectorLayer);
    _this = _super.call(this, {
      type: mapData.geopicker.type,
      freehand: true,
      // style: this.geoPickerStyleFunction,
      source: vectorSource
    });
    _this.vectorSource = vectorSource;
    _this.$fieldGeoJSON = jQuery(mapData.geopicker.input_geojson);

    if (_this.$fieldGeoJSON.val()) {
      try {
        var geojson = new _format.GeoJSON({
          dataProjection: "EPSG:4326",
          featureProjection: "EPSG:3857"
        });
        var feature = geojson.readFeature(_this.$fieldGeoJSON.val());

        _this.vectorSource.addFeature(feature);
      } catch (e) {
        console.log(e);
      }
    }

    _this.on('drawstart', function (event) {
      _this.vectorSource.clear();
    });

    _this.on('drawend', function (event) {
      var geojson = new _format.GeoJSON({
        dataProjection: "EPSG:4326",
        featureProjection: "EPSG:3857"
      });
      var strFeature = geojson.writeFeature(event.feature);

      _this.$fieldGeoJSON.val(strFeature);
    });

    return _this;
  }

  return GeoPickerGeoJSON;
}(_interaction.Draw);

exports.GeoPickerGeoJSON = GeoPickerGeoJSON;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-interaction-geopicker.js":
/*!***************************************************************!*\
  !*** ./Resources/public/js/c4g-maps-interaction-geopicker.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.GeoPicker = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _interaction = __webpack_require__(/*! ol/interaction */ "./node_modules/ol/interaction.js");

var _ol = __webpack_require__(/*! ol */ "./node_modules/ol/index.js");

var _geom = __webpack_require__(/*! ol/geom */ "./node_modules/ol/geom.js");

var _style = __webpack_require__(/*! ol/style */ "./node_modules/ol/style.js");

var _layer = __webpack_require__(/*! ol/layer */ "./node_modules/ol/layer.js");

var _source = __webpack_require__(/*! ol/source */ "./node_modules/ol/source.js");

var _proj = __webpack_require__(/*! ol/proj */ "./node_modules/ol/proj.js");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

'use strict';

var GeoPicker = /*#__PURE__*/function (_Interaction) {
  (0, _inherits2["default"])(GeoPicker, _Interaction);

  var _super = _createSuper(GeoPicker);

  /**
   *
   * @param options
   * @returns {boolean}
   * @constructor
   */
  function GeoPicker(options) {
    var _this;

    (0, _classCallCheck2["default"])(this, GeoPicker);
    var mapData, mapContainer, lat, lon, latIdx, lonIdx, latRnd, lonRnd;
    _this = _super.call(this, {
      handleEvent: options.handleEvent
    });
    _this.options = options || {};

    if (!_this.options.mapContainer || !_this.options.mapContainer.data) {
      console.warn('The GeoPicker needs a "mapContainer" in order to work.');
      return (0, _possibleConstructorReturn2["default"])(_this, false);
    }

    mapData = _this.options.mapContainer.data;
    mapContainer = _this.options.mapContainer; // configurate geopicker

    _this.$fieldGeoX = jQuery(mapData.geopicker.input_geo_x);
    _this.$fieldGeoY = jQuery(mapData.geopicker.input_geo_y);
    _this.opticLayerSource = new _source.Vector({});
    _this.opticLayerVector = new _layer.Vector({
      source: _this.opticLayerSource,
      style: _this.geoPickerStyleFunction
    });
    _this.opticLayerFeature = null;

    if (_this.$fieldGeoX.val() && _this.$fieldGeoY.val()) {
      lat = _this.$fieldGeoY.val();
      lon = _this.$fieldGeoX.val();

      if (mapData.geopicker.anonymous) {
        _this.$fieldGeoY.remove();

        _this.$fieldGeoX.remove();

        latIdx = lat.indexOf('.');
        lonIdx = lon.indexOf('.');
        lat = lat.replace(/\D/g, "");
        lon = lon.replace(/\D/g, "");
        latRnd = Math.round(Math.random() * (9999999999 - 1) + 1);
        lonRnd = Math.round(Math.random() * (9999999999 - 1) + 1);

        if (latRnd > 4999999999) {
          lat = parseInt(lat) - latRnd;
        } else {
          lat = parseInt(lat) + latRnd;
        }

        if (lonRnd < 5000000000) {
          lon = parseInt(lon) - lonRnd;
        } else {
          lon = parseInt(lon) + lonRnd;
        }

        lat = lat + "";
        lon = lon + "";
        lat = lat.substr(0, latIdx) + '.' + lat.substr(latIdx, lat.length - latIdx);
        lon = lon.substr(0, lonIdx) + '.' + lon.substr(lonIdx, lon.length - lonIdx);
      }

      _this.opticLayerFeature = new _ol.Feature({
        geometry: new _geom.Point((0, _proj.fromLonLat)([parseFloat(lon), parseFloat(lat)])),
        pickerColor: [0, 180, 100, 1],
        anonymous: mapData.geopicker.anonymous
      });

      _this.opticLayerSource.addFeature(_this.opticLayerFeature);

      mapContainer.map.getView().fit(_this.opticLayerSource.getExtent(), mapContainer.map.getSize()); // set zoom so we can see some tiles without error

      mapContainer.map.getView().setZoom(15);
    } else if (mapData.geoLocation && typeof mapData.geoLocation.setTracking === 'function') {
      mapData.geoLocation.setTracking(true);
    }

    mapContainer.map.addLayer(_this.opticLayerVector); //TODO wenn geopicker.clickDisabled (oder so) gesetzt ist, this.options.handleEvent = function(){}

    return _this;
  }

  (0, _createClass2["default"])(GeoPicker, [{
    key: "geoPickerStyleFunction",
    value: function geoPickerStyleFunction(feature, projection, getId) {
      var color, white, result;

      if (getId) {
        return -1;
      }

      white = [255, 255, 255, 1];

      if (feature && typeof feature.get === 'function' && feature.get('pickerColor')) {
        color = feature.get('pickerColor');
      } else {
        color = [200, 0, 0, 0.7];
      }

      result = [];

      if (feature && typeof feature.get === 'function' && !feature.get('anonymous')) {
        result.push(new _style.Style({
          image: new _style.Circle({
            radius: 2,
            fill: new _style.Fill({
              color: color
            }),
            stroke: new _style.Stroke({
              color: white,
              width: 2
            })
          }),
          zIndex: Infinity
        }));
        result.push(new _style.Style({
          image: new _style.Circle({
            radius: 20,
            stroke: new _style.Stroke({
              color: white,
              width: 4
            })
          }),
          zIndex: Infinity
        }));
        result.push(new _style.Style({
          image: new _style.Circle({
            radius: 20,
            stroke: new _style.Stroke({
              color: color,
              width: 2
            })
          }),
          zIndex: Infinity
        }));
        result.push(new _style.Style({
          image: new _style.Circle({
            radius: 40,
            stroke: new _style.Stroke({
              color: white,
              width: 4
            })
          }),
          zIndex: Infinity
        }));
        result.push(new _style.Style({
          image: new _style.Circle({
            radius: 40,
            stroke: new _style.Stroke({
              color: color,
              width: 2
            })
          }),
          zIndex: Infinity
        }));
      }

      result.push(new _style.Style({
        image: new _style.Circle({
          radius: 60,
          stroke: new _style.Stroke({
            color: white,
            width: 4
          })
        }),
        zIndex: Infinity
      }));
      result.push(new _style.Style({
        image: new _style.Circle({
          radius: 60,
          stroke: new _style.Stroke({
            color: color,
            width: 2
          })
        }),
        zIndex: Infinity
      }));
      return result;
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(mapBrowserEvent) {
      if (mapBrowserEvent.type === "singleclick") {
        if (!this.options.disableClickEvent && !this.options.mapContainer.data.geopicker.disabled) {
          return !this.pick(mapBrowserEvent.coordinate);
        }
      }

      return true;
    }
  }, {
    key: "pick",
    value: function pick(coordinate) {
      var arrLatLon;
      arrLatLon = (0, _proj.toLonLat)(coordinate);
      this.opticLayerFeature = new _ol.Feature({
        geometry: new _geom.Point(coordinate)
      });
      this.opticLayerSource.clear();
      this.opticLayerSource.addFeature(this.opticLayerFeature);
      this.$fieldGeoX.val(arrLatLon[0]);
      this.$fieldGeoY.val(arrLatLon[1]);
      this.$fieldGeoX.change();
      this.$fieldGeoY.change();
      return true;
    }
  }]);
  return GeoPicker;
}(_interaction.Interaction);

exports.GeoPicker = GeoPicker;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-maphover.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-maphover.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MapHover = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _c4gMapsMiscTooltippopup = __webpack_require__(/*! ./c4g-maps-misc-tooltippopup */ "./Resources/public/js/c4g-maps-misc-tooltippopup.js");

var _c4gMapsUtils = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");

var _Observable = __webpack_require__(/*! ol/Observable */ "./node_modules/ol/Observable.js");

var _c4gMapsConstant = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
'use strict';

var MapHover = /*#__PURE__*/function () {
  /**
   * @TODO
   * [MapHover description]
   *
   * @constructor
   *
   * @param {Object=} opt_options Control options.
   */
  function MapHover(options) {
    (0, _classCallCheck2["default"])(this, MapHover);
    this.options = options || {}; // default options

    this.options = jQuery.extend({
      // mapController: undefined,
      activate: true
    }, this.options);

    if (!this.options.mapController) {
      console.warn('MapHover needs a mapController');
      return false;
    } // set needed vars


    this.listenerKey = false;
    this.map = this.options.mapController.map;
    this.lastFeatureStyle = null;
    this.lastHoveredFeature = null; // create tooltip

    this.hoverTooltip = new _c4gMapsMiscTooltippopup.TooltipPopUp({
      map: this.map,
      offset: [10, 10],
      orientation: this.options.mapController.data.tooltipOrientation || "bottom-left",
      horizontal: true,
      closeable: false
    });
    this.hoverTooltip.hide();

    if (this.options.activate) {
      this.activate();
    }
  }
  /**
   * @TODO: [activate description]
   *
   * @return  {[type]}  [description]
   */


  (0, _createClass2["default"])(MapHover, [{
    key: "activate",
    value: function activate() {
      if (!this.listenerKey) {
        this.listenerKey = this.map.on('pointermove', this.getHoverFunction(), this); //this.map.on('pointermove', this.changeFeatureStyles(), this);
      }
    } // end of "activate()"

    /**
     * @TODO: [deactivate description]
     *
     * @return  {[type]}  [description]
     */

  }, {
    key: "deactivate",
    value: function deactivate() {
      if (this.listenerKey) {
        (0, _Observable.unByKey)(this.listenerKey);
        this.listenerKey = false;
      }
    } // end of "deactivate()"

    /**
     * @TODO: [isActive description]
     *
     * @return  {[type]}  [description]
     */

  }, {
    key: "isActive",
    value: function isActive() {
      if (this.listenerKey) {
        return true;
      }

      return false;
    } // end of "getState()"

    /**
     * @TODO: [getHoverFunction description]
     *
     * @return  {[type]}  [description]
     */

  }, {
    key: "getHoverFunction",
    value: function getHoverFunction() {
      var self = this;
      return function (event) {
        var hovered,
            clustered,
            tooltipContent,
            tooltipHelper,
            features,
            tooltipLength,
            resolution,
            canvas,
            mapData = self.options.mapController.data,
            proxy = self.options.mapController.proxy;
        clustered = false;
        hovered = self.map.forEachFeatureAtPixel(event.pixel, function (feature, layer) {
          return {
            feature: feature,
            layer: layer
          };
        });
        resolution = self.map.getView().getResolution();

        if (!hovered) {
          self.hoverTooltip.hide();
          canvas = document.querySelector(".ol-viewport");
          jQuery(canvas).css('cursor', 'default');

          if (mapData.hover_popups === '1' && mapData.hover_popups_stay != '1') {
            window.c4gMapsPopup.$popup.removeClass(_c4gMapsConstant.cssConstants.ACTIVE);
          }

          if (self.lastHoveredFeature && self.lastFeatureStyle) {
            self.lastHoveredFeature.setStyle(false);
            self.lastHoveredFeature = null;
          }

          return false;
        }

        canvas = document.querySelector(".ol-viewport");
        jQuery(canvas).css('cursor', 'pointer');

        if (hovered.feature && typeof hovered.feature.get === 'function' && hovered.feature.get('features')) {
          if (hovered.feature.get('features')[1]) {
            clustered = true;
          } else {
            hovered.feature = hovered.feature.get('features')[0];
          }
        }

        if (hovered.feature.getGeometry() && hovered.feature.getGeometry().getType() === 'LineString') {
          return false;
        }

        if (hovered.feature.get("hover_location") || self.lastHoveredFeature && self.lastHoveredFeature.get("hover_location")) {
          if (self.lastHoveredFeature && hovered.feature === self.lastHoveredFeature) {
            return false;
          } //set back styles when the features are not hovered anymore


          if (self.lastFeatureStyle) {
            if (self.lastHoveredFeature) {
              if (hovered.feature !== self.lastHoveredFeature) {
                if (self.lastFeatureStyle) {
                  self.lastHoveredFeature.setStyle(self.lastFeatureStyle); //console.log("Changed back feature style");
                } else if (self.lastLayerStyle) {
                  self.lastHoveredFeature.setStyle(self.lastLayerStyle); //console.log("Changed back layer-feature style");
                }
              }
            }
          }

          if (hovered.feature && (0, _typeof2["default"])(hovered.feature.getStyleFunction) && typeof hovered.feature.getStyleFunction === 'function' && typeof hovered.feature.getStyleFunction() === 'function') {
            self.lastHoveredFeature = hovered.feature;

            if (!(self.lastFeatureStyle = hovered.feature.getStyle())) {
              self.lastLayerStyle = hovered.layer.getStyle();
              self.lastFeatureStyle = self.lastLayerStyle(self.lastHoveredFeature);
            } //TODO get onhover style from db (vllt schon in proxy drin?)


            if (hovered.feature.get('hover_style') && proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")]) {
              if (proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction) {
                hovered.feature.setStyle(Function("feature", "data", "map", proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction)(hovered.feature));
              } else {
                var style = proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].style(hovered.feature);
                hovered.feature.setStyle(style);
              }
            }
          } else if (hovered.layer && (0, _typeof2["default"])(hovered.layer.getStyleFunction) && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function') {
            if (hovered.feature) {
              self.lastHoveredFeature = hovered.feature;
            } else {
              self.lastHoveredFeature = hovered.layer.getSource().getFeatures()[0];
              self.lastHoveredFeature = self.lastHoveredFeature.get('features')[0];
            }

            self.lastLayerStyle = hovered.layer.getStyle();
            self.lastFeatureStyle = self.lastLayerStyle(self.lastHoveredFeature);

            if (hovered.feature.get('hover_style')) {
              if (!proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")]) {
                var arrIds = [];
                arrIds.push(hovered.feature.get("hover_style"));
                proxy.locationStyleController.loadLocationStyles(arrIds);
                self.lastHoveredFeature = null;
                return null;
              }

              if (proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction) {
                hovered.feature.setStyle(Function("feature", "data", "map", proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].fnStyleFunction)(hovered.feature));
              } else {
                var _style = proxy.locationStyleController.arrLocStyles[hovered.feature.get("hover_style")].style(hovered.feature);

                hovered.feature.setStyle(_style);
              }
            }
          }
        }

        if (hovered && hovered.feature && hovered.feature.get('styleUrl')) {
          //if this property is set, we have a feature that has none of our styles => no tooltip
          return false;
        } // catch the case the layer is a baselayer (vector tiles)


        if (hovered && hovered.layer && hovered.layer.type === "VECTOR_TILE") {
          return false;
        } // set hover tooltips


        tooltipContent = false;

        if (!clustered && hovered.feature && typeof hovered.feature.get === 'function' && (hovered.feature.get('tooltip') || hovered.feature.get('graphicTitle'))) {
          tooltipContent = hovered.feature.get('tooltip');

          if (!tooltipContent) {
            tooltipContent = hovered.feature.get('graphicTitle');
          } else if ((0, _typeof2["default"])(tooltipContent) === 'object' && tooltipContent.element && tooltipContent.element.childNodes[1]) {
            tooltipContent = tooltipContent.element.childNodes[1].innerHTML;
          } // @TODO: Check & fix

        } else if (hovered.feature && (0, _typeof2["default"])(hovered.feature.getStyleFunction) && hovered.feature.get('locstyle') && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.feature.get('locstyle')] && proxy.locationStyleController.arrLocStyles[hovered.feature.get('locstyle')].tooltip) {
          tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.feature.get('locstyle')].tooltip; // @TODO: Check
        } else if (hovered.layer && (0, _typeof2["default"])(hovered.layer.getStyleFunction) && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function' && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()] && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()].tooltip) {
          tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()()].tooltip;
        } else if (hovered.layer && typeof hovered.layer.getStyleFunction === 'function' && typeof hovered.layer.getStyleFunction() === 'function' && proxy.locationStyleController.arrLocStyles && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)] && proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)].tooltip) {
          tooltipContent = proxy.locationStyleController.arrLocStyles[hovered.layer.getStyleFunction()(null, null, 1)].tooltip;
        } else if (hovered.layer && hovered.layer.tooltip) {
          tooltipContent = hovered.layer.tooltip;
        }

        if (clustered && hovered.feature.get('features')) {
          features = hovered.feature.get('features');

          if (features[0].get('tooltip') && features[0].get('tooltip_length')) {
            tooltipContent = features[0].get('tooltip');
            tooltipLength = parseInt(features[0].get('tooltip_length'));

            for (var i = 1; i < features.length; i++) {
              if (features[i].get('tooltip') && features[i].get('tooltip') != '') {
                tooltipContent = tooltipContent + ', ' + features[i].get('tooltip');
              }
            }

            if (tooltipContent.length > tooltipLength + 3) {
              if (tooltipContent = tooltipContent.slice(0, tooltipLength)) {
                tooltipContent = tooltipContent + '...';
              }
            }
          } else if (hovered.layer.tooltip && hovered.layer.tooltip_length) {
            tooltipHelper = tooltipContent;
            tooltipContent = '';
            tooltipLength = parseInt(hovered.layer.tooltip_length);

            for (i = 0; i < features.length; i++) {
              var singleTooltip = _c4gMapsUtils.utils.replaceAllPlaceholders(tooltipHelper, features[i], hovered.layer, mapData.lang);

              if (singleTooltip != '') {
                if (tooltipContent == '') tooltipContent = singleTooltip;else tooltipContent = tooltipContent + ', ' + singleTooltip;
              }
            }

            if (tooltipContent.length > tooltipLength + 3) {
              if (tooltipContent = tooltipContent.slice(0, tooltipLength)) {
                tooltipContent = tooltipContent + '...';
              }
            }
          }
        }

        if (tooltipContent) {
          tooltipContent = _c4gMapsUtils.utils.decodeGeoJsonProperty(tooltipContent); // replace placeholders if possible

          if (hovered.feature.get('features')) {}

          tooltipContent = _c4gMapsUtils.utils.replaceAllPlaceholders(tooltipContent, hovered.feature, hovered.layer, mapData.lang);

          if (tooltipContent.trim()) {
            // popup config
            self.hoverTooltip.setPosition(event.coordinate);
            self.hoverTooltip.setContent(tooltipContent);
            self.hoverTooltip.show();
          } else {
            self.hoverTooltip.hide();
          }
        } else {
          self.hoverTooltip.hide();
        }

        if (mapData.hover_popups === '1' && !clustered && hovered.feature) {
          var popupInfos = {};

          if (hovered.feature.get('popup')) {
            popupInfos = hovered.feature.get('popup');
          } else if (hovered.feature.get('loc_linkurl')) {
            return;
          } else if (hovered.layer && hovered.layer.popup) {
            popupInfos = hovered.layer.popup;
          } else {
            return;
          }

          var coord = hovered.feature.getGeometry().getCoordinates();

          if (!coord || coord && coord[0] && coord[0].length) {
            var extent = hovered.feature.getGeometry().getExtent();
            coord = self.map.getCoordinateFromPixel(event.pixel);
            coord = [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
          }

          window.c4gMapsPopup.popup.setPosition(coord);

          if (popupInfos.content) {
            self.options.mapController.proxy.popupController.addPopUp(popupInfos.content);

            if (self.options.mapController.proxy.mapData.popupHandling !== '3') {
              window.c4gMapsPopup.$content.html('');
              window.c4gMapsPopup.$popup.addClass(_c4gMapsConstant.cssConstants.ACTIVE).addClass(_c4gMapsConstant.cssConstants.LOADING);
              window.c4gMapsPopup.spinner.show();
            }

            if (popupInfos.async === false || popupInfos.async == '0') {
              var objPopup = {};
              objPopup.popup = popupInfos;
              objPopup.feature = hovered.feature;
              objPopup.layer = hovered.layer; // Call the popup hook for plugin specific popup content

              if (window.c4gMapsHooks !== undefined && (0, _typeof2["default"])(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, {
                  popup: objPopup,
                  mapController: self.options.mapController
                });
              }

              self.options.mapController.proxy.popupController.setPopup(objPopup);
            } else {
              jQuery.ajax({
                dataType: "json",
                url: self.options.mapController.proxy.api_infowindow_url + '/' + popupInfos.content
              }).done(function (data) {
                var popupInfo = {
                  async: popupInfos.async,
                  content: data.content,
                  popup: popupInfos.popup,
                  routing_link: popupInfos.routing_link
                };
                var objPopup = {};
                objPopup.popup = popupInfo;
                objPopup.feature = hovered.feature;
                objPopup.layer = hovered.layer; // Call the popup hook for plugin specific popup content

                if (window.c4gMapsHooks !== undefined && (0, _typeof2["default"])(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                  _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, {
                    popup: objPopup,
                    mapController: self.options.mapController
                  });
                }

                self.options.mapController.proxy.popupController.setPopup(objPopup);
              });
            }
          } else {
            if (self.options.mapController.proxy.mapData.popupHandling !== '3') {
              window.c4gMapsPopup.$popup.removeClass(_c4gMapsConstant.cssConstants.ACTIVE);
            } else {
              self.options.mapController.proxy.popupController.close();
            }
          }
        }
      };
    } // end of "getHoverFunction()"

  }, {
    key: "changeFeatureStyles",
    value: function changeFeatureStyles() {//TODO: change style of features which are hovered and have the option to change style on hover enabled
    }
  }]);
  return MapHover;
}();

exports.MapHover = MapHover;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-spinner.js":
/*!******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-spinner.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Spinner = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _c4gMapsConstant = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
'use strict';

var Spinner = /*#__PURE__*/function () {
  /**
   * @TODO
   * [Spinner description]
   *
   * @constructor
   *
   * @param {Object=} opt_options Control options.
   */
  function Spinner(opt_options) {
    (0, _classCallCheck2["default"])(this, Spinner);
    var options, target, spinnerSpan;
    options = opt_options || {}; // default options

    options = jQuery.extend({
      className: '',
      target: '.' + _c4gMapsConstant.cssConstants.OL_VIEWPORT
    }, options);

    if (options.className) {
      options.className = ' ' + options.className;
    }

    this.element = document.createElement('div');
    this.element.className = _c4gMapsConstant.cssConstants.SPINNER + options.className + ' ' + _c4gMapsConstant.cssConstants.HIDE;
    jQuery(options.target).append(this.element);
    spinnerSpan = document.createElement('span');
    spinnerSpan.className = _c4gMapsConstant.cssConstants.ICON + ' ' + _c4gMapsConstant.cssConstants.ANIMATION_SPIN;
    this.element.appendChild(spinnerSpan);
    this.additionalActivationCounter = 0;
  }

  (0, _createClass2["default"])(Spinner, [{
    key: "show",
    value: function show() {
      if (jQuery(this.element).hasClass(_c4gMapsConstant.cssConstants.HIDE)) {
        jQuery(this.element).removeClass(_c4gMapsConstant.cssConstants.HIDE);
      } else {
        this.additionalActivationCounter += 1;
      }
    }
  }, {
    key: "hide",
    value: function hide() {
      if (jQuery(this.element).hasClass(_c4gMapsConstant.cssConstants.HIDE)) {//console.warn('Spinner is already hidden.');
      } else {
        if (this.additionalActivationCounter === 0) {
          jQuery(this.element).addClass(_c4gMapsConstant.cssConstants.HIDE);
        } else {
          this.additionalActivationCounter -= 1;
        }
      }
    }
  }]);
  return Spinner;
}();

exports.Spinner = Spinner;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-misc-tooltippopup.js":
/*!***********************************************************!*\
  !*** ./Resources/public/js/c4g-maps-misc-tooltippopup.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.TooltipPopUp = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _c4gMapsConstant = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");

var _ol = __webpack_require__(/*! ol */ "./node_modules/ol/index.js");

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
'use strict';

var TooltipPopUp = /*#__PURE__*/function () {
  /**
   * @TODO
   * [TooltipPopUp description]
   *
   * @constructor
   *
   * @param {Object=} opt_options Control options.
   */
  function TooltipPopUp(opt_options) {
    (0, _classCallCheck2["default"])(this, TooltipPopUp);
    var self, addClassName, closeButton;
    self = this;
    this.options = opt_options || {}; // default options

    this.options = jQuery.extend({
      // className: ''
      // closeFunction: null
      // map: null
      horizontal: false,
      closeable: false,
      offset: [1, -1],
      position: [0, 0]
    }, this.options); // prepare additional classes

    addClassName = '';

    if (this.options.className) {
      addClassName = ' ' + this.options.className;
    }

    if (this.options.horizontal) {
      addClassName += ' ' + _c4gMapsConstant.cssConstants.HORIZONTAL;
    }

    if (this.options.closeable) {
      addClassName += ' ' + _c4gMapsConstant.cssConstants.CLOSEABLE;
    }

    this.element = document.createElement('div');
    this.element.className = _c4gMapsConstant.cssConstants.TOOLTIP_POPUP + addClassName;

    if (this.options.closeable) {
      closeButton = document.createElement('button');
      closeButton.className = _c4gMapsConstant.cssConstants.ICON + ' ' + _c4gMapsConstant.cssConstants.POPUP_CLOSE;
      this.element.appendChild(closeButton);
      jQuery(closeButton).click(function () {
        self.close();
      });
    }

    this.contentContainer = document.createElement('div');
    this.element.appendChild(this.contentContainer);
    this.overlay = new _ol.Overlay({
      element: this.element,
      insertFirst: false,
      offset: this.options.offset,
      positioning: this.options.orientation
    });

    if (this.options.map) {
      this.options.map.addOverlay(this.overlay);
    }

    if (this.options.position) {
      this.overlay.setPosition(this.options.position);
    }
  }

  (0, _createClass2["default"])(TooltipPopUp, [{
    key: "close",
    value: function close() {
      if (typeof this.options.closeFunction === 'function') {
        this.options.closeFunction();
      }

      if (this.options.map) {
        this.options.map.removeOverlay(this.overlay);
      }
    }
    /**
     * @TODO
     * [show description]
     *
     * @return  {[type]}  [description]
     */

  }, {
    key: "show",
    value: function show() {
      if (jQuery(this.element).hasClass(_c4gMapsConstant.cssConstants.HIDE)) {
        jQuery(this.element).removeClass(_c4gMapsConstant.cssConstants.HIDE);
      }
    }
    /**
     * @TODO
     * [hide description]
     *
     * @return  {[type]}  [description]
     */

  }, {
    key: "hide",
    value: function hide() {
      if (!jQuery(this.element).hasClass(_c4gMapsConstant.cssConstants.HIDE)) {
        jQuery(this.element).addClass(_c4gMapsConstant.cssConstants.HIDE);
      }
    }
    /**
     * @TODO
     * [getContent description]
     *
     */

  }, {
    key: "getContent",
    value: function getContent() {
      return this.contentContainer.innerHTML;
    }
    /**
     * @TODO
     * [getPosition description]
     *
     */

  }, {
    key: "getPosition",
    value: function getPosition() {
      return this.overlay.getPosition();
    }
    /**
     * @TODO
     * [setContent description]
     *
     * @param  {[type]}  content  [description]
     */

  }, {
    key: "setContent",
    value: function setContent(content) {
      this.contentContainer.innerHTML = content;
    }
    /**
     * @TODO
     * [setPosition description]
     *
     * @param  {[type]}  coordinates  [description]
     */

  }, {
    key: "setPosition",
    value: function setPosition(coordinates) {
      this.overlay.setPosition(coordinates);
    }
  }]);
  return TooltipPopUp;
}(); // End of "add methods to TooltipPopUp"


exports.TooltipPopUp = TooltipPopUp;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-popup-info-de.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-popup-info-de.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.trim = trim;
exports.isMobile = isMobile;
exports.fnHeader = fnHeader;
exports.fnFooter = fnFooter;
exports.fnGetTranslate_Type = fnGetTranslate_Type;
exports.fnArztInfo = fnArztInfo;
exports.fnKraftwerkInfo = fnKraftwerkInfo;
exports.fnWertstoffinfo = fnWertstoffinfo;
exports.fnAdditionalBuildingInfos = fnAdditionalBuildingInfos;
exports.fnSicherheitAdditional = fnSicherheitAdditional;
exports.fnWreckInfo = fnWreckInfo;
exports.fnKlosterAdditional = fnKlosterAdditional;
exports.fnContentSports = exports.fnContentStreetsTraffic = exports.fnContentHydrants = exports.fnContentShipping = exports.fnContentCuisine = exports.fnContentEmergency = exports.fnContentInformationCity = exports.fnContentStorage = exports.fnContentAmenity = exports.fnContentTourism = exports.fnContentBarriers = exports.fnContentHistoric = exports.fnContentPetrol = exports.fnContentRoute = exports.fnMessstation = exports.fnContentLanduse = exports.fnContentProtectedArea = exports.fnContentNatural = exports.fnContentAerodrome = exports.fnContent = exports.fnReducedInfoPopup = exports.fnStandardInfoPopup = void 0;

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
function trim(b) {
  return b.replace(/^\s+/, "").replace(/\s+$/, "");
}

function isMobile() {
  return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4));
}

function translate(b) {
  var a = trim(b);
  return "yes" == a || "Yes" == a ? "Ja" : "no" == a ? "Nein" : "No" == a ? "nein" : "limited" == a ? "Eingeschr\xE4nkt" : "designated" == a ? "Ja" : "wood" == a ? "Holz" : "metal" == a ? "Metall" : "concrete" == a ? "Beton" : "plastic" == a ? "Plastik" : "stone" == a ? "Stein" : "steel" == a ? "Stahl" : "brick" == a ? "Ziegel" : "reinforced_concrete" == a ? "Stahlbeton" : "masonry" == a ? "Mauerwerk" : b;
}

var fnStandardInfoPopup = function fnStandardInfoPopup(feature, imageSrc) {
  var attr = feature.getProperties();
  var result = "";
  result += fnHeader(attr, imageSrc);
  result += fnContent(attr);
  result += fnFooter(attr, feature.get("osm_type") + "/" + feature.getId());
  result = '<div class="c4g_popup_text">' + result + "</div>";
  return result;
},
    fnReducedInfoPopup = function fnReducedInfoPopup(b, a) {
  var c = b.getProperties(),
      d = "",
      e = !1,
      f;
  f = "function" === typeof a ? a.call(b)[0].getImage().getSrc() : a.getImage().getSrc();
  if ("restaurant" == c.amenity || "pub" == c.amenity || "biergarten" == c.amenity) e = !0;
  "hotel" == c.tourism && (e = !0);
  "guest_house" == c.tourism && (e = !0);
  "chalet" == c.tourism && (e = !0);
  "hostel" == c.tourism && (e = !0);
  "alpine_hut" == c.tourism && (e = !0);
  if ("artwork" == c.tourism || "artwork" == c.amenity) e = !0;
  if ("museum" == c.tourism || "museum" == c.amenity) e = !0;
  "cinema" == c.amenity && (e = !0);
  "theatre" == c.amenity && (e = !0);
  if ("attraction" == c.amenity || "fountain" == c.amenity || "monument" == c.historic || "city_gate" == c.historic || "ruins" == c.historic || "castle" == c.historic || "attraction" == c.tourism) e = !0;
  "playground" == c.leisure && (e = !0);
  c.aerialway && (e = !0);
  if ("swimming_pool" == c.amenity || "swimming_pool" == c.leisure || "swimming" == c.sport) e = !0;
  "station" == c.railway && (e = !0);
  "swimming" == c.sport && (e = !0);
  "swimming_pool" == c.leisure && (e = !0);
  "swimming_pool" == c.amenity && (e = !0);
  "waterpark" == c.leisure && (e = !0);
  c.water_park && (e = !0);
  "sports_centre" == c.leisure && (e = !0);

  switch (e) {
    case !1:
      d += fnHeader(c, f);
      d += fnContent(c);
      d += fnFooter(c, b.get("osm_type") + "/" + b.getId());
      break;

    case !0:
      d += fnHeader(c, f);
  }

  return '<div class="c4g_popup_text">' + d + "</div>";
};

exports.fnReducedInfoPopup = fnReducedInfoPopup;
exports.fnStandardInfoPopup = fnStandardInfoPopup;

function fnHeader(b, a) {
  var c = "",
      d = "32px";

  if (b.name || b["piste:name"] || b["xmas:name"] || b["xmas:location"]) {
    if (b.name) var e = b.name;
    b["piste:name"] && (e = b["piste:name"]);
    b["xmas:name"] && (e = b["xmas:name"]);
    b["xmas:location"] && (e = b["xmas:location"]);
    c += a ? '<img src="' + a + '" width="' + d + '" name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>" : '<name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>";
  } else a && (c += '<img src="' + a + '" width="' + d + '" name="' + a + '" alt="' + a + '">');

  c += fnGetTranslate_Type(b);
  return '<div class="c4g_popup_header">' + c + "</div>";
}

function fnFooter(b, a) {
  var c = "",
      d = !1;
  b["addr:housename"] && (c += "Geb\xE4udename: " + b["addr:housename"] + "<br/>", d = !0);
  b["addr:floor"] ? (c += "Etage: " + b["addr:floor"] + "<br/>", d = !0) : b["addr:level"] && (c += "Etage: " + b["addr:level"] + "<br/>", d = !0);
  b["addr:street"] && (c += b["addr:street"], c = b["addr:housenumber"] ? c + (" " + b["addr:housenumber"] + "<br/>") : c + "<br/>", d = !0);
  b["addr:postcode"] && (c += b["addr:postcode"] + " ");
  b["addr:city"] && (c += b["addr:city"] + "<br/>", d = !0);
  if (b.sqkm) if (b.sqkm = "" + b.sqkm, 3 < b.sqkm.length) {
    var e = b.sqkm.length % 3,
        f = 0 < e ? b.sqkm.substring(0, e) : "";

    for (var i = 0; i < Math.floor(b.sqkm.length / 3); i++) {
      f = 0 == e && 0 == i ? f + b.sqkm.substring(e + 3 * i, e + 3 * i + 3) : f + ("." + b.sqkm.substring(e + 3 * i, e + 3 * i + 3));
    }

    c += "Fl\xE4che: " + f + " Km\xB2<br/>";
  } else c += "Fl\xE4che " + b.sqkm + "<br/>";
  b["contact:phone"] && (c = isMobile() ? c + ('Telefon: <a href="tel:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>") : c + ('Telefon: <a href="callto:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>"), d = !0);
  b.phone && (c = isMobile() ? c + ('Telefon: <a href="tel:' + b.phone + '">' + b.phone + "</a><br/>") : c + ('Telefon: <a href="callto:' + b.phone + '">' + b.phone + "</a><br/>"), d = !0);
  b["contact:fax"] ? (c += "Telefax: " + b["contact:fax"] + "<br/>", d = !0) : b.fax && (c += "Telefax: " + b.fax + "<br/>", d = !0);
  b["contact:email"] ? (c += 'E-Mail-Adresse: <a href="mailto:' + b["contact:email"] + '">' + b["contact:email"] + "</a><br/>", d = !0) : b.email && (c += 'E-Mail-Adresse: <a href="mailto:' + b.email + '">' + b.email + "</a><br/>", d = !0);
  d && (c += "<br/>");

  if (b.opening_hours) {
    d = b.opening_hours;

    for (e = 0; 0 == e || 0 < d.indexOf(";");) {
      d = d.replace("PH", "FT"), d = d.replace("Tu", "Di"), d = d.replace("We", "Mi"), d = d.replace("Th", "Do"), d = d.replace("Su", "So"), d = d.replace("Mar", "M\xE4r"), d = d.replace("May", "Mai"), d = d.replace("Oct", "Okt"), d = d.replace("Dec", "Dez"), d = d.replace('"Please make a reservation"', '"Bitte vereinbaren Sie einen Termin"'), d = d.replace("off", "ausgenommen"), 0 < e && (d = d.replace(";", "<br/>")), e++;
    }

    c += "\xD6ffnungszeiten: <br/><div class=\"c4g_open_text\">" + d + "</div>";
    c = 0 < d.indexOf("FT") ? c + "(FT = Feiertag)<br/>" : c + "<br/>";
  }

  if (b["xmas:opening_hours"]) {
    d = b["xmas:opening_hours"];

    for (e = 0; 0 == e || 0 < d.indexOf(";");) {
      d = d.replace("PH", "FT"), d = d.replace("Tu", "Di"), d = d.replace("We", "Mi"), d = d.replace("Th", "Do"), d = d.replace("Su", "So"), d = d.replace("Mar", "M\xE4r"), d = d.replace("May", "Mai"), d = d.replace("Oct", "Okt"), d = d.replace("Dec", "Dez"), 0 < e && (d = d.replace(";", "<br/>")), e++;
    }

    c += "\xD6ffnungszeiten: <br/><div class=\"c4g_open_text\">" + d + "</div>";
    c = 0 < d.indexOf("FT") ? c + "(FT = Feiertag)<br/>" : c + "<br/>";
  }

  b["xmas:url"] && (d = "", d = b["xmas:url"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Website: <a href="' + d + '" target="_blank">Link zur Website</a><br/>');
  b["contact:website"] ? (d = b["contact:website"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Website: <a href="' + d + '" target="_blank">Link zur Website</a><br/>') : b.website && (d = b.website, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Website: <a href="' + d + '" target="_blank">Link zur Website</a><br/>');
  b.wikipedia && (d = b.wikipedia, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://wikipedia.org/wiki/" + d), c += 'Wikipedia: <a href="' + d + '" target="_blank">Link zu Wikipedia</a><br/>');
  b.wikimedia_commons && (d = b.wikimedia_commons, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://commons.wikimedia.org/wiki/" + d), c += 'Wikimedia: <a href="' + d + '" target="_blank">Link zu Wikimedia</a><br/>');
  b["contact:webcam"] && (d = b["contact:webcam"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'Webcam: <a href="' + d + '" target="_blank">Link zur Webcam</a><br/>');
  b.image && (c += '<img src="' + b.image + '" width="200px" name="' + b.name + '" alt="' + b.name + '"><br/>');
  d = "";
  b.internet_access && (d += "Internetzugriff: " + translate(b.internet_access) + "<br/>");
  b["internet_access:fee"] && (d += "Internet Geb\xFChr: " + translate(b["internet_access:fee"]) + "<br/>");
  b["wifi_access:operator"] && (d += "wifi Betreiber: " + b["wifi_access:operator"] + "<br/>");
  b["wifi_access:technology"] && (d += "wifi Technologie: " + b["wifi_access:technology"] + "<br/>");
  b["wifi_access:ssid"] && (d += "wifi ssid: " + b["wifi_access:ssid"] + "<br/>");
  "" != d && (c += 'Internetzugang vorhanden<br/><div class="c4g_shop_internet_access">' + d + "</div><br/>");
  b.wheelchair && (c += "rollstuhlgeeignet: " + translate(b.wheelchair) + "<br/>");
  b["wheelchair:description"] && (c += "Beschreibung: " + b["wheelchair:description"] + "<br/>");
  b["wheelchair:entrance_width"] && (c += "Breite des Eingangs in CM: " + b["wheelchair:entrance_width"] + "<br/>");
  b["wheelchair:step_height"] && (c += "H\xF6he der Stufe am Eingang in CM: " + b["wheelchair:step_height"] + "<br/>");
  b["wheelchair:rooms"] && (c += "Anzahl rollstuhlgerechter R\xE4ume: " + b["wheelchair:rooms"] + "<br/>");
  b["wheelchair:places"] && (c += "Anzahl der Rollstuhlpl\xE4tze: " + b["wheelchair:places"] + "<br/>");
  b["cent:places"] && (c += "Anzahl der Rollstuhlpl\xE4tze: " + b["wheelchair:places"] + "<br/>");
  b["ramp:wheelchair"] && (c += "Rampe f\xFCr Rollstuhlfahrer: " + b["ramp:wheelchair"] + "<br/>");
  b["capacity:disabled"] && (c += "Behindertenparkpl\xE4tze: " + translate(b["capacity:disabled"]) + "<br/>");
  b["toilets:wheelchair"] && (c += "Behinderdengerechte Toilette: " + translate(b["toilets:wheelchair"]) + "<br/>");
  b.centralkey && (c += "Zentralschl\xFCssel: " + b.centralkey + "<br/>");
  b.note && (c += b.note + "<br/>");
  b.description && (c += b.description + "<br/>");
  b.operator && (c += "Betreiber: " + b.operator + "<br/>");
  b.ref && (c += "Referenz: " + b.ref + "<br/>");
  "yes" == b.lit && (c += "Dieses Objekt ist beleuchtet.<br/>");
  b.shop && (d = "", b.brand && (d += "Markenzeichen: " + b.brand + "<br/>"), b.sells && (d += "Verkaufs: " + b.sells + "<br/>"), b.origin && (d += "Herkunftsl\xE4nder: " + b.origin + "<br/>"), "yes" == b.wholesale && (d += "Gro\xDFh\xE4ndler: Ja<br/>"), "" != d && (c += 'Weitere Angaben zum Shop: <br/><div class="c4g_shop_text">' + d + "</div><br/>"));
  a && (d = a, trim(d), d = d.replace(/\./, "/"), c = c + "<br/>" + ('OSM:    <a href="http://www.openstreetmap.org/' + d + '" target="_blank">Link zur OpenStreetMap</a><br/>'));
  return c = '<div class="c4g_popup_footer">' + c + "</div>";
}

function fnGetTranslate_Type(b) {
  var a = "";
  if ("doctors" == b.amenity || "doctor" == b.healthcare) a += "Arzt<br/>";
  if ("hospital" == b.amenity || "clinic" == b.amenity || "hospital" == b.healthcare || "clinic" == b.healthcare) a = "yes" == b.emergency ? a + "Krankenhaus mit Notaufnahme<br/>" : a + "Krankenhaus<br/>";
  "dentist" == b.amenity && (a += "Zahnarzt<br/>");
  if ("pharmacy" == b.amenity || "pharmacy" == b["health_facility:type"]) a += "Apotheke<br/>";
  if ("physiotherapist" == b.healthcare || "yes" == b["health_speciality:physiotherapy"]) a += "Physiotherapeut<br/>";
  if ("occupational_therapist" == b.healthcare || "yes" == b["health_speciality:occupational_therapy"] || "yes" == b["health_specialty:occupational_therapy"]) a += "Ergotherapeut<br/>";
  if ("psychotherapist" == b.healthcare || "yes" == b["health_speciality:psychotherapy"]) a += "Psychotherapeut<br/>";
  "alternative" == b.healthcare && (a += "Alternativ- und Komplement\xE4rmediziner<br/>");
  "midwife" == b.healthcare && (a += "Hebamme<br/>");
  if ("speech_therapist" == b.healthcare || "yes" == b["health_speciality:speech_therapy"]) a += "Logop\xE4de<br/>";
  "yes" == b["health_speciality:music_therapy"] && (a += "Musiktherapeut<br/>");
  "veterinary" == b.amenity && (a += "Tierarzt<br/>");
  "fire_station" == b.amenity && (a += "Feuerwehrhaus<br/>");
  "fire_extinguisher" == b.emergency && (a += "Feuerl\xF6scher<br/>");
  "aed" == b.emergency && (a += "Mobiler Defibrilator<br/>");
  "defibrillator" == b.emergency && (a += "Mobiler Defibrilator<br/>");
  "phone" == b.emergency && (a += "Notrufs\xE4ule<br/>");
  "police" == b.amenity && (a += "Polizeiwache<br/>");
  "ambulance_station" == b.emergency && (a += "Rettungswache<br/>");
  "technical" == b.emergency_service && (a += "Technisches Hilfswerk<br/>");
  "water" == b.emergency_service && (a += "Wasserrettungsstation<br/>");
  "baywatch" == b.waterway && (a += "Wasserwacht<br/>");
  "air" == b.emergency_service && (a += "Rettungshubschrauber<br/>");
  "emergency_access_point" == b.highway && (a += "Notfallpunkt<br/>");
  if ("lifeboat_station" == b.amenity || "lifeboat_station" == b.emergency) a += "Rettungsbootstation<br/>";
  "life_ring" == b.emergency && (a += "Rettungsring<br/>");
  "siren" == b.emergency && (a += "Sirene<br/>");
  "life_ring" == b.amenity && (a += "Rettungsring<br/>");
  "rescue_station" == b.amenity && (a += "Rettungsstation<br/>");
  "fire_hydrant" == b.emergency && ("underground" == b["fire_hydrant:type"] ? a += "Unterflurhydrant<br/>" : "pillar" == b["fire_hydrant:type"] ? a += "\xDCberflurhydrant<br/>" : "wall" == b["fire_hydrant:type"] ? a += "Wandhydrant<br/>" : "pond" == b["fire_hydrant:type"] && (a += "Saugstelle<br/>"));
  "suction_point" == b.emergency && (a += "Saugstelle<br/>");
  "fire_water_pond" == b.emergency && (a += "L\xF6schteich<br/>");
  "mountain" == b.emergency_service && (a += "Bergrettungsstation<br/>");
  "water_tank" == b.emergency && (a += "L\xF6schwassertank<br/>");
  "container" == b.recycling_type && (a += "Recycling Container<br/>");
  "recycling" == b.amenity && "yes" == b["recycling:excrement"] || "pump-out" == b["seamark:small_craft_facility:category"] ? a += "Absaugstation<br/>" : "recycling" == b.amenity && (a += "Wertstoffhof<br/>");
  "yes" == b["diet:pescetarian"] ? a += "pescetarische Gerichte vorhanden<br/>" : "only" == b["diet:pescetarian"] && (a += "nur pescetarische Gerichte<br/>");
  "yes" == b["diet:vegetarian"] ? a += "vegetarische Gerichte vorhanden<br/>" : "only" == b["diet:vegetarian"] && (a += "nur vegetarische Gerichte<br/>");
  "yes" == b["diet:lacto_vegetarian"] ? a += "lacto-vegetarische Gerichte vorhanden<br/>" : "only" == b["diet:lacto_vegetarian"] && (a += "nur lacto-vegetarische Gerichte<br/>");
  "yes" == b["diet:ovo_vegetarian"] ? a += "ovo-vegetarische Gerichte vorhanden<br/>" : "only" == b["diet:ovo_vegetarian"] && (a += "nur ovo-vegetarische Gerichte<br/>");
  "yes" == b["diet:vegan"] ? a += "vegane Gerichte vorhanden<br/>" : "only" == b["diet:vegan"] && (a += "nur vegane Gerichte<br/>");
  "yes" == b["diet:fruitarian"] ? a += "frutarische Gerichte vorhanden<br/>" : "only" == b["diet:fruitarian"] && (a += "nur frutarische Gerichte<br/>");
  "yes" == b["diet:raw"] ? a += "rohk\xF6stliche Gerichte vorhanden<br/>" : "only" == b["diet:raw"] && (a += "nur rohk\xF6stliche Gerichte<br/>");
  "yes" == b["diet:gluten_free"] ? a += "glutenfreie Gerichte vorhanden<br/>" : "only" == b["diet:gluten_free"] && (a += "nur glutenfreie Gerichte<br/>");
  "yes" == b["diet:dairy_free"] ? a += "milchfreie Gerichte vorhanden<br/>" : "only" == b["diet:dairy_free"] && (a += "nur milchfreie Gerichte<br/>");
  "yes" == b["diet:lactose_free"] ? a += "laktosefreie Gerichte vorhanden<br/>" : "only" == b["diet:lactose_free"] && (a += "nur laktosefreie Gerichte<br/>");
  "yes" == b["diet:halal"] ? a += "Hal\u0101l Gerichte vorhanden<br/>" : "only" == b["diet:halal"] && (a += "nur Hal\u0101l Gerichte<br/>");
  "yes" == b["diet:kosher"] ? a += "koschere Gerichte vorhanden<br/>" : "only" == b["diet:kosher"] && (a += "nur koschere Gerichte<br/>");
  "pub" == b.amenity && (a += "Gastst\xE4tte<br/>");
  "bar" == b.amenity && (a += "Bar<br/>");
  "yes" == b.frozen_yogurt && (a += "Frozen Yogurt im Angebot<br/>");
  "yes" == b.slush_ice && (a += "Slush Ice im Angebot<br/>");
  "yes" == b.cake && (a += "Kuchenteilchen, Geb\xE4ck etc. im Angebot<br/>");
  "yes" == b.coffee && (a += "Kaffeegetr\xE4nke im Angebot<br/>");
  "yes" == b.drinks && (a += "Getr\xE4nke im Angebot<br/>");
  "biergarten" == b.amenity && (a += "Biergarten<br/>");
  "restaurant" == b.amenity && (a += "Restaurant<br/>");
  "fast_food" == b.amenity && (a += "Fast Food Restaurant<br/>");
  if (("cafe" == b.amenity || "coffee_shop" == b.amenity) && "ice_cream" != b.cuisine) a += "Caf\xE9, Bistro<br/>";
  if ("cafe" == b.amenity && "ice_cream" == b.cuisine || "ice_cream" == b.amenity) a += "Eiscafe<br/>";
  "alpine_hut" == b.tourism && (a += "Bergh\xFCtte<br/>");
  "aquarium" == b.tourism && (a += "Aquarium<br/>");
  "apartment" == b.tourism && (a += "Ferienwohnung<br/>");
  "attraction" == b.tourism && (a += "Sehensw\xFCrdigkeit<br/>");
  "artwork" == b.tourism && (a += "Skulptur<br/>");
  "camp_site" == b.tourism && (a += "Campingplatz<br/>");
  "caravan_site" == b.tourism && (a += "Wohnmobilstellplatz<br/>");
  "chalet" == b.tourism && (a += "Ferienwohnung /-haus<br/>");
  "gallery" == b.tourism && (a += "Kunstgalerie<br/>");
  "guest_house" == b.tourism && (a += "Pension, Gasthaus, Bed & Breakfast<br/>");
  "hostel" == b.tourism && (a += "Jugendherberge, Hostel<br/>");
  "hotel" == b.tourism && (a += "Hotel<br/>");
  "motel" == b.tourism && (a += "Motel<br/>");
  "museum" == b.tourism && (a += "Museum<br/>");
  "picnic_site" == b.tourism && (a += "Rast- und Picknickplatz<br/>");
  "theme_park" == b.tourism && (a += "Freizeit- oder Themenpark<br/>");
  "viewpoint" == b.tourism && (a += "Aussichtspunkt<br/>");
  "wilderness_hut" == b.tourism && (a += "Schutzh\xFCtte<br/>");
  "wine_cellar" == b.tourism && (a += "Weinkeller<br/>");
  "zoo" == b.tourism && (a += "Zoo / Tierpark<br/>", "enclosure" == b.zoo && (a += "mit Wildgehege<br/>"), "petting_zoo" == b.zoo && (a += "mit Streichelzoo<br/>"), "falconry" == b.zoo && (a += "mit Falknerei<br/>"));
  "trail_riding_station" == b.tourism && (a += "Wanderreitstation<br/>");
  "fishing" == b.club && (a += "Angelverein<br/>");
  "sport" == b.club && "fishing" == b.sport && (a += "fishing club<br/>");
  "amateur_radio" == b.club && (a += "Amateurfunker<br/>");
  "art" == b.club && (a += "Kunstverein<br/>");
  "astronomy" == b.club && (a += "Astronomieverein<br/>");
  "automobile" == b.club && (a += "Automobilverein<br/>");
  "board_games" == b.club && (a += "Brettspielverein<br/>");
  "card_games" == b.club && (a += "Kartenspielverein<br/>");
  "charity" == b.club && (a += "Charity-Verein<br/>");
  "chess" == b.club && (a += "Schachverein<br/>");
  "cinema" == b.club && (a += "Kinoverein<br/>");
  "cooking" == b.club && (a += "Kochverein<br/>");
  "culture" == b.club && (a += "Kulturverein<br/>");
  "doityourself" == b.club && (a += "doityourself-Verein<br/>");
  "equestrian" == b.club && (a += "Reitverein<br/>");
  "ethnic" == b.club && (a += "Ethnischer Verein<br/>");
  "fan" == b.club && (a += "Fanverein<br/>");
  "freemasonry" == b.club && (a += "Freimaurer-Verein<br/>");
  "game" == b.club && (a += "Spieleverein<br/>");
  "history" == b.club && (a += "Historischer-Verein / Verein f\xFCr Geschichte<br/>");
  "hunting" == b.club && (a += "Jagdverein<br/>");
  "linux" == b.club && (a += "Linux-Verein<br/>");
  "motorcycle" == b.club && (a += "Motorradverein<br/>");
  "music" == b.club && (a += "Musikverein<br/>");
  "nature" == b.club && (a += "Naturverein<br/>");
  "nudism" == b.club && (a += "Nudisten-Verein / FKK-Verein<br/>");
  "photography" == b.club && (a += "Fotografieverein<br/>");
  "politics" == b.club && (a += "Verein f\xFCr Politik<br/>");
  "relegion" == b.club && (a += "Politischer-Verein<br/>");
  "scout" == b.club && (a += "Pfadfinderin/Pfadfinder<br/>");
  "smoke" == b.club && (a += "Raucherverein<br/>");
  "sport" == b.club && (a += "Sportverein<br/>");
  "theatre" == b.club && (a += "Theaterverein<br/>");
  "veterans" == b.club && (a += "Veteranen<br/>");
  "amusement_arcade" == b.leisure && (a += "Spielhalle<br/>");
  "beach_resort" == b.leisure && (a += "Standbad<br/>");
  "bird_hide" == b.leisure && (a += "Vogelbeobachtungspunkt<br/>");
  "common" == b.leisure && (a += "\xD6ffentliche Gr\xFCnfl\xE4chen<br/>");
  "club" == b.leisure && (a += "Club/Verein<br/>");
  "dance" == b.leisure && (a += "Tanzen<br/>");
  "dog_park" == b.leisure && (a += "Hundepark<br/>");
  "firepit" == b.leisure && (a += "Feuerstelle<br/>");
  "fishing" == b.leisure && (a += "Angelstelle<br/>");
  "garden" == b.leisure && (a += "Garten<br/>");
  "golf_course" == b.leisure && (a += "Golfplatz<br/>");
  "hackerspace" == b.leisure && (a += "Ort f\xFCr Hackertreffen<br/>");
  "horse_riding" == b.leisure && (a += "Reitstall / Reiterhof<br/>");
  "ice_rink" == b.leisure && (a += "Eislaufbahn<br/>");
  "nature_reserve" == b.leisure && (a += "Naturschutzgebiet (NSG)<br/>");
  "park" == b.leisure && (a += "Gr\xFCnanlage<br/>");
  "miniature_golf" == b.leisure && (a += "Minigolf<br/>");
  "pitch" == b.leisure && (a += "Spielfeld<br/>");
  "pitch" == b.leisure && "yes" == b.building && (a += "Sporthalle<br/>");
  "playground" == b.leisure && "yes" == b.building ? a += "Spielscheune<br/>" : "playground" == b.leisure && (a += "Spielplatz<br/>");
  "social_club" == b.leisure && (a += "Treffpunkt f\xFCr Freizeitgruppen<br/>");
  "spa" == b.leisure && (a += "Heilbad / Spa<br/>");
  "sports_centre" == b.leisure && (a += "Sportzentrum<br/>");
  "climbing_adventure" == b.sport && (a += "Seilgarten<br/>");
  "stadium" == b.leisure && (a += "Stadion<br/>");
  "swimming_pool" == b.leisure && (a += "Schwimmbecken<br/>");
  "track" == b.leisure && (a += "Rennbahn<br/>");
  "water_park" == b.leisure && (a += "Wasserpark<br/>");
  "wildlife_hide" == b.leisure && (a += "Wildbeobachtungspunkt<br/>");
  "adult_gaming_centre" == b.leisure && (a += "Spielothek<br/>");
  "bowling_alley" == b.leisure && "10pin" == b.sport && (a += "Bowlingcenter<br/>");
  "bowling_alley" == b.leisure && "9pin" == b.sport && (a += "Kegelbahn<br/>");
  if ("karting" == b.sport || "motor" == b.sport) a += "Kart-/Motorsport<br/>";
  if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";
  if (b["piste:type"]) switch (b["piste:type"]) {
    case "skitour":
      a += "Piste f\xFCr Skitouren<br/>";
      break;

    case "downhill":
      a += "Skiabfahrt<br/>";
      break;

    case "sled":
      a += "Rodelberg / Rodelstrecke<br/>";
      break;

    case "nordic":
      a += "Langlauf Piste<br/>";
      break;

    case "hike":
      a += "Schneeschuh- und Winterwanderweg<br/>";
      break;

    case "snow_park":
      a += "Snow-Park<br/>";
  }
  if (b.sport) switch (b.sport) {
    case "surfing":
      a += "Surfen<br/>";
      break;

    case "kitesurfing":
      a += "Kitesurfen<br/>";
      break;

    case "water_ski":
      a += "Wasserski<br/>";
  }
  if (b.aerialway) switch (b.aerialway) {
    case "cable_bar":
      a += "Lift mit Gondeln<br/>";
      break;

    case "gondola":
      a += "Lift mit Gondeln<br/>";
      break;

    case "chair_lift":
      a += "Sessellift<br/>";
      break;

    case "mixed_lift":
      a += "Lift mit Sesseln und Gondeln<br/>";
      break;

    case "drag_lift":
      a += "Skilift<br/>";
      break;

    case "t-bar":
      a += "T-Lift<br/>";
      break;

    case "t-bar":
      a += "T-Lift (einseitig)<br/>";
      break;

    case "platter":
      a += "Lift mit Sitzscheibe<br/>";
      break;

    case "rope_tow":
      a += "B\xFCgellift<br/>";
      break;

    case "magic_carpet":
      a += "Bef\xF6rderungsband<br/>";
      break;

    default:
      a += "unbekannt";
  }
  "mosque" == b.building && (a += "Moschee<br/>");
  "synagogue" == b.building && (a += "Synagoge<br/>");
  "apartments" == b.building && (a += "Wohnung<br/>");
  "farm" == b.building && (a += "Farm<br/>");
  "hotel" == b.building && (a += "Hotel<br/>");
  "house" == b.building && (a += "Haus<br/>");
  "detached" == b.building && (a += "Freistehend<br/>");
  "residential" == b.building && (a += "Residenz<br/>");
  if ("domitory" == b.building || "residential plus" == b.building) a += "Wohnheim<br/>";
  "terrace" == b.building && (a += "Terrasse<br/>");
  "houseboat" == b.building && (a += "Hausboot<br/>");
  "bungalow" == b.building && (a += "Bungalow<br/>");
  "static_caravan" == b.building && (a += "Stehender Wohnwagen<br/>");
  "commercial" == b.building && (a += "Kommerziell<br/>");
  "retail" == b.building && (a += "Verkauf<br/>");
  "warehouse" == b.building && (a += "Lagerhaus<br/>");
  "bakehouse" == b.building && (a += "Backstube<br/>");
  "temple" == b.building && (a += "Tempel<br/>");
  "shrine" == b.building && (a += "Schrein<br/>");
  "civic" == b.building && (a += "B\xFCrgerlich<br/>");
  "stadium" == b.building && (a += "Stadium<br/>");
  "train_station" == b.building && (a += "Bahnhof<br/>");
  "university" == b.building && (a += "Universit\xE4t<br/>");
  "public" == b.building && (a += "\xD6ffentliches Geb\xE4ude<br/>");
  "bridge" == b.building && (a += "Br\xFCcke<br/>");
  "bunker" == b.building && (a += "Bunker<br/>");
  "cabin" == b.building && (a += "H\xFCtte<br/>");
  "conservatory" == b.building && (a += "Wintergarten<br/>");
  "construction" == b.building && (a += "Im Bau<br/>");
  "garage" == b.building && (a += "Garage<br/>");
  "garages" == b.building && (a += "Garagen<br/>");
  "greenhouse" == b.building && (a += "Gew\xE4chshaus<br/>");
  "hangar" == b.building && (a += "Hangar<br/>");
  "hut" == b.building && (a += "H\xFCtte<br/>");
  "pavillion" == b.building && (a += "Pavillion<br/>");
  "roof" == b.building && (a += "\xDCberdacht<br/>");
  "shed" == b.building && (a += "Gartenh\xE4uschen<br/>");
  "transformer_tower" == b.building && (a += "Transformator Turm<br/>");
  "service" == b.building && (a += "Service-Stelle<br/>");
  "kiosk" == b.building && (a += "Kiosk<br/>");
  "carport" == b.building && (a += "Carport<br/>");
  "ruins" == b.building && (a += "Ruinen<br/>");
  "gambling" == b.amenity && (a += "Spielhalle<br/>");
  "library" == b.amenity && (a += "B\xFCcherei<br/>");
  "fountain" == b.amenity && (a += "Brunnen<br/>");
  "attraction" == b.amenity && (a += "Sehensw\xFCrdigkeit<br/>");
  if ("social_centre" == b.amenity || "club" == b.amenity) a += "Verein / Club<br/>";
  "townhall" == b.amenity && (a += "Rathaus / B\xFCrgerhaus<br/>");
  "bench" == b.amenity && (a += "Parkbank<br/>");
  if ("grave_yard" == b.amenity || "cemetery" == b.landuse) a += "Friedhof<br/>";
  "post_box" == b.amenity && (a += "Briefkasten<br/>");
  "post_office" == b.amenity && (a += "Postamt<br/>");
  "telephone" == b.amenity && (a += "Telefon<br/>");
  "atm" == b.amenity && (a += "Geldautomat<br/>");
  "bank" == b.amenity && (a += "Bankfiliale<br/>");
  "toilets" == b.amenity && "yes" == b.diaper ? a += "\xD6ffentliche Toilette mit Wickeltisch<br/>" : "toilets" == b.amenity && (a += "\xD6ffentliche Toilette<br/>");
  "school" == b.amenity && "1" == b["isced:level"] ? a += "Grundschule<br/>" : "school" == b.amenity && "2" == b["isced:level"] ? a += "Sekundarstufe I<br/>" : "school" == b.amenity && "3" == b["isced:level"] ? a += "Sekundarstufe II<br/>" : "school" == b.amenity && (a += "Schule<br/>");
  "kindergarten" == b.amenity && (a += "Kindergarten<br/>");
  "internet_cafe" == b.amenity && (a += "Internetcaf\xE9<br/>");
  "daycare" == b.amenity && (a += "Kinder- und Jugendtagesst\xE4tte<br/>");
  "childcare" == b.amenity && (a += "Kinder- und Jugendtagesst\xE4tte<br/>");
  "university" == b.amenity && (a += "Universit\xE4t/Hochschule<br/>");
  "college" == b.amenity && (a += "Universit\xE4t/Hochschule<br/>");
  "shelter" == b.amenity && (a += "Unterstand<br/>");
  "bbq" == b.amenity && (a += "Grillplatz<br/>");
  "nightclub" == b.amenity && (a += "Diskothek / Nachtklub<br/>");
  "bicycle_parking" == b.amenity && (a += "Fahrradparkplatz<br/>");
  "bicycle_rental" == b.amenity && (a += "Fahrradverleih<br/>");
  "boat_sharing" == b.amenity && (a += "Bootsverleih<br/>");
  "car_sharing" == b.amenity && (a += "Car-Sharing<br/>");
  "cinema" == b.amenity && (a += "Kino<br/>");
  "swimming_pool" == b.amenity && (a += "Schwimmbad<br/>");
  if ("embassy" == b.amenity || "embassy" == b.diplomatic) a += "Botschaft<br/>";
  "embassy" == b.amenity && "consulate" == b.diplomatic && (a += "Konsulate<br/>");
  "embassy" == b.amenity && "consulate_general" == b.diplomatic && (a += "Generalkonsulate<br/>");
  "embassy" == b.amenity && "honorary_consulate" == b.diplomatic && (a += "Honorarkonsulate<br/>");
  "embassy" == b.amenity && "permanent_mission" == b.diplomatic && (a += "St\xE4ndige Vertretung<br/>");
  "embassy" == b.amenity && "delegation" == b.diplomatic && (a += "Delegation<br/>");
  "embassy" == b.amenity && "high_commission" == b.diplomatic && (a += "Hochkommissariat<br/>");
  "Barfusspfad" == b.amenity && (a += "Barfu\xDFpfad<br/>");
  "casino" == b.amenity && (a += "Casino<br/>");
  "spa" == b.amenity && (a += "Heilbad / Spa<br/>");
  "stables" == b.amenity && (a += "Reitstall / Reiterhof<br/>");
  "watering_place" == b.amenity && (a += "Wasserstelle / Tr\xE4nke<br/>");
  "yes" == b.watering_place && (a += "Wasserstelle / Tr\xE4nke<br/>");
  "water_point" == b.amenity && (a += "gro\xDFe Trinkwasserstelle<br/>");
  "taxi" == b.amenity && (a += "Taxi<br/>");
  "car_wash" == b.amenity && (a += "Autowaschanlage<br/>");
  "brothel" == b.amenity && (a += "Bordell, Freudenhaus<br/>");
  "stripclub" == b.amenity && (a += "Stripclub<br/>");
  "swingerclub" == b.amenity && (a += "Swingerclub<br/>");
  "planetarium" == b.amenity && (a += "Planetarium<br/>");
  "courthouse" == b.amenity && (a += "Gericht<br/>");
  "crematorium" == b.amenity && (a += "Krematorium<br/>");
  if ("crypt" == b.amenity || "crypt" == b.building) a += "Krypta<br/>";
  "hunting_stand" == b.amenity && (a += "Hochsitz<br/>");
  "photo_booth" == b.amenity && (a += "Fotoautomat<br/>");
  "prison" == b.amenity && (a += "Gef\xE4ngnis<br/>");
  "ranger_station" == b.amenity && (a += "National Park Ranger Station<br/>");
  "register_office" == b.amenity && (a += "Standesamt<br/>");
  "marketplace" == b.amenity && (a += "Marktplatz / Wochenmarkt<br/>");
  "solarium" == b.amenity && (a += "Solarium<br/>");
  "sauna" == b.amenity && (a += "Sauna<br/>");
  "shower" == b.amenity && (a += "\xF6ffentliche Dusche<br/>");
  if ("waste_disposal" == b.amenity && (a += "M\xFCllentsorgung auf \xF6ffentlichen Pl\xE4tzen<br/>", b.waste)) switch (a += "Art: ", b.waste) {
    case "trash":
      a += "Allgemeiner M\xFCll<br/>";
      break;

    case "oil":
      a += "Oil<br/>";
      break;

    case "drugs":
      a += "Pharmazeutisch<br/>";
      break;

    case "organic":
      a += "Kompost<br/>";
      break;

    case "plastic":
      a += "Plastik<br/>";
      break;

    case "rubble":
      a += "Schutt<br/>";
      break;

    case "cigarettes":
      a += "Zigaretten<br/>";
      break;

    default:
      a += "Allgemeiner M\xFCll<br/>";
  }
  if ("waste_basket" == b.amenity || "dog_excrement" == b.waste) a += "Hunde-Code M\xFCllcontainer<br/>";
  if ("scout_camp" == b.amenity || "scout_hut" == b.amenity || "scout_hall" == b.amenity) a += "Pfadfinderheim<br/>";
  "ferry_terminal" == b.amenity && (a += "F\xE4hrhafen<br/>");
  "bureau_de_change" == b.amenity && (a += "Geldwechselstube<br/>");
  "youth_club" == b.amenity && (a += "Jugendzentrum<br/>");
  "festival_grounds" == b.amenity && (a += "Festivalgel\xE4nde<br/>");
  if ("yes" == b.openfire || "yes" == b.fireplace) a += "Offene Feuerstelle<br/>";
  if ("vending_machine" == b.amenity) if (b.vending) switch (b.vending) {
    case "admission_tickets":
      a += "Eintrittskartenautomat<br/>";
      break;

    case "animal_feed":
      a += "Tierfutterautomat<br/>";
      break;

    case "bicycle_tube":
      a += "Fahrradschlauchautomat<br/>";
      break;

    case "books":
      a += "B\xFCcherautomat<br/>";
      break;

    case "candles":
      a += "Kerzenautomat<br/>";
      break;

    case "cigarettes":
      a += "Zigarettenautomat<br/>";
      break;

    case "chemist":
      a += "Apotheken/Drogerie Automat<br/>";
      break;

    case "condoms":
      a += "Kondomautomat<br/>";
      break;

    case "drinks":
      a += "Getr\xE4nkeautomat<br/>";
      break;

    case "electronics":
      a += "Automat f\xFCr Elektro-Zubeh\xF6r<br/>";
      break;

    case "elongated_coin":
      a += "M\xFCnzpr\xE4gungsautomat<br/>";
      break;

    case "excrement_bags":
      a += "Hundet\xFCtenspender<br/>";
      break;

    case "feminine_hygiene":
      a += "Automat f\xFCr Damenhygieneprodukte<br/>";
      break;

    case "first_aid":
      a += "Erste-Hilfe-Automat<br/>";
      break;

    case "fishing_tackle":
      a += "Automat f\xFCr Angelzubeh\xF6r<br/>";
      break;

    case "fishing_bait":
      a += "Angelk\xF6derautomat<br/>";
      break;

    case "flowers":
      a += "Blumenautomat<br/>";
      break;

    case "food":
      a += "Lebensmittel-Automat<br/>";
      break;

    case "ice_cubes":
      a += "Eisw\xFCrfelautomat<br/>";
      break;

    case "ice_cream":
      a += "Automat f\xFCr Speiseeis<br/>";
      break;

    case "ink_cartridges":
      a += "Druckerpatronen Automat<br/>";
      break;

    case "laundry_detergent":
      a += "Waschmittelautomat<br/>";
      break;

    case "public_transport_tickets":
      a += "Fahrkartenautomat<br/>";
      break;

    case "newspaper":
      a += "Zeitungsautomat<br/>";
      break;

    case "parcel_pickup":
      a += "Packstation<br/>";
      break;

    case "parcel_mail_in":
      a += "Paketstation<br/>";
      break;

    case "parking_tickets":
      a += "Parkscheinautomat<br/>";
      break;

    case "photos":
      a += "Fotoautomat<br/>";
      break;

    case "sex_toys":
      a += "Automat f\xFCr Sexspielzeug<br/>";
      break;

    case "SIM_cards":
      a += "Automat f\xFCr SIM Karten<br/>";
      break;

    case "stamps":
      a += "Briefmarkenautomat<br/>";
      break;

    case "sweets":
      a += "S\xFC\xDFigkeitenautomat<br/>";
      break;

    case "syringes":
      a += "Spritzenautomat<br/>";
      break;

    case "toll":
      a += "Maut-Automat<br/>";
      break;

    case "toys":
      a += "Spielzeugautomat<br/>";
      break;

    case "umbrellas":
      a += "Regenschirmautomat<br/>";
      break;

    default:
      a += "Verkaufsautomat<br/>";
  } else a += "Verkaufsautomat<br/>";
  "arts_centre" == b.amenity && (a += "Kulturzentrum<br/>");
  "artwork" == b.amenity && (a += "Kunstwerk / Kunstobjekt<br/>");
  "museum" == b.amenity && (a += "Museum<br/>");
  "theatre" == b.amenity && (a += "Theater<br/>");
  "cathedral" == b.building && (a += "Kathedrale<br/>");
  "church" == b.building && (a += "Kirche<br/>");
  "chapel" == b.building && (a += "Kapelle<br/>");
  "place_of_worship" == b.amenity && (a += "Kirche / Kultst\xE4tte<br/>");
  "village" == b.abandoned && (a += "Verlassene Stadt<br/>");
  "theme_park" == b["abandoned:tourism"] && (a += "Verlassener Vergn\xFCgungspark<br/>");
  "prison_camp" == b["abandoned:amenity"] && "concentration_camp" == ["concentration_camp"] && (a += "KZ Gedenkst\xE4tte<br/>");
  "yes" == b.abandoned && "bunker" == b.military && (a += "Verlassene Bunkeranlage<br/>");
  "yes" == b.abandoned && "barracks" == b.military && (a += "Verlassene Milit\xE4rbaracken<br/>");
  "yes" == b.abandoned && "airfield" == b.military && (a += "Verlassene Milit\xE4rflugplatz<br/>");
  "monastery" == b.historic && (a += "Historisches Kloster<br/>");
  "monastery" == b.amenity && (a += "Kloster<br/>");
  "monastery" == b.building && (a += "Kloster<br/>");
  "manor" == b.historic && (a += "Gutshaus / Herrenhaus<br/>");
  "boundary_stone" == b.historic && (a += "Historischer Grenzstein<br/>");
  "milestone" == b.historic && (a += "Historischer Meilenstein<br/>");
  "monument" == b.historic && (a += "Monument<br/>");
  "palace" == b.historic && (a += "Palast<br/>");
  "mine" == b.historic && (a += "Verlassene Mine<br/>");
  "ruins" == b.historic && (a += "Ruine<br/>");
  "harbour" == b.historic_usage && (a += "historischer Hafen<br/>");
  "rune_stone" == b.historic && (a += "Runenstein<br/>");
  "battlefield" == b.historic && (a += "Schlachtfeld<br/>");
  "blacksmith" == b.historic && (a += "Historische Schmiede<br/>");
  if ("tree_shrine" == b.historic || "wayside_shrine" == b.historic) a += "Schrein / Bildstock<br/>";
  "city_gate" == b.historic && (a += "Stadttor<br/>");
  "wayside_cross" == b.historic && (a += "Wegkreuz<br/>");
  "monument" == b.amenity && (a += "Denkmal<br/>");
  "memorial" == b.historic && (a += "Denkmal<br/>");
  "optical_telegraph" == b.historic && (a += "Optischer Telegraph<br/>");
  if ("castle" == b.historic) if (b.castle_type) switch (b.castle_type) {
    case "defensive":
      a += "Burg<br/>";
      break;

    case "palace":
      a += "Palast<br/>";
      break;

    case "stately":
      a += "Schloss<br/>";
      break;

    case "manor":
      a += "Herrenhaus<br/>";
      break;

    case "fortress":
      a += "Festung<br/>";
      break;

    case "castrum":
      a += "R\xF6misches Milit\xE4rlager<br/>";
      break;

    case "shiro":
      a += "Shiro<br/>";
      break;

    case "kremlin":
      a += "Kreml<br/>";
      break;

    default:
      a += "Schloss / Burg<br/>";
  } else a += "Schloss / Burg<br/>";
  "archaeological_site" == b.historic && (a += "Arch\xE4ologische Fundst\xE4tte<br/>");
  if ("tomb" == b.historic) if (b.tomb) switch (b.tomb) {
    case "tumulus":
      a += "H\xFCgelgrab<br/>";
      break;

    case "rock-cut":
      a += "Felsgrab<br/>";
      break;

    case "hypogeum":
      a += "Hypog\xE4um<br/>";
      break;

    case "war_grave":
      a += "Soldatenfriedhof<br/>";
      break;

    case "mausoleum":
      a += "Mausoleum<br/>";
      break;

    case "columbarium":
      a += "Kolumbarium<br/>";
      break;

    case "crypt":
      a += "Krypta<br/>";
      break;

    case "pyramid":
      a += "Pyramide<br/>";
      break;

    case "sarcophagus":
      a += "Sarkophag<br/>";
      break;

    case "vault":
      a += "Gruft<br/>";
      break;

    case "tombstone":
      a += "Grabstein<br/>";
      break;

    default:
      a += "Historische Grabst\xE4tte<br/>";
  } else a += "Historische Grabst\xE4tte<br/>";
  "accountant" == b.office && (a += "Buchhalter / Wirtschaftpr\xFCfer<br/>");
  "administrative" == b.office && (a += "Kreis- bzw. Gemeindebeh\xF6rde<br/>");
  "architect" == b.office && (a += "Architekturb\xFCro<br/>");
  "association" == b.office && (a += "Verein, Vereinigung bzw. Interessengemeinschaft<br/>");
  "physician" == b.office && (a += "Arzt<br/>");
  "camping" == b.office && (a += "Rezeption Campingplatz oder B\xFCro Freizeitpark<br/>");
  "company" == b.office && (a += "Sitz einer privaten Firma<br/>");
  "educational_institution" == b.office && (a += "Bildungseinrichtung<br/>");
  "employment_agency" == b.office && (a += "Job-Center / Arbeitsvermittlung<br/>");
  "estate_agent" == b.office && (a += "Immobilienmakler / Wohnungsbaugenossenschaft<br/>");
  "forestry" == b.office && (a += "Forstamt<br/>");
  "foundation" == b.office && (a += "Gesch\xE4ftsstelle einer Stiftung<br/>");
  "government" == b.office && (a += "Beh\xF6rde / Regierungseinrichtung<br/>");
  "guide" == b.office && (a += "B\xFCro f\xFCr Touristenf\xFChrungen<br/>");
  "insurance" == b.office && (a += "Versicherungsb\xFCro<br/>");
  "it" == b.office && (a += "IT-Unternehmen<br/>");
  "lawyer" == b.office && (a += "Rechtsanwaltskanzlei<br/>");
  "newspaper" == b.office && (a += "Zeitungsredaktion<br/>");
  "ngo" == b.office && (a += "B\xFCro einer Nichtregierungsorganisation<br/>");
  "notary" == b.office && (a += "Notar<br/>");
  "political_party" == b.office && (a += "B\xFCro einer politischen Partei<br/>");
  "quango" == b.office && (a += "B\xFCro einer halbstaatlichen Organisation<br/>");
  "realtor" == b.office && (a += "Immobilienmakler / Wohnungsbaugenossenschaft<br/>");
  "real_estate_agent" == b.office && (a += "Immobilienmakler / Wohnungsbaugenossenschaft<br/>");
  "register" == b.office && (a += "Standesamt<br/>");
  "religion" == b.office && (a += "B\xFCro einer religi\xF6sen Instanz<br/>");
  "research" == b.office && (a += "Forschungsunternehmen oder -institut<br/>");
  "tax" == b.office && (a += "Finanzamt<br/>");
  "telecommunication" == b.office && (a += "Telekommunikationsfirma<br/>");
  "travel_agent" == b.office && (a += "Sitz eines Reiseunternehmens<br/>");
  "water_utility" == b.office && (a += "Wasserwirtschaftsamt<br/>");
  "therapist" == b.office && (a += "Therapeut<br/>");
  "city" == b.place && (a += "Gro\xDFstadt<br/>");
  "town" == b.place && (a += "Stadt/Kleinstadt<br/>");
  "village" == b.place && (a += "Dorf<br/>");
  "continent" == b.place && (a += "Kontinent<br/>");
  "ocean" == b.place && (a += "Ozean</br>");
  "track" == b.highway && (a += "Forst-, Wald und Feldweg<br/>");
  "raceway" == b.highway && (a += "Motorsportbahn<br/>");
  "designated" == b.bicycle && (a += "Radweg<br/>");
  "path" == b.highway && (a += "Fu\xDFweg<br/>");
  "parking" == b.amenity && (a += "Parkplatz<br/>");
  "services" == b.highway && (a += "Rastst\xE4tte<br/>");
  "rest_area" == b.highway && (a += "Rastplatz<br/>");
  "turning_circle" == b.highway && (a += "Wendeplatz/Wendehammer<br/>");
  "service" == b.highway && (a += "Zufahrtsstra\xDFe / Erschlie\xDFungsweg<br/>");
  "motorway" == b.highway && (a += "Autobahn<br/>");
  "motorway_junction" == b.highway && (a += "Autobahnauffahrt<br/>");
  "bridleway" == b.highway && (a += "Reitweg<br/>");
  "yes" == b.oneway && (a += "Einbahnstra\xDFe<br/>");
  "yes" == b.park_ride && (a += "Park and Ride<br/>");
  "unknown" == b.park_ride && (a += "Park and Ride<br/>");
  "bus" == b.park_ride && (a += "Park and Ride<br/>");
  "tram" == b.park_ride && (a += "Park and Ride<br/>");
  "bus_stop" == b.highway && (a += "Bushaltestelle<br/>");
  "pedestrian" == b.highway && (a += "Fu\xDFg\xE4ngerzone<br/>");
  "street_lamp" == b.highway && (a += "Strassenlaterne<br/>");
  "traffic_signals" == b.highway && (a += "Ampel<br/>");
  "traffic_signals" == b.crossing && (a += "Fu\xDFg\xE4ngerampel<br/>");
  "speed_camera" == b.highway && (a += "Blitzer<br/>");
  "yes" == b.traffic_calming && (ret += "Verkehrsberuhigter Bereich</br>");
  "bump" == b.traffic_calming && (a += "Kurze Bodenwelle</br>");
  "chicane" == b.traffic_calming && (a += "Zu umfahrendenes Hinderniss</br>");
  "choker" == b.traffic_calming && (a += "Fahrbahnverengung, zu umfahrende Hindernisse m\xF6glich</br>");
  "cushion" == b.traffic_calming && (a += "Bodenwelle mit L\xFCcken aus mehreren rechteckigen Huckeln</br>");
  "hump" == b.traffic_calming && (a += "vergleichbare Bodenwelle mit etwar einer L\xE4nge von 2-4M</br>");
  "island" == b.traffic_calming && (a += "Eine Verkehrsinsel</br>");
  "rumble_strip" == b.traffic_calming && (a += "Holperstreifen</br>");
  "table" == b.traffic_calming && (a += "lange Bodenwellen mit flachen Mittelst\xFCck</br>");
  "buoy_cardinal" == b["seamark:type"] && (a += "Kardinalstonne<br/>");
  "buoy_lateral" == b["seamark:type"] && (a += "Lateraltonne<br/>");
  "buoy_isolated_danger" == b["seamark:type"] && (a += "Gefahrentonne<br/>");
  "perch" == b["seamark:beacon_lateral:shape"] && (a += "Pricke<br/>");
  "fuel" == b.amenity && "fuel_station" == b["seamark:small_craft_facility:category"] ? a += "Schiffstankstelle<br/>" : "fuel" == b.amenity && (a += "Tankstelle<br/>");

  if ("charging_station" == b.amenity) {
    var a = a + "Ladestation / Stromtankstelle<br/>",
        c = b.voltage;

    if (b.car) {
      switch (b.car) {
        case "yes":
          a += "F\xFCr Autos: Ja";
          break;

        case "no":
          a += "F\xFCr Autos: Nein";
          break;

        default:
          a += "F\xFCr Autos: Unbekannt";
      }

      a += "<br/>";
    } else a += "F\xFCr Autos: Unbekannt<br/>";

    if (b.bicycle) {
      switch (b.bicycle) {
        case "yes":
          a += "F\xFCr E-Bike: Ja";
          break;

        case "no":
          a += "F\xFCr E-Bike: Nein";
          break;

        default:
          a += "F\xFCr E-Bike: Unbekannt";
      }

      a += "<br/>";
    } else a += "F\xFCr E-Bike: Unbekannt<br/>";

    "no" == b["socket:schuko"] && (a += "Stecker Schuko: Nein<br/>");
    "yes" == b["socket:schuko"] && (a += "Stecker Schuko: Ja<br/>");
    "no" == b["socket:cee_blue"] && (a += "Stecker CEE Blau: Nein<br/>");
    "yes" == b["socket:cee_blue"] && (a += "Stecker CEE Blau: Ja<br/>");
    "no" == b["socket:cee_red_16a"] && (a += "Stecker CEE Rot 16a: Nein<br/>");
    "yes" == b["socket:cee_red_16a"] && (a += "Stecker CEE Rot 16a: Ja<br/>");
    "no" == b["socket:cee_red_32a"] && (a += "Stecker CEE Rot 32a: Nein<br/>");
    "yes" == b["socket:cee_red_32a"] && (a += "Stecker CEE Rot 32a: Ja<br/>");
    "no" == b["socket:cee_red_64a"] && (a += "Stecker CEE Rot 64a: Nein<br/>");
    "yes" == b["socket:cee_red_64a"] && (a += "Stecker CEE Rot 64a: Ja<br/>");
    "no" == b["socket:cee_red_125a"] && (a += "Stecker CEE Rot 125a: Nein<br/>");
    "yes" == b["socket:cee_red_125a"] && (a += "Stecker CEE Rot 125a: Ja<br/>");
    "no" == b["socket:nema_5_15"] && (a += "Stecker Nema 5 15: Nein<br/>");
    "yes" == b["socket:nema_5_15"] && (a += "Stecker Nema 5 15: Ja<br/>");
    "no" == b["socket:nema_5_20"] && (a += "Stecker Nema 5 20: Nein<br/>");
    "yes" == b["socket:nema_5_20"] && (a += "Stecker Nema 5 20: Ja<br/>");
    "no" == b["socket:nema_14_30"] && (a += "Stecker Nema 14 30: Nein<br/>");
    "yes" == b["socket:nema_14_30"] && (a += "Stecker Nema 14 30: Ja<br/>");
    "Nein" == b["socket:nema_14_50"] && (a += "Stecker Nema 14  50: Nein<br/>");
    "yes" == b["socket:nema_14_50"] && (a += "Stecker Nema 14 50: Ja<br/>");
    "nein" == b["socket:bs1363"] && (a += "Stecker BS 1363: Nein<br/>");
    "yes" == b["socket:bs1363"] && (a += "Stecker BS 1363: Ja<br/>");
    "no" == b["socket:type1"] && (a += "Stecker Typ 1:Nein<br/>");
    "yes" == b["socket:type1"] && (a += "Stecker Typ 1: Ja<br/>");
    "no" == b["socket:type1_combo"] && (a += "Stecker Typ 1 Kombo: Nein<br/>");
    "yes" == b["socket:type1_combo"] && (a += "Stecker Typ 1 Kombo: Ja<br/>");
    "Nein" == b["socket:type2"] && (a += "Stecker Typ 2: Nein<br/>");
    "yes" == b["socket:type2"] && (a += "Stecker Typ 2: Ja<br/>");
    "no" == b["socket:type2_combo"] && (a += "Stecker Typ 2 Kombo: Nein<br/>");
    "yes" == b["socket:type2_combo"] && (a += "Stecker Typ 2 Kombo: Ja<br/>");
    "no" == b["socket:type3"] && (a += "Stecker Typ: Nein<br/>");
    "yes" == b["socket:type3"] && (a += "Stecker Typ 3: Ja<br/>");
    "no" == b["socket:chademo"] && (a += "Stecker CHAdeMO: Nein<br/>");
    "yes" == b["socket:chademo"] && (a += "Stecker CHAdeMO: Ja<br/>");
    "no" == b["socket:magne_charge"] && (a += "Stecker Magne : Nein<br/>");
    "yes" == b["socket:magne_charge"] && (a += "Stecker Magne : Ja<br/>");
    "no" == b["socket:tesla_standard"] && (a += "Stecker Tesla Standard: Nein<br/>");
    "yes" == b["socket:tesla_standard"] && (a += "Stecker Tesla Standard: Nein<br/>");
    "no" == b["socket:tesla_supercharge"] && (a += "Stecker Tesla Schnellladestation: Nein<br/>");
    "yes" == b["socket:tesla_supercharge"] && (a += "Stecker Tesla Schnellladestation: Ja<br/>");
    "no" == b["socket:tesla_roadster"] && (a += "Stecker Tesla Roadster: Nein<br/>");
    "yes" == b["socket:tesla_roadster"] && (a += "Stecker Tesla Roadster: Ja<br/>");
    b["socket:schuko"] && (a += "Stecker Schuko: " + b["socket:schuko"] + "<br/>");
    b["socket:cee_blue"] && (a += "Stecker CEE Blau: " + b["socket:cee_blue"] + "<br/>");
    b["socket:cee_red_16a"] && (a += "Stecker CEE Rot 16a: " + b["socket:cee_red_16a"] + "<br/>");
    b["socket:cee_red_32a"] && (a += "Stecker CEE Rot 32a: " + b["socket:cee_red_32a"] + "<br/>");
    b["socket:cee_red_64a"] && (a += "Stecker CEE Rot 64a: " + b["socket:cee_red_64a"] + "<br/>");
    b["socket:cee_red_125a"] && (a += "Stecker CEE Rot 125a: " + b["socket:cee_red_125a"] + "<br/>");
    b["socket:nema_5_15"] && (a += "Stecker Nema 5 15: " + b["socket:nema_5_15"] + "<br/>");
    b["socket:nema_5_20"] && (a += "Stecker Nema 5 20: " + b["socket:nema_5_20"] + "<br/>");
    b["socket:nema_14_30"] && (a += "Stecker Nema 14 30: " + b["socket:nema_14_30"] + "<br/>");
    b["socket:nema_14_50"] && (a += "Stecker Nema 14 50: " + b["socket:nema_14_50"] + "<br/>");
    b["socket:bs1363"] && (a += "Stecker BS 1363: " + b["socket:bs1363"] + "<br/>");
    b["socket:type1"] && (a += "Stecker Typ 1: " + b["socket:type1"] + "<br/>");
    b["socket:type1_combo"] && (a += "Stecker Typ 1 Kombo: " + b["socket:schuko"] + "<br/>");
    b["socket:type2"] && (a += "Stecker Typ 2: " + b["socket:type2"] + "<br/>");
    b["socket:type2_combo"] && (a += "Stecker Typ 2 Kombo: " + b["socket:type2_combo"] + "<br/>");
    b["socket:type3"] && (a += "Stecker Typ 3: " + b["socket:type3"] + "<br/>");
    b["socket:chademo"] && (a += "Stecker CHAdeMO: " + b["socket:chademo"] + "<br/>");
    b["socket:magne_charge"] && (a += "Stecker Magne : " + b["socket:magne_charge"] + "<br/>");
    b["socket:tesla_standard"] && (a += "Stecker Tesla Standard: " + b["socket:tesla_standard"] + "<br/>");
    b["socket:tesla_supercharge"] && (a += "Stecker Tesla Schnellladestation: " + b["socket:tesla_supercharge"] + "<br/>");
    b["socket:tesla_roadster"] && (a += "Stecker Tesla Roadster: " + b["socket:tesla_roadster"] + "<br/>");
    a += "<br/>";
    b.voltage && (a += "Volt: " + c + "<br/>");
  }

  "yes" == b.tunnel && (a += "Tunnel<br/>");
  if (b.bridge) switch (a += "Br\xFCcken-Typ: ", b.bridge) {
    case "swing":
      a += "Drehbr\xFCcke";
      break;

    case "aqueduct":
      a += "Historische Wasserpipeline";
      break;

    case "bascule":
      a += "Klapp bzw. Wippbr\xFCcke";
      break;

    case "boardwalk":
      a += "Bohlenweg";
      break;

    case "cantilever":
      a += "Auslegerbr\xFCcke";
      break;

    case "covered":
      a += "gedeckte Br\xFCcke";
      break;

    case "drawbridge":
      a += "Klappbr\xFCcke";
      break;

    case "humpback":
      a += "Drehbr\xFCcke";
      break;

    case "lift":
      a += "Hubbr\xFCcke";
      break;

    case "low_water_crossing":
      a += "Irische Br\xFCcke";
      break;

    case "moveable":
      a += "Bewegliche Br\xFCcken";
      break;

    case "pontoon":
      a += "Schwimmbr\xFCcke";
      break;

    case "suspension":
      a += "H\xE4ngebr\xFCcke";
      break;

    case "trestle":
      a += "Trestle-Br\xFCcke";
      break;

    case "viaduct":
      a += "Viadukt";
  }
  if (b["bridge:movable"]) switch (b["bridge:movable"]) {
    case "swing":
      a += "Drehbr\xFCcke";
      break;

    case "bascule":
      a += "Klapp bzw. Wippbr\xFCcke";
      break;

    case "drawbridge":
      a += "Klappbr\xFCcke";
      break;

    case "lift":
      a += "Hubbr\xFCcke";
      break;

    case "submersible":
      a += "Senkbr\xFCcke";
      break;

    case "transporter":
      a += "Schwebef\xE4hre";
      break;

    case "retractable":
      a += "Schubbr\xFCcke";
  }
  if ("nursing_home" == b.amenity || "retirement_home" == b.amenity) a += "Seniorenheim / Pflegeheim<br/>";
  "social_facility" == b.amenity && (a += "Allg. soziale Einrichtung<br/>");

  if (b.social_facility) {
    "group_home" == b.social_facility && "senior" == b["social_facility:for"] && (a += "Seniorenheim<br/>");
    "assisted_living" == b.social_facility && (a += "Betreutes Wohnen<br/>");
    "outreach" == b.social_facility && (a += "Beratungsstelle<br/>");
    "workshop" == b.social_facility && (a += "soziale Werkstatt<br/>");
    if ("ambulatory_care" == b.social_facility || "healthcare" == b.social_facility) a += "Ambulanter Pflegedienst<br/>";
    "shelter" == b.social_facility && "senior" == b["social_facility:for"] && (a += "Tages- u. Kurzzeitpflege<br/>");
    "shelter" == b.social_facility && "abused" == b["social_facility:for"] && (a += "Notunterkunft<br/>");
    "food_bank" == b.social_facility && (a += "Lebensmittelhilfe<br/>");
    "hospice" == b.social_facility && (a += "Hospiz<br/>");
  }

  b.brewery && (a += "Ausgeschenkte Biersorten: " + b.brewery + "<br/>");
  "alcohol" == b.shop && (a += "Spirituosenladen<br/>");
  "bakery" == b.shop && (a += "B\xE4ckerei<br/>");
  "beverages" == b.shop && (a += "Getr\xE4nkehandel<br/>");
  "butcher" == b.shop && (a += "Fleischerei<br/>");
  "cheese" == b.shop && (a += "K\xE4sefachgesch\xE4ft<br/>");
  "chocolate" == b.shop && (a += "Schokoladenfachgesch\xE4ft<br/>");
  "coffee" == b.shop && (a += "Kaffeefachgesch\xE4ft<br/>");
  "confectionery" == b.shop && (a += "S\xFC\xDFwarenladen<br/>");
  "convenience" == b.shop && (a += "Lebensmittelgesch\xE4ft<br/>");
  "deli" == b.shop && (a += "Feinkostladen<br/>");
  "dairy" == b.shop && (a += "Milchladen<br/>");
  "farm" == b.shop && (a += "Hofladen<br/>");
  "greengrocer" == b.shop && (a += "Gem\xFCseh\xE4ndler<br/>");
  "grocery" == b.shop && (a += "Lebensmittelgesch\xE4ft<br/>");
  "organic" == b.shop && (a += "Bio-Laden, Reformhaus<br/>");
  "pasta" == b.shop && (a += "Pastagesch\xE4ft<br/>");
  "seafood" == b.shop && (a += "Fischfachgesch\xE4ft<br/>");
  "tea" == b.shop && (a += "Teefachgesch\xE4ft<br/>");
  "wine" == b.shop && (a += "Weinhandlung<br/>");
  "department_store" == b.shop && (a += "Kaufhaus<br/>");
  "general" == b.shop && (a += "Gemischtwarenhandlung<br/>");
  "kiosk" == b.shop && (a += "Kiosk<br/>");
  "mall" == b.shop && (a += "Einkaufszentrum<br/>");
  "supermarket" == b.shop && (a += "Supermarkt<br/>");
  "baby_goods" == b.shop && (a += "Babyfachmarkt<br/>");
  "bag" == b.shop && (a += "Taschen und Koffer<br/>");
  "boutique" == b.shop && (a += "Boutique<br/>");
  "clothes" == b.shop && (a += "Bekleidung<br/>");
  "fabric" == b.shop && (a += "Textilgesch\xE4ft<br/>");
  "fashion" == b.shop && (a += "Fashion<br/>");
  "jewelry" == b.shop && (a += "Juwelier<br/>");
  "leather" == b.shop && (a += "Lederwaren<br/>");
  "shoes" == b.shop && (a += "Schuhfachgesch\xE4ft<br/>");
  "variety_store" == b.shop && (a += "Ein-Euro-Laden<br/>");
  "chemist" == b.shop && (a += "Drogerie<br/>");
  "cosmetics" == b.shop && (a += "Kosmetikfachgesch\xE4ft<br/>");
  "drugstore" == b.shop && (a += "Drogerie oder Apotheke (veraltet)<br/>");
  "perfumery" == b.shop && (a += "Parf\xFCmerie<br/>");
  "erotic" == b.shop && (a += "Erotikhandel<br/>");
  "hairdresser" == b.shop && (a += "Friseur<br/>");
  "hearing_aids" == b.shop && (a += "H\xF6rger\xE4te<br/>");
  "herbalist" == b.shop && (a += "Kr\xE4uterhandel<br/>");
  "massage" == b.shop && (a += "Massagesalon<br/>");
  "medical_supply" == b.shop && (a += "Sanit\xE4tshaus<br/>");
  "optician" == b.shop && (a += "Optiker<br/>");
  "tattoo" == b.shop && (a += "T\xE4towierer<br/>");
  "bathroom_furnishing" == b.shop && (a += "Badm\xF6bel und -accessoires<br/>");
  "doityourself" == b.shop && (a += "Baumarkt/Baustoffhandel<br/>");
  "energy" == b.shop && (a += "Energiehandel<br/>");
  "florist" == b.shop && (a += "Blumengesch\xE4ft<br/>");
  "furnace" == b.shop && (a += "Ofenfachgesch\xE4ft<br/>");
  "garden_centre" == b.shop && (a += "Gartencenter<br/>");
  "gas" == b.shop && (a += "Fachgesch\xE4ft f\xFCr technische Gase<br/>");
  "glaziery" == b.shop && (a += "Glaserei<br/>");
  "hardware" == b.shop && (a += "Eisenwaren<br/>");
  "houseware" == b.shop && (a += "Haushaltswaren und Inneneinrichtung<br/>");
  "locksmith" == b.shop && (a += "Schl\xFCsseldienst<br/>");
  "paint" == b.shop && (a += "Farbenfachgesch\xE4ft<br/>");
  "trade" == b.shop && (a += "Baustoffhandel<br/>");
  "antiques" == b.shop && (a += "Antiquit\xE4ten<br/>");
  "bed" == b.shop && (a += "Betten- und Matratzengesch\xE4ft<br/>");
  "candles" == b.shop && (a += "Kerzengesch\xE4ft<br/>");
  "carpet" == b.shop && (a += "Teppichfachhandel<br/>");
  "curtain" == b.shop && (a += "Gardinenfachgesch\xE4ft<br/>");
  "furniture" == b.shop && (a += "M\xF6bel- und Einrichtungshaus<br/>");
  "interior_decoration" == b.shop && (a += "Innendekoration / Raumausstattung<br/>");
  "kitchen" == b.shop && (a += "K\xFCchen<br/>");
  "window_blind" == b.shop && (a += "Jalousien und Roll\xE4den<br/>");
  "computer" == b.shop && (a += "Computer-Fachh\xE4ndler<br/>");
  "electronics" == b.shop && (a += "Elektronikmarkt<br/>");
  "hifi" == b.shop && (a += "Hifi-Fachh\xE4ndler<br/>");
  "mobile_phone" == b.shop && (a += "Handy-Shop<br/>");
  "radiotechnics" == b.shop && (a += "Radio- und Fernsehtechnik<br/>");
  "vacuum_cleaner" == b.shop && (a += "Staubsaugerfachgesch\xE4ft<br/>");
  "bicycle" == b.shop && (a += "Fahrradfachgesch\xE4ft<br/>");
  "car" == b.shop && (a += "Autohaus<br/>");
  "car_repair" == b.shop && (a += "Autowerkstatt<br/>");
  "car_parts" == b.shop && (a += "Autoteilefachgesch\xE4ft<br/>");
  if ("dive" == b.shop || "scuba_diving" == b.shop) a += "Tauchausr\xFCstung<br/>";
  "fishing" == b.shop && (a += "Angelfachgesch\xE4ft<br/>");
  "free_flying" == b.shop && (a += "Fallschirmausr\xFCstung<br/>");
  "hunting" == b.shop && (a += "Jagdausr\xFCstung<br/>");
  "motorcycle" == b.shop && (a += "Motorradgesch\xE4ft<br/>");
  "outdoor" == b.shop && (a += "Trekking-/Outdoorladen<br/>");
  "sports" == b.shop && (a += "Sportgesch\xE4ft<br/>");
  "tyres" == b.shop && (a += "Reifenfachhandel<br/>");
  "water_sports" == b.shop && (a += "Wassersportbedarf<br/>");
  "art" == b.shop && (a += "Kunstladen<br/>");
  "craft" == b.shop && (a += "Kunsthandwerk<br/>");
  "frame" == b.shop && (a += "Bilderrahmengesch\xE4ft<br/>");
  "music" == b.shop && (a += "Musikgesch\xE4ft<br/>");
  "music_instrument" == b.shop && (a += "Musikhaus<br/>");
  "photo" == b.shop && (a += "Fotofachgesch\xE4ft<br/>");
  "video" == b.shop && (a += "Videothek<br/>");
  "video_games" == b.shop && (a += "Videospiele<br/>");
  "anime" == b.shop && (a += "Anime<br/>");
  "books" == b.shop && (a += "Buchhandlung<br/>");
  "gift" == b.shop && (a += "Andenken, Reisemitbringsel, Souveniershop<br/>");
  "newsagent" == b.shop && (a += "Zeitungsh\xE4ndler<br/>");
  "stationery" == b.shop && (a += "Schreibwaren<br/>");
  "ticket" == b.shop && (a += "Ticketshop<br/>");
  "copyshop" == b.shop && (a += "Kopierladen<br/>");
  "funeral_directors" == b.shop && (a += "Bestattungsunternehmen<br/>");
  "laundry" == b.shop && (a += "Waschsalon / W\xE4scherei<br/>");
  "dry_cleaning" == b.shop && (a += "chemische Reinigung<br/>");
  "money_lender" == b.shop && (a += "Geldverleiher<br/>");
  "pawnbroker" == b.shop && (a += "Pfandhaus / Pfandleiher<br/>");
  "pet" == b.shop && (a += "Zoo- und Tierhandlung<br/>");
  "pyrotechnics" == b.shop && (a += "Feuerwerk<br/>");
  "religion" == b.shop && (a += "Religi\xF6se Artikel<br/>");
  "beauty" == b.shop && (a += "Sch\xF6nheitssalon<br/>");
  "solarium" == b.shop && (a += "Solarium<br/>");
  "tobacco" == b.shop && (a += "Tabakwaren<br/>");
  "toys" == b.shop && (a += "Spielwaren<br/>");
  "travel_agency" == b.shop && (a += "Reiseb\xFCro<br/>");
  "market_hall" == b.shop && (a += "Markthalle<br/>");
  "vacant" == b.shop && (a += "leerstehendes Ladenlokal<br/>");
  "weapons" == b.shop && (a += "Waffenladen<br/>");
  "lottery" == b.gambling && (a += "Lottoannahmestelle<br/>");
  "fish" == b.pet && (a += "Aquaristik<br/>");
  "agriucultural_engines" == b.craft && (a += "Landmaschinenbau<br/>");
  "basket_maker" == b.craft && (a += "Korbmacher<br/>");
  "beekeeper" == b.craft && (a += "Imker<br/>");
  "blacksmith" == b.craft && (a += "Schmied<br/>");
  "brewery" == b.craft && (a += "Brauerei<br/>");
  "yes" == b.microbrewery && (a += "Hausbrauerei<br/>");
  "boatbuilder" == b.craft && (a += "Bootsbauer<br/>");
  "bookbinder" == b.craft && (a += "Buchbinder<br/>");
  "builder" == b.craft && (a += "Hausbau<br/>");
  "carpenter" == b.craft && (a += "Tischler/Schreiner, Zimmermann<br/>");
  "carpet_layer" == b.craft && (a += "Teppichleger<br/>");
  "caterer" == b.craft && (a += "Catering<br/>");
  "clockmaker" == b.craft && (a += "Uhrmacher<br/>");
  "confectionery" == b.craft && (a += "Konditorei<br/>");
  "dressmaker" == b.craft && (a += "Schneider<br/>");
  "electrician" == b.craft && (a += "Elektriker<br/>");
  "gardener" == b.craft && (a += "Garten- und Landschaftsbauer<br/>");
  "glaziery" == b.craft && (a += "Glaserei<br/>");
  "handicraft" == b.craft && (a += "Handwerkskunst<br/>");
  "hvac" == b.craft && (a += "K\xE4lteanlagenbauer f\xFCr L\xFCftungs-, Heizungs- und Klimatechnik<br/>");
  "insulation" == b.craft && (a += "W\xE4rmed\xE4mmung von Geb\xE4uden<br/>");
  "jeweller" == b.craft && (a += "Juwelier, Gold-/Silber-Schmied<br/>");
  "key_cutter" == b.craft && (a += "Schl\xFCsselmacher<br/>");
  "locksmith" == b.craft && (a += "Schl\xFCsseldienst<br/>");
  "metal_construction" == b.craft && (a += "Metallbauer<br/>");
  "optician" == b.craft && (a += "Optiker<br/>");
  "painter" == b.craft && (a += "Maler<br/>");
  "parquet_layer" == b.craft && (a += "Parkettverleger<br/>");
  "photographer" == b.craft && (a += "Fotograf<br/>");
  "photographic_laboratory" == b.craft && (a += "Fotolabor<br/>");
  "plasterer" == b.craft && (a += "Gipser, Verputzer, Stuckateur<br/>");
  "plumber" == b.craft && (a += "Anlagenmechaniker Sanit\xE4r-, Heizungs- und Klimatechnik.<br/>");
  "pottery" == b.craft && (a += "T\xF6pferei<br/>");
  "rigger" == b.craft && (a += "Riggemacher (Takelage f\xFCr Segelschiffe)<br/>");
  "roofer" == b.craft && (a += "Dachdecker<br/>");
  "saddler" == b.craft && (a += "Sattler<br/>");
  "sailmaker" == b.craft && (a += "Segelmacher<br/>");
  "sawmill" == b.craft && (a += "Holzverarbeitungsbetrieb<br/>");
  "scaffolder" == b.craft && (a += "Ger\xFCstbauer<br/>");
  "sculptor" == b.craft && (a += "Bildhauer<br/>");
  "shoemaker" == b.craft && (a += "Schuhmacher<br/>");
  "stand_builder" == b.craft && (a += "Messe- / Standbauer<br/>");
  "stonemason" == b.craft && (a += "Steinmetz<br/>");
  "sun_protection" == b.craft && (a += "Rolladen- und Jalousiebauer<br/>");
  "sweep" == b.craft && (a += "Schornsteinfeger<br/>");
  "tailor" == b.craft && (a += "Schneider<br/>");
  "tiler" == b.craft && (a += "Fliesen-, Platten- und Mosaikleger<br/>");
  "tinsmith" == b.craft && (a += "Spengler, Klempner<br/>");
  "upholsterer" == b.craft && (a += "Polsterer<br/>");
  "watchmaker" == b.craft && (a += "Uhrmacher<br/>");
  "window_construction" == b.craft && (a += "Fensterbauer<br/>");
  "machines" == b.rental && (a += "Maschinenverleih<br/>");
  "car_rental" == b.amenity && (a += "Autoverleih<br/>");
  "allotments" == b.landuse && (a += "Schrebergarten<br/>");
  "basin" == b.landuse && (a += "Regenwasserr\xFCckhaltebecken<br/>");
  "brownfield" == b.landuse && (a += "Vorher bebautes Land<br/>");
  "commercial" == b.landuse && (a += "Industriegebiet<br/>");
  "construction" == b.landuse && (a += "Baugebiet<br/>");
  "farmland" == b.landuse && (a += "Ackerfl\xE4che<br/>");
  "farmyard" == b.landuse && (a += "landwirtschaftlicher Betrieb<br/>");
  "forest" == b.landuse && (a += "Forst<br/>");
  "garages" == b.landuse && (a += "Garagenkomplex<br/>");
  "grass" == b.landuse && (a += "Rasenfl\xE4chen<br/>");
  "greenfield" == b.landuse && (a += "Bauerwartungsland<br/>");
  "greenhouse_horticulture" == b.landuse && (a += "Gew\xE4chshaus-Fl\xE4che<br/>");
  "industrial" == b.landuse && (a += "Gewerbe-/Industriegebiet<br/>");
  "landfill" == b.landuse && (a += "M\xFClldeponie<br/>");
  "meadow" == b.landuse && (a += "Gr\xFCnfl\xE4che<br/>");
  "orchard" == b.landuse && (a += "Obstplantage<br/>");
  "plant_nursery" == b.landuse && (a += "Baumschule<br/>");
  "quarry" == b.landuse && (a += "Sand- und Kiesgrube<br/>");
  "railway" == b.landuse && (a += "Gebiet f\xFCr Eisenbahnnutzung<br/>");
  "recreation_ground" == b.landuse && (a += "Erholungsgebiet<br/>");
  "reservoir" == b.landuse && (a += "Wasserreservoir<br/>");
  "residential" == b.landuse && (a += "Wohngebiet<br/>");
  "retail" == b.landuse && (a += "Einkaufszentrum<br/>");
  "salt_pond" == b.landuse && (a += "Saline<br/>");
  "village_green" == b.landuse && (a += "Gr\xFCnfl\xE4che<br/>");
  "vineyard" == b.landuse && (a += "Weinberg<br/>");
  "pond" == b.landuse && (a += "kleiner Teich<br/>");
  "salt_pond" == b.landuse && (a += "Saline<br/>");
  "animal_keeping" == b.landuse && (a += "Weide, Paddock f\xFCr Tierhaltung<br/>");
  "yes" == b.entrance && (a += "Eingang zum Geb\xE4ude<br/>");
  "main" == b.entrance && (a += "Haupteingang<br/>");
  "service" == b.entrance && (a += "Hinterausgang f\xFCr Angestellte oder Zulieferer<br/>");
  "exit" == b.entrance && (a += "Ausgang des Geb\xE4udes<br/>");
  "emergency" == b.entrance && (a += "Notausgang<br/>");
  "bay" == b.natural && (a += "Bucht<br/>");
  "beach" == b.natural && (a += "Strand<br/>");
  "wood" == b.natural && (a += "nat\xFCrlicher Wald<br/>");
  "glacier" == b.natural && (a += "Gletscher<br/>");
  "cave_entrance" == b.natural && (a += "H\xF6hle<br/>");
  "spring" == b.natural && (a += "nat\xFCrliche Quelle<br/>");
  "waterfall" == b.natural && (a += "Wasserfall<br/>");
  "scrub" == b.natural && (a += "unkultiviertes Buschland<br/>");
  "grassland" == b.natural && (a += "unkultiviertes Grasland<br/>");
  "wetland" == b.natural && (a += "Feuchtgebiet<br/>");
  "tree" == b.natural && (a += "Baum");
  "peak" == b.natural && "yes" == b["summit:cross"] && (a += "Gipfelkreuz<br/>");
  "tree_row" == b.natural && (a += "Baumreihe / Allee<br/>");
  "heath" == b.natural && (a += "Heide<br/>");
  "moor" == b.natural && (a += "Hochmoor<br/>");
  "grassland" == b.natural && (a += "unkultiviertes Grasland<br/>");
  "fell" == b.natural && (a += "Grasland oberhalb der Baumgrenze<br/>");
  "bare_rock" == b.natural && (a += "Nackter Fels<br/>");
  "scree" == b.natural && (a += "Schutt (Hangschutt)<br/>");
  "volcano" == b.natural && (a += "Vulkan<br/>");
  "valley" == b.natural && (a += "Tal<br/>");
  "stone" == b.natural && (a += "Findling<br/>");
  "sea" == b.natural && (a += "Meer<br/>");
  "national_park" == b.boundary && (a += "Nationalpark<br/>");
  "protected_area" == b.boundary && (a += "Schutzgebiet<br/>");
  "yes" == b.mountain_pass && (a += "Gebirgspass<br/>");
  "waterfall" == b.waterway && (a += "Wasserfall<br/>");
  "canal" == b.waterway && (a += "Kanal<br/>");
  "canal" == b.water && (a += "Kanal<br/>");
  "river" == b.waterway && (a += "Fluss<br/>");
  "river" == b.water && (a += "Fluss<br/>");
  "riverbank" == b.waterway && (a += "Fluss<br/>");
  "ditch" == b.waterway && (a += "Entw\xE4sserungsgraben<br/>");
  "stream" == b.waterway && (a += "Bach<br/>");
  "ferry" == b.route && (a += "F\xE4hrverbindung<br/>");
  "turning_point" == b.waterway && (a += "Wendestelle<br/>");
  if ("lake" == b.water || "water" == b.natural) a += "See<br/>";
  "cove" == b.water && (a += "kleine Bucht<br/>");
  "lagoon" == b.water && (a += "Lagune<br/>");
  "pond" == b.water && (a += "Teich<br/>");
  "reservoir" == b.water && (a += "Wasserreservoir<br/>");
  "oxbow" == b.water && (a += "Altwassersee<br/>");
  "lock" == b.water && (a += "Schleusenkammer<br/>");
  "moat" == b.water && (a += "Burggraben<br/>");
  "wastewater" == b.water && (a += "Kl\xE4ranlage<br/>");
  "guest" == b.mooring && "pier" == b.man_made || "visitor_berth" == b["seamark:small_craft_facility:category"] ? a += "Gastliegeplatz<br/>" : "pier" == b.man_made && (a += "Anlegestelle<br/>");
  "boatyard" == b.waterway && (a += "Schiffswerft<br/>");
  "mooring" == b["seamark:type"] && "dolphin" == b["seamark:mooring:category"] && (a += "Dalben<br/>");
  "foot" == b.route && (a += "Wanderweg<br/>");
  "hiking" == b.route && (a += "Wanderweg<br/>");
  if ("yes" == b.hiking && "information" == b.tourism) a += "Wegweiser<br/>";else if ("information" == b.tourism && "information" == b.tourism) if (b.information) switch (b.information) {
    case "board":
      a += "Informationstafel<br/>";
      break;

    case "map":
      a += "Informationstafel mit Karte<br/>";
      break;

    case "office":
      a += "Touristeninformation<br/>";
      break;

    case "terminal":
      a += "Informationsterminal<br/>";
      break;

    case "audioguide":
      a += "Audioguide<br/>";
      break;

    case "guidepost":
      a += "Wegweiser<br/>";
      break;

    case "tactile_map":
      a += "Blindenkarte 2D<br/>";
      break;

    case "tactile_model":
      a += "Blindenkarte 3D<br/>";
      break;

    case "route_marker":
      a += "Wegerkennungsmarker<br/>";
      break;

    default:
      a += "Informationstafel<br/>";
  } else a += "Informationstafel<br/>";
  "bicycle" == b.route && (a += "Radwanderweg<br/>");
  "mtb" == b.route && (a += "Mountainbikeroute<br/>");
  "horse" == b.route && (a += "Reitwanderweg<br/>");
  "coastline" == b.natural && (a += "K\xFCstenlinie<br/>");
  "cliff" == b.natural && (a += "Klippe<br/>");
  "dam" == b.waterway && (a += "Staudamm<br/>");
  "weir" == b.waterway && (a += "Wehr<br/>");
  "lock_gate" == b.waterway && (a += "Schleusentor<br/>");
  "yes" == b.lock && (a += "Schleuse<br/>");
  "sluice_gate" == b.waterway && (a += "Siel<br/>");
  "pumping_station" == b.man_made && (a += "Sch\xF6pfwerk<br/>");
  "groyne" == b.man_made && (a += "Buhne<br/>");
  "dyke" == b.man_made && (a += "Deich<br/>");
  "levee" == b.man_made && (a += "Deich<br/>");
  "watermill" == b.man_made && (a += "Wasserm\xFChle<br/>");
  "airfield" == b.military && (a += "Milit\xE4rflugplatz<br/>");
  "naval_base" == b.military && (a += "Marinest\xFCtzpunkt<br/>");
  "range" == b.military && (a += "Waffen\xFCbungsplatz<br/>");
  "military" == b.landuse && (a += "milit\xE4risch genutztes Gebiet<br/>");
  "training_area" == b.military && (a += "Truppen\xFCbungsplatz<br/>");
  "exclusion_zone" == b.military && (a += "milit\xE4risch genutztes Gebiet<br/>");
  "danger_area" == b.military && (a += "milit\xE4rische Gefahrenzone<br/>");
  "barracks" == b.military && (a += "Kaserne<br/>");
  "nuclear_explosion_site" == b.military && (a += "Atomwaffentestgel\xE4nde<br/>");
  "yes" == b.construction ? a += "Baustelle<br/>" : "construction" == b.highway && (a += "Baustelle<br/>");
  "petroleum_well" == b.man_made && (a += "Erd\xF6lpumpe<br/>");
  "storage_tank" == b.man_made && (a += "Speichertank<br/>");
  "wastewater_plant" == b.man_made && (a += "Kl\xE4ranlage<br/>");
  "silo" == b.man_made && (a += "Silo<br/>");
  "water_tower" == b.man_made && (a += "Wasserturm<br/>");
  "windmill" == b.man_made && (a += "Windm\xFChle<br/>");
  "monitoring_station" == b.man_made && (a += "Messstation");
  "crane" == b.man_made && (a += "Kran");
  "lighthouse" == b.man_made && (a += "Leuchtturm");
  "beacon" == b.man_made && (a += "Leuchtfeuer");
  "breakwater" == b.man_made && (a += "Wellenbrecher");
  "lamp" == b.man_made && "street_lamp" == b["lamp:type"] && (a += "Strassenlaterne<br/>");
  "lantern" == b.light_source && (a += "Strassenlaterne<br/>");
  "floodlight" == b.light_source && (a += "Flutlicht<br/>");
  "signal_lamp" == b.light_source && (a += "Signallicht<br/>");
  "aviation" == b.light_source && (a += "Befeuerung<br/>");
  "warning" == b.light_source && (a += "Warnlicht<br/>");
  if (b.light_source && b["light:method"]) switch (a += "Licht Art: ", b["light:method"]) {
    case "gas":
      a += "Gas";
      break;

    case "electric":
      a += "Elektrisch";
      break;

    case "incandescent":
      a += "strahlend";
      break;

    case "halogen":
      a += "Halogen";
      break;

    case "discharge":
      a += "Entladungslicht";
      break;

    case "metal-halide":
      a += "Halogen-Metalldampflampe";
      break;

    case "neon":
      a += "Neon";
      break;

    case "sodium":
      a += "Natriumdampflampe";
      break;

    case "high_pressure_sodium":
      a += "Hochdruck Natriumdampflampe";
      break;

    case "low_pressure_sodium":
      a += "Niedrigdruck Natriumdampflampe";
      break;

    case "fluorescent":
      a += "Fluoreszenzlampe";
      break;

    case "mercury":
      a += "Quecksilberlampe";
      break;

    case "LED":
      a += "LED";
      break;

    case "laser":
      a += "Laser";
      break;

    case "arc":
      a += "Lichtbogen";
      break;

    default:
      a += "Unbekannt";
  }
  "drinking_water" == b.amenity && (a += "Trinkwasser<br/>");
  "yes" == b.drinking_water && (a += "Trinkwasser<br/>");
  "works" == b.man_made ? a += "Industriegeb\xE4ude<br/>" : "industrial" == b.building ? a += "Industriegeb\xE4ude<br/>" : "industrial" == b.landuse ? a += "Industriegebiet<br/>" : "industrial" == b.abutters ? a += "Industriegebiet<br/>" : "commercial" == b.abutters && (a += "Gewerbegebiet<br/>");
  if (b["generator:source"]) switch (a += "Anlagen-Typ: ", b["generator:source"]) {
    case "biomass":
      a += "Biogasanlage";
      break;

    case "biofuel":
      a += "Biogasanlage";
      break;

    case "biogas":
      a += "Biogasanlage";
      break;

    case "coal":
      a += "Kohlekraftwerk";
      break;

    case "oil":
      a += "\xD6lraffinerie";
      break;

    case "waste":
      a += "M\xFCllverbrennungsanlage";
      break;

    case "wind":
      a += "Windkraftwerk";
      break;

    case "solar":
      a += "Solarkraftwerk";
      break;

    case "hydro":
      a += "Wasserkraftwerk";
      break;

    case "tidal":
      a += "Gezeitenkraftwerk";
      break;

    case "wave":
      a += "Wellenkraftwerk";
      break;

    case "geothermal":
      a += "Geothermie";
      break;

    case "osmotic":
      a += "Osmosekraftwerk";
      break;

    case "nuclear":
      a += "Atomkraftwerk";
      break;

    default:
      a += "unbekannt<br/>";
  }
  "photovoltaic" == b.power_source && (a += "Solarkraftwerk");
  "line" == b.power && (a += "Hochspannungs-\xDCbertragungsleitung<br/>");
  "cable" == b.power && (a += "Untergrundkabel<br/>");
  "cable_distribution_cabinet" == b.power && (a += "Kabelverteilerschrank<br/>");
  "plant" == b.power && (a += "Elektrizit\xE4tskraftwerk<br/>");
  "station" == b.power && (a += "Elektrizit\xE4tskraftwerk<br/>");
  "sub_station" == b.power && (a += "Elektrizit\xE4tskraftwerk<br/>");
  "compensator" == b.power && (a += "Kompensator<br/>");
  "converter" == b.power && (a += "Konverter<br/>");
  "generator" == b.power && (a += "Generator<br/>");
  "heliostat" == b.power && (a += "Heliostat<br/>");
  "insulator" == b.power && (a += "Isulator<br/>");
  "busbar" == b.line && (a += "Sammelschiene<br/>");
  "bay" == b.line && (a += "Verbindung Schaltung und Sammelschiene<br/>");
  "minor_line" == b.power && (a += "Nebenlinie<br/>");
  "pole" == b.power && (a += "Pfahl<br/>");
  "portal" == b.power && (a += "H-f\xF6rmiger Mast<br/>");
  "catenary_mast" == b.power && (a += "Fahrleitungsmast<br/>");
  "substation" == b.power && (a += "Umspannwerk<br/>");
  "switch" == b.power && (a += "Lastschalter<br/>");
  "terminal" == b.power && (a += "Terminal / Anschluss<br/>");
  "tower" == b.power && (a += "Hochspannungsleitungs<br/>");
  "transformer" == b.power && (a += "Nebenlinie<br/>");
  if (b.barrier) switch (b.barrier) {
    case "bollard":
      a += "Poller, Pfosten<br/>";
      break;

    case "cycle_barrier":
      a += "Umlaufsperre, Dr\xE4ngelgitter<br/>";
      break;

    case "gate":
      a += "Tor, Schranke<br/>";
      break;

    case "chain":
      a += "Kette<br/>";
      break;

    case "lift_gate":
      a += "Schlagbaum<br/>";
      break;

    case "wall":
      a += "L\xE4rmschutzwand<br/>";
      break;

    case "toll_booth":
      a += "Mautstelle<br/>";
      break;

    case "fence":
      switch (b.fence_type) {
        case "barbed_wire":
          a += "Stacheldrahtzaun<br/>";
          break;

        case "wood":
          a += "Holzzaun<br/>";
          break;

        case "chain_link":
          a += "Maschendrahtzaun<br/>";
          break;

        case "electric":
          a += "Weidezaun<br/>";
          break;

        case "railing":
          a += "Gel\xE4nder<br/>";
          break;

        case "wire":
          a += "einfacher Drahtzaun<br/>";
          break;

        case "metal":
          a += "Metallzaun<br/>";
          break;

        case "pole":
          a += "Holzpf\xE4hle<br/>";
          break;

        default:
          a += "Zaun<br/>";
      }

      break;

    case "block":
      a += "Block<br/>";
      break;

    case "ditch":
      a += "Graben<br/>";
      break;

    case "border_control":
      a += "Grenzkontrolle<br/>";
      break;

    case "hedge":
      a += "Hecke<br/>";
      break;

    case "retaining_wall":
      a += "St\xFCtzmauer<br/>";
      break;

    case "cattle_grid":
      a += "Weiderost<br/>";
      break;

    case "horse_stile":
      a += "Zaun\xFCbertritt<br/>";
      break;

    default:
      a += "unbekannt<br/>";
  }
  "noise_barrier" == b.wall && (a += "L\xE4rmschutzwand<br/>");
  "retaining_wall" == b.designation && (a += "L\xE4rmschutzwand<br/>");
  "noise_barrier" == b.designation && (a += "L\xE4rmschutzwand<br/>");
  "surveillance" == b.man_made && (a += "\xDCberwachter Bereich<br/>");
  if (b.aeroway) switch (a += "Flughafen: ", b.aeroway) {
    case "aerodrome":
      a += "Flugplatz";
      break;

    case "apron":
      a += "Vorfeld";
      break;

    case "gate":
      a += "gate";
      break;

    case "helipad":
      a += "Hubschrauberlandeplatz";
      break;

    case "hangar":
      a += "Hangar";
      break;

    case "runway":
      a += "Start-/Landebahn";
      break;

    case "taxiway":
      a += "Rollweg";
      break;

    case "terminal":
      a += "Flughafengeb\xE4ude";
      break;

    default:
      a += "unbekannt<br/>";
  }
  "halt" == b.railway && (a += "Bahn-Haltepunkt<br/>");
  "crossing" == b.railway && (a += "Bahn\xFCbergang<br/>");
  "level_crossing" == b.railway && (a += "Bahn\xFCbergang<br/>");
  "station" == b.railway && (a += "Bahnhof<br/>");
  "bus_station" == b.amenity && (a += "Busbahnhof<br/>");
  "bus_station" == !b.amenity && "station" == b.public_transport && "yes" == b.bus && (a += "Busbahnhof<br/>");
  "rail" == b.railway && (a += "Bahnlinie<br/>", "contact_line" == b.electrified && (a += "elektrifizierte Bahntrasse mit Oberleitung<br/>"));
  "tram" == b.railway && (a += "Stra\xDFenbahnlinie<br/>");
  if ("slipway" == b["seamark:small_craft_facility:category"] || "slipway" == b.harbour || "slipway" == b.leisure) a += "Slipanlage<br/>";
  if ("harbour" == b["seamark:type"]) if (b["seamark:harbour:category"]) switch (b["seamark:harbour:category"]) {
    case "ferry":
      a += "F\xE4hrhafen<br/>";
      break;

    case "container":
      a += "Containerhafen<br/>";
      break;

    case "marina":
      "marina" != b.leisure && (a += "Jachthafen<br/>");
      break;

    case "navel_base":
      a += "Marine-Hafen<br/>";
      break;

    case "tanker":
      a += "Hafen f\xFCr \xD6ltanker<br/>";
      break;

    case "passenger":
      a += "Personenschifffahrt<br/>";
      break;

    case "bulk":
      a += "Sch\xFCttgut-Hafen<br/>";
      break;

    default:
      a += "Hafen<br/>";
  } else a += "Hafen<br/>";
  "marina" == b.leisure && (a += "Jachthafen<br/>");
  "wreck" == b.historic && (a += "Wrack<br/>");
  "animal_shelter" == b.amenity && (a += "Tierheim<br/>");
  "shelter" == b.animal && (a += "Tierheim<br/>");
  "horse_walker" == b.animal && (a += "Pferdelauftrainer<br/>");
  "yes" == b.animal_shelter && (a += "Tierheim<br/>");
  "dog" == b.animal_shelter && (a += "Tierheim<br/>");
  "cat" == b.animal_shelter && (a += "Tierheim<br/>");
  "animal_boarding" == b.amenity && (a += "Tierpension<br/>");
  "yes" == b.animal_boarding && (a += "Tierpension<br/>");
  "dog" == b.animal_boarding && (a += "Tierpension<br/>");
  "horse" == b.animal_boarding && (a += "Tierpension<br/>");
  "cat" == b.animal_boarding && (a += "Tierpension<br/>");
  "dog;cat" == b.animal_boarding && (a += "Tierpension<br/>");
  "cat;dog" == b.animal_boarding && (a += "Tierpension<br/>");
  if ("school" == b.animal || "sport" == b.animal || "animal_training" == b.amenity) a += "Tiertraining<br/>";
  "swimming" == b.animal && (a += "Badestelle f\xFCr Hunde<br/>");
  if ("feeding_place" == b.amenity || "animal_feeding" == b.man_made || "animal_feeding" == b.amenity) a += "F\xFCtterungsstelle<br/>";
  if ("wildlife_feeding" == b.amenity || "deer_feeding" == b.amenity || "game_feeding" == b.amenity) a += "Wildf\xFCtterung<br/>";
  if ("cratch" == b.amenity || "cratch" == b.man_made || "feeding_rack" == b.amenity) a += "Futterraufe<br/>";
  "manger" == b.amenity && (a += "Krippe<br/>");
  "birdhouse" == b.man_made && (a += "Vogelhaus<br/>");
  "stork" == b.birds_nest && (a += "Storchennest<br/>");
  "nest_box" == b.amenity && (a += "Nistkasten<br/>");
  "wellness" == b.animal && (a += "Hundesalon<br/>");
  "cemetery" == b.animal && (a += "Kleintierfriedhof<br/>");
  if ("stable" == b.building || "stable" == b["building:use"]) a += "Pferdestall<br/>";
  "cowshed" == b.building && (a += "Kuhstall<br/>");
  "sty" == b.building && (a += "Schweinestall<br/>");
  "barn" == b.building && (a += "Scheune / landwirtsch. Lagerhalle<br/>");
  "farm_auxiliary" == b.building && (a += "landwirtschaftl. Nebengeb\xE4ude<br/>");
  if (b["river:waterway_distance"] || "milestone" == b.waterway) a += "Flusskilometer<br/>";
  "milestone" == b.highway && (a += "Strassenkilometer<br/>");
  "market" == b["xmas:feature"] && (a += "Weihnachtsmarkt<br/>");
  "tree" == b["xmas:feature"] && (a += "Weihnachtsbaumverkauf<br/>");
  "event" == b["xmas:feature"] && (a += "Weihnachtsevent<br/>");
  "pyramid" == b["xmas:feature"] && (a += "Weihnachtspyramide<br/>");
  return '<div class="c4g_popup_header_featuretype">' + a + "<br/> </div>";
}

var fnContent = function fnContent(b) {
  var a;
  a = "" + fnContentGeneralInformations(b);
  a += fnContentHealthcare(b);
  a += fnContentAerodrome(b);
  a += fnContentCuisine(b);
  a += fnContentShipping(b);
  a += fnContentHydrants(b);
  a += fnContentSports(b);
  a += fnContentStreetsTraffic(b);
  a += fnContentInformationCity(b);
  a += fnContentEmergency(b);
  a += fnContentStorage(b);
  a += fnContentAmenity(b);
  a += fnContentTourism(b);
  a += fnContentRoute(b);
  a += fnContentPetrol(b);
  a += fnContentBarriers(b);
  a += fnContentLanduse(b);
  a += fnContentNatural(b);
  a += fnKlosterAdditional(b);
  a += fnSicherheitAdditional(b);
  a += fnAdditionalBuildingInfos(b);
  a += fnKraftwerkInfo(b);
  a += fnMessstation(b);
  a += fnWertstoffinfo(b);
  (a += fnContentProtectedArea(b)) && (a = "<br/>" + a);
  return '<div class="c4g_popup_content">' + a + "</div>";
},
    fnContentAerodrome = function fnContentAerodrome(b) {
  var a = "";
  b.aerodrome && ("international" == b.aerodrome && (a += "Flughafentype: internationaler Flugplatz<br/>"), "regional" == b.aerodrome && (a += "Flughafentype: regionaler Flugplatz<br/>"), "gliding" == b.aerodrome && (a += "Flughafentype: Segelflugplatz<br/>"), "private" == b.aerodrome && (a += "Flughafentype: Privatflugplatz<br/>"));
  b.iata && (a += "IATA-Code: " + b.iata + "<br/>");
  b.icao && (a += "ICAO-Code: " + b.icao + "<br/>");
  return a;
},
    fnContentNatural = function fnContentNatural(b) {
  var a = "";

  if (b.forest || b.wood) {
    if ("broadleaved" == b.leaf_type || "deciduous" == b.wood) a += "Laubwald<br/>";
    if ("needleleaved" == b.leaf_type || "coniferous" == b.wood) a += "Nadelwald<br/>";
    if ("mixed" == b.leaf_type || "mixed" == b.wood) a += "Mischwald<br/>";
    "leafless" == b.leaf_type && (a += "Blattlose Vegetation<br/>");
    "evergreen" == b.wood && (a += "immergr\xFCn<br/>");
    "palm" == b.wood && (a += "Palmen<br/>");
    "nipa_palm" == b.wood && (a += "Nipapalmen<br/>");
    "eucalypt" == b.wood && (a += "Eukalypten<br/>");
    if ("filao" == b.wood || "casuarina" == b.wood) a += "Kasuarinengew\xE4chse<br/>";
  }

  if ("tree" == b.natural && (!b["genus:de"] && !b["species:de"] && b.leaf_type && (a = "broadleaved" == b.leaf_type || "deciduous" == b.leaf_type || "broadleafed" == b.leaf_type ? a + "Laubbaum<br/>" : a + "Nadelbaum<br/>"), b.genus && (a += b.genus + "<br/>"), b["genus:de"] && (a += b["genus:de"] + "<br/>"), b.species && (a += b.species + "<br/>"), b["species:de"] && (a += b["species:de"] + "<br/>"), "landmark" == b.denotation && (a += "durch Gr\xF6\xDFe und herausragender Position sich deutlich aus seinem Umfeld hervorhebender Baum.<br/>"), "natural_monument" == b.denotation || "yes" == b.monument)) a += "alter, unter besonderem Schutz stehender Baum.<br/>";
  "manger" == b["feeding:type"] && (a += "Futterbeh\xE4lter: Futterraufe<br/>");
  "automated" == b["feeding:type"] && (a += "Automat<br/>");
  if (b["feeding:for"]) switch (b["feeding:for"]) {
    case "sheep":
      a += "Tier: Schaaf<br/>";
      break;

    case "horse":
      a += "Tier: Pferd<br/>";
      break;

    case "cow":
      a += "Tier: Kuh<br/>";
      break;

    case "rabbit":
      a += "Tier: Kaninchen<br/>";
      break;

    case "bunny":
      a += "Tier: Hase<br/>";
      break;

    case "cat":
      a += "Tier: Katze </br>";
      break;

    case "swan":
      a += "Tier: Schwan </br>";
      break;

    case "guinea pig":
      a += "Tier: Meerschweinchen </br>";
      break;

    case "donkey":
      a += "Tier: Esel </br>";
      break;

    case "squirrel":
      a += "Tier: Eichh\xF6rnchen </br>";
      break;

    case "pig":
      a += "Tier: Schwein </br>";
      break;

    case "deer":
      a += "Tier: Reh </br>";
      break;

    case "guinea pig":
      a += "Tier: Meerschweinchen </br>";
      break;

    case "monkey":
      a += "Tier: Affe </br>";
      break;

    case "camel":
      a += "Tier: Kamel </br>";
      break;

    case "goat":
      a += "Tier: Ziege </br>";
      break;

    case "hamster":
      a += "Tier: Hamster </br>";
      break;

    case "alpaca":
      a += "Tier: Alpaka </br>";
      break;

    default:
      a += "Tiere: nicht bekannt<br/>";
  }
  if (b["feeding:fodder"]) switch (b["feeding:fodder"]) {
    case "hay":
      a += "F\xFCttern mit: Heu</br>";
      break;

    case "grain":
      a += "F\xFCttern mit: Getreide</br>";
      break;

    case "corn":
      a += "F\xFCttern mit: Korn</*br>";
      break;

    default:
      a += "F\xFCttern mit: nicht bekannt</br>";
  }
  "volcano" == b.natural && "active" == b.status && (a += "Aktiver Vulkan<br/>");
  "volcano" == b.natural && "dormant" == b.status && (a += "Ruhender Vulkan<br/>");
  "volcano" == b.natural && "extinct" == b.status && (a += "Erloschener Vulkan<br/>");
  "volcano" == b.natural && "stratovolcano" == b.type && (a += "Vulkantyp:Schichtvulkan<br/>");
  "volcano" == b.natural && "shield" == b.type && (a += "Vulkantyp:Schildvulkan<br/>");
  "volcano" == b.natural && "scoria" == b.type && (a += "Vulkantyp:Schlacken- und Aschenkegel<br/>");
  return a;
},
    fnContentProtectedArea = function fnContentProtectedArea(b) {
  var a = "",
      c = "";
  "protected_area" == b.boundary && (b.protect_class && (c = b.protect_class), b.protect_id && (c = b.protect_id), "1" == c && (a = "Beschreibung: Strenges Naturreservat, Wildnisgebiet<br/>"), "2" == c && (a = "Beschreibung: Nationalpark<br/>"), "3" == c && (a = "Beschreibung: Naturmonument<br/>"), "4" == c && (a = "Beschreibung: Biotop/Artenschutzgebiet mit Management<br/>"), "5" == c && (a = "Beschreibung: Gesch\xFCtzte Landschaft/Gesch\xFCtztes marines Gebiet<br/>"), "6" == c && (a = "Beschreibung: Ressourcenschutzgebiet mit Management<br/>"), "7" == c && (a = "Beschreibung: Lokal gesch\xFCtzte Bereiche<br/>"), "97" == c && (a = "Beschreibung: Gesch\xFCtzt oder ausgezeichnet durch Vereinbarungen auf kontinentaler Ebene<br/>"), "98" == c && (a = "Beschreibung: Gesch\xFCtzt oder ausgezeichnet durch zwischenstaatliche- oder internationale Vereinbarungen<br/>"), "99" == c && (a = "andere <br/>"), "21" == c && (a = "Beschreibung: Gemeindebefinden (heilige Orte, assoziatice Orte)<br/>"), "22" == c && (a = "Beschreibung: Kulturelle Werte (Kulturg\xFCter, historisches Erbe, Denkmalschutz)<br/>"), "23" == c && (a = "Beschreibung: Schutz zu Gundsten der Wirtschaft<br/>"), "24" == c && (a = "Beschreibung: Politische Schutzgebiete<br/>"), "25" == c && (a = "Beschreibung: Milit\xE4rische Schutzgebiete<br/>"), "26" == c && (a = "Beschreibung: Historische Schutzgebiete<br/>"), "29" == c && (a = "Beschreibung: Weitere gesellschaftliche Schutzgebiete<br/>"), "11" == c && (a = "Beschreibung: Bodenschutz (Vorgabe zum Fruchtbarkeitserhalt und Erosionsschutz)<br/>"), "12" == c && (a = "Beschreibung: Wasserschutzgebiet (Trinkwasserschutzgebiet, Heilquellenschutzgebiet,..)<br/>"), "13" == c && (a = "Beschreibung: Klima und Luft (Kaltluftenstehung/Frischluftversorgung, Immissionsschutz,..)<br/>"), "14" == c && (a = "Beschreibung: Artenschutzgebiet (Angelverbot, Fischereischutzzone, Jagdschutzgebiet, Vogelschutzgebiet,..)<br/>"), "15" == c && (a = "Beschreibung: \"Standortausstattung\": Retentionsraum (gesetzlich gesch\xFCtztes \xDCberschwemmungsgebiet) <br/>"), "16" == c && (a = "Beschreibung: Dauerhafte Gefahrenbereiche (Lebensschutz, Bodenbewegungsgebiet,..)<br/>"), "19" == c && (a = "Beschreibung: Weitere nationale Gebiete<br/>"));
  return a;
},
    fnContentLanduse = function fnContentLanduse(b) {
  var a = "";
  "quarry" == b.landuse && b.resource && (a += "Resource: " + b.resource + "<br/>");
  "open_stable" == b["animal_keeping:type"] && (a += "Offenstall<br/>");
  "field_shelter" == b["animal_keeping:type"] && (a += "Weide mit Unterstand<br/>");
  "paddock" == b["animal_keeping:type"] && (a += "Paddock<br/>");
  b.animal_keeping && (a += "Tiere: Perde<br/>");
  return a;
},
    fnMessstation = function fnMessstation(b) {
  var a = "";
  "yes" == b["monitoring:water_level"] && (a += "Pegelstand<br/>");
  "yes" == b["monitoring:seismic_activity"] && (a += "seismische Aktivit\xE4ten<br/>");
  "yes" == b["monitoring:tide_gauge"] && (a += "Tidestand<br/>");
  "yes" == b["monitoring:weather"] && (a += "Wetterdaten<br/>");
  "yes" == b["monitoring:air_quality"] && (a += "Luftqualit\xE4t<br/>");
  return a;
},
    fnContentRoute = function fnContentRoute(b) {
  var a = "";
  b.route && ("yes" == b.roundtrip && (a += "Rundweg<br/>"), b.length && (a += "L\xE4nge/Distanz: " + b.length + "<br/>"), b.distance && (a += "L\xE4nge/Distanz: " + b.distance + "<br/>"), b.symbol && (a += "Symbol: " + b.symbol + "<br/>"));
  return a;
},
    fnContentPetrol = function fnContentPetrol(b) {
  var a = "";
  "fuel" == b.amenity && ("yes" == b["fuel:biodiesel"] && (a += "Biodiesel<br/>"), "yes" == b["fuel:e85"] && (a += "Ethanol<br/>"), "yes" == b["fuel:e10"] && (a += "E10<br/>"), "yes" == b["fuel:lpg"] && (a += "Autogas<br/>"), "yes" == b["fuel:cng"] && (a += "Erdgas<br/>"), "diesel" == b.fuel && (a += "Diesel<br/>"), "lpg" == b.fuel && (a += "Autogas<br/>"), "yes" == b["fuel:octane_95"] && (a += "Super Bleifrei<br/>"), "yes" == b["fuel:octane_98"] && (a += "Super Plus<br/>"), "yes" == b["fuel:octane_100"] && (a += "V-Power Racing<br/>"), "yes" == b["fuel:octane_102"] && (a += "Ultimate<br/>"), "yes" == b["fuel:diesel"] && (a += "Diesel<br/>"), "yes" == b["fuel:electricity"] && (a += "Ladestation / Stromtankstelle<br/>"));
  return a;
},
    fnContentHistoric = function fnContentHistoric(b) {
  var a = "";
  if ("archaeological_site" == b.historic && b.site_type) switch (b.site_type) {
    case "megalith":
      a += "Megalith<br/>";
      break;

    case "bigstone":
      a += "Findling<br/>";
      break;

    case "tumulus":
      a += "H\xFCgelgrab<br/>";
      break;

    case "fortification":
      a += "historischer Graben / Wall<br/>";
      break;

    default:
      a += "unbekannt<br/>";
  }
  return a;
},
    fnContentBarriers = function fnContentBarriers(b, a) {
  var c = "";
  if ("wall" == b.barrier || "bollard" == b.barrier) b.material && (c += "Material: " + translate(b.material) + "<br/>");
  return c;
},
    fnContentTourism = function fnContentTourism(b) {
  var a = "";

  if ("camp_site" == b.tourism) {
    "yes" == b.dog && (a += "Hunde erlaubt<br/>");
    "no" == b.dog && (a += "Hunde nicht erlaubt<br/>");
    b.stars && (a += b.stars + "Sterne<br/>");
    b.caravans && (a += "Wohnmobilstellpl\xE4tze<br/>");
    if ("yes" == b.openfire || "yes" == b.fireplace) a += "Feuerstellen vorhanden<br/>";
    "yes" == b.washing_machine && (a += "Waschmaschinen<br/>");
    "yes" == b.dryer && (a += "Trockner<br/>");
    "yes" == b.group_only && (a += "Nutzung nur durch Gruppen<br/>");
    "reception" == b.camp_site && (a += "Reception vorhanden<br/>");
  }

  "information" == b.tourism && "map" == b.information && ("topo" == b.map_type && (a += "Topografische Karte</br>"), "street" == b.map_type && (a += "Stra\xDFenkarte</br>"), "scheme" == b.map_type && (a += "Schematische Karte</br>"), "toposcope" == b.map_type && (a += "Schematische Karte</br>"));
  "information" == b.tourism && "map" == b.information && ("site" == b.map_size && (a += "Karte einer Anlage</br>"), "city" == b.map_size && (a += "Stadtplan</br>"), "region" == b.map_size && (a += "Karte der Region</br>"));
  "geology" == b.board_type && (a += "Geologische Informationen<br/>");
  "history" == b.board_type && (a += "Historische Informationen<br/>");
  "nature" == b.board_type && (a += "Informationen \xFCber Natur<br/>");
  "notice" == b.board_type && (a += "Allgemeine Information<br/>");
  "plants" == b.board_type && (a += "Informationen \xFCber Pflanzen<br/>");
  "wildlife" == b.board_type && (a += "Informationen \xFCber Wild<br/>");
  return a;
},
    fnContentAmenity = function fnContentAmenity(b) {
  var a = "";
  "boat_sharing" == b.amenity && (a += b.boattype + "<br/>");
  "embassy" == b.amenity && (a += b.country + "<br/>");
  if (b.vending) switch (b.vending) {
    case "admission_tickets":
      a += "Tickets<br/>";
      break;

    case "animal_feed":
      a += "Tierfutter<br/>";
      break;

    case "books":
      a += "B\xFCcher<br/>";
      break;

    case "candles":
      a += "Kerzen<br/>";
      break;

    case "cigarettes":
      a += "Zigaretten<br/>";
      break;

    case "condoms":
      a += "Kondome<br/>";
      break;

    case "drinks":
      a += "Getr\xE4nke<br/>";
      break;

    case "first_aid":
      a += "Erste Hilfe Artikel<br/>";
      break;

    case "fishing_tackle":
      a += "Angelequipment<br/>";
      break;

    case "flowers":
      a += "Blumen<br/>";
      break;

    case "ice_cream":
      a += "Eis<br/>";
      break;

    case "laundry_detergent":
      a += "Waschmittel<br/>";
      break;

    case "newspapers":
      a += "Zeitung<br/>";
      break;

    case "SIM_cards":
      a += "SIM-Karten<br/>";
      break;

    case "sweets":
      a += "S\xFC\xDFigkeiten<br/>";
      break;

    case "parcel_pickup":
      a += "Paketstation<br/>";
      break;

    case "ice_cubes":
      a += "Eisw\xFCrfel<br/>";
      break;

    case "public_transport_tickets":
      a += "Tickets f\xFCr \xF6ffentliche Verkehrsmittel<br/>";
      break;

    case "parking_ticket":
      a += "Parkticket<br/>";
      break;

    case "sex_toys":
      a += "Sexspielzeug<br/>";
      break;

    case "stamps":
      a += "Briefmarken<br/>";
      break;

    case "toll":
      a += "Mauttickets<br/>";
      break;

    case "umbrellas":
      a += "Regenschirme<br/>";
      break;

    default:
      a += "Inhalt unbekannt<br/>";
  }
  "post_box" == b.amenity && (b.collection_times && (a += "Leerungszeiten: " + b.collection_times + "<br/>"), "yes" == b.drive_through && (a += "Vom Auto aus erreichbar. <br/>"));
  return a;
},
    fnContentStorage = function fnContentStorage(b) {
  var a = "";

  if ("storage_tank" == b.man_made) {
    if (b.content) {
      var c = b.content;

      switch (c) {
        case "fuel":
          c = "Diesel";
          break;

        case "oil":
          c = "\xD6l";
          break;

        case "gas":
          c = "Gas";
          break;

        case "slurry":
          c = "G\xFClle";
          break;

        case "cement":
          c = "Zement";
          break;

        case "water":
          c = "Wasser";
          break;

        case "manure":
          c = "D\xFCnger";
          break;

        case "silage":
          c = "Silage";
      }

      a += "Inhalt: " + c + "<br/>";
    }

    if (b.contents) {
      c = b.contents;

      switch (c) {
        case "fuel":
          c = "Diesel";
          break;

        case "oil":
          c = "\xD6l";
          break;

        case "gas":
          c = "Gas";
          break;

        case "slurry":
          c = "G\xFClle";
          break;

        case "cement":
          c = "Zement";
          break;

        case "water":
          c = "Wasser";
          break;

        case "manure":
          c = "D\xFCnger";
          break;

        case "silage":
          c = "Silage";
      }

      a += "Inhalt: " + c + "<br/>";
    }
  }

  b.storage && ("gas" == b.storage && (a += "Inhalt: Gas<br/>"), "oil" == b.storage && (a += "Inhalt: \xD6l<br/>"));
  return a;
},
    fnContentInformationCity = function fnContentInformationCity(b) {
  var a = "";
  b["name:de"] && (a += "deutscher Name: " + b["name:de"] + "<br/>");
  if (1E4 <= b.population) if (b.population = "" + b.population, 3 < b.population.length) {
    var c = b.population.length % 3,
        d = 0 < c ? b.population.substring(0, c) : "";

    for (var i = 0; i < Math.floor(b.population.length / 3); i++) {
      d = 0 == c && 0 == i ? d + b.population.substring(c + 3 * i, c + 3 * i + 3) : d + ("." + b.population.substring(c + 3 * i, c + 3 * i + 3));
    }

    a += "Einwohnerzahl: " + d + "<br/>";
  } else a += "Einwohnerzahl " + b.population + "<br/>";
  1E4 >= b.population && (a += "Einwohnerzahl: " + b.population + "<br/>");
  return a;
},
    fnContentEmergency = function fnContentEmergency(b) {
  var a = "";
  b.lifeboat && ("inshore" == b.lifeboat ? a += "Einsatzgebiet: Inshore (Binnen)<br/>" : "offshore" == b.lifeboat && (a += "Einsatzgebiet: Offshore (Buten)<br/>"));
  b["lifeboat:class"] && (a += "Bootstyp: " + b["lifeboat:class"] + "<br/>");

  if (b["siren:type"]) {
    var c = b["siren:type"];

    switch (c) {
      case "mechanical":
        c = "mechanisch";
        break;

      case "electronic":
        c = "elektronisch";
        break;

      case "pneumatic":
        c = "pneumatisch";
        break;

      case "electromechanic":
        c = "elektromechanisch";
    }

    a += "Typ: " + c + "<br/>";
  }

  if (b["siren:purpose"]) {
    c = b["siren:purpose"];

    switch (c) {
      case "air_raid":
        c = "Luftschutz";
        break;

      case "tornado":
        c = "Tornado";
        break;

      case "storm":
        c = "Sturm";
        break;

      case "civil_defense":
        c = "Bev\xF6lkerungsschutz";
        break;

      case "fire":
        c = "Feuer";
    }

    a += "Nutzung: " + c + "<br/>";
  }

  b["siren:model"] && (a += "Model: " + b["siren:model"] + "<br/>");
  b["siren:range"] && (a += "H\xF6rweite: " + b["siren:range"] + "<br/>");
  return a;
},
    fnContentCuisine = function fnContentCuisine(b) {
  var a = "";

  if (b.cuisine) {
    var c = "",
        a = ("supermarket" == b.shop || "convenience" == b.shop || "deli" == b.shop || "organic" == b.shop) && "restaurant" != b.amenity ? a + "Spezialit\xE4ten: " : a + "K\xFCche: ";
    "arabic" == b.cuisine && (c += "arabisch<br/>");
    "italian" == b.cuisine && (c += " italienisch<br/>");
    "international" == b.cuisine && (c += " international<br/>");
    "regional" == b.cuisine && (c += " regional<br/>");
    "chinese" == b.cuisine && (c += " chinesisch<br/>");
    "greek" == b.cuisine && (c += " griechisch<br/>");
    "african" == b.cuisine && (c += " afrikanisch<br/>");
    "german" == b.cuisine && (c += " deutsch<br/>");
    "mexican" == b.cuisine && (c += " mexikanisch<br/>");
    "french" == b.cuisine && (c += " franz\xF6sisch<br/>");
    "indian" == b.cuisine && (c += " indisch<br/>");
    "iranian" == b.cuisine && (c += " iranisch<br/>");
    "lebanese" == b.cuisine && (c += " libanesisch<br/>");
    "thai" == b.cuisine && (c += " thail\xE4ndisch<br/>");
    "balkan" == b.cuisine && (c += " balkan<br/>");
    "turkish" == b.cuisine && (c += " t\xFCrkisch<br/>");
    "bavarian" == b.cuisine && (c += " bayrisch<br/>");
    "czech" == b.cuisine && (c += " tschechisch<br/>");
    "portuguese" == b.cuisine && (c += " portugiesisch<br/>");
    "spanish" == b.cuisine && (c += " spanisch<br/>");
    "japanese" == b.cuisine && (c += " japanisch<br/>");
    "fish" == b.cuisine && (c += " Fisch<br/>");
    "brazilian" == b.cuisine && (c += " brasilianisch<br/>");
    "asian" == b.cuisine && (c += " asiatisch<br/>");
    "mediterranean" == b.cuisine && (c += " mediterran<br/>");
    "seafood" == b.cuisine && (c += " Meeresfr\xFCchte<br/>");
    "ice_cream" == b.cuisine && (c += " Eiscrem<br/>");
    "burger" == b.cuisine && (c += " Fast Food<br/>");
    "frozen_yogurt" == b.cuisine && (c += " Frozen Yogurt<br/>");
    "" == c && (c = b.cuisine + "<br/>");
    a += c;
  }

  return a;
},
    fnContentShipping = function fnContentShipping(b) {
  var a = "";
  b.harbour = "yes";
  "yes" == b["access:tide"] && (a += "Zufahrtsbeschr\xE4nkung durch Tide</br>");
  "yes" == b["access:swell"] && (a += "Zufahrtsbeschr\xE4nkung durch Schwell</br>");
  "yes" == b["access:ice"] && (a += "Zufahrtsbeschr\xE4nkung durch Eis</br>");
  b.vhf_channel && (a += "UKW-Kanal: " + b.vhf_channel + "</br>");
  b.mmsi && (a += "MMSI-Nummer: " + b.mmsi + "</br>");
  b["harbour:information"] && (a += "Information :" + b["harbour:information"] + "</br>");
  "yes" == b.motorboat && (a += "Fahren mit Motor erlaubt</br>");
  "no" == b.motorboat && (a += "Fahren mit Motor nicht erlaubt</br>");
  b.CEMT && (a += "CEMT: " + b.CEMT + "</br>");
  "yes" == b.intermittent && (a += "Fluss zeitweise ausgetrocknet</br>");
  "yes" == b.tidal && (a += "Gezeiten beeinflussen die Str\xF6mung</br>");
  b.draft && (a += "Fahrwassertiefe: " + b.draft + " m</br>");
  if ("slipway" == b.leisure || "slipway" == b.harbour) "hand" == b.operating && (a += "Funktionsweise: Handbetrieb, Slipwagen<br/>"), "car" == b.operating && (a += "Funktionsweise: mit Auto, Bootsanh\xE4nger<br/>"), "cable_winch" == b.operating && (a += "Funktionsweise: Seilwinde<br/>"), "travellift" == b.operating && (a += "Funktionsweise: Travellift<br/>"), "crane" == b.man_made && (a += "mit Kran<br/>", b["crane:maxload"] && (a += "Maximale Last: " + b["crane:maxload"] + "<br/>"), b["ship:maxdraft"] && (a += "Maximaler Tiefgang: " + b["ship:maxdraft"] + "<br/>"), b["ship:maxlength"] && (a += "Maximale Bootsl\xE4nge: " + b["ship:maxlength"] + "<br/>")), "yes" == b.vehicle && (a += "Mit Fahrzeug erreichbar<br/>");
  a += fnWreckInfo(b);

  if ("ferry" == b.route || "ferry_terminal" == b.amenity || "yes" == b.ferry) {
    var c = b.duration;
    "" != c && "undefined" != c && null != c && (a += "Fahrtzeit in Std. : " + c + "<br/>");
    "yes" == b.motorcar && (a += "Autos erlaubt <br/>");
    "no" == b.motorcar && (a += "Autos nicht erlaubt <br/>");
    "no" == b.motor_vehicle && (a += "Fahrzeuge nicht erlaubt <br/>");
    "yes" == b.motor_vehicle && (a += "Fahrzeuge erlaubt <br/>");
    "yes" == b.vehicle && (a += "Fahrzeuge erlaubt <br/>");
    "no" == b.vehicle && (a += "Keine Fahrzeuge<br/>");
    "no" == b.bicycle && (a += "Keine Fahrr\xE4der<br/>");
    "no" == b.bicycle && (a += "Fahrr\xE4der erlaubt<br/>");
    "yes" == b.hgv && (a += "LKW erlaubt <br/>");
    "no" == b.hgv && (a += "LKW nicht erlaubt <br/>");
    "yes" == b.foot && (a += "Fussg\xE4nger erlaubt <br/>");
    "no" == b.foot && (a += "Fussg\xE4nger nicht erlaubt <br/>");
    "yes" == b.bicycle && (a += "Fahrradfahrer erlaubt <br/>");
    "no" == b.bicycle && (a += "Fahrradfahrer nicht erlaubt <br/>");
    "yes" == b["ferry:cable"] && (a += "Seilf\xE4hre<br/>");
  }

  if (b["seamark:light:1:colour"]) {
    c = b["seamark:light:1:colour"];

    switch (c) {
      case "white":
        c = "Wei\xDF";
        break;

      case "red":
        c = "Rot";
        break;

      case "green":
        c = "Gr\xFCn";
        break;

      case "blue":
        c = "Blau";
        break;

      case "yellow":
        c = "Gelb";
        break;

      case "amber":
        c = "Bernsteinfarben";
    }

    a += "Farbe des Lichts: " + c + "<br/>";
  }

  "lighthouse" == b.man_made && (b["seamark:light:1:character"] && (a += "Rhytmus des Lichtes: " + b["seamark:light:1:character"] + "<br/>"), b["seamark:light:1:period"] && (a += "Periode: " + b["seamark:light:1:period"] + "<br/>"), b["seamark:light:1:height"] && (a += "H\xF6he: " + b["seamark:light:1:height"] + " m<br/>"), b["seamark:light:1:range"] && (a += "Reichweite: " + b["seamark:light:1:range"] + " sm<br/>"));

  if (b["seamark:light:colour"]) {
    c = b["seamark:light:colour"];

    switch (c) {
      case "white":
        c = "Wei\xDF";
        break;

      case "red":
        c = "Rot";
        break;

      case "green":
        c = "Gr\xFCn";
        break;

      case "blue":
        c = "Blau";
        break;

      case "yellow":
        c = "Gelb";
        break;

      case "amber":
        c = "Bernsteinfarben";
    }

    a += "Farbe des Lichts: " + c + "<br/>";
  }

  "lighthouse" == b.man_made && (b["seamark:light:character"] && (a += "Rhytmus des Lichtes: " + b["seamark:light:character"] + "<br/>"), b["seamark:light:height"] && (a += "H\xF6he: " + b["seamark:light:height"] + " m<br/>"), b["seamark:light:range"] && (a += "Reichweite: " + b["seamark:light:range"] + " sm<br/>"), b["seamark:light:period"] && (a += "Periode: " + b["seamark:light:period"] + "<br/>"));
  return a;
},
    fnContentHydrants = function fnContentHydrants(b) {
  var a = "";

  if ("fire_hydrant" == b.emergency) {
    var c = b["fire_hydrant:count"];
    "undefined" != c && null != c && "" != c && (a += "Anzahl: " + c + "<br/>");
    c = b["fire_hydrant:diameter"];
    "undefined" != c && null != c && "" != c && (a += "Rohrdurchmesser: " + c + " mm<br/>");
    c = b["fire_hydrant:pressure"];
    "undefined" != c && null != c && "" != c && (a = "suction" == c ? a + "Druck in bar / Saugleitung: Saugleitung<br/>" : a + ("Druck in bar / Saugleitung: " + c + "<br/>"));
    c = b["fire_hydrant:position"];
    "undefined" != c && null != c && "" != c && ("lane" == c ? a += "Position: Fahrbahn<br/>" : "parking_lot" == c ? a += "Position: Parkbucht<br/>" : "sidewalk" == c ? a += "Position: B\xFCrgersteig<br/>" : "green" == c && (a += "Position: Wiese<br/>"));
    c = b.water_volume;
    "undefined" != c && null != c && "" != c && (a += "Volumen: " + c + "<br/>");
    c = b["fire_hydrant:awwa_class"];
    "undefined" != c && null != c && "" != c ? a += "AWWA Klasse: " + c + "<br/>" : (c = b.flow_rate, "undefined" != c && null != c && "" != c && (a += "Durchfluss: " + c + "<br/>"));
    c = b.water_source;
    "undefined" != c && null != c && "" != c && "main" != c && (a += "Wasserquelle: " + c + "<br/>");
    c = b["couplings:type"];
    "undefined" != c && null != c && "" != c && (a += "Kopplungstyp: " + c + "<br/>");
    c = b["couplings:diameter"];
    "undefined" != c && null != c && "" != c && (a += "Kopplungsdurchmesser: " + c + "<br/>");
    c = b["pillar:type"];
    "dry_barrel" === c && (a += "Typ \xDCberflurhydrant: " + c + "<br/>");
    "fire_hydrant" === b["disused:emergency"] && (a += "Aktuell unbrauchbar.");
    "" == a && (a = "Keine Details vorhanden.");
  }

  return a;
},
    fnContentStreetsTraffic = function fnContentStreetsTraffic(b) {
  var a = "";
  "yes" == b["red_turn:right"] && (a += "Ampel mit Gr\xFCnpfeil<br/>");
  "no" == b["red_turn:right"] && (a += "Ampel ohne Gr\xFCnpfeil<br/>");
  b.bridge && (b.height && (a += "H\xF6he \xFCber dem Grund: " + b.height + " m<br/>"), b.length && (a += "L\xE4nge der Br\xFCcke: " + b.length + " m<br/>"), b.bridge_ref && (a += "Bauwerksnummer: " + b.bridge_ref + "<br/>"), b.start_date && (a += "Baujahr: " + b.start_date + "</br>;"), b.maxweight && (a += "Tragf\xE4higkeit: " + b.maxweight + " t</br>"));
  b.highway && "yes" == b.toll && (a += "Mautpflichtige Stra\xDFe<br/>");
  "yes" == b["toll:hgv"] && (a += "Mautpflichtige Stra\xDFe f\xFCr LKWs<br/>");

  if (b.surface) {
    var c = b.surface,
        a = a + "Oberfl\xE4che: ";

    switch (c) {
      case "grass":
        a += "Gras<br/>";
        break;

      case "paved":
        a += "versiegelt<br/>";
        break;

      case "asphalt":
        a += "Asphalt<br/>";
        break;

      case "cobblestone":
        a += "Naturstein unbehauen<br/>";
        break;

      case "sett":
        a += "behauenes Steinpflaster<br/>";
        break;

      case "concrete":
        a += "Beton<br/>";
        break;

      case "unpaved":
        a += "ohne Stra\xDFenbelag<br/>";
        break;

      case "paving_stones":
        a += "Pflastersteine<br/>";
        break;

      case "compacted":
        a += "verdichtete Deckschicht aus Natursteinmaterial<br/>";
        break;

      case "dirt":
        a += "unbefestigt<br/>";
        break;

      case "fine_gravel":
        a += "Splitt/Kies<br/>";
        break;

      case "grass_paver":
        a += "Rasengittersteine<br/>";
        break;

      case "gravel":
        a += "Schotter<br/>";
        break;

      case "earth":
        a += "naturbelassene Oberfl\xE4che<br/>";
        break;

      case "ground":
        a += "naturbelassene Oberfl\xE4che<br/>";
        break;

      case "metal":
        a += "Metall<br/>";
        break;

      case "mud":
        a += "Matsch, Morast<br/>";
        break;

      case "sand":
        a += "Sand<br/>";
        break;

      case "wood":
        a += "Holz<br/>";
        break;

      case "tartan":
        a += "Tartan- oder Kunststoffbelag<br/>";
        break;

      case "artificial_turf":
        a += "Kunstrasen<br/>";
        break;

      case "clay":
        a += "Ascheplatz<br/>";
        break;

      default:
        a += "unbekannt<br/>";
    }
  }

  "grade1" == b.tracktype && (a += "Wegbeschaffenheit: Befestigter Weg (Asphalt, Beton oder Pflastersteine)<br/>");
  "grade2" == b.tracktype && (a += "Wegbeschaffenheit: Befestigter Weg (Schotter oder andere verdichtete Materialien)<br/>");
  "grade3" == b.tracktype && (a += "Wegbeschaffenheit: Befestigter oder ausgebesserter Weg, der harten und weichen Untergrund enth\xE4lt (z. B. Feinschotter-, Sand- oder Erdweg)<br/>");
  "grade4" == b.tracktype && (a += "Wegbeschaffenheit: Unbefestigter Weg, haupts\xE4chlich weiche Materialien, Pflanzenwuchs entlang der Spurmitte (z. B. Gras-, Sand- oder Erdweg)<br/>");
  "grade5" == b.tracktype && (a += "Wegbeschaffenheit: Unbefestigter Weg, Oberfl\xE4che besteht aus Sand, Erde etc., oft nur Abdruck in Gras, teilweise schwer von umgebendem Gel\xE4nde unterscheidbar<br/>");
  "yes" == b.motorcycle && (a += "<br/>mit dem Auto befahrbar.<br/>");
  "no" == b.motorcycle && (a += "<br/>keine motorisierten Fahrzeuge zugelassen.<br/>");
  "excellent" == b.trail_visibility && (a += "Wegerkennbarkeit: Gut ausgewiesener Weg<br/>");
  "good" == b.trail_visibility && (a += "Wegerkennbarkeit: Wegmarkierung sichbar, aber manchmal etwas schwer zu finden<br/>");
  "intermediate" == b.trail_visibility && (a += "Wegerkennbarkeit: Weg nicht durchgegend sichbar<br/>");
  "bad" == b.trail_visibility && (a += "Wegerkennbarkeit: Wegspur ist kaum zu erkennen<br/>");
  "horrible" == b.trail_visibility && (a += "Wegerkennbarkeit: Oft kein Weg vorhanden<br/>");
  "no" == b.trail_visibility && (a += "Wegerkennbarkeit: Meistens keine Wegspur zu erkennen<br/>");
  "hiking" == b.sac_scale && (a += "Weg: Weg gut gebahnt. (Schwierigskeitstyp: 1)</br>");
  "mountain_hiking" == b.sac_scale && (a += "Weg: Durchgehend gut ersichtlicher und gut begehbarer Weg (Schwierigskeitstyp: 2)</br>");
  "demanding_mountain_hiking" == b.sac_scale && (a += "Weg: Heikle Stellen k\xF6nnen mit Seilen oder Ketten gesichert sein. Leitern sind m\xF6glich. Eventuell sind die H\xE4nde f\xFCrs Gleichgewicht n\xF6tig. (Schwierigskeitstyp: 3)</br>");
  "alphine_hiking" == b.sac_scale && (a += "Weg: Wegspur kaum vorhanden. An gewissen Stellen ben\xF6tigt man die H\xE4nde zum weiterkommen (Schwierigskeitstyp: 4)</br>");
  "demanding_alphine_hiking" == b.sac_scale && (a += "Weg: Oft weglos, einzelne einfache Kletterstellen bis II. (Schwierigskeitstyp: 5)</br>");
  "difficult_alpine_hiking" == b.sac_scale && (a += "Weg: Schwieriges Alpinenwandern,Kletterstellen bis II. Schwierigskeitstyp: 6</br>");
  b["mtb:name"] && (a += "Fahrradstrecke :" + b["mtb:name"] + "</br>");
  "0" == b["mtb:scale"] && (a += "Mountainbikestrecke: Keine besondere Schwierigkeiten.</br>Wegbeschaffenheit: fester und griffiger Untergrund.</br>Hindernisse: Keine Hindernisse</br>Gef\xE4lle: Leicht bis m\xE4\xDFig</br>Kurven: weit</br>Fahrtechnik: keine besonderes fahrtechnisches K\xF6nnen n\xF6tig</br>");
  "1" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der Weg enth\xE4lt flache Wurzeln und kleinere Steine. H\xE4ufig auch vereizelte Wasserrinnen und Erosionssch\xE4den</br>Wegbeschaffenheit: loserer Untergrund m\xF6glich, kleine Wurzeln und Steine</br>Hindernisse: kleine Hindernisse, Wasserrinnen, Erosionssch\xE4den</br>Gef\xE4lle: bis zu 40%</br>Kurven: eng</br>Fahrtechnik: Fahrtechnische Grundkentnisse n\xF6tig. Hindernisse k\xF6nnen \xFCberrollt werden</br>");
  "2" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der Weg enth\xE4lt gr\xF6\xDFere Wurzeln und Steine. H\xE4ufig auch vereizelte Wasserrinnen und Erosionssch\xE4den</br>Wegbeschaffenheit: Untergrund meist nicht verfestigt, gr\xF6\xDFere Wurzeln und Steine</br>Hindernisse:  flache Abs\xE4tze und Treppen</br>Gef\xE4lle: bis zu 70%</br>Kurven: leichte Spitzkehren</br>Fahrtechnik: Fortgeschrittene Fahrtechnik n\xF6tig.</br>");
  "3" == b["mtb:scale"] && (a += "Mountainbikestrecke: Auf dem Weg findet man verblockte Singletrails mit vielen gr\xF6\xDFeren Felsbrocken und/oder Wurzelpassagen</br>Wegbeschaffenheit: verblockt, viele gro\xDFe Wurzeln/Felsen - rutschiger Untergrund, loses Ger\xF6ll</br>Hindernisse:  hohe Abs\xE4tze</br>Gef\xE4lle: 70% oder mehr</br>Kurven: enge Spitzkehren</br>Fahrtechnik: Sehr gute Bike-Beherrschung n\xF6tig.</br>");
  "4" == b["mtb:scale"] && (a += "Mountainbikestrecke: Auf dem Weg sind sehr steile und stark verblockte Singletrails mit gro\xDFen Felsbrocken und/oder anspruchsvollen Wurzelpassagen, dazwischen h\xE4ufig loses Ger\xF6ll und extreme Steilrampen</br>Wegbeschaffenheit: verblockt, viele gro\xDFe Wurzeln/Felsen - rutschiger Untergrund, loses Ger\xF6ll</br>Hindernisse:  Steilrampen, kaum fahrbare Abs\xE4tze</br>Gef\xE4lle: 70% oder mehr</br>Kurven:  \xD6senartige Spitzkehren</br>Fahrtechnik: Perfekte Bike-Beherrschung mit Trial-Techniken n\xF6tig.</br>");
  "5" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der weg wird charakterisiert durch blockartiges Gel\xE4nde mit Gegenanstiegen, Ger\xF6llfeldern und Erdrutschen, \xF6senartigen Spitzkehren, mehreren hohen, direkt aufeinanderfolgenden Abs\xE4tzen und Hindernissen wie umgefallenen B\xE4umen</br>Wegbeschaffenheit: verblockt mit Gegenanstiegen / rutschiger Untergrund, loses Ger\xF6ll / der Weg ist eher ein Wandersteig</br>Hindernisse:  Steilrampen, kaum fahrbare Abs\xE4tze</br>Gef\xE4lle: 70% oder mehr</br>Kurven:  \xD6senartige Spitzkehren mit Hindernissen</br>Fahrtechnik: excellente Bike-Beherrschung spezieller Trial-Techniken n\xF6tig.</br>");
  "6" == b["mtb:scale"] && (a += "Mountainbikestrecke: Der weg ist hochanspruchsvoll, und selbst f\xFCr Profis und Trial-Fahrer nicht passierbar</br>Wegbeschaffenheit:  Gro\xDFteils nur noch kletterbar</br>Hindernisse: Abs\xE4tze > 2 m, Leitern, Trittstufen, Kletterstellen bei denen man beide H\xE4nde braucht.</br>Gef\xE4lle: 100% oder mehr</br>Kurven: - </br>Fahrtechnik:  hier reicht auch die beste Fahrtechnik nicht mehr</br>");
  "10" == b.maxspeed && (a += "Vekehrsber\xFChigter Bereich. Hier gilt eine maximale Fahrgeschwindigkeit von 10 Km/h sowie die Regel rechts vor links.</br>");
  "30" == b.maxspeed && (a += "Vekehrsber\xFChigter Bereich. Hier gilt rechts vor links sowie eine maximale Geschwindigkeit von 30 Km/h</br>");
  "50" == b.maxspeed && (a += "Maximal erlaubte Geschwindigkeit von 50 Km/h darf nicht \xFCberschritten werden </br>");
  "70" == b.maxspeed && (a += "Maximal erlaubte Geschwindigkeit von 50 Km/h darf nicht \xFCberschritten werden </br>");
  "80" == b.maxspeed && (a += "Maximale Geschwindigkeit von 80 Km/h darf nicht \xFCberschritten werden.</br>");
  "100" == b.maxspeed && (a += "Maximale Geschwindigkeit von 100 Km/h darf nicht \xFCberschritten werden.</br>");
  "no" == b.overtaking && (a += "\xDCberholverbot, Fahrzeuge d\xFCrfen nicht \xFCberholen !</br>");
  "yes" == b.noexit && (a += "Die Stra\xDFe endet hier, es handelt sich um eine Sackgasse</br>");
  "yes" == b.oneway && (a += "Es handelt sich hier um eine Einbahnstra\xDFe, sie d\xFCrfen diese Stra\xDFe nur in eine Richtung befahren</br>");
  "designated" == b.priority_road && (a += "Es handelt sich hierbei um eine Vorfahrtsstra\xDFe, derjenige, der sich auf dieser befindet, hat gegen\xFCber anderen Fahrzeugen die Vorfahrt!</br>");
  "end" == b.priority_road && (a += "Die Vorfahrtsstra\xDFe endet hier und die Regelung wird aufgehoben</br>");
  "emergency_bay" == b.highway && (a += "Hier befindet sich eine Bucht die nur in Notf\xE4llen zur Benuzung zur Verf\xFCgung steht</br>");
  "yes" == b.traffic_calming && (a += "Verkehrsberuhigter Bereich</br>");
  "bump" == b.traffic_calming && (a += "Kurze Bodenwelle</br>");
  "chicane" == b.traffic_calming && (a += "Zu umfahrendenes Hinderniss</br>");
  "choker" == b.traffic_calming && (a += "Fahrbahnverengung, zu umfahrende Hindernisse m\xF6glich</br>");
  "cushion" == b.traffic_calming && (a += "Bodenwelle mit L\xFCcken aus mehreren rechteckigen Huckeln</br>");
  "hump" == b.traffic_calming && (a += "vergleichbare Bodenwelle mit etwar einer L\xE4nge von 2-4M</br>");
  "island" == b.traffic_calming && (a += "Eine Verkehrsinsel</br>");
  "rumble_strip" == b.traffic_calming && (a += "Holperstreifen</br>");
  "table" == b.traffic_calming && (a += "lange Bodenwellen mit flachen Mittelst\xFCck</br>");

  if ("parking" == b.amenity && ("yes" == b.fee && (a += "kostenpflichtig<br/>"), c = b["capacity:women"], "" != c && "no" != c && null != c)) {
    var d = "unbekannt";
    "yes" != c && (d = c);
    a += "Frauenparkpl\xE4tze (Anzahl: " + d + ") <br/>";
  }

  b.park_ride && ("bus" == b.park_ride && (a += "Busanbindung<br/>"), "tram" == b.park_ride && (a += "Bahnanbindung<br/>"), "unknown" == b.park_ride && (a += "Verkehrsmittel unbekannt<br/>"));
  b["railway:position"] && (a += "Streckenkilometer<br/>Position: " + b["railway:position"] + "<br/>");
  b.uic_ref && (a += "UIC: " + b.uic_ref + "<br/>");
  return a;
},
    fnContentSports = function fnContentSports(b) {
  var a = "";
  "9pin" == b.sport && (a += "M\xF6gliche Sportart: Kegeln<br/>");
  "10pin" == b.sport && (a += "M\xF6gliche Sportart: Bowling<br/>");
  "american_football" == b.sport && (a += "M\xF6gliche Sportart: American Football<br/>");
  "aikido" == b.sport && (a += "M\xF6gliche Sportart: Aikido<br/>");
  "archery" == b.sport && (a += "M\xF6gliche Sportart: Bogenschie\xDFen<br/>");
  "athletics" == b.sport && (a += "M\xF6gliche Sportart: Leichtathletik<br/>");
  "australian_football" == b.sport && (a += "M\xF6gliche Sportart: Australian Football<br/>");
  "base" == b.sport && (a += "M\xF6gliche Sportart: Objektspringen<br/>");
  "badminton" == b.sport && (a += "M\xF6gliche Sportart: Badminton<br/>");
  "baseball" == b.sport && (a += "M\xF6gliche Sportart: Baseball<br/>");
  "basketball" == b.sport && (a += "M\xF6gliche Sportart: Basketball<br/>");
  "beachvolleyball" == b.sport && (a += "M\xF6gliche Sportart: Beachvolleyball<br/>");
  "bmx" == b.sport && (a += "M\xF6gliche Sportart: BMX<br/>");
  "boules" == b.sport && (a += "M\xF6gliche Sportart: Boccia<br/>");
  "boule" == b.sport && (a += "M\xF6gliche Sportart: Boccia<br/>");
  "bowls" == b.sport && (a += "M\xF6gliche Sportart: Bowls<br/>");
  "boxing" == b.sport && (a += "M\xF6gliche Sportart: Boxen<br/>");
  "canadian_football" == b.sport && (a += "M\xF6gliche Sportart: Canadian Football<br/>");
  "canoe" == b.sport && (a += "M\xF6gliche Sportart: Paddeln<br/>");
  "chess" == b.sport && (a += "M\xF6gliche Sportart: Schach<br/>");
  "cliff_diving" == b.sport && (a += "M\xF6gliche Sportart: Klippenspringen<br/>");
  "climbing" == b.sport && (a += "M\xF6gliche Sportart: Klettern<br/>");
  "climbing_adventure" == b.sport && (a += "M\xF6gliche Sportart: Klettern<br/>");
  "cricket" == b.sport && (a += "M\xF6gliche Sportart: Cricket<br/>");
  "cricket_nets" == b.sport && (a += "M\xF6gliche Sportart: Cricket Netz<br/>");
  "croquet" == b.sport && (a += "M\xF6gliche Sportart: Croquet<br/>");
  "curling" == b.sport && (a += "M\xF6gliche Sportart: Curling<br/>");
  "cycling" == b.sport && (a += "M\xF6gliche Sportart: Radrennen, Radsport<br/>");
  "dog_racing" == b.sport && (a += "M\xF6gliche Sportart: Hunderennen<br/>");
  if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";
  "fencing" == b.sport && (a += "M\xF6gliche Sportart: Fechten<br/>");
  "equestrian" == b.sport && (a += "M\xF6gliche Sportart: Reiten<br/>");
  "football" == b.sport && (a += "M\xF6gliche Sportart: American Football<br/>");
  "free_flying" == b.sport && (a += "M\xF6gliche Sportart: Freeflying<br/>");
  "gaelic_games" == b.sport && (a += "M\xF6gliche Sportart: Gaelic games<br/>");
  "golf" == b.sport && (a += "M\xF6gliche Sportart: Golf<br/>");
  "gymnastics" == b.sport && (a += "M\xF6gliche Sportart: Gymnastik<br/>");
  "hockey" == b.sport && (a += "M\xF6gliche Sportart: Hockey<br/>");
  "horseshoes" == b.sport && (a += "M\xF6gliche Sportart: Hufeisenwerfen<br/>");
  "horse_racing" == b.sport && (a += "M\xF6gliche Sportart: Pferderennen<br/>");
  "ice_stock" == b.sport && (a += "M\xF6gliche Sportart: Eisstockschie\xDFen<br/>");
  "judo" == b.sport && (a += "M\xF6gliche Sportart: Judo<br/>");
  "karting" == b.sport && (a += "M\xF6gliche Sportart: Kartfahren<br/>");
  "kitesurfing" == b.sport && (a += "M\xF6gliche Sportart: Kitesurfing<br/>");
  "korfball" == b.sport && (a += "M\xF6gliche Sportart: Korfball<br/>");
  "motor" == b.sport && (a += "M\xF6gliche Sportart: Motorsport<br/>");
  "multi" == b.sport && (a += "M\xF6gliche Sportart: Mehrfachsport<br/>");
  "obstacle_course" == b.sport && (a += "M\xF6gliche Sportart: Hindernislauf<br/>");
  "orienteering" == b.sport && (a += "M\xF6gliche Sportart: Orientierungslauf<br/>");
  "paddle_tennis" == b.sport && (a += "M\xF6gliche Sportart: Paddle-Tennis<br/>");
  "paragliding" == b.sport && (a += "M\xF6gliche Sportart: Gleitschirmfliegen<br/>");
  "Pelota" == b.sport && (a += "M\xF6gliche Sportart: Pelota<br/>");
  "rasquet" == b.sport && (a += "M\xF6gliche Sportart: Racquetball<br/>");
  "rowing" == b.sport && (a += "M\xF6gliche Sportart: Rudern<br/>");
  "rugby_league" == b.sport && (a += "M\xF6gliche Sportart: Rugby League<br/>");
  "rugby_union" == b.sport && (a += "M\xF6gliche Sportart: Rugby Union<br/>");
  "running" == b.sport && (a += "M\xF6gliche Sportart: Laufsport<br/>");
  "scuba_diving" == b.sport && (a += "M\xF6gliche Sportart: Sporttauchen<br/>");
  "shooting" == b.sport && (a += "M\xF6gliche Sportart: Sportschie\xDFen<br/>");
  "skating" == b.sport && (a += "M\xF6gliche Sportart: Eislaufsport<br/>");
  "skateboard" == b.sport && (a += "M\xF6gliche Sportart: Skateboard<br/>");
  "skiing" == b.sport && (a += "M\xF6gliche Sportart: Skifahren<br/>");
  "soccer" == b.sport && (a += "M\xF6gliche Sportart: Fu\xDFball<br/>");
  "surfing" == b.sport && (a += "M\xF6gliche Sportart: Surfen<br/>");
  "swimming" == b.sport && (a += "M\xF6gliche Sportart: Schwimmen<br/>");
  "table_tennis" == b.sport && (a += "M\xF6gliche Sportart: Tischtennis<br/>");
  "taekwondo" == b.sport && (a += "M\xF6gliche Sportart: Taekwondo<br/>");
  "team_handball" == b.sport && (a += "M\xF6gliche Sportart: Handball<br/>");
  "tennis" == b.sport && (a += "M\xF6gliche Sportart: Tennis<br/>");
  "toboggan" == b.sport && (a += "M\xF6gliche Sportart: Rodeln<br/>");
  "volleyball" == b.sport && (a += "M\xF6gliche Sportart: Volleyball<br/>");
  "water_ski" == b.sport && (a += "M\xF6gliche Sportart: Wasserski<br/>");
  "weightlifting" == b.sport && (a += "M\xF6gliche Sportart: Gewichtheben<br/>");
  "wrestling" == b.sport && (a += "M\xF6gliche Sportart: Ringen<br/>");
  return a;
};

exports.fnContentSports = fnContentSports;
exports.fnContentStreetsTraffic = fnContentStreetsTraffic;
exports.fnContentHydrants = fnContentHydrants;
exports.fnContentShipping = fnContentShipping;
exports.fnContentCuisine = fnContentCuisine;
exports.fnContentEmergency = fnContentEmergency;
exports.fnContentInformationCity = fnContentInformationCity;
exports.fnContentStorage = fnContentStorage;
exports.fnContentAmenity = fnContentAmenity;
exports.fnContentTourism = fnContentTourism;
exports.fnContentBarriers = fnContentBarriers;
exports.fnContentHistoric = fnContentHistoric;
exports.fnContentPetrol = fnContentPetrol;
exports.fnContentRoute = fnContentRoute;
exports.fnMessstation = fnMessstation;
exports.fnContentLanduse = fnContentLanduse;
exports.fnContentProtectedArea = fnContentProtectedArea;
exports.fnContentNatural = fnContentNatural;
exports.fnContentAerodrome = fnContentAerodrome;
exports.fnContent = fnContent;

function fnArztInfo(b) {
  var a = "",
      c = "",
      d = b["healthcare:speciality"];
  "" != d && ("general" == d && (c += "Allgemeinmedizin<br/>"), "allergology" == d && (c += "Allergologie<br/>"), "anaesthetics" == d && (c += "An\xE4sthesiologie<br/>"), "biochemistry" == d && (c += "Medizinische und chemische Labordiagnostik<br/>"), "biological_haematology" == d && (c += "Biologische H\xE4matologie<br/>"), "biology" == d && (c += "Medizinische Biologie<br/>"), "cardiology" == d && (c += "Kardiologie<br/>"), "cardiac_surgery" == d && (c += "Kardiovaskularchirurgie<br/>"), "child_psychiatry" == d && (c += "Kinder- u. Jugendpsychatrie<br/>"), "dental_oral_maxillo_facial_surgery" == d && (c += "Zahn-, Mund-, Kiefer- und Gesichtschirurgie<br/>"), "dermatology" == d && (c += "Hautkrankheiten<br/>"), "dermatovenereology" == d && (c += "Haut- und Geschlechtskrankheiten<br/>"), "diagnostic_radiology" == d && (c += "Diagnostische Radiologie<br/>"), "emergency" == d && (c += "Unfall- und Notfallmedizin<br/>"), "endocrinology" == d && (c += "Endokrinologie<br/>"), "gastroenterological_surgery" == d && (c += "Gastroenterologische Chirurgie<br/>"), "gastroenterology" == d && (c += "Gastroenterologie<br/>"), "geriatrics" == d && (c += "Geriatrie<br/>"), "gynaecology" == d && (c += "Geburtshilfe und Frauenheilkunde<br/>"), "haematology" == d && (c += "Allgemeine H\xE4matologie<br/>"), "hepatology" == d && (c += "Hepatologie<br/>"), "immunology" == d && (c += "Immunologie<br/>"), "infectious_diseases" == d && (c += "Ansteckende Krankheiten<br/>"), "intensive" == d && (c += "Intensivmedizin<br/>"), "internal" == d && (c += "Allgemeine (innere) Medizin<br/>"), "maxillofacial_surgery" == d && (c += "Mund-Kiefer-Gesichtschirurgie<br/>"), "nephrology" == d && (c += "Nierenkrankheiten<br/>"), "neurology" == d && (c += "Neurologie<br/>"), "neurophysiology" == d && (c += "Klinische Neurophysiologie<br/>"), "neuropsychiatry" == d && (c += "Neuropsychiatrie(Neurologie und Psychiatrie)<br/>"), "neurosurgery" == d && (c += "Neurochirurgie<br/>"), "nuclear" == d && (c += "Nuklearmedizin<br/>"), "occupational" == d && (c += "Arbeitsmedizin <br/>"), "oncology" == d && (c += "Onkologie<br/>"), "ophthalmology" == d && (c += "Augenheilkunde<br/>"), "orthopaedics" == d && (c += "Orthop\xE4die<br/>"), "otolaryngology" == d && (c += "Hals-Nasen-Ohren-Heilkunde<br/>"), "paediatric_surgery" == d && (c += "Kinderchirurgie<br/>"), "paediatrics" == d && (c += "Kinderheilkunde<br/>"), "palliative" == d && (c += "Palliativmedizin<br/>"), "physiatry" == d && (c += "Physikalischeund Rehabilitative Medizin<br/>"), "plastic_surgery" == d && (c += "Plastische Chirurgie<br/>"), "proctology" == d && (c += "Proktologie<br/>"), "psychiatry" == d && (c += "Psychiatrie<br/>"), "pulmonology" == d && (c += "Lungen- und Bronchialheilkunde<br/>"), "radiology" == d && (c += "Radiologie<br/>"), "radiotherapy" == d && (c += "Strahlentherapie<br/>"), "rheumatology" == d && (c += "Rheumatologie<br/>"), "stomatology" == d && (c += "Stomatologie<br/>"), "surgery" == d && (c += "Chirurgie<br/>"), "surgical_oncology" == d && (c += "Krebschirurgie<br/>"), "thoracic_surgery" == d && (c += "Thoraxchirurgie<br/>"), "transplant" == d && (c += "Transplantationsmedizin<br/>"), "trauma" == d && (c += "Unfallchirurgie<br/>"), "tropical" == d && (c += "Tropenmedizin<br/>"), "urology" == d && (c += "Urologie<br/>"), "vascular_surgery" == d && (c += "Gef\xE4\xDFchirurgie<br/>"), "venereology" == d && (c += "Geschlechtskrankheiten<br/>"), "acupuncture" == d && (c += "Akupunktur<br/>"), "naturopathy" == d && (c += "Naturheilkunde<br/>"), "chiropractic" == d && (c += "Chiropraktik <br/>"), "homeopathy" == d && (c += "Hom\xF6opathie<br/>"), "osteopathy" == d && (c += "Osteopathie<br/>"));
  "" != b.health_specialty && ("yes" == b["health_specialty:family_medicine"] && (c += "Allgemeinmedizin<br/>"), "yes" == b["health_specialty:emergency_medicine"] && (c += "Notfallmedizin<br/>"), "yes" == b["health_specialty:anaesthesiology"] && (c += "An\xE4sthesie<br/>"), "yes" == b["health_specialty:dermatology"] && (c += "Dermatologie<br/>"), "yes" == b["health_specialty:ear_nose_throat"] && (c += "Hals, Nasen, Ohren (HNO)<br/>"), "yes" == b["health_specialty:occupational_medicine"] && (c += "Arbeitsnmedizin<br/>"), "yes" == b["health_specialty:internal_medicine"] && (c += "innere Medizin<br/>"), "yes" == b["health_specialty:neurology"] && (c += "Neurologie<br/>"), "yes" == b["health_specialty:ophthalmology"] && (c += "Augenheilkunde<br/>"), "yes" == b["health_specialty:palliative_medicine"] && (c += "Palliativmedizin<br/>"), "yes" == b["health_specialty:psychiatry"] && (c += "Psychatrie<br/>"), "yes" == b["health_specialty:gynaecology"] && (c += "Gyn\xE4kologie<br/>"), "yes" == b["health_specialty:urology"] && (c += "Urologie<br/>"), "yes" == b["health_specialty:pain_medicine"] && (c += "Schmerzmedizin<br/>"), "yes" == b["health_specialty:environmental_medicine"] && (c += "Umweltmedizin<br/>"), "yes" == b["health_specialty:intensive_care_medicin"] && (c += "Intensivmedizin<br/>"), "yes" == b["health_specialty:paediatrics"] && (c += "Kinder- u. Jugendmedizin<br/>"), "yes" == b["health_specialty:physiatry"] && (c += "Physikalische und Rehabilitative Medizin<br/>"), "yes" == b["health_specialty:radiology"] && (c += "Radiologie<br/>"), "yes" == b["health_specialty:general"] && (c += "Allgemeinmedizin<br/>"), "yes" == b["health_specialty:occupational_therapy"] && (c += "Ergotherapie<br/>"), "yes" == b["health_specialty:pulmonology"] && (c += "Pneumologie<br/>"), "yes" == b["health_specialty:acupuncture"] && (c += "Akupunktur<br/>"), "yes" == b["health_specialty:orthopaedics"] && (c += "Orthop\xE4die<br/>"), "yes" == b["health_specialty:chiropractic"] && (c += "Chiropraktik<br/>"), "yes" == b["health_specialty:sports_medicine"] && (c += "Sportmedizin<br/>"));
  "" != c && (a = a + "Fachgebiete: " + ('<div class="c4g_open_text">' + c + "</div>"));
  return a;
}

function fnKraftwerkInfo(b) {
  var a = "";

  if (b["generator:method"]) {
    a += "Erzeugungsart: ";

    switch (b["generator:method"]) {
      case "combustion":
        a += "Verbrennung";
        break;

      case "thermal":
        a += "thermische Nutzung (z.B. Solarthermie)";
        break;

      case "pumping":
        a += "durch Pumpen (z.B. die Nutzung von Geothermie)";
        break;

      case "photovoltaic":
        a += "Photovoltaik";
        break;

      case "gasification":
        a += "Vergasung, danach Verbrennung";
        break;

      case "anaerobic_digestion":
        a += "Erzeugung von Biogas durch Verg\xE4rung";
        break;

      case "pyrolysis":
        a += "Pyrolyse, Aufspaltung durch hohe Temperaturen";
        break;

      case "fission":
        a += "Kernspaltung";
        break;

      case "fusion":
        a += "Kernfusion";
        break;

      default:
        a += "unbekannt<br/>";
    }

    a += "<br/>";
  }

  if (b.power_source) {
    a += "Erzeugungsart: ";

    switch (b.power_source) {
      case "photovoltaic":
        a += "Photovoltaik";
        break;

      default:
        a += "unbekannt<br/>";
    }

    a += "<br/>";
  }

  b["generator:output:electricity"] && (a += "elekt. Energieerzeugung: " + b["generator:output:electricity"] + "<br/>");
  b["generator:output:heat"] && (a += "therm. Energieerzeugung: " + b["generator:output:heat"] + "<br/>");
  b["generator:output:cold"] && (a += "therm. Energieerzeugung: " + b["generator:output:cold"] + "<br/>");
  b["generator:output"] && (a += "Nennleistung: " + b["generator:output"] + "<br/>");
  b["generator:output:hot_air"] && (a += "Art des Transportmediums: " + b["generator:output:hot_air"] + "<br/>");
  b["generator:output:cold_water"] && (a += "Art des Transportmediums: " + b["generator:output:cold_water"] + "<br/>");
  b["generator:output:cold_air"] && (a += "Art des Transportmediums: " + b["generator:output:cold_air"] + "<br/>");
  b["generator:output:compressed_air"] && (a += "Art des Transportmediums: " + b["generator:output:compressed_air"] + "<br/>");
  b["generator:output:steam"] && (a += "Art des Transportmediums: " + b["generator:output:steam"] + "<br/>");
  b["generator:output:vacuum"] && (a += "Art des Transportmediums: " + b["generator:output:vacuum"] + "<br/>");
  b["generator:output:battery_charging"] && (a += "Art des Transportmediums: " + b["generator:output:battery_charging"] + "<br/>");
  "PWR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "BWR-1" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "BWR-2" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "BWR-3" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "BWR-4" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "BWR-5" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "BWR-6" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "PHWR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "GCR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "FBR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "RBMK-1000" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "RBMK-1500" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "VVER" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "CANDU" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "CPR-1000" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "EPR" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "tokamak" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "stellarator" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "ICF" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "cold-fusion" == b["generator:type"] && (a += "Generatortyp: " + b["generator:type"] + "<br/>");
  "wind_turbine" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "Generatortyp: Horizontal-Achsen Windenergieanlage<br/>");
  "wind_turbine" == b["generator:method"] && "vertical_turbine" == b["generator:type"] && (a += "Generatortyp: Vertikalrotor<br/>");
  "francis_turbine" == b["generator:type"] && (a += "Generatortyp: Francis-Turbine<br/>");
  "kaplan_turbine" == b["generator:type"] && (a += "Generatortyp: Kaplan-Turbine<br/>");
  "pelton_turbine" == b["generator:type"] && (a += "Generatortyp: Pelton-Turbine<br/>");
  "stream" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "Generatortyp: Gezeitenstromgenerator mit horizontaler Achse<br/>");
  "stream" == b["generator:method"] && "vertical_axis" == b["generator:type"] && (a += "Generatortyp: Gezeitenstromgenerator mit vertikaler Achse<br/>");
  "steam_turbine" == b["generator:type"] && (a += "Generatortyp: Dampfturbine<br/>");
  "heat_pump" == b["generator:type"] && (a += "Generatortyp: W\xE4rmepumpe<br/>");
  "solar_thermal_collector" == b["generator:type"] && (a += "Generatortyp: Sonnenkollektor<br/>");
  "solar_photovoltaic_panel" == b["generator:type"] && (a += "Generatortyp: Photovoltaic-System<br/>");
  "steam_generator" == b["generator:type"] && (a += "Generatortyp: Dampfgenerator<br/>");
  "gas_turbine" == b["generator:type"] && (a += "Generatortyp: Gasturbine<br/>");
  "combined_cycle" == b["generator:type"] && (a += "Generatortyp: Dampfgenerator<br/>");
  "reciprocating_engine" == b["generator:type"] && (a += "Generatortyp: Verbrennungsmotor/Blockheizkraftwerk<br/>");
  return a;
}

function fnWertstoffinfo(b) {
  var a = "";
  if ("container" == b.recycling_type || "centre" == b.recycling_type || "recycling" == b.amenity) "yes" == b["recycling:glass"] && (a += "Altglascontainer</br>"), "yes" == b["recycling:shoes"] && (a += "Schuhentsorgung</br>"), "yes" == b["recycling:cooking_oil"] && (a += "Speise-\xD6l-Entsorgung</br>"), "yes" == b["recycling:paper"] && (a += "Papierentsorgung</br>"), "yes" == b["recycling:engine_oil"] && (a += "\xD6l-Entsorgung (Maschinen-, Alt-und Motor\xF6l)</br>"), "yes" == b["recycling:clothes"] && (a += "Altkleidercontainer</br>"), "yes" == b["recycling:car_batteries"] && (a += "Auto-Batterien-Entsorgung</br>"), "yes" == b["recycling:cans"] && (a += "Blechdosenentsorgung</br>"), "yes" == b["recycling:scrap_metal"] && (a += "Altmetallentsorgung</br>"), "yes" == b["recycling:plastic"] && (a += "Plastikentsorgung</br>"), "yes" == b["recycling:batterries"] && (a += "Batterieentsorgung</br>"), "yes" == b["recycling:plastic_bottles"] && (a += "Plastikflaschenentsorgung</br>"), "yes" == b["recycling:green_waste"] && (a += "Gr\xFCnabf\xE4lle</br>"), "yes" == b["recycling:hardcore"] && (a += "Bauschutt und Stra\xDFenmaterial Entsorgung</br>");
  return a;
}

var fnContentGeneralInformations = function fnContentGeneralInformations(b) {
  var a = "";
  b.width && (a += "Breite: " + b.width + " m<br/>");
  b.height && (a += "H\xF6he: " + b.height + " m<br/>");
  b.maxwidth && (a += "Maximalbreite: " + b.maxwidth + " m<br/>");
  b.maxheight && (a += "Maximalh\xF6he: " + b.maxheight + " m<br/>");
  b.maxweight && (a += "Maximalgewicht: " + b.maxweight + " t<br/>");
  b.maxspeed && (a += "H\xF6chstgeschwindigkeit: " + b.maxspeed + " km/h<br/>");
  b.min_age && (a += "Mindestalter: " + b.min_age + "<br/>");
  b.max_age && (a += "Maximalalter: " + b.max_age + "<br/>");
  "yes" == b.nudism && (a += "Freik\xF6rperkultur<br/>");
  "yes" == b.ruins && (a += "Ruine<br/>");
  b.ele && (a += "H\xF6he \xFCber NN: " + b.ele + " m<br/>");
  b["xmas:day_date"] && (a += "Dauer von - bis: " + b["xmas:day_date"] + "<br/>");
  b["rotor:diameter"] && (a += "Rotordurchmesser: " + b["rotor:diameter"] + " m<br/>");
  b["xmas:note"] && (a += "Hinweis: " + b["xmas:note"] + "<br/>");
  "port" == b["seamark:beacon_lateral:category"] && (a += "Backbord<br/>");
  "starboard" == b["seamark:beacon_lateral:category"] && (a += "Steuerbord<br/>");
  "yes" == b["service:bicycle:retail"] && (a += "Fahrradverkauf<br/>");
  "yes" == b["service:bicycle:repair"] && (a += "Fahrradreparatur<br/>");
  "yes" == b["service:bicycle:rental"] && (a += "Fahrradverleih<br/>");
  "yes" == b["service:bicycle:pump"] && (a += "Benutzung einer Luftpumpe m\xF6glich<br/>");
  "yes" == b["service:bicycle:diy"] && (a += "Benutzung von Werkzeug m\xF6glich<br/>");
  "yes" == b["service:bicycle:cleaning"] && (a += "Fahrr\xE4der werden gewaschen<br/>");
  "yes" == b["service:bicycle:second_hand"] && (a += "Verkauf von gebrauchten Fahrr\xE4dern<br/>");
  "yes" == b["service:bicycle:charging"] && (a += "Elektro-Fahrr\xE4der k\xF6nnen geladen werden<br/>");
  "yes" == b.cafe && (a += "Kleine Caf\xE9-Ecke<br/>");
  "yes" == b.breakfast && (a += "Besonderes Fr\xFChst\xFCcksangebot<br/>");
  "yes" == b.snack && (a += "Back-Snacks warm oder kalt<br/>");
  "yes" == b.indoor_seating && (a += "Sitzm\xF6glichkeiten im Innenbereich<br/>");
  "yes" == b.outdoor_seating && (a += "Sitzm\xF6glichkeiten im Au\xDFenbereich<br/>");
  "yes" == b.self_service && (a += "Selbstbedienungsb\xE4ckerei<br/>");
  "yes" == b.bakehouse && (a += "Backstube<br/>");
  "yes" == b.pastry_shop && (a += "Geb\xE4ck aus der Konditorei<br/>");
  "yes" == b.fair_trade && (a += "einige Fair-Trade-Produkte im Sortiment<br/>");
  "only" == b.fair_trade && (a += "fast ausschlie\xDFlich Fair-Trade-Produkte im Sortiment<br/>");
  "no" == b.fair_trade && (a += "keine Fair-Trade-Produkte im Sortiment<br/>");
  return a;
},
    fnContentHealthcare = function fnContentHealthcare(b) {
  var a = "";
  if ("doctors" == b.amenity || "physician" == b.office || "doctor" == b.healthcare) a += fnArztInfo(b), b.medical_area && (a += b.medical_area + "<br/>"), b.type && (a += b.type + "<br/>"), b["doctors:de"] && (a += b["doctors:de"] + "<br/>"), b["note:de"] && (a += b["note:de"] + "<br/>");
  "yes" == b.dispensing && (a += "Apotheke mit Rezepteinl\xF6sung<br/>");
  "abused" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen die Misshandlung erlitten haben<br/>");
  "child" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Kinder<br/>");
  "disabled" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen mit k\xF6rperlicher oder geistiger Behinderung<br/>");
  "diseased" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Erkrankte Menschen<br/>");
  "drug_addicted" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Drogens\xFCchtige<br/>");
  "homeless" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Obdachlose<br/>");
  "juvenile" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Jugendliche und Teenager<br/>");
  "mental_health" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen mit psychischen Problemen<br/>");
  "migrant" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Menschen mit Migrationshintergrund<br/>");
  "orphan" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Waisen<br/>");
  "senior" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Senioren<br/>");
  "underprivileged" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Arme oder benachteiligte Menschen<br/>");
  "unemployed" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Arbeitslose<br/>");
  "victim" == b["social_facility:for"] && (a += "Einrichtung f\xFCr: Opfer eines Verbrechens<br/>");
  return a;
};

function fnAdditionalBuildingInfos(b) {
  var a = "";
  b["building:color"] && (a += "Geb\xE4udenfarbe: " + b["building:color"] + "</br>");
  b["building:height"] && (a += "Geb\xE4udenh\xF6he: " + b["building:height"] + " m</br>");
  b["building:level"] && (a += "Etage: " + b["building:level"] + "</br>");
  b["building:part"] && (a += "Geb\xE4udeteile: " + b["building:part"] + "</br>");
  b["roof:color"] && (a += "Dachfarbe: " + b["roof:colour"] + "</br>");
  b["roof:shape"] && (a += "Dachform: " + b["roof:shape"] + "</br>");
  b["roof:height"] && (a += "Dachh\xF6he: " + b["roof:height"] + " m</br>");
  b["roof:material"] && (a += "Dachmaterial: " + b["roof:material"] + " </br>");
  b["roof:orientation"] && (a += "Dachausrichtung: " + b["roof:orientation"] + " </br>");
  b["roof:direction"] && (a += "Dachausrichtung: " + b["roof:direction"] + " </br>");
  b["building:type"] && (a += "Geb\xE4udentyp: " + b["building:type"] + "</br>");
  return a;
}

function fnSicherheitAdditional(b) {
  var a = "";
  "surveillance" == b.man_made && ("indoor" == b.surveillance && (a += "Innenbereich wird \xFCberwacht"), "outdoor" == b.surveillance && (a += "Au\xDFenbereich wird \xFCberwacht"), "public" == b.surveillance && (a += "\xD6ffentliche \xDCberwachung"), "camera" == b["surveillance:type"] && (a += "\xDCberwachungstyp: Kamera"), "guard" == b["surveillance:type"] && (a += "\xDCberwachungstyp: W\xE4chter"), "ALPR" == b["surveillance:type"] && (a += "\xDCberwachungstyp: ALPR"), "town" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Ort"), "parking" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Parkplatz"), "traffic" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Verkehr"), "shop" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Shops"), "bank" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Bank"), "building" == b["surveillance:zone"] && (a += "\xDCberwachungsbereich: Geb\xE4ude"));
  return a;
}

function fnWreckInfo(b) {
  var a = "";
  "wreck" == b.historic && (b["wreck:date_sunk"] && (a += "Gesunken am: " + b["wreck:date_sunk"] + "<br/>"), b["wreck:depth"] && (a += "Tiefe: " + b["wreck:depth"] + "<br/>"), b["wreck:clearance"] && (a += "Freiraum: " + b["wreck:clearance"] + "<br/>"), b["wreck:date_commissioned"] && (a += "Anerkannt seit: " + b["wreck:date_commissioned"] + "<br/>"), b["wreck:gross_tonnage"] && (a += "Gewicht: " + b["wreck:gross_tonnage"] + "<br/>"), b["wreck:length"] && (a += "L\xE4nge: " + b["wreck:length"] + "<br/>"), b["wreck:width"] && (a += "Breite: " + b["wreck:width"] + "<br/>"), b["wreck:cargo"] && (a = "timber" == b["wreck:cargo"] ? a + "Ladung: Holz<br/>" : "coal" == b["wreck:cargo"] ? a + "Ladung: Kohle<br/>" : a + ("Ladung: " + b["wreck:cargo"] + "<br/>")), "yes" == b["wreck:visible_at_low_tide"] && (a += "Sichtbar bei Niedrigwasser: Ja<br/>"), "no" == b["wreck:visible_at_low_tide"] && (a += "Sichtbar bei Niedrigwasser: Nein<br/>"), "yes" == b["wreck:visible_at_high_tide"] && (a += "Sichtbar bei Hochwasser: Ja<br/>"), "no" == b["wreck:visible_at_high_tide"] && (a += "Sichtbar bei Hochwasser: Nein<br/>"), "yes" == b.access && (a += "Zutritt m\xF6glich<br/>"), "no" == b.access && (a += "Zutritt nicht m\xF6glich<br/>"), "permit_required" == b.access && (a += "Zutritt nur mit Genehmigung<br/>"));
  return a;
}

function fnKlosterAdditional(b) {
  var a = "";
  if (b["monastery:type"]) switch (b["monastery:type"]) {
    case "monastery":
      a += "Typ: Kl\xF6sterliche Gemeinschaft (monastery)<br/>";
      break;

    case "convent":
      a += "Typ: Bettelm\xF6nch Gemeinschaft (convent)<br/>";
      break;

    case "canonry":
      a += "Typ: Kanonikat (canonry)<br/>";
      break;

    case "commandry":
      a += "Typ: Milit\xE4r gef\xFChrt (commandry)<br/>";
      break;

    case "hermitage":
      a += "Typ: Einsiedelei (hermitage)<br/>";
      break;

    default:
      a += "Typ: unbekannt<br/>";
  }
  b["community:gender"] && ("male" == b["community:gender"] && (a += "Geschlecht: M\xE4nnergemeinschaft<br/>"), "female" == b["community:gender"] && (a += "Geschlecht: Frauengemeinschaft<br/>"));
  b.religious_rank && ("abbey" == b.religious_rank ? a += "Religi\xF6ser Rang: Abtei<br/>" : "abbey" == b.religious_rank && (a += "Religi\xF6ser Rang: Erzabtei<br/>"));
  "yes" == b.shrine && (a += "Besonderheit: Heiligengrab / Reliquienschrein<br/>");
  "yes" == b.sanctuary && (a += "Besonderheit: Heiligtum / Altarraum (Sanktuar)<br/>");
  if (b.religion) switch (b.religion) {
    case "animist":
      a += "Religion: animistisch<br/><br/>";
      break;

    case "bahai":
      a += "Religion: bahai<br/>";
      break;

    case "buddhist":
      a += "Religion: buddhistisch<br/>";
      break;

    case "christian":
      a += "Religion: christlich<br/>";
      break;

    case "hindu":
      a += "Religion: hinduistisch<br/>";
      break;

    case "IglesiaNiCristo":
      a += "Religion: IglesiaNiCristo<br/>";
      break;

    case "jain":
      a += "Religion: jain<br/>";
      break;

    case "jewish":
      a += "Religion: j\xFCdisch<br/>";
      break;

    case "multifaith":
      a += "Religion: pluralistisch<br/>";
      break;

    case "muslim":
      a += "Religion: muslimisch<br/>";
      type += "Moschee<br/>";
      break;

    case "pagan":
      a += "Religion: heidnisch<br/>";
      break;

    case "pastafarian":
      a += "Religion: pastafarisch<br/>";
      break;

    case "scientologist":
      a += "Religion: scientologisch<br/>";
      break;

    case "shinto":
      a += "Religion: schintoistisch<br/>";
      break;

    case "sikh":
      a += "Religion: sikh<br/>";
      break;

    case "spiritualist":
      a += "Religion: spiritistisch<br/>";
      break;

    case "taoist":
      a += "Religion: taoistisch<br/>";
      break;

    case "unitarian":
      a += "Religion: unitarian<br/>";
      break;

    case "yazidi":
      a += "Religion: yazidi<br/>";
      break;

    case "zoroastrian":
      a += "Religion: zoroastrisch<br/>";
      break;

    default:
      a += "Religion: unbekannt<br/>";
  }
  if (b.denomination) switch (b.denomination) {
    case "anglican":
      a += "Konfession: Anglikanische Gemeinschaft<br/><br/>";
      break;

    case "baptist":
      a += "Konfession: Baptisten<br/>";
      break;

    case "catholic":
      a += "Konfession: Katholische Kirche, ohne genauere Spezifizierung<br/>";
      break;

    case "roman_catholic":
      a += "Konfession: R\xF6misch-Katholische Kirche<br/>";
      break;

    case "old_catholic":
      a += "Konfession: Altkatholische Kirche (Schweiz: Christ-Katholisch)<br/>";
      break;

    case "greek_catholic":
      a += "Konfession: Griechisch-Katholische Kirche, Sammelbezeichnung f\xFCr die mit Rom unierten Ostkirchen des byzantinischen Ritus<br/>";
      break;

    case "evangelical":
      a += "Konfession: Evangelikalismus ist eine theologische Richtung innerhalb des Protestantismus. Achtung! Nicht verwechseln mit der evangelischen (= protestantischen) Kirche<br/>";
      break;

    case "jehovahs_witness":
      a += "Konfession: Zeugen Jehovas<br/>";
      break;

    case "lutheran":
      a += "Konfession: Lutheraner, evangelisch-lutherisch<br/>";
      break;

    case "mennonite":
      a += "Konfession: Mennoniten<br/>";
      break;

    case "messianic_jewish":
      a += "Konfession: Messianische Juden, stehen theologisch den evangelikalen Christen nahe.<br/>";
      break;

    case "methodist":
      a += "Konfession: Methodist Church (engl. Methodism)<br/>";
      break;

    case "mormon":
      a += "Konfession: Mormonen<br/>";
      break;

    case "new_apostolic":
      a += "Konfession: Neuapostolische Kirche<br/>";
      break;

    case "orthodox":
      a += "Konfession: Orthodox, ohne genauere Spezifizierung<br/>";
      break;

    case "greek_orthodox":
      a += "Konfession: Griechisch-Orthodox<br/>";
      break;

    case "coptic_orthodox":
      a += "Konfession: Koptische Kirche, ist die christliche altorientalische Kirche \xC4gyptens.<br/>";
      break;

    case "pentecostal":
      a += "Konfession: Pfingstbewegung<br/>";
      break;

    case "presbyterian":
      a += "Konfession: Presbyterianische Kirchen<br/>";
      break;

    case "protestant":
      a += "Konfession: Evangelische Kirchen<br/>";
      break;

    case "quaker":
      a += "Konfession: Qu\xE4ker<br/>";
      break;

    case "reformed":
      a += "Konfession: Evangelisch-reformierte<br/>";
      break;

    case "russian_orthodox":
      a += "Konfession: Russisch-Orthodox<br/>";
      break;

    case "seventh_day_adventist":
      a += "Konfession: Siebenten-Tags-Adventisten<br/>";
      break;

    case "christian_community":
      a += "Konfession: Die Christengemeinschaft ist eine christliche Kirche, die sich als selbst\xE4ndige Kultusgemeinschaft versteht.<br/>";
      break;

    case "adventist":
      a += "Konfession: Adventisten, nicht alle Adventisten sind Siebenten-Tags-Adventisten.<br/>";
      break;

    case "alliance":
      a += "Konfession: Christian and Missionary Alliance (C&MA) is an evangelical Protestant denomination within Christianity.<br/>";
      break;

    case "assemblies_of_god":
      a += "Konfession: Assemblies of God, ist eine pfingstlerische Denomination.<br/>";
      break;

    case "apostolic":
      a += "Konfession: Apostolische Kirche<br/>";
      break;

    case "armenian_apostolic":
      a += "Konfession: Armenische Apostolische Kirche, ist eine altorientalische Kirche.<br/>";
      break;

    case "assyrian":
      a += "Konfession: Assyrische Kirche des Ostens, auch Apostolische Kirche des Ostens, ist eine autokephale und v\xF6llig eigenst\xE4ndige Ostkirche syrischer Tradition in Nachfolge des altchristlichen Katholikats von Seleukia-Ktesiphon.<br/>";
      break;

    case "christ_scientist":
      a += "Konfession: Christian Science (deutsch: Christliche Wissenschaft) ging aus der Neugeist-Bewegung hervor.<br/>";
      break;

    case "church_of_scotland":
      a += "Konfession: Church of Scotland (dt. Kirche Schottlands) ist die Nationalkirche in Schottland. Im Sprachgebrauch auch \u201Ethe Kirk\u201C genannt.<br/>";
      break;

    case "czechoslovak_hussite":
      a += "Konfession: Tschechoslowakische Hussitische Kirche, ist eine christliche Kirche, die durch Abspaltung von der R\xF6misch-Katholischen Kirche entstanden ist. Oft auch Neuhussitische Kirche genannt, vornehmlich in Tschechien verbreitet, aber auch in der Slowakei<br/>";
      break;

    case "dutch_reformed":
      a += "Konfession: Niederl\xE4ndisch-reformierte Kirche, (einschlie\xDFlich NGK und \xE4hnliche Kirchen in S\xFCdafrika)<br/>";
      break;

    case "exclusive_brethren":
      a += "Konfession: Exclusive Brethren<br/>";
      break;

    case "foursquare":
      a += "Konfession: International Church of the Foursquare Gospel<br/>";
      break;

    case "kimbanguist":
      a += "Konfession: Kimbanguistenkirche, ist eine afrikanische, unabh\xE4ngige, christliche Kirche.<br/>";
      break;

    case "living_waters_church":
      a += "Konfession: Living Waters Christian Church<br/>";
      break;

    case "mariavite":
      a += "Konfession: Mariavitismus<br/>";
      break;

    case "maronite":
      a += "Konfession: Syrisch-maronitische Kirche, ist eine mit Rom unierte, christliche Kirche, die den r\xF6mischen Papst als Oberhaupt anerkennt.<br/>";
      break;

    case "moravian":
      a += "Konfession: Herrnhuter Br\xFCdergemeine, (auch: Unitas Fratrum, Evangelische oder Erneuerte Br\xFCder-Unit\xE4t, engl. Moravian Church) ist eine aus der b\xF6hmischen Reformation herkommende \xFCberkonfessionell-christliche Glaubensbewegung.<br/>";
      break;

    case "nazarene":
      a += "Konfession: Kirche des Nazareners, ist eine Freikirche und Heiligungsgemeinde in methodistischer Tradition.<br/>";
      break;

    case "nondenominational":
      a += "Konfession: Nondenominational Christianity<br/>";
      break;

    case "old_believers":
      a += "Konfession: Altorthodoxe, (h\xE4ufiger Altgl\xE4ubige) ist eine Sammelbezeichnung f\xFCr religi\xF6se Str\xF6mungen und Gruppen innerhalb der russisch-orthodoxen Tradition.<br/>";
      break;

    case "polish_catholic":
      a += "Konfession: Polnisch-Katholische Kirche<br/>";
      break;

    case "salvation_army":
      a += "Konfession: Heilsarmee, ist eine christliche Freikirche mit ausgepr\xE4gter sozialer T\xE4tigkeit.<br/>";
      break;

    case "santo_daime":
      a += "Konfession: Santo Daime, ist einer synkretistischen religi\xF6se Bewegung aus Brasilien.<br/>";
      break;

    case "serbian_orthodox":
      a += "Konfession: Serbisch-Orthodoxe Kirche, bezeichnet die orthodoxe Kirche von Serbien und die ihr nachgeordneten Kirchen.<br/>";
      break;

    case "spiritism":
      a += "Konfession: Spiritismus, oder Spiritualismus die Lehre des Spiritisten Allan Kardec<br/>";
      break;

    case "united":
      a += "Konfession: United Church of Canada, ist die zweitgr\xF6\xDFte Kirche in Kanada.<br/>";
      break;

    case "united_church_of_christ":
      a += "Konfession: United Church of Christ, ist eine Kirche in den USA.<br/>";
      break;

    case "united_free_church_of_scotland":
      a += "Konfession: United Free Church of Scotland, ist eine presbyterianische Freikirche in Schottland.<br/>";
      break;

    case "united_methodist":
      a += "Konfession: Evangelisch-methodistische Kirche, (engl. United Methodist Church (UMC)) ist eine christliche Kirche in der wesleyanischen Tradition.<br/>";
      break;

    case "united_reformed":
      a += "Konfession: United Reformed Church, (Vereinigte Reformierte Kirche, URC) ist eine reformierte Kirche in Gro\xDFbritannien.<br/>";
      break;

    case "uniting":
      a += "Konfession: Uniting Church in Australia (UCA) ist die drittgr\xF6\xDFte christliche Denomination in Australien.<br/>";
      break;

    case "church_of_sweden":
      a += "Konfession: Schwedische Kirche, ist die evangelisch-lutherische Kirche und ehemalige Staatskirche Schwedens.<br/>";
      break;

    case "mission_covenant_church_of_sweden":
      a += "Konfession: Schwedische Missionskirche ist eine reformierte Kirche in Schweden.<br/>";
      break;

    case "alternative":
      a += "Konfession: alternative<br/>";
      break;

    case "ashkenazi":
      a += "Konfession: ashkenazi<br/>";
      break;

    case "buchari":
      a += "Konfession: buchari<br/>";
      break;

    case "conservative":
      a += "Konfession: conservative<br/>";
      break;

    case "egalitarian":
      a += "Konfession: egalitarian<br/>";
      break;

    case "hasidic":
      a += "Konfession: hasidic<br/>";
      break;

    case "humanistic":
      a += "Konfession: humanistic<br/>";
      break;

    case "kabbalah":
      a += "Konfession: kabbalah<br/>";
      break;

    case "kabbalistic":
      a += "Konfession: kabbalistic<br/>";
      break;

    case "karaite":
      a += "Konfession: karaite<br/>";
      break;

    case "liberal":
      a += "Konfession: liberal<br/>";
      break;

    case "lubavitch":
      a += "Konfession: lubavitch<br/>";
      break;

    case "lubavitch_messianic":
      a += "Konfession: lubavitch_messianic<br/>";
      break;

    case "mizrachi_baghdadi":
      a += "Konfession: mizrachi_baghdadi<br/>";
      break;

    case "mizrachi_chida":
      a += "Konfession: mizrachi_chida<br/>";
      break;

    case "mizrachi_jerusalemite":
      a += "Konfession: mizrachi_jerusalemite<br/>";
      break;

    case "mizrachi_livorno":
      a += "Konfession: mizrachi_livorno<br/>";
      break;

    case "mizrachi_moroccan":
      a += "Konfession: mizrachi_moroccan<br/>";
      break;

    case "modern_orthodox":
      a += "Konfession: modern_orthodox<br/>";
      break;

    case "neo_orthodox":
      a += "Konfession: neo_orthodox<br/>";
      break;

    case "nondenominational":
      a += "Konfession: nondenominational<br/>";
      break;

    case "orthodox":
      a += "Konfession: orthodox<br/>";
      break;

    case "orthodox_ashkenaz":
      a += "Konfession: orthodox_ashkenaz<br/>";
      break;

    case "orthodox_sefard":
      a += "Konfession: orthodox_sefard<br/>";
      break;

    case "progressive":
      a += "Konfession: progressive<br/>";
      break;

    case "reconstructionist":
      a += "Konfession: reconstructionist<br/>";
      break;

    case "reform":
      a += "Konfession: reform<br/>";
      break;

    case "renewal":
      a += "Konfession: renewal<br/>";
      break;

    case "samaritan":
      a += "Konfession: samaritan<br/>";
      break;

    case "sefardi":
      a += "Konfession: sefardi<br/>";
      break;

    case "sefardi_amsterdam":
      a += "Konfession: sefardi_amsterdam<br/>";
      break;

    case "sefardi_london":
      a += "Konfession: sefardi_london<br/>";
      break;

    case "traditional":
      a += "Konfession: traditional<br/>";
      break;

    case "ultra_orthodox":
      a += "Konfession: ultra_orthodox<br/>";
      break;

    case "unaffiliated":
      a += "Konfession: unaffiliated<br/>";
      break;

    case "yemenite":
      a += "Konfession: yemenite<br/>";
      break;

    case "yemenite_baladi":
      a += "Konfession: yemenite_baladi<br/>";
      break;

    case "yemenite_shami":
      a += "Konfession: yemenite_shami<br/>";
      break;

    case "ahmadiya":
      a += "Konfession: ahmadiya<br/>";
      break;

    case "alaouite":
      a += "Konfession: alaouite<br/>";
      break;

    case "druze":
      a += "Konfession: druze<br/>";
      break;

    case "ibadi":
      a += "Konfession: ibadi<br/>";
      break;

    case "ismaili":
      a += "Konfession: ismaili<br/>";
      break;

    case "shia":
      a += "Konfession: shia<br/>";
      break;

    case "sunni":
      a += "Konfession: sunni<br/>";
      break;

    case "nichiren":
      a += "Konfession: nichiren<br/>";
      break;

    case "jodo_shinshu":
      a += "Konfession: jodo_shinshu<br/>";
      break;

    case "jodo_shu":
      a += "Konfession: jodo_shu<br/>";
      break;

    case "vajrayana":
      a += "Konfession: vajrayana<br/>";
      break;

    case "shingon_shu":
      a += "Konfession: shingon_shu<br/>";
      break;

    case "zen":
      a += "Konfession: zen<br/>";
      break;

    case "thai_mahanikaya":
      a += "Konfession: thai_mahanikaya<br/>";
      break;

    case "thai_thammayut":
      a += "Konfession: thai_thammayut<br/>";
      break;

    case "asatru":
      a += "Konfession: asatru<br/>";
      break;

    case "celtic":
      a += "Konfession: celtic<br/>";
      break;

    case "greco-roman":
      a += "Konfession: greco-roman<br/>";
      break;

    case "wicca":
      a += "Konfession: wicca<br/>";
      break;

    case "irani":
      a += "Konfession: irani<br/>";
      break;

    case "parsi":
      a += "Konfession: parsi<br/>";
      break;

    default:
      a += "unbekannt<br/>";
  }
  if (b.community) switch (b.community) {
    case "AA":
      a += "Ordensgemeinschaft (AA): Augustinians of the Assumption <br/>";
      break;

    case "BSCM":
      a += "Ordensgemeinschaft (BSCM): Adorers of the Sacred Heart of Jesus of Montmartre <br/>";
      break;

    case "CBMV":
      a += "Ordensgemeinschaft (CBMV): Augustiner-Chorfrauen B.M.V.<br/>";
      break;

    case "CO":
      a += "Ordensgemeinschaft (CO): Oratorians<br/>";
      break;

    case "CMC":
      a += "Ordensgemeinschaft (CMC): Congregation of the Mother Co-Redemptrix<br/>";
      break;

    case "CRSP":
      a += "Ordensgemeinschaft (CRSP): Kongregation der Regularkleriker vom hl. Paulus (Barnabiten)<br/>";
      break;

    case "CSJ":
      a += "Ordensgemeinschaft (CSJ): Carmel Saint-Joseph<br/>";
      break;

    case "CSSP":
      a += "Ordensgemeinschaft (CSSP): Congr\xE9gation du Saint-Esprit<br/>";
      break;

    case "CSSR":
      a += "Ordensgemeinschaft (CSSR): Congr\xE9gation du Tr\xE8s Saint R\xE9dempteur<br/>";
      break;

    case "FCJM":
      a += "Ordensgemeinschaft (FCJM): Franciscan Sisters, Daughters of the Sacred Heart of Jesus and Mary<br/>";
      break;

    case "FMGB":
      a += "Ordensgemeinschaft (FMGB): Suore Francescane Missionarie di Ges\xF9 Bambino<br/>";
      break;

    case "FMH":
      a += "Ordensgemeinschaft (FMH): Congregatio Filiarum Mariae Sanctissimae ab Horto<br/>";
      break;

    case "FMM":
      a += "Ordensgemeinschaft (FMM): Franciscaines missionnaires de Marie<br/>";
      break;

    case "FSC":
      a += "Ordensgemeinschaft (FSC): Fr\xE8res des \xC9coles chr\xE9tiennes<br/>";
      break;

    case "MCCI":
      a += "Ordensgemeinschaft (MCCI): Missionnaires comboniens du Sacr\xE9-C\u0153ur<br/>";
      break;

    case "MSFS":
      a += "Ordensgemeinschaft (MSFS): Missionnaires de Saint Fran\xE7ois de Sales<br/>";
      break;

    case "OCart":
      a += "Ordensgemeinschaft (OCart): Order of the Carthusians<br/>";
      break;

    case "OCC":
      a += "Ordensgemeinschaft (OCC): Ordre de Notre Dame du Mont-Carmel<br/>";
      break;

    case "OCD":
      a += "Ordensgemeinschaft (OCD): Ordre des Carmes d\xE9chaux<br/>";
      break;

    case "OCSO":
      a += "Ordensgemeinschaft (OCSO): Zisterzienserorden der strengeren Observanz (Trappisten)<br/>";
      break;

    case "OFM":
      a += "Ordensgemeinschaft (OFM): Ordre des Fr\xE8res Mineurs (Franziskaner)<br/>";
      break;

    case "OFMCap":
      a += "Ordensgemeinschaft (OFMCap): Ordre des Fr\xE8res Mineurs Capucins<br/>";
      break;

    case "OFMConv":
      a += "Ordensgemeinschaft (OFMConv): Ordre des Fr\xE8res Mineurs Conventuels<br/>";
      break;

    case "OFS":
      a += "Ordensgemeinschaft (OFS): Franciscans secular Third Order<br/>";
      break;

    case "OMI":
      a += "Ordensgemeinschaft (OMI): Oblats de Marie<br/>";
      break;

    case "OP":
      a += "Ordensgemeinschaft (OP): Ordre des Fr\xE8res Pr\xEAcheurs<br/>";
      break;

    case "OPraem":
      a += "Ordensgemeinschaft (OPraem): Ordre des chanoines r\xE9guliers de Pr\xE9montr\xE9<br/>";
      break;

    case "OSB":
      a += "Ordensgemeinschaft (OSB): Order of Saint Benedict<br/>";
      break;

    case "OSC":
      a += "Ordensgemeinschaft (OSC): Ordre de Sainte-Claire ou Ordre des Pauvres Dames<br/>";
      break;

    case "OSSS":
      a += "Ordensgemeinschaft (OSSS): Ordre de Sainte-Brigitte<br/>";
      break;

    case "OVM":
      a += "Ordensgemeinschaft (OVM): Order of the Visitation of Holy Mary (Salesianerinnen)<br/>";
      break;

    case "PSDP":
      a += "Ordensgemeinschaft (PSDP): Petites s\u0153urs des pauvres (Kleinen Schwestern der Armen)<br/>";
      break;

    case "PFJ":
      a += "Ordensgemeinschaft (PFJ): Petits Fr\xE8res de J\xE9sus<br/>";
      break;

    case "SDB":
      a += "Ordensgemeinschaft (SDB): Soci\xE9t\xE9 de Saint Fran\xE7ois de Sales<br/>";
      break;

    case "SJ":
      a += "Ordensgemeinschaft (SJ): Compagnie de J\xE9sus<br/>";
      break;

    case "SOC":
      a += "Ordensgemeinschaft (SOC): Order of Cistercians<br/>";
      break;

    case "SSCC":
      a += "Ordensgemeinschaft (SSCC): Congregation of the Sacred Hearts of Jesus and Mary<br/>";
      break;

    case "SSF":
      a += "Ordensgemeinschaft (SSF): Society of St Francis<br/>";
      break;

    case "SSJE":
      a += "Ordensgemeinschaft (SSJE): Society of St John the Evangelist<br/>";
      break;

    case "SSpS":
      a += "Ordensgemeinschaft (SSpS): Steyler Missionsschwestern<br/>";
      break;

    case "TOR":
      a += "Ordensgemeinschaft (TOR): Terzo Ordine Regolare di San Francesco<br/>";
      break;

    default:
      a += "unbekannt<br/>";
  }
  return a;
}

var fnTestInfoPopup = function fnTestInfoPopup(b) {
  b = b.getProperties();
  var a = "",
      c;

  for (c in b) {
    a = a + c + "=" + b[c] + "<br/>";
  }

  return '<div class="c4g_popup_text" style="width:300px;">' + a + "</div>";
};

/***/ }),

/***/ "./Resources/public/js/c4g-maps-popup-info-en.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-maps-popup-info-en.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.trim = trim;
exports.isMobile = isMobile;
exports.fnHeader = fnHeader;
exports.fnFooter = fnFooter;
exports.fnGetTranslate_Type = fnGetTranslate_Type;
exports.fnArztInfo = fnArztInfo;
exports.fnKraftwerkInfo = fnKraftwerkInfo;
exports.fnWertstoffinfo = fnWertstoffinfo;
exports.fnAdditionalBuildingInfos = fnAdditionalBuildingInfos;
exports.fnSicherheitAdditional = fnSicherheitAdditional;
exports.fnWreckInfo = fnWreckInfo;
exports.fnKlosterAdditional = fnKlosterAdditional;
exports.fnContentSports = exports.fnContentStreetsTraffic = exports.fnContentHydrants = exports.fnContentShipping = exports.fnContentCuisine = exports.fnContentEmergency = exports.fnContentInformationCity = exports.fnContentStorage = exports.fnContentAmenity = exports.fnContentTourism = exports.fnContentBarriers = exports.fnContentHistoric = exports.fnContentPetrol = exports.fnContentRoute = exports.fnMessstation = exports.fnContentLanduse = exports.fnContentProtectedArea = exports.fnContentNatural = exports.fnContentAerodrome = exports.fnContent = exports.fnReducedInfoPopup = exports.fnStandardInfoPopup = void 0;

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
function trim(b) {
  return b.replace(/^\s+/, "").replace(/\s+$/, "");
}

function isMobile() {
  return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent || navigator.vendor || window.opera) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test((navigator.userAgent || navigator.vendor || window.opera).substr(0, 4));
}

function translate(b) {
  var a = trim(b);
  return "yes" == a || "Yes" == a ? "yes" : "no" == a || "No" == a ? "no" : "limited" == a ? "limited" : "designated" == a ? "designated" : "wood" == a ? "wood" : "metal" == a ? "metal" : "concrete" == a ? "concrete" : "plastic" == a ? "plastic" : "stone" == a ? "stone" : "steel" == a ? "steel" : "brick" == a ? "brick" : "reinforced_concrete" == a ? "reinforced_concrete" : "masonry" == a ? "masonry" : b;
}

var fnStandardInfoPopup = function fnStandardInfoPopup(feature, imageSrc) {
  var attr = feature.getProperties();
  var result = "";
  result += fnHeader(attr, imageSrc);
  result += fnContent(attr);
  result += fnFooter(attr, feature.get("osm_type") + "/" + feature.getId());
  result = '<div class="c4g_popup_text">' + result + "</div>";
  return result;
},
    fnReducedInfoPopup = function fnReducedInfoPopup(b, a) {
  var c = b.getProperties(),
      d = "",
      e = !1,
      f;
  f = "function" === typeof a ? a.call(b)[0].getImage().getSrc() : a.getImage().getSrc();
  if ("restaurant" == c.amenity || "pub" == c.amenity || "biergarten" == c.amenity) e = !0;
  "hotel" == c.tourism && (e = !0);
  "guest_house" == c.tourism && (e = !0);
  "chalet" == c.tourism && (e = !0);
  "hostel" == c.tourism && (e = !0);
  "alpine_hut" == c.tourism && (e = !0);
  if ("artwork" == c.tourism || "artwork" == c.amenity) e = !0;
  if ("museum" == c.tourism || "museum" == c.amenity) e = !0;
  "cinema" == c.amenity && (e = !0);
  "theatre" == c.amenity && (e = !0);
  if ("attraction" == c.amenity || "fountain" == c.amenity || "monument" == c.historic || "city_gate" == c.historic || "ruins" == c.historic || "castle" == c.historic || "attraction" == c.tourism) e = !0;
  "playground" == c.leisure && (e = !0);
  c.aerialway && (e = !0);
  if ("swimming_pool" == c.amenity || "swimming_pool" == c.leisure || "swimming" == c.sport) e = !0;
  "station" == c.railway && (e = !0);
  "swimming" == c.sport && (e = !0);
  "swimming_pool" == c.leisure && (e = !0);
  "swimming_pool" == c.amenity && (e = !0);
  "waterpark" == c.leisure && (e = !0);
  c.water_park && (e = !0);
  "sports_centre" == c.leisure && (e = !0);

  switch (e) {
    case !1:
      d += fnHeader(c, f);
      d += fnContent(c);
      d += fnFooter(c, b.get("osm_type") + "/" + b.getId());
      break;

    case !0:
      d += fnHeader(c, f);
  }

  return '<div class="c4g_popup_text">' + d + "</div>";
};

exports.fnReducedInfoPopup = fnReducedInfoPopup;
exports.fnStandardInfoPopup = fnStandardInfoPopup;

function fnHeader(b, a) {
  var c = "",
      d = "32px";

  if (b.name || b["piste:name"] || b["xmas:name"] || b["xmas:location"]) {
    if (b.name) var e = b.name;
    b["piste:name"] && (e = b["piste:name"]);
    b["xmas:name"] && (e = b["xmas:name"]);
    b["xmas:location"] && (e = b["xmas:location"]);
    c += a ? '<img src="' + a + '" width="' + d + '" name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>" : '<name="' + e + '" alt="' + e + '"><div class="c4g_popup_header_featurename">' + e + "</div>";
  } else a && (c += '<img src="' + a + '" width="' + d + '" name="' + a + '" alt="' + a + '">');

  c += fnGetTranslate_Type(b);
  return '<div class="c4g_popup_header">' + c + "</div>";
}

function fnFooter(b, a) {
  var c = "",
      d = !1;
  b["addr:housename"] && (c += "housename: " + b["addr:housename"] + "<br/>", d = !0);
  b["addr:floor"] ? (c += "floor: " + b["addr:floor"] + "<br/>", d = !0) : b["addr:level"] && (c += "level: " + b["addr:level"] + "<br/>", d = !0);
  b["addr:street"] && (c += b["addr:street"], c = b["addr:housenumber"] ? c + (" " + b["addr:housenumber"] + "<br/>") : c + "<br/>", d = !0);
  b["addr:postcode"] && (c += b["addr:postcode"] + " ");
  b["addr:city"] && (c += b["addr:city"] + "<br/>", d = !0);
  if (b.sqkm) if (b.sqkm = "" + b.sqkm, 3 < b.sqkm.length) {
    var e = b.sqkm.length % 3,
        f = 0 < e ? b.sqkm.substring(0, e) : "";

    for (var i = 0; i < Math.floor(b.sqkm.length / 3); i++) {
      f = 0 == e && 0 == i ? f + b.sqkm.substring(e + 3 * i, e + 3 * i + 3) : f + ("." + b.sqkm.substring(e + 3 * i, e + 3 * i + 3));
    }

    c += "area: " + f + " Km\xB2<br/>";
  } else c += "area " + b.sqkm + "<br/>";
  b["contact:phone"] && (c = isMobile() ? c + ('phone: <a href="tel:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>") : c + ('phone: <a href="callto:' + b["contact:phone"] + '">' + b["contact:phone"] + "</a><br/>"), d = !0);
  b.phone && (c = isMobile() ? c + ('phone: <a href="tel:' + b.phone + '">' + b.phone + "</a><br/>") : c + ('phone: <a href="callto:' + b.phone + '">' + b.phone + "</a><br/>"), d = !0);
  b["contact:fax"] ? (c += "fax: " + b["contact:fax"] + "<br/>", d = !0) : b.fax && (c += "fax: " + b.fax + "<br/>", d = !0);
  b["contact:email"] ? (c += 'email: <a href="mailto:' + b["contact:email"] + '">' + b["contact:email"] + "</a><br/>", d = !0) : b.email && (c += 'email: <a href="mailto:' + b.email + '">' + b.email + "</a><br/>", d = !0);
  d && (c += "<br/>");

  if (b.opening_hours) {
    d = b.opening_hours;

    for (e = 0; 0 == e || 0 < d.indexOf(";");) {
      0 < e && (d = d.replace(";", "<br/>")), e++;
    }

    c += 'opening hours: <br/><div class="c4g_open_text">' + d + "</div>";
    c = 0 < d.indexOf("PH") ? c + "(PH = public holiday)<br/>" : c + "<br/>";
  }

  if (b["xmas:opening_hours"]) {
    d = b["xmas:opening_hours"];

    for (e = 0; 0 == e || 0 < d.indexOf(";");) {
      0 < e && (d = d.replace(";", "<br/>")), e++;
    }

    c += 'opening hours: <br/><div class="c4g_open_text">' + d + "</div>";
    c = 0 < d.indexOf("PH") ? c + "(PH = public holiday)<br/>" : c + "<br/>";
  }

  b["xmas:url"] && (d = "", d = b["xmas:url"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'website: <a href="' + d + '" target="_blank">website link</a><br/>');
  b["contact:website"] ? (d = b["contact:website"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'website: <a href="' + d + '" target="_blank">website link</a><br/>') : b.website && (d = b.website, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'website: <a href="' + d + '" target="_blank">website link</a><br/>');
  b.wikipedia && (d = b.wikipedia, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://wikipedia.org/wiki/" + d), c += 'Wikipedia: <a href="' + d + '" target="_blank">Wikipedia link</a><br/>');
  b.wikimedia_commons && (d = b.wikimedia_commons, trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "https://commons.wikimedia.org/wiki/" + d), c += 'Wikimedia: <a href="' + d + '" target="_blank">Wikimedia link</a><br/>');
  b["contact:webcam"] && (d = b["contact:webcam"], trim(d), -1 == d.indexOf("https://", 0) && -1 == d.indexOf("http://", 0) && (d = "http://" + d), c += 'webcam: <a href="' + d + '" target="_blank">webcam link</a><br/>');
  b.image && (c += '<img src="' + b.image + '" width="200px" name="' + b.name + '" alt="' + b.name + '"><br/>');
  d = "";
  b.internet_access && (d += "internet access: " + translate(b.internet_access) + "<br/>");
  b["internet_access:fee"] && (d += "fee: " + translate(b["internet_access:fee"]) + "<br/>");
  b["wifi_access:operator"] && (d += "wifi operator: " + b["wifi_access:operator"] + "<br/>");
  b["wifi_access:technology"] && (d += "wifi technology: " + b["wifi_access:technology"] + "<br/>");
  b["wifi_access:ssid"] && (d += "wifi ssid: " + b["wifi_access:ssid"] + "<br/>");
  "" != d && (c += 'internet access available<br/><div class="c4g_shop_internet_access">' + d + "</div><br/>");
  b.wheelchair && (c += "wheelchair: " + translate(b.wheelchair) + "<br/>");
  b["wheelchair:description"] && (c += "description: " + b["wheelchair:description"] + "<br/>");
  b["wheelchair:entrance_width"] && (c += "entrance width (cm): " + b["wheelchair:entrance_width"] + "<br/>");
  b["wheelchair:step_height"] && (c += "step height (cm): " + b["wheelchair:step_height"] + "<br/>");
  b["wheelchair:rooms"] && (c += "rooms: " + b["wheelchair:rooms"] + "<br/>");
  b["wheelchair:places"] && (c += "places: " + b["wheelchair:places"] + "<br/>");
  b["cent:places"] && (c += "places: " + b["wheelchair:places"] + "<br/>");
  b["ramp:wheelchair"] && (c += "ramp: " + b["ramp:wheelchair"] + "<br/>");
  b["capacity:disabled"] && (c += "capacity parking: " + translate(b["capacity:disabled"]) + "<br/>");
  b["toilets:wheelchair"] && (c += "toilets: " + translate(b["toilets:wheelchair"]) + "<br/>");
  b.centralkey && (c += "centralkey: " + b.centralkey + "<br/>");
  b.note && (c += b.note + "<br/>");
  b.description && (c += b.description + "<br/>");
  b.operator && (c += "operator: " + b.operator + "<br/>");
  b.ref && (c += "reference: " + b.ref + "<br/>");
  "yes" == b.lit && (c += "This object is illuimanted.<br/>");
  b.shop && (d = "", b.brand && (d += "brand: " + b.brand + "<br/>"), b.sells && (d += "sells: " + b.sells + "<br/>"), b.origin && (d += "source market: " + b.origin + "<br/>"), "yes" == b.wholesale && (d += "distributor: yes<br/>"), "" != d && (c += 'further particulars: <br/><div class="c4g_shop_text">' + d + "</div><br/>"));
  a && (d = a, trim(d), d = d.replace(/\./, "/"), c = c + "<br/>" + ('OSM:    <a href="http://www.openstreetmap.org/' + d + '" target="_blank">OpenStreetMap link</a><br/>'));
  return c = '<div class="c4g_popup_footer">' + c + "</div>";
}

function fnGetTranslate_Type(b) {
  var a = "";
  if ("doctors" == b.amenity || "doctor" == b.healthcare) a += "doctor<br/>";
  if ("hospital" == b.amenity || "clinic" == b.amenity || "hospital" == b.healthcare || "clinic" == b.healthcare) a = "yes" == b.emergency ? a + "hospital with emergency facilities<br/>" : a + "hospital<br/>";
  "dentist" == b.amenity && (a += "dentist<br/>");
  if ("pharmacy" == b.amenity || "pharmacy" == b["health_facility:type"]) a += "pharmacy<br/>";
  if ("physiotherapist" == b.healthcare || "yes" == b["health_speciality:physiotherapy"]) a += "physiotherapist<br/>";
  if ("occupational_therapist" == b.healthcare || "yes" == b["health_speciality:occupational_therapy"] || "yes" == b["health_specialty:occupational_therapy"]) a += "occupational_therapist<br/>";
  if ("psychotherapist" == b.healthcare || "yes" == b["health_speciality:psychotherapy"]) a += "psychotherapist<br/>";
  "alternative" == b.healthcare && (a += "alternative<br/>");
  "midwife" == b.healthcare && (a += "midwife<br/>");
  if ("speech_therapist" == b.healthcare || "yes" == b["health_speciality:speech_therapy"]) a += "speech_therapist<br/>";
  "yes" == b["health_speciality:music_therapy"] && (a += "music_therapy<br/>");
  "veterinary" == b.amenity && (a += "veterinary<br/>");
  "fire_station" == b.amenity && (a += "fire station<br/>");
  "fire_extinguisher" == b.emergency && (a += "fire extinguisher<br/>");
  "aed" == b.emergency && (a += "aed<br/>");
  "defibrillator" == b.emergency && (a += "defibrillator<br/>");
  "phone" == b.emergency && (a += "call box<br/>");
  "police" == b.amenity && (a += "police<br/>");
  "ambulance_station" == b.emergency && (a += "ambulance station<br/>");
  "technical" == b.emergency_service && (a += "technical<br/>");
  "water" == b.emergency_service && (a += "water<br/>");
  "baywatch" == b.waterway && (a += "baywatch<br/>");
  "air" == b.emergency_service && (a += "rescue helicopter<br/>");
  "emergency_access_point" == b.highway && (a += "emergency access point<br/>");
  if ("lifeboat_station" == b.amenity || "lifeboat_station" == b.emergency) a += "lifeboat station<br/>";
  "life_ring" == b.emergency && (a += "life ring<br/>");
  "siren" == b.emergency && (a += "siren<br/>");
  "life_ring" == b.amenity && (a += "life ring<br/>");
  "rescue_station" == b.amenity && (a += "rescue station<br/>");
  "fire_hydrant" == b.emergency && ("underground" == b["fire_hydrant:type"] ? a += "underground hydrant<br/>" : "pillar" == b["fire_hydrant:type"] ? a += "pillar hydrant<br/>" : "wall" == b["fire_hydrant:type"] ? a += "wall hydrant<br/>" : "pond" == b["fire_hydrant:type"] && (a += "suction point<br/>"));
  "suction_point" == b.emergency && (a += "suction point<br/>");
  "fire_water_pond" == b.emergency && (a += "fire protection pond<br/>");
  "mountain" == b.emergency_service && (a += "mountain rescue service<br/>");
  "water_tank" == b.emergency && (a += "fire water tank<br/>");
  "container" == b.recycling_type && (a += "Recycling container<br/>");
  "recycling" == b.amenity && "yes" == b["recycling:excrement"] || "pump-out" == b["seamark:small_craft_facility:category"] ? a += "suction station<br/>" : "recycling" == b.amenity && (a += " buyback centre<br/>");
  "yes" == b["diet:pescetarian"] ? a += "pescetarian available<br/>" : "only" == b["diet:pescetarian"] && (a += "just pescetarian<br/>");
  "yes" == b["diet:vegetarian"] ? a += "vegetarian vorhanden<br/>" : "only" == b["diet:vegetarian"] && (a += "just vegetarian<br/>");
  "yes" == b["diet:lacto_vegetarian"] ? a += "lacto_vegetarian available<br/>" : "only" == b["diet:lacto_vegetarian"] && (a += "just lacto vegetarian<br/>");
  "yes" == b["diet:ovo_vegetarian"] ? a += "ovo vegetarian available<br/>" : "only" == b["diet:ovo_vegetarian"] && (a += "just ovo_vegetarian<br/>");
  "yes" == b["diet:vegan"] ? a += "vegan available<br/>" : "only" == b["diet:vegan"] && (a += "just vegan<br/>");
  "yes" == b["diet:fruitarian"] ? a += "fruitarian available<br/>" : "only" == b["diet:fruitarian"] && (a += "hust fruitarian<br/>");
  "yes" == b["diet:raw"] ? a += "raw availaibe<br/>" : "only" == b["diet:raw"] && (a += "just raw<br/>");
  "yes" == b["diet:gluten_free"] ? a += "gluten free available<br/>" : "only" == b["diet:gluten_free"] && (a += "just gluten free<br/>");
  "yes" == b["diet:dairy_free"] ? a += "dairy free available<br/>" : "only" == b["diet:dairy_free"] && (a += "just dairy free<br/>");
  "yes" == b["diet:lactose_free"] ? a += "lactose free available<br/>" : "only" == b["diet:lactose_free"] && (a += "just lactose free<br/>");
  "yes" == b["diet:halal"] ? a += "halal available<br/>" : "only" == b["diet:halal"] && (a += "just halal<br/>");
  "yes" == b["diet:kosher"] ? a += "kosher available<br/>" : "only" == b["diet:kosher"] && (a += "just kosher<br/>");
  "pub" == b.amenity && (a += "pub<br/>");
  "bar" == b.amenity && (a += "bar<br/>");
  "yes" == b.frozen_yogurt && (a += "frozen yogurt<br/>");
  "yes" == b.slush_ice && (a += "slush ice<br/>");
  "yes" == b.cake && (a += "cake<br/>");
  "yes" == b.coffee && (a += "coffee<br/>");
  "yes" == b.drinks && (a += "drinks<br/>");
  "biergarten" == b.amenity && (a += "biergarten<br/>");
  "restaurant" == b.amenity && (a += "restaurant<br/>");
  "fast_food" == b.amenity && (a += "fast food<br/>");
  if (("cafe" == b.amenity || "coffee_shop" == b.amenity) && "ice_cream" != b.cuisine) a += "cafe<br/>";
  if ("cafe" == b.amenity && "ice_cream" == b.cuisine || "ice_cream" == b.amenity) a += "ice cream<br/>";
  "alpine_hut" == b.tourism && (a += "alpine hut<br/>");
  "aquarium" == b.tourism && (a += "aquarium<br/>");
  "apartment" == b.tourism && (a += "apartment<br/>");
  "attraction" == b.tourism && (a += "attraction<br/>");
  "artwork" == b.tourism && (a += "artwork<br/>");
  "camp_site" == b.tourism && (a += "camp site<br/>");
  "caravan_site" == b.tourism && (a += "caravan site<br/>");
  "chalet" == b.tourism && (a += "chalet<br/>");
  "gallery" == b.tourism && (a += "gallery<br/>");
  "guest_house" == b.tourism && (a += "guest house<br/>");
  "hostel" == b.tourism && (a += "hostel<br/>");
  "hotel" == b.tourism && (a += "hotel<br/>");
  "motel" == b.tourism && (a += "motel<br/>");
  "museum" == b.tourism && (a += "museum<br/>");
  "picnic_site" == b.tourism && (a += "picnic site<br/>");
  "theme_park" == b.tourism && (a += "theme park<br/>");
  "viewpoint" == b.tourism && (a += "viewpoint<br/>");
  "wilderness_hut" == b.tourism && (a += "wilderness_hut<br/>");
  "wine_cellar" == b.tourism && (a += "wine cellar<br/>");
  "zoo" == b.tourism && (a += "zoo<br/>", "enclosure" == b.zoo && (a += "enclosure<br/>"), "petting_zoo" == b.zoo && (a += "petting zoo<br/>"), "falconry" == b.zoo && (a += "falconry<br/>"));
  "trail_riding_station" == b.tourism && (a += "trail riding station<br/>");
  "fishing" == b.club && (a += "fishing club<br/>");
  "sport" == b.club && "fishing" == b.sport && (a += "fishing club<br/>");
  "amateur_radio" == b.club && (a += "amateur radio club<br/>");
  "art" == b.club && (a += "art club<br/>");
  "astronomy" == b.club && (a += "astronomy club<br/>");
  "automobile" == b.club && (a += "automobile club<br/>");
  "board_games" == b.club && (a += "board games club<br/>");
  "card_games" == b.club && (a += "card games club<br/>");
  "charity" == b.club && (a += "charity club<br/>");
  "chess" == b.club && (a += "chess club<br/>");
  "cinema" == b.club && (a += "cinema club<br/>");
  "cooking" == b.club && (a += "cooking club<br/>");
  "culture" == b.club && (a += "culture club<br/>");
  "doityourself" == b.club && (a += "doityourself club<br/>");
  "equestrian" == b.club && (a += "equestrian club<br/>");
  "ethnic" == b.club && (a += "ethnic club<br/>");
  "fan" == b.club && (a += "fan club<br/>");
  "freemasonry" == b.club && (a += "freemasonry club<br/>");
  "game" == b.club && (a += "game club<br/>");
  "history" == b.club && (a += "history club<br/>");
  "hunting" == b.club && (a += "hunting club<br/>");
  "linux" == b.club && (a += "linux club<br/>");
  "motorcycle" == b.club && (a += "motorcycle club<br/>");
  "music" == b.club && (a += "music club<br/>");
  "nature" == b.club && (a += "nature club<br/>");
  "nudism" == b.club && (a += "nudism club<br/>");
  "photography" == b.club && (a += "photography club<br/>");
  "politics" == b.club && (a += "politics club<br/>");
  "religion" == b.club && (a += "religion club<br/>");
  "scout" == b.club && (a += "scout club<br/>");
  "smoke" == b.club && (a += "smoke club<br/>");
  "sport" == b.club && (a += "sport club<br/>");
  "theatre" == b.club && (a += "theatre club<br/>");
  "veterans" == b.club && (a += "veterans club<br/>");
  "amusement_arcade" == b.leisure && (a += "penny arcade / gambling hall<br/>");
  "beach_resort" == b.leisure && (a += "beach resort<br/>");
  "bird_hide" == b.leisure && (a += "bird hide<br/>");
  "common" == b.leisure && (a += "common<br/>");
  "club" == b.leisure && (a += "club<br/>");
  "dance" == b.leisure && (a += "dance<br/>");
  "dog_park" == b.leisure && (a += "dog_park<br/>");
  "firepit" == b.leisure && (a += "firepit<br/>");
  "fishing" == b.leisure && (a += "fishing<br/>");
  "garden" == b.leisure && (a += "garden<br/>");
  "golf_course" == b.leisure && (a += "golf course<br/>");
  "hackerspace" == b.leisure && (a += "hackerspace<br/>");
  "horse_riding" == b.leisure && (a += "horse riding<br/>");
  "ice_rink" == b.leisure && (a += "ice rink<br/>");
  "nature_reserve" == b.leisure && (a += "nature reserve<br/>");
  "park" == b.leisure && (a += "park<br/>");
  "miniature_golf" == b.leisure && (a += "miniature golf<br/>");
  "pitch" == b.leisure && (a += "pitch<br/>");
  "pitch" == b.leisure && "yes" == b.building && (a += "gym<br/>");
  "playground" == b.leisure && "yes" == b.building ? a += "playground<br/>" : "playground" == b.leisure && (a += "playground<br/>");
  "social_club" == b.leisure && (a += "social club<br/>");
  "spa" == b.leisure && (a += "spa<br/>");
  "sports_centre" == b.leisure && (a += "sports centre<br/>");
  "climbing_adventure" == b.sport && (a += "climbing adventure<br/>");
  "stadium" == b.leisure && (a += "stadium<br/>");
  "swimming_pool" == b.leisure && (a += "swimming pool<br/>");
  "track" == b.leisure && (a += "track<br/>");
  "water_park" == b.leisure && (a += "water park<br/>");
  "wildlife_hide" == b.leisure && (a += "wildlife hide<br/>");
  "adult_gaming_centre" == b.leisure && (a += "adult gaming_centre<br/>");
  "bowling_alley" == b.leisure && "10pin" == b.sport && (a += "10pin bowling_alley<br/>");
  "bowling_alley" == b.leisure && "9pin" == b.sport && (a += "9pin bowling_alley<br/>");
  if ("karting" == b.sport || "motor" == b.sport) a += "karting<br/>";
  if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";
  if (b["piste:type"]) switch (b["piste:type"]) {
    case "skitour":
      a += "skitour<br/>";
      break;

    case "downhill":
      a += "downhill<br/>";
      break;

    case "sled":
      a += "sled<br/>";
      break;

    case "nordic":
      a += "nordic<br/>";
      break;

    case "hike":
      a += "hike<br/>";
      break;

    case "snow_park":
      a += "snow park<br/>";
  }
  if (b.sport) switch (b.sport) {
    case "surfing":
      a += "surfing<br/>";
      break;

    case "kitesurfing":
      a += "kitesurfing<br/>";
      break;

    case "water_ski":
      a += "water ski<br/>";
  }
  if (b.aerialway) switch (b.aerialway) {
    case "cable_bar":
      a += "cable bar<br/>";
      break;

    case "gondola":
      a += "gondola<br/>";
      break;

    case "chair_lift":
      a += "chair lift<br/>";
      break;

    case "mixed_lift":
      a += "mixed lift<br/>";
      break;

    case "drag_lift":
      a += "drag lift<br/>";
      break;

    case "t-bar":
      a += "t-bar<br/>";
      break;

    case "t-bar":
      a += "t-bar<br/>";
      break;

    case "platter":
      a += "platter<br/>";
      break;

    case "rope_tow":
      a += "rope tow<br/>";
      break;

    case "magic_carpet":
      a += "magic carpet<br/>";
      break;

    default:
      a += "unknown";
  }
  "mosque" == b.building && (a += "mosque<br/>");
  "synagogue" == b.building && (a += "synagogue<br/>");
  "temple" == b.building && (a += "temple<br/>");
  "apartments" == b.building && (a += "apartments<br/>");
  "farm" == b.building && (a += "farm<br/>");
  "hotel" == b.building && (a += "hotel<br/>");
  "house" == b.building && (a += "house<br/>");
  "detached" == b.building && (a += "detached<br/>");
  "residential" == b.building && (a += "residential<br/>");
  if ("domitory" == b.building || "residential plus" == b.building) a += "domitory<br/>";
  "terrace" == b.building && (a += "terrace<br/>");
  "houseboat" == b.building && (a += "houseboat<br/>");
  "bungalow" == b.building && (a += "bungalow<br/>");
  "static_caravan" == b.building && (a += "static caravan<br/>");
  "commercial" == b.building && (a += "commercial<br/>");
  "retail" == b.building && (a += "retail<br/>");
  "warehouse" == b.building && (a += "warehouse<br/>");
  "bakehouse" == b.building && (a += "bakehouse<br/>");
  "shrine" == b.building && (a += "shrine<br/>");
  "civic" == b.building && (a += "civic<br/>");
  "stadium" == b.building && (a += "stadium<br/>");
  "train_station" == b.building && (a += "train station<br/>");
  "university" == b.building && (a += "university<br/>");
  "public" == b.building && (a += "public<br/>");
  "bridge" == b.building && (a += "bridge<br/>");
  "bunker" == b.building && (a += "bunker<br/>");
  "cabin" == b.building && (a += "cabin<br/>");
  "conservatory" == b.building && (a += "conservatory<br/>");
  "construction" == b.building && (a += "construction<br/>");
  "garage" == b.building && (a += "garage<br/>");
  "garages" == b.building && (a += "garages<br/>");
  "greenhouse" == b.building && (a += "greenhouse<br/>");
  "hangar" == b.building && (a += "hangar<br/>");
  "hut" == b.building && (a += "hut<br/>");
  "pavillion" == b.building && (a += "pavillion<br/>");
  "roof" == b.building && (a += "roof<br/>");
  "shed" == b.building && (a += "shed<br/>");
  "transformer_tower" == b.building && (a += "transformer tower<br/>");
  "service" == b.building && (a += "service<br/>");
  "kiosk" == b.building && (a += "kiosk<br/>");
  "carport" == b.building && (a += "carport<br/>");
  "ruins" == b.building && (a += "ruins<br/>");
  "gambling" == b.amenity && (a += "penny arcade<br/>");
  "library" == b.amenity && (a += "library<br/>");
  "fountain" == b.amenity && (a += "fountain<br/>");
  "attraction" == b.amenity && (a += "attraction<br/>");
  if ("social_centre" == b.amenity || "club" == b.amenity) a += "social centre<br/>";
  "townhall" == b.amenity && (a += "townhall<br/>");
  "bench" == b.amenity && (a += "bench<br/>");
  if ("grave_yard" == b.amenity || "cemetery" == b.landuse) a += "grave yard<br/>";
  "post_box" == b.amenity && (a += "post box<br/>");
  "post_office" == b.amenity && (a += "post office<br/>");
  "telephone" == b.amenity && (a += "telephone<br/>");
  "atm" == b.amenity && (a += "atm<br/>");
  "bank" == b.amenity && (a += "bank<br/>");
  "toilets" == b.amenity && "yes" == b.diaper ? a += "toilets with diaper changing table<br/>" : "toilets" == b.amenity && (a += "toilets<br/>");
  "school" == b.amenity && "1" == b["isced:level"] ? a += "primary school<br/>" : "school" == b.amenity && "2" == b["isced:level"] ? a += "secondary school<br/>" : "school" == b.amenity && "3" == b["isced:level"] ? a += "secondary schools<br/>" : "school" == b.amenity && (a += "school<br/>");
  "kindergarten" == b.amenity && (a += "kindergarten<br/>");
  "internet_cafe" == b.amenity && (a += "internet cafe<br/>");
  "daycare" == b.amenity && (a += "daycare<br/>");
  "childcare" == b.amenity && (a += "childcare<br/>");
  "university" == b.amenity && (a += "university<br/>");
  "college" == b.amenity && (a += "college<br/>");
  "shelter" == b.amenity && (a += "shelter<br/>");
  "bbq" == b.amenity && (a += "bbq<br/>");
  "nightclub" == b.amenity && (a += "nightclub<br/>");
  "bicycle_parking" == b.amenity && (a += "bicycle parking<br/>");
  "bicycle_rental" == b.amenity && (a += "bicycle rental<br/>");
  "boat_sharing" == b.amenity && (a += "boat sharing<br/>");
  "car_sharing" == b.amenity && (a += "car sharing<br/>");
  "cinema" == b.amenity && (a += "cinema<br/>");
  "swimming_pool" == b.amenity && (a += "swimming pool<br/>");
  if ("embassy" == b.amenity || "embassy" == b.diplomatic) a += "embassy<br/>";
  "embassy" == b.amenity && "consulate" == b.diplomatic && (a += "consulate<br/>");
  "embassy" == b.amenity && "consulate_general" == b.diplomatic && (a += "consulate general<br/>");
  "embassy" == b.amenity && "honorary_consulate" == b.diplomatic && (a += "honorary consulate<br/>");
  "embassy" == b.amenity && "permanent_mission" == b.diplomatic && (a += "permanent mission<br/>");
  "embassy" == b.amenity && "delegation" == b.diplomatic && (a += "delegation<br/>");
  "embassy" == b.amenity && "high_commission" == b.diplomatic && (a += "high commission<br/>");
  "Barfusspfad" == b.amenity && (a += "barefoodpath<br/>");
  "casino" == b.amenity && (a += "casino<br/>");
  "spa" == b.amenity && (a += "spa<br/>");
  "stables" == b.amenity && (a += "stables<br/>");
  "watering_place" == b.amenity && (a += "watering place<br/>");
  "yes" == b.watering_place && (a += "watering place<br/>");
  "water_point" == b.amenity && (a += "water point<br/>");
  "taxi" == b.amenity && (a += "taxi<br/>");
  "car_wash" == b.amenity && (a += "car wash<br/>");
  "brothel" == b.amenity && (a += "brothel<br/>");
  "stripclub" == b.amenity && (a += "stripclub<br/>");
  "swingerclub" == b.amenity && (a += "swingerclub<br/>");
  "planetarium" == b.amenity && (a += "planetarium<br/>");
  "courthouse" == b.amenity && (a += "court house<br/>");
  "crematorium" == b.amenity && (a += "crematorium<br/>");
  if ("crypt" == b.amenity || "crypt" == b.building) a += "crypt<br/>";
  "hunting_stand" == b.amenity && (a += "hunting stand<br/>");
  "photo_booth" == b.amenity && (a += "photo booth<br/>");
  "prison" == b.amenity && (a += "prison<br/>");
  "ranger_station" == b.amenity && (a += "ranger station<br/>");
  "register_office" == b.amenity && (a += "register office<br/>");
  "marketplace" == b.amenity && (a += "marketplace<br/>");
  "solarium" == b.amenity && (a += "solarium<br/>");
  "sauna" == b.amenity && (a += "sauna<br/>");
  "shower" == b.amenity && (a += "shower<br/>");
  if ("waste_disposal" == b.amenity && (a += "waste disposal<br/>", b.waste)) switch (a += "Typ: ", b.waste) {
    case "trash":
      a += "General<br/>";
      break;

    case "oil":
      a += "Oil<br/>";
      break;

    case "drugs":
      a += "Pharmaceutical<br/>";
      break;

    case "organic":
      a += "Organic<br/>";
      break;

    case "plastic":
      a += "Plastic<br/>";
      break;

    case "rubble":
      a += "Rubble<br/>";
      break;

    case "cigarettes":
      a += "Cigarettes<br/>";
      break;

    default:
      a += "General<br/>";
  }
  if ("waste_basket" == b.amenity || "dog_excrement" == b.waste) a += "dog waste station<br/>";
  if ("scout_camp" == b.amenity || "scout_hut" == b.amenity || "scout_hall" == b.amenity) a += "scout camp<br/>";
  "ferry_terminal" == b.amenity && (a += "ferry terminal<br/>");
  "bureau_de_change" == b.amenity && (a += "bureau de change<br/>");
  "youth_club" == b.amenity && (a += "youth club<br/>");
  "festival_grounds" == b.amenity && (a += "festival grounds<br/>");
  if ("yes" == b.openfire || "yes" == b.fireplace) a += "fireplace<br/>";
  if ("vending_machine" == b.amenity) if (b.vending) switch (b.vending) {
    case "admission_tickets":
      a += "vending machine admission tickets<br/>";
      break;

    case "animal_feed":
      a += "vending machine animal feed<br/>";
      break;

    case "bicycle_tube":
      a += "vending machine bicycle tube<br/>";
      break;

    case "books":
      a += "vending machine books<br/>";
      break;

    case "candles":
      a += "vending machine candles<br/>";
      break;

    case "cigarettes":
      a += "vending machine cigarettes<br/>";
      break;

    case "chemist":
      a += "vending machine chemist<br/>";
      break;

    case "condoms":
      a += "vending machine condoms<br/>";
      break;

    case "drinks":
      a += "vending machine drinks<br/>";
      break;

    case "electronics":
      a += "vending machine electronics<br/>";
      break;

    case "elongated_coin":
      a += "vending machine elongated_coin<br/>";
      break;

    case "excrement_bags":
      a += "vending machine excrement_bags<br/>";
      break;

    case "feminine_hygiene":
      a += "vending machine feminine_hygiene<br/>";
      break;

    case "first_aid":
      a += "vending machine first_aid<br/>";
      break;

    case "fishing_tackle":
      a += "vending machine fishing tackle<br/>";
      break;

    case "fishing_bait":
      a += "vending machine fishing bait<br/>";
      break;

    case "flowers":
      a += "vending machine flowers<br/>";
      break;

    case "food":
      a += "vending machine food<br/>";
      break;

    case "ice_cubes":
      a += "vending machine ice cubes<br/>";
      break;

    case "ice_cream":
      a += "vending machine ice cream<br/>";
      break;

    case "ink_cartridges":
      a += "vending machine ink cartridges<br/>";
      break;

    case "laundry_detergent":
      a += "vending machine laundry detergent<br/>";
      break;

    case "public_transport_tickets":
      a += "vending machine public transport tickets<br/>";
      break;

    case "newspaper":
      a += "vending machine newspaper<br/>";
      break;

    case "parcel_pickup":
      a += "vending machine parcel pickup<br/>";
      break;

    case "parcel_mail_in":
      a += "Packege station<br/>";
      break;

    case "parking_tickets":
      a += "vending machine parking tickets<br/>";
      break;

    case "photos":
      a += "vending machine photos<br/>";
      break;

    case "sex_toys":
      a += "vending machine sex_toys<br/>";
      break;

    case "SIM_cards":
      a += "vending machine SIM_cards<br/>";
      break;

    case "stamps":
      a += "vending machine stamps<br/>";
      break;

    case "sweets":
      a += "vending machine sweets<br/>";
      break;

    case "syringes":
      a += "vending machine syringes<br/>";
      break;

    case "toll":
      a += "vending machine toll<br/>";
      break;

    case "toys":
      a += "vending machine toys<br/>";
      break;

    case "umbrellas":
      a += "vending machine umbrellas<br/>";
      break;

    default:
      a += "vending machine<br/>";
  } else a += "vending machine<br/>";
  "arts_centre" == b.amenity && (a += "arts centre<br/>");
  "artwork" == b.amenity && (a += "artwork<br/>");
  "museum" == b.amenity && (a += "museum<br/>");
  "theatre" == b.amenity && (a += "theatre<br/>");
  "cathedral" == b.building && (a += "cathedral<br/>");
  "church" == b.building && (a += "church<br/>");
  "chapel" == b.building && (a += "chapel<br/>");
  "place_of_worship" == b.amenity && (a += "place of worship<br/>");
  "village" == b.abandoned && (a += "abandoned village<br/>");
  "theme_park" == b["abandoned:tourism"] && (a += "abandoned theme park<br/>");
  "prison_camp" == b["abandoned:amenity"] && "concentration_camp" == ["concentration_camp"] && (a += "abandoned concentration camp<br/>");
  "yes" == b.abandoned && "bunker" == b.military && (a += "abandoned bunker<br/>");
  "yes" == b.abandoned && "barracks" == b.military && (a += "abandoned barracks<br/>");
  "yes" == b.abandoned && "airfield" == b.military && (a += "abandoned airfield<br/>");
  "monastery" == b.historic && (a += "historic monastery<br/>");
  "monastery" == b.amenity && (a += "monastery<br/>");
  "monastery" == b.building && (a += "monastery<br/>");
  "manor" == b.historic && (a += "historic manor<br/>");
  "boundary_stone" == b.historic && (a += "historic boundary stone<br/>");
  "milestone" == b.historic && (a += "historic milestone<br/>");
  "monument" == b.historic && (a += "monument<br/>");
  "palace" == b.historic && (a += "historic palace<br/>");
  "mine" == b.historic && (a += "historic mine<br/>");
  "ruins" == b.historic && (a += "ruins<br/>");
  "harbour" == b.historic_usage && (a += "historic harbour<br/>");
  "rune stone" == b.historic && (a += "rune stone<br/>");
  "battlefield" == b.historic && (a += "historic battlefield<br/>");
  "blacksmith" == b.historic && (a += "historic blacksmith<br/>");
  if ("tree_shrine" == b.historic || "wayside_shrine" == b.historic) a += "shrine<br/>";
  "city_gate" == b.historic && (a += "historic city gate<br/>");
  "wayside_cross" == b.historic && (a += "historic wayside cross<br/>");
  "monument" == b.amenity && (a += "monument<br/>");
  "memorial" == b.historic && (a += "memorial<br/>");
  "optical_telegraph" == b.historic && (a += "historic optical telegraph<br/>");
  if ("castle" == b.historic) if (b.castle_type) switch (b.castle_type) {
    case "defensive":
      a += "defensive castle<br/>";
      break;

    case "palace":
      a += "palace<br/>";
      break;

    case "stately":
      a += "stately castle<br/>";
      break;

    case "manor":
      a += "manor<br/>";
      break;

    case "fortress":
      a += "fortress<br/>";
      break;

    case "castrum":
      a += "castrum<br/>";
      break;

    case "shiro":
      a += "shiro<br/>";
      break;

    case "kremlin":
      a += "kremlin<br/>";
      break;

    default:
      a += "castle<br/>";
  } else a += "castle<br/>";
  "archaeological_site" == b.historic && (a += "archaeological site<br/>");
  if ("tomb" == b.historic) if (b.tomb) switch (b.tomb) {
    case "tumulus":
      a += "tumulus<br/>";
      break;

    case "rock-cut":
      a += "rock<br/>";
      break;

    case "hypogeum":
      a += "hypogeum<br/>";
      break;

    case "war_grave":
      a += "war grave<br/>";
      break;

    case "mausoleum":
      a += "mausoleum<br/>";
      break;

    case "columbarium":
      a += "columbarium<br/>";
      break;

    case "crypt":
      a += "crypt<br/>";
      break;

    case "pyramid":
      a += "pyramid<br/>";
      break;

    case "sarcophagus":
      a += "sarcophagus<br/>";
      break;

    case "vault":
      a += "vault<br/>";
      break;

    case "tombstone":
      a += "tombstone<br/>";
      break;

    default:
      a += "historic tomb<br/>";
  } else a += "historic tomb<br/>";
  "accountant" == b.office && (a += "accountant<br/>");
  "administrative" == b.office && (a += "administrative<br/>");
  "architect" == b.office && (a += "architect<br/>");
  "association" == b.office && (a += "association<br/>");
  "physician" == b.office && (a += "physician<br/>");
  "camping" == b.office && (a += "camping office<br/>");
  "company" == b.office && (a += "company<br/>");
  "educational_institution" == b.office && (a += "educational institution<br/>");
  "employment_agency" == b.office && (a += "employment agency<br/>");
  "estate_agent" == b.office && (a += "estate agent<br/>");
  "forestry" == b.office && (a += "forestry<br/>");
  "foundation" == b.office && (a += "foundation<br/>");
  "government" == b.office && (a += "government<br/>");
  "guide" == b.office && (a += "guide office<br/>");
  "insurance" == b.office && (a += "insurance<br/>");
  "it" == b.office && (a += "it office<br/>");
  "lawyer" == b.office && (a += "lawyer<br/>");
  "newspaper" == b.office && (a += "newspaper<br/>");
  "ngo" == b.office && (a += "ngo office<br/>");
  "notary" == b.office && (a += "notary<br/>");
  "political_party" == b.office && (a += "political party<br/>");
  "quango" == b.office && (a += "quango office<br/>");
  "realtor" == b.office && (a += "realtor<br/>");
  "real_estate_agent" == b.office && (a += "real estate agent<br/>");
  "register" == b.office && (a += "register<br/>");
  "religion" == b.office && (a += "religious office<br/>");
  "research" == b.office && (a += "research office<br/>");
  "tax" == b.office && (a += "tax office<br/>");
  "telecommunication" == b.office && (a += "telecommunication office<br/>");
  "travel_agent" == b.office && (a += "travel agent<br/>");
  "water_utility" == b.office && (a += "water utility office<br/>");
  "therapist" == b.office && (a += "therapist<br/>");
  "city" == b.place && (a += "city<br/>");
  "town" == b.place && (a += "town<br/>");
  "village" == b.place && (a += "village<br/>");
  "continent" == b.place && (a += "continent<br/>");
  "ocean" == b.place && (a += "ocean</br>");
  "track" == b.highway && (a += "track<br/>");
  "raceway" == b.highway && (a += "raceway<br/>");
  "designated" == b.bicycle && (a += "cycle path<br/>");
  "path" == b.highway && (a += "food path<br/>");
  "parking" == b.amenity && (a += "parking<br/>");
  "services" == b.highway && (a += "services<br/>");
  "rest_area" == b.highway && (a += "rest area<br/>");
  "turning_circle" == b.highway && (a += "turning circle<br/>");
  "service" == b.highway && (a += "service road<br/>");
  "motorway" == b.highway && (a += "motorway<br/>");
  "motorway_junction" == b.highway && (a += "motorway junction<br/>");
  "bridleway" == b.highway && (a += "bridleway<br/>");
  "yes" == b.oneway && (a += "oneway<br/>");
  "yes" == b.park_ride && (a += "park and ride<br/>");
  "unknown" == b.park_ride && (a += "park and ride<br/>");
  "bus" == b.park_ride && (a += "park and ride<br/>");
  "tram" == b.park_ride && (a += "park and ride<br/>");
  "bus_stop" == b.highway && (a += "bus stop<br/>");
  "pedestrian" == b.highway && (a += "pedestrian<br/>");
  "street_lamp" == b.highway && (a += "street lamp<br/>");
  "traffic_signals" == b.highway && (a += "traffic signals<br/>");
  "traffic_signals" == b.crossing && (a += "traffic signals<br/>");
  "speed_camera" == b.highway && (a += "speed camera<br/>");
  "yes" == b.traffic_calming && (ret += "traffic calming</br>");
  "bump" == b.traffic_calming && (a += "bump</br>");
  "chicane" == b.traffic_calming && (a += "chicane</br>");
  "choker" == b.traffic_calming && (a += "choker</br>");
  "cushion" == b.traffic_calming && (a += "cushion</br>");
  "hump" == b.traffic_calming && (a += "hump</br>");
  "island" == b.traffic_calming && (a += "island</br>");
  "rumble_strip" == b.traffic_calming && (a += "rumble_strip</br>");
  "table" == b.traffic_calming && (a += "table</br>");
  "buoy_cardinal" == b["seamark:type"] && (a += "buoy cardinal<br/>");
  "buoy_lateral" == b["seamark:type"] && (a += "buoy lateral<br/>");
  "buoy_isolated_danger" == b["seamark:type"] && (a += "buoy isolated_danger<br/>");
  "perch" == b["seamark:beacon_lateral:shape"] && (a += "perch<br/>");
  "fuel" == b.amenity && "fuel_station" == b["seamark:small_craft_facility:category"] ? a += "fuel station<br/>" : "fuel" == b.amenity && (a += "fuel<br/>");

  if ("charging_station" == b.amenity) {
    var a = a + "charging station<br/>",
        c = b.voltage;

    if (b.car) {
      switch (b.car) {
        case "yes":
          a += "Car: yes";
          break;

        case "no":
          a += "Car: No";
          break;

        default:
          a += "Cars: unkown";
      }

      a += "<br/>";
    } else a += "Cars: unkown<br/>";

    if (b.bicycle) {
      switch (b.bicycle) {
        case "yes":
          a += "E-Bike: yes";
          break;

        case "no":
          a += "E-Bike: no";
          break;

        default:
          a += "E-Bike: unkown";
      }

      a += "<br/>";
    } else a += "E-Bike: unkown<br/>";

    b["socket:schuko"] && (a += "Schuko socket: " + b["socket:schuko"] + "<br/>");
    b["socket:cee_blue"] && (a += "Cee blue socket " + b["socket:cee_blue"] + "<br/>");
    b["socket:cee_red_16a"] && (a += "Cee red 16a socket " + b["socket:cee_red_16a"] + "<br/>");
    b["socket:cee_red_32a"] && (a += "Cee red 32a socket " + b["socket:cee_red_32a"] + "<br/>");
    b["socket:cee_red_64a"] && (a += "Cee red 64a socket " + b["socket:cee_red_64a"] + "<br/>");
    b["socket:cee_red_125a"] && (a += "Cee red 125a socket " + b["socket:cee_red_125a"] + "<br/>");
    b["socket:nema_5_15"] && (a += "Nema 5 15 socket " + b["socket:nema_5_15"] + "<br/>");
    b["socket:nema_5_20"] && (a += "Nema 5 20 socket " + b["socket:nema_5_20"] + "<br/>");
    b["socket:nema_14_30"] && (a += "Nema 14 30 socket " + b["socket:nema_14_30"] + "<br/>");
    b["socket:nema_14_50"] && (a += "Nema 14 50 socket " + b["socket:nema_14_50"] + "<br/>");
    b["socket:bs1363"] && (a += "Bs1363 socket " + b["socket:bs1363"] + "<br/>");
    b["socket:type1"] && (a += "Type 1 socket " + b["socket:type1"] + "<br/>");
    b["socket:type1_combo"] && (a += "Type 1 combo socket " + b["socket:schuko"] + "<br/>");
    b["socket:type2"] && (a += "Type 2 socket " + b["socket:type2"] + "<br/>");
    b["socket:type2_combo"] && (a += "Type 2 combo socket " + b["socket:type2_combo"] + "<br/>");
    b["socket:type3"] && (a += "Type 3 socket " + b["socket:type3"] + "<br/>");
    b["socket:chademo"] && (a += "Chademo socket " + b["socket:chademo"] + "<br/>");
    b["socket:magne_charge"] && (a += "Magne charge socket " + b["socket:magne_charge"] + "<br/>");
    b["socket:tesla_standard"] && (a += "Tesla standard socket " + b["socket:tesla_standard"] + "<br/>");
    b["socket:tesla_supercharge"] && (a += "Tesla supercharge: " + b["socket:tesla_supercharge"] + "<br/>");
    b["socket:tesla_roadster"] && (a += "Tesla_roadster socket " + b["socket:tesla_roadster"] + "<br/>");
    a += "<br/>";
    b.voltage && (a += "Volt: " + c + "<br/>");
  }

  "yes" == b.tunnel && (a += "tunnel<br/>");
  if (b.bridge) switch (a += "bridge: ", b.bridge) {
    case "swing":
      a += "swing";
      break;

    case "aqueduct":
      a += "aqueduct";
      break;

    case "bascule":
      a += "flap bridge";
      break;

    case "boardwalk":
      a += "boardwalk";
      break;

    case "cantilever":
      a += "cantilever";
      break;

    case "covered":
      a += "covered";
      break;

    case "drawbridge":
      a += "drawbridge";
      break;

    case "humpback":
      a += "humpback";
      break;

    case "lift":
      a += "lift";
      break;

    case "low_water_crossing":
      a += "low water crossing";
      break;

    case "moveable":
      a += "moveable";
      break;

    case "pontoon":
      a += "pontoon";
      break;

    case "suspension":
      a += "suspension";
      break;

    case "trestle":
      a += "trestle";
      break;

    case "viaduct":
      a += "viaduct";
  }
  if (b["bridge:movable"]) switch (b["bridge:movable"]) {
    case "swing":
      a += "swing";
      break;

    case "bascule":
      a += "bascule";
      break;

    case "drawbridge":
      a += "drawbridge";
      break;

    case "lift":
      a += "lift";
      break;

    case "submersible":
      a += "submersible";
      break;

    case "transporter":
      a += "transporter";
      break;

    case "retractable":
      a += "retractable";
  }
  if ("nursing_home" == b.amenity || "retirement_home" == b.amenity) a += "nursing home / retirement home<br/>";
  "social_facility" == b.amenity && (a += "social facility<br/>");

  if (b.social_facility) {
    "group_home" == b.social_facility && "senior" == b["social_facility:for"] && (a += "senior group home<br/>");
    "assisted_living" == b.social_facility && (a += "assisted living<br/>");
    "outreach" == b.social_facility && (a += "outreach<br/>");
    "workshop" == b.social_facility && (a += "workshop<br/>");
    if ("ambulatory_care" == b.social_facility || "healthcare" == b.social_facility) a += "ambulatory care<br/>";
    "shelter" == b.social_facility && "senior" == b["social_facility:for"] && (a += "senior shelter<br/>");
    "shelter" == b.social_facility && "abused" == b["social_facility:for"] && (a += "abused shelter<br/>");
    "food_bank" == b.social_facility && (a += "food bank<br/>");
    "hospice" == b.social_facility && (a += "hospice<br/>");
  }

  b.brewery && (a += "brand of beer: " + b.brewery + "<br/>");
  "alcohol" == b.shop && (a += "alcohol shop<br/>");
  "bakery" == b.shop && (a += "bakery shop<br/>");
  "beverages" == b.shop && (a += "beverages shop<br/>");
  "butcher" == b.shop && (a += "butcher shop<br/>");
  "cheese" == b.shop && (a += "cheese shop<br/>");
  "chocolate" == b.shop && (a += "chocolate shop<br/>");
  "coffee" == b.shop && (a += "coffee shop<br/>");
  "confectionery" == b.shop && (a += "confectionery shop<br/>");
  "convenience" == b.shop && (a += "convenience shop<br/>");
  "deli" == b.shop && (a += "deli shop<br/>");
  "dairy" == b.shop && (a += "dairy shop<br/>");
  "farm" == b.shop && (a += "farm shop<br/>");
  "greengrocer" == b.shop && (a += "greengrocer shop<br/>");
  "grocery" == b.shop && (a += "grocery shop<br/>");
  "organic" == b.shop && (a += "organic shop<br/>");
  "pasta" == b.shop && (a += "pasta shop<br/>");
  "seafood" == b.shop && (a += "seafood shop<br/>");
  "tea" == b.shop && (a += "tea shop<br/>");
  "wine" == b.shop && (a += "wine shop<br/>");
  "department_store" == b.shop && (a += "department store<br/>");
  "general" == b.shop && (a += "general shop<br/>");
  "kiosk" == b.shop && (a += "kiosk<br/>");
  "mall" == b.shop && (a += "mall<br/>");
  "supermarket" == b.shop && (a += "supermarket<br/>");
  "baby_goods" == b.shop && (a += "baby goods shop<br/>");
  "bag" == b.shop && (a += "bag shop<br/>");
  "boutique" == b.shop && (a += "boutique<br/>");
  "clothes" == b.shop && (a += "clothes shop<br/>");
  "fabric" == b.shop && (a += "fabric shop<br/>");
  "fashion" == b.shop && (a += "fashion shop<br/>");
  "jewelry" == b.shop && (a += "jewelry shop<br/>");
  "leather" == b.shop && (a += "leather shop<br/>");
  "shoes" == b.shop && (a += "shoes shop<br/>");
  "variety_store" == b.shop && (a += "variety store<br/>");
  "chemist" == b.shop && (a += "chemist<br/>");
  "cosmetics" == b.shop && (a += "cosmetics shop<br/>");
  "drugstore" == b.shop && (a += "drugstore<br/>");
  "perfumery" == b.shop && (a += "perfumery<br/>");
  "erotic" == b.shop && (a += "erotic shop<br/>");
  "hairdresser" == b.shop && (a += "hairdresser<br/>");
  "hearing_aids" == b.shop && (a += "hearing aids<br/>");
  "herbalist" == b.shop && (a += "herbalist<br/>");
  "massage" == b.shop && (a += "massage<br/>");
  "medical_supply" == b.shop && (a += "medical supply shop<br/>");
  "optician" == b.shop && (a += "optician<br/>");
  "tattoo" == b.shop && (a += "tattoo<br/>");
  "bathroom_furnishing" == b.shop && (a += "bathroom furnishing<br/>");
  "doityourself" == b.shop && (a += "doityourself<br/>");
  "energy" == b.shop && (a += "energy<br/>");
  "florist" == b.shop && (a += "florist<br/>");
  "furnace" == b.shop && (a += "furnace shop<br/>");
  "garden_centre" == b.shop && (a += "garden centre<br/>");
  "gas" == b.shop && (a += "gas<br/>");
  "glaziery" == b.shop && (a += "glaziery<br/>");
  "hardware" == b.shop && (a += "hardware shop<br/>");
  "houseware" == b.shop && (a += "houseware shop<br/>");
  "locksmith" == b.shop && (a += "locksmith<br/>");
  "paint" == b.shop && (a += "paint shop<br/>");
  "trade" == b.shop && (a += "trade<br/>");
  "antiques" == b.shop && (a += "antiques shop<br/>");
  "bed" == b.shop && (a += "bed shop<br/>");
  "candles" == b.shop && (a += "candles shop<br/>");
  "carpet" == b.shop && (a += "carpet shop<br/>");
  "curtain" == b.shop && (a += "curtain shop<br/>");
  "furniture" == b.shop && (a += "furniture store<br/>");
  "interior_decoration" == b.shop && (a += "interior decoration company<br/>");
  "kitchen" == b.shop && (a += "kitchen shop<br/>");
  "window_blind" == b.shop && (a += "window blind shop<br/>");
  "computer" == b.shop && (a += "computer shop<br/>");
  "electronics" == b.shop && (a += "electronics shop<br/>");
  "hifi" == b.shop && (a += "hifi shop<br/>");
  "mobile_phone" == b.shop && (a += "mobile phone shop<br/>");
  "radiotechnics" == b.shop && (a += "radiotechnics shop<br/>");
  "vacuum_cleaner" == b.shop && (a += "vacuum cleaner shop<br/>");
  "bicycle" == b.shop && (a += "bicycle shop<br/>");
  "car" == b.shop && (a += "car shop<br/>");
  "car repair" == b.shop && (a += "car repair<br/>");
  "car_parts" == b.shop && (a += "car parts shop<br/>");
  if ("dive" == b.shop || "scuba_diving" == b.shop) a += "scuba diving shop<br/>";
  "fishing" == b.shop && (a += "fishing shop<br/>");
  "free_flying" == b.shop && (a += "free flying shop<br/>");
  "hunting" == b.shop && (a += "hunting shop<br/>");
  "motorcycle" == b.shop && (a += "motorcycle shop<br/>");
  "outdoor" == b.shop && (a += "outdoor shop<br/>");
  "sports" == b.shop && (a += "sports shop<br/>");
  "tyres" == b.shop && (a += "tyres<br/>");
  "water_sports" == b.shop && (a += "water sports shop<br/>");
  "art" == b.shop && (a += "art<br/>");
  "craft" == b.shop && (a += "craft<br/>");
  "frame" == b.shop && (a += "frame shop<br/>");
  "music" == b.shop && (a += "music shop<br/>");
  "music_instrument" == b.shop && (a += "music instruments shop<br/>");
  "photo" == b.shop && (a += "photo shop<br/>");
  "video" == b.shop && (a += "video<br/>");
  "video_games" == b.shop && (a += "video games<br/>");
  "anime" == b.shop && (a += "anime<br/>");
  "books" == b.shop && (a += "books shop<br/>");
  "gift" == b.shop && (a += "gift shop<br/>");
  "newsagent" == b.shop && (a += "newsagent<br/>");
  "stationery" == b.shop && (a += "stationery<br/>");
  "ticket" == b.shop && (a += "ticket shop<br/>");
  "copyshop" == b.shop && (a += "copyshop<br/>");
  "funeral_directors" == b.shop && (a += "funeral directors<br/>");
  "laundry" == b.shop && (a += "laundry<br/>");
  "dry_cleaning" == b.shop && (a += "dry cleaning<br/>");
  "money_lender" == b.shop && (a += "money lender<br/>");
  "pawnbroker" == b.shop && (a += "pawnbroker<br/>");
  "pet" == b.shop && (a += "pet shop<br/>");
  "pyrotechnics" == b.shop && (a += "pyrotechnics shop<br/>");
  "religion" == b.shop && (a += "religion<br/>");
  "beauty" == b.shop && (a += "beauty<br/>");
  "solarium" == b.shop && (a += "solarium<br/>");
  "tobacco" == b.shop && (a += "tobacco shop<br/>");
  "toys" == b.shop && (a += "toys shop<br/>");
  "travel_agency" == b.shop && (a += "travel agency<br/>");
  "market_hall" == b.shop && (a += "market hall<br/>");
  "vacant" == b.shop && (a += "vacant<br/>");
  "weapons" == b.shop && (a += "weapons shop<br/>");
  "lottery" == b.gambling && (a += "lottery<br/>");
  "fish" == b.pet && (a += "fishkeeping<br/>");
  "agriucultural_engines" == b.craft && (a += "agriucultural engines<br/>");
  "basket_maker" == b.craft && (a += "basket maker<br/>");
  "beekeeper" == b.craft && (a += "beekeeper<br/>");
  "blacksmith" == b.craft && (a += "blacksmith<br/>");
  "brewery" == b.craft && (a += "brewery<br/>");
  "yes" == b.microbrewery && (a += "micro-brewery<br/>");
  "boatbuilder" == b.craft && (a += "boatbuilder<br/>");
  "bookbinder" == b.craft && (a += "bookbinder<br/>");
  "builder" == b.craft && (a += "housebuilding<br/>");
  "carpenter" == b.craft && (a += "carpenter, woodworker, joiner<br/>");
  "carpet_layer" == b.craft && (a += "carpet layer<br/>");
  "caterer" == b.craft && (a += "caterer<br/>");
  "clockmaker" == b.craft && (a += "clockmaker<br/>");
  "confectionery" == b.craft && (a += "confectionery<br/>");
  "dressmaker" == b.craft && (a += "dressmaker<br/>");
  "electrician" == b.craft && (a += "electrician<br/>");
  "gardener" == b.craft && (a += "gardener, landscaper<br/>");
  "glaziery" == b.craft && (a += "glaziery<br/>");
  "handicraft" == b.craft && (a += "handicraft<br/>");
  "hvac" == b.craft && (a += "heating, ventilation and air-conditioning technology (HVAC)<br/>");
  "insulation" == b.craft && (a += "thermal insulation<br/>");
  "jeweller" == b.craft && (a += "jeweller, gold-/silversmiths<br/>");
  "key_cutter" == b.craft && (a += "key cutter<br/>");
  "locksmith" == b.craft && (a += "locksmith<br/>");
  "metal_construction" == b.craft && (a += "metalworker<br/>");
  "optician" == b.craft && (a += "optician<br/>");
  "painter" == b.craft && (a += "painter<br/>");
  "parquet_layer" == b.craft && (a += "parquet layer<br/>");
  "photographer" == b.craft && (a += "photographer<br/>");
  "photographic_laboratory" == b.craft && (a += "photographic laboratory<br/>");
  "plasterer" == b.craft && (a += "plasterer<br/>");
  "plumber" == b.craft && (a += "plumber<br/>");
  "pottery" == b.craft && (a += "pottery<br/>");
  "rigger" == b.craft && (a += "ship rigger<br/>");
  "roofer" == b.craft && (a += "roofer<br/>");
  "saddler" == b.craft && (a += "saddler<br/>");
  "sailmaker" == b.craft && (a += "sailmaker<br/>");
  "sawmill" == b.craft && (a += "sawmill<br/>");
  "scaffolder" == b.craft && (a += "scaffolder<br/>");
  "sculptor" == b.craft && (a += "sculptor<br/>");
  "shoemaker" == b.craft && (a += "shoemaker<br/>");
  "stand_builder" == b.craft && (a += "exhibition stand builder<br/>");
  "stonemason" == b.craft && (a += "stonemason<br/>");
  "sun_protection" == b.craft && (a += "constructor for sun protection, venetian blind, shutter<br/>");
  "sweep" == b.craft && (a += "chimney sweep<br/>");
  "tailor" == b.craft && (a += "tailor<br/>");
  "tiler" == b.craft && (a += "tiler<br/>");
  "tinsmith" == b.craft && (a += "tinsmith, metalworker<br/>");
  "upholsterer" == b.craft && (a += "upholsterer<br/>");
  "watchmaker" == b.craft && (a += "watchmaker<br/>");
  "window_construction" == b.craft && (a += "window constructor<br/>");
  "machines" == b.rental && (a += "rental park for machines<br/>");
  "car_rental" == b.amenity && (a += "car rental company<br/>");
  "allotments" == b.landuse && (a += "allotment garden<br/>");
  "basin" == b.landuse && (a += "holding reservoir<br/>");
  "brownfield" == b.landuse && (a += "brownfield<br/>");
  "commercial" == b.landuse && (a += "commercial area<br/>");
  "construction" == b.landuse && (a += "construction area<br/>");
  "farmland" == b.landuse && (a += "farmland<br/>");
  "farmyard" == b.landuse && (a += "farmyard<br/>");
  "forest" == b.landuse && (a += "forest<br/>");
  "garages" == b.landuse && (a += "garages<br/>");
  "grass" == b.landuse && (a += "grass<br/>");
  "greenfield" == b.landuse && (a += "greenfield<br/>");
  "greenhouse_horticulture" == b.landuse && (a += "greenhouse horticulture<br/>");
  "industrial" == b.landuse && (a += "industry area<br/>");
  "landfill" == b.landuse && (a += "landfill<br/>");
  "meadow" == b.landuse && (a += "meadow<br/>");
  "orchard" == b.landuse && (a += "orchard<br/>");
  "plant_nursery" == b.landuse && (a += "plant nursery<br/>");
  "quarry" == b.landuse && (a += "quarry<br/>");
  "railway" == b.landuse && (a += "railway<br/>");
  "recreation_ground" == b.landuse && (a += "recreation ground<br/>");
  "reservoir" == b.landuse && (a += "reservoir<br/>");
  "residential" == b.landuse && (a += "residential<br/>");
  "retail" == b.landuse && (a += "retrail<br/>");
  "salt_pond" == b.landuse && (a += "salt pond<br/>");
  "village_green" == b.landuse && (a += "village green<br/>");
  "vineyard" == b.landuse && (a += "vineyard<br/>");
  "pond" == b.landuse && (a += "pond<br/>");
  "salt_pond" == b.landuse && (a += "salt pond<br/>");
  "animal_keeping" == b.landuse && (a += "animal keeping<br/>");
  "yes" == b.entrance && (a += "entrance<br/>");
  "main" == b.entrance && (a += "main-entrance<br/>");
  "service" == b.entrance && (a += "rear exit for staffing and suppliers<br/>");
  "exit" == b.entrance && (a += "exit<br/>");
  "emergency" == b.entrance && (a += "emergency<br/>");
  "bay" == b.natural && (a += "bay<br/>");
  "beach" == b.natural && (a += "beach<br/>");
  "wood" == b.natural && (a += "wood<br/>");
  "glacier" == b.natural && (a += "glacier<br/>");
  "cave_entrance" == b.natural && (a += "cave entrance<br/>");
  "spring" == b.natural && (a += "spring<br/>");
  "waterfall" == b.natural && (a += "waterfall<br/>");
  "scrub" == b.natural && (a += "scrub<br/>");
  "grassland" == b.natural && (a += "grassland<br/>");
  "wetland" == b.natural && (a += "wetland<br/>");
  "tree" == b.natural && (a += "tree");
  "peak" == b.natural && "yes" == b["summit:cross"] && (a += "cross on the summit of a mountain<br/>");
  "tree_row" == b.natural && (a += "tree row, alley of trees<br/>");
  "heath" == b.natural && (a += "heath<br/>");
  "moor" == b.natural && (a += "moor<br/>");
  "grassland" == b.natural && (a += "grassland<br/>");
  "fell" == b.natural && (a += "grasland above the tree land<br/>");
  "bare_rock" == b.natural && (a += "bare rock<br/>");
  "scree" == b.natural && (a += "scree<br/>");
  "volcano" == b.natural && (a += "volcano<br/>");
  "valley" == b.natural && (a += "valley<br/>");
  "stone" == b.natural && (a += "stone<br/>");
  "sea" == b.natural && (a += "sea<br/>");
  "national_park" == b.boundary && (a += "national park<br/>");
  "protected_area" == b.boundary && (a += "protected area<br/>");
  "yes" == b.mountain_pass && (a += "mountain pass<br/>");
  "waterfall" == b.waterway && (a += "waterfall<br/>");
  "canal" == b.waterway && (a += "canal<br/>");
  "canal" == b.water && (a += "canal<br/>");
  "river" == b.waterway && (a += "river<br/>");
  "river" == b.water && (a += "river<br/>");
  "riverbank" == b.waterway && (a += "river<br/>");
  "ditch" == b.waterway && (a += "ditch<br/>");
  "stream" == b.waterway && (a += "stream<br/>");
  "ferry" == b.route && (a += "ferry<br/>");
  "turning_point" == b.waterway && (a += "turning point<br/>");
  if ("lake" == b.water || "water" == b.natural) a += "lake<br/>";
  "cove" == b.water && (a += "cove<br/>");
  "lagoon" == b.water && (a += "lagoon<br/>");
  "pond" == b.water && (a += "pond<br/>");
  "reservoir" == b.water && (a += "waterreservoir<br/>");
  "oxbow" == b.water && (a += "oxbow lake<br/>");
  "lock" == b.water && (a += "lock chamber<br/>");
  "moat" == b.water && (a += "castle moat<br/>");
  "wastewater" == b.water && (a += "wastewater treatment plant<br/>");
  "guest" == b.mooring && "pier" == b.man_made || "visitor_berth" == b["seamark:small_craft_facility:category"] ? a += "gastrointestinal<br/>" : "pier" == b.man_made && (a += "pier<br/>");
  "boatyard" == b.waterway && (a += "boatyard<br/>");
  "mooring" == b["seamark:type"] && "dolphin" == b["seamark:mooring:category"] && (a += "dolphin<br/>");
  "foot" == b.route && (a += "footpath<br/>");
  "hiking" == b.route && (a += "hiking trail<br/>");
  if ("yes" == b.hiking && "information" == b.tourism) a += "direction board<br/>";else if ("information" == b.tourism && "information" == b.tourism) if (b.information) switch (b.information) {
    case "board":
      a += "direction board<br/>";
      break;

    case "map":
      a += "direction board with a map<br/>";
      break;

    case "office":
      a += "tourist information office<br/>";
      break;

    case "terminal":
      a += "tourist information terminal<br/>";
      break;

    case "audioguide":
      a += "audioguide<br/>";
      break;

    case "guidepost":
      a += "guidepost<br/>";
      break;

    case "tactile_map":
      a += "tactile map<br/>";
      break;

    case "tactile_model":
      a += "tactile model<br/>";
      break;

    case "route_marker":
      a += "route marker<br/>";
      break;

    default:
      a += "direction board<br/>";
  } else a += "direction board<br/>";
  "bicycle" == b.route && (a += "cycle track<br/>");
  "mtb" == b.route && (a += "mountain bike route<br/>");
  "horse" == b.route && (a += "bridleway<br/>");
  "coastline" == b.natural && (a += "coastline<br/>");
  "cliff" == b.natural && (a += "cliff<br/>");
  "dam" == b.waterway && (a += "dam<br/>");
  "weir" == b.waterway && (a += "weir<br/>");
  "lock_gate" == b.waterway && (a += "lock gate<br/>");
  "yes" == b.lock && (a += "lock<br/>");
  "sluice_gate" == b.waterway && (a += "sluice gate<br/>");
  "pumping_station" == b.man_made && (a += "pumping station<br/>");
  "groyne" == b.man_made && (a += "groyne<br/>");
  "dyke" == b.man_made && (a += "dyke<br/>");
  "levee" == b.man_made && (a += "levee<br/>");
  "watermill" == b.man_made && (a += "watermill<br/>");
  "airfield" == b.military && (a += "military airfield<br/>");
  "naval_base" == b.military && (a += "naval base<br/>");
  "range" == b.military && (a += "military range<br/>");
  "military" == b.landuse && (a += "military land use<br/>");
  "training_area" == b.military && (a += "military training area<br/>");
  "exclusion_zone" == b.military && (a += "military exclusion zone<br/>");
  "danger_area" == b.military && (a += "military danger area<br/>");
  "barracks" == b.military && (a += "barracks<br/>");
  "nuclear_explosion_site" == b.military && (a += "military nuclear explosion site<br/>");
  "yes" == b.construction ? a += "construction<br/>" : "construction" == b.highway && (a += "construction<br/>");
  "petroleum_well" == b.man_made && (a += "petroleum well<br/>");
  "storage_tank" == b.man_made && (a += "storage tank<br/>");
  "wastewater_plant" == b.man_made && (a += "wastewater plant<br/>");
  "silo" == b.man_made && (a += "silo<br/>");
  "water_tower" == b.man_made && (a += "water tower<br/>");
  "windmill" == b.man_made && (a += "windmill<br/>");
  "monitoring_station" == b.man_made && (a += "monitoring station");
  "crane" == b.man_made && (a += "crane");
  "lighthouse" == b.man_made && (a += "lighthouse");
  "beacon" == b.man_made && (a += "beacon");
  "breakwater" == b.man_made && (a += "breakwater");
  "lamp" == b.man_made && "street_lamp" == b["lamp:type"] && (a += "street lamp<br/>");
  "lantern" == b.light_source && (a += "street lamp");
  "floodlight" == b.light_source && (a += "floodlight<br/>");
  "signal_lamp" == b.light_source && (a += "signal lamp<br/>");
  "aviation" == b.light_source && (a += "aviation<br/>");
  "warning" == b.light_source && (a += "warning<br/>");
  if (b.light_source && b["light:method"]) switch (a += "Light Typ: ", b["light:method"]) {
    case "gas":
      a += "Gas";
      break;

    case "electric":
      a += "electric";
      break;

    case "incandescent":
      a += "incandescent";
      break;

    case "halogen":
      a += "halogen";
      break;

    case "discharge":
      a += "discharge";
      break;

    case "metal-halide":
      a += "metal-halide";
      break;

    case "neon":
      a += "neon";
      break;

    case "sodium":
      a += "Natriumdampflampe";
      break;

    case "high_pressure_sodium":
      a += "high pressure sodium";
      break;

    case "low_pressure_sodium":
      a += "low pressure sodium";
      break;

    case "fluorescent":
      a += "Fluorescent";
      break;

    case "mercury":
      a += "Mercury";
      break;

    case "LED":
      a += "LED";
      break;

    case "laser":
      a += "Laser";
      break;

    case "arc":
      a += "Arc";
      break;

    default:
      a += "Unkown";
  }
  "drinking_water" == b.amenity && (a += "drinking water<br/>");
  "yes" == b.drinking_water && (a += "drinking water<br/>");
  "works" == b.man_made ? a += "industrial building<br/>" : "industrial" == b.building ? a += "industrial building<br/>" : "industrial" == b.landuse ? a += "industrial area<br/>" : "industrial" == b.abutters ? a += "industrial area<br/>" : "commercial" == b.abutters && (a += "commercial<br/>");
  if (b["generator:source"]) switch (a += "installation: ", b["generator:source"]) {
    case "biomass":
      a += "biomass";
      break;

    case "biofuel":
      a += "biofuel";
      break;

    case "biogas":
      a += "biogas";
      break;

    case "coal":
      a += "coal";
      break;

    case "oil":
      a += "oil";
      break;

    case "waste":
      a += "waste";
      break;

    case "wind":
      a += "wind";
      break;

    case "solar":
      a += "solar";
      break;

    case "hydro":
      a += "hydro";
      break;

    case "tidal":
      a += "tidal";
      break;

    case "wave":
      a += "wave";
      break;

    case "geothermal":
      a += "geothermal";
      break;

    case "osmotic":
      a += "osmotic";
      break;

    case "nuclear":
      a += "nuclear";
      break;

    default:
      a += "unknown<br/>";
  }
  "photovoltaic" == b.power_source && (a += "photovoltaic");
  "line" == b.power && (a += "power line<br/>");
  "cable" == b.power && (a += "cable<br/>");
  "cable_distribution_cabinet" == b.power && (a += "cable distribution cabinet<br/>");
  "plant" == b.power && (a += "plant<br/>");
  "station" == b.power && (a += "station<br/>");
  "sub_station" == b.power && (a += "substation<br/>");
  "compensator" == b.power && (a += "compensator<br/>");
  "converter" == b.power && (a += "converter<br/>");
  "generator" == b.power && (a += "generator<br/>");
  "heliostat" == b.power && (a += "heliostat<br/>");
  "insulator" == b.power && (a += "insulator<br/>");
  "busbar" == b.line && (a += "busbar<br/>");
  "bay" == b.line && (a += "bay<br/>");
  "minor_line" == b.power && (a += "minor line<br/>");
  "pole" == b.power && (a += "pole<br/>");
  "portal" == b.power && (a += "portal<br/>");
  "catenary_mast" == b.power && (a += "catenary mast<br/>");
  "substation" == b.power && (a += "substation<br/>");
  "switch" == b.power && (a += "switch<br/>");
  "terminal" == b.power && (a += "terminal<br/>");
  "tower" == b.power && (a += "tower<br/>");
  "transformer" == b.power && (a += "transformer<br/>");
  if (b.barrier) switch (b.barrier) {
    case "bollard":
      a += "bollard<br/>";
      break;

    case "cycle_barrier":
      a += "cycle barrier<br/>";
      break;

    case "gate":
      a += "gate<br/>";
      break;

    case "chain":
      a += "chain<br/>";
      break;

    case "lift_gate":
      a += "lift gate<br/>";
      break;

    case "wall":
      a += "wall<br/>";
      break;

    case "toll_booth":
      a += "toll booth<br/>";
      break;

    case "fence":
      switch (b.fence_type) {
        case "barbed_wire":
          a += "barbed wire<br/>";
          break;

        case "wood":
          a += "wood<br/>";
          break;

        case "chain_link":
          a += "chain link<br/>";
          break;

        case "electric":
          a += "electric<br/>";
          break;

        case "railing":
          a += "railing<br/>";
          break;

        case "wire":
          a += "wire<br/>";
          break;

        case "metal":
          a += "metal<br/>";
          break;

        case "pole":
          a += "pole<br/>";
          break;

        default:
          a += "fence<br/>";
      }

      break;

    case "block":
      a += "block<br/>";
      break;

    case "ditch":
      a += "ditch<br/>";
      break;

    case "border_control":
      a += "border control<br/>";
      break;

    case "hedge":
      a += "hedge<br/>";
      break;

    case "retaining_wall":
      a += "retaining wall<br/>";
      break;

    case "cattle_grid":
      a += "cattle grid<br/>";
      break;

    case "horse_stile":
      a += "horse stile<br/>";
      break;

    default:
      a += "unknown<br/>";
  }
  "noise_barrier" == b.wall && (a += "noise barrier<br/>");
  "retaining_wall" == b.designation && (a += "noise barrier<br/>");
  "noise_barrier" == b.designation && (a += "noise barrier<br/>");
  "surveillance" == b.man_made && (a += "surveillance<br/>");
  if (b.aeroway) switch (a += "airport: ", b.aeroway) {
    case "aerodrome":
      a += "airport";
      break;

    case "apron":
      a += "apron";
      break;

    case "gate":
      a += "gate";
      break;

    case "helipad":
      a += "helipad";
      break;

    case "hangar":
      a += "hangar";
      break;

    case "runway":
      a += "runway";
      break;

    case "taxiway":
      a += "taxiway";
      break;

    case "terminal":
      a += "terminal";
      break;

    default:
      a += "unknown<br/>";
  }
  "stop" == b.railway && (a += "railway stop<br/>");
  "crossing" == b.railway && (a += "crossing<br/>");
  "level_crossing" == b.railway && (a += "lvel crossing<br/>");
  "station" == b.railway && (a += "station<br/>");
  "bus_station" == b.amenity && (a += "bus station<br/>");
  "bus_station" == !b.amenity && "station" == b.public_transport && "yes" == b.bus && (a += "bus station<br/>");
  "rail" == b.railway && (a += "railway<br/>", "contact_line" == b.electrified && (a += "overhead contact line<br/>"));
  "tram" == b.railway && (a += "tram<br/>");
  if ("slipway" == b["seamark:small_craft_facility:category"] || "slipway" == b.harbour || "slipway" == b.leisure) a += "slipway<br/>";
  if ("harbour" == b["seamark:type"]) if (b["seamark:harbour:category"]) switch (b["seamark:harbour:category"]) {
    case "ferry":
      a += "ferry<br/>";
      break;

    case "container":
      a += "container<br/>";
      break;

    case "marina":
      "marina" != b.leisure && (a += "marina<br/>");
      break;

    case "navel_base":
      a += "navel base<br/>";
      break;

    case "tanker":
      a += "tanker<br/>";
      break;

    case "passenger":
      a += "passenger<br/>";
      break;

    case "bulk":
      a += "bulk<br/>";
      break;

    default:
      a += "habour<br/>";
  } else a += "habour<br/>";
  "marina" == b.leisure && (a += "marina<br/>");
  "wreck" == b.historic && (a += "wreck<br/>");
  "animal_shelter" == b.amenity && (a += "animal shelter<br/>");
  "shelter" == b.animal && (a += "shelter<br/>");
  "horse_walker" == b.animal && (a += "horse walker<br/>");
  "yes" == b.animal_shelter && (a += "animal shelter<br/>");
  "dog" == b.animal_shelter && (a += "animal shelter<br/>");
  "cat" == b.animal_shelter && (a += "animal shelter<br/>");
  "animal_boarding" == b.amenity && (a += "animal boarding<br/>");
  "yes" == b.animal_boarding && (a += "animal boarding<br/>");
  "dog" == b.animal_boarding && (a += "animal boarding<br/>");
  "horse" == b.animal_boarding && (a += "animal boarding<br/>");
  "cat" == b.animal_boarding && (a += "animal boarding<br/>");
  "dog;cat" == b.animal_boarding && (a += "animal boarding<br/>");
  "cat;dog" == b.animal_boarding && (a += "animal boarding<br/>");
  if ("school" == b.animal || "sport" == b.animal || "animal_training" == b.amenity) a += "animal training<br/>";
  "swimming" == b.animal && (a += "swimming for dogs<br/>");
  if ("feeding_place" == b.amenity || "animal_feeding" == b.man_made || "animal_feeding" == b.amenity) a += "animal feeding<br/>";
  if ("wildlife_feeding" == b.amenity || "deer_feeding" == b.amenity || "game_feeding" == b.amenity) a += "wildlife feeding<br/>";
  if ("cratch" == b.amenity || "cratch" == b.man_made || "feeding_rack" == b.amenity) a += "feeding rack<br/>";
  "manger" == b.amenity && (a += "manger<br/>");
  "birdhouse" == b.man_made && (a += "birdhouse<br/>");
  "stork" == b.birds_nest && (a += "storck<br/>");
  "nest_box" == b.amenity && (a += "nest box<br/>");
  "wellness" == b.animal && (a += "dog parlour<br/>");
  "cemetery" == b.animal && (a += "small animal cemetery<br/>");
  if ("stable" == b.building || "stable" == b["building:use"]) a += "stable<br/>";
  "cowshed" == b.building && (a += "cowshed<br/>");
  "sty" == b.building && (a += "sty<br/>");
  "barn" == b.building && (a += "barn<br/>");
  "farm_auxiliary" == b.building && (a += "farm auxiliary<br/>");
  if (b["river:waterway_distance"] || "milestone" == b.waterway) a += "milestone of waterway distance<br/>";
  "milestone" == b.highway && (a += "milestone<br/>");
  "market" == b["xmas:feature"] && (a += "Christmas fair<br/>");
  "tree" == b["xmas:feature"] && (a += "sale of Chrismas trees<br/>");
  "event" == b["xmas:feature"] && (a += "Chrismas event<br/>");
  "pyramid" == b["xmas:feature"] && (a += "Chrismas pyramid<br/>");
  return '<div class="c4g_popup_header_featuretype">' + a + "<br/> </div>";
}

var fnContent = function fnContent(b) {
  var a;
  a = "" + fnContentGeneralInformations(b);
  a += fnContentHealthcare(b);
  a += fnContentAerodrome(b);
  a += fnContentCuisine(b);
  a += fnContentShipping(b);
  a += fnContentHydrants(b);
  a += fnContentSports(b);
  a += fnContentStreetsTraffic(b);
  a += fnContentInformationCity(b);
  a += fnContentEmergency(b);
  a += fnContentStorage(b);
  a += fnContentAmenity(b);
  a += fnContentTourism(b);
  a += fnContentRoute(b);
  a += fnContentPetrol(b);
  a += fnContentBarriers(b);
  a += fnContentLanduse(b);
  a += fnContentNatural(b);
  a += fnKlosterAdditional(b);
  a += fnSicherheitAdditional(b);
  a += fnAdditionalBuildingInfos(b);
  a += fnKraftwerkInfo(b);
  a += fnMessstation(b);
  a += fnWertstoffinfo(b);
  (a += fnContentProtectedArea(b)) && (a = "<br/>" + a);
  return '<div class="c4g_popup_content">' + a + "</div>";
},
    fnContentAerodrome = function fnContentAerodrome(b) {
  var a = "";
  b.aerodrome && ("international" == b.aerodrome && (a += "type of airport: international<br/>"), "regional" == b.aerodrome && (a += "type of airport: regional<br/>"), "gliding" == b.aerodrome && (a += "type of airport: gliding<br/>"), "private" == b.aerodrome && (a += "type of airport: private<br/>"));
  b.iata && (a += "IATA-Code: " + b.iata + "<br/>");
  b.icao && (a += "ICAO-Code: " + b.icao + "<br/>");
  return a;
},
    fnContentNatural = function fnContentNatural(b) {
  var a = "";

  if (b.forest || b.wood) {
    if ("broadleaved" == b.leaf_type || "deciduous" == b.wood) a += "broadleaved<br/>";
    if ("needleleaved" == b.leaf_type || "coniferous" == b.wood) a += "needleleaved<br/>";
    if ("mixed" == b.leaf_type || "mixed" == b.wood) a += "mixed<br/>";
    "leafless" == b.leaf_type && (a += "leafless<br/>");
    "evergreen" == b.wood && (a += "evergreen<br/>");
    "palm" == b.wood && (a += "palm<br/>");
    "nipa_palm" == b.wood && (a += "nipa palm<br/>");
    "eucalypt" == b.wood && (a += "eucalypt<br/>");
    if ("filao" == b.wood || "casuarina" == b.wood) a += "casuarina<br/>";
  }

  if ("tree" == b.natural && (!b["genus:de"] && !b["species:de"] && b.leaf_type && (a = "broadleaved" == b.leaf_type || "deciduous" == b.leaf_type || "broadleafed" == b.leaf_type ? a + "broad-leaved<br/>" : a + "conifer<br/>"), b.genus && (a += b.genus + "<br/>"), b["genus:de"] && (a += b["genus:de"] + "<br/>"), b.species && (a += b.species + "<br/>"), b["species:de"] && (a += b["species:de"] + "<br/>"), "landmark" == b.denotation && (a += "landmark<br/>"), "natural_monument" == b.denotation || "yes" == b.monument)) a += "natural monument<br/>";
  "manger" == b["feeding:type"] && (a += "manger:rack for fodder<br/>");
  "automated" == b["feeding:type"] && (a += "automated<br/>");
  if (b["feeding:for"]) switch (b["feeding:for"]) {
    case "sheep":
      a += "animal: sheep<br/>";
      break;

    case "horse":
      a += "animal: horse<br/>";
      break;

    case "cow":
      a += "animal: cow<br/>";
      break;

    case "rabbit":
      a += "animal: rabbit<br/>";
      break;

    case "bunny":
      a += "animal: bunny<br/>";
      break;

    case "cat":
      a += "animal: cat </br>";
      break;

    case "swan":
      a += "animal: swan </br>";
      break;

    case "guinea pig":
      a += "animal: guinea pig </br>";
      break;

    case "donkey":
      a += "animal: donkey </br>";
      break;

    case "squirrel":
      a += "animal: squirrel </br>";
      break;

    case "pig":
      a += "animal: pig </br>";
      break;

    case "deer":
      a += "animal: deer </br>";
      break;

    case "guinea pig":
      a += "animal: guinea pig </br>";
      break;

    case "monkey":
      a += "animal: monkey </br>";
      break;

    case "camel":
      a += "animal: camel </br>";
      break;

    case "goat":
      a += "animal: goat </br>";
      break;

    case "hamster":
      a += "animal: hamster </br>";
      break;

    case "alpaca":
      a += "animal: alpaca </br>";
      break;

    default:
      a += "animal: unknown<br/>";
  }
  if (b["feeding:fodder"]) switch (b["feeding:fodder"]) {
    case "hay":
      a += "feed with: hay</br>";
      break;

    case "grain":
      a += "feed with: grain</br>";
      break;

    case "corn":
      a += "feed with: corn</*br>";
      break;

    default:
      a += "feed with: unknown</br>";
  }
  "volcano" == b.natural && "active" == b.status && (a += "active volcano<br/>");
  "volcano" == b.natural && "dormant" == b.status && (a += "dormant volcano<br/>");
  "volcano" == b.natural && "extinct" == b.status && (a += "extinct volcano<br/>");
  "volcano" == b.natural && "stratovolcano" == b.type && (a += "type of volcanism:stratovolcano<br/>");
  "volcano" == b.natural && "shield" == b.type && (a += "type of volcanism:shield<br/>");
  "volcano" == b.natural && "scoria" == b.type && (a += "type of volcanism:scoria<br/>");
  return a;
},
    fnContentProtectedArea = function fnContentProtectedArea(b) {
  var a = "",
      c = "";
  "protected_area" == b.boundary && (b.protect_class && (c = b.protect_class), b.protect_id && (c = b.protect_id), "1" == c && (a = "description: Strict Nature Reserve, Wilderness Area<br/>"), "2" == c && (a = "description: National Park<br/>"), "3" == c && (a = "description: Natural Monument or Feature<br/>"), "4" == c && (a = "description: Habitat/Species Management Area<br/>"), "5" == c && (a = "description: Protected Landscape/ Seascape<br/>"), "6" == c && (a = "description: Protected area with sustainable use of natural resources<br/>"), "7" == c && (a = "description: nature-feature area<br/>"), "97" == c && (a = "description: protected by continental agreements<br/>"), "98" == c && (a = "description: protected by interstate- or international conventions<br/>"), "99" == c && (a = "other continental or international national protected areas <br/>"), "21" == c && (a = "description: Community life: religious, sacred areas, associative locations, recreation<br/>"), "22" == c && (a = "description: Cultural assets (cultural assets and - efforts, districts historical heritage, monument conservation)<br/>"), "23" == c && (a = "description: Protection in favor of economics<br/>"), "24" == c && (a = "description: Political protection<br/>"), "25" == c && (a = "description: Military areas (military refuges, test area)<br/>"), "26" == c && (a = "description: Historic: for colonial-stuff and protectorates.<br/>"), "29" == c && (a = "description: other social protected areas<br/>"), "11" == c && (a = "description: soil: crop yield, erosion protection, ...<br/>"), "12" == c && (a = "description: water: water protection area, fresh water, drinking water, springs, ...<br/>"), "13" == c && (a = 'description: climate and -air: gasper supply/cold air, ...for emission-, immission control in OSM existent, see "Low Emission Zone" (LEZ)<br/>'), "14" == c && (a = "description: species: no fishing, protected for fishery, protected for hunting, plants, ...<br/>"), "15" == c && (a = "description: location condition: floodwater retention area, protection forest, grazing land, ...<br/>"), "16" == c && (a = 'description: longtime hazard area: contamination, earth-moving area, "problem sites" ...<br/>'), "19" == c && (a = "description: other national resources protected areas<br/>"));
  return a;
},
    fnContentLanduse = function fnContentLanduse(b) {
  var a = "";
  "quarry" == b.landuse && b.resource && (a += "Resource: " + b.resource + "<br/>");
  "open_stable" == b["animal_keeping:type"] && (a += "open stable<br/>");
  "field_shelter" == b["animal_keeping:type"] && (a += "field shelter<br/>");
  "paddock" == b["animal_keeping:type"] && (a += "paddock<br/>");
  b.animal_keeping && (a += "animals: horses<br/>");
  return a;
},
    fnMessstation = function fnMessstation(b) {
  var a = "";
  "yes" == b["monitoring:water_level"] && (a += "water level<br/>");
  "yes" == b["monitoring:seismic_activity"] && (a += "seismic activity<br/>");
  "yes" == b["monitoring:tide_gauge"] && (a += "tide gauge<br/>");
  "yes" == b["monitoring:weather"] && (a += "weather<br/>");
  "yes" == b["monitoring:air_quality"] && (a += "air quality<br/>");
  return a;
},
    fnContentRoute = function fnContentRoute(b) {
  var a = "";
  b.route && ("yes" == b.roundtrip && (a += "roundtrip<br/>"), b.length && (a += "length: " + b.length + "<br/>"), b.distance && (a += "distance: " + b.distance + "<br/>"), b.symbol && (a += "symbol: " + b.symbol + "<br/>"));
  return a;
},
    fnContentPetrol = function fnContentPetrol(b) {
  var a = "";
  "fuel" == b.amenity && ("yes" == b["fuel:biodiesel"] && (a += "biodiesel<br/>"), "yes" == b["fuel:e85"] && (a += "e85<br/>"), "yes" == b["fuel:e10"] && (a += "e10<br/>"), "yes" == b["fuel:lpg"] && (a += "lpg<br/>"), "yes" == b["fuel:cng"] && (a += "cng<br/>"), "diesel" == b.fuel && (a += "diesel<br/>"), "lpg" == b.fuel && (a += "lpg<br/>"), "yes" == b["fuel:octane_95"] && (a += "octane 95<br/>"), "yes" == b["fuel:octane_98"] && (a += "octane 98<br/>"), "yes" == b["fuel:octane_100"] && (a += "octane 100<br/>"), "yes" == b["fuel:octane_102"] && (a += "octane 102<br/>"), "yes" == b["fuel:diesel"] && (a += "diesel<br/>"), "yes" == b["fuel:electricity"] && (a += "charging station / loading station<br/>"));
  return a;
},
    fnContentHistoric = function fnContentHistoric(b) {
  var a = "";
  if ("archaeological_site" == b.historic && b.site_type) switch (b.site_type) {
    case "megalith":
      a += "megalith<br/>";
      break;

    case "bigstone":
      a += "bigstone<br/>";
      break;

    case "tumulus":
      a += "tumulus<br/>";
      break;

    case "fortification":
      a += "fortification<br/>";
      break;

    default:
      a += "unknown<br/>";
  }
  return a;
},
    fnContentBarriers = function fnContentBarriers(b, a) {
  var c = "";
  if ("wall" == b.barrier || "bollard" == b.barrier) b.material && (c += "material: " + translate(b.material) + "<br/>");
  return c;
},
    fnContentTourism = function fnContentTourism(b) {
  var a = "";

  if ("camp_site" == b.tourism) {
    "yes" == b.dog && (a += "dogs allowed<br/>");
    "no" == b.dog && (a += "dogs forbidden<br/>");
    b.stars && (a += b.stars + "stars<br/>");
    b.caravans && (a += "caravan sites<br/>");
    if ("yes" == b.openfire || "yes" == b.fireplace) a += "Thers is an openfire. <br/>";
    "yes" == b.washing_machine && (a += "washing machine<br/>");
    "yes" == b.dryer && (a += "dryer<br/>");
    "yes" == b.group_only && (a += "use for groups only<br/>");
    "reception" == b.camp_site && (a += "reception available<br/>");
  }

  "information" == b.tourism && "map" == b.information && ("topo" == b.map_type && (a += "topo</br>"), "street" == b.map_type && (a += "street</br>"), "scheme" == b.map_type && (a += "scheme</br>"), "toposcope" == b.map_type && (a += "toposcope</br>"));
  "information" == b.tourism && "map" == b.information && ("site" == b.map_size && (a += "map of site</br>"), "city" == b.map_size && (a += "city map</br>"), "region" == b.map_size && (a += "map of region</br>"));
  "geology" == b.board_type && (a += "geologic information<br/>");
  "history" == b.board_type && (a += "historic information<br/>");
  "nature" == b.board_type && (a += "information about nature<br/>");
  "notice" == b.board_type && (a += "general information<br/>");
  "plants" == b.board_type && (a += "information about plants<br/>");
  "wildlife" == b.board_type && (a += "information about wildlife<br/>");
  return a;
},
    fnContentAmenity = function fnContentAmenity(b) {
  var a = "";
  "boat_sharing" == b.amenity && (a += b.boattype + "<br/>");
  "embassy" == b.amenity && (a += b.country + "<br/>");
  if (b.vending) switch (b.vending) {
    case "admission_tickets":
      a += "tickets<br/>";
      break;

    case "animal_feed":
      a += "animal feed<br/>";
      break;

    case "books":
      a += "books<br/>";
      break;

    case "candles":
      a += "candles<br/>";
      break;

    case "cigarettes":
      a += "cigarettes<br/>";
      break;

    case "condoms":
      a += "condoms<br/>";
      break;

    case "drinks":
      a += "drinks<br/>";
      break;

    case "first_aid":
      a += "first aid articles<br/>";
      break;

    case "fishing_tackle":
      a += "fishing tackle<br/>";
      break;

    case "flowers":
      a += "flowers<br/>";
      break;

    case "ice_cream":
      a += "ice cream<br/>";
      break;

    case "laundry_detergent":
      a += "laundry detergent<br/>";
      break;

    case "newspapers":
      a += "newspapers<br/>";
      break;

    case "SIM_cards":
      a += "sIM-cards<br/>";
      break;

    case "sweets":
      a += "sweets<br/>";
      break;

    case "parcel_pickup":
      a += "parcel pickup<br/>";
      break;

    case "ice_cubes":
      a += "ice cubes<br/>";
      break;

    case "public_transport_tickets":
      a += "public transport tickets<br/>";
      break;

    case "parking_ticket":
      a += "parking tickets<br/>";
      break;

    case "sex_toys":
      a += "sex toys<br/>";
      break;

    case "stamps":
      a += "stamps<br/>";
      break;

    case "toll":
      a += "toll<br/>";
      break;

    case "umbrellas":
      a += "umbrellas<br/>";
      break;

    default:
      a += "content unknown<br/>";
  }
  "post_box" == b.amenity && (b.collection_times && (a += "collection times: " + b.collection_times + "<br/>"), "yes" == b.drive_through && (a += "accessible by car. <br/>"));
  return a;
},
    fnContentStorage = function fnContentStorage(b) {
  var a = "";

  if ("storage_tank" == b.man_made) {
    if (b.content) {
      var c = b.content;

      switch (c) {
        case "fuel":
          c = "fuel";
          break;

        case "oil":
          c = "oil";
          break;

        case "gas":
          c = "gas";
          break;

        case "slurry":
          c = "slurry";
          break;

        case "cement":
          c = "cement";
          break;

        case "water":
          c = "water";
          break;

        case "manure":
          c = "manure";
          break;

        case "silage":
          c = "silage";
      }

      a += "content: " + c + "<br/>";
    }

    if (b.contents) {
      c = b.contents;

      switch (c) {
        case "fuel":
          c = "fuel";
          break;

        case "oil":
          c = "oil";
          break;

        case "gas":
          c = "gas";
          break;

        case "slurry":
          c = "slurry";
          break;

        case "cement":
          c = "cement";
          break;

        case "water":
          c = "water";
          break;

        case "manure":
          c = "manure";
          break;

        case "silage":
          c = "silage";
      }

      a += "content: " + c + "<br/>";
    }
  }

  b.storage && ("gas" == b.storage && (a += "content: gas<br/>"), "oil" == b.storage && (a += "content: oil<br/>"));
  return a;
},
    fnContentInformationCity = function fnContentInformationCity(b) {
  var a = "";
  b["name:de"] && (a += "german name: " + b["name:de"] + "<br/>");
  if (1E4 <= b.population) if (b.population = "" + b.population, 3 < b.population.length) {
    var c = b.population.length % 3,
        d = 0 < c ? b.population.substring(0, c) : "";

    for (var i = 0; i < Math.floor(b.population.length / 3); i++) {
      d = 0 == c && 0 == i ? d + b.population.substring(c + 3 * i, c + 3 * i + 3) : d + ("." + b.population.substring(c + 3 * i, c + 3 * i + 3));
    }

    a += "population: " + d + "<br/>";
  } else a += "population " + b.population + "<br/>";
  1E4 >= b.population && (a += "population: " + b.population + "<br/>");
  return a;
},
    fnContentEmergency = function fnContentEmergency(b) {
  var a = "";
  b.lifeboat && ("inshore" == b.lifeboat ? a += "application: inshore<br/>" : "offshore" == b.lifeboat && (a += "application: offshore<br/>"));
  b["lifeboat:class"] && (a += "type of boat: " + b["lifeboat:class"] + "<br/>");

  if (b["siren:type"]) {
    var c = b["siren:type"];

    switch (c) {
      case "mechanical":
        c = "mechanical";
        break;

      case "electronic":
        c = "electronic";
        break;

      case "pneumatic":
        c = "pneumatic";
        break;

      case "electromechanic":
        c = "electromechanic";
    }

    a += "Typ: " + c + "<br/>";
  }

  if (b["siren:purpose"]) {
    c = b["siren:purpose"];

    switch (c) {
      case "air_raid":
        c = "air raid";
        break;

      case "tornado":
        c = "tornado";
        break;

      case "storm":
        c = "storm";
        break;

      case "civil_defense":
        c = "civil defence";
        break;

      case "fire":
        c = "fire";
    }

    a += "use: " + c + "<br/>";
  }

  b["siren:model"] && (a += "model: " + b["siren:model"] + "<br/>");
  b["siren:range"] && (a += "range of siren: " + b["siren:range"] + "<br/>");
  return a;
},
    fnContentCuisine = function fnContentCuisine(b) {
  var a = "";

  if (b.cuisine) {
    var c = "",
        a = ("supermarket" == b.shop || "convenience" == b.shop || "deli" == b.shop || "organic" == b.shop) && "restaurant" != b.amenity ? a + "specialties: " : a + "cuisine: ";
    "arabic" == b.cuisine && (c += "arabic<br/>");
    "italian" == b.cuisine && (c += " italian<br/>");
    "international" == b.cuisine && (c += " international<br/>");
    "regional" == b.cuisine && (c += " regional<br/>");
    "chinese" == b.cuisine && (c += " chinese<br/>");
    "greek" == b.cuisine && (c += " greek<br/>");
    "african" == b.cuisine && (c += " african<br/>");
    "german" == b.cuisine && (c += " german<br/>");
    "mexican" == b.cuisine && (c += " mexican<br/>");
    "french" == b.cuisine && (c += " french<br/>");
    "indian" == b.cuisine && (c += " indian<br/>");
    "iranian" == b.cuisine && (c += " iranian<br/>");
    "lebanese" == b.cuisine && (c += " lebanese<br/>");
    "thai" == b.cuisine && (c += " thai<br/>");
    "balkan" == b.cuisine && (c += " balkan<br/>");
    "turkish" == b.cuisine && (c += " turkish<br/>");
    "bavarian" == b.cuisine && (c += " bavarian<br/>");
    "czech" == b.cuisine && (c += " czech<br/>");
    "portuguese" == b.cuisine && (c += " portuguese<br/>");
    "spanish" == b.cuisine && (c += " spanish<br/>");
    "japanese" == b.cuisine && (c += " japanese<br/>");
    "fish" == b.cuisine && (c += " fish<br/>");
    "brazilian" == b.cuisine && (c += " brazilian<br/>");
    "asian" == b.cuisine && (c += " asian<br/>");
    "mediterranean" == b.cuisine && (c += "mediterranean<br/>");
    "seafood" == b.cuisine && (c += " seafood<br/>");
    "ice_cream" == b.cuisine && (c += " ice cream<br/>");
    "burger" == b.cuisine && (c += " burger<br/>");
    "frozen_yogurt" == b.cuisine && (c += " frozen yogurt<br/>");
    "" == c && (c = b.cuisine + "<br/>");
    a += c;
  }

  return a;
},
    fnContentShipping = function fnContentShipping(b) {
  var a = "";
  b.harbour = "yes";
  "yes" == b["access:tide"] && (a += "Access restricted by tide</br>");
  "yes" == b["access:swell"] && (a += "access restricted by swell</br>");
  "yes" == b["access:ice"] && (a += "access restricted by ice</br>");
  b.vhf_channel && (a += "UKW-Channel: " + b.vhf_channel + "</br>");
  b.mmsi && (a += "MMSI-Number: " + b.mmsi + "</br>");
  b["harbour:information"] && (a += "information :" + b["harbour:information"] + "</br>");
  "yes" == b.motorboat && (a += "motorboat allowed</br>");
  "no" == b.motorboat && (a += "motorboat prohibited </br>");
  b.CEMT && (a += "CEMT: " + b.CEMT + "</br>");
  "yes" == b.intermittent && (a += "river intermittent dried out</br>");
  "yes" == b.tidal && (a += "tidal influence the flow</br>");
  b.draft && (a += " driving depth of water: " + b.draft + " m</br>");
  if ("slipway" == b.leisure || "slipway" == b.harbour) "hand" == b.operating && (a += "operating: by hand<br/>"), "car" == b.operating && (a += "operating: by car, boat trailer<br/>"), "cable_winch" == b.operating && (a += "operating: with cable winch<br/>"), "travellift" == b.operating && (a += "operating: by travellift<br/>"), "crane" == b.man_made && (a += "by crane<br/>", b["crane:maxload"] && (a += "maxload: " + b["crane:maxload"] + "<br/>"), b["ship:maxdraft"] && (a += "maximum permissible draught: " + b["ship:maxdraft"] + "<br/>"), b["ship:maxlength"] && (a += "maximum permissible length of a ship: " + b["ship:maxlength"] + "<br/>")), "yes" == b.vehicle && (a += "accessible by vehicle<br/>");
  a += fnWreckInfo(b);
  if ("ferry" == b.route || "ferry_terminal" == b.amenity || "yes" == b.ferry) fahrzeit = b.duration, "" != fahrzeit && "undefined" != fahrzeit && null != fahrzeit && (a += "duration in hours : " + fahrzeit + "<br/>"), "yes" == b.motorcar && (a += "motorcars allowed<br/>"), "no" == b.motorcar && (a += "motorcars prohibited<br/>"), "no" == b.motor_vehicle && (a += "motor vehicles prohibited<br/>"), "yes" == b.motor_vehicle && (a += "motor vehicles allowed<br/>"), "yes" == b.vehicle && (a += "vehicles allowed<br/>"), "no" == b.vehicle && (a += "no vehicles<br/>"), "no" == b.bicycle && (a += "no bicycles<br/>"), "no" == b.bicycle && (a += "bicycles allowed<br/>"), "yes" == b.hgv && (a += "hgv allowed<br/>"), "no" == b.hgv && (a += "hgv prohibited<br/>"), "yes" == b.foot && (a += "pedestrian allowed<br/>"), "no" == b.foot && (a += "pedestrian prohibited <br/>"), "yes" == b.bicycle && (a += "cyclist allowed <br/>"), "no" == b.bicycle && (a += "cyclist prohibited <br/>"), "yes" == b["ferry:cable"] && (a += "cable ferry<br/>");

  if (b["seamark:light:1:colour"]) {
    var c = b["seamark:light:1:colour"];

    switch (c) {
      case "white":
        c = "white";
        break;

      case "red":
        c = "red";
        break;

      case "green":
        c = "green";
        break;

      case "blue":
        c = "blue";
        break;

      case "yellow":
        c = "yellow";
        break;

      case "amber":
        c = "amber";
    }

    a += "colour of light: " + c + "<br/>";
  }

  "lighthouse" == b.man_made && (b["seamark:light:1:character"] && (a += "light character: " + b["seamark:light:1:character"] + "<br/>"), b["seamark:light:1:period"] && (a += "period: " + b["seamark:light:1:period"] + "<br/>"), b["seamark:light:1:height"] && (a += "height: " + b["seamark:light:1:height"] + " m<br/>"), b["seamark:light:1:range"] && (a += "range: " + b["seamark:light:1:range"] + " sm<br/>"));

  if (b["seamark:light:colour"]) {
    c = b["seamark:light:colour"];

    switch (c) {
      case "white":
        c = "white";
        break;

      case "red":
        c = "red";
        break;

      case "green":
        c = "green";
        break;

      case "blue":
        c = "blue";
        break;

      case "yellow":
        c = "yellow";
        break;

      case "amber":
        c = "amber";
    }

    a += "colour of light: " + c + "<br/>";
  }

  "lighthouse" == b.man_made && (b["seamark:light:character"] && (a += "light character: " + b["seamark:light:character"] + "<br/>"), b["seamark:light:height"] && (a += "height: " + b["seamark:light:height"] + " m<br/>"), b["seamark:light:range"] && (a += "range: " + b["seamark:light:range"] + " sm<br/>"), b["seamark:light:period"] && (a += "period: " + b["seamark:light:period"] + "<br/>"));
  return a;
},
    fnContentHydrants = function fnContentHydrants(b) {
  var a = "";

  if ("fire_hydrant" == b.emergency) {
    var c = b["fire_hydrant:count"];
    "undefined" != c && null != c && "" != c && (a += "Number: " + c + "<br/>");
    c = b["fire_hydrant:diameter"];
    "undefined" != c && null != c && "" != c && (a += "Pipe diameter: " + c + " mm<br/>");
    c = b["fire_hydrant:pressure"];
    "undefined" != c && null != c && "" != c && (a = "suction" == c ? a + "Pressure in bar / Suction: Suction<br/>" : a + ("Pressure in bar / Suction: " + c + "<br/>"));
    c = b["fire_hydrant:position"];
    "undefined" != c && null != c && "" != c && ("lane" == c ? a += "Position: Lane<br/>" : "parking_lot" == c ? a += "Position: Parking Lot<br/>" : "sidewalk" == c ? a += "Position: Sidewalk<br/>" : "green" == c && (a += "Position: Green<br/>"));
    c = b.water_volume;
    "undefined" != c && null != c && "" != c && (a += "Volume: " + c + "<br/>");
    c = b["fire_hydrant:awwa_class"];
    "undefined" != c && null != c && "" != c ? a += "AWWA Class: " + c + "<br/>" : (c = b.flow_rate, "undefined" != c && null != c && "" != c && (a += "Flow rate: " + c + "<br/>"));
    c = b.water_source;
    "undefined" != c && null != c && "" != c && "main" != c && (a += "Water source: " + c + "<br/>");
    c = b["couplings:type"];
    "undefined" != c && null != c && "" != c && (a += "Couplings type: " + c + "<br/>");
    c = b["couplings:diameter"];
    "undefined" != c && null != c && "" != c && (a += "Couplings diameter: " + c + "<br/>");
    c = b["pillar:type"];
    "dry_barrel" === c && (a += "Pillar type: " + c + "<br/>");
    "fire_hydrant" === b["disused:emergency"] && (a += "Currently disused");
    "" == a && (a = "No details available.");
  }

  return a;
},
    fnContentStreetsTraffic = function fnContentStreetsTraffic(b) {
  var a = "";
  "yes" == b["red_turn:right"] && (a += "red turn: allowed to turn to the right<br/>");
  "no" == b["red_turn:right"] && (a += "red turn: prohibited to turn to the right<br/>");
  b.bridge && (b.height && (a += "height: " + b.height + " m<br/>"), b.length && (a += "length: " + b.length + " m<br/>"), b.bridge_ref && (a += "bridge ref: " + b.bridge_ref + "<br/>"), b.start_date && (a += "start date: " + b.start_date + "</br>;"), b.maxweight && (a += "maxweight: " + b.maxweight + " t</br>"));
  b.highway && "yes" == b.toll && (a += "toll highway<br/>");
  "yes" == b["toll:hgv"] && (a += "HGV toll<br/>");

  if (b.surface) {
    var c = b.surface,
        a = a + "surface: ";

    switch (c) {
      case "grass":
        a += "grass<br/>";
        break;

      case "paved":
        a += "paved<br/>";
        break;

      case "asphalt":
        a += "asphalt<br/>";
        break;

      case "cobblestone":
        a += "cobblestone<br/>";
        break;

      case "sett":
        a += "sett<br/>";
        break;

      case "concrete":
        a += "concrete<br/>";
        break;

      case "unpaved":
        a += "unpaved<br/>";
        break;

      case "paving_stones":
        a += "paving stones<br/>";
        break;

      case "compacted":
        a += "compacted<br/>";
        break;

      case "dirt":
        a += "dirt<br/>";
        break;

      case "fine_gravel":
        a += "fine gravel<br/>";
        break;

      case "grass_paver":
        a += "grass paver<br/>";
        break;

      case "gravel":
        a += "gravel<br/>";
        break;

      case "earth":
        a += "earth<br/>";
        break;

      case "ground":
        a += "ground<br/>";
        break;

      case "metal":
        a += "metal<br/>";
        break;

      case "mud":
        a += "mud<br/>";
        break;

      case "sand":
        a += "sand<br/>";
        break;

      case "wood":
        a += "wood<br/>";
        break;

      case "tartan":
        a += "tartan<br/>";
        break;

      case "artificial_turf":
        a += "artificial turf<br/>";
        break;

      case "clay":
        a += "clay<br/>";
        break;

      default:
        a += "unknown<br/>";
    }
  }

  "grade1" == b.tracktype && (a += "path surface: Solid. Usually a paved or heavily compacted hardcore surface.<br/>");
  "grade2" == b.tracktype && (a += "path surface: Mostly solid. Usually an unpaved track with surface of gravel mixed with a varying amount of sand, silt, and clay.<br/>");
  "grade3" == b.tracktype && (a += "path surface: Even mixture of hard and soft materials. Almost always an unpaved track.<br/>");
  "grade4" == b.tracktype && (a += "path surface: Mostly soft. Almost always an unpaved track prominently with soil/sand/grass, but with some hard materials, or compressed materials mixed in.<br/>");
  "grade5" == b.tracktype && (a += "path surface: Soft. Almost always an unpaved track lacking hard materials, uncompacted, with surface of soil/sand/grass.<br/>");
  "yes" == b.motorcycle && (a += "<br/>motorcyle allowed.<br/>");
  "no" == b.motorcycle && (a += "<br/>motorcycles prohibited.<br/>");
  "excellent" == b.trail_visibility && (a += "trail visibility: Unambiguous path or markers everywhere<br/>");
  "good" == b.trail_visibility && (a += "trail visibility: Next marker always visible, but sometimes has to be searched for.<br/>");
  "intermediate" == b.trail_visibility && (a += "trail visibility: Track mostly visible<br/>");
  "bad" == b.trail_visibility && (a += "trail visibility: Path sometimes invisible, route partly pathless<br/>");
  "horrible" == b.trail_visibility && (a += "trail visibility: Often pathless<br/>");
  "no" == b.trail_visibility && (a += "trail visibility: Mostly pathless<br/>");
  "hiking" == b.sac_scale && (a += "trail: Trail well cleared. (SAC Scale: T1 (yellow))</br>");
  "mountain_hiking" == b.sac_scale && (a += "trail: Trail with continuous line and balanced ascent (SAC Scale: T2 (red))</br>");
  "demanding_mountain_hiking" == b.sac_scale && (a += "trail: exposed sites may be secured with ropes or chains, possible need to use hands for balance (SAC Scale: T3 (red))</br>");
  "alphine_hiking" == b.sac_scale && (a += "trail: sometimes need for hand use to get ahead (SAC Scale: T4 (blue))</br>");
  "demanding_alphine_hiking" == b.sac_scale && (a += "trail: single plainly climbing up to second grade (SAC Scale: T5 (blue))</br>");
  "difficult_alpine_hiking" == b.sac_scale && (a += "trail: climbing up to second grade (SAC Scale: T6 (blue))</br>");
  b["mtb:name"] && (a += "cycleway :" + b["mtb:name"] + "</br>");
  "0" == b["mtb:scale"] && (a += "Mountainbikeroute: Very easy way - Gravel or packed earth. No particular difficulties. Mostly forest and meadow paths (highway=path). Sections with steps, rocks, or roots are not expected. Wide curves, easy to moderate slope. No special skills are needed to ride this. Easy to ride uphill.</br>Surface: solid and handy</br>Obstacles: no obstacles</br>Gradient: mild to moderate</br>Bends: wide</br>Driving skills: no special driving skills required</br>");
  "1" == b["mtb:scale"] && (a += "Mountainbikeroute: Smaller obstacles like roots and small stones. Erosion damage may increase difficulty. Soil may be loose in places. Tight turns, but no hairpin turns. Riding requires care and attention, but no special skill. Obstacles can be ridden over. Difficult to ride uphill.</br>Surface: loose surface possible, small roots and stones</br>Obstacles: small obstacles, water gutter, erosion damage</br>Gradient: < 40%</br>Bends: wide</br>Driving skills: basic driving skills required, obstacles can be passed over</br>");
  "2" == b["mtb:scale"] && (a += "Mountainbikeroute: Obstacles such as large rocks and stones. Soil is often loose.  Steps are expected. Wider hairpin turns, steepness of up to 70%. Requires some advanced riding skills. Only very skilled riders can go uphill on this.</br>Surface: surface usually not compacted, larger roots and stones.</br>Obstacles: plain steps and stairs</br>Gradient: < 70%</br>Bends: easy hairpins</br>Driving skills: advanced driving skills required</br>");
  "3" == b["mtb:scale"] && (a += "Mountainbikeroute: Many sections with large obstacles such as boulders and large roots. Many hairpin and off-balance turns. Slippery surface and talus sections may be found. The surface may be very slippery. Constant concentration and very good skills needed. Nearly impossible to ride uphill.</br>Surface: many large roots / rocks or slippery ground, loose scree</br>Obstacles: drags, hardly driveable steps</br>Gradient: >70%</br>Bends: bail like hairpins</br>Driving skills: perfect bike control with trial skills required, like moving the rear wheel only in hairpins</br>");
  "4" == b["mtb:scale"] && (a += "Mountainbikeroute: Very steep and difficult, with sections having large boulders and roots. Frequent loose debris. Very steep sections with very tight hairpin turns and high steps that will cause the chainring to hit the ground. Some trials techniques will be necessary. Nearly impossible to ride uphill.</br>Surface: many large roots / rocks or slippery ground, loose scree</br>Obstacles: drags, hardly driveable steps</br>Gradient: >70%</br>Bends: bail like hairpins</br>Driving skills: perfect bike control with trial skills required, like moving the rear wheel only in hairpins</br>");
  "5" == b["mtb:scale"] && (a += "Mountainbikeroute: Very steep and difficult with big boulder fields and debris, and landslides. Speed must be carried for counter-ascents. If at all only short passages are available for accelerating and braking. Fallen trees may make very steep passages even more difficult. Very few Mountainbikers can actually ride at this level. Most will have to push.</br>Surface: counter-ascents / rocks or slippery ground, loose scree / path is rather a Alpine hiking (>T4) path</br>Obstacles: drags, combinations of hardly driveable steps</br>Gradient: >70%</br>Bends: bail like hairpins with obstacles</br>Driving skills: excellent bike control with special trial skills required, moving the front and rear wheel is limited</br>");
  "6" == b["mtb:scale"] && (a += "Mountainbikeroute: Classify ways with 6 that are not rideable at all for a mtbiker. E.g. Chains or stemples (metal rungs) on a via ferrata or simply unsecured alpine pathes that are not even partly rideable for the very best mtbikers (using trial techniques). Steepness is often >45\xB0. If used for single points, then this highlights exceptionally difficult spots. Often spotting is impossible and falling may be lethal.</br>Surface: Path is rather a Alpine hiking (T5 or T6) path or bare rock without visible path.</br>Obstacles: Steps over 2m, rock faces,...</br>Gradient: >100%</br>Bends: no bends can be distinguished as such.</br>Driving skills: only the very best trial specialists or vertriders will try to ride these spots. Walking the place first to find a way to clear is needed.</br>");
  "10" == b.maxspeed && (a += 'traffic-calmed sector: maxspeed 10 Km/h and "right over left"</br>');
  "30" == b.maxspeed && (a += 'traffic-calmed sector: "right over left" and maxspeed 30 Km/h</br>');
  "50" == b.maxspeed && (a += "maxspeed 50 Km/h</br>");
  "70" == b.maxspeed && (a += "maxspeed 50 Km/h</br>");
  "80" == b.maxspeed && (a += "maxspeed 80 Km/h</br>");
  "100" == b.maxspeed && (a += "maxspeed  100 Km/h</br>");
  "no" == b.overtaking && (a += "No overtaking!</br>");
  "yes" == b.noexit && (a += "noexit</br>");
  "yes" == b.oneway && (a += "oneway</br>");
  "designated" == b.priority_road && (a += "priority road designated</br>");
  "end" == b.priority_road && (a += "priority road ends</br>");
  "emergency_bay" == b.highway && (a += "emergency bay</br>");
  "yes" == b.traffic_calming && (a += "traffic calming</br>");
  "bump" == b.traffic_calming && (a += "bump</br>");
  "chicane" == b.traffic_calming && (a += "chicane</br>");
  "choker" == b.traffic_calming && (a += "choker</br>");
  "cushion" == b.traffic_calming && (a += "cushion</br>");
  "hump" == b.traffic_calming && (a += "hump</br>");
  "island" == b.traffic_calming && (a += "island</br>");
  "rumble_strip" == b.traffic_calming && (a += "rumble strip</br>");
  "table" == b.traffic_calming && (a += "table</br>");

  if ("parking" == b.amenity && ("yes" == b.fee && (a += "fee required<br/>"), c = b["capacity:women"], "" != c && "no" != c && null != c)) {
    var d = "unkown";
    "yes" != c && (d = c);
    a += "ladies parking spaces (numbers: " + d + ") <br/>";
  }

  b.park_ride && ("bus" == b.park_ride && (a += "bus connection<br/>"), "tram" == b.park_ride && (a += "tram connection<br/>"), "unknown" == b.park_ride && (a += "park ride unkown<br/>"));
  b["railway:position"] && (a += "railway<br/>position: " + b["railway:position"] + "<br/>");
  b.uic_ref && (a += "UIC: " + b.uic_ref + "<br/>");
  return a;
},
    fnContentSports = function fnContentSports(b) {
  var a = "";
  "9pin" == b.sport && (a += "possible sport : 9pin<br/>");
  "10pin" == b.sport && (a += "possible sport : 10pin<br/>");
  "american_football" == b.sport && (a += "possible sport : american football<br/>");
  "aikido" == b.sport && (a += "possible sport : aikido<br/>");
  "archery" == b.sport && (a += "possible sport : archery<br/>");
  "athletics" == b.sport && (a += "possible sport : athletics<br/>");
  "australian_football" == b.sport && (a += "possible sport : australian football<br/>");
  "base" == b.sport && (a += "possible sport : base<br/>");
  "badminton" == b.sport && (a += "possible sport : badminton<br/>");
  "baseball" == b.sport && (a += "possible sport : baseball<br/>");
  "basketball" == b.sport && (a += "possible sport : basketball<br/>");
  "beachvolleyball" == b.sport && (a += "possible sport : beachvolleyball<br/>");
  "bmx" == b.sport && (a += "possible sport : bmx<br/>");
  "boules" == b.sport && (a += "possible sport : boules<br/>");
  "boule" == b.sport && (a += "possible sport : boule<br/>");
  "bowls" == b.sport && (a += "possible sport : bowls<br/>");
  "boxing" == b.sport && (a += "possible sport : boxing<br/>");
  "canadian_football" == b.sport && (a += "possible sport : canadian football<br/>");
  "canoe" == b.sport && (a += "possible sport : canoe<br/>");
  "chess" == b.sport && (a += "possible sport : chess<br/>");
  "cliff_diving" == b.sport && (a += "possible sport : cliff diving<br/>");
  "climbing" == b.sport && (a += "possible sport : climbing<br/>");
  "climbing_adventure" == b.sport && (a += "possible sport : adventure climbing<br/>");
  "cricket" == b.sport && (a += "possible sport : cricket<br/>");
  "cricket_nets" == b.sport && (a += "possible sport : cricket nets<br/>");
  "croquet" == b.sport && (a += "possible sport : croquet<br/>");
  "curling" == b.sport && (a += "possible sport : curling<br/>");
  "cycling" == b.sport && (a += "possible sport : cycling<br/>");
  if ("darts" == b.sport || "dart" == b.sport) a += "Darts<br/>";
  "dog_racing" == b.sport && (a += "possible sport : dog racing<br/>");
  "fencing" == b.sport && (a += "possible sport : fencing<br/>");
  "equestrian" == b.sport && (a += "possible sport : equestrian<br/>");
  "football" == b.sport && (a += "possible sport: american football<br/>");
  "free_flying" == b.sport && (a += "possible sport: free flying<br/>");
  "gaelic_games" == b.sport && (a += "possible sport: gaelic games<br/>");
  "golf" == b.sport && (a += "possible sport: golf<br/>");
  "gymnastics" == b.sport && (a += "possible sport: gymnastik<br/>");
  "hockey" == b.sport && (a += "possible sport: hockey<br/>");
  "horseshoes" == b.sport && (a += "possible sport: horseshoes<br/>");
  "horse_racing" == b.sport && (a += "possible sport: horse racing<br/>");
  "ice_stock" == b.sport && (a += "possible sport: ice stock<br/>");
  "judo" == b.sport && (a += "possible sport: judo<br/>");
  "karting" == b.sport && (a += "possible sport: karting<br/>");
  "kitesurfing" == b.sport && (a += "possible sport: kitesurfing<br/>");
  "korfball" == b.sport && (a += "possible sport: korfball<br/>");
  "motor" == b.sport && (a += "possible sport: motor<br/>");
  "multi" == b.sport && (a += "possible sport: multi<br/>");
  "obstacle_course" == b.sport && (a += "possible sport: obstacle course<br/>");
  "orienteering" == b.sport && (a += "possible sport: orienteering<br/>");
  "paddle_tennis" == b.sport && (a += "possible sport: paddle-tennis<br/>");
  "paragliding" == b.sport && (a += "possible sport: paragliding<br/>");
  "Pelota" == b.sport && (a += "possible sport: Pelota<br/>");
  "rasquet" == b.sport && (a += "possible sport: racquet<br/>");
  "rowing" == b.sport && (a += "possible sport: rowing<br/>");
  "rugby_league" == b.sport && (a += "possible sport: rugby league<br/>");
  "rugby_union" == b.sport && (a += "possible sport: rugby union<br/>");
  "running" == b.sport && (a += "possible sport: running<br/>");
  "scuba_diving" == b.sport && (a += "possible sport: scuba diving<br/>");
  "shooting" == b.sport && (a += "possible sport: shooting<br/>");
  "skating" == b.sport && (a += "possible sport: skating<br/>");
  "skateboard" == b.sport && (a += "possible sport: skateboard<br/>");
  "skiing" == b.sport && (a += "possible sport: skiing<br/>");
  "soccer" == b.sport && (a += "possible sport: soccer<br/>");
  "surfing" == b.sport && (a += "possible sport: surfing<br/>");
  "swimming" == b.sport && (a += "possible sport: swimming<br/>");
  "table_tennis" == b.sport && (a += "possible sport: table tennis<br/>");
  "taekwondo" == b.sport && (a += "possible sport: taekwondo<br/>");
  "team_handball" == b.sport && (a += "possible sport: team handball<br/>");
  "tennis" == b.sport && (a += "possible sport: tennis<br/>");
  "toboggan" == b.sport && (a += "possible sport: toboggan<br/>");
  "volleyball" == b.sport && (a += "possible sport: volleyball<br/>");
  "water_ski" == b.sport && (a += "possible sport: water ski<br/>");
  "weightlifting" == b.sport && (a += "possible sport: weightlifting<br/>");
  "wrestling" == b.sport && (a += "possible sport: wrestling<br/>");
  return a;
};

exports.fnContentSports = fnContentSports;
exports.fnContentStreetsTraffic = fnContentStreetsTraffic;
exports.fnContentHydrants = fnContentHydrants;
exports.fnContentShipping = fnContentShipping;
exports.fnContentCuisine = fnContentCuisine;
exports.fnContentEmergency = fnContentEmergency;
exports.fnContentInformationCity = fnContentInformationCity;
exports.fnContentStorage = fnContentStorage;
exports.fnContentAmenity = fnContentAmenity;
exports.fnContentTourism = fnContentTourism;
exports.fnContentBarriers = fnContentBarriers;
exports.fnContentHistoric = fnContentHistoric;
exports.fnContentPetrol = fnContentPetrol;
exports.fnContentRoute = fnContentRoute;
exports.fnMessstation = fnMessstation;
exports.fnContentLanduse = fnContentLanduse;
exports.fnContentProtectedArea = fnContentProtectedArea;
exports.fnContentNatural = fnContentNatural;
exports.fnContentAerodrome = fnContentAerodrome;
exports.fnContent = fnContent;

function fnArztInfo(b) {
  var a = "",
      c = "",
      d = b["healthcare:speciality"];
  "" != d && ("general" == d && (c += "general<br/>"), "allergology" == d && (c += "allergology<br/>"), "anaesthetics" == d && (c += "anaesthetics<br/>"), "biochemistry" == d && (c += "biochemistry<br/>"), "biological_haematology" == d && (c += "biological haematology<br/>"), "biology" == d && (c += "biology<br/>"), "cardiology" == d && (c += "cardiology<br/>"), "cardiac_surgery" == d && (c += "cardiac surgery<br/>"), "child_psychiatry" == d && (c += "child psychiatry<br/>"), "dental_oral_maxillo_facial_surgery" == d && (c += "dental-, oral-, maxillo- and facial-surgery<br/>"), "dermatology" == d && (c += "dermatology<br/>"), "dermatovenereology" == d && (c += "dermatovenereology<br/>"), "diagnostic_radiology" == d && (c += "diagnostic radiology<br/>"), "emergency" == d && (c += "emergency<br/>"), "endocrinology" == d && (c += "endocrinology<br/>"), "gastroenterological_surgery" == d && (c += "gastroenterological surgery<br/>"), "gastroenterology" == d && (c += "gastroenterology<br/>"), "geriatrics" == d && (c += "geriatrics<br/>"), "gynaecology" == d && (c += "gynaecology<br/>"), "haematology" == d && (c += "haematology<br/>"), "hepatology" == d && (c += "hepatology<br/>"), "immunology" == d && (c += "immunology<br/>"), "infectious_diseases" == d && (c += "infectious diseases<br/>"), "intensive" == d && (c += "intensive<br/>"), "internal" == d && (c += "internal<br/>"), "maxillofacial_surgery" == d && (c += "maxillofacial surgery<br/>"), "nephrology" == d && (c += "nephrology<br/>"), "neurology" == d && (c += "neurology<br/>"), "neurophysiology" == d && (c += "neurophysiology<br/>"), "neuropsychiatry" == d && (c += "neuropsychiatry<br/>"), "neurosurgery" == d && (c += "neurosurgery<br/>"), "nuclear" == d && (c += "nuclear<br/>"), "occupational" == d && (c += "occupational <br/>"), "oncology" == d && (c += "oncology<br/>"), "ophthalmology" == d && (c += "ophthalmology<br/>"), "orthopaedics" == d && (c += "orthopaedics<br/>"), "otolaryngology" == d && (c += "otolaryngology<br/>"), "paediatric_surgery" == d && (c += "paediatric surgery<br/>"), "paediatrics" == d && (c += "paediatrics<br/>"), "palliative" == d && (c += "palliative<br/>"), "physiatry" == d && (c += "physiatry<br/>"), "plastic_surgery" == d && (c += "plastic surgery<br/>"), "proctology" == d && (c += "proctology<br/>"), "psychiatry" == d && (c += "psychiatry<br/>"), "pulmonology" == d && (c += "pulmonology<br/>"), "radiology" == d && (c += "radiology<br/>"), "radiotherapy" == d && (c += "radiotherapy<br/>"), "rheumatology" == d && (c += "rheumatology<br/>"), "stomatology" == d && (c += "stomatology<br/>"), "surgery" == d && (c += "surgery<br/>"), "surgical_oncology" == d && (c += "surgical oncology<br/>"), "thoracic_surgery" == d && (c += "thoracic surgery<br/>"), "transplant" == d && (c += "transplant<br/>"), "trauma" == d && (c += "trauma<br/>"), "tropical" == d && (c += "tropical<br/>"), "urology" == d && (c += "urology<br/>"), "vascular_surgery" == d && (c += "vascular surgery<br/>"), "venereology" == d && (c += "venereology<br/>"), "acupuncture" == d && (c += "acupuncture<br/>"), "naturopathy" == d && (c += "naturopathy<br/>"), "chiropractic" == d && (c += "chiropractic <br/>"), "homeopathy" == d && (c += "homeopathy<br/>"), "osteopathy" == d && (c += "osteopathy<br/>"));
  "" != b.health_specialty && ("yes" == b["health_specialty:family_medicine"] && (c += "family medicine<br/>"), "yes" == b["health_specialty:emergency_medicine"] && (c += "emergency medicine<br/>"), "yes" == b["health_specialty:anaesthesiology"] && (c += "anaesthesiology<br/>"), "yes" == b["health_specialty:dermatology"] && (c += "dermatology<br/>"), "yes" == b["health_specialty:ear_nose_throat"] && (c += "ear, nose, throat (ENT specialist)<br/>"), "yes" == b["health_specialty:occupational_medicine"] && (c += "occupational medicine<br/>"), "yes" == b["health_specialty:internal_medicine"] && (c += "internal medicine<br/>"), "yes" == b["health_specialty:neurology"] && (c += "neurology<br/>"), "yes" == b["health_specialty:ophthalmology"] && (c += "ophthalmology<br/>"), "yes" == b["health_specialty:palliative_medicine"] && (c += "palliative medicine<br/>"), "yes" == b["health_specialty:psychiatry"] && (c += "psychiatry<br/>"), "yes" == b["health_specialty:gynaecology"] && (c += "gynaecology<br/>"), "yes" == b["health_specialty:urology"] && (c += "urology<br/>"), "yes" == b["health_specialty:pain_medicine"] && (c += "pain medicine<br/>"), "yes" == b["health_specialty:environmental_medicine"] && (c += "environmental medicine<br/>"), "yes" == b["health_specialty:intensive_care_medicin"] && (c += "intensive care medicin<br/>"), "yes" == b["health_specialty:paediatrics"] && (c += "paediatrics<br/>"), "yes" == b["health_specialty:physiatry"] && (c += "physiatry<br/>"), "yes" == b["health_specialty:radiology"] && (c += "radiology<br/>"), "yes" == b["health_specialty:general"] && (c += "general<br/>"), "yes" == b["health_specialty:occupational_therapy"] && (c += "occupational therapy<br/>"), "yes" == b["health_specialty:pulmonology"] && (c += "pulmonology<br/>"), "yes" == b["health_specialty:acupuncture"] && (c += "acupuncture<br/>"), "yes" == b["health_specialty:orthopaedics"] && (c += "orthopaedics<br/>"), "yes" == b["health_specialty:chiropractic"] && (c += "chiropractic<br/>"), "yes" == b["health_specialty:sports_medicine"] && (c += "sports medicine<br/>"));
  "" != c && (a = a + "subjects: " + ('<div class="c4g_open_text">' + c + "</div>"));
  return a;
}

function fnKraftwerkInfo(b) {
  var a = "";

  if (b["generator:method"]) {
    a += "method of generation: ";

    switch (b["generator:method"]) {
      case "combustion":
        a += "combustion";
        break;

      case "thermal":
        a += "thermal";
        break;

      case "pumping":
        a += "pumping";
        break;

      case "photovoltaic":
        a += "photovoltaic";
        break;

      case "gasification":
        a += "gasification";
        break;

      case "anaerobic_digestion":
        a += "anaerobic digestion";
        break;

      case "pyrolysis":
        a += "pyrolysis";
        break;

      case "fission":
        a += "fission";
        break;

      case "fusion":
        a += "fusion";
        break;

      default:
        a += "unknown<br/>";
    }

    a += "<br/>";
  }

  if (b.power_source) {
    a += "power source: ";

    switch (b.power_source) {
      case "photovoltaic":
        a += "photovoltaic";
        break;

      default:
        a += "unknown<br/>";
    }

    a += "<br/>";
  }

  b["generator:output:electricity"] && (a += "electricity generation: " + b["generator:output:electricity"] + "<br/>");
  b["generator:output:heat"] && (a += "heat generation: " + b["generator:output:heat"] + "<br/>");
  b["generator:output:cold"] && (a += "cold generation: " + b["generator:output:cold"] + "<br/>");
  b["generator:output"] && (a += "output: " + b["generator:output"] + "<br/>");
  b["generator:output:hot_air"] && (a += "hot-air generation: " + b["generator:output:hot_air"] + "<br/>");
  b["generator:output:cold_water"] && (a += "cold water generation: " + b["generator:output:cold_water"] + "<br/>");
  b["generator:output:cold_air"] && (a += "cold air generation: " + b["generator:output:cold_air"] + "<br/>");
  b["generator:output:compressed_air"] && (a += "compressed air generation: " + b["generator:output:compressed_air"] + "<br/>");
  b["generator:output:steam"] && (a += "steam generation: " + b["generator:output:steam"] + "<br/>");
  b["generator:output:vacuum"] && (a += "vacuum generation: " + b["generator:output:vacuum"] + "<br/>");
  b["generator:output:battery_charging"] && (a += "battery charging: " + b["generator:output:battery_charging"] + "<br/>");
  "PWR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "BWR-1" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "BWR-2" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "BWR-3" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "BWR-4" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "BWR-5" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "BWR-6" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "PHWR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "GCR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "FBR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "RBMK-1000" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "RBMK-1500" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "VVER" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "CANDU" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "CPR-1000" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "EPR" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "tokamak" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "stellarator" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "ICF" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "cold-fusion" == b["generator:type"] && (a += "generator type: " + b["generator:type"] + "<br/>");
  "wind_turbine" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "generator method: horizontal axis wind turbine<br/>");
  "wind_turbine" == b["generator:method"] && "vertical_axis" == b["generator:type"] && (a += "generator method: vertical axis wind turbine<br/>");
  "francis_turbine" == b["generator:type"] && (a += "generator type: francis-turbine<br/>");
  "kaplan_turbine" == b["generator:type"] && (a += "generator type: kaplan-turbine<br/>");
  "pelton_turbine" == b["generator:type"] && (a += "generator type: pelton-turbine<br/>");
  "stream" == b["generator:method"] && "horizontal_axis" == b["generator:type"] && (a += "generator method: horizontal axis sea current power station<br/>");
  "stream" == b["generator:method"] && "vertical_axis" == b["generator:type"] && (a += "generator type: vertical axis sea current power station<br/>");
  "steam_turbine" == b["generator:type"] && (a += "generator type: steam turbine<br/>");
  "heat_pump" == b["generator:type"] && (a += "generator type: heat pump<br/>");
  "solar_thermal_collector" == b["generator:type"] && (a += "generator type: solar thermal collector<br/>");
  "solar_photovoltaic_panel" == b["generator:type"] && (a += "generator type: solar photovoltaic panel<br/>");
  "steam_generator" == b["generator:type"] && (a += "generator type: steam generator<br/>");
  "gas_turbine" == b["generator:type"] && (a += "generator type: gas turbine<br/>");
  "combined_cycle" == b["generator:type"] && (a += "generator type: combined cycle<br/>");
  "reciprocating_engine" == b["generator:type"] && (a += "generator type: reciprocating engine<br/>");
  return a;
}

function fnWertstoffinfo(b) {
  var a = "";
  if ("container" == b.recycling_type || "centre" == b.recycling_type || "recycling" == b.amenity) "yes" == b["recycling:glass"] && (a += "glass container</br>"), "yes" == b["recycling:shoes"] && (a += "shoe container</br>"), "yes" == b["recycling:cooking_oil"] && (a += "recycling of cooking oil</br>"), "yes" == b["recycling:paper"] && (a += "recycling of paper</br>"), "yes" == b["recycling:engine_oil"] && (a += "recycling of engine oil</br>"), "yes" == b["recycling:clothes"] && (a += "recycling of clothes</br>"), "yes" == b["recycling:car_batteries"] && (a += "recycling of car batteries</br>"), "yes" == b["recycling:cans"] && (a += "recycling of cans</br>"), "yes" == b["recycling:scrap_metal"] && (a += "recycling of scrap metal</br>"), "yes" == b["recycling:plastic"] && (a += "recycling of plastic</br>"), "yes" == b["recycling:batterries"] && (a += "recycling of batterries</br>"), "yes" == b["recycling:plastic_bottles"] && (a += "recycling of plastic bottles</br>"), "yes" == b["recycling:green_waste"] && (a += "recycling of green waste</br>"), "yes" == b["recycling:hardcore"] && (a += "recycling of hardcore</br>");
  return a;
}

var fnContentGeneralInformations = function fnContentGeneralInformations(b) {
  var a = "";
  b.width && (a += "width: " + b.width + " m<br/>");
  b.height && (a += "height: " + b.height + " m<br/>");
  b.maxwidth && (a += "maxwidth: " + b.maxwidth + " m<br/>");
  b.maxheight && (a += "maxheight: " + b.maxheight + " m<br/>");
  b.maxweight && (a += "maxweight: " + b.maxweight + " t<br/>");
  b.maxspeed && (a += "maxspeed: " + b.maxspeed + " km/h<br/>");
  b.min_age && (a += "minimum age: " + b.min_age + "<br/>");
  b.max_age && (a += "maximum age: " + b.max_age + "<br/>");
  "yes" == b.nudism && (a += "nudism<br/>");
  "yes" == b.ruins && (a += "ruins<br/>");
  b.ele && (a += "height above sea level: " + b.ele + " m<br/>");
  b["xmas:day_date"] && (a += "period from - till: " + b["xmas:day_date"] + "<br/>");
  b["rotor:diameter"] && (a += "diameter of rotor: " + b["rotor:diameter"] + " m<br/>");
  b["xmas:note"] && (a += "information: " + b["xmas:note"] + "<br/>");
  "port" == b["seamark:beacon_lateral:category"] && (a += "port<br/>");
  "starboard" == b["seamark:beacon_lateral:category"] && (a += "starboard<br/>");
  "yes" == b["service:bicycle:retail"] && (a += "retail bicycles<br/>");
  "yes" == b["service:bicycle:repair"] && (a += "repair bicycles<br/>");
  "yes" == b["service:bicycle:rental"] && (a += "rental bicycles<br/>");
  "yes" == b["service:bicycle:pump"] && (a += "use of a pump is possible<br/>");
  "yes" == b["service:bicycle:diy"] && (a += "diy is possible<br/>");
  "yes" == b["service:bicycle:cleaning"] && (a += "cleaning bicycles<br/>");
  "yes" == b["service:bicycle:second_hand"] && (a += "sale of second hand bicycles<br/>");
  "yes" == b["service:bicycle:charging"] && (a += "charging electric bikes is possible<br/>");
  "yes" == b.cafe && (a += "cafe<br/>");
  "yes" == b.breakfast && (a += "breakfast<br/>");
  "yes" == b.snack && (a += "snack<br/>");
  "yes" == b.indoor_seating && (a += "indoor seating<br/>");
  "yes" == b.outdoor_seating && (a += "outdoor seating<br/>");
  "yes" == b.self_service && (a += "self service<br/>");
  "yes" == b.bakehouse && (a += "bakehouse<br/>");
  "yes" == b.pastry_shop && (a += "pastry shop<br/>");
  "yes" == b.fair_trade && (a += "fair trade<br/>");
  "only" == b.fair_trade && (a += "only fair trade<br/>");
  "no" == b.fair_trade && (a += "no fair trade<br/>");
  return a;
},
    fnContentHealthcare = function fnContentHealthcare(b) {
  var a = "";
  if ("doctors" == b.amenity || "physician" == b.office || "doctor" == b.healthcare) a += fnArztInfo(b), b.medical_area && (a += b.medical_area + "<br/>"), b.type && (a += b.type + "<br/>"), b["doctors:de"] && (a += b["doctors:de"] + "<br/>"), b["note:de"] && (a += b["note:de"] + "<br/>");
  "yes" == b.dispensing && (a += "pharmacy with dispensing<br/>");
  "abused" == b["social_facility:for"] && (a += "social facility for: abused people<br/>");
  "child" == b["social_facility:for"] && (a += "social facility for: children<br/>");
  "disabled" == b["social_facility:for"] && (a += "social facility for: disabled people<br/>");
  "diseased" == b["social_facility:for"] && (a += "social facility for: diseased people<br/>");
  "drug_addicted" == b["social_facility:for"] && (a += "social facility for: drug addicted people<br/>");
  "homeless" == b["social_facility:for"] && (a += "social facility for: homeless<br/>");
  "juvenile" == b["social_facility:for"] && (a += "social facility for: juvenile and teenager<br/>");
  "mental_health" == b["social_facility:for"] && (a += "social facility for: people with mental health problems<br/>");
  "migrant" == b["social_facility:for"] && (a += "social facility for: migrants<br/>");
  "orphan" == b["social_facility:for"] && (a += "social facility for: orphans<br/>");
  "senior" == b["social_facility:for"] && (a += "social facility for: seniors<br/>");
  "underprivileged" == b["social_facility:for"] && (a += "social facility for: underprivileged people<br/>");
  "unemployed" == b["social_facility:for"] && (a += "social facility for: unemployed<br/>");
  "victim" == b["social_facility:for"] && (a += "social facility for: victims<br/>");
  return a;
};

function fnAdditionalBuildingInfos(b) {
  var a = "";
  b["building:color"] && (a += "building color: " + b["building:color"] + "</br>");
  b["building:height"] && (a += "building height: " + b["building:height"] + " m</br>");
  b["building:level"] && (a += "level: " + b["building:level"] + "</br>");
  b["building:part"] && (a += "building part: " + b["building:part"] + "</br>");
  b["roof:color"] && (a += "roof color: " + b["roof:colour"] + "</br>");
  b["roof:shape"] && (a += "roof shape: " + b["roof:shape"] + "</br>");
  b["roof:height"] && (a += "roof height: " + b["roof:height"] + " m</br>");
  b["roof:material"] && (a += "roof material: " + b["roof:material"] + " </br>");
  b["roof:orientation"] && (a += "roof orientation: " + b["roof:orientation"] + " </br>");
  b["roof:direction"] && (a += "roof direction: " + b["roof:direction"] + " </br>");
  b["building:type"] && (a += "building type: " + b["building:type"] + "</br>");
  return a;
}

function fnSicherheitAdditional(b) {
  var a = "";
  "surveillance" == b.man_made && ("indoor" == b.surveillance && (a += "indoor surveillance"), "outdoor" == b.surveillance && (a += "outdoor surveillance"), "public" == b.surveillance && (a += "public surveillance"), "camera" == b["surveillance:type"] && (a += "type of surveillance: camera"), "guard" == b["surveillance:type"] && (a += "type of surveillance: guard"), "ALPR" == b["surveillance:type"] && (a += "type of surveillance: ALPR"), "town" == b["surveillance:zone"] && (a += "zone of surveillance: town"), "parking" == b["surveillance:zone"] && (a += "zone of surveillance: parking"), "traffic" == b["surveillance:zone"] && (a += "zone of surveillance: traffic"), "shop" == b["surveillance:zone"] && (a += "zone of surveillance: shop"), "bank" == b["surveillance:zone"] && (a += "zone of surveillance: bank"), "building" == b["surveillance:zone"] && (a += "zone of surveillance: building"));
  return a;
}

function fnWreckInfo(b) {
  var a = "";
  "wreck" == b.historic && (b["wreck:date_sunk"] && (a += "sunk: " + b["wreck:date_sunk"] + "<br/>"), b["wreck:depth"] && (a += "depth: " + b["wreck:depth"] + "<br/>"), b["wreck:clearance"] && (a += "clearance: " + b["wreck:clearance"] + "<br/>"), b["wreck:date_commissioned"] && (a += "commissioned: " + b["wreck:date_commissioned"] + "<br/>"), b["wreck:gross_tonnage"] && (a += "gross tonnage: " + b["wreck:gross_tonnage"] + "<br/>"), b["wreck:length"] && (a += "length: " + b["wreck:length"] + "<br/>"), b["wreck:width"] && (a += "width: " + b["wreck:width"] + "<br/>"), b["wreck:cargo"] && (a = "timber" == b["wreck:cargo"] ? a + "cargo: timber<br/>" : "coal" == b["wreck:cargo"] ? a + "cargo: coal<br/>" : a + ("cargo: " + b["wreck:cargo"] + "<br/>")), "yes" == b["wreck:visible_at_low_tide"] && (a += "visible at low tide: yes<br/>"), "no" == b["wreck:visible_at_low_tide"] && (a += "visible at low tide: no<br/>"), "yes" == b["wreck:visible_at_high_tide"] && (a += "visible at high tide: yes<br/>"), "no" == b["wreck:visible_at_high_tide"] && (a += "visible at high tide: no<br/>"), "yes" == b.access && (a += "accessible<br/>"), "no" == b.access && (a += "no access possible<br/>"), "permit_required" == b.access && (a += "permit required for acces<br/>"));
  return a;
}

function fnKlosterAdditional(b) {
  var a = "";
  if (b["monastery:type"]) switch (b["monastery:type"]) {
    case "monastery":
      a += "type: monastery<br/>";
      break;

    case "convent":
      a += "type: convent<br/>";
      break;

    case "canonry":
      a += "type: canonry<br/>";
      break;

    case "commandry":
      a += "type: commandry<br/>";
      break;

    case "hermitage":
      a += "type: hermitage<br/>";
      break;

    default:
      a += "type: unknown<br/>";
  }
  b["community:gender"] && ("male" == b["community:gender"] && (a += "gender: male<br/>"), "female" == b["community:gender"] && (a += "gender: female<br/>"));
  b.religious_rank && ("abbey" == b.religious_rank ? a += "religious rank: abbey<br/>" : "abbey" == b.religious_rank && (a += "religious rank: abbey<br/>"));
  "yes" == b.shrine && (a += "feature: shrine<br/>");
  "yes" == b.sanctuary && (a += "feature: sanctuary<br/>");
  if (b.religion) switch (b.religion) {
    case "animist":
      a += "religion: animist<br/><br/>";
      break;

    case "bahai":
      a += "religion: bahai<br/>";
      break;

    case "buddhist":
      a += "religion: buddhist<br/>";
      break;

    case "christian":
      a += "religion: christian<br/>";
      break;

    case "hindu":
      a += "religion: hindu<br/>";
      break;

    case "IglesiaNiCristo":
      a += "religion: IglesiaNiCristo<br/>";
      break;

    case "jain":
      a += "religion: jain<br/>";
      break;

    case "jewish":
      a += "religion: jewish<br/>";
      break;

    case "multifaith":
      a += "religion: multifaith<br/>";
      break;

    case "muslim":
      a += "religion: muslim<br/>";
      type += "Mosque<br/>";
      break;

    case "pagan":
      a += "religion: pagan<br/>";
      break;

    case "pastafarian":
      a += "religion: pastafarian<br/>";
      break;

    case "scientologist":
      a += "religion: scientologist<br/>";
      break;

    case "shinto":
      a += "religion: shinto<br/>";
      break;

    case "sikh":
      a += "religion: sikh<br/>";
      break;

    case "spiritualist":
      a += "religion: spiritualist<br/>";
      break;

    case "taoist":
      a += "religion: taoist<br/>";
      break;

    case "unitarian":
      a += "religion: unitarian<br/>";
      break;

    case "yazidi":
      a += "religion: yazidi<br/>";
      break;

    case "zoroastrian":
      a += "eligion: zoroastrian<br/>";
      break;

    default:
      a += "religion: unknown<br/>";
  }
  if (b.denomination) switch (b.denomination) {
    case "anglican":
      a += "denomination: Anglican<br/><br/>";
      break;

    case "baptist":
      a += "denomination: Baptist<br/>";
      break;

    case "catholic":
      a += "denomination: Catholic<br/>";
      break;

    case "roman_catholic":
      a += "denomination: Roman Catholic<br/>";
      break;

    case "old_catholic":
      a += "denomination: Old Catholic<br/>";
      break;

    case "greek_catholic":
      a += "denomination: Greek Catholic<br/>";
      break;

    case "evangelical":
      a += "denomination: Evangelical";

    case "jehovahs_witness":
      a += "denomination: Jehovahs Witness<br/>";
      break;

    case "lutheran":
      a += "denomination: Lutheran<br/>";
      break;

    case "mennonite":
      a += "denomination: Mennonite<br/>";
      break;

    case "messianic_jewish":
      a += "denomination: Messianic Jewish<br/>";
      break;

    case "methodist":
      a += "denomination: Methodist<br/>";
      break;

    case "mormon":
      a += "denomination: Mormon<br/>";
      break;

    case "new_apostolic":
      a += "denomination: New Apostolic<br/>";
      break;

    case "orthodox":
      a += "denomination: Orthodox<br/>";
      break;

    case "greek_orthodox":
      a += "denomination: Greek Orthodox<br/>";
      break;

    case "coptic_orthodox":
      a += "denomination: coptic orthodox<br/>";
      break;

    case "pentecostal":
      a += "denomination: pentecostal<br/>";
      break;

    case "presbyterian":
      a += "denomination: Presbyterian<br/>";
      break;

    case "protestant":
      a += "denomination: Protestant<br/>";
      break;

    case "quaker":
      a += "denomination: Quaker<br/>";
      break;

    case "reformed":
      a += "denomination: Reformed<br/>";
      break;

    case "russian_orthodox":
      a += "denomination: Russian-Orthodox<br/>";
      break;

    case "seventh_day_adventist":
      a += "denomination: Seventh Day Adventist<br/>";
      break;

    case "christian_community":
      a += "denomination: Christian Community<br/>";
      break;

    case "adventist":
      a += "denomination: Adventist<br/>";
      break;

    case "alliance":
      a += "denomination: Alliance<br/>";
      break;

    case "assemblies_of_god":
      a += "denomination: Assemblies of God<br/>";
      break;

    case "apostolic":
      a += "denomination: Apostolic<br/>";
      break;

    case "armenian_apostolic":
      a += "denomination: Armenian Apostolic<br/>";
      break;

    case "assyrian":
      a += "denomination: Assyrian<br/>";
      break;

    case "christ_scientist":
      a += "denomination: Christ Scientist<br/>";
      break;

    case "church_of_scotland":
      a += "denomination: Church of Scotland<br/>";
      break;

    case "czechoslovak_hussite":
      a += "denomination: Czechoslovak Hussite<br/>";
      break;

    case "dutch_reformed":
      a += "denomination: Dutch Reformed<br/>";
      break;

    case "exclusive_brethren":
      a += "denomination: Exclusive Brethren<br/>";
      break;

    case "foursquare":
      a += "denomination: Foursquare<br/>";
      break;

    case "kimbanguist":
      a += "denomination: Kimbanguist<br/>";
      break;

    case "living_waters_church":
      a += "denomination: Living Waters Church<br/>";
      break;

    case "mariavite":
      a += "denomination: Mariavite<br/>";
      break;

    case "maronite":
      a += "denomination: Maronite<br/>";
      break;

    case "moravian":
      a += "denomination: Moravian<br/>";
      break;

    case "nazarene":
      a += "denomination: Nazarene<br/>";
      break;

    case "nondenominational":
      a += "denomination: Nondenominational<br/>";
      break;

    case "old_believers":
      a += "denomination: Old Believers<br/>";
      break;

    case "polish_catholic":
      a += "denomination: Polish-Catholic<br/>";
      break;

    case "salvation_army":
      a += "denomination: Salvation Army<br/>";
      break;

    case "santo_daime":
      a += "denomination: Santo Daime<br/>";
      break;

    case "serbian_orthodox":
      a += "denomination: Serbisch-Orthodox<br/>";
      break;

    case "spiritism":
      a += "denomination: Spiritism<br/>";
      break;

    case "united":
      a += "denomination: United<br/>";
      break;

    case "united_church_of_christ":
      a += "denomination: United Church of Christ<br/>";
      break;

    case "united_free_church_of_scotland":
      a += "denomination: United Free Church of Scotland<br/>";
      break;

    case "united_methodist":
      a += "denomination: United Methodist<br/>";
      break;

    case "united_reformed":
      a += "denomination: United Reformed<br/>";
      break;

    case "uniting":
      a += "denomination: Uniting<br/>";
      break;

    case "church_of_sweden":
      a += "denomination: Church of Sweden<br/>";
      break;

    case "mission_covenant_church_of_sweden":
      a += "denomination: Mission Covenant Church Of Sweden<br/>";
      break;

    case "alternative":
      a += "denomination: alternative<br/>";
      break;

    case "ashkenazi":
      a += "denomination: ashkenazi<br/>";
      break;

    case "buchari":
      a += "denomination: buchari<br/>";
      break;

    case "conservative":
      a += "denomination: conservative<br/>";
      break;

    case "egalitarian":
      a += "denomination: egalitarian<br/>";
      break;

    case "hasidic":
      a += "denomination: hasidic<br/>";
      break;

    case "humanistic":
      a += "denomination: humanistic<br/>";
      break;

    case "kabbalah":
      a += "denomination: kabbalah<br/>";
      break;

    case "kabbalistic":
      a += "denomination: kabbalistic<br/>";
      break;

    case "karaite":
      a += "denomination: karaite<br/>";
      break;

    case "liberal":
      a += "denomination: liberal<br/>";
      break;

    case "lubavitch":
      a += "denomination: lubavitch<br/>";
      break;

    case "lubavitch_messianic":
      a += "denomination: lubavitch messianic<br/>";
      break;

    case "mizrachi_baghdadi":
      a += "denomination: mizrachi baghdadi<br/>";
      break;

    case "mizrachi_chida":
      a += "denomination: mizrachi chida<br/>";
      break;

    case "mizrachi_jerusalemite":
      a += "denomination: mizrachi jerusalemite<br/>";
      break;

    case "mizrachi_livorno":
      a += "denomination: mizrachi livorno<br/>";
      break;

    case "mizrachi_moroccan":
      a += "denomination: mizrachi moroccan<br/>";
      break;

    case "modern_orthodox":
      a += "denomination: modern orthodox<br/>";
      break;

    case "neo_orthodox":
      a += "denomination: neo orthodox<br/>";
      break;

    case "nondenominational":
      a += "denomination: nondenominational<br/>";
      break;

    case "orthodox":
      a += "denomination: orthodox<br/>";
      break;

    case "orthodox_ashkenaz":
      a += "denomination: orthodox ashkenaz<br/>";
      break;

    case "orthodox_sefard":
      a += "denomination: orthodox sefard<br/>";
      break;

    case "progressive":
      a += "denomination: progressive<br/>";
      break;

    case "reconstructionist":
      a += "denomination: reconstructionist<br/>";
      break;

    case "reform":
      a += "denomination: reform<br/>";
      break;

    case "renewal":
      a += "denomination: renewal<br/>";
      break;

    case "samaritan":
      a += "denomination: samaritan<br/>";
      break;

    case "sefardi":
      a += "denomination: sefardi<br/>";
      break;

    case "sefardi_amsterdam":
      a += "denomination: sefardi amsterdam<br/>";
      break;

    case "sefardi_london":
      a += "denomination: sefardi london<br/>";
      break;

    case "traditional":
      a += "denomination: traditional<br/>";
      break;

    case "ultra_orthodox":
      a += "denomination: ultra orthodox<br/>";
      break;

    case "unaffiliated":
      a += "denomination: unaffiliated<br/>";
      break;

    case "yemenite":
      a += "denomination: yemenite<br/>";
      break;

    case "yemenite_baladi":
      a += "denomination: yemenite baladi<br/>";
      break;

    case "yemenite_shami":
      a += "denomination: yemenite shami<br/>";
      break;

    case "ahmadiya":
      a += "denomination: ahmadiya<br/>";
      break;

    case "alaouite":
      a += "denomination: alaouite<br/>";
      break;

    case "druze":
      a += "denomination: druze<br/>";
      break;

    case "ibadi":
      a += "denomination: ibadi<br/>";
      break;

    case "ismaili":
      a += "denomination: ismaili<br/>";
      break;

    case "shia":
      a += "denomination: shia<br/>";
      break;

    case "sunni":
      a += "denomination: sunni<br/>";
      break;

    case "nichiren":
      a += "denomination: nichiren<br/>";
      break;

    case "jodo_shinshu":
      a += "denomination: jodo shinshu<br/>";
      break;

    case "jodo_shu":
      a += "denomination: jodo shu<br/>";
      break;

    case "vajrayana":
      a += "denomination: vajrayana<br/>";
      break;

    case "shingon_shu":
      a += "denomination: shingon shu<br/>";
      break;

    case "zen":
      a += "denomination: zen<br/>";
      break;

    case "thai_mahanikaya":
      a += "denomination: thai mahanikaya<br/>";
      break;

    case "thai_thammayut":
      a += "denomination: thai thammayut<br/>";
      break;

    case "asatru":
      a += "denomination: asatru<br/>";
      break;

    case "celtic":
      a += "denomination: celtic<br/>";
      break;

    case "greco_roman":
      a += "denomination: greco roman<br/>";
      break;

    case "wicca":
      a += "denomination: wicca<br/>";
      break;

    case "irani":
      a += "denomination: irani<br/>";
      break;

    case "parsi":
      a += "denomination: parsi<br/>";
      break;

    default:
      a += "unknown<br/>";
  }
  if (b.community) switch (b.community) {
    case "AA":
      a += "community (AA): Augustinians of the Assumption <br/>";
      break;

    case "BSCM":
      a += "community (BSCM): Adorers of the Sacred Heart of Jesus of Montmartre <br/>";
      break;

    case "CBMV":
      a += "community (CBMV): Augustiner-Chorfrauen B.M.V.<br/>";
      break;

    case "CO":
      a += "community (CO): Oratorians<br/>";
      break;

    case "CMC":
      a += "community (CMC): Congregation of the Mother Co-Redemptrix<br/>";
      break;

    case "CRSP":
      a += "community (CRSP): Kongregation der Regularkleriker vom hl. Paulus (Barnabiten)<br/>";
      break;

    case "CSJ":
      a += "community (CSJ): Carmel Saint-Joseph<br/>";
      break;

    case "CSSP":
      a += "community (CSSP): Congr\xE9gation du Saint-Esprit<br/>";
      break;

    case "CSSR":
      a += "community (CSSR): Congr\xE9gation du Tr\xE8s Saint R\xE9dempteur<br/>";
      break;

    case "FCJM":
      a += "community (FCJM): Franciscan Sisters, Daughters of the Sacred Heart of Jesus and Mary<br/>";
      break;

    case "FMGB":
      a += "community (FMGB): Suore Francescane Missionarie di Ges\xF9 Bambino<br/>";
      break;

    case "FMH":
      a += "community(FMH): Congregatio Filiarum Mariae Sanctissimae ab Horto<br/>";
      break;

    case "FMM":
      a += "community (FMM): Franciscaines missionnaires de Marie<br/>";
      break;

    case "FSC":
      a += "community (FSC): Fr\xE8res des \xC9coles chr\xE9tiennes<br/>";
      break;

    case "MCCI":
      a += "community (MCCI): Missionnaires comboniens du Sacr\xE9-C\u0153ur<br/>";
      break;

    case "MSFS":
      a += "community (MSFS): Missionnaires de Saint Fran\xE7ois de Sales<br/>";
      break;

    case "OCart":
      a += "community (OCart): Order of the Carthusians<br/>";
      break;

    case "OCC":
      a += "community (OCC): Ordre de Notre Dame du Mont-Carmel<br/>";
      break;

    case "OCD":
      a += "community (OCD): Ordre des Carmes d\xE9chaux<br/>";
      break;

    case "OCSO":
      a += "community (OCSO): Trappists (lat. Ordo Cisterciensis Strictioris Observantiae)<br/>";
      break;

    case "OFM":
      a += "community (OFM): Ordre des Fr\xE8res Mineurs (Franziskaner)<br/>";
      break;

    case "OFMCap":
      a += "community (OFMCap): Ordre des Fr\xE8res Mineurs Capucins<br/>";
      break;

    case "OFMConv":
      a += "community (OFMConv): Ordre des Fr\xE8res Mineurs Conventuels<br/>";
      break;

    case "OFS":
      a += "community (OFS): Franciscans secular Third Order<br/>";
      break;

    case "OMI":
      a += "community (OMI): Oblats de Marie<br/>";
      break;

    case "OP":
      a += "community (OP): Ordre des Fr\xE8res Pr\xEAcheurs<br/>";
      break;

    case "OPraem":
      a += "community (OPraem): Ordre des chanoines r\xE9guliers de Pr\xE9montr\xE9<br/>";
      break;

    case "OSB":
      a += "community (OSB): Order of Saint Benedict<br/>";
      break;

    case "OSC":
      a += "community (OSC): Ordre de Sainte-Claire ou Ordre des Pauvres Dames<br/>";
      break;

    case "OSSS":
      a += "community (OSSS): Ordre de Sainte-Brigitte<br/>";
      break;

    case "OVM":
      a += "community (OVM): Order of the Visitation of Holy Mary (Salesianerinnen)<br/>";
      break;

    case "PSDP":
      a += "community (PSDP): Petites s\u0153urs des pauvres (Kleinen Schwestern der Armen)<br/>";
      break;

    case "PFJ":
      a += "community (PFJ): Petits Fr\xE8res de J\xE9sus<br/>";
      break;

    case "SDB":
      a += "community (SDB): Soci\xE9t\xE9 de Saint Fran\xE7ois de Sales<br/>";
      break;

    case "SJ":
      a += "community (SJ): Compagnie de J\xE9sus<br/>";
      break;

    case "SOC":
      a += "community (SOC): Order of Cistercians<br/>";
      break;

    case "SSCC":
      a += "community (SSCC): Congregation of the Sacred Hearts of Jesus and Mary<br/>";
      break;

    case "SSF":
      a += "community (SSF): Society of St Francis<br/>";
      break;

    case "SSJE":
      a += "community (SSJE): Society of St John the Evangelist<br/>";
      break;

    case "SSpS":
      a += "community (SSpS): Steyler Missionsschwestern<br/>";
      break;

    case "TOR":
      a += "community (TOR): Terzo Ordine Regolare di San Francesco<br/>";
      break;

    default:
      a += "unknown<br/>";
  }
  return a;
}

var fnTestInfoPopup = function fnTestInfoPopup(b) {
  b = b.getProperties();
  var a = "",
      c;

  for (c in b) {
    a = a + c + "=" + b[c] + "<br/>";
  }

  return '<div class="c4g_popup_text" style="width:300px;">' + a + "</div>";
};

/***/ }),

/***/ "./Resources/public/js/c4g-maps-proxy.js":
/*!***********************************************!*\
  !*** ./Resources/public/js/c4g-maps-proxy.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MapProxy = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _c4gBaselayerController = __webpack_require__(/*! ./c4g-baselayer-controller */ "./Resources/public/js/c4g-baselayer-controller.js");

var _c4gLayerController = __webpack_require__(/*! ./c4g-layer-controller */ "./Resources/public/js/c4g-layer-controller.js");

var _c4gLocationstyleController = __webpack_require__(/*! ./c4g-locationstyle-controller */ "./Resources/public/js/c4g-locationstyle-controller.js");

var _c4gPopupController = __webpack_require__(/*! ./c4g-popup-controller */ "./Resources/public/js/c4g-popup-controller.js");

var _c4gMapsUtils = __webpack_require__(/*! ./c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");

var _c4gMapsConstant = __webpack_require__(/*! ./c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");

var _c4gMapsI18n = __webpack_require__(/*! ./c4g-maps-i18n */ "./Resources/public/js/c4g-maps-i18n.js");

var _layer = __webpack_require__(/*! ol/layer */ "./node_modules/ol/layer.js");

var _geom = __webpack_require__(/*! ol/geom */ "./node_modules/ol/geom.js");

var _proj = __webpack_require__(/*! ol/proj */ "./node_modules/ol/proj.js");

var _style = __webpack_require__(/*! ol/style */ "./node_modules/ol/style.js");

var _ol = __webpack_require__(/*! ol */ "./node_modules/ol/index.js");

var _source = __webpack_require__(/*! ol/source */ "./node_modules/ol/source.js");

var langConstants = {};

var MapProxy = /*#__PURE__*/function () {
  function MapProxy(options) {
    (0, _classCallCheck2["default"])(this, MapProxy);
    var mapData;
    this.options = jQuery.extend({
      mapController: false
    }, options);

    if (!this.options.mapController) {
      return false;
    } // c4g.maps.editorStyles = c4g.maps.editorStyles || {};
    //window.c4gMapsHooks.proxy_fillPopup = [];


    this.hook_baselayer_loaded = [];
    this.hook_baselayer_visibility = [];
    this.hook_layer_loaded = [];
    this.hook_layer_visibility = [];
    this.hook_map_click = [];
    this.hook_map_zoom = [];
    this.hook_locstyles_loaded = []; // add global hook for accessibility when there is no proxy reference

    window.c4gMapsHooks = window.c4gMapsHooks || {};
    window.c4gMapsHooks.proxy_layer_loaded = window.c4gMapsHooks.proxy_layer_loaded || [];
    window.c4gMapsHooks.proxy_layer_drawn = window.c4gMapsHooks.proxy_layer_drawn || [];
    window.c4gMapsHooks.proxy_baselayer_loaded = window.c4gMapsHooks.proxy_baselayer_loaded || [];
    this.baselayerIds = [];
    this.activeBaselayerId = undefined;
    this.layerIds = [];
    this.activeLayerIds = {};
    this.requestFunctions = {};
    this.request = {};
    this.baselayers_loaded = false;
    this.layers_loaded = false;
    mapData = this.options.mapController.data;
    langConstants = (0, _c4gMapsI18n.getLanguage)(mapData);
    this.mapData = mapData;
    this.mapId = mapData.id;
    this.api_baselayer_url = this.options.mapController.data.api.baselayer + '/' + mapData.profile + '/' + this.mapData.lang;
    this.api_layer_url = this.options.mapController.data.api.layer + '/' + this.mapId + '/' + this.mapData.lang;
    this.api_layercontent_url = this.options.mapController.data.api.layercontent; //this.api_layercontentdata_url = this.options.mapController.data.api.layercontentdata;

    this.api_layercontentdata_url = "con4gis/layerContentDataService";
    this.api_locstyle_url = this.options.mapController.data.api.locstyle;
    this.api_infowindow_url = this.options.mapController.data.api.infowindow;
    this.options = options;
    this.clickObserverActive = true; // this.initialize();
  }

  (0, _createClass2["default"])(MapProxy, [{
    key: "initialize",
    value: function initialize() {
      var self, map;
      self = this;
      map = this.options.mapController.map;
      this.baselayerController = new _c4gBaselayerController.C4gBaselayerController(this);
      this.baselayerController.loadBaseLayers();
      this.layerController = new _c4gLayerController.BetterLayerController(this);
      this.layerController.loadLayers();
      this.locationStyleController = new _c4gLocationstyleController.C4gLocationStyleController(this);
      this.popupController = new _c4gPopupController.C4gPopupController(this);
      this.popupController.addPopUp(); //TODO check this, nearly the same as below

      map.on('change:view', function () {
        // zoom-observer
        //
        map.getView().on('change:resolution', function () {
          var layerId, layer; // check layer zoom-bounds
          // @TODO: Use "self.activeLayerIds = false" ?

          for (layerId in self.activeLayerIds) {
            if (self.activeLayerIds.hasOwnProperty(layerId)) {
              layer = self.layerController.arrLayers[layerId]; // if (self.checkLayerIsActiveForZoom(layerId)) {
              //   if (layer.isInactive) {
              //     self.layerController.showLayer(layerId);
              //   }
              // } else {
              //   self.layerController.hideLayer(layerId, true);
              // }
            }
          } // hooks


          _c4gMapsUtils.utils.callHookFunctions(self.hook_map_zoom, self);

          if (self.options.mapController.data.caching && map.getView().getZoom()) {
            _c4gMapsUtils.utils.storeValue('zoom', map.getView().getZoom());
          }
        }); // end of "zoom-observer"
      }); // end of "zoom-observer"
      // zoom-observer
      //

      map.getView().on('change:resolution', function () {
        var layerId, layer; // check layer zoom-bounds
        // @TODO: Use "self.activeLayerIds = false" ?

        for (layerId in self.activeLayerIds) {
          if (self.activeLayerIds.hasOwnProperty(layerId)) {
            layer = self.layerController.arrLayers[layerId]; // if (self.checkLayerIsActiveForZoom(layerId)) {
            //   if (layer.isInactive) {
            //     self.layerController.showLayer(layerId);
            //   }
            // } else {
            //   self.layerController.hideLayer(layerId, true);
            // }
          }
        } // hooks


        _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.hook_map_zoom, self);

        if (self.options.mapController.data.caching && map.getView().getZoom()) {
          _c4gMapsUtils.utils.storeValue('zoom', map.getView().getZoom());
        }
      }); // end of "zoom-observer"

      map.getView().on('change:center', function (evt) {
        if (self.options.mapController.data.caching) {
          var coordinate = (0, _proj.toLonLat)(map.getView().getCenter());

          if (coordinate) {
            _c4gMapsUtils.utils.storeValue('lon', coordinate[0]);

            _c4gMapsUtils.utils.storeValue('lat', coordinate[1]);
          }
        }

        window.c4gMapsHooks.map_center_changed = window.c4gMapsHooks.map_center_changed || [];

        _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.map_center_changed, map.getView().getCenter());
      }); // end of "center-observer"
      // click-observer
      //

      map.on('click', function (clickEvent) {
        var feature, fFeatures, layer, popupInfos, currentZoom, minZoom, newCenter, geometry, coord, setPopup, styleFunc, styleCluster, objPopup;

        if (!self.clickObserverActive) {
          return false;
        }

        feature = map.forEachFeatureAtPixel(clickEvent.pixel, function (feature, layer) {
          return feature;
        });
        layer = map.forEachFeatureAtPixel(clickEvent.pixel, function (feature, layer) {
          return layer;
        });

        if (layer && layer.getStyle()) {
          styleFunc = layer.getStyle();

          if (typeof styleFunc === "function" && styleFunc(feature, currentZoom) && styleFunc(feature, currentZoom)['0']) {
            styleCluster = styleFunc(feature, currentZoom)['0'].clone();

            if (styleCluster && styleCluster.getImage()) {
              styleCluster.getImage().setScale(styleCluster.getImage().getScale() * 0.7);
            }
          }
        }

        fFeatures = feature ? feature.get('features') : false;

        if (!(fFeatures && fFeatures.length === 1)) {
          // cluster multiple POI
          if (fFeatures) {
            if (fFeatures[0].get('cluster_popup') == 1) {
              map.getView().setCenter(clickEvent.coordinate);
              currentZoom = map.getView().getZoom();
              minZoom = self.options.mapController.data.cluster_all ? self.options.mapController.data.cluster_zoom : fFeatures['0'].get('cluster_zoom');

              if (currentZoom >= minZoom) {
                setPopup = [];
                setPopup.content = '';
                setPopup.async = false;

                for (var i = 0; i < fFeatures.length; i++) {
                  if (fFeatures[i].get && fFeatures[i].get('popup') && fFeatures[i].get('popup').content) {
                    setPopup.content = setPopup.content.concat(fFeatures[i].get('popup').content);
                  }
                }

                feature = fFeatures[0].clone();
                feature.set('popup', setPopup);
              } else {
                map.getView().setZoom(currentZoom + 1);
              }
            } else {
              layer.getSource().removeFeature(feature);
              currentZoom = map.getView().getZoom();
              newCenter = map.getCoordinateFromPixel(clickEvent.pixel);
              minZoom = self.options.mapController.data.cluster_zoom ? self.options.mapController.data.cluster_zoom : fFeatures['0'].get('cluster_zoom');

              if (currentZoom >= minZoom) {
                var f = [];
                var cf = []; //open the cluster after zooming

                var pix = map.getView().getResolution();
                var max = fFeatures.length;
                var clustDistance = self.options.mapController.data.cluster_dist_spider ? self.options.mapController.data.cluster_dist_spider : 20;
                var arrLinestring = [];
                var r = pix * clustDistance * (0.5 + max / 4);

                for (var i = 0; i < max; i++) {
                  var a = 2 * Math.PI * i / max;
                  if (max == 2 || max == 4) a += Math.PI / 4;
                  var p = [newCenter[0] + r * Math.sin(a), newCenter[1] + r * Math.cos(a)];
                  var coordinate = (0, _proj.toLonLat)(p);
                  var featureLinestring = new _ol.Feature(new _geom.LineString([newCenter, p]));
                  arrLinestring.push(featureLinestring);
                  f.push(fFeatures[i].getGeometry());
                  fFeatures[i].setGeometry(new _geom.Point(p));
                }

                layer.getSource().addFeatures(fFeatures);
                var stringSource = new _source.Vector({
                  features: arrLinestring
                });
                var stringStyle = new _style.Style({
                  stroke: new _style.Stroke({
                    width: 0.3,
                    color: "#000070"
                  })
                });
                var stringLayer = new _layer.Vector({
                  source: stringSource,
                  style: stringStyle
                });
                map.getView().on('change:resolution', function (evt) {
                  for (var id in f) {
                    if (f.hasOwnProperty(id) && fFeatures.hasOwnProperty(id)) {
                      fFeatures[id].setGeometry(f[id]);
                    }
                  }

                  cf = [];
                  f = [];
                  map.removeLayer(stringLayer);
                });
                map.addLayer(stringLayer);
              } else {
                currentZoom += 1;
                map.getView().setCenter(newCenter);
                map.getView().setZoom(currentZoom);
              }
            }
          }
        } else if (fFeatures && fFeatures.length === 1) {
          feature = fFeatures[0];
        }

        if (self.options.mapController.mapsControls.controls.editor && self.options.mapController.mapsControls.controls.editor.isOpen()) {
          // do not show popup when editor is open
          if (feature && feature.get('projectId')) {
            // but call click hooks
            var result = _c4gMapsUtils.utils.callHookFunctions(self.hook_map_click, clickEvent);

            return false;
          }
        }

        popupInfos = {};

        if (feature && feature.get('popup')) {
          // single POI
          popupInfos = feature.get('popup');

          if (popupInfos && popupInfos.content === "${FNfnStandardInfoPopup}") {
            var popupContent = "${FNfnStandardInfoPopup}";
            popupContent = _c4gMapsUtils.utils.replaceFunctionPlaceholders(popupContent, feature, layer, self.options.mapController.data.lang, self);
            popupInfos = popupInfos || {};
            popupInfos.content = popupContent;
            popupInfos.async = false;
          }
        } else if (layer && layer.popup) {
          popupInfos = layer.popup;
        } else {
          feature = false;
        }

        if (feature && feature.get('loc_linkurl')) {
          var link = feature.get('loc_linkurl');

          while (link.lastIndexOf("[") != -1) {
            var subStr = link.substring(link.lastIndexOf('[') + 1, link.lastIndexOf(']'));
            var featureElement = "";

            if (feature.get(subStr)) {
              featureElement = feature.get(subStr).toLowerCase();
              featureElement.replace(" ", "-");
              featureElement = encodeURIComponent(featureElement);
            }

            link = link.substring(0, link.lastIndexOf('[')) + featureElement + link.substring(link.lastIndexOf(']') + 1);
          }

          if (self.options.mapController.data.link_newwindow === '1') {
            window.open(link);
          } else {
            window.open(link, "_self");
          }
        } else {
          if (feature && feature.get('zoom_onclick') && feature.get('zoom_onclick') != 0) {
            map.getView().setZoom(feature.get('zoom_onclick'));
            map.getView().setCenter(feature.getGeometry().getCoordinates());
          } else if (layer && layer.zoom_onclick && layer.zoom_onclick != 0) {
            map.getView().setZoom(layer.zoom_onclick);
            map.getView().setCenter(clickEvent.coordinate);
          }

          if (feature) {
            geometry = feature.getGeometry();

            if (geometry.getType() === 'Point') {
              coord = geometry.getCoordinates();
            } else {
              coord = clickEvent.coordinate;
            }

            if (self.mapData.popupHandling !== '2') {
              window.c4gMapsPopup.popup.setPosition(coord);
            } else {
              window.c4gMapsPopup.popup.setPosition(self.options.mapController.map.getView().getCenter());
            }

            self.popupController.addPopUp(popupInfos.content);

            if (popupInfos.content) {
              if (self.mapData.popupHandling !== '3') {
                window.c4gMapsPopup.$content ? window.c4gMapsPopup.$content.html('') : false;
                window.c4gMapsPopup.$popup ? window.c4gMapsPopup.$popup.addClass(_c4gMapsConstant.cssConstants.ACTIVE).addClass(_c4gMapsConstant.cssConstants.LOADING) : false;
                window.c4gMapsPopup.spinner.show();
              }

              if (popupInfos.async === false || popupInfos.async == '0') {
                objPopup = {};
                objPopup.popup = popupInfos;
                objPopup.feature = feature;
                objPopup.layer = layer; // Call the popup hook for plugin specific popup content

                if (window.c4gMapsHooks !== undefined && (0, _typeof2["default"])(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                  _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, {
                    popup: objPopup,
                    mapController: self.options.mapController
                  });
                }

                self.popupController.setPopup(objPopup);
              } else {
                jQuery.ajax({
                  dataType: "json",
                  url: self.api_infowindow_url + '/' + popupInfos.content
                }).done(function (data) {
                  var popupInfo = {
                    async: popupInfos.async,
                    content: data.content,
                    popup: popupInfos.popup,
                    routing_link: popupInfos.routing_link
                  };
                  objPopup = {};
                  objPopup.popup = popupInfo;
                  objPopup.feature = feature;
                  objPopup.layer = layer; // Call the popup hook for plugin specific popup content

                  if (window.c4gMapsHooks !== undefined && (0, _typeof2["default"])(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                    _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, {
                      popup: objPopup,
                      mapController: self.options.mapController
                    });
                  }

                  self.popupController.setPopup(objPopup);
                });
              }
            } else {
              if (self.mapData.popupHandling !== '3') {
                window.c4gMapsPopup.$popup.removeClass(_c4gMapsConstant.cssConstants.ACTIVE);
              } else {
                self.popupController.close();
              }
            }
          } else {
            if (self.mapData.popupHandling !== '3') {
              window.c4gMapsPopup.$popup.removeClass(_c4gMapsConstant.cssConstants.ACTIVE);
            } else {
              self.popupController.close();
            }
          } // hooks


          _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.hook_map_click, clickEvent);
        }
      }); // end of "click-observer"
    } // end of "initial"*

  }, {
    key: "activateClickObserver",
    value: function activateClickObserver() {
      this.clickObserverActive = true;
    }
  }, {
    key: "deactivateClickObserver",
    value: function deactivateClickObserver() {
      this.clickObserverActive = false;
    }
  }, {
    key: "combine",
    value: function combine(proxy) {
      var func = function func(event) {
        proxy.combineLayers(proxy);
        proxy.options.mapController.map.un('postrender', func);
      };

      proxy.options.mapController.map.on('postrender', func);
    }
    /**
     * @TODO: [checkLocationStyles description]
     *
     * @param   {[type]}  opt_options  [description]
     *
     * @return  {[type]}               [description]
     */

  }, {
    key: "checkLocationStyles",
    value: function checkLocationStyles(opt_options) {
      var options,
          neededLayerStyles,
          getLayerStyles,
          self = this;

      if (opt_options && (0, _typeof2["default"])(opt_options) === "object") {
        options = opt_options;
      } else {
        options = {};
      }

      this.locationStyleController.arrLocStyles = this.locationStyleController.arrLocStyles || {};
      neededLayerStyles = [];

      getLayerStyles = function getLayerStyles(layers) {
        var i, element, index; // ToDo: Rekursion integrieren (test mit forum)

        for (index in layers) {
          if (layers.hasOwnProperty(index)) {
            element = layers[index];

            if (element.content) {
              for (i = 0; i < element.content.length; i += 1) {
                if (element.content[i]) {
                  if (element.content[i].locationStyle && element.content[i].locationStyle !== "0" && neededLayerStyles.indexOf(element.content[i].locationStyle) === -1 && (!self.locationStyleController.arrLocStyles[element.content[i].locationStyle] || self.locationStyleController.arrLocStyles[element.content[i].locationStyle].style === undefined)) {
                    neededLayerStyles.push(element.content[i].locationStyle);
                  }
                }
              }
            }
          }
        }
      };

      getLayerStyles(this.layerController.arrLayers);

      if (neededLayerStyles.length > 0) {
        this.locationStyleController.loadLocationStyles(neededLayerStyles, options);
      } else {
        if (options.done && typeof options.done === "function") {
          options.done();
        }
      }
    } // end of "checkLocationStyles()"

  }, {
    key: "combineLayers",
    value: function combineLayers(proxy) {
      var i,
          j,
          k,
          layerId,
          layers,
          contentDataLayer,
          contentData,
          layer,
          layerGroups = [],
          source,
          style,
          features = [],
          styles = [],
          oneFeature,
          feature,
          vectorSource,
          clusterSource,
          vectorLayer;

      if (proxy.options.mapController.data.cluster_all === '1') {
        contentData = proxy.options.mapController.data;

        for (i in proxy.activeLayerIds) {
          //loop to get all layers
          layers = c4g.maps.layers[i];

          if (layers.type === "gpx") {
            continue;
          }

          if (layers && layers.vectorLayer) {
            if (layers.vectorLayer.getLayers() && layers.vectorLayer.getLayers().getArray()[0] && layers.vectorLayer.getLayers().getArray()[0].getSource() && layers.vectorLayer.getLayers().getArray()[0].getSource().getFeatures().length > 0) {
              proxy.options.mapController.map.removeLayer(layers.vectorLayer);
            }

            contentDataLayer = layers.content;
            layers.vectorLayer.getLayers().content = contentDataLayer;
            layerGroups.push(layers.vectorLayer.getLayers());
          }
        }

        for (k = 0; k < layerGroups.length; k++) {
          //loop to extract features from layers
          if (layerGroups[k].getArray().length > 0) {
            layer = layerGroups[k].getArray();
            source = layer["0"].getSource();
            style = layer["0"].getStyle();
            oneFeature = true;
            feature = source.getFeatures();

            for (j = 0; j < feature.length; j++) {
              //loop over all features from a source
              if (feature[j].get("features")) {
                for (i = 0; i < feature[j].get("features").length; i++) {
                  //loop for clustered features
                  if (layerGroups[k].content[j]) {
                    style = this.locationStyleController.arrLocStyles[layerGroups[k].content[j].locationStyle];
                  } else if (layerGroups[k].content[0]) {
                    style = this.locationStyleController.arrLocStyles[layerGroups[k].content[0].locationStyle];
                  }

                  feature[j].get("features")[i].setStyle(style.style);

                  if (!feature[j].get("features")[i].get('popup')) {
                    feature[j].get("features")[i].set('popup', layer['0'].popup);
                  }
                }

                features.push(feature[j].get("features"));
                oneFeature = false;
              }
            }

            if (oneFeature) {
              //single not clustered feature
              if (feature.length >= 1) {
                if (!feature['0'].get('popup')) {
                  feature['0'].set('popup', layer.popup);
                }

                features.push(feature);
              }
            }
          }
        }

        vectorSource = new _source.Vector({
          projection: 'EPSG:3857'
        });

        for (i = 0; i < features.length; i++) {
          vectorSource.addFeatures(features[i]);
        }

        clusterSource = new _source.Cluster({
          distance: 40,
          //threshold: 2, //minimum element count
          source: vectorSource
        });

        var styleForCluster = function styleForCluster(feature, resolution) {
          if (feature && feature.get('features') && feature.get('features')['0'].getStyle()) {
            style = feature.get('features')['0'].getStyle()(feature);

            if (feature !== undefined && feature !== null && feature.self !== window) {
              var fFeatures = feature.get('features');
              var size = fFeatures.length;

              if (size > 1) {
                if (!style) {
                  style = [];
                } // calculate bubble-offset


                var iconOffset = [0, 0];

                if (style[0]) {
                  if (typeof style[0].getImage().getRadius === "function") {
                    var radius = parseInt(style[0].getImage().getRadius(), 10);

                    if (radius) {
                      iconOffset = [0, radius];
                    }
                  } else if (typeof style[0].getImage().getAnchor === "function") {
                    iconOffset = style[0].getImage().getAnchor() || [0, 0];
                  }
                }

                var fillcolor = _c4gMapsUtils.utils.getRgbaFromHexAndOpacity('4975A8', {
                  unit: '%',
                  value: 70
                });

                if (contentData.cluster_fillcolor) {
                  fillcolor = _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(contentData.cluster_fillcolor, {
                    unit: '%',
                    value: 70
                  });
                }

                var fontcolor = contentData.cluster_fontcolor ? '#' + contentData.cluster_fontcolor : '#FFFFFF';
                style.push(new _style.Style({
                  text: new _style.Text({
                    text: "â",
                    font: "60px sans-serif",
                    offsetX: -1 * iconOffset[0],
                    offsetY: -1 * iconOffset[1],
                    fill: new _style.Fill({
                      color: fillcolor
                    })
                  })
                }));
                style.push(new _style.Style({
                  text: new _style.Text({
                    text: size.toString(),
                    offsetX: -1 * iconOffset[0],
                    offsetY: -1 * iconOffset[1] + 3,
                    fill: new _style.Fill({
                      color: fontcolor
                    })
                  })
                }));
              }
            }
          } else {
            if (feature && feature.get('features') && feature.get('features')['0'].getStyle()) {
              return feature.get('features')['0'].getStyle()(feature);
            } else {
              return null;
            }
          }

          return style;
        }; //vectorLayer = self.getVectorLayer(clusterSource, styleForCluster);


        vectorLayer = new _layer.Vector({
          name: 'Cluster',
          source: clusterSource,
          style: styleForCluster
        });
        var allLayers = proxy.options.mapController.map.getLayers().getArray();
        var missingLayer = true;

        for (i = 0; i < allLayers.length; i++) {
          if (allLayers[i].clusters) {
            allLayers[i] = vectorLayer;
            missingLayer = false;
          }
        }

        if (missingLayer) {
          proxy.options.mapController.map.addLayer(vectorLayer);
        }
      }
    } //end of combineLayers

  }, {
    key: "checkLayerIsActiveForZoom",
    value: function checkLayerIsActiveForZoom(layerId, opt_zoom) {
      var layer, zoom, layerContent, locstyle;

      if (!this.layerController.arrLayers[layerId]) {
        return false;
      }

      layer = this.layerController.arrLayers[layerId];

      if (opt_zoom) {
        zoom = opt_zoom;
      } else if (this.options.mapController.map.getView().getZoom() > -1) {
        zoom = this.options.mapController.map.getView().getZoom();
      } else {
        zoom = false;
      }

      if (layer.zoom === undefined) {
        if (layer.content && layer.content.length > 0) {
          for (var i = 0; i < layer.content.length; i++) {
            layerContent = layer.content[i];

            if (layerContent.locationStyle) {
              locstyle = this.locationStyleController.arrLocStyles[layerContent.locationStyle]; // TODO check all locstyles and take the most constraining zoom value

              if (locstyle) {
                layer.zoom = {};

                if (locstyle.maxzoom) {
                  layer.zoom.max = locstyle.maxzoom;
                }

                if (locstyle.minzoom) {
                  layer.zoom.min = locstyle.minzoom;
                }

                if (layer.zoom.max || layer.zoom.min) {
                  break;
                }
              }
            }
          }
        }
      }

      if (typeof zoom === "number" && layer.zoom && (layer.zoom.min > zoom || layer.zoom.max > 0 && layer.zoom.max < zoom)) {
        return false;
      }

      return true;
    } // end of "checkLayerIsActive()"

  }]);
  return MapProxy;
}();

exports.MapProxy = MapProxy;

/***/ }),

/***/ "./Resources/public/js/c4g-maps-utils.js":
/*!***********************************************!*\
  !*** ./Resources/public/js/c4g-maps-utils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof3 = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.utils = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var popupFunctionsDE = _interopRequireWildcard(__webpack_require__(/*! ./c4g-maps-popup-info-de */ "./Resources/public/js/c4g-maps-popup-info-de.js"));

var popupFunctionsEN = _interopRequireWildcard(__webpack_require__(/*! ./c4g-maps-popup-info-en */ "./Resources/public/js/c4g-maps-popup-info-en.js"));

var _layer = __webpack_require__(/*! ol/layer */ "./node_modules/ol/layer.js");

var _Circle = _interopRequireDefault(__webpack_require__(/*! ol/geom/Circle */ "./node_modules/ol/geom/Circle.js"));

var _proj = __webpack_require__(/*! ol/proj */ "./node_modules/ol/proj.js");

var _sphere = __webpack_require__(/*! ol/sphere */ "./node_modules/ol/sphere.js");

var _interaction = __webpack_require__(/*! ol/interaction */ "./node_modules/ol/interaction.js");

var _source = __webpack_require__(/*! ol/source */ "./node_modules/ol/source.js");

var _extent = __webpack_require__(/*! ol/extent */ "./node_modules/ol/extent.js");

var _jsbi = _interopRequireDefault(__webpack_require__(/*! jsbi/dist/jsbi.mjs */ "./node_modules/jsbi/dist/jsbi.mjs"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
var popupFunctions = popupFunctionsDE;

if (typeof mapData !== "undefined") {
  if (mapData.lang === "de") {
    popupFunctions = popupFunctionsDE;
  } else if (mapData.lang === "en") {
    popupFunctions = popupFunctionsEN;
  } else {
    // fallback
    popupFunctions = popupFunctionsEN;
  }
} else {
  popupFunctions = popupFunctionsEN;
}

var utils = {
  /**
   *  Converts the first letter of a given string to uppercase, leaving the remaining string untouched.
   *
   *  @param    {string}    the string to capitalize
   *
   *  @return   {string}    the capitalized string
   */
  capitalizeFirstLetter: function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  },

  /**
   * Generate an unique id.
   *
   * The id is 9 characters long and prefixed with an underscore.
   *
   * @return  {string}  The generated id.
   */
  getUniqueId: function getUniqueId() {
    // Math.random should be unique because of its seeding algorithm.
    // Convert it to base 36 (numbers + letters), and grab the first 9 characters
    // after the decimal.
    return '_' + Math.random().toString(36).substr(2, 9);
  },

  /**
   * Encode input strings for GeoJSON-Objects properly,
   * so they will not break the Code.
   * Transforms:
   *   \ -> \\;
   *   " -> '';
   *   Ã -> &Auml;
   *   Ã¤ -> &auml;
   *   Ã -> &Ouml;
   *   Ã¶ -> &ouml;
   *   Ã -> &Uuml;
   *   Ã¼ -> &uuml;
   *
   * @param   {string}  input  [description]
   *
   * @return  {string}         [description]
   */
  encodeGeoJsonProperty: function encodeGeoJsonProperty(input) {
    var output;

    if (!input) {
      return '';
    }

    output = input.replace(/\\/g, '\\\\').replace(/\"/g, '\'\'').replace(/Ã/g, '&Auml;').replace(/Ã¤/g, '&auml;').replace(/Ã/g, '&Ouml;').replace(/Ã¶/g, '&ouml;').replace(/Ã/g, '&Uuml;').replace(/Ã¼/g, '&uuml;');
    return output;
  },
  // end of encodeGeoJsonProperty()
  removeUmlauts: function removeUmlauts(input) {
    if (!input) {
      return '';
    }

    return input.toLowerCase().replace(/\s/g, "").replace(/\\/g, '\\\\').replace(/\"/g, '\'\'').replace(/Ã¤/g, 'ae').replace(/Ã¶/g, 'oe').replace(/Ã¼/g, 'ue').replace(/Ã/g, 'ss');
  },

  /**
   * Decode input strings for GeoJSON-Objects properly,
   * so they will be displayed correctly.
   * Transforms:
   *   \\     -> \;
   *   ''     -> ";
   *   &Auml; -> Ã
   *   &auml; -> Ã¤
   *   &Ouml; -> Ã
   *   &ouml; -> Ã¶
   *   &Uuml; -> Ã
   *   &uuml; -> Ã¼
   *
   * @param   {string}  input  [description]
   *
   * @return  {string}         [description]
   */
  decodeGeoJsonProperty: function decodeGeoJsonProperty(input) {
    var output;

    if (!input) {
      return '';
    }

    if (typeof input !== "string") {
      input = input + "";
    }

    output = input.replace(/\\\\/g, '\\').replace(/\'\'/g, '\"').replace(/&Auml;/g, 'Ã').replace(/&auml;/g, 'Ã¤').replace(/&Ouml;/g, 'Ã').replace(/&ouml;/g, 'Ã¶').replace(/&Uuml;/g, 'Ã;').replace(/&uuml;/g, 'Ã¼');
    return output;
  },
  // end of decodeGeoJsonProperty()

  /**
   * Create or replace an URL-parameter.
   *
   * If `opt_getKey` is `false` or `undefined` the given parameter, `param`,
   * will be applied as "hash-parameter".
   * e.g.:
   *   https://myurl.de:port/path/to/maps#param
   * Note, that already existing "hash-parameters" will be overriden,
   * whereas existing "GET-parameters" stay untouched.
   *
   * If `opt_getKey` is set, it will be applied as "GET-parameter".
   * e.g.:
   *   https://myurl.de:port/path/to/maps?opt_getKey=param
   * If the key described by `opt_getKey` is already existing, its value will be overriden,
   * otherwise the key-value-pair will be appended appropriatly.
   * Already existing "hash-parameters" will stay untouched.
   *
   * If `opt_execute` is `false` or `undefined`, the function will return the new link as `string`,
   * otherwise the "href/location" will be changed directly in the browser, which can cause a pagereload.
   *
   * @param  {string}                    param        [description]
   * @param  {undefined|boolean|string}  opt_getKey   Default: `undefined`
   * @param  {undefined|boolean}         opt_execute  Default: `undefined`
   */
  setUrlParam: function setUrlParam(param, opt_getKey, opt_execute) {
    var link, searchParam, paramReplaced, i;

    if ((0, _typeof2["default"])(param) === undefined) {
      return false;
    }

    link = location.origin + location.pathname;

    if (!opt_getKey) {
      // use hash-parameter
      if (opt_execute) {
        location.hash = param;
        return true;
      }

      link += location.search + '#' + param;
    } else {
      // use GET-parameter
      if (location.search) {
        // there are already search-parameters
        paramReplaced = false;
        opt_getKey = opt_getKey.toLowerCase(); // replace parameter if already existent

        searchParam = location.search.replace(/([^=\?\&]+)=([^&]+)/gi, function (match, key, value, offset, originString) {
          if (key === opt_getKey) {
            paramReplaced = true;
            return key + '=' + param;
          }

          return match;
        }); // otherwise append as new parameter

        if (!paramReplaced) {
          searchParam += '&' + opt_getKey + '=' + param;
        }
      } else {
        // this will be the only search-parameter in the URL
        searchParam = '?' + opt_getKey + '=' + param;
      }

      if (opt_execute) {
        location.search = searchParam;
        return true;
      }

      link += searchParam + location.hash;
    }

    return link;
  },
  // end of setUrlParam()

  /**
   * Get search or hash URL-parameter as string.
   *
   * If `opt_getKey` is `false` or `undefined`, the hash-parameter of the URL is returned,
   * otherwise it will search for a GET-parameter and return its value.
   *
   * If a parameter is not existent, or empty, an empty string will be returned.
   *
   * @param   {undefined|string}  opt_getKey  Default: `undefined`
   *
   * @return  {string}                        The found parameter.
   */
  getUrlParam: function getUrlParam(opt_getKey) {
    var param, regEx;

    if (!opt_getKey) {
      param = location.hash.substring(1);
    } else {
      if (!location.search) {
        param = '';
      } else {
        regEx = new RegExp('[\?\&]' + opt_getKey + '=([^&]+)', 'i');
        param = regEx.exec(location.search);
        param = param ? param[1] : '';
      }
    }

    return param;
  },
  // end of getUrlParam()

  /**
   * Delta-encode an array of numbers.
   * Note that the array will be sorted (lowest to highest)
   * before encoding.
   *
   * So after the encoding the first value of the output contains
   * the smallest number of the set and each following number just
   * represents the offset to its previous neighbor.
   *
   * This is mostly efficient for high numbers, that are "close to each other".
   *
   * Example:
   *   [1337, 11, 101, 123, 96, 69, 42, 42]
   *   will be sorted
   *   [11, 42, 42, 69, 96, 101, 123, 1337]
   *   and encoded to
   *   [11, 31, 0, 27, 27, 5, 22, 1214]
   *
   * @param   {array<numbers>}  arrInput  [description]
   *
   * @return  {array<numbers>}            [description]
   */
  deltaEncode: function deltaEncode(arrInput) {
    var arrOutput, i;

    if (!arrInput) {
      return [];
    }

    if (arrInput.length === 1) {
      return arrInput;
    }

    arrInput.sort(function (a, b) {
      return _jsbi["default"].toNumber(_jsbi["default"].subtract(_jsbi["default"].BigInt(a), _jsbi["default"].BigInt(b)));
    });
    arrOutput = [];
    arrOutput[0] = arrInput[0].toString();

    for (i = 1; i < arrInput.length; i += 1) {
      arrOutput[i] = _jsbi["default"].subtract(_jsbi["default"].BigInt(arrInput[i]), _jsbi["default"].BigInt(arrInput[i - 1])).toString();
    }

    return arrOutput;
  },
  // end of deltaEncode()

  /**
   * Decode a delta-encoded array.
   * See `deltaEncode` function for more detailed information.
   *
   * @param   {array<numbers>}  arrInput  [description]
   *
   * @return  {array<numbers>}            [description]
   */
  deltaDecode: function deltaDecode(arrInput) {
    var arrOutput;

    if (!arrInput) {
      return [];
    }

    if (arrInput[0].indexOf("{") !== -1) {
      // cannot delta decode uuids
      return arrInput;
    }

    arrOutput = [];
    arrOutput[0] = _jsbi["default"].BigInt(arrInput[0]); // if (isNaN(arrInput[0])) {
    //   return [];
    // }

    for (var i = 1; i < arrInput.length; i += 1) {
      arrOutput[i] = _jsbi["default"].add(_jsbi["default"].BigInt(arrInput[i]), arrOutput[i - 1]);
    }

    for (var _i = 0; _i < arrOutput.length; _i++) {
      arrOutput[_i] = arrOutput[_i].toString();
    }

    return arrOutput;
  },
  // end of deltaDecode()

  /**
   * Check and call functions in `arrHookFunctions` with given `parameters`.
   *
   * @param   {array<function>}   arrHookFunctions  [description]
   * @param   {mixed}             parameters        [description]
   */
  callHookFunctions: function callHookFunctions(arrHookFunctions, parameters) {
    var j,
        arrResult = [];

    if (arrHookFunctions && arrHookFunctions.length > 0) {
      for (j = 0; j < arrHookFunctions.length; j += 1) {
        if (typeof arrHookFunctions[j] === 'function') {
          var tmpResult = arrHookFunctions[j](parameters);

          if (tmpResult) {
            arrResult.push(tmpResult);
          }
        }
      }
    }

    return arrResult;
  },
  // end of "callHookFunctions()"

  /**
   * Convert a hex-formated color value into rgba()-format.
   *
   * @param   {string|number}  hex          [description]
   * @param   {string|number}  opt_opacity  [description]
   *
   * @return  {string}                      [description]
   */
  getRgbaFromHexAndOpacity: function getRgbaFromHexAndOpacity(hex, opt_opacity, opt_array) {
    var bigint, r, g, b, a;
    bigint = parseInt(hex, 16);

    if (opt_opacity && opt_opacity.value) {
      opt_opacity.value = parseInt(opt_opacity.value);
    }

    if (opt_opacity && typeof opt_opacity !== 'number') {
      if ((0, _typeof2["default"])(opt_opacity) === 'object' && opt_opacity.value) {
        opt_opacity = opt_opacity.value;
      } else if (!opt_opacity) {
        opt_opacity = 100;
      }
    }

    r = bigint >> 16 & 255;
    g = bigint >> 8 & 255;
    b = bigint & 255;
    a = opt_opacity ? opt_opacity / 100 : 1;

    if (opt_array) {
      return [r, g, b, a];
    }

    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
  },
  getSingleCoordinateForGeom: function getSingleCoordinateForGeom(geometry) {
    var coordinate, x, y;
    var type = geometry.getType();

    switch (type) {
      case "Point":
        coordinate = geometry.getCoordinates();
        break;

      case "LineString":
      case "LinearRing":
        x = (geometry.getFirstCoordinate()[0] + geometry.getLastCoordinate()[0]) / 2;
        y = (geometry.getFirstCoordinate()[1] + geometry.getLastCoordinate()[1]) / 2;
        coordinate = [x, y];
        break;

      case "Polygon":
      case "MultiPoint":
        var coordinates = geometry.getCoordinates();
        var i;

        for (i = 0; i < coordinates.length; i++) {
          x += coordinates[i][0];
          y += coordinates[i][1];
        }

        coordinate = [x / i, y / i];
        break;

      default:
        coordinate = [0, 0];
        break;
    }

    return coordinate;
  },

  /**
   * Measure the dimensions of the given geometry.
   *
   * If the geometry is a `LineString` the function will measure its length,
   * is it a `Polygon` it will measure the acreage,
   * otherwise it will return `0`.
   *
   * If the optional `opt_forceLineMeasure` parameter is `true`
   * and the geometry is a `Polygon` it will measure its perimeter instead
   * of its acreage.
   *
   * @param   {ol.geom.LineString|ol.geom.Polygon}   geometry              [description]
   * @param   {undefined|boolean}                    opt_forceLineMeasure  [description]
   *
   * @return  {array<string>|number}                                       [description]
   */
  measureGeometry: function measureGeometry(geometry, opt_forceLineMeasure, opt_forceSurfaceMeasure) {
    var value, sphere, coordinates, coord1, coord2, result, i;

    if (!geometry) {
      return false;
    } //sphere = new ol.Sphere(6378137);


    result = {};

    if (geometry.getType() === 'LineString' || geometry.getType() === 'Polygon' && opt_forceLineMeasure) {
      coordinates = geometry.getCoordinates();

      if (geometry.getType() === 'Polygon') {
        coordinates = coordinates[0];
      }

      value = 0;

      for (i = 0; i < coordinates.length - 1; i += 1) {
        coord1 = (0, _proj.transform)(coordinates[i], 'EPSG:3857', 'EPSG:4326');
        coord2 = (0, _proj.transform)(coordinates[i + 1], 'EPSG:3857', 'EPSG:4326');
        value += (0, _sphere.getDistance)(coord1, coord2, 6378137);
      }

      result.rawValue = (Math.round(value * 100) / 100).toFixed(2);

      if (value > 1000) {
        result.htmlValue = (Math.round(value / 1000 * 100) / 100).toFixed(2) + ' ' + 'km';
      } else {
        result.htmlValue = result.rawValue + ' ' + 'm';
      }
    } else if (geometry.getType() === 'Polygon') {
      //geometry = /** @type {Polygon} */(geometry.clone().transform('EPSG:3857', 'EPSG:4326'));
      //coordinates = geometry.getLinearRing(0).getCoordinates();
      value = Math.abs((0, _sphere.getArea)(geometry));
      result.rawValue = (Math.round(value * 100) / 100).toFixed(2);

      if (value > 10000) {
        result.htmlValue = (Math.round(value / 1000000 * 100) / 100).toFixed(2) + ' ' + 'km<sup>2</sup>';
      } else {
        result.htmlValue = result.rawValue + ' ' + 'm<sup>2</sup>';
      }
    } else if (geometry.getType() === 'Circle' && opt_forceSurfaceMeasure) {
      var center = geometry.getCenter();
      var radius = geometry.getRadius();
      var edgeCoordinate = [center[0] + radius, center[1]]; //var wgs84Sphere = new ol.Sphere(6378137);

      var value = (0, _sphere.getDistance)((0, _proj.transform)(center, 'EPSG:3857', 'EPSG:4326'), (0, _proj.transform)(edgeCoordinate, 'EPSG:3857', 'EPSG:4326'), 6378137);
      value = Math.PI * Math.pow(value, 2);
      result.rawValue = (Math.round(value * 100) / 100).toFixed(2);

      if (value > 10000) {
        result.htmlValue = (Math.round(value / 1000000 * 100) / 100).toFixed(2) + ' ' + 'km<sup>2</sup>';
      } else {
        result.htmlValue = result.rawValue + ' ' + 'm<sup>2</sup>';
      }
    } else if (geometry.getType() === 'Circle') {
      var center = geometry.getCenter();
      var radius = geometry.getRadius();
      var edgeCoordinate = [center[0] + radius, center[1]]; //var wgs84Sphere = new ol.Sphere(6378137);

      var value = (0, _sphere.getDistance)((0, _proj.transform)(center, 'EPSG:3857', 'EPSG:4326'), (0, _proj.transform)(edgeCoordinate, 'EPSG:3857', 'EPSG:4326'), 6378137);
      result.rawValue = (Math.round(value * 100) / 100).toFixed(2);

      if (result.rawValue > 10000) {
        result.htmlValue = (Math.round(value * 100 / 100) / 1000).toFixed(2) + ' ' + 'km';
      } else {
        result.htmlValue = result.rawValue + ' ' + 'm';
      }
    } else {
      result = 0;
    }

    return result;
  },

  /**
   * Calculate extent for an array of geometries.
   *
   * @param   {Array.<ol.geom.simpleGeometry>}  arrGeometries  [description]
   *
   * @return  {ol.Extent}                                      [description]
   */
  getExtentForGeometries: function getExtentForGeometries(arrGeometries) {
    var extentSource;

    if (!arrGeometries) {
      console.warn('Geometries missing for extent calculation');
      return false;
    }

    extentSource = new _source.Vector();
    extentSource.addFeatures(arrGeometries);
    return extentSource.getExtent() || (0, _interaction.Extent)([0, 0, 0, 0]);
  },
  // end of getExtentForGeometries()

  /**
   * Fit view of `map` to a given array of `extents`.
   * Animated if `opt_animationDuration` is an integer > 0.
   *
   * @param   {object}     extents                 [description]
   * @param   {ol.Map}     map                    [description]
   * @param   {integer}    opt_animationDuration  [description]
   *
   * @return  {boolean}                           [description]
   */
  fitToExtents: function fitToExtents(extents, map, opt_padding, opt_animationDuration) {
    var view, padding, extent, key;

    if (!extents || !map) {
      console.warn('Missing extent or map for fitExtent');
      return false;
    } //extent = ol.extent.createEmpty();


    for (key in extents) {
      if (extents.hasOwnProperty(key)) {
        if (typeof extent === "undefined") {
          extent = extents[key];
        } else {
          (0, _extent.extend)(extent, extents[key]);
        }
      }
    }

    this.fitToExtent(extent, map, opt_padding, 5, 0, 0, 2);
  },
  // end of fitToExtents

  /**
   * Fit view of `map` to a given `extent`.
   * Animated if `opt_animationDuration` is an integer > 0.
   *
   * @param   {ol.Extent}  extent                 [description]
   * @param   {ol.Map}     map                    [description]
   * @param   {array}      opt_padding            [description]
   * @param   {integer}    opt_animationDuration  [description]
   * @param   {integer}    opt_minZoom            [description]
   * @param   {integer}    opt_maxZoom            [description]
   * @param   {integer}    opt_minResolution      [description]
   *
   * @return  {boolean}                           [description]
   */
  fitToExtent: function fitToExtent(extent, map, opt_padding, opt_animationDuration, opt_minZoom, opt_maxZoom, opt_minResolution) {
    var view, padding, fitOptions;

    if (!extent || !map) {
      console.warn('Missing extent or map for fitExtent');
      return false;
    }

    view = map.getView();
    fitOptions = {
      'padding': opt_padding || [25, 25, 25, 25]
    };

    if (opt_minResolution && opt_minResolution > 0) {
      fitOptions.minResolution = opt_minResolution;
    }

    if (opt_minZoom && opt_minZoom >= 0) {
      fitOptions.minZoom = opt_minZoom;
    }

    if (opt_maxZoom && opt_maxZoom >= 0) {
      fitOptions.maxZoom = opt_maxZoom;
    } // animate the "fitting" when a duration is given and its greater than 0


    if (opt_animationDuration && opt_animationDuration > 0) {
      view.animate({
        start: +new Date(),
        duration: opt_animationDuration,
        resolution: view.getResolution(),
        center: [0, 0]
      });
    }

    try {
      view.fit(extent, map.getSize(), {
        padding: [25, 25, 25, 25]
      }); //view.fit(extent, map.getSize());
      //view.setZoom(view.getZoom()-1);

      return true;
    } catch (e) {
      return false;
    }
  },
  // end of fitToExtent()

  /**
   * Convenience function to run all placeholder functions at once.
   *
   * @param   {string}                      strInput   [description]
   * @param   {ol.Feature}                  feature    [description]
   * @param   {ol.layer.Layer | undefined}  opt_layer  [description]
   * @param   {string}                      language   [description]
   *
   * @return  {string}                                 [description]
   */
  replaceAllPlaceholders: function replaceAllPlaceholders(strInput, feature, opt_layer, language) {
    var strOutput; // only check the first two parameters as they will be used by all placeholder-functions
    // -> for performance

    if (!strInput || !feature) {
      return strInput;
    }

    strOutput = this.replaceFunctionPlaceholders(strInput, feature, opt_layer, language);
    strOutput = this.replaceEditorVarsPlaceholders(strOutput, feature);
    strOutput = this.replaceAttributePlaceholders(strOutput, feature);
    return strOutput;
  },
  // end of replaceAllPlaceholders()

  /**
   * Replace every occurance of `${FNfunctionName}`, in `strInput`,
   * with the result of `window.functionName(feature, style)`, if it exist.
   * Otherwise the placeholder will be simply removed (/replaced with '').
   * Style will be taken either from the feature, or the layer.
   *
   * @param   {string}          strInput  [description]
   * @param   {ol.Feature}      feature   [description]
   * @param   {ol.layer.Layer}  layer     [description]
   * @param   {string}          language  [description]
   *
   * @return  {string}                    [description]
   */
  replaceFunctionPlaceholders: function replaceFunctionPlaceholders(strInput, feature, layer, language) {
    var proxy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var strOutput;

    if (!strInput || !feature || !layer) {
      return strInput;
    }

    popupFunctions = language === 'de' || language === 'de-DE' ? popupFunctionsDE : popupFunctionsEN;
    strOutput = strInput.replace(/\$\{FN([^\}]*)\}/g, function (match, functionName, offset, originString) {
      // check if function exists
      if (typeof popupFunctions[functionName] === 'function') {
        // search style
        var styleSrc = "";

        if (proxy && feature.get('locstyle')) {
          var locstyleArr = proxy.locationStyleController.arrLocStyles[feature.get('locstyle')].locStyleArr;
          styleSrc = locstyleArr.icon_src ? locstyleArr.icon_src : locstyleArr.svgSrc ? locstyleArr.svgSrc : "";
        }

        return popupFunctions[functionName](feature, styleSrc);
      }

      return '';
    }); // end of replace()

    return strOutput;
  },
  // end of replaceFunctionPlaceholders()

  /**
   * Replace placeholders, in `strInput`, for variables set by the geoEditor.
   * Valid placeholders are: ([key] represents the stringname of the variables key)
   *   `${EL[key]}`   =>  Label for the variable
   *   `${EVL[key]}`  =>  Label for the variable, if a value is set too
   *   `${EV[key]}`   =>  Value of the variable
   *   `${EVV[key]}`  =>  Same as `${EV[key]}`
   *
   * If no appropriate value can be found for a placeholder
   * it will simply be removed (/replaced with '').
   *
   * @param   {string}      strInput  [description]
   * @param   {ol.Feature}  feature   [description]
   *
   * @return  {string}                [description]
   */
  replaceEditorVarsPlaceholders: function replaceEditorVarsPlaceholders(strInput, feature) {
    var strOutput;

    if (!strInput || !feature || typeof feature.get !== 'function') {
      return strInput;
    }

    strOutput = strInput.replace(/\$\{(EV?[LV])([^\}]*)\}/g, function (match, type, evKey, offset, originString) {
      var editorVars, i; // check if feature has editorVars

      if (feature.get('editorVars')) {
        editorVars = feature.get('editorVars'); // search for editorVar with key == evKey

        for (i = 0; i < editorVars.length; i += 1) {
          if (editorVars[i].key === evKey) {
            // if type is 'EVL' display label only if a value is set too
            if (type === 'EL' || type === 'EVL' && editorVars[i].value) {
              return editorVars[i].label;
            } else {
              return editorVars[i].value;
            }
          }
        }
      }

      return '';
    }); // end of replace()

    return strOutput;
  },
  // end of replaceEditorVarsPlaceholders()

  /**
   * Replace every occurance of `${attr}`, in `strInput`,
   * with the result of `feature.get(attr)`, if it exist.
   * Otherwise the placeholder will be simply removed (/replaced with '').
   *
   * @param   {string}      strInput  [description]
   * @param   {ol.Feature}  feature   [description]
   *
   * @return  {string}                [description]
   */
  replaceAttributePlaceholders: function replaceAttributePlaceholders(strInput, feature) {
    var strOutput;

    if (!strInput || !feature || typeof feature.get !== 'function') {
      return strInput;
    }

    strOutput = strInput.replace(/\$\{([^\}]*)\}/g, function (match, attr, offset, originString) {
      return feature.get(attr) || '';
    }); // end of replace()

    return strOutput;
  },
  // end of replaceAttributePlaceholders()
  objectToArray: function objectToArray(object) {
    if (object && (0, _typeof2["default"])(object) === 'object') {
      object = Object.keys(object).map(function (key) {
        return object[key];
      });
    }

    return object;
  },
  // end of objectToArray()
  getVectorLayer: function getVectorLayer(source, style, zIndex) {
    var fnStyle; // make sure that the style is a function

    if (typeof style === 'function') {
      fnStyle = style;
    } else if (style !== undefined) {
      fnStyle = function fnStyle() {
        return style;
      };
    }

    return new _layer.Vector({
      source: source,
      style: fnStyle,
      zIndex: zIndex
    });
  },
  // end of "getVectorLayer()"

  /**
   * Extracts the subdomain from the current request host and returns it.
   * @returns {string | *}
   */
  getCurrentSubdomain: function getCurrentSubdomain() {
    return window.location.href;
  },

  /**
   * Returns the current domain (without the subdomain)
   */
  getCurrentDomain: function getCurrentDomain() {
    var domain = window.location.hostname;
    var arrDomain = domain.split('.');

    if (arrDomain.length > 2) {
      // there is a subdomain
      return arrDomain[arrDomain.length - 2];
    } else {
      return arrDomain[0];
    }
  },
  getValue: function getValue(key) {
    return localStorage[key] || '';
  },
  storeValue: function storeValue(key, value) {
    localStorage[key] = value; // only strings
  },
  decodeHTML: function decodeHTML(html) {
    var txt = document.createElement('textarea');
    txt.innerHTML = html;
    return txt.value;
  }
};
exports.utils = utils;

/***/ }),

/***/ "./Resources/public/js/c4g-overlay-controller.js":
/*!*******************************************************!*\
  !*** ./Resources/public/js/c4g-overlay-controller.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.C4gOverlayController = exports.OSM_REL_ATTRIBUTION = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _c4gMapsConfig = __webpack_require__(/*! ./c4g-maps-config */ "./Resources/public/js/c4g-maps-config.js");

var _source = __webpack_require__(/*! ol/source */ "./node_modules/ol/source.js");

var _layer = __webpack_require__(/*! ol/layer */ "./node_modules/ol/layer.js");

var _GeoImage = _interopRequireDefault(__webpack_require__(/*! ol-ext/source/GeoImage */ "./node_modules/ol-ext/source/GeoImage.js"));

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
//copy link to add noopener
var OSM_REL_ATTRIBUTION = '&#169; ' + '<a href="https://www.openstreetmap.org/copyright" target="_blank" rel="noopener">OpenStreetMap</a> ' + 'contributors.';
exports.OSM_REL_ATTRIBUTION = OSM_REL_ATTRIBUTION;

var C4gOverlayController = /*#__PURE__*/function () {
  function C4gOverlayController(baselayer) {
    (0, _classCallCheck2["default"])(this, C4gOverlayController);
    this.baselayer = baselayer;
    this.arrOverlays = [];
  }

  (0, _createClass2["default"])(C4gOverlayController, [{
    key: "showOverlayLayer",
    value: function showOverlayLayer(overlayId) {
      var self = this,
          overlayLayerConfig,
          osmSourceConfigs = _c4gMapsConfig.config.osm,
          stamenSourceConfigs = _c4gMapsConfig.config.stamen,
          layerOptions,
          overlayLayer,
          noUrl;
      layerOptions = {};
      overlayLayer = new _layer.Tile({
        source: new _source.OSM()
      });
      overlayLayerConfig = this.arrOverlays[overlayId];
      var isSecure = window.isSecureContext;

      if (isSecure) {
        layerOptions.crossOrigin = 'anonymous';
      }

      switch (overlayLayerConfig.provider) {
        case 'osm':
          if (osmSourceConfigs[overlayLayerConfig.style]) {
            overlayLayer = new _layer.Tile({
              source: new _source.OSM(jQuery.extend(osmSourceConfigs[overlayLayerConfig.style], layerOptions))
            });
          } else if (stamenSourceConfigs[overlayLayerConfig.style]) {
            // Stamen
            overlayLayer = new _layer.Tile({
              source: new _source.Stamen(jQuery.extend(stamenSourceConfigs[overlayLayerConfig.style], layerOptions))
            });
          } else if (overlayLayerConfig.style === 'osm_custom') {
            // custom
            noUrl = true;

            if (overlayLayerConfig.attribution) {
              layerOptions.attributions = overlayLayerConfig.attribution + ' ' + OSM_REL_ATTRIBUTION;
            }

            if (overlayLayerConfig.url) {
              layerOptions.url = overlayLayerConfig.url;
              noUrl = false;
            } else if (overlayLayerConfig.urls && overlayLayerConfig.urls.length > 0) {
              layerOptions.urls = overlayLayerConfig.urls;
              noUrl = false;
            }

            if (!noUrl) {
              overlayLayer = new _layer.Tile({
                source: new _source.XYZ(layerOptions)
              });
            } else {
              console.warn('custom url(s) missing -> switch to default');
            }
          } else {
            console.warn('unsupported osm-style -> switch to default');
          }

          break;

        case 'sea':
          // custom
          noUrl = true;

          if (overlayLayerConfig.attribution) {
            layerOptions.attributions = overlayLayerConfig.attribution + ' ' + OSM_REL_ATTRIBUTION;
          }

          if (overlayLayerConfig.urls) {
            layerOptions.urls = overlayLayerConfig.urls;
            noUrl = false;
          }

          if (!noUrl) {
            overlayLayer = new _layer.Tile({
              source: new _source.XYZ(layerOptions)
            });
          }

          break;

        case 'wms':
          overlayLayer = new _layer.Tile({
            source: new _source.TileWMS({
              url: overlayLayerConfig.url,
              params: {
                LAYERS: overlayLayerConfig.params.layers,
                VERSION: overlayLayerConfig.params.version,
                //FORMAT: overlayLayerConfig.params.format,
                TRANSPARENT: overlayLayerConfig.params.transparent
              },
              gutter: overlayLayerConfig.gutter,
              attributions: overlayLayerConfig.attribution + ' ' + OSM_REL_ATTRIBUTION
            }) //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')

          });
          break;

        case 'owm':
          overlayLayer = new _layer.Tile({
            source: new _source.XYZ({
              url: overlayLayerConfig.url + overlayLayerConfig.app_id + '/{z}/{x}/{y}?hash=' + overlayLayerConfig.api_key,
              attributions: overlayLayerConfig.attribution + ' ' + OSM_REL_ATTRIBUTION
            }) //extent: ol.proj.transformExtent([5.59334, 50.0578, 9.74158, 52.7998], 'EPSG:4326', 'EPSG:3857')

          });
          break;

        case 'geoimage':
          var objSource = JSON.parse(overlayLayerConfig.geoImageJson);
          objSource.url = overlayLayerConfig.imageSrc ? overlayLayerConfig.imageSrc : objSource.url;
          objSource.attributions = overlayLayerConfig.attribution;
          overlayLayer = new _layer.Image({
            source: new _GeoImage["default"](objSource)
          });
          break;

        default:
          console.warn('unsupported provider');
          break;
      }

      this.arrOverlays[overlayId].layer = overlayLayer; // this.arrOverlays[overlayId].changeOpacity(parseInt(overlayLayerConfig.opacity)/100);

      this.arrOverlays[overlayId].changeOpacity(overlayLayerConfig.opacity);
      return this.arrOverlays[overlayId].layer;
    }
  }]);
  return C4gOverlayController;
}();

exports.C4gOverlayController = C4gOverlayController;

/***/ }),

/***/ "./Resources/public/js/c4g-overlay.js":
/*!********************************************!*\
  !*** ./Resources/public/js/c4g-overlay.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.C4gOverlay = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
var C4gOverlay = /*#__PURE__*/function () {
  function C4gOverlay(overlayArr, mapController) {
    (0, _classCallCheck2["default"])(this, C4gOverlay);
    this.id = overlayArr['id'];
    this.pid = overlayArr['pid'];
    this.name = overlayArr['name'];
    this.provider = overlayArr['provider'];
    this.style = overlayArr['style'];
    this.url = overlayArr['url'];
    this.urls = overlayArr['urls'];
    this.opacity = overlayArr['opacity'];
    this.attribution = overlayArr['attribution'];
    this.gutter = overlayArr['gutter'];
    this.params = overlayArr['params'];
    this.imageSrc = overlayArr['image_src'];
    this.geoImageJson = overlayArr['geoimage_json'];
    this.layer = false;
    this.overlayArr = overlayArr;
    this.mapController = mapController;
  }

  (0, _createClass2["default"])(C4gOverlay, [{
    key: "changeOpacity",
    value: function changeOpacity(value) {
      var layer;
      layer = this.layer;

      if (layer) {
        this.mapController.map.removeLayer(layer);
        layer.setOpacity(value / 100);
        this.mapController.map.addLayer(layer);
      }
    }
  }]);
  return C4gOverlay;
}();

exports.C4gOverlay = C4gOverlay;

/***/ }),

/***/ "./Resources/public/js/c4g-router-time-conversions.js":
/*!************************************************************!*\
  !*** ./Resources/public/js/c4g-router-time-conversions.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.toHumanDistance = toHumanDistance;
exports.toHumanTime = toHumanTime;

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */

/**
 * Converts a distance in meters to a more readable format.
 * @param distanceInMeters  The distance to convert.
 * @returns {string}
 */
function toHumanDistance(distanceInMeters) {
  var distance, humanDistance;
  distance = parseInt(distanceInMeters, 10);
  distance = distance / 1000;

  if (distance >= 100) {
    humanDistance = distance.toFixed(0) + " " + 'km';
  } else if (distance >= 10) {
    humanDistance = distance.toFixed(1) + " " + 'km';
  } else if (distance >= 0.1) {
    humanDistance = distance.toFixed(2) + " " + 'km';
  } else {
    humanDistance = (distance * 1000).toFixed(0) + " " + 'm';
  }

  return humanDistance;
}
/**
 * Converts a time in seconds to a more readable format.
 * @param timeInSeconds     The time to convert.
 * @returns {string}
 */


function toHumanTime(timeInSeconds) {
  var seconds, minutes, hours, humanTime;
  seconds = parseInt(timeInSeconds, 10);
  minutes = parseInt(seconds / 60, 10);
  seconds = seconds % 60;
  hours = parseInt(minutes / 60, 10);
  minutes = minutes % 60;

  if (hours === 0 && minutes === 0) {
    humanTime = seconds + " " + 's';
  } else if (hours === 0) {
    humanTime = minutes + " " + 'min';
  } else {
    humanTime = hours + " " + 'h' + " " + minutes + " " + 'min';
  }

  return humanTime;
}

/***/ }),

/***/ "./Resources/public/js/c4g-routing-permalink.js":
/*!******************************************************!*\
  !*** ./Resources/public/js/c4g-routing-permalink.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RoutingPermalink = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
var RoutingPermalink = /*#__PURE__*/function () {
  function RoutingPermalink(router) {
    (0, _classCallCheck2["default"])(this, RoutingPermalink);
    (0, _defineProperty2["default"])(this, "_router", void 0);
    this._router = router;
    this.linkFragments = {};
    this.rawFragments = {};
  }

  (0, _createClass2["default"])(RoutingPermalink, [{
    key: "router",
    get: function get() {
      return this._router;
    },
    set: function set(value) {
      this._router = value;
    }
    /**
     * Sets one key of this.linkFragments to the given value.
     * @param key
     * @param value
     */

  }, {
    key: "updateLinkFragments",
    value: function updateLinkFragments(key, value) {
      if (!this.linkFragments) {
        this.linkFragments = {};
      }

      this.linkFragments[key] = value;
      this.updateUrl();
    }
    /**
     * Checks the current values in this.linkFragments and updates the browser URL.
     */

  }, {
    key: "updateUrl",
    value: function updateUrl() {
      var url = "?mapsParams=";
      var fragments = this.linkFragments;

      if (fragments.mode && fragments.mode === "area") {
        url += fragments.mode ? "m:" + fragments.mode + "/" : "";
        url += fragments.addressArea ? "a:" + fragments.addressArea[0] + "," + fragments.addressArea[1] + "/" : "";
        url += fragments.detourArea ? "d:" + fragments.detourArea + "/" : "";
        url += fragments.searchType ? "s:" + fragments.searchType + "/" : "";
        url += fragments.forceStart ? "f:" + fragments.forceStart : "";
        var completeUrl = window.location.pathname + url;
        history.pushState({}, null, completeUrl);
      } else if (fragments.mode && fragments.mode === "route") {
        url += fragments.mode ? "m:" + fragments.mode + "/" : "";
        url += fragments.fromAddress ? "af:" + fragments.fromAddress[0] + "," + fragments.fromAddress[1] + "/" : "";
        url += fragments.toAddress ? "at:" + fragments.toAddress[0] + "," + fragments.toAddress[1] + "/" : "";
        url += fragments.detourRoute ? "d:" + fragments.detourRoute + "/" : "";
        url += fragments.searchType ? "s:" + fragments.searchType + "/" : "";
        url += fragments.forceStart ? "f:" + fragments.forceStart : "";

        var _completeUrl = window.location.pathname + url;

        history.pushState({}, null, _completeUrl);
      }
    }
    /**
     * Checks if there are GET params loaded into the mapData and triggers the search accordingly.
     * The first param is expected to be either "route" or "area" to indicate the type of search.
     * After that, the next param (or the next two, in case of "route") should be an address string.
     * The following parameters are detour/searchtype/forceStart.
     */

  }, {
    key: "handleInitialParams",
    value: function () {
      var _handleInitialParams = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var scope, arrParams, objParams, routerLayers, desiredButton, key, obj, innerKey, singleEntry, cmpValue;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.rawFragments = this.router.props.mapController.data.initialParams;
                scope = this;

                if (!this.rawFragments) {
                  _context.next = 30;
                  break;
                }

                _context.next = 5;
                return this.checkForOldParams();

              case 5:
                arrParams = this.rawFragments.split("/").map(function (pair) {
                  return pair.split(":");
                });
                objParams = {};
                arrParams.forEach(function (_ref) {
                  var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
                      key = _ref2[0],
                      value = _ref2[1];

                  return objParams[key] = value;
                });
                routerLayers = this.router.props.mapController.data.routerLayers;
                desiredButton = "";
                _context.t0 = _regenerator["default"].keys(routerLayers);

              case 11:
                if ((_context.t1 = _context.t0()).done) {
                  _context.next = 28;
                  break;
                }

                key = _context.t1.value;

                if (!routerLayers.hasOwnProperty(key)) {
                  _context.next = 26;
                  break;
                }

                obj = routerLayers[key];
                _context.t2 = _regenerator["default"].keys(obj);

              case 16:
                if ((_context.t3 = _context.t2()).done) {
                  _context.next = 26;
                  break;
                }

                innerKey = _context.t3.value;

                if (!obj.hasOwnProperty(innerKey)) {
                  _context.next = 24;
                  break;
                }

                singleEntry = obj[innerKey];
                cmpValue = objParams.s;

                if (!(singleEntry.mapLabel === cmpValue)) {
                  _context.next = 24;
                  break;
                }

                desiredButton = innerKey;
                return _context.abrupt("break", 28);

              case 24:
                _context.next = 16;
                break;

              case 26:
                _context.next = 11;
                break;

              case 28:
                // iterate buttons later on when the UI is built
                this.desiredButtonRouting = desiredButton;

                if (objParams.m === "area") {
                  this.handleInitialAreaSearch(objParams);
                } else if (objParams.m === "route") {
                  this.handleInitialRouteSearch(objParams);
                }

              case 30:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function handleInitialParams() {
        return _handleInitialParams.apply(this, arguments);
      }

      return handleInitialParams;
    }()
    /**
     * Checks the URL for the deprecated URL structure and converts it to the current structure.
     */

  }, {
    key: "checkForOldParams",
    value: function () {
      var _checkForOldParams = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var strParams, params, arrFragments, fromCoords, toCoords, coords;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                strParams = "";
                params = this.router.props.mapController.data.initialParams;

                if (!(params.indexOf("m:") !== -1)) {
                  _context2.next = 4;
                  break;
                }

                return _context2.abrupt("return");

              case 4:
                arrFragments = params.split("/");
                strParams += "m:" + arrFragments[0] + "/";

                if (!(arrFragments[0] === "route")) {
                  _context2.next = 20;
                  break;
                }

                _context2.next = 9;
                return this.router.performGeoSearch(arrFragments[1]);

              case 9:
                fromCoords = _context2.sent;
                _context2.next = 12;
                return this.router.performGeoSearch(arrFragments[2]);

              case 12:
                toCoords = _context2.sent;
                strParams += "af:" + fromCoords.join() + "/";
                strParams += "at:" + toCoords.join() + "/";
                strParams += "d:" + arrFragments[3] + "/";
                strParams += "s:" + arrFragments[4] + "/";
                strParams += "f:" + arrFragments[5] + "/";
                _context2.next = 27;
                break;

              case 20:
                _context2.next = 22;
                return this.router.performGeoSearch(arrFragments[1]);

              case 22:
                coords = _context2.sent;
                strParams += "a:" + coords.join() + "/";
                strParams += "d:" + arrFragments[2] + "/";
                strParams += "s:" + arrFragments[3] + "/";
                strParams += "f:" + arrFragments[4] + "/";

              case 27:
                this.rawFragments = strParams;

              case 28:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function checkForOldParams() {
        return _checkForOldParams.apply(this, arguments);
      }

      return checkForOldParams;
    }()
  }, {
    key: "handleInitialAreaSearch",
    value: function handleInitialAreaSearch(objParams) {
      this.router.setState({
        mode: "area"
      });
      var center = objParams.a;

      if (center) {
        center = center.split(",");
      }

      var detour = objParams.d;
      var searchtype = objParams.s;
      var forceStart = objParams.f;

      if (detour || detour > 1) {
        this.updateLinkFragments("detour", detour); // jQuery(this.toggleDetourArea).val(detour);
        // jQuery(this.toggleDetourArea).trigger('input');
      }

      if (center && center.length === 2) {
        this.updateLinkFragments("addressArea", center);
        this.router.setAreaPoint(center);
      }

      if (searchtype) {
        this.updateLinkFragments("searchType", searchtype);
      }

      if (forceStart) {
        this.updateLinkFragments("forceStart", forceStart);
      } // activate area view


      jQuery(".c4g-portside-viewtriggerbar .c4g-area-search").click();
    }
  }, {
    key: "handleInitialRouteSearch",
    value: function handleInitialRouteSearch(objParams) {
      this.router.setState({
        mode: "route"
      });
      var fromAddress = objParams.af ? objParams.af.split(",").map(function (elem) {
        return parseFloat(elem);
      }) : null;
      var toAddress = objParams.at ? objParams.at.split(",").map(function (elem) {
        return parseFloat(elem);
      }) : null;
      var detour = objParams.d;
      var searchtype = objParams.s;
      var forceStart = objParams.f;

      if (detour) {
        jQuery(this.router.toggleDetourRoute).val(detour);
        jQuery(this.router.toggleDetourRoute).trigger('input');
        this.updateLinkFragments("detour", objParams.d);
      }

      if (fromAddress) {
        this.updateLinkFragments("fromAddress", fromAddress);
      }

      if (toAddress) {
        this.updateLinkFragments("toAddress", toAddress);
      }

      if (searchtype) {
        this.updateLinkFragments("searchType", objParams.s);
      }

      if (forceStart) {
        this.updateLinkFragments("forceStart", objParams.f);
      }

      if (fromAddress && toAddress) {
        this.router.setRouteFrom(fromAddress[0], fromAddress[1]);
        this.router.setRouteTo(toAddress[0], toAddress[1]);
      } // activate router view


      jQuery(".c4g-portside-viewtriggerbar .c4g-route-search").click();
    }
  }]);
  return RoutingPermalink;
}();

exports.RoutingPermalink = RoutingPermalink;

/***/ }),

/***/ "./Resources/public/js/components/c4g-autocomplete-input.jsx":
/*!*******************************************************************!*\
  !*** ./Resources/public/js/components/c4g-autocomplete-input.jsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AutocompleteInput = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AutocompleteInput = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(AutocompleteInput, _Component);

  var _super = _createSuper(AutocompleteInput);

  function AutocompleteInput(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, AutocompleteInput);
    _this = _super.call(this, props);
    _this.listenerRegistered = false;
    return _this;
  }

  (0, _createClass2["default"])(AutocompleteInput, [{
    key: "render",
    value: function render() {
      var scope = this;

      var submitFunction = function submitFunction() {
        var field = $("#" + scope.props.cssId);
        field.trigger('change');
        var performSearchCallback;

        if (scope.props.cssId.indexOf("area") !== -1) {
          performSearchCallback = function performSearchCallback() {
            scope.props.router.performArea();
          };
        } else {
          performSearchCallback = function performSearchCallback() {
            scope.props.router.performViaRoute();
          };
        }

        var value = scope.props.cssId.indexOf('From') !== -1 ? "fromValue" : "toValue";
        scope.props.router.performSearch(field, value, performSearchCallback);
      };

      var enterListener = function enterListener(event, opt_this) {
        if (event.keyCode === 13) {
          submitFunction();
        } else {
          if ($(event.currentTarget).val().length === 0 && !event.keyCode) {
            //deleted
            if (typeof scope.props.objFunctions.deleteFunction === "function") {
              scope.props.objFunctions.deleteFunction(event.currentTarget, event.currentTarget.id);
            } else {
              // over points
              scope.props.objFunctions[scope.props.index].deleteFunction(event.currentTarget, event.currentTarget.id);
            }
          } else {
            scope.counter = Math.floor(Date.now());
            setTimeout(function () {
              if (scope.counter && scope.counter + 400 < Math.floor(Date.now())) {
                delete scope.counter;

                if (!scope.props.objSettings.proxyUrl || !scope.props.objSettings.keyAutocomplete) {
                  var value = scope.props.cssId.indexOf('From') !== -1 ? "fromValue" : "toValue";
                  var field = $("#" + scope.props.cssId);
                  scope.props.router.performSearch(field, value);
                } else {
                  scope.autocompleteAddress($("#" + scope.props.cssId).val(), "#" + scope.props.cssId);
                }
              }
            }, 500);
          }
        }
      };

      return /*#__PURE__*/_react["default"].createElement("input", {
        id: this.props.cssId,
        type: "search",
        defaultValue: this.props.value,
        onKeyDown: enterListener,
        autoComplete: "off"
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var scope = this;
      var arrNames;

      if (this.props.cssId.indexOf("From") !== -1) {
        arrNames = this.props.containerAddresses.arrFromNames;
      } else if (this.props.cssId.indexOf("To") !== -1) {
        arrNames = this.props.containerAddresses.arrToNames;
      } else if (this.props.cssId.indexOf("Over") !== -1) {
        arrNames = this.props.containerAddresses.arrOverNames[this.props.index];
      } else if (this.props.cssId.indexOf("area") !== -1) {
        arrNames = this.props.containerAddresses.arrAreaNames;
      }

      var inputField = jQuery('#' + this.props.cssId);

      if (inputField && typeof inputField.autocomplete == 'function') {
        inputField.autocomplete({
          source: arrNames
        });
      } // only register listener once


      if (!this.listenerRegistered) {
        inputField.on('autocompleteselect', function (event, ui) {
          if (scope.props.index) {
            scope.props.objFunctions[scope.props.index].selectListener(event, ui);
          } else {
            scope.props.objFunctions.selectListener(event, ui);
          }
        });
        this.listenerRegistered = true;
      }
    }
  }, {
    key: "setCenter",
    value: function setCenter(center) {
      this.objSettings.center = center;
    }
  }, {
    key: "autocompleteAddress",
    value: function autocompleteAddress(input, cssClass) {
      var scope = this;
      var settings = scope.props.objSettings;
      var center;

      if (settings.center) {
        if (typeof settings.center === "function") {
          var objCenter = settings.center();
          center = objCenter[0] + "," + objCenter[1];
        } else {
          center = settings.center[0] + "," + settings.center[1];
        }
      } else if (settings.bBox) {
        center = (parseFloat(settings.bBox[0]) + parseFloat(settings.bBox[2])) / 2 + "," + (parseFloat(settings.bBox[1]) + parseFloat(settings.bBox[3])) / 2;
      }

      var url;

      if (center) {
        url = settings.proxyUrl + "autocomplete.php?format=json&key=" + settings.keyAutocomplete + "&q=" + input + "&center=" + center;
      } else {
        url = settings.proxyUrl + "autocomplete.php?format=json&key=" + settings.keyAutocomplete + "&q=" + input;
      }

      if (settings.geosearchParams) {
        for (var param in settings.geosearchParams) {
          if (settings.geosearchParams.hasOwnProperty(param)) {
            url += "&" + param + "=" + settings.geosearchParams[param];
          }
        }
      }

      $.ajax({
        url: url
      }).done(function (data) {
        var center;

        if (settings.center) {
          center = settings.center;
        } else if (settings.bBox) {
          center = [(parseFloat(settings.bBox[0]) + parseFloat(settings.bBox[2])) / 2, (parseFloat(settings.bBox[1]) + parseFloat(settings.bBox[3])) / 2];
        }

        if (data.length > 0) {
          if (data[0] && data[0].display_name && center) {
            // $(cssId).val(data[0].display_name);
            var arrAddresses = [];

            for (var i in data) {
              if (data.hasOwnProperty(i)) {
                if (settings.bBox && settings.bBox[0]) {
                  if (scope.isInBoundingBox(data[i].lon, data[i].lat, settings.bBox)) {
                    var distance = Math.sqrt((center[0] - data[i].lon) * (center[0] - data[i].lon) + (center[1] - data[i].lat) * (center[1] - data[i].lat));
                    var element = {
                      'dist': distance,
                      'pos': [data[i].lat, data[i].lon],
                      'name': data[i].display_name
                    };
                    arrAddresses.push(element);
                  }
                }
              }
            }

            arrAddresses.sort(function (a, b) {
              return a.dist - b.dist;
            });

            for (var _i in arrAddresses) {
              if (arrAddresses.hasOwnProperty(_i)) {
                if (cssClass.indexOf('from') !== -1) {
                  // do not add twice
                  if (!scope.props.containerAddresses.arrFromNames.includes(arrAddresses[_i].name)) {
                    scope.props.containerAddresses.arrFromNames.push(arrAddresses[_i].name);
                    scope.props.containerAddresses.arrFromPositions.push(arrAddresses[_i].pos);
                  }
                } else if (cssClass.indexOf('to') !== -1) {
                  if (!scope.props.containerAddresses.arrToNames.includes(arrAddresses[_i].name)) {
                    scope.props.containerAddresses.arrToNames.push(arrAddresses[_i].name);
                    scope.props.containerAddresses.arrToPositions.push(arrAddresses[_i].pos);
                  }
                } else if (cssClass.indexOf('over') !== -1) {
                  if (!scope.props.containerAddresses.arrOverNames[scope.props.index].includes(arrAddresses[_i].name)) {
                    scope.props.containerAddresses.arrOverNames[scope.props.index].push(arrAddresses[_i].name);
                    scope.props.containerAddresses.arrOverPositions[scope.props.index].push(arrAddresses[_i].pos);
                  }
                } else if (cssClass.indexOf('area') !== -1) {
                  if (!scope.props.containerAddresses.arrAreaNames.includes(arrAddresses[_i].name)) {
                    scope.props.containerAddresses.arrAreaNames.push(arrAddresses[_i].name);
                    scope.props.containerAddresses.arrAreaPositions.push(arrAddresses[_i].pos);
                  }
                } else {
                  console.log("This is weird Â¯\\_(ã)_/Â¯");
                }
              }
            } // trigger keydown event to show autocomplete options


            var _event = jQuery.Event("keydown", {
              keyCode: 8
            });

            $(cssClass).trigger(_event);
          }

          for (var _i2 in data) {
            if (data.hasOwnProperty(_i2)) {
              if (cssClass.indexOf('From') !== -1) {
                // do not add twice
                if (!scope.props.containerAddresses.arrFromNames.includes(data[_i2].display_name)) {
                  scope.props.containerAddresses.arrFromNames.push(data[_i2].display_name);
                  scope.props.containerAddresses.arrFromPositions.push([data[_i2].lat, data[_i2].lon]);
                }
              } else if (cssClass.indexOf('To') !== -1) {
                if (!scope.props.containerAddresses.arrToNames.includes(data[_i2].display_name)) {
                  scope.props.containerAddresses.arrToNames.push(data[_i2].display_name);
                  scope.props.containerAddresses.arrToPositions.push([data[_i2].lat, data[_i2].lon]);
                }
              } else if (cssClass.indexOf('Over') !== -1) {
                if (!scope.props.containerAddresses.arrOverNames[scope.props.index].includes(data[_i2].display_name)) {
                  scope.props.containerAddresses.arrOverNames[scope.props.index].push(data[_i2].display_name);
                  scope.props.containerAddresses.arrOverPositions[scope.props.index].push([data[_i2].lat, data[_i2].lon]);
                }
              } else if (cssClass.indexOf('area') !== -1) {
                if (!scope.props.containerAddresses.arrAreaNames.includes(data[_i2].display_name)) {
                  scope.props.containerAddresses.arrAreaNames.push(data[_i2].display_name);
                  scope.props.containerAddresses.arrAreaPositions.push([data[_i2].lat, data[_i2].lon]);
                }
              } else {
                console.log("This is weird Â¯\\_(ã)_/Â¯");
              }
            }
          }

          scope.props.router.setState({
            containerAddresses: scope.props.containerAddresses
          }); // trigger keydown event to show autocomplete options

          var event = jQuery.Event("keydown", {
            keyCode: 8
          });
          $(cssClass).trigger(event);
        }
      });
    }
  }, {
    key: "isInBoundingBox",
    value: function isInBoundingBox(longitude, latitude, bbox) {
      if (typeof longitude === "string") {
        longitude = parseFloat(longitude);
      }

      if (typeof latitude === "string") {
        latitude = parseFloat(latitude);
      }

      if (bbox[0] < longitude && longitude < bbox[2] && bbox[1] < latitude && latitude < bbox[3]) {
        return true;
      } else {
        return false;
      }
    }
  }]);
  return AutocompleteInput;
}(_react.Component);

exports.AutocompleteInput = AutocompleteInput;

/***/ }),

/***/ "./Resources/public/js/components/c4g-geosearch.jsx":
/*!**********************************************************!*\
  !*** ./Resources/public/js/components/c4g-geosearch.jsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof3 = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _control = __webpack_require__(/*! ol/control */ "./node_modules/ol/control.js");

var _c4gMapsI18n = __webpack_require__(/*! ./../c4g-maps-i18n */ "./Resources/public/js/c4g-maps-i18n.js");

var _c4gMapsConstant = __webpack_require__(/*! ./../c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");

var _proj = __webpack_require__(/*! ol/proj */ "./node_modules/ol/proj.js");

var _easing = __webpack_require__(/*! ol/easing */ "./node_modules/ol/easing.js");

var _source = __webpack_require__(/*! ol/source */ "./node_modules/ol/source.js");

var _layer = __webpack_require__(/*! ol/layer */ "./node_modules/ol/layer.js");

var _style = __webpack_require__(/*! ol/style */ "./node_modules/ol/style.js");

var _ol = __webpack_require__(/*! ol */ "./node_modules/ol/index.js");

var _geom = __webpack_require__(/*! ol/geom */ "./node_modules/ol/geom.js");

var _render = __webpack_require__(/*! ol/render */ "./node_modules/ol/render.js");

var _Observable = __webpack_require__(/*! ol/Observable */ "./node_modules/ol/Observable.js");

var _c4gMapsUtils = __webpack_require__(/*! ../c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");

var _extent = __webpack_require__(/*! ol/extent */ "./node_modules/ol/extent.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

//import {GeoSearchResults} from "./c4g-geosearch-results.jsx";
var GeoSearchResults = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-geosearch-results_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-geosearch-results.jsx */ "./Resources/public/js/components/c4g-geosearch-results.jsx"));
});

var Titlebar = /*#__PURE__*/_react["default"].lazy(function () {
  return Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-titlebar.jsx */ "./Resources/public/js/components/c4g-titlebar.jsx"));
});

var GeoSearch = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(GeoSearch, _Component);

  var _super = _createSuper(GeoSearch);

  function GeoSearch(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, GeoSearch);
    _this = _super.call(this, props);
    _this.langConstants = (0, _c4gMapsI18n.getLanguage)(props.mapController.data); // control
    // if (this.props.collapsed) {

    _this.clickControl = _this.clickControl.bind((0, _assertThisInitialized2["default"])(_this));
    _this.doneFunction = _this.doneFunction.bind((0, _assertThisInitialized2["default"])(_this));
    var element = document.createElement('div');
    var button = document.createElement('button');
    button.setAttribute('aria-label', _this.langConstants.CTRL_GEOSEARCH);
    button.setAttribute('title', _this.langConstants.CTRL_GEOSEARCH);
    element.className = "c4g-geosearch" + " ol-control " + "ol-unselectable";

    if (props.external) {
      element.className += " c4g-external";
    }

    element.appendChild(button);
    jQuery(button).on('click', _this.clickControl);
    var control = new _control.Control({
      element: element,
      target: props.target
    });
    props.mapController.map.addControl(control); // }
    // end control
    // prepare search-configuration
    //

    _this.config = {};

    if (props.mapController.data.geosearch.searchKey && props.mapController.data.geosearch.url) {
      _this.config.url = props.mapController.data.geosearch.url + "search.php";
      _this.config.key = props.mapController.data.geosearch.searchKey;
      _this.config.params = props.mapController.data.geosearch.params;
    } else {
      _this.config.url = props.mapController.data.api.geosearch + "/" + props.mapController.data.profile;
    } // zoomlevel when centering the found location


    _this.config.zoomlevel = props.searchZoom; // zoom to bounds instead of zoomlevel when centering the found location

    _this.config.zoombounds = props.zoomBounds; // quicksearch-option (instantly jump to the first found location)

    _this.config.quicksearch = props.quicksearch || true; // animation (animate flight to targeted location)

    _this.config.animate = props.animate; // highlight the result location

    _this.config.markResult = props.markResult;
    _this.config.animateDuration = props.animateDuration;
    _this.config.resultDuration = props.resultDuration;
    _this.config.popup = props.popup;
    _this.config.autopick = props.autopick;
    _this.config.mapController = props.mapController;
    _this.config.results = props.results;
    _this.config.resultStyle = props.resultStyle;

    if (_this.config.resultStyle && parseInt(_this.config.resultStyle, 10) > 0) {
      var scope = (0, _assertThisInitialized2["default"])(_this); // check if style is loaded, otherwise load it

      if (props.mapController.proxy.locationStyleController.arrLocStyles[_this.config.resultStyle]) {
        _this.config.resultStyle = props.mapController.proxy.locationStyleController.arrLocStyles[_this.config.resultStyle].style;
      } else {
        props.mapController.proxy.locationStyleController.loadLocationStyles([_this.config.resultStyle], {
          done: function done() {
            scope.config.resultStyle = props.mapController.proxy.locationStyleController.arrLocStyles[scope.config.resultStyle].style;
          }
        });
      }
    }

    _this.config.collapsed = props.collapsed;
    _this.config.resultCount = props.resultCount;
    _this.config.caching = props.caching;
    _this.config.placeholder = props.placeholder;
    _this.state = {
      open: !props.collapsed,
      query: "",
      // the search query
      results: [],
      currentCoordinate: [],
      openResults: false,
      // detailOpenResults: false,
      currentResult: null
    };
    _this.inputCallback = _this.inputCallback.bind((0, _assertThisInitialized2["default"])(_this));
    _this.startSearch = _this.startSearch.bind((0, _assertThisInitialized2["default"])(_this));
    _this.zoomTo = _this.zoomTo.bind((0, _assertThisInitialized2["default"])(_this));
    _this.closeResults = _this.closeResults.bind((0, _assertThisInitialized2["default"])(_this));
    _this.openResults = _this.openResults.bind((0, _assertThisInitialized2["default"])(_this));
    _this.close = _this.close.bind((0, _assertThisInitialized2["default"])(_this));
    _this.closeResultsCompletely = _this.closeResultsCompletely.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(GeoSearch, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var modeClass = this.state.open ? "c4g-open" : "c4g-close";

      if (this.props.extDiv) {
        modeClass += " external ";
      }

      var results = "";

      if (this.state.openResults && this.config.results) {
        results = /*#__PURE__*/_react["default"].createElement(GeoSearchResults, {
          className: modeClass,
          results: this.state.results,
          zoomFunc: function zoomFunc(idx) {
            _this2.setState({
              currentResult: _this2.state.results[idx]
            });

            _this2.zoomTo(idx);
          },
          closeResults: this.closeResults,
          headline: this.props.resultsHeadline,
          currentResult: this.state.currentResult,
          resultsDiv: this.props.resultsDiv,
          open: this.state.results.length > 0,
          openResults: this.openResults,
          closeCb: this.closeResultsCompletely
        });
      }

      var closeBtnClass = "";
      var closeBtnCb = "";

      if (this.config.collapsed) {
        closeBtnClass = "c4g-titlebar-close";
        closeBtnCb = this.close;
      }

      var headline = this.props.headline;

      if (!headline) {
        headline = this.langConstants.GEOSEARCH;
      }

      return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
        className: _c4gMapsConstant.cssConstants.GEOSEARCH_WRAPPER + " " + modeClass + " c4g-horizon"
      }, /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
        fallback: /*#__PURE__*/_react["default"].createElement("div", null, "Loading...")
      }, /*#__PURE__*/_react["default"].createElement(Titlebar, {
        wrapperClass: "c4g-geosearch-header",
        header: headline,
        headerClass: "c4g-geosearch-headline",
        detailBtnClass: "",
        detailBtnCb: "",
        closeBtnClass: closeBtnClass,
        closeBtnCb: closeBtnCb,
        closeBtnTitle: this.langConstants.CLOSE
      })), /*#__PURE__*/_react["default"].createElement("div", {
        className: "c4g-geosearch-filter"
      }, /*#__PURE__*/_react["default"].createElement("input", {
        type: "text",
        onKeyDown: this.inputCallback,
        id: "c4g-geosearch-input",
        placeholder: this.config.placeholder,
        "aria-label": this.config.placeholder
      }), /*#__PURE__*/_react["default"].createElement("button", {
        className: _c4gMapsConstant.cssConstants.GEOSEARCH_START,
        type: "button",
        title: this.langConstants.CTRL_START_SEARCH,
        onMouseUp: this.startSearch
      })), results));
    }
  }, {
    key: "closeResultsCompletely",
    value: function closeResultsCompletely() {
      this.setState({
        openResults: false
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      if (this.state.open) {
        if (prevState.open !== this.state.open) {
          this.props.mapController.setOpenComponent(this);
        }

        jQuery(".c4g-geosearch-container-right").addClass("c4g-open").removeClass("c4g-close");
      } else {
        jQuery(".c4g-geosearch-container-right").addClass("c4g-close").removeClass("c4g-open");
      }

      if (this.props.mapController.data.caching && !this.state.open) {
        var panelVal = _c4gMapsUtils.utils.getValue('panel');

        if (panelVal === this.constructor.name) {
          _c4gMapsUtils.utils.storeValue('panel', "");
        }
      }
    }
  }, {
    key: "close",
    value: function close() {
      this.setState({
        open: false
      });
    }
  }, {
    key: "startSearch",
    value: function startSearch(event) {
      event.stopPropagation();
      var button = document.querySelector(_c4gMapsConstant.cssConstants.GEOSEARCH_START);

      try {
        button.blur();
      } catch (ignore) {}

      var searchInput = jQuery("#c4g-geosearch-input");

      if (searchInput.val()) {
        this.findLocation(searchInput.val());
      }
    }
  }, {
    key: "inputCallback",
    value: function inputCallback(event) {
      event.stopPropagation();

      if (event.which === 13) {
        var searchInput = jQuery("#c4g-geosearch-input");

        if (searchInput.val()) {
          this.findLocation(searchInput.val());
        }

        return false;
      }
    }
  }, {
    key: "clickControl",
    value: function clickControl() {
      if (this.state.open) {
        this.setState({
          open: false
        });
        jQuery(this.props.mapController.searchContainer).removeClass("c4g-open").addClass("c4g-close");
      } else {
        // this.props.mapController.hideOtherComponents(this);
        this.setState({
          open: true
        });
        jQuery(this.props.mapController.searchContainer).removeClass("c4g-close").addClass("c4g-open");
        this.props.mapController.setOpenComponent(this);
      }
    }
  }, {
    key: "closeResults",
    value: function closeResults() {
      this.setState({
        detailOpenResults: false
      });
    }
  }, {
    key: "openResults",
    value: function openResults() {
      this.setState({
        detailOpenResults: true
      });
    }
  }, {
    key: "findLocation",
    value: function findLocation(location, opt_options) {
      var map, animate, animationDuration, markResult, mapController;
      var scope = this;
      mapController = this.props.mapController;
      map = mapController.map; // show spinner

      mapController.spinner.show();
      animate = this.config.animate;
      animationDuration = this.config.animateDuration;
      markResult = this.config.markResult;

      if ((0, _typeof2["default"])(opt_options) === 'object') {
        if (opt_options.animate !== undefined) {
          animate = opt_options.animate;
        }

        if (opt_options.markResult !== undefined) {
          markResult = opt_options.markResult;
        }
      }

      if (this.config.quicksearch) {
        var data = {
          format: "json",
          q: location
        };

        if (this.config.resultCount) {
          data.limit = this.config.resultCount;
        }

        if (this.config.key) {
          data.key = this.config.key;
        }

        if (this.config.params) {
          for (var param in this.config.params) {
            if (this.config.params.hasOwnProperty(param)) {
              data[param] = this.config.params[param];
            }
          }
        }

        var arrResults = _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.hook_search, [data, this]);

        if (arrResults && arrResults.length > 0) {
          this.config.mapController.spinner.hide();

          for (var i in arrResults) {
            if (arrResults.hasOwnProperty(i)) {
              this.doneFunction(arrResults[i]);
            }
          }
        } else {
          // AJAX -> @nominatim
          jQuery.ajax({
            dataType: "json",
            url: this.config.url,
            data: data
          }).done(this.doneFunction).fail(function () {// @TODO
            // self.resultWrapper.innerHTML = 'ohoh!';
          }).always(function () {
            scope.config.mapController.spinner.hide();
          });
        }
      } else {// @TODO
      }
    }
  }, {
    key: "doneFunction",
    value: function doneFunction(results) {
      var mapView,
          currentCoordinate,
          resultCoordinate,
          coordDif,
          difContext,
          viewExtent,
          result,
          osmExtent,
          resolution,
          zoomType,
          flyTo,
          completeSearch,
          mapController = this.props.mapController,
          map = mapController.map,
          animate = this.config.animate,
          animationDuration = this.config.animateDuration,
          markResult = this.config.markResult;

      if (results && results.length && results.length > 0) {
        mapView = map.getView();

        if (results[0]) {
          result = results[0];
          this.results = results;
          currentCoordinate = mapView.getCenter();
          resultCoordinate = (0, _proj.transform)([parseFloat(result.lon), parseFloat(result.lat)], 'EPSG:4326', 'EPSG:3857');

          if (animate) {
            this.flyTo(map, resultCoordinate, this.config.zoomlevel, this.config.zoombounds, result.bounding_box, markResult, this.config.resultDuration, animate, this.config.animateDuration, map.getView());
          } else {
            this.completeSearch(this.config.markResult, this.config.animate, zoomType, this.config.animateDuration, resultCoordinate, this.config.resultDuration);
            mapView.setCenter(resultCoordinate);

            if (this.config.zoomlevel >= 0) {
              map.getView().setZoom(this.config.zoomlevel);
            }
          }

          var pixel = map.getPixelFromCoordinate(resultCoordinate);
          var feature = map.forEachFeatureAtPixel(pixel, function (feature, layer) {
            return feature;
          });
          var layer = map.forEachFeatureAtPixel(pixel, function (feature, layer) {
            return layer;
          });

          if (this.config.popup) {
            var popupInfos = {};

            if (feature && feature.get('popup')) {
              // single POI
              popupInfos = feature.get('popup');
            } else if (layer && layer.popup) {
              popupInfos = layer.popup;
            } else {
              feature = false;
            }

            if (feature) {
              var geometry = feature.getGeometry();

              if (geometry instanceof _geom.Point) {
                var coord = geometry.getCoordinates();
              } else {
                var coord = resultCoordinate;
              }

              window.c4gMapsPopup.popup.setPosition(coord);

              if (popupInfos.content) {
                window.c4gMapsPopup.$content.html('');
                window.c4gMapsPopup.popup.addClass(_c4gMapsConstant.cssConstants.ACTIVE).addClass(_c4gMapsConstant.cssConstants.LOADING);
                window.c4gMapsPopup.spinner.show();

                if (popupInfos.async === false || popupInfos.async == '0') {
                  var objPopup = {};
                  objPopup.popup = popupInfos;
                  objPopup.feature = feature;
                  objPopup.layer = layer; // Call the popup hook for plugin specific popup content

                  if (window.c4gMapsHooks !== undefined && (0, _typeof2["default"])(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                    _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                  }

                  this.config.mapController.proxy.setPopup(objPopup);
                } else {
                  jQuery.ajax({
                    dataType: "json",
                    url: this.api_infowindow_url + '/' + popupInfos.content,
                    done: function done(data) {
                      var popupInfo = {
                        async: popupInfos.async,
                        content: data.content,
                        popup: popupInfos.popup,
                        routing_link: popupInfos.routing_link
                      };
                      objPopup = {};
                      objPopup.popup = popupInfo;
                      objPopup.feature = feature;
                      objPopup.layer = layer; // Call the popup hook for plugin specific popup content

                      if (window.c4gMapsHooks !== undefined && (0, _typeof2["default"])(window.c4gMapsHooks.proxy_fillPopup) === 'object') {
                        _c4gMapsUtils.utils.callHookFunctions(window.c4gMapsHooks.proxy_fillPopup, objPopup);
                      }

                      this.setPopup(objPopup);
                    }
                  });
                }
              } else {
                window.c4gMapsPopup.popup.removeClass(_c4gMapsConstant.cssConstants.ACTIVE);
              }
            } else if (window && window.c4gMapsPopup && window.c4gMapsPopup.popup) {
              jQuery(window.c4gMapsPopup.popup).removeClass(_c4gMapsConstant.cssConstants.ACTIVE);
            }
          }

          if (this.config.autopick && this.config.mapController.geopicker && typeof this.config.mapController.geopicker.pick === 'function') {
            this.config.mapController.geopicker.pick(resultCoordinate);
          }
        } else {
          var langConstants = (0, _c4gMapsI18n.getLanguage)(this.options.mapController.data);
          alert(langConstants.SEARCH_NOT_FOUND);
        }

        if (this.results) {
          var _results = [];

          for (var i = 0; i < this.results.length; i++) {
            _results.push(this.results[i].display_name);
          }

          this.setState({
            results: _results,
            currentCoordinate: currentCoordinate,
            openResults: true,
            currentResult: _results[0]
          });
        }
      }
    }
  }, {
    key: "flyTo",
    value: function flyTo(map, location, zoomlevel, zoombounds, boundingbox, markResult, resultDuration, animate, animateDuration, mapView) {
      var duration = animateDuration;
      var zoom = zoomlevel;
      var parts = 2;
      var called = false;
      var extent;
      var scope = this;

      function callback(complete) {
        --parts;

        if (called) {
          return;
        }

        if (parts === 0 || !complete) {
          called = true;

          if (zoombounds && boundingbox && boundingbox[0] !== null && boundingbox[1] !== null && boundingbox[2] !== null && boundingbox[3] !== null) {
            // translate osm-extent to ol3-extent
            var osmExtent = [];
            osmExtent.push(parseFloat(boundingbox[2]));
            osmExtent.push(parseFloat(boundingbox[0]));
            osmExtent.push(parseFloat(boundingbox[3]));
            osmExtent.push(parseFloat(boundingbox[1]));
            extent = (0, _proj.transformExtent)(osmExtent, 'EPSG:4326', 'EPSG:3857');
            window.setTimeout(function () {
              var viewFit = mapView.fit(extent, map.getSize(), {
                minZoom: mapView.get('minZoom') || 2,
                maxZoom: zoom || mapView.get('maxZoom') || 18,
                duration: duration / 2,
                easing: _easing.easeOut
              });
            }, duration);
          }

          scope.completeSearch(markResult, animate, "bounce", animateDuration, location, resultDuration);
        }
      }

      map.getView().animate({
        center: location,
        duration: duration
      }, callback);
      map.getView().animate({
        zoom: zoom - 1,
        duration: duration / 2
      }, {
        zoom: zoom,
        duration: duration / 2
      }, callback);
    }
  }, {
    key: "completeSearch",
    value: function completeSearch(markResult, animate, zoomType, animationDuration, resultCoordinate, resultDuration) {
      // result marker & animation
      if (markResult) {
        var addMarker, markerSource, markerLayer, animateMarker;
        markerSource = new _source.Vector();
        var style = this.config.resultStyle;

        if (!style || style === "0") {
          style = [new _style.Style({
            image: new _style.Circle({
              radius: 7,
              snapToPixel: false,
              stroke: new _style.Stroke({
                color: 'rgba(200, 0, 0, ' + 0.9 + ')',
                width: 2,
                opacity: 0.9
              })
            })
          }), new _style.Style({
            image: new _style.Circle({
              radius: 20,
              snapToPixel: false,
              stroke: new _style.Stroke({
                color: 'rgba(200, 0, 0, ' + 0.9 + ')',
                width: 2,
                opacity: 0.9
              })
            })
          }), new _style.Style({
            image: new _style.Circle({
              radius: 33,
              snapToPixel: false,
              stroke: new _style.Stroke({
                color: 'rgba(200, 0, 0, ' + 0.9 + ')',
                width: 2,
                opacity: 0.9
              })
            })
          })];
        }

        markerLayer = new _layer.Vector({
          style: style,
          source: markerSource,
          zIndex: 99999
        });
        this.props.mapController.map.addLayer(markerLayer);

        addMarker = function addMarker() {
          markerSource.addFeature(new _ol.Feature(new _geom.Point(resultCoordinate)));
        };

        animateMarker = function animateMarker(feature) {
          var animationStep, start, duration, listenerKey;
          start = new Date().getTime();
          duration = resultDuration;

          animationStep = function animationStep(event) {
            var vectorContext, frameState, elapsed, elapsedRatio, radius, opacity, flashGeom;
            vectorContext = (0, _render.getVectorContext)(event);
            frameState = event.frameState;
            flashGeom = feature.getGeometry().clone();
            elapsed = frameState.time - start;
            elapsedRatio = elapsed / duration;
            radius = (0, _easing.linear)(1 - elapsedRatio) * 100;

            if (radius < 0) {
              radius = 0;
            }

            opacity = (0, _easing.linear)(elapsedRatio);
            var marker = new _style.Style();
            vectorContext.setStyle(marker);
            vectorContext.drawGeometry(flashGeom, null);

            if (elapsed > duration) {
              markerSource.clear();
              (0, _Observable.unByKey)(listenerKey);
              return;
            } // continue postrender animation


            frameState.animate = true;
          }; // end of "animationStep"


          listenerKey = markerLayer.on('postrender', animationStep);
        }; // end of "animateMarker"


        markerSource.on('addfeature', function (event) {
          animateMarker(event.feature);
        });

        if (animate) {
          if (zoomType === 'zoom') {
            window.setTimeout(addMarker, animationDuration / 2);
          } else {
            window.setTimeout(addMarker, animationDuration / 2);
          }
        } else {
          addMarker();
        }
      } // end of result marker & animation handling

    }
    /**
     * @TODO
     *
     * @param   {[type]}  location  [description]
     *
     * @return  {[type]}            [description]
     */

  }, {
    key: "zoomTo",
    value: function zoomTo(index) {
      var map, result, resultCoordinate, mapController, zoomType;
      var scope = this;
      mapController = this.props.mapController;
      map = mapController.map;
      var mapView = map.getView();
      var currentCoordinate = this.state.currentCoordinate;
      result = scope.results[index];
      resultCoordinate = (0, _proj.transform)([parseFloat(result.lon), parseFloat(result.lat)], 'EPSG:4326', 'EPSG:3857');

      if (this.config.animate) {
        var resolution = mapView.getResolution();
        var viewExtent = mapView.calculateExtent(map.getSize());

        if ((0, _extent.containsCoordinate)(viewExtent, resultCoordinate)) {
          zoomType = 'zoom';
        } else {
          if (Math.abs(currentCoordinate[0] - resultCoordinate[0]) > Math.abs(currentCoordinate[1] - resultCoordinate[1])) {
            var coordDif = Math.abs(currentCoordinate[0] - resultCoordinate[0]);
            var difContext = (0, _extent.getWidth)(viewExtent);
          } else {
            coordDif = Math.abs(currentCoordinate[1] - resultCoordinate[1]);
            difContext = (0, _extent.getHeight)(viewExtent);
          }

          if (coordDif > 0) {
            resolution *= coordDif / difContext;
          }

          zoomType = 'bounce';
        }

        this.flyTo(map, resultCoordinate, this.config.zoomlevel, this.config.zoombounds, result.bounding_box, this.config.markResult, this.config.resultDuration, this.config.animate, this.config.animateDuration, mapView);
      } else {
        this.completeSearch(this.config.markResult, this.config.animate, zoomType, this.config.animateDuration, resultCoordinate, this.config.resultDuration);
        map.getView().setCenter(resultCoordinate);

        if (this.config.zoomlevel >= 0) {
          map.getView().setZoom(this.config.zoomlevel);
        }
      }
    }
  }]);
  return GeoSearch;
}(_react.Component);

exports.default = GeoSearch;

/***/ }),

/***/ "./Resources/public/js/components/c4g-maps.jsx":
/*!*****************************************************!*\
  !*** ./Resources/public/js/components/c4g-maps.jsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _c4gMapsProxy = __webpack_require__(/*! ../c4g-maps-proxy */ "./Resources/public/js/c4g-maps-proxy.js");

var _c4gMapsConstant = __webpack_require__(/*! ../c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");

var _c4gMapsMiscSpinner = __webpack_require__(/*! ../c4g-maps-misc-spinner */ "./Resources/public/js/c4g-maps-misc-spinner.js");

var _c4gMapsMiscMaphover = __webpack_require__(/*! ../c4g-maps-misc-maphover */ "./Resources/public/js/c4g-maps-misc-maphover.js");

var _layer = __webpack_require__(/*! ol/layer */ "./node_modules/ol/layer.js");

var _c4gMapsUtils = __webpack_require__(/*! ../c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");

var _c4gMapsControls = __webpack_require__(/*! ../c4g-maps-controls */ "./Resources/public/js/c4g-maps-controls.js");

var _c4gMapsI18n = __webpack_require__(/*! ../c4g-maps-i18n */ "./Resources/public/js/c4g-maps-i18n.js");

var _ol = __webpack_require__(/*! ol */ "./node_modules/ol/index.js");

var _proj = __webpack_require__(/*! ol/proj */ "./node_modules/ol/proj.js");

var _interaction = __webpack_require__(/*! ol/interaction */ "./node_modules/ol/interaction.js");

var _control = __webpack_require__(/*! ol/control */ "./node_modules/ol/control.js");

var _geom = __webpack_require__(/*! ol/geom */ "./node_modules/ol/geom.js");

var _extent = __webpack_require__(/*! ol/extent */ "./node_modules/ol/extent.js");

var _condition = __webpack_require__(/*! ol/events/condition */ "./node_modules/ol/events/condition.js");

var _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _c4gGeosearch = _interopRequireDefault(__webpack_require__(/*! ./c4g-geosearch.jsx */ "./Resources/public/js/components/c4g-geosearch.jsx"));

var _Tile = _interopRequireDefault(__webpack_require__(/*! ol/layer/Tile */ "./node_modules/ol/layer/Tile.js"));

var _routingConstantI18nEn = __webpack_require__(/*! ./../routing-constant-i18n-en */ "./Resources/public/js/routing-constant-i18n-en.js");

var _routingConstantI18nDe = __webpack_require__(/*! ./../routing-constant-i18n-de */ "./Resources/public/js/routing-constant-i18n-de.js");

var _c4gRouterView = __webpack_require__(/*! ./c4g-router-view.jsx */ "./Resources/public/js/components/c4g-router-view.jsx");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var FeatureFilter = /*#__PURE__*/_react["default"].lazy(function () {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_opening_hours_build_opening_hours_js"), __webpack_require__.e("Resources_public_js_components_c4g-feature-filter_jsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-feature-filter.jsx */ "./Resources/public/js/components/c4g-feature-filter.jsx"));
});

var BaselayerSwitcher = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-baselayerswitcher_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-baselayerswitcher.jsx */ "./Resources/public/js/components/c4g-baselayerswitcher.jsx"));
});

var StarboardPanel = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-starboard-panel_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-starboard-panel.jsx */ "./Resources/public/js/components/c4g-starboard-panel.jsx"));
});

var Infopage = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-infopage_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-infopage.jsx */ "./Resources/public/js/components/c4g-infopage.jsx"));
});

var Measuretools = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-measuretools_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-measuretools.jsx */ "./Resources/public/js/components/c4g-measuretools.jsx"));
});

var Permalink = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-permalink_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-permalink.jsx */ "./Resources/public/js/components/c4g-permalink.jsx"));
});

var Zoom = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-zoom_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-zoom.jsx */ "./Resources/public/js/components/c4g-zoom.jsx"));
});

var ZoomExtent = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-zoom-extent_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-zoom-extent.jsx */ "./Resources/public/js/components/c4g-zoom-extent.jsx"));
});

var ZoomHome = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-zoom-home_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-zoom-home.jsx */ "./Resources/public/js/components/c4g-zoom-home.jsx"));
});

var ZoomPosition = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-zoom-position_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-zoom-position.jsx */ "./Resources/public/js/components/c4g-zoom-position.jsx"));
});

var Grid = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-grid_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-grid.jsx */ "./Resources/public/js/components/c4g-grid.jsx"));
});

var Rotate = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-rotate_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-rotate.jsx */ "./Resources/public/js/components/c4g-rotate.jsx"));
});

var Fullscreen = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-fullscreen_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-fullscreen.jsx */ "./Resources/public/js/components/c4g-fullscreen.jsx"));
});

var Print = /*#__PURE__*/_react["default"].lazy(function () {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_dom-to-image-more_src_dom-to-image-more_js-node_modules_file-saver_dist_-378b1b"), __webpack_require__.e("Resources_public_js_components_c4g-print_jsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-print.jsx */ "./Resources/public/js/components/c4g-print.jsx"));
});

var OverviewMap = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-overviewmap_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-overviewmap.jsx */ "./Resources/public/js/components/c4g-overviewmap.jsx"));
}); //const RouterView = React.lazy(() => import("./c4g-router-view.jsx"));


var EditorComponent = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-editor-component_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-editor-component.jsx */ "./Resources/public/js/components/c4g-editor-component.jsx"));
});

// import {EditorComponent} from "./c4g-editor-component.jsx";
var langRouteConstants = {};
var containerAddresses = {
  arrFromPositions: [],
  arrFromNames: [],
  arrToPositions: [],
  arrToNames: [],
  arrOverPositions: {},
  arrOverNames: {}
};
var langConstants = {};
'use strict';

var MapController = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(MapController, _Component);

  var _super = _createSuper(MapController);

  /**
   * [MapController description]
   * @param {json-object}  mapData  Object to configure con4gis-maps.
   *                                See "docs/mapData-values.md"
   *                                to get a list of valid values for this object.
   */
  function MapController(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, MapController);
    _this = _super.call(this, props); //---

    var mapData = props.mapData;
    _this.state = {
      objLayers: [],
      arrLayerStates: [],
      openComponent: null,
      objTabLayers: [],
      styleData: {},
      arrTabLayerStates: []
    };
    _this.setObjLayers = _this.setObjLayers.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setLayerStates = _this.setLayerStates.bind((0, _assertThisInitialized2["default"])(_this));
    _this.changeActiveLayers = _this.changeActiveLayers.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setTabStates = _this.setTabStates.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setLocStyles = _this.setLocStyles.bind((0, _assertThisInitialized2["default"])(_this));
    _this.changeCollapseState = _this.changeCollapseState.bind((0, _assertThisInitialized2["default"])(_this));
    _this.map = null;
    langConstants = (0, _c4gMapsI18n.getLanguage)(mapData);
    var self = (0, _assertThisInitialized2["default"])(_this),
        permalink = false,
        minZoom,
        maxZoom,
        view,
        geoLocation,
        controls = [],
        interactions = [],
        displayAllLocations,
        domMapDiv,
        kinetic,
        starboard_label,
        enableStarboard = true; //--

    mapData = jQuery.extend({
      api: {},
      addIdToDiv: false,
      mapId: 1,
      mapDiv: 'c4g_map',
      center: {},
      calc_extent: 'CENTERZOOM',
      attribution: {},
      editor: {},
      measuretools: {},
      infopage: {},
      account: '',
      starboard: {},
      layerswitcher: {},
      baselayerswitcher: {},
      geosearch: {}
    }, mapData);

    if (mapData.calc_extent === 'LOCATIONS' || mapData.calc_extent === 'CENTERLOCS') {
      mapData = jQuery.extend({
        min_gap: 25
      }, mapData);
    } // center


    mapData.center = jQuery.extend({
      lat: 52.22,
      lon: 9.43,
      rotation: 0,
      zoom: 6
    }, mapData.center); // attribution

    mapData.attribution = jQuery.extend({
      enable: true,
      collapsed: false,
      collapsible: true
    }, mapData.attribution); // geosearch

    mapData.geosearch = jQuery.extend({
      enable: false,
      div: false
    }, mapData.geosearch); // permalink

    mapData.permalink = jQuery.extend({
      enable: false,
      get_parameter: false
    }, mapData.permalink);
    _this.data = mapData;

    if (mapData.addIdToDiv) {
      mapData.mapDiv += '_' + mapData.mapId;
    } // PHPStorm marks this as error, but it is none
    // This is needed for preventing an error with the OSM-Overpass API
    // which occurs when MooTools is loaded


    if (window.MooTools && Browser.Document) {
      Document = Browser.Document;
    } // check permalink


    if (mapData.permalink.enable) {
      permalink = _c4gMapsUtils.utils.getUrlParam(mapData.permalink.get_parameter);

      if (permalink) {
        permalink = permalink.split('/');

        switch (permalink.length) {
          case 6:
            permalink[0] = parseFloat(permalink[0]);
            mapData.center.lon = !isNaN(permalink[0]) ? permalink[0] : mapData.center.lon;
            permalink[1] = parseFloat(permalink[1]);
            mapData.center.lat = !isNaN(permalink[1]) ? permalink[1] : mapData.center.lat;
            permalink[2] = parseInt(permalink[2], 10);
            mapData.center.zoom = !isNaN(permalink[2]) ? permalink[2] : mapData.center.zoom;
            permalink[3] = parseFloat(permalink[3]);
            mapData.center.rotation = !isNaN(permalink[3]) ? permalink[3] : mapData.center.rotation;
            permalink[4] = parseInt(permalink[4], 10);
            mapData.baselayer = !isNaN(permalink[4]) ? permalink[4] : mapData.baselayer;
            mapData.layers = permalink[5].split(':'); // decode deltaEncoding

            mapData.layers = _c4gMapsUtils.utils.deltaDecode(mapData.layers);
            break;

          case 3:
            permalink[0] = parseFloat(permalink[0]);
            mapData.center.lon = !isNaN(permalink[0]) ? permalink[0] : mapData.center.lon;
            permalink[1] = parseFloat(permalink[1]);
            mapData.center.lat = !isNaN(permalink[1]) ? permalink[1] : mapData.center.lat;
            permalink[2] = parseInt(permalink[2], 10);
            mapData.center.zoom = !isNaN(permalink[2]) ? permalink[2] : mapData.center.zoom; // disable zooming to all locations

            mapData.calc_extent = "CENTERZOOM";
            break;

          case 2:
            // baselayer and layers only
            permalink[0] = parseInt(permalink[0], 10);
            mapData.baselayer = !isNaN(permalink[0]) ? permalink[0] : mapData.baselayer;
            mapData.layers = permalink[1].split(':'); // decode deltaEncoding

            mapData.layers = _c4gMapsUtils.utils.deltaDecode(mapData.layers);
            break;

          case 1:
            // layers only
            mapData.layers = permalink[0].split(':'); // decode deltaEncoding

            mapData.layers = _c4gMapsUtils.utils.deltaDecode(mapData.layers);
            break;

          default:
            // invalid count of permalink parameters
            permalink = false;
            mapData.layers = false;
        }
      } else {
        // just to make sure this var is really "false"
        permalink = false;
      }
    } else {
      permalink = _c4gMapsUtils.utils.getUrlParam(mapData.permalink.get_parameter);

      if (permalink) {
        permalink = permalink.split('/');

        if (permalink.length === 3) {
          permalink[0] = parseFloat(permalink[0]);
          mapData.center.lon = !isNaN(permalink[0]) ? permalink[0] : mapData.center.lon;
          permalink[1] = parseFloat(permalink[1]);
          mapData.center.lat = !isNaN(permalink[1]) ? permalink[1] : mapData.center.lat;
          permalink[2] = parseInt(permalink[2], 10);
          mapData.center.zoom = !isNaN(permalink[2]) ? permalink[2] : mapData.center.zoom; // disable zooming to all locations

          mapData.calc_extent = "CENTERZOOM";
        } else if (permalink.length === 4) {
          permalink[0] = parseFloat(permalink[0]);
          mapData.center.lon = !isNaN(permalink[0]) ? permalink[0] : mapData.center.lon;
          permalink[1] = parseFloat(permalink[1]);
          mapData.center.lat = !isNaN(permalink[1]) ? permalink[1] : mapData.center.lat;
          permalink[2] = parseInt(permalink[2], 10);
          mapData.center.zoom = !isNaN(permalink[2]) ? permalink[2] : mapData.center.zoom;
          permalink[3] = parseInt(permalink[3], 10);
          mapData.default_baselayer = permalink[3]; // disable zooming to all locations

          mapData.calc_extent = "CENTERZOOM";
        }

        permalink = false;
      }
    }

    _this.proxy = new _c4gMapsProxy.MapProxy({
      mapController: (0, _assertThisInitialized2["default"])(_this)
    });
    _this.components = _this.components || {};
    _this.hideOtherComponents = _this.hideOtherComponents.bind((0, _assertThisInitialized2["default"])(_this));
    _this.hideOtherBottomComponents = _this.hideOtherBottomComponents.bind((0, _assertThisInitialized2["default"])(_this)); // add view observer to update permalink on center change, if a permalink exists
    // use other permalink variable to avoid interference with the actual permalink mechanism

    window.c4gMapsHooks.map_center_changed = window.c4gMapsHooks.map_center_changed || [];
    window.c4gMapsHooks.map_center_changed.push(function (center) {
      var currentPermalink = _c4gMapsUtils.utils.getUrlParam(mapData.permalink.get_parameter);

      if (currentPermalink) {
        if (currentPermalink) {
          currentPermalink = currentPermalink.split('/');

          if (currentPermalink.length >= 3) {
            center = (0, _proj.transform)(center, "EPSG:3857", "EPSG:4326");
            currentPermalink[0] = center[0];
            currentPermalink[1] = center[1];

            _c4gMapsUtils.utils.setUrlParam(currentPermalink.join('/'), mapData.permalink.get_parameter, true);
          }
        }
      }
    });
    window.c4gMapsHooks.hook_map_zoom = window.c4gMapsHooks.hook_map_zoom || [];
    window.c4gMapsHooks.hook_map_zoom.push(function (proxy) {
      var currentPermalink = _c4gMapsUtils.utils.getUrlParam(mapData.permalink.get_parameter);

      if (currentPermalink) {
        if (currentPermalink) {
          currentPermalink = currentPermalink.split('/');

          if (currentPermalink.length >= 3) {
            currentPermalink[2] = parseInt(view.getZoom(), 10) || currentPermalink[2];

            _c4gMapsUtils.utils.setUrlParam(currentPermalink.join('/'), mapData.permalink.get_parameter, true);
          }
        }
      }
    });

    if (mapData.permalink.withoutGenerator) {
      var currentPermalink = _c4gMapsUtils.utils.getUrlParam(mapData.permalink.get_parameter);

      if (!currentPermalink && mapData.center) {
        var _permalink = [];

        _permalink.push(mapData.center.lon);

        _permalink.push(mapData.center.lat);

        _permalink.push(mapData.center.zoom);

        _c4gMapsUtils.utils.setUrlParam(_permalink.join('/'), mapData.permalink.get_parameter, true);
      }
    }

    if (mapData.minZoom && mapData.minZoom > 0) {
      minZoom = mapData.minZoom;
    } else {
      minZoom = 0;
    }

    if (mapData.maxZoom && mapData.maxZoom > 0) {
      maxZoom = mapData.maxZoom;
    } else {
      maxZoom = 19;
    }

    if (mapData.caching) {
      if (_c4gMapsUtils.utils.getValue('lon') && _c4gMapsUtils.utils.getValue('lat')) {
        mapData.center.lon = _c4gMapsUtils.utils.getValue('lon');
        mapData.center.lat = _c4gMapsUtils.utils.getValue('lat');
      }

      if (_c4gMapsUtils.utils.getValue('zoom')) {
        mapData.center.zoom = _c4gMapsUtils.utils.getValue('zoom');
      }
    }

    if (mapData.restr_bottomleft_lon && mapData.restr_bottomleft_lat && mapData.restr_topright_lon && mapData.restr_topright_lat) {
      var extent = [parseFloat(mapData.restr_bottomleft_lon), parseFloat(mapData.restr_bottomleft_lat), parseFloat(mapData.restr_topright_lon), parseFloat(mapData.restr_topright_lat)];
      extent = (0, _proj.transformExtent)(extent, "EPSG:4326", "EPSG:3857");
      view = new _ol.View({
        extent: extent,
        center: (0, _proj.transform)([parseFloat(mapData.center.lon), parseFloat(mapData.center.lat)], 'EPSG:4326', 'EPSG:3857'),
        zoom: parseFloat(mapData.center.zoom),
        minZoom: parseInt(minZoom, 10),
        maxZoom: parseInt(maxZoom, 10),
        rotation: parseFloat(mapData.center.rotation)
      });
    } else {
      view = new _ol.View({
        center: (0, _proj.transform)([parseFloat(mapData.center.lon), parseFloat(mapData.center.lat)], 'EPSG:4326', 'EPSG:3857'),
        zoom: parseFloat(mapData.center.zoom),
        minZoom: parseInt(minZoom, 10),
        maxZoom: parseInt(maxZoom, 10),
        rotation: parseFloat(mapData.center.rotation)
      });
    } // check userposition


    if (mapData.geolocation && !permalink) {
      geoLocation = new _ol.Geolocation({
        //tracking: !mapData.geopicker,
        tracking: true,
        projection: view.getProjection()
      });
      geoLocation.on('change', function (evt) {
        if (geoLocation) {
          view.setCenter(geoLocation.getPosition());

          if (mapData.geolocation_zoom) {
            view.setZoom(parseInt(mapData.geolocation_zoom, 10));
          }

          geoLocation.setTracking(false);

          if (self.map) {
            self.map.setView(view);

            if (self.$overlaycontainer_stopevent) {// utils.redrawMapView(self);
            }
          }
        }
      });
    } // enable default Controls/Interactions if there is no profile
    // [note]: maybe change this in the future? -> "no default"-option?


    if (!mapData.profile) {
      controls = (0, _control.defaults)();
      interactions = (0, _interaction.defaults)();
    } // set default base layer when backend geopicker is enabled


    if (mapData.geopicker && mapData.geopicker.type === "backend") {
      if (mapData.default_baselayer) {
        _this.proxy.hook_baselayer_loaded.push(function (baselayerIds) {
          if (self.proxy.baselayerController.arrBaselayers.hasOwnProperty(mapData.default_baselayer)) {
            self.proxy.baselayerController.showBaseLayer(mapData.default_baselayer);
          }
        });
      } // end inner if


      _this.map = new _ol.Map({
        controls: controls,
        interactions: interactions,
        layers: [new _layer.Group({
          title: 'Base maps',
          layers: [],
          checkSum: 'baseMapsLayer'
        })],
        loadTilesWhileAnimating: true,
        target: mapData.mapDiv,
        view: view
      });
    } else {
      // initialize Map
      //
      if (mapData.default_baselayer) {
        _this.proxy.hook_baselayer_loaded.push(function (baselayerIds) {
          if (mapData.baselayer && baselayerIds.indexOf(mapData.baselayer.toString()) > -1) {
            mapData.default_baselayer = mapData.baselayer;
          }

          if (mapData.caching) {
            if (_c4gMapsUtils.utils.getValue('baselayer')) {
              mapData.default_baselayer = _c4gMapsUtils.utils.getValue('baselayer');
            }
          }

          self.proxy.baselayerController.showBaseLayer(mapData.default_baselayer);
        });
      }

      _this.map = new _ol.Map({
        controls: controls,
        interactions: interactions,
        layers: [new _layer.Group({
          title: 'Base maps',
          layers: [],
          checkSum: 'baseMapsLayer'
        })],
        loadTilesWhileAnimating: true,
        target: mapData.mapDiv,
        view: view
      });
    }

    mapData.map = _this.map; // set map-size and -margin

    domMapDiv = document.getElementById(mapData.mapDiv);

    if (!domMapDiv) {
      domMapDiv = document.getElementById("#" + mapData.mapDiv);

      if (!domMapDiv) {
        domMapDiv = document.getElementById("." + mapData.mapDiv);
      }
    }

    if (domMapDiv && domMapDiv.style) {
      if (mapData.width) {
        if (mapData.margin) {
          var arrMargins = mapData.margin.split(" ");
          var rightMargin = 0;
          var leftMargin = 0;

          switch (arrMargins.length) {
            case 4:
              rightMargin = arrMargins[1];
              leftMargin = arrMargins[3];
              break;

            case 2:
              rightMargin = arrMargins[1];
              leftMargin = arrMargins[1];
              break;

            case 1:
              rightMargin = arrMargins[0];
              leftMargin = arrMargins[0];
              break;
          } // "==" is correct here since we want to check number and string


          if (leftMargin == 0) {
            leftMargin += "px";
          }

          if (rightMargin == 0) {
            rightMargin += "px";
          }

          domMapDiv.style.width = "calc(" + mapData.width + " - " + leftMargin + " - " + rightMargin + ")";
        } else {
          domMapDiv.style.width = mapData.width;
        }
      }

      if (mapData.height) {
        domMapDiv.style.height = mapData.height;
      } else {
        if (mapData.geopicker && mapData.geopicker.type === "backend") {
          var fieldsetHeight = domMapDiv.parentElement.parentElement.offsetHeight;
          domMapDiv.style.height = 'calc(100vh - ' + fieldsetHeight + 'px)';
          domMapDiv.style.minHeight = '480px';
          domMapDiv.style.maxWidth = '100vw';
        } else {
          if (domMapDiv.parentElement && domMapDiv.parentElement.parentElement && !domMapDiv.parentElement.parentElement.offsetHeight) {
            domMapDiv.style.height = '100vh';
          } else if (domMapDiv.parentElement && domMapDiv.parentElement.parentElement) {
            var height = domMapDiv.parentElement.parentElement.offsetHeight;

            if (height < 320) {
              height = 320; //minimal default value if not set in map configuration
            }

            domMapDiv.style.height = height + 'px';
          }
        }
      }

      if (mapData.margin) {
        domMapDiv.style.padding = mapData.margin;
      }
    } else {
      console.warn('can not get element by id mapData.mapDiv');
      return (0, _possibleConstructorReturn2["default"])(_this);
    } // save overlaycontainer


    _this.$overlaycontainer_stopevent = jQuery('#' + mapData.mapDiv + ' .' + _c4gMapsConstant.cssConstants.OL_OVERLAYCONTAINER_SE);

    _this.map.updateSize();

    _this.proxy.initialize(); // this.proxy.loadBaseLayers();
    // this.proxy.loadLayers();
    // ---
    // add Spinner


    _this.spinner = new _c4gMapsMiscSpinner.Spinner({
      className: _c4gMapsConstant.cssConstants.LARGE
    }); // add mapHover

    _this.mapHover = new _c4gMapsMiscMaphover.MapHover({
      mapController: (0, _assertThisInitialized2["default"])(_this)
    }); // add interactions ===
    //
    // mouse navigation

    if (mapData.mouse_nav) {
      // drag pan and kinetic scrolling
      if (mapData.mouse_nav.drag_pan) {
        kinetic = mapData.mouse_nav.kinetic ? new _ol.Kinetic(-0.005, 0.05, 100) : null;

        _this.map.addInteraction(new _interaction.DragPan({
          kinetic: kinetic
        }));
      } // mousewheel zoom


      if (mapData.mouse_nav.wheel_zoom) {
        _this.map.addInteraction(new _interaction.MouseWheelZoom());
      } // doubleclick zoom


      if (mapData.mouse_nav.doubleclick_zoom) {
        _this.map.addInteraction(new _interaction.DoubleClickZoom());
      } // box zoom


      if (mapData.mouse_nav.drag_zoom) {
        _this.map.addInteraction(new _interaction.DragZoom({
          condition: _condition.shiftKeyOnly
        }));
      } // drag rotate & zoom


      if (mapData.rotate) {
        var customCondition = function customCondition(mapBrowserEvent) {
          var browserEvent = mapBrowserEvent.originalEvent;
          return browserEvent.ctrlKey && browserEvent.shiftKey;
        };

        _this.map.addInteraction(new _interaction.DragRotateAndZoom({
          condition: customCondition
        }));
      }
    } // touch navigation


    if (mapData.touch_nav) {
      // rotate (pinch)
      if (mapData.touch_nav.rotate) {
        _this.map.addInteraction(new _interaction.PinchRotate());
      } // zoom (pinch)


      if (mapData.touch_nav.zoom) {
        _this.map.addInteraction(new _interaction.PinchZoom({
          constrainResolution: true
        }));
      }
    } // keyboard navigation


    if (mapData.keyboard_nav) {
      // pan (arrow keys)
      if (mapData.keyboard_nav.pan) {
        _this.map.addInteraction(new _interaction.KeyboardPan());
      } // zoom ("+" and "-" key)


      if (mapData.keyboard_nav.zoom) {
        _this.map.addInteraction(new _interaction.KeyboardZoom());
      }
    } // ===
    // add controls ===


    _this.mapsControls = new _c4gMapsControls.MapsControls((0, _assertThisInitialized2["default"])(_this));

    _this.mapsControls.init(); // add container for react components


    if (mapData.layerswitcher.enable) {
      if (mapData.starboard.div) {
        _this.reactContainer = document.querySelector("." + mapData.starboard.div);

        if (!_this.reactContainer) {
          _this.reactContainer = document.createElement('div');
          _this.reactContainer.className = "c4g-sideboard c4g-starboard-container ol-unselectable";

          _this.$overlaycontainer_stopevent.append(_this.reactContainer);
        } else {
          _this.reactContainer.className += " c4g-external c4g-starboard-container ol-unselectable";
        }
      } else {
        _this.reactContainer = document.createElement('div');
        _this.reactContainer.className = "c4g-sideboard c4g-starboard-container ol-unselectable";

        _this.$overlaycontainer_stopevent.append(_this.reactContainer);
      }

      if (mapData.starboard.open) {
        _this.reactContainer.className += " c4g-open";
      } else {
        _this.reactContainer.className += " c4g-close";
      }
    }

    if (mapData.baselayerswitcher.enable) {
      if (mapData.baselayerswitcher.div) {
        _this.baselayerContainer = document.querySelector("." + mapData.baselayerswitcher.div);

        if (!_this.baselayerContainer) {
          _this.baselayerContainer = document.createElement('div');
          _this.baselayerContainer.className = "c4g-sideboard c4g-baselayer-container ol-unselectable";

          _this.$overlaycontainer_stopevent.append(_this.baselayerContainer);
        } else {
          _this.baselayerContainer.className += " c4g-external c4g-baselayer-container ol-unselectable";
        }
      } else {
        _this.baselayerContainer = document.createElement('div');
        _this.baselayerContainer.className = "c4g-sideboard c4g-baselayer-container ol-unselectable";

        _this.$overlaycontainer_stopevent.append(_this.baselayerContainer);
      }

      if (mapData.starboard.open) {
        _this.baselayerContainer.className += " c4g-open";
      } else {
        _this.baselayerContainer.className += " c4g-close";
      }
    } // feature filter


    if (mapData.filterDiv) {
      mapData.filterDiv = mapData.filterDiv[0] === "." || mapData.filterDiv[0] === "#" ? mapData.filterDiv : "." + mapData.filterDiv;
      _this.filterContainer = document.createElement("div");

      _reactDom["default"].render( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
        fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading...\"")
      }, /*#__PURE__*/_react["default"].createElement(FeatureFilter, {
        target: document.querySelector(mapData.filterDiv),
        mapController: (0, _assertThisInitialized2["default"])(_this),
        direction: "top",
        className: "c4g-feature-filter"
      })), _this.filterContainer);

      $(mapData.filterDiv).append(_this.filterContainer);
    } // infopage container


    if (mapData.legend.enable) {
      if (mapData.legend.div) {
        _this.infoPageContainer = document.querySelector("." + mapData.legend.div);

        if (!_this.infoPageContainer) {
          _this.infoPageContainer = document.createElement('div');
          _this.infoPageContainer.className = "c4g-sideboard c4g-infopage-container ol-unselectable c4g-close";

          _this.$overlaycontainer_stopevent.append(_this.infoPageContainer);
        } else {
          _this.infoPageContainer.className += " c4g-external c4g-infopage-container ol-unselectable";
        }
      } else {
        _this.infoPageContainer = document.createElement('div');
        _this.infoPageContainer.className = "c4g-sideboard c4g-infopage-container ol-unselectable c4g-close";

        _this.$overlaycontainer_stopevent.append(_this.infoPageContainer);
      }
    } // measuretools container


    if (mapData.measuretools.enable) {
      if (mapData.measuretools.div) {
        _this.measuretoolsContainer = document.querySelector("." + mapData.measuretools.div);

        if (!_this.measuretoolsContainer) {
          _this.measuretoolsContainer = document.createElement('div');
          _this.measuretoolsContainer.className = "c4g-sideboard c4g-measuretools-container ol-unselectable c4g-close";

          _this.$overlaycontainer_stopevent.append(_this.measuretoolsContainer);
        } else {
          _this.measuretoolsContainer.className += " c4g-external c4g-measuretools-container ol-unselectable";
        }
      } else {
        _this.measuretoolsContainer = document.createElement('div');
        _this.measuretoolsContainer.className = "c4g-sideboard c4g-measuretools-container ol-unselectable c4g-close";

        _this.$overlaycontainer_stopevent.append(_this.measuretoolsContainer);
      }
    } // permalink container


    if (mapData.permalink.enable) {
      if (mapData.permalink.div) {
        _this.permalinkContainer = document.querySelector(".c4g-external-permalink-container");

        if (!_this.permalinkContainer) {
          _this.permalinkContainer = document.createElement('div');
          _this.permalinkContainer.className = "c4g-sideboard c4g-permalink-container ol-unselectable c4g-close";

          _this.$overlaycontainer_stopevent.append(_this.permalinkContainer);
        } else {
          _this.permalinkContainer.className += " c4g-external";
        }
      } else {
        _this.permalinkContainer = document.createElement('div');
        _this.permalinkContainer.className = "c4g-sideboard c4g-permalink-container ol-unselectable c4g-close";

        _this.$overlaycontainer_stopevent.append(_this.permalinkContainer);
      }
    }

    if (mapData.overviewmap) {
      _this.overviewContainer = document.createElement("div");
      _this.overviewContainer.className = "c4g-sideboard c4g-overviewmap-container c4g-close";

      _this.$overlaycontainer_stopevent.append(_this.overviewContainer);
    } // @ToDo mapData.additionalPanel is always true, because it is set as an new object in the beginning. Therefore the second parameter of the boolean is requested, which throws an error
    // additionalPanel is furthermore not found anywhere in Maps and should be loaded over a hook
    // starboard


    if (mapData.geopicker && mapData.geopicker.type === "backend") {
      enableStarboard = false;
    } // popup margin
    //this.leftSlideElements.push('.ol-overlay-container');
    //this.rightSlideElements.push('.ol-overlay-container');
    // if (typeof Starboard === 'function' && enableStarboard && !this.controls.starboard) {
    //   // this.initializeStarboard();
    // }
    //themeData


    if (mapData.themeData) {
      domMapDiv = document.getElementById(mapData.mapDiv);

      if (mapData.themeData['useglobal']) {
        domMapDiv = document.getElementById('wrapper');
      }

      var mapWidth = "100%";
      var mapHeight = "100%";

      if (mapData.width) {
        mapWidth = mapData.width;
      }

      if (mapData.height) {
        mapHeight = mapData.height;
      } else {
        var divHeight = domMapDiv && domMapDiv.offsetHeight ? domMapDiv.offsetHeight : false;

        if (!divHeight) {
          mapHeight = "100vh";
        } else {
          mapHeight = '100%';
        }
      }

      if (domMapDiv && domMapDiv.style) {
        domMapDiv.style.setProperty('--map-height', mapHeight);
        domMapDiv.style.setProperty('--map-width', mapWidth);
      }

      if (mapData.themeData['maincolor']) {
        var mainColor = _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(mapData.themeData['maincolor'], mapData.themeData['mainopacity']);

        var fontColor = _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(mapData.themeData['fontcolor'], mapData.themeData['fontopacity']);

        var shadowColor = _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(mapData.themeData['shadowcolor'], mapData.themeData['shadowopacity']);

        var popupMainColor = _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(mapData.themeData['popupMaincolor'], mapData.themeData['popupMainopacity']);

        var popupFontColor = _c4gMapsUtils.utils.getRgbaFromHexAndOpacity(mapData.themeData['popupFontcolor'], mapData.themeData['popupFontopacity']);

        if (domMapDiv && domMapDiv.style) {
          domMapDiv.style.setProperty('--main-color', mainColor);
          domMapDiv.style.setProperty('--font-color', fontColor);
          domMapDiv.style.setProperty('--pu-main-color', popupMainColor);
          domMapDiv.style.setProperty('--pu-font-color', popupFontColor);
          domMapDiv.style.setProperty('--shadow-color', shadowColor);
        }
      }

      if (domMapDiv && mapData.themeData['buttonradius']) {
        domMapDiv.style.setProperty('--button-radius-percent', mapData.themeData['buttonradius'] + '%');
        domMapDiv.style.setProperty('--button-radius-pixel', mapData.themeData['buttonradius'] + 'px');
      }

      if (domMapDiv && mapData.themeData['buttonsize']) {
        domMapDiv.style.setProperty('--button-size-pixel', mapData.themeData['buttonsize'] + 'px');
      }

      if (domMapDiv && mapData.themeData['fontsize']) {
        domMapDiv.style.setProperty('--button-fontsize-pixel', mapData.themeData['fontsize'] + 'px');
      }

      if (domMapDiv && mapData.themeData['popupMaxWidth']) {
        domMapDiv.style.setProperty('--popup-max-width', mapData.themeData['popupMaxWidth'] + '%');
      }
    }

    var scope = (0, _assertThisInitialized2["default"])(_this);

    _this.map.on("change:size", function () {
      scope.setState({});

      if (scope.map && scope.map.getSize()) {
        domMapDiv.style.setProperty('--map-height', scope.map.getSize()[1] + "px");
      }
    });

    return _this;
  }

  (0, _createClass2["default"])(MapController, [{
    key: "setLayersInitial",
    value: function setLayersInitial(objLayers, arrLayers) {
      this.setState({
        objLayers: objLayers,
        arrLayerStates: arrLayers
      });
    }
  }, {
    key: "setObjLayers",
    value: function setObjLayers(objLayers) {
      this.setState({
        objLayers: objLayers
      });
    }
  }, {
    key: "setLocStyles",
    value: function setLocStyles(styleData) {
      this.setState({
        styleData: styleData
      });
    }
  }, {
    key: "setLayerStates",
    value: function setLayerStates(arrLayerStates) {
      if (this._isMounted) {
        this.setState({
          arrLayerStates: arrLayerStates
        });
      }
    }
  }, {
    key: "setLayerStateWithId",
    value: function setLayerStateWithId(id, active) {
      var arrLayerStates = this.state.arrLayerStates;

      for (var i in arrLayerStates) {
        if (arrLayerStates.hasOwnProperty(i)) {
          arrLayerStates[i] = this.getLayerStateWithId(arrLayerStates[i], id, active);
        }
      }

      this.setState({
        arrLayerStates: arrLayerStates
      });
    }
  }, {
    key: "getLayerStateWithId",
    value: function getLayerStateWithId(layerState, id, active) {
      if (layerState.id === id) {
        layerState.active = active;
      }

      for (var i in layerState.childStates) {
        if (layerState.childStates.hasOwnProperty(i)) {
          layerState.childStates[i] = this.getLayerStateWithId(layerState.childStates[i], id, active);
        }
      }

      return layerState;
    }
  }, {
    key: "changeActiveLayers",
    value: function changeActiveLayers(baseLayerId) {
      var newLayerState = this.state.arrLayerStates;

      for (var stateId in newLayerState) {
        if (newLayerState.hasOwnProperty(stateId)) {
          if (this.state.objLayers[stateId].activateWithBl !== "all") {
            var oldState = newLayerState[stateId].active;
            newLayerState[stateId].active = !!this.state.objLayers[stateId].activateWithBl.find(function (element) {
              return element === baseLayerId;
            });

            if (oldState !== newLayerState[stateId].active) {
              if (newLayerState[stateId].active) {
                this.proxy.layerController.show(this.state.objLayers[stateId].id, this.state.objLayers[stateId].features || this.state.objLayers[stateId].vectorLayer);
              } else {
                this.proxy.layerController.hide(this.state.objLayers[stateId].id, this.state.objLayers[stateId].features || this.state.objLayers[stateId].vectorLayer);
              }
            }
          }

          for (var childId in newLayerState[stateId].childStates) {
            if (newLayerState[stateId].childStates.hasOwnProperty(childId)) {
              newLayerState[stateId].childStates[childId] = this.changeActiveLayerChilds(newLayerState[stateId].childStates[childId], this.state.objLayers[stateId].childs[childId], baseLayerId);
            }
          }
        }
      }

      this.setState({
        arrLayerStates: newLayerState
      });
    }
  }, {
    key: "changeActiveLayerChilds",
    value: function changeActiveLayerChilds(childState, child, baseLayerId) {
      if (child.activateWithBl !== "all") {
        var oldState = childState.active;
        childState.active = !!child.activateWithBl.find(function (element) {
          return element === baseLayerId;
        });

        if (oldState !== childState.active) {
          if (childState.active) {
            this.proxy.layerController.show(child.id, child.features || child.vectorLayer);
          } else {
            this.proxy.layerController.hide(child.id, child.features || child.vectorLayer);
          }
        }
      }

      for (var stateId in childState.childStates) {
        if (childState.childStates.hasOwnProperty(stateId)) {
          childState.childStates[stateId] = this.changeActiveLayerChilds(childState.childStates[stateId], child.childs[stateId], baseLayerId);
        }
      }

      return childState;
    }
  }, {
    key: "setTabLayers",
    value: function setTabLayers(layers, states) {
      this.setState({
        objTabLayers: layers,
        arrTabLayerStates: states
      });
    }
  }, {
    key: "setTabStates",
    value: function setTabStates(states) {
      this.setState({
        arrTabLayerStates: states
      });
    }
  }, {
    key: "hideOtherComponents",
    value: function hideOtherComponents(objComponent) {
      var components = this.components;

      for (var key in components) {
        if (components.hasOwnProperty(key)) {
          if (components[key] && components[key] !== objComponent) {
            components[key].setState({
              open: false
            });
          }
        }
      }
    }
  }, {
    key: "changeCollapseState",
    value: function changeCollapseState(id, state) {
      var newState = this.state.arrLayerStates;
      newState[id] = state;
      this.setState({
        arrLayerStates: newState
      });
    }
  }, {
    key: "hideOtherBottomComponents",
    value: function hideOtherBottomComponents(objComponent) {
      var components = this.components;

      for (var key in components) {
        if (components.hasOwnProperty(key)) {
          if (components[key] && components[key] !== objComponent) {
            components[key].setState({
              openResults: false
            });
          }
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var scope = this;
      var mapData = this.data;
      var target = document.querySelector('#' + mapData.mapDiv + ' .c4g-control-container-top-left');
      var components = [{
        name: "layerswitcher",
        sort: mapData.layerswitcher.enable
      }, {
        name: "geosearch",
        sort: mapData.geosearch.enable
      }, {
        name: "legend",
        sort: mapData.legend.enable
      }, {
        name: "baselayerswitcher",
        sort: mapData.baselayerswitcher.enable
      }, {
        name: "measuretools",
        sort: mapData.measuretools.enable
      }, {
        name: "permalink",
        sort: mapData.permalink.enable
      }, {
        name: "zoom",
        sort: mapData.zoom
      }, {
        name: "zoomPosition",
        sort: mapData.zoomPosition
      }, {
        name: "zoomHome",
        sort: mapData.zoomHome
      }, {
        name: "zoomExtent",
        sort: mapData.zoomExtent
      }, {
        name: "fullscreen",
        sort: mapData.fullscreen
      }, {
        name: "print",
        sort: mapData.print
      }, {
        name: "rotate",
        sort: mapData.rotate
      }, {
        name: "graticule",
        sort: mapData.graticule
      }, {
        name: "overview",
        sort: mapData.overviewmap
      }, {
        name: "router",
        sort: mapData.router_enable
      }, {
        name: "editor",
        sort: mapData.editor.enable
      }];
      var sbPortal = "";

      if (mapData.layerswitcher.enable) {
        sbPortal = /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
          fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"Loool")
        }, /*#__PURE__*/_react["default"].createElement(StarboardPanel, {
          ref: function ref(node) {
            _this2.components.starboard = node;
          },
          target: target,
          mapController: this,
          objLayers: this.state.objLayers,
          styleData: this.state.styleData,
          tabLayers: this.state.objTabLayers,
          tabStates: this.state.arrTabLayerStates,
          layerStates: this.state.arrLayerStates,
          parentCallback: this.setLayerStates,
          tabCallback: this.setTabStates,
          direction: "right",
          open: this.props.mapData.initial_open_comp === "starboard",
          changeCollapseState: this.changeCollapseState,
          external: this.reactContainer.className.indexOf("c4g-external") !== -1
        })), this.reactContainer);
      }

      var searchPortal = "";

      if (mapData.geosearch.enable) {
        var geoSearchOptions = this.createGeosearchOptions();

        geoSearchOptions.ref = function (node) {
          _this2.components.geosearch = node;
        };

        searchPortal = /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement(_c4gGeosearch["default"], geoSearchOptions), this.searchContainer);
      }

      var infoPortal = "";

      if (mapData.infopage && mapData.legend.enable) {
        infoPortal = /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
          fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"LOOOL\"")
        }, /*#__PURE__*/_react["default"].createElement(Infopage, {
          ref: function ref(node) {
            _this2.components.infopage = node;
          },
          target: target,
          external: this.infoPageContainer.className.indexOf("c4g-external") !== -1,
          infoContent: mapData.infopage,
          mapController: this,
          open: mapData.initial_open_comp === "legend"
        })), this.infoPageContainer);
      }

      var blsPortal = "";

      if (mapData.baselayerswitcher.enable) {
        blsPortal = /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
          fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"LOOOL\"")
        }, /*#__PURE__*/_react["default"].createElement(BaselayerSwitcher, {
          ref: function ref(node) {
            _this2.components.baselayerSwitcher = node;
          },
          target: target,
          open: mapData.initial_open_comp === "baselayers",
          changeActiveLayers: this.changeActiveLayers,
          external: this.baselayerContainer.className.indexOf("c4g-external") !== -1,
          mapController: this,
          baselayerController: this.proxy.baselayerController
        })), this.baselayerContainer);
      }

      var measurePortal = "";

      if (mapData.measuretools.enable) {
        measurePortal = /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
          fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"Lool\"")
        }, /*#__PURE__*/_react["default"].createElement(Measuretools, {
          ref: function ref(node) {
            _this2.components.measuretools = node;
          },
          target: target,
          external: this.measuretoolsContainer.className.indexOf("c4g-external") !== -1,
          mapController: this,
          open: mapData.initial_open_comp === "measuretools"
        })), this.measuretoolsContainer);
      }

      var permaPortal = "";

      if (mapData.permalink.enable) {
        permaPortal = /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
          fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading...\"")
        }, /*#__PURE__*/_react["default"].createElement(Permalink, {
          ref: function ref(node) {
            _this2.components.permalink = node;
          },
          saveIds: mapData.permalink.saveIds,
          mapController: this,
          target: target,
          external: this.permalinkContainer.className.indexOf("c4g-external") !== -1
        })), this.permalinkContainer);
      }

      var overviewPortal = "";

      if (mapData.overviewmap) {
        var layers = [];

        if (this.proxy.baselayers_loaded) {
          layers = [this.proxy.baselayerController.arrBaselayers[this.proxy.activeBaselayerId].layer];
        }

        overviewPortal = /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
          fallback: /*#__PURE__*/_react["default"].createElement("div", null, "Loading...")
        }, /*#__PURE__*/_react["default"].createElement(OverviewMap, {
          ref: function ref(node) {
            _this2.components.overviewMap = node;
          },
          mapController: this,
          target: target,
          layers: layers,
          ovmTarget: this.overviewContainer,
          collapsed: true,
          key: 23
        })), this.overviewContainer); // overviewPortal = ReactDOM.createPortal(overviewPortal, this.overviewContainer);

        this.proxy.hook_baselayer_visibility = this.proxy.hook_baselayer_visibility || [];
        this.proxy.hook_baselayer_visibility.push(function (baselayerConfig) {
          var id = baselayerConfig.id;
          var currentBaselayer = scope.proxy.baselayerController.arrBaselayers[id];
          var currentSource;

          if (currentBaselayer.layer instanceof _layer.Group) {
            currentSource = currentBaselayer.layer.getLayers().getArray()[0].getSource();
          } else {
            currentSource = currentBaselayer.layer.getSource();
          }

          if (scope.components.overviewMap) {
            scope.components.overviewMap.addLayer(new _Tile["default"]({
              source: currentSource
            }), id);
          } else {
            // TODO better solution to wait for overviewmap to be rendered?
            var intervalId = window.setInterval(function () {
              if (scope.components.overviewMap) {
                scope.components.overviewMap.addLayer(new _Tile["default"]({
                  source: currentSource
                }), id);
                window.clearInterval(intervalId);
              }
            }, 1000);
          }
        });
      }

      var result = [];
      components.sort(function (a, b) {
        return a.sort > b.sort ? 1 : -1;
      });

      for (var i = 0; i < components.length; i++) {
        switch (components[i].name) {
          case "measuretools":
            result.push(measurePortal);
            break;

          case "baselayerswitcher":
            result.push(blsPortal);
            break;

          case "geosearch":
            result.push(searchPortal);
            break;

          case "layerswitcher":
            result.push(sbPortal);
            break;

          case "legend":
            result.push(infoPortal);
            break;

          case "permalink":
            result.push(permaPortal);
            break;

          case 'zoom':
            if (mapData.zoom) {
              result.push( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
                key: i,
                fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading...")
              }, /*#__PURE__*/_react["default"].createElement(Zoom, {
                mapController: this,
                target: target,
                key: i
              })));
            }

            break;

          case 'zoomExtent':
            if (mapData.zoomExtent) {
              result.push( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
                key: i,
                fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading...")
              }, /*#__PURE__*/_react["default"].createElement(ZoomExtent, {
                mapController: this,
                target: target,
                key: i
              })));
            }

            break;

          case 'zoomHome':
            if (mapData.zoomHome) {
              result.push( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
                key: i,
                fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading...")
              }, /*#__PURE__*/_react["default"].createElement(ZoomHome, {
                mapController: this,
                target: target,
                key: i
              })));
            }

            break;

          case 'zoomPosition':
            if (mapData.zoomPosition) {
              result.push( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
                key: i,
                fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading...")
              }, /*#__PURE__*/_react["default"].createElement(ZoomPosition, {
                mapController: this,
                target: target,
                key: i
              })));
            }

            break;

          case 'fullscreen':
            if (mapData.fullscreen) {
              result.push( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
                key: i,
                fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading...")
              }, /*#__PURE__*/_react["default"].createElement(Fullscreen, {
                mapController: this,
                target: target,
                key: i
              })));
            }

            break;

          case 'print':
            if (mapData.print) {
              result.push( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
                key: i,
                fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading...")
              }, /*#__PURE__*/_react["default"].createElement(Print, {
                mapController: this,
                target: target,
                key: i
              })));
            }

            break;

          case 'rotate':
            if (mapData.rotate) {
              result.push( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
                key: i,
                fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading...")
              }, /*#__PURE__*/_react["default"].createElement(Rotate, {
                mapController: this,
                target: target,
                key: i
              })));
            }

            break;

          case 'graticule':
            if (mapData.graticule) {
              result.push( /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
                key: i,
                fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading...")
              }, /*#__PURE__*/_react["default"].createElement(Grid, {
                mapController: this,
                target: target,
                key: i
              })));
            }

            break;

          case 'overview':
            if (mapData.overviewmap) {
              result.push(overviewPortal);
            }

            break;

          case 'router':
            // if (window.c4gMapsHooks !== undefined && Array.isArray(window.c4gMapsHooks.mapController_addControls)) {
            //   utils.callHookFunctions(window.c4gMapsHooks.mapController_addControls, {
            //     mapController: this,
            //     Container: this.mapsControls.controlContainerTopLeft,
            //     component: "router",
            //     arrComps: result
            //   });
            // }

            /**
             * test
             */
            // const params = {
            //   mapController: this,
            //   Container: this.mapsControls.controlContainerTopLeft,
            //   component: "router",
            //   arrComps: result
            // };
            if (this.data.router_enable) {
              if (typeof this.data !== 'undefined') {
                if (this.data.lang === "de") {
                  langRouteConstants = _routingConstantI18nDe.routingConstantsGerman;
                } else if (this.data.lang === "en") {
                  langRouteConstants = _routingConstantI18nEn.routingConstantsEnglish;
                } else {
                  // fallback
                  langRouteConstants = _routingConstantI18nEn.routingConstantsEnglish;
                }
              }

              var routerControlProps = {
                target: document.querySelector('#' + this.data.mapDiv + ' .c4g-control-container-top-left'),
                mapController: this,
                direction: "top",
                withPosition: false,
                detourRoute: this.data.detourRoute,
                detourArea: this.data.detourArea,
                containerAddresses: containerAddresses,
                langConstants: langRouteConstants,
                ref: function ref(node) {
                  _this2.components.router = node;
                },
                key: 22,
                open: this.data.initial_open_comp === "routing"
              };
              var openRouter = this.data.initial_open_comp === "routing";

              if (!this.routerContainer) {
                if (this.data.router_div) {
                  this.routerContainer = document.querySelector("." + this.data.router_div);

                  if (!this.routerContainer) {
                    this.routerContainer = document.createElement('div');
                    this.routerContainer.className = "c4g-sideboard c4g-router-container-right " + (openRouter ? "c4g-open" : "c4g-close");
                    jQuery(".ol-overlaycontainer-stopevent").append(this.routerContainer);
                  } else {
                    this.routerContainer.className += " c4g-external";
                  }
                } else {
                  this.routerContainer = document.createElement('div');
                  this.routerContainer.className = "c4g-sideboard c4g-router-container-right " + (openRouter ? "c4g-open" : "c4g-close");
                  jQuery(".ol-overlaycontainer-stopevent").append(this.routerContainer);
                }
              }

              if (_c4gRouterView.RouterView && routerControlProps) {
                var view = /*#__PURE__*/_react["default"].createElement(_c4gRouterView.RouterView, routerControlProps);

                if (view && this && this.routerContainer) {
                  var portal = /*#__PURE__*/_reactDom["default"].createPortal(view, this.routerContainer);

                  if (portal) {
                    result.push(portal);
                  }
                }
              }
            }
            /**
             * end test
             */


            break;

          case 'editor':
            if (mapData.feEditorProfile && mapData.feEditorProfile !== "0") {
              if (!this.editorContainer) {
                if (this.data.editor_div) {
                  this.editorContainer = document.querySelector("." + this.data.editor_div);

                  if (!this.editorContainer) {
                    this.editorContainer = document.createElement('div');
                    this.editorContainer.className = "c4g-sideboard c4g-editor-container-right c4g-close";
                    jQuery(".ol-overlaycontainer-stopevent").append(this.editorContainer);
                  } else {
                    this.editorContainer.className += " c4g-external";
                  }
                } else {
                  this.editorContainer = document.createElement('div');
                  this.editorContainer.className = "c4g-sideboard c4g-editor-container-right c4g-close";
                  jQuery(".ol-overlaycontainer-stopevent").append(this.editorContainer);
                }
              }

              var editorProps = {
                tipLabel: langConstants.CTRL_EDITOR,
                type: mapData.editor.type || 'frontend',
                inputField: mapData.editor.inputField || false,
                target: mapData.editor.target || document.querySelector('#' + this.data.mapDiv + ' .c4g-control-container-top-left'),
                initOpen: mapData.editor.open || false,
                config: mapData.editor.config || false,
                dataField: mapData.editor.data_field || false,
                caching: mapData.caching,
                mapController: this
              };
              result.push( /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement(EditorComponent, editorProps), this.editorContainer));
            } else if (mapData.editor.type == "backend") {
              if (!this.editorContainer) {
                if (this.data.editor_div) {
                  this.editorContainer = document.querySelector("." + this.data.editor_div);

                  if (!this.editorContainer) {
                    this.editorContainer = document.createElement('div');
                    this.editorContainer.className = "c4g-sideboard c4g-editor-container-right c4g-close";
                    jQuery(".ol-overlaycontainer-stopevent").append(this.editorContainer);
                  } else {
                    this.editorContainer.className += " c4g-external";
                  }
                } else {
                  this.editorContainer = document.createElement('div');
                  this.editorContainer.className = "c4g-sideboard c4g-editor-container-right c4g-close";
                  jQuery(".ol-overlaycontainer-stopevent").append(this.editorContainer);
                }
              }

              var _editorProps = {
                tipLabel: langConstants.CTRL_EDITOR,
                type: mapData.editor.type || 'frontend',
                inputField: mapData.editor.inputField || "#c4gGeoEditorGeoData",
                target: mapData.editor.target || document.querySelector('#' + this.data.mapDiv + ' .c4g-control-container-top-left'),
                initOpen: mapData.editor.open || false,
                config: mapData.editor.config || false,
                dataField: mapData.editor.data_field || false,
                caching: mapData.caching,
                mapController: this
              };
              result.push( /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement(EditorComponent, _editorProps), this.editorContainer));
            }

            break;
        }
      }

      return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, result);
    }
  }, {
    key: "setOpenComponent",
    value: function setOpenComponent(component) {
      var _this3 = this;

      var scope = this;
      this.setState({
        openComponent: component
      }, function () {
        for (var key in _this3.components) {
          if (_this3.components.hasOwnProperty(key)) {
            var currentComp = _this3.components[key];

            if (currentComp && currentComp !== component) {
              currentComp.setState({
                open: false
              });
            }
          }
        }

        if (scope.data.caching) {
          _c4gMapsUtils.utils.storeValue('panel', component.constructor.name);
        }
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._isMounted = true;

      if (this.data.caching) {
        var storedPanel = _c4gMapsUtils.utils.getValue('panel');

        if (storedPanel) {
          for (var key in this.components) {
            if (this.components.hasOwnProperty(key)) {
              if (this.components[key] && this.components[key].constructor.name === storedPanel) {
                this.components[key].setState({
                  open: true
                });
                storedPanel = this.components[key];
              }
            }
          }

          this.setOpenComponent(storedPanel);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;
    }
  }, {
    key: "createGeosearchOptions",
    value: function createGeosearchOptions() {
      var mapData = this.data; // geosearch

      var geosearchOptions = {};

      if (mapData.geosearch && mapData.geosearch.enable) {
        if (!this.searchContainer) {
          if (mapData.geosearch.div) {
            this.searchContainer = document.querySelector("." + mapData.geosearch.div);
            this.searchContainer.className += " c4g-external";

            if (!this.searchContainer) {
              this.searchContainer = document.createElement('div');
              this.searchContainer.className = "c4g-sideboard c4g-geosearch-container-right ";
              this.searchContainer.className += "c4g-close";
              this.$overlaycontainer_stopevent.append(this.searchContainer);
            }
          } else {
            this.searchContainer = document.createElement('div');
            this.searchContainer.className = "c4g-sideboard c4g-geosearch-container-right ";
            this.searchContainer.className += "c4g-close";
          }

          if (!mapData.geosearch.div) {
            this.$overlaycontainer_stopevent.append(this.searchContainer);
          }
        }

        geosearchOptions = {
          mapController: this,
          target: document.querySelector('#' + mapData.mapDiv + ' .c4g-control-container-top-left'),
          extDiv: mapData.geosearch.div || false,
          collapsible: true,
          collapsed: mapData.initial_open_comp !== "search",
          label: ' ',
          collapsedLabel: '',
          // engineUrl: mapData.geosearch.engine,
          searchZoom: mapData.geosearch.searchzoom,
          zoomBounds: mapData.geosearch.zoombounds,
          quicksearch: true,
          animate: mapData.geosearch.animate,
          animateDuration: mapData.geosearch.animate_duration,
          markResult: mapData.geosearch.markresult,
          resultDuration: mapData.geosearch.result_duration,
          popup: mapData.geosearch.popup,
          autopick: mapData.geopicker,
          caching: mapData.caching,
          results: mapData.geosearch.results,
          resultCount: mapData.geosearch.result_count,
          resultsHeadline: mapData.geosearch.results_headline,
          headline: mapData.geosearch.headline,
          resultStyle: mapData.geosearch.result_locstyle,
          placeholder: mapData.geosearch.placeholder,
          external: this.searchContainer.className.indexOf("c4g-external") !== -1
        };
      }

      return geosearchOptions;
    }
  }]);
  return MapController;
}(_react.Component);

exports.default = MapController;

/***/ }),

/***/ "./Resources/public/js/components/c4g-router-popup-buttons.jsx":
/*!*********************************************************************!*\
  !*** ./Resources/public/js/components/c4g-router-popup-buttons.jsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RouterPopupButtons = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _c4gAutocompleteInput = __webpack_require__(/*! ./c4g-autocomplete-input.jsx */ "./Resources/public/js/components/c4g-autocomplete-input.jsx");

var _geom = __webpack_require__(/*! ol/geom */ "./node_modules/ol/geom.js");

var _routingConstantI18n = __webpack_require__(/*! ./../routing-constant-i18n */ "./Resources/public/js/routing-constant-i18n.js");

var _proj = __webpack_require__(/*! ol/proj */ "./node_modules/ol/proj.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var RouterPopupButtons = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(RouterPopupButtons, _Component);

  var _super = _createSuper(RouterPopupButtons);

  function RouterPopupButtons(props) {
    (0, _classCallCheck2["default"])(this, RouterPopupButtons);
    return _super.call(this, props);
  }

  (0, _createClass2["default"])(RouterPopupButtons, [{
    key: "render",
    value: function render() {
      var _this = this;

      var scope = this;
      var geometry = this.props.config.feature.getGeometry();

      if (geometry instanceof _geom.LineString) {
        var editRoute = function editRoute() {
          var coordinates = geometry.getCoordinates();
          var i = 1;

          while (coordinates.length > 15) {
            geometry = geometry.simplify(i);
            coordinates = geometry.getCoordinates();
            i += 2;

            if (i > 42) {
              //prevent endless loop & magic number is magic
              Promise.all(/*! import() */[__webpack_require__.e("vendors-CoreBundle_node_modules_sweetalert2_dist_sweetalert2_all_js"), __webpack_require__.e("CoreBundle_Resources_public_vendor_js_AlertHandler_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./../../../../../CoreBundle/Resources/public/vendor/js/AlertHandler */ "../CoreBundle/Resources/public/vendor/js/AlertHandler.js")).then(function (module) {
                var alertHandler = new module.AlertHandler();
                alertHandler.showInfoDialog(scope.props.config.router.languageConstants.ROUTER_VIEW_ALERT_ERROR, scope.props.config.router.languageConstants.ROUTER_ERROR_LINESTRING);
              });
              return;
            }
          }

          ;

          _this.props.config.router.openControls(true);

          _this.props.config.router.setMode("route");

          var fromCoordinate = (0, _proj.toLonLat)(coordinates[0], "EPSG:3857");

          _this.props.config.router.setRouteFrom(fromCoordinate[0], fromCoordinate[1]);

          for (var _i = 1; _i < coordinates.length; _i++) {
            var overCoordinate = (0, _proj.toLonLat)(coordinates[_i], "EPSG:3857");

            _this.props.config.router.addOverPoint(overCoordinate[0], overCoordinate[1], _i - 1, true);
          }

          var toCoordinate = (0, _proj.toLonLat)(coordinates[coordinates.length - 1], "EPSG:3857");

          _this.props.config.router.setRouteTo(toCoordinate[0], toCoordinate[1]);
        };

        return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("button", {
          className: "c4g-icon c4g-popup-route-edit",
          title: this.props.config.router.languageConstants.POPUP_ROUTE_EDIT,
          onMouseUp: function onMouseUp() {
            editRoute();
          }
        }));
      } else {
        var coordinates;

        if (geometry instanceof _geom.Polygon) {
          var extent = geometry.getExtent();
          coordinates = [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
        } else {
          coordinates = geometry.getCoordinates();
        }

        var routeFrom = function routeFrom() {
          _this.props.config.router.openControls(true);

          _this.props.config.router.setMode("route"); // from address


          var fromCoords = (0, _proj.toLonLat)(coordinates, "EPSG:3857");

          _this.props.config.router.setRouteFrom(fromCoords[0], fromCoords[1]);
        };

        var routeTo = function routeTo() {
          _this.props.config.router.openControls(true);

          _this.props.config.router.setMode("route"); // to address


          var toCoords = (0, _proj.toLonLat)(coordinates, "EPSG:3857");

          _this.props.config.router.setRouteTo(toCoords[0], toCoords[1]);
        };

        return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("button", {
          className: "c4g-icon c4g-popup-route-from",
          title: this.props.config.router.languageConstants.POPUP_ROUTE_FROM,
          onMouseUp: function onMouseUp() {
            routeFrom();
          }
        }), /*#__PURE__*/_react["default"].createElement("button", {
          className: "c4g-icon c4g-popup-route-to",
          title: this.props.config.router.languageConstants.POPUP_ROUTE_TO,
          onMouseUp: function onMouseUp() {
            routeTo();
          }
        }));
      }
    }
  }]);
  return RouterPopupButtons;
}(_react.Component);

exports.RouterPopupButtons = RouterPopupButtons;

/***/ }),

/***/ "./Resources/public/js/components/c4g-router-result-container.jsx":
/*!************************************************************************!*\
  !*** ./Resources/public/js/components/c4g-router-result-container.jsx ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RouterResultContainer = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _GPX = _interopRequireDefault(__webpack_require__(/*! ol/format/GPX */ "./node_modules/ol/format/GPX.js"));

var _c4gRouterTimeConversions = __webpack_require__(/*! ../c4g-router-time-conversions */ "./Resources/public/js/c4g-router-time-conversions.js");

var _c4gTitlebar = __webpack_require__(/*! ./c4g-titlebar.jsx */ "./Resources/public/js/components/c4g-titlebar.jsx");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var RouterInstructionsContainer = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-router-instructions-container_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-router-instructions-container.jsx */ "./Resources/public/js/components/c4g-router-instructions-container.jsx"));
});

var RouterFeatureList = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-router-feature-list_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-router-feature-list.jsx */ "./Resources/public/js/components/c4g-router-feature-list.jsx"));
});

var RouterResultContainer = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(RouterResultContainer, _Component);

  var _super = _createSuper(RouterResultContainer);

  function RouterResultContainer(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, RouterResultContainer);
    _this = _super.call(this, props);
    _this.clickControl = _this.clickControl.bind((0, _assertThisInitialized2["default"])(_this));
    _this.profileTranslation = {
      0: "car",
      1: "hgv",
      2: "bike",
      3: "bike",
      4: "bike",
      5: "bike",
      6: "bike",
      7: "bike",
      8: "foot",
      9: "foot",
      10: "wheelchair",
      11: "hgv",
      12: "scooter",
      13: "scooter"
    };
    window.c4gMapsHooks.hook_map_click = window.c4gMapsHooks.hook_map_click || [];

    var scrolltoElement = function scrolltoElement(clickEvent) {
      var feature = _this.props.mapController.map.forEachFeatureAtPixel(clickEvent.pixel, function (feature, layer) {
        return feature;
      });

      if (feature && feature.get('tid')) {
        var zoomToId = feature.get('tid');

        _this.props.setResultFeat(clickEvent);

        _this.props.setActiveId(zoomToId);
      }
    };

    window.c4gMapsHooks.hook_map_click.push(scrolltoElement);
    return _this;
  }

  (0, _createClass2["default"])(RouterResultContainer, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var result = "";
      var time = "";
      var distance = "";
      var detour = "";
      var featureCount = "";

      if (this.props.routerInstructions && this.props.routerInstructions.instructions && this.props.mode === "route") {
        time = (0, _c4gRouterTimeConversions.toHumanTime)(this.props.routerInstructions.time);
        distance = (0, _c4gRouterTimeConversions.toHumanDistance)(this.props.routerInstructions.distance);
      } else if (this.props.featureList && this.props.mode === "area") {
        detour = this.props.detour;
        featureCount = this.props.featureList.features.length;
      }

      var routerHeaderContent = "";

      var printFunction = function printFunction() {
        var querySelector = _this2.props.resultMode === "instr" ? '.c4g-route-instructions-wrapper' : '.c4g-route-feature-wrapper';
        var prtContent = document.querySelector(querySelector).cloneNode(true);

        if (_this2.props.resultMode === "instr") {
          var fromAddress = _this2.props.router.state.fromAddress;
          var divFromAddress = document.createElement('div');
          var labelFromAddress = document.createElement('label');
          labelFromAddress.innerHTML = _this2.props.lang.ROUTER_FROM + ": ";
          var emFromAddress = document.createElement('em');
          emFromAddress.innerHTML = fromAddress;
          divFromAddress.appendChild(labelFromAddress);
          divFromAddress.appendChild(emFromAddress);
          divFromAddress.appendChild(document.createElement('em'));
          var toAddress = _this2.props.router.state.toAddress;
          var divToAddress = document.createElement('div');
          var labelToAddress = document.createElement('label');
          labelToAddress.innerHTML = _this2.props.lang.ROUTER_FROM + ": ";
          var emToAddress = document.createElement('em');
          emToAddress.innerHTML = toAddress;
          divToAddress.appendChild(labelToAddress);
          divToAddress.appendChild(emToAddress);
          divToAddress.appendChild(document.createElement('em'));
          prtContent.querySelector('.c4g-router-instructions-header').appendChild(divFromAddress);
          prtContent.querySelector('.c4g-router-instructions-header').appendChild(divToAddress);
        }

        prtContent.querySelector('.c4g-router-print').remove();
        var WinPrint = window.open('', '', 'left=0,top=0,width=800,height=900,toolbar=0,scrollbars=0,status=0');
        WinPrint.document.write(prtContent.innerHTML);
        WinPrint.document.close();
        WinPrint.focus();
        WinPrint.print();
        WinPrint.close();
      };

      if (time && distance && this.props.mode === "route") {
        routerHeaderContent = /*#__PURE__*/_react["default"].createElement("div", {
          className: "c4g-router-instructions-header"
        }, /*#__PURE__*/_react["default"].createElement("div", {
          className: "c4g-router-route-time"
        }, /*#__PURE__*/_react["default"].createElement("label", null, this.props.lang.ROUTER_VIEW_LABEL_TIME), /*#__PURE__*/_react["default"].createElement("em", null, time)), /*#__PURE__*/_react["default"].createElement("div", {
          className: "c4g-router-route-distance"
        }, /*#__PURE__*/_react["default"].createElement("label", null, this.props.lang.ROUTER_VIEW_LABEL_DISTANCE), /*#__PURE__*/_react["default"].createElement("em", null, distance)), /*#__PURE__*/_react["default"].createElement("button", {
          className: "c4g-router-download",
          title: this.props.lang.ROUTER_DOWNLOAD,
          onMouseUp: function onMouseUp() {
            _this2.exportGpx();
          }
        }), /*#__PURE__*/_react["default"].createElement("button", {
          className: "c4g-router-print",
          title: this.props.lang.ROUTER_PRINT,
          onMouseUp: function onMouseUp() {
            printFunction();
          }
        }));
      } else if (detour && featureCount && this.props.mode === "area") {
        routerHeaderContent = /*#__PURE__*/_react["default"].createElement("div", {
          className: "c4g-router-instructions-header"
        }, /*#__PURE__*/_react["default"].createElement("div", {
          className: "c4g-router-area-detour"
        }, /*#__PURE__*/_react["default"].createElement("label", null, this.props.lang.AREA_DETOUR, ":"), /*#__PURE__*/_react["default"].createElement("em", null, detour, " km")), /*#__PURE__*/_react["default"].createElement("div", {
          className: "c4g-router-area-featurecount"
        }, /*#__PURE__*/_react["default"].createElement("label", null, this.props.lang.AREA_FEATURECOUNT, ":"), /*#__PURE__*/_react["default"].createElement("em", null, featureCount)), /*#__PURE__*/_react["default"].createElement("button", {
          className: "c4g-router-print",
          onMouseUp: function onMouseUp() {
            printFunction();
          }
        }));
      }

      if (this.props.resultMode === "instr" && this.props.routerInstructions && this.props.mode === "route") {
        result = /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
          fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading..\"")
        }, /*#__PURE__*/_react["default"].createElement(RouterInstructionsContainer, {
          className: "c4g-route-instructions-wrapper",
          mapController: this.props.mapController,
          routerInstructions: this.props.routerInstructions,
          routerWaySource: this.props.routerWaySource,
          routerHintSource: this.props.routerHintSource,
          open: this.props.open,
          header: routerHeaderContent
        }));
      } else if (this.props.resultMode === "feat" || this.props.mode === "area" || !this.props.routerInstructions && this.props.featureList) {
        result = /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
          fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading..\"")
        }, /*#__PURE__*/_react["default"].createElement(RouterFeatureList, {
          className: "c4g-route-feature-wrapper",
          activeId: this.props.activeId,
          setActiveId: this.props.setActiveId,
          routeMode: this.props.mode,
          layerRoute: this.props.layerRoute,
          layerArea: this.props.layerArea,
          featureList: this.props.featureList,
          mapController: this.props.mapController,
          featureSource: this.props.featureSource,
          layerValueRoute: this.props.layerValueRoute,
          layerValueArea: this.props.layerValueArea,
          header: routerHeaderContent
        }));
      }

      if (this.props.open) {
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: this.props.className + (this.props.open ? " c4g-open" : " c4g-close") + (this.props.open ? " c4g-details-open" : "")
        }, result);
      } else {
        return null;
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var className = this.props.className + (this.props.open ? " c4g-open" : " c4g-close");
      var container = document.getElementsByClassName(className)[0];
      var controlContainer = document.querySelector(".c4g-router-panel.c4g-open");

      if (controlContainer) {
        controlContainer = controlContainer[0];
      }

      var mapContainer = document.querySelector(".c4g_map") ? document.querySelector(".c4g_map")[0] : false;
      var scope = this;

      if (mapContainer && container) {
        if (controlContainer) {
          if (container.offsetHeight + controlContainer.offsetHeight + 84 > mapContainer.offsetHeight) {
            container.style.height = mapContainer.offsetHeight - controlContainer.offsetHeight;
          }
        }
      }

      if (this.props.mode === "area" && this.props.resultMode !== "feat") {
        this.props.router.setState({
          resultMode: "feat"
        });
      }
    }
  }, {
    key: "open",
    value: function open() {
      this.props.setOpen(true);
    }
  }, {
    key: "close",
    value: function close() {
      this.props.setOpen(false);
    }
  }, {
    key: "clickControl",
    value: function clickControl() {
      if (this.props.open) {
        this.close();
      } else {
        this.open();
      }
    }
  }, {
    key: "exportGpx",
    value: function exportGpx() {
      var source = this.props.router.routerWaySource;
      var format = new _GPX["default"]();

      if (source && source.getFeatures && source.getFeatures()) {
        var strExport = format.writeFeatures(source.getFeatures(), {
          featureProjection: "EPSG:3857",
          dataProjection: "EPSG:4326",
          decimals: 3
        });
        var element = document.createElement('a');
        element.setAttribute('href', 'data:text/xml;charset=utf-8,' + encodeURIComponent(strExport));
        element.setAttribute('download', "route.gpx");
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
        console.log(strExport);
      }
    }
  }, {
    key: "slideInCollidingElements",
    value: function slideInCollidingElements() {// override parent method
    }
  }, {
    key: "slideOutCollidingElements",
    value: function slideOutCollidingElements() {// override parent method
    }
  }]);
  return RouterResultContainer;
}(_react.Component);

exports.RouterResultContainer = RouterResultContainer;

/***/ }),

/***/ "./Resources/public/js/components/c4g-router-view.jsx":
/*!************************************************************!*\
  !*** ./Resources/public/js/components/c4g-router-view.jsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RouterView = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _c4gRouterResultContainer = __webpack_require__(/*! ./c4g-router-result-container.jsx */ "./Resources/public/js/components/c4g-router-result-container.jsx");

var _routingConstants = __webpack_require__(/*! ./../routing-constants */ "./Resources/public/js/routing-constants.js");

var _ol = __webpack_require__(/*! ol */ "./node_modules/ol/index.js");

var _geom = __webpack_require__(/*! ol/geom */ "./node_modules/ol/geom.js");

var _format = __webpack_require__(/*! ol/format */ "./node_modules/ol/format.js");

var _proj = __webpack_require__(/*! ol/proj */ "./node_modules/ol/proj.js");

var _style = __webpack_require__(/*! ol/style */ "./node_modules/ol/style.js");

var _layer = __webpack_require__(/*! ol/layer */ "./node_modules/ol/layer.js");

var _source = __webpack_require__(/*! ol/source */ "./node_modules/ol/source.js");

var _interaction = __webpack_require__(/*! ol/interaction */ "./node_modules/ol/interaction.js");

var _c4gRoutingPermalink = __webpack_require__(/*! ./../c4g-routing-permalink */ "./Resources/public/js/c4g-routing-permalink.js");

var _routingConstantI18n = __webpack_require__(/*! ./../routing-constant-i18n */ "./Resources/public/js/routing-constant-i18n.js");

var _c4gMapsConstant = __webpack_require__(/*! ./../c4g-maps-constant */ "./Resources/public/js/c4g-maps-constant.js");

var _c4gMapsUtils = __webpack_require__(/*! ./../c4g-maps-utils */ "./Resources/public/js/c4g-maps-utils.js");

var _c4gRouterPopupButtons = __webpack_require__(/*! ./c4g-router-popup-buttons.jsx */ "./Resources/public/js/components/c4g-router-popup-buttons.jsx");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Titlebar = /*#__PURE__*/_react["default"].lazy(function () {
  return Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-titlebar.jsx */ "./Resources/public/js/components/c4g-titlebar.jsx"));
});

//const RouterPopupButtons = React.lazy(() => import('./c4g-router-popup-buttons.jsx'));
var RouterControls = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-router-controls_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-router-controls.jsx */ "./Resources/public/js/components/c4g-router-controls.jsx"));
});

var RouterProfileSelection = /*#__PURE__*/_react["default"].lazy(function () {
  return __webpack_require__.e(/*! import() */ "Resources_public_js_components_c4g-router-profile-selection_jsx").then(__webpack_require__.bind(__webpack_require__, /*! ./c4g-router-profile-selection.jsx */ "./Resources/public/js/components/c4g-router-profile-selection.jsx"));
});

var osmtogeojson = __webpack_require__(/*! osmtogeojson */ "./node_modules/osmtogeojson/index.js");
/**
 * Main router component. It consists of the RouterControls and RouterResultContainer components, and holds the
 * connection to the router model, which is propagated down to the actually needing components.
 */


var RouterView = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(RouterView, _Component);

  var _super = _createSuper(RouterView);

  function RouterView(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, RouterView);
    _this = _super.call(this, props);
    _this.setActiveId = _this.setActiveId.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setOpen = _this.setOpen.bind((0, _assertThisInitialized2["default"])(_this));
    _this.close = _this.close.bind((0, _assertThisInitialized2["default"])(_this));
    _this.openControls = _this.openControls.bind((0, _assertThisInitialized2["default"])(_this));
    _this.resetFromPoint = _this.resetFromPoint.bind((0, _assertThisInitialized2["default"])(_this));
    _this.resetToPoint = _this.resetToPoint.bind((0, _assertThisInitialized2["default"])(_this));
    _this.resetAreaPoint = _this.resetAreaPoint.bind((0, _assertThisInitialized2["default"])(_this));
    _this.toggleResultDetails = _this.toggleResultDetails.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setResultInstr = _this.setResultInstr.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setResultFeat = _this.setResultFeat.bind((0, _assertThisInitialized2["default"])(_this));
    _this.recalculateRoute = _this.recalculateRoute.bind((0, _assertThisInitialized2["default"])(_this));
    var mapController = _this.props.mapController;
    var arrProfiles = [];
    _this.languageConstants = (0, _routingConstantI18n.getLanguage)(mapController.data);

    for (var key in mapController.data.router_profiles) {
      if (mapController.data.router_profiles.hasOwnProperty(key)) {
        arrProfiles.push({
          id: key,
          text: mapController.data.router_profiles[key]
        });
      }
    }

    var layerRoute = null;
    var layerArea = null;
    var layerValueRoute = null;
    var layerValueArea = null;

    if (mapController.data.showFeatures) {
      var routerLayers = mapController.data.routerLayers;

      for (var _key in routerLayers) {
        if (routerLayers.hasOwnProperty(_key)) {
          layerRoute = layerRoute || _key;
          layerValueRoute = Object.keys(routerLayers[layerRoute])[0] || layerValueRoute;
          layerArea = layerArea || _key;
          layerValueArea = Object.keys(routerLayers[layerArea])[0] || layerValueArea;
        }
      }
    }

    _this.state = {
      router: props.router,
      objSettings: {
        "proxyUrl": mapController && mapController.data ? mapController.data.proxyUrl : '',
        "keyAutocomplete": mapController && mapController.data ? mapController.data.autocomplete : '',
        "center": function center() {
          var center = mapController.map.getView().getCenter();
          center = (0, _proj.transform)(center, "EPSG:3857", "EPSG:4326");
          return center;
        },
        "geosearchParams": mapController.data.geosearch.params
      },
      activeId: null,
      openResults: false,
      containerAddresses: {
        arrFromPositions: [],
        arrFromNames: [],
        arrToPositions: [],
        arrToNames: [],
        arrAreaPositions: [],
        arrAreaNames: [],
        arrOverPositions: {},
        arrOverNames: {}
      },
      fromAddress: "",
      toAddress: "",
      areaAddress: "",
      layerRoute: layerRoute,
      layerArea: layerArea,
      layerValueRoute: layerValueRoute,
      layerValueArea: layerValueArea,
      detourRoute: props.detourRoute.initial,
      detourArea: props.detourArea.initial,
      featureList: {
        features: [],
        type: ""
      },
      mode: mapController.data.initialMode,
      overPtCtr: 0,
      overAddresses: [],
      featureSource: undefined,
      routerWaySource: undefined,
      routerHintSource: undefined,
      areaPoint: null,
      fromPoint: null,
      toPoint: null,
      overPoints: [],
      profiles: arrProfiles ? arrProfiles : [],
      currentProfile: arrProfiles && arrProfiles[0] && arrProfiles[0].id ? arrProfiles[0].id : 0,
      open: props.mapController.data.initial_open_comp === "routing" || false,
      //ToDO
      openSettings: props.mapController.data.initial_open_comp === "routing" || false,
      //ToDO
      routerInstructions: {},
      resultMode: props.mapController.data.initialResultMode || "instr"
    };
    _this.popupRouteButtonWrapper = ""; // this is needed because of the different popup handlings

    _this.swapPoints = _this.swapPoints.bind((0, _assertThisInitialized2["default"])(_this));

    if (mapController.data.usePermalink) {
      _this.permalink = new _c4gRoutingPermalink.RoutingPermalink((0, _assertThisInitialized2["default"])(_this));
    }

    _this.profileTranslation = {
      0: "car",
      1: "hgv",
      2: "bike",
      3: "bike",
      4: "bike",
      5: "bike",
      6: "bike",
      7: "bike",
      8: "foot",
      9: "foot",
      10: "wheelchair",
      11: "hgv",
      12: "scooter",
      13: "scooter"
    };

    _this.init();

    return _this;
  }

  (0, _createClass2["default"])(RouterView, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var scope = this;
      var mapData = this.props.mapController.data;
      var sources = {
        waySource: this.state.routerWaySource,
        hintSource: this.state.routerHintSource,
        featureSource: this.state.featureSource
      };
      var sliderOptions = {};

      if (this.state.mode === "route") {
        sliderOptions = {
          min: mapData.detourRoute.min,
          max: mapData.detourRoute.max,
          value: this.state.detourRoute,
          router: this
        };
      } else if (this.state.mode === "area") {
        sliderOptions = {
          min: mapData.detourArea.min,
          max: mapData.detourArea.max,
          value: this.state.detourArea,
          router: this
        };
      }

      var resetFunctions = {
        from: this.resetFromPoint,
        to: this.resetToPoint,
        area: this.resetAreaPoint
      };
      var overSettings = this.createOverSettings();
      var headline = "";

      if (this.state.mode === "route") {
        headline = this.props.mapController.data.routerHeadline || this.languageConstants.ROUTER_DEFAULT_HEADLINE_ROUTE;
      } else if (this.state.mode === "area") {
        headline = this.props.mapController.data.areaHeadline || this.languageConstants.ROUTER_DEFAULT_HEADLINE_AREA;
      }

      var instructions = this.state.routerInstructions.instructions;
      var resultSwitcher = "";
      var switcherButtons = [];

      if (this.state.featureList.features.length > 0 && (this.state.fromAddress && this.state.toAddress && this.state.mode === "route" || this.state.areaAddress && this.state.mode === "area")) {
        switcherButtons.push( /*#__PURE__*/_react["default"].createElement("button", {
          id: "c4g-router-button-feature",
          className: this.state.resultMode === "feat" && this.state.openResults ? "c4g-active" : "c4g-inactive",
          onMouseUp: this.setResultFeat,
          key: 1,
          title: "Ergebnisliste anzeigen"
        }));
      }

      if (instructions && instructions.length > 0 && this.state.mode === "route") {
        switcherButtons.push( /*#__PURE__*/_react["default"].createElement("button", {
          id: "c4g-router-button-instructions",
          className: this.state.resultMode === "instr" && this.state.openResults ? "c4g-active" : "c4g-inactive",
          onMouseUp: this.setResultInstr,
          key: 2,
          title: "Routenhinweise anzeigen"
        }));
      }

      if (switcherButtons.length > 0) {
        resultSwitcher = /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("button", {
          className: "c4g-router-hide-form-button " + (this.state.openSettings ? "c4g-active" : "c4g-inactive"),
          onMouseUp: function onMouseUp() {
            _this2.setState({
              openSettings: !_this2.state.openSettings
            });
          },
          title: this.languageConstants.ROUTER_SETTINGS
        }), /*#__PURE__*/_react["default"].createElement("div", {
          className: "c4g-router-mode-switch"
        }, switcherButtons));
      }

      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "c4g-router-wrapper"
      }, /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
        fallback: /*#__PURE__*/_react["default"].createElement("div", null, "Loading...")
      }, /*#__PURE__*/_react["default"].createElement(Titlebar, {
        wrapperClass: "c4g-router-header",
        header: headline,
        headerClass: "c4g-router-headline",
        detailBtnClass: "c4g-router-extended-options",
        hideContainer: ".c4g-router-container-right",
        detailBtnCb: this.toggleDetails,
        closeBtnClass: "c4g-router-close",
        closeBtnCb: this.close,
        closeBtnTitle: this.languageConstants.CLOSE
      })), /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
        className: "c4g-router-switcher"
      }, /*#__PURE__*/_react["default"].createElement("div", null, resultSwitcher), /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
        fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading...\"")
      }, /*#__PURE__*/_react["default"].createElement(RouterProfileSelection, {
        profiles: this.state.profiles,
        router: this,
        currentProfile: this.state.currentProfile
      })))), /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
        fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading\"")
      }, /*#__PURE__*/_react["default"].createElement(RouterControls, {
        router: this,
        open: this.state.open && this.state.openSettings,
        setOpen: this.openControls,
        profiles: this.state.profiles,
        className: "c4g-router-panel",
        objSettings: this.state.objSettings,
        objFunctions: this.objFunctions,
        overSettings: overSettings,
        enableOverPoints: this.props.mapController.data.enableOverPoints,
        sources: sources,
        layers: this.props.mapController.data.routerLayers,
        containerAddresses: this.state.containerAddresses,
        resetFunctions: resetFunctions,
        mapController: this.props.mapController,
        currentProfile: this.state.currentProfile,
        fromAddress: this.state.fromAddress,
        switchTargets: this.props.mapController.data.enableTargetSwitch,
        toAddress: this.state.toAddress,
        areaAddress: this.state.areaAddress,
        mode: this.state.mode,
        sliderOptions: sliderOptions,
        title: this.languageConstants.CTRL_ROUTER,
        target: this.props.target
      })), /*#__PURE__*/_react["default"].createElement(_react.Suspense, {
        fallback: /*#__PURE__*/_react["default"].createElement("div", null, "\"loading\"")
      }, /*#__PURE__*/_react["default"].createElement(_c4gRouterResultContainer.RouterResultContainer, {
        visible: this.state.open,
        open: this.state.open && this.state.openResults,
        setOpen: this.setOpen,
        direction: "bottom",
        className: "c4g-router-result-container",
        mapController: this.props.mapController,
        mode: this.state.mode,
        setResultFeat: this.setResultFeat,
        routerInstructions: this.state.routerInstructions,
        featureList: this.state.featureList,
        routerWaySource: this.state.routerWaySource,
        detour: this.state.detourArea,
        layerRoute: this.state.layerRoute,
        layerValueRoute: this.state.layerValueRoute,
        layerArea: this.state.layerArea,
        resultMode: this.state.resultMode,
        router: this,
        layerValueArea: this.state.layerValueArea,
        routerHintSource: this.state.routerHintSource,
        featureSource: this.state.featureSource,
        profile: this.state.currentProfile,
        activeId: this.state.activeId,
        setActiveId: this.setActiveId,
        detailOpen: this.state.resultDetailOpen,
        toggleDetailOpen: this.toggleResultDetails,
        headline: "Router Ergebnisse",
        lang: this.languageConstants
      })));
    }
  }, {
    key: "setResultInstr",
    value: function setResultInstr(event) {
      event.stopPropagation();
      this.setState({
        resultMode: "instr",
        openResults: true
      });
    }
  }, {
    key: "setResultFeat",
    value: function setResultFeat(event) {
      event.stopPropagation();
      this.setState({
        resultMode: "feat",
        openResults: true
      });
    }
  }, {
    key: "close",
    value: function close() {
      this.openControls(false);
      jQuery(this.props.mapController.routerContainer).removeClass("c4g-open").addClass("c4g-close");
    }
  }, {
    key: "getProfileById",
    value: function getProfileById(id) {
      for (var i = 0; i < this.state.profiles.length; i++) {
        if (parseInt(this.state.profiles[i].id, 10) === parseInt(id, 10)) {
          return this.state.profiles[i];
        }
      }

      return null;
    }
  }, {
    key: "toggleResultDetails",
    value: function toggleResultDetails() {
      if (this.state.resultDetailOpen) {
        this.setState({
          resultDetailOpen: false
        });
      } else {
        this.setState({
          resultDetailOpen: true
        });
      }
    }
  }, {
    key: "openControls",
    value: function openControls(open) {
      if (open) {
        this.props.mapController.setOpenComponent(this);
        this.setState({
          open: true,
          openSettings: true
        });
        jQuery(this.props.mapController.routerContainer).removeClass("c4g-close").addClass("c4g-open");
      } else {
        this.setState({
          open: false
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.mapController.data.usePermalink) {
        this.permalink.handleInitialParams();
      }

      if (this.props.mapController.data.router_div) {
        this.setState({
          open: true
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, snapshot) {
      if (this.props.mapController.data.usePermalink) {
        var fragments = this.permalink.linkFragments;

        if (this.state.fromPoint && fragments.fromAddress !== this.state.fromPoint.getCoordinates()) {
          this.permalink.updateLinkFragments("fromAddress", this.state.fromPoint.getCoordinates());
        }

        if (this.state.toPoint && fragments.toAddress !== this.state.toPoint.getCoordinates()) {
          this.permalink.updateLinkFragments("toAddress", this.state.toPoint.getCoordinates());
        }

        if (fragments.mode !== this.state.mode) {
          this.permalink.updateLinkFragments("mode", this.state.mode);
        }

        if (fragments.detourArea !== this.state.detourArea) {
          this.permalink.updateLinkFragments("detourArea", this.state.detourArea);
        }

        if (fragments.detourRoute !== this.state.detourRoute) {
          this.permalink.updateLinkFragments("detourRoute", this.state.detourRoute);
        }
      }

      if (prevState.open === true && this.state.open === false) {
        this.routerLayerGroup.setVisible(false);
        this.modWayInteraction.setActive(false);
        jQuery(this.props.mapController.routerContainer).removeClass("c4g-open").addClass("c4g-close");
      }

      if (this.state.open && !prevState.open) {
        this.props.mapController.hideOtherComponents(this);
        this.routerLayerGroup.setVisible(true);
        this.modWayInteraction.setActive(true);
        jQuery(this.props.mapController.routerContainer).addClass("c4g-open").removeClass("c4g-close");

        if (!this.state.openSettings && !this.state.openResults) {
          this.setState({
            openSettings: true
          });
        }
      }

      if (this.state.openSettings && !prevState.openSettings) {
        this.setState({
          openResults: false
        });
      }

      if (this.state.openResults && !prevState.openResults) {
        this.setState({
          openSettings: false
        });
      }

      if (!this.state.openResults && !this.state.openSettings && prevState.openSettings) {
        this.setState({
          openSettings: true
        });
      }

      if (!this.state.openSettings && !this.state.openResults && prevState.openResults) {
        this.setState({
          openResults: true
        });
      }

      if (this.state.mode === "route" && (!this.state.fromAddress || !this.state.toAddress) && this.state.openResults && prevState.mode === "area") {
        this.setState({
          openResults: false
        });
      }

      if (this.props.mapController.data.caching && !this.state.open) {
        var panelVal = _c4gMapsUtils.utils.getValue('panel');

        if (panelVal === this.constructor.name) {
          _c4gMapsUtils.utils.storeValue('panel', "");
        }
      }
    }
  }, {
    key: "setProfile",
    value: function setProfile(profile) {
      this.setState({
        currentProfile: profile
      }, this.updateRouteLayersAndPoints);
    }
  }, {
    key: "setLayer",
    value: function setLayer(layer) {
      var routerLayers = this.props.mapController.data.routerLayers;
      var layerValues = routerLayers[layer];
      var newDefaultLayerValue = Object.keys(layerValues)[0];

      if (this.state.mode === "route") {
        this.setState({
          layerRoute: layer,
          layerValueRoute: newDefaultLayerValue
        }, this.recalculateRoute);
      } else {
        this.setState({
          layerArea: layer,
          layerValueArea: newDefaultLayerValue
        }, this.performArea);
      }
    }
  }, {
    key: "setLayerValue",
    value: function setLayerValue(layerValue) {
      var scope = this;

      if (this.state.mode === "route") {
        this.setState({
          layerValueRoute: layerValue
        }, function () {
          scope.showFeatures(scope.state.featureList.features, scope.state.featureList.type, "router", false);
        });
      } else if (this.state.mode === "area") {
        this.setState({
          layerValueArea: layerValue
        }, function () {
          scope.showFeatures(scope.state.featureList.features, scope.state.featureList.type, "area", false);
        });
      }
    }
  }, {
    key: "setActiveId",
    value: function setActiveId(activeId) {
      this.setState({
        "activeId": activeId
      });
    }
  }, {
    key: "setOpen",
    value: function setOpen(bool) {
      this.setState({
        "openResults": bool
      });
    }
  }, {
    key: "setAreaPoint",
    value: function setAreaPoint(longitude, latitude) {
      var scope = this;
      this.performReverseSearch("areaAddress", [longitude, latitude]);
      var point = new _geom.Point([longitude, latitude]);
      this.setState({
        areaPoint: point
      }, function () {
        return scope.updateRouteLayersAndPoints();
      });
    }
  }, {
    key: "setRouteFrom",
    value: function setRouteFrom(longitude, latitude) {
      var scope = this;
      this.performReverseSearch("fromAddress", [longitude, latitude]);
      var point = new _geom.Point([longitude, latitude]);
      this.setState({
        fromPoint: point
      }, function () {
        scope.updateRouteLayersAndPoints();
      });
    }
  }, {
    key: "setRouteTo",
    value: function setRouteTo(longitude, latitude) {
      var scope = this;
      this.performReverseSearch("toAddress", [longitude, latitude]);
      var point = new _geom.Point([longitude, latitude]);
      this.setState({
        toPoint: point
      }, function () {
        return scope.updateRouteLayersAndPoints();
      });
    }
  }, {
    key: "addOverPoint",
    value: function addOverPoint(longitude, latitude, index) {
      var dontSearch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var scope = this;
      var overAddresses = this.state.overAddresses;

      if (!dontSearch) {
        this.performReverseSearch("overAddress", [longitude, latitude], index);
      } else {
        //display coordinates instead of
        overAddresses.splice(index, 1, longitude + ", " + latitude);
      }

      var point = new _geom.Point([longitude, latitude]);
      var overPoints = this.state.overPoints;
      overPoints.splice(index, 1, point); // overPoints[index] = point;

      this.setState({
        overPoints: overPoints,
        overAddresses: overAddresses
      }, function () {
        return scope.updateRouteLayersAndPoints();
      });
    }
  }, {
    key: "setMode",
    value: function setMode(mode) {
      var _this3 = this;

      if (this.state.mode !== mode) {
        var sources = {
          waySource: this.state.routerWaySource,
          hintSource: this.state.routerHintSource,
          featureSource: this.state.featureSource,
          locationSource: this.locationsSource
        };
        this.setState({
          mode: mode
        }, function () {
          for (var key in sources) {
            if (sources.hasOwnProperty(key) && sources[key]) {
              sources[key].clear();
            }
          }

          _this3.updateRouteLayersAndPoints();
        });
      }
    }
  }, {
    key: "swapPoints",
    value: function swapPoints() {
      var newFromPoint = this.state.toPoint;
      var newFromAddress = this.state.toAddress;
      var newToPoint = this.state.fromPoint;
      var newToAddress = this.state.fromAddress;
      var containerAddresses = this.state.containerAddresses;
      var tmpNames = containerAddresses.arrFromNames;
      var tmpPos = containerAddresses.arrFromPositions;
      containerAddresses.arrFromNames = containerAddresses.arrToNames;
      containerAddresses.arrFromPositions = containerAddresses.arrToPositions;
      containerAddresses.arrToNames = tmpNames;
      containerAddresses.arrToPositions = tmpPos;
      this.setState({
        fromPoint: newFromPoint,
        fromAddress: newFromAddress,
        toPoint: newToPoint,
        toAddress: newToAddress,
        containerAddresses: containerAddresses
      }, this.updateRouteLayersAndPoints);
    }
  }, {
    key: "createOverSettings",
    value: function createOverSettings() {
      var scope = this;
      var objSettings = {};
      objSettings.overAddresses = this.state.overAddresses;
      objSettings.overPoints = this.state.overPoints;
      objSettings.overPtCtr = this.state.overPtCtr; // increments the overPtCtr so the popup can render additional overFields

      objSettings.overFunction = function () {
        var containerAddresses = scope.state.containerAddresses;
        containerAddresses.arrOverNames[scope.state.overPtCtr] = [];
        containerAddresses.arrOverPositions[scope.state.overPtCtr] = [];
        scope.setState({
          overPtCtr: scope.state.overPtCtr + 1,
          containerAddresses: containerAddresses
        });
      };

      objSettings.swapPoints = this.swapPoints;
      objSettings.objFunctions = {};

      for (var i = 0; i < this.state.overPtCtr; i++) {
        objSettings.objFunctions[i] = this.createAutocompleteFunctionsForOverField(i);

        if (!objSettings.overAddresses[i]) {
          objSettings.overAddresses[i] = "";
        }

        if (!objSettings.overPoints[i]) {
          objSettings.overPoints[i] = null;
        }
      }

      return objSettings;
    }
  }, {
    key: "createAutocompleteFunctionsForOverField",
    value: function createAutocompleteFunctionsForOverField(fieldId) {
      var scope = this; // set listener for the autocomplete from field

      var deleteOverListener = function deleteOverListener(event) {
        var containerAddresses = scope.state.containerAddresses;
        containerAddresses.arrOverPositions[fieldId] = [];
        containerAddresses.arrOverNames[fieldId] = [];
        var overPoints = scope.state.overPoints;
        overPoints.splice(fieldId, 1); // delete overPoints[fieldId];

        var overAddresses = scope.state.overAddresses;
        overAddresses.splice(fieldId, 1); // delete overAddresses[fieldId];

        scope.setState({
          overPoints: overPoints,
          containerAddresses: containerAddresses,
          overAddresses: overAddresses,
          overPtCtr: scope.state.overPtCtr - 1
        }, function () {
          scope.updateRouteLayersAndPoints();
        });
      };

      var selectOverListener = function selectOverListener(event, ui) {
        var overAddresses, overPoints, overValue;
        var value = ui.item.value;
        var index = scope.state.containerAddresses.arrOverNames[fieldId].findIndex(function (danger) {
          return danger === value;
        });
        var coord = scope.state.containerAddresses.arrOverPositions[fieldId][index];
        overAddresses = scope.state.overAddresses;
        overAddresses[fieldId] = scope.state.containerAddresses.arrOverNames[fieldId][index];
        overValue = new _geom.Point([coord[1], coord[0]]);
        overPoints = scope.state.overPoints;
        overPoints[fieldId] = overValue;
        scope.setState({
          overPoints: overPoints,
          overAddresses: overAddresses
        }, function () {
          scope.updateRouteLayersAndPoints();
        });
      };

      var changeOverListener = function changeOverListener() {// self.fromValue = null;
      };

      return {
        "selectListener": selectOverListener,
        "deleteFunction": deleteOverListener,
        "changeListener": changeOverListener
      };
    }
  }, {
    key: "updateRouteLayersAndPoints",
    value: function updateRouteLayersAndPoints() {
      var _this4 = this;

      var scope = this;
      this.locationsSource.clear();
      this.areaSource.clear();

      if (this.state.mode === "route") {
        if (this.state.fromPoint) {
          var tmpFeature = new _ol.Feature({
            geometry: this.state.fromPoint.clone().transform('EPSG:4326', 'EPSG:3857')
          });

          if (this.props.mapController.data.router_from_locstyle && this.props.mapController.proxy.locationStyleController.arrLocStyles[this.props.mapController.data.router_from_locstyle]) {
            tmpFeature.setStyle(this.props.mapController.proxy.locationStyleController.arrLocStyles[this.props.mapController.data.router_from_locstyle].style);
          } else {
            var doneFunction = function doneFunction() {
              tmpFeature.setStyle(_this4.props.mapController.proxy.locationStyleController.arrLocStyles[_this4.props.mapController.data.router_from_locstyle].style);
            };

            this.props.mapController.proxy.locationStyleController.loadLocationStyles([this.props.mapController.data.router_from_locstyle], {
              "done": doneFunction
            });
          }

          this.locationsSource.addFeature(tmpFeature);
        }

        if (this.state.toPoint) {
          var _tmpFeature = new _ol.Feature({
            geometry: this.state.toPoint.clone().transform('EPSG:4326', 'EPSG:3857')
          });

          if (this.props.mapController.data.router_to_locstyle && this.props.mapController.proxy.locationStyleController.arrLocStyles[this.props.mapController.data.router_to_locstyle]) {
            _tmpFeature.setStyle(this.props.mapController.proxy.locationStyleController.arrLocStyles[this.props.mapController.data.router_to_locstyle].style);
          } else {
            var _doneFunction = function _doneFunction() {
              _tmpFeature.setStyle(_this4.props.mapController.proxy.locationStyleController.arrLocStyles[_this4.props.mapController.data.router_to_locstyle].style);
            };

            this.props.mapController.proxy.locationStyleController.loadLocationStyles([this.props.mapController.data.router_to_locstyle], {
              "done": _doneFunction
            });
          }

          this.locationsSource.addFeature(_tmpFeature);
        }

        if (!(this.state.fromPoint && this.state.toPoint)) {
          this.routerWaySource.clear();
        }

        if (this.state.overPoints && Object.keys(this.state.overPoints).length > 0) {
          for (var key in this.state.overPoints) {
            if (this.state.overPoints.hasOwnProperty(key) && this.state.overPoints[key] !== null) {
              var _tmpFeature2 = new _ol.Feature({
                geometry: this.state.overPoints[key].clone().transform('EPSG:4326', 'EPSG:3857')
              });

              if (this.props.mapController.data.router_interim_locstyle && this.props.mapController.proxy.locationStyleController.arrLocStyles[this.props.mapController.data.router_interim_locstyle]) {
                _tmpFeature2.setStyle(this.props.mapController.proxy.locationStyleController.arrLocStyles[this.props.mapController.data.router_interim_locstyle].style);
              }

              this.locationsSource.addFeature(_tmpFeature2);
            }
          }
        }

        if (!this.props.mapController.data.routeStartButton) {
          this.recalculateRoute();
        }
      } else if (this.state.mode === "area") {
        if (this.state.areaPoint) {
          var _tmpFeature3 = new _ol.Feature({
            geometry: this.state.areaPoint.clone().transform('EPSG:4326', 'EPSG:3857')
          });

          if (this.props.mapController.data.router_point_locstyle && this.props.mapController.proxy.locationStyleController.arrLocStyles[this.props.mapController.data.router_point_locstyle]) {
            _tmpFeature3.setStyle(this.props.mapController.proxy.locationStyleController.arrLocStyles[this.props.mapController.data.router_point_locstyle].style);
          } else {
            this.props.mapController.proxy.locationStyleController.loadLocationStyles([this.props.mapController.data.router_point_locstyle], {
              done: function done() {
                _tmpFeature3.setStyle(this.props.mapController.proxy.locationStyleController.arrLocStyles[scope.props.mapController.data.router_point_locstyle].style);
              }
            });
          }

          this.areaSource.addFeature(_tmpFeature3);
        }

        this.performArea();
      }
    }
  }, {
    key: "resetFromPoint",
    value: function resetFromPoint() {
      var scope = this;
      var containerAddresses = scope.state.containerAddresses;
      containerAddresses.arrFromPositions = [];
      containerAddresses.arrFromNames = [];
      this.setState({
        fromPoint: null,
        containerAddresses: containerAddresses,
        fromAddress: ""
      }, function () {
        scope.updateRouteLayersAndPoints();
      });
    }
  }, {
    key: "resetToPoint",
    value: function resetToPoint() {
      var scope = this;
      var containerAddresses = scope.state.containerAddresses;
      containerAddresses.arrToPositions = [];
      containerAddresses.arrToNames = [];
      this.setState({
        toPoint: null,
        containerAddresses: containerAddresses,
        toAddress: ""
      }, function () {
        scope.updateRouteLayersAndPoints();
      });
    }
  }, {
    key: "resetAreaPoint",
    value: function resetAreaPoint() {
      var scope = this;
      var containerAddresses = scope.state.containerAddresses;
      containerAddresses.arrAreaPositions = [];
      containerAddresses.arrAreaNames = [];
      this.setState({
        areaPoint: null,
        containerAddresses: containerAddresses,
        areaAddress: ""
      }, function () {
        scope.updateRouteLayersAndPoints();
      });
    }
  }, {
    key: "createAutocompleteFunctions",
    value: function createAutocompleteFunctions() {
      var objFunctions = {};
      var scope = this; // set listener for the autocomplete from field

      var deleteFromListener = function deleteFromListener(event) {
        scope.resetFromPoint();
      };

      var selectFromListener = function selectFromListener(event, ui) {
        var value = ui.item.value;
        var index = scope.state.containerAddresses.arrFromNames.findIndex(function (danger) {
          return danger === value;
        });
        var coord = scope.state.containerAddresses.arrFromPositions[index];
        var fromValue = new _geom.Point([coord[1], coord[0]]);
        scope.setState({
          fromPoint: fromValue,
          fromAddress: scope.state.containerAddresses.arrFromNames[index]
        }, function () {
          scope.updateRouteLayersAndPoints();
          scope.recalculateRoute();
        });
      };

      var changeFromListener = function changeFromListener() {// self.fromValue = null;
      };

      objFunctions.fromFunctions = {
        "selectListener": selectFromListener,
        "deleteFunction": deleteFromListener,
        "changeListener": changeFromListener
      }; // set listener for the autocomplete to field

      var deleteToListener = function deleteToListener(event) {
        scope.resetToPoint();
      };

      var selectToListener = function selectToListener(event, ui) {
        var value = ui.item.value;
        var index = scope.state.containerAddresses.arrToNames.findIndex(function (danger) {
          return danger === value;
        });
        var coord = scope.state.containerAddresses.arrToPositions[index];
        var toValue = new _geom.Point([coord[1], coord[0]]);
        scope.setState({
          toPoint: toValue,
          toAddress: scope.state.containerAddresses.arrToNames[index]
        }, function () {
          scope.updateRouteLayersAndPoints();
          scope.recalculateRoute();
        });
      };

      var changeToListener = function changeToListener() {// self.fromValue = null;
      };

      objFunctions.toFunctions = {
        "selectListener": selectToListener,
        "deleteFunction": deleteToListener,
        "changeListener": changeToListener
      }; // set listener for the autocomplete to field

      var deleteAreaListener = function deleteAreaListener(event) {
        var containerAddresses = scope.state.containerAddresses;
        containerAddresses.arrAreaPositions = [];
        containerAddresses.arrAreaNames = [];
        scope.setState({
          areaPoint: null,
          containerAddresses: containerAddresses,
          areaAddress: ""
        }, function () {});
      };

      var selectAreaListener = function selectAreaListener(event, ui) {
        var value = ui.item.value;
        var index = scope.state.containerAddresses.arrAreaNames.findIndex(function (danger) {
          return danger === value;
        });
        var coord = scope.state.containerAddresses.arrAreaPositions[index];
        var areaValue = new _geom.Point([coord[1], coord[0]]);
        scope.setState({
          areaPoint: areaValue,
          areaAddress: scope.state.containerAddresses.arrAreaNames[index]
        }, function () {
          scope.updateRouteLayersAndPoints();
          scope.performArea();
        });
      };

      var changeAreaListener = function changeAreaListener() {// self.fromValue = null;
      };

      objFunctions.areaFunctions = {
        "selectListener": selectAreaListener,
        "deleteFunction": deleteAreaListener,
        "changeListener": changeAreaListener
      };
      return objFunctions;
    }
  }, {
    key: "addPopupHook",
    value: function addPopupHook() {
      var scope = this;

      var createPopupWrapper = function createPopupWrapper(objPopup) {
        var feature = objPopup.feature;
        var router = scope;

        var routingHandler = function routingHandler(event) {
          router.openControls(true);
          router.setMode("route");

          if (jQuery(event.currentTarget).hasClass(_c4gMapsConstant.cssConstants.POPUP_ROUTE_FROM)) {
            // from address
            var fromCoords = (0, _proj.toLonLat)(feature.getGeometry().getCoordinates(), "EPSG:3857");
            router.setRouteFrom(fromCoords[0], fromCoords[1]);
          } else {
            // to address
            var toCoords = (0, _proj.toLonLat)(feature.getGeometry().getCoordinates(), "EPSG:3857");
            router.setRouteTo(toCoords[0], toCoords[1]);
          }
        }; // end of "routingHandler()"


        var routeButtonWrapper = document.createElement('div');
        routeButtonWrapper.className = _c4gMapsConstant.cssConstants.POPUP_ROUTE_WRAPPER;
        var routeFromButton = document.createElement('button');
        routeFromButton.className = _c4gMapsConstant.cssConstants.ICON + ' ' + _c4gMapsConstant.cssConstants.POPUP_ROUTE_FROM;
        jQuery(routeFromButton).click(routingHandler);
        routeButtonWrapper.appendChild(routeFromButton);
        var routeFromButtonSpan = document.createElement('span'); // routeFromButtonSpan.innerHTML = scope.languageConstants.POPUP_ROUTE_FROM;

        routeFromButton.appendChild(routeFromButtonSpan);
        var routeToButton = document.createElement('button');
        routeToButton.className = _c4gMapsConstant.cssConstants.ICON + ' ' + _c4gMapsConstant.cssConstants.POPUP_ROUTE_TO;
        jQuery(routeToButton).click(routingHandler);
        routeButtonWrapper.appendChild(routeToButton);
        var routeToButtonSpan = document.createElement('span'); // routeToButtonSpan.innerHTML = scope.languageConstants.POPUP_ROUTE_TO;

        routeToButton.appendChild(routeToButtonSpan);
        return routeButtonWrapper;
      };

      window.c4gMapsHooks.proxy_appendPopup = window.c4gMapsHooks.proxy_appendPopup || [];
      window.c4gMapsHooks.proxy_appendPopup.push(function (params) {
        var mapController = params.mapController;
        var objPopup = params.popup;

        if (mapController.components.router && objPopup.popup.routing_link) {
          if (parseInt(mapController.data.popupHandling, 10) !== 3) {
            var routeButtonWrapper = createPopupWrapper(objPopup);
            window.c4gMapsPopup.$content.append(routeButtonWrapper);
          } else {
            var config = {
              feature: objPopup.feature,
              router: scope
            };
            params.comp.setAddButtons(_c4gRouterPopupButtons.RouterPopupButtons, config);
          }
        }
      });
    }
  }, {
    key: "init",
    value: function init() {
      var self = this;
      var styles = [this.props.mapController.data.router_from_locstyle, this.props.mapController.data.router_to_locstyle, this.props.mapController.data.router_point_locstyle, this.props.mapController.data.areaCenterLocstyle, this.props.mapController.data.clickLocstyle];

      if (this.props.mapController.data.priorityFeatures && this.props.mapController.data.priorityLocstyle) {
        styles.push(this.props.mapController.data.priorityLocstyle);
      } // check and load location styles via map-proxy


      this.props.mapController.proxy.locationStyleController.loadLocationStyles(styles);
      var mapData = this.props.mapController.data; // create router layer object

      this.objLayers = {};

      for (var key in mapData.routerLayers) {
        if (mapData.routerLayers.hasOwnProperty(key)) {
          this.objLayers[key] = mapData.routerLayers[key][Object.keys(mapData.routerLayers[key])[0]];
        }
      } // Add router layer(s)


      this.routingAltWaySource = new _source.Vector();
      this.routerWaySource = new _source.Vector();
      this.routerWayLayer = new _layer.Vector({
        source: this.routerWaySource,
        zIndex: 1,
        style: [new _style.Style({
          stroke: new _style.Stroke({
            color: 'rgba(255, 255, 255, 0.6)',
            width: 8
          })
        }), new _style.Style({
          stroke: new _style.Stroke({
            color: 'rgba(0, 51, 119, 0.9)',
            width: 4
          })
        })]
      });
      this.routerAltWayLayer = new _layer.Vector({
        source: this.routingAltWaySource,
        zIndex: 0,
        style: [new _style.Style({
          stroke: new _style.Stroke({
            color: 'rgba(255, 255, 255, 0.6)',
            width: 8
          })
        }), new _style.Style({
          stroke: new _style.Stroke({
            color: 'rgba(0, 51, 119, 0.4)',
            width: 4
          })
        })]
      });
      var selectInteraction = new _interaction.Select({
        style: [new _style.Style({
          stroke: new _style.Stroke({
            color: 'rgba(255, 255, 255, 0.0)',
            width: 8
          })
        }), new _style.Style({
          stroke: new _style.Stroke({
            color: 'rgba(255, 51, 119, 0.0)',
            width: 4
          })
        })]
      });
      selectInteraction.on('select', function (event) {
        var feature = event.selected[0];

        if (feature) {
          var geometry = feature.getGeometry();

          if (geometry && geometry.getType() === 'LineString') {
            self.showAltRoute(self.response, feature.getId());
          } else {
            if (feature) {
              self.clickFeatureEntryForFeature(feature);
            }
          }
        }
      });
      this.mapSelectInteraction = selectInteraction;
      this.modWayInteraction = new _interaction.Modify({
        source: this.routerWaySource,
        style: [new _style.Style({
          stroke: new _style.Stroke({
            color: 'rgba(255, 255, 255, 0.0)',
            width: 8
          })
        }), new _style.Style({
          stroke: new _style.Stroke({
            color: 'rgba(255, 51, 119, 0.0)',
            width: 4
          })
        })]
      });
      this.modWayInteraction.on('modifystart', function (event) {
        if (self.state.open !== true) {
          return;
        }

        self.modifyStartPoint = new _geom.Point(event.mapBrowserEvent.coordinate).transform("EPSG:3857", "EPSG:4326");
      });
      this.modWayInteraction.on('modifyend', function (event) {
        if (self.state.open !== true) {
          return;
        }

        var overPoint = new _geom.Point(event.mapBrowserEvent.coordinate).transform("EPSG:3857", "EPSG:4326");
        var minDistance = Infinity;
        var insertId;
        var arrKeys = Object.keys(self.state.overPoints);

        if (arrKeys.length > 0) {
          for (var id in self.state.overPoints) {
            if (self.state.overPoints.hasOwnProperty(id)) {
              var dist = self.calcDistance(self.modifyStartPoint.getCoordinates(), self.state.overPoints[id].getCoordinates());

              if (dist < minDistance) {
                minDistance = dist;
                insertId = id;
              }
            }
          }

          var distStart = self.calcDistance(self.state.fromPoint.getCoordinates(), self.modifyStartPoint.getCoordinates());
          var distEnd = self.calcDistance(self.state.toPoint.getCoordinates(), self.modifyStartPoint.getCoordinates());
          var distStartOld = self.calcDistance(self.state.fromPoint.getCoordinates(), self.state.overPoints[0].getCoordinates());
          var overEndIndex = arrKeys[arrKeys.length - 1];
          var distEndOld = self.calcDistance(self.state.toPoint.getCoordinates(), self.state.overPoints[overEndIndex].getCoordinates());

          if (distStart < distStartOld) {
            insertId = 0;
          } else if (distEnd < distEndOld) {
            insertId++;
          }
        } else {
          insertId = 0;
        }

        self.performReverseSearch("overAddress", overPoint.getCoordinates(), insertId);
        self.addOverPoint(overPoint.getCoordinates()[0], overPoint.getCoordinates()[1], insertId);
      });
      self.props.mapController.map.addInteraction(selectInteraction);

      if (this.props.mapController.data.enableOverPoints) {
        self.props.mapController.map.addInteraction(this.modWayInteraction);
      }

      selectInteraction.setActive(false);
      this.routerHintSource = new _source.Vector();
      this.routerHintLayer = new _layer.Vector({
        source: this.routerHintSource,
        style: function style(feature, resolution) {
          return !self.props.mapController.proxy || self.props.mapController.proxy.locationStyleController.arrLocStyles[self.props.mapController.data.router_point_locstyle].style(feature, resolution);
        }
      });
      this.mapData = this.props.mapController.data;
      this.locationsSource = new _source.Vector();
      this.locationsLayer = new _layer.Vector({
        source: this.locationsSource,
        zIndex: 2
      });
      this.areaSource = new _source.Vector();
      this.areaLayer = new _layer.Vector({
        source: this.areaSource,
        zIndex: 2
      });
      this.routerFeaturesSource = new _source.Vector();
      this.routerFeaturesLayer = new _layer.Vector({
        source: this.routerFeaturesSource,
        zIndex: 20 // declutter: true

      });
      this.routerLayerGroup = new _layer.Group({
        layers: new _ol.Collection([this.routerWayLayer, this.routerAltWayLayer, this.locationsLayer, this.routerHintLayer, this.routerFeaturesLayer, this.locationsLayer, this.areaLayer]),
        visible: true
      });
      this.props.mapController.map.addLayer(this.routerLayerGroup); // this.viewRouter = this.addRouterInterface();

      if (this.props.mapController.data.initialMode === "route" || !this.viewArea) {// this.viewRouter.activate();
      } // id => array of instructions, for each route one entry


      this.routeInstructions = {}; // store some vars for ajax-requests

      var profileId = this.props.mapController.data.profile;
      this.geoSearchApi = this.props.mapController.data.api.geosearch + '/' + profileId;
      this.geoReverseSearchApi = this.props.mapController.data.api.geosearch_reverse + '/' + profileId;
      this.routingApi = this.props.mapController.data.api.routing + '/' + profileId;

      if (this.usePermalink) {
        this.permalinkHandler.handleInitialParams();
      }

      this.objFunctions = this.createAutocompleteFunctions();
      this.addPopupHook();
      this.addMapInputInteraction();
    }
    /**
     * Calculates the euclidean distance between two points.
     * @param point1
     * @param point2
     */

  }, {
    key: "calcDistance",
    value: function calcDistance(point1, point2) {
      var square1, square2;
      square1 = Math.pow(point1[0] - point2[0], 2);
      square2 = Math.pow(point1[1] - point2[1], 2);
      return Math.sqrt(square1 + square2);
    }
    /**
     * Displays the route instructions in the portside router.
     * @param routeResponse
     * @param routeNumber
     */

  }, {
    key: "showRouteInstructions",
    value: function showRouteInstructions(routeResponse, routeNumber, routerWaySource, routerHintSource) {
      var scope,
          routerInstruction,
          routerInstructionsHeader,
          routerInstructionsHtml,
          instr,
          strType,
          strMod,
          rowstyle,
          routeNumber = routeNumber || 0,
          i,
          j,
          route_name_0 = "",
          route_name_1 = "",
          total_distance = "",
          total_time = "";
      scope = this;

      if (!this.props.mapController.data.showInstructions) {
        return;
      }

      routerInstructionsHeader = document.createElement('div');
      routerInstructionsHeader.className = _routingConstants.routingConstants.ROUTER_INSTRUCTIONS_HEADER;

      if (routeResponse) {
        if (!(routeResponse.features && routeResponse.features.length > 0) || !this.props.mapController.data.showFeatures) {
          jQuery(".c4g-router-instructions-wrapper").css('display', 'block');
        }

        if (this.props.mapController.data.router_api_selection == '1' || routeResponse.routeType == '1') {
          //OSRM-API:5.x
          if (routeResponse.routes[routeNumber].legs[0].summary) {
            route_name_0 = routeResponse.routes[routeNumber].legs[0].summary.split(",")[0];
            route_name_1 = routeResponse.routes[routeNumber].legs[0].summary.split(",")[1];

            if (routeResponse.routes[routeNumber].legs[1]) {
              route_name_1 = routeResponse.routes[routeNumber].legs[1].summary.split(",")[1];
            }
          }

          total_distance = routeResponse.routes[routeNumber].distance;
          total_time = routeResponse.routes[routeNumber].duration;
        } else if (this.props.mapController.data.router_api_selection == '0' || routeResponse.routeType == '0') {
          //OSRM-API:<5
          if (routeResponse.route_name) {
            route_name_0 = routeResponse.route_name[0];
            route_name_1 = routeResponse.route_name[1];
          }

          if (routeResponse.route_summary) {
            total_distance = routeResponse.route_summary.total_distance;
            total_time = routeResponse.route_summary.total_time;
          }
        } else if (this.props.mapController.data.router_api_selection == '2' || routeResponse.routeType == '2') {
          //ORS-API
          total_time = routeResponse.routes[routeNumber].summary.duration;
          total_distance = routeResponse.routes[routeNumber].summary.distance;
          var instructions = [];
          var segments = routeResponse.routes[routeNumber].segments;

          for (var _i = 0; _i < segments.length; _i++) {
            var currentSegment = segments[_i];

            for (var _j = 0; _j < currentSegment.steps.length; _j++) {
              var currentStep = currentSegment.steps[_j];
              currentStep.length = currentStep.distance / 1000;
              instructions.push(currentStep);
            }
          }

          this.routeInstructions[routeNumber] = {
            time: total_time,
            distance: total_distance,
            instructions: instructions
          };
          this.setState({
            routerInstructions: this.routeInstructions[routeNumber],
            "routerWaySource": routerWaySource,
            "routerHintSource": routerHintSource
          });
        } else if (this.props.mapController.data.router_api_selection == '3' || routeResponse.routeType == '3') {
          //Graphhopper
          total_distance = routeResponse.paths[routeNumber].distance;
          total_time = routeResponse.paths[routeNumber].time / 1000;
          var _instructions = [];
          var _segments = routeResponse.paths[routeNumber].instructions;

          for (var _i2 = 0; _i2 < _segments.length; _i2++) {
            var currentInstruction = _segments[_i2];
            currentInstruction.length = currentInstruction.distance / 1000;
            currentInstruction.instruction = currentInstruction.text;
            currentInstruction.type = currentInstruction.sign;

            _instructions.push(currentInstruction);
          }

          this.routeInstructions[routeNumber] = {
            time: total_time,
            distance: total_distance,
            instructions: _instructions
          };
          this.setState({
            routerInstructions: this.routeInstructions[routeNumber],
            "routerWaySource": routerWaySource,
            "routerHintSource": routerHintSource
          });
        } else if (this.props.mapController.data.router_api_selection == '4' || routeResponse.routeType == '4') {
          //Valhalla
          total_distance = routeResponse.trip.summary.length * 1000;
          total_time = routeResponse.trip.summary.time;
          this.routeInstructions[routeNumber] = {
            time: total_time,
            distance: total_distance,
            instructions: routeResponse.trip.legs[routeNumber].maneuvers
          };
          this.setState({
            routerInstructions: this.routeInstructions[routeNumber],
            "routerWaySource": routerWaySource,
            "routerHintSource": routerHintSource
          });
        }

        if (route_name_0 && route_name_1) {
          routerInstructionsHeader.innerHTML = '<label>' + this.languageConstants.ROUTER_VIEW_LABEL_ROUTE + '</label> <em>' + route_name_0 + ' &#8594; ' + route_name_1 + '</em><br>' + '<label>' + this.languageConstants.ROUTER_VIEW_LABEL_DISTANCE + '</label> <em>' + total_distance + '</em><br>' + '<label>' + this.languageConstants.ROUTER_VIEW_LABEL_TIME + '</label> <em>' + total_time + '</em><br>';
        } else if (this.routeProfile && this.routeProfile.active && Array.isArray(this.routeProfile.active)) {
          routerInstructionsHeader.innerHTML = '<label>' + this.languageConstants.ROUTER_VIEW_LABEL_PROFILE + '</label> <em>' + this.props.mapController.data.router_profiles[this.routeProfile.active] + '</em><br>' + '<label>' + this.languageConstants.ROUTER_VIEW_LABEL_DISTANCE + '</label> <em>' + total_distance + '</em><br>' + '<label>' + this.languageConstants.ROUTER_VIEW_LABEL_TIME + '</label> <em>' + total_time + '</em><br>';
        }

        routerInstruction = document.createElement('div');
        routerInstructionsHtml = '<table class="' + _routingConstants.routingConstants.ROUTER_INSTRUCTIONS_TABLE + '" cellpadding="0" cellspacing="0">';

        if (this.props.mapController.data.router_api_selection === '1' || routeResponse.routeType == '1') {//OSRM-API:5.x
        } else if (this.props.mapController.data.router_api_selection === '0' || routeResponse.routeType == '0') {//OSRM-API:<5
        } else if (this.props.mapController.data.router_api_selection === '2' || routeResponse.routeType == '2') {//OpenRouteService
        } else if (this.props.mapController.data.router_api_selection === '3' || routeResponse.routeType == '3') {// Graphhopper
        } else if (this.props.mapController.data.router_api_selection === '4' || routeResponse.routeType == '4') {// Valhalla
        }

        routerInstructionsHtml += '</table>';
        routerInstruction.innerHTML = routerInstructionsHtml;
        this.adjustInstructionMapInteraction();
      }
    }
    /**
     * Asynchronous implementation of the forward geosearch.
     */

  }, {
    key: "performGeoSearch",
    value: function () {
      var _performGeoSearch = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(address) {
        var scope, url;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                scope = this;
                url = scope.geoSearchApi + '?format=json&limit=1&q=' + encodeURI(address);

                if (this.mapData && this.mapData.geosearch && this.mapData.geosearch.searchKey && this.mapData.geosearch.url) {
                  url = this.mapData.geosearch.url + "search.php?key=" + this.mapData.geosearch.searchKey + '&format=json&limit=1&q=' + encodeURI(address);
                }

                _context.next = 5;
                return fetch(url).then(function (response) {
                  if (response) {
                    return response.json().then(function (data) {
                      return [parseFloat(data[0].lon), parseFloat(data[0].lat)];
                    }); // return [parseFloat(response[0].lon), parseFloat(response[0].lat)];
                  } else {
                    // show error hint
                    Promise.all(/*! import() */[__webpack_require__.e("vendors-CoreBundle_node_modules_sweetalert2_dist_sweetalert2_all_js"), __webpack_require__.e("CoreBundle_Resources_public_vendor_js_AlertHandler_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./../../../../../CoreBundle/Resources/public/vendor/js/AlertHandler */ "../CoreBundle/Resources/public/vendor/js/AlertHandler.js")).then(function (module) {
                      var alertHandler = new module.AlertHandler();
                      alertHandler.showInfoDialog(scope.props.langConstants.ROUTER_VIEW_ALERT_ERROR, scope.props.langConstants.ROUTER_VIEW_ALERT_ADDRESS);
                    });
                  }
                })["catch"](function () {
                  Promise.all(/*! import() */[__webpack_require__.e("vendors-CoreBundle_node_modules_sweetalert2_dist_sweetalert2_all_js"), __webpack_require__.e("CoreBundle_Resources_public_vendor_js_AlertHandler_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./../../../../../CoreBundle/Resources/public/vendor/js/AlertHandler */ "../CoreBundle/Resources/public/vendor/js/AlertHandler.js")).then(function (module) {
                    var alertHandler = new module.AlertHandler();
                    alertHandler.showInfoDialog(scope.props.langConstants.ROUTER_VIEW_ALERT_ERROR, scope.props.langConstants.ROUTER_VIEW_ALERT_ADDRESS);
                  });
                });

              case 5:
                return _context.abrupt("return", _context.sent);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function performGeoSearch(_x) {
        return _performGeoSearch.apply(this, arguments);
      }

      return performGeoSearch;
    }()
    /**
     * Searches the geo-coordinates for a given location.
     * @param $input        The input field containing the location.
     * @param value         The property in which the resulting coordinate should be stored.
     * @param opt_callback  Optional callback. Is executed after successful search.
     * @returns {string}
     */

  }, {
    key: "performSearch",
    value: function performSearch($input, value, opt_callback) {
      var map, bounds, viewbox, scope, url;
      scope = this;

      if ($input.val() === "") {
        delete scope[value];
        return "";
      }

      map = scope.props.mapController.map;
      bounds = map.getView().calculateExtent(map.getSize());
      bounds = (0, _proj.transformExtent)(bounds, map.getView().getProjection(), 'EPSG:4326');
      viewbox = '&viewbox=' + bounds[0] + ',' + bounds[1] + ',' + bounds[2] + ',' + bounds[3];
      url = scope.geoSearchApi + '?format=json&limit=1&q=' + encodeURI($input.val()) + viewbox;

      if (this.mapData && this.mapData.geosearch && this.mapData.geosearch.searchKey && this.mapData.geosearch.url) {
        url = this.mapData.geosearch.url + "search.php?key=" + this.mapData.geosearch.searchKey + '&format=json&limit=1&q=' + encodeURI($input.val()) + viewbox;
      }

      if (this.mapData.geosearch.params) {
        for (var param in this.mapData.geosearch.params) {
          if (this.mapData.geosearch.params.hasOwnProperty(param)) {
            url += "&" + param + "=" + this.mapData.geosearch.params[param];
          }
        }
      }

      jQuery.ajax({
        'url': url
      }).done(function (response) {
        if (response.length > 0) {
          if (value === "overValue") {
            if (!scope.overValue) {
              scope.overValue = [];
            }

            var overPoint = new _geom.Point([parseFloat(response[0].lon), parseFloat(response[0].lat)]);
            var deleteButton = $input.next()[0]; // traverse the dom level until the delete button is found

            while (!jQuery(deleteButton).hasClass('c4g-router-input-clear')) {
              deleteButton = jQuery(deleteButton).next()[0];
            }

            deleteButton.id = overPoint['ol_uid'];
            scope.overValue.push(overPoint);
            scope.$buttonOver.prop("disabled", false);
          } else {
            var coords = [parseFloat(response[0].lon), parseFloat(response[0].lat)];
            var point = new _geom.Point(coords);

            if (value === "fromValue") {
              scope.setState({
                fromPoint: point,
                fromAddress: $input.val()
              }, function () {
                return scope.updateRouteLayersAndPoints();
              });
            } else if (value === "toValue") {
              scope.setState({
                toPoint: point,
                toAddress: $input.val()
              }, function () {
                return scope.updateRouteLayersAndPoints();
              });
            } // TODO wieder einbauen
            // switch(value) {
            //   case "fromValue":
            //     scope.updateLinkFragments("addressFrom", coords);
            //     break;
            //   case "toValue":
            //     scope.updateLinkFragments("addressTo", coords);
            //     break;
            //   case "areaValue":
            //     scope.updateLinkFragments("addressArea", coords);
            //     break;
            //   default:
            //     break;
            // }

          }
        } else {
          // show error hint
          Promise.all(/*! import() */[__webpack_require__.e("vendors-CoreBundle_node_modules_sweetalert2_dist_sweetalert2_all_js"), __webpack_require__.e("CoreBundle_Resources_public_vendor_js_AlertHandler_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./../../../../../CoreBundle/Resources/public/vendor/js/AlertHandler */ "../CoreBundle/Resources/public/vendor/js/AlertHandler.js")).then(function (module) {
            var alertHandler = new module.AlertHandler();
            alertHandler.showInfoDialog(scope.props.langConstants.ROUTER_VIEW_ALERT_ERROR, scope.props.langConstants.ROUTER_VIEW_ALERT_ADDRESS);
          });
        }

        if (opt_callback && typeof opt_callback === "function") {
          opt_callback();
        }
      }).fail(function () {
        Promise.all(/*! import() */[__webpack_require__.e("vendors-CoreBundle_node_modules_sweetalert2_dist_sweetalert2_all_js"), __webpack_require__.e("CoreBundle_Resources_public_vendor_js_AlertHandler_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./../../../../../CoreBundle/Resources/public/vendor/js/AlertHandler */ "../CoreBundle/Resources/public/vendor/js/AlertHandler.js")).then(function (module) {
          var alertHandler = new module.AlertHandler();
          alertHandler.showInfoDialog(scope.props.langConstants.ROUTER_VIEW_ALERT_ERROR, scope.props.langConstants.ROUTER_VIEW_ALERT_ADDRESS);
        });
      });
      return "";
    }
    /**
     * Converts a given coordinate into the corresponding location.
     * @param stateProp     The state property of this where the address should be stored.
     * @param value         The property that contains the coordinates.
     * @param opt_index     The index for the overAddress (over points only)
     */

  }, {
    key: "performReverseSearch",
    value: function performReverseSearch(stateProp, value, opt_index) {
      var self = this,
          url;
      url = this.geoReverseSearchApi + '?format=json&lat=' + value[1] + '&lon=' + value[0];

      if (this.mapData && this.mapData.geosearch && this.mapData.geosearch.reverseKey && this.mapData.geosearch.url) {
        url = this.mapData.geosearch.url + "reverse.php?key=" + this.mapData.geosearch.reverseKey + '&format=json&lat=' + value[1] + '&lon=' + value[0];
      }

      jQuery.ajax({
        'url': url
      }).done(function (response) {
        if (response) {
          var value = "";

          if (response.address) {
            if (response.address.road || response.address.path || response.address.pedestrian) {
              value += response.address.road || response.address.path || response.address.pedestrian;

              if (response.address.house_number) {
                value += " " + response.address.house_number;
              }
            }

            if (response.address.city || response.address.town) {
              value += value ? ", " : "";
              value += response.address.city || response.address.town;
            }
          }

          if (value === "") {
            value = response.display_name;
          } // TODO update router permalink


          switch (stateProp) {
            case "areaAddress":
              self.setState({
                areaAddress: value
              }, function () {
                if (jQuery("#areaFrom").val() === "") {
                  jQuery("#areaFrom").val(value);
                }
              }); // self.updateLinkFragments("addressArea", value);

              break;

            case "fromAddress":
              self.setState({
                fromAddress: value
              }, function () {
                if (jQuery("#routingFrom").val() === "") {
                  jQuery("#routingFrom").val(value);
                }
              }); // update address in link
              // self.updateLinkFragments("addressFrom", value);

              break;

            case "toAddress":
              self.setState({
                toAddress: value
              }, function () {
                if (jQuery("#routingTo").val() === "") {
                  jQuery("#routingTo").val(value);
                }
              }); // update address in link
              // self.updateLinkFragments("addressTo", value);

              break;

            case "overAddress":
              var overAddresses = self.state.overAddresses;
              overAddresses.splice(opt_index, 1, value);
              self.setState({
                overAddresses: overAddresses
              });
              break;
          }
        }
      });
    }
    /**
     * Executes an area search with the given point as center. If there are any, the features in the perimeter will be
     * drawn onto the map and displayed in the feature container.
     */

  }, {
    key: "performArea",
    value: function performArea() {
      var self = this;
      var fromPoint = this.state.areaPoint;

      if (!fromPoint) {
        return;
      }

      var fromCoord = [fromPoint.getCoordinates()[1], fromPoint.getCoordinates()[0]];
      var profileId = this.props.mapController.data.profile;
      var url = 'con4gis/areaService/' + profileId + '/' + this.state.layerArea + '/' + this.state.detourArea + '/' + fromCoord;
      url += '?profile=' + this.state.currentProfile;

      if (self.areaAjax) {
        self.areaAjax.abort();
      } // this.spinner.show();


      self.areaAjax = jQuery.ajax({
        'url': url
      }).done(function (response) {
        self.response = response;

        if (response) {
          // const routerLayers = self.options.mapController.data.routerLayers;
          // const chosenOption = self.activeLayerValueArea;
          // this should be changed soon, as it totally messes up the logic of the structure
          var sortedFeatures = self.showFeatures(response[0], response[1], "area");
          self.setState({
            "featureList": {
              "features": sortedFeatures,
              "type": response[1]
            },
            "featureSource": self.routerFeaturesSource,
            "openResults": true
          });
        }
      });
    }
    /**
     * Executes a route search with the given from and to points. Displays features and feature entries on success. Uses
     * overpoints, if any are given.
     * @param fromPoint
     * @param toPoint
     * @param overPoint
     * @returns {string}
     */

  }, {
    key: "performViaRoute",
    value: function performViaRoute(fromPoint, toPoint, overPoint) {
      var url, scope, fromCoord, toCoord, overCoord;
      scope = this;

      if (this.state.featureSource) {
        this.state.featureSource.clear();
      } // this.areaSource.clear();


      this.mapSelectInteraction.getFeatures().clear();

      if (!fromPoint) {
        fromPoint = this.fromPoint;

        if (!fromPoint) {
          return;
        }
      }

      if (!toPoint) {
        if (!toPoint) {
          return;
        }

        toPoint = this.toPoint;
      }

      if (!overPoint) {
        if (this.overPoints) {
          overPoint = this.overPoints;
        }
      }

      fromCoord = [fromPoint.getCoordinates()[1], fromPoint.getCoordinates()[0]];
      toCoord = [toPoint.getCoordinates()[1], toPoint.getCoordinates()[0]];

      if (overPoint && Object.keys(overPoint).length > 0) {
        overCoord = [];

        for (var propt in overPoint) {
          if (overPoint.hasOwnProperty(propt) && overPoint[propt]) {
            overCoord.push([overPoint[propt].getCoordinates()[1], overPoint[propt].getCoordinates()[0]]);
          }
        }
      }

      if (this.props.mapController.data.router_api_selection >= '1') {
        //OSRM-API:5.x or ORS- API
        var _profileId = this.props.mapController.data.profile;
        url = 'con4gis/routeService/' + this.props.mapController.data.lang + '/' + _profileId + '/' + this.state.layerRoute + '/' + this.state.detourRoute + '/' + fromCoord;

        if (overPoint) {
          for (var i = 0; i < overCoord.length; i++) {
            url += ';' + overCoord[i];
          }
        }

        url += ';' + toCoord; // if (this.state.currentProfile) {

        url += '?profile=' + this.state.currentProfile; // }

        if (scope.routeAjax) {
          scope.routeAjax.abort();
        }

        scope.routeAjax = jQuery.ajax({
          'url': url
        }).done(function (response) {
          scope.response = response;

          if (response) {
            if (response.error) {
              Promise.all(/*! import() */[__webpack_require__.e("vendors-CoreBundle_node_modules_sweetalert2_dist_sweetalert2_all_js"), __webpack_require__.e("CoreBundle_Resources_public_vendor_js_AlertHandler_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./../../../../../CoreBundle/Resources/public/vendor/js/AlertHandler */ "../CoreBundle/Resources/public/vendor/js/AlertHandler.js")).then(function (module) {
                var alertHandler = new module.AlertHandler();
                alertHandler.showInfoDialog(scope.props.langConstants[response.error]);
              });
            } else {
              scope.showRouteLayer(response);
              scope.showRouteInstructions(response, 0, scope.routerWaySource, scope.routerHintSource);

              if (response.features && (response.features.elements || response.features.length > 0)) {
                var sortedFeatures = scope.showFeatures(response.features, response.type, "router");
                scope.setState({
                  "featureList": {
                    "features": sortedFeatures,
                    "type": response.type
                  },
                  "featureSource": scope.routerFeaturesSource,
                  "openResults": true
                });
              } else {
                scope.setState({
                  "openResults": true
                });
              }
            }
          }
        }).always(function () {
          scope.routeAjax = undefined;

          if (scope.props.mapController.data.closeAfterSearch) {}
        });
        return '';
      } else {
        //OSRM-API:<5
        try {
          url = 'con4gis/routeService/' + profileId + '?output=json&instructions=true&alt=false&loc_from=' + fromCoord + '&loc_to=' + toCoord;
          jQuery.ajax({
            'url': url
          }).done(function (response) {
            if (response) {
              scope.showRoute(response);
            }
          });
          return '';
        } catch (Exception) {
          console.log("Please use a more modern API-Version for the Routeservice");
        }
      }
    }
    /**
     * Checks the routing properties and triggers a new route search, when the mandatory parameters are set.
     */

  }, {
    key: "recalculateRoute",
    value: function recalculateRoute() {
      if (this.state.fromPoint && this.state.toPoint) {
        if (this.state.overPoints && Object.keys(this.state.overPoints).length > 0) {
          this.performViaRoute(this.state.fromPoint, this.state.toPoint, this.state.overPoints);
        } else {
          this.performViaRoute(this.state.fromPoint, this.state.toPoint);
        }
      }
    }
  }, {
    key: "getActiveLayer",
    value: function getActiveLayer(layerId) {
      return this.objLayers[layerId];
    }
    /**
     * Clears the current features from the map and displays the given new features. The features are sorted by the configured
     * property. The function takes the backend configuration according to prioritized features into account.
     * @param features
     * @param type
     * @param mode
     * @param noClear
     * @returns {*}
     */

  }, {
    key: "showFeatures",
    value: function showFeatures(features) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "table";
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "router";
      var noClear = arguments.length > 3 ? arguments[3] : undefined;
      var self = this;

      if (!noClear) {
        this.routerFeaturesSource.clear();
      } // interim clear of feature selection


      if (!features || features.length === 0) {
        return [];
      }

      var mapData = this.mapData;
      var layerId = this.state.mode === "route" ? this.state.layerRoute : this.state.layerArea;
      var activeLayer = this.state.mode === "route" ? this.state.layerValueRoute : this.state.layerValueArea;
      var layer = this.getActiveLayer(layerId).layerData;
      var unstyledFeatures = [];
      var contentFeatures = [];
      var missingStyles = [];
      var priceSortedFeatures = features.length ? features.slice() : features.elements.slice();
      var bestFeatures = [];
      this.bestFeatureIds = [];

      if (mapData.priorityFeatures && mapData.priorityLocstyle && features.length > 0) {
        // sort by selected value for the map label ascending
        priceSortedFeatures.sort(function (a, b) {
          return parseFloat(a[mapData.routerLayers[layerId][activeLayer]['mapLabel']]) - parseFloat(b[mapData.routerLayers[layerId][activeLayer]['mapLabel']]);
        });
        var featureCount = parseInt(mapData.priorityFeatures, 10);
        var upperBound = featureCount > priceSortedFeatures.length ? priceSortedFeatures.length : featureCount;

        for (var i = 0; i < upperBound; i++) {
          bestFeatures[i] = priceSortedFeatures[i];
          this.bestFeatureIds.push(priceSortedFeatures[i]['id']);
        }
      }

      if (type === "petrols" && mode !== "area") {
        features = features.elements;
      }

      if (type !== "overpass") {
        featureLoop: for (var _i3 = 0; features && _i3 < features.length; _i3++) {
          if (!features[_i3].id) {
            continue;
          }

          var label = "";
          var feature = features[_i3];
          var resultCoordinate = void 0;
          var contentFeature = void 0;
          resultCoordinate = (0, _proj.transform)([parseFloat(feature['geox']), parseFloat(feature['geoy'])], 'EPSG:4326', 'EPSG:3857');
          var point = new _geom.Point(resultCoordinate);
          contentFeature = new _ol.Feature(point);
          contentFeature.setId(feature.id);
          contentFeature.set('loc_linkurl', layer.loc_linkurl);
          contentFeature.set('locstyle', layer.locstyle);
          contentFeature.set('hover_location', layer.hover_location);
          contentFeature.set('hover_style', layer.hover_style);
          contentFeature.set('zoom_onclick', layer.zoom_onclick);
          contentFeature.set('tid', feature.id);

          if (mapData.routerLayers[layerId] && mapData.routerLayers[layerId][activeLayer] && mapData.routerLayers[layerId][activeLayer]['mapLabel'] && feature[mapData.routerLayers[layerId][activeLayer]['mapLabel']]) {
            label = feature[mapData.routerLayers[layerId][activeLayer]['mapLabel']];
          } else if (mapData.routerLayers[layerId] && mapData.routerLayers[layerId][activeLayer] && mapData.routerLayers[layerId][activeLayer]['mapLabel'] && feature.tags && feature.tags[mapData.routerLayers[layerId][activeLayer]['mapLabel']]) {
            label = feature.tags[mapData.routerLayers[layerId][activeLayer]['mapLabel']];
          }

          var locstyle = feature['locstyle'] || layer.locstyle;

          if (mapData.priorityFeatures && mapData.priorityLocstyle) {
            if (bestFeatures.includes(feature)) {
              locstyle = mapData.priorityLocstyle;
            }
          }

          contentFeature.set('locationStyle', locstyle);
          contentFeature.set('zIndex', _i3);
          contentFeature.set('label', label);

          if (locstyle && self.props.mapController.proxy.locationStyleController.arrLocStyles[locstyle] && self.props.mapController.proxy.locationStyleController.arrLocStyles[locstyle].style) {
            contentFeature.setStyle(self.props.mapController.proxy.locationStyleController.arrLocStyles[locstyle].style);

            if (self.props.mapController.data.hideFeaturesWithoutLabel) {
              if (label && label !== "") {
                contentFeatures.push(contentFeature);
              }
            } else {
              contentFeatures.push(contentFeature);
            }
          } else {
            contentFeature.set('styleId', locstyle);

            if (self.props.mapController.data.hideFeaturesWithoutLabel) {
              if (label && label !== "") {
                unstyledFeatures.push(contentFeature);
                missingStyles[locstyle] = locstyle;
              }
            } else {
              unstyledFeatures.push(contentFeature);
              missingStyles[locstyle] = locstyle;
            }
          }

          for (var tag in feature.tags) {
            if (feature.tags.hasOwnProperty(tag)) {
              contentFeature.set(tag, feature.tags[tag]);
            }
          }
        }
      } else {
        var geojson;

        if (features.elements) {
          geojson = osmtogeojson(features);
          this.geoJsonFeatures = geojson;
        } else {
          geojson = this.geoJsonFeatures;
        }

        var mapProj = self.props.mapController.map.getView().getProjection();
        contentFeatures = new _format.GeoJSON().readFeatures(geojson, {
          dataProjection: 'EPSG:4326',
          featureProjection: mapProj
        });
        var labelKey = mapData.routerLayers[layerId][activeLayer]['mapLabel'];

        for (var id in contentFeatures) {
          if (contentFeatures.hasOwnProperty(id)) {
            contentFeatures[id].set('loc_linkurl', layer.loc_linkurl);
            contentFeatures[id].set('locstyle', layer.locstyle);
            contentFeatures[id].set('hover_location', layer.hover_location);
            contentFeatures[id].set('hover_style', layer.hover_style);
            contentFeatures[id].set('zoom_onclick', layer.zoom_onclick);
            contentFeatures[id].set('tid', parseInt(contentFeatures[id].get('id').split('/')[1]));
            contentFeatures[id].set('label', contentFeatures[id].get(labelKey));

            if (self.props.mapController.proxy.locationStyleController.arrLocStyles[layer.locstyle]) {
              contentFeatures[id].setStyle(self.props.mapController.proxy.locationStyleController.arrLocStyles[layer.locstyle].style);
            }
          }
        }
      }

      if (missingStyles && missingStyles.length > 0) {
        self.props.mapController.proxy.locationStyleController.loadLocationStyles(missingStyles, {
          done: function done() {
            for (var _i4 = 0; _i4 < unstyledFeatures.length; _i4++) {
              var styleId = unstyledFeatures[_i4].get('styleId');

              unstyledFeatures[_i4].setStyle(self.props.mapController.proxy.locationStyleController.arrLocStyles[styleId].style);

              self.routerFeaturesSource.addFeature(unstyledFeatures[_i4]);
            }

            missingStyles = undefined;
          }
        });
      }

      if (contentFeatures && contentFeatures.length > 0) {
        this.routerFeaturesSource.addFeatures(contentFeatures);
      }

      return priceSortedFeatures;
    }
    /**
     * Displays the main route.
     * @param routeResponse
     */

  }, {
    key: "showRoute",
    value: function showRoute(routeResponse) {
      this.showRouteLayer(routeResponse, 0);
      this.showRouteInstructions(routeResponse, 0);
    }
    /**
     * Show an alternate route.
     * @param routeResponse
     * @param routeNumber
     */

  }, {
    key: "showAltRoute",
    value: function showAltRoute(routeResponse, routeNumber) {
      this.showRouteLayer(routeResponse, routeNumber);
      this.showRouteInstructions(routeResponse, routeNumber);
    }
    /**
     * Displays a route on the map.
     * @param routeResponse
     * @param routeNumber
     */

  }, {
    key: "showRouteLayer",
    value: function showRouteLayer(routeResponse, routeNumber) {
      var mapView,
          wayPolyline,
          routeFeatures,
          altRouteFeatures,
          rightPadding,
          leftPadding,
          routeNumber = routeNumber || 0;

      if (routeResponse) {
        this.routerWaySource.clear();
        this.routingAltWaySource.clear();
        mapView = this.props.mapController.map.getView();

        if (this.props.mapController.data.router_api_selection == '1' || this.props.mapController.data.router_api_selection == '2' || routeResponse.routeType == '1' || routeResponse.routeType == '2') {
          //OSRM-API:5.x
          wayPolyline = new _format.Polyline(); // add route

          if (routeResponse.routes) {
            //check for alternative route
            if (routeResponse.routes[1]) {
              if (routeNumber === 1) {
                altRouteFeatures = wayPolyline.readFeatures(routeResponse.routes[0].geometry, {
                  dataProjection: 'EPSG:4326',
                  featureProjection: mapView.getProjection()
                });
                altRouteFeatures[0].setId(0);
              } else {
                altRouteFeatures = wayPolyline.readFeatures(routeResponse.routes[1].geometry, {
                  dataProjection: 'EPSG:4326',
                  featureProjection: mapView.getProjection()
                });
                altRouteFeatures[0].setId(1);
              }
            }

            routeFeatures = wayPolyline.readFeatures(routeResponse.routes[routeNumber].geometry, {
              dataProjection: 'EPSG:4326',
              featureProjection: mapView.getProjection()
            });
            routeFeatures[0].setId(routeNumber);
          }
        } else if (this.props.mapController.data.router_api_selection == '0' || routeResponse.routeType == '0') {
          //OSRM-API:<5
          wayPolyline = new _format.Polyline({
            'factor': this.props.mapController.data.router_viaroute_precision || 1e6
          }); // add route

          routeFeatures = wayPolyline.readFeatures(routeResponse.route_geometry, {
            dataProjection: 'EPSG:4326',
            featureProjection: mapView.getProjection()
          });
        } else if (this.props.mapController.data.router_api_selection == '3') {
          wayPolyline = new _format.Polyline();

          if (routeResponse.paths && routeResponse.paths[1]) {
            //check for alternative route
            if (routeNumber == 1) {
              altRouteFeatures = wayPolyline.readFeatures(routeResponse.paths[0].points, {
                dataProjection: 'EPSG:4326',
                featureProjection: mapView.getProjection()
              });
              altRouteFeatures[0].setId(0);
            } else {
              altRouteFeatures = wayPolyline.readFeatures(routeResponse.paths[1].points, {
                dataProjection: 'EPSG:4326',
                featureProjection: mapView.getProjection()
              });
              altRouteFeatures[0].setId(1);
            }
          }

          routeFeatures = wayPolyline.readFeatures(routeResponse.paths[routeNumber].points, {
            dataProjection: 'EPSG:4326',
            featureProjection: mapView.getProjection()
          });
          routeFeatures[0].setId(routeNumber);
        } else if (this.props.mapController.data.router_api_selection == "4" || routeResponse.routeType == '4') {
          wayPolyline = new _format.Polyline({
            'factor': 1e6
          });

          if (routeResponse.trip && routeResponse.trip.legs && routeResponse.trip.legs[1]) {
            //check for alternative route
            if (routeNumber == 1) {
              altRouteFeatures = wayPolyline.readFeatures(routeResponse.trip.legs[1].shape, {
                dataProjection: 'EPSG:4326',
                featureProjection: mapView.getProjection()
              });
              altRouteFeatures[0].setId(0);
            } else {
              altRouteFeatures = wayPolyline.readFeatures(routeResponse.trip.legs[1].shape, {
                dataProjection: 'EPSG:4326',
                featureProjection: mapView.getProjection()
              });
              altRouteFeatures[0].setId(1);
            }
          }

          routeFeatures = wayPolyline.readFeatures(routeResponse.trip.legs[routeNumber].shape, {
            dataProjection: 'EPSG:4326',
            featureProjection: mapView.getProjection()
          });
          routeFeatures[0].setId(routeNumber);
        }

        if (this.props.mapController.data.router_alternative == '1') {
          if (routeResponse.routes && routeResponse.routes.length > 1 && routeResponse.routes[1] || routeResponse.paths && routeResponse.paths.length > 1 && routeResponse.paths[1]) {
            this.routingAltWaySource.addFeatures(altRouteFeatures);
          }
        }

        if (routeFeatures) {
          this.routerWaySource.addFeatures(routeFeatures); // render view
          // so the route gets drawn before the animation starts

          this.props.mapController.map.renderSync(); // animation

          mapView.animate({
            start: +new Date(),
            duration: 2000,
            resolution: mapView.getResolution(),
            center: [0, 0] //rotation: Math.PI

          }); // calculate padding

          var width = jQuery(".c4g-starboard-container").css('width');

          if (width) {
            width = width.split(".");
            width = Array.isArray(width) ? width[0] : width;
            width = parseInt(width) + 50;
          } else {
            width = 50;
          } // center on route


          mapView.fit(routeFeatures[0].getGeometry(), {
            size: this.props.mapController.map.getSize(),
            padding: [50, width, 50, 50]
          });
        }
      }
    }
    /**
     * Creates an interaction for routing instructions. When hovering the instructions in the portside container, the
     * location of the instruction is highlighted on the route.
     * @param routerInstruction
     */

  }, {
    key: "adjustInstructionMapInteraction",
    value: function adjustInstructionMapInteraction(routerInstruction) {
      var self = this,
          fnItemClick,
          fnItemOver,
          fnItemOut;

      fnItemClick = function fnItemClick(element) {
        self.routerHintSource.clear();
        var feature = self.routerWaySource.getFeatures()[0];
        var coordinates = feature.getGeometry().getCoordinates();
        var coordLonLat = element.data('pos');

        if (coordLonLat) {
          var stringlonlat = coordLonLat.split(",");
          stringlonlat[0] = parseFloat(stringlonlat[0]);
          stringlonlat[1] = parseFloat(stringlonlat[1]);
          var newCoord = (0, _proj.fromLonLat)(stringlonlat);
          var currentHintFeature = new _ol.Feature({
            geometry: new _geom.Point(newCoord)
          });
          self.routerHintSource.addFeature(currentHintFeature);
          self.options.mapController.map.getView().setCenter(newCoord);
        }

        if (coordinates) {
          var start = element.data('start');
          var end = element.data('end');

          if (start, end) {
            var geom = new _geom.LineString(coordinates.slice(start, end));
            var currentHintFeature = new _ol.Feature({
              geometry: geom
            });
            currentHintFeature.setStyle(new _style.Style({
              stroke: new _style.Stroke({
                color: 'rgba(255, 0, 0, 1)',
                width: 20
              })
            }));
            var currentZoom = self.options.mapController.map.getView().getZoom();
            self.routerHintSource.addFeature(currentHintFeature);
            self.options.mapController.map.getView().fit(geom);
            var afterZoom = self.options.mapController.map.getView().getZoom();
            var endZoom = Math.round((currentZoom + afterZoom) / 2);
            endZoom = endZoom > afterZoom ? afterZoom : endZoom;
            self.options.mapController.map.getView().setZoom(endZoom);
          }
        }
      };

      fnItemOver = function fnItemOver(element) {
        if (self.routerWaySource && self.routerWaySource.getFeatures() && self.options.mapController.data.router_api_selection == '0') {
          var feature = self.routerWaySource.getFeatures()[0];

          if (feature) {
            self.routerHintSource.clear();
            var currentHintFeature = new _ol.Feature({
              geometry: new _geom.Point(feature.getGeometry().getCoordinates()[element.data('pos')])
            });
            self.routerHintSource.addFeature(currentHintFeature);
          }
        }

        if (self.routerWaySource && self.routerWaySource.getFeatures() && self.options.mapController.data.router_api_selection >= '1') {
          var feature = self.routerWaySource.getFeatures()[0];

          if (feature) {
            self.routerHintSource.clear();
            var coordLonLat = element.data('pos');

            if (coordLonLat) {
              var stringlonlat = coordLonLat.split(",");
              stringlonlat[0] = parseFloat(stringlonlat[0]);
              stringlonlat[1] = parseFloat(stringlonlat[1]);
              var newCoord = (0, _proj.fromLonLat)(stringlonlat);
              var currentHintFeature = new _ol.Feature({
                geometry: new _geom.Point(newCoord)
              });
              self.routerHintSource.addFeature(currentHintFeature);
            }

            feature = self.routerWaySource.getFeatures()[0];
            var coordinates = feature.getGeometry().getCoordinates();

            if (coordinates) {
              var start = element.data('start');
              var end = element.data('end');

              if (start, end) {
                var currentHintFeature = new _ol.Feature({
                  geometry: new _geom.LineString(coordinates.slice(start, end))
                });
                currentHintFeature.setStyle(new _style.Style({
                  stroke: new _style.Stroke({
                    color: 'rgba(255, 0, 0, 1)',
                    width: 15
                  })
                }));
                self.routerHintSource.addFeature(currentHintFeature);
              }
            }
          }
        }
      };

      fnItemOut = function fnItemOut() {
        self.routerHintSource.clear();
      };

      jQuery('[data-start]', routerInstruction).each(function (index, element) {
        var $element = jQuery(element);
        $element.click(function () {
          fnItemClick($element);
        });
        $element.on('mouseenter', function () {
          fnItemOver($element);
        });
        $element.on('mouseleave', function () {
          fnItemOut();
        });
      });
      jQuery('[data-pos]', routerInstruction).each(function (index, element) {
        var $element = jQuery(element);
        $element.click(function () {
          fnItemClick($element);
        });
        $element.on('mouseenter', function () {
          fnItemOver($element);
        });
        $element.on('mouseleave', function () {
          fnItemOut();
        });
      });
    }
    /**
     * Adds a click interaction for the router. Upon map click, the clicked points are converted to locations and the
     * route search is started, as long as all mandatory properties are set.
     */

  }, {
    key: "addMapInputInteraction",
    value: function addMapInputInteraction() {
      var self = this,
          coordinate;

      self.fnMapRouterInteraction = function (evt) {
        if (self.state.open !== true) {
          return;
        }

        var feature = self.props.mapController.map.forEachFeatureAtPixel(evt.pixel, function (feature, layer) {
          return feature;
        });

        if (feature && feature.getId()) {
          var activeId = feature.getId().search && feature.getId().search('/') ? parseFloat(feature.getId().substring(feature.getId().search('/') + 1)) : feature.getId();
          self.setState({
            activeId: activeId,
            openResults: true
          }, function () {
            // TODO behaves differently for route or area search
            if (document.querySelector(".c4g-route-feature-wrapper")) {
              var featureWrapper = document.querySelector(".c4g-route-feature-wrapper");
              var activeFeature = document.querySelector("li.route-features-list-element.c4g-active");

              if (featureWrapper && activeFeature) {
                featureWrapper.scrollTo(0, activeFeature.offsetTop);
              }
            }
          });
        } else {
          coordinate = (0, _proj.toLonLat)(evt.coordinate); // clear old features

          self.areaSource.clear();

          if (self.state.mode === "route") {
            // TODO router permalink wieder aktualisieren
            if (self.state.fromAddress === "") {
              self.setRouteFrom(coordinate[0], coordinate[1]); // self.updateLinkFragments("addressFrom", coordinate);

              self.recalculateRoute();
            } else if (self.state.toAddress === "") {
              self.setRouteTo(coordinate[0], coordinate[1]); // self.updateLinkFragments("addressTo", coordinate);

              self.recalculateRoute();
            } else if (self.state.overPtCtr > 0) {
              for (var i = 0; i < self.state.overPtCtr; i++) {
                if (!self.state.overPoints[i]) {
                  self.addOverPoint(coordinate[0], coordinate[1], i);
                  break;
                }
              }
            }
          } else if (self.state.mode === "area" && self.state.areaAddress === "") {
            self.setAreaPoint(coordinate[0], coordinate[1]);
          }
        }
      };

      this.props.mapController.map.on('click', self.fnMapRouterInteraction);
    }
  }]);
  return RouterView;
}(_react.Component);

exports.RouterView = RouterView;

/***/ }),

/***/ "./Resources/public/js/components/c4g-titlebar.jsx":
/*!*********************************************************!*\
  !*** ./Resources/public/js/components/c4g-titlebar.jsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Titlebar = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Titlebar, _Component);

  var _super = _createSuper(Titlebar);

  function Titlebar(props) {
    (0, _classCallCheck2["default"])(this, Titlebar);
    return _super.call(this, props);
  }

  (0, _createClass2["default"])(Titlebar, [{
    key: "render",
    value: function render() {
      var _this = this;

      var detailButton = "";

      if (this.props.detailBtnClass && this.props.detailBtnCb) {
        detailButton = /*#__PURE__*/_react["default"].createElement("button", {
          className: this.props.detailBtnClass,
          onMouseUp: this.props.detailBtnCb
        });
      }

      var closeButton = "";

      if (this.props.closeBtnClass && this.props.closeBtnCb) {
        closeButton = /*#__PURE__*/_react["default"].createElement("button", {
          className: this.props.closeBtnClass,
          onMouseUp: this.props.closeBtnCb,
          title: this.props.closeBtnTitle
        });
      }

      var minimizeButton = "";

      if (this.props.hideContainer) {
        var minimize = function minimize() {
          // this.props.removeComponent();
          jQuery(_this.props.hideContainer).removeClass("c4g-open").addClass("c4g-close");
        };

        minimizeButton = /*#__PURE__*/_react["default"].createElement("button", {
          className: 'c4g-sideboard-hide',
          onMouseUp: function onMouseUp() {
            return minimize();
          }
        });
      }

      return /*#__PURE__*/_react["default"].createElement("div", {
        className: this.props.wrapperClass
      }, /*#__PURE__*/_react["default"].createElement("span", {
        className: this.props.headerClass
      }, this.props.header), minimizeButton, closeButton, detailButton, this.props.children);
    }
  }]);
  return Titlebar;
}(_react.Component);

exports.default = Titlebar;

/***/ }),

/***/ "./Resources/public/js/routing-constant-i18n-de.js":
/*!*********************************************************!*\
  !*** ./Resources/public/js/routing-constant-i18n-de.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */

/**
 *  constants
 */

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.routingConstantsGerman = void 0;
var routingConstantsGerman = {
  CTRL_ROUTER: 'Router Ã¶ffnen/schlieÃen',
  ROUTER_VIEW_ADDRESS_INPUT: 'Route finden',
  ROUTER_FROM_LABEL: 'Start',
  ROUTER_OVER_LABEL: 'Zwischenziel',
  ROUTER_TO_LABEL: 'Ziel',
  ROUTER_CLEAR_TITLE: 'LÃ¶schen',
  ROUTER_CLEAR_HTML: '',
  ROUTER_Label_Interim: 'Zwischenziel',
  ROUTER_DEFAULT_HEADLINE_ROUTE: 'Router',
  ROUTER_DEFAULT_HEADLINE_AREA: 'Umkreissuche',
  ROUTER_SWITCH: 'Wechsel von Start und Ziel',
  ROUTER_OVER: 'Zwischenziel hinzufÃ¼gen',
  ROUTER_PRINT: 'Routenbeschreibung drucken',
  ROUTER_DOWNLOAD: 'Route als GPX herunterladen',
  ROUTER_VIEW_LABEL_ROUTE: 'Route:',
  ROUTER_VIEW_LABEL_DISTANCE: 'Entfernung:',
  ROUTER_VIEW_LABEL_TIME: 'Zeit:',
  ROUTER_VIEW_LABEL_PROFILE: 'Profil:',
  ROUTER_VIEW_ALERT_ERROR: 'Fehler',
  ROUTER_VIEW_ALERT_ADDRESS: 'Adresse nicht gefunden.',
  ROUTER_VIEW_ALERT_GOCODING: 'Zugriff auf Geocoder fehlgeschlagen.',
  ROUTER_ERROR_POLYLINE: 'Route konnte nicht berechnet werden.',
  ROUTER_ERROR_LINESTRING: 'Strecke lÃ¤sst sich nicht im Router.',
  POPUP_ROUTE_FROM: 'Route von hier',
  POPUP_ROUTE_TO: 'Route hierhin',
  POPUP_ROUTE_EDIT: 'Strecke im Router Ã¶ffnen',
  ROUTER: 'Router',
  ROUTER_N: 'Norden',
  ROUTER_E: 'Ost',
  ROUTER_S: 'SÃ¼den',
  ROUTER_W: 'Westen',
  ROUTER_NE: 'Nordost',
  ROUTER_SE: 'SÃ¼dost',
  ROUTER_SW: 'SÃ¼dwest',
  ROUTER_NW: 'Nordwest',
  ROUTER_DIRECTION_0: 'Unbekannte Anweisung[ auf <b>%s</b>]',
  ROUTER_DIRECTION_1: 'Geradeaus weiterfahren[ auf <b>%s</b>]',
  ROUTER_DIRECTION_2: 'Leicht rechts abbiegen [auf <b>%s</b>]',
  ROUTER_DIRECTION_3: 'Rechts abbiegen[ auf <b>%s</b>]',
  ROUTER_DIRECTION_4: 'Scharf rechts abbiegen[ auf <b>%s</b>]',
  ROUTER_DIRECTION_5: 'Wenden[ auf <b>%s</b>]',
  ROUTER_DIRECTION_6: 'Scharf links abbiegen[ auf <b>%s</b>]',
  ROUTER_DIRECTION_7: 'Links abbiegen[ auf <b>%s</b>]',
  ROUTER_DIRECTION_8: 'Leicht links abbiegen[ auf <b>%s</b>]',
  ROUTER_DIRECTION_10: 'Fahren Sie Richtung <b>%d</b>[ auf <b>%s</b>]',
  'ROUTER_DIRECTION_11-1': 'In den Kreisverkehr einfahren und bei erster MÃ¶glichkeit[ in Richtung <b>%s</b>] verlassen',
  'ROUTER_DIRECTION_11-2': 'In den Kreisverkehr einfahren und bei zweiter MÃ¶glichkeit[ in Richtung <b>%s</b>] verlassen',
  'ROUTER_DIRECTION_11-3': 'In den Kreisverkehr einfahren und bei dritter MÃ¶glichkeit[ in Richtung <b>%s</b>] verlassen',
  'ROUTER_DIRECTION_11-4': 'In den Kreisverkehr einfahren und bei vierter MÃ¶glichkeit[ in Richtung <b>%s</b>] verlassen',
  'ROUTER_DIRECTION_11-5': 'In den Kreisverkehr einfahren und bei fÃ¼nfter MÃ¶glichkeit[ in Richtung <b>%s</b>] verlassen',
  'ROUTER_DIRECTION_11-6': 'In den Kreisverkehr einfahren und bei sechster MÃ¶glichkeit[ in Richtung <b>%s</b>] verlassen',
  'ROUTER_DIRECTION_11-7': 'In den Kreisverkehr einfahren und bei siebter MÃ¶glichkeit[ in Richtung <b>%s</b>] verlassen',
  'ROUTER_DIRECTION_11-8': 'In den Kreisverkehr einfahren und bei achter MÃ¶glichkeit[ in Richtung <b>%s</b>] verlassen',
  'ROUTER_DIRECTION_11-9': 'In den Kreisverkehr einfahren und bei neunter MÃ¶glichkeit[ in Richtung <b>%s</b>] verlassen',
  'ROUTER_DIRECTION_11-x': 'In den Kreisverkehr einfahren und bei einer der vielen MÃ¶glichkeiten[ in Richtung <b>%s</b>] verlassen',
  ROUTER_DIRECTION_15: 'Sie haben Ihr Ziel erreicht',
  'ROUTER_5.X_TYPE_0': ' %m fahren[ auf <b>%s</b>]',
  'ROUTER_5.X_TYPE_1': ' %m dem StraÃenverlauf folgen[ als <b>%s</b>]',
  'ROUTER_5.X_TYPE_2': ' Fahren Sie[ auf <b>%s</b>] los',
  'ROUTER_5.X_TYPE_3': ' Das Ziel befindet sich <b>%m</b>',
  'ROUTER_5.X_TYPE_4': ' Weiterfahren[ auf <b>%s</b>]',
  'ROUTER_5.X_TYPE_5': ' %m [auf <b>%s</b> ]auffahren',
  'ROUTER_5.X_TYPE_6': ' %m [auf <b>%s</b> ]abfahren',
  'ROUTER_5.X_TYPE_7': ' Den Fahrstreifen %m benutzen [auf <b>%s</b>]',
  'ROUTER_5.X_TYPE_8': ' %m abbiegen [auf <b>%s</b>]',
  'ROUTER_5.X_TYPE_9': ' Den Fahrstreifen %m benutzen [auf <b>%s</b>]',
  'ROUTER_5.X_TYPE_10': ' %m fahren um auf der StraÃe zu bleiben',
  'ROUTER_5.X_TYPE_11': ' Im Kreisverkehr die <b>%z.</b> Ausfahrt nehmen [auf <b>%s</b>]',
  'ROUTER_5.X_TYPE_12': ' Im Kreisverkehr die <b>%z.</b> Ausfahrt nehmen [auf <b>%s</b>]',
  'ROUTER_5.X_TYPE_13': ' %m fahren [auf <b>%s</b>]',
  'ROUTER_5.X_TYPE_14': ' abbiegen[ auf <b>%s</b>]',
  'ROUTER_5.X_MOD_0': 'Uturn',
  'ROUTER_5.X_MOD_1': 'Scharf rechts',
  'ROUTER_5.X_MOD_2': 'Rechts',
  'ROUTER_5.X_MOD_3': 'Leicht rechts',
  'ROUTER_5.X_MOD_4': 'Geradeaus',
  'ROUTER_5.X_MOD_5': 'Leicht links',
  'ROUTER_5.X_MOD_6': 'Links',
  'ROUTER_5.X_MOD_7': 'Scharf links',
  'ROUTER_5.X_MOD_8': 'in der NÃ¤he',
  ROUTER_FROM: 'Start',
  ROUTER_TO: 'Ziel',
  ROUTER_CENTER: 'Zentrum',
  ROUTER_FIND_ROUTE: 'Route finden',
  ROUTER_LOC_ROUTE_TO: 'Route hierhin',
  ROUTER_ROUTEDESC: 'Routenbeschreibung',
  ROUTER_ROUTENAME: 'Route',
  ROUTER_DISTANCE: 'Distanz',
  ROUTER_TIME: 'Zeit',
  ROUTER_REV_GEOCODING: 'Ermittle Adresse...',
  ROUTER_ERROR_REV_GEOCODING: 'Fehler beim Ermitteln der Adresse',
  ROUTER_SEARCHING: 'Suche Adresse...',
  ROUTER_ERROR_SEARCHING: 'Fehler beim Suchen der Adresse',
  ROUTER_CALC_ROUTE: 'Berechne Route...',
  ROUTER_ERROR_CALC_ROUTE: 'Fehler beim Berechnen der Route',
  ROUTER_SETTINGS: 'Routeneinstellungen',
  //new Router
  AREA_NAME: 'Umkreissuche',
  AREA_PROFILE: 'Profil',
  AREA_FEATURECOUNT: 'Gefundene Elemente',
  ROUTE_DETOUR: 'Umweg',
  AREA_DETOUR: 'Radius',
  INSTRUCTION_HEADLINE: 'Routenbeschreibung',
  FEATURES_HEADLINE: 'Lokationen',
  ROUTE_POSITION: 'Position ermitteln',
  START_ROUTE: 'Suche starten',
  REMOVE_ADDRESS: 'Adresse lÃ¶schen',
  CAR: 'Auto',
  BIKE: 'Fahrrad',
  ROADBIKE: 'Rennrad',
  MOUNTAINBIKE: 'Mountainbike',
  ELECTRICBIKE: 'E-Bike',
  TRUCK: 'Lastkraftwagen',
  WALK: 'FuÃgÃ¤ngerIn',
  WANDER: 'WandererIn',
  WHEEL: 'Rollstuhl',
  SCOOT: 'Roller',
  MOTORBIKE: 'Motorrad',
  CLOSE: 'SchlieÃen',
  NONE: '' // last line

}; // end of "css constants" ---

exports.routingConstantsGerman = routingConstantsGerman;

/***/ }),

/***/ "./Resources/public/js/routing-constant-i18n-en.js":
/*!*********************************************************!*\
  !*** ./Resources/public/js/routing-constant-i18n-en.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */

/**
 *  constants
 */

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.routingConstantsEnglish = void 0;
var routingConstantsEnglish = {
  ROUTER_VIEW_ADDRESS_INPUT: 'Find route',
  ROUTER_FROM_LABEL: 'Start',
  ROUTER_TO_LABEL: 'End',
  ROUTER_CLEAR_TITLE: 'Delete',
  ROUTER_CLEAR_HTML: '',
  ROUTER_Label_Interim: 'Interim Goal',
  ROUTER_DEFAULT_HEADLINE_ROUTE: 'Router',
  ROUTER_DEFAULT_HEADLINE_AREA: 'Area search',
  ROUTER_SWITCH: 'Switch between Start and End',
  ROUTER_OVER: 'Add interim goal',
  ROUTER_PRINT: 'Print route description',
  ROUTER_DOWNLOAD: 'Download route as GPX',
  POPUP_ROUTE_FROM: 'Route from here',
  POPUP_ROUTE_TO: 'Route to here',
  POPUP_ROUTE_EDIT: 'Open line in router',
  ROUTER_VIEW_LABEL_ROUTE: 'Route:',
  ROUTER_VIEW_LABEL_DISTANCE: 'Distance:',
  ROUTER_VIEW_LABEL_TIME: 'Time:',
  ROUTER_VIEW_LABEL_PROFILE: 'Profile',
  ROUTER_VIEW_ALERT_Error: 'Error',
  ROUTER_VIEW_ALERT_ADDRESS: 'Address not found.',
  ROUTER_VIEW_ALERT_GOCODING: 'No access to geocoding.',
  ROUTER_ERROR_POLYLINE: 'Could not calculate route.',
  ROUTER_ERROR_LINESTRING: 'Could not open line in router.',
  ROUTER: 'Router',
  ROUTER_N: 'Head north',
  ROUTER_E: 'Head east',
  ROUTER_S: 'Head south',
  ROUTER_W: 'Head west',
  ROUTER_NE: 'Head northeast',
  ROUTER_SE: 'Head southeast',
  ROUTER_SW: 'Head southwest',
  ROUTER_NW: 'Head northwest',
  ROUTER_DIRECTION_0: 'unknown direction[ onto <b>%s</b>]',
  ROUTER_DIRECTION_1: 'straight ahead[ onto <b>%s</b>]',
  ROUTER_DIRECTION_2: 'slight right[ onto <b>%s</b>]',
  ROUTER_DIRECTION_3: 'right[ onto <b>%s</b>]',
  ROUTER_DIRECTION_4: 'sharp right[ onto <b>%s</b>]',
  ROUTER_DIRECTION_5: 'turn[ onto <b>%s</b>]',
  ROUTER_DIRECTION_6: 'sharp turn left[ onto <b>%s</b>]',
  ROUTER_DIRECTION_7: 'turn left[ onto <b>%s</b>]',
  ROUTER_DIRECTION_8: 'light turn left[ onto <b>%s</b>]',
  ROUTER_DIRECTION_10: 'drive in direction of <b>%d</b>[ onto <b>%s</b>]',
  'ROUTER_DIRECTION_11-1': 'Take the first exit in the roundabout[ onto <b>%s</b>]',
  'ROUTER_DIRECTION_11-2': 'Take the 2nd exit in the roundabout[ onto <b>%s</b>]',
  'ROUTER_DIRECTION_11-3': 'Take the 3rd exit in the roundabout[ onto <b>%s</b>]',
  'ROUTER_DIRECTION_11-4': 'Take the 4th exit in the roundabout[ onto <b>%s</b>]',
  'ROUTER_DIRECTION_11-5': 'Take the 5th exit in the roundabout[ onto <b>%s</b>]',
  'ROUTER_DIRECTION_11-6': 'Take the 6th exit in the roundabout[ onto <b>%s</b>]',
  'ROUTER_DIRECTION_11-7': 'Take the 7th exit in the roundabout[ onto <b>%s</b>]',
  'ROUTER_DIRECTION_11-8': 'Take the 8th exit in the roundabout[ onto <b>%s</b>]',
  'ROUTER_DIRECTION_11-9': 'Take the 9th exit in the roundabout[ onto <b>%s</b>]',
  'ROUTER_DIRECTION_11-x': 'Take one of the exits in the roundabout[ onto <b>%s</b>]',
  ROUTER_DIRECTION_15: 'Destination reached',
  'ROUTER_5.X_TYPE_0': ' Turn %m on[ <b>%s</b>]',
  'ROUTER_5.X_TYPE_1': ' Follow the course of the road %m[ as <b>%s</b>]',
  'ROUTER_5.X_TYPE_2': ' Depart[ on <b>%s</b>]',
  'ROUTER_5.X_TYPE_3': ' Arrive <b>%m</b>',
  'ROUTER_5.X_TYPE_4': ' Continue driving[ on <b>%s</b>]',
  'ROUTER_5.X_TYPE_5': ' Take the ramp %m[ on <b>%s</b>]',
  'ROUTER_5.X_TYPE_6': ' Take the ramp %m[ to exit on<b>%s</b>]',
  'ROUTER_5.X_TYPE_7': ' Take the %m site of the fork to[ <b>%s</b>]',
  'ROUTER_5.X_TYPE_8': ' Turn %m[ on <b>%s</b>]',
  'ROUTER_5.X_TYPE_9': ' Take the lane %m[ on <b>%s</b>]',
  'ROUTER_5.X_TYPE_10': ' Turn %m to stay on the road',
  'ROUTER_5.X_TYPE_11': ' Leave the roundabout on the %z. exit[ to <b>%s</b>]',
  'ROUTER_5.X_TYPE_12': ' Leave the roundabout on the %z. exit[ to <b>%s</b>]',
  'ROUTER_5.X_TYPE_13': ' Turn %m[ on <b>%s</b>]',
  'ROUTER_5.X_TYPE_14': ' Follow the road %m',
  'ROUTER_5.X_MOD_0': 'Uturn',
  'ROUTER_5.X_MOD_1': 'sharp right',
  'ROUTER_5.X_MOD_2': 'right',
  'ROUTER_5.X_MOD_3': 'slight right',
  'ROUTER_5.X_MOD_4': 'straight',
  'ROUTER_5.X_MOD_5': 'slight left',
  'ROUTER_5.X_MOD_6': 'left',
  'ROUTER_5.X_MOD_7': 'sharp left',
  'ROUTER_5.X_MOD_8': 'somehow',
  ROUTER_FROM: 'Start',
  ROUTER_TO: 'End',
  ROUTER_CENTER: 'Center',
  ROUTER_FIND_ROUTE: 'Find route',
  ROUTER_LOC_ROUTE_TO: 'Route to here',
  ROUTER_ROUTEDESC: 'Description',
  ROUTER_ROUTENAME: 'Route',
  ROUTER_DISTANCE: 'Distance',
  ROUTER_TIME: 'Time',
  ROUTER_REV_GEOCODING: 'Identified address...',
  ROUTER_ERROR_REV_GEOCODING: 'Fault! Can not identifiy address',
  ROUTER_SEARCHING: 'Search address...',
  ROUTER_ERROR_SEARCHING: 'Fault! Can not find address',
  ROUTER_CALC_ROUTE: 'Calc route...',
  ROUTER_ERROR_CALC_ROUTE: 'Fault! Can not calc address',
  ROUTER_SETTINGS: 'Routing settings',
  CTRL_ROUTER: 'Toggle router',
  //new Router
  AREA_NAME: 'Search perimeter',
  AREA_PROFILE: 'Profile',
  AREA_FEATURECOUNT: 'Found features',
  ROUTE_DETOUR: 'Detour',
  AREA_DETOUR: 'Radius',
  INSTRUCTION_HEADLINE: 'Route Instructions',
  FEATURES_HEADLINE: 'Locations',
  ROUTE_POSITION: 'Get user position',
  START_ROUTE: 'Start search',
  CAR: 'Car',
  BIKE: 'Bike',
  ROADBIKE: 'Road bike',
  MOUNTAINBIKE: 'Mountain bike',
  ELECTRICBIKE: 'E-Bike',
  TRUCK: 'Truck',
  WALK: 'Pedestrian',
  WANDER: 'Wanderer',
  WHEEL: 'Wheelchair',
  SCOOT: 'Router',
  MOTORBIKE: 'Motorbike',
  CLOSE: 'Close',
  NONE: '' // last line

}; // end of "css constants" ---

exports.routingConstantsEnglish = routingConstantsEnglish;

/***/ }),

/***/ "./Resources/public/js/routing-constant-i18n.js":
/*!******************************************************!*\
  !*** ./Resources/public/js/routing-constant-i18n.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getLanguage = getLanguage;

var _routingConstantI18nDe = __webpack_require__(/*! ./routing-constant-i18n-de */ "./Resources/public/js/routing-constant-i18n-de.js");

var _routingConstantI18nEn = __webpack_require__(/*! ./routing-constant-i18n-en */ "./Resources/public/js/routing-constant-i18n-en.js");

/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */
function getLanguage(mapData) {
  if (typeof mapData !== 'undefined') {
    switch (mapData.lang) {
      case "de":
        return _routingConstantI18nDe.routingConstantsGerman;

      case "en":
        return _routingConstantI18nEn.routingConstantsEnglish;

      default:
        return _routingConstantI18nEn.routingConstantsEnglish;
    }
  }
}

/***/ }),

/***/ "./Resources/public/js/routing-constants.js":
/*!**************************************************!*\
  !*** ./Resources/public/js/routing-constants.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/*
 * This file is part of con4gis, the gis-kit for Contao CMS.
 * @package con4gis
 * @version 8
 * @author con4gis contributors (see "authors.txt")
 * @license LGPL-3.0-or-later
 * @copyright (c) 2010-2021, by KÃ¼stenschmiede GmbH Software & Design
 * @link https://www.con4gis.org
 */

/**
 *  constants
 */

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.routingConstants = void 0;
var routingConstants = {
  ROUTER_INPUT_WRAPPER: 'c4g-router-input-wrapper',
  ROUTER_PROFILE_WRAPPER: 'c4g-router-profile-wrapper',
  ROUTER_INPUT_FROM: 'c4g-router-input-from',
  ROUTER_INPUT_TO: 'c4g-router-input-to',
  ROUTER_INPUT_OVER: 'c4g-router-input-over',
  ROUTER_INPUT_CLEAR: 'c4g-router-input-clear',
  ROUTER_BUTTONBAR: 'c4g-router-buttonbar',
  ROUTER_ATTRIBUTION_WRAPPER: 'c4g-router-attribution-wrapper',
  ROUTER_INSTRUCTIONS_WRAPPER: 'c4g-router-instructions-wrapper',
  ROUTER_INSTRUCTIONS_HEADER: 'c4g-router-instructions-header',
  ROUTER_SWITCH: 'c4g-router-switch',
  ROUTER_OVER: 'c4g-router-over',
  ROUTER_PRINT: 'c4g-router-print',
  ROUTER_PROFILE_CAR: 'c4g-router-profile-car',
  ROUTER_PROFILE_TRUCK: 'c4g-router-profile-hgv',
  ROUTER_PROFILE_BIKE: 'c4g-router-profile-bike',
  ROUTER_PROFILE_FOOT: 'c4g-router-profile-foot',
  ROUTER_PROFILE_WHEELCHAIR: 'c4g-router-profile-wheelchair',
  ROUTER_PROFILE_SCOOTER: 'c4g-router-profile-scooter',
  ROUTER_INSTRUCTIONS_TABLE: 'c4g-router-instruction-table',
  ROUTER_INSTRUCTIONS_ITEM: 'c4g-router-instruction-item',
  ROUTER_INSTRUCTIONS_ITEM_ODD: 'c4g-router-instruction-item--odd',
  ROUTER_INSTRUCTIONS_ITEM_EVEN: 'c4g-router-instruction-item--even',
  ROUTER_INSTRUCTIONS_ITEM_DIRECTION: 'c4g-router-instruction-item_direction',
  ROUTER_INSTRUCTIONS_ITEM_DIRECTION_ICON: 'c4g-router-instruction-item_direction-icon',
  ROUTER_INSTRUCTIONS_ITEM_DIRECTION_TEXT: 'c4g-router-instruction-item_text',
  ROUTER_INSTRUCTIONS_ITEM_DIRECTION_DISTANCE: 'c4g-router-instruction-item_distance',
  ROUTE_LAYER_VALUES: 'c4g-routing-layer-values',
  ROUTE_LAYERS_SELECT: 'c4g-routing-layers-select',
  ROUTE_TOGGLE: 'c4g-routing-toggle',
  OUTPUT_DETOUR: 'c4g-routing-output',
  ROUTE_START_BUTTON: 'c4g-route-search-start',
  ROUTER_SEARCH: 'c4g-router-search',
  ROUTE_POSITION: 'c4g-router-position',
  ROUTE_ERROR: 'c4g-routing-error',
  NONE: '' // last line

}; // end of "css constants" ---

exports.routingConstants = routingConstants;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctYmFzZWxheWVyLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLWJhc2VsYXllci5qcyIsIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbGF5ZXItY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbG9jYXRpb25zdHlsZS1jb250cm9sbGVyLmpzIiwid2VicGFjazovL21hcHNidW5kbGUvLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1sb2NhdGlvbnN0eWxlLmpzIiwid2VicGFjazovL21hcHNidW5kbGUvLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbmZpZy5qcyIsIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlLmpzIiwid2VicGFjazovL21hcHNidW5kbGUvLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLWNvbnN0YW50LWkxOG4tZW4uanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbC16b29tbGV2ZWwuanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtY29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtaTE4bi5qcyIsIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1pbnRlcmFjdGlvbi1nZW9waWNrZXItZ2VvanNvbi5qcyIsIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1pbnRlcmFjdGlvbi1nZW9waWNrZXIuanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtbWlzYy1tYXBob3Zlci5qcyIsIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1taXNjLXNwaW5uZXIuanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtbWlzYy10b29sdGlwcG9wdXAuanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW1hcHMtcG9wdXAtaW5mby1kZS5qcyIsIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jNGctbWFwcy1wb3B1cC1pbmZvLWVuLmpzIiwid2VicGFjazovL21hcHNidW5kbGUvLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLXByb3h5LmpzIiwid2VicGFjazovL21hcHNidW5kbGUvLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1tYXBzLXV0aWxzLmpzIiwid2VicGFjazovL21hcHNidW5kbGUvLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1vdmVybGF5LWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLW92ZXJsYXkuanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvYzRnLXJvdXRlci10aW1lLWNvbnZlcnNpb25zLmpzIiwid2VicGFjazovL21hcHNidW5kbGUvLi9SZXNvdXJjZXMvcHVibGljL2pzL2M0Zy1yb3V0aW5nLXBlcm1hbGluay5qcyIsIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jb21wb25lbnRzL2M0Zy1hdXRvY29tcGxldGUtaW5wdXQuanN4Iiwid2VicGFjazovL21hcHNidW5kbGUvLi9SZXNvdXJjZXMvcHVibGljL2pzL2NvbXBvbmVudHMvYzRnLWdlb3NlYXJjaC5qc3giLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvY29tcG9uZW50cy9jNGctbWFwcy5qc3giLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvY29tcG9uZW50cy9jNGctcm91dGVyLXBvcHVwLWJ1dHRvbnMuanN4Iiwid2VicGFjazovL21hcHNidW5kbGUvLi9SZXNvdXJjZXMvcHVibGljL2pzL2NvbXBvbmVudHMvYzRnLXJvdXRlci1yZXN1bHQtY29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9jb21wb25lbnRzL2M0Zy1yb3V0ZXItdmlldy5qc3giLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvY29tcG9uZW50cy9jNGctdGl0bGViYXIuanN4Iiwid2VicGFjazovL21hcHNidW5kbGUvLi9SZXNvdXJjZXMvcHVibGljL2pzL3JvdXRpbmctY29uc3RhbnQtaTE4bi1kZS5qcyIsIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vUmVzb3VyY2VzL3B1YmxpYy9qcy9yb3V0aW5nLWNvbnN0YW50LWkxOG4tZW4uanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL1Jlc291cmNlcy9wdWJsaWMvanMvcm91dGluZy1jb25zdGFudC1pMThuLmpzIiwid2VicGFjazovL21hcHNidW5kbGUvLi9SZXNvdXJjZXMvcHVibGljL2pzL3JvdXRpbmctY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbIk9TTV9SRUxfQVRUUklCVVRJT04iLCJDNGdCYXNlbGF5ZXJDb250cm9sbGVyIiwicHJveHkiLCJtYXBDb250cm9sbGVyIiwib3B0aW9ucyIsImFyckJhc2VsYXllcnMiLCJiYXNlbGF5ZXJJZHMiLCJiYXNlS2V5cyIsImRhdGEiLCJiYXNlX2tleXMiLCJzZWxmIiwialF1ZXJ5IiwiYWpheCIsImFwaV9iYXNlbGF5ZXJfdXJsIiwiZGF0YVR5cGUiLCJqc29ucCIsImRvbmUiLCJiYXNlbGF5ZXIiLCJhZGRCYXNlTGF5ZXJzIiwidXRpbHMiLCJjYWxsSG9va0Z1bmN0aW9ucyIsIndpbmRvdyIsImM0Z01hcHNIb29rcyIsInByb3h5X2Jhc2VsYXllcl9sb2FkZWQiLCJmYWlsIiwiY29uc29sZSIsIndhcm4iLCJzcGlubmVyIiwiaGlkZSIsImFsd2F5cyIsImJhc2VsYXllcnMiLCJ1aWQiLCJpIiwiaiIsImxlbmd0aCIsImlkIiwiZ2V0VW5pcXVlSWQiLCJwdXNoIiwiQzRnQmFzZWxheWVyIiwicGFyc2VJbnQiLCJzaG93QmFzZUxheWVyIiwiZGVmYXVsdF9iYXNlbGF5ZXIiLCJhY3RpdmVCYXNlbGF5ZXJJZCIsIm5hbWUiLCJwcm92aWRlciIsInN0eWxlIiwiYmFzZWxheWVyc19sb2FkZWQiLCJob29rX2Jhc2VsYXllcl9sb2FkZWQiLCJsYXllck9wdGlvbnMiLCJiYXNlTGF5ZXJDb25maWciLCJzb3VyY2VDb25maWdzIiwibmV3QmFzZWxheWVyIiwiaXNTZWN1cmVDb250ZXh0IiwiY3Jvc3NPcmlnaW4iLCJjb29raWUiLCJtYXBEYXRhIiwiYXJyQ29vb2tpZXMiLCJkb2N1bWVudCIsInNwbGl0IiwiaGFzT3duUHJvcGVydHkiLCJpbmRleE9mIiwidmFsdWUiLCJkdW1teVVybCIsImR1bW15QmFzZWxheWVyIiwiZHVtbXlTb3VyY2UiLCJYWVoiLCJ1cmwiLCJUaWxlTGF5ZXIiLCJzZXRTb3VyY2UiLCJub1VybCIsInVybHMiLCJzb3VyY2UiLCJleHRlbnQiLCJleHRlbmQiLCJvc20iLCJPU00iLCJzdGFtZW4iLCJzb3VyY2UxIiwic291cmNlMiIsIkxheWVyR3JvdXAiLCJsYXllcnMiLCJTdGFtZW4iLCJsYXllciIsImFycmF5IiwiZ2V0TGF5ZXJzIiwiZ2V0QXJyYXkiLCJjb25maWciLCJyZXBsYWNlIiwiYXR0cmlidXRpb25zIiwiYXR0cmlidXRpb24iLCJhcGlfa2V5IiwiYXBwX2lkIiwibWFwYm94X3R5cGUiLCJtYXBib3giLCJ1cmxfY2xhc3NpYyIsImhpZGVfaW5fYmUiLCJtYXB6Iiwib3RtIiwia2xva2FuX3R5cGUiLCJjaGFyQXQiLCJWZWN0b3JUaWxlTGF5ZXIiLCJWZWN0b3JUaWxlU291cmNlIiwia2xva2FuIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwiZ2xTdHlsZSIsIlRpbGVKU09OIiwiaGVyZV90eXBlIiwiaGVyZSIsInByZWxvYWQiLCJJbmZpbml0eSIsInRodW5kZXJmb3Jlc3RfdHlwZSIsInRodW5kZXJmb3Jlc3QiLCJCaW5nTWFwcyIsImN1bHR1cmUiLCJuYXZpZ2F0b3IiLCJsYW5ndWFnZXMiLCJsYW5ndWFnZSIsInVzZXJMYW5ndWFnZSIsImtleSIsImltYWdlcnlTZXQiLCJUaWxlV01TIiwicGFyYW1zIiwiTEFZRVJTIiwiVkVSU0lPTiIsInZlcnNpb24iLCJUUkFOU1BBUkVOVCIsInRyYW5zcGFyZW50IiwiZ3V0dGVyIiwicHJvamVjdGlvbiIsIlByb2plY3Rpb24iLCJjb2RlIiwidW5pdHMiLCJJbWFnZSIsIkltYWdlU3RhdGljIiwiaW1hZ2VTcmMiLCJpbWFnZUV4dGVudCIsImFyclNvdXJjZSIsIkpTT04iLCJwYXJzZSIsImdlb0ltYWdlSnNvbiIsIm9sX3NvdXJjZV9HZW9JbWFnZSIsImJhc2VMYXllckdyb3VwIiwiaW5kZXgiLCJlbGVtZW50IiwiY3JlYXRlQmFzZUxheWVyIiwibWF4Wm9vbSIsIm1hcCIsImdldFZpZXciLCJnZXRSZXNvbHV0aW9uRm9yWm9vbSIsIm1pblpvb20iLCJzZXRNaW5SZXNvbHV0aW9uIiwic2V0TWF4UmVzb2x1dGlvbiIsImtsYXJvIiwiZ2V0TWFuYWdlciIsIm1hbmFnZXIiLCJ3YXRjaGVyIiwiZ2V0U291cmNlIiwiZ2V0Q29uc2VudCIsInVwZGF0ZSIsImFjdGlvbiIsImNvbnNlbnRTdGF0dXMiLCJzZXRMYXllcnMiLCJDb2xsZWN0aW9uIiwid2F0Y2giLCJIb2ZmZkNvbnNlbnRNYW5hZ2VyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiY29uc2VudElkIiwicmVxdWlyZXNDb25zZW50IiwiYmFzZWxheWVySWQiLCJhcnJMYXllcnMiLCJsYXllckNvbnRyb2xsZXIiLCJzaG93TGF5ZXIiLCJhY3RpdmVGb3JCYXNlbGF5ZXJzIiwicmVuZGVyU3BlY2lhbCIsImluY2x1ZGVzIiwiZGlzcGxheSIsImhpZGVMYXllciIsImJhc2VMYXllclVpZCIsImFkZEJhc2VsYXllciIsImJhc2VMYXllcnMiLCJ2aWV3IiwibGF5ZXJzX2xvYWRlZCIsImZpbHRlckxheWVyc0ZvckJhc2VsYXllciIsImhvb2tfbGF5ZXJfbG9hZGVkIiwiYWRkaXRpb25hbCIsImFkZGl0aW9uYWxBdHRyaWJ1dGlvbiIsImV4aXN0cyIsImdlb3NlYXJjaCIsImdlb3NlYXJjaEF0dHJpYnV0aW9uIiwicm91dGVyQXR0cmlidXRpb24iLCJyb3V0ZXIiLCJzb3J0aW5nIiwic29ydCIsImhhc092ZXJsYXlzIiwib3ZlcmxheXMiLCJvdmVybGF5Q29udHJvbGxlciIsImFyck92ZXJsYXlzIiwiQzRnT3ZlcmxheSIsInNob3dPdmVybGF5TGF5ZXIiLCJsb2ciLCJvbGRCYXNlbGF5ZXIiLCJvdmVybGF5IiwiY2hhbmdlT3BhY2l0eSIsIm9wYWNpdHkiLCJpdGVtIiwiZ2V0IiwiZm9yRWFjaCIsInNldFZpc2libGUiLCJ6b29tIiwiZ2V0Wm9vbSIsImNlbnRlciIsImdldENlbnRlciIsInNldFpvb20iLCJzZXRNaW5ab29tIiwic2V0TWF4Wm9vbSIsInNldFZpZXciLCJob29rX2Jhc2VsYXllcl92aXNpYmlsaXR5IiwiY2VzaXVtIiwiZW5hYmxlIiwib2wzZCIsIk9MQ2VzaXVtIiwiY3JlYXRlU3luY2hyb25pemVycyIsInNldEVuYWJsZWQiLCJoYXNDbGFzcyIsImFkZENsYXNzIiwiZ2V0RW5hYmxlZCIsInJlbW92ZUNsYXNzIiwiYmFzZWxheWVyQXJyIiwiY29udHJvbGxlciIsInBpZCIsImRpc3BsYXlfbmFtZSIsIm9zbV9zdHlsZSIsIm9zbV9zdHlsZV91cmwxIiwib3NtX3N0eWxlX3VybDIiLCJvc21fc3R5bGVfdXJsMyIsIm9zbV9zdHlsZV91cmw0Iiwib3NtX2tleW5hbWUiLCJiaW5nX3N0eWxlIiwid21zX2d1dHRlciIsInByb3RlY3RfYmFzZWxheWVyIiwicGVybWl0dGVkX2dyb3VwcyIsInN0eWxlX3VybCIsInByZXZpZXdfaW1hZ2UiLCJsYXllckdyb3VwIiwiQzRnT3ZlcmxheUNvbnRyb2xsZXIiLCJvc210b2dlb2pzb24iLCJyZXF1aXJlIiwib2xGb3JtYXQiLCJPU01YTUwiLCJvbEZvcm1hdHMiLCJCZXR0ZXJMYXllckNvbnRyb2xsZXIiLCJoYW5kbGVab29tIiwiYmluZCIsInNjb3BlIiwibG9hZGVycyIsImNvbnRyb2xsZXJzIiwiYXJyTG9jc3R5bGVzIiwib2JqSWRzIiwiY3VycmVudFpvb21MZXZlbCIsIm1heFgiLCJtYXhZIiwibWluWCIsIm1pblkiLCJ2ZWN0b3JDb2xsZWN0aW9uIiwibG9hZGVyRnVuY3Rpb24iLCJyZXNvbHV0aW9uIiwicmVxdWVzdERhdGEiLCJwcmV2ZW50TG9hZGluZyIsInJlc3BvbnNlRnVuYyIsImZlYXR1cmVzIiwib2JqTGF5ZXJzIiwiZmluZCIsImxheWVySWQiLCJjb250ZW50RGF0YSIsImZlYXR1cmUiLCJwYXJzZU93bkRhdGEiLCJhZGRGZWF0dXJlcyIsImNoYWluIiwic2V0T2JqTGF5ZXJzIiwicGVyZm9ybU93bkRhdGEiLCJwZXJmb3JtT3ZwIiwibG9jc3R5bGUiLCJhcnJFeHRlbnRzIiwidmVjdG9yU291cmNlIiwiVmVjdG9yU291cmNlIiwibG9hZGVyIiwic3RyYXRlZ3kiLCJiYm94IiwiY2x1c3RlclN0eWxlRnVuY3Rpb24iLCJzaXplIiwicmV0dXJuU3R5bGUiLCJnZXRTdHlsZSIsImxvY2F0aW9uU3R5bGVDb250cm9sbGVyIiwiYXJyTG9jU3R5bGVzIiwiQXJyYXkiLCJpc0FycmF5IiwiekluZGV4Iiwic2V0WkluZGV4IiwiZ2VvbWV0cnkiLCJnZXRHZW9tZXRyeSIsImNsb25lIiwidHJhbnNmb3JtIiwiZ2V0Q29vcmRpbmF0ZXMiLCJpY29uT2Zmc2V0Iiwic2NhbGUiLCJnZXRJbWFnZSIsImdldFJhZGl1cyIsInJhZGl1cyIsImdldEFuY2hvciIsImdldFNjYWxlIiwiY2x1c3Rlcl9maWxsY29sb3IiLCJjb3VudEZlYXR1cmVzIiwiZ2V0TGVuZ3RoIiwic2NhbGVGb3JDb3VudCIsImZpbGxjb2xvciIsImdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eSIsInVuaXQiLCJmb250Y29sb3IiLCJjbHVzdGVyX2ZvbnRjb2xvciIsIlN0eWxlIiwidGV4dCIsIlRleHQiLCJmb250Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJmaWxsIiwiRmlsbCIsImNvbG9yIiwidG9TdHJpbmciLCJzdGFyYm9hcmQiLCJjb2xvclpvb21NYXJrZXIiLCJtYXJrRmlsbCIsImdldEljb24iLCJnZXRTaXplIiwibWFya1N0eWxlIiwiaW1hZ2UiLCJDaXJjbGUiLCJjbHVzdGVyX2FsbCIsIkNsdXN0ZXIiLCJnZW9tZXRyeUZ1bmN0aW9uIiwiZGlzdGFuY2UiLCJjbHVzdGVyX2Rpc3RhbmNlIiwidmVjdG9yTGF5ZXIiLCJWZWN0b3IiLCJsYXllclJlcXVlc3RzIiwib3ZwS2V5Iiwib3ZwX2tleSIsImhvb2tfbWFwX3pvb20iLCJoaWRlRWxlbWVudCIsInJlcXVlc3QiLCJhYm9ydCIsImZlYXR1cmVJZCIsInJlbW92ZSIsInJlbW92ZUxheWVyIiwiZmlsdGVyIiwic2V0IiwicGFyc2VGbG9hdCIsImZpbHRlckhhbmRsaW5nIiwiaGlkZUZlYXR1cmVNdWx0aSIsImhpZGVGZWF0dXJlIiwiZmlsdGVyTGF5ZXJNdWx0aSIsImZpbHRlckxheWVyIiwiZXh0ZW50SWQiLCJyZW1vdmVMb2FkZWRFeHRlbnQiLCJhZGRMYXllciIsImNoaWxkcyIsImdldENoaWxkc0V4dGVudCIsImdldEV4dGVudEZvckxheWVyIiwiZ2V0RXh0ZW50Iiwib2xFeHRlbnQiLCJ3aWR0aCIsImNzcyIsImZpdCIsInBhZGRpbmciLCJkdXJhdGlvbiIsImNoaWxkIiwiZmxhZyIsInNldENoaWxkRmVhdHVyZUZsYWciLCJtYXBJZCIsInNldFRpbWVvdXQiLCJzZXRMYXllcnNJbml0aWFsIiwiYXBpX2xheWVyX3VybCIsImhvb2tfbGF5ZXIiLCJzdHJ1Y3R1cmUiLCJ0YWJTdHJ1Y3R1cmVzIiwidHlwZSIsIm5ld1RhYiIsImdldFN0cnVjdHVyZUZyb21MYXllciIsImF3ZXNvbWVJY29uIiwiYXdlc29tZWljb24iLCJuZXdDaGlsZCIsImhpZGVfaW5fc3RhcmJvYXJkIiwiY29uY2F0IiwiYXJyU3RhdGVzIiwic3RydWN0SWQiLCJnZXRJbml0aWFsU3RhdGVzIiwiZ2V0RmVhdHVyZXNGcm9tU3RydWN0IiwidGFiU3RhdGVzIiwibG9hZExvY2F0aW9uU3R5bGVzIiwic3R5bGVEYXRhIiwic2V0TG9jU3R5bGVzIiwic2V0VGFiTGF5ZXJzIiwiY2FsY19leHRlbnQiLCJwcm9wcyIsIm1pbl9nYXAiLCJsYXllcl9sb2FkZWQiLCJjaGlsZFN0YXRlcyIsImNoaWxkSWQiLCJhY3RpdmUiLCJjb2xsYXBzZWQiLCJpbml0aWFsX29wZW5lZCIsImdyZXllZCIsImNvbXBhcmVab29tIiwiaWRDaGFpbiIsImZvdW5kIiwibG9hZGVySWQiLCJwb3NzaWJsZUxvY3N0eWxlIiwiY29udGVudCIsImdldEZlYXR1cmVzRm9yTGF5ZXIiLCJsb2NhdGlvblN0eWxlIiwiY2hlY2tMb2NzdHlsZSIsImZpbmRJbmRleCIsImFzeW5jX2NvbnRlbnQiLCJleGNsdWRlRnJvbVNpbmdsZUxheWVyIiwibG9jc3R5bGVJZCIsImhvdmVyTG9jYXRpb24iLCJob3ZlclN0eWxlIiwicG9wdXAiLCJmb3JjZU5vZGVzIiwic2hvd0FkZEdlb21zIiwiaG92ZXJfbG9jYXRpb24iLCJob3Zlcl9zdHlsZSIsInNldHRpbmdzIiwic2hvd0FkZGl0aW9uYWxHZW9tZXRyaWVzIiwiY2hpbGRDaGFpbiIsInNwbGl0X2dlb2pzb24iLCJuYW1lRmllbGQiLCJnZW9qc29uX2F0dHJpYnV0ZXMiLCJ6b29tVG8iLCJnZW9qc29uX3pvb20iLCJvbF91aWQiLCJjdXN0b21TdHlsZUZ1bmMiLCJib3VuZGluZ0JveCIsImFsbCIsImxvYWRlckZ1bmMiLCJzZXRMb2FkZXIiLCJmZWF0dXJlUHJvamVjdGlvbiIsImRhdGFQcm9qZWN0aW9uIiwicHJvcGVydGllcyIsInByb2pDb2RlIiwicHJvajQiLCJkZWZzIiwiZm9ybWF0IiwiY2x1c3RlciIsImhvb2tfbG9jc3R5bGVzX2xvYWRlZCIsImxvc3R5bGVDb250cm9sbGVyIiwiY2hhbmdlZCIsImhpZGVJblN0YXJib2FyZCIsInRhZ3MiLCJhZGRab29tVG8iLCJjb250ZW50SWQiLCJzaW5nbGVGZWF0dXJlIiwicmVhZEZlYXR1cmUiLCJsb2NfbGlua3VybCIsInRvb2x0aXAiLCJsYWJlbCIsIm5vUmVhbEZpbHRlciIsInBhcnNlciIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInRlbXBGZWF0dXJlcyIsImNoaWxkTm9kZXMiLCJvdXRlckhUTUwiLCJmZWF0SWQiLCJQb2ludCIsIm1hcENvbmYiLCJBYm9ydENvbnRyb2xsZXIiLCJzaWduYWwiLCJib3VuZGluZ0FycmF5Iiwic3RyQm91bmRpbmdCb3giLCJkZWNvZGVVUklDb21wb25lbnQiLCJiYm94VGFnIiwic3Vic3RyIiwidHJpbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlc3AiLCJwYXJzZU92cERhdGEiLCJlcnJvciIsIm1lc3NhZ2UiLCJyZXNwbyIsInhtbERvYyIsImZlYXR1cmVzRG9jIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjaGlsZHJlbiIsIm5vZGVJZCIsImdldEF0dHJpYnV0ZSIsIm5vZGVFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZW1vdmVDaGlsZCIsInNlcmlhbGl6ZXIiLCJYTUxTZXJpYWxpemVyIiwic2VyaWFsaXplVG9TdHJpbmciLCJyZWFkRmVhdHVyZXMiLCJlIiwiZ2VvanNvbiIsIkdlb0pTT04iLCJyZXF1ZXN0RGF0YXMiLCJnZXRUeXBlIiwic2V0R2VvbWV0cnkiLCJnZXRJbnRlcmlvclBvaW50IiwiYXBpX2xheWVyY29udGVudGRhdGFfdXJsIiwicmVzdWx0Q29vcmRpbmF0ZSIsInBvaW50IiwiY29udGVudEZlYXR1cmUiLCJGZWF0dXJlIiwic2V0SWQiLCJzZWFyY2giLCJ6b29tX29uY2xpY2siLCJhZGRlZEZlYXR1cmVzIiwib2xkTGVuZ3RoIiwic2xpY2UiLCJhcnJDaGFpbiIsInN0YXRlIiwiYXJyTGF5ZXJTdGF0ZXMiLCJoYW5kbGVab29tQ2hpbGRzIiwic2V0TGF5ZXJTdGF0ZXMiLCJjaGlsZFN0YXRlIiwic2hvdyIsImxheWVyWm9vbSIsIm1pbiIsIm1heCIsIkM0Z0xvY2F0aW9uU3R5bGVDb250cm9sbGVyIiwicmVzaXplT25ab29tIiwicmVzaXplTG9jc3R5bGVzIiwiYXJySWRzIiwib3B0X29wdGlvbnMiLCJjb21wbGV0ZSIsInN1Y2Nlc3MiLCJjb3VudCIsIm1ha2VBamF4Iiwic3R5bGVJZHMiLCJhcGlfbG9jc3R5bGVfdXJsIiwiaWRzIiwic3VjY2Vzc2Z1bCIsIkM0Z0xvY2F0aW9uU3R5bGUiLCJnZXRTdHlsZUZ1bmN0aW9uIiwic2V0U3R5bGUiLCJsb2NzdHlsZUNvbnRyb2xsZXIiLCJqWGhyIiwic3RyU3RhdHVzIiwiY29tcGxldGVkIiwianFYSFIiLCJ0ZXh0U3RhdHVzIiwiZXJyb3JUaHJvd24iLCJuIiwic3BsaWNlIiwibG9jU3R5bGVBcnIiLCJlZGl0b3IiLCJnZXRTdHlsZUVkaXRvckNvbmZpZyIsIm1pbnpvb20iLCJtYXh6b29tIiwiZm5TdHlsZUZ1bmN0aW9uIiwib2xTdHlsZSIsIlN0cm9rZSIsIkljb24iLCJDaXJjbGVTdHlsZSIsInN0eWxlRnVuY3Rpb24iLCJpbWFnZVN0eWxlIiwic3Ryb2tlU3R5bGUiLCJmaWxsU3R5bGUiLCJ0ZXh0U3R5bGUiLCJ0ZXh0U3R5bGVPdXRsaW5lIiwiYmFja2dyb3VuZEZpbGwiLCJiYWNrZ3JvdW5kU3Ryb2tlIiwic3Ryb2tlY29sb3IiLCJzdHJva2V3aWR0aCIsImNyZWF0ZUltYWdlU3R5bGUiLCJnZXRJZCIsInN0eWxlc0FycmF5IiwibWFwWm9vbSIsImRlZmF1bHRDb2xvciIsImRlZmF1bHRfbGFiZWxfY29sb3IiLCJuZXdTY2FsZSIsImdldFNjYWxlRmFjdG9yIiwibGFiZWxfb3V0bF9jb2xvciIsImxhYmVsX291dGxfd2lkdGgiLCJsYWJlbF9vdXRsX2JveCIsImxhYmVsX29mZnNldCIsImZvbnRTaXplIiwiZm9udF9zaXplIiwidGV4dE9wdGlvbnMiLCJmb250X3dlaWdodCIsImZvbnRfc3R5bGUiLCJmb250X2ZhbWlseSIsInRleHRBbGlnbiIsImxhYmVsX2FsaWduX2hvciIsInRleHRCYXNlbGluZSIsImxhYmVsX2FsaWduX3ZlciIsImZvbnRfY29sb3IiLCJzdHJva2UiLCJzZXRTY2FsZSIsInNob3dMYWJlbEZvclpvb20iLCJsYWJlbE1pblpvb20iLCJsYWJlbF9taW56b29tIiwibGFiZWxNYXhab29tIiwibGFiZWxfbWF4em9vbSIsImxpbmVfYXJyb3dzIiwiZm9yRWFjaFNlZ21lbnQiLCJhcnJvd1N0eWxlcyIsImNyZWF0ZUxpbmVBcnJvd1N0eWxlcyIsIkZ1bmN0aW9uIiwiaW5pdGlhbFpvb20iLCJzY2FsZUZhY3RvciIsImZhY3RvciIsIm1pblNjYWxlIiwibWF4U2NhbGUiLCJjdXJyZW50Wm9vbSIsImluaXRpYWxTY2FsZSIsInN0eWxldHlwZSIsImljb25fc2NhbGUiLCJpY29uX3Jlc2l6ZV96b29tIiwiaWNvbl9yZXNpemVfc3JjX3pvb20iLCJpY29uX3Jlc2l6ZV9zY2FsZV9mYWN0b3IiLCJpY29uX3Jlc2l6ZV9taW5fc2NhbGUiLCJpY29uX3Jlc2l6ZV9tYXhfc2NhbGUiLCJzcmNab29tIiwic2NhbGVTdW1tYW5kIiwiUmVndWxhclNoYXBlIiwicG9pbnRzIiwiYW5nbGUiLCJNYXRoIiwiUEkiLCJyYWRpdXMxIiwicmFkaXVzMiIsImZsb29yIiwicm90YXRpb24iLCJpY29uX3NyYyIsImhlaWdodCIsImljb25fc2l6ZSIsImljb25fb2Zmc2V0IiwiYW5jaG9yWCIsImFuY2hvclkiLCJhbmNob3IiLCJpY29uX29wYWNpdHkiLCJzcmMiLCJzdmdTcmMiLCJjYW52YXMiLCJjcmVhdGVFbGVtZW50IiwiY3R4IiwiZ2V0Q29udGV4dCIsImNsZWFyUmVjdCIsImltZyIsIm9ubG9hZCIsImRyYXdJbWFnZSIsImltZ1NpemUiLCJvbF9zdHlsZV9QaG90byIsImtpbmQiLCJwaG90b0tpbmQiLCJjcm9wIiwic2hhZG93IiwiYXJyb3dTaXplIiwibGluZV9hcnJvd3NfcmFkaXVzIiwiYXJyb3dTaXplVW5pdCIsInN0YXJ0IiwiZW5kIiwiYXJyb3dzX21pbnpvb20iLCJsaW5lX2Fycm93c19taW56b29tIiwic3RhcnRfcGl4ZWwiLCJnZXRQaXhlbEZyb21Db29yZGluYXRlIiwiZW5kX3BpeGVsIiwic2VnbWVudExlbmd0aCIsInNxcnQiLCJwb3ciLCJyb3RhdGVXaXRoVmlldyIsImF0YW4yIiwibGluZV9hcnJvd3NfYmFjayIsImVkaXRvckNvbmZpZyIsImNvbGxlY3QiLCJlZGl0b3JfY29sbGVjdCIsInVuZGVmaW5lZCIsImljb25TcmMiLCJlZGl0b3JfaWNvbiIsInZhcnMiLCJlZGl0b3JfdmFycyIsImVkaXRvcl9zb3J0IiwiQ3ljbGVNYXAiLCJHZXJtYW4iLCJMYW5kc2NhcGVNYXAiLCJNYXBuaWsiLCJOT05FIiwiVG9uZXIiLCJUb25lckxhYmVscyIsIlRvbmVyTGluZXMiLCJUZXJyYWluIiwiV2F0ZXJjb2xvciIsIm1hcHF1ZXN0IiwiTWFwUXVlc3RPcGVuIiwiTWFwUXVlc3RIeWIiLCJNYXBRdWVzdFNhdCIsIk1hcGJveCIsInRpbGVTaXplIiwiTWFwYm94Q2xhc3NpYyIsInRpbGVQaXhlbFJhdGlvIiwiT3Blbk1hcFRpbGVzIiwiTVZUIiwidGlsZUdyaWQiLCJUaWxlSG9zdGluZyIsIkhFUkUiLCJEYXRlIiwiZ2V0RnVsbFllYXIiLCJUaHVuZGVyZm9yZXN0IiwibGFuZ0NvbnN0YW50c0dlcm1hbiIsIkxBTkciLCJOQU1FIiwiSElERSIsIkNMT1NFIiwiUE9JTlQiLCJGUkVFSEFORCIsIkxJTkUiLCJQT0xZR09OIiwiQ0lSQ0xFIiwiUEVSSU1FVEVSIiwiTEVOR1RIIiwiU1VSRkFDRUFSRUEiLCJSQURJVVMiLCJSRUZSRVNIIiwiQUNDRVBUIiwiQ09QWV9UT19DTElQQk9BUkQiLCJDVFJMX1pPT01fSU4iLCJDVFJMX1pPT01fT1VUIiwiQ1RSTF9aT09NX0VYVCIsIkNUUkxfWk9PTV9IT01FIiwiQ1RSTF9aT09NX1BPUyIsIkNUUkxfWk9PTV9TTElERVIiLCJDVFJMX1JFU0VUX1JPVEFUSU9OIiwiQ1RSTF9QT1JUU0lERSIsIkNUUkxfUk9VVEVSIiwiQ1RSTF9NRUFTVVJFVE9PTFMiLCJDVFJMX0lORk9QQUdFIiwiQ1RSTF9BRERJVElPTkFMUEFORUwiLCJDVFJMX0FDQ09VTlQiLCJDVFJMX1pPT01MRVZFTCIsIkNUUkxfTU9VU0VDT09SRFMiLCJDVFJMX0dFT1NFQVJDSCIsIkNUUkxfU1RBUlRfU0VBUkNIIiwiQ1RSTF9PVkVSVklFV01BUCIsIkNUUkxfU0lERUJPQVJEIiwiQ1RSTF9TVEFSQk9BUkQiLCJDVFJMX0FUVFJJQlVUSU9OIiwiQ1RSTF9HUklEIiwiQ1RSTF9QRVJNQUxJTksiLCJDVFJMX0ZVTExTQ1JFRU4iLCJDVFJMX1BSSU5UIiwiQ1RSTF9CQVNFTEFZRVIiLCJDVFJMX0lORk9BUkVBIiwiU1RBUkJPQVJEIiwiU1RBUkJPQVJEX0JBU0VMQVlFUiIsIlNUQVJCT0FSRF9MQVlFUiIsIlNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfQkFTRUxBWUVSU1dJVENIRVIiLCJTVEFSQk9BUkRfVklFV19UUklHR0VSX0xBWUVSU1dJVENIRVIiLCJTVEFSQk9BUkRfRUxFTUVOVF9aT09NIiwiU1RBUkJPQVJEX0VMRU1FTlRfWk9PTV9CRUZPUkUiLCJTVEFSQk9BUkRfRUxFTUVOVF9aT09NX0FGVEVSIiwiTEFZRVJTV0lUQ0hFUl9UT0dHTEVfQUxMIiwiU0lERUJPQVJEIiwiUkVTRVRfRklMVEVSIiwiR0VPU0VBUkNIIiwiT1ZFUlZJRVdNQVAiLCJNRUFTVVJFVE9PTFMiLCJNRUFTVVJFVE9PTFNfSU5GTyIsIk1FQVNVUkVUT09MU19JTkZPX0FERElUSU9OQUwiLCJNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX1NFTEVDVCIsIk1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19MSU5FU1RSSU5HIiwiTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX1BPTFlHT04iLCJNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfQ0lSQ0xFIiwiTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0ZSRUVIQU5EIiwiSU5GT1BBR0UiLCJBRERJVElPTkFMUEFORUwiLCJBRERJVElPTkFMUEFORUxfVklFV19UUklHR0VSIiwiQUNDT1VOVCIsIkFDQ09VTlRfVklFV19UUklHR0VSIiwiU0VBUkNIX05PVF9GT1VORCIsImxhbmdDb25zdGFudHNFbmdsaXNoIiwiQ1RSTF9FRElUT1IiLCJFRElUT1IiLCJFRElUT1JfRU5BQkxFX0lOU1RBTlRfTUVBU1VSRSIsIkVESVRPUl9FTkFCTEVfRlJFRUhBTkRfRFJBVyIsIkVESVRPUl9GRUFUVVJFX0FQUExZIiwiRURJVE9SX0ZFQVRVUkVfREVMRVRFIiwiRURJVE9SX0ZFQVRVUkVfTU9ESUZZIiwiRURJVE9SX1NFTEVDVF9JTkZPIiwiRURJVE9SX1NFTEVDVF9JTkZPX0FERElUSU9OQUwiLCJFRElUT1JfVklFV19UUklHR0VSX1NFTEVDVCIsIkVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19QT0lOVCIsIkVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19GUkVFSEFORCIsIkVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19MSU5FU1RSSU5HIiwiRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX1BPTFlHT04iLCJFRElUT1JfVklFV19UUklHR0VSX0RSQVdfQ0lSQ0xFIiwiSU5GT1BBR0VfVklFV19UUklHR0VSIiwiY3NzQ29uc3RhbnRzIiwiT1BFTiIsIkNMT1NFQUJMRSIsIkVOQUJMRUQiLCJESVNBQkxFRCIsIklDT04iLCJDT05UUk9MIiwiQ09QWSIsIkFDVElWRSIsIklOQUNUSVZFIiwiTE9BRElORyIsIkFOSU1BVElPTl9TUElOIiwiTEFSR0UiLCJTTUFMTCIsIkhPUklaT05UQUwiLCJWRVJUSUNBTCIsIkFUVFJJQlVUSU9OX0xPR08iLCJDT05UUk9MX0NPTlRBSU5FUl9UTCIsIkNPTlRST0xfQ09OVEFJTkVSX1RSIiwiQ09OVFJPTF9DT05UQUlORVJfQkwiLCJDT05UUk9MX0NPTlRBSU5FUl9CTF9TVUIiLCJDT05UUk9MX0NPTlRBSU5FUl9CUiIsIkdFT1NFQVJDSF9XUkFQUEVSIiwiR0VPU0VBUkNIX1RSSUdHRVIiLCJHRU9TRUFSQ0hfU1RBUlQiLCJHUkFUSUNVTEUiLCJQUklOVCIsIk9WRVJWSUVXTUFQX1dSQVBQRVIiLCJQRVJNQUxJTksiLCJQRVJNQUxJTktfUE9QVVAiLCJQT1BVUF9DTE9TRSIsIlBPUFVQX1JPVVRFX1dSQVBQRVIiLCJQT1BVUF9ST1VURV9GUk9NIiwiUE9QVVBfUk9VVEVfVE8iLCJQT1JUU0lERSIsIlBPUlRTSURFX0NPTlRBSU5FUiIsIlBPUlRTSURFX0NPTlRST0wiLCJQT1JUU0lERV9XUkFQUEVSIiwiUE9SVFNJREVfVElUTEVCQVIiLCJQT1JUU0lERV9UT1BfVE9PTEJBUiIsIlBPUlRTSURFX0NPTlRFTlRfQ09OVEFJTkVSIiwiUE9SVFNJREVfQk9UVE9NX1RPT0xCQVIiLCJQT1JUU0lERV9TVEFUVVNCQVIiLCJQT1JUU0lERV9WSUVXVFJJR0dFUkJBUiIsIlBPUlRTSURFX0hFQURMSU5FIiwiUE9SVFNJREVfQlVUVE9OQkFSIiwiUE9SVFNJREVfQlVUVE9OIiwiUE9SVFNJREVfSElERSIsIlBPUlRTSURFX0NMT1NFIiwiU1BJTk5FUiIsIlNUQVJCT0FSRF9DT05UQUlORVIiLCJTVEFSQk9BUkRfQ09OVFJPTCIsIlNUQVJCT0FSRF9XUkFQUEVSIiwiU1RBUkJPQVJEX1RJVExFQkFSIiwiU1RBUkJPQVJEX0NPTlRFTlRfQ09OVEFJTkVSIiwiU1RBUkJPQVJEX0JPVFRPTV9UT09MQkFSIiwiU1RBUkJPQVJEX1NUQVRVU0JBUiIsIlNUQVJCT0FSRF9WSUVXVFJJR0dFUkJBUiIsIlNUQVJCT0FSRF9IRUFETElORSIsIlNUQVJCT0FSRF9CVVRUT05CQVIiLCJTVEFSQk9BUkRfQlVUVE9OIiwiU1RBUkJPQVJEX0NMT1NFIiwiU1RBUkJPQVJEX0NPTlRFTlRfQkFTRUxBWUVSU1dJVENIRVIiLCJTVEFSQk9BUkRfQkFTRUxBWUVSVFJFRSIsIlNUQVJCT0FSRF9MQVlFUlRSRUUiLCJTVEFSQk9BUkRfQ09OVEVOVF9MQVlFUlNXSVRDSEVSIiwiU1RBUkJPQVJEX0xPQ1NUWUxFIiwiU1RBUkJPQVJEX0xPQ1NUWUxFX1BPSU5UIiwiU1RBUkJPQVJEX0xPQ1NUWUxFX1NRVUFSRSIsIlNUQVJCT0FSRF9MT0NTVFlMRV9TVEFSIiwiU1RBUkJPQVJEX0xPQ1NUWUxFX1giLCJTVEFSQk9BUkRfTE9DU1RZTEVfQ1JPU1MiLCJTVEFSQk9BUkRfTE9DU1RZTEVfVFJJQU5HTEUiLCJUT09MVElQX1BPUFVQIiwiWk9PTV9MRVZFTCIsIk9MX0NPTlRST0wiLCJPTF9VTlNFTEVDVEFCTEUiLCJPTF9PVkVSTEFZQ09OVEFJTkVSIiwiT0xfT1ZFUkxBWUNPTlRBSU5FUl9TRSIsIk9MX1ZJRVdQT1JUIiwiT0xfWk9PTSIsIk9MX1pPT01fSU4iLCJPTF9aT09NX0VYVCIsIk9MX1pPT01fSE9NRSIsIk9MX1pPT01fUE9TIiwiT0xfWk9PTV9XSVRIX0VYVCIsIk9MX1pPT01fV0lUSF9IT01FIiwiT0xfWk9PTV9XSVRIX1BPUyIsIk9MX1pPT01fU0xJREVSIiwiT0xfWk9PTV9XSVRIX1NMSURFUiIsIlpvb21sZXZlbCIsInVwZGF0ZVpvb21sZXZlbCIsImNsYXNzTmFtZSIsInVuZGVmaW5lZEhUTUwiLCJtYXBWaWV3IiwiaW5uZXJIVE1MIiwib24iLCJDb250cm9sIiwiY2FsbCIsInRhcmdldCIsImxhbmdDb25zdGFudHMiLCJNYXBzQ29udHJvbHMiLCJjb250cm9scyIsImxlZnRTbGlkZUVsZW1lbnRzIiwicmlnaHRTbGlkZUVsZW1lbnRzIiwiY29udHJvbENvbnRhaW5lclRvcExlZnQiLCIkb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQiLCJwcmVwZW5kIiwiY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQiLCJhZnRlciIsImNvbnRyb2xDb250YWluZXJUb3BSaWdodCIsImNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodCIsImJ1dHRvbnMiLCJsYXllcnN3aXRjaGVyIiwiYmFzZWxheWVyc3dpdGNoZXIiLCJsZWdlbmQiLCJtZWFzdXJldG9vbHMiLCJwZXJtYWxpbmsiLCJzb3J0QnkiLCJhIiwiYiIsImJ1dHRvbiIsIm92bVRhcmdldCIsImFwcGVuZCIsImdlb3BpY2tlciIsIkdlb1BpY2tlciIsIm1hcENvbnRhaW5lciIsImFkZEludGVyYWN0aW9uIiwiaW5wdXRfZ2VvX3giLCJnZW94RmllbGQiLCJzdWJzdHJpbmciLCJnZW95RmllbGQiLCJpbnB1dF9nZW9feSIsImxvY0dlb3giLCJsb2NHZW95IiwibnVtZXJpemVkIiwidHJhbnNmb3JtZWQiLCJzZXRDZW50ZXIiLCJHZW9QaWNrZXJHZW9KU09OIiwiY2ZnX2xvZ28iLCJsb2dvTGluayIsImhyZWYiLCJ0aXRsZSIsInJlbCIsImxvZ29HcmFwaGljIiwiYWx0IiwiYXBwZW5kQ2hpbGQiLCJzY2FsZWxpbmUiLCJTY2FsZUxpbmUiLCJhZGRDb250cm9sIiwiem9vbWxldmVsIiwibW91c2Vwb3NpdGlvbiIsImNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViIiwiTW91c2VQb3NpdGlvbiIsImNvb3JkaW5hdGVGb3JtYXQiLCJ0b1N0cmluZ0hETVMiLCJhdHRyT3B0aW9ucyIsInRpcExhYmVsIiwiY29sbGFwc2VMYWJlbCIsImRpdiIsImNvbGxhcHNpYmxlIiwiYWx3YXlzX3Nob3ciLCJBdHRyaWJ1dGlvbiIsInNldENvbGxhcHNlZCIsImdldExhbmd1YWdlIiwibGFuZyIsImZyZWVoYW5kIiwiJGZpZWxkR2VvSlNPTiIsImlucHV0X2dlb2pzb24iLCJ2YWwiLCJhZGRGZWF0dXJlIiwiY2xlYXIiLCJzdHJGZWF0dXJlIiwid3JpdGVGZWF0dXJlIiwiRHJhdyIsImxhdCIsImxvbiIsImxhdElkeCIsImxvbklkeCIsImxhdFJuZCIsImxvblJuZCIsImhhbmRsZUV2ZW50IiwiJGZpZWxkR2VvWCIsIiRmaWVsZEdlb1kiLCJvcHRpY0xheWVyU291cmNlIiwib3B0aWNMYXllclZlY3RvciIsImdlb1BpY2tlclN0eWxlRnVuY3Rpb24iLCJvcHRpY0xheWVyRmVhdHVyZSIsImFub255bW91cyIsInJvdW5kIiwicmFuZG9tIiwicGlja2VyQ29sb3IiLCJnZW9Mb2NhdGlvbiIsInNldFRyYWNraW5nIiwid2hpdGUiLCJyZXN1bHQiLCJtYXBCcm93c2VyRXZlbnQiLCJkaXNhYmxlQ2xpY2tFdmVudCIsImRpc2FibGVkIiwicGljayIsImNvb3JkaW5hdGUiLCJhcnJMYXRMb24iLCJjaGFuZ2UiLCJJbnRlcmFjdGlvbiIsIk1hcEhvdmVyIiwiYWN0aXZhdGUiLCJsaXN0ZW5lcktleSIsImxhc3RGZWF0dXJlU3R5bGUiLCJsYXN0SG92ZXJlZEZlYXR1cmUiLCJob3ZlclRvb2x0aXAiLCJUb29sdGlwUG9wVXAiLCJvZmZzZXQiLCJvcmllbnRhdGlvbiIsInRvb2x0aXBPcmllbnRhdGlvbiIsImhvcml6b250YWwiLCJjbG9zZWFibGUiLCJnZXRIb3ZlckZ1bmN0aW9uIiwiaG92ZXJlZCIsImNsdXN0ZXJlZCIsInRvb2x0aXBDb250ZW50IiwidG9vbHRpcEhlbHBlciIsInRvb2x0aXBMZW5ndGgiLCJmb3JFYWNoRmVhdHVyZUF0UGl4ZWwiLCJwaXhlbCIsImdldFJlc29sdXRpb24iLCJxdWVyeVNlbGVjdG9yIiwiaG92ZXJfcG9wdXBzIiwiaG92ZXJfcG9wdXBzX3N0YXkiLCJjNGdNYXBzUG9wdXAiLCIkcG9wdXAiLCJsYXN0TGF5ZXJTdHlsZSIsImdldEZlYXR1cmVzIiwidG9vbHRpcF9sZW5ndGgiLCJzaW5nbGVUb29sdGlwIiwicmVwbGFjZUFsbFBsYWNlaG9sZGVycyIsImRlY29kZUdlb0pzb25Qcm9wZXJ0eSIsInNldFBvc2l0aW9uIiwic2V0Q29udGVudCIsInBvcHVwSW5mb3MiLCJjb29yZCIsImdldENvb3JkaW5hdGVGcm9tUGl4ZWwiLCJwb3B1cENvbnRyb2xsZXIiLCJhZGRQb3BVcCIsInBvcHVwSGFuZGxpbmciLCIkY29udGVudCIsImh0bWwiLCJhc3luYyIsIm9ialBvcHVwIiwicHJveHlfZmlsbFBvcHVwIiwic2V0UG9wdXAiLCJhcGlfaW5mb3dpbmRvd191cmwiLCJwb3B1cEluZm8iLCJyb3V0aW5nX2xpbmsiLCJjbG9zZSIsIlNwaW5uZXIiLCJzcGlubmVyU3BhbiIsImFkZGl0aW9uYWxBY3RpdmF0aW9uQ291bnRlciIsImFkZENsYXNzTmFtZSIsImNsb3NlQnV0dG9uIiwicG9zaXRpb24iLCJjbGljayIsImNvbnRlbnRDb250YWluZXIiLCJPdmVybGF5IiwiaW5zZXJ0Rmlyc3QiLCJwb3NpdGlvbmluZyIsImFkZE92ZXJsYXkiLCJjbG9zZUZ1bmN0aW9uIiwicmVtb3ZlT3ZlcmxheSIsImdldFBvc2l0aW9uIiwiY29vcmRpbmF0ZXMiLCJpc01vYmlsZSIsInRlc3QiLCJ1c2VyQWdlbnQiLCJ2ZW5kb3IiLCJvcGVyYSIsInRyYW5zbGF0ZSIsImZuU3RhbmRhcmRJbmZvUG9wdXAiLCJhdHRyIiwiZ2V0UHJvcGVydGllcyIsImZuSGVhZGVyIiwiZm5Db250ZW50IiwiZm5Gb290ZXIiLCJmblJlZHVjZWRJbmZvUG9wdXAiLCJjIiwiZCIsImYiLCJnZXRTcmMiLCJhbWVuaXR5IiwidG91cmlzbSIsImhpc3RvcmljIiwibGVpc3VyZSIsImFlcmlhbHdheSIsInNwb3J0IiwicmFpbHdheSIsIndhdGVyX3BhcmsiLCJmbkdldFRyYW5zbGF0ZV9UeXBlIiwic3FrbSIsInBob25lIiwiZmF4IiwiZW1haWwiLCJvcGVuaW5nX2hvdXJzIiwid2Vic2l0ZSIsIndpa2lwZWRpYSIsIndpa2ltZWRpYV9jb21tb25zIiwiaW50ZXJuZXRfYWNjZXNzIiwid2hlZWxjaGFpciIsImNlbnRyYWxrZXkiLCJub3RlIiwiZGVzY3JpcHRpb24iLCJvcGVyYXRvciIsInJlZiIsImxpdCIsInNob3AiLCJicmFuZCIsInNlbGxzIiwib3JpZ2luIiwid2hvbGVzYWxlIiwiaGVhbHRoY2FyZSIsImVtZXJnZW5jeSIsImVtZXJnZW5jeV9zZXJ2aWNlIiwid2F0ZXJ3YXkiLCJoaWdod2F5IiwicmVjeWNsaW5nX3R5cGUiLCJmcm96ZW5feW9ndXJ0Iiwic2x1c2hfaWNlIiwiY2FrZSIsImNvZmZlZSIsImRyaW5rcyIsImN1aXNpbmUiLCJ6b28iLCJjbHViIiwiYnVpbGRpbmciLCJsYW5kdXNlIiwiZGlhcGVyIiwiZGlwbG9tYXRpYyIsIndhdGVyaW5nX3BsYWNlIiwid2FzdGUiLCJvcGVuZmlyZSIsImZpcmVwbGFjZSIsInZlbmRpbmciLCJhYmFuZG9uZWQiLCJtaWxpdGFyeSIsImhpc3RvcmljX3VzYWdlIiwiY2FzdGxlX3R5cGUiLCJ0b21iIiwib2ZmaWNlIiwicGxhY2UiLCJiaWN5Y2xlIiwib25ld2F5IiwicGFya19yaWRlIiwiY3Jvc3NpbmciLCJ0cmFmZmljX2NhbG1pbmciLCJyZXQiLCJ2b2x0YWdlIiwiY2FyIiwidHVubmVsIiwiYnJpZGdlIiwic29jaWFsX2ZhY2lsaXR5IiwiYnJld2VyeSIsImdhbWJsaW5nIiwicGV0IiwiY3JhZnQiLCJtaWNyb2JyZXdlcnkiLCJyZW50YWwiLCJlbnRyYW5jZSIsIm5hdHVyYWwiLCJib3VuZGFyeSIsIm1vdW50YWluX3Bhc3MiLCJ3YXRlciIsInJvdXRlIiwibW9vcmluZyIsIm1hbl9tYWRlIiwiaGlraW5nIiwiaW5mb3JtYXRpb24iLCJsb2NrIiwiY29uc3RydWN0aW9uIiwibGlnaHRfc291cmNlIiwiZHJpbmtpbmdfd2F0ZXIiLCJhYnV0dGVycyIsInBvd2VyX3NvdXJjZSIsInBvd2VyIiwibGluZSIsImJhcnJpZXIiLCJmZW5jZV90eXBlIiwid2FsbCIsImRlc2lnbmF0aW9uIiwiYWVyb3dheSIsInB1YmxpY190cmFuc3BvcnQiLCJidXMiLCJlbGVjdHJpZmllZCIsImhhcmJvdXIiLCJhbmltYWwiLCJhbmltYWxfc2hlbHRlciIsImFuaW1hbF9ib2FyZGluZyIsImJpcmRzX25lc3QiLCJmbkNvbnRlbnRHZW5lcmFsSW5mb3JtYXRpb25zIiwiZm5Db250ZW50SGVhbHRoY2FyZSIsImZuQ29udGVudEFlcm9kcm9tZSIsImZuQ29udGVudEN1aXNpbmUiLCJmbkNvbnRlbnRTaGlwcGluZyIsImZuQ29udGVudEh5ZHJhbnRzIiwiZm5Db250ZW50U3BvcnRzIiwiZm5Db250ZW50U3RyZWV0c1RyYWZmaWMiLCJmbkNvbnRlbnRJbmZvcm1hdGlvbkNpdHkiLCJmbkNvbnRlbnRFbWVyZ2VuY3kiLCJmbkNvbnRlbnRTdG9yYWdlIiwiZm5Db250ZW50QW1lbml0eSIsImZuQ29udGVudFRvdXJpc20iLCJmbkNvbnRlbnRSb3V0ZSIsImZuQ29udGVudFBldHJvbCIsImZuQ29udGVudEJhcnJpZXJzIiwiZm5Db250ZW50TGFuZHVzZSIsImZuQ29udGVudE5hdHVyYWwiLCJmbktsb3N0ZXJBZGRpdGlvbmFsIiwiZm5TaWNoZXJoZWl0QWRkaXRpb25hbCIsImZuQWRkaXRpb25hbEJ1aWxkaW5nSW5mb3MiLCJmbktyYWZ0d2Vya0luZm8iLCJmbk1lc3NzdGF0aW9uIiwiZm5XZXJ0c3RvZmZpbmZvIiwiZm5Db250ZW50UHJvdGVjdGVkQXJlYSIsImFlcm9kcm9tZSIsImlhdGEiLCJpY2FvIiwiZm9yZXN0Iiwid29vZCIsImxlYWZfdHlwZSIsImdlbnVzIiwic3BlY2llcyIsImRlbm90YXRpb24iLCJtb251bWVudCIsInN0YXR1cyIsInByb3RlY3RfY2xhc3MiLCJwcm90ZWN0X2lkIiwicmVzb3VyY2UiLCJhbmltYWxfa2VlcGluZyIsInJvdW5kdHJpcCIsInN5bWJvbCIsImZ1ZWwiLCJmbkNvbnRlbnRIaXN0b3JpYyIsInNpdGVfdHlwZSIsIm1hdGVyaWFsIiwiZG9nIiwic3RhcnMiLCJjYXJhdmFucyIsIndhc2hpbmdfbWFjaGluZSIsImRyeWVyIiwiZ3JvdXBfb25seSIsImNhbXBfc2l0ZSIsIm1hcF90eXBlIiwibWFwX3NpemUiLCJib2FyZF90eXBlIiwiYm9hdHR5cGUiLCJjb3VudHJ5IiwiY29sbGVjdGlvbl90aW1lcyIsImRyaXZlX3Rocm91Z2giLCJjb250ZW50cyIsInN0b3JhZ2UiLCJwb3B1bGF0aW9uIiwibGlmZWJvYXQiLCJ2aGZfY2hhbm5lbCIsIm1tc2kiLCJtb3RvcmJvYXQiLCJDRU1UIiwiaW50ZXJtaXR0ZW50IiwidGlkYWwiLCJkcmFmdCIsIm9wZXJhdGluZyIsInZlaGljbGUiLCJmbldyZWNrSW5mbyIsImZlcnJ5IiwibW90b3JjYXIiLCJtb3Rvcl92ZWhpY2xlIiwiaGd2IiwiZm9vdCIsIndhdGVyX3ZvbHVtZSIsImZsb3dfcmF0ZSIsIndhdGVyX3NvdXJjZSIsImJyaWRnZV9yZWYiLCJzdGFydF9kYXRlIiwibWF4d2VpZ2h0IiwidG9sbCIsInN1cmZhY2UiLCJ0cmFja3R5cGUiLCJtb3RvcmN5Y2xlIiwidHJhaWxfdmlzaWJpbGl0eSIsInNhY19zY2FsZSIsIm1heHNwZWVkIiwib3ZlcnRha2luZyIsIm5vZXhpdCIsInByaW9yaXR5X3JvYWQiLCJmZWUiLCJ1aWNfcmVmIiwiZm5Bcnp0SW5mbyIsImhlYWx0aF9zcGVjaWFsdHkiLCJtYXh3aWR0aCIsIm1heGhlaWdodCIsIm1pbl9hZ2UiLCJtYXhfYWdlIiwibnVkaXNtIiwicnVpbnMiLCJlbGUiLCJjYWZlIiwiYnJlYWtmYXN0Iiwic25hY2siLCJpbmRvb3Jfc2VhdGluZyIsIm91dGRvb3Jfc2VhdGluZyIsInNlbGZfc2VydmljZSIsImJha2Vob3VzZSIsInBhc3RyeV9zaG9wIiwiZmFpcl90cmFkZSIsIm1lZGljYWxfYXJlYSIsImRpc3BlbnNpbmciLCJzdXJ2ZWlsbGFuY2UiLCJhY2Nlc3MiLCJyZWxpZ2lvdXNfcmFuayIsInNocmluZSIsInNhbmN0dWFyeSIsInJlbGlnaW9uIiwiZGVub21pbmF0aW9uIiwiY29tbXVuaXR5IiwiZm5UZXN0SW5mb1BvcHVwIiwiZmFocnplaXQiLCJNYXBQcm94eSIsImhvb2tfbGF5ZXJfdmlzaWJpbGl0eSIsImhvb2tfbWFwX2NsaWNrIiwicHJveHlfbGF5ZXJfbG9hZGVkIiwicHJveHlfbGF5ZXJfZHJhd24iLCJsYXllcklkcyIsImFjdGl2ZUxheWVySWRzIiwicmVxdWVzdEZ1bmN0aW9ucyIsImFwaSIsInByb2ZpbGUiLCJhcGlfbGF5ZXJjb250ZW50X3VybCIsImxheWVyY29udGVudCIsImluZm93aW5kb3ciLCJjbGlja09ic2VydmVyQWN0aXZlIiwiYmFzZWxheWVyQ29udHJvbGxlciIsImxvYWRCYXNlTGF5ZXJzIiwibG9hZExheWVycyIsIkM0Z1BvcHVwQ29udHJvbGxlciIsImNhY2hpbmciLCJzdG9yZVZhbHVlIiwiZXZ0IiwibWFwX2NlbnRlcl9jaGFuZ2VkIiwiY2xpY2tFdmVudCIsImZGZWF0dXJlcyIsIm5ld0NlbnRlciIsInN0eWxlRnVuYyIsInN0eWxlQ2x1c3RlciIsImNsdXN0ZXJfem9vbSIsInJlbW92ZUZlYXR1cmUiLCJjZiIsInBpeCIsImNsdXN0RGlzdGFuY2UiLCJjbHVzdGVyX2Rpc3Rfc3BpZGVyIiwiYXJyTGluZXN0cmluZyIsInIiLCJwIiwic2luIiwiY29zIiwiZmVhdHVyZUxpbmVzdHJpbmciLCJMaW5lU3RyaW5nIiwic3RyaW5nU291cmNlIiwic3RyaW5nU3R5bGUiLCJzdHJpbmdMYXllciIsIm1hcHNDb250cm9scyIsImlzT3BlbiIsInBvcHVwQ29udGVudCIsInJlcGxhY2VGdW5jdGlvblBsYWNlaG9sZGVycyIsImxpbmsiLCJsYXN0SW5kZXhPZiIsInN1YlN0ciIsImZlYXR1cmVFbGVtZW50IiwidG9Mb3dlckNhc2UiLCJsaW5rX25ld3dpbmRvdyIsIm9wZW4iLCJmdW5jIiwiY29tYmluZUxheWVycyIsInVuIiwibmVlZGVkTGF5ZXJTdHlsZXMiLCJnZXRMYXllclN0eWxlcyIsImsiLCJjb250ZW50RGF0YUxheWVyIiwibGF5ZXJHcm91cHMiLCJzdHlsZXMiLCJvbmVGZWF0dXJlIiwiY2x1c3RlclNvdXJjZSIsImM0ZyIsIm1hcHMiLCJzdHlsZUZvckNsdXN0ZXIiLCJhbGxMYXllcnMiLCJtaXNzaW5nTGF5ZXIiLCJjbHVzdGVycyIsIm9wdF96b29tIiwibGF5ZXJDb250ZW50IiwicG9wdXBGdW5jdGlvbnMiLCJwb3B1cEZ1bmN0aW9uc0RFIiwicG9wdXBGdW5jdGlvbnNFTiIsImNhcGl0YWxpemVGaXJzdExldHRlciIsInN0cmluZyIsInRvVXBwZXJDYXNlIiwiZW5jb2RlR2VvSnNvblByb3BlcnR5IiwiaW5wdXQiLCJvdXRwdXQiLCJyZW1vdmVVbWxhdXRzIiwic2V0VXJsUGFyYW0iLCJwYXJhbSIsIm9wdF9nZXRLZXkiLCJvcHRfZXhlY3V0ZSIsInNlYXJjaFBhcmFtIiwicGFyYW1SZXBsYWNlZCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJoYXNoIiwibWF0Y2giLCJvcmlnaW5TdHJpbmciLCJnZXRVcmxQYXJhbSIsInJlZ0V4IiwiUmVnRXhwIiwiZXhlYyIsImRlbHRhRW5jb2RlIiwiYXJySW5wdXQiLCJhcnJPdXRwdXQiLCJKU0JJIiwidG9OdW1iZXIiLCJzdWJ0cmFjdCIsIkJpZ0ludCIsImRlbHRhRGVjb2RlIiwiYWRkIiwiYXJySG9va0Z1bmN0aW9ucyIsInBhcmFtZXRlcnMiLCJhcnJSZXN1bHQiLCJ0bXBSZXN1bHQiLCJoZXgiLCJvcHRfb3BhY2l0eSIsIm9wdF9hcnJheSIsImJpZ2ludCIsImciLCJnZXRTaW5nbGVDb29yZGluYXRlRm9yR2VvbSIsIngiLCJ5IiwiZ2V0Rmlyc3RDb29yZGluYXRlIiwiZ2V0TGFzdENvb3JkaW5hdGUiLCJtZWFzdXJlR2VvbWV0cnkiLCJvcHRfZm9yY2VMaW5lTWVhc3VyZSIsIm9wdF9mb3JjZVN1cmZhY2VNZWFzdXJlIiwic3BoZXJlIiwiY29vcmQxIiwiY29vcmQyIiwicmF3VmFsdWUiLCJ0b0ZpeGVkIiwiaHRtbFZhbHVlIiwiYWJzIiwiZWRnZUNvb3JkaW5hdGUiLCJnZXRFeHRlbnRGb3JHZW9tZXRyaWVzIiwiYXJyR2VvbWV0cmllcyIsImV4dGVudFNvdXJjZSIsImZpdFRvRXh0ZW50cyIsImV4dGVudHMiLCJvcHRfcGFkZGluZyIsIm9wdF9hbmltYXRpb25EdXJhdGlvbiIsImZpdFRvRXh0ZW50Iiwib3B0X21pblpvb20iLCJvcHRfbWF4Wm9vbSIsIm9wdF9taW5SZXNvbHV0aW9uIiwiZml0T3B0aW9ucyIsIm1pblJlc29sdXRpb24iLCJhbmltYXRlIiwic3RySW5wdXQiLCJvcHRfbGF5ZXIiLCJzdHJPdXRwdXQiLCJyZXBsYWNlRWRpdG9yVmFyc1BsYWNlaG9sZGVycyIsInJlcGxhY2VBdHRyaWJ1dGVQbGFjZWhvbGRlcnMiLCJmdW5jdGlvbk5hbWUiLCJzdHlsZVNyYyIsImxvY3N0eWxlQXJyIiwiZXZLZXkiLCJlZGl0b3JWYXJzIiwib2JqZWN0VG9BcnJheSIsIm9iamVjdCIsIk9iamVjdCIsImtleXMiLCJnZXRWZWN0b3JMYXllciIsImZuU3R5bGUiLCJnZXRDdXJyZW50U3ViZG9tYWluIiwiZ2V0Q3VycmVudERvbWFpbiIsImRvbWFpbiIsImhvc3RuYW1lIiwiYXJyRG9tYWluIiwiZ2V0VmFsdWUiLCJsb2NhbFN0b3JhZ2UiLCJkZWNvZGVIVE1MIiwidHh0Iiwib3ZlcmxheUlkIiwib3ZlcmxheUxheWVyQ29uZmlnIiwib3NtU291cmNlQ29uZmlncyIsInN0YW1lblNvdXJjZUNvbmZpZ3MiLCJvdmVybGF5TGF5ZXIiLCJUaWxlIiwiaXNTZWN1cmUiLCJvYmpTb3VyY2UiLCJvdmVybGF5QXJyIiwic2V0T3BhY2l0eSIsInRvSHVtYW5EaXN0YW5jZSIsImRpc3RhbmNlSW5NZXRlcnMiLCJodW1hbkRpc3RhbmNlIiwidG9IdW1hblRpbWUiLCJ0aW1lSW5TZWNvbmRzIiwic2Vjb25kcyIsIm1pbnV0ZXMiLCJob3VycyIsImh1bWFuVGltZSIsIlJvdXRpbmdQZXJtYWxpbmsiLCJfcm91dGVyIiwibGlua0ZyYWdtZW50cyIsInJhd0ZyYWdtZW50cyIsInVwZGF0ZVVybCIsImZyYWdtZW50cyIsIm1vZGUiLCJhZGRyZXNzQXJlYSIsImRldG91ckFyZWEiLCJzZWFyY2hUeXBlIiwiZm9yY2VTdGFydCIsImNvbXBsZXRlVXJsIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImZyb21BZGRyZXNzIiwidG9BZGRyZXNzIiwiZGV0b3VyUm91dGUiLCJpbml0aWFsUGFyYW1zIiwiY2hlY2tGb3JPbGRQYXJhbXMiLCJhcnJQYXJhbXMiLCJwYWlyIiwib2JqUGFyYW1zIiwicm91dGVyTGF5ZXJzIiwiZGVzaXJlZEJ1dHRvbiIsIm9iaiIsImlubmVyS2V5Iiwic2luZ2xlRW50cnkiLCJjbXBWYWx1ZSIsInMiLCJtYXBMYWJlbCIsImRlc2lyZWRCdXR0b25Sb3V0aW5nIiwibSIsImhhbmRsZUluaXRpYWxBcmVhU2VhcmNoIiwiaGFuZGxlSW5pdGlhbFJvdXRlU2VhcmNoIiwic3RyUGFyYW1zIiwiYXJyRnJhZ21lbnRzIiwicGVyZm9ybUdlb1NlYXJjaCIsImZyb21Db29yZHMiLCJ0b0Nvb3JkcyIsImpvaW4iLCJjb29yZHMiLCJzZXRTdGF0ZSIsImRldG91ciIsInNlYXJjaHR5cGUiLCJ1cGRhdGVMaW5rRnJhZ21lbnRzIiwic2V0QXJlYVBvaW50IiwiYWYiLCJlbGVtIiwiYXQiLCJ0b2dnbGVEZXRvdXJSb3V0ZSIsInRyaWdnZXIiLCJzZXRSb3V0ZUZyb20iLCJzZXRSb3V0ZVRvIiwiQXV0b2NvbXBsZXRlSW5wdXQiLCJsaXN0ZW5lclJlZ2lzdGVyZWQiLCJzdWJtaXRGdW5jdGlvbiIsImZpZWxkIiwiJCIsImNzc0lkIiwicGVyZm9ybVNlYXJjaENhbGxiYWNrIiwicGVyZm9ybUFyZWEiLCJwZXJmb3JtVmlhUm91dGUiLCJwZXJmb3JtU2VhcmNoIiwiZW50ZXJMaXN0ZW5lciIsIm9wdF90aGlzIiwia2V5Q29kZSIsImN1cnJlbnRUYXJnZXQiLCJvYmpGdW5jdGlvbnMiLCJkZWxldGVGdW5jdGlvbiIsImNvdW50ZXIiLCJub3ciLCJvYmpTZXR0aW5ncyIsInByb3h5VXJsIiwia2V5QXV0b2NvbXBsZXRlIiwiYXV0b2NvbXBsZXRlQWRkcmVzcyIsImFyck5hbWVzIiwiY29udGFpbmVyQWRkcmVzc2VzIiwiYXJyRnJvbU5hbWVzIiwiYXJyVG9OYW1lcyIsImFyck92ZXJOYW1lcyIsImFyckFyZWFOYW1lcyIsImlucHV0RmllbGQiLCJhdXRvY29tcGxldGUiLCJ1aSIsInNlbGVjdExpc3RlbmVyIiwiY3NzQ2xhc3MiLCJvYmpDZW50ZXIiLCJiQm94IiwiZ2Vvc2VhcmNoUGFyYW1zIiwiYXJyQWRkcmVzc2VzIiwiaXNJbkJvdW5kaW5nQm94IiwiZGlzdCIsImFyckZyb21Qb3NpdGlvbnMiLCJwb3MiLCJhcnJUb1Bvc2l0aW9ucyIsImFyck92ZXJQb3NpdGlvbnMiLCJhcnJBcmVhUG9zaXRpb25zIiwiRXZlbnQiLCJsb25naXR1ZGUiLCJsYXRpdHVkZSIsIkNvbXBvbmVudCIsIkdlb1NlYXJjaFJlc3VsdHMiLCJSZWFjdCIsImxhenkiLCJUaXRsZWJhciIsIkdlb1NlYXJjaCIsImNsaWNrQ29udHJvbCIsImRvbmVGdW5jdGlvbiIsInNldEF0dHJpYnV0ZSIsImV4dGVybmFsIiwiY29udHJvbCIsInNlYXJjaEtleSIsInNlYXJjaFpvb20iLCJ6b29tYm91bmRzIiwiem9vbUJvdW5kcyIsInF1aWNrc2VhcmNoIiwibWFya1Jlc3VsdCIsImFuaW1hdGVEdXJhdGlvbiIsInJlc3VsdER1cmF0aW9uIiwiYXV0b3BpY2siLCJyZXN1bHRzIiwicmVzdWx0U3R5bGUiLCJyZXN1bHRDb3VudCIsInBsYWNlaG9sZGVyIiwicXVlcnkiLCJjdXJyZW50Q29vcmRpbmF0ZSIsIm9wZW5SZXN1bHRzIiwiY3VycmVudFJlc3VsdCIsImlucHV0Q2FsbGJhY2siLCJzdGFydFNlYXJjaCIsImNsb3NlUmVzdWx0cyIsImNsb3NlUmVzdWx0c0NvbXBsZXRlbHkiLCJtb2RlQ2xhc3MiLCJleHREaXYiLCJpZHgiLCJyZXN1bHRzSGVhZGxpbmUiLCJyZXN1bHRzRGl2IiwiY2xvc2VCdG5DbGFzcyIsImNsb3NlQnRuQ2IiLCJoZWFkbGluZSIsInByZXZQcm9wcyIsInByZXZTdGF0ZSIsInNuYXBzaG90Iiwic2V0T3BlbkNvbXBvbmVudCIsInBhbmVsVmFsIiwiY29uc3RydWN0b3IiLCJzdG9wUHJvcGFnYXRpb24iLCJibHVyIiwiaWdub3JlIiwic2VhcmNoSW5wdXQiLCJmaW5kTG9jYXRpb24iLCJ3aGljaCIsInNlYXJjaENvbnRhaW5lciIsImRldGFpbE9wZW5SZXN1bHRzIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJxIiwibGltaXQiLCJhcnJSZXN1bHRzIiwiaG9va19zZWFyY2giLCJjb29yZERpZiIsImRpZkNvbnRleHQiLCJ2aWV3RXh0ZW50Iiwib3NtRXh0ZW50Iiwiem9vbVR5cGUiLCJmbHlUbyIsImNvbXBsZXRlU2VhcmNoIiwiYm91bmRpbmdfYm94IiwiYWxlcnQiLCJib3VuZGluZ2JveCIsInBhcnRzIiwiY2FsbGVkIiwiY2FsbGJhY2siLCJ2aWV3Rml0IiwiZWFzaW5nIiwiZWFzZU91dCIsImFkZE1hcmtlciIsIm1hcmtlclNvdXJjZSIsIm1hcmtlckxheWVyIiwiYW5pbWF0ZU1hcmtlciIsInNuYXBUb1BpeGVsIiwiYW5pbWF0aW9uU3RlcCIsImdldFRpbWUiLCJ2ZWN0b3JDb250ZXh0IiwiZnJhbWVTdGF0ZSIsImVsYXBzZWQiLCJlbGFwc2VkUmF0aW8iLCJmbGFzaEdlb20iLCJ0aW1lIiwibWFya2VyIiwiZHJhd0dlb21ldHJ5IiwiY2FsY3VsYXRlRXh0ZW50IiwiRmVhdHVyZUZpbHRlciIsIkJhc2VsYXllclN3aXRjaGVyIiwiU3RhcmJvYXJkUGFuZWwiLCJJbmZvcGFnZSIsIk1lYXN1cmV0b29scyIsIlBlcm1hbGluayIsIlpvb20iLCJab29tRXh0ZW50IiwiWm9vbUhvbWUiLCJab29tUG9zaXRpb24iLCJHcmlkIiwiUm90YXRlIiwiRnVsbHNjcmVlbiIsIlByaW50IiwiT3ZlcnZpZXdNYXAiLCJFZGl0b3JDb21wb25lbnQiLCJsYW5nUm91dGVDb25zdGFudHMiLCJNYXBDb250cm9sbGVyIiwib3BlbkNvbXBvbmVudCIsIm9ialRhYkxheWVycyIsImFyclRhYkxheWVyU3RhdGVzIiwiY2hhbmdlQWN0aXZlTGF5ZXJzIiwic2V0VGFiU3RhdGVzIiwiY2hhbmdlQ29sbGFwc2VTdGF0ZSIsImludGVyYWN0aW9ucyIsImRpc3BsYXlBbGxMb2NhdGlvbnMiLCJkb21NYXBEaXYiLCJraW5ldGljIiwic3RhcmJvYXJkX2xhYmVsIiwiZW5hYmxlU3RhcmJvYXJkIiwiYWRkSWRUb0RpdiIsIm1hcERpdiIsImluZm9wYWdlIiwiYWNjb3VudCIsImdldF9wYXJhbWV0ZXIiLCJNb29Ub29scyIsIkJyb3dzZXIiLCJEb2N1bWVudCIsImlzTmFOIiwiY29tcG9uZW50cyIsImhpZGVPdGhlckNvbXBvbmVudHMiLCJoaWRlT3RoZXJCb3R0b21Db21wb25lbnRzIiwiY3VycmVudFBlcm1hbGluayIsIndpdGhvdXRHZW5lcmF0b3IiLCJyZXN0cl9ib3R0b21sZWZ0X2xvbiIsInJlc3RyX2JvdHRvbWxlZnRfbGF0IiwicmVzdHJfdG9wcmlnaHRfbG9uIiwicmVzdHJfdG9wcmlnaHRfbGF0IiwiVmlldyIsImdlb2xvY2F0aW9uIiwiR2VvbG9jYXRpb24iLCJ0cmFja2luZyIsImdldFByb2plY3Rpb24iLCJnZW9sb2NhdGlvbl96b29tIiwiTWFwIiwiR3JvdXAiLCJjaGVja1N1bSIsImxvYWRUaWxlc1doaWxlQW5pbWF0aW5nIiwibWFyZ2luIiwiYXJyTWFyZ2lucyIsInJpZ2h0TWFyZ2luIiwibGVmdE1hcmdpbiIsImZpZWxkc2V0SGVpZ2h0IiwicGFyZW50RWxlbWVudCIsIm9mZnNldEhlaWdodCIsIm1pbkhlaWdodCIsIm1heFdpZHRoIiwidXBkYXRlU2l6ZSIsImluaXRpYWxpemUiLCJtYXBIb3ZlciIsIm1vdXNlX25hdiIsImRyYWdfcGFuIiwiS2luZXRpYyIsIkRyYWdQYW4iLCJ3aGVlbF96b29tIiwiTW91c2VXaGVlbFpvb20iLCJkb3VibGVjbGlja196b29tIiwiRG91YmxlQ2xpY2tab29tIiwiZHJhZ196b29tIiwiRHJhZ1pvb20iLCJjb25kaXRpb24iLCJzaGlmdEtleU9ubHkiLCJyb3RhdGUiLCJjdXN0b21Db25kaXRpb24iLCJicm93c2VyRXZlbnQiLCJvcmlnaW5hbEV2ZW50IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiRHJhZ1JvdGF0ZUFuZFpvb20iLCJ0b3VjaF9uYXYiLCJQaW5jaFJvdGF0ZSIsIlBpbmNoWm9vbSIsImNvbnN0cmFpblJlc29sdXRpb24iLCJrZXlib2FyZF9uYXYiLCJwYW4iLCJLZXlib2FyZFBhbiIsIktleWJvYXJkWm9vbSIsImluaXQiLCJyZWFjdENvbnRhaW5lciIsImJhc2VsYXllckNvbnRhaW5lciIsImZpbHRlckRpdiIsImZpbHRlckNvbnRhaW5lciIsIlJlYWN0RE9NIiwicmVuZGVyIiwiaW5mb1BhZ2VDb250YWluZXIiLCJtZWFzdXJldG9vbHNDb250YWluZXIiLCJwZXJtYWxpbmtDb250YWluZXIiLCJvdmVydmlld21hcCIsIm92ZXJ2aWV3Q29udGFpbmVyIiwidGhlbWVEYXRhIiwibWFwV2lkdGgiLCJtYXBIZWlnaHQiLCJkaXZIZWlnaHQiLCJzZXRQcm9wZXJ0eSIsIm1haW5Db2xvciIsImZvbnRDb2xvciIsInNoYWRvd0NvbG9yIiwicG9wdXBNYWluQ29sb3IiLCJwb3B1cEZvbnRDb2xvciIsIl9pc01vdW50ZWQiLCJnZXRMYXllclN0YXRlV2l0aElkIiwibGF5ZXJTdGF0ZSIsImJhc2VMYXllcklkIiwibmV3TGF5ZXJTdGF0ZSIsInN0YXRlSWQiLCJhY3RpdmF0ZVdpdGhCbCIsIm9sZFN0YXRlIiwiY2hhbmdlQWN0aXZlTGF5ZXJDaGlsZHMiLCJzdGF0ZXMiLCJvYmpDb21wb25lbnQiLCJuZXdTdGF0ZSIsInpvb21Qb3NpdGlvbiIsInpvb21Ib21lIiwiem9vbUV4dGVudCIsImZ1bGxzY3JlZW4iLCJwcmludCIsImdyYXRpY3VsZSIsInJvdXRlcl9lbmFibGUiLCJzYlBvcnRhbCIsImNyZWF0ZVBvcnRhbCIsIm5vZGUiLCJpbml0aWFsX29wZW5fY29tcCIsInNlYXJjaFBvcnRhbCIsImdlb1NlYXJjaE9wdGlvbnMiLCJjcmVhdGVHZW9zZWFyY2hPcHRpb25zIiwiaW5mb1BvcnRhbCIsImJsc1BvcnRhbCIsImJhc2VsYXllclN3aXRjaGVyIiwibWVhc3VyZVBvcnRhbCIsInBlcm1hUG9ydGFsIiwic2F2ZUlkcyIsIm92ZXJ2aWV3UG9ydGFsIiwib3ZlcnZpZXdNYXAiLCJiYXNlbGF5ZXJDb25maWciLCJjdXJyZW50QmFzZWxheWVyIiwiY3VycmVudFNvdXJjZSIsImludGVydmFsSWQiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJyb3V0aW5nQ29uc3RhbnRzR2VybWFuIiwicm91dGluZ0NvbnN0YW50c0VuZ2xpc2giLCJyb3V0ZXJDb250cm9sUHJvcHMiLCJkaXJlY3Rpb24iLCJ3aXRoUG9zaXRpb24iLCJvcGVuUm91dGVyIiwicm91dGVyQ29udGFpbmVyIiwicm91dGVyX2RpdiIsIlJvdXRlclZpZXciLCJwb3J0YWwiLCJmZUVkaXRvclByb2ZpbGUiLCJlZGl0b3JDb250YWluZXIiLCJlZGl0b3JfZGl2IiwiZWRpdG9yUHJvcHMiLCJpbml0T3BlbiIsImRhdGFGaWVsZCIsImRhdGFfZmllbGQiLCJjb21wb25lbnQiLCJjdXJyZW50Q29tcCIsInN0b3JlZFBhbmVsIiwiZ2Vvc2VhcmNoT3B0aW9ucyIsImNvbGxhcHNlZExhYmVsIiwic2VhcmNoem9vbSIsImFuaW1hdGVfZHVyYXRpb24iLCJtYXJrcmVzdWx0IiwicmVzdWx0X2R1cmF0aW9uIiwicmVzdWx0X2NvdW50IiwicmVzdWx0c19oZWFkbGluZSIsInJlc3VsdF9sb2NzdHlsZSIsIlJvdXRlclBvcHVwQnV0dG9ucyIsImVkaXRSb3V0ZSIsInNpbXBsaWZ5IiwibW9kdWxlIiwiYWxlcnRIYW5kbGVyIiwiQWxlcnRIYW5kbGVyIiwic2hvd0luZm9EaWFsb2ciLCJsYW5ndWFnZUNvbnN0YW50cyIsIlJPVVRFUl9WSUVXX0FMRVJUX0VSUk9SIiwiUk9VVEVSX0VSUk9SX0xJTkVTVFJJTkciLCJvcGVuQ29udHJvbHMiLCJzZXRNb2RlIiwiZnJvbUNvb3JkaW5hdGUiLCJvdmVyQ29vcmRpbmF0ZSIsImFkZE92ZXJQb2ludCIsInRvQ29vcmRpbmF0ZSIsIlBPUFVQX1JPVVRFX0VESVQiLCJQb2x5Z29uIiwicm91dGVGcm9tIiwicm91dGVUbyIsIlJvdXRlckluc3RydWN0aW9uc0NvbnRhaW5lciIsIlJvdXRlckZlYXR1cmVMaXN0IiwiUm91dGVyUmVzdWx0Q29udGFpbmVyIiwicHJvZmlsZVRyYW5zbGF0aW9uIiwic2Nyb2xsdG9FbGVtZW50Iiwiem9vbVRvSWQiLCJzZXRSZXN1bHRGZWF0Iiwic2V0QWN0aXZlSWQiLCJmZWF0dXJlQ291bnQiLCJyb3V0ZXJJbnN0cnVjdGlvbnMiLCJpbnN0cnVjdGlvbnMiLCJmZWF0dXJlTGlzdCIsInJvdXRlckhlYWRlckNvbnRlbnQiLCJwcmludEZ1bmN0aW9uIiwicmVzdWx0TW9kZSIsInBydENvbnRlbnQiLCJjbG9uZU5vZGUiLCJkaXZGcm9tQWRkcmVzcyIsImxhYmVsRnJvbUFkZHJlc3MiLCJST1VURVJfRlJPTSIsImVtRnJvbUFkZHJlc3MiLCJkaXZUb0FkZHJlc3MiLCJsYWJlbFRvQWRkcmVzcyIsImVtVG9BZGRyZXNzIiwiV2luUHJpbnQiLCJ3cml0ZSIsImZvY3VzIiwiUk9VVEVSX1ZJRVdfTEFCRUxfVElNRSIsIlJPVVRFUl9WSUVXX0xBQkVMX0RJU1RBTkNFIiwiUk9VVEVSX0RPV05MT0FEIiwiZXhwb3J0R3B4IiwiUk9VVEVSX1BSSU5UIiwiQVJFQV9ERVRPVVIiLCJBUkVBX0ZFQVRVUkVDT1VOVCIsInJvdXRlcldheVNvdXJjZSIsInJvdXRlckhpbnRTb3VyY2UiLCJhY3RpdmVJZCIsImxheWVyUm91dGUiLCJsYXllckFyZWEiLCJmZWF0dXJlU291cmNlIiwibGF5ZXJWYWx1ZVJvdXRlIiwibGF5ZXJWYWx1ZUFyZWEiLCJjb250YWluZXIiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY29udHJvbENvbnRhaW5lciIsInNldE9wZW4iLCJHUFgiLCJzdHJFeHBvcnQiLCJ3cml0ZUZlYXR1cmVzIiwiZGVjaW1hbHMiLCJib2R5IiwiUm91dGVyQ29udHJvbHMiLCJSb3V0ZXJQcm9maWxlU2VsZWN0aW9uIiwicmVzZXRGcm9tUG9pbnQiLCJyZXNldFRvUG9pbnQiLCJyZXNldEFyZWFQb2ludCIsInRvZ2dsZVJlc3VsdERldGFpbHMiLCJzZXRSZXN1bHRJbnN0ciIsInJlY2FsY3VsYXRlUm91dGUiLCJhcnJQcm9maWxlcyIsInJvdXRlcl9wcm9maWxlcyIsInNob3dGZWF0dXJlcyIsImFyZWFBZGRyZXNzIiwiaW5pdGlhbCIsImluaXRpYWxNb2RlIiwib3ZlclB0Q3RyIiwib3ZlckFkZHJlc3NlcyIsImFyZWFQb2ludCIsImZyb21Qb2ludCIsInRvUG9pbnQiLCJvdmVyUG9pbnRzIiwicHJvZmlsZXMiLCJjdXJyZW50UHJvZmlsZSIsIm9wZW5TZXR0aW5ncyIsImluaXRpYWxSZXN1bHRNb2RlIiwicG9wdXBSb3V0ZUJ1dHRvbldyYXBwZXIiLCJzd2FwUG9pbnRzIiwidXNlUGVybWFsaW5rIiwic291cmNlcyIsIndheVNvdXJjZSIsImhpbnRTb3VyY2UiLCJzbGlkZXJPcHRpb25zIiwicmVzZXRGdW5jdGlvbnMiLCJmcm9tIiwidG8iLCJhcmVhIiwib3ZlclNldHRpbmdzIiwiY3JlYXRlT3ZlclNldHRpbmdzIiwicm91dGVySGVhZGxpbmUiLCJST1VURVJfREVGQVVMVF9IRUFETElORV9ST1VURSIsImFyZWFIZWFkbGluZSIsIlJPVVRFUl9ERUZBVUxUX0hFQURMSU5FX0FSRUEiLCJyZXN1bHRTd2l0Y2hlciIsInN3aXRjaGVyQnV0dG9ucyIsIlJPVVRFUl9TRVRUSU5HUyIsInRvZ2dsZURldGFpbHMiLCJlbmFibGVPdmVyUG9pbnRzIiwiZW5hYmxlVGFyZ2V0U3dpdGNoIiwicmVzdWx0RGV0YWlsT3BlbiIsImhhbmRsZUluaXRpYWxQYXJhbXMiLCJyb3V0ZXJMYXllckdyb3VwIiwibW9kV2F5SW50ZXJhY3Rpb24iLCJzZXRBY3RpdmUiLCJ1cGRhdGVSb3V0ZUxheWVyc0FuZFBvaW50cyIsImxheWVyVmFsdWVzIiwibmV3RGVmYXVsdExheWVyVmFsdWUiLCJsYXllclZhbHVlIiwiYm9vbCIsInBlcmZvcm1SZXZlcnNlU2VhcmNoIiwiZG9udFNlYXJjaCIsImxvY2F0aW9uU291cmNlIiwibG9jYXRpb25zU291cmNlIiwibmV3RnJvbVBvaW50IiwibmV3RnJvbUFkZHJlc3MiLCJuZXdUb1BvaW50IiwibmV3VG9BZGRyZXNzIiwidG1wTmFtZXMiLCJ0bXBQb3MiLCJvdmVyRnVuY3Rpb24iLCJjcmVhdGVBdXRvY29tcGxldGVGdW5jdGlvbnNGb3JPdmVyRmllbGQiLCJmaWVsZElkIiwiZGVsZXRlT3Zlckxpc3RlbmVyIiwic2VsZWN0T3Zlckxpc3RlbmVyIiwib3ZlclZhbHVlIiwiZGFuZ2VyIiwiY2hhbmdlT3Zlckxpc3RlbmVyIiwiYXJlYVNvdXJjZSIsInRtcEZlYXR1cmUiLCJyb3V0ZXJfZnJvbV9sb2NzdHlsZSIsInJvdXRlcl90b19sb2NzdHlsZSIsInJvdXRlcl9pbnRlcmltX2xvY3N0eWxlIiwicm91dGVTdGFydEJ1dHRvbiIsInJvdXRlcl9wb2ludF9sb2NzdHlsZSIsImRlbGV0ZUZyb21MaXN0ZW5lciIsInNlbGVjdEZyb21MaXN0ZW5lciIsImZyb21WYWx1ZSIsImNoYW5nZUZyb21MaXN0ZW5lciIsImZyb21GdW5jdGlvbnMiLCJkZWxldGVUb0xpc3RlbmVyIiwic2VsZWN0VG9MaXN0ZW5lciIsInRvVmFsdWUiLCJjaGFuZ2VUb0xpc3RlbmVyIiwidG9GdW5jdGlvbnMiLCJkZWxldGVBcmVhTGlzdGVuZXIiLCJzZWxlY3RBcmVhTGlzdGVuZXIiLCJhcmVhVmFsdWUiLCJjaGFuZ2VBcmVhTGlzdGVuZXIiLCJhcmVhRnVuY3Rpb25zIiwiY3JlYXRlUG9wdXBXcmFwcGVyIiwicm91dGluZ0hhbmRsZXIiLCJyb3V0ZUJ1dHRvbldyYXBwZXIiLCJyb3V0ZUZyb21CdXR0b24iLCJyb3V0ZUZyb21CdXR0b25TcGFuIiwicm91dGVUb0J1dHRvbiIsInJvdXRlVG9CdXR0b25TcGFuIiwicHJveHlfYXBwZW5kUG9wdXAiLCJjb21wIiwic2V0QWRkQnV0dG9ucyIsImFyZWFDZW50ZXJMb2NzdHlsZSIsImNsaWNrTG9jc3R5bGUiLCJwcmlvcml0eUZlYXR1cmVzIiwicHJpb3JpdHlMb2NzdHlsZSIsInJvdXRpbmdBbHRXYXlTb3VyY2UiLCJyb3V0ZXJXYXlMYXllciIsInJvdXRlckFsdFdheUxheWVyIiwic2VsZWN0SW50ZXJhY3Rpb24iLCJTZWxlY3QiLCJzZWxlY3RlZCIsInNob3dBbHRSb3V0ZSIsImNsaWNrRmVhdHVyZUVudHJ5Rm9yRmVhdHVyZSIsIm1hcFNlbGVjdEludGVyYWN0aW9uIiwiTW9kaWZ5IiwibW9kaWZ5U3RhcnRQb2ludCIsIm92ZXJQb2ludCIsIm1pbkRpc3RhbmNlIiwiaW5zZXJ0SWQiLCJhcnJLZXlzIiwiY2FsY0Rpc3RhbmNlIiwiZGlzdFN0YXJ0IiwiZGlzdEVuZCIsImRpc3RTdGFydE9sZCIsIm92ZXJFbmRJbmRleCIsImRpc3RFbmRPbGQiLCJyb3V0ZXJIaW50TGF5ZXIiLCJsb2NhdGlvbnNMYXllciIsImFyZWFMYXllciIsInJvdXRlckZlYXR1cmVzU291cmNlIiwicm91dGVyRmVhdHVyZXNMYXllciIsInZpc2libGUiLCJ2aWV3QXJlYSIsInJvdXRlSW5zdHJ1Y3Rpb25zIiwicHJvZmlsZUlkIiwiZ2VvU2VhcmNoQXBpIiwiZ2VvUmV2ZXJzZVNlYXJjaEFwaSIsImdlb3NlYXJjaF9yZXZlcnNlIiwicm91dGluZ0FwaSIsInJvdXRpbmciLCJwZXJtYWxpbmtIYW5kbGVyIiwiY3JlYXRlQXV0b2NvbXBsZXRlRnVuY3Rpb25zIiwiYWRkUG9wdXBIb29rIiwiYWRkTWFwSW5wdXRJbnRlcmFjdGlvbiIsInBvaW50MSIsInBvaW50MiIsInNxdWFyZTEiLCJzcXVhcmUyIiwicm91dGVSZXNwb25zZSIsInJvdXRlTnVtYmVyIiwicm91dGVySW5zdHJ1Y3Rpb24iLCJyb3V0ZXJJbnN0cnVjdGlvbnNIZWFkZXIiLCJyb3V0ZXJJbnN0cnVjdGlvbnNIdG1sIiwiaW5zdHIiLCJzdHJUeXBlIiwic3RyTW9kIiwicm93c3R5bGUiLCJyb3V0ZV9uYW1lXzAiLCJyb3V0ZV9uYW1lXzEiLCJ0b3RhbF9kaXN0YW5jZSIsInRvdGFsX3RpbWUiLCJzaG93SW5zdHJ1Y3Rpb25zIiwicm91dGluZ0NvbnN0YW50cyIsIlJPVVRFUl9JTlNUUlVDVElPTlNfSEVBREVSIiwicm91dGVyX2FwaV9zZWxlY3Rpb24iLCJyb3V0ZVR5cGUiLCJyb3V0ZXMiLCJsZWdzIiwic3VtbWFyeSIsInJvdXRlX25hbWUiLCJyb3V0ZV9zdW1tYXJ5Iiwic2VnbWVudHMiLCJjdXJyZW50U2VnbWVudCIsInN0ZXBzIiwiY3VycmVudFN0ZXAiLCJwYXRocyIsImN1cnJlbnRJbnN0cnVjdGlvbiIsImluc3RydWN0aW9uIiwic2lnbiIsInRyaXAiLCJtYW5ldXZlcnMiLCJST1VURVJfVklFV19MQUJFTF9ST1VURSIsInJvdXRlUHJvZmlsZSIsIlJPVVRFUl9WSUVXX0xBQkVMX1BST0ZJTEUiLCJST1VURVJfSU5TVFJVQ1RJT05TX1RBQkxFIiwiYWRqdXN0SW5zdHJ1Y3Rpb25NYXBJbnRlcmFjdGlvbiIsImFkZHJlc3MiLCJlbmNvZGVVUkkiLCJST1VURVJfVklFV19BTEVSVF9BRERSRVNTIiwiJGlucHV0Iiwib3B0X2NhbGxiYWNrIiwiYm91bmRzIiwidmlld2JveCIsImRlbGV0ZUJ1dHRvbiIsIm5leHQiLCIkYnV0dG9uT3ZlciIsInByb3AiLCJzdGF0ZVByb3AiLCJvcHRfaW5kZXgiLCJyZXZlcnNlS2V5Iiwicm9hZCIsInBhdGgiLCJwZWRlc3RyaWFuIiwiaG91c2VfbnVtYmVyIiwiY2l0eSIsInRvd24iLCJmcm9tQ29vcmQiLCJhcmVhQWpheCIsInNvcnRlZEZlYXR1cmVzIiwidG9Db29yZCIsIm92ZXJDb29yZCIsInByb3B0Iiwicm91dGVBamF4Iiwic2hvd1JvdXRlTGF5ZXIiLCJzaG93Um91dGVJbnN0cnVjdGlvbnMiLCJlbGVtZW50cyIsImNsb3NlQWZ0ZXJTZWFyY2giLCJzaG93Um91dGUiLCJFeGNlcHRpb24iLCJub0NsZWFyIiwiYWN0aXZlTGF5ZXIiLCJnZXRBY3RpdmVMYXllciIsImxheWVyRGF0YSIsInVuc3R5bGVkRmVhdHVyZXMiLCJjb250ZW50RmVhdHVyZXMiLCJtaXNzaW5nU3R5bGVzIiwicHJpY2VTb3J0ZWRGZWF0dXJlcyIsImJlc3RGZWF0dXJlcyIsImJlc3RGZWF0dXJlSWRzIiwidXBwZXJCb3VuZCIsImZlYXR1cmVMb29wIiwiaGlkZUZlYXR1cmVzV2l0aG91dExhYmVsIiwidGFnIiwiZ2VvSnNvbkZlYXR1cmVzIiwibWFwUHJvaiIsImxhYmVsS2V5Iiwic3R5bGVJZCIsIndheVBvbHlsaW5lIiwicm91dGVGZWF0dXJlcyIsImFsdFJvdXRlRmVhdHVyZXMiLCJyaWdodFBhZGRpbmciLCJsZWZ0UGFkZGluZyIsIlBvbHlsaW5lIiwicm91dGVyX3ZpYXJvdXRlX3ByZWNpc2lvbiIsInJvdXRlX2dlb21ldHJ5Iiwic2hhcGUiLCJyb3V0ZXJfYWx0ZXJuYXRpdmUiLCJyZW5kZXJTeW5jIiwiZm5JdGVtQ2xpY2siLCJmbkl0ZW1PdmVyIiwiZm5JdGVtT3V0IiwiY29vcmRMb25MYXQiLCJzdHJpbmdsb25sYXQiLCJuZXdDb29yZCIsImN1cnJlbnRIaW50RmVhdHVyZSIsImdlb20iLCJhZnRlclpvb20iLCJlbmRab29tIiwiZWFjaCIsIiRlbGVtZW50IiwiZm5NYXBSb3V0ZXJJbnRlcmFjdGlvbiIsImZlYXR1cmVXcmFwcGVyIiwiYWN0aXZlRmVhdHVyZSIsInNjcm9sbFRvIiwib2Zmc2V0VG9wIiwiZGV0YWlsQnV0dG9uIiwiZGV0YWlsQnRuQ2xhc3MiLCJkZXRhaWxCdG5DYiIsImNsb3NlQnRuVGl0bGUiLCJtaW5pbWl6ZUJ1dHRvbiIsImhpZGVDb250YWluZXIiLCJtaW5pbWl6ZSIsIndyYXBwZXJDbGFzcyIsImhlYWRlckNsYXNzIiwiaGVhZGVyIiwiUk9VVEVSX1ZJRVdfQUREUkVTU19JTlBVVCIsIlJPVVRFUl9GUk9NX0xBQkVMIiwiUk9VVEVSX09WRVJfTEFCRUwiLCJST1VURVJfVE9fTEFCRUwiLCJST1VURVJfQ0xFQVJfVElUTEUiLCJST1VURVJfQ0xFQVJfSFRNTCIsIlJPVVRFUl9MYWJlbF9JbnRlcmltIiwiUk9VVEVSX1NXSVRDSCIsIlJPVVRFUl9PVkVSIiwiUk9VVEVSX1ZJRVdfQUxFUlRfR09DT0RJTkciLCJST1VURVJfRVJST1JfUE9MWUxJTkUiLCJST1VURVIiLCJST1VURVJfTiIsIlJPVVRFUl9FIiwiUk9VVEVSX1MiLCJST1VURVJfVyIsIlJPVVRFUl9ORSIsIlJPVVRFUl9TRSIsIlJPVVRFUl9TVyIsIlJPVVRFUl9OVyIsIlJPVVRFUl9ESVJFQ1RJT05fMCIsIlJPVVRFUl9ESVJFQ1RJT05fMSIsIlJPVVRFUl9ESVJFQ1RJT05fMiIsIlJPVVRFUl9ESVJFQ1RJT05fMyIsIlJPVVRFUl9ESVJFQ1RJT05fNCIsIlJPVVRFUl9ESVJFQ1RJT05fNSIsIlJPVVRFUl9ESVJFQ1RJT05fNiIsIlJPVVRFUl9ESVJFQ1RJT05fNyIsIlJPVVRFUl9ESVJFQ1RJT05fOCIsIlJPVVRFUl9ESVJFQ1RJT05fMTAiLCJST1VURVJfRElSRUNUSU9OXzE1IiwiUk9VVEVSX1RPIiwiUk9VVEVSX0NFTlRFUiIsIlJPVVRFUl9GSU5EX1JPVVRFIiwiUk9VVEVSX0xPQ19ST1VURV9UTyIsIlJPVVRFUl9ST1VURURFU0MiLCJST1VURVJfUk9VVEVOQU1FIiwiUk9VVEVSX0RJU1RBTkNFIiwiUk9VVEVSX1RJTUUiLCJST1VURVJfUkVWX0dFT0NPRElORyIsIlJPVVRFUl9FUlJPUl9SRVZfR0VPQ09ESU5HIiwiUk9VVEVSX1NFQVJDSElORyIsIlJPVVRFUl9FUlJPUl9TRUFSQ0hJTkciLCJST1VURVJfQ0FMQ19ST1VURSIsIlJPVVRFUl9FUlJPUl9DQUxDX1JPVVRFIiwiQVJFQV9OQU1FIiwiQVJFQV9QUk9GSUxFIiwiUk9VVEVfREVUT1VSIiwiSU5TVFJVQ1RJT05fSEVBRExJTkUiLCJGRUFUVVJFU19IRUFETElORSIsIlJPVVRFX1BPU0lUSU9OIiwiU1RBUlRfUk9VVEUiLCJSRU1PVkVfQUREUkVTUyIsIkNBUiIsIkJJS0UiLCJST0FEQklLRSIsIk1PVU5UQUlOQklLRSIsIkVMRUNUUklDQklLRSIsIlRSVUNLIiwiV0FMSyIsIldBTkRFUiIsIldIRUVMIiwiU0NPT1QiLCJNT1RPUkJJS0UiLCJST1VURVJfVklFV19BTEVSVF9FcnJvciIsIlJPVVRFUl9JTlBVVF9XUkFQUEVSIiwiUk9VVEVSX1BST0ZJTEVfV1JBUFBFUiIsIlJPVVRFUl9JTlBVVF9GUk9NIiwiUk9VVEVSX0lOUFVUX1RPIiwiUk9VVEVSX0lOUFVUX09WRVIiLCJST1VURVJfSU5QVVRfQ0xFQVIiLCJST1VURVJfQlVUVE9OQkFSIiwiUk9VVEVSX0FUVFJJQlVUSU9OX1dSQVBQRVIiLCJST1VURVJfSU5TVFJVQ1RJT05TX1dSQVBQRVIiLCJST1VURVJfUFJPRklMRV9DQVIiLCJST1VURVJfUFJPRklMRV9UUlVDSyIsIlJPVVRFUl9QUk9GSUxFX0JJS0UiLCJST1VURVJfUFJPRklMRV9GT09UIiwiUk9VVEVSX1BST0ZJTEVfV0hFRUxDSEFJUiIsIlJPVVRFUl9QUk9GSUxFX1NDT09URVIiLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU0iLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fT0REIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0VWRU4iLCJST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9JQ09OIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9URVhUIiwiUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9ESVNUQU5DRSIsIlJPVVRFX0xBWUVSX1ZBTFVFUyIsIlJPVVRFX0xBWUVSU19TRUxFQ1QiLCJST1VURV9UT0dHTEUiLCJPVVRQVVRfREVUT1VSIiwiUk9VVEVfU1RBUlRfQlVUVE9OIiwiUk9VVEVSX1NFQVJDSCIsIlJPVVRFX0VSUk9SIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBVUE7O0FB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aUJBYmU7QUFjNUJyVCxjQUFZLEVBQUUsa0JBZGM7QUFnQjVCdVgsb0JBQWtCLEVBQUUsd0JBaEJRO0FBaUI1QkMsc0JBQW9CLEVBQUUsd0JBakJNO0FBa0I1QkMscUJBQW1CLEVBQUUseUJBbEJPO0FBbUI1QkMscUJBQW1CLEVBQUUseUJBbkJPO0FBb0I1QkMsMkJBQXlCLEVBQUUsK0JBcEJDO0FBcUI1QkMsd0JBQXNCLEVBQUUsNEJBckJJO0FBdUI1QjFLLDJCQUF5QixFQUFFLDhCQXZCQztBQXdCNUIySywwQkFBd0IsRUFBRSw2QkF4QkU7QUF5QjVCQyw4QkFBNEIsRUFBRSxrQ0F6QkY7QUEwQjVCQywrQkFBNkIsRUFBRSxtQ0ExQkg7QUEyQjVCQyxvQ0FBa0MsRUFBRSx1Q0EzQlI7QUE0QjVCQyx5Q0FBdUMsRUFBRSw0Q0E1QmI7QUE2QjVCQyx5Q0FBdUMsRUFBRSxrQ0E3QmI7QUE4QjVCQyw2Q0FBMkMsRUFBRSxzQ0E5QmpCO0FBZ0M1QkMsb0JBQWtCLEVBQUksMEJBaENNO0FBaUM1QkMscUJBQW1CLEVBQUcsMkJBakNNO0FBa0M1QkMsY0FBWSxFQUFVLG9CQWxDTTtBQW1DNUJDLGVBQWEsRUFBUyxvQkFuQ007QUFvQzVCQyxvQkFBa0IsRUFBSSx3QkFwQ007QUFxQzVCQyxlQUFhLEVBQVMsbUJBckNNO0FBc0M1QjFDLGdCQUFjLEVBQVEscUJBdENNO0FBdUM1QjJDLGFBQVcsRUFBVyxtQkF2Q007QUEyQzVCOW1ELE1BQUksRUFBRSxFQTNDc0IsQ0EyQ25COztBQTNDbUIsQ0FBdkIsQyxDQTRDSiIsImZpbGUiOiJSZXNvdXJjZXNfcHVibGljX2pzX2NvbXBvbmVudHNfYzRnLW1hcHNfanN4LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuXG5pbXBvcnQge0M0Z0Jhc2VsYXllcn0gZnJvbSBcIi4vYzRnLWJhc2VsYXllclwiO1xuaW1wb3J0IHtDNGdPdmVybGF5fSBmcm9tIFwiLi9jNGctb3ZlcmxheVwiO1xuaW1wb3J0IHtjb25maWd9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbmZpZ1wiO1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcbmltcG9ydCBUaWxlTGF5ZXIgZnJvbSBcIm9sL2xheWVyL1RpbGVcIjtcbmltcG9ydCBUaWxlSlNPTiBmcm9tIFwib2wvc291cmNlL1RpbGVKU09OXCI7XG5pbXBvcnQge0JpbmdNYXBzLCBJbWFnZVN0YXRpYywgT1NNLCBTdGFtZW4sIFRpbGVXTVMsIFhZWn0gZnJvbSBcIm9sL3NvdXJjZVwiO1xuaW1wb3J0IHtkZWZhdWx0IGFzIFZlY3RvclRpbGVTb3VyY2V9IGZyb20gXCJvbC9zb3VyY2UvVmVjdG9yVGlsZVwiO1xuaW1wb3J0IHtHcm91cCBhcyBMYXllckdyb3VwLCBJbWFnZX0gZnJvbSBcIm9sL2xheWVyXCI7XG5pbXBvcnQgQ29sbGVjdGlvbiBmcm9tICdvbC9Db2xsZWN0aW9uJztcbmltcG9ydCBPTENlc2l1bSBmcm9tICdvbC1jZXNpdW0vc3JjL29sY3MvT0xDZXNpdW0uanMnO1xuaW1wb3J0IHthcHBseVN0eWxlfSBmcm9tICdvbC1tYXBib3gtc3R5bGUnO1xuaW1wb3J0IFZlY3RvclRpbGVMYXllciBmcm9tICdvbC9sYXllci9WZWN0b3JUaWxlJztcbmltcG9ydCBvbF9zb3VyY2VfR2VvSW1hZ2UgZnJvbSBcIm9sLWV4dC9zb3VyY2UvR2VvSW1hZ2VcIjtcbmltcG9ydCBQcm9qZWN0aW9uIGZyb20gXCJvbC9wcm9qL1Byb2plY3Rpb25cIjtcblxuLy9jb3B5IGxpbmsgdG8gYWRkIG5vb3BlbmVyXG5leHBvcnQgY29uc3QgT1NNX1JFTF9BVFRSSUJVVElPTiA9ICcmIzE2OTsgJyArXG4gICAgJzxhIGhyZWY9XCJodHRwczovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9jb3B5cmlnaHRcIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiPk9wZW5TdHJlZXRNYXA8L2E+ICcgK1xuICAgICdjb250cmlidXRvcnMuJztcblxuZXhwb3J0IGNsYXNzIEM0Z0Jhc2VsYXllckNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcihwcm94eSkge1xuICAgIHRoaXMucHJveHkgPSBwcm94eTtcbiAgICB0aGlzLm1hcENvbnRyb2xsZXIgPSBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXI7XG4gICAgdGhpcy5hcnJCYXNlbGF5ZXJzID0ge307XG4gICAgdGhpcy5iYXNlbGF5ZXJJZHMgPSBbXTtcbiAgICB0aGlzLmJhc2VLZXlzID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYmFzZV9rZXlzO1xuICB9XG5cbiAgbG9hZEJhc2VMYXllcnMoKSB7XG4gICAgdmFyIHNlbGY7XG5cbiAgICBzZWxmID0gdGhpcztcblxuICAgIGpRdWVyeS5hamF4KHRoaXMucHJveHkuYXBpX2Jhc2VsYXllcl91cmwse1xuICAgICAgZGF0YVR5cGU6IHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmpzb25wID8gXCJqc29ucFwiIDogXCJqc29uXCJcbiAgICB9KVxuICAgICAgLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEuYmFzZWxheWVyKSB7XG4gICAgICAgICAgc2VsZi5hZGRCYXNlTGF5ZXJzKGRhdGEuYmFzZWxheWVyKTtcbiAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2Jhc2VsYXllcl9sb2FkZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSlcbiAgICAgIC5mYWlsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQFRPRE8gZXJyb3ItbWVzc2FnZXNcbiAgICAgICAgLy8gICAxKSBWaXNpYmxlIG1lc3NhZ2UgNCB1c2VycyAoaTE4bilcbiAgICAgICAgLy8gICAyKSBUZWNobmljYWwgY29uc29sZS53YXJuXG4gICAgICAgIGNvbnNvbGUud2FybignQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSB0cnlpbmcgdG8gbG9hZCB0aGUgYmFzZWxheWVycy4gRG8geW91IGhhdmUgY29uZmlndXJlZCBhIGRlZmF1bHQgcHJvZmlsZSB3aXRoIGJhc2VsYXllcnM/Jyk7XG4gICAgICAgIHNlbGYubWFwQ29udHJvbGxlci5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSlcbiAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAvL3NlbGYubWFwQ29udHJvbGxlci5zcGlubmVyLmhpZGUoKTtcbiAgICAgIH0pO1xuXG4gIH0vLyBlbmQgb2YgXCJsb2FkQmFzZUxheWVycygpXCJcblxuICBhZGRCYXNlTGF5ZXJzKGJhc2VsYXllcnMpIHtcbiAgICB2YXIgYmFzZWxheWVyLFxuICAgICAgdWlkLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgICAvLyBidWlsZCBiYXNlbGF5ZXItbGlzdFxuICAgIGlmIChiYXNlbGF5ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBiYXNlbGF5ZXJzLmxlbmd0aDsgaSArPSAxKSB7XG5cbiAgICAgICAgYmFzZWxheWVyID0gYmFzZWxheWVyc1tpXTtcblxuICAgICAgICB1aWQgPSBiYXNlbGF5ZXIuaWQgfHwgdXRpbHMuZ2V0VW5pcXVlSWQoKTtcbiAgICAgICAgdGhpcy5iYXNlbGF5ZXJJZHMucHVzaCh1aWQpO1xuICAgICAgICBpZiAoIXRoaXMuYXJyQmFzZWxheWVyc1t1aWRdKSB7XG4gICAgICAgICAgdGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0gPSBuZXcgQzRnQmFzZWxheWVyKGJhc2VsYXllciwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBAVE9ETzogY2hlY2sgaW5pdGlhbCBiYXNlbGF5ZXItaGFuZGxpbmdcbiAgICAgICAgaWYgKHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmJhc2VsYXllciAmJiBwYXJzZUludCh1aWQsIDEwKSA9PT0gcGFyc2VJbnQodGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYmFzZWxheWVyLCAxMCkpIHtcbiAgICAgICAgICAvLyBjaGVjayBkZWZhdWx0IGZyb20gY29udGVudC9tb2R1bGUgKG92ZXJyaWRlcyBwcm9maWxlIHNldHRpbmdzKVxuICAgICAgICAgIHRoaXMuc2hvd0Jhc2VMYXllcih1aWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmRlZmF1bHRfYmFzZWxheWVyICYmIHBhcnNlSW50KHVpZCwgMTApID09PSBwYXJzZUludCh0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5kZWZhdWx0X2Jhc2VsYXllciwgMTApKSB7XG4gICAgICAgICAgLy8gY2hlY2sgZGVmYXVsdCBmcm9tIHByb2ZpbGVcbiAgICAgICAgICB0aGlzLnNob3dCYXNlTGF5ZXIodWlkKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnByb3h5LmFjdGl2ZUJhc2VsYXllcklkKSB7XG4gICAgICAvLyBubyBiYXNlbGF5ZXIgd2FzIGFjdGl2YXRlZFxuICAgICAgaWYgKGJhc2VsYXllcnMubGVuZ3RoID4gMCAmJiBiYXNlbGF5ZXJzWzBdLmlkKSB7XG4gICAgICAgIC8vIHRha2UgZmlyc3QgYmFzZWxheWVyIGlmIHBvc3NpYmxlXG4gICAgICAgIHVpZCA9IGJhc2VsYXllcnNbMF0uaWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBvdGhlcndpc2UgYnVpbGQgZGVmYXVsdCBiYXNlbGF5ZXJcbiAgICAgICAgdWlkID0gMDtcbiAgICAgICAgdGhpcy5iYXNlbGF5ZXJJZHMucHVzaCh1aWQpO1xuICAgICAgICBpZiAoIXRoaXMuYXJyQmFzZWxheWVyc1t1aWRdKSB7XG4gICAgICAgICAgdGhpcy5hcnJCYXNlbGF5ZXJzW3VpZF0gPSB7XG4gICAgICAgICAgICBpZDogMCxcbiAgICAgICAgICAgIG5hbWU6ICdjNGdfZGVmYXVsdCcsXG4gICAgICAgICAgICBwcm92aWRlcjogJ29zbScsXG4gICAgICAgICAgICBzdHlsZTogJ01hcG5paydcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnNob3dCYXNlTGF5ZXIodWlkKTtcblxuICAgIH1cbiAgICB0aGlzLnByb3h5LmJhc2VsYXllcnNfbG9hZGVkID0gdHJ1ZTtcblxuICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfbG9hZGVkLCB0aGlzLmJhc2VsYXllcklkcyk7XG4gIH0gLy8gZW5kIG9mIFwiYWRkQmFzZUxheWVycygpXCJcblxuICBjcmVhdGVCYXNlTGF5ZXIobGF5ZXJPcHRpb25zLCBiYXNlTGF5ZXJDb25maWcsIHNvdXJjZUNvbmZpZ3Mpe1xuICAgIHZhciBuZXdCYXNlbGF5ZXIgPSB7fTtcbiAgICBsYXllck9wdGlvbnMgPSBsYXllck9wdGlvbnMgfHwge307XG5cbiAgICBpZiAod2luZG93LmlzU2VjdXJlQ29udGV4dCkge1xuICAgICAgbGF5ZXJPcHRpb25zLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XG4gICAgfVxuICAgIGxldCBjb29raWUgPSAxO1xuICAgIHZhciBtYXBEYXRhID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGE7XG4gICAgaWYgKG1hcERhdGEuY29va2llKSB7XG4gICAgICBjb29raWUgPSAwO1xuICAgICAgbGV0IGFyckNvb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KFwiO1wiKTtcbiAgICAgIGZvciAobGV0IGkgaW4gYXJyQ29vb2tpZXMpIHtcbiAgICAgICAgaWYgKGFyckNvb29raWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgaWYgKGFyckNvb29raWVzW2ldLmluZGV4T2YobWFwRGF0YS5jb29raWUubmFtZSkgPiAtMSkgeyAvL3RoZSBjb29raWVzIGV4aXN0c1xuICAgICAgICAgICAgaWYgKCFtYXBEYXRhLmNvb2tpZS52YWx1ZSB8fCBhcnJDb29va2llc1tpXS5pbmRleE9mKG1hcERhdGEuY29va2llLnZhbHVlKSA+IC0xKSB7IC8vbm8gdmFsdWUgcHJvdmlkZWQgb3IgbWF0Y2hpbmcgdmFsdWVcbiAgICAgICAgICAgICAgY29va2llID0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgZHVtbXlVcmwgPSAnLi4vLi4vLi4vJyt0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5kdW1teUJhc2VsYXllcjtcbiAgICBsZXQgZHVtbXlTb3VyY2UgPSBudWxsO1xuICAgIGlmIChkdW1teVVybCkge1xuICAgICAgZHVtbXlTb3VyY2UgPSBuZXcgWFlaKHtcbiAgICAgICAgdXJsOiBkdW1teVVybFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGR1bW15U291cmNlICYmIChjb29raWUgPT09IDApKSB7XG4gICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgVGlsZUxheWVyKCk7XG4gICAgICBuZXdCYXNlbGF5ZXIuc2V0U291cmNlKGR1bW15U291cmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChiYXNlTGF5ZXJDb25maWcucHJvdmlkZXIpIHtcbiAgICAgICAgY2FzZSAnY3VzdG9tJzpcbiAgICAgICAgICAvLyBjdXN0b21cbiAgICAgICAgICBsZXQgbm9VcmwgPSB0cnVlO1xuICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcudXJsKSB7XG4gICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybDtcbiAgICAgICAgICAgIG5vVXJsID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmIChiYXNlTGF5ZXJDb25maWcudXJscykge1xuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybHMgPSBiYXNlTGF5ZXJDb25maWcudXJscztcbiAgICAgICAgICAgIG5vVXJsID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghbm9VcmwpIHtcbiAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBUaWxlTGF5ZXIoe1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBYWVoobGF5ZXJPcHRpb25zKSxcbiAgICAgICAgICAgICAgZXh0ZW50OiBiYXNlTGF5ZXJDb25maWcuZXh0ZW5kXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdjdXN0b20gdXJsKHMpIG1pc3NpbmcgLT4gc3dpdGNoIHRvIGRlZmF1bHQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ29zbSc6XG4gICAgICAgICAgaWYgKHNvdXJjZUNvbmZpZ3Mub3NtW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBUaWxlTGF5ZXIoe1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBPU00oXG4gICAgICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3Mub3NtW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0sXG4gICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYmFzZUxheWVyQ29uZmlnLnN0eWxlID09PSAnb3NtX2N1c3RvbScpIHtcbiAgICAgICAgICAgIC8vIGN1c3RvbVxuICAgICAgICAgICAgbGV0IG5vVXJsID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcudXJsKSB7XG4gICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBiYXNlTGF5ZXJDb25maWcudXJsO1xuICAgICAgICAgICAgICBub1VybCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChiYXNlTGF5ZXJDb25maWcudXJscykge1xuICAgICAgICAgICAgICBsYXllck9wdGlvbnMudXJscyA9IGJhc2VMYXllckNvbmZpZy51cmxzO1xuICAgICAgICAgICAgICBub1VybCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFub1VybCkge1xuICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgVGlsZUxheWVyKHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBYWVoobGF5ZXJPcHRpb25zKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybignY3VzdG9tIHVybChzKSBtaXNzaW5nIC0+IHN3aXRjaCB0byBkZWZhdWx0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybigndW5zdXBwb3J0ZWQgb3NtLXN0eWxlIC0+IHN3aXRjaCB0byBkZWZhdWx0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzdGFtZW4nOlxuICAgICAgICAgIGlmIChzb3VyY2VDb25maWdzLnN0YW1lbltiYXNlTGF5ZXJDb25maWcuc3R5bGVdKSB7XG4gICAgICAgICAgICAvLyBTdGFtZW5cbiAgICAgICAgICAgIGxldCBzb3VyY2UxLFxuICAgICAgICAgICAgICAgIHNvdXJjZTI7XG4gICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLnN0eWxlID09PSAnV2F0ZXJjb2xvcicpIHtcbiAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IExheWVyR3JvdXAoe1xuICAgICAgICAgICAgICAgIGxheWVyczogW25ldyBUaWxlTGF5ZXIoKSxcbiAgICAgICAgICAgICAgICAgIG5ldyBUaWxlTGF5ZXIoKV1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHNvdXJjZTEgPSBuZXcgU3RhbWVuKHtcbiAgICAgICAgICAgICAgICBsYXllcjogJ3dhdGVyY29sb3InXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBzb3VyY2UyID0gbmV3IFN0YW1lbih7XG4gICAgICAgICAgICAgICAgbGF5ZXI6ICd0ZXJyYWluLWxhYmVscydcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgVGlsZUxheWVyKCk7XG4gICAgICAgICAgICAgIHNvdXJjZTEgPSBuZXcgU3RhbWVuKFxuICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb25maWdzLnN0YW1lbltiYXNlTGF5ZXJDb25maWcuc3R5bGVdXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXdCYXNlbGF5ZXIgaW5zdGFuY2VvZiBMYXllckdyb3VwKSB7XG4gICAgICAgICAgICAgIGxldCBhcnJheSA9IG5ld0Jhc2VsYXllci5nZXRMYXllcnMoKS5nZXRBcnJheSgpO1xuICAgICAgICAgICAgICBhcnJheVswXS5zZXRTb3VyY2Uoc291cmNlMSk7XG4gICAgICAgICAgICAgIGFycmF5WzFdLnNldFNvdXJjZShzb3VyY2UyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRTb3VyY2Uoc291cmNlMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCd1bnN1cHBvcnRlZCBvc20tc3R5bGUgLT4gc3dpdGNoIHRvIGRlZmF1bHQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NvbjRnaXNJbyc6XG4gICAgICAgICAgbGV0IGNvbmZpZyA9IHRoaXMuYmFzZUtleXNbYmFzZUxheWVyQ29uZmlnLmlkXTtcbiAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybC5yZXBsYWNlKCd7a2V5fScsIGNvbmZpZ1sna2V5J10pO1xuICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBjb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zO1xuICAgICAgICAgIGxldCBzb3VyY2UgPSBuZXcgWFlaKGxheWVyT3B0aW9ucyk7XG4gICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IFRpbGVMYXllcigpO1xuICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRTb3VyY2Uoc291cmNlKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtYXBib3gnOlxuICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuYXBpX2tleSAmJiBiYXNlTGF5ZXJDb25maWcuYXBwX2lkICYmIGJhc2VMYXllckNvbmZpZy5tYXBib3hfdHlwZSkge1xuICAgICAgICAgICAgbGV0IHNvdXJjZTtcbiAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBUaWxlTGF5ZXIoKTtcbiAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcubWFwYm94X3R5cGUgPT09ICdNYXBib3gnKSB7XG4gICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBiYXNlTGF5ZXJDb25maWcudXJsICsgYmFzZUxheWVyQ29uZmlnLmFwcF9pZCArICcvdGlsZXMve3p9L3t4fS97eX0/YWNjZXNzX3Rva2VuPScgKyBiYXNlTGF5ZXJDb25maWcuYXBpX2tleTtcbiAgICAgICAgICAgICAgc291cmNlID0gbmV3IFhZWihcbiAgICAgICAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoc291cmNlQ29uZmlncy5tYXBib3hbYmFzZUxheWVyQ29uZmlnLm1hcGJveF90eXBlXSwgbGF5ZXJPcHRpb25zKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IGJhc2VMYXllckNvbmZpZy51cmxfY2xhc3NpYyArIGJhc2VMYXllckNvbmZpZy5hcHBfaWQgKyAnL3t6fS97eH0ve3l9LnBuZz9hY2Nlc3NfdG9rZW49JyArIGJhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuXG4gICAgICAgICAgICAgIHNvdXJjZSA9IG5ldyBYWVooalF1ZXJ5LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MubWFwYm94W2Jhc2VMYXllckNvbmZpZy5tYXBib3hfdHlwZV0sXG4gICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnNcbiAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdCYXNlbGF5ZXIuc2V0U291cmNlKHNvdXJjZSk7XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGJhc2VMYXllckNvbmZpZy5oaWRlX2luX2JlKSB7XG4gICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gXCJjb240Z2lzL2Jhc2VMYXllclRpbGVTZXJ2aWNlL1wiICsgYmFzZUxheWVyQ29uZmlnLmlkICsgXCIve3p9L3t4fS97eX1cIjtcbiAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBUaWxlTGF5ZXIoe1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBYWVooalF1ZXJ5LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MubWFwYm94W2Jhc2VMYXllckNvbmZpZy5tYXBib3hfdHlwZV0sXG4gICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybignd3JvbmcgbWFwYm94IGNvbmZpZ3VyYXRpb24hJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtYXB6JyA6XG4gICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IFRpbGVMYXllcigpO1xuICAgICAgICAgIHNvdXJjZSA9IG5ldyBYWVooXG4gICAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgICAgICBzb3VyY2VDb25maWdzLm1hcHosXG4gICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBuZXdCYXNlbGF5ZXIuc2V0U291cmNlKHNvdXJjZSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnb3RtJyA6XG4gICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IFRpbGVMYXllcigpO1xuICAgICAgICAgIHNvdXJjZSA9IG5ldyBYWVooXG4gICAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoc291cmNlQ29uZmlncy5vdG0sXG4gICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBuZXdCYXNlbGF5ZXIuc2V0U291cmNlKHNvdXJjZSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAna2xva2FuJzpcbiAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmFwaV9rZXkgJiYgYmFzZUxheWVyQ29uZmlnLmtsb2thbl90eXBlKSB7XG5cbiAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcudXJsLmNoYXJBdChiYXNlTGF5ZXJDb25maWcudXJsLmxlbmd0aCAtIDEpICE9ICcvJykge1xuICAgICAgICAgICAgICBiYXNlTGF5ZXJDb25maWcudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybCArICcvJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5rbG9rYW5fdHlwZSA9PT0gJ09wZW5NYXBUaWxlcycpIHtcbiAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IGJhc2VMYXllckNvbmZpZy51cmwgKyAne3p9L3t4fS97eX0ucGJmJztcbiAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IFZlY3RvclRpbGVMYXllcih7XG4gICAgICAgICAgICAgICAgc291cmNlOiBuZXcgVmVjdG9yVGlsZVNvdXJjZShqUXVlcnkuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VDb25maWdzLmtsb2thbltiYXNlTGF5ZXJDb25maWcua2xva2FuX3R5cGVdLFxuICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpKVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBmZXRjaChiYXNlTGF5ZXJDb25maWcudXJsICsgJ3N0eWxlcy8nICsgYmFzZUxheWVyQ29uZmlnLnN0eWxlICsgJy5qc29uJykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5qc29uKCkudGhlbihmdW5jdGlvbiAoZ2xTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgYXBwbHlTdHlsZShuZXdCYXNlbGF5ZXIsIGdsU3R5bGUsICdvcGVubWFwdGlsZXMnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvL2xheWVyT3B0aW9ucy51cmwgPSBiYXNlTGF5ZXJDb25maWcudXJsICsgJ3t6fS97eH0ve3l9LnBiZj9rZXk9JytiYXNlTGF5ZXJDb25maWcuYXBpX2tleTtcbiAgICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IFRpbGVMYXllcigpO1xuICAgICAgICAgICAgICBsZXQgc291cmNlID0gbmV3IFRpbGVKU09OKHtcbiAgICAgICAgICAgICAgICB1cmw6IGJhc2VMYXllckNvbmZpZy51cmwgKyAnc3R5bGVzLycgKyBiYXNlTGF5ZXJDb25maWcuc3R5bGUgKyAnLmpzb24/a2V5PScgKyBiYXNlTGF5ZXJDb25maWcuYXBpX2tleVxuICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRTb3VyY2Uoc291cmNlKTtcblxuICAgICAgICAgICAgICAvLyBuZXdCYXNlbGF5ZXIgPSBuZXcgVmVjdG9yVGlsZUxheWVyKHtcbiAgICAgICAgICAgICAgLy8gICBzb3VyY2U6IG5ldyBWZWN0b3JUaWxlU291cmNlKGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgIC8vICAgICBzb3VyY2VDb25maWdzLmtsb2thbltiYXNlTGF5ZXJDb25maWcua2xva2FuX3R5cGVdLFxuICAgICAgICAgICAgICAvLyAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIC8vIGZldGNoKGJhc2VMYXllckNvbmZpZy51cmwgKyBiYXNlTGF5ZXJDb25maWcuc3R5bGUrJy9zdHlsZS5qc29uP2tleT0nK2Jhc2VMYXllckNvbmZpZy5hcGlfa2V5KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIC8vICAgcmVzcG9uc2UuanNvbigpLnRoZW4oZnVuY3Rpb24oZ2xTdHlsZSkge1xuICAgICAgICAgICAgICAvLyAgICAgYXBwbHlTdHlsZShuZXdCYXNlbGF5ZXIsIGdsU3R5bGUsICdvcGVubWFwdGlsZXMnKTtcbiAgICAgICAgICAgICAgLy8gICB9KTtcbiAgICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybignd3Jvbmcga2xva2FuIGNvbmZpZ3VyYXRpb24hJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdoZXJlJzpcbiAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmFwaV9rZXkgJiYgYmFzZUxheWVyQ29uZmlnLmFwcF9pZCAmJiBiYXNlTGF5ZXJDb25maWcuaGVyZV90eXBlKSB7XG5cbiAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUgPT09ICdub3JtYWwnKSB7XG4gICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5iYXNlLm1hcHMuY2l0LmFwaS5oZXJlLmNvbS9tYXB0aWxlLzIuMS9tYXB0aWxlL25ld2VzdC9ub3JtYWwuZGF5L3t6fS97eH0ve3l9LzI1Ni9wbmcnICtcbiAgICAgICAgICAgICAgICAgICc/YXBwX2lkPScgKyBiYXNlTGF5ZXJDb25maWcuYXBwX2lkICsgJyZhcHBfY29kZT0nICsgYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSA9PT0gJ3RyYW5zaXQnKSB7XG4gICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5iYXNlLm1hcHMuY2l0LmFwaS5oZXJlLmNvbS9tYXB0aWxlLzIuMS9tYXB0aWxlL25ld2VzdC9ub3JtYWwuZGF5LnRyYW5zaXQve3p9L3t4fS97eX0vMjU2L3BuZycgK1xuICAgICAgICAgICAgICAgICAgJz9hcHBfaWQ9JyArIGJhc2VMYXllckNvbmZpZy5hcHBfaWQgKyAnJmFwcF9jb2RlPScgKyBiYXNlTGF5ZXJDb25maWcuYXBpX2tleTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYmFzZUxheWVyQ29uZmlnLnN0eWxlID09PSAncGVkZXN0cmlhbicpIHtcbiAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9ICdodHRwczovL3sxLTR9LmJhc2UubWFwcy5jaXQuYXBpLmhlcmUuY29tL21hcHRpbGUvMi4xL21hcHRpbGUvbmV3ZXN0L3BlZGVzdHJpYW4uZGF5L3t6fS97eH0ve3l9LzI1Ni9wbmcnICtcbiAgICAgICAgICAgICAgICAgICc/YXBwX2lkPScgKyBiYXNlTGF5ZXJDb25maWcuYXBwX2lkICsgJyZhcHBfY29kZT0nICsgYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSA9PT0gJ3RlcnJhaW4nKSB7XG4gICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5hZXJpYWwubWFwcy5jaXQuYXBpLmhlcmUuY29tL21hcHRpbGUvMi4xL21hcHRpbGUvbmV3ZXN0L3RlcnJhaW4uZGF5L3t6fS97eH0ve3l9LzI1Ni9wbmcnICtcbiAgICAgICAgICAgICAgICAgICc/YXBwX2lkPScgKyBiYXNlTGF5ZXJDb25maWcuYXBwX2lkICsgJyZhcHBfY29kZT0nICsgYmFzZUxheWVyQ29uZmlnLmFwaV9rZXk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJhc2VMYXllckNvbmZpZy5zdHlsZSA9PT0gJ3NhdGVsbGl0ZScpIHtcbiAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9ICdodHRwczovL3sxLTR9LmFlcmlhbC5tYXBzLmNpdC5hcGkuaGVyZS5jb20vbWFwdGlsZS8yLjEvbWFwdGlsZS9uZXdlc3Qvc2F0ZWxsaXRlLmRheS97en0ve3h9L3t5fS8yNTYvcG5nJyArXG4gICAgICAgICAgICAgICAgICAnP2FwcF9pZD0nICsgYmFzZUxheWVyQ29uZmlnLmFwcF9pZCArICcmYXBwX2NvZGU9JyArIGJhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUgPT09ICdoeWJyaWQnKSB7XG4gICAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSAnaHR0cHM6Ly97MS00fS5hZXJpYWwubWFwcy5jaXQuYXBpLmhlcmUuY29tL21hcHRpbGUvMi4xL21hcHRpbGUvbmV3ZXN0L2h5YnJpZC5kYXkve3p9L3t4fS97eX0vMjU2L3BuZycgK1xuICAgICAgICAgICAgICAgICAgJz9hcHBfaWQ9JyArIGJhc2VMYXllckNvbmZpZy5hcHBfaWQgKyAnJmFwcF9jb2RlPScgKyBiYXNlTGF5ZXJDb25maWcuYXBpX2tleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzb3VyY2UgPSBuZXcgWFlaKGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5oZXJlW2Jhc2VMYXllckNvbmZpZy5oZXJlX3R5cGVdLFxuICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucykpO1xuICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IFRpbGVMYXllcih7XG4gICAgICAgICAgICAgIHByZWxvYWQ6IEluZmluaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRTb3VyY2Uoc291cmNlKTtcblxuICAgICAgICAgIH0gZWxzZSBpZiAoYmFzZUxheWVyQ29uZmlnLmhpZGVfaW5fYmUpIHtcbiAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBsYXllck9wdGlvbnMudXJsID0gXCJjb240Z2lzL2Jhc2VMYXllclRpbGVTZXJ2aWNlL1wiICsgYmFzZUxheWVyQ29uZmlnLmlkICsgXCIve3p9L3t4fS97eX1cIjtcbiAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBUaWxlTGF5ZXIoe1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBYWVooalF1ZXJ5LmV4dGVuZChcbiAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MubWFwYm94W2Jhc2VMYXllckNvbmZpZy5oZXJlX3R5cGVdLFxuICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ3dyb25nIEhFUkUgY29uZmlndXJhdGlvbiEnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RodW5kZXInOlxuICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuYXBpX2tleSAmJiBiYXNlTGF5ZXJDb25maWcudGh1bmRlcmZvcmVzdF90eXBlKSB7XG5cbiAgICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuc3R5bGUpIHtcbiAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IFwiaHR0cHM6Ly90aWxlLnRodW5kZXJmb3Jlc3QuY29tL1wiICsgYmFzZUxheWVyQ29uZmlnLnN0eWxlICsgXCIve3p9L3t4fS97eX0ucG5nP2FwaWtleT1cIiArIGJhc2VMYXllckNvbmZpZy5hcGlfa2V5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgVGlsZUxheWVyKCk7XG4gICAgICAgICAgICBzb3VyY2UgPSBuZXcgWFlaKFxuICAgICAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3MudGh1bmRlcmZvcmVzdFtiYXNlTGF5ZXJDb25maWcudGh1bmRlcmZvcmVzdF90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRTb3VyY2Uoc291cmNlKTtcblxuICAgICAgICAgIH0gZWxzZSBpZiAoYmFzZUxheWVyQ29uZmlnLmhpZGVfaW5fYmUpIHtcbiAgICAgICAgICAgIGxheWVyT3B0aW9ucy51cmwgPSBcImNvbjRnaXMvYmFzZUxheWVyVGlsZVNlcnZpY2UvXCIgKyBiYXNlTGF5ZXJDb25maWcuaWQgKyBcIi97en0ve3h9L3t5fVwiO1xuICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IFRpbGVMYXllcih7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFhZWihqUXVlcnkuZXh0ZW5kKFxuICAgICAgICAgICAgICAgICAgc291cmNlQ29uZmlncy5tYXBib3hbYmFzZUxheWVyQ29uZmlnLnRodW5kZXJmb3Jlc3RfdHlwZV0sXG4gICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybignd3JvbmcgVGh1bmRlcmZvcmVzdCBjb25maWd1cmF0aW9uIScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZ29vZ2xlJzpcbiAgICAgICAgICAvL0B0b2RvXG4gICAgICAgICAgY29uc29sZS53YXJuKCdnb29nbGUtbWFwcyBhcmUgY3VycmVudGx5IHVuc3VwcG9ydGVkJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2JpbmcnOlxuICAgICAgICAgIGlmIChiYXNlTGF5ZXJDb25maWcuYXBpX2tleSAmJiBiYXNlTGF5ZXJDb25maWcuc3R5bGUpIHtcbiAgICAgICAgICAgIG5ld0Jhc2VsYXllciA9IG5ldyBUaWxlTGF5ZXIoKTtcbiAgICAgICAgICAgIGxldCBzb3VyY2UgPSBuZXcgQmluZ01hcHMoe1xuICAgICAgICAgICAgICBjdWx0dXJlOiBuYXZpZ2F0b3IubGFuZ3VhZ2VzID8gbmF2aWdhdG9yLmxhbmd1YWdlc1swXSA6IChuYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLnVzZXJMYW5ndWFnZSksXG4gICAgICAgICAgICAgIGtleTogYmFzZUxheWVyQ29uZmlnLmFwaV9rZXksXG4gICAgICAgICAgICAgIGltYWdlcnlTZXQ6IGJhc2VMYXllckNvbmZpZy5zdHlsZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRTb3VyY2Uoc291cmNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCd3cm9uZyBiaW5nLWtleSBvciBpbnZhbGlkIGltYWdlcnktc2V0IScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnd21zJzpcbiAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLnVybC5pbmRleE9mKCdodHRwcycpICE9PSAtMSkge1xuICAgICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IFRpbGVMYXllcih7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRpbGVXTVMoe1xuICAgICAgICAgICAgICAgIHVybDogYmFzZUxheWVyQ29uZmlnLnVybCxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgIExBWUVSUzogYmFzZUxheWVyQ29uZmlnLnBhcmFtcy5sYXllcnMsXG4gICAgICAgICAgICAgICAgICBWRVJTSU9OOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAvL0ZPUk1BVDogYmFzZUxheWVyQ29uZmlnLnBhcmFtcy5mb3JtYXQsXG4gICAgICAgICAgICAgICAgICBUUkFOU1BBUkVOVDogYmFzZUxheWVyQ29uZmlnLnBhcmFtcy50cmFuc3BhcmVudFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ3V0dGVyOiBiYXNlTGF5ZXJDb25maWcuZ3V0dGVyLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uczogYmFzZUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uICsgJyAnICsgT1NNX1JFTF9BVFRSSUJVVElPTixcbiAgICAgICAgICAgICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cydcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIC8vZXh0ZW50OiBvbC5wcm9qLnRyYW5zZm9ybUV4dGVudChbNS41OTMzNCwgNTAuMDU3OCwgOS43NDE1OCwgNTIuNzk5OF0sICdFUFNHOjQzMjYnLCAnRVBTRzozODU3JylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdCYXNlbGF5ZXIgPSBuZXcgVGlsZUxheWVyKHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGlsZVdNUyh7XG4gICAgICAgICAgICAgICAgdXJsOiBiYXNlTGF5ZXJDb25maWcudXJsLFxuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgTEFZRVJTOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLmxheWVycyxcbiAgICAgICAgICAgICAgICAgIFZFUlNJT046IGJhc2VMYXllckNvbmZpZy5wYXJhbXMudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgIC8vRk9STUFUOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgIFRSQU5TUEFSRU5UOiBiYXNlTGF5ZXJDb25maWcucGFyYW1zLnRyYW5zcGFyZW50XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBndXR0ZXI6IGJhc2VMYXllckNvbmZpZy5ndXR0ZXIsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRpb25zOiBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBPU01fUkVMX0FUVFJJQlVUSU9OXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAvL2V4dGVudDogb2wucHJvai50cmFuc2Zvcm1FeHRlbnQoWzUuNTkzMzQsIDUwLjA1NzgsIDkuNzQxNTgsIDUyLjc5OThdLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2ltYWdlJzpcbiAgICAgICAgICB2YXIgcHJvamVjdGlvbiA9IG5ldyBQcm9qZWN0aW9uKHtcbiAgICAgICAgICAgIGNvZGU6ICdpbWFnZScsXG4gICAgICAgICAgICB1bml0czogJ3BpeGVscycsXG4gICAgICAgICAgICBleHRlbnQ6IGJhc2VMYXllckNvbmZpZy5leHRlbnQgPyBiYXNlTGF5ZXJDb25maWcuZXh0ZW50IDogWzAsIDAsIDE5MjAsIDEwODBdXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IEltYWdlKHtcbiAgICAgICAgICAgIHNvdXJjZTogbmV3IEltYWdlU3RhdGljKHtcbiAgICAgICAgICAgICAgdXJsOiBiYXNlTGF5ZXJDb25maWcuaW1hZ2VTcmMsXG4gICAgICAgICAgICAgIGltYWdlRXh0ZW50OiBiYXNlTGF5ZXJDb25maWcuZXh0ZW50ID8gYmFzZUxheWVyQ29uZmlnLmV4dGVudCA6IFswLCAwLCAxOTIwLCAxMDgwXSxcbiAgICAgICAgICAgICAgcHJvamVjdGlvbjogcHJvamVjdGlvblxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgICAvLyBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgLy8gICBzZWxmLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5zZXRDZW50ZXIob2wuZXh0ZW50LmdldENlbnRlcihiYXNlTGF5ZXJDb25maWcuZXh0ZW50ID8gYmFzZUxheWVyQ29uZmlnLmV4dGVudCA6IFswLCAwLCA4ODYsIDQzNV0pKTtcbiAgICAgICAgICAvLyAgIHNlbGYubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLnNldFpvb20oMTgpO1xuICAgICAgICAgIC8vICAgfSwgMzAwMCk7XG5cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdnZW9pbWFnZSc6XG4gICAgICAgICAgbGV0IGFyclNvdXJjZSA9IEpTT04ucGFyc2UoYmFzZUxheWVyQ29uZmlnLmdlb0ltYWdlSnNvbik7XG4gICAgICAgICAgYXJyU291cmNlLnVybCA9IGJhc2VMYXllckNvbmZpZy5pbWFnZVNyYyA/IGJhc2VMYXllckNvbmZpZy5pbWFnZVNyYyA6IGFyclNvdXJjZS51cmw7XG4gICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IEltYWdlKFxuICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBvbF9zb3VyY2VfR2VvSW1hZ2UoXG4gICAgICAgICAgICAgICAgICAgIGFyclNvdXJjZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfSwgbGF5ZXJPcHRpb25zKVxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ293bSc6XG4gICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IFRpbGVMYXllcih7XG4gICAgICAgICAgICBzb3VyY2U6IG5ldyBYWVooe1xuICAgICAgICAgICAgICB1cmw6IGJhc2VMYXllckNvbmZpZy51cmwgKyBiYXNlTGF5ZXJDb25maWcuYXBwX2lkICsgJy97en0ve3h9L3t5fT9oYXNoPScgKyBiYXNlTGF5ZXJDb25maWcuYXBpX2tleSxcbiAgICAgICAgICAgICAgYXR0cmlidXRpb25zOiBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBPU01fUkVMX0FUVFJJQlVUSU9OXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC8vZXh0ZW50OiBvbC5wcm9qLnRyYW5zZm9ybUV4dGVudChbNS41OTMzNCwgNTAuMDU3OCwgOS43NDE1OCwgNTIuNzk5OF0sICdFUFNHOjQzMjYnLCAnRVBTRzozODU3JylcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZ3JvdXAnOlxuICAgICAgICAgIGxldCBiYXNlTGF5ZXJHcm91cCA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGluZGV4IGluIGJhc2VMYXllckNvbmZpZ1snbGF5ZXJHcm91cCddKSB7XG4gICAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnWydsYXllckdyb3VwJ10uaGFzT3duUHJvcGVydHkoaW5kZXgpKSB7XG5cbiAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSB0aGlzLmNyZWF0ZUJhc2VMYXllcihudWxsLCBiYXNlTGF5ZXJDb25maWdbJ2xheWVyR3JvdXAnXVtpbmRleF0sIHNvdXJjZUNvbmZpZ3MpO1xuICAgICAgICAgICAgICBsZXQgbWF4Wm9vbSA9IHRoaXMucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0UmVzb2x1dGlvbkZvclpvb20oYmFzZUxheWVyQ29uZmlnWydsYXllckdyb3VwJ11baW5kZXhdWydtaW5ab29tJ10pO1xuICAgICAgICAgICAgICBsZXQgbWluWm9vbSA9IHRoaXMucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0UmVzb2x1dGlvbkZvclpvb20oYmFzZUxheWVyQ29uZmlnWydsYXllckdyb3VwJ11baW5kZXhdWydtYXhab29tJ10pO1xuICAgICAgICAgICAgICBlbGVtZW50LnNldE1pblJlc29sdXRpb24obWluWm9vbSk7XG4gICAgICAgICAgICAgIGVsZW1lbnQuc2V0TWF4UmVzb2x1dGlvbihtYXhab29tKTtcbiAgICAgICAgICAgICAgYmFzZUxheWVyR3JvdXAucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3QmFzZWxheWVyID0gbmV3IExheWVyR3JvdXAoe1xuICAgICAgICAgICAgbGF5ZXJzOiBiYXNlTGF5ZXJHcm91cFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS53YXJuKCd1bnN1cHBvcnRlZCBwcm92aWRlcicpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgaWYgKGJhc2VMYXllckNvbmZpZ1snY29uc2VudElkJ10pIHtcbiAgICAgIGlmICh0eXBlb2Yga2xhcm8gIT09IFwidW5kZWZpbmVkXCIgJiYga2xhcm8uZ2V0TWFuYWdlciAmJiBrbGFyby5nZXRNYW5hZ2VyKCkpIHtcbiAgICAgICAgbGV0IG1hbmFnZXIgPSBrbGFyby5nZXRNYW5hZ2VyKCk7XG4gICAgICAgIGxldCB3YXRjaGVyO1xuICAgICAgICBpZiAobmV3QmFzZWxheWVyIGluc3RhbmNlb2YgVGlsZUxheWVyKSB7XG4gICAgICAgICAgbGV0IHNvdXJjZSA9IG5ld0Jhc2VsYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICBpZiAoIW1hbmFnZXIuZ2V0Q29uc2VudChiYXNlTGF5ZXJDb25maWdbJ2NvbnNlbnRJZCddKSkge1xuICAgICAgICAgICAgbmV3QmFzZWxheWVyLnNldFNvdXJjZShkdW1teVNvdXJjZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdhdGNoZXIgPSB7XG4gICAgICAgICAgICB1cGRhdGU6ICh3YXRjaGVyLCBhY3Rpb24sIGNvbnNlbnRTdGF0dXMpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGNvbnNlbnRTdGF0dXNbYmFzZUxheWVyQ29uZmlnWydjb25zZW50SWQnXV0pIHtcbiAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIuc2V0U291cmNlKHNvdXJjZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3QmFzZWxheWVyLnNldFNvdXJjZShkdW1teVNvdXJjZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmV3QmFzZWxheWVyIGluc3RhbmNlb2YgTGF5ZXJHcm91cCkge1xuICAgICAgICAgIGxldCBsYXllcnMgPSBuZXdCYXNlbGF5ZXIuZ2V0TGF5ZXJzKCk7XG4gICAgICAgICAgaWYgKCFtYW5hZ2VyLmdldENvbnNlbnQoYmFzZUxheWVyQ29uZmlnWydjb25zZW50SWQnXSkpIHtcbiAgICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRMYXllcnMobmV3IENvbGxlY3Rpb24oW25ldyBUaWxlTGF5ZXIoe3NvdXJjZTogZHVtbXlTb3VyY2V9KV0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2F0Y2hlciA9IHtcbiAgICAgICAgICAgIHVwZGF0ZTogKHdhdGNoZXIsIGFjdGlvbiwgY29uc2VudFN0YXR1cykgPT4ge1xuICAgICAgICAgICAgICBpZiAoY29uc2VudFN0YXR1c1tiYXNlTGF5ZXJDb25maWdbJ2NvbnNlbnRJZCddXSkge1xuICAgICAgICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRMYXllcnMobGF5ZXJzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdCYXNlbGF5ZXIuc2V0TGF5ZXJzKG5ldyBDb2xsZWN0aW9uKFtuZXcgVGlsZUxheWVyKHtzb3VyY2U6IGR1bW15U291cmNlfSldKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWFuYWdlci53YXRjaCh3YXRjaGVyKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBIb2ZmZkNvbnNlbnRNYW5hZ2VyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmIChuZXdCYXNlbGF5ZXIgaW5zdGFuY2VvZiBUaWxlTGF5ZXIpIHtcbiAgICAgICAgICBsZXQgc291cmNlID0gbmV3QmFzZWxheWVyLmdldFNvdXJjZSgpO1xuICAgICAgICAgIEhvZmZmQ29uc2VudE1hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcignY29uc2VudDphY2NlcHRlZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmNvbnNlbnRJZCA9PSBiYXNlTGF5ZXJDb25maWdbJ2NvbnNlbnRJZCddKSB7XG4gICAgICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRTb3VyY2Uoc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBIb2ZmZkNvbnNlbnRNYW5hZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnNlbnQ6cmV2b2tlZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmNvbnNlbnRJZCA9PSBiYXNlTGF5ZXJDb25maWdbJ2NvbnNlbnRJZCddKSB7XG4gICAgICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRTb3VyY2UoZHVtbXlTb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgaWYgKCFIb2ZmZkNvbnNlbnRNYW5hZ2VyLnJlcXVpcmVzQ29uc2VudChiYXNlTGF5ZXJDb25maWdbJ2NvbnNlbnRJZCddKSkge1xuICAgICAgICAgICAgbmV3QmFzZWxheWVyLnNldFNvdXJjZShkdW1teVNvdXJjZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5ld0Jhc2VsYXllciBpbnN0YW5jZW9mIExheWVyR3JvdXApIHtcbiAgICAgICAgICBsZXQgbGF5ZXJzID0gbmV3QmFzZWxheWVyLmdldExheWVycygpO1xuICAgICAgICAgIEhvZmZmQ29uc2VudE1hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcignY29uc2VudDphY2NlcHRlZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmNvbnNlbnRJZCA9PSBiYXNlTGF5ZXJDb25maWdbJ2NvbnNlbnRJZCddKSB7XG4gICAgICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRMYXllcnMobGF5ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBIb2ZmZkNvbnNlbnRNYW5hZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnNlbnQ6cmV2b2tlZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmNvbnNlbnRJZCA9PSBiYXNlTGF5ZXJDb25maWdbJ2NvbnNlbnRJZCddKSB7XG4gICAgICAgICAgICAgIG5ld0Jhc2VsYXllci5zZXRMYXllcnMobmV3IENvbGxlY3Rpb24oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICBpZiAoIUhvZmZmQ29uc2VudE1hbmFnZXIucmVxdWlyZXNDb25zZW50KGJhc2VMYXllckNvbmZpZ1snY29uc2VudElkJ10pKSB7XG4gICAgICAgICAgICBuZXdCYXNlbGF5ZXIuc2V0TGF5ZXJzKG5ldyBDb2xsZWN0aW9uKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXdCYXNlbGF5ZXI7XG4gIH1cblxuICBmaWx0ZXJMYXllcnNGb3JCYXNlbGF5ZXIoYmFzZWxheWVySWQpIHtcbiAgICBsZXQgYXJyTGF5ZXJzID0gdGhpcy5wcm94eS5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzO1xuICAgIGZvciAobGV0IGlkIGluIGFyckxheWVycykge1xuICAgICAgaWYgKGFyckxheWVycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgbGV0IGxheWVyID0gYXJyTGF5ZXJzW2lkXTtcbiAgICAgICAgaWYgKGxheWVyKSB7XG4gICAgICAgICAgbGV0IHNob3dMYXllciA9IGZhbHNlO1xuICAgICAgICAgIGlmIChsYXllci5hY3RpdmVGb3JCYXNlbGF5ZXJzID09PSBcImFsbFwiIHx8IGxheWVyLnJlbmRlclNwZWNpYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsYXllci5hY3RpdmVGb3JCYXNlbGF5ZXJzKSB7XG4gICAgICAgICAgICAgIHNob3dMYXllciA9ICEhbGF5ZXIuYWN0aXZlRm9yQmFzZWxheWVycy5pbmNsdWRlcyhiYXNlbGF5ZXJJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaG93TGF5ZXIpIHtcbiAgICAgICAgICAgIGFyckxheWVyc1tpZF0uZGlzcGxheSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnByb3h5LmxheWVyQ29udHJvbGxlci5zaG93TGF5ZXIoaWQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJMYXllcnNbaWRdLmRpc3BsYXkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucHJveHkubGF5ZXJDb250cm9sbGVyLmhpZGVMYXllcihpZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGxldCBzdGFyYm9hcmQgPSB0aGlzLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5jb250cm9scy5zdGFyYm9hcmQ7XG4gICAgLy8gaWYgKHRoaXMucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEubGF5ZXJzd2l0Y2hlci5lbmFibGUpIHtcbiAgICAvLyAgIGlmIChzdGFyYm9hcmQgJiYgc3RhcmJvYXJkLmluaXRpYWxpemVkKSB7XG4gICAgLy8gICAgIGlmICghc3RhcmJvYXJkLnBsdWdpbnMubGF5ZXJzd2l0Y2hlcikge1xuICAgIC8vICAgICAgIHN0YXJib2FyZC5wbHVnaW5zLmxheWVyc3dpdGNoZXIgPSBuZXcgTGF5ZXJzd2l0Y2hlcihzdGFyYm9hcmQpO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHN0YXJib2FyZC5wbHVnaW5zLmxheWVyc3dpdGNoZXIubG9hZENvbnRlbnQoKTtcbiAgICAvLyAgICAgLy8gc3RhcmJvYXJkLnBsdWdpbnMubGF5ZXJzd2l0Y2hlci5hY3RpdmF0ZSgpO1xuICAgIC8vICAgfVxuICAgIC8vIH1cblxuICB9XG5cbiAgc2hvd0Jhc2VMYXllcihiYXNlTGF5ZXJVaWQpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcyxcbiAgICAgIGxheWVycyxcbiAgICAgIGJhc2VsYXllcixcbiAgICAgIGFkZEJhc2VsYXllcixcbiAgICAgIGJhc2VMYXllcnMsXG4gICAgICBzb3VyY2VDb25maWdzID0gW10sXG4gICAgICBuZXdCYXNlbGF5ZXIsXG4gICAgICBsYXllck9wdGlvbnMsXG4gICAgICBpLFxuICAgICAgdmlldztcbiAgICBcbiAgICBsZXQgYmFzZUxheWVyQ29uZmlnID0gdGhpcy5hcnJCYXNlbGF5ZXJzW2Jhc2VMYXllclVpZF07XG4gICAgaWYgKHRoaXMucHJveHkubGF5ZXJzX2xvYWRlZCkge1xuICAgICAgdGhpcy5maWx0ZXJMYXllcnNGb3JCYXNlbGF5ZXIoYmFzZUxheWVyVWlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm94eS5ob29rX2xheWVyX2xvYWRlZC5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLmZpbHRlckxheWVyc0ZvckJhc2VsYXllcihiYXNlTGF5ZXJVaWQpO1xuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBpZiAoKHR5cGVvZiBiYXNlTGF5ZXJDb25maWcgIT09IFwidW5kZWZpbmVkXCIpICYmICFiYXNlTGF5ZXJDb25maWcubGF5ZXIpIHtcbiAgICAgIC8vIGNyZWF0ZSBsYXllclxuICAgICAgc291cmNlQ29uZmlncy5vc20gPSBjb25maWcub3NtO1xuICAgICAgc291cmNlQ29uZmlncy5zdGFtZW4gPSBjb25maWcuc3RhbWVuO1xuICAgICAgc291cmNlQ29uZmlncy5vdG0gPSBjb25maWcub3RtO1xuICAgICAgLy9tYXBRdWVzdFNvdXJjZUNvbmZpZ3MgPSBjNGcubWFwcy5jb25maWcubWFwcXVlc3Q7XG4gICAgICBzb3VyY2VDb25maWdzLm1hcGJveCA9IGNvbmZpZy5tYXBib3g7XG4gICAgICBzb3VyY2VDb25maWdzLm1hcHogPSBjb25maWcubWFwejtcbiAgICAgIHNvdXJjZUNvbmZpZ3Mua2xva2FuID0gY29uZmlnLmtsb2thbjtcbiAgICAgIHNvdXJjZUNvbmZpZ3MuaGVyZSA9IGNvbmZpZy5oZXJlO1xuICAgICAgc291cmNlQ29uZmlncy50aHVuZGVyZm9yZXN0ID0gY29uZmlnLnRodW5kZXJmb3Jlc3Q7XG5cbiAgICAgIC8vbmV3QmFzZWxheWVyID0gbmV3IFRpbGVMYXllcih7XG4gICAgICAvLyAgc291cmNlOiBuZXcgT1NNKClcbiAgICAgIC8vfSk7XG5cbiAgICAgIGxheWVyT3B0aW9ucyA9IHt9O1xuXG4gICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLmF0dHJpYnV0aW9uKSB7XG4gICAgICAgIGlmIChsYXllck9wdGlvbnMuYXR0cmlidXRpb25zKSB7XG4gICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgKyAnICcgKyBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IE9TTV9SRUxfQVRUUklCVVRJT04gKyAnICcgKyBiYXNlTGF5ZXJDb25maWcuYXR0cmlidXRpb247XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMpIHtcbiAgICAgICAgc3dpdGNoIChiYXNlTGF5ZXJDb25maWcucHJvdmlkZXIpIHtcbiAgICAgICAgICBjYXNlICdvc20nOlxuICAgICAgICAgICAgaWYgKHNvdXJjZUNvbmZpZ3Mub3NtW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IHNvdXJjZUNvbmZpZ3Mub3NtW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0uYXR0cmlidXRpb25zO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IE9TTV9SRUxfQVRUUklCVVRJT047XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdzdGFtZW4nOlxuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IHNvdXJjZUNvbmZpZ3Muc3RhbWVuW2Jhc2VMYXllckNvbmZpZy5zdHlsZV0uYXR0cmlidXRpb25zO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbWFwYm94JzpcbiAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBzb3VyY2VDb25maWdzLm1hcGJveFtiYXNlTGF5ZXJDb25maWcubWFwYm94X3R5cGVdLmF0dHJpYnV0aW9ucztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ21hcHonOlxuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybCA9IGJhc2VMYXllckNvbmZpZy51cmw7XG4gICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gc291cmNlQ29uZmlncy5tYXB6LmF0dHJpYnV0aW9ucztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ290bSc6XG4gICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gYmFzZUxheWVyQ29uZmlnLnVybDtcbiAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBzb3VyY2VDb25maWdzLm90bS5hdHRyaWJ1dGlvbnM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdrbG9rYW4nOlxuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IHNvdXJjZUNvbmZpZ3Mua2xva2FuW2Jhc2VMYXllckNvbmZpZy5rbG9rYW5fdHlwZV0uYXR0cmlidXRpb25zO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnaGVyZSc6XG4gICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gc291cmNlQ29uZmlncy5oZXJlW2Jhc2VMYXllckNvbmZpZy5oZXJlX3R5cGVdLmF0dHJpYnV0aW9ucztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3RodW5kZXInOlxuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IHNvdXJjZUNvbmZpZ3MudGh1bmRlcmZvcmVzdFtiYXNlTGF5ZXJDb25maWcudGh1bmRlcmZvcmVzdF90eXBlXS5hdHRyaWJ1dGlvbnM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdjb240Z2lzSW8nOlxuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9ICdNYXBzZXJ2aWNlcyB2aWEgPGEgaHJlZj1cImh0dHBzOi8vY29uNGdpcy5pb1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCI+Y29uNGdpcy5pbzwvYT4uICcrIE9TTV9SRUxfQVRUUklCVVRJT047XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IE9TTV9SRUxfQVRUUklCVVRJT047XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvL1RvRG8gaGVscGVyIGNsYXNzIGZvciBhdHRyaWJ1dGlvbnNcblxuICAgICAgLy9hZGRpdGlvbmFsIGF0dHJpYnV0aW9uXG4gICAgICBpZiAodGhpcy5tYXBDb250cm9sbGVyLmRhdGEgJiYgdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYXR0cmlidXRpb24gJiYgdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYXR0cmlidXRpb24uYWRkaXRpb25hbCkge1xuICAgICAgICBpZiAobGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucykge1xuICAgICAgICAgIGxldCBhZGRpdGlvbmFsQXR0cmlidXRpb24gPSB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5hdHRyaWJ1dGlvbi5hZGRpdGlvbmFsO1xuXG4gICAgICAgICAgZXhpc3RzID0gZmFsc2U7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChsYXllck9wdGlvbnMuYXR0cmlidXRpb25zW2ldID09PSBhZGRpdGlvbmFsQXR0cmlidXRpb24pIHtcbiAgICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zICsgJyAnICsgYWRkaXRpb25hbEF0dHJpYnV0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYXR0cmlidXRpb24uYWRkaXRpb25hbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvL1RvRG8gdHlwZSBjbGFzcyBmb3IgZ2Vvc2VhcmNoX2VuZ2luZVxuICAgICAgLy9nZW9zZWFyY2ggYXR0cmlidXRpb25cbiAgICAgIGlmICh0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5nZW9zZWFyY2gpIHtcblxuICAgICAgICBpZiAodGhpcy5tYXBDb250cm9sbGVyLmRhdGEgJiZcbiAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5hdHRyaWJ1dGlvbikge1xuXG4gICAgICAgICBsZXQgZ2Vvc2VhcmNoQXR0cmlidXRpb24gPSB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5hdHRyaWJ1dGlvbi5nZW9zZWFyY2ggPyB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5hdHRyaWJ1dGlvbi5nZW9zZWFyY2ggOiBcIlwiO1xuICAgICAgICAgIHZhciBleGlzdHMgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoIWxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMpIHtcbiAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChsYXllck9wdGlvbnMuYXR0cmlidXRpb25zW2ldID09PSBnZW9zZWFyY2hBdHRyaWJ1dGlvbikge1xuICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgKyAnICcgKyBnZW9zZWFyY2hBdHRyaWJ1dGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gZ2Vvc2VhcmNoQXR0cmlidXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGV0IHJvdXRlckF0dHJpYnV0aW9uID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuYXR0cmlidXRpb24ucm91dGVyID8gXCIgLSBcIiArIHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmF0dHJpYnV0aW9uLnJvdXRlciA6IFwiXCI7XG4gICAgICAgICAgdmFyIGV4aXN0cyA9IGZhbHNlO1xuICAgICAgICAgIGlmICghbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucykge1xuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnNbaV0gPT09IHJvdXRlckF0dHJpYnV0aW9uKSB7XG4gICAgICAgICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgICBsYXllck9wdGlvbnMuYXR0cmlidXRpb25zID0gbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyArICcgJyArIHJvdXRlckF0dHJpYnV0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSByb3V0ZXJBdHRyaWJ1dGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5zb3J0aW5nKSB7XG4gICAgICAgIGxheWVyT3B0aW9ucy5zb3J0ID0gYmFzZUxheWVyQ29uZmlnLnNvcnRpbmc7XG4gICAgICB9XG4gICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLm1pblpvb20gJiYgYmFzZUxheWVyQ29uZmlnLm1pblpvb20gPj0gMCkge1xuICAgICAgICBsYXllck9wdGlvbnMubWluWm9vbSA9IGJhc2VMYXllckNvbmZpZy5taW5ab29tO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5tYXhab29tICYmIGJhc2VMYXllckNvbmZpZy5tYXhab29tID49IDApIHtcbiAgICAgICAgbGF5ZXJPcHRpb25zLm1heFpvb20gPSBiYXNlTGF5ZXJDb25maWcubWF4Wm9vbTtcbiAgICAgIH1cblxuICAgICAgbmV3QmFzZWxheWVyID0gdGhpcy5jcmVhdGVCYXNlTGF5ZXIobGF5ZXJPcHRpb25zLCBiYXNlTGF5ZXJDb25maWcsIHNvdXJjZUNvbmZpZ3MpO1xuICAgICAgaWYgKGJhc2VMYXllckNvbmZpZy5oYXNPdmVybGF5cykge1xuICAgICAgICBmb3IgKGkgPSAwOyBpPCBiYXNlTGF5ZXJDb25maWcub3ZlcmxheXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoIWJhc2VMYXllckNvbmZpZy5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5c1tiYXNlTGF5ZXJDb25maWcub3ZlcmxheXNbaV0uaWRdKSB7XG4gICAgICAgICAgICBiYXNlTGF5ZXJDb25maWcub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNbYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlzW2ldLmlkXSA9IG5ldyBDNGdPdmVybGF5KGJhc2VMYXllckNvbmZpZy5vdmVybGF5c1tpXSx0aGlzLm1hcENvbnRyb2xsZXIpO1xuICAgICAgICAgICAgYmFzZUxheWVyQ29uZmlnLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzW2Jhc2VMYXllckNvbmZpZy5vdmVybGF5c1tpXS5pZF0ubGF5ZXIgPSBiYXNlTGF5ZXJDb25maWcub3ZlcmxheUNvbnRyb2xsZXIuc2hvd092ZXJsYXlMYXllcihiYXNlTGF5ZXJDb25maWcub3ZlcmxheXNbaV0uaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFyckJhc2VsYXllcnNbYmFzZUxheWVyVWlkXS5sYXllciA9IG5ld0Jhc2VsYXllcjtcbiAgICB9XG4gICAgZWxzZSAgaWYgKHR5cGVvZiBiYXNlTGF5ZXJDb25maWcgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiY29uZmlnIFwiICsgYmFzZUxheWVyVWlkICsgXCIgbm90IGZvdW5kXCIpXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gLy8gZGVhY3RpdmF0ZSBvbGQgb3ZlcmxheXNcbiAgICBpZiAodGhpcy5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZCAmJiAodGhpcy5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZCAhPT0gYmFzZUxheWVyVWlkKSkge1xuICAgICAgbGV0IG9sZEJhc2VsYXllciA9IHRoaXMuYXJyQmFzZWxheWVyc1t0aGlzLnByb3h5LmFjdGl2ZUJhc2VsYXllcklkXTtcbiAgICAgIGlmIChvbGRCYXNlbGF5ZXIub3ZlcmxheUNvbnRyb2xsZXIgJiYgb2xkQmFzZWxheWVyLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzXG4gICAgICAgICYmIG9sZEJhc2VsYXllci5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBvbGRCYXNlbGF5ZXIub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXMpIHtcbiAgICAgICAgICBpZiAob2xkQmFzZWxheWVyLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzLmhhc093blByb3BlcnR5KGtleSkgJiYga2V5ICE9PSBcImxlbmd0aFwiKSB7XG4gICAgICAgICAgICBsZXQgb3ZlcmxheSA9IG9sZEJhc2VsYXllci5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5c1trZXldO1xuICAgICAgICAgICAgb3ZlcmxheS5jaGFuZ2VPcGFjaXR5KDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBhY3RpdmF0ZSBjdXJyZW50IG92ZXJsYXlzXG4gICAgYmFzZWxheWVyID0gdGhpcy5hcnJCYXNlbGF5ZXJzW2Jhc2VMYXllclVpZF07XG4gICAgaWYgKGJhc2VsYXllci5vdmVybGF5Q29udHJvbGxlciAmJiBiYXNlbGF5ZXIub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNcbiAgICAmJiBiYXNlbGF5ZXIub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQga2V5IGluIGJhc2VsYXllci5vdmVybGF5Q29udHJvbGxlci5hcnJPdmVybGF5cykge1xuICAgICAgICBpZiAoYmFzZWxheWVyLm92ZXJsYXlDb250cm9sbGVyLmFyck92ZXJsYXlzLmhhc093blByb3BlcnR5KGtleSkgJiYga2V5ICE9PSBcImxlbmd0aFwiKSB7XG4gICAgICAgICAgbGV0IG92ZXJsYXkgPSBiYXNlbGF5ZXIub3ZlcmxheUNvbnRyb2xsZXIuYXJyT3ZlcmxheXNba2V5XTtcbiAgICAgICAgICBvdmVybGF5LmNoYW5nZU9wYWNpdHkob3ZlcmxheS5vcGFjaXR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxheWVycyA9IHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0TGF5ZXJzKCk7XG5cbiAgICAvLyBzZWN1cmVcbiAgICBpZiAobGF5ZXJzLml0ZW0oMCkuZ2V0KCdjaGVja1N1bScpID09PSBcImJhc2VNYXBzTGF5ZXJcIikge1xuICAgICAgYmFzZUxheWVycyA9IGxheWVycy5pdGVtKDApLmdldExheWVycygpO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuYXJyQmFzZWxheWVyc1tiYXNlTGF5ZXJVaWRdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGJhc2VsYXllciA9IHRoaXMuYXJyQmFzZWxheWVyc1tiYXNlTGF5ZXJVaWRdLmxheWVyO1xuXG4gICAgICAgIGlmIChiYXNlbGF5ZXIpIHtcbiAgICAgICAgICBhZGRCYXNlbGF5ZXIgPSB0cnVlO1xuICAgICAgICAgIGJhc2VMYXllcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCAmJiAoZWxlbWVudCA9PT0gYmFzZWxheWVyKSkge1xuICAgICAgICAgICAgICBlbGVtZW50LnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICAgIGFkZEJhc2VsYXllciA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhZGRCYXNlbGF5ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICAgIGlmIChhZGRCYXNlbGF5ZXIpIHtcbiAgICAgICAgICAgIGJhc2VMYXllcnMucHVzaChiYXNlbGF5ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZpZXcgPSB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKTtcbiAgICAgICAgdmFyIHpvb20gPSB2aWV3LmdldFpvb20oKTtcbiAgICAgICAgdmFyIGNlbnRlciA9IHZpZXcuZ2V0Q2VudGVyKCk7XG4gICAgICAgIGlmICgoYmFzZUxheWVyQ29uZmlnLm1pblpvb20gJiYgYmFzZUxheWVyQ29uZmlnLm1pblpvb20gPj0gMCkgfHxcbiAgICAgICAgICAoYmFzZUxheWVyQ29uZmlnLm1heFpvb20gJiYgYmFzZUxheWVyQ29uZmlnLm1heFpvb20gPj0gMCkpIHtcbiAgICAgICAgICBpZiAoYmFzZUxheWVyQ29uZmlnLm1pblpvb20gJiYgKHZpZXcuZ2V0Wm9vbSgpIDwgYmFzZUxheWVyQ29uZmlnLm1pblpvb20pKSB7XG4gICAgICAgICAgICB2aWV3LnNldFpvb20oYmFzZUxheWVyQ29uZmlnLm1pblpvb20pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYmFzZUxheWVyQ29uZmlnLm1heFpvb20gJiYgKHZpZXcuZ2V0Wm9vbSgpID4gYmFzZUxheWVyQ29uZmlnLm1heFpvb20pKSB7XG4gICAgICAgICAgICB2aWV3LnNldFpvb20oYmFzZUxheWVyQ29uZmlnLm1heFpvb20pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtYXBEYXRhID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGE7XG4gICAgICAgICAgLy8gaWYgKG1hcERhdGEuem9vbWxldmVsIHx8IG1hcERhdGEubW91c2Vwb3NpdGlvbikge1xuICAgICAgICAgIHZpZXcuc2V0TWluWm9vbShwYXJzZUludChiYXNlTGF5ZXJDb25maWcubWluWm9vbSwgMTApIHx8IDApO1xuICAgICAgICAgIHZpZXcuc2V0TWF4Wm9vbShwYXJzZUludChiYXNlTGF5ZXJDb25maWcubWF4Wm9vbSwgMTApIHx8IDE5KTtcbiAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLnNldFZpZXcodmlldyk7XG4gICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBiYXNlTGF5ZXJDb25maWcgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMucHJveHkuYWN0aXZlQmFzZWxheWVySWQgPSBiYXNlTGF5ZXJDb25maWcuaWQ7XG5cbiAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfdmlzaWJpbGl0eSwgYmFzZUxheWVyQ29uZmlnKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBDZXNpdW0gaW50ZWdyYXRpb25cbiAgICAgICAqL1xuICAgICAgaWYgKHR5cGVvZiBiYXNlTGF5ZXJDb25maWcgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdmFyIG1hcERhdGEgPSB0aGlzLm1hcENvbnRyb2xsZXIuZGF0YTtcbiAgICAgICAgaWYgKG1hcERhdGEuY2VzaXVtICYmIG1hcERhdGEuY2VzaXVtLmVuYWJsZSAmJiAobWFwRGF0YS5jZXNpdW0uYWx3YXlzIHx8IGJhc2VMYXllckNvbmZpZy5jZXNpdW0pKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLm9sM2QpIHtcbiAgICAgICAgICAgIHRoaXMub2wzZCA9IG5ldyBPTENlc2l1bSh7XG4gICAgICAgICAgICAgIG1hcDogdGhpcy5tYXBDb250cm9sbGVyLm1hcCxcbiAgICAgICAgICAgICAgY3JlYXRlU3luY2hyb25pemVyczogZmFsc2UvKixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSB0aW1lRWx0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2wzZC5nZXRDZXNpdW1TY2VuZSgpLmdsb2JlLmVuYWJsZUxpZ2h0aW5nICYmIHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNldFVUQ0hvdXJzKHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2VzaXVtLkp1bGlhbkRhdGUuZnJvbURhdGUoZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENlc2l1bS5KdWxpYW5EYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0qL30pO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvKmNvbnN0IHNjZW5lID0gb2wzZC5nZXRDZXNpdW1TY2VuZSgpO1xuICAgICAgICAgIGNvbnN0IHRlcnJhaW5Qcm92aWRlciA9IG5ldyBDZXNpdW0uQ2VzaXVtVGVycmFpblByb3ZpZGVyKHtcbiAgICAgICAgICAgICAgdXJsOiAnLy9hc3NldHMuYWdpLmNvbS9zdGstdGVycmFpbi93b3JsZCcsXG4gICAgICAgICAgICAgIHJlcXVlc3RWZXJ0ZXhOb3JtYWxzOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2NlbmUudGVycmFpblByb3ZpZGVyID0gdGVycmFpblByb3ZpZGVyOyovXG4gICAgICAgICAgdGhpcy5vbDNkLnNldEVuYWJsZWQodHJ1ZSk7XG4gICAgICAgICAgLyp3aW5kb3dbJ3RvZ2dsZVRpbWUnXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBzY2VuZS5nbG9iZS5lbmFibGVMaWdodGluZyA9ICFzY2VuZS5nbG9iZS5lbmFibGVMaWdodGluZztcbiAgICAgICAgICAgICAgaWYgKHRpbWVFbHQuc3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgIHRpbWVFbHQuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGltZUVsdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfTsqL1xuXG4gICAgICAgICAgaWYgKCFqUXVlcnkoXCIuYzRnLWNvbnRyb2wtY29udGFpbmVyLXRvcC1sZWZ0XCIpLmhhc0NsYXNzKFwiYzRnLWNlc2l1bS1lbmFibGVkXCIpKSB7XG4gICAgICAgICAgICBqUXVlcnkoXCIuYzRnLWNvbnRyb2wtY29udGFpbmVyLXRvcC1sZWZ0XCIpLmFkZENsYXNzKFwiYzRnLWNlc2l1bS1lbmFibGVkXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLm9sM2QgJiYgdGhpcy5vbDNkLmdldEVuYWJsZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5vbDNkLnNldEVuYWJsZWQoZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoalF1ZXJ5KFwiLmM0Zy1jb250cm9sLWNvbnRhaW5lci10b3AtbGVmdFwiKS5oYXNDbGFzcyhcImM0Zy1jZXNpdW0tZW5hYmxlZFwiKSkge1xuICAgICAgICAgICAgalF1ZXJ5KFwiLmM0Zy1jb250cm9sLWNvbnRhaW5lci10b3AtbGVmdFwiKS5yZW1vdmVDbGFzcyhcImM0Zy1jZXNpdW0tZW5hYmxlZFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gZW5kIG9mIFwic2hvd0Jhc2VMYXllcigpXCJcbn0iLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cbmltcG9ydCB7QzRnT3ZlcmxheUNvbnRyb2xsZXJ9IGZyb20gXCIuL2M0Zy1vdmVybGF5LWNvbnRyb2xsZXJcIlxuXG5leHBvcnQgY2xhc3MgQzRnQmFzZWxheWVye1xuICAgIGNvbnN0cnVjdG9yKGJhc2VsYXllckFyciwgY29udHJvbGxlcikge1xuICAgICAgICB0aGlzLmlkID0gYmFzZWxheWVyQXJyWydpZCddO1xuICAgICAgICB0aGlzLnBpZCA9IGJhc2VsYXllckFyclsncGlkJ107XG4gICAgICAgIHRoaXMubmFtZSA9IGJhc2VsYXllckFyclsnbmFtZSddO1xuICAgICAgICB0aGlzLmRpc3BsYXlfbmFtZSA9IGJhc2VsYXllckFyclsnZGlzcGxheV9uYW1lJ107XG4gICAgICAgIHRoaXMucHJvdmlkZXIgPSBiYXNlbGF5ZXJBcnJbJ3Byb3ZpZGVyJ107XG4gICAgICAgIHRoaXMub3NtX3N0eWxlID0gYmFzZWxheWVyQXJyWydvc21fc3R5bGUnXTtcbiAgICAgICAgdGhpcy5vc21fc3R5bGVfdXJsMSA9IGJhc2VsYXllckFyclsnb3NtX3N0eWxlX3VybDEnXTtcbiAgICAgICAgdGhpcy5vc21fc3R5bGVfdXJsMiA9IGJhc2VsYXllckFyclsnb3NtX3N0eWxlX3VybDInXTtcbiAgICAgICAgdGhpcy5vc21fc3R5bGVfdXJsMyA9IGJhc2VsYXllckFyclsnb3NtX3N0eWxlX3VybDMnXTtcbiAgICAgICAgdGhpcy5vc21fc3R5bGVfdXJsNCA9IGJhc2VsYXllckFyclsnb3NtX3N0eWxlX3VybDQnXTtcbiAgICAgICAgdGhpcy5vc21fa2V5bmFtZSA9IGJhc2VsYXllckFyclsnb3NtX2tleW5hbWUnXTtcbiAgICAgICAgdGhpcy5tYXBib3hfdHlwZSA9IGJhc2VsYXllckFyclsnbWFwYm94X3R5cGUnXTtcbiAgICAgICAgdGhpcy5iaW5nX3N0eWxlID0gYmFzZWxheWVyQXJyWydiaW5nX3N0eWxlJ107XG4gICAgICAgIHRoaXMuc3R5bGUgPSBiYXNlbGF5ZXJBcnJbJ3N0eWxlJ107XG4gICAgICAgIHRoaXMuYXR0cmlidXRpb24gPSBiYXNlbGF5ZXJBcnJbJ2F0dHJpYnV0aW9uJ107XG4gICAgICAgIHRoaXMucGFyYW1zID0gYmFzZWxheWVyQXJyWydwYXJhbXMnXTtcbiAgICAgICAgdGhpcy53bXNfZ3V0dGVyID0gYmFzZWxheWVyQXJyWyd3bXNfZ3V0dGVyJ107XG4gICAgICAgIHRoaXMubWluWm9vbSA9IGJhc2VsYXllckFyclsnbWluWm9vbSddO1xuICAgICAgICB0aGlzLm1heFpvb20gPSBiYXNlbGF5ZXJBcnJbJ21heFpvb20nXTtcbiAgICAgICAgdGhpcy5wcm90ZWN0X2Jhc2VsYXllciA9IGJhc2VsYXllckFyclsncHJvdGVjdF9iYXNlbGF5ZXInXTtcbiAgICAgICAgdGhpcy5wZXJtaXR0ZWRfZ3JvdXBzID0gYmFzZWxheWVyQXJyWydwZXJtaXR0ZWRfZ3JvdXBzJ107XG4gICAgICAgIHRoaXMuYXBpX2tleSA9IGJhc2VsYXllckFyclsnYXBpS2V5J10gPyBiYXNlbGF5ZXJBcnJbJ2FwaUtleSddIDogYmFzZWxheWVyQXJyWydhcGlfa2V5J107XG4gICAgICAgIHRoaXMuYXBwX2lkID0gYmFzZWxheWVyQXJyWydhcHBfaWQnXTtcbiAgICAgICAgdGhpcy50aHVuZGVyZm9yZXN0X3R5cGUgPSBiYXNlbGF5ZXJBcnJbJ3RodW5kZXJmb3Jlc3RfdHlwZSddO1xuICAgICAgICB0aGlzLmhlcmVfdHlwZSA9IGJhc2VsYXllckFyclsnaGVyZV90eXBlJ107XG4gICAgICAgIHRoaXMuY2VzaXVtID0gYmFzZWxheWVyQXJyWydjZXNpdW0nXTtcbiAgICAgICAgdGhpcy5oaWRlX2luX2JlID0gYmFzZWxheWVyQXJyWydoaWRlX2luX2JlJ107XG4gICAgICAgIHRoaXMudXJsID0gYmFzZWxheWVyQXJyWyd1cmwnXTtcbiAgICAgICAgdGhpcy51cmxzID0gYmFzZWxheWVyQXJyWyd1cmxzJ107XG4gICAgICAgIHRoaXMua2xva2FuX3R5cGUgPSBiYXNlbGF5ZXJBcnJbJ2tsb2thbl90eXBlJ107XG4gICAgICAgIHRoaXMuc3R5bGVfdXJsID0gYmFzZWxheWVyQXJyWydzdHlsZV91cmwnXTtcbiAgICAgICAgdGhpcy5oYXNPdmVybGF5cyA9IGJhc2VsYXllckFyclsnaGFzT3ZlcmxheXMnXTtcbiAgICAgICAgdGhpcy5vdmVybGF5cyA9IGJhc2VsYXllckFyclsnb3ZlcmxheXMnXTtcbiAgICAgICAgdGhpcy5pbWFnZVNyYyA9IGJhc2VsYXllckFyclsnaW1hZ2Vfc3JjJ107XG4gICAgICAgIHRoaXMuZ2VvSW1hZ2VKc29uID0gYmFzZWxheWVyQXJyWydnZW9pbWFnZV9qc29uJ107XG4gICAgICAgIHRoaXMucHJldmlld19pbWFnZSA9IGJhc2VsYXllckFyclsncHJldmlld19pbWFnZSddO1xuICAgICAgICBpZihiYXNlbGF5ZXJBcnJbJ2xheWVyR3JvdXAnXSl7XG4gICAgICAgICAgICBsZXQgbGF5ZXJHcm91cCA9IFtdO1xuICAgICAgICAgICAgZm9yKGxldCBpbmRleCBpbiBiYXNlbGF5ZXJBcnJbJ2xheWVyR3JvdXAnXSApe1xuICAgICAgICAgICAgICAgIGlmKGJhc2VsYXllckFyclsnbGF5ZXJHcm91cCddLmhhc093blByb3BlcnR5KGluZGV4KSl7XG4gICAgICAgICAgICAgICAgICBsYXllckdyb3VwW2luZGV4XSA9IG5ldyBDNGdCYXNlbGF5ZXIoYmFzZWxheWVyQXJyWydsYXllckdyb3VwJ11baW5kZXhdWydlbnRyeSddKTtcbiAgICAgICAgICAgICAgICAgIGxheWVyR3JvdXBbaW5kZXhdWydtaW5ab29tJ10gPSBiYXNlbGF5ZXJBcnJbJ2xheWVyR3JvdXAnXVtpbmRleF1bJ21pblpvb20nXTtcbiAgICAgICAgICAgICAgICAgIGxheWVyR3JvdXBbaW5kZXhdWydtYXhab29tJ10gPSBiYXNlbGF5ZXJBcnJbJ2xheWVyR3JvdXAnXVtpbmRleF1bJ21heFpvb20nXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxheWVyR3JvdXAgPSBsYXllckdyb3VwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29uc2VudElkID0gYmFzZWxheWVyQXJyWydjb25zZW50SWQnXSA/IGJhc2VsYXllckFyclsnY29uc2VudElkJ10gOiBmYWxzZTtcbiAgICAgICAgdGhpcy5vdmVybGF5Q29udHJvbGxlciA9IG5ldyBDNGdPdmVybGF5Q29udHJvbGxlcih0aGlzKTtcbiAgICAgICAgdGhpcy5sYXllciA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyXG4gICAgfVxufSIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuaW1wb3J0IHtDbHVzdGVyLCBWZWN0b3IgYXMgVmVjdG9yU291cmNlfSBmcm9tIFwib2wvc291cmNlXCI7XG5pbXBvcnQge3RyYW5zZm9ybSwgdHJhbnNmb3JtRXh0ZW50fSBmcm9tIFwib2wvcHJvalwiO1xuaW1wb3J0IE9TTVhNTCBmcm9tIFwib2wvZm9ybWF0L09TTVhNTFwiO1xuaW1wb3J0IHtiYm94LCBhbGx9IGZyb20gXCJvbC9sb2FkaW5nc3RyYXRlZ3lcIjtcbmltcG9ydCB7VmVjdG9yfSBmcm9tIFwib2wvbGF5ZXJcIjtcbmltcG9ydCAqIGFzIG9sRm9ybWF0cyBmcm9tIFwib2wvZm9ybWF0XCI7XG5pbXBvcnQgcHJvajQgZnJvbSAncHJvajQnO1xuaW1wb3J0IHtyZWdpc3Rlcn0gZnJvbSAnb2wvcHJvai9wcm9qNCc7XG5pbXBvcnQgUHJvamVjdGlvbiBmcm9tICdvbC9wcm9qL1Byb2plY3Rpb24nO1xuaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnb2wvQ29sbGVjdGlvbic7XG5pbXBvcnQge3V0aWxzfSBmcm9tICcuL2M0Zy1tYXBzLXV0aWxzJztcbmltcG9ydCB7RmlsbCwgU3R5bGUsIFRleHQsIENpcmNsZX0gZnJvbSAnb2wvc3R5bGUnO1xuaW1wb3J0IHtQb2ludH0gZnJvbSBcIm9sL2dlb21cIjtcbmltcG9ydCBGZWF0dXJlIGZyb20gJ29sL0ZlYXR1cmUnO1xuaW1wb3J0ICogYXMgb2xFeHRlbnQgZnJvbSAnb2wvZXh0ZW50JztcblxuY29uc3Qgb3NtdG9nZW9qc29uID0gcmVxdWlyZSgnb3NtdG9nZW9qc29uJyk7XG5cbmxldCBvbEZvcm1hdCA9IGpRdWVyeS5leHRlbmQoe1xuICBPU01YTUw6IE9TTVhNTFxufSwgb2xGb3JtYXRzKTtcblxuZXhwb3J0IGNsYXNzIEJldHRlckxheWVyQ29udHJvbGxlciB7XG5cbiAgY29uc3RydWN0b3IocHJveHkpIHtcbiAgICB0aGlzLmhhbmRsZVpvb20gPSB0aGlzLmhhbmRsZVpvb20uYmluZCh0aGlzKTtcbiAgICBjb25zdCBzY29wZSA9IHRoaXM7XG4gICAgdGhpcy5wcm94eSA9IHByb3h5O1xuICAgIHRoaXMubG9hZGVycyA9IFtdO1xuICAgIHRoaXMuY29udHJvbGxlcnMgPSB7fTtcbiAgICB0aGlzLmFyckxvY3N0eWxlcyA9IFtdO1xuICAgIHRoaXMub2JqSWRzID0ge307XG4gICAgdGhpcy5jdXJyZW50Wm9vbUxldmVsID0gMDtcbiAgICB0aGlzLmV4dGVudCA9IHtcbiAgICAgIG1heFg6IC1JbmZpbml0eSxcbiAgICAgIG1heFk6IC1JbmZpbml0eSxcbiAgICAgIG1pblg6IEluZmluaXR5LFxuICAgICAgbWluWTogSW5maW5pdHlcbiAgICB9O1xuICAgIHRoaXMubWFwQ29udHJvbGxlciA9IHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlcjtcbiAgICB0aGlzLnZlY3RvckNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgIHRoaXMubG9hZGVyRnVuY3Rpb24gPSBmdW5jdGlvbihleHRlbnQsIHJlc29sdXRpb24sIHByb2plY3Rpb24pIHtcbiAgICAgIGZvciAobGV0IGkgaW4gc2NvcGUubG9hZGVycykge1xuICAgICAgICBpZiAoc2NvcGUubG9hZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIGNvbnN0IHJlcXVlc3REYXRhID0gc2NvcGUubG9hZGVyc1tpXTtcbiAgICAgICAgICBpZiAoIXJlcXVlc3REYXRhLnByZXZlbnRMb2FkaW5nKSB7XG4gICAgICAgICAgICBpZiAoIXJlcXVlc3REYXRhLnBhcmFtcyAmJiAhcmVxdWVzdERhdGEudXJsKSB7XG4gICAgICAgICAgICAgIGxldCByZXNwb25zZUZ1bmMgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGxldCBsYXllciA9IHNjb3BlLm9iakxheWVycy5maW5kKGVsZW1lbnQgPT4gZWxlbWVudC5pZCA9PSByZXF1ZXN0RGF0YS5sYXllcklkKSB8fCB7fTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICBsZXQgY29udGVudERhdGEgPSBkYXRhW2ldO1xuICAgICAgICAgICAgICAgICAgbGV0IGZlYXR1cmUgPSBzY29wZS5wYXJzZU93bkRhdGEoY29udGVudERhdGEsIGxheWVyKTtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNjb3BlLmFkZEZlYXR1cmVzKGZlYXR1cmVzLCByZXF1ZXN0RGF0YS5jaGFpbik7XG4gICAgICAgICAgICAgICAgc2NvcGUubWFwQ29udHJvbGxlci5zZXRPYmpMYXllcnMoc2NvcGUuYXJyTGF5ZXJzKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgc2NvcGUucGVyZm9ybU93bkRhdGEocmVxdWVzdERhdGEsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiZXh0ZW50XCI6IGV4dGVudCxcbiAgICAgICAgICAgICAgICAgICAgXCJyZXNvbHV0aW9uXCI6IHJlc29sdXRpb24sXG4gICAgICAgICAgICAgICAgICAgIFwicHJvamVjdGlvblwiOiBwcm9qZWN0aW9uXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgcmVzcG9uc2VGdW5jKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGxldCBsYXllciA9IHNjb3BlLm9iakxheWVycy5maW5kKGVsZW1lbnQgPT4gZWxlbWVudC5pZCA9PSByZXF1ZXN0RGF0YS5sYXllcklkKSB8fCB7fTtcbiAgICAgICAgICAgICAgc2NvcGUucGVyZm9ybU92cCh7XG4gICAgICAgICAgICAgICAgICAgIFwidXJsXCI6IHJlcXVlc3REYXRhLnVybCxcbiAgICAgICAgICAgICAgICAgICAgXCJwYXJhbXNcIjogcmVxdWVzdERhdGEucGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICBcImxvY3N0eWxlSWRcIjogcmVxdWVzdERhdGEubG9jc3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIFwiY2hhaW5cIjogcmVxdWVzdERhdGEuY2hhaW4sXG4gICAgICAgICAgICAgICAgICAgIFwibGF5ZXJcIjogbGF5ZXJcbiAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgXCJleHRlbnRcIjogZXh0ZW50LFxuICAgICAgICAgICAgICAgICAgICBcInJlc29sdXRpb25cIjogcmVzb2x1dGlvbixcbiAgICAgICAgICAgICAgICAgICAgXCJwcm9qZWN0aW9uXCI6IHByb2plY3Rpb25cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVxdWVzdERhdGEuYXJyRXh0ZW50cy5wdXNoKGV4dGVudClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMudmVjdG9yU291cmNlID0gbmV3IFZlY3RvclNvdXJjZSh7XG4gICAgICBmZWF0dXJlczogdGhpcy52ZWN0b3JDb2xsZWN0aW9uLFxuICAgICAgbG9hZGVyOiB0aGlzLmxvYWRlckZ1bmN0aW9uLFxuICAgICAgc3RyYXRlZ3k6IGJib3hcbiAgICB9KTtcbiAgICB0aGlzLmNsdXN0ZXJTdHlsZUZ1bmN0aW9uID0gZnVuY3Rpb24oZmVhdHVyZSwgcmVzb2x1dGlvbikge1xuICAgICAgbGV0IHNpemUgPSBmYWxzZTtcbiAgICAgIGxldCByZXR1cm5TdHlsZSA9IFtdO1xuICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQgJiYgZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykpIHtcbiAgICAgICAgbGV0IGZlYXR1cmVzID0gZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJyk7XG4gICAgICAgIHNpemUgPSBmZWF0dXJlcy5sZW5ndGg7XG4gICAgICAgIGZlYXR1cmUgPSBmZWF0dXJlc1swXTtcbiAgICAgIH1cbiAgICAgIGlmIChmZWF0dXJlICYmIGZlYXR1cmUuZ2V0U3R5bGUoKSkge1xuICAgICAgICByZXR1cm5TdHlsZSA9IGZlYXR1cmUuZ2V0U3R5bGUoKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQgJiYgZmVhdHVyZS5nZXQoJ2xvY3N0eWxlJykpIHtcbiAgICAgICAgbGV0IGxvY3N0eWxlID0gZmVhdHVyZS5nZXQoJ2xvY3N0eWxlJyk7XG4gICAgICAgIGlmIChzY29wZS5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXMgJiYgc2NvcGUucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2xvY3N0eWxlXSAmJiBzY29wZS5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbbG9jc3R5bGVdLnN0eWxlKSB7XG4gICAgICAgICAgbGV0IHN0eWxlID0gc2NvcGUucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2xvY3N0eWxlXS5zdHlsZTtcbiAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVyblN0eWxlID0gc3R5bGUoZmVhdHVyZSwgcmVzb2x1dGlvbiwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVyblN0eWxlID0gc2NvcGUucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2xvY3N0eWxlXS5zdHlsZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzaXplID4gMSAmJiByZXR1cm5TdHlsZSAmJiBBcnJheS5pc0FycmF5KHJldHVyblN0eWxlKSkge1xuICAgICAgICBsZXQgekluZGV4ID0gMDtcbiAgICAgICAgaWYgKHJldHVyblN0eWxlWzBdICYmIHJldHVyblN0eWxlWzBdLnNldFpJbmRleCAmJiBmZWF0dXJlLmdldCgnemluZGV4JykpIHtcbiAgICAgICAgICB6SW5kZXggKz0gZmVhdHVyZS5nZXQoJ3ppbmRleCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXR1cm5TdHlsZVswXSAmJnJldHVyblN0eWxlWzBdLnNldFpJbmRleCkge1xuICAgICAgICAgIGxldCBnZW9tZXRyeSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5jbG9uZSgpLnRyYW5zZm9ybShcIkVQU0c6Mzg1N1wiLCBcIkVQU0c6NDMyNlwiKS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgICAgIHpJbmRleCArPSAxMDAgLSBnZW9tZXRyeVsxXTtcbiAgICAgICAgICByZXR1cm5TdHlsZVswXS5zZXRaSW5kZXgoekluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaWNvbk9mZnNldCA9IFswLCAwXTtcbiAgICAgICAgbGV0IHNjYWxlID0gMTtcbiAgICAgICAgaWYgKHJldHVyblN0eWxlWzBdKSB7XG4gICAgICAgICAgaWYgKHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkgJiYgcmV0dXJuU3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMgJiYgdHlwZW9mIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGxldCByYWRpdXMgPSBwYXJzZUludChyZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpLmdldFJhZGl1cygpLCAxMCk7XG4gICAgICAgICAgICBpZiAocmFkaXVzKSB7XG4gICAgICAgICAgICAgIGljb25PZmZzZXQgPSBbLXJhZGl1cywgcmFkaXVzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkgJiYgcmV0dXJuU3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRBbmNob3IgJiYgdHlwZW9mIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0QW5jaG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGljb25PZmZzZXQgPSByZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvcigpIHx8IFswLCAwXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkgJiYgcmV0dXJuU3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRTY2FsZSgpICYmIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0U2NhbGUoKSAhPT0gMSkge1xuICAgICAgICAgICAgc2NhbGUgPSByZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpLmdldFNjYWxlKCk7XG4gICAgICAgICAgICBpY29uT2Zmc2V0ID0gW2ljb25PZmZzZXRbMF0gKiBzY2FsZSwgaWNvbk9mZnNldFsxXSAqIHNjYWxlXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNjb3BlLnByb3h5Lm1hcERhdGEuY2x1c3Rlcl9maWxsY29sb3IpIHtcbiAgICAgICAgICAgIGxldCBjb3VudEZlYXR1cmVzID0gc2NvcGUudmVjdG9yQ29sbGVjdGlvbi5nZXRMZW5ndGgoKTtcbiAgICAgICAgICAgIGxldCBzY2FsZUZvckNvdW50ID0gKHNpemUvY291bnRGZWF0dXJlcyAtIDEvY291bnRGZWF0dXJlcykgKiAyXG4gICAgICAgICAgICBzY2FsZSArPSBzY2FsZUZvckNvdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmaWxsY29sb3IgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc2NvcGUucHJveHkubWFwRGF0YS5jbHVzdGVyX2ZpbGxjb2xvcix7XG4gICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgIHZhbHVlOiA3MFxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgZm9udGNvbG9yID0gc2NvcGUucHJveHkubWFwRGF0YS5jbHVzdGVyX2ZvbnRjb2xvcjtcbiAgICAgICAgaWYgKGZlYXR1cmUuZ2V0KCdjbHVzdGVyX2ZpbGxjb2xvcicpKSB7XG4gICAgICAgICAgZmlsbGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KGZlYXR1cmUuZ2V0KCdjbHVzdGVyX2ZpbGxjb2xvcicpLHtcbiAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgIHZhbHVlOiA3MFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmZWF0dXJlLmdldCgnY2x1c3Rlcl9mb250Y29sb3InKSkge1xuICAgICAgICAgIGZvbnRjb2xvciA9IGZlYXR1cmUuZ2V0KCdjbHVzdGVyX2ZvbnRjb2xvcicpO1xuICAgICAgICB9XG4gICAgICAgIGZvbnRjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShmb250Y29sb3IpO1xuICAgICAgICByZXR1cm5TdHlsZS5wdXNoKFxuICAgICAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICAgICAgdGV4dDogbmV3IFRleHQoe1xuICAgICAgICAgICAgICAgIHRleHQ6IFwi4pePXCIsXG4gICAgICAgICAgICAgICAgZm9udDogXCI2MHB4IHNhbnMtc2VyaWZcIixcbiAgICAgICAgICAgICAgICBvZmZzZXRYOiAtMSAqIGljb25PZmZzZXRbMF0sXG4gICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEgKiBpY29uT2Zmc2V0WzFdLFxuICAgICAgICAgICAgICAgIHNjYWxlOiBzY2FsZSxcbiAgICAgICAgICAgICAgICBmaWxsOiBuZXcgRmlsbCh7XG4gICAgICAgICAgICAgICAgICBjb2xvcjogZmlsbGNvbG9yXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHpJbmRleDogekluZGV4XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICByZXR1cm5TdHlsZS5wdXNoKFxuICAgICAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICAgICAgdGV4dDogbmV3IFRleHQoe1xuICAgICAgICAgICAgICAgIHRleHQ6IHNpemUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBvZmZzZXRYOiAtMSAqIGljb25PZmZzZXRbMF0sXG4gICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEgKiBpY29uT2Zmc2V0WzFdICsgMyxcbiAgICAgICAgICAgICAgICBzY2FsZTogc2NhbGUsXG4gICAgICAgICAgICAgICAgZmlsbDogbmV3IEZpbGwoe1xuICAgICAgICAgICAgICAgICAgY29sb3I6IGZvbnRjb2xvclxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICB6SW5kZXg6IHpJbmRleFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoXCJtYXJrTG9jc3R5bGVcIikpIHtcbiAgICAgICAgICBsZXQgY29sb3IgPSBcIiNcIiArIHNjb3BlLnByb3h5Lm1hcERhdGEuc3RhcmJvYXJkLmNvbG9yWm9vbU1hcmtlcjtcbiAgICAgICAgICBsZXQgbWFya0ZpbGwgPSBuZXcgRmlsbCh7XG4gICAgICAgICAgICBjb2xvcjogY29sb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsZXQgcmFkaXVzO1xuICAgICAgICAgIGlmIChyZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpICYmIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzICYmIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzKCkpIHtcbiAgICAgICAgICAgIHJhZGl1cyA9IHBhcnNlSW50KHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChyZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpICYmIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0SWNvbiAmJiByZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpICYmIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0SWNvbigpKSB7XG4gICAgICAgICAgICByYWRpdXMgPSByZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpLmdldEljb24oKS5nZXRTaXplKCk7XG4gICAgICAgICAgICByYWRpdXMgPSByYWRpdXNbMF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmFkaXVzID0gMjVcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IG1hcmtTdHlsZSA9IG5ldyBTdHlsZSh7XG4gICAgICAgICAgICBpbWFnZTogbmV3IENpcmNsZSh7XG4gICAgICAgICAgICAgIGZpbGw6IG1hcmtGaWxsLFxuICAgICAgICAgICAgICByYWRpdXM6IHJhZGl1c1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmaWxsOiBtYXJrRmlsbFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVyblN0eWxlLnB1c2gobWFya1N0eWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAocmV0dXJuU3R5bGUgJiYgQXJyYXkuaXNBcnJheShyZXR1cm5TdHlsZSkpIHtcbiAgICAgICAgbGV0IHpJbmRleCA9IDA7XG4gICAgICAgIGlmIChyZXR1cm5TdHlsZVswXSAmJiByZXR1cm5TdHlsZVswXS5zZXRaSW5kZXggJiYgZmVhdHVyZS5nZXQoJ3ppbmRleCcpKSB7XG4gICAgICAgICAgekluZGV4ICs9IGZlYXR1cmUuZ2V0KCd6aW5kZXgnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0dXJuU3R5bGVbMF0gJiZyZXR1cm5TdHlsZVswXS5zZXRaSW5kZXgpIHtcbiAgICAgICAgICBsZXQgZ2VvbWV0cnkgPSBmZWF0dXJlLmdldEdlb21ldHJ5KCkuY2xvbmUoKS50cmFuc2Zvcm0oXCJFUFNHOjM4NTdcIiwgXCJFUFNHOjQzMjZcIikuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICBnZW9tZXRyeSA9IHR5cGVvZiBnZW9tZXRyeVswXSA9PSBcIm51bWJlclwiID8gZ2VvbWV0cnkgOiBnZW9tZXRyeVswXTtcbiAgICAgICAgICBnZW9tZXRyeSA9IHR5cGVvZiBnZW9tZXRyeVswXSA9PSBcIm51bWJlclwiID8gZ2VvbWV0cnkgOiBnZW9tZXRyeVswXTtcbiAgICAgICAgICB6SW5kZXggKz0gMTAwIC0gZ2VvbWV0cnlbMV07XG4gICAgICAgICAgcmV0dXJuU3R5bGVbMF0uc2V0WkluZGV4KHpJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoXCJtYXJrTG9jc3R5bGVcIikpIHtcbiAgICAgICAgICBsZXQgY29sb3IgPSBcIiNcIiArIHNjb3BlLnByb3h5Lm1hcERhdGEuc3RhcmJvYXJkLmNvbG9yWm9vbU1hcmtlcjtcbiAgICAgICAgICBsZXQgbWFya0ZpbGwgPSBuZXcgRmlsbCh7XG4gICAgICAgICAgICBjb2xvcjogY29sb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsZXQgcmFkaXVzO1xuICAgICAgICAgIGlmIChyZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpICYmIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzICYmIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzKCkpIHtcbiAgICAgICAgICAgIHJhZGl1cyA9IHBhcnNlSW50KHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChyZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpICYmIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0SWNvbiAmJiByZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpICYmIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0SWNvbigpKSB7XG4gICAgICAgICAgICByYWRpdXMgPSByZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpLmdldEljb24oKS5nZXRTaXplKCk7XG4gICAgICAgICAgICByYWRpdXMgPSByYWRpdXNbMF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmFkaXVzID0gMjVcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IG1hcmtTdHlsZSA9IG5ldyBTdHlsZSh7XG4gICAgICAgICAgICBpbWFnZTogbmV3IENpcmNsZSh7XG4gICAgICAgICAgICAgIGZpbGw6IG1hcmtGaWxsLFxuICAgICAgICAgICAgICByYWRpdXM6IHJhZGl1c1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmaWxsOiBtYXJrRmlsbFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVyblN0eWxlLnB1c2gobWFya1N0eWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0dXJuU3R5bGVcbiAgICB9O1xuICAgIGlmICh0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5jbHVzdGVyX2FsbCkge1xuICAgICAgdGhpcy52ZWN0b3JTb3VyY2UgPSBuZXcgQ2x1c3Rlcih7XG4gICAgICAgIHNvdXJjZTogdGhpcy52ZWN0b3JTb3VyY2UsXG4gICAgICAgIGdlb21ldHJ5RnVuY3Rpb246IHRoaXMuZ2VvbWV0cnlGdW5jdGlvbixcbiAgICAgICAgZGlzdGFuY2U6IHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmNsdXN0ZXJfZGlzdGFuY2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLnZlY3RvckxheWVyID0gbmV3IFZlY3Rvcih7XG4gICAgICBzb3VyY2U6IHRoaXMudmVjdG9yU291cmNlLFxuICAgICAgc3R5bGU6IHRoaXMuY2x1c3RlclN0eWxlRnVuY3Rpb25cbiAgICB9KTtcbiAgICB0aGlzLmxheWVyUmVxdWVzdHMgPSB7fTtcbiAgICB0aGlzLm92cEtleSA9IHRoaXMubWFwQ29udHJvbGxlci5kYXRhLm92cF9rZXk7XG4gICAgd2luZG93LmM0Z01hcHNIb29rcy5ob29rX21hcF96b29tID0gd2luZG93LmM0Z01hcHNIb29rcy5ob29rX21hcF96b29tIHx8IFtdO1xuICAgIHdpbmRvdy5jNGdNYXBzSG9va3MuaG9va19tYXBfem9vbS5wdXNoKHRoaXMuaGFuZGxlWm9vbSk7XG4gIH1cbiAgaGlkZSAoaWQsIGhpZGVFbGVtZW50LCBsYXllcklkKSB7XG4gICAgbGV0IGZlYXR1cmVzLFxuICAgICAgICB2ZWN0b3JMYXllcjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoaWRlRWxlbWVudCkpIHtcbiAgICAgIGZlYXR1cmVzID0gaGlkZUVsZW1lbnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGhpZGVFbGVtZW50IGluc3RhbmNlb2YgVmVjdG9yKSB7XG4gICAgICB2ZWN0b3JMYXllciA9IGhpZGVFbGVtZW50XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZmVhdHVyZXMgPSB0aGlzLm9iaklkc1tsYXllcklkXTtcbiAgICB9XG4gICAgaWYgKGZlYXR1cmVzKSB7XG4gICAgICBpZiAoaWQgPj0gMCkge1xuICAgICAgICBsZXQgbG9hZGVyID0gdGhpcy5sb2FkZXJzW2lkXTtcbiAgICAgICAgaWYgKGxvYWRlcikge1xuICAgICAgICAgIHRoaXMubG9hZGVyc1tpZF0ucHJldmVudExvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIGlmIChsb2FkZXIucmVxdWVzdCkge1xuICAgICAgICAgICAgbG9hZGVyLnJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmZWF0dXJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGZlYXR1cmVJZCBpbiBmZWF0dXJlcykge1xuICAgICAgICAgIGlmIChmZWF0dXJlcy5oYXNPd25Qcm9wZXJ0eShmZWF0dXJlSWQpKSB7XG4gICAgICAgICAgICB0aGlzLnZlY3RvckNvbGxlY3Rpb24ucmVtb3ZlKGZlYXR1cmVzW2ZlYXR1cmVJZF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2ZWN0b3JMYXllcikge1xuICAgICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5yZW1vdmVMYXllcih2ZWN0b3JMYXllcik7XG4gICAgfVxuICB9XG4gIHNob3cgKGlkLCBoaWRlRWxlbWVudCwgbGF5ZXJJZCkge1xuICAgIGxldCBmZWF0dXJlcyxcbiAgICAgICAgdmVjdG9yTGF5ZXI7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGlkZUVsZW1lbnQpKSB7XG4gICAgICBmZWF0dXJlcyA9IGhpZGVFbGVtZW50O1xuICAgICAgdGhpcy5jdXJyZW50Wm9vbUxldmVsKys7XG4gICAgICBmb3IgKGxldCBpIGluIGZlYXR1cmVzKSB7XG4gICAgICAgIGlmIChmZWF0dXJlcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIGlmICh0aGlzLm1hcENvbnRyb2xsZXIuZmlsdGVyKSB7XG4gICAgICAgICAgICBmZWF0dXJlc1tpXS5zZXQoJ3ppbmRleCcsIHRoaXMuY3VycmVudFpvb21MZXZlbCk7XG4gICAgICAgICAgICBpZiAoISFwYXJzZUZsb2F0KHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmZpbHRlckhhbmRsaW5nKSkge1xuICAgICAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIuZmlsdGVyLmhpZGVGZWF0dXJlTXVsdGkoZmVhdHVyZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5maWx0ZXIuaGlkZUZlYXR1cmUoZmVhdHVyZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChoaWRlRWxlbWVudCBpbnN0YW5jZW9mIFZlY3Rvcil7XG4gICAgICB2ZWN0b3JMYXllciA9IGhpZGVFbGVtZW50O1xuICAgICAgaWYgKHRoaXMubWFwQ29udHJvbGxlci5maWx0ZXIpIHtcbiAgICAgICAgaWYgKCEhcGFyc2VGbG9hdCh0aGlzLm1hcENvbnRyb2xsZXIuZGF0YS5maWx0ZXJIYW5kbGluZykpIHtcbiAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIuZmlsdGVyLmZpbHRlckxheWVyTXVsdGkodmVjdG9yTGF5ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5maWx0ZXIuZmlsdGVyTGF5ZXIodmVjdG9yTGF5ZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZmVhdHVyZXMgPSB0aGlzLm9iaklkc1tsYXllcklkXTtcbiAgICB9XG4gICAgaWYgKGlkID49IDAgJiYgdGhpcy5sb2FkZXJzW2lkXSAmJiB0aGlzLmxvYWRlcnNbaWRdLnByZXZlbnRMb2FkaW5nKSB7XG4gICAgICB0aGlzLmxvYWRlcnNbaWRdLnByZXZlbnRMb2FkaW5nID0gZmFsc2U7XG4gICAgICBmb3IgKGxldCBleHRlbnRJZCBpbiB0aGlzLmxvYWRlcnNbaWRdLmFyckV4dGVudHMpIHtcbiAgICAgICAgaWYgKHRoaXMubG9hZGVyc1tpZF0uYXJyRXh0ZW50cy5oYXNPd25Qcm9wZXJ0eShleHRlbnRJZCkgJiYgdGhpcy52ZWN0b3JTb3VyY2UpIHtcbiAgICAgICAgICBsZXQgZXh0ZW50ID0gdGhpcy5sb2FkZXJzW2lkXS5hcnJFeHRlbnRzW2V4dGVudElkXTtcbiAgICAgICAgICB0aGlzLnZlY3RvclNvdXJjZS5yZW1vdmVMb2FkZWRFeHRlbnQoZXh0ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5sb2FkZXJzW2lkXS5hcnJFeHRlbnRzID0gW107XG4gICAgfVxuICAgIGlmIChmZWF0dXJlcykge1xuICAgICAgdGhpcy52ZWN0b3JDb2xsZWN0aW9uLmV4dGVuZChmZWF0dXJlcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZlY3RvckxheWVyKSB7XG4gICAgICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmFkZExheWVyKHZlY3RvckxheWVyKTtcbiAgICB9XG4gIH1cbiAgem9vbVRvKGxheWVyKSB7XG4gICAgbGV0IGV4dGVudDtcbiAgICBpZiAobGF5ZXIuY2hpbGRzICYmIGxheWVyLmNoaWxkcy5sZW5ndGgpIHtcbiAgICAgIGZvciAobGV0IGkgaW4gbGF5ZXIuY2hpbGRzKSB7XG4gICAgICAgIGlmIChsYXllci5jaGlsZHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICBleHRlbnQgPSB0aGlzLmdldENoaWxkc0V4dGVudChleHRlbnQsIGxheWVyLmNoaWxkc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFsYXllci5mZWF0dXJlcyB8fCAhbGF5ZXIuZmVhdHVyZXMubGVuZ3RoKSB7XG4gICAgICBleHRlbnQgPSB0aGlzLmdldEV4dGVudEZvckxheWVyKGV4dGVudCwgbGF5ZXIuaWQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgaW4gbGF5ZXIuZmVhdHVyZXMpIHtcbiAgICAgICAgaWYgKGxheWVyLmZlYXR1cmVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgaWYgKCFleHRlbnQpIHtcbiAgICAgICAgICAgIGV4dGVudCA9IGxheWVyLmZlYXR1cmVzW2ldLmdldEdlb21ldHJ5KCkuY2xvbmUoKS5nZXRFeHRlbnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBleHRlbnQgPSBvbEV4dGVudC5leHRlbmQoZXh0ZW50LCBsYXllci5mZWF0dXJlc1tpXS5nZXRHZW9tZXRyeSgpLmNsb25lKCkuZ2V0RXh0ZW50KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWV4dGVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgd2lkdGggPSBqUXVlcnkoXCIuYzRnLXN0YXJib2FyZC1jb250YWluZXJcIikuY3NzKCd3aWR0aCcpO1xuICAgIGlmICh3aWR0aCkge1xuICAgICAgd2lkdGggPSB3aWR0aC5zcGxpdChcIi5cIik7XG4gICAgICB3aWR0aCA9IEFycmF5LmlzQXJyYXkod2lkdGgpID8gd2lkdGhbMF0gOiB3aWR0aDtcbiAgICAgIHdpZHRoID0gcGFyc2VJbnQod2lkdGgpICsgIDUwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHdpZHRoID0gNTA7XG4gICAgfVxuICAgIGxldCBtYXhab29tID0gcGFyc2VJbnQodGhpcy5wcm94eS5tYXBEYXRhLnN0YXJib2FyZC5tYXhab29tKSB8fCAyMjtcbiAgICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5maXQoZXh0ZW50LCB7XG4gICAgICBwYWRkaW5nOiBbNTAsd2lkdGgsNTAsNTBdLFxuICAgICAgZHVyYXRpb246IDUwMCxcbiAgICAgIG1heFpvb206IG1heFpvb21cbiAgICB9KTtcbiAgfVxuICBnZXRDaGlsZHNFeHRlbnQoZXh0ZW50LCBjaGlsZCkge1xuICAgIGlmIChjaGlsZC5jaGlsZHMgJiYgY2hpbGQuY2hpbGRzLmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaSBpbiBjaGlsZC5jaGlsZHMpIHtcbiAgICAgICAgaWYgKGNoaWxkLmNoaWxkcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIGV4dGVudCA9IHRoaXMuZ2V0Q2hpbGRzRXh0ZW50KGV4dGVudCwgY2hpbGQuY2hpbGRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2hpbGQuZmVhdHVyZXMgJiYgY2hpbGQuZmVhdHVyZXMubGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpIGluIGNoaWxkLmZlYXR1cmVzKSB7XG4gICAgICAgIGlmIChjaGlsZC5mZWF0dXJlcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIGlmICghZXh0ZW50KSB7XG4gICAgICAgICAgICBleHRlbnQgPSBjaGlsZC5mZWF0dXJlc1tpXS5nZXRHZW9tZXRyeSgpLmNsb25lKCkuZ2V0RXh0ZW50KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXh0ZW50ID0gb2xFeHRlbnQuZXh0ZW5kKGV4dGVudCwgY2hpbGQuZmVhdHVyZXNbaV0uZ2V0R2VvbWV0cnkoKS5jbG9uZSgpLmdldEV4dGVudCgpKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGV4dGVudCA9IHRoaXMuZ2V0RXh0ZW50Rm9yTGF5ZXIoZXh0ZW50LCBjaGlsZC5pZCk7XG4gICAgfVxuICAgIHJldHVybiBleHRlbnQ7XG4gIH1cbiAgZ2V0RXh0ZW50Rm9yTGF5ZXIoZXh0ZW50LCBsYXllcklkKSB7XG4gICAgbGV0IGZlYXR1cmVzID0gdGhpcy5vYmpJZHNbbGF5ZXJJZF07XG4gICAgaWYgKGZlYXR1cmVzICYmIGZlYXR1cmVzLmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaSBpbiBmZWF0dXJlcykge1xuICAgICAgICBpZiAoZmVhdHVyZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICBpZiAoIWV4dGVudCkge1xuICAgICAgICAgICAgZXh0ZW50ID0gZmVhdHVyZXNbaV0uZ2V0R2VvbWV0cnkoKS5nZXRFeHRlbnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBleHRlbnQgPSBvbEV4dGVudC5leHRlbmQoZXh0ZW50LGZlYXR1cmVzW2ldLmdldEdlb21ldHJ5KCkuZ2V0RXh0ZW50KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXh0ZW50O1xuICB9XG4gIHNldENoaWxkRmVhdHVyZUZsYWcoY2hpbGQsIGZsYWcsIHZhbHVlKSB7XG4gICAgaWYgKGNoaWxkLmNoaWxkcyAmJiBjaGlsZC5jaGlsZHMubGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpIGluIGNoaWxkLmNoaWxkcykge1xuICAgICAgICBpZiAoY2hpbGQuY2hpbGRzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgdGhpcy5zZXRDaGlsZEZlYXR1cmVGbGFnKGNoaWxkLmNoaWxkc1tpXSwgZmxhZywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjaGlsZC5mZWF0dXJlcyAmJiBjaGlsZC5mZWF0dXJlcy5sZW5ndGgpIHtcbiAgICAgIGZvciAobGV0IGkgaW4gY2hpbGQuZmVhdHVyZXMpIHtcbiAgICAgICAgaWYgKGNoaWxkLmZlYXR1cmVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgY2hpbGQuZmVhdHVyZXNbaV0uc2V0KGZsYWcsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxvYWRMYXllcnMgKCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBpZiAodGhpcy5wcm94eS5tYXBJZCA9PT0gMCkge1xuICAgICAgd2luZG93LnNldFRpbWVvdXQoKCk9PntzZWxmLm1hcENvbnRyb2xsZXIuc2V0TGF5ZXJzSW5pdGlhbChbXSwgW10pfSw1MCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgalF1ZXJ5LmFqYXgodGhpcy5wcm94eS5hcGlfbGF5ZXJfdXJsLCB7XG4gICAgICBkYXRhVHlwZTogdGhpcy5tYXBDb250cm9sbGVyLmRhdGEuanNvbnAgPyBcImpzb25wXCIgOiBcImpzb25cIlxuXG4gICAgfSkuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMod2luZG93LmM0Z01hcHNIb29rcy5ob29rX2xheWVyLCBkYXRhKTtcbiAgICAgIHNlbGYub2JqTGF5ZXJzID0gZGF0YS5sYXllcjtcbiAgICAgIGxldCBzdHJ1Y3R1cmUgPSBbXTtcbiAgICAgIGxldCBmZWF0dXJlcyA9IFtdO1xuXG4gICAgICBsZXQgdGFiU3RydWN0dXJlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgbGF5ZXJJZCBpbiBkYXRhLmxheWVyKSB7XG4gICAgICAgIGlmIChkYXRhLmxheWVyLmhhc093blByb3BlcnR5KGxheWVySWQpKSB7XG4gICAgICAgICAgaWYgKGRhdGEubGF5ZXJbbGF5ZXJJZF0udHlwZSA9PT0gXCJzdGFydGFiXCIpIHtcbiAgICAgICAgICAgIGxldCBuZXdUYWIgPSBbc2VsZi5nZXRTdHJ1Y3R1cmVGcm9tTGF5ZXIoZGF0YS5sYXllcltsYXllcklkXSwgdGFiU3RydWN0dXJlcy5sZW5ndGgpXTtcbiAgICAgICAgICAgIG5ld1RhYi5hd2Vzb21lSWNvbiA9IGRhdGEubGF5ZXJbbGF5ZXJJZF0uYXdlc29tZWljb247XG4gICAgICAgICAgICB0YWJTdHJ1Y3R1cmVzLnB1c2gobmV3VGFiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5ld0NoaWxkID0gc2VsZi5nZXRTdHJ1Y3R1cmVGcm9tTGF5ZXIoZGF0YS5sYXllcltsYXllcklkXSwgc3RydWN0dXJlLmxlbmd0aCk7XG4gICAgICAgICAgICBpZiAobmV3Q2hpbGQuaGlkZV9pbl9zdGFyYm9hcmQpIHtcbiAgICAgICAgICAgICAgc3RydWN0dXJlID0gbmV3Q2hpbGQuY2hpbGRzID8gc3RydWN0dXJlLmNvbmNhdChuZXdDaGlsZC5jaGlsZHMpIDogc3RydWN0dXJlO1xuICAgICAgICAgICAgICBmZWF0dXJlcyA9IG5ld0NoaWxkLmZlYXR1cmVzID8gZmVhdHVyZXMuY29uY2F0KG5ld0NoaWxkLmZlYXR1cmVzKSA6IGZlYXR1cmVzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RydWN0dXJlLnB1c2gobmV3Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGFyclN0YXRlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgc3RydWN0SWQgaW4gc3RydWN0dXJlKSB7XG4gICAgICAgIGlmIChzdHJ1Y3R1cmUuaGFzT3duUHJvcGVydHkoc3RydWN0SWQpKSB7XG4gICAgICAgICAgYXJyU3RhdGVzLnB1c2goc2VsZi5nZXRJbml0aWFsU3RhdGVzKHN0cnVjdHVyZVtzdHJ1Y3RJZF0pKTtcbiAgICAgICAgICBpZiAoZmVhdHVyZXMpIHtcbiAgICAgICAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXMuY29uY2F0KHNlbGYuZ2V0RmVhdHVyZXNGcm9tU3RydWN0KHN0cnVjdHVyZVtzdHJ1Y3RJZF0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCB0YWJTdGF0ZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IHN0cnVjdElkIGluIHRhYlN0cnVjdHVyZXMpIHtcbiAgICAgICAgaWYgKHRhYlN0cnVjdHVyZXMuaGFzT3duUHJvcGVydHkoc3RydWN0SWQpKSB7XG4gICAgICAgICAgdGFiU3RhdGVzLnB1c2goc2VsZi5nZXRJbml0aWFsU3RhdGVzKHRhYlN0cnVjdHVyZXNbc3RydWN0SWRdWzBdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNlbGYuYXJyTGF5ZXJzID0gc3RydWN0dXJlO1xuICAgICAgc2VsZi5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMoc2VsZi5hcnJMb2NzdHlsZXMsIHtcImRvbmVcIjogKHN0eWxlRGF0YSkgPT4ge1xuICAgICAgICBzZWxmLm1hcENvbnRyb2xsZXIuc2V0TG9jU3R5bGVzKHN0eWxlRGF0YSk7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpPT4ge1xuICAgICAgICAgIGxldCBnZXRab29tID0gc2VsZi5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpO1xuICAgICAgICAgIHNlbGYubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLnNldFpvb20oZ2V0Wm9vbSArIDAuMjY1KTtcbiAgICAgICAgICAvLyBzZWxmLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5zZXRab29tKGdldFpvb20pO1xuXG4gICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCk9PiB7XG4gICAgICAgICAgbGV0IGdldFpvb20gPSBzZWxmLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRab29tKCk7XG4gICAgICAgICAgc2VsZi5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuc2V0Wm9vbShnZXRab29tIC0gMC4yNjUpO1xuICAgICAgICAgIH0sIDIwMSk7XG4gICAgICAgIH19KTtcbiAgICAgIHNlbGYudmVjdG9yQ29sbGVjdGlvbi5leHRlbmQoZmVhdHVyZXMpO1xuICAgICAgc2VsZi5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihzZWxmLnZlY3RvckxheWVyKTtcbiAgICAgIHNlbGYubWFwQ29udHJvbGxlci5zZXRMYXllcnNJbml0aWFsKHNlbGYuYXJyTGF5ZXJzLCBhcnJTdGF0ZXMpO1xuICAgICAgc2VsZi5tYXBDb250cm9sbGVyLnNldFRhYkxheWVycyh0YWJTdHJ1Y3R1cmVzLCB0YWJTdGF0ZXMpO1xuICAgICAgaWYgKHNlbGYucHJveHkubWFwRGF0YS5jYWxjX2V4dGVudCA9PT0gXCJMT0NBVElPTlNcIiB8fCBzZWxmLnByb3h5Lm1hcERhdGEuY2FsY19leHRlbnQgPT09IFwiQ0VOVEVSTE9DU1wiKSB7XG4gICAgICAgIGlmIChzZWxmLmV4dGVudCAmJiAhKHNlbGYuZXh0ZW50Lm1heFggPT09IEluZmluaXR5IHx8IHNlbGYuZXh0ZW50Lm1heFggPT09IC1JbmZpbml0eSkpIHtcbiAgICAgICAgICBsZXQgdmlldyA9IHNlbGYubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpO1xuICAgICAgICAgIGxldCBwYWRkaW5nID0gW1xuICAgICAgICAgICAgICBwYXJzZUludChzZWxmLm1hcENvbnRyb2xsZXIucHJvcHMubWFwRGF0YS5taW5fZ2FwLCAxMCksXG4gICAgICAgICAgICAgIHBhcnNlSW50KHNlbGYubWFwQ29udHJvbGxlci5wcm9wcy5tYXBEYXRhLm1pbl9nYXAsIDEwKSxcbiAgICAgICAgICAgICAgcGFyc2VJbnQoc2VsZi5tYXBDb250cm9sbGVyLnByb3BzLm1hcERhdGEubWluX2dhcCwgMTApLFxuICAgICAgICAgICAgICBwYXJzZUludChzZWxmLm1hcENvbnRyb2xsZXIucHJvcHMubWFwRGF0YS5taW5fZ2FwLCAxMClcbiAgICAgICAgICBdO1xuICAgICAgICAgIGxldCBleHRlbnQgPSBbXG4gICAgICAgICAgICAgIHNlbGYuZXh0ZW50Lm1pblgsXG4gICAgICAgICAgICAgIHNlbGYuZXh0ZW50Lm1pblksXG4gICAgICAgICAgICAgIHNlbGYuZXh0ZW50Lm1heFgsXG4gICAgICAgICAgICAgIHNlbGYuZXh0ZW50Lm1heFlcbiAgICAgICAgICBdO1xuXG4gICAgICAgICAgaWYgKHNlbGYucHJveHkubWFwRGF0YS5jYWxjX2V4dGVudCA9PT0gXCJDRU5URVJMT0NTXCIpIHtcbiAgICAgICAgICAgIC8vIHNzc3NcbiAgICAgICAgICAgIHZpZXcuZml0KGV4dGVudCwge1xuICAgICAgICAgICAgICBtYXhab29tOnNlbGYubWFwQ29udHJvbGxlci5kYXRhLmNlbnRlci56b29tXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2aWV3LmZpdChleHRlbnQsIHtcbiAgICAgICAgICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLmxheWVyX2xvYWRlZCwgc2VsZik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5mYWlsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnNvbGUud2FybignQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSB0cnlpbmcgdG8gbG9hZCB0aGUgbGF5ZXJzLi4uJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSkuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHRoaXMucHJveHkuc3RhcmJvYXJkLnNwaW5uZXIuaGlkZSgpO1xuICAgIH0pO1xuICB9IC8vIGVuZCBvZiBcImxvYWRMYXllcigpXCJcbiAgZ2V0SW5pdGlhbFN0YXRlcyhsYXllcikge1xuICAgIGxldCBjaGlsZFN0YXRlcyA9IFtdO1xuICAgIGlmIChsYXllci5jaGlsZHMgJiYgbGF5ZXIuY2hpbGRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGNoaWxkSWQgaW4gbGF5ZXIuY2hpbGRzKSB7XG4gICAgICAgIGlmIChsYXllci5jaGlsZHMuaGFzT3duUHJvcGVydHkoY2hpbGRJZCkpIHtcbiAgICAgICAgICBjaGlsZFN0YXRlcy5wdXNoKHRoaXMuZ2V0SW5pdGlhbFN0YXRlcyhsYXllci5jaGlsZHNbY2hpbGRJZF0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgem9vbSA9IHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFpvb20oKTtcbiAgICByZXR1cm4ge1xuICAgICAgYWN0aXZlOiAhbGF5ZXIuaGlkZSxcbiAgICAgIGNvbGxhcHNlZDogIXBhcnNlRmxvYXQobGF5ZXIuaW5pdGlhbF9vcGVuZWQpLFxuICAgICAgZ3JleWVkOiBsYXllci56b29tICYmICF0aGlzLmNvbXBhcmVab29tKGxheWVyLnpvb20pLFxuICAgICAgaWQ6IGxheWVyLmlkLFxuICAgICAgY2hpbGRTdGF0ZXM6IGNoaWxkU3RhdGVzXG4gICAgfVxuICB9XG4gIGdldEZlYXR1cmVzRnJvbVN0cnVjdChzdHJ1Y3R1cmUpIHtcbiAgICBsZXQgZmVhdHVyZXMgPSBbXTtcbiAgICBsZXQgem9vbSA9IHRoaXMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFpvb20oKTtcbiAgICBsZXQgZ3JleWVkID0gc3RydWN0dXJlLnpvb20gJiYgIXRoaXMuY29tcGFyZVpvb20oc3RydWN0dXJlLnpvb20pO1xuICAgIGlmIChzdHJ1Y3R1cmUuY2hpbGRzICYmIHN0cnVjdHVyZS5jaGlsZHMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgc3RydWN0SWQgaW4gc3RydWN0dXJlLmNoaWxkcykge1xuICAgICAgICBpZiAoc3RydWN0dXJlLmNoaWxkcy5oYXNPd25Qcm9wZXJ0eShzdHJ1Y3RJZCkpIHtcbiAgICAgICAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXMuY29uY2F0KHRoaXMuZ2V0RmVhdHVyZXNGcm9tU3RydWN0KHN0cnVjdHVyZS5jaGlsZHNbc3RydWN0SWRdKSk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3RydWN0dXJlLmZlYXR1cmVzICYmICFncmV5ZWQgJiYgIXN0cnVjdHVyZS5oaWRlKSB7XG4gICAgICBmZWF0dXJlcyA9IGZlYXR1cmVzLmNvbmNhdChzdHJ1Y3R1cmUuZmVhdHVyZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBmZWF0dXJlcztcbiAgfVxuXG4gIGdldFN0cnVjdHVyZUZyb21MYXllcihsYXllciwgaWRDaGFpbikge1xuICAgIGxldCBzY29wZSA9IHRoaXM7XG4gICAgbGV0IGZlYXR1cmVzID0gW107XG4gICAgbGV0IGNoaWxkcyA9IFtdO1xuICAgIGxldCBoaWRlID0gISFsYXllci5oaWRlO1xuICAgIGlmIChzY29wZS5tYXBDb250cm9sbGVyLmRhdGEubGF5ZXJzICYmIHNjb3BlLm1hcENvbnRyb2xsZXIuZGF0YS5sYXllcnMubGVuZ3RoID4gMCkgeyAvL2hpZGUgb3Igc2hvdyBhY2NvcmRpbmcgdG8gcGVybWFsaW5rIC0gb3ZlcndyaXRlcyBsYXllclNlcnZpY2VcbiAgICAgIGlmIChzY29wZS5tYXBDb250cm9sbGVyLmRhdGEubGF5ZXJzLmluZGV4T2YobGF5ZXIuaWQpID4gLTEpIHsgLy9pbiBwZXJtYWxpbmtcbiAgICAgICAgaGlkZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSB7IC8vbm90IGluIHBlcm1hbGlua1xuICAgICAgICBoaWRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxheWVyLmFjdGl2ZUZvckJhc2VsYXllcnMgJiYgbGF5ZXIuYWN0aXZlRm9yQmFzZWxheWVycyAhPT0gXCJhbGxcIikgeyAvL2luaXRpYWwgaGFuZGxpbmcgZm9yIGFjdGl2YXRlIHdpdGggYmFzZWxheWVyXG4gICAgICBsZXQgZm91bmQgPSBsYXllci5hY3RpdmVGb3JCYXNlbGF5ZXJzLmluY2x1ZGVzKHNjb3BlLm1hcENvbnRyb2xsZXIucHJveHkuYWN0aXZlQmFzZWxheWVySWQgfHwgc2NvcGUubWFwQ29udHJvbGxlci5kYXRhLmRlZmF1bHRfYmFzZWxheWVyKTtcbiAgICAgIGhpZGUgPSAhZm91bmQ7XG4gICAgfVxuICAgIGxldCB2ZWN0b3JMYXllciA9IGZhbHNlO1xuICAgIGxldCBsb2FkZXJJZCA9IC0xO1xuICAgIGxldCBwb3NzaWJsZUxvY3N0eWxlID0gbGF5ZXIubG9jc3R5bGU7XG4gICAgaWYgKGxheWVyLmNvbnRlbnQgJiYgbGF5ZXIuY29udGVudC5sZW5ndGggPiAwKSB7XG4gICAgICBmZWF0dXJlcyA9IHRoaXMuZ2V0RmVhdHVyZXNGb3JMYXllcihsYXllcik7XG4gICAgICBwb3NzaWJsZUxvY3N0eWxlID0gbGF5ZXIubG9jc3R5bGUgfHwgbGF5ZXIuY29udGVudFswXS5sb2NhdGlvblN0eWxlXG4gICAgfVxuXG4gICAgbGV0IGNoZWNrTG9jc3R5bGUgPSB0aGlzLmFyckxvY3N0eWxlcy5maW5kSW5kZXgoKGVsZW1lbnQpID0+IGVsZW1lbnQgPT09IHBvc3NpYmxlTG9jc3R5bGUpO1xuICAgIGlmIChjaGVja0xvY3N0eWxlID09PSAtMSAmJiBwb3NzaWJsZUxvY3N0eWxlKSB7XG4gICAgICB0aGlzLmFyckxvY3N0eWxlcy5wdXNoKHBvc3NpYmxlTG9jc3R5bGUpO1xuICAgIH1cbiAgICBpZiAobGF5ZXIuYXN5bmNfY29udGVudCAmJiBsYXllci5hc3luY19jb250ZW50ICE9IDAgJiYgIWxheWVyLmV4Y2x1ZGVGcm9tU2luZ2xlTGF5ZXIpIHtcbiAgICAgIGxldCB1cmwgPSBcIlwiO1xuICAgICAgbGV0IGxvY3N0eWxlSWQgPSAwO1xuICAgICAgbGV0IHBhcmFtcyA9IFwiXCI7XG4gICAgICBsZXQgaG92ZXJMb2NhdGlvbjtcbiAgICAgIGxldCBob3ZlclN0eWxlO1xuICAgICAgbGV0IHBvcHVwID0gZmFsc2U7XG4gICAgICBsZXQgZm9yY2VOb2RlcyA9IGZhbHNlO1xuICAgICAgbGV0IHNob3dBZGRHZW9tcyA9IGZhbHNlO1xuICAgICAgbGV0IGxheWVySWQgPSBsYXllci5pZDtcbiAgICAgIGlmIChsYXllci5jb250ZW50ICYmIGxheWVyLmNvbnRlbnRbMF0gJiYgbGF5ZXIuY29udGVudFswXS5kYXRhKSB7XG4gICAgICAgIGxldCBkYXRhID0gbGF5ZXIuY29udGVudFswXS5kYXRhO1xuICAgICAgICB1cmwgPSBkYXRhLnVybDtcbiAgICAgICAgcG9wdXAgPSBkYXRhLnBvcHVwO1xuICAgICAgICBob3ZlckxvY2F0aW9uID0gZGF0YS5ob3Zlcl9sb2NhdGlvbjtcbiAgICAgICAgaG92ZXJTdHlsZSA9IGRhdGEuaG92ZXJfc3R5bGU7XG4gICAgICAgIHBhcmFtcyA9IGRhdGEucGFyYW1zO1xuICAgICAgICBsb2NzdHlsZUlkID0gbGF5ZXIubG9jc3R5bGU7XG4gICAgICB9XG4gICAgICBpZiAobGF5ZXIuY29udGVudCAmJiBsYXllci5jb250ZW50WzBdICYmIGxheWVyLmNvbnRlbnRbMF0uc2V0dGluZ3MpIHtcbiAgICAgICAgZm9yY2VOb2RlcyA9IGxheWVyLmNvbnRlbnRbMF0uc2V0dGluZ3MuZm9yY2VOb2RlcztcbiAgICAgICAgc2hvd0FkZEdlb21zID0gISFsYXllci5jb250ZW50WzBdLnNldHRpbmdzLnNob3dBZGRpdGlvbmFsR2VvbWV0cmllcztcbiAgICAgIH1cbiAgICAgIGNoZWNrTG9jc3R5bGUgPSB0aGlzLmFyckxvY3N0eWxlcy5maW5kSW5kZXgoKGVsZW1lbnQpID0+IGVsZW1lbnQgPT09IGxvY3N0eWxlSWQpO1xuICAgICAgaWYgKGNoZWNrTG9jc3R5bGUgPT09IC0xICYmIGxvY3N0eWxlSWQpIHtcbiAgICAgICAgdGhpcy5hcnJMb2NzdHlsZXMucHVzaChsb2NzdHlsZUlkKTtcbiAgICAgIH1cbiAgICAgIGxvYWRlcklkID0gdGhpcy5sb2FkZXJzLmxlbmd0aDtcbiAgICAgIHRoaXMubG9hZGVycy5wdXNoKHtcbiAgICAgICAgY2hhaW46IGlkQ2hhaW4sXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBwcmV2ZW50TG9hZGluZzogaGlkZSxcbiAgICAgICAgZm9yY2VOb2RlczogZm9yY2VOb2RlcyxcbiAgICAgICAgYXJyRXh0ZW50czogW10sXG4gICAgICAgIHBvcHVwOiBwb3B1cCxcbiAgICAgICAgc2hvd0FkZEdlb21zOiBzaG93QWRkR2VvbXMsXG4gICAgICAgIGxvY3N0eWxlSWQ6IGxvY3N0eWxlSWQsXG4gICAgICAgIGhvdmVyX2xvY2F0aW9uOiBob3ZlckxvY2F0aW9uLFxuICAgICAgICBob3Zlcl9zdHlsZTogaG92ZXJTdHlsZSxcbiAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgIGxheWVySWQ6IGxheWVySWRcbiAgICAgIH0pO1xuXG4gICAgfVxuICAgIGlmIChsYXllci5jaGlsZHMgJiYgbGF5ZXIuY2hpbGRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGxheWVySWQgaW4gbGF5ZXIuY2hpbGRzKSB7XG4gICAgICAgIGlmIChsYXllci5jaGlsZHMuaGFzT3duUHJvcGVydHkobGF5ZXJJZCkpIHtcbiAgICAgICAgICBsZXQgY2hpbGRDaGFpbiA9IGlkQ2hhaW4gKyBcIixcIiArIGNoaWxkcy5sZW5ndGg7XG4gICAgICAgICAgbGV0IG5ld0NoaWxkID0gdGhpcy5nZXRTdHJ1Y3R1cmVGcm9tTGF5ZXIobGF5ZXIuY2hpbGRzW2xheWVySWRdLCBjaGlsZENoYWluKTtcbiAgICAgICAgICBpZiAobmV3Q2hpbGQuaGlkZV9pbl9zdGFyYm9hcmQpIHtcbiAgICAgICAgICAgIGNoaWxkcyA9IG5ld0NoaWxkLmNoaWxkcyA/IGNoaWxkcy5jb25jYXQobmV3Q2hpbGQuY2hpbGRzKSA6IGNoaWxkcztcbiAgICAgICAgICAgIGZlYXR1cmVzID0gbmV3Q2hpbGQuZmVhdHVyZXMgPyBmZWF0dXJlcy5jb25jYXQobmV3Q2hpbGQuZmVhdHVyZXMpIDogZmVhdHVyZXM7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm1hcENvbnRyb2xsZXIuZmlsdGVyKSB7XG4gICAgICAgICAgICAgIGlmICghIXBhcnNlRmxvYXQodGhpcy5tYXBDb250cm9sbGVyLmRhdGEuZmlsdGVySGFuZGxpbmcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLmZpbHRlci5maWx0ZXJMYXllck11bHRpKHZlY3RvckxheWVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIuZmlsdGVyLmZpbHRlckxheWVyKHZlY3RvckxheWVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkcy5wdXNoKG5ld0NoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAobGF5ZXIuc3BsaXRfZ2VvanNvbikge1xuICAgICAgbGV0IG5hbWVGaWVsZCA9IGxheWVyLmdlb2pzb25fYXR0cmlidXRlcy5zcGxpdCgnLCcpWzBdO1xuICAgICAgbGV0IHpvb21UbyA9ICEhbGF5ZXIuZ2VvanNvbl96b29tO1xuICAgICAgZm9yIChsZXQgZmVhdHVyZUlkIGluIGZlYXR1cmVzKSB7XG4gICAgICAgIGlmIChmZWF0dXJlcy5oYXNPd25Qcm9wZXJ0eShmZWF0dXJlSWQpKSB7XG4gICAgICAgICAgY2hpbGRzLnB1c2goe1xuICAgICAgICAgICAgXCJmZWF0dXJlc1wiICAgICAgICA6IFtmZWF0dXJlc1tmZWF0dXJlSWRdXSxcbiAgICAgICAgICAgIFwidmVjdG9yTGF5ZXJcIiAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIFwiem9vbVwiICAgICAgICAgICAgOiBsYXllci56b29tLFxuICAgICAgICAgICAgXCJpbml0aWFsX29wZW5lZFwiICA6IGxheWVyLmluaXRpYWxfb3BlbmVkLFxuICAgICAgICAgICAgXCJsb2NzdHlsZVwiICAgICAgICA6IHBvc3NpYmxlTG9jc3R5bGUsXG4gICAgICAgICAgICBcInpvb21Ub1wiICAgICAgICAgIDogem9vbVRvLFxuICAgICAgICAgICAgXCJhY3RpdmF0ZVdpdGhCbFwiICA6IGxheWVyLmFjdGl2ZUZvckJhc2VsYXllcnMsXG4gICAgICAgICAgICBcImlkXCIgICAgICAgICAgICAgIDogZmVhdHVyZXNbZmVhdHVyZUlkXS5vbF91aWQsXG4gICAgICAgICAgICBcIm5hbWVcIiAgICAgICAgICAgIDogZmVhdHVyZXNbZmVhdHVyZUlkXS5nZXQobmFtZUZpZWxkKSxcbiAgICAgICAgICAgIFwiaGlkZVwiICAgICAgICAgICAgOiBoaWRlLFxuICAgICAgICAgICAgXCJjaGlsZHNcIiAgICAgICAgICA6IFtdXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmVhdHVyZXMgPSBbXTtcbiAgICB9XG4gICAgaWYgKGxheWVyLmV4Y2x1ZGVGcm9tU2luZ2xlTGF5ZXIpIHtcbiAgICAgIGxldCBjdXN0b21TdHlsZUZ1bmMgPSBmYWxzZTtcbiAgICAgIGxldCB2ZWN0b3JTb3VyY2UgPSBuZXcgVmVjdG9yU291cmNlKCk7XG4gICAgICBsZXQgcG9wdXAgPSBmYWxzZTtcbiAgICAgIGlmIChsYXllci5hc3luY19jb250ZW50ICYmIGxheWVyLmFzeW5jX2NvbnRlbnQgIT09IFwiMFwiKSB7XG4gICAgICAgIGxldCBzdHJhdGVneSA9IGxheWVyLnR5cGUgPT09IFwidGFibGVcIiB8fCAobGF5ZXIuY29udGVudCAmJiBsYXllci5jb250ZW50WzBdLnNldHRpbmdzLmJvdW5kaW5nQm94KSA/IGJib3ggOiBhbGw7XG4gICAgICAgIHZlY3RvclNvdXJjZSA9IG5ldyBWZWN0b3JTb3VyY2Uoe1wic3RyYXRlZ3lcIjogc3RyYXRlZ3l9KTtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuXG4gICAgICAgIGxldCBsb2FkZXJGdW5jID0gZnVuY3Rpb24oZXh0ZW50LCByZXNvbHV0aW9uLCBwcm9qZWN0aW9uKSB7XG4gICAgICAgICAgaWYgKGxheWVyLmNvbnRlbnQgJiYgbGF5ZXIuY29udGVudFswXS5zZXR0aW5ncy5ib3VuZGluZ0JveCAmJiAoZXh0ZW50WzBdID09PSBJbmZpbml0eSB8fCBleHRlbnRbMF0gPT09IC1JbmZpbml0eSkpIHtcbiAgICAgICAgICAgIHZlY3RvclNvdXJjZS5yZW1vdmVMb2FkZWRFeHRlbnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAobGF5ZXIuY29udGVudCAmJiBsYXllci5jb250ZW50WzBdICYmIGxheWVyLmNvbnRlbnRbMF0uZGF0YSkge1xuICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSBsYXllci5jb250ZW50WzBdO1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBjb250ZW50LmRhdGE7XG5cbiAgICAgICAgICAgIHNjb3BlLnBlcmZvcm1PdnAoe1xuICAgICAgICAgICAgICAgICAgXCJ1cmxcIjogZGF0YS51cmwsXG4gICAgICAgICAgICAgICAgICBcImxheWVySWRcIjogbGF5ZXIuaWQsXG4gICAgICAgICAgICAgICAgICBcImxheWVyXCI6IGxheWVyLFxuICAgICAgICAgICAgICAgICAgXCJ2ZWN0b3JTb3VyY2VcIjogdmVjdG9yU291cmNlLFxuICAgICAgICAgICAgICAgICAgXCJwYXJhbXNcIjogZGF0YS5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICBcImxvY3N0eWxlSWRcIjogbGF5ZXIubG9jc3R5bGVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwiZXh0ZW50XCI6IGV4dGVudCxcbiAgICAgICAgICAgICAgICAgIFwicmVzb2x1dGlvblwiOiByZXNvbHV0aW9uLFxuICAgICAgICAgICAgICAgICAgXCJwcm9qZWN0aW9uXCI6IHByb2plY3Rpb25cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChsYXllci50eXBlID09PSBcInRhYmxlXCIpIHtcbiAgICAgICAgICAgIGxldCByZXNwb25zZUZ1bmMgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICBsZXQgZmVhdHVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGxldCBjb250ZW50RGF0YSA9IGRhdGFbaV07XG4gICAgICAgICAgICAgICAgbGV0IGZlYXR1cmUgPSBzY29wZS5wYXJzZU93bkRhdGEoY29udGVudERhdGEsIGxheWVyKTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh2ZWN0b3JTb3VyY2UgaW5zdGFuY2VvZiBDbHVzdGVyKSB7XG4gICAgICAgICAgICAgICAgdmVjdG9yU291cmNlLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGZlYXR1cmVzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ZWN0b3JTb3VyY2UuYWRkRmVhdHVyZXMoZmVhdHVyZXMpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzY29wZS5wZXJmb3JtT3duRGF0YSh7XG4gICAgICAgICAgICAgIFwibGF5ZXJJZFwiOiBsYXllci5pZCxcbiAgICAgICAgICAgICAgXCJsb2NzdHlsZUlkXCI6IGxheWVyLmxvY3N0eWxlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcImV4dGVudFwiOiBleHRlbnQsXG4gICAgICAgICAgICAgIFwicmVzb2x1dGlvblwiOiByZXNvbHV0aW9uLFxuICAgICAgICAgICAgICBcInByb2plY3Rpb25cIjogcHJvamVjdGlvblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc3BvbnNlRnVuYylcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZlY3RvclNvdXJjZS5zZXRMb2FkZXIobG9hZGVyRnVuYyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChmZWF0dXJlcyAmJiBmZWF0dXJlcy5sZW5ndGgpe1xuICAgICAgICB2ZWN0b3JTb3VyY2UuYWRkRmVhdHVyZXMoZmVhdHVyZXMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxldCBjb250ZW50ID0gbGF5ZXIuY29udGVudFswXTtcbiAgICAgICAgbGV0IGZlYXR1cmVQcm9qZWN0aW9uID0gXCJFUFNHOjM4NTdcIjtcbiAgICAgICAgbGV0IGRhdGFQcm9qZWN0aW9uID0gXCJFUFNHOjQzMjZcIjtcblxuICAgICAgICBjdXN0b21TdHlsZUZ1bmMgPSBmdW5jdGlvbiAoZmVhdHVyZSwgcmVzb2x1dGlvbikge1xuICAgICAgICAgIGxldCBzaXplID0gZmFsc2U7XG4gICAgICAgICAgbGV0IHJldHVyblN0eWxlID0gW107XG4gICAgICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQgJiYgZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykpIHtcbiAgICAgICAgICAgIGxldCBmZWF0dXJlcyA9IGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpO1xuICAgICAgICAgICAgc2l6ZSA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICAgICAgICAgIGZlYXR1cmUgPSBmZWF0dXJlc1swXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGxheWVyICYmIGxheWVyLmxvY3N0eWxlICYmIGxheWVyLmxvY3N0eWxlICE9PSBcIjBcIikge1xuICAgICAgICAgICAgaWYgKHNjb3BlLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlcyAmJiBzY29wZS5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbbGF5ZXIubG9jc3R5bGVdICYmIHNjb3BlLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsYXllci5sb2NzdHlsZV0uc3R5bGUpIHtcbiAgICAgICAgICAgICAgbGV0IHN0eWxlID0gc2NvcGUucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2xheWVyLmxvY3N0eWxlXS5zdHlsZTtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuU3R5bGUgPSBzdHlsZShmZWF0dXJlLCByZXNvbHV0aW9uLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuU3R5bGUgPSBzY29wZS5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbbG9jc3R5bGVdLnN0eWxlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaXplID4gMSAmJiByZXR1cm5TdHlsZSAmJiBBcnJheS5pc0FycmF5KHJldHVyblN0eWxlKSkge1xuICAgICAgICAgICAgbGV0IGljb25PZmZzZXQgPSBbMCwgMF07XG4gICAgICAgICAgICBpZiAocmV0dXJuU3R5bGVbMF0pIHtcbiAgICAgICAgICAgICAgaWYgKHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkgJiYgcmV0dXJuU3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMgJiYgdHlwZW9mIHJldHVyblN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmFkaXVzID0gcGFyc2VJbnQocmV0dXJuU3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMoKSwgMTApO1xuICAgICAgICAgICAgICAgIGlmIChyYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSBbLXJhZGl1cywgcmFkaXVzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocmV0dXJuU3R5bGVbMF0uZ2V0SW1hZ2UoKSAmJiByZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvciAmJiB0eXBlb2YgcmV0dXJuU3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRBbmNob3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSByZXR1cm5TdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvcigpIHx8IFswLCAwXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZmlsbGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KCc0OTc1QTgnLHtcbiAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICB2YWx1ZTogNzBcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgZm9udGNvbG9yID0gJyNGRkZGRkYnO1xuXG4gICAgICAgICAgICByZXR1cm5TdHlsZS5wdXNoKFxuICAgICAgICAgICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IFwi4pePXCIsXG4gICAgICAgICAgICAgICAgICAgIGZvbnQ6IFwiNjBweCBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IC0xICogaWNvbk9mZnNldFswXSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEgKiBpY29uT2Zmc2V0WzFdLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZpbGxjb2xvclxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVyblN0eWxlLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICAgICAgICAgIHRleHQ6IG5ldyBUZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogc2l6ZS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiAtMSAqIGljb25PZmZzZXRbMF0sXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IC0xICogaWNvbk9mZnNldFsxXSArIDMsXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IG5ldyBGaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZm9udGNvbG9yXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmV0dXJuU3R5bGVcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgIGlmIChjb250ZW50LmRhdGEgJiYgY29udGVudC5kYXRhLnByb3BlcnRpZXMgJiYgY29udGVudC5kYXRhLnByb3BlcnRpZXMucHJvamVjdGlvbiAmJiBjb250ZW50LmRhdGEucHJvcGVydGllcy5wcm9qQ29kZSkge1xuICAgICAgICAgICAgLy8gaWYgKCFwcm9qNChjb250ZW50RGF0YS5kYXRhLnByb3BlcnRpZXMucHJvamVjdGlvbikpIHtcbiAgICAgICAgICAgIHByb2o0LmRlZnMoY29udGVudC5kYXRhLnByb3BlcnRpZXMucHJvamVjdGlvbiwgY29udGVudC5kYXRhLnByb3BlcnRpZXMucHJvakNvZGUpO1xuICAgICAgICAgICAgcmVnaXN0ZXIocHJvajQpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgZGF0YVByb2plY3Rpb24gPSBuZXcgUHJvamVjdGlvbih7XG4gICAgICAgICAgICAgIGNvZGU6IGNvbnRlbnQuZGF0YS5wcm9wZXJ0aWVzLnByb2plY3Rpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgZm9ybWF0ID0gbmV3IG9sRm9ybWF0W2NvbnRlbnRbJ2Zvcm1hdCddXSh7XG4gICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogZmVhdHVyZVByb2plY3Rpb24sXG4gICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogZGF0YVByb2plY3Rpb25cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZlY3RvclNvdXJjZSA9IG5ldyBWZWN0b3JTb3VyY2Uoe1xuICAgICAgICAgICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgICAgICAgICB1cmw6IGNvbnRlbnQuZGF0YS51cmxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwb3B1cCA9IGNvbnRlbnQuZGF0YSAmJiBjb250ZW50LmRhdGEucG9wdXAgPyBjb250ZW50LmRhdGEucG9wdXAgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH1cblxuICAgICAgaWYgKGxheWVyLmNsdXN0ZXIpIHtcbiAgICAgICAgdmVjdG9yU291cmNlID0gbmV3IENsdXN0ZXIoe1xuICAgICAgICAgIHNvdXJjZTogdmVjdG9yU291cmNlLFxuICAgICAgICAgIGdlb21ldHJ5RnVuY3Rpb246IHRoaXMuZ2VvbWV0cnlGdW5jdGlvbixcbiAgICAgICAgICBkaXN0YW5jZTogcGFyc2VJbnQobGF5ZXIuY2x1c3Rlci5kaXN0YW5jZSwgMTApXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdmVjdG9yTGF5ZXIgPSBuZXcgVmVjdG9yKHtcbiAgICAgICAgICBzb3VyY2U6IHZlY3RvclNvdXJjZSxcbiAgICAgICAgICBzdHlsZTogY3VzdG9tU3R5bGVGdW5jIHx8IHRoaXMuY2x1c3RlclN0eWxlRnVuY3Rpb25cbiAgICAgIH0pO1xuICAgICAgdmVjdG9yTGF5ZXIucG9wdXAgPSBwb3B1cDtcbiAgICAgIHNjb3BlLnByb3h5Lmhvb2tfbG9jc3R5bGVzX2xvYWRlZC5wdXNoKGZ1bmN0aW9uKGxvc3R5bGVDb250cm9sbGVyKSB7XG4gICAgICAgIHZlY3RvckxheWVyLmNoYW5nZWQoKTtcbiAgICAgIH0pO1xuICAgICAgbGV0IGdyZXllZCA9IGxheWVyLnpvb20gJiYgIXRoaXMuY29tcGFyZVpvb20obGF5ZXIuem9vbSk7XG4gICAgICBpZiAoIWhpZGUgJiYgIWdyZXllZCkge1xuICAgICAgICAvLyB2ZWN0b3JMYXllci5zZXRaSW5kZXgoMSk7XG4gICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIodmVjdG9yTGF5ZXIpO1xuICAgICAgfVxuICAgICAgZmVhdHVyZXMgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGxheWVyLmhpZGVJblN0YXJib2FyZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2hpbGRzOiBjaGlsZHMsXG4gICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlcyxcbiAgICAgICAgaGlkZV9pbl9zdGFyYm9hcmQ6IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBcImZlYXR1cmVzXCIgICAgICAgIDogZmVhdHVyZXMsXG4gICAgICAgIFwidmVjdG9yTGF5ZXJcIiAgICAgOiB2ZWN0b3JMYXllcixcbiAgICAgICAgXCJsb2FkZXJcIiAgICAgICAgICA6IGxvYWRlcklkLFxuICAgICAgICBcInpvb21cIiAgICAgICAgICAgIDogbGF5ZXIuem9vbSxcbiAgICAgICAgXCJpbml0aWFsX29wZW5lZFwiICA6IGxheWVyLmluaXRpYWxfb3BlbmVkLFxuICAgICAgICBcImxvY3N0eWxlXCIgICAgICAgIDogcG9zc2libGVMb2NzdHlsZSxcbiAgICAgICAgXCJhY3RpdmF0ZVdpdGhCbFwiICA6IGxheWVyLmFjdGl2ZUZvckJhc2VsYXllcnMsXG4gICAgICAgIFwiaWRcIiAgICAgICAgICAgICAgOiBsYXllci5pZCxcbiAgICAgICAgXCJuYW1lXCIgICAgICAgICAgICA6IGxheWVyLm5hbWUsXG4gICAgICAgIFwidGFnc1wiICAgICAgICAgICAgOiBsYXllci50YWdzLFxuICAgICAgICBcImhpZGVcIiAgICAgICAgICAgIDogaGlkZSxcbiAgICAgICAgXCJjaGlsZHNcIiAgICAgICAgICA6IGNoaWxkcyxcbiAgICAgICAgXCJhZGRab29tVG9cIiAgICAgICAgICA6IGxheWVyLmFkZFpvb21Ub1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBnZXRGZWF0dXJlc0ZvckxheWVyKGxheWVyKSB7XG4gICAgbGV0IGZlYXR1cmVzID0gW107XG4gICAgY29uc3QgZmVhdHVyZVByb2plY3Rpb24gPSBcIkVQU0c6Mzg1N1wiO1xuICAgIGZvciAobGV0IGNvbnRlbnRJZCBpbiBsYXllci5jb250ZW50KSB7XG4gICAgICBpZiAobGF5ZXIuY29udGVudC5oYXNPd25Qcm9wZXJ0eShjb250ZW50SWQpKSB7XG4gICAgICAgIGxldCBjb250ZW50ID0gbGF5ZXIuY29udGVudFtjb250ZW50SWRdO1xuICAgICAgICBsZXQgY29udGVudERhdGEgPSBjb250ZW50LmRhdGE7XG4gICAgICAgIGlmIChjb250ZW50RGF0YSkge1xuICAgICAgICAgIGxldCBkYXRhUHJvamVjdGlvbiA9IFwiRVBTRzo0MzI2XCI7XG4gICAgICAgICAgaWYgKGNvbnRlbnREYXRhLnByb3BlcnRpZXMgJiYgY29udGVudERhdGEucHJvcGVydGllcy5wcm9qZWN0aW9uICYmIGNvbnRlbnREYXRhLnByb3BlcnRpZXMucHJvakNvZGUpIHtcbiAgICAgICAgICAgIC8vIGlmICghcHJvajQoY29udGVudERhdGEuZGF0YS5wcm9wZXJ0aWVzLnByb2plY3Rpb24pKSB7XG4gICAgICAgICAgICBwcm9qNC5kZWZzKGNvbnRlbnREYXRhLnByb3BlcnRpZXMucHJvamVjdGlvbiwgY29udGVudERhdGEucHJvcGVydGllcy5wcm9qQ29kZSk7XG4gICAgICAgICAgICByZWdpc3Rlcihwcm9qNCk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBkYXRhUHJvamVjdGlvbiA9IG5ldyBQcm9qZWN0aW9uKHtcbiAgICAgICAgICAgICAgY29kZTogY29udGVudERhdGEucHJvcGVydGllcy5wcm9qZWN0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGZvcm1hdDtcbiAgICAgICAgICBpZiAobGF5ZXIuY29udGVudFtjb250ZW50SWRdLnR5cGUgPT09IFwidXJsRGF0YVwiKSB7XG4gICAgICAgICAgICBpZiAobGF5ZXIudHlwZSA9PT0gXCJrbWxcIikge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxheWVyLnR5cGUgPT09IFwiZ3B4XCIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChjb250ZW50RGF0YS5wcm9wZXJ0aWVzKXtcbiAgICAgICAgICAgIGZvcm1hdCA9IG5ldyBvbEZvcm1hdFtsYXllci5jb250ZW50W2NvbnRlbnRJZF0udHlwZV0oe1xuICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogZmVhdHVyZVByb2plY3Rpb24sXG4gICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiBjb250ZW50RGF0YS5wcm9wZXJ0aWVzLnByb2plY3Rpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCBsb2NzdHlsZSA9IGNvbnRlbnQubG9jYXRpb25TdHlsZSB8fCBsYXllci5sb2NzdHlsZTtcbiAgICAgICAgICBsZXQgY2hlY2tMb2NzdHlsZSA9IHRoaXMuYXJyTG9jc3R5bGVzLmZpbmRJbmRleCgoZWxlbWVudCkgPT4gZWxlbWVudCA9PT0gbG9jc3R5bGUpO1xuICAgICAgICAgIGlmIChjaGVja0xvY3N0eWxlID09PSAtMSAmJiBsb2NzdHlsZSkge1xuICAgICAgICAgICAgdGhpcy5hcnJMb2NzdHlsZXMucHVzaChsb2NzdHlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsYXllci5jb250ZW50W2NvbnRlbnRJZF0udHlwZSA9PT0gXCJHZW9KU09OXCIpIHtcbiAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS50eXBlID09PSBcIkZlYXR1cmVDb2xsZWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSBpbiBjb250ZW50RGF0YS5mZWF0dXJlcykge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5mZWF0dXJlcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgICAgICAgbGV0IHNpbmdsZUZlYXR1cmUgPSBmb3JtYXQucmVhZEZlYXR1cmUoY29udGVudERhdGEuZmVhdHVyZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgaWYgKCFzaW5nbGVGZWF0dXJlLmdldCgnbG9jc3R5bGUnKSkge1xuICAgICAgICAgICAgICAgICAgICBzaW5nbGVGZWF0dXJlLnNldCgnbG9jc3R5bGUnLCBsb2NzdHlsZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tMb2NzdHlsZSA9IHRoaXMuYXJyTG9jc3R5bGVzLmZpbmRJbmRleCgoZWxlbWVudCkgPT4gZWxlbWVudCA9PT0gc2luZ2xlRmVhdHVyZS5nZXQoJ2xvY3N0eWxlJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tMb2NzdHlsZSA9PT0gLTEgJiYgc2luZ2xlRmVhdHVyZS5nZXQoJ2xvY3N0eWxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFyckxvY3N0eWxlcy5wdXNoKHNpbmdsZUZlYXR1cmUuZ2V0KCdsb2NzdHlsZScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQuaG92ZXJfbG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgc2luZ2xlRmVhdHVyZS5zZXQoJ2hvdmVyX3N0eWxlJywgY29udGVudC5ob3Zlcl9zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgIHNpbmdsZUZlYXR1cmUuc2V0KCdob3Zlcl9sb2NhdGlvbicsIGNvbnRlbnQuaG92ZXJfbG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQubG9jX2xpbmt1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2luZ2xlRmVhdHVyZS5zZXQoJ2xvY19saW5rdXJsJywgY29udGVudC5sb2NfbGlua3VybCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEucHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNpbmdsZUZlYXR1cmUuZ2V0KCd0b29sdGlwJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzaW5nbGVGZWF0dXJlLnNldCgndG9vbHRpcCcsIGNvbnRlbnREYXRhLnByb3BlcnRpZXMudG9vbHRpcClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNpbmdsZUZlYXR1cmUuZ2V0KCdsYWJlbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2luZ2xlRmVhdHVyZS5zZXQoJ2xhYmVsJywgY29udGVudERhdGEucHJvcGVydGllcy5sYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzaW5nbGVGZWF0dXJlLmdldCgncG9wdXAnKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHNpbmdsZUZlYXR1cmUuc2V0KCdwb3B1cCcsIGNvbnRlbnREYXRhLnByb3BlcnRpZXMucG9wdXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlcy5wdXNoKHNpbmdsZUZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29udGVudERhdGEgJiYgY29udGVudERhdGEudHlwZSkge1xuICAgICAgICAgICAgICBsZXQgZmVhdHVyZSA9IGZvcm1hdC5yZWFkRmVhdHVyZShjb250ZW50RGF0YSk7XG4gICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdsb2NzdHlsZScsIGxvY3N0eWxlKTtcbiAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ25vRmlsdGVyJywgbGF5ZXIubm9SZWFsRmlsdGVyKTtcbiAgICAgICAgICAgICAgaWYgKGNvbnRlbnQuaG92ZXJfbG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnaG92ZXJfc3R5bGUnLCBjb250ZW50LmhvdmVyX3N0eWxlKTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnaG92ZXJfbG9jYXRpb24nLCBjb250ZW50LmhvdmVyX2xvY2F0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEubG9jX2xpbmt1cmwpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbG9jX2xpbmt1cmwnLCBjb250ZW50RGF0YS5sb2NfbGlua3VybCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGZldGNoKGNvbnRlbnREYXRhLnVybCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgcmVzcG9uc2UudGV4dCgpLnRoZW4oKHRleHQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh0ZXh0LCBcInRleHQveG1sXCIpO1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wRmVhdHVyZXMgPSBmb3JtYXQucmVhZEZlYXR1cmUoZGF0YS5jaGlsZE5vZGVzWzBdLm91dGVySFRNTCk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZmVhdElkIGluIHRlbXBGZWF0dXJlcykge1xuICAgICAgICAgICAgICAgICAgaWYgKHRlbXBGZWF0dXJlcy5oYXNPd25Qcm9wZXJ0eShmZWF0SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlID0gdGVtcEZlYXR1cmVzW2ZlYXRJZF07XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdsb2NzdHlsZScsIGxvY3N0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREYXRhLmhvdmVyX2xvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zZXQoJ2hvdmVyX3N0eWxlJywgY29udGVudERhdGEuaG92ZXJfc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0KCdob3Zlcl9sb2NhdGlvbicsIGNvbnRlbnREYXRhLmhvdmVyX2xvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudERhdGEubG9jX2xpbmt1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNldCgnbG9jX2xpbmt1cmwnLCBjb250ZW50RGF0YS5sb2NfbGlua3VybCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3h5Lm1hcERhdGEuY2FsY19leHRlbnQgPT09IFwiTE9DQVRJT05TXCIgfHwgdGhpcy5wcm94eS5tYXBEYXRhLmNhbGNfZXh0ZW50ID09PSBcIkNFTlRFUkxPQ1NcIikge1xuICAgICAgZm9yIChsZXQgaSBpbiBmZWF0dXJlcykge1xuICAgICAgICBpZiAoZmVhdHVyZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICBsZXQgZXh0ZW50ID0gZmVhdHVyZXNbaV0uZ2V0R2VvbWV0cnkoKS5nZXRFeHRlbnQoKTtcbiAgICAgICAgICBpZiAodGhpcy5leHRlbnQubWF4WCA8IGV4dGVudFsyXSkge1xuICAgICAgICAgICAgdGhpcy5leHRlbnQubWF4WCA9IGV4dGVudFsyXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuZXh0ZW50Lm1heFkgPCBleHRlbnRbM10pIHtcbiAgICAgICAgICAgIHRoaXMuZXh0ZW50Lm1heFkgPSBleHRlbnRbM107XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLmV4dGVudC5taW5YID4gZXh0ZW50WzBdKSB7XG4gICAgICAgICAgICB0aGlzLmV4dGVudC5taW5YID0gZXh0ZW50WzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5leHRlbnQubWluWSA+IGV4dGVudFsxXSkge1xuICAgICAgICAgICAgdGhpcy5leHRlbnQubWluWSA9IGV4dGVudFsxXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRoaXMub2JqSWRzLmhhc093blByb3BlcnR5KGxheWVyLmlkKSkge1xuICAgICAgaWYgKCFsYXllci5zcGxpdF9nZW9qc29uKSB7XG4gICAgICAgIHRoaXMub2JqSWRzW2xheWVyLmlkXSA9IGZlYXR1cmVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZlYXR1cmVzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbiAgZ2VvbWV0cnlGdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgIGxldCBnZW9tZXRyeSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcbiAgICBpZiAoZ2VvbWV0cnkgaW5zdGFuY2VvZiBQb2ludCkge1xuICAgICAgcmV0dXJuIGdlb21ldHJ5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHBlcmZvcm1PdnAocmVxdWVzdERhdGEsIG1hcENvbmYpIHtcbiAgICBpZiAodGhpcy5jb250cm9sbGVyc1tyZXF1ZXN0RGF0YS5sYXllcklkXSkgeyAgICAvL2Fib3J0IHJlcXVlc3QsIGlmIG5ldyBleGlzdHNcbiAgICAgIHRoaXMuY29udHJvbGxlcnNbcmVxdWVzdERhdGEubGF5ZXJJZF0uYWJvcnQoKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmNvbnRyb2xsZXJzW3JlcXVlc3REYXRhLmxheWVySWRdO1xuICAgIH1cbiAgICBjb25zdCBzY29wZSA9IHRoaXM7XG4gICAgdGhpcy5jb250cm9sbGVyc1tyZXF1ZXN0RGF0YS5sYXllcklkXSA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBjb25zdCBzaWduYWwgPSB0aGlzLmNvbnRyb2xsZXJzW3JlcXVlc3REYXRhLmxheWVySWRdLnNpZ25hbDtcbiAgICBsZXQgYm91bmRpbmdBcnJheSA9IHRyYW5zZm9ybUV4dGVudChtYXBDb25mLmV4dGVudCwgbWFwQ29uZi5wcm9qZWN0aW9uLCAnRVBTRzo0MzI2Jyk7XG4gICAgbGV0IHN0ckJvdW5kaW5nQm94ID0gXCJcIjtcbiAgICBsZXQgdXJsID0gcmVxdWVzdERhdGEudXJsO1xuICAgIGxldCBwYXJhbXMgPSBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdERhdGEucGFyYW1zKTtcbiAgICBpZiAodXJsKSB7XG4gICAgICBpZiAodXJsLmluZGV4T2YoJ3trZXl9JykgPiAtMSkge1xuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgne2tleX0nLCBzY29wZS5vdnBLZXkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBiYm94VGFnID0gcGFyYW1zLmluZGV4T2YoJyhiYm94KScpID49IDAgPyAvXFwoYmJveFxcKS9nIDogL1xce3tiYm94XFx9fS9nO1xuICAgICAgdXJsICs9IHVybC5pbmNsdWRlcyhcIj9cIikgPyBcIiZcIiA6IFwiP1wiO1xuICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuc3Vic3RyKDAsIDEpLnRyaW0oKSA9PT0gXCI8XCIpIHtcbiAgICAgICAgc3RyQm91bmRpbmdCb3ggPSAnPGJib3gtcXVlcnkgcz1cIicgKyBib3VuZGluZ0FycmF5WzFdICsgJ1wiIG49XCInICsgYm91bmRpbmdBcnJheVszXSArICdcIiB3PVwiJyArIGJvdW5kaW5nQXJyYXlbMF0gKyAnXCIgZT1cIicgKyBib3VuZGluZ0FycmF5WzJdICsgJ1wiLz4nO1xuICAgICAgICB1cmwgKz0gJ2RhdGE9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXMucmVwbGFjZShiYm94VGFnLCBzdHJCb3VuZGluZ0JveCkpO1xuICAgICAgICBmZXRjaCh1cmwsIHtzaWduYWx9KS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIHJlc3BvbnNlLnRleHQoKS50aGVuKChyZXNwKSA9PiB7c2NvcGUucGFyc2VPdnBEYXRhKHJlc3AsIHJlcXVlc3REYXRhKX0pLmNhdGNoKChlcnJvcikgPT4ge2NvbnNvbGUubG9nKGVycm9yLm1lc3NhZ2UpfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IuY29kZSAmJiBlcnJvci5jb2RlICE9PSAyMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZldGNoIEVycm9yIDotUycsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJCb3VuZGluZ0JveCA9IGJvdW5kaW5nQXJyYXlbMV0gKyAnLCcgKyBib3VuZGluZ0FycmF5WzBdICsgJywnICsgYm91bmRpbmdBcnJheVszXSArICcsJyArIGJvdW5kaW5nQXJyYXlbMl07XG4gICAgICAgIHVybCArPSAnZGF0YT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5yZXBsYWNlKGJib3hUYWcsIHN0ckJvdW5kaW5nQm94KSk7XG4gICAgICAgIGZldGNoKHVybCwge3NpZ25hbH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4oKHJlc3BvKT0+IHtzY29wZS5wYXJzZU92cERhdGEocmVzcG8sIHJlcXVlc3REYXRhKX0pLmNhdGNoKChlcnJvcikgPT4ge2NvbnNvbGUubG9nKGVycm9yLm1lc3NhZ2UpfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IuY29kZSAmJiBlcnJvci5jb2RlICE9PSAyMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZldGNoIEVycm9yIDotUycsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHBhcnNlT3ZwRGF0YSAocmVzcG9uc2UsIHJlcXVlc3REYXRhKSB7XG4gICAgbGV0IGxheWVyID0gcmVxdWVzdERhdGEubGF5ZXI7XG4gICAgbGV0IGNvbnRlbnQgPSBsYXllci5jb250ZW50WzBdO1xuICAgIGxldCBkYXRhID0gY29udGVudC5kYXRhO1xuICAgIGxldCBmZWF0dXJlcztcbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBsZXQgdGV4dCA9IHJlc3BvbnNlO1xuICAgICAgaWYgKCEhIWNvbnRlbnQuc2V0dGluZ3Muc2hvd0FkZGl0aW9uYWxHZW9tZXRyaWVzKSB7XG4gICAgICAgIGxldCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgICAgIGxldCB4bWxEb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHJlc3BvbnNlLCBcInRleHQveG1sXCIpO1xuICAgICAgICBsZXQgZmVhdHVyZXNEb2MgPSB4bWxEb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3dheScpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZlYXR1cmVzRG9jLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IHNpbmdsZUZlYXR1cmUgPSBmZWF0dXJlc0RvY1tpXTtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNpbmdsZUZlYXR1cmUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGxldCBub2RlSWQgPSBzaW5nbGVGZWF0dXJlLmNoaWxkcmVuW2pdLmdldEF0dHJpYnV0ZSgncmVmJyk7XG4gICAgICAgICAgICBsZXQgbm9kZUVsZW1lbnQgPSB4bWxEb2MuZ2V0RWxlbWVudEJ5SWQobm9kZUlkKTtcbiAgICAgICAgICAgIHdoaWxlIChub2RlRWxlbWVudCAmJiBub2RlRWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIG5vZGVFbGVtZW50LnJlbW92ZUNoaWxkKG5vZGVFbGVtZW50LmNoaWxkcmVuWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNlcmlhbGl6ZXIgPSBuZXcgWE1MU2VyaWFsaXplcigpO1xuICAgICAgICB0ZXh0ID0gc2VyaWFsaXplci5zZXJpYWxpemVUb1N0cmluZyh4bWxEb2MpO1xuICAgICAgfVxuXG4gICAgICBsZXQgZm9ybWF0ID0gbmV3IE9TTVhNTCgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZmVhdHVyZXMgPSBmb3JtYXQucmVhZEZlYXR1cmVzKHRleHQsIHtmZWF0dXJlUHJvamVjdGlvbjogXCJFUFNHOjM4NTdcIn0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0NhbiBub3QgcmVhZCBmZWF0dXJlLicpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlID09PSBcIm9iamVjdFwiKXtcbiAgICAgIGxldCBnZW9qc29uID0gb3NtdG9nZW9qc29uKHJlc3BvbnNlKTtcbiAgICAgIGZlYXR1cmVzID0gbmV3IG9sRm9ybWF0Lkdlb0pTT04oKS5yZWFkRmVhdHVyZXMoZ2VvanNvbiwge2ZlYXR1cmVQcm9qZWN0aW9uOiBcIkVQU0c6Mzg1N1wifSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gc2V0IHBvcHVwcyBmb3IgZmVhdHVyZXNcbiAgICBpZiAoZGF0YS5wb3B1cCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcG9wdXAgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaiBpbiBkYXRhLnBvcHVwKSB7XG4gICAgICAgICAgaWYgKGRhdGEucG9wdXAuaGFzT3duUHJvcGVydHkoaikpIHtcbiAgICAgICAgICAgIHBvcHVwW2pdID0gZGF0YS5wb3B1cFtqXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmVhdHVyZXNbaV0uc2V0KCdwb3B1cCcsIHBvcHVwKTtcbiAgICAgICAgZmVhdHVyZXNbaV0uc2V0KCdub0ZpbHRlcicsIGxheWVyLm5vUmVhbEZpbHRlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3REYXRhcyA9IChsYXllci5jb250ZW50ICYmIGxheWVyLmNvbnRlbnRbMF0uc2V0dGluZ3MpID8gbGF5ZXIuY29udGVudFswXS5zZXR0aW5nczoge307XG4gICAgZm9yIChsZXQgZmVhdHVyZUlkIGluIGZlYXR1cmVzKSB7XG4gICAgICBpZiAoZmVhdHVyZXMuaGFzT3duUHJvcGVydHkoZmVhdHVyZUlkKSkge1xuICAgICAgICBpZiAoZmVhdHVyZXNbZmVhdHVyZUlkXS5nZXRHZW9tZXRyeSgpLmdldFR5cGUoKSA9PT0gXCJQb2x5Z29uXCIpIHtcbiAgICAgICAgICBpZiAocmVxdWVzdERhdGFzLmZvcmNlTm9kZXMpIHtcbiAgICAgICAgICAgIGZlYXR1cmVzW2ZlYXR1cmVJZF0uc2V0R2VvbWV0cnkoZmVhdHVyZXNbZmVhdHVyZUlkXS5nZXRHZW9tZXRyeSgpLmdldEludGVyaW9yUG9pbnQoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZlYXR1cmVzW2ZlYXR1cmVJZF0uc2V0KCdvc21fdHlwZScsICd3YXknKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmZWF0dXJlc1tmZWF0dXJlSWRdLmdldEdlb21ldHJ5KCkuZ2V0VHlwZSgpID09PSBcIk11bHRpUG9seWdvblwiKSB7XG4gICAgICAgICAgaWYgKHJlcXVlc3REYXRhcy5mb3JjZU5vZGVzKSB7XG4gICAgICAgICAgICBmZWF0dXJlc1tmZWF0dXJlSWRdLnNldEdlb21ldHJ5KGZlYXR1cmVzW2ZlYXR1cmVJZF0uZ2V0R2VvbWV0cnkoKVswXS5nZXRJbnRlcmlvclBvaW50KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmZWF0dXJlc1tmZWF0dXJlSWRdLnNldCgnb3NtX3R5cGUnLCAncmVsYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmZWF0dXJlc1tmZWF0dXJlSWRdLmdldEdlb21ldHJ5KCkuZ2V0VHlwZSgpID09PSBcIlBvaW50XCIpIHtcbiAgICAgICAgICBmZWF0dXJlc1tmZWF0dXJlSWRdLnNldCgnb3NtX3R5cGUnLCAnbm9kZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWFwQ29udHJvbGxlci5maWx0ZXIpIHtcbiAgICAgICAgICBpZiAoISFwYXJzZUZsb2F0KHRoaXMubWFwQ29udHJvbGxlci5kYXRhLmZpbHRlckhhbmRsaW5nKSkge1xuICAgICAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLmZpbHRlci5oaWRlRmVhdHVyZU11bHRpKGZlYXR1cmVzW2ZlYXR1cmVJZF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5maWx0ZXIuaGlkZUZlYXR1cmUoZmVhdHVyZXNbZmVhdHVyZUlkXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZlYXR1cmVzW2ZlYXR1cmVJZF0uc2V0KCdsb2NzdHlsZScsIGxheWVyLmxvY3N0eWxlKTtcbiAgICAgICAgaWYgKGNvbnRlbnQuaG92ZXJfbG9jYXRpb24pIHtcbiAgICAgICAgICBmZWF0dXJlc1tmZWF0dXJlSWRdLnNldCgnaG92ZXJfc3R5bGUnLCBjb250ZW50LmhvdmVyX3N0eWxlKTtcbiAgICAgICAgICBmZWF0dXJlc1tmZWF0dXJlSWRdLnNldCgnaG92ZXJfbG9jYXRpb24nLCBjb250ZW50LmhvdmVyX2xvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGVudC5sb2NfbGlua3VybCkge1xuICAgICAgICAgIGZlYXR1cmVzW2ZlYXR1cmVJZF0uc2V0KCdsb2NfbGlua3VybCcsIGNvbnRlbnQubG9jX2xpbmt1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZW50LmNsdXN0ZXJfZmlsbGNvbG9yICYmIGNvbnRlbnQuY2x1c3Rlcl9mb250Y29sb3IpIHtcbiAgICAgICAgICBmZWF0dXJlc1tmZWF0dXJlSWRdLnNldCgnY2x1c3Rlcl9maWxsY29sb3InLCBjb250ZW50LmNsdXN0ZXJfZmlsbGNvbG9yKTtcbiAgICAgICAgICBmZWF0dXJlc1tmZWF0dXJlSWRdLnNldCgnY2x1c3Rlcl9mb250Y29sb3InLCBjb250ZW50LmNsdXN0ZXJfZm9udGNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVxdWVzdERhdGEuY2hhaW4gfHwgcmVxdWVzdERhdGEuY2hhaW4gPiAtMSkge1xuICAgICAgdGhpcy5hZGRGZWF0dXJlcyhmZWF0dXJlcywgcmVxdWVzdERhdGEuY2hhaW4pO1xuICAgICAgdGhpcy5tYXBDb250cm9sbGVyLnNldE9iakxheWVycyh0aGlzLmFyckxheWVycyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKHJlcXVlc3REYXRhLnZlY3RvclNvdXJjZSBpbnN0YW5jZW9mIENsdXN0ZXIpIHtcbiAgICAgICAgcmVxdWVzdERhdGEudmVjdG9yU291cmNlLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKGZlYXR1cmVzKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXF1ZXN0RGF0YS52ZWN0b3JTb3VyY2UuYWRkRmVhdHVyZXMoZmVhdHVyZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwZXJmb3JtT3duRGF0YSAocmVxdWVzdERhdGEsIG1hcENvbmYsIHJlc3BvbnNlRnVuYykge1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICBpZiAodGhpcy5jb250cm9sbGVyc1tyZXF1ZXN0RGF0YS5sYXllcklkXSkgeyAgICAvL2Fib3J0IHJlcXVlc3QsIGlmIG5ldyBleGlzdHNcbiAgICAgIHRoaXMuY29udHJvbGxlcnNbcmVxdWVzdERhdGEubGF5ZXJJZF0uYWJvcnQoKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmNvbnRyb2xsZXJzW3JlcXVlc3REYXRhLmxheWVySWRdO1xuICAgIH1cbiAgICBpZiAobWFwQ29uZi5leHRlbnRbMF0gPT09IEluZmluaXR5IHx8IG1hcENvbmYuZXh0ZW50WzBdID09PSAtSW5maW5pdHkgfHxcbiAgICAgICAgbWFwQ29uZi5leHRlbnRbMV0gPT09IEluZmluaXR5IHx8IG1hcENvbmYuZXh0ZW50WzFdID09PSAtSW5maW5pdHkgfHxcbiAgICAgICAgbWFwQ29uZi5leHRlbnRbMl0gPT09IEluZmluaXR5IHx8IG1hcENvbmYuZXh0ZW50WzJdID09PSAtSW5maW5pdHkgfHxcbiAgICAgICAgbWFwQ29uZi5leHRlbnRbM10gPT09IEluZmluaXR5IHx8IG1hcENvbmYuZXh0ZW50WzNdID09PSAtSW5maW5pdHkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICAvLyBAVG9kZWzDvCBpbXBsZW1lbnQgaGFuZGxpbmcgZm9yIG90aGVyIHByb2plY3Rpb25zXG4gICAgbGV0IGJvdW5kaW5nQXJyYXkgPSB0cmFuc2Zvcm1FeHRlbnQobWFwQ29uZi5leHRlbnQsIG1hcENvbmYucHJvamVjdGlvbiwgJ0VQU0c6NDMyNicpO1xuICAgIGxldCBzdHJCb3VuZGluZ0JveCA9IGJvdW5kaW5nQXJyYXlbMF0gKyAnLCcgKyBib3VuZGluZ0FycmF5IFsxXSArICc7JyArIGJvdW5kaW5nQXJyYXlbMl0gKyAnLCcgKyBib3VuZGluZ0FycmF5WzNdO1xuXG4gICAgbGV0IHVybCA9IHNjb3BlLnByb3h5LmFwaV9sYXllcmNvbnRlbnRkYXRhX3VybCArICcvJyArIHJlcXVlc3REYXRhLmxheWVySWQgKyAnLycgKyBzdHJCb3VuZGluZ0JveDtcblxuICAgIHRoaXMuY29udHJvbGxlcnNbcmVxdWVzdERhdGEubGF5ZXJJZF0gPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgY29uc3Qgc2lnbmFsID0gdGhpcy5jb250cm9sbGVyc1tyZXF1ZXN0RGF0YS5sYXllcklkXS5zaWduYWw7XG4gICAgZmV0Y2godXJsLCB7c2lnbmFsfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKHJlc3BvbnNlRnVuYykuY2F0Y2goKGVycm9yKSA9PiB7Y29uc29sZS5sb2coZXJyb3IubWVzc2FnZSl9KTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGlmIChlcnJvci5jb2RlICYmIGVycm9yLmNvZGUgIT09IDIwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdGZXRjaCBFcnJvciA6LVMnLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBwYXJzZU93bkRhdGEgKGNvbnRlbnREYXRhLCBsYXllcikge1xuICAgIHZhciByZXN1bHRDb29yZGluYXRlID0gdHJhbnNmb3JtKFtwYXJzZUZsb2F0KGNvbnRlbnREYXRhWydnZW94J10pLCBwYXJzZUZsb2F0KGNvbnRlbnREYXRhWydnZW95J10pXSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgIHZhciBwb2ludCA9IG5ldyBQb2ludChyZXN1bHRDb29yZGluYXRlKTtcbiAgICBsZXQgY29udGVudEZlYXR1cmUgPSBuZXcgRmVhdHVyZShwb2ludCk7XG4gICAgY29udGVudEZlYXR1cmUuc2V0SWQoY29udGVudERhdGEuaWQpO1xuICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnbm9GaWx0ZXInLCBsYXllci5ub1JlYWxGaWx0ZXIpO1xuICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnaG92ZXJfbG9jYXRpb24nLCBsYXllci5ob3Zlcl9sb2NhdGlvbik7XG4gICAgY29udGVudEZlYXR1cmUuc2V0KCdob3Zlcl9zdHlsZScsIGxheWVyLmhvdmVyX3N0eWxlKTtcbiAgICBsZXQgcG9wdXAgPSBjb250ZW50RGF0YVsncG9wdXAnXSA/IGNvbnRlbnREYXRhWydwb3B1cCddIDogalF1ZXJ5LmV4dGVuZCh7fSxsYXllci5wb3B1cCk7XG4gICAgaWYocG9wdXAgJiYgcG9wdXAuY29udGVudCAmJiBwb3B1cC5jb250ZW50LnNlYXJjaCAmJiBwb3B1cC5jb250ZW50LnNlYXJjaCgnaXRlbUlkJykpe1xuICAgICAgcG9wdXAuY29udGVudCA9IHBvcHVwLmNvbnRlbnQucmVwbGFjZSgnaXRlbUlkJyxjb250ZW50RGF0YVsnaWQnXSk7XG4gICAgfVxuICAgIGlmKGNvbnRlbnREYXRhWydsYWJlbCddKXtcbiAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnbGFiZWwnLGNvbnRlbnREYXRhWydsYWJlbCddKVxuICAgIH1cbiAgICBpZihjb250ZW50RGF0YVsndG9vbHRpcCddKXtcbiAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgndG9vbHRpcCcsY29udGVudERhdGFbJ3Rvb2x0aXAnXSlcbiAgICB9XG4gICAgaWYgKGNvbnRlbnREYXRhLmxvY19saW5rdXJsKSB7XG4gICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2xvY19saW5rdXJsJywgY29udGVudERhdGEubG9jX2xpbmt1cmwpO1xuICAgIH1cbiAgICBjb250ZW50RmVhdHVyZS5zZXQoJ3BvcHVwJywgcG9wdXApO1xuICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnem9vbV9vbmNsaWNrJywgbGF5ZXIuem9vbV9vbmNsaWNrKTtcbiAgICBjb250ZW50RmVhdHVyZS5zZXQoJ3RpZCcsIGNvbnRlbnREYXRhWydpZCddKTtcbiAgICBsZXQgbG9jc3R5bGUgPSBjb250ZW50RGF0YVsnbG9jc3R5bGUnXSB8fCBsYXllci5sb2NzdHlsZTtcbiAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2xvY3N0eWxlJywgbG9jc3R5bGUpO1xuXG4gICAgaWYgKHRoaXMubWFwQ29udHJvbGxlci5maWx0ZXIpIHtcbiAgICAgIGlmICghIXBhcnNlRmxvYXQodGhpcy5tYXBDb250cm9sbGVyLmRhdGEuZmlsdGVySGFuZGxpbmcpKSB7XG4gICAgICAgIHRoaXMubWFwQ29udHJvbGxlci5maWx0ZXIuaGlkZUZlYXR1cmVNdWx0aShjb250ZW50RmVhdHVyZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLmZpbHRlci5oaWRlRmVhdHVyZShjb250ZW50RmVhdHVyZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50RmVhdHVyZTtcbiAgfVxuICBhZGRGZWF0dXJlcyAoZmVhdHVyZXMsIGNoYWluKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIGxldCBhZGRlZEZlYXR1cmVzO1xuICAgIGxldCBsYXllcjtcbiAgICBsZXQgb2xkTGVuZ3RoID0gc2NvcGUudmVjdG9yQ29sbGVjdGlvbi5nZXRMZW5ndGgoKTsgLy9uZWNlc2FycnkgdG8gZGlzdGluY3QgcmVkdW5kYW50IGZlYXR1cmVzXG5cbiAgICBzY29wZS52ZWN0b3JDb2xsZWN0aW9uLmV4dGVuZChmZWF0dXJlcyk7XG4gICAgYWRkZWRGZWF0dXJlcyA9IHNjb3BlLnZlY3RvckNvbGxlY3Rpb24uZ2V0QXJyYXkoKS5zbGljZShvbGRMZW5ndGgpO1xuXG4gICAgaWYgKHR5cGVvZiBjaGFpbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbGV0IGFyckNoYWluID0gY2hhaW4uc3BsaXQoJywnKTtcbiAgICAgIGxldCBpID0gMTtcbiAgICAgIGxheWVyID0gc2NvcGUuYXJyTGF5ZXJzW2FyckNoYWluWzBdXTtcbiAgICAgIHdoaWxlKGNoYWluW2ldKSB7XG4gICAgICAgIGxheWVyID0gbGF5ZXIuY2hpbGRzW2FyckNoYWluW2ldXTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGxheWVyID0gc2NvcGUuYXJyTGF5ZXJzW2NoYWluXVxuICAgIH1cbiAgICBpZiAobGF5ZXIuZmVhdHVyZXMpIHtcbiAgICAgIGxheWVyLmZlYXR1cmVzID0gbGF5ZXIuZmVhdHVyZXMuY29uY2F0KGFkZGVkRmVhdHVyZXMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChsYXllci52ZWN0b3JMYXllcikge1xuICAgICAgbGV0IHNvdXJjZSA9IGxheWVyLnZlY3RvckxheWVyLmdldFNvdXJjZSgpLmdldFNvdXJjZSgpO1xuICAgICAgc291cmNlLmFkZEZlYXR1cmVzKGZlYXR1cmVzKTtcbiAgICB9XG4gIH1cbiAgaGFuZGxlWm9vbShwcm94eSkge1xuICAgIGNvbnN0IG1hcENvbnRyb2xsZXIgPSBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXI7XG4gICAgY29uc3QgY2hpbGRTdGF0ZXMgPSBtYXBDb250cm9sbGVyLnN0YXRlLmFyckxheWVyU3RhdGVzO1xuICAgIGNvbnN0IG9iakxheWVycyA9IG1hcENvbnRyb2xsZXIuc3RhdGUub2JqTGF5ZXJzO1xuICAgIGNvbnN0IHpvb20gPSBtYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpO1xuICAgIGZvciAobGV0IGlkIGluIGNoaWxkU3RhdGVzKSB7XG4gICAgICBpZiAoY2hpbGRTdGF0ZXMuaGFzT3duUHJvcGVydHkoaWQpICYmIG9iakxheWVyc1tpZF0pIHtcbiAgICAgICAgY2hpbGRTdGF0ZXNbaWRdID0gdGhpcy5oYW5kbGVab29tQ2hpbGRzKHpvb20sIGNoaWxkU3RhdGVzW2lkXSwgb2JqTGF5ZXJzW2lkXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubWFwQ29udHJvbGxlciA/IHRoaXMubWFwQ29udHJvbGxlci5zZXRMYXllclN0YXRlcyhjaGlsZFN0YXRlcykgOiAnJztcbiAgfVxuICBoYW5kbGVab29tQ2hpbGRzICh6b29tLCBjaGlsZFN0YXRlLCBjaGlsZCkge1xuICAgIGZvciAobGV0IGlkIGluIGNoaWxkU3RhdGUuY2hpbGRTdGF0ZXMpIHtcbiAgICAgIGlmIChjaGlsZFN0YXRlLmNoaWxkU3RhdGVzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICBjaGlsZFN0YXRlLmNoaWxkU3RhdGVzW2lkXSA9IHRoaXMuaGFuZGxlWm9vbUNoaWxkcyh6b29tLCBjaGlsZFN0YXRlLmNoaWxkU3RhdGVzW2lkXSwgY2hpbGQuY2hpbGRzW2lkXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBncmV5ZWQgPSBjaGlsZC56b29tICYmICF0aGlzLmNvbXBhcmVab29tKGNoaWxkLnpvb20pO1xuICAgIGlmIChjaGlsZFN0YXRlWydncmV5ZWQnXSAhPT0gZ3JleWVkKSB7XG4gICAgICBpZiAoZ3JleWVkIHx8ICEhY2hpbGQuaGlkZSkge1xuICAgICAgICB0aGlzLmhpZGUoY2hpbGQubG9hZGVyLCBjaGlsZC5mZWF0dXJlcyB8fCBjaGlsZC52ZWN0b3JMYXllcik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93KGNoaWxkLmxvYWRlciwgY2hpbGQuZmVhdHVyZXMgfHwgY2hpbGQudmVjdG9yTGF5ZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjaGlsZFN0YXRlWydncmV5ZWQnXSA9IGdyZXllZDtcblxuICAgIHJldHVybiBjaGlsZFN0YXRlO1xuXG4gIH1cbiAgY29tcGFyZVpvb20obGF5ZXJab29tKSB7XG4gICAgbGV0IHpvb20gPSB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRab29tKCk7XG4gICAgcmV0dXJuIChwYXJzZUludChsYXllclpvb20ubWluLCAxMCkgPCB6b29tICYmIHBhcnNlSW50KGxheWVyWm9vbS5tYXgsIDEwKSA+IHpvb20pO1xuICB9XG59XG4iLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cbmltcG9ydCB7QzRnTG9jYXRpb25TdHlsZX0gZnJvbSBcIi4vYzRnLWxvY2F0aW9uc3R5bGVcIjtcbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuL2M0Zy1tYXBzLXV0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBDNGdMb2NhdGlvblN0eWxlQ29udHJvbGxlciB7XG5cbiAgY29uc3RydWN0b3IocHJveHkpIHtcbiAgICB0aGlzLnByb3h5ID0gcHJveHk7XG4gICAgdGhpcy5tYXBDb250cm9sbGVyID0gcHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyO1xuICAgIHRoaXMuYXJyTG9jU3R5bGVzID0ge307XG4gICAgdGhpcy5yZXNpemVPblpvb20gPSBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yZXNpemVMb2NzdHlsZXM7XG4gIH1cblxuICBsb2FkTG9jYXRpb25TdHlsZXMoYXJySWRzLCBvcHRfb3B0aW9ucykge1xuICAgIGxldCBvcHRpb25zLFxuICAgICAgY29tcGxldGUgPSB7fSxcbiAgICAgIHN1Y2Nlc3MgPSB7fSxcbiAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgY291bnQgPSAxLFxuICAgICAgbWFrZUFqYXg7XG5cbiAgICBpZiAob3B0X29wdGlvbnMgJiYgdHlwZW9mIG9wdF9vcHRpb25zID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBvcHRpb25zID0gb3B0X29wdGlvbnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyB0aGlzLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5zcGlubmVyLnNob3coKTtcblxuICAgIG1ha2VBamF4ID0gZnVuY3Rpb24oc3R5bGVJZHMsIGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgY29tcGxldGVbaW5kZXhdID0gZmFsc2U7XG4gICAgICAgIHN1Y2Nlc3NbaW5kZXhdID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBnZXQgbG9jYXRpb25zdHlsZXMgb3ZlciBBUElcbiAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgZGF0YVR5cGU6IHNlbGYucHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuanNvbnAgPyBcImpzb25wXCIgOiBcImpzb25cIixcbiAgICAgICAgdXJsOiBzZWxmLnByb3h5LmFwaV9sb2NzdHlsZV91cmwsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBpZHM6IHN0eWxlSWRzXG4gICAgICAgIH1cbiAgICAgIH0pLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgbGV0IGksXG4gICAgICAgICAgc3R5bGVEYXRhLFxuICAgICAgICAgIHN1Y2Nlc3NmdWwgPSB0cnVlO1xuXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgc3R5bGVEYXRhID0gZGF0YVtpXTtcbiAgICAgICAgICAgIGxldCBzdHlsZSA9IG5ldyBDNGdMb2NhdGlvblN0eWxlKHN0eWxlRGF0YSwgc2VsZik7XG4gICAgICAgICAgICBzdHlsZS5zdHlsZSA9IHN0eWxlLmdldFN0eWxlRnVuY3Rpb24oc3R5bGVEYXRhKTtcbiAgICAgICAgICAgIHNlbGYuYXJyTG9jU3R5bGVzW3N0eWxlRGF0YS5pZF0gPSBzdHlsZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIudmVjdG9yTGF5ZXIuc2V0U3R5bGUoc2VsZi5wcm94eS5sYXllckNvbnRyb2xsZXIuY2x1c3RlclN0eWxlRnVuY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCkge1xuICAgICAgICAgIHN1Y2Nlc3NbaW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc3VjY2Vzcykge1xuICAgICAgICAgICAgaWYgKHN1Y2Nlc3MuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICBpZiAoIXN1Y2Nlc3Nba2V5XSkge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5kb25lICYmIHR5cGVvZiBvcHRpb25zLmRvbmUgPT09IFwiZnVuY3Rpb25cIiAmJiAoaW5kZXggPyBzdWNjZXNzZnVsIDogdHJ1ZSkpIHtcbiAgICAgICAgICBvcHRpb25zLmRvbmUoc2VsZik7XG4gICAgICAgICAgLy8gY2FsbCBob29rc1xuICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHNlbGYucHJveHkuaG9va19sb2NzdHlsZXNfbG9hZGVkLCB7bG9jc3R5bGVDb250cm9sbGVyOiBzZWxmfSlcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnByb3h5LmxheWVyQ29udHJvbGxlci52ZWN0b3JMYXllci5jaGFuZ2VkKCk7XG4gICAgICB9KS5hbHdheXMoZnVuY3Rpb24gKGpYaHIsIHN0clN0YXR1cykge1xuICAgICAgICB2YXIgY29tcGxldGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgICBjb21wbGV0ZVtpbmRleF0gPSB0cnVlO1xuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjb21wbGV0ZSkge1xuICAgICAgICAgICAgaWYgKGNvbXBsZXRlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgaWYgKCFjb21wbGV0ZVtrZXldKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuYWx3YXlzICYmIHR5cGVvZiBvcHRpb25zLmFsd2F5cyA9PT0gXCJmdW5jdGlvblwiICYmIChpbmRleCA/IGNvbXBsZXRlZCA6IHRydWUpKSB7XG4gICAgICAgICAgb3B0aW9ucy5hbHdheXMoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiAoIWpRdWVyeShzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXBzQ29udHJvbHMuc3Bpbm5lci5lbGVtZW50KS5oYXNDbGFzcyhjc3NDb25zdGFudHMuSElERSkpIHtcbiAgICAgICAgLy8gICBzZWxmLnByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgLy8gfVxuICAgICAgfSkuZmFpbChmdW5jdGlvbiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duICkge1xuICAgICAgICBjb25zb2xlLndhcm4oZXJyb3JUaHJvd24pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIHNwbGl0IGFycklkcyBpZiBpdCdzIHRvbyBsb25nXG4gICAgaWYgKGFycklkcy5sZW5ndGggPiAxMDApIHtcbiAgICAgIHZhciBuID0gMTAwO1xuICAgICAgd2hpbGUoYXJySWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbWFrZUFqYXgoYXJySWRzLnNwbGljZSgwLCBuKSwgY291bnQpO1xuICAgICAgICBjb3VudCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJySWRzLmxlbmd0aCA+IDApIHtcbiAgICAgIG1ha2VBamF4KGFycklkcyk7XG4gICAgfVxuICAgIC8vfSk7XG4gIH0gLy8gZW5kIG9mIFwibG9hZExvY2F0aW9uU3R5bGVzKClcIlxufSIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcbmltcG9ydCB7RmlsbCwgSWNvbiwgUmVndWxhclNoYXBlLCBTdHJva2UsIFN0eWxlLCBUZXh0fSBmcm9tIFwib2wvc3R5bGVcIjtcbmltcG9ydCB7Q2lyY2xlLCBQb2ludH0gZnJvbSBcIm9sL2dlb21cIjtcbmltcG9ydCBDaXJjbGVTdHlsZSBmcm9tICdvbC9zdHlsZS9DaXJjbGUnO1xuaW1wb3J0IG9sX3N0eWxlX1Bob3RvIGZyb20gXCJvbC1leHQvc3R5bGUvUGhvdG9cIjtcblxuXG5leHBvcnQgY2xhc3MgQzRnTG9jYXRpb25TdHlsZSB7XG5cbiAgY29uc3RydWN0b3IobG9jU3R5bGVBcnIsIGNvbnRyb2xsZXIpIHtcbiAgICB0aGlzLmlkICAgICAgICA9IGxvY1N0eWxlQXJyWydpZCddO1xuICAgIC8vIHRoaXMuc3R5bGUgICAgID0gdGhpcy5nZXRTdHlsZUZ1bmN0aW9uKGxvY1N0eWxlQXJyKTtcbiAgICB0aGlzLmVkaXRvciAgICA9IHRoaXMuZ2V0U3R5bGVFZGl0b3JDb25maWcobG9jU3R5bGVBcnIpO1xuICAgIHRoaXMubmFtZSAgICAgID0gbG9jU3R5bGVBcnJbJ25hbWUnXTtcbiAgICB0aGlzLnRvb2x0aXAgICA9IGxvY1N0eWxlQXJyWyd0b29sdGlwJ107XG4gICAgdGhpcy5sYWJlbCAgICAgPSBsb2NTdHlsZUFyclsnbGFiZWwnXTtcbiAgICB0aGlzLm1pbnpvb20gICA9IGxvY1N0eWxlQXJyWydtaW56b29tJ107XG4gICAgdGhpcy5tYXh6b29tICAgPSBsb2NTdHlsZUFyclsnbWF4em9vbSddO1xuICAgIHRoaXMuZm5TdHlsZUZ1bmN0aW9uID0gbG9jU3R5bGVBcnJbJ3N0eWxlX2Z1bmN0aW9uX2pzJ107XG4gICAgaWYgKHRoaXMuZm5TdHlsZUZ1bmN0aW9uICYmIHR5cGVvZiB0aGlzLmZuU3R5bGVGdW5jdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhpcy5mblN0eWxlRnVuY3Rpb24gPSB0aGlzLmZuU3R5bGVGdW5jdGlvbi5yZXBsYWNlKC9vbC5TdHlsZS4vZ2ksIFwid2luZG93Lm9sU3R5bGUuXCIpO1xuICAgICAgdGhpcy5mblN0eWxlRnVuY3Rpb24gPSB0aGlzLmZuU3R5bGVGdW5jdGlvbi5yZXBsYWNlKC9vbC5HZW9tLi9naSwgXCJ3aW5kb3cub2xTdHlsZS5cIik7XG4gICAgICBpZiAoIXdpbmRvdy5vbFN0eWxlKSB7XG4gICAgICAgIHdpbmRvdy5vbFN0eWxlID0ge1xuICAgICAgICAgIFN0cm9rZSxcbiAgICAgICAgICBTdHlsZSxcbiAgICAgICAgICBJY29uLFxuICAgICAgICAgIEZpbGwsXG4gICAgICAgICAgUG9pbnQsXG4gICAgICAgICAgQ2lyY2xlU3R5bGUsXG4gICAgICAgICAgQ2lyY2xlLFxuICAgICAgICAgIFRleHRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb250cm9sbGVyPSBjb250cm9sbGVyO1xuICAgIHRoaXMubG9jU3R5bGVBcnIgPSBsb2NTdHlsZUFycjtcbiAgfVxuXG4gIGdldFN0eWxlRnVuY3Rpb24oc3R5bGVEYXRhKSB7XG4gICAgdmFyIHNlbGYsXG4gICAgICBzdHlsZUZ1bmN0aW9uLFxuICAgICAgaW1hZ2VTdHlsZSxcbiAgICAgIHN0cm9rZVN0eWxlLFxuICAgICAgZmlsbFN0eWxlLFxuICAgICAgdGV4dFN0eWxlLFxuICAgICAgdGV4dFN0eWxlT3V0bGluZSxcbiAgICAgIGJhY2tncm91bmRGaWxsLFxuICAgICAgYmFja2dyb3VuZFN0cm9rZTtcblxuICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gZ2VuZXJhbFxuICAgIHN0cm9rZVN0eWxlID0gbmV3IFN0cm9rZSh7XG4gICAgICBjb2xvcjogdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5zdHJva2Vjb2xvclswXSwgc3R5bGVEYXRhLnN0cm9rZWNvbG9yWzFdKSxcbiAgICAgIHdpZHRoOiBwYXJzZUludChzdHlsZURhdGEuc3Ryb2tld2lkdGgudmFsdWUgPyBzdHlsZURhdGEuc3Ryb2tld2lkdGgudmFsdWUgOiAyLCAxMClcbiAgICB9KTtcbiAgICBmaWxsU3R5bGUgPSBuZXcgRmlsbCh7XG4gICAgICBjb2xvcjogdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5maWxsY29sb3JbMF0sIHN0eWxlRGF0YS5maWxsY29sb3JbMV0pXG4gICAgfSk7XG5cbiAgICBpbWFnZVN0eWxlID0gdGhpcy5jcmVhdGVJbWFnZVN0eWxlKHN0eWxlRGF0YSwgc3Ryb2tlU3R5bGUsIGZpbGxTdHlsZSk7XG5cbiAgICAvLyBidWlsZCBmdW5jdGlvblxuICAgIHN0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbiAoZmVhdHVyZSwgcHJvamVjdGlvbiwgZ2V0SWQpIHtcbiAgICAgIC8vIGlmIChzZWxmLmZuU3R5bGVGdW5jdGlvbikge1xuICAgICAgLy8gICByZXR1cm4gRnVuY3Rpb24oXCJmZWF0dXJlXCIsXCJkYXRhXCIsXCJtYXBcIixzZWxmLmZuU3R5bGVGdW5jdGlvbikoZmVhdHVyZSk7XG4gICAgICAvLyB9XG4gICAgICB2YXIgc3R5bGVzQXJyYXksXG4gICAgICAgIGxhYmVsO1xuICAgICAgbGV0IG1hcFpvb20gPSBzZWxmLmNvbnRyb2xsZXIubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFpvb20oKTtcbiAgICAgIGlmIChwYXJzZUludChzZWxmLmxvY1N0eWxlQXJyLm1heHpvb20sIDEwKSAmJiBwYXJzZUludChzZWxmLmxvY1N0eWxlQXJyLm1heHpvb20sIDEwKSA8IG1hcFpvb20pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VJbnQoc2VsZi5sb2NTdHlsZUFyci5taW56b29tLCAxMCkgJiYgcGFyc2VJbnQoc2VsZi5sb2NTdHlsZUFyci5taW56b29tLCAxMCkgPiBtYXBab29tKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGdldElkKSB7XG4gICAgICAgIHJldHVybiBzdHlsZURhdGEuaWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgYSBmZWF0dXJlLnN0eWxlRnVuY3Rpb25cbiAgICAgIGlmICghKGZlYXR1cmUpKSB7XG4gICAgICAgIHByb2plY3Rpb24gPSBmZWF0dXJlO1xuICAgICAgICBmZWF0dXJlID0gdGhpcztcbiAgICAgIH1cblxuICAgICAgc3R5bGVzQXJyYXkgPSBbXTtcblxuICAgICAgaWYgKGZlYXR1cmUgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nICYmIGZlYXR1cmUuZ2V0KCdsYWJlbCcpKSB7XG4gICAgICAgIGxhYmVsID0gZmVhdHVyZS5nZXQoJ2xhYmVsJyk7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlRGF0YS5sYWJlbCkge1xuICAgICAgICBsYWJlbCA9IHN0eWxlRGF0YS5sYWJlbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxhYmVsID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBsZXQgZGVmYXVsdENvbG9yID0gc2VsZi5jb250cm9sbGVyLm1hcENvbnRyb2xsZXIuZGF0YS5kZWZhdWx0X2xhYmVsX2NvbG9yO1xuICAgICAgLy8gbGFiZWxcbiAgICAgIGxldCBuZXdTY2FsZSA9IHNlbGYuZ2V0U2NhbGVGYWN0b3Ioc3R5bGVEYXRhKTtcblxuICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgIGlmIChzdHlsZURhdGEubGFiZWxfb3V0bF9jb2xvciAmJiBzdHlsZURhdGEubGFiZWxfb3V0bF93aWR0aC52YWx1ZSkge1xuICAgICAgICAgIHRleHRTdHlsZU91dGxpbmUgPSBuZXcgU3Ryb2tlKHtcbiAgICAgICAgICAgIGNvbG9yOiB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLmxhYmVsX291dGxfY29sb3IgfHwgZGVmYXVsdENvbG9yLCB7XG4gICAgICAgICAgICAgIHVuaXQ6ICclJyxcbiAgICAgICAgICAgICAgdmFsdWU6IDEwMFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB3aWR0aDogcGFyc2VJbnQoc3R5bGVEYXRhLmxhYmVsX291dGxfd2lkdGgudmFsdWUsIDEwKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmKHN0eWxlRGF0YS5sYWJlbF9vdXRsX2JveCA9PT0gXCIxXCIpe1xuICAgICAgICAgICAgYmFja2dyb3VuZEZpbGwgPSBuZXcgRmlsbCh7XG4gICAgICAgICAgICAgIGNvbG9yOiB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkoc3R5bGVEYXRhLmxhYmVsX291dGxfY29sb3IgfHwgZGVmYXVsdENvbG9yLCB7XG4gICAgICAgICAgICAgICAgdW5pdDogJyUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAxMDBcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN0eWxlRGF0YS5sYWJlbF9vZmZzZXQpIHtcbiAgICAgICAgICBzdHlsZURhdGEubGFiZWxfb2Zmc2V0ID0gWzAsIDAsIFwicHhcIl07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZvbnRTaXplID0gc3R5bGVEYXRhLmZvbnRfc2l6ZSAmJiB0eXBlb2Ygc3R5bGVEYXRhLmZvbnRfc2l6ZSA9PT0gXCJvYmplY3RcIiAmJiBzdHlsZURhdGEuZm9udF9zaXplICE9PSBudWxsID8gc3R5bGVEYXRhLmZvbnRfc2l6ZS52YWx1ZSA6IHN0eWxlRGF0YS5mb250X3NpemUgPyBzdHlsZURhdGEuZm9udF9zaXplIDogJzEzJztcbiAgICAgICAgbGV0IHRleHRPcHRpb25zID0ge1xuICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgIGZvbnQ6IChzdHlsZURhdGEuZm9udF93ZWlnaHQgfHwgJ25vcm1hbCcpICsgJyAnICsgKHN0eWxlRGF0YS5mb250X3N0eWxlIHx8ICdub3JtYWwnKSArICcgJyArIGZvbnRTaXplICsgJ3B4ICcgKyAoc3R5bGVEYXRhLmZvbnRfZmFtaWx5IHx8ICdzYW5zLXNlcmlmJyksXG4gICAgICAgICAgLy8gc2NhbGU6IHBhcnNlSW50KHN0eWxlRGF0YS5mb250X3NpemUgfHwgMCwgMTApIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICBvZmZzZXRYOiBwYXJzZUludChzdHlsZURhdGEubGFiZWxfb2Zmc2V0WzBdIHx8IDAsIDEwKSxcbiAgICAgICAgICBvZmZzZXRZOiBwYXJzZUludChzdHlsZURhdGEubGFiZWxfb2Zmc2V0WzFdIHx8IDAsIDEwKSxcbiAgICAgICAgICB0ZXh0QWxpZ246IHN0eWxlRGF0YS5sYWJlbF9hbGlnbl9ob3IsXG4gICAgICAgICAgdGV4dEJhc2VsaW5lOiBzdHlsZURhdGEubGFiZWxfYWxpZ25fdmVyLFxuICAgICAgICAgIHNjYWxlOiBuZXdTY2FsZSxcbiAgICAgICAgICBmaWxsOiBuZXcgRmlsbCh7XG4gICAgICAgICAgICBjb2xvcjogdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KHN0eWxlRGF0YS5mb250X2NvbG9yWzBdIHx8IGRlZmF1bHRDb2xvciwgc3R5bGVEYXRhLmZvbnRfY29sb3JbMV0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgc3Ryb2tlOiB0ZXh0U3R5bGVPdXRsaW5lXG4gICAgICAgIH07XG4gICAgICAgIGlmIChzdHlsZURhdGEubGFiZWxfb3V0bF9ib3ggPT09IFwiMVwiKSB7XG4gICAgICAgICAgdGV4dE9wdGlvbnMuYmFja2dyb3VuZEZpbGwgPSBiYWNrZ3JvdW5kRmlsbDtcbiAgICAgICAgICB0ZXh0T3B0aW9ucy5iYWNrZ3JvdW5kU3Ryb2tlID0gdGV4dFN0eWxlT3V0bGluZTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0U3R5bGUgPSBuZXcgVGV4dCh0ZXh0T3B0aW9ucyk7XG4gICAgICB9XG5cblxuICAgICAgLy8gY2hlY2sgaWYgaW1hZ2UgaGFzIHRvIGJlIHJlc2l6ZWRcbiAgICAgIGlmIChpbWFnZVN0eWxlICYmIG5ld1NjYWxlICE9PSAwLjAgJiYgaW1hZ2VTdHlsZS5zZXRTY2FsZSkge1xuICAgICAgICBpbWFnZVN0eWxlLnNldFNjYWxlKG5ld1NjYWxlKTtcbiAgICAgIH1cbiAgICAgIC8vIGNoZWNrIGlmIGxhYmVsIHNob3VsZCBiZSBkaXNwbGF5ZWRcbiAgICAgIGxldCBzaG93TGFiZWxGb3Jab29tID0gZmFsc2U7XG4gICAgICBsZXQgbGFiZWxNaW5ab29tID0gcGFyc2VJbnQoc2VsZi5sb2NTdHlsZUFyci5sYWJlbF9taW56b29tLCAxMCk7XG4gICAgICBsZXQgbGFiZWxNYXhab29tID0gcGFyc2VJbnQoc2VsZi5sb2NTdHlsZUFyci5sYWJlbF9tYXh6b29tLCAxMCk7XG4gICAgICBpZiAobWFwWm9vbSA+PSBsYWJlbE1pblpvb20gJiYgKChsYWJlbE1heFpvb20gPj0gbWFwWm9vbSkgfHwgbGFiZWxNYXhab29tID09PSAwKSkge1xuICAgICAgICBzaG93TGFiZWxGb3Jab29tID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gY3JlYXRlIHN0eWxlLW9iamVjdFxuICAgICAgaWYgKGxhYmVsICYmIHNob3dMYWJlbEZvclpvb20pIHtcbiAgICAgICAgbGV0IHpJbmRleDtcbiAgICAgICAgaWYoZmVhdHVyZSAmJiBmZWF0dXJlLmdldCAmJiB0eXBlb2YgZmVhdHVyZS5nZXQgPT09IFwiZnVuY3Rpb25cIiAmJiBmZWF0dXJlLmdldCgnekluZGV4Jykpe1xuICAgICAgICAgIHpJbmRleCA9IGZlYXR1cmUuZ2V0KCd6SW5kZXgnKTtcbiAgICAgICAgfVxuICAgICAgICBzdHlsZXNBcnJheS5wdXNoKFxuICAgICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgICBpbWFnZTogaW1hZ2VTdHlsZSxcbiAgICAgICAgICAgIHRleHQ6IHRleHRTdHlsZSxcbiAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICB6SW5kZXg6IHpJbmRleFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZXNBcnJheS5wdXNoKFxuICAgICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgICBpbWFnZTogaW1hZ2VTdHlsZSxcbiAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGVcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBhZGQgbGluZS1hcnJvd3NcbiAgICAgIGlmIChcbiAgICAgICAgc3R5bGVEYXRhLmxpbmVfYXJyb3dzXG4gICAgICAgICYmIGZlYXR1cmVcbiAgICAgICAgJiYgKHR5cGVvZiBmZWF0dXJlLmdldEdlb21ldHJ5ID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAmJiAhKGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRUeXBlKCkgPT09ICdQb2ludCcpXG4gICAgICAgICYmIHR5cGVvZiBmZWF0dXJlLmdldEdlb21ldHJ5KCkuZm9yRWFjaFNlZ21lbnQgPT09ICdmdW5jdGlvbidcbiAgICAgICkge1xuICAgICAgICBsZXQgYXJyb3dTdHlsZXMgPSBzZWxmLmNyZWF0ZUxpbmVBcnJvd1N0eWxlcyhzdHlsZURhdGEsIGZlYXR1cmUsIHN0cm9rZVN0eWxlLCBmaWxsU3R5bGUpO1xuICAgICAgICBzdHlsZXNBcnJheSA9IHN0eWxlc0FycmF5LmNvbmNhdChhcnJvd1N0eWxlcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHlsZXNBcnJheTtcbiAgICB9O1xuICAgIGlmICh0aGlzLmZuU3R5bGVGdW5jdGlvbikge1xuICAgICAgc3R5bGVGdW5jdGlvbiA9IEZ1bmN0aW9uKFwiZmVhdHVyZVwiLFwiZGF0YVwiLFwibWFwXCIsdGhpcy5mblN0eWxlRnVuY3Rpb24pO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvbjtcbiAgfSAvLyBlbmQgb2YgXCJnZXRTdHlsZUZ1bmN0aW9uKClcIlxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBjdXJyZW50IHNjYWxpbmcgZmFjdG9yIGFjY29yZGluZyB0byB0aGUgY3VycmVudCB6b29tbGV2ZWwgYW5kIHRoZSBwcm9maWxlL2xvY3N0eWxlIHNldHRpbmdzLlxuICAgKiBAcGFyYW0gc3R5bGVEYXRhXG4gICAqL1xuICBnZXRTY2FsZUZhY3RvcihzdHlsZURhdGEpIHtcbiAgICBsZXQgbmV3U2NhbGUgPSAwLjA7XG4gICAgbGV0IGluaXRpYWxab29tLCBzY2FsZUZhY3RvciwgZmFjdG9yLCBtaW5TY2FsZSwgbWF4U2NhbGU7XG4gICAgbGV0IGN1cnJlbnRab29tID0gdGhpcy5jb250cm9sbGVyLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRab29tKCk7XG4gICAgbGV0IGluaXRpYWxTY2FsZSA9IFwiY3VzdF9pY29uX3N2Z3Bob3RvXCIuaW5jbHVkZXMoc3R5bGVEYXRhLnN0eWxldHlwZSkgPyBwYXJzZUZsb2F0KHN0eWxlRGF0YS5pY29uX3NjYWxlKSA6IDE7XG4gICAgLy8gbG9jc3R5bGUgc2V0dGluZyBvdmVyd3JpdGVzIHByb2ZpbGUgc2V0dGluZ1xuICAgIGlmIChzdHlsZURhdGEuaWNvbl9yZXNpemVfem9vbSkge1xuICAgICAgaW5pdGlhbFpvb20gPSBwYXJzZUludChzdHlsZURhdGEuaWNvbl9yZXNpemVfc3JjX3pvb20sIDEwKTtcbiAgICAgIHNjYWxlRmFjdG9yID0gcGFyc2VGbG9hdChzdHlsZURhdGEuaWNvbl9yZXNpemVfc2NhbGVfZmFjdG9yKTtcbiAgICAgIG1pblNjYWxlID0gcGFyc2VGbG9hdChzdHlsZURhdGEuaWNvbl9yZXNpemVfbWluX3NjYWxlKTtcbiAgICAgIG1heFNjYWxlID0gcGFyc2VGbG9hdChzdHlsZURhdGEuaWNvbl9yZXNpemVfbWF4X3NjYWxlKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29udHJvbGxlci5yZXNpemVPblpvb20pIHtcbiAgICAgIGluaXRpYWxab29tID0gcGFyc2VJbnQodGhpcy5jb250cm9sbGVyLnJlc2l6ZU9uWm9vbS5zcmNab29tLCAxMCk7XG4gICAgICBzY2FsZUZhY3RvciA9IHBhcnNlRmxvYXQodGhpcy5jb250cm9sbGVyLnJlc2l6ZU9uWm9vbS5zY2FsZUZhY3Rvcik7XG4gICAgICBtaW5TY2FsZSA9IHBhcnNlRmxvYXQodGhpcy5jb250cm9sbGVyLnJlc2l6ZU9uWm9vbS5taW5TY2FsZSk7XG4gICAgICBtYXhTY2FsZSA9IHBhcnNlRmxvYXQodGhpcy5jb250cm9sbGVyLnJlc2l6ZU9uWm9vbS5tYXhTY2FsZSk7XG4gICAgfVxuICAgIGlmIChjdXJyZW50Wm9vbSA+IGluaXRpYWxab29tKSB7XG4gICAgICAvLyByZXNpemUgaW1hZ2UgYmlnZ2VyXG4gICAgICBmYWN0b3IgPSBjdXJyZW50Wm9vbSAtIGluaXRpYWxab29tO1xuICAgICAgbGV0IHNjYWxlU3VtbWFuZCA9IHNjYWxlRmFjdG9yICogZmFjdG9yO1xuICAgICAgbmV3U2NhbGUgPSBpbml0aWFsU2NhbGUgKyBzY2FsZVN1bW1hbmQ7XG4gICAgICBpZiAobmV3U2NhbGUgPiBtYXhTY2FsZSkge1xuICAgICAgICBuZXdTY2FsZSA9IG1heFNjYWxlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudFpvb20gPCBpbml0aWFsWm9vbSkge1xuICAgICAgLy8gcmVzaXplIGltYWdlIHNtYWxsZXJcbiAgICAgIGZhY3RvciA9IGluaXRpYWxab29tIC0gY3VycmVudFpvb207XG4gICAgICBsZXQgc2NhbGVTdW1tYW5kID0gc2NhbGVGYWN0b3IgKiBmYWN0b3I7XG4gICAgICBuZXdTY2FsZSA9IGluaXRpYWxTY2FsZSAtIHNjYWxlU3VtbWFuZDtcbiAgICAgIGlmIChuZXdTY2FsZSA8PSBtaW5TY2FsZSkge1xuICAgICAgICBuZXdTY2FsZSA9IG1pblNjYWxlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXNpemUgdG8gaW5pdGlhbCBzaXplXG4gICAgICBuZXdTY2FsZSA9IGluaXRpYWxTY2FsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3U2NhbGU7XG4gIH1cblxuICBjcmVhdGVJbWFnZVN0eWxlKHN0eWxlRGF0YSwgc3Ryb2tlU3R5bGUsIGZpbGxTdHlsZSkge1xuICAgIGxldCBpbWFnZVN0eWxlO1xuICAgIC8vIGltYWdlXG4gICAgc3dpdGNoIChzdHlsZURhdGEuc3R5bGV0eXBlKSB7XG4gICAgICBjYXNlICdzcXVhcmUnOlxuICAgICAgICBpbWFnZVN0eWxlID0gbmV3IFJlZ3VsYXJTaGFwZSh7XG4gICAgICAgICAgZmlsbDogZmlsbFN0eWxlLFxuICAgICAgICAgIHN0cm9rZTogc3Ryb2tlU3R5bGUsXG4gICAgICAgICAgcG9pbnRzOiA0LFxuICAgICAgICAgIHJhZGl1czogc3R5bGVEYXRhLnJhZGl1cy52YWx1ZSB8fCAxMCxcbiAgICAgICAgICBhbmdsZTogTWF0aC5QSSAvIDRcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3Rhcic6XG4gICAgICAgIGltYWdlU3R5bGUgPSBuZXcgUmVndWxhclNoYXBlKHtcbiAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICByYWRpdXMxOiBzdHlsZURhdGEucmFkaXVzLnZhbHVlIHx8IDEwLFxuICAgICAgICAgIHJhZGl1czI6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgPyBNYXRoLmZsb29yKHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgKiAwLjUpIDogNCxcbiAgICAgICAgICBwb2ludHM6IDUsXG4gICAgICAgICAgYW5nbGU6IDBcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIGltYWdlU3R5bGUgPSBuZXcgUmVndWxhclNoYXBlKHtcbiAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICBwb2ludHM6IDQsXG4gICAgICAgICAgcmFkaXVzOiBzdHlsZURhdGEucmFkaXVzLnZhbHVlIHx8IDEwLFxuICAgICAgICAgIHJhZGl1czI6IDAsXG4gICAgICAgICAgYW5nbGU6IE1hdGguUEkgLyA0XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Nyb3NzJzpcbiAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBSZWd1bGFyU2hhcGUoe1xuICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgIHBvaW50czogNCxcbiAgICAgICAgICByYWRpdXM6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgMTAsXG4gICAgICAgICAgcmFkaXVzMjogMCxcbiAgICAgICAgICBhbmdsZTogMFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0cmlhbmdsZSc6XG4gICAgICAgIGltYWdlU3R5bGUgPSBuZXcgUmVndWxhclNoYXBlKHtcbiAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICBwb2ludHM6IDMsXG4gICAgICAgICAgcmFkaXVzOiBzdHlsZURhdGEucmFkaXVzLnZhbHVlIHx8IDEwLFxuICAgICAgICAgIHJvdGF0aW9uOiBNYXRoLlBJIC8gNCxcbiAgICAgICAgICBhbmdsZTogMFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdvbF9pY29uJzogLy8gZmFsbHRocm91Z2hcbiAgICAgIGNhc2UgJ2N1c3RfaWNvbic6XG4gICAgICAgIGlmIChzdHlsZURhdGEuaWNvbl9zcmMpIHtcbiAgICAgICAgICBsZXQgd2lkdGgsIGhlaWdodCwgb2Zmc2V0WCwgb2Zmc2V0WTtcbiAgICAgICAgICB3aWR0aCA9IChzdHlsZURhdGEuaWNvbl9zaXplWzBdKnN0eWxlRGF0YS5pY29uX3NjYWxlKTtcbiAgICAgICAgICBoZWlnaHQgPSAoc3R5bGVEYXRhLmljb25fc2l6ZVsxXSpzdHlsZURhdGEuaWNvbl9zY2FsZSk7XG4gICAgICAgICAgb2Zmc2V0WCA9IChzdHlsZURhdGEuaWNvbl9vZmZzZXRbMF0qc3R5bGVEYXRhLmljb25fc2NhbGUpO1xuICAgICAgICAgIG9mZnNldFkgPSAoc3R5bGVEYXRhLmljb25fb2Zmc2V0WzFdKnN0eWxlRGF0YS5pY29uX3NjYWxlKTtcbiAgICAgICAgICBsZXQgYW5jaG9yWCA9IDEgLyAocGFyc2VJbnQod2lkdGgpIC8gKHBhcnNlSW50KG9mZnNldFgpICogLTEpKTtcbiAgICAgICAgICBsZXQgYW5jaG9yWSA9IDEgLyAocGFyc2VJbnQoaGVpZ2h0KSAvIChwYXJzZUludChvZmZzZXRZKSAqIC0xKSk7XG4gICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBJY29uKHtcbiAgICAgICAgICAgIGFuY2hvcjogW2FuY2hvclgsIGFuY2hvclldLFxuICAgICAgICAgICAgb3BhY2l0eTogcGFyc2VGbG9hdChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlKSAvIDEwMCxcbiAgICAgICAgICAgIHNyYzogc3R5bGVEYXRhLmljb25fc3JjLFxuICAgICAgICAgICAgc2NhbGU6IHBhcnNlRmxvYXQoc3R5bGVEYXRhLmljb25fc2NhbGUpLFxuICAgICAgICAgICAgc2l6ZTogW3BhcnNlSW50KHN0eWxlRGF0YS5pY29uX3NpemVbMF0sIDEwKSwgcGFyc2VJbnQoc3R5bGVEYXRhLmljb25fc2l6ZVsxXSwgMTApXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY3VzdF9pY29uX3N2Zyc6XG4gICAgICAgIGlmKHN0eWxlRGF0YS5zdmdTcmMgJiYgc3R5bGVEYXRhLmljb25fc2NhbGUgJiYgc3R5bGVEYXRhLmljb25fc2l6ZSkge1xuICAgICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICBsZXQgd2lkdGgsIGhlaWdodCwgb2Zmc2V0WCwgb2Zmc2V0WTtcbiAgICAgICAgICB3aWR0aCA9IChzdHlsZURhdGEuaWNvbl9zaXplWzBdKnN0eWxlRGF0YS5pY29uX3NjYWxlKTtcbiAgICAgICAgICBoZWlnaHQgPSAoc3R5bGVEYXRhLmljb25fc2l6ZVsxXSpzdHlsZURhdGEuaWNvbl9zY2FsZSk7XG4gICAgICAgICAgb2Zmc2V0WCA9IChzdHlsZURhdGEuaWNvbl9vZmZzZXRbMF0qc3R5bGVEYXRhLmljb25fc2NhbGUpO1xuICAgICAgICAgIG9mZnNldFkgPSAoc3R5bGVEYXRhLmljb25fb2Zmc2V0WzFdKnN0eWxlRGF0YS5pY29uX3NjYWxlKTtcbiAgICAgICAgICBsZXQgYW5jaG9yWCA9IDEgLyAocGFyc2VJbnQod2lkdGgpIC8gKHBhcnNlSW50KG9mZnNldFgpICogLTEpKTtcbiAgICAgICAgICBsZXQgYW5jaG9yWSA9IDEgLyAocGFyc2VJbnQoaGVpZ2h0KSAvIChwYXJzZUludChvZmZzZXRZKSAqIC0xKSk7XG4gICAgICAgICAgY2FudmFzLndpZHRoICA9IHdpZHRoO1xuICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgIGltZy5zcmMgPSBzdHlsZURhdGEuc3ZnU3JjO1xuICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaW1hZ2VTdHlsZSA9IG5ldyBJY29uKHtcbiAgICAgICAgICAgIGFuY2hvcjogW2FuY2hvclgsIGFuY2hvclldLFxuICAgICAgICAgICAgaW1nOiBjYW52YXMsXG4gICAgICAgICAgICBpbWdTaXplOiBbY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0XVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwaG90bycgOlxuICAgICAgICBpbWFnZVN0eWxlID0gbmV3IG9sX3N0eWxlX1Bob3RvKHtcbiAgICAgICAgICBraW5kOiBzdHlsZURhdGEucGhvdG9LaW5kLFxuICAgICAgICAgIGNyb3A6IHRydWUsXG4gICAgICAgICAgb3BhY2l0eTogcGFyc2VGbG9hdChzdHlsZURhdGEuaWNvbl9vcGFjaXR5LnZhbHVlLCAxMCkgLyAxMDAsXG4gICAgICAgICAgcmFkaXVzOiBwYXJzZUZsb2F0KHN0eWxlRGF0YS5yYWRpdXMudmFsdWUsMTApLFxuICAgICAgICAgIHNoYWRvdzogdHJ1ZSxcbiAgICAgICAgICBzdHJva2U6IHN0cm9rZVN0eWxlLFxuICAgICAgICAgIHNyYzogc3R5bGVEYXRhLmljb25fc3JjXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncG9pbnQnOlxuICAgICAgICBpbWFnZVN0eWxlID0gbmV3IENpcmNsZVN0eWxlKHtcbiAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICByYWRpdXM6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgN1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpbWFnZVN0eWxlID0gbmV3IENpcmNsZVN0eWxlKHtcbiAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICByYWRpdXM6IHN0eWxlRGF0YS5yYWRpdXMudmFsdWUgfHwgN1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGltYWdlU3R5bGU7XG4gIH1cblxuICBjcmVhdGVMaW5lQXJyb3dTdHlsZXMoc3R5bGVEYXRhLCBmZWF0dXJlLCBzdHJva2VTdHlsZSwgZmlsbFN0eWxlKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIGxldCBzdHlsZXNBcnJheSA9IFtdO1xuICAgIGxldCBhcnJvd1NpemUgPSAoc3R5bGVEYXRhLmxpbmVfYXJyb3dzX3JhZGl1cykgPyAocGFyc2VJbnQoc3R5bGVEYXRhLmxpbmVfYXJyb3dzX3JhZGl1cy52YWx1ZSwgMTApICogMikgOiAwO1xuICAgIGxldCBhcnJvd1NpemVVbml0ID0gYXJyb3dTaXplICsgc3R5bGVEYXRhLmxpbmVfYXJyb3dzX3JhZGl1cy51bml0O1xuICAgIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5mb3JFYWNoU2VnbWVudChmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgLy9pZiBtaW56b29tIGlzIDAgKHVubGltaXRlZCksIGhpZGUgYXJyb3dzIGlmIHRoZXkgYXJlIGJpZ2dlciB0aGFuIHRoZSBzZWdtZW50XG4gICAgICBsZXQgYXJyb3dzX21pbnpvb20gPSBwYXJzZUludChzdHlsZURhdGEubGluZV9hcnJvd3NfbWluem9vbSwgMTApO1xuICAgICAgbGV0IHN0YXJ0X3BpeGVsID0gc2NvcGUuY29udHJvbGxlci5tYXBDb250cm9sbGVyLm1hcC5nZXRQaXhlbEZyb21Db29yZGluYXRlKHN0YXJ0KTtcbiAgICAgIGxldCBlbmRfcGl4ZWwgPSBzY29wZS5jb250cm9sbGVyLm1hcENvbnRyb2xsZXIubWFwLmdldFBpeGVsRnJvbUNvb3JkaW5hdGUoZW5kKTtcbiAgICAgIC8vIGV1Y2xpZC1kaXN0YW5jZSBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmRcbiAgICAgIGxldCBzZWdtZW50TGVuZ3RoID0gTWF0aC5zcXJ0KE1hdGgucG93KGVuZF9waXhlbFsxXSAtIHN0YXJ0X3BpeGVsWzFdLCAyKSArIE1hdGgucG93KGVuZF9waXhlbFswXSAtIHN0YXJ0X3BpeGVsWzBdLCAyKSk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgKGFycm93c19taW56b29tIDwgMCAmJiBhcnJvd1NpemUgKyBwYXJzZUludChzdHlsZURhdGEuc3Ryb2tld2lkdGgudmFsdWUsIDEwKSA8IHNlZ21lbnRMZW5ndGgpXG4gICAgICAgIHx8IChhcnJvd3NfbWluem9vbSA+PSAwICYmIHNjb3BlLmNvbnRyb2xsZXIubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFpvb20oKSA+PSBhcnJvd3NfbWluem9vbSlcbiAgICAgICkge1xuICAgICAgICAvLyBmb3J3YXJkIGFycm93c1xuICAgICAgICBzdHlsZXNBcnJheS5wdXNoKFxuICAgICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgICBnZW9tZXRyeTogbmV3IFBvaW50KGVuZCksXG4gICAgICAgICAgICB0ZXh0OiBuZXcgVGV4dCh7XG4gICAgICAgICAgICAgIHRleHQ6IFwi4ZCzXCIsXG4gICAgICAgICAgICAgIGZvbnQ6IGFycm93U2l6ZVVuaXQgKyBcIiBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgIG9mZnNldFg6IDAsXG4gICAgICAgICAgICAgIG9mZnNldFk6IDEsXG4gICAgICAgICAgICAgIGZpbGw6IGZpbGxTdHlsZSxcbiAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICAgICByb3RhdGVXaXRoVmlldzogdHJ1ZSxcbiAgICAgICAgICAgICAgcm90YXRpb246IC1NYXRoLmF0YW4yKChlbmRbMV0gLSBzdGFydFsxXSksIChlbmRbMF0gLSBzdGFydFswXSkpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIC8vIGJhY2t3YXJkIGFycm93cyAoaWYgd2FudGVkKVxuICAgICAgICBpZiAoc3R5bGVEYXRhLmxpbmVfYXJyb3dzX2JhY2spIHtcbiAgICAgICAgICBzdHlsZXNBcnJheS5wdXNoKFxuICAgICAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICAgICAgZ2VvbWV0cnk6IG5ldyBQb2ludChzdGFydCksXG4gICAgICAgICAgICAgIHRleHQ6IG5ldyBUZXh0KHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIuGQs1wiLFxuICAgICAgICAgICAgICAgIGZvbnQ6IGFycm93U2l6ZVVuaXQgKyBcIiBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgICAgICAgICBvZmZzZXRZOiAtMSxcbiAgICAgICAgICAgICAgICBmaWxsOiBmaWxsU3R5bGUsXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2VTdHlsZSxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICAgICAgICAgICAgcm90YXRlV2l0aFZpZXc6IHRydWUsXG4gICAgICAgICAgICAgICAgcm90YXRpb246IC1NYXRoLmF0YW4yKChzdGFydFsxXSAtIGVuZFsxXSksIChzdGFydFswXSAtIGVuZFswXSkpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzdHlsZXNBcnJheTtcbiAgfVxuXG5cbiAgZ2V0U3R5bGVFZGl0b3JDb25maWcoc3R5bGVEYXRhKSB7XG4gICAgdmFyIGVkaXRvckNvbmZpZztcblxuICAgIC8vIGNyZWF0ZSBlZGl0b3ItY29uZmlnXG4gICAgZWRpdG9yQ29uZmlnID0ge307XG4gICAgZWRpdG9yQ29uZmlnLmNvbGxlY3QgPSBzdHlsZURhdGEuZWRpdG9yX2NvbGxlY3QgfHwgdW5kZWZpbmVkO1xuICAgIGVkaXRvckNvbmZpZy5pY29uU3JjID0gc3R5bGVEYXRhLmVkaXRvcl9pY29uIHx8IHVuZGVmaW5lZDtcbiAgICBlZGl0b3JDb25maWcudmFycyA9IHN0eWxlRGF0YS5lZGl0b3JfdmFycyB8fCB1bmRlZmluZWQ7XG5cbiAgICBlZGl0b3JDb25maWcuc29ydCA9IHN0eWxlRGF0YS5lZGl0b3Jfc29ydCB8fCBmYWxzZTtcbiAgICBpZiAoZWRpdG9yQ29uZmlnLnNvcnQpIHtcbiAgICAgIGVkaXRvckNvbmZpZy5zb3J0ID0gcGFyc2VJbnQoZWRpdG9yQ29uZmlnLnNvcnQsIDEwKSB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWRpdG9yQ29uZmlnO1xuICB9Ly8gZW5kIG9mIFwiZ2V0U3R5bGVFZGl0b3JDb25maWcoKVwiXG5cbn0iLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cblxuaW1wb3J0IHtNVlR9IGZyb20gXCJvbC9mb3JtYXRcIjtcbmltcG9ydCB7Y3JlYXRlWFlafSBmcm9tIFwib2wvdGlsZWdyaWRcIjtcblxuLy9jb3B5IGxpbmsgdG8gYWRkIG5vb3BlbmVyXG5leHBvcnQgY29uc3QgT1NNX1JFTF9BVFRSSUJVVElPTiA9ICcmIzE2OTsgJyArXG4gICAgJzxhIGhyZWY9XCJodHRwczovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9jb3B5cmlnaHRcIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiPk9wZW5TdHJlZXRNYXA8L2E+ICcgK1xuICAgICdjb250cmlidXRvcnMuJztcblxuZXhwb3J0IHZhciBjb25maWcgPSB7XG4gIG9zbToge1xuXG4gICAgQ3ljbGVNYXA6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogJ1N0eWxlIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHBzOi8vd3d3Lm9wZW5jeWNsZW1hcC5vcmcvXCI+T3BlbkN5Y2xlTWFwPC9hPicgKyAnICcgK1xuICAgICAgICAgIE9TTV9SRUxfQVRUUklCVVRJT04sXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTksXG4gICAgICB1cmw6ICdodHRwczovL3thLWN9LnRpbGUub3BlbmN5Y2xlbWFwLm9yZy9jeWNsZS97en0ve3h9L3t5fS5wbmcnXG4gICAgfSxcblxuICAgIEdlcm1hbjoge1xuICAgICAgYXR0cmlidXRpb25zOiAnU3R5bGUgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIiBocmVmPVwiaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5kZS9nZXJtYW5zdHlsZS5odG1sXCI+b3BlbnN0cmVldG1hcC5kZTwvYT4nICsgJyAnICtcbiAgICAgICAgICBPU01fUkVMX0FUVFJJQlVUSU9OLFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDE5LFxuICAgICAgdXJsOiAnaHR0cHM6Ly97YS1jfS50aWxlLm9wZW5zdHJlZXRtYXAuZGUve3p9L3t4fS97eX0ucG5nJ1xuICAgIH0sXG5cbiAgICBMYW5kc2NhcGVNYXA6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogJ1N0eWxlIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHBzOi8vd3d3Lm9wZW5jeWNsZW1hcC5vcmcvXCI+T3BlbkN5Y2xlTWFwPC9hPicgKyAnICcgK1xuICAgICAgICAgIE9TTV9SRUxfQVRUUklCVVRJT04sXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTksXG4gICAgICB1cmw6ICdodHRwczovL3thLWN9LnRpbGUub3BlbmN5Y2xlbWFwLm9yZy9sYW5kc2NhcGUve3p9L3t4fS97eX0ucG5nJ1xuICAgIH0sXG5cbiAgICBNYXBuaWs6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogT1NNX1JFTF9BVFRSSUJVVElPTixcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgTk9ORTogJycgLy8gbGFzdCBsaW5lXG4gIH0sXG5cbiAgc3RhbWVuOiB7XG4gICAgVG9uZXI6IHtcbiAgICAgIGF0dHJpYnV0aW9uczogJ01hcCB0aWxlcyBieSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwczovL3N0YW1lbi5jb21cIj5TdGFtZW4gRGVzaWduPC9hPiwgdW5kZXIgPGEgIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzMuMFwiPkNDIEJZIDMuMDwvYT4uIERhdGEgYnkgPGEgIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHA6Ly9vcGVuc3RyZWV0bWFwLm9yZ1wiPk9wZW5TdHJlZXRNYXA8L2E+LCB1bmRlciA8YSAgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIiBocmVmPVwiaHR0cDovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9jb3B5cmlnaHRcIj5PRGJMPC9hPi4nLFxuICAgICAgbGF5ZXI6ICd0b25lcicsXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTgsXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgfSxcblxuICAgIFRvbmVyTGFiZWxzOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6ICdNYXAgdGlsZXMgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIiBocmVmPVwiaHR0cHM6Ly9zdGFtZW4uY29tXCI+U3RhbWVuIERlc2lnbjwvYT4sIHVuZGVyIDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzMuMFwiPkNDIEJZIDMuMDwvYT4uIERhdGEgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIiBocmVmPVwiaHR0cDovL29wZW5zdHJlZXRtYXAub3JnXCI+T3BlblN0cmVldE1hcDwvYT4sIHVuZGVyIDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHA6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvY29weXJpZ2h0XCI+T0RiTDwvYT4uJyxcbiAgICAgIGxheWVyOiAndG9uZXItbGFiZWxzJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOCxcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgVG9uZXJMaW5lczoge1xuICAgICAgYXR0cmlidXRpb25zOiAnTWFwIHRpbGVzIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHBzOi8vc3RhbWVuLmNvbVwiPlN0YW1lbiBEZXNpZ248L2E+LCB1bmRlciA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS8zLjBcIj5DQyBCWSAzLjA8L2E+LiBEYXRhIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHA6Ly9vcGVuc3RyZWV0bWFwLm9yZ1wiPk9wZW5TdHJlZXRNYXA8L2E+LCB1bmRlciA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnL2NvcHlyaWdodFwiPk9EYkw8L2E+LicsXG4gICAgICBsYXllcjogJ3RvbmVyLWxpbmVzJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOCxcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgVGVycmFpbjoge1xuICAgICAgYXR0cmlidXRpb25zOiAnTWFwIHRpbGVzIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHBzOi8vc3RhbWVuLmNvbVwiPlN0YW1lbiBEZXNpZ248L2E+LCB1bmRlciA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS8zLjBcIj5DQyBCWSAzLjA8L2E+LiBEYXRhIGJ5IDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHA6Ly9vcGVuc3RyZWV0bWFwLm9yZ1wiPk9wZW5TdHJlZXRNYXA8L2E+LCB1bmRlciA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnL2NvcHlyaWdodFwiPk9EYkw8L2E+LicsXG4gICAgICBsYXllcjogJ3RlcnJhaW4nLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDE4LFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH0sXG5cbiAgICBXYXRlcmNvbG9yOiB7XG4gICAgICBhdHRyaWJ1dGlvbnM6ICdNYXAgdGlsZXMgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIiBocmVmPVwiaHR0cHM6Ly9zdGFtZW4uY29tXCI+U3RhbWVuIERlc2lnbjwvYT4sIHVuZGVyIDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzMuMFwiPkNDIEJZIDMuMDwvYT4uIERhdGEgYnkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIiBocmVmPVwiaHR0cDovL29wZW5zdHJlZXRtYXAub3JnXCI+T3BlblN0cmVldE1hcDwvYT4sIHVuZGVyIDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzMuMFwiPkNDIEJZIFNBPC9hPi4nLFxuICAgICAgbGF5ZXI6ICd3YXRlcmNvbG9yJyxcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAxOCxcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgTk9ORTogJydcbiAgfSxcblxuICBtYXBxdWVzdDoge1xuXG4gICBNYXBRdWVzdE9wZW46IHtcbiAgICAgbGF5ZXI6ICdvc20nXG4gICB9LFxuXG4gICBNYXBRdWVzdEh5Yjoge1xuICAgICBsYXllcjogJ2h5YidcbiAgIH0sXG5cbiAgIE1hcFF1ZXN0U2F0OiB7XG4gICAgIGxheWVyOiAnc2F0J1xuICAgfSxcblxuICAgTk9ORTogJydcbiB9LFxuXG4gIG1hcGJveDoge1xuXG4gICAgTWFwYm94OiB7XG4gICAgICB0aWxlU2l6ZTogWzUxMiwgNTEyXSxcbiAgICAgIGF0dHJpYnV0aW9uczogJ8KpIDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHBzOi8vd3d3Lm1hcGJveC5jb20vYWJvdXQvbWFwcy9cIj5NYXBib3g8L2E+JyArICcgJyArXG4gICAgICAgICAgT1NNX1JFTF9BVFRSSUJVVElPTixcbiAgICAgIG1pblpvb206IDAsXG4gICAgICBtYXhab29tOiAyMixcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICB9LFxuXG4gICAgTWFwYm94Q2xhc3NpYzoge1xuICAgICAgYXR0cmlidXRpb25zOiAnwqkgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIiBocmVmPVwiaHR0cHM6Ly93d3cubWFwYm94LmNvbS9hYm91dC9tYXBzL1wiPk1hcGJveDwvYT4nICsgJyAnICtcbiAgICAgICAgICBPU01fUkVMX0FUVFJJQlVUSU9OLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDIyLFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH1cbiAgfSxcbiAgb3RtOiB7XG4gICAgYXR0cmlidXRpb25zOiAnS2FydGVuZGF0ZW46ICcgKyBPU01fUkVMX0FUVFJJQlVUSU9OICsgJywgU1JUTiB8IEthcnRlbmRhcnN0ZWxsdW5nIMKpIDxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHBzOi8vb3BlbnRvcG9tYXAub3JnL1wiPk9wZW5Ub3BvTWFwPC9hPiAoPGEgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIiBocmVmPVwiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzMuMC9cIj5DQy1CWS1TQTwvYT4pJ1xuICB9LFxuICBtYXB6OiB7XG4gICAgYXR0cmlidXRpb25zOiAnwqkgMjAyMSA8YSB0YXJnZXQ9XFxcIl9ibGFua1xcXCIgaHJlZj1cXFwiaHR0cDovL3d3dy5tYXB6LmNvbVxcXCI+bWFwei5jb20gPC9hPicgKyAnICcgKyBPU01fUkVMX0FUVFJJQlVUSU9OLFxuICAgIG1pblpvb206IDAsXG4gICAgbWF4Wm9vbTogMjIsXG4gICAgdGlsZVBpeGVsUmF0aW86IDJcbiAgfSxcbiAga2xva2FuOiB7XG5cbiAgICBPcGVuTWFwVGlsZXM6IHtcbiAgICAgIGZvcm1hdDogbmV3IE1WVCgpLFxuICAgICAgdGlsZUdyaWQ6ICBjcmVhdGVYWVooe3RpbGVTaXplOiA1MTIsIG1heFpvb206IDIyfSksIC8vVG9EbyBtYXhab29tIGZyb20gY29uZmlndXJhdGlvblxuICAgICAgdGlsZVBpeGVsUmF0aW86IDgsXG4gICAgICBhdHRyaWJ1dGlvbnM6ICfCqSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwczovL29wZW5tYXB0aWxlcy5vcmcvXCI+T3Blbk1hcFRpbGVzPC9hPicgKyAnICcgK1xuICAgICAgICAgIE9TTV9SRUxfQVRUUklCVVRJT04sXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMjIsXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cydcbiAgICB9LFxuXG4gICAgVGlsZUhvc3Rpbmc6IHtcbiAgICAgIGZvcm1hdDogbmV3IE1WVCgpLFxuICAgICAgdGlsZUdyaWQ6ICBjcmVhdGVYWVooe3RpbGVTaXplOiA1MTIsIG1heFpvb206IDIyfSksIC8vVG9EbyBtYXhab29tIGZyb20gY29uZmlndXJhdGlvblxuICAgICAgdGlsZVBpeGVsUmF0aW86IDgsXG4gICAgICBhdHRyaWJ1dGlvbnM6ICfCqSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwczovL3RpbGVob3N0aW5nLmNvbS9cIj5UaWxlSG9zdGluZzwvYT4nICsgJyAnICtcbiAgICAgICAgICBPU01fUkVMX0FUVFJJQlVUSU9OLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDIyLFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH1cbiAgfSxcblxuICBoZXJlOiB7XG5cbiAgICBIRVJFOiB7XG4gICAgICB0aWxlU2l6ZTogWzUxMiwgNTEyXSxcbiAgICAgIGF0dHJpYnV0aW9uczogJ01hcCBUaWxlcyAmY29weTsgJyArIG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSArICcgJyArXG4gICAgICAgICAgJzxhIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLmhlcmUuY29tXCI+SEVSRTwvYT4nICsgJyAnICtcbiAgICAgICAgICBPU01fUkVMX0FUVFJJQlVUSU9OLFxuICAgICAgbWluWm9vbTogMCxcbiAgICAgIG1heFpvb206IDIyLFxuICAgICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgIH1cbiAgfSxcblxuICB0aHVuZGVyZm9yZXN0OiB7XG5cbiAgICBUaHVuZGVyZm9yZXN0OiB7XG4gICAgICB0aWxlU2l6ZTogWzUxMiwgNTEyXSxcbiAgICAgIGF0dHJpYnV0aW9uczogJ01hcCBUaWxlcyDCqSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwczovL3d3dy50aHVuZGVyZm9yZXN0LmNvbS9cIj5UaHVuZGVyZm9yZXN0PC9hPicgKyAnICcgK1xuICAgICAgICAgIE9TTV9SRUxfQVRUUklCVVRJT04sXG4gICAgICBtaW5ab29tOiAwLFxuICAgICAgbWF4Wm9vbTogMTksXG4gICAgICBjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG4gICAgfVxuXG4gIH1cbn07XG4iLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIExhbmd1YWdlIGNvbnN0YW50cyAoZW4pXG4gKi9cbmV4cG9ydCB2YXIgbGFuZ0NvbnN0YW50c0dlcm1hbiA9IHtcblxuICBMQU5HOiAnZGUnLFxuXG4gIE5BTUU6ICdOYW1lJyxcbiAgSElERTogJ1p1a2xhcHBlbicsXG4gIENMT1NFOiAnU2NobGllw59lbicsXG4gIFBPSU5UOiAnUE9JJyxcbiAgRlJFRUhBTkQ6ICdGcmVpaGFuZCcsXG4gIExJTkU6ICdMaW5pZScsXG4gIFBPTFlHT046ICdGbMOkY2hlJyxcbiAgQ0lSQ0xFOiAnS3JlaXMnLFxuICBQRVJJTUVURVI6ICdVbWZhbmcnLFxuICBMRU5HVEg6ICdMw6RuZ2UnLFxuICBTVVJGQUNFQVJFQTogJ0Zsw6RjaGVuaW5oYWx0JyxcbiAgUkFESVVTOiAnUmFkaXVzJyxcbiAgUkVGUkVTSDogJ0FrdHVhbGlzaWVyZW4nLFxuICBBQ0NFUFQ6ICdBa3plcHRpZXJlbicsXG4gIENPUFlfVE9fQ0xJUEJPQVJEOiAnSW4gWndpc2NoZW5hYmxhZ2Uga29waWVyZW4nLFxuXG4gIENUUkxfWk9PTV9JTjogJ1Zlcmdyw7bDn2VybicsXG4gIENUUkxfWk9PTV9PVVQ6ICdWZXJrbGVpbmVybicsXG4gIENUUkxfWk9PTV9FWFQ6ICdNYXhpbWFsIHZlcmtsZWluZXJuJyxcbiAgQ1RSTF9aT09NX0hPTUU6ICdadXIgdXJzcHLDvG5nbGljaGVuIFBvc2l0aW9uJyxcbiAgQ1RSTF9aT09NX1BPUzogJ1p1bSBha3R1ZWxsZW4gU3RhbmRvcnQnLFxuICBDVFJMX1pPT01fU0xJREVSOiAnWm9vbSBTbGlkZXInLFxuICBDVFJMX1JFU0VUX1JPVEFUSU9OOiAnUm90YXRpb24gKHRvdWNoLCBjdHJsK3NoaWZ0K21vdXNlKSB6dXLDvGNrc2V0emVuJyxcbiAgQ1RSTF9QT1JUU0lERTogJ1BvcnRzaWRlIGVpbi0vYXVzYmxlbmRlbicsXG4gIENUUkxfUk9VVEVSOiAnUm91dGVyIGVpbi0vYXVzYmxlbmRlbicsXG4gIENUUkxfTUVBU1VSRVRPT0xTOiAnTWVzc3dlcmt6ZXVnZSBlaW4tL2F1c2JsZW5kZW4nLFxuICBDVFJMX0lORk9QQUdFOiAnSW5mb3NlaXRlIGVpbi0vYXVzYmxlbmRlbicsXG4gIENUUkxfQURESVRJT05BTFBBTkVMOiAnUGFuZWwgZWluLS9hdXNibGVuZGVuJyxcbiAgQ1RSTF9BQ0NPVU5UOiAnQWNjb3VudCBlaW4tL2F1c2JsZW5kZW4nLFxuICBDVFJMX1pPT01MRVZFTDogJ1pvb20nLFxuICBDVFJMX01PVVNFQ09PUkRTOiAnTG9uL0xhdCcsXG4gIENUUkxfR0VPU0VBUkNIOiAnU3VjaGUgZWluLS9hdXNibGVuZGVuJyxcbiAgQ1RSTF9TVEFSVF9TRUFSQ0g6ICdTdWNoZSBzdGFydGVuJyxcbiAgQ1RSTF9PVkVSVklFV01BUDogJ8OcYmVyc2ljaHRza2FydGUgZWluLS9hdXNibGVuZGVuJyxcbiAgQ1RSTF9TSURFQk9BUkQ6ICdTaWRlYm9hcmQgZWluLS9hdXNibGVuZGVuJyxcbiAgQ1RSTF9TVEFSQk9BUkQ6ICdTdGFyYm9hcmQgZWluLS9hdXNibGVuZGVuJyxcbiAgQ1RSTF9BVFRSSUJVVElPTjogJ0F0dHJpYnV0aW9uIGFuemVpZ2VuJyxcbiAgQ1RSTF9HUklEOiAnR2l0dGVyIGVpbi0vYXVzYmxlbmRlbicsXG4gIENUUkxfUEVSTUFMSU5LOiAnUGVybWFsaW5rIGdlbmVyaWVyZW4nLFxuICBDVFJMX0ZVTExTQ1JFRU46ICdWb2xsYmlsZG1vZHVzIGVpbi0vYXVzc2NoYWx0ZW4nLFxuICBDVFJMX1BSSU5UOiAnS2FydGUgZXhwb3J0aWVyZW4nLFxuICBDVFJMX0JBU0VMQVlFUjogJ0Jhc2lza2FydGVud2VjaHNsZXIgZWluLS9hdXNzY2hhbHRlbicsXG4gIENUUkxfSU5GT0FSRUE6ICdJbmZvYmVyZWljaCDDtmZmbmVuL3NjaGxpZcOfZW4nLFxuXG4gIFNUQVJCT0FSRDogJ0thcnRlbmVsZW1lbnRlJyxcbiAgU1RBUkJPQVJEX0JBU0VMQVlFUjogJ0Jhc2lza2FydGVuJyxcbiAgU1RBUkJPQVJEX0xBWUVSOiAnRWJlbmVuJyxcbiAgU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9CQVNFTEFZRVJTV0lUQ0hFUjogJ0Jhc2lza2FydGVuJyxcbiAgU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9MQVlFUlNXSVRDSEVSOiAnS2FydGVuZWxlbWVudGUnLFxuICBTVEFSQk9BUkRfRUxFTUVOVF9aT09NOiAnQXVmIEVsZW1lbnQgem9vbWVuJyxcbiAgU1RBUkJPQVJEX0VMRU1FTlRfWk9PTV9CRUZPUkU6ICdadSAnLFxuICBTVEFSQk9BUkRfRUxFTUVOVF9aT09NX0FGVEVSOiAnIHpvb21lbicsXG5cbiAgTEFZRVJTV0lUQ0hFUl9UT0dHTEVfQUxMOiBcIkFsbGUgRWxlbWVudGVcIixcblxuICBTSURFQk9BUkQ6ICdTaWRlYm9hcmQnLFxuXG4gIFJFU0VUX0ZJTFRFUjogJ0ZpbHRlciB6dXLDvGNrc2V0emVuJyxcblxuICBHRU9TRUFSQ0g6ICdTdWNoZScsXG4gIE9WRVJWSUVXTUFQOiAnw5xiZXJzaWNodHNrYXJ0ZScsXG5cbiAgTUVBU1VSRVRPT0xTOiAnTWVzc3dlcmt6ZXVnZScsXG4gIE1FQVNVUkVUT09MU19JTkZPOiAnV8OkaGxlbiBTaWUgZWluZW4gTWVzc3R5cCBvdmVydmlld2F1cyB1bmQgc3RhcnRlbiBTaWUgZGllIE1lc3N1bmcgZHVyY2ggZGFzIEtsaWNrZW4gaW4gZGllIEthcnRlLicsXG4gIE1FQVNVUkVUT09MU19JTkZPX0FERElUSU9OQUw6ICcoRWluemVsbmUgTWVzc3VuZ2VuIGvDtm5uZW4gbWl0IGVpbmVtIERvcHBlbGtsaWNrIGJlZW5kZXQgd2VyZGVuLiknLFxuICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX1NFTEVDVDogJ0F1c3dhaGwgTW9kdXMnLFxuICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfTElORVNUUklORzogJ1N0cmVja2VuIG1lc3NlbicsXG4gIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19QT0xZR09OOiAnRmzDpGNoZW4gbWVzc2VuJyxcbiAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0NJUkNMRTogJ1JhZGl1cyBtZXNzZW4nLFxuICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfRlJFRUhBTkQ6ICdGcmVpaGFuZCBtZXNzZW4nLFxuXG4gIElORk9QQUdFOiAnSW5mb3JtYXRpb25lbicsXG4gIEFERElUSU9OQUxQQU5FTDogJ1BhbmVsJyxcbiAgQURESVRJT05BTFBBTkVMX1ZJRVdfVFJJR0dFUjogJ1BhbmVsIGFuemVpZ2VuJyxcbiAgQUNDT1VOVDogJ0FjY291bnQnLFxuICBBQ0NPVU5UX1ZJRVdfVFJJR0dFUjogJ0FjY291bnQgYW56ZWlnZW4nLFxuXG4gIFNFQVJDSF9OT1RfRk9VTkQ6ICdEaWUgTG9rYXRpb24ga29ubnRlIG5pY2h0IGdlZnVuZGVuIHdlcmRlbi4gQml0dGUgdmVyc3VjaGVuIFNpZSBlaW5lIGFuZGVyZSBFaW5nYWJlLicsXG5cbiAgTk9ORTogJycgLy8gbGFzdCBsaW5lXG59OyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuXG4vKipcbiAqIExhbmd1YWdlIGNvbnN0YW50cyAoZW4pXG4gKi9cbmV4cG9ydCB2YXIgbGFuZ0NvbnN0YW50c0VuZ2xpc2ggPSB7XG5cbiAgTEFORzogJ2VuJyxcblxuICBOQU1FOiAnTmFtZScsXG4gIEhJREU6ICdIaWRlJyxcbiAgQ0xPU0U6ICdDbG9zZScsXG4gIFBPSU5UOiAnUE9JJyxcbiAgRlJFRUhBTkQ6ICdmcmVlaGFuZCcsXG4gIExJTkU6ICdMaW5lJyxcbiAgUE9MWUdPTjogJ0FyZWEnLFxuICBDSVJDTEU6ICdDaXJjbGUnLFxuICBQRVJJTUVURVI6ICdQZXJpbWV0ZXInLFxuICBMRU5HVEg6ICdMZW5ndGgnLFxuICBTVVJGQUNFQVJFQTogJ1N1cmZhY2UgYXJlYScsXG4gIFJBRElVUzogJ1JhZGl1cycsXG4gIFJFRlJFU0g6ICdSZWZyZXNoJyxcbiAgQUNDRVBUOiAnQWNjZXB0JyxcbiAgQ09QWV9UT19DTElQQk9BUkQ6ICdDb3B5IHRvIGNsaXBib2FyZCcsXG5cbiAgQ1RSTF9aT09NX0lOOiAnWm9vbSBpbicsXG4gIENUUkxfWk9PTV9PVVQ6ICdab29tIG91dCcsXG4gIENUUkxfWk9PTV9FWFQ6ICdGaXQgdG8gZXh0ZW50JyxcbiAgQ1RSTF9aT09NX0hPTUU6ICdqdW1wIHRvIGluaXRpYWwgcG9zaXRpb24nLFxuICBDVFJMX1pPT01fUE9TOiAnanVtcCB0byBicm93c2VyL2RldmljZSBwb3NpdGlvbicsXG4gIENUUkxfWk9PTV9TTElERVI6ICdab29tIHNsaWRlcicsXG4gIENUUkxfUkVTRVRfUk9UQVRJT046ICdSZXNldCByb3RhdGlvbiAodG91Y2gsIGN0cmwrc2hpZnQrbW91c2UpJyxcbiAgQ1RSTF9QT1JUU0lERTogJ1RvZ2dsZSBwb3J0c2lkZScsXG4gIENUUkxfRURJVE9SOiAnVG9nZ2xlIGVkaXRvcicsXG4gIENUUkxfTUVBU1VSRVRPT0xTOiAnVG9nZ2xlIG1lYXN1cmV0b29scycsXG4gIENUUkxfSU5GT1BBR0U6ICdUb2dnbGUgaW5mb3BhZ2UnLFxuICBDVFJMX0FERElUSU9OQUxQQU5FTDogJ1RvZ2dsZSBwYW5lbCcsXG4gIENUUkxfQUNDT1VOVDogJ1RvZ2dsZSBhY2NvdW50JyxcbiAgQ1RSTF9aT09NTEVWRUw6ICdab29tJyxcbiAgQ1RSTF9NT1VTRUNPT1JEUzogJ0xvbi9MYXQnLFxuICBDVFJMX0dFT1NFQVJDSDogJ1RvZ2dsZSBnZW9zZWFyY2gnLFxuICBDVFJMX1NUQVJUX1NFQVJDSDogJ3N0YXJ0IHNlYXJjaCcsXG4gIENUUkxfT1ZFUlZJRVdNQVA6ICdUb2dnbGUgb3ZlcnZpZXdtYXAnLFxuICBDVFJMX1NJREVCT0FSRDogJ1RvZ2dsZSBzaWRlYm9hcmQnLFxuICBDVFJMX1NUQVJCT0FSRDogJ1RvZ2dsZSBzdGFyYm9hcmQnLFxuICBDVFJMX0FUVFJJQlVUSU9OOiAnU2hvdyBhdHRyaWJ1dGlvbicsXG4gIENUUkxfR1JJRDogJ1RvZ2dsZSBncmlkJyxcbiAgQ1RSTF9QRVJNQUxJTks6ICdHZW5lcmF0ZSBQZXJtYWxpbmsnLFxuICBDVFJMX0ZVTExTQ1JFRU46ICdUb2dnbGUgZnVsbHNjcmVlbi1tb2RlJyxcbiAgQ1RSTF9QUklOVDogJ0V4cG9ydCBtYXAnLFxuICBDVFJMX0JBU0VMQVlFUjogJ1N3aXRjaCBiYXNlIG1hcCBjaGFuZ2VyIG9uL29mZicsXG4gIENUUkxfSU5GT0FSRUE6ICdPcGVuL2Nsb3NlIGluZm8gYXJlYScsXG5cbiAgRURJVE9SOiAnRWRpdG9yJyxcbiAgRURJVE9SX0VOQUJMRV9JTlNUQU5UX01FQVNVUkU6ICdNZWFzdXJlIHdoaWxlIGRyYXdpbmcnLFxuICBFRElUT1JfRU5BQkxFX0ZSRUVIQU5EX0RSQVc6ICdGcmVlaGFuZCBkcmF3JyxcbiAgRURJVE9SX0ZFQVRVUkVfQVBQTFk6ICdFbmQgbW9kaWZpY2F0aW9uJyxcbiAgRURJVE9SX0ZFQVRVUkVfREVMRVRFOiAnRGVsZXRlIGZlYXR1cmUnLFxuICBFRElUT1JfRkVBVFVSRV9NT0RJRlk6ICdNb2RpZnkgZmVhdHVyZScsXG4gIEVESVRPUl9TRUxFQ1RfSU5GTzogJ0NsaWNrIGFuIGVsZW1lbnQgb24gdGhlIG1hcCB0byBzZWxlY3QgaXQuJyxcbiAgRURJVE9SX1NFTEVDVF9JTkZPX0FERElUSU9OQUw6ICdbY3RybF0gKyBbY2xpY2tdIGZvciBtdWx0aXNlbGVjdCA8YnI+W3NoaWZ0XSBmb3IgYm94c2VsZWN0JyxcbiAgRURJVE9SX1ZJRVdfVFJJR0dFUl9TRUxFQ1Q6ICdTZWxlY3QtbW9kZScsXG4gIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19QT0lOVDogJ0FkZCBQT0lzJyxcbiAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0ZSRUVIQU5EOiAnRHJhdyBmcmVlaGFuZCcsXG4gIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19MSU5FU1RSSU5HOiAnQWRkIHRyYWNrcycsXG4gIEVESVRPUl9WSUVXX1RSSUdHRVJfRFJBV19QT0xZR09OOiAnQWRkIGFyZWFzJyxcbiAgRURJVE9SX1ZJRVdfVFJJR0dFUl9EUkFXX0NJUkNMRTogJ0FkZCBjaXJjbGVzJyxcblxuICBTVEFSQk9BUkQ6ICdMYXllcnN3aXRjaGVyJyxcbiAgU1RBUkJPQVJEX0JBU0VMQVlFUjogJ0Jhc2VsYXllcicsXG4gIFNUQVJCT0FSRF9MQVlFUjogJ0xheWVyJyxcbiAgU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9CQVNFTEFZRVJTV0lUQ0hFUjogJ0Jhc2VsYXllcnN3aXRjaGVyJyxcbiAgU1RBUkJPQVJEX1ZJRVdfVFJJR0dFUl9MQVlFUlNXSVRDSEVSOiAnTWFwIGVsZW1lbnRzJyxcbiAgU1RBUkJPQVJEX0VMRU1FTlRfWk9PTTogJ1pvb20gdG8gZWxlbWVudCcsXG4gIFNUQVJCT0FSRF9FTEVNRU5UX1pPT01fQkVGT1JFOiAnWm9vbSB0byBlbGVtZW50ICcsXG4gIFNUQVJCT0FSRF9FTEVNRU5UX1pPT01fQUZURVI6ICcnLFxuXG4gIExBWUVSU1dJVENIRVJfVE9HR0xFX0FMTDogXCJBbGwgZWxlbWVudHNcIixcblxuICBSRVNFVF9GSUxURVI6ICdSZXNldCBmaWx0ZXInLFxuXG4gIE1FQVNVUkVUT09MUzogJ01lYXN1cmV0b29scycsXG4gIE1FQVNVUkVUT09MU19JTkZPOiAnU2VsZWN0IGEgbWVhc3VyZXR5cGUgYW5kIHN0YXJ0IG1lYXN1cmluZyBieSBjbGlja2luZyBvbiB0aGUgbWFwLicsXG4gIE1FQVNVUkVUT09MU19JTkZPX0FERElUSU9OQUw6ICcoVG8gc3RvcCBhIG1lYXN1cmVtZW50LCBkb3VibGUtY2xpY2sgb24gdGhlIG1hcC4pJyxcbiAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9TRUxFQ1Q6ICdTZWxlY3QtbW9kZScsXG4gIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19MSU5FU1RSSU5HOiAnTWVhc3VyZSB0cmFja3MnLFxuICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfUE9MWUdPTjogJ01lYXN1cmUgYXJlYXMnLFxuICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfQ0lSQ0xFOiAnTWVhc3VyZSByYWRpdXMnLFxuICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfRlJFRUhBTkQ6ICdNZWFzdXJlIGZyZWVoYW5kJyxcblxuICBHRU9TRUFSQ0g6ICdTZWFyY2gnLFxuICBPVkVSVklFV01BUDogJ092ZXJ2aWV3IG1hcCcsXG5cbiAgSU5GT1BBR0U6ICdJbmZvcGFnZScsXG4gIElORk9QQUdFX1ZJRVdfVFJJR0dFUjogJ1Nob3cgaW5mb3JtYXRpb25zJyxcblxuICBBRERJVElPTkFMUEFORUw6ICdQYW5lbCcsXG4gIEFERElUSU9OQUxQQU5FTF9WSUVXX1RSSUdHRVI6ICdTaG93IHBhbmVsJyxcblxuICBBQ0NPVU5UOiAnQWNjb3VudCcsXG4gIEFDQ09VTlRfVklFV19UUklHR0VSOiAnU2hvdyBhY2NvdW50JyxcblxuICBTRUFSQ0hfTk9UX0ZPVU5EOiAnTG9jYXRpb24gbm90IGZvdW5kLiBTb3JyeS4uLiA6KCcsXG5cbiAgTk9ORTogJycgLy8gbGFzdCBsaW5lXG59OyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCB2YXIgY3NzQ29uc3RhbnRzID0ge1xuXG4gIE9QRU46ICdjNGctb3BlbicsXG4gIENMT1NFOiAnYzRnLWNsb3NlJyxcbiAgQ0xPU0VBQkxFOiAnYzRnLWNsb3NlYWJsZScsXG4gIEVOQUJMRUQ6ICdjNGctZW5hYmxlZCcsXG4gIERJU0FCTEVEOiAnYzRnLWRpc2FibGVkJyxcbiAgSElERTogJ2M0Zy1oaWRlJyxcbiAgSUNPTjogJ2M0Zy1pY29uJyxcbiAgQ09OVFJPTDogJ2M0Zy1jb250cm9sJyxcbiAgQ09QWTogJ2M0Zy1jb3B5JyxcbiAgUkVGUkVTSDogJ2M0Zy1yZWZyZXNoJyxcbiAgQUNUSVZFOiAnYzRnLWFjdGl2ZScsXG4gIElOQUNUSVZFOiAnYzRnLWluYWN0aXZlJyxcbiAgTE9BRElORzogJ2M0Zy1sb2FkaW5nJyxcbiAgQU5JTUFUSU9OX1NQSU46ICdjNGctYW5pbWF0aW9uLXNwaW4nLFxuICBMQVJHRTogJ2M0Zy1sYXJnZScsXG4gIFNNQUxMOiAnYzRnLXNtYWxsJyxcbiAgSE9SSVpPTlRBTDogJ2M0Zy1ob3Jpem9udGFsJyxcbiAgVkVSVElDQUw6ICdjNGctdmVydGljYWwnLFxuXG4gIEFUVFJJQlVUSU9OX0xPR086ICdjNGctYXR0cmlidXRpb24tbG9nbycsXG4gIENPTlRST0xfQ09OVEFJTkVSX1RMOiAnYzRnLWNvbnRyb2wtY29udGFpbmVyLXRvcC1sZWZ0JyxcbiAgQ09OVFJPTF9DT05UQUlORVJfVFI6ICdjNGctY29udHJvbC1jb250YWluZXItdG9wLXJpZ2h0JyxcbiAgQ09OVFJPTF9DT05UQUlORVJfQkw6ICdjNGctY29udHJvbC1jb250YWluZXItYm90dG9tLWxlZnQnLFxuICBDT05UUk9MX0NPTlRBSU5FUl9CTF9TVUI6ICdjNGctY29udHJvbC1jb250YWluZXItYm90dG9tLWxlZnQtc3ViJyxcbiAgQ09OVFJPTF9DT05UQUlORVJfQlI6ICdjNGctY29udHJvbC1jb250YWluZXItYm90dG9tLXJpZ2h0JyxcblxuICBHRU9TRUFSQ0g6ICdjNGctZ2Vvc2VhcmNoJyxcbiAgR0VPU0VBUkNIX1dSQVBQRVI6ICdjNGctZ2Vvc2VhcmNoLXdyYXBwZXInLFxuICBHRU9TRUFSQ0hfVFJJR0dFUjogJ2M0Zy1nZW9zZWFyY2gtdHJpZ2dlcicsXG4gIEdFT1NFQVJDSF9TVEFSVDogJ2M0Zy1nZW9zZWFyY2gtc3RhcnQnLFxuICBHUkFUSUNVTEU6ICdjNGctZ3JhdGljdWxlJyxcbiAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9TRUxFQ1Q6ICdjNGctbWVhc3VyZXRvb2xzLXZpZXctdHJpZ2dlci1zZWxlY3QnLFxuICBNRUFTVVJFVE9PTFNfVklFV19UUklHR0VSX0RSQVdfTElORVNUUklORzogJ2M0Zy1tZWFzdXJldG9vbHMtdmlldy10cmlnZ2VyLWRyYXctbGluZScsXG4gIE1FQVNVUkVUT09MU19WSUVXX1RSSUdHRVJfRFJBV19QT0xZR09OOiAnYzRnLW1lYXN1cmV0b29scy12aWV3LXRyaWdnZXItZHJhdy1wb2x5Z29uJyxcbiAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0NJUkNMRTogJ2M0Zy1tZWFzdXJldG9vbHMtdmlldy10cmlnZ2VyLWRyYXctY2lyY2xlJyxcbiAgTUVBU1VSRVRPT0xTX1ZJRVdfVFJJR0dFUl9EUkFXX0ZSRUVIQU5EOiAnYzRnLW1lYXN1cmV0b29scy12aWV3LXRyaWdnZXItZHJhdy1mcmVlaGFuZCcsXG4gIFBSSU5UOidjNGctcHJpbnQnLFxuICBJTkZPUEFHRV9WSUVXX1RSSUdHRVI6ICdjNGctaW5mb3BhZ2Utdmlldy10cmlnZ2VyJyxcbiAgSU5GT1BBR0U6ICdjNGctaW5mb3BhZ2UnLFxuICBBRERJVElPTkFMUEFORUxfVklFV19UUklHR0VSOiAnYzRnLWFkZGl0aW9uYWxwYW5lbC12aWV3LXRyaWdnZXInLFxuICBBRERJVElPTkFMUEFORUw6ICdjNGctYWRkaXRpb25hbHBhbmVsJyxcbiAgT1ZFUlZJRVdNQVA6ICdjNGctb3ZlcnZpZXdtYXAnLFxuICBPVkVSVklFV01BUF9XUkFQUEVSOiAnYzRnLW92ZXJ2aWV3bWFwLXdyYXBwZXInLFxuICBQRVJNQUxJTks6ICdjNGctcGVybWFsaW5rJyxcbiAgUEVSTUFMSU5LX1BPUFVQOiAnYzRnLXBlcm1hbGluay1wb3B1cCcsXG4gIFBPUFVQX0NMT1NFOiAnYzRnLXBvcHVwLWNsb3NlJyxcbiAgUE9QVVBfUk9VVEVfV1JBUFBFUjogJ2M0Zy1wb3B1cC1yb3V0ZS13cmFwcGVyJyxcbiAgUE9QVVBfUk9VVEVfRlJPTTogJ2M0Zy1wb3B1cC1yb3V0ZS1mcm9tJyxcbiAgUE9QVVBfUk9VVEVfVE86ICdjNGctcG9wdXAtcm91dGUtdG8nLFxuICBQT1JUU0lERTogJ2M0Zy1wb3J0c2lkZScsXG4gIFBPUlRTSURFX0NPTlRBSU5FUjogJ2M0Zy1wb3J0c2lkZS1jb250YWluZXInLFxuICBQT1JUU0lERV9DT05UUk9MOiAnYzRnLXBvcnRzaWRlLWNvbnRyb2wnLFxuICBQT1JUU0lERV9XUkFQUEVSOiAnYzRnLXBvcnRzaWRlLXdyYXBwZXInLFxuICBQT1JUU0lERV9USVRMRUJBUjogJ2M0Zy1wb3J0c2lkZS10aXRsZWJhcicsXG4gIFBPUlRTSURFX1RPUF9UT09MQkFSOiAnYzRnLXBvcnRzaWRlLXRvcC10b29sYmFyJyxcbiAgUE9SVFNJREVfQ09OVEVOVF9DT05UQUlORVI6ICdjNGctcG9ydHNpZGUtY29udGVudC1jb250YWluZXInLFxuICBQT1JUU0lERV9CT1RUT01fVE9PTEJBUjogJ2M0Zy1wb3J0c2lkZS1ib3R0b20tdG9vbGJhcicsXG4gIFBPUlRTSURFX1NUQVRVU0JBUjogJ2M0Zy1wb3J0c2lkZS1zdGF0dXNiYXInLFxuICBQT1JUU0lERV9WSUVXVFJJR0dFUkJBUjogJ2M0Zy1wb3J0c2lkZS12aWV3dHJpZ2dlcmJhcicsXG4gIFBPUlRTSURFX0hFQURMSU5FOiAnYzRnLXBvcnRzaWRlLWhlYWRsaW5lJyxcbiAgUE9SVFNJREVfQlVUVE9OQkFSOiAnYzRnLXBvcnRzaWRlLWJ1dHRvbmJhcicsXG4gIFBPUlRTSURFX0JVVFRPTjogJ2M0Zy1wb3J0c2lkZS1idXR0b24nLFxuICBQT1JUU0lERV9ISURFOiAnYzRnLXBvcnRzaWRlLWhpZGUnLFxuICBQT1JUU0lERV9DTE9TRTogJ2M0Zy1wb3J0c2lkZS1jbG9zZScsXG4gIFNQSU5ORVI6ICdjNGctc3Bpbm5lcicsXG4gIFNUQVJCT0FSRDogJ2M0Zy1zdGFyYm9hcmQnLFxuXG4gIFNUQVJCT0FSRF9DT05UQUlORVI6ICdjNGctc3RhcmJvYXJkLWNvbnRhaW5lcicsXG4gIFNUQVJCT0FSRF9DT05UUk9MOiAnYzRnLXN0YXJib2FyZC1jb250cm9sJyxcbiAgU1RBUkJPQVJEX1dSQVBQRVI6ICdjNGctc3RhcmJvYXJkLXdyYXBwZXInLFxuICBTVEFSQk9BUkRfVElUTEVCQVI6ICdjNGctc3RhcmJvYXJkLXRpdGxlYmFyJyxcbiAgU1RBUkJPQVJEX0NPTlRFTlRfQ09OVEFJTkVSOiAnYzRnLXN0YXJib2FyZC1jb250ZW50LWNvbnRhaW5lcicsXG4gIFNUQVJCT0FSRF9CT1RUT01fVE9PTEJBUjogJ2M0Zy1zdGFyYm9hcmQtYm90dG9tLXRvb2xiYXInLFxuICBTVEFSQk9BUkRfU1RBVFVTQkFSOiAnYzRnLXN0YXJib2FyZC1zdGF0dXNiYXInLFxuICBTVEFSQk9BUkRfVklFV1RSSUdHRVJCQVI6ICdjNGctc3RhcmJvYXJkLXZpZXd0cmlnZ2VyYmFyJyxcbiAgU1RBUkJPQVJEX0hFQURMSU5FOiAnYzRnLXN0YXJib2FyZC1oZWFkbGluZScsXG4gIFNUQVJCT0FSRF9CVVRUT05CQVI6ICdjNGctc3RhcmJvYXJkLWJ1dHRvbmJhcicsXG4gIFNUQVJCT0FSRF9CVVRUT046ICdjNGctc3RhcmJvYXJkLWJ1dHRvbicsXG4gIFNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfQkFTRUxBWUVSU1dJVENIRVI6ICdjNGctc3RhcmJvYXJkLXZpZXctdHJpZ2dlci1iYXNlbGF5ZXJzd2l0Y2hlcicsXG4gIFNUQVJCT0FSRF9WSUVXX1RSSUdHRVJfTEFZRVJTV0lUQ0hFUjogJ2M0Zy1zdGFyYm9hcmQtdmlldy10cmlnZ2VyLWxheWVyc3dpdGNoZXInLFxuICBTVEFSQk9BUkRfQ0xPU0U6ICdjNGctc3RhcmJvYXJkLWNsb3NlJyxcbiAgU1RBUkJPQVJEX0NPTlRFTlRfQkFTRUxBWUVSU1dJVENIRVI6ICdjNGctY29udGVudC1iYXNlbGF5ZXJzd2l0Y2hlcicsXG4gIFNUQVJCT0FSRF9CQVNFTEFZRVJUUkVFOiAnYzRnLWJhc2VsYXllcnRyZWUnLFxuICBTVEFSQk9BUkRfTEFZRVJUUkVFOiAnYzRnLWxheWVydHJlZScsXG4gIFNUQVJCT0FSRF9DT05URU5UX0xBWUVSU1dJVENIRVI6ICdjNGctY29udGVudC1sYXllcnN3aXRjaGVyJyxcbiAgU1RBUkJPQVJEX0xPQ1NUWUxFOiAnYzRnLXN0YXJib2FyZC1sb2NzdHlsZScsXG4gIFNUQVJCT0FSRF9MT0NTVFlMRV9QT0lOVDogJ2M0Zy1zdGFyYm9hcmQtbG9jc3R5bGUtcG9pbnQnLFxuICBTVEFSQk9BUkRfTE9DU1RZTEVfU1FVQVJFOiAnYzRnLXN0YXJib2FyZC1sb2NzdHlsZS1zcXVhcmUnLFxuICBTVEFSQk9BUkRfTE9DU1RZTEVfU1RBUjogJ2M0Zy1zdGFyYm9hcmQtbG9jc3R5bGUtc3RhcicsXG4gIFNUQVJCT0FSRF9MT0NTVFlMRV9YOiAnYzRnLXN0YXJib2FyZC1sb2NzdHlsZS14JyxcbiAgU1RBUkJPQVJEX0xPQ1NUWUxFX0NST1NTOiAnYzRnLXN0YXJib2FyZC1sb2NzdHlsZS1jcm9zcycsXG4gIFNUQVJCT0FSRF9MT0NTVFlMRV9UUklBTkdMRTogJ2M0Zy1zdGFyYm9hcmQtbG9jc3R5bGUtdHJpYW5nbGUnLFxuICBUT09MVElQX1BPUFVQOiAnYzRnLXRvb2x0aXAtcG9wdXAnLFxuICBaT09NX0xFVkVMOiAnYzRnLXpvb20tbGV2ZWwnLFxuXG4gIE9MX0NPTlRST0w6ICdvbC1jb250cm9sJyxcbiAgT0xfVU5TRUxFQ1RBQkxFOiAnb2wtdW5zZWxlY3RhYmxlJyxcblxuICBPTF9PVkVSTEFZQ09OVEFJTkVSOiAnb2wtb3ZlcmxheWNvbnRhaW5lcicsXG4gIE9MX09WRVJMQVlDT05UQUlORVJfU0U6ICdvbC1vdmVybGF5Y29udGFpbmVyLXN0b3BldmVudCcsXG4gIE9MX1ZJRVdQT1JUOiAnb2wtdmlld3BvcnQnLFxuICBPTF9aT09NOiAnb2wtem9vbScsXG4gIE9MX1pPT01fSU46ICdvbC16b29tLWluJyxcbiAgT0xfWk9PTV9FWFQ6ICdvbC16b29tLWV4dGVudCcsXG4gIE9MX1pPT01fSE9NRTogJ29sLXpvb20taG9tZScsXG4gIE9MX1pPT01fUE9TOiAnb2wtem9vbS1wb3NpdGlvbicsXG4gIE9MX1pPT01fV0lUSF9FWFQ6ICdvbC16b29tLXdpdGgtZXh0ZW50JyxcbiAgT0xfWk9PTV9XSVRIX0hPTUU6ICdvbC16b29tLXdpdGgtaG9tZScsXG4gIE9MX1pPT01fV0lUSF9QT1M6ICdvbC16b29tLXdpdGgtcG9zaXRpb24nLFxuICBPTF9aT09NX1NMSURFUjogJ29sLXpvb20tc2xpZGVyJyxcbiAgT0xfWk9PTV9XSVRIX1NMSURFUjogJ29sLXpvb20td2l0aC1zbGlkZXInLFxuXG4gIE5PTkU6ICcnIC8vIGxhc3QgbGluZVxufTsiLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge0NvbnRyb2x9IGZyb20gXCJvbC9jb250cm9sXCI7XG5cbid1c2Ugc3RyaWN0JztcbmV4cG9ydCBjbGFzcyBab29tbGV2ZWwgZXh0ZW5kcyBDb250cm9sIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHZhciBzZWxmLFxuICAgICAgZWxlbWVudCxcbiAgICAgIHVwZGF0ZVpvb21sZXZlbDtcblxuICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLm1hcENvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnNvbGUud2FybignWm9vbWxldmVsIGNvbnRyb2wgbmVlZHMgdG8ga25vdyB0aGUgbWFwLicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHtcbiAgICAgIGNsYXNzTmFtZTogY3NzQ29uc3RhbnRzLlpPT01fTEVWRUwsXG4gICAgICB1bmRlZmluZWRIVE1MOiAnJ1xuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgbGV0IG1hcFZpZXcgPSBvcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKTtcblxuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lO1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gcGFyc2VJbnQobWFwVmlldy5nZXRab29tKCkpO1xuXG4gICAgdXBkYXRlWm9vbWxldmVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBwYXJzZUludChtYXBWaWV3LmdldFpvb20oKSk7XG4gICAgfTtcblxuICAgIG9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLm9uKCdjaGFuZ2U6cmVzb2x1dGlvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgdXBkYXRlWm9vbWxldmVsKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnZpZXcgPSBtYXBWaWV3O1xuXG4gICAgLy8gaW5oZXJpdGFuY2Utc3R1ZmZcbiAgICBDb250cm9sLmNhbGwodGhpcywge1xuICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIHRhcmdldDogb3B0aW9ucy50YXJnZXRcbiAgICB9KTtcbiAgfVxufVxuXG4iLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5pbXBvcnQge1pvb21sZXZlbH0gZnJvbSBcIi4vYzRnLW1hcHMtY29udHJvbC16b29tbGV2ZWxcIjtcbmltcG9ydCB7R2VvUGlja2VyfSBmcm9tIFwiLi9jNGctbWFwcy1pbnRlcmFjdGlvbi1nZW9waWNrZXJcIjtcbmltcG9ydCB7R2VvUGlja2VyR2VvSlNPTn0gZnJvbSBcIi4vYzRnLW1hcHMtaW50ZXJhY3Rpb24tZ2VvcGlja2VyLWdlb2pzb25cIjtcbmltcG9ydCB7Z2V0LCB0cmFuc2Zvcm19IGZyb20gXCJvbC9wcm9qXCI7XG5pbXBvcnQge0F0dHJpYnV0aW9uLCBNb3VzZVBvc2l0aW9uLCBTY2FsZUxpbmV9IGZyb20gXCJvbC9jb250cm9sXCI7XG5pbXBvcnQge3RvU3RyaW5nSERNU30gZnJvbSBcIm9sL2Nvb3JkaW5hdGVcIjtcbmltcG9ydCB7Z2V0TGFuZ3VhZ2V9IGZyb20gXCIuL2M0Zy1tYXBzLWkxOG5cIjtcblxubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuJ3VzZSBzdHJpY3QnO1xuZXhwb3J0IGNsYXNzIE1hcHNDb250cm9scyB7XG5cbiAgICAvKipcbiAgICAgKiBbTWFwQ29udHJvbGxlciBkZXNjcmlwdGlvbl1cbiAgICAgKiBAcGFyYW0ge2pzb24tb2JqZWN0fSAgbWFwRGF0YSAgT2JqZWN0IHRvIGNvbmZpZ3VyZSBjb240Z2lzLW1hcHMuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlZSBcImRvY3MvbWFwRGF0YS12YWx1ZXMubWRcIlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBnZXQgYSBsaXN0IG9mIHZhbGlkIHZhbHVlcyBmb3IgdGhpcyBvYmplY3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWFwQ29udHJvbGxlcikge1xuICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIgPSBtYXBDb250cm9sbGVyO1xuICAgICAgICB0aGlzLmNvbnRyb2xzID0ge307XG4gICAgICAgIHRoaXMubGVmdFNsaWRlRWxlbWVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5yaWdodFNsaWRlRWxlbWVudHMgPSBbXTtcbiAgICAgICAgbGFuZ0NvbnN0YW50cyA9IGdldExhbmd1YWdlKG1hcENvbnRyb2xsZXIuZGF0YSk7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IHRoaXMubWFwQ29udHJvbGxlci5tYXA7XG4gICAgICAgIGNvbnN0IHByb3h5ID0gdGhpcy5tYXBDb250cm9sbGVyLnByb3h5O1xuICAgICAgICBjb25zdCBtYXBEYXRhID0gdGhpcy5tYXBDb250cm9sbGVyLmRhdGE7XG5cbiAgICAgICAgLy8gYWRkIGNvbnRyb2wtY29udGFpbmVycyA9PT1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gdG9wLWxlZnRcbiAgICAgICAgbGV0IGNvbnRyb2xDb250YWluZXJUb3BMZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJUb3BMZWZ0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9UTCArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgIHRoaXMubWFwQ29udHJvbGxlci4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQucHJlcGVuZChjb250cm9sQ29udGFpbmVyVG9wTGVmdCk7XG4gICAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lclRvcExlZnQgPSBjb250cm9sQ29udGFpbmVyVG9wTGVmdDtcbiAgICAgICAgLy8gYm90dG9tLWxlZnRcbiAgICAgICAgbGV0IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9CTCArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgIGpRdWVyeShjb250cm9sQ29udGFpbmVyVG9wTGVmdCkuYWZ0ZXIoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQpO1xuICAgICAgICAvLyBlbGVtZW50IG5lZWRzIHRvIGJlIG1vdmVkIHdoZW4gUG9ydHNpZGUgd2lsbCBiZSBvcGVuZWRcbiAgICAgICAgdGhpcy5sZWZ0U2xpZGVFbGVtZW50cy5wdXNoKGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0KTtcbiAgICAgICAgLy8gdG9wLXJpZ2h0XG4gICAgICAgIGxldCBjb250cm9sQ29udGFpbmVyVG9wUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udHJvbENvbnRhaW5lclRvcFJpZ2h0LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5DT05UUk9MX0NPTlRBSU5FUl9UUiArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgIGpRdWVyeShjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdCkuYWZ0ZXIoY29udHJvbENvbnRhaW5lclRvcFJpZ2h0KTtcbiAgICAgICAgLy8gZWxlbWVudCBuZWVkcyB0byBiZSBtb3ZlZCB3aGVuIFN0YXJib2FyZCB3aWxsIGJlIG9wZW5lZFxuICAgICAgICB0aGlzLnJpZ2h0U2xpZGVFbGVtZW50cy5wdXNoKGNvbnRyb2xDb250YWluZXJUb3BSaWdodCk7XG4gICAgICAgIC8vIGJvdHRvbS1yaWdodFxuICAgICAgICBsZXQgY29udHJvbENvbnRhaW5lckJvdHRvbVJpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21SaWdodC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQ09OVFJPTF9DT05UQUlORVJfQlIgKyAnICcgKyBjc3NDb25zdGFudHMuT0xfVU5TRUxFQ1RBQkxFO1xuICAgICAgICBqUXVlcnkoY29udHJvbENvbnRhaW5lclRvcFJpZ2h0KS5hZnRlcihjb250cm9sQ29udGFpbmVyQm90dG9tUmlnaHQpO1xuICAgICAgICAvLyBlbGVtZW50IG5lZWRzIHRvIGJlIG1vdmVkIHdoZW4gU3RhcmJvYXJkIHdpbGwgYmUgb3BlbmVkXG4gICAgICAgIHRoaXMucmlnaHRTbGlkZUVsZW1lbnRzLnB1c2goY29udHJvbENvbnRhaW5lckJvdHRvbVJpZ2h0KTtcblxuICAgICAgICBsZXQgYnV0dG9ucyA9IFtcbiAgICAgICAgICAgIHtuYW1lOidsYXllcnN3aXRjaGVyJywgc29ydDogbWFwRGF0YS5sYXllcnN3aXRjaGVyLmVuYWJsZX0sXG4gICAgICAgICAgICB7bmFtZTonYmFzZWxheWVyc3dpdGNoZXInLCBzb3J0OiBtYXBEYXRhLmJhc2VsYXllcnN3aXRjaGVyLmVuYWJsZX0sXG4gICAgICAgICAgICB7bmFtZTonZ2Vvc2VhcmNoJywgc29ydDogbWFwRGF0YS5nZW9zZWFyY2guZW5hYmxlfSxcbiAgICAgICAgICAgIHtuYW1lOidsZWdlbmQnLCBzb3J0OiBtYXBEYXRhLmxlZ2VuZC5lbmFibGV9LFxuICAgICAgICAgICAge25hbWU6J21lYXN1cmUnLCBzb3J0OiBtYXBEYXRhLm1lYXN1cmV0b29scy5lbmFibGV9LFxuXG4gICAgICAgICAgICB7bmFtZToncGVybWFsaW5rJywgc29ydDogbWFwRGF0YS5wZXJtYWxpbmsuZW5hYmxlfSxcbiAgICAgICAgXTtcblxuICAgICAgICBjb25zdCBzb3J0QnkgPSAoa2V5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKGEsIGIpID0+IChhW2tleV0gPiBiW2tleV0pID8gMSA6ICgoYltrZXldID4gYVtrZXldKSA/IC0xIDogMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYnV0dG9ucy5zb3J0KHNvcnRCeSgnc29ydCcpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidXR0b25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYnV0dG9uID0gYnV0dG9uc1tpXTtcbiAgICAgICAgICAgIGlmIChwYXJzZUludChidXR0b24uc29ydCkgPD0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChidXR0b24ubmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ292ZXJ2aWV3JzpcbiAgICAgICAgICAgICAgICAgICAgdmFyIG92bVRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgICAgIG92bVRhcmdldC5jbGFzc05hbWUgPSBcImM0Zy1zaWRlYm9hcmQgYzRnLW92ZXJ2aWV3bWFwLWNvbnRhaW5lciBjNGctY2xvc2VcIjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLiRvdmVybGF5Y29udGFpbmVyX3N0b3BldmVudC5hcHBlbmQob3ZtVGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBzY29wZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGFkZE92ZXJ2aWV3TWFwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB2YXIgb3ZlcnZpZXdNYXBPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRhcmdldDogY29udHJvbENvbnRhaW5lclRvcExlZnQsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgbWFwQ29udHJvbGxlcjogc2NvcGUubWFwQ29udHJvbGxlcixcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBvdm1UYXJnZXQ6IG92bVRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBsYXllcnM6IFtwcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbcHJveHkuYWN0aXZlQmFzZWxheWVySWRdLmxheWVyXVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGlmIChzY29wZS5vdmVydmlld01hcCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIC8vIHdlIGFyZSByZWxvYWRpbmcgdGhlIG92ZXJ2aWV3IG1hcCwgc28ga2VlcCB0aGUgY29sbGFwc2VkLXByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgb3ZlcnZpZXdNYXBPcHRpb25zLmNvbGxhcHNlZCA9ICFzY29wZS5vdmVydmlld01hcC5pc09wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHNjb3BlLm92ZXJ2aWV3TWFwID0gbmV3IE92ZXJ2aWV3TWFwKG92ZXJ2aWV3TWFwT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBzY29wZS5jb250cm9scy5vdmVydmlld21hcCA9IHNjb3BlLm92ZXJ2aWV3TWFwLmdldE92ZXJ2aWV3TWFwKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBtYXAuYWRkQ29udHJvbChzY29wZS5jb250cm9scy5vdmVydmlld21hcCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIH07XG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIChwcm94eS5iYXNlbGF5ZXJzX2xvYWRlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgYWRkT3ZlcnZpZXdNYXAoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHByb3h5Lmhvb2tfYmFzZWxheWVyX2xvYWRlZC5wdXNoKGFkZE92ZXJ2aWV3TWFwKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyAvLyBhZGQgaG9vayB0byBzeW5jaHJvbml6ZSBvdmVydmlld21hcCB3aXRoIGJhc2VsYXllclxuICAgICAgICAgICAgICAgICAgICAvLyB3aW5kb3cuYzRnTWFwc0hvb2tzLmJhc2VsYXllcl9jaGFuZ2VkID0gd2luZG93LmM0Z01hcHNIb29rcy5iYXNlbGF5ZXJfY2hhbmdlZCB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93LmM0Z01hcHNIb29rcy5iYXNlbGF5ZXJfY2hhbmdlZC5wdXNoKGZ1bmN0aW9uKGJhc2VsYXllcklkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBtYXAucmVtb3ZlQ29udHJvbChzY29wZS5jb250cm9scy5vdmVydmlld21hcCk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBzY29wZS5vdmVydmlld01hcC5yZW1vdmVGcm9tTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBhZGRPdmVydmlld01hcCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJhY2tlbmQtZ2VvcGlja2VyXG4gICAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlciAmJiAobWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJiYWNrZW5kXCIgfHwgbWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJmcm9udGVuZFwiKSkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5nZW9waWNrZXIgPSBuZXcgR2VvUGlja2VyKHtcbiAgICAgICAgICAgICAgICBtYXBDb250YWluZXI6IHRoaXMubWFwQ29udHJvbGxlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmFkZEludGVyYWN0aW9uKHRoaXMuY29udHJvbHMuZ2VvcGlja2VyKTtcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLmdlb3BpY2tlci50eXBlID09PSBcImZyb250ZW5kXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBzdWJzdHJpbmcgaXMgbmVlZGVkIGhlcmUgZm9yIHRha2luZyBvdXQgdGhlICNcbiAgICAgICAgICAgICAgICBpZiAobWFwRGF0YS5nZW9waWNrZXIuaW5wdXRfZ2VvX3ggJiYgbWFwRGF0YS5nZW9waWNrZXIuaW5wdXRfZ2VvX3gpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdlb3hGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hcERhdGEuZ2VvcGlja2VyLmlucHV0X2dlb194LnN1YnN0cmluZygxKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZW95RmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feS5zdWJzdHJpbmcoMSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2VveEZpZWxkICYmIGdlb3lGaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvY0dlb3ggPSBnZW94RmllbGQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9jR2VveSA9IGdlb3lGaWVsZC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NHZW94ICYmIGxvY0dlb3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnVtZXJpemVkID0gW3BhcnNlRmxvYXQobG9jR2VveCwgMTApLCBwYXJzZUZsb2F0KGxvY0dlb3ksIDEwKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtKG51bWVyaXplZCwgZ2V0KCdFUFNHOjQzMjYnKSwgZ2V0KCdFUFNHOjM4NTcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKHRyYW5zZm9ybWVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtYXBEYXRhLmdlb3BpY2tlciAmJiBtYXBEYXRhLmdlb3BpY2tlci50eXBlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmdlb3BpY2tlciA9IG5ldyBHZW9QaWNrZXJHZW9KU09OKHtcbiAgICAgICAgICAgICAgICBtYXBDb250YWluZXI6IHRoaXMubWFwQ29udHJvbGxlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcENvbnRyb2xsZXIubWFwLmFkZEludGVyYWN0aW9uKHRoaXMuY29udHJvbHMuZ2VvcGlja2VyKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLy9jb240Z2lzIGxvZ29cbiAgICAgICAgaWYgKG1hcERhdGEuYXR0cmlidXRpb24uY2ZnX2xvZ28pIHtcbiAgICAgICAgICAgIGxldCBsb2dvTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgIGxvZ29MaW5rLmhyZWYgPSAnaHR0cHM6Ly9jb240Z2lzLm9yZyc7XG4gICAgICAgICAgICBsb2dvTGluay50aXRsZSA9ICdidWlsdCB3aXRoIGNvbjRnaXMnO1xuICAgICAgICAgICAgbG9nb0xpbmsudGFyZ2V0ID0gJ19ibGFuayc7XG4gICAgICAgICAgICBsb2dvTGluay5yZWwgPSAnbm9vcGVuZXIgbm9yZWZlcnJlcic7XG4gICAgICAgICAgICBsb2dvTGluay5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuQVRUUklCVVRJT05fTE9HTztcbiAgICAgICAgICAgIGxldCBsb2dvR3JhcGhpYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICAgICAgbG9nb0dyYXBoaWMuc3JjID0gJ2J1bmRsZXMvY29uNGdpc21hcHMvaW1hZ2VzL2xvZ29fY29uNGdpcy5zdmcnO1xuICAgICAgICAgICAgbG9nb0dyYXBoaWMuYWx0ID0gJ2NvbjRnaXMgbG9nbyc7XG4gICAgICAgICAgICBsb2dvR3JhcGhpYy5oZWlnaHQgPSAnMjRweCc7XG4gICAgICAgICAgICBsb2dvR3JhcGhpYy53aWR0aCA9ICc2N3B4JztcbiAgICAgICAgICAgIGxvZ29MaW5rLmFwcGVuZENoaWxkKGxvZ29HcmFwaGljKTtcbiAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0LmFwcGVuZENoaWxkKGxvZ29MaW5rKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNjYWxlbGluZVxuICAgICAgICBpZiAobWFwRGF0YS5zY2FsZWxpbmUpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuc2NhbGVsaW5lID0gbmV3IFNjYWxlTGluZSh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnNjYWxlbGluZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB6b29tLWxldmVsICYgbW91c2UtcG9zaXRpb25cbiAgICAgICAgaWYgKG1hcERhdGEuem9vbWxldmVsIHx8IG1hcERhdGEubW91c2Vwb3NpdGlvbikge1xuICAgICAgICAgICAgLy8gd3JhcHBlciBmb3Igem9vbS1sZXZlbCBhbmQgbW91c2UtcG9zaXRpb25cbiAgICAgICAgICAgIGxldCBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnRTdWIuY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLkNPTlRST0xfQ09OVEFJTkVSX0JMX1NVQiArICcgJyArIGNzc0NvbnN0YW50cy5PTF9VTlNFTEVDVEFCTEU7XG4gICAgICAgICAgICBqUXVlcnkoY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQpLmFwcGVuZChjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1Yik7XG4gICAgICAgICAgICAvLyBkaXNwbGF5IHpvb20tbGV2ZWxcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLnpvb21sZXZlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHMuem9vbWxldmVsID0gbmV3IFpvb21sZXZlbCh7XG4gICAgICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI6IHRoaXMubWFwQ29udHJvbGxlcixcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBjb250cm9sQ29udGFpbmVyQm90dG9tTGVmdFN1YixcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkSFRNTDogJ04vQSdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtYXAuYWRkQ29udHJvbCh0aGlzLmNvbnRyb2xzLnpvb21sZXZlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkaXNwbGF5IG1vdXNlLXBvc2l0aW9uXG4gICAgICAgICAgICBpZiAobWFwRGF0YS5tb3VzZXBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9scy5tb3VzZXBvc2l0aW9uID0gbmV3IE1vdXNlUG9zaXRpb24oe1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZUZvcm1hdDogdG9TdHJpbmdIRE1TLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbnRyb2xDb250YWluZXJCb3R0b21MZWZ0U3ViLFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWRIVE1MOiAnTi9BJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMubW91c2Vwb3NpdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2hvdyBhdHRyaWJ1dGlvblxuICAgICAgICBpZiAobWFwRGF0YS5hdHRyaWJ1dGlvbi5lbmFibGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9BVFRSSUJVVElPTixcbiAgICAgICAgICAgICAgICBjb2xsYXBzZUxhYmVsOiAnICcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBtYXBEYXRhLmF0dHJpYnV0aW9uLmRpdiA/IG1hcERhdGEuYXR0cmlidXRpb24uZGl2IDogY29udHJvbENvbnRhaW5lckJvdHRvbUxlZnQsXG4gICAgICAgICAgICAgICAgY29sbGFwc2libGU6ICgoIW1hcERhdGEuYXR0cmlidXRpb24uZGl2KSAmJiAoIW1hcERhdGEuYXR0cmlidXRpb24uYWx3YXlzX3Nob3cpKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChtYXBEYXRhLmF0dHJpYnV0aW9uLmRpdikge1xuICAgICAgICAgICAgICAgIGF0dHJPcHRpb25zW1wiY2xhc3NOYW1lXCJdID0gXCJvbC1hdHRyaWJ1dGlvbiBvbC1hdHRyaWJ1dGlvbi1leHQtZGl2XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmF0dHJpYnV0aW9uID0gbmV3IEF0dHJpYnV0aW9uKGF0dHJPcHRpb25zKTtcbiAgICAgICAgICAgIGlmICghbWFwRGF0YS5hdHRyaWJ1dGlvbi5hbHdheXNfc2hvdykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHMuYXR0cmlidXRpb24uc2V0Q29sbGFwc2VkKG1hcERhdGEuYXR0cmlidXRpb24uZGl2ID8gZmFsc2UgOiBtYXBEYXRhLmF0dHJpYnV0aW9uLmNvbGxhcHNlZCA9PT0gJzEnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcC5hZGRDb250cm9sKHRoaXMuY29udHJvbHMuYXR0cmlidXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG5cbi8qKlxuICogIFRoaXMgc2NyaXB0IGltcG9ydHMgYWxsIGRpZmZlcmVudCBsYW5ndWFnZXMgYW5kIGV4cG9ydHMgdGhlIG9uZSB0aGF0IGlzIHZhbGlkIGZvciB0aGUgY29uZmlndXJlZCBsYW5ndWFnZS5cbiAqL1xuaW1wb3J0IHtsYW5nQ29uc3RhbnRzR2VybWFufSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge2xhbmdDb25zdGFudHNFbmdsaXNofSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudC1pMThuLWVuXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMYW5ndWFnZShtYXBEYXRhKSB7XG4gIGlmIChtYXBEYXRhICYmIG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgcmV0dXJuIGxhbmdDb25zdGFudHNHZXJtYW47XG4gIH0gZWxzZSBpZiAobWFwRGF0YSAmJiBtYXBEYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgIHJldHVybiBsYW5nQ29uc3RhbnRzRW5nbGlzaDtcbiAgfSBlbHNlIHtcbiAgICAvLyBmYWxsYmFja1xuICAgIHJldHVybiBsYW5nQ29uc3RhbnRzRW5nbGlzaDtcbiAgfVxufVxuIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG5pbXBvcnQge0RyYXd9IGZyb20gXCJvbC9pbnRlcmFjdGlvblwiO1xuaW1wb3J0IHtGZWF0dXJlfSBmcm9tIFwib2xcIjtcbmltcG9ydCB7UG9pbnR9IGZyb20gXCJvbC9nZW9tXCI7XG5pbXBvcnQge0NpcmNsZSwgRmlsbCwgU3Ryb2tlLCBTdHlsZX0gZnJvbSBcIm9sL3N0eWxlXCI7XG5pbXBvcnQge1ZlY3Rvcn0gZnJvbSBcIm9sL2xheWVyXCI7XG5pbXBvcnQge0dlb0pTT059IGZyb20gXCJvbC9mb3JtYXRcIjtcbmltcG9ydCB7VmVjdG9yIGFzIFZlY3RvclNvdXJjZX0gZnJvbSBcIm9sL3NvdXJjZVwiO1xuaW1wb3J0IHtmcm9tTG9uTGF0LCB0b0xvbkxhdH0gZnJvbSBcIm9sL3Byb2pcIjtcblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgY2xhc3MgR2VvUGlja2VyR2VvSlNPTiBleHRlbmRzIERyYXcge1xuXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBsZXQgbWFwRGF0YSA9IG9wdGlvbnMubWFwQ29udGFpbmVyLmRhdGE7XG4gICAgICAgIGxldCB2ZWN0b3JTb3VyY2UgPSBuZXcgVmVjdG9yU291cmNlKHt9KTtcbiAgICAgICAgbGV0IHZlY3RvckxheWVyID0gbmV3IFZlY3Rvcih7XG4gICAgICAgICAgICBzb3VyY2U6IHZlY3RvclNvdXJjZVxuICAgICAgICB9KTtcbiAgICAgICAgb3B0aW9ucy5tYXBDb250YWluZXIubWFwLmFkZExheWVyKHZlY3RvckxheWVyKTtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgdHlwZTogbWFwRGF0YS5nZW9waWNrZXIudHlwZSxcbiAgICAgICAgICAgIGZyZWVoYW5kOiB0cnVlLFxuICAgICAgICAgICAgLy8gc3R5bGU6IHRoaXMuZ2VvUGlja2VyU3R5bGVGdW5jdGlvbixcbiAgICAgICAgICAgIHNvdXJjZTogdmVjdG9yU291cmNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZlY3RvclNvdXJjZSA9IHZlY3RvclNvdXJjZTtcbiAgICAgICAgdGhpcy4kZmllbGRHZW9KU09OID0galF1ZXJ5KG1hcERhdGEuZ2VvcGlja2VyLmlucHV0X2dlb2pzb24pO1xuICAgICAgICBpZiAodGhpcy4kZmllbGRHZW9KU09OLnZhbCgpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBnZW9qc29uID0gbmV3IEdlb0pTT04oe1xuICAgICAgICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogXCJFUFNHOjQzMjZcIixcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246IFwiRVBTRzozODU3XCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZSA9IGdlb2pzb24ucmVhZEZlYXR1cmUodGhpcy4kZmllbGRHZW9KU09OLnZhbCgpKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZlY3RvclNvdXJjZS5hZGRGZWF0dXJlKGZlYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMub24oJ2RyYXdzdGFydCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy52ZWN0b3JTb3VyY2UuY2xlYXIoKTtcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5vbignZHJhd2VuZCcsIChldmVudCk9PiB7XG4gICAgICAgICAgICBsZXQgZ2VvanNvbiA9IG5ldyBHZW9KU09OKHtcbiAgICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogXCJFUFNHOjQzMjZcIixcbiAgICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogXCJFUFNHOjM4NTdcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgc3RyRmVhdHVyZSA9IGdlb2pzb24ud3JpdGVGZWF0dXJlKGV2ZW50LmZlYXR1cmUpO1xuICAgICAgICAgICAgdGhpcy4kZmllbGRHZW9KU09OLnZhbChzdHJGZWF0dXJlKTtcblxuICAgICAgICB9KVxuICAgIH07XG59IiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG5pbXBvcnQge0ludGVyYWN0aW9ufSBmcm9tIFwib2wvaW50ZXJhY3Rpb25cIjtcbmltcG9ydCB7RmVhdHVyZX0gZnJvbSBcIm9sXCI7XG5pbXBvcnQge1BvaW50fSBmcm9tIFwib2wvZ2VvbVwiO1xuaW1wb3J0IHtDaXJjbGUsIEZpbGwsIFN0cm9rZSwgU3R5bGV9IGZyb20gXCJvbC9zdHlsZVwiO1xuaW1wb3J0IHtWZWN0b3J9IGZyb20gXCJvbC9sYXllclwiO1xuaW1wb3J0IHtWZWN0b3IgYXMgVmVjdG9yU291cmNlfSBmcm9tIFwib2wvc291cmNlXCI7XG5pbXBvcnQge2Zyb21Mb25MYXQsIHRvTG9uTGF0fSBmcm9tIFwib2wvcHJvalwiO1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBjbGFzcyBHZW9QaWNrZXIgZXh0ZW5kcyBJbnRlcmFjdGlvbiB7XG5cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHZhciBtYXBEYXRhLFxuICAgICAgbWFwQ29udGFpbmVyLFxuICAgICAgbGF0LFxuICAgICAgbG9uLFxuICAgICAgbGF0SWR4LFxuICAgICAgbG9uSWR4LFxuICAgICAgbGF0Um5kLFxuICAgICAgbG9uUm5kO1xuXG4gICAgc3VwZXIoe2hhbmRsZUV2ZW50OiBvcHRpb25zLmhhbmRsZUV2ZW50fSk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLm1hcENvbnRhaW5lciB8fCAhdGhpcy5vcHRpb25zLm1hcENvbnRhaW5lci5kYXRhKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSBHZW9QaWNrZXIgbmVlZHMgYSBcIm1hcENvbnRhaW5lclwiIGluIG9yZGVyIHRvIHdvcmsuJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbWFwRGF0YSA9IHRoaXMub3B0aW9ucy5tYXBDb250YWluZXIuZGF0YTtcbiAgICBtYXBDb250YWluZXIgPSB0aGlzLm9wdGlvbnMubWFwQ29udGFpbmVyO1xuICAgIC8vIGNvbmZpZ3VyYXRlIGdlb3BpY2tlclxuICAgIHRoaXMuJGZpZWxkR2VvWCA9IGpRdWVyeShtYXBEYXRhLmdlb3BpY2tlci5pbnB1dF9nZW9feCk7XG4gICAgdGhpcy4kZmllbGRHZW9ZID0galF1ZXJ5KG1hcERhdGEuZ2VvcGlja2VyLmlucHV0X2dlb195KTtcblxuICAgIHRoaXMub3B0aWNMYXllclNvdXJjZSA9IG5ldyBWZWN0b3JTb3VyY2Uoe30pO1xuICAgIHRoaXMub3B0aWNMYXllclZlY3RvciA9IG5ldyBWZWN0b3Ioe1xuICAgICAgc291cmNlOiB0aGlzLm9wdGljTGF5ZXJTb3VyY2UsXG4gICAgICBzdHlsZTogdGhpcy5nZW9QaWNrZXJTdHlsZUZ1bmN0aW9uXG4gICAgfSk7XG4gICAgdGhpcy5vcHRpY0xheWVyRmVhdHVyZSA9IG51bGw7XG5cbiAgICBpZiAodGhpcy4kZmllbGRHZW9YLnZhbCgpICYmIHRoaXMuJGZpZWxkR2VvWS52YWwoKSkge1xuICAgICAgbGF0ID0gdGhpcy4kZmllbGRHZW9ZLnZhbCgpO1xuICAgICAgbG9uID0gdGhpcy4kZmllbGRHZW9YLnZhbCgpO1xuXG4gICAgICBpZiAobWFwRGF0YS5nZW9waWNrZXIuYW5vbnltb3VzKSB7XG4gICAgICAgIHRoaXMuJGZpZWxkR2VvWS5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy4kZmllbGRHZW9YLnJlbW92ZSgpO1xuXG4gICAgICAgIGxhdElkeCA9IGxhdC5pbmRleE9mKCcuJyk7XG4gICAgICAgIGxvbklkeCA9IGxvbi5pbmRleE9mKCcuJyk7XG4gICAgICAgIGxhdCA9IGxhdC5yZXBsYWNlKC9cXEQvZywgXCJcIik7XG4gICAgICAgIGxvbiA9IGxvbi5yZXBsYWNlKC9cXEQvZywgXCJcIik7XG4gICAgICAgIGxhdFJuZCA9IE1hdGgucm91bmQoKE1hdGgucmFuZG9tKCkgKiAoOTk5OTk5OTk5OSAtIDEpKSArIDEpO1xuICAgICAgICBsb25SbmQgPSBNYXRoLnJvdW5kKChNYXRoLnJhbmRvbSgpICogKDk5OTk5OTk5OTkgLSAxKSkgKyAxKTtcbiAgICAgICAgaWYgKGxhdFJuZCA+IDQ5OTk5OTk5OTkpIHtcbiAgICAgICAgICBsYXQgPSBwYXJzZUludChsYXQpIC0gbGF0Um5kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhdCA9IHBhcnNlSW50KGxhdCkgKyBsYXRSbmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvblJuZCA8IDUwMDAwMDAwMDApIHtcbiAgICAgICAgICBsb24gPSBwYXJzZUludChsb24pIC0gbG9uUm5kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvbiA9IHBhcnNlSW50KGxvbikgKyBsb25SbmQ7XG4gICAgICAgIH1cbiAgICAgICAgbGF0ID0gbGF0ICsgXCJcIjtcbiAgICAgICAgbG9uID0gbG9uICsgXCJcIjtcbiAgICAgICAgbGF0ID0gbGF0LnN1YnN0cigwLCBsYXRJZHgpICsgJy4nICsgbGF0LnN1YnN0cihsYXRJZHgsIGxhdC5sZW5ndGggLSBsYXRJZHgpO1xuICAgICAgICBsb24gPSBsb24uc3Vic3RyKDAsIGxvbklkeCkgKyAnLicgKyBsb24uc3Vic3RyKGxvbklkeCwgbG9uLmxlbmd0aCAtIGxvbklkeCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub3B0aWNMYXllckZlYXR1cmUgPSBuZXcgRmVhdHVyZSh7XG4gICAgICAgIGdlb21ldHJ5OiBuZXcgUG9pbnQoZnJvbUxvbkxhdChbcGFyc2VGbG9hdChsb24pLCBwYXJzZUZsb2F0KGxhdCldKSksXG4gICAgICAgIHBpY2tlckNvbG9yOiBbMCwgMTgwLCAxMDAsIDFdLFxuICAgICAgICBhbm9ueW1vdXM6IG1hcERhdGEuZ2VvcGlja2VyLmFub255bW91c1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMub3B0aWNMYXllclNvdXJjZS5hZGRGZWF0dXJlKHRoaXMub3B0aWNMYXllckZlYXR1cmUpO1xuXG4gICAgICBtYXBDb250YWluZXIubWFwLmdldFZpZXcoKS5maXQodGhpcy5vcHRpY0xheWVyU291cmNlLmdldEV4dGVudCgpLCBtYXBDb250YWluZXIubWFwLmdldFNpemUoKSk7XG4gICAgICAvLyBzZXQgem9vbSBzbyB3ZSBjYW4gc2VlIHNvbWUgdGlsZXMgd2l0aG91dCBlcnJvclxuICAgICAgbWFwQ29udGFpbmVyLm1hcC5nZXRWaWV3KCkuc2V0Wm9vbSgxNSk7XG4gICAgfSBlbHNlIGlmIChtYXBEYXRhLmdlb0xvY2F0aW9uICYmIHR5cGVvZiBtYXBEYXRhLmdlb0xvY2F0aW9uLnNldFRyYWNraW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtYXBEYXRhLmdlb0xvY2F0aW9uLnNldFRyYWNraW5nKHRydWUpO1xuICAgIH1cbiAgICBtYXBDb250YWluZXIubWFwLmFkZExheWVyKHRoaXMub3B0aWNMYXllclZlY3Rvcik7XG5cbiAgICAvL1RPRE8gd2VubiBnZW9waWNrZXIuY2xpY2tEaXNhYmxlZCAob2RlciBzbykgZ2VzZXR6dCBpc3QsIHRoaXMub3B0aW9ucy5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCl7fVxuICB9O1xuXG5cbiAgZ2VvUGlja2VyU3R5bGVGdW5jdGlvbihmZWF0dXJlLCBwcm9qZWN0aW9uLCBnZXRJZCkge1xuICAgIHZhciBjb2xvcixcbiAgICAgIHdoaXRlLFxuICAgICAgcmVzdWx0O1xuXG4gICAgaWYgKGdldElkKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgd2hpdGUgPSBbMjU1LCAyNTUsIDI1NSwgMV07XG4gICAgaWYgKGZlYXR1cmUgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nICYmIGZlYXR1cmUuZ2V0KCdwaWNrZXJDb2xvcicpKSB7XG4gICAgICBjb2xvciA9IGZlYXR1cmUuZ2V0KCdwaWNrZXJDb2xvcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2xvciA9IFsyMDAsIDAsIDAsIDAuN107XG4gICAgfVxuXG4gICAgcmVzdWx0ID0gW107XG4gICAgaWYgKGZlYXR1cmUgJiYgdHlwZW9mIGZlYXR1cmUuZ2V0ID09PSAnZnVuY3Rpb24nICYmICFmZWF0dXJlLmdldCgnYW5vbnltb3VzJykpIHtcbiAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICBuZXcgU3R5bGUoe1xuICAgICAgICAgIGltYWdlOiBuZXcgQ2lyY2xlKHtcbiAgICAgICAgICAgIHJhZGl1czogMixcbiAgICAgICAgICAgIGZpbGw6IG5ldyBGaWxsKHtcbiAgICAgICAgICAgICAgY29sb3I6IGNvbG9yXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IFN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZSxcbiAgICAgICAgICAgICAgd2lkdGg6IDJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgekluZGV4OiBJbmZpbml0eVxuICAgICAgICB9KSk7XG4gICAgICByZXN1bHQucHVzaChcbiAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICBpbWFnZTogbmV3IENpcmNsZSh7XG4gICAgICAgICAgICByYWRpdXM6IDIwLFxuICAgICAgICAgICAgc3Ryb2tlOiBuZXcgU3Ryb2tlKHtcbiAgICAgICAgICAgICAgY29sb3I6IHdoaXRlLFxuICAgICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB6SW5kZXg6IEluZmluaXR5XG4gICAgICAgIH0pKTtcbiAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICBuZXcgU3R5bGUoe1xuICAgICAgICAgIGltYWdlOiBuZXcgQ2lyY2xlKHtcbiAgICAgICAgICAgIHJhZGl1czogMjAsXG4gICAgICAgICAgICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgICAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgIHdpZHRoOiAyXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgfSkpO1xuICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgaW1hZ2U6IG5ldyBDaXJjbGUoe1xuICAgICAgICAgICAgcmFkaXVzOiA0MCxcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IFN0cm9rZSh7XG4gICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZSxcbiAgICAgICAgICAgICAgd2lkdGg6IDRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgekluZGV4OiBJbmZpbml0eVxuICAgICAgICB9KSk7XG4gICAgICByZXN1bHQucHVzaChcbiAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICBpbWFnZTogbmV3IENpcmNsZSh7XG4gICAgICAgICAgICByYWRpdXM6IDQwLFxuICAgICAgICAgICAgc3Ryb2tlOiBuZXcgU3Ryb2tlKHtcbiAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB6SW5kZXg6IEluZmluaXR5XG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICByZXN1bHQucHVzaChcbiAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgIGltYWdlOiBuZXcgQ2lyY2xlKHtcbiAgICAgICAgICByYWRpdXM6IDYwLFxuICAgICAgICAgIHN0cm9rZTogbmV3IFN0cm9rZSh7XG4gICAgICAgICAgICBjb2xvcjogd2hpdGUsXG4gICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLFxuICAgICAgICB6SW5kZXg6IEluZmluaXR5XG4gICAgICB9KSk7XG5cbiAgICByZXN1bHQucHVzaChcbiAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgIGltYWdlOiBuZXcgQ2lyY2xlKHtcbiAgICAgICAgICByYWRpdXM6IDYwLFxuICAgICAgICAgIHN0cm9rZTogbmV3IFN0cm9rZSh7XG4gICAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICAgIH0pXG4gICAgICAgIH0pLFxuICAgICAgICB6SW5kZXg6IEluZmluaXR5XG4gICAgICB9KSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaGFuZGxlRXZlbnQobWFwQnJvd3NlckV2ZW50KSB7XG4gICAgaWYgKG1hcEJyb3dzZXJFdmVudC50eXBlID09PSBcInNpbmdsZWNsaWNrXCIpIHtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVDbGlja0V2ZW50ICYmICF0aGlzLm9wdGlvbnMubWFwQ29udGFpbmVyLmRhdGEuZ2VvcGlja2VyLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5waWNrKG1hcEJyb3dzZXJFdmVudC5jb29yZGluYXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHBpY2soY29vcmRpbmF0ZSkge1xuICAgIHZhciBhcnJMYXRMb247XG5cbiAgICBhcnJMYXRMb24gPSB0b0xvbkxhdChjb29yZGluYXRlKTtcblxuICAgIHRoaXMub3B0aWNMYXllckZlYXR1cmUgPSBuZXcgRmVhdHVyZSh7XG4gICAgICBnZW9tZXRyeTogbmV3IFBvaW50KGNvb3JkaW5hdGUpXG4gICAgfSk7XG5cbiAgICB0aGlzLm9wdGljTGF5ZXJTb3VyY2UuY2xlYXIoKTtcbiAgICB0aGlzLm9wdGljTGF5ZXJTb3VyY2UuYWRkRmVhdHVyZSh0aGlzLm9wdGljTGF5ZXJGZWF0dXJlKTtcblxuICAgIHRoaXMuJGZpZWxkR2VvWC52YWwoYXJyTGF0TG9uWzBdKTtcbiAgICB0aGlzLiRmaWVsZEdlb1kudmFsKGFyckxhdExvblsxXSk7XG4gICAgdGhpcy4kZmllbGRHZW9YLmNoYW5nZSgpO1xuICAgIHRoaXMuJGZpZWxkR2VvWS5jaGFuZ2UoKTtcblxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0iLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cblxuaW1wb3J0IHtUb29sdGlwUG9wVXB9IGZyb20gXCIuL2M0Zy1tYXBzLW1pc2MtdG9vbHRpcHBvcHVwXCI7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHt1bkJ5S2V5fSBmcm9tIFwib2wvT2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5cbid1c2Ugc3RyaWN0JztcbmV4cG9ydCBjbGFzcyBNYXBIb3ZlciB7XG5cbiAgLyoqXG4gICAqIEBUT0RPXG4gICAqIFtNYXBIb3ZlciBkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29wdGlvbnMgQ29udHJvbCBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucyA9IGpRdWVyeS5leHRlbmQoe1xuICAgICAgLy8gbWFwQ29udHJvbGxlcjogdW5kZWZpbmVkLFxuICAgICAgYWN0aXZhdGU6IHRydWVcbiAgICB9LCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlcikge1xuICAgICAgY29uc29sZS53YXJuKCdNYXBIb3ZlciBuZWVkcyBhIG1hcENvbnRyb2xsZXInKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBzZXQgbmVlZGVkIHZhcnNcbiAgICB0aGlzLmxpc3RlbmVyS2V5ID0gZmFsc2U7XG4gICAgdGhpcy5tYXAgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXA7XG4gICAgdGhpcy5sYXN0RmVhdHVyZVN0eWxlID0gbnVsbDtcbiAgICB0aGlzLmxhc3RIb3ZlcmVkRmVhdHVyZSA9IG51bGw7XG4gICAgLy8gY3JlYXRlIHRvb2x0aXBcbiAgICB0aGlzLmhvdmVyVG9vbHRpcCA9IG5ldyBUb29sdGlwUG9wVXAoe1xuICAgICAgbWFwOiB0aGlzLm1hcCxcbiAgICAgIG9mZnNldDogWzEwLCAxMF0sXG4gICAgICBvcmllbnRhdGlvbiA6IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEudG9vbHRpcE9yaWVudGF0aW9uIHx8IFwiYm90dG9tLWxlZnRcIixcbiAgICAgIGhvcml6b250YWw6IHRydWUsXG4gICAgICBjbG9zZWFibGU6IGZhbHNlXG4gICAgfSk7XG4gICAgdGhpcy5ob3ZlclRvb2x0aXAuaGlkZSgpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hY3RpdmF0ZSkge1xuICAgICAgdGhpcy5hY3RpdmF0ZSgpO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBUT0RPOiBbYWN0aXZhdGUgZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBhY3RpdmF0ZSgpIHtcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJLZXkpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJLZXkgPSB0aGlzLm1hcC5vbigncG9pbnRlcm1vdmUnLCB0aGlzLmdldEhvdmVyRnVuY3Rpb24oKSwgdGhpcyk7XG4gICAgICAvL3RoaXMubWFwLm9uKCdwb2ludGVybW92ZScsIHRoaXMuY2hhbmdlRmVhdHVyZVN0eWxlcygpLCB0aGlzKTtcbiAgICB9XG4gIH0gLy8gZW5kIG9mIFwiYWN0aXZhdGUoKVwiXG5cblxuICAvKipcbiAgICogQFRPRE86IFtkZWFjdGl2YXRlIGRlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZGVhY3RpdmF0ZSgpIHtcbiAgICBpZiAodGhpcy5saXN0ZW5lcktleSkge1xuICAgICAgdW5CeUtleSh0aGlzLmxpc3RlbmVyS2V5KTtcbiAgICAgIHRoaXMubGlzdGVuZXJLZXkgPSBmYWxzZTtcbiAgICB9XG4gIH0gLy8gZW5kIG9mIFwiZGVhY3RpdmF0ZSgpXCJcblxuXG4gIC8qKlxuICAgKiBAVE9ETzogW2lzQWN0aXZlIGRlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgaXNBY3RpdmUoKSB7XG4gICAgaWYgKHRoaXMubGlzdGVuZXJLZXkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gZW5kIG9mIFwiZ2V0U3RhdGUoKVwiXG5cblxuICAvKipcbiAgICogQFRPRE86IFtnZXRIb3ZlckZ1bmN0aW9uIGRlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZ2V0SG92ZXJGdW5jdGlvbigpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgdmFyIGhvdmVyZWQsXG4gICAgICAgIGNsdXN0ZXJlZCxcbiAgICAgICAgdG9vbHRpcENvbnRlbnQsXG4gICAgICAgIHRvb2x0aXBIZWxwZXIsXG4gICAgICAgIGZlYXR1cmVzLFxuICAgICAgICB0b29sdGlwTGVuZ3RoLFxuICAgICAgICByZXNvbHV0aW9uLFxuICAgICAgICBjYW52YXMsXG4gICAgICAgIG1hcERhdGEgPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLFxuICAgICAgICBwcm94eSA9IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5O1xuXG4gICAgICBjbHVzdGVyZWQgPSBmYWxzZTtcbiAgICAgIGhvdmVyZWQgPSBzZWxmLm1hcC5mb3JFYWNoRmVhdHVyZUF0UGl4ZWwoZXZlbnQucGl4ZWwsXG4gICAgICAgIChmZWF0dXJlLCBsYXllcikgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmZWF0dXJlOiBmZWF0dXJlLFxuICAgICAgICAgICAgbGF5ZXI6IGxheWVyXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICByZXNvbHV0aW9uID0gc2VsZi5tYXAuZ2V0VmlldygpLmdldFJlc29sdXRpb24oKTtcblxuICAgICAgaWYgKCFob3ZlcmVkKSB7XG4gICAgICAgIHNlbGYuaG92ZXJUb29sdGlwLmhpZGUoKTtcbiAgICAgICAgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5vbC12aWV3cG9ydFwiKTtcbiAgICAgICAgalF1ZXJ5KGNhbnZhcykuY3NzKCdjdXJzb3InLCAnZGVmYXVsdCcpO1xuICAgICAgICBpZiAobWFwRGF0YS5ob3Zlcl9wb3B1cHMgPT09ICcxJyAmJiBtYXBEYXRhLmhvdmVyX3BvcHVwc19zdGF5ICE9ICcxJykge1xuICAgICAgICAgIHdpbmRvdy5jNGdNYXBzUG9wdXAuJHBvcHVwLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlICYmIHNlbGYubGFzdEZlYXR1cmVTdHlsZSkge1xuICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlLnNldFN0eWxlKGZhbHNlKTtcbiAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG5cbiAgICAgIGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIub2wtdmlld3BvcnRcIik7XG4gICAgICBqUXVlcnkoY2FudmFzKS5jc3MoJ2N1cnNvcicsICdwb2ludGVyJyk7XG5cbiAgICAgIGlmIChob3ZlcmVkLmZlYXR1cmUgJiYgdHlwZW9mIGhvdmVyZWQuZmVhdHVyZS5nZXQgPT09ICdmdW5jdGlvbicgJiYgaG92ZXJlZC5mZWF0dXJlLmdldCgnZmVhdHVyZXMnKSkge1xuICAgICAgICBpZiAoaG92ZXJlZC5mZWF0dXJlLmdldCgnZmVhdHVyZXMnKVsxXSkge1xuICAgICAgICAgIGNsdXN0ZXJlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaG92ZXJlZC5mZWF0dXJlID0gaG92ZXJlZC5mZWF0dXJlLmdldCgnZmVhdHVyZXMnKVswXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGhvdmVyZWQuZmVhdHVyZS5nZXRHZW9tZXRyeSgpICYmIGhvdmVyZWQuZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldFR5cGUoKSA9PT0gJ0xpbmVTdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfbG9jYXRpb25cIikgfHwgKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlICYmIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlLmdldChcImhvdmVyX2xvY2F0aW9uXCIpKSkge1xuICAgICAgICBpZiAoc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUgJiYgaG92ZXJlZC5mZWF0dXJlID09PSBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vc2V0IGJhY2sgc3R5bGVzIHdoZW4gdGhlIGZlYXR1cmVzIGFyZSBub3QgaG92ZXJlZCBhbnltb3JlXG4gICAgICAgIGlmIChzZWxmLmxhc3RGZWF0dXJlU3R5bGUpIHtcbiAgICAgICAgICBpZiAoc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUpIHtcbiAgICAgICAgICAgIGlmIChob3ZlcmVkLmZlYXR1cmUgIT09IHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlKSB7XG4gICAgICAgICAgICAgIGlmIChzZWxmLmxhc3RGZWF0dXJlU3R5bGUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZS5zZXRTdHlsZShzZWxmLmxhc3RGZWF0dXJlU3R5bGUpO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJDaGFuZ2VkIGJhY2sgZmVhdHVyZSBzdHlsZVwiKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxmLmxhc3RMYXllclN0eWxlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUuc2V0U3R5bGUoc2VsZi5sYXN0TGF5ZXJTdHlsZSk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIkNoYW5nZWQgYmFjayBsYXllci1mZWF0dXJlIHN0eWxlXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoaG92ZXJlZC5mZWF0dXJlICYmIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbiAmJlxuICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGVGdW5jdGlvbigpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUgPSBob3ZlcmVkLmZlYXR1cmU7XG5cbiAgICAgICAgICBpZiAoIShzZWxmLmxhc3RGZWF0dXJlU3R5bGUgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0U3R5bGUoKSkpIHtcbiAgICAgICAgICAgIHNlbGYubGFzdExheWVyU3R5bGUgPSBob3ZlcmVkLmxheWVyLmdldFN0eWxlKCk7XG4gICAgICAgICAgICBzZWxmLmxhc3RGZWF0dXJlU3R5bGUgPSBzZWxmLmxhc3RMYXllclN0eWxlKHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvL1RPRE8gZ2V0IG9uaG92ZXIgc3R5bGUgZnJvbSBkYiAodmxsdCBzY2hvbiBpbiBwcm94eSBkcmluPylcbiAgICAgICAgICBpZiAoaG92ZXJlZC5mZWF0dXJlLmdldCgnaG92ZXJfc3R5bGUnKSAmJiBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldChcImhvdmVyX3N0eWxlXCIpXSkge1xuICAgICAgICAgICAgaWYgKHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildLmZuU3R5bGVGdW5jdGlvbikge1xuICAgICAgICAgICAgICBob3ZlcmVkLmZlYXR1cmUuc2V0U3R5bGUoRnVuY3Rpb24oXCJmZWF0dXJlXCIsIFwiZGF0YVwiLCBcIm1hcFwiLCBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5mZWF0dXJlLmdldChcImhvdmVyX3N0eWxlXCIpXS5mblN0eWxlRnVuY3Rpb24pKGhvdmVyZWQuZmVhdHVyZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGxldCBzdHlsZSA9IHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildLnN0eWxlKGhvdmVyZWQuZmVhdHVyZSk7XG4gICAgICAgICAgICAgIGhvdmVyZWQuZmVhdHVyZS5zZXRTdHlsZShzdHlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaG92ZXJlZC5sYXllciAmJiB0eXBlb2YgaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uICYmXG4gICAgICAgICAgdHlwZW9mIGhvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgaWYgKGhvdmVyZWQuZmVhdHVyZSkge1xuICAgICAgICAgICAgc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUgPSBob3ZlcmVkLmZlYXR1cmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUgPSBob3ZlcmVkLmxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKClbMF07XG4gICAgICAgICAgICBzZWxmLmxhc3RIb3ZlcmVkRmVhdHVyZSA9IHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlLmdldCgnZmVhdHVyZXMnKVswXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLmxhc3RMYXllclN0eWxlID0gaG92ZXJlZC5sYXllci5nZXRTdHlsZSgpO1xuICAgICAgICAgIHNlbGYubGFzdEZlYXR1cmVTdHlsZSA9IHNlbGYubGFzdExheWVyU3R5bGUoc2VsZi5sYXN0SG92ZXJlZEZlYXR1cmUpO1xuICAgICAgICAgIGlmIChob3ZlcmVkLmZlYXR1cmUuZ2V0KCdob3Zlcl9zdHlsZScpKSB7XG4gICAgICAgICAgICBpZiAoIXByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildKSB7XG4gICAgICAgICAgICAgIHZhciBhcnJJZHMgPSBbXTtcbiAgICAgICAgICAgICAgYXJySWRzLnB1c2goaG92ZXJlZC5mZWF0dXJlLmdldChcImhvdmVyX3N0eWxlXCIpKTtcbiAgICAgICAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIubG9hZExvY2F0aW9uU3R5bGVzKGFycklkcyk7XG4gICAgICAgICAgICAgIHNlbGYubGFzdEhvdmVyZWRGZWF0dXJlID0gbnVsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKV0uZm5TdHlsZUZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgIGhvdmVyZWQuZmVhdHVyZS5zZXRTdHlsZShGdW5jdGlvbihcImZlYXR1cmVcIiwgXCJkYXRhXCIsIFwibWFwXCIsIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KFwiaG92ZXJfc3R5bGVcIildLmZuU3R5bGVGdW5jdGlvbikoaG92ZXJlZC5mZWF0dXJlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgbGV0IHN0eWxlID0gcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoXCJob3Zlcl9zdHlsZVwiKV0uc3R5bGUoaG92ZXJlZC5mZWF0dXJlKTtcbiAgICAgICAgICAgICAgaG92ZXJlZC5mZWF0dXJlLnNldFN0eWxlKHN0eWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaG92ZXJlZCAmJiBob3ZlcmVkLmZlYXR1cmUgJiYgaG92ZXJlZC5mZWF0dXJlLmdldCgnc3R5bGVVcmwnKSkge1xuICAgICAgICAvL2lmIHRoaXMgcHJvcGVydHkgaXMgc2V0LCB3ZSBoYXZlIGEgZmVhdHVyZSB0aGF0IGhhcyBub25lIG9mIG91ciBzdHlsZXMgPT4gbm8gdG9vbHRpcFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBjYXRjaCB0aGUgY2FzZSB0aGUgbGF5ZXIgaXMgYSBiYXNlbGF5ZXIgKHZlY3RvciB0aWxlcylcbiAgICAgIGlmIChob3ZlcmVkICYmIGhvdmVyZWQubGF5ZXIgJiYgaG92ZXJlZC5sYXllci50eXBlID09PSBcIlZFQ1RPUl9USUxFXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBzZXQgaG92ZXIgdG9vbHRpcHNcbiAgICAgIHRvb2x0aXBDb250ZW50ID0gZmFsc2U7XG4gICAgICBpZiAoIWNsdXN0ZXJlZCAmJiBob3ZlcmVkLmZlYXR1cmUgJiYgdHlwZW9mIGhvdmVyZWQuZmVhdHVyZS5nZXQgPT09ICdmdW5jdGlvbicgJiYgKGhvdmVyZWQuZmVhdHVyZS5nZXQoJ3Rvb2x0aXAnKSB8fCBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdncmFwaGljVGl0bGUnKSkpIHtcbiAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0KCd0b29sdGlwJyk7XG4gICAgICAgIGlmICghdG9vbHRpcENvbnRlbnQpIHtcbiAgICAgICAgICB0b29sdGlwQ29udGVudCA9IGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2dyYXBoaWNUaXRsZScpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0b29sdGlwQ29udGVudCA9PT0gJ29iamVjdCcgJiYgdG9vbHRpcENvbnRlbnQuZWxlbWVudCAmJiB0b29sdGlwQ29udGVudC5lbGVtZW50LmNoaWxkTm9kZXNbMV0pIHtcbiAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHRvb2x0aXBDb250ZW50LmVsZW1lbnQuY2hpbGROb2Rlc1sxXS5pbm5lckhUTUw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQFRPRE86IENoZWNrICYgZml4XG4gICAgICB9IGVsc2UgaWYgKGhvdmVyZWQuZmVhdHVyZSAmJiB0eXBlb2YgaG92ZXJlZC5mZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24gJiZcbiAgICAgICAgaG92ZXJlZC5mZWF0dXJlLmdldCgnbG9jc3R5bGUnKSAmJlxuICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXMgJiZcbiAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoJ2xvY3N0eWxlJyldICYmXG4gICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmZlYXR1cmUuZ2V0KCdsb2NzdHlsZScpXS50b29sdGlwKSB7XG4gICAgICAgIHRvb2x0aXBDb250ZW50ID0gcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2hvdmVyZWQuZmVhdHVyZS5nZXQoJ2xvY3N0eWxlJyldLnRvb2x0aXA7XG4gICAgICAgIC8vIEBUT0RPOiBDaGVja1xuICAgICAgfSBlbHNlIGlmIChob3ZlcmVkLmxheWVyICYmIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24gJiZcbiAgICAgICAgdHlwZW9mIGhvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgcHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzICYmXG4gICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSgpXSAmJlxuICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkoKV0udG9vbHRpcCkge1xuICAgICAgICB0b29sdGlwQ29udGVudCA9IHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKSgpXS50b29sdGlwO1xuICAgICAgfSBlbHNlIGlmIChob3ZlcmVkLmxheWVyICYmXG4gICAgICAgIHR5cGVvZiBob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgdHlwZW9mIGhvdmVyZWQubGF5ZXIuZ2V0U3R5bGVGdW5jdGlvbigpID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlcyAmJlxuICAgICAgICBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbaG92ZXJlZC5sYXllci5nZXRTdHlsZUZ1bmN0aW9uKCkobnVsbCwgbnVsbCwgMSldICYmXG4gICAgICAgIHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKShudWxsLCBudWxsLCAxKV0udG9vbHRpcCkge1xuICAgICAgICB0b29sdGlwQ29udGVudCA9IHByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tob3ZlcmVkLmxheWVyLmdldFN0eWxlRnVuY3Rpb24oKShudWxsLCBudWxsLCAxKV0udG9vbHRpcDtcbiAgICAgIH0gZWxzZSBpZiAoaG92ZXJlZC5sYXllciAmJiBob3ZlcmVkLmxheWVyLnRvb2x0aXApIHtcbiAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBob3ZlcmVkLmxheWVyLnRvb2x0aXA7XG4gICAgICB9XG4gICAgICBpZiAoY2x1c3RlcmVkICYmIGhvdmVyZWQuZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJykpIHtcbiAgICAgICAgZmVhdHVyZXMgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpO1xuICAgICAgICBpZiAoZmVhdHVyZXNbMF0uZ2V0KCd0b29sdGlwJykgJiYgZmVhdHVyZXNbMF0uZ2V0KCd0b29sdGlwX2xlbmd0aCcpKSB7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBmZWF0dXJlc1swXS5nZXQoJ3Rvb2x0aXAnKTtcbiAgICAgICAgICB0b29sdGlwTGVuZ3RoID0gcGFyc2VJbnQoZmVhdHVyZXNbMF0uZ2V0KCd0b29sdGlwX2xlbmd0aCcpKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJykgJiYgZmVhdHVyZXNbaV0uZ2V0KCd0b29sdGlwJykgIT0gJycpIHtcbiAgICAgICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSB0b29sdGlwQ29udGVudCArICcsICcgKyBmZWF0dXJlc1tpXS5nZXQoJ3Rvb2x0aXAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRvb2x0aXBDb250ZW50Lmxlbmd0aCA+IHRvb2x0aXBMZW5ndGggKyAzKSB7XG4gICAgICAgICAgICBpZiAodG9vbHRpcENvbnRlbnQgPSB0b29sdGlwQ29udGVudC5zbGljZSgwLCB0b29sdGlwTGVuZ3RoKSkge1xuICAgICAgICAgICAgICB0b29sdGlwQ29udGVudCA9IHRvb2x0aXBDb250ZW50ICsgJy4uLic7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaG92ZXJlZC5sYXllci50b29sdGlwICYmIGhvdmVyZWQubGF5ZXIudG9vbHRpcF9sZW5ndGgpIHtcbiAgICAgICAgICB0b29sdGlwSGVscGVyID0gdG9vbHRpcENvbnRlbnQ7XG4gICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSAnJztcbiAgICAgICAgICB0b29sdGlwTGVuZ3RoID0gcGFyc2VJbnQoaG92ZXJlZC5sYXllci50b29sdGlwX2xlbmd0aCk7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2luZ2xlVG9vbHRpcCA9IHV0aWxzLnJlcGxhY2VBbGxQbGFjZWhvbGRlcnModG9vbHRpcEhlbHBlciwgZmVhdHVyZXNbaV0sIGhvdmVyZWQubGF5ZXIsIG1hcERhdGEubGFuZyk7XG4gICAgICAgICAgICBpZiAoc2luZ2xlVG9vbHRpcCAhPSAnJykge1xuICAgICAgICAgICAgICBpZiAodG9vbHRpcENvbnRlbnQgPT0gJycpIHRvb2x0aXBDb250ZW50ID0gc2luZ2xlVG9vbHRpcDtcbiAgICAgICAgICAgICAgZWxzZSB0b29sdGlwQ29udGVudCA9IHRvb2x0aXBDb250ZW50ICsgJywgJyArIHNpbmdsZVRvb2x0aXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0b29sdGlwQ29udGVudC5sZW5ndGggPiB0b29sdGlwTGVuZ3RoICsgMykge1xuICAgICAgICAgICAgaWYgKHRvb2x0aXBDb250ZW50ID0gdG9vbHRpcENvbnRlbnQuc2xpY2UoMCwgdG9vbHRpcExlbmd0aCkpIHtcbiAgICAgICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSB0b29sdGlwQ29udGVudCArICcuLi4nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgaWYgKHRvb2x0aXBDb250ZW50KSB7XG4gICAgICAgIHRvb2x0aXBDb250ZW50ID0gdXRpbHMuZGVjb2RlR2VvSnNvblByb3BlcnR5KHRvb2x0aXBDb250ZW50KTtcblxuICAgICAgICAvLyByZXBsYWNlIHBsYWNlaG9sZGVycyBpZiBwb3NzaWJsZVxuICAgICAgICBpZiAoaG92ZXJlZC5mZWF0dXJlLmdldCgnZmVhdHVyZXMnKSkge1xuXG5cbiAgICAgICAgfVxuICAgICAgICB0b29sdGlwQ29udGVudCA9IHV0aWxzLnJlcGxhY2VBbGxQbGFjZWhvbGRlcnModG9vbHRpcENvbnRlbnQsIGhvdmVyZWQuZmVhdHVyZSwgaG92ZXJlZC5sYXllciwgbWFwRGF0YS5sYW5nKTtcblxuXG4gICAgICAgIGlmICh0b29sdGlwQ29udGVudC50cmltKCkpIHtcbiAgICAgICAgICAvLyBwb3B1cCBjb25maWdcbiAgICAgICAgICBzZWxmLmhvdmVyVG9vbHRpcC5zZXRQb3NpdGlvbihldmVudC5jb29yZGluYXRlKTtcbiAgICAgICAgICBzZWxmLmhvdmVyVG9vbHRpcC5zZXRDb250ZW50KHRvb2x0aXBDb250ZW50KTtcbiAgICAgICAgICBzZWxmLmhvdmVyVG9vbHRpcC5zaG93KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5ob3ZlclRvb2x0aXAuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLmhvdmVyVG9vbHRpcC5oaWRlKCk7XG4gICAgICB9XG4gICAgICBpZiAobWFwRGF0YS5ob3Zlcl9wb3B1cHMgPT09ICcxJyAmJiAhY2x1c3RlcmVkICYmIGhvdmVyZWQuZmVhdHVyZSkge1xuICAgICAgICB2YXIgcG9wdXBJbmZvcyA9IHt9O1xuXG4gICAgICAgIGlmIChob3ZlcmVkLmZlYXR1cmUuZ2V0KCdwb3B1cCcpKSB7XG4gICAgICAgICAgcG9wdXBJbmZvcyA9IGhvdmVyZWQuZmVhdHVyZS5nZXQoJ3BvcHVwJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaG92ZXJlZC5mZWF0dXJlLmdldCgnbG9jX2xpbmt1cmwnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChob3ZlcmVkLmxheWVyICYmIGhvdmVyZWQubGF5ZXIucG9wdXApIHtcbiAgICAgICAgICBwb3B1cEluZm9zID0gaG92ZXJlZC5sYXllci5wb3B1cDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvb3JkID0gaG92ZXJlZC5mZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgaWYgKCFjb29yZCB8fCAoY29vcmQgJiYgY29vcmRbMF0gJiYgY29vcmRbMF0ubGVuZ3RoKSkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBob3ZlcmVkLmZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRFeHRlbnQoKTtcbiAgICAgICAgICBjb29yZCA9IHNlbGYubWFwLmdldENvb3JkaW5hdGVGcm9tUGl4ZWwoZXZlbnQucGl4ZWwpO1xuICAgICAgICAgIGNvb3JkID0gWyhleHRlbnRbMF0gKyBleHRlbnRbMl0pIC8gMiwgKGV4dGVudFsxXSArIGV4dGVudFszXSkgLyAyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5jNGdNYXBzUG9wdXAucG9wdXAuc2V0UG9zaXRpb24oY29vcmQpO1xuXG4gICAgICAgIGlmIChwb3B1cEluZm9zLmNvbnRlbnQpIHtcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5wb3B1cENvbnRyb2xsZXIuYWRkUG9wVXAocG9wdXBJbmZvcy5jb250ZW50KTtcbiAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIucHJveHkubWFwRGF0YS5wb3B1cEhhbmRsaW5nICE9PSAnMycpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jNGdNYXBzUG9wdXAuJGNvbnRlbnQuaHRtbCgnJyk7XG4gICAgICAgICAgICB3aW5kb3cuYzRnTWFwc1BvcHVwLiRwb3B1cC5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuTE9BRElORyk7XG4gICAgICAgICAgICB3aW5kb3cuYzRnTWFwc1BvcHVwLnNwaW5uZXIuc2hvdygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwb3B1cEluZm9zLmFzeW5jID09PSBmYWxzZSB8fCBwb3B1cEluZm9zLmFzeW5jID09ICcwJykge1xuICAgICAgICAgICAgbGV0IG9ialBvcHVwID0ge307XG4gICAgICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mb3M7XG4gICAgICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gaG92ZXJlZC5mZWF0dXJlO1xuICAgICAgICAgICAgb2JqUG9wdXAubGF5ZXIgPSBob3ZlcmVkLmxheWVyO1xuICAgICAgICAgICAgLy8gQ2FsbCB0aGUgcG9wdXAgaG9vayBmb3IgcGx1Z2luIHNwZWNpZmljIHBvcHVwIGNvbnRlbnRcbiAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCwge3BvcHVwOiBvYmpQb3B1cCwgbWFwQ29udHJvbGxlcjogc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXJ9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5LnBvcHVwQ29udHJvbGxlci5zZXRQb3B1cChvYmpQb3B1cCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICB1cmw6IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5LmFwaV9pbmZvd2luZG93X3VybCArICcvJyArIHBvcHVwSW5mb3MuY29udGVudFxuICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHZhciBwb3B1cEluZm8gPSB7XG4gICAgICAgICAgICAgICAgYXN5bmM6IHBvcHVwSW5mb3MuYXN5bmMsXG4gICAgICAgICAgICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgICAgICAgICAgIHBvcHVwOiBwb3B1cEluZm9zLnBvcHVwLFxuICAgICAgICAgICAgICAgIHJvdXRpbmdfbGluazogcG9wdXBJbmZvcy5yb3V0aW5nX2xpbmtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBsZXQgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm87XG4gICAgICAgICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBob3ZlcmVkLmZlYXR1cmU7XG4gICAgICAgICAgICAgIG9ialBvcHVwLmxheWVyID0gaG92ZXJlZC5sYXllcjtcblxuICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBwb3B1cCBob29rIGZvciBwbHVnaW4gc3BlY2lmaWMgcG9wdXAgY29udGVudFxuICAgICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCwge3BvcHVwOiBvYmpQb3B1cCwgbWFwQ29udHJvbGxlcjogc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXJ9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5wb3B1cENvbnRyb2xsZXIuc2V0UG9wdXAob2JqUG9wdXApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5wcm94eS5tYXBEYXRhLnBvcHVwSGFuZGxpbmcgIT09ICczJykge1xuICAgICAgICAgICAgd2luZG93LmM0Z01hcHNQb3B1cC4kcG9wdXAucmVtb3ZlQ2xhc3MoY3NzQ29uc3RhbnRzLkFDVElWRSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLnByb3h5LnBvcHVwQ29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICB9O1xuICB9IC8vIGVuZCBvZiBcImdldEhvdmVyRnVuY3Rpb24oKVwiXG5cbiAgY2hhbmdlRmVhdHVyZVN0eWxlcygpIHtcbiAgICAvL1RPRE86IGNoYW5nZSBzdHlsZSBvZiBmZWF0dXJlcyB3aGljaCBhcmUgaG92ZXJlZCBhbmQgaGF2ZSB0aGUgb3B0aW9uIHRvIGNoYW5nZSBzdHlsZSBvbiBob3ZlciBlbmFibGVkXG4gIH1cblxuXG59XG4iLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cblxuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbnN0YW50XCI7XG5cbid1c2Ugc3RyaWN0JztcbmV4cG9ydCBjbGFzcyBTcGlubmVyIHtcblxuICAvKipcbiAgICogQFRPRE9cbiAgICogW1NwaW5uZXIgZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9vcHRpb25zIENvbnRyb2wgb3B0aW9ucy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdF9vcHRpb25zKSB7XG5cbiAgICB2YXIgb3B0aW9ucyxcbiAgICAgIHRhcmdldCxcbiAgICAgIHNwaW5uZXJTcGFuO1xuXG4gICAgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXG4gICAgb3B0aW9ucyA9IGpRdWVyeS5leHRlbmQoe1xuICAgICAgY2xhc3NOYW1lOiAnJyxcbiAgICAgIHRhcmdldDogJy4nICsgY3NzQ29uc3RhbnRzLk9MX1ZJRVdQT1JUXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICBpZiAob3B0aW9ucy5jbGFzc05hbWUpIHtcbiAgICAgIG9wdGlvbnMuY2xhc3NOYW1lID0gJyAnICsgb3B0aW9ucy5jbGFzc05hbWU7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5TUElOTkVSICsgb3B0aW9ucy5jbGFzc05hbWUgKyAnICcgKyBjc3NDb25zdGFudHMuSElERTtcbiAgICBqUXVlcnkob3B0aW9ucy50YXJnZXQpLmFwcGVuZCh0aGlzLmVsZW1lbnQpO1xuXG4gICAgc3Bpbm5lclNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgc3Bpbm5lclNwYW4uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyAnICcgKyBjc3NDb25zdGFudHMuQU5JTUFUSU9OX1NQSU47XG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHNwaW5uZXJTcGFuKTtcblxuICAgIHRoaXMuYWRkaXRpb25hbEFjdGl2YXRpb25Db3VudGVyID0gMDtcblxuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAoalF1ZXJ5KHRoaXMuZWxlbWVudCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkhJREUpKSB7XG4gICAgICBqUXVlcnkodGhpcy5lbGVtZW50KS5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuSElERSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkaXRpb25hbEFjdGl2YXRpb25Db3VudGVyICs9IDE7XG4gICAgfVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAoalF1ZXJ5KHRoaXMuZWxlbWVudCkuaGFzQ2xhc3MoY3NzQ29uc3RhbnRzLkhJREUpKSB7XG4gICAgICAvL2NvbnNvbGUud2FybignU3Bpbm5lciBpcyBhbHJlYWR5IGhpZGRlbi4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuYWRkaXRpb25hbEFjdGl2YXRpb25Db3VudGVyID09PSAwKSB7XG4gICAgICAgIGpRdWVyeSh0aGlzLmVsZW1lbnQpLmFkZENsYXNzKGNzc0NvbnN0YW50cy5ISURFKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWRkaXRpb25hbEFjdGl2YXRpb25Db3VudGVyIC09IDE7XG4gICAgICB9XG4gICAgfVxuICB9XG59IiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG5cbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtPdmVybGF5fSBmcm9tIFwib2xcIjtcblxuJ3VzZSBzdHJpY3QnO1xuZXhwb3J0IGNsYXNzIFRvb2x0aXBQb3BVcCB7XG5cblxuICAvKipcbiAgICogQFRPRE9cbiAgICogW1Rvb2x0aXBQb3BVcCBkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29wdGlvbnMgQ29udHJvbCBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IgKG9wdF9vcHRpb25zKSB7XG5cbiAgICB2YXIgc2VsZixcbiAgICAgIGFkZENsYXNzTmFtZSxcbiAgICAgIGNsb3NlQnV0dG9uO1xuXG4gICAgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0X29wdGlvbnMgfHwge307XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHtcbiAgICAgIC8vIGNsYXNzTmFtZTogJydcbiAgICAgIC8vIGNsb3NlRnVuY3Rpb246IG51bGxcbiAgICAgIC8vIG1hcDogbnVsbFxuICAgICAgaG9yaXpvbnRhbDogZmFsc2UsXG4gICAgICBjbG9zZWFibGU6IGZhbHNlLFxuICAgICAgb2Zmc2V0OiBbMSwgLTFdLFxuICAgICAgcG9zaXRpb246IFswLCAwXVxuICAgIH0sIHRoaXMub3B0aW9ucyk7XG5cbiAgICAvLyBwcmVwYXJlIGFkZGl0aW9uYWwgY2xhc3Nlc1xuICAgIGFkZENsYXNzTmFtZSA9ICcnO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xhc3NOYW1lKSB7XG4gICAgICBhZGRDbGFzc05hbWUgPSAnICcgKyB0aGlzLm9wdGlvbnMuY2xhc3NOYW1lO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmhvcml6b250YWwpIHtcbiAgICAgIGFkZENsYXNzTmFtZSArPSAnICcgKyBjc3NDb25zdGFudHMuSE9SSVpPTlRBTDtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZWFibGUpIHtcbiAgICAgIGFkZENsYXNzTmFtZSArPSAnICcgKyBjc3NDb25zdGFudHMuQ0xPU0VBQkxFO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuVE9PTFRJUF9QT1BVUCArIGFkZENsYXNzTmFtZTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VhYmxlKSB7XG4gICAgICBjbG9zZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgY2xvc2VCdXR0b24uY2xhc3NOYW1lID0gY3NzQ29uc3RhbnRzLklDT04gKyAnICcgKyBjc3NDb25zdGFudHMuUE9QVVBfQ0xPU0U7XG4gICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b24pO1xuXG4gICAgICBqUXVlcnkoY2xvc2VCdXR0b24pLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5jbG9zZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5jb250ZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuY29udGVudENvbnRhaW5lcik7XG5cbiAgICB0aGlzLm92ZXJsYXkgPSBuZXcgT3ZlcmxheSh7XG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICBpbnNlcnRGaXJzdDogZmFsc2UsXG4gICAgICBvZmZzZXQ6IHRoaXMub3B0aW9ucy5vZmZzZXQsXG4gICAgICBwb3NpdGlvbmluZzogdGhpcy5vcHRpb25zLm9yaWVudGF0aW9uXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLm1hcCkge1xuICAgICAgdGhpcy5vcHRpb25zLm1hcC5hZGRPdmVybGF5KHRoaXMub3ZlcmxheSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wb3NpdGlvbikge1xuICAgICAgdGhpcy5vdmVybGF5LnNldFBvc2l0aW9uKHRoaXMub3B0aW9ucy5wb3NpdGlvbik7XG4gICAgfVxuICB9XG5cbiAgY2xvc2UgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmNsb3NlRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5jbG9zZUZ1bmN0aW9uKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5tYXApIHtcbiAgICAgIHRoaXMub3B0aW9ucy5tYXAucmVtb3ZlT3ZlcmxheSh0aGlzLm92ZXJsYXkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAVE9ET1xuICAgKiBbc2hvdyBkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQHJldHVybiAge1t0eXBlXX0gIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHNob3cgKCkge1xuICAgIGlmIChqUXVlcnkodGhpcy5lbGVtZW50KS5oYXNDbGFzcyhjc3NDb25zdGFudHMuSElERSkpIHtcbiAgICAgIGpRdWVyeSh0aGlzLmVsZW1lbnQpLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5ISURFKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQFRPRE9cbiAgICogW2hpZGUgZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEByZXR1cm4gIHtbdHlwZV19ICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBoaWRlICgpIHtcbiAgICBpZiAoIWpRdWVyeSh0aGlzLmVsZW1lbnQpLmhhc0NsYXNzKGNzc0NvbnN0YW50cy5ISURFKSkge1xuICAgICAgalF1ZXJ5KHRoaXMuZWxlbWVudCkuYWRkQ2xhc3MoY3NzQ29uc3RhbnRzLkhJREUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAVE9ET1xuICAgKiBbZ2V0Q29udGVudCBkZXNjcmlwdGlvbl1cbiAgICpcbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRDb250YWluZXIuaW5uZXJIVE1MO1xuICB9XG5cbiAgLyoqXG4gICAqIEBUT0RPXG4gICAqIFtnZXRQb3NpdGlvbiBkZXNjcmlwdGlvbl1cbiAgICpcbiAgICovXG4gIGdldFBvc2l0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5vdmVybGF5LmdldFBvc2l0aW9uKCk7XG4gIH1cblxuICAvKipcbiAgICogQFRPRE9cbiAgICogW3NldENvbnRlbnQgZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gIGNvbnRlbnQgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHNldENvbnRlbnQgKGNvbnRlbnQpIHtcbiAgICB0aGlzLmNvbnRlbnRDb250YWluZXIuaW5uZXJIVE1MID0gY29udGVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAVE9ET1xuICAgKiBbc2V0UG9zaXRpb24gZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gIGNvb3JkaW5hdGVzICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBzZXRQb3NpdGlvbiAoY29vcmRpbmF0ZXMpIHtcbiAgICB0aGlzLm92ZXJsYXkuc2V0UG9zaXRpb24oY29vcmRpbmF0ZXMpO1xuICB9XG5cbn0gLy8gRW5kIG9mIFwiYWRkIG1ldGhvZHMgdG8gVG9vbHRpcFBvcFVwXCJcbiIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaW0oYil7cmV0dXJuIGIucmVwbGFjZSgvXlxccysvLFwiXCIpLnJlcGxhY2UoL1xccyskLyxcIlwiKX1cbmV4cG9ydCBmdW5jdGlvbiBpc01vYmlsZSgpe3JldHVybi8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIChjZXxwaG9uZSl8eGRhfHhpaW5vfGFuZHJvaWR8aXBhZHxwbGF5Ym9va3xzaWxrL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHx3aW5kb3cub3BlcmEpfHwvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaS50ZXN0KChuYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHxcbiAgICB3aW5kb3cub3BlcmEpLnN1YnN0cigwLDQpKX1mdW5jdGlvbiB0cmFuc2xhdGUoYil7dmFyIGE9dHJpbShiKTtyZXR1cm5cInllc1wiPT1hfHxcIlllc1wiPT1hP1wiSmFcIjpcIm5vXCI9PWE/XCJOZWluXCI6XCJOb1wiPT1hP1wibmVpblwiOlwibGltaXRlZFwiPT1hP1wiRWluZ2VzY2hyXFx1MDBlNG5rdFwiOlwiZGVzaWduYXRlZFwiPT1hP1wiSmFcIjpcIndvb2RcIj09YT9cIkhvbHpcIjpcIm1ldGFsXCI9PWE/XCJNZXRhbGxcIjpcImNvbmNyZXRlXCI9PWE/XCJCZXRvblwiOlwicGxhc3RpY1wiPT1hP1wiUGxhc3Rpa1wiOlwic3RvbmVcIj09YT9cIlN0ZWluXCI6XCJzdGVlbFwiPT1hP1wiU3RhaGxcIjpcImJyaWNrXCI9PWE/XCJaaWVnZWxcIjpcInJlaW5mb3JjZWRfY29uY3JldGVcIj09YT9cIlN0YWhsYmV0b25cIjpcIm1hc29ucnlcIj09YT9cIk1hdWVyd2Vya1wiOmJ9XG5leHBvcnQgdmFyIGZuU3RhbmRhcmRJbmZvUG9wdXA9ZnVuY3Rpb24oZmVhdHVyZSxpbWFnZVNyYyl7dmFyIGF0dHI9ZmVhdHVyZS5nZXRQcm9wZXJ0aWVzKCk7dmFyIHJlc3VsdD1cIlwiO3Jlc3VsdCs9Zm5IZWFkZXIoYXR0cixpbWFnZVNyYyk7cmVzdWx0Kz1mbkNvbnRlbnQoYXR0cik7cmVzdWx0Kz1mbkZvb3RlcihhdHRyLGZlYXR1cmUuZ2V0KFwib3NtX3R5cGVcIikrXCIvXCIrZmVhdHVyZS5nZXRJZCgpKTtyZXN1bHQ9JzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfdGV4dFwiPicrcmVzdWx0K1wiPC9kaXY+XCI7cmV0dXJuIHJlc3VsdH0sZm5SZWR1Y2VkSW5mb1BvcHVwPWZ1bmN0aW9uKGIsYSl7dmFyIGM9Yi5nZXRQcm9wZXJ0aWVzKCksZD1cIlwiLGU9ITEsZjtmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChiKVswXS5nZXRJbWFnZSgpLmdldFNyYygpOmEuZ2V0SW1hZ2UoKS5nZXRTcmMoKTtpZihcInJlc3RhdXJhbnRcIj09XG4gICAgYy5hbWVuaXR5fHxcInB1YlwiPT1jLmFtZW5pdHl8fFwiYmllcmdhcnRlblwiPT1jLmFtZW5pdHkpZT0hMDtcImhvdGVsXCI9PWMudG91cmlzbSYmKGU9ITApO1wiZ3Vlc3RfaG91c2VcIj09Yy50b3VyaXNtJiYoZT0hMCk7XCJjaGFsZXRcIj09Yy50b3VyaXNtJiYoZT0hMCk7XCJob3N0ZWxcIj09Yy50b3VyaXNtJiYoZT0hMCk7XCJhbHBpbmVfaHV0XCI9PWMudG91cmlzbSYmKGU9ITApO2lmKFwiYXJ0d29ya1wiPT1jLnRvdXJpc218fFwiYXJ0d29ya1wiPT1jLmFtZW5pdHkpZT0hMDtpZihcIm11c2V1bVwiPT1jLnRvdXJpc218fFwibXVzZXVtXCI9PWMuYW1lbml0eSllPSEwO1wiY2luZW1hXCI9PWMuYW1lbml0eSYmKGU9ITApO1widGhlYXRyZVwiPT1jLmFtZW5pdHkmJihlPSEwKTtpZihcImF0dHJhY3Rpb25cIj09Yy5hbWVuaXR5fHxcImZvdW50YWluXCI9PWMuYW1lbml0eXx8XCJtb251bWVudFwiPT1jLmhpc3RvcmljfHxcImNpdHlfZ2F0ZVwiPT1jLmhpc3RvcmljfHxcInJ1aW5zXCI9PWMuaGlzdG9yaWN8fFwiY2FzdGxlXCI9PWMuaGlzdG9yaWN8fFxuICAgIFwiYXR0cmFjdGlvblwiPT1jLnRvdXJpc20pZT0hMDtcInBsYXlncm91bmRcIj09Yy5sZWlzdXJlJiYoZT0hMCk7Yy5hZXJpYWx3YXkmJihlPSEwKTtpZihcInN3aW1taW5nX3Bvb2xcIj09Yy5hbWVuaXR5fHxcInN3aW1taW5nX3Bvb2xcIj09Yy5sZWlzdXJlfHxcInN3aW1taW5nXCI9PWMuc3BvcnQpZT0hMDtcInN0YXRpb25cIj09Yy5yYWlsd2F5JiYoZT0hMCk7XCJzd2ltbWluZ1wiPT1jLnNwb3J0JiYoZT0hMCk7XCJzd2ltbWluZ19wb29sXCI9PWMubGVpc3VyZSYmKGU9ITApO1wic3dpbW1pbmdfcG9vbFwiPT1jLmFtZW5pdHkmJihlPSEwKTtcIndhdGVycGFya1wiPT1jLmxlaXN1cmUmJihlPSEwKTtjLndhdGVyX3BhcmsmJihlPSEwKTtcInNwb3J0c19jZW50cmVcIj09Yy5sZWlzdXJlJiYoZT0hMCk7c3dpdGNoKGUpe2Nhc2UgITE6ZCs9Zm5IZWFkZXIoYyxmKTtkKz1mbkNvbnRlbnQoYyk7ZCs9Zm5Gb290ZXIoYyxiLmdldChcIm9zbV90eXBlXCIpK1wiL1wiK2IuZ2V0SWQoKSk7YnJlYWs7Y2FzZSAhMDpkKz1mbkhlYWRlcihjLFxuICAgIGYpfXJldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX3RleHRcIj4nK2QrXCI8L2Rpdj5cIn07XG5leHBvcnQgZnVuY3Rpb24gZm5IZWFkZXIoYixhKXt2YXIgYz1cIlwiLGQ9XCIzMnB4XCI7aWYoYi5uYW1lfHxiW1wicGlzdGU6bmFtZVwiXXx8YltcInhtYXM6bmFtZVwiXXx8YltcInhtYXM6bG9jYXRpb25cIl0pe2lmKGIubmFtZSl2YXIgZT1iLm5hbWU7YltcInBpc3RlOm5hbWVcIl0mJihlPWJbXCJwaXN0ZTpuYW1lXCJdKTtiW1wieG1hczpuYW1lXCJdJiYoZT1iW1wieG1hczpuYW1lXCJdKTtiW1wieG1hczpsb2NhdGlvblwiXSYmKGU9YltcInhtYXM6bG9jYXRpb25cIl0pO2MrPWE/JzxpbWcgc3JjPVwiJythKydcIiB3aWR0aD1cIicrZCsnXCIgbmFtZT1cIicrZSsnXCIgYWx0PVwiJytlKydcIj48ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2hlYWRlcl9mZWF0dXJlbmFtZVwiPicrZStcIjwvZGl2PlwiOic8bmFtZT1cIicrZSsnXCIgYWx0PVwiJytlKydcIj48ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2hlYWRlcl9mZWF0dXJlbmFtZVwiPicrXG4gICAgZStcIjwvZGl2PlwifWVsc2UgYSYmKGMrPSc8aW1nIHNyYz1cIicrYSsnXCIgd2lkdGg9XCInK2QrJ1wiIG5hbWU9XCInK2ErJ1wiIGFsdD1cIicrYSsnXCI+Jyk7Yys9Zm5HZXRUcmFuc2xhdGVfVHlwZShiKTtyZXR1cm4nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF9oZWFkZXJcIj4nK2MrXCI8L2Rpdj5cIn1cbmV4cG9ydCBmdW5jdGlvbiBmbkZvb3RlcihiLGEpe3ZhciBjPVwiXCIsZD0hMTtiW1wiYWRkcjpob3VzZW5hbWVcIl0mJihjKz1cIkdlYlxcdTAwZTR1ZGVuYW1lOiBcIitiW1wiYWRkcjpob3VzZW5hbWVcIl0rXCI8YnIvPlwiLGQ9ITApO2JbXCJhZGRyOmZsb29yXCJdPyhjKz1cIkV0YWdlOiBcIitiW1wiYWRkcjpmbG9vclwiXStcIjxici8+XCIsZD0hMCk6YltcImFkZHI6bGV2ZWxcIl0mJihjKz1cIkV0YWdlOiBcIitiW1wiYWRkcjpsZXZlbFwiXStcIjxici8+XCIsZD0hMCk7YltcImFkZHI6c3RyZWV0XCJdJiYoYys9YltcImFkZHI6c3RyZWV0XCJdLGM9YltcImFkZHI6aG91c2VudW1iZXJcIl0/YysoXCIgXCIrYltcImFkZHI6aG91c2VudW1iZXJcIl0rXCI8YnIvPlwiKTpjK1wiPGJyLz5cIixkPSEwKTtiW1wiYWRkcjpwb3N0Y29kZVwiXSYmKGMrPWJbXCJhZGRyOnBvc3Rjb2RlXCJdK1wiIFwiKTtiW1wiYWRkcjpjaXR5XCJdJiYoYys9YltcImFkZHI6Y2l0eVwiXStcIjxici8+XCIsZD0hMCk7aWYoYi5zcWttKWlmKGIuc3FrbT1cIlwiK2Iuc3FrbSwzPGIuc3FrbS5sZW5ndGgpe3ZhciBlPVxuICAgIGIuc3FrbS5sZW5ndGglMyxmPTA8ZT9iLnNxa20uc3Vic3RyaW5nKDAsZSk6XCJcIjtmb3IodmFyIGk9MDtpPE1hdGguZmxvb3IoYi5zcWttLmxlbmd0aC8zKTtpKyspZj0wPT1lJiYwPT1pP2YrYi5zcWttLnN1YnN0cmluZyhlKzMqaSxlKzMqaSszKTpmKyhcIi5cIitiLnNxa20uc3Vic3RyaW5nKGUrMyppLGUrMyppKzMpKTtjKz1cIkZsXFx1MDBlNGNoZTogXCIrZitcIiBLbVxcdTAwYjI8YnIvPlwifWVsc2UgYys9XCJGbFxcdTAwZTRjaGUgXCIrYi5zcWttK1wiPGJyLz5cIjtiW1wiY29udGFjdDpwaG9uZVwiXSYmKGM9aXNNb2JpbGUoKT9jKygnVGVsZWZvbjogPGEgaHJlZj1cInRlbDonK2JbXCJjb250YWN0OnBob25lXCJdKydcIj4nK2JbXCJjb250YWN0OnBob25lXCJdK1wiPC9hPjxici8+XCIpOmMrKCdUZWxlZm9uOiA8YSBocmVmPVwiY2FsbHRvOicrYltcImNvbnRhY3Q6cGhvbmVcIl0rJ1wiPicrYltcImNvbnRhY3Q6cGhvbmVcIl0rXCI8L2E+PGJyLz5cIiksZD0hMCk7Yi5waG9uZSYmKGM9aXNNb2JpbGUoKT9jKygnVGVsZWZvbjogPGEgaHJlZj1cInRlbDonK1xuICAgIGIucGhvbmUrJ1wiPicrYi5waG9uZStcIjwvYT48YnIvPlwiKTpjKygnVGVsZWZvbjogPGEgaHJlZj1cImNhbGx0bzonK2IucGhvbmUrJ1wiPicrYi5waG9uZStcIjwvYT48YnIvPlwiKSxkPSEwKTtiW1wiY29udGFjdDpmYXhcIl0/KGMrPVwiVGVsZWZheDogXCIrYltcImNvbnRhY3Q6ZmF4XCJdK1wiPGJyLz5cIixkPSEwKTpiLmZheCYmKGMrPVwiVGVsZWZheDogXCIrYi5mYXgrXCI8YnIvPlwiLGQ9ITApO2JbXCJjb250YWN0OmVtYWlsXCJdPyhjKz0nRS1NYWlsLUFkcmVzc2U6IDxhIGhyZWY9XCJtYWlsdG86JytiW1wiY29udGFjdDplbWFpbFwiXSsnXCI+JytiW1wiY29udGFjdDplbWFpbFwiXStcIjwvYT48YnIvPlwiLGQ9ITApOmIuZW1haWwmJihjKz0nRS1NYWlsLUFkcmVzc2U6IDxhIGhyZWY9XCJtYWlsdG86JytiLmVtYWlsKydcIj4nK2IuZW1haWwrXCI8L2E+PGJyLz5cIixkPSEwKTtkJiYoYys9XCI8YnIvPlwiKTtpZihiLm9wZW5pbmdfaG91cnMpe2Q9Yi5vcGVuaW5nX2hvdXJzO2ZvcihlPTA7MD09ZXx8MDxkLmluZGV4T2YoXCI7XCIpOylkPVxuICAgIGQucmVwbGFjZShcIlBIXCIsXCJGVFwiKSxkPWQucmVwbGFjZShcIlR1XCIsXCJEaVwiKSxkPWQucmVwbGFjZShcIldlXCIsXCJNaVwiKSxkPWQucmVwbGFjZShcIlRoXCIsXCJEb1wiKSxkPWQucmVwbGFjZShcIlN1XCIsXCJTb1wiKSxkPWQucmVwbGFjZShcIk1hclwiLFwiTVxcdTAwZTRyXCIpLGQ9ZC5yZXBsYWNlKFwiTWF5XCIsXCJNYWlcIiksZD1kLnJlcGxhY2UoXCJPY3RcIixcIk9rdFwiKSxkPWQucmVwbGFjZShcIkRlY1wiLFwiRGV6XCIpLGQ9ZC5yZXBsYWNlKCdcIlBsZWFzZSBtYWtlIGEgcmVzZXJ2YXRpb25cIicsJ1wiQml0dGUgdmVyZWluYmFyZW4gU2llIGVpbmVuIFRlcm1pblwiJyksZD1kLnJlcGxhY2UoXCJvZmZcIixcImF1c2dlbm9tbWVuXCIpLDA8ZSYmKGQ9ZC5yZXBsYWNlKFwiO1wiLFwiPGJyLz5cIikpLGUrKztjKz0nXFx1MDBkNmZmbnVuZ3N6ZWl0ZW46IDxici8+PGRpdiBjbGFzcz1cImM0Z19vcGVuX3RleHRcIj4nK2QrXCI8L2Rpdj5cIjtjPTA8ZC5pbmRleE9mKFwiRlRcIik/YytcIihGVCA9IEZlaWVydGFnKTxici8+XCI6YytcIjxici8+XCJ9aWYoYltcInhtYXM6b3BlbmluZ19ob3Vyc1wiXSl7ZD1cbiAgICBiW1wieG1hczpvcGVuaW5nX2hvdXJzXCJdO2ZvcihlPTA7MD09ZXx8MDxkLmluZGV4T2YoXCI7XCIpOylkPWQucmVwbGFjZShcIlBIXCIsXCJGVFwiKSxkPWQucmVwbGFjZShcIlR1XCIsXCJEaVwiKSxkPWQucmVwbGFjZShcIldlXCIsXCJNaVwiKSxkPWQucmVwbGFjZShcIlRoXCIsXCJEb1wiKSxkPWQucmVwbGFjZShcIlN1XCIsXCJTb1wiKSxkPWQucmVwbGFjZShcIk1hclwiLFwiTVxcdTAwZTRyXCIpLGQ9ZC5yZXBsYWNlKFwiTWF5XCIsXCJNYWlcIiksZD1kLnJlcGxhY2UoXCJPY3RcIixcIk9rdFwiKSxkPWQucmVwbGFjZShcIkRlY1wiLFwiRGV6XCIpLDA8ZSYmKGQ9ZC5yZXBsYWNlKFwiO1wiLFwiPGJyLz5cIikpLGUrKztjKz0nXFx1MDBkNmZmbnVuZ3N6ZWl0ZW46IDxici8+PGRpdiBjbGFzcz1cImM0Z19vcGVuX3RleHRcIj4nK2QrXCI8L2Rpdj5cIjtjPTA8ZC5pbmRleE9mKFwiRlRcIik/YytcIihGVCA9IEZlaWVydGFnKTxici8+XCI6YytcIjxici8+XCJ9YltcInhtYXM6dXJsXCJdJiYoZD1cIlwiLGQ9YltcInhtYXM6dXJsXCJdLHRyaW0oZCksLTE9PWQuaW5kZXhPZihcImh0dHBzOi8vXCIsXG4gICAgMCkmJi0xPT1kLmluZGV4T2YoXCJodHRwOi8vXCIsMCkmJihkPVwiaHR0cDovL1wiK2QpLGMrPSdXZWJzaXRlOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rIHp1ciBXZWJzaXRlPC9hPjxici8+Jyk7YltcImNvbnRhY3Q6d2Vic2l0ZVwiXT8oZD1iW1wiY29udGFjdDp3ZWJzaXRlXCJdLHRyaW0oZCksLTE9PWQuaW5kZXhPZihcImh0dHBzOi8vXCIsMCkmJi0xPT1kLmluZGV4T2YoXCJodHRwOi8vXCIsMCkmJihkPVwiaHR0cDovL1wiK2QpLGMrPSdXZWJzaXRlOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rIHp1ciBXZWJzaXRlPC9hPjxici8+Jyk6Yi53ZWJzaXRlJiYoZD1iLndlYnNpdGUsdHJpbShkKSwtMT09ZC5pbmRleE9mKFwiaHR0cHM6Ly9cIiwwKSYmLTE9PWQuaW5kZXhPZihcImh0dHA6Ly9cIiwwKSYmKGQ9XCJodHRwOi8vXCIrZCksYys9J1dlYnNpdGU6IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPkxpbmsgenVyIFdlYnNpdGU8L2E+PGJyLz4nKTtiLndpa2lwZWRpYSYmXG4oZD1iLndpa2lwZWRpYSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHBzOi8vd2lraXBlZGlhLm9yZy93aWtpL1wiK2QpLGMrPSdXaWtpcGVkaWE6IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPkxpbmsgenUgV2lraXBlZGlhPC9hPjxici8+Jyk7Yi53aWtpbWVkaWFfY29tbW9ucyYmKGQ9Yi53aWtpbWVkaWFfY29tbW9ucyx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHBzOi8vY29tbW9ucy53aWtpbWVkaWEub3JnL3dpa2kvXCIrZCksYys9J1dpa2ltZWRpYTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+TGluayB6dSBXaWtpbWVkaWE8L2E+PGJyLz4nKTtiW1wiY29udGFjdDp3ZWJjYW1cIl0mJihkPWJbXCJjb250YWN0OndlYmNhbVwiXSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiZcbi0xPT1kLmluZGV4T2YoXCJodHRwOi8vXCIsMCkmJihkPVwiaHR0cDovL1wiK2QpLGMrPSdXZWJjYW06IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPkxpbmsgenVyIFdlYmNhbTwvYT48YnIvPicpO2IuaW1hZ2UmJihjKz0nPGltZyBzcmM9XCInK2IuaW1hZ2UrJ1wiIHdpZHRoPVwiMjAwcHhcIiBuYW1lPVwiJytiLm5hbWUrJ1wiIGFsdD1cIicrYi5uYW1lKydcIj48YnIvPicpO2Q9XCJcIjtiLmludGVybmV0X2FjY2VzcyYmKGQrPVwiSW50ZXJuZXR6dWdyaWZmOiBcIit0cmFuc2xhdGUoYi5pbnRlcm5ldF9hY2Nlc3MpK1wiPGJyLz5cIik7YltcImludGVybmV0X2FjY2VzczpmZWVcIl0mJihkKz1cIkludGVybmV0IEdlYlxcdTAwZmNocjogXCIrdHJhbnNsYXRlKGJbXCJpbnRlcm5ldF9hY2Nlc3M6ZmVlXCJdKStcIjxici8+XCIpO2JbXCJ3aWZpX2FjY2VzczpvcGVyYXRvclwiXSYmKGQrPVwid2lmaSBCZXRyZWliZXI6IFwiK2JbXCJ3aWZpX2FjY2VzczpvcGVyYXRvclwiXStcIjxici8+XCIpO2JbXCJ3aWZpX2FjY2Vzczp0ZWNobm9sb2d5XCJdJiZcbihkKz1cIndpZmkgVGVjaG5vbG9naWU6IFwiK2JbXCJ3aWZpX2FjY2Vzczp0ZWNobm9sb2d5XCJdK1wiPGJyLz5cIik7YltcIndpZmlfYWNjZXNzOnNzaWRcIl0mJihkKz1cIndpZmkgc3NpZDogXCIrYltcIndpZmlfYWNjZXNzOnNzaWRcIl0rXCI8YnIvPlwiKTtcIlwiIT1kJiYoYys9J0ludGVybmV0enVnYW5nIHZvcmhhbmRlbjxici8+PGRpdiBjbGFzcz1cImM0Z19zaG9wX2ludGVybmV0X2FjY2Vzc1wiPicrZCtcIjwvZGl2Pjxici8+XCIpO2Iud2hlZWxjaGFpciYmKGMrPVwicm9sbHN0dWhsZ2VlaWduZXQ6IFwiK3RyYW5zbGF0ZShiLndoZWVsY2hhaXIpK1wiPGJyLz5cIik7YltcIndoZWVsY2hhaXI6ZGVzY3JpcHRpb25cIl0mJihjKz1cIkJlc2NocmVpYnVuZzogXCIrYltcIndoZWVsY2hhaXI6ZGVzY3JpcHRpb25cIl0rXCI8YnIvPlwiKTtiW1wid2hlZWxjaGFpcjplbnRyYW5jZV93aWR0aFwiXSYmKGMrPVwiQnJlaXRlIGRlcyBFaW5nYW5ncyBpbiBDTTogXCIrYltcIndoZWVsY2hhaXI6ZW50cmFuY2Vfd2lkdGhcIl0rXCI8YnIvPlwiKTtiW1wid2hlZWxjaGFpcjpzdGVwX2hlaWdodFwiXSYmXG4oYys9XCJIXFx1MDBmNmhlIGRlciBTdHVmZSBhbSBFaW5nYW5nIGluIENNOiBcIitiW1wid2hlZWxjaGFpcjpzdGVwX2hlaWdodFwiXStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOnJvb21zXCJdJiYoYys9XCJBbnphaGwgcm9sbHN0dWhsZ2VyZWNodGVyIFJcXHUwMGU0dW1lOiBcIitiW1wid2hlZWxjaGFpcjpyb29tc1wiXStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOnBsYWNlc1wiXSYmKGMrPVwiQW56YWhsIGRlciBSb2xsc3R1aGxwbFxcdTAwZTR0emU6IFwiK2JbXCJ3aGVlbGNoYWlyOnBsYWNlc1wiXStcIjxici8+XCIpO2JbXCJjZW50OnBsYWNlc1wiXSYmKGMrPVwiQW56YWhsIGRlciBSb2xsc3R1aGxwbFxcdTAwZTR0emU6IFwiK2JbXCJ3aGVlbGNoYWlyOnBsYWNlc1wiXStcIjxici8+XCIpO2JbXCJyYW1wOndoZWVsY2hhaXJcIl0mJihjKz1cIlJhbXBlIGZcXHUwMGZjciBSb2xsc3R1aGxmYWhyZXI6IFwiK2JbXCJyYW1wOndoZWVsY2hhaXJcIl0rXCI8YnIvPlwiKTtiW1wiY2FwYWNpdHk6ZGlzYWJsZWRcIl0mJihjKz1cIkJlaGluZGVydGVucGFya3BsXFx1MDBlNHR6ZTogXCIrXG4gICAgdHJhbnNsYXRlKGJbXCJjYXBhY2l0eTpkaXNhYmxlZFwiXSkrXCI8YnIvPlwiKTtiW1widG9pbGV0czp3aGVlbGNoYWlyXCJdJiYoYys9XCJCZWhpbmRlcmRlbmdlcmVjaHRlIFRvaWxldHRlOiBcIit0cmFuc2xhdGUoYltcInRvaWxldHM6d2hlZWxjaGFpclwiXSkrXCI8YnIvPlwiKTtiLmNlbnRyYWxrZXkmJihjKz1cIlplbnRyYWxzY2hsXFx1MDBmY3NzZWw6IFwiK2IuY2VudHJhbGtleStcIjxici8+XCIpO2Iubm90ZSYmKGMrPWIubm90ZStcIjxici8+XCIpO2IuZGVzY3JpcHRpb24mJihjKz1iLmRlc2NyaXB0aW9uK1wiPGJyLz5cIik7Yi5vcGVyYXRvciYmKGMrPVwiQmV0cmVpYmVyOiBcIitiLm9wZXJhdG9yK1wiPGJyLz5cIik7Yi5yZWYmJihjKz1cIlJlZmVyZW56OiBcIitiLnJlZitcIjxici8+XCIpO1wieWVzXCI9PWIubGl0JiYoYys9XCJEaWVzZXMgT2JqZWt0IGlzdCBiZWxldWNodGV0Ljxici8+XCIpO2Iuc2hvcCYmKGQ9XCJcIixiLmJyYW5kJiYoZCs9XCJNYXJrZW56ZWljaGVuOiBcIitiLmJyYW5kK1wiPGJyLz5cIiksYi5zZWxscyYmXG4oZCs9XCJWZXJrYXVmczogXCIrYi5zZWxscytcIjxici8+XCIpLGIub3JpZ2luJiYoZCs9XCJIZXJrdW5mdHNsXFx1MDBlNG5kZXI6IFwiK2Iub3JpZ2luK1wiPGJyLz5cIiksXCJ5ZXNcIj09Yi53aG9sZXNhbGUmJihkKz1cIkdyb1xcdTAwZGZoXFx1MDBlNG5kbGVyOiBKYTxici8+XCIpLFwiXCIhPWQmJihjKz0nV2VpdGVyZSBBbmdhYmVuIHp1bSBTaG9wOiA8YnIvPjxkaXYgY2xhc3M9XCJjNGdfc2hvcF90ZXh0XCI+JytkK1wiPC9kaXY+PGJyLz5cIikpO2EmJihkPWEsdHJpbShkKSxkPWQucmVwbGFjZSgvXFwuLyxcIi9cIiksYz1jK1wiPGJyLz5cIisoJ09TTTogICAgPGEgaHJlZj1cImh0dHA6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rIHp1ciBPcGVuU3RyZWV0TWFwPC9hPjxici8+JykpO3JldHVybiBjPSc8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2Zvb3RlclwiPicrYytcIjwvZGl2PlwifVxuZXhwb3J0IGZ1bmN0aW9uIGZuR2V0VHJhbnNsYXRlX1R5cGUoYil7dmFyIGE9XCJcIjtpZihcImRvY3RvcnNcIj09Yi5hbWVuaXR5fHxcImRvY3RvclwiPT1iLmhlYWx0aGNhcmUpYSs9XCJBcnp0PGJyLz5cIjtpZihcImhvc3BpdGFsXCI9PWIuYW1lbml0eXx8XCJjbGluaWNcIj09Yi5hbWVuaXR5fHxcImhvc3BpdGFsXCI9PWIuaGVhbHRoY2FyZXx8XCJjbGluaWNcIj09Yi5oZWFsdGhjYXJlKWE9XCJ5ZXNcIj09Yi5lbWVyZ2VuY3k/YStcIktyYW5rZW5oYXVzIG1pdCBOb3RhdWZuYWhtZTxici8+XCI6YStcIktyYW5rZW5oYXVzPGJyLz5cIjtcImRlbnRpc3RcIj09Yi5hbWVuaXR5JiYoYSs9XCJaYWhuYXJ6dDxici8+XCIpO2lmKFwicGhhcm1hY3lcIj09Yi5hbWVuaXR5fHxcInBoYXJtYWN5XCI9PWJbXCJoZWFsdGhfZmFjaWxpdHk6dHlwZVwiXSlhKz1cIkFwb3RoZWtlPGJyLz5cIjtpZihcInBoeXNpb3RoZXJhcGlzdFwiPT1iLmhlYWx0aGNhcmV8fFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbGl0eTpwaHlzaW90aGVyYXB5XCJdKWErPVwiUGh5c2lvdGhlcmFwZXV0PGJyLz5cIjtcbiAgICBpZihcIm9jY3VwYXRpb25hbF90aGVyYXBpc3RcIj09Yi5oZWFsdGhjYXJlfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6b2NjdXBhdGlvbmFsX3RoZXJhcHlcIl18fFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om9jY3VwYXRpb25hbF90aGVyYXB5XCJdKWErPVwiRXJnb3RoZXJhcGV1dDxici8+XCI7aWYoXCJwc3ljaG90aGVyYXBpc3RcIj09Yi5oZWFsdGhjYXJlfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6cHN5Y2hvdGhlcmFweVwiXSlhKz1cIlBzeWNob3RoZXJhcGV1dDxici8+XCI7XCJhbHRlcm5hdGl2ZVwiPT1iLmhlYWx0aGNhcmUmJihhKz1cIkFsdGVybmF0aXYtIHVuZCBLb21wbGVtZW50XFx1MDBlNHJtZWRpemluZXI8YnIvPlwiKTtcIm1pZHdpZmVcIj09Yi5oZWFsdGhjYXJlJiYoYSs9XCJIZWJhbW1lPGJyLz5cIik7aWYoXCJzcGVlY2hfdGhlcmFwaXN0XCI9PWIuaGVhbHRoY2FyZXx8XCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsaXR5OnNwZWVjaF90aGVyYXB5XCJdKWErPVwiTG9nb3BcXHUwMGU0ZGU8YnIvPlwiO1xuICAgIFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbGl0eTptdXNpY190aGVyYXB5XCJdJiYoYSs9XCJNdXNpa3RoZXJhcGV1dDxici8+XCIpO1widmV0ZXJpbmFyeVwiPT1iLmFtZW5pdHkmJihhKz1cIlRpZXJhcnp0PGJyLz5cIik7XCJmaXJlX3N0YXRpb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJGZXVlcndlaHJoYXVzPGJyLz5cIik7XCJmaXJlX2V4dGluZ3Vpc2hlclwiPT1iLmVtZXJnZW5jeSYmKGErPVwiRmV1ZXJsXFx1MDBmNnNjaGVyPGJyLz5cIik7XCJhZWRcIj09Yi5lbWVyZ2VuY3kmJihhKz1cIk1vYmlsZXIgRGVmaWJyaWxhdG9yPGJyLz5cIik7XCJkZWZpYnJpbGxhdG9yXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJNb2JpbGVyIERlZmlicmlsYXRvcjxici8+XCIpO1wicGhvbmVcIj09Yi5lbWVyZ2VuY3kmJihhKz1cIk5vdHJ1ZnNcXHUwMGU0dWxlPGJyLz5cIik7XCJwb2xpY2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJQb2xpemVpd2FjaGU8YnIvPlwiKTtcImFtYnVsYW5jZV9zdGF0aW9uXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJSZXR0dW5nc3dhY2hlPGJyLz5cIik7XG4gICAgXCJ0ZWNobmljYWxcIj09Yi5lbWVyZ2VuY3lfc2VydmljZSYmKGErPVwiVGVjaG5pc2NoZXMgSGlsZnN3ZXJrPGJyLz5cIik7XCJ3YXRlclwiPT1iLmVtZXJnZW5jeV9zZXJ2aWNlJiYoYSs9XCJXYXNzZXJyZXR0dW5nc3N0YXRpb248YnIvPlwiKTtcImJheXdhdGNoXCI9PWIud2F0ZXJ3YXkmJihhKz1cIldhc3NlcndhY2h0PGJyLz5cIik7XCJhaXJcIj09Yi5lbWVyZ2VuY3lfc2VydmljZSYmKGErPVwiUmV0dHVuZ3NodWJzY2hyYXViZXI8YnIvPlwiKTtcImVtZXJnZW5jeV9hY2Nlc3NfcG9pbnRcIj09Yi5oaWdod2F5JiYoYSs9XCJOb3RmYWxscHVua3Q8YnIvPlwiKTtpZihcImxpZmVib2F0X3N0YXRpb25cIj09Yi5hbWVuaXR5fHxcImxpZmVib2F0X3N0YXRpb25cIj09Yi5lbWVyZ2VuY3kpYSs9XCJSZXR0dW5nc2Jvb3RzdGF0aW9uPGJyLz5cIjtcImxpZmVfcmluZ1wiPT1iLmVtZXJnZW5jeSYmKGErPVwiUmV0dHVuZ3NyaW5nPGJyLz5cIik7XCJzaXJlblwiPT1iLmVtZXJnZW5jeSYmKGErPVwiU2lyZW5lPGJyLz5cIik7XCJsaWZlX3JpbmdcIj09XG4gICAgYi5hbWVuaXR5JiYoYSs9XCJSZXR0dW5nc3Jpbmc8YnIvPlwiKTtcInJlc2N1ZV9zdGF0aW9uXCI9PWIuYW1lbml0eSYmKGErPVwiUmV0dHVuZ3NzdGF0aW9uPGJyLz5cIik7XCJmaXJlX2h5ZHJhbnRcIj09Yi5lbWVyZ2VuY3kmJihcInVuZGVyZ3JvdW5kXCI9PWJbXCJmaXJlX2h5ZHJhbnQ6dHlwZVwiXT9hKz1cIlVudGVyZmx1cmh5ZHJhbnQ8YnIvPlwiOlwicGlsbGFyXCI9PWJbXCJmaXJlX2h5ZHJhbnQ6dHlwZVwiXT9hKz1cIlxcdTAwZGNiZXJmbHVyaHlkcmFudDxici8+XCI6XCJ3YWxsXCI9PWJbXCJmaXJlX2h5ZHJhbnQ6dHlwZVwiXT9hKz1cIldhbmRoeWRyYW50PGJyLz5cIjpcInBvbmRcIj09YltcImZpcmVfaHlkcmFudDp0eXBlXCJdJiYoYSs9XCJTYXVnc3RlbGxlPGJyLz5cIikpO1wic3VjdGlvbl9wb2ludFwiPT1iLmVtZXJnZW5jeSYmKGErPVwiU2F1Z3N0ZWxsZTxici8+XCIpO1wiZmlyZV93YXRlcl9wb25kXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJMXFx1MDBmNnNjaHRlaWNoPGJyLz5cIik7XCJtb3VudGFpblwiPT1iLmVtZXJnZW5jeV9zZXJ2aWNlJiZcbiAgICAoYSs9XCJCZXJncmV0dHVuZ3NzdGF0aW9uPGJyLz5cIik7XCJ3YXRlcl90YW5rXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJMXFx1MDBmNnNjaHdhc3NlcnRhbms8YnIvPlwiKTtcImNvbnRhaW5lclwiPT1iLnJlY3ljbGluZ190eXBlJiYoYSs9XCJSZWN5Y2xpbmcgQ29udGFpbmVyPGJyLz5cIik7XCJyZWN5Y2xpbmdcIj09Yi5hbWVuaXR5JiZcInllc1wiPT1iW1wicmVjeWNsaW5nOmV4Y3JlbWVudFwiXXx8XCJwdW1wLW91dFwiPT1iW1wic2VhbWFyazpzbWFsbF9jcmFmdF9mYWNpbGl0eTpjYXRlZ29yeVwiXT9hKz1cIkFic2F1Z3N0YXRpb248YnIvPlwiOlwicmVjeWNsaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiV2VydHN0b2ZmaG9mPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6cGVzY2V0YXJpYW5cIl0/YSs9XCJwZXNjZXRhcmlzY2hlIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnBlc2NldGFyaWFuXCJdJiYoYSs9XCJudXIgcGVzY2V0YXJpc2NoZSBHZXJpY2h0ZTxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OnZlZ2V0YXJpYW5cIl0/XG4gICAgICAgIGErPVwidmVnZXRhcmlzY2hlIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnZlZ2V0YXJpYW5cIl0mJihhKz1cIm51ciB2ZWdldGFyaXNjaGUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpsYWN0b192ZWdldGFyaWFuXCJdP2ErPVwibGFjdG8tdmVnZXRhcmlzY2hlIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmxhY3RvX3ZlZ2V0YXJpYW5cIl0mJihhKz1cIm51ciBsYWN0by12ZWdldGFyaXNjaGUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpvdm9fdmVnZXRhcmlhblwiXT9hKz1cIm92by12ZWdldGFyaXNjaGUgR2VyaWNodGUgdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6b3ZvX3ZlZ2V0YXJpYW5cIl0mJihhKz1cIm51ciBvdm8tdmVnZXRhcmlzY2hlIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6dmVnYW5cIl0/YSs9XCJ2ZWdhbmUgR2VyaWNodGUgdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6dmVnYW5cIl0mJlxuICAgICAgICAoYSs9XCJudXIgdmVnYW5lIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6ZnJ1aXRhcmlhblwiXT9hKz1cImZydXRhcmlzY2hlIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmZydWl0YXJpYW5cIl0mJihhKz1cIm51ciBmcnV0YXJpc2NoZSBHZXJpY2h0ZTxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0OnJhd1wiXT9hKz1cInJvaGtcXHUwMGY2c3RsaWNoZSBHZXJpY2h0ZSB2b3JoYW5kZW48YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpyYXdcIl0mJihhKz1cIm51ciByb2hrXFx1MDBmNnN0bGljaGUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpnbHV0ZW5fZnJlZVwiXT9hKz1cImdsdXRlbmZyZWllIEdlcmljaHRlIHZvcmhhbmRlbjxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmdsdXRlbl9mcmVlXCJdJiYoYSs9XCJudXIgZ2x1dGVuZnJlaWUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpkYWlyeV9mcmVlXCJdP2ErPVwibWlsY2hmcmVpZSBHZXJpY2h0ZSB2b3JoYW5kZW48YnIvPlwiOlxuICAgICAgICBcIm9ubHlcIj09YltcImRpZXQ6ZGFpcnlfZnJlZVwiXSYmKGErPVwibnVyIG1pbGNoZnJlaWUgR2VyaWNodGU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpsYWN0b3NlX2ZyZWVcIl0/YSs9XCJsYWt0b3NlZnJlaWUgR2VyaWNodGUgdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6bGFjdG9zZV9mcmVlXCJdJiYoYSs9XCJudXIgbGFrdG9zZWZyZWllIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6aGFsYWxcIl0/YSs9XCJIYWxcXHUwMTAxbCBHZXJpY2h0ZSB2b3JoYW5kZW48YnIvPlwiOlwib25seVwiPT1iW1wiZGlldDpoYWxhbFwiXSYmKGErPVwibnVyIEhhbFxcdTAxMDFsIEdlcmljaHRlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6a29zaGVyXCJdP2ErPVwia29zY2hlcmUgR2VyaWNodGUgdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6a29zaGVyXCJdJiYoYSs9XCJudXIga29zY2hlcmUgR2VyaWNodGU8YnIvPlwiKTtcInB1YlwiPT1iLmFtZW5pdHkmJihhKz1cIkdhc3RzdFxcdTAwZTR0dGU8YnIvPlwiKTtcImJhclwiPT1cbiAgICBiLmFtZW5pdHkmJihhKz1cIkJhcjxici8+XCIpO1wieWVzXCI9PWIuZnJvemVuX3lvZ3VydCYmKGErPVwiRnJvemVuIFlvZ3VydCBpbSBBbmdlYm90PGJyLz5cIik7XCJ5ZXNcIj09Yi5zbHVzaF9pY2UmJihhKz1cIlNsdXNoIEljZSBpbSBBbmdlYm90PGJyLz5cIik7XCJ5ZXNcIj09Yi5jYWtlJiYoYSs9XCJLdWNoZW50ZWlsY2hlbiwgR2ViXFx1MDBlNGNrIGV0Yy4gaW0gQW5nZWJvdDxici8+XCIpO1wieWVzXCI9PWIuY29mZmVlJiYoYSs9XCJLYWZmZWVnZXRyXFx1MDBlNG5rZSBpbSBBbmdlYm90PGJyLz5cIik7XCJ5ZXNcIj09Yi5kcmlua3MmJihhKz1cIkdldHJcXHUwMGU0bmtlIGltIEFuZ2Vib3Q8YnIvPlwiKTtcImJpZXJnYXJ0ZW5cIj09Yi5hbWVuaXR5JiYoYSs9XCJCaWVyZ2FydGVuPGJyLz5cIik7XCJyZXN0YXVyYW50XCI9PWIuYW1lbml0eSYmKGErPVwiUmVzdGF1cmFudDxici8+XCIpO1wiZmFzdF9mb29kXCI9PWIuYW1lbml0eSYmKGErPVwiRmFzdCBGb29kIFJlc3RhdXJhbnQ8YnIvPlwiKTtpZigoXCJjYWZlXCI9PWIuYW1lbml0eXx8XG4gICAgICAgIFwiY29mZmVlX3Nob3BcIj09Yi5hbWVuaXR5KSYmXCJpY2VfY3JlYW1cIiE9Yi5jdWlzaW5lKWErPVwiQ2FmXFx1MDBlOSwgQmlzdHJvPGJyLz5cIjtpZihcImNhZmVcIj09Yi5hbWVuaXR5JiZcImljZV9jcmVhbVwiPT1iLmN1aXNpbmV8fFwiaWNlX2NyZWFtXCI9PWIuYW1lbml0eSlhKz1cIkVpc2NhZmU8YnIvPlwiO1wiYWxwaW5lX2h1dFwiPT1iLnRvdXJpc20mJihhKz1cIkJlcmdoXFx1MDBmY3R0ZTxici8+XCIpO1wiYXF1YXJpdW1cIj09Yi50b3VyaXNtJiYoYSs9XCJBcXVhcml1bTxici8+XCIpO1wiYXBhcnRtZW50XCI9PWIudG91cmlzbSYmKGErPVwiRmVyaWVud29obnVuZzxici8+XCIpO1wiYXR0cmFjdGlvblwiPT1iLnRvdXJpc20mJihhKz1cIlNlaGVuc3dcXHUwMGZjcmRpZ2tlaXQ8YnIvPlwiKTtcImFydHdvcmtcIj09Yi50b3VyaXNtJiYoYSs9XCJTa3VscHR1cjxici8+XCIpO1wiY2FtcF9zaXRlXCI9PWIudG91cmlzbSYmKGErPVwiQ2FtcGluZ3BsYXR6PGJyLz5cIik7XCJjYXJhdmFuX3NpdGVcIj09Yi50b3VyaXNtJiYoYSs9XCJXb2hubW9iaWxzdGVsbHBsYXR6PGJyLz5cIik7XG4gICAgXCJjaGFsZXRcIj09Yi50b3VyaXNtJiYoYSs9XCJGZXJpZW53b2hudW5nIC8taGF1czxici8+XCIpO1wiZ2FsbGVyeVwiPT1iLnRvdXJpc20mJihhKz1cIkt1bnN0Z2FsZXJpZTxici8+XCIpO1wiZ3Vlc3RfaG91c2VcIj09Yi50b3VyaXNtJiYoYSs9XCJQZW5zaW9uLCBHYXN0aGF1cywgQmVkICYgQnJlYWtmYXN0PGJyLz5cIik7XCJob3N0ZWxcIj09Yi50b3VyaXNtJiYoYSs9XCJKdWdlbmRoZXJiZXJnZSwgSG9zdGVsPGJyLz5cIik7XCJob3RlbFwiPT1iLnRvdXJpc20mJihhKz1cIkhvdGVsPGJyLz5cIik7XCJtb3RlbFwiPT1iLnRvdXJpc20mJihhKz1cIk1vdGVsPGJyLz5cIik7XCJtdXNldW1cIj09Yi50b3VyaXNtJiYoYSs9XCJNdXNldW08YnIvPlwiKTtcInBpY25pY19zaXRlXCI9PWIudG91cmlzbSYmKGErPVwiUmFzdC0gdW5kIFBpY2tuaWNrcGxhdHo8YnIvPlwiKTtcInRoZW1lX3BhcmtcIj09Yi50b3VyaXNtJiYoYSs9XCJGcmVpemVpdC0gb2RlciBUaGVtZW5wYXJrPGJyLz5cIik7XCJ2aWV3cG9pbnRcIj09Yi50b3VyaXNtJiYoYSs9XCJBdXNzaWNodHNwdW5rdDxici8+XCIpO1xuICAgIFwid2lsZGVybmVzc19odXRcIj09Yi50b3VyaXNtJiYoYSs9XCJTY2h1dHpoXFx1MDBmY3R0ZTxici8+XCIpO1wid2luZV9jZWxsYXJcIj09Yi50b3VyaXNtJiYoYSs9XCJXZWlua2VsbGVyPGJyLz5cIik7XCJ6b29cIj09Yi50b3VyaXNtJiYoYSs9XCJab28gLyBUaWVycGFyazxici8+XCIsXCJlbmNsb3N1cmVcIj09Yi56b28mJihhKz1cIm1pdCBXaWxkZ2VoZWdlPGJyLz5cIiksXCJwZXR0aW5nX3pvb1wiPT1iLnpvbyYmKGErPVwibWl0IFN0cmVpY2hlbHpvbzxici8+XCIpLFwiZmFsY29ucnlcIj09Yi56b28mJihhKz1cIm1pdCBGYWxrbmVyZWk8YnIvPlwiKSk7XCJ0cmFpbF9yaWRpbmdfc3RhdGlvblwiPT1iLnRvdXJpc20mJihhKz1cIldhbmRlcnJlaXRzdGF0aW9uPGJyLz5cIik7XCJmaXNoaW5nXCI9PWIuY2x1YiYmKGErPVwiQW5nZWx2ZXJlaW48YnIvPlwiKTtcInNwb3J0XCI9PWIuY2x1YiYmXCJmaXNoaW5nXCI9PWIuc3BvcnQmJihhKz1cImZpc2hpbmcgY2x1Yjxici8+XCIpO1wiYW1hdGV1cl9yYWRpb1wiPT1iLmNsdWImJihhKz1cIkFtYXRldXJmdW5rZXI8YnIvPlwiKTtcbiAgICBcImFydFwiPT1iLmNsdWImJihhKz1cIkt1bnN0dmVyZWluPGJyLz5cIik7XCJhc3Ryb25vbXlcIj09Yi5jbHViJiYoYSs9XCJBc3Ryb25vbWlldmVyZWluPGJyLz5cIik7XCJhdXRvbW9iaWxlXCI9PWIuY2x1YiYmKGErPVwiQXV0b21vYmlsdmVyZWluPGJyLz5cIik7XCJib2FyZF9nYW1lc1wiPT1iLmNsdWImJihhKz1cIkJyZXR0c3BpZWx2ZXJlaW48YnIvPlwiKTtcImNhcmRfZ2FtZXNcIj09Yi5jbHViJiYoYSs9XCJLYXJ0ZW5zcGllbHZlcmVpbjxici8+XCIpO1wiY2hhcml0eVwiPT1iLmNsdWImJihhKz1cIkNoYXJpdHktVmVyZWluPGJyLz5cIik7XCJjaGVzc1wiPT1iLmNsdWImJihhKz1cIlNjaGFjaHZlcmVpbjxici8+XCIpO1wiY2luZW1hXCI9PWIuY2x1YiYmKGErPVwiS2lub3ZlcmVpbjxici8+XCIpO1wiY29va2luZ1wiPT1iLmNsdWImJihhKz1cIktvY2h2ZXJlaW48YnIvPlwiKTtcImN1bHR1cmVcIj09Yi5jbHViJiYoYSs9XCJLdWx0dXJ2ZXJlaW48YnIvPlwiKTtcImRvaXR5b3Vyc2VsZlwiPT1iLmNsdWImJihhKz1cImRvaXR5b3Vyc2VsZi1WZXJlaW48YnIvPlwiKTtcbiAgICBcImVxdWVzdHJpYW5cIj09Yi5jbHViJiYoYSs9XCJSZWl0dmVyZWluPGJyLz5cIik7XCJldGhuaWNcIj09Yi5jbHViJiYoYSs9XCJFdGhuaXNjaGVyIFZlcmVpbjxici8+XCIpO1wiZmFuXCI9PWIuY2x1YiYmKGErPVwiRmFudmVyZWluPGJyLz5cIik7XCJmcmVlbWFzb25yeVwiPT1iLmNsdWImJihhKz1cIkZyZWltYXVyZXItVmVyZWluPGJyLz5cIik7XCJnYW1lXCI9PWIuY2x1YiYmKGErPVwiU3BpZWxldmVyZWluPGJyLz5cIik7XCJoaXN0b3J5XCI9PWIuY2x1YiYmKGErPVwiSGlzdG9yaXNjaGVyLVZlcmVpbiAvIFZlcmVpbiBmXFx1MDBmY3IgR2VzY2hpY2h0ZTxici8+XCIpO1wiaHVudGluZ1wiPT1iLmNsdWImJihhKz1cIkphZ2R2ZXJlaW48YnIvPlwiKTtcImxpbnV4XCI9PWIuY2x1YiYmKGErPVwiTGludXgtVmVyZWluPGJyLz5cIik7XCJtb3RvcmN5Y2xlXCI9PWIuY2x1YiYmKGErPVwiTW90b3JyYWR2ZXJlaW48YnIvPlwiKTtcIm11c2ljXCI9PWIuY2x1YiYmKGErPVwiTXVzaWt2ZXJlaW48YnIvPlwiKTtcIm5hdHVyZVwiPT1iLmNsdWImJihhKz1cIk5hdHVydmVyZWluPGJyLz5cIik7XG4gICAgXCJudWRpc21cIj09Yi5jbHViJiYoYSs9XCJOdWRpc3Rlbi1WZXJlaW4gLyBGS0stVmVyZWluPGJyLz5cIik7XCJwaG90b2dyYXBoeVwiPT1iLmNsdWImJihhKz1cIkZvdG9ncmFmaWV2ZXJlaW48YnIvPlwiKTtcInBvbGl0aWNzXCI9PWIuY2x1YiYmKGErPVwiVmVyZWluIGZcXHUwMGZjciBQb2xpdGlrPGJyLz5cIik7XCJyZWxlZ2lvblwiPT1iLmNsdWImJihhKz1cIlBvbGl0aXNjaGVyLVZlcmVpbjxici8+XCIpO1wic2NvdXRcIj09Yi5jbHViJiYoYSs9XCJQZmFkZmluZGVyaW4vUGZhZGZpbmRlcjxici8+XCIpO1wic21va2VcIj09Yi5jbHViJiYoYSs9XCJSYXVjaGVydmVyZWluPGJyLz5cIik7XCJzcG9ydFwiPT1iLmNsdWImJihhKz1cIlNwb3J0dmVyZWluPGJyLz5cIik7XCJ0aGVhdHJlXCI9PWIuY2x1YiYmKGErPVwiVGhlYXRlcnZlcmVpbjxici8+XCIpO1widmV0ZXJhbnNcIj09Yi5jbHViJiYoYSs9XCJWZXRlcmFuZW48YnIvPlwiKTtcImFtdXNlbWVudF9hcmNhZGVcIj09Yi5sZWlzdXJlJiYoYSs9XCJTcGllbGhhbGxlPGJyLz5cIik7XCJiZWFjaF9yZXNvcnRcIj09XG4gICAgYi5sZWlzdXJlJiYoYSs9XCJTdGFuZGJhZDxici8+XCIpO1wiYmlyZF9oaWRlXCI9PWIubGVpc3VyZSYmKGErPVwiVm9nZWxiZW9iYWNodHVuZ3NwdW5rdDxici8+XCIpO1wiY29tbW9uXCI9PWIubGVpc3VyZSYmKGErPVwiXFx1MDBkNmZmZW50bGljaGUgR3JcXHUwMGZjbmZsXFx1MDBlNGNoZW48YnIvPlwiKTtcImNsdWJcIj09Yi5sZWlzdXJlJiYoYSs9XCJDbHViL1ZlcmVpbjxici8+XCIpO1wiZGFuY2VcIj09Yi5sZWlzdXJlJiYoYSs9XCJUYW56ZW48YnIvPlwiKTtcImRvZ19wYXJrXCI9PWIubGVpc3VyZSYmKGErPVwiSHVuZGVwYXJrPGJyLz5cIik7XCJmaXJlcGl0XCI9PWIubGVpc3VyZSYmKGErPVwiRmV1ZXJzdGVsbGU8YnIvPlwiKTtcImZpc2hpbmdcIj09Yi5sZWlzdXJlJiYoYSs9XCJBbmdlbHN0ZWxsZTxici8+XCIpO1wiZ2FyZGVuXCI9PWIubGVpc3VyZSYmKGErPVwiR2FydGVuPGJyLz5cIik7XCJnb2xmX2NvdXJzZVwiPT1iLmxlaXN1cmUmJihhKz1cIkdvbGZwbGF0ejxici8+XCIpO1wiaGFja2Vyc3BhY2VcIj09Yi5sZWlzdXJlJiYoYSs9XCJPcnQgZlxcdTAwZmNyIEhhY2tlcnRyZWZmZW48YnIvPlwiKTtcbiAgICBcImhvcnNlX3JpZGluZ1wiPT1iLmxlaXN1cmUmJihhKz1cIlJlaXRzdGFsbCAvIFJlaXRlcmhvZjxici8+XCIpO1wiaWNlX3JpbmtcIj09Yi5sZWlzdXJlJiYoYSs9XCJFaXNsYXVmYmFobjxici8+XCIpO1wibmF0dXJlX3Jlc2VydmVcIj09Yi5sZWlzdXJlJiYoYSs9XCJOYXR1cnNjaHV0emdlYmlldCAoTlNHKTxici8+XCIpO1wicGFya1wiPT1iLmxlaXN1cmUmJihhKz1cIkdyXFx1MDBmY25hbmxhZ2U8YnIvPlwiKTtcIm1pbmlhdHVyZV9nb2xmXCI9PWIubGVpc3VyZSYmKGErPVwiTWluaWdvbGY8YnIvPlwiKTtcInBpdGNoXCI9PWIubGVpc3VyZSYmKGErPVwiU3BpZWxmZWxkPGJyLz5cIik7XCJwaXRjaFwiPT1iLmxlaXN1cmUmJlwieWVzXCI9PWIuYnVpbGRpbmcmJihhKz1cIlNwb3J0aGFsbGU8YnIvPlwiKTtcInBsYXlncm91bmRcIj09Yi5sZWlzdXJlJiZcInllc1wiPT1iLmJ1aWxkaW5nP2ErPVwiU3BpZWxzY2hldW5lPGJyLz5cIjpcInBsYXlncm91bmRcIj09Yi5sZWlzdXJlJiYoYSs9XCJTcGllbHBsYXR6PGJyLz5cIik7XCJzb2NpYWxfY2x1YlwiPT1cbiAgICBiLmxlaXN1cmUmJihhKz1cIlRyZWZmcHVua3QgZlxcdTAwZmNyIEZyZWl6ZWl0Z3J1cHBlbjxici8+XCIpO1wic3BhXCI9PWIubGVpc3VyZSYmKGErPVwiSGVpbGJhZCAvIFNwYTxici8+XCIpO1wic3BvcnRzX2NlbnRyZVwiPT1iLmxlaXN1cmUmJihhKz1cIlNwb3J0emVudHJ1bTxici8+XCIpO1wiY2xpbWJpbmdfYWR2ZW50dXJlXCI9PWIuc3BvcnQmJihhKz1cIlNlaWxnYXJ0ZW48YnIvPlwiKTtcInN0YWRpdW1cIj09Yi5sZWlzdXJlJiYoYSs9XCJTdGFkaW9uPGJyLz5cIik7XCJzd2ltbWluZ19wb29sXCI9PWIubGVpc3VyZSYmKGErPVwiU2Nod2ltbWJlY2tlbjxici8+XCIpO1widHJhY2tcIj09Yi5sZWlzdXJlJiYoYSs9XCJSZW5uYmFobjxici8+XCIpO1wid2F0ZXJfcGFya1wiPT1iLmxlaXN1cmUmJihhKz1cIldhc3NlcnBhcms8YnIvPlwiKTtcIndpbGRsaWZlX2hpZGVcIj09Yi5sZWlzdXJlJiYoYSs9XCJXaWxkYmVvYmFjaHR1bmdzcHVua3Q8YnIvPlwiKTtcImFkdWx0X2dhbWluZ19jZW50cmVcIj09Yi5sZWlzdXJlJiYoYSs9XCJTcGllbG90aGVrPGJyLz5cIik7XG4gICAgXCJib3dsaW5nX2FsbGV5XCI9PWIubGVpc3VyZSYmXCIxMHBpblwiPT1iLnNwb3J0JiYoYSs9XCJCb3dsaW5nY2VudGVyPGJyLz5cIik7XCJib3dsaW5nX2FsbGV5XCI9PWIubGVpc3VyZSYmXCI5cGluXCI9PWIuc3BvcnQmJihhKz1cIktlZ2VsYmFobjxici8+XCIpO2lmKFwia2FydGluZ1wiPT1iLnNwb3J0fHxcIm1vdG9yXCI9PWIuc3BvcnQpYSs9XCJLYXJ0LS9Nb3RvcnNwb3J0PGJyLz5cIjtpZihcImRhcnRzXCI9PWIuc3BvcnR8fFwiZGFydFwiPT1iLnNwb3J0KWErPVwiRGFydHM8YnIvPlwiO2lmKGJbXCJwaXN0ZTp0eXBlXCJdKXN3aXRjaChiW1wicGlzdGU6dHlwZVwiXSl7Y2FzZSBcInNraXRvdXJcIjphKz1cIlBpc3RlIGZcXHUwMGZjciBTa2l0b3VyZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJkb3duaGlsbFwiOmErPVwiU2tpYWJmYWhydDxici8+XCI7YnJlYWs7Y2FzZSBcInNsZWRcIjphKz1cIlJvZGVsYmVyZyAvIFJvZGVsc3RyZWNrZTxici8+XCI7YnJlYWs7Y2FzZSBcIm5vcmRpY1wiOmErPVwiTGFuZ2xhdWYgUGlzdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJoaWtlXCI6YSs9XG4gICAgICAgIFwiU2NobmVlc2NodWgtIHVuZCBXaW50ZXJ3YW5kZXJ3ZWc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzbm93X3BhcmtcIjphKz1cIlNub3ctUGFyazxici8+XCJ9aWYoYi5zcG9ydClzd2l0Y2goYi5zcG9ydCl7Y2FzZSBcInN1cmZpbmdcIjphKz1cIlN1cmZlbjxici8+XCI7YnJlYWs7Y2FzZSBcImtpdGVzdXJmaW5nXCI6YSs9XCJLaXRlc3VyZmVuPGJyLz5cIjticmVhaztjYXNlIFwid2F0ZXJfc2tpXCI6YSs9XCJXYXNzZXJza2k8YnIvPlwifWlmKGIuYWVyaWFsd2F5KXN3aXRjaChiLmFlcmlhbHdheSl7Y2FzZSBcImNhYmxlX2JhclwiOmErPVwiTGlmdCBtaXQgR29uZGVsbjxici8+XCI7YnJlYWs7Y2FzZSBcImdvbmRvbGFcIjphKz1cIkxpZnQgbWl0IEdvbmRlbG48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaGFpcl9saWZ0XCI6YSs9XCJTZXNzZWxsaWZ0PGJyLz5cIjticmVhaztjYXNlIFwibWl4ZWRfbGlmdFwiOmErPVwiTGlmdCBtaXQgU2Vzc2VsbiB1bmQgR29uZGVsbjxici8+XCI7YnJlYWs7Y2FzZSBcImRyYWdfbGlmdFwiOmErPVwiU2tpbGlmdDxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJ0LWJhclwiOmErPVwiVC1MaWZ0PGJyLz5cIjticmVhaztjYXNlIFwidC1iYXJcIjphKz1cIlQtTGlmdCAoZWluc2VpdGlnKTxici8+XCI7YnJlYWs7Y2FzZSBcInBsYXR0ZXJcIjphKz1cIkxpZnQgbWl0IFNpdHpzY2hlaWJlPGJyLz5cIjticmVhaztjYXNlIFwicm9wZV90b3dcIjphKz1cIkJcXHUwMGZjZ2VsbGlmdDxici8+XCI7YnJlYWs7Y2FzZSBcIm1hZ2ljX2NhcnBldFwiOmErPVwiQmVmXFx1MDBmNnJkZXJ1bmdzYmFuZDxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVuYmVrYW5udFwifVwibW9zcXVlXCI9PWIuYnVpbGRpbmcmJihhKz1cIk1vc2NoZWU8YnIvPlwiKTtcInN5bmFnb2d1ZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJTeW5hZ29nZTxici8+XCIpO1wiYXBhcnRtZW50c1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJXb2hudW5nPGJyLz5cIik7XCJmYXJtXCI9PWIuYnVpbGRpbmcmJihhKz1cIkZhcm08YnIvPlwiKTtcImhvdGVsXCI9PWIuYnVpbGRpbmcmJihhKz1cIkhvdGVsPGJyLz5cIik7XCJob3VzZVwiPT1iLmJ1aWxkaW5nJiZcbiAgICAoYSs9XCJIYXVzPGJyLz5cIik7XCJkZXRhY2hlZFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJGcmVpc3RlaGVuZDxici8+XCIpO1wicmVzaWRlbnRpYWxcIj09Yi5idWlsZGluZyYmKGErPVwiUmVzaWRlbno8YnIvPlwiKTtpZihcImRvbWl0b3J5XCI9PWIuYnVpbGRpbmd8fFwicmVzaWRlbnRpYWwgcGx1c1wiPT1iLmJ1aWxkaW5nKWErPVwiV29obmhlaW08YnIvPlwiO1widGVycmFjZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJUZXJyYXNzZTxici8+XCIpO1wiaG91c2Vib2F0XCI9PWIuYnVpbGRpbmcmJihhKz1cIkhhdXNib290PGJyLz5cIik7XCJidW5nYWxvd1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJCdW5nYWxvdzxici8+XCIpO1wic3RhdGljX2NhcmF2YW5cIj09Yi5idWlsZGluZyYmKGErPVwiU3RlaGVuZGVyIFdvaG53YWdlbjxici8+XCIpO1wiY29tbWVyY2lhbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLb21tZXJ6aWVsbDxici8+XCIpO1wicmV0YWlsXCI9PWIuYnVpbGRpbmcmJihhKz1cIlZlcmthdWY8YnIvPlwiKTtcIndhcmVob3VzZVwiPT1iLmJ1aWxkaW5nJiZcbiAgICAoYSs9XCJMYWdlcmhhdXM8YnIvPlwiKTtcImJha2Vob3VzZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJCYWNrc3R1YmU8YnIvPlwiKTtcInRlbXBsZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJUZW1wZWw8YnIvPlwiKTtcInNocmluZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJTY2hyZWluPGJyLz5cIik7XCJjaXZpY1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJCXFx1MDBmY3JnZXJsaWNoPGJyLz5cIik7XCJzdGFkaXVtXCI9PWIuYnVpbGRpbmcmJihhKz1cIlN0YWRpdW08YnIvPlwiKTtcInRyYWluX3N0YXRpb25cIj09Yi5idWlsZGluZyYmKGErPVwiQmFobmhvZjxici8+XCIpO1widW5pdmVyc2l0eVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJVbml2ZXJzaXRcXHUwMGU0dDxici8+XCIpO1wicHVibGljXCI9PWIuYnVpbGRpbmcmJihhKz1cIlxcdTAwZDZmZmVudGxpY2hlcyBHZWJcXHUwMGU0dWRlPGJyLz5cIik7XCJicmlkZ2VcIj09Yi5idWlsZGluZyYmKGErPVwiQnJcXHUwMGZjY2tlPGJyLz5cIik7XCJidW5rZXJcIj09Yi5idWlsZGluZyYmKGErPVwiQnVua2VyPGJyLz5cIik7XCJjYWJpblwiPT1cbiAgICBiLmJ1aWxkaW5nJiYoYSs9XCJIXFx1MDBmY3R0ZTxici8+XCIpO1wiY29uc2VydmF0b3J5XCI9PWIuYnVpbGRpbmcmJihhKz1cIldpbnRlcmdhcnRlbjxici8+XCIpO1wiY29uc3RydWN0aW9uXCI9PWIuYnVpbGRpbmcmJihhKz1cIkltIEJhdTxici8+XCIpO1wiZ2FyYWdlXCI9PWIuYnVpbGRpbmcmJihhKz1cIkdhcmFnZTxici8+XCIpO1wiZ2FyYWdlc1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJHYXJhZ2VuPGJyLz5cIik7XCJncmVlbmhvdXNlXCI9PWIuYnVpbGRpbmcmJihhKz1cIkdld1xcdTAwZTRjaHNoYXVzPGJyLz5cIik7XCJoYW5nYXJcIj09Yi5idWlsZGluZyYmKGErPVwiSGFuZ2FyPGJyLz5cIik7XCJodXRcIj09Yi5idWlsZGluZyYmKGErPVwiSFxcdTAwZmN0dGU8YnIvPlwiKTtcInBhdmlsbGlvblwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJQYXZpbGxpb248YnIvPlwiKTtcInJvb2ZcIj09Yi5idWlsZGluZyYmKGErPVwiXFx1MDBkY2JlcmRhY2h0PGJyLz5cIik7XCJzaGVkXCI9PWIuYnVpbGRpbmcmJihhKz1cIkdhcnRlbmhcXHUwMGU0dXNjaGVuPGJyLz5cIik7XG4gICAgXCJ0cmFuc2Zvcm1lcl90b3dlclwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJUcmFuc2Zvcm1hdG9yIFR1cm08YnIvPlwiKTtcInNlcnZpY2VcIj09Yi5idWlsZGluZyYmKGErPVwiU2VydmljZS1TdGVsbGU8YnIvPlwiKTtcImtpb3NrXCI9PWIuYnVpbGRpbmcmJihhKz1cIktpb3NrPGJyLz5cIik7XCJjYXJwb3J0XCI9PWIuYnVpbGRpbmcmJihhKz1cIkNhcnBvcnQ8YnIvPlwiKTtcInJ1aW5zXCI9PWIuYnVpbGRpbmcmJihhKz1cIlJ1aW5lbjxici8+XCIpO1wiZ2FtYmxpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJTcGllbGhhbGxlPGJyLz5cIik7XCJsaWJyYXJ5XCI9PWIuYW1lbml0eSYmKGErPVwiQlxcdTAwZmNjaGVyZWk8YnIvPlwiKTtcImZvdW50YWluXCI9PWIuYW1lbml0eSYmKGErPVwiQnJ1bm5lbjxici8+XCIpO1wiYXR0cmFjdGlvblwiPT1iLmFtZW5pdHkmJihhKz1cIlNlaGVuc3dcXHUwMGZjcmRpZ2tlaXQ8YnIvPlwiKTtpZihcInNvY2lhbF9jZW50cmVcIj09Yi5hbWVuaXR5fHxcImNsdWJcIj09Yi5hbWVuaXR5KWErPVwiVmVyZWluIC8gQ2x1Yjxici8+XCI7XG4gICAgXCJ0b3duaGFsbFwiPT1iLmFtZW5pdHkmJihhKz1cIlJhdGhhdXMgLyBCXFx1MDBmY3JnZXJoYXVzPGJyLz5cIik7XCJiZW5jaFwiPT1iLmFtZW5pdHkmJihhKz1cIlBhcmtiYW5rPGJyLz5cIik7aWYoXCJncmF2ZV95YXJkXCI9PWIuYW1lbml0eXx8XCJjZW1ldGVyeVwiPT1iLmxhbmR1c2UpYSs9XCJGcmllZGhvZjxici8+XCI7XCJwb3N0X2JveFwiPT1iLmFtZW5pdHkmJihhKz1cIkJyaWVma2FzdGVuPGJyLz5cIik7XCJwb3N0X29mZmljZVwiPT1iLmFtZW5pdHkmJihhKz1cIlBvc3RhbXQ8YnIvPlwiKTtcInRlbGVwaG9uZVwiPT1iLmFtZW5pdHkmJihhKz1cIlRlbGVmb248YnIvPlwiKTtcImF0bVwiPT1iLmFtZW5pdHkmJihhKz1cIkdlbGRhdXRvbWF0PGJyLz5cIik7XCJiYW5rXCI9PWIuYW1lbml0eSYmKGErPVwiQmFua2ZpbGlhbGU8YnIvPlwiKTtcInRvaWxldHNcIj09Yi5hbWVuaXR5JiZcInllc1wiPT1iLmRpYXBlcj9hKz1cIlxcdTAwZDZmZmVudGxpY2hlIFRvaWxldHRlIG1pdCBXaWNrZWx0aXNjaDxici8+XCI6XCJ0b2lsZXRzXCI9PWIuYW1lbml0eSYmXG4gICAgICAgIChhKz1cIlxcdTAwZDZmZmVudGxpY2hlIFRvaWxldHRlPGJyLz5cIik7XCJzY2hvb2xcIj09Yi5hbWVuaXR5JiZcIjFcIj09YltcImlzY2VkOmxldmVsXCJdP2ErPVwiR3J1bmRzY2h1bGU8YnIvPlwiOlwic2Nob29sXCI9PWIuYW1lbml0eSYmXCIyXCI9PWJbXCJpc2NlZDpsZXZlbFwiXT9hKz1cIlNla3VuZGFyc3R1ZmUgSTxici8+XCI6XCJzY2hvb2xcIj09Yi5hbWVuaXR5JiZcIjNcIj09YltcImlzY2VkOmxldmVsXCJdP2ErPVwiU2VrdW5kYXJzdHVmZSBJSTxici8+XCI6XCJzY2hvb2xcIj09Yi5hbWVuaXR5JiYoYSs9XCJTY2h1bGU8YnIvPlwiKTtcImtpbmRlcmdhcnRlblwiPT1iLmFtZW5pdHkmJihhKz1cIktpbmRlcmdhcnRlbjxici8+XCIpO1wiaW50ZXJuZXRfY2FmZVwiPT1iLmFtZW5pdHkmJihhKz1cIkludGVybmV0Y2FmXFx1MDBlOTxici8+XCIpO1wiZGF5Y2FyZVwiPT1iLmFtZW5pdHkmJihhKz1cIktpbmRlci0gdW5kIEp1Z2VuZHRhZ2Vzc3RcXHUwMGU0dHRlPGJyLz5cIik7XCJjaGlsZGNhcmVcIj09Yi5hbWVuaXR5JiYoYSs9XCJLaW5kZXItIHVuZCBKdWdlbmR0YWdlc3N0XFx1MDBlNHR0ZTxici8+XCIpO1xuICAgIFwidW5pdmVyc2l0eVwiPT1iLmFtZW5pdHkmJihhKz1cIlVuaXZlcnNpdFxcdTAwZTR0L0hvY2hzY2h1bGU8YnIvPlwiKTtcImNvbGxlZ2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJVbml2ZXJzaXRcXHUwMGU0dC9Ib2Noc2NodWxlPGJyLz5cIik7XCJzaGVsdGVyXCI9PWIuYW1lbml0eSYmKGErPVwiVW50ZXJzdGFuZDxici8+XCIpO1wiYmJxXCI9PWIuYW1lbml0eSYmKGErPVwiR3JpbGxwbGF0ejxici8+XCIpO1wibmlnaHRjbHViXCI9PWIuYW1lbml0eSYmKGErPVwiRGlza290aGVrIC8gTmFjaHRrbHViPGJyLz5cIik7XCJiaWN5Y2xlX3BhcmtpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJGYWhycmFkcGFya3BsYXR6PGJyLz5cIik7XCJiaWN5Y2xlX3JlbnRhbFwiPT1iLmFtZW5pdHkmJihhKz1cIkZhaHJyYWR2ZXJsZWloPGJyLz5cIik7XCJib2F0X3NoYXJpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJCb290c3ZlcmxlaWg8YnIvPlwiKTtcImNhcl9zaGFyaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiQ2FyLVNoYXJpbmc8YnIvPlwiKTtcImNpbmVtYVwiPT1iLmFtZW5pdHkmJlxuICAgIChhKz1cIktpbm88YnIvPlwiKTtcInN3aW1taW5nX3Bvb2xcIj09Yi5hbWVuaXR5JiYoYSs9XCJTY2h3aW1tYmFkPGJyLz5cIik7aWYoXCJlbWJhc3N5XCI9PWIuYW1lbml0eXx8XCJlbWJhc3N5XCI9PWIuZGlwbG9tYXRpYylhKz1cIkJvdHNjaGFmdDxici8+XCI7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmXCJjb25zdWxhdGVcIj09Yi5kaXBsb21hdGljJiYoYSs9XCJLb25zdWxhdGU8YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcImNvbnN1bGF0ZV9nZW5lcmFsXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwiR2VuZXJhbGtvbnN1bGF0ZTxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwiaG9ub3JhcnlfY29uc3VsYXRlXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwiSG9ub3JhcmtvbnN1bGF0ZTxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwicGVybWFuZW50X21pc3Npb25cIj09Yi5kaXBsb21hdGljJiYoYSs9XCJTdFxcdTAwZTRuZGlnZSBWZXJ0cmV0dW5nPGJyLz5cIik7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmXCJkZWxlZ2F0aW9uXCI9PVxuICAgIGIuZGlwbG9tYXRpYyYmKGErPVwiRGVsZWdhdGlvbjxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwiaGlnaF9jb21taXNzaW9uXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwiSG9jaGtvbW1pc3NhcmlhdDxici8+XCIpO1wiQmFyZnVzc3BmYWRcIj09Yi5hbWVuaXR5JiYoYSs9XCJCYXJmdVxcdTAwZGZwZmFkPGJyLz5cIik7XCJjYXNpbm9cIj09Yi5hbWVuaXR5JiYoYSs9XCJDYXNpbm88YnIvPlwiKTtcInNwYVwiPT1iLmFtZW5pdHkmJihhKz1cIkhlaWxiYWQgLyBTcGE8YnIvPlwiKTtcInN0YWJsZXNcIj09Yi5hbWVuaXR5JiYoYSs9XCJSZWl0c3RhbGwgLyBSZWl0ZXJob2Y8YnIvPlwiKTtcIndhdGVyaW5nX3BsYWNlXCI9PWIuYW1lbml0eSYmKGErPVwiV2Fzc2Vyc3RlbGxlIC8gVHJcXHUwMGU0bmtlPGJyLz5cIik7XCJ5ZXNcIj09Yi53YXRlcmluZ19wbGFjZSYmKGErPVwiV2Fzc2Vyc3RlbGxlIC8gVHJcXHUwMGU0bmtlPGJyLz5cIik7XCJ3YXRlcl9wb2ludFwiPT1iLmFtZW5pdHkmJihhKz1cImdyb1xcdTAwZGZlIFRyaW5rd2Fzc2Vyc3RlbGxlPGJyLz5cIik7XG4gICAgXCJ0YXhpXCI9PWIuYW1lbml0eSYmKGErPVwiVGF4aTxici8+XCIpO1wiY2FyX3dhc2hcIj09Yi5hbWVuaXR5JiYoYSs9XCJBdXRvd2FzY2hhbmxhZ2U8YnIvPlwiKTtcImJyb3RoZWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJCb3JkZWxsLCBGcmV1ZGVuaGF1czxici8+XCIpO1wic3RyaXBjbHViXCI9PWIuYW1lbml0eSYmKGErPVwiU3RyaXBjbHViPGJyLz5cIik7XCJzd2luZ2VyY2x1YlwiPT1iLmFtZW5pdHkmJihhKz1cIlN3aW5nZXJjbHViPGJyLz5cIik7XCJwbGFuZXRhcml1bVwiPT1iLmFtZW5pdHkmJihhKz1cIlBsYW5ldGFyaXVtPGJyLz5cIik7XCJjb3VydGhvdXNlXCI9PWIuYW1lbml0eSYmKGErPVwiR2VyaWNodDxici8+XCIpO1wiY3JlbWF0b3JpdW1cIj09Yi5hbWVuaXR5JiYoYSs9XCJLcmVtYXRvcml1bTxici8+XCIpO2lmKFwiY3J5cHRcIj09Yi5hbWVuaXR5fHxcImNyeXB0XCI9PWIuYnVpbGRpbmcpYSs9XCJLcnlwdGE8YnIvPlwiO1wiaHVudGluZ19zdGFuZFwiPT1iLmFtZW5pdHkmJihhKz1cIkhvY2hzaXR6PGJyLz5cIik7XCJwaG90b19ib290aFwiPT1cbiAgICBiLmFtZW5pdHkmJihhKz1cIkZvdG9hdXRvbWF0PGJyLz5cIik7XCJwcmlzb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJHZWZcXHUwMGU0bmduaXM8YnIvPlwiKTtcInJhbmdlcl9zdGF0aW9uXCI9PWIuYW1lbml0eSYmKGErPVwiTmF0aW9uYWwgUGFyayBSYW5nZXIgU3RhdGlvbjxici8+XCIpO1wicmVnaXN0ZXJfb2ZmaWNlXCI9PWIuYW1lbml0eSYmKGErPVwiU3RhbmRlc2FtdDxici8+XCIpO1wibWFya2V0cGxhY2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJNYXJrdHBsYXR6IC8gV29jaGVubWFya3Q8YnIvPlwiKTtcInNvbGFyaXVtXCI9PWIuYW1lbml0eSYmKGErPVwiU29sYXJpdW08YnIvPlwiKTtcInNhdW5hXCI9PWIuYW1lbml0eSYmKGErPVwiU2F1bmE8YnIvPlwiKTtcInNob3dlclwiPT1iLmFtZW5pdHkmJihhKz1cIlxcdTAwZjZmZmVudGxpY2hlIER1c2NoZTxici8+XCIpO2lmKFwid2FzdGVfZGlzcG9zYWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJNXFx1MDBmY2xsZW50c29yZ3VuZyBhdWYgXFx1MDBmNmZmZW50bGljaGVuIFBsXFx1MDBlNHR6ZW48YnIvPlwiLFxuICAgICAgICBiLndhc3RlKSlzd2l0Y2goYSs9XCJBcnQ6IFwiLGIud2FzdGUpe2Nhc2UgXCJ0cmFzaFwiOmErPVwiQWxsZ2VtZWluZXIgTVxcdTAwZmNsbDxici8+XCI7YnJlYWs7Y2FzZSBcIm9pbFwiOmErPVwiT2lsPGJyLz5cIjticmVhaztjYXNlIFwiZHJ1Z3NcIjphKz1cIlBoYXJtYXpldXRpc2NoPGJyLz5cIjticmVhaztjYXNlIFwib3JnYW5pY1wiOmErPVwiS29tcG9zdDxici8+XCI7YnJlYWs7Y2FzZSBcInBsYXN0aWNcIjphKz1cIlBsYXN0aWs8YnIvPlwiO2JyZWFrO2Nhc2UgXCJydWJibGVcIjphKz1cIlNjaHV0dDxici8+XCI7YnJlYWs7Y2FzZSBcImNpZ2FyZXR0ZXNcIjphKz1cIlppZ2FyZXR0ZW48YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJBbGxnZW1laW5lciBNXFx1MDBmY2xsPGJyLz5cIn1pZihcIndhc3RlX2Jhc2tldFwiPT1iLmFtZW5pdHl8fFwiZG9nX2V4Y3JlbWVudFwiPT1iLndhc3RlKWErPVwiSHVuZGUtQ29kZSBNXFx1MDBmY2xsY29udGFpbmVyPGJyLz5cIjtpZihcInNjb3V0X2NhbXBcIj09Yi5hbWVuaXR5fHxcInNjb3V0X2h1dFwiPT1iLmFtZW5pdHl8fFxuICAgICAgICBcInNjb3V0X2hhbGxcIj09Yi5hbWVuaXR5KWErPVwiUGZhZGZpbmRlcmhlaW08YnIvPlwiO1wiZmVycnlfdGVybWluYWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJGXFx1MDBlNGhyaGFmZW48YnIvPlwiKTtcImJ1cmVhdV9kZV9jaGFuZ2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJHZWxkd2VjaHNlbHN0dWJlPGJyLz5cIik7XCJ5b3V0aF9jbHViXCI9PWIuYW1lbml0eSYmKGErPVwiSnVnZW5kemVudHJ1bTxici8+XCIpO1wiZmVzdGl2YWxfZ3JvdW5kc1wiPT1iLmFtZW5pdHkmJihhKz1cIkZlc3RpdmFsZ2VsXFx1MDBlNG5kZTxici8+XCIpO2lmKFwieWVzXCI9PWIub3BlbmZpcmV8fFwieWVzXCI9PWIuZmlyZXBsYWNlKWErPVwiT2ZmZW5lIEZldWVyc3RlbGxlPGJyLz5cIjtpZihcInZlbmRpbmdfbWFjaGluZVwiPT1iLmFtZW5pdHkpaWYoYi52ZW5kaW5nKXN3aXRjaChiLnZlbmRpbmcpe2Nhc2UgXCJhZG1pc3Npb25fdGlja2V0c1wiOmErPVwiRWludHJpdHRza2FydGVuYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImFuaW1hbF9mZWVkXCI6YSs9XCJUaWVyZnV0dGVyYXV0b21hdDxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJiaWN5Y2xlX3R1YmVcIjphKz1cIkZhaHJyYWRzY2hsYXVjaGF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJib29rc1wiOmErPVwiQlxcdTAwZmNjaGVyYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImNhbmRsZXNcIjphKz1cIktlcnplbmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaWdhcmV0dGVzXCI6YSs9XCJaaWdhcmV0dGVuYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImNoZW1pc3RcIjphKz1cIkFwb3RoZWtlbi9Ecm9nZXJpZSBBdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiY29uZG9tc1wiOmErPVwiS29uZG9tYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcImRyaW5rc1wiOmErPVwiR2V0clxcdTAwZTRua2VhdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiZWxlY3Ryb25pY3NcIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIEVsZWt0cm8tWnViZWhcXHUwMGY2cjxici8+XCI7YnJlYWs7Y2FzZSBcImVsb25nYXRlZF9jb2luXCI6YSs9XCJNXFx1MDBmY256cHJcXHUwMGU0Z3VuZ3NhdXRvbWF0PGJyLz5cIjticmVhaztcbiAgICAgICAgY2FzZSBcImV4Y3JlbWVudF9iYWdzXCI6YSs9XCJIdW5kZXRcXHUwMGZjdGVuc3BlbmRlcjxici8+XCI7YnJlYWs7Y2FzZSBcImZlbWluaW5lX2h5Z2llbmVcIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIERhbWVuaHlnaWVuZXByb2R1a3RlPGJyLz5cIjticmVhaztjYXNlIFwiZmlyc3RfYWlkXCI6YSs9XCJFcnN0ZS1IaWxmZS1BdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiZmlzaGluZ190YWNrbGVcIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIEFuZ2VsenViZWhcXHUwMGY2cjxici8+XCI7YnJlYWs7Y2FzZSBcImZpc2hpbmdfYmFpdFwiOmErPVwiQW5nZWxrXFx1MDBmNmRlcmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmbG93ZXJzXCI6YSs9XCJCbHVtZW5hdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwiZm9vZFwiOmErPVwiTGViZW5zbWl0dGVsLUF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJpY2VfY3ViZXNcIjphKz1cIkVpc3dcXHUwMGZjcmZlbGF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJpY2VfY3JlYW1cIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIFNwZWlzZWVpczxici8+XCI7XG4gICAgICAgICAgICBicmVhaztjYXNlIFwiaW5rX2NhcnRyaWRnZXNcIjphKz1cIkRydWNrZXJwYXRyb25lbiBBdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwibGF1bmRyeV9kZXRlcmdlbnRcIjphKz1cIldhc2NobWl0dGVsYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInB1YmxpY190cmFuc3BvcnRfdGlja2V0c1wiOmErPVwiRmFocmthcnRlbmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJuZXdzcGFwZXJcIjphKz1cIlplaXR1bmdzYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInBhcmNlbF9waWNrdXBcIjphKz1cIlBhY2tzdGF0aW9uPGJyLz5cIjticmVhaztjYXNlIFwicGFyY2VsX21haWxfaW5cIjphKz1cIlBha2V0c3RhdGlvbjxici8+XCI7YnJlYWs7Y2FzZSBcInBhcmtpbmdfdGlja2V0c1wiOmErPVwiUGFya3NjaGVpbmF1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwaG90b3NcIjphKz1cIkZvdG9hdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwic2V4X3RveXNcIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIFNleHNwaWVsemV1Zzxici8+XCI7YnJlYWs7XG4gICAgICAgIGNhc2UgXCJTSU1fY2FyZHNcIjphKz1cIkF1dG9tYXQgZlxcdTAwZmNyIFNJTSBLYXJ0ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJzdGFtcHNcIjphKz1cIkJyaWVmbWFya2VuYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInN3ZWV0c1wiOmErPVwiU1xcdTAwZmNcXHUwMGRmaWdrZWl0ZW5hdXRvbWF0PGJyLz5cIjticmVhaztjYXNlIFwic3lyaW5nZXNcIjphKz1cIlNwcml0emVuYXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInRvbGxcIjphKz1cIk1hdXQtQXV0b21hdDxici8+XCI7YnJlYWs7Y2FzZSBcInRveXNcIjphKz1cIlNwaWVsemV1Z2F1dG9tYXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bWJyZWxsYXNcIjphKz1cIlJlZ2Vuc2NoaXJtYXV0b21hdDxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIlZlcmthdWZzYXV0b21hdDxici8+XCJ9ZWxzZSBhKz1cIlZlcmthdWZzYXV0b21hdDxici8+XCI7XCJhcnRzX2NlbnRyZVwiPT1iLmFtZW5pdHkmJihhKz1cIkt1bHR1cnplbnRydW08YnIvPlwiKTtcImFydHdvcmtcIj09Yi5hbWVuaXR5JiYoYSs9XCJLdW5zdHdlcmsgLyBLdW5zdG9iamVrdDxici8+XCIpO1xuICAgIFwibXVzZXVtXCI9PWIuYW1lbml0eSYmKGErPVwiTXVzZXVtPGJyLz5cIik7XCJ0aGVhdHJlXCI9PWIuYW1lbml0eSYmKGErPVwiVGhlYXRlcjxici8+XCIpO1wiY2F0aGVkcmFsXCI9PWIuYnVpbGRpbmcmJihhKz1cIkthdGhlZHJhbGU8YnIvPlwiKTtcImNodXJjaFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLaXJjaGU8YnIvPlwiKTtcImNoYXBlbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLYXBlbGxlPGJyLz5cIik7XCJwbGFjZV9vZl93b3JzaGlwXCI9PWIuYW1lbml0eSYmKGErPVwiS2lyY2hlIC8gS3VsdHN0XFx1MDBlNHR0ZTxici8+XCIpO1widmlsbGFnZVwiPT1iLmFiYW5kb25lZCYmKGErPVwiVmVybGFzc2VuZSBTdGFkdDxici8+XCIpO1widGhlbWVfcGFya1wiPT1iW1wiYWJhbmRvbmVkOnRvdXJpc21cIl0mJihhKz1cIlZlcmxhc3NlbmVyIFZlcmduXFx1MDBmY2d1bmdzcGFyazxici8+XCIpO1wicHJpc29uX2NhbXBcIj09YltcImFiYW5kb25lZDphbWVuaXR5XCJdJiZcImNvbmNlbnRyYXRpb25fY2FtcFwiPT1bXCJjb25jZW50cmF0aW9uX2NhbXBcIl0mJlxuICAgIChhKz1cIktaIEdlZGVua3N0XFx1MDBlNHR0ZTxici8+XCIpO1wieWVzXCI9PWIuYWJhbmRvbmVkJiZcImJ1bmtlclwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJWZXJsYXNzZW5lIEJ1bmtlcmFubGFnZTxici8+XCIpO1wieWVzXCI9PWIuYWJhbmRvbmVkJiZcImJhcnJhY2tzXCI9PWIubWlsaXRhcnkmJihhKz1cIlZlcmxhc3NlbmUgTWlsaXRcXHUwMGU0cmJhcmFja2VuPGJyLz5cIik7XCJ5ZXNcIj09Yi5hYmFuZG9uZWQmJlwiYWlyZmllbGRcIj09Yi5taWxpdGFyeSYmKGErPVwiVmVybGFzc2VuZSBNaWxpdFxcdTAwZTRyZmx1Z3BsYXR6PGJyLz5cIik7XCJtb25hc3RlcnlcIj09Yi5oaXN0b3JpYyYmKGErPVwiSGlzdG9yaXNjaGVzIEtsb3N0ZXI8YnIvPlwiKTtcIm1vbmFzdGVyeVwiPT1iLmFtZW5pdHkmJihhKz1cIktsb3N0ZXI8YnIvPlwiKTtcIm1vbmFzdGVyeVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLbG9zdGVyPGJyLz5cIik7XCJtYW5vclwiPT1iLmhpc3RvcmljJiYoYSs9XCJHdXRzaGF1cyAvIEhlcnJlbmhhdXM8YnIvPlwiKTtcImJvdW5kYXJ5X3N0b25lXCI9PVxuICAgIGIuaGlzdG9yaWMmJihhKz1cIkhpc3RvcmlzY2hlciBHcmVuenN0ZWluPGJyLz5cIik7XCJtaWxlc3RvbmVcIj09Yi5oaXN0b3JpYyYmKGErPVwiSGlzdG9yaXNjaGVyIE1laWxlbnN0ZWluPGJyLz5cIik7XCJtb251bWVudFwiPT1iLmhpc3RvcmljJiYoYSs9XCJNb251bWVudDxici8+XCIpO1wicGFsYWNlXCI9PWIuaGlzdG9yaWMmJihhKz1cIlBhbGFzdDxici8+XCIpO1wibWluZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJWZXJsYXNzZW5lIE1pbmU8YnIvPlwiKTtcInJ1aW5zXCI9PWIuaGlzdG9yaWMmJihhKz1cIlJ1aW5lPGJyLz5cIik7XCJoYXJib3VyXCI9PWIuaGlzdG9yaWNfdXNhZ2UmJihhKz1cImhpc3RvcmlzY2hlciBIYWZlbjxici8+XCIpO1wicnVuZV9zdG9uZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJSdW5lbnN0ZWluPGJyLz5cIik7XCJiYXR0bGVmaWVsZFwiPT1iLmhpc3RvcmljJiYoYSs9XCJTY2hsYWNodGZlbGQ8YnIvPlwiKTtcImJsYWNrc21pdGhcIj09Yi5oaXN0b3JpYyYmKGErPVwiSGlzdG9yaXNjaGUgU2NobWllZGU8YnIvPlwiKTtcbiAgICBpZihcInRyZWVfc2hyaW5lXCI9PWIuaGlzdG9yaWN8fFwid2F5c2lkZV9zaHJpbmVcIj09Yi5oaXN0b3JpYylhKz1cIlNjaHJlaW4gLyBCaWxkc3RvY2s8YnIvPlwiO1wiY2l0eV9nYXRlXCI9PWIuaGlzdG9yaWMmJihhKz1cIlN0YWR0dG9yPGJyLz5cIik7XCJ3YXlzaWRlX2Nyb3NzXCI9PWIuaGlzdG9yaWMmJihhKz1cIldlZ2tyZXV6PGJyLz5cIik7XCJtb251bWVudFwiPT1iLmFtZW5pdHkmJihhKz1cIkRlbmttYWw8YnIvPlwiKTtcIm1lbW9yaWFsXCI9PWIuaGlzdG9yaWMmJihhKz1cIkRlbmttYWw8YnIvPlwiKTtcIm9wdGljYWxfdGVsZWdyYXBoXCI9PWIuaGlzdG9yaWMmJihhKz1cIk9wdGlzY2hlciBUZWxlZ3JhcGg8YnIvPlwiKTtpZihcImNhc3RsZVwiPT1iLmhpc3RvcmljKWlmKGIuY2FzdGxlX3R5cGUpc3dpdGNoKGIuY2FzdGxlX3R5cGUpe2Nhc2UgXCJkZWZlbnNpdmVcIjphKz1cIkJ1cmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYWxhY2VcIjphKz1cIlBhbGFzdDxici8+XCI7YnJlYWs7Y2FzZSBcInN0YXRlbHlcIjphKz1cIlNjaGxvc3M8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwibWFub3JcIjphKz1cIkhlcnJlbmhhdXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmb3J0cmVzc1wiOmErPVwiRmVzdHVuZzxici8+XCI7YnJlYWs7Y2FzZSBcImNhc3RydW1cIjphKz1cIlJcXHUwMGY2bWlzY2hlcyBNaWxpdFxcdTAwZTRybGFnZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzaGlyb1wiOmErPVwiU2hpcm88YnIvPlwiO2JyZWFrO2Nhc2UgXCJrcmVtbGluXCI6YSs9XCJLcmVtbDxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIlNjaGxvc3MgLyBCdXJnPGJyLz5cIn1lbHNlIGErPVwiU2NobG9zcyAvIEJ1cmc8YnIvPlwiO1wiYXJjaGFlb2xvZ2ljYWxfc2l0ZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJBcmNoXFx1MDBlNG9sb2dpc2NoZSBGdW5kc3RcXHUwMGU0dHRlPGJyLz5cIik7aWYoXCJ0b21iXCI9PWIuaGlzdG9yaWMpaWYoYi50b21iKXN3aXRjaChiLnRvbWIpe2Nhc2UgXCJ0dW11bHVzXCI6YSs9XCJIXFx1MDBmY2dlbGdyYWI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyb2NrLWN1dFwiOmErPVwiRmVsc2dyYWI8YnIvPlwiO2JyZWFrO1xuICAgICAgICBjYXNlIFwiaHlwb2dldW1cIjphKz1cIkh5cG9nXFx1MDBlNHVtPGJyLz5cIjticmVhaztjYXNlIFwid2FyX2dyYXZlXCI6YSs9XCJTb2xkYXRlbmZyaWVkaG9mPGJyLz5cIjticmVhaztjYXNlIFwibWF1c29sZXVtXCI6YSs9XCJNYXVzb2xldW08YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb2x1bWJhcml1bVwiOmErPVwiS29sdW1iYXJpdW08YnIvPlwiO2JyZWFrO2Nhc2UgXCJjcnlwdFwiOmErPVwiS3J5cHRhPGJyLz5cIjticmVhaztjYXNlIFwicHlyYW1pZFwiOmErPVwiUHlyYW1pZGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzYXJjb3BoYWd1c1wiOmErPVwiU2Fya29waGFnPGJyLz5cIjticmVhaztjYXNlIFwidmF1bHRcIjphKz1cIkdydWZ0PGJyLz5cIjticmVhaztjYXNlIFwidG9tYnN0b25lXCI6YSs9XCJHcmFic3RlaW48YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJIaXN0b3Jpc2NoZSBHcmFic3RcXHUwMGU0dHRlPGJyLz5cIn1lbHNlIGErPVwiSGlzdG9yaXNjaGUgR3JhYnN0XFx1MDBlNHR0ZTxici8+XCI7XCJhY2NvdW50YW50XCI9PWIub2ZmaWNlJiYoYSs9XG4gICAgICAgIFwiQnVjaGhhbHRlciAvIFdpcnRzY2hhZnRwclxcdTAwZmNmZXI8YnIvPlwiKTtcImFkbWluaXN0cmF0aXZlXCI9PWIub2ZmaWNlJiYoYSs9XCJLcmVpcy0gYnp3LiBHZW1laW5kZWJlaFxcdTAwZjZyZGU8YnIvPlwiKTtcImFyY2hpdGVjdFwiPT1iLm9mZmljZSYmKGErPVwiQXJjaGl0ZWt0dXJiXFx1MDBmY3JvPGJyLz5cIik7XCJhc3NvY2lhdGlvblwiPT1iLm9mZmljZSYmKGErPVwiVmVyZWluLCBWZXJlaW5pZ3VuZyBiencuIEludGVyZXNzZW5nZW1laW5zY2hhZnQ8YnIvPlwiKTtcInBoeXNpY2lhblwiPT1iLm9mZmljZSYmKGErPVwiQXJ6dDxici8+XCIpO1wiY2FtcGluZ1wiPT1iLm9mZmljZSYmKGErPVwiUmV6ZXB0aW9uIENhbXBpbmdwbGF0eiBvZGVyIEJcXHUwMGZjcm8gRnJlaXplaXRwYXJrPGJyLz5cIik7XCJjb21wYW55XCI9PWIub2ZmaWNlJiYoYSs9XCJTaXR6IGVpbmVyIHByaXZhdGVuIEZpcm1hPGJyLz5cIik7XCJlZHVjYXRpb25hbF9pbnN0aXR1dGlvblwiPT1iLm9mZmljZSYmKGErPVwiQmlsZHVuZ3NlaW5yaWNodHVuZzxici8+XCIpO1xuICAgIFwiZW1wbG95bWVudF9hZ2VuY3lcIj09Yi5vZmZpY2UmJihhKz1cIkpvYi1DZW50ZXIgLyBBcmJlaXRzdmVybWl0dGx1bmc8YnIvPlwiKTtcImVzdGF0ZV9hZ2VudFwiPT1iLm9mZmljZSYmKGErPVwiSW1tb2JpbGllbm1ha2xlciAvIFdvaG51bmdzYmF1Z2Vub3NzZW5zY2hhZnQ8YnIvPlwiKTtcImZvcmVzdHJ5XCI9PWIub2ZmaWNlJiYoYSs9XCJGb3JzdGFtdDxici8+XCIpO1wiZm91bmRhdGlvblwiPT1iLm9mZmljZSYmKGErPVwiR2VzY2hcXHUwMGU0ZnRzc3RlbGxlIGVpbmVyIFN0aWZ0dW5nPGJyLz5cIik7XCJnb3Zlcm5tZW50XCI9PWIub2ZmaWNlJiYoYSs9XCJCZWhcXHUwMGY2cmRlIC8gUmVnaWVydW5nc2VpbnJpY2h0dW5nPGJyLz5cIik7XCJndWlkZVwiPT1iLm9mZmljZSYmKGErPVwiQlxcdTAwZmNybyBmXFx1MDBmY3IgVG91cmlzdGVuZlxcdTAwZmNocnVuZ2VuPGJyLz5cIik7XCJpbnN1cmFuY2VcIj09Yi5vZmZpY2UmJihhKz1cIlZlcnNpY2hlcnVuZ3NiXFx1MDBmY3JvPGJyLz5cIik7XCJpdFwiPT1iLm9mZmljZSYmKGErPVwiSVQtVW50ZXJuZWhtZW48YnIvPlwiKTtcbiAgICBcImxhd3llclwiPT1iLm9mZmljZSYmKGErPVwiUmVjaHRzYW53YWx0c2thbnpsZWk8YnIvPlwiKTtcIm5ld3NwYXBlclwiPT1iLm9mZmljZSYmKGErPVwiWmVpdHVuZ3NyZWRha3Rpb248YnIvPlwiKTtcIm5nb1wiPT1iLm9mZmljZSYmKGErPVwiQlxcdTAwZmNybyBlaW5lciBOaWNodHJlZ2llcnVuZ3NvcmdhbmlzYXRpb248YnIvPlwiKTtcIm5vdGFyeVwiPT1iLm9mZmljZSYmKGErPVwiTm90YXI8YnIvPlwiKTtcInBvbGl0aWNhbF9wYXJ0eVwiPT1iLm9mZmljZSYmKGErPVwiQlxcdTAwZmNybyBlaW5lciBwb2xpdGlzY2hlbiBQYXJ0ZWk8YnIvPlwiKTtcInF1YW5nb1wiPT1iLm9mZmljZSYmKGErPVwiQlxcdTAwZmNybyBlaW5lciBoYWxic3RhYXRsaWNoZW4gT3JnYW5pc2F0aW9uPGJyLz5cIik7XCJyZWFsdG9yXCI9PWIub2ZmaWNlJiYoYSs9XCJJbW1vYmlsaWVubWFrbGVyIC8gV29obnVuZ3NiYXVnZW5vc3NlbnNjaGFmdDxici8+XCIpO1wicmVhbF9lc3RhdGVfYWdlbnRcIj09Yi5vZmZpY2UmJihhKz1cIkltbW9iaWxpZW5tYWtsZXIgLyBXb2hudW5nc2JhdWdlbm9zc2Vuc2NoYWZ0PGJyLz5cIik7XG4gICAgXCJyZWdpc3RlclwiPT1iLm9mZmljZSYmKGErPVwiU3RhbmRlc2FtdDxici8+XCIpO1wicmVsaWdpb25cIj09Yi5vZmZpY2UmJihhKz1cIkJcXHUwMGZjcm8gZWluZXIgcmVsaWdpXFx1MDBmNnNlbiBJbnN0YW56PGJyLz5cIik7XCJyZXNlYXJjaFwiPT1iLm9mZmljZSYmKGErPVwiRm9yc2NodW5nc3VudGVybmVobWVuIG9kZXIgLWluc3RpdHV0PGJyLz5cIik7XCJ0YXhcIj09Yi5vZmZpY2UmJihhKz1cIkZpbmFuemFtdDxici8+XCIpO1widGVsZWNvbW11bmljYXRpb25cIj09Yi5vZmZpY2UmJihhKz1cIlRlbGVrb21tdW5pa2F0aW9uc2Zpcm1hPGJyLz5cIik7XCJ0cmF2ZWxfYWdlbnRcIj09Yi5vZmZpY2UmJihhKz1cIlNpdHogZWluZXMgUmVpc2V1bnRlcm5laG1lbnM8YnIvPlwiKTtcIndhdGVyX3V0aWxpdHlcIj09Yi5vZmZpY2UmJihhKz1cIldhc3NlcndpcnRzY2hhZnRzYW10PGJyLz5cIik7XCJ0aGVyYXBpc3RcIj09Yi5vZmZpY2UmJihhKz1cIlRoZXJhcGV1dDxici8+XCIpO1wiY2l0eVwiPT1iLnBsYWNlJiYoYSs9XCJHcm9cXHUwMGRmc3RhZHQ8YnIvPlwiKTtcbiAgICBcInRvd25cIj09Yi5wbGFjZSYmKGErPVwiU3RhZHQvS2xlaW5zdGFkdDxici8+XCIpO1widmlsbGFnZVwiPT1iLnBsYWNlJiYoYSs9XCJEb3JmPGJyLz5cIik7XCJjb250aW5lbnRcIj09Yi5wbGFjZSYmKGErPVwiS29udGluZW50PGJyLz5cIik7XCJvY2VhblwiPT1iLnBsYWNlJiYoYSs9XCJPemVhbjwvYnI+XCIpO1widHJhY2tcIj09Yi5oaWdod2F5JiYoYSs9XCJGb3JzdC0sIFdhbGQgdW5kIEZlbGR3ZWc8YnIvPlwiKTtcInJhY2V3YXlcIj09Yi5oaWdod2F5JiYoYSs9XCJNb3RvcnNwb3J0YmFobjxici8+XCIpO1wiZGVzaWduYXRlZFwiPT1iLmJpY3ljbGUmJihhKz1cIlJhZHdlZzxici8+XCIpO1wicGF0aFwiPT1iLmhpZ2h3YXkmJihhKz1cIkZ1XFx1MDBkZndlZzxici8+XCIpO1wicGFya2luZ1wiPT1iLmFtZW5pdHkmJihhKz1cIlBhcmtwbGF0ejxici8+XCIpO1wic2VydmljZXNcIj09Yi5oaWdod2F5JiYoYSs9XCJSYXN0c3RcXHUwMGU0dHRlPGJyLz5cIik7XCJyZXN0X2FyZWFcIj09Yi5oaWdod2F5JiYoYSs9XCJSYXN0cGxhdHo8YnIvPlwiKTtcInR1cm5pbmdfY2lyY2xlXCI9PVxuICAgIGIuaGlnaHdheSYmKGErPVwiV2VuZGVwbGF0ei9XZW5kZWhhbW1lcjxici8+XCIpO1wic2VydmljZVwiPT1iLmhpZ2h3YXkmJihhKz1cIlp1ZmFocnRzc3RyYVxcdTAwZGZlIC8gRXJzY2hsaWVcXHUwMGRmdW5nc3dlZzxici8+XCIpO1wibW90b3J3YXlcIj09Yi5oaWdod2F5JiYoYSs9XCJBdXRvYmFobjxici8+XCIpO1wibW90b3J3YXlfanVuY3Rpb25cIj09Yi5oaWdod2F5JiYoYSs9XCJBdXRvYmFobmF1ZmZhaHJ0PGJyLz5cIik7XCJicmlkbGV3YXlcIj09Yi5oaWdod2F5JiYoYSs9XCJSZWl0d2VnPGJyLz5cIik7XCJ5ZXNcIj09Yi5vbmV3YXkmJihhKz1cIkVpbmJhaG5zdHJhXFx1MDBkZmU8YnIvPlwiKTtcInllc1wiPT1iLnBhcmtfcmlkZSYmKGErPVwiUGFyayBhbmQgUmlkZTxici8+XCIpO1widW5rbm93blwiPT1iLnBhcmtfcmlkZSYmKGErPVwiUGFyayBhbmQgUmlkZTxici8+XCIpO1wiYnVzXCI9PWIucGFya19yaWRlJiYoYSs9XCJQYXJrIGFuZCBSaWRlPGJyLz5cIik7XCJ0cmFtXCI9PWIucGFya19yaWRlJiYoYSs9XCJQYXJrIGFuZCBSaWRlPGJyLz5cIik7XG4gICAgXCJidXNfc3RvcFwiPT1iLmhpZ2h3YXkmJihhKz1cIkJ1c2hhbHRlc3RlbGxlPGJyLz5cIik7XCJwZWRlc3RyaWFuXCI9PWIuaGlnaHdheSYmKGErPVwiRnVcXHUwMGRmZ1xcdTAwZTRuZ2Vyem9uZTxici8+XCIpO1wic3RyZWV0X2xhbXBcIj09Yi5oaWdod2F5JiYoYSs9XCJTdHJhc3NlbmxhdGVybmU8YnIvPlwiKTtcInRyYWZmaWNfc2lnbmFsc1wiPT1iLmhpZ2h3YXkmJihhKz1cIkFtcGVsPGJyLz5cIik7XCJ0cmFmZmljX3NpZ25hbHNcIj09Yi5jcm9zc2luZyYmKGErPVwiRnVcXHUwMGRmZ1xcdTAwZTRuZ2VyYW1wZWw8YnIvPlwiKTtcInNwZWVkX2NhbWVyYVwiPT1iLmhpZ2h3YXkmJihhKz1cIkJsaXR6ZXI8YnIvPlwiKTtcInllc1wiPT1iLnRyYWZmaWNfY2FsbWluZyYmKHJldCs9XCJWZXJrZWhyc2JlcnVoaWd0ZXIgQmVyZWljaDwvYnI+XCIpO1wiYnVtcFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiS3VyemUgQm9kZW53ZWxsZTwvYnI+XCIpO1wiY2hpY2FuZVwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiWnUgdW1mYWhyZW5kZW5lcyBIaW5kZXJuaXNzPC9icj5cIik7XG4gICAgXCJjaG9rZXJcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkZhaHJiYWhudmVyZW5ndW5nLCB6dSB1bWZhaHJlbmRlIEhpbmRlcm5pc3NlIG1cXHUwMGY2Z2xpY2g8L2JyPlwiKTtcImN1c2hpb25cIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkJvZGVud2VsbGUgbWl0IExcXHUwMGZjY2tlbiBhdXMgbWVocmVyZW4gcmVjaHRlY2tpZ2VuIEh1Y2tlbG48L2JyPlwiKTtcImh1bXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cInZlcmdsZWljaGJhcmUgQm9kZW53ZWxsZSBtaXQgZXR3YXIgZWluZXIgTFxcdTAwZTRuZ2Ugdm9uIDItNE08L2JyPlwiKTtcImlzbGFuZFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiRWluZSBWZXJrZWhyc2luc2VsPC9icj5cIik7XCJydW1ibGVfc3RyaXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkhvbHBlcnN0cmVpZmVuPC9icj5cIik7XCJ0YWJsZVwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwibGFuZ2UgQm9kZW53ZWxsZW4gbWl0IGZsYWNoZW4gTWl0dGVsc3RcXHUwMGZjY2s8L2JyPlwiKTtcbiAgICBcImJ1b3lfY2FyZGluYWxcIj09YltcInNlYW1hcms6dHlwZVwiXSYmKGErPVwiS2FyZGluYWxzdG9ubmU8YnIvPlwiKTtcImJ1b3lfbGF0ZXJhbFwiPT1iW1wic2VhbWFyazp0eXBlXCJdJiYoYSs9XCJMYXRlcmFsdG9ubmU8YnIvPlwiKTtcImJ1b3lfaXNvbGF0ZWRfZGFuZ2VyXCI9PWJbXCJzZWFtYXJrOnR5cGVcIl0mJihhKz1cIkdlZmFocmVudG9ubmU8YnIvPlwiKTtcInBlcmNoXCI9PWJbXCJzZWFtYXJrOmJlYWNvbl9sYXRlcmFsOnNoYXBlXCJdJiYoYSs9XCJQcmlja2U8YnIvPlwiKTtcImZ1ZWxcIj09Yi5hbWVuaXR5JiZcImZ1ZWxfc3RhdGlvblwiPT1iW1wic2VhbWFyazpzbWFsbF9jcmFmdF9mYWNpbGl0eTpjYXRlZ29yeVwiXT9hKz1cIlNjaGlmZnN0YW5rc3RlbGxlPGJyLz5cIjpcImZ1ZWxcIj09Yi5hbWVuaXR5JiYoYSs9XCJUYW5rc3RlbGxlPGJyLz5cIik7aWYoXCJjaGFyZ2luZ19zdGF0aW9uXCI9PWIuYW1lbml0eSl7dmFyIGE9YStcIkxhZGVzdGF0aW9uIC8gU3Ryb210YW5rc3RlbGxlPGJyLz5cIixjPWIudm9sdGFnZTtpZihiLmNhcil7c3dpdGNoKGIuY2FyKXtjYXNlIFwieWVzXCI6YSs9XG4gICAgICAgIFwiRlxcdTAwZmNyIEF1dG9zOiBKYVwiO2JyZWFrO2Nhc2UgXCJub1wiOmErPVwiRlxcdTAwZmNyIEF1dG9zOiBOZWluXCI7YnJlYWs7ZGVmYXVsdDphKz1cIkZcXHUwMGZjciBBdXRvczogVW5iZWthbm50XCJ9YSs9XCI8YnIvPlwifWVsc2UgYSs9XCJGXFx1MDBmY3IgQXV0b3M6IFVuYmVrYW5udDxici8+XCI7aWYoYi5iaWN5Y2xlKXtzd2l0Y2goYi5iaWN5Y2xlKXtjYXNlIFwieWVzXCI6YSs9XCJGXFx1MDBmY3IgRS1CaWtlOiBKYVwiO2JyZWFrO2Nhc2UgXCJub1wiOmErPVwiRlxcdTAwZmNyIEUtQmlrZTogTmVpblwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJGXFx1MDBmY3IgRS1CaWtlOiBVbmJla2FubnRcIn1hKz1cIjxici8+XCJ9ZWxzZSBhKz1cIkZcXHUwMGZjciBFLUJpa2U6IFVuYmVrYW5udDxici8+XCI7XCJub1wiPT1iW1wic29ja2V0OnNjaHVrb1wiXSYmKGErPVwiU3RlY2tlciBTY2h1a286IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OnNjaHVrb1wiXSYmKGErPVwiU3RlY2tlciBTY2h1a286IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OmNlZV9ibHVlXCJdJiZcbiAgICAoYSs9XCJTdGVja2VyIENFRSBCbGF1OiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDpjZWVfYmx1ZVwiXSYmKGErPVwiU3RlY2tlciBDRUUgQmxhdTogSmE8YnIvPlwiKTtcIm5vXCI9PWJbXCJzb2NrZXQ6Y2VlX3JlZF8xNmFcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIFJvdCAxNmE6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OmNlZV9yZWRfMTZhXCJdJiYoYSs9XCJTdGVja2VyIENFRSBSb3QgMTZhOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDpjZWVfcmVkXzMyYVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDMyYTogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6Y2VlX3JlZF8zMmFcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIFJvdCAzMmE6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OmNlZV9yZWRfNjRhXCJdJiYoYSs9XCJTdGVja2VyIENFRSBSb3QgNjRhOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDpjZWVfcmVkXzY0YVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDY0YTogSmE8YnIvPlwiKTtcbiAgICAgICAgXCJub1wiPT1iW1wic29ja2V0OmNlZV9yZWRfMTI1YVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDEyNWE6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OmNlZV9yZWRfMTI1YVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDEyNWE6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0Om5lbWFfNV8xNVwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDUgMTU6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0Om5lbWFfNV8xNVwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDUgMTU6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0Om5lbWFfNV8yMFwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDUgMjA6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0Om5lbWFfNV8yMFwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDUgMjA6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0Om5lbWFfMTRfMzBcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSAxNCAzMDogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6bmVtYV8xNF8zMFwiXSYmKGErPVxuICAgICAgICAgICAgXCJTdGVja2VyIE5lbWEgMTQgMzA6IEphPGJyLz5cIik7XCJOZWluXCI9PWJbXCJzb2NrZXQ6bmVtYV8xNF81MFwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDE0ICA1MDogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6bmVtYV8xNF81MFwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDE0IDUwOiBKYTxici8+XCIpO1wibmVpblwiPT1iW1wic29ja2V0OmJzMTM2M1wiXSYmKGErPVwiU3RlY2tlciBCUyAxMzYzOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDpiczEzNjNcIl0mJihhKz1cIlN0ZWNrZXIgQlMgMTM2MzogSmE8YnIvPlwiKTtcIm5vXCI9PWJbXCJzb2NrZXQ6dHlwZTFcIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDE6TmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6dHlwZTFcIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDE6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OnR5cGUxX2NvbWJvXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAxIEtvbWJvOiBOZWluPGJyLz5cIik7XCJ5ZXNcIj09YltcInNvY2tldDp0eXBlMV9jb21ib1wiXSYmXG4gICAgICAgIChhKz1cIlN0ZWNrZXIgVHlwIDEgS29tYm86IEphPGJyLz5cIik7XCJOZWluXCI9PWJbXCJzb2NrZXQ6dHlwZTJcIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDI6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OnR5cGUyXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAyOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDp0eXBlMl9jb21ib1wiXSYmKGErPVwiU3RlY2tlciBUeXAgMiBLb21ibzogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6dHlwZTJfY29tYm9cIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDIgS29tYm86IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OnR5cGUzXCJdJiYoYSs9XCJTdGVja2VyIFR5cDogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6dHlwZTNcIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDM6IEphPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OmNoYWRlbW9cIl0mJihhKz1cIlN0ZWNrZXIgQ0hBZGVNTzogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6Y2hhZGVtb1wiXSYmKGErPVwiU3RlY2tlciBDSEFkZU1POiBKYTxici8+XCIpO1xuICAgICAgICBcIm5vXCI9PWJbXCJzb2NrZXQ6bWFnbmVfY2hhcmdlXCJdJiYoYSs9XCJTdGVja2VyIE1hZ25lIDogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6bWFnbmVfY2hhcmdlXCJdJiYoYSs9XCJTdGVja2VyIE1hZ25lIDogSmE8YnIvPlwiKTtcIm5vXCI9PWJbXCJzb2NrZXQ6dGVzbGFfc3RhbmRhcmRcIl0mJihhKz1cIlN0ZWNrZXIgVGVzbGEgU3RhbmRhcmQ6IE5laW48YnIvPlwiKTtcInllc1wiPT1iW1wic29ja2V0OnRlc2xhX3N0YW5kYXJkXCJdJiYoYSs9XCJTdGVja2VyIFRlc2xhIFN0YW5kYXJkOiBOZWluPGJyLz5cIik7XCJub1wiPT1iW1wic29ja2V0OnRlc2xhX3N1cGVyY2hhcmdlXCJdJiYoYSs9XCJTdGVja2VyIFRlc2xhIFNjaG5lbGxsYWRlc3RhdGlvbjogTmVpbjxici8+XCIpO1wieWVzXCI9PWJbXCJzb2NrZXQ6dGVzbGFfc3VwZXJjaGFyZ2VcIl0mJihhKz1cIlN0ZWNrZXIgVGVzbGEgU2NobmVsbGxhZGVzdGF0aW9uOiBKYTxici8+XCIpO1wibm9cIj09YltcInNvY2tldDp0ZXNsYV9yb2Fkc3RlclwiXSYmKGErPVwiU3RlY2tlciBUZXNsYSBSb2Fkc3RlcjogTmVpbjxici8+XCIpO1xuICAgICAgICBcInllc1wiPT1iW1wic29ja2V0OnRlc2xhX3JvYWRzdGVyXCJdJiYoYSs9XCJTdGVja2VyIFRlc2xhIFJvYWRzdGVyOiBKYTxici8+XCIpO2JbXCJzb2NrZXQ6c2NodWtvXCJdJiYoYSs9XCJTdGVja2VyIFNjaHVrbzogXCIrYltcInNvY2tldDpzY2h1a29cIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmNlZV9ibHVlXCJdJiYoYSs9XCJTdGVja2VyIENFRSBCbGF1OiBcIitiW1wic29ja2V0OmNlZV9ibHVlXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfcmVkXzE2YVwiXSYmKGErPVwiU3RlY2tlciBDRUUgUm90IDE2YTogXCIrYltcInNvY2tldDpjZWVfcmVkXzE2YVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6Y2VlX3JlZF8zMmFcIl0mJihhKz1cIlN0ZWNrZXIgQ0VFIFJvdCAzMmE6IFwiK2JbXCJzb2NrZXQ6Y2VlX3JlZF8zMmFcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmNlZV9yZWRfNjRhXCJdJiYoYSs9XCJTdGVja2VyIENFRSBSb3QgNjRhOiBcIitiW1wic29ja2V0OmNlZV9yZWRfNjRhXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfcmVkXzEyNWFcIl0mJlxuICAgICAgICAoYSs9XCJTdGVja2VyIENFRSBSb3QgMTI1YTogXCIrYltcInNvY2tldDpjZWVfcmVkXzEyNWFcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om5lbWFfNV8xNVwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDUgMTU6IFwiK2JbXCJzb2NrZXQ6bmVtYV81XzE1XCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpuZW1hXzVfMjBcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSA1IDIwOiBcIitiW1wic29ja2V0Om5lbWFfNV8yMFwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6bmVtYV8xNF8zMFwiXSYmKGErPVwiU3RlY2tlciBOZW1hIDE0IDMwOiBcIitiW1wic29ja2V0Om5lbWFfMTRfMzBcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om5lbWFfMTRfNTBcIl0mJihhKz1cIlN0ZWNrZXIgTmVtYSAxNCA1MDogXCIrYltcInNvY2tldDpuZW1hXzE0XzUwXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpiczEzNjNcIl0mJihhKz1cIlN0ZWNrZXIgQlMgMTM2MzogXCIrYltcInNvY2tldDpiczEzNjNcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OnR5cGUxXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAxOiBcIitcbiAgICAgICAgICAgIGJbXCJzb2NrZXQ6dHlwZTFcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OnR5cGUxX2NvbWJvXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAxIEtvbWJvOiBcIitiW1wic29ja2V0OnNjaHVrb1wiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dHlwZTJcIl0mJihhKz1cIlN0ZWNrZXIgVHlwIDI6IFwiK2JbXCJzb2NrZXQ6dHlwZTJcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OnR5cGUyX2NvbWJvXCJdJiYoYSs9XCJTdGVja2VyIFR5cCAyIEtvbWJvOiBcIitiW1wic29ja2V0OnR5cGUyX2NvbWJvXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlM1wiXSYmKGErPVwiU3RlY2tlciBUeXAgMzogXCIrYltcInNvY2tldDp0eXBlM1wiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6Y2hhZGVtb1wiXSYmKGErPVwiU3RlY2tlciBDSEFkZU1POiBcIitiW1wic29ja2V0OmNoYWRlbW9cIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om1hZ25lX2NoYXJnZVwiXSYmKGErPVwiU3RlY2tlciBNYWduZSA6IFwiK2JbXCJzb2NrZXQ6bWFnbmVfY2hhcmdlXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0ZXNsYV9zdGFuZGFyZFwiXSYmXG4gICAgICAgIChhKz1cIlN0ZWNrZXIgVGVzbGEgU3RhbmRhcmQ6IFwiK2JbXCJzb2NrZXQ6dGVzbGFfc3RhbmRhcmRcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OnRlc2xhX3N1cGVyY2hhcmdlXCJdJiYoYSs9XCJTdGVja2VyIFRlc2xhIFNjaG5lbGxsYWRlc3RhdGlvbjogXCIrYltcInNvY2tldDp0ZXNsYV9zdXBlcmNoYXJnZVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dGVzbGFfcm9hZHN0ZXJcIl0mJihhKz1cIlN0ZWNrZXIgVGVzbGEgUm9hZHN0ZXI6IFwiK2JbXCJzb2NrZXQ6dGVzbGFfcm9hZHN0ZXJcIl0rXCI8YnIvPlwiKTthKz1cIjxici8+XCI7Yi52b2x0YWdlJiYoYSs9XCJWb2x0OiBcIitjK1wiPGJyLz5cIil9XCJ5ZXNcIj09Yi50dW5uZWwmJihhKz1cIlR1bm5lbDxici8+XCIpO2lmKGIuYnJpZGdlKXN3aXRjaChhKz1cIkJyXFx1MDBmY2NrZW4tVHlwOiBcIixiLmJyaWRnZSl7Y2FzZSBcInN3aW5nXCI6YSs9XCJEcmVoYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcImFxdWVkdWN0XCI6YSs9XCJIaXN0b3Jpc2NoZSBXYXNzZXJwaXBlbGluZVwiO2JyZWFrO1xuICAgICAgICBjYXNlIFwiYmFzY3VsZVwiOmErPVwiS2xhcHAgYnp3LiBXaXBwYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcImJvYXJkd2Fsa1wiOmErPVwiQm9obGVud2VnXCI7YnJlYWs7Y2FzZSBcImNhbnRpbGV2ZXJcIjphKz1cIkF1c2xlZ2VyYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcImNvdmVyZWRcIjphKz1cImdlZGVja3RlIEJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJkcmF3YnJpZGdlXCI6YSs9XCJLbGFwcGJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJodW1wYmFja1wiOmErPVwiRHJlaGJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJsaWZ0XCI6YSs9XCJIdWJiclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwibG93X3dhdGVyX2Nyb3NzaW5nXCI6YSs9XCJJcmlzY2hlIEJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJtb3ZlYWJsZVwiOmErPVwiQmV3ZWdsaWNoZSBCclxcdTAwZmNja2VuXCI7YnJlYWs7Y2FzZSBcInBvbnRvb25cIjphKz1cIlNjaHdpbW1iclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwic3VzcGVuc2lvblwiOmErPVwiSFxcdTAwZTRuZ2ViclxcdTAwZmNja2VcIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJ0cmVzdGxlXCI6YSs9XCJUcmVzdGxlLUJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJ2aWFkdWN0XCI6YSs9XCJWaWFkdWt0XCJ9aWYoYltcImJyaWRnZTptb3ZhYmxlXCJdKXN3aXRjaChiW1wiYnJpZGdlOm1vdmFibGVcIl0pe2Nhc2UgXCJzd2luZ1wiOmErPVwiRHJlaGJyXFx1MDBmY2NrZVwiO2JyZWFrO2Nhc2UgXCJiYXNjdWxlXCI6YSs9XCJLbGFwcCBiencuIFdpcHBiclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwiZHJhd2JyaWRnZVwiOmErPVwiS2xhcHBiclxcdTAwZmNja2VcIjticmVhaztjYXNlIFwibGlmdFwiOmErPVwiSHViYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcInN1Ym1lcnNpYmxlXCI6YSs9XCJTZW5rYnJcXHUwMGZjY2tlXCI7YnJlYWs7Y2FzZSBcInRyYW5zcG9ydGVyXCI6YSs9XCJTY2h3ZWJlZlxcdTAwZTRocmVcIjticmVhaztjYXNlIFwicmV0cmFjdGFibGVcIjphKz1cIlNjaHViYnJcXHUwMGZjY2tlXCJ9aWYoXCJudXJzaW5nX2hvbWVcIj09Yi5hbWVuaXR5fHxcInJldGlyZW1lbnRfaG9tZVwiPT1iLmFtZW5pdHkpYSs9XG4gICAgICAgIFwiU2VuaW9yZW5oZWltIC8gUGZsZWdlaGVpbTxici8+XCI7XCJzb2NpYWxfZmFjaWxpdHlcIj09Yi5hbWVuaXR5JiYoYSs9XCJBbGxnLiBzb3ppYWxlIEVpbnJpY2h0dW5nPGJyLz5cIik7aWYoYi5zb2NpYWxfZmFjaWxpdHkpe1wiZ3JvdXBfaG9tZVwiPT1iLnNvY2lhbF9mYWNpbGl0eSYmXCJzZW5pb3JcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cIlNlbmlvcmVuaGVpbTxici8+XCIpO1wiYXNzaXN0ZWRfbGl2aW5nXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJCZXRyZXV0ZXMgV29obmVuPGJyLz5cIik7XCJvdXRyZWFjaFwiPT1iLnNvY2lhbF9mYWNpbGl0eSYmKGErPVwiQmVyYXR1bmdzc3RlbGxlPGJyLz5cIik7XCJ3b3Jrc2hvcFwiPT1iLnNvY2lhbF9mYWNpbGl0eSYmKGErPVwic296aWFsZSBXZXJrc3RhdHQ8YnIvPlwiKTtpZihcImFtYnVsYXRvcnlfY2FyZVwiPT1iLnNvY2lhbF9mYWNpbGl0eXx8XCJoZWFsdGhjYXJlXCI9PWIuc29jaWFsX2ZhY2lsaXR5KWErPVwiQW1idWxhbnRlciBQZmxlZ2VkaWVuc3Q8YnIvPlwiO1xuICAgICAgICBcInNoZWx0ZXJcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJlwic2VuaW9yXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJUYWdlcy0gdS4gS3VyenplaXRwZmxlZ2U8YnIvPlwiKTtcInNoZWx0ZXJcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJlwiYWJ1c2VkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJOb3R1bnRlcmt1bmZ0PGJyLz5cIik7XCJmb29kX2JhbmtcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJihhKz1cIkxlYmVuc21pdHRlbGhpbGZlPGJyLz5cIik7XCJob3NwaWNlXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJIb3NwaXo8YnIvPlwiKX1iLmJyZXdlcnkmJihhKz1cIkF1c2dlc2NoZW5rdGUgQmllcnNvcnRlbjogXCIrYi5icmV3ZXJ5K1wiPGJyLz5cIik7XCJhbGNvaG9sXCI9PWIuc2hvcCYmKGErPVwiU3Bpcml0dW9zZW5sYWRlbjxici8+XCIpO1wiYmFrZXJ5XCI9PWIuc2hvcCYmKGErPVwiQlxcdTAwZTRja2VyZWk8YnIvPlwiKTtcImJldmVyYWdlc1wiPT1iLnNob3AmJihhKz1cIkdldHJcXHUwMGU0bmtlaGFuZGVsPGJyLz5cIik7XG4gICAgXCJidXRjaGVyXCI9PWIuc2hvcCYmKGErPVwiRmxlaXNjaGVyZWk8YnIvPlwiKTtcImNoZWVzZVwiPT1iLnNob3AmJihhKz1cIktcXHUwMGU0c2VmYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcImNob2NvbGF0ZVwiPT1iLnNob3AmJihhKz1cIlNjaG9rb2xhZGVuZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJjb2ZmZWVcIj09Yi5zaG9wJiYoYSs9XCJLYWZmZWVmYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcImNvbmZlY3Rpb25lcnlcIj09Yi5zaG9wJiYoYSs9XCJTXFx1MDBmY1xcdTAwZGZ3YXJlbmxhZGVuPGJyLz5cIik7XCJjb252ZW5pZW5jZVwiPT1iLnNob3AmJihhKz1cIkxlYmVuc21pdHRlbGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJkZWxpXCI9PWIuc2hvcCYmKGErPVwiRmVpbmtvc3RsYWRlbjxici8+XCIpO1wiZGFpcnlcIj09Yi5zaG9wJiYoYSs9XCJNaWxjaGxhZGVuPGJyLz5cIik7XCJmYXJtXCI9PWIuc2hvcCYmKGErPVwiSG9mbGFkZW48YnIvPlwiKTtcImdyZWVuZ3JvY2VyXCI9PWIuc2hvcCYmKGErPVwiR2VtXFx1MDBmY3NlaFxcdTAwZTRuZGxlcjxici8+XCIpO1xuICAgIFwiZ3JvY2VyeVwiPT1iLnNob3AmJihhKz1cIkxlYmVuc21pdHRlbGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJvcmdhbmljXCI9PWIuc2hvcCYmKGErPVwiQmlvLUxhZGVuLCBSZWZvcm1oYXVzPGJyLz5cIik7XCJwYXN0YVwiPT1iLnNob3AmJihhKz1cIlBhc3RhZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcInNlYWZvb2RcIj09Yi5zaG9wJiYoYSs9XCJGaXNjaGZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1widGVhXCI9PWIuc2hvcCYmKGErPVwiVGVlZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJ3aW5lXCI9PWIuc2hvcCYmKGErPVwiV2VpbmhhbmRsdW5nPGJyLz5cIik7XCJkZXBhcnRtZW50X3N0b3JlXCI9PWIuc2hvcCYmKGErPVwiS2F1ZmhhdXM8YnIvPlwiKTtcImdlbmVyYWxcIj09Yi5zaG9wJiYoYSs9XCJHZW1pc2NodHdhcmVuaGFuZGx1bmc8YnIvPlwiKTtcImtpb3NrXCI9PWIuc2hvcCYmKGErPVwiS2lvc2s8YnIvPlwiKTtcIm1hbGxcIj09Yi5zaG9wJiYoYSs9XCJFaW5rYXVmc3plbnRydW08YnIvPlwiKTtcInN1cGVybWFya2V0XCI9PWIuc2hvcCYmXG4gICAgKGErPVwiU3VwZXJtYXJrdDxici8+XCIpO1wiYmFieV9nb29kc1wiPT1iLnNob3AmJihhKz1cIkJhYnlmYWNobWFya3Q8YnIvPlwiKTtcImJhZ1wiPT1iLnNob3AmJihhKz1cIlRhc2NoZW4gdW5kIEtvZmZlcjxici8+XCIpO1wiYm91dGlxdWVcIj09Yi5zaG9wJiYoYSs9XCJCb3V0aXF1ZTxici8+XCIpO1wiY2xvdGhlc1wiPT1iLnNob3AmJihhKz1cIkJla2xlaWR1bmc8YnIvPlwiKTtcImZhYnJpY1wiPT1iLnNob3AmJihhKz1cIlRleHRpbGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJmYXNoaW9uXCI9PWIuc2hvcCYmKGErPVwiRmFzaGlvbjxici8+XCIpO1wiamV3ZWxyeVwiPT1iLnNob3AmJihhKz1cIkp1d2VsaWVyPGJyLz5cIik7XCJsZWF0aGVyXCI9PWIuc2hvcCYmKGErPVwiTGVkZXJ3YXJlbjxici8+XCIpO1wic2hvZXNcIj09Yi5zaG9wJiYoYSs9XCJTY2h1aGZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1widmFyaWV0eV9zdG9yZVwiPT1iLnNob3AmJihhKz1cIkVpbi1FdXJvLUxhZGVuPGJyLz5cIik7XCJjaGVtaXN0XCI9PWIuc2hvcCYmKGErPVwiRHJvZ2VyaWU8YnIvPlwiKTtcbiAgICBcImNvc21ldGljc1wiPT1iLnNob3AmJihhKz1cIktvc21ldGlrZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJkcnVnc3RvcmVcIj09Yi5zaG9wJiYoYSs9XCJEcm9nZXJpZSBvZGVyIEFwb3RoZWtlICh2ZXJhbHRldCk8YnIvPlwiKTtcInBlcmZ1bWVyeVwiPT1iLnNob3AmJihhKz1cIlBhcmZcXHUwMGZjbWVyaWU8YnIvPlwiKTtcImVyb3RpY1wiPT1iLnNob3AmJihhKz1cIkVyb3Rpa2hhbmRlbDxici8+XCIpO1wiaGFpcmRyZXNzZXJcIj09Yi5zaG9wJiYoYSs9XCJGcmlzZXVyPGJyLz5cIik7XCJoZWFyaW5nX2FpZHNcIj09Yi5zaG9wJiYoYSs9XCJIXFx1MDBmNnJnZXJcXHUwMGU0dGU8YnIvPlwiKTtcImhlcmJhbGlzdFwiPT1iLnNob3AmJihhKz1cIktyXFx1MDBlNHV0ZXJoYW5kZWw8YnIvPlwiKTtcIm1hc3NhZ2VcIj09Yi5zaG9wJiYoYSs9XCJNYXNzYWdlc2Fsb248YnIvPlwiKTtcIm1lZGljYWxfc3VwcGx5XCI9PWIuc2hvcCYmKGErPVwiU2FuaXRcXHUwMGU0dHNoYXVzPGJyLz5cIik7XCJvcHRpY2lhblwiPT1iLnNob3AmJihhKz1cIk9wdGlrZXI8YnIvPlwiKTtcbiAgICBcInRhdHRvb1wiPT1iLnNob3AmJihhKz1cIlRcXHUwMGU0dG93aWVyZXI8YnIvPlwiKTtcImJhdGhyb29tX2Z1cm5pc2hpbmdcIj09Yi5zaG9wJiYoYSs9XCJCYWRtXFx1MDBmNmJlbCB1bmQgLWFjY2Vzc29pcmVzPGJyLz5cIik7XCJkb2l0eW91cnNlbGZcIj09Yi5zaG9wJiYoYSs9XCJCYXVtYXJrdC9CYXVzdG9mZmhhbmRlbDxici8+XCIpO1wiZW5lcmd5XCI9PWIuc2hvcCYmKGErPVwiRW5lcmdpZWhhbmRlbDxici8+XCIpO1wiZmxvcmlzdFwiPT1iLnNob3AmJihhKz1cIkJsdW1lbmdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJmdXJuYWNlXCI9PWIuc2hvcCYmKGErPVwiT2ZlbmZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO1wiZ2FyZGVuX2NlbnRyZVwiPT1iLnNob3AmJihhKz1cIkdhcnRlbmNlbnRlcjxici8+XCIpO1wiZ2FzXCI9PWIuc2hvcCYmKGErPVwiRmFjaGdlc2NoXFx1MDBlNGZ0IGZcXHUwMGZjciB0ZWNobmlzY2hlIEdhc2U8YnIvPlwiKTtcImdsYXppZXJ5XCI9PWIuc2hvcCYmKGErPVwiR2xhc2VyZWk8YnIvPlwiKTtcImhhcmR3YXJlXCI9PVxuICAgIGIuc2hvcCYmKGErPVwiRWlzZW53YXJlbjxici8+XCIpO1wiaG91c2V3YXJlXCI9PWIuc2hvcCYmKGErPVwiSGF1c2hhbHRzd2FyZW4gdW5kIElubmVuZWlucmljaHR1bmc8YnIvPlwiKTtcImxvY2tzbWl0aFwiPT1iLnNob3AmJihhKz1cIlNjaGxcXHUwMGZjc3NlbGRpZW5zdDxici8+XCIpO1wicGFpbnRcIj09Yi5zaG9wJiYoYSs9XCJGYXJiZW5mYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcInRyYWRlXCI9PWIuc2hvcCYmKGErPVwiQmF1c3RvZmZoYW5kZWw8YnIvPlwiKTtcImFudGlxdWVzXCI9PWIuc2hvcCYmKGErPVwiQW50aXF1aXRcXHUwMGU0dGVuPGJyLz5cIik7XCJiZWRcIj09Yi5zaG9wJiYoYSs9XCJCZXR0ZW4tIHVuZCBNYXRyYXR6ZW5nZXNjaFxcdTAwZTRmdDxici8+XCIpO1wiY2FuZGxlc1wiPT1iLnNob3AmJihhKz1cIktlcnplbmdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJjYXJwZXRcIj09Yi5zaG9wJiYoYSs9XCJUZXBwaWNoZmFjaGhhbmRlbDxici8+XCIpO1wiY3VydGFpblwiPT1iLnNob3AmJihhKz1cIkdhcmRpbmVuZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XG4gICAgXCJmdXJuaXR1cmVcIj09Yi5zaG9wJiYoYSs9XCJNXFx1MDBmNmJlbC0gdW5kIEVpbnJpY2h0dW5nc2hhdXM8YnIvPlwiKTtcImludGVyaW9yX2RlY29yYXRpb25cIj09Yi5zaG9wJiYoYSs9XCJJbm5lbmRla29yYXRpb24gLyBSYXVtYXVzc3RhdHR1bmc8YnIvPlwiKTtcImtpdGNoZW5cIj09Yi5zaG9wJiYoYSs9XCJLXFx1MDBmY2NoZW48YnIvPlwiKTtcIndpbmRvd19ibGluZFwiPT1iLnNob3AmJihhKz1cIkphbG91c2llbiB1bmQgUm9sbFxcdTAwZTRkZW48YnIvPlwiKTtcImNvbXB1dGVyXCI9PWIuc2hvcCYmKGErPVwiQ29tcHV0ZXItRmFjaGhcXHUwMGU0bmRsZXI8YnIvPlwiKTtcImVsZWN0cm9uaWNzXCI9PWIuc2hvcCYmKGErPVwiRWxla3Ryb25pa21hcmt0PGJyLz5cIik7XCJoaWZpXCI9PWIuc2hvcCYmKGErPVwiSGlmaS1GYWNoaFxcdTAwZTRuZGxlcjxici8+XCIpO1wibW9iaWxlX3Bob25lXCI9PWIuc2hvcCYmKGErPVwiSGFuZHktU2hvcDxici8+XCIpO1wicmFkaW90ZWNobmljc1wiPT1iLnNob3AmJihhKz1cIlJhZGlvLSB1bmQgRmVybnNlaHRlY2huaWs8YnIvPlwiKTtcbiAgICBcInZhY3V1bV9jbGVhbmVyXCI9PWIuc2hvcCYmKGErPVwiU3RhdWJzYXVnZXJmYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcImJpY3ljbGVcIj09Yi5zaG9wJiYoYSs9XCJGYWhycmFkZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJjYXJcIj09Yi5zaG9wJiYoYSs9XCJBdXRvaGF1czxici8+XCIpO1wiY2FyX3JlcGFpclwiPT1iLnNob3AmJihhKz1cIkF1dG93ZXJrc3RhdHQ8YnIvPlwiKTtcImNhcl9wYXJ0c1wiPT1iLnNob3AmJihhKz1cIkF1dG90ZWlsZWZhY2hnZXNjaFxcdTAwZTRmdDxici8+XCIpO2lmKFwiZGl2ZVwiPT1iLnNob3B8fFwic2N1YmFfZGl2aW5nXCI9PWIuc2hvcClhKz1cIlRhdWNoYXVzclxcdTAwZmNzdHVuZzxici8+XCI7XCJmaXNoaW5nXCI9PWIuc2hvcCYmKGErPVwiQW5nZWxmYWNoZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcImZyZWVfZmx5aW5nXCI9PWIuc2hvcCYmKGErPVwiRmFsbHNjaGlybWF1c3JcXHUwMGZjc3R1bmc8YnIvPlwiKTtcImh1bnRpbmdcIj09Yi5zaG9wJiYoYSs9XCJKYWdkYXVzclxcdTAwZmNzdHVuZzxici8+XCIpO1xuICAgIFwibW90b3JjeWNsZVwiPT1iLnNob3AmJihhKz1cIk1vdG9ycmFkZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcIm91dGRvb3JcIj09Yi5zaG9wJiYoYSs9XCJUcmVra2luZy0vT3V0ZG9vcmxhZGVuPGJyLz5cIik7XCJzcG9ydHNcIj09Yi5zaG9wJiYoYSs9XCJTcG9ydGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJ0eXJlc1wiPT1iLnNob3AmJihhKz1cIlJlaWZlbmZhY2hoYW5kZWw8YnIvPlwiKTtcIndhdGVyX3Nwb3J0c1wiPT1iLnNob3AmJihhKz1cIldhc3NlcnNwb3J0YmVkYXJmPGJyLz5cIik7XCJhcnRcIj09Yi5zaG9wJiYoYSs9XCJLdW5zdGxhZGVuPGJyLz5cIik7XCJjcmFmdFwiPT1iLnNob3AmJihhKz1cIkt1bnN0aGFuZHdlcms8YnIvPlwiKTtcImZyYW1lXCI9PWIuc2hvcCYmKGErPVwiQmlsZGVycmFobWVuZ2VzY2hcXHUwMGU0ZnQ8YnIvPlwiKTtcIm11c2ljXCI9PWIuc2hvcCYmKGErPVwiTXVzaWtnZXNjaFxcdTAwZTRmdDxici8+XCIpO1wibXVzaWNfaW5zdHJ1bWVudFwiPT1iLnNob3AmJihhKz1cIk11c2lraGF1czxici8+XCIpO1wicGhvdG9cIj09XG4gICAgYi5zaG9wJiYoYSs9XCJGb3RvZmFjaGdlc2NoXFx1MDBlNGZ0PGJyLz5cIik7XCJ2aWRlb1wiPT1iLnNob3AmJihhKz1cIlZpZGVvdGhlazxici8+XCIpO1widmlkZW9fZ2FtZXNcIj09Yi5zaG9wJiYoYSs9XCJWaWRlb3NwaWVsZTxici8+XCIpO1wiYW5pbWVcIj09Yi5zaG9wJiYoYSs9XCJBbmltZTxici8+XCIpO1wiYm9va3NcIj09Yi5zaG9wJiYoYSs9XCJCdWNoaGFuZGx1bmc8YnIvPlwiKTtcImdpZnRcIj09Yi5zaG9wJiYoYSs9XCJBbmRlbmtlbiwgUmVpc2VtaXRicmluZ3NlbCwgU291dmVuaWVyc2hvcDxici8+XCIpO1wibmV3c2FnZW50XCI9PWIuc2hvcCYmKGErPVwiWmVpdHVuZ3NoXFx1MDBlNG5kbGVyPGJyLz5cIik7XCJzdGF0aW9uZXJ5XCI9PWIuc2hvcCYmKGErPVwiU2NocmVpYndhcmVuPGJyLz5cIik7XCJ0aWNrZXRcIj09Yi5zaG9wJiYoYSs9XCJUaWNrZXRzaG9wPGJyLz5cIik7XCJjb3B5c2hvcFwiPT1iLnNob3AmJihhKz1cIktvcGllcmxhZGVuPGJyLz5cIik7XCJmdW5lcmFsX2RpcmVjdG9yc1wiPT1iLnNob3AmJihhKz1cIkJlc3RhdHR1bmdzdW50ZXJuZWhtZW48YnIvPlwiKTtcbiAgICBcImxhdW5kcnlcIj09Yi5zaG9wJiYoYSs9XCJXYXNjaHNhbG9uIC8gV1xcdTAwZTRzY2hlcmVpPGJyLz5cIik7XCJkcnlfY2xlYW5pbmdcIj09Yi5zaG9wJiYoYSs9XCJjaGVtaXNjaGUgUmVpbmlndW5nPGJyLz5cIik7XCJtb25leV9sZW5kZXJcIj09Yi5zaG9wJiYoYSs9XCJHZWxkdmVybGVpaGVyPGJyLz5cIik7XCJwYXduYnJva2VyXCI9PWIuc2hvcCYmKGErPVwiUGZhbmRoYXVzIC8gUGZhbmRsZWloZXI8YnIvPlwiKTtcInBldFwiPT1iLnNob3AmJihhKz1cIlpvby0gdW5kIFRpZXJoYW5kbHVuZzxici8+XCIpO1wicHlyb3RlY2huaWNzXCI9PWIuc2hvcCYmKGErPVwiRmV1ZXJ3ZXJrPGJyLz5cIik7XCJyZWxpZ2lvblwiPT1iLnNob3AmJihhKz1cIlJlbGlnaVxcdTAwZjZzZSBBcnRpa2VsPGJyLz5cIik7XCJiZWF1dHlcIj09Yi5zaG9wJiYoYSs9XCJTY2hcXHUwMGY2bmhlaXRzc2Fsb248YnIvPlwiKTtcInNvbGFyaXVtXCI9PWIuc2hvcCYmKGErPVwiU29sYXJpdW08YnIvPlwiKTtcInRvYmFjY29cIj09Yi5zaG9wJiYoYSs9XCJUYWJha3dhcmVuPGJyLz5cIik7XG4gICAgXCJ0b3lzXCI9PWIuc2hvcCYmKGErPVwiU3BpZWx3YXJlbjxici8+XCIpO1widHJhdmVsX2FnZW5jeVwiPT1iLnNob3AmJihhKz1cIlJlaXNlYlxcdTAwZmNybzxici8+XCIpO1wibWFya2V0X2hhbGxcIj09Yi5zaG9wJiYoYSs9XCJNYXJrdGhhbGxlPGJyLz5cIik7XCJ2YWNhbnRcIj09Yi5zaG9wJiYoYSs9XCJsZWVyc3RlaGVuZGVzIExhZGVubG9rYWw8YnIvPlwiKTtcIndlYXBvbnNcIj09Yi5zaG9wJiYoYSs9XCJXYWZmZW5sYWRlbjxici8+XCIpO1wibG90dGVyeVwiPT1iLmdhbWJsaW5nJiYoYSs9XCJMb3R0b2FubmFobWVzdGVsbGU8YnIvPlwiKTtcImZpc2hcIj09Yi5wZXQmJihhKz1cIkFxdWFyaXN0aWs8YnIvPlwiKTtcImFncml1Y3VsdHVyYWxfZW5naW5lc1wiPT1iLmNyYWZ0JiYoYSs9XCJMYW5kbWFzY2hpbmVuYmF1PGJyLz5cIik7XCJiYXNrZXRfbWFrZXJcIj09Yi5jcmFmdCYmKGErPVwiS29yYm1hY2hlcjxici8+XCIpO1wiYmVla2VlcGVyXCI9PWIuY3JhZnQmJihhKz1cIklta2VyPGJyLz5cIik7XCJibGFja3NtaXRoXCI9PWIuY3JhZnQmJlxuICAgIChhKz1cIlNjaG1pZWQ8YnIvPlwiKTtcImJyZXdlcnlcIj09Yi5jcmFmdCYmKGErPVwiQnJhdWVyZWk8YnIvPlwiKTtcInllc1wiPT1iLm1pY3JvYnJld2VyeSYmKGErPVwiSGF1c2JyYXVlcmVpPGJyLz5cIik7XCJib2F0YnVpbGRlclwiPT1iLmNyYWZ0JiYoYSs9XCJCb290c2JhdWVyPGJyLz5cIik7XCJib29rYmluZGVyXCI9PWIuY3JhZnQmJihhKz1cIkJ1Y2hiaW5kZXI8YnIvPlwiKTtcImJ1aWxkZXJcIj09Yi5jcmFmdCYmKGErPVwiSGF1c2JhdTxici8+XCIpO1wiY2FycGVudGVyXCI9PWIuY3JhZnQmJihhKz1cIlRpc2NobGVyL1NjaHJlaW5lciwgWmltbWVybWFubjxici8+XCIpO1wiY2FycGV0X2xheWVyXCI9PWIuY3JhZnQmJihhKz1cIlRlcHBpY2hsZWdlcjxici8+XCIpO1wiY2F0ZXJlclwiPT1iLmNyYWZ0JiYoYSs9XCJDYXRlcmluZzxici8+XCIpO1wiY2xvY2ttYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJVaHJtYWNoZXI8YnIvPlwiKTtcImNvbmZlY3Rpb25lcnlcIj09Yi5jcmFmdCYmKGErPVwiS29uZGl0b3JlaTxici8+XCIpO1wiZHJlc3NtYWtlclwiPT1cbiAgICBiLmNyYWZ0JiYoYSs9XCJTY2huZWlkZXI8YnIvPlwiKTtcImVsZWN0cmljaWFuXCI9PWIuY3JhZnQmJihhKz1cIkVsZWt0cmlrZXI8YnIvPlwiKTtcImdhcmRlbmVyXCI9PWIuY3JhZnQmJihhKz1cIkdhcnRlbi0gdW5kIExhbmRzY2hhZnRzYmF1ZXI8YnIvPlwiKTtcImdsYXppZXJ5XCI9PWIuY3JhZnQmJihhKz1cIkdsYXNlcmVpPGJyLz5cIik7XCJoYW5kaWNyYWZ0XCI9PWIuY3JhZnQmJihhKz1cIkhhbmR3ZXJrc2t1bnN0PGJyLz5cIik7XCJodmFjXCI9PWIuY3JhZnQmJihhKz1cIktcXHUwMGU0bHRlYW5sYWdlbmJhdWVyIGZcXHUwMGZjciBMXFx1MDBmY2Z0dW5ncy0sIEhlaXp1bmdzLSB1bmQgS2xpbWF0ZWNobmlrPGJyLz5cIik7XCJpbnN1bGF0aW9uXCI9PWIuY3JhZnQmJihhKz1cIldcXHUwMGU0cm1lZFxcdTAwZTRtbXVuZyB2b24gR2ViXFx1MDBlNHVkZW48YnIvPlwiKTtcImpld2VsbGVyXCI9PWIuY3JhZnQmJihhKz1cIkp1d2VsaWVyLCBHb2xkLS9TaWxiZXItU2NobWllZDxici8+XCIpO1wia2V5X2N1dHRlclwiPT1iLmNyYWZ0JiYoYSs9XG4gICAgICAgIFwiU2NobFxcdTAwZmNzc2VsbWFjaGVyPGJyLz5cIik7XCJsb2Nrc21pdGhcIj09Yi5jcmFmdCYmKGErPVwiU2NobFxcdTAwZmNzc2VsZGllbnN0PGJyLz5cIik7XCJtZXRhbF9jb25zdHJ1Y3Rpb25cIj09Yi5jcmFmdCYmKGErPVwiTWV0YWxsYmF1ZXI8YnIvPlwiKTtcIm9wdGljaWFuXCI9PWIuY3JhZnQmJihhKz1cIk9wdGlrZXI8YnIvPlwiKTtcInBhaW50ZXJcIj09Yi5jcmFmdCYmKGErPVwiTWFsZXI8YnIvPlwiKTtcInBhcnF1ZXRfbGF5ZXJcIj09Yi5jcmFmdCYmKGErPVwiUGFya2V0dHZlcmxlZ2VyPGJyLz5cIik7XCJwaG90b2dyYXBoZXJcIj09Yi5jcmFmdCYmKGErPVwiRm90b2dyYWY8YnIvPlwiKTtcInBob3RvZ3JhcGhpY19sYWJvcmF0b3J5XCI9PWIuY3JhZnQmJihhKz1cIkZvdG9sYWJvcjxici8+XCIpO1wicGxhc3RlcmVyXCI9PWIuY3JhZnQmJihhKz1cIkdpcHNlciwgVmVycHV0emVyLCBTdHVja2F0ZXVyPGJyLz5cIik7XCJwbHVtYmVyXCI9PWIuY3JhZnQmJihhKz1cIkFubGFnZW5tZWNoYW5pa2VyIFNhbml0XFx1MDBlNHItLCBIZWl6dW5ncy0gdW5kIEtsaW1hdGVjaG5pay48YnIvPlwiKTtcbiAgICBcInBvdHRlcnlcIj09Yi5jcmFmdCYmKGErPVwiVFxcdTAwZjZwZmVyZWk8YnIvPlwiKTtcInJpZ2dlclwiPT1iLmNyYWZ0JiYoYSs9XCJSaWdnZW1hY2hlciAoVGFrZWxhZ2UgZlxcdTAwZmNyIFNlZ2Vsc2NoaWZmZSk8YnIvPlwiKTtcInJvb2ZlclwiPT1iLmNyYWZ0JiYoYSs9XCJEYWNoZGVja2VyPGJyLz5cIik7XCJzYWRkbGVyXCI9PWIuY3JhZnQmJihhKz1cIlNhdHRsZXI8YnIvPlwiKTtcInNhaWxtYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJTZWdlbG1hY2hlcjxici8+XCIpO1wic2F3bWlsbFwiPT1iLmNyYWZ0JiYoYSs9XCJIb2x6dmVyYXJiZWl0dW5nc2JldHJpZWI8YnIvPlwiKTtcInNjYWZmb2xkZXJcIj09Yi5jcmFmdCYmKGErPVwiR2VyXFx1MDBmY3N0YmF1ZXI8YnIvPlwiKTtcInNjdWxwdG9yXCI9PWIuY3JhZnQmJihhKz1cIkJpbGRoYXVlcjxici8+XCIpO1wic2hvZW1ha2VyXCI9PWIuY3JhZnQmJihhKz1cIlNjaHVobWFjaGVyPGJyLz5cIik7XCJzdGFuZF9idWlsZGVyXCI9PWIuY3JhZnQmJihhKz1cIk1lc3NlLSAvIFN0YW5kYmF1ZXI8YnIvPlwiKTtcbiAgICBcInN0b25lbWFzb25cIj09Yi5jcmFmdCYmKGErPVwiU3RlaW5tZXR6PGJyLz5cIik7XCJzdW5fcHJvdGVjdGlvblwiPT1iLmNyYWZ0JiYoYSs9XCJSb2xsYWRlbi0gdW5kIEphbG91c2llYmF1ZXI8YnIvPlwiKTtcInN3ZWVwXCI9PWIuY3JhZnQmJihhKz1cIlNjaG9ybnN0ZWluZmVnZXI8YnIvPlwiKTtcInRhaWxvclwiPT1iLmNyYWZ0JiYoYSs9XCJTY2huZWlkZXI8YnIvPlwiKTtcInRpbGVyXCI9PWIuY3JhZnQmJihhKz1cIkZsaWVzZW4tLCBQbGF0dGVuLSB1bmQgTW9zYWlrbGVnZXI8YnIvPlwiKTtcInRpbnNtaXRoXCI9PWIuY3JhZnQmJihhKz1cIlNwZW5nbGVyLCBLbGVtcG5lcjxici8+XCIpO1widXBob2xzdGVyZXJcIj09Yi5jcmFmdCYmKGErPVwiUG9sc3RlcmVyPGJyLz5cIik7XCJ3YXRjaG1ha2VyXCI9PWIuY3JhZnQmJihhKz1cIlVocm1hY2hlcjxici8+XCIpO1wid2luZG93X2NvbnN0cnVjdGlvblwiPT1iLmNyYWZ0JiYoYSs9XCJGZW5zdGVyYmF1ZXI8YnIvPlwiKTtcIm1hY2hpbmVzXCI9PWIucmVudGFsJiYoYSs9XCJNYXNjaGluZW52ZXJsZWloPGJyLz5cIik7XG4gICAgXCJjYXJfcmVudGFsXCI9PWIuYW1lbml0eSYmKGErPVwiQXV0b3ZlcmxlaWg8YnIvPlwiKTtcImFsbG90bWVudHNcIj09Yi5sYW5kdXNlJiYoYSs9XCJTY2hyZWJlcmdhcnRlbjxici8+XCIpO1wiYmFzaW5cIj09Yi5sYW5kdXNlJiYoYSs9XCJSZWdlbndhc3NlcnJcXHUwMGZjY2toYWx0ZWJlY2tlbjxici8+XCIpO1wiYnJvd25maWVsZFwiPT1iLmxhbmR1c2UmJihhKz1cIlZvcmhlciBiZWJhdXRlcyBMYW5kPGJyLz5cIik7XCJjb21tZXJjaWFsXCI9PWIubGFuZHVzZSYmKGErPVwiSW5kdXN0cmllZ2ViaWV0PGJyLz5cIik7XCJjb25zdHJ1Y3Rpb25cIj09Yi5sYW5kdXNlJiYoYSs9XCJCYXVnZWJpZXQ8YnIvPlwiKTtcImZhcm1sYW5kXCI9PWIubGFuZHVzZSYmKGErPVwiQWNrZXJmbFxcdTAwZTRjaGU8YnIvPlwiKTtcImZhcm15YXJkXCI9PWIubGFuZHVzZSYmKGErPVwibGFuZHdpcnRzY2hhZnRsaWNoZXIgQmV0cmllYjxici8+XCIpO1wiZm9yZXN0XCI9PWIubGFuZHVzZSYmKGErPVwiRm9yc3Q8YnIvPlwiKTtcImdhcmFnZXNcIj09Yi5sYW5kdXNlJiZcbiAgICAoYSs9XCJHYXJhZ2Vua29tcGxleDxici8+XCIpO1wiZ3Jhc3NcIj09Yi5sYW5kdXNlJiYoYSs9XCJSYXNlbmZsXFx1MDBlNGNoZW48YnIvPlwiKTtcImdyZWVuZmllbGRcIj09Yi5sYW5kdXNlJiYoYSs9XCJCYXVlcndhcnR1bmdzbGFuZDxici8+XCIpO1wiZ3JlZW5ob3VzZV9ob3J0aWN1bHR1cmVcIj09Yi5sYW5kdXNlJiYoYSs9XCJHZXdcXHUwMGU0Y2hzaGF1cy1GbFxcdTAwZTRjaGU8YnIvPlwiKTtcImluZHVzdHJpYWxcIj09Yi5sYW5kdXNlJiYoYSs9XCJHZXdlcmJlLS9JbmR1c3RyaWVnZWJpZXQ8YnIvPlwiKTtcImxhbmRmaWxsXCI9PWIubGFuZHVzZSYmKGErPVwiTVxcdTAwZmNsbGRlcG9uaWU8YnIvPlwiKTtcIm1lYWRvd1wiPT1iLmxhbmR1c2UmJihhKz1cIkdyXFx1MDBmY25mbFxcdTAwZTRjaGU8YnIvPlwiKTtcIm9yY2hhcmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJPYnN0cGxhbnRhZ2U8YnIvPlwiKTtcInBsYW50X251cnNlcnlcIj09Yi5sYW5kdXNlJiYoYSs9XCJCYXVtc2NodWxlPGJyLz5cIik7XCJxdWFycnlcIj09Yi5sYW5kdXNlJiYoYSs9XG4gICAgICAgIFwiU2FuZC0gdW5kIEtpZXNncnViZTxici8+XCIpO1wicmFpbHdheVwiPT1iLmxhbmR1c2UmJihhKz1cIkdlYmlldCBmXFx1MDBmY3IgRWlzZW5iYWhubnV0enVuZzxici8+XCIpO1wicmVjcmVhdGlvbl9ncm91bmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJFcmhvbHVuZ3NnZWJpZXQ8YnIvPlwiKTtcInJlc2Vydm9pclwiPT1iLmxhbmR1c2UmJihhKz1cIldhc3NlcnJlc2Vydm9pcjxici8+XCIpO1wicmVzaWRlbnRpYWxcIj09Yi5sYW5kdXNlJiYoYSs9XCJXb2huZ2ViaWV0PGJyLz5cIik7XCJyZXRhaWxcIj09Yi5sYW5kdXNlJiYoYSs9XCJFaW5rYXVmc3plbnRydW08YnIvPlwiKTtcInNhbHRfcG9uZFwiPT1iLmxhbmR1c2UmJihhKz1cIlNhbGluZTxici8+XCIpO1widmlsbGFnZV9ncmVlblwiPT1iLmxhbmR1c2UmJihhKz1cIkdyXFx1MDBmY25mbFxcdTAwZTRjaGU8YnIvPlwiKTtcInZpbmV5YXJkXCI9PWIubGFuZHVzZSYmKGErPVwiV2VpbmJlcmc8YnIvPlwiKTtcInBvbmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJrbGVpbmVyIFRlaWNoPGJyLz5cIik7XCJzYWx0X3BvbmRcIj09XG4gICAgYi5sYW5kdXNlJiYoYSs9XCJTYWxpbmU8YnIvPlwiKTtcImFuaW1hbF9rZWVwaW5nXCI9PWIubGFuZHVzZSYmKGErPVwiV2VpZGUsIFBhZGRvY2sgZlxcdTAwZmNyIFRpZXJoYWx0dW5nPGJyLz5cIik7XCJ5ZXNcIj09Yi5lbnRyYW5jZSYmKGErPVwiRWluZ2FuZyB6dW0gR2ViXFx1MDBlNHVkZTxici8+XCIpO1wibWFpblwiPT1iLmVudHJhbmNlJiYoYSs9XCJIYXVwdGVpbmdhbmc8YnIvPlwiKTtcInNlcnZpY2VcIj09Yi5lbnRyYW5jZSYmKGErPVwiSGludGVyYXVzZ2FuZyBmXFx1MDBmY3IgQW5nZXN0ZWxsdGUgb2RlciBadWxpZWZlcmVyPGJyLz5cIik7XCJleGl0XCI9PWIuZW50cmFuY2UmJihhKz1cIkF1c2dhbmcgZGVzIEdlYlxcdTAwZTR1ZGVzPGJyLz5cIik7XCJlbWVyZ2VuY3lcIj09Yi5lbnRyYW5jZSYmKGErPVwiTm90YXVzZ2FuZzxici8+XCIpO1wiYmF5XCI9PWIubmF0dXJhbCYmKGErPVwiQnVjaHQ8YnIvPlwiKTtcImJlYWNoXCI9PWIubmF0dXJhbCYmKGErPVwiU3RyYW5kPGJyLz5cIik7XCJ3b29kXCI9PWIubmF0dXJhbCYmKGErPVwibmF0XFx1MDBmY3JsaWNoZXIgV2FsZDxici8+XCIpO1xuICAgIFwiZ2xhY2llclwiPT1iLm5hdHVyYWwmJihhKz1cIkdsZXRzY2hlcjxici8+XCIpO1wiY2F2ZV9lbnRyYW5jZVwiPT1iLm5hdHVyYWwmJihhKz1cIkhcXHUwMGY2aGxlPGJyLz5cIik7XCJzcHJpbmdcIj09Yi5uYXR1cmFsJiYoYSs9XCJuYXRcXHUwMGZjcmxpY2hlIFF1ZWxsZTxici8+XCIpO1wid2F0ZXJmYWxsXCI9PWIubmF0dXJhbCYmKGErPVwiV2Fzc2VyZmFsbDxici8+XCIpO1wic2NydWJcIj09Yi5uYXR1cmFsJiYoYSs9XCJ1bmt1bHRpdmllcnRlcyBCdXNjaGxhbmQ8YnIvPlwiKTtcImdyYXNzbGFuZFwiPT1iLm5hdHVyYWwmJihhKz1cInVua3VsdGl2aWVydGVzIEdyYXNsYW5kPGJyLz5cIik7XCJ3ZXRsYW5kXCI9PWIubmF0dXJhbCYmKGErPVwiRmV1Y2h0Z2ViaWV0PGJyLz5cIik7XCJ0cmVlXCI9PWIubmF0dXJhbCYmKGErPVwiQmF1bVwiKTtcInBlYWtcIj09Yi5uYXR1cmFsJiZcInllc1wiPT1iW1wic3VtbWl0OmNyb3NzXCJdJiYoYSs9XCJHaXBmZWxrcmV1ejxici8+XCIpO1widHJlZV9yb3dcIj09Yi5uYXR1cmFsJiYoYSs9XCJCYXVtcmVpaGUgLyBBbGxlZTxici8+XCIpO1xuICAgIFwiaGVhdGhcIj09Yi5uYXR1cmFsJiYoYSs9XCJIZWlkZTxici8+XCIpO1wibW9vclwiPT1iLm5hdHVyYWwmJihhKz1cIkhvY2htb29yPGJyLz5cIik7XCJncmFzc2xhbmRcIj09Yi5uYXR1cmFsJiYoYSs9XCJ1bmt1bHRpdmllcnRlcyBHcmFzbGFuZDxici8+XCIpO1wiZmVsbFwiPT1iLm5hdHVyYWwmJihhKz1cIkdyYXNsYW5kIG9iZXJoYWxiIGRlciBCYXVtZ3JlbnplPGJyLz5cIik7XCJiYXJlX3JvY2tcIj09Yi5uYXR1cmFsJiYoYSs9XCJOYWNrdGVyIEZlbHM8YnIvPlwiKTtcInNjcmVlXCI9PWIubmF0dXJhbCYmKGErPVwiU2NodXR0IChIYW5nc2NodXR0KTxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJihhKz1cIlZ1bGthbjxici8+XCIpO1widmFsbGV5XCI9PWIubmF0dXJhbCYmKGErPVwiVGFsPGJyLz5cIik7XCJzdG9uZVwiPT1iLm5hdHVyYWwmJihhKz1cIkZpbmRsaW5nPGJyLz5cIik7XCJzZWFcIj09Yi5uYXR1cmFsJiYoYSs9XCJNZWVyPGJyLz5cIik7XCJuYXRpb25hbF9wYXJrXCI9PWIuYm91bmRhcnkmJihhKz1cIk5hdGlvbmFscGFyazxici8+XCIpO1xuICAgIFwicHJvdGVjdGVkX2FyZWFcIj09Yi5ib3VuZGFyeSYmKGErPVwiU2NodXR6Z2ViaWV0PGJyLz5cIik7XCJ5ZXNcIj09Yi5tb3VudGFpbl9wYXNzJiYoYSs9XCJHZWJpcmdzcGFzczxici8+XCIpO1wid2F0ZXJmYWxsXCI9PWIud2F0ZXJ3YXkmJihhKz1cIldhc3NlcmZhbGw8YnIvPlwiKTtcImNhbmFsXCI9PWIud2F0ZXJ3YXkmJihhKz1cIkthbmFsPGJyLz5cIik7XCJjYW5hbFwiPT1iLndhdGVyJiYoYSs9XCJLYW5hbDxici8+XCIpO1wicml2ZXJcIj09Yi53YXRlcndheSYmKGErPVwiRmx1c3M8YnIvPlwiKTtcInJpdmVyXCI9PWIud2F0ZXImJihhKz1cIkZsdXNzPGJyLz5cIik7XCJyaXZlcmJhbmtcIj09Yi53YXRlcndheSYmKGErPVwiRmx1c3M8YnIvPlwiKTtcImRpdGNoXCI9PWIud2F0ZXJ3YXkmJihhKz1cIkVudHdcXHUwMGU0c3NlcnVuZ3NncmFiZW48YnIvPlwiKTtcInN0cmVhbVwiPT1iLndhdGVyd2F5JiYoYSs9XCJCYWNoPGJyLz5cIik7XCJmZXJyeVwiPT1iLnJvdXRlJiYoYSs9XCJGXFx1MDBlNGhydmVyYmluZHVuZzxici8+XCIpO1widHVybmluZ19wb2ludFwiPT1cbiAgICBiLndhdGVyd2F5JiYoYSs9XCJXZW5kZXN0ZWxsZTxici8+XCIpO2lmKFwibGFrZVwiPT1iLndhdGVyfHxcIndhdGVyXCI9PWIubmF0dXJhbClhKz1cIlNlZTxici8+XCI7XCJjb3ZlXCI9PWIud2F0ZXImJihhKz1cImtsZWluZSBCdWNodDxici8+XCIpO1wibGFnb29uXCI9PWIud2F0ZXImJihhKz1cIkxhZ3VuZTxici8+XCIpO1wicG9uZFwiPT1iLndhdGVyJiYoYSs9XCJUZWljaDxici8+XCIpO1wicmVzZXJ2b2lyXCI9PWIud2F0ZXImJihhKz1cIldhc3NlcnJlc2Vydm9pcjxici8+XCIpO1wib3hib3dcIj09Yi53YXRlciYmKGErPVwiQWx0d2Fzc2Vyc2VlPGJyLz5cIik7XCJsb2NrXCI9PWIud2F0ZXImJihhKz1cIlNjaGxldXNlbmthbW1lcjxici8+XCIpO1wibW9hdFwiPT1iLndhdGVyJiYoYSs9XCJCdXJnZ3JhYmVuPGJyLz5cIik7XCJ3YXN0ZXdhdGVyXCI9PWIud2F0ZXImJihhKz1cIktsXFx1MDBlNHJhbmxhZ2U8YnIvPlwiKTtcImd1ZXN0XCI9PWIubW9vcmluZyYmXCJwaWVyXCI9PWIubWFuX21hZGV8fFwidmlzaXRvcl9iZXJ0aFwiPT1iW1wic2VhbWFyazpzbWFsbF9jcmFmdF9mYWNpbGl0eTpjYXRlZ29yeVwiXT9cbiAgICAgICAgYSs9XCJHYXN0bGllZ2VwbGF0ejxici8+XCI6XCJwaWVyXCI9PWIubWFuX21hZGUmJihhKz1cIkFubGVnZXN0ZWxsZTxici8+XCIpO1wiYm9hdHlhcmRcIj09Yi53YXRlcndheSYmKGErPVwiU2NoaWZmc3dlcmZ0PGJyLz5cIik7XCJtb29yaW5nXCI9PWJbXCJzZWFtYXJrOnR5cGVcIl0mJlwiZG9scGhpblwiPT1iW1wic2VhbWFyazptb29yaW5nOmNhdGVnb3J5XCJdJiYoYSs9XCJEYWxiZW48YnIvPlwiKTtcImZvb3RcIj09Yi5yb3V0ZSYmKGErPVwiV2FuZGVyd2VnPGJyLz5cIik7XCJoaWtpbmdcIj09Yi5yb3V0ZSYmKGErPVwiV2FuZGVyd2VnPGJyLz5cIik7aWYoXCJ5ZXNcIj09Yi5oaWtpbmcmJlwiaW5mb3JtYXRpb25cIj09Yi50b3VyaXNtKWErPVwiV2Vnd2Vpc2VyPGJyLz5cIjtlbHNlIGlmKFwiaW5mb3JtYXRpb25cIj09Yi50b3VyaXNtJiZcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSlpZihiLmluZm9ybWF0aW9uKXN3aXRjaChiLmluZm9ybWF0aW9uKXtjYXNlIFwiYm9hcmRcIjphKz1cIkluZm9ybWF0aW9uc3RhZmVsPGJyLz5cIjticmVhaztjYXNlIFwibWFwXCI6YSs9XG4gICAgICAgIFwiSW5mb3JtYXRpb25zdGFmZWwgbWl0IEthcnRlPGJyLz5cIjticmVhaztjYXNlIFwib2ZmaWNlXCI6YSs9XCJUb3VyaXN0ZW5pbmZvcm1hdGlvbjxici8+XCI7YnJlYWs7Y2FzZSBcInRlcm1pbmFsXCI6YSs9XCJJbmZvcm1hdGlvbnN0ZXJtaW5hbDxici8+XCI7YnJlYWs7Y2FzZSBcImF1ZGlvZ3VpZGVcIjphKz1cIkF1ZGlvZ3VpZGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJndWlkZXBvc3RcIjphKz1cIldlZ3dlaXNlcjxici8+XCI7YnJlYWs7Y2FzZSBcInRhY3RpbGVfbWFwXCI6YSs9XCJCbGluZGVua2FydGUgMkQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0YWN0aWxlX21vZGVsXCI6YSs9XCJCbGluZGVua2FydGUgM0Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyb3V0ZV9tYXJrZXJcIjphKz1cIldlZ2Vya2VubnVuZ3NtYXJrZXI8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJJbmZvcm1hdGlvbnN0YWZlbDxici8+XCJ9ZWxzZSBhKz1cIkluZm9ybWF0aW9uc3RhZmVsPGJyLz5cIjtcImJpY3ljbGVcIj09Yi5yb3V0ZSYmKGErPVwiUmFkd2FuZGVyd2VnPGJyLz5cIik7XG4gICAgXCJtdGJcIj09Yi5yb3V0ZSYmKGErPVwiTW91bnRhaW5iaWtlcm91dGU8YnIvPlwiKTtcImhvcnNlXCI9PWIucm91dGUmJihhKz1cIlJlaXR3YW5kZXJ3ZWc8YnIvPlwiKTtcImNvYXN0bGluZVwiPT1iLm5hdHVyYWwmJihhKz1cIktcXHUwMGZjc3RlbmxpbmllPGJyLz5cIik7XCJjbGlmZlwiPT1iLm5hdHVyYWwmJihhKz1cIktsaXBwZTxici8+XCIpO1wiZGFtXCI9PWIud2F0ZXJ3YXkmJihhKz1cIlN0YXVkYW1tPGJyLz5cIik7XCJ3ZWlyXCI9PWIud2F0ZXJ3YXkmJihhKz1cIldlaHI8YnIvPlwiKTtcImxvY2tfZ2F0ZVwiPT1iLndhdGVyd2F5JiYoYSs9XCJTY2hsZXVzZW50b3I8YnIvPlwiKTtcInllc1wiPT1iLmxvY2smJihhKz1cIlNjaGxldXNlPGJyLz5cIik7XCJzbHVpY2VfZ2F0ZVwiPT1iLndhdGVyd2F5JiYoYSs9XCJTaWVsPGJyLz5cIik7XCJwdW1waW5nX3N0YXRpb25cIj09Yi5tYW5fbWFkZSYmKGErPVwiU2NoXFx1MDBmNnBmd2Vyazxici8+XCIpO1wiZ3JveW5lXCI9PWIubWFuX21hZGUmJihhKz1cIkJ1aG5lPGJyLz5cIik7XCJkeWtlXCI9PWIubWFuX21hZGUmJlxuICAgIChhKz1cIkRlaWNoPGJyLz5cIik7XCJsZXZlZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJEZWljaDxici8+XCIpO1wid2F0ZXJtaWxsXCI9PWIubWFuX21hZGUmJihhKz1cIldhc3Nlcm1cXHUwMGZjaGxlPGJyLz5cIik7XCJhaXJmaWVsZFwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJNaWxpdFxcdTAwZTRyZmx1Z3BsYXR6PGJyLz5cIik7XCJuYXZhbF9iYXNlXCI9PWIubWlsaXRhcnkmJihhKz1cIk1hcmluZXN0XFx1MDBmY3R6cHVua3Q8YnIvPlwiKTtcInJhbmdlXCI9PWIubWlsaXRhcnkmJihhKz1cIldhZmZlblxcdTAwZmNidW5nc3BsYXR6PGJyLz5cIik7XCJtaWxpdGFyeVwiPT1iLmxhbmR1c2UmJihhKz1cIm1pbGl0XFx1MDBlNHJpc2NoIGdlbnV0enRlcyBHZWJpZXQ8YnIvPlwiKTtcInRyYWluaW5nX2FyZWFcIj09Yi5taWxpdGFyeSYmKGErPVwiVHJ1cHBlblxcdTAwZmNidW5nc3BsYXR6PGJyLz5cIik7XCJleGNsdXNpb25fem9uZVwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJtaWxpdFxcdTAwZTRyaXNjaCBnZW51dHp0ZXMgR2ViaWV0PGJyLz5cIik7XCJkYW5nZXJfYXJlYVwiPT1cbiAgICBiLm1pbGl0YXJ5JiYoYSs9XCJtaWxpdFxcdTAwZTRyaXNjaGUgR2VmYWhyZW56b25lPGJyLz5cIik7XCJiYXJyYWNrc1wiPT1iLm1pbGl0YXJ5JiYoYSs9XCJLYXNlcm5lPGJyLz5cIik7XCJudWNsZWFyX2V4cGxvc2lvbl9zaXRlXCI9PWIubWlsaXRhcnkmJihhKz1cIkF0b213YWZmZW50ZXN0Z2VsXFx1MDBlNG5kZTxici8+XCIpO1wieWVzXCI9PWIuY29uc3RydWN0aW9uP2ErPVwiQmF1c3RlbGxlPGJyLz5cIjpcImNvbnN0cnVjdGlvblwiPT1iLmhpZ2h3YXkmJihhKz1cIkJhdXN0ZWxsZTxici8+XCIpO1wicGV0cm9sZXVtX3dlbGxcIj09Yi5tYW5fbWFkZSYmKGErPVwiRXJkXFx1MDBmNmxwdW1wZTxici8+XCIpO1wic3RvcmFnZV90YW5rXCI9PWIubWFuX21hZGUmJihhKz1cIlNwZWljaGVydGFuazxici8+XCIpO1wid2FzdGV3YXRlcl9wbGFudFwiPT1iLm1hbl9tYWRlJiYoYSs9XCJLbFxcdTAwZTRyYW5sYWdlPGJyLz5cIik7XCJzaWxvXCI9PWIubWFuX21hZGUmJihhKz1cIlNpbG88YnIvPlwiKTtcIndhdGVyX3Rvd2VyXCI9PWIubWFuX21hZGUmJlxuICAgIChhKz1cIldhc3NlcnR1cm08YnIvPlwiKTtcIndpbmRtaWxsXCI9PWIubWFuX21hZGUmJihhKz1cIldpbmRtXFx1MDBmY2hsZTxici8+XCIpO1wibW9uaXRvcmluZ19zdGF0aW9uXCI9PWIubWFuX21hZGUmJihhKz1cIk1lc3NzdGF0aW9uXCIpO1wiY3JhbmVcIj09Yi5tYW5fbWFkZSYmKGErPVwiS3JhblwiKTtcImxpZ2h0aG91c2VcIj09Yi5tYW5fbWFkZSYmKGErPVwiTGV1Y2h0dHVybVwiKTtcImJlYWNvblwiPT1iLm1hbl9tYWRlJiYoYSs9XCJMZXVjaHRmZXVlclwiKTtcImJyZWFrd2F0ZXJcIj09Yi5tYW5fbWFkZSYmKGErPVwiV2VsbGVuYnJlY2hlclwiKTtcImxhbXBcIj09Yi5tYW5fbWFkZSYmXCJzdHJlZXRfbGFtcFwiPT1iW1wibGFtcDp0eXBlXCJdJiYoYSs9XCJTdHJhc3NlbmxhdGVybmU8YnIvPlwiKTtcImxhbnRlcm5cIj09Yi5saWdodF9zb3VyY2UmJihhKz1cIlN0cmFzc2VubGF0ZXJuZTxici8+XCIpO1wiZmxvb2RsaWdodFwiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwiRmx1dGxpY2h0PGJyLz5cIik7XCJzaWduYWxfbGFtcFwiPT1iLmxpZ2h0X3NvdXJjZSYmXG4gICAgKGErPVwiU2lnbmFsbGljaHQ8YnIvPlwiKTtcImF2aWF0aW9uXCI9PWIubGlnaHRfc291cmNlJiYoYSs9XCJCZWZldWVydW5nPGJyLz5cIik7XCJ3YXJuaW5nXCI9PWIubGlnaHRfc291cmNlJiYoYSs9XCJXYXJubGljaHQ8YnIvPlwiKTtpZihiLmxpZ2h0X3NvdXJjZSYmYltcImxpZ2h0Om1ldGhvZFwiXSlzd2l0Y2goYSs9XCJMaWNodCBBcnQ6IFwiLGJbXCJsaWdodDptZXRob2RcIl0pe2Nhc2UgXCJnYXNcIjphKz1cIkdhc1wiO2JyZWFrO2Nhc2UgXCJlbGVjdHJpY1wiOmErPVwiRWxla3RyaXNjaFwiO2JyZWFrO2Nhc2UgXCJpbmNhbmRlc2NlbnRcIjphKz1cInN0cmFobGVuZFwiO2JyZWFrO2Nhc2UgXCJoYWxvZ2VuXCI6YSs9XCJIYWxvZ2VuXCI7YnJlYWs7Y2FzZSBcImRpc2NoYXJnZVwiOmErPVwiRW50bGFkdW5nc2xpY2h0XCI7YnJlYWs7Y2FzZSBcIm1ldGFsLWhhbGlkZVwiOmErPVwiSGFsb2dlbi1NZXRhbGxkYW1wZmxhbXBlXCI7YnJlYWs7Y2FzZSBcIm5lb25cIjphKz1cIk5lb25cIjticmVhaztjYXNlIFwic29kaXVtXCI6YSs9XCJOYXRyaXVtZGFtcGZsYW1wZVwiO1xuICAgICAgICBicmVhaztjYXNlIFwiaGlnaF9wcmVzc3VyZV9zb2RpdW1cIjphKz1cIkhvY2hkcnVjayBOYXRyaXVtZGFtcGZsYW1wZVwiO2JyZWFrO2Nhc2UgXCJsb3dfcHJlc3N1cmVfc29kaXVtXCI6YSs9XCJOaWVkcmlnZHJ1Y2sgTmF0cml1bWRhbXBmbGFtcGVcIjticmVhaztjYXNlIFwiZmx1b3Jlc2NlbnRcIjphKz1cIkZsdW9yZXN6ZW56bGFtcGVcIjticmVhaztjYXNlIFwibWVyY3VyeVwiOmErPVwiUXVlY2tzaWxiZXJsYW1wZVwiO2JyZWFrO2Nhc2UgXCJMRURcIjphKz1cIkxFRFwiO2JyZWFrO2Nhc2UgXCJsYXNlclwiOmErPVwiTGFzZXJcIjticmVhaztjYXNlIFwiYXJjXCI6YSs9XCJMaWNodGJvZ2VuXCI7YnJlYWs7ZGVmYXVsdDphKz1cIlVuYmVrYW5udFwifVwiZHJpbmtpbmdfd2F0ZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJUcmlua3dhc3Nlcjxici8+XCIpO1wieWVzXCI9PWIuZHJpbmtpbmdfd2F0ZXImJihhKz1cIlRyaW5rd2Fzc2VyPGJyLz5cIik7XCJ3b3Jrc1wiPT1iLm1hbl9tYWRlP2ErPVwiSW5kdXN0cmllZ2ViXFx1MDBlNHVkZTxici8+XCI6XCJpbmR1c3RyaWFsXCI9PVxuICAgIGIuYnVpbGRpbmc/YSs9XCJJbmR1c3RyaWVnZWJcXHUwMGU0dWRlPGJyLz5cIjpcImluZHVzdHJpYWxcIj09Yi5sYW5kdXNlP2ErPVwiSW5kdXN0cmllZ2ViaWV0PGJyLz5cIjpcImluZHVzdHJpYWxcIj09Yi5hYnV0dGVycz9hKz1cIkluZHVzdHJpZWdlYmlldDxici8+XCI6XCJjb21tZXJjaWFsXCI9PWIuYWJ1dHRlcnMmJihhKz1cIkdld2VyYmVnZWJpZXQ8YnIvPlwiKTtpZihiW1wiZ2VuZXJhdG9yOnNvdXJjZVwiXSlzd2l0Y2goYSs9XCJBbmxhZ2VuLVR5cDogXCIsYltcImdlbmVyYXRvcjpzb3VyY2VcIl0pe2Nhc2UgXCJiaW9tYXNzXCI6YSs9XCJCaW9nYXNhbmxhZ2VcIjticmVhaztjYXNlIFwiYmlvZnVlbFwiOmErPVwiQmlvZ2FzYW5sYWdlXCI7YnJlYWs7Y2FzZSBcImJpb2dhc1wiOmErPVwiQmlvZ2FzYW5sYWdlXCI7YnJlYWs7Y2FzZSBcImNvYWxcIjphKz1cIktvaGxla3JhZnR3ZXJrXCI7YnJlYWs7Y2FzZSBcIm9pbFwiOmErPVwiXFx1MDBkNmxyYWZmaW5lcmllXCI7YnJlYWs7Y2FzZSBcIndhc3RlXCI6YSs9XCJNXFx1MDBmY2xsdmVyYnJlbm51bmdzYW5sYWdlXCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJ3aW5kXCI6YSs9XCJXaW5ka3JhZnR3ZXJrXCI7YnJlYWs7Y2FzZSBcInNvbGFyXCI6YSs9XCJTb2xhcmtyYWZ0d2Vya1wiO2JyZWFrO2Nhc2UgXCJoeWRyb1wiOmErPVwiV2Fzc2Vya3JhZnR3ZXJrXCI7YnJlYWs7Y2FzZSBcInRpZGFsXCI6YSs9XCJHZXplaXRlbmtyYWZ0d2Vya1wiO2JyZWFrO2Nhc2UgXCJ3YXZlXCI6YSs9XCJXZWxsZW5rcmFmdHdlcmtcIjticmVhaztjYXNlIFwiZ2VvdGhlcm1hbFwiOmErPVwiR2VvdGhlcm1pZVwiO2JyZWFrO2Nhc2UgXCJvc21vdGljXCI6YSs9XCJPc21vc2VrcmFmdHdlcmtcIjticmVhaztjYXNlIFwibnVjbGVhclwiOmErPVwiQXRvbWtyYWZ0d2Vya1wiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnQ8YnIvPlwifVwicGhvdG92b2x0YWljXCI9PWIucG93ZXJfc291cmNlJiYoYSs9XCJTb2xhcmtyYWZ0d2Vya1wiKTtcImxpbmVcIj09Yi5wb3dlciYmKGErPVwiSG9jaHNwYW5udW5ncy1cXHUwMGRjYmVydHJhZ3VuZ3NsZWl0dW5nPGJyLz5cIik7XCJjYWJsZVwiPT1iLnBvd2VyJiYoYSs9XCJVbnRlcmdydW5ka2FiZWw8YnIvPlwiKTtcbiAgICBcImNhYmxlX2Rpc3RyaWJ1dGlvbl9jYWJpbmV0XCI9PWIucG93ZXImJihhKz1cIkthYmVsdmVydGVpbGVyc2NocmFuazxici8+XCIpO1wicGxhbnRcIj09Yi5wb3dlciYmKGErPVwiRWxla3RyaXppdFxcdTAwZTR0c2tyYWZ0d2Vyazxici8+XCIpO1wic3RhdGlvblwiPT1iLnBvd2VyJiYoYSs9XCJFbGVrdHJpeml0XFx1MDBlNHRza3JhZnR3ZXJrPGJyLz5cIik7XCJzdWJfc3RhdGlvblwiPT1iLnBvd2VyJiYoYSs9XCJFbGVrdHJpeml0XFx1MDBlNHRza3JhZnR3ZXJrPGJyLz5cIik7XCJjb21wZW5zYXRvclwiPT1iLnBvd2VyJiYoYSs9XCJLb21wZW5zYXRvcjxici8+XCIpO1wiY29udmVydGVyXCI9PWIucG93ZXImJihhKz1cIktvbnZlcnRlcjxici8+XCIpO1wiZ2VuZXJhdG9yXCI9PWIucG93ZXImJihhKz1cIkdlbmVyYXRvcjxici8+XCIpO1wiaGVsaW9zdGF0XCI9PWIucG93ZXImJihhKz1cIkhlbGlvc3RhdDxici8+XCIpO1wiaW5zdWxhdG9yXCI9PWIucG93ZXImJihhKz1cIklzdWxhdG9yPGJyLz5cIik7XCJidXNiYXJcIj09Yi5saW5lJiYoYSs9XCJTYW1tZWxzY2hpZW5lPGJyLz5cIik7XG4gICAgXCJiYXlcIj09Yi5saW5lJiYoYSs9XCJWZXJiaW5kdW5nIFNjaGFsdHVuZyB1bmQgU2FtbWVsc2NoaWVuZTxici8+XCIpO1wibWlub3JfbGluZVwiPT1iLnBvd2VyJiYoYSs9XCJOZWJlbmxpbmllPGJyLz5cIik7XCJwb2xlXCI9PWIucG93ZXImJihhKz1cIlBmYWhsPGJyLz5cIik7XCJwb3J0YWxcIj09Yi5wb3dlciYmKGErPVwiSC1mXFx1MDBmNnJtaWdlciBNYXN0PGJyLz5cIik7XCJjYXRlbmFyeV9tYXN0XCI9PWIucG93ZXImJihhKz1cIkZhaHJsZWl0dW5nc21hc3Q8YnIvPlwiKTtcInN1YnN0YXRpb25cIj09Yi5wb3dlciYmKGErPVwiVW1zcGFubndlcms8YnIvPlwiKTtcInN3aXRjaFwiPT1iLnBvd2VyJiYoYSs9XCJMYXN0c2NoYWx0ZXI8YnIvPlwiKTtcInRlcm1pbmFsXCI9PWIucG93ZXImJihhKz1cIlRlcm1pbmFsIC8gQW5zY2hsdXNzPGJyLz5cIik7XCJ0b3dlclwiPT1iLnBvd2VyJiYoYSs9XCJIb2Noc3Bhbm51bmdzbGVpdHVuZ3M8YnIvPlwiKTtcInRyYW5zZm9ybWVyXCI9PWIucG93ZXImJihhKz1cIk5lYmVubGluaWU8YnIvPlwiKTtpZihiLmJhcnJpZXIpc3dpdGNoKGIuYmFycmllcil7Y2FzZSBcImJvbGxhcmRcIjphKz1cbiAgICAgICAgXCJQb2xsZXIsIFBmb3N0ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjeWNsZV9iYXJyaWVyXCI6YSs9XCJVbWxhdWZzcGVycmUsIERyXFx1MDBlNG5nZWxnaXR0ZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJnYXRlXCI6YSs9XCJUb3IsIFNjaHJhbmtlPGJyLz5cIjticmVhaztjYXNlIFwiY2hhaW5cIjphKz1cIktldHRlPGJyLz5cIjticmVhaztjYXNlIFwibGlmdF9nYXRlXCI6YSs9XCJTY2hsYWdiYXVtPGJyLz5cIjticmVhaztjYXNlIFwid2FsbFwiOmErPVwiTFxcdTAwZTRybXNjaHV0endhbmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b2xsX2Jvb3RoXCI6YSs9XCJNYXV0c3RlbGxlPGJyLz5cIjticmVhaztjYXNlIFwiZmVuY2VcIjpzd2l0Y2goYi5mZW5jZV90eXBlKXtjYXNlIFwiYmFyYmVkX3dpcmVcIjphKz1cIlN0YWNoZWxkcmFodHphdW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJ3b29kXCI6YSs9XCJIb2x6emF1bjxici8+XCI7YnJlYWs7Y2FzZSBcImNoYWluX2xpbmtcIjphKz1cIk1hc2NoZW5kcmFodHphdW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJlbGVjdHJpY1wiOmErPVxuICAgICAgICBcIldlaWRlemF1bjxici8+XCI7YnJlYWs7Y2FzZSBcInJhaWxpbmdcIjphKz1cIkdlbFxcdTAwZTRuZGVyPGJyLz5cIjticmVhaztjYXNlIFwid2lyZVwiOmErPVwiZWluZmFjaGVyIERyYWh0emF1bjxici8+XCI7YnJlYWs7Y2FzZSBcIm1ldGFsXCI6YSs9XCJNZXRhbGx6YXVuPGJyLz5cIjticmVhaztjYXNlIFwicG9sZVwiOmErPVwiSG9senBmXFx1MDBlNGhsZTxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIlphdW48YnIvPlwifWJyZWFrO2Nhc2UgXCJibG9ja1wiOmErPVwiQmxvY2s8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkaXRjaFwiOmErPVwiR3JhYmVuPGJyLz5cIjticmVhaztjYXNlIFwiYm9yZGVyX2NvbnRyb2xcIjphKz1cIkdyZW56a29udHJvbGxlPGJyLz5cIjticmVhaztjYXNlIFwiaGVkZ2VcIjphKz1cIkhlY2tlPGJyLz5cIjticmVhaztjYXNlIFwicmV0YWluaW5nX3dhbGxcIjphKz1cIlN0XFx1MDBmY3R6bWF1ZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYXR0bGVfZ3JpZFwiOmErPVwiV2VpZGVyb3N0PGJyLz5cIjticmVhaztjYXNlIFwiaG9yc2Vfc3RpbGVcIjphKz1cbiAgICAgICAgXCJaYXVuXFx1MDBmY2JlcnRyaXR0PGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn1cIm5vaXNlX2JhcnJpZXJcIj09Yi53YWxsJiYoYSs9XCJMXFx1MDBlNHJtc2NodXR6d2FuZDxici8+XCIpO1wicmV0YWluaW5nX3dhbGxcIj09Yi5kZXNpZ25hdGlvbiYmKGErPVwiTFxcdTAwZTRybXNjaHV0endhbmQ8YnIvPlwiKTtcIm5vaXNlX2JhcnJpZXJcIj09Yi5kZXNpZ25hdGlvbiYmKGErPVwiTFxcdTAwZTRybXNjaHV0endhbmQ8YnIvPlwiKTtcInN1cnZlaWxsYW5jZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJcXHUwMGRjYmVyd2FjaHRlciBCZXJlaWNoPGJyLz5cIik7aWYoYi5hZXJvd2F5KXN3aXRjaChhKz1cIkZsdWdoYWZlbjogXCIsYi5hZXJvd2F5KXtjYXNlIFwiYWVyb2Ryb21lXCI6YSs9XCJGbHVncGxhdHpcIjticmVhaztjYXNlIFwiYXByb25cIjphKz1cIlZvcmZlbGRcIjticmVhaztjYXNlIFwiZ2F0ZVwiOmErPVwiZ2F0ZVwiO2JyZWFrO2Nhc2UgXCJoZWxpcGFkXCI6YSs9XCJIdWJzY2hyYXViZXJsYW5kZXBsYXR6XCI7YnJlYWs7XG4gICAgICAgIGNhc2UgXCJoYW5nYXJcIjphKz1cIkhhbmdhclwiO2JyZWFrO2Nhc2UgXCJydW53YXlcIjphKz1cIlN0YXJ0LS9MYW5kZWJhaG5cIjticmVhaztjYXNlIFwidGF4aXdheVwiOmErPVwiUm9sbHdlZ1wiO2JyZWFrO2Nhc2UgXCJ0ZXJtaW5hbFwiOmErPVwiRmx1Z2hhZmVuZ2ViXFx1MDBlNHVkZVwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnQ8YnIvPlwifVwiaGFsdFwiPT1iLnJhaWx3YXkmJihhKz1cIkJhaG4tSGFsdGVwdW5rdDxici8+XCIpO1wiY3Jvc3NpbmdcIj09Yi5yYWlsd2F5JiYoYSs9XCJCYWhuXFx1MDBmY2Jlcmdhbmc8YnIvPlwiKTtcImxldmVsX2Nyb3NzaW5nXCI9PWIucmFpbHdheSYmKGErPVwiQmFoblxcdTAwZmNiZXJnYW5nPGJyLz5cIik7XCJzdGF0aW9uXCI9PWIucmFpbHdheSYmKGErPVwiQmFobmhvZjxici8+XCIpO1wiYnVzX3N0YXRpb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJCdXNiYWhuaG9mPGJyLz5cIik7XCJidXNfc3RhdGlvblwiPT0hYi5hbWVuaXR5JiYoXCJzdGF0aW9uXCI9PWIucHVibGljX3RyYW5zcG9ydCYmXCJ5ZXNcIj09XG4gICAgICAgIGIuYnVzKSYmKGErPVwiQnVzYmFobmhvZjxici8+XCIpO1wicmFpbFwiPT1iLnJhaWx3YXkmJihhKz1cIkJhaG5saW5pZTxici8+XCIsXCJjb250YWN0X2xpbmVcIj09Yi5lbGVjdHJpZmllZCYmKGErPVwiZWxla3RyaWZpemllcnRlIEJhaG50cmFzc2UgbWl0IE9iZXJsZWl0dW5nPGJyLz5cIikpO1widHJhbVwiPT1iLnJhaWx3YXkmJihhKz1cIlN0cmFcXHUwMGRmZW5iYWhubGluaWU8YnIvPlwiKTtpZihcInNsaXB3YXlcIj09YltcInNlYW1hcms6c21hbGxfY3JhZnRfZmFjaWxpdHk6Y2F0ZWdvcnlcIl18fFwic2xpcHdheVwiPT1iLmhhcmJvdXJ8fFwic2xpcHdheVwiPT1iLmxlaXN1cmUpYSs9XCJTbGlwYW5sYWdlPGJyLz5cIjtpZihcImhhcmJvdXJcIj09YltcInNlYW1hcms6dHlwZVwiXSlpZihiW1wic2VhbWFyazpoYXJib3VyOmNhdGVnb3J5XCJdKXN3aXRjaChiW1wic2VhbWFyazpoYXJib3VyOmNhdGVnb3J5XCJdKXtjYXNlIFwiZmVycnlcIjphKz1cIkZcXHUwMGU0aHJoYWZlbjxici8+XCI7YnJlYWs7Y2FzZSBcImNvbnRhaW5lclwiOmErPVwiQ29udGFpbmVyaGFmZW48YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwibWFyaW5hXCI6XCJtYXJpbmFcIiE9Yi5sZWlzdXJlJiYoYSs9XCJKYWNodGhhZmVuPGJyLz5cIik7YnJlYWs7Y2FzZSBcIm5hdmVsX2Jhc2VcIjphKz1cIk1hcmluZS1IYWZlbjxici8+XCI7YnJlYWs7Y2FzZSBcInRhbmtlclwiOmErPVwiSGFmZW4gZlxcdTAwZmNyIFxcdTAwZDZsdGFua2VyPGJyLz5cIjticmVhaztjYXNlIFwicGFzc2VuZ2VyXCI6YSs9XCJQZXJzb25lbnNjaGlmZmZhaHJ0PGJyLz5cIjticmVhaztjYXNlIFwiYnVsa1wiOmErPVwiU2NoXFx1MDBmY3R0Z3V0LUhhZmVuPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiSGFmZW48YnIvPlwifWVsc2UgYSs9XCJIYWZlbjxici8+XCI7XCJtYXJpbmFcIj09Yi5sZWlzdXJlJiYoYSs9XCJKYWNodGhhZmVuPGJyLz5cIik7XCJ3cmVja1wiPT1iLmhpc3RvcmljJiYoYSs9XCJXcmFjazxici8+XCIpO1wiYW5pbWFsX3NoZWx0ZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJUaWVyaGVpbTxici8+XCIpO1wic2hlbHRlclwiPT1iLmFuaW1hbCYmKGErPVwiVGllcmhlaW08YnIvPlwiKTtcImhvcnNlX3dhbGtlclwiPT1cbiAgICBiLmFuaW1hbCYmKGErPVwiUGZlcmRlbGF1ZnRyYWluZXI8YnIvPlwiKTtcInllc1wiPT1iLmFuaW1hbF9zaGVsdGVyJiYoYSs9XCJUaWVyaGVpbTxici8+XCIpO1wiZG9nXCI9PWIuYW5pbWFsX3NoZWx0ZXImJihhKz1cIlRpZXJoZWltPGJyLz5cIik7XCJjYXRcIj09Yi5hbmltYWxfc2hlbHRlciYmKGErPVwiVGllcmhlaW08YnIvPlwiKTtcImFuaW1hbF9ib2FyZGluZ1wiPT1iLmFtZW5pdHkmJihhKz1cIlRpZXJwZW5zaW9uPGJyLz5cIik7XCJ5ZXNcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cIlRpZXJwZW5zaW9uPGJyLz5cIik7XCJkb2dcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cIlRpZXJwZW5zaW9uPGJyLz5cIik7XCJob3JzZVwiPT1iLmFuaW1hbF9ib2FyZGluZyYmKGErPVwiVGllcnBlbnNpb248YnIvPlwiKTtcImNhdFwiPT1iLmFuaW1hbF9ib2FyZGluZyYmKGErPVwiVGllcnBlbnNpb248YnIvPlwiKTtcImRvZztjYXRcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cIlRpZXJwZW5zaW9uPGJyLz5cIik7XCJjYXQ7ZG9nXCI9PWIuYW5pbWFsX2JvYXJkaW5nJiZcbiAgICAoYSs9XCJUaWVycGVuc2lvbjxici8+XCIpO2lmKFwic2Nob29sXCI9PWIuYW5pbWFsfHxcInNwb3J0XCI9PWIuYW5pbWFsfHxcImFuaW1hbF90cmFpbmluZ1wiPT1iLmFtZW5pdHkpYSs9XCJUaWVydHJhaW5pbmc8YnIvPlwiO1wic3dpbW1pbmdcIj09Yi5hbmltYWwmJihhKz1cIkJhZGVzdGVsbGUgZlxcdTAwZmNyIEh1bmRlPGJyLz5cIik7aWYoXCJmZWVkaW5nX3BsYWNlXCI9PWIuYW1lbml0eXx8XCJhbmltYWxfZmVlZGluZ1wiPT1iLm1hbl9tYWRlfHxcImFuaW1hbF9mZWVkaW5nXCI9PWIuYW1lbml0eSlhKz1cIkZcXHUwMGZjdHRlcnVuZ3NzdGVsbGU8YnIvPlwiO2lmKFwid2lsZGxpZmVfZmVlZGluZ1wiPT1iLmFtZW5pdHl8fFwiZGVlcl9mZWVkaW5nXCI9PWIuYW1lbml0eXx8XCJnYW1lX2ZlZWRpbmdcIj09Yi5hbWVuaXR5KWErPVwiV2lsZGZcXHUwMGZjdHRlcnVuZzxici8+XCI7aWYoXCJjcmF0Y2hcIj09Yi5hbWVuaXR5fHxcImNyYXRjaFwiPT1iLm1hbl9tYWRlfHxcImZlZWRpbmdfcmFja1wiPT1iLmFtZW5pdHkpYSs9XCJGdXR0ZXJyYXVmZTxici8+XCI7XG4gICAgXCJtYW5nZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJLcmlwcGU8YnIvPlwiKTtcImJpcmRob3VzZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJWb2dlbGhhdXM8YnIvPlwiKTtcInN0b3JrXCI9PWIuYmlyZHNfbmVzdCYmKGErPVwiU3RvcmNoZW5uZXN0PGJyLz5cIik7XCJuZXN0X2JveFwiPT1iLmFtZW5pdHkmJihhKz1cIk5pc3RrYXN0ZW48YnIvPlwiKTtcIndlbGxuZXNzXCI9PWIuYW5pbWFsJiYoYSs9XCJIdW5kZXNhbG9uPGJyLz5cIik7XCJjZW1ldGVyeVwiPT1iLmFuaW1hbCYmKGErPVwiS2xlaW50aWVyZnJpZWRob2Y8YnIvPlwiKTtpZihcInN0YWJsZVwiPT1iLmJ1aWxkaW5nfHxcInN0YWJsZVwiPT1iW1wiYnVpbGRpbmc6dXNlXCJdKWErPVwiUGZlcmRlc3RhbGw8YnIvPlwiO1wiY293c2hlZFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJLdWhzdGFsbDxici8+XCIpO1wic3R5XCI9PWIuYnVpbGRpbmcmJihhKz1cIlNjaHdlaW5lc3RhbGw8YnIvPlwiKTtcImJhcm5cIj09Yi5idWlsZGluZyYmKGErPVwiU2NoZXVuZSAvIGxhbmR3aXJ0c2NoLiBMYWdlcmhhbGxlPGJyLz5cIik7XG4gICAgXCJmYXJtX2F1eGlsaWFyeVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJsYW5kd2lydHNjaGFmdGwuIE5lYmVuZ2ViXFx1MDBlNHVkZTxici8+XCIpO2lmKGJbXCJyaXZlcjp3YXRlcndheV9kaXN0YW5jZVwiXXx8XCJtaWxlc3RvbmVcIj09Yi53YXRlcndheSlhKz1cIkZsdXNza2lsb21ldGVyPGJyLz5cIjtcIm1pbGVzdG9uZVwiPT1iLmhpZ2h3YXkmJihhKz1cIlN0cmFzc2Vua2lsb21ldGVyPGJyLz5cIik7XCJtYXJrZXRcIj09YltcInhtYXM6ZmVhdHVyZVwiXSYmKGErPVwiV2VpaG5hY2h0c21hcmt0PGJyLz5cIik7XCJ0cmVlXCI9PWJbXCJ4bWFzOmZlYXR1cmVcIl0mJihhKz1cIldlaWhuYWNodHNiYXVtdmVya2F1Zjxici8+XCIpO1wiZXZlbnRcIj09YltcInhtYXM6ZmVhdHVyZVwiXSYmKGErPVwiV2VpaG5hY2h0c2V2ZW50PGJyLz5cIik7XCJweXJhbWlkXCI9PWJbXCJ4bWFzOmZlYXR1cmVcIl0mJihhKz1cIldlaWhuYWNodHNweXJhbWlkZTxici8+XCIpO3JldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2hlYWRlcl9mZWF0dXJldHlwZVwiPicrYStcbiAgICAgICAgXCI8YnIvPiA8L2Rpdj5cIn1cbmV4cG9ydCB2YXIgZm5Db250ZW50PWZ1bmN0aW9uKGIpe3ZhciBhO2E9XCJcIitmbkNvbnRlbnRHZW5lcmFsSW5mb3JtYXRpb25zKGIpO2ErPWZuQ29udGVudEhlYWx0aGNhcmUoYik7YSs9Zm5Db250ZW50QWVyb2Ryb21lKGIpO2ErPWZuQ29udGVudEN1aXNpbmUoYik7YSs9Zm5Db250ZW50U2hpcHBpbmcoYik7YSs9Zm5Db250ZW50SHlkcmFudHMoYik7YSs9Zm5Db250ZW50U3BvcnRzKGIpO2ErPWZuQ29udGVudFN0cmVldHNUcmFmZmljKGIpO2ErPWZuQ29udGVudEluZm9ybWF0aW9uQ2l0eShiKTthKz1mbkNvbnRlbnRFbWVyZ2VuY3koYik7YSs9Zm5Db250ZW50U3RvcmFnZShiKTthKz1mbkNvbnRlbnRBbWVuaXR5KGIpO2ErPWZuQ29udGVudFRvdXJpc20oYik7YSs9Zm5Db250ZW50Um91dGUoYik7YSs9Zm5Db250ZW50UGV0cm9sKGIpO2ErPWZuQ29udGVudEJhcnJpZXJzKGIpO2ErPWZuQ29udGVudExhbmR1c2UoYik7YSs9Zm5Db250ZW50TmF0dXJhbChiKTthKz1mbktsb3N0ZXJBZGRpdGlvbmFsKGIpO2ErPVxuICAgIGZuU2ljaGVyaGVpdEFkZGl0aW9uYWwoYik7YSs9Zm5BZGRpdGlvbmFsQnVpbGRpbmdJbmZvcyhiKTthKz1mbktyYWZ0d2Vya0luZm8oYik7YSs9Zm5NZXNzc3RhdGlvbihiKTthKz1mbldlcnRzdG9mZmluZm8oYik7KGErPWZuQ29udGVudFByb3RlY3RlZEFyZWEoYikpJiYoYT1cIjxici8+XCIrYSk7cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfY29udGVudFwiPicrYStcIjwvZGl2PlwifSxmbkNvbnRlbnRBZXJvZHJvbWU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtiLmFlcm9kcm9tZSYmKFwiaW50ZXJuYXRpb25hbFwiPT1iLmFlcm9kcm9tZSYmKGErPVwiRmx1Z2hhZmVudHlwZTogaW50ZXJuYXRpb25hbGVyIEZsdWdwbGF0ejxici8+XCIpLFwicmVnaW9uYWxcIj09Yi5hZXJvZHJvbWUmJihhKz1cIkZsdWdoYWZlbnR5cGU6IHJlZ2lvbmFsZXIgRmx1Z3BsYXR6PGJyLz5cIiksXCJnbGlkaW5nXCI9PWIuYWVyb2Ryb21lJiYoYSs9XCJGbHVnaGFmZW50eXBlOiBTZWdlbGZsdWdwbGF0ejxici8+XCIpLFwicHJpdmF0ZVwiPT1cbmIuYWVyb2Ryb21lJiYoYSs9XCJGbHVnaGFmZW50eXBlOiBQcml2YXRmbHVncGxhdHo8YnIvPlwiKSk7Yi5pYXRhJiYoYSs9XCJJQVRBLUNvZGU6IFwiK2IuaWF0YStcIjxici8+XCIpO2IuaWNhbyYmKGErPVwiSUNBTy1Db2RlOiBcIitiLmljYW8rXCI8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50TmF0dXJhbD1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKGIuZm9yZXN0fHxiLndvb2Qpe2lmKFwiYnJvYWRsZWF2ZWRcIj09Yi5sZWFmX3R5cGV8fFwiZGVjaWR1b3VzXCI9PWIud29vZClhKz1cIkxhdWJ3YWxkPGJyLz5cIjtpZihcIm5lZWRsZWxlYXZlZFwiPT1iLmxlYWZfdHlwZXx8XCJjb25pZmVyb3VzXCI9PWIud29vZClhKz1cIk5hZGVsd2FsZDxici8+XCI7aWYoXCJtaXhlZFwiPT1iLmxlYWZfdHlwZXx8XCJtaXhlZFwiPT1iLndvb2QpYSs9XCJNaXNjaHdhbGQ8YnIvPlwiO1wibGVhZmxlc3NcIj09Yi5sZWFmX3R5cGUmJihhKz1cIkJsYXR0bG9zZSBWZWdldGF0aW9uPGJyLz5cIik7XCJldmVyZ3JlZW5cIj09Yi53b29kJiYoYSs9XCJpbW1lcmdyXFx1MDBmY248YnIvPlwiKTtcbiAgICBcInBhbG1cIj09Yi53b29kJiYoYSs9XCJQYWxtZW48YnIvPlwiKTtcIm5pcGFfcGFsbVwiPT1iLndvb2QmJihhKz1cIk5pcGFwYWxtZW48YnIvPlwiKTtcImV1Y2FseXB0XCI9PWIud29vZCYmKGErPVwiRXVrYWx5cHRlbjxici8+XCIpO2lmKFwiZmlsYW9cIj09Yi53b29kfHxcImNhc3VhcmluYVwiPT1iLndvb2QpYSs9XCJLYXN1YXJpbmVuZ2V3XFx1MDBlNGNoc2U8YnIvPlwifWlmKFwidHJlZVwiPT1iLm5hdHVyYWwmJighYltcImdlbnVzOmRlXCJdJiYhYltcInNwZWNpZXM6ZGVcIl0mJmIubGVhZl90eXBlJiYoYT1cImJyb2FkbGVhdmVkXCI9PWIubGVhZl90eXBlfHxcImRlY2lkdW91c1wiPT1iLmxlYWZfdHlwZXx8XCJicm9hZGxlYWZlZFwiPT1iLmxlYWZfdHlwZT9hK1wiTGF1YmJhdW08YnIvPlwiOmErXCJOYWRlbGJhdW08YnIvPlwiKSxiLmdlbnVzJiYoYSs9Yi5nZW51cytcIjxici8+XCIpLGJbXCJnZW51czpkZVwiXSYmKGErPWJbXCJnZW51czpkZVwiXStcIjxici8+XCIpLGIuc3BlY2llcyYmKGErPWIuc3BlY2llcytcIjxici8+XCIpLGJbXCJzcGVjaWVzOmRlXCJdJiZcbihhKz1iW1wic3BlY2llczpkZVwiXStcIjxici8+XCIpLFwibGFuZG1hcmtcIj09Yi5kZW5vdGF0aW9uJiYoYSs9XCJkdXJjaCBHclxcdTAwZjZcXHUwMGRmZSB1bmQgaGVyYXVzcmFnZW5kZXIgUG9zaXRpb24gc2ljaCBkZXV0bGljaCBhdXMgc2VpbmVtIFVtZmVsZCBoZXJ2b3JoZWJlbmRlciBCYXVtLjxici8+XCIpLFwibmF0dXJhbF9tb251bWVudFwiPT1iLmRlbm90YXRpb258fFwieWVzXCI9PWIubW9udW1lbnQpKWErPVwiYWx0ZXIsIHVudGVyIGJlc29uZGVyZW0gU2NodXR6IHN0ZWhlbmRlciBCYXVtLjxici8+XCI7XCJtYW5nZXJcIj09YltcImZlZWRpbmc6dHlwZVwiXSYmKGErPVwiRnV0dGVyYmVoXFx1MDBlNGx0ZXI6IEZ1dHRlcnJhdWZlPGJyLz5cIik7XCJhdXRvbWF0ZWRcIj09YltcImZlZWRpbmc6dHlwZVwiXSYmKGErPVwiQXV0b21hdDxici8+XCIpO2lmKGJbXCJmZWVkaW5nOmZvclwiXSlzd2l0Y2goYltcImZlZWRpbmc6Zm9yXCJdKXtjYXNlIFwic2hlZXBcIjphKz1cIlRpZXI6IFNjaGFhZjxici8+XCI7YnJlYWs7Y2FzZSBcImhvcnNlXCI6YSs9XG4gICAgXCJUaWVyOiBQZmVyZDxici8+XCI7YnJlYWs7Y2FzZSBcImNvd1wiOmErPVwiVGllcjogS3VoPGJyLz5cIjticmVhaztjYXNlIFwicmFiYml0XCI6YSs9XCJUaWVyOiBLYW5pbmNoZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJidW5ueVwiOmErPVwiVGllcjogSGFzZTxici8+XCI7YnJlYWs7Y2FzZSBcImNhdFwiOmErPVwiVGllcjogS2F0emUgPC9icj5cIjticmVhaztjYXNlIFwic3dhblwiOmErPVwiVGllcjogU2Nod2FuIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImd1aW5lYSBwaWdcIjphKz1cIlRpZXI6IE1lZXJzY2h3ZWluY2hlbiA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJkb25rZXlcIjphKz1cIlRpZXI6IEVzZWwgPC9icj5cIjticmVhaztjYXNlIFwic3F1aXJyZWxcIjphKz1cIlRpZXI6IEVpY2hoXFx1MDBmNnJuY2hlbiA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJwaWdcIjphKz1cIlRpZXI6IFNjaHdlaW4gPC9icj5cIjticmVhaztjYXNlIFwiZGVlclwiOmErPVwiVGllcjogUmVoIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImd1aW5lYSBwaWdcIjphKz1cIlRpZXI6IE1lZXJzY2h3ZWluY2hlbiA8L2JyPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJtb25rZXlcIjphKz1cIlRpZXI6IEFmZmUgPC9icj5cIjticmVhaztjYXNlIFwiY2FtZWxcIjphKz1cIlRpZXI6IEthbWVsIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImdvYXRcIjphKz1cIlRpZXI6IFppZWdlIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImhhbXN0ZXJcIjphKz1cIlRpZXI6IEhhbXN0ZXIgPC9icj5cIjticmVhaztjYXNlIFwiYWxwYWNhXCI6YSs9XCJUaWVyOiBBbHBha2EgPC9icj5cIjticmVhaztkZWZhdWx0OmErPVwiVGllcmU6IG5pY2h0IGJla2FubnQ8YnIvPlwifWlmKGJbXCJmZWVkaW5nOmZvZGRlclwiXSlzd2l0Y2goYltcImZlZWRpbmc6Zm9kZGVyXCJdKXtjYXNlIFwiaGF5XCI6YSs9XCJGXFx1MDBmY3R0ZXJuIG1pdDogSGV1PC9icj5cIjticmVhaztjYXNlIFwiZ3JhaW5cIjphKz1cIkZcXHUwMGZjdHRlcm4gbWl0OiBHZXRyZWlkZTwvYnI+XCI7YnJlYWs7Y2FzZSBcImNvcm5cIjphKz1cIkZcXHUwMGZjdHRlcm4gbWl0OiBLb3JuPC8qYnI+XCI7YnJlYWs7ZGVmYXVsdDphKz1cIkZcXHUwMGZjdHRlcm4gbWl0OiBuaWNodCBiZWthbm50PC9icj5cIn1cInZvbGNhbm9cIj09XG5iLm5hdHVyYWwmJlwiYWN0aXZlXCI9PWIuc3RhdHVzJiYoYSs9XCJBa3RpdmVyIFZ1bGthbjxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwiZG9ybWFudFwiPT1iLnN0YXR1cyYmKGErPVwiUnVoZW5kZXIgVnVsa2FuPGJyLz5cIik7XCJ2b2xjYW5vXCI9PWIubmF0dXJhbCYmXCJleHRpbmN0XCI9PWIuc3RhdHVzJiYoYSs9XCJFcmxvc2NoZW5lciBWdWxrYW48YnIvPlwiKTtcInZvbGNhbm9cIj09Yi5uYXR1cmFsJiZcInN0cmF0b3ZvbGNhbm9cIj09Yi50eXBlJiYoYSs9XCJWdWxrYW50eXA6U2NoaWNodHZ1bGthbjxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwic2hpZWxkXCI9PWIudHlwZSYmKGErPVwiVnVsa2FudHlwOlNjaGlsZHZ1bGthbjxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwic2NvcmlhXCI9PWIudHlwZSYmKGErPVwiVnVsa2FudHlwOlNjaGxhY2tlbi0gdW5kIEFzY2hlbmtlZ2VsPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudFByb3RlY3RlZEFyZWE9ZnVuY3Rpb24oYil7dmFyIGE9XG4gICAgXCJcIixjPVwiXCI7XCJwcm90ZWN0ZWRfYXJlYVwiPT1iLmJvdW5kYXJ5JiYoYi5wcm90ZWN0X2NsYXNzJiYoYz1iLnByb3RlY3RfY2xhc3MpLGIucHJvdGVjdF9pZCYmKGM9Yi5wcm90ZWN0X2lkKSxcIjFcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFN0cmVuZ2VzIE5hdHVycmVzZXJ2YXQsIFdpbGRuaXNnZWJpZXQ8YnIvPlwiKSxcIjJcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IE5hdGlvbmFscGFyazxici8+XCIpLFwiM1wiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogTmF0dXJtb251bWVudDxici8+XCIpLFwiNFwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogQmlvdG9wL0FydGVuc2NodXR6Z2ViaWV0IG1pdCBNYW5hZ2VtZW50PGJyLz5cIiksXCI1XCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBHZXNjaFxcdTAwZmN0enRlIExhbmRzY2hhZnQvR2VzY2hcXHUwMGZjdHp0ZXMgbWFyaW5lcyBHZWJpZXQ8YnIvPlwiKSxcIjZcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFJlc3NvdXJjZW5zY2h1dHpnZWJpZXQgbWl0IE1hbmFnZW1lbnQ8YnIvPlwiKSxcblwiN1wiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogTG9rYWwgZ2VzY2hcXHUwMGZjdHp0ZSBCZXJlaWNoZTxici8+XCIpLFwiOTdcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IEdlc2NoXFx1MDBmY3R6dCBvZGVyIGF1c2dlemVpY2huZXQgZHVyY2ggVmVyZWluYmFydW5nZW4gYXVmIGtvbnRpbmVudGFsZXIgRWJlbmU8YnIvPlwiKSxcIjk4XCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBHZXNjaFxcdTAwZmN0enQgb2RlciBhdXNnZXplaWNobmV0IGR1cmNoIHp3aXNjaGVuc3RhYXRsaWNoZS0gb2RlciBpbnRlcm5hdGlvbmFsZSBWZXJlaW5iYXJ1bmdlbjxici8+XCIpLFwiOTlcIj09YyYmKGE9XCJhbmRlcmUgPGJyLz5cIiksXCIyMVwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogR2VtZWluZGViZWZpbmRlbiAoaGVpbGlnZSBPcnRlLCBhc3NvemlhdGljZSBPcnRlKTxici8+XCIpLFwiMjJcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IEt1bHR1cmVsbGUgV2VydGUgKEt1bHR1cmdcXHUwMGZjdGVyLCBoaXN0b3Jpc2NoZXMgRXJiZSwgRGVua21hbHNjaHV0eik8YnIvPlwiKSxcblwiMjNcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFNjaHV0eiB6dSBHdW5kc3RlbiBkZXIgV2lydHNjaGFmdDxici8+XCIpLFwiMjRcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFBvbGl0aXNjaGUgU2NodXR6Z2ViaWV0ZTxici8+XCIpLFwiMjVcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IE1pbGl0XFx1MDBlNHJpc2NoZSBTY2h1dHpnZWJpZXRlPGJyLz5cIiksXCIyNlwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogSGlzdG9yaXNjaGUgU2NodXR6Z2ViaWV0ZTxici8+XCIpLFwiMjlcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFdlaXRlcmUgZ2VzZWxsc2NoYWZ0bGljaGUgU2NodXR6Z2ViaWV0ZTxici8+XCIpLFwiMTFcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IEJvZGVuc2NodXR6IChWb3JnYWJlIHp1bSBGcnVjaHRiYXJrZWl0c2VyaGFsdCB1bmQgRXJvc2lvbnNzY2h1dHopPGJyLz5cIiksXCIxMlwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogV2Fzc2Vyc2NodXR6Z2ViaWV0IChUcmlua3dhc3NlcnNjaHV0emdlYmlldCwgSGVpbHF1ZWxsZW5zY2h1dHpnZWJpZXQsLi4pPGJyLz5cIiksXG5cIjEzXCI9PWMmJihhPVwiQmVzY2hyZWlidW5nOiBLbGltYSB1bmQgTHVmdCAoS2FsdGx1ZnRlbnN0ZWh1bmcvRnJpc2NobHVmdHZlcnNvcmd1bmcsIEltbWlzc2lvbnNzY2h1dHosLi4pPGJyLz5cIiksXCIxNFwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogQXJ0ZW5zY2h1dHpnZWJpZXQgKEFuZ2VsdmVyYm90LCBGaXNjaGVyZWlzY2h1dHp6b25lLCBKYWdkc2NodXR6Z2ViaWV0LCBWb2dlbHNjaHV0emdlYmlldCwuLik8YnIvPlwiKSxcIjE1XCI9PWMmJihhPSdCZXNjaHJlaWJ1bmc6IFwiU3RhbmRvcnRhdXNzdGF0dHVuZ1wiOiBSZXRlbnRpb25zcmF1bSAoZ2VzZXR6bGljaCBnZXNjaFxcdTAwZmN0enRlcyBcXHUwMGRjYmVyc2Nod2VtbXVuZ3NnZWJpZXQpIDxici8+JyksXCIxNlwiPT1jJiYoYT1cIkJlc2NocmVpYnVuZzogRGF1ZXJoYWZ0ZSBHZWZhaHJlbmJlcmVpY2hlIChMZWJlbnNzY2h1dHosIEJvZGVuYmV3ZWd1bmdzZ2ViaWV0LC4uKTxici8+XCIpLFwiMTlcIj09YyYmKGE9XCJCZXNjaHJlaWJ1bmc6IFdlaXRlcmUgbmF0aW9uYWxlIEdlYmlldGU8YnIvPlwiKSk7XG4gICAgcmV0dXJuIGF9LGZuQ29udGVudExhbmR1c2U9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtcInF1YXJyeVwiPT1iLmxhbmR1c2UmJmIucmVzb3VyY2UmJihhKz1cIlJlc291cmNlOiBcIitiLnJlc291cmNlK1wiPGJyLz5cIik7XCJvcGVuX3N0YWJsZVwiPT1iW1wiYW5pbWFsX2tlZXBpbmc6dHlwZVwiXSYmKGErPVwiT2ZmZW5zdGFsbDxici8+XCIpO1wiZmllbGRfc2hlbHRlclwiPT1iW1wiYW5pbWFsX2tlZXBpbmc6dHlwZVwiXSYmKGErPVwiV2VpZGUgbWl0IFVudGVyc3RhbmQ8YnIvPlwiKTtcInBhZGRvY2tcIj09YltcImFuaW1hbF9rZWVwaW5nOnR5cGVcIl0mJihhKz1cIlBhZGRvY2s8YnIvPlwiKTtiLmFuaW1hbF9rZWVwaW5nJiYoYSs9XCJUaWVyZTogUGVyZGU8YnIvPlwiKTtyZXR1cm4gYX0sZm5NZXNzc3RhdGlvbj1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO1wieWVzXCI9PWJbXCJtb25pdG9yaW5nOndhdGVyX2xldmVsXCJdJiYoYSs9XCJQZWdlbHN0YW5kPGJyLz5cIik7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6c2Vpc21pY19hY3Rpdml0eVwiXSYmXG4oYSs9XCJzZWlzbWlzY2hlIEFrdGl2aXRcXHUwMGU0dGVuPGJyLz5cIik7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6dGlkZV9nYXVnZVwiXSYmKGErPVwiVGlkZXN0YW5kPGJyLz5cIik7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6d2VhdGhlclwiXSYmKGErPVwiV2V0dGVyZGF0ZW48YnIvPlwiKTtcInllc1wiPT1iW1wibW9uaXRvcmluZzphaXJfcXVhbGl0eVwiXSYmKGErPVwiTHVmdHF1YWxpdFxcdTAwZTR0PGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudFJvdXRlPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7Yi5yb3V0ZSYmKFwieWVzXCI9PWIucm91bmR0cmlwJiYoYSs9XCJSdW5kd2VnPGJyLz5cIiksYi5sZW5ndGgmJihhKz1cIkxcXHUwMGU0bmdlL0Rpc3Rhbno6IFwiK2IubGVuZ3RoK1wiPGJyLz5cIiksYi5kaXN0YW5jZSYmKGErPVwiTFxcdTAwZTRuZ2UvRGlzdGFuejogXCIrYi5kaXN0YW5jZStcIjxici8+XCIpLGIuc3ltYm9sJiYoYSs9XCJTeW1ib2w6IFwiK2Iuc3ltYm9sK1wiPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRQZXRyb2w9ZnVuY3Rpb24oYil7dmFyIGE9XG4gICAgXCJcIjtcImZ1ZWxcIj09Yi5hbWVuaXR5JiYoXCJ5ZXNcIj09YltcImZ1ZWw6YmlvZGllc2VsXCJdJiYoYSs9XCJCaW9kaWVzZWw8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDplODVcIl0mJihhKz1cIkV0aGFub2w8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDplMTBcIl0mJihhKz1cIkUxMDxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmxwZ1wiXSYmKGErPVwiQXV0b2dhczxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmNuZ1wiXSYmKGErPVwiRXJkZ2FzPGJyLz5cIiksXCJkaWVzZWxcIj09Yi5mdWVsJiYoYSs9XCJEaWVzZWw8YnIvPlwiKSxcImxwZ1wiPT1iLmZ1ZWwmJihhKz1cIkF1dG9nYXM8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpvY3RhbmVfOTVcIl0mJihhKz1cIlN1cGVyIEJsZWlmcmVpPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6b2N0YW5lXzk4XCJdJiYoYSs9XCJTdXBlciBQbHVzPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6b2N0YW5lXzEwMFwiXSYmKGErPVwiVi1Qb3dlciBSYWNpbmc8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpvY3RhbmVfMTAyXCJdJiYoYSs9XG4gICAgXCJVbHRpbWF0ZTxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmRpZXNlbFwiXSYmKGErPVwiRGllc2VsPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6ZWxlY3RyaWNpdHlcIl0mJihhKz1cIkxhZGVzdGF0aW9uIC8gU3Ryb210YW5rc3RlbGxlPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRIaXN0b3JpYz1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKFwiYXJjaGFlb2xvZ2ljYWxfc2l0ZVwiPT1iLmhpc3RvcmljJiZiLnNpdGVfdHlwZSlzd2l0Y2goYi5zaXRlX3R5cGUpe2Nhc2UgXCJtZWdhbGl0aFwiOmErPVwiTWVnYWxpdGg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJiaWdzdG9uZVwiOmErPVwiRmluZGxpbmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0dW11bHVzXCI6YSs9XCJIXFx1MDBmY2dlbGdyYWI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmb3J0aWZpY2F0aW9uXCI6YSs9XCJoaXN0b3Jpc2NoZXIgR3JhYmVuIC8gV2FsbDxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVuYmVrYW5udDxici8+XCJ9cmV0dXJuIGF9LGZuQ29udGVudEJhcnJpZXJzPVxuICAgIGZ1bmN0aW9uKGIsYSl7dmFyIGM9XCJcIjtpZihcIndhbGxcIj09Yi5iYXJyaWVyfHxcImJvbGxhcmRcIj09Yi5iYXJyaWVyKWIubWF0ZXJpYWwmJihjKz1cIk1hdGVyaWFsOiBcIit0cmFuc2xhdGUoYi5tYXRlcmlhbCkrXCI8YnIvPlwiKTtyZXR1cm4gY30sZm5Db250ZW50VG91cmlzbT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKFwiY2FtcF9zaXRlXCI9PWIudG91cmlzbSl7XCJ5ZXNcIj09Yi5kb2cmJihhKz1cIkh1bmRlIGVybGF1YnQ8YnIvPlwiKTtcIm5vXCI9PWIuZG9nJiYoYSs9XCJIdW5kZSBuaWNodCBlcmxhdWJ0PGJyLz5cIik7Yi5zdGFycyYmKGErPWIuc3RhcnMrXCJTdGVybmU8YnIvPlwiKTtiLmNhcmF2YW5zJiYoYSs9XCJXb2hubW9iaWxzdGVsbHBsXFx1MDBlNHR6ZTxici8+XCIpO2lmKFwieWVzXCI9PWIub3BlbmZpcmV8fFwieWVzXCI9PWIuZmlyZXBsYWNlKWErPVwiRmV1ZXJzdGVsbGVuIHZvcmhhbmRlbjxici8+XCI7XCJ5ZXNcIj09Yi53YXNoaW5nX21hY2hpbmUmJihhKz1cIldhc2NobWFzY2hpbmVuPGJyLz5cIik7XCJ5ZXNcIj09XG5iLmRyeWVyJiYoYSs9XCJUcm9ja25lcjxici8+XCIpO1wieWVzXCI9PWIuZ3JvdXBfb25seSYmKGErPVwiTnV0enVuZyBudXIgZHVyY2ggR3J1cHBlbjxici8+XCIpO1wicmVjZXB0aW9uXCI9PWIuY2FtcF9zaXRlJiYoYSs9XCJSZWNlcHRpb24gdm9yaGFuZGVuPGJyLz5cIil9XCJpbmZvcm1hdGlvblwiPT1iLnRvdXJpc20mJlwibWFwXCI9PWIuaW5mb3JtYXRpb24mJihcInRvcG9cIj09Yi5tYXBfdHlwZSYmKGErPVwiVG9wb2dyYWZpc2NoZSBLYXJ0ZTwvYnI+XCIpLFwic3RyZWV0XCI9PWIubWFwX3R5cGUmJihhKz1cIlN0cmFcXHUwMGRmZW5rYXJ0ZTwvYnI+XCIpLFwic2NoZW1lXCI9PWIubWFwX3R5cGUmJihhKz1cIlNjaGVtYXRpc2NoZSBLYXJ0ZTwvYnI+XCIpLFwidG9wb3Njb3BlXCI9PWIubWFwX3R5cGUmJihhKz1cIlNjaGVtYXRpc2NoZSBLYXJ0ZTwvYnI+XCIpKTtcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSYmXCJtYXBcIj09Yi5pbmZvcm1hdGlvbiYmKFwic2l0ZVwiPT1iLm1hcF9zaXplJiYoYSs9XCJLYXJ0ZSBlaW5lciBBbmxhZ2U8L2JyPlwiKSxcblwiY2l0eVwiPT1iLm1hcF9zaXplJiYoYSs9XCJTdGFkdHBsYW48L2JyPlwiKSxcInJlZ2lvblwiPT1iLm1hcF9zaXplJiYoYSs9XCJLYXJ0ZSBkZXIgUmVnaW9uPC9icj5cIikpO1wiZ2VvbG9neVwiPT1iLmJvYXJkX3R5cGUmJihhKz1cIkdlb2xvZ2lzY2hlIEluZm9ybWF0aW9uZW48YnIvPlwiKTtcImhpc3RvcnlcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJIaXN0b3Jpc2NoZSBJbmZvcm1hdGlvbmVuPGJyLz5cIik7XCJuYXR1cmVcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJJbmZvcm1hdGlvbmVuIFxcdTAwZmNiZXIgTmF0dXI8YnIvPlwiKTtcIm5vdGljZVwiPT1iLmJvYXJkX3R5cGUmJihhKz1cIkFsbGdlbWVpbmUgSW5mb3JtYXRpb248YnIvPlwiKTtcInBsYW50c1wiPT1iLmJvYXJkX3R5cGUmJihhKz1cIkluZm9ybWF0aW9uZW4gXFx1MDBmY2JlciBQZmxhbnplbjxici8+XCIpO1wid2lsZGxpZmVcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJJbmZvcm1hdGlvbmVuIFxcdTAwZmNiZXIgV2lsZDxici8+XCIpO3JldHVybiBhfSxmbkNvbnRlbnRBbWVuaXR5PVxuICAgIGZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJib2F0X3NoYXJpbmdcIj09Yi5hbWVuaXR5JiYoYSs9Yi5ib2F0dHlwZStcIjxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJihhKz1iLmNvdW50cnkrXCI8YnIvPlwiKTtpZihiLnZlbmRpbmcpc3dpdGNoKGIudmVuZGluZyl7Y2FzZSBcImFkbWlzc2lvbl90aWNrZXRzXCI6YSs9XCJUaWNrZXRzPGJyLz5cIjticmVhaztjYXNlIFwiYW5pbWFsX2ZlZWRcIjphKz1cIlRpZXJmdXR0ZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJib29rc1wiOmErPVwiQlxcdTAwZmNjaGVyPGJyLz5cIjticmVhaztjYXNlIFwiY2FuZGxlc1wiOmErPVwiS2VyemVuPGJyLz5cIjticmVhaztjYXNlIFwiY2lnYXJldHRlc1wiOmErPVwiWmlnYXJldHRlbjxici8+XCI7YnJlYWs7Y2FzZSBcImNvbmRvbXNcIjphKz1cIktvbmRvbWU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkcmlua3NcIjphKz1cIkdldHJcXHUwMGU0bmtlPGJyLz5cIjticmVhaztjYXNlIFwiZmlyc3RfYWlkXCI6YSs9XCJFcnN0ZSBIaWxmZSBBcnRpa2VsPGJyLz5cIjticmVhaztcbiAgICAgICAgY2FzZSBcImZpc2hpbmdfdGFja2xlXCI6YSs9XCJBbmdlbGVxdWlwbWVudDxici8+XCI7YnJlYWs7Y2FzZSBcImZsb3dlcnNcIjphKz1cIkJsdW1lbjxici8+XCI7YnJlYWs7Y2FzZSBcImljZV9jcmVhbVwiOmErPVwiRWlzPGJyLz5cIjticmVhaztjYXNlIFwibGF1bmRyeV9kZXRlcmdlbnRcIjphKz1cIldhc2NobWl0dGVsPGJyLz5cIjticmVhaztjYXNlIFwibmV3c3BhcGVyc1wiOmErPVwiWmVpdHVuZzxici8+XCI7YnJlYWs7Y2FzZSBcIlNJTV9jYXJkc1wiOmErPVwiU0lNLUthcnRlbjxici8+XCI7YnJlYWs7Y2FzZSBcInN3ZWV0c1wiOmErPVwiU1xcdTAwZmNcXHUwMGRmaWdrZWl0ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXJjZWxfcGlja3VwXCI6YSs9XCJQYWtldHN0YXRpb248YnIvPlwiO2JyZWFrO2Nhc2UgXCJpY2VfY3ViZXNcIjphKz1cIkVpc3dcXHUwMGZjcmZlbDxici8+XCI7YnJlYWs7Y2FzZSBcInB1YmxpY190cmFuc3BvcnRfdGlja2V0c1wiOmErPVwiVGlja2V0cyBmXFx1MDBmY3IgXFx1MDBmNmZmZW50bGljaGUgVmVya2VocnNtaXR0ZWw8YnIvPlwiO1xuICAgICAgICAgICAgYnJlYWs7Y2FzZSBcInBhcmtpbmdfdGlja2V0XCI6YSs9XCJQYXJrdGlja2V0PGJyLz5cIjticmVhaztjYXNlIFwic2V4X3RveXNcIjphKz1cIlNleHNwaWVsemV1Zzxici8+XCI7YnJlYWs7Y2FzZSBcInN0YW1wc1wiOmErPVwiQnJpZWZtYXJrZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b2xsXCI6YSs9XCJNYXV0dGlja2V0czxici8+XCI7YnJlYWs7Y2FzZSBcInVtYnJlbGxhc1wiOmErPVwiUmVnZW5zY2hpcm1lPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiSW5oYWx0IHVuYmVrYW5udDxici8+XCJ9XCJwb3N0X2JveFwiPT1iLmFtZW5pdHkmJihiLmNvbGxlY3Rpb25fdGltZXMmJihhKz1cIkxlZXJ1bmdzemVpdGVuOiBcIitiLmNvbGxlY3Rpb25fdGltZXMrXCI8YnIvPlwiKSxcInllc1wiPT1iLmRyaXZlX3Rocm91Z2gmJihhKz1cIlZvbSBBdXRvIGF1cyBlcnJlaWNoYmFyLiA8YnIvPlwiKSk7cmV0dXJuIGF9LGZuQ29udGVudFN0b3JhZ2U9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcInN0b3JhZ2VfdGFua1wiPT1iLm1hbl9tYWRlKXtpZihiLmNvbnRlbnQpe3ZhciBjPVxuICAgIGIuY29udGVudDtzd2l0Y2goYyl7Y2FzZSBcImZ1ZWxcIjpjPVwiRGllc2VsXCI7YnJlYWs7Y2FzZSBcIm9pbFwiOmM9XCJcXHUwMGQ2bFwiO2JyZWFrO2Nhc2UgXCJnYXNcIjpjPVwiR2FzXCI7YnJlYWs7Y2FzZSBcInNsdXJyeVwiOmM9XCJHXFx1MDBmY2xsZVwiO2JyZWFrO2Nhc2UgXCJjZW1lbnRcIjpjPVwiWmVtZW50XCI7YnJlYWs7Y2FzZSBcIndhdGVyXCI6Yz1cIldhc3NlclwiO2JyZWFrO2Nhc2UgXCJtYW51cmVcIjpjPVwiRFxcdTAwZmNuZ2VyXCI7YnJlYWs7Y2FzZSBcInNpbGFnZVwiOmM9XCJTaWxhZ2VcIn1hKz1cIkluaGFsdDogXCIrYytcIjxici8+XCJ9aWYoYi5jb250ZW50cyl7Yz1iLmNvbnRlbnRzO3N3aXRjaChjKXtjYXNlIFwiZnVlbFwiOmM9XCJEaWVzZWxcIjticmVhaztjYXNlIFwib2lsXCI6Yz1cIlxcdTAwZDZsXCI7YnJlYWs7Y2FzZSBcImdhc1wiOmM9XCJHYXNcIjticmVhaztjYXNlIFwic2x1cnJ5XCI6Yz1cIkdcXHUwMGZjbGxlXCI7YnJlYWs7Y2FzZSBcImNlbWVudFwiOmM9XCJaZW1lbnRcIjticmVhaztjYXNlIFwid2F0ZXJcIjpjPVwiV2Fzc2VyXCI7YnJlYWs7XG4gICAgY2FzZSBcIm1hbnVyZVwiOmM9XCJEXFx1MDBmY25nZXJcIjticmVhaztjYXNlIFwic2lsYWdlXCI6Yz1cIlNpbGFnZVwifWErPVwiSW5oYWx0OiBcIitjK1wiPGJyLz5cIn19Yi5zdG9yYWdlJiYoXCJnYXNcIj09Yi5zdG9yYWdlJiYoYSs9XCJJbmhhbHQ6IEdhczxici8+XCIpLFwib2lsXCI9PWIuc3RvcmFnZSYmKGErPVwiSW5oYWx0OiBcXHUwMGQ2bDxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50SW5mb3JtYXRpb25DaXR5PWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7YltcIm5hbWU6ZGVcIl0mJihhKz1cImRldXRzY2hlciBOYW1lOiBcIitiW1wibmFtZTpkZVwiXStcIjxici8+XCIpO2lmKDFFNDw9Yi5wb3B1bGF0aW9uKWlmKGIucG9wdWxhdGlvbj1cIlwiK2IucG9wdWxhdGlvbiwzPGIucG9wdWxhdGlvbi5sZW5ndGgpe3ZhciBjPWIucG9wdWxhdGlvbi5sZW5ndGglMyxkPTA8Yz9iLnBvcHVsYXRpb24uc3Vic3RyaW5nKDAsYyk6XCJcIjtmb3IodmFyIGk9MDtpPE1hdGguZmxvb3IoYi5wb3B1bGF0aW9uLmxlbmd0aC8zKTtpKyspZD0wPT1jJiYwPT1cbmk/ZCtiLnBvcHVsYXRpb24uc3Vic3RyaW5nKGMrMyppLGMrMyppKzMpOmQrKFwiLlwiK2IucG9wdWxhdGlvbi5zdWJzdHJpbmcoYyszKmksYyszKmkrMykpO2ErPVwiRWlud29obmVyemFobDogXCIrZCtcIjxici8+XCJ9ZWxzZSBhKz1cIkVpbndvaG5lcnphaGwgXCIrYi5wb3B1bGF0aW9uK1wiPGJyLz5cIjsxRTQ+PWIucG9wdWxhdGlvbiYmKGErPVwiRWlud29obmVyemFobDogXCIrYi5wb3B1bGF0aW9uK1wiPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEVtZXJnZW5jeT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2IubGlmZWJvYXQmJihcImluc2hvcmVcIj09Yi5saWZlYm9hdD9hKz1cIkVpbnNhdHpnZWJpZXQ6IEluc2hvcmUgKEJpbm5lbik8YnIvPlwiOlwib2Zmc2hvcmVcIj09Yi5saWZlYm9hdCYmKGErPVwiRWluc2F0emdlYmlldDogT2Zmc2hvcmUgKEJ1dGVuKTxici8+XCIpKTtiW1wibGlmZWJvYXQ6Y2xhc3NcIl0mJihhKz1cIkJvb3RzdHlwOiBcIitiW1wibGlmZWJvYXQ6Y2xhc3NcIl0rXCI8YnIvPlwiKTtpZihiW1wic2lyZW46dHlwZVwiXSl7dmFyIGM9XG4gICAgYltcInNpcmVuOnR5cGVcIl07c3dpdGNoKGMpe2Nhc2UgXCJtZWNoYW5pY2FsXCI6Yz1cIm1lY2hhbmlzY2hcIjticmVhaztjYXNlIFwiZWxlY3Ryb25pY1wiOmM9XCJlbGVrdHJvbmlzY2hcIjticmVhaztjYXNlIFwicG5ldW1hdGljXCI6Yz1cInBuZXVtYXRpc2NoXCI7YnJlYWs7Y2FzZSBcImVsZWN0cm9tZWNoYW5pY1wiOmM9XCJlbGVrdHJvbWVjaGFuaXNjaFwifWErPVwiVHlwOiBcIitjK1wiPGJyLz5cIn1pZihiW1wic2lyZW46cHVycG9zZVwiXSl7Yz1iW1wic2lyZW46cHVycG9zZVwiXTtzd2l0Y2goYyl7Y2FzZSBcImFpcl9yYWlkXCI6Yz1cIkx1ZnRzY2h1dHpcIjticmVhaztjYXNlIFwidG9ybmFkb1wiOmM9XCJUb3JuYWRvXCI7YnJlYWs7Y2FzZSBcInN0b3JtXCI6Yz1cIlN0dXJtXCI7YnJlYWs7Y2FzZSBcImNpdmlsX2RlZmVuc2VcIjpjPVwiQmV2XFx1MDBmNmxrZXJ1bmdzc2NodXR6XCI7YnJlYWs7Y2FzZSBcImZpcmVcIjpjPVwiRmV1ZXJcIn1hKz1cIk51dHp1bmc6IFwiK2MrXCI8YnIvPlwifWJbXCJzaXJlbjptb2RlbFwiXSYmKGErPVwiTW9kZWw6IFwiK2JbXCJzaXJlbjptb2RlbFwiXStcbiAgICBcIjxici8+XCIpO2JbXCJzaXJlbjpyYW5nZVwiXSYmKGErPVwiSFxcdTAwZjZyd2VpdGU6IFwiK2JbXCJzaXJlbjpyYW5nZVwiXStcIjxici8+XCIpO3JldHVybiBhfSxmbkNvbnRlbnRDdWlzaW5lPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7aWYoYi5jdWlzaW5lKXt2YXIgYz1cIlwiLGE9KFwic3VwZXJtYXJrZXRcIj09Yi5zaG9wfHxcImNvbnZlbmllbmNlXCI9PWIuc2hvcHx8XCJkZWxpXCI9PWIuc2hvcHx8XCJvcmdhbmljXCI9PWIuc2hvcCkmJlwicmVzdGF1cmFudFwiIT1iLmFtZW5pdHk/YStcIlNwZXppYWxpdFxcdTAwZTR0ZW46IFwiOmErXCJLXFx1MDBmY2NoZTogXCI7XCJhcmFiaWNcIj09Yi5jdWlzaW5lJiYoYys9XCJhcmFiaXNjaDxici8+XCIpO1wiaXRhbGlhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBpdGFsaWVuaXNjaDxici8+XCIpO1wiaW50ZXJuYXRpb25hbFwiPT1iLmN1aXNpbmUmJihjKz1cIiBpbnRlcm5hdGlvbmFsPGJyLz5cIik7XCJyZWdpb25hbFwiPT1iLmN1aXNpbmUmJihjKz1cIiByZWdpb25hbDxici8+XCIpO1wiY2hpbmVzZVwiPT1iLmN1aXNpbmUmJlxuKGMrPVwiIGNoaW5lc2lzY2g8YnIvPlwiKTtcImdyZWVrXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGdyaWVjaGlzY2g8YnIvPlwiKTtcImFmcmljYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgYWZyaWthbmlzY2g8YnIvPlwiKTtcImdlcm1hblwiPT1iLmN1aXNpbmUmJihjKz1cIiBkZXV0c2NoPGJyLz5cIik7XCJtZXhpY2FuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIG1leGlrYW5pc2NoPGJyLz5cIik7XCJmcmVuY2hcIj09Yi5jdWlzaW5lJiYoYys9XCIgZnJhbnpcXHUwMGY2c2lzY2g8YnIvPlwiKTtcImluZGlhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBpbmRpc2NoPGJyLz5cIik7XCJpcmFuaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGlyYW5pc2NoPGJyLz5cIik7XCJsZWJhbmVzZVwiPT1iLmN1aXNpbmUmJihjKz1cIiBsaWJhbmVzaXNjaDxici8+XCIpO1widGhhaVwiPT1iLmN1aXNpbmUmJihjKz1cIiB0aGFpbFxcdTAwZTRuZGlzY2g8YnIvPlwiKTtcImJhbGthblwiPT1iLmN1aXNpbmUmJihjKz1cIiBiYWxrYW48YnIvPlwiKTtcInR1cmtpc2hcIj09Yi5jdWlzaW5lJiZcbihjKz1cIiB0XFx1MDBmY3JraXNjaDxici8+XCIpO1wiYmF2YXJpYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgYmF5cmlzY2g8YnIvPlwiKTtcImN6ZWNoXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHRzY2hlY2hpc2NoPGJyLz5cIik7XCJwb3J0dWd1ZXNlXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHBvcnR1Z2llc2lzY2g8YnIvPlwiKTtcInNwYW5pc2hcIj09Yi5jdWlzaW5lJiYoYys9XCIgc3BhbmlzY2g8YnIvPlwiKTtcImphcGFuZXNlXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGphcGFuaXNjaDxici8+XCIpO1wiZmlzaFwiPT1iLmN1aXNpbmUmJihjKz1cIiBGaXNjaDxici8+XCIpO1wiYnJhemlsaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGJyYXNpbGlhbmlzY2g8YnIvPlwiKTtcImFzaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGFzaWF0aXNjaDxici8+XCIpO1wibWVkaXRlcnJhbmVhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBtZWRpdGVycmFuPGJyLz5cIik7XCJzZWFmb29kXCI9PWIuY3Vpc2luZSYmKGMrPVwiIE1lZXJlc2ZyXFx1MDBmY2NodGU8YnIvPlwiKTtcImljZV9jcmVhbVwiPT1cbmIuY3Vpc2luZSYmKGMrPVwiIEVpc2NyZW08YnIvPlwiKTtcImJ1cmdlclwiPT1iLmN1aXNpbmUmJihjKz1cIiBGYXN0IEZvb2Q8YnIvPlwiKTtcImZyb3plbl95b2d1cnRcIj09Yi5jdWlzaW5lJiYoYys9XCIgRnJvemVuIFlvZ3VydDxici8+XCIpO1wiXCI9PWMmJihjPWIuY3Vpc2luZStcIjxici8+XCIpO2ErPWN9cmV0dXJuIGF9LGZuQ29udGVudFNoaXBwaW5nPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7Yi5oYXJib3VyPVwieWVzXCI7XCJ5ZXNcIj09YltcImFjY2Vzczp0aWRlXCJdJiYoYSs9XCJadWZhaHJ0c2Jlc2NoclxcdTAwZTRua3VuZyBkdXJjaCBUaWRlPC9icj5cIik7XCJ5ZXNcIj09YltcImFjY2Vzczpzd2VsbFwiXSYmKGErPVwiWnVmYWhydHNiZXNjaHJcXHUwMGU0bmt1bmcgZHVyY2ggU2Nod2VsbDwvYnI+XCIpO1wieWVzXCI9PWJbXCJhY2Nlc3M6aWNlXCJdJiYoYSs9XCJadWZhaHJ0c2Jlc2NoclxcdTAwZTRua3VuZyBkdXJjaCBFaXM8L2JyPlwiKTtiLnZoZl9jaGFubmVsJiYoYSs9XCJVS1ctS2FuYWw6IFwiK2IudmhmX2NoYW5uZWwrXG4gICAgXCI8L2JyPlwiKTtiLm1tc2kmJihhKz1cIk1NU0ktTnVtbWVyOiBcIitiLm1tc2krXCI8L2JyPlwiKTtiW1wiaGFyYm91cjppbmZvcm1hdGlvblwiXSYmKGErPVwiSW5mb3JtYXRpb24gOlwiK2JbXCJoYXJib3VyOmluZm9ybWF0aW9uXCJdK1wiPC9icj5cIik7XCJ5ZXNcIj09Yi5tb3RvcmJvYXQmJihhKz1cIkZhaHJlbiBtaXQgTW90b3IgZXJsYXVidDwvYnI+XCIpO1wibm9cIj09Yi5tb3RvcmJvYXQmJihhKz1cIkZhaHJlbiBtaXQgTW90b3IgbmljaHQgZXJsYXVidDwvYnI+XCIpO2IuQ0VNVCYmKGErPVwiQ0VNVDogXCIrYi5DRU1UK1wiPC9icj5cIik7XCJ5ZXNcIj09Yi5pbnRlcm1pdHRlbnQmJihhKz1cIkZsdXNzIHplaXR3ZWlzZSBhdXNnZXRyb2NrbmV0PC9icj5cIik7XCJ5ZXNcIj09Yi50aWRhbCYmKGErPVwiR2V6ZWl0ZW4gYmVlaW5mbHVzc2VuIGRpZSBTdHJcXHUwMGY2bXVuZzwvYnI+XCIpO2IuZHJhZnQmJihhKz1cIkZhaHJ3YXNzZXJ0aWVmZTogXCIrYi5kcmFmdCtcIiBtPC9icj5cIik7aWYoXCJzbGlwd2F5XCI9PWIubGVpc3VyZXx8XCJzbGlwd2F5XCI9PVxuICAgIGIuaGFyYm91cilcImhhbmRcIj09Yi5vcGVyYXRpbmcmJihhKz1cIkZ1bmt0aW9uc3dlaXNlOiBIYW5kYmV0cmllYiwgU2xpcHdhZ2VuPGJyLz5cIiksXCJjYXJcIj09Yi5vcGVyYXRpbmcmJihhKz1cIkZ1bmt0aW9uc3dlaXNlOiBtaXQgQXV0bywgQm9vdHNhbmhcXHUwMGU0bmdlcjxici8+XCIpLFwiY2FibGVfd2luY2hcIj09Yi5vcGVyYXRpbmcmJihhKz1cIkZ1bmt0aW9uc3dlaXNlOiBTZWlsd2luZGU8YnIvPlwiKSxcInRyYXZlbGxpZnRcIj09Yi5vcGVyYXRpbmcmJihhKz1cIkZ1bmt0aW9uc3dlaXNlOiBUcmF2ZWxsaWZ0PGJyLz5cIiksXCJjcmFuZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJtaXQgS3Jhbjxici8+XCIsYltcImNyYW5lOm1heGxvYWRcIl0mJihhKz1cIk1heGltYWxlIExhc3Q6IFwiK2JbXCJjcmFuZTptYXhsb2FkXCJdK1wiPGJyLz5cIiksYltcInNoaXA6bWF4ZHJhZnRcIl0mJihhKz1cIk1heGltYWxlciBUaWVmZ2FuZzogXCIrYltcInNoaXA6bWF4ZHJhZnRcIl0rXCI8YnIvPlwiKSxiW1wic2hpcDptYXhsZW5ndGhcIl0mJihhKz1cbiAgICBcIk1heGltYWxlIEJvb3RzbFxcdTAwZTRuZ2U6IFwiK2JbXCJzaGlwOm1heGxlbmd0aFwiXStcIjxici8+XCIpKSxcInllc1wiPT1iLnZlaGljbGUmJihhKz1cIk1pdCBGYWhyemV1ZyBlcnJlaWNoYmFyPGJyLz5cIik7YSs9Zm5XcmVja0luZm8oYik7aWYoXCJmZXJyeVwiPT1iLnJvdXRlfHxcImZlcnJ5X3Rlcm1pbmFsXCI9PWIuYW1lbml0eXx8XCJ5ZXNcIj09Yi5mZXJyeSl7dmFyIGM9Yi5kdXJhdGlvbjtcIlwiIT1jJiYoXCJ1bmRlZmluZWRcIiE9YyYmbnVsbCE9YykmJihhKz1cIkZhaHJ0emVpdCBpbiBTdGQuIDogXCIrYytcIjxici8+XCIpO1wieWVzXCI9PWIubW90b3JjYXImJihhKz1cIkF1dG9zIGVybGF1YnQgPGJyLz5cIik7XCJub1wiPT1iLm1vdG9yY2FyJiYoYSs9XCJBdXRvcyBuaWNodCBlcmxhdWJ0IDxici8+XCIpO1wibm9cIj09Yi5tb3Rvcl92ZWhpY2xlJiYoYSs9XCJGYWhyemV1Z2UgbmljaHQgZXJsYXVidCA8YnIvPlwiKTtcInllc1wiPT1iLm1vdG9yX3ZlaGljbGUmJihhKz1cIkZhaHJ6ZXVnZSBlcmxhdWJ0IDxici8+XCIpO1wieWVzXCI9PVxuYi52ZWhpY2xlJiYoYSs9XCJGYWhyemV1Z2UgZXJsYXVidCA8YnIvPlwiKTtcIm5vXCI9PWIudmVoaWNsZSYmKGErPVwiS2VpbmUgRmFocnpldWdlPGJyLz5cIik7XCJub1wiPT1iLmJpY3ljbGUmJihhKz1cIktlaW5lIEZhaHJyXFx1MDBlNGRlcjxici8+XCIpO1wibm9cIj09Yi5iaWN5Y2xlJiYoYSs9XCJGYWhyclxcdTAwZTRkZXIgZXJsYXVidDxici8+XCIpO1wieWVzXCI9PWIuaGd2JiYoYSs9XCJMS1cgZXJsYXVidCA8YnIvPlwiKTtcIm5vXCI9PWIuaGd2JiYoYSs9XCJMS1cgbmljaHQgZXJsYXVidCA8YnIvPlwiKTtcInllc1wiPT1iLmZvb3QmJihhKz1cIkZ1c3NnXFx1MDBlNG5nZXIgZXJsYXVidCA8YnIvPlwiKTtcIm5vXCI9PWIuZm9vdCYmKGErPVwiRnVzc2dcXHUwMGU0bmdlciBuaWNodCBlcmxhdWJ0IDxici8+XCIpO1wieWVzXCI9PWIuYmljeWNsZSYmKGErPVwiRmFocnJhZGZhaHJlciBlcmxhdWJ0IDxici8+XCIpO1wibm9cIj09Yi5iaWN5Y2xlJiYoYSs9XCJGYWhycmFkZmFocmVyIG5pY2h0IGVybGF1YnQgPGJyLz5cIik7XCJ5ZXNcIj09YltcImZlcnJ5OmNhYmxlXCJdJiZcbihhKz1cIlNlaWxmXFx1MDBlNGhyZTxici8+XCIpfWlmKGJbXCJzZWFtYXJrOmxpZ2h0OjE6Y29sb3VyXCJdKXtjPWJbXCJzZWFtYXJrOmxpZ2h0OjE6Y29sb3VyXCJdO3N3aXRjaChjKXtjYXNlIFwid2hpdGVcIjpjPVwiV2VpXFx1MDBkZlwiO2JyZWFrO2Nhc2UgXCJyZWRcIjpjPVwiUm90XCI7YnJlYWs7Y2FzZSBcImdyZWVuXCI6Yz1cIkdyXFx1MDBmY25cIjticmVhaztjYXNlIFwiYmx1ZVwiOmM9XCJCbGF1XCI7YnJlYWs7Y2FzZSBcInllbGxvd1wiOmM9XCJHZWxiXCI7YnJlYWs7Y2FzZSBcImFtYmVyXCI6Yz1cIkJlcm5zdGVpbmZhcmJlblwifWErPVwiRmFyYmUgZGVzIExpY2h0czogXCIrYytcIjxici8+XCJ9XCJsaWdodGhvdXNlXCI9PWIubWFuX21hZGUmJihiW1wic2VhbWFyazpsaWdodDoxOmNoYXJhY3RlclwiXSYmKGErPVwiUmh5dG11cyBkZXMgTGljaHRlczogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpjaGFyYWN0ZXJcIl0rXCI8YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDoxOnBlcmlvZFwiXSYmKGErPVwiUGVyaW9kZTogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpwZXJpb2RcIl0rXG4gICAgXCI8YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDoxOmhlaWdodFwiXSYmKGErPVwiSFxcdTAwZjZoZTogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpoZWlnaHRcIl0rXCIgbTxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OjE6cmFuZ2VcIl0mJihhKz1cIlJlaWNod2VpdGU6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OjE6cmFuZ2VcIl0rXCIgc208YnIvPlwiKSk7aWYoYltcInNlYW1hcms6bGlnaHQ6Y29sb3VyXCJdKXtjPWJbXCJzZWFtYXJrOmxpZ2h0OmNvbG91clwiXTtzd2l0Y2goYyl7Y2FzZSBcIndoaXRlXCI6Yz1cIldlaVxcdTAwZGZcIjticmVhaztjYXNlIFwicmVkXCI6Yz1cIlJvdFwiO2JyZWFrO2Nhc2UgXCJncmVlblwiOmM9XCJHclxcdTAwZmNuXCI7YnJlYWs7Y2FzZSBcImJsdWVcIjpjPVwiQmxhdVwiO2JyZWFrO2Nhc2UgXCJ5ZWxsb3dcIjpjPVwiR2VsYlwiO2JyZWFrO2Nhc2UgXCJhbWJlclwiOmM9XCJCZXJuc3RlaW5mYXJiZW5cIn1hKz1cIkZhcmJlIGRlcyBMaWNodHM6IFwiK2MrXCI8YnIvPlwifVwibGlnaHRob3VzZVwiPT1iLm1hbl9tYWRlJiYoYltcInNlYW1hcms6bGlnaHQ6Y2hhcmFjdGVyXCJdJiZcbihhKz1cIlJoeXRtdXMgZGVzIExpY2h0ZXM6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OmNoYXJhY3RlclwiXStcIjxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OmhlaWdodFwiXSYmKGErPVwiSFxcdTAwZjZoZTogXCIrYltcInNlYW1hcms6bGlnaHQ6aGVpZ2h0XCJdK1wiIG08YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDpyYW5nZVwiXSYmKGErPVwiUmVpY2h3ZWl0ZTogXCIrYltcInNlYW1hcms6bGlnaHQ6cmFuZ2VcIl0rXCIgc208YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDpwZXJpb2RcIl0mJihhKz1cIlBlcmlvZGU6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OnBlcmlvZFwiXStcIjxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50SHlkcmFudHM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImZpcmVfaHlkcmFudFwiPT1iLmVtZXJnZW5jeSl7dmFyIGM9YltcImZpcmVfaHlkcmFudDpjb3VudFwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIkFuemFobDogXCIrYytcIjxici8+XCIpO2M9YltcImZpcmVfaHlkcmFudDpkaWFtZXRlclwiXTtcbiAgICBcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIlJvaHJkdXJjaG1lc3NlcjogXCIrYytcIiBtbTxici8+XCIpO2M9YltcImZpcmVfaHlkcmFudDpwcmVzc3VyZVwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhPVwic3VjdGlvblwiPT1jP2ErXCJEcnVjayBpbiBiYXIgLyBTYXVnbGVpdHVuZzogU2F1Z2xlaXR1bmc8YnIvPlwiOmErKFwiRHJ1Y2sgaW4gYmFyIC8gU2F1Z2xlaXR1bmc6IFwiK2MrXCI8YnIvPlwiKSk7Yz1iW1wiZmlyZV9oeWRyYW50OnBvc2l0aW9uXCJdO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKFwibGFuZVwiPT1jP2ErPVwiUG9zaXRpb246IEZhaHJiYWhuPGJyLz5cIjpcInBhcmtpbmdfbG90XCI9PWM/YSs9XCJQb3NpdGlvbjogUGFya2J1Y2h0PGJyLz5cIjpcInNpZGV3YWxrXCI9PWM/YSs9XCJQb3NpdGlvbjogQlxcdTAwZmNyZ2Vyc3RlaWc8YnIvPlwiOlwiZ3JlZW5cIj09YyYmKGErPVwiUG9zaXRpb246IFdpZXNlPGJyLz5cIikpO2M9Yi53YXRlcl92b2x1bWU7XG4gICAgXCJ1bmRlZmluZWRcIiE9YyYmKG51bGwhPWMmJlwiXCIhPWMpJiYoYSs9XCJWb2x1bWVuOiBcIitjK1wiPGJyLz5cIik7Yz1iW1wiZmlyZV9oeWRyYW50OmF3d2FfY2xhc3NcIl07XCJ1bmRlZmluZWRcIiE9YyYmbnVsbCE9YyYmXCJcIiE9Yz9hKz1cIkFXV0EgS2xhc3NlOiBcIitjK1wiPGJyLz5cIjooYz1iLmZsb3dfcmF0ZSxcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIkR1cmNoZmx1c3M6IFwiK2MrXCI8YnIvPlwiKSk7Yz1iLndhdGVyX3NvdXJjZTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YyYmXCJtYWluXCIhPWMpJiYoYSs9XCJXYXNzZXJxdWVsbGU6IFwiK2MrXCI8YnIvPlwiKTtjPWJbXCJjb3VwbGluZ3M6dHlwZVwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIktvcHBsdW5nc3R5cDogXCIrYytcIjxici8+XCIpO2M9YltcImNvdXBsaW5nczpkaWFtZXRlclwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIktvcHBsdW5nc2R1cmNobWVzc2VyOiBcIitcbiAgICAgICAgYytcIjxici8+XCIpO2M9YltcInBpbGxhcjp0eXBlXCJdO1wiZHJ5X2JhcnJlbFwiPT09YyYmKGErPVwiVHlwIFxcdTAwZGNiZXJmbHVyaHlkcmFudDogXCIrYytcIjxici8+XCIpO1wiZmlyZV9oeWRyYW50XCI9PT1iW1wiZGlzdXNlZDplbWVyZ2VuY3lcIl0mJihhKz1cIkFrdHVlbGwgdW5icmF1Y2hiYXIuXCIpO1wiXCI9PWEmJihhPVwiS2VpbmUgRGV0YWlscyB2b3JoYW5kZW4uXCIpfXJldHVybiBhfSxmbkNvbnRlbnRTdHJlZXRzVHJhZmZpYz1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO1wieWVzXCI9PWJbXCJyZWRfdHVybjpyaWdodFwiXSYmKGErPVwiQW1wZWwgbWl0IEdyXFx1MDBmY25wZmVpbDxici8+XCIpO1wibm9cIj09YltcInJlZF90dXJuOnJpZ2h0XCJdJiYoYSs9XCJBbXBlbCBvaG5lIEdyXFx1MDBmY25wZmVpbDxici8+XCIpO2IuYnJpZGdlJiYoYi5oZWlnaHQmJihhKz1cIkhcXHUwMGY2aGUgXFx1MDBmY2JlciBkZW0gR3J1bmQ6IFwiK2IuaGVpZ2h0K1wiIG08YnIvPlwiKSxiLmxlbmd0aCYmKGErPVwiTFxcdTAwZTRuZ2UgZGVyIEJyXFx1MDBmY2NrZTogXCIrXG4gICAgYi5sZW5ndGgrXCIgbTxici8+XCIpLGIuYnJpZGdlX3JlZiYmKGErPVwiQmF1d2Vya3NudW1tZXI6IFwiK2IuYnJpZGdlX3JlZitcIjxici8+XCIpLGIuc3RhcnRfZGF0ZSYmKGErPVwiQmF1amFocjogXCIrYi5zdGFydF9kYXRlK1wiPC9icj47XCIpLGIubWF4d2VpZ2h0JiYoYSs9XCJUcmFnZlxcdTAwZTRoaWdrZWl0OiBcIitiLm1heHdlaWdodCtcIiB0PC9icj5cIikpO2IuaGlnaHdheSYmXCJ5ZXNcIj09Yi50b2xsJiYoYSs9XCJNYXV0cGZsaWNodGlnZSBTdHJhXFx1MDBkZmU8YnIvPlwiKTtcInllc1wiPT1iW1widG9sbDpoZ3ZcIl0mJihhKz1cIk1hdXRwZmxpY2h0aWdlIFN0cmFcXHUwMGRmZSBmXFx1MDBmY3IgTEtXczxici8+XCIpO2lmKGIuc3VyZmFjZSl7dmFyIGM9Yi5zdXJmYWNlLGE9YStcIk9iZXJmbFxcdTAwZTRjaGU6IFwiO3N3aXRjaChjKXtjYXNlIFwiZ3Jhc3NcIjphKz1cIkdyYXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXZlZFwiOmErPVwidmVyc2llZ2VsdDxici8+XCI7YnJlYWs7Y2FzZSBcImFzcGhhbHRcIjphKz1cIkFzcGhhbHQ8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJjb2JibGVzdG9uZVwiOmErPVwiTmF0dXJzdGVpbiB1bmJlaGF1ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZXR0XCI6YSs9XCJiZWhhdWVuZXMgU3RlaW5wZmxhc3Rlcjxici8+XCI7YnJlYWs7Y2FzZSBcImNvbmNyZXRlXCI6YSs9XCJCZXRvbjxici8+XCI7YnJlYWs7Y2FzZSBcInVucGF2ZWRcIjphKz1cIm9obmUgU3RyYVxcdTAwZGZlbmJlbGFnPGJyLz5cIjticmVhaztjYXNlIFwicGF2aW5nX3N0b25lc1wiOmErPVwiUGZsYXN0ZXJzdGVpbmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb21wYWN0ZWRcIjphKz1cInZlcmRpY2h0ZXRlIERlY2tzY2hpY2h0IGF1cyBOYXR1cnN0ZWlubWF0ZXJpYWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkaXJ0XCI6YSs9XCJ1bmJlZmVzdGlndDxici8+XCI7YnJlYWs7Y2FzZSBcImZpbmVfZ3JhdmVsXCI6YSs9XCJTcGxpdHQvS2llczxici8+XCI7YnJlYWs7Y2FzZSBcImdyYXNzX3BhdmVyXCI6YSs9XCJSYXNlbmdpdHRlcnN0ZWluZTxici8+XCI7YnJlYWs7Y2FzZSBcImdyYXZlbFwiOmErPVwiU2Nob3R0ZXI8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJlYXJ0aFwiOmErPVwibmF0dXJiZWxhc3NlbmUgT2JlcmZsXFx1MDBlNGNoZTxici8+XCI7YnJlYWs7Y2FzZSBcImdyb3VuZFwiOmErPVwibmF0dXJiZWxhc3NlbmUgT2JlcmZsXFx1MDBlNGNoZTxici8+XCI7YnJlYWs7Y2FzZSBcIm1ldGFsXCI6YSs9XCJNZXRhbGw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtdWRcIjphKz1cIk1hdHNjaCwgTW9yYXN0PGJyLz5cIjticmVhaztjYXNlIFwic2FuZFwiOmErPVwiU2FuZDxici8+XCI7YnJlYWs7Y2FzZSBcIndvb2RcIjphKz1cIkhvbHo8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0YXJ0YW5cIjphKz1cIlRhcnRhbi0gb2RlciBLdW5zdHN0b2ZmYmVsYWc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhcnRpZmljaWFsX3R1cmZcIjphKz1cIkt1bnN0cmFzZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjbGF5XCI6YSs9XCJBc2NoZXBsYXR6PGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn19XCJncmFkZTFcIj09Yi50cmFja3R5cGUmJihhKz1cIldlZ2Jlc2NoYWZmZW5oZWl0OiBCZWZlc3RpZ3RlciBXZWcgKEFzcGhhbHQsIEJldG9uIG9kZXIgUGZsYXN0ZXJzdGVpbmUpPGJyLz5cIik7XG4gICAgXCJncmFkZTJcIj09Yi50cmFja3R5cGUmJihhKz1cIldlZ2Jlc2NoYWZmZW5oZWl0OiBCZWZlc3RpZ3RlciBXZWcgKFNjaG90dGVyIG9kZXIgYW5kZXJlIHZlcmRpY2h0ZXRlIE1hdGVyaWFsaWVuKTxici8+XCIpO1wiZ3JhZGUzXCI9PWIudHJhY2t0eXBlJiYoYSs9XCJXZWdiZXNjaGFmZmVuaGVpdDogQmVmZXN0aWd0ZXIgb2RlciBhdXNnZWJlc3NlcnRlciBXZWcsIGRlciBoYXJ0ZW4gdW5kIHdlaWNoZW4gVW50ZXJncnVuZCBlbnRoXFx1MDBlNGx0ICh6LiBCLiBGZWluc2Nob3R0ZXItLCBTYW5kLSBvZGVyIEVyZHdlZyk8YnIvPlwiKTtcImdyYWRlNFwiPT1iLnRyYWNrdHlwZSYmKGErPVwiV2VnYmVzY2hhZmZlbmhlaXQ6IFVuYmVmZXN0aWd0ZXIgV2VnLCBoYXVwdHNcXHUwMGU0Y2hsaWNoIHdlaWNoZSBNYXRlcmlhbGllbiwgUGZsYW56ZW53dWNocyBlbnRsYW5nIGRlciBTcHVybWl0dGUgKHouIEIuIEdyYXMtLCBTYW5kLSBvZGVyIEVyZHdlZyk8YnIvPlwiKTtcImdyYWRlNVwiPT1iLnRyYWNrdHlwZSYmKGErPVxuICAgICAgICBcIldlZ2Jlc2NoYWZmZW5oZWl0OiBVbmJlZmVzdGlndGVyIFdlZywgT2JlcmZsXFx1MDBlNGNoZSBiZXN0ZWh0IGF1cyBTYW5kLCBFcmRlIGV0Yy4sIG9mdCBudXIgQWJkcnVjayBpbiBHcmFzLCB0ZWlsd2Vpc2Ugc2Nod2VyIHZvbiB1bWdlYmVuZGVtIEdlbFxcdTAwZTRuZGUgdW50ZXJzY2hlaWRiYXI8YnIvPlwiKTtcInllc1wiPT1iLm1vdG9yY3ljbGUmJihhKz1cIjxici8+bWl0IGRlbSBBdXRvIGJlZmFocmJhci48YnIvPlwiKTtcIm5vXCI9PWIubW90b3JjeWNsZSYmKGErPVwiPGJyLz5rZWluZSBtb3RvcmlzaWVydGVuIEZhaHJ6ZXVnZSB6dWdlbGFzc2VuLjxici8+XCIpO1wiZXhjZWxsZW50XCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwiV2VnZXJrZW5uYmFya2VpdDogR3V0IGF1c2dld2llc2VuZXIgV2VnPGJyLz5cIik7XCJnb29kXCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwiV2VnZXJrZW5uYmFya2VpdDogV2VnbWFya2llcnVuZyBzaWNoYmFyLCBhYmVyIG1hbmNobWFsIGV0d2FzIHNjaHdlciB6dSBmaW5kZW48YnIvPlwiKTtcbiAgICBcImludGVybWVkaWF0ZVwiPT1iLnRyYWlsX3Zpc2liaWxpdHkmJihhKz1cIldlZ2Vya2VubmJhcmtlaXQ6IFdlZyBuaWNodCBkdXJjaGdlZ2VuZCBzaWNoYmFyPGJyLz5cIik7XCJiYWRcIj09Yi50cmFpbF92aXNpYmlsaXR5JiYoYSs9XCJXZWdlcmtlbm5iYXJrZWl0OiBXZWdzcHVyIGlzdCBrYXVtIHp1IGVya2VubmVuPGJyLz5cIik7XCJob3JyaWJsZVwiPT1iLnRyYWlsX3Zpc2liaWxpdHkmJihhKz1cIldlZ2Vya2VubmJhcmtlaXQ6IE9mdCBrZWluIFdlZyB2b3JoYW5kZW48YnIvPlwiKTtcIm5vXCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwiV2VnZXJrZW5uYmFya2VpdDogTWVpc3RlbnMga2VpbmUgV2Vnc3B1ciB6dSBlcmtlbm5lbjxici8+XCIpO1wiaGlraW5nXCI9PWIuc2FjX3NjYWxlJiYoYSs9XCJXZWc6IFdlZyBndXQgZ2ViYWhudC4gKFNjaHdpZXJpZ3NrZWl0c3R5cDogMSk8L2JyPlwiKTtcIm1vdW50YWluX2hpa2luZ1wiPT1iLnNhY19zY2FsZSYmKGErPVwiV2VnOiBEdXJjaGdlaGVuZCBndXQgZXJzaWNodGxpY2hlciB1bmQgZ3V0IGJlZ2VoYmFyZXIgV2VnIChTY2h3aWVyaWdza2VpdHN0eXA6IDIpPC9icj5cIik7XG4gICAgXCJkZW1hbmRpbmdfbW91bnRhaW5faGlraW5nXCI9PWIuc2FjX3NjYWxlJiYoYSs9XCJXZWc6IEhlaWtsZSBTdGVsbGVuIGtcXHUwMGY2bm5lbiBtaXQgU2VpbGVuIG9kZXIgS2V0dGVuIGdlc2ljaGVydCBzZWluLiBMZWl0ZXJuIHNpbmQgbVxcdTAwZjZnbGljaC4gRXZlbnR1ZWxsIHNpbmQgZGllIEhcXHUwMGU0bmRlIGZcXHUwMGZjcnMgR2xlaWNoZ2V3aWNodCBuXFx1MDBmNnRpZy4gKFNjaHdpZXJpZ3NrZWl0c3R5cDogMyk8L2JyPlwiKTtcImFscGhpbmVfaGlraW5nXCI9PWIuc2FjX3NjYWxlJiYoYSs9XCJXZWc6IFdlZ3NwdXIga2F1bSB2b3JoYW5kZW4uIEFuIGdld2lzc2VuIFN0ZWxsZW4gYmVuXFx1MDBmNnRpZ3QgbWFuIGRpZSBIXFx1MDBlNG5kZSB6dW0gd2VpdGVya29tbWVuIChTY2h3aWVyaWdza2VpdHN0eXA6IDQpPC9icj5cIik7XCJkZW1hbmRpbmdfYWxwaGluZV9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cIldlZzogT2Z0IHdlZ2xvcywgZWluemVsbmUgZWluZmFjaGUgS2xldHRlcnN0ZWxsZW4gYmlzIElJLiAoU2Nod2llcmlnc2tlaXRzdHlwOiA1KTwvYnI+XCIpO1xuICAgIFwiZGlmZmljdWx0X2FscGluZV9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cIldlZzogU2Nod2llcmlnZXMgQWxwaW5lbndhbmRlcm4sS2xldHRlcnN0ZWxsZW4gYmlzIElJLiBTY2h3aWVyaWdza2VpdHN0eXA6IDY8L2JyPlwiKTtiW1wibXRiOm5hbWVcIl0mJihhKz1cIkZhaHJyYWRzdHJlY2tlIDpcIitiW1wibXRiOm5hbWVcIl0rXCI8L2JyPlwiKTtcIjBcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogS2VpbmUgYmVzb25kZXJlIFNjaHdpZXJpZ2tlaXRlbi48L2JyPldlZ2Jlc2NoYWZmZW5oZWl0OiBmZXN0ZXIgdW5kIGdyaWZmaWdlciBVbnRlcmdydW5kLjwvYnI+SGluZGVybmlzc2U6IEtlaW5lIEhpbmRlcm5pc3NlPC9icj5HZWZcXHUwMGU0bGxlOiBMZWljaHQgYmlzIG1cXHUwMGU0XFx1MDBkZmlnPC9icj5LdXJ2ZW46IHdlaXQ8L2JyPkZhaHJ0ZWNobmlrOiBrZWluZSBiZXNvbmRlcmVzIGZhaHJ0ZWNobmlzY2hlcyBLXFx1MDBmNm5uZW4gblxcdTAwZjZ0aWc8L2JyPlwiKTtcbiAgICBcIjFcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogRGVyIFdlZyBlbnRoXFx1MDBlNGx0IGZsYWNoZSBXdXJ6ZWxuIHVuZCBrbGVpbmVyZSBTdGVpbmUuIEhcXHUwMGU0dWZpZyBhdWNoIHZlcmVpemVsdGUgV2Fzc2VycmlubmVuIHVuZCBFcm9zaW9uc3NjaFxcdTAwZTRkZW48L2JyPldlZ2Jlc2NoYWZmZW5oZWl0OiBsb3NlcmVyIFVudGVyZ3J1bmQgbVxcdTAwZjZnbGljaCwga2xlaW5lIFd1cnplbG4gdW5kIFN0ZWluZTwvYnI+SGluZGVybmlzc2U6IGtsZWluZSBIaW5kZXJuaXNzZSwgV2Fzc2VycmlubmVuLCBFcm9zaW9uc3NjaFxcdTAwZTRkZW48L2JyPkdlZlxcdTAwZTRsbGU6IGJpcyB6dSA0MCU8L2JyPkt1cnZlbjogZW5nPC9icj5GYWhydGVjaG5pazogRmFocnRlY2huaXNjaGUgR3J1bmRrZW50bmlzc2UgblxcdTAwZjZ0aWcuIEhpbmRlcm5pc3NlIGtcXHUwMGY2bm5lbiBcXHUwMGZjYmVycm9sbHQgd2VyZGVuPC9icj5cIik7XCIyXCI9PWJbXCJtdGI6c2NhbGVcIl0mJlxuICAgIChhKz1cIk1vdW50YWluYmlrZXN0cmVja2U6IERlciBXZWcgZW50aFxcdTAwZTRsdCBnclxcdTAwZjZcXHUwMGRmZXJlIFd1cnplbG4gdW5kIFN0ZWluZS4gSFxcdTAwZTR1ZmlnIGF1Y2ggdmVyZWl6ZWx0ZSBXYXNzZXJyaW5uZW4gdW5kIEVyb3Npb25zc2NoXFx1MDBlNGRlbjwvYnI+V2VnYmVzY2hhZmZlbmhlaXQ6IFVudGVyZ3J1bmQgbWVpc3QgbmljaHQgdmVyZmVzdGlndCwgZ3JcXHUwMGY2XFx1MDBkZmVyZSBXdXJ6ZWxuIHVuZCBTdGVpbmU8L2JyPkhpbmRlcm5pc3NlOiAgZmxhY2hlIEFic1xcdTAwZTR0emUgdW5kIFRyZXBwZW48L2JyPkdlZlxcdTAwZTRsbGU6IGJpcyB6dSA3MCU8L2JyPkt1cnZlbjogbGVpY2h0ZSBTcGl0emtlaHJlbjwvYnI+RmFocnRlY2huaWs6IEZvcnRnZXNjaHJpdHRlbmUgRmFocnRlY2huaWsgblxcdTAwZjZ0aWcuPC9icj5cIik7XCIzXCI9PWJbXCJtdGI6c2NhbGVcIl0mJihhKz1cIk1vdW50YWluYmlrZXN0cmVja2U6IEF1ZiBkZW0gV2VnIGZpbmRldCBtYW4gdmVyYmxvY2t0ZSBTaW5nbGV0cmFpbHMgbWl0IHZpZWxlbiBnclxcdTAwZjZcXHUwMGRmZXJlbiBGZWxzYnJvY2tlbiB1bmQvb2RlciBXdXJ6ZWxwYXNzYWdlbjwvYnI+V2VnYmVzY2hhZmZlbmhlaXQ6IHZlcmJsb2NrdCwgdmllbGUgZ3JvXFx1MDBkZmUgV3VyemVsbi9GZWxzZW4gLSBydXRzY2hpZ2VyIFVudGVyZ3J1bmQsIGxvc2VzIEdlclxcdTAwZjZsbDwvYnI+SGluZGVybmlzc2U6ICBob2hlIEFic1xcdTAwZTR0emU8L2JyPkdlZlxcdTAwZTRsbGU6IDcwJSBvZGVyIG1laHI8L2JyPkt1cnZlbjogZW5nZSBTcGl0emtlaHJlbjwvYnI+RmFocnRlY2huaWs6IFNlaHIgZ3V0ZSBCaWtlLUJlaGVycnNjaHVuZyBuXFx1MDBmNnRpZy48L2JyPlwiKTtcbiAgICBcIjRcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogQXVmIGRlbSBXZWcgc2luZCBzZWhyIHN0ZWlsZSB1bmQgc3RhcmsgdmVyYmxvY2t0ZSBTaW5nbGV0cmFpbHMgbWl0IGdyb1xcdTAwZGZlbiBGZWxzYnJvY2tlbiB1bmQvb2RlciBhbnNwcnVjaHN2b2xsZW4gV3VyemVscGFzc2FnZW4sIGRhendpc2NoZW4gaFxcdTAwZTR1ZmlnIGxvc2VzIEdlclxcdTAwZjZsbCB1bmQgZXh0cmVtZSBTdGVpbHJhbXBlbjwvYnI+V2VnYmVzY2hhZmZlbmhlaXQ6IHZlcmJsb2NrdCwgdmllbGUgZ3JvXFx1MDBkZmUgV3VyemVsbi9GZWxzZW4gLSBydXRzY2hpZ2VyIFVudGVyZ3J1bmQsIGxvc2VzIEdlclxcdTAwZjZsbDwvYnI+SGluZGVybmlzc2U6ICBTdGVpbHJhbXBlbiwga2F1bSBmYWhyYmFyZSBBYnNcXHUwMGU0dHplPC9icj5HZWZcXHUwMGU0bGxlOiA3MCUgb2RlciBtZWhyPC9icj5LdXJ2ZW46ICBcXHUwMGQ2c2VuYXJ0aWdlIFNwaXR6a2VocmVuPC9icj5GYWhydGVjaG5pazogUGVyZmVrdGUgQmlrZS1CZWhlcnJzY2h1bmcgbWl0IFRyaWFsLVRlY2huaWtlbiBuXFx1MDBmNnRpZy48L2JyPlwiKTtcbiAgICBcIjVcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogRGVyIHdlZyB3aXJkIGNoYXJha3RlcmlzaWVydCBkdXJjaCBibG9ja2FydGlnZXMgR2VsXFx1MDBlNG5kZSBtaXQgR2VnZW5hbnN0aWVnZW4sIEdlclxcdTAwZjZsbGZlbGRlcm4gdW5kIEVyZHJ1dHNjaGVuLCBcXHUwMGY2c2VuYXJ0aWdlbiBTcGl0emtlaHJlbiwgbWVocmVyZW4gaG9oZW4sIGRpcmVrdCBhdWZlaW5hbmRlcmZvbGdlbmRlbiBBYnNcXHUwMGU0dHplbiB1bmQgSGluZGVybmlzc2VuIHdpZSB1bWdlZmFsbGVuZW4gQlxcdTAwZTR1bWVuPC9icj5XZWdiZXNjaGFmZmVuaGVpdDogdmVyYmxvY2t0IG1pdCBHZWdlbmFuc3RpZWdlbiAvIHJ1dHNjaGlnZXIgVW50ZXJncnVuZCwgbG9zZXMgR2VyXFx1MDBmNmxsIC8gZGVyIFdlZyBpc3QgZWhlciBlaW4gV2FuZGVyc3RlaWc8L2JyPkhpbmRlcm5pc3NlOiAgU3RlaWxyYW1wZW4sIGthdW0gZmFocmJhcmUgQWJzXFx1MDBlNHR6ZTwvYnI+R2VmXFx1MDBlNGxsZTogNzAlIG9kZXIgbWVocjwvYnI+S3VydmVuOiAgXFx1MDBkNnNlbmFydGlnZSBTcGl0emtlaHJlbiBtaXQgSGluZGVybmlzc2VuPC9icj5GYWhydGVjaG5pazogZXhjZWxsZW50ZSBCaWtlLUJlaGVycnNjaHVuZyBzcGV6aWVsbGVyIFRyaWFsLVRlY2huaWtlbiBuXFx1MDBmNnRpZy48L2JyPlwiKTtcbiAgICBcIjZcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlc3RyZWNrZTogRGVyIHdlZyBpc3QgaG9jaGFuc3BydWNoc3ZvbGwsIHVuZCBzZWxic3QgZlxcdTAwZmNyIFByb2ZpcyB1bmQgVHJpYWwtRmFocmVyIG5pY2h0IHBhc3NpZXJiYXI8L2JyPldlZ2Jlc2NoYWZmZW5oZWl0OiAgR3JvXFx1MDBkZnRlaWxzIG51ciBub2NoIGtsZXR0ZXJiYXI8L2JyPkhpbmRlcm5pc3NlOiBBYnNcXHUwMGU0dHplID4gMiBtLCBMZWl0ZXJuLCBUcml0dHN0dWZlbiwgS2xldHRlcnN0ZWxsZW4gYmVpIGRlbmVuIG1hbiBiZWlkZSBIXFx1MDBlNG5kZSBicmF1Y2h0LjwvYnI+R2VmXFx1MDBlNGxsZTogMTAwJSBvZGVyIG1laHI8L2JyPkt1cnZlbjogLSA8L2JyPkZhaHJ0ZWNobmlrOiAgaGllciByZWljaHQgYXVjaCBkaWUgYmVzdGUgRmFocnRlY2huaWsgbmljaHQgbWVocjwvYnI+XCIpO1wiMTBcIj09Yi5tYXhzcGVlZCYmKGErPVwiVmVrZWhyc2JlclxcdTAwZmNoaWd0ZXIgQmVyZWljaC4gSGllciBnaWx0IGVpbmUgbWF4aW1hbGUgRmFocmdlc2Nod2luZGlna2VpdCB2b24gMTAgS20vaCBzb3dpZSBkaWUgUmVnZWwgcmVjaHRzIHZvciBsaW5rcy48L2JyPlwiKTtcbiAgICBcIjMwXCI9PWIubWF4c3BlZWQmJihhKz1cIlZla2VocnNiZXJcXHUwMGZjaGlndGVyIEJlcmVpY2guIEhpZXIgZ2lsdCByZWNodHMgdm9yIGxpbmtzIHNvd2llIGVpbmUgbWF4aW1hbGUgR2VzY2h3aW5kaWdrZWl0IHZvbiAzMCBLbS9oPC9icj5cIik7XCI1MFwiPT1iLm1heHNwZWVkJiYoYSs9XCJNYXhpbWFsIGVybGF1YnRlIEdlc2Nod2luZGlna2VpdCB2b24gNTAgS20vaCBkYXJmIG5pY2h0IFxcdTAwZmNiZXJzY2hyaXR0ZW4gd2VyZGVuIDwvYnI+XCIpO1wiNzBcIj09Yi5tYXhzcGVlZCYmKGErPVwiTWF4aW1hbCBlcmxhdWJ0ZSBHZXNjaHdpbmRpZ2tlaXQgdm9uIDUwIEttL2ggZGFyZiBuaWNodCBcXHUwMGZjYmVyc2Nocml0dGVuIHdlcmRlbiA8L2JyPlwiKTtcIjgwXCI9PWIubWF4c3BlZWQmJihhKz1cIk1heGltYWxlIEdlc2Nod2luZGlna2VpdCB2b24gODAgS20vaCBkYXJmIG5pY2h0IFxcdTAwZmNiZXJzY2hyaXR0ZW4gd2VyZGVuLjwvYnI+XCIpO1wiMTAwXCI9PWIubWF4c3BlZWQmJihhKz1cIk1heGltYWxlIEdlc2Nod2luZGlna2VpdCB2b24gMTAwIEttL2ggZGFyZiBuaWNodCBcXHUwMGZjYmVyc2Nocml0dGVuIHdlcmRlbi48L2JyPlwiKTtcbiAgICBcIm5vXCI9PWIub3ZlcnRha2luZyYmKGErPVwiXFx1MDBkY2JlcmhvbHZlcmJvdCwgRmFocnpldWdlIGRcXHUwMGZjcmZlbiBuaWNodCBcXHUwMGZjYmVyaG9sZW4gITwvYnI+XCIpO1wieWVzXCI9PWIubm9leGl0JiYoYSs9XCJEaWUgU3RyYVxcdTAwZGZlIGVuZGV0IGhpZXIsIGVzIGhhbmRlbHQgc2ljaCB1bSBlaW5lIFNhY2tnYXNzZTwvYnI+XCIpO1wieWVzXCI9PWIub25ld2F5JiYoYSs9XCJFcyBoYW5kZWx0IHNpY2ggaGllciB1bSBlaW5lIEVpbmJhaG5zdHJhXFx1MDBkZmUsIHNpZSBkXFx1MDBmY3JmZW4gZGllc2UgU3RyYVxcdTAwZGZlIG51ciBpbiBlaW5lIFJpY2h0dW5nIGJlZmFocmVuPC9icj5cIik7XCJkZXNpZ25hdGVkXCI9PWIucHJpb3JpdHlfcm9hZCYmKGErPVwiRXMgaGFuZGVsdCBzaWNoIGhpZXJiZWkgdW0gZWluZSBWb3JmYWhydHNzdHJhXFx1MDBkZmUsIGRlcmplbmlnZSwgZGVyIHNpY2ggYXVmIGRpZXNlciBiZWZpbmRldCwgaGF0IGdlZ2VuXFx1MDBmY2JlciBhbmRlcmVuIEZhaHJ6ZXVnZW4gZGllIFZvcmZhaHJ0ITwvYnI+XCIpO1xuICAgIFwiZW5kXCI9PWIucHJpb3JpdHlfcm9hZCYmKGErPVwiRGllIFZvcmZhaHJ0c3N0cmFcXHUwMGRmZSBlbmRldCBoaWVyIHVuZCBkaWUgUmVnZWx1bmcgd2lyZCBhdWZnZWhvYmVuPC9icj5cIik7XCJlbWVyZ2VuY3lfYmF5XCI9PWIuaGlnaHdheSYmKGErPVwiSGllciBiZWZpbmRldCBzaWNoIGVpbmUgQnVjaHQgZGllIG51ciBpbiBOb3RmXFx1MDBlNGxsZW4genVyIEJlbnV6dW5nIHp1ciBWZXJmXFx1MDBmY2d1bmcgc3RlaHQ8L2JyPlwiKTtcInllc1wiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiVmVya2VocnNiZXJ1aGlndGVyIEJlcmVpY2g8L2JyPlwiKTtcImJ1bXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkt1cnplIEJvZGVud2VsbGU8L2JyPlwiKTtcImNoaWNhbmVcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIlp1IHVtZmFocmVuZGVuZXMgSGluZGVybmlzczwvYnI+XCIpO1wiY2hva2VyXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJGYWhyYmFobnZlcmVuZ3VuZywgenUgdW1mYWhyZW5kZSBIaW5kZXJuaXNzZSBtXFx1MDBmNmdsaWNoPC9icj5cIik7XG4gICAgXCJjdXNoaW9uXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJCb2RlbndlbGxlIG1pdCBMXFx1MDBmY2NrZW4gYXVzIG1laHJlcmVuIHJlY2h0ZWNraWdlbiBIdWNrZWxuPC9icj5cIik7XCJodW1wXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJ2ZXJnbGVpY2hiYXJlIEJvZGVud2VsbGUgbWl0IGV0d2FyIGVpbmVyIExcXHUwMGU0bmdlIHZvbiAyLTRNPC9icj5cIik7XCJpc2xhbmRcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cIkVpbmUgVmVya2VocnNpbnNlbDwvYnI+XCIpO1wicnVtYmxlX3N0cmlwXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJIb2xwZXJzdHJlaWZlbjwvYnI+XCIpO1widGFibGVcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImxhbmdlIEJvZGVud2VsbGVuIG1pdCBmbGFjaGVuIE1pdHRlbHN0XFx1MDBmY2NrPC9icj5cIik7aWYoXCJwYXJraW5nXCI9PWIuYW1lbml0eSYmKFwieWVzXCI9PWIuZmVlJiYoYSs9XCJrb3N0ZW5wZmxpY2h0aWc8YnIvPlwiKSxjPWJbXCJjYXBhY2l0eTp3b21lblwiXSxcbiAgICBcIlwiIT1jJiZcIm5vXCIhPWMmJm51bGwhPWMpKXt2YXIgZD1cInVuYmVrYW5udFwiO1wieWVzXCIhPWMmJihkPWMpO2ErPVwiRnJhdWVucGFya3BsXFx1MDBlNHR6ZSAoQW56YWhsOiBcIitkK1wiKSA8YnIvPlwifWIucGFya19yaWRlJiYoXCJidXNcIj09Yi5wYXJrX3JpZGUmJihhKz1cIkJ1c2FuYmluZHVuZzxici8+XCIpLFwidHJhbVwiPT1iLnBhcmtfcmlkZSYmKGErPVwiQmFobmFuYmluZHVuZzxici8+XCIpLFwidW5rbm93blwiPT1iLnBhcmtfcmlkZSYmKGErPVwiVmVya2VocnNtaXR0ZWwgdW5iZWthbm50PGJyLz5cIikpO2JbXCJyYWlsd2F5OnBvc2l0aW9uXCJdJiYoYSs9XCJTdHJlY2tlbmtpbG9tZXRlcjxici8+UG9zaXRpb246IFwiK2JbXCJyYWlsd2F5OnBvc2l0aW9uXCJdK1wiPGJyLz5cIik7Yi51aWNfcmVmJiYoYSs9XCJVSUM6IFwiK2IudWljX3JlZitcIjxici8+XCIpO3JldHVybiBhfSxmbkNvbnRlbnRTcG9ydHM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtcIjlwaW5cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEtlZ2Vsbjxici8+XCIpO1xuICAgIFwiMTBwaW5cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJvd2xpbmc8YnIvPlwiKTtcImFtZXJpY2FuX2Zvb3RiYWxsXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBBbWVyaWNhbiBGb290YmFsbDxici8+XCIpO1wiYWlraWRvXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBBaWtpZG88YnIvPlwiKTtcImFyY2hlcnlcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJvZ2Vuc2NoaWVcXHUwMGRmZW48YnIvPlwiKTtcImF0aGxldGljc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogTGVpY2h0YXRobGV0aWs8YnIvPlwiKTtcImF1c3RyYWxpYW5fZm9vdGJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEF1c3RyYWxpYW4gRm9vdGJhbGw8YnIvPlwiKTtcImJhc2VcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IE9iamVrdHNwcmluZ2VuPGJyLz5cIik7XG4gICAgXCJiYWRtaW50b25cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJhZG1pbnRvbjxici8+XCIpO1wiYmFzZWJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJhc2ViYWxsPGJyLz5cIik7XCJiYXNrZXRiYWxsXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBCYXNrZXRiYWxsPGJyLz5cIik7XCJiZWFjaHZvbGxleWJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEJlYWNodm9sbGV5YmFsbDxici8+XCIpO1wiYm14XCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBCTVg8YnIvPlwiKTtcImJvdWxlc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQm9jY2lhPGJyLz5cIik7XCJib3VsZVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQm9jY2lhPGJyLz5cIik7XCJib3dsc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQm93bHM8YnIvPlwiKTtcbiAgICBcImJveGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQm94ZW48YnIvPlwiKTtcImNhbmFkaWFuX2Zvb3RiYWxsXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBDYW5hZGlhbiBGb290YmFsbDxici8+XCIpO1wiY2Fub2VcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFBhZGRlbG48YnIvPlwiKTtcImNoZXNzXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBTY2hhY2g8YnIvPlwiKTtcImNsaWZmX2RpdmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogS2xpcHBlbnNwcmluZ2VuPGJyLz5cIik7XCJjbGltYmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogS2xldHRlcm48YnIvPlwiKTtcImNsaW1iaW5nX2FkdmVudHVyZVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogS2xldHRlcm48YnIvPlwiKTtcImNyaWNrZXRcIj09Yi5zcG9ydCYmXG4gICAgKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IENyaWNrZXQ8YnIvPlwiKTtcImNyaWNrZXRfbmV0c1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogQ3JpY2tldCBOZXR6PGJyLz5cIik7XCJjcm9xdWV0XCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBDcm9xdWV0PGJyLz5cIik7XCJjdXJsaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBDdXJsaW5nPGJyLz5cIik7XCJjeWNsaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBSYWRyZW5uZW4sIFJhZHNwb3J0PGJyLz5cIik7XCJkb2dfcmFjaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBIdW5kZXJlbm5lbjxici8+XCIpO2lmKFwiZGFydHNcIj09Yi5zcG9ydHx8XCJkYXJ0XCI9PWIuc3BvcnQpYSs9XCJEYXJ0czxici8+XCI7XCJmZW5jaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBGZWNodGVuPGJyLz5cIik7XG4gICAgXCJlcXVlc3RyaWFuXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBSZWl0ZW48YnIvPlwiKTtcImZvb3RiYWxsXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBBbWVyaWNhbiBGb290YmFsbDxici8+XCIpO1wiZnJlZV9mbHlpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEZyZWVmbHlpbmc8YnIvPlwiKTtcImdhZWxpY19nYW1lc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogR2FlbGljIGdhbWVzPGJyLz5cIik7XCJnb2xmXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBHb2xmPGJyLz5cIik7XCJneW1uYXN0aWNzXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBHeW1uYXN0aWs8YnIvPlwiKTtcImhvY2tleVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogSG9ja2V5PGJyLz5cIik7XCJob3JzZXNob2VzXCI9PWIuc3BvcnQmJihhKz1cbiAgICAgICAgXCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogSHVmZWlzZW53ZXJmZW48YnIvPlwiKTtcImhvcnNlX3JhY2luZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogUGZlcmRlcmVubmVuPGJyLz5cIik7XCJpY2Vfc3RvY2tcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEVpc3N0b2Nrc2NoaWVcXHUwMGRmZW48YnIvPlwiKTtcImp1ZG9cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEp1ZG88YnIvPlwiKTtcImthcnRpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEthcnRmYWhyZW48YnIvPlwiKTtcImtpdGVzdXJmaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBLaXRlc3VyZmluZzxici8+XCIpO1wia29yZmJhbGxcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEtvcmZiYWxsPGJyLz5cIik7XCJtb3RvclwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogTW90b3JzcG9ydDxici8+XCIpO1xuICAgIFwibXVsdGlcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IE1laHJmYWNoc3BvcnQ8YnIvPlwiKTtcIm9ic3RhY2xlX2NvdXJzZVwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogSGluZGVybmlzbGF1Zjxici8+XCIpO1wib3JpZW50ZWVyaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBPcmllbnRpZXJ1bmdzbGF1Zjxici8+XCIpO1wicGFkZGxlX3Rlbm5pc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogUGFkZGxlLVRlbm5pczxici8+XCIpO1wicGFyYWdsaWRpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEdsZWl0c2NoaXJtZmxpZWdlbjxici8+XCIpO1wiUGVsb3RhXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBQZWxvdGE8YnIvPlwiKTtcInJhc3F1ZXRcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFJhY3F1ZXRiYWxsPGJyLz5cIik7XG4gICAgXCJyb3dpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFJ1ZGVybjxici8+XCIpO1wicnVnYnlfbGVhZ3VlXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBSdWdieSBMZWFndWU8YnIvPlwiKTtcInJ1Z2J5X3VuaW9uXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBSdWdieSBVbmlvbjxici8+XCIpO1wicnVubmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogTGF1ZnNwb3J0PGJyLz5cIik7XCJzY3ViYV9kaXZpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFNwb3J0dGF1Y2hlbjxici8+XCIpO1wic2hvb3RpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFNwb3J0c2NoaWVcXHUwMGRmZW48YnIvPlwiKTtcInNrYXRpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IEVpc2xhdWZzcG9ydDxici8+XCIpO1wic2thdGVib2FyZFwiPT1cbiAgICBiLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogU2thdGVib2FyZDxici8+XCIpO1wic2tpaW5nXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBTa2lmYWhyZW48YnIvPlwiKTtcInNvY2NlclwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogRnVcXHUwMGRmYmFsbDxici8+XCIpO1wic3VyZmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogU3VyZmVuPGJyLz5cIik7XCJzd2ltbWluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogU2Nod2ltbWVuPGJyLz5cIik7XCJ0YWJsZV90ZW5uaXNcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFRpc2NodGVubmlzPGJyLz5cIik7XCJ0YWVrd29uZG9cIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFRhZWt3b25kbzxici8+XCIpO1widGVhbV9oYW5kYmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogSGFuZGJhbGw8YnIvPlwiKTtcbiAgICBcInRlbm5pc1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogVGVubmlzPGJyLz5cIik7XCJ0b2JvZ2dhblwiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogUm9kZWxuPGJyLz5cIik7XCJ2b2xsZXliYWxsXCI9PWIuc3BvcnQmJihhKz1cIk1cXHUwMGY2Z2xpY2hlIFNwb3J0YXJ0OiBWb2xsZXliYWxsPGJyLz5cIik7XCJ3YXRlcl9za2lcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFdhc3NlcnNraTxici8+XCIpO1wid2VpZ2h0bGlmdGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJNXFx1MDBmNmdsaWNoZSBTcG9ydGFydDogR2V3aWNodGhlYmVuPGJyLz5cIik7XCJ3cmVzdGxpbmdcIj09Yi5zcG9ydCYmKGErPVwiTVxcdTAwZjZnbGljaGUgU3BvcnRhcnQ6IFJpbmdlbjxici8+XCIpO3JldHVybiBhfTtcbmV4cG9ydCBmdW5jdGlvbiBmbkFyenRJbmZvKGIpe3ZhciBhPVwiXCIsYz1cIlwiLGQ9YltcImhlYWx0aGNhcmU6c3BlY2lhbGl0eVwiXTtcIlwiIT1kJiYoXCJnZW5lcmFsXCI9PWQmJihjKz1cIkFsbGdlbWVpbm1lZGl6aW48YnIvPlwiKSxcImFsbGVyZ29sb2d5XCI9PWQmJihjKz1cIkFsbGVyZ29sb2dpZTxici8+XCIpLFwiYW5hZXN0aGV0aWNzXCI9PWQmJihjKz1cIkFuXFx1MDBlNHN0aGVzaW9sb2dpZTxici8+XCIpLFwiYmlvY2hlbWlzdHJ5XCI9PWQmJihjKz1cIk1lZGl6aW5pc2NoZSB1bmQgY2hlbWlzY2hlIExhYm9yZGlhZ25vc3Rpazxici8+XCIpLFwiYmlvbG9naWNhbF9oYWVtYXRvbG9neVwiPT1kJiYoYys9XCJCaW9sb2dpc2NoZSBIXFx1MDBlNG1hdG9sb2dpZTxici8+XCIpLFwiYmlvbG9neVwiPT1kJiYoYys9XCJNZWRpemluaXNjaGUgQmlvbG9naWU8YnIvPlwiKSxcImNhcmRpb2xvZ3lcIj09ZCYmKGMrPVwiS2FyZGlvbG9naWU8YnIvPlwiKSxcImNhcmRpYWNfc3VyZ2VyeVwiPT1kJiYoYys9XCJLYXJkaW92YXNrdWxhcmNoaXJ1cmdpZTxici8+XCIpLFxuXCJjaGlsZF9wc3ljaGlhdHJ5XCI9PWQmJihjKz1cIktpbmRlci0gdS4gSnVnZW5kcHN5Y2hhdHJpZTxici8+XCIpLFwiZGVudGFsX29yYWxfbWF4aWxsb19mYWNpYWxfc3VyZ2VyeVwiPT1kJiYoYys9XCJaYWhuLSwgTXVuZC0sIEtpZWZlci0gdW5kIEdlc2ljaHRzY2hpcnVyZ2llPGJyLz5cIiksXCJkZXJtYXRvbG9neVwiPT1kJiYoYys9XCJIYXV0a3JhbmtoZWl0ZW48YnIvPlwiKSxcImRlcm1hdG92ZW5lcmVvbG9neVwiPT1kJiYoYys9XCJIYXV0LSB1bmQgR2VzY2hsZWNodHNrcmFua2hlaXRlbjxici8+XCIpLFwiZGlhZ25vc3RpY19yYWRpb2xvZ3lcIj09ZCYmKGMrPVwiRGlhZ25vc3Rpc2NoZSBSYWRpb2xvZ2llPGJyLz5cIiksXCJlbWVyZ2VuY3lcIj09ZCYmKGMrPVwiVW5mYWxsLSB1bmQgTm90ZmFsbG1lZGl6aW48YnIvPlwiKSxcImVuZG9jcmlub2xvZ3lcIj09ZCYmKGMrPVwiRW5kb2tyaW5vbG9naWU8YnIvPlwiKSxcImdhc3Ryb2VudGVyb2xvZ2ljYWxfc3VyZ2VyeVwiPT1kJiYoYys9XCJHYXN0cm9lbnRlcm9sb2dpc2NoZSBDaGlydXJnaWU8YnIvPlwiKSxcblwiZ2FzdHJvZW50ZXJvbG9neVwiPT1kJiYoYys9XCJHYXN0cm9lbnRlcm9sb2dpZTxici8+XCIpLFwiZ2VyaWF0cmljc1wiPT1kJiYoYys9XCJHZXJpYXRyaWU8YnIvPlwiKSxcImd5bmFlY29sb2d5XCI9PWQmJihjKz1cIkdlYnVydHNoaWxmZSB1bmQgRnJhdWVuaGVpbGt1bmRlPGJyLz5cIiksXCJoYWVtYXRvbG9neVwiPT1kJiYoYys9XCJBbGxnZW1laW5lIEhcXHUwMGU0bWF0b2xvZ2llPGJyLz5cIiksXCJoZXBhdG9sb2d5XCI9PWQmJihjKz1cIkhlcGF0b2xvZ2llPGJyLz5cIiksXCJpbW11bm9sb2d5XCI9PWQmJihjKz1cIkltbXVub2xvZ2llPGJyLz5cIiksXCJpbmZlY3Rpb3VzX2Rpc2Vhc2VzXCI9PWQmJihjKz1cIkFuc3RlY2tlbmRlIEtyYW5raGVpdGVuPGJyLz5cIiksXCJpbnRlbnNpdmVcIj09ZCYmKGMrPVwiSW50ZW5zaXZtZWRpemluPGJyLz5cIiksXCJpbnRlcm5hbFwiPT1kJiYoYys9XCJBbGxnZW1laW5lIChpbm5lcmUpIE1lZGl6aW48YnIvPlwiKSxcIm1heGlsbG9mYWNpYWxfc3VyZ2VyeVwiPT1kJiYoYys9XCJNdW5kLUtpZWZlci1HZXNpY2h0c2NoaXJ1cmdpZTxici8+XCIpLFxuXCJuZXBocm9sb2d5XCI9PWQmJihjKz1cIk5pZXJlbmtyYW5raGVpdGVuPGJyLz5cIiksXCJuZXVyb2xvZ3lcIj09ZCYmKGMrPVwiTmV1cm9sb2dpZTxici8+XCIpLFwibmV1cm9waHlzaW9sb2d5XCI9PWQmJihjKz1cIktsaW5pc2NoZSBOZXVyb3BoeXNpb2xvZ2llPGJyLz5cIiksXCJuZXVyb3BzeWNoaWF0cnlcIj09ZCYmKGMrPVwiTmV1cm9wc3ljaGlhdHJpZShOZXVyb2xvZ2llIHVuZCBQc3ljaGlhdHJpZSk8YnIvPlwiKSxcIm5ldXJvc3VyZ2VyeVwiPT1kJiYoYys9XCJOZXVyb2NoaXJ1cmdpZTxici8+XCIpLFwibnVjbGVhclwiPT1kJiYoYys9XCJOdWtsZWFybWVkaXppbjxici8+XCIpLFwib2NjdXBhdGlvbmFsXCI9PWQmJihjKz1cIkFyYmVpdHNtZWRpemluIDxici8+XCIpLFwib25jb2xvZ3lcIj09ZCYmKGMrPVwiT25rb2xvZ2llPGJyLz5cIiksXCJvcGh0aGFsbW9sb2d5XCI9PWQmJihjKz1cIkF1Z2VuaGVpbGt1bmRlPGJyLz5cIiksXCJvcnRob3BhZWRpY3NcIj09ZCYmKGMrPVwiT3J0aG9wXFx1MDBlNGRpZTxici8+XCIpLFwib3RvbGFyeW5nb2xvZ3lcIj09XG5kJiYoYys9XCJIYWxzLU5hc2VuLU9ocmVuLUhlaWxrdW5kZTxici8+XCIpLFwicGFlZGlhdHJpY19zdXJnZXJ5XCI9PWQmJihjKz1cIktpbmRlcmNoaXJ1cmdpZTxici8+XCIpLFwicGFlZGlhdHJpY3NcIj09ZCYmKGMrPVwiS2luZGVyaGVpbGt1bmRlPGJyLz5cIiksXCJwYWxsaWF0aXZlXCI9PWQmJihjKz1cIlBhbGxpYXRpdm1lZGl6aW48YnIvPlwiKSxcInBoeXNpYXRyeVwiPT1kJiYoYys9XCJQaHlzaWthbGlzY2hldW5kIFJlaGFiaWxpdGF0aXZlIE1lZGl6aW48YnIvPlwiKSxcInBsYXN0aWNfc3VyZ2VyeVwiPT1kJiYoYys9XCJQbGFzdGlzY2hlIENoaXJ1cmdpZTxici8+XCIpLFwicHJvY3RvbG9neVwiPT1kJiYoYys9XCJQcm9rdG9sb2dpZTxici8+XCIpLFwicHN5Y2hpYXRyeVwiPT1kJiYoYys9XCJQc3ljaGlhdHJpZTxici8+XCIpLFwicHVsbW9ub2xvZ3lcIj09ZCYmKGMrPVwiTHVuZ2VuLSB1bmQgQnJvbmNoaWFsaGVpbGt1bmRlPGJyLz5cIiksXCJyYWRpb2xvZ3lcIj09ZCYmKGMrPVwiUmFkaW9sb2dpZTxici8+XCIpLFwicmFkaW90aGVyYXB5XCI9PVxuZCYmKGMrPVwiU3RyYWhsZW50aGVyYXBpZTxici8+XCIpLFwicmhldW1hdG9sb2d5XCI9PWQmJihjKz1cIlJoZXVtYXRvbG9naWU8YnIvPlwiKSxcInN0b21hdG9sb2d5XCI9PWQmJihjKz1cIlN0b21hdG9sb2dpZTxici8+XCIpLFwic3VyZ2VyeVwiPT1kJiYoYys9XCJDaGlydXJnaWU8YnIvPlwiKSxcInN1cmdpY2FsX29uY29sb2d5XCI9PWQmJihjKz1cIktyZWJzY2hpcnVyZ2llPGJyLz5cIiksXCJ0aG9yYWNpY19zdXJnZXJ5XCI9PWQmJihjKz1cIlRob3JheGNoaXJ1cmdpZTxici8+XCIpLFwidHJhbnNwbGFudFwiPT1kJiYoYys9XCJUcmFuc3BsYW50YXRpb25zbWVkaXppbjxici8+XCIpLFwidHJhdW1hXCI9PWQmJihjKz1cIlVuZmFsbGNoaXJ1cmdpZTxici8+XCIpLFwidHJvcGljYWxcIj09ZCYmKGMrPVwiVHJvcGVubWVkaXppbjxici8+XCIpLFwidXJvbG9neVwiPT1kJiYoYys9XCJVcm9sb2dpZTxici8+XCIpLFwidmFzY3VsYXJfc3VyZ2VyeVwiPT1kJiYoYys9XCJHZWZcXHUwMGU0XFx1MDBkZmNoaXJ1cmdpZTxici8+XCIpLFwidmVuZXJlb2xvZ3lcIj09XG5kJiYoYys9XCJHZXNjaGxlY2h0c2tyYW5raGVpdGVuPGJyLz5cIiksXCJhY3VwdW5jdHVyZVwiPT1kJiYoYys9XCJBa3VwdW5rdHVyPGJyLz5cIiksXCJuYXR1cm9wYXRoeVwiPT1kJiYoYys9XCJOYXR1cmhlaWxrdW5kZTxici8+XCIpLFwiY2hpcm9wcmFjdGljXCI9PWQmJihjKz1cIkNoaXJvcHJha3RpayA8YnIvPlwiKSxcImhvbWVvcGF0aHlcIj09ZCYmKGMrPVwiSG9tXFx1MDBmNm9wYXRoaWU8YnIvPlwiKSxcIm9zdGVvcGF0aHlcIj09ZCYmKGMrPVwiT3N0ZW9wYXRoaWU8YnIvPlwiKSk7XCJcIiE9Yi5oZWFsdGhfc3BlY2lhbHR5JiYoXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZmFtaWx5X21lZGljaW5lXCJdJiYoYys9XCJBbGxnZW1laW5tZWRpemluPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZW1lcmdlbmN5X21lZGljaW5lXCJdJiYoYys9XCJOb3RmYWxsbWVkaXppbjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmFuYWVzdGhlc2lvbG9neVwiXSYmKGMrPVwiQW5cXHUwMGU0c3RoZXNpZTxici8+XCIpLFxuXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZGVybWF0b2xvZ3lcIl0mJihjKz1cIkRlcm1hdG9sb2dpZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmVhcl9ub3NlX3Rocm9hdFwiXSYmKGMrPVwiSGFscywgTmFzZW4sIE9ocmVuIChITk8pPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6b2NjdXBhdGlvbmFsX21lZGljaW5lXCJdJiYoYys9XCJBcmJlaXRzbm1lZGl6aW48YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTppbnRlcm5hbF9tZWRpY2luZVwiXSYmKGMrPVwiaW5uZXJlIE1lZGl6aW48YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpuZXVyb2xvZ3lcIl0mJihjKz1cIk5ldXJvbG9naWU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvcGh0aGFsbW9sb2d5XCJdJiYoYys9XCJBdWdlbmhlaWxrdW5kZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBhbGxpYXRpdmVfbWVkaWNpbmVcIl0mJihjKz1cIlBhbGxpYXRpdm1lZGl6aW48YnIvPlwiKSxcblwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBzeWNoaWF0cnlcIl0mJihjKz1cIlBzeWNoYXRyaWU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpneW5hZWNvbG9neVwiXSYmKGMrPVwiR3luXFx1MDBlNGtvbG9naWU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTp1cm9sb2d5XCJdJiYoYys9XCJVcm9sb2dpZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBhaW5fbWVkaWNpbmVcIl0mJihjKz1cIlNjaG1lcnptZWRpemluPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZW52aXJvbm1lbnRhbF9tZWRpY2luZVwiXSYmKGMrPVwiVW13ZWx0bWVkaXppbjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmludGVuc2l2ZV9jYXJlX21lZGljaW5cIl0mJihjKz1cIkludGVuc2l2bWVkaXppbjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBhZWRpYXRyaWNzXCJdJiYoYys9XCJLaW5kZXItIHUuIEp1Z2VuZG1lZGl6aW48YnIvPlwiKSxcblwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBoeXNpYXRyeVwiXSYmKGMrPVwiUGh5c2lrYWxpc2NoZSB1bmQgUmVoYWJpbGl0YXRpdmUgTWVkaXppbjxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnJhZGlvbG9neVwiXSYmKGMrPVwiUmFkaW9sb2dpZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmdlbmVyYWxcIl0mJihjKz1cIkFsbGdlbWVpbm1lZGl6aW48YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvY2N1cGF0aW9uYWxfdGhlcmFweVwiXSYmKGMrPVwiRXJnb3RoZXJhcGllPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cHVsbW9ub2xvZ3lcIl0mJihjKz1cIlBuZXVtb2xvZ2llPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6YWN1cHVuY3R1cmVcIl0mJihjKz1cIkFrdXB1bmt0dXI8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvcnRob3BhZWRpY3NcIl0mJihjKz1cIk9ydGhvcFxcdTAwZTRkaWU8YnIvPlwiKSxcblwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmNoaXJvcHJhY3RpY1wiXSYmKGMrPVwiQ2hpcm9wcmFrdGlrPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6c3BvcnRzX21lZGljaW5lXCJdJiYoYys9XCJTcG9ydG1lZGl6aW48YnIvPlwiKSk7XCJcIiE9YyYmKGE9YStcIkZhY2hnZWJpZXRlOiBcIisoJzxkaXYgY2xhc3M9XCJjNGdfb3Blbl90ZXh0XCI+JytjK1wiPC9kaXY+XCIpKTtyZXR1cm4gYX1cbmV4cG9ydCBmdW5jdGlvbiBmbktyYWZ0d2Vya0luZm8oYil7dmFyIGE9XCJcIjtpZihiW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSl7YSs9XCJFcnpldWd1bmdzYXJ0OiBcIjtzd2l0Y2goYltcImdlbmVyYXRvcjptZXRob2RcIl0pe2Nhc2UgXCJjb21idXN0aW9uXCI6YSs9XCJWZXJicmVubnVuZ1wiO2JyZWFrO2Nhc2UgXCJ0aGVybWFsXCI6YSs9XCJ0aGVybWlzY2hlIE51dHp1bmcgKHouQi4gU29sYXJ0aGVybWllKVwiO2JyZWFrO2Nhc2UgXCJwdW1waW5nXCI6YSs9XCJkdXJjaCBQdW1wZW4gKHouQi4gZGllIE51dHp1bmcgdm9uIEdlb3RoZXJtaWUpXCI7YnJlYWs7Y2FzZSBcInBob3Rvdm9sdGFpY1wiOmErPVwiUGhvdG92b2x0YWlrXCI7YnJlYWs7Y2FzZSBcImdhc2lmaWNhdGlvblwiOmErPVwiVmVyZ2FzdW5nLCBkYW5hY2ggVmVyYnJlbm51bmdcIjticmVhaztjYXNlIFwiYW5hZXJvYmljX2RpZ2VzdGlvblwiOmErPVwiRXJ6ZXVndW5nIHZvbiBCaW9nYXMgZHVyY2ggVmVyZ1xcdTAwZTRydW5nXCI7YnJlYWs7Y2FzZSBcInB5cm9seXNpc1wiOmErPVwiUHlyb2x5c2UsIEF1ZnNwYWx0dW5nIGR1cmNoIGhvaGUgVGVtcGVyYXR1cmVuXCI7XG4gICAgYnJlYWs7Y2FzZSBcImZpc3Npb25cIjphKz1cIktlcm5zcGFsdHVuZ1wiO2JyZWFrO2Nhc2UgXCJmdXNpb25cIjphKz1cIktlcm5mdXNpb25cIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn1hKz1cIjxici8+XCJ9aWYoYi5wb3dlcl9zb3VyY2Upe2ErPVwiRXJ6ZXVndW5nc2FydDogXCI7c3dpdGNoKGIucG93ZXJfc291cmNlKXtjYXNlIFwicGhvdG92b2x0YWljXCI6YSs9XCJQaG90b3ZvbHRhaWtcIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn1hKz1cIjxici8+XCJ9YltcImdlbmVyYXRvcjpvdXRwdXQ6ZWxlY3RyaWNpdHlcIl0mJihhKz1cImVsZWt0LiBFbmVyZ2llZXJ6ZXVndW5nOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDplbGVjdHJpY2l0eVwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmhlYXRcIl0mJihhKz1cInRoZXJtLiBFbmVyZ2llZXJ6ZXVndW5nOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpoZWF0XCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZFwiXSYmKGErPVxuICAgIFwidGhlcm0uIEVuZXJnaWVlcnpldWd1bmc6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRcIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dFwiXSYmKGErPVwiTmVubmxlaXN0dW5nOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dFwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmhvdF9haXJcIl0mJihhKz1cIkFydCBkZXMgVHJhbnNwb3J0bWVkaXVtczogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6aG90X2FpclwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRfd2F0ZXJcIl0mJihhKz1cIkFydCBkZXMgVHJhbnNwb3J0bWVkaXVtczogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZF93YXRlclwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRfYWlyXCJdJiYoYSs9XCJBcnQgZGVzIFRyYW5zcG9ydG1lZGl1bXM6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRfYWlyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29tcHJlc3NlZF9haXJcIl0mJihhKz1cIkFydCBkZXMgVHJhbnNwb3J0bWVkaXVtczogXCIrXG4gICAgYltcImdlbmVyYXRvcjpvdXRwdXQ6Y29tcHJlc3NlZF9haXJcIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dDpzdGVhbVwiXSYmKGErPVwiQXJ0IGRlcyBUcmFuc3BvcnRtZWRpdW1zOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpzdGVhbVwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OnZhY3V1bVwiXSYmKGErPVwiQXJ0IGRlcyBUcmFuc3BvcnRtZWRpdW1zOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDp2YWN1dW1cIl0rXCI8YnIvPlwiKTtiW1wiZ2VuZXJhdG9yOm91dHB1dDpiYXR0ZXJ5X2NoYXJnaW5nXCJdJiYoYSs9XCJBcnQgZGVzIFRyYW5zcG9ydG1lZGl1bXM6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmJhdHRlcnlfY2hhcmdpbmdcIl0rXCI8YnIvPlwiKTtcIlBXUlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItMVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1xuICAgIFwiPGJyLz5cIik7XCJCV1ItMlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItM1wiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItNFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItNVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItNlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJQSFdSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkdDUlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJlxuKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkZCUlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJSQk1LLTEwMDBcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiUkJNSy0xNTAwXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIlZWRVJcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiQ0FORFVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiQ1BSLTEwMDBcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK1xuICAgIGJbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiRVBSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcInRva2FtYWtcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wic3RlbGxhcmF0b3JcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiSUNGXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcImNvbGQtZnVzaW9uXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIndpbmRfdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSYmXCJob3Jpem9udGFsX2F4aXNcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiZcbihhKz1cIkdlbmVyYXRvcnR5cDogSG9yaXpvbnRhbC1BY2hzZW4gV2luZGVuZXJnaWVhbmxhZ2U8YnIvPlwiKTtcIndpbmRfdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSYmXCJ2ZXJ0aWNhbF90dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBWZXJ0aWthbHJvdG9yPGJyLz5cIik7XCJmcmFuY2lzX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IEZyYW5jaXMtVHVyYmluZTxici8+XCIpO1wia2FwbGFuX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IEthcGxhbi1UdXJiaW5lPGJyLz5cIik7XCJwZWx0b25fdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogUGVsdG9uLVR1cmJpbmU8YnIvPlwiKTtcInN0cmVhbVwiPT1iW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSYmXCJob3Jpem9udGFsX2F4aXNcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XG4gICAgXCJHZW5lcmF0b3J0eXA6IEdlemVpdGVuc3Ryb21nZW5lcmF0b3IgbWl0IGhvcml6b250YWxlciBBY2hzZTxici8+XCIpO1wic3RyZWFtXCI9PWJbXCJnZW5lcmF0b3I6bWV0aG9kXCJdJiZcInZlcnRpY2FsX2F4aXNcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IEdlemVpdGVuc3Ryb21nZW5lcmF0b3IgbWl0IHZlcnRpa2FsZXIgQWNoc2U8YnIvPlwiKTtcInN0ZWFtX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IERhbXBmdHVyYmluZTxici8+XCIpO1wiaGVhdF9wdW1wXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBXXFx1MDBlNHJtZXB1bXBlPGJyLz5cIik7XCJzb2xhcl90aGVybWFsX2NvbGxlY3RvclwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cIkdlbmVyYXRvcnR5cDogU29ubmVua29sbGVrdG9yPGJyLz5cIik7XCJzb2xhcl9waG90b3ZvbHRhaWNfcGFuZWxcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiZcbihhKz1cIkdlbmVyYXRvcnR5cDogUGhvdG92b2x0YWljLVN5c3RlbTxici8+XCIpO1wic3RlYW1fZ2VuZXJhdG9yXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBEYW1wZmdlbmVyYXRvcjxici8+XCIpO1wiZ2FzX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IEdhc3R1cmJpbmU8YnIvPlwiKTtcImNvbWJpbmVkX2N5Y2xlXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiR2VuZXJhdG9ydHlwOiBEYW1wZmdlbmVyYXRvcjxici8+XCIpO1wicmVjaXByb2NhdGluZ19lbmdpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJHZW5lcmF0b3J0eXA6IFZlcmJyZW5udW5nc21vdG9yL0Jsb2NraGVpemtyYWZ0d2Vyazxici8+XCIpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuV2VydHN0b2ZmaW5mbyhiKXt2YXIgYT1cIlwiO2lmKFwiY29udGFpbmVyXCI9PWIucmVjeWNsaW5nX3R5cGV8fFwiY2VudHJlXCI9PWIucmVjeWNsaW5nX3R5cGV8fFwicmVjeWNsaW5nXCI9PWIuYW1lbml0eSlcInllc1wiPT1iW1wicmVjeWNsaW5nOmdsYXNzXCJdJiYoYSs9XCJBbHRnbGFzY29udGFpbmVyPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpzaG9lc1wiXSYmKGErPVwiU2NodWhlbnRzb3JndW5nPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjb29raW5nX29pbFwiXSYmKGErPVwiU3BlaXNlLVxcdTAwZDZsLUVudHNvcmd1bmc8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnBhcGVyXCJdJiYoYSs9XCJQYXBpZXJlbnRzb3JndW5nPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzplbmdpbmVfb2lsXCJdJiYoYSs9XCJcXHUwMGQ2bC1FbnRzb3JndW5nIChNYXNjaGluZW4tLCBBbHQtdW5kIE1vdG9yXFx1MDBmNmwpPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjbG90aGVzXCJdJiYoYSs9XG4gICAgXCJBbHRrbGVpZGVyY29udGFpbmVyPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjYXJfYmF0dGVyaWVzXCJdJiYoYSs9XCJBdXRvLUJhdHRlcmllbi1FbnRzb3JndW5nPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjYW5zXCJdJiYoYSs9XCJCbGVjaGRvc2VuZW50c29yZ3VuZzwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6c2NyYXBfbWV0YWxcIl0mJihhKz1cIkFsdG1ldGFsbGVudHNvcmd1bmc8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnBsYXN0aWNcIl0mJihhKz1cIlBsYXN0aWtlbnRzb3JndW5nPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpiYXR0ZXJyaWVzXCJdJiYoYSs9XCJCYXR0ZXJpZWVudHNvcmd1bmc8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnBsYXN0aWNfYm90dGxlc1wiXSYmKGErPVwiUGxhc3Rpa2ZsYXNjaGVuZW50c29yZ3VuZzwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6Z3JlZW5fd2FzdGVcIl0mJihhKz1cIkdyXFx1MDBmY25hYmZcXHUwMGU0bGxlPC9icj5cIiksXG5cInllc1wiPT1iW1wicmVjeWNsaW5nOmhhcmRjb3JlXCJdJiYoYSs9XCJCYXVzY2h1dHQgdW5kIFN0cmFcXHUwMGRmZW5tYXRlcmlhbCBFbnRzb3JndW5nPC9icj5cIik7cmV0dXJuIGF9XG52YXIgZm5Db250ZW50R2VuZXJhbEluZm9ybWF0aW9ucz1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2Iud2lkdGgmJihhKz1cIkJyZWl0ZTogXCIrYi53aWR0aCtcIiBtPGJyLz5cIik7Yi5oZWlnaHQmJihhKz1cIkhcXHUwMGY2aGU6IFwiK2IuaGVpZ2h0K1wiIG08YnIvPlwiKTtiLm1heHdpZHRoJiYoYSs9XCJNYXhpbWFsYnJlaXRlOiBcIitiLm1heHdpZHRoK1wiIG08YnIvPlwiKTtiLm1heGhlaWdodCYmKGErPVwiTWF4aW1hbGhcXHUwMGY2aGU6IFwiK2IubWF4aGVpZ2h0K1wiIG08YnIvPlwiKTtiLm1heHdlaWdodCYmKGErPVwiTWF4aW1hbGdld2ljaHQ6IFwiK2IubWF4d2VpZ2h0K1wiIHQ8YnIvPlwiKTtiLm1heHNwZWVkJiYoYSs9XCJIXFx1MDBmNmNoc3RnZXNjaHdpbmRpZ2tlaXQ6IFwiK2IubWF4c3BlZWQrXCIga20vaDxici8+XCIpO2IubWluX2FnZSYmKGErPVwiTWluZGVzdGFsdGVyOiBcIitiLm1pbl9hZ2UrXCI8YnIvPlwiKTtiLm1heF9hZ2UmJihhKz1cIk1heGltYWxhbHRlcjogXCIrYi5tYXhfYWdlK1wiPGJyLz5cIik7XCJ5ZXNcIj09XG5iLm51ZGlzbSYmKGErPVwiRnJlaWtcXHUwMGY2cnBlcmt1bHR1cjxici8+XCIpO1wieWVzXCI9PWIucnVpbnMmJihhKz1cIlJ1aW5lPGJyLz5cIik7Yi5lbGUmJihhKz1cIkhcXHUwMGY2aGUgXFx1MDBmY2JlciBOTjogXCIrYi5lbGUrXCIgbTxici8+XCIpO2JbXCJ4bWFzOmRheV9kYXRlXCJdJiYoYSs9XCJEYXVlciB2b24gLSBiaXM6IFwiK2JbXCJ4bWFzOmRheV9kYXRlXCJdK1wiPGJyLz5cIik7YltcInJvdG9yOmRpYW1ldGVyXCJdJiYoYSs9XCJSb3RvcmR1cmNobWVzc2VyOiBcIitiW1wicm90b3I6ZGlhbWV0ZXJcIl0rXCIgbTxici8+XCIpO2JbXCJ4bWFzOm5vdGVcIl0mJihhKz1cIkhpbndlaXM6IFwiK2JbXCJ4bWFzOm5vdGVcIl0rXCI8YnIvPlwiKTtcInBvcnRcIj09YltcInNlYW1hcms6YmVhY29uX2xhdGVyYWw6Y2F0ZWdvcnlcIl0mJihhKz1cIkJhY2tib3JkPGJyLz5cIik7XCJzdGFyYm9hcmRcIj09YltcInNlYW1hcms6YmVhY29uX2xhdGVyYWw6Y2F0ZWdvcnlcIl0mJihhKz1cIlN0ZXVlcmJvcmQ8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOnJldGFpbFwiXSYmXG4oYSs9XCJGYWhycmFkdmVya2F1Zjxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6cmVwYWlyXCJdJiYoYSs9XCJGYWhycmFkcmVwYXJhdHVyPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpyZW50YWxcIl0mJihhKz1cIkZhaHJyYWR2ZXJsZWloPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpwdW1wXCJdJiYoYSs9XCJCZW51dHp1bmcgZWluZXIgTHVmdHB1bXBlIG1cXHUwMGY2Z2xpY2g8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOmRpeVwiXSYmKGErPVwiQmVudXR6dW5nIHZvbiBXZXJremV1ZyBtXFx1MDBmNmdsaWNoPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpjbGVhbmluZ1wiXSYmKGErPVwiRmFocnJcXHUwMGU0ZGVyIHdlcmRlbiBnZXdhc2NoZW48YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOnNlY29uZF9oYW5kXCJdJiYoYSs9XCJWZXJrYXVmIHZvbiBnZWJyYXVjaHRlbiBGYWhyclxcdTAwZTRkZXJuPGJyLz5cIik7XCJ5ZXNcIj09XG5iW1wic2VydmljZTpiaWN5Y2xlOmNoYXJnaW5nXCJdJiYoYSs9XCJFbGVrdHJvLUZhaHJyXFx1MDBlNGRlciBrXFx1MDBmNm5uZW4gZ2VsYWRlbiB3ZXJkZW48YnIvPlwiKTtcInllc1wiPT1iLmNhZmUmJihhKz1cIktsZWluZSBDYWZcXHUwMGU5LUVja2U8YnIvPlwiKTtcInllc1wiPT1iLmJyZWFrZmFzdCYmKGErPVwiQmVzb25kZXJlcyBGclxcdTAwZmNoc3RcXHUwMGZjY2tzYW5nZWJvdDxici8+XCIpO1wieWVzXCI9PWIuc25hY2smJihhKz1cIkJhY2stU25hY2tzIHdhcm0gb2RlciBrYWx0PGJyLz5cIik7XCJ5ZXNcIj09Yi5pbmRvb3Jfc2VhdGluZyYmKGErPVwiU2l0em1cXHUwMGY2Z2xpY2hrZWl0ZW4gaW0gSW5uZW5iZXJlaWNoPGJyLz5cIik7XCJ5ZXNcIj09Yi5vdXRkb29yX3NlYXRpbmcmJihhKz1cIlNpdHptXFx1MDBmNmdsaWNoa2VpdGVuIGltIEF1XFx1MDBkZmVuYmVyZWljaDxici8+XCIpO1wieWVzXCI9PWIuc2VsZl9zZXJ2aWNlJiYoYSs9XCJTZWxic3RiZWRpZW51bmdzYlxcdTAwZTRja2VyZWk8YnIvPlwiKTtcInllc1wiPT1iLmJha2Vob3VzZSYmXG4oYSs9XCJCYWNrc3R1YmU8YnIvPlwiKTtcInllc1wiPT1iLnBhc3RyeV9zaG9wJiYoYSs9XCJHZWJcXHUwMGU0Y2sgYXVzIGRlciBLb25kaXRvcmVpPGJyLz5cIik7XCJ5ZXNcIj09Yi5mYWlyX3RyYWRlJiYoYSs9XCJlaW5pZ2UgRmFpci1UcmFkZS1Qcm9kdWt0ZSBpbSBTb3J0aW1lbnQ8YnIvPlwiKTtcIm9ubHlcIj09Yi5mYWlyX3RyYWRlJiYoYSs9XCJmYXN0IGF1c3NjaGxpZVxcdTAwZGZsaWNoIEZhaXItVHJhZGUtUHJvZHVrdGUgaW0gU29ydGltZW50PGJyLz5cIik7XCJub1wiPT1iLmZhaXJfdHJhZGUmJihhKz1cImtlaW5lIEZhaXItVHJhZGUtUHJvZHVrdGUgaW0gU29ydGltZW50PGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEhlYWx0aGNhcmU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImRvY3RvcnNcIj09Yi5hbWVuaXR5fHxcInBoeXNpY2lhblwiPT1iLm9mZmljZXx8XCJkb2N0b3JcIj09Yi5oZWFsdGhjYXJlKWErPWZuQXJ6dEluZm8oYiksYi5tZWRpY2FsX2FyZWEmJihhKz1iLm1lZGljYWxfYXJlYStcIjxici8+XCIpLFxuYi50eXBlJiYoYSs9Yi50eXBlK1wiPGJyLz5cIiksYltcImRvY3RvcnM6ZGVcIl0mJihhKz1iW1wiZG9jdG9yczpkZVwiXStcIjxici8+XCIpLGJbXCJub3RlOmRlXCJdJiYoYSs9YltcIm5vdGU6ZGVcIl0rXCI8YnIvPlwiKTtcInllc1wiPT1iLmRpc3BlbnNpbmcmJihhKz1cIkFwb3RoZWtlIG1pdCBSZXplcHRlaW5sXFx1MDBmNnN1bmc8YnIvPlwiKTtcImFidXNlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBNZW5zY2hlbiBkaWUgTWlzc2hhbmRsdW5nIGVybGl0dGVuIGhhYmVuPGJyLz5cIik7XCJjaGlsZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBLaW5kZXI8YnIvPlwiKTtcImRpc2FibGVkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IE1lbnNjaGVuIG1pdCBrXFx1MDBmNnJwZXJsaWNoZXIgb2RlciBnZWlzdGlnZXIgQmVoaW5kZXJ1bmc8YnIvPlwiKTtcImRpc2Vhc2VkXCI9PVxuYltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cIkVpbnJpY2h0dW5nIGZcXHUwMGZjcjogRXJrcmFua3RlIE1lbnNjaGVuPGJyLz5cIik7XCJkcnVnX2FkZGljdGVkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IERyb2dlbnNcXHUwMGZjY2h0aWdlPGJyLz5cIik7XCJob21lbGVzc1wiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBPYmRhY2hsb3NlPGJyLz5cIik7XCJqdXZlbmlsZVwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBKdWdlbmRsaWNoZSB1bmQgVGVlbmFnZXI8YnIvPlwiKTtcIm1lbnRhbF9oZWFsdGhcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cIkVpbnJpY2h0dW5nIGZcXHUwMGZjcjogTWVuc2NoZW4gbWl0IHBzeWNoaXNjaGVuIFByb2JsZW1lbjxici8+XCIpO1wibWlncmFudFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmXG4oYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IE1lbnNjaGVuIG1pdCBNaWdyYXRpb25zaGludGVyZ3J1bmQ8YnIvPlwiKTtcIm9ycGhhblwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBXYWlzZW48YnIvPlwiKTtcInNlbmlvclwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBTZW5pb3Jlbjxici8+XCIpO1widW5kZXJwcml2aWxlZ2VkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IEFybWUgb2RlciBiZW5hY2h0ZWlsaWd0ZSBNZW5zY2hlbjxici8+XCIpO1widW5lbXBsb3llZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwiRWlucmljaHR1bmcgZlxcdTAwZmNyOiBBcmJlaXRzbG9zZTxici8+XCIpO1widmljdGltXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJFaW5yaWNodHVuZyBmXFx1MDBmY3I6IE9wZmVyIGVpbmVzIFZlcmJyZWNoZW5zPGJyLz5cIik7XG4gICAgcmV0dXJuIGF9O1xuZXhwb3J0IGZ1bmN0aW9uIGZuQWRkaXRpb25hbEJ1aWxkaW5nSW5mb3MoYil7dmFyIGE9XCJcIjtiW1wiYnVpbGRpbmc6Y29sb3JcIl0mJihhKz1cIkdlYlxcdTAwZTR1ZGVuZmFyYmU6IFwiK2JbXCJidWlsZGluZzpjb2xvclwiXStcIjwvYnI+XCIpO2JbXCJidWlsZGluZzpoZWlnaHRcIl0mJihhKz1cIkdlYlxcdTAwZTR1ZGVuaFxcdTAwZjZoZTogXCIrYltcImJ1aWxkaW5nOmhlaWdodFwiXStcIiBtPC9icj5cIik7YltcImJ1aWxkaW5nOmxldmVsXCJdJiYoYSs9XCJFdGFnZTogXCIrYltcImJ1aWxkaW5nOmxldmVsXCJdK1wiPC9icj5cIik7YltcImJ1aWxkaW5nOnBhcnRcIl0mJihhKz1cIkdlYlxcdTAwZTR1ZGV0ZWlsZTogXCIrYltcImJ1aWxkaW5nOnBhcnRcIl0rXCI8L2JyPlwiKTtiW1wicm9vZjpjb2xvclwiXSYmKGErPVwiRGFjaGZhcmJlOiBcIitiW1wicm9vZjpjb2xvdXJcIl0rXCI8L2JyPlwiKTtiW1wicm9vZjpzaGFwZVwiXSYmKGErPVwiRGFjaGZvcm06IFwiK2JbXCJyb29mOnNoYXBlXCJdK1wiPC9icj5cIik7YltcInJvb2Y6aGVpZ2h0XCJdJiYoYSs9XCJEYWNoaFxcdTAwZjZoZTogXCIrYltcInJvb2Y6aGVpZ2h0XCJdK1xuICAgIFwiIG08L2JyPlwiKTtiW1wicm9vZjptYXRlcmlhbFwiXSYmKGErPVwiRGFjaG1hdGVyaWFsOiBcIitiW1wicm9vZjptYXRlcmlhbFwiXStcIiA8L2JyPlwiKTtiW1wicm9vZjpvcmllbnRhdGlvblwiXSYmKGErPVwiRGFjaGF1c3JpY2h0dW5nOiBcIitiW1wicm9vZjpvcmllbnRhdGlvblwiXStcIiA8L2JyPlwiKTtiW1wicm9vZjpkaXJlY3Rpb25cIl0mJihhKz1cIkRhY2hhdXNyaWNodHVuZzogXCIrYltcInJvb2Y6ZGlyZWN0aW9uXCJdK1wiIDwvYnI+XCIpO2JbXCJidWlsZGluZzp0eXBlXCJdJiYoYSs9XCJHZWJcXHUwMGU0dWRlbnR5cDogXCIrYltcImJ1aWxkaW5nOnR5cGVcIl0rXCI8L2JyPlwiKTtyZXR1cm4gYX1cbmV4cG9ydCBmdW5jdGlvbiBmblNpY2hlcmhlaXRBZGRpdGlvbmFsKGIpe3ZhciBhPVwiXCI7XCJzdXJ2ZWlsbGFuY2VcIj09Yi5tYW5fbWFkZSYmKFwiaW5kb29yXCI9PWIuc3VydmVpbGxhbmNlJiYoYSs9XCJJbm5lbmJlcmVpY2ggd2lyZCBcXHUwMGZjYmVyd2FjaHRcIiksXCJvdXRkb29yXCI9PWIuc3VydmVpbGxhbmNlJiYoYSs9XCJBdVxcdTAwZGZlbmJlcmVpY2ggd2lyZCBcXHUwMGZjYmVyd2FjaHRcIiksXCJwdWJsaWNcIj09Yi5zdXJ2ZWlsbGFuY2UmJihhKz1cIlxcdTAwZDZmZmVudGxpY2hlIFxcdTAwZGNiZXJ3YWNodW5nXCIpLFwiY2FtZXJhXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6dHlwZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzdHlwOiBLYW1lcmFcIiksXCJndWFyZFwiPT1iW1wic3VydmVpbGxhbmNlOnR5cGVcIl0mJihhKz1cIlxcdTAwZGNiZXJ3YWNodW5nc3R5cDogV1xcdTAwZTRjaHRlclwiKSxcIkFMUFJcIj09YltcInN1cnZlaWxsYW5jZTp0eXBlXCJdJiYoYSs9XCJcXHUwMGRjYmVyd2FjaHVuZ3N0eXA6IEFMUFJcIiksXCJ0b3duXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmXG4oYSs9XCJcXHUwMGRjYmVyd2FjaHVuZ3NiZXJlaWNoOiBPcnRcIiksXCJwYXJraW5nXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzYmVyZWljaDogUGFya3BsYXR6XCIpLFwidHJhZmZpY1wiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cIlxcdTAwZGNiZXJ3YWNodW5nc2JlcmVpY2g6IFZlcmtlaHJcIiksXCJzaG9wXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzYmVyZWljaDogU2hvcHNcIiksXCJiYW5rXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzYmVyZWljaDogQmFua1wiKSxcImJ1aWxkaW5nXCI9PWJbXCJzdXJ2ZWlsbGFuY2U6em9uZVwiXSYmKGErPVwiXFx1MDBkY2JlcndhY2h1bmdzYmVyZWljaDogR2ViXFx1MDBlNHVkZVwiKSk7cmV0dXJuIGF9XG5leHBvcnQgZnVuY3Rpb24gZm5XcmVja0luZm8oYil7dmFyIGE9XCJcIjtcIndyZWNrXCI9PWIuaGlzdG9yaWMmJihiW1wid3JlY2s6ZGF0ZV9zdW5rXCJdJiYoYSs9XCJHZXN1bmtlbiBhbTogXCIrYltcIndyZWNrOmRhdGVfc3Vua1wiXStcIjxici8+XCIpLGJbXCJ3cmVjazpkZXB0aFwiXSYmKGErPVwiVGllZmU6IFwiK2JbXCJ3cmVjazpkZXB0aFwiXStcIjxici8+XCIpLGJbXCJ3cmVjazpjbGVhcmFuY2VcIl0mJihhKz1cIkZyZWlyYXVtOiBcIitiW1wid3JlY2s6Y2xlYXJhbmNlXCJdK1wiPGJyLz5cIiksYltcIndyZWNrOmRhdGVfY29tbWlzc2lvbmVkXCJdJiYoYSs9XCJBbmVya2FubnQgc2VpdDogXCIrYltcIndyZWNrOmRhdGVfY29tbWlzc2lvbmVkXCJdK1wiPGJyLz5cIiksYltcIndyZWNrOmdyb3NzX3Rvbm5hZ2VcIl0mJihhKz1cIkdld2ljaHQ6IFwiK2JbXCJ3cmVjazpncm9zc190b25uYWdlXCJdK1wiPGJyLz5cIiksYltcIndyZWNrOmxlbmd0aFwiXSYmKGErPVwiTFxcdTAwZTRuZ2U6IFwiK2JbXCJ3cmVjazpsZW5ndGhcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6d2lkdGhcIl0mJlxuKGErPVwiQnJlaXRlOiBcIitiW1wid3JlY2s6d2lkdGhcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6Y2FyZ29cIl0mJihhPVwidGltYmVyXCI9PWJbXCJ3cmVjazpjYXJnb1wiXT9hK1wiTGFkdW5nOiBIb2x6PGJyLz5cIjpcImNvYWxcIj09YltcIndyZWNrOmNhcmdvXCJdP2ErXCJMYWR1bmc6IEtvaGxlPGJyLz5cIjphKyhcIkxhZHVuZzogXCIrYltcIndyZWNrOmNhcmdvXCJdK1wiPGJyLz5cIikpLFwieWVzXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2xvd190aWRlXCJdJiYoYSs9XCJTaWNodGJhciBiZWkgTmllZHJpZ3dhc3NlcjogSmE8YnIvPlwiKSxcIm5vXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2xvd190aWRlXCJdJiYoYSs9XCJTaWNodGJhciBiZWkgTmllZHJpZ3dhc3NlcjogTmVpbjxici8+XCIpLFwieWVzXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2hpZ2hfdGlkZVwiXSYmKGErPVwiU2ljaHRiYXIgYmVpIEhvY2h3YXNzZXI6IEphPGJyLz5cIiksXCJub1wiPT1iW1wid3JlY2s6dmlzaWJsZV9hdF9oaWdoX3RpZGVcIl0mJihhKz1cIlNpY2h0YmFyIGJlaSBIb2Nod2Fzc2VyOiBOZWluPGJyLz5cIiksXG5cInllc1wiPT1iLmFjY2VzcyYmKGErPVwiWnV0cml0dCBtXFx1MDBmNmdsaWNoPGJyLz5cIiksXCJub1wiPT1iLmFjY2VzcyYmKGErPVwiWnV0cml0dCBuaWNodCBtXFx1MDBmNmdsaWNoPGJyLz5cIiksXCJwZXJtaXRfcmVxdWlyZWRcIj09Yi5hY2Nlc3MmJihhKz1cIlp1dHJpdHQgbnVyIG1pdCBHZW5laG1pZ3VuZzxici8+XCIpKTtyZXR1cm4gYX1cbmV4cG9ydCBmdW5jdGlvbiBmbktsb3N0ZXJBZGRpdGlvbmFsKGIpe3ZhciBhPVwiXCI7aWYoYltcIm1vbmFzdGVyeTp0eXBlXCJdKXN3aXRjaChiW1wibW9uYXN0ZXJ5OnR5cGVcIl0pe2Nhc2UgXCJtb25hc3RlcnlcIjphKz1cIlR5cDogS2xcXHUwMGY2c3RlcmxpY2hlIEdlbWVpbnNjaGFmdCAobW9uYXN0ZXJ5KTxici8+XCI7YnJlYWs7Y2FzZSBcImNvbnZlbnRcIjphKz1cIlR5cDogQmV0dGVsbVxcdTAwZjZuY2ggR2VtZWluc2NoYWZ0IChjb252ZW50KTxici8+XCI7YnJlYWs7Y2FzZSBcImNhbm9ucnlcIjphKz1cIlR5cDogS2Fub25pa2F0IChjYW5vbnJ5KTxici8+XCI7YnJlYWs7Y2FzZSBcImNvbW1hbmRyeVwiOmErPVwiVHlwOiBNaWxpdFxcdTAwZTRyIGdlZlxcdTAwZmNocnQgKGNvbW1hbmRyeSk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJoZXJtaXRhZ2VcIjphKz1cIlR5cDogRWluc2llZGVsZWkgKGhlcm1pdGFnZSk8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJUeXA6IHVuYmVrYW5udDxici8+XCJ9YltcImNvbW11bml0eTpnZW5kZXJcIl0mJihcIm1hbGVcIj09XG5iW1wiY29tbXVuaXR5OmdlbmRlclwiXSYmKGErPVwiR2VzY2hsZWNodDogTVxcdTAwZTRubmVyZ2VtZWluc2NoYWZ0PGJyLz5cIiksXCJmZW1hbGVcIj09YltcImNvbW11bml0eTpnZW5kZXJcIl0mJihhKz1cIkdlc2NobGVjaHQ6IEZyYXVlbmdlbWVpbnNjaGFmdDxici8+XCIpKTtiLnJlbGlnaW91c19yYW5rJiYoXCJhYmJleVwiPT1iLnJlbGlnaW91c19yYW5rP2ErPVwiUmVsaWdpXFx1MDBmNnNlciBSYW5nOiBBYnRlaTxici8+XCI6XCJhYmJleVwiPT1iLnJlbGlnaW91c19yYW5rJiYoYSs9XCJSZWxpZ2lcXHUwMGY2c2VyIFJhbmc6IEVyemFidGVpPGJyLz5cIikpO1wieWVzXCI9PWIuc2hyaW5lJiYoYSs9XCJCZXNvbmRlcmhlaXQ6IEhlaWxpZ2VuZ3JhYiAvIFJlbGlxdWllbnNjaHJlaW48YnIvPlwiKTtcInllc1wiPT1iLnNhbmN0dWFyeSYmKGErPVwiQmVzb25kZXJoZWl0OiBIZWlsaWd0dW0gLyBBbHRhcnJhdW0gKFNhbmt0dWFyKTxici8+XCIpO2lmKGIucmVsaWdpb24pc3dpdGNoKGIucmVsaWdpb24pe2Nhc2UgXCJhbmltaXN0XCI6YSs9XG4gICAgXCJSZWxpZ2lvbjogYW5pbWlzdGlzY2g8YnIvPjxici8+XCI7YnJlYWs7Y2FzZSBcImJhaGFpXCI6YSs9XCJSZWxpZ2lvbjogYmFoYWk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJidWRkaGlzdFwiOmErPVwiUmVsaWdpb246IGJ1ZGRoaXN0aXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcImNocmlzdGlhblwiOmErPVwiUmVsaWdpb246IGNocmlzdGxpY2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJoaW5kdVwiOmErPVwiUmVsaWdpb246IGhpbmR1aXN0aXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcIklnbGVzaWFOaUNyaXN0b1wiOmErPVwiUmVsaWdpb246IElnbGVzaWFOaUNyaXN0bzxici8+XCI7YnJlYWs7Y2FzZSBcImphaW5cIjphKz1cIlJlbGlnaW9uOiBqYWluPGJyLz5cIjticmVhaztjYXNlIFwiamV3aXNoXCI6YSs9XCJSZWxpZ2lvbjogalxcdTAwZmNkaXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcIm11bHRpZmFpdGhcIjphKz1cIlJlbGlnaW9uOiBwbHVyYWxpc3Rpc2NoPGJyLz5cIjticmVhaztjYXNlIFwibXVzbGltXCI6YSs9XCJSZWxpZ2lvbjogbXVzbGltaXNjaDxici8+XCI7XG4gICAgdHlwZSs9XCJNb3NjaGVlPGJyLz5cIjticmVhaztjYXNlIFwicGFnYW5cIjphKz1cIlJlbGlnaW9uOiBoZWlkbmlzY2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXN0YWZhcmlhblwiOmErPVwiUmVsaWdpb246IHBhc3RhZmFyaXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcInNjaWVudG9sb2dpc3RcIjphKz1cIlJlbGlnaW9uOiBzY2llbnRvbG9naXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcInNoaW50b1wiOmErPVwiUmVsaWdpb246IHNjaGludG9pc3Rpc2NoPGJyLz5cIjticmVhaztjYXNlIFwic2lraFwiOmErPVwiUmVsaWdpb246IHNpa2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzcGlyaXR1YWxpc3RcIjphKz1cIlJlbGlnaW9uOiBzcGlyaXRpc3Rpc2NoPGJyLz5cIjticmVhaztjYXNlIFwidGFvaXN0XCI6YSs9XCJSZWxpZ2lvbjogdGFvaXN0aXNjaDxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRhcmlhblwiOmErPVwiUmVsaWdpb246IHVuaXRhcmlhbjxici8+XCI7YnJlYWs7Y2FzZSBcInlhemlkaVwiOmErPVwiUmVsaWdpb246IHlhemlkaTxici8+XCI7YnJlYWs7XG4gICAgY2FzZSBcInpvcm9hc3RyaWFuXCI6YSs9XCJSZWxpZ2lvbjogem9yb2FzdHJpc2NoPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiUmVsaWdpb246IHVuYmVrYW5udDxici8+XCJ9aWYoYi5kZW5vbWluYXRpb24pc3dpdGNoKGIuZGVub21pbmF0aW9uKXtjYXNlIFwiYW5nbGljYW5cIjphKz1cIktvbmZlc3Npb246IEFuZ2xpa2FuaXNjaGUgR2VtZWluc2NoYWZ0PGJyLz48YnIvPlwiO2JyZWFrO2Nhc2UgXCJiYXB0aXN0XCI6YSs9XCJLb25mZXNzaW9uOiBCYXB0aXN0ZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYXRob2xpY1wiOmErPVwiS29uZmVzc2lvbjogS2F0aG9saXNjaGUgS2lyY2hlLCBvaG5lIGdlbmF1ZXJlIFNwZXppZml6aWVydW5nPGJyLz5cIjticmVhaztjYXNlIFwicm9tYW5fY2F0aG9saWNcIjphKz1cIktvbmZlc3Npb246IFJcXHUwMGY2bWlzY2gtS2F0aG9saXNjaGUgS2lyY2hlPGJyLz5cIjticmVhaztjYXNlIFwib2xkX2NhdGhvbGljXCI6YSs9XCJLb25mZXNzaW9uOiBBbHRrYXRob2xpc2NoZSBLaXJjaGUgKFNjaHdlaXo6IENocmlzdC1LYXRob2xpc2NoKTxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImdyZWVrX2NhdGhvbGljXCI6YSs9XCJLb25mZXNzaW9uOiBHcmllY2hpc2NoLUthdGhvbGlzY2hlIEtpcmNoZSwgU2FtbWVsYmV6ZWljaG51bmcgZlxcdTAwZmNyIGRpZSBtaXQgUm9tIHVuaWVydGVuIE9zdGtpcmNoZW4gZGVzIGJ5emFudGluaXNjaGVuIFJpdHVzPGJyLz5cIjticmVhaztjYXNlIFwiZXZhbmdlbGljYWxcIjphKz1cIktvbmZlc3Npb246IEV2YW5nZWxpa2FsaXNtdXMgaXN0IGVpbmUgdGhlb2xvZ2lzY2hlIFJpY2h0dW5nIGlubmVyaGFsYiBkZXMgUHJvdGVzdGFudGlzbXVzLiBBY2h0dW5nISBOaWNodCB2ZXJ3ZWNoc2VsbiBtaXQgZGVyIGV2YW5nZWxpc2NoZW4gKD0gcHJvdGVzdGFudGlzY2hlbikgS2lyY2hlPGJyLz5cIjticmVhaztjYXNlIFwiamVob3ZhaHNfd2l0bmVzc1wiOmErPVwiS29uZmVzc2lvbjogWmV1Z2VuIEplaG92YXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsdXRoZXJhblwiOmErPVwiS29uZmVzc2lvbjogTHV0aGVyYW5lciwgZXZhbmdlbGlzY2gtbHV0aGVyaXNjaDxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcIm1lbm5vbml0ZVwiOmErPVwiS29uZmVzc2lvbjogTWVubm9uaXRlbjxici8+XCI7YnJlYWs7Y2FzZSBcIm1lc3NpYW5pY19qZXdpc2hcIjphKz1cIktvbmZlc3Npb246IE1lc3NpYW5pc2NoZSBKdWRlbiwgc3RlaGVuIHRoZW9sb2dpc2NoIGRlbiBldmFuZ2VsaWthbGVuIENocmlzdGVuIG5haGUuPGJyLz5cIjticmVhaztjYXNlIFwibWV0aG9kaXN0XCI6YSs9XCJLb25mZXNzaW9uOiBNZXRob2Rpc3QgQ2h1cmNoIChlbmdsLiBNZXRob2Rpc20pPGJyLz5cIjticmVhaztjYXNlIFwibW9ybW9uXCI6YSs9XCJLb25mZXNzaW9uOiBNb3Jtb25lbjxici8+XCI7YnJlYWs7Y2FzZSBcIm5ld19hcG9zdG9saWNcIjphKz1cIktvbmZlc3Npb246IE5ldWFwb3N0b2xpc2NoZSBLaXJjaGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvcnRob2RveFwiOmErPVwiS29uZmVzc2lvbjogT3J0aG9kb3gsIG9obmUgZ2VuYXVlcmUgU3BlemlmaXppZXJ1bmc8YnIvPlwiO2JyZWFrO2Nhc2UgXCJncmVla19vcnRob2RveFwiOmErPVwiS29uZmVzc2lvbjogR3JpZWNoaXNjaC1PcnRob2RveDxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImNvcHRpY19vcnRob2RveFwiOmErPVwiS29uZmVzc2lvbjogS29wdGlzY2hlIEtpcmNoZSwgaXN0IGRpZSBjaHJpc3RsaWNoZSBhbHRvcmllbnRhbGlzY2hlIEtpcmNoZSBcXHUwMGM0Z3lwdGVucy48YnIvPlwiO2JyZWFrO2Nhc2UgXCJwZW50ZWNvc3RhbFwiOmErPVwiS29uZmVzc2lvbjogUGZpbmdzdGJld2VndW5nPGJyLz5cIjticmVhaztjYXNlIFwicHJlc2J5dGVyaWFuXCI6YSs9XCJLb25mZXNzaW9uOiBQcmVzYnl0ZXJpYW5pc2NoZSBLaXJjaGVuPGJyLz5cIjticmVhaztjYXNlIFwicHJvdGVzdGFudFwiOmErPVwiS29uZmVzc2lvbjogRXZhbmdlbGlzY2hlIEtpcmNoZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJxdWFrZXJcIjphKz1cIktvbmZlc3Npb246IFF1XFx1MDBlNGtlcjxici8+XCI7YnJlYWs7Y2FzZSBcInJlZm9ybWVkXCI6YSs9XCJLb25mZXNzaW9uOiBFdmFuZ2VsaXNjaC1yZWZvcm1pZXJ0ZTxici8+XCI7YnJlYWs7Y2FzZSBcInJ1c3NpYW5fb3J0aG9kb3hcIjphKz1cIktvbmZlc3Npb246IFJ1c3Npc2NoLU9ydGhvZG94PGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwic2V2ZW50aF9kYXlfYWR2ZW50aXN0XCI6YSs9XCJLb25mZXNzaW9uOiBTaWViZW50ZW4tVGFncy1BZHZlbnRpc3Rlbjxici8+XCI7YnJlYWs7Y2FzZSBcImNocmlzdGlhbl9jb21tdW5pdHlcIjphKz1cIktvbmZlc3Npb246IERpZSBDaHJpc3RlbmdlbWVpbnNjaGFmdCBpc3QgZWluZSBjaHJpc3RsaWNoZSBLaXJjaGUsIGRpZSBzaWNoIGFscyBzZWxic3RcXHUwMGU0bmRpZ2UgS3VsdHVzZ2VtZWluc2NoYWZ0IHZlcnN0ZWh0Ljxici8+XCI7YnJlYWs7Y2FzZSBcImFkdmVudGlzdFwiOmErPVwiS29uZmVzc2lvbjogQWR2ZW50aXN0ZW4sIG5pY2h0IGFsbGUgQWR2ZW50aXN0ZW4gc2luZCBTaWViZW50ZW4tVGFncy1BZHZlbnRpc3Rlbi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJhbGxpYW5jZVwiOmErPVwiS29uZmVzc2lvbjogQ2hyaXN0aWFuIGFuZCBNaXNzaW9uYXJ5IEFsbGlhbmNlIChDJk1BKSBpcyBhbiBldmFuZ2VsaWNhbCBQcm90ZXN0YW50IGRlbm9taW5hdGlvbiB3aXRoaW4gQ2hyaXN0aWFuaXR5Ljxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImFzc2VtYmxpZXNfb2ZfZ29kXCI6YSs9XCJLb25mZXNzaW9uOiBBc3NlbWJsaWVzIG9mIEdvZCwgaXN0IGVpbmUgcGZpbmdzdGxlcmlzY2hlIERlbm9taW5hdGlvbi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJhcG9zdG9saWNcIjphKz1cIktvbmZlc3Npb246IEFwb3N0b2xpc2NoZSBLaXJjaGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhcm1lbmlhbl9hcG9zdG9saWNcIjphKz1cIktvbmZlc3Npb246IEFybWVuaXNjaGUgQXBvc3RvbGlzY2hlIEtpcmNoZSwgaXN0IGVpbmUgYWx0b3JpZW50YWxpc2NoZSBLaXJjaGUuPGJyLz5cIjticmVhaztjYXNlIFwiYXNzeXJpYW5cIjphKz1cIktvbmZlc3Npb246IEFzc3lyaXNjaGUgS2lyY2hlIGRlcyBPc3RlbnMsIGF1Y2ggQXBvc3RvbGlzY2hlIEtpcmNoZSBkZXMgT3N0ZW5zLCBpc3QgZWluZSBhdXRva2VwaGFsZSB1bmQgdlxcdTAwZjZsbGlnIGVpZ2Vuc3RcXHUwMGU0bmRpZ2UgT3N0a2lyY2hlIHN5cmlzY2hlciBUcmFkaXRpb24gaW4gTmFjaGZvbGdlIGRlcyBhbHRjaHJpc3RsaWNoZW4gS2F0aG9saWthdHMgdm9uIFNlbGV1a2lhLUt0ZXNpcGhvbi48YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJjaHJpc3Rfc2NpZW50aXN0XCI6YSs9XCJLb25mZXNzaW9uOiBDaHJpc3RpYW4gU2NpZW5jZSAoZGV1dHNjaDogQ2hyaXN0bGljaGUgV2lzc2Vuc2NoYWZ0KSBnaW5nIGF1cyBkZXIgTmV1Z2Vpc3QtQmV3ZWd1bmcgaGVydm9yLjxici8+XCI7YnJlYWs7Y2FzZSBcImNodXJjaF9vZl9zY290bGFuZFwiOmErPVwiS29uZmVzc2lvbjogQ2h1cmNoIG9mIFNjb3RsYW5kIChkdC4gS2lyY2hlIFNjaG90dGxhbmRzKSBpc3QgZGllIE5hdGlvbmFsa2lyY2hlIGluIFNjaG90dGxhbmQuIEltIFNwcmFjaGdlYnJhdWNoIGF1Y2ggXFx1MjAxZXRoZSBLaXJrXFx1MjAxYyBnZW5hbm50Ljxici8+XCI7YnJlYWs7Y2FzZSBcImN6ZWNob3Nsb3Zha19odXNzaXRlXCI6YSs9XCJLb25mZXNzaW9uOiBUc2NoZWNob3Nsb3dha2lzY2hlIEh1c3NpdGlzY2hlIEtpcmNoZSwgaXN0IGVpbmUgY2hyaXN0bGljaGUgS2lyY2hlLCBkaWUgZHVyY2ggQWJzcGFsdHVuZyB2b24gZGVyIFJcXHUwMGY2bWlzY2gtS2F0aG9saXNjaGVuIEtpcmNoZSBlbnRzdGFuZGVuIGlzdC4gT2Z0IGF1Y2ggTmV1aHVzc2l0aXNjaGUgS2lyY2hlIGdlbmFubnQsIHZvcm5laG1saWNoIGluIFRzY2hlY2hpZW4gdmVyYnJlaXRldCwgYWJlciBhdWNoIGluIGRlciBTbG93YWtlaTxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImR1dGNoX3JlZm9ybWVkXCI6YSs9XCJLb25mZXNzaW9uOiBOaWVkZXJsXFx1MDBlNG5kaXNjaC1yZWZvcm1pZXJ0ZSBLaXJjaGUsIChlaW5zY2hsaWVcXHUwMGRmbGljaCBOR0sgdW5kIFxcdTAwZTRobmxpY2hlIEtpcmNoZW4gaW4gU1xcdTAwZmNkYWZyaWthKTxici8+XCI7YnJlYWs7Y2FzZSBcImV4Y2x1c2l2ZV9icmV0aHJlblwiOmErPVwiS29uZmVzc2lvbjogRXhjbHVzaXZlIEJyZXRocmVuPGJyLz5cIjticmVhaztjYXNlIFwiZm91cnNxdWFyZVwiOmErPVwiS29uZmVzc2lvbjogSW50ZXJuYXRpb25hbCBDaHVyY2ggb2YgdGhlIEZvdXJzcXVhcmUgR29zcGVsPGJyLz5cIjticmVhaztjYXNlIFwia2ltYmFuZ3Vpc3RcIjphKz1cIktvbmZlc3Npb246IEtpbWJhbmd1aXN0ZW5raXJjaGUsIGlzdCBlaW5lIGFmcmlrYW5pc2NoZSwgdW5hYmhcXHUwMGU0bmdpZ2UsIGNocmlzdGxpY2hlIEtpcmNoZS48YnIvPlwiO2JyZWFrO2Nhc2UgXCJsaXZpbmdfd2F0ZXJzX2NodXJjaFwiOmErPVwiS29uZmVzc2lvbjogTGl2aW5nIFdhdGVycyBDaHJpc3RpYW4gQ2h1cmNoPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwibWFyaWF2aXRlXCI6YSs9XCJLb25mZXNzaW9uOiBNYXJpYXZpdGlzbXVzPGJyLz5cIjticmVhaztjYXNlIFwibWFyb25pdGVcIjphKz1cIktvbmZlc3Npb246IFN5cmlzY2gtbWFyb25pdGlzY2hlIEtpcmNoZSwgaXN0IGVpbmUgbWl0IFJvbSB1bmllcnRlLCBjaHJpc3RsaWNoZSBLaXJjaGUsIGRpZSBkZW4gclxcdTAwZjZtaXNjaGVuIFBhcHN0IGFscyBPYmVyaGF1cHQgYW5lcmtlbm50Ljxici8+XCI7YnJlYWs7Y2FzZSBcIm1vcmF2aWFuXCI6YSs9XCJLb25mZXNzaW9uOiBIZXJybmh1dGVyIEJyXFx1MDBmY2RlcmdlbWVpbmUsIChhdWNoOiBVbml0YXMgRnJhdHJ1bSwgRXZhbmdlbGlzY2hlIG9kZXIgRXJuZXVlcnRlIEJyXFx1MDBmY2Rlci1Vbml0XFx1MDBlNHQsIGVuZ2wuIE1vcmF2aWFuIENodXJjaCkgaXN0IGVpbmUgYXVzIGRlciBiXFx1MDBmNmhtaXNjaGVuIFJlZm9ybWF0aW9uIGhlcmtvbW1lbmRlIFxcdTAwZmNiZXJrb25mZXNzaW9uZWxsLWNocmlzdGxpY2hlIEdsYXViZW5zYmV3ZWd1bmcuPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwibmF6YXJlbmVcIjphKz1cIktvbmZlc3Npb246IEtpcmNoZSBkZXMgTmF6YXJlbmVycywgaXN0IGVpbmUgRnJlaWtpcmNoZSB1bmQgSGVpbGlndW5nc2dlbWVpbmRlIGluIG1ldGhvZGlzdGlzY2hlciBUcmFkaXRpb24uPGJyLz5cIjticmVhaztjYXNlIFwibm9uZGVub21pbmF0aW9uYWxcIjphKz1cIktvbmZlc3Npb246IE5vbmRlbm9taW5hdGlvbmFsIENocmlzdGlhbml0eTxici8+XCI7YnJlYWs7Y2FzZSBcIm9sZF9iZWxpZXZlcnNcIjphKz1cIktvbmZlc3Npb246IEFsdG9ydGhvZG94ZSwgKGhcXHUwMGU0dWZpZ2VyIEFsdGdsXFx1MDBlNHViaWdlKSBpc3QgZWluZSBTYW1tZWxiZXplaWNobnVuZyBmXFx1MDBmY3IgcmVsaWdpXFx1MDBmNnNlIFN0clxcdTAwZjZtdW5nZW4gdW5kIEdydXBwZW4gaW5uZXJoYWxiIGRlciBydXNzaXNjaC1vcnRob2RveGVuIFRyYWRpdGlvbi48YnIvPlwiO2JyZWFrO2Nhc2UgXCJwb2xpc2hfY2F0aG9saWNcIjphKz1cIktvbmZlc3Npb246IFBvbG5pc2NoLUthdGhvbGlzY2hlIEtpcmNoZTxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcInNhbHZhdGlvbl9hcm15XCI6YSs9XCJLb25mZXNzaW9uOiBIZWlsc2FybWVlLCBpc3QgZWluZSBjaHJpc3RsaWNoZSBGcmVpa2lyY2hlIG1pdCBhdXNnZXByXFx1MDBlNGd0ZXIgc296aWFsZXIgVFxcdTAwZTR0aWdrZWl0Ljxici8+XCI7YnJlYWs7Y2FzZSBcInNhbnRvX2RhaW1lXCI6YSs9XCJLb25mZXNzaW9uOiBTYW50byBEYWltZSwgaXN0IGVpbmVyIHN5bmtyZXRpc3Rpc2NoZW4gcmVsaWdpXFx1MDBmNnNlIEJld2VndW5nIGF1cyBCcmFzaWxpZW4uPGJyLz5cIjticmVhaztjYXNlIFwic2VyYmlhbl9vcnRob2RveFwiOmErPVwiS29uZmVzc2lvbjogU2VyYmlzY2gtT3J0aG9kb3hlIEtpcmNoZSwgYmV6ZWljaG5ldCBkaWUgb3J0aG9kb3hlIEtpcmNoZSB2b24gU2VyYmllbiB1bmQgZGllIGlociBuYWNoZ2VvcmRuZXRlbiBLaXJjaGVuLjxici8+XCI7YnJlYWs7Y2FzZSBcInNwaXJpdGlzbVwiOmErPVwiS29uZmVzc2lvbjogU3Bpcml0aXNtdXMsIG9kZXIgU3Bpcml0dWFsaXNtdXMgZGllIExlaHJlIGRlcyBTcGlyaXRpc3RlbiBBbGxhbiBLYXJkZWM8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJ1bml0ZWRcIjphKz1cIktvbmZlc3Npb246IFVuaXRlZCBDaHVyY2ggb2YgQ2FuYWRhLCBpc3QgZGllIHp3ZWl0Z3JcXHUwMGY2XFx1MDBkZnRlIEtpcmNoZSBpbiBLYW5hZGEuPGJyLz5cIjticmVhaztjYXNlIFwidW5pdGVkX2NodXJjaF9vZl9jaHJpc3RcIjphKz1cIktvbmZlc3Npb246IFVuaXRlZCBDaHVyY2ggb2YgQ2hyaXN0LCBpc3QgZWluZSBLaXJjaGUgaW4gZGVuIFVTQS48YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bml0ZWRfZnJlZV9jaHVyY2hfb2Zfc2NvdGxhbmRcIjphKz1cIktvbmZlc3Npb246IFVuaXRlZCBGcmVlIENodXJjaCBvZiBTY290bGFuZCwgaXN0IGVpbmUgcHJlc2J5dGVyaWFuaXNjaGUgRnJlaWtpcmNoZSBpbiBTY2hvdHRsYW5kLjxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRlZF9tZXRob2Rpc3RcIjphKz1cIktvbmZlc3Npb246IEV2YW5nZWxpc2NoLW1ldGhvZGlzdGlzY2hlIEtpcmNoZSwgKGVuZ2wuIFVuaXRlZCBNZXRob2Rpc3QgQ2h1cmNoIChVTUMpKSBpc3QgZWluZSBjaHJpc3RsaWNoZSBLaXJjaGUgaW4gZGVyIHdlc2xleWFuaXNjaGVuIFRyYWRpdGlvbi48YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJ1bml0ZWRfcmVmb3JtZWRcIjphKz1cIktvbmZlc3Npb246IFVuaXRlZCBSZWZvcm1lZCBDaHVyY2gsIChWZXJlaW5pZ3RlIFJlZm9ybWllcnRlIEtpcmNoZSwgVVJDKSBpc3QgZWluZSByZWZvcm1pZXJ0ZSBLaXJjaGUgaW4gR3JvXFx1MDBkZmJyaXRhbm5pZW4uPGJyLz5cIjticmVhaztjYXNlIFwidW5pdGluZ1wiOmErPVwiS29uZmVzc2lvbjogVW5pdGluZyBDaHVyY2ggaW4gQXVzdHJhbGlhIChVQ0EpIGlzdCBkaWUgZHJpdHRnclxcdTAwZjZcXHUwMGRmdGUgY2hyaXN0bGljaGUgRGVub21pbmF0aW9uIGluIEF1c3RyYWxpZW4uPGJyLz5cIjticmVhaztjYXNlIFwiY2h1cmNoX29mX3N3ZWRlblwiOmErPVwiS29uZmVzc2lvbjogU2Nod2VkaXNjaGUgS2lyY2hlLCBpc3QgZGllIGV2YW5nZWxpc2NoLWx1dGhlcmlzY2hlIEtpcmNoZSB1bmQgZWhlbWFsaWdlIFN0YWF0c2tpcmNoZSBTY2h3ZWRlbnMuPGJyLz5cIjticmVhaztjYXNlIFwibWlzc2lvbl9jb3ZlbmFudF9jaHVyY2hfb2Zfc3dlZGVuXCI6YSs9XG4gICAgXCJLb25mZXNzaW9uOiBTY2h3ZWRpc2NoZSBNaXNzaW9uc2tpcmNoZSBpc3QgZWluZSByZWZvcm1pZXJ0ZSBLaXJjaGUgaW4gU2Nod2VkZW4uPGJyLz5cIjticmVhaztjYXNlIFwiYWx0ZXJuYXRpdmVcIjphKz1cIktvbmZlc3Npb246IGFsdGVybmF0aXZlPGJyLz5cIjticmVhaztjYXNlIFwiYXNoa2VuYXppXCI6YSs9XCJLb25mZXNzaW9uOiBhc2hrZW5hemk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJidWNoYXJpXCI6YSs9XCJLb25mZXNzaW9uOiBidWNoYXJpPGJyLz5cIjticmVhaztjYXNlIFwiY29uc2VydmF0aXZlXCI6YSs9XCJLb25mZXNzaW9uOiBjb25zZXJ2YXRpdmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJlZ2FsaXRhcmlhblwiOmErPVwiS29uZmVzc2lvbjogZWdhbGl0YXJpYW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJoYXNpZGljXCI6YSs9XCJLb25mZXNzaW9uOiBoYXNpZGljPGJyLz5cIjticmVhaztjYXNlIFwiaHVtYW5pc3RpY1wiOmErPVwiS29uZmVzc2lvbjogaHVtYW5pc3RpYzxici8+XCI7YnJlYWs7Y2FzZSBcImthYmJhbGFoXCI6YSs9XG4gICAgXCJLb25mZXNzaW9uOiBrYWJiYWxhaDxici8+XCI7YnJlYWs7Y2FzZSBcImthYmJhbGlzdGljXCI6YSs9XCJLb25mZXNzaW9uOiBrYWJiYWxpc3RpYzxici8+XCI7YnJlYWs7Y2FzZSBcImthcmFpdGVcIjphKz1cIktvbmZlc3Npb246IGthcmFpdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsaWJlcmFsXCI6YSs9XCJLb25mZXNzaW9uOiBsaWJlcmFsPGJyLz5cIjticmVhaztjYXNlIFwibHViYXZpdGNoXCI6YSs9XCJLb25mZXNzaW9uOiBsdWJhdml0Y2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsdWJhdml0Y2hfbWVzc2lhbmljXCI6YSs9XCJLb25mZXNzaW9uOiBsdWJhdml0Y2hfbWVzc2lhbmljPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfYmFnaGRhZGlcIjphKz1cIktvbmZlc3Npb246IG1penJhY2hpX2JhZ2hkYWRpPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfY2hpZGFcIjphKz1cIktvbmZlc3Npb246IG1penJhY2hpX2NoaWRhPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfamVydXNhbGVtaXRlXCI6YSs9XCJLb25mZXNzaW9uOiBtaXpyYWNoaV9qZXJ1c2FsZW1pdGU8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJtaXpyYWNoaV9saXZvcm5vXCI6YSs9XCJLb25mZXNzaW9uOiBtaXpyYWNoaV9saXZvcm5vPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfbW9yb2NjYW5cIjphKz1cIktvbmZlc3Npb246IG1penJhY2hpX21vcm9jY2FuPGJyLz5cIjticmVhaztjYXNlIFwibW9kZXJuX29ydGhvZG94XCI6YSs9XCJLb25mZXNzaW9uOiBtb2Rlcm5fb3J0aG9kb3g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJuZW9fb3J0aG9kb3hcIjphKz1cIktvbmZlc3Npb246IG5lb19vcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcIm5vbmRlbm9taW5hdGlvbmFsXCI6YSs9XCJLb25mZXNzaW9uOiBub25kZW5vbWluYXRpb25hbDxici8+XCI7YnJlYWs7Y2FzZSBcIm9ydGhvZG94XCI6YSs9XCJLb25mZXNzaW9uOiBvcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcIm9ydGhvZG94X2FzaGtlbmF6XCI6YSs9XCJLb25mZXNzaW9uOiBvcnRob2RveF9hc2hrZW5hejxici8+XCI7YnJlYWs7Y2FzZSBcIm9ydGhvZG94X3NlZmFyZFwiOmErPVwiS29uZmVzc2lvbjogb3J0aG9kb3hfc2VmYXJkPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwicHJvZ3Jlc3NpdmVcIjphKz1cIktvbmZlc3Npb246IHByb2dyZXNzaXZlPGJyLz5cIjticmVhaztjYXNlIFwicmVjb25zdHJ1Y3Rpb25pc3RcIjphKz1cIktvbmZlc3Npb246IHJlY29uc3RydWN0aW9uaXN0PGJyLz5cIjticmVhaztjYXNlIFwicmVmb3JtXCI6YSs9XCJLb25mZXNzaW9uOiByZWZvcm08YnIvPlwiO2JyZWFrO2Nhc2UgXCJyZW5ld2FsXCI6YSs9XCJLb25mZXNzaW9uOiByZW5ld2FsPGJyLz5cIjticmVhaztjYXNlIFwic2FtYXJpdGFuXCI6YSs9XCJLb25mZXNzaW9uOiBzYW1hcml0YW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZWZhcmRpXCI6YSs9XCJLb25mZXNzaW9uOiBzZWZhcmRpPGJyLz5cIjticmVhaztjYXNlIFwic2VmYXJkaV9hbXN0ZXJkYW1cIjphKz1cIktvbmZlc3Npb246IHNlZmFyZGlfYW1zdGVyZGFtPGJyLz5cIjticmVhaztjYXNlIFwic2VmYXJkaV9sb25kb25cIjphKz1cIktvbmZlc3Npb246IHNlZmFyZGlfbG9uZG9uPGJyLz5cIjticmVhaztjYXNlIFwidHJhZGl0aW9uYWxcIjphKz1cIktvbmZlc3Npb246IHRyYWRpdGlvbmFsPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwidWx0cmFfb3J0aG9kb3hcIjphKz1cIktvbmZlc3Npb246IHVsdHJhX29ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwidW5hZmZpbGlhdGVkXCI6YSs9XCJLb25mZXNzaW9uOiB1bmFmZmlsaWF0ZWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ5ZW1lbml0ZVwiOmErPVwiS29uZmVzc2lvbjogeWVtZW5pdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ5ZW1lbml0ZV9iYWxhZGlcIjphKz1cIktvbmZlc3Npb246IHllbWVuaXRlX2JhbGFkaTxici8+XCI7YnJlYWs7Y2FzZSBcInllbWVuaXRlX3NoYW1pXCI6YSs9XCJLb25mZXNzaW9uOiB5ZW1lbml0ZV9zaGFtaTxici8+XCI7YnJlYWs7Y2FzZSBcImFobWFkaXlhXCI6YSs9XCJLb25mZXNzaW9uOiBhaG1hZGl5YTxici8+XCI7YnJlYWs7Y2FzZSBcImFsYW91aXRlXCI6YSs9XCJLb25mZXNzaW9uOiBhbGFvdWl0ZTxici8+XCI7YnJlYWs7Y2FzZSBcImRydXplXCI6YSs9XCJLb25mZXNzaW9uOiBkcnV6ZTxici8+XCI7YnJlYWs7Y2FzZSBcImliYWRpXCI6YSs9XCJLb25mZXNzaW9uOiBpYmFkaTxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcImlzbWFpbGlcIjphKz1cIktvbmZlc3Npb246IGlzbWFpbGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzaGlhXCI6YSs9XCJLb25mZXNzaW9uOiBzaGlhPGJyLz5cIjticmVhaztjYXNlIFwic3VubmlcIjphKz1cIktvbmZlc3Npb246IHN1bm5pPGJyLz5cIjticmVhaztjYXNlIFwibmljaGlyZW5cIjphKz1cIktvbmZlc3Npb246IG5pY2hpcmVuPGJyLz5cIjticmVhaztjYXNlIFwiam9kb19zaGluc2h1XCI6YSs9XCJLb25mZXNzaW9uOiBqb2RvX3NoaW5zaHU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJqb2RvX3NodVwiOmErPVwiS29uZmVzc2lvbjogam9kb19zaHU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ2YWpyYXlhbmFcIjphKz1cIktvbmZlc3Npb246IHZhanJheWFuYTxici8+XCI7YnJlYWs7Y2FzZSBcInNoaW5nb25fc2h1XCI6YSs9XCJLb25mZXNzaW9uOiBzaGluZ29uX3NodTxici8+XCI7YnJlYWs7Y2FzZSBcInplblwiOmErPVwiS29uZmVzc2lvbjogemVuPGJyLz5cIjticmVhaztjYXNlIFwidGhhaV9tYWhhbmlrYXlhXCI6YSs9XCJLb25mZXNzaW9uOiB0aGFpX21haGFuaWtheWE8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJ0aGFpX3RoYW1tYXl1dFwiOmErPVwiS29uZmVzc2lvbjogdGhhaV90aGFtbWF5dXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhc2F0cnVcIjphKz1cIktvbmZlc3Npb246IGFzYXRydTxici8+XCI7YnJlYWs7Y2FzZSBcImNlbHRpY1wiOmErPVwiS29uZmVzc2lvbjogY2VsdGljPGJyLz5cIjticmVhaztjYXNlIFwiZ3JlY28tcm9tYW5cIjphKz1cIktvbmZlc3Npb246IGdyZWNvLXJvbWFuPGJyLz5cIjticmVhaztjYXNlIFwid2ljY2FcIjphKz1cIktvbmZlc3Npb246IHdpY2NhPGJyLz5cIjticmVhaztjYXNlIFwiaXJhbmlcIjphKz1cIktvbmZlc3Npb246IGlyYW5pPGJyLz5cIjticmVhaztjYXNlIFwicGFyc2lcIjphKz1cIktvbmZlc3Npb246IHBhcnNpPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidW5iZWthbm50PGJyLz5cIn1pZihiLmNvbW11bml0eSlzd2l0Y2goYi5jb21tdW5pdHkpe2Nhc2UgXCJBQVwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChBQSk6IEF1Z3VzdGluaWFucyBvZiB0aGUgQXNzdW1wdGlvbiA8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJCU0NNXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKEJTQ00pOiBBZG9yZXJzIG9mIHRoZSBTYWNyZWQgSGVhcnQgb2YgSmVzdXMgb2YgTW9udG1hcnRyZSA8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDQk1WXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKENCTVYpOiBBdWd1c3RpbmVyLUNob3JmcmF1ZW4gQi5NLlYuPGJyLz5cIjticmVhaztjYXNlIFwiQ09cIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoQ08pOiBPcmF0b3JpYW5zPGJyLz5cIjticmVhaztjYXNlIFwiQ01DXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKENNQyk6IENvbmdyZWdhdGlvbiBvZiB0aGUgTW90aGVyIENvLVJlZGVtcHRyaXg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDUlNQXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKENSU1ApOiBLb25ncmVnYXRpb24gZGVyIFJlZ3VsYXJrbGVyaWtlciB2b20gaGwuIFBhdWx1cyAoQmFybmFiaXRlbik8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDU0pcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoQ1NKKTogQ2FybWVsIFNhaW50LUpvc2VwaDxici8+XCI7XG4gICAgYnJlYWs7Y2FzZSBcIkNTU1BcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoQ1NTUCk6IENvbmdyXFx1MDBlOWdhdGlvbiBkdSBTYWludC1Fc3ByaXQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDU1NSXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKENTU1IpOiBDb25nclxcdTAwZTlnYXRpb24gZHUgVHJcXHUwMGU4cyBTYWludCBSXFx1MDBlOWRlbXB0ZXVyPGJyLz5cIjticmVhaztjYXNlIFwiRkNKTVwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChGQ0pNKTogRnJhbmNpc2NhbiBTaXN0ZXJzLCBEYXVnaHRlcnMgb2YgdGhlIFNhY3JlZCBIZWFydCBvZiBKZXN1cyBhbmQgTWFyeTxici8+XCI7YnJlYWs7Y2FzZSBcIkZNR0JcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoRk1HQik6IFN1b3JlIEZyYW5jZXNjYW5lIE1pc3Npb25hcmllIGRpIEdlc1xcdTAwZjkgQmFtYmlubzxici8+XCI7YnJlYWs7Y2FzZSBcIkZNSFwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChGTUgpOiBDb25ncmVnYXRpbyBGaWxpYXJ1bSBNYXJpYWUgU2FuY3Rpc3NpbWFlIGFiIEhvcnRvPGJyLz5cIjtcbiAgICBicmVhaztjYXNlIFwiRk1NXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKEZNTSk6IEZyYW5jaXNjYWluZXMgbWlzc2lvbm5haXJlcyBkZSBNYXJpZTxici8+XCI7YnJlYWs7Y2FzZSBcIkZTQ1wiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChGU0MpOiBGclxcdTAwZThyZXMgZGVzIFxcdTAwYzljb2xlcyBjaHJcXHUwMGU5dGllbm5lczxici8+XCI7YnJlYWs7Y2FzZSBcIk1DQ0lcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoTUNDSSk6IE1pc3Npb25uYWlyZXMgY29tYm9uaWVucyBkdSBTYWNyXFx1MDBlOS1DXFx1MDE1M3VyPGJyLz5cIjticmVhaztjYXNlIFwiTVNGU1wiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChNU0ZTKTogTWlzc2lvbm5haXJlcyBkZSBTYWludCBGcmFuXFx1MDBlN29pcyBkZSBTYWxlczxici8+XCI7YnJlYWs7Y2FzZSBcIk9DYXJ0XCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9DYXJ0KTogT3JkZXIgb2YgdGhlIENhcnRodXNpYW5zPGJyLz5cIjticmVhaztjYXNlIFwiT0NDXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9DQyk6IE9yZHJlIGRlIE5vdHJlIERhbWUgZHUgTW9udC1DYXJtZWw8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJPQ0RcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT0NEKTogT3JkcmUgZGVzIENhcm1lcyBkXFx1MDBlOWNoYXV4PGJyLz5cIjticmVhaztjYXNlIFwiT0NTT1wiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChPQ1NPKTogWmlzdGVyemllbnNlcm9yZGVuIGRlciBzdHJlbmdlcmVuIE9ic2VydmFueiAoVHJhcHBpc3Rlbik8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPRk1cIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT0ZNKTogT3JkcmUgZGVzIEZyXFx1MDBlOHJlcyBNaW5ldXJzIChGcmFuemlza2FuZXIpPGJyLz5cIjticmVhaztjYXNlIFwiT0ZNQ2FwXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9GTUNhcCk6IE9yZHJlIGRlcyBGclxcdTAwZThyZXMgTWluZXVycyBDYXB1Y2luczxici8+XCI7YnJlYWs7Y2FzZSBcIk9GTUNvbnZcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT0ZNQ29udik6IE9yZHJlIGRlcyBGclxcdTAwZThyZXMgTWluZXVycyBDb252ZW50dWVsczxici8+XCI7YnJlYWs7Y2FzZSBcIk9GU1wiOmErPVxuICAgIFwiT3JkZW5zZ2VtZWluc2NoYWZ0IChPRlMpOiBGcmFuY2lzY2FucyBzZWN1bGFyIFRoaXJkIE9yZGVyPGJyLz5cIjticmVhaztjYXNlIFwiT01JXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9NSSk6IE9ibGF0cyBkZSBNYXJpZTxici8+XCI7YnJlYWs7Y2FzZSBcIk9QXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9QKTogT3JkcmUgZGVzIEZyXFx1MDBlOHJlcyBQclxcdTAwZWFjaGV1cnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPUHJhZW1cIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT1ByYWVtKTogT3JkcmUgZGVzIGNoYW5vaW5lcyByXFx1MDBlOWd1bGllcnMgZGUgUHJcXHUwMGU5bW9udHJcXHUwMGU5PGJyLz5cIjticmVhaztjYXNlIFwiT1NCXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9TQik6IE9yZGVyIG9mIFNhaW50IEJlbmVkaWN0PGJyLz5cIjticmVhaztjYXNlIFwiT1NDXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9TQyk6IE9yZHJlIGRlIFNhaW50ZS1DbGFpcmUgb3UgT3JkcmUgZGVzIFBhdXZyZXMgRGFtZXM8YnIvPlwiO1xuICAgIGJyZWFrO2Nhc2UgXCJPU1NTXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKE9TU1MpOiBPcmRyZSBkZSBTYWludGUtQnJpZ2l0dGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPVk1cIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoT1ZNKTogT3JkZXIgb2YgdGhlIFZpc2l0YXRpb24gb2YgSG9seSBNYXJ5IChTYWxlc2lhbmVyaW5uZW4pPGJyLz5cIjticmVhaztjYXNlIFwiUFNEUFwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChQU0RQKTogUGV0aXRlcyBzXFx1MDE1M3VycyBkZXMgcGF1dnJlcyAoS2xlaW5lbiBTY2h3ZXN0ZXJuIGRlciBBcm1lbik8YnIvPlwiO2JyZWFrO2Nhc2UgXCJQRkpcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoUEZKKTogUGV0aXRzIEZyXFx1MDBlOHJlcyBkZSBKXFx1MDBlOXN1czxici8+XCI7YnJlYWs7Y2FzZSBcIlNEQlwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChTREIpOiBTb2NpXFx1MDBlOXRcXHUwMGU5IGRlIFNhaW50IEZyYW5cXHUwMGU3b2lzIGRlIFNhbGVzPGJyLz5cIjticmVhaztjYXNlIFwiU0pcIjphKz1cbiAgICBcIk9yZGVuc2dlbWVpbnNjaGFmdCAoU0opOiBDb21wYWduaWUgZGUgSlxcdTAwZTlzdXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTT0NcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoU09DKTogT3JkZXIgb2YgQ2lzdGVyY2lhbnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTU0NDXCI6YSs9XCJPcmRlbnNnZW1laW5zY2hhZnQgKFNTQ0MpOiBDb25ncmVnYXRpb24gb2YgdGhlIFNhY3JlZCBIZWFydHMgb2YgSmVzdXMgYW5kIE1hcnk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTU0ZcIjphKz1cIk9yZGVuc2dlbWVpbnNjaGFmdCAoU1NGKTogU29jaWV0eSBvZiBTdCBGcmFuY2lzPGJyLz5cIjticmVhaztjYXNlIFwiU1NKRVwiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChTU0pFKTogU29jaWV0eSBvZiBTdCBKb2huIHRoZSBFdmFuZ2VsaXN0PGJyLz5cIjticmVhaztjYXNlIFwiU1NwU1wiOmErPVwiT3JkZW5zZ2VtZWluc2NoYWZ0IChTU3BTKTogU3RleWxlciBNaXNzaW9uc3NjaHdlc3Rlcm48YnIvPlwiO2JyZWFrO2Nhc2UgXCJUT1JcIjphKz1cbiAgICBcIk9yZGVuc2dlbWVpbnNjaGFmdCAoVE9SKTogVGVyem8gT3JkaW5lIFJlZ29sYXJlIGRpIFNhbiBGcmFuY2VzY288YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmJla2FubnQ8YnIvPlwifXJldHVybiBhfXZhciBmblRlc3RJbmZvUG9wdXA9ZnVuY3Rpb24oYil7Yj1iLmdldFByb3BlcnRpZXMoKTt2YXIgYT1cIlwiLGM7Zm9yKGMgaW4gYilhPWErYytcIj1cIitiW2NdK1wiPGJyLz5cIjtyZXR1cm4nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF90ZXh0XCIgc3R5bGU9XCJ3aWR0aDozMDBweDtcIj4nK2ErXCI8L2Rpdj5cIn07XG4iLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmltKGIpe3JldHVybiBiLnJlcGxhY2UoL15cXHMrLyxcIlwiKS5yZXBsYWNlKC9cXHMrJC8sXCJcIil9XG5leHBvcnQgZnVuY3Rpb24gaXNNb2JpbGUoKXtyZXR1cm4vKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyAoY2V8cGhvbmUpfHhkYXx4aWlub3xhbmRyb2lkfGlwYWR8cGxheWJvb2t8c2lsay9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudHx8bmF2aWdhdG9yLnZlbmRvcnx8d2luZG93Lm9wZXJhKXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdCgobmF2aWdhdG9yLnVzZXJBZ2VudHx8bmF2aWdhdG9yLnZlbmRvcnx8XG4gICAgd2luZG93Lm9wZXJhKS5zdWJzdHIoMCw0KSl9ZnVuY3Rpb24gdHJhbnNsYXRlKGIpe3ZhciBhPXRyaW0oYik7cmV0dXJuXCJ5ZXNcIj09YXx8XCJZZXNcIj09YT9cInllc1wiOlwibm9cIj09YXx8XCJOb1wiPT1hP1wibm9cIjpcImxpbWl0ZWRcIj09YT9cImxpbWl0ZWRcIjpcImRlc2lnbmF0ZWRcIj09YT9cImRlc2lnbmF0ZWRcIjpcIndvb2RcIj09YT9cIndvb2RcIjpcIm1ldGFsXCI9PWE/XCJtZXRhbFwiOlwiY29uY3JldGVcIj09YT9cImNvbmNyZXRlXCI6XCJwbGFzdGljXCI9PWE/XCJwbGFzdGljXCI6XCJzdG9uZVwiPT1hP1wic3RvbmVcIjpcInN0ZWVsXCI9PWE/XCJzdGVlbFwiOlwiYnJpY2tcIj09YT9cImJyaWNrXCI6XCJyZWluZm9yY2VkX2NvbmNyZXRlXCI9PWE/XCJyZWluZm9yY2VkX2NvbmNyZXRlXCI6XCJtYXNvbnJ5XCI9PWE/XCJtYXNvbnJ5XCI6Yn1cbmV4cG9ydCB2YXIgZm5TdGFuZGFyZEluZm9Qb3B1cD1mdW5jdGlvbihmZWF0dXJlLGltYWdlU3JjKXt2YXIgYXR0cj1mZWF0dXJlLmdldFByb3BlcnRpZXMoKTt2YXIgcmVzdWx0PVwiXCI7cmVzdWx0Kz1mbkhlYWRlcihhdHRyLGltYWdlU3JjKTtyZXN1bHQrPWZuQ29udGVudChhdHRyKTtyZXN1bHQrPWZuRm9vdGVyKGF0dHIsZmVhdHVyZS5nZXQoXCJvc21fdHlwZVwiKStcIi9cIitmZWF0dXJlLmdldElkKCkpO3Jlc3VsdD0nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF90ZXh0XCI+JytyZXN1bHQrXCI8L2Rpdj5cIjtyZXR1cm4gcmVzdWx0fSxmblJlZHVjZWRJbmZvUG9wdXA9ZnVuY3Rpb24oYixhKXt2YXIgYz1iLmdldFByb3BlcnRpZXMoKSxkPVwiXCIsZT0hMSxmO2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIpWzBdLmdldEltYWdlKCkuZ2V0U3JjKCk6YS5nZXRJbWFnZSgpLmdldFNyYygpO2lmKFwicmVzdGF1cmFudFwiPT1cbiAgICBjLmFtZW5pdHl8fFwicHViXCI9PWMuYW1lbml0eXx8XCJiaWVyZ2FydGVuXCI9PWMuYW1lbml0eSllPSEwO1wiaG90ZWxcIj09Yy50b3VyaXNtJiYoZT0hMCk7XCJndWVzdF9ob3VzZVwiPT1jLnRvdXJpc20mJihlPSEwKTtcImNoYWxldFwiPT1jLnRvdXJpc20mJihlPSEwKTtcImhvc3RlbFwiPT1jLnRvdXJpc20mJihlPSEwKTtcImFscGluZV9odXRcIj09Yy50b3VyaXNtJiYoZT0hMCk7aWYoXCJhcnR3b3JrXCI9PWMudG91cmlzbXx8XCJhcnR3b3JrXCI9PWMuYW1lbml0eSllPSEwO2lmKFwibXVzZXVtXCI9PWMudG91cmlzbXx8XCJtdXNldW1cIj09Yy5hbWVuaXR5KWU9ITA7XCJjaW5lbWFcIj09Yy5hbWVuaXR5JiYoZT0hMCk7XCJ0aGVhdHJlXCI9PWMuYW1lbml0eSYmKGU9ITApO2lmKFwiYXR0cmFjdGlvblwiPT1jLmFtZW5pdHl8fFwiZm91bnRhaW5cIj09Yy5hbWVuaXR5fHxcIm1vbnVtZW50XCI9PWMuaGlzdG9yaWN8fFwiY2l0eV9nYXRlXCI9PWMuaGlzdG9yaWN8fFwicnVpbnNcIj09Yy5oaXN0b3JpY3x8XCJjYXN0bGVcIj09Yy5oaXN0b3JpY3x8XG4gICAgXCJhdHRyYWN0aW9uXCI9PWMudG91cmlzbSllPSEwO1wicGxheWdyb3VuZFwiPT1jLmxlaXN1cmUmJihlPSEwKTtjLmFlcmlhbHdheSYmKGU9ITApO2lmKFwic3dpbW1pbmdfcG9vbFwiPT1jLmFtZW5pdHl8fFwic3dpbW1pbmdfcG9vbFwiPT1jLmxlaXN1cmV8fFwic3dpbW1pbmdcIj09Yy5zcG9ydCllPSEwO1wic3RhdGlvblwiPT1jLnJhaWx3YXkmJihlPSEwKTtcInN3aW1taW5nXCI9PWMuc3BvcnQmJihlPSEwKTtcInN3aW1taW5nX3Bvb2xcIj09Yy5sZWlzdXJlJiYoZT0hMCk7XCJzd2ltbWluZ19wb29sXCI9PWMuYW1lbml0eSYmKGU9ITApO1wid2F0ZXJwYXJrXCI9PWMubGVpc3VyZSYmKGU9ITApO2Mud2F0ZXJfcGFyayYmKGU9ITApO1wic3BvcnRzX2NlbnRyZVwiPT1jLmxlaXN1cmUmJihlPSEwKTtzd2l0Y2goZSl7Y2FzZSAhMTpkKz1mbkhlYWRlcihjLGYpO2QrPWZuQ29udGVudChjKTtkKz1mbkZvb3RlcihjLGIuZ2V0KFwib3NtX3R5cGVcIikrXCIvXCIrYi5nZXRJZCgpKTticmVhaztjYXNlICEwOmQrPWZuSGVhZGVyKGMsXG4gICAgZil9cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfdGV4dFwiPicrZCtcIjwvZGl2PlwifTtcbmV4cG9ydCBmdW5jdGlvbiBmbkhlYWRlcihiLGEpe3ZhciBjPVwiXCIsZD1cIjMycHhcIjtpZihiLm5hbWV8fGJbXCJwaXN0ZTpuYW1lXCJdfHxiW1wieG1hczpuYW1lXCJdfHxiW1wieG1hczpsb2NhdGlvblwiXSl7aWYoYi5uYW1lKXZhciBlPWIubmFtZTtiW1wicGlzdGU6bmFtZVwiXSYmKGU9YltcInBpc3RlOm5hbWVcIl0pO2JbXCJ4bWFzOm5hbWVcIl0mJihlPWJbXCJ4bWFzOm5hbWVcIl0pO2JbXCJ4bWFzOmxvY2F0aW9uXCJdJiYoZT1iW1wieG1hczpsb2NhdGlvblwiXSk7Yys9YT8nPGltZyBzcmM9XCInK2ErJ1wiIHdpZHRoPVwiJytkKydcIiBuYW1lPVwiJytlKydcIiBhbHQ9XCInK2UrJ1wiPjxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfaGVhZGVyX2ZlYXR1cmVuYW1lXCI+JytlK1wiPC9kaXY+XCI6JzxuYW1lPVwiJytlKydcIiBhbHQ9XCInK2UrJ1wiPjxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfaGVhZGVyX2ZlYXR1cmVuYW1lXCI+JytcbiAgICBlK1wiPC9kaXY+XCJ9ZWxzZSBhJiYoYys9JzxpbWcgc3JjPVwiJythKydcIiB3aWR0aD1cIicrZCsnXCIgbmFtZT1cIicrYSsnXCIgYWx0PVwiJythKydcIj4nKTtjKz1mbkdldFRyYW5zbGF0ZV9UeXBlKGIpO3JldHVybic8ZGl2IGNsYXNzPVwiYzRnX3BvcHVwX2hlYWRlclwiPicrYytcIjwvZGl2PlwifVxuZXhwb3J0IGZ1bmN0aW9uIGZuRm9vdGVyKGIsYSl7dmFyIGM9XCJcIixkPSExO2JbXCJhZGRyOmhvdXNlbmFtZVwiXSYmKGMrPVwiaG91c2VuYW1lOiBcIitiW1wiYWRkcjpob3VzZW5hbWVcIl0rXCI8YnIvPlwiLGQ9ITApO2JbXCJhZGRyOmZsb29yXCJdPyhjKz1cImZsb29yOiBcIitiW1wiYWRkcjpmbG9vclwiXStcIjxici8+XCIsZD0hMCk6YltcImFkZHI6bGV2ZWxcIl0mJihjKz1cImxldmVsOiBcIitiW1wiYWRkcjpsZXZlbFwiXStcIjxici8+XCIsZD0hMCk7YltcImFkZHI6c3RyZWV0XCJdJiYoYys9YltcImFkZHI6c3RyZWV0XCJdLGM9YltcImFkZHI6aG91c2VudW1iZXJcIl0/YysoXCIgXCIrYltcImFkZHI6aG91c2VudW1iZXJcIl0rXCI8YnIvPlwiKTpjK1wiPGJyLz5cIixkPSEwKTtiW1wiYWRkcjpwb3N0Y29kZVwiXSYmKGMrPWJbXCJhZGRyOnBvc3Rjb2RlXCJdK1wiIFwiKTtiW1wiYWRkcjpjaXR5XCJdJiYoYys9YltcImFkZHI6Y2l0eVwiXStcIjxici8+XCIsZD0hMCk7aWYoYi5zcWttKWlmKGIuc3FrbT1cIlwiK2Iuc3FrbSwzPGIuc3FrbS5sZW5ndGgpe3ZhciBlPWIuc3FrbS5sZW5ndGglXG4gICAgMyxmPTA8ZT9iLnNxa20uc3Vic3RyaW5nKDAsZSk6XCJcIjtmb3IodmFyIGk9MDtpPE1hdGguZmxvb3IoYi5zcWttLmxlbmd0aC8zKTtpKyspZj0wPT1lJiYwPT1pP2YrYi5zcWttLnN1YnN0cmluZyhlKzMqaSxlKzMqaSszKTpmKyhcIi5cIitiLnNxa20uc3Vic3RyaW5nKGUrMyppLGUrMyppKzMpKTtjKz1cImFyZWE6IFwiK2YrXCIgS21cXHUwMGIyPGJyLz5cIn1lbHNlIGMrPVwiYXJlYSBcIitiLnNxa20rXCI8YnIvPlwiO2JbXCJjb250YWN0OnBob25lXCJdJiYoYz1pc01vYmlsZSgpP2MrKCdwaG9uZTogPGEgaHJlZj1cInRlbDonK2JbXCJjb250YWN0OnBob25lXCJdKydcIj4nK2JbXCJjb250YWN0OnBob25lXCJdK1wiPC9hPjxici8+XCIpOmMrKCdwaG9uZTogPGEgaHJlZj1cImNhbGx0bzonK2JbXCJjb250YWN0OnBob25lXCJdKydcIj4nK2JbXCJjb250YWN0OnBob25lXCJdK1wiPC9hPjxici8+XCIpLGQ9ITApO2IucGhvbmUmJihjPWlzTW9iaWxlKCk/YysoJ3Bob25lOiA8YSBocmVmPVwidGVsOicrYi5waG9uZSsnXCI+JytiLnBob25lK1xuICAgIFwiPC9hPjxici8+XCIpOmMrKCdwaG9uZTogPGEgaHJlZj1cImNhbGx0bzonK2IucGhvbmUrJ1wiPicrYi5waG9uZStcIjwvYT48YnIvPlwiKSxkPSEwKTtiW1wiY29udGFjdDpmYXhcIl0/KGMrPVwiZmF4OiBcIitiW1wiY29udGFjdDpmYXhcIl0rXCI8YnIvPlwiLGQ9ITApOmIuZmF4JiYoYys9XCJmYXg6IFwiK2IuZmF4K1wiPGJyLz5cIixkPSEwKTtiW1wiY29udGFjdDplbWFpbFwiXT8oYys9J2VtYWlsOiA8YSBocmVmPVwibWFpbHRvOicrYltcImNvbnRhY3Q6ZW1haWxcIl0rJ1wiPicrYltcImNvbnRhY3Q6ZW1haWxcIl0rXCI8L2E+PGJyLz5cIixkPSEwKTpiLmVtYWlsJiYoYys9J2VtYWlsOiA8YSBocmVmPVwibWFpbHRvOicrYi5lbWFpbCsnXCI+JytiLmVtYWlsK1wiPC9hPjxici8+XCIsZD0hMCk7ZCYmKGMrPVwiPGJyLz5cIik7aWYoYi5vcGVuaW5nX2hvdXJzKXtkPWIub3BlbmluZ19ob3Vycztmb3IoZT0wOzA9PWV8fDA8ZC5pbmRleE9mKFwiO1wiKTspMDxlJiYoZD1kLnJlcGxhY2UoXCI7XCIsXCI8YnIvPlwiKSksZSsrO2MrPSdvcGVuaW5nIGhvdXJzOiA8YnIvPjxkaXYgY2xhc3M9XCJjNGdfb3Blbl90ZXh0XCI+JytcbiAgICBkK1wiPC9kaXY+XCI7Yz0wPGQuaW5kZXhPZihcIlBIXCIpP2MrXCIoUEggPSBwdWJsaWMgaG9saWRheSk8YnIvPlwiOmMrXCI8YnIvPlwifWlmKGJbXCJ4bWFzOm9wZW5pbmdfaG91cnNcIl0pe2Q9YltcInhtYXM6b3BlbmluZ19ob3Vyc1wiXTtmb3IoZT0wOzA9PWV8fDA8ZC5pbmRleE9mKFwiO1wiKTspMDxlJiYoZD1kLnJlcGxhY2UoXCI7XCIsXCI8YnIvPlwiKSksZSsrO2MrPSdvcGVuaW5nIGhvdXJzOiA8YnIvPjxkaXYgY2xhc3M9XCJjNGdfb3Blbl90ZXh0XCI+JytkK1wiPC9kaXY+XCI7Yz0wPGQuaW5kZXhPZihcIlBIXCIpP2MrXCIoUEggPSBwdWJsaWMgaG9saWRheSk8YnIvPlwiOmMrXCI8YnIvPlwifWJbXCJ4bWFzOnVybFwiXSYmKGQ9XCJcIixkPWJbXCJ4bWFzOnVybFwiXSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHA6Ly9cIitkKSxjKz0nd2Vic2l0ZTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+d2Vic2l0ZSBsaW5rPC9hPjxici8+Jyk7XG4gICAgYltcImNvbnRhY3Q6d2Vic2l0ZVwiXT8oZD1iW1wiY29udGFjdDp3ZWJzaXRlXCJdLHRyaW0oZCksLTE9PWQuaW5kZXhPZihcImh0dHBzOi8vXCIsMCkmJi0xPT1kLmluZGV4T2YoXCJodHRwOi8vXCIsMCkmJihkPVwiaHR0cDovL1wiK2QpLGMrPSd3ZWJzaXRlOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj53ZWJzaXRlIGxpbms8L2E+PGJyLz4nKTpiLndlYnNpdGUmJihkPWIud2Vic2l0ZSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHA6Ly9cIitkKSxjKz0nd2Vic2l0ZTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+d2Vic2l0ZSBsaW5rPC9hPjxici8+Jyk7Yi53aWtpcGVkaWEmJihkPWIud2lraXBlZGlhLHRyaW0oZCksLTE9PWQuaW5kZXhPZihcImh0dHBzOi8vXCIsMCkmJi0xPT1kLmluZGV4T2YoXCJodHRwOi8vXCIsMCkmJihkPVwiaHR0cHM6Ly93aWtpcGVkaWEub3JnL3dpa2kvXCIrZCksYys9XG4gICAgICAgICdXaWtpcGVkaWE6IDxhIGhyZWY9XCInK2QrJ1wiIHRhcmdldD1cIl9ibGFua1wiPldpa2lwZWRpYSBsaW5rPC9hPjxici8+Jyk7Yi53aWtpbWVkaWFfY29tbW9ucyYmKGQ9Yi53aWtpbWVkaWFfY29tbW9ucyx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHBzOi8vY29tbW9ucy53aWtpbWVkaWEub3JnL3dpa2kvXCIrZCksYys9J1dpa2ltZWRpYTogPGEgaHJlZj1cIicrZCsnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+V2lraW1lZGlhIGxpbms8L2E+PGJyLz4nKTtiW1wiY29udGFjdDp3ZWJjYW1cIl0mJihkPWJbXCJjb250YWN0OndlYmNhbVwiXSx0cmltKGQpLC0xPT1kLmluZGV4T2YoXCJodHRwczovL1wiLDApJiYtMT09ZC5pbmRleE9mKFwiaHR0cDovL1wiLDApJiYoZD1cImh0dHA6Ly9cIitkKSxjKz0nd2ViY2FtOiA8YSBocmVmPVwiJytkKydcIiB0YXJnZXQ9XCJfYmxhbmtcIj53ZWJjYW0gbGluazwvYT48YnIvPicpO2IuaW1hZ2UmJihjKz1cbiAgICAgICAgJzxpbWcgc3JjPVwiJytiLmltYWdlKydcIiB3aWR0aD1cIjIwMHB4XCIgbmFtZT1cIicrYi5uYW1lKydcIiBhbHQ9XCInK2IubmFtZSsnXCI+PGJyLz4nKTtkPVwiXCI7Yi5pbnRlcm5ldF9hY2Nlc3MmJihkKz1cImludGVybmV0IGFjY2VzczogXCIrdHJhbnNsYXRlKGIuaW50ZXJuZXRfYWNjZXNzKStcIjxici8+XCIpO2JbXCJpbnRlcm5ldF9hY2Nlc3M6ZmVlXCJdJiYoZCs9XCJmZWU6IFwiK3RyYW5zbGF0ZShiW1wiaW50ZXJuZXRfYWNjZXNzOmZlZVwiXSkrXCI8YnIvPlwiKTtiW1wid2lmaV9hY2Nlc3M6b3BlcmF0b3JcIl0mJihkKz1cIndpZmkgb3BlcmF0b3I6IFwiK2JbXCJ3aWZpX2FjY2VzczpvcGVyYXRvclwiXStcIjxici8+XCIpO2JbXCJ3aWZpX2FjY2Vzczp0ZWNobm9sb2d5XCJdJiYoZCs9XCJ3aWZpIHRlY2hub2xvZ3k6IFwiK2JbXCJ3aWZpX2FjY2Vzczp0ZWNobm9sb2d5XCJdK1wiPGJyLz5cIik7YltcIndpZmlfYWNjZXNzOnNzaWRcIl0mJihkKz1cIndpZmkgc3NpZDogXCIrYltcIndpZmlfYWNjZXNzOnNzaWRcIl0rXCI8YnIvPlwiKTtcIlwiIT1kJiZcbiAgICAoYys9J2ludGVybmV0IGFjY2VzcyBhdmFpbGFibGU8YnIvPjxkaXYgY2xhc3M9XCJjNGdfc2hvcF9pbnRlcm5ldF9hY2Nlc3NcIj4nK2QrXCI8L2Rpdj48YnIvPlwiKTtiLndoZWVsY2hhaXImJihjKz1cIndoZWVsY2hhaXI6IFwiK3RyYW5zbGF0ZShiLndoZWVsY2hhaXIpK1wiPGJyLz5cIik7YltcIndoZWVsY2hhaXI6ZGVzY3JpcHRpb25cIl0mJihjKz1cImRlc2NyaXB0aW9uOiBcIitiW1wid2hlZWxjaGFpcjpkZXNjcmlwdGlvblwiXStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOmVudHJhbmNlX3dpZHRoXCJdJiYoYys9XCJlbnRyYW5jZSB3aWR0aCAoY20pOiBcIitiW1wid2hlZWxjaGFpcjplbnRyYW5jZV93aWR0aFwiXStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOnN0ZXBfaGVpZ2h0XCJdJiYoYys9XCJzdGVwIGhlaWdodCAoY20pOiBcIitiW1wid2hlZWxjaGFpcjpzdGVwX2hlaWdodFwiXStcIjxici8+XCIpO2JbXCJ3aGVlbGNoYWlyOnJvb21zXCJdJiYoYys9XCJyb29tczogXCIrYltcIndoZWVsY2hhaXI6cm9vbXNcIl0rXCI8YnIvPlwiKTtcbiAgICBiW1wid2hlZWxjaGFpcjpwbGFjZXNcIl0mJihjKz1cInBsYWNlczogXCIrYltcIndoZWVsY2hhaXI6cGxhY2VzXCJdK1wiPGJyLz5cIik7YltcImNlbnQ6cGxhY2VzXCJdJiYoYys9XCJwbGFjZXM6IFwiK2JbXCJ3aGVlbGNoYWlyOnBsYWNlc1wiXStcIjxici8+XCIpO2JbXCJyYW1wOndoZWVsY2hhaXJcIl0mJihjKz1cInJhbXA6IFwiK2JbXCJyYW1wOndoZWVsY2hhaXJcIl0rXCI8YnIvPlwiKTtiW1wiY2FwYWNpdHk6ZGlzYWJsZWRcIl0mJihjKz1cImNhcGFjaXR5IHBhcmtpbmc6IFwiK3RyYW5zbGF0ZShiW1wiY2FwYWNpdHk6ZGlzYWJsZWRcIl0pK1wiPGJyLz5cIik7YltcInRvaWxldHM6d2hlZWxjaGFpclwiXSYmKGMrPVwidG9pbGV0czogXCIrdHJhbnNsYXRlKGJbXCJ0b2lsZXRzOndoZWVsY2hhaXJcIl0pK1wiPGJyLz5cIik7Yi5jZW50cmFsa2V5JiYoYys9XCJjZW50cmFsa2V5OiBcIitiLmNlbnRyYWxrZXkrXCI8YnIvPlwiKTtiLm5vdGUmJihjKz1iLm5vdGUrXCI8YnIvPlwiKTtiLmRlc2NyaXB0aW9uJiYoYys9Yi5kZXNjcmlwdGlvbitcIjxici8+XCIpO1xuICAgIGIub3BlcmF0b3ImJihjKz1cIm9wZXJhdG9yOiBcIitiLm9wZXJhdG9yK1wiPGJyLz5cIik7Yi5yZWYmJihjKz1cInJlZmVyZW5jZTogXCIrYi5yZWYrXCI8YnIvPlwiKTtcInllc1wiPT1iLmxpdCYmKGMrPVwiVGhpcyBvYmplY3QgaXMgaWxsdWltYW50ZWQuPGJyLz5cIik7Yi5zaG9wJiYoZD1cIlwiLGIuYnJhbmQmJihkKz1cImJyYW5kOiBcIitiLmJyYW5kK1wiPGJyLz5cIiksYi5zZWxscyYmKGQrPVwic2VsbHM6IFwiK2Iuc2VsbHMrXCI8YnIvPlwiKSxiLm9yaWdpbiYmKGQrPVwic291cmNlIG1hcmtldDogXCIrYi5vcmlnaW4rXCI8YnIvPlwiKSxcInllc1wiPT1iLndob2xlc2FsZSYmKGQrPVwiZGlzdHJpYnV0b3I6IHllczxici8+XCIpLFwiXCIhPWQmJihjKz0nZnVydGhlciBwYXJ0aWN1bGFyczogPGJyLz48ZGl2IGNsYXNzPVwiYzRnX3Nob3BfdGV4dFwiPicrZCtcIjwvZGl2Pjxici8+XCIpKTthJiYoZD1hLHRyaW0oZCksZD1kLnJlcGxhY2UoL1xcLi8sXCIvXCIpLGM9YytcIjxici8+XCIrKCdPU006ICAgIDxhIGhyZWY9XCJodHRwOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnLycrXG4gICAgICAgIGQrJ1wiIHRhcmdldD1cIl9ibGFua1wiPk9wZW5TdHJlZXRNYXAgbGluazwvYT48YnIvPicpKTtyZXR1cm4gYz0nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF9mb290ZXJcIj4nK2MrXCI8L2Rpdj5cIn1cbmV4cG9ydCBmdW5jdGlvbiBmbkdldFRyYW5zbGF0ZV9UeXBlKGIpe3ZhciBhPVwiXCI7aWYoXCJkb2N0b3JzXCI9PWIuYW1lbml0eXx8XCJkb2N0b3JcIj09Yi5oZWFsdGhjYXJlKWErPVwiZG9jdG9yPGJyLz5cIjtpZihcImhvc3BpdGFsXCI9PWIuYW1lbml0eXx8XCJjbGluaWNcIj09Yi5hbWVuaXR5fHxcImhvc3BpdGFsXCI9PWIuaGVhbHRoY2FyZXx8XCJjbGluaWNcIj09Yi5oZWFsdGhjYXJlKWE9XCJ5ZXNcIj09Yi5lbWVyZ2VuY3k/YStcImhvc3BpdGFsIHdpdGggZW1lcmdlbmN5IGZhY2lsaXRpZXM8YnIvPlwiOmErXCJob3NwaXRhbDxici8+XCI7XCJkZW50aXN0XCI9PWIuYW1lbml0eSYmKGErPVwiZGVudGlzdDxici8+XCIpO2lmKFwicGhhcm1hY3lcIj09Yi5hbWVuaXR5fHxcInBoYXJtYWN5XCI9PWJbXCJoZWFsdGhfZmFjaWxpdHk6dHlwZVwiXSlhKz1cInBoYXJtYWN5PGJyLz5cIjtpZihcInBoeXNpb3RoZXJhcGlzdFwiPT1iLmhlYWx0aGNhcmV8fFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbGl0eTpwaHlzaW90aGVyYXB5XCJdKWErPVwicGh5c2lvdGhlcmFwaXN0PGJyLz5cIjtcbiAgICBpZihcIm9jY3VwYXRpb25hbF90aGVyYXBpc3RcIj09Yi5oZWFsdGhjYXJlfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6b2NjdXBhdGlvbmFsX3RoZXJhcHlcIl18fFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om9jY3VwYXRpb25hbF90aGVyYXB5XCJdKWErPVwib2NjdXBhdGlvbmFsX3RoZXJhcGlzdDxici8+XCI7aWYoXCJwc3ljaG90aGVyYXBpc3RcIj09Yi5oZWFsdGhjYXJlfHxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWxpdHk6cHN5Y2hvdGhlcmFweVwiXSlhKz1cInBzeWNob3RoZXJhcGlzdDxici8+XCI7XCJhbHRlcm5hdGl2ZVwiPT1iLmhlYWx0aGNhcmUmJihhKz1cImFsdGVybmF0aXZlPGJyLz5cIik7XCJtaWR3aWZlXCI9PWIuaGVhbHRoY2FyZSYmKGErPVwibWlkd2lmZTxici8+XCIpO2lmKFwic3BlZWNoX3RoZXJhcGlzdFwiPT1iLmhlYWx0aGNhcmV8fFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbGl0eTpzcGVlY2hfdGhlcmFweVwiXSlhKz1cInNwZWVjaF90aGVyYXBpc3Q8YnIvPlwiO1wieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbGl0eTptdXNpY190aGVyYXB5XCJdJiZcbiAgICAoYSs9XCJtdXNpY190aGVyYXB5PGJyLz5cIik7XCJ2ZXRlcmluYXJ5XCI9PWIuYW1lbml0eSYmKGErPVwidmV0ZXJpbmFyeTxici8+XCIpO1wiZmlyZV9zdGF0aW9uXCI9PWIuYW1lbml0eSYmKGErPVwiZmlyZSBzdGF0aW9uPGJyLz5cIik7XCJmaXJlX2V4dGluZ3Vpc2hlclwiPT1iLmVtZXJnZW5jeSYmKGErPVwiZmlyZSBleHRpbmd1aXNoZXI8YnIvPlwiKTtcImFlZFwiPT1iLmVtZXJnZW5jeSYmKGErPVwiYWVkPGJyLz5cIik7XCJkZWZpYnJpbGxhdG9yXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJkZWZpYnJpbGxhdG9yPGJyLz5cIik7XCJwaG9uZVwiPT1iLmVtZXJnZW5jeSYmKGErPVwiY2FsbCBib3g8YnIvPlwiKTtcInBvbGljZVwiPT1iLmFtZW5pdHkmJihhKz1cInBvbGljZTxici8+XCIpO1wiYW1idWxhbmNlX3N0YXRpb25cIj09Yi5lbWVyZ2VuY3kmJihhKz1cImFtYnVsYW5jZSBzdGF0aW9uPGJyLz5cIik7XCJ0ZWNobmljYWxcIj09Yi5lbWVyZ2VuY3lfc2VydmljZSYmKGErPVwidGVjaG5pY2FsPGJyLz5cIik7XCJ3YXRlclwiPT1iLmVtZXJnZW5jeV9zZXJ2aWNlJiZcbiAgICAoYSs9XCJ3YXRlcjxici8+XCIpO1wiYmF5d2F0Y2hcIj09Yi53YXRlcndheSYmKGErPVwiYmF5d2F0Y2g8YnIvPlwiKTtcImFpclwiPT1iLmVtZXJnZW5jeV9zZXJ2aWNlJiYoYSs9XCJyZXNjdWUgaGVsaWNvcHRlcjxici8+XCIpO1wiZW1lcmdlbmN5X2FjY2Vzc19wb2ludFwiPT1iLmhpZ2h3YXkmJihhKz1cImVtZXJnZW5jeSBhY2Nlc3MgcG9pbnQ8YnIvPlwiKTtpZihcImxpZmVib2F0X3N0YXRpb25cIj09Yi5hbWVuaXR5fHxcImxpZmVib2F0X3N0YXRpb25cIj09Yi5lbWVyZ2VuY3kpYSs9XCJsaWZlYm9hdCBzdGF0aW9uPGJyLz5cIjtcImxpZmVfcmluZ1wiPT1iLmVtZXJnZW5jeSYmKGErPVwibGlmZSByaW5nPGJyLz5cIik7XCJzaXJlblwiPT1iLmVtZXJnZW5jeSYmKGErPVwic2lyZW48YnIvPlwiKTtcImxpZmVfcmluZ1wiPT1iLmFtZW5pdHkmJihhKz1cImxpZmUgcmluZzxici8+XCIpO1wicmVzY3VlX3N0YXRpb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJyZXNjdWUgc3RhdGlvbjxici8+XCIpO1wiZmlyZV9oeWRyYW50XCI9PWIuZW1lcmdlbmN5JiZcbiAgICAoXCJ1bmRlcmdyb3VuZFwiPT1iW1wiZmlyZV9oeWRyYW50OnR5cGVcIl0/YSs9XCJ1bmRlcmdyb3VuZCBoeWRyYW50PGJyLz5cIjpcInBpbGxhclwiPT1iW1wiZmlyZV9oeWRyYW50OnR5cGVcIl0/YSs9XCJwaWxsYXIgaHlkcmFudDxici8+XCI6XCJ3YWxsXCI9PWJbXCJmaXJlX2h5ZHJhbnQ6dHlwZVwiXT9hKz1cIndhbGwgaHlkcmFudDxici8+XCI6XCJwb25kXCI9PWJbXCJmaXJlX2h5ZHJhbnQ6dHlwZVwiXSYmKGErPVwic3VjdGlvbiBwb2ludDxici8+XCIpKTtcInN1Y3Rpb25fcG9pbnRcIj09Yi5lbWVyZ2VuY3kmJihhKz1cInN1Y3Rpb24gcG9pbnQ8YnIvPlwiKTtcImZpcmVfd2F0ZXJfcG9uZFwiPT1iLmVtZXJnZW5jeSYmKGErPVwiZmlyZSBwcm90ZWN0aW9uIHBvbmQ8YnIvPlwiKTtcIm1vdW50YWluXCI9PWIuZW1lcmdlbmN5X3NlcnZpY2UmJihhKz1cIm1vdW50YWluIHJlc2N1ZSBzZXJ2aWNlPGJyLz5cIik7XCJ3YXRlcl90YW5rXCI9PWIuZW1lcmdlbmN5JiYoYSs9XCJmaXJlIHdhdGVyIHRhbms8YnIvPlwiKTtcImNvbnRhaW5lclwiPT1iLnJlY3ljbGluZ190eXBlJiZcbiAgICAoYSs9XCJSZWN5Y2xpbmcgY29udGFpbmVyPGJyLz5cIik7XCJyZWN5Y2xpbmdcIj09Yi5hbWVuaXR5JiZcInllc1wiPT1iW1wicmVjeWNsaW5nOmV4Y3JlbWVudFwiXXx8XCJwdW1wLW91dFwiPT1iW1wic2VhbWFyazpzbWFsbF9jcmFmdF9mYWNpbGl0eTpjYXRlZ29yeVwiXT9hKz1cInN1Y3Rpb24gc3RhdGlvbjxici8+XCI6XCJyZWN5Y2xpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCIgYnV5YmFjayBjZW50cmU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpwZXNjZXRhcmlhblwiXT9hKz1cInBlc2NldGFyaWFuIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnBlc2NldGFyaWFuXCJdJiYoYSs9XCJqdXN0IHBlc2NldGFyaWFuPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6dmVnZXRhcmlhblwiXT9hKz1cInZlZ2V0YXJpYW4gdm9yaGFuZGVuPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6dmVnZXRhcmlhblwiXSYmKGErPVwianVzdCB2ZWdldGFyaWFuPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6bGFjdG9fdmVnZXRhcmlhblwiXT9hKz1cImxhY3RvX3ZlZ2V0YXJpYW4gYXZhaWxhYmxlPGJyLz5cIjpcbiAgICAgICAgXCJvbmx5XCI9PWJbXCJkaWV0OmxhY3RvX3ZlZ2V0YXJpYW5cIl0mJihhKz1cImp1c3QgbGFjdG8gdmVnZXRhcmlhbjxici8+XCIpO1wieWVzXCI9PWJbXCJkaWV0Om92b192ZWdldGFyaWFuXCJdP2ErPVwib3ZvIHZlZ2V0YXJpYW4gYXZhaWxhYmxlPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6b3ZvX3ZlZ2V0YXJpYW5cIl0mJihhKz1cImp1c3Qgb3ZvX3ZlZ2V0YXJpYW48YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDp2ZWdhblwiXT9hKz1cInZlZ2FuIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnZlZ2FuXCJdJiYoYSs9XCJqdXN0IHZlZ2FuPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6ZnJ1aXRhcmlhblwiXT9hKz1cImZydWl0YXJpYW4gYXZhaWxhYmxlPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6ZnJ1aXRhcmlhblwiXSYmKGErPVwiaHVzdCBmcnVpdGFyaWFuPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6cmF3XCJdP2ErPVwicmF3IGF2YWlsYWliZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OnJhd1wiXSYmKGErPVwianVzdCByYXc8YnIvPlwiKTtcbiAgICBcInllc1wiPT1iW1wiZGlldDpnbHV0ZW5fZnJlZVwiXT9hKz1cImdsdXRlbiBmcmVlIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmdsdXRlbl9mcmVlXCJdJiYoYSs9XCJqdXN0IGdsdXRlbiBmcmVlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6ZGFpcnlfZnJlZVwiXT9hKz1cImRhaXJ5IGZyZWUgYXZhaWxhYmxlPGJyLz5cIjpcIm9ubHlcIj09YltcImRpZXQ6ZGFpcnlfZnJlZVwiXSYmKGErPVwianVzdCBkYWlyeSBmcmVlPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6bGFjdG9zZV9mcmVlXCJdP2ErPVwibGFjdG9zZSBmcmVlIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmxhY3Rvc2VfZnJlZVwiXSYmKGErPVwianVzdCBsYWN0b3NlIGZyZWU8YnIvPlwiKTtcInllc1wiPT1iW1wiZGlldDpoYWxhbFwiXT9hKz1cImhhbGFsIGF2YWlsYWJsZTxici8+XCI6XCJvbmx5XCI9PWJbXCJkaWV0OmhhbGFsXCJdJiYoYSs9XCJqdXN0IGhhbGFsPGJyLz5cIik7XCJ5ZXNcIj09YltcImRpZXQ6a29zaGVyXCJdP2ErPVwia29zaGVyIGF2YWlsYWJsZTxici8+XCI6XG4gICAgICAgIFwib25seVwiPT1iW1wiZGlldDprb3NoZXJcIl0mJihhKz1cImp1c3Qga29zaGVyPGJyLz5cIik7XCJwdWJcIj09Yi5hbWVuaXR5JiYoYSs9XCJwdWI8YnIvPlwiKTtcImJhclwiPT1iLmFtZW5pdHkmJihhKz1cImJhcjxici8+XCIpO1wieWVzXCI9PWIuZnJvemVuX3lvZ3VydCYmKGErPVwiZnJvemVuIHlvZ3VydDxici8+XCIpO1wieWVzXCI9PWIuc2x1c2hfaWNlJiYoYSs9XCJzbHVzaCBpY2U8YnIvPlwiKTtcInllc1wiPT1iLmNha2UmJihhKz1cImNha2U8YnIvPlwiKTtcInllc1wiPT1iLmNvZmZlZSYmKGErPVwiY29mZmVlPGJyLz5cIik7XCJ5ZXNcIj09Yi5kcmlua3MmJihhKz1cImRyaW5rczxici8+XCIpO1wiYmllcmdhcnRlblwiPT1iLmFtZW5pdHkmJihhKz1cImJpZXJnYXJ0ZW48YnIvPlwiKTtcInJlc3RhdXJhbnRcIj09Yi5hbWVuaXR5JiYoYSs9XCJyZXN0YXVyYW50PGJyLz5cIik7XCJmYXN0X2Zvb2RcIj09Yi5hbWVuaXR5JiYoYSs9XCJmYXN0IGZvb2Q8YnIvPlwiKTtpZigoXCJjYWZlXCI9PWIuYW1lbml0eXx8XCJjb2ZmZWVfc2hvcFwiPT1iLmFtZW5pdHkpJiZcbiAgICAgICAgXCJpY2VfY3JlYW1cIiE9Yi5jdWlzaW5lKWErPVwiY2FmZTxici8+XCI7aWYoXCJjYWZlXCI9PWIuYW1lbml0eSYmXCJpY2VfY3JlYW1cIj09Yi5jdWlzaW5lfHxcImljZV9jcmVhbVwiPT1iLmFtZW5pdHkpYSs9XCJpY2UgY3JlYW08YnIvPlwiO1wiYWxwaW5lX2h1dFwiPT1iLnRvdXJpc20mJihhKz1cImFscGluZSBodXQ8YnIvPlwiKTtcImFxdWFyaXVtXCI9PWIudG91cmlzbSYmKGErPVwiYXF1YXJpdW08YnIvPlwiKTtcImFwYXJ0bWVudFwiPT1iLnRvdXJpc20mJihhKz1cImFwYXJ0bWVudDxici8+XCIpO1wiYXR0cmFjdGlvblwiPT1iLnRvdXJpc20mJihhKz1cImF0dHJhY3Rpb248YnIvPlwiKTtcImFydHdvcmtcIj09Yi50b3VyaXNtJiYoYSs9XCJhcnR3b3JrPGJyLz5cIik7XCJjYW1wX3NpdGVcIj09Yi50b3VyaXNtJiYoYSs9XCJjYW1wIHNpdGU8YnIvPlwiKTtcImNhcmF2YW5fc2l0ZVwiPT1iLnRvdXJpc20mJihhKz1cImNhcmF2YW4gc2l0ZTxici8+XCIpO1wiY2hhbGV0XCI9PWIudG91cmlzbSYmKGErPVwiY2hhbGV0PGJyLz5cIik7XCJnYWxsZXJ5XCI9PVxuICAgIGIudG91cmlzbSYmKGErPVwiZ2FsbGVyeTxici8+XCIpO1wiZ3Vlc3RfaG91c2VcIj09Yi50b3VyaXNtJiYoYSs9XCJndWVzdCBob3VzZTxici8+XCIpO1wiaG9zdGVsXCI9PWIudG91cmlzbSYmKGErPVwiaG9zdGVsPGJyLz5cIik7XCJob3RlbFwiPT1iLnRvdXJpc20mJihhKz1cImhvdGVsPGJyLz5cIik7XCJtb3RlbFwiPT1iLnRvdXJpc20mJihhKz1cIm1vdGVsPGJyLz5cIik7XCJtdXNldW1cIj09Yi50b3VyaXNtJiYoYSs9XCJtdXNldW08YnIvPlwiKTtcInBpY25pY19zaXRlXCI9PWIudG91cmlzbSYmKGErPVwicGljbmljIHNpdGU8YnIvPlwiKTtcInRoZW1lX3BhcmtcIj09Yi50b3VyaXNtJiYoYSs9XCJ0aGVtZSBwYXJrPGJyLz5cIik7XCJ2aWV3cG9pbnRcIj09Yi50b3VyaXNtJiYoYSs9XCJ2aWV3cG9pbnQ8YnIvPlwiKTtcIndpbGRlcm5lc3NfaHV0XCI9PWIudG91cmlzbSYmKGErPVwid2lsZGVybmVzc19odXQ8YnIvPlwiKTtcIndpbmVfY2VsbGFyXCI9PWIudG91cmlzbSYmKGErPVwid2luZSBjZWxsYXI8YnIvPlwiKTtcInpvb1wiPT1iLnRvdXJpc20mJlxuICAgIChhKz1cInpvbzxici8+XCIsXCJlbmNsb3N1cmVcIj09Yi56b28mJihhKz1cImVuY2xvc3VyZTxici8+XCIpLFwicGV0dGluZ196b29cIj09Yi56b28mJihhKz1cInBldHRpbmcgem9vPGJyLz5cIiksXCJmYWxjb25yeVwiPT1iLnpvbyYmKGErPVwiZmFsY29ucnk8YnIvPlwiKSk7XCJ0cmFpbF9yaWRpbmdfc3RhdGlvblwiPT1iLnRvdXJpc20mJihhKz1cInRyYWlsIHJpZGluZyBzdGF0aW9uPGJyLz5cIik7XCJmaXNoaW5nXCI9PWIuY2x1YiYmKGErPVwiZmlzaGluZyBjbHViPGJyLz5cIik7XCJzcG9ydFwiPT1iLmNsdWImJlwiZmlzaGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJmaXNoaW5nIGNsdWI8YnIvPlwiKTtcImFtYXRldXJfcmFkaW9cIj09Yi5jbHViJiYoYSs9XCJhbWF0ZXVyIHJhZGlvIGNsdWI8YnIvPlwiKTtcImFydFwiPT1iLmNsdWImJihhKz1cImFydCBjbHViPGJyLz5cIik7XCJhc3Ryb25vbXlcIj09Yi5jbHViJiYoYSs9XCJhc3Ryb25vbXkgY2x1Yjxici8+XCIpO1wiYXV0b21vYmlsZVwiPT1iLmNsdWImJihhKz1cImF1dG9tb2JpbGUgY2x1Yjxici8+XCIpO1xuICAgIFwiYm9hcmRfZ2FtZXNcIj09Yi5jbHViJiYoYSs9XCJib2FyZCBnYW1lcyBjbHViPGJyLz5cIik7XCJjYXJkX2dhbWVzXCI9PWIuY2x1YiYmKGErPVwiY2FyZCBnYW1lcyBjbHViPGJyLz5cIik7XCJjaGFyaXR5XCI9PWIuY2x1YiYmKGErPVwiY2hhcml0eSBjbHViPGJyLz5cIik7XCJjaGVzc1wiPT1iLmNsdWImJihhKz1cImNoZXNzIGNsdWI8YnIvPlwiKTtcImNpbmVtYVwiPT1iLmNsdWImJihhKz1cImNpbmVtYSBjbHViPGJyLz5cIik7XCJjb29raW5nXCI9PWIuY2x1YiYmKGErPVwiY29va2luZyBjbHViPGJyLz5cIik7XCJjdWx0dXJlXCI9PWIuY2x1YiYmKGErPVwiY3VsdHVyZSBjbHViPGJyLz5cIik7XCJkb2l0eW91cnNlbGZcIj09Yi5jbHViJiYoYSs9XCJkb2l0eW91cnNlbGYgY2x1Yjxici8+XCIpO1wiZXF1ZXN0cmlhblwiPT1iLmNsdWImJihhKz1cImVxdWVzdHJpYW4gY2x1Yjxici8+XCIpO1wiZXRobmljXCI9PWIuY2x1YiYmKGErPVwiZXRobmljIGNsdWI8YnIvPlwiKTtcImZhblwiPT1iLmNsdWImJihhKz1cImZhbiBjbHViPGJyLz5cIik7XCJmcmVlbWFzb25yeVwiPT1cbiAgICBiLmNsdWImJihhKz1cImZyZWVtYXNvbnJ5IGNsdWI8YnIvPlwiKTtcImdhbWVcIj09Yi5jbHViJiYoYSs9XCJnYW1lIGNsdWI8YnIvPlwiKTtcImhpc3RvcnlcIj09Yi5jbHViJiYoYSs9XCJoaXN0b3J5IGNsdWI8YnIvPlwiKTtcImh1bnRpbmdcIj09Yi5jbHViJiYoYSs9XCJodW50aW5nIGNsdWI8YnIvPlwiKTtcImxpbnV4XCI9PWIuY2x1YiYmKGErPVwibGludXggY2x1Yjxici8+XCIpO1wibW90b3JjeWNsZVwiPT1iLmNsdWImJihhKz1cIm1vdG9yY3ljbGUgY2x1Yjxici8+XCIpO1wibXVzaWNcIj09Yi5jbHViJiYoYSs9XCJtdXNpYyBjbHViPGJyLz5cIik7XCJuYXR1cmVcIj09Yi5jbHViJiYoYSs9XCJuYXR1cmUgY2x1Yjxici8+XCIpO1wibnVkaXNtXCI9PWIuY2x1YiYmKGErPVwibnVkaXNtIGNsdWI8YnIvPlwiKTtcInBob3RvZ3JhcGh5XCI9PWIuY2x1YiYmKGErPVwicGhvdG9ncmFwaHkgY2x1Yjxici8+XCIpO1wicG9saXRpY3NcIj09Yi5jbHViJiYoYSs9XCJwb2xpdGljcyBjbHViPGJyLz5cIik7XCJyZWxpZ2lvblwiPT1iLmNsdWImJihhKz1cInJlbGlnaW9uIGNsdWI8YnIvPlwiKTtcbiAgICBcInNjb3V0XCI9PWIuY2x1YiYmKGErPVwic2NvdXQgY2x1Yjxici8+XCIpO1wic21va2VcIj09Yi5jbHViJiYoYSs9XCJzbW9rZSBjbHViPGJyLz5cIik7XCJzcG9ydFwiPT1iLmNsdWImJihhKz1cInNwb3J0IGNsdWI8YnIvPlwiKTtcInRoZWF0cmVcIj09Yi5jbHViJiYoYSs9XCJ0aGVhdHJlIGNsdWI8YnIvPlwiKTtcInZldGVyYW5zXCI9PWIuY2x1YiYmKGErPVwidmV0ZXJhbnMgY2x1Yjxici8+XCIpO1wiYW11c2VtZW50X2FyY2FkZVwiPT1iLmxlaXN1cmUmJihhKz1cInBlbm55IGFyY2FkZSAvIGdhbWJsaW5nIGhhbGw8YnIvPlwiKTtcImJlYWNoX3Jlc29ydFwiPT1iLmxlaXN1cmUmJihhKz1cImJlYWNoIHJlc29ydDxici8+XCIpO1wiYmlyZF9oaWRlXCI9PWIubGVpc3VyZSYmKGErPVwiYmlyZCBoaWRlPGJyLz5cIik7XCJjb21tb25cIj09Yi5sZWlzdXJlJiYoYSs9XCJjb21tb248YnIvPlwiKTtcImNsdWJcIj09Yi5sZWlzdXJlJiYoYSs9XCJjbHViPGJyLz5cIik7XCJkYW5jZVwiPT1iLmxlaXN1cmUmJihhKz1cImRhbmNlPGJyLz5cIik7XCJkb2dfcGFya1wiPT1cbiAgICBiLmxlaXN1cmUmJihhKz1cImRvZ19wYXJrPGJyLz5cIik7XCJmaXJlcGl0XCI9PWIubGVpc3VyZSYmKGErPVwiZmlyZXBpdDxici8+XCIpO1wiZmlzaGluZ1wiPT1iLmxlaXN1cmUmJihhKz1cImZpc2hpbmc8YnIvPlwiKTtcImdhcmRlblwiPT1iLmxlaXN1cmUmJihhKz1cImdhcmRlbjxici8+XCIpO1wiZ29sZl9jb3Vyc2VcIj09Yi5sZWlzdXJlJiYoYSs9XCJnb2xmIGNvdXJzZTxici8+XCIpO1wiaGFja2Vyc3BhY2VcIj09Yi5sZWlzdXJlJiYoYSs9XCJoYWNrZXJzcGFjZTxici8+XCIpO1wiaG9yc2VfcmlkaW5nXCI9PWIubGVpc3VyZSYmKGErPVwiaG9yc2UgcmlkaW5nPGJyLz5cIik7XCJpY2Vfcmlua1wiPT1iLmxlaXN1cmUmJihhKz1cImljZSByaW5rPGJyLz5cIik7XCJuYXR1cmVfcmVzZXJ2ZVwiPT1iLmxlaXN1cmUmJihhKz1cIm5hdHVyZSByZXNlcnZlPGJyLz5cIik7XCJwYXJrXCI9PWIubGVpc3VyZSYmKGErPVwicGFyazxici8+XCIpO1wibWluaWF0dXJlX2dvbGZcIj09Yi5sZWlzdXJlJiYoYSs9XCJtaW5pYXR1cmUgZ29sZjxici8+XCIpO1wicGl0Y2hcIj09XG4gICAgYi5sZWlzdXJlJiYoYSs9XCJwaXRjaDxici8+XCIpO1wicGl0Y2hcIj09Yi5sZWlzdXJlJiZcInllc1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJneW08YnIvPlwiKTtcInBsYXlncm91bmRcIj09Yi5sZWlzdXJlJiZcInllc1wiPT1iLmJ1aWxkaW5nP2ErPVwicGxheWdyb3VuZDxici8+XCI6XCJwbGF5Z3JvdW5kXCI9PWIubGVpc3VyZSYmKGErPVwicGxheWdyb3VuZDxici8+XCIpO1wic29jaWFsX2NsdWJcIj09Yi5sZWlzdXJlJiYoYSs9XCJzb2NpYWwgY2x1Yjxici8+XCIpO1wic3BhXCI9PWIubGVpc3VyZSYmKGErPVwic3BhPGJyLz5cIik7XCJzcG9ydHNfY2VudHJlXCI9PWIubGVpc3VyZSYmKGErPVwic3BvcnRzIGNlbnRyZTxici8+XCIpO1wiY2xpbWJpbmdfYWR2ZW50dXJlXCI9PWIuc3BvcnQmJihhKz1cImNsaW1iaW5nIGFkdmVudHVyZTxici8+XCIpO1wic3RhZGl1bVwiPT1iLmxlaXN1cmUmJihhKz1cInN0YWRpdW08YnIvPlwiKTtcInN3aW1taW5nX3Bvb2xcIj09Yi5sZWlzdXJlJiYoYSs9XCJzd2ltbWluZyBwb29sPGJyLz5cIik7XCJ0cmFja1wiPT1cbiAgICBiLmxlaXN1cmUmJihhKz1cInRyYWNrPGJyLz5cIik7XCJ3YXRlcl9wYXJrXCI9PWIubGVpc3VyZSYmKGErPVwid2F0ZXIgcGFyazxici8+XCIpO1wid2lsZGxpZmVfaGlkZVwiPT1iLmxlaXN1cmUmJihhKz1cIndpbGRsaWZlIGhpZGU8YnIvPlwiKTtcImFkdWx0X2dhbWluZ19jZW50cmVcIj09Yi5sZWlzdXJlJiYoYSs9XCJhZHVsdCBnYW1pbmdfY2VudHJlPGJyLz5cIik7XCJib3dsaW5nX2FsbGV5XCI9PWIubGVpc3VyZSYmXCIxMHBpblwiPT1iLnNwb3J0JiYoYSs9XCIxMHBpbiBib3dsaW5nX2FsbGV5PGJyLz5cIik7XCJib3dsaW5nX2FsbGV5XCI9PWIubGVpc3VyZSYmXCI5cGluXCI9PWIuc3BvcnQmJihhKz1cIjlwaW4gYm93bGluZ19hbGxleTxici8+XCIpO2lmKFwia2FydGluZ1wiPT1iLnNwb3J0fHxcIm1vdG9yXCI9PWIuc3BvcnQpYSs9XCJrYXJ0aW5nPGJyLz5cIjtpZihcImRhcnRzXCI9PWIuc3BvcnR8fFwiZGFydFwiPT1iLnNwb3J0KWErPVwiRGFydHM8YnIvPlwiO2lmKGJbXCJwaXN0ZTp0eXBlXCJdKXN3aXRjaChiW1wicGlzdGU6dHlwZVwiXSl7Y2FzZSBcInNraXRvdXJcIjphKz1cbiAgICAgICAgXCJza2l0b3VyPGJyLz5cIjticmVhaztjYXNlIFwiZG93bmhpbGxcIjphKz1cImRvd25oaWxsPGJyLz5cIjticmVhaztjYXNlIFwic2xlZFwiOmErPVwic2xlZDxici8+XCI7YnJlYWs7Y2FzZSBcIm5vcmRpY1wiOmErPVwibm9yZGljPGJyLz5cIjticmVhaztjYXNlIFwiaGlrZVwiOmErPVwiaGlrZTxici8+XCI7YnJlYWs7Y2FzZSBcInNub3dfcGFya1wiOmErPVwic25vdyBwYXJrPGJyLz5cIn1pZihiLnNwb3J0KXN3aXRjaChiLnNwb3J0KXtjYXNlIFwic3VyZmluZ1wiOmErPVwic3VyZmluZzxici8+XCI7YnJlYWs7Y2FzZSBcImtpdGVzdXJmaW5nXCI6YSs9XCJraXRlc3VyZmluZzxici8+XCI7YnJlYWs7Y2FzZSBcIndhdGVyX3NraVwiOmErPVwid2F0ZXIgc2tpPGJyLz5cIn1pZihiLmFlcmlhbHdheSlzd2l0Y2goYi5hZXJpYWx3YXkpe2Nhc2UgXCJjYWJsZV9iYXJcIjphKz1cImNhYmxlIGJhcjxici8+XCI7YnJlYWs7Y2FzZSBcImdvbmRvbGFcIjphKz1cImdvbmRvbGE8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaGFpcl9saWZ0XCI6YSs9XCJjaGFpciBsaWZ0PGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcIm1peGVkX2xpZnRcIjphKz1cIm1peGVkIGxpZnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkcmFnX2xpZnRcIjphKz1cImRyYWcgbGlmdDxici8+XCI7YnJlYWs7Y2FzZSBcInQtYmFyXCI6YSs9XCJ0LWJhcjxici8+XCI7YnJlYWs7Y2FzZSBcInQtYmFyXCI6YSs9XCJ0LWJhcjxici8+XCI7YnJlYWs7Y2FzZSBcInBsYXR0ZXJcIjphKz1cInBsYXR0ZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyb3BlX3Rvd1wiOmErPVwicm9wZSB0b3c8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtYWdpY19jYXJwZXRcIjphKz1cIm1hZ2ljIGNhcnBldDxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVua25vd25cIn1cIm1vc3F1ZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJtb3NxdWU8YnIvPlwiKTtcInN5bmFnb2d1ZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJzeW5hZ29ndWU8YnIvPlwiKTtcInRlbXBsZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJ0ZW1wbGU8YnIvPlwiKTtcImFwYXJ0bWVudHNcIj09Yi5idWlsZGluZyYmKGErPVwiYXBhcnRtZW50czxici8+XCIpO1wiZmFybVwiPT1iLmJ1aWxkaW5nJiZcbiAgICAoYSs9XCJmYXJtPGJyLz5cIik7XCJob3RlbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJob3RlbDxici8+XCIpO1wiaG91c2VcIj09Yi5idWlsZGluZyYmKGErPVwiaG91c2U8YnIvPlwiKTtcImRldGFjaGVkXCI9PWIuYnVpbGRpbmcmJihhKz1cImRldGFjaGVkPGJyLz5cIik7XCJyZXNpZGVudGlhbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJyZXNpZGVudGlhbDxici8+XCIpO2lmKFwiZG9taXRvcnlcIj09Yi5idWlsZGluZ3x8XCJyZXNpZGVudGlhbCBwbHVzXCI9PWIuYnVpbGRpbmcpYSs9XCJkb21pdG9yeTxici8+XCI7XCJ0ZXJyYWNlXCI9PWIuYnVpbGRpbmcmJihhKz1cInRlcnJhY2U8YnIvPlwiKTtcImhvdXNlYm9hdFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJob3VzZWJvYXQ8YnIvPlwiKTtcImJ1bmdhbG93XCI9PWIuYnVpbGRpbmcmJihhKz1cImJ1bmdhbG93PGJyLz5cIik7XCJzdGF0aWNfY2FyYXZhblwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJzdGF0aWMgY2FyYXZhbjxici8+XCIpO1wiY29tbWVyY2lhbFwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJjb21tZXJjaWFsPGJyLz5cIik7XG4gICAgXCJyZXRhaWxcIj09Yi5idWlsZGluZyYmKGErPVwicmV0YWlsPGJyLz5cIik7XCJ3YXJlaG91c2VcIj09Yi5idWlsZGluZyYmKGErPVwid2FyZWhvdXNlPGJyLz5cIik7XCJiYWtlaG91c2VcIj09Yi5idWlsZGluZyYmKGErPVwiYmFrZWhvdXNlPGJyLz5cIik7XCJzaHJpbmVcIj09Yi5idWlsZGluZyYmKGErPVwic2hyaW5lPGJyLz5cIik7XCJjaXZpY1wiPT1iLmJ1aWxkaW5nJiYoYSs9XCJjaXZpYzxici8+XCIpO1wic3RhZGl1bVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJzdGFkaXVtPGJyLz5cIik7XCJ0cmFpbl9zdGF0aW9uXCI9PWIuYnVpbGRpbmcmJihhKz1cInRyYWluIHN0YXRpb248YnIvPlwiKTtcInVuaXZlcnNpdHlcIj09Yi5idWlsZGluZyYmKGErPVwidW5pdmVyc2l0eTxici8+XCIpO1wicHVibGljXCI9PWIuYnVpbGRpbmcmJihhKz1cInB1YmxpYzxici8+XCIpO1wiYnJpZGdlXCI9PWIuYnVpbGRpbmcmJihhKz1cImJyaWRnZTxici8+XCIpO1wiYnVua2VyXCI9PWIuYnVpbGRpbmcmJihhKz1cImJ1bmtlcjxici8+XCIpO1wiY2FiaW5cIj09Yi5idWlsZGluZyYmXG4gICAgKGErPVwiY2FiaW48YnIvPlwiKTtcImNvbnNlcnZhdG9yeVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJjb25zZXJ2YXRvcnk8YnIvPlwiKTtcImNvbnN0cnVjdGlvblwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJjb25zdHJ1Y3Rpb248YnIvPlwiKTtcImdhcmFnZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJnYXJhZ2U8YnIvPlwiKTtcImdhcmFnZXNcIj09Yi5idWlsZGluZyYmKGErPVwiZ2FyYWdlczxici8+XCIpO1wiZ3JlZW5ob3VzZVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJncmVlbmhvdXNlPGJyLz5cIik7XCJoYW5nYXJcIj09Yi5idWlsZGluZyYmKGErPVwiaGFuZ2FyPGJyLz5cIik7XCJodXRcIj09Yi5idWlsZGluZyYmKGErPVwiaHV0PGJyLz5cIik7XCJwYXZpbGxpb25cIj09Yi5idWlsZGluZyYmKGErPVwicGF2aWxsaW9uPGJyLz5cIik7XCJyb29mXCI9PWIuYnVpbGRpbmcmJihhKz1cInJvb2Y8YnIvPlwiKTtcInNoZWRcIj09Yi5idWlsZGluZyYmKGErPVwic2hlZDxici8+XCIpO1widHJhbnNmb3JtZXJfdG93ZXJcIj09Yi5idWlsZGluZyYmKGErPVwidHJhbnNmb3JtZXIgdG93ZXI8YnIvPlwiKTtcbiAgICBcInNlcnZpY2VcIj09Yi5idWlsZGluZyYmKGErPVwic2VydmljZTxici8+XCIpO1wia2lvc2tcIj09Yi5idWlsZGluZyYmKGErPVwia2lvc2s8YnIvPlwiKTtcImNhcnBvcnRcIj09Yi5idWlsZGluZyYmKGErPVwiY2FycG9ydDxici8+XCIpO1wicnVpbnNcIj09Yi5idWlsZGluZyYmKGErPVwicnVpbnM8YnIvPlwiKTtcImdhbWJsaW5nXCI9PWIuYW1lbml0eSYmKGErPVwicGVubnkgYXJjYWRlPGJyLz5cIik7XCJsaWJyYXJ5XCI9PWIuYW1lbml0eSYmKGErPVwibGlicmFyeTxici8+XCIpO1wiZm91bnRhaW5cIj09Yi5hbWVuaXR5JiYoYSs9XCJmb3VudGFpbjxici8+XCIpO1wiYXR0cmFjdGlvblwiPT1iLmFtZW5pdHkmJihhKz1cImF0dHJhY3Rpb248YnIvPlwiKTtpZihcInNvY2lhbF9jZW50cmVcIj09Yi5hbWVuaXR5fHxcImNsdWJcIj09Yi5hbWVuaXR5KWErPVwic29jaWFsIGNlbnRyZTxici8+XCI7XCJ0b3duaGFsbFwiPT1iLmFtZW5pdHkmJihhKz1cInRvd25oYWxsPGJyLz5cIik7XCJiZW5jaFwiPT1iLmFtZW5pdHkmJihhKz1cImJlbmNoPGJyLz5cIik7XG4gICAgaWYoXCJncmF2ZV95YXJkXCI9PWIuYW1lbml0eXx8XCJjZW1ldGVyeVwiPT1iLmxhbmR1c2UpYSs9XCJncmF2ZSB5YXJkPGJyLz5cIjtcInBvc3RfYm94XCI9PWIuYW1lbml0eSYmKGErPVwicG9zdCBib3g8YnIvPlwiKTtcInBvc3Rfb2ZmaWNlXCI9PWIuYW1lbml0eSYmKGErPVwicG9zdCBvZmZpY2U8YnIvPlwiKTtcInRlbGVwaG9uZVwiPT1iLmFtZW5pdHkmJihhKz1cInRlbGVwaG9uZTxici8+XCIpO1wiYXRtXCI9PWIuYW1lbml0eSYmKGErPVwiYXRtPGJyLz5cIik7XCJiYW5rXCI9PWIuYW1lbml0eSYmKGErPVwiYmFuazxici8+XCIpO1widG9pbGV0c1wiPT1iLmFtZW5pdHkmJlwieWVzXCI9PWIuZGlhcGVyP2ErPVwidG9pbGV0cyB3aXRoIGRpYXBlciBjaGFuZ2luZyB0YWJsZTxici8+XCI6XCJ0b2lsZXRzXCI9PWIuYW1lbml0eSYmKGErPVwidG9pbGV0czxici8+XCIpO1wic2Nob29sXCI9PWIuYW1lbml0eSYmXCIxXCI9PWJbXCJpc2NlZDpsZXZlbFwiXT9hKz1cInByaW1hcnkgc2Nob29sPGJyLz5cIjpcInNjaG9vbFwiPT1iLmFtZW5pdHkmJlwiMlwiPT1iW1wiaXNjZWQ6bGV2ZWxcIl0/XG4gICAgICAgIGErPVwic2Vjb25kYXJ5IHNjaG9vbDxici8+XCI6XCJzY2hvb2xcIj09Yi5hbWVuaXR5JiZcIjNcIj09YltcImlzY2VkOmxldmVsXCJdP2ErPVwic2Vjb25kYXJ5IHNjaG9vbHM8YnIvPlwiOlwic2Nob29sXCI9PWIuYW1lbml0eSYmKGErPVwic2Nob29sPGJyLz5cIik7XCJraW5kZXJnYXJ0ZW5cIj09Yi5hbWVuaXR5JiYoYSs9XCJraW5kZXJnYXJ0ZW48YnIvPlwiKTtcImludGVybmV0X2NhZmVcIj09Yi5hbWVuaXR5JiYoYSs9XCJpbnRlcm5ldCBjYWZlPGJyLz5cIik7XCJkYXljYXJlXCI9PWIuYW1lbml0eSYmKGErPVwiZGF5Y2FyZTxici8+XCIpO1wiY2hpbGRjYXJlXCI9PWIuYW1lbml0eSYmKGErPVwiY2hpbGRjYXJlPGJyLz5cIik7XCJ1bml2ZXJzaXR5XCI9PWIuYW1lbml0eSYmKGErPVwidW5pdmVyc2l0eTxici8+XCIpO1wiY29sbGVnZVwiPT1iLmFtZW5pdHkmJihhKz1cImNvbGxlZ2U8YnIvPlwiKTtcInNoZWx0ZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJzaGVsdGVyPGJyLz5cIik7XCJiYnFcIj09Yi5hbWVuaXR5JiYoYSs9XCJiYnE8YnIvPlwiKTtcIm5pZ2h0Y2x1YlwiPT1cbiAgICBiLmFtZW5pdHkmJihhKz1cIm5pZ2h0Y2x1Yjxici8+XCIpO1wiYmljeWNsZV9wYXJraW5nXCI9PWIuYW1lbml0eSYmKGErPVwiYmljeWNsZSBwYXJraW5nPGJyLz5cIik7XCJiaWN5Y2xlX3JlbnRhbFwiPT1iLmFtZW5pdHkmJihhKz1cImJpY3ljbGUgcmVudGFsPGJyLz5cIik7XCJib2F0X3NoYXJpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJib2F0IHNoYXJpbmc8YnIvPlwiKTtcImNhcl9zaGFyaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiY2FyIHNoYXJpbmc8YnIvPlwiKTtcImNpbmVtYVwiPT1iLmFtZW5pdHkmJihhKz1cImNpbmVtYTxici8+XCIpO1wic3dpbW1pbmdfcG9vbFwiPT1iLmFtZW5pdHkmJihhKz1cInN3aW1taW5nIHBvb2w8YnIvPlwiKTtpZihcImVtYmFzc3lcIj09Yi5hbWVuaXR5fHxcImVtYmFzc3lcIj09Yi5kaXBsb21hdGljKWErPVwiZW1iYXNzeTxici8+XCI7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmXCJjb25zdWxhdGVcIj09Yi5kaXBsb21hdGljJiYoYSs9XCJjb25zdWxhdGU8YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcbiAgICBcImNvbnN1bGF0ZV9nZW5lcmFsXCI9PWIuZGlwbG9tYXRpYyYmKGErPVwiY29uc3VsYXRlIGdlbmVyYWw8YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcImhvbm9yYXJ5X2NvbnN1bGF0ZVwiPT1iLmRpcGxvbWF0aWMmJihhKz1cImhvbm9yYXJ5IGNvbnN1bGF0ZTxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwicGVybWFuZW50X21pc3Npb25cIj09Yi5kaXBsb21hdGljJiYoYSs9XCJwZXJtYW5lbnQgbWlzc2lvbjxici8+XCIpO1wiZW1iYXNzeVwiPT1iLmFtZW5pdHkmJlwiZGVsZWdhdGlvblwiPT1iLmRpcGxvbWF0aWMmJihhKz1cImRlbGVnYXRpb248YnIvPlwiKTtcImVtYmFzc3lcIj09Yi5hbWVuaXR5JiZcImhpZ2hfY29tbWlzc2lvblwiPT1iLmRpcGxvbWF0aWMmJihhKz1cImhpZ2ggY29tbWlzc2lvbjxici8+XCIpO1wiQmFyZnVzc3BmYWRcIj09Yi5hbWVuaXR5JiYoYSs9XCJiYXJlZm9vZHBhdGg8YnIvPlwiKTtcImNhc2lub1wiPT1iLmFtZW5pdHkmJihhKz1cImNhc2lubzxici8+XCIpO1wic3BhXCI9PWIuYW1lbml0eSYmXG4gICAgKGErPVwic3BhPGJyLz5cIik7XCJzdGFibGVzXCI9PWIuYW1lbml0eSYmKGErPVwic3RhYmxlczxici8+XCIpO1wid2F0ZXJpbmdfcGxhY2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJ3YXRlcmluZyBwbGFjZTxici8+XCIpO1wieWVzXCI9PWIud2F0ZXJpbmdfcGxhY2UmJihhKz1cIndhdGVyaW5nIHBsYWNlPGJyLz5cIik7XCJ3YXRlcl9wb2ludFwiPT1iLmFtZW5pdHkmJihhKz1cIndhdGVyIHBvaW50PGJyLz5cIik7XCJ0YXhpXCI9PWIuYW1lbml0eSYmKGErPVwidGF4aTxici8+XCIpO1wiY2FyX3dhc2hcIj09Yi5hbWVuaXR5JiYoYSs9XCJjYXIgd2FzaDxici8+XCIpO1wiYnJvdGhlbFwiPT1iLmFtZW5pdHkmJihhKz1cImJyb3RoZWw8YnIvPlwiKTtcInN0cmlwY2x1YlwiPT1iLmFtZW5pdHkmJihhKz1cInN0cmlwY2x1Yjxici8+XCIpO1wic3dpbmdlcmNsdWJcIj09Yi5hbWVuaXR5JiYoYSs9XCJzd2luZ2VyY2x1Yjxici8+XCIpO1wicGxhbmV0YXJpdW1cIj09Yi5hbWVuaXR5JiYoYSs9XCJwbGFuZXRhcml1bTxici8+XCIpO1wiY291cnRob3VzZVwiPT1iLmFtZW5pdHkmJlxuICAgIChhKz1cImNvdXJ0IGhvdXNlPGJyLz5cIik7XCJjcmVtYXRvcml1bVwiPT1iLmFtZW5pdHkmJihhKz1cImNyZW1hdG9yaXVtPGJyLz5cIik7aWYoXCJjcnlwdFwiPT1iLmFtZW5pdHl8fFwiY3J5cHRcIj09Yi5idWlsZGluZylhKz1cImNyeXB0PGJyLz5cIjtcImh1bnRpbmdfc3RhbmRcIj09Yi5hbWVuaXR5JiYoYSs9XCJodW50aW5nIHN0YW5kPGJyLz5cIik7XCJwaG90b19ib290aFwiPT1iLmFtZW5pdHkmJihhKz1cInBob3RvIGJvb3RoPGJyLz5cIik7XCJwcmlzb25cIj09Yi5hbWVuaXR5JiYoYSs9XCJwcmlzb248YnIvPlwiKTtcInJhbmdlcl9zdGF0aW9uXCI9PWIuYW1lbml0eSYmKGErPVwicmFuZ2VyIHN0YXRpb248YnIvPlwiKTtcInJlZ2lzdGVyX29mZmljZVwiPT1iLmFtZW5pdHkmJihhKz1cInJlZ2lzdGVyIG9mZmljZTxici8+XCIpO1wibWFya2V0cGxhY2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJtYXJrZXRwbGFjZTxici8+XCIpO1wic29sYXJpdW1cIj09Yi5hbWVuaXR5JiYoYSs9XCJzb2xhcml1bTxici8+XCIpO1wic2F1bmFcIj09Yi5hbWVuaXR5JiZcbiAgICAoYSs9XCJzYXVuYTxici8+XCIpO1wic2hvd2VyXCI9PWIuYW1lbml0eSYmKGErPVwic2hvd2VyPGJyLz5cIik7aWYoXCJ3YXN0ZV9kaXNwb3NhbFwiPT1iLmFtZW5pdHkmJihhKz1cIndhc3RlIGRpc3Bvc2FsPGJyLz5cIixiLndhc3RlKSlzd2l0Y2goYSs9XCJUeXA6IFwiLGIud2FzdGUpe2Nhc2UgXCJ0cmFzaFwiOmErPVwiR2VuZXJhbDxici8+XCI7YnJlYWs7Y2FzZSBcIm9pbFwiOmErPVwiT2lsPGJyLz5cIjticmVhaztjYXNlIFwiZHJ1Z3NcIjphKz1cIlBoYXJtYWNldXRpY2FsPGJyLz5cIjticmVhaztjYXNlIFwib3JnYW5pY1wiOmErPVwiT3JnYW5pYzxici8+XCI7YnJlYWs7Y2FzZSBcInBsYXN0aWNcIjphKz1cIlBsYXN0aWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJydWJibGVcIjphKz1cIlJ1YmJsZTxici8+XCI7YnJlYWs7Y2FzZSBcImNpZ2FyZXR0ZXNcIjphKz1cIkNpZ2FyZXR0ZXM8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJHZW5lcmFsPGJyLz5cIn1pZihcIndhc3RlX2Jhc2tldFwiPT1iLmFtZW5pdHl8fFwiZG9nX2V4Y3JlbWVudFwiPT1iLndhc3RlKWErPVxuICAgICAgICBcImRvZyB3YXN0ZSBzdGF0aW9uPGJyLz5cIjtpZihcInNjb3V0X2NhbXBcIj09Yi5hbWVuaXR5fHxcInNjb3V0X2h1dFwiPT1iLmFtZW5pdHl8fFwic2NvdXRfaGFsbFwiPT1iLmFtZW5pdHkpYSs9XCJzY291dCBjYW1wPGJyLz5cIjtcImZlcnJ5X3Rlcm1pbmFsXCI9PWIuYW1lbml0eSYmKGErPVwiZmVycnkgdGVybWluYWw8YnIvPlwiKTtcImJ1cmVhdV9kZV9jaGFuZ2VcIj09Yi5hbWVuaXR5JiYoYSs9XCJidXJlYXUgZGUgY2hhbmdlPGJyLz5cIik7XCJ5b3V0aF9jbHViXCI9PWIuYW1lbml0eSYmKGErPVwieW91dGggY2x1Yjxici8+XCIpO1wiZmVzdGl2YWxfZ3JvdW5kc1wiPT1iLmFtZW5pdHkmJihhKz1cImZlc3RpdmFsIGdyb3VuZHM8YnIvPlwiKTtpZihcInllc1wiPT1iLm9wZW5maXJlfHxcInllc1wiPT1iLmZpcmVwbGFjZSlhKz1cImZpcmVwbGFjZTxici8+XCI7aWYoXCJ2ZW5kaW5nX21hY2hpbmVcIj09Yi5hbWVuaXR5KWlmKGIudmVuZGluZylzd2l0Y2goYi52ZW5kaW5nKXtjYXNlIFwiYWRtaXNzaW9uX3RpY2tldHNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBhZG1pc3Npb24gdGlja2V0czxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJhbmltYWxfZmVlZFwiOmErPVwidmVuZGluZyBtYWNoaW5lIGFuaW1hbCBmZWVkPGJyLz5cIjticmVhaztjYXNlIFwiYmljeWNsZV90dWJlXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgYmljeWNsZSB0dWJlPGJyLz5cIjticmVhaztjYXNlIFwiYm9va3NcIjphKz1cInZlbmRpbmcgbWFjaGluZSBib29rczxici8+XCI7YnJlYWs7Y2FzZSBcImNhbmRsZXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBjYW5kbGVzPGJyLz5cIjticmVhaztjYXNlIFwiY2lnYXJldHRlc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIGNpZ2FyZXR0ZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaGVtaXN0XCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgY2hlbWlzdDxici8+XCI7YnJlYWs7Y2FzZSBcImNvbmRvbXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBjb25kb21zPGJyLz5cIjticmVhaztjYXNlIFwiZHJpbmtzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgZHJpbmtzPGJyLz5cIjticmVhaztjYXNlIFwiZWxlY3Ryb25pY3NcIjphKz1cInZlbmRpbmcgbWFjaGluZSBlbGVjdHJvbmljczxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJlbG9uZ2F0ZWRfY29pblwiOmErPVwidmVuZGluZyBtYWNoaW5lIGVsb25nYXRlZF9jb2luPGJyLz5cIjticmVhaztjYXNlIFwiZXhjcmVtZW50X2JhZ3NcIjphKz1cInZlbmRpbmcgbWFjaGluZSBleGNyZW1lbnRfYmFnczxici8+XCI7YnJlYWs7Y2FzZSBcImZlbWluaW5lX2h5Z2llbmVcIjphKz1cInZlbmRpbmcgbWFjaGluZSBmZW1pbmluZV9oeWdpZW5lPGJyLz5cIjticmVhaztjYXNlIFwiZmlyc3RfYWlkXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgZmlyc3RfYWlkPGJyLz5cIjticmVhaztjYXNlIFwiZmlzaGluZ190YWNrbGVcIjphKz1cInZlbmRpbmcgbWFjaGluZSBmaXNoaW5nIHRhY2tsZTxici8+XCI7YnJlYWs7Y2FzZSBcImZpc2hpbmdfYmFpdFwiOmErPVwidmVuZGluZyBtYWNoaW5lIGZpc2hpbmcgYmFpdDxici8+XCI7YnJlYWs7Y2FzZSBcImZsb3dlcnNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBmbG93ZXJzPGJyLz5cIjticmVhaztjYXNlIFwiZm9vZFwiOmErPVwidmVuZGluZyBtYWNoaW5lIGZvb2Q8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwiaWNlX2N1YmVzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgaWNlIGN1YmVzPGJyLz5cIjticmVhaztjYXNlIFwiaWNlX2NyZWFtXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgaWNlIGNyZWFtPGJyLz5cIjticmVhaztjYXNlIFwiaW5rX2NhcnRyaWRnZXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBpbmsgY2FydHJpZGdlczxici8+XCI7YnJlYWs7Y2FzZSBcImxhdW5kcnlfZGV0ZXJnZW50XCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgbGF1bmRyeSBkZXRlcmdlbnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwdWJsaWNfdHJhbnNwb3J0X3RpY2tldHNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBwdWJsaWMgdHJhbnNwb3J0IHRpY2tldHM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJuZXdzcGFwZXJcIjphKz1cInZlbmRpbmcgbWFjaGluZSBuZXdzcGFwZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXJjZWxfcGlja3VwXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgcGFyY2VsIHBpY2t1cDxici8+XCI7YnJlYWs7Y2FzZSBcInBhcmNlbF9tYWlsX2luXCI6YSs9XG4gICAgICAgIFwiUGFja2VnZSBzdGF0aW9uPGJyLz5cIjticmVhaztjYXNlIFwicGFya2luZ190aWNrZXRzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgcGFya2luZyB0aWNrZXRzPGJyLz5cIjticmVhaztjYXNlIFwicGhvdG9zXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgcGhvdG9zPGJyLz5cIjticmVhaztjYXNlIFwic2V4X3RveXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSBzZXhfdG95czxici8+XCI7YnJlYWs7Y2FzZSBcIlNJTV9jYXJkc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIFNJTV9jYXJkczxici8+XCI7YnJlYWs7Y2FzZSBcInN0YW1wc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIHN0YW1wczxici8+XCI7YnJlYWs7Y2FzZSBcInN3ZWV0c1wiOmErPVwidmVuZGluZyBtYWNoaW5lIHN3ZWV0czxici8+XCI7YnJlYWs7Y2FzZSBcInN5cmluZ2VzXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgc3lyaW5nZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b2xsXCI6YSs9XCJ2ZW5kaW5nIG1hY2hpbmUgdG9sbDxici8+XCI7YnJlYWs7Y2FzZSBcInRveXNcIjphKz1cInZlbmRpbmcgbWFjaGluZSB0b3lzPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcInVtYnJlbGxhc1wiOmErPVwidmVuZGluZyBtYWNoaW5lIHVtYnJlbGxhczxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInZlbmRpbmcgbWFjaGluZTxici8+XCJ9ZWxzZSBhKz1cInZlbmRpbmcgbWFjaGluZTxici8+XCI7XCJhcnRzX2NlbnRyZVwiPT1iLmFtZW5pdHkmJihhKz1cImFydHMgY2VudHJlPGJyLz5cIik7XCJhcnR3b3JrXCI9PWIuYW1lbml0eSYmKGErPVwiYXJ0d29yazxici8+XCIpO1wibXVzZXVtXCI9PWIuYW1lbml0eSYmKGErPVwibXVzZXVtPGJyLz5cIik7XCJ0aGVhdHJlXCI9PWIuYW1lbml0eSYmKGErPVwidGhlYXRyZTxici8+XCIpO1wiY2F0aGVkcmFsXCI9PWIuYnVpbGRpbmcmJihhKz1cImNhdGhlZHJhbDxici8+XCIpO1wiY2h1cmNoXCI9PWIuYnVpbGRpbmcmJihhKz1cImNodXJjaDxici8+XCIpO1wiY2hhcGVsXCI9PWIuYnVpbGRpbmcmJihhKz1cImNoYXBlbDxici8+XCIpO1wicGxhY2Vfb2Zfd29yc2hpcFwiPT1iLmFtZW5pdHkmJihhKz1cInBsYWNlIG9mIHdvcnNoaXA8YnIvPlwiKTtcInZpbGxhZ2VcIj09XG4gICAgYi5hYmFuZG9uZWQmJihhKz1cImFiYW5kb25lZCB2aWxsYWdlPGJyLz5cIik7XCJ0aGVtZV9wYXJrXCI9PWJbXCJhYmFuZG9uZWQ6dG91cmlzbVwiXSYmKGErPVwiYWJhbmRvbmVkIHRoZW1lIHBhcms8YnIvPlwiKTtcInByaXNvbl9jYW1wXCI9PWJbXCJhYmFuZG9uZWQ6YW1lbml0eVwiXSYmXCJjb25jZW50cmF0aW9uX2NhbXBcIj09W1wiY29uY2VudHJhdGlvbl9jYW1wXCJdJiYoYSs9XCJhYmFuZG9uZWQgY29uY2VudHJhdGlvbiBjYW1wPGJyLz5cIik7XCJ5ZXNcIj09Yi5hYmFuZG9uZWQmJlwiYnVua2VyXCI9PWIubWlsaXRhcnkmJihhKz1cImFiYW5kb25lZCBidW5rZXI8YnIvPlwiKTtcInllc1wiPT1iLmFiYW5kb25lZCYmXCJiYXJyYWNrc1wiPT1iLm1pbGl0YXJ5JiYoYSs9XCJhYmFuZG9uZWQgYmFycmFja3M8YnIvPlwiKTtcInllc1wiPT1iLmFiYW5kb25lZCYmXCJhaXJmaWVsZFwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJhYmFuZG9uZWQgYWlyZmllbGQ8YnIvPlwiKTtcIm1vbmFzdGVyeVwiPT1iLmhpc3RvcmljJiYoYSs9XCJoaXN0b3JpYyBtb25hc3Rlcnk8YnIvPlwiKTtcbiAgICBcIm1vbmFzdGVyeVwiPT1iLmFtZW5pdHkmJihhKz1cIm1vbmFzdGVyeTxici8+XCIpO1wibW9uYXN0ZXJ5XCI9PWIuYnVpbGRpbmcmJihhKz1cIm1vbmFzdGVyeTxici8+XCIpO1wibWFub3JcIj09Yi5oaXN0b3JpYyYmKGErPVwiaGlzdG9yaWMgbWFub3I8YnIvPlwiKTtcImJvdW5kYXJ5X3N0b25lXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIGJvdW5kYXJ5IHN0b25lPGJyLz5cIik7XCJtaWxlc3RvbmVcIj09Yi5oaXN0b3JpYyYmKGErPVwiaGlzdG9yaWMgbWlsZXN0b25lPGJyLz5cIik7XCJtb251bWVudFwiPT1iLmhpc3RvcmljJiYoYSs9XCJtb251bWVudDxici8+XCIpO1wicGFsYWNlXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIHBhbGFjZTxici8+XCIpO1wibWluZVwiPT1iLmhpc3RvcmljJiYoYSs9XCJoaXN0b3JpYyBtaW5lPGJyLz5cIik7XCJydWluc1wiPT1iLmhpc3RvcmljJiYoYSs9XCJydWluczxici8+XCIpO1wiaGFyYm91clwiPT1iLmhpc3RvcmljX3VzYWdlJiYoYSs9XCJoaXN0b3JpYyBoYXJib3VyPGJyLz5cIik7XG4gICAgXCJydW5lIHN0b25lXCI9PWIuaGlzdG9yaWMmJihhKz1cInJ1bmUgc3RvbmU8YnIvPlwiKTtcImJhdHRsZWZpZWxkXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIGJhdHRsZWZpZWxkPGJyLz5cIik7XCJibGFja3NtaXRoXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIGJsYWNrc21pdGg8YnIvPlwiKTtpZihcInRyZWVfc2hyaW5lXCI9PWIuaGlzdG9yaWN8fFwid2F5c2lkZV9zaHJpbmVcIj09Yi5oaXN0b3JpYylhKz1cInNocmluZTxici8+XCI7XCJjaXR5X2dhdGVcIj09Yi5oaXN0b3JpYyYmKGErPVwiaGlzdG9yaWMgY2l0eSBnYXRlPGJyLz5cIik7XCJ3YXlzaWRlX2Nyb3NzXCI9PWIuaGlzdG9yaWMmJihhKz1cImhpc3RvcmljIHdheXNpZGUgY3Jvc3M8YnIvPlwiKTtcIm1vbnVtZW50XCI9PWIuYW1lbml0eSYmKGErPVwibW9udW1lbnQ8YnIvPlwiKTtcIm1lbW9yaWFsXCI9PWIuaGlzdG9yaWMmJihhKz1cIm1lbW9yaWFsPGJyLz5cIik7XCJvcHRpY2FsX3RlbGVncmFwaFwiPT1iLmhpc3RvcmljJiYoYSs9XCJoaXN0b3JpYyBvcHRpY2FsIHRlbGVncmFwaDxici8+XCIpO1xuICAgIGlmKFwiY2FzdGxlXCI9PWIuaGlzdG9yaWMpaWYoYi5jYXN0bGVfdHlwZSlzd2l0Y2goYi5jYXN0bGVfdHlwZSl7Y2FzZSBcImRlZmVuc2l2ZVwiOmErPVwiZGVmZW5zaXZlIGNhc3RsZTxici8+XCI7YnJlYWs7Y2FzZSBcInBhbGFjZVwiOmErPVwicGFsYWNlPGJyLz5cIjticmVhaztjYXNlIFwic3RhdGVseVwiOmErPVwic3RhdGVseSBjYXN0bGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtYW5vclwiOmErPVwibWFub3I8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmb3J0cmVzc1wiOmErPVwiZm9ydHJlc3M8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYXN0cnVtXCI6YSs9XCJjYXN0cnVtPGJyLz5cIjticmVhaztjYXNlIFwic2hpcm9cIjphKz1cInNoaXJvPGJyLz5cIjticmVhaztjYXNlIFwia3JlbWxpblwiOmErPVwia3JlbWxpbjxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cImNhc3RsZTxici8+XCJ9ZWxzZSBhKz1cImNhc3RsZTxici8+XCI7XCJhcmNoYWVvbG9naWNhbF9zaXRlXCI9PWIuaGlzdG9yaWMmJihhKz1cImFyY2hhZW9sb2dpY2FsIHNpdGU8YnIvPlwiKTtpZihcInRvbWJcIj09XG4gICAgICAgIGIuaGlzdG9yaWMpaWYoYi50b21iKXN3aXRjaChiLnRvbWIpe2Nhc2UgXCJ0dW11bHVzXCI6YSs9XCJ0dW11bHVzPGJyLz5cIjticmVhaztjYXNlIFwicm9jay1jdXRcIjphKz1cInJvY2s8YnIvPlwiO2JyZWFrO2Nhc2UgXCJoeXBvZ2V1bVwiOmErPVwiaHlwb2dldW08YnIvPlwiO2JyZWFrO2Nhc2UgXCJ3YXJfZ3JhdmVcIjphKz1cIndhciBncmF2ZTxici8+XCI7YnJlYWs7Y2FzZSBcIm1hdXNvbGV1bVwiOmErPVwibWF1c29sZXVtPGJyLz5cIjticmVhaztjYXNlIFwiY29sdW1iYXJpdW1cIjphKz1cImNvbHVtYmFyaXVtPGJyLz5cIjticmVhaztjYXNlIFwiY3J5cHRcIjphKz1cImNyeXB0PGJyLz5cIjticmVhaztjYXNlIFwicHlyYW1pZFwiOmErPVwicHlyYW1pZDxici8+XCI7YnJlYWs7Y2FzZSBcInNhcmNvcGhhZ3VzXCI6YSs9XCJzYXJjb3BoYWd1czxici8+XCI7YnJlYWs7Y2FzZSBcInZhdWx0XCI6YSs9XCJ2YXVsdDxici8+XCI7YnJlYWs7Y2FzZSBcInRvbWJzdG9uZVwiOmErPVwidG9tYnN0b25lPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiaGlzdG9yaWMgdG9tYjxici8+XCJ9ZWxzZSBhKz1cbiAgICAgICAgXCJoaXN0b3JpYyB0b21iPGJyLz5cIjtcImFjY291bnRhbnRcIj09Yi5vZmZpY2UmJihhKz1cImFjY291bnRhbnQ8YnIvPlwiKTtcImFkbWluaXN0cmF0aXZlXCI9PWIub2ZmaWNlJiYoYSs9XCJhZG1pbmlzdHJhdGl2ZTxici8+XCIpO1wiYXJjaGl0ZWN0XCI9PWIub2ZmaWNlJiYoYSs9XCJhcmNoaXRlY3Q8YnIvPlwiKTtcImFzc29jaWF0aW9uXCI9PWIub2ZmaWNlJiYoYSs9XCJhc3NvY2lhdGlvbjxici8+XCIpO1wicGh5c2ljaWFuXCI9PWIub2ZmaWNlJiYoYSs9XCJwaHlzaWNpYW48YnIvPlwiKTtcImNhbXBpbmdcIj09Yi5vZmZpY2UmJihhKz1cImNhbXBpbmcgb2ZmaWNlPGJyLz5cIik7XCJjb21wYW55XCI9PWIub2ZmaWNlJiYoYSs9XCJjb21wYW55PGJyLz5cIik7XCJlZHVjYXRpb25hbF9pbnN0aXR1dGlvblwiPT1iLm9mZmljZSYmKGErPVwiZWR1Y2F0aW9uYWwgaW5zdGl0dXRpb248YnIvPlwiKTtcImVtcGxveW1lbnRfYWdlbmN5XCI9PWIub2ZmaWNlJiYoYSs9XCJlbXBsb3ltZW50IGFnZW5jeTxici8+XCIpO1wiZXN0YXRlX2FnZW50XCI9PVxuICAgIGIub2ZmaWNlJiYoYSs9XCJlc3RhdGUgYWdlbnQ8YnIvPlwiKTtcImZvcmVzdHJ5XCI9PWIub2ZmaWNlJiYoYSs9XCJmb3Jlc3RyeTxici8+XCIpO1wiZm91bmRhdGlvblwiPT1iLm9mZmljZSYmKGErPVwiZm91bmRhdGlvbjxici8+XCIpO1wiZ292ZXJubWVudFwiPT1iLm9mZmljZSYmKGErPVwiZ292ZXJubWVudDxici8+XCIpO1wiZ3VpZGVcIj09Yi5vZmZpY2UmJihhKz1cImd1aWRlIG9mZmljZTxici8+XCIpO1wiaW5zdXJhbmNlXCI9PWIub2ZmaWNlJiYoYSs9XCJpbnN1cmFuY2U8YnIvPlwiKTtcIml0XCI9PWIub2ZmaWNlJiYoYSs9XCJpdCBvZmZpY2U8YnIvPlwiKTtcImxhd3llclwiPT1iLm9mZmljZSYmKGErPVwibGF3eWVyPGJyLz5cIik7XCJuZXdzcGFwZXJcIj09Yi5vZmZpY2UmJihhKz1cIm5ld3NwYXBlcjxici8+XCIpO1wibmdvXCI9PWIub2ZmaWNlJiYoYSs9XCJuZ28gb2ZmaWNlPGJyLz5cIik7XCJub3RhcnlcIj09Yi5vZmZpY2UmJihhKz1cIm5vdGFyeTxici8+XCIpO1wicG9saXRpY2FsX3BhcnR5XCI9PWIub2ZmaWNlJiYoYSs9XCJwb2xpdGljYWwgcGFydHk8YnIvPlwiKTtcbiAgICBcInF1YW5nb1wiPT1iLm9mZmljZSYmKGErPVwicXVhbmdvIG9mZmljZTxici8+XCIpO1wicmVhbHRvclwiPT1iLm9mZmljZSYmKGErPVwicmVhbHRvcjxici8+XCIpO1wicmVhbF9lc3RhdGVfYWdlbnRcIj09Yi5vZmZpY2UmJihhKz1cInJlYWwgZXN0YXRlIGFnZW50PGJyLz5cIik7XCJyZWdpc3RlclwiPT1iLm9mZmljZSYmKGErPVwicmVnaXN0ZXI8YnIvPlwiKTtcInJlbGlnaW9uXCI9PWIub2ZmaWNlJiYoYSs9XCJyZWxpZ2lvdXMgb2ZmaWNlPGJyLz5cIik7XCJyZXNlYXJjaFwiPT1iLm9mZmljZSYmKGErPVwicmVzZWFyY2ggb2ZmaWNlPGJyLz5cIik7XCJ0YXhcIj09Yi5vZmZpY2UmJihhKz1cInRheCBvZmZpY2U8YnIvPlwiKTtcInRlbGVjb21tdW5pY2F0aW9uXCI9PWIub2ZmaWNlJiYoYSs9XCJ0ZWxlY29tbXVuaWNhdGlvbiBvZmZpY2U8YnIvPlwiKTtcInRyYXZlbF9hZ2VudFwiPT1iLm9mZmljZSYmKGErPVwidHJhdmVsIGFnZW50PGJyLz5cIik7XCJ3YXRlcl91dGlsaXR5XCI9PWIub2ZmaWNlJiYoYSs9XCJ3YXRlciB1dGlsaXR5IG9mZmljZTxici8+XCIpO1xuICAgIFwidGhlcmFwaXN0XCI9PWIub2ZmaWNlJiYoYSs9XCJ0aGVyYXBpc3Q8YnIvPlwiKTtcImNpdHlcIj09Yi5wbGFjZSYmKGErPVwiY2l0eTxici8+XCIpO1widG93blwiPT1iLnBsYWNlJiYoYSs9XCJ0b3duPGJyLz5cIik7XCJ2aWxsYWdlXCI9PWIucGxhY2UmJihhKz1cInZpbGxhZ2U8YnIvPlwiKTtcImNvbnRpbmVudFwiPT1iLnBsYWNlJiYoYSs9XCJjb250aW5lbnQ8YnIvPlwiKTtcIm9jZWFuXCI9PWIucGxhY2UmJihhKz1cIm9jZWFuPC9icj5cIik7XCJ0cmFja1wiPT1iLmhpZ2h3YXkmJihhKz1cInRyYWNrPGJyLz5cIik7XCJyYWNld2F5XCI9PWIuaGlnaHdheSYmKGErPVwicmFjZXdheTxici8+XCIpO1wiZGVzaWduYXRlZFwiPT1iLmJpY3ljbGUmJihhKz1cImN5Y2xlIHBhdGg8YnIvPlwiKTtcInBhdGhcIj09Yi5oaWdod2F5JiYoYSs9XCJmb29kIHBhdGg8YnIvPlwiKTtcInBhcmtpbmdcIj09Yi5hbWVuaXR5JiYoYSs9XCJwYXJraW5nPGJyLz5cIik7XCJzZXJ2aWNlc1wiPT1iLmhpZ2h3YXkmJihhKz1cInNlcnZpY2VzPGJyLz5cIik7XCJyZXN0X2FyZWFcIj09XG4gICAgYi5oaWdod2F5JiYoYSs9XCJyZXN0IGFyZWE8YnIvPlwiKTtcInR1cm5pbmdfY2lyY2xlXCI9PWIuaGlnaHdheSYmKGErPVwidHVybmluZyBjaXJjbGU8YnIvPlwiKTtcInNlcnZpY2VcIj09Yi5oaWdod2F5JiYoYSs9XCJzZXJ2aWNlIHJvYWQ8YnIvPlwiKTtcIm1vdG9yd2F5XCI9PWIuaGlnaHdheSYmKGErPVwibW90b3J3YXk8YnIvPlwiKTtcIm1vdG9yd2F5X2p1bmN0aW9uXCI9PWIuaGlnaHdheSYmKGErPVwibW90b3J3YXkganVuY3Rpb248YnIvPlwiKTtcImJyaWRsZXdheVwiPT1iLmhpZ2h3YXkmJihhKz1cImJyaWRsZXdheTxici8+XCIpO1wieWVzXCI9PWIub25ld2F5JiYoYSs9XCJvbmV3YXk8YnIvPlwiKTtcInllc1wiPT1iLnBhcmtfcmlkZSYmKGErPVwicGFyayBhbmQgcmlkZTxici8+XCIpO1widW5rbm93blwiPT1iLnBhcmtfcmlkZSYmKGErPVwicGFyayBhbmQgcmlkZTxici8+XCIpO1wiYnVzXCI9PWIucGFya19yaWRlJiYoYSs9XCJwYXJrIGFuZCByaWRlPGJyLz5cIik7XCJ0cmFtXCI9PWIucGFya19yaWRlJiYoYSs9XCJwYXJrIGFuZCByaWRlPGJyLz5cIik7XG4gICAgXCJidXNfc3RvcFwiPT1iLmhpZ2h3YXkmJihhKz1cImJ1cyBzdG9wPGJyLz5cIik7XCJwZWRlc3RyaWFuXCI9PWIuaGlnaHdheSYmKGErPVwicGVkZXN0cmlhbjxici8+XCIpO1wic3RyZWV0X2xhbXBcIj09Yi5oaWdod2F5JiYoYSs9XCJzdHJlZXQgbGFtcDxici8+XCIpO1widHJhZmZpY19zaWduYWxzXCI9PWIuaGlnaHdheSYmKGErPVwidHJhZmZpYyBzaWduYWxzPGJyLz5cIik7XCJ0cmFmZmljX3NpZ25hbHNcIj09Yi5jcm9zc2luZyYmKGErPVwidHJhZmZpYyBzaWduYWxzPGJyLz5cIik7XCJzcGVlZF9jYW1lcmFcIj09Yi5oaWdod2F5JiYoYSs9XCJzcGVlZCBjYW1lcmE8YnIvPlwiKTtcInllc1wiPT1iLnRyYWZmaWNfY2FsbWluZyYmKHJldCs9XCJ0cmFmZmljIGNhbG1pbmc8L2JyPlwiKTtcImJ1bXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImJ1bXA8L2JyPlwiKTtcImNoaWNhbmVcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImNoaWNhbmU8L2JyPlwiKTtcImNob2tlclwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiY2hva2VyPC9icj5cIik7XG4gICAgXCJjdXNoaW9uXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJjdXNoaW9uPC9icj5cIik7XCJodW1wXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJodW1wPC9icj5cIik7XCJpc2xhbmRcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImlzbGFuZDwvYnI+XCIpO1wicnVtYmxlX3N0cmlwXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJydW1ibGVfc3RyaXA8L2JyPlwiKTtcInRhYmxlXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJ0YWJsZTwvYnI+XCIpO1wiYnVveV9jYXJkaW5hbFwiPT1iW1wic2VhbWFyazp0eXBlXCJdJiYoYSs9XCJidW95IGNhcmRpbmFsPGJyLz5cIik7XCJidW95X2xhdGVyYWxcIj09YltcInNlYW1hcms6dHlwZVwiXSYmKGErPVwiYnVveSBsYXRlcmFsPGJyLz5cIik7XCJidW95X2lzb2xhdGVkX2RhbmdlclwiPT1iW1wic2VhbWFyazp0eXBlXCJdJiYoYSs9XCJidW95IGlzb2xhdGVkX2Rhbmdlcjxici8+XCIpO1wicGVyY2hcIj09YltcInNlYW1hcms6YmVhY29uX2xhdGVyYWw6c2hhcGVcIl0mJihhKz1cInBlcmNoPGJyLz5cIik7XG4gICAgXCJmdWVsXCI9PWIuYW1lbml0eSYmXCJmdWVsX3N0YXRpb25cIj09YltcInNlYW1hcms6c21hbGxfY3JhZnRfZmFjaWxpdHk6Y2F0ZWdvcnlcIl0/YSs9XCJmdWVsIHN0YXRpb248YnIvPlwiOlwiZnVlbFwiPT1iLmFtZW5pdHkmJihhKz1cImZ1ZWw8YnIvPlwiKTtpZihcImNoYXJnaW5nX3N0YXRpb25cIj09Yi5hbWVuaXR5KXt2YXIgYT1hK1wiY2hhcmdpbmcgc3RhdGlvbjxici8+XCIsYz1iLnZvbHRhZ2U7aWYoYi5jYXIpe3N3aXRjaChiLmNhcil7Y2FzZSBcInllc1wiOmErPVwiQ2FyOiB5ZXNcIjticmVhaztjYXNlIFwibm9cIjphKz1cIkNhcjogTm9cIjticmVhaztkZWZhdWx0OmErPVwiQ2FyczogdW5rb3duXCJ9YSs9XCI8YnIvPlwifWVsc2UgYSs9XCJDYXJzOiB1bmtvd248YnIvPlwiO2lmKGIuYmljeWNsZSl7c3dpdGNoKGIuYmljeWNsZSl7Y2FzZSBcInllc1wiOmErPVwiRS1CaWtlOiB5ZXNcIjticmVhaztjYXNlIFwibm9cIjphKz1cIkUtQmlrZTogbm9cIjticmVhaztkZWZhdWx0OmErPVwiRS1CaWtlOiB1bmtvd25cIn1hKz1cIjxici8+XCJ9ZWxzZSBhKz1cbiAgICAgICAgXCJFLUJpa2U6IHVua293bjxici8+XCI7YltcInNvY2tldDpzY2h1a29cIl0mJihhKz1cIlNjaHVrbyBzb2NrZXQ6IFwiK2JbXCJzb2NrZXQ6c2NodWtvXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfYmx1ZVwiXSYmKGErPVwiQ2VlIGJsdWUgc29ja2V0IFwiK2JbXCJzb2NrZXQ6Y2VlX2JsdWVcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmNlZV9yZWRfMTZhXCJdJiYoYSs9XCJDZWUgcmVkIDE2YSBzb2NrZXQgXCIrYltcInNvY2tldDpjZWVfcmVkXzE2YVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6Y2VlX3JlZF8zMmFcIl0mJihhKz1cIkNlZSByZWQgMzJhIHNvY2tldCBcIitiW1wic29ja2V0OmNlZV9yZWRfMzJhXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjZWVfcmVkXzY0YVwiXSYmKGErPVwiQ2VlIHJlZCA2NGEgc29ja2V0IFwiK2JbXCJzb2NrZXQ6Y2VlX3JlZF82NGFcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0OmNlZV9yZWRfMTI1YVwiXSYmKGErPVwiQ2VlIHJlZCAxMjVhIHNvY2tldCBcIitiW1wic29ja2V0OmNlZV9yZWRfMTI1YVwiXStcIjxici8+XCIpO1xuICAgICAgICBiW1wic29ja2V0Om5lbWFfNV8xNVwiXSYmKGErPVwiTmVtYSA1IDE1IHNvY2tldCBcIitiW1wic29ja2V0Om5lbWFfNV8xNVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6bmVtYV81XzIwXCJdJiYoYSs9XCJOZW1hIDUgMjAgc29ja2V0IFwiK2JbXCJzb2NrZXQ6bmVtYV81XzIwXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpuZW1hXzE0XzMwXCJdJiYoYSs9XCJOZW1hIDE0IDMwIHNvY2tldCBcIitiW1wic29ja2V0Om5lbWFfMTRfMzBcIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om5lbWFfMTRfNTBcIl0mJihhKz1cIk5lbWEgMTQgNTAgc29ja2V0IFwiK2JbXCJzb2NrZXQ6bmVtYV8xNF81MFwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6YnMxMzYzXCJdJiYoYSs9XCJCczEzNjMgc29ja2V0IFwiK2JbXCJzb2NrZXQ6YnMxMzYzXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlMVwiXSYmKGErPVwiVHlwZSAxIHNvY2tldCBcIitiW1wic29ja2V0OnR5cGUxXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlMV9jb21ib1wiXSYmKGErPVwiVHlwZSAxIGNvbWJvIHNvY2tldCBcIitcbiAgICAgICAgICAgIGJbXCJzb2NrZXQ6c2NodWtvXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlMlwiXSYmKGErPVwiVHlwZSAyIHNvY2tldCBcIitiW1wic29ja2V0OnR5cGUyXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlMl9jb21ib1wiXSYmKGErPVwiVHlwZSAyIGNvbWJvIHNvY2tldCBcIitiW1wic29ja2V0OnR5cGUyX2NvbWJvXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0eXBlM1wiXSYmKGErPVwiVHlwZSAzIHNvY2tldCBcIitiW1wic29ja2V0OnR5cGUzXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDpjaGFkZW1vXCJdJiYoYSs9XCJDaGFkZW1vIHNvY2tldCBcIitiW1wic29ja2V0OmNoYWRlbW9cIl0rXCI8YnIvPlwiKTtiW1wic29ja2V0Om1hZ25lX2NoYXJnZVwiXSYmKGErPVwiTWFnbmUgY2hhcmdlIHNvY2tldCBcIitiW1wic29ja2V0Om1hZ25lX2NoYXJnZVwiXStcIjxici8+XCIpO2JbXCJzb2NrZXQ6dGVzbGFfc3RhbmRhcmRcIl0mJihhKz1cIlRlc2xhIHN0YW5kYXJkIHNvY2tldCBcIitiW1wic29ja2V0OnRlc2xhX3N0YW5kYXJkXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0ZXNsYV9zdXBlcmNoYXJnZVwiXSYmXG4gICAgICAgIChhKz1cIlRlc2xhIHN1cGVyY2hhcmdlOiBcIitiW1wic29ja2V0OnRlc2xhX3N1cGVyY2hhcmdlXCJdK1wiPGJyLz5cIik7YltcInNvY2tldDp0ZXNsYV9yb2Fkc3RlclwiXSYmKGErPVwiVGVzbGFfcm9hZHN0ZXIgc29ja2V0IFwiK2JbXCJzb2NrZXQ6dGVzbGFfcm9hZHN0ZXJcIl0rXCI8YnIvPlwiKTthKz1cIjxici8+XCI7Yi52b2x0YWdlJiYoYSs9XCJWb2x0OiBcIitjK1wiPGJyLz5cIil9XCJ5ZXNcIj09Yi50dW5uZWwmJihhKz1cInR1bm5lbDxici8+XCIpO2lmKGIuYnJpZGdlKXN3aXRjaChhKz1cImJyaWRnZTogXCIsYi5icmlkZ2Upe2Nhc2UgXCJzd2luZ1wiOmErPVwic3dpbmdcIjticmVhaztjYXNlIFwiYXF1ZWR1Y3RcIjphKz1cImFxdWVkdWN0XCI7YnJlYWs7Y2FzZSBcImJhc2N1bGVcIjphKz1cImZsYXAgYnJpZGdlXCI7YnJlYWs7Y2FzZSBcImJvYXJkd2Fsa1wiOmErPVwiYm9hcmR3YWxrXCI7YnJlYWs7Y2FzZSBcImNhbnRpbGV2ZXJcIjphKz1cImNhbnRpbGV2ZXJcIjticmVhaztjYXNlIFwiY292ZXJlZFwiOmErPVwiY292ZXJlZFwiO2JyZWFrO2Nhc2UgXCJkcmF3YnJpZGdlXCI6YSs9XG4gICAgICAgIFwiZHJhd2JyaWRnZVwiO2JyZWFrO2Nhc2UgXCJodW1wYmFja1wiOmErPVwiaHVtcGJhY2tcIjticmVhaztjYXNlIFwibGlmdFwiOmErPVwibGlmdFwiO2JyZWFrO2Nhc2UgXCJsb3dfd2F0ZXJfY3Jvc3NpbmdcIjphKz1cImxvdyB3YXRlciBjcm9zc2luZ1wiO2JyZWFrO2Nhc2UgXCJtb3ZlYWJsZVwiOmErPVwibW92ZWFibGVcIjticmVhaztjYXNlIFwicG9udG9vblwiOmErPVwicG9udG9vblwiO2JyZWFrO2Nhc2UgXCJzdXNwZW5zaW9uXCI6YSs9XCJzdXNwZW5zaW9uXCI7YnJlYWs7Y2FzZSBcInRyZXN0bGVcIjphKz1cInRyZXN0bGVcIjticmVhaztjYXNlIFwidmlhZHVjdFwiOmErPVwidmlhZHVjdFwifWlmKGJbXCJicmlkZ2U6bW92YWJsZVwiXSlzd2l0Y2goYltcImJyaWRnZTptb3ZhYmxlXCJdKXtjYXNlIFwic3dpbmdcIjphKz1cInN3aW5nXCI7YnJlYWs7Y2FzZSBcImJhc2N1bGVcIjphKz1cImJhc2N1bGVcIjticmVhaztjYXNlIFwiZHJhd2JyaWRnZVwiOmErPVwiZHJhd2JyaWRnZVwiO2JyZWFrO2Nhc2UgXCJsaWZ0XCI6YSs9XCJsaWZ0XCI7YnJlYWs7Y2FzZSBcInN1Ym1lcnNpYmxlXCI6YSs9XG4gICAgICAgIFwic3VibWVyc2libGVcIjticmVhaztjYXNlIFwidHJhbnNwb3J0ZXJcIjphKz1cInRyYW5zcG9ydGVyXCI7YnJlYWs7Y2FzZSBcInJldHJhY3RhYmxlXCI6YSs9XCJyZXRyYWN0YWJsZVwifWlmKFwibnVyc2luZ19ob21lXCI9PWIuYW1lbml0eXx8XCJyZXRpcmVtZW50X2hvbWVcIj09Yi5hbWVuaXR5KWErPVwibnVyc2luZyBob21lIC8gcmV0aXJlbWVudCBob21lPGJyLz5cIjtcInNvY2lhbF9mYWNpbGl0eVwiPT1iLmFtZW5pdHkmJihhKz1cInNvY2lhbCBmYWNpbGl0eTxici8+XCIpO2lmKGIuc29jaWFsX2ZhY2lsaXR5KXtcImdyb3VwX2hvbWVcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJlwic2VuaW9yXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzZW5pb3IgZ3JvdXAgaG9tZTxici8+XCIpO1wiYXNzaXN0ZWRfbGl2aW5nXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJhc3Npc3RlZCBsaXZpbmc8YnIvPlwiKTtcIm91dHJlYWNoXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJvdXRyZWFjaDxici8+XCIpO1wid29ya3Nob3BcIj09XG4gICAgYi5zb2NpYWxfZmFjaWxpdHkmJihhKz1cIndvcmtzaG9wPGJyLz5cIik7aWYoXCJhbWJ1bGF0b3J5X2NhcmVcIj09Yi5zb2NpYWxfZmFjaWxpdHl8fFwiaGVhbHRoY2FyZVwiPT1iLnNvY2lhbF9mYWNpbGl0eSlhKz1cImFtYnVsYXRvcnkgY2FyZTxici8+XCI7XCJzaGVsdGVyXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiZcInNlbmlvclwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic2VuaW9yIHNoZWx0ZXI8YnIvPlwiKTtcInNoZWx0ZXJcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJlwiYWJ1c2VkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJhYnVzZWQgc2hlbHRlcjxici8+XCIpO1wiZm9vZF9iYW5rXCI9PWIuc29jaWFsX2ZhY2lsaXR5JiYoYSs9XCJmb29kIGJhbms8YnIvPlwiKTtcImhvc3BpY2VcIj09Yi5zb2NpYWxfZmFjaWxpdHkmJihhKz1cImhvc3BpY2U8YnIvPlwiKX1iLmJyZXdlcnkmJihhKz1cImJyYW5kIG9mIGJlZXI6IFwiK2IuYnJld2VyeStcIjxici8+XCIpO1wiYWxjb2hvbFwiPT1iLnNob3AmJihhKz1cbiAgICAgICAgXCJhbGNvaG9sIHNob3A8YnIvPlwiKTtcImJha2VyeVwiPT1iLnNob3AmJihhKz1cImJha2VyeSBzaG9wPGJyLz5cIik7XCJiZXZlcmFnZXNcIj09Yi5zaG9wJiYoYSs9XCJiZXZlcmFnZXMgc2hvcDxici8+XCIpO1wiYnV0Y2hlclwiPT1iLnNob3AmJihhKz1cImJ1dGNoZXIgc2hvcDxici8+XCIpO1wiY2hlZXNlXCI9PWIuc2hvcCYmKGErPVwiY2hlZXNlIHNob3A8YnIvPlwiKTtcImNob2NvbGF0ZVwiPT1iLnNob3AmJihhKz1cImNob2NvbGF0ZSBzaG9wPGJyLz5cIik7XCJjb2ZmZWVcIj09Yi5zaG9wJiYoYSs9XCJjb2ZmZWUgc2hvcDxici8+XCIpO1wiY29uZmVjdGlvbmVyeVwiPT1iLnNob3AmJihhKz1cImNvbmZlY3Rpb25lcnkgc2hvcDxici8+XCIpO1wiY29udmVuaWVuY2VcIj09Yi5zaG9wJiYoYSs9XCJjb252ZW5pZW5jZSBzaG9wPGJyLz5cIik7XCJkZWxpXCI9PWIuc2hvcCYmKGErPVwiZGVsaSBzaG9wPGJyLz5cIik7XCJkYWlyeVwiPT1iLnNob3AmJihhKz1cImRhaXJ5IHNob3A8YnIvPlwiKTtcImZhcm1cIj09Yi5zaG9wJiYoYSs9XCJmYXJtIHNob3A8YnIvPlwiKTtcbiAgICBcImdyZWVuZ3JvY2VyXCI9PWIuc2hvcCYmKGErPVwiZ3JlZW5ncm9jZXIgc2hvcDxici8+XCIpO1wiZ3JvY2VyeVwiPT1iLnNob3AmJihhKz1cImdyb2Nlcnkgc2hvcDxici8+XCIpO1wib3JnYW5pY1wiPT1iLnNob3AmJihhKz1cIm9yZ2FuaWMgc2hvcDxici8+XCIpO1wicGFzdGFcIj09Yi5zaG9wJiYoYSs9XCJwYXN0YSBzaG9wPGJyLz5cIik7XCJzZWFmb29kXCI9PWIuc2hvcCYmKGErPVwic2VhZm9vZCBzaG9wPGJyLz5cIik7XCJ0ZWFcIj09Yi5zaG9wJiYoYSs9XCJ0ZWEgc2hvcDxici8+XCIpO1wid2luZVwiPT1iLnNob3AmJihhKz1cIndpbmUgc2hvcDxici8+XCIpO1wiZGVwYXJ0bWVudF9zdG9yZVwiPT1iLnNob3AmJihhKz1cImRlcGFydG1lbnQgc3RvcmU8YnIvPlwiKTtcImdlbmVyYWxcIj09Yi5zaG9wJiYoYSs9XCJnZW5lcmFsIHNob3A8YnIvPlwiKTtcImtpb3NrXCI9PWIuc2hvcCYmKGErPVwia2lvc2s8YnIvPlwiKTtcIm1hbGxcIj09Yi5zaG9wJiYoYSs9XCJtYWxsPGJyLz5cIik7XCJzdXBlcm1hcmtldFwiPT1iLnNob3AmJihhKz1cInN1cGVybWFya2V0PGJyLz5cIik7XG4gICAgXCJiYWJ5X2dvb2RzXCI9PWIuc2hvcCYmKGErPVwiYmFieSBnb29kcyBzaG9wPGJyLz5cIik7XCJiYWdcIj09Yi5zaG9wJiYoYSs9XCJiYWcgc2hvcDxici8+XCIpO1wiYm91dGlxdWVcIj09Yi5zaG9wJiYoYSs9XCJib3V0aXF1ZTxici8+XCIpO1wiY2xvdGhlc1wiPT1iLnNob3AmJihhKz1cImNsb3RoZXMgc2hvcDxici8+XCIpO1wiZmFicmljXCI9PWIuc2hvcCYmKGErPVwiZmFicmljIHNob3A8YnIvPlwiKTtcImZhc2hpb25cIj09Yi5zaG9wJiYoYSs9XCJmYXNoaW9uIHNob3A8YnIvPlwiKTtcImpld2VscnlcIj09Yi5zaG9wJiYoYSs9XCJqZXdlbHJ5IHNob3A8YnIvPlwiKTtcImxlYXRoZXJcIj09Yi5zaG9wJiYoYSs9XCJsZWF0aGVyIHNob3A8YnIvPlwiKTtcInNob2VzXCI9PWIuc2hvcCYmKGErPVwic2hvZXMgc2hvcDxici8+XCIpO1widmFyaWV0eV9zdG9yZVwiPT1iLnNob3AmJihhKz1cInZhcmlldHkgc3RvcmU8YnIvPlwiKTtcImNoZW1pc3RcIj09Yi5zaG9wJiYoYSs9XCJjaGVtaXN0PGJyLz5cIik7XCJjb3NtZXRpY3NcIj09Yi5zaG9wJiYoYSs9XCJjb3NtZXRpY3Mgc2hvcDxici8+XCIpO1xuICAgIFwiZHJ1Z3N0b3JlXCI9PWIuc2hvcCYmKGErPVwiZHJ1Z3N0b3JlPGJyLz5cIik7XCJwZXJmdW1lcnlcIj09Yi5zaG9wJiYoYSs9XCJwZXJmdW1lcnk8YnIvPlwiKTtcImVyb3RpY1wiPT1iLnNob3AmJihhKz1cImVyb3RpYyBzaG9wPGJyLz5cIik7XCJoYWlyZHJlc3NlclwiPT1iLnNob3AmJihhKz1cImhhaXJkcmVzc2VyPGJyLz5cIik7XCJoZWFyaW5nX2FpZHNcIj09Yi5zaG9wJiYoYSs9XCJoZWFyaW5nIGFpZHM8YnIvPlwiKTtcImhlcmJhbGlzdFwiPT1iLnNob3AmJihhKz1cImhlcmJhbGlzdDxici8+XCIpO1wibWFzc2FnZVwiPT1iLnNob3AmJihhKz1cIm1hc3NhZ2U8YnIvPlwiKTtcIm1lZGljYWxfc3VwcGx5XCI9PWIuc2hvcCYmKGErPVwibWVkaWNhbCBzdXBwbHkgc2hvcDxici8+XCIpO1wib3B0aWNpYW5cIj09Yi5zaG9wJiYoYSs9XCJvcHRpY2lhbjxici8+XCIpO1widGF0dG9vXCI9PWIuc2hvcCYmKGErPVwidGF0dG9vPGJyLz5cIik7XCJiYXRocm9vbV9mdXJuaXNoaW5nXCI9PWIuc2hvcCYmKGErPVwiYmF0aHJvb20gZnVybmlzaGluZzxici8+XCIpO1xuICAgIFwiZG9pdHlvdXJzZWxmXCI9PWIuc2hvcCYmKGErPVwiZG9pdHlvdXJzZWxmPGJyLz5cIik7XCJlbmVyZ3lcIj09Yi5zaG9wJiYoYSs9XCJlbmVyZ3k8YnIvPlwiKTtcImZsb3Jpc3RcIj09Yi5zaG9wJiYoYSs9XCJmbG9yaXN0PGJyLz5cIik7XCJmdXJuYWNlXCI9PWIuc2hvcCYmKGErPVwiZnVybmFjZSBzaG9wPGJyLz5cIik7XCJnYXJkZW5fY2VudHJlXCI9PWIuc2hvcCYmKGErPVwiZ2FyZGVuIGNlbnRyZTxici8+XCIpO1wiZ2FzXCI9PWIuc2hvcCYmKGErPVwiZ2FzPGJyLz5cIik7XCJnbGF6aWVyeVwiPT1iLnNob3AmJihhKz1cImdsYXppZXJ5PGJyLz5cIik7XCJoYXJkd2FyZVwiPT1iLnNob3AmJihhKz1cImhhcmR3YXJlIHNob3A8YnIvPlwiKTtcImhvdXNld2FyZVwiPT1iLnNob3AmJihhKz1cImhvdXNld2FyZSBzaG9wPGJyLz5cIik7XCJsb2Nrc21pdGhcIj09Yi5zaG9wJiYoYSs9XCJsb2Nrc21pdGg8YnIvPlwiKTtcInBhaW50XCI9PWIuc2hvcCYmKGErPVwicGFpbnQgc2hvcDxici8+XCIpO1widHJhZGVcIj09Yi5zaG9wJiYoYSs9XCJ0cmFkZTxici8+XCIpO1xuICAgIFwiYW50aXF1ZXNcIj09Yi5zaG9wJiYoYSs9XCJhbnRpcXVlcyBzaG9wPGJyLz5cIik7XCJiZWRcIj09Yi5zaG9wJiYoYSs9XCJiZWQgc2hvcDxici8+XCIpO1wiY2FuZGxlc1wiPT1iLnNob3AmJihhKz1cImNhbmRsZXMgc2hvcDxici8+XCIpO1wiY2FycGV0XCI9PWIuc2hvcCYmKGErPVwiY2FycGV0IHNob3A8YnIvPlwiKTtcImN1cnRhaW5cIj09Yi5zaG9wJiYoYSs9XCJjdXJ0YWluIHNob3A8YnIvPlwiKTtcImZ1cm5pdHVyZVwiPT1iLnNob3AmJihhKz1cImZ1cm5pdHVyZSBzdG9yZTxici8+XCIpO1wiaW50ZXJpb3JfZGVjb3JhdGlvblwiPT1iLnNob3AmJihhKz1cImludGVyaW9yIGRlY29yYXRpb24gY29tcGFueTxici8+XCIpO1wia2l0Y2hlblwiPT1iLnNob3AmJihhKz1cImtpdGNoZW4gc2hvcDxici8+XCIpO1wid2luZG93X2JsaW5kXCI9PWIuc2hvcCYmKGErPVwid2luZG93IGJsaW5kIHNob3A8YnIvPlwiKTtcImNvbXB1dGVyXCI9PWIuc2hvcCYmKGErPVwiY29tcHV0ZXIgc2hvcDxici8+XCIpO1wiZWxlY3Ryb25pY3NcIj09Yi5zaG9wJiYoYSs9XG4gICAgICAgIFwiZWxlY3Ryb25pY3Mgc2hvcDxici8+XCIpO1wiaGlmaVwiPT1iLnNob3AmJihhKz1cImhpZmkgc2hvcDxici8+XCIpO1wibW9iaWxlX3Bob25lXCI9PWIuc2hvcCYmKGErPVwibW9iaWxlIHBob25lIHNob3A8YnIvPlwiKTtcInJhZGlvdGVjaG5pY3NcIj09Yi5zaG9wJiYoYSs9XCJyYWRpb3RlY2huaWNzIHNob3A8YnIvPlwiKTtcInZhY3V1bV9jbGVhbmVyXCI9PWIuc2hvcCYmKGErPVwidmFjdXVtIGNsZWFuZXIgc2hvcDxici8+XCIpO1wiYmljeWNsZVwiPT1iLnNob3AmJihhKz1cImJpY3ljbGUgc2hvcDxici8+XCIpO1wiY2FyXCI9PWIuc2hvcCYmKGErPVwiY2FyIHNob3A8YnIvPlwiKTtcImNhciByZXBhaXJcIj09Yi5zaG9wJiYoYSs9XCJjYXIgcmVwYWlyPGJyLz5cIik7XCJjYXJfcGFydHNcIj09Yi5zaG9wJiYoYSs9XCJjYXIgcGFydHMgc2hvcDxici8+XCIpO2lmKFwiZGl2ZVwiPT1iLnNob3B8fFwic2N1YmFfZGl2aW5nXCI9PWIuc2hvcClhKz1cInNjdWJhIGRpdmluZyBzaG9wPGJyLz5cIjtcImZpc2hpbmdcIj09Yi5zaG9wJiYoYSs9XCJmaXNoaW5nIHNob3A8YnIvPlwiKTtcbiAgICBcImZyZWVfZmx5aW5nXCI9PWIuc2hvcCYmKGErPVwiZnJlZSBmbHlpbmcgc2hvcDxici8+XCIpO1wiaHVudGluZ1wiPT1iLnNob3AmJihhKz1cImh1bnRpbmcgc2hvcDxici8+XCIpO1wibW90b3JjeWNsZVwiPT1iLnNob3AmJihhKz1cIm1vdG9yY3ljbGUgc2hvcDxici8+XCIpO1wib3V0ZG9vclwiPT1iLnNob3AmJihhKz1cIm91dGRvb3Igc2hvcDxici8+XCIpO1wic3BvcnRzXCI9PWIuc2hvcCYmKGErPVwic3BvcnRzIHNob3A8YnIvPlwiKTtcInR5cmVzXCI9PWIuc2hvcCYmKGErPVwidHlyZXM8YnIvPlwiKTtcIndhdGVyX3Nwb3J0c1wiPT1iLnNob3AmJihhKz1cIndhdGVyIHNwb3J0cyBzaG9wPGJyLz5cIik7XCJhcnRcIj09Yi5zaG9wJiYoYSs9XCJhcnQ8YnIvPlwiKTtcImNyYWZ0XCI9PWIuc2hvcCYmKGErPVwiY3JhZnQ8YnIvPlwiKTtcImZyYW1lXCI9PWIuc2hvcCYmKGErPVwiZnJhbWUgc2hvcDxici8+XCIpO1wibXVzaWNcIj09Yi5zaG9wJiYoYSs9XCJtdXNpYyBzaG9wPGJyLz5cIik7XCJtdXNpY19pbnN0cnVtZW50XCI9PWIuc2hvcCYmKGErPVwibXVzaWMgaW5zdHJ1bWVudHMgc2hvcDxici8+XCIpO1xuICAgIFwicGhvdG9cIj09Yi5zaG9wJiYoYSs9XCJwaG90byBzaG9wPGJyLz5cIik7XCJ2aWRlb1wiPT1iLnNob3AmJihhKz1cInZpZGVvPGJyLz5cIik7XCJ2aWRlb19nYW1lc1wiPT1iLnNob3AmJihhKz1cInZpZGVvIGdhbWVzPGJyLz5cIik7XCJhbmltZVwiPT1iLnNob3AmJihhKz1cImFuaW1lPGJyLz5cIik7XCJib29rc1wiPT1iLnNob3AmJihhKz1cImJvb2tzIHNob3A8YnIvPlwiKTtcImdpZnRcIj09Yi5zaG9wJiYoYSs9XCJnaWZ0IHNob3A8YnIvPlwiKTtcIm5ld3NhZ2VudFwiPT1iLnNob3AmJihhKz1cIm5ld3NhZ2VudDxici8+XCIpO1wic3RhdGlvbmVyeVwiPT1iLnNob3AmJihhKz1cInN0YXRpb25lcnk8YnIvPlwiKTtcInRpY2tldFwiPT1iLnNob3AmJihhKz1cInRpY2tldCBzaG9wPGJyLz5cIik7XCJjb3B5c2hvcFwiPT1iLnNob3AmJihhKz1cImNvcHlzaG9wPGJyLz5cIik7XCJmdW5lcmFsX2RpcmVjdG9yc1wiPT1iLnNob3AmJihhKz1cImZ1bmVyYWwgZGlyZWN0b3JzPGJyLz5cIik7XCJsYXVuZHJ5XCI9PWIuc2hvcCYmKGErPVwibGF1bmRyeTxici8+XCIpO1xuICAgIFwiZHJ5X2NsZWFuaW5nXCI9PWIuc2hvcCYmKGErPVwiZHJ5IGNsZWFuaW5nPGJyLz5cIik7XCJtb25leV9sZW5kZXJcIj09Yi5zaG9wJiYoYSs9XCJtb25leSBsZW5kZXI8YnIvPlwiKTtcInBhd25icm9rZXJcIj09Yi5zaG9wJiYoYSs9XCJwYXduYnJva2VyPGJyLz5cIik7XCJwZXRcIj09Yi5zaG9wJiYoYSs9XCJwZXQgc2hvcDxici8+XCIpO1wicHlyb3RlY2huaWNzXCI9PWIuc2hvcCYmKGErPVwicHlyb3RlY2huaWNzIHNob3A8YnIvPlwiKTtcInJlbGlnaW9uXCI9PWIuc2hvcCYmKGErPVwicmVsaWdpb248YnIvPlwiKTtcImJlYXV0eVwiPT1iLnNob3AmJihhKz1cImJlYXV0eTxici8+XCIpO1wic29sYXJpdW1cIj09Yi5zaG9wJiYoYSs9XCJzb2xhcml1bTxici8+XCIpO1widG9iYWNjb1wiPT1iLnNob3AmJihhKz1cInRvYmFjY28gc2hvcDxici8+XCIpO1widG95c1wiPT1iLnNob3AmJihhKz1cInRveXMgc2hvcDxici8+XCIpO1widHJhdmVsX2FnZW5jeVwiPT1iLnNob3AmJihhKz1cInRyYXZlbCBhZ2VuY3k8YnIvPlwiKTtcIm1hcmtldF9oYWxsXCI9PWIuc2hvcCYmXG4gICAgKGErPVwibWFya2V0IGhhbGw8YnIvPlwiKTtcInZhY2FudFwiPT1iLnNob3AmJihhKz1cInZhY2FudDxici8+XCIpO1wid2VhcG9uc1wiPT1iLnNob3AmJihhKz1cIndlYXBvbnMgc2hvcDxici8+XCIpO1wibG90dGVyeVwiPT1iLmdhbWJsaW5nJiYoYSs9XCJsb3R0ZXJ5PGJyLz5cIik7XCJmaXNoXCI9PWIucGV0JiYoYSs9XCJmaXNoa2VlcGluZzxici8+XCIpO1wiYWdyaXVjdWx0dXJhbF9lbmdpbmVzXCI9PWIuY3JhZnQmJihhKz1cImFncml1Y3VsdHVyYWwgZW5naW5lczxici8+XCIpO1wiYmFza2V0X21ha2VyXCI9PWIuY3JhZnQmJihhKz1cImJhc2tldCBtYWtlcjxici8+XCIpO1wiYmVla2VlcGVyXCI9PWIuY3JhZnQmJihhKz1cImJlZWtlZXBlcjxici8+XCIpO1wiYmxhY2tzbWl0aFwiPT1iLmNyYWZ0JiYoYSs9XCJibGFja3NtaXRoPGJyLz5cIik7XCJicmV3ZXJ5XCI9PWIuY3JhZnQmJihhKz1cImJyZXdlcnk8YnIvPlwiKTtcInllc1wiPT1iLm1pY3JvYnJld2VyeSYmKGErPVwibWljcm8tYnJld2VyeTxici8+XCIpO1wiYm9hdGJ1aWxkZXJcIj09Yi5jcmFmdCYmXG4gICAgKGErPVwiYm9hdGJ1aWxkZXI8YnIvPlwiKTtcImJvb2tiaW5kZXJcIj09Yi5jcmFmdCYmKGErPVwiYm9va2JpbmRlcjxici8+XCIpO1wiYnVpbGRlclwiPT1iLmNyYWZ0JiYoYSs9XCJob3VzZWJ1aWxkaW5nPGJyLz5cIik7XCJjYXJwZW50ZXJcIj09Yi5jcmFmdCYmKGErPVwiY2FycGVudGVyLCB3b29kd29ya2VyLCBqb2luZXI8YnIvPlwiKTtcImNhcnBldF9sYXllclwiPT1iLmNyYWZ0JiYoYSs9XCJjYXJwZXQgbGF5ZXI8YnIvPlwiKTtcImNhdGVyZXJcIj09Yi5jcmFmdCYmKGErPVwiY2F0ZXJlcjxici8+XCIpO1wiY2xvY2ttYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJjbG9ja21ha2VyPGJyLz5cIik7XCJjb25mZWN0aW9uZXJ5XCI9PWIuY3JhZnQmJihhKz1cImNvbmZlY3Rpb25lcnk8YnIvPlwiKTtcImRyZXNzbWFrZXJcIj09Yi5jcmFmdCYmKGErPVwiZHJlc3NtYWtlcjxici8+XCIpO1wiZWxlY3RyaWNpYW5cIj09Yi5jcmFmdCYmKGErPVwiZWxlY3RyaWNpYW48YnIvPlwiKTtcImdhcmRlbmVyXCI9PWIuY3JhZnQmJihhKz1cImdhcmRlbmVyLCBsYW5kc2NhcGVyPGJyLz5cIik7XG4gICAgXCJnbGF6aWVyeVwiPT1iLmNyYWZ0JiYoYSs9XCJnbGF6aWVyeTxici8+XCIpO1wiaGFuZGljcmFmdFwiPT1iLmNyYWZ0JiYoYSs9XCJoYW5kaWNyYWZ0PGJyLz5cIik7XCJodmFjXCI9PWIuY3JhZnQmJihhKz1cImhlYXRpbmcsIHZlbnRpbGF0aW9uIGFuZCBhaXItY29uZGl0aW9uaW5nIHRlY2hub2xvZ3kgKEhWQUMpPGJyLz5cIik7XCJpbnN1bGF0aW9uXCI9PWIuY3JhZnQmJihhKz1cInRoZXJtYWwgaW5zdWxhdGlvbjxici8+XCIpO1wiamV3ZWxsZXJcIj09Yi5jcmFmdCYmKGErPVwiamV3ZWxsZXIsIGdvbGQtL3NpbHZlcnNtaXRoczxici8+XCIpO1wia2V5X2N1dHRlclwiPT1iLmNyYWZ0JiYoYSs9XCJrZXkgY3V0dGVyPGJyLz5cIik7XCJsb2Nrc21pdGhcIj09Yi5jcmFmdCYmKGErPVwibG9ja3NtaXRoPGJyLz5cIik7XCJtZXRhbF9jb25zdHJ1Y3Rpb25cIj09Yi5jcmFmdCYmKGErPVwibWV0YWx3b3JrZXI8YnIvPlwiKTtcIm9wdGljaWFuXCI9PWIuY3JhZnQmJihhKz1cIm9wdGljaWFuPGJyLz5cIik7XCJwYWludGVyXCI9PWIuY3JhZnQmJihhKz1cbiAgICAgICAgXCJwYWludGVyPGJyLz5cIik7XCJwYXJxdWV0X2xheWVyXCI9PWIuY3JhZnQmJihhKz1cInBhcnF1ZXQgbGF5ZXI8YnIvPlwiKTtcInBob3RvZ3JhcGhlclwiPT1iLmNyYWZ0JiYoYSs9XCJwaG90b2dyYXBoZXI8YnIvPlwiKTtcInBob3RvZ3JhcGhpY19sYWJvcmF0b3J5XCI9PWIuY3JhZnQmJihhKz1cInBob3RvZ3JhcGhpYyBsYWJvcmF0b3J5PGJyLz5cIik7XCJwbGFzdGVyZXJcIj09Yi5jcmFmdCYmKGErPVwicGxhc3RlcmVyPGJyLz5cIik7XCJwbHVtYmVyXCI9PWIuY3JhZnQmJihhKz1cInBsdW1iZXI8YnIvPlwiKTtcInBvdHRlcnlcIj09Yi5jcmFmdCYmKGErPVwicG90dGVyeTxici8+XCIpO1wicmlnZ2VyXCI9PWIuY3JhZnQmJihhKz1cInNoaXAgcmlnZ2VyPGJyLz5cIik7XCJyb29mZXJcIj09Yi5jcmFmdCYmKGErPVwicm9vZmVyPGJyLz5cIik7XCJzYWRkbGVyXCI9PWIuY3JhZnQmJihhKz1cInNhZGRsZXI8YnIvPlwiKTtcInNhaWxtYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJzYWlsbWFrZXI8YnIvPlwiKTtcInNhd21pbGxcIj09Yi5jcmFmdCYmKGErPVxuICAgICAgICBcInNhd21pbGw8YnIvPlwiKTtcInNjYWZmb2xkZXJcIj09Yi5jcmFmdCYmKGErPVwic2NhZmZvbGRlcjxici8+XCIpO1wic2N1bHB0b3JcIj09Yi5jcmFmdCYmKGErPVwic2N1bHB0b3I8YnIvPlwiKTtcInNob2VtYWtlclwiPT1iLmNyYWZ0JiYoYSs9XCJzaG9lbWFrZXI8YnIvPlwiKTtcInN0YW5kX2J1aWxkZXJcIj09Yi5jcmFmdCYmKGErPVwiZXhoaWJpdGlvbiBzdGFuZCBidWlsZGVyPGJyLz5cIik7XCJzdG9uZW1hc29uXCI9PWIuY3JhZnQmJihhKz1cInN0b25lbWFzb248YnIvPlwiKTtcInN1bl9wcm90ZWN0aW9uXCI9PWIuY3JhZnQmJihhKz1cImNvbnN0cnVjdG9yIGZvciBzdW4gcHJvdGVjdGlvbiwgdmVuZXRpYW4gYmxpbmQsIHNodXR0ZXI8YnIvPlwiKTtcInN3ZWVwXCI9PWIuY3JhZnQmJihhKz1cImNoaW1uZXkgc3dlZXA8YnIvPlwiKTtcInRhaWxvclwiPT1iLmNyYWZ0JiYoYSs9XCJ0YWlsb3I8YnIvPlwiKTtcInRpbGVyXCI9PWIuY3JhZnQmJihhKz1cInRpbGVyPGJyLz5cIik7XCJ0aW5zbWl0aFwiPT1iLmNyYWZ0JiYoYSs9XCJ0aW5zbWl0aCwgbWV0YWx3b3JrZXI8YnIvPlwiKTtcbiAgICBcInVwaG9sc3RlcmVyXCI9PWIuY3JhZnQmJihhKz1cInVwaG9sc3RlcmVyPGJyLz5cIik7XCJ3YXRjaG1ha2VyXCI9PWIuY3JhZnQmJihhKz1cIndhdGNobWFrZXI8YnIvPlwiKTtcIndpbmRvd19jb25zdHJ1Y3Rpb25cIj09Yi5jcmFmdCYmKGErPVwid2luZG93IGNvbnN0cnVjdG9yPGJyLz5cIik7XCJtYWNoaW5lc1wiPT1iLnJlbnRhbCYmKGErPVwicmVudGFsIHBhcmsgZm9yIG1hY2hpbmVzPGJyLz5cIik7XCJjYXJfcmVudGFsXCI9PWIuYW1lbml0eSYmKGErPVwiY2FyIHJlbnRhbCBjb21wYW55PGJyLz5cIik7XCJhbGxvdG1lbnRzXCI9PWIubGFuZHVzZSYmKGErPVwiYWxsb3RtZW50IGdhcmRlbjxici8+XCIpO1wiYmFzaW5cIj09Yi5sYW5kdXNlJiYoYSs9XCJob2xkaW5nIHJlc2Vydm9pcjxici8+XCIpO1wiYnJvd25maWVsZFwiPT1iLmxhbmR1c2UmJihhKz1cImJyb3duZmllbGQ8YnIvPlwiKTtcImNvbW1lcmNpYWxcIj09Yi5sYW5kdXNlJiYoYSs9XCJjb21tZXJjaWFsIGFyZWE8YnIvPlwiKTtcImNvbnN0cnVjdGlvblwiPT1iLmxhbmR1c2UmJlxuICAgIChhKz1cImNvbnN0cnVjdGlvbiBhcmVhPGJyLz5cIik7XCJmYXJtbGFuZFwiPT1iLmxhbmR1c2UmJihhKz1cImZhcm1sYW5kPGJyLz5cIik7XCJmYXJteWFyZFwiPT1iLmxhbmR1c2UmJihhKz1cImZhcm15YXJkPGJyLz5cIik7XCJmb3Jlc3RcIj09Yi5sYW5kdXNlJiYoYSs9XCJmb3Jlc3Q8YnIvPlwiKTtcImdhcmFnZXNcIj09Yi5sYW5kdXNlJiYoYSs9XCJnYXJhZ2VzPGJyLz5cIik7XCJncmFzc1wiPT1iLmxhbmR1c2UmJihhKz1cImdyYXNzPGJyLz5cIik7XCJncmVlbmZpZWxkXCI9PWIubGFuZHVzZSYmKGErPVwiZ3JlZW5maWVsZDxici8+XCIpO1wiZ3JlZW5ob3VzZV9ob3J0aWN1bHR1cmVcIj09Yi5sYW5kdXNlJiYoYSs9XCJncmVlbmhvdXNlIGhvcnRpY3VsdHVyZTxici8+XCIpO1wiaW5kdXN0cmlhbFwiPT1iLmxhbmR1c2UmJihhKz1cImluZHVzdHJ5IGFyZWE8YnIvPlwiKTtcImxhbmRmaWxsXCI9PWIubGFuZHVzZSYmKGErPVwibGFuZGZpbGw8YnIvPlwiKTtcIm1lYWRvd1wiPT1iLmxhbmR1c2UmJihhKz1cIm1lYWRvdzxici8+XCIpO1wib3JjaGFyZFwiPT1cbiAgICBiLmxhbmR1c2UmJihhKz1cIm9yY2hhcmQ8YnIvPlwiKTtcInBsYW50X251cnNlcnlcIj09Yi5sYW5kdXNlJiYoYSs9XCJwbGFudCBudXJzZXJ5PGJyLz5cIik7XCJxdWFycnlcIj09Yi5sYW5kdXNlJiYoYSs9XCJxdWFycnk8YnIvPlwiKTtcInJhaWx3YXlcIj09Yi5sYW5kdXNlJiYoYSs9XCJyYWlsd2F5PGJyLz5cIik7XCJyZWNyZWF0aW9uX2dyb3VuZFwiPT1iLmxhbmR1c2UmJihhKz1cInJlY3JlYXRpb24gZ3JvdW5kPGJyLz5cIik7XCJyZXNlcnZvaXJcIj09Yi5sYW5kdXNlJiYoYSs9XCJyZXNlcnZvaXI8YnIvPlwiKTtcInJlc2lkZW50aWFsXCI9PWIubGFuZHVzZSYmKGErPVwicmVzaWRlbnRpYWw8YnIvPlwiKTtcInJldGFpbFwiPT1iLmxhbmR1c2UmJihhKz1cInJldHJhaWw8YnIvPlwiKTtcInNhbHRfcG9uZFwiPT1iLmxhbmR1c2UmJihhKz1cInNhbHQgcG9uZDxici8+XCIpO1widmlsbGFnZV9ncmVlblwiPT1iLmxhbmR1c2UmJihhKz1cInZpbGxhZ2UgZ3JlZW48YnIvPlwiKTtcInZpbmV5YXJkXCI9PWIubGFuZHVzZSYmKGErPVwidmluZXlhcmQ8YnIvPlwiKTtcbiAgICBcInBvbmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJwb25kPGJyLz5cIik7XCJzYWx0X3BvbmRcIj09Yi5sYW5kdXNlJiYoYSs9XCJzYWx0IHBvbmQ8YnIvPlwiKTtcImFuaW1hbF9rZWVwaW5nXCI9PWIubGFuZHVzZSYmKGErPVwiYW5pbWFsIGtlZXBpbmc8YnIvPlwiKTtcInllc1wiPT1iLmVudHJhbmNlJiYoYSs9XCJlbnRyYW5jZTxici8+XCIpO1wibWFpblwiPT1iLmVudHJhbmNlJiYoYSs9XCJtYWluLWVudHJhbmNlPGJyLz5cIik7XCJzZXJ2aWNlXCI9PWIuZW50cmFuY2UmJihhKz1cInJlYXIgZXhpdCBmb3Igc3RhZmZpbmcgYW5kIHN1cHBsaWVyczxici8+XCIpO1wiZXhpdFwiPT1iLmVudHJhbmNlJiYoYSs9XCJleGl0PGJyLz5cIik7XCJlbWVyZ2VuY3lcIj09Yi5lbnRyYW5jZSYmKGErPVwiZW1lcmdlbmN5PGJyLz5cIik7XCJiYXlcIj09Yi5uYXR1cmFsJiYoYSs9XCJiYXk8YnIvPlwiKTtcImJlYWNoXCI9PWIubmF0dXJhbCYmKGErPVwiYmVhY2g8YnIvPlwiKTtcIndvb2RcIj09Yi5uYXR1cmFsJiYoYSs9XCJ3b29kPGJyLz5cIik7XCJnbGFjaWVyXCI9PWIubmF0dXJhbCYmXG4gICAgKGErPVwiZ2xhY2llcjxici8+XCIpO1wiY2F2ZV9lbnRyYW5jZVwiPT1iLm5hdHVyYWwmJihhKz1cImNhdmUgZW50cmFuY2U8YnIvPlwiKTtcInNwcmluZ1wiPT1iLm5hdHVyYWwmJihhKz1cInNwcmluZzxici8+XCIpO1wid2F0ZXJmYWxsXCI9PWIubmF0dXJhbCYmKGErPVwid2F0ZXJmYWxsPGJyLz5cIik7XCJzY3J1YlwiPT1iLm5hdHVyYWwmJihhKz1cInNjcnViPGJyLz5cIik7XCJncmFzc2xhbmRcIj09Yi5uYXR1cmFsJiYoYSs9XCJncmFzc2xhbmQ8YnIvPlwiKTtcIndldGxhbmRcIj09Yi5uYXR1cmFsJiYoYSs9XCJ3ZXRsYW5kPGJyLz5cIik7XCJ0cmVlXCI9PWIubmF0dXJhbCYmKGErPVwidHJlZVwiKTtcInBlYWtcIj09Yi5uYXR1cmFsJiZcInllc1wiPT1iW1wic3VtbWl0OmNyb3NzXCJdJiYoYSs9XCJjcm9zcyBvbiB0aGUgc3VtbWl0IG9mIGEgbW91bnRhaW48YnIvPlwiKTtcInRyZWVfcm93XCI9PWIubmF0dXJhbCYmKGErPVwidHJlZSByb3csIGFsbGV5IG9mIHRyZWVzPGJyLz5cIik7XCJoZWF0aFwiPT1iLm5hdHVyYWwmJihhKz1cImhlYXRoPGJyLz5cIik7XG4gICAgXCJtb29yXCI9PWIubmF0dXJhbCYmKGErPVwibW9vcjxici8+XCIpO1wiZ3Jhc3NsYW5kXCI9PWIubmF0dXJhbCYmKGErPVwiZ3Jhc3NsYW5kPGJyLz5cIik7XCJmZWxsXCI9PWIubmF0dXJhbCYmKGErPVwiZ3Jhc2xhbmQgYWJvdmUgdGhlIHRyZWUgbGFuZDxici8+XCIpO1wiYmFyZV9yb2NrXCI9PWIubmF0dXJhbCYmKGErPVwiYmFyZSByb2NrPGJyLz5cIik7XCJzY3JlZVwiPT1iLm5hdHVyYWwmJihhKz1cInNjcmVlPGJyLz5cIik7XCJ2b2xjYW5vXCI9PWIubmF0dXJhbCYmKGErPVwidm9sY2Fubzxici8+XCIpO1widmFsbGV5XCI9PWIubmF0dXJhbCYmKGErPVwidmFsbGV5PGJyLz5cIik7XCJzdG9uZVwiPT1iLm5hdHVyYWwmJihhKz1cInN0b25lPGJyLz5cIik7XCJzZWFcIj09Yi5uYXR1cmFsJiYoYSs9XCJzZWE8YnIvPlwiKTtcIm5hdGlvbmFsX3BhcmtcIj09Yi5ib3VuZGFyeSYmKGErPVwibmF0aW9uYWwgcGFyazxici8+XCIpO1wicHJvdGVjdGVkX2FyZWFcIj09Yi5ib3VuZGFyeSYmKGErPVwicHJvdGVjdGVkIGFyZWE8YnIvPlwiKTtcInllc1wiPT1iLm1vdW50YWluX3Bhc3MmJlxuICAgIChhKz1cIm1vdW50YWluIHBhc3M8YnIvPlwiKTtcIndhdGVyZmFsbFwiPT1iLndhdGVyd2F5JiYoYSs9XCJ3YXRlcmZhbGw8YnIvPlwiKTtcImNhbmFsXCI9PWIud2F0ZXJ3YXkmJihhKz1cImNhbmFsPGJyLz5cIik7XCJjYW5hbFwiPT1iLndhdGVyJiYoYSs9XCJjYW5hbDxici8+XCIpO1wicml2ZXJcIj09Yi53YXRlcndheSYmKGErPVwicml2ZXI8YnIvPlwiKTtcInJpdmVyXCI9PWIud2F0ZXImJihhKz1cInJpdmVyPGJyLz5cIik7XCJyaXZlcmJhbmtcIj09Yi53YXRlcndheSYmKGErPVwicml2ZXI8YnIvPlwiKTtcImRpdGNoXCI9PWIud2F0ZXJ3YXkmJihhKz1cImRpdGNoPGJyLz5cIik7XCJzdHJlYW1cIj09Yi53YXRlcndheSYmKGErPVwic3RyZWFtPGJyLz5cIik7XCJmZXJyeVwiPT1iLnJvdXRlJiYoYSs9XCJmZXJyeTxici8+XCIpO1widHVybmluZ19wb2ludFwiPT1iLndhdGVyd2F5JiYoYSs9XCJ0dXJuaW5nIHBvaW50PGJyLz5cIik7aWYoXCJsYWtlXCI9PWIud2F0ZXJ8fFwid2F0ZXJcIj09Yi5uYXR1cmFsKWErPVwibGFrZTxici8+XCI7XCJjb3ZlXCI9PWIud2F0ZXImJlxuICAgIChhKz1cImNvdmU8YnIvPlwiKTtcImxhZ29vblwiPT1iLndhdGVyJiYoYSs9XCJsYWdvb248YnIvPlwiKTtcInBvbmRcIj09Yi53YXRlciYmKGErPVwicG9uZDxici8+XCIpO1wicmVzZXJ2b2lyXCI9PWIud2F0ZXImJihhKz1cIndhdGVycmVzZXJ2b2lyPGJyLz5cIik7XCJveGJvd1wiPT1iLndhdGVyJiYoYSs9XCJveGJvdyBsYWtlPGJyLz5cIik7XCJsb2NrXCI9PWIud2F0ZXImJihhKz1cImxvY2sgY2hhbWJlcjxici8+XCIpO1wibW9hdFwiPT1iLndhdGVyJiYoYSs9XCJjYXN0bGUgbW9hdDxici8+XCIpO1wid2FzdGV3YXRlclwiPT1iLndhdGVyJiYoYSs9XCJ3YXN0ZXdhdGVyIHRyZWF0bWVudCBwbGFudDxici8+XCIpO1wiZ3Vlc3RcIj09Yi5tb29yaW5nJiZcInBpZXJcIj09Yi5tYW5fbWFkZXx8XCJ2aXNpdG9yX2JlcnRoXCI9PWJbXCJzZWFtYXJrOnNtYWxsX2NyYWZ0X2ZhY2lsaXR5OmNhdGVnb3J5XCJdP2ErPVwiZ2FzdHJvaW50ZXN0aW5hbDxici8+XCI6XCJwaWVyXCI9PWIubWFuX21hZGUmJihhKz1cInBpZXI8YnIvPlwiKTtcImJvYXR5YXJkXCI9PWIud2F0ZXJ3YXkmJlxuICAgIChhKz1cImJvYXR5YXJkPGJyLz5cIik7XCJtb29yaW5nXCI9PWJbXCJzZWFtYXJrOnR5cGVcIl0mJlwiZG9scGhpblwiPT1iW1wic2VhbWFyazptb29yaW5nOmNhdGVnb3J5XCJdJiYoYSs9XCJkb2xwaGluPGJyLz5cIik7XCJmb290XCI9PWIucm91dGUmJihhKz1cImZvb3RwYXRoPGJyLz5cIik7XCJoaWtpbmdcIj09Yi5yb3V0ZSYmKGErPVwiaGlraW5nIHRyYWlsPGJyLz5cIik7aWYoXCJ5ZXNcIj09Yi5oaWtpbmcmJlwiaW5mb3JtYXRpb25cIj09Yi50b3VyaXNtKWErPVwiZGlyZWN0aW9uIGJvYXJkPGJyLz5cIjtlbHNlIGlmKFwiaW5mb3JtYXRpb25cIj09Yi50b3VyaXNtJiZcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSlpZihiLmluZm9ybWF0aW9uKXN3aXRjaChiLmluZm9ybWF0aW9uKXtjYXNlIFwiYm9hcmRcIjphKz1cImRpcmVjdGlvbiBib2FyZDxici8+XCI7YnJlYWs7Y2FzZSBcIm1hcFwiOmErPVwiZGlyZWN0aW9uIGJvYXJkIHdpdGggYSBtYXA8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvZmZpY2VcIjphKz1cInRvdXJpc3QgaW5mb3JtYXRpb24gb2ZmaWNlPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcInRlcm1pbmFsXCI6YSs9XCJ0b3VyaXN0IGluZm9ybWF0aW9uIHRlcm1pbmFsPGJyLz5cIjticmVhaztjYXNlIFwiYXVkaW9ndWlkZVwiOmErPVwiYXVkaW9ndWlkZTxici8+XCI7YnJlYWs7Y2FzZSBcImd1aWRlcG9zdFwiOmErPVwiZ3VpZGVwb3N0PGJyLz5cIjticmVhaztjYXNlIFwidGFjdGlsZV9tYXBcIjphKz1cInRhY3RpbGUgbWFwPGJyLz5cIjticmVhaztjYXNlIFwidGFjdGlsZV9tb2RlbFwiOmErPVwidGFjdGlsZSBtb2RlbDxici8+XCI7YnJlYWs7Y2FzZSBcInJvdXRlX21hcmtlclwiOmErPVwicm91dGUgbWFya2VyPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiZGlyZWN0aW9uIGJvYXJkPGJyLz5cIn1lbHNlIGErPVwiZGlyZWN0aW9uIGJvYXJkPGJyLz5cIjtcImJpY3ljbGVcIj09Yi5yb3V0ZSYmKGErPVwiY3ljbGUgdHJhY2s8YnIvPlwiKTtcIm10YlwiPT1iLnJvdXRlJiYoYSs9XCJtb3VudGFpbiBiaWtlIHJvdXRlPGJyLz5cIik7XCJob3JzZVwiPT1iLnJvdXRlJiYoYSs9XCJicmlkbGV3YXk8YnIvPlwiKTtcImNvYXN0bGluZVwiPT1cbiAgICBiLm5hdHVyYWwmJihhKz1cImNvYXN0bGluZTxici8+XCIpO1wiY2xpZmZcIj09Yi5uYXR1cmFsJiYoYSs9XCJjbGlmZjxici8+XCIpO1wiZGFtXCI9PWIud2F0ZXJ3YXkmJihhKz1cImRhbTxici8+XCIpO1wid2VpclwiPT1iLndhdGVyd2F5JiYoYSs9XCJ3ZWlyPGJyLz5cIik7XCJsb2NrX2dhdGVcIj09Yi53YXRlcndheSYmKGErPVwibG9jayBnYXRlPGJyLz5cIik7XCJ5ZXNcIj09Yi5sb2NrJiYoYSs9XCJsb2NrPGJyLz5cIik7XCJzbHVpY2VfZ2F0ZVwiPT1iLndhdGVyd2F5JiYoYSs9XCJzbHVpY2UgZ2F0ZTxici8+XCIpO1wicHVtcGluZ19zdGF0aW9uXCI9PWIubWFuX21hZGUmJihhKz1cInB1bXBpbmcgc3RhdGlvbjxici8+XCIpO1wiZ3JveW5lXCI9PWIubWFuX21hZGUmJihhKz1cImdyb3luZTxici8+XCIpO1wiZHlrZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJkeWtlPGJyLz5cIik7XCJsZXZlZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJsZXZlZTxici8+XCIpO1wid2F0ZXJtaWxsXCI9PWIubWFuX21hZGUmJihhKz1cIndhdGVybWlsbDxici8+XCIpO1wiYWlyZmllbGRcIj09XG4gICAgYi5taWxpdGFyeSYmKGErPVwibWlsaXRhcnkgYWlyZmllbGQ8YnIvPlwiKTtcIm5hdmFsX2Jhc2VcIj09Yi5taWxpdGFyeSYmKGErPVwibmF2YWwgYmFzZTxici8+XCIpO1wicmFuZ2VcIj09Yi5taWxpdGFyeSYmKGErPVwibWlsaXRhcnkgcmFuZ2U8YnIvPlwiKTtcIm1pbGl0YXJ5XCI9PWIubGFuZHVzZSYmKGErPVwibWlsaXRhcnkgbGFuZCB1c2U8YnIvPlwiKTtcInRyYWluaW5nX2FyZWFcIj09Yi5taWxpdGFyeSYmKGErPVwibWlsaXRhcnkgdHJhaW5pbmcgYXJlYTxici8+XCIpO1wiZXhjbHVzaW9uX3pvbmVcIj09Yi5taWxpdGFyeSYmKGErPVwibWlsaXRhcnkgZXhjbHVzaW9uIHpvbmU8YnIvPlwiKTtcImRhbmdlcl9hcmVhXCI9PWIubWlsaXRhcnkmJihhKz1cIm1pbGl0YXJ5IGRhbmdlciBhcmVhPGJyLz5cIik7XCJiYXJyYWNrc1wiPT1iLm1pbGl0YXJ5JiYoYSs9XCJiYXJyYWNrczxici8+XCIpO1wibnVjbGVhcl9leHBsb3Npb25fc2l0ZVwiPT1iLm1pbGl0YXJ5JiYoYSs9XCJtaWxpdGFyeSBudWNsZWFyIGV4cGxvc2lvbiBzaXRlPGJyLz5cIik7XG4gICAgXCJ5ZXNcIj09Yi5jb25zdHJ1Y3Rpb24/YSs9XCJjb25zdHJ1Y3Rpb248YnIvPlwiOlwiY29uc3RydWN0aW9uXCI9PWIuaGlnaHdheSYmKGErPVwiY29uc3RydWN0aW9uPGJyLz5cIik7XCJwZXRyb2xldW1fd2VsbFwiPT1iLm1hbl9tYWRlJiYoYSs9XCJwZXRyb2xldW0gd2VsbDxici8+XCIpO1wic3RvcmFnZV90YW5rXCI9PWIubWFuX21hZGUmJihhKz1cInN0b3JhZ2UgdGFuazxici8+XCIpO1wid2FzdGV3YXRlcl9wbGFudFwiPT1iLm1hbl9tYWRlJiYoYSs9XCJ3YXN0ZXdhdGVyIHBsYW50PGJyLz5cIik7XCJzaWxvXCI9PWIubWFuX21hZGUmJihhKz1cInNpbG88YnIvPlwiKTtcIndhdGVyX3Rvd2VyXCI9PWIubWFuX21hZGUmJihhKz1cIndhdGVyIHRvd2VyPGJyLz5cIik7XCJ3aW5kbWlsbFwiPT1iLm1hbl9tYWRlJiYoYSs9XCJ3aW5kbWlsbDxici8+XCIpO1wibW9uaXRvcmluZ19zdGF0aW9uXCI9PWIubWFuX21hZGUmJihhKz1cIm1vbml0b3Jpbmcgc3RhdGlvblwiKTtcImNyYW5lXCI9PWIubWFuX21hZGUmJihhKz1cImNyYW5lXCIpO1wibGlnaHRob3VzZVwiPT1cbiAgICBiLm1hbl9tYWRlJiYoYSs9XCJsaWdodGhvdXNlXCIpO1wiYmVhY29uXCI9PWIubWFuX21hZGUmJihhKz1cImJlYWNvblwiKTtcImJyZWFrd2F0ZXJcIj09Yi5tYW5fbWFkZSYmKGErPVwiYnJlYWt3YXRlclwiKTtcImxhbXBcIj09Yi5tYW5fbWFkZSYmXCJzdHJlZXRfbGFtcFwiPT1iW1wibGFtcDp0eXBlXCJdJiYoYSs9XCJzdHJlZXQgbGFtcDxici8+XCIpO1wibGFudGVyblwiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwic3RyZWV0IGxhbXBcIik7XCJmbG9vZGxpZ2h0XCI9PWIubGlnaHRfc291cmNlJiYoYSs9XCJmbG9vZGxpZ2h0PGJyLz5cIik7XCJzaWduYWxfbGFtcFwiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwic2lnbmFsIGxhbXA8YnIvPlwiKTtcImF2aWF0aW9uXCI9PWIubGlnaHRfc291cmNlJiYoYSs9XCJhdmlhdGlvbjxici8+XCIpO1wid2FybmluZ1wiPT1iLmxpZ2h0X3NvdXJjZSYmKGErPVwid2FybmluZzxici8+XCIpO2lmKGIubGlnaHRfc291cmNlJiZiW1wibGlnaHQ6bWV0aG9kXCJdKXN3aXRjaChhKz1cIkxpZ2h0IFR5cDogXCIsYltcImxpZ2h0Om1ldGhvZFwiXSl7Y2FzZSBcImdhc1wiOmErPVxuICAgICAgICBcIkdhc1wiO2JyZWFrO2Nhc2UgXCJlbGVjdHJpY1wiOmErPVwiZWxlY3RyaWNcIjticmVhaztjYXNlIFwiaW5jYW5kZXNjZW50XCI6YSs9XCJpbmNhbmRlc2NlbnRcIjticmVhaztjYXNlIFwiaGFsb2dlblwiOmErPVwiaGFsb2dlblwiO2JyZWFrO2Nhc2UgXCJkaXNjaGFyZ2VcIjphKz1cImRpc2NoYXJnZVwiO2JyZWFrO2Nhc2UgXCJtZXRhbC1oYWxpZGVcIjphKz1cIm1ldGFsLWhhbGlkZVwiO2JyZWFrO2Nhc2UgXCJuZW9uXCI6YSs9XCJuZW9uXCI7YnJlYWs7Y2FzZSBcInNvZGl1bVwiOmErPVwiTmF0cml1bWRhbXBmbGFtcGVcIjticmVhaztjYXNlIFwiaGlnaF9wcmVzc3VyZV9zb2RpdW1cIjphKz1cImhpZ2ggcHJlc3N1cmUgc29kaXVtXCI7YnJlYWs7Y2FzZSBcImxvd19wcmVzc3VyZV9zb2RpdW1cIjphKz1cImxvdyBwcmVzc3VyZSBzb2RpdW1cIjticmVhaztjYXNlIFwiZmx1b3Jlc2NlbnRcIjphKz1cIkZsdW9yZXNjZW50XCI7YnJlYWs7Y2FzZSBcIm1lcmN1cnlcIjphKz1cIk1lcmN1cnlcIjticmVhaztjYXNlIFwiTEVEXCI6YSs9XCJMRURcIjticmVhaztjYXNlIFwibGFzZXJcIjphKz1cbiAgICAgICAgXCJMYXNlclwiO2JyZWFrO2Nhc2UgXCJhcmNcIjphKz1cIkFyY1wiO2JyZWFrO2RlZmF1bHQ6YSs9XCJVbmtvd25cIn1cImRyaW5raW5nX3dhdGVyXCI9PWIuYW1lbml0eSYmKGErPVwiZHJpbmtpbmcgd2F0ZXI8YnIvPlwiKTtcInllc1wiPT1iLmRyaW5raW5nX3dhdGVyJiYoYSs9XCJkcmlua2luZyB3YXRlcjxici8+XCIpO1wid29ya3NcIj09Yi5tYW5fbWFkZT9hKz1cImluZHVzdHJpYWwgYnVpbGRpbmc8YnIvPlwiOlwiaW5kdXN0cmlhbFwiPT1iLmJ1aWxkaW5nP2ErPVwiaW5kdXN0cmlhbCBidWlsZGluZzxici8+XCI6XCJpbmR1c3RyaWFsXCI9PWIubGFuZHVzZT9hKz1cImluZHVzdHJpYWwgYXJlYTxici8+XCI6XCJpbmR1c3RyaWFsXCI9PWIuYWJ1dHRlcnM/YSs9XCJpbmR1c3RyaWFsIGFyZWE8YnIvPlwiOlwiY29tbWVyY2lhbFwiPT1iLmFidXR0ZXJzJiYoYSs9XCJjb21tZXJjaWFsPGJyLz5cIik7aWYoYltcImdlbmVyYXRvcjpzb3VyY2VcIl0pc3dpdGNoKGErPVwiaW5zdGFsbGF0aW9uOiBcIixiW1wiZ2VuZXJhdG9yOnNvdXJjZVwiXSl7Y2FzZSBcImJpb21hc3NcIjphKz1cbiAgICAgICAgXCJiaW9tYXNzXCI7YnJlYWs7Y2FzZSBcImJpb2Z1ZWxcIjphKz1cImJpb2Z1ZWxcIjticmVhaztjYXNlIFwiYmlvZ2FzXCI6YSs9XCJiaW9nYXNcIjticmVhaztjYXNlIFwiY29hbFwiOmErPVwiY29hbFwiO2JyZWFrO2Nhc2UgXCJvaWxcIjphKz1cIm9pbFwiO2JyZWFrO2Nhc2UgXCJ3YXN0ZVwiOmErPVwid2FzdGVcIjticmVhaztjYXNlIFwid2luZFwiOmErPVwid2luZFwiO2JyZWFrO2Nhc2UgXCJzb2xhclwiOmErPVwic29sYXJcIjticmVhaztjYXNlIFwiaHlkcm9cIjphKz1cImh5ZHJvXCI7YnJlYWs7Y2FzZSBcInRpZGFsXCI6YSs9XCJ0aWRhbFwiO2JyZWFrO2Nhc2UgXCJ3YXZlXCI6YSs9XCJ3YXZlXCI7YnJlYWs7Y2FzZSBcImdlb3RoZXJtYWxcIjphKz1cImdlb3RoZXJtYWxcIjticmVhaztjYXNlIFwib3Ntb3RpY1wiOmErPVwib3Ntb3RpY1wiO2JyZWFrO2Nhc2UgXCJudWNsZWFyXCI6YSs9XCJudWNsZWFyXCI7YnJlYWs7ZGVmYXVsdDphKz1cInVua25vd248YnIvPlwifVwicGhvdG92b2x0YWljXCI9PWIucG93ZXJfc291cmNlJiYoYSs9XCJwaG90b3ZvbHRhaWNcIik7XCJsaW5lXCI9PVxuICAgIGIucG93ZXImJihhKz1cInBvd2VyIGxpbmU8YnIvPlwiKTtcImNhYmxlXCI9PWIucG93ZXImJihhKz1cImNhYmxlPGJyLz5cIik7XCJjYWJsZV9kaXN0cmlidXRpb25fY2FiaW5ldFwiPT1iLnBvd2VyJiYoYSs9XCJjYWJsZSBkaXN0cmlidXRpb24gY2FiaW5ldDxici8+XCIpO1wicGxhbnRcIj09Yi5wb3dlciYmKGErPVwicGxhbnQ8YnIvPlwiKTtcInN0YXRpb25cIj09Yi5wb3dlciYmKGErPVwic3RhdGlvbjxici8+XCIpO1wic3ViX3N0YXRpb25cIj09Yi5wb3dlciYmKGErPVwic3Vic3RhdGlvbjxici8+XCIpO1wiY29tcGVuc2F0b3JcIj09Yi5wb3dlciYmKGErPVwiY29tcGVuc2F0b3I8YnIvPlwiKTtcImNvbnZlcnRlclwiPT1iLnBvd2VyJiYoYSs9XCJjb252ZXJ0ZXI8YnIvPlwiKTtcImdlbmVyYXRvclwiPT1iLnBvd2VyJiYoYSs9XCJnZW5lcmF0b3I8YnIvPlwiKTtcImhlbGlvc3RhdFwiPT1iLnBvd2VyJiYoYSs9XCJoZWxpb3N0YXQ8YnIvPlwiKTtcImluc3VsYXRvclwiPT1iLnBvd2VyJiYoYSs9XCJpbnN1bGF0b3I8YnIvPlwiKTtcImJ1c2JhclwiPT1cbiAgICBiLmxpbmUmJihhKz1cImJ1c2Jhcjxici8+XCIpO1wiYmF5XCI9PWIubGluZSYmKGErPVwiYmF5PGJyLz5cIik7XCJtaW5vcl9saW5lXCI9PWIucG93ZXImJihhKz1cIm1pbm9yIGxpbmU8YnIvPlwiKTtcInBvbGVcIj09Yi5wb3dlciYmKGErPVwicG9sZTxici8+XCIpO1wicG9ydGFsXCI9PWIucG93ZXImJihhKz1cInBvcnRhbDxici8+XCIpO1wiY2F0ZW5hcnlfbWFzdFwiPT1iLnBvd2VyJiYoYSs9XCJjYXRlbmFyeSBtYXN0PGJyLz5cIik7XCJzdWJzdGF0aW9uXCI9PWIucG93ZXImJihhKz1cInN1YnN0YXRpb248YnIvPlwiKTtcInN3aXRjaFwiPT1iLnBvd2VyJiYoYSs9XCJzd2l0Y2g8YnIvPlwiKTtcInRlcm1pbmFsXCI9PWIucG93ZXImJihhKz1cInRlcm1pbmFsPGJyLz5cIik7XCJ0b3dlclwiPT1iLnBvd2VyJiYoYSs9XCJ0b3dlcjxici8+XCIpO1widHJhbnNmb3JtZXJcIj09Yi5wb3dlciYmKGErPVwidHJhbnNmb3JtZXI8YnIvPlwiKTtpZihiLmJhcnJpZXIpc3dpdGNoKGIuYmFycmllcil7Y2FzZSBcImJvbGxhcmRcIjphKz1cImJvbGxhcmQ8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwiY3ljbGVfYmFycmllclwiOmErPVwiY3ljbGUgYmFycmllcjxici8+XCI7YnJlYWs7Y2FzZSBcImdhdGVcIjphKz1cImdhdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaGFpblwiOmErPVwiY2hhaW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJsaWZ0X2dhdGVcIjphKz1cImxpZnQgZ2F0ZTxici8+XCI7YnJlYWs7Y2FzZSBcIndhbGxcIjphKz1cIndhbGw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0b2xsX2Jvb3RoXCI6YSs9XCJ0b2xsIGJvb3RoPGJyLz5cIjticmVhaztjYXNlIFwiZmVuY2VcIjpzd2l0Y2goYi5mZW5jZV90eXBlKXtjYXNlIFwiYmFyYmVkX3dpcmVcIjphKz1cImJhcmJlZCB3aXJlPGJyLz5cIjticmVhaztjYXNlIFwid29vZFwiOmErPVwid29vZDxici8+XCI7YnJlYWs7Y2FzZSBcImNoYWluX2xpbmtcIjphKz1cImNoYWluIGxpbms8YnIvPlwiO2JyZWFrO2Nhc2UgXCJlbGVjdHJpY1wiOmErPVwiZWxlY3RyaWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyYWlsaW5nXCI6YSs9XCJyYWlsaW5nPGJyLz5cIjticmVhaztjYXNlIFwid2lyZVwiOmErPVwid2lyZTxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJtZXRhbFwiOmErPVwibWV0YWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwb2xlXCI6YSs9XCJwb2xlPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiZmVuY2U8YnIvPlwifWJyZWFrO2Nhc2UgXCJibG9ja1wiOmErPVwiYmxvY2s8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkaXRjaFwiOmErPVwiZGl0Y2g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJib3JkZXJfY29udHJvbFwiOmErPVwiYm9yZGVyIGNvbnRyb2w8YnIvPlwiO2JyZWFrO2Nhc2UgXCJoZWRnZVwiOmErPVwiaGVkZ2U8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyZXRhaW5pbmdfd2FsbFwiOmErPVwicmV0YWluaW5nIHdhbGw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYXR0bGVfZ3JpZFwiOmErPVwiY2F0dGxlIGdyaWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJob3JzZV9zdGlsZVwiOmErPVwiaG9yc2Ugc3RpbGU8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmtub3duPGJyLz5cIn1cIm5vaXNlX2JhcnJpZXJcIj09Yi53YWxsJiYoYSs9XCJub2lzZSBiYXJyaWVyPGJyLz5cIik7XCJyZXRhaW5pbmdfd2FsbFwiPT1cbiAgICBiLmRlc2lnbmF0aW9uJiYoYSs9XCJub2lzZSBiYXJyaWVyPGJyLz5cIik7XCJub2lzZV9iYXJyaWVyXCI9PWIuZGVzaWduYXRpb24mJihhKz1cIm5vaXNlIGJhcnJpZXI8YnIvPlwiKTtcInN1cnZlaWxsYW5jZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJzdXJ2ZWlsbGFuY2U8YnIvPlwiKTtpZihiLmFlcm93YXkpc3dpdGNoKGErPVwiYWlycG9ydDogXCIsYi5hZXJvd2F5KXtjYXNlIFwiYWVyb2Ryb21lXCI6YSs9XCJhaXJwb3J0XCI7YnJlYWs7Y2FzZSBcImFwcm9uXCI6YSs9XCJhcHJvblwiO2JyZWFrO2Nhc2UgXCJnYXRlXCI6YSs9XCJnYXRlXCI7YnJlYWs7Y2FzZSBcImhlbGlwYWRcIjphKz1cImhlbGlwYWRcIjticmVhaztjYXNlIFwiaGFuZ2FyXCI6YSs9XCJoYW5nYXJcIjticmVhaztjYXNlIFwicnVud2F5XCI6YSs9XCJydW53YXlcIjticmVhaztjYXNlIFwidGF4aXdheVwiOmErPVwidGF4aXdheVwiO2JyZWFrO2Nhc2UgXCJ0ZXJtaW5hbFwiOmErPVwidGVybWluYWxcIjticmVhaztkZWZhdWx0OmErPVwidW5rbm93bjxici8+XCJ9XCJzdG9wXCI9PWIucmFpbHdheSYmXG4gICAgKGErPVwicmFpbHdheSBzdG9wPGJyLz5cIik7XCJjcm9zc2luZ1wiPT1iLnJhaWx3YXkmJihhKz1cImNyb3NzaW5nPGJyLz5cIik7XCJsZXZlbF9jcm9zc2luZ1wiPT1iLnJhaWx3YXkmJihhKz1cImx2ZWwgY3Jvc3Npbmc8YnIvPlwiKTtcInN0YXRpb25cIj09Yi5yYWlsd2F5JiYoYSs9XCJzdGF0aW9uPGJyLz5cIik7XCJidXNfc3RhdGlvblwiPT1iLmFtZW5pdHkmJihhKz1cImJ1cyBzdGF0aW9uPGJyLz5cIik7XCJidXNfc3RhdGlvblwiPT0hYi5hbWVuaXR5JiYoXCJzdGF0aW9uXCI9PWIucHVibGljX3RyYW5zcG9ydCYmXCJ5ZXNcIj09Yi5idXMpJiYoYSs9XCJidXMgc3RhdGlvbjxici8+XCIpO1wicmFpbFwiPT1iLnJhaWx3YXkmJihhKz1cInJhaWx3YXk8YnIvPlwiLFwiY29udGFjdF9saW5lXCI9PWIuZWxlY3RyaWZpZWQmJihhKz1cIm92ZXJoZWFkIGNvbnRhY3QgbGluZTxici8+XCIpKTtcInRyYW1cIj09Yi5yYWlsd2F5JiYoYSs9XCJ0cmFtPGJyLz5cIik7aWYoXCJzbGlwd2F5XCI9PWJbXCJzZWFtYXJrOnNtYWxsX2NyYWZ0X2ZhY2lsaXR5OmNhdGVnb3J5XCJdfHxcbiAgICAgICAgXCJzbGlwd2F5XCI9PWIuaGFyYm91cnx8XCJzbGlwd2F5XCI9PWIubGVpc3VyZSlhKz1cInNsaXB3YXk8YnIvPlwiO2lmKFwiaGFyYm91clwiPT1iW1wic2VhbWFyazp0eXBlXCJdKWlmKGJbXCJzZWFtYXJrOmhhcmJvdXI6Y2F0ZWdvcnlcIl0pc3dpdGNoKGJbXCJzZWFtYXJrOmhhcmJvdXI6Y2F0ZWdvcnlcIl0pe2Nhc2UgXCJmZXJyeVwiOmErPVwiZmVycnk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb250YWluZXJcIjphKz1cImNvbnRhaW5lcjxici8+XCI7YnJlYWs7Y2FzZSBcIm1hcmluYVwiOlwibWFyaW5hXCIhPWIubGVpc3VyZSYmKGErPVwibWFyaW5hPGJyLz5cIik7YnJlYWs7Y2FzZSBcIm5hdmVsX2Jhc2VcIjphKz1cIm5hdmVsIGJhc2U8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ0YW5rZXJcIjphKz1cInRhbmtlcjxici8+XCI7YnJlYWs7Y2FzZSBcInBhc3NlbmdlclwiOmErPVwicGFzc2VuZ2VyPGJyLz5cIjticmVhaztjYXNlIFwiYnVsa1wiOmErPVwiYnVsazxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cImhhYm91cjxici8+XCJ9ZWxzZSBhKz1cImhhYm91cjxici8+XCI7XG4gICAgXCJtYXJpbmFcIj09Yi5sZWlzdXJlJiYoYSs9XCJtYXJpbmE8YnIvPlwiKTtcIndyZWNrXCI9PWIuaGlzdG9yaWMmJihhKz1cIndyZWNrPGJyLz5cIik7XCJhbmltYWxfc2hlbHRlclwiPT1iLmFtZW5pdHkmJihhKz1cImFuaW1hbCBzaGVsdGVyPGJyLz5cIik7XCJzaGVsdGVyXCI9PWIuYW5pbWFsJiYoYSs9XCJzaGVsdGVyPGJyLz5cIik7XCJob3JzZV93YWxrZXJcIj09Yi5hbmltYWwmJihhKz1cImhvcnNlIHdhbGtlcjxici8+XCIpO1wieWVzXCI9PWIuYW5pbWFsX3NoZWx0ZXImJihhKz1cImFuaW1hbCBzaGVsdGVyPGJyLz5cIik7XCJkb2dcIj09Yi5hbmltYWxfc2hlbHRlciYmKGErPVwiYW5pbWFsIHNoZWx0ZXI8YnIvPlwiKTtcImNhdFwiPT1iLmFuaW1hbF9zaGVsdGVyJiYoYSs9XCJhbmltYWwgc2hlbHRlcjxici8+XCIpO1wiYW5pbWFsX2JvYXJkaW5nXCI9PWIuYW1lbml0eSYmKGErPVwiYW5pbWFsIGJvYXJkaW5nPGJyLz5cIik7XCJ5ZXNcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cImFuaW1hbCBib2FyZGluZzxici8+XCIpO1wiZG9nXCI9PVxuICAgIGIuYW5pbWFsX2JvYXJkaW5nJiYoYSs9XCJhbmltYWwgYm9hcmRpbmc8YnIvPlwiKTtcImhvcnNlXCI9PWIuYW5pbWFsX2JvYXJkaW5nJiYoYSs9XCJhbmltYWwgYm9hcmRpbmc8YnIvPlwiKTtcImNhdFwiPT1iLmFuaW1hbF9ib2FyZGluZyYmKGErPVwiYW5pbWFsIGJvYXJkaW5nPGJyLz5cIik7XCJkb2c7Y2F0XCI9PWIuYW5pbWFsX2JvYXJkaW5nJiYoYSs9XCJhbmltYWwgYm9hcmRpbmc8YnIvPlwiKTtcImNhdDtkb2dcIj09Yi5hbmltYWxfYm9hcmRpbmcmJihhKz1cImFuaW1hbCBib2FyZGluZzxici8+XCIpO2lmKFwic2Nob29sXCI9PWIuYW5pbWFsfHxcInNwb3J0XCI9PWIuYW5pbWFsfHxcImFuaW1hbF90cmFpbmluZ1wiPT1iLmFtZW5pdHkpYSs9XCJhbmltYWwgdHJhaW5pbmc8YnIvPlwiO1wic3dpbW1pbmdcIj09Yi5hbmltYWwmJihhKz1cInN3aW1taW5nIGZvciBkb2dzPGJyLz5cIik7aWYoXCJmZWVkaW5nX3BsYWNlXCI9PWIuYW1lbml0eXx8XCJhbmltYWxfZmVlZGluZ1wiPT1iLm1hbl9tYWRlfHxcImFuaW1hbF9mZWVkaW5nXCI9PVxuICAgICAgICBiLmFtZW5pdHkpYSs9XCJhbmltYWwgZmVlZGluZzxici8+XCI7aWYoXCJ3aWxkbGlmZV9mZWVkaW5nXCI9PWIuYW1lbml0eXx8XCJkZWVyX2ZlZWRpbmdcIj09Yi5hbWVuaXR5fHxcImdhbWVfZmVlZGluZ1wiPT1iLmFtZW5pdHkpYSs9XCJ3aWxkbGlmZSBmZWVkaW5nPGJyLz5cIjtpZihcImNyYXRjaFwiPT1iLmFtZW5pdHl8fFwiY3JhdGNoXCI9PWIubWFuX21hZGV8fFwiZmVlZGluZ19yYWNrXCI9PWIuYW1lbml0eSlhKz1cImZlZWRpbmcgcmFjazxici8+XCI7XCJtYW5nZXJcIj09Yi5hbWVuaXR5JiYoYSs9XCJtYW5nZXI8YnIvPlwiKTtcImJpcmRob3VzZVwiPT1iLm1hbl9tYWRlJiYoYSs9XCJiaXJkaG91c2U8YnIvPlwiKTtcInN0b3JrXCI9PWIuYmlyZHNfbmVzdCYmKGErPVwic3RvcmNrPGJyLz5cIik7XCJuZXN0X2JveFwiPT1iLmFtZW5pdHkmJihhKz1cIm5lc3QgYm94PGJyLz5cIik7XCJ3ZWxsbmVzc1wiPT1iLmFuaW1hbCYmKGErPVwiZG9nIHBhcmxvdXI8YnIvPlwiKTtcImNlbWV0ZXJ5XCI9PWIuYW5pbWFsJiYoYSs9XCJzbWFsbCBhbmltYWwgY2VtZXRlcnk8YnIvPlwiKTtcbiAgICBpZihcInN0YWJsZVwiPT1iLmJ1aWxkaW5nfHxcInN0YWJsZVwiPT1iW1wiYnVpbGRpbmc6dXNlXCJdKWErPVwic3RhYmxlPGJyLz5cIjtcImNvd3NoZWRcIj09Yi5idWlsZGluZyYmKGErPVwiY293c2hlZDxici8+XCIpO1wic3R5XCI9PWIuYnVpbGRpbmcmJihhKz1cInN0eTxici8+XCIpO1wiYmFyblwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJiYXJuPGJyLz5cIik7XCJmYXJtX2F1eGlsaWFyeVwiPT1iLmJ1aWxkaW5nJiYoYSs9XCJmYXJtIGF1eGlsaWFyeTxici8+XCIpO2lmKGJbXCJyaXZlcjp3YXRlcndheV9kaXN0YW5jZVwiXXx8XCJtaWxlc3RvbmVcIj09Yi53YXRlcndheSlhKz1cIm1pbGVzdG9uZSBvZiB3YXRlcndheSBkaXN0YW5jZTxici8+XCI7XCJtaWxlc3RvbmVcIj09Yi5oaWdod2F5JiYoYSs9XCJtaWxlc3RvbmU8YnIvPlwiKTtcIm1hcmtldFwiPT1iW1wieG1hczpmZWF0dXJlXCJdJiYoYSs9XCJDaHJpc3RtYXMgZmFpcjxici8+XCIpO1widHJlZVwiPT1iW1wieG1hczpmZWF0dXJlXCJdJiYoYSs9XCJzYWxlIG9mIENocmlzbWFzIHRyZWVzPGJyLz5cIik7XG4gICAgXCJldmVudFwiPT1iW1wieG1hczpmZWF0dXJlXCJdJiYoYSs9XCJDaHJpc21hcyBldmVudDxici8+XCIpO1wicHlyYW1pZFwiPT1iW1wieG1hczpmZWF0dXJlXCJdJiYoYSs9XCJDaHJpc21hcyBweXJhbWlkPGJyLz5cIik7cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfaGVhZGVyX2ZlYXR1cmV0eXBlXCI+JythK1wiPGJyLz4gPC9kaXY+XCJ9XG5leHBvcnQgdmFyIGZuQ29udGVudD1mdW5jdGlvbihiKXt2YXIgYTthPVwiXCIrZm5Db250ZW50R2VuZXJhbEluZm9ybWF0aW9ucyhiKTthKz1mbkNvbnRlbnRIZWFsdGhjYXJlKGIpO2ErPWZuQ29udGVudEFlcm9kcm9tZShiKTthKz1mbkNvbnRlbnRDdWlzaW5lKGIpO2ErPWZuQ29udGVudFNoaXBwaW5nKGIpO2ErPWZuQ29udGVudEh5ZHJhbnRzKGIpO2ErPWZuQ29udGVudFNwb3J0cyhiKTthKz1mbkNvbnRlbnRTdHJlZXRzVHJhZmZpYyhiKTthKz1mbkNvbnRlbnRJbmZvcm1hdGlvbkNpdHkoYik7YSs9Zm5Db250ZW50RW1lcmdlbmN5KGIpO2ErPWZuQ29udGVudFN0b3JhZ2UoYik7YSs9Zm5Db250ZW50QW1lbml0eShiKTthKz1mbkNvbnRlbnRUb3VyaXNtKGIpO2ErPWZuQ29udGVudFJvdXRlKGIpO2ErPWZuQ29udGVudFBldHJvbChiKTthKz1mbkNvbnRlbnRCYXJyaWVycyhiKTthKz1mbkNvbnRlbnRMYW5kdXNlKGIpO2ErPWZuQ29udGVudE5hdHVyYWwoYik7YSs9Zm5LbG9zdGVyQWRkaXRpb25hbChiKTtcbiAgICAgICAgYSs9Zm5TaWNoZXJoZWl0QWRkaXRpb25hbChiKTthKz1mbkFkZGl0aW9uYWxCdWlsZGluZ0luZm9zKGIpO2ErPWZuS3JhZnR3ZXJrSW5mbyhiKTthKz1mbk1lc3NzdGF0aW9uKGIpO2ErPWZuV2VydHN0b2ZmaW5mbyhiKTsoYSs9Zm5Db250ZW50UHJvdGVjdGVkQXJlYShiKSkmJihhPVwiPGJyLz5cIithKTtyZXR1cm4nPGRpdiBjbGFzcz1cImM0Z19wb3B1cF9jb250ZW50XCI+JythK1wiPC9kaXY+XCJ9LGZuQ29udGVudEFlcm9kcm9tZT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2IuYWVyb2Ryb21lJiYoXCJpbnRlcm5hdGlvbmFsXCI9PWIuYWVyb2Ryb21lJiYoYSs9XCJ0eXBlIG9mIGFpcnBvcnQ6IGludGVybmF0aW9uYWw8YnIvPlwiKSxcInJlZ2lvbmFsXCI9PWIuYWVyb2Ryb21lJiYoYSs9XCJ0eXBlIG9mIGFpcnBvcnQ6IHJlZ2lvbmFsPGJyLz5cIiksXCJnbGlkaW5nXCI9PWIuYWVyb2Ryb21lJiYoYSs9XCJ0eXBlIG9mIGFpcnBvcnQ6IGdsaWRpbmc8YnIvPlwiKSxcInByaXZhdGVcIj09Yi5hZXJvZHJvbWUmJihhKz1cbiAgICAgICAgXCJ0eXBlIG9mIGFpcnBvcnQ6IHByaXZhdGU8YnIvPlwiKSk7Yi5pYXRhJiYoYSs9XCJJQVRBLUNvZGU6IFwiK2IuaWF0YStcIjxici8+XCIpO2IuaWNhbyYmKGErPVwiSUNBTy1Db2RlOiBcIitiLmljYW8rXCI8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50TmF0dXJhbD1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKGIuZm9yZXN0fHxiLndvb2Qpe2lmKFwiYnJvYWRsZWF2ZWRcIj09Yi5sZWFmX3R5cGV8fFwiZGVjaWR1b3VzXCI9PWIud29vZClhKz1cImJyb2FkbGVhdmVkPGJyLz5cIjtpZihcIm5lZWRsZWxlYXZlZFwiPT1iLmxlYWZfdHlwZXx8XCJjb25pZmVyb3VzXCI9PWIud29vZClhKz1cIm5lZWRsZWxlYXZlZDxici8+XCI7aWYoXCJtaXhlZFwiPT1iLmxlYWZfdHlwZXx8XCJtaXhlZFwiPT1iLndvb2QpYSs9XCJtaXhlZDxici8+XCI7XCJsZWFmbGVzc1wiPT1iLmxlYWZfdHlwZSYmKGErPVwibGVhZmxlc3M8YnIvPlwiKTtcImV2ZXJncmVlblwiPT1iLndvb2QmJihhKz1cImV2ZXJncmVlbjxici8+XCIpO1wicGFsbVwiPT1iLndvb2QmJihhKz1cbiAgICAgICAgXCJwYWxtPGJyLz5cIik7XCJuaXBhX3BhbG1cIj09Yi53b29kJiYoYSs9XCJuaXBhIHBhbG08YnIvPlwiKTtcImV1Y2FseXB0XCI9PWIud29vZCYmKGErPVwiZXVjYWx5cHQ8YnIvPlwiKTtpZihcImZpbGFvXCI9PWIud29vZHx8XCJjYXN1YXJpbmFcIj09Yi53b29kKWErPVwiY2FzdWFyaW5hPGJyLz5cIn1pZihcInRyZWVcIj09Yi5uYXR1cmFsJiYoIWJbXCJnZW51czpkZVwiXSYmIWJbXCJzcGVjaWVzOmRlXCJdJiZiLmxlYWZfdHlwZSYmKGE9XCJicm9hZGxlYXZlZFwiPT1iLmxlYWZfdHlwZXx8XCJkZWNpZHVvdXNcIj09Yi5sZWFmX3R5cGV8fFwiYnJvYWRsZWFmZWRcIj09Yi5sZWFmX3R5cGU/YStcImJyb2FkLWxlYXZlZDxici8+XCI6YStcImNvbmlmZXI8YnIvPlwiKSxiLmdlbnVzJiYoYSs9Yi5nZW51cytcIjxici8+XCIpLGJbXCJnZW51czpkZVwiXSYmKGErPWJbXCJnZW51czpkZVwiXStcIjxici8+XCIpLGIuc3BlY2llcyYmKGErPWIuc3BlY2llcytcIjxici8+XCIpLGJbXCJzcGVjaWVzOmRlXCJdJiYoYSs9YltcInNwZWNpZXM6ZGVcIl0rXCI8YnIvPlwiKSxcbiAgICBcImxhbmRtYXJrXCI9PWIuZGVub3RhdGlvbiYmKGErPVwibGFuZG1hcms8YnIvPlwiKSxcIm5hdHVyYWxfbW9udW1lbnRcIj09Yi5kZW5vdGF0aW9ufHxcInllc1wiPT1iLm1vbnVtZW50KSlhKz1cIm5hdHVyYWwgbW9udW1lbnQ8YnIvPlwiO1wibWFuZ2VyXCI9PWJbXCJmZWVkaW5nOnR5cGVcIl0mJihhKz1cIm1hbmdlcjpyYWNrIGZvciBmb2RkZXI8YnIvPlwiKTtcImF1dG9tYXRlZFwiPT1iW1wiZmVlZGluZzp0eXBlXCJdJiYoYSs9XCJhdXRvbWF0ZWQ8YnIvPlwiKTtpZihiW1wiZmVlZGluZzpmb3JcIl0pc3dpdGNoKGJbXCJmZWVkaW5nOmZvclwiXSl7Y2FzZSBcInNoZWVwXCI6YSs9XCJhbmltYWw6IHNoZWVwPGJyLz5cIjticmVhaztjYXNlIFwiaG9yc2VcIjphKz1cImFuaW1hbDogaG9yc2U8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb3dcIjphKz1cImFuaW1hbDogY293PGJyLz5cIjticmVhaztjYXNlIFwicmFiYml0XCI6YSs9XCJhbmltYWw6IHJhYmJpdDxici8+XCI7YnJlYWs7Y2FzZSBcImJ1bm55XCI6YSs9XCJhbmltYWw6IGJ1bm55PGJyLz5cIjticmVhaztcbiAgICAgICAgY2FzZSBcImNhdFwiOmErPVwiYW5pbWFsOiBjYXQgPC9icj5cIjticmVhaztjYXNlIFwic3dhblwiOmErPVwiYW5pbWFsOiBzd2FuIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImd1aW5lYSBwaWdcIjphKz1cImFuaW1hbDogZ3VpbmVhIHBpZyA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJkb25rZXlcIjphKz1cImFuaW1hbDogZG9ua2V5IDwvYnI+XCI7YnJlYWs7Y2FzZSBcInNxdWlycmVsXCI6YSs9XCJhbmltYWw6IHNxdWlycmVsIDwvYnI+XCI7YnJlYWs7Y2FzZSBcInBpZ1wiOmErPVwiYW5pbWFsOiBwaWcgPC9icj5cIjticmVhaztjYXNlIFwiZGVlclwiOmErPVwiYW5pbWFsOiBkZWVyIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImd1aW5lYSBwaWdcIjphKz1cImFuaW1hbDogZ3VpbmVhIHBpZyA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJtb25rZXlcIjphKz1cImFuaW1hbDogbW9ua2V5IDwvYnI+XCI7YnJlYWs7Y2FzZSBcImNhbWVsXCI6YSs9XCJhbmltYWw6IGNhbWVsIDwvYnI+XCI7YnJlYWs7Y2FzZSBcImdvYXRcIjphKz1cImFuaW1hbDogZ29hdCA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJoYW1zdGVyXCI6YSs9XG4gICAgICAgICAgICBcImFuaW1hbDogaGFtc3RlciA8L2JyPlwiO2JyZWFrO2Nhc2UgXCJhbHBhY2FcIjphKz1cImFuaW1hbDogYWxwYWNhIDwvYnI+XCI7YnJlYWs7ZGVmYXVsdDphKz1cImFuaW1hbDogdW5rbm93bjxici8+XCJ9aWYoYltcImZlZWRpbmc6Zm9kZGVyXCJdKXN3aXRjaChiW1wiZmVlZGluZzpmb2RkZXJcIl0pe2Nhc2UgXCJoYXlcIjphKz1cImZlZWQgd2l0aDogaGF5PC9icj5cIjticmVhaztjYXNlIFwiZ3JhaW5cIjphKz1cImZlZWQgd2l0aDogZ3JhaW48L2JyPlwiO2JyZWFrO2Nhc2UgXCJjb3JuXCI6YSs9XCJmZWVkIHdpdGg6IGNvcm48Lypicj5cIjticmVhaztkZWZhdWx0OmErPVwiZmVlZCB3aXRoOiB1bmtub3duPC9icj5cIn1cInZvbGNhbm9cIj09Yi5uYXR1cmFsJiZcImFjdGl2ZVwiPT1iLnN0YXR1cyYmKGErPVwiYWN0aXZlIHZvbGNhbm88YnIvPlwiKTtcInZvbGNhbm9cIj09Yi5uYXR1cmFsJiZcImRvcm1hbnRcIj09Yi5zdGF0dXMmJihhKz1cImRvcm1hbnQgdm9sY2Fubzxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwiZXh0aW5jdFwiPT1cbiAgICBiLnN0YXR1cyYmKGErPVwiZXh0aW5jdCB2b2xjYW5vPGJyLz5cIik7XCJ2b2xjYW5vXCI9PWIubmF0dXJhbCYmXCJzdHJhdG92b2xjYW5vXCI9PWIudHlwZSYmKGErPVwidHlwZSBvZiB2b2xjYW5pc206c3RyYXRvdm9sY2Fubzxici8+XCIpO1widm9sY2Fub1wiPT1iLm5hdHVyYWwmJlwic2hpZWxkXCI9PWIudHlwZSYmKGErPVwidHlwZSBvZiB2b2xjYW5pc206c2hpZWxkPGJyLz5cIik7XCJ2b2xjYW5vXCI9PWIubmF0dXJhbCYmXCJzY29yaWFcIj09Yi50eXBlJiYoYSs9XCJ0eXBlIG9mIHZvbGNhbmlzbTpzY29yaWE8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50UHJvdGVjdGVkQXJlYT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiLGM9XCJcIjtcInByb3RlY3RlZF9hcmVhXCI9PWIuYm91bmRhcnkmJihiLnByb3RlY3RfY2xhc3MmJihjPWIucHJvdGVjdF9jbGFzcyksYi5wcm90ZWN0X2lkJiYoYz1iLnByb3RlY3RfaWQpLFwiMVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBTdHJpY3QgTmF0dXJlIFJlc2VydmUsIFdpbGRlcm5lc3MgQXJlYTxici8+XCIpLFxuICAgIFwiMlwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBOYXRpb25hbCBQYXJrPGJyLz5cIiksXCIzXCI9PWMmJihhPVwiZGVzY3JpcHRpb246IE5hdHVyYWwgTW9udW1lbnQgb3IgRmVhdHVyZTxici8+XCIpLFwiNFwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBIYWJpdGF0L1NwZWNpZXMgTWFuYWdlbWVudCBBcmVhPGJyLz5cIiksXCI1XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IFByb3RlY3RlZCBMYW5kc2NhcGUvIFNlYXNjYXBlPGJyLz5cIiksXCI2XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IFByb3RlY3RlZCBhcmVhIHdpdGggc3VzdGFpbmFibGUgdXNlIG9mIG5hdHVyYWwgcmVzb3VyY2VzPGJyLz5cIiksXCI3XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IG5hdHVyZS1mZWF0dXJlIGFyZWE8YnIvPlwiKSxcIjk3XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IHByb3RlY3RlZCBieSBjb250aW5lbnRhbCBhZ3JlZW1lbnRzPGJyLz5cIiksXCI5OFwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBwcm90ZWN0ZWQgYnkgaW50ZXJzdGF0ZS0gb3IgaW50ZXJuYXRpb25hbCBjb252ZW50aW9uczxici8+XCIpLFxuICAgIFwiOTlcIj09YyYmKGE9XCJvdGhlciBjb250aW5lbnRhbCBvciBpbnRlcm5hdGlvbmFsIG5hdGlvbmFsIHByb3RlY3RlZCBhcmVhcyA8YnIvPlwiKSxcIjIxXCI9PWMmJihhPVwiZGVzY3JpcHRpb246IENvbW11bml0eSBsaWZlOiByZWxpZ2lvdXMsIHNhY3JlZCBhcmVhcywgYXNzb2NpYXRpdmUgbG9jYXRpb25zLCByZWNyZWF0aW9uPGJyLz5cIiksXCIyMlwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBDdWx0dXJhbCBhc3NldHMgKGN1bHR1cmFsIGFzc2V0cyBhbmQgLSBlZmZvcnRzLCBkaXN0cmljdHMgaGlzdG9yaWNhbCBoZXJpdGFnZSwgbW9udW1lbnQgY29uc2VydmF0aW9uKTxici8+XCIpLFwiMjNcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogUHJvdGVjdGlvbiBpbiBmYXZvciBvZiBlY29ub21pY3M8YnIvPlwiKSxcIjI0XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IFBvbGl0aWNhbCBwcm90ZWN0aW9uPGJyLz5cIiksXCIyNVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBNaWxpdGFyeSBhcmVhcyAobWlsaXRhcnkgcmVmdWdlcywgdGVzdCBhcmVhKTxici8+XCIpLFxuICAgIFwiMjZcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogSGlzdG9yaWM6IGZvciBjb2xvbmlhbC1zdHVmZiBhbmQgcHJvdGVjdG9yYXRlcy48YnIvPlwiKSxcIjI5XCI9PWMmJihhPVwiZGVzY3JpcHRpb246IG90aGVyIHNvY2lhbCBwcm90ZWN0ZWQgYXJlYXM8YnIvPlwiKSxcIjExXCI9PWMmJihhPVwiZGVzY3JpcHRpb246IHNvaWw6IGNyb3AgeWllbGQsIGVyb3Npb24gcHJvdGVjdGlvbiwgLi4uPGJyLz5cIiksXCIxMlwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiB3YXRlcjogd2F0ZXIgcHJvdGVjdGlvbiBhcmVhLCBmcmVzaCB3YXRlciwgZHJpbmtpbmcgd2F0ZXIsIHNwcmluZ3MsIC4uLjxici8+XCIpLFwiMTNcIj09YyYmKGE9J2Rlc2NyaXB0aW9uOiBjbGltYXRlIGFuZCAtYWlyOiBnYXNwZXIgc3VwcGx5L2NvbGQgYWlyLCAuLi5mb3IgZW1pc3Npb24tLCBpbW1pc3Npb24gY29udHJvbCBpbiBPU00gZXhpc3RlbnQsIHNlZSBcIkxvdyBFbWlzc2lvbiBab25lXCIgKExFWik8YnIvPicpLFwiMTRcIj09YyYmKGE9XCJkZXNjcmlwdGlvbjogc3BlY2llczogbm8gZmlzaGluZywgcHJvdGVjdGVkIGZvciBmaXNoZXJ5LCBwcm90ZWN0ZWQgZm9yIGh1bnRpbmcsIHBsYW50cywgLi4uPGJyLz5cIiksXG4gICAgXCIxNVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBsb2NhdGlvbiBjb25kaXRpb246IGZsb29kd2F0ZXIgcmV0ZW50aW9uIGFyZWEsIHByb3RlY3Rpb24gZm9yZXN0LCBncmF6aW5nIGxhbmQsIC4uLjxici8+XCIpLFwiMTZcIj09YyYmKGE9J2Rlc2NyaXB0aW9uOiBsb25ndGltZSBoYXphcmQgYXJlYTogY29udGFtaW5hdGlvbiwgZWFydGgtbW92aW5nIGFyZWEsIFwicHJvYmxlbSBzaXRlc1wiIC4uLjxici8+JyksXCIxOVwiPT1jJiYoYT1cImRlc2NyaXB0aW9uOiBvdGhlciBuYXRpb25hbCByZXNvdXJjZXMgcHJvdGVjdGVkIGFyZWFzPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRMYW5kdXNlPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJxdWFycnlcIj09Yi5sYW5kdXNlJiZiLnJlc291cmNlJiYoYSs9XCJSZXNvdXJjZTogXCIrYi5yZXNvdXJjZStcIjxici8+XCIpO1wib3Blbl9zdGFibGVcIj09YltcImFuaW1hbF9rZWVwaW5nOnR5cGVcIl0mJihhKz1cIm9wZW4gc3RhYmxlPGJyLz5cIik7XCJmaWVsZF9zaGVsdGVyXCI9PVxuICAgIGJbXCJhbmltYWxfa2VlcGluZzp0eXBlXCJdJiYoYSs9XCJmaWVsZCBzaGVsdGVyPGJyLz5cIik7XCJwYWRkb2NrXCI9PWJbXCJhbmltYWxfa2VlcGluZzp0eXBlXCJdJiYoYSs9XCJwYWRkb2NrPGJyLz5cIik7Yi5hbmltYWxfa2VlcGluZyYmKGErPVwiYW5pbWFsczogaG9yc2VzPGJyLz5cIik7cmV0dXJuIGF9LGZuTWVzc3N0YXRpb249ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtcInllc1wiPT1iW1wibW9uaXRvcmluZzp3YXRlcl9sZXZlbFwiXSYmKGErPVwid2F0ZXIgbGV2ZWw8YnIvPlwiKTtcInllc1wiPT1iW1wibW9uaXRvcmluZzpzZWlzbWljX2FjdGl2aXR5XCJdJiYoYSs9XCJzZWlzbWljIGFjdGl2aXR5PGJyLz5cIik7XCJ5ZXNcIj09YltcIm1vbml0b3Jpbmc6dGlkZV9nYXVnZVwiXSYmKGErPVwidGlkZSBnYXVnZTxici8+XCIpO1wieWVzXCI9PWJbXCJtb25pdG9yaW5nOndlYXRoZXJcIl0mJihhKz1cIndlYXRoZXI8YnIvPlwiKTtcInllc1wiPT1iW1wibW9uaXRvcmluZzphaXJfcXVhbGl0eVwiXSYmKGErPVwiYWlyIHF1YWxpdHk8YnIvPlwiKTtyZXR1cm4gYX0sXG4gICAgZm5Db250ZW50Um91dGU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtiLnJvdXRlJiYoXCJ5ZXNcIj09Yi5yb3VuZHRyaXAmJihhKz1cInJvdW5kdHJpcDxici8+XCIpLGIubGVuZ3RoJiYoYSs9XCJsZW5ndGg6IFwiK2IubGVuZ3RoK1wiPGJyLz5cIiksYi5kaXN0YW5jZSYmKGErPVwiZGlzdGFuY2U6IFwiK2IuZGlzdGFuY2UrXCI8YnIvPlwiKSxiLnN5bWJvbCYmKGErPVwic3ltYm9sOiBcIitiLnN5bWJvbCtcIjxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50UGV0cm9sPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJmdWVsXCI9PWIuYW1lbml0eSYmKFwieWVzXCI9PWJbXCJmdWVsOmJpb2RpZXNlbFwiXSYmKGErPVwiYmlvZGllc2VsPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6ZTg1XCJdJiYoYSs9XCJlODU8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDplMTBcIl0mJihhKz1cImUxMDxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOmxwZ1wiXSYmKGErPVwibHBnPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6Y25nXCJdJiYoYSs9XCJjbmc8YnIvPlwiKSxcImRpZXNlbFwiPT1cbiAgICBiLmZ1ZWwmJihhKz1cImRpZXNlbDxici8+XCIpLFwibHBnXCI9PWIuZnVlbCYmKGErPVwibHBnPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6b2N0YW5lXzk1XCJdJiYoYSs9XCJvY3RhbmUgOTU8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpvY3RhbmVfOThcIl0mJihhKz1cIm9jdGFuZSA5ODxici8+XCIpLFwieWVzXCI9PWJbXCJmdWVsOm9jdGFuZV8xMDBcIl0mJihhKz1cIm9jdGFuZSAxMDA8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDpvY3RhbmVfMTAyXCJdJiYoYSs9XCJvY3RhbmUgMTAyPGJyLz5cIiksXCJ5ZXNcIj09YltcImZ1ZWw6ZGllc2VsXCJdJiYoYSs9XCJkaWVzZWw8YnIvPlwiKSxcInllc1wiPT1iW1wiZnVlbDplbGVjdHJpY2l0eVwiXSYmKGErPVwiY2hhcmdpbmcgc3RhdGlvbiAvIGxvYWRpbmcgc3RhdGlvbjxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50SGlzdG9yaWM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImFyY2hhZW9sb2dpY2FsX3NpdGVcIj09Yi5oaXN0b3JpYyYmYi5zaXRlX3R5cGUpc3dpdGNoKGIuc2l0ZV90eXBlKXtjYXNlIFwibWVnYWxpdGhcIjphKz1cbiAgICAgICAgXCJtZWdhbGl0aDxici8+XCI7YnJlYWs7Y2FzZSBcImJpZ3N0b25lXCI6YSs9XCJiaWdzdG9uZTxici8+XCI7YnJlYWs7Y2FzZSBcInR1bXVsdXNcIjphKz1cInR1bXVsdXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmb3J0aWZpY2F0aW9uXCI6YSs9XCJmb3J0aWZpY2F0aW9uPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidW5rbm93bjxici8+XCJ9cmV0dXJuIGF9LGZuQ29udGVudEJhcnJpZXJzPWZ1bmN0aW9uKGIsYSl7dmFyIGM9XCJcIjtpZihcIndhbGxcIj09Yi5iYXJyaWVyfHxcImJvbGxhcmRcIj09Yi5iYXJyaWVyKWIubWF0ZXJpYWwmJihjKz1cIm1hdGVyaWFsOiBcIit0cmFuc2xhdGUoYi5tYXRlcmlhbCkrXCI8YnIvPlwiKTtyZXR1cm4gY30sZm5Db250ZW50VG91cmlzbT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2lmKFwiY2FtcF9zaXRlXCI9PWIudG91cmlzbSl7XCJ5ZXNcIj09Yi5kb2cmJihhKz1cImRvZ3MgYWxsb3dlZDxici8+XCIpO1wibm9cIj09Yi5kb2cmJihhKz1cImRvZ3MgZm9yYmlkZGVuPGJyLz5cIik7Yi5zdGFycyYmKGErPWIuc3RhcnMrXG4gICAgXCJzdGFyczxici8+XCIpO2IuY2FyYXZhbnMmJihhKz1cImNhcmF2YW4gc2l0ZXM8YnIvPlwiKTtpZihcInllc1wiPT1iLm9wZW5maXJlfHxcInllc1wiPT1iLmZpcmVwbGFjZSlhKz1cIlRoZXJzIGlzIGFuIG9wZW5maXJlLiA8YnIvPlwiO1wieWVzXCI9PWIud2FzaGluZ19tYWNoaW5lJiYoYSs9XCJ3YXNoaW5nIG1hY2hpbmU8YnIvPlwiKTtcInllc1wiPT1iLmRyeWVyJiYoYSs9XCJkcnllcjxici8+XCIpO1wieWVzXCI9PWIuZ3JvdXBfb25seSYmKGErPVwidXNlIGZvciBncm91cHMgb25seTxici8+XCIpO1wicmVjZXB0aW9uXCI9PWIuY2FtcF9zaXRlJiYoYSs9XCJyZWNlcHRpb24gYXZhaWxhYmxlPGJyLz5cIil9XCJpbmZvcm1hdGlvblwiPT1iLnRvdXJpc20mJlwibWFwXCI9PWIuaW5mb3JtYXRpb24mJihcInRvcG9cIj09Yi5tYXBfdHlwZSYmKGErPVwidG9wbzwvYnI+XCIpLFwic3RyZWV0XCI9PWIubWFwX3R5cGUmJihhKz1cInN0cmVldDwvYnI+XCIpLFwic2NoZW1lXCI9PWIubWFwX3R5cGUmJihhKz1cInNjaGVtZTwvYnI+XCIpLFwidG9wb3Njb3BlXCI9PVxuICAgIGIubWFwX3R5cGUmJihhKz1cInRvcG9zY29wZTwvYnI+XCIpKTtcImluZm9ybWF0aW9uXCI9PWIudG91cmlzbSYmXCJtYXBcIj09Yi5pbmZvcm1hdGlvbiYmKFwic2l0ZVwiPT1iLm1hcF9zaXplJiYoYSs9XCJtYXAgb2Ygc2l0ZTwvYnI+XCIpLFwiY2l0eVwiPT1iLm1hcF9zaXplJiYoYSs9XCJjaXR5IG1hcDwvYnI+XCIpLFwicmVnaW9uXCI9PWIubWFwX3NpemUmJihhKz1cIm1hcCBvZiByZWdpb248L2JyPlwiKSk7XCJnZW9sb2d5XCI9PWIuYm9hcmRfdHlwZSYmKGErPVwiZ2VvbG9naWMgaW5mb3JtYXRpb248YnIvPlwiKTtcImhpc3RvcnlcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJoaXN0b3JpYyBpbmZvcm1hdGlvbjxici8+XCIpO1wibmF0dXJlXCI9PWIuYm9hcmRfdHlwZSYmKGErPVwiaW5mb3JtYXRpb24gYWJvdXQgbmF0dXJlPGJyLz5cIik7XCJub3RpY2VcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJnZW5lcmFsIGluZm9ybWF0aW9uPGJyLz5cIik7XCJwbGFudHNcIj09Yi5ib2FyZF90eXBlJiYoYSs9XCJpbmZvcm1hdGlvbiBhYm91dCBwbGFudHM8YnIvPlwiKTtcbiAgICAgICAgXCJ3aWxkbGlmZVwiPT1iLmJvYXJkX3R5cGUmJihhKz1cImluZm9ybWF0aW9uIGFib3V0IHdpbGRsaWZlPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEFtZW5pdHk9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtcImJvYXRfc2hhcmluZ1wiPT1iLmFtZW5pdHkmJihhKz1iLmJvYXR0eXBlK1wiPGJyLz5cIik7XCJlbWJhc3N5XCI9PWIuYW1lbml0eSYmKGErPWIuY291bnRyeStcIjxici8+XCIpO2lmKGIudmVuZGluZylzd2l0Y2goYi52ZW5kaW5nKXtjYXNlIFwiYWRtaXNzaW9uX3RpY2tldHNcIjphKz1cInRpY2tldHM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhbmltYWxfZmVlZFwiOmErPVwiYW5pbWFsIGZlZWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJib29rc1wiOmErPVwiYm9va3M8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjYW5kbGVzXCI6YSs9XCJjYW5kbGVzPGJyLz5cIjticmVhaztjYXNlIFwiY2lnYXJldHRlc1wiOmErPVwiY2lnYXJldHRlczxici8+XCI7YnJlYWs7Y2FzZSBcImNvbmRvbXNcIjphKz1cImNvbmRvbXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkcmlua3NcIjphKz1cbiAgICAgICAgXCJkcmlua3M8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmaXJzdF9haWRcIjphKz1cImZpcnN0IGFpZCBhcnRpY2xlczxici8+XCI7YnJlYWs7Y2FzZSBcImZpc2hpbmdfdGFja2xlXCI6YSs9XCJmaXNoaW5nIHRhY2tsZTxici8+XCI7YnJlYWs7Y2FzZSBcImZsb3dlcnNcIjphKz1cImZsb3dlcnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJpY2VfY3JlYW1cIjphKz1cImljZSBjcmVhbTxici8+XCI7YnJlYWs7Y2FzZSBcImxhdW5kcnlfZGV0ZXJnZW50XCI6YSs9XCJsYXVuZHJ5IGRldGVyZ2VudDxici8+XCI7YnJlYWs7Y2FzZSBcIm5ld3NwYXBlcnNcIjphKz1cIm5ld3NwYXBlcnM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTSU1fY2FyZHNcIjphKz1cInNJTS1jYXJkczxici8+XCI7YnJlYWs7Y2FzZSBcInN3ZWV0c1wiOmErPVwic3dlZXRzPGJyLz5cIjticmVhaztjYXNlIFwicGFyY2VsX3BpY2t1cFwiOmErPVwicGFyY2VsIHBpY2t1cDxici8+XCI7YnJlYWs7Y2FzZSBcImljZV9jdWJlc1wiOmErPVwiaWNlIGN1YmVzPGJyLz5cIjticmVhaztjYXNlIFwicHVibGljX3RyYW5zcG9ydF90aWNrZXRzXCI6YSs9XG4gICAgICAgIFwicHVibGljIHRyYW5zcG9ydCB0aWNrZXRzPGJyLz5cIjticmVhaztjYXNlIFwicGFya2luZ190aWNrZXRcIjphKz1cInBhcmtpbmcgdGlja2V0czxici8+XCI7YnJlYWs7Y2FzZSBcInNleF90b3lzXCI6YSs9XCJzZXggdG95czxici8+XCI7YnJlYWs7Y2FzZSBcInN0YW1wc1wiOmErPVwic3RhbXBzPGJyLz5cIjticmVhaztjYXNlIFwidG9sbFwiOmErPVwidG9sbDxici8+XCI7YnJlYWs7Y2FzZSBcInVtYnJlbGxhc1wiOmErPVwidW1icmVsbGFzPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwiY29udGVudCB1bmtub3duPGJyLz5cIn1cInBvc3RfYm94XCI9PWIuYW1lbml0eSYmKGIuY29sbGVjdGlvbl90aW1lcyYmKGErPVwiY29sbGVjdGlvbiB0aW1lczogXCIrYi5jb2xsZWN0aW9uX3RpbWVzK1wiPGJyLz5cIiksXCJ5ZXNcIj09Yi5kcml2ZV90aHJvdWdoJiYoYSs9XCJhY2Nlc3NpYmxlIGJ5IGNhci4gPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRTdG9yYWdlPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7aWYoXCJzdG9yYWdlX3RhbmtcIj09XG4gICAgYi5tYW5fbWFkZSl7aWYoYi5jb250ZW50KXt2YXIgYz1iLmNvbnRlbnQ7c3dpdGNoKGMpe2Nhc2UgXCJmdWVsXCI6Yz1cImZ1ZWxcIjticmVhaztjYXNlIFwib2lsXCI6Yz1cIm9pbFwiO2JyZWFrO2Nhc2UgXCJnYXNcIjpjPVwiZ2FzXCI7YnJlYWs7Y2FzZSBcInNsdXJyeVwiOmM9XCJzbHVycnlcIjticmVhaztjYXNlIFwiY2VtZW50XCI6Yz1cImNlbWVudFwiO2JyZWFrO2Nhc2UgXCJ3YXRlclwiOmM9XCJ3YXRlclwiO2JyZWFrO2Nhc2UgXCJtYW51cmVcIjpjPVwibWFudXJlXCI7YnJlYWs7Y2FzZSBcInNpbGFnZVwiOmM9XCJzaWxhZ2VcIn1hKz1cImNvbnRlbnQ6IFwiK2MrXCI8YnIvPlwifWlmKGIuY29udGVudHMpe2M9Yi5jb250ZW50cztzd2l0Y2goYyl7Y2FzZSBcImZ1ZWxcIjpjPVwiZnVlbFwiO2JyZWFrO2Nhc2UgXCJvaWxcIjpjPVwib2lsXCI7YnJlYWs7Y2FzZSBcImdhc1wiOmM9XCJnYXNcIjticmVhaztjYXNlIFwic2x1cnJ5XCI6Yz1cInNsdXJyeVwiO2JyZWFrO2Nhc2UgXCJjZW1lbnRcIjpjPVwiY2VtZW50XCI7YnJlYWs7Y2FzZSBcIndhdGVyXCI6Yz1cIndhdGVyXCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJtYW51cmVcIjpjPVwibWFudXJlXCI7YnJlYWs7Y2FzZSBcInNpbGFnZVwiOmM9XCJzaWxhZ2VcIn1hKz1cImNvbnRlbnQ6IFwiK2MrXCI8YnIvPlwifX1iLnN0b3JhZ2UmJihcImdhc1wiPT1iLnN0b3JhZ2UmJihhKz1cImNvbnRlbnQ6IGdhczxici8+XCIpLFwib2lsXCI9PWIuc3RvcmFnZSYmKGErPVwiY29udGVudDogb2lsPGJyLz5cIikpO3JldHVybiBhfSxmbkNvbnRlbnRJbmZvcm1hdGlvbkNpdHk9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtiW1wibmFtZTpkZVwiXSYmKGErPVwiZ2VybWFuIG5hbWU6IFwiK2JbXCJuYW1lOmRlXCJdK1wiPGJyLz5cIik7aWYoMUU0PD1iLnBvcHVsYXRpb24paWYoYi5wb3B1bGF0aW9uPVwiXCIrYi5wb3B1bGF0aW9uLDM8Yi5wb3B1bGF0aW9uLmxlbmd0aCl7dmFyIGM9Yi5wb3B1bGF0aW9uLmxlbmd0aCUzLGQ9MDxjP2IucG9wdWxhdGlvbi5zdWJzdHJpbmcoMCxjKTpcIlwiO2Zvcih2YXIgaT0wO2k8TWF0aC5mbG9vcihiLnBvcHVsYXRpb24ubGVuZ3RoLzMpO2krKylkPTA9PWMmJjA9PWk/XG4gICAgZCtiLnBvcHVsYXRpb24uc3Vic3RyaW5nKGMrMyppLGMrMyppKzMpOmQrKFwiLlwiK2IucG9wdWxhdGlvbi5zdWJzdHJpbmcoYyszKmksYyszKmkrMykpO2ErPVwicG9wdWxhdGlvbjogXCIrZCtcIjxici8+XCJ9ZWxzZSBhKz1cInBvcHVsYXRpb24gXCIrYi5wb3B1bGF0aW9uK1wiPGJyLz5cIjsxRTQ+PWIucG9wdWxhdGlvbiYmKGErPVwicG9wdWxhdGlvbjogXCIrYi5wb3B1bGF0aW9uK1wiPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEVtZXJnZW5jeT1mdW5jdGlvbihiKXt2YXIgYT1cIlwiO2IubGlmZWJvYXQmJihcImluc2hvcmVcIj09Yi5saWZlYm9hdD9hKz1cImFwcGxpY2F0aW9uOiBpbnNob3JlPGJyLz5cIjpcIm9mZnNob3JlXCI9PWIubGlmZWJvYXQmJihhKz1cImFwcGxpY2F0aW9uOiBvZmZzaG9yZTxici8+XCIpKTtiW1wibGlmZWJvYXQ6Y2xhc3NcIl0mJihhKz1cInR5cGUgb2YgYm9hdDogXCIrYltcImxpZmVib2F0OmNsYXNzXCJdK1wiPGJyLz5cIik7aWYoYltcInNpcmVuOnR5cGVcIl0pe3ZhciBjPWJbXCJzaXJlbjp0eXBlXCJdO1xuICAgICAgICBzd2l0Y2goYyl7Y2FzZSBcIm1lY2hhbmljYWxcIjpjPVwibWVjaGFuaWNhbFwiO2JyZWFrO2Nhc2UgXCJlbGVjdHJvbmljXCI6Yz1cImVsZWN0cm9uaWNcIjticmVhaztjYXNlIFwicG5ldW1hdGljXCI6Yz1cInBuZXVtYXRpY1wiO2JyZWFrO2Nhc2UgXCJlbGVjdHJvbWVjaGFuaWNcIjpjPVwiZWxlY3Ryb21lY2hhbmljXCJ9YSs9XCJUeXA6IFwiK2MrXCI8YnIvPlwifWlmKGJbXCJzaXJlbjpwdXJwb3NlXCJdKXtjPWJbXCJzaXJlbjpwdXJwb3NlXCJdO3N3aXRjaChjKXtjYXNlIFwiYWlyX3JhaWRcIjpjPVwiYWlyIHJhaWRcIjticmVhaztjYXNlIFwidG9ybmFkb1wiOmM9XCJ0b3JuYWRvXCI7YnJlYWs7Y2FzZSBcInN0b3JtXCI6Yz1cInN0b3JtXCI7YnJlYWs7Y2FzZSBcImNpdmlsX2RlZmVuc2VcIjpjPVwiY2l2aWwgZGVmZW5jZVwiO2JyZWFrO2Nhc2UgXCJmaXJlXCI6Yz1cImZpcmVcIn1hKz1cInVzZTogXCIrYytcIjxici8+XCJ9YltcInNpcmVuOm1vZGVsXCJdJiYoYSs9XCJtb2RlbDogXCIrYltcInNpcmVuOm1vZGVsXCJdK1wiPGJyLz5cIik7YltcInNpcmVuOnJhbmdlXCJdJiZcbiAgICAoYSs9XCJyYW5nZSBvZiBzaXJlbjogXCIrYltcInNpcmVuOnJhbmdlXCJdK1wiPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEN1aXNpbmU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihiLmN1aXNpbmUpe3ZhciBjPVwiXCIsYT0oXCJzdXBlcm1hcmtldFwiPT1iLnNob3B8fFwiY29udmVuaWVuY2VcIj09Yi5zaG9wfHxcImRlbGlcIj09Yi5zaG9wfHxcIm9yZ2FuaWNcIj09Yi5zaG9wKSYmXCJyZXN0YXVyYW50XCIhPWIuYW1lbml0eT9hK1wic3BlY2lhbHRpZXM6IFwiOmErXCJjdWlzaW5lOiBcIjtcImFyYWJpY1wiPT1iLmN1aXNpbmUmJihjKz1cImFyYWJpYzxici8+XCIpO1wiaXRhbGlhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBpdGFsaWFuPGJyLz5cIik7XCJpbnRlcm5hdGlvbmFsXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGludGVybmF0aW9uYWw8YnIvPlwiKTtcInJlZ2lvbmFsXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHJlZ2lvbmFsPGJyLz5cIik7XCJjaGluZXNlXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGNoaW5lc2U8YnIvPlwiKTtcImdyZWVrXCI9PWIuY3Vpc2luZSYmXG4gICAgKGMrPVwiIGdyZWVrPGJyLz5cIik7XCJhZnJpY2FuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGFmcmljYW48YnIvPlwiKTtcImdlcm1hblwiPT1iLmN1aXNpbmUmJihjKz1cIiBnZXJtYW48YnIvPlwiKTtcIm1leGljYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgbWV4aWNhbjxici8+XCIpO1wiZnJlbmNoXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGZyZW5jaDxici8+XCIpO1wiaW5kaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGluZGlhbjxici8+XCIpO1wiaXJhbmlhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBpcmFuaWFuPGJyLz5cIik7XCJsZWJhbmVzZVwiPT1iLmN1aXNpbmUmJihjKz1cIiBsZWJhbmVzZTxici8+XCIpO1widGhhaVwiPT1iLmN1aXNpbmUmJihjKz1cIiB0aGFpPGJyLz5cIik7XCJiYWxrYW5cIj09Yi5jdWlzaW5lJiYoYys9XCIgYmFsa2FuPGJyLz5cIik7XCJ0dXJraXNoXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHR1cmtpc2g8YnIvPlwiKTtcImJhdmFyaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGJhdmFyaWFuPGJyLz5cIik7XCJjemVjaFwiPT1iLmN1aXNpbmUmJlxuICAgIChjKz1cIiBjemVjaDxici8+XCIpO1wicG9ydHVndWVzZVwiPT1iLmN1aXNpbmUmJihjKz1cIiBwb3J0dWd1ZXNlPGJyLz5cIik7XCJzcGFuaXNoXCI9PWIuY3Vpc2luZSYmKGMrPVwiIHNwYW5pc2g8YnIvPlwiKTtcImphcGFuZXNlXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGphcGFuZXNlPGJyLz5cIik7XCJmaXNoXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGZpc2g8YnIvPlwiKTtcImJyYXppbGlhblwiPT1iLmN1aXNpbmUmJihjKz1cIiBicmF6aWxpYW48YnIvPlwiKTtcImFzaWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwiIGFzaWFuPGJyLz5cIik7XCJtZWRpdGVycmFuZWFuXCI9PWIuY3Vpc2luZSYmKGMrPVwibWVkaXRlcnJhbmVhbjxici8+XCIpO1wic2VhZm9vZFwiPT1iLmN1aXNpbmUmJihjKz1cIiBzZWFmb29kPGJyLz5cIik7XCJpY2VfY3JlYW1cIj09Yi5jdWlzaW5lJiYoYys9XCIgaWNlIGNyZWFtPGJyLz5cIik7XCJidXJnZXJcIj09Yi5jdWlzaW5lJiYoYys9XCIgYnVyZ2VyPGJyLz5cIik7XCJmcm96ZW5feW9ndXJ0XCI9PWIuY3Vpc2luZSYmKGMrPVwiIGZyb3plbiB5b2d1cnQ8YnIvPlwiKTtcbiAgICAgICAgXCJcIj09YyYmKGM9Yi5jdWlzaW5lK1wiPGJyLz5cIik7YSs9Y31yZXR1cm4gYX0sZm5Db250ZW50U2hpcHBpbmc9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtiLmhhcmJvdXI9XCJ5ZXNcIjtcInllc1wiPT1iW1wiYWNjZXNzOnRpZGVcIl0mJihhKz1cIkFjY2VzcyByZXN0cmljdGVkIGJ5IHRpZGU8L2JyPlwiKTtcInllc1wiPT1iW1wiYWNjZXNzOnN3ZWxsXCJdJiYoYSs9XCJhY2Nlc3MgcmVzdHJpY3RlZCBieSBzd2VsbDwvYnI+XCIpO1wieWVzXCI9PWJbXCJhY2Nlc3M6aWNlXCJdJiYoYSs9XCJhY2Nlc3MgcmVzdHJpY3RlZCBieSBpY2U8L2JyPlwiKTtiLnZoZl9jaGFubmVsJiYoYSs9XCJVS1ctQ2hhbm5lbDogXCIrYi52aGZfY2hhbm5lbCtcIjwvYnI+XCIpO2IubW1zaSYmKGErPVwiTU1TSS1OdW1iZXI6IFwiK2IubW1zaStcIjwvYnI+XCIpO2JbXCJoYXJib3VyOmluZm9ybWF0aW9uXCJdJiYoYSs9XCJpbmZvcm1hdGlvbiA6XCIrYltcImhhcmJvdXI6aW5mb3JtYXRpb25cIl0rXCI8L2JyPlwiKTtcInllc1wiPT1iLm1vdG9yYm9hdCYmKGErPVwibW90b3Jib2F0IGFsbG93ZWQ8L2JyPlwiKTtcbiAgICAgICAgXCJub1wiPT1iLm1vdG9yYm9hdCYmKGErPVwibW90b3Jib2F0IHByb2hpYml0ZWQgPC9icj5cIik7Yi5DRU1UJiYoYSs9XCJDRU1UOiBcIitiLkNFTVQrXCI8L2JyPlwiKTtcInllc1wiPT1iLmludGVybWl0dGVudCYmKGErPVwicml2ZXIgaW50ZXJtaXR0ZW50IGRyaWVkIG91dDwvYnI+XCIpO1wieWVzXCI9PWIudGlkYWwmJihhKz1cInRpZGFsIGluZmx1ZW5jZSB0aGUgZmxvdzwvYnI+XCIpO2IuZHJhZnQmJihhKz1cIiBkcml2aW5nIGRlcHRoIG9mIHdhdGVyOiBcIitiLmRyYWZ0K1wiIG08L2JyPlwiKTtpZihcInNsaXB3YXlcIj09Yi5sZWlzdXJlfHxcInNsaXB3YXlcIj09Yi5oYXJib3VyKVwiaGFuZFwiPT1iLm9wZXJhdGluZyYmKGErPVwib3BlcmF0aW5nOiBieSBoYW5kPGJyLz5cIiksXCJjYXJcIj09Yi5vcGVyYXRpbmcmJihhKz1cIm9wZXJhdGluZzogYnkgY2FyLCBib2F0IHRyYWlsZXI8YnIvPlwiKSxcImNhYmxlX3dpbmNoXCI9PWIub3BlcmF0aW5nJiYoYSs9XCJvcGVyYXRpbmc6IHdpdGggY2FibGUgd2luY2g8YnIvPlwiKSxcInRyYXZlbGxpZnRcIj09XG4gICAgICAgIGIub3BlcmF0aW5nJiYoYSs9XCJvcGVyYXRpbmc6IGJ5IHRyYXZlbGxpZnQ8YnIvPlwiKSxcImNyYW5lXCI9PWIubWFuX21hZGUmJihhKz1cImJ5IGNyYW5lPGJyLz5cIixiW1wiY3JhbmU6bWF4bG9hZFwiXSYmKGErPVwibWF4bG9hZDogXCIrYltcImNyYW5lOm1heGxvYWRcIl0rXCI8YnIvPlwiKSxiW1wic2hpcDptYXhkcmFmdFwiXSYmKGErPVwibWF4aW11bSBwZXJtaXNzaWJsZSBkcmF1Z2h0OiBcIitiW1wic2hpcDptYXhkcmFmdFwiXStcIjxici8+XCIpLGJbXCJzaGlwOm1heGxlbmd0aFwiXSYmKGErPVwibWF4aW11bSBwZXJtaXNzaWJsZSBsZW5ndGggb2YgYSBzaGlwOiBcIitiW1wic2hpcDptYXhsZW5ndGhcIl0rXCI8YnIvPlwiKSksXCJ5ZXNcIj09Yi52ZWhpY2xlJiYoYSs9XCJhY2Nlc3NpYmxlIGJ5IHZlaGljbGU8YnIvPlwiKTthKz1mbldyZWNrSW5mbyhiKTtpZihcImZlcnJ5XCI9PWIucm91dGV8fFwiZmVycnlfdGVybWluYWxcIj09Yi5hbWVuaXR5fHxcInllc1wiPT1iLmZlcnJ5KWZhaHJ6ZWl0PWIuZHVyYXRpb24sXCJcIiE9ZmFocnplaXQmJlxuICAgICAgICAoXCJ1bmRlZmluZWRcIiE9ZmFocnplaXQmJm51bGwhPWZhaHJ6ZWl0KSYmKGErPVwiZHVyYXRpb24gaW4gaG91cnMgOiBcIitmYWhyemVpdCtcIjxici8+XCIpLFwieWVzXCI9PWIubW90b3JjYXImJihhKz1cIm1vdG9yY2FycyBhbGxvd2VkPGJyLz5cIiksXCJub1wiPT1iLm1vdG9yY2FyJiYoYSs9XCJtb3RvcmNhcnMgcHJvaGliaXRlZDxici8+XCIpLFwibm9cIj09Yi5tb3Rvcl92ZWhpY2xlJiYoYSs9XCJtb3RvciB2ZWhpY2xlcyBwcm9oaWJpdGVkPGJyLz5cIiksXCJ5ZXNcIj09Yi5tb3Rvcl92ZWhpY2xlJiYoYSs9XCJtb3RvciB2ZWhpY2xlcyBhbGxvd2VkPGJyLz5cIiksXCJ5ZXNcIj09Yi52ZWhpY2xlJiYoYSs9XCJ2ZWhpY2xlcyBhbGxvd2VkPGJyLz5cIiksXCJub1wiPT1iLnZlaGljbGUmJihhKz1cIm5vIHZlaGljbGVzPGJyLz5cIiksXCJub1wiPT1iLmJpY3ljbGUmJihhKz1cIm5vIGJpY3ljbGVzPGJyLz5cIiksXCJub1wiPT1iLmJpY3ljbGUmJihhKz1cImJpY3ljbGVzIGFsbG93ZWQ8YnIvPlwiKSxcInllc1wiPT1iLmhndiYmKGErPVwiaGd2IGFsbG93ZWQ8YnIvPlwiKSxcbiAgICAgICAgXCJub1wiPT1iLmhndiYmKGErPVwiaGd2IHByb2hpYml0ZWQ8YnIvPlwiKSxcInllc1wiPT1iLmZvb3QmJihhKz1cInBlZGVzdHJpYW4gYWxsb3dlZDxici8+XCIpLFwibm9cIj09Yi5mb290JiYoYSs9XCJwZWRlc3RyaWFuIHByb2hpYml0ZWQgPGJyLz5cIiksXCJ5ZXNcIj09Yi5iaWN5Y2xlJiYoYSs9XCJjeWNsaXN0IGFsbG93ZWQgPGJyLz5cIiksXCJub1wiPT1iLmJpY3ljbGUmJihhKz1cImN5Y2xpc3QgcHJvaGliaXRlZCA8YnIvPlwiKSxcInllc1wiPT1iW1wiZmVycnk6Y2FibGVcIl0mJihhKz1cImNhYmxlIGZlcnJ5PGJyLz5cIik7aWYoYltcInNlYW1hcms6bGlnaHQ6MTpjb2xvdXJcIl0pe3ZhciBjPWJbXCJzZWFtYXJrOmxpZ2h0OjE6Y29sb3VyXCJdO3N3aXRjaChjKXtjYXNlIFwid2hpdGVcIjpjPVwid2hpdGVcIjticmVhaztjYXNlIFwicmVkXCI6Yz1cInJlZFwiO2JyZWFrO2Nhc2UgXCJncmVlblwiOmM9XCJncmVlblwiO2JyZWFrO2Nhc2UgXCJibHVlXCI6Yz1cImJsdWVcIjticmVhaztjYXNlIFwieWVsbG93XCI6Yz1cInllbGxvd1wiO2JyZWFrO2Nhc2UgXCJhbWJlclwiOmM9XG4gICAgICAgICAgICBcImFtYmVyXCJ9YSs9XCJjb2xvdXIgb2YgbGlnaHQ6IFwiK2MrXCI8YnIvPlwifVwibGlnaHRob3VzZVwiPT1iLm1hbl9tYWRlJiYoYltcInNlYW1hcms6bGlnaHQ6MTpjaGFyYWN0ZXJcIl0mJihhKz1cImxpZ2h0IGNoYXJhY3RlcjogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpjaGFyYWN0ZXJcIl0rXCI8YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDoxOnBlcmlvZFwiXSYmKGErPVwicGVyaW9kOiBcIitiW1wic2VhbWFyazpsaWdodDoxOnBlcmlvZFwiXStcIjxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OjE6aGVpZ2h0XCJdJiYoYSs9XCJoZWlnaHQ6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OjE6aGVpZ2h0XCJdK1wiIG08YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDoxOnJhbmdlXCJdJiYoYSs9XCJyYW5nZTogXCIrYltcInNlYW1hcms6bGlnaHQ6MTpyYW5nZVwiXStcIiBzbTxici8+XCIpKTtpZihiW1wic2VhbWFyazpsaWdodDpjb2xvdXJcIl0pe2M9YltcInNlYW1hcms6bGlnaHQ6Y29sb3VyXCJdO3N3aXRjaChjKXtjYXNlIFwid2hpdGVcIjpjPVwid2hpdGVcIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJyZWRcIjpjPVwicmVkXCI7YnJlYWs7Y2FzZSBcImdyZWVuXCI6Yz1cImdyZWVuXCI7YnJlYWs7Y2FzZSBcImJsdWVcIjpjPVwiYmx1ZVwiO2JyZWFrO2Nhc2UgXCJ5ZWxsb3dcIjpjPVwieWVsbG93XCI7YnJlYWs7Y2FzZSBcImFtYmVyXCI6Yz1cImFtYmVyXCJ9YSs9XCJjb2xvdXIgb2YgbGlnaHQ6IFwiK2MrXCI8YnIvPlwifVwibGlnaHRob3VzZVwiPT1iLm1hbl9tYWRlJiYoYltcInNlYW1hcms6bGlnaHQ6Y2hhcmFjdGVyXCJdJiYoYSs9XCJsaWdodCBjaGFyYWN0ZXI6IFwiK2JbXCJzZWFtYXJrOmxpZ2h0OmNoYXJhY3RlclwiXStcIjxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OmhlaWdodFwiXSYmKGErPVwiaGVpZ2h0OiBcIitiW1wic2VhbWFyazpsaWdodDpoZWlnaHRcIl0rXCIgbTxici8+XCIpLGJbXCJzZWFtYXJrOmxpZ2h0OnJhbmdlXCJdJiYoYSs9XCJyYW5nZTogXCIrYltcInNlYW1hcms6bGlnaHQ6cmFuZ2VcIl0rXCIgc208YnIvPlwiKSxiW1wic2VhbWFyazpsaWdodDpwZXJpb2RcIl0mJihhKz1cInBlcmlvZDogXCIrYltcInNlYW1hcms6bGlnaHQ6cGVyaW9kXCJdK1xuICAgICAgICBcIjxici8+XCIpKTtyZXR1cm4gYX0sZm5Db250ZW50SHlkcmFudHM9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImZpcmVfaHlkcmFudFwiPT1iLmVtZXJnZW5jeSl7dmFyIGM9YltcImZpcmVfaHlkcmFudDpjb3VudFwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIk51bWJlcjogXCIrYytcIjxici8+XCIpO2M9YltcImZpcmVfaHlkcmFudDpkaWFtZXRlclwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIlBpcGUgZGlhbWV0ZXI6IFwiK2MrXCIgbW08YnIvPlwiKTtjPWJbXCJmaXJlX2h5ZHJhbnQ6cHJlc3N1cmVcIl07XCJ1bmRlZmluZWRcIiE9YyYmKG51bGwhPWMmJlwiXCIhPWMpJiYoYT1cInN1Y3Rpb25cIj09Yz9hK1wiUHJlc3N1cmUgaW4gYmFyIC8gU3VjdGlvbjogU3VjdGlvbjxici8+XCI6YSsoXCJQcmVzc3VyZSBpbiBiYXIgLyBTdWN0aW9uOiBcIitjK1wiPGJyLz5cIikpO2M9YltcImZpcmVfaHlkcmFudDpwb3NpdGlvblwiXTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXG4gICAgXCJcIiE9YykmJihcImxhbmVcIj09Yz9hKz1cIlBvc2l0aW9uOiBMYW5lPGJyLz5cIjpcInBhcmtpbmdfbG90XCI9PWM/YSs9XCJQb3NpdGlvbjogUGFya2luZyBMb3Q8YnIvPlwiOlwic2lkZXdhbGtcIj09Yz9hKz1cIlBvc2l0aW9uOiBTaWRld2Fsazxici8+XCI6XCJncmVlblwiPT1jJiYoYSs9XCJQb3NpdGlvbjogR3JlZW48YnIvPlwiKSk7Yz1iLndhdGVyX3ZvbHVtZTtcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIlZvbHVtZTogXCIrYytcIjxici8+XCIpO2M9YltcImZpcmVfaHlkcmFudDphd3dhX2NsYXNzXCJdO1widW5kZWZpbmVkXCIhPWMmJm51bGwhPWMmJlwiXCIhPWM/YSs9XCJBV1dBIENsYXNzOiBcIitjK1wiPGJyLz5cIjooYz1iLmZsb3dfcmF0ZSxcInVuZGVmaW5lZFwiIT1jJiYobnVsbCE9YyYmXCJcIiE9YykmJihhKz1cIkZsb3cgcmF0ZTogXCIrYytcIjxici8+XCIpKTtjPWIud2F0ZXJfc291cmNlO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jJiZcIm1haW5cIiE9YykmJihhKz1cIldhdGVyIHNvdXJjZTogXCIrXG4gICAgYytcIjxici8+XCIpO2M9YltcImNvdXBsaW5nczp0eXBlXCJdO1widW5kZWZpbmVkXCIhPWMmJihudWxsIT1jJiZcIlwiIT1jKSYmKGErPVwiQ291cGxpbmdzIHR5cGU6IFwiK2MrXCI8YnIvPlwiKTtjPWJbXCJjb3VwbGluZ3M6ZGlhbWV0ZXJcIl07XCJ1bmRlZmluZWRcIiE9YyYmKG51bGwhPWMmJlwiXCIhPWMpJiYoYSs9XCJDb3VwbGluZ3MgZGlhbWV0ZXI6IFwiK2MrXCI8YnIvPlwiKTtjPWJbXCJwaWxsYXI6dHlwZVwiXTtcImRyeV9iYXJyZWxcIj09PWMmJihhKz1cIlBpbGxhciB0eXBlOiBcIitjK1wiPGJyLz5cIik7XCJmaXJlX2h5ZHJhbnRcIj09PWJbXCJkaXN1c2VkOmVtZXJnZW5jeVwiXSYmKGErPVwiQ3VycmVudGx5IGRpc3VzZWRcIik7XCJcIj09YSYmKGE9XCJObyBkZXRhaWxzIGF2YWlsYWJsZS5cIil9cmV0dXJuIGF9LGZuQ29udGVudFN0cmVldHNUcmFmZmljPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCJ5ZXNcIj09YltcInJlZF90dXJuOnJpZ2h0XCJdJiYoYSs9XCJyZWQgdHVybjogYWxsb3dlZCB0byB0dXJuIHRvIHRoZSByaWdodDxici8+XCIpO1xuICAgICAgICBcIm5vXCI9PWJbXCJyZWRfdHVybjpyaWdodFwiXSYmKGErPVwicmVkIHR1cm46IHByb2hpYml0ZWQgdG8gdHVybiB0byB0aGUgcmlnaHQ8YnIvPlwiKTtiLmJyaWRnZSYmKGIuaGVpZ2h0JiYoYSs9XCJoZWlnaHQ6IFwiK2IuaGVpZ2h0K1wiIG08YnIvPlwiKSxiLmxlbmd0aCYmKGErPVwibGVuZ3RoOiBcIitiLmxlbmd0aCtcIiBtPGJyLz5cIiksYi5icmlkZ2VfcmVmJiYoYSs9XCJicmlkZ2UgcmVmOiBcIitiLmJyaWRnZV9yZWYrXCI8YnIvPlwiKSxiLnN0YXJ0X2RhdGUmJihhKz1cInN0YXJ0IGRhdGU6IFwiK2Iuc3RhcnRfZGF0ZStcIjwvYnI+O1wiKSxiLm1heHdlaWdodCYmKGErPVwibWF4d2VpZ2h0OiBcIitiLm1heHdlaWdodCtcIiB0PC9icj5cIikpO2IuaGlnaHdheSYmXCJ5ZXNcIj09Yi50b2xsJiYoYSs9XCJ0b2xsIGhpZ2h3YXk8YnIvPlwiKTtcInllc1wiPT1iW1widG9sbDpoZ3ZcIl0mJihhKz1cIkhHViB0b2xsPGJyLz5cIik7aWYoYi5zdXJmYWNlKXt2YXIgYz1iLnN1cmZhY2UsYT1hK1wic3VyZmFjZTogXCI7c3dpdGNoKGMpe2Nhc2UgXCJncmFzc1wiOmErPVxuICAgICAgICAgICAgXCJncmFzczxici8+XCI7YnJlYWs7Y2FzZSBcInBhdmVkXCI6YSs9XCJwYXZlZDxici8+XCI7YnJlYWs7Y2FzZSBcImFzcGhhbHRcIjphKz1cImFzcGhhbHQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb2JibGVzdG9uZVwiOmErPVwiY29iYmxlc3RvbmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZXR0XCI6YSs9XCJzZXR0PGJyLz5cIjticmVhaztjYXNlIFwiY29uY3JldGVcIjphKz1cImNvbmNyZXRlPGJyLz5cIjticmVhaztjYXNlIFwidW5wYXZlZFwiOmErPVwidW5wYXZlZDxici8+XCI7YnJlYWs7Y2FzZSBcInBhdmluZ19zdG9uZXNcIjphKz1cInBhdmluZyBzdG9uZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb21wYWN0ZWRcIjphKz1cImNvbXBhY3RlZDxici8+XCI7YnJlYWs7Y2FzZSBcImRpcnRcIjphKz1cImRpcnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJmaW5lX2dyYXZlbFwiOmErPVwiZmluZSBncmF2ZWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJncmFzc19wYXZlclwiOmErPVwiZ3Jhc3MgcGF2ZXI8YnIvPlwiO2JyZWFrO2Nhc2UgXCJncmF2ZWxcIjphKz1cImdyYXZlbDxici8+XCI7XG4gICAgICAgICAgICBicmVhaztjYXNlIFwiZWFydGhcIjphKz1cImVhcnRoPGJyLz5cIjticmVhaztjYXNlIFwiZ3JvdW5kXCI6YSs9XCJncm91bmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtZXRhbFwiOmErPVwibWV0YWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtdWRcIjphKz1cIm11ZDxici8+XCI7YnJlYWs7Y2FzZSBcInNhbmRcIjphKz1cInNhbmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ3b29kXCI6YSs9XCJ3b29kPGJyLz5cIjticmVhaztjYXNlIFwidGFydGFuXCI6YSs9XCJ0YXJ0YW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJhcnRpZmljaWFsX3R1cmZcIjphKz1cImFydGlmaWNpYWwgdHVyZjxici8+XCI7YnJlYWs7Y2FzZSBcImNsYXlcIjphKz1cImNsYXk8YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmtub3duPGJyLz5cIn19XCJncmFkZTFcIj09Yi50cmFja3R5cGUmJihhKz1cInBhdGggc3VyZmFjZTogU29saWQuIFVzdWFsbHkgYSBwYXZlZCBvciBoZWF2aWx5IGNvbXBhY3RlZCBoYXJkY29yZSBzdXJmYWNlLjxici8+XCIpO1wiZ3JhZGUyXCI9PWIudHJhY2t0eXBlJiYoYSs9XCJwYXRoIHN1cmZhY2U6IE1vc3RseSBzb2xpZC4gVXN1YWxseSBhbiB1bnBhdmVkIHRyYWNrIHdpdGggc3VyZmFjZSBvZiBncmF2ZWwgbWl4ZWQgd2l0aCBhIHZhcnlpbmcgYW1vdW50IG9mIHNhbmQsIHNpbHQsIGFuZCBjbGF5Ljxici8+XCIpO1xuICAgICAgICBcImdyYWRlM1wiPT1iLnRyYWNrdHlwZSYmKGErPVwicGF0aCBzdXJmYWNlOiBFdmVuIG1peHR1cmUgb2YgaGFyZCBhbmQgc29mdCBtYXRlcmlhbHMuIEFsbW9zdCBhbHdheXMgYW4gdW5wYXZlZCB0cmFjay48YnIvPlwiKTtcImdyYWRlNFwiPT1iLnRyYWNrdHlwZSYmKGErPVwicGF0aCBzdXJmYWNlOiBNb3N0bHkgc29mdC4gQWxtb3N0IGFsd2F5cyBhbiB1bnBhdmVkIHRyYWNrIHByb21pbmVudGx5IHdpdGggc29pbC9zYW5kL2dyYXNzLCBidXQgd2l0aCBzb21lIGhhcmQgbWF0ZXJpYWxzLCBvciBjb21wcmVzc2VkIG1hdGVyaWFscyBtaXhlZCBpbi48YnIvPlwiKTtcImdyYWRlNVwiPT1iLnRyYWNrdHlwZSYmKGErPVwicGF0aCBzdXJmYWNlOiBTb2Z0LiBBbG1vc3QgYWx3YXlzIGFuIHVucGF2ZWQgdHJhY2sgbGFja2luZyBoYXJkIG1hdGVyaWFscywgdW5jb21wYWN0ZWQsIHdpdGggc3VyZmFjZSBvZiBzb2lsL3NhbmQvZ3Jhc3MuPGJyLz5cIik7XCJ5ZXNcIj09Yi5tb3RvcmN5Y2xlJiYoYSs9XCI8YnIvPm1vdG9yY3lsZSBhbGxvd2VkLjxici8+XCIpO1xuICAgICAgICBcIm5vXCI9PWIubW90b3JjeWNsZSYmKGErPVwiPGJyLz5tb3RvcmN5Y2xlcyBwcm9oaWJpdGVkLjxici8+XCIpO1wiZXhjZWxsZW50XCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwidHJhaWwgdmlzaWJpbGl0eTogVW5hbWJpZ3VvdXMgcGF0aCBvciBtYXJrZXJzIGV2ZXJ5d2hlcmU8YnIvPlwiKTtcImdvb2RcIj09Yi50cmFpbF92aXNpYmlsaXR5JiYoYSs9XCJ0cmFpbCB2aXNpYmlsaXR5OiBOZXh0IG1hcmtlciBhbHdheXMgdmlzaWJsZSwgYnV0IHNvbWV0aW1lcyBoYXMgdG8gYmUgc2VhcmNoZWQgZm9yLjxici8+XCIpO1wiaW50ZXJtZWRpYXRlXCI9PWIudHJhaWxfdmlzaWJpbGl0eSYmKGErPVwidHJhaWwgdmlzaWJpbGl0eTogVHJhY2sgbW9zdGx5IHZpc2libGU8YnIvPlwiKTtcImJhZFwiPT1iLnRyYWlsX3Zpc2liaWxpdHkmJihhKz1cInRyYWlsIHZpc2liaWxpdHk6IFBhdGggc29tZXRpbWVzIGludmlzaWJsZSwgcm91dGUgcGFydGx5IHBhdGhsZXNzPGJyLz5cIik7XCJob3JyaWJsZVwiPT1iLnRyYWlsX3Zpc2liaWxpdHkmJlxuICAgICAgICAoYSs9XCJ0cmFpbCB2aXNpYmlsaXR5OiBPZnRlbiBwYXRobGVzczxici8+XCIpO1wibm9cIj09Yi50cmFpbF92aXNpYmlsaXR5JiYoYSs9XCJ0cmFpbCB2aXNpYmlsaXR5OiBNb3N0bHkgcGF0aGxlc3M8YnIvPlwiKTtcImhpa2luZ1wiPT1iLnNhY19zY2FsZSYmKGErPVwidHJhaWw6IFRyYWlsIHdlbGwgY2xlYXJlZC4gKFNBQyBTY2FsZTogVDEgKHllbGxvdykpPC9icj5cIik7XCJtb3VudGFpbl9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cInRyYWlsOiBUcmFpbCB3aXRoIGNvbnRpbnVvdXMgbGluZSBhbmQgYmFsYW5jZWQgYXNjZW50IChTQUMgU2NhbGU6IFQyIChyZWQpKTwvYnI+XCIpO1wiZGVtYW5kaW5nX21vdW50YWluX2hpa2luZ1wiPT1iLnNhY19zY2FsZSYmKGErPVwidHJhaWw6IGV4cG9zZWQgc2l0ZXMgbWF5IGJlIHNlY3VyZWQgd2l0aCByb3BlcyBvciBjaGFpbnMsIHBvc3NpYmxlIG5lZWQgdG8gdXNlIGhhbmRzIGZvciBiYWxhbmNlIChTQUMgU2NhbGU6IFQzIChyZWQpKTwvYnI+XCIpO1wiYWxwaGluZV9oaWtpbmdcIj09XG4gICAgICAgIGIuc2FjX3NjYWxlJiYoYSs9XCJ0cmFpbDogc29tZXRpbWVzIG5lZWQgZm9yIGhhbmQgdXNlIHRvIGdldCBhaGVhZCAoU0FDIFNjYWxlOiBUNCAoYmx1ZSkpPC9icj5cIik7XCJkZW1hbmRpbmdfYWxwaGluZV9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cInRyYWlsOiBzaW5nbGUgcGxhaW5seSBjbGltYmluZyB1cCB0byBzZWNvbmQgZ3JhZGUgKFNBQyBTY2FsZTogVDUgKGJsdWUpKTwvYnI+XCIpO1wiZGlmZmljdWx0X2FscGluZV9oaWtpbmdcIj09Yi5zYWNfc2NhbGUmJihhKz1cInRyYWlsOiBjbGltYmluZyB1cCB0byBzZWNvbmQgZ3JhZGUgKFNBQyBTY2FsZTogVDYgKGJsdWUpKTwvYnI+XCIpO2JbXCJtdGI6bmFtZVwiXSYmKGErPVwiY3ljbGV3YXkgOlwiK2JbXCJtdGI6bmFtZVwiXStcIjwvYnI+XCIpO1wiMFwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2Vyb3V0ZTogVmVyeSBlYXN5IHdheSAtIEdyYXZlbCBvciBwYWNrZWQgZWFydGguIE5vIHBhcnRpY3VsYXIgZGlmZmljdWx0aWVzLiBNb3N0bHkgZm9yZXN0IGFuZCBtZWFkb3cgcGF0aHMgKGhpZ2h3YXk9cGF0aCkuIFNlY3Rpb25zIHdpdGggc3RlcHMsIHJvY2tzLCBvciByb290cyBhcmUgbm90IGV4cGVjdGVkLiBXaWRlIGN1cnZlcywgZWFzeSB0byBtb2RlcmF0ZSBzbG9wZS4gTm8gc3BlY2lhbCBza2lsbHMgYXJlIG5lZWRlZCB0byByaWRlIHRoaXMuIEVhc3kgdG8gcmlkZSB1cGhpbGwuPC9icj5TdXJmYWNlOiBzb2xpZCBhbmQgaGFuZHk8L2JyPk9ic3RhY2xlczogbm8gb2JzdGFjbGVzPC9icj5HcmFkaWVudDogbWlsZCB0byBtb2RlcmF0ZTwvYnI+QmVuZHM6IHdpZGU8L2JyPkRyaXZpbmcgc2tpbGxzOiBubyBzcGVjaWFsIGRyaXZpbmcgc2tpbGxzIHJlcXVpcmVkPC9icj5cIik7XG4gICAgICAgIFwiMVwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2Vyb3V0ZTogU21hbGxlciBvYnN0YWNsZXMgbGlrZSByb290cyBhbmQgc21hbGwgc3RvbmVzLiBFcm9zaW9uIGRhbWFnZSBtYXkgaW5jcmVhc2UgZGlmZmljdWx0eS4gU29pbCBtYXkgYmUgbG9vc2UgaW4gcGxhY2VzLiBUaWdodCB0dXJucywgYnV0IG5vIGhhaXJwaW4gdHVybnMuIFJpZGluZyByZXF1aXJlcyBjYXJlIGFuZCBhdHRlbnRpb24sIGJ1dCBubyBzcGVjaWFsIHNraWxsLiBPYnN0YWNsZXMgY2FuIGJlIHJpZGRlbiBvdmVyLiBEaWZmaWN1bHQgdG8gcmlkZSB1cGhpbGwuPC9icj5TdXJmYWNlOiBsb29zZSBzdXJmYWNlIHBvc3NpYmxlLCBzbWFsbCByb290cyBhbmQgc3RvbmVzPC9icj5PYnN0YWNsZXM6IHNtYWxsIG9ic3RhY2xlcywgd2F0ZXIgZ3V0dGVyLCBlcm9zaW9uIGRhbWFnZTwvYnI+R3JhZGllbnQ6IDwgNDAlPC9icj5CZW5kczogd2lkZTwvYnI+RHJpdmluZyBza2lsbHM6IGJhc2ljIGRyaXZpbmcgc2tpbGxzIHJlcXVpcmVkLCBvYnN0YWNsZXMgY2FuIGJlIHBhc3NlZCBvdmVyPC9icj5cIik7XG4gICAgICAgIFwiMlwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2Vyb3V0ZTogT2JzdGFjbGVzIHN1Y2ggYXMgbGFyZ2Ugcm9ja3MgYW5kIHN0b25lcy4gU29pbCBpcyBvZnRlbiBsb29zZS4gIFN0ZXBzIGFyZSBleHBlY3RlZC4gV2lkZXIgaGFpcnBpbiB0dXJucywgc3RlZXBuZXNzIG9mIHVwIHRvIDcwJS4gUmVxdWlyZXMgc29tZSBhZHZhbmNlZCByaWRpbmcgc2tpbGxzLiBPbmx5IHZlcnkgc2tpbGxlZCByaWRlcnMgY2FuIGdvIHVwaGlsbCBvbiB0aGlzLjwvYnI+U3VyZmFjZTogc3VyZmFjZSB1c3VhbGx5IG5vdCBjb21wYWN0ZWQsIGxhcmdlciByb290cyBhbmQgc3RvbmVzLjwvYnI+T2JzdGFjbGVzOiBwbGFpbiBzdGVwcyBhbmQgc3RhaXJzPC9icj5HcmFkaWVudDogPCA3MCU8L2JyPkJlbmRzOiBlYXN5IGhhaXJwaW5zPC9icj5Ecml2aW5nIHNraWxsczogYWR2YW5jZWQgZHJpdmluZyBza2lsbHMgcmVxdWlyZWQ8L2JyPlwiKTtcIjNcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlcm91dGU6IE1hbnkgc2VjdGlvbnMgd2l0aCBsYXJnZSBvYnN0YWNsZXMgc3VjaCBhcyBib3VsZGVycyBhbmQgbGFyZ2Ugcm9vdHMuIE1hbnkgaGFpcnBpbiBhbmQgb2ZmLWJhbGFuY2UgdHVybnMuIFNsaXBwZXJ5IHN1cmZhY2UgYW5kIHRhbHVzIHNlY3Rpb25zIG1heSBiZSBmb3VuZC4gVGhlIHN1cmZhY2UgbWF5IGJlIHZlcnkgc2xpcHBlcnkuIENvbnN0YW50IGNvbmNlbnRyYXRpb24gYW5kIHZlcnkgZ29vZCBza2lsbHMgbmVlZGVkLiBOZWFybHkgaW1wb3NzaWJsZSB0byByaWRlIHVwaGlsbC48L2JyPlN1cmZhY2U6IG1hbnkgbGFyZ2Ugcm9vdHMgLyByb2NrcyBvciBzbGlwcGVyeSBncm91bmQsIGxvb3NlIHNjcmVlPC9icj5PYnN0YWNsZXM6IGRyYWdzLCBoYXJkbHkgZHJpdmVhYmxlIHN0ZXBzPC9icj5HcmFkaWVudDogPjcwJTwvYnI+QmVuZHM6IGJhaWwgbGlrZSBoYWlycGluczwvYnI+RHJpdmluZyBza2lsbHM6IHBlcmZlY3QgYmlrZSBjb250cm9sIHdpdGggdHJpYWwgc2tpbGxzIHJlcXVpcmVkLCBsaWtlIG1vdmluZyB0aGUgcmVhciB3aGVlbCBvbmx5IGluIGhhaXJwaW5zPC9icj5cIik7XG4gICAgICAgIFwiNFwiPT1iW1wibXRiOnNjYWxlXCJdJiYoYSs9XCJNb3VudGFpbmJpa2Vyb3V0ZTogVmVyeSBzdGVlcCBhbmQgZGlmZmljdWx0LCB3aXRoIHNlY3Rpb25zIGhhdmluZyBsYXJnZSBib3VsZGVycyBhbmQgcm9vdHMuIEZyZXF1ZW50IGxvb3NlIGRlYnJpcy4gVmVyeSBzdGVlcCBzZWN0aW9ucyB3aXRoIHZlcnkgdGlnaHQgaGFpcnBpbiB0dXJucyBhbmQgaGlnaCBzdGVwcyB0aGF0IHdpbGwgY2F1c2UgdGhlIGNoYWlucmluZyB0byBoaXQgdGhlIGdyb3VuZC4gU29tZSB0cmlhbHMgdGVjaG5pcXVlcyB3aWxsIGJlIG5lY2Vzc2FyeS4gTmVhcmx5IGltcG9zc2libGUgdG8gcmlkZSB1cGhpbGwuPC9icj5TdXJmYWNlOiBtYW55IGxhcmdlIHJvb3RzIC8gcm9ja3Mgb3Igc2xpcHBlcnkgZ3JvdW5kLCBsb29zZSBzY3JlZTwvYnI+T2JzdGFjbGVzOiBkcmFncywgaGFyZGx5IGRyaXZlYWJsZSBzdGVwczwvYnI+R3JhZGllbnQ6ID43MCU8L2JyPkJlbmRzOiBiYWlsIGxpa2UgaGFpcnBpbnM8L2JyPkRyaXZpbmcgc2tpbGxzOiBwZXJmZWN0IGJpa2UgY29udHJvbCB3aXRoIHRyaWFsIHNraWxscyByZXF1aXJlZCwgbGlrZSBtb3ZpbmcgdGhlIHJlYXIgd2hlZWwgb25seSBpbiBoYWlycGluczwvYnI+XCIpO1xuICAgICAgICBcIjVcIj09YltcIm10YjpzY2FsZVwiXSYmKGErPVwiTW91bnRhaW5iaWtlcm91dGU6IFZlcnkgc3RlZXAgYW5kIGRpZmZpY3VsdCB3aXRoIGJpZyBib3VsZGVyIGZpZWxkcyBhbmQgZGVicmlzLCBhbmQgbGFuZHNsaWRlcy4gU3BlZWQgbXVzdCBiZSBjYXJyaWVkIGZvciBjb3VudGVyLWFzY2VudHMuIElmIGF0IGFsbCBvbmx5IHNob3J0IHBhc3NhZ2VzIGFyZSBhdmFpbGFibGUgZm9yIGFjY2VsZXJhdGluZyBhbmQgYnJha2luZy4gRmFsbGVuIHRyZWVzIG1heSBtYWtlIHZlcnkgc3RlZXAgcGFzc2FnZXMgZXZlbiBtb3JlIGRpZmZpY3VsdC4gVmVyeSBmZXcgTW91bnRhaW5iaWtlcnMgY2FuIGFjdHVhbGx5IHJpZGUgYXQgdGhpcyBsZXZlbC4gTW9zdCB3aWxsIGhhdmUgdG8gcHVzaC48L2JyPlN1cmZhY2U6IGNvdW50ZXItYXNjZW50cyAvIHJvY2tzIG9yIHNsaXBwZXJ5IGdyb3VuZCwgbG9vc2Ugc2NyZWUgLyBwYXRoIGlzIHJhdGhlciBhIEFscGluZSBoaWtpbmcgKD5UNCkgcGF0aDwvYnI+T2JzdGFjbGVzOiBkcmFncywgY29tYmluYXRpb25zIG9mIGhhcmRseSBkcml2ZWFibGUgc3RlcHM8L2JyPkdyYWRpZW50OiA+NzAlPC9icj5CZW5kczogYmFpbCBsaWtlIGhhaXJwaW5zIHdpdGggb2JzdGFjbGVzPC9icj5Ecml2aW5nIHNraWxsczogZXhjZWxsZW50IGJpa2UgY29udHJvbCB3aXRoIHNwZWNpYWwgdHJpYWwgc2tpbGxzIHJlcXVpcmVkLCBtb3ZpbmcgdGhlIGZyb250IGFuZCByZWFyIHdoZWVsIGlzIGxpbWl0ZWQ8L2JyPlwiKTtcbiAgICAgICAgXCI2XCI9PWJbXCJtdGI6c2NhbGVcIl0mJihhKz1cIk1vdW50YWluYmlrZXJvdXRlOiBDbGFzc2lmeSB3YXlzIHdpdGggNiB0aGF0IGFyZSBub3QgcmlkZWFibGUgYXQgYWxsIGZvciBhIG10YmlrZXIuIEUuZy4gQ2hhaW5zIG9yIHN0ZW1wbGVzIChtZXRhbCBydW5ncykgb24gYSB2aWEgZmVycmF0YSBvciBzaW1wbHkgdW5zZWN1cmVkIGFscGluZSBwYXRoZXMgdGhhdCBhcmUgbm90IGV2ZW4gcGFydGx5IHJpZGVhYmxlIGZvciB0aGUgdmVyeSBiZXN0IG10YmlrZXJzICh1c2luZyB0cmlhbCB0ZWNobmlxdWVzKS4gU3RlZXBuZXNzIGlzIG9mdGVuID40NVxcdTAwYjAuIElmIHVzZWQgZm9yIHNpbmdsZSBwb2ludHMsIHRoZW4gdGhpcyBoaWdobGlnaHRzIGV4Y2VwdGlvbmFsbHkgZGlmZmljdWx0IHNwb3RzLiBPZnRlbiBzcG90dGluZyBpcyBpbXBvc3NpYmxlIGFuZCBmYWxsaW5nIG1heSBiZSBsZXRoYWwuPC9icj5TdXJmYWNlOiBQYXRoIGlzIHJhdGhlciBhIEFscGluZSBoaWtpbmcgKFQ1IG9yIFQ2KSBwYXRoIG9yIGJhcmUgcm9jayB3aXRob3V0IHZpc2libGUgcGF0aC48L2JyPk9ic3RhY2xlczogU3RlcHMgb3ZlciAybSwgcm9jayBmYWNlcywuLi48L2JyPkdyYWRpZW50OiA+MTAwJTwvYnI+QmVuZHM6IG5vIGJlbmRzIGNhbiBiZSBkaXN0aW5ndWlzaGVkIGFzIHN1Y2guPC9icj5Ecml2aW5nIHNraWxsczogb25seSB0aGUgdmVyeSBiZXN0IHRyaWFsIHNwZWNpYWxpc3RzIG9yIHZlcnRyaWRlcnMgd2lsbCB0cnkgdG8gcmlkZSB0aGVzZSBzcG90cy4gV2Fsa2luZyB0aGUgcGxhY2UgZmlyc3QgdG8gZmluZCBhIHdheSB0byBjbGVhciBpcyBuZWVkZWQuPC9icj5cIik7XG4gICAgICAgIFwiMTBcIj09Yi5tYXhzcGVlZCYmKGErPSd0cmFmZmljLWNhbG1lZCBzZWN0b3I6IG1heHNwZWVkIDEwIEttL2ggYW5kIFwicmlnaHQgb3ZlciBsZWZ0XCI8L2JyPicpO1wiMzBcIj09Yi5tYXhzcGVlZCYmKGErPSd0cmFmZmljLWNhbG1lZCBzZWN0b3I6IFwicmlnaHQgb3ZlciBsZWZ0XCIgYW5kIG1heHNwZWVkIDMwIEttL2g8L2JyPicpO1wiNTBcIj09Yi5tYXhzcGVlZCYmKGErPVwibWF4c3BlZWQgNTAgS20vaDwvYnI+XCIpO1wiNzBcIj09Yi5tYXhzcGVlZCYmKGErPVwibWF4c3BlZWQgNTAgS20vaDwvYnI+XCIpO1wiODBcIj09Yi5tYXhzcGVlZCYmKGErPVwibWF4c3BlZWQgODAgS20vaDwvYnI+XCIpO1wiMTAwXCI9PWIubWF4c3BlZWQmJihhKz1cIm1heHNwZWVkICAxMDAgS20vaDwvYnI+XCIpO1wibm9cIj09Yi5vdmVydGFraW5nJiYoYSs9XCJObyBvdmVydGFraW5nITwvYnI+XCIpO1wieWVzXCI9PWIubm9leGl0JiYoYSs9XCJub2V4aXQ8L2JyPlwiKTtcInllc1wiPT1iLm9uZXdheSYmKGErPVwib25ld2F5PC9icj5cIik7XCJkZXNpZ25hdGVkXCI9PVxuICAgICAgICBiLnByaW9yaXR5X3JvYWQmJihhKz1cInByaW9yaXR5IHJvYWQgZGVzaWduYXRlZDwvYnI+XCIpO1wiZW5kXCI9PWIucHJpb3JpdHlfcm9hZCYmKGErPVwicHJpb3JpdHkgcm9hZCBlbmRzPC9icj5cIik7XCJlbWVyZ2VuY3lfYmF5XCI9PWIuaGlnaHdheSYmKGErPVwiZW1lcmdlbmN5IGJheTwvYnI+XCIpO1wieWVzXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJ0cmFmZmljIGNhbG1pbmc8L2JyPlwiKTtcImJ1bXBcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImJ1bXA8L2JyPlwiKTtcImNoaWNhbmVcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImNoaWNhbmU8L2JyPlwiKTtcImNob2tlclwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwiY2hva2VyPC9icj5cIik7XCJjdXNoaW9uXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJjdXNoaW9uPC9icj5cIik7XCJodW1wXCI9PWIudHJhZmZpY19jYWxtaW5nJiYoYSs9XCJodW1wPC9icj5cIik7XCJpc2xhbmRcIj09Yi50cmFmZmljX2NhbG1pbmcmJihhKz1cImlzbGFuZDwvYnI+XCIpO1xuICAgICAgICBcInJ1bWJsZV9zdHJpcFwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwicnVtYmxlIHN0cmlwPC9icj5cIik7XCJ0YWJsZVwiPT1iLnRyYWZmaWNfY2FsbWluZyYmKGErPVwidGFibGU8L2JyPlwiKTtpZihcInBhcmtpbmdcIj09Yi5hbWVuaXR5JiYoXCJ5ZXNcIj09Yi5mZWUmJihhKz1cImZlZSByZXF1aXJlZDxici8+XCIpLGM9YltcImNhcGFjaXR5OndvbWVuXCJdLFwiXCIhPWMmJlwibm9cIiE9YyYmbnVsbCE9Yykpe3ZhciBkPVwidW5rb3duXCI7XCJ5ZXNcIiE9YyYmKGQ9Yyk7YSs9XCJsYWRpZXMgcGFya2luZyBzcGFjZXMgKG51bWJlcnM6IFwiK2QrXCIpIDxici8+XCJ9Yi5wYXJrX3JpZGUmJihcImJ1c1wiPT1iLnBhcmtfcmlkZSYmKGErPVwiYnVzIGNvbm5lY3Rpb248YnIvPlwiKSxcInRyYW1cIj09Yi5wYXJrX3JpZGUmJihhKz1cInRyYW0gY29ubmVjdGlvbjxici8+XCIpLFwidW5rbm93blwiPT1iLnBhcmtfcmlkZSYmKGErPVwicGFyayByaWRlIHVua293bjxici8+XCIpKTtiW1wicmFpbHdheTpwb3NpdGlvblwiXSYmKGErPVwicmFpbHdheTxici8+cG9zaXRpb246IFwiK1xuICAgICAgICBiW1wicmFpbHdheTpwb3NpdGlvblwiXStcIjxici8+XCIpO2IudWljX3JlZiYmKGErPVwiVUlDOiBcIitiLnVpY19yZWYrXCI8YnIvPlwiKTtyZXR1cm4gYX0sZm5Db250ZW50U3BvcnRzPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7XCI5cGluXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogOXBpbjxici8+XCIpO1wiMTBwaW5cIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiAxMHBpbjxici8+XCIpO1wiYW1lcmljYW5fZm9vdGJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBhbWVyaWNhbiBmb290YmFsbDxici8+XCIpO1wiYWlraWRvXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYWlraWRvPGJyLz5cIik7XCJhcmNoZXJ5XCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYXJjaGVyeTxici8+XCIpO1wiYXRobGV0aWNzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYXRobGV0aWNzPGJyLz5cIik7XCJhdXN0cmFsaWFuX2Zvb3RiYWxsXCI9PWIuc3BvcnQmJlxuICAgIChhKz1cInBvc3NpYmxlIHNwb3J0IDogYXVzdHJhbGlhbiBmb290YmFsbDxici8+XCIpO1wiYmFzZVwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJhc2U8YnIvPlwiKTtcImJhZG1pbnRvblwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJhZG1pbnRvbjxici8+XCIpO1wiYmFzZWJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBiYXNlYmFsbDxici8+XCIpO1wiYmFza2V0YmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJhc2tldGJhbGw8YnIvPlwiKTtcImJlYWNodm9sbGV5YmFsbFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJlYWNodm9sbGV5YmFsbDxici8+XCIpO1wiYm14XCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYm14PGJyLz5cIik7XCJib3VsZXNcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBib3VsZXM8YnIvPlwiKTtcImJvdWxlXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYm91bGU8YnIvPlwiKTtcbiAgICAgICAgXCJib3dsc1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGJvd2xzPGJyLz5cIik7XCJib3hpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBib3hpbmc8YnIvPlwiKTtcImNhbmFkaWFuX2Zvb3RiYWxsXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY2FuYWRpYW4gZm9vdGJhbGw8YnIvPlwiKTtcImNhbm9lXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY2Fub2U8YnIvPlwiKTtcImNoZXNzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY2hlc3M8YnIvPlwiKTtcImNsaWZmX2RpdmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGNsaWZmIGRpdmluZzxici8+XCIpO1wiY2xpbWJpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBjbGltYmluZzxici8+XCIpO1wiY2xpbWJpbmdfYWR2ZW50dXJlXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogYWR2ZW50dXJlIGNsaW1iaW5nPGJyLz5cIik7XCJjcmlja2V0XCI9PVxuICAgICAgICBiLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGNyaWNrZXQ8YnIvPlwiKTtcImNyaWNrZXRfbmV0c1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGNyaWNrZXQgbmV0czxici8+XCIpO1wiY3JvcXVldFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGNyb3F1ZXQ8YnIvPlwiKTtcImN1cmxpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBjdXJsaW5nPGJyLz5cIik7XCJjeWNsaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogY3ljbGluZzxici8+XCIpO2lmKFwiZGFydHNcIj09Yi5zcG9ydHx8XCJkYXJ0XCI9PWIuc3BvcnQpYSs9XCJEYXJ0czxici8+XCI7XCJkb2dfcmFjaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0IDogZG9nIHJhY2luZzxici8+XCIpO1wiZmVuY2luZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydCA6IGZlbmNpbmc8YnIvPlwiKTtcImVxdWVzdHJpYW5cIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQgOiBlcXVlc3RyaWFuPGJyLz5cIik7XG4gICAgICAgIFwiZm9vdGJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IGFtZXJpY2FuIGZvb3RiYWxsPGJyLz5cIik7XCJmcmVlX2ZseWluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogZnJlZSBmbHlpbmc8YnIvPlwiKTtcImdhZWxpY19nYW1lc1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogZ2FlbGljIGdhbWVzPGJyLz5cIik7XCJnb2xmXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBnb2xmPGJyLz5cIik7XCJneW1uYXN0aWNzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBneW1uYXN0aWs8YnIvPlwiKTtcImhvY2tleVwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogaG9ja2V5PGJyLz5cIik7XCJob3JzZXNob2VzXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBob3JzZXNob2VzPGJyLz5cIik7XCJob3JzZV9yYWNpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IGhvcnNlIHJhY2luZzxici8+XCIpO1wiaWNlX3N0b2NrXCI9PVxuICAgICAgICBiLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogaWNlIHN0b2NrPGJyLz5cIik7XCJqdWRvXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBqdWRvPGJyLz5cIik7XCJrYXJ0aW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBrYXJ0aW5nPGJyLz5cIik7XCJraXRlc3VyZmluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDoga2l0ZXN1cmZpbmc8YnIvPlwiKTtcImtvcmZiYWxsXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBrb3JmYmFsbDxici8+XCIpO1wibW90b3JcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IG1vdG9yPGJyLz5cIik7XCJtdWx0aVwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogbXVsdGk8YnIvPlwiKTtcIm9ic3RhY2xlX2NvdXJzZVwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogb2JzdGFjbGUgY291cnNlPGJyLz5cIik7XCJvcmllbnRlZXJpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IG9yaWVudGVlcmluZzxici8+XCIpO1xuICAgICAgICBcInBhZGRsZV90ZW5uaXNcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHBhZGRsZS10ZW5uaXM8YnIvPlwiKTtcInBhcmFnbGlkaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBwYXJhZ2xpZGluZzxici8+XCIpO1wiUGVsb3RhXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBQZWxvdGE8YnIvPlwiKTtcInJhc3F1ZXRcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHJhY3F1ZXQ8YnIvPlwiKTtcInJvd2luZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogcm93aW5nPGJyLz5cIik7XCJydWdieV9sZWFndWVcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHJ1Z2J5IGxlYWd1ZTxici8+XCIpO1wicnVnYnlfdW5pb25cIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHJ1Z2J5IHVuaW9uPGJyLz5cIik7XCJydW5uaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBydW5uaW5nPGJyLz5cIik7XCJzY3ViYV9kaXZpbmdcIj09Yi5zcG9ydCYmXG4gICAgICAgIChhKz1cInBvc3NpYmxlIHNwb3J0OiBzY3ViYSBkaXZpbmc8YnIvPlwiKTtcInNob290aW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBzaG9vdGluZzxici8+XCIpO1wic2thdGluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogc2thdGluZzxici8+XCIpO1wic2thdGVib2FyZFwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogc2thdGVib2FyZDxici8+XCIpO1wic2tpaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBza2lpbmc8YnIvPlwiKTtcInNvY2NlclwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogc29jY2VyPGJyLz5cIik7XCJzdXJmaW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiBzdXJmaW5nPGJyLz5cIik7XCJzd2ltbWluZ1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogc3dpbW1pbmc8YnIvPlwiKTtcInRhYmxlX3Rlbm5pc1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogdGFibGUgdGVubmlzPGJyLz5cIik7XG4gICAgICAgIFwidGFla3dvbmRvXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiB0YWVrd29uZG88YnIvPlwiKTtcInRlYW1faGFuZGJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHRlYW0gaGFuZGJhbGw8YnIvPlwiKTtcInRlbm5pc1wiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogdGVubmlzPGJyLz5cIik7XCJ0b2JvZ2dhblwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogdG9ib2dnYW48YnIvPlwiKTtcInZvbGxleWJhbGxcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHZvbGxleWJhbGw8YnIvPlwiKTtcIndhdGVyX3NraVwiPT1iLnNwb3J0JiYoYSs9XCJwb3NzaWJsZSBzcG9ydDogd2F0ZXIgc2tpPGJyLz5cIik7XCJ3ZWlnaHRsaWZ0aW5nXCI9PWIuc3BvcnQmJihhKz1cInBvc3NpYmxlIHNwb3J0OiB3ZWlnaHRsaWZ0aW5nPGJyLz5cIik7XCJ3cmVzdGxpbmdcIj09Yi5zcG9ydCYmKGErPVwicG9zc2libGUgc3BvcnQ6IHdyZXN0bGluZzxici8+XCIpO3JldHVybiBhfTtcbmV4cG9ydCBmdW5jdGlvbiBmbkFyenRJbmZvKGIpe3ZhciBhPVwiXCIsYz1cIlwiLGQ9YltcImhlYWx0aGNhcmU6c3BlY2lhbGl0eVwiXTtcIlwiIT1kJiYoXCJnZW5lcmFsXCI9PWQmJihjKz1cImdlbmVyYWw8YnIvPlwiKSxcImFsbGVyZ29sb2d5XCI9PWQmJihjKz1cImFsbGVyZ29sb2d5PGJyLz5cIiksXCJhbmFlc3RoZXRpY3NcIj09ZCYmKGMrPVwiYW5hZXN0aGV0aWNzPGJyLz5cIiksXCJiaW9jaGVtaXN0cnlcIj09ZCYmKGMrPVwiYmlvY2hlbWlzdHJ5PGJyLz5cIiksXCJiaW9sb2dpY2FsX2hhZW1hdG9sb2d5XCI9PWQmJihjKz1cImJpb2xvZ2ljYWwgaGFlbWF0b2xvZ3k8YnIvPlwiKSxcImJpb2xvZ3lcIj09ZCYmKGMrPVwiYmlvbG9neTxici8+XCIpLFwiY2FyZGlvbG9neVwiPT1kJiYoYys9XCJjYXJkaW9sb2d5PGJyLz5cIiksXCJjYXJkaWFjX3N1cmdlcnlcIj09ZCYmKGMrPVwiY2FyZGlhYyBzdXJnZXJ5PGJyLz5cIiksXCJjaGlsZF9wc3ljaGlhdHJ5XCI9PWQmJihjKz1cImNoaWxkIHBzeWNoaWF0cnk8YnIvPlwiKSxcImRlbnRhbF9vcmFsX21heGlsbG9fZmFjaWFsX3N1cmdlcnlcIj09XG5kJiYoYys9XCJkZW50YWwtLCBvcmFsLSwgbWF4aWxsby0gYW5kIGZhY2lhbC1zdXJnZXJ5PGJyLz5cIiksXCJkZXJtYXRvbG9neVwiPT1kJiYoYys9XCJkZXJtYXRvbG9neTxici8+XCIpLFwiZGVybWF0b3ZlbmVyZW9sb2d5XCI9PWQmJihjKz1cImRlcm1hdG92ZW5lcmVvbG9neTxici8+XCIpLFwiZGlhZ25vc3RpY19yYWRpb2xvZ3lcIj09ZCYmKGMrPVwiZGlhZ25vc3RpYyByYWRpb2xvZ3k8YnIvPlwiKSxcImVtZXJnZW5jeVwiPT1kJiYoYys9XCJlbWVyZ2VuY3k8YnIvPlwiKSxcImVuZG9jcmlub2xvZ3lcIj09ZCYmKGMrPVwiZW5kb2NyaW5vbG9neTxici8+XCIpLFwiZ2FzdHJvZW50ZXJvbG9naWNhbF9zdXJnZXJ5XCI9PWQmJihjKz1cImdhc3Ryb2VudGVyb2xvZ2ljYWwgc3VyZ2VyeTxici8+XCIpLFwiZ2FzdHJvZW50ZXJvbG9neVwiPT1kJiYoYys9XCJnYXN0cm9lbnRlcm9sb2d5PGJyLz5cIiksXCJnZXJpYXRyaWNzXCI9PWQmJihjKz1cImdlcmlhdHJpY3M8YnIvPlwiKSxcImd5bmFlY29sb2d5XCI9PWQmJihjKz1cImd5bmFlY29sb2d5PGJyLz5cIiksXG5cImhhZW1hdG9sb2d5XCI9PWQmJihjKz1cImhhZW1hdG9sb2d5PGJyLz5cIiksXCJoZXBhdG9sb2d5XCI9PWQmJihjKz1cImhlcGF0b2xvZ3k8YnIvPlwiKSxcImltbXVub2xvZ3lcIj09ZCYmKGMrPVwiaW1tdW5vbG9neTxici8+XCIpLFwiaW5mZWN0aW91c19kaXNlYXNlc1wiPT1kJiYoYys9XCJpbmZlY3Rpb3VzIGRpc2Vhc2VzPGJyLz5cIiksXCJpbnRlbnNpdmVcIj09ZCYmKGMrPVwiaW50ZW5zaXZlPGJyLz5cIiksXCJpbnRlcm5hbFwiPT1kJiYoYys9XCJpbnRlcm5hbDxici8+XCIpLFwibWF4aWxsb2ZhY2lhbF9zdXJnZXJ5XCI9PWQmJihjKz1cIm1heGlsbG9mYWNpYWwgc3VyZ2VyeTxici8+XCIpLFwibmVwaHJvbG9neVwiPT1kJiYoYys9XCJuZXBocm9sb2d5PGJyLz5cIiksXCJuZXVyb2xvZ3lcIj09ZCYmKGMrPVwibmV1cm9sb2d5PGJyLz5cIiksXCJuZXVyb3BoeXNpb2xvZ3lcIj09ZCYmKGMrPVwibmV1cm9waHlzaW9sb2d5PGJyLz5cIiksXCJuZXVyb3BzeWNoaWF0cnlcIj09ZCYmKGMrPVwibmV1cm9wc3ljaGlhdHJ5PGJyLz5cIiksXCJuZXVyb3N1cmdlcnlcIj09XG5kJiYoYys9XCJuZXVyb3N1cmdlcnk8YnIvPlwiKSxcIm51Y2xlYXJcIj09ZCYmKGMrPVwibnVjbGVhcjxici8+XCIpLFwib2NjdXBhdGlvbmFsXCI9PWQmJihjKz1cIm9jY3VwYXRpb25hbCA8YnIvPlwiKSxcIm9uY29sb2d5XCI9PWQmJihjKz1cIm9uY29sb2d5PGJyLz5cIiksXCJvcGh0aGFsbW9sb2d5XCI9PWQmJihjKz1cIm9waHRoYWxtb2xvZ3k8YnIvPlwiKSxcIm9ydGhvcGFlZGljc1wiPT1kJiYoYys9XCJvcnRob3BhZWRpY3M8YnIvPlwiKSxcIm90b2xhcnluZ29sb2d5XCI9PWQmJihjKz1cIm90b2xhcnluZ29sb2d5PGJyLz5cIiksXCJwYWVkaWF0cmljX3N1cmdlcnlcIj09ZCYmKGMrPVwicGFlZGlhdHJpYyBzdXJnZXJ5PGJyLz5cIiksXCJwYWVkaWF0cmljc1wiPT1kJiYoYys9XCJwYWVkaWF0cmljczxici8+XCIpLFwicGFsbGlhdGl2ZVwiPT1kJiYoYys9XCJwYWxsaWF0aXZlPGJyLz5cIiksXCJwaHlzaWF0cnlcIj09ZCYmKGMrPVwicGh5c2lhdHJ5PGJyLz5cIiksXCJwbGFzdGljX3N1cmdlcnlcIj09ZCYmKGMrPVwicGxhc3RpYyBzdXJnZXJ5PGJyLz5cIiksXG5cInByb2N0b2xvZ3lcIj09ZCYmKGMrPVwicHJvY3RvbG9neTxici8+XCIpLFwicHN5Y2hpYXRyeVwiPT1kJiYoYys9XCJwc3ljaGlhdHJ5PGJyLz5cIiksXCJwdWxtb25vbG9neVwiPT1kJiYoYys9XCJwdWxtb25vbG9neTxici8+XCIpLFwicmFkaW9sb2d5XCI9PWQmJihjKz1cInJhZGlvbG9neTxici8+XCIpLFwicmFkaW90aGVyYXB5XCI9PWQmJihjKz1cInJhZGlvdGhlcmFweTxici8+XCIpLFwicmhldW1hdG9sb2d5XCI9PWQmJihjKz1cInJoZXVtYXRvbG9neTxici8+XCIpLFwic3RvbWF0b2xvZ3lcIj09ZCYmKGMrPVwic3RvbWF0b2xvZ3k8YnIvPlwiKSxcInN1cmdlcnlcIj09ZCYmKGMrPVwic3VyZ2VyeTxici8+XCIpLFwic3VyZ2ljYWxfb25jb2xvZ3lcIj09ZCYmKGMrPVwic3VyZ2ljYWwgb25jb2xvZ3k8YnIvPlwiKSxcInRob3JhY2ljX3N1cmdlcnlcIj09ZCYmKGMrPVwidGhvcmFjaWMgc3VyZ2VyeTxici8+XCIpLFwidHJhbnNwbGFudFwiPT1kJiYoYys9XCJ0cmFuc3BsYW50PGJyLz5cIiksXCJ0cmF1bWFcIj09ZCYmKGMrPVwidHJhdW1hPGJyLz5cIiksXG5cInRyb3BpY2FsXCI9PWQmJihjKz1cInRyb3BpY2FsPGJyLz5cIiksXCJ1cm9sb2d5XCI9PWQmJihjKz1cInVyb2xvZ3k8YnIvPlwiKSxcInZhc2N1bGFyX3N1cmdlcnlcIj09ZCYmKGMrPVwidmFzY3VsYXIgc3VyZ2VyeTxici8+XCIpLFwidmVuZXJlb2xvZ3lcIj09ZCYmKGMrPVwidmVuZXJlb2xvZ3k8YnIvPlwiKSxcImFjdXB1bmN0dXJlXCI9PWQmJihjKz1cImFjdXB1bmN0dXJlPGJyLz5cIiksXCJuYXR1cm9wYXRoeVwiPT1kJiYoYys9XCJuYXR1cm9wYXRoeTxici8+XCIpLFwiY2hpcm9wcmFjdGljXCI9PWQmJihjKz1cImNoaXJvcHJhY3RpYyA8YnIvPlwiKSxcImhvbWVvcGF0aHlcIj09ZCYmKGMrPVwiaG9tZW9wYXRoeTxici8+XCIpLFwib3N0ZW9wYXRoeVwiPT1kJiYoYys9XCJvc3Rlb3BhdGh5PGJyLz5cIikpO1wiXCIhPWIuaGVhbHRoX3NwZWNpYWx0eSYmKFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmZhbWlseV9tZWRpY2luZVwiXSYmKGMrPVwiZmFtaWx5IG1lZGljaW5lPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZW1lcmdlbmN5X21lZGljaW5lXCJdJiZcbihjKz1cImVtZXJnZW5jeSBtZWRpY2luZTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmFuYWVzdGhlc2lvbG9neVwiXSYmKGMrPVwiYW5hZXN0aGVzaW9sb2d5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZGVybWF0b2xvZ3lcIl0mJihjKz1cImRlcm1hdG9sb2d5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6ZWFyX25vc2VfdGhyb2F0XCJdJiYoYys9XCJlYXIsIG5vc2UsIHRocm9hdCAoRU5UIHNwZWNpYWxpc3QpPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6b2NjdXBhdGlvbmFsX21lZGljaW5lXCJdJiYoYys9XCJvY2N1cGF0aW9uYWwgbWVkaWNpbmU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTppbnRlcm5hbF9tZWRpY2luZVwiXSYmKGMrPVwiaW50ZXJuYWwgbWVkaWNpbmU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpuZXVyb2xvZ3lcIl0mJihjKz1cIm5ldXJvbG9neTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5Om9waHRoYWxtb2xvZ3lcIl0mJlxuKGMrPVwib3BodGhhbG1vbG9neTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBhbGxpYXRpdmVfbWVkaWNpbmVcIl0mJihjKz1cInBhbGxpYXRpdmUgbWVkaWNpbmU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpwc3ljaGlhdHJ5XCJdJiYoYys9XCJwc3ljaGlhdHJ5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6Z3luYWVjb2xvZ3lcIl0mJihjKz1cImd5bmFlY29sb2d5PGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6dXJvbG9neVwiXSYmKGMrPVwidXJvbG9neTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OnBhaW5fbWVkaWNpbmVcIl0mJihjKz1cInBhaW4gbWVkaWNpbmU8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTplbnZpcm9ubWVudGFsX21lZGljaW5lXCJdJiYoYys9XCJlbnZpcm9ubWVudGFsIG1lZGljaW5lPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6aW50ZW5zaXZlX2NhcmVfbWVkaWNpblwiXSYmXG4oYys9XCJpbnRlbnNpdmUgY2FyZSBtZWRpY2luPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cGFlZGlhdHJpY3NcIl0mJihjKz1cInBhZWRpYXRyaWNzPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6cGh5c2lhdHJ5XCJdJiYoYys9XCJwaHlzaWF0cnk8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpyYWRpb2xvZ3lcIl0mJihjKz1cInJhZGlvbG9neTxici8+XCIpLFwieWVzXCI9PWJbXCJoZWFsdGhfc3BlY2lhbHR5OmdlbmVyYWxcIl0mJihjKz1cImdlbmVyYWw8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpvY2N1cGF0aW9uYWxfdGhlcmFweVwiXSYmKGMrPVwib2NjdXBhdGlvbmFsIHRoZXJhcHk8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpwdWxtb25vbG9neVwiXSYmKGMrPVwicHVsbW9ub2xvZ3k8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTphY3VwdW5jdHVyZVwiXSYmKGMrPVwiYWN1cHVuY3R1cmU8YnIvPlwiKSxcInllc1wiPT1cbmJbXCJoZWFsdGhfc3BlY2lhbHR5Om9ydGhvcGFlZGljc1wiXSYmKGMrPVwib3J0aG9wYWVkaWNzPGJyLz5cIiksXCJ5ZXNcIj09YltcImhlYWx0aF9zcGVjaWFsdHk6Y2hpcm9wcmFjdGljXCJdJiYoYys9XCJjaGlyb3ByYWN0aWM8YnIvPlwiKSxcInllc1wiPT1iW1wiaGVhbHRoX3NwZWNpYWx0eTpzcG9ydHNfbWVkaWNpbmVcIl0mJihjKz1cInNwb3J0cyBtZWRpY2luZTxici8+XCIpKTtcIlwiIT1jJiYoYT1hK1wic3ViamVjdHM6IFwiKygnPGRpdiBjbGFzcz1cImM0Z19vcGVuX3RleHRcIj4nK2MrXCI8L2Rpdj5cIikpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuS3JhZnR3ZXJrSW5mbyhiKXt2YXIgYT1cIlwiO2lmKGJbXCJnZW5lcmF0b3I6bWV0aG9kXCJdKXthKz1cIm1ldGhvZCBvZiBnZW5lcmF0aW9uOiBcIjtzd2l0Y2goYltcImdlbmVyYXRvcjptZXRob2RcIl0pe2Nhc2UgXCJjb21idXN0aW9uXCI6YSs9XCJjb21idXN0aW9uXCI7YnJlYWs7Y2FzZSBcInRoZXJtYWxcIjphKz1cInRoZXJtYWxcIjticmVhaztjYXNlIFwicHVtcGluZ1wiOmErPVwicHVtcGluZ1wiO2JyZWFrO2Nhc2UgXCJwaG90b3ZvbHRhaWNcIjphKz1cInBob3Rvdm9sdGFpY1wiO2JyZWFrO2Nhc2UgXCJnYXNpZmljYXRpb25cIjphKz1cImdhc2lmaWNhdGlvblwiO2JyZWFrO2Nhc2UgXCJhbmFlcm9iaWNfZGlnZXN0aW9uXCI6YSs9XCJhbmFlcm9iaWMgZGlnZXN0aW9uXCI7YnJlYWs7Y2FzZSBcInB5cm9seXNpc1wiOmErPVwicHlyb2x5c2lzXCI7YnJlYWs7Y2FzZSBcImZpc3Npb25cIjphKz1cImZpc3Npb25cIjticmVhaztjYXNlIFwiZnVzaW9uXCI6YSs9XCJmdXNpb25cIjticmVhaztkZWZhdWx0OmErPVwidW5rbm93bjxici8+XCJ9YSs9XG4gICAgXCI8YnIvPlwifWlmKGIucG93ZXJfc291cmNlKXthKz1cInBvd2VyIHNvdXJjZTogXCI7c3dpdGNoKGIucG93ZXJfc291cmNlKXtjYXNlIFwicGhvdG92b2x0YWljXCI6YSs9XCJwaG90b3ZvbHRhaWNcIjticmVhaztkZWZhdWx0OmErPVwidW5rbm93bjxici8+XCJ9YSs9XCI8YnIvPlwifWJbXCJnZW5lcmF0b3I6b3V0cHV0OmVsZWN0cmljaXR5XCJdJiYoYSs9XCJlbGVjdHJpY2l0eSBnZW5lcmF0aW9uOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDplbGVjdHJpY2l0eVwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmhlYXRcIl0mJihhKz1cImhlYXQgZ2VuZXJhdGlvbjogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6aGVhdFwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRcIl0mJihhKz1cImNvbGQgZ2VuZXJhdGlvbjogXCIrYltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZFwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0XCJdJiYoYSs9XCJvdXRwdXQ6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0XCJdK1wiPGJyLz5cIik7XG4gICAgYltcImdlbmVyYXRvcjpvdXRwdXQ6aG90X2FpclwiXSYmKGErPVwiaG90LWFpciBnZW5lcmF0aW9uOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpob3RfYWlyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZF93YXRlclwiXSYmKGErPVwiY29sZCB3YXRlciBnZW5lcmF0aW9uOiBcIitiW1wiZ2VuZXJhdG9yOm91dHB1dDpjb2xkX3dhdGVyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29sZF9haXJcIl0mJihhKz1cImNvbGQgYWlyIGdlbmVyYXRpb246IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbGRfYWlyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6Y29tcHJlc3NlZF9haXJcIl0mJihhKz1cImNvbXByZXNzZWQgYWlyIGdlbmVyYXRpb246IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmNvbXByZXNzZWRfYWlyXCJdK1wiPGJyLz5cIik7YltcImdlbmVyYXRvcjpvdXRwdXQ6c3RlYW1cIl0mJihhKz1cInN0ZWFtIGdlbmVyYXRpb246IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OnN0ZWFtXCJdK1xuICAgICAgICBcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OnZhY3V1bVwiXSYmKGErPVwidmFjdXVtIGdlbmVyYXRpb246IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OnZhY3V1bVwiXStcIjxici8+XCIpO2JbXCJnZW5lcmF0b3I6b3V0cHV0OmJhdHRlcnlfY2hhcmdpbmdcIl0mJihhKz1cImJhdHRlcnkgY2hhcmdpbmc6IFwiK2JbXCJnZW5lcmF0b3I6b3V0cHV0OmJhdHRlcnlfY2hhcmdpbmdcIl0rXCI8YnIvPlwiKTtcIlBXUlwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkJXUi0xXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiQldSLTJcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItM1wiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitcbiAgICAgICAgYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJCV1ItNFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkJXUi01XCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiQldSLTZcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJQSFdSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiR0NSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiRkJSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcbiAgICAgICAgXCI8YnIvPlwiKTtcIlJCTUstMTAwMFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIlJCTUstMTUwMFwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIlZWRVJcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJDQU5EVVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcIkNQUi0xMDAwXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiRVBSXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1xuICAgIFwidG9rYW1ha1wiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBcIitiW1wiZ2VuZXJhdG9yOnR5cGVcIl0rXCI8YnIvPlwiKTtcInN0ZWxsYXJhdG9yXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiSUNGXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IFwiK2JbXCJnZW5lcmF0b3I6dHlwZVwiXStcIjxici8+XCIpO1wiY29sZC1mdXNpb25cIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogXCIrYltcImdlbmVyYXRvcjp0eXBlXCJdK1wiPGJyLz5cIik7XCJ3aW5kX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjptZXRob2RcIl0mJlwiaG9yaXpvbnRhbF9heGlzXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIG1ldGhvZDogaG9yaXpvbnRhbCBheGlzIHdpbmQgdHVyYmluZTxici8+XCIpO1wid2luZF90dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6bWV0aG9kXCJdJiZcbiAgICBcInZlcnRpY2FsX2F4aXNcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgbWV0aG9kOiB2ZXJ0aWNhbCBheGlzIHdpbmQgdHVyYmluZTxici8+XCIpO1wiZnJhbmNpc190dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IGZyYW5jaXMtdHVyYmluZTxici8+XCIpO1wia2FwbGFuX3R1cmJpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZToga2FwbGFuLXR1cmJpbmU8YnIvPlwiKTtcInBlbHRvbl90dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IHBlbHRvbi10dXJiaW5lPGJyLz5cIik7XCJzdHJlYW1cIj09YltcImdlbmVyYXRvcjptZXRob2RcIl0mJlwiaG9yaXpvbnRhbF9heGlzXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIG1ldGhvZDogaG9yaXpvbnRhbCBheGlzIHNlYSBjdXJyZW50IHBvd2VyIHN0YXRpb248YnIvPlwiKTtcInN0cmVhbVwiPT1iW1wiZ2VuZXJhdG9yOm1ldGhvZFwiXSYmXG4gICAgXCJ2ZXJ0aWNhbF9heGlzXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IHZlcnRpY2FsIGF4aXMgc2VhIGN1cnJlbnQgcG93ZXIgc3RhdGlvbjxici8+XCIpO1wic3RlYW1fdHVyYmluZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBzdGVhbSB0dXJiaW5lPGJyLz5cIik7XCJoZWF0X3B1bXBcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogaGVhdCBwdW1wPGJyLz5cIik7XCJzb2xhcl90aGVybWFsX2NvbGxlY3RvclwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBzb2xhciB0aGVybWFsIGNvbGxlY3Rvcjxici8+XCIpO1wic29sYXJfcGhvdG92b2x0YWljX3BhbmVsXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IHNvbGFyIHBob3Rvdm9sdGFpYyBwYW5lbDxici8+XCIpO1wic3RlYW1fZ2VuZXJhdG9yXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVxuICAgICAgICBcImdlbmVyYXRvciB0eXBlOiBzdGVhbSBnZW5lcmF0b3I8YnIvPlwiKTtcImdhc190dXJiaW5lXCI9PWJbXCJnZW5lcmF0b3I6dHlwZVwiXSYmKGErPVwiZ2VuZXJhdG9yIHR5cGU6IGdhcyB0dXJiaW5lPGJyLz5cIik7XCJjb21iaW5lZF9jeWNsZVwiPT1iW1wiZ2VuZXJhdG9yOnR5cGVcIl0mJihhKz1cImdlbmVyYXRvciB0eXBlOiBjb21iaW5lZCBjeWNsZTxici8+XCIpO1wicmVjaXByb2NhdGluZ19lbmdpbmVcIj09YltcImdlbmVyYXRvcjp0eXBlXCJdJiYoYSs9XCJnZW5lcmF0b3IgdHlwZTogcmVjaXByb2NhdGluZyBlbmdpbmU8YnIvPlwiKTtyZXR1cm4gYX1cbmV4cG9ydCBmdW5jdGlvbiBmbldlcnRzdG9mZmluZm8oYil7dmFyIGE9XCJcIjtpZihcImNvbnRhaW5lclwiPT1iLnJlY3ljbGluZ190eXBlfHxcImNlbnRyZVwiPT1iLnJlY3ljbGluZ190eXBlfHxcInJlY3ljbGluZ1wiPT1iLmFtZW5pdHkpXCJ5ZXNcIj09YltcInJlY3ljbGluZzpnbGFzc1wiXSYmKGErPVwiZ2xhc3MgY29udGFpbmVyPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpzaG9lc1wiXSYmKGErPVwic2hvZSBjb250YWluZXI8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmNvb2tpbmdfb2lsXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgY29va2luZyBvaWw8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnBhcGVyXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgcGFwZXI8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOmVuZ2luZV9vaWxcIl0mJihhKz1cInJlY3ljbGluZyBvZiBlbmdpbmUgb2lsPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjbG90aGVzXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgY2xvdGhlczwvYnI+XCIpLFxuXCJ5ZXNcIj09YltcInJlY3ljbGluZzpjYXJfYmF0dGVyaWVzXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgY2FyIGJhdHRlcmllczwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6Y2Fuc1wiXSYmKGErPVwicmVjeWNsaW5nIG9mIGNhbnM8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnNjcmFwX21ldGFsXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2Ygc2NyYXAgbWV0YWw8L2JyPlwiKSxcInllc1wiPT1iW1wicmVjeWNsaW5nOnBsYXN0aWNcIl0mJihhKz1cInJlY3ljbGluZyBvZiBwbGFzdGljPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpiYXR0ZXJyaWVzXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgYmF0dGVycmllczwvYnI+XCIpLFwieWVzXCI9PWJbXCJyZWN5Y2xpbmc6cGxhc3RpY19ib3R0bGVzXCJdJiYoYSs9XCJyZWN5Y2xpbmcgb2YgcGxhc3RpYyBib3R0bGVzPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpncmVlbl93YXN0ZVwiXSYmKGErPVwicmVjeWNsaW5nIG9mIGdyZWVuIHdhc3RlPC9icj5cIiksXCJ5ZXNcIj09YltcInJlY3ljbGluZzpoYXJkY29yZVwiXSYmXG4oYSs9XCJyZWN5Y2xpbmcgb2YgaGFyZGNvcmU8L2JyPlwiKTtyZXR1cm4gYX1cbnZhciBmbkNvbnRlbnRHZW5lcmFsSW5mb3JtYXRpb25zPWZ1bmN0aW9uKGIpe3ZhciBhPVwiXCI7Yi53aWR0aCYmKGErPVwid2lkdGg6IFwiK2Iud2lkdGgrXCIgbTxici8+XCIpO2IuaGVpZ2h0JiYoYSs9XCJoZWlnaHQ6IFwiK2IuaGVpZ2h0K1wiIG08YnIvPlwiKTtiLm1heHdpZHRoJiYoYSs9XCJtYXh3aWR0aDogXCIrYi5tYXh3aWR0aCtcIiBtPGJyLz5cIik7Yi5tYXhoZWlnaHQmJihhKz1cIm1heGhlaWdodDogXCIrYi5tYXhoZWlnaHQrXCIgbTxici8+XCIpO2IubWF4d2VpZ2h0JiYoYSs9XCJtYXh3ZWlnaHQ6IFwiK2IubWF4d2VpZ2h0K1wiIHQ8YnIvPlwiKTtiLm1heHNwZWVkJiYoYSs9XCJtYXhzcGVlZDogXCIrYi5tYXhzcGVlZCtcIiBrbS9oPGJyLz5cIik7Yi5taW5fYWdlJiYoYSs9XCJtaW5pbXVtIGFnZTogXCIrYi5taW5fYWdlK1wiPGJyLz5cIik7Yi5tYXhfYWdlJiYoYSs9XCJtYXhpbXVtIGFnZTogXCIrYi5tYXhfYWdlK1wiPGJyLz5cIik7XCJ5ZXNcIj09Yi5udWRpc20mJihhKz1cIm51ZGlzbTxici8+XCIpO1wieWVzXCI9PWIucnVpbnMmJlxuKGErPVwicnVpbnM8YnIvPlwiKTtiLmVsZSYmKGErPVwiaGVpZ2h0IGFib3ZlIHNlYSBsZXZlbDogXCIrYi5lbGUrXCIgbTxici8+XCIpO2JbXCJ4bWFzOmRheV9kYXRlXCJdJiYoYSs9XCJwZXJpb2QgZnJvbSAtIHRpbGw6IFwiK2JbXCJ4bWFzOmRheV9kYXRlXCJdK1wiPGJyLz5cIik7YltcInJvdG9yOmRpYW1ldGVyXCJdJiYoYSs9XCJkaWFtZXRlciBvZiByb3RvcjogXCIrYltcInJvdG9yOmRpYW1ldGVyXCJdK1wiIG08YnIvPlwiKTtiW1wieG1hczpub3RlXCJdJiYoYSs9XCJpbmZvcm1hdGlvbjogXCIrYltcInhtYXM6bm90ZVwiXStcIjxici8+XCIpO1wicG9ydFwiPT1iW1wic2VhbWFyazpiZWFjb25fbGF0ZXJhbDpjYXRlZ29yeVwiXSYmKGErPVwicG9ydDxici8+XCIpO1wic3RhcmJvYXJkXCI9PWJbXCJzZWFtYXJrOmJlYWNvbl9sYXRlcmFsOmNhdGVnb3J5XCJdJiYoYSs9XCJzdGFyYm9hcmQ8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOnJldGFpbFwiXSYmKGErPVwicmV0YWlsIGJpY3ljbGVzPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpyZXBhaXJcIl0mJlxuKGErPVwicmVwYWlyIGJpY3ljbGVzPGJyLz5cIik7XCJ5ZXNcIj09YltcInNlcnZpY2U6YmljeWNsZTpyZW50YWxcIl0mJihhKz1cInJlbnRhbCBiaWN5Y2xlczxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6cHVtcFwiXSYmKGErPVwidXNlIG9mIGEgcHVtcCBpcyBwb3NzaWJsZTxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6ZGl5XCJdJiYoYSs9XCJkaXkgaXMgcG9zc2libGU8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOmNsZWFuaW5nXCJdJiYoYSs9XCJjbGVhbmluZyBiaWN5Y2xlczxici8+XCIpO1wieWVzXCI9PWJbXCJzZXJ2aWNlOmJpY3ljbGU6c2Vjb25kX2hhbmRcIl0mJihhKz1cInNhbGUgb2Ygc2Vjb25kIGhhbmQgYmljeWNsZXM8YnIvPlwiKTtcInllc1wiPT1iW1wic2VydmljZTpiaWN5Y2xlOmNoYXJnaW5nXCJdJiYoYSs9XCJjaGFyZ2luZyBlbGVjdHJpYyBiaWtlcyBpcyBwb3NzaWJsZTxici8+XCIpO1wieWVzXCI9PWIuY2FmZSYmKGErPVwiY2FmZTxici8+XCIpO1wieWVzXCI9PWIuYnJlYWtmYXN0JiZcbihhKz1cImJyZWFrZmFzdDxici8+XCIpO1wieWVzXCI9PWIuc25hY2smJihhKz1cInNuYWNrPGJyLz5cIik7XCJ5ZXNcIj09Yi5pbmRvb3Jfc2VhdGluZyYmKGErPVwiaW5kb29yIHNlYXRpbmc8YnIvPlwiKTtcInllc1wiPT1iLm91dGRvb3Jfc2VhdGluZyYmKGErPVwib3V0ZG9vciBzZWF0aW5nPGJyLz5cIik7XCJ5ZXNcIj09Yi5zZWxmX3NlcnZpY2UmJihhKz1cInNlbGYgc2VydmljZTxici8+XCIpO1wieWVzXCI9PWIuYmFrZWhvdXNlJiYoYSs9XCJiYWtlaG91c2U8YnIvPlwiKTtcInllc1wiPT1iLnBhc3RyeV9zaG9wJiYoYSs9XCJwYXN0cnkgc2hvcDxici8+XCIpO1wieWVzXCI9PWIuZmFpcl90cmFkZSYmKGErPVwiZmFpciB0cmFkZTxici8+XCIpO1wib25seVwiPT1iLmZhaXJfdHJhZGUmJihhKz1cIm9ubHkgZmFpciB0cmFkZTxici8+XCIpO1wibm9cIj09Yi5mYWlyX3RyYWRlJiYoYSs9XCJubyBmYWlyIHRyYWRlPGJyLz5cIik7cmV0dXJuIGF9LGZuQ29udGVudEhlYWx0aGNhcmU9ZnVuY3Rpb24oYil7dmFyIGE9XCJcIjtpZihcImRvY3RvcnNcIj09XG4gICAgYi5hbWVuaXR5fHxcInBoeXNpY2lhblwiPT1iLm9mZmljZXx8XCJkb2N0b3JcIj09Yi5oZWFsdGhjYXJlKWErPWZuQXJ6dEluZm8oYiksYi5tZWRpY2FsX2FyZWEmJihhKz1iLm1lZGljYWxfYXJlYStcIjxici8+XCIpLGIudHlwZSYmKGErPWIudHlwZStcIjxici8+XCIpLGJbXCJkb2N0b3JzOmRlXCJdJiYoYSs9YltcImRvY3RvcnM6ZGVcIl0rXCI8YnIvPlwiKSxiW1wibm90ZTpkZVwiXSYmKGErPWJbXCJub3RlOmRlXCJdK1wiPGJyLz5cIik7XCJ5ZXNcIj09Yi5kaXNwZW5zaW5nJiYoYSs9XCJwaGFybWFjeSB3aXRoIGRpc3BlbnNpbmc8YnIvPlwiKTtcImFidXNlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogYWJ1c2VkIHBlb3BsZTxici8+XCIpO1wiY2hpbGRcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cInNvY2lhbCBmYWNpbGl0eSBmb3I6IGNoaWxkcmVuPGJyLz5cIik7XCJkaXNhYmxlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogZGlzYWJsZWQgcGVvcGxlPGJyLz5cIik7XG4gICAgXCJkaXNlYXNlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogZGlzZWFzZWQgcGVvcGxlPGJyLz5cIik7XCJkcnVnX2FkZGljdGVkXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBkcnVnIGFkZGljdGVkIHBlb3BsZTxici8+XCIpO1wiaG9tZWxlc3NcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cInNvY2lhbCBmYWNpbGl0eSBmb3I6IGhvbWVsZXNzPGJyLz5cIik7XCJqdXZlbmlsZVwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjoganV2ZW5pbGUgYW5kIHRlZW5hZ2VyPGJyLz5cIik7XCJtZW50YWxfaGVhbHRoXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBwZW9wbGUgd2l0aCBtZW50YWwgaGVhbHRoIHByb2JsZW1zPGJyLz5cIik7XCJtaWdyYW50XCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiZcbiAgICAoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBtaWdyYW50czxici8+XCIpO1wib3JwaGFuXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiBvcnBoYW5zPGJyLz5cIik7XCJzZW5pb3JcIj09YltcInNvY2lhbF9mYWNpbGl0eTpmb3JcIl0mJihhKz1cInNvY2lhbCBmYWNpbGl0eSBmb3I6IHNlbmlvcnM8YnIvPlwiKTtcInVuZGVycHJpdmlsZWdlZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogdW5kZXJwcml2aWxlZ2VkIHBlb3BsZTxici8+XCIpO1widW5lbXBsb3llZFwiPT1iW1wic29jaWFsX2ZhY2lsaXR5OmZvclwiXSYmKGErPVwic29jaWFsIGZhY2lsaXR5IGZvcjogdW5lbXBsb3llZDxici8+XCIpO1widmljdGltXCI9PWJbXCJzb2NpYWxfZmFjaWxpdHk6Zm9yXCJdJiYoYSs9XCJzb2NpYWwgZmFjaWxpdHkgZm9yOiB2aWN0aW1zPGJyLz5cIik7cmV0dXJuIGF9O1xuZXhwb3J0IGZ1bmN0aW9uIGZuQWRkaXRpb25hbEJ1aWxkaW5nSW5mb3MoYil7dmFyIGE9XCJcIjtiW1wiYnVpbGRpbmc6Y29sb3JcIl0mJihhKz1cImJ1aWxkaW5nIGNvbG9yOiBcIitiW1wiYnVpbGRpbmc6Y29sb3JcIl0rXCI8L2JyPlwiKTtiW1wiYnVpbGRpbmc6aGVpZ2h0XCJdJiYoYSs9XCJidWlsZGluZyBoZWlnaHQ6IFwiK2JbXCJidWlsZGluZzpoZWlnaHRcIl0rXCIgbTwvYnI+XCIpO2JbXCJidWlsZGluZzpsZXZlbFwiXSYmKGErPVwibGV2ZWw6IFwiK2JbXCJidWlsZGluZzpsZXZlbFwiXStcIjwvYnI+XCIpO2JbXCJidWlsZGluZzpwYXJ0XCJdJiYoYSs9XCJidWlsZGluZyBwYXJ0OiBcIitiW1wiYnVpbGRpbmc6cGFydFwiXStcIjwvYnI+XCIpO2JbXCJyb29mOmNvbG9yXCJdJiYoYSs9XCJyb29mIGNvbG9yOiBcIitiW1wicm9vZjpjb2xvdXJcIl0rXCI8L2JyPlwiKTtiW1wicm9vZjpzaGFwZVwiXSYmKGErPVwicm9vZiBzaGFwZTogXCIrYltcInJvb2Y6c2hhcGVcIl0rXCI8L2JyPlwiKTtiW1wicm9vZjpoZWlnaHRcIl0mJihhKz1cInJvb2YgaGVpZ2h0OiBcIitiW1wicm9vZjpoZWlnaHRcIl0rXG4gICAgXCIgbTwvYnI+XCIpO2JbXCJyb29mOm1hdGVyaWFsXCJdJiYoYSs9XCJyb29mIG1hdGVyaWFsOiBcIitiW1wicm9vZjptYXRlcmlhbFwiXStcIiA8L2JyPlwiKTtiW1wicm9vZjpvcmllbnRhdGlvblwiXSYmKGErPVwicm9vZiBvcmllbnRhdGlvbjogXCIrYltcInJvb2Y6b3JpZW50YXRpb25cIl0rXCIgPC9icj5cIik7YltcInJvb2Y6ZGlyZWN0aW9uXCJdJiYoYSs9XCJyb29mIGRpcmVjdGlvbjogXCIrYltcInJvb2Y6ZGlyZWN0aW9uXCJdK1wiIDwvYnI+XCIpO2JbXCJidWlsZGluZzp0eXBlXCJdJiYoYSs9XCJidWlsZGluZyB0eXBlOiBcIitiW1wiYnVpbGRpbmc6dHlwZVwiXStcIjwvYnI+XCIpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuU2ljaGVyaGVpdEFkZGl0aW9uYWwoYil7dmFyIGE9XCJcIjtcInN1cnZlaWxsYW5jZVwiPT1iLm1hbl9tYWRlJiYoXCJpbmRvb3JcIj09Yi5zdXJ2ZWlsbGFuY2UmJihhKz1cImluZG9vciBzdXJ2ZWlsbGFuY2VcIiksXCJvdXRkb29yXCI9PWIuc3VydmVpbGxhbmNlJiYoYSs9XCJvdXRkb29yIHN1cnZlaWxsYW5jZVwiKSxcInB1YmxpY1wiPT1iLnN1cnZlaWxsYW5jZSYmKGErPVwicHVibGljIHN1cnZlaWxsYW5jZVwiKSxcImNhbWVyYVwiPT1iW1wic3VydmVpbGxhbmNlOnR5cGVcIl0mJihhKz1cInR5cGUgb2Ygc3VydmVpbGxhbmNlOiBjYW1lcmFcIiksXCJndWFyZFwiPT1iW1wic3VydmVpbGxhbmNlOnR5cGVcIl0mJihhKz1cInR5cGUgb2Ygc3VydmVpbGxhbmNlOiBndWFyZFwiKSxcIkFMUFJcIj09YltcInN1cnZlaWxsYW5jZTp0eXBlXCJdJiYoYSs9XCJ0eXBlIG9mIHN1cnZlaWxsYW5jZTogQUxQUlwiKSxcInRvd25cIj09YltcInN1cnZlaWxsYW5jZTp6b25lXCJdJiYoYSs9XCJ6b25lIG9mIHN1cnZlaWxsYW5jZTogdG93blwiKSxcblwicGFya2luZ1wiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cInpvbmUgb2Ygc3VydmVpbGxhbmNlOiBwYXJraW5nXCIpLFwidHJhZmZpY1wiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cInpvbmUgb2Ygc3VydmVpbGxhbmNlOiB0cmFmZmljXCIpLFwic2hvcFwiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cInpvbmUgb2Ygc3VydmVpbGxhbmNlOiBzaG9wXCIpLFwiYmFua1wiPT1iW1wic3VydmVpbGxhbmNlOnpvbmVcIl0mJihhKz1cInpvbmUgb2Ygc3VydmVpbGxhbmNlOiBiYW5rXCIpLFwiYnVpbGRpbmdcIj09YltcInN1cnZlaWxsYW5jZTp6b25lXCJdJiYoYSs9XCJ6b25lIG9mIHN1cnZlaWxsYW5jZTogYnVpbGRpbmdcIikpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuV3JlY2tJbmZvKGIpe3ZhciBhPVwiXCI7XCJ3cmVja1wiPT1iLmhpc3RvcmljJiYoYltcIndyZWNrOmRhdGVfc3Vua1wiXSYmKGErPVwic3VuazogXCIrYltcIndyZWNrOmRhdGVfc3Vua1wiXStcIjxici8+XCIpLGJbXCJ3cmVjazpkZXB0aFwiXSYmKGErPVwiZGVwdGg6IFwiK2JbXCJ3cmVjazpkZXB0aFwiXStcIjxici8+XCIpLGJbXCJ3cmVjazpjbGVhcmFuY2VcIl0mJihhKz1cImNsZWFyYW5jZTogXCIrYltcIndyZWNrOmNsZWFyYW5jZVwiXStcIjxici8+XCIpLGJbXCJ3cmVjazpkYXRlX2NvbW1pc3Npb25lZFwiXSYmKGErPVwiY29tbWlzc2lvbmVkOiBcIitiW1wid3JlY2s6ZGF0ZV9jb21taXNzaW9uZWRcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6Z3Jvc3NfdG9ubmFnZVwiXSYmKGErPVwiZ3Jvc3MgdG9ubmFnZTogXCIrYltcIndyZWNrOmdyb3NzX3Rvbm5hZ2VcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6bGVuZ3RoXCJdJiYoYSs9XCJsZW5ndGg6IFwiK2JbXCJ3cmVjazpsZW5ndGhcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6d2lkdGhcIl0mJihhKz1cbiAgICBcIndpZHRoOiBcIitiW1wid3JlY2s6d2lkdGhcIl0rXCI8YnIvPlwiKSxiW1wid3JlY2s6Y2FyZ29cIl0mJihhPVwidGltYmVyXCI9PWJbXCJ3cmVjazpjYXJnb1wiXT9hK1wiY2FyZ286IHRpbWJlcjxici8+XCI6XCJjb2FsXCI9PWJbXCJ3cmVjazpjYXJnb1wiXT9hK1wiY2FyZ286IGNvYWw8YnIvPlwiOmErKFwiY2FyZ286IFwiK2JbXCJ3cmVjazpjYXJnb1wiXStcIjxici8+XCIpKSxcInllc1wiPT1iW1wid3JlY2s6dmlzaWJsZV9hdF9sb3dfdGlkZVwiXSYmKGErPVwidmlzaWJsZSBhdCBsb3cgdGlkZTogeWVzPGJyLz5cIiksXCJub1wiPT1iW1wid3JlY2s6dmlzaWJsZV9hdF9sb3dfdGlkZVwiXSYmKGErPVwidmlzaWJsZSBhdCBsb3cgdGlkZTogbm88YnIvPlwiKSxcInllc1wiPT1iW1wid3JlY2s6dmlzaWJsZV9hdF9oaWdoX3RpZGVcIl0mJihhKz1cInZpc2libGUgYXQgaGlnaCB0aWRlOiB5ZXM8YnIvPlwiKSxcIm5vXCI9PWJbXCJ3cmVjazp2aXNpYmxlX2F0X2hpZ2hfdGlkZVwiXSYmKGErPVwidmlzaWJsZSBhdCBoaWdoIHRpZGU6IG5vPGJyLz5cIiksXCJ5ZXNcIj09XG5iLmFjY2VzcyYmKGErPVwiYWNjZXNzaWJsZTxici8+XCIpLFwibm9cIj09Yi5hY2Nlc3MmJihhKz1cIm5vIGFjY2VzcyBwb3NzaWJsZTxici8+XCIpLFwicGVybWl0X3JlcXVpcmVkXCI9PWIuYWNjZXNzJiYoYSs9XCJwZXJtaXQgcmVxdWlyZWQgZm9yIGFjY2VzPGJyLz5cIikpO3JldHVybiBhfVxuZXhwb3J0IGZ1bmN0aW9uIGZuS2xvc3RlckFkZGl0aW9uYWwoYil7dmFyIGE9XCJcIjtpZihiW1wibW9uYXN0ZXJ5OnR5cGVcIl0pc3dpdGNoKGJbXCJtb25hc3Rlcnk6dHlwZVwiXSl7Y2FzZSBcIm1vbmFzdGVyeVwiOmErPVwidHlwZTogbW9uYXN0ZXJ5PGJyLz5cIjticmVhaztjYXNlIFwiY29udmVudFwiOmErPVwidHlwZTogY29udmVudDxici8+XCI7YnJlYWs7Y2FzZSBcImNhbm9ucnlcIjphKz1cInR5cGU6IGNhbm9ucnk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjb21tYW5kcnlcIjphKz1cInR5cGU6IGNvbW1hbmRyeTxici8+XCI7YnJlYWs7Y2FzZSBcImhlcm1pdGFnZVwiOmErPVwidHlwZTogaGVybWl0YWdlPGJyLz5cIjticmVhaztkZWZhdWx0OmErPVwidHlwZTogdW5rbm93bjxici8+XCJ9YltcImNvbW11bml0eTpnZW5kZXJcIl0mJihcIm1hbGVcIj09YltcImNvbW11bml0eTpnZW5kZXJcIl0mJihhKz1cImdlbmRlcjogbWFsZTxici8+XCIpLFwiZmVtYWxlXCI9PWJbXCJjb21tdW5pdHk6Z2VuZGVyXCJdJiYoYSs9XCJnZW5kZXI6IGZlbWFsZTxici8+XCIpKTtcbiAgICBiLnJlbGlnaW91c19yYW5rJiYoXCJhYmJleVwiPT1iLnJlbGlnaW91c19yYW5rP2ErPVwicmVsaWdpb3VzIHJhbms6IGFiYmV5PGJyLz5cIjpcImFiYmV5XCI9PWIucmVsaWdpb3VzX3JhbmsmJihhKz1cInJlbGlnaW91cyByYW5rOiBhYmJleTxici8+XCIpKTtcInllc1wiPT1iLnNocmluZSYmKGErPVwiZmVhdHVyZTogc2hyaW5lPGJyLz5cIik7XCJ5ZXNcIj09Yi5zYW5jdHVhcnkmJihhKz1cImZlYXR1cmU6IHNhbmN0dWFyeTxici8+XCIpO2lmKGIucmVsaWdpb24pc3dpdGNoKGIucmVsaWdpb24pe2Nhc2UgXCJhbmltaXN0XCI6YSs9XCJyZWxpZ2lvbjogYW5pbWlzdDxici8+PGJyLz5cIjticmVhaztjYXNlIFwiYmFoYWlcIjphKz1cInJlbGlnaW9uOiBiYWhhaTxici8+XCI7YnJlYWs7Y2FzZSBcImJ1ZGRoaXN0XCI6YSs9XCJyZWxpZ2lvbjogYnVkZGhpc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjaHJpc3RpYW5cIjphKz1cInJlbGlnaW9uOiBjaHJpc3RpYW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJoaW5kdVwiOmErPVwicmVsaWdpb246IGhpbmR1PGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcIklnbGVzaWFOaUNyaXN0b1wiOmErPVwicmVsaWdpb246IElnbGVzaWFOaUNyaXN0bzxici8+XCI7YnJlYWs7Y2FzZSBcImphaW5cIjphKz1cInJlbGlnaW9uOiBqYWluPGJyLz5cIjticmVhaztjYXNlIFwiamV3aXNoXCI6YSs9XCJyZWxpZ2lvbjogamV3aXNoPGJyLz5cIjticmVhaztjYXNlIFwibXVsdGlmYWl0aFwiOmErPVwicmVsaWdpb246IG11bHRpZmFpdGg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtdXNsaW1cIjphKz1cInJlbGlnaW9uOiBtdXNsaW08YnIvPlwiO3R5cGUrPVwiTW9zcXVlPGJyLz5cIjticmVhaztjYXNlIFwicGFnYW5cIjphKz1cInJlbGlnaW9uOiBwYWdhbjxici8+XCI7YnJlYWs7Y2FzZSBcInBhc3RhZmFyaWFuXCI6YSs9XCJyZWxpZ2lvbjogcGFzdGFmYXJpYW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJzY2llbnRvbG9naXN0XCI6YSs9XCJyZWxpZ2lvbjogc2NpZW50b2xvZ2lzdDxici8+XCI7YnJlYWs7Y2FzZSBcInNoaW50b1wiOmErPVwicmVsaWdpb246IHNoaW50bzxici8+XCI7YnJlYWs7Y2FzZSBcInNpa2hcIjphKz1cbiAgICAgICAgXCJyZWxpZ2lvbjogc2lraDxici8+XCI7YnJlYWs7Y2FzZSBcInNwaXJpdHVhbGlzdFwiOmErPVwicmVsaWdpb246IHNwaXJpdHVhbGlzdDxici8+XCI7YnJlYWs7Y2FzZSBcInRhb2lzdFwiOmErPVwicmVsaWdpb246IHRhb2lzdDxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRhcmlhblwiOmErPVwicmVsaWdpb246IHVuaXRhcmlhbjxici8+XCI7YnJlYWs7Y2FzZSBcInlhemlkaVwiOmErPVwicmVsaWdpb246IHlhemlkaTxici8+XCI7YnJlYWs7Y2FzZSBcInpvcm9hc3RyaWFuXCI6YSs9XCJlbGlnaW9uOiB6b3JvYXN0cmlhbjxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInJlbGlnaW9uOiB1bmtub3duPGJyLz5cIn1pZihiLmRlbm9taW5hdGlvbilzd2l0Y2goYi5kZW5vbWluYXRpb24pe2Nhc2UgXCJhbmdsaWNhblwiOmErPVwiZGVub21pbmF0aW9uOiBBbmdsaWNhbjxici8+PGJyLz5cIjticmVhaztjYXNlIFwiYmFwdGlzdFwiOmErPVwiZGVub21pbmF0aW9uOiBCYXB0aXN0PGJyLz5cIjticmVhaztjYXNlIFwiY2F0aG9saWNcIjphKz1cImRlbm9taW5hdGlvbjogQ2F0aG9saWM8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwicm9tYW5fY2F0aG9saWNcIjphKz1cImRlbm9taW5hdGlvbjogUm9tYW4gQ2F0aG9saWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvbGRfY2F0aG9saWNcIjphKz1cImRlbm9taW5hdGlvbjogT2xkIENhdGhvbGljPGJyLz5cIjticmVhaztjYXNlIFwiZ3JlZWtfY2F0aG9saWNcIjphKz1cImRlbm9taW5hdGlvbjogR3JlZWsgQ2F0aG9saWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJldmFuZ2VsaWNhbFwiOmErPVwiZGVub21pbmF0aW9uOiBFdmFuZ2VsaWNhbFwiO2Nhc2UgXCJqZWhvdmFoc193aXRuZXNzXCI6YSs9XCJkZW5vbWluYXRpb246IEplaG92YWhzIFdpdG5lc3M8YnIvPlwiO2JyZWFrO2Nhc2UgXCJsdXRoZXJhblwiOmErPVwiZGVub21pbmF0aW9uOiBMdXRoZXJhbjxici8+XCI7YnJlYWs7Y2FzZSBcIm1lbm5vbml0ZVwiOmErPVwiZGVub21pbmF0aW9uOiBNZW5ub25pdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtZXNzaWFuaWNfamV3aXNoXCI6YSs9XCJkZW5vbWluYXRpb246IE1lc3NpYW5pYyBKZXdpc2g8YnIvPlwiO1xuICAgICAgICBicmVhaztjYXNlIFwibWV0aG9kaXN0XCI6YSs9XCJkZW5vbWluYXRpb246IE1ldGhvZGlzdDxici8+XCI7YnJlYWs7Y2FzZSBcIm1vcm1vblwiOmErPVwiZGVub21pbmF0aW9uOiBNb3Jtb248YnIvPlwiO2JyZWFrO2Nhc2UgXCJuZXdfYXBvc3RvbGljXCI6YSs9XCJkZW5vbWluYXRpb246IE5ldyBBcG9zdG9saWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvcnRob2RveFwiOmErPVwiZGVub21pbmF0aW9uOiBPcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcImdyZWVrX29ydGhvZG94XCI6YSs9XCJkZW5vbWluYXRpb246IEdyZWVrIE9ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwiY29wdGljX29ydGhvZG94XCI6YSs9XCJkZW5vbWluYXRpb246IGNvcHRpYyBvcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcInBlbnRlY29zdGFsXCI6YSs9XCJkZW5vbWluYXRpb246IHBlbnRlY29zdGFsPGJyLz5cIjticmVhaztjYXNlIFwicHJlc2J5dGVyaWFuXCI6YSs9XCJkZW5vbWluYXRpb246IFByZXNieXRlcmlhbjxici8+XCI7YnJlYWs7Y2FzZSBcInByb3Rlc3RhbnRcIjphKz1cbiAgICAgICAgXCJkZW5vbWluYXRpb246IFByb3Rlc3RhbnQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJxdWFrZXJcIjphKz1cImRlbm9taW5hdGlvbjogUXVha2VyPGJyLz5cIjticmVhaztjYXNlIFwicmVmb3JtZWRcIjphKz1cImRlbm9taW5hdGlvbjogUmVmb3JtZWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJydXNzaWFuX29ydGhvZG94XCI6YSs9XCJkZW5vbWluYXRpb246IFJ1c3NpYW4tT3J0aG9kb3g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZXZlbnRoX2RheV9hZHZlbnRpc3RcIjphKz1cImRlbm9taW5hdGlvbjogU2V2ZW50aCBEYXkgQWR2ZW50aXN0PGJyLz5cIjticmVhaztjYXNlIFwiY2hyaXN0aWFuX2NvbW11bml0eVwiOmErPVwiZGVub21pbmF0aW9uOiBDaHJpc3RpYW4gQ29tbXVuaXR5PGJyLz5cIjticmVhaztjYXNlIFwiYWR2ZW50aXN0XCI6YSs9XCJkZW5vbWluYXRpb246IEFkdmVudGlzdDxici8+XCI7YnJlYWs7Y2FzZSBcImFsbGlhbmNlXCI6YSs9XCJkZW5vbWluYXRpb246IEFsbGlhbmNlPGJyLz5cIjticmVhaztjYXNlIFwiYXNzZW1ibGllc19vZl9nb2RcIjphKz1cbiAgICAgICAgXCJkZW5vbWluYXRpb246IEFzc2VtYmxpZXMgb2YgR29kPGJyLz5cIjticmVhaztjYXNlIFwiYXBvc3RvbGljXCI6YSs9XCJkZW5vbWluYXRpb246IEFwb3N0b2xpYzxici8+XCI7YnJlYWs7Y2FzZSBcImFybWVuaWFuX2Fwb3N0b2xpY1wiOmErPVwiZGVub21pbmF0aW9uOiBBcm1lbmlhbiBBcG9zdG9saWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhc3N5cmlhblwiOmErPVwiZGVub21pbmF0aW9uOiBBc3N5cmlhbjxici8+XCI7YnJlYWs7Y2FzZSBcImNocmlzdF9zY2llbnRpc3RcIjphKz1cImRlbm9taW5hdGlvbjogQ2hyaXN0IFNjaWVudGlzdDxici8+XCI7YnJlYWs7Y2FzZSBcImNodXJjaF9vZl9zY290bGFuZFwiOmErPVwiZGVub21pbmF0aW9uOiBDaHVyY2ggb2YgU2NvdGxhbmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJjemVjaG9zbG92YWtfaHVzc2l0ZVwiOmErPVwiZGVub21pbmF0aW9uOiBDemVjaG9zbG92YWsgSHVzc2l0ZTxici8+XCI7YnJlYWs7Y2FzZSBcImR1dGNoX3JlZm9ybWVkXCI6YSs9XCJkZW5vbWluYXRpb246IER1dGNoIFJlZm9ybWVkPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcImV4Y2x1c2l2ZV9icmV0aHJlblwiOmErPVwiZGVub21pbmF0aW9uOiBFeGNsdXNpdmUgQnJldGhyZW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJmb3Vyc3F1YXJlXCI6YSs9XCJkZW5vbWluYXRpb246IEZvdXJzcXVhcmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJraW1iYW5ndWlzdFwiOmErPVwiZGVub21pbmF0aW9uOiBLaW1iYW5ndWlzdDxici8+XCI7YnJlYWs7Y2FzZSBcImxpdmluZ193YXRlcnNfY2h1cmNoXCI6YSs9XCJkZW5vbWluYXRpb246IExpdmluZyBXYXRlcnMgQ2h1cmNoPGJyLz5cIjticmVhaztjYXNlIFwibWFyaWF2aXRlXCI6YSs9XCJkZW5vbWluYXRpb246IE1hcmlhdml0ZTxici8+XCI7YnJlYWs7Y2FzZSBcIm1hcm9uaXRlXCI6YSs9XCJkZW5vbWluYXRpb246IE1hcm9uaXRlPGJyLz5cIjticmVhaztjYXNlIFwibW9yYXZpYW5cIjphKz1cImRlbm9taW5hdGlvbjogTW9yYXZpYW48YnIvPlwiO2JyZWFrO2Nhc2UgXCJuYXphcmVuZVwiOmErPVwiZGVub21pbmF0aW9uOiBOYXphcmVuZTxici8+XCI7YnJlYWs7XG4gICAgICAgIGNhc2UgXCJub25kZW5vbWluYXRpb25hbFwiOmErPVwiZGVub21pbmF0aW9uOiBOb25kZW5vbWluYXRpb25hbDxici8+XCI7YnJlYWs7Y2FzZSBcIm9sZF9iZWxpZXZlcnNcIjphKz1cImRlbm9taW5hdGlvbjogT2xkIEJlbGlldmVyczxici8+XCI7YnJlYWs7Y2FzZSBcInBvbGlzaF9jYXRob2xpY1wiOmErPVwiZGVub21pbmF0aW9uOiBQb2xpc2gtQ2F0aG9saWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzYWx2YXRpb25fYXJteVwiOmErPVwiZGVub21pbmF0aW9uOiBTYWx2YXRpb24gQXJteTxici8+XCI7YnJlYWs7Y2FzZSBcInNhbnRvX2RhaW1lXCI6YSs9XCJkZW5vbWluYXRpb246IFNhbnRvIERhaW1lPGJyLz5cIjticmVhaztjYXNlIFwic2VyYmlhbl9vcnRob2RveFwiOmErPVwiZGVub21pbmF0aW9uOiBTZXJiaXNjaC1PcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcInNwaXJpdGlzbVwiOmErPVwiZGVub21pbmF0aW9uOiBTcGlyaXRpc208YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bml0ZWRcIjphKz1cImRlbm9taW5hdGlvbjogVW5pdGVkPGJyLz5cIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJ1bml0ZWRfY2h1cmNoX29mX2NocmlzdFwiOmErPVwiZGVub21pbmF0aW9uOiBVbml0ZWQgQ2h1cmNoIG9mIENocmlzdDxici8+XCI7YnJlYWs7Y2FzZSBcInVuaXRlZF9mcmVlX2NodXJjaF9vZl9zY290bGFuZFwiOmErPVwiZGVub21pbmF0aW9uOiBVbml0ZWQgRnJlZSBDaHVyY2ggb2YgU2NvdGxhbmQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bml0ZWRfbWV0aG9kaXN0XCI6YSs9XCJkZW5vbWluYXRpb246IFVuaXRlZCBNZXRob2Rpc3Q8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ1bml0ZWRfcmVmb3JtZWRcIjphKz1cImRlbm9taW5hdGlvbjogVW5pdGVkIFJlZm9ybWVkPGJyLz5cIjticmVhaztjYXNlIFwidW5pdGluZ1wiOmErPVwiZGVub21pbmF0aW9uOiBVbml0aW5nPGJyLz5cIjticmVhaztjYXNlIFwiY2h1cmNoX29mX3N3ZWRlblwiOmErPVwiZGVub21pbmF0aW9uOiBDaHVyY2ggb2YgU3dlZGVuPGJyLz5cIjticmVhaztjYXNlIFwibWlzc2lvbl9jb3ZlbmFudF9jaHVyY2hfb2Zfc3dlZGVuXCI6YSs9XCJkZW5vbWluYXRpb246IE1pc3Npb24gQ292ZW5hbnQgQ2h1cmNoIE9mIFN3ZWRlbjxici8+XCI7XG4gICAgICAgICAgICBicmVhaztjYXNlIFwiYWx0ZXJuYXRpdmVcIjphKz1cImRlbm9taW5hdGlvbjogYWx0ZXJuYXRpdmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJhc2hrZW5hemlcIjphKz1cImRlbm9taW5hdGlvbjogYXNoa2VuYXppPGJyLz5cIjticmVhaztjYXNlIFwiYnVjaGFyaVwiOmErPVwiZGVub21pbmF0aW9uOiBidWNoYXJpPGJyLz5cIjticmVhaztjYXNlIFwiY29uc2VydmF0aXZlXCI6YSs9XCJkZW5vbWluYXRpb246IGNvbnNlcnZhdGl2ZTxici8+XCI7YnJlYWs7Y2FzZSBcImVnYWxpdGFyaWFuXCI6YSs9XCJkZW5vbWluYXRpb246IGVnYWxpdGFyaWFuPGJyLz5cIjticmVhaztjYXNlIFwiaGFzaWRpY1wiOmErPVwiZGVub21pbmF0aW9uOiBoYXNpZGljPGJyLz5cIjticmVhaztjYXNlIFwiaHVtYW5pc3RpY1wiOmErPVwiZGVub21pbmF0aW9uOiBodW1hbmlzdGljPGJyLz5cIjticmVhaztjYXNlIFwia2FiYmFsYWhcIjphKz1cImRlbm9taW5hdGlvbjoga2FiYmFsYWg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJrYWJiYWxpc3RpY1wiOmErPVwiZGVub21pbmF0aW9uOiBrYWJiYWxpc3RpYzxici8+XCI7XG4gICAgICAgICAgICBicmVhaztjYXNlIFwia2FyYWl0ZVwiOmErPVwiZGVub21pbmF0aW9uOiBrYXJhaXRlPGJyLz5cIjticmVhaztjYXNlIFwibGliZXJhbFwiOmErPVwiZGVub21pbmF0aW9uOiBsaWJlcmFsPGJyLz5cIjticmVhaztjYXNlIFwibHViYXZpdGNoXCI6YSs9XCJkZW5vbWluYXRpb246IGx1YmF2aXRjaDxici8+XCI7YnJlYWs7Y2FzZSBcImx1YmF2aXRjaF9tZXNzaWFuaWNcIjphKz1cImRlbm9taW5hdGlvbjogbHViYXZpdGNoIG1lc3NpYW5pYzxici8+XCI7YnJlYWs7Y2FzZSBcIm1penJhY2hpX2JhZ2hkYWRpXCI6YSs9XCJkZW5vbWluYXRpb246IG1penJhY2hpIGJhZ2hkYWRpPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfY2hpZGFcIjphKz1cImRlbm9taW5hdGlvbjogbWl6cmFjaGkgY2hpZGE8YnIvPlwiO2JyZWFrO2Nhc2UgXCJtaXpyYWNoaV9qZXJ1c2FsZW1pdGVcIjphKz1cImRlbm9taW5hdGlvbjogbWl6cmFjaGkgamVydXNhbGVtaXRlPGJyLz5cIjticmVhaztjYXNlIFwibWl6cmFjaGlfbGl2b3Jub1wiOmErPVwiZGVub21pbmF0aW9uOiBtaXpyYWNoaSBsaXZvcm5vPGJyLz5cIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJtaXpyYWNoaV9tb3JvY2NhblwiOmErPVwiZGVub21pbmF0aW9uOiBtaXpyYWNoaSBtb3JvY2Nhbjxici8+XCI7YnJlYWs7Y2FzZSBcIm1vZGVybl9vcnRob2RveFwiOmErPVwiZGVub21pbmF0aW9uOiBtb2Rlcm4gb3J0aG9kb3g8YnIvPlwiO2JyZWFrO2Nhc2UgXCJuZW9fb3J0aG9kb3hcIjphKz1cImRlbm9taW5hdGlvbjogbmVvIG9ydGhvZG94PGJyLz5cIjticmVhaztjYXNlIFwibm9uZGVub21pbmF0aW9uYWxcIjphKz1cImRlbm9taW5hdGlvbjogbm9uZGVub21pbmF0aW9uYWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJvcnRob2RveFwiOmErPVwiZGVub21pbmF0aW9uOiBvcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcIm9ydGhvZG94X2FzaGtlbmF6XCI6YSs9XCJkZW5vbWluYXRpb246IG9ydGhvZG94IGFzaGtlbmF6PGJyLz5cIjticmVhaztjYXNlIFwib3J0aG9kb3hfc2VmYXJkXCI6YSs9XCJkZW5vbWluYXRpb246IG9ydGhvZG94IHNlZmFyZDxici8+XCI7YnJlYWs7Y2FzZSBcInByb2dyZXNzaXZlXCI6YSs9XG4gICAgICAgICAgICBcImRlbm9taW5hdGlvbjogcHJvZ3Jlc3NpdmU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJyZWNvbnN0cnVjdGlvbmlzdFwiOmErPVwiZGVub21pbmF0aW9uOiByZWNvbnN0cnVjdGlvbmlzdDxici8+XCI7YnJlYWs7Y2FzZSBcInJlZm9ybVwiOmErPVwiZGVub21pbmF0aW9uOiByZWZvcm08YnIvPlwiO2JyZWFrO2Nhc2UgXCJyZW5ld2FsXCI6YSs9XCJkZW5vbWluYXRpb246IHJlbmV3YWw8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzYW1hcml0YW5cIjphKz1cImRlbm9taW5hdGlvbjogc2FtYXJpdGFuPGJyLz5cIjticmVhaztjYXNlIFwic2VmYXJkaVwiOmErPVwiZGVub21pbmF0aW9uOiBzZWZhcmRpPGJyLz5cIjticmVhaztjYXNlIFwic2VmYXJkaV9hbXN0ZXJkYW1cIjphKz1cImRlbm9taW5hdGlvbjogc2VmYXJkaSBhbXN0ZXJkYW08YnIvPlwiO2JyZWFrO2Nhc2UgXCJzZWZhcmRpX2xvbmRvblwiOmErPVwiZGVub21pbmF0aW9uOiBzZWZhcmRpIGxvbmRvbjxici8+XCI7YnJlYWs7Y2FzZSBcInRyYWRpdGlvbmFsXCI6YSs9XCJkZW5vbWluYXRpb246IHRyYWRpdGlvbmFsPGJyLz5cIjtcbiAgICAgICAgICAgIGJyZWFrO2Nhc2UgXCJ1bHRyYV9vcnRob2RveFwiOmErPVwiZGVub21pbmF0aW9uOiB1bHRyYSBvcnRob2RveDxici8+XCI7YnJlYWs7Y2FzZSBcInVuYWZmaWxpYXRlZFwiOmErPVwiZGVub21pbmF0aW9uOiB1bmFmZmlsaWF0ZWQ8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ5ZW1lbml0ZVwiOmErPVwiZGVub21pbmF0aW9uOiB5ZW1lbml0ZTxici8+XCI7YnJlYWs7Y2FzZSBcInllbWVuaXRlX2JhbGFkaVwiOmErPVwiZGVub21pbmF0aW9uOiB5ZW1lbml0ZSBiYWxhZGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJ5ZW1lbml0ZV9zaGFtaVwiOmErPVwiZGVub21pbmF0aW9uOiB5ZW1lbml0ZSBzaGFtaTxici8+XCI7YnJlYWs7Y2FzZSBcImFobWFkaXlhXCI6YSs9XCJkZW5vbWluYXRpb246IGFobWFkaXlhPGJyLz5cIjticmVhaztjYXNlIFwiYWxhb3VpdGVcIjphKz1cImRlbm9taW5hdGlvbjogYWxhb3VpdGU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJkcnV6ZVwiOmErPVwiZGVub21pbmF0aW9uOiBkcnV6ZTxici8+XCI7YnJlYWs7Y2FzZSBcImliYWRpXCI6YSs9XG4gICAgICAgICAgICBcImRlbm9taW5hdGlvbjogaWJhZGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJpc21haWxpXCI6YSs9XCJkZW5vbWluYXRpb246IGlzbWFpbGk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzaGlhXCI6YSs9XCJkZW5vbWluYXRpb246IHNoaWE8YnIvPlwiO2JyZWFrO2Nhc2UgXCJzdW5uaVwiOmErPVwiZGVub21pbmF0aW9uOiBzdW5uaTxici8+XCI7YnJlYWs7Y2FzZSBcIm5pY2hpcmVuXCI6YSs9XCJkZW5vbWluYXRpb246IG5pY2hpcmVuPGJyLz5cIjticmVhaztjYXNlIFwiam9kb19zaGluc2h1XCI6YSs9XCJkZW5vbWluYXRpb246IGpvZG8gc2hpbnNodTxici8+XCI7YnJlYWs7Y2FzZSBcImpvZG9fc2h1XCI6YSs9XCJkZW5vbWluYXRpb246IGpvZG8gc2h1PGJyLz5cIjticmVhaztjYXNlIFwidmFqcmF5YW5hXCI6YSs9XCJkZW5vbWluYXRpb246IHZhanJheWFuYTxici8+XCI7YnJlYWs7Y2FzZSBcInNoaW5nb25fc2h1XCI6YSs9XCJkZW5vbWluYXRpb246IHNoaW5nb24gc2h1PGJyLz5cIjticmVhaztjYXNlIFwiemVuXCI6YSs9XCJkZW5vbWluYXRpb246IHplbjxici8+XCI7XG4gICAgICAgICAgICBicmVhaztjYXNlIFwidGhhaV9tYWhhbmlrYXlhXCI6YSs9XCJkZW5vbWluYXRpb246IHRoYWkgbWFoYW5pa2F5YTxici8+XCI7YnJlYWs7Y2FzZSBcInRoYWlfdGhhbW1heXV0XCI6YSs9XCJkZW5vbWluYXRpb246IHRoYWkgdGhhbW1heXV0PGJyLz5cIjticmVhaztjYXNlIFwiYXNhdHJ1XCI6YSs9XCJkZW5vbWluYXRpb246IGFzYXRydTxici8+XCI7YnJlYWs7Y2FzZSBcImNlbHRpY1wiOmErPVwiZGVub21pbmF0aW9uOiBjZWx0aWM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJncmVjb19yb21hblwiOmErPVwiZGVub21pbmF0aW9uOiBncmVjbyByb21hbjxici8+XCI7YnJlYWs7Y2FzZSBcIndpY2NhXCI6YSs9XCJkZW5vbWluYXRpb246IHdpY2NhPGJyLz5cIjticmVhaztjYXNlIFwiaXJhbmlcIjphKz1cImRlbm9taW5hdGlvbjogaXJhbmk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJwYXJzaVwiOmErPVwiZGVub21pbmF0aW9uOiBwYXJzaTxici8+XCI7YnJlYWs7ZGVmYXVsdDphKz1cInVua25vd248YnIvPlwifWlmKGIuY29tbXVuaXR5KXN3aXRjaChiLmNvbW11bml0eSl7Y2FzZSBcIkFBXCI6YSs9XG4gICAgICAgIFwiY29tbXVuaXR5IChBQSk6IEF1Z3VzdGluaWFucyBvZiB0aGUgQXNzdW1wdGlvbiA8YnIvPlwiO2JyZWFrO2Nhc2UgXCJCU0NNXCI6YSs9XCJjb21tdW5pdHkgKEJTQ00pOiBBZG9yZXJzIG9mIHRoZSBTYWNyZWQgSGVhcnQgb2YgSmVzdXMgb2YgTW9udG1hcnRyZSA8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDQk1WXCI6YSs9XCJjb21tdW5pdHkgKENCTVYpOiBBdWd1c3RpbmVyLUNob3JmcmF1ZW4gQi5NLlYuPGJyLz5cIjticmVhaztjYXNlIFwiQ09cIjphKz1cImNvbW11bml0eSAoQ08pOiBPcmF0b3JpYW5zPGJyLz5cIjticmVhaztjYXNlIFwiQ01DXCI6YSs9XCJjb21tdW5pdHkgKENNQyk6IENvbmdyZWdhdGlvbiBvZiB0aGUgTW90aGVyIENvLVJlZGVtcHRyaXg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDUlNQXCI6YSs9XCJjb21tdW5pdHkgKENSU1ApOiBLb25ncmVnYXRpb24gZGVyIFJlZ3VsYXJrbGVyaWtlciB2b20gaGwuIFBhdWx1cyAoQmFybmFiaXRlbik8YnIvPlwiO2JyZWFrO2Nhc2UgXCJDU0pcIjphKz1cImNvbW11bml0eSAoQ1NKKTogQ2FybWVsIFNhaW50LUpvc2VwaDxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJDU1NQXCI6YSs9XCJjb21tdW5pdHkgKENTU1ApOiBDb25nclxcdTAwZTlnYXRpb24gZHUgU2FpbnQtRXNwcml0PGJyLz5cIjticmVhaztjYXNlIFwiQ1NTUlwiOmErPVwiY29tbXVuaXR5IChDU1NSKTogQ29uZ3JcXHUwMGU5Z2F0aW9uIGR1IFRyXFx1MDBlOHMgU2FpbnQgUlxcdTAwZTlkZW1wdGV1cjxici8+XCI7YnJlYWs7Y2FzZSBcIkZDSk1cIjphKz1cImNvbW11bml0eSAoRkNKTSk6IEZyYW5jaXNjYW4gU2lzdGVycywgRGF1Z2h0ZXJzIG9mIHRoZSBTYWNyZWQgSGVhcnQgb2YgSmVzdXMgYW5kIE1hcnk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJGTUdCXCI6YSs9XCJjb21tdW5pdHkgKEZNR0IpOiBTdW9yZSBGcmFuY2VzY2FuZSBNaXNzaW9uYXJpZSBkaSBHZXNcXHUwMGY5IEJhbWJpbm88YnIvPlwiO2JyZWFrO2Nhc2UgXCJGTUhcIjphKz1cImNvbW11bml0eShGTUgpOiBDb25ncmVnYXRpbyBGaWxpYXJ1bSBNYXJpYWUgU2FuY3Rpc3NpbWFlIGFiIEhvcnRvPGJyLz5cIjticmVhaztjYXNlIFwiRk1NXCI6YSs9XG4gICAgICAgIFwiY29tbXVuaXR5IChGTU0pOiBGcmFuY2lzY2FpbmVzIG1pc3Npb25uYWlyZXMgZGUgTWFyaWU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJGU0NcIjphKz1cImNvbW11bml0eSAoRlNDKTogRnJcXHUwMGU4cmVzIGRlcyBcXHUwMGM5Y29sZXMgY2hyXFx1MDBlOXRpZW5uZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJNQ0NJXCI6YSs9XCJjb21tdW5pdHkgKE1DQ0kpOiBNaXNzaW9ubmFpcmVzIGNvbWJvbmllbnMgZHUgU2FjclxcdTAwZTktQ1xcdTAxNTN1cjxici8+XCI7YnJlYWs7Y2FzZSBcIk1TRlNcIjphKz1cImNvbW11bml0eSAoTVNGUyk6IE1pc3Npb25uYWlyZXMgZGUgU2FpbnQgRnJhblxcdTAwZTdvaXMgZGUgU2FsZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPQ2FydFwiOmErPVwiY29tbXVuaXR5IChPQ2FydCk6IE9yZGVyIG9mIHRoZSBDYXJ0aHVzaWFuczxici8+XCI7YnJlYWs7Y2FzZSBcIk9DQ1wiOmErPVwiY29tbXVuaXR5IChPQ0MpOiBPcmRyZSBkZSBOb3RyZSBEYW1lIGR1IE1vbnQtQ2FybWVsPGJyLz5cIjticmVhaztjYXNlIFwiT0NEXCI6YSs9XG4gICAgICAgIFwiY29tbXVuaXR5IChPQ0QpOiBPcmRyZSBkZXMgQ2FybWVzIGRcXHUwMGU5Y2hhdXg8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPQ1NPXCI6YSs9XCJjb21tdW5pdHkgKE9DU08pOiBUcmFwcGlzdHMgKGxhdC4gT3JkbyBDaXN0ZXJjaWVuc2lzIFN0cmljdGlvcmlzIE9ic2VydmFudGlhZSk8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPRk1cIjphKz1cImNvbW11bml0eSAoT0ZNKTogT3JkcmUgZGVzIEZyXFx1MDBlOHJlcyBNaW5ldXJzIChGcmFuemlza2FuZXIpPGJyLz5cIjticmVhaztjYXNlIFwiT0ZNQ2FwXCI6YSs9XCJjb21tdW5pdHkgKE9GTUNhcCk6IE9yZHJlIGRlcyBGclxcdTAwZThyZXMgTWluZXVycyBDYXB1Y2luczxici8+XCI7YnJlYWs7Y2FzZSBcIk9GTUNvbnZcIjphKz1cImNvbW11bml0eSAoT0ZNQ29udik6IE9yZHJlIGRlcyBGclxcdTAwZThyZXMgTWluZXVycyBDb252ZW50dWVsczxici8+XCI7YnJlYWs7Y2FzZSBcIk9GU1wiOmErPVwiY29tbXVuaXR5IChPRlMpOiBGcmFuY2lzY2FucyBzZWN1bGFyIFRoaXJkIE9yZGVyPGJyLz5cIjtcbiAgICAgICAgYnJlYWs7Y2FzZSBcIk9NSVwiOmErPVwiY29tbXVuaXR5IChPTUkpOiBPYmxhdHMgZGUgTWFyaWU8YnIvPlwiO2JyZWFrO2Nhc2UgXCJPUFwiOmErPVwiY29tbXVuaXR5IChPUCk6IE9yZHJlIGRlcyBGclxcdTAwZThyZXMgUHJcXHUwMGVhY2hldXJzPGJyLz5cIjticmVhaztjYXNlIFwiT1ByYWVtXCI6YSs9XCJjb21tdW5pdHkgKE9QcmFlbSk6IE9yZHJlIGRlcyBjaGFub2luZXMgclxcdTAwZTlndWxpZXJzIGRlIFByXFx1MDBlOW1vbnRyXFx1MDBlOTxici8+XCI7YnJlYWs7Y2FzZSBcIk9TQlwiOmErPVwiY29tbXVuaXR5IChPU0IpOiBPcmRlciBvZiBTYWludCBCZW5lZGljdDxici8+XCI7YnJlYWs7Y2FzZSBcIk9TQ1wiOmErPVwiY29tbXVuaXR5IChPU0MpOiBPcmRyZSBkZSBTYWludGUtQ2xhaXJlIG91IE9yZHJlIGRlcyBQYXV2cmVzIERhbWVzPGJyLz5cIjticmVhaztjYXNlIFwiT1NTU1wiOmErPVwiY29tbXVuaXR5IChPU1NTKTogT3JkcmUgZGUgU2FpbnRlLUJyaWdpdHRlPGJyLz5cIjticmVhaztjYXNlIFwiT1ZNXCI6YSs9XCJjb21tdW5pdHkgKE9WTSk6IE9yZGVyIG9mIHRoZSBWaXNpdGF0aW9uIG9mIEhvbHkgTWFyeSAoU2FsZXNpYW5lcmlubmVuKTxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJQU0RQXCI6YSs9XCJjb21tdW5pdHkgKFBTRFApOiBQZXRpdGVzIHNcXHUwMTUzdXJzIGRlcyBwYXV2cmVzIChLbGVpbmVuIFNjaHdlc3Rlcm4gZGVyIEFybWVuKTxici8+XCI7YnJlYWs7Y2FzZSBcIlBGSlwiOmErPVwiY29tbXVuaXR5IChQRkopOiBQZXRpdHMgRnJcXHUwMGU4cmVzIGRlIEpcXHUwMGU5c3VzPGJyLz5cIjticmVhaztjYXNlIFwiU0RCXCI6YSs9XCJjb21tdW5pdHkgKFNEQik6IFNvY2lcXHUwMGU5dFxcdTAwZTkgZGUgU2FpbnQgRnJhblxcdTAwZTdvaXMgZGUgU2FsZXM8YnIvPlwiO2JyZWFrO2Nhc2UgXCJTSlwiOmErPVwiY29tbXVuaXR5IChTSik6IENvbXBhZ25pZSBkZSBKXFx1MDBlOXN1czxici8+XCI7YnJlYWs7Y2FzZSBcIlNPQ1wiOmErPVwiY29tbXVuaXR5IChTT0MpOiBPcmRlciBvZiBDaXN0ZXJjaWFuczxici8+XCI7YnJlYWs7Y2FzZSBcIlNTQ0NcIjphKz1cImNvbW11bml0eSAoU1NDQyk6IENvbmdyZWdhdGlvbiBvZiB0aGUgU2FjcmVkIEhlYXJ0cyBvZiBKZXN1cyBhbmQgTWFyeTxici8+XCI7XG4gICAgICAgIGJyZWFrO2Nhc2UgXCJTU0ZcIjphKz1cImNvbW11bml0eSAoU1NGKTogU29jaWV0eSBvZiBTdCBGcmFuY2lzPGJyLz5cIjticmVhaztjYXNlIFwiU1NKRVwiOmErPVwiY29tbXVuaXR5IChTU0pFKTogU29jaWV0eSBvZiBTdCBKb2huIHRoZSBFdmFuZ2VsaXN0PGJyLz5cIjticmVhaztjYXNlIFwiU1NwU1wiOmErPVwiY29tbXVuaXR5IChTU3BTKTogU3RleWxlciBNaXNzaW9uc3NjaHdlc3Rlcm48YnIvPlwiO2JyZWFrO2Nhc2UgXCJUT1JcIjphKz1cImNvbW11bml0eSAoVE9SKTogVGVyem8gT3JkaW5lIFJlZ29sYXJlIGRpIFNhbiBGcmFuY2VzY288YnIvPlwiO2JyZWFrO2RlZmF1bHQ6YSs9XCJ1bmtub3duPGJyLz5cIn1yZXR1cm4gYX12YXIgZm5UZXN0SW5mb1BvcHVwPWZ1bmN0aW9uKGIpe2I9Yi5nZXRQcm9wZXJ0aWVzKCk7dmFyIGE9XCJcIixjO2ZvcihjIGluIGIpYT1hK2MrXCI9XCIrYltjXStcIjxici8+XCI7cmV0dXJuJzxkaXYgY2xhc3M9XCJjNGdfcG9wdXBfdGV4dFwiIHN0eWxlPVwid2lkdGg6MzAwcHg7XCI+JythK1wiPC9kaXY+XCJ9O1xuIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7QzRnQmFzZWxheWVyQ29udHJvbGxlcn0gZnJvbSBcIi4vYzRnLWJhc2VsYXllci1jb250cm9sbGVyXCI7XG5pbXBvcnQge0JldHRlckxheWVyQ29udHJvbGxlcn0gZnJvbSBcIi4vYzRnLWxheWVyLWNvbnRyb2xsZXJcIjtcbmltcG9ydCB7QzRnTG9jYXRpb25TdHlsZUNvbnRyb2xsZXJ9IGZyb20gXCIuL2M0Zy1sb2NhdGlvbnN0eWxlLWNvbnRyb2xsZXJcIjtcbmltcG9ydCB7QzRnUG9wdXBDb250cm9sbGVyfSBmcm9tIFwiLi9jNGctcG9wdXAtY29udHJvbGxlclwiO1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vYzRnLW1hcHMtdXRpbHNcIjtcbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtnZXRMYW5ndWFnZX0gZnJvbSBcIi4vYzRnLW1hcHMtaTE4blwiO1xuaW1wb3J0IHtWZWN0b3J9IGZyb20gXCJvbC9sYXllclwiO1xuaW1wb3J0IHtMaW5lU3RyaW5nLCBQb2ludH0gZnJvbSBcIm9sL2dlb21cIjtcbmltcG9ydCB7dG9Mb25MYXR9IGZyb20gXCJvbC9wcm9qXCI7XG5pbXBvcnQge0NpcmNsZSwgRmlsbCwgU3Ryb2tlLCBTdHlsZSwgVGV4dH0gZnJvbSBcIm9sL3N0eWxlXCI7XG5pbXBvcnQge0ZlYXR1cmV9IGZyb20gXCJvbFwiO1xuaW1wb3J0IHtDbHVzdGVyLCBWZWN0b3IgYXMgVmVjdG9yU291cmNlfSBmcm9tIFwib2wvc291cmNlXCI7XG5cbmxldCBsYW5nQ29uc3RhbnRzID0ge307XG5cbmV4cG9ydCBjbGFzcyBNYXBQcm94eSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpe1xuICAgIHZhciBtYXBEYXRhO1xuXG4gICAgdGhpcy5vcHRpb25zID0galF1ZXJ5LmV4dGVuZCh7XG4gICAgICBtYXBDb250cm9sbGVyOiBmYWxzZVxuICAgIH0sIG9wdGlvbnMpO1xuICAgIGlmICghdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBjNGcubWFwcy5lZGl0b3JTdHlsZXMgPSBjNGcubWFwcy5lZGl0b3JTdHlsZXMgfHwge307XG5cbiAgICAvL3dpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwID0gW107XG5cbiAgICB0aGlzLmhvb2tfYmFzZWxheWVyX2xvYWRlZCA9IFtdO1xuICAgIHRoaXMuaG9va19iYXNlbGF5ZXJfdmlzaWJpbGl0eSA9IFtdO1xuICAgIHRoaXMuaG9va19sYXllcl9sb2FkZWQgPSBbXTtcbiAgICB0aGlzLmhvb2tfbGF5ZXJfdmlzaWJpbGl0eSA9IFtdO1xuICAgIHRoaXMuaG9va19tYXBfY2xpY2sgPSBbXTtcbiAgICB0aGlzLmhvb2tfbWFwX3pvb20gPSBbXTtcbiAgICB0aGlzLmhvb2tfbG9jc3R5bGVzX2xvYWRlZCA9IFtdO1xuXG4gICAgLy8gYWRkIGdsb2JhbCBob29rIGZvciBhY2Nlc3NpYmlsaXR5IHdoZW4gdGhlcmUgaXMgbm8gcHJveHkgcmVmZXJlbmNlXG4gICAgd2luZG93LmM0Z01hcHNIb29rcyA9IHdpbmRvdy5jNGdNYXBzSG9va3MgfHwge307XG4gICAgd2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9sYXllcl9sb2FkZWQgPSB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2xheWVyX2xvYWRlZCB8fCBbXTtcbiAgICB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2xheWVyX2RyYXduID0gd2luZG93LmM0Z01hcHNIb29rcy5wcm94eV9sYXllcl9kcmF3biB8fCBbXTtcbiAgICB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2Jhc2VsYXllcl9sb2FkZWQgPSB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2Jhc2VsYXllcl9sb2FkZWQgfHwgW107XG5cbiAgICB0aGlzLmJhc2VsYXllcklkcyA9IFtdO1xuICAgIHRoaXMuYWN0aXZlQmFzZWxheWVySWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYXllcklkcyA9IFtdO1xuICAgIHRoaXMuYWN0aXZlTGF5ZXJJZHMgPSB7fTtcblxuICAgIHRoaXMucmVxdWVzdEZ1bmN0aW9ucyA9IHt9O1xuICAgIHRoaXMucmVxdWVzdCA9IHt9O1xuXG4gICAgdGhpcy5iYXNlbGF5ZXJzX2xvYWRlZCA9IGZhbHNlO1xuICAgIHRoaXMubGF5ZXJzX2xvYWRlZCA9IGZhbHNlO1xuXG4gICAgbWFwRGF0YSA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGE7XG4gICAgbGFuZ0NvbnN0YW50cyA9IGdldExhbmd1YWdlKG1hcERhdGEpO1xuICAgIHRoaXMubWFwRGF0YSA9IG1hcERhdGE7XG4gICAgdGhpcy5tYXBJZCA9IG1hcERhdGEuaWQ7XG4gICAgdGhpcy5hcGlfYmFzZWxheWVyX3VybCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmJhc2VsYXllciArICcvJyArIG1hcERhdGEucHJvZmlsZSArICcvJyArIHRoaXMubWFwRGF0YS5sYW5nO1xuICAgIHRoaXMuYXBpX2xheWVyX3VybCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmxheWVyICsgJy8nICsgdGhpcy5tYXBJZCArICcvJyArIHRoaXMubWFwRGF0YS5sYW5nO1xuICAgIHRoaXMuYXBpX2xheWVyY29udGVudF91cmwgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmFwaS5sYXllcmNvbnRlbnQ7XG4gICAgLy90aGlzLmFwaV9sYXllcmNvbnRlbnRkYXRhX3VybCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmxheWVyY29udGVudGRhdGE7XG4gICAgdGhpcy5hcGlfbGF5ZXJjb250ZW50ZGF0YV91cmwgPSBcImNvbjRnaXMvbGF5ZXJDb250ZW50RGF0YVNlcnZpY2VcIjtcbiAgICB0aGlzLmFwaV9sb2NzdHlsZV91cmwgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmFwaS5sb2NzdHlsZTtcbiAgICB0aGlzLmFwaV9pbmZvd2luZG93X3VybCA9IHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmluZm93aW5kb3c7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNsaWNrT2JzZXJ2ZXJBY3RpdmUgPSB0cnVlO1xuXG5cbiAgICAvLyB0aGlzLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIHNlbGYsXG4gICAgICBtYXA7XG5cbiAgICBzZWxmID0gdGhpcztcbiAgICBtYXAgPSB0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXA7XG5cbiAgICB0aGlzLmJhc2VsYXllckNvbnRyb2xsZXIgPSBuZXcgQzRnQmFzZWxheWVyQ29udHJvbGxlcih0aGlzKTtcbiAgICB0aGlzLmJhc2VsYXllckNvbnRyb2xsZXIubG9hZEJhc2VMYXllcnMoKTtcbiAgICB0aGlzLmxheWVyQ29udHJvbGxlciA9IG5ldyBCZXR0ZXJMYXllckNvbnRyb2xsZXIodGhpcyk7XG4gICAgdGhpcy5sYXllckNvbnRyb2xsZXIubG9hZExheWVycygpO1xuICAgIHRoaXMubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIgPSBuZXcgQzRnTG9jYXRpb25TdHlsZUNvbnRyb2xsZXIodGhpcyk7XG4gICAgdGhpcy5wb3B1cENvbnRyb2xsZXIgPSBuZXcgQzRnUG9wdXBDb250cm9sbGVyKHRoaXMpO1xuICAgIHRoaXMucG9wdXBDb250cm9sbGVyLmFkZFBvcFVwKCk7XG5cbiAgICAvL1RPRE8gY2hlY2sgdGhpcywgbmVhcmx5IHRoZSBzYW1lIGFzIGJlbG93XG4gICAgbWFwLm9uKCdjaGFuZ2U6dmlldycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHpvb20tb2JzZXJ2ZXJcbiAgICAgIC8vXG4gICAgICBtYXAuZ2V0VmlldygpLm9uKCdjaGFuZ2U6cmVzb2x1dGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxheWVySWQsXG4gICAgICAgICAgbGF5ZXI7XG5cbiAgICAgICAgLy8gY2hlY2sgbGF5ZXIgem9vbS1ib3VuZHNcbiAgICAgICAgLy8gQFRPRE86IFVzZSBcInNlbGYuYWN0aXZlTGF5ZXJJZHMgPSBmYWxzZVwiID9cbiAgICAgICAgZm9yIChsYXllcklkIGluIHNlbGYuYWN0aXZlTGF5ZXJJZHMpIHtcbiAgICAgICAgICBpZiAoc2VsZi5hY3RpdmVMYXllcklkcy5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICAgICAgbGF5ZXIgPSBzZWxmLmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbbGF5ZXJJZF07XG4gICAgICAgICAgICAvLyBpZiAoc2VsZi5jaGVja0xheWVySXNBY3RpdmVGb3Jab29tKGxheWVySWQpKSB7XG4gICAgICAgICAgICAvLyAgIGlmIChsYXllci5pc0luYWN0aXZlKSB7XG4gICAgICAgICAgICAvLyAgICAgc2VsZi5sYXllckNvbnRyb2xsZXIuc2hvd0xheWVyKGxheWVySWQpO1xuICAgICAgICAgICAgLy8gICB9XG4gICAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gICBzZWxmLmxheWVyQ29udHJvbGxlci5oaWRlTGF5ZXIobGF5ZXJJZCwgdHJ1ZSk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaG9va3NcbiAgICAgICAgdXRpbHMuY2FsbEhvb2tGdW5jdGlvbnMoc2VsZi5ob29rX21hcF96b29tLCBzZWxmKTtcblxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jYWNoaW5nICYmIG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpKSB7XG4gICAgICAgICAgICB1dGlscy5zdG9yZVZhbHVlKCd6b29tJywgbWFwLmdldFZpZXcoKS5nZXRab29tKCkpO1xuICAgICAgICB9XG5cblxuICAgICAgfSk7IC8vIGVuZCBvZiBcInpvb20tb2JzZXJ2ZXJcIlxuICAgIH0pOyAvLyBlbmQgb2YgXCJ6b29tLW9ic2VydmVyXCJcblxuICAgIC8vIHpvb20tb2JzZXJ2ZXJcbiAgICAvL1xuICAgIG1hcC5nZXRWaWV3KCkub24oJ2NoYW5nZTpyZXNvbHV0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGxheWVySWQsXG4gICAgICAgIGxheWVyO1xuXG4gICAgICAvLyBjaGVjayBsYXllciB6b29tLWJvdW5kc1xuICAgICAgLy8gQFRPRE86IFVzZSBcInNlbGYuYWN0aXZlTGF5ZXJJZHMgPSBmYWxzZVwiID9cbiAgICAgIGZvciAobGF5ZXJJZCBpbiBzZWxmLmFjdGl2ZUxheWVySWRzKSB7XG4gICAgICAgIGlmIChzZWxmLmFjdGl2ZUxheWVySWRzLmhhc093blByb3BlcnR5KGxheWVySWQpKSB7XG4gICAgICAgICAgbGF5ZXIgPSBzZWxmLmxheWVyQ29udHJvbGxlci5hcnJMYXllcnNbbGF5ZXJJZF07XG4gICAgICAgICAgLy8gaWYgKHNlbGYuY2hlY2tMYXllcklzQWN0aXZlRm9yWm9vbShsYXllcklkKSkge1xuICAgICAgICAgIC8vICAgaWYgKGxheWVyLmlzSW5hY3RpdmUpIHtcbiAgICAgICAgICAvLyAgICAgc2VsZi5sYXllckNvbnRyb2xsZXIuc2hvd0xheWVyKGxheWVySWQpO1xuICAgICAgICAgIC8vICAgfVxuICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgLy8gICBzZWxmLmxheWVyQ29udHJvbGxlci5oaWRlTGF5ZXIobGF5ZXJJZCwgdHJ1ZSk7XG4gICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGhvb2tzXG4gICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLmhvb2tfbWFwX3pvb20sIHNlbGYpO1xuXG4gICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jYWNoaW5nICYmIG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpKSB7XG4gICAgICAgICAgdXRpbHMuc3RvcmVWYWx1ZSgnem9vbScsIG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpKTtcbiAgICAgIH1cblxuICAgIH0pOyAvLyBlbmQgb2YgXCJ6b29tLW9ic2VydmVyXCJcblxuICAgIG1hcC5nZXRWaWV3KCkub24oJ2NoYW5nZTpjZW50ZXInLCBmdW5jdGlvbihldnQpe1xuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jYWNoaW5nKSB7XG4gICAgICAgICAgICB2YXIgY29vcmRpbmF0ZSA9IHRvTG9uTGF0KG1hcC5nZXRWaWV3KCkuZ2V0Q2VudGVyKCkpO1xuICAgICAgICAgICAgaWYgKGNvb3JkaW5hdGUpIHtcbiAgICAgICAgICAgICAgICB1dGlscy5zdG9yZVZhbHVlKCdsb24nLCBjb29yZGluYXRlWzBdKTtcbiAgICAgICAgICAgICAgICB1dGlscy5zdG9yZVZhbHVlKCdsYXQnLCBjb29yZGluYXRlWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cuYzRnTWFwc0hvb2tzLm1hcF9jZW50ZXJfY2hhbmdlZCA9IHdpbmRvdy5jNGdNYXBzSG9va3MubWFwX2NlbnRlcl9jaGFuZ2VkIHx8IFtdO1xuICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLm1hcF9jZW50ZXJfY2hhbmdlZCwgbWFwLmdldFZpZXcoKS5nZXRDZW50ZXIoKSk7XG4gICAgfSk7IC8vIGVuZCBvZiBcImNlbnRlci1vYnNlcnZlclwiXG5cbiAgICAvLyBjbGljay1vYnNlcnZlclxuICAgIC8vXG4gICAgbWFwLm9uKCdjbGljaycsIGZ1bmN0aW9uIChjbGlja0V2ZW50KSB7XG5cbiAgICAgIHZhciBmZWF0dXJlLFxuICAgICAgICBmRmVhdHVyZXMsXG4gICAgICAgIGxheWVyLFxuICAgICAgICBwb3B1cEluZm9zLFxuICAgICAgICBjdXJyZW50Wm9vbSxcbiAgICAgICAgbWluWm9vbSxcbiAgICAgICAgbmV3Q2VudGVyLFxuICAgICAgICBnZW9tZXRyeSxcbiAgICAgICAgY29vcmQsXG4gICAgICAgIHNldFBvcHVwLFxuICAgICAgICBzdHlsZUZ1bmMsXG4gICAgICAgIHN0eWxlQ2x1c3RlcixcbiAgICAgICAgb2JqUG9wdXA7XG5cbiAgICAgIGlmICghc2VsZi5jbGlja09ic2VydmVyQWN0aXZlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZmVhdHVyZSA9IG1hcC5mb3JFYWNoRmVhdHVyZUF0UGl4ZWwoY2xpY2tFdmVudC5waXhlbCxcbiAgICAgICAgZnVuY3Rpb24gKGZlYXR1cmUsIGxheWVyKSB7XG4gICAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGxheWVyID0gbWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChjbGlja0V2ZW50LnBpeGVsLFxuICAgICAgICBmdW5jdGlvbiAoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICByZXR1cm4gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGlmKGxheWVyICYmIGxheWVyLmdldFN0eWxlKCkpIHtcbiAgICAgICAgc3R5bGVGdW5jID0gbGF5ZXIuZ2V0U3R5bGUoKTtcbiAgICAgICAgaWYodHlwZW9mIHN0eWxlRnVuYyA9PT0gXCJmdW5jdGlvblwiICYmIHN0eWxlRnVuYyhmZWF0dXJlLCBjdXJyZW50Wm9vbSkgJiYgc3R5bGVGdW5jKGZlYXR1cmUsIGN1cnJlbnRab29tKVsnMCddKXtcbiAgICAgICAgICBzdHlsZUNsdXN0ZXIgPSBzdHlsZUZ1bmMoZmVhdHVyZSwgY3VycmVudFpvb20pWycwJ10uY2xvbmUoKTtcbiAgICAgICAgICBpZiAoc3R5bGVDbHVzdGVyICYmIHN0eWxlQ2x1c3Rlci5nZXRJbWFnZSgpKSB7XG4gICAgICAgICAgICAgIHN0eWxlQ2x1c3Rlci5nZXRJbWFnZSgpLnNldFNjYWxlKHN0eWxlQ2x1c3Rlci5nZXRJbWFnZSgpLmdldFNjYWxlKCkqMC43KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZkZlYXR1cmVzID0gZmVhdHVyZSA/IGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpIDogZmFsc2U7XG4gICAgICBpZiAoIShmRmVhdHVyZXMgJiYgZkZlYXR1cmVzLmxlbmd0aCA9PT0gMSkpIHtcbiAgICAgICAgLy8gY2x1c3RlciBtdWx0aXBsZSBQT0lcbiAgICAgICAgaWYgKGZGZWF0dXJlcykge1xuICAgICAgICAgIGlmKGZGZWF0dXJlc1swXS5nZXQoJ2NsdXN0ZXJfcG9wdXAnKSA9PSAxKSB7XG4gICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihjbGlja0V2ZW50LmNvb3JkaW5hdGUpO1xuICAgICAgICAgICAgY3VycmVudFpvb20gPSBtYXAuZ2V0VmlldygpLmdldFpvb20oKTtcbiAgICAgICAgICAgIG1pblpvb20gPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmNsdXN0ZXJfYWxsID8gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jbHVzdGVyX3pvb20gOiBmRmVhdHVyZXNbJzAnXS5nZXQoJ2NsdXN0ZXJfem9vbScpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRab29tID49IG1pblpvb20pIHtcbiAgICAgICAgICAgICAgc2V0UG9wdXAgPVtdO1xuICAgICAgICAgICAgICBzZXRQb3B1cC5jb250ZW50ID0gJyc7XG4gICAgICAgICAgICAgIHNldFBvcHVwLmFzeW5jID0gZmFsc2U7XG4gICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBmRmVhdHVyZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGlmIChmRmVhdHVyZXNbaV0uZ2V0ICYmIGZGZWF0dXJlc1tpXS5nZXQoJ3BvcHVwJykgJiYgZkZlYXR1cmVzW2ldLmdldCgncG9wdXAnKS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICBzZXRQb3B1cC5jb250ZW50ID0gc2V0UG9wdXAuY29udGVudC5jb25jYXQoZkZlYXR1cmVzW2ldLmdldCgncG9wdXAnKS5jb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZmVhdHVyZSA9IGZGZWF0dXJlc1swXS5jbG9uZSgpO1xuICAgICAgICAgICAgICBmZWF0dXJlLnNldCgncG9wdXAnLHNldFBvcHVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldFpvb20oY3VycmVudFpvb20rMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxheWVyLmdldFNvdXJjZSgpLnJlbW92ZUZlYXR1cmUoZmVhdHVyZSk7XG4gICAgICAgICAgICBjdXJyZW50Wm9vbSA9IG1hcC5nZXRWaWV3KCkuZ2V0Wm9vbSgpO1xuICAgICAgICAgICAgbmV3Q2VudGVyID0gbWFwLmdldENvb3JkaW5hdGVGcm9tUGl4ZWwoY2xpY2tFdmVudC5waXhlbCk7XG4gICAgICAgICAgICBtaW5ab29tID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5jbHVzdGVyX3pvb20gPyBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmNsdXN0ZXJfem9vbSA6IGZGZWF0dXJlc1snMCddLmdldCgnY2x1c3Rlcl96b29tJyk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50Wm9vbSA+PSBtaW5ab29tKSB7XG4gICAgICAgICAgICAgIHZhciBmID0gW107XG4gICAgICAgICAgICAgIHZhciBjZiA9IFtdO1xuICAgICAgICAgICAgICAvL29wZW4gdGhlIGNsdXN0ZXIgYWZ0ZXIgem9vbWluZ1xuICAgICAgICAgICAgICB2YXIgcGl4ID0gbWFwLmdldFZpZXcoKS5nZXRSZXNvbHV0aW9uKCk7XG4gICAgICAgICAgICAgIHZhciBtYXggPSBmRmVhdHVyZXMubGVuZ3RoO1xuICAgICAgICAgICAgICBsZXQgY2x1c3REaXN0YW5jZSA9IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuY2x1c3Rlcl9kaXN0X3NwaWRlciA/IHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuY2x1c3Rlcl9kaXN0X3NwaWRlciA6IDIwO1xuICAgICAgICAgICAgICBsZXQgYXJyTGluZXN0cmluZyA9IFtdO1xuICAgICAgICAgICAgICB2YXIgciA9IHBpeCAqIGNsdXN0RGlzdGFuY2UgKiAoMC41ICsgbWF4IC8gNCk7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IDIgKiBNYXRoLlBJICogaSAvIG1heDtcbiAgICAgICAgICAgICAgICBpZiAobWF4ID09IDIgfHwgbWF4ID09IDQpIGEgKz0gTWF0aC5QSSAvIDQ7XG4gICAgICAgICAgICAgICAgdmFyIHAgPSBbbmV3Q2VudGVyWzBdICsgciAqIE1hdGguc2luKGEpLCBuZXdDZW50ZXJbMV0gKyByICogTWF0aC5jb3MoYSldO1xuICAgICAgICAgICAgICAgIHZhciBjb29yZGluYXRlID0gdG9Mb25MYXQocCk7XG4gICAgICAgICAgICAgICAgbGV0IGZlYXR1cmVMaW5lc3RyaW5nID0gbmV3IEZlYXR1cmUobmV3IExpbmVTdHJpbmcoW25ld0NlbnRlciwgcF0pKTtcbiAgICAgICAgICAgICAgICBhcnJMaW5lc3RyaW5nLnB1c2goZmVhdHVyZUxpbmVzdHJpbmcpO1xuICAgICAgICAgICAgICAgIGYucHVzaChmRmVhdHVyZXNbaV0uZ2V0R2VvbWV0cnkoKSk7XG4gICAgICAgICAgICAgICAgZkZlYXR1cmVzW2ldLnNldEdlb21ldHJ5KG5ldyBQb2ludChwKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZXMoZkZlYXR1cmVzKTtcbiAgICAgICAgICAgICAgbGV0IHN0cmluZ1NvdXJjZSA9IG5ldyBWZWN0b3JTb3VyY2Uoe2ZlYXR1cmVzOiBhcnJMaW5lc3RyaW5nfSk7XG4gICAgICAgICAgICAgIGxldCBzdHJpbmdTdHlsZSA9IG5ldyBTdHlsZSh7XG4gICAgICAgICAgICAgICAgc3Ryb2tlOiBuZXcgU3Ryb2tlKHtcbiAgICAgICAgICAgICAgICAgIHdpZHRoOiAwLjMsXG4gICAgICAgICAgICAgICAgICBjb2xvcjogXCIjMDAwMDcwXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgbGV0IHN0cmluZ0xheWVyID0gbmV3IFZlY3Rvcih7XG4gICAgICAgICAgICAgICAgc291cmNlOiBzdHJpbmdTb3VyY2UsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHN0cmluZ1N0eWxlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBtYXAuZ2V0VmlldygpLm9uKCdjaGFuZ2U6cmVzb2x1dGlvbicsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGlkIGluIGYpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChmLmhhc093blByb3BlcnR5KGlkKSAmJiBmRmVhdHVyZXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZGZWF0dXJlc1tpZF0uc2V0R2VvbWV0cnkoZltpZF0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjZiA9IFtdO1xuICAgICAgICAgICAgICAgIGYgPSBbXTtcbiAgICAgICAgICAgICAgICBtYXAucmVtb3ZlTGF5ZXIoc3RyaW5nTGF5ZXIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgbWFwLmFkZExheWVyKHN0cmluZ0xheWVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRab29tICs9IDE7XG4gICAgICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKG5ld0NlbnRlcik7XG4gICAgICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Wm9vbShjdXJyZW50Wm9vbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKChmRmVhdHVyZXMgJiYgZkZlYXR1cmVzLmxlbmd0aCA9PT0gMSkpIHtcbiAgICAgICAgZmVhdHVyZSA9IGZGZWF0dXJlc1swXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcHNDb250cm9scy5jb250cm9scy5lZGl0b3IgJiYgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwc0NvbnRyb2xzLmNvbnRyb2xzLmVkaXRvci5pc09wZW4oKSkge1xuICAgICAgICAvLyBkbyBub3Qgc2hvdyBwb3B1cCB3aGVuIGVkaXRvciBpcyBvcGVuXG4gICAgICAgIGlmIChmZWF0dXJlICYmIGZlYXR1cmUuZ2V0KCdwcm9qZWN0SWQnKSkge1xuICAgICAgICAgICAgLy8gYnV0IGNhbGwgY2xpY2sgaG9va3NcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyhzZWxmLmhvb2tfbWFwX2NsaWNrLCBjbGlja0V2ZW50KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcG9wdXBJbmZvcyA9IHt9O1xuICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ3BvcHVwJykpIHtcbiAgICAgICAgLy8gc2luZ2xlIFBPSVxuICAgICAgICBwb3B1cEluZm9zID0gZmVhdHVyZS5nZXQoJ3BvcHVwJyk7XG4gICAgICAgIGlmIChwb3B1cEluZm9zICYmIHBvcHVwSW5mb3MuY29udGVudCA9PT0gXCIke0ZOZm5TdGFuZGFyZEluZm9Qb3B1cH1cIikge1xuICAgICAgICAgIGxldCBwb3B1cENvbnRlbnQgPSBcIiR7Rk5mblN0YW5kYXJkSW5mb1BvcHVwfVwiO1xuICAgICAgICAgIHBvcHVwQ29udGVudCA9IHV0aWxzLnJlcGxhY2VGdW5jdGlvblBsYWNlaG9sZGVycyhwb3B1cENvbnRlbnQsIGZlYXR1cmUsIGxheWVyLCBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmxhbmcsIHNlbGYpO1xuICAgICAgICAgIHBvcHVwSW5mb3MgPSBwb3B1cEluZm9zIHx8IHt9O1xuICAgICAgICAgIHBvcHVwSW5mb3MuY29udGVudCA9IHBvcHVwQ29udGVudDtcbiAgICAgICAgICBwb3B1cEluZm9zLmFzeW5jID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobGF5ZXIgJiYgbGF5ZXIucG9wdXApIHtcbiAgICAgICAgcG9wdXBJbmZvcyA9IGxheWVyLnBvcHVwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmVhdHVyZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmVhdHVyZSAmJiBmZWF0dXJlLmdldCgnbG9jX2xpbmt1cmwnKSkge1xuICAgICAgICBsZXQgbGluayA9IGZlYXR1cmUuZ2V0KCdsb2NfbGlua3VybCcpO1xuICAgICAgICB3aGlsZSAobGluay5sYXN0SW5kZXhPZihcIltcIikgIT0gLTEpIHtcbiAgICAgICAgICBsZXQgc3ViU3RyID0gbGluay5zdWJzdHJpbmcobGluay5sYXN0SW5kZXhPZignWycpICsgMSwgbGluay5sYXN0SW5kZXhPZignXScpKTtcbiAgICAgICAgICBsZXQgZmVhdHVyZUVsZW1lbnQgPSBcIlwiO1xuICAgICAgICAgIGlmIChmZWF0dXJlLmdldChzdWJTdHIpKSB7XG4gICAgICAgICAgICBmZWF0dXJlRWxlbWVudCA9IGZlYXR1cmUuZ2V0KHN1YlN0cikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGZlYXR1cmVFbGVtZW50LnJlcGxhY2UoXCIgXCIsIFwiLVwiKTtcbiAgICAgICAgICAgIGZlYXR1cmVFbGVtZW50ID0gZW5jb2RlVVJJQ29tcG9uZW50KGZlYXR1cmVFbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGluayA9IGxpbmsuc3Vic3RyaW5nKDAsIGxpbmsubGFzdEluZGV4T2YoJ1snKSkgKyBmZWF0dXJlRWxlbWVudCArIGxpbmsuc3Vic3RyaW5nKGxpbmsubGFzdEluZGV4T2YoJ10nKSArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLmxpbmtfbmV3d2luZG93ID09PSAnMScpIHtcbiAgICAgICAgICB3aW5kb3cub3BlbihsaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgIHdpbmRvdy5vcGVuKGxpbmssIFwiX3NlbGZcIik7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ3pvb21fb25jbGljaycpICYmIGZlYXR1cmUuZ2V0KCd6b29tX29uY2xpY2snKSAhPSAwKSB7XG4gICAgICAgICAgbWFwLmdldFZpZXcoKS5zZXRab29tKGZlYXR1cmUuZ2V0KCd6b29tX29uY2xpY2snKSk7XG4gICAgICAgICAgbWFwLmdldFZpZXcoKS5zZXRDZW50ZXIoZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGxheWVyICYmIGxheWVyLnpvb21fb25jbGljayAmJiBsYXllci56b29tX29uY2xpY2sgIT0gMCkge1xuICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Wm9vbShsYXllci56b29tX29uY2xpY2spO1xuICAgICAgICAgIG1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKGNsaWNrRXZlbnQuY29vcmRpbmF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmVhdHVyZSkge1xuICAgICAgICAgIGdlb21ldHJ5ID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpO1xuICAgICAgICAgIGlmIChnZW9tZXRyeS5nZXRUeXBlKCkgPT09ICdQb2ludCcpIHtcbiAgICAgICAgICAgIGNvb3JkID0gZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29vcmQgPSBjbGlja0V2ZW50LmNvb3JkaW5hdGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWxmLm1hcERhdGEucG9wdXBIYW5kbGluZyAhPT0gJzInKSB7XG4gICAgICAgICAgICB3aW5kb3cuYzRnTWFwc1BvcHVwLnBvcHVwLnNldFBvc2l0aW9uKGNvb3JkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aW5kb3cuYzRnTWFwc1BvcHVwLnBvcHVwLnNldFBvc2l0aW9uKHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0Q2VudGVyKCkpO1xuXG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYucG9wdXBDb250cm9sbGVyLmFkZFBvcFVwKHBvcHVwSW5mb3MuY29udGVudCk7XG4gICAgICAgICAgaWYgKHBvcHVwSW5mb3MuY29udGVudCkge1xuICAgICAgICAgICAgaWYgKHNlbGYubWFwRGF0YS5wb3B1cEhhbmRsaW5nICE9PSAnMycpIHtcbiAgICAgICAgICAgICAgd2luZG93LmM0Z01hcHNQb3B1cC4kY29udGVudCA/IHdpbmRvdy5jNGdNYXBzUG9wdXAuJGNvbnRlbnQuaHRtbCgnJykgOiBmYWxzZTtcbiAgICAgICAgICAgICAgd2luZG93LmM0Z01hcHNQb3B1cC4kcG9wdXAgPyB3aW5kb3cuYzRnTWFwc1BvcHVwLiRwb3B1cC5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuTE9BRElORykgOiBmYWxzZTtcbiAgICAgICAgICAgICAgd2luZG93LmM0Z01hcHNQb3B1cC5zcGlubmVyLnNob3coKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBvcHVwSW5mb3MuYXN5bmMgPT09IGZhbHNlIHx8IHBvcHVwSW5mb3MuYXN5bmMgPT0gJzAnKSB7XG4gICAgICAgICAgICAgIG9ialBvcHVwID0ge307XG4gICAgICAgICAgICAgIG9ialBvcHVwLnBvcHVwID0gcG9wdXBJbmZvcztcbiAgICAgICAgICAgICAgb2JqUG9wdXAuZmVhdHVyZSA9IGZlYXR1cmU7XG4gICAgICAgICAgICAgIG9ialBvcHVwLmxheWVyID0gbGF5ZXI7XG4gICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwLCB7cG9wdXA6IG9ialBvcHVwLCBtYXBDb250cm9sbGVyOiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlcn0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNlbGYucG9wdXBDb250cm9sbGVyLnNldFBvcHVwKG9ialBvcHVwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBzZWxmLmFwaV9pbmZvd2luZG93X3VybCArICcvJyArIHBvcHVwSW5mb3MuY29udGVudFxuICAgICAgICAgICAgICB9KS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9wdXBJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgYXN5bmM6IHBvcHVwSW5mb3MuYXN5bmMsXG4gICAgICAgICAgICAgICAgICBjb250ZW50OiBkYXRhLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICBwb3B1cDogcG9wdXBJbmZvcy5wb3B1cCxcbiAgICAgICAgICAgICAgICAgIHJvdXRpbmdfbGluazogcG9wdXBJbmZvcy5yb3V0aW5nX2xpbmtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgICBvYmpQb3B1cC5wb3B1cCA9IHBvcHVwSW5mbztcbiAgICAgICAgICAgICAgICBvYmpQb3B1cC5mZWF0dXJlID0gZmVhdHVyZTtcbiAgICAgICAgICAgICAgICBvYmpQb3B1cC5sYXllciA9IGxheWVyO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgcG9wdXAgaG9vayBmb3IgcGx1Z2luIHNwZWNpZmljIHBvcHVwIGNvbnRlbnRcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwLCB7cG9wdXA6IG9ialBvcHVwLCBtYXBDb250cm9sbGVyOiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlcn0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLnBvcHVwQ29udHJvbGxlci5zZXRQb3B1cChvYmpQb3B1cCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5tYXBEYXRhLnBvcHVwSGFuZGxpbmcgIT09ICczJykge1xuICAgICAgICAgICAgICB3aW5kb3cuYzRnTWFwc1BvcHVwLiRwb3B1cC5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbGYucG9wdXBDb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzZWxmLm1hcERhdGEucG9wdXBIYW5kbGluZyAhPT0gJzMnKSB7XG4gICAgICAgICAgICB3aW5kb3cuYzRnTWFwc1BvcHVwLiRwb3B1cC5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5wb3B1cENvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBob29rc1xuICAgICAgICB1dGlscy5jYWxsSG9va0Z1bmN0aW9ucyh3aW5kb3cuYzRnTWFwc0hvb2tzLmhvb2tfbWFwX2NsaWNrLCBjbGlja0V2ZW50KTtcbiAgICAgIH1cbiAgICB9KTsgLy8gZW5kIG9mIFwiY2xpY2stb2JzZXJ2ZXJcIlxuXG4gIH0gLy8gZW5kIG9mIFwiaW5pdGlhbFwiKlxuXG4gIGFjdGl2YXRlQ2xpY2tPYnNlcnZlcigpIHtcbiAgICB0aGlzLmNsaWNrT2JzZXJ2ZXJBY3RpdmUgPSB0cnVlO1xuICB9XG5cbiAgZGVhY3RpdmF0ZUNsaWNrT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy5jbGlja09ic2VydmVyQWN0aXZlID0gZmFsc2U7XG4gIH1cblxuICBjb21iaW5lKHByb3h5KSB7XG4gICAgdmFyIGZ1bmMgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgcHJveHkuY29tYmluZUxheWVycyhwcm94eSk7XG4gICAgICBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLnVuKCdwb3N0cmVuZGVyJywgZnVuYyk7XG4gICAgfTtcbiAgICBwcm94eS5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLm9uKCdwb3N0cmVuZGVyJywgZnVuYylcbiAgfVxuXG4gIC8qKlxuICAgKiBAVE9ETzogW2NoZWNrTG9jYXRpb25TdHlsZXMgZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEBwYXJhbSAgIHtbdHlwZV19ICBvcHRfb3B0aW9ucyAgW2Rlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNoZWNrTG9jYXRpb25TdHlsZXMob3B0X29wdGlvbnMpIHtcblxuICAgIHZhciBvcHRpb25zLFxuICAgICAgbmVlZGVkTGF5ZXJTdHlsZXMsXG4gICAgICBnZXRMYXllclN0eWxlcyxcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKG9wdF9vcHRpb25zICYmIHR5cGVvZiBvcHRfb3B0aW9ucyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgb3B0aW9ucyA9IG9wdF9vcHRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXM9IHRoaXMubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzIHx8IHt9O1xuXG4gICAgbmVlZGVkTGF5ZXJTdHlsZXMgPSBbXTtcbiAgICBnZXRMYXllclN0eWxlcyA9IGZ1bmN0aW9uIChsYXllcnMpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBpbmRleDtcblxuICAgICAgLy8gVG9EbzogUmVrdXJzaW9uIGludGVncmllcmVuICh0ZXN0IG1pdCBmb3J1bSlcbiAgICAgIGZvciAoaW5kZXggaW4gbGF5ZXJzKSB7XG4gICAgICAgIGlmIChsYXllcnMuaGFzT3duUHJvcGVydHkoaW5kZXgpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGxheWVyc1tpbmRleF07XG5cbiAgICAgICAgICBpZiAoZWxlbWVudC5jb250ZW50KSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudC5jb250ZW50Lmxlbmd0aDsgaSArPSAxKSB7XG5cbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY29udGVudFtpXSkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY29udGVudFtpXS5sb2NhdGlvblN0eWxlXG4gICAgICAgICAgICAgICAgICAmJiBlbGVtZW50LmNvbnRlbnRbaV0ubG9jYXRpb25TdHlsZSAhPT0gXCIwXCJcbiAgICAgICAgICAgICAgICAgICYmIG5lZWRlZExheWVyU3R5bGVzLmluZGV4T2YoZWxlbWVudC5jb250ZW50W2ldLmxvY2F0aW9uU3R5bGUpID09PSAtMVxuICAgICAgICAgICAgICAgICAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAhc2VsZi5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZWxlbWVudC5jb250ZW50W2ldLmxvY2F0aW9uU3R5bGVdXG4gICAgICAgICAgICAgICAgICAgIHx8IHNlbGYubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2VsZW1lbnQuY29udGVudFtpXS5sb2NhdGlvblN0eWxlXS5zdHlsZSA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBuZWVkZWRMYXllclN0eWxlcy5wdXNoKGVsZW1lbnQuY29udGVudFtpXS5sb2NhdGlvblN0eWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZ2V0TGF5ZXJTdHlsZXModGhpcy5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzKTtcblxuICAgIGlmIChuZWVkZWRMYXllclN0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhuZWVkZWRMYXllclN0eWxlcywgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvcHRpb25zLmRvbmUgJiYgdHlwZW9mIG9wdGlvbnMuZG9uZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIG9wdGlvbnMuZG9uZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBlbmQgb2YgXCJjaGVja0xvY2F0aW9uU3R5bGVzKClcIlxuXG4gIGNvbWJpbmVMYXllcnMocHJveHkpe1xuXG4gICAgdmFyIGksXG4gICAgICBqLFxuICAgICAgayxcbiAgICAgIGxheWVySWQsXG4gICAgICBsYXllcnMsXG4gICAgICBjb250ZW50RGF0YUxheWVyLFxuICAgICAgY29udGVudERhdGEsXG4gICAgICBsYXllcixcbiAgICAgIGxheWVyR3JvdXBzID1bXSxcbiAgICAgIHNvdXJjZSxcbiAgICAgIHN0eWxlLFxuICAgICAgZmVhdHVyZXM9W10sXG4gICAgICBzdHlsZXM9W10sXG4gICAgICBvbmVGZWF0dXJlLFxuICAgICAgZmVhdHVyZSxcbiAgICAgIHZlY3RvclNvdXJjZSxcbiAgICAgIGNsdXN0ZXJTb3VyY2UsXG4gICAgICB2ZWN0b3JMYXllcjtcblxuXG4gICAgaWYocHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEuY2x1c3Rlcl9hbGwgPT09ICcxJyl7XG4gICAgICBjb250ZW50RGF0YSA9IHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhO1xuICAgICAgZm9yKCBpIGluIHByb3h5LmFjdGl2ZUxheWVySWRzKSB7Ly9sb29wIHRvIGdldCBhbGwgbGF5ZXJzXG4gICAgICAgIGxheWVycyA9IGM0Zy5tYXBzLmxheWVyc1tpXTtcblxuICAgICAgICBpZihsYXllcnMudHlwZSA9PT0gXCJncHhcIil7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGxheWVycyAmJiBsYXllcnMudmVjdG9yTGF5ZXIgKXtcbiAgICAgICAgICBpZihsYXllcnMudmVjdG9yTGF5ZXIuZ2V0TGF5ZXJzKCkgJiYgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0gJiYgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0uZ2V0U291cmNlKCkgJiYgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0uZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKS5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlTGF5ZXIobGF5ZXJzLnZlY3RvckxheWVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZW50RGF0YUxheWVyID0gbGF5ZXJzLmNvbnRlbnQ7XG4gICAgICAgICAgbGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpLmNvbnRlbnQgPSBjb250ZW50RGF0YUxheWVyO1xuICAgICAgICAgIGxheWVyR3JvdXBzLnB1c2gobGF5ZXJzLnZlY3RvckxheWVyLmdldExheWVycygpKTtcblxuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvcihrID0wOyBrPGxheWVyR3JvdXBzLmxlbmd0aDtrKyspey8vbG9vcCB0byBleHRyYWN0IGZlYXR1cmVzIGZyb20gbGF5ZXJzXG4gICAgICAgIGlmKGxheWVyR3JvdXBzW2tdLmdldEFycmF5KCkubGVuZ3RoPjApe1xuICAgICAgICAgIGxheWVyID0gbGF5ZXJHcm91cHNba10uZ2V0QXJyYXkoKTtcbiAgICAgICAgICBzb3VyY2UgPSBsYXllcltcIjBcIl0uZ2V0U291cmNlKCk7XG4gICAgICAgICAgc3R5bGUgPSBsYXllcltcIjBcIl0uZ2V0U3R5bGUoKTtcblxuICAgICAgICAgIG9uZUZlYXR1cmUgPSB0cnVlO1xuICAgICAgICAgIGZlYXR1cmUgPSBzb3VyY2UuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgICBmb3IoaiA9IDA7IGogPCBmZWF0dXJlLmxlbmd0aDsgaiArKyl7Ly9sb29wIG92ZXIgYWxsIGZlYXR1cmVzIGZyb20gYSBzb3VyY2VcbiAgICAgICAgICAgIGlmKGZlYXR1cmVbal0uZ2V0KFwiZmVhdHVyZXNcIikpe1xuICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBmZWF0dXJlW2pdLmdldChcImZlYXR1cmVzXCIpLmxlbmd0aDsgaSsrKXsvL2xvb3AgZm9yIGNsdXN0ZXJlZCBmZWF0dXJlc1xuICAgICAgICAgICAgICAgIGlmKGxheWVyR3JvdXBzW2tdLmNvbnRlbnRbal0pe1xuICAgICAgICAgICAgICAgICAgc3R5bGUgPSB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsYXllckdyb3Vwc1trXS5jb250ZW50W2pdLmxvY2F0aW9uU3R5bGVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGxheWVyR3JvdXBzW2tdLmNvbnRlbnRbMF0pe1xuICAgICAgICAgICAgICAgICAgc3R5bGUgPSB0aGlzLmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsYXllckdyb3Vwc1trXS5jb250ZW50WzBdLmxvY2F0aW9uU3R5bGVdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZlYXR1cmVbal0uZ2V0KFwiZmVhdHVyZXNcIilbaV0uc2V0U3R5bGUoc3R5bGUuc3R5bGUpO1xuICAgICAgICAgICAgICAgIGlmKCFmZWF0dXJlW2pdLmdldChcImZlYXR1cmVzXCIpW2ldLmdldCgncG9wdXAnKSl7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlW2pdLmdldChcImZlYXR1cmVzXCIpW2ldLnNldCgncG9wdXAnLGxheWVyWycwJ10ucG9wdXApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goZmVhdHVyZVtqXS5nZXQoXCJmZWF0dXJlc1wiKSk7XG5cbiAgICAgICAgICAgICAgb25lRmVhdHVyZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvbmVGZWF0dXJlKSB7Ly9zaW5nbGUgbm90IGNsdXN0ZXJlZCBmZWF0dXJlXG4gICAgICAgICAgICBpZiAoZmVhdHVyZS5sZW5ndGggPj0gMSkge1xuICAgICAgICAgICAgICBpZiAoIWZlYXR1cmVbJzAnXS5nZXQoJ3BvcHVwJykpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlWycwJ10uc2V0KCdwb3B1cCcsbGF5ZXIucG9wdXApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmVjdG9yU291cmNlID0gbmV3IFZlY3RvclNvdXJjZSh7XG4gICAgICAgIHByb2plY3Rpb246ICdFUFNHOjM4NTcnXG5cbiAgICAgIH0pO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpICsrKSB7XG4gICAgICAgIHZlY3RvclNvdXJjZS5hZGRGZWF0dXJlcyhmZWF0dXJlc1tpXSk7XG4gICAgICB9XG5cbiAgICAgIGNsdXN0ZXJTb3VyY2UgPSBuZXcgQ2x1c3Rlcih7XG4gICAgICAgIGRpc3RhbmNlOiA0MCxcbiAgICAgICAgLy90aHJlc2hvbGQ6IDIsIC8vbWluaW11bSBlbGVtZW50IGNvdW50XG4gICAgICAgIHNvdXJjZTogdmVjdG9yU291cmNlXG4gICAgICB9KTtcbiAgICAgIHZhciBzdHlsZUZvckNsdXN0ZXIgPSBmdW5jdGlvbihmZWF0dXJlLCByZXNvbHV0aW9uKXtcbiAgICAgICAgaWYoZmVhdHVyZSAmJiBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKSAmJiBmZWF0dXJlLmdldCgnZmVhdHVyZXMnKVsnMCddLmdldFN0eWxlKCkpe1xuICAgICAgICAgIHN0eWxlID0gZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbJzAnXS5nZXRTdHlsZSgpKGZlYXR1cmUpO1xuICAgICAgICAgIGlmIChmZWF0dXJlICE9PSB1bmRlZmluZWQgJiYgZmVhdHVyZSAhPT0gbnVsbCAmJiBmZWF0dXJlLnNlbGYgIT09IHdpbmRvdykge1xuICAgICAgICAgICAgdmFyIGZGZWF0dXJlcyA9IGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpO1xuICAgICAgICAgICAgdmFyIHNpemUgPSBmRmVhdHVyZXMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNpemUgPiAxKSB7XG4gICAgICAgICAgICAgIGlmICghc3R5bGUpIHtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IFtdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIGJ1YmJsZS1vZmZzZXRcbiAgICAgICAgICAgICAgdmFyIGljb25PZmZzZXQgPSBbMCwgMF07XG4gICAgICAgICAgICAgIGlmIChzdHlsZVswXSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVbMF0uZ2V0SW1hZ2UoKS5nZXRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IHBhcnNlSW50KHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0UmFkaXVzKCksIDEwKTtcbiAgICAgICAgICAgICAgICAgIGlmIChyYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbk9mZnNldCA9IFswLCByYWRpdXNdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0eWxlWzBdLmdldEltYWdlKCkuZ2V0QW5jaG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQgPSBzdHlsZVswXS5nZXRJbWFnZSgpLmdldEFuY2hvcigpIHx8IFswLCAwXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgZmlsbGNvbG9yID0gdXRpbHMuZ2V0UmdiYUZyb21IZXhBbmRPcGFjaXR5KCc0OTc1QTgnLHtcbiAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgdmFsdWU6IDcwXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmIChjb250ZW50RGF0YS5jbHVzdGVyX2ZpbGxjb2xvcikge1xuICAgICAgICAgICAgICAgIGZpbGxjb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShjb250ZW50RGF0YS5jbHVzdGVyX2ZpbGxjb2xvcix7XG4gICAgICAgICAgICAgICAgICB1bml0OiAnJScsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogNzBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgZm9udGNvbG9yID0gY29udGVudERhdGEuY2x1c3Rlcl9mb250Y29sb3IgPyAnIycgKyBjb250ZW50RGF0YS5jbHVzdGVyX2ZvbnRjb2xvciA6ICcjRkZGRkZGJztcblxuICAgICAgICAgICAgICBzdHlsZS5wdXNoKFxuICAgICAgICAgICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IFwi4pePXCIsXG4gICAgICAgICAgICAgICAgICAgIGZvbnQ6IFwiNjBweCBzYW5zLXNlcmlmXCIsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IC0xICogaWNvbk9mZnNldFswXSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTEgKiBpY29uT2Zmc2V0WzFdLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZpbGxjb2xvclxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBzdHlsZS5wdXNoKFxuICAgICAgICAgICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgICAgICAgICB0ZXh0OiBuZXcgVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHNpemUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogLTEgKiBpY29uT2Zmc2V0WzBdLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtMSAqIGljb25PZmZzZXRbMV0gKyAzLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBuZXcgRmlsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGZvbnRjb2xvclxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICBpZihmZWF0dXJlICYmIGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpICYmIGZlYXR1cmUuZ2V0KCdmZWF0dXJlcycpWycwJ10uZ2V0U3R5bGUoKSl7XG4gICAgICAgICAgICByZXR1cm4gZmVhdHVyZS5nZXQoJ2ZlYXR1cmVzJylbJzAnXS5nZXRTdHlsZSgpKGZlYXR1cmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH07XG5cbiAgICAgIC8vdmVjdG9yTGF5ZXIgPSBzZWxmLmdldFZlY3RvckxheWVyKGNsdXN0ZXJTb3VyY2UsIHN0eWxlRm9yQ2x1c3Rlcik7XG5cbiAgICAgIHZlY3RvckxheWVyID0gbmV3IFZlY3Rvcih7XG4gICAgICAgIG5hbWU6ICdDbHVzdGVyJyxcbiAgICAgICAgc291cmNlOiBjbHVzdGVyU291cmNlLFxuICAgICAgICBzdHlsZTogc3R5bGVGb3JDbHVzdGVyXG5cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgYWxsTGF5ZXJzID0gcHJveHkub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRMYXllcnMoKS5nZXRBcnJheSgpO1xuICAgICAgdmFyIG1pc3NpbmdMYXllciA9IHRydWU7XG4gICAgICBmb3IoaSA9IDA7IGkgPCBhbGxMYXllcnMubGVuZ3RoOyBpKyspe1xuXG4gICAgICAgIGlmKGFsbExheWVyc1tpXS5jbHVzdGVycykge1xuICAgICAgICAgIGFsbExheWVyc1tpXSA9IHZlY3RvckxheWVyO1xuICAgICAgICAgIG1pc3NpbmdMYXllciA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmKG1pc3NpbmdMYXllcil7XG4gICAgICAgIHByb3h5Lm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIodmVjdG9yTGF5ZXIpO1xuICAgICAgfVxuICAgIH1cblxuXG5cbiAgfS8vZW5kIG9mIGNvbWJpbmVMYXllcnNcblxuXG4gIGNoZWNrTGF5ZXJJc0FjdGl2ZUZvclpvb20obGF5ZXJJZCwgb3B0X3pvb20pIHtcbiAgICB2YXIgbGF5ZXIsXG4gICAgICB6b29tLFxuICAgICAgbGF5ZXJDb250ZW50LFxuICAgICAgbG9jc3R5bGU7XG5cbiAgICBpZiAoIXRoaXMubGF5ZXJDb250cm9sbGVyLmFyckxheWVyc1tsYXllcklkXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxheWVyID0gdGhpcy5sYXllckNvbnRyb2xsZXIuYXJyTGF5ZXJzW2xheWVySWRdO1xuXG4gICAgaWYgKG9wdF96b29tKSB7XG4gICAgICB6b29tID0gb3B0X3pvb207XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFpvb20oKSA+IC0xKSB7XG4gICAgICB6b29tID0gdGhpcy5vcHRpb25zLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKS5nZXRab29tKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHpvb20gPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGxheWVyLnpvb20gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGxheWVyLmNvbnRlbnQgJiYgbGF5ZXIuY29udGVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGF5ZXIuY29udGVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxheWVyQ29udGVudCA9IGxheWVyLmNvbnRlbnRbaV07XG4gICAgICAgICAgaWYgKGxheWVyQ29udGVudC5sb2NhdGlvblN0eWxlKSB7XG4gICAgICAgICAgICBsb2NzdHlsZSA9IHRoaXMubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW2xheWVyQ29udGVudC5sb2NhdGlvblN0eWxlXTtcbiAgICAgICAgICAgIC8vIFRPRE8gY2hlY2sgYWxsIGxvY3N0eWxlcyBhbmQgdGFrZSB0aGUgbW9zdCBjb25zdHJhaW5pbmcgem9vbSB2YWx1ZVxuICAgICAgICAgICAgaWYgKGxvY3N0eWxlKSB7XG4gICAgICAgICAgICAgIGxheWVyLnpvb20gPSB7fTtcbiAgICAgICAgICAgICAgaWYgKGxvY3N0eWxlLm1heHpvb20pIHtcbiAgICAgICAgICAgICAgICBsYXllci56b29tLm1heCA9IGxvY3N0eWxlLm1heHpvb207XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxvY3N0eWxlLm1pbnpvb20pIHtcbiAgICAgICAgICAgICAgICBsYXllci56b29tLm1pbiA9IGxvY3N0eWxlLm1pbnpvb207XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxheWVyLnpvb20ubWF4IHx8IGxheWVyLnpvb20ubWluKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCh0eXBlb2Ygem9vbSA9PT0gXCJudW1iZXJcIikgJiYgbGF5ZXIuem9vbVxuICAgICAgJiYgKGxheWVyLnpvb20ubWluID4gem9vbSB8fCAobGF5ZXIuem9vbS5tYXggPiAwICYmIGxheWVyLnpvb20ubWF4IDwgem9vbSkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gZW5kIG9mIFwiY2hlY2tMYXllcklzQWN0aXZlKClcIlxufVxuIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG5pbXBvcnQgKiBhcyBwb3B1cEZ1bmN0aW9uc0RFIGZyb20gXCIuL2M0Zy1tYXBzLXBvcHVwLWluZm8tZGVcIjtcbmltcG9ydCAqIGFzIHBvcHVwRnVuY3Rpb25zRU4gZnJvbSBcIi4vYzRnLW1hcHMtcG9wdXAtaW5mby1lblwiO1xuaW1wb3J0IHtWZWN0b3J9IGZyb20gXCJvbC9sYXllclwiO1xuaW1wb3J0IENpcmNsZSBmcm9tIFwib2wvZ2VvbS9DaXJjbGVcIjtcbmltcG9ydCB7dHJhbnNmb3JtfSBmcm9tIFwib2wvcHJvalwiO1xuaW1wb3J0IHtnZXRBcmVhLCBnZXREaXN0YW5jZX0gZnJvbSBcIm9sL3NwaGVyZVwiO1xuaW1wb3J0IHtFeHRlbnR9IGZyb20gXCJvbC9pbnRlcmFjdGlvblwiO1xuaW1wb3J0IHtWZWN0b3IgYXMgVmVjdG9yU291cmNlfSBmcm9tIFwib2wvc291cmNlXCI7XG5pbXBvcnQge2V4dGVuZH0gZnJvbSBcIm9sL2V4dGVudFwiO1xuaW1wb3J0IEpTQkkgZnJvbSAnanNiaS9kaXN0L2pzYmkubWpzJztcblxuXG5sZXQgcG9wdXBGdW5jdGlvbnMgPSBwb3B1cEZ1bmN0aW9uc0RFO1xuXG5pZiAodHlwZW9mIG1hcERhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJkZVwiKSB7XG4gICAgcG9wdXBGdW5jdGlvbnMgPSBwb3B1cEZ1bmN0aW9uc0RFO1xuICB9IGVsc2UgaWYgKG1hcERhdGEubGFuZyA9PT0gXCJlblwiKSB7XG4gICAgcG9wdXBGdW5jdGlvbnMgPSBwb3B1cEZ1bmN0aW9uc0VOO1xuICB9IGVsc2Uge1xuICAgIC8vIGZhbGxiYWNrXG4gICAgcG9wdXBGdW5jdGlvbnMgPSBwb3B1cEZ1bmN0aW9uc0VOO1xuICB9XG59IGVsc2Uge1xuICBwb3B1cEZ1bmN0aW9ucyA9IHBvcHVwRnVuY3Rpb25zRU47XG59XG5cbmV4cG9ydCB2YXIgdXRpbHMgPSB7XG4gIC8qKlxuICAgKiAgQ29udmVydHMgdGhlIGZpcnN0IGxldHRlciBvZiBhIGdpdmVuIHN0cmluZyB0byB1cHBlcmNhc2UsIGxlYXZpbmcgdGhlIHJlbWFpbmluZyBzdHJpbmcgdW50b3VjaGVkLlxuICAgKlxuICAgKiAgQHBhcmFtICAgIHtzdHJpbmd9ICAgIHRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZVxuICAgKlxuICAgKiAgQHJldHVybiAgIHtzdHJpbmd9ICAgIHRoZSBjYXBpdGFsaXplZCBzdHJpbmdcbiAgICovXG4gIGNhcGl0YWxpemVGaXJzdExldHRlcjogZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogR2VuZXJhdGUgYW4gdW5pcXVlIGlkLlxuICAgKlxuICAgKiBUaGUgaWQgaXMgOSBjaGFyYWN0ZXJzIGxvbmcgYW5kIHByZWZpeGVkIHdpdGggYW4gdW5kZXJzY29yZS5cbiAgICpcbiAgICogQHJldHVybiAge3N0cmluZ30gIFRoZSBnZW5lcmF0ZWQgaWQuXG4gICAqL1xuICBnZXRVbmlxdWVJZDogZnVuY3Rpb24gKCkge1xuICAgIC8vIE1hdGgucmFuZG9tIHNob3VsZCBiZSB1bmlxdWUgYmVjYXVzZSBvZiBpdHMgc2VlZGluZyBhbGdvcml0aG0uXG4gICAgLy8gQ29udmVydCBpdCB0byBiYXNlIDM2IChudW1iZXJzICsgbGV0dGVycyksIGFuZCBncmFiIHRoZSBmaXJzdCA5IGNoYXJhY3RlcnNcbiAgICAvLyBhZnRlciB0aGUgZGVjaW1hbC5cbiAgICByZXR1cm4gJ18nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFbmNvZGUgaW5wdXQgc3RyaW5ncyBmb3IgR2VvSlNPTi1PYmplY3RzIHByb3Blcmx5LFxuICAgKiBzbyB0aGV5IHdpbGwgbm90IGJyZWFrIHRoZSBDb2RlLlxuICAgKiBUcmFuc2Zvcm1zOlxuICAgKiAgIFxcIC0+IFxcXFw7XG4gICAqICAgXCIgLT4gJyc7XG4gICAqICAgw4QgLT4gJkF1bWw7XG4gICAqICAgw6QgLT4gJmF1bWw7XG4gICAqICAgw5YgLT4gJk91bWw7XG4gICAqICAgw7YgLT4gJm91bWw7XG4gICAqICAgw5wgLT4gJlV1bWw7XG4gICAqICAgw7wgLT4gJnV1bWw7XG4gICAqXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9ICBpbnB1dCAgW2Rlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGVuY29kZUdlb0pzb25Qcm9wZXJ0eTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgdmFyIG91dHB1dDtcblxuICAgIGlmICghaW5wdXQpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBvdXRwdXQgPSBpbnB1dC5yZXBsYWNlKFxuICAgICAgL1xcXFwvZywgJ1xcXFxcXFxcJ1xuICAgICkucmVwbGFjZShcbiAgICAgIC9cXFwiL2csICdcXCdcXCcnXG4gICAgKS5yZXBsYWNlKFxuICAgICAgL8OEL2csICcmQXVtbDsnXG4gICAgKS5yZXBsYWNlKFxuICAgICAgL8OkL2csICcmYXVtbDsnXG4gICAgKS5yZXBsYWNlKFxuICAgICAgL8OWL2csICcmT3VtbDsnXG4gICAgKS5yZXBsYWNlKFxuICAgICAgL8O2L2csICcmb3VtbDsnXG4gICAgKS5yZXBsYWNlKFxuICAgICAgL8OcL2csICcmVXVtbDsnXG4gICAgKS5yZXBsYWNlKFxuICAgICAgL8O8L2csICcmdXVtbDsnXG4gICAgKTtcblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sIC8vIGVuZCBvZiBlbmNvZGVHZW9Kc29uUHJvcGVydHkoKVxuICByZW1vdmVVbWxhdXRzOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCBcIlwiXG4gICAgKS5yZXBsYWNlKFxuICAgICAgICAvXFxcXC9nLCAnXFxcXFxcXFwnXG4gICAgKS5yZXBsYWNlKFxuICAgICAgICAvXFxcIi9nLCAnXFwnXFwnJ1xuICAgICkucmVwbGFjZShcbiAgICAgICAgL8OkL2csICdhZSdcbiAgICApLnJlcGxhY2UoXG4gICAgICAgIC/Dti9nLCAnb2UnXG4gICAgKS5yZXBsYWNlKFxuICAgICAgICAvw7wvZywgJ3VlJ1xuICAgICkucmVwbGFjZShcbiAgICAgICAgL8OfL2csICdzcydcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZWNvZGUgaW5wdXQgc3RyaW5ncyBmb3IgR2VvSlNPTi1PYmplY3RzIHByb3Blcmx5LFxuICAgKiBzbyB0aGV5IHdpbGwgYmUgZGlzcGxheWVkIGNvcnJlY3RseS5cbiAgICogVHJhbnNmb3JtczpcbiAgICogICBcXFxcICAgICAtPiBcXDtcbiAgICogICAnJyAgICAgLT4gXCI7XG4gICAqICAgJkF1bWw7IC0+IMOEXG4gICAqICAgJmF1bWw7IC0+IMOkXG4gICAqICAgJk91bWw7IC0+IMOWXG4gICAqICAgJm91bWw7IC0+IMO2XG4gICAqICAgJlV1bWw7IC0+IMOcXG4gICAqICAgJnV1bWw7IC0+IMO8XG4gICAqXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9ICBpbnB1dCAgW2Rlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGRlY29kZUdlb0pzb25Qcm9wZXJ0eTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgdmFyIG91dHB1dDtcblxuICAgIGlmICghaW5wdXQpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgaW5wdXQgPSBpbnB1dCArIFwiXCI7XG4gICAgfVxuXG4gICAgb3V0cHV0ID0gaW5wdXQucmVwbGFjZShcbiAgICAgIC9cXFxcXFxcXC9nLCAnXFxcXCdcbiAgICApLnJlcGxhY2UoXG4gICAgICAvXFwnXFwnL2csICdcXFwiJ1xuICAgICkucmVwbGFjZShcbiAgICAgIC8mQXVtbDsvZywgJ8OEJ1xuICAgICkucmVwbGFjZShcbiAgICAgIC8mYXVtbDsvZywgJ8OkJ1xuICAgICkucmVwbGFjZShcbiAgICAgIC8mT3VtbDsvZywgJ8OWJ1xuICAgICkucmVwbGFjZShcbiAgICAgIC8mb3VtbDsvZywgJ8O2J1xuICAgICkucmVwbGFjZShcbiAgICAgIC8mVXVtbDsvZywgJ8OcOydcbiAgICApLnJlcGxhY2UoXG4gICAgICAvJnV1bWw7L2csICfDvCdcbiAgICApO1xuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSwgLy8gZW5kIG9mIGRlY29kZUdlb0pzb25Qcm9wZXJ0eSgpXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBvciByZXBsYWNlIGFuIFVSTC1wYXJhbWV0ZXIuXG4gICAqXG4gICAqIElmIGBvcHRfZ2V0S2V5YCBpcyBgZmFsc2VgIG9yIGB1bmRlZmluZWRgIHRoZSBnaXZlbiBwYXJhbWV0ZXIsIGBwYXJhbWAsXG4gICAqIHdpbGwgYmUgYXBwbGllZCBhcyBcImhhc2gtcGFyYW1ldGVyXCIuXG4gICAqIGUuZy46XG4gICAqICAgaHR0cHM6Ly9teXVybC5kZTpwb3J0L3BhdGgvdG8vbWFwcyNwYXJhbVxuICAgKiBOb3RlLCB0aGF0IGFscmVhZHkgZXhpc3RpbmcgXCJoYXNoLXBhcmFtZXRlcnNcIiB3aWxsIGJlIG92ZXJyaWRlbixcbiAgICogd2hlcmVhcyBleGlzdGluZyBcIkdFVC1wYXJhbWV0ZXJzXCIgc3RheSB1bnRvdWNoZWQuXG4gICAqXG4gICAqIElmIGBvcHRfZ2V0S2V5YCBpcyBzZXQsIGl0IHdpbGwgYmUgYXBwbGllZCBhcyBcIkdFVC1wYXJhbWV0ZXJcIi5cbiAgICogZS5nLjpcbiAgICogICBodHRwczovL215dXJsLmRlOnBvcnQvcGF0aC90by9tYXBzP29wdF9nZXRLZXk9cGFyYW1cbiAgICogSWYgdGhlIGtleSBkZXNjcmliZWQgYnkgYG9wdF9nZXRLZXlgIGlzIGFscmVhZHkgZXhpc3RpbmcsIGl0cyB2YWx1ZSB3aWxsIGJlIG92ZXJyaWRlbixcbiAgICogb3RoZXJ3aXNlIHRoZSBrZXktdmFsdWUtcGFpciB3aWxsIGJlIGFwcGVuZGVkIGFwcHJvcHJpYXRseS5cbiAgICogQWxyZWFkeSBleGlzdGluZyBcImhhc2gtcGFyYW1ldGVyc1wiIHdpbGwgc3RheSB1bnRvdWNoZWQuXG4gICAqXG4gICAqIElmIGBvcHRfZXhlY3V0ZWAgaXMgYGZhbHNlYCBvciBgdW5kZWZpbmVkYCwgdGhlIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRoZSBuZXcgbGluayBhcyBgc3RyaW5nYCxcbiAgICogb3RoZXJ3aXNlIHRoZSBcImhyZWYvbG9jYXRpb25cIiB3aWxsIGJlIGNoYW5nZWQgZGlyZWN0bHkgaW4gdGhlIGJyb3dzZXIsIHdoaWNoIGNhbiBjYXVzZSBhIHBhZ2VyZWxvYWQuXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgICAgICAgIHBhcmFtICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAge3VuZGVmaW5lZHxib29sZWFufHN0cmluZ30gIG9wdF9nZXRLZXkgICBEZWZhdWx0OiBgdW5kZWZpbmVkYFxuICAgKiBAcGFyYW0gIHt1bmRlZmluZWR8Ym9vbGVhbn0gICAgICAgICBvcHRfZXhlY3V0ZSAgRGVmYXVsdDogYHVuZGVmaW5lZGBcbiAgICovXG4gIHNldFVybFBhcmFtOiBmdW5jdGlvbiAocGFyYW0sIG9wdF9nZXRLZXksIG9wdF9leGVjdXRlKSB7XG4gICAgdmFyIGxpbmssXG4gICAgICBzZWFyY2hQYXJhbSxcbiAgICAgIHBhcmFtUmVwbGFjZWQsXG4gICAgICBpO1xuXG4gICAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGluayA9IGxvY2F0aW9uLm9yaWdpbiArIGxvY2F0aW9uLnBhdGhuYW1lO1xuXG4gICAgaWYgKCFvcHRfZ2V0S2V5KSB7XG4gICAgICAvLyB1c2UgaGFzaC1wYXJhbWV0ZXJcbiAgICAgIGlmIChvcHRfZXhlY3V0ZSkge1xuICAgICAgICBsb2NhdGlvbi5oYXNoID0gcGFyYW07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbGluayArPSBsb2NhdGlvbi5zZWFyY2ggKyAnIycgKyBwYXJhbTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXNlIEdFVC1wYXJhbWV0ZXJcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgICAgLy8gdGhlcmUgYXJlIGFscmVhZHkgc2VhcmNoLXBhcmFtZXRlcnNcbiAgICAgICAgcGFyYW1SZXBsYWNlZCA9IGZhbHNlO1xuICAgICAgICBvcHRfZ2V0S2V5ID0gb3B0X2dldEtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAvLyByZXBsYWNlIHBhcmFtZXRlciBpZiBhbHJlYWR5IGV4aXN0ZW50XG4gICAgICAgIHNlYXJjaFBhcmFtID0gbG9jYXRpb24uc2VhcmNoLnJlcGxhY2UoXG4gICAgICAgICAgLyhbXj1cXD9cXCZdKyk9KFteJl0rKS9naSxcbiAgICAgICAgICBmdW5jdGlvbiAobWF0Y2gsIGtleSwgdmFsdWUsIG9mZnNldCwgb3JpZ2luU3RyaW5nKSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSBvcHRfZ2V0S2V5KSB7XG4gICAgICAgICAgICAgIHBhcmFtUmVwbGFjZWQgPSB0cnVlO1xuICAgICAgICAgICAgICByZXR1cm4ga2V5ICsgJz0nICsgcGFyYW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICAvLyBvdGhlcndpc2UgYXBwZW5kIGFzIG5ldyBwYXJhbWV0ZXJcbiAgICAgICAgaWYgKCFwYXJhbVJlcGxhY2VkKSB7XG4gICAgICAgICAgc2VhcmNoUGFyYW0gKz0gJyYnICsgb3B0X2dldEtleSArICc9JyArIHBhcmFtO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGlzIHdpbGwgYmUgdGhlIG9ubHkgc2VhcmNoLXBhcmFtZXRlciBpbiB0aGUgVVJMXG4gICAgICAgIHNlYXJjaFBhcmFtID0gJz8nICsgb3B0X2dldEtleSArICc9JyArIHBhcmFtO1xuICAgICAgfVxuICAgICAgaWYgKG9wdF9leGVjdXRlKSB7XG4gICAgICAgIGxvY2F0aW9uLnNlYXJjaCA9IHNlYXJjaFBhcmFtO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxpbmsgKz0gc2VhcmNoUGFyYW0gKyBsb2NhdGlvbi5oYXNoO1xuICAgIH1cblxuICAgIHJldHVybiBsaW5rO1xuICB9LCAvLyBlbmQgb2Ygc2V0VXJsUGFyYW0oKVxuXG4gIC8qKlxuICAgKiBHZXQgc2VhcmNoIG9yIGhhc2ggVVJMLXBhcmFtZXRlciBhcyBzdHJpbmcuXG4gICAqXG4gICAqIElmIGBvcHRfZ2V0S2V5YCBpcyBgZmFsc2VgIG9yIGB1bmRlZmluZWRgLCB0aGUgaGFzaC1wYXJhbWV0ZXIgb2YgdGhlIFVSTCBpcyByZXR1cm5lZCxcbiAgICogb3RoZXJ3aXNlIGl0IHdpbGwgc2VhcmNoIGZvciBhIEdFVC1wYXJhbWV0ZXIgYW5kIHJldHVybiBpdHMgdmFsdWUuXG4gICAqXG4gICAqIElmIGEgcGFyYW1ldGVyIGlzIG5vdCBleGlzdGVudCwgb3IgZW1wdHksIGFuIGVtcHR5IHN0cmluZyB3aWxsIGJlIHJldHVybmVkLlxuICAgKlxuICAgKiBAcGFyYW0gICB7dW5kZWZpbmVkfHN0cmluZ30gIG9wdF9nZXRLZXkgIERlZmF1bHQ6IGB1bmRlZmluZWRgXG4gICAqXG4gICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGZvdW5kIHBhcmFtZXRlci5cbiAgICovXG4gIGdldFVybFBhcmFtOiBmdW5jdGlvbiAob3B0X2dldEtleSkge1xuICAgIHZhciBwYXJhbSxcbiAgICAgIHJlZ0V4O1xuXG4gICAgaWYgKCFvcHRfZ2V0S2V5KSB7XG4gICAgICBwYXJhbSA9IGxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgICBwYXJhbSA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVnRXggPSBuZXcgUmVnRXhwKCdbXFw/XFwmXScgKyBvcHRfZ2V0S2V5ICsgJz0oW14mXSspJywgJ2knKTtcbiAgICAgICAgcGFyYW0gPSByZWdFeC5leGVjKGxvY2F0aW9uLnNlYXJjaCk7XG4gICAgICAgIHBhcmFtID0gcGFyYW0gPyBwYXJhbVsxXSA6ICcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYXJhbTtcbiAgfSwgLy8gZW5kIG9mIGdldFVybFBhcmFtKClcblxuICAvKipcbiAgICogRGVsdGEtZW5jb2RlIGFuIGFycmF5IG9mIG51bWJlcnMuXG4gICAqIE5vdGUgdGhhdCB0aGUgYXJyYXkgd2lsbCBiZSBzb3J0ZWQgKGxvd2VzdCB0byBoaWdoZXN0KVxuICAgKiBiZWZvcmUgZW5jb2RpbmcuXG4gICAqXG4gICAqIFNvIGFmdGVyIHRoZSBlbmNvZGluZyB0aGUgZmlyc3QgdmFsdWUgb2YgdGhlIG91dHB1dCBjb250YWluc1xuICAgKiB0aGUgc21hbGxlc3QgbnVtYmVyIG9mIHRoZSBzZXQgYW5kIGVhY2ggZm9sbG93aW5nIG51bWJlciBqdXN0XG4gICAqIHJlcHJlc2VudHMgdGhlIG9mZnNldCB0byBpdHMgcHJldmlvdXMgbmVpZ2hib3IuXG4gICAqXG4gICAqIFRoaXMgaXMgbW9zdGx5IGVmZmljaWVudCBmb3IgaGlnaCBudW1iZXJzLCB0aGF0IGFyZSBcImNsb3NlIHRvIGVhY2ggb3RoZXJcIi5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICogICBbMTMzNywgMTEsIDEwMSwgMTIzLCA5NiwgNjksIDQyLCA0Ml1cbiAgICogICB3aWxsIGJlIHNvcnRlZFxuICAgKiAgIFsxMSwgNDIsIDQyLCA2OSwgOTYsIDEwMSwgMTIzLCAxMzM3XVxuICAgKiAgIGFuZCBlbmNvZGVkIHRvXG4gICAqICAgWzExLCAzMSwgMCwgMjcsIDI3LCA1LCAyMiwgMTIxNF1cbiAgICpcbiAgICogQHBhcmFtICAge2FycmF5PG51bWJlcnM+fSAgYXJySW5wdXQgIFtkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQHJldHVybiAge2FycmF5PG51bWJlcnM+fSAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGRlbHRhRW5jb2RlOiBmdW5jdGlvbiAoYXJySW5wdXQpIHtcbiAgICB2YXIgYXJyT3V0cHV0LFxuICAgICAgaTtcblxuICAgIGlmICghYXJySW5wdXQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKGFycklucHV0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIGFycklucHV0O1xuICAgIH1cblxuICAgIGFycklucHV0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBKU0JJLnRvTnVtYmVyKEpTQkkuc3VidHJhY3QoSlNCSS5CaWdJbnQoYSksIEpTQkkuQmlnSW50KGIpKSk7XG4gICAgfSk7XG4gICAgYXJyT3V0cHV0ID0gW107XG4gICAgYXJyT3V0cHV0WzBdID0gYXJySW5wdXRbMF0udG9TdHJpbmcoKTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgYXJySW5wdXQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGFyck91dHB1dFtpXSA9IEpTQkkuc3VidHJhY3QoSlNCSS5CaWdJbnQoYXJySW5wdXRbaV0pLCBKU0JJLkJpZ0ludChhcnJJbnB1dFtpIC0gMV0pKS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJPdXRwdXQ7XG5cbiAgfSwgLy8gZW5kIG9mIGRlbHRhRW5jb2RlKClcblxuICAvKipcbiAgICogRGVjb2RlIGEgZGVsdGEtZW5jb2RlZCBhcnJheS5cbiAgICogU2VlIGBkZWx0YUVuY29kZWAgZnVuY3Rpb24gZm9yIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSAgIHthcnJheTxudW1iZXJzPn0gIGFycklucHV0ICBbZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEByZXR1cm4gIHthcnJheTxudW1iZXJzPn0gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBkZWx0YURlY29kZTogZnVuY3Rpb24gKGFycklucHV0KSB7XG4gICAgdmFyIGFyck91dHB1dDtcblxuICAgIGlmICghYXJySW5wdXQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKGFycklucHV0WzBdLmluZGV4T2YoXCJ7XCIpICE9PSAtMSkge1xuICAgICAgLy8gY2Fubm90IGRlbHRhIGRlY29kZSB1dWlkc1xuICAgICAgcmV0dXJuIGFycklucHV0O1xuICAgIH1cblxuICAgIGFyck91dHB1dCA9IFtdO1xuICAgIGFyck91dHB1dFswXSA9IEpTQkkuQmlnSW50KGFycklucHV0WzBdKTtcbiAgICAvLyBpZiAoaXNOYU4oYXJySW5wdXRbMF0pKSB7XG4gICAgLy8gICByZXR1cm4gW107XG4gICAgLy8gfVxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYXJySW5wdXQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGFyck91dHB1dFtpXSA9IEpTQkkuYWRkKEpTQkkuQmlnSW50KGFycklucHV0W2ldKSwgYXJyT3V0cHV0W2kgLSAxXSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDxhcnJPdXRwdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyck91dHB1dFtpXSA9IGFyck91dHB1dFtpXS50b1N0cmluZygpO1xuICAgIH1cblxuXG4gICAgcmV0dXJuIGFyck91dHB1dDtcblxuICB9LCAvLyBlbmQgb2YgZGVsdGFEZWNvZGUoKVxuXG4gIC8qKlxuICAgKiBDaGVjayBhbmQgY2FsbCBmdW5jdGlvbnMgaW4gYGFyckhvb2tGdW5jdGlvbnNgIHdpdGggZ2l2ZW4gYHBhcmFtZXRlcnNgLlxuICAgKlxuICAgKiBAcGFyYW0gICB7YXJyYXk8ZnVuY3Rpb24+fSAgIGFyckhvb2tGdW5jdGlvbnMgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICAge21peGVkfSAgICAgICAgICAgICBwYXJhbWV0ZXJzICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjYWxsSG9va0Z1bmN0aW9uczogZnVuY3Rpb24gKGFyckhvb2tGdW5jdGlvbnMsIHBhcmFtZXRlcnMpIHtcbiAgICB2YXIgaixcbiAgICAgICAgYXJyUmVzdWx0ID0gW107XG4gICAgaWYgKGFyckhvb2tGdW5jdGlvbnMgJiYgYXJySG9va0Z1bmN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgYXJySG9va0Z1bmN0aW9ucy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBpZiAodHlwZW9mIGFyckhvb2tGdW5jdGlvbnNbal0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBsZXQgdG1wUmVzdWx0ID0gYXJySG9va0Z1bmN0aW9uc1tqXShwYXJhbWV0ZXJzKTtcbiAgICAgICAgICBpZiAodG1wUmVzdWx0KSB7XG4gICAgICAgICAgICBhcnJSZXN1bHQucHVzaCh0bXBSZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyUmVzdWx0O1xuICB9LCAvLyBlbmQgb2YgXCJjYWxsSG9va0Z1bmN0aW9ucygpXCJcblxuICAvKipcbiAgICogQ29udmVydCBhIGhleC1mb3JtYXRlZCBjb2xvciB2YWx1ZSBpbnRvIHJnYmEoKS1mb3JtYXQuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd8bnVtYmVyfSAgaGV4ICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICAge3N0cmluZ3xudW1iZXJ9ICBvcHRfb3BhY2l0eSAgW2Rlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcmV0dXJuICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBnZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHk6IGZ1bmN0aW9uIChoZXgsIG9wdF9vcGFjaXR5LCBvcHRfYXJyYXkpIHtcblxuICAgIHZhciBiaWdpbnQsIHIsIGcsIGIsIGE7XG5cbiAgICBiaWdpbnQgPSBwYXJzZUludChoZXgsIDE2KTtcbiAgICBpZiAob3B0X29wYWNpdHkgJiYgb3B0X29wYWNpdHkudmFsdWUpIHtcbiAgICAgIG9wdF9vcGFjaXR5LnZhbHVlID0gcGFyc2VJbnQob3B0X29wYWNpdHkudmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChvcHRfb3BhY2l0eSAmJiB0eXBlb2Ygb3B0X29wYWNpdHkgIT09ICdudW1iZXInKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdF9vcGFjaXR5ID09PSAnb2JqZWN0JyAmJiBvcHRfb3BhY2l0eS52YWx1ZSkge1xuICAgICAgICBvcHRfb3BhY2l0eSA9IG9wdF9vcGFjaXR5LnZhbHVlO1xuICAgICAgfSBlbHNlIGlmICghb3B0X29wYWNpdHkpIHtcbiAgICAgICAgb3B0X29wYWNpdHkgPSAxMDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgciA9IChiaWdpbnQgPj4gMTYpICYgMjU1O1xuICAgIGcgPSAoYmlnaW50ID4+IDgpICYgMjU1O1xuICAgIGIgPSBiaWdpbnQgJiAyNTU7XG4gICAgYSA9IG9wdF9vcGFjaXR5ID8gKG9wdF9vcGFjaXR5IC8gMTAwKSA6IDE7XG4gICAgaWYob3B0X2FycmF5KXtcbiAgICAgIHJldHVybiBbcixnLGIsYV07XG4gICAgfVxuXG4gICAgcmV0dXJuIFwicmdiYShcIiArIHIgKyBcIixcIiArIGcgKyBcIixcIiArIGIgKyBcIixcIiArIGEgKyBcIilcIjtcbiAgfSxcblxuICBnZXRTaW5nbGVDb29yZGluYXRlRm9yR2VvbSAoZ2VvbWV0cnkpIHtcbiAgICBsZXQgY29vcmRpbmF0ZSxcbiAgICB4LFxuICAgIHk7XG4gICAgbGV0IHR5cGUgPSBnZW9tZXRyeS5nZXRUeXBlKCk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiUG9pbnRcIjpcbiAgICAgICAgY29vcmRpbmF0ZSA9IGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkxpbmVTdHJpbmdcIjpcbiAgICAgIGNhc2UgXCJMaW5lYXJSaW5nXCI6XG4gICAgICAgIHggPSAoZ2VvbWV0cnkuZ2V0Rmlyc3RDb29yZGluYXRlKClbMF0gKyBnZW9tZXRyeS5nZXRMYXN0Q29vcmRpbmF0ZSgpWzBdKSAvIDI7XG4gICAgICAgIHkgPSAoZ2VvbWV0cnkuZ2V0Rmlyc3RDb29yZGluYXRlKClbMV0gKyBnZW9tZXRyeS5nZXRMYXN0Q29vcmRpbmF0ZSgpWzFdKSAvIDI7XG4gICAgICAgIGNvb3JkaW5hdGUgPSBbeCwgeV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlBvbHlnb25cIjpcbiAgICAgIGNhc2UgXCJNdWx0aVBvaW50XCI6XG4gICAgICAgIGxldCBjb29yZGluYXRlcyA9IGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB4ICs9IGNvb3JkaW5hdGVzW2ldWzBdO1xuICAgICAgICAgIHkgKz0gY29vcmRpbmF0ZXNbaV1bMV07XG4gICAgICAgIH1cbiAgICAgICAgY29vcmRpbmF0ZSA9IFt4L2ksIHkvaV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29vcmRpbmF0ZSA9IFswLDBdO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGNvb3JkaW5hdGU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1lYXN1cmUgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGdpdmVuIGdlb21ldHJ5LlxuICAgKlxuICAgKiBJZiB0aGUgZ2VvbWV0cnkgaXMgYSBgTGluZVN0cmluZ2AgdGhlIGZ1bmN0aW9uIHdpbGwgbWVhc3VyZSBpdHMgbGVuZ3RoLFxuICAgKiBpcyBpdCBhIGBQb2x5Z29uYCBpdCB3aWxsIG1lYXN1cmUgdGhlIGFjcmVhZ2UsXG4gICAqIG90aGVyd2lzZSBpdCB3aWxsIHJldHVybiBgMGAuXG4gICAqXG4gICAqIElmIHRoZSBvcHRpb25hbCBgb3B0X2ZvcmNlTGluZU1lYXN1cmVgIHBhcmFtZXRlciBpcyBgdHJ1ZWBcbiAgICogYW5kIHRoZSBnZW9tZXRyeSBpcyBhIGBQb2x5Z29uYCBpdCB3aWxsIG1lYXN1cmUgaXRzIHBlcmltZXRlciBpbnN0ZWFkXG4gICAqIG9mIGl0cyBhY3JlYWdlLlxuICAgKlxuICAgKiBAcGFyYW0gICB7b2wuZ2VvbS5MaW5lU3RyaW5nfG9sLmdlb20uUG9seWdvbn0gICBnZW9tZXRyeSAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gICB7dW5kZWZpbmVkfGJvb2xlYW59ICAgICAgICAgICAgICAgICAgICBvcHRfZm9yY2VMaW5lTWVhc3VyZSAgW2Rlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcmV0dXJuICB7YXJyYXk8c3RyaW5nPnxudW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgbWVhc3VyZUdlb21ldHJ5OiBmdW5jdGlvbiAoZ2VvbWV0cnksIG9wdF9mb3JjZUxpbmVNZWFzdXJlLCBvcHRfZm9yY2VTdXJmYWNlTWVhc3VyZSkge1xuICAgIHZhciB2YWx1ZSxcbiAgICAgIHNwaGVyZSxcbiAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgY29vcmQxLFxuICAgICAgY29vcmQyLFxuICAgICAgcmVzdWx0LFxuICAgICAgaTtcblxuICAgIGlmICghZ2VvbWV0cnkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvL3NwaGVyZSA9IG5ldyBvbC5TcGhlcmUoNjM3ODEzNyk7XG4gICAgcmVzdWx0ID0ge307XG4gICAgaWYgKGdlb21ldHJ5LmdldFR5cGUoKSA9PT0gJ0xpbmVTdHJpbmcnIHx8IChnZW9tZXRyeS5nZXRUeXBlKCkgPT09ICdQb2x5Z29uJyAmJiBvcHRfZm9yY2VMaW5lTWVhc3VyZSkpIHtcblxuICAgICAgY29vcmRpbmF0ZXMgPSBnZW9tZXRyeS5nZXRDb29yZGluYXRlcygpO1xuICAgICAgaWYgKGdlb21ldHJ5LmdldFR5cGUoKSA9PT0gJ1BvbHlnb24nKSB7XG4gICAgICAgIGNvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXNbMF07XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IDA7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY29vcmRpbmF0ZXMubGVuZ3RoIC0gMTsgaSArPSAxKSB7XG4gICAgICAgIGNvb3JkMSA9IHRyYW5zZm9ybShjb29yZGluYXRlc1tpXSwgJ0VQU0c6Mzg1NycsICdFUFNHOjQzMjYnKTtcbiAgICAgICAgY29vcmQyID0gdHJhbnNmb3JtKGNvb3JkaW5hdGVzW2kgKyAxXSwgJ0VQU0c6Mzg1NycsICdFUFNHOjQzMjYnKTtcbiAgICAgICAgdmFsdWUgKz0gZ2V0RGlzdGFuY2UoY29vcmQxLCBjb29yZDIsIDYzNzgxMzcpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnJhd1ZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgaWYgKHZhbHVlID4gMTAwMCkge1xuICAgICAgICByZXN1bHQuaHRtbFZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgLyAxMDAwICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKSArXG4gICAgICAgICAgJyAnICsgJ2ttJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSByZXN1bHQucmF3VmFsdWUgK1xuICAgICAgICAgICcgJyArICdtJztcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkuZ2V0VHlwZSgpID09PSAnUG9seWdvbicpIHtcbiAgICAgIC8vZ2VvbWV0cnkgPSAvKiogQHR5cGUge1BvbHlnb259ICovKGdlb21ldHJ5LmNsb25lKCkudHJhbnNmb3JtKCdFUFNHOjM4NTcnLCAnRVBTRzo0MzI2JykpO1xuICAgICAgLy9jb29yZGluYXRlcyA9IGdlb21ldHJ5LmdldExpbmVhclJpbmcoMCkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgIHZhbHVlID0gTWF0aC5hYnMoZ2V0QXJlYShnZW9tZXRyeSkpO1xuICAgICAgcmVzdWx0LnJhd1ZhbHVlID0gKE1hdGgucm91bmQodmFsdWUgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgaWYgKHZhbHVlID4gMTAwMDApIHtcbiAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlIC8gMTAwMDAwMCAqIDEwMCkgLyAxMDApLnRvRml4ZWQoMikgK1xuICAgICAgICAgICcgJyArICdrbTxzdXA+Mjwvc3VwPic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQuaHRtbFZhbHVlID0gcmVzdWx0LnJhd1ZhbHVlICtcbiAgICAgICAgICAnICcgKyAnbTxzdXA+Mjwvc3VwPic7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKGdlb21ldHJ5LmdldFR5cGUoKSA9PT0gJ0NpcmNsZScgJiYgb3B0X2ZvcmNlU3VyZmFjZU1lYXN1cmUpIHtcbiAgICAgIHZhciBjZW50ZXIgPSBnZW9tZXRyeS5nZXRDZW50ZXIoKTtcbiAgICAgIHZhciByYWRpdXMgPSBnZW9tZXRyeS5nZXRSYWRpdXMoKTtcbiAgICAgIHZhciBlZGdlQ29vcmRpbmF0ZSA9IFtjZW50ZXJbMF0gKyByYWRpdXMsIGNlbnRlclsxXV07XG4gICAgICAvL3ZhciB3Z3M4NFNwaGVyZSA9IG5ldyBvbC5TcGhlcmUoNjM3ODEzNyk7XG4gICAgICB2YXIgdmFsdWUgPSBnZXREaXN0YW5jZShcbiAgICAgICAgdHJhbnNmb3JtKGNlbnRlciwgJ0VQU0c6Mzg1NycsICdFUFNHOjQzMjYnKSxcbiAgICAgICAgdHJhbnNmb3JtKGVkZ2VDb29yZGluYXRlLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpLFxuICAgICAgICA2Mzc4MTM3XG4gICAgICApO1xuXG4gICAgICB2YWx1ZSA9IE1hdGguUEkgKiBNYXRoLnBvdyh2YWx1ZSwgMik7XG5cbiAgICAgIHJlc3VsdC5yYXdWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgIGlmICh2YWx1ZSA+IDEwMDAwKSB7XG4gICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSAoTWF0aC5yb3VuZCh2YWx1ZSAvIDEwMDAwMDAgKiAxMDApIC8gMTAwKS50b0ZpeGVkKDIpICtcbiAgICAgICAgICAnICcgKyAna208c3VwPjI8L3N1cD4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IHJlc3VsdC5yYXdWYWx1ZSArXG4gICAgICAgICAgJyAnICsgJ208c3VwPjI8L3N1cD4nO1xuICAgICAgfVxuXG5cbiAgICB9IGVsc2UgaWYgKGdlb21ldHJ5LmdldFR5cGUoKSA9PT0gJ0NpcmNsZScpIHtcbiAgICAgIHZhciBjZW50ZXIgPSBnZW9tZXRyeS5nZXRDZW50ZXIoKTtcbiAgICAgIHZhciByYWRpdXMgPSBnZW9tZXRyeS5nZXRSYWRpdXMoKTtcbiAgICAgIHZhciBlZGdlQ29vcmRpbmF0ZSA9IFtjZW50ZXJbMF0gKyByYWRpdXMsIGNlbnRlclsxXV07XG4gICAgICAvL3ZhciB3Z3M4NFNwaGVyZSA9IG5ldyBvbC5TcGhlcmUoNjM3ODEzNyk7XG4gICAgICB2YXIgdmFsdWUgPSBnZXREaXN0YW5jZShcbiAgICAgICAgdHJhbnNmb3JtKGNlbnRlciwgJ0VQU0c6Mzg1NycsICdFUFNHOjQzMjYnKSxcbiAgICAgICAgdHJhbnNmb3JtKGVkZ2VDb29yZGluYXRlLCAnRVBTRzozODU3JywgJ0VQU0c6NDMyNicpLFxuICAgICAgICA2Mzc4MTM3XG4gICAgICApO1xuXG4gICAgICByZXN1bHQucmF3VmFsdWUgPSAoTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMCkgLyAxMDApLnRvRml4ZWQoMik7XG4gICAgICBpZiAocmVzdWx0LnJhd1ZhbHVlID4gMTAwMDApIHtcbiAgICAgICAgcmVzdWx0Lmh0bWxWYWx1ZSA9IChNYXRoLnJvdW5kKCh2YWx1ZSAqIDEwMCkgLyAxMDApIC8gMTAwMCkudG9GaXhlZCgyKSArXG4gICAgICAgICAgJyAnICsgJ2ttJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5odG1sVmFsdWUgPSByZXN1bHQucmF3VmFsdWUgK1xuICAgICAgICAgICcgJyArICdtJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGV4dGVudCBmb3IgYW4gYXJyYXkgb2YgZ2VvbWV0cmllcy5cbiAgICpcbiAgICogQHBhcmFtICAge0FycmF5LjxvbC5nZW9tLnNpbXBsZUdlb21ldHJ5Pn0gIGFyckdlb21ldHJpZXMgIFtkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQHJldHVybiAge29sLkV4dGVudH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGdldEV4dGVudEZvckdlb21ldHJpZXM6IGZ1bmN0aW9uIChhcnJHZW9tZXRyaWVzKSB7XG4gICAgdmFyIGV4dGVudFNvdXJjZTtcblxuICAgIGlmICghYXJyR2VvbWV0cmllcykge1xuICAgICAgY29uc29sZS53YXJuKCdHZW9tZXRyaWVzIG1pc3NpbmcgZm9yIGV4dGVudCBjYWxjdWxhdGlvbicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGV4dGVudFNvdXJjZSA9IG5ldyBWZWN0b3JTb3VyY2UoKTtcbiAgICBleHRlbnRTb3VyY2UuYWRkRmVhdHVyZXMoYXJyR2VvbWV0cmllcyk7XG5cbiAgICByZXR1cm4gZXh0ZW50U291cmNlLmdldEV4dGVudCgpIHx8IEV4dGVudChbMCwgMCwgMCwgMF0pO1xuICB9LCAvLyBlbmQgb2YgZ2V0RXh0ZW50Rm9yR2VvbWV0cmllcygpXG5cbiAgLyoqXG4gICAqIEZpdCB2aWV3IG9mIGBtYXBgIHRvIGEgZ2l2ZW4gYXJyYXkgb2YgYGV4dGVudHNgLlxuICAgKiBBbmltYXRlZCBpZiBgb3B0X2FuaW1hdGlvbkR1cmF0aW9uYCBpcyBhbiBpbnRlZ2VyID4gMC5cbiAgICpcbiAgICogQHBhcmFtICAge29iamVjdH0gICAgIGV4dGVudHMgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICAge29sLk1hcH0gICAgIG1hcCAgICAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gICB7aW50ZWdlcn0gICAgb3B0X2FuaW1hdGlvbkR1cmF0aW9uICBbZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEByZXR1cm4gIHtib29sZWFufSAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGZpdFRvRXh0ZW50czogZnVuY3Rpb24gKGV4dGVudHMsIG1hcCwgb3B0X3BhZGRpbmcsIG9wdF9hbmltYXRpb25EdXJhdGlvbikge1xuICAgIHZhciB2aWV3LFxuICAgICAgcGFkZGluZyxcbiAgICAgIGV4dGVudCxcbiAgICAgIGtleTtcblxuICAgIGlmICghZXh0ZW50cyB8fCAhbWFwKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ01pc3NpbmcgZXh0ZW50IG9yIG1hcCBmb3IgZml0RXh0ZW50Jyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vZXh0ZW50ID0gb2wuZXh0ZW50LmNyZWF0ZUVtcHR5KCk7XG5cbiAgICBmb3IgKGtleSBpbiBleHRlbnRzKSB7XG4gICAgICBpZiAoZXh0ZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZXh0ZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgZXh0ZW50ID0gZXh0ZW50c1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4dGVuZChleHRlbnQsIGV4dGVudHNba2V5XSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZml0VG9FeHRlbnQoZXh0ZW50LCBtYXAsIG9wdF9wYWRkaW5nLCA1LCAwLCAwLCAyKTtcblxuXG4gIH0sIC8vIGVuZCBvZiBmaXRUb0V4dGVudHNcblxuICAvKipcbiAgICogRml0IHZpZXcgb2YgYG1hcGAgdG8gYSBnaXZlbiBgZXh0ZW50YC5cbiAgICogQW5pbWF0ZWQgaWYgYG9wdF9hbmltYXRpb25EdXJhdGlvbmAgaXMgYW4gaW50ZWdlciA+IDAuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtvbC5FeHRlbnR9ICBleHRlbnQgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICAge29sLk1hcH0gICAgIG1hcCAgICAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gICB7YXJyYXl9ICAgICAgb3B0X3BhZGRpbmcgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgIHtpbnRlZ2VyfSAgICBvcHRfYW5pbWF0aW9uRHVyYXRpb24gIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICAge2ludGVnZXJ9ICAgIG9wdF9taW5ab29tICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gICB7aW50ZWdlcn0gICAgb3B0X21heFpvb20gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgIHtpbnRlZ2VyfSAgICBvcHRfbWluUmVzb2x1dGlvbiAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQHJldHVybiAge2Jvb2xlYW59ICAgICAgICAgICAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZml0VG9FeHRlbnQ6IGZ1bmN0aW9uIChleHRlbnQsIG1hcCwgb3B0X3BhZGRpbmcsIG9wdF9hbmltYXRpb25EdXJhdGlvbiwgb3B0X21pblpvb20sIG9wdF9tYXhab29tLCBvcHRfbWluUmVzb2x1dGlvbikge1xuICAgIHZhciB2aWV3LFxuICAgICAgcGFkZGluZyxcbiAgICAgIGZpdE9wdGlvbnM7XG5cbiAgICBpZiAoIWV4dGVudCB8fCAhbWFwKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ01pc3NpbmcgZXh0ZW50IG9yIG1hcCBmb3IgZml0RXh0ZW50Jyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmlldyA9IG1hcC5nZXRWaWV3KCk7XG5cbiAgICBmaXRPcHRpb25zID0ge1xuICAgICAgJ3BhZGRpbmcnOiBvcHRfcGFkZGluZyB8fCBbMjUsIDI1LCAyNSwgMjVdXG4gICAgfTtcblxuICAgIGlmIChvcHRfbWluUmVzb2x1dGlvbiAmJiBvcHRfbWluUmVzb2x1dGlvbiA+IDApIHtcbiAgICAgIGZpdE9wdGlvbnMubWluUmVzb2x1dGlvbiA9IG9wdF9taW5SZXNvbHV0aW9uO1xuICAgIH1cblxuICAgIGlmIChvcHRfbWluWm9vbSAmJiBvcHRfbWluWm9vbSA+PSAwKSB7XG4gICAgICBmaXRPcHRpb25zLm1pblpvb20gPSBvcHRfbWluWm9vbTtcbiAgICB9XG5cbiAgICBpZiAob3B0X21heFpvb20gJiYgb3B0X21heFpvb20gPj0gMCkge1xuICAgICAgZml0T3B0aW9ucy5tYXhab29tID0gb3B0X21heFpvb207XG4gICAgfVxuXG4gICAgLy8gYW5pbWF0ZSB0aGUgXCJmaXR0aW5nXCIgd2hlbiBhIGR1cmF0aW9uIGlzIGdpdmVuIGFuZCBpdHMgZ3JlYXRlciB0aGFuIDBcbiAgICBpZiAob3B0X2FuaW1hdGlvbkR1cmF0aW9uICYmIG9wdF9hbmltYXRpb25EdXJhdGlvbiA+IDApIHtcbiAgICAgIHZpZXcuYW5pbWF0ZSh7XG4gICAgICAgIHN0YXJ0OiArbmV3IERhdGUoKSxcbiAgICAgICAgZHVyYXRpb246IG9wdF9hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgcmVzb2x1dGlvbjogdmlldy5nZXRSZXNvbHV0aW9uKCksXG4gICAgICAgIGNlbnRlcjogWzAsIDBdXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdmlldy5maXQoZXh0ZW50LCBtYXAuZ2V0U2l6ZSgpLCB7cGFkZGluZzogWzI1LCAyNSwgMjUsIDI1XX0pO1xuICAgICAgLy92aWV3LmZpdChleHRlbnQsIG1hcC5nZXRTaXplKCkpO1xuICAgICAgLy92aWV3LnNldFpvb20odmlldy5nZXRab29tKCktMSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCAvLyBlbmQgb2YgZml0VG9FeHRlbnQoKVxuXG4gIC8qKlxuICAgKiBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byBydW4gYWxsIHBsYWNlaG9sZGVyIGZ1bmN0aW9ucyBhdCBvbmNlLlxuICAgKlxuICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICBzdHJJbnB1dCAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICAge29sLkZlYXR1cmV9ICAgICAgICAgICAgICAgICAgZmVhdHVyZSAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgIHtvbC5sYXllci5MYXllciB8IHVuZGVmaW5lZH0gIG9wdF9sYXllciAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSAgIFtkZXNjcmlwdGlvbl1cbiAgICpcbiAgICogQHJldHVybiAge3N0cmluZ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICByZXBsYWNlQWxsUGxhY2Vob2xkZXJzOiBmdW5jdGlvbiAoc3RySW5wdXQsIGZlYXR1cmUsIG9wdF9sYXllciwgbGFuZ3VhZ2UpIHtcbiAgICB2YXIgc3RyT3V0cHV0O1xuXG4gICAgLy8gb25seSBjaGVjayB0aGUgZmlyc3QgdHdvIHBhcmFtZXRlcnMgYXMgdGhleSB3aWxsIGJlIHVzZWQgYnkgYWxsIHBsYWNlaG9sZGVyLWZ1bmN0aW9uc1xuICAgIC8vIC0+IGZvciBwZXJmb3JtYW5jZVxuICAgIGlmICghc3RySW5wdXQgfHwgIWZlYXR1cmUpIHtcbiAgICAgIHJldHVybiBzdHJJbnB1dDtcbiAgICB9XG5cbiAgICBzdHJPdXRwdXQgPSB0aGlzLnJlcGxhY2VGdW5jdGlvblBsYWNlaG9sZGVycyhzdHJJbnB1dCwgZmVhdHVyZSwgb3B0X2xheWVyLCBsYW5ndWFnZSk7XG4gICAgc3RyT3V0cHV0ID0gdGhpcy5yZXBsYWNlRWRpdG9yVmFyc1BsYWNlaG9sZGVycyhzdHJPdXRwdXQsIGZlYXR1cmUpO1xuICAgIHN0ck91dHB1dCA9IHRoaXMucmVwbGFjZUF0dHJpYnV0ZVBsYWNlaG9sZGVycyhzdHJPdXRwdXQsIGZlYXR1cmUpO1xuXG4gICAgcmV0dXJuIHN0ck91dHB1dDtcbiAgfSwgLy8gZW5kIG9mIHJlcGxhY2VBbGxQbGFjZWhvbGRlcnMoKVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlIGV2ZXJ5IG9jY3VyYW5jZSBvZiBgJHtGTmZ1bmN0aW9uTmFtZX1gLCBpbiBgc3RySW5wdXRgLFxuICAgKiB3aXRoIHRoZSByZXN1bHQgb2YgYHdpbmRvdy5mdW5jdGlvbk5hbWUoZmVhdHVyZSwgc3R5bGUpYCwgaWYgaXQgZXhpc3QuXG4gICAqIE90aGVyd2lzZSB0aGUgcGxhY2Vob2xkZXIgd2lsbCBiZSBzaW1wbHkgcmVtb3ZlZCAoL3JlcGxhY2VkIHdpdGggJycpLlxuICAgKiBTdHlsZSB3aWxsIGJlIHRha2VuIGVpdGhlciBmcm9tIHRoZSBmZWF0dXJlLCBvciB0aGUgbGF5ZXIuXG4gICAqXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgIHN0cklucHV0ICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgIHtvbC5GZWF0dXJlfSAgICAgIGZlYXR1cmUgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgIHtvbC5sYXllci5MYXllcn0gIGxheWVyICAgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgICAgICAgIGxhbmd1YWdlICBbZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAqL1xuICByZXBsYWNlRnVuY3Rpb25QbGFjZWhvbGRlcnM6IGZ1bmN0aW9uIChzdHJJbnB1dCwgZmVhdHVyZSwgbGF5ZXIsIGxhbmd1YWdlLCBwcm94eSA9IGZhbHNlKSB7XG4gICAgdmFyIHN0ck91dHB1dDtcblxuICAgIGlmICghc3RySW5wdXQgfHwgIWZlYXR1cmUgfHwgIWxheWVyKSB7XG4gICAgICByZXR1cm4gc3RySW5wdXQ7XG4gICAgfVxuICAgIHBvcHVwRnVuY3Rpb25zID0gbGFuZ3VhZ2UgPT09ICdkZScgfHwgbGFuZ3VhZ2UgPT09ICdkZS1ERScgPyBwb3B1cEZ1bmN0aW9uc0RFIDogcG9wdXBGdW5jdGlvbnNFTjtcblxuICAgIHN0ck91dHB1dCA9IHN0cklucHV0LnJlcGxhY2UoXG4gICAgICAvXFwkXFx7Rk4oW15cXH1dKilcXH0vZyxcbiAgICAgIGZ1bmN0aW9uIChtYXRjaCwgZnVuY3Rpb25OYW1lLCBvZmZzZXQsIG9yaWdpblN0cmluZykge1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIGZ1bmN0aW9uIGV4aXN0c1xuICAgICAgICBpZiAodHlwZW9mIHBvcHVwRnVuY3Rpb25zW2Z1bmN0aW9uTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAgIC8vIHNlYXJjaCBzdHlsZVxuICAgICAgICAgIGxldCBzdHlsZVNyYyA9IFwiXCI7XG4gICAgICAgICAgaWYgKHByb3h5ICYmIGZlYXR1cmUuZ2V0KCdsb2NzdHlsZScpKSB7XG4gICAgICAgICAgICBsZXQgbG9jc3R5bGVBcnIgPSBwcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbZmVhdHVyZS5nZXQoJ2xvY3N0eWxlJyldLmxvY1N0eWxlQXJyO1xuICAgICAgICAgICAgc3R5bGVTcmMgPSBsb2NzdHlsZUFyci5pY29uX3NyYyA/IGxvY3N0eWxlQXJyLmljb25fc3JjIDogbG9jc3R5bGVBcnIuc3ZnU3JjID8gbG9jc3R5bGVBcnIuc3ZnU3JjIDogXCJcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHBvcHVwRnVuY3Rpb25zW2Z1bmN0aW9uTmFtZV0oZmVhdHVyZSwgc3R5bGVTcmMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICApOyAvLyBlbmQgb2YgcmVwbGFjZSgpXG5cbiAgICByZXR1cm4gc3RyT3V0cHV0O1xuICB9LCAvLyBlbmQgb2YgcmVwbGFjZUZ1bmN0aW9uUGxhY2Vob2xkZXJzKClcblxuICAvKipcbiAgICogUmVwbGFjZSBwbGFjZWhvbGRlcnMsIGluIGBzdHJJbnB1dGAsIGZvciB2YXJpYWJsZXMgc2V0IGJ5IHRoZSBnZW9FZGl0b3IuXG4gICAqIFZhbGlkIHBsYWNlaG9sZGVycyBhcmU6IChba2V5XSByZXByZXNlbnRzIHRoZSBzdHJpbmduYW1lIG9mIHRoZSB2YXJpYWJsZXMga2V5KVxuICAgKiAgIGAke0VMW2tleV19YCAgID0+ICBMYWJlbCBmb3IgdGhlIHZhcmlhYmxlXG4gICAqICAgYCR7RVZMW2tleV19YCAgPT4gIExhYmVsIGZvciB0aGUgdmFyaWFibGUsIGlmIGEgdmFsdWUgaXMgc2V0IHRvb1xuICAgKiAgIGAke0VWW2tleV19YCAgID0+ICBWYWx1ZSBvZiB0aGUgdmFyaWFibGVcbiAgICogICBgJHtFVlZba2V5XX1gICA9PiAgU2FtZSBhcyBgJHtFVltrZXldfWBcbiAgICpcbiAgICogSWYgbm8gYXBwcm9wcmlhdGUgdmFsdWUgY2FuIGJlIGZvdW5kIGZvciBhIHBsYWNlaG9sZGVyXG4gICAqIGl0IHdpbGwgc2ltcGx5IGJlIHJlbW92ZWQgKC9yZXBsYWNlZCB3aXRoICcnKS5cbiAgICpcbiAgICogQHBhcmFtICAge3N0cmluZ30gICAgICBzdHJJbnB1dCAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gICB7b2wuRmVhdHVyZX0gIGZlYXR1cmUgICBbZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHJlcGxhY2VFZGl0b3JWYXJzUGxhY2Vob2xkZXJzOiBmdW5jdGlvbiAoc3RySW5wdXQsIGZlYXR1cmUpIHtcbiAgICB2YXIgc3RyT3V0cHV0O1xuXG4gICAgaWYgKCFzdHJJbnB1dCB8fCAhZmVhdHVyZSB8fCB0eXBlb2YgZmVhdHVyZS5nZXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBzdHJJbnB1dDtcbiAgICB9XG5cbiAgICBzdHJPdXRwdXQgPSBzdHJJbnB1dC5yZXBsYWNlKFxuICAgICAgL1xcJFxceyhFVj9bTFZdKShbXlxcfV0qKVxcfS9nLFxuICAgICAgZnVuY3Rpb24gKG1hdGNoLCB0eXBlLCBldktleSwgb2Zmc2V0LCBvcmlnaW5TdHJpbmcpIHtcbiAgICAgICAgdmFyIGVkaXRvclZhcnMsXG4gICAgICAgICAgaTtcblxuICAgICAgICAvLyBjaGVjayBpZiBmZWF0dXJlIGhhcyBlZGl0b3JWYXJzXG4gICAgICAgIGlmIChmZWF0dXJlLmdldCgnZWRpdG9yVmFycycpKSB7XG4gICAgICAgICAgZWRpdG9yVmFycyA9IGZlYXR1cmUuZ2V0KCdlZGl0b3JWYXJzJyk7XG4gICAgICAgICAgLy8gc2VhcmNoIGZvciBlZGl0b3JWYXIgd2l0aCBrZXkgPT0gZXZLZXlcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWRpdG9yVmFycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGVkaXRvclZhcnNbaV0ua2V5ID09PSBldktleSkge1xuICAgICAgICAgICAgICAvLyBpZiB0eXBlIGlzICdFVkwnIGRpc3BsYXkgbGFiZWwgb25seSBpZiBhIHZhbHVlIGlzIHNldCB0b29cbiAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdFTCcgfHwgKHR5cGUgPT09ICdFVkwnICYmIGVkaXRvclZhcnNbaV0udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVkaXRvclZhcnNbaV0ubGFiZWw7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVkaXRvclZhcnNbaV0udmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICk7IC8vIGVuZCBvZiByZXBsYWNlKClcblxuICAgIHJldHVybiBzdHJPdXRwdXQ7XG4gIH0sIC8vIGVuZCBvZiByZXBsYWNlRWRpdG9yVmFyc1BsYWNlaG9sZGVycygpXG5cbiAgLyoqXG4gICAqIFJlcGxhY2UgZXZlcnkgb2NjdXJhbmNlIG9mIGAke2F0dHJ9YCwgaW4gYHN0cklucHV0YCxcbiAgICogd2l0aCB0aGUgcmVzdWx0IG9mIGBmZWF0dXJlLmdldChhdHRyKWAsIGlmIGl0IGV4aXN0LlxuICAgKiBPdGhlcndpc2UgdGhlIHBsYWNlaG9sZGVyIHdpbGwgYmUgc2ltcGx5IHJlbW92ZWQgKC9yZXBsYWNlZCB3aXRoICcnKS5cbiAgICpcbiAgICogQHBhcmFtICAge3N0cmluZ30gICAgICBzdHJJbnB1dCAgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gICB7b2wuRmVhdHVyZX0gIGZlYXR1cmUgICBbZGVzY3JpcHRpb25dXG4gICAqXG4gICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHJlcGxhY2VBdHRyaWJ1dGVQbGFjZWhvbGRlcnM6IGZ1bmN0aW9uIChzdHJJbnB1dCwgZmVhdHVyZSkge1xuICAgIHZhciBzdHJPdXRwdXQ7XG5cbiAgICBpZiAoIXN0cklucHV0IHx8ICFmZWF0dXJlIHx8IHR5cGVvZiBmZWF0dXJlLmdldCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHN0cklucHV0O1xuICAgIH1cblxuICAgIHN0ck91dHB1dCA9IHN0cklucHV0LnJlcGxhY2UoXG4gICAgICAvXFwkXFx7KFteXFx9XSopXFx9L2csXG4gICAgICBmdW5jdGlvbiAobWF0Y2gsIGF0dHIsIG9mZnNldCwgb3JpZ2luU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBmZWF0dXJlLmdldChhdHRyKSB8fCAnJztcbiAgICAgIH1cbiAgICApOyAvLyBlbmQgb2YgcmVwbGFjZSgpXG5cbiAgICByZXR1cm4gc3RyT3V0cHV0O1xuICB9LCAvLyBlbmQgb2YgcmVwbGFjZUF0dHJpYnV0ZVBsYWNlaG9sZGVycygpXG5cbiAgb2JqZWN0VG9BcnJheTogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdC5rZXlzKG9iamVjdCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0sIC8vIGVuZCBvZiBvYmplY3RUb0FycmF5KClcblxuICBnZXRWZWN0b3JMYXllcihzb3VyY2UsIHN0eWxlLCB6SW5kZXgpIHtcbiAgICB2YXIgZm5TdHlsZTtcblxuICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHRoZSBzdHlsZSBpcyBhIGZ1bmN0aW9uXG4gICAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZm5TdHlsZSA9IHN0eWxlO1xuICAgIH0gZWxzZSBpZiAoc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZm5TdHlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFZlY3Rvcih7XG4gICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgIHN0eWxlOiBmblN0eWxlLFxuICAgICAgekluZGV4OiB6SW5kZXhcbiAgICB9KTtcbiAgfSwvLyBlbmQgb2YgXCJnZXRWZWN0b3JMYXllcigpXCJcblxuICAvKipcbiAgICogRXh0cmFjdHMgdGhlIHN1YmRvbWFpbiBmcm9tIHRoZSBjdXJyZW50IHJlcXVlc3QgaG9zdCBhbmQgcmV0dXJucyBpdC5cbiAgICogQHJldHVybnMge3N0cmluZyB8ICp9XG4gICAqL1xuICBnZXRDdXJyZW50U3ViZG9tYWluKCkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBkb21haW4gKHdpdGhvdXQgdGhlIHN1YmRvbWFpbilcbiAgICovXG4gIGdldEN1cnJlbnREb21haW4oKSB7XG4gICAgbGV0IGRvbWFpbiA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgICBsZXQgYXJyRG9tYWluID0gZG9tYWluLnNwbGl0KCcuJyk7XG4gICAgaWYgKGFyckRvbWFpbi5sZW5ndGggPiAyKSB7XG4gICAgICAvLyB0aGVyZSBpcyBhIHN1YmRvbWFpblxuICAgICAgcmV0dXJuIGFyckRvbWFpblthcnJEb21haW4ubGVuZ3RoIC0gMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhcnJEb21haW5bMF07XG4gICAgfVxuICB9LFxuXG4gIGdldFZhbHVlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZVtrZXldIHx8ICcnO1xuICB9LFxuICBzdG9yZVZhbHVlOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGxvY2FsU3RvcmFnZVtrZXldID0gdmFsdWU7IC8vIG9ubHkgc3RyaW5nc1xuICB9LFxuICBkZWNvZGVIVE1MIChodG1sKSB7XG4gICAgbGV0IHR4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdHh0LmlubmVySFRNTCA9IGh0bWw7XG4gICAgcmV0dXJuIHR4dC52YWx1ZTtcbiAgfVxufTsiLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cblxuaW1wb3J0IHtjb25maWd9IGZyb20gXCIuL2M0Zy1tYXBzLWNvbmZpZ1wiO1xuaW1wb3J0IHtPU00sIFN0YW1lbiwgVGlsZVdNUywgWFlafSBmcm9tIFwib2wvc291cmNlXCI7XG5pbXBvcnQge0ltYWdlLCBUaWxlfSBmcm9tIFwib2wvbGF5ZXJcIjtcbmltcG9ydCBvbF9zb3VyY2VfR2VvSW1hZ2UgZnJvbSBcIm9sLWV4dC9zb3VyY2UvR2VvSW1hZ2VcIjtcblxuLy9jb3B5IGxpbmsgdG8gYWRkIG5vb3BlbmVyXG5leHBvcnQgY29uc3QgT1NNX1JFTF9BVFRSSUJVVElPTiA9ICcmIzE2OTsgJyArXG4gICAgJzxhIGhyZWY9XCJodHRwczovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9jb3B5cmlnaHRcIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiPk9wZW5TdHJlZXRNYXA8L2E+ICcgK1xuICAgICdjb250cmlidXRvcnMuJztcblxuZXhwb3J0IGNsYXNzIEM0Z092ZXJsYXlDb250cm9sbGVyIHtcblxuICBjb25zdHJ1Y3RvcihiYXNlbGF5ZXIpIHtcbiAgICB0aGlzLmJhc2VsYXllciA9IGJhc2VsYXllcjtcbiAgICB0aGlzLmFyck92ZXJsYXlzID0gW107XG4gIH1cblxuICBzaG93T3ZlcmxheUxheWVyKG92ZXJsYXlJZCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIG92ZXJsYXlMYXllckNvbmZpZyxcbiAgICAgIG9zbVNvdXJjZUNvbmZpZ3MgPSBjb25maWcub3NtLFxuICAgICAgc3RhbWVuU291cmNlQ29uZmlncyA9IGNvbmZpZy5zdGFtZW4sXG4gICAgICBsYXllck9wdGlvbnMsXG4gICAgICBvdmVybGF5TGF5ZXIsXG4gICAgICBub1VybDtcblxuICAgIGxheWVyT3B0aW9ucyA9IHt9O1xuICAgIG92ZXJsYXlMYXllciA9IG5ldyBUaWxlKHtcbiAgICAgIHNvdXJjZTogbmV3IE9TTSgpXG4gICAgfSk7XG5cbiAgICBvdmVybGF5TGF5ZXJDb25maWcgPSB0aGlzLmFyck92ZXJsYXlzW292ZXJsYXlJZF07XG5cbiAgICBsZXQgaXNTZWN1cmUgPSB3aW5kb3cuaXNTZWN1cmVDb250ZXh0O1xuICAgIGlmIChpc1NlY3VyZSkge1xuICAgICAgbGF5ZXJPcHRpb25zLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XG4gICAgfVxuXG4gICAgc3dpdGNoIChvdmVybGF5TGF5ZXJDb25maWcucHJvdmlkZXIpIHtcbiAgICAgIGNhc2UgJ29zbSc6XG4gICAgICAgIGlmIChvc21Tb3VyY2VDb25maWdzW292ZXJsYXlMYXllckNvbmZpZy5zdHlsZV0pIHtcbiAgICAgICAgICBvdmVybGF5TGF5ZXIgPSBuZXcgVGlsZSh7XG4gICAgICAgICAgICBzb3VyY2U6IG5ldyBPU00oXG4gICAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoXG4gICAgICAgICAgICAgICAgb3NtU291cmNlQ29uZmlnc1tvdmVybGF5TGF5ZXJDb25maWcuc3R5bGVdLFxuICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uc1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhbWVuU291cmNlQ29uZmlnc1tvdmVybGF5TGF5ZXJDb25maWcuc3R5bGVdKSB7XG4gICAgICAgICAgLy8gU3RhbWVuXG4gICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IFRpbGUoe1xuICAgICAgICAgICAgc291cmNlOiBuZXcgU3RhbWVuKFxuICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKFxuICAgICAgICAgICAgICAgIHN0YW1lblNvdXJjZUNvbmZpZ3Nbb3ZlcmxheUxheWVyQ29uZmlnLnN0eWxlXSxcbiAgICAgICAgICAgICAgICBsYXllck9wdGlvbnNcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKG92ZXJsYXlMYXllckNvbmZpZy5zdHlsZSA9PT0gJ29zbV9jdXN0b20nKSB7XG4gICAgICAgICAgLy8gY3VzdG9tXG4gICAgICAgICAgbm9VcmwgPSB0cnVlO1xuICAgICAgICAgIGlmIChvdmVybGF5TGF5ZXJDb25maWcuYXR0cmlidXRpb24pIHtcbiAgICAgICAgICAgIGxheWVyT3B0aW9ucy5hdHRyaWJ1dGlvbnMgPSBvdmVybGF5TGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBPU01fUkVMX0FUVFJJQlVUSU9OO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvdmVybGF5TGF5ZXJDb25maWcudXJsKSB7XG4gICAgICAgICAgICBsYXllck9wdGlvbnMudXJsID0gb3ZlcmxheUxheWVyQ29uZmlnLnVybDtcbiAgICAgICAgICAgIG5vVXJsID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmIChvdmVybGF5TGF5ZXJDb25maWcudXJscyAmJiBvdmVybGF5TGF5ZXJDb25maWcudXJscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsYXllck9wdGlvbnMudXJscyA9IG92ZXJsYXlMYXllckNvbmZpZy51cmxzO1xuICAgICAgICAgICAgbm9VcmwgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFub1VybCkge1xuICAgICAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IFRpbGUoe1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBYWVoobGF5ZXJPcHRpb25zKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignY3VzdG9tIHVybChzKSBtaXNzaW5nIC0+IHN3aXRjaCB0byBkZWZhdWx0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybigndW5zdXBwb3J0ZWQgb3NtLXN0eWxlIC0+IHN3aXRjaCB0byBkZWZhdWx0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWEnOlxuICAgICAgICAvLyBjdXN0b21cbiAgICAgICAgICBub1VybCA9IHRydWU7XG4gICAgICAgICAgaWYgKG92ZXJsYXlMYXllckNvbmZpZy5hdHRyaWJ1dGlvbikge1xuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmF0dHJpYnV0aW9ucyA9IG92ZXJsYXlMYXllckNvbmZpZy5hdHRyaWJ1dGlvbiArICcgJyArIE9TTV9SRUxfQVRUUklCVVRJT047XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvdmVybGF5TGF5ZXJDb25maWcudXJscykge1xuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLnVybHMgPSBvdmVybGF5TGF5ZXJDb25maWcudXJscztcbiAgICAgICAgICAgIG5vVXJsID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghbm9VcmwpIHtcbiAgICAgICAgICAgIG92ZXJsYXlMYXllciA9IG5ldyBUaWxlKHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgWFlaKGxheWVyT3B0aW9ucylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd3bXMnOlxuICAgICAgICBvdmVybGF5TGF5ZXIgPSBuZXcgVGlsZSh7XG4gICAgICAgICAgc291cmNlOiBuZXcgVGlsZVdNUyh7XG4gICAgICAgICAgICB1cmw6IG92ZXJsYXlMYXllckNvbmZpZy51cmwsXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgTEFZRVJTOiBvdmVybGF5TGF5ZXJDb25maWcucGFyYW1zLmxheWVycyxcbiAgICAgICAgICAgICAgVkVSU0lPTjogb3ZlcmxheUxheWVyQ29uZmlnLnBhcmFtcy52ZXJzaW9uLFxuICAgICAgICAgICAgICAvL0ZPUk1BVDogb3ZlcmxheUxheWVyQ29uZmlnLnBhcmFtcy5mb3JtYXQsXG4gICAgICAgICAgICAgIFRSQU5TUEFSRU5UOiBvdmVybGF5TGF5ZXJDb25maWcucGFyYW1zLnRyYW5zcGFyZW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ3V0dGVyOiBvdmVybGF5TGF5ZXJDb25maWcuZ3V0dGVyLFxuICAgICAgICAgICAgYXR0cmlidXRpb25zOiBvdmVybGF5TGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBPU01fUkVMX0FUVFJJQlVUSU9OXG4gICAgICAgICAgfSksXG4gICAgICAgICAgLy9leHRlbnQ6IG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KFs1LjU5MzM0LCA1MC4wNTc4LCA5Ljc0MTU4LCA1Mi43OTk4XSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdvd20nOlxuICAgICAgICBvdmVybGF5TGF5ZXIgPSBuZXcgVGlsZSh7XG4gICAgICAgICAgc291cmNlOiBuZXcgWFlaKHtcbiAgICAgICAgICAgIHVybDogb3ZlcmxheUxheWVyQ29uZmlnLnVybCArIG92ZXJsYXlMYXllckNvbmZpZy5hcHBfaWQgKyAnL3t6fS97eH0ve3l9P2hhc2g9JyArIG92ZXJsYXlMYXllckNvbmZpZy5hcGlfa2V5LFxuICAgICAgICAgICAgYXR0cmlidXRpb25zOiBvdmVybGF5TGF5ZXJDb25maWcuYXR0cmlidXRpb24gKyAnICcgKyBPU01fUkVMX0FUVFJJQlVUSU9OXG4gICAgICAgICAgfSksXG4gICAgICAgICAgLy9leHRlbnQ6IG9sLnByb2oudHJhbnNmb3JtRXh0ZW50KFs1LjU5MzM0LCA1MC4wNTc4LCA5Ljc0MTU4LCA1Mi43OTk4XSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdnZW9pbWFnZSc6XG4gICAgICAgIGxldCBvYmpTb3VyY2UgPSBKU09OLnBhcnNlKG92ZXJsYXlMYXllckNvbmZpZy5nZW9JbWFnZUpzb24pO1xuICAgICAgICBvYmpTb3VyY2UudXJsID0gb3ZlcmxheUxheWVyQ29uZmlnLmltYWdlU3JjID8gb3ZlcmxheUxheWVyQ29uZmlnLmltYWdlU3JjIDogb2JqU291cmNlLnVybDtcbiAgICAgICAgb2JqU291cmNlLmF0dHJpYnV0aW9ucyA9IG92ZXJsYXlMYXllckNvbmZpZy5hdHRyaWJ1dGlvbjtcbiAgICAgICAgb3ZlcmxheUxheWVyID0gbmV3IEltYWdlKHtcbiAgICAgICAgICBzb3VyY2U6IG5ldyBvbF9zb3VyY2VfR2VvSW1hZ2UoXG4gICAgICAgICAgICBvYmpTb3VyY2VcbiAgICAgICAgICApXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnNvbGUud2FybigndW5zdXBwb3J0ZWQgcHJvdmlkZXInKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuYXJyT3ZlcmxheXNbb3ZlcmxheUlkXS5sYXllciA9IG92ZXJsYXlMYXllcjtcbiAgICAvLyB0aGlzLmFyck92ZXJsYXlzW292ZXJsYXlJZF0uY2hhbmdlT3BhY2l0eShwYXJzZUludChvdmVybGF5TGF5ZXJDb25maWcub3BhY2l0eSkvMTAwKTtcbiAgICB0aGlzLmFyck92ZXJsYXlzW292ZXJsYXlJZF0uY2hhbmdlT3BhY2l0eShvdmVybGF5TGF5ZXJDb25maWcub3BhY2l0eSk7XG4gICAgcmV0dXJuIHRoaXMuYXJyT3ZlcmxheXNbb3ZlcmxheUlkXS5sYXllclxuICB9XG59IiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG5leHBvcnQgY2xhc3MgQzRnT3ZlcmxheSB7XG5cbiAgY29uc3RydWN0b3Iob3ZlcmxheUFyciwgbWFwQ29udHJvbGxlcikge1xuICAgIHRoaXMuaWQgICAgICAgICAgICA9IG92ZXJsYXlBcnJbJ2lkJ107XG4gICAgdGhpcy5waWQgICAgICAgICAgID0gb3ZlcmxheUFyclsncGlkJ107XG4gICAgdGhpcy5uYW1lICAgICAgICAgID0gb3ZlcmxheUFyclsnbmFtZSddO1xuICAgIHRoaXMucHJvdmlkZXIgICAgICA9IG92ZXJsYXlBcnJbJ3Byb3ZpZGVyJ107XG4gICAgdGhpcy5zdHlsZSAgICAgICAgID0gb3ZlcmxheUFyclsnc3R5bGUnXTtcbiAgICB0aGlzLnVybCAgICAgICAgICAgPSBvdmVybGF5QXJyWyd1cmwnXTtcbiAgICB0aGlzLnVybHMgICAgICAgICAgPSBvdmVybGF5QXJyWyd1cmxzJ107XG4gICAgdGhpcy5vcGFjaXR5ICAgICAgID0gb3ZlcmxheUFyclsnb3BhY2l0eSddO1xuICAgIHRoaXMuYXR0cmlidXRpb24gICA9IG92ZXJsYXlBcnJbJ2F0dHJpYnV0aW9uJ107XG4gICAgdGhpcy5ndXR0ZXIgICAgICAgID0gb3ZlcmxheUFyclsnZ3V0dGVyJ107XG4gICAgdGhpcy5wYXJhbXMgICAgICAgID0gb3ZlcmxheUFyclsncGFyYW1zJ107XG4gICAgdGhpcy5pbWFnZVNyYyAgICAgID0gb3ZlcmxheUFyclsnaW1hZ2Vfc3JjJ107XG4gICAgdGhpcy5nZW9JbWFnZUpzb24gID0gb3ZlcmxheUFyclsnZ2VvaW1hZ2VfanNvbiddO1xuICAgIHRoaXMubGF5ZXIgICAgICAgICA9IGZhbHNlO1xuICAgIHRoaXMub3ZlcmxheUFyciAgICA9IG92ZXJsYXlBcnI7XG4gICAgdGhpcy5tYXBDb250cm9sbGVyICAgID0gbWFwQ29udHJvbGxlclxuICB9XG5cbiAgY2hhbmdlT3BhY2l0eSh2YWx1ZSkge1xuICAgIHZhciBsYXllcjtcblxuICAgIGxheWVyID0gdGhpcy5sYXllcjtcbiAgICBpZiAobGF5ZXIpIHtcbiAgICAgIHRoaXMubWFwQ29udHJvbGxlci5tYXAucmVtb3ZlTGF5ZXIobGF5ZXIpO1xuICAgICAgbGF5ZXIuc2V0T3BhY2l0eSh2YWx1ZS8xMDApO1xuICAgICAgdGhpcy5tYXBDb250cm9sbGVyLm1hcC5hZGRMYXllcihsYXllcik7XG4gICAgfVxuICB9XG59IiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG5cbi8qKlxuICogQ29udmVydHMgYSBkaXN0YW5jZSBpbiBtZXRlcnMgdG8gYSBtb3JlIHJlYWRhYmxlIGZvcm1hdC5cbiAqIEBwYXJhbSBkaXN0YW5jZUluTWV0ZXJzICBUaGUgZGlzdGFuY2UgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0h1bWFuRGlzdGFuY2UoZGlzdGFuY2VJbk1ldGVycykge1xuXG4gIHZhciBkaXN0YW5jZSxcbiAgICBodW1hbkRpc3RhbmNlO1xuXG4gIGRpc3RhbmNlID0gcGFyc2VJbnQoZGlzdGFuY2VJbk1ldGVycywgMTApO1xuICBkaXN0YW5jZSA9IGRpc3RhbmNlIC8gMTAwMDtcblxuICBpZiAoZGlzdGFuY2UgPj0gMTAwKSB7XG4gICAgaHVtYW5EaXN0YW5jZSA9IGRpc3RhbmNlLnRvRml4ZWQoMCkgKyBcIiBcIiArICdrbSc7XG4gIH0gZWxzZSBpZiAoZGlzdGFuY2UgPj0gMTApIHtcbiAgICBodW1hbkRpc3RhbmNlID0gZGlzdGFuY2UudG9GaXhlZCgxKSArIFwiIFwiICsgJ2ttJztcbiAgfSBlbHNlIGlmIChkaXN0YW5jZSA+PSAwLjEpIHtcbiAgICBodW1hbkRpc3RhbmNlID0gZGlzdGFuY2UudG9GaXhlZCgyKSArIFwiIFwiICsgJ2ttJztcbiAgfSBlbHNlIHtcbiAgICBodW1hbkRpc3RhbmNlID0gKGRpc3RhbmNlICogMTAwMCkudG9GaXhlZCgwKSArIFwiIFwiICsgJ20nO1xuICB9XG5cbiAgcmV0dXJuIGh1bWFuRGlzdGFuY2U7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSB0aW1lIGluIHNlY29uZHMgdG8gYSBtb3JlIHJlYWRhYmxlIGZvcm1hdC5cbiAqIEBwYXJhbSB0aW1lSW5TZWNvbmRzICAgICBUaGUgdGltZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSHVtYW5UaW1lKHRpbWVJblNlY29uZHMpIHtcblxuICB2YXIgc2Vjb25kcyxcbiAgICBtaW51dGVzLFxuICAgIGhvdXJzLFxuICAgIGh1bWFuVGltZTtcblxuICBzZWNvbmRzID0gcGFyc2VJbnQodGltZUluU2Vjb25kcywgMTApO1xuICBtaW51dGVzID0gcGFyc2VJbnQoc2Vjb25kcyAvIDYwLCAxMCk7XG4gIHNlY29uZHMgPSBzZWNvbmRzICUgNjA7XG5cbiAgaG91cnMgPSBwYXJzZUludChtaW51dGVzIC8gNjAsIDEwKTtcbiAgbWludXRlcyA9IG1pbnV0ZXMgJSA2MDtcblxuICBpZiAoaG91cnMgPT09IDAgJiYgbWludXRlcyA9PT0gMCkge1xuICAgIGh1bWFuVGltZSA9IHNlY29uZHMgKyBcIiBcIiArICdzJztcbiAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgIGh1bWFuVGltZSA9IG1pbnV0ZXMgKyBcIiBcIiArICdtaW4nO1xuICB9IGVsc2Uge1xuICAgIGh1bWFuVGltZSA9IGhvdXJzICsgXCIgXCIgKyAnaCcgKyBcIiBcIiArIG1pbnV0ZXMgKyBcIiBcIiArICdtaW4nO1xuICB9XG5cbiAgcmV0dXJuIGh1bWFuVGltZTtcbn0iLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cblxuZXhwb3J0IGNsYXNzIFJvdXRpbmdQZXJtYWxpbmsge1xuXG4gIF9yb3V0ZXI7XG5cbiAgY29uc3RydWN0b3Iocm91dGVyKSB7XG4gICAgdGhpcy5fcm91dGVyID0gcm91dGVyO1xuICAgIHRoaXMubGlua0ZyYWdtZW50cyA9IHt9O1xuICAgIHRoaXMucmF3RnJhZ21lbnRzID0ge307XG4gIH1cblxuICBnZXQgcm91dGVyKCkge1xuICAgIHJldHVybiB0aGlzLl9yb3V0ZXI7XG4gIH1cblxuICBzZXQgcm91dGVyKHZhbHVlKSB7XG4gICAgdGhpcy5fcm91dGVyID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBvbmUga2V5IG9mIHRoaXMubGlua0ZyYWdtZW50cyB0byB0aGUgZ2l2ZW4gdmFsdWUuXG4gICAqIEBwYXJhbSBrZXlcbiAgICogQHBhcmFtIHZhbHVlXG4gICAqL1xuICB1cGRhdGVMaW5rRnJhZ21lbnRzKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIXRoaXMubGlua0ZyYWdtZW50cykge1xuICAgICAgdGhpcy5saW5rRnJhZ21lbnRzID0ge307XG4gICAgfVxuICAgIHRoaXMubGlua0ZyYWdtZW50c1trZXldID0gdmFsdWU7XG4gICAgdGhpcy51cGRhdGVVcmwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgdmFsdWVzIGluIHRoaXMubGlua0ZyYWdtZW50cyBhbmQgdXBkYXRlcyB0aGUgYnJvd3NlciBVUkwuXG4gICAqL1xuICB1cGRhdGVVcmwoKSB7XG4gICAgbGV0IHVybCA9IFwiP21hcHNQYXJhbXM9XCI7XG4gICAgY29uc3QgZnJhZ21lbnRzID0gdGhpcy5saW5rRnJhZ21lbnRzO1xuICAgIGlmIChmcmFnbWVudHMubW9kZSAmJiBmcmFnbWVudHMubW9kZSA9PT0gXCJhcmVhXCIpIHtcbiAgICAgIHVybCArPSBmcmFnbWVudHMubW9kZSA/IFwibTpcIiArIGZyYWdtZW50cy5tb2RlICsgXCIvXCIgOiBcIlwiO1xuICAgICAgdXJsICs9IGZyYWdtZW50cy5hZGRyZXNzQXJlYSA/IFwiYTpcIiArIGZyYWdtZW50cy5hZGRyZXNzQXJlYVswXSArIFwiLFwiICsgZnJhZ21lbnRzLmFkZHJlc3NBcmVhWzFdICsgXCIvXCIgOiBcIlwiO1xuICAgICAgdXJsICs9IGZyYWdtZW50cy5kZXRvdXJBcmVhID8gXCJkOlwiICsgZnJhZ21lbnRzLmRldG91ckFyZWEgKyBcIi9cIiA6IFwiXCI7XG4gICAgICB1cmwgKz0gZnJhZ21lbnRzLnNlYXJjaFR5cGUgPyBcInM6XCIgKyBmcmFnbWVudHMuc2VhcmNoVHlwZSArIFwiL1wiIDogXCJcIjtcbiAgICAgIHVybCArPSBmcmFnbWVudHMuZm9yY2VTdGFydCA/IFwiZjpcIiArIGZyYWdtZW50cy5mb3JjZVN0YXJ0IDogXCJcIjtcbiAgICAgIGxldCBjb21wbGV0ZVVybCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHVybDtcbiAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LCBudWxsLCBjb21wbGV0ZVVybCk7XG4gICAgfSBlbHNlIGlmIChmcmFnbWVudHMubW9kZSAmJiBmcmFnbWVudHMubW9kZSA9PT0gXCJyb3V0ZVwiKSB7XG4gICAgICB1cmwgKz0gZnJhZ21lbnRzLm1vZGUgPyBcIm06XCIgKyBmcmFnbWVudHMubW9kZSArIFwiL1wiIDogXCJcIjtcbiAgICAgIHVybCArPSBmcmFnbWVudHMuZnJvbUFkZHJlc3MgPyBcImFmOlwiICsgZnJhZ21lbnRzLmZyb21BZGRyZXNzWzBdICsgXCIsXCIgKyBmcmFnbWVudHMuZnJvbUFkZHJlc3NbMV0gKyBcIi9cIiA6IFwiXCI7XG4gICAgICB1cmwgKz0gZnJhZ21lbnRzLnRvQWRkcmVzcyA/IFwiYXQ6XCIgKyBmcmFnbWVudHMudG9BZGRyZXNzWzBdICsgXCIsXCIgKyBmcmFnbWVudHMudG9BZGRyZXNzWzFdICsgXCIvXCIgOiBcIlwiO1xuICAgICAgdXJsICs9IGZyYWdtZW50cy5kZXRvdXJSb3V0ZSA/IFwiZDpcIiArIGZyYWdtZW50cy5kZXRvdXJSb3V0ZSArIFwiL1wiIDogXCJcIjtcbiAgICAgIHVybCArPSBmcmFnbWVudHMuc2VhcmNoVHlwZSA/IFwiczpcIiArIGZyYWdtZW50cy5zZWFyY2hUeXBlICsgXCIvXCIgOiBcIlwiO1xuICAgICAgdXJsICs9IGZyYWdtZW50cy5mb3JjZVN0YXJ0ID8gXCJmOlwiICsgZnJhZ21lbnRzLmZvcmNlU3RhcnQgOiBcIlwiO1xuICAgICAgbGV0IGNvbXBsZXRlVXJsID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgdXJsO1xuICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoe30sIG51bGwsIGNvbXBsZXRlVXJsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZXJlIGFyZSBHRVQgcGFyYW1zIGxvYWRlZCBpbnRvIHRoZSBtYXBEYXRhIGFuZCB0cmlnZ2VycyB0aGUgc2VhcmNoIGFjY29yZGluZ2x5LlxuICAgKiBUaGUgZmlyc3QgcGFyYW0gaXMgZXhwZWN0ZWQgdG8gYmUgZWl0aGVyIFwicm91dGVcIiBvciBcImFyZWFcIiB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBzZWFyY2guXG4gICAqIEFmdGVyIHRoYXQsIHRoZSBuZXh0IHBhcmFtIChvciB0aGUgbmV4dCB0d28sIGluIGNhc2Ugb2YgXCJyb3V0ZVwiKSBzaG91bGQgYmUgYW4gYWRkcmVzcyBzdHJpbmcuXG4gICAqIFRoZSBmb2xsb3dpbmcgcGFyYW1ldGVycyBhcmUgZGV0b3VyL3NlYXJjaHR5cGUvZm9yY2VTdGFydC5cbiAgICovXG4gIGFzeW5jIGhhbmRsZUluaXRpYWxQYXJhbXMoKSB7XG4gICAgdGhpcy5yYXdGcmFnbWVudHMgPSB0aGlzLnJvdXRlci5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEuaW5pdGlhbFBhcmFtcztcbiAgICBjb25zdCBzY29wZSA9IHRoaXM7XG4gICAgaWYgKHRoaXMucmF3RnJhZ21lbnRzKSB7XG4gICAgICBhd2FpdCB0aGlzLmNoZWNrRm9yT2xkUGFyYW1zKCk7XG4gICAgICBjb25zdCBhcnJQYXJhbXMgPSB0aGlzLnJhd0ZyYWdtZW50cy5zcGxpdChcIi9cIikubWFwKHBhaXIgPT4gcGFpci5zcGxpdChcIjpcIikpO1xuICAgICAgY29uc3Qgb2JqUGFyYW1zID0ge307XG4gICAgICBhcnJQYXJhbXMuZm9yRWFjaCgoW2tleSx2YWx1ZV0pID0+IG9ialBhcmFtc1trZXldID0gdmFsdWUpO1xuICAgICAgbGV0IHJvdXRlckxheWVycyA9IHRoaXMucm91dGVyLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJMYXllcnM7XG4gICAgICBsZXQgZGVzaXJlZEJ1dHRvbiA9IFwiXCI7XG4gICAgICBpdGVyYXRpb25MYWJlbDpcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHJvdXRlckxheWVycykge1xuICAgICAgICAgIGlmIChyb3V0ZXJMYXllcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgbGV0IG9iaiA9IHJvdXRlckxheWVyc1trZXldO1xuICAgICAgICAgICAgZm9yIChsZXQgaW5uZXJLZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaW5uZXJLZXkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNpbmdsZUVudHJ5ID0gb2JqW2lubmVyS2V5XTtcbiAgICAgICAgICAgICAgICBsZXQgY21wVmFsdWUgPSBvYmpQYXJhbXMucztcbiAgICAgICAgICAgICAgICBpZiAoc2luZ2xlRW50cnkubWFwTGFiZWwgPT09IGNtcFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICBkZXNpcmVkQnV0dG9uID0gaW5uZXJLZXk7XG4gICAgICAgICAgICAgICAgICBicmVhayBpdGVyYXRpb25MYWJlbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIC8vIGl0ZXJhdGUgYnV0dG9ucyBsYXRlciBvbiB3aGVuIHRoZSBVSSBpcyBidWlsdFxuICAgICAgdGhpcy5kZXNpcmVkQnV0dG9uUm91dGluZyA9IGRlc2lyZWRCdXR0b247XG4gICAgICBpZiAob2JqUGFyYW1zLm0gPT09IFwiYXJlYVwiKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlSW5pdGlhbEFyZWFTZWFyY2gob2JqUGFyYW1zKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqUGFyYW1zLm0gPT09IFwicm91dGVcIikge1xuICAgICAgICB0aGlzLmhhbmRsZUluaXRpYWxSb3V0ZVNlYXJjaChvYmpQYXJhbXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIFVSTCBmb3IgdGhlIGRlcHJlY2F0ZWQgVVJMIHN0cnVjdHVyZSBhbmQgY29udmVydHMgaXQgdG8gdGhlIGN1cnJlbnQgc3RydWN0dXJlLlxuICAgKi9cbiAgYXN5bmMgY2hlY2tGb3JPbGRQYXJhbXMoKSB7XG4gICAgbGV0IHN0clBhcmFtcyA9IFwiXCI7XG4gICAgbGV0IHBhcmFtcyA9IHRoaXMucm91dGVyLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5pbml0aWFsUGFyYW1zO1xuICAgIGlmIChwYXJhbXMuaW5kZXhPZihcIm06XCIpICE9PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgYXJyRnJhZ21lbnRzID0gcGFyYW1zLnNwbGl0KFwiL1wiKTtcbiAgICBzdHJQYXJhbXMgKz0gXCJtOlwiICsgYXJyRnJhZ21lbnRzWzBdICsgXCIvXCI7XG4gICAgaWYgKGFyckZyYWdtZW50c1swXSA9PT0gXCJyb3V0ZVwiKSB7XG4gICAgICBsZXQgZnJvbUNvb3JkcyA9IGF3YWl0IHRoaXMucm91dGVyLnBlcmZvcm1HZW9TZWFyY2goYXJyRnJhZ21lbnRzWzFdKTtcbiAgICAgIGxldCB0b0Nvb3JkcyA9IGF3YWl0IHRoaXMucm91dGVyLnBlcmZvcm1HZW9TZWFyY2goYXJyRnJhZ21lbnRzWzJdKTtcbiAgICAgIHN0clBhcmFtcyArPSBcImFmOlwiICsgZnJvbUNvb3Jkcy5qb2luKCkgKyBcIi9cIjtcbiAgICAgIHN0clBhcmFtcyArPSBcImF0OlwiICsgdG9Db29yZHMuam9pbigpICsgXCIvXCI7XG4gICAgICBzdHJQYXJhbXMgKz0gXCJkOlwiICsgYXJyRnJhZ21lbnRzWzNdICsgXCIvXCI7XG4gICAgICBzdHJQYXJhbXMgKz0gXCJzOlwiICsgYXJyRnJhZ21lbnRzWzRdICsgXCIvXCI7XG4gICAgICBzdHJQYXJhbXMgKz0gXCJmOlwiICsgYXJyRnJhZ21lbnRzWzVdICsgXCIvXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBjb29yZHMgPSBhd2FpdCB0aGlzLnJvdXRlci5wZXJmb3JtR2VvU2VhcmNoKGFyckZyYWdtZW50c1sxXSk7XG4gICAgICBzdHJQYXJhbXMgKz0gXCJhOlwiICsgY29vcmRzLmpvaW4oKSArIFwiL1wiO1xuICAgICAgc3RyUGFyYW1zICs9IFwiZDpcIiArIGFyckZyYWdtZW50c1syXSArIFwiL1wiO1xuICAgICAgc3RyUGFyYW1zICs9IFwiczpcIiArIGFyckZyYWdtZW50c1szXSArIFwiL1wiO1xuICAgICAgc3RyUGFyYW1zICs9IFwiZjpcIiArIGFyckZyYWdtZW50c1s0XSArIFwiL1wiO1xuICAgIH1cbiAgICB0aGlzLnJhd0ZyYWdtZW50cyA9IHN0clBhcmFtcztcbiAgfVxuXG4gIGhhbmRsZUluaXRpYWxBcmVhU2VhcmNoKG9ialBhcmFtcykge1xuICAgIHRoaXMucm91dGVyLnNldFN0YXRlKHttb2RlOiBcImFyZWFcIn0pO1xuICAgIGxldCBjZW50ZXIgPSBvYmpQYXJhbXMuYTtcbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICBjZW50ZXIgPSBjZW50ZXIuc3BsaXQoXCIsXCIpO1xuICAgIH1cbiAgICBsZXQgZGV0b3VyID0gb2JqUGFyYW1zLmQ7XG4gICAgbGV0IHNlYXJjaHR5cGUgPSBvYmpQYXJhbXMucztcbiAgICBsZXQgZm9yY2VTdGFydCA9IG9ialBhcmFtcy5mO1xuICAgIGlmIChkZXRvdXIgfHwgZGV0b3VyID4gMSkge1xuICAgICAgdGhpcy51cGRhdGVMaW5rRnJhZ21lbnRzKFwiZGV0b3VyXCIsIGRldG91cik7XG4gICAgICAvLyBqUXVlcnkodGhpcy50b2dnbGVEZXRvdXJBcmVhKS52YWwoZGV0b3VyKTtcbiAgICAgIC8vIGpRdWVyeSh0aGlzLnRvZ2dsZURldG91ckFyZWEpLnRyaWdnZXIoJ2lucHV0Jyk7XG4gICAgfVxuICAgIGlmIChjZW50ZXIgJiYgY2VudGVyLmxlbmd0aCA9PT0gMikge1xuICAgICAgdGhpcy51cGRhdGVMaW5rRnJhZ21lbnRzKFwiYWRkcmVzc0FyZWFcIiwgY2VudGVyKTtcbiAgICAgIHRoaXMucm91dGVyLnNldEFyZWFQb2ludChjZW50ZXIpO1xuICAgIH1cbiAgICBpZiAoc2VhcmNodHlwZSkge1xuICAgICAgdGhpcy51cGRhdGVMaW5rRnJhZ21lbnRzKFwic2VhcmNoVHlwZVwiLCBzZWFyY2h0eXBlKTtcbiAgICB9XG4gICAgaWYgKGZvcmNlU3RhcnQpIHtcbiAgICAgIHRoaXMudXBkYXRlTGlua0ZyYWdtZW50cyhcImZvcmNlU3RhcnRcIiwgZm9yY2VTdGFydCk7XG4gICAgfVxuICAgIC8vIGFjdGl2YXRlIGFyZWEgdmlld1xuICAgIGpRdWVyeShcIi5jNGctcG9ydHNpZGUtdmlld3RyaWdnZXJiYXIgLmM0Zy1hcmVhLXNlYXJjaFwiKS5jbGljaygpO1xuICB9XG5cbiAgaGFuZGxlSW5pdGlhbFJvdXRlU2VhcmNoKG9ialBhcmFtcykge1xuICAgIHRoaXMucm91dGVyLnNldFN0YXRlKHttb2RlOiBcInJvdXRlXCJ9KTtcblxuICAgIGxldCBmcm9tQWRkcmVzcyA9IG9ialBhcmFtcy5hZiA/IG9ialBhcmFtcy5hZi5zcGxpdChcIixcIikubWFwKGVsZW0gPT4gcGFyc2VGbG9hdChlbGVtKSkgOiBudWxsO1xuICAgIGxldCB0b0FkZHJlc3MgPSBvYmpQYXJhbXMuYXQgPyBvYmpQYXJhbXMuYXQuc3BsaXQoXCIsXCIpLm1hcChlbGVtID0+IHBhcnNlRmxvYXQoZWxlbSkpIDogbnVsbDtcbiAgICBsZXQgZGV0b3VyID0gb2JqUGFyYW1zLmQ7XG4gICAgbGV0IHNlYXJjaHR5cGUgPSBvYmpQYXJhbXMucztcbiAgICBsZXQgZm9yY2VTdGFydCA9IG9ialBhcmFtcy5mO1xuICAgIGlmIChkZXRvdXIpIHtcbiAgICAgIGpRdWVyeSh0aGlzLnJvdXRlci50b2dnbGVEZXRvdXJSb3V0ZSkudmFsKGRldG91cik7XG4gICAgICBqUXVlcnkodGhpcy5yb3V0ZXIudG9nZ2xlRGV0b3VyUm91dGUpLnRyaWdnZXIoJ2lucHV0Jyk7XG4gICAgICB0aGlzLnVwZGF0ZUxpbmtGcmFnbWVudHMoXCJkZXRvdXJcIiwgb2JqUGFyYW1zLmQpO1xuICAgIH1cbiAgICBpZiAoZnJvbUFkZHJlc3MpIHtcbiAgICAgIHRoaXMudXBkYXRlTGlua0ZyYWdtZW50cyhcImZyb21BZGRyZXNzXCIsIGZyb21BZGRyZXNzKTtcbiAgICB9XG4gICAgaWYgKHRvQWRkcmVzcykge1xuICAgICAgdGhpcy51cGRhdGVMaW5rRnJhZ21lbnRzKFwidG9BZGRyZXNzXCIsIHRvQWRkcmVzcyk7XG4gICAgfVxuICAgIGlmIChzZWFyY2h0eXBlKSB7XG4gICAgICB0aGlzLnVwZGF0ZUxpbmtGcmFnbWVudHMoXCJzZWFyY2hUeXBlXCIsIG9ialBhcmFtcy5zKTtcbiAgICB9XG4gICAgaWYgKGZvcmNlU3RhcnQpIHtcbiAgICAgIHRoaXMudXBkYXRlTGlua0ZyYWdtZW50cyhcImZvcmNlU3RhcnRcIiwgb2JqUGFyYW1zLmYpO1xuICAgIH1cbiAgICBpZiAoZnJvbUFkZHJlc3MgJiYgdG9BZGRyZXNzKSB7XG4gICAgICB0aGlzLnJvdXRlci5zZXRSb3V0ZUZyb20oZnJvbUFkZHJlc3NbMF0sIGZyb21BZGRyZXNzWzFdKTtcbiAgICAgIHRoaXMucm91dGVyLnNldFJvdXRlVG8odG9BZGRyZXNzWzBdLCB0b0FkZHJlc3NbMV0pO1xuICAgIH1cbiAgICAvLyBhY3RpdmF0ZSByb3V0ZXIgdmlld1xuICAgIGpRdWVyeShcIi5jNGctcG9ydHNpZGUtdmlld3RyaWdnZXJiYXIgLmM0Zy1yb3V0ZS1zZWFyY2hcIikuY2xpY2soKTtcbiAgfVxufSIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBBdXRvY29tcGxldGVJbnB1dCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLmxpc3RlbmVyUmVnaXN0ZXJlZCA9IGZhbHNlO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICBjb25zdCBzdWJtaXRGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBmaWVsZCA9ICQoXCIjXCIgKyBzY29wZS5wcm9wcy5jc3NJZCk7XG4gICAgICBmaWVsZC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgIGxldCBwZXJmb3JtU2VhcmNoQ2FsbGJhY2s7XG4gICAgICBpZiAoc2NvcGUucHJvcHMuY3NzSWQuaW5kZXhPZihcImFyZWFcIikgIT09IC0xKSB7XG4gICAgICAgIHBlcmZvcm1TZWFyY2hDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNjb3BlLnByb3BzLnJvdXRlci5wZXJmb3JtQXJlYSgpO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVyZm9ybVNlYXJjaENhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2NvcGUucHJvcHMucm91dGVyLnBlcmZvcm1WaWFSb3V0ZSgpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBsZXQgdmFsdWUgPSAoc2NvcGUucHJvcHMuY3NzSWQuaW5kZXhPZignRnJvbScpICE9PSAtMSkgPyBcImZyb21WYWx1ZVwiIDogXCJ0b1ZhbHVlXCI7XG4gICAgICBzY29wZS5wcm9wcy5yb3V0ZXIucGVyZm9ybVNlYXJjaChmaWVsZCwgdmFsdWUsIHBlcmZvcm1TZWFyY2hDYWxsYmFjayk7XG4gICAgfTtcblxuICAgIGxldCBlbnRlckxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIG9wdF90aGlzKSB7XG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgc3VibWl0RnVuY3Rpb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnZhbCgpLmxlbmd0aCA9PT0gMCAmJiAhZXZlbnQua2V5Q29kZSkgeyAvL2RlbGV0ZWRcbiAgICAgICAgICBpZiAodHlwZW9mIHNjb3BlLnByb3BzLm9iakZ1bmN0aW9ucy5kZWxldGVGdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBzY29wZS5wcm9wcy5vYmpGdW5jdGlvbnMuZGVsZXRlRnVuY3Rpb24oZXZlbnQuY3VycmVudFRhcmdldCwgZXZlbnQuY3VycmVudFRhcmdldC5pZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG92ZXIgcG9pbnRzXG4gICAgICAgICAgICBzY29wZS5wcm9wcy5vYmpGdW5jdGlvbnNbc2NvcGUucHJvcHMuaW5kZXhdLmRlbGV0ZUZ1bmN0aW9uKGV2ZW50LmN1cnJlbnRUYXJnZXQsIGV2ZW50LmN1cnJlbnRUYXJnZXQuaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY29wZS5jb3VudGVyID0gTWF0aC5mbG9vcihEYXRlLm5vdygpKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHNjb3BlLmNvdW50ZXIgJiYgc2NvcGUuY291bnRlciArIDQwMCA8IE1hdGguZmxvb3IoRGF0ZS5ub3coKSkpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIHNjb3BlLmNvdW50ZXI7XG4gICAgICAgICAgICAgIGlmICghc2NvcGUucHJvcHMub2JqU2V0dGluZ3MucHJveHlVcmwgfHwgIXNjb3BlLnByb3BzLm9ialNldHRpbmdzLmtleUF1dG9jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IChzY29wZS5wcm9wcy5jc3NJZC5pbmRleE9mKCdGcm9tJykgIT09IC0xKSA/IFwiZnJvbVZhbHVlXCIgOiBcInRvVmFsdWVcIjtcbiAgICAgICAgICAgICAgICBsZXQgZmllbGQgPSAkKFwiI1wiICsgc2NvcGUucHJvcHMuY3NzSWQpO1xuICAgICAgICAgICAgICAgIHNjb3BlLnByb3BzLnJvdXRlci5wZXJmb3JtU2VhcmNoKGZpZWxkLCB2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuYXV0b2NvbXBsZXRlQWRkcmVzcygkKFwiI1wiICsgc2NvcGUucHJvcHMuY3NzSWQpLnZhbCgpLCBcIiNcIiArIHNjb3BlLnByb3BzLmNzc0lkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sNTAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0IGlkPXt0aGlzLnByb3BzLmNzc0lkfSB0eXBlPVwic2VhcmNoXCIgZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfSBvbktleURvd249e2VudGVyTGlzdGVuZXJ9XG4gICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCIgLz5cbiAgICApO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICBsZXQgYXJyTmFtZXM7XG4gICAgaWYgKHRoaXMucHJvcHMuY3NzSWQuaW5kZXhPZihcIkZyb21cIikgIT09IC0xKSB7XG4gICAgICBhcnJOYW1lcyA9IHRoaXMucHJvcHMuY29udGFpbmVyQWRkcmVzc2VzLmFyckZyb21OYW1lc1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5jc3NJZC5pbmRleE9mKFwiVG9cIikgIT09IC0xKSB7XG4gICAgICBhcnJOYW1lcyA9IHRoaXMucHJvcHMuY29udGFpbmVyQWRkcmVzc2VzLmFyclRvTmFtZXM7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmNzc0lkLmluZGV4T2YoXCJPdmVyXCIpICE9PSAtMSkge1xuICAgICAgYXJyTmFtZXMgPSB0aGlzLnByb3BzLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJPdmVyTmFtZXNbdGhpcy5wcm9wcy5pbmRleF07XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmNzc0lkLmluZGV4T2YoXCJhcmVhXCIpICE9PSAtMSkge1xuICAgICAgYXJyTmFtZXMgPSB0aGlzLnByb3BzLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJBcmVhTmFtZXM7XG4gICAgfVxuXG4gICAgbGV0IGlucHV0RmllbGQgPSBqUXVlcnkoJyMnICsgdGhpcy5wcm9wcy5jc3NJZCk7XG4gICAgaWYgKGlucHV0RmllbGQgJiYgKHR5cGVvZihpbnB1dEZpZWxkLmF1dG9jb21wbGV0ZSkgPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgIGlucHV0RmllbGQuYXV0b2NvbXBsZXRlKHtcbiAgICAgICAgc291cmNlOiBhcnJOYW1lc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gb25seSByZWdpc3RlciBsaXN0ZW5lciBvbmNlXG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyUmVnaXN0ZXJlZCkge1xuICAgICAgaW5wdXRGaWVsZC5vbignYXV0b2NvbXBsZXRlc2VsZWN0JywgZnVuY3Rpb24gKGV2ZW50LCB1aSkge1xuICAgICAgICBpZiAoc2NvcGUucHJvcHMuaW5kZXgpIHtcbiAgICAgICAgICBzY29wZS5wcm9wcy5vYmpGdW5jdGlvbnNbc2NvcGUucHJvcHMuaW5kZXhdLnNlbGVjdExpc3RlbmVyKGV2ZW50LCB1aSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NvcGUucHJvcHMub2JqRnVuY3Rpb25zLnNlbGVjdExpc3RlbmVyKGV2ZW50LCB1aSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5saXN0ZW5lclJlZ2lzdGVyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHNldENlbnRlciAoY2VudGVyKSB7XG4gICAgdGhpcy5vYmpTZXR0aW5ncy5jZW50ZXIgPSBjZW50ZXI7XG4gIH1cblxuICBhdXRvY29tcGxldGVBZGRyZXNzKGlucHV0LCBjc3NDbGFzcykge1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICBjb25zdCBzZXR0aW5ncyA9IHNjb3BlLnByb3BzLm9ialNldHRpbmdzO1xuICAgIGxldCBjZW50ZXI7XG4gICAgaWYgKHNldHRpbmdzLmNlbnRlcikge1xuICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5jZW50ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBsZXQgb2JqQ2VudGVyID0gc2V0dGluZ3MuY2VudGVyKCk7XG4gICAgICAgIGNlbnRlciA9IG9iakNlbnRlclswXSArIFwiLFwiICsgb2JqQ2VudGVyWzFdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNlbnRlciA9IHNldHRpbmdzLmNlbnRlclswXSArIFwiLFwiICsgc2V0dGluZ3MuY2VudGVyWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChzZXR0aW5ncy5iQm94KSB7XG4gICAgICBjZW50ZXIgPSAocGFyc2VGbG9hdChzZXR0aW5ncy5iQm94WzBdKSArIHBhcnNlRmxvYXQoc2V0dGluZ3MuYkJveFsyXSkpIC8gMiArIFwiLFwiICsgKHBhcnNlRmxvYXQoc2V0dGluZ3MuYkJveFsxXSkgKyBwYXJzZUZsb2F0KHNldHRpbmdzLmJCb3hbM10pKSAvIDI7XG4gICAgfVxuICAgIGxldCB1cmw7XG4gICAgaWYgKGNlbnRlcikge1xuICAgICAgdXJsID0gc2V0dGluZ3MucHJveHlVcmwgKyBcImF1dG9jb21wbGV0ZS5waHA/Zm9ybWF0PWpzb24ma2V5PVwiICsgc2V0dGluZ3Mua2V5QXV0b2NvbXBsZXRlICsgXCImcT1cIiArIGlucHV0ICtcIiZjZW50ZXI9XCIgKyBjZW50ZXI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdXJsID0gc2V0dGluZ3MucHJveHlVcmwgKyBcImF1dG9jb21wbGV0ZS5waHA/Zm9ybWF0PWpzb24ma2V5PVwiICsgc2V0dGluZ3Mua2V5QXV0b2NvbXBsZXRlICsgXCImcT1cIiArIGlucHV0O1xuICAgIH1cbiAgICBpZiAoc2V0dGluZ3MuZ2Vvc2VhcmNoUGFyYW1zKSB7XG4gICAgICBmb3IgKGxldCBwYXJhbSBpbiBzZXR0aW5ncy5nZW9zZWFyY2hQYXJhbXMpIHtcbiAgICAgICAgaWYgKHNldHRpbmdzLmdlb3NlYXJjaFBhcmFtcy5oYXNPd25Qcm9wZXJ0eShwYXJhbSkpIHtcbiAgICAgICAgICB1cmwgKz0gXCImXCIgKyBwYXJhbSArIFwiPVwiICsgc2V0dGluZ3MuZ2Vvc2VhcmNoUGFyYW1zW3BhcmFtXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAkLmFqYXgoe3VybDogdXJsfSkuZG9uZShmdW5jdGlvbihkYXRhKSB7XG4gICAgICBsZXQgY2VudGVyO1xuICAgICAgaWYgKHNldHRpbmdzLmNlbnRlcikge1xuICAgICAgICBjZW50ZXIgPSBzZXR0aW5ncy5jZW50ZXI7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzZXR0aW5ncy5iQm94KXtcbiAgICAgICAgY2VudGVyID0gWyhwYXJzZUZsb2F0KHNldHRpbmdzLmJCb3hbMF0pICsgcGFyc2VGbG9hdChzZXR0aW5ncy5iQm94WzJdKSkgLyAyLCAocGFyc2VGbG9hdChzZXR0aW5ncy5iQm94WzFdKSArIHBhcnNlRmxvYXQoc2V0dGluZ3MuYkJveFszXSkpIC8gMl07XG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgaWYgKGRhdGFbMF0gJiYgZGF0YVswXS5kaXNwbGF5X25hbWUgICYmIGNlbnRlcikge1xuICAgICAgICAgIC8vICQoY3NzSWQpLnZhbChkYXRhWzBdLmRpc3BsYXlfbmFtZSk7XG4gICAgICAgICAgbGV0IGFyckFkZHJlc3NlcyA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLmJCb3ggJiYgc2V0dGluZ3MuYkJveFswXSkge1xuICAgICAgICAgICAgICAgIGlmIChzY29wZS5pc0luQm91bmRpbmdCb3goZGF0YVtpXS5sb24sIGRhdGFbaV0ubGF0LCBzZXR0aW5ncy5iQm94KSkge1xuICAgICAgICAgICAgICAgICAgbGV0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KChjZW50ZXJbMF0gLSBkYXRhW2ldLmxvbikgKiAoY2VudGVyWzBdIC0gZGF0YVtpXS5sb24pICsgKGNlbnRlclsxXSAtIGRhdGFbaV0ubGF0KSAqIChjZW50ZXJbMV0gLSBkYXRhW2ldLmxhdCkpO1xuICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICdkaXN0JyA6IGRpc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAncG9zJyAgOiBbZGF0YVtpXS5sYXQsIGRhdGFbaV0ubG9uXSxcbiAgICAgICAgICAgICAgICAgICAgJ25hbWUnIDogZGF0YVtpXS5kaXNwbGF5X25hbWVcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBhcnJBZGRyZXNzZXMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYXJyQWRkcmVzc2VzLnNvcnQoKGEsYikgPT4gYS5kaXN0IC1iLmRpc3QpO1xuXG4gICAgICAgICAgZm9yIChsZXQgaSBpbiBhcnJBZGRyZXNzZXMpIHtcbiAgICAgICAgICAgIGlmIChhcnJBZGRyZXNzZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgaWYgKGNzc0NsYXNzLmluZGV4T2YoJ2Zyb20nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBkbyBub3QgYWRkIHR3aWNlXG4gICAgICAgICAgICAgICAgaWYgKCFzY29wZS5wcm9wcy5jb250YWluZXJBZGRyZXNzZXMuYXJyRnJvbU5hbWVzLmluY2x1ZGVzKGFyckFkZHJlc3Nlc1tpXS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgc2NvcGUucHJvcHMuY29udGFpbmVyQWRkcmVzc2VzLmFyckZyb21OYW1lcy5wdXNoKGFyckFkZHJlc3Nlc1tpXS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLnByb3BzLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJGcm9tUG9zaXRpb25zLnB1c2goYXJyQWRkcmVzc2VzW2ldLnBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNzc0NsYXNzLmluZGV4T2YoJ3RvJykgIT09IC0xKXtcbiAgICAgICAgICAgICAgICBpZiAoIXNjb3BlLnByb3BzLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJUb05hbWVzLmluY2x1ZGVzKGFyckFkZHJlc3Nlc1tpXS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgc2NvcGUucHJvcHMuY29udGFpbmVyQWRkcmVzc2VzLmFyclRvTmFtZXMucHVzaChhcnJBZGRyZXNzZXNbaV0ubmFtZSk7XG4gICAgICAgICAgICAgICAgICBzY29wZS5wcm9wcy5jb250YWluZXJBZGRyZXNzZXMuYXJyVG9Qb3NpdGlvbnMucHVzaChhcnJBZGRyZXNzZXNbaV0ucG9zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3NzQ2xhc3MuaW5kZXhPZignb3ZlcicpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGlmICghc2NvcGUucHJvcHMuY29udGFpbmVyQWRkcmVzc2VzLmFyck92ZXJOYW1lc1tzY29wZS5wcm9wcy5pbmRleF0uaW5jbHVkZXMoYXJyQWRkcmVzc2VzW2ldLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICBzY29wZS5wcm9wcy5jb250YWluZXJBZGRyZXNzZXMuYXJyT3Zlck5hbWVzW3Njb3BlLnByb3BzLmluZGV4XS5wdXNoKGFyckFkZHJlc3Nlc1tpXS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLnByb3BzLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJPdmVyUG9zaXRpb25zW3Njb3BlLnByb3BzLmluZGV4XS5wdXNoKGFyckFkZHJlc3Nlc1tpXS5wb3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjc3NDbGFzcy5pbmRleE9mKCdhcmVhJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzY29wZS5wcm9wcy5jb250YWluZXJBZGRyZXNzZXMuYXJyQXJlYU5hbWVzLmluY2x1ZGVzKGFyckFkZHJlc3Nlc1tpXS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgc2NvcGUucHJvcHMuY29udGFpbmVyQWRkcmVzc2VzLmFyckFyZWFOYW1lcy5wdXNoKGFyckFkZHJlc3Nlc1tpXS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLnByb3BzLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJBcmVhUG9zaXRpb25zLnB1c2goYXJyQWRkcmVzc2VzW2ldLnBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGhpcyBpcyB3ZWlyZCDCr1xcXFxfKOODhClfL8KvXCIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gdHJpZ2dlciBrZXlkb3duIGV2ZW50IHRvIHNob3cgYXV0b2NvbXBsZXRlIG9wdGlvbnNcbiAgICAgICAgICBsZXQgZXZlbnQgPSBqUXVlcnkuRXZlbnQoXCJrZXlkb3duXCIsIHtrZXlDb2RlOiA4fSk7XG4gICAgICAgICAgJChjc3NDbGFzcykudHJpZ2dlcihldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgIGlmIChjc3NDbGFzcy5pbmRleE9mKCdGcm9tJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgIC8vIGRvIG5vdCBhZGQgdHdpY2VcbiAgICAgICAgICAgICAgaWYgKCFzY29wZS5wcm9wcy5jb250YWluZXJBZGRyZXNzZXMuYXJyRnJvbU5hbWVzLmluY2x1ZGVzKGRhdGFbaV0uZGlzcGxheV9uYW1lKSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLnByb3BzLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJGcm9tTmFtZXMucHVzaChkYXRhW2ldLmRpc3BsYXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgc2NvcGUucHJvcHMuY29udGFpbmVyQWRkcmVzc2VzLmFyckZyb21Qb3NpdGlvbnMucHVzaChbZGF0YVtpXS5sYXQsIGRhdGFbaV0ubG9uXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3NzQ2xhc3MuaW5kZXhPZignVG8nKSAhPT0gLTEpe1xuICAgICAgICAgICAgICBpZiAoIXNjb3BlLnByb3BzLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJUb05hbWVzLmluY2x1ZGVzKGRhdGFbaV0uZGlzcGxheV9uYW1lKSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLnByb3BzLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJUb05hbWVzLnB1c2goZGF0YVtpXS5kaXNwbGF5X25hbWUpO1xuICAgICAgICAgICAgICAgIHNjb3BlLnByb3BzLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJUb1Bvc2l0aW9ucy5wdXNoKFtkYXRhW2ldLmxhdCwgZGF0YVtpXS5sb25dKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjc3NDbGFzcy5pbmRleE9mKCdPdmVyJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgIGlmICghc2NvcGUucHJvcHMuY29udGFpbmVyQWRkcmVzc2VzLmFyck92ZXJOYW1lc1tzY29wZS5wcm9wcy5pbmRleF0uaW5jbHVkZXMoZGF0YVtpXS5kaXNwbGF5X25hbWUpKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUucHJvcHMuY29udGFpbmVyQWRkcmVzc2VzLmFyck92ZXJOYW1lc1tzY29wZS5wcm9wcy5pbmRleF0ucHVzaChkYXRhW2ldLmRpc3BsYXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgc2NvcGUucHJvcHMuY29udGFpbmVyQWRkcmVzc2VzLmFyck92ZXJQb3NpdGlvbnNbc2NvcGUucHJvcHMuaW5kZXhdLnB1c2goW2RhdGFbaV0ubGF0LCBkYXRhW2ldLmxvbl0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNzc0NsYXNzLmluZGV4T2YoJ2FyZWEnKSAhPT0gLTEpe1xuICAgICAgICAgICAgICBpZiAoIXNjb3BlLnByb3BzLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJBcmVhTmFtZXMuaW5jbHVkZXMoZGF0YVtpXS5kaXNwbGF5X25hbWUpKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUucHJvcHMuY29udGFpbmVyQWRkcmVzc2VzLmFyckFyZWFOYW1lcy5wdXNoKGRhdGFbaV0uZGlzcGxheV9uYW1lKTtcbiAgICAgICAgICAgICAgICBzY29wZS5wcm9wcy5jb250YWluZXJBZGRyZXNzZXMuYXJyQXJlYVBvc2l0aW9ucy5wdXNoKFtkYXRhW2ldLmxhdCwgZGF0YVtpXS5sb25dKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUaGlzIGlzIHdlaXJkIMKvXFxcXF8o44OEKV8vwq9cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNjb3BlLnByb3BzLnJvdXRlci5zZXRTdGF0ZSh7XG4gICAgICAgICAgY29udGFpbmVyQWRkcmVzc2VzOiBzY29wZS5wcm9wcy5jb250YWluZXJBZGRyZXNzZXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdHJpZ2dlciBrZXlkb3duIGV2ZW50IHRvIHNob3cgYXV0b2NvbXBsZXRlIG9wdGlvbnNcbiAgICAgICAgbGV0IGV2ZW50ID0galF1ZXJ5LkV2ZW50KFwia2V5ZG93blwiLCB7a2V5Q29kZTogOH0pO1xuICAgICAgICAkKGNzc0NsYXNzKS50cmlnZ2VyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlzSW5Cb3VuZGluZ0JveChsb25naXR1ZGUsIGxhdGl0dWRlLCBiYm94KSB7XG4gICAgaWYgKHR5cGVvZiBsb25naXR1ZGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGxvbmdpdHVkZSA9IHBhcnNlRmxvYXQobG9uZ2l0dWRlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBsYXRpdHVkZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbGF0aXR1ZGUgPSBwYXJzZUZsb2F0KGxhdGl0dWRlKTtcbiAgICB9XG4gICAgaWYgKGJib3hbMF0gPCBsb25naXR1ZGUgJiZcbiAgICAgIGxvbmdpdHVkZSA8IGJib3hbMl0gJiZcbiAgICAgIGJib3hbMV0gPCBsYXRpdHVkZSAmJlxuICAgICAgbGF0aXR1ZGUgPCBiYm94WzNdKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuXG5pbXBvcnQgUmVhY3QsIHtDb21wb25lbnQsIFN1c3BlbnNlfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7Q29udHJvbH0gZnJvbSBcIm9sL2NvbnRyb2xcIjtcbmltcG9ydCB7Z2V0TGFuZ3VhZ2V9IGZyb20gXCIuLy4uL2M0Zy1tYXBzLWkxOG5cIjtcbmltcG9ydCB7Y3NzQ29uc3RhbnRzfSBmcm9tIFwiLi8uLi9jNGctbWFwcy1jb25zdGFudFwiO1xuLy9pbXBvcnQge0dlb1NlYXJjaFJlc3VsdHN9IGZyb20gXCIuL2M0Zy1nZW9zZWFyY2gtcmVzdWx0cy5qc3hcIjtcbmNvbnN0IEdlb1NlYXJjaFJlc3VsdHMgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vYzRnLWdlb3NlYXJjaC1yZXN1bHRzLmpzeFwiKSk7XG5pbXBvcnQge3RyYW5zZm9ybSwgdHJhbnNmb3JtRXh0ZW50fSBmcm9tIFwib2wvcHJvalwiO1xuaW1wb3J0IHtlYXNlT3V0LCBsaW5lYXJ9IGZyb20gXCJvbC9lYXNpbmdcIjtcbmltcG9ydCB7VmVjdG9yIGFzIFZlY3RvclNvdXJjZX0gZnJvbSBcIm9sL3NvdXJjZVwiO1xuaW1wb3J0IHtWZWN0b3J9IGZyb20gXCJvbC9sYXllclwiO1xuaW1wb3J0IHtDaXJjbGUsIFN0cm9rZSwgU3R5bGV9IGZyb20gXCJvbC9zdHlsZVwiO1xuaW1wb3J0IHtGZWF0dXJlfSBmcm9tIFwib2xcIjtcbmltcG9ydCB7UG9pbnR9IGZyb20gXCJvbC9nZW9tXCI7XG5pbXBvcnQge2dldFZlY3RvckNvbnRleHR9IGZyb20gXCJvbC9yZW5kZXJcIjtcbmltcG9ydCB7dW5CeUtleX0gZnJvbSBcIm9sL09ic2VydmFibGVcIjtcbmltcG9ydCB7dXRpbHN9IGZyb20gXCIuLi9jNGctbWFwcy11dGlsc1wiO1xuaW1wb3J0IHtjb250YWluc0Nvb3JkaW5hdGUsIGdldEhlaWdodCwgZ2V0V2lkdGh9IGZyb20gXCJvbC9leHRlbnRcIjtcbmNvbnN0IFRpdGxlYmFyID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoXCIuL2M0Zy10aXRsZWJhci5qc3hcIikpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZW9TZWFyY2ggZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5sYW5nQ29uc3RhbnRzID0gZ2V0TGFuZ3VhZ2UocHJvcHMubWFwQ29udHJvbGxlci5kYXRhKTtcbiAgICAvLyBjb250cm9sXG4gICAgLy8gaWYgKHRoaXMucHJvcHMuY29sbGFwc2VkKSB7XG4gICAgdGhpcy5jbGlja0NvbnRyb2wgPSB0aGlzLmNsaWNrQ29udHJvbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZG9uZUZ1bmN0aW9uID0gdGhpcy5kb25lRnVuY3Rpb24uYmluZCh0aGlzKTtcbiAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdGhpcy5sYW5nQ29uc3RhbnRzLkNUUkxfR0VPU0VBUkNIKTtcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCd0aXRsZScsIHRoaXMubGFuZ0NvbnN0YW50cy5DVFJMX0dFT1NFQVJDSCk7XG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSBcImM0Zy1nZW9zZWFyY2hcIiArIFwiIG9sLWNvbnRyb2wgXCIgKyBcIm9sLXVuc2VsZWN0YWJsZVwiO1xuICAgIGlmIChwcm9wcy5leHRlcm5hbCkge1xuICAgICAgZWxlbWVudC5jbGFzc05hbWUgKz0gXCIgYzRnLWV4dGVybmFsXCI7XG4gICAgfVxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICBqUXVlcnkoYnV0dG9uKS5vbignY2xpY2snLCB0aGlzLmNsaWNrQ29udHJvbCk7XG4gICAgbGV0IGNvbnRyb2wgPSBuZXcgQ29udHJvbCh7ZWxlbWVudDogZWxlbWVudCwgdGFyZ2V0OiBwcm9wcy50YXJnZXR9KTtcbiAgICBwcm9wcy5tYXBDb250cm9sbGVyLm1hcC5hZGRDb250cm9sKGNvbnRyb2wpO1xuICAgIC8vIH1cbiAgICAvLyBlbmQgY29udHJvbFxuXG4gICAgLy8gcHJlcGFyZSBzZWFyY2gtY29uZmlndXJhdGlvblxuICAgIC8vXG4gICAgdGhpcy5jb25maWcgPSB7fTtcbiAgICBpZiAocHJvcHMubWFwQ29udHJvbGxlci5kYXRhLmdlb3NlYXJjaC5zZWFyY2hLZXkgJiYgcHJvcHMubWFwQ29udHJvbGxlci5kYXRhLmdlb3NlYXJjaC51cmwpIHtcbiAgICAgIHRoaXMuY29uZmlnLnVybCA9IHByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5nZW9zZWFyY2gudXJsICsgXCJzZWFyY2gucGhwXCI7XG4gICAgICB0aGlzLmNvbmZpZy5rZXkgPSBwcm9wcy5tYXBDb250cm9sbGVyLmRhdGEuZ2Vvc2VhcmNoLnNlYXJjaEtleTtcbiAgICAgIHRoaXMuY29uZmlnLnBhcmFtcyA9IHByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5nZW9zZWFyY2gucGFyYW1zO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbmZpZy51cmwgPSBwcm9wcy5tYXBDb250cm9sbGVyLmRhdGEuYXBpLmdlb3NlYXJjaCArIFwiL1wiICsgcHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnByb2ZpbGU7XG4gICAgfVxuICAgIC8vIHpvb21sZXZlbCB3aGVuIGNlbnRlcmluZyB0aGUgZm91bmQgbG9jYXRpb25cbiAgICB0aGlzLmNvbmZpZy56b29tbGV2ZWwgPSBwcm9wcy5zZWFyY2hab29tO1xuICAgIC8vIHpvb20gdG8gYm91bmRzIGluc3RlYWQgb2Ygem9vbWxldmVsIHdoZW4gY2VudGVyaW5nIHRoZSBmb3VuZCBsb2NhdGlvblxuICAgIHRoaXMuY29uZmlnLnpvb21ib3VuZHMgPSBwcm9wcy56b29tQm91bmRzO1xuICAgIC8vIHF1aWNrc2VhcmNoLW9wdGlvbiAoaW5zdGFudGx5IGp1bXAgdG8gdGhlIGZpcnN0IGZvdW5kIGxvY2F0aW9uKVxuICAgIHRoaXMuY29uZmlnLnF1aWNrc2VhcmNoID0gcHJvcHMucXVpY2tzZWFyY2ggfHwgdHJ1ZTtcbiAgICAvLyBhbmltYXRpb24gKGFuaW1hdGUgZmxpZ2h0IHRvIHRhcmdldGVkIGxvY2F0aW9uKVxuICAgIHRoaXMuY29uZmlnLmFuaW1hdGUgPSBwcm9wcy5hbmltYXRlO1xuICAgIC8vIGhpZ2hsaWdodCB0aGUgcmVzdWx0IGxvY2F0aW9uXG4gICAgdGhpcy5jb25maWcubWFya1Jlc3VsdCA9IHByb3BzLm1hcmtSZXN1bHQ7XG4gICAgdGhpcy5jb25maWcuYW5pbWF0ZUR1cmF0aW9uID0gcHJvcHMuYW5pbWF0ZUR1cmF0aW9uO1xuICAgIHRoaXMuY29uZmlnLnJlc3VsdER1cmF0aW9uID0gcHJvcHMucmVzdWx0RHVyYXRpb247XG4gICAgdGhpcy5jb25maWcucG9wdXAgPSBwcm9wcy5wb3B1cDtcblxuICAgIHRoaXMuY29uZmlnLmF1dG9waWNrID0gcHJvcHMuYXV0b3BpY2s7XG4gICAgdGhpcy5jb25maWcubWFwQ29udHJvbGxlciA9IHByb3BzLm1hcENvbnRyb2xsZXI7XG4gICAgdGhpcy5jb25maWcucmVzdWx0cyA9IHByb3BzLnJlc3VsdHM7XG4gICAgdGhpcy5jb25maWcucmVzdWx0U3R5bGUgPSBwcm9wcy5yZXN1bHRTdHlsZTtcbiAgICBpZiAodGhpcy5jb25maWcucmVzdWx0U3R5bGUgJiYgcGFyc2VJbnQodGhpcy5jb25maWcucmVzdWx0U3R5bGUsIDEwKSA+IDApIHtcbiAgICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICAgIC8vIGNoZWNrIGlmIHN0eWxlIGlzIGxvYWRlZCwgb3RoZXJ3aXNlIGxvYWQgaXRcbiAgICAgIGlmIChwcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1t0aGlzLmNvbmZpZy5yZXN1bHRTdHlsZV0pIHtcbiAgICAgICAgdGhpcy5jb25maWcucmVzdWx0U3R5bGUgPSBwcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1t0aGlzLmNvbmZpZy5yZXN1bHRTdHlsZV0uc3R5bGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhbdGhpcy5jb25maWcucmVzdWx0U3R5bGVdLCB7ZG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzY29wZS5jb25maWcucmVzdWx0U3R5bGUgPSBwcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzY29wZS5jb25maWcucmVzdWx0U3R5bGVdLnN0eWxlO1xuICAgICAgICAgIH19KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNvbmZpZy5jb2xsYXBzZWQgPSBwcm9wcy5jb2xsYXBzZWQ7XG4gICAgdGhpcy5jb25maWcucmVzdWx0Q291bnQgPSBwcm9wcy5yZXN1bHRDb3VudDtcbiAgICB0aGlzLmNvbmZpZy5jYWNoaW5nID0gcHJvcHMuY2FjaGluZztcbiAgICB0aGlzLmNvbmZpZy5wbGFjZWhvbGRlciA9IHByb3BzLnBsYWNlaG9sZGVyO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG9wZW46ICFwcm9wcy5jb2xsYXBzZWQsXG4gICAgICBxdWVyeTogXCJcIiwgLy8gdGhlIHNlYXJjaCBxdWVyeVxuICAgICAgcmVzdWx0czogW10sXG4gICAgICBjdXJyZW50Q29vcmRpbmF0ZTogW10sXG4gICAgICBvcGVuUmVzdWx0czogZmFsc2UsXG4gICAgICAvLyBkZXRhaWxPcGVuUmVzdWx0czogZmFsc2UsXG4gICAgICBjdXJyZW50UmVzdWx0OiBudWxsXG4gICAgfTtcblxuICAgIHRoaXMuaW5wdXRDYWxsYmFjayA9IHRoaXMuaW5wdXRDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhcnRTZWFyY2ggPSB0aGlzLnN0YXJ0U2VhcmNoLmJpbmQodGhpcyk7XG4gICAgdGhpcy56b29tVG8gPSB0aGlzLnpvb21Uby5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2xvc2VSZXN1bHRzID0gdGhpcy5jbG9zZVJlc3VsdHMuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9wZW5SZXN1bHRzID0gdGhpcy5vcGVuUmVzdWx0cy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2xvc2UgPSB0aGlzLmNsb3NlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbG9zZVJlc3VsdHNDb21wbGV0ZWx5ID0gdGhpcy5jbG9zZVJlc3VsdHNDb21wbGV0ZWx5LmJpbmQodGhpcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IG1vZGVDbGFzcyA9IHRoaXMuc3RhdGUub3BlbiA/IFwiYzRnLW9wZW5cIiA6IFwiYzRnLWNsb3NlXCI7XG4gICAgaWYgKHRoaXMucHJvcHMuZXh0RGl2KSB7XG4gICAgICBtb2RlQ2xhc3MgKz0gXCIgZXh0ZXJuYWwgXCI7XG4gICAgfVxuICAgIGxldCByZXN1bHRzID0gXCJcIjtcbiAgICBpZiAodGhpcy5zdGF0ZS5vcGVuUmVzdWx0cyAmJiB0aGlzLmNvbmZpZy5yZXN1bHRzKSB7XG4gICAgICByZXN1bHRzID0gPEdlb1NlYXJjaFJlc3VsdHMgY2xhc3NOYW1lPXttb2RlQ2xhc3N9IHJlc3VsdHM9e3RoaXMuc3RhdGUucmVzdWx0c30gem9vbUZ1bmM9eyhpZHgpID0+IHt0aGlzLnNldFN0YXRlKHtjdXJyZW50UmVzdWx0OiB0aGlzLnN0YXRlLnJlc3VsdHNbaWR4XX0pOyB0aGlzLnpvb21UbyhpZHgpO319XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VSZXN1bHRzPXt0aGlzLmNsb3NlUmVzdWx0c30gaGVhZGxpbmU9e3RoaXMucHJvcHMucmVzdWx0c0hlYWRsaW5lfSBjdXJyZW50UmVzdWx0PXt0aGlzLnN0YXRlLmN1cnJlbnRSZXN1bHR9IHJlc3VsdHNEaXY9e3RoaXMucHJvcHMucmVzdWx0c0Rpdn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuPXt0aGlzLnN0YXRlLnJlc3VsdHMubGVuZ3RoID4wfSBvcGVuUmVzdWx0cz17dGhpcy5vcGVuUmVzdWx0c30gY2xvc2VDYj17dGhpcy5jbG9zZVJlc3VsdHNDb21wbGV0ZWx5fVxuICAgICAgLz47XG4gICAgfVxuICAgIGxldCBjbG9zZUJ0bkNsYXNzID0gXCJcIjtcbiAgICBsZXQgY2xvc2VCdG5DYiA9IFwiXCI7XG4gICAgaWYgKHRoaXMuY29uZmlnLmNvbGxhcHNlZCkge1xuICAgICAgY2xvc2VCdG5DbGFzcyA9IFwiYzRnLXRpdGxlYmFyLWNsb3NlXCI7XG4gICAgICBjbG9zZUJ0bkNiID0gdGhpcy5jbG9zZTtcbiAgICB9XG5cbiAgICBsZXQgaGVhZGxpbmUgPSB0aGlzLnByb3BzLmhlYWRsaW5lO1xuICAgIGlmICghaGVhZGxpbmUpIHtcbiAgICAgIGhlYWRsaW5lID0gdGhpcy5sYW5nQ29uc3RhbnRzLkdFT1NFQVJDSDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y3NzQ29uc3RhbnRzLkdFT1NFQVJDSF9XUkFQUEVSICsgXCIgXCIgKyBtb2RlQ2xhc3MgKyBcIiBjNGctaG9yaXpvblwifT5cbiAgICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxkaXY+TG9hZGluZy4uLjwvZGl2Pn0+XG4gICAgICAgICAgICA8VGl0bGViYXIgd3JhcHBlckNsYXNzPXtcImM0Zy1nZW9zZWFyY2gtaGVhZGVyXCJ9IGhlYWRlcj17aGVhZGxpbmV9IGhlYWRlckNsYXNzPXtcImM0Zy1nZW9zZWFyY2gtaGVhZGxpbmVcIn1cbiAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxCdG5DbGFzcz17XCJcIn0gZGV0YWlsQnRuQ2I9e1wiXCJ9IGNsb3NlQnRuQ2xhc3M9e2Nsb3NlQnRuQ2xhc3N9IGNsb3NlQnRuQ2I9e2Nsb3NlQnRuQ2J9IGNsb3NlQnRuVGl0bGU9e3RoaXMubGFuZ0NvbnN0YW50cy5DTE9TRX0+XG4gICAgICAgICAgICA8L1RpdGxlYmFyPlxuICAgICAgICAgIDwvU3VzcGVuc2U+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiYzRnLWdlb3NlYXJjaC1maWx0ZXJcIn0+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBvbktleURvd249e3RoaXMuaW5wdXRDYWxsYmFja30gaWQ9e1wiYzRnLWdlb3NlYXJjaC1pbnB1dFwifSBwbGFjZWhvbGRlcj17dGhpcy5jb25maWcucGxhY2Vob2xkZXJ9IGFyaWEtbGFiZWw9e3RoaXMuY29uZmlnLnBsYWNlaG9sZGVyfS8+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17Y3NzQ29uc3RhbnRzLkdFT1NFQVJDSF9TVEFSVH0gdHlwZT17XCJidXR0b25cIn0gdGl0bGU9e3RoaXMubGFuZ0NvbnN0YW50cy5DVFJMX1NUQVJUX1NFQVJDSH0gb25Nb3VzZVVwPXt0aGlzLnN0YXJ0U2VhcmNofS8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAge3Jlc3VsdHN9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9XG5cbiAgY2xvc2VSZXN1bHRzQ29tcGxldGVseSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtvcGVuUmVzdWx0czogZmFsc2V9KTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSwgc25hcHNob3QpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICBpZiAocHJldlN0YXRlLm9wZW4gIT09IHRoaXMuc3RhdGUub3Blbikge1xuICAgICAgICB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuc2V0T3BlbkNvbXBvbmVudCh0aGlzKTtcbiAgICAgIH1cbiAgICAgIGpRdWVyeShcIi5jNGctZ2Vvc2VhcmNoLWNvbnRhaW5lci1yaWdodFwiKS5hZGRDbGFzcyhcImM0Zy1vcGVuXCIpLnJlbW92ZUNsYXNzKFwiYzRnLWNsb3NlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBqUXVlcnkoXCIuYzRnLWdlb3NlYXJjaC1jb250YWluZXItcmlnaHRcIikuYWRkQ2xhc3MoXCJjNGctY2xvc2VcIikucmVtb3ZlQ2xhc3MoXCJjNGctb3BlblwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLmNhY2hpbmcgJiYgIXRoaXMuc3RhdGUub3Blbikge1xuICAgICAgbGV0IHBhbmVsVmFsID0gdXRpbHMuZ2V0VmFsdWUoJ3BhbmVsJyk7XG4gICAgICBpZiAocGFuZWxWYWwgPT09IHRoaXMuY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgICB1dGlscy5zdG9yZVZhbHVlKCdwYW5lbCcsIFwiXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe29wZW46IGZhbHNlfSk7XG4gIH1cblxuICBzdGFydFNlYXJjaChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNzc0NvbnN0YW50cy5HRU9TRUFSQ0hfU1RBUlQpO1xuICAgIHRyeSB7XG4gICAgICBidXR0b24uYmx1cigpO1xuICAgIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgIH1cbiAgICBsZXQgc2VhcmNoSW5wdXQgPSBqUXVlcnkoXCIjYzRnLWdlb3NlYXJjaC1pbnB1dFwiKTtcbiAgICBpZiAoc2VhcmNoSW5wdXQudmFsKCkpIHtcbiAgICAgIHRoaXMuZmluZExvY2F0aW9uKHNlYXJjaElucHV0LnZhbCgpKTtcbiAgICB9XG4gIH1cblxuICBpbnB1dENhbGxiYWNrKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAxMykge1xuICAgICAgbGV0IHNlYXJjaElucHV0ID0galF1ZXJ5KFwiI2M0Zy1nZW9zZWFyY2gtaW5wdXRcIik7XG4gICAgICBpZiAoc2VhcmNoSW5wdXQudmFsKCkpIHtcbiAgICAgICAgdGhpcy5maW5kTG9jYXRpb24oc2VhcmNoSW5wdXQudmFsKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGNsaWNrQ29udHJvbCgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtvcGVuOiBmYWxzZX0pO1xuICAgICAgalF1ZXJ5KHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5zZWFyY2hDb250YWluZXIpLnJlbW92ZUNsYXNzKFwiYzRnLW9wZW5cIikuYWRkQ2xhc3MoXCJjNGctY2xvc2VcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5oaWRlT3RoZXJDb21wb25lbnRzKHRoaXMpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7b3BlbjogdHJ1ZX0pO1xuICAgICAgalF1ZXJ5KHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5zZWFyY2hDb250YWluZXIpLnJlbW92ZUNsYXNzKFwiYzRnLWNsb3NlXCIpLmFkZENsYXNzKFwiYzRnLW9wZW5cIik7XG4gICAgICB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuc2V0T3BlbkNvbXBvbmVudCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBjbG9zZVJlc3VsdHMoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7ZGV0YWlsT3BlblJlc3VsdHM6IGZhbHNlfSk7XG4gIH1cblxuICBvcGVuUmVzdWx0cygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtkZXRhaWxPcGVuUmVzdWx0czogdHJ1ZX0pO1xuICB9XG5cbiAgZmluZExvY2F0aW9uKGxvY2F0aW9uLCBvcHRfb3B0aW9ucykge1xuICAgIGxldCBtYXAsXG4gICAgICBhbmltYXRlLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICBtYXJrUmVzdWx0LFxuICAgICAgbWFwQ29udHJvbGxlcjtcblxuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICBtYXBDb250cm9sbGVyID0gdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyO1xuICAgIG1hcCA9IG1hcENvbnRyb2xsZXIubWFwO1xuXG4gICAgLy8gc2hvdyBzcGlubmVyXG4gICAgbWFwQ29udHJvbGxlci5zcGlubmVyLnNob3coKTtcblxuICAgIGFuaW1hdGUgPSB0aGlzLmNvbmZpZy5hbmltYXRlO1xuICAgIGFuaW1hdGlvbkR1cmF0aW9uID0gdGhpcy5jb25maWcuYW5pbWF0ZUR1cmF0aW9uO1xuICAgIG1hcmtSZXN1bHQgPSB0aGlzLmNvbmZpZy5tYXJrUmVzdWx0O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRfb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChvcHRfb3B0aW9ucy5hbmltYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYW5pbWF0ZSA9IG9wdF9vcHRpb25zLmFuaW1hdGU7XG4gICAgICB9XG4gICAgICBpZiAob3B0X29wdGlvbnMubWFya1Jlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1hcmtSZXN1bHQgPSBvcHRfb3B0aW9ucy5tYXJrUmVzdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbmZpZy5xdWlja3NlYXJjaCkge1xuICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIGZvcm1hdDogXCJqc29uXCIsXG4gICAgICAgIHE6IGxvY2F0aW9uXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuY29uZmlnLnJlc3VsdENvdW50KSB7XG4gICAgICAgIGRhdGEubGltaXQgPSB0aGlzLmNvbmZpZy5yZXN1bHRDb3VudDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5rZXkpIHtcbiAgICAgICAgZGF0YS5rZXkgPSB0aGlzLmNvbmZpZy5rZXk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jb25maWcucGFyYW1zKSB7XG4gICAgICAgIGZvciAobGV0IHBhcmFtIGluIHRoaXMuY29uZmlnLnBhcmFtcykge1xuICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5wYXJhbXMuaGFzT3duUHJvcGVydHkocGFyYW0pKSB7XG4gICAgICAgICAgICBkYXRhW3BhcmFtXSA9IHRoaXMuY29uZmlnLnBhcmFtc1twYXJhbV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgYXJyUmVzdWx0cyA9IHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MuaG9va19zZWFyY2gsIFtkYXRhLCB0aGlzXSk7XG4gICAgICBpZiAoYXJyUmVzdWx0cyAmJiBhcnJSZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5jb25maWcubWFwQ29udHJvbGxlci5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgZm9yIChsZXQgaSBpbiBhcnJSZXN1bHRzKSB7XG4gICAgICAgICAgaWYgKGFyclJlc3VsdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgIHRoaXMuZG9uZUZ1bmN0aW9uKGFyclJlc3VsdHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIEFKQVggLT4gQG5vbWluYXRpbVxuICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgIHVybDogdGhpcy5jb25maWcudXJsLFxuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5kb25lKHRoaXMuZG9uZUZ1bmN0aW9uKVxuXG4gICAgICAgICAgICAuZmFpbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIC8vIEBUT0RPXG4gICAgICAgICAgICAgIC8vIHNlbGYucmVzdWx0V3JhcHBlci5pbm5lckhUTUwgPSAnb2hvaCEnO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzY29wZS5jb25maWcubWFwQ29udHJvbGxlci5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEBUT0RPXG4gICAgfVxuXG4gIH1cbiAgZG9uZUZ1bmN0aW9uIChyZXN1bHRzKSB7XG5cbiAgICB2YXIgbWFwVmlldyxcbiAgICAgICAgY3VycmVudENvb3JkaW5hdGUsXG4gICAgICAgIHJlc3VsdENvb3JkaW5hdGUsXG4gICAgICAgIGNvb3JkRGlmLFxuICAgICAgICBkaWZDb250ZXh0LFxuICAgICAgICB2aWV3RXh0ZW50LFxuICAgICAgICByZXN1bHQsXG4gICAgICAgIG9zbUV4dGVudCxcbiAgICAgICAgcmVzb2x1dGlvbixcbiAgICAgICAgem9vbVR5cGUsXG4gICAgICAgIGZseVRvLFxuICAgICAgICBjb21wbGV0ZVNlYXJjaCxcbiAgICAgICAgbWFwQ29udHJvbGxlciA9IHRoaXMucHJvcHMubWFwQ29udHJvbGxlcixcbiAgICAgICAgbWFwID0gbWFwQ29udHJvbGxlci5tYXAsXG4gICAgICAgIGFuaW1hdGUgPSB0aGlzLmNvbmZpZy5hbmltYXRlLFxuICAgICAgICBhbmltYXRpb25EdXJhdGlvbiA9IHRoaXMuY29uZmlnLmFuaW1hdGVEdXJhdGlvbixcbiAgICAgICAgbWFya1Jlc3VsdCA9IHRoaXMuY29uZmlnLm1hcmtSZXN1bHQ7XG5cbiAgICBpZiAocmVzdWx0cyAmJiByZXN1bHRzLmxlbmd0aCAmJiByZXN1bHRzLmxlbmd0aCA+IDApe1xuICAgICAgbWFwVmlldyA9IG1hcC5nZXRWaWV3KCk7XG5cbiAgICAgIGlmIChyZXN1bHRzWzBdKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbMF07XG4gICAgICAgIHRoaXMucmVzdWx0cyA9IHJlc3VsdHM7XG4gICAgICAgIGN1cnJlbnRDb29yZGluYXRlID0gbWFwVmlldy5nZXRDZW50ZXIoKTtcbiAgICAgICAgcmVzdWx0Q29vcmRpbmF0ZSA9IHRyYW5zZm9ybShbcGFyc2VGbG9hdChyZXN1bHQubG9uKSwgcGFyc2VGbG9hdChyZXN1bHQubGF0KV0sICdFUFNHOjQzMjYnLCAnRVBTRzozODU3Jyk7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICB0aGlzLmZseVRvKFxuICAgICAgICAgICAgICBtYXAsIHJlc3VsdENvb3JkaW5hdGUsIHRoaXMuY29uZmlnLnpvb21sZXZlbCwgdGhpcy5jb25maWcuem9vbWJvdW5kcywgcmVzdWx0LmJvdW5kaW5nX2JveCxcbiAgICAgICAgICAgICAgbWFya1Jlc3VsdCwgdGhpcy5jb25maWcucmVzdWx0RHVyYXRpb24sIGFuaW1hdGUsIHRoaXMuY29uZmlnLmFuaW1hdGVEdXJhdGlvbiwgbWFwLmdldFZpZXcoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZVNlYXJjaCh0aGlzLmNvbmZpZy5tYXJrUmVzdWx0LCB0aGlzLmNvbmZpZy5hbmltYXRlLCB6b29tVHlwZSwgdGhpcy5jb25maWcuYW5pbWF0ZUR1cmF0aW9uLCByZXN1bHRDb29yZGluYXRlLCB0aGlzLmNvbmZpZy5yZXN1bHREdXJhdGlvbik7XG4gICAgICAgICAgbWFwVmlldy5zZXRDZW50ZXIocmVzdWx0Q29vcmRpbmF0ZSk7XG4gICAgICAgICAgaWYgKHRoaXMuY29uZmlnLnpvb21sZXZlbCA+PSAwKSB7XG4gICAgICAgICAgICBtYXAuZ2V0VmlldygpLnNldFpvb20odGhpcy5jb25maWcuem9vbWxldmVsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGl4ZWwgPSBtYXAuZ2V0UGl4ZWxGcm9tQ29vcmRpbmF0ZShyZXN1bHRDb29yZGluYXRlKTtcbiAgICAgICAgdmFyIGZlYXR1cmUgPSBtYXAuZm9yRWFjaEZlYXR1cmVBdFBpeGVsKHBpeGVsLFxuICAgICAgICAgICAgZnVuY3Rpb24gKGZlYXR1cmUsIGxheWVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmZWF0dXJlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHZhciBsYXllciA9IG1hcC5mb3JFYWNoRmVhdHVyZUF0UGl4ZWwocGl4ZWwsXG4gICAgICAgICAgICBmdW5jdGlvbiAoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxheWVyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5wb3B1cCkge1xuICAgICAgICAgIHZhciBwb3B1cEluZm9zID0ge307XG4gICAgICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ3BvcHVwJykpIHtcbiAgICAgICAgICAgIC8vIHNpbmdsZSBQT0lcbiAgICAgICAgICAgIHBvcHVwSW5mb3MgPSBmZWF0dXJlLmdldCgncG9wdXAnKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxheWVyICYmIGxheWVyLnBvcHVwKSB7XG4gICAgICAgICAgICBwb3B1cEluZm9zID0gbGF5ZXIucG9wdXA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZlYXR1cmUgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZlYXR1cmUpIHtcbiAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcbiAgICAgICAgICAgIGlmIChnZW9tZXRyeSBpbnN0YW5jZW9mIFBvaW50KSB7XG4gICAgICAgICAgICAgIHZhciBjb29yZCA9IGdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgY29vcmQgPSByZXN1bHRDb29yZGluYXRlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aW5kb3cuYzRnTWFwc1BvcHVwLnBvcHVwLnNldFBvc2l0aW9uKGNvb3JkKTtcbiAgICAgICAgICAgIGlmIChwb3B1cEluZm9zLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgd2luZG93LmM0Z01hcHNQb3B1cC4kY29udGVudC5odG1sKCcnKTtcbiAgICAgICAgICAgICAgd2luZG93LmM0Z01hcHNQb3B1cC5wb3B1cC5hZGRDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKS5hZGRDbGFzcyhjc3NDb25zdGFudHMuTE9BRElORyk7XG4gICAgICAgICAgICAgIHdpbmRvdy5jNGdNYXBzUG9wdXAuc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgICAgICAgICAgaWYgKHBvcHVwSW5mb3MuYXN5bmMgPT09IGZhbHNlIHx8IHBvcHVwSW5mb3MuYXN5bmMgPT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9ialBvcHVwID0ge307XG4gICAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm9zO1xuICAgICAgICAgICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBmZWF0dXJlO1xuICAgICAgICAgICAgICAgIG9ialBvcHVwLmxheWVyID0gbGF5ZXI7XG4gICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgcG9wdXAgaG9vayBmb3IgcGx1Z2luIHNwZWNpZmljIHBvcHVwIGNvbnRlbnRcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmM0Z01hcHNIb29rcyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2ZpbGxQb3B1cCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwLCBvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm1hcENvbnRyb2xsZXIucHJveHkuc2V0UG9wdXAob2JqUG9wdXApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgICAgICAgIHVybDogdGhpcy5hcGlfaW5mb3dpbmRvd191cmwgKyAnLycgKyBwb3B1cEluZm9zLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICBkb25lOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9wdXBJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiBwb3B1cEluZm9zLmFzeW5jLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGRhdGEuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICBwb3B1cDogcG9wdXBJbmZvcy5wb3B1cCxcbiAgICAgICAgICAgICAgICAgICAgICByb3V0aW5nX2xpbms6IHBvcHVwSW5mb3Mucm91dGluZ19saW5rXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgb2JqUG9wdXAucG9wdXAgPSBwb3B1cEluZm87XG4gICAgICAgICAgICAgICAgICAgIG9ialBvcHVwLmZlYXR1cmUgPSBmZWF0dXJlO1xuICAgICAgICAgICAgICAgICAgICBvYmpQb3B1cC5sYXllciA9IGxheWVyO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIHBvcHVwIGhvb2sgZm9yIHBsdWdpbiBzcGVjaWZpYyBwb3B1cCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuYzRnTWFwc0hvb2tzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfZmlsbFBvcHVwLCBvYmpQb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFBvcHVwKG9ialBvcHVwKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2luZG93LmM0Z01hcHNQb3B1cC5wb3B1cC5yZW1vdmVDbGFzcyhjc3NDb25zdGFudHMuQUNUSVZFKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93ICYmIHdpbmRvdy5jNGdNYXBzUG9wdXAgJiYgd2luZG93LmM0Z01hcHNQb3B1cC5wb3B1cCkge1xuICAgICAgICAgICAgalF1ZXJ5KHdpbmRvdy5jNGdNYXBzUG9wdXAucG9wdXApLnJlbW92ZUNsYXNzKGNzc0NvbnN0YW50cy5BQ1RJVkUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmF1dG9waWNrICYmIHRoaXMuY29uZmlnLm1hcENvbnRyb2xsZXIuZ2VvcGlja2VyICYmIHR5cGVvZiB0aGlzLmNvbmZpZy5tYXBDb250cm9sbGVyLmdlb3BpY2tlci5waWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5jb25maWcubWFwQ29udHJvbGxlci5nZW9waWNrZXIucGljayhyZXN1bHRDb29yZGluYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbGFuZ0NvbnN0YW50cyA9IGdldExhbmd1YWdlKHRoaXMub3B0aW9ucy5tYXBDb250cm9sbGVyLmRhdGEpO1xuICAgICAgICBhbGVydChsYW5nQ29uc3RhbnRzLlNFQVJDSF9OT1RfRk9VTkQpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucmVzdWx0cykge1xuICAgICAgICBsZXQgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLnJlc3VsdHNbaV0uZGlzcGxheV9uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtyZXN1bHRzOiByZXN1bHRzLCBjdXJyZW50Q29vcmRpbmF0ZTogY3VycmVudENvb3JkaW5hdGUsIG9wZW5SZXN1bHRzOiB0cnVlLCBjdXJyZW50UmVzdWx0OiByZXN1bHRzWzBdfSk7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICBmbHlUbyhtYXAsIGxvY2F0aW9uLCB6b29tbGV2ZWwsIHpvb21ib3VuZHMsIGJvdW5kaW5nYm94LCBtYXJrUmVzdWx0LCByZXN1bHREdXJhdGlvbiwgYW5pbWF0ZSwgYW5pbWF0ZUR1cmF0aW9uLCBtYXBWaWV3KSB7XG4gICAgbGV0IGR1cmF0aW9uID0gYW5pbWF0ZUR1cmF0aW9uO1xuICAgIGxldCB6b29tID0gem9vbWxldmVsO1xuICAgIGxldCBwYXJ0cyA9IDI7XG4gICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICAgIGxldCBleHRlbnQ7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gY2FsbGJhY2soY29tcGxldGUpIHtcbiAgICAgIC0tcGFydHM7XG4gICAgICBpZiAoY2FsbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0cyA9PT0gMCB8fCAhY29tcGxldGUpIHtcbiAgICAgICAgY2FsbGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoem9vbWJvdW5kcyAmJiBib3VuZGluZ2JveCAmJiBib3VuZGluZ2JveFswXSAhPT0gbnVsbCAmJlxuICAgICAgICAgIGJvdW5kaW5nYm94WzFdICE9PSBudWxsICYmIGJvdW5kaW5nYm94WzJdICE9PSBudWxsICYmXG4gICAgICAgICAgYm91bmRpbmdib3hbM10gIT09IG51bGxcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gdHJhbnNsYXRlIG9zbS1leHRlbnQgdG8gb2wzLWV4dGVudFxuXG4gICAgICAgICAgbGV0IG9zbUV4dGVudCA9IFtdO1xuICAgICAgICAgIG9zbUV4dGVudC5wdXNoKHBhcnNlRmxvYXQoYm91bmRpbmdib3hbMl0pKTtcbiAgICAgICAgICBvc21FeHRlbnQucHVzaChwYXJzZUZsb2F0KGJvdW5kaW5nYm94WzBdKSk7XG4gICAgICAgICAgb3NtRXh0ZW50LnB1c2gocGFyc2VGbG9hdChib3VuZGluZ2JveFszXSkpO1xuICAgICAgICAgIG9zbUV4dGVudC5wdXNoKHBhcnNlRmxvYXQoYm91bmRpbmdib3hbMV0pKTtcblxuICAgICAgICAgIGV4dGVudCA9IHRyYW5zZm9ybUV4dGVudChvc21FeHRlbnQsICdFUFNHOjQzMjYnLCAnRVBTRzozODU3Jyk7XG5cbiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdmlld0ZpdCA9IG1hcFZpZXcuZml0KFxuICAgICAgICAgICAgICBleHRlbnQsXG4gICAgICAgICAgICAgIG1hcC5nZXRTaXplKCksXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtaW5ab29tOiBtYXBWaWV3LmdldCgnbWluWm9vbScpIHx8IDIsXG4gICAgICAgICAgICAgICAgbWF4Wm9vbTogem9vbSB8fCBtYXBWaWV3LmdldCgnbWF4Wm9vbScpIHx8IDE4LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAvIDIsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBlYXNlT3V0XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSwgZHVyYXRpb24pXG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS5jb21wbGV0ZVNlYXJjaChtYXJrUmVzdWx0LCBhbmltYXRlLCBcImJvdW5jZVwiLCBhbmltYXRlRHVyYXRpb24sIGxvY2F0aW9uLCByZXN1bHREdXJhdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWFwLmdldFZpZXcoKS5hbmltYXRlKHtcbiAgICAgIGNlbnRlcjogbG9jYXRpb24sXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb25cbiAgICB9LCBjYWxsYmFjayk7XG5cbiAgICBtYXAuZ2V0VmlldygpLmFuaW1hdGUoe1xuICAgICAgem9vbTogem9vbSAtIDEsXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gLyAyXG4gICAgfSwge1xuICAgICAgem9vbTogem9vbSxcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAvIDJcbiAgICB9LCBjYWxsYmFjayk7XG4gIH1cblxuICBjb21wbGV0ZVNlYXJjaChtYXJrUmVzdWx0LCBhbmltYXRlLCB6b29tVHlwZSwgYW5pbWF0aW9uRHVyYXRpb24sIHJlc3VsdENvb3JkaW5hdGUsIHJlc3VsdER1cmF0aW9uKSB7XG4gICAgLy8gcmVzdWx0IG1hcmtlciAmIGFuaW1hdGlvblxuICAgIGlmIChtYXJrUmVzdWx0KSB7XG4gICAgICBsZXQgYWRkTWFya2VyLFxuICAgICAgICBtYXJrZXJTb3VyY2UsXG4gICAgICAgIG1hcmtlckxheWVyLFxuICAgICAgICBhbmltYXRlTWFya2VyO1xuXG4gICAgICBtYXJrZXJTb3VyY2UgPSBuZXcgVmVjdG9yU291cmNlKCk7XG4gICAgICBsZXQgc3R5bGUgPSB0aGlzLmNvbmZpZy5yZXN1bHRTdHlsZTtcbiAgICAgIGlmICghc3R5bGUgfHwgc3R5bGUgPT09IFwiMFwiKSB7XG4gICAgICAgIHN0eWxlID0gW25ldyBTdHlsZSh7XG4gICAgICAgICAgaW1hZ2U6IG5ldyBDaXJjbGUoe1xuICAgICAgICAgICAgcmFkaXVzOiA3LFxuICAgICAgICAgICAgc25hcFRvUGl4ZWw6IGZhbHNlLFxuICAgICAgICAgICAgc3Ryb2tlOiBuZXcgU3Ryb2tlKHtcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDIwMCwgMCwgMCwgJyArIDAuOSArICcpJyxcbiAgICAgICAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgICAgICAgIG9wYWNpdHk6IDAuOVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgU3R5bGUoe1xuICAgICAgICAgICAgaW1hZ2U6IG5ldyBDaXJjbGUoe1xuICAgICAgICAgICAgICByYWRpdXM6IDIwLFxuICAgICAgICAgICAgICBzbmFwVG9QaXhlbDogZmFsc2UsXG4gICAgICAgICAgICAgIHN0cm9rZTogbmV3IFN0cm9rZSh7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDIwMCwgMCwgMCwgJyArIDAuOSArICcpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogMixcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjlcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICAgIGltYWdlOiBuZXcgQ2lyY2xlKHtcbiAgICAgICAgICAgICAgcmFkaXVzOiAzMyxcbiAgICAgICAgICAgICAgc25hcFRvUGl4ZWw6IGZhbHNlLFxuICAgICAgICAgICAgICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyMDAsIDAsIDAsICcgKyAwLjkgKyAnKScsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC45XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgICBtYXJrZXJMYXllciA9IG5ldyBWZWN0b3Ioe1xuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIHNvdXJjZTogbWFya2VyU291cmNlLFxuICAgICAgICB6SW5kZXg6IDk5OTk5XG4gICAgICB9KTtcbiAgICAgIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIobWFya2VyTGF5ZXIpO1xuXG4gICAgICBhZGRNYXJrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG1hcmtlclNvdXJjZS5hZGRGZWF0dXJlKFxuICAgICAgICAgIG5ldyBGZWF0dXJlKFxuICAgICAgICAgICAgbmV3IFBvaW50KHJlc3VsdENvb3JkaW5hdGUpXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgYW5pbWF0ZU1hcmtlciA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgIHZhciBhbmltYXRpb25TdGVwLFxuICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgIGxpc3RlbmVyS2V5O1xuXG4gICAgICAgIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIGR1cmF0aW9uID0gcmVzdWx0RHVyYXRpb247XG5cbiAgICAgICAgYW5pbWF0aW9uU3RlcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGxldCB2ZWN0b3JDb250ZXh0LFxuICAgICAgICAgICAgZnJhbWVTdGF0ZSxcbiAgICAgICAgICAgIGVsYXBzZWQsXG4gICAgICAgICAgICBlbGFwc2VkUmF0aW8sXG4gICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICBvcGFjaXR5LFxuICAgICAgICAgICAgZmxhc2hHZW9tO1xuXG4gICAgICAgICAgdmVjdG9yQ29udGV4dCA9IGdldFZlY3RvckNvbnRleHQoZXZlbnQpO1xuICAgICAgICAgIGZyYW1lU3RhdGUgPSBldmVudC5mcmFtZVN0YXRlO1xuICAgICAgICAgIGZsYXNoR2VvbSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5jbG9uZSgpO1xuICAgICAgICAgIGVsYXBzZWQgPSBmcmFtZVN0YXRlLnRpbWUgLSBzdGFydDtcbiAgICAgICAgICBlbGFwc2VkUmF0aW8gPSBlbGFwc2VkIC8gZHVyYXRpb247XG4gICAgICAgICAgcmFkaXVzID0gbGluZWFyKDEgLSBlbGFwc2VkUmF0aW8pICogMTAwO1xuICAgICAgICAgIGlmIChyYWRpdXMgPCAwKSB7XG4gICAgICAgICAgICByYWRpdXMgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcGFjaXR5ID0gbGluZWFyKGVsYXBzZWRSYXRpbyk7XG5cbiAgICAgICAgICBsZXQgbWFya2VyID0gbmV3IFN0eWxlKCk7XG5cbiAgICAgICAgICB2ZWN0b3JDb250ZXh0LnNldFN0eWxlKG1hcmtlcik7XG4gICAgICAgICAgdmVjdG9yQ29udGV4dC5kcmF3R2VvbWV0cnkoZmxhc2hHZW9tLCBudWxsKTtcblxuICAgICAgICAgIGlmIChlbGFwc2VkID4gZHVyYXRpb24pIHtcbiAgICAgICAgICAgIG1hcmtlclNvdXJjZS5jbGVhcigpO1xuICAgICAgICAgICAgdW5CeUtleShsaXN0ZW5lcktleSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGNvbnRpbnVlIHBvc3RyZW5kZXIgYW5pbWF0aW9uXG4gICAgICAgICAgZnJhbWVTdGF0ZS5hbmltYXRlID0gdHJ1ZTtcbiAgICAgICAgfTsgLy8gZW5kIG9mIFwiYW5pbWF0aW9uU3RlcFwiXG5cbiAgICAgICAgbGlzdGVuZXJLZXkgPSBtYXJrZXJMYXllci5vbigncG9zdHJlbmRlcicsIGFuaW1hdGlvblN0ZXApO1xuXG4gICAgICB9OyAvLyBlbmQgb2YgXCJhbmltYXRlTWFya2VyXCJcblxuICAgICAgbWFya2VyU291cmNlLm9uKCdhZGRmZWF0dXJlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGFuaW1hdGVNYXJrZXIoZXZlbnQuZmVhdHVyZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgaWYgKHpvb21UeXBlID09PSAnem9vbScpIHtcbiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChhZGRNYXJrZXIsIGFuaW1hdGlvbkR1cmF0aW9uIC8gMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoYWRkTWFya2VyLCBhbmltYXRpb25EdXJhdGlvbiAvIDIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRNYXJrZXIoKTtcbiAgICAgIH1cblxuICAgIH0vLyBlbmQgb2YgcmVzdWx0IG1hcmtlciAmIGFuaW1hdGlvbiBoYW5kbGluZ1xuICB9XG5cbiAgLyoqXG4gICAqIEBUT0RPXG4gICAqXG4gICAqIEBwYXJhbSAgIHtbdHlwZV19ICBsb2NhdGlvbiAgW2Rlc2NyaXB0aW9uXVxuICAgKlxuICAgKiBAcmV0dXJuICB7W3R5cGVdfSAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHpvb21UbyhpbmRleCkge1xuICAgIGxldCBtYXAsXG4gICAgICByZXN1bHQsXG4gICAgICByZXN1bHRDb29yZGluYXRlLFxuICAgICAgbWFwQ29udHJvbGxlcixcbiAgICAgIHpvb21UeXBlO1xuXG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIG1hcENvbnRyb2xsZXIgPSB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXI7XG4gICAgbWFwID0gbWFwQ29udHJvbGxlci5tYXA7XG4gICAgbGV0IG1hcFZpZXcgPSBtYXAuZ2V0VmlldygpO1xuICAgIGxldCBjdXJyZW50Q29vcmRpbmF0ZSA9IHRoaXMuc3RhdGUuY3VycmVudENvb3JkaW5hdGU7XG5cbiAgICByZXN1bHQgPSBzY29wZS5yZXN1bHRzW2luZGV4XTtcbiAgICByZXN1bHRDb29yZGluYXRlID0gdHJhbnNmb3JtKFtwYXJzZUZsb2F0KHJlc3VsdC5sb24pLCBwYXJzZUZsb2F0KHJlc3VsdC5sYXQpXSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy5hbmltYXRlKSB7XG4gICAgICB2YXIgcmVzb2x1dGlvbiA9IG1hcFZpZXcuZ2V0UmVzb2x1dGlvbigpO1xuICAgICAgdmFyIHZpZXdFeHRlbnQgPSBtYXBWaWV3LmNhbGN1bGF0ZUV4dGVudChtYXAuZ2V0U2l6ZSgpKTtcbiAgICAgIGlmIChjb250YWluc0Nvb3JkaW5hdGUodmlld0V4dGVudCwgcmVzdWx0Q29vcmRpbmF0ZSkpIHtcbiAgICAgICAgem9vbVR5cGUgPSAnem9vbSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoTWF0aC5hYnMoY3VycmVudENvb3JkaW5hdGVbMF0gLSByZXN1bHRDb29yZGluYXRlWzBdKSA+IE1hdGguYWJzKGN1cnJlbnRDb29yZGluYXRlWzFdIC0gcmVzdWx0Q29vcmRpbmF0ZVsxXSkpIHtcbiAgICAgICAgICB2YXIgY29vcmREaWYgPSBNYXRoLmFicyhjdXJyZW50Q29vcmRpbmF0ZVswXSAtIHJlc3VsdENvb3JkaW5hdGVbMF0pO1xuICAgICAgICAgIHZhciBkaWZDb250ZXh0ID0gZ2V0V2lkdGgodmlld0V4dGVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29vcmREaWYgPSBNYXRoLmFicyhjdXJyZW50Q29vcmRpbmF0ZVsxXSAtIHJlc3VsdENvb3JkaW5hdGVbMV0pO1xuICAgICAgICAgIGRpZkNvbnRleHQgPSBnZXRIZWlnaHQodmlld0V4dGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvb3JkRGlmID4gMCkge1xuICAgICAgICAgIHJlc29sdXRpb24gKj0gY29vcmREaWYgLyBkaWZDb250ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHpvb21UeXBlID0gJ2JvdW5jZSc7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZmx5VG8oXG4gICAgICAgICAgbWFwLCByZXN1bHRDb29yZGluYXRlLCB0aGlzLmNvbmZpZy56b29tbGV2ZWwsIHRoaXMuY29uZmlnLnpvb21ib3VuZHMsIHJlc3VsdC5ib3VuZGluZ19ib3gsXG4gICAgICAgICAgdGhpcy5jb25maWcubWFya1Jlc3VsdCwgdGhpcy5jb25maWcucmVzdWx0RHVyYXRpb24sIHRoaXMuY29uZmlnLmFuaW1hdGUsIHRoaXMuY29uZmlnLmFuaW1hdGVEdXJhdGlvbiwgbWFwVmlldyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5jb21wbGV0ZVNlYXJjaCh0aGlzLmNvbmZpZy5tYXJrUmVzdWx0LCB0aGlzLmNvbmZpZy5hbmltYXRlLCB6b29tVHlwZSwgdGhpcy5jb25maWcuYW5pbWF0ZUR1cmF0aW9uLCByZXN1bHRDb29yZGluYXRlLCB0aGlzLmNvbmZpZy5yZXN1bHREdXJhdGlvbik7XG4gICAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihyZXN1bHRDb29yZGluYXRlKTtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy56b29tbGV2ZWwgPj0gMCkge1xuICAgICAgICBtYXAuZ2V0VmlldygpLnNldFpvb20odGhpcy5jb25maWcuem9vbWxldmVsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG59IiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG5cbmltcG9ydCB7TWFwUHJveHl9IGZyb20gXCIuLi9jNGctbWFwcy1wcm94eVwiO1xuaW1wb3J0IHtjc3NDb25zdGFudHN9IGZyb20gXCIuLi9jNGctbWFwcy1jb25zdGFudFwiO1xuaW1wb3J0IHtTcGlubmVyfSBmcm9tIFwiLi4vYzRnLW1hcHMtbWlzYy1zcGlubmVyXCI7XG5pbXBvcnQge01hcEhvdmVyfSBmcm9tIFwiLi4vYzRnLW1hcHMtbWlzYy1tYXBob3ZlclwiO1xuaW1wb3J0IHtHcm91cCBhcyBMYXllckdyb3VwfSBmcm9tICdvbC9sYXllcic7XG5pbXBvcnQge3V0aWxzfSBmcm9tIFwiLi4vYzRnLW1hcHMtdXRpbHNcIjtcbmltcG9ydCB7TWFwc0NvbnRyb2xzfSBmcm9tIFwiLi4vYzRnLW1hcHMtY29udHJvbHNcIjtcbmltcG9ydCB7Z2V0TGFuZ3VhZ2V9IGZyb20gXCIuLi9jNGctbWFwcy1pMThuXCI7XG5pbXBvcnQge0dlb2xvY2F0aW9uLCBLaW5ldGljLCBNYXAsIFZpZXd9IGZyb20gXCJvbFwiO1xuaW1wb3J0IHt0cmFuc2Zvcm0sIHRyYW5zZm9ybUV4dGVudH0gZnJvbSBcIm9sL3Byb2pcIjtcbmltcG9ydCB7XG4gIGRlZmF1bHRzIGFzIGludGVyYWN0aW9uRGVmYXVsdHMsXG4gIERvdWJsZUNsaWNrWm9vbSxcbiAgRHJhZ1BhbixcbiAgRHJhZ1JvdGF0ZUFuZFpvb20sXG4gIERyYWdab29tLFxuICBLZXlib2FyZFBhbixcbiAgS2V5Ym9hcmRab29tLFxuICBNb3VzZVdoZWVsWm9vbSxcbiAgUGluY2hSb3RhdGUsXG4gIFBpbmNoWm9vbVxufSBmcm9tIFwib2wvaW50ZXJhY3Rpb25cIjtcbmltcG9ydCB7ZGVmYXVsdHMgYXMgY29udHJvbERlZmF1bHRzfSBmcm9tIFwib2wvY29udHJvbFwiO1xuaW1wb3J0IHtHcm91cH0gZnJvbSBcIm9sL2xheWVyXCI7XG5pbXBvcnQge1BvaW50fSBmcm9tIFwib2wvZ2VvbVwiO1xuaW1wb3J0IHtib3VuZGluZ0V4dGVudCwgZ2V0Qm90dG9tTGVmdCwgZ2V0Qm90dG9tUmlnaHQsIGdldFRvcExlZnQsIGdldFRvcFJpZ2h0fSBmcm9tIFwib2wvZXh0ZW50XCI7XG5pbXBvcnQge3NoaWZ0S2V5T25seX0gZnJvbSBcIm9sL2V2ZW50cy9jb25kaXRpb25cIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgUmVhY3QsIHtDb21wb25lbnQsIFN1c3BlbnNlfSBmcm9tIFwicmVhY3RcIjtcbi8vY29uc3QgR2VvU2VhcmNoID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoJy4vYzRnLWdlb3NlYXJjaC5qc3gnKSk7XG5pbXBvcnQgR2VvU2VhcmNoIGZyb20gXCIuL2M0Zy1nZW9zZWFyY2guanN4XCI7XG5jb25zdCBGZWF0dXJlRmlsdGVyID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoJy4vYzRnLWZlYXR1cmUtZmlsdGVyLmpzeCcpKTtcbmNvbnN0IEJhc2VsYXllclN3aXRjaGVyID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoJy4vYzRnLWJhc2VsYXllcnN3aXRjaGVyLmpzeCcpKTtcbmNvbnN0IFN0YXJib2FyZFBhbmVsID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoJy4vYzRnLXN0YXJib2FyZC1wYW5lbC5qc3gnKSk7XG5jb25zdCBJbmZvcGFnZSA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KCcuL2M0Zy1pbmZvcGFnZS5qc3gnKSk7XG5jb25zdCBNZWFzdXJldG9vbHMgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydCgnLi9jNGctbWVhc3VyZXRvb2xzLmpzeCcpKTtcbmNvbnN0IFBlcm1hbGluayA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KCcuL2M0Zy1wZXJtYWxpbmsuanN4JykpO1xuY29uc3QgWm9vbSA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KCcuL2M0Zy16b29tLmpzeCcpKTtcbmNvbnN0IFpvb21FeHRlbnQgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydCgnLi9jNGctem9vbS1leHRlbnQuanN4JykpO1xuY29uc3QgWm9vbUhvbWUgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydCgnLi9jNGctem9vbS1ob21lLmpzeCcpKTtcbmNvbnN0IFpvb21Qb3NpdGlvbiA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KCcuL2M0Zy16b29tLXBvc2l0aW9uLmpzeCcpKTtcbmNvbnN0IEdyaWQgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydCgnLi9jNGctZ3JpZC5qc3gnKSk7XG5jb25zdCBSb3RhdGUgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydCgnLi9jNGctcm90YXRlLmpzeCcpKTtcbmNvbnN0IEZ1bGxzY3JlZW4gPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydCgnLi9jNGctZnVsbHNjcmVlbi5qc3gnKSk7XG5jb25zdCBQcmludCA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KCcuL2M0Zy1wcmludC5qc3gnKSk7XG5jb25zdCBPdmVydmlld01hcCA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KCcuL2M0Zy1vdmVydmlld21hcC5qc3gnKSk7XG4vL2NvbnN0IFJvdXRlclZpZXcgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vYzRnLXJvdXRlci12aWV3LmpzeFwiKSk7XG5jb25zdCBFZGl0b3JDb21wb25lbnQgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vYzRnLWVkaXRvci1jb21wb25lbnQuanN4XCIpKTtcbmltcG9ydCBUaWxlTGF5ZXIgZnJvbSBcIm9sL2xheWVyL1RpbGVcIjtcbmltcG9ydCB7cm91dGluZ0NvbnN0YW50c0VuZ2xpc2h9IGZyb20gXCIuLy4uL3JvdXRpbmctY29uc3RhbnQtaTE4bi1lblwiO1xuaW1wb3J0IHtyb3V0aW5nQ29uc3RhbnRzR2VybWFufSBmcm9tIFwiLi8uLi9yb3V0aW5nLWNvbnN0YW50LWkxOG4tZGVcIjtcblxuaW1wb3J0IHtSb3V0ZXJWaWV3fSBmcm9tIFwiLi9jNGctcm91dGVyLXZpZXcuanN4XCI7XG4vLyBpbXBvcnQge0VkaXRvckNvbXBvbmVudH0gZnJvbSBcIi4vYzRnLWVkaXRvci1jb21wb25lbnQuanN4XCI7XG5cbmxldCBsYW5nUm91dGVDb25zdGFudHMgPSB7fTtcbmNvbnN0IGNvbnRhaW5lckFkZHJlc3NlcyA9IHtcbiAgYXJyRnJvbVBvc2l0aW9uczogW10sXG4gIGFyckZyb21OYW1lczogW10sXG4gIGFyclRvUG9zaXRpb25zOiBbXSxcbiAgYXJyVG9OYW1lczogW10sXG4gIGFyck92ZXJQb3NpdGlvbnM6IHt9LFxuICBhcnJPdmVyTmFtZXM6IHt9LFxufTtcblxubGV0IGxhbmdDb25zdGFudHMgPSB7fTtcblxuJ3VzZSBzdHJpY3QnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFwQ29udHJvbGxlciBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgLyoqXG4gICAqIFtNYXBDb250cm9sbGVyIGRlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0ge2pzb24tb2JqZWN0fSAgbWFwRGF0YSAgT2JqZWN0IHRvIGNvbmZpZ3VyZSBjb240Z2lzLW1hcHMuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWUgXCJkb2NzL21hcERhdGEtdmFsdWVzLm1kXCJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGdldCBhIGxpc3Qgb2YgdmFsaWQgdmFsdWVzIGZvciB0aGlzIG9iamVjdC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIC8vLS0tXG4gICAgbGV0IG1hcERhdGEgPSBwcm9wcy5tYXBEYXRhO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBvYmpMYXllcnM6IFtdLFxuICAgICAgYXJyTGF5ZXJTdGF0ZXM6IFtdLFxuICAgICAgb3BlbkNvbXBvbmVudDogbnVsbCxcbiAgICAgIG9ialRhYkxheWVyczogW10sXG4gICAgICBzdHlsZURhdGE6IHt9LFxuICAgICAgYXJyVGFiTGF5ZXJTdGF0ZXM6IFtdXG4gICAgfTtcbiAgICB0aGlzLnNldE9iakxheWVycyA9IHRoaXMuc2V0T2JqTGF5ZXJzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZXRMYXllclN0YXRlcyA9IHRoaXMuc2V0TGF5ZXJTdGF0ZXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNoYW5nZUFjdGl2ZUxheWVycyA9IHRoaXMuY2hhbmdlQWN0aXZlTGF5ZXJzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZXRUYWJTdGF0ZXMgPSB0aGlzLnNldFRhYlN0YXRlcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2V0TG9jU3R5bGVzID0gdGhpcy5zZXRMb2NTdHlsZXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNoYW5nZUNvbGxhcHNlU3RhdGUgPSB0aGlzLmNoYW5nZUNvbGxhcHNlU3RhdGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm1hcCA9IG51bGw7XG5cbiAgICBsYW5nQ29uc3RhbnRzID0gZ2V0TGFuZ3VhZ2UobWFwRGF0YSk7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIHBlcm1hbGluayA9IGZhbHNlLFxuICAgICAgICBtaW5ab29tLFxuICAgICAgICBtYXhab29tLFxuICAgICAgICB2aWV3LFxuICAgICAgICBnZW9Mb2NhdGlvbixcbiAgICAgICAgY29udHJvbHMgPSBbXSxcbiAgICAgICAgaW50ZXJhY3Rpb25zID0gW10sXG4gICAgICAgIGRpc3BsYXlBbGxMb2NhdGlvbnMsXG4gICAgICAgIGRvbU1hcERpdixcbiAgICAgICAga2luZXRpYyxcbiAgICAgICAgc3RhcmJvYXJkX2xhYmVsLFxuICAgICAgICBlbmFibGVTdGFyYm9hcmQgPSB0cnVlO1xuXG4gICAgLy8tLVxuICAgIG1hcERhdGEgPSBqUXVlcnkuZXh0ZW5kKHtcbiAgICAgIGFwaToge30sXG4gICAgICBhZGRJZFRvRGl2OiBmYWxzZSxcbiAgICAgIG1hcElkOiAxLFxuICAgICAgbWFwRGl2OiAnYzRnX21hcCcsXG4gICAgICBjZW50ZXI6IHt9LFxuICAgICAgY2FsY19leHRlbnQ6ICdDRU5URVJaT09NJyxcbiAgICAgIGF0dHJpYnV0aW9uOiB7fSxcbiAgICAgIGVkaXRvcjoge30sXG4gICAgICBtZWFzdXJldG9vbHM6IHt9LFxuICAgICAgaW5mb3BhZ2U6IHt9LFxuICAgICAgYWNjb3VudDogJycsXG4gICAgICBzdGFyYm9hcmQ6IHt9LFxuICAgICAgbGF5ZXJzd2l0Y2hlcjoge30sXG4gICAgICBiYXNlbGF5ZXJzd2l0Y2hlcjoge30sXG4gICAgICBnZW9zZWFyY2g6IHt9XG4gICAgfSwgbWFwRGF0YSk7XG4gICAgaWYgKG1hcERhdGEuY2FsY19leHRlbnQgPT09ICdMT0NBVElPTlMnIHx8IG1hcERhdGEuY2FsY19leHRlbnQgPT09ICdDRU5URVJMT0NTJykge1xuICAgICAgbWFwRGF0YSA9IGpRdWVyeS5leHRlbmQoe1xuICAgICAgICBtaW5fZ2FwOiAyNVxuICAgICAgfSwgbWFwRGF0YSk7XG4gICAgfVxuXG4gICAgLy8gY2VudGVyXG4gICAgbWFwRGF0YS5jZW50ZXIgPSBqUXVlcnkuZXh0ZW5kKHtcbiAgICAgIGxhdDogNTIuMjIsXG4gICAgICBsb246IDkuNDMsXG4gICAgICByb3RhdGlvbjogMCxcbiAgICAgIHpvb206IDZcbiAgICB9LCBtYXBEYXRhLmNlbnRlcik7XG4gICAgLy8gYXR0cmlidXRpb25cbiAgICBtYXBEYXRhLmF0dHJpYnV0aW9uID0galF1ZXJ5LmV4dGVuZCh7XG4gICAgICBlbmFibGU6IHRydWUsXG4gICAgICBjb2xsYXBzZWQ6IGZhbHNlLFxuICAgICAgY29sbGFwc2libGU6IHRydWVcbiAgICB9LCBtYXBEYXRhLmF0dHJpYnV0aW9uKTtcbiAgICAvLyBnZW9zZWFyY2hcbiAgICBtYXBEYXRhLmdlb3NlYXJjaCA9IGpRdWVyeS5leHRlbmQoe1xuICAgICAgZW5hYmxlOiBmYWxzZSxcbiAgICAgIGRpdjogZmFsc2VcbiAgICB9LCBtYXBEYXRhLmdlb3NlYXJjaCk7XG4gICAgLy8gcGVybWFsaW5rXG4gICAgbWFwRGF0YS5wZXJtYWxpbmsgPSBqUXVlcnkuZXh0ZW5kKHtcbiAgICAgIGVuYWJsZTogZmFsc2UsXG4gICAgICBnZXRfcGFyYW1ldGVyOiBmYWxzZVxuICAgIH0sIG1hcERhdGEucGVybWFsaW5rKTtcbiAgICB0aGlzLmRhdGEgPSBtYXBEYXRhO1xuICAgIGlmIChtYXBEYXRhLmFkZElkVG9EaXYpIHtcbiAgICAgIG1hcERhdGEubWFwRGl2ICs9ICdfJyArIG1hcERhdGEubWFwSWQ7XG4gICAgfVxuICAgIC8vIFBIUFN0b3JtIG1hcmtzIHRoaXMgYXMgZXJyb3IsIGJ1dCBpdCBpcyBub25lXG4gICAgLy8gVGhpcyBpcyBuZWVkZWQgZm9yIHByZXZlbnRpbmcgYW4gZXJyb3Igd2l0aCB0aGUgT1NNLU92ZXJwYXNzIEFQSVxuICAgIC8vIHdoaWNoIG9jY3VycyB3aGVuIE1vb1Rvb2xzIGlzIGxvYWRlZFxuICAgIGlmICh3aW5kb3cuTW9vVG9vbHMgJiYgQnJvd3Nlci5Eb2N1bWVudCkge1xuICAgICAgRG9jdW1lbnQgPSBCcm93c2VyLkRvY3VtZW50O1xuICAgIH1cbiAgICAvLyBjaGVjayBwZXJtYWxpbmtcbiAgICBpZiAobWFwRGF0YS5wZXJtYWxpbmsuZW5hYmxlKSB7XG4gICAgICBwZXJtYWxpbmsgPSB1dGlscy5nZXRVcmxQYXJhbShtYXBEYXRhLnBlcm1hbGluay5nZXRfcGFyYW1ldGVyKTtcblxuICAgICAgaWYgKHBlcm1hbGluaykge1xuICAgICAgICBwZXJtYWxpbmsgPSBwZXJtYWxpbmsuc3BsaXQoJy8nKTtcbiAgICAgICAgc3dpdGNoIChwZXJtYWxpbmsubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgcGVybWFsaW5rWzBdID0gcGFyc2VGbG9hdChwZXJtYWxpbmtbMF0pO1xuICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIubG9uID0gIWlzTmFOKHBlcm1hbGlua1swXSkgPyBwZXJtYWxpbmtbMF0gOiBtYXBEYXRhLmNlbnRlci5sb247XG4gICAgICAgICAgICBwZXJtYWxpbmtbMV0gPSBwYXJzZUZsb2F0KHBlcm1hbGlua1sxXSk7XG4gICAgICAgICAgICBtYXBEYXRhLmNlbnRlci5sYXQgPSAhaXNOYU4ocGVybWFsaW5rWzFdKSA/IHBlcm1hbGlua1sxXSA6IG1hcERhdGEuY2VudGVyLmxhdDtcbiAgICAgICAgICAgIHBlcm1hbGlua1syXSA9IHBhcnNlSW50KHBlcm1hbGlua1syXSwgMTApO1xuICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIuem9vbSA9ICFpc05hTihwZXJtYWxpbmtbMl0pID8gcGVybWFsaW5rWzJdIDogbWFwRGF0YS5jZW50ZXIuem9vbTtcbiAgICAgICAgICAgIHBlcm1hbGlua1szXSA9IHBhcnNlRmxvYXQocGVybWFsaW5rWzNdKTtcbiAgICAgICAgICAgIG1hcERhdGEuY2VudGVyLnJvdGF0aW9uID0gIWlzTmFOKHBlcm1hbGlua1szXSkgPyBwZXJtYWxpbmtbM10gOiBtYXBEYXRhLmNlbnRlci5yb3RhdGlvbjtcbiAgICAgICAgICAgIHBlcm1hbGlua1s0XSA9IHBhcnNlSW50KHBlcm1hbGlua1s0XSwgMTApO1xuICAgICAgICAgICAgbWFwRGF0YS5iYXNlbGF5ZXIgPSAhaXNOYU4ocGVybWFsaW5rWzRdKSA/IHBlcm1hbGlua1s0XSA6IG1hcERhdGEuYmFzZWxheWVyO1xuICAgICAgICAgICAgbWFwRGF0YS5sYXllcnMgPSBwZXJtYWxpbmtbNV0uc3BsaXQoJzonKTtcbiAgICAgICAgICAgIC8vIGRlY29kZSBkZWx0YUVuY29kaW5nXG4gICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHV0aWxzLmRlbHRhRGVjb2RlKG1hcERhdGEubGF5ZXJzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHBlcm1hbGlua1swXSA9IHBhcnNlRmxvYXQocGVybWFsaW5rWzBdKTtcbiAgICAgICAgICAgIG1hcERhdGEuY2VudGVyLmxvbiA9ICFpc05hTihwZXJtYWxpbmtbMF0pID8gcGVybWFsaW5rWzBdIDogbWFwRGF0YS5jZW50ZXIubG9uO1xuICAgICAgICAgICAgcGVybWFsaW5rWzFdID0gcGFyc2VGbG9hdChwZXJtYWxpbmtbMV0pO1xuICAgICAgICAgICAgbWFwRGF0YS5jZW50ZXIubGF0ID0gIWlzTmFOKHBlcm1hbGlua1sxXSkgPyBwZXJtYWxpbmtbMV0gOiBtYXBEYXRhLmNlbnRlci5sYXQ7XG4gICAgICAgICAgICBwZXJtYWxpbmtbMl0gPSBwYXJzZUludChwZXJtYWxpbmtbMl0sIDEwKTtcbiAgICAgICAgICAgIG1hcERhdGEuY2VudGVyLnpvb20gPSAhaXNOYU4ocGVybWFsaW5rWzJdKSA/IHBlcm1hbGlua1syXSA6IG1hcERhdGEuY2VudGVyLnpvb207XG4gICAgICAgICAgICAvLyBkaXNhYmxlIHpvb21pbmcgdG8gYWxsIGxvY2F0aW9uc1xuICAgICAgICAgICAgbWFwRGF0YS5jYWxjX2V4dGVudCA9IFwiQ0VOVEVSWk9PTVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgLy8gYmFzZWxheWVyIGFuZCBsYXllcnMgb25seVxuICAgICAgICAgICAgcGVybWFsaW5rWzBdID0gcGFyc2VJbnQocGVybWFsaW5rWzBdLCAxMCk7XG4gICAgICAgICAgICBtYXBEYXRhLmJhc2VsYXllciA9ICFpc05hTihwZXJtYWxpbmtbMF0pID8gcGVybWFsaW5rWzBdIDogbWFwRGF0YS5iYXNlbGF5ZXI7XG4gICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IHBlcm1hbGlua1sxXS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgLy8gZGVjb2RlIGRlbHRhRW5jb2RpbmdcbiAgICAgICAgICAgIG1hcERhdGEubGF5ZXJzID0gdXRpbHMuZGVsdGFEZWNvZGUobWFwRGF0YS5sYXllcnMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgLy8gbGF5ZXJzIG9ubHlcbiAgICAgICAgICAgIG1hcERhdGEubGF5ZXJzID0gcGVybWFsaW5rWzBdLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICAvLyBkZWNvZGUgZGVsdGFFbmNvZGluZ1xuICAgICAgICAgICAgbWFwRGF0YS5sYXllcnMgPSB1dGlscy5kZWx0YURlY29kZShtYXBEYXRhLmxheWVycyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gaW52YWxpZCBjb3VudCBvZiBwZXJtYWxpbmsgcGFyYW1ldGVyc1xuICAgICAgICAgICAgcGVybWFsaW5rID0gZmFsc2U7XG4gICAgICAgICAgICBtYXBEYXRhLmxheWVycyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBqdXN0IHRvIG1ha2Ugc3VyZSB0aGlzIHZhciBpcyByZWFsbHkgXCJmYWxzZVwiXG4gICAgICAgIHBlcm1hbGluayA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZXJtYWxpbmsgPSB1dGlscy5nZXRVcmxQYXJhbShtYXBEYXRhLnBlcm1hbGluay5nZXRfcGFyYW1ldGVyKTtcbiAgICAgIGlmIChwZXJtYWxpbmspIHtcbiAgICAgICAgcGVybWFsaW5rID0gcGVybWFsaW5rLnNwbGl0KCcvJyk7XG4gICAgICAgIGlmIChwZXJtYWxpbmsubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgcGVybWFsaW5rWzBdID0gcGFyc2VGbG9hdChwZXJtYWxpbmtbMF0pO1xuICAgICAgICAgIG1hcERhdGEuY2VudGVyLmxvbiA9ICFpc05hTihwZXJtYWxpbmtbMF0pID8gcGVybWFsaW5rWzBdIDogbWFwRGF0YS5jZW50ZXIubG9uO1xuICAgICAgICAgIHBlcm1hbGlua1sxXSA9IHBhcnNlRmxvYXQocGVybWFsaW5rWzFdKTtcbiAgICAgICAgICBtYXBEYXRhLmNlbnRlci5sYXQgPSAhaXNOYU4ocGVybWFsaW5rWzFdKSA/IHBlcm1hbGlua1sxXSA6IG1hcERhdGEuY2VudGVyLmxhdDtcbiAgICAgICAgICBwZXJtYWxpbmtbMl0gPSBwYXJzZUludChwZXJtYWxpbmtbMl0sIDEwKTtcbiAgICAgICAgICBtYXBEYXRhLmNlbnRlci56b29tID0gIWlzTmFOKHBlcm1hbGlua1syXSkgPyBwZXJtYWxpbmtbMl0gOiBtYXBEYXRhLmNlbnRlci56b29tO1xuICAgICAgICAgIC8vIGRpc2FibGUgem9vbWluZyB0byBhbGwgbG9jYXRpb25zXG4gICAgICAgICAgbWFwRGF0YS5jYWxjX2V4dGVudCA9IFwiQ0VOVEVSWk9PTVwiO1xuICAgICAgICB9IGVsc2UgaWYgKHBlcm1hbGluay5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICBwZXJtYWxpbmtbMF0gPSBwYXJzZUZsb2F0KHBlcm1hbGlua1swXSk7XG4gICAgICAgICAgbWFwRGF0YS5jZW50ZXIubG9uID0gIWlzTmFOKHBlcm1hbGlua1swXSkgPyBwZXJtYWxpbmtbMF0gOiBtYXBEYXRhLmNlbnRlci5sb247XG4gICAgICAgICAgcGVybWFsaW5rWzFdID0gcGFyc2VGbG9hdChwZXJtYWxpbmtbMV0pO1xuICAgICAgICAgIG1hcERhdGEuY2VudGVyLmxhdCA9ICFpc05hTihwZXJtYWxpbmtbMV0pID8gcGVybWFsaW5rWzFdIDogbWFwRGF0YS5jZW50ZXIubGF0O1xuICAgICAgICAgIHBlcm1hbGlua1syXSA9IHBhcnNlSW50KHBlcm1hbGlua1syXSwgMTApO1xuICAgICAgICAgIG1hcERhdGEuY2VudGVyLnpvb20gPSAhaXNOYU4ocGVybWFsaW5rWzJdKSA/IHBlcm1hbGlua1syXSA6IG1hcERhdGEuY2VudGVyLnpvb207XG4gICAgICAgICAgcGVybWFsaW5rWzNdID0gcGFyc2VJbnQocGVybWFsaW5rWzNdLCAxMCk7XG4gICAgICAgICAgbWFwRGF0YS5kZWZhdWx0X2Jhc2VsYXllciA9IHBlcm1hbGlua1szXTtcbiAgICAgICAgICAvLyBkaXNhYmxlIHpvb21pbmcgdG8gYWxsIGxvY2F0aW9uc1xuICAgICAgICAgIG1hcERhdGEuY2FsY19leHRlbnQgPSBcIkNFTlRFUlpPT01cIjtcbiAgICAgICAgfVxuICAgICAgICBwZXJtYWxpbmsgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5wcm94eSA9IG5ldyBNYXBQcm94eSh7bWFwQ29udHJvbGxlcjogdGhpc30pO1xuICAgIHRoaXMuY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cyB8fCB7fTtcbiAgICB0aGlzLmhpZGVPdGhlckNvbXBvbmVudHMgPSB0aGlzLmhpZGVPdGhlckNvbXBvbmVudHMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhpZGVPdGhlckJvdHRvbUNvbXBvbmVudHMgPSB0aGlzLmhpZGVPdGhlckJvdHRvbUNvbXBvbmVudHMuYmluZCh0aGlzKTtcblxuICAgIC8vIGFkZCB2aWV3IG9ic2VydmVyIHRvIHVwZGF0ZSBwZXJtYWxpbmsgb24gY2VudGVyIGNoYW5nZSwgaWYgYSBwZXJtYWxpbmsgZXhpc3RzXG4gICAgLy8gdXNlIG90aGVyIHBlcm1hbGluayB2YXJpYWJsZSB0byBhdm9pZCBpbnRlcmZlcmVuY2Ugd2l0aCB0aGUgYWN0dWFsIHBlcm1hbGluayBtZWNoYW5pc21cbiAgICB3aW5kb3cuYzRnTWFwc0hvb2tzLm1hcF9jZW50ZXJfY2hhbmdlZCA9IHdpbmRvdy5jNGdNYXBzSG9va3MubWFwX2NlbnRlcl9jaGFuZ2VkIHx8IFtdO1xuICAgIHdpbmRvdy5jNGdNYXBzSG9va3MubWFwX2NlbnRlcl9jaGFuZ2VkLnB1c2goZnVuY3Rpb24gKGNlbnRlcikge1xuICAgICAgbGV0IGN1cnJlbnRQZXJtYWxpbmsgPSB1dGlscy5nZXRVcmxQYXJhbShtYXBEYXRhLnBlcm1hbGluay5nZXRfcGFyYW1ldGVyKTtcbiAgICAgIGlmIChjdXJyZW50UGVybWFsaW5rKSB7XG4gICAgICAgIGlmIChjdXJyZW50UGVybWFsaW5rKSB7XG4gICAgICAgICAgY3VycmVudFBlcm1hbGluayA9IGN1cnJlbnRQZXJtYWxpbmsuc3BsaXQoJy8nKTtcbiAgICAgICAgICBpZiAoY3VycmVudFBlcm1hbGluay5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgY2VudGVyID0gdHJhbnNmb3JtKGNlbnRlciwgXCJFUFNHOjM4NTdcIiwgXCJFUFNHOjQzMjZcIik7XG4gICAgICAgICAgICBjdXJyZW50UGVybWFsaW5rWzBdID0gY2VudGVyWzBdO1xuICAgICAgICAgICAgY3VycmVudFBlcm1hbGlua1sxXSA9IGNlbnRlclsxXTtcbiAgICAgICAgICAgIHV0aWxzLnNldFVybFBhcmFtKGN1cnJlbnRQZXJtYWxpbmsuam9pbignLycpLCBtYXBEYXRhLnBlcm1hbGluay5nZXRfcGFyYW1ldGVyLCB0cnVlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgd2luZG93LmM0Z01hcHNIb29rcy5ob29rX21hcF96b29tID0gd2luZG93LmM0Z01hcHNIb29rcy5ob29rX21hcF96b29tIHx8IFtdO1xuICAgIHdpbmRvdy5jNGdNYXBzSG9va3MuaG9va19tYXBfem9vbS5wdXNoKGZ1bmN0aW9uIChwcm94eSkge1xuICAgICAgbGV0IGN1cnJlbnRQZXJtYWxpbmsgPSB1dGlscy5nZXRVcmxQYXJhbShtYXBEYXRhLnBlcm1hbGluay5nZXRfcGFyYW1ldGVyKTtcbiAgICAgIGlmIChjdXJyZW50UGVybWFsaW5rKSB7XG4gICAgICAgIGlmIChjdXJyZW50UGVybWFsaW5rKSB7XG4gICAgICAgICAgY3VycmVudFBlcm1hbGluayA9IGN1cnJlbnRQZXJtYWxpbmsuc3BsaXQoJy8nKTtcbiAgICAgICAgICBpZiAoY3VycmVudFBlcm1hbGluay5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgY3VycmVudFBlcm1hbGlua1syXSA9IHBhcnNlSW50KHZpZXcuZ2V0Wm9vbSgpLCAxMCkgfHwgY3VycmVudFBlcm1hbGlua1syXTtcbiAgICAgICAgICAgIHV0aWxzLnNldFVybFBhcmFtKGN1cnJlbnRQZXJtYWxpbmsuam9pbignLycpLCBtYXBEYXRhLnBlcm1hbGluay5nZXRfcGFyYW1ldGVyLCB0cnVlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChtYXBEYXRhLnBlcm1hbGluay53aXRob3V0R2VuZXJhdG9yKSB7XG4gICAgICBsZXQgY3VycmVudFBlcm1hbGluayA9IHV0aWxzLmdldFVybFBhcmFtKG1hcERhdGEucGVybWFsaW5rLmdldF9wYXJhbWV0ZXIpO1xuICAgICAgaWYgKCFjdXJyZW50UGVybWFsaW5rICYmIG1hcERhdGEuY2VudGVyKSB7XG4gICAgICAgIGxldCBwZXJtYWxpbmsgPSBbXTtcbiAgICAgICAgcGVybWFsaW5rLnB1c2gobWFwRGF0YS5jZW50ZXIubG9uKTtcbiAgICAgICAgcGVybWFsaW5rLnB1c2gobWFwRGF0YS5jZW50ZXIubGF0KTtcbiAgICAgICAgcGVybWFsaW5rLnB1c2gobWFwRGF0YS5jZW50ZXIuem9vbSk7XG4gICAgICAgIHV0aWxzLnNldFVybFBhcmFtKHBlcm1hbGluay5qb2luKCcvJyksIG1hcERhdGEucGVybWFsaW5rLmdldF9wYXJhbWV0ZXIsIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXBEYXRhLm1pblpvb20gJiYgbWFwRGF0YS5taW5ab29tID4gMCkge1xuICAgICAgbWluWm9vbSA9IG1hcERhdGEubWluWm9vbTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWluWm9vbSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKG1hcERhdGEubWF4Wm9vbSAmJiBtYXBEYXRhLm1heFpvb20gPiAwKSB7XG4gICAgICBtYXhab29tID0gbWFwRGF0YS5tYXhab29tO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYXhab29tID0gMTk7XG4gICAgfVxuXG4gICAgaWYgKG1hcERhdGEuY2FjaGluZykge1xuICAgICAgaWYgKCh1dGlscy5nZXRWYWx1ZSgnbG9uJykpICYmICh1dGlscy5nZXRWYWx1ZSgnbGF0JykpKSB7XG4gICAgICAgIG1hcERhdGEuY2VudGVyLmxvbiA9IHV0aWxzLmdldFZhbHVlKCdsb24nKTtcbiAgICAgICAgbWFwRGF0YS5jZW50ZXIubGF0ID0gdXRpbHMuZ2V0VmFsdWUoJ2xhdCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuZ2V0VmFsdWUoJ3pvb20nKSkge1xuICAgICAgICBtYXBEYXRhLmNlbnRlci56b29tID0gdXRpbHMuZ2V0VmFsdWUoJ3pvb20nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWFwRGF0YS5yZXN0cl9ib3R0b21sZWZ0X2xvblxuICAgICAgICAmJiBtYXBEYXRhLnJlc3RyX2JvdHRvbWxlZnRfbGF0XG4gICAgICAgICYmIG1hcERhdGEucmVzdHJfdG9wcmlnaHRfbG9uXG4gICAgICAgICYmIG1hcERhdGEucmVzdHJfdG9wcmlnaHRfbGF0XG4gICAgKSB7XG4gICAgICBsZXQgZXh0ZW50ID0gW1xuICAgICAgICBwYXJzZUZsb2F0KG1hcERhdGEucmVzdHJfYm90dG9tbGVmdF9sb24pLFxuICAgICAgICBwYXJzZUZsb2F0KG1hcERhdGEucmVzdHJfYm90dG9tbGVmdF9sYXQpLFxuICAgICAgICBwYXJzZUZsb2F0KG1hcERhdGEucmVzdHJfdG9wcmlnaHRfbG9uKSxcbiAgICAgICAgcGFyc2VGbG9hdChtYXBEYXRhLnJlc3RyX3RvcHJpZ2h0X2xhdClcbiAgICAgIF07XG4gICAgICBleHRlbnQgPSB0cmFuc2Zvcm1FeHRlbnQoZXh0ZW50LCBcIkVQU0c6NDMyNlwiLCBcIkVQU0c6Mzg1N1wiKTtcbiAgICAgIHZpZXcgPSBuZXcgVmlldyh7XG4gICAgICAgIGV4dGVudDogZXh0ZW50LFxuICAgICAgICBjZW50ZXI6IHRyYW5zZm9ybShbcGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlci5sb24pLCBwYXJzZUZsb2F0KG1hcERhdGEuY2VudGVyLmxhdCldLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpLFxuICAgICAgICB6b29tOiBwYXJzZUZsb2F0KG1hcERhdGEuY2VudGVyLnpvb20pLFxuICAgICAgICBtaW5ab29tOiBwYXJzZUludChtaW5ab29tLCAxMCksXG4gICAgICAgIG1heFpvb206IHBhcnNlSW50KG1heFpvb20sIDEwKSxcbiAgICAgICAgcm90YXRpb246IHBhcnNlRmxvYXQobWFwRGF0YS5jZW50ZXIucm90YXRpb24pXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmlldyA9IG5ldyBWaWV3KHtcbiAgICAgICAgY2VudGVyOiB0cmFuc2Zvcm0oW3BhcnNlRmxvYXQobWFwRGF0YS5jZW50ZXIubG9uKSwgcGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlci5sYXQpXSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKSxcbiAgICAgICAgem9vbTogcGFyc2VGbG9hdChtYXBEYXRhLmNlbnRlci56b29tKSxcbiAgICAgICAgbWluWm9vbTogcGFyc2VJbnQobWluWm9vbSwgMTApLFxuICAgICAgICBtYXhab29tOiBwYXJzZUludChtYXhab29tLCAxMCksXG4gICAgICAgIHJvdGF0aW9uOiBwYXJzZUZsb2F0KG1hcERhdGEuY2VudGVyLnJvdGF0aW9uKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgdXNlcnBvc2l0aW9uXG4gICAgaWYgKG1hcERhdGEuZ2VvbG9jYXRpb24gJiYgIXBlcm1hbGluaykge1xuICAgICAgZ2VvTG9jYXRpb24gPSBuZXcgR2VvbG9jYXRpb24oe1xuICAgICAgICAvL3RyYWNraW5nOiAhbWFwRGF0YS5nZW9waWNrZXIsXG4gICAgICAgIHRyYWNraW5nOiB0cnVlLFxuICAgICAgICBwcm9qZWN0aW9uOiB2aWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgfSk7XG4gICAgICBnZW9Mb2NhdGlvbi5vbignY2hhbmdlJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBpZiAoZ2VvTG9jYXRpb24pIHtcbiAgICAgICAgICB2aWV3LnNldENlbnRlcihnZW9Mb2NhdGlvbi5nZXRQb3NpdGlvbigpKTtcbiAgICAgICAgICBpZiAobWFwRGF0YS5nZW9sb2NhdGlvbl96b29tKSB7XG4gICAgICAgICAgICB2aWV3LnNldFpvb20ocGFyc2VJbnQobWFwRGF0YS5nZW9sb2NhdGlvbl96b29tLCAxMCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBnZW9Mb2NhdGlvbi5zZXRUcmFja2luZyhmYWxzZSk7XG4gICAgICAgICAgaWYgKHNlbGYubWFwKSB7XG4gICAgICAgICAgICBzZWxmLm1hcC5zZXRWaWV3KHZpZXcpO1xuICAgICAgICAgICAgaWYgKHNlbGYuJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50KSB7XG4gICAgICAgICAgICAgIC8vIHV0aWxzLnJlZHJhd01hcFZpZXcoc2VsZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBlbmFibGUgZGVmYXVsdCBDb250cm9scy9JbnRlcmFjdGlvbnMgaWYgdGhlcmUgaXMgbm8gcHJvZmlsZVxuICAgIC8vIFtub3RlXTogbWF5YmUgY2hhbmdlIHRoaXMgaW4gdGhlIGZ1dHVyZT8gLT4gXCJubyBkZWZhdWx0XCItb3B0aW9uP1xuICAgIGlmICghbWFwRGF0YS5wcm9maWxlKSB7XG4gICAgICBjb250cm9scyA9IGNvbnRyb2xEZWZhdWx0cygpO1xuICAgICAgaW50ZXJhY3Rpb25zID0gaW50ZXJhY3Rpb25EZWZhdWx0cygpO1xuICAgIH1cblxuICAgIC8vIHNldCBkZWZhdWx0IGJhc2UgbGF5ZXIgd2hlbiBiYWNrZW5kIGdlb3BpY2tlciBpcyBlbmFibGVkXG4gICAgaWYgKG1hcERhdGEuZ2VvcGlja2VyICYmIG1hcERhdGEuZ2VvcGlja2VyLnR5cGUgPT09IFwiYmFja2VuZFwiKSB7XG4gICAgICBpZiAobWFwRGF0YS5kZWZhdWx0X2Jhc2VsYXllcikge1xuICAgICAgICB0aGlzLnByb3h5Lmhvb2tfYmFzZWxheWVyX2xvYWRlZC5wdXNoKGZ1bmN0aW9uIChiYXNlbGF5ZXJJZHMpIHtcbiAgICAgICAgICBpZiAoc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnMuaGFzT3duUHJvcGVydHkobWFwRGF0YS5kZWZhdWx0X2Jhc2VsYXllcikpIHtcbiAgICAgICAgICAgIHNlbGYucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5zaG93QmFzZUxheWVyKG1hcERhdGEuZGVmYXVsdF9iYXNlbGF5ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IC8vIGVuZCBpbm5lciBpZlxuICAgICAgdGhpcy5tYXAgPSBuZXcgTWFwKHtcbiAgICAgICAgY29udHJvbHM6IGNvbnRyb2xzLFxuICAgICAgICBpbnRlcmFjdGlvbnM6IGludGVyYWN0aW9ucyxcbiAgICAgICAgbGF5ZXJzOiBbXG4gICAgICAgICAgbmV3IEdyb3VwKHtcbiAgICAgICAgICAgIHRpdGxlOiAnQmFzZSBtYXBzJyxcbiAgICAgICAgICAgIGxheWVyczogW10sXG4gICAgICAgICAgICBjaGVja1N1bTogJ2Jhc2VNYXBzTGF5ZXInXG4gICAgICAgICAgfSlcbiAgICAgICAgXSxcbiAgICAgICAgbG9hZFRpbGVzV2hpbGVBbmltYXRpbmc6IHRydWUsXG4gICAgICAgIHRhcmdldDogbWFwRGF0YS5tYXBEaXYsXG4gICAgICAgIHZpZXc6IHZpZXdcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbml0aWFsaXplIE1hcFxuICAgICAgLy9cblxuICAgICAgaWYgKG1hcERhdGEuZGVmYXVsdF9iYXNlbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5wcm94eS5ob29rX2Jhc2VsYXllcl9sb2FkZWQucHVzaChmdW5jdGlvbiAoYmFzZWxheWVySWRzKSB7XG4gICAgICAgICAgaWYgKG1hcERhdGEuYmFzZWxheWVyICYmIGJhc2VsYXllcklkcy5pbmRleE9mKG1hcERhdGEuYmFzZWxheWVyLnRvU3RyaW5nKCkpID4gLTEpIHtcbiAgICAgICAgICAgIG1hcERhdGEuZGVmYXVsdF9iYXNlbGF5ZXIgPSBtYXBEYXRhLmJhc2VsYXllcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobWFwRGF0YS5jYWNoaW5nKSB7XG4gICAgICAgICAgICBpZiAodXRpbHMuZ2V0VmFsdWUoJ2Jhc2VsYXllcicpKSB7XG4gICAgICAgICAgICAgIG1hcERhdGEuZGVmYXVsdF9iYXNlbGF5ZXIgPSB1dGlscy5nZXRWYWx1ZSgnYmFzZWxheWVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLnNob3dCYXNlTGF5ZXIobWFwRGF0YS5kZWZhdWx0X2Jhc2VsYXllcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5tYXAgPSBuZXcgTWFwKHtcbiAgICAgICAgY29udHJvbHM6IGNvbnRyb2xzLFxuICAgICAgICBpbnRlcmFjdGlvbnM6IGludGVyYWN0aW9ucyxcbiAgICAgICAgbGF5ZXJzOiBbXG4gICAgICAgICAgbmV3IEdyb3VwKHtcbiAgICAgICAgICAgIHRpdGxlOiAnQmFzZSBtYXBzJyxcbiAgICAgICAgICAgIGxheWVyczogW10sXG4gICAgICAgICAgICBjaGVja1N1bTogJ2Jhc2VNYXBzTGF5ZXInXG4gICAgICAgICAgfSlcbiAgICAgICAgXSxcbiAgICAgICAgbG9hZFRpbGVzV2hpbGVBbmltYXRpbmc6IHRydWUsXG4gICAgICAgIHRhcmdldDogbWFwRGF0YS5tYXBEaXYsXG4gICAgICAgIHZpZXc6IHZpZXdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIG1hcERhdGEubWFwID0gdGhpcy5tYXA7XG5cbiAgICAvLyBzZXQgbWFwLXNpemUgYW5kIC1tYXJnaW5cbiAgICBkb21NYXBEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXBEYXRhLm1hcERpdik7XG4gICAgaWYgKCFkb21NYXBEaXYpIHtcbiAgICAgIGRvbU1hcERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiI1wiICsgbWFwRGF0YS5tYXBEaXYpO1xuICAgICAgaWYgKCFkb21NYXBEaXYpIHtcbiAgICAgICAgZG9tTWFwRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCIuXCIgKyBtYXBEYXRhLm1hcERpdik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRvbU1hcERpdiAmJiBkb21NYXBEaXYuc3R5bGUpIHtcbiAgICAgIGlmIChtYXBEYXRhLndpZHRoKSB7XG4gICAgICAgIGlmIChtYXBEYXRhLm1hcmdpbikge1xuICAgICAgICAgIGxldCBhcnJNYXJnaW5zID0gbWFwRGF0YS5tYXJnaW4uc3BsaXQoXCIgXCIpO1xuICAgICAgICAgIGxldCByaWdodE1hcmdpbiA9IDA7XG4gICAgICAgICAgbGV0IGxlZnRNYXJnaW4gPSAwO1xuICAgICAgICAgIHN3aXRjaCAoYXJyTWFyZ2lucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgcmlnaHRNYXJnaW4gPSBhcnJNYXJnaW5zWzFdO1xuICAgICAgICAgICAgICBsZWZ0TWFyZ2luID0gYXJyTWFyZ2luc1szXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgIHJpZ2h0TWFyZ2luID0gYXJyTWFyZ2luc1sxXTtcbiAgICAgICAgICAgICAgbGVmdE1hcmdpbiA9IGFyck1hcmdpbnNbMV07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICByaWdodE1hcmdpbiA9IGFyck1hcmdpbnNbMF07XG4gICAgICAgICAgICAgIGxlZnRNYXJnaW4gPSBhcnJNYXJnaW5zWzBdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gXCI9PVwiIGlzIGNvcnJlY3QgaGVyZSBzaW5jZSB3ZSB3YW50IHRvIGNoZWNrIG51bWJlciBhbmQgc3RyaW5nXG4gICAgICAgICAgaWYgKGxlZnRNYXJnaW4gPT0gMCkge1xuICAgICAgICAgICAgbGVmdE1hcmdpbiArPSBcInB4XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyaWdodE1hcmdpbiA9PSAwKSB7XG4gICAgICAgICAgICByaWdodE1hcmdpbiArPSBcInB4XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRvbU1hcERpdi5zdHlsZS53aWR0aCA9IFwiY2FsYyhcIiArIG1hcERhdGEud2lkdGggKyAgXCIgLSBcIiArIGxlZnRNYXJnaW4gKyBcIiAtIFwiICsgcmlnaHRNYXJnaW4gKyBcIilcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkb21NYXBEaXYuc3R5bGUud2lkdGggPSBtYXBEYXRhLndpZHRoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWFwRGF0YS5oZWlnaHQpIHtcbiAgICAgICAgZG9tTWFwRGl2LnN0eWxlLmhlaWdodCA9IG1hcERhdGEuaGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG1hcERhdGEuZ2VvcGlja2VyICYmIG1hcERhdGEuZ2VvcGlja2VyLnR5cGUgPT09IFwiYmFja2VuZFwiKSB7XG4gICAgICAgICAgbGV0IGZpZWxkc2V0SGVpZ2h0ID0gZG9tTWFwRGl2LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLmhlaWdodCA9ICdjYWxjKDEwMHZoIC0gJytmaWVsZHNldEhlaWdodCsncHgpJztcbiAgICAgICAgICBkb21NYXBEaXYuc3R5bGUubWluSGVpZ2h0ID0gJzQ4MHB4JztcbiAgICAgICAgICBkb21NYXBEaXYuc3R5bGUubWF4V2lkdGggPSAnMTAwdncnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChkb21NYXBEaXYucGFyZW50RWxlbWVudCAmJiBkb21NYXBEaXYucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50ICYmICFkb21NYXBEaXYucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50Lm9mZnNldEhlaWdodCkge1xuICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLmhlaWdodCA9ICcxMDB2aCc7XG4gICAgICAgICAgfSBlbHNlIGlmIChkb21NYXBEaXYucGFyZW50RWxlbWVudCAmJiBkb21NYXBEaXYucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBsZXQgaGVpZ2h0ID0gZG9tTWFwRGl2LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBpZiAoaGVpZ2h0IDwgMzIwKSB7XG4gICAgICAgICAgICAgIGhlaWdodCA9IDMyMDsgLy9taW5pbWFsIGRlZmF1bHQgdmFsdWUgaWYgbm90IHNldCBpbiBtYXAgY29uZmlndXJhdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLmhlaWdodCA9IGhlaWdodCsncHgnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1hcERhdGEubWFyZ2luKSB7XG4gICAgICAgIGRvbU1hcERpdi5zdHlsZS5wYWRkaW5nID0gbWFwRGF0YS5tYXJnaW47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybignY2FuIG5vdCBnZXQgZWxlbWVudCBieSBpZCBtYXBEYXRhLm1hcERpdicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHNhdmUgb3ZlcmxheWNvbnRhaW5lclxuICAgIHRoaXMuJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50ID0galF1ZXJ5KCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuJyArIGNzc0NvbnN0YW50cy5PTF9PVkVSTEFZQ09OVEFJTkVSX1NFKTtcbiAgICB0aGlzLm1hcC51cGRhdGVTaXplKCk7XG4gICAgdGhpcy5wcm94eS5pbml0aWFsaXplKCk7XG4gICAgLy8gdGhpcy5wcm94eS5sb2FkQmFzZUxheWVycygpO1xuICAgIC8vIHRoaXMucHJveHkubG9hZExheWVycygpO1xuICAgIC8vIC0tLVxuXG5cbiAgICAvLyBhZGQgU3Bpbm5lclxuICAgIHRoaXMuc3Bpbm5lciA9IG5ldyBTcGlubmVyKHtjbGFzc05hbWU6IGNzc0NvbnN0YW50cy5MQVJHRX0pO1xuICAgIC8vIGFkZCBtYXBIb3ZlclxuICAgIHRoaXMubWFwSG92ZXIgPSBuZXcgTWFwSG92ZXIoe21hcENvbnRyb2xsZXI6IHRoaXN9KTtcblxuICAgIC8vIGFkZCBpbnRlcmFjdGlvbnMgPT09XG4gICAgLy9cblxuICAgIC8vIG1vdXNlIG5hdmlnYXRpb25cbiAgICBpZiAobWFwRGF0YS5tb3VzZV9uYXYpIHtcbiAgICAgIC8vIGRyYWcgcGFuIGFuZCBraW5ldGljIHNjcm9sbGluZ1xuICAgICAgaWYgKG1hcERhdGEubW91c2VfbmF2LmRyYWdfcGFuKSB7XG4gICAgICAgIGtpbmV0aWMgPSBtYXBEYXRhLm1vdXNlX25hdi5raW5ldGljID8gbmV3IEtpbmV0aWMoLTAuMDA1LCAwLjA1LCAxMDApIDogbnVsbDtcbiAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IERyYWdQYW4oe2tpbmV0aWM6IGtpbmV0aWN9KSk7XG4gICAgICB9XG4gICAgICAvLyBtb3VzZXdoZWVsIHpvb21cbiAgICAgIGlmIChtYXBEYXRhLm1vdXNlX25hdi53aGVlbF96b29tKSB7XG4gICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBNb3VzZVdoZWVsWm9vbSgpKTtcbiAgICAgIH1cbiAgICAgIC8vIGRvdWJsZWNsaWNrIHpvb21cbiAgICAgIGlmIChtYXBEYXRhLm1vdXNlX25hdi5kb3VibGVjbGlja196b29tKSB7XG4gICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBEb3VibGVDbGlja1pvb20oKSk7XG4gICAgICB9XG4gICAgICAvLyBib3ggem9vbVxuICAgICAgaWYgKG1hcERhdGEubW91c2VfbmF2LmRyYWdfem9vbSkge1xuICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgRHJhZ1pvb20oe2NvbmRpdGlvbjogc2hpZnRLZXlPbmx5fSkpO1xuICAgICAgfVxuICAgICAgLy8gZHJhZyByb3RhdGUgJiB6b29tXG4gICAgICBpZiAobWFwRGF0YS5yb3RhdGUpIHtcbiAgICAgICAgbGV0IGN1c3RvbUNvbmRpdGlvbiA9IGZ1bmN0aW9uIChtYXBCcm93c2VyRXZlbnQpIHtcbiAgICAgICAgICB2YXIgYnJvd3NlckV2ZW50ID0gbWFwQnJvd3NlckV2ZW50Lm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgcmV0dXJuIChicm93c2VyRXZlbnQuY3RybEtleSAmJiBicm93c2VyRXZlbnQuc2hpZnRLZXkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBEcmFnUm90YXRlQW5kWm9vbSh7Y29uZGl0aW9uOiBjdXN0b21Db25kaXRpb259KSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHRvdWNoIG5hdmlnYXRpb25cbiAgICBpZiAobWFwRGF0YS50b3VjaF9uYXYpIHtcbiAgICAgIC8vIHJvdGF0ZSAocGluY2gpXG4gICAgICBpZiAobWFwRGF0YS50b3VjaF9uYXYucm90YXRlKSB7XG4gICAgICAgIHRoaXMubWFwLmFkZEludGVyYWN0aW9uKG5ldyBQaW5jaFJvdGF0ZSgpKTtcbiAgICAgIH1cbiAgICAgIC8vIHpvb20gKHBpbmNoKVxuICAgICAgaWYgKG1hcERhdGEudG91Y2hfbmF2Lnpvb20pIHtcbiAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IFBpbmNoWm9vbSh7Y29uc3RyYWluUmVzb2x1dGlvbjogdHJ1ZX0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8ga2V5Ym9hcmQgbmF2aWdhdGlvblxuICAgIGlmIChtYXBEYXRhLmtleWJvYXJkX25hdikge1xuICAgICAgLy8gcGFuIChhcnJvdyBrZXlzKVxuICAgICAgaWYgKG1hcERhdGEua2V5Ym9hcmRfbmF2LnBhbikge1xuICAgICAgICB0aGlzLm1hcC5hZGRJbnRlcmFjdGlvbihuZXcgS2V5Ym9hcmRQYW4oKSk7XG4gICAgICB9XG4gICAgICAvLyB6b29tIChcIitcIiBhbmQgXCItXCIga2V5KVxuICAgICAgaWYgKG1hcERhdGEua2V5Ym9hcmRfbmF2Lnpvb20pIHtcbiAgICAgICAgdGhpcy5tYXAuYWRkSW50ZXJhY3Rpb24obmV3IEtleWJvYXJkWm9vbSgpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyA9PT1cbiAgICAvLyBhZGQgY29udHJvbHMgPT09XG4gICAgdGhpcy5tYXBzQ29udHJvbHMgPSBuZXcgTWFwc0NvbnRyb2xzKHRoaXMpO1xuICAgIHRoaXMubWFwc0NvbnRyb2xzLmluaXQoKTtcblxuICAgIC8vIGFkZCBjb250YWluZXIgZm9yIHJlYWN0IGNvbXBvbmVudHNcbiAgICBpZiAobWFwRGF0YS5sYXllcnN3aXRjaGVyLmVuYWJsZSkge1xuICAgICAgaWYgKG1hcERhdGEuc3RhcmJvYXJkLmRpdikge1xuICAgICAgICB0aGlzLnJlYWN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5cIiArIG1hcERhdGEuc3RhcmJvYXJkLmRpdik7XG4gICAgICAgIGlmICghdGhpcy5yZWFjdENvbnRhaW5lcikge1xuICAgICAgICAgIHRoaXMucmVhY3RDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICB0aGlzLnJlYWN0Q29udGFpbmVyLmNsYXNzTmFtZSA9IFwiYzRnLXNpZGVib2FyZCBjNGctc3RhcmJvYXJkLWNvbnRhaW5lciBvbC11bnNlbGVjdGFibGVcIjtcbiAgICAgICAgICB0aGlzLiRvdmVybGF5Y29udGFpbmVyX3N0b3BldmVudC5hcHBlbmQodGhpcy5yZWFjdENvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZWFjdENvbnRhaW5lci5jbGFzc05hbWUgKz0gXCIgYzRnLWV4dGVybmFsIGM0Zy1zdGFyYm9hcmQtY29udGFpbmVyIG9sLXVuc2VsZWN0YWJsZVwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlYWN0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMucmVhY3RDb250YWluZXIuY2xhc3NOYW1lID0gXCJjNGctc2lkZWJvYXJkIGM0Zy1zdGFyYm9hcmQtY29udGFpbmVyIG9sLXVuc2VsZWN0YWJsZVwiO1xuICAgICAgICB0aGlzLiRvdmVybGF5Y29udGFpbmVyX3N0b3BldmVudC5hcHBlbmQodGhpcy5yZWFjdENvbnRhaW5lcik7XG4gICAgICB9XG4gICAgICBpZiAobWFwRGF0YS5zdGFyYm9hcmQub3Blbikge1xuICAgICAgICB0aGlzLnJlYWN0Q29udGFpbmVyLmNsYXNzTmFtZSArPSBcIiBjNGctb3BlblwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZWFjdENvbnRhaW5lci5jbGFzc05hbWUgKz0gXCIgYzRnLWNsb3NlXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1hcERhdGEuYmFzZWxheWVyc3dpdGNoZXIuZW5hYmxlKSB7XG4gICAgICBpZiAobWFwRGF0YS5iYXNlbGF5ZXJzd2l0Y2hlci5kaXYpIHtcbiAgICAgICAgdGhpcy5iYXNlbGF5ZXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiICsgbWFwRGF0YS5iYXNlbGF5ZXJzd2l0Y2hlci5kaXYpO1xuICAgICAgICBpZiAoIXRoaXMuYmFzZWxheWVyQ29udGFpbmVyKSB7XG4gICAgICAgICAgdGhpcy5iYXNlbGF5ZXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICB0aGlzLmJhc2VsYXllckNvbnRhaW5lci5jbGFzc05hbWUgPSBcImM0Zy1zaWRlYm9hcmQgYzRnLWJhc2VsYXllci1jb250YWluZXIgb2wtdW5zZWxlY3RhYmxlXCI7XG4gICAgICAgICAgdGhpcy4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQuYXBwZW5kKHRoaXMuYmFzZWxheWVyQ29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmJhc2VsYXllckNvbnRhaW5lci5jbGFzc05hbWUgKz0gXCIgYzRnLWV4dGVybmFsIGM0Zy1iYXNlbGF5ZXItY29udGFpbmVyIG9sLXVuc2VsZWN0YWJsZVwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJhc2VsYXllckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmJhc2VsYXllckNvbnRhaW5lci5jbGFzc05hbWUgPSBcImM0Zy1zaWRlYm9hcmQgYzRnLWJhc2VsYXllci1jb250YWluZXIgb2wtdW5zZWxlY3RhYmxlXCI7XG4gICAgICAgIHRoaXMuJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50LmFwcGVuZCh0aGlzLmJhc2VsYXllckNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgICBpZiAobWFwRGF0YS5zdGFyYm9hcmQub3Blbikge1xuICAgICAgICB0aGlzLmJhc2VsYXllckNvbnRhaW5lci5jbGFzc05hbWUgKz0gXCIgYzRnLW9wZW5cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYmFzZWxheWVyQ29udGFpbmVyLmNsYXNzTmFtZSArPSBcIiBjNGctY2xvc2VcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmZWF0dXJlIGZpbHRlclxuICAgIGlmIChtYXBEYXRhLmZpbHRlckRpdikge1xuICAgICAgbWFwRGF0YS5maWx0ZXJEaXYgPSBtYXBEYXRhLmZpbHRlckRpdlswXSA9PT0gXCIuXCIgfHwgbWFwRGF0YS5maWx0ZXJEaXZbMF0gPT09IFwiI1wiID8gbWFwRGF0YS5maWx0ZXJEaXYgOiBcIi5cIiArIG1hcERhdGEuZmlsdGVyRGl2O1xuICAgICAgdGhpcy5maWx0ZXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxkaXY+XCJsb2FkaW5nLi4uXCI8L2Rpdj59PlxuICAgICAgICAgIDxGZWF0dXJlRmlsdGVyIHRhcmdldD17ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihtYXBEYXRhLmZpbHRlckRpdil9IG1hcENvbnRyb2xsZXI9e3RoaXN9IGRpcmVjdGlvbj17XCJ0b3BcIn0gY2xhc3NOYW1lPXtcImM0Zy1mZWF0dXJlLWZpbHRlclwifS8+XG4gICAgICAgIDwvU3VzcGVuc2U+LCB0aGlzLmZpbHRlckNvbnRhaW5lcik7XG4gICAgICAkKG1hcERhdGEuZmlsdGVyRGl2KS5hcHBlbmQodGhpcy5maWx0ZXJDb250YWluZXIpO1xuICAgIH1cblxuICAgIC8vIGluZm9wYWdlIGNvbnRhaW5lclxuICAgIGlmIChtYXBEYXRhLmxlZ2VuZC5lbmFibGUpIHtcbiAgICAgIGlmIChtYXBEYXRhLmxlZ2VuZC5kaXYpIHtcbiAgICAgICAgdGhpcy5pbmZvUGFnZUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBtYXBEYXRhLmxlZ2VuZC5kaXYpO1xuICAgICAgICBpZiAoIXRoaXMuaW5mb1BhZ2VDb250YWluZXIpIHtcbiAgICAgICAgICB0aGlzLmluZm9QYWdlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgdGhpcy5pbmZvUGFnZUNvbnRhaW5lci5jbGFzc05hbWUgPSBcImM0Zy1zaWRlYm9hcmQgYzRnLWluZm9wYWdlLWNvbnRhaW5lciBvbC11bnNlbGVjdGFibGUgYzRnLWNsb3NlXCI7XG4gICAgICAgICAgdGhpcy4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQuYXBwZW5kKHRoaXMuaW5mb1BhZ2VDb250YWluZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaW5mb1BhZ2VDb250YWluZXIuY2xhc3NOYW1lICs9IFwiIGM0Zy1leHRlcm5hbCBjNGctaW5mb3BhZ2UtY29udGFpbmVyIG9sLXVuc2VsZWN0YWJsZVwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmluZm9QYWdlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuaW5mb1BhZ2VDb250YWluZXIuY2xhc3NOYW1lID0gXCJjNGctc2lkZWJvYXJkIGM0Zy1pbmZvcGFnZS1jb250YWluZXIgb2wtdW5zZWxlY3RhYmxlIGM0Zy1jbG9zZVwiO1xuICAgICAgICB0aGlzLiRvdmVybGF5Y29udGFpbmVyX3N0b3BldmVudC5hcHBlbmQodGhpcy5pbmZvUGFnZUNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbWVhc3VyZXRvb2xzIGNvbnRhaW5lclxuICAgIGlmIChtYXBEYXRhLm1lYXN1cmV0b29scy5lbmFibGUpIHtcbiAgICAgIGlmIChtYXBEYXRhLm1lYXN1cmV0b29scy5kaXYpIHtcbiAgICAgICAgdGhpcy5tZWFzdXJldG9vbHNDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiICsgbWFwRGF0YS5tZWFzdXJldG9vbHMuZGl2KTtcbiAgICAgICAgaWYgKCF0aGlzLm1lYXN1cmV0b29sc0NvbnRhaW5lcikge1xuICAgICAgICAgIHRoaXMubWVhc3VyZXRvb2xzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgdGhpcy5tZWFzdXJldG9vbHNDb250YWluZXIuY2xhc3NOYW1lID0gXCJjNGctc2lkZWJvYXJkIGM0Zy1tZWFzdXJldG9vbHMtY29udGFpbmVyIG9sLXVuc2VsZWN0YWJsZSBjNGctY2xvc2VcIjtcbiAgICAgICAgICB0aGlzLiRvdmVybGF5Y29udGFpbmVyX3N0b3BldmVudC5hcHBlbmQodGhpcy5tZWFzdXJldG9vbHNDb250YWluZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubWVhc3VyZXRvb2xzQ29udGFpbmVyLmNsYXNzTmFtZSArPSBcIiBjNGctZXh0ZXJuYWwgYzRnLW1lYXN1cmV0b29scy1jb250YWluZXIgb2wtdW5zZWxlY3RhYmxlXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWVhc3VyZXRvb2xzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMubWVhc3VyZXRvb2xzQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwiYzRnLXNpZGVib2FyZCBjNGctbWVhc3VyZXRvb2xzLWNvbnRhaW5lciBvbC11bnNlbGVjdGFibGUgYzRnLWNsb3NlXCI7XG4gICAgICAgIHRoaXMuJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50LmFwcGVuZCh0aGlzLm1lYXN1cmV0b29sc0NvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcGVybWFsaW5rIGNvbnRhaW5lclxuICAgIGlmIChtYXBEYXRhLnBlcm1hbGluay5lbmFibGUpIHtcbiAgICAgIGlmIChtYXBEYXRhLnBlcm1hbGluay5kaXYpIHtcbiAgICAgICAgdGhpcy5wZXJtYWxpbmtDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmM0Zy1leHRlcm5hbC1wZXJtYWxpbmstY29udGFpbmVyXCIpO1xuICAgICAgICBpZiAoIXRoaXMucGVybWFsaW5rQ29udGFpbmVyKSB7XG4gICAgICAgICAgdGhpcy5wZXJtYWxpbmtDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICB0aGlzLnBlcm1hbGlua0NvbnRhaW5lci5jbGFzc05hbWUgPSBcImM0Zy1zaWRlYm9hcmQgYzRnLXBlcm1hbGluay1jb250YWluZXIgb2wtdW5zZWxlY3RhYmxlIGM0Zy1jbG9zZVwiO1xuICAgICAgICAgIHRoaXMuJG92ZXJsYXljb250YWluZXJfc3RvcGV2ZW50LmFwcGVuZCh0aGlzLnBlcm1hbGlua0NvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5wZXJtYWxpbmtDb250YWluZXIuY2xhc3NOYW1lICs9IFwiIGM0Zy1leHRlcm5hbFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBlcm1hbGlua0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLnBlcm1hbGlua0NvbnRhaW5lci5jbGFzc05hbWUgPSBcImM0Zy1zaWRlYm9hcmQgYzRnLXBlcm1hbGluay1jb250YWluZXIgb2wtdW5zZWxlY3RhYmxlIGM0Zy1jbG9zZVwiO1xuICAgICAgICB0aGlzLiRvdmVybGF5Y29udGFpbmVyX3N0b3BldmVudC5hcHBlbmQodGhpcy5wZXJtYWxpbmtDb250YWluZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXBEYXRhLm92ZXJ2aWV3bWFwKSB7XG4gICAgICB0aGlzLm92ZXJ2aWV3Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHRoaXMub3ZlcnZpZXdDb250YWluZXIuY2xhc3NOYW1lID0gXCJjNGctc2lkZWJvYXJkIGM0Zy1vdmVydmlld21hcC1jb250YWluZXIgYzRnLWNsb3NlXCI7XG4gICAgICB0aGlzLiRvdmVybGF5Y29udGFpbmVyX3N0b3BldmVudC5hcHBlbmQodGhpcy5vdmVydmlld0NvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgLy8gQFRvRG8gbWFwRGF0YS5hZGRpdGlvbmFsUGFuZWwgaXMgYWx3YXlzIHRydWUsIGJlY2F1c2UgaXQgaXMgc2V0IGFzIGFuIG5ldyBvYmplY3QgaW4gdGhlIGJlZ2lubmluZy4gVGhlcmVmb3JlIHRoZSBzZWNvbmQgcGFyYW1ldGVyIG9mIHRoZSBib29sZWFuIGlzIHJlcXVlc3RlZCwgd2hpY2ggdGhyb3dzIGFuIGVycm9yXG4gICAgLy8gYWRkaXRpb25hbFBhbmVsIGlzIGZ1cnRoZXJtb3JlIG5vdCBmb3VuZCBhbnl3aGVyZSBpbiBNYXBzIGFuZCBzaG91bGQgYmUgbG9hZGVkIG92ZXIgYSBob29rXG5cbiAgICAvLyBzdGFyYm9hcmRcbiAgICBpZiAobWFwRGF0YS5nZW9waWNrZXIgJiYgbWFwRGF0YS5nZW9waWNrZXIudHlwZSA9PT0gXCJiYWNrZW5kXCIpIHtcbiAgICAgIGVuYWJsZVN0YXJib2FyZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHBvcHVwIG1hcmdpblxuICAgIC8vdGhpcy5sZWZ0U2xpZGVFbGVtZW50cy5wdXNoKCcub2wtb3ZlcmxheS1jb250YWluZXInKTtcbiAgICAvL3RoaXMucmlnaHRTbGlkZUVsZW1lbnRzLnB1c2goJy5vbC1vdmVybGF5LWNvbnRhaW5lcicpO1xuXG4gICAgLy8gaWYgKHR5cGVvZiBTdGFyYm9hcmQgPT09ICdmdW5jdGlvbicgJiYgZW5hYmxlU3RhcmJvYXJkICYmICF0aGlzLmNvbnRyb2xzLnN0YXJib2FyZCkge1xuICAgIC8vICAgLy8gdGhpcy5pbml0aWFsaXplU3RhcmJvYXJkKCk7XG4gICAgLy8gfVxuICAgIC8vdGhlbWVEYXRhXG4gICAgaWYgKG1hcERhdGEudGhlbWVEYXRhKSB7XG4gICAgICBkb21NYXBEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXBEYXRhLm1hcERpdik7XG4gICAgICBpZiAobWFwRGF0YS50aGVtZURhdGFbJ3VzZWdsb2JhbCddKSB7XG4gICAgICAgIGRvbU1hcERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cmFwcGVyJyk7XG4gICAgICB9XG5cbiAgICAgIGxldCBtYXBXaWR0aCA9IFwiMTAwJVwiO1xuICAgICAgbGV0IG1hcEhlaWdodCA9IFwiMTAwJVwiO1xuXG4gICAgICBpZiAobWFwRGF0YS53aWR0aCkge1xuICAgICAgICBtYXBXaWR0aCA9IG1hcERhdGEud2lkdGg7XG4gICAgICB9XG4gICAgICBpZiAobWFwRGF0YS5oZWlnaHQpIHtcbiAgICAgICAgbWFwSGVpZ2h0ID0gbWFwRGF0YS5oZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZGl2SGVpZ2h0ID0gZG9tTWFwRGl2ICYmIGRvbU1hcERpdi5vZmZzZXRIZWlnaHQgPyBkb21NYXBEaXYub2Zmc2V0SGVpZ2h0IDogZmFsc2U7XG4gICAgICAgIGlmICghZGl2SGVpZ2h0KSB7XG4gICAgICAgICAgbWFwSGVpZ2h0ID0gXCIxMDB2aFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hcEhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRvbU1hcERpdiAmJiBkb21NYXBEaXYuc3R5bGUpIHtcbiAgICAgICAgZG9tTWFwRGl2LnN0eWxlLnNldFByb3BlcnR5KCctLW1hcC1oZWlnaHQnLCBtYXBIZWlnaHQpO1xuICAgICAgICBkb21NYXBEaXYuc3R5bGUuc2V0UHJvcGVydHkoJy0tbWFwLXdpZHRoJywgbWFwV2lkdGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAobWFwRGF0YS50aGVtZURhdGFbJ21haW5jb2xvciddKSB7XG4gICAgICAgIHZhciBtYWluQ29sb3IgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkobWFwRGF0YS50aGVtZURhdGFbJ21haW5jb2xvciddLCBtYXBEYXRhLnRoZW1lRGF0YVsnbWFpbm9wYWNpdHknXSk7XG4gICAgICAgIHZhciBmb250Q29sb3IgPSB1dGlscy5nZXRSZ2JhRnJvbUhleEFuZE9wYWNpdHkobWFwRGF0YS50aGVtZURhdGFbJ2ZvbnRjb2xvciddLCBtYXBEYXRhLnRoZW1lRGF0YVsnZm9udG9wYWNpdHknXSk7XG4gICAgICAgIHZhciBzaGFkb3dDb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShtYXBEYXRhLnRoZW1lRGF0YVsnc2hhZG93Y29sb3InXSwgbWFwRGF0YS50aGVtZURhdGFbJ3NoYWRvd29wYWNpdHknXSk7XG4gICAgICAgIHZhciBwb3B1cE1haW5Db2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShtYXBEYXRhLnRoZW1lRGF0YVsncG9wdXBNYWluY29sb3InXSwgbWFwRGF0YS50aGVtZURhdGFbJ3BvcHVwTWFpbm9wYWNpdHknXSk7XG4gICAgICAgIHZhciBwb3B1cEZvbnRDb2xvciA9IHV0aWxzLmdldFJnYmFGcm9tSGV4QW5kT3BhY2l0eShtYXBEYXRhLnRoZW1lRGF0YVsncG9wdXBGb250Y29sb3InXSwgbWFwRGF0YS50aGVtZURhdGFbJ3BvcHVwRm9udG9wYWNpdHknXSk7XG5cbiAgICAgICAgaWYgKGRvbU1hcERpdiAmJiBkb21NYXBEaXYuc3R5bGUpIHtcbiAgICAgICAgICBkb21NYXBEaXYuc3R5bGUuc2V0UHJvcGVydHkoJy0tbWFpbi1jb2xvcicsIG1haW5Db2xvcik7XG4gICAgICAgICAgZG9tTWFwRGl2LnN0eWxlLnNldFByb3BlcnR5KCctLWZvbnQtY29sb3InLCBmb250Q29sb3IpO1xuICAgICAgICAgIGRvbU1hcERpdi5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1wdS1tYWluLWNvbG9yJywgcG9wdXBNYWluQ29sb3IpO1xuICAgICAgICAgIGRvbU1hcERpdi5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1wdS1mb250LWNvbG9yJywgcG9wdXBGb250Q29sb3IpO1xuICAgICAgICAgIGRvbU1hcERpdi5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1zaGFkb3ctY29sb3InLCBzaGFkb3dDb2xvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRvbU1hcERpdiAmJiBtYXBEYXRhLnRoZW1lRGF0YVsnYnV0dG9ucmFkaXVzJ10pIHtcbiAgICAgICAgZG9tTWFwRGl2LnN0eWxlLnNldFByb3BlcnR5KCctLWJ1dHRvbi1yYWRpdXMtcGVyY2VudCcsIG1hcERhdGEudGhlbWVEYXRhWydidXR0b25yYWRpdXMnXSArICclJyk7XG4gICAgICAgIGRvbU1hcERpdi5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1idXR0b24tcmFkaXVzLXBpeGVsJywgbWFwRGF0YS50aGVtZURhdGFbJ2J1dHRvbnJhZGl1cyddICsgJ3B4Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb21NYXBEaXYgJiYgbWFwRGF0YS50aGVtZURhdGFbJ2J1dHRvbnNpemUnXSkge1xuICAgICAgICBkb21NYXBEaXYuc3R5bGUuc2V0UHJvcGVydHkoJy0tYnV0dG9uLXNpemUtcGl4ZWwnLCBtYXBEYXRhLnRoZW1lRGF0YVsnYnV0dG9uc2l6ZSddICsgJ3B4Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb21NYXBEaXYgJiYgbWFwRGF0YS50aGVtZURhdGFbJ2ZvbnRzaXplJ10pIHtcbiAgICAgICAgZG9tTWFwRGl2LnN0eWxlLnNldFByb3BlcnR5KCctLWJ1dHRvbi1mb250c2l6ZS1waXhlbCcsIG1hcERhdGEudGhlbWVEYXRhWydmb250c2l6ZSddICsgJ3B4Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb21NYXBEaXYgJiYgbWFwRGF0YS50aGVtZURhdGFbJ3BvcHVwTWF4V2lkdGgnXSkge1xuICAgICAgICBkb21NYXBEaXYuc3R5bGUuc2V0UHJvcGVydHkoJy0tcG9wdXAtbWF4LXdpZHRoJywgbWFwRGF0YS50aGVtZURhdGFbJ3BvcHVwTWF4V2lkdGgnXSArICclJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIHRoaXMubWFwLm9uKFwiY2hhbmdlOnNpemVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICBzY29wZS5zZXRTdGF0ZSh7fSk7XG4gICAgICBpZiAoc2NvcGUubWFwICYmIHNjb3BlLm1hcC5nZXRTaXplKCkpIHtcbiAgICAgICAgZG9tTWFwRGl2LnN0eWxlLnNldFByb3BlcnR5KCctLW1hcC1oZWlnaHQnLCBzY29wZS5tYXAuZ2V0U2l6ZSgpWzFdICsgXCJweFwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldExheWVyc0luaXRpYWwob2JqTGF5ZXJzLCBhcnJMYXllcnMpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG9iakxheWVyczogb2JqTGF5ZXJzLFxuICAgICAgYXJyTGF5ZXJTdGF0ZXM6IGFyckxheWVyc1xuICAgIH0pO1xuICB9XG5cbiAgc2V0T2JqTGF5ZXJzKG9iakxheWVycykge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgb2JqTGF5ZXJzOiBvYmpMYXllcnNcbiAgICB9KTtcbiAgfVxuXG4gIHNldExvY1N0eWxlcyhzdHlsZURhdGEpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHN0eWxlRGF0YTogc3R5bGVEYXRhXG4gICAgfSk7XG4gIH1cblxuICBzZXRMYXllclN0YXRlcyhhcnJMYXllclN0YXRlcykge1xuICAgIGlmICh0aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhcnJMYXllclN0YXRlczogYXJyTGF5ZXJTdGF0ZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBzZXRMYXllclN0YXRlV2l0aElkIChpZCwgYWN0aXZlKSB7XG4gICAgbGV0IGFyckxheWVyU3RhdGVzID0gdGhpcy5zdGF0ZS5hcnJMYXllclN0YXRlcztcbiAgICBmb3IgKGxldCBpIGluIGFyckxheWVyU3RhdGVzKSB7XG4gICAgICBpZiAoYXJyTGF5ZXJTdGF0ZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgYXJyTGF5ZXJTdGF0ZXNbaV0gPSB0aGlzLmdldExheWVyU3RhdGVXaXRoSWQoYXJyTGF5ZXJTdGF0ZXNbaV0sIGlkLCBhY3RpdmUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGFyckxheWVyU3RhdGVzOiBhcnJMYXllclN0YXRlc1xuICAgIH0pO1xuICB9XG4gIGdldExheWVyU3RhdGVXaXRoSWQgKGxheWVyU3RhdGUsIGlkLCBhY3RpdmUpIHtcbiAgICBpZiAobGF5ZXJTdGF0ZS5pZCA9PT0gaWQpIHtcbiAgICAgIGxheWVyU3RhdGUuYWN0aXZlID0gYWN0aXZlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpIGluIGxheWVyU3RhdGUuY2hpbGRTdGF0ZXMpIHtcbiAgICAgIGlmIChsYXllclN0YXRlLmNoaWxkU3RhdGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIGxheWVyU3RhdGUuY2hpbGRTdGF0ZXNbaV0gPSB0aGlzLmdldExheWVyU3RhdGVXaXRoSWQobGF5ZXJTdGF0ZS5jaGlsZFN0YXRlc1tpXSwgaWQsIGFjdGl2ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsYXllclN0YXRlO1xuICB9XG5cbiAgY2hhbmdlQWN0aXZlTGF5ZXJzIChiYXNlTGF5ZXJJZCkge1xuICAgIGxldCBuZXdMYXllclN0YXRlID0gdGhpcy5zdGF0ZS5hcnJMYXllclN0YXRlcztcbiAgICBmb3IgKGxldCBzdGF0ZUlkIGluIG5ld0xheWVyU3RhdGUpIHtcbiAgICAgIGlmIChuZXdMYXllclN0YXRlLmhhc093blByb3BlcnR5KHN0YXRlSWQpKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm9iakxheWVyc1tzdGF0ZUlkXS5hY3RpdmF0ZVdpdGhCbCAhPT0gXCJhbGxcIikge1xuICAgICAgICAgIGxldCBvbGRTdGF0ZSA9IG5ld0xheWVyU3RhdGVbc3RhdGVJZF0uYWN0aXZlO1xuICAgICAgICAgIG5ld0xheWVyU3RhdGVbc3RhdGVJZF0uYWN0aXZlID0gISF0aGlzLnN0YXRlLm9iakxheWVyc1tzdGF0ZUlkXS5hY3RpdmF0ZVdpdGhCbC5maW5kKChlbGVtZW50KSA9PiBlbGVtZW50ID09PSBiYXNlTGF5ZXJJZCk7XG4gICAgICAgICAgaWYgKG9sZFN0YXRlICE9PSBuZXdMYXllclN0YXRlW3N0YXRlSWRdLmFjdGl2ZSkge1xuICAgICAgICAgICAgaWYgKG5ld0xheWVyU3RhdGVbc3RhdGVJZF0uYWN0aXZlKSB7XG4gICAgICAgICAgICAgIHRoaXMucHJveHkubGF5ZXJDb250cm9sbGVyLnNob3codGhpcy5zdGF0ZS5vYmpMYXllcnNbc3RhdGVJZF0uaWQsIHRoaXMuc3RhdGUub2JqTGF5ZXJzW3N0YXRlSWRdLmZlYXR1cmVzIHx8IHRoaXMuc3RhdGUub2JqTGF5ZXJzW3N0YXRlSWRdLnZlY3RvckxheWVyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMucHJveHkubGF5ZXJDb250cm9sbGVyLmhpZGUodGhpcy5zdGF0ZS5vYmpMYXllcnNbc3RhdGVJZF0uaWQsIHRoaXMuc3RhdGUub2JqTGF5ZXJzW3N0YXRlSWRdLmZlYXR1cmVzIHx8IHRoaXMuc3RhdGUub2JqTGF5ZXJzW3N0YXRlSWRdLnZlY3RvckxheWVyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBjaGlsZElkIGluIG5ld0xheWVyU3RhdGVbc3RhdGVJZF0uY2hpbGRTdGF0ZXMpIHtcbiAgICAgICAgICBpZiAobmV3TGF5ZXJTdGF0ZVtzdGF0ZUlkXS5jaGlsZFN0YXRlcy5oYXNPd25Qcm9wZXJ0eShjaGlsZElkKSkge1xuICAgICAgICAgICAgbmV3TGF5ZXJTdGF0ZVtzdGF0ZUlkXS5jaGlsZFN0YXRlc1tjaGlsZElkXSA9IHRoaXMuY2hhbmdlQWN0aXZlTGF5ZXJDaGlsZHMobmV3TGF5ZXJTdGF0ZVtzdGF0ZUlkXS5jaGlsZFN0YXRlc1tjaGlsZElkXSwgdGhpcy5zdGF0ZS5vYmpMYXllcnNbc3RhdGVJZF0uY2hpbGRzW2NoaWxkSWRdLCBiYXNlTGF5ZXJJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYXJyTGF5ZXJTdGF0ZXM6IG5ld0xheWVyU3RhdGVcbiAgICB9KTtcbiAgfVxuXG4gIGNoYW5nZUFjdGl2ZUxheWVyQ2hpbGRzIChjaGlsZFN0YXRlLCBjaGlsZCwgYmFzZUxheWVySWQpIHtcbiAgICBpZiAoY2hpbGQuYWN0aXZhdGVXaXRoQmwgIT09IFwiYWxsXCIpIHtcbiAgICAgIGxldCBvbGRTdGF0ZSA9IGNoaWxkU3RhdGUuYWN0aXZlO1xuICAgICAgY2hpbGRTdGF0ZS5hY3RpdmUgPSAhIWNoaWxkLmFjdGl2YXRlV2l0aEJsLmZpbmQoKGVsZW1lbnQpID0+IGVsZW1lbnQgPT09IGJhc2VMYXllcklkKTtcbiAgICAgIGlmIChvbGRTdGF0ZSAhPT0gY2hpbGRTdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgaWYgKGNoaWxkU3RhdGUuYWN0aXZlKSB7XG4gICAgICAgICAgdGhpcy5wcm94eS5sYXllckNvbnRyb2xsZXIuc2hvdyhjaGlsZC5pZCwgY2hpbGQuZmVhdHVyZXMgfHwgY2hpbGQudmVjdG9yTGF5ZXIpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5wcm94eS5sYXllckNvbnRyb2xsZXIuaGlkZShjaGlsZC5pZCwgY2hpbGQuZmVhdHVyZXMgfHwgY2hpbGQudmVjdG9yTGF5ZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgc3RhdGVJZCBpbiBjaGlsZFN0YXRlLmNoaWxkU3RhdGVzKSB7XG4gICAgICBpZiAoY2hpbGRTdGF0ZS5jaGlsZFN0YXRlcy5oYXNPd25Qcm9wZXJ0eShzdGF0ZUlkKSkge1xuICAgICAgICBjaGlsZFN0YXRlLmNoaWxkU3RhdGVzW3N0YXRlSWRdID0gdGhpcy5jaGFuZ2VBY3RpdmVMYXllckNoaWxkcyhjaGlsZFN0YXRlLmNoaWxkU3RhdGVzW3N0YXRlSWRdLCBjaGlsZC5jaGlsZHNbc3RhdGVJZF0sIGJhc2VMYXllcklkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkU3RhdGU7XG4gIH1cblxuICBzZXRUYWJMYXllcnMobGF5ZXJzLCBzdGF0ZXMpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG9ialRhYkxheWVyczogbGF5ZXJzLFxuICAgICAgYXJyVGFiTGF5ZXJTdGF0ZXM6IHN0YXRlc1xuICAgIH0pO1xuICB9XG5cbiAgc2V0VGFiU3RhdGVzKHN0YXRlcykge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYXJyVGFiTGF5ZXJTdGF0ZXM6IHN0YXRlc1xuICAgIH0pO1xuICB9XG5cbiAgaGlkZU90aGVyQ29tcG9uZW50cyhvYmpDb21wb25lbnQpIHtcbiAgICBsZXQgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cztcbiAgICBmb3IgKGxldCBrZXkgaW4gY29tcG9uZW50cykge1xuICAgICAgaWYgKGNvbXBvbmVudHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBpZiAoY29tcG9uZW50c1trZXldICYmIChjb21wb25lbnRzW2tleV0gIT09IG9iakNvbXBvbmVudCkpIHtcbiAgICAgICAgICBjb21wb25lbnRzW2tleV0uc2V0U3RhdGUoe29wZW46ZmFsc2V9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBjaGFuZ2VDb2xsYXBzZVN0YXRlKGlkLCBzdGF0ZSl7XG4gICAgbGV0IG5ld1N0YXRlID0gdGhpcy5zdGF0ZS5hcnJMYXllclN0YXRlcztcbiAgICBuZXdTdGF0ZVtpZF0gPSBzdGF0ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGFyckxheWVyU3RhdGVzOiBuZXdTdGF0ZVxuICAgIH0pO1xuICB9XG5cbiAgaGlkZU90aGVyQm90dG9tQ29tcG9uZW50cyhvYmpDb21wb25lbnQpIHtcbiAgICBsZXQgY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cztcbiAgICBmb3IgKGxldCBrZXkgaW4gY29tcG9uZW50cykge1xuICAgICAgaWYgKGNvbXBvbmVudHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBpZiAoY29tcG9uZW50c1trZXldICYmIChjb21wb25lbnRzW2tleV0gIT09IG9iakNvbXBvbmVudCkpIHtcbiAgICAgICAgICBjb21wb25lbnRzW2tleV0uc2V0U3RhdGUoe29wZW5SZXN1bHRzOiBmYWxzZX0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICBjb25zdCBtYXBEYXRhID0gdGhpcy5kYXRhO1xuICAgIGxldCB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIG1hcERhdGEubWFwRGl2ICsgJyAuYzRnLWNvbnRyb2wtY29udGFpbmVyLXRvcC1sZWZ0Jyk7XG4gICAgbGV0IGNvbXBvbmVudHMgPSBbXG4gICAgICB7bmFtZTogXCJsYXllcnN3aXRjaGVyXCIsIHNvcnQ6IG1hcERhdGEubGF5ZXJzd2l0Y2hlci5lbmFibGV9LFxuICAgICAge25hbWU6IFwiZ2Vvc2VhcmNoXCIsIHNvcnQ6IG1hcERhdGEuZ2Vvc2VhcmNoLmVuYWJsZX0sXG4gICAgICB7bmFtZTogXCJsZWdlbmRcIiwgc29ydDogbWFwRGF0YS5sZWdlbmQuZW5hYmxlfSxcbiAgICAgIHtuYW1lOiBcImJhc2VsYXllcnN3aXRjaGVyXCIsIHNvcnQ6IG1hcERhdGEuYmFzZWxheWVyc3dpdGNoZXIuZW5hYmxlfSxcbiAgICAgIHtuYW1lOiBcIm1lYXN1cmV0b29sc1wiLCBzb3J0OiBtYXBEYXRhLm1lYXN1cmV0b29scy5lbmFibGV9LFxuICAgICAge25hbWU6IFwicGVybWFsaW5rXCIsIHNvcnQ6IG1hcERhdGEucGVybWFsaW5rLmVuYWJsZX0sXG4gICAgICB7bmFtZTogXCJ6b29tXCIsIHNvcnQ6IG1hcERhdGEuem9vbX0sXG4gICAgICB7bmFtZTogXCJ6b29tUG9zaXRpb25cIiwgc29ydDogbWFwRGF0YS56b29tUG9zaXRpb259LFxuICAgICAge25hbWU6IFwiem9vbUhvbWVcIiwgc29ydDogbWFwRGF0YS56b29tSG9tZX0sXG4gICAgICB7bmFtZTogXCJ6b29tRXh0ZW50XCIsIHNvcnQ6IG1hcERhdGEuem9vbUV4dGVudH0sXG4gICAgICB7bmFtZTogXCJmdWxsc2NyZWVuXCIsIHNvcnQ6IG1hcERhdGEuZnVsbHNjcmVlbn0sXG4gICAgICB7bmFtZTogXCJwcmludFwiLCBzb3J0OiBtYXBEYXRhLnByaW50fSxcbiAgICAgIHtuYW1lOiBcInJvdGF0ZVwiLCBzb3J0OiBtYXBEYXRhLnJvdGF0ZX0sXG4gICAgICB7bmFtZTogXCJncmF0aWN1bGVcIiwgc29ydDogbWFwRGF0YS5ncmF0aWN1bGV9LFxuICAgICAge25hbWU6IFwib3ZlcnZpZXdcIiwgc29ydDogbWFwRGF0YS5vdmVydmlld21hcH0sXG4gICAgICB7bmFtZTogXCJyb3V0ZXJcIiwgc29ydDogbWFwRGF0YS5yb3V0ZXJfZW5hYmxlfSxcbiAgICAgIHtuYW1lOiBcImVkaXRvclwiLCBzb3J0OiBtYXBEYXRhLmVkaXRvci5lbmFibGV9XG4gICAgXTtcbiAgICBsZXQgc2JQb3J0YWwgPSBcIlwiO1xuICAgIGlmIChtYXBEYXRhLmxheWVyc3dpdGNoZXIuZW5hYmxlKSB7XG4gICAgICBzYlBvcnRhbCA9IFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChcbiAgICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxkaXY+XCJMb29vbDwvZGl2Pn0+XG4gICAgICAgICAgICA8U3RhcmJvYXJkUGFuZWwgcmVmPXsobm9kZSkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMuc3RhcmJvYXJkID0gbm9kZTtcbiAgICAgICAgICAgIH19IHRhcmdldD17dGFyZ2V0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcENvbnRyb2xsZXI9e3RoaXN9IG9iakxheWVycz17dGhpcy5zdGF0ZS5vYmpMYXllcnN9IHN0eWxlRGF0YT17dGhpcy5zdGF0ZS5zdHlsZURhdGF9IHRhYkxheWVycz17dGhpcy5zdGF0ZS5vYmpUYWJMYXllcnN9IHRhYlN0YXRlcz17dGhpcy5zdGF0ZS5hcnJUYWJMYXllclN0YXRlc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllclN0YXRlcz17dGhpcy5zdGF0ZS5hcnJMYXllclN0YXRlc30gcGFyZW50Q2FsbGJhY2s9e3RoaXMuc2V0TGF5ZXJTdGF0ZXN9IHRhYkNhbGxiYWNrPXt0aGlzLnNldFRhYlN0YXRlc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb249e1wicmlnaHRcIn0gb3Blbj17KHRoaXMucHJvcHMubWFwRGF0YS5pbml0aWFsX29wZW5fY29tcCA9PT0gXCJzdGFyYm9hcmRcIil9IGNoYW5nZUNvbGxhcHNlU3RhdGU9e3RoaXMuY2hhbmdlQ29sbGFwc2VTdGF0ZX0gZXh0ZXJuYWw9e3RoaXMucmVhY3RDb250YWluZXIuY2xhc3NOYW1lLmluZGV4T2YoXCJjNGctZXh0ZXJuYWxcIikgIT09IC0xfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L1N1c3BlbnNlPixcbiAgICAgICAgICB0aGlzLnJlYWN0Q29udGFpbmVyXG4gICAgICApO1xuICAgIH1cbiAgICBsZXQgc2VhcmNoUG9ydGFsID0gXCJcIjtcbiAgICBpZiAobWFwRGF0YS5nZW9zZWFyY2guZW5hYmxlKSB7XG4gICAgICBsZXQgZ2VvU2VhcmNoT3B0aW9ucyA9IHRoaXMuY3JlYXRlR2Vvc2VhcmNoT3B0aW9ucygpO1xuICAgICAgZ2VvU2VhcmNoT3B0aW9ucy5yZWYgPSAobm9kZSkgPT4ge1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMuZ2Vvc2VhcmNoID0gbm9kZTtcbiAgICAgIH07XG4gICAgICBzZWFyY2hQb3J0YWwgPSBSZWFjdERPTS5jcmVhdGVQb3J0YWwoXG4gICAgICAgIDxHZW9TZWFyY2ggey4uLmdlb1NlYXJjaE9wdGlvbnN9Lz4sXG4gICAgICAgIHRoaXMuc2VhcmNoQ29udGFpbmVyXG4gICAgICApO1xuICAgIH1cbiAgICBsZXQgaW5mb1BvcnRhbCA9IFwiXCI7XG4gICAgaWYgKG1hcERhdGEuaW5mb3BhZ2UgJiYgbWFwRGF0YS5sZWdlbmQuZW5hYmxlKSB7XG4gICAgICBpbmZvUG9ydGFsID0gUmVhY3RET00uY3JlYXRlUG9ydGFsKFxuICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxkaXY+XCJMT09PTFwiPC9kaXY+fT5cbiAgICAgICAgICA8SW5mb3BhZ2UgcmVmPXsobm9kZSkgPT4ge3RoaXMuY29tcG9uZW50cy5pbmZvcGFnZSA9IG5vZGU7fX0gdGFyZ2V0PXt0YXJnZXR9IGV4dGVybmFsPXt0aGlzLmluZm9QYWdlQ29udGFpbmVyLmNsYXNzTmFtZS5pbmRleE9mKFwiYzRnLWV4dGVybmFsXCIpICE9PSAtMX1cbiAgICAgICAgICAgICAgICAgIGluZm9Db250ZW50PXttYXBEYXRhLmluZm9wYWdlfSBtYXBDb250cm9sbGVyPXt0aGlzfSBvcGVuPXttYXBEYXRhLmluaXRpYWxfb3Blbl9jb21wID09PSBcImxlZ2VuZFwifS8+XG4gICAgICAgIDwvU3VzcGVuc2U+LFxuICAgICAgICB0aGlzLmluZm9QYWdlQ29udGFpbmVyXG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBibHNQb3J0YWwgPSBcIlwiO1xuICAgIGlmIChtYXBEYXRhLmJhc2VsYXllcnN3aXRjaGVyLmVuYWJsZSkge1xuICAgICAgYmxzUG9ydGFsID0gUmVhY3RET00uY3JlYXRlUG9ydGFsKFxuICAgICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PGRpdj5cIkxPT09MXCI8L2Rpdj59PlxuICAgICAgICAgICAgPEJhc2VsYXllclN3aXRjaGVyIHJlZj17KG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzLmJhc2VsYXllclN3aXRjaGVyID0gbm9kZTtcbiAgICAgICAgICAgIH19IHRhcmdldD17dGFyZ2V0fSBvcGVuPXttYXBEYXRhLmluaXRpYWxfb3Blbl9jb21wID09PSBcImJhc2VsYXllcnNcIn0gY2hhbmdlQWN0aXZlTGF5ZXJzPXt0aGlzLmNoYW5nZUFjdGl2ZUxheWVyc30gZXh0ZXJuYWw9e3RoaXMuYmFzZWxheWVyQ29udGFpbmVyLmNsYXNzTmFtZS5pbmRleE9mKFwiYzRnLWV4dGVybmFsXCIpICE9PSAtMX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyPXt0aGlzfSBiYXNlbGF5ZXJDb250cm9sbGVyPXt0aGlzLnByb3h5LmJhc2VsYXllckNvbnRyb2xsZXJ9Lz5cbiAgICAgICAgICA8L1N1c3BlbnNlPixcbiAgICAgICAgICB0aGlzLmJhc2VsYXllckNvbnRhaW5lclxuICAgICAgKTtcbiAgICB9XG4gICAgbGV0IG1lYXN1cmVQb3J0YWwgPSBcIlwiO1xuICAgIGlmIChtYXBEYXRhLm1lYXN1cmV0b29scy5lbmFibGUpIHtcbiAgICAgIG1lYXN1cmVQb3J0YWwgPSBSZWFjdERPTS5jcmVhdGVQb3J0YWwoXG4gICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PGRpdj5cIkxvb2xcIjwvZGl2Pn0+XG4gICAgICAgICAgPE1lYXN1cmV0b29scyByZWY9eyhub2RlKSA9PiB7dGhpcy5jb21wb25lbnRzLm1lYXN1cmV0b29scyA9IG5vZGU7fX0gdGFyZ2V0PXt0YXJnZXR9IGV4dGVybmFsPXt0aGlzLm1lYXN1cmV0b29sc0NvbnRhaW5lci5jbGFzc05hbWUuaW5kZXhPZihcImM0Zy1leHRlcm5hbFwiKSAhPT0gLTF9XG4gICAgICAgICAgICBtYXBDb250cm9sbGVyPXt0aGlzfSBvcGVuPXttYXBEYXRhLmluaXRpYWxfb3Blbl9jb21wID09PSBcIm1lYXN1cmV0b29sc1wifS8+XG4gICAgICAgIDwvU3VzcGVuc2U+LFxuICAgICAgICB0aGlzLm1lYXN1cmV0b29sc0NvbnRhaW5lclxuICAgICAgKTtcbiAgICB9XG4gICAgbGV0IHBlcm1hUG9ydGFsID0gXCJcIjtcbiAgICBpZiAobWFwRGF0YS5wZXJtYWxpbmsuZW5hYmxlKSB7XG4gICAgICBwZXJtYVBvcnRhbCA9IFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChcbiAgICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8ZGl2PlwibG9hZGluZy4uLlwiPC9kaXY+fT5cbiAgICAgICAgICA8UGVybWFsaW5rIHJlZj17KG5vZGUpID0+IHt0aGlzLmNvbXBvbmVudHMucGVybWFsaW5rID0gbm9kZTt9fSBzYXZlSWRzPXttYXBEYXRhLnBlcm1hbGluay5zYXZlSWRzfSBtYXBDb250cm9sbGVyPXt0aGlzfSB0YXJnZXQ9e3RhcmdldH1cbiAgICAgICAgICAgICAgICAgICAgIGV4dGVybmFsPXt0aGlzLnBlcm1hbGlua0NvbnRhaW5lci5jbGFzc05hbWUuaW5kZXhPZihcImM0Zy1leHRlcm5hbFwiKSAhPT0gLTF9Lz5cbiAgICAgICAgPC9TdXNwZW5zZT4sXG4gICAgICAgIHRoaXMucGVybWFsaW5rQ29udGFpbmVyXG4gICAgICApO1xuICAgIH1cbiAgICBsZXQgb3ZlcnZpZXdQb3J0YWwgPSBcIlwiO1xuICAgIGlmIChtYXBEYXRhLm92ZXJ2aWV3bWFwKSB7XG4gICAgICBsZXQgbGF5ZXJzID0gW107XG4gICAgICBpZiAodGhpcy5wcm94eS5iYXNlbGF5ZXJzX2xvYWRlZCkge1xuICAgICAgICBsYXllcnMgPSBbdGhpcy5wcm94eS5iYXNlbGF5ZXJDb250cm9sbGVyLmFyckJhc2VsYXllcnNbdGhpcy5wcm94eS5hY3RpdmVCYXNlbGF5ZXJJZF0ubGF5ZXJdO1xuICAgICAgfVxuICAgICAgb3ZlcnZpZXdQb3J0YWwgPSBSZWFjdERPTS5jcmVhdGVQb3J0YWwoXG4gICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PGRpdj5Mb2FkaW5nLi4uPC9kaXY+fT5cbiAgICAgICAgICA8T3ZlcnZpZXdNYXAgcmVmPXsobm9kZSkgPT4ge3RoaXMuY29tcG9uZW50cy5vdmVydmlld01hcCA9IG5vZGU7fX0gbWFwQ29udHJvbGxlcj17dGhpc30gdGFyZ2V0PXt0YXJnZXR9XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllcnM9e2xheWVyc30gb3ZtVGFyZ2V0PXt0aGlzLm92ZXJ2aWV3Q29udGFpbmVyfSBjb2xsYXBzZWQ9e3RydWV9IGtleT17MjN9Lz5cbiAgICAgICAgPC9TdXNwZW5zZT4sXG4gICAgICAgIHRoaXMub3ZlcnZpZXdDb250YWluZXJcbiAgICAgIClcbiAgICAgIC8vIG92ZXJ2aWV3UG9ydGFsID0gUmVhY3RET00uY3JlYXRlUG9ydGFsKG92ZXJ2aWV3UG9ydGFsLCB0aGlzLm92ZXJ2aWV3Q29udGFpbmVyKTtcbiAgICAgIHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfdmlzaWJpbGl0eSA9IHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfdmlzaWJpbGl0eSB8fCBbXTtcbiAgICAgIHRoaXMucHJveHkuaG9va19iYXNlbGF5ZXJfdmlzaWJpbGl0eS5wdXNoKGZ1bmN0aW9uKGJhc2VsYXllckNvbmZpZykge1xuICAgICAgICBsZXQgaWQgPSBiYXNlbGF5ZXJDb25maWcuaWQ7XG4gICAgICAgIGxldCBjdXJyZW50QmFzZWxheWVyID0gc2NvcGUucHJveHkuYmFzZWxheWVyQ29udHJvbGxlci5hcnJCYXNlbGF5ZXJzW2lkXTtcbiAgICAgICAgbGV0IGN1cnJlbnRTb3VyY2U7XG4gICAgICAgIGlmIChjdXJyZW50QmFzZWxheWVyLmxheWVyIGluc3RhbmNlb2YgTGF5ZXJHcm91cCkge1xuICAgICAgICAgIGN1cnJlbnRTb3VyY2UgPSBjdXJyZW50QmFzZWxheWVyLmxheWVyLmdldExheWVycygpLmdldEFycmF5KClbMF0uZ2V0U291cmNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY3VycmVudFNvdXJjZSA9IGN1cnJlbnRCYXNlbGF5ZXIubGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjb3BlLmNvbXBvbmVudHMub3ZlcnZpZXdNYXApIHtcbiAgICAgICAgICBzY29wZS5jb21wb25lbnRzLm92ZXJ2aWV3TWFwLmFkZExheWVyKG5ldyBUaWxlTGF5ZXIoe3NvdXJjZTogY3VycmVudFNvdXJjZX0pLCBpZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVE9ETyBiZXR0ZXIgc29sdXRpb24gdG8gd2FpdCBmb3Igb3ZlcnZpZXdtYXAgdG8gYmUgcmVuZGVyZWQ/XG4gICAgICAgICAgbGV0IGludGVydmFsSWQgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNjb3BlLmNvbXBvbmVudHMub3ZlcnZpZXdNYXApIHtcbiAgICAgICAgICAgICAgc2NvcGUuY29tcG9uZW50cy5vdmVydmlld01hcC5hZGRMYXllcihuZXcgVGlsZUxheWVyKHtzb3VyY2U6IGN1cnJlbnRTb3VyY2V9KSwgaWQpO1xuICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgfVxuXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgY29tcG9uZW50cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiAoYS5zb3J0ID4gYi5zb3J0KSA/IDEgOiAtMTtcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXBvbmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN3aXRjaCAoY29tcG9uZW50c1tpXS5uYW1lKSB7XG4gICAgICAgIGNhc2UgXCJtZWFzdXJldG9vbHNcIjpcbiAgICAgICAgICByZXN1bHQucHVzaChtZWFzdXJlUG9ydGFsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJhc2VsYXllcnN3aXRjaGVyXCI6XG4gICAgICAgICAgcmVzdWx0LnB1c2goYmxzUG9ydGFsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImdlb3NlYXJjaFwiOlxuICAgICAgICAgIHJlc3VsdC5wdXNoKHNlYXJjaFBvcnRhbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJsYXllcnN3aXRjaGVyXCI6XG4gICAgICAgICAgcmVzdWx0LnB1c2goc2JQb3J0YWwpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibGVnZW5kXCI6XG4gICAgICAgICAgcmVzdWx0LnB1c2goaW5mb1BvcnRhbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJwZXJtYWxpbmtcIjpcbiAgICAgICAgICByZXN1bHQucHVzaChwZXJtYVBvcnRhbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3pvb20nOlxuICAgICAgICAgIGlmIChtYXBEYXRhLnpvb20pIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICAgIDxTdXNwZW5zZSBrZXk9e2l9IGZhbGxiYWNrPXs8ZGl2PlwibG9hZGluZy4uLjwvZGl2Pn0+XG4gICAgICAgICAgICAgICAgICA8Wm9vbSBtYXBDb250cm9sbGVyPXt0aGlzfSB0YXJnZXQ9e3RhcmdldH0ga2V5PXtpfS8+XG4gICAgICAgICAgICAgICAgPC9TdXNwZW5zZT5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd6b29tRXh0ZW50JzpcbiAgICAgICAgICBpZiAobWFwRGF0YS56b29tRXh0ZW50KSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChcbiAgICAgICAgICAgICAgICA8U3VzcGVuc2Uga2V5PXtpfSBmYWxsYmFjaz17PGRpdj5cImxvYWRpbmcuLi48L2Rpdj59PlxuICAgICAgICAgICAgICAgICAgPFpvb21FeHRlbnQgbWFwQ29udHJvbGxlcj17dGhpc30gdGFyZ2V0PXt0YXJnZXR9IGtleT17aX0vPlxuICAgICAgICAgICAgICAgIDwvU3VzcGVuc2U+ICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3pvb21Ib21lJzpcbiAgICAgICAgICBpZiAobWFwRGF0YS56b29tSG9tZSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgICAgPFN1c3BlbnNlIGtleT17aX0gZmFsbGJhY2s9ezxkaXY+XCJsb2FkaW5nLi4uPC9kaXY+fT5cbiAgICAgICAgICAgICAgICAgIDxab29tSG9tZSBtYXBDb250cm9sbGVyPXt0aGlzfSB0YXJnZXQ9e3RhcmdldH0ga2V5PXtpfS8+XG4gICAgICAgICAgICAgICAgPC9TdXNwZW5zZT4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnem9vbVBvc2l0aW9uJzpcbiAgICAgICAgICBpZiAobWFwRGF0YS56b29tUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICAgIDxTdXNwZW5zZSBrZXk9e2l9IGZhbGxiYWNrPXs8ZGl2PlwibG9hZGluZy4uLjwvZGl2Pn0+XG4gICAgICAgICAgICAgICAgICA8Wm9vbVBvc2l0aW9uIG1hcENvbnRyb2xsZXI9e3RoaXN9IHRhcmdldD17dGFyZ2V0fSBrZXk9e2l9Lz5cbiAgICAgICAgICAgICAgICA8L1N1c3BlbnNlPiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdmdWxsc2NyZWVuJzpcbiAgICAgICAgICBpZiAobWFwRGF0YS5mdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChcbiAgICAgICAgICAgICAgICA8U3VzcGVuc2Uga2V5PXtpfSBmYWxsYmFjaz17PGRpdj5cImxvYWRpbmcuLi48L2Rpdj59PlxuICAgICAgICAgICAgICAgICAgPEZ1bGxzY3JlZW4gbWFwQ29udHJvbGxlcj17dGhpc30gdGFyZ2V0PXt0YXJnZXR9IGtleT17aX0vPlxuICAgICAgICAgICAgICAgIDwvU3VzcGVuc2U+ICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3ByaW50JzpcbiAgICAgICAgICBpZiAobWFwRGF0YS5wcmludCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgICAgPFN1c3BlbnNlIGtleT17aX0gZmFsbGJhY2s9ezxkaXY+XCJsb2FkaW5nLi4uPC9kaXY+fT5cbiAgICAgICAgICAgICAgICAgIDxQcmludCBtYXBDb250cm9sbGVyPXt0aGlzfSB0YXJnZXQ9e3RhcmdldH0ga2V5PXtpfS8+XG4gICAgICAgICAgICAgICAgPC9TdXNwZW5zZT4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncm90YXRlJzpcbiAgICAgICAgICBpZiAobWFwRGF0YS5yb3RhdGUpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICAgIDxTdXNwZW5zZSBrZXk9e2l9IGZhbGxiYWNrPXs8ZGl2PlwibG9hZGluZy4uLjwvZGl2Pn0+XG4gICAgICAgICAgICAgICAgICA8Um90YXRlIG1hcENvbnRyb2xsZXI9e3RoaXN9IHRhcmdldD17dGFyZ2V0fSBrZXk9e2l9Lz5cbiAgICAgICAgICAgICAgICA8L1N1c3BlbnNlPiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdncmF0aWN1bGUnOlxuICAgICAgICAgIGlmIChtYXBEYXRhLmdyYXRpY3VsZSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgICAgPFN1c3BlbnNlIGtleT17aX0gZmFsbGJhY2s9ezxkaXY+XCJsb2FkaW5nLi4uPC9kaXY+fT5cbiAgICAgICAgICAgICAgICAgIDxHcmlkIG1hcENvbnRyb2xsZXI9e3RoaXN9IHRhcmdldD17dGFyZ2V0fSBrZXk9e2l9Lz5cbiAgICAgICAgICAgICAgICA8L1N1c3BlbnNlPiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdvdmVydmlldyc6XG4gICAgICAgICAgaWYgKG1hcERhdGEub3ZlcnZpZXdtYXApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG92ZXJ2aWV3UG9ydGFsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JvdXRlcic6XG4gICAgICAgICAgLy8gaWYgKHdpbmRvdy5jNGdNYXBzSG9va3MgIT09IHVuZGVmaW5lZCAmJiBBcnJheS5pc0FycmF5KHdpbmRvdy5jNGdNYXBzSG9va3MubWFwQ29udHJvbGxlcl9hZGRDb250cm9scykpIHtcbiAgICAgICAgICAvLyAgIHV0aWxzLmNhbGxIb29rRnVuY3Rpb25zKHdpbmRvdy5jNGdNYXBzSG9va3MubWFwQ29udHJvbGxlcl9hZGRDb250cm9scywge1xuICAgICAgICAgIC8vICAgICBtYXBDb250cm9sbGVyOiB0aGlzLFxuICAgICAgICAgIC8vICAgICBDb250YWluZXI6IHRoaXMubWFwc0NvbnRyb2xzLmNvbnRyb2xDb250YWluZXJUb3BMZWZ0LFxuICAgICAgICAgIC8vICAgICBjb21wb25lbnQ6IFwicm91dGVyXCIsXG4gICAgICAgICAgLy8gICAgIGFyckNvbXBzOiByZXN1bHRcbiAgICAgICAgICAvLyAgIH0pO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiB0ZXN0XG4gICAgICAgICAgICovXG4gICAgICAgICAgLy8gY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgIC8vICAgbWFwQ29udHJvbGxlcjogdGhpcyxcbiAgICAgICAgICAvLyAgIENvbnRhaW5lcjogdGhpcy5tYXBzQ29udHJvbHMuY29udHJvbENvbnRhaW5lclRvcExlZnQsXG4gICAgICAgICAgLy8gICBjb21wb25lbnQ6IFwicm91dGVyXCIsXG4gICAgICAgICAgLy8gICBhcnJDb21wczogcmVzdWx0XG4gICAgICAgICAgLy8gfTtcbiAgICAgICAgICBpZiAodGhpcy5kYXRhLnJvdXRlcl9lbmFibGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhLmxhbmcgPT09IFwiZGVcIikge1xuICAgICAgICAgICAgICAgIGxhbmdSb3V0ZUNvbnN0YW50cyA9IHJvdXRpbmdDb25zdGFudHNHZXJtYW47XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLmxhbmcgPT09IFwiZW5cIikge1xuICAgICAgICAgICAgICAgIGxhbmdSb3V0ZUNvbnN0YW50cyA9IHJvdXRpbmdDb25zdGFudHNFbmdsaXNoO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGZhbGxiYWNrXG4gICAgICAgICAgICAgICAgbGFuZ1JvdXRlQ29uc3RhbnRzID0gcm91dGluZ0NvbnN0YW50c0VuZ2xpc2g7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHJvdXRlckNvbnRyb2xQcm9wcyA9IHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHRoaXMuZGF0YS5tYXBEaXYgKyAnIC5jNGctY29udHJvbC1jb250YWluZXItdG9wLWxlZnQnKSxcbiAgICAgICAgICAgICAgbWFwQ29udHJvbGxlcjogdGhpcyxcbiAgICAgICAgICAgICAgZGlyZWN0aW9uOiBcInRvcFwiLFxuICAgICAgICAgICAgICB3aXRoUG9zaXRpb246IGZhbHNlLFxuICAgICAgICAgICAgICBkZXRvdXJSb3V0ZTogdGhpcy5kYXRhLmRldG91clJvdXRlLFxuICAgICAgICAgICAgICBkZXRvdXJBcmVhOiB0aGlzLmRhdGEuZGV0b3VyQXJlYSxcbiAgICAgICAgICAgICAgY29udGFpbmVyQWRkcmVzc2VzOiBjb250YWluZXJBZGRyZXNzZXMsXG4gICAgICAgICAgICAgIGxhbmdDb25zdGFudHM6IGxhbmdSb3V0ZUNvbnN0YW50cyxcbiAgICAgICAgICAgICAgcmVmOiAobm9kZSkgPT4ge3RoaXMuY29tcG9uZW50cy5yb3V0ZXIgPSBub2RlO30sXG4gICAgICAgICAgICAgIGtleTogMjIsXG4gICAgICAgICAgICAgIG9wZW46IHRoaXMuZGF0YS5pbml0aWFsX29wZW5fY29tcCA9PT0gXCJyb3V0aW5nXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgb3BlblJvdXRlciA9IHRoaXMuZGF0YS5pbml0aWFsX29wZW5fY29tcCA9PT0gXCJyb3V0aW5nXCI7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5yb3V0ZXJDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5yb3V0ZXJfZGl2KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3V0ZXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiICsgdGhpcy5kYXRhLnJvdXRlcl9kaXYpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5yb3V0ZXJDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMucm91dGVyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlckNvbnRhaW5lci5jbGFzc05hbWUgPSBcImM0Zy1zaWRlYm9hcmQgYzRnLXJvdXRlci1jb250YWluZXItcmlnaHQgXCIgKyAob3BlblJvdXRlciA/IFwiYzRnLW9wZW5cIiA6IFwiYzRnLWNsb3NlXCIpO1xuICAgICAgICAgICAgICAgICAgalF1ZXJ5KFwiLm9sLW92ZXJsYXljb250YWluZXItc3RvcGV2ZW50XCIpLmFwcGVuZCh0aGlzLnJvdXRlckNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMucm91dGVyQ29udGFpbmVyLmNsYXNzTmFtZSArPSBcIiBjNGctZXh0ZXJuYWxcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3V0ZXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlckNvbnRhaW5lci5jbGFzc05hbWUgPSBcImM0Zy1zaWRlYm9hcmQgYzRnLXJvdXRlci1jb250YWluZXItcmlnaHQgXCIgKyAob3BlblJvdXRlciA/IFwiYzRnLW9wZW5cIiA6IFwiYzRnLWNsb3NlXCIpO1xuICAgICAgICAgICAgICAgIGpRdWVyeShcIi5vbC1vdmVybGF5Y29udGFpbmVyLXN0b3BldmVudFwiKS5hcHBlbmQodGhpcy5yb3V0ZXJDb250YWluZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoUm91dGVyVmlldyAmJiByb3V0ZXJDb250cm9sUHJvcHMpIHtcbiAgICAgICAgICAgICAgbGV0IHZpZXcgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlclZpZXcsIHJvdXRlckNvbnRyb2xQcm9wcyk7XG4gICAgICAgICAgICAgIGlmICh2aWV3ICYmIHRoaXMgJiYgdGhpcy5yb3V0ZXJDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgcG9ydGFsID0gUmVhY3RET00uY3JlYXRlUG9ydGFsKHZpZXcsIHRoaXMucm91dGVyQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBpZiAocG9ydGFsKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwb3J0YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBlbmQgdGVzdFxuICAgICAgICAgICAqL1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdlZGl0b3InOlxuICAgICAgICAgIGlmIChtYXBEYXRhLmZlRWRpdG9yUHJvZmlsZSAmJiBtYXBEYXRhLmZlRWRpdG9yUHJvZmlsZSAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5lZGl0b3JDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5lZGl0b3JfZGl2KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3JDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiICsgdGhpcy5kYXRhLmVkaXRvcl9kaXYpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5lZGl0b3JDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICB0aGlzLmVkaXRvckNvbnRhaW5lci5jbGFzc05hbWUgPSBcImM0Zy1zaWRlYm9hcmQgYzRnLWVkaXRvci1jb250YWluZXItcmlnaHQgYzRnLWNsb3NlXCI7XG4gICAgICAgICAgICAgICAgICBqUXVlcnkoXCIub2wtb3ZlcmxheWNvbnRhaW5lci1zdG9wZXZlbnRcIikuYXBwZW5kKHRoaXMuZWRpdG9yQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0b3JDb250YWluZXIuY2xhc3NOYW1lICs9IFwiIGM0Zy1leHRlcm5hbFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwiYzRnLXNpZGVib2FyZCBjNGctZWRpdG9yLWNvbnRhaW5lci1yaWdodCBjNGctY2xvc2VcIjtcbiAgICAgICAgICAgICAgICBqUXVlcnkoXCIub2wtb3ZlcmxheWNvbnRhaW5lci1zdG9wZXZlbnRcIikuYXBwZW5kKHRoaXMuZWRpdG9yQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGVkaXRvclByb3BzID0ge1xuICAgICAgICAgICAgICB0aXBMYWJlbDogbGFuZ0NvbnN0YW50cy5DVFJMX0VESVRPUixcbiAgICAgICAgICAgICAgdHlwZTogbWFwRGF0YS5lZGl0b3IudHlwZSB8fCAnZnJvbnRlbmQnLFxuICAgICAgICAgICAgICBpbnB1dEZpZWxkOiBtYXBEYXRhLmVkaXRvci5pbnB1dEZpZWxkIHx8IGZhbHNlLFxuICAgICAgICAgICAgICB0YXJnZXQ6IG1hcERhdGEuZWRpdG9yLnRhcmdldCB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHRoaXMuZGF0YS5tYXBEaXYgKyAnIC5jNGctY29udHJvbC1jb250YWluZXItdG9wLWxlZnQnKSxcbiAgICAgICAgICAgICAgaW5pdE9wZW46IG1hcERhdGEuZWRpdG9yLm9wZW4gfHwgZmFsc2UsXG4gICAgICAgICAgICAgIGNvbmZpZzogbWFwRGF0YS5lZGl0b3IuY29uZmlnIHx8IGZhbHNlLFxuICAgICAgICAgICAgICBkYXRhRmllbGQ6IG1hcERhdGEuZWRpdG9yLmRhdGFfZmllbGQgfHwgZmFsc2UsXG4gICAgICAgICAgICAgIGNhY2hpbmc6IG1hcERhdGEuY2FjaGluZyxcbiAgICAgICAgICAgICAgbWFwQ29udHJvbGxlcjogdGhpc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChSZWFjdC5jcmVhdGVFbGVtZW50KEVkaXRvckNvbXBvbmVudCwgZWRpdG9yUHJvcHMpLCB0aGlzLmVkaXRvckNvbnRhaW5lcikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChtYXBEYXRhLmVkaXRvci50eXBlID09IFwiYmFja2VuZFwiKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZWRpdG9yQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuZWRpdG9yX2Rpdikge1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5cIiArIHRoaXMuZGF0YS5lZGl0b3JfZGl2KTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZWRpdG9yQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmVkaXRvckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0b3JDb250YWluZXIuY2xhc3NOYW1lID0gXCJjNGctc2lkZWJvYXJkIGM0Zy1lZGl0b3ItY29udGFpbmVyLXJpZ2h0IGM0Zy1jbG9zZVwiO1xuICAgICAgICAgICAgICAgICAgalF1ZXJ5KFwiLm9sLW92ZXJsYXljb250YWluZXItc3RvcGV2ZW50XCIpLmFwcGVuZCh0aGlzLmVkaXRvckNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yQ29udGFpbmVyLmNsYXNzTmFtZSArPSBcIiBjNGctZXh0ZXJuYWxcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3JDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvckNvbnRhaW5lci5jbGFzc05hbWUgPSBcImM0Zy1zaWRlYm9hcmQgYzRnLWVkaXRvci1jb250YWluZXItcmlnaHQgYzRnLWNsb3NlXCI7XG4gICAgICAgICAgICAgICAgalF1ZXJ5KFwiLm9sLW92ZXJsYXljb250YWluZXItc3RvcGV2ZW50XCIpLmFwcGVuZCh0aGlzLmVkaXRvckNvbnRhaW5lcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBlZGl0b3JQcm9wcyA9IHtcbiAgICAgICAgICAgICAgdGlwTGFiZWw6IGxhbmdDb25zdGFudHMuQ1RSTF9FRElUT1IsXG4gICAgICAgICAgICAgIHR5cGU6IG1hcERhdGEuZWRpdG9yLnR5cGUgfHwgJ2Zyb250ZW5kJyxcbiAgICAgICAgICAgICAgaW5wdXRGaWVsZDogbWFwRGF0YS5lZGl0b3IuaW5wdXRGaWVsZCB8fCBcIiNjNGdHZW9FZGl0b3JHZW9EYXRhXCIsXG4gICAgICAgICAgICAgIHRhcmdldDogbWFwRGF0YS5lZGl0b3IudGFyZ2V0IHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgdGhpcy5kYXRhLm1hcERpdiArICcgLmM0Zy1jb250cm9sLWNvbnRhaW5lci10b3AtbGVmdCcpLFxuICAgICAgICAgICAgICBpbml0T3BlbjogbWFwRGF0YS5lZGl0b3Iub3BlbiB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgY29uZmlnOiBtYXBEYXRhLmVkaXRvci5jb25maWcgfHwgZmFsc2UsXG4gICAgICAgICAgICAgIGRhdGFGaWVsZDogbWFwRGF0YS5lZGl0b3IuZGF0YV9maWVsZCB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgY2FjaGluZzogbWFwRGF0YS5jYWNoaW5nLFxuICAgICAgICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goUmVhY3RET00uY3JlYXRlUG9ydGFsKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWRpdG9yQ29tcG9uZW50LCBlZGl0b3JQcm9wcyksIHRoaXMuZWRpdG9yQ29udGFpbmVyKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgcmV0dXJuIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIHtyZXN1bHR9XG4gICAgPC9SZWFjdC5GcmFnbWVudD47XG4gIH1cblxuICBzZXRPcGVuQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICB0aGlzLnNldFN0YXRlKHtvcGVuQ29tcG9uZW50OiBjb21wb25lbnR9LCAoKSA9PiB7XG4gICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5jb21wb25lbnRzKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGxldCBjdXJyZW50Q29tcCA9IHRoaXMuY29tcG9uZW50c1trZXldO1xuICAgICAgICAgIGlmIChjdXJyZW50Q29tcCAmJiAoY3VycmVudENvbXAgIT09IGNvbXBvbmVudCkpIHtcbiAgICAgICAgICAgIGN1cnJlbnRDb21wLnNldFN0YXRlKHtvcGVuOiBmYWxzZX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNjb3BlLmRhdGEuY2FjaGluZykge1xuICAgICAgICB1dGlscy5zdG9yZVZhbHVlKCdwYW5lbCcsIGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgaWYgKHRoaXMuZGF0YS5jYWNoaW5nKSB7XG4gICAgICBsZXQgc3RvcmVkUGFuZWwgPSB1dGlscy5nZXRWYWx1ZSgncGFuZWwnKTtcbiAgICAgIGlmIChzdG9yZWRQYW5lbCkge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5jb21wb25lbnRzKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb21wb25lbnRzW2tleV0gJiYgdGhpcy5jb21wb25lbnRzW2tleV0uY29uc3RydWN0b3IubmFtZSA9PT0gc3RvcmVkUGFuZWwpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzW2tleV0uc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIG9wZW46IHRydWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHN0b3JlZFBhbmVsID0gdGhpcy5jb21wb25lbnRzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0T3BlbkNvbXBvbmVudChzdG9yZWRQYW5lbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gIH1cblxuICBjcmVhdGVHZW9zZWFyY2hPcHRpb25zKCkge1xuICAgIGNvbnN0IG1hcERhdGEgPSB0aGlzLmRhdGE7XG4gICAgLy8gZ2Vvc2VhcmNoXG4gICAgbGV0IGdlb3NlYXJjaE9wdGlvbnMgPSB7fTtcbiAgICBpZiAoKG1hcERhdGEuZ2Vvc2VhcmNoICYmIG1hcERhdGEuZ2Vvc2VhcmNoLmVuYWJsZSkpIHtcblxuICAgICAgaWYgKCF0aGlzLnNlYXJjaENvbnRhaW5lcikge1xuICAgICAgICBpZiAobWFwRGF0YS5nZW9zZWFyY2guZGl2KSB7XG4gICAgICAgICAgdGhpcy5zZWFyY2hDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiICsgbWFwRGF0YS5nZW9zZWFyY2guZGl2KTtcbiAgICAgICAgICB0aGlzLnNlYXJjaENvbnRhaW5lci5jbGFzc05hbWUgKz0gXCIgYzRnLWV4dGVybmFsXCI7XG4gICAgICAgICAgaWYgKCF0aGlzLnNlYXJjaENvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwiYzRnLXNpZGVib2FyZCBjNGctZ2Vvc2VhcmNoLWNvbnRhaW5lci1yaWdodCBcIjtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoQ29udGFpbmVyLmNsYXNzTmFtZSArPSBcImM0Zy1jbG9zZVwiO1xuICAgICAgICAgICAgdGhpcy4kb3ZlcmxheWNvbnRhaW5lcl9zdG9wZXZlbnQuYXBwZW5kKHRoaXMuc2VhcmNoQ29udGFpbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZWFyY2hDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICB0aGlzLnNlYXJjaENvbnRhaW5lci5jbGFzc05hbWUgPSBcImM0Zy1zaWRlYm9hcmQgYzRnLWdlb3NlYXJjaC1jb250YWluZXItcmlnaHQgXCI7XG4gICAgICAgICAgdGhpcy5zZWFyY2hDb250YWluZXIuY2xhc3NOYW1lICs9IFwiYzRnLWNsb3NlXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtYXBEYXRhLmdlb3NlYXJjaC5kaXYpIHtcbiAgICAgICAgICB0aGlzLiRvdmVybGF5Y29udGFpbmVyX3N0b3BldmVudC5hcHBlbmQodGhpcy5zZWFyY2hDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBnZW9zZWFyY2hPcHRpb25zID0ge1xuICAgICAgICBtYXBDb250cm9sbGVyOiB0aGlzLFxuICAgICAgICB0YXJnZXQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgbWFwRGF0YS5tYXBEaXYgKyAnIC5jNGctY29udHJvbC1jb250YWluZXItdG9wLWxlZnQnKSxcbiAgICAgICAgZXh0RGl2OiBtYXBEYXRhLmdlb3NlYXJjaC5kaXYgfHwgZmFsc2UsXG4gICAgICAgIGNvbGxhcHNpYmxlOiB0cnVlLFxuICAgICAgICBjb2xsYXBzZWQ6IG1hcERhdGEuaW5pdGlhbF9vcGVuX2NvbXAgIT09IFwic2VhcmNoXCIsXG4gICAgICAgIGxhYmVsOiAnICcsXG4gICAgICAgIGNvbGxhcHNlZExhYmVsOiAnJyxcbiAgICAgICAgLy8gZW5naW5lVXJsOiBtYXBEYXRhLmdlb3NlYXJjaC5lbmdpbmUsXG4gICAgICAgIHNlYXJjaFpvb206IG1hcERhdGEuZ2Vvc2VhcmNoLnNlYXJjaHpvb20sXG4gICAgICAgIHpvb21Cb3VuZHM6IG1hcERhdGEuZ2Vvc2VhcmNoLnpvb21ib3VuZHMsXG4gICAgICAgIHF1aWNrc2VhcmNoOiB0cnVlLFxuICAgICAgICBhbmltYXRlOiBtYXBEYXRhLmdlb3NlYXJjaC5hbmltYXRlLFxuICAgICAgICBhbmltYXRlRHVyYXRpb246IG1hcERhdGEuZ2Vvc2VhcmNoLmFuaW1hdGVfZHVyYXRpb24sXG4gICAgICAgIG1hcmtSZXN1bHQ6IG1hcERhdGEuZ2Vvc2VhcmNoLm1hcmtyZXN1bHQsXG4gICAgICAgIHJlc3VsdER1cmF0aW9uOiBtYXBEYXRhLmdlb3NlYXJjaC5yZXN1bHRfZHVyYXRpb24sXG4gICAgICAgIHBvcHVwOiBtYXBEYXRhLmdlb3NlYXJjaC5wb3B1cCxcbiAgICAgICAgYXV0b3BpY2s6IG1hcERhdGEuZ2VvcGlja2VyLFxuICAgICAgICBjYWNoaW5nOiBtYXBEYXRhLmNhY2hpbmcsXG4gICAgICAgIHJlc3VsdHM6IG1hcERhdGEuZ2Vvc2VhcmNoLnJlc3VsdHMsXG4gICAgICAgIHJlc3VsdENvdW50OiBtYXBEYXRhLmdlb3NlYXJjaC5yZXN1bHRfY291bnQsXG4gICAgICAgIHJlc3VsdHNIZWFkbGluZTogbWFwRGF0YS5nZW9zZWFyY2gucmVzdWx0c19oZWFkbGluZSxcbiAgICAgICAgaGVhZGxpbmU6IG1hcERhdGEuZ2Vvc2VhcmNoLmhlYWRsaW5lLFxuICAgICAgICByZXN1bHRTdHlsZTogbWFwRGF0YS5nZW9zZWFyY2gucmVzdWx0X2xvY3N0eWxlLFxuICAgICAgICBwbGFjZWhvbGRlcjogbWFwRGF0YS5nZW9zZWFyY2gucGxhY2Vob2xkZXIsXG4gICAgICAgIGV4dGVybmFsOiB0aGlzLnNlYXJjaENvbnRhaW5lci5jbGFzc05hbWUuaW5kZXhPZihcImM0Zy1leHRlcm5hbFwiKSAhPT0gLTFcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBnZW9zZWFyY2hPcHRpb25zO1xuICB9XG59IiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7QXV0b2NvbXBsZXRlSW5wdXR9IGZyb20gXCIuL2M0Zy1hdXRvY29tcGxldGUtaW5wdXQuanN4XCI7XG5pbXBvcnQge1BvaW50LCBQb2x5Z29uLCBMaW5lU3RyaW5nfSBmcm9tIFwib2wvZ2VvbVwiO1xuaW1wb3J0IHtnZXRMYW5ndWFnZX0gZnJvbSBcIi4vLi4vcm91dGluZy1jb25zdGFudC1pMThuXCI7XG5pbXBvcnQge3RvTG9uTGF0fSBmcm9tIFwib2wvcHJvalwiO1xuXG5leHBvcnQgY2xhc3MgUm91dGVyUG9wdXBCdXR0b25zIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICAgICAgbGV0IGdlb21ldHJ5ID0gdGhpcy5wcm9wcy5jb25maWcuZmVhdHVyZS5nZXRHZW9tZXRyeSgpO1xuICAgICAgICBpZiAoZ2VvbWV0cnkgaW5zdGFuY2VvZiBMaW5lU3RyaW5nKXtcbiAgICAgICAgICAgIGxldCBlZGl0Um91dGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvb3JkaW5hdGVzID0gZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICAgICAgICBsZXQgaSA9IDE7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGNvb3JkaW5hdGVzLmxlbmd0aCA+IDE1KSB7XG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5ID0gZ2VvbWV0cnkuc2ltcGxpZnkoaSk7XG4gICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzID0gZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDQyKSB7IC8vcHJldmVudCBlbmRsZXNzIGxvb3AgJiBtYWdpYyBudW1iZXIgaXMgbWFnaWNcbiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydChcIi4vLi4vLi4vLi4vLi4vLi4vQ29yZUJ1bmRsZS9SZXNvdXJjZXMvcHVibGljL3ZlbmRvci9qcy9BbGVydEhhbmRsZXJcIikudGhlbihtb2R1bGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbGVydEhhbmRsZXIgPSBuZXcgbW9kdWxlLkFsZXJ0SGFuZGxlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0SGFuZGxlci5zaG93SW5mb0RpYWxvZyhzY29wZS5wcm9wcy5jb25maWcucm91dGVyLmxhbmd1YWdlQ29uc3RhbnRzLlJPVVRFUl9WSUVXX0FMRVJUX0VSUk9SLCBzY29wZS5wcm9wcy5jb25maWcucm91dGVyLmxhbmd1YWdlQ29uc3RhbnRzLlJPVVRFUl9FUlJPUl9MSU5FU1RSSU5HKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNvbmZpZy5yb3V0ZXIub3BlbkNvbnRyb2xzKHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuY29uZmlnLnJvdXRlci5zZXRNb2RlKFwicm91dGVcIik7XG4gICAgICAgICAgICAgICAgbGV0IGZyb21Db29yZGluYXRlID0gdG9Mb25MYXQoY29vcmRpbmF0ZXNbMF0sIFwiRVBTRzozODU3XCIpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuY29uZmlnLnJvdXRlci5zZXRSb3V0ZUZyb20oZnJvbUNvb3JkaW5hdGVbMF0sIGZyb21Db29yZGluYXRlWzFdKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvdmVyQ29vcmRpbmF0ZSA9IHRvTG9uTGF0KGNvb3JkaW5hdGVzW2ldLCBcIkVQU0c6Mzg1N1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb25maWcucm91dGVyLmFkZE92ZXJQb2ludChvdmVyQ29vcmRpbmF0ZVswXSwgb3ZlckNvb3JkaW5hdGVbMV0sIGktMSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCB0b0Nvb3JkaW5hdGUgPSB0b0xvbkxhdChjb29yZGluYXRlc1tjb29yZGluYXRlcy5sZW5ndGggLSAxXSwgXCJFUFNHOjM4NTdcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb25maWcucm91dGVyLnNldFJvdXRlVG8odG9Db29yZGluYXRlWzBdLCB0b0Nvb3JkaW5hdGVbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDxkaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e1wiYzRnLWljb24gYzRnLXBvcHVwLXJvdXRlLWVkaXRcIn0gdGl0bGU9e3RoaXMucHJvcHMuY29uZmlnLnJvdXRlci5sYW5ndWFnZUNvbnN0YW50cy5QT1BVUF9ST1VURV9FRElUfSBvbk1vdXNlVXA9eygpPT57ZWRpdFJvdXRlKCl9fS8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBjb29yZGluYXRlcztcbiAgICAgICAgICAgIGlmIChnZW9tZXRyeSBpbnN0YW5jZW9mIFBvbHlnb24pIHtcbiAgICAgICAgICAgICAgICBsZXQgZXh0ZW50ID0gZ2VvbWV0cnkuZ2V0RXh0ZW50KCk7XG4gICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgIChleHRlbnRbMF0gKyBleHRlbnRbMl0pIC8gMixcbiAgICAgICAgICAgICAgICAgICAgKGV4dGVudFsxXSArIGV4dGVudFszXSkgLyAyXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzID0gZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCByb3V0ZUZyb20gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb25maWcucm91dGVyLm9wZW5Db250cm9scyh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNvbmZpZy5yb3V0ZXIuc2V0TW9kZShcInJvdXRlXCIpO1xuICAgICAgICAgICAgICAgIC8vIGZyb20gYWRkcmVzc1xuICAgICAgICAgICAgICAgIGxldCBmcm9tQ29vcmRzID0gdG9Mb25MYXQoY29vcmRpbmF0ZXMsIFwiRVBTRzozODU3XCIpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuY29uZmlnLnJvdXRlci5zZXRSb3V0ZUZyb20oZnJvbUNvb3Jkc1swXSwgZnJvbUNvb3Jkc1sxXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGV0IHJvdXRlVG8gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb25maWcucm91dGVyLm9wZW5Db250cm9scyh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNvbmZpZy5yb3V0ZXIuc2V0TW9kZShcInJvdXRlXCIpO1xuICAgICAgICAgICAgICAgIC8vIHRvIGFkZHJlc3NcbiAgICAgICAgICAgICAgICBsZXQgdG9Db29yZHMgPSB0b0xvbkxhdChjb29yZGluYXRlcywgXCJFUFNHOjM4NTdcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb25maWcucm91dGVyLnNldFJvdXRlVG8odG9Db29yZHNbMF0sIHRvQ29vcmRzWzFdKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiA8ZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtcImM0Zy1pY29uIGM0Zy1wb3B1cC1yb3V0ZS1mcm9tXCJ9IHRpdGxlPXt0aGlzLnByb3BzLmNvbmZpZy5yb3V0ZXIubGFuZ3VhZ2VDb25zdGFudHMuUE9QVVBfUk9VVEVfRlJPTX0gb25Nb3VzZVVwPXsoKT0+e3JvdXRlRnJvbSgpfX0vPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtcImM0Zy1pY29uIGM0Zy1wb3B1cC1yb3V0ZS10b1wifSB0aXRsZT17dGhpcy5wcm9wcy5jb25maWcucm91dGVyLmxhbmd1YWdlQ29uc3RhbnRzLlBPUFVQX1JPVVRFX1RPfSBvbk1vdXNlVXA9eygpPT57cm91dGVUbygpfX0vPlxuICAgICAgICAgICAgPC9kaXY+O1xuICAgICAgICB9XG4gICAgfVxufSIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBTdXNwZW5zZSB9IGZyb20gXCJyZWFjdFwiO1xuLy8gaW1wb3J0IHtSb3V0ZXJJbnN0cnVjdGlvbnNDb250YWluZXJ9IGZyb20gXCIuL2M0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb25zLWNvbnRhaW5lci5qc3hcIjtcbi8vIGltcG9ydCB7Um91dGVyRmVhdHVyZUxpc3R9IGZyb20gXCIuL2M0Zy1yb3V0ZXItZmVhdHVyZS1saXN0LmpzeFwiO1xuaW1wb3J0IEdQWCBmcm9tIFwib2wvZm9ybWF0L0dQWFwiO1xuaW1wb3J0IHt0b0h1bWFuRGlzdGFuY2UsIHRvSHVtYW5UaW1lfSBmcm9tIFwiLi4vYzRnLXJvdXRlci10aW1lLWNvbnZlcnNpb25zXCI7XG5pbXBvcnQge1RpdGxlYmFyfSBmcm9tIFwiLi9jNGctdGl0bGViYXIuanN4XCI7XG5cbmNvbnN0IFJvdXRlckluc3RydWN0aW9uc0NvbnRhaW5lciA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KCcuL2M0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb25zLWNvbnRhaW5lci5qc3gnKSk7XG5jb25zdCBSb3V0ZXJGZWF0dXJlTGlzdCA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KCcuL2M0Zy1yb3V0ZXItZmVhdHVyZS1saXN0LmpzeCcpKTtcblxuZXhwb3J0IGNsYXNzIFJvdXRlclJlc3VsdENvbnRhaW5lciBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLmNsaWNrQ29udHJvbCA9IHRoaXMuY2xpY2tDb250cm9sLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wcm9maWxlVHJhbnNsYXRpb24gPSB7XG4gICAgICAwOiBcImNhclwiLFxuICAgICAgMTogXCJoZ3ZcIixcbiAgICAgIDI6IFwiYmlrZVwiLFxuICAgICAgMzogXCJiaWtlXCIsXG4gICAgICA0OiBcImJpa2VcIixcbiAgICAgIDU6IFwiYmlrZVwiLFxuICAgICAgNjogXCJiaWtlXCIsXG4gICAgICA3OiBcImJpa2VcIixcbiAgICAgIDg6IFwiZm9vdFwiLFxuICAgICAgOTogXCJmb290XCIsXG4gICAgICAxMDogXCJ3aGVlbGNoYWlyXCIsXG4gICAgICAxMTogXCJoZ3ZcIixcbiAgICAgIDEyOiBcInNjb290ZXJcIixcbiAgICAgIDEzOiBcInNjb290ZXJcIlxuICAgIH07XG4gICAgd2luZG93LmM0Z01hcHNIb29rcy5ob29rX21hcF9jbGljayA9IHdpbmRvdy5jNGdNYXBzSG9va3MuaG9va19tYXBfY2xpY2sgfHwgW107XG4gICAgbGV0IHNjcm9sbHRvRWxlbWVudCA9IChjbGlja0V2ZW50KSA9PiB7XG4gICAgICBsZXQgZmVhdHVyZSA9IHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5tYXAuZm9yRWFjaEZlYXR1cmVBdFBpeGVsKGNsaWNrRXZlbnQucGl4ZWwsXG4gICAgICAgICAgZnVuY3Rpb24gKGZlYXR1cmUsIGxheWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmVhdHVyZTtcbiAgICAgICAgICB9XG4gICAgICApO1xuICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5nZXQoJ3RpZCcpKSB7XG4gICAgICAgIGxldCB6b29tVG9JZCA9IGZlYXR1cmUuZ2V0KCd0aWQnKTtcbiAgICAgICAgdGhpcy5wcm9wcy5zZXRSZXN1bHRGZWF0KGNsaWNrRXZlbnQpO1xuICAgICAgICB0aGlzLnByb3BzLnNldEFjdGl2ZUlkKHpvb21Ub0lkKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdpbmRvdy5jNGdNYXBzSG9va3MuaG9va19tYXBfY2xpY2sucHVzaChzY3JvbGx0b0VsZW1lbnQpO1xuICB9XG5cblxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICBsZXQgdGltZSA9IFwiXCI7XG4gICAgbGV0IGRpc3RhbmNlID0gXCJcIjtcbiAgICBsZXQgZGV0b3VyID0gXCJcIjtcbiAgICBsZXQgZmVhdHVyZUNvdW50ID0gXCJcIjtcbiAgICBpZiAodGhpcy5wcm9wcy5yb3V0ZXJJbnN0cnVjdGlvbnMgJiYgdGhpcy5wcm9wcy5yb3V0ZXJJbnN0cnVjdGlvbnMuaW5zdHJ1Y3Rpb25zICYmIHRoaXMucHJvcHMubW9kZSA9PT0gXCJyb3V0ZVwiKSB7XG4gICAgICB0aW1lID0gdG9IdW1hblRpbWUodGhpcy5wcm9wcy5yb3V0ZXJJbnN0cnVjdGlvbnMudGltZSk7XG4gICAgICBkaXN0YW5jZSA9IHRvSHVtYW5EaXN0YW5jZSh0aGlzLnByb3BzLnJvdXRlckluc3RydWN0aW9ucy5kaXN0YW5jZSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmZlYXR1cmVMaXN0ICYmIHRoaXMucHJvcHMubW9kZSA9PT0gXCJhcmVhXCIpIHtcbiAgICAgIGRldG91ciA9IHRoaXMucHJvcHMuZGV0b3VyO1xuICAgICAgZmVhdHVyZUNvdW50ID0gdGhpcy5wcm9wcy5mZWF0dXJlTGlzdC5mZWF0dXJlcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgbGV0IHJvdXRlckhlYWRlckNvbnRlbnQgPSBcIlwiO1xuICAgIGxldCBwcmludEZ1bmN0aW9uID0gKCkgPT4ge1xuICAgICAgbGV0IHF1ZXJ5U2VsZWN0b3IgPSB0aGlzLnByb3BzLnJlc3VsdE1vZGUgPT09IFwiaW5zdHJcIiA/ICcuYzRnLXJvdXRlLWluc3RydWN0aW9ucy13cmFwcGVyJyA6ICcuYzRnLXJvdXRlLWZlYXR1cmUtd3JhcHBlcic7XG4gICAgICBsZXQgcHJ0Q29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocXVlcnlTZWxlY3RvcikuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgaWYgKHRoaXMucHJvcHMucmVzdWx0TW9kZSA9PT0gXCJpbnN0clwiKSB7XG4gICAgICAgIGxldCBmcm9tQWRkcmVzcyA9IHRoaXMucHJvcHMucm91dGVyLnN0YXRlLmZyb21BZGRyZXNzO1xuICAgICAgICBsZXQgZGl2RnJvbUFkZHJlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbGV0IGxhYmVsRnJvbUFkZHJlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICBsYWJlbEZyb21BZGRyZXNzLmlubmVySFRNTCA9IHRoaXMucHJvcHMubGFuZy5ST1VURVJfRlJPTSArIFwiOiBcIjtcbiAgICAgICAgbGV0IGVtRnJvbUFkZHJlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdlbScpO1xuICAgICAgICBlbUZyb21BZGRyZXNzLmlubmVySFRNTCA9IGZyb21BZGRyZXNzO1xuICAgICAgICBkaXZGcm9tQWRkcmVzcy5hcHBlbmRDaGlsZChsYWJlbEZyb21BZGRyZXNzKTtcbiAgICAgICAgZGl2RnJvbUFkZHJlc3MuYXBwZW5kQ2hpbGQoZW1Gcm9tQWRkcmVzcyk7XG4gICAgICAgIGRpdkZyb21BZGRyZXNzLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2VtJykpO1xuXG4gICAgICAgIGxldCB0b0FkZHJlc3MgPSB0aGlzLnByb3BzLnJvdXRlci5zdGF0ZS50b0FkZHJlc3M7XG4gICAgICAgIGxldCBkaXZUb0FkZHJlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbGV0IGxhYmVsVG9BZGRyZXNzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgbGFiZWxUb0FkZHJlc3MuaW5uZXJIVE1MID0gdGhpcy5wcm9wcy5sYW5nLlJPVVRFUl9GUk9NICsgXCI6IFwiO1xuICAgICAgICBsZXQgZW1Ub0FkZHJlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdlbScpO1xuICAgICAgICBlbVRvQWRkcmVzcy5pbm5lckhUTUwgPSB0b0FkZHJlc3M7XG4gICAgICAgIGRpdlRvQWRkcmVzcy5hcHBlbmRDaGlsZChsYWJlbFRvQWRkcmVzcyk7XG4gICAgICAgIGRpdlRvQWRkcmVzcy5hcHBlbmRDaGlsZChlbVRvQWRkcmVzcyk7XG4gICAgICAgIGRpdlRvQWRkcmVzcy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdlbScpKTtcblxuICAgICAgICBwcnRDb250ZW50LnF1ZXJ5U2VsZWN0b3IoJy5jNGctcm91dGVyLWluc3RydWN0aW9ucy1oZWFkZXInKS5hcHBlbmRDaGlsZChkaXZGcm9tQWRkcmVzcyk7XG4gICAgICAgIHBydENvbnRlbnQucXVlcnlTZWxlY3RvcignLmM0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb25zLWhlYWRlcicpLmFwcGVuZENoaWxkKGRpdlRvQWRkcmVzcyk7XG4gICAgICB9XG5cbiAgICAgIHBydENvbnRlbnQucXVlcnlTZWxlY3RvcignLmM0Zy1yb3V0ZXItcHJpbnQnKS5yZW1vdmUoKTtcbiAgICAgIGxldCBXaW5QcmludCA9IHdpbmRvdy5vcGVuKCcnLCAnJywgJ2xlZnQ9MCx0b3A9MCx3aWR0aD04MDAsaGVpZ2h0PTkwMCx0b29sYmFyPTAsc2Nyb2xsYmFycz0wLHN0YXR1cz0wJyk7XG4gICAgICBXaW5QcmludC5kb2N1bWVudC53cml0ZShwcnRDb250ZW50LmlubmVySFRNTCk7XG4gICAgICBXaW5QcmludC5kb2N1bWVudC5jbG9zZSgpO1xuICAgICAgV2luUHJpbnQuZm9jdXMoKTtcbiAgICAgIFdpblByaW50LnByaW50KCk7XG4gICAgICBXaW5QcmludC5jbG9zZSgpO1xuICAgIH07XG4gICAgaWYgKCh0aW1lICYmIGRpc3RhbmNlKSAmJiB0aGlzLnByb3BzLm1vZGUgPT09IFwicm91dGVcIikge1xuXG4gICAgICByb3V0ZXJIZWFkZXJDb250ZW50ID0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImM0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb25zLWhlYWRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYzRnLXJvdXRlci1yb3V0ZS10aW1lXCI+XG4gICAgICAgICAgICA8bGFiZWw+e3RoaXMucHJvcHMubGFuZy5ST1VURVJfVklFV19MQUJFTF9USU1FfTwvbGFiZWw+XG4gICAgICAgICAgICA8ZW0+e3RpbWV9PC9lbT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImM0Zy1yb3V0ZXItcm91dGUtZGlzdGFuY2VcIj5cbiAgICAgICAgICAgIDxsYWJlbD57dGhpcy5wcm9wcy5sYW5nLlJPVVRFUl9WSUVXX0xBQkVMX0RJU1RBTkNFfTwvbGFiZWw+XG4gICAgICAgICAgICA8ZW0+e2Rpc3RhbmNlfTwvZW0+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e1wiYzRnLXJvdXRlci1kb3dubG9hZFwifSB0aXRsZT17dGhpcy5wcm9wcy5sYW5nLlJPVVRFUl9ET1dOTE9BRH0gb25Nb3VzZVVwPXsoKT0+e3RoaXMuZXhwb3J0R3B4KCl9fS8+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e1wiYzRnLXJvdXRlci1wcmludFwifSB0aXRsZT17dGhpcy5wcm9wcy5sYW5nLlJPVVRFUl9QUklOVH0gb25Nb3VzZVVwPXsoKT0+e3ByaW50RnVuY3Rpb24oKX19Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoKGRldG91ciAmJiBmZWF0dXJlQ291bnQpICYmIHRoaXMucHJvcHMubW9kZSA9PT0gXCJhcmVhXCIpIHtcblxuICAgICAgcm91dGVySGVhZGVyQ29udGVudCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjNGctcm91dGVyLWluc3RydWN0aW9ucy1oZWFkZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImM0Zy1yb3V0ZXItYXJlYS1kZXRvdXJcIj5cbiAgICAgICAgICAgIDxsYWJlbD57dGhpcy5wcm9wcy5sYW5nLkFSRUFfREVUT1VSfTo8L2xhYmVsPlxuICAgICAgICAgICAgPGVtPntkZXRvdXJ9IGttPC9lbT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImM0Zy1yb3V0ZXItYXJlYS1mZWF0dXJlY291bnRcIj5cbiAgICAgICAgICAgIDxsYWJlbD57dGhpcy5wcm9wcy5sYW5nLkFSRUFfRkVBVFVSRUNPVU5UfTo8L2xhYmVsPlxuICAgICAgICAgICAgPGVtPntmZWF0dXJlQ291bnR9PC9lbT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17XCJjNGctcm91dGVyLXByaW50XCJ9IG9uTW91c2VVcD17KCk9PntwcmludEZ1bmN0aW9uKCl9fS8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cblxuICAgIGlmICgodGhpcy5wcm9wcy5yZXN1bHRNb2RlID09PSBcImluc3RyXCIgJiYgdGhpcy5wcm9wcy5yb3V0ZXJJbnN0cnVjdGlvbnMgJiYgdGhpcy5wcm9wcy5tb2RlID09PSBcInJvdXRlXCIpKSB7XG4gICAgICByZXN1bHQgPSA8U3VzcGVuc2UgZmFsbGJhY2s9ezxkaXY+XCJsb2FkaW5nLi5cIjwvZGl2Pn0+XG4gICAgICAgICAgPFJvdXRlckluc3RydWN0aW9uc0NvbnRhaW5lciBjbGFzc05hbWU9e1wiYzRnLXJvdXRlLWluc3RydWN0aW9ucy13cmFwcGVyXCJ9IG1hcENvbnRyb2xsZXI9e3RoaXMucHJvcHMubWFwQ29udHJvbGxlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckluc3RydWN0aW9ucz17dGhpcy5wcm9wcy5yb3V0ZXJJbnN0cnVjdGlvbnN9IHJvdXRlcldheVNvdXJjZT17dGhpcy5wcm9wcy5yb3V0ZXJXYXlTb3VyY2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJIaW50U291cmNlPXt0aGlzLnByb3BzLnJvdXRlckhpbnRTb3VyY2V9IG9wZW49e3RoaXMucHJvcHMub3Blbn0gaGVhZGVyPXtyb3V0ZXJIZWFkZXJDb250ZW50fS8+XG4gICAgICAgIDwvU3VzcGVuc2U+XG4gICAgfSBlbHNlIGlmICgoKHRoaXMucHJvcHMucmVzdWx0TW9kZSA9PT0gXCJmZWF0XCIgfHwgdGhpcy5wcm9wcy5tb2RlID09PSBcImFyZWFcIikgfHwgKCF0aGlzLnByb3BzLnJvdXRlckluc3RydWN0aW9ucyAmJiB0aGlzLnByb3BzLmZlYXR1cmVMaXN0KSkpIHtcbiAgICAgIHJlc3VsdCA9IDxTdXNwZW5zZSBmYWxsYmFjaz17PGRpdj5cImxvYWRpbmcuLlwiPC9kaXY+fT5cbiAgICAgICAgICA8Um91dGVyRmVhdHVyZUxpc3QgY2xhc3NOYW1lPXtcImM0Zy1yb3V0ZS1mZWF0dXJlLXdyYXBwZXJcIn0gYWN0aXZlSWQ9e3RoaXMucHJvcHMuYWN0aXZlSWR9IHNldEFjdGl2ZUlkPXt0aGlzLnByb3BzLnNldEFjdGl2ZUlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlTW9kZT17dGhpcy5wcm9wcy5tb2RlfSBsYXllclJvdXRlPXt0aGlzLnByb3BzLmxheWVyUm91dGV9IGxheWVyQXJlYT17dGhpcy5wcm9wcy5sYXllckFyZWF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUxpc3Q9e3RoaXMucHJvcHMuZmVhdHVyZUxpc3R9IG1hcENvbnRyb2xsZXI9e3RoaXMucHJvcHMubWFwQ29udHJvbGxlcn0gZmVhdHVyZVNvdXJjZT17dGhpcy5wcm9wcy5mZWF0dXJlU291cmNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyVmFsdWVSb3V0ZT17dGhpcy5wcm9wcy5sYXllclZhbHVlUm91dGV9IGxheWVyVmFsdWVBcmVhPXt0aGlzLnByb3BzLmxheWVyVmFsdWVBcmVhfSBoZWFkZXI9e3JvdXRlckhlYWRlckNvbnRlbnR9Lz5cbiAgICAgICAgPC9TdXNwZW5zZT5cbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub3Blbikge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lICsgKHRoaXMucHJvcHMub3BlbiA/IFwiIGM0Zy1vcGVuXCIgOiBcIiBjNGctY2xvc2VcIilcbiAgICAgICAgKyAodGhpcy5wcm9wcy5vcGVuID8gXCIgYzRnLWRldGFpbHMtb3BlblwiIDogXCJcIil9PlxuICAgICAgICAgIHtyZXN1bHR9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGxldCBjbGFzc05hbWUgPSB0aGlzLnByb3BzLmNsYXNzTmFtZSArICh0aGlzLnByb3BzLm9wZW4gPyBcIiBjNGctb3BlblwiIDogXCIgYzRnLWNsb3NlXCIpO1xuICAgIGxldCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNsYXNzTmFtZSlbMF07XG4gICAgbGV0IGNvbnRyb2xDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmM0Zy1yb3V0ZXItcGFuZWwuYzRnLW9wZW5cIik7XG4gICAgaWYgKGNvbnRyb2xDb250YWluZXIpIHtcbiAgICAgIGNvbnRyb2xDb250YWluZXIgPSBjb250cm9sQ29udGFpbmVyWzBdO1xuICAgIH1cbiAgICBsZXQgbWFwQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jNGdfbWFwXCIpID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jNGdfbWFwXCIpWzBdIDogZmFsc2U7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIGlmIChtYXBDb250YWluZXIgJiYgY29udGFpbmVyKSB7XG4gICAgICBpZiAoY29udHJvbENvbnRhaW5lcikge1xuICAgICAgICBpZiAoY29udGFpbmVyLm9mZnNldEhlaWdodCArIGNvbnRyb2xDb250YWluZXIub2Zmc2V0SGVpZ2h0ICsgODQgPiBtYXBDb250YWluZXIub2Zmc2V0SGVpZ2h0KSB7XG4gICAgICAgICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IG1hcENvbnRhaW5lci5vZmZzZXRIZWlnaHQgLSBjb250cm9sQ29udGFpbmVyLm9mZnNldEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT09IFwiYXJlYVwiICYmIHRoaXMucHJvcHMucmVzdWx0TW9kZSAhPT0gXCJmZWF0XCIpIHtcbiAgICAgIHRoaXMucHJvcHMucm91dGVyLnNldFN0YXRlKHtyZXN1bHRNb2RlOiBcImZlYXRcIn0pO1xuICAgIH1cbiAgfVxuXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5wcm9wcy5zZXRPcGVuKHRydWUpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5wcm9wcy5zZXRPcGVuKGZhbHNlKTtcbiAgfVxuXG4gIGNsaWNrQ29udHJvbCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH1cbiAgZXhwb3J0R3B4KCkge1xuICAgIGxldCBzb3VyY2UgPSB0aGlzLnByb3BzLnJvdXRlci5yb3V0ZXJXYXlTb3VyY2U7XG4gICAgbGV0IGZvcm1hdCA9IG5ldyBHUFgoKTtcbiAgICBpZiAoc291cmNlICYmIHNvdXJjZS5nZXRGZWF0dXJlcyAmJiBzb3VyY2UuZ2V0RmVhdHVyZXMoKSkge1xuICAgICAgbGV0IHN0ckV4cG9ydCA9IGZvcm1hdC53cml0ZUZlYXR1cmVzKHNvdXJjZS5nZXRGZWF0dXJlcygpLCB7XG4gICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBcIkVQU0c6Mzg1N1wiLFxuICAgICAgICBkYXRhUHJvamVjdGlvbjogXCJFUFNHOjQzMjZcIixcbiAgICAgICAgZGVjaW1hbHM6IDNcbiAgICAgIH0pO1xuICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnaHJlZicsICdkYXRhOnRleHQveG1sO2NoYXJzZXQ9dXRmLTgsJyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJFeHBvcnQpKTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsIFwicm91dGUuZ3B4XCIpO1xuXG4gICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgICBlbGVtZW50LmNsaWNrKCk7XG5cbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgICBjb25zb2xlLmxvZyhzdHJFeHBvcnQpO1xuICAgIH1cbiAgfVxuXG4gIHNsaWRlSW5Db2xsaWRpbmdFbGVtZW50cygpIHtcbiAgICAvLyBvdmVycmlkZSBwYXJlbnQgbWV0aG9kXG4gIH1cblxuICBzbGlkZU91dENvbGxpZGluZ0VsZW1lbnRzKCkge1xuICAgIC8vIG92ZXJyaWRlIHBhcmVudCBtZXRob2RcbiAgfVxufSIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBTdXNwZW5zZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtSb3V0ZXJSZXN1bHRDb250YWluZXJ9IGZyb20gXCIuL2M0Zy1yb3V0ZXItcmVzdWx0LWNvbnRhaW5lci5qc3hcIjtcbi8vY29uc3QgUm91dGVyUmVzdWx0Q29udGFpbmVyID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoJy4vYzRnLXJvdXRlci1yZXN1bHQtY29udGFpbmVyLmpzeCcpKTtcbmltcG9ydCB7cm91dGluZ0NvbnN0YW50c30gZnJvbSBcIi4vLi4vcm91dGluZy1jb25zdGFudHNcIjtcbmltcG9ydCB7RmVhdHVyZX0gZnJvbSBcIm9sXCI7XG5pbXBvcnQge1BvaW50fSBmcm9tIFwib2wvZ2VvbVwiO1xuaW1wb3J0IHtQb2x5bGluZX0gZnJvbSBcIm9sL2Zvcm1hdFwiO1xuaW1wb3J0IHt0cmFuc2Zvcm0sIHRvTG9uTGF0LCBmcm9tTG9uTGF0LCB0cmFuc2Zvcm1FeHRlbnR9IGZyb20gXCJvbC9wcm9qXCI7XG5pbXBvcnQge1N0eWxlLCBTdHJva2V9IGZyb20gXCJvbC9zdHlsZVwiO1xuaW1wb3J0IHtWZWN0b3IsIEdyb3VwfSBmcm9tIFwib2wvbGF5ZXJcIjtcbmltcG9ydCB7VmVjdG9yIGFzIFZlY3RvclNvdXJjZX0gZnJvbSBcIm9sL3NvdXJjZVwiO1xuaW1wb3J0IHtDb2xsZWN0aW9ufSBmcm9tIFwib2xcIjtcbmltcG9ydCB7TGluZVN0cmluZ30gZnJvbSBcIm9sL2dlb21cIjtcbmltcG9ydCB7TW9kaWZ5LCBTZWxlY3R9IGZyb20gXCJvbC9pbnRlcmFjdGlvblwiO1xuaW1wb3J0IHtHZW9KU09OfSBmcm9tIFwib2wvZm9ybWF0XCI7XG5pbXBvcnQge1JvdXRpbmdQZXJtYWxpbmt9IGZyb20gXCIuLy4uL2M0Zy1yb3V0aW5nLXBlcm1hbGlua1wiO1xuaW1wb3J0IHtnZXRMYW5ndWFnZX0gZnJvbSBcIi4vLi4vcm91dGluZy1jb25zdGFudC1pMThuXCI7XG5pbXBvcnQge2Nzc0NvbnN0YW50c30gZnJvbSBcIi4vLi4vYzRnLW1hcHMtY29uc3RhbnRcIjtcbmNvbnN0IFRpdGxlYmFyID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoXCIuL2M0Zy10aXRsZWJhci5qc3hcIikpO1xuaW1wb3J0IHt1dGlsc30gZnJvbSBcIi4vLi4vYzRnLW1hcHMtdXRpbHNcIjtcbmltcG9ydCB7Um91dGVyUG9wdXBCdXR0b25zfSBmcm9tIFwiLi9jNGctcm91dGVyLXBvcHVwLWJ1dHRvbnMuanN4XCI7XG4vL2NvbnN0IFJvdXRlclBvcHVwQnV0dG9ucyA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KCcuL2M0Zy1yb3V0ZXItcG9wdXAtYnV0dG9ucy5qc3gnKSk7XG5jb25zdCBSb3V0ZXJDb250cm9scyA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KCcuL2M0Zy1yb3V0ZXItY29udHJvbHMuanN4JykpO1xuY29uc3QgUm91dGVyUHJvZmlsZVNlbGVjdGlvbiA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KCcuL2M0Zy1yb3V0ZXItcHJvZmlsZS1zZWxlY3Rpb24uanN4JykpO1xuXG5jb25zdCBvc210b2dlb2pzb24gPSByZXF1aXJlKCdvc210b2dlb2pzb24nKTtcblxuLyoqXG4gKiBNYWluIHJvdXRlciBjb21wb25lbnQuIEl0IGNvbnNpc3RzIG9mIHRoZSBSb3V0ZXJDb250cm9scyBhbmQgUm91dGVyUmVzdWx0Q29udGFpbmVyIGNvbXBvbmVudHMsIGFuZCBob2xkcyB0aGVcbiAqIGNvbm5lY3Rpb24gdG8gdGhlIHJvdXRlciBtb2RlbCwgd2hpY2ggaXMgcHJvcGFnYXRlZCBkb3duIHRvIHRoZSBhY3R1YWxseSBuZWVkaW5nIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZXJWaWV3IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnNldEFjdGl2ZUlkID0gdGhpcy5zZXRBY3RpdmVJZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2V0T3BlbiA9IHRoaXMuc2V0T3Blbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2xvc2UgPSB0aGlzLmNsb3NlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vcGVuQ29udHJvbHMgPSB0aGlzLm9wZW5Db250cm9scy5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVzZXRGcm9tUG9pbnQgPSB0aGlzLnJlc2V0RnJvbVBvaW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZXNldFRvUG9pbnQgPSB0aGlzLnJlc2V0VG9Qb2ludC5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVzZXRBcmVhUG9pbnQgPSB0aGlzLnJlc2V0QXJlYVBvaW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy50b2dnbGVSZXN1bHREZXRhaWxzID0gdGhpcy50b2dnbGVSZXN1bHREZXRhaWxzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZXRSZXN1bHRJbnN0ciA9IHRoaXMuc2V0UmVzdWx0SW5zdHIuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNldFJlc3VsdEZlYXQgPSB0aGlzLnNldFJlc3VsdEZlYXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlUm91dGUgPSB0aGlzLnJlY2FsY3VsYXRlUm91dGUuYmluZCh0aGlzKTtcbiAgICBjb25zdCBtYXBDb250cm9sbGVyID0gdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyO1xuICAgIGxldCBhcnJQcm9maWxlcyA9IFtdO1xuICAgIHRoaXMubGFuZ3VhZ2VDb25zdGFudHMgPSBnZXRMYW5ndWFnZShtYXBDb250cm9sbGVyLmRhdGEpO1xuICAgIGZvciAobGV0IGtleSBpbiBtYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzKSB7XG4gICAgICBpZiAobWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGFyclByb2ZpbGVzLnB1c2goe1xuICAgICAgICAgIGlkOiBrZXksXG4gICAgICAgICAgdGV4dDogbWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wcm9maWxlc1trZXldXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgbGF5ZXJSb3V0ZSA9IG51bGw7XG4gICAgbGV0IGxheWVyQXJlYSA9IG51bGw7XG4gICAgbGV0IGxheWVyVmFsdWVSb3V0ZSA9IG51bGw7XG4gICAgbGV0IGxheWVyVmFsdWVBcmVhID0gbnVsbDtcbiAgICBpZiAobWFwQ29udHJvbGxlci5kYXRhLnNob3dGZWF0dXJlcykge1xuICAgICAgY29uc3Qgcm91dGVyTGF5ZXJzID0gbWFwQ29udHJvbGxlci5kYXRhLnJvdXRlckxheWVycztcbiAgICAgIGZvciAobGV0IGtleSBpbiByb3V0ZXJMYXllcnMpIHtcbiAgICAgICAgaWYgKHJvdXRlckxheWVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgbGF5ZXJSb3V0ZSA9IGxheWVyUm91dGUgfHwga2V5O1xuICAgICAgICAgIGxheWVyVmFsdWVSb3V0ZSA9IE9iamVjdC5rZXlzKHJvdXRlckxheWVyc1tsYXllclJvdXRlXSlbMF0gfHwgbGF5ZXJWYWx1ZVJvdXRlO1xuICAgICAgICAgIGxheWVyQXJlYSA9IGxheWVyQXJlYSB8fCBrZXk7XG4gICAgICAgICAgbGF5ZXJWYWx1ZUFyZWEgPSBPYmplY3Qua2V5cyhyb3V0ZXJMYXllcnNbbGF5ZXJBcmVhXSlbMF0gfHwgbGF5ZXJWYWx1ZUFyZWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcm91dGVyOiBwcm9wcy5yb3V0ZXIsXG4gICAgICBvYmpTZXR0aW5nczoge1xuICAgICAgICBcInByb3h5VXJsXCI6IG1hcENvbnRyb2xsZXIgJiYgbWFwQ29udHJvbGxlci5kYXRhID8gbWFwQ29udHJvbGxlci5kYXRhLnByb3h5VXJsIDogJycsXG4gICAgICAgIFwia2V5QXV0b2NvbXBsZXRlXCI6IG1hcENvbnRyb2xsZXIgJiYgbWFwQ29udHJvbGxlci5kYXRhID8gbWFwQ29udHJvbGxlci5kYXRhLmF1dG9jb21wbGV0ZSA6ICcnLFxuICAgICAgICBcImNlbnRlclwiIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxldCBjZW50ZXIgPSBtYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0Q2VudGVyKCk7XG4gICAgICAgICAgY2VudGVyID0gdHJhbnNmb3JtKGNlbnRlciwgXCJFUFNHOjM4NTdcIixcIkVQU0c6NDMyNlwiKTtcbiAgICAgICAgICByZXR1cm4gY2VudGVyO1xuICAgICAgICB9LFxuICAgICAgICBcImdlb3NlYXJjaFBhcmFtc1wiOiBtYXBDb250cm9sbGVyLmRhdGEuZ2Vvc2VhcmNoLnBhcmFtc1xuICAgICAgfSxcbiAgICAgIGFjdGl2ZUlkOiBudWxsLFxuICAgICAgb3BlblJlc3VsdHM6IGZhbHNlLFxuICAgICAgY29udGFpbmVyQWRkcmVzc2VzOiB7XG4gICAgICAgIGFyckZyb21Qb3NpdGlvbnM6IFtdLFxuICAgICAgICBhcnJGcm9tTmFtZXM6IFtdLFxuICAgICAgICBhcnJUb1Bvc2l0aW9uczogW10sXG4gICAgICAgIGFyclRvTmFtZXM6IFtdLFxuICAgICAgICBhcnJBcmVhUG9zaXRpb25zOiBbXSxcbiAgICAgICAgYXJyQXJlYU5hbWVzOiBbXSxcbiAgICAgICAgYXJyT3ZlclBvc2l0aW9uczoge30sXG4gICAgICAgIGFyck92ZXJOYW1lczoge31cbiAgICAgIH0sXG4gICAgICBmcm9tQWRkcmVzczogXCJcIixcbiAgICAgIHRvQWRkcmVzczogXCJcIixcbiAgICAgIGFyZWFBZGRyZXNzOiBcIlwiLFxuICAgICAgbGF5ZXJSb3V0ZTogbGF5ZXJSb3V0ZSxcbiAgICAgIGxheWVyQXJlYTogbGF5ZXJBcmVhLFxuICAgICAgbGF5ZXJWYWx1ZVJvdXRlOiBsYXllclZhbHVlUm91dGUsXG4gICAgICBsYXllclZhbHVlQXJlYTogbGF5ZXJWYWx1ZUFyZWEsXG4gICAgICBkZXRvdXJSb3V0ZTogcHJvcHMuZGV0b3VyUm91dGUuaW5pdGlhbCxcbiAgICAgIGRldG91ckFyZWE6IHByb3BzLmRldG91ckFyZWEuaW5pdGlhbCxcbiAgICAgIGZlYXR1cmVMaXN0OiB7XG4gICAgICAgIGZlYXR1cmVzOiBbXSxcbiAgICAgICAgdHlwZTogXCJcIlxuICAgICAgfSxcbiAgICAgIG1vZGU6IG1hcENvbnRyb2xsZXIuZGF0YS5pbml0aWFsTW9kZSxcbiAgICAgIG92ZXJQdEN0cjogMCxcbiAgICAgIG92ZXJBZGRyZXNzZXM6IFtdLFxuICAgICAgZmVhdHVyZVNvdXJjZTogdW5kZWZpbmVkLFxuICAgICAgcm91dGVyV2F5U291cmNlOiB1bmRlZmluZWQsXG4gICAgICByb3V0ZXJIaW50U291cmNlOiB1bmRlZmluZWQsXG4gICAgICBhcmVhUG9pbnQ6IG51bGwsXG4gICAgICBmcm9tUG9pbnQ6IG51bGwsXG4gICAgICB0b1BvaW50OiBudWxsLFxuICAgICAgb3ZlclBvaW50czogW10sXG4gICAgICBwcm9maWxlczogYXJyUHJvZmlsZXMgPyBhcnJQcm9maWxlcyA6IFtdLFxuICAgICAgY3VycmVudFByb2ZpbGU6IGFyclByb2ZpbGVzICYmIGFyclByb2ZpbGVzWzBdICYmIGFyclByb2ZpbGVzWzBdLmlkID8gYXJyUHJvZmlsZXNbMF0uaWQgOiAwLFxuICAgICAgb3BlbjogKHByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5pbml0aWFsX29wZW5fY29tcCA9PT0gXCJyb3V0aW5nXCIpIHx8IGZhbHNlLCAvL1RvRE9cbiAgICAgIG9wZW5TZXR0aW5nczogKHByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5pbml0aWFsX29wZW5fY29tcCA9PT0gXCJyb3V0aW5nXCIpIHx8IGZhbHNlLCAvL1RvRE9cbiAgICAgIHJvdXRlckluc3RydWN0aW9uczoge30sXG4gICAgICByZXN1bHRNb2RlOiBwcm9wcy5tYXBDb250cm9sbGVyLmRhdGEuaW5pdGlhbFJlc3VsdE1vZGUgfHwgXCJpbnN0clwiXG4gICAgfTtcbiAgICB0aGlzLnBvcHVwUm91dGVCdXR0b25XcmFwcGVyID0gXCJcIjsgLy8gdGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBvZiB0aGUgZGlmZmVyZW50IHBvcHVwIGhhbmRsaW5nc1xuICAgIHRoaXMuc3dhcFBvaW50cyA9IHRoaXMuc3dhcFBvaW50cy5iaW5kKHRoaXMpO1xuICAgIGlmIChtYXBDb250cm9sbGVyLmRhdGEudXNlUGVybWFsaW5rKSB7XG4gICAgICB0aGlzLnBlcm1hbGluayA9IG5ldyBSb3V0aW5nUGVybWFsaW5rKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLnByb2ZpbGVUcmFuc2xhdGlvbiA9IHtcbiAgICAgIDA6IFwiY2FyXCIsXG4gICAgICAxOiBcImhndlwiLFxuICAgICAgMjogXCJiaWtlXCIsXG4gICAgICAzOiBcImJpa2VcIixcbiAgICAgIDQ6IFwiYmlrZVwiLFxuICAgICAgNTogXCJiaWtlXCIsXG4gICAgICA2OiBcImJpa2VcIixcbiAgICAgIDc6IFwiYmlrZVwiLFxuICAgICAgODogXCJmb290XCIsXG4gICAgICA5OiBcImZvb3RcIixcbiAgICAgIDEwOiBcIndoZWVsY2hhaXJcIixcbiAgICAgIDExOiBcImhndlwiLFxuICAgICAgMTI6IFwic2Nvb3RlclwiLFxuICAgICAgMTM6IFwic2Nvb3RlclwiXG4gICAgfTtcblxuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICBjb25zdCBtYXBEYXRhID0gdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGE7XG4gICAgbGV0IHNvdXJjZXMgPSB7XG4gICAgICB3YXlTb3VyY2U6IHRoaXMuc3RhdGUucm91dGVyV2F5U291cmNlLFxuICAgICAgaGludFNvdXJjZTogdGhpcy5zdGF0ZS5yb3V0ZXJIaW50U291cmNlLFxuICAgICAgZmVhdHVyZVNvdXJjZTogdGhpcy5zdGF0ZS5mZWF0dXJlU291cmNlXG4gICAgfTtcbiAgICBsZXQgc2xpZGVyT3B0aW9ucyA9IHt9O1xuICAgIGlmICh0aGlzLnN0YXRlLm1vZGUgPT09IFwicm91dGVcIikge1xuICAgICAgc2xpZGVyT3B0aW9ucyA9IHtcbiAgICAgICAgbWluOiBtYXBEYXRhLmRldG91clJvdXRlLm1pbixcbiAgICAgICAgbWF4OiBtYXBEYXRhLmRldG91clJvdXRlLm1heCxcbiAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuZGV0b3VyUm91dGUsXG4gICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUubW9kZSA9PT0gXCJhcmVhXCIpIHtcbiAgICAgIHNsaWRlck9wdGlvbnMgPSB7XG4gICAgICAgIG1pbjogbWFwRGF0YS5kZXRvdXJBcmVhLm1pbixcbiAgICAgICAgbWF4OiBtYXBEYXRhLmRldG91ckFyZWEubWF4LFxuICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5kZXRvdXJBcmVhLFxuICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IHJlc2V0RnVuY3Rpb25zID0ge1xuICAgICAgZnJvbTogdGhpcy5yZXNldEZyb21Qb2ludCxcbiAgICAgIHRvOiB0aGlzLnJlc2V0VG9Qb2ludCxcbiAgICAgIGFyZWE6IHRoaXMucmVzZXRBcmVhUG9pbnRcbiAgICB9O1xuXG4gICAgY29uc3Qgb3ZlclNldHRpbmdzID0gdGhpcy5jcmVhdGVPdmVyU2V0dGluZ3MoKTtcblxuXG4gICAgbGV0IGhlYWRsaW5lID0gXCJcIjtcbiAgICBpZiAodGhpcy5zdGF0ZS5tb2RlID09PSBcInJvdXRlXCIpIHtcbiAgICAgIGhlYWRsaW5lID0gdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVySGVhZGxpbmUgfHwgdGhpcy5sYW5ndWFnZUNvbnN0YW50cy5ST1VURVJfREVGQVVMVF9IRUFETElORV9ST1VURTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUubW9kZSA9PT0gXCJhcmVhXCIpIHtcbiAgICAgIGhlYWRsaW5lID0gdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEuYXJlYUhlYWRsaW5lIHx8IHRoaXMubGFuZ3VhZ2VDb25zdGFudHMuUk9VVEVSX0RFRkFVTFRfSEVBRExJTkVfQVJFQTtcbiAgICB9XG5cbiAgICBsZXQgaW5zdHJ1Y3Rpb25zID0gdGhpcy5zdGF0ZS5yb3V0ZXJJbnN0cnVjdGlvbnMuaW5zdHJ1Y3Rpb25zO1xuXG4gICAgbGV0IHJlc3VsdFN3aXRjaGVyID0gXCJcIjtcbiAgICBsZXQgc3dpdGNoZXJCdXR0b25zID0gW107XG4gICAgaWYgKHRoaXMuc3RhdGUuZmVhdHVyZUxpc3QuZmVhdHVyZXMubGVuZ3RoID4gMFxuICAgICAgJiYgKCh0aGlzLnN0YXRlLmZyb21BZGRyZXNzICYmIHRoaXMuc3RhdGUudG9BZGRyZXNzICYmIHRoaXMuc3RhdGUubW9kZSA9PT0gXCJyb3V0ZVwiKVxuICAgICAgICB8fCB0aGlzLnN0YXRlLmFyZWFBZGRyZXNzICYmIHRoaXMuc3RhdGUubW9kZSA9PT0gXCJhcmVhXCIpKSB7XG4gICAgICBzd2l0Y2hlckJ1dHRvbnMucHVzaCg8YnV0dG9uIGlkPVwiYzRnLXJvdXRlci1idXR0b24tZmVhdHVyZVwiIGNsYXNzTmFtZT17KHRoaXMuc3RhdGUucmVzdWx0TW9kZSA9PT0gXCJmZWF0XCIgJiYgdGhpcy5zdGF0ZS5vcGVuUmVzdWx0cykgPyBcImM0Zy1hY3RpdmVcIiA6IFwiYzRnLWluYWN0aXZlXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VVcD17dGhpcy5zZXRSZXN1bHRGZWF0fSBrZXk9ezF9IHRpdGxlPXtcIkVyZ2VibmlzbGlzdGUgYW56ZWlnZW5cIn0gLz4pO1xuICAgIH1cbiAgICBpZiAoaW5zdHJ1Y3Rpb25zICYmIChpbnN0cnVjdGlvbnMubGVuZ3RoID4gMCkgJiYgdGhpcy5zdGF0ZS5tb2RlID09PSBcInJvdXRlXCIpIHtcbiAgICAgIHN3aXRjaGVyQnV0dG9ucy5wdXNoKDxidXR0b24gaWQ9XCJjNGctcm91dGVyLWJ1dHRvbi1pbnN0cnVjdGlvbnNcIiBjbGFzc05hbWU9eyh0aGlzLnN0YXRlLnJlc3VsdE1vZGUgPT09IFwiaW5zdHJcIiAmJiB0aGlzLnN0YXRlLm9wZW5SZXN1bHRzKSA/IFwiYzRnLWFjdGl2ZVwiIDogXCJjNGctaW5hY3RpdmVcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZVVwPXt0aGlzLnNldFJlc3VsdEluc3RyfSBrZXk9ezJ9IHRpdGxlPXtcIlJvdXRlbmhpbndlaXNlIGFuemVpZ2VuXCJ9IC8+KTtcbiAgICB9XG4gICAgaWYgKHN3aXRjaGVyQnV0dG9ucy5sZW5ndGggPiAwKSB7XG4gICAgICByZXN1bHRTd2l0Y2hlciA9IChcbiAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtcImM0Zy1yb3V0ZXItaGlkZS1mb3JtLWJ1dHRvbiBcIiArICh0aGlzLnN0YXRlLm9wZW5TZXR0aW5ncyA/IFwiYzRnLWFjdGl2ZVwiIDogXCJjNGctaW5hY3RpdmVcIil9IG9uTW91c2VVcD17KCkgPT4ge3RoaXMuc2V0U3RhdGUoe29wZW5TZXR0aW5nczogIXRoaXMuc3RhdGUub3BlblNldHRpbmdzfSl9fSB0aXRsZT17dGhpcy5sYW5ndWFnZUNvbnN0YW50cy5ST1VURVJfU0VUVElOR1N9Lz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImM0Zy1yb3V0ZXItbW9kZS1zd2l0Y2hcIj5cbiAgICAgICAgICAgIHtzd2l0Y2hlckJ1dHRvbnN9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17XCJjNGctcm91dGVyLXdyYXBwZXJcIn0+XG4gICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PGRpdj5Mb2FkaW5nLi4uPC9kaXY+fT5cbiAgICAgICAgICA8VGl0bGViYXIgd3JhcHBlckNsYXNzPXtcImM0Zy1yb3V0ZXItaGVhZGVyXCJ9IGhlYWRlcj17aGVhZGxpbmV9IGhlYWRlckNsYXNzPXtcImM0Zy1yb3V0ZXItaGVhZGxpbmVcIn1cbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsQnRuQ2xhc3M9e1wiYzRnLXJvdXRlci1leHRlbmRlZC1vcHRpb25zXCJ9IGhpZGVDb250YWluZXI9e1wiLmM0Zy1yb3V0ZXItY29udGFpbmVyLXJpZ2h0XCJ9IGRldGFpbEJ0bkNiPXt0aGlzLnRvZ2dsZURldGFpbHN9IGNsb3NlQnRuQ2xhc3M9e1wiYzRnLXJvdXRlci1jbG9zZVwifSBjbG9zZUJ0bkNiPXt0aGlzLmNsb3NlfSBjbG9zZUJ0blRpdGxlPXt0aGlzLmxhbmd1YWdlQ29uc3RhbnRzLkNMT1NFfS8+XG4gICAgICAgIDwvU3VzcGVuc2U+XG4gICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJjNGctcm91dGVyLXN3aXRjaGVyXCJ9PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAge3Jlc3VsdFN3aXRjaGVyfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxkaXY+XCJsb2FkaW5nLi4uXCI8L2Rpdj59PlxuICAgICAgICAgICAgICA8Um91dGVyUHJvZmlsZVNlbGVjdGlvbiBwcm9maWxlcz17dGhpcy5zdGF0ZS5wcm9maWxlc30gcm91dGVyPXt0aGlzfSBjdXJyZW50UHJvZmlsZT17dGhpcy5zdGF0ZS5jdXJyZW50UHJvZmlsZX0vPlxuICAgICAgICAgICAgPC9TdXNwZW5zZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8ZGl2PlwibG9hZGluZ1wiPC9kaXY+fT5cbiAgICAgICAgICA8Um91dGVyQ29udHJvbHMgcm91dGVyPXt0aGlzfSBvcGVuPXt0aGlzLnN0YXRlLm9wZW4gJiYgdGhpcy5zdGF0ZS5vcGVuU2V0dGluZ3N9IHNldE9wZW49e3RoaXMub3BlbkNvbnRyb2xzfSBwcm9maWxlcz17dGhpcy5zdGF0ZS5wcm9maWxlc30gY2xhc3NOYW1lPXtcImM0Zy1yb3V0ZXItcGFuZWxcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqU2V0dGluZ3M9e3RoaXMuc3RhdGUub2JqU2V0dGluZ3N9IG9iakZ1bmN0aW9ucz17dGhpcy5vYmpGdW5jdGlvbnN9IG92ZXJTZXR0aW5ncz17b3ZlclNldHRpbmdzfSBlbmFibGVPdmVyUG9pbnRzPXt0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5lbmFibGVPdmVyUG9pbnRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzPXtzb3VyY2VzfSBsYXllcnM9e3RoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlckxheWVyc30gY29udGFpbmVyQWRkcmVzc2VzPXt0aGlzLnN0YXRlLmNvbnRhaW5lckFkZHJlc3Nlc30gcmVzZXRGdW5jdGlvbnM9e3Jlc2V0RnVuY3Rpb25zfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBDb250cm9sbGVyPXt0aGlzLnByb3BzLm1hcENvbnRyb2xsZXJ9IGN1cnJlbnRQcm9maWxlPXt0aGlzLnN0YXRlLmN1cnJlbnRQcm9maWxlfSBmcm9tQWRkcmVzcz17dGhpcy5zdGF0ZS5mcm9tQWRkcmVzc30gc3dpdGNoVGFyZ2V0cz17dGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEuZW5hYmxlVGFyZ2V0U3dpdGNofVxuICAgICAgICAgICAgICAgICAgICAgICAgICB0b0FkZHJlc3M9e3RoaXMuc3RhdGUudG9BZGRyZXNzfSBhcmVhQWRkcmVzcz17dGhpcy5zdGF0ZS5hcmVhQWRkcmVzc30gbW9kZT17dGhpcy5zdGF0ZS5tb2RlfSBzbGlkZXJPcHRpb25zPXtzbGlkZXJPcHRpb25zfSB0aXRsZT17dGhpcy5sYW5ndWFnZUNvbnN0YW50cy5DVFJMX1JPVVRFUn0gdGFyZ2V0PXt0aGlzLnByb3BzLnRhcmdldH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1N1c3BlbnNlPlxuICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxkaXY+XCJsb2FkaW5nXCI8L2Rpdj59PlxuICAgICAgICAgIDxSb3V0ZXJSZXN1bHRDb250YWluZXIgdmlzaWJsZT17dGhpcy5zdGF0ZS5vcGVufSBvcGVuPXt0aGlzLnN0YXRlLm9wZW4gJiYgdGhpcy5zdGF0ZS5vcGVuUmVzdWx0c30gc2V0T3Blbj17dGhpcy5zZXRPcGVufSBkaXJlY3Rpb249e1wiYm90dG9tXCJ9IGNsYXNzTmFtZT17XCJjNGctcm91dGVyLXJlc3VsdC1jb250YWluZXJcIn0gbWFwQ29udHJvbGxlcj17dGhpcy5wcm9wcy5tYXBDb250cm9sbGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZT17dGhpcy5zdGF0ZS5tb2RlfSBzZXRSZXN1bHRGZWF0PXt0aGlzLnNldFJlc3VsdEZlYXR9IHJvdXRlckluc3RydWN0aW9ucz17dGhpcy5zdGF0ZS5yb3V0ZXJJbnN0cnVjdGlvbnN9IGZlYXR1cmVMaXN0PXt0aGlzLnN0YXRlLmZlYXR1cmVMaXN0fSByb3V0ZXJXYXlTb3VyY2U9e3RoaXMuc3RhdGUucm91dGVyV2F5U291cmNlfSBkZXRvdXI9e3RoaXMuc3RhdGUuZGV0b3VyQXJlYX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyUm91dGU9e3RoaXMuc3RhdGUubGF5ZXJSb3V0ZX0gbGF5ZXJWYWx1ZVJvdXRlPXt0aGlzLnN0YXRlLmxheWVyVmFsdWVSb3V0ZX0gbGF5ZXJBcmVhPXt0aGlzLnN0YXRlLmxheWVyQXJlYX0gcmVzdWx0TW9kZT17dGhpcy5zdGF0ZS5yZXN1bHRNb2RlfSByb3V0ZXI9e3RoaXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllclZhbHVlQXJlYT17dGhpcy5zdGF0ZS5sYXllclZhbHVlQXJlYX0gcm91dGVySGludFNvdXJjZT17dGhpcy5zdGF0ZS5yb3V0ZXJIaW50U291cmNlfSBmZWF0dXJlU291cmNlPXt0aGlzLnN0YXRlLmZlYXR1cmVTb3VyY2V9IHByb2ZpbGU9e3RoaXMuc3RhdGUuY3VycmVudFByb2ZpbGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVJZD17dGhpcy5zdGF0ZS5hY3RpdmVJZH0gc2V0QWN0aXZlSWQ9e3RoaXMuc2V0QWN0aXZlSWR9IGRldGFpbE9wZW49e3RoaXMuc3RhdGUucmVzdWx0RGV0YWlsT3Blbn0gdG9nZ2xlRGV0YWlsT3Blbj17dGhpcy50b2dnbGVSZXN1bHREZXRhaWxzfSBoZWFkbGluZT17XCJSb3V0ZXIgRXJnZWJuaXNzZVwifSBsYW5nPXt0aGlzLmxhbmd1YWdlQ29uc3RhbnRzfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvU3VzcGVuc2U+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgc2V0UmVzdWx0SW5zdHIoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLnNldFN0YXRlKHtyZXN1bHRNb2RlOiBcImluc3RyXCIsIG9wZW5SZXN1bHRzOiB0cnVlfSk7XG4gIH1cblxuICBzZXRSZXN1bHRGZWF0KGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7cmVzdWx0TW9kZTogXCJmZWF0XCIsIG9wZW5SZXN1bHRzOiB0cnVlfSk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLm9wZW5Db250cm9scyhmYWxzZSk7XG4gICAgalF1ZXJ5KHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5yb3V0ZXJDb250YWluZXIpLnJlbW92ZUNsYXNzKFwiYzRnLW9wZW5cIikuYWRkQ2xhc3MoXCJjNGctY2xvc2VcIik7XG4gIH1cblxuICBnZXRQcm9maWxlQnlJZChpZCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5wcm9maWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHBhcnNlSW50KHRoaXMuc3RhdGUucHJvZmlsZXNbaV0uaWQsIDEwKSA9PT0gcGFyc2VJbnQoaWQsIDEwKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5wcm9maWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB0b2dnbGVSZXN1bHREZXRhaWxzKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnJlc3VsdERldGFpbE9wZW4pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3Jlc3VsdERldGFpbE9wZW46IGZhbHNlfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3Jlc3VsdERldGFpbE9wZW46IHRydWV9KTtcbiAgICB9XG4gIH1cblxuICBvcGVuQ29udHJvbHMob3Blbikge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuc2V0T3BlbkNvbXBvbmVudCh0aGlzKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe29wZW46IHRydWUsIG9wZW5TZXR0aW5nczogdHJ1ZX0pO1xuICAgICAgalF1ZXJ5KHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5yb3V0ZXJDb250YWluZXIpLnJlbW92ZUNsYXNzKFwiYzRnLWNsb3NlXCIpLmFkZENsYXNzKFwiYzRnLW9wZW5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe29wZW46IGZhbHNlfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnVzZVBlcm1hbGluaykge1xuICAgICAgdGhpcy5wZXJtYWxpbmsuaGFuZGxlSW5pdGlhbFBhcmFtcygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2Rpdikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7b3BlbjogdHJ1ZX0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSwgc25hcHNob3QpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEudXNlUGVybWFsaW5rKSB7XG4gICAgICBsZXQgZnJhZ21lbnRzID0gdGhpcy5wZXJtYWxpbmsubGlua0ZyYWdtZW50cztcbiAgICAgIGlmICh0aGlzLnN0YXRlLmZyb21Qb2ludCAmJiBmcmFnbWVudHMuZnJvbUFkZHJlc3MgIT09IHRoaXMuc3RhdGUuZnJvbVBvaW50LmdldENvb3JkaW5hdGVzKCkpIHtcbiAgICAgICAgdGhpcy5wZXJtYWxpbmsudXBkYXRlTGlua0ZyYWdtZW50cyhcImZyb21BZGRyZXNzXCIsIHRoaXMuc3RhdGUuZnJvbVBvaW50LmdldENvb3JkaW5hdGVzKCkpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUudG9Qb2ludCAmJiBmcmFnbWVudHMudG9BZGRyZXNzICE9PSB0aGlzLnN0YXRlLnRvUG9pbnQuZ2V0Q29vcmRpbmF0ZXMoKSkge1xuICAgICAgICB0aGlzLnBlcm1hbGluay51cGRhdGVMaW5rRnJhZ21lbnRzKFwidG9BZGRyZXNzXCIsIHRoaXMuc3RhdGUudG9Qb2ludC5nZXRDb29yZGluYXRlcygpKTtcbiAgICAgIH1cbiAgICAgIGlmIChmcmFnbWVudHMubW9kZSAhPT0gdGhpcy5zdGF0ZS5tb2RlKSB7XG4gICAgICAgIHRoaXMucGVybWFsaW5rLnVwZGF0ZUxpbmtGcmFnbWVudHMoXCJtb2RlXCIsIHRoaXMuc3RhdGUubW9kZSk7XG4gICAgICB9XG4gICAgICBpZiAoZnJhZ21lbnRzLmRldG91ckFyZWEgIT09IHRoaXMuc3RhdGUuZGV0b3VyQXJlYSkge1xuICAgICAgICB0aGlzLnBlcm1hbGluay51cGRhdGVMaW5rRnJhZ21lbnRzKFwiZGV0b3VyQXJlYVwiLCB0aGlzLnN0YXRlLmRldG91ckFyZWEpO1xuICAgICAgfVxuICAgICAgaWYgKGZyYWdtZW50cy5kZXRvdXJSb3V0ZSAhPT0gdGhpcy5zdGF0ZS5kZXRvdXJSb3V0ZSkge1xuICAgICAgICB0aGlzLnBlcm1hbGluay51cGRhdGVMaW5rRnJhZ21lbnRzKFwiZGV0b3VyUm91dGVcIiwgdGhpcy5zdGF0ZS5kZXRvdXJSb3V0ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcmV2U3RhdGUub3BlbiA9PT0gdHJ1ZSAmJiB0aGlzLnN0YXRlLm9wZW4gPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLnJvdXRlckxheWVyR3JvdXAuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICB0aGlzLm1vZFdheUludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgICBqUXVlcnkodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLnJvdXRlckNvbnRhaW5lcikucmVtb3ZlQ2xhc3MoXCJjNGctb3BlblwiKS5hZGRDbGFzcyhcImM0Zy1jbG9zZVwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUub3BlbiAmJiAhcHJldlN0YXRlLm9wZW4pIHtcbiAgICAgIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5oaWRlT3RoZXJDb21wb25lbnRzKHRoaXMpO1xuICAgICAgdGhpcy5yb3V0ZXJMYXllckdyb3VwLnNldFZpc2libGUodHJ1ZSk7XG4gICAgICB0aGlzLm1vZFdheUludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcbiAgICAgIGpRdWVyeSh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIucm91dGVyQ29udGFpbmVyKS5hZGRDbGFzcyhcImM0Zy1vcGVuXCIpLnJlbW92ZUNsYXNzKFwiYzRnLWNsb3NlXCIpO1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLm9wZW5TZXR0aW5ncyAmJiAhdGhpcy5zdGF0ZS5vcGVuUmVzdWx0cykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtvcGVuU2V0dGluZ3M6IHRydWV9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUub3BlblNldHRpbmdzICYmICFwcmV2U3RhdGUub3BlblNldHRpbmdzKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtvcGVuUmVzdWx0czogZmFsc2V9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUub3BlblJlc3VsdHMgJiYgIXByZXZTdGF0ZS5vcGVuUmVzdWx0cykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7b3BlblNldHRpbmdzOiBmYWxzZX0pO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuc3RhdGUub3BlblJlc3VsdHMgJiYgIXRoaXMuc3RhdGUub3BlblNldHRpbmdzICYmIHByZXZTdGF0ZS5vcGVuU2V0dGluZ3MpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe29wZW5TZXR0aW5nczogdHJ1ZX0pO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuc3RhdGUub3BlblNldHRpbmdzICYmICF0aGlzLnN0YXRlLm9wZW5SZXN1bHRzICYmIHByZXZTdGF0ZS5vcGVuUmVzdWx0cykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7b3BlblJlc3VsdHM6IHRydWV9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RhdGUubW9kZSA9PT0gXCJyb3V0ZVwiICYmICghdGhpcy5zdGF0ZS5mcm9tQWRkcmVzcyB8fCAhdGhpcy5zdGF0ZS50b0FkZHJlc3MpICYmIHRoaXMuc3RhdGUub3BlblJlc3VsdHMgJiYgcHJldlN0YXRlLm1vZGUgPT09IFwiYXJlYVwiKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtvcGVuUmVzdWx0czogZmFsc2V9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLmNhY2hpbmcgJiYgIXRoaXMuc3RhdGUub3Blbikge1xuICAgICAgbGV0IHBhbmVsVmFsID0gdXRpbHMuZ2V0VmFsdWUoJ3BhbmVsJyk7XG4gICAgICBpZiAocGFuZWxWYWwgPT09IHRoaXMuY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgICB1dGlscy5zdG9yZVZhbHVlKCdwYW5lbCcsIFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgc2V0UHJvZmlsZShwcm9maWxlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7Y3VycmVudFByb2ZpbGU6IHByb2ZpbGV9LCB0aGlzLnVwZGF0ZVJvdXRlTGF5ZXJzQW5kUG9pbnRzKTtcbiAgfVxuXG4gIHNldExheWVyKGxheWVyKSB7XG4gICAgbGV0IHJvdXRlckxheWVycyA9IHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlckxheWVycztcbiAgICBsZXQgbGF5ZXJWYWx1ZXMgPSByb3V0ZXJMYXllcnNbbGF5ZXJdO1xuICAgIGxldCBuZXdEZWZhdWx0TGF5ZXJWYWx1ZSA9IE9iamVjdC5rZXlzKGxheWVyVmFsdWVzKVswXTtcbiAgICBpZiAodGhpcy5zdGF0ZS5tb2RlID09PSBcInJvdXRlXCIpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsYXllclJvdXRlOiBsYXllcixcbiAgICAgICAgbGF5ZXJWYWx1ZVJvdXRlOiBuZXdEZWZhdWx0TGF5ZXJWYWx1ZVxuICAgICAgfSwgdGhpcy5yZWNhbGN1bGF0ZVJvdXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxheWVyQXJlYTogbGF5ZXIsXG4gICAgICAgIGxheWVyVmFsdWVBcmVhOiBuZXdEZWZhdWx0TGF5ZXJWYWx1ZVxuICAgICAgfSwgdGhpcy5wZXJmb3JtQXJlYSk7XG4gICAgfVxuICB9XG5cbiAgc2V0TGF5ZXJWYWx1ZShsYXllclZhbHVlKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIGlmICh0aGlzLnN0YXRlLm1vZGUgPT09IFwicm91dGVcIikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxheWVyVmFsdWVSb3V0ZTogbGF5ZXJWYWx1ZVxuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICBzY29wZS5zaG93RmVhdHVyZXMoc2NvcGUuc3RhdGUuZmVhdHVyZUxpc3QuZmVhdHVyZXMsIHNjb3BlLnN0YXRlLmZlYXR1cmVMaXN0LnR5cGUsIFwicm91dGVyXCIsIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5tb2RlID09PSBcImFyZWFcIikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxheWVyVmFsdWVBcmVhOiBsYXllclZhbHVlXG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHNjb3BlLnNob3dGZWF0dXJlcyhzY29wZS5zdGF0ZS5mZWF0dXJlTGlzdC5mZWF0dXJlcywgc2NvcGUuc3RhdGUuZmVhdHVyZUxpc3QudHlwZSwgXCJhcmVhXCIsIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHNldEFjdGl2ZUlkKGFjdGl2ZUlkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XCJhY3RpdmVJZFwiOiBhY3RpdmVJZH0pO1xuICB9O1xuXG4gIHNldE9wZW4oYm9vbCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1wib3BlblJlc3VsdHNcIjogYm9vbH0pO1xuICB9O1xuXG4gIHNldEFyZWFQb2ludChsb25naXR1ZGUsIGxhdGl0dWRlKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIHRoaXMucGVyZm9ybVJldmVyc2VTZWFyY2goXCJhcmVhQWRkcmVzc1wiLCBbbG9uZ2l0dWRlLCBsYXRpdHVkZV0pO1xuICAgIGxldCBwb2ludCA9IG5ldyBQb2ludChbbG9uZ2l0dWRlLCBsYXRpdHVkZV0pO1xuICAgIHRoaXMuc2V0U3RhdGUoe2FyZWFQb2ludDogcG9pbnR9LCAoKSA9PiBzY29wZS51cGRhdGVSb3V0ZUxheWVyc0FuZFBvaW50cygpKTtcbiAgfVxuXG4gIHNldFJvdXRlRnJvbShsb25naXR1ZGUsIGxhdGl0dWRlKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIHRoaXMucGVyZm9ybVJldmVyc2VTZWFyY2goXCJmcm9tQWRkcmVzc1wiLCBbbG9uZ2l0dWRlLCBsYXRpdHVkZV0pO1xuICAgIGxldCBwb2ludCA9IG5ldyBQb2ludChbbG9uZ2l0dWRlLCBsYXRpdHVkZV0pO1xuICAgIHRoaXMuc2V0U3RhdGUoe2Zyb21Qb2ludDogcG9pbnR9LCAoKSA9PiB7c2NvcGUudXBkYXRlUm91dGVMYXllcnNBbmRQb2ludHMoKTt9KTtcbiAgfVxuXG4gIHNldFJvdXRlVG8obG9uZ2l0dWRlLCBsYXRpdHVkZSkge1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICB0aGlzLnBlcmZvcm1SZXZlcnNlU2VhcmNoKFwidG9BZGRyZXNzXCIsIFtsb25naXR1ZGUsIGxhdGl0dWRlXSk7XG4gICAgbGV0IHBvaW50ID0gbmV3IFBvaW50KFtsb25naXR1ZGUsIGxhdGl0dWRlXSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7dG9Qb2ludDogcG9pbnR9LCAoKSA9PiBzY29wZS51cGRhdGVSb3V0ZUxheWVyc0FuZFBvaW50cygpKTtcbiAgfVxuXG4gIGFkZE92ZXJQb2ludChsb25naXR1ZGUsIGxhdGl0dWRlLCBpbmRleCwgZG9udFNlYXJjaCA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIGNvbnN0IG92ZXJBZGRyZXNzZXMgPSB0aGlzLnN0YXRlLm92ZXJBZGRyZXNzZXM7XG4gICAgaWYgKCFkb250U2VhcmNoKSB7XG4gICAgICB0aGlzLnBlcmZvcm1SZXZlcnNlU2VhcmNoKFwib3ZlckFkZHJlc3NcIiwgW2xvbmdpdHVkZSwgbGF0aXR1ZGVdLCBpbmRleCk7XG4gICAgfVxuICAgIGVsc2UgeyAvL2Rpc3BsYXkgY29vcmRpbmF0ZXMgaW5zdGVhZCBvZlxuICAgICAgb3ZlckFkZHJlc3Nlcy5zcGxpY2UoaW5kZXgsIDEsIGxvbmdpdHVkZSArIFwiLCBcIiArIGxhdGl0dWRlKTtcbiAgICB9XG4gICAgbGV0IHBvaW50ID0gbmV3IFBvaW50KFtsb25naXR1ZGUsIGxhdGl0dWRlXSk7XG4gICAgY29uc3Qgb3ZlclBvaW50cyA9IHRoaXMuc3RhdGUub3ZlclBvaW50cztcbiAgICBvdmVyUG9pbnRzLnNwbGljZShpbmRleCwxLHBvaW50KTtcbiAgICAvLyBvdmVyUG9pbnRzW2luZGV4XSA9IHBvaW50O1xuICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgIHtcbiAgICAgICAgICBvdmVyUG9pbnRzOiBvdmVyUG9pbnRzLFxuICAgICAgICAgIG92ZXJBZGRyZXNzZXM6IG92ZXJBZGRyZXNzZXNcbiAgICAgICAgfSxcbiAgICAgICAgKCkgPT4gc2NvcGUudXBkYXRlUm91dGVMYXllcnNBbmRQb2ludHMoKVxuICAgICk7XG4gIH1cblxuICBzZXRNb2RlKG1vZGUpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5tb2RlICE9PSBtb2RlKSB7XG4gICAgICBsZXQgc291cmNlcyA9IHtcbiAgICAgICAgd2F5U291cmNlOiB0aGlzLnN0YXRlLnJvdXRlcldheVNvdXJjZSxcbiAgICAgICAgaGludFNvdXJjZTogdGhpcy5zdGF0ZS5yb3V0ZXJIaW50U291cmNlLFxuICAgICAgICBmZWF0dXJlU291cmNlOiB0aGlzLnN0YXRlLmZlYXR1cmVTb3VyY2UsXG4gICAgICAgIGxvY2F0aW9uU291cmNlOiB0aGlzLmxvY2F0aW9uc1NvdXJjZVxuICAgICAgfTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe21vZGU6IG1vZGV9LCAoKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBzb3VyY2VzKSB7XG4gICAgICAgICAgaWYgKHNvdXJjZXMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBzb3VyY2VzW2tleV0pIHtcbiAgICAgICAgICAgIHNvdXJjZXNba2V5XS5jbGVhcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVJvdXRlTGF5ZXJzQW5kUG9pbnRzKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzd2FwUG9pbnRzKCkge1xuICAgIGNvbnN0IG5ld0Zyb21Qb2ludCA9IHRoaXMuc3RhdGUudG9Qb2ludDtcbiAgICBjb25zdCBuZXdGcm9tQWRkcmVzcyA9IHRoaXMuc3RhdGUudG9BZGRyZXNzO1xuICAgIGNvbnN0IG5ld1RvUG9pbnQgPSB0aGlzLnN0YXRlLmZyb21Qb2ludDtcbiAgICBjb25zdCBuZXdUb0FkZHJlc3MgPSB0aGlzLnN0YXRlLmZyb21BZGRyZXNzO1xuICAgIGNvbnN0IGNvbnRhaW5lckFkZHJlc3NlcyA9IHRoaXMuc3RhdGUuY29udGFpbmVyQWRkcmVzc2VzO1xuICAgIGNvbnN0IHRtcE5hbWVzID0gY29udGFpbmVyQWRkcmVzc2VzLmFyckZyb21OYW1lcztcbiAgICBjb25zdCB0bXBQb3MgPSBjb250YWluZXJBZGRyZXNzZXMuYXJyRnJvbVBvc2l0aW9ucztcbiAgICBjb250YWluZXJBZGRyZXNzZXMuYXJyRnJvbU5hbWVzID0gY29udGFpbmVyQWRkcmVzc2VzLmFyclRvTmFtZXM7XG4gICAgY29udGFpbmVyQWRkcmVzc2VzLmFyckZyb21Qb3NpdGlvbnMgPSBjb250YWluZXJBZGRyZXNzZXMuYXJyVG9Qb3NpdGlvbnM7XG4gICAgY29udGFpbmVyQWRkcmVzc2VzLmFyclRvTmFtZXMgPSB0bXBOYW1lcztcbiAgICBjb250YWluZXJBZGRyZXNzZXMuYXJyVG9Qb3NpdGlvbnMgPSB0bXBQb3M7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBmcm9tUG9pbnQ6IG5ld0Zyb21Qb2ludCxcbiAgICAgIGZyb21BZGRyZXNzOiBuZXdGcm9tQWRkcmVzcyxcbiAgICAgIHRvUG9pbnQ6IG5ld1RvUG9pbnQsXG4gICAgICB0b0FkZHJlc3M6IG5ld1RvQWRkcmVzcyxcbiAgICAgIGNvbnRhaW5lckFkZHJlc3NlczogY29udGFpbmVyQWRkcmVzc2VzXG4gICAgfSwgdGhpcy51cGRhdGVSb3V0ZUxheWVyc0FuZFBvaW50cyk7XG4gIH1cblxuICBjcmVhdGVPdmVyU2V0dGluZ3MoKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIGxldCBvYmpTZXR0aW5ncyA9IHt9O1xuICAgIG9ialNldHRpbmdzLm92ZXJBZGRyZXNzZXMgPSB0aGlzLnN0YXRlLm92ZXJBZGRyZXNzZXM7XG4gICAgb2JqU2V0dGluZ3Mub3ZlclBvaW50cyA9IHRoaXMuc3RhdGUub3ZlclBvaW50cztcbiAgICBvYmpTZXR0aW5ncy5vdmVyUHRDdHIgPSB0aGlzLnN0YXRlLm92ZXJQdEN0cjtcbiAgICAvLyBpbmNyZW1lbnRzIHRoZSBvdmVyUHRDdHIgc28gdGhlIHBvcHVwIGNhbiByZW5kZXIgYWRkaXRpb25hbCBvdmVyRmllbGRzXG4gICAgb2JqU2V0dGluZ3Mub3ZlckZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgY29udGFpbmVyQWRkcmVzc2VzID0gc2NvcGUuc3RhdGUuY29udGFpbmVyQWRkcmVzc2VzO1xuICAgICAgY29udGFpbmVyQWRkcmVzc2VzLmFyck92ZXJOYW1lc1tzY29wZS5zdGF0ZS5vdmVyUHRDdHJdID0gW107XG4gICAgICBjb250YWluZXJBZGRyZXNzZXMuYXJyT3ZlclBvc2l0aW9uc1tzY29wZS5zdGF0ZS5vdmVyUHRDdHJdID0gW107XG4gICAgICBzY29wZS5zZXRTdGF0ZSh7XG4gICAgICAgIG92ZXJQdEN0cjogc2NvcGUuc3RhdGUub3ZlclB0Q3RyICsgMSxcbiAgICAgICAgY29udGFpbmVyQWRkcmVzc2VzOiBjb250YWluZXJBZGRyZXNzZXNcbiAgICAgIH0pO1xuICAgIH07XG4gICAgb2JqU2V0dGluZ3Muc3dhcFBvaW50cyA9IHRoaXMuc3dhcFBvaW50cztcbiAgICBvYmpTZXR0aW5ncy5vYmpGdW5jdGlvbnMgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGUub3ZlclB0Q3RyOyBpKyspIHtcbiAgICAgIG9ialNldHRpbmdzLm9iakZ1bmN0aW9uc1tpXSA9IHRoaXMuY3JlYXRlQXV0b2NvbXBsZXRlRnVuY3Rpb25zRm9yT3ZlckZpZWxkKGkpO1xuICAgICAgaWYgKCFvYmpTZXR0aW5ncy5vdmVyQWRkcmVzc2VzW2ldKSB7XG4gICAgICAgIG9ialNldHRpbmdzLm92ZXJBZGRyZXNzZXNbaV0gPSBcIlwiO1xuICAgICAgfVxuICAgICAgaWYgKCFvYmpTZXR0aW5ncy5vdmVyUG9pbnRzW2ldKSB7XG4gICAgICAgIG9ialNldHRpbmdzLm92ZXJQb2ludHNbaV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqU2V0dGluZ3M7XG4gIH1cblxuICBjcmVhdGVBdXRvY29tcGxldGVGdW5jdGlvbnNGb3JPdmVyRmllbGQoZmllbGRJZCkge1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICAvLyBzZXQgbGlzdGVuZXIgZm9yIHRoZSBhdXRvY29tcGxldGUgZnJvbSBmaWVsZFxuICAgIGNvbnN0IGRlbGV0ZU92ZXJMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBsZXQgY29udGFpbmVyQWRkcmVzc2VzID0gc2NvcGUuc3RhdGUuY29udGFpbmVyQWRkcmVzc2VzO1xuICAgICAgY29udGFpbmVyQWRkcmVzc2VzLmFyck92ZXJQb3NpdGlvbnNbZmllbGRJZF0gPSBbXTtcbiAgICAgIGNvbnRhaW5lckFkZHJlc3Nlcy5hcnJPdmVyTmFtZXNbZmllbGRJZF0gPSBbXTtcbiAgICAgIGxldCBvdmVyUG9pbnRzID0gc2NvcGUuc3RhdGUub3ZlclBvaW50cztcbiAgICAgIG92ZXJQb2ludHMuc3BsaWNlKGZpZWxkSWQsIDEpO1xuICAgICAgLy8gZGVsZXRlIG92ZXJQb2ludHNbZmllbGRJZF07XG4gICAgICBsZXQgb3ZlckFkZHJlc3NlcyA9IHNjb3BlLnN0YXRlLm92ZXJBZGRyZXNzZXM7XG4gICAgICBvdmVyQWRkcmVzc2VzLnNwbGljZShmaWVsZElkLCAxKTtcbiAgICAgIC8vIGRlbGV0ZSBvdmVyQWRkcmVzc2VzW2ZpZWxkSWRdO1xuICAgICAgc2NvcGUuc2V0U3RhdGUoe1xuICAgICAgICBvdmVyUG9pbnRzOiBvdmVyUG9pbnRzLFxuICAgICAgICBjb250YWluZXJBZGRyZXNzZXM6IGNvbnRhaW5lckFkZHJlc3NlcyxcbiAgICAgICAgb3ZlckFkZHJlc3Nlczogb3ZlckFkZHJlc3NlcyxcbiAgICAgICAgb3ZlclB0Q3RyOiBzY29wZS5zdGF0ZS5vdmVyUHRDdHIgLSAxXG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHNjb3BlLnVwZGF0ZVJvdXRlTGF5ZXJzQW5kUG9pbnRzKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc2VsZWN0T3Zlckxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICBsZXQgb3ZlckFkZHJlc3Nlcywgb3ZlclBvaW50cywgb3ZlclZhbHVlO1xuICAgICAgbGV0IHZhbHVlID0gdWkuaXRlbS52YWx1ZTtcbiAgICAgIGxldCBpbmRleCA9IHNjb3BlLnN0YXRlLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJPdmVyTmFtZXNbZmllbGRJZF0uZmluZEluZGV4KFxuICAgICAgICBkYW5nZXIgPT4gZGFuZ2VyID09PSB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGxldCBjb29yZCA9IHNjb3BlLnN0YXRlLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJPdmVyUG9zaXRpb25zW2ZpZWxkSWRdW2luZGV4XTtcbiAgICAgIG92ZXJBZGRyZXNzZXMgPSBzY29wZS5zdGF0ZS5vdmVyQWRkcmVzc2VzO1xuICAgICAgb3ZlckFkZHJlc3Nlc1tmaWVsZElkXSA9IHNjb3BlLnN0YXRlLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJPdmVyTmFtZXNbZmllbGRJZF1baW5kZXhdO1xuICAgICAgb3ZlclZhbHVlID0gbmV3IFBvaW50KFtjb29yZFsxXSwgY29vcmRbMF1dKTtcbiAgICAgIG92ZXJQb2ludHMgPSBzY29wZS5zdGF0ZS5vdmVyUG9pbnRzO1xuICAgICAgb3ZlclBvaW50c1tmaWVsZElkXSA9IG92ZXJWYWx1ZTtcbiAgICAgIHNjb3BlLnNldFN0YXRlKHtcbiAgICAgICAgb3ZlclBvaW50czogb3ZlclBvaW50cyxcbiAgICAgICAgb3ZlckFkZHJlc3Nlczogb3ZlckFkZHJlc3Nlc1xuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICBzY29wZS51cGRhdGVSb3V0ZUxheWVyc0FuZFBvaW50cygpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNoYW5nZU92ZXJMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHNlbGYuZnJvbVZhbHVlID0gbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIFwic2VsZWN0TGlzdGVuZXJcIjogc2VsZWN0T3Zlckxpc3RlbmVyLFxuICAgICAgXCJkZWxldGVGdW5jdGlvblwiOiBkZWxldGVPdmVyTGlzdGVuZXIsXG4gICAgICBcImNoYW5nZUxpc3RlbmVyXCI6IGNoYW5nZU92ZXJMaXN0ZW5lclxuICAgIH07XG4gIH1cblxuICB1cGRhdGVSb3V0ZUxheWVyc0FuZFBvaW50cygpIHtcbiAgICBjb25zdCBzY29wZSA9IHRoaXM7XG4gICAgdGhpcy5sb2NhdGlvbnNTb3VyY2UuY2xlYXIoKTtcbiAgICB0aGlzLmFyZWFTb3VyY2UuY2xlYXIoKTtcbiAgICBpZiAodGhpcy5zdGF0ZS5tb2RlID09PSBcInJvdXRlXCIpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmZyb21Qb2ludCkge1xuICAgICAgICBsZXQgdG1wRmVhdHVyZSA9IG5ldyBGZWF0dXJlKHtcbiAgICAgICAgICBnZW9tZXRyeTogdGhpcy5zdGF0ZS5mcm9tUG9pbnQuY2xvbmUoKS50cmFuc2Zvcm0oJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9mcm9tX2xvY3N0eWxlICYmIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2Zyb21fbG9jc3R5bGVdKSB7XG4gICAgICAgICAgdG1wRmVhdHVyZS5zZXRTdHlsZSh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3RoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9mcm9tX2xvY3N0eWxlXS5zdHlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgbGV0IGRvbmVGdW5jdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHRtcEZlYXR1cmUuc2V0U3R5bGUodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1t0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfZnJvbV9sb2NzdHlsZV0uc3R5bGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIubG9hZExvY2F0aW9uU3R5bGVzKFt0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfZnJvbV9sb2NzdHlsZV0sIHtcbiAgICAgICAgICAgIFwiZG9uZVwiOiBkb25lRnVuY3Rpb25cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9jYXRpb25zU291cmNlLmFkZEZlYXR1cmUodG1wRmVhdHVyZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZS50b1BvaW50KSB7XG4gICAgICAgIGxldCB0bXBGZWF0dXJlID0gbmV3IEZlYXR1cmUoe1xuICAgICAgICAgIGdlb21ldHJ5OiB0aGlzLnN0YXRlLnRvUG9pbnQuY2xvbmUoKS50cmFuc2Zvcm0oJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl90b19sb2NzdHlsZSAmJiB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3RoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl90b19sb2NzdHlsZV0pIHtcbiAgICAgICAgICB0bXBGZWF0dXJlLnNldFN0eWxlKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3RvX2xvY3N0eWxlXS5zdHlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgbGV0IGRvbmVGdW5jdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHRtcEZlYXR1cmUuc2V0U3R5bGUodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1t0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfdG9fbG9jc3R5bGVdLnN0eWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmxvYWRMb2NhdGlvblN0eWxlcyhbdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3RvX2xvY3N0eWxlXSwge1xuICAgICAgICAgICAgXCJkb25lXCI6IGRvbmVGdW5jdGlvblxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2NhdGlvbnNTb3VyY2UuYWRkRmVhdHVyZSh0bXBGZWF0dXJlKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHRoaXMuc3RhdGUuZnJvbVBvaW50ICYmIHRoaXMuc3RhdGUudG9Qb2ludCkpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXJXYXlTb3VyY2UuY2xlYXIoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXRlLm92ZXJQb2ludHMgJiYgT2JqZWN0LmtleXModGhpcy5zdGF0ZS5vdmVyUG9pbnRzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLnN0YXRlLm92ZXJQb2ludHMpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5vdmVyUG9pbnRzLmhhc093blByb3BlcnR5KGtleSkgJiYgdGhpcy5zdGF0ZS5vdmVyUG9pbnRzW2tleV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCB0bXBGZWF0dXJlID0gbmV3IEZlYXR1cmUoe1xuICAgICAgICAgICAgICBnZW9tZXRyeTogdGhpcy5zdGF0ZS5vdmVyUG9pbnRzW2tleV0uY2xvbmUoKS50cmFuc2Zvcm0oJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2ludGVyaW1fbG9jc3R5bGUgJiYgdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1t0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfaW50ZXJpbV9sb2NzdHlsZV0pIHtcbiAgICAgICAgICAgICAgdG1wRmVhdHVyZS5zZXRTdHlsZSh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIuYXJyTG9jU3R5bGVzW3RoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9pbnRlcmltX2xvY3N0eWxlXS5zdHlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uc1NvdXJjZS5hZGRGZWF0dXJlKHRtcEZlYXR1cmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZVN0YXJ0QnV0dG9uKSB7XG4gICAgICAgIHRoaXMucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5tb2RlID09PSBcImFyZWFcIikge1xuICAgICAgaWYgKHRoaXMuc3RhdGUuYXJlYVBvaW50KSB7XG4gICAgICAgIGxldCB0bXBGZWF0dXJlID0gbmV3IEZlYXR1cmUoe1xuICAgICAgICAgIGdlb21ldHJ5OiB0aGlzLnN0YXRlLmFyZWFQb2ludC5jbG9uZSgpLnRyYW5zZm9ybSgnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3BvaW50X2xvY3N0eWxlICYmIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3BvaW50X2xvY3N0eWxlXSkge1xuICAgICAgICAgIHRtcEZlYXR1cmUuc2V0U3R5bGUodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1t0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcG9pbnRfbG9jc3R5bGVdLnN0eWxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIucHJveHkubG9jYXRpb25TdHlsZUNvbnRyb2xsZXIubG9hZExvY2F0aW9uU3R5bGVzKFt0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcG9pbnRfbG9jc3R5bGVdLCB7ZG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHRtcEZlYXR1cmUuc2V0U3R5bGUodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzY29wZS5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3BvaW50X2xvY3N0eWxlXS5zdHlsZSk7XG4gICAgICAgICAgICB9fSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hcmVhU291cmNlLmFkZEZlYXR1cmUodG1wRmVhdHVyZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnBlcmZvcm1BcmVhKCk7XG4gICAgfVxuICB9XG5cbiAgcmVzZXRGcm9tUG9pbnQoKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIGxldCBjb250YWluZXJBZGRyZXNzZXMgPSBzY29wZS5zdGF0ZS5jb250YWluZXJBZGRyZXNzZXM7XG4gICAgY29udGFpbmVyQWRkcmVzc2VzLmFyckZyb21Qb3NpdGlvbnMgPSBbXTtcbiAgICBjb250YWluZXJBZGRyZXNzZXMuYXJyRnJvbU5hbWVzID0gW107XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBmcm9tUG9pbnQ6IG51bGwsXG4gICAgICBjb250YWluZXJBZGRyZXNzZXM6IGNvbnRhaW5lckFkZHJlc3NlcyxcbiAgICAgIGZyb21BZGRyZXNzOiBcIlwiXG4gICAgfSwgKCkgPT4ge1xuICAgICAgc2NvcGUudXBkYXRlUm91dGVMYXllcnNBbmRQb2ludHMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlc2V0VG9Qb2ludCgpIHtcbiAgICBjb25zdCBzY29wZSA9IHRoaXM7XG4gICAgbGV0IGNvbnRhaW5lckFkZHJlc3NlcyA9IHNjb3BlLnN0YXRlLmNvbnRhaW5lckFkZHJlc3NlcztcbiAgICBjb250YWluZXJBZGRyZXNzZXMuYXJyVG9Qb3NpdGlvbnMgPSBbXTtcbiAgICBjb250YWluZXJBZGRyZXNzZXMuYXJyVG9OYW1lcyA9IFtdO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdG9Qb2ludDogbnVsbCxcbiAgICAgIGNvbnRhaW5lckFkZHJlc3NlczogY29udGFpbmVyQWRkcmVzc2VzLFxuICAgICAgdG9BZGRyZXNzOiBcIlwiXG4gICAgfSwgKCkgPT4ge1xuICAgICAgc2NvcGUudXBkYXRlUm91dGVMYXllcnNBbmRQb2ludHMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlc2V0QXJlYVBvaW50KCkge1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICBsZXQgY29udGFpbmVyQWRkcmVzc2VzID0gc2NvcGUuc3RhdGUuY29udGFpbmVyQWRkcmVzc2VzO1xuICAgIGNvbnRhaW5lckFkZHJlc3Nlcy5hcnJBcmVhUG9zaXRpb25zID0gW107XG4gICAgY29udGFpbmVyQWRkcmVzc2VzLmFyckFyZWFOYW1lcyA9IFtdO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYXJlYVBvaW50OiBudWxsLFxuICAgICAgY29udGFpbmVyQWRkcmVzc2VzOiBjb250YWluZXJBZGRyZXNzZXMsXG4gICAgICBhcmVhQWRkcmVzczogXCJcIlxuICAgIH0sICgpID0+IHtcbiAgICAgIHNjb3BlLnVwZGF0ZVJvdXRlTGF5ZXJzQW5kUG9pbnRzKCk7XG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVBdXRvY29tcGxldGVGdW5jdGlvbnMoKSB7XG4gICAgbGV0IG9iakZ1bmN0aW9ucyA9IHt9O1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICAvLyBzZXQgbGlzdGVuZXIgZm9yIHRoZSBhdXRvY29tcGxldGUgZnJvbSBmaWVsZFxuICAgIGNvbnN0IGRlbGV0ZUZyb21MaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzY29wZS5yZXNldEZyb21Qb2ludCgpO1xuICAgIH07XG5cbiAgICBjb25zdCBzZWxlY3RGcm9tTGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAgIGxldCB2YWx1ZSA9IHVpLml0ZW0udmFsdWU7XG4gICAgICBsZXQgaW5kZXggPSBzY29wZS5zdGF0ZS5jb250YWluZXJBZGRyZXNzZXMuYXJyRnJvbU5hbWVzLmZpbmRJbmRleChcbiAgICAgICAgZGFuZ2VyID0+IGRhbmdlciA9PT0gdmFsdWVcbiAgICAgICk7XG4gICAgICBsZXQgY29vcmQgPSBzY29wZS5zdGF0ZS5jb250YWluZXJBZGRyZXNzZXMuYXJyRnJvbVBvc2l0aW9uc1tpbmRleF07XG4gICAgICBsZXQgZnJvbVZhbHVlID0gbmV3IFBvaW50KFtjb29yZFsxXSwgY29vcmRbMF1dKTtcblxuICAgICAgc2NvcGUuc2V0U3RhdGUoe1xuICAgICAgICBmcm9tUG9pbnQ6IGZyb21WYWx1ZSxcbiAgICAgICAgZnJvbUFkZHJlc3M6IHNjb3BlLnN0YXRlLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJGcm9tTmFtZXNbaW5kZXhdXG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHNjb3BlLnVwZGF0ZVJvdXRlTGF5ZXJzQW5kUG9pbnRzKCk7XG4gICAgICAgIHNjb3BlLnJlY2FsY3VsYXRlUm91dGUoKTtcbiAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIGNvbnN0IGNoYW5nZUZyb21MaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHNlbGYuZnJvbVZhbHVlID0gbnVsbDtcbiAgICB9O1xuXG4gICAgb2JqRnVuY3Rpb25zLmZyb21GdW5jdGlvbnMgPSB7XG4gICAgICBcInNlbGVjdExpc3RlbmVyXCI6IHNlbGVjdEZyb21MaXN0ZW5lcixcbiAgICAgIFwiZGVsZXRlRnVuY3Rpb25cIjogZGVsZXRlRnJvbUxpc3RlbmVyLFxuICAgICAgXCJjaGFuZ2VMaXN0ZW5lclwiOiBjaGFuZ2VGcm9tTGlzdGVuZXJcbiAgICB9O1xuXG4gICAgLy8gc2V0IGxpc3RlbmVyIGZvciB0aGUgYXV0b2NvbXBsZXRlIHRvIGZpZWxkXG4gICAgY29uc3QgZGVsZXRlVG9MaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzY29wZS5yZXNldFRvUG9pbnQoKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc2VsZWN0VG9MaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCB1aSl7XG4gICAgICBsZXQgdmFsdWUgPSB1aS5pdGVtLnZhbHVlO1xuICAgICAgbGV0IGluZGV4ID0gc2NvcGUuc3RhdGUuY29udGFpbmVyQWRkcmVzc2VzLmFyclRvTmFtZXMuZmluZEluZGV4KFxuICAgICAgICBkYW5nZXIgPT4gZGFuZ2VyID09PSB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGxldCBjb29yZCA9IHNjb3BlLnN0YXRlLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJUb1Bvc2l0aW9uc1tpbmRleF07XG4gICAgICBsZXQgdG9WYWx1ZSA9IG5ldyBQb2ludChbY29vcmRbMV0sIGNvb3JkWzBdXSk7XG5cbiAgICAgIHNjb3BlLnNldFN0YXRlKHtcbiAgICAgICAgdG9Qb2ludDogdG9WYWx1ZSxcbiAgICAgICAgdG9BZGRyZXNzOiBzY29wZS5zdGF0ZS5jb250YWluZXJBZGRyZXNzZXMuYXJyVG9OYW1lc1tpbmRleF1cbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgc2NvcGUudXBkYXRlUm91dGVMYXllcnNBbmRQb2ludHMoKTtcbiAgICAgICAgc2NvcGUucmVjYWxjdWxhdGVSb3V0ZSgpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNoYW5nZVRvTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzZWxmLmZyb21WYWx1ZSA9IG51bGw7XG4gICAgfTtcblxuICAgIG9iakZ1bmN0aW9ucy50b0Z1bmN0aW9ucyA9IHtcbiAgICAgIFwic2VsZWN0TGlzdGVuZXJcIjogc2VsZWN0VG9MaXN0ZW5lcixcbiAgICAgIFwiZGVsZXRlRnVuY3Rpb25cIjogZGVsZXRlVG9MaXN0ZW5lcixcbiAgICAgIFwiY2hhbmdlTGlzdGVuZXJcIjogY2hhbmdlVG9MaXN0ZW5lclxuICAgIH07XG5cbiAgICAvLyBzZXQgbGlzdGVuZXIgZm9yIHRoZSBhdXRvY29tcGxldGUgdG8gZmllbGRcbiAgICBjb25zdCBkZWxldGVBcmVhTGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgbGV0IGNvbnRhaW5lckFkZHJlc3NlcyA9IHNjb3BlLnN0YXRlLmNvbnRhaW5lckFkZHJlc3NlcztcbiAgICAgIGNvbnRhaW5lckFkZHJlc3Nlcy5hcnJBcmVhUG9zaXRpb25zID0gW107XG4gICAgICBjb250YWluZXJBZGRyZXNzZXMuYXJyQXJlYU5hbWVzID0gW107XG4gICAgICBzY29wZS5zZXRTdGF0ZSh7XG4gICAgICAgIGFyZWFQb2ludDogbnVsbCxcbiAgICAgICAgY29udGFpbmVyQWRkcmVzc2VzOiBjb250YWluZXJBZGRyZXNzZXMsXG4gICAgICAgIGFyZWFBZGRyZXNzOiBcIlwiXG4gICAgICB9LCAoKSA9PiB7XG4gICAgICB9KTtcblxuICAgIH07XG5cbiAgICBjb25zdCBzZWxlY3RBcmVhTGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgdWkpe1xuICAgICAgbGV0IHZhbHVlID0gdWkuaXRlbS52YWx1ZTtcbiAgICAgIGxldCBpbmRleCA9IHNjb3BlLnN0YXRlLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJBcmVhTmFtZXMuZmluZEluZGV4KFxuICAgICAgICBkYW5nZXIgPT4gZGFuZ2VyID09PSB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGxldCBjb29yZCA9IHNjb3BlLnN0YXRlLmNvbnRhaW5lckFkZHJlc3Nlcy5hcnJBcmVhUG9zaXRpb25zW2luZGV4XTtcbiAgICAgIGxldCBhcmVhVmFsdWUgPSBuZXcgUG9pbnQoW2Nvb3JkWzFdLCBjb29yZFswXV0pO1xuXG4gICAgICBzY29wZS5zZXRTdGF0ZSh7XG4gICAgICAgIGFyZWFQb2ludDogYXJlYVZhbHVlLFxuICAgICAgICBhcmVhQWRkcmVzczogc2NvcGUuc3RhdGUuY29udGFpbmVyQWRkcmVzc2VzLmFyckFyZWFOYW1lc1tpbmRleF1cbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgc2NvcGUudXBkYXRlUm91dGVMYXllcnNBbmRQb2ludHMoKTtcbiAgICAgICAgc2NvcGUucGVyZm9ybUFyZWEoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBjaGFuZ2VBcmVhTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzZWxmLmZyb21WYWx1ZSA9IG51bGw7XG4gICAgfTtcblxuICAgIG9iakZ1bmN0aW9ucy5hcmVhRnVuY3Rpb25zID0ge1xuICAgICAgXCJzZWxlY3RMaXN0ZW5lclwiOiBzZWxlY3RBcmVhTGlzdGVuZXIsXG4gICAgICBcImRlbGV0ZUZ1bmN0aW9uXCI6IGRlbGV0ZUFyZWFMaXN0ZW5lcixcbiAgICAgIFwiY2hhbmdlTGlzdGVuZXJcIjogY2hhbmdlQXJlYUxpc3RlbmVyXG4gICAgfTtcblxuICAgIHJldHVybiBvYmpGdW5jdGlvbnM7XG4gIH1cblxuICBhZGRQb3B1cEhvb2soKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuXG4gICAgbGV0IGNyZWF0ZVBvcHVwV3JhcHBlciA9IGZ1bmN0aW9uIChvYmpQb3B1cCkge1xuICAgICAgbGV0IGZlYXR1cmUgPSBvYmpQb3B1cC5mZWF0dXJlO1xuICAgICAgbGV0IHJvdXRlciA9IHNjb3BlO1xuXG4gICAgICBsZXQgcm91dGluZ0hhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcm91dGVyLm9wZW5Db250cm9scyh0cnVlKTtcbiAgICAgICAgcm91dGVyLnNldE1vZGUoXCJyb3V0ZVwiKTtcbiAgICAgICAgaWYgKGpRdWVyeShldmVudC5jdXJyZW50VGFyZ2V0KS5oYXNDbGFzcyhjc3NDb25zdGFudHMuUE9QVVBfUk9VVEVfRlJPTSkpIHtcbiAgICAgICAgICAvLyBmcm9tIGFkZHJlc3NcbiAgICAgICAgICBsZXQgZnJvbUNvb3JkcyA9IHRvTG9uTGF0KGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpLCBcIkVQU0c6Mzg1N1wiKTtcbiAgICAgICAgICByb3V0ZXIuc2V0Um91dGVGcm9tKGZyb21Db29yZHNbMF0sIGZyb21Db29yZHNbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRvIGFkZHJlc3NcbiAgICAgICAgICBsZXQgdG9Db29yZHMgPSB0b0xvbkxhdChmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKSwgXCJFUFNHOjM4NTdcIik7XG4gICAgICAgICAgcm91dGVyLnNldFJvdXRlVG8odG9Db29yZHNbMF0sIHRvQ29vcmRzWzFdKTtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gZW5kIG9mIFwicm91dGluZ0hhbmRsZXIoKVwiXG5cbiAgICAgIGxldCByb3V0ZUJ1dHRvbldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHJvdXRlQnV0dG9uV3JhcHBlci5jbGFzc05hbWUgPSBjc3NDb25zdGFudHMuUE9QVVBfUk9VVEVfV1JBUFBFUjtcblxuICAgICAgbGV0IHJvdXRlRnJvbUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgcm91dGVGcm9tQnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLlBPUFVQX1JPVVRFX0ZST007XG4gICAgICBqUXVlcnkocm91dGVGcm9tQnV0dG9uKS5jbGljayhyb3V0aW5nSGFuZGxlcik7XG4gICAgICByb3V0ZUJ1dHRvbldyYXBwZXIuYXBwZW5kQ2hpbGQocm91dGVGcm9tQnV0dG9uKTtcblxuICAgICAgbGV0IHJvdXRlRnJvbUJ1dHRvblNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAvLyByb3V0ZUZyb21CdXR0b25TcGFuLmlubmVySFRNTCA9IHNjb3BlLmxhbmd1YWdlQ29uc3RhbnRzLlBPUFVQX1JPVVRFX0ZST007XG4gICAgICByb3V0ZUZyb21CdXR0b24uYXBwZW5kQ2hpbGQocm91dGVGcm9tQnV0dG9uU3Bhbik7XG5cbiAgICAgIGxldCByb3V0ZVRvQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICByb3V0ZVRvQnV0dG9uLmNsYXNzTmFtZSA9IGNzc0NvbnN0YW50cy5JQ09OICsgJyAnICsgY3NzQ29uc3RhbnRzLlBPUFVQX1JPVVRFX1RPO1xuICAgICAgalF1ZXJ5KHJvdXRlVG9CdXR0b24pLmNsaWNrKHJvdXRpbmdIYW5kbGVyKTtcbiAgICAgIHJvdXRlQnV0dG9uV3JhcHBlci5hcHBlbmRDaGlsZChyb3V0ZVRvQnV0dG9uKTtcblxuICAgICAgbGV0IHJvdXRlVG9CdXR0b25TcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgLy8gcm91dGVUb0J1dHRvblNwYW4uaW5uZXJIVE1MID0gc2NvcGUubGFuZ3VhZ2VDb25zdGFudHMuUE9QVVBfUk9VVEVfVE87XG4gICAgICByb3V0ZVRvQnV0dG9uLmFwcGVuZENoaWxkKHJvdXRlVG9CdXR0b25TcGFuKTtcbiAgICAgIHJldHVybiByb3V0ZUJ1dHRvbldyYXBwZXI7XG4gICAgfTtcblxuICAgIHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfYXBwZW5kUG9wdXAgPSB3aW5kb3cuYzRnTWFwc0hvb2tzLnByb3h5X2FwcGVuZFBvcHVwIHx8IFtdO1xuICAgIHdpbmRvdy5jNGdNYXBzSG9va3MucHJveHlfYXBwZW5kUG9wdXAucHVzaChmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgIGxldCBtYXBDb250cm9sbGVyID0gcGFyYW1zLm1hcENvbnRyb2xsZXI7XG4gICAgICBsZXQgb2JqUG9wdXAgPSBwYXJhbXMucG9wdXA7XG4gICAgICBpZiAobWFwQ29udHJvbGxlci5jb21wb25lbnRzLnJvdXRlclxuICAgICAgICAmJiBvYmpQb3B1cC5wb3B1cC5yb3V0aW5nX2xpbmtcbiAgICAgICkge1xuICAgICAgICBpZiAocGFyc2VJbnQobWFwQ29udHJvbGxlci5kYXRhLnBvcHVwSGFuZGxpbmcsIDEwKSAhPT0gMykge1xuICAgICAgICAgIGxldCByb3V0ZUJ1dHRvbldyYXBwZXIgPSBjcmVhdGVQb3B1cFdyYXBwZXIob2JqUG9wdXApO1xuICAgICAgICAgIHdpbmRvdy5jNGdNYXBzUG9wdXAuJGNvbnRlbnQuYXBwZW5kKHJvdXRlQnV0dG9uV3JhcHBlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGNvbmZpZyA9IHtcbiAgICAgICAgICAgIGZlYXR1cmU6IG9ialBvcHVwLmZlYXR1cmUsXG4gICAgICAgICAgICByb3V0ZXI6IHNjb3BlXG4gICAgICAgICAgfTtcbiAgICAgICAgICBwYXJhbXMuY29tcC5zZXRBZGRCdXR0b25zKFJvdXRlclBvcHVwQnV0dG9ucywgY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGxldCBzdHlsZXMgPSBbXG4gICAgICB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfZnJvbV9sb2NzdHlsZSxcbiAgICAgIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl90b19sb2NzdHlsZSxcbiAgICAgIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9wb2ludF9sb2NzdHlsZSxcbiAgICAgIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLmFyZWFDZW50ZXJMb2NzdHlsZSxcbiAgICAgIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLmNsaWNrTG9jc3R5bGVcbiAgICBdO1xuICAgIGlmICh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5wcmlvcml0eUZlYXR1cmVzICYmIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnByaW9yaXR5TG9jc3R5bGUpIHtcbiAgICAgIHN0eWxlcy5wdXNoKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnByaW9yaXR5TG9jc3R5bGUpO1xuICAgIH1cbiAgICAvLyBjaGVjayBhbmQgbG9hZCBsb2NhdGlvbiBzdHlsZXMgdmlhIG1hcC1wcm94eVxuICAgIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMoc3R5bGVzKTtcbiAgICBsZXQgbWFwRGF0YSA9IHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhO1xuXG4gICAgLy8gY3JlYXRlIHJvdXRlciBsYXllciBvYmplY3RcbiAgICB0aGlzLm9iakxheWVycyA9IHt9O1xuICAgIGZvciAobGV0IGtleSBpbiBtYXBEYXRhLnJvdXRlckxheWVycykge1xuICAgICAgaWYgKG1hcERhdGEucm91dGVyTGF5ZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdGhpcy5vYmpMYXllcnNba2V5XSA9IG1hcERhdGEucm91dGVyTGF5ZXJzW2tleV1bT2JqZWN0LmtleXMobWFwRGF0YS5yb3V0ZXJMYXllcnNba2V5XSlbMF1dO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCByb3V0ZXIgbGF5ZXIocylcbiAgICB0aGlzLnJvdXRpbmdBbHRXYXlTb3VyY2UgPSBuZXcgVmVjdG9yU291cmNlKCk7XG4gICAgdGhpcy5yb3V0ZXJXYXlTb3VyY2UgPSBuZXcgVmVjdG9yU291cmNlKCk7XG4gICAgdGhpcy5yb3V0ZXJXYXlMYXllciA9IG5ldyBWZWN0b3Ioe1xuICAgICAgc291cmNlOiB0aGlzLnJvdXRlcldheVNvdXJjZSxcbiAgICAgIHpJbmRleDogMSxcbiAgICAgIHN0eWxlOiBbXG4gICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgc3Ryb2tlOiBuZXcgU3Ryb2tlKHtcbiAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYpJyxcbiAgICAgICAgICAgIHdpZHRoOiA4XG4gICAgICAgICAgfSlcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgc3Ryb2tlOiBuZXcgU3Ryb2tlKHtcbiAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCA1MSwgMTE5LCAwLjkpJyxcbiAgICAgICAgICAgIHdpZHRoOiA0XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIF1cbiAgICB9KTtcbiAgICB0aGlzLnJvdXRlckFsdFdheUxheWVyID0gbmV3IFZlY3Rvcih7XG4gICAgICBzb3VyY2U6IHRoaXMucm91dGluZ0FsdFdheVNvdXJjZSxcbiAgICAgIHpJbmRleDogMCxcbiAgICAgIHN0eWxlOiBbXG4gICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgc3Ryb2tlOiBuZXcgU3Ryb2tlKHtcbiAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjYpJyxcbiAgICAgICAgICAgIHdpZHRoOiA4XG4gICAgICAgICAgfSlcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgc3Ryb2tlOiBuZXcgU3Ryb2tlKHtcbiAgICAgICAgICAgIGNvbG9yOiAncmdiYSgwLCA1MSwgMTE5LCAwLjQpJyxcbiAgICAgICAgICAgIHdpZHRoOiA0XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIF1cbiAgICB9KTtcblxuICAgIGxldCBzZWxlY3RJbnRlcmFjdGlvbiA9IG5ldyBTZWxlY3Qoe1xuICAgICAgc3R5bGU6IFtcbiAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMCknLFxuICAgICAgICAgICAgd2lkdGg6IDhcbiAgICAgICAgICB9KVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwgNTEsIDExOSwgMC4wKScsXG4gICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICBdXG4gICAgfSk7XG4gICAgc2VsZWN0SW50ZXJhY3Rpb24ub24oJ3NlbGVjdCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgbGV0IGZlYXR1cmUgPSBldmVudC5zZWxlY3RlZFswXTtcbiAgICAgIGlmIChmZWF0dXJlKSB7XG4gICAgICAgIHZhciBnZW9tZXRyeSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcbiAgICAgICAgaWYgKGdlb21ldHJ5ICYmIChnZW9tZXRyeS5nZXRUeXBlKCkgPT09ICdMaW5lU3RyaW5nJykpIHtcbiAgICAgICAgICBzZWxmLnNob3dBbHRSb3V0ZShzZWxmLnJlc3BvbnNlLCBmZWF0dXJlLmdldElkKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChmZWF0dXJlKSB7XG4gICAgICAgICAgICBzZWxmLmNsaWNrRmVhdHVyZUVudHJ5Rm9yRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMubWFwU2VsZWN0SW50ZXJhY3Rpb24gPSBzZWxlY3RJbnRlcmFjdGlvbjtcbiAgICB0aGlzLm1vZFdheUludGVyYWN0aW9uID0gbmV3IE1vZGlmeSh7XG4gICAgICBzb3VyY2U6IHRoaXMucm91dGVyV2F5U291cmNlLFxuICAgICAgc3R5bGU6IFtcbiAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMCknLFxuICAgICAgICAgICAgd2lkdGg6IDhcbiAgICAgICAgICB9KVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwgNTEsIDExOSwgMC4wKScsXG4gICAgICAgICAgICB3aWR0aDogNFxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICBdXG4gICAgfSk7XG4gICAgdGhpcy5tb2RXYXlJbnRlcmFjdGlvbi5vbignbW9kaWZ5c3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlLm9wZW4gIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VsZi5tb2RpZnlTdGFydFBvaW50ID0gbmV3IFBvaW50KGV2ZW50Lm1hcEJyb3dzZXJFdmVudC5jb29yZGluYXRlKS50cmFuc2Zvcm0oXCJFUFNHOjM4NTdcIiwgXCJFUFNHOjQzMjZcIik7XG4gICAgfSk7XG4gICAgdGhpcy5tb2RXYXlJbnRlcmFjdGlvbi5vbignbW9kaWZ5ZW5kJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZS5vcGVuICE9PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBvdmVyUG9pbnQgPSBuZXcgUG9pbnQoZXZlbnQubWFwQnJvd3NlckV2ZW50LmNvb3JkaW5hdGUpLnRyYW5zZm9ybShcIkVQU0c6Mzg1N1wiLCBcIkVQU0c6NDMyNlwiKTtcbiAgICAgIGxldCBtaW5EaXN0YW5jZSA9IEluZmluaXR5O1xuICAgICAgbGV0IGluc2VydElkO1xuICAgICAgY29uc3QgYXJyS2V5cyA9IE9iamVjdC5rZXlzKHNlbGYuc3RhdGUub3ZlclBvaW50cyk7XG4gICAgICBpZiAoYXJyS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvcihsZXQgaWQgaW4gc2VsZi5zdGF0ZS5vdmVyUG9pbnRzKSB7XG4gICAgICAgICAgaWYgKHNlbGYuc3RhdGUub3ZlclBvaW50cy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgIGxldCBkaXN0ID0gc2VsZi5jYWxjRGlzdGFuY2Uoc2VsZi5tb2RpZnlTdGFydFBvaW50LmdldENvb3JkaW5hdGVzKCksIHNlbGYuc3RhdGUub3ZlclBvaW50c1tpZF0uZ2V0Q29vcmRpbmF0ZXMoKSk7XG4gICAgICAgICAgICBpZihkaXN0IDwgbWluRGlzdGFuY2Upe1xuICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3Q7XG4gICAgICAgICAgICAgIGluc2VydElkID0gaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRpc3RTdGFydCA9IHNlbGYuY2FsY0Rpc3RhbmNlKHNlbGYuc3RhdGUuZnJvbVBvaW50LmdldENvb3JkaW5hdGVzKCksIHNlbGYubW9kaWZ5U3RhcnRQb2ludC5nZXRDb29yZGluYXRlcygpKTtcbiAgICAgICAgbGV0IGRpc3RFbmQgPSBzZWxmLmNhbGNEaXN0YW5jZShzZWxmLnN0YXRlLnRvUG9pbnQuZ2V0Q29vcmRpbmF0ZXMoKSwgc2VsZi5tb2RpZnlTdGFydFBvaW50LmdldENvb3JkaW5hdGVzKCkpO1xuICAgICAgICBsZXQgZGlzdFN0YXJ0T2xkID0gc2VsZi5jYWxjRGlzdGFuY2Uoc2VsZi5zdGF0ZS5mcm9tUG9pbnQuZ2V0Q29vcmRpbmF0ZXMoKSwgc2VsZi5zdGF0ZS5vdmVyUG9pbnRzWzBdLmdldENvb3JkaW5hdGVzKCkpO1xuICAgICAgICBsZXQgb3ZlckVuZEluZGV4ID0gYXJyS2V5c1thcnJLZXlzLmxlbmd0aCAtIDFdO1xuICAgICAgICBsZXQgZGlzdEVuZE9sZCA9IHNlbGYuY2FsY0Rpc3RhbmNlKFxuICAgICAgICAgIHNlbGYuc3RhdGUudG9Qb2ludC5nZXRDb29yZGluYXRlcygpLFxuICAgICAgICAgIHNlbGYuc3RhdGUub3ZlclBvaW50c1tvdmVyRW5kSW5kZXhdLmdldENvb3JkaW5hdGVzKClcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoZGlzdFN0YXJ0IDwgZGlzdFN0YXJ0T2xkKSB7XG4gICAgICAgICAgaW5zZXJ0SWQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGRpc3RFbmQgPCBkaXN0RW5kT2xkKSB7XG4gICAgICAgICAgaW5zZXJ0SWQrKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zZXJ0SWQgPSAwO1xuICAgICAgfVxuICAgICAgc2VsZi5wZXJmb3JtUmV2ZXJzZVNlYXJjaChcIm92ZXJBZGRyZXNzXCIsIG92ZXJQb2ludC5nZXRDb29yZGluYXRlcygpLCBpbnNlcnRJZCk7XG4gICAgICBzZWxmLmFkZE92ZXJQb2ludChvdmVyUG9pbnQuZ2V0Q29vcmRpbmF0ZXMoKVswXSwgb3ZlclBvaW50LmdldENvb3JkaW5hdGVzKClbMV0sIGluc2VydElkKTtcbiAgICB9KTtcblxuICAgIHNlbGYucHJvcHMubWFwQ29udHJvbGxlci5tYXAuYWRkSW50ZXJhY3Rpb24oc2VsZWN0SW50ZXJhY3Rpb24pO1xuICAgIGlmICh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5lbmFibGVPdmVyUG9pbnRzKSB7XG4gICAgICBzZWxmLnByb3BzLm1hcENvbnRyb2xsZXIubWFwLmFkZEludGVyYWN0aW9uKHRoaXMubW9kV2F5SW50ZXJhY3Rpb24pO1xuICAgIH1cblxuICAgIHNlbGVjdEludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG5cbiAgICB0aGlzLnJvdXRlckhpbnRTb3VyY2UgPSBuZXcgVmVjdG9yU291cmNlKCk7XG4gICAgdGhpcy5yb3V0ZXJIaW50TGF5ZXIgPSBuZXcgVmVjdG9yKHtcbiAgICAgIHNvdXJjZTogdGhpcy5yb3V0ZXJIaW50U291cmNlLFxuICAgICAgc3R5bGU6IGZ1bmN0aW9uIChmZWF0dXJlLCByZXNvbHV0aW9uKSB7XG4gICAgICAgIHJldHVybiAoIXNlbGYucHJvcHMubWFwQ29udHJvbGxlci5wcm94eSkgfHwgc2VsZi5wcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tzZWxmLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfcG9pbnRfbG9jc3R5bGVdLnN0eWxlKGZlYXR1cmUsIHJlc29sdXRpb24pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5tYXBEYXRhID0gdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGE7XG5cbiAgICB0aGlzLmxvY2F0aW9uc1NvdXJjZSA9IG5ldyBWZWN0b3JTb3VyY2UoKTtcbiAgICB0aGlzLmxvY2F0aW9uc0xheWVyID0gbmV3IFZlY3Rvcih7XG4gICAgICBzb3VyY2U6IHRoaXMubG9jYXRpb25zU291cmNlLFxuICAgICAgekluZGV4OiAyXG4gICAgfSk7XG4gICAgdGhpcy5hcmVhU291cmNlID0gbmV3IFZlY3RvclNvdXJjZSgpO1xuICAgIHRoaXMuYXJlYUxheWVyID0gbmV3IFZlY3Rvcih7XG4gICAgICBzb3VyY2U6IHRoaXMuYXJlYVNvdXJjZSxcbiAgICAgIHpJbmRleDogMlxuICAgIH0pO1xuICAgIHRoaXMucm91dGVyRmVhdHVyZXNTb3VyY2UgPSBuZXcgVmVjdG9yU291cmNlKCk7XG5cbiAgICB0aGlzLnJvdXRlckZlYXR1cmVzTGF5ZXIgPSBuZXcgVmVjdG9yKHtcbiAgICAgIHNvdXJjZTogdGhpcy5yb3V0ZXJGZWF0dXJlc1NvdXJjZSxcbiAgICAgIHpJbmRleDogMjAsXG4gICAgICAvLyBkZWNsdXR0ZXI6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLnJvdXRlckxheWVyR3JvdXAgPSBuZXcgR3JvdXAoe1xuICAgICAgbGF5ZXJzOiBuZXcgQ29sbGVjdGlvbihbXG4gICAgICAgIHRoaXMucm91dGVyV2F5TGF5ZXIsXG4gICAgICAgIHRoaXMucm91dGVyQWx0V2F5TGF5ZXIsXG4gICAgICAgIHRoaXMubG9jYXRpb25zTGF5ZXIsXG4gICAgICAgIHRoaXMucm91dGVySGludExheWVyLFxuICAgICAgICB0aGlzLnJvdXRlckZlYXR1cmVzTGF5ZXIsXG4gICAgICAgIHRoaXMubG9jYXRpb25zTGF5ZXIsXG4gICAgICAgIHRoaXMuYXJlYUxheWVyXG4gICAgICBdKSxcbiAgICAgIHZpc2libGU6IHRydWVcbiAgICB9KTtcblxuICAgIHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5tYXAuYWRkTGF5ZXIodGhpcy5yb3V0ZXJMYXllckdyb3VwKTtcbiAgICAvLyB0aGlzLnZpZXdSb3V0ZXIgPSB0aGlzLmFkZFJvdXRlckludGVyZmFjZSgpO1xuICAgIGlmICh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5pbml0aWFsTW9kZSA9PT0gXCJyb3V0ZVwiIHx8ICF0aGlzLnZpZXdBcmVhKSB7XG4gICAgICAvLyB0aGlzLnZpZXdSb3V0ZXIuYWN0aXZhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBpZCA9PiBhcnJheSBvZiBpbnN0cnVjdGlvbnMsIGZvciBlYWNoIHJvdXRlIG9uZSBlbnRyeVxuICAgIHRoaXMucm91dGVJbnN0cnVjdGlvbnMgPSB7fTtcblxuICAgIC8vIHN0b3JlIHNvbWUgdmFycyBmb3IgYWpheC1yZXF1ZXN0c1xuICAgIGxldCBwcm9maWxlSWQgPSB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5wcm9maWxlO1xuXG4gICAgdGhpcy5nZW9TZWFyY2hBcGkgPSB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkuZ2Vvc2VhcmNoICsgJy8nICsgcHJvZmlsZUlkO1xuICAgIHRoaXMuZ2VvUmV2ZXJzZVNlYXJjaEFwaSA9IHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLmFwaS5nZW9zZWFyY2hfcmV2ZXJzZSArICcvJyArIHByb2ZpbGVJZDtcbiAgICB0aGlzLnJvdXRpbmdBcGkgPSB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5hcGkucm91dGluZyArICcvJyArIHByb2ZpbGVJZDtcblxuICAgIGlmICh0aGlzLnVzZVBlcm1hbGluaykge1xuICAgICAgdGhpcy5wZXJtYWxpbmtIYW5kbGVyLmhhbmRsZUluaXRpYWxQYXJhbXMoKTtcbiAgICB9XG5cbiAgICB0aGlzLm9iakZ1bmN0aW9ucyA9IHRoaXMuY3JlYXRlQXV0b2NvbXBsZXRlRnVuY3Rpb25zKCk7XG4gICAgdGhpcy5hZGRQb3B1cEhvb2soKTtcbiAgICB0aGlzLmFkZE1hcElucHV0SW50ZXJhY3Rpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRlYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzLlxuICAgKiBAcGFyYW0gcG9pbnQxXG4gICAqIEBwYXJhbSBwb2ludDJcbiAgICovXG4gIGNhbGNEaXN0YW5jZShwb2ludDEsIHBvaW50Mikge1xuICAgIGxldCBzcXVhcmUxLCBzcXVhcmUyO1xuICAgIHNxdWFyZTEgPSBNYXRoLnBvdyhwb2ludDFbMF0gLSBwb2ludDJbMF0sIDIpO1xuICAgIHNxdWFyZTIgPSBNYXRoLnBvdyhwb2ludDFbMV0gLSBwb2ludDJbMV0sIDIpO1xuICAgIHJldHVybiBNYXRoLnNxcnQoc3F1YXJlMSArIHNxdWFyZTIpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIHRoZSByb3V0ZSBpbnN0cnVjdGlvbnMgaW4gdGhlIHBvcnRzaWRlIHJvdXRlci5cbiAgICogQHBhcmFtIHJvdXRlUmVzcG9uc2VcbiAgICogQHBhcmFtIHJvdXRlTnVtYmVyXG4gICAqL1xuICBzaG93Um91dGVJbnN0cnVjdGlvbnMocm91dGVSZXNwb25zZSwgcm91dGVOdW1iZXIsIHJvdXRlcldheVNvdXJjZSwgcm91dGVySGludFNvdXJjZSkge1xuXG4gICAgdmFyIHNjb3BlLFxuICAgICAgcm91dGVySW5zdHJ1Y3Rpb24sXG4gICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIZWFkZXIsXG4gICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sLFxuICAgICAgaW5zdHIsXG4gICAgICBzdHJUeXBlLFxuICAgICAgc3RyTW9kLFxuICAgICAgcm93c3R5bGUsXG4gICAgICByb3V0ZU51bWJlciA9IHJvdXRlTnVtYmVyIHx8IDAsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIHJvdXRlX25hbWVfMCA9IFwiXCIsXG4gICAgICByb3V0ZV9uYW1lXzEgPSBcIlwiLFxuICAgICAgdG90YWxfZGlzdGFuY2UgPSBcIlwiLFxuICAgICAgdG90YWxfdGltZSA9IFwiXCI7XG5cbiAgICBzY29wZSA9IHRoaXM7XG4gICAgaWYgKCF0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5zaG93SW5zdHJ1Y3Rpb25zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcm91dGVySW5zdHJ1Y3Rpb25zSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcm91dGVySW5zdHJ1Y3Rpb25zSGVhZGVyLmNsYXNzTmFtZSA9IHJvdXRpbmdDb25zdGFudHMuUk9VVEVSX0lOU1RSVUNUSU9OU19IRUFERVI7XG5cbiAgICBpZiAocm91dGVSZXNwb25zZSkge1xuICAgICAgaWYgKCEocm91dGVSZXNwb25zZS5mZWF0dXJlcyAmJiByb3V0ZVJlc3BvbnNlLmZlYXR1cmVzLmxlbmd0aCA+IDApIHx8ICF0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5zaG93RmVhdHVyZXMpIHtcbiAgICAgICAgalF1ZXJ5KFwiLmM0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb25zLXdyYXBwZXJcIikuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT0gJzEnIHx8IHJvdXRlUmVzcG9uc2Uucm91dGVUeXBlID09ICcxJykgey8vT1NSTS1BUEk6NS54XG4gICAgICAgIGlmIChyb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0ubGVnc1swXS5zdW1tYXJ5KSB7XG4gICAgICAgICAgcm91dGVfbmFtZV8wID0gcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmxlZ3NbMF0uc3VtbWFyeS5zcGxpdChcIixcIilbMF07XG4gICAgICAgICAgcm91dGVfbmFtZV8xID0gcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmxlZ3NbMF0uc3VtbWFyeS5zcGxpdChcIixcIilbMV07XG4gICAgICAgICAgaWYgKHJvdXRlUmVzcG9uc2Uucm91dGVzW3JvdXRlTnVtYmVyXS5sZWdzWzFdKSB7XG4gICAgICAgICAgICByb3V0ZV9uYW1lXzEgPSByb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0ubGVnc1sxXS5zdW1tYXJ5LnNwbGl0KFwiLFwiKVsxXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdG90YWxfZGlzdGFuY2UgPSAocm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmRpc3RhbmNlKTtcbiAgICAgICAgdG90YWxfdGltZSA9IChyb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0uZHVyYXRpb24pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA9PSAnMCcgfHwgcm91dGVSZXNwb25zZS5yb3V0ZVR5cGUgPT0gJzAnKSB7Ly9PU1JNLUFQSTo8NVxuICAgICAgICBpZiAocm91dGVSZXNwb25zZS5yb3V0ZV9uYW1lKSB7XG4gICAgICAgICAgcm91dGVfbmFtZV8wID0gcm91dGVSZXNwb25zZS5yb3V0ZV9uYW1lWzBdO1xuICAgICAgICAgIHJvdXRlX25hbWVfMSA9IHJvdXRlUmVzcG9uc2Uucm91dGVfbmFtZVsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb3V0ZVJlc3BvbnNlLnJvdXRlX3N1bW1hcnkpIHtcbiAgICAgICAgICB0b3RhbF9kaXN0YW5jZSA9IChyb3V0ZVJlc3BvbnNlLnJvdXRlX3N1bW1hcnkudG90YWxfZGlzdGFuY2UpO1xuICAgICAgICAgIHRvdGFsX3RpbWUgPSAocm91dGVSZXNwb25zZS5yb3V0ZV9zdW1tYXJ5LnRvdGFsX3RpbWUpO1xuICAgICAgICB9XG5cblxuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA9PSAnMicgfHwgcm91dGVSZXNwb25zZS5yb3V0ZVR5cGUgPT0gJzInKSB7Ly9PUlMtQVBJXG4gICAgICAgIHRvdGFsX3RpbWUgPSAocm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLnN1bW1hcnkuZHVyYXRpb24pO1xuICAgICAgICB0b3RhbF9kaXN0YW5jZSA9IChyb3V0ZVJlc3BvbnNlLnJvdXRlc1tyb3V0ZU51bWJlcl0uc3VtbWFyeS5kaXN0YW5jZSk7XG4gICAgICAgIGxldCBpbnN0cnVjdGlvbnMgPSBbXTtcbiAgICAgICAgbGV0IHNlZ21lbnRzID0gcm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLnNlZ21lbnRzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IGN1cnJlbnRTZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjdXJyZW50U2VnbWVudC5zdGVwcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRTdGVwID0gY3VycmVudFNlZ21lbnQuc3RlcHNbal07XG4gICAgICAgICAgICBjdXJyZW50U3RlcC5sZW5ndGggPSBjdXJyZW50U3RlcC5kaXN0YW5jZSAvIDEwMDA7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbnMucHVzaChjdXJyZW50U3RlcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucm91dGVJbnN0cnVjdGlvbnNbcm91dGVOdW1iZXJdID0ge1xuICAgICAgICAgIHRpbWU6IHRvdGFsX3RpbWUsXG4gICAgICAgICAgZGlzdGFuY2U6IHRvdGFsX2Rpc3RhbmNlLFxuICAgICAgICAgIGluc3RydWN0aW9uczogaW5zdHJ1Y3Rpb25zXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHJvdXRlckluc3RydWN0aW9uczogdGhpcy5yb3V0ZUluc3RydWN0aW9uc1tyb3V0ZU51bWJlcl0sXG4gICAgICAgICAgXCJyb3V0ZXJXYXlTb3VyY2VcIjogcm91dGVyV2F5U291cmNlLFxuICAgICAgICAgIFwicm91dGVySGludFNvdXJjZVwiOiByb3V0ZXJIaW50U291cmNlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA9PSAnMycgfHwgcm91dGVSZXNwb25zZS5yb3V0ZVR5cGUgPT0gJzMnKSB7IC8vR3JhcGhob3BwZXJcbiAgICAgICAgdG90YWxfZGlzdGFuY2UgPSByb3V0ZVJlc3BvbnNlLnBhdGhzW3JvdXRlTnVtYmVyXS5kaXN0YW5jZTtcbiAgICAgICAgdG90YWxfdGltZSA9IHJvdXRlUmVzcG9uc2UucGF0aHNbcm91dGVOdW1iZXJdLnRpbWUgLyAxMDAwIDtcblxuICAgICAgICBsZXQgaW5zdHJ1Y3Rpb25zID0gW107XG4gICAgICAgIGxldCBzZWdtZW50cyA9IHJvdXRlUmVzcG9uc2UucGF0aHNbcm91dGVOdW1iZXJdLmluc3RydWN0aW9ucztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBjdXJyZW50SW5zdHJ1Y3Rpb24gPSBzZWdtZW50c1tpXTtcbiAgICAgICAgICBjdXJyZW50SW5zdHJ1Y3Rpb24ubGVuZ3RoID0gY3VycmVudEluc3RydWN0aW9uLmRpc3RhbmNlIC8gMTAwMDtcbiAgICAgICAgICBjdXJyZW50SW5zdHJ1Y3Rpb24uaW5zdHJ1Y3Rpb24gPSBjdXJyZW50SW5zdHJ1Y3Rpb24udGV4dDtcbiAgICAgICAgICBjdXJyZW50SW5zdHJ1Y3Rpb24udHlwZSA9IGN1cnJlbnRJbnN0cnVjdGlvbi5zaWduO1xuICAgICAgICAgIGluc3RydWN0aW9ucy5wdXNoKGN1cnJlbnRJbnN0cnVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb3V0ZUluc3RydWN0aW9uc1tyb3V0ZU51bWJlcl0gPSB7XG4gICAgICAgICAgdGltZTogdG90YWxfdGltZSxcbiAgICAgICAgICBkaXN0YW5jZTogdG90YWxfZGlzdGFuY2UsXG4gICAgICAgICAgaW5zdHJ1Y3Rpb25zOiBpbnN0cnVjdGlvbnNcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zOiB0aGlzLnJvdXRlSW5zdHJ1Y3Rpb25zW3JvdXRlTnVtYmVyXSxcbiAgICAgICAgICBcInJvdXRlcldheVNvdXJjZVwiOiByb3V0ZXJXYXlTb3VyY2UsXG4gICAgICAgICAgXCJyb3V0ZXJIaW50U291cmNlXCI6IHJvdXRlckhpbnRTb3VyY2VcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICc0JyB8fCByb3V0ZVJlc3BvbnNlLnJvdXRlVHlwZSA9PSAnNCcpIHsgLy9WYWxoYWxsYVxuICAgICAgICB0b3RhbF9kaXN0YW5jZSA9IHJvdXRlUmVzcG9uc2UudHJpcC5zdW1tYXJ5Lmxlbmd0aCAqMTAwMDtcbiAgICAgICAgdG90YWxfdGltZSA9IHJvdXRlUmVzcG9uc2UudHJpcC5zdW1tYXJ5LnRpbWUgO1xuICAgICAgICB0aGlzLnJvdXRlSW5zdHJ1Y3Rpb25zW3JvdXRlTnVtYmVyXSA9IHtcbiAgICAgICAgICB0aW1lOiB0b3RhbF90aW1lLFxuICAgICAgICAgIGRpc3RhbmNlOiB0b3RhbF9kaXN0YW5jZSxcbiAgICAgICAgICBpbnN0cnVjdGlvbnM6IHJvdXRlUmVzcG9uc2UudHJpcC5sZWdzW3JvdXRlTnVtYmVyXS5tYW5ldXZlcnNcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcm91dGVySW5zdHJ1Y3Rpb25zOiB0aGlzLnJvdXRlSW5zdHJ1Y3Rpb25zW3JvdXRlTnVtYmVyXSxcbiAgICAgICAgICBcInJvdXRlcldheVNvdXJjZVwiOiByb3V0ZXJXYXlTb3VyY2UsXG4gICAgICAgICAgXCJyb3V0ZXJIaW50U291cmNlXCI6IHJvdXRlckhpbnRTb3VyY2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3V0ZV9uYW1lXzAgJiYgcm91dGVfbmFtZV8xKSB7XG4gICAgICAgIHJvdXRlckluc3RydWN0aW9uc0hlYWRlci5pbm5lckhUTUwgPSAnPGxhYmVsPicgKyB0aGlzLmxhbmd1YWdlQ29uc3RhbnRzLlJPVVRFUl9WSUVXX0xBQkVMX1JPVVRFICsgJzwvbGFiZWw+IDxlbT4nICsgcm91dGVfbmFtZV8wICsgJyAmIzg1OTQ7ICcgKyByb3V0ZV9uYW1lXzEgKyAnPC9lbT48YnI+JyArICc8bGFiZWw+JyArIHRoaXMubGFuZ3VhZ2VDb25zdGFudHMuUk9VVEVSX1ZJRVdfTEFCRUxfRElTVEFOQ0UgKyAnPC9sYWJlbD4gPGVtPicgKyB0b3RhbF9kaXN0YW5jZSArICc8L2VtPjxicj4nICsgJzxsYWJlbD4nICsgdGhpcy5sYW5ndWFnZUNvbnN0YW50cy5ST1VURVJfVklFV19MQUJFTF9USU1FICsgJzwvbGFiZWw+IDxlbT4nICsgdG90YWxfdGltZSArICc8L2VtPjxicj4nO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5yb3V0ZVByb2ZpbGUgJiYgdGhpcy5yb3V0ZVByb2ZpbGUuYWN0aXZlICYmIEFycmF5LmlzQXJyYXkodGhpcy5yb3V0ZVByb2ZpbGUuYWN0aXZlKSkge1xuICAgICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIZWFkZXIuaW5uZXJIVE1MID0gJzxsYWJlbD4nICsgdGhpcy5sYW5ndWFnZUNvbnN0YW50cy5ST1VURVJfVklFV19MQUJFTF9QUk9GSUxFICsgJzwvbGFiZWw+IDxlbT4nICsgdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX3Byb2ZpbGVzW3RoaXMucm91dGVQcm9maWxlLmFjdGl2ZV0gKyAnPC9lbT48YnI+JyArICc8bGFiZWw+JyArIHRoaXMubGFuZ3VhZ2VDb25zdGFudHMuUk9VVEVSX1ZJRVdfTEFCRUxfRElTVEFOQ0UgKyAnPC9sYWJlbD4gPGVtPicgKyB0b3RhbF9kaXN0YW5jZSArICc8L2VtPjxicj4nICsgJzxsYWJlbD4nICsgdGhpcy5sYW5ndWFnZUNvbnN0YW50cy5ST1VURVJfVklFV19MQUJFTF9USU1FICsgJzwvbGFiZWw+IDxlbT4nICsgdG90YWxfdGltZSArICc8L2VtPjxicj4nO1xuICAgICAgfVxuXG4gICAgICByb3V0ZXJJbnN0cnVjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICByb3V0ZXJJbnN0cnVjdGlvbnNIdG1sID0gJzx0YWJsZSBjbGFzcz1cIicgKyByb3V0aW5nQ29uc3RhbnRzLlJPVVRFUl9JTlNUUlVDVElPTlNfVEFCTEUgKyAnXCIgY2VsbHBhZGRpbmc9XCIwXCIgY2VsbHNwYWNpbmc9XCIwXCI+JztcblxuICAgICAgaWYgKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09PSAnMScgfHwgcm91dGVSZXNwb25zZS5yb3V0ZVR5cGUgPT0gJzEnKSB7Ly9PU1JNLUFQSTo1LnhcblxuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA9PT0gJzAnIHx8IHJvdXRlUmVzcG9uc2Uucm91dGVUeXBlID09ICcwJykgey8vT1NSTS1BUEk6PDVcblxuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA9PT0gJzInIHx8IHJvdXRlUmVzcG9uc2Uucm91dGVUeXBlID09ICcyJykgey8vT3BlblJvdXRlU2VydmljZVxuXG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09PSAnMycgfHwgcm91dGVSZXNwb25zZS5yb3V0ZVR5cGUgPT0gJzMnKSB7IC8vIEdyYXBoaG9wcGVyXG5cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT09ICc0JyB8fCByb3V0ZVJlc3BvbnNlLnJvdXRlVHlwZSA9PSAnNCcpIHsgLy8gVmFsaGFsbGFcblxuICAgICAgfVxuXG5cbiAgICAgIHJvdXRlckluc3RydWN0aW9uc0h0bWwgKz0gJzwvdGFibGU+JztcblxuICAgICAgcm91dGVySW5zdHJ1Y3Rpb24uaW5uZXJIVE1MID0gcm91dGVySW5zdHJ1Y3Rpb25zSHRtbDtcblxuXG4gICAgICB0aGlzLmFkanVzdEluc3RydWN0aW9uTWFwSW50ZXJhY3Rpb24oKTtcblxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBc3luY2hyb25vdXMgaW1wbGVtZW50YXRpb24gb2YgdGhlIGZvcndhcmQgZ2Vvc2VhcmNoLlxuICAgKi9cbiAgYXN5bmMgcGVyZm9ybUdlb1NlYXJjaChhZGRyZXNzKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgIGxldCB1cmwgPSBzY29wZS5nZW9TZWFyY2hBcGkgKyAnP2Zvcm1hdD1qc29uJmxpbWl0PTEmcT0nICsgZW5jb2RlVVJJKGFkZHJlc3MpO1xuICAgIGlmICh0aGlzLm1hcERhdGEgJiYgdGhpcy5tYXBEYXRhLmdlb3NlYXJjaCAmJiB0aGlzLm1hcERhdGEuZ2Vvc2VhcmNoLnNlYXJjaEtleSAmJiB0aGlzLm1hcERhdGEuZ2Vvc2VhcmNoLnVybCkge1xuICAgICAgdXJsID0gdGhpcy5tYXBEYXRhLmdlb3NlYXJjaC51cmwgKyBcInNlYXJjaC5waHA/a2V5PVwiICsgdGhpcy5tYXBEYXRhLmdlb3NlYXJjaC5zZWFyY2hLZXkgKyAnJmZvcm1hdD1qc29uJmxpbWl0PTEmcT0nICsgZW5jb2RlVVJJKGFkZHJlc3MpO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCBmZXRjaCh1cmwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gW3BhcnNlRmxvYXQoZGF0YVswXS5sb24pLCBwYXJzZUZsb2F0KGRhdGFbMF0ubGF0KV07XG4gICAgICAgIH0pO1xuICAgICAgICAvLyByZXR1cm4gW3BhcnNlRmxvYXQocmVzcG9uc2VbMF0ubG9uKSwgcGFyc2VGbG9hdChyZXNwb25zZVswXS5sYXQpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHNob3cgZXJyb3IgaGludFxuICAgICAgICBpbXBvcnQoXCIuLy4uLy4uLy4uLy4uLy4uL0NvcmVCdW5kbGUvUmVzb3VyY2VzL3B1YmxpYy92ZW5kb3IvanMvQWxlcnRIYW5kbGVyXCIpLnRoZW4obW9kdWxlID0+IHtcbiAgICAgICAgICBsZXQgYWxlcnRIYW5kbGVyID0gbmV3IG1vZHVsZS5BbGVydEhhbmRsZXIoKTtcbiAgICAgICAgICBhbGVydEhhbmRsZXIuc2hvd0luZm9EaWFsb2coc2NvcGUucHJvcHMubGFuZ0NvbnN0YW50cy5ST1VURVJfVklFV19BTEVSVF9FUlJPUiwgc2NvcGUucHJvcHMubGFuZ0NvbnN0YW50cy5ST1VURVJfVklFV19BTEVSVF9BRERSRVNTKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBpbXBvcnQoXCIuLy4uLy4uLy4uLy4uLy4uL0NvcmVCdW5kbGUvUmVzb3VyY2VzL3B1YmxpYy92ZW5kb3IvanMvQWxlcnRIYW5kbGVyXCIpLnRoZW4obW9kdWxlID0+IHtcbiAgICAgICAgbGV0IGFsZXJ0SGFuZGxlciA9IG5ldyBtb2R1bGUuQWxlcnRIYW5kbGVyKCk7XG4gICAgICAgIGFsZXJ0SGFuZGxlci5zaG93SW5mb0RpYWxvZyhzY29wZS5wcm9wcy5sYW5nQ29uc3RhbnRzLlJPVVRFUl9WSUVXX0FMRVJUX0VSUk9SLCBzY29wZS5wcm9wcy5sYW5nQ29uc3RhbnRzLlJPVVRFUl9WSUVXX0FMRVJUX0FERFJFU1MpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoZXMgdGhlIGdlby1jb29yZGluYXRlcyBmb3IgYSBnaXZlbiBsb2NhdGlvbi5cbiAgICogQHBhcmFtICRpbnB1dCAgICAgICAgVGhlIGlucHV0IGZpZWxkIGNvbnRhaW5pbmcgdGhlIGxvY2F0aW9uLlxuICAgKiBAcGFyYW0gdmFsdWUgICAgICAgICBUaGUgcHJvcGVydHkgaW4gd2hpY2ggdGhlIHJlc3VsdGluZyBjb29yZGluYXRlIHNob3VsZCBiZSBzdG9yZWQuXG4gICAqIEBwYXJhbSBvcHRfY2FsbGJhY2sgIE9wdGlvbmFsIGNhbGxiYWNrLiBJcyBleGVjdXRlZCBhZnRlciBzdWNjZXNzZnVsIHNlYXJjaC5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHBlcmZvcm1TZWFyY2goJGlucHV0LCB2YWx1ZSwgb3B0X2NhbGxiYWNrKSB7XG5cbiAgICB2YXIgbWFwLFxuICAgICAgYm91bmRzLFxuICAgICAgdmlld2JveCxcbiAgICAgIHNjb3BlLFxuICAgICAgdXJsO1xuXG4gICAgc2NvcGUgPSB0aGlzO1xuXG4gICAgaWYgKCRpbnB1dC52YWwoKSA9PT0gXCJcIikge1xuICAgICAgZGVsZXRlIHNjb3BlW3ZhbHVlXTtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIG1hcCA9IHNjb3BlLnByb3BzLm1hcENvbnRyb2xsZXIubWFwO1xuICAgIGJvdW5kcyA9IG1hcC5nZXRWaWV3KCkuY2FsY3VsYXRlRXh0ZW50KG1hcC5nZXRTaXplKCkpO1xuICAgIGJvdW5kcyA9IHRyYW5zZm9ybUV4dGVudChib3VuZHMsIG1hcC5nZXRWaWV3KCkuZ2V0UHJvamVjdGlvbigpLCAnRVBTRzo0MzI2Jyk7XG4gICAgdmlld2JveCA9ICcmdmlld2JveD0nICsgYm91bmRzWzBdICsgJywnICsgYm91bmRzWzFdICsgJywnICsgYm91bmRzWzJdICsgJywnICsgYm91bmRzWzNdO1xuICAgIHVybCA9IHNjb3BlLmdlb1NlYXJjaEFwaSArICc/Zm9ybWF0PWpzb24mbGltaXQ9MSZxPScgKyBlbmNvZGVVUkkoJGlucHV0LnZhbCgpKSArIHZpZXdib3g7XG4gICAgaWYgKHRoaXMubWFwRGF0YSAmJiB0aGlzLm1hcERhdGEuZ2Vvc2VhcmNoICYmIHRoaXMubWFwRGF0YS5nZW9zZWFyY2guc2VhcmNoS2V5ICYmIHRoaXMubWFwRGF0YS5nZW9zZWFyY2gudXJsKSB7XG4gICAgICB1cmwgPSB0aGlzLm1hcERhdGEuZ2Vvc2VhcmNoLnVybCArIFwic2VhcmNoLnBocD9rZXk9XCIgKyB0aGlzLm1hcERhdGEuZ2Vvc2VhcmNoLnNlYXJjaEtleSArICcmZm9ybWF0PWpzb24mbGltaXQ9MSZxPScgKyBlbmNvZGVVUkkoJGlucHV0LnZhbCgpKSArIHZpZXdib3g7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubWFwRGF0YS5nZW9zZWFyY2gucGFyYW1zKSB7XG4gICAgICBmb3IgKGxldCBwYXJhbSBpbiB0aGlzLm1hcERhdGEuZ2Vvc2VhcmNoLnBhcmFtcykge1xuICAgICAgICBpZiAodGhpcy5tYXBEYXRhLmdlb3NlYXJjaC5wYXJhbXMuaGFzT3duUHJvcGVydHkocGFyYW0pKSB7XG4gICAgICAgICAgdXJsICs9IFwiJlwiICsgcGFyYW0gKyBcIj1cIiArIHRoaXMubWFwRGF0YS5nZW9zZWFyY2gucGFyYW1zW3BhcmFtXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBqUXVlcnkuYWpheCh7XG4gICAgICAndXJsJzogdXJsXG4gICAgfSkuZG9uZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgaWYgKHJlc3BvbnNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBcIm92ZXJWYWx1ZVwiKSB7XG4gICAgICAgICAgaWYgKCFzY29wZS5vdmVyVmFsdWUpIHtcbiAgICAgICAgICAgIHNjb3BlLm92ZXJWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgb3ZlclBvaW50ID0gbmV3IFBvaW50KFtwYXJzZUZsb2F0KHJlc3BvbnNlWzBdLmxvbiksIHBhcnNlRmxvYXQocmVzcG9uc2VbMF0ubGF0KV0pO1xuICAgICAgICAgIGxldCBkZWxldGVCdXR0b24gPSAgJGlucHV0Lm5leHQoKVswXTtcbiAgICAgICAgICAvLyB0cmF2ZXJzZSB0aGUgZG9tIGxldmVsIHVudGlsIHRoZSBkZWxldGUgYnV0dG9uIGlzIGZvdW5kXG4gICAgICAgICAgd2hpbGUgKCFqUXVlcnkoZGVsZXRlQnV0dG9uKS5oYXNDbGFzcygnYzRnLXJvdXRlci1pbnB1dC1jbGVhcicpKSB7XG4gICAgICAgICAgICBkZWxldGVCdXR0b24gPSBqUXVlcnkoZGVsZXRlQnV0dG9uKS5uZXh0KClbMF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVsZXRlQnV0dG9uLmlkID0gb3ZlclBvaW50WydvbF91aWQnXTtcbiAgICAgICAgICBzY29wZS5vdmVyVmFsdWUucHVzaChvdmVyUG9pbnQpO1xuICAgICAgICAgIHNjb3BlLiRidXR0b25PdmVyLnByb3AoXCJkaXNhYmxlZFwiLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgbGV0IGNvb3JkcyA9IFtwYXJzZUZsb2F0KHJlc3BvbnNlWzBdLmxvbiksIHBhcnNlRmxvYXQocmVzcG9uc2VbMF0ubGF0KV07XG4gICAgICAgICAgbGV0IHBvaW50ID0gbmV3IFBvaW50KGNvb3Jkcyk7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSBcImZyb21WYWx1ZVwiKSB7XG4gICAgICAgICAgICBzY29wZS5zZXRTdGF0ZSh7ZnJvbVBvaW50OiBwb2ludCwgZnJvbUFkZHJlc3M6ICRpbnB1dC52YWwoKX0sICgpID0+IHNjb3BlLnVwZGF0ZVJvdXRlTGF5ZXJzQW5kUG9pbnRzKCkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IFwidG9WYWx1ZVwiKSB7XG4gICAgICAgICAgICBzY29wZS5zZXRTdGF0ZSh7dG9Qb2ludDogcG9pbnQsIHRvQWRkcmVzczogJGlucHV0LnZhbCgpfSwgKCkgPT4gc2NvcGUudXBkYXRlUm91dGVMYXllcnNBbmRQb2ludHMoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVE9ETyB3aWVkZXIgZWluYmF1ZW5cbiAgICAgICAgICAvLyBzd2l0Y2godmFsdWUpIHtcbiAgICAgICAgICAvLyAgIGNhc2UgXCJmcm9tVmFsdWVcIjpcbiAgICAgICAgICAvLyAgICAgc2NvcGUudXBkYXRlTGlua0ZyYWdtZW50cyhcImFkZHJlc3NGcm9tXCIsIGNvb3Jkcyk7XG4gICAgICAgICAgLy8gICAgIGJyZWFrO1xuICAgICAgICAgIC8vICAgY2FzZSBcInRvVmFsdWVcIjpcbiAgICAgICAgICAvLyAgICAgc2NvcGUudXBkYXRlTGlua0ZyYWdtZW50cyhcImFkZHJlc3NUb1wiLCBjb29yZHMpO1xuICAgICAgICAgIC8vICAgICBicmVhaztcbiAgICAgICAgICAvLyAgIGNhc2UgXCJhcmVhVmFsdWVcIjpcbiAgICAgICAgICAvLyAgICAgc2NvcGUudXBkYXRlTGlua0ZyYWdtZW50cyhcImFkZHJlc3NBcmVhXCIsIGNvb3Jkcyk7XG4gICAgICAgICAgLy8gICAgIGJyZWFrO1xuICAgICAgICAgIC8vICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyAgICAgYnJlYWs7XG4gICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzaG93IGVycm9yIGhpbnRcbiAgICAgICAgaW1wb3J0KFwiLi8uLi8uLi8uLi8uLi8uLi9Db3JlQnVuZGxlL1Jlc291cmNlcy9wdWJsaWMvdmVuZG9yL2pzL0FsZXJ0SGFuZGxlclwiKS50aGVuKG1vZHVsZSA9PiB7XG4gICAgICAgICAgbGV0IGFsZXJ0SGFuZGxlciA9IG5ldyBtb2R1bGUuQWxlcnRIYW5kbGVyKCk7XG4gICAgICAgICAgYWxlcnRIYW5kbGVyLnNob3dJbmZvRGlhbG9nKHNjb3BlLnByb3BzLmxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfQUxFUlRfRVJST1IsIHNjb3BlLnByb3BzLmxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfQUxFUlRfQUREUkVTUyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0X2NhbGxiYWNrICYmIHR5cGVvZiBvcHRfY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBvcHRfY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KS5mYWlsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGltcG9ydChcIi4vLi4vLi4vLi4vLi4vLi4vQ29yZUJ1bmRsZS9SZXNvdXJjZXMvcHVibGljL3ZlbmRvci9qcy9BbGVydEhhbmRsZXJcIikudGhlbihtb2R1bGUgPT4ge1xuICAgICAgICBsZXQgYWxlcnRIYW5kbGVyID0gbmV3IG1vZHVsZS5BbGVydEhhbmRsZXIoKTtcbiAgICAgICAgYWxlcnRIYW5kbGVyLnNob3dJbmZvRGlhbG9nKHNjb3BlLnByb3BzLmxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfQUxFUlRfRVJST1IsIHNjb3BlLnByb3BzLmxhbmdDb25zdGFudHMuUk9VVEVSX1ZJRVdfQUxFUlRfQUREUkVTUyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBcIlwiO1xuXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBnaXZlbiBjb29yZGluYXRlIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbG9jYXRpb24uXG4gICAqIEBwYXJhbSBzdGF0ZVByb3AgICAgIFRoZSBzdGF0ZSBwcm9wZXJ0eSBvZiB0aGlzIHdoZXJlIHRoZSBhZGRyZXNzIHNob3VsZCBiZSBzdG9yZWQuXG4gICAqIEBwYXJhbSB2YWx1ZSAgICAgICAgIFRoZSBwcm9wZXJ0eSB0aGF0IGNvbnRhaW5zIHRoZSBjb29yZGluYXRlcy5cbiAgICogQHBhcmFtIG9wdF9pbmRleCAgICAgVGhlIGluZGV4IGZvciB0aGUgb3ZlckFkZHJlc3MgKG92ZXIgcG9pbnRzIG9ubHkpXG4gICAqL1xuICBwZXJmb3JtUmV2ZXJzZVNlYXJjaChzdGF0ZVByb3AsIHZhbHVlLCBvcHRfaW5kZXgpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIHVybDtcblxuICAgIHVybCA9IHRoaXMuZ2VvUmV2ZXJzZVNlYXJjaEFwaSArICc/Zm9ybWF0PWpzb24mbGF0PScgKyB2YWx1ZVsxXSArICcmbG9uPScgKyB2YWx1ZVswXTtcbiAgICBpZiAodGhpcy5tYXBEYXRhICYmIHRoaXMubWFwRGF0YS5nZW9zZWFyY2ggJiYgdGhpcy5tYXBEYXRhLmdlb3NlYXJjaC5yZXZlcnNlS2V5ICYmIHRoaXMubWFwRGF0YS5nZW9zZWFyY2gudXJsKSB7XG4gICAgICB1cmwgPSB0aGlzLm1hcERhdGEuZ2Vvc2VhcmNoLnVybCArIFwicmV2ZXJzZS5waHA/a2V5PVwiICsgdGhpcy5tYXBEYXRhLmdlb3NlYXJjaC5yZXZlcnNlS2V5ICsgJyZmb3JtYXQ9anNvbiZsYXQ9JyArIHZhbHVlWzFdICsgJyZsb249JyArIHZhbHVlWzBdO1xuICAgIH1cblxuICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICd1cmwnOiB1cmxcbiAgICB9KVxuICAgICAgLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gXCJcIjtcbiAgICAgICAgICBpZiAocmVzcG9uc2UuYWRkcmVzcykge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmFkZHJlc3Mucm9hZCB8fCByZXNwb25zZS5hZGRyZXNzLnBhdGggfHwgcmVzcG9uc2UuYWRkcmVzcy5wZWRlc3RyaWFuKSB7XG4gICAgICAgICAgICAgIHZhbHVlICs9IHJlc3BvbnNlLmFkZHJlc3Mucm9hZCB8fCByZXNwb25zZS5hZGRyZXNzLnBhdGggfHwgcmVzcG9uc2UuYWRkcmVzcy5wZWRlc3RyaWFuO1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuYWRkcmVzcy5ob3VzZV9udW1iZXIpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSBcIiBcIiArIHJlc3BvbnNlLmFkZHJlc3MuaG91c2VfbnVtYmVyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuYWRkcmVzcy5jaXR5IHx8IHJlc3BvbnNlLmFkZHJlc3MudG93bikge1xuICAgICAgICAgICAgICB2YWx1ZSArPSB2YWx1ZSA/IFwiLCBcIjogXCJcIjtcbiAgICAgICAgICAgICAgdmFsdWUgKz0gcmVzcG9uc2UuYWRkcmVzcy5jaXR5IHx8IHJlc3BvbnNlLmFkZHJlc3MudG93bjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHJlc3BvbnNlLmRpc3BsYXlfbmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVE9ETyB1cGRhdGUgcm91dGVyIHBlcm1hbGlua1xuICAgICAgICAgIHN3aXRjaCAoc3RhdGVQcm9wKSB7XG4gICAgICAgICAgICBjYXNlIFwiYXJlYUFkZHJlc3NcIjpcbiAgICAgICAgICAgICAgc2VsZi5zZXRTdGF0ZSh7YXJlYUFkZHJlc3M6IHZhbHVlfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKGpRdWVyeShcIiNhcmVhRnJvbVwiKS52YWwoKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgalF1ZXJ5KFwiI2FyZWFGcm9tXCIpLnZhbCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgLy8gc2VsZi51cGRhdGVMaW5rRnJhZ21lbnRzKFwiYWRkcmVzc0FyZWFcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJmcm9tQWRkcmVzc1wiOlxuICAgICAgICAgICAgICBzZWxmLnNldFN0YXRlKHtmcm9tQWRkcmVzczogdmFsdWV9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoalF1ZXJ5KFwiI3JvdXRpbmdGcm9tXCIpLnZhbCgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICBqUXVlcnkoXCIjcm91dGluZ0Zyb21cIikudmFsKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAvLyB1cGRhdGUgYWRkcmVzcyBpbiBsaW5rXG4gICAgICAgICAgICAgIC8vIHNlbGYudXBkYXRlTGlua0ZyYWdtZW50cyhcImFkZHJlc3NGcm9tXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidG9BZGRyZXNzXCI6XG4gICAgICAgICAgICAgIHNlbGYuc2V0U3RhdGUoe3RvQWRkcmVzczogdmFsdWV9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoalF1ZXJ5KFwiI3JvdXRpbmdUb1wiKS52YWwoKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgalF1ZXJ5KFwiI3JvdXRpbmdUb1wiKS52YWwodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIC8vIHVwZGF0ZSBhZGRyZXNzIGluIGxpbmtcbiAgICAgICAgICAgICAgLy8gc2VsZi51cGRhdGVMaW5rRnJhZ21lbnRzKFwiYWRkcmVzc1RvXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwib3ZlckFkZHJlc3NcIjpcbiAgICAgICAgICAgICAgY29uc3Qgb3ZlckFkZHJlc3NlcyA9IHNlbGYuc3RhdGUub3ZlckFkZHJlc3NlcztcbiAgICAgICAgICAgICAgb3ZlckFkZHJlc3Nlcy5zcGxpY2Uob3B0X2luZGV4LCAxLCB2YWx1ZSk7XG4gICAgICAgICAgICAgIHNlbGYuc2V0U3RhdGUoe292ZXJBZGRyZXNzZXM6IG92ZXJBZGRyZXNzZXN9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBhbiBhcmVhIHNlYXJjaCB3aXRoIHRoZSBnaXZlbiBwb2ludCBhcyBjZW50ZXIuIElmIHRoZXJlIGFyZSBhbnksIHRoZSBmZWF0dXJlcyBpbiB0aGUgcGVyaW1ldGVyIHdpbGwgYmVcbiAgICogZHJhd24gb250byB0aGUgbWFwIGFuZCBkaXNwbGF5ZWQgaW4gdGhlIGZlYXR1cmUgY29udGFpbmVyLlxuICAgKi9cbiAgcGVyZm9ybUFyZWEoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgZnJvbVBvaW50ID0gdGhpcy5zdGF0ZS5hcmVhUG9pbnQ7XG5cbiAgICBpZiAoIWZyb21Qb2ludCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZnJvbUNvb3JkID0gW2Zyb21Qb2ludC5nZXRDb29yZGluYXRlcygpWzFdLCBmcm9tUG9pbnQuZ2V0Q29vcmRpbmF0ZXMoKVswXV07XG4gICAgbGV0IHByb2ZpbGVJZCA9IHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnByb2ZpbGU7XG4gICAgbGV0IHVybCA9ICdjb240Z2lzL2FyZWFTZXJ2aWNlLycgKyBwcm9maWxlSWQgKyAnLycgKyB0aGlzLnN0YXRlLmxheWVyQXJlYSArICcvJyArIHRoaXMuc3RhdGUuZGV0b3VyQXJlYSArICcvJyArIGZyb21Db29yZDtcbiAgICB1cmwgKz0gJz9wcm9maWxlPScgKyB0aGlzLnN0YXRlLmN1cnJlbnRQcm9maWxlO1xuICAgIGlmIChzZWxmLmFyZWFBamF4KSB7XG4gICAgICBzZWxmLmFyZWFBamF4LmFib3J0KCk7XG4gICAgfVxuXG4gICAgLy8gdGhpcy5zcGlubmVyLnNob3coKTtcbiAgICBzZWxmLmFyZWFBamF4ID0galF1ZXJ5LmFqYXgoe1xuICAgICAgJ3VybCc6IHVybFxuICAgIH0pLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHNlbGYucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgICAgLy8gY29uc3Qgcm91dGVyTGF5ZXJzID0gc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJMYXllcnM7XG4gICAgICAgICAgLy8gY29uc3QgY2hvc2VuT3B0aW9uID0gc2VsZi5hY3RpdmVMYXllclZhbHVlQXJlYTtcbiAgICAgICAgICAvLyB0aGlzIHNob3VsZCBiZSBjaGFuZ2VkIHNvb24sIGFzIGl0IHRvdGFsbHkgbWVzc2VzIHVwIHRoZSBsb2dpYyBvZiB0aGUgc3RydWN0dXJlXG4gICAgICAgICAgbGV0IHNvcnRlZEZlYXR1cmVzID0gc2VsZi5zaG93RmVhdHVyZXMocmVzcG9uc2VbMF0sIHJlc3BvbnNlWzFdLCBcImFyZWFcIik7XG4gICAgICAgICAgc2VsZi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBcImZlYXR1cmVMaXN0XCI6IHtcbiAgICAgICAgICAgICAgXCJmZWF0dXJlc1wiOiBzb3J0ZWRGZWF0dXJlcyxcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IHJlc3BvbnNlWzFdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJmZWF0dXJlU291cmNlXCI6IHNlbGYucm91dGVyRmVhdHVyZXNTb3VyY2UsXG4gICAgICAgICAgICBcIm9wZW5SZXN1bHRzXCI6IHRydWVcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGEgcm91dGUgc2VhcmNoIHdpdGggdGhlIGdpdmVuIGZyb20gYW5kIHRvIHBvaW50cy4gRGlzcGxheXMgZmVhdHVyZXMgYW5kIGZlYXR1cmUgZW50cmllcyBvbiBzdWNjZXNzLiBVc2VzXG4gICAqIG92ZXJwb2ludHMsIGlmIGFueSBhcmUgZ2l2ZW4uXG4gICAqIEBwYXJhbSBmcm9tUG9pbnRcbiAgICogQHBhcmFtIHRvUG9pbnRcbiAgICogQHBhcmFtIG92ZXJQb2ludFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgcGVyZm9ybVZpYVJvdXRlKGZyb21Qb2ludCwgdG9Qb2ludCwgb3ZlclBvaW50KSB7XG5cbiAgICB2YXIgdXJsLFxuICAgICAgc2NvcGUsXG4gICAgICBmcm9tQ29vcmQsXG4gICAgICB0b0Nvb3JkLFxuICAgICAgb3ZlckNvb3JkO1xuXG4gICAgc2NvcGUgPSB0aGlzO1xuICAgIGlmICh0aGlzLnN0YXRlLmZlYXR1cmVTb3VyY2UpIHtcbiAgICAgIHRoaXMuc3RhdGUuZmVhdHVyZVNvdXJjZS5jbGVhcigpO1xuICAgIH1cbiAgICAvLyB0aGlzLmFyZWFTb3VyY2UuY2xlYXIoKTtcbiAgICB0aGlzLm1hcFNlbGVjdEludGVyYWN0aW9uLmdldEZlYXR1cmVzKCkuY2xlYXIoKTtcbiAgICBpZiAoIWZyb21Qb2ludCkge1xuICAgICAgZnJvbVBvaW50ID0gdGhpcy5mcm9tUG9pbnQ7XG4gICAgICBpZiAoIWZyb21Qb2ludCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdG9Qb2ludCkge1xuICAgICAgaWYgKCF0b1BvaW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRvUG9pbnQgPSB0aGlzLnRvUG9pbnQ7XG4gICAgfVxuICAgIGlmICghb3ZlclBvaW50KSB7XG4gICAgICBpZiAodGhpcy5vdmVyUG9pbnRzKSB7XG4gICAgICAgIG92ZXJQb2ludCA9IHRoaXMub3ZlclBvaW50cztcbiAgICAgIH1cbiAgICB9XG4gICAgZnJvbUNvb3JkID0gW2Zyb21Qb2ludC5nZXRDb29yZGluYXRlcygpWzFdLCBmcm9tUG9pbnQuZ2V0Q29vcmRpbmF0ZXMoKVswXV07XG4gICAgdG9Db29yZCA9IFt0b1BvaW50LmdldENvb3JkaW5hdGVzKClbMV0sIHRvUG9pbnQuZ2V0Q29vcmRpbmF0ZXMoKVswXV07XG4gICAgaWYgKG92ZXJQb2ludCAmJiBPYmplY3Qua2V5cyhvdmVyUG9pbnQpLmxlbmd0aCA+IDApIHtcbiAgICAgIG92ZXJDb29yZCA9IFtdO1xuICAgICAgZm9yICh2YXIgcHJvcHQgaW4gb3ZlclBvaW50KSB7XG4gICAgICAgIGlmIChvdmVyUG9pbnQuaGFzT3duUHJvcGVydHkocHJvcHQpICYmIG92ZXJQb2ludFtwcm9wdF0pIHtcbiAgICAgICAgICBvdmVyQ29vcmQucHVzaChbb3ZlclBvaW50W3Byb3B0XS5nZXRDb29yZGluYXRlcygpWzFdLCBvdmVyUG9pbnRbcHJvcHRdLmdldENvb3JkaW5hdGVzKClbMF1dKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA+PSAnMScpIHsvL09TUk0tQVBJOjUueCBvciBPUlMtIEFQSVxuICAgICAgbGV0IHByb2ZpbGVJZCA9IHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnByb2ZpbGU7XG5cbiAgICAgIHVybCA9ICdjb240Z2lzL3JvdXRlU2VydmljZS8nICsgdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEubGFuZyArICcvJ1xuICAgICAgICArIHByb2ZpbGVJZCArICcvJyArIHRoaXMuc3RhdGUubGF5ZXJSb3V0ZSArICcvJ1xuICAgICAgICArIHRoaXMuc3RhdGUuZGV0b3VyUm91dGUgKyAnLycgKyBmcm9tQ29vcmQ7XG5cbiAgICAgIGlmIChvdmVyUG9pbnQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdmVyQ29vcmQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgdXJsICs9ICc7JyArIG92ZXJDb29yZFtpXTtcbiAgICAgIH1cbiAgICAgIHVybCArPSAnOycgKyB0b0Nvb3JkO1xuICAgICAgLy8gaWYgKHRoaXMuc3RhdGUuY3VycmVudFByb2ZpbGUpIHtcbiAgICAgICAgdXJsICs9ICc/cHJvZmlsZT0nICsgdGhpcy5zdGF0ZS5jdXJyZW50UHJvZmlsZTtcbiAgICAgIC8vIH1cblxuICAgICAgaWYgKHNjb3BlLnJvdXRlQWpheCkge1xuICAgICAgICBzY29wZS5yb3V0ZUFqYXguYWJvcnQoKTtcbiAgICAgIH1cblxuICAgICAgc2NvcGUucm91dGVBamF4ID0galF1ZXJ5LmFqYXgoe1xuICAgICAgICAndXJsJzogdXJsXG4gICAgICB9KVxuICAgICAgICAuZG9uZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICBzY29wZS5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgIGltcG9ydChcIi4vLi4vLi4vLi4vLi4vLi4vQ29yZUJ1bmRsZS9SZXNvdXJjZXMvcHVibGljL3ZlbmRvci9qcy9BbGVydEhhbmRsZXJcIikudGhlbihtb2R1bGUgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBhbGVydEhhbmRsZXIgPSBuZXcgbW9kdWxlLkFsZXJ0SGFuZGxlcigpO1xuICAgICAgICAgICAgICAgIGFsZXJ0SGFuZGxlci5zaG93SW5mb0RpYWxvZyhzY29wZS5wcm9wcy5sYW5nQ29uc3RhbnRzW3Jlc3BvbnNlLmVycm9yXSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2NvcGUuc2hvd1JvdXRlTGF5ZXIocmVzcG9uc2UpO1xuICAgICAgICAgICAgICBzY29wZS5zaG93Um91dGVJbnN0cnVjdGlvbnMocmVzcG9uc2UsIDAsIHNjb3BlLnJvdXRlcldheVNvdXJjZSwgc2NvcGUucm91dGVySGludFNvdXJjZSk7XG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZS5mZWF0dXJlcyAmJiAocmVzcG9uc2UuZmVhdHVyZXMuZWxlbWVudHMgfHwgcmVzcG9uc2UuZmVhdHVyZXMubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgc29ydGVkRmVhdHVyZXMgPSBzY29wZS5zaG93RmVhdHVyZXMocmVzcG9uc2UuZmVhdHVyZXMsIHJlc3BvbnNlLnR5cGUsIFwicm91dGVyXCIpO1xuICAgICAgICAgICAgICAgIHNjb3BlLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgIFwiZmVhdHVyZUxpc3RcIjoge1xuICAgICAgICAgICAgICAgICAgICAgIFwiZmVhdHVyZXNcIjogICBzb3J0ZWRGZWF0dXJlcyxcbiAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogcmVzcG9uc2UudHlwZVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiZmVhdHVyZVNvdXJjZVwiOiBzY29wZS5yb3V0ZXJGZWF0dXJlc1NvdXJjZSxcbiAgICAgICAgICAgICAgICAgIFwib3BlblJlc3VsdHNcIjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjb3BlLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgIFwib3BlblJlc3VsdHNcIiA6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2NvcGUucm91dGVBamF4ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChzY29wZS5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEuY2xvc2VBZnRlclNlYXJjaCkge1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgcmV0dXJuICcnO1xuXG4gICAgfSBlbHNlIHsvL09TUk0tQVBJOjw1XG4gICAgICB0cnkge1xuICAgICAgICB1cmwgPSAnY29uNGdpcy9yb3V0ZVNlcnZpY2UvJyArIHByb2ZpbGVJZCArICc/b3V0cHV0PWpzb24maW5zdHJ1Y3Rpb25zPXRydWUmYWx0PWZhbHNlJmxvY19mcm9tPScgKyBmcm9tQ29vcmQgKyAnJmxvY190bz0nICsgdG9Db29yZDtcblxuICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgJ3VybCc6IHVybFxuICAgICAgICB9KVxuICAgICAgICAgIC5kb25lKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgc2NvcGUuc2hvd1JvdXRlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIGNhdGNoIChFeGNlcHRpb24pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJQbGVhc2UgdXNlIGEgbW9yZSBtb2Rlcm4gQVBJLVZlcnNpb24gZm9yIHRoZSBSb3V0ZXNlcnZpY2VcIilcbiAgICAgIH1cblxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIHJvdXRpbmcgcHJvcGVydGllcyBhbmQgdHJpZ2dlcnMgYSBuZXcgcm91dGUgc2VhcmNoLCB3aGVuIHRoZSBtYW5kYXRvcnkgcGFyYW1ldGVycyBhcmUgc2V0LlxuICAgKi9cbiAgcmVjYWxjdWxhdGVSb3V0ZSgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5mcm9tUG9pbnQgJiYgdGhpcy5zdGF0ZS50b1BvaW50KSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5vdmVyUG9pbnRzICYmIE9iamVjdC5rZXlzKHRoaXMuc3RhdGUub3ZlclBvaW50cykubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLnBlcmZvcm1WaWFSb3V0ZSh0aGlzLnN0YXRlLmZyb21Qb2ludCwgdGhpcy5zdGF0ZS50b1BvaW50LCB0aGlzLnN0YXRlLm92ZXJQb2ludHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtVmlhUm91dGUodGhpcy5zdGF0ZS5mcm9tUG9pbnQsIHRoaXMuc3RhdGUudG9Qb2ludCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0QWN0aXZlTGF5ZXIobGF5ZXJJZCkge1xuICAgIHJldHVybiB0aGlzLm9iakxheWVyc1tsYXllcklkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIGN1cnJlbnQgZmVhdHVyZXMgZnJvbSB0aGUgbWFwIGFuZCBkaXNwbGF5cyB0aGUgZ2l2ZW4gbmV3IGZlYXR1cmVzLiBUaGUgZmVhdHVyZXMgYXJlIHNvcnRlZCBieSB0aGUgY29uZmlndXJlZFxuICAgKiBwcm9wZXJ0eS4gVGhlIGZ1bmN0aW9uIHRha2VzIHRoZSBiYWNrZW5kIGNvbmZpZ3VyYXRpb24gYWNjb3JkaW5nIHRvIHByaW9yaXRpemVkIGZlYXR1cmVzIGludG8gYWNjb3VudC5cbiAgICogQHBhcmFtIGZlYXR1cmVzXG4gICAqIEBwYXJhbSB0eXBlXG4gICAqIEBwYXJhbSBtb2RlXG4gICAqIEBwYXJhbSBub0NsZWFyXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgc2hvd0ZlYXR1cmVzKGZlYXR1cmVzLCB0eXBlID0gXCJ0YWJsZVwiLCBtb2RlID0gXCJyb3V0ZXJcIiwgbm9DbGVhcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghbm9DbGVhcikge1xuICAgICAgdGhpcy5yb3V0ZXJGZWF0dXJlc1NvdXJjZS5jbGVhcigpO1xuICAgIH1cbiAgICAvLyBpbnRlcmltIGNsZWFyIG9mIGZlYXR1cmUgc2VsZWN0aW9uXG4gICAgaWYgKCFmZWF0dXJlcyB8fCBmZWF0dXJlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgbWFwRGF0YSA9IHRoaXMubWFwRGF0YTtcbiAgICBsZXQgbGF5ZXJJZCA9IHRoaXMuc3RhdGUubW9kZSA9PT0gXCJyb3V0ZVwiID8gdGhpcy5zdGF0ZS5sYXllclJvdXRlIDogdGhpcy5zdGF0ZS5sYXllckFyZWE7XG4gICAgbGV0IGFjdGl2ZUxheWVyID0gdGhpcy5zdGF0ZS5tb2RlID09PSBcInJvdXRlXCIgPyB0aGlzLnN0YXRlLmxheWVyVmFsdWVSb3V0ZSA6IHRoaXMuc3RhdGUubGF5ZXJWYWx1ZUFyZWE7XG4gICAgY29uc3QgbGF5ZXIgPSB0aGlzLmdldEFjdGl2ZUxheWVyKGxheWVySWQpLmxheWVyRGF0YTtcbiAgICBjb25zdCB1bnN0eWxlZEZlYXR1cmVzID0gW107XG4gICAgbGV0IGNvbnRlbnRGZWF0dXJlcyA9IFtdO1xuICAgIGxldCBtaXNzaW5nU3R5bGVzID0gW107XG4gICAgY29uc3QgcHJpY2VTb3J0ZWRGZWF0dXJlcyA9IGZlYXR1cmVzLmxlbmd0aCA/IGZlYXR1cmVzLnNsaWNlKCkgOiBmZWF0dXJlcy5lbGVtZW50cy5zbGljZSgpO1xuICAgIGxldCBiZXN0RmVhdHVyZXMgPSBbXTtcbiAgICB0aGlzLmJlc3RGZWF0dXJlSWRzID0gW107XG4gICAgaWYgKG1hcERhdGEucHJpb3JpdHlGZWF0dXJlcyAmJiBtYXBEYXRhLnByaW9yaXR5TG9jc3R5bGUgJiYgZmVhdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gc29ydCBieSBzZWxlY3RlZCB2YWx1ZSBmb3IgdGhlIG1hcCBsYWJlbCBhc2NlbmRpbmdcbiAgICAgIHByaWNlU29ydGVkRmVhdHVyZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChhW21hcERhdGEucm91dGVyTGF5ZXJzW2xheWVySWRdW2FjdGl2ZUxheWVyXVsnbWFwTGFiZWwnXV0pIC0gcGFyc2VGbG9hdChiW21hcERhdGEucm91dGVyTGF5ZXJzW2xheWVySWRdW2FjdGl2ZUxheWVyXVsnbWFwTGFiZWwnXV0pO1xuICAgICAgfSk7XG4gICAgICBsZXQgZmVhdHVyZUNvdW50ID0gcGFyc2VJbnQobWFwRGF0YS5wcmlvcml0eUZlYXR1cmVzLCAxMCk7XG4gICAgICBsZXQgdXBwZXJCb3VuZCA9IGZlYXR1cmVDb3VudCA+IHByaWNlU29ydGVkRmVhdHVyZXMubGVuZ3RoID8gcHJpY2VTb3J0ZWRGZWF0dXJlcy5sZW5ndGggOiBmZWF0dXJlQ291bnQ7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVwcGVyQm91bmQ7IGkrKykge1xuICAgICAgICBiZXN0RmVhdHVyZXNbaV0gPSBwcmljZVNvcnRlZEZlYXR1cmVzW2ldO1xuICAgICAgICB0aGlzLmJlc3RGZWF0dXJlSWRzLnB1c2gocHJpY2VTb3J0ZWRGZWF0dXJlc1tpXVsnaWQnXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBcInBldHJvbHNcIiAmJiBtb2RlICE9PSBcImFyZWFcIikge1xuICAgICAgZmVhdHVyZXMgPSBmZWF0dXJlcy5lbGVtZW50cztcbiAgICB9XG4gICAgaWYgKHR5cGUgIT09IFwib3ZlcnBhc3NcIikge1xuICAgICAgZmVhdHVyZUxvb3A6XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBmZWF0dXJlcyAmJiAoaSA8IGZlYXR1cmVzLmxlbmd0aCk7IGkrKykge1xuICAgICAgICAgIGlmICghZmVhdHVyZXNbaV0uaWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgbGFiZWwgPSBcIlwiO1xuICAgICAgICAgIGxldCBmZWF0dXJlID0gZmVhdHVyZXNbaV07XG4gICAgICAgICAgbGV0IHJlc3VsdENvb3JkaW5hdGU7XG4gICAgICAgICAgbGV0IGNvbnRlbnRGZWF0dXJlO1xuICAgICAgICAgIHJlc3VsdENvb3JkaW5hdGUgPSB0cmFuc2Zvcm0oW3BhcnNlRmxvYXQoZmVhdHVyZVsnZ2VveCddKSwgcGFyc2VGbG9hdChmZWF0dXJlWydnZW95J10pXSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKTtcbiAgICAgICAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQocmVzdWx0Q29vcmRpbmF0ZSk7XG4gICAgICAgICAgY29udGVudEZlYXR1cmUgPSBuZXcgRmVhdHVyZShwb2ludCk7XG4gICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0SWQoZmVhdHVyZS5pZCk7XG4gICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdsb2NfbGlua3VybCcsIGxheWVyLmxvY19saW5rdXJsKTtcbiAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ2xvY3N0eWxlJywgbGF5ZXIubG9jc3R5bGUpO1xuICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnaG92ZXJfbG9jYXRpb24nLCBsYXllci5ob3Zlcl9sb2NhdGlvbik7XG4gICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdob3Zlcl9zdHlsZScsIGxheWVyLmhvdmVyX3N0eWxlKTtcbiAgICAgICAgICBjb250ZW50RmVhdHVyZS5zZXQoJ3pvb21fb25jbGljaycsIGxheWVyLnpvb21fb25jbGljayk7XG4gICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCd0aWQnLCBmZWF0dXJlLmlkKTtcblxuICAgICAgICAgIGlmIChtYXBEYXRhLnJvdXRlckxheWVyc1tsYXllcklkXVxuICAgICAgICAgICAgICAmJiBtYXBEYXRhLnJvdXRlckxheWVyc1tsYXllcklkXVthY3RpdmVMYXllcl1cbiAgICAgICAgICAgICAgJiYgbWFwRGF0YS5yb3V0ZXJMYXllcnNbbGF5ZXJJZF1bYWN0aXZlTGF5ZXJdWydtYXBMYWJlbCddXG4gICAgICAgICAgICAgICYmIGZlYXR1cmVbbWFwRGF0YS5yb3V0ZXJMYXllcnNbbGF5ZXJJZF1bYWN0aXZlTGF5ZXJdWydtYXBMYWJlbCddXVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgbGFiZWwgPSBmZWF0dXJlW21hcERhdGEucm91dGVyTGF5ZXJzW2xheWVySWRdW2FjdGl2ZUxheWVyXVsnbWFwTGFiZWwnXV07XG4gICAgICAgICAgfSBlbHNlIGlmIChtYXBEYXRhLnJvdXRlckxheWVyc1tsYXllcklkXVxuICAgICAgICAgICAgICAmJiBtYXBEYXRhLnJvdXRlckxheWVyc1tsYXllcklkXVthY3RpdmVMYXllcl1cbiAgICAgICAgICAgICAgJiYgbWFwRGF0YS5yb3V0ZXJMYXllcnNbbGF5ZXJJZF1bYWN0aXZlTGF5ZXJdWydtYXBMYWJlbCddXG4gICAgICAgICAgICAgICYmIGZlYXR1cmUudGFnc1xuICAgICAgICAgICAgICAmJiBmZWF0dXJlLnRhZ3NbbWFwRGF0YS5yb3V0ZXJMYXllcnNbbGF5ZXJJZF1bYWN0aXZlTGF5ZXJdWydtYXBMYWJlbCddXVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgbGFiZWwgPSBmZWF0dXJlLnRhZ3NbbWFwRGF0YS5yb3V0ZXJMYXllcnNbbGF5ZXJJZF1bYWN0aXZlTGF5ZXJdWydtYXBMYWJlbCddXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGxvY3N0eWxlID0gZmVhdHVyZVsnbG9jc3R5bGUnXSB8fCBsYXllci5sb2NzdHlsZTtcbiAgICAgICAgICBpZiAobWFwRGF0YS5wcmlvcml0eUZlYXR1cmVzICYmIG1hcERhdGEucHJpb3JpdHlMb2NzdHlsZSkge1xuICAgICAgICAgICAgaWYgKGJlc3RGZWF0dXJlcy5pbmNsdWRlcyhmZWF0dXJlKSkge1xuICAgICAgICAgICAgICBsb2NzdHlsZSA9IG1hcERhdGEucHJpb3JpdHlMb2NzdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdsb2NhdGlvblN0eWxlJywgbG9jc3R5bGUpO1xuICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnekluZGV4JywgaSk7XG4gICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KCdsYWJlbCcsIGxhYmVsKTtcbiAgICAgICAgICBpZiAobG9jc3R5bGUgJiYgc2VsZi5wcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsb2NzdHlsZV0gJiYgc2VsZi5wcm9wcy5tYXBDb250cm9sbGVyLnByb3h5LmxvY2F0aW9uU3R5bGVDb250cm9sbGVyLmFyckxvY1N0eWxlc1tsb2NzdHlsZV0uc3R5bGUpIHtcbiAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldFN0eWxlKHNlbGYucHJvcHMubWFwQ29udHJvbGxlci5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbbG9jc3R5bGVdLnN0eWxlKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5oaWRlRmVhdHVyZXNXaXRob3V0TGFiZWwpIHtcbiAgICAgICAgICAgICAgaWYgKGxhYmVsICYmIGxhYmVsICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgY29udGVudEZlYXR1cmVzLnB1c2goY29udGVudEZlYXR1cmUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250ZW50RmVhdHVyZXMucHVzaChjb250ZW50RmVhdHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRlbnRGZWF0dXJlLnNldCgnc3R5bGVJZCcsIGxvY3N0eWxlKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5oaWRlRmVhdHVyZXNXaXRob3V0TGFiZWwpIHtcbiAgICAgICAgICAgICAgaWYgKGxhYmVsICYmIGxhYmVsICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgdW5zdHlsZWRGZWF0dXJlcy5wdXNoKGNvbnRlbnRGZWF0dXJlKTtcbiAgICAgICAgICAgICAgICBtaXNzaW5nU3R5bGVzW2xvY3N0eWxlXSA9IGxvY3N0eWxlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1bnN0eWxlZEZlYXR1cmVzLnB1c2goY29udGVudEZlYXR1cmUpO1xuICAgICAgICAgICAgICBtaXNzaW5nU3R5bGVzW2xvY3N0eWxlXSA9IGxvY3N0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGxldCB0YWcgaW4gZmVhdHVyZS50YWdzKSB7XG4gICAgICAgICAgICBpZiAoZmVhdHVyZS50YWdzLmhhc093blByb3BlcnR5KHRhZykpIHtcbiAgICAgICAgICAgICAgY29udGVudEZlYXR1cmUuc2V0KHRhZywgZmVhdHVyZS50YWdzW3RhZ10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZ2VvanNvbjtcblxuICAgICAgaWYgKGZlYXR1cmVzLmVsZW1lbnRzKSB7XG4gICAgICAgIGdlb2pzb24gPSBvc210b2dlb2pzb24oZmVhdHVyZXMpO1xuICAgICAgICB0aGlzLmdlb0pzb25GZWF0dXJlcyA9IGdlb2pzb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZW9qc29uID0gdGhpcy5nZW9Kc29uRmVhdHVyZXM7XG4gICAgICB9XG4gICAgICBjb25zdCBtYXBQcm9qID0gc2VsZi5wcm9wcy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZ2V0UHJvamVjdGlvbigpO1xuICAgICAgY29udGVudEZlYXR1cmVzID0gbmV3IEdlb0pTT04oKS5yZWFkRmVhdHVyZXMoZ2VvanNvbiwge1xuICAgICAgICBkYXRhUHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBtYXBQcm9qXG4gICAgICB9KTtcbiAgICAgIGxldCBsYWJlbEtleSA9IG1hcERhdGEucm91dGVyTGF5ZXJzW2xheWVySWRdW2FjdGl2ZUxheWVyXVsnbWFwTGFiZWwnXTtcbiAgICAgIGZvciAobGV0IGlkIGluIGNvbnRlbnRGZWF0dXJlcykge1xuICAgICAgICBpZiAoY29udGVudEZlYXR1cmVzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgIGNvbnRlbnRGZWF0dXJlc1tpZF0uc2V0KCdsb2NfbGlua3VybCcsIGxheWVyLmxvY19saW5rdXJsKTtcbiAgICAgICAgICBjb250ZW50RmVhdHVyZXNbaWRdLnNldCgnbG9jc3R5bGUnLCBsYXllci5sb2NzdHlsZSk7XG4gICAgICAgICAgY29udGVudEZlYXR1cmVzW2lkXS5zZXQoJ2hvdmVyX2xvY2F0aW9uJywgbGF5ZXIuaG92ZXJfbG9jYXRpb24pO1xuICAgICAgICAgIGNvbnRlbnRGZWF0dXJlc1tpZF0uc2V0KCdob3Zlcl9zdHlsZScsIGxheWVyLmhvdmVyX3N0eWxlKTtcbiAgICAgICAgICBjb250ZW50RmVhdHVyZXNbaWRdLnNldCgnem9vbV9vbmNsaWNrJywgbGF5ZXIuem9vbV9vbmNsaWNrKTtcbiAgICAgICAgICBjb250ZW50RmVhdHVyZXNbaWRdLnNldCgndGlkJywgcGFyc2VJbnQoY29udGVudEZlYXR1cmVzW2lkXS5nZXQoJ2lkJykuc3BsaXQoJy8nKVsxXSkpO1xuICAgICAgICAgIGNvbnRlbnRGZWF0dXJlc1tpZF0uc2V0KCdsYWJlbCcsIGNvbnRlbnRGZWF0dXJlc1tpZF0uZ2V0KGxhYmVsS2V5KSk7XG4gICAgICAgICAgaWYgKHNlbGYucHJvcHMubWFwQ29udHJvbGxlci5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbbGF5ZXIubG9jc3R5bGVdKSB7XG4gICAgICAgICAgICBjb250ZW50RmVhdHVyZXNbaWRdLnNldFN0eWxlKHNlbGYucHJvcHMubWFwQ29udHJvbGxlci5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbbGF5ZXIubG9jc3R5bGVdLnN0eWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWlzc2luZ1N0eWxlcyAmJiBtaXNzaW5nU3R5bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNlbGYucHJvcHMubWFwQ29udHJvbGxlci5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5sb2FkTG9jYXRpb25TdHlsZXMobWlzc2luZ1N0eWxlcywge1xuICAgICAgICBkb25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bnN0eWxlZEZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc3R5bGVJZCA9IHVuc3R5bGVkRmVhdHVyZXNbaV0uZ2V0KCdzdHlsZUlkJyk7XG4gICAgICAgICAgICB1bnN0eWxlZEZlYXR1cmVzW2ldLnNldFN0eWxlKHNlbGYucHJvcHMubWFwQ29udHJvbGxlci5wcm94eS5sb2NhdGlvblN0eWxlQ29udHJvbGxlci5hcnJMb2NTdHlsZXNbc3R5bGVJZF0uc3R5bGUpO1xuICAgICAgICAgICAgc2VsZi5yb3V0ZXJGZWF0dXJlc1NvdXJjZS5hZGRGZWF0dXJlKHVuc3R5bGVkRmVhdHVyZXNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtaXNzaW5nU3R5bGVzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGNvbnRlbnRGZWF0dXJlcyAmJiBjb250ZW50RmVhdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5yb3V0ZXJGZWF0dXJlc1NvdXJjZS5hZGRGZWF0dXJlcyhjb250ZW50RmVhdHVyZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcHJpY2VTb3J0ZWRGZWF0dXJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyB0aGUgbWFpbiByb3V0ZS5cbiAgICogQHBhcmFtIHJvdXRlUmVzcG9uc2VcbiAgICovXG4gIHNob3dSb3V0ZShyb3V0ZVJlc3BvbnNlKSB7XG5cbiAgICB0aGlzLnNob3dSb3V0ZUxheWVyKHJvdXRlUmVzcG9uc2UsIDApO1xuICAgIHRoaXMuc2hvd1JvdXRlSW5zdHJ1Y3Rpb25zKHJvdXRlUmVzcG9uc2UsIDApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3cgYW4gYWx0ZXJuYXRlIHJvdXRlLlxuICAgKiBAcGFyYW0gcm91dGVSZXNwb25zZVxuICAgKiBAcGFyYW0gcm91dGVOdW1iZXJcbiAgICovXG4gIHNob3dBbHRSb3V0ZShyb3V0ZVJlc3BvbnNlLCByb3V0ZU51bWJlcikge1xuICAgIHRoaXMuc2hvd1JvdXRlTGF5ZXIocm91dGVSZXNwb25zZSwgcm91dGVOdW1iZXIpO1xuICAgIHRoaXMuc2hvd1JvdXRlSW5zdHJ1Y3Rpb25zKHJvdXRlUmVzcG9uc2UsIHJvdXRlTnVtYmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBhIHJvdXRlIG9uIHRoZSBtYXAuXG4gICAqIEBwYXJhbSByb3V0ZVJlc3BvbnNlXG4gICAqIEBwYXJhbSByb3V0ZU51bWJlclxuICAgKi9cbiAgc2hvd1JvdXRlTGF5ZXIocm91dGVSZXNwb25zZSwgcm91dGVOdW1iZXIpIHtcblxuICAgIHZhciBtYXBWaWV3LFxuICAgICAgd2F5UG9seWxpbmUsXG4gICAgICByb3V0ZUZlYXR1cmVzLFxuICAgICAgYWx0Um91dGVGZWF0dXJlcyxcbiAgICAgIHJpZ2h0UGFkZGluZyxcbiAgICAgIGxlZnRQYWRkaW5nLFxuICAgICAgcm91dGVOdW1iZXIgPSByb3V0ZU51bWJlciB8fCAwO1xuXG4gICAgaWYgKHJvdXRlUmVzcG9uc2UpIHtcbiAgICAgIHRoaXMucm91dGVyV2F5U291cmNlLmNsZWFyKCk7XG4gICAgICB0aGlzLnJvdXRpbmdBbHRXYXlTb3VyY2UuY2xlYXIoKTtcbiAgICAgIG1hcFZpZXcgPSB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIubWFwLmdldFZpZXcoKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcxJyB8fCB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA9PSAnMicgfHwgcm91dGVSZXNwb25zZS5yb3V0ZVR5cGUgPT0gJzEnIHx8IHJvdXRlUmVzcG9uc2Uucm91dGVUeXBlID09ICcyJykgey8vT1NSTS1BUEk6NS54XG4gICAgICAgIHdheVBvbHlsaW5lID0gbmV3IFBvbHlsaW5lKCk7XG5cbiAgICAgICAgLy8gYWRkIHJvdXRlXG5cbiAgICAgICAgaWYgKHJvdXRlUmVzcG9uc2Uucm91dGVzICkgey8vY2hlY2sgZm9yIGFsdGVybmF0aXZlIHJvdXRlXG4gICAgICAgICAgaWYgKHJvdXRlUmVzcG9uc2Uucm91dGVzWzFdKSB7XG4gICAgICAgICAgICBpZiAocm91dGVOdW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgYWx0Um91dGVGZWF0dXJlcyA9IHdheVBvbHlsaW5lLnJlYWRGZWF0dXJlcyhyb3V0ZVJlc3BvbnNlLnJvdXRlc1swXS5nZW9tZXRyeSwge1xuICAgICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogbWFwVmlldy5nZXRQcm9qZWN0aW9uKClcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGFsdFJvdXRlRmVhdHVyZXNbMF0uc2V0SWQoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgYWx0Um91dGVGZWF0dXJlcyA9IHdheVBvbHlsaW5lLnJlYWRGZWF0dXJlcyhyb3V0ZVJlc3BvbnNlLnJvdXRlc1sxXS5nZW9tZXRyeSwge1xuICAgICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogbWFwVmlldy5nZXRQcm9qZWN0aW9uKClcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGFsdFJvdXRlRmVhdHVyZXNbMF0uc2V0SWQoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJvdXRlRmVhdHVyZXMgPSB3YXlQb2x5bGluZS5yZWFkRmVhdHVyZXMocm91dGVSZXNwb25zZS5yb3V0ZXNbcm91dGVOdW1iZXJdLmdlb21ldHJ5LCB7XG4gICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogbWFwVmlldy5nZXRQcm9qZWN0aW9uKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByb3V0ZUZlYXR1cmVzWzBdLnNldElkKHJvdXRlTnVtYmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcwJyB8fCByb3V0ZVJlc3BvbnNlLnJvdXRlVHlwZSA9PSAnMCcpey8vT1NSTS1BUEk6PDVcbiAgICAgICAgd2F5UG9seWxpbmUgPSBuZXcgUG9seWxpbmUoe1xuICAgICAgICAgICdmYWN0b3InOiB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfdmlhcm91dGVfcHJlY2lzaW9uIHx8IDFlNlxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhZGQgcm91dGVcbiAgICAgICAgcm91dGVGZWF0dXJlcyA9IHdheVBvbHlsaW5lLnJlYWRGZWF0dXJlcyhyb3V0ZVJlc3BvbnNlLnJvdXRlX2dlb21ldHJ5LCB7XG4gICAgICAgICAgZGF0YVByb2plY3Rpb246ICdFUFNHOjQzMjYnLFxuICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBtYXBWaWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMucHJvcHMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICczJyl7XG4gICAgICAgIHdheVBvbHlsaW5lID0gbmV3IFBvbHlsaW5lKCk7XG4gICAgICAgIGlmIChyb3V0ZVJlc3BvbnNlLnBhdGhzICYmIHJvdXRlUmVzcG9uc2UucGF0aHNbMV0pIHsvL2NoZWNrIGZvciBhbHRlcm5hdGl2ZSByb3V0ZVxuICAgICAgICAgIGlmIChyb3V0ZU51bWJlciA9PSAxKSB7XG4gICAgICAgICAgICBhbHRSb3V0ZUZlYXR1cmVzID0gd2F5UG9seWxpbmUucmVhZEZlYXR1cmVzKHJvdXRlUmVzcG9uc2UucGF0aHNbMF0ucG9pbnRzLCB7XG4gICAgICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246IG1hcFZpZXcuZ2V0UHJvamVjdGlvbigpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFsdFJvdXRlRmVhdHVyZXNbMF0uc2V0SWQoMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYWx0Um91dGVGZWF0dXJlcyA9IHdheVBvbHlsaW5lLnJlYWRGZWF0dXJlcyhyb3V0ZVJlc3BvbnNlLnBhdGhzWzFdLnBvaW50cywge1xuICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBtYXBWaWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhbHRSb3V0ZUZlYXR1cmVzWzBdLnNldElkKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByb3V0ZUZlYXR1cmVzID0gd2F5UG9seWxpbmUucmVhZEZlYXR1cmVzKHJvdXRlUmVzcG9uc2UucGF0aHNbcm91dGVOdW1iZXJdLnBvaW50cywge1xuICAgICAgICAgIGRhdGFQcm9qZWN0aW9uOiAnRVBTRzo0MzI2JyxcbiAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogbWFwVmlldy5nZXRQcm9qZWN0aW9uKClcbiAgICAgICAgfSk7XG4gICAgICAgIHJvdXRlRmVhdHVyZXNbMF0uc2V0SWQocm91dGVOdW1iZXIpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLmRhdGEucm91dGVyX2FwaV9zZWxlY3Rpb24gPT0gXCI0XCIgfHwgcm91dGVSZXNwb25zZS5yb3V0ZVR5cGUgPT0gJzQnKSB7XG4gICAgICAgIHdheVBvbHlsaW5lID0gbmV3IFBvbHlsaW5lKHtcbiAgICAgICAgICAnZmFjdG9yJzogMWU2XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocm91dGVSZXNwb25zZS50cmlwICYmIHJvdXRlUmVzcG9uc2UudHJpcC5sZWdzICYmIHJvdXRlUmVzcG9uc2UudHJpcC5sZWdzWzFdKSB7Ly9jaGVjayBmb3IgYWx0ZXJuYXRpdmUgcm91dGVcbiAgICAgICAgICBpZiAocm91dGVOdW1iZXIgPT0gMSkge1xuICAgICAgICAgICAgYWx0Um91dGVGZWF0dXJlcyA9IHdheVBvbHlsaW5lLnJlYWRGZWF0dXJlcyhyb3V0ZVJlc3BvbnNlLnRyaXAubGVnc1sxXS5zaGFwZSwge1xuICAgICAgICAgICAgICBkYXRhUHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBtYXBWaWV3LmdldFByb2plY3Rpb24oKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhbHRSb3V0ZUZlYXR1cmVzWzBdLnNldElkKDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFsdFJvdXRlRmVhdHVyZXMgPSB3YXlQb2x5bGluZS5yZWFkRmVhdHVyZXMocm91dGVSZXNwb25zZS50cmlwLmxlZ3NbMV0uc2hhcGUsIHtcbiAgICAgICAgICAgICAgZGF0YVByb2plY3Rpb246ICdFUFNHOjQzMjYnLFxuICAgICAgICAgICAgICBmZWF0dXJlUHJvamVjdGlvbjogbWFwVmlldy5nZXRQcm9qZWN0aW9uKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYWx0Um91dGVGZWF0dXJlc1swXS5zZXRJZCgxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcm91dGVGZWF0dXJlcyA9IHdheVBvbHlsaW5lLnJlYWRGZWF0dXJlcyhyb3V0ZVJlc3BvbnNlLnRyaXAubGVnc1tyb3V0ZU51bWJlcl0uc2hhcGUsIHtcbiAgICAgICAgICBkYXRhUHJvamVjdGlvbjogJ0VQU0c6NDMyNicsXG4gICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246IG1hcFZpZXcuZ2V0UHJvamVjdGlvbigpXG4gICAgICAgIH0pO1xuICAgICAgICByb3V0ZUZlYXR1cmVzWzBdLnNldElkKHJvdXRlTnVtYmVyKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYWx0ZXJuYXRpdmUgPT0gJzEnKSB7XG4gICAgICAgIGlmICgocm91dGVSZXNwb25zZS5yb3V0ZXMgJiYgKHJvdXRlUmVzcG9uc2Uucm91dGVzLmxlbmd0aCA+IDEpICYmIChyb3V0ZVJlc3BvbnNlLnJvdXRlc1sxXSkpIHx8IChyb3V0ZVJlc3BvbnNlLnBhdGhzICYmIChyb3V0ZVJlc3BvbnNlLnBhdGhzLmxlbmd0aCA+IDEpICYmIChyb3V0ZVJlc3BvbnNlLnBhdGhzWzFdKSkpIHtcbiAgICAgICAgICB0aGlzLnJvdXRpbmdBbHRXYXlTb3VyY2UuYWRkRmVhdHVyZXMoYWx0Um91dGVGZWF0dXJlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyb3V0ZUZlYXR1cmVzKSB7XG4gICAgICAgIHRoaXMucm91dGVyV2F5U291cmNlLmFkZEZlYXR1cmVzKHJvdXRlRmVhdHVyZXMpO1xuICAgICAgICAvLyByZW5kZXIgdmlld1xuICAgICAgICAvLyBzbyB0aGUgcm91dGUgZ2V0cyBkcmF3biBiZWZvcmUgdGhlIGFuaW1hdGlvbiBzdGFydHNcbiAgICAgICAgdGhpcy5wcm9wcy5tYXBDb250cm9sbGVyLm1hcC5yZW5kZXJTeW5jKCk7XG5cbiAgICAgICAgLy8gYW5pbWF0aW9uXG4gICAgICAgIG1hcFZpZXcuYW5pbWF0ZSh7XG4gICAgICAgICAgc3RhcnQ6ICtuZXcgRGF0ZSgpLFxuICAgICAgICAgIGR1cmF0aW9uOiAyMDAwLFxuICAgICAgICAgIHJlc29sdXRpb246IG1hcFZpZXcuZ2V0UmVzb2x1dGlvbigpLFxuICAgICAgICAgIGNlbnRlcjogWzAsIDBdXG4gICAgICAgICAgLy9yb3RhdGlvbjogTWF0aC5QSVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjYWxjdWxhdGUgcGFkZGluZ1xuXG4gICAgICAgIGxldCB3aWR0aCA9IGpRdWVyeShcIi5jNGctc3RhcmJvYXJkLWNvbnRhaW5lclwiKS5jc3MoJ3dpZHRoJyk7XG4gICAgICAgIGlmICh3aWR0aCkge1xuICAgICAgICAgIHdpZHRoID0gd2lkdGguc3BsaXQoXCIuXCIpO1xuICAgICAgICAgIHdpZHRoID0gQXJyYXkuaXNBcnJheSh3aWR0aCkgPyB3aWR0aFswXSA6IHdpZHRoO1xuICAgICAgICAgIHdpZHRoID0gcGFyc2VJbnQod2lkdGgpICsgIDUwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHdpZHRoID0gNTA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2VudGVyIG9uIHJvdXRlXG4gICAgICAgIG1hcFZpZXcuZml0KFxuICAgICAgICAgIHJvdXRlRmVhdHVyZXNbMF0uZ2V0R2VvbWV0cnkoKSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzaXplOiB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIubWFwLmdldFNpemUoKSxcbiAgICAgICAgICAgIHBhZGRpbmc6IFs1MCwgd2lkdGgsIDUwLCA1MF1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW50ZXJhY3Rpb24gZm9yIHJvdXRpbmcgaW5zdHJ1Y3Rpb25zLiBXaGVuIGhvdmVyaW5nIHRoZSBpbnN0cnVjdGlvbnMgaW4gdGhlIHBvcnRzaWRlIGNvbnRhaW5lciwgdGhlXG4gICAqIGxvY2F0aW9uIG9mIHRoZSBpbnN0cnVjdGlvbiBpcyBoaWdobGlnaHRlZCBvbiB0aGUgcm91dGUuXG4gICAqIEBwYXJhbSByb3V0ZXJJbnN0cnVjdGlvblxuICAgKi9cbiAgYWRqdXN0SW5zdHJ1Y3Rpb25NYXBJbnRlcmFjdGlvbihyb3V0ZXJJbnN0cnVjdGlvbikge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIGZuSXRlbUNsaWNrLFxuICAgICAgZm5JdGVtT3ZlcixcbiAgICAgIGZuSXRlbU91dDtcblxuICAgIGZuSXRlbUNsaWNrID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIHNlbGYucm91dGVySGludFNvdXJjZS5jbGVhcigpO1xuICAgICAgbGV0IGZlYXR1cmUgPSBzZWxmLnJvdXRlcldheVNvdXJjZS5nZXRGZWF0dXJlcygpWzBdO1xuICAgICAgbGV0IGNvb3JkaW5hdGVzID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKCk7XG4gICAgICB2YXIgY29vcmRMb25MYXQgPSBlbGVtZW50LmRhdGEoJ3BvcycpO1xuICAgICAgaWYgKGNvb3JkTG9uTGF0KSB7XG4gICAgICAgIHZhciBzdHJpbmdsb25sYXQgPSBjb29yZExvbkxhdC5zcGxpdChcIixcIik7XG4gICAgICAgIHN0cmluZ2xvbmxhdFswXSA9IHBhcnNlRmxvYXQoc3RyaW5nbG9ubGF0WzBdKTtcbiAgICAgICAgc3RyaW5nbG9ubGF0WzFdID0gcGFyc2VGbG9hdChzdHJpbmdsb25sYXRbMV0pO1xuICAgICAgICB2YXIgbmV3Q29vcmQgPSBmcm9tTG9uTGF0KHN0cmluZ2xvbmxhdCk7XG4gICAgICAgIHZhciBjdXJyZW50SGludEZlYXR1cmUgPSBuZXcgRmVhdHVyZSh7XG4gICAgICAgICAgZ2VvbWV0cnk6IG5ldyBQb2ludChuZXdDb29yZClcbiAgICAgICAgfSk7XG4gICAgICAgIHNlbGYucm91dGVySGludFNvdXJjZS5hZGRGZWF0dXJlKGN1cnJlbnRIaW50RmVhdHVyZSk7XG4gICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuc2V0Q2VudGVyKG5ld0Nvb3JkKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb29yZGluYXRlcykge1xuICAgICAgICBsZXQgc3RhcnQgPSBlbGVtZW50LmRhdGEoJ3N0YXJ0Jyk7XG4gICAgICAgIGxldCBlbmQgPSBlbGVtZW50LmRhdGEoJ2VuZCcpO1xuICAgICAgICBpZiAoc3RhcnQsIGVuZCkge1xuICAgICAgICAgIGxldCBnZW9tID0gbmV3IExpbmVTdHJpbmcoY29vcmRpbmF0ZXMuc2xpY2Uoc3RhcnQsIGVuZCkpO1xuICAgICAgICAgIHZhciBjdXJyZW50SGludEZlYXR1cmUgPSBuZXcgRmVhdHVyZSh7XG4gICAgICAgICAgICBnZW9tZXRyeTogZ2VvbVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGN1cnJlbnRIaW50RmVhdHVyZS5zZXRTdHlsZShcbiAgICAgICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgICAgIHN0cm9rZTogbmV3IFN0cm9rZSh7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwgMCwgMCwgMSknLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBsZXQgY3VycmVudFpvb20gPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFpvb20oKTtcbiAgICAgICAgICBzZWxmLnJvdXRlckhpbnRTb3VyY2UuYWRkRmVhdHVyZShjdXJyZW50SGludEZlYXR1cmUpO1xuICAgICAgICAgIHNlbGYub3B0aW9ucy5tYXBDb250cm9sbGVyLm1hcC5nZXRWaWV3KCkuZml0KGdlb20pO1xuICAgICAgICAgIGxldCBhZnRlclpvb20gPSBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLmdldFpvb20oKTtcbiAgICAgICAgICBsZXQgZW5kWm9vbSA9IE1hdGgucm91bmQoKGN1cnJlbnRab29tICsgYWZ0ZXJab29tKS8yKTtcbiAgICAgICAgICBlbmRab29tID0gKGVuZFpvb20gPiBhZnRlclpvb20pID8gYWZ0ZXJab29tIDogZW5kWm9vbTtcbiAgICAgICAgICBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5tYXAuZ2V0VmlldygpLnNldFpvb20oZW5kWm9vbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm5JdGVtT3ZlciA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoc2VsZi5yb3V0ZXJXYXlTb3VyY2UgJiYgc2VsZi5yb3V0ZXJXYXlTb3VyY2UuZ2V0RmVhdHVyZXMoKSAmJiBzZWxmLm9wdGlvbnMubWFwQ29udHJvbGxlci5kYXRhLnJvdXRlcl9hcGlfc2VsZWN0aW9uID09ICcwJykge1xuICAgICAgICB2YXIgZmVhdHVyZSA9IHNlbGYucm91dGVyV2F5U291cmNlLmdldEZlYXR1cmVzKClbMF07XG4gICAgICAgIGlmIChmZWF0dXJlKSB7XG4gICAgICAgICAgc2VsZi5yb3V0ZXJIaW50U291cmNlLmNsZWFyKCk7XG4gICAgICAgICAgdmFyIGN1cnJlbnRIaW50RmVhdHVyZSA9IG5ldyBGZWF0dXJlKHtcbiAgICAgICAgICAgIGdlb21ldHJ5OiBuZXcgUG9pbnQoZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKClbZWxlbWVudC5kYXRhKCdwb3MnKV0pXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2VsZi5yb3V0ZXJIaW50U291cmNlLmFkZEZlYXR1cmUoY3VycmVudEhpbnRGZWF0dXJlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlbGYucm91dGVyV2F5U291cmNlICYmIHNlbGYucm91dGVyV2F5U291cmNlLmdldEZlYXR1cmVzKCkgJiYgc2VsZi5vcHRpb25zLm1hcENvbnRyb2xsZXIuZGF0YS5yb3V0ZXJfYXBpX3NlbGVjdGlvbiA+PSAnMScpIHtcbiAgICAgICAgdmFyIGZlYXR1cmUgPSBzZWxmLnJvdXRlcldheVNvdXJjZS5nZXRGZWF0dXJlcygpWzBdO1xuICAgICAgICBpZiAoZmVhdHVyZSkge1xuICAgICAgICAgIHNlbGYucm91dGVySGludFNvdXJjZS5jbGVhcigpO1xuICAgICAgICAgIHZhciBjb29yZExvbkxhdCA9IGVsZW1lbnQuZGF0YSgncG9zJyk7XG4gICAgICAgICAgaWYgKGNvb3JkTG9uTGF0KSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nbG9ubGF0ID0gY29vcmRMb25MYXQuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgc3RyaW5nbG9ubGF0WzBdID0gcGFyc2VGbG9hdChzdHJpbmdsb25sYXRbMF0pO1xuICAgICAgICAgICAgc3RyaW5nbG9ubGF0WzFdID0gcGFyc2VGbG9hdChzdHJpbmdsb25sYXRbMV0pO1xuICAgICAgICAgICAgdmFyIG5ld0Nvb3JkID0gZnJvbUxvbkxhdChzdHJpbmdsb25sYXQpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRIaW50RmVhdHVyZSA9IG5ldyBGZWF0dXJlKHtcbiAgICAgICAgICAgICAgZ2VvbWV0cnk6IG5ldyBQb2ludChuZXdDb29yZClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZi5yb3V0ZXJIaW50U291cmNlLmFkZEZlYXR1cmUoY3VycmVudEhpbnRGZWF0dXJlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmVhdHVyZSA9IHNlbGYucm91dGVyV2F5U291cmNlLmdldEZlYXR1cmVzKClbMF07XG4gICAgICAgICAgbGV0IGNvb3JkaW5hdGVzID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgICAgaWYgKGNvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBlbGVtZW50LmRhdGEoJ3N0YXJ0Jyk7XG4gICAgICAgICAgICBsZXQgZW5kID0gZWxlbWVudC5kYXRhKCdlbmQnKTtcbiAgICAgICAgICAgIGlmIChzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgIHZhciBjdXJyZW50SGludEZlYXR1cmUgPSBuZXcgRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgZ2VvbWV0cnk6IG5ldyBMaW5lU3RyaW5nKGNvb3JkaW5hdGVzLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgY3VycmVudEhpbnRGZWF0dXJlLnNldFN0eWxlKFxuICAgICAgICAgICAgICAgIG5ldyBTdHlsZSh7XG4gICAgICAgICAgICAgICAgICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMjU1LCAwLCAwLCAxKScsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxNVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgc2VsZi5yb3V0ZXJIaW50U291cmNlLmFkZEZlYXR1cmUoY3VycmVudEhpbnRGZWF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH07XG5cbiAgICBmbkl0ZW1PdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLnJvdXRlckhpbnRTb3VyY2UuY2xlYXIoKTtcbiAgICB9O1xuXG5cbiAgICBqUXVlcnkoJ1tkYXRhLXN0YXJ0XScsIHJvdXRlckluc3RydWN0aW9uKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuXG4gICAgICB2YXIgJGVsZW1lbnQgPSBqUXVlcnkoZWxlbWVudCk7XG5cbiAgICAgICRlbGVtZW50LmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm5JdGVtQ2xpY2soJGVsZW1lbnQpO1xuICAgICAgfSk7XG5cbiAgICAgICRlbGVtZW50Lm9uKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBmbkl0ZW1PdmVyKCRlbGVtZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICAkZWxlbWVudC5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm5JdGVtT3V0KCk7XG4gICAgICB9KTtcblxuICAgIH0pO1xuICAgIGpRdWVyeSgnW2RhdGEtcG9zXScsIHJvdXRlckluc3RydWN0aW9uKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuXG4gICAgICB2YXIgJGVsZW1lbnQgPSBqUXVlcnkoZWxlbWVudCk7XG5cbiAgICAgICRlbGVtZW50LmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm5JdGVtQ2xpY2soJGVsZW1lbnQpO1xuICAgICAgfSk7XG5cbiAgICAgICRlbGVtZW50Lm9uKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBmbkl0ZW1PdmVyKCRlbGVtZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICAkZWxlbWVudC5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm5JdGVtT3V0KCk7XG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjbGljayBpbnRlcmFjdGlvbiBmb3IgdGhlIHJvdXRlci4gVXBvbiBtYXAgY2xpY2ssIHRoZSBjbGlja2VkIHBvaW50cyBhcmUgY29udmVydGVkIHRvIGxvY2F0aW9ucyBhbmQgdGhlXG4gICAqIHJvdXRlIHNlYXJjaCBpcyBzdGFydGVkLCBhcyBsb25nIGFzIGFsbCBtYW5kYXRvcnkgcHJvcGVydGllcyBhcmUgc2V0LlxuICAgKi9cbiAgYWRkTWFwSW5wdXRJbnRlcmFjdGlvbigpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIGNvb3JkaW5hdGU7XG5cbiAgICBzZWxmLmZuTWFwUm91dGVySW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZS5vcGVuICE9PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBmZWF0dXJlID0gc2VsZi5wcm9wcy5tYXBDb250cm9sbGVyLm1hcC5mb3JFYWNoRmVhdHVyZUF0UGl4ZWwoZXZ0LnBpeGVsLFxuICAgICAgICAgIGZ1bmN0aW9uIChmZWF0dXJlLCBsYXllcikge1xuICAgICAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIGlmIChmZWF0dXJlICYmIGZlYXR1cmUuZ2V0SWQoKSkge1xuICAgICAgICBsZXQgYWN0aXZlSWQgPSBmZWF0dXJlLmdldElkKCkuc2VhcmNoICYmIGZlYXR1cmUuZ2V0SWQoKS5zZWFyY2goJy8nKSA/IHBhcnNlRmxvYXQoZmVhdHVyZS5nZXRJZCgpLnN1YnN0cmluZyhmZWF0dXJlLmdldElkKCkuc2VhcmNoKCcvJykgKyAxKSkgOiBmZWF0dXJlLmdldElkKCk7XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoXG4gICAgICAgICAge1xuICAgICAgICAgICAgYWN0aXZlSWQ6IGFjdGl2ZUlkLFxuICAgICAgICAgICAgb3BlblJlc3VsdHM6IHRydWVcbiAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPIGJlaGF2ZXMgZGlmZmVyZW50bHkgZm9yIHJvdXRlIG9yIGFyZWEgc2VhcmNoXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jNGctcm91dGUtZmVhdHVyZS13cmFwcGVyXCIpKSB7XG4gICAgICAgICAgICAgIGxldCBmZWF0dXJlV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYzRnLXJvdXRlLWZlYXR1cmUtd3JhcHBlclwiKTtcbiAgICAgICAgICAgICAgbGV0IGFjdGl2ZUZlYXR1cmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibGkucm91dGUtZmVhdHVyZXMtbGlzdC1lbGVtZW50LmM0Zy1hY3RpdmVcIik7XG4gICAgICAgICAgICAgIGlmIChmZWF0dXJlV3JhcHBlciAmJiBhY3RpdmVGZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZVdyYXBwZXIuc2Nyb2xsVG8oMCwgYWN0aXZlRmVhdHVyZS5vZmZzZXRUb3ApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb29yZGluYXRlID0gdG9Mb25MYXQoZXZ0LmNvb3JkaW5hdGUpO1xuICAgICAgICAvLyBjbGVhciBvbGQgZmVhdHVyZXNcbiAgICAgICAgc2VsZi5hcmVhU291cmNlLmNsZWFyKCk7XG4gICAgICAgIGlmIChzZWxmLnN0YXRlLm1vZGUgPT09IFwicm91dGVcIikge1xuICAgICAgICAgIC8vIFRPRE8gcm91dGVyIHBlcm1hbGluayB3aWVkZXIgYWt0dWFsaXNpZXJlblxuICAgICAgICAgIGlmIChzZWxmLnN0YXRlLmZyb21BZGRyZXNzID09PSBcIlwiKSB7XG4gICAgICAgICAgICBzZWxmLnNldFJvdXRlRnJvbShjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdKTtcbiAgICAgICAgICAgIC8vIHNlbGYudXBkYXRlTGlua0ZyYWdtZW50cyhcImFkZHJlc3NGcm9tXCIsIGNvb3JkaW5hdGUpO1xuICAgICAgICAgICAgc2VsZi5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzZWxmLnN0YXRlLnRvQWRkcmVzcyA9PT0gXCJcIikge1xuICAgICAgICAgICAgc2VsZi5zZXRSb3V0ZVRvKGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0pO1xuICAgICAgICAgICAgLy8gc2VsZi51cGRhdGVMaW5rRnJhZ21lbnRzKFwiYWRkcmVzc1RvXCIsIGNvb3JkaW5hdGUpO1xuICAgICAgICAgICAgc2VsZi5yZWNhbGN1bGF0ZVJvdXRlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzZWxmLnN0YXRlLm92ZXJQdEN0ciA+IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZi5zdGF0ZS5vdmVyUHRDdHI7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoIXNlbGYuc3RhdGUub3ZlclBvaW50c1tpXSkge1xuICAgICAgICAgICAgICAgIHNlbGYuYWRkT3ZlclBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0sIGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNlbGYuc3RhdGUubW9kZSA9PT0gXCJhcmVhXCIgJiYgc2VsZi5zdGF0ZS5hcmVhQWRkcmVzcyA9PT0gXCJcIikge1xuICAgICAgICAgIHNlbGYuc2V0QXJlYVBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnByb3BzLm1hcENvbnRyb2xsZXIubWFwLm9uKCdjbGljaycsIHNlbGYuZm5NYXBSb3V0ZXJJbnRlcmFjdGlvbik7XG4gIH1cbn0iLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgY29uNGdpcywgdGhlIGdpcy1raXQgZm9yIENvbnRhbyBDTVMuXG4gKiBAcGFja2FnZSBjb240Z2lzXG4gKiBAdmVyc2lvbiA4XG4gKiBAYXV0aG9yIGNvbjRnaXMgY29udHJpYnV0b3JzIChzZWUgXCJhdXRob3JzLnR4dFwiKVxuICogQGxpY2Vuc2UgTEdQTC0zLjAtb3ItbGF0ZXJcbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTAtMjAyMSwgYnkgS8O8c3RlbnNjaG1pZWRlIEdtYkggU29mdHdhcmUgJiBEZXNpZ25cbiAqIEBsaW5rIGh0dHBzOi8vd3d3LmNvbjRnaXMub3JnXG4gKi9cblxuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGl0bGViYXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCBkZXRhaWxCdXR0b24gPSBcIlwiO1xuICAgIGlmICh0aGlzLnByb3BzLmRldGFpbEJ0bkNsYXNzICYmIHRoaXMucHJvcHMuZGV0YWlsQnRuQ2IpIHtcbiAgICAgIGRldGFpbEJ1dHRvbiA9IDxidXR0b24gY2xhc3NOYW1lPXt0aGlzLnByb3BzLmRldGFpbEJ0bkNsYXNzfSBvbk1vdXNlVXA9e3RoaXMucHJvcHMuZGV0YWlsQnRuQ2J9PjwvYnV0dG9uPjtcbiAgICB9XG4gICAgbGV0IGNsb3NlQnV0dG9uID0gXCJcIjtcbiAgICBpZiAodGhpcy5wcm9wcy5jbG9zZUJ0bkNsYXNzICYmIHRoaXMucHJvcHMuY2xvc2VCdG5DYikge1xuICAgICAgY2xvc2VCdXR0b24gPSA8YnV0dG9uIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbG9zZUJ0bkNsYXNzfSBvbk1vdXNlVXA9e3RoaXMucHJvcHMuY2xvc2VCdG5DYn0gdGl0bGU9e3RoaXMucHJvcHMuY2xvc2VCdG5UaXRsZX0+PC9idXR0b24+O1xuICAgIH1cbiAgICBsZXQgbWluaW1pemVCdXR0b24gPSBcIlwiO1xuICAgIGlmICh0aGlzLnByb3BzLmhpZGVDb250YWluZXIpIHtcbiAgICAgIGxldCBtaW5pbWl6ZSA9ICgpID0+IHtcbiAgICAgICAgLy8gdGhpcy5wcm9wcy5yZW1vdmVDb21wb25lbnQoKTtcbiAgICAgICAgalF1ZXJ5KHRoaXMucHJvcHMuaGlkZUNvbnRhaW5lcikucmVtb3ZlQ2xhc3MoXCJjNGctb3BlblwiKS5hZGRDbGFzcyhcImM0Zy1jbG9zZVwiKTtcbiAgICAgIH07XG4gICAgICBtaW5pbWl6ZUJ1dHRvbiA9IDxidXR0b24gY2xhc3NOYW1lPXsnYzRnLXNpZGVib2FyZC1oaWRlJ30gb25Nb3VzZVVwPXsoKT0+IG1pbmltaXplKCl9Lz5cbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXt0aGlzLnByb3BzLndyYXBwZXJDbGFzc30+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5oZWFkZXJDbGFzc30+e3RoaXMucHJvcHMuaGVhZGVyfTwvc3Bhbj5cbiAgICAgICAge21pbmltaXplQnV0dG9ufVxuICAgICAgICB7Y2xvc2VCdXR0b259XG4gICAgICAgIHtkZXRhaWxCdXR0b259XG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG59IiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogIGNvbnN0YW50c1xuICovXG5leHBvcnQgdmFyIHJvdXRpbmdDb25zdGFudHNHZXJtYW4gPSB7XG4gIENUUkxfUk9VVEVSOiAnUm91dGVyIMO2ZmZuZW4vc2NobGllw59lbicsXG4gIFJPVVRFUl9WSUVXX0FERFJFU1NfSU5QVVQ6ICdSb3V0ZSBmaW5kZW4nLFxuICBST1VURVJfRlJPTV9MQUJFTDogJ1N0YXJ0JyxcbiAgUk9VVEVSX09WRVJfTEFCRUw6ICdad2lzY2hlbnppZWwnLFxuICBST1VURVJfVE9fTEFCRUw6ICdaaWVsJyxcbiAgUk9VVEVSX0NMRUFSX1RJVExFOiAnTMO2c2NoZW4nLFxuICBST1VURVJfQ0xFQVJfSFRNTDogJycsXG4gIFJPVVRFUl9MYWJlbF9JbnRlcmltOiAnWndpc2NoZW56aWVsJyxcblxuICBST1VURVJfREVGQVVMVF9IRUFETElORV9ST1VURTogJ1JvdXRlcicsXG4gIFJPVVRFUl9ERUZBVUxUX0hFQURMSU5FX0FSRUE6ICdVbWtyZWlzc3VjaGUnLFxuXG4gIFJPVVRFUl9TV0lUQ0g6J1dlY2hzZWwgdm9uIFN0YXJ0IHVuZCBaaWVsJyxcbiAgUk9VVEVSX09WRVI6J1p3aXNjaGVuemllbCBoaW56dWbDvGdlbicsXG4gIFJPVVRFUl9QUklOVDonUm91dGVuYmVzY2hyZWlidW5nIGRydWNrZW4nLFxuICBST1VURVJfRE9XTkxPQUQ6J1JvdXRlIGFscyBHUFggaGVydW50ZXJsYWRlbicsXG5cbiAgUk9VVEVSX1ZJRVdfTEFCRUxfUk9VVEU6ICdSb3V0ZTonLFxuICBST1VURVJfVklFV19MQUJFTF9ESVNUQU5DRTogJ0VudGZlcm51bmc6JyxcbiAgUk9VVEVSX1ZJRVdfTEFCRUxfVElNRTogJ1plaXQ6JyxcbiAgUk9VVEVSX1ZJRVdfTEFCRUxfUFJPRklMRTogJ1Byb2ZpbDonLFxuXG4gIFJPVVRFUl9WSUVXX0FMRVJUX0VSUk9SOiAnRmVobGVyJyxcbiAgUk9VVEVSX1ZJRVdfQUxFUlRfQUREUkVTUzogJ0FkcmVzc2UgbmljaHQgZ2VmdW5kZW4uJyxcbiAgUk9VVEVSX1ZJRVdfQUxFUlRfR09DT0RJTkc6ICdadWdyaWZmIGF1ZiBHZW9jb2RlciBmZWhsZ2VzY2hsYWdlbi4nLFxuICBST1VURVJfRVJST1JfUE9MWUxJTkU6ICdSb3V0ZSBrb25udGUgbmljaHQgYmVyZWNobmV0IHdlcmRlbi4nLFxuICBST1VURVJfRVJST1JfTElORVNUUklORzogJ1N0cmVja2UgbMOkc3N0IHNpY2ggbmljaHQgaW0gUm91dGVyLicsXG5cbiAgUE9QVVBfUk9VVEVfRlJPTTogJ1JvdXRlIHZvbiBoaWVyJyxcbiAgUE9QVVBfUk9VVEVfVE86ICdSb3V0ZSBoaWVyaGluJyxcbiAgUE9QVVBfUk9VVEVfRURJVDogJ1N0cmVja2UgaW0gUm91dGVyIMO2ZmZuZW4nLFxuXG4gIFJPVVRFUjogJ1JvdXRlcicsXG4gIFJPVVRFUl9OOiAnTm9yZGVuJyxcbiAgUk9VVEVSX0U6ICdPc3QnLFxuICBST1VURVJfUzogJ1PDvGRlbicsXG4gIFJPVVRFUl9XOiAnV2VzdGVuJyxcbiAgUk9VVEVSX05FOiAnTm9yZG9zdCcsXG4gIFJPVVRFUl9TRTogJ1PDvGRvc3QnLFxuICBST1VURVJfU1c6ICdTw7xkd2VzdCcsXG4gIFJPVVRFUl9OVzogJ05vcmR3ZXN0JyxcbiAgUk9VVEVSX0RJUkVDVElPTl8wOiAnVW5iZWthbm50ZSBBbndlaXN1bmdbIGF1ZiA8Yj4lczwvYj5dJyxcbiAgUk9VVEVSX0RJUkVDVElPTl8xOiAnR2VyYWRlYXVzIHdlaXRlcmZhaHJlblsgYXVmIDxiPiVzPC9iPl0nLFxuICBST1VURVJfRElSRUNUSU9OXzI6ICdMZWljaHQgcmVjaHRzIGFiYmllZ2VuIFthdWYgPGI+JXM8L2I+XScsXG4gIFJPVVRFUl9ESVJFQ1RJT05fMzogJ1JlY2h0cyBhYmJpZWdlblsgYXVmIDxiPiVzPC9iPl0nLFxuICBST1VURVJfRElSRUNUSU9OXzQ6ICdTY2hhcmYgcmVjaHRzIGFiYmllZ2VuWyBhdWYgPGI+JXM8L2I+XScsXG4gIFJPVVRFUl9ESVJFQ1RJT05fNTogJ1dlbmRlblsgYXVmIDxiPiVzPC9iPl0nLFxuICBST1VURVJfRElSRUNUSU9OXzY6ICdTY2hhcmYgbGlua3MgYWJiaWVnZW5bIGF1ZiA8Yj4lczwvYj5dJyxcbiAgUk9VVEVSX0RJUkVDVElPTl83OiAnTGlua3MgYWJiaWVnZW5bIGF1ZiA8Yj4lczwvYj5dJyxcbiAgUk9VVEVSX0RJUkVDVElPTl84OiAnTGVpY2h0IGxpbmtzIGFiYmllZ2VuWyBhdWYgPGI+JXM8L2I+XScsXG4gIFJPVVRFUl9ESVJFQ1RJT05fMTA6ICdGYWhyZW4gU2llIFJpY2h0dW5nIDxiPiVkPC9iPlsgYXVmIDxiPiVzPC9iPl0nLFxuICAnUk9VVEVSX0RJUkVDVElPTl8xMS0xJzogJ0luIGRlbiBLcmVpc3ZlcmtlaHIgZWluZmFocmVuIHVuZCBiZWkgZXJzdGVyIE3DtmdsaWNoa2VpdFsgaW4gUmljaHR1bmcgPGI+JXM8L2I+XSB2ZXJsYXNzZW4nLFxuICAnUk9VVEVSX0RJUkVDVElPTl8xMS0yJzogJ0luIGRlbiBLcmVpc3ZlcmtlaHIgZWluZmFocmVuIHVuZCBiZWkgendlaXRlciBNw7ZnbGljaGtlaXRbIGluIFJpY2h0dW5nIDxiPiVzPC9iPl0gdmVybGFzc2VuJyxcbiAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtMyc6ICdJbiBkZW4gS3JlaXN2ZXJrZWhyIGVpbmZhaHJlbiB1bmQgYmVpIGRyaXR0ZXIgTcO2Z2xpY2hrZWl0WyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICdST1VURVJfRElSRUNUSU9OXzExLTQnOiAnSW4gZGVuIEtyZWlzdmVya2VociBlaW5mYWhyZW4gdW5kIGJlaSB2aWVydGVyIE3DtmdsaWNoa2VpdFsgaW4gUmljaHR1bmcgPGI+JXM8L2I+XSB2ZXJsYXNzZW4nLFxuICAnUk9VVEVSX0RJUkVDVElPTl8xMS01JzogJ0luIGRlbiBLcmVpc3ZlcmtlaHIgZWluZmFocmVuIHVuZCBiZWkgZsO8bmZ0ZXIgTcO2Z2xpY2hrZWl0WyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICdST1VURVJfRElSRUNUSU9OXzExLTYnOiAnSW4gZGVuIEtyZWlzdmVya2VociBlaW5mYWhyZW4gdW5kIGJlaSBzZWNoc3RlciBNw7ZnbGljaGtlaXRbIGluIFJpY2h0dW5nIDxiPiVzPC9iPl0gdmVybGFzc2VuJyxcbiAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtNyc6ICdJbiBkZW4gS3JlaXN2ZXJrZWhyIGVpbmZhaHJlbiB1bmQgYmVpIHNpZWJ0ZXIgTcO2Z2xpY2hrZWl0WyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICdST1VURVJfRElSRUNUSU9OXzExLTgnOiAnSW4gZGVuIEtyZWlzdmVya2VociBlaW5mYWhyZW4gdW5kIGJlaSBhY2h0ZXIgTcO2Z2xpY2hrZWl0WyBpbiBSaWNodHVuZyA8Yj4lczwvYj5dIHZlcmxhc3NlbicsXG4gICdST1VURVJfRElSRUNUSU9OXzExLTknOiAnSW4gZGVuIEtyZWlzdmVya2VociBlaW5mYWhyZW4gdW5kIGJlaSBuZXVudGVyIE3DtmdsaWNoa2VpdFsgaW4gUmljaHR1bmcgPGI+JXM8L2I+XSB2ZXJsYXNzZW4nLFxuICAnUk9VVEVSX0RJUkVDVElPTl8xMS14JzogJ0luIGRlbiBLcmVpc3ZlcmtlaHIgZWluZmFocmVuIHVuZCBiZWkgZWluZXIgZGVyIHZpZWxlbiBNw7ZnbGljaGtlaXRlblsgaW4gUmljaHR1bmcgPGI+JXM8L2I+XSB2ZXJsYXNzZW4nLFxuICBST1VURVJfRElSRUNUSU9OXzE1OiAnU2llIGhhYmVuIElociBaaWVsIGVycmVpY2h0JyxcblxuICAnUk9VVEVSXzUuWF9UWVBFXzAnOiAnICVtIGZhaHJlblsgYXVmIDxiPiVzPC9iPl0nLFxuICAnUk9VVEVSXzUuWF9UWVBFXzEnOiAnICVtIGRlbSBTdHJhw59lbnZlcmxhdWYgZm9sZ2VuWyBhbHMgPGI+JXM8L2I+XScsXG4gICdST1VURVJfNS5YX1RZUEVfMic6ICcgRmFocmVuIFNpZVsgYXVmIDxiPiVzPC9iPl0gbG9zJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV8zJzogJyBEYXMgWmllbCBiZWZpbmRldCBzaWNoIDxiPiVtPC9iPicsXG4gICdST1VURVJfNS5YX1RZUEVfNCc6ICcgV2VpdGVyZmFocmVuWyBhdWYgPGI+JXM8L2I+XScsXG4gICdST1VURVJfNS5YX1RZUEVfNSc6ICcgJW0gW2F1ZiA8Yj4lczwvYj4gXWF1ZmZhaHJlbicsXG4gICdST1VURVJfNS5YX1RZUEVfNic6ICcgJW0gW2F1ZiA8Yj4lczwvYj4gXWFiZmFocmVuJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV83JzogJyBEZW4gRmFocnN0cmVpZmVuICVtIGJlbnV0emVuIFthdWYgPGI+JXM8L2I+XScsXG4gICdST1VURVJfNS5YX1RZUEVfOCc6ICcgJW0gYWJiaWVnZW4gW2F1ZiA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV85JzogJyBEZW4gRmFocnN0cmVpZmVuICVtIGJlbnV0emVuIFthdWYgPGI+JXM8L2I+XScsXG4gICdST1VURVJfNS5YX1RZUEVfMTAnOiAnICVtIGZhaHJlbiB1bSBhdWYgZGVyIFN0cmHDn2UgenUgYmxlaWJlbicsXG4gICdST1VURVJfNS5YX1RZUEVfMTEnOiAnIEltIEtyZWlzdmVya2VociBkaWUgPGI+JXouPC9iPiBBdXNmYWhydCBuZWhtZW4gW2F1ZiA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV8xMic6ICcgSW0gS3JlaXN2ZXJrZWhyIGRpZSA8Yj4lei48L2I+IEF1c2ZhaHJ0IG5laG1lbiBbYXVmIDxiPiVzPC9iPl0nLFxuICAnUk9VVEVSXzUuWF9UWVBFXzEzJzogJyAlbSBmYWhyZW4gW2F1ZiA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV8xNCc6ICcgYWJiaWVnZW5bIGF1ZiA8Yj4lczwvYj5dJyxcblxuICAnUk9VVEVSXzUuWF9NT0RfMCcgIDogJ1V0dXJuJyxcbiAgJ1JPVVRFUl81LlhfTU9EXzEnICA6ICdTY2hhcmYgcmVjaHRzJyxcbiAgJ1JPVVRFUl81LlhfTU9EXzInICA6ICdSZWNodHMnLFxuICAnUk9VVEVSXzUuWF9NT0RfMycgIDogJ0xlaWNodCByZWNodHMnLFxuICAnUk9VVEVSXzUuWF9NT0RfNCcgIDogJ0dlcmFkZWF1cycsXG4gICdST1VURVJfNS5YX01PRF81JyAgOiAnTGVpY2h0IGxpbmtzJyxcbiAgJ1JPVVRFUl81LlhfTU9EXzYnICA6ICdMaW5rcycsXG4gICdST1VURVJfNS5YX01PRF83JyAgOiAnU2NoYXJmIGxpbmtzJyxcbiAgJ1JPVVRFUl81LlhfTU9EXzgnICA6ICdpbiBkZXIgTsOkaGUnLFxuXG4gIFJPVVRFUl9GUk9NOiAnU3RhcnQnLFxuICBST1VURVJfVE86ICdaaWVsJyxcbiAgUk9VVEVSX0NFTlRFUjogJ1plbnRydW0nLFxuICBST1VURVJfRklORF9ST1VURTogJ1JvdXRlIGZpbmRlbicsXG4gIFJPVVRFUl9MT0NfUk9VVEVfVE86ICdSb3V0ZSBoaWVyaGluJyxcbiAgUk9VVEVSX1JPVVRFREVTQzogJ1JvdXRlbmJlc2NocmVpYnVuZycsXG4gIFJPVVRFUl9ST1VURU5BTUU6ICdSb3V0ZScsXG4gIFJPVVRFUl9ESVNUQU5DRTogJ0Rpc3RhbnonLFxuICBST1VURVJfVElNRTogJ1plaXQnLFxuICBST1VURVJfUkVWX0dFT0NPRElORzogJ0VybWl0dGxlIEFkcmVzc2UuLi4nLFxuICBST1VURVJfRVJST1JfUkVWX0dFT0NPRElORzogJ0ZlaGxlciBiZWltIEVybWl0dGVsbiBkZXIgQWRyZXNzZScsXG4gIFJPVVRFUl9TRUFSQ0hJTkc6ICdTdWNoZSBBZHJlc3NlLi4uJyxcbiAgUk9VVEVSX0VSUk9SX1NFQVJDSElORzogJ0ZlaGxlciBiZWltIFN1Y2hlbiBkZXIgQWRyZXNzZScsXG4gIFJPVVRFUl9DQUxDX1JPVVRFOiAnQmVyZWNobmUgUm91dGUuLi4nLFxuICBST1VURVJfRVJST1JfQ0FMQ19ST1VURTogJ0ZlaGxlciBiZWltIEJlcmVjaG5lbiBkZXIgUm91dGUnLFxuICBST1VURVJfU0VUVElOR1M6ICdSb3V0ZW5laW5zdGVsbHVuZ2VuJyxcblxuICAvL25ldyBSb3V0ZXJcbiAgQVJFQV9OQU1FOiAgICAgICAgICAgICdVbWtyZWlzc3VjaGUnLFxuICBBUkVBX1BST0ZJTEU6ICAgICAgICAgJ1Byb2ZpbCcsXG4gIEFSRUFfRkVBVFVSRUNPVU5UOiAgICAnR2VmdW5kZW5lIEVsZW1lbnRlJyxcbiAgUk9VVEVfREVUT1VSOiAgICAgICAgICdVbXdlZycsXG4gIEFSRUFfREVUT1VSOiAgICAgICAgICAnUmFkaXVzJyxcbiAgSU5TVFJVQ1RJT05fSEVBRExJTkU6ICdSb3V0ZW5iZXNjaHJlaWJ1bmcnLFxuICBGRUFUVVJFU19IRUFETElORTogICAgJ0xva2F0aW9uZW4nLFxuICBST1VURV9QT1NJVElPTjogICAgICAgJ1Bvc2l0aW9uIGVybWl0dGVsbicsXG4gIFNUQVJUX1JPVVRFOiAgICAgICAgICAnU3VjaGUgc3RhcnRlbicsXG4gIFJFTU9WRV9BRERSRVNTOiAgICAgICAnQWRyZXNzZSBsw7ZzY2hlbicsXG5cbiAgQ0FSOiAgICAgICAgICAgICAgICAgICdBdXRvJyxcbiAgQklLRTogICAgICAgICAgICAgICAgICdGYWhycmFkJyxcbiAgUk9BREJJS0U6ICAgICAgICAgICAgICdSZW5ucmFkJyxcbiAgTU9VTlRBSU5CSUtFOiAgICAgICAgICdNb3VudGFpbmJpa2UnLFxuICBFTEVDVFJJQ0JJS0U6ICAgICAgICAgJ0UtQmlrZScsXG4gIFRSVUNLOiAgICAgICAgICAgICAgICAnTGFzdGtyYWZ0d2FnZW4nLFxuICBXQUxLOiAgICAgICAgICAgICAgICAgJ0Z1w59nw6RuZ2VySW4nLFxuICBXQU5ERVI6ICAgICAgICAgICAgICAgJ1dhbmRlcmVySW4nLFxuICBXSEVFTDogICAgICAgICAgICAgICAgJ1JvbGxzdHVobCcsXG4gIFNDT09UOiAgICAgICAgICAgICAgICAnUm9sbGVyJyxcbiAgTU9UT1JCSUtFOiAgICAgICAgICAgICdNb3RvcnJhZCcsXG5cbiAgQ0xPU0U6ICdTY2hsaWXDn2VuJyxcblxuICBOT05FOiAnJyAvLyBsYXN0IGxpbmVcbn07IC8vIGVuZCBvZiBcImNzcyBjb25zdGFudHNcIiAtLS1cbiIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqICBjb25zdGFudHNcbiAqL1xuZXhwb3J0ICB2YXIgcm91dGluZ0NvbnN0YW50c0VuZ2xpc2ggPSB7XG4gIFJPVVRFUl9WSUVXX0FERFJFU1NfSU5QVVQ6ICdGaW5kIHJvdXRlJyxcbiAgUk9VVEVSX0ZST01fTEFCRUw6ICdTdGFydCcsXG4gIFJPVVRFUl9UT19MQUJFTDogJ0VuZCcsXG4gIFJPVVRFUl9DTEVBUl9USVRMRTogJ0RlbGV0ZScsXG4gIFJPVVRFUl9DTEVBUl9IVE1MOiAnJyxcbiAgUk9VVEVSX0xhYmVsX0ludGVyaW06ICdJbnRlcmltIEdvYWwnLFxuXG4gIFJPVVRFUl9ERUZBVUxUX0hFQURMSU5FX1JPVVRFOiAnUm91dGVyJyxcbiAgUk9VVEVSX0RFRkFVTFRfSEVBRExJTkVfQVJFQTogJ0FyZWEgc2VhcmNoJyxcblxuICBST1VURVJfU1dJVENIOidTd2l0Y2ggYmV0d2VlbiBTdGFydCBhbmQgRW5kJyxcbiAgUk9VVEVSX09WRVI6J0FkZCBpbnRlcmltIGdvYWwnLFxuICBST1VURVJfUFJJTlQ6J1ByaW50IHJvdXRlIGRlc2NyaXB0aW9uJyxcbiAgUk9VVEVSX0RPV05MT0FEOidEb3dubG9hZCByb3V0ZSBhcyBHUFgnLFxuXG4gIFBPUFVQX1JPVVRFX0ZST006ICdSb3V0ZSBmcm9tIGhlcmUnLFxuICBQT1BVUF9ST1VURV9UTzogJ1JvdXRlIHRvIGhlcmUnLFxuICBQT1BVUF9ST1VURV9FRElUOiAnT3BlbiBsaW5lIGluIHJvdXRlcicsXG5cbiAgUk9VVEVSX1ZJRVdfTEFCRUxfUk9VVEU6ICdSb3V0ZTonLFxuICBST1VURVJfVklFV19MQUJFTF9ESVNUQU5DRTogJ0Rpc3RhbmNlOicsXG4gIFJPVVRFUl9WSUVXX0xBQkVMX1RJTUU6ICdUaW1lOicsXG4gIFJPVVRFUl9WSUVXX0xBQkVMX1BST0ZJTEU6J1Byb2ZpbGUnLFxuXG4gIFJPVVRFUl9WSUVXX0FMRVJUX0Vycm9yOiAnRXJyb3InLFxuICBST1VURVJfVklFV19BTEVSVF9BRERSRVNTOiAnQWRkcmVzcyBub3QgZm91bmQuJyxcbiAgUk9VVEVSX1ZJRVdfQUxFUlRfR09DT0RJTkc6ICdObyBhY2Nlc3MgdG8gZ2VvY29kaW5nLicsXG4gIFJPVVRFUl9FUlJPUl9QT0xZTElORTogJ0NvdWxkIG5vdCBjYWxjdWxhdGUgcm91dGUuJyxcbiAgUk9VVEVSX0VSUk9SX0xJTkVTVFJJTkc6ICdDb3VsZCBub3Qgb3BlbiBsaW5lIGluIHJvdXRlci4nLFxuXG5cbiAgUk9VVEVSOiAnUm91dGVyJyxcbiAgUk9VVEVSX046ICdIZWFkIG5vcnRoJyxcbiAgUk9VVEVSX0U6ICdIZWFkIGVhc3QnLFxuICBST1VURVJfUzogJ0hlYWQgc291dGgnLFxuICBST1VURVJfVzogJ0hlYWQgd2VzdCcsXG4gIFJPVVRFUl9ORTogJ0hlYWQgbm9ydGhlYXN0JyxcbiAgUk9VVEVSX1NFOiAnSGVhZCBzb3V0aGVhc3QnLFxuICBST1VURVJfU1c6ICdIZWFkIHNvdXRod2VzdCcsXG4gIFJPVVRFUl9OVzogJ0hlYWQgbm9ydGh3ZXN0JyxcbiAgUk9VVEVSX0RJUkVDVElPTl8wOiAndW5rbm93biBkaXJlY3Rpb25bIG9udG8gPGI+JXM8L2I+XScsXG4gIFJPVVRFUl9ESVJFQ1RJT05fMTogJ3N0cmFpZ2h0IGFoZWFkWyBvbnRvIDxiPiVzPC9iPl0nLFxuICBST1VURVJfRElSRUNUSU9OXzI6ICdzbGlnaHQgcmlnaHRbIG9udG8gPGI+JXM8L2I+XScsXG4gIFJPVVRFUl9ESVJFQ1RJT05fMzogJ3JpZ2h0WyBvbnRvIDxiPiVzPC9iPl0nLFxuICBST1VURVJfRElSRUNUSU9OXzQ6ICdzaGFycCByaWdodFsgb250byA8Yj4lczwvYj5dJyxcbiAgUk9VVEVSX0RJUkVDVElPTl81OiAndHVyblsgb250byA8Yj4lczwvYj5dJyxcbiAgUk9VVEVSX0RJUkVDVElPTl82OiAnc2hhcnAgdHVybiBsZWZ0WyBvbnRvIDxiPiVzPC9iPl0nLFxuICBST1VURVJfRElSRUNUSU9OXzc6ICd0dXJuIGxlZnRbIG9udG8gPGI+JXM8L2I+XScsXG4gIFJPVVRFUl9ESVJFQ1RJT05fODogJ2xpZ2h0IHR1cm4gbGVmdFsgb250byA8Yj4lczwvYj5dJyxcbiAgUk9VVEVSX0RJUkVDVElPTl8xMDogJ2RyaXZlIGluIGRpcmVjdGlvbiBvZiA8Yj4lZDwvYj5bIG9udG8gPGI+JXM8L2I+XScsXG4gICdST1VURVJfRElSRUNUSU9OXzExLTEnOiAnVGFrZSB0aGUgZmlyc3QgZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtMic6ICdUYWtlIHRoZSAybmQgZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtMyc6ICdUYWtlIHRoZSAzcmQgZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtNCc6ICdUYWtlIHRoZSA0dGggZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtNSc6ICdUYWtlIHRoZSA1dGggZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtNic6ICdUYWtlIHRoZSA2dGggZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtNyc6ICdUYWtlIHRoZSA3dGggZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtOCc6ICdUYWtlIHRoZSA4dGggZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEtOSc6ICdUYWtlIHRoZSA5dGggZXhpdCBpbiB0aGUgcm91bmRhYm91dFsgb250byA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl9ESVJFQ1RJT05fMTEteCc6ICdUYWtlIG9uZSBvZiB0aGUgZXhpdHMgaW4gdGhlIHJvdW5kYWJvdXRbIG9udG8gPGI+JXM8L2I+XScsXG4gIFJPVVRFUl9ESVJFQ1RJT05fMTU6ICdEZXN0aW5hdGlvbiByZWFjaGVkJyxcblxuICAnUk9VVEVSXzUuWF9UWVBFXzAnOiAnIFR1cm4gJW0gb25bIDxiPiVzPC9iPl0nLFxuICAnUk9VVEVSXzUuWF9UWVBFXzEnOiAnIEZvbGxvdyB0aGUgY291cnNlIG9mIHRoZSByb2FkICVtWyBhcyA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV8yJzogJyBEZXBhcnRbIG9uIDxiPiVzPC9iPl0nLFxuICAnUk9VVEVSXzUuWF9UWVBFXzMnOiAnIEFycml2ZSA8Yj4lbTwvYj4nLFxuICAnUk9VVEVSXzUuWF9UWVBFXzQnOiAnIENvbnRpbnVlIGRyaXZpbmdbIG9uIDxiPiVzPC9iPl0nLFxuICAnUk9VVEVSXzUuWF9UWVBFXzUnOiAnIFRha2UgdGhlIHJhbXAgJW1bIG9uIDxiPiVzPC9iPl0nLFxuICAnUk9VVEVSXzUuWF9UWVBFXzYnOiAnIFRha2UgdGhlIHJhbXAgJW1bIHRvIGV4aXQgb248Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV83JzogJyBUYWtlIHRoZSAlbSBzaXRlIG9mIHRoZSBmb3JrIHRvWyA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV84JzogJyBUdXJuICVtWyBvbiA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV85JzogJyBUYWtlIHRoZSBsYW5lICVtWyBvbiA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV8xMCc6ICcgVHVybiAlbSB0byBzdGF5IG9uIHRoZSByb2FkJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV8xMSc6ICcgTGVhdmUgdGhlIHJvdW5kYWJvdXQgb24gdGhlICV6LiBleGl0WyB0byA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV8xMic6ICcgTGVhdmUgdGhlIHJvdW5kYWJvdXQgb24gdGhlICV6LiBleGl0WyB0byA8Yj4lczwvYj5dJyxcbiAgJ1JPVVRFUl81LlhfVFlQRV8xMyc6ICcgVHVybiAlbVsgb24gPGI+JXM8L2I+XScsXG4gICdST1VURVJfNS5YX1RZUEVfMTQnOiAnIEZvbGxvdyB0aGUgcm9hZCAlbScsXG5cbiAgJ1JPVVRFUl81LlhfTU9EXzAnICA6ICdVdHVybicsXG4gICdST1VURVJfNS5YX01PRF8xJyAgOiAnc2hhcnAgcmlnaHQnLFxuICAnUk9VVEVSXzUuWF9NT0RfMicgIDogJ3JpZ2h0JyxcbiAgJ1JPVVRFUl81LlhfTU9EXzMnICA6ICdzbGlnaHQgcmlnaHQnLFxuICAnUk9VVEVSXzUuWF9NT0RfNCcgIDogJ3N0cmFpZ2h0JyxcbiAgJ1JPVVRFUl81LlhfTU9EXzUnICA6ICdzbGlnaHQgbGVmdCcsXG4gICdST1VURVJfNS5YX01PRF82JyAgOiAnbGVmdCcsXG4gICdST1VURVJfNS5YX01PRF83JyAgOiAnc2hhcnAgbGVmdCcsXG4gICdST1VURVJfNS5YX01PRF84JyAgOiAnc29tZWhvdycsXG5cbiAgUk9VVEVSX0ZST006ICdTdGFydCcsXG4gIFJPVVRFUl9UTzogJ0VuZCcsXG4gIFJPVVRFUl9DRU5URVI6ICdDZW50ZXInLFxuICBST1VURVJfRklORF9ST1VURTogJ0ZpbmQgcm91dGUnLFxuICBST1VURVJfTE9DX1JPVVRFX1RPOiAnUm91dGUgdG8gaGVyZScsXG4gIFJPVVRFUl9ST1VURURFU0M6ICdEZXNjcmlwdGlvbicsXG4gIFJPVVRFUl9ST1VURU5BTUU6ICdSb3V0ZScsXG4gIFJPVVRFUl9ESVNUQU5DRTogJ0Rpc3RhbmNlJyxcbiAgUk9VVEVSX1RJTUU6ICdUaW1lJyxcbiAgUk9VVEVSX1JFVl9HRU9DT0RJTkc6ICdJZGVudGlmaWVkIGFkZHJlc3MuLi4nLFxuICBST1VURVJfRVJST1JfUkVWX0dFT0NPRElORzogJ0ZhdWx0ISBDYW4gbm90IGlkZW50aWZpeSBhZGRyZXNzJyxcbiAgUk9VVEVSX1NFQVJDSElORzogJ1NlYXJjaCBhZGRyZXNzLi4uJyxcbiAgUk9VVEVSX0VSUk9SX1NFQVJDSElORzogJ0ZhdWx0ISBDYW4gbm90IGZpbmQgYWRkcmVzcycsXG4gIFJPVVRFUl9DQUxDX1JPVVRFOiAnQ2FsYyByb3V0ZS4uLicsXG4gIFJPVVRFUl9FUlJPUl9DQUxDX1JPVVRFOiAnRmF1bHQhIENhbiBub3QgY2FsYyBhZGRyZXNzJyxcbiAgUk9VVEVSX1NFVFRJTkdTOiAnUm91dGluZyBzZXR0aW5ncycsXG4gIENUUkxfUk9VVEVSOiAnVG9nZ2xlIHJvdXRlcicsXG5cblxuICAvL25ldyBSb3V0ZXJcbiAgQVJFQV9OQU1FOiAgICAgICAgICAgICdTZWFyY2ggcGVyaW1ldGVyJyxcbiAgQVJFQV9QUk9GSUxFOiAgICAgICAgICdQcm9maWxlJyxcbiAgQVJFQV9GRUFUVVJFQ09VTlQ6ICAgICdGb3VuZCBmZWF0dXJlcycsXG4gIFJPVVRFX0RFVE9VUjogICAgICAgICAnRGV0b3VyJyxcbiAgQVJFQV9ERVRPVVI6ICAgICAgICAgICdSYWRpdXMnLFxuICBJTlNUUlVDVElPTl9IRUFETElORTogJ1JvdXRlIEluc3RydWN0aW9ucycsXG4gIEZFQVRVUkVTX0hFQURMSU5FOiAgICAnTG9jYXRpb25zJyxcbiAgUk9VVEVfUE9TSVRJT046ICAgICAgICdHZXQgdXNlciBwb3NpdGlvbicsXG4gIFNUQVJUX1JPVVRFOiAgICAgICAgICAnU3RhcnQgc2VhcmNoJyxcblxuICBDQVI6ICAgICAgICAgICAgICAgICAgJ0NhcicsXG4gIEJJS0U6ICAgICAgICAgICAgICAgICAnQmlrZScsXG4gIFJPQURCSUtFOiAgICAgICAgICAgICAnUm9hZCBiaWtlJyxcbiAgTU9VTlRBSU5CSUtFOiAgICAgICAgICdNb3VudGFpbiBiaWtlJyxcbiAgRUxFQ1RSSUNCSUtFOiAgICAgICAgICdFLUJpa2UnLFxuICBUUlVDSzogICAgICAgICAgICAgICAgJ1RydWNrJyxcbiAgV0FMSzogICAgICAgICAgICAgICAgICdQZWRlc3RyaWFuJyxcbiAgV0FOREVSOiAgICAgICAgICAgICAgICdXYW5kZXJlcicsXG4gIFdIRUVMOiAgICAgICAgICAgICAgICAnV2hlZWxjaGFpcicsXG4gIFNDT09UOiAgICAgICAgICAgICAgICAnUm91dGVyJyxcbiAgTU9UT1JCSUtFOiAgICAgICAgICAgICdNb3RvcmJpa2UnLFxuXG4gIENMT1NFOiAnQ2xvc2UnLFxuXG4gIE5PTkU6ICcnIC8vIGxhc3QgbGluZVxufTsgLy8gZW5kIG9mIFwiY3NzIGNvbnN0YW50c1wiIC0tLVxuIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGNvbjRnaXMsIHRoZSBnaXMta2l0IGZvciBDb250YW8gQ01TLlxuICogQHBhY2thZ2UgY29uNGdpc1xuICogQHZlcnNpb24gOFxuICogQGF1dGhvciBjb240Z2lzIGNvbnRyaWJ1dG9ycyAoc2VlIFwiYXV0aG9ycy50eHRcIilcbiAqIEBsaWNlbnNlIExHUEwtMy4wLW9yLWxhdGVyXG4gKiBAY29weXJpZ2h0IChjKSAyMDEwLTIwMjEsIGJ5IEvDvHN0ZW5zY2htaWVkZSBHbWJIIFNvZnR3YXJlICYgRGVzaWduXG4gKiBAbGluayBodHRwczovL3d3dy5jb240Z2lzLm9yZ1xuICovXG5cbmltcG9ydCB7cm91dGluZ0NvbnN0YW50c0dlcm1hbn0gZnJvbSBcIi4vcm91dGluZy1jb25zdGFudC1pMThuLWRlXCI7XG5pbXBvcnQge3JvdXRpbmdDb25zdGFudHNFbmdsaXNofSBmcm9tIFwiLi9yb3V0aW5nLWNvbnN0YW50LWkxOG4tZW5cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldExhbmd1YWdlKG1hcERhdGEpIHtcbiAgaWYgKHR5cGVvZiBtYXBEYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgIHN3aXRjaCAobWFwRGF0YS5sYW5nKSB7XG4gICAgICBjYXNlIFwiZGVcIjpcbiAgICAgICAgcmV0dXJuIHJvdXRpbmdDb25zdGFudHNHZXJtYW47XG4gICAgICBjYXNlIFwiZW5cIjpcbiAgICAgICAgcmV0dXJuIHJvdXRpbmdDb25zdGFudHNFbmdsaXNoO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHJvdXRpbmdDb25zdGFudHNFbmdsaXNoO1xuICAgIH1cbiAgfVxufSIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBjb240Z2lzLCB0aGUgZ2lzLWtpdCBmb3IgQ29udGFvIENNUy5cbiAqIEBwYWNrYWdlIGNvbjRnaXNcbiAqIEB2ZXJzaW9uIDhcbiAqIEBhdXRob3IgY29uNGdpcyBjb250cmlidXRvcnMgKHNlZSBcImF1dGhvcnMudHh0XCIpXG4gKiBAbGljZW5zZSBMR1BMLTMuMC1vci1sYXRlclxuICogQGNvcHlyaWdodCAoYykgMjAxMC0yMDIxLCBieSBLw7xzdGVuc2NobWllZGUgR21iSCBTb2Z0d2FyZSAmIERlc2lnblxuICogQGxpbmsgaHR0cHM6Ly93d3cuY29uNGdpcy5vcmdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogIGNvbnN0YW50c1xuICovXG5leHBvcnQgdmFyIHJvdXRpbmdDb25zdGFudHMgPSB7XG4gIFJPVVRFUl9JTlBVVF9XUkFQUEVSOiAnYzRnLXJvdXRlci1pbnB1dC13cmFwcGVyJyxcbiAgUk9VVEVSX1BST0ZJTEVfV1JBUFBFUjogJ2M0Zy1yb3V0ZXItcHJvZmlsZS13cmFwcGVyJyxcbiAgUk9VVEVSX0lOUFVUX0ZST006ICdjNGctcm91dGVyLWlucHV0LWZyb20nLFxuICBST1VURVJfSU5QVVRfVE86ICdjNGctcm91dGVyLWlucHV0LXRvJyxcbiAgUk9VVEVSX0lOUFVUX09WRVI6ICdjNGctcm91dGVyLWlucHV0LW92ZXInLFxuICBST1VURVJfSU5QVVRfQ0xFQVI6ICdjNGctcm91dGVyLWlucHV0LWNsZWFyJyxcbiAgUk9VVEVSX0JVVFRPTkJBUjogJ2M0Zy1yb3V0ZXItYnV0dG9uYmFyJyxcbiAgUk9VVEVSX0FUVFJJQlVUSU9OX1dSQVBQRVI6ICdjNGctcm91dGVyLWF0dHJpYnV0aW9uLXdyYXBwZXInLFxuICBST1VURVJfSU5TVFJVQ1RJT05TX1dSQVBQRVI6ICdjNGctcm91dGVyLWluc3RydWN0aW9ucy13cmFwcGVyJyxcbiAgUk9VVEVSX0lOU1RSVUNUSU9OU19IRUFERVI6ICdjNGctcm91dGVyLWluc3RydWN0aW9ucy1oZWFkZXInLFxuXG4gIFJPVVRFUl9TV0lUQ0g6ICdjNGctcm91dGVyLXN3aXRjaCcsXG4gIFJPVVRFUl9PVkVSOiAnYzRnLXJvdXRlci1vdmVyJyxcbiAgUk9VVEVSX1BSSU5UOiAnYzRnLXJvdXRlci1wcmludCcsXG5cbiAgUk9VVEVSX1BST0ZJTEVfQ0FSOiAnYzRnLXJvdXRlci1wcm9maWxlLWNhcicsXG4gIFJPVVRFUl9QUk9GSUxFX1RSVUNLOiAnYzRnLXJvdXRlci1wcm9maWxlLWhndicsXG4gIFJPVVRFUl9QUk9GSUxFX0JJS0U6ICdjNGctcm91dGVyLXByb2ZpbGUtYmlrZScsXG4gIFJPVVRFUl9QUk9GSUxFX0ZPT1Q6ICdjNGctcm91dGVyLXByb2ZpbGUtZm9vdCcsXG4gIFJPVVRFUl9QUk9GSUxFX1dIRUVMQ0hBSVI6ICdjNGctcm91dGVyLXByb2ZpbGUtd2hlZWxjaGFpcicsXG4gIFJPVVRFUl9QUk9GSUxFX1NDT09URVI6ICdjNGctcm91dGVyLXByb2ZpbGUtc2Nvb3RlcicsXG5cbiAgUk9VVEVSX0lOU1RSVUNUSU9OU19UQUJMRTogJ2M0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb24tdGFibGUnLFxuICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU06ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW0nLFxuICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fT0REOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi1pdGVtLS1vZGQnLFxuICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRVZFTjogJ2M0Zy1yb3V0ZXItaW5zdHJ1Y3Rpb24taXRlbS0tZXZlbicsXG4gIFJPVVRFUl9JTlNUUlVDVElPTlNfSVRFTV9ESVJFQ1RJT046ICdjNGctcm91dGVyLWluc3RydWN0aW9uLWl0ZW1fZGlyZWN0aW9uJyxcbiAgUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9JQ09OOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi1pdGVtX2RpcmVjdGlvbi1pY29uJyxcbiAgUk9VVEVSX0lOU1RSVUNUSU9OU19JVEVNX0RJUkVDVElPTl9URVhUOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi1pdGVtX3RleHQnLFxuICBST1VURVJfSU5TVFJVQ1RJT05TX0lURU1fRElSRUNUSU9OX0RJU1RBTkNFOiAnYzRnLXJvdXRlci1pbnN0cnVjdGlvbi1pdGVtX2Rpc3RhbmNlJyxcblxuICBST1VURV9MQVlFUl9WQUxVRVM6ICAgJ2M0Zy1yb3V0aW5nLWxheWVyLXZhbHVlcycsXG4gIFJPVVRFX0xBWUVSU19TRUxFQ1Q6ICAnYzRnLXJvdXRpbmctbGF5ZXJzLXNlbGVjdCcsXG4gIFJPVVRFX1RPR0dMRTogICAgICAgICAnYzRnLXJvdXRpbmctdG9nZ2xlJyxcbiAgT1VUUFVUX0RFVE9VUjogICAgICAgICdjNGctcm91dGluZy1vdXRwdXQnLFxuICBST1VURV9TVEFSVF9CVVRUT046ICAgJ2M0Zy1yb3V0ZS1zZWFyY2gtc3RhcnQnLFxuICBST1VURVJfU0VBUkNIOiAgICAgICAgJ2M0Zy1yb3V0ZXItc2VhcmNoJyxcbiAgUk9VVEVfUE9TSVRJT046ICAgICAgICdjNGctcm91dGVyLXBvc2l0aW9uJyxcbiAgUk9VVEVfRVJST1I6ICAgICAgICAgICdjNGctcm91dGluZy1lcnJvcicsXG5cblxuXG4gIE5PTkU6ICcnIC8vIGxhc3QgbGluZVxufTsgLy8gZW5kIG9mIFwiY3NzIGNvbnN0YW50c1wiIC0tLVxuIl0sInNvdXJjZVJvb3QiOiIifQ==