"use strict";(self.webpackChunkmapsbundle=self.webpackChunkmapsbundle||[]).push([["node_modules_geotiff_src_compression_raw_js"],{"./node_modules/geotiff/src/compression/basedecoder.js":(e,r,t)=>{function o(e,r){let t=e.length-r,o=0;do{for(let t=r;t>0;t--)e[o+r]+=e[o],o++;t-=r}while(t>0)}function s(e,r,t){let o=0,s=e.length;const n=s/t;for(;s>r;){for(let t=r;t>0;--t)e[o+r]+=e[o],++o;s-=r}const i=e.slice();for(let r=0;r<n;++r)for(let o=0;o<t;++o)e[t*r+o]=i[(t-o-1)*n+r]}t.d(r,{Z:()=>n});class n{async decode(e,r){const t=await this.decodeBlock(r),n=e.Predictor||1;if(1!==n){const r=!e.StripOffsets;return function(e,r,t,n,i,l){if(!r||1===r)return e;for(let e=0;e<i.length;++e){if(i[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(i[e]!==i[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const c=i[0]/8,a=2===l?1:i.length;for(let l=0;l<n&&!(l*a*t*c>=e.byteLength);++l){let n;if(2===r){switch(i[0]){case 8:n=new Uint8Array(e,l*a*t*c,a*t*c);break;case 16:n=new Uint16Array(e,l*a*t*c,a*t*c/2);break;case 32:n=new Uint32Array(e,l*a*t*c,a*t*c/4);break;default:throw new Error(`Predictor 2 not allowed with ${i[0]} bits per sample.`)}o(n,a)}else 3===r&&(n=new Uint8Array(e,l*a*t*c,a*t*c),s(n,a,c))}return e}(t,n,r?e.TileWidth:e.ImageWidth,r?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return t}}},"./node_modules/geotiff/src/compression/raw.js":(e,r,t)=>{t.r(r),t.d(r,{default:()=>s});var o=t("./node_modules/geotiff/src/compression/basedecoder.js");class s extends o.Z{decodeBlock(e){return e}}}}]);