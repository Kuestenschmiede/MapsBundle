baselayer_service:
    path: /con4gis/baseLayerService/{profileId}/{lang}
    controller: con4gis\MapsBundle\Controller\BaselayerController::baseLayerAction
    methods: GET


baselayer_tile_service:
    path: /con4gis/baseLayerTileService/{baseLayerId}/{z}/{x}/{y}
    controller: con4gis\MapsBundle\Controller\BaselayerController::baseLayerTileAction
    methods: [GET]
    requirements:
        baseLayerId: \d+

layer_service:
    path: /con4gis/layerService/{mapId}/{lang}
    controller: con4gis\MapsBundle\Controller\LayerController::layer
    methods: GET

filter_service:
    path: /con4gis/filterService/{profileId}/{lang}
    controller: con4gis\MapsBundle\Controller\FilterController::filter
    methods: GET

layer_content_service:
    path: /con4gis/layerContentService/{layerId}
    controller: con4gis\MapsBundle\Controller\LayerController::layerContentAction
    methods: [GET]
    requirements:
        layerId: \d+

layer_content_data_service:
    path: /con4gis/layerContentDataService/{layerId}/{extent}
    controller: con4gis\MapsBundle\Controller\LayerController::layerContentDataAction
    methods: [GET]
    requirements:
        layerId: \d+

infowindow_service:
    path: /con4gis/infoWindowService/{popupString}
    methods: [GET]
    requirements:
        popupString: .*
    controller: con4gis\MapsBundle\Controller\MapsController::infoWindowAction

wfs_service:
    path: /con4gis/wfsService/{id}/{extent}
    methods: [GET]
    controller: con4gis\MapsBundle\Controller\MapsController::wfsAction

locationstyle_service:
    path: /con4gis/locationStyleService/
    controller: con4gis\MapsBundle\Controller\LocationstyleController::locationStyleAction
    methods: [GET]

search_service:
    path: /con4gis/searchService/{profileId}
    controller: con4gis\MapsBundle\Controller\MapsController::searchAction
    methods: [GET]
    requirements:
        profileId: \d+

reverse_search_service:
    path: /con4gis/reverseSearchService/{profileId}
    controller: con4gis\MapsBundle\Controller\MapsController::reverseSearchAction
    methods: [GET]
    requirements:
        profileId: \d+

old_routing_service:
    path: /con4gis/routingService/{profileId}
    controller: con4gis\MapsBundle\Controller\MapsController::oldRoutingAction
    methods: [GET]
    requirements:
        profileId: \d+

routing_service:
    path: /con4gis/routingService/{profileId}/{locations}
    controller: con4gis\MapsBundle\Controller\MapsController::routingAction
    methods: [GET]
    requirements:
        profileId: \d+
        locations: .*

geopicker_service:
    path: /con4gis/geopickerService/
    controller: con4gis\MapsBundle\Controller\MapsController::geopickerAction
    methods: [GET]

beEditor_service:
    path: /con4gis/beEditorService/{layerId}
    controller: con4gis\MapsBundle\Controller\EditorController::beEditorAction
    methods: [GET]
    requirements:
        mapId: \d+

routing_area:
    path: /con4gis/areaService/{profileId}/{layerId}/{distance}/{center}
    controller: con4gis\MapsBundle\Controller\RoutingController::getAreaAction
    methods: [GET]

routing_route:
    path: /con4gis/routeService/{language}/{profileId}/{layerId}/{detour}/{locations}
    controller: con4gis\MapsBundle\Controller\RoutingController::getRouteAction
    methods: [GET]