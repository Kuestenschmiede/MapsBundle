"use strict";
(self["webpackChunkmapsbundle"] = self["webpackChunkmapsbundle"] || []).push([["node_modules_geotiff_dist-module_compression_packbits_js"],{

/***/ "./node_modules/geotiff/dist-module/compression/basedecoder.js":
/*!*********************************************************************!*\
  !*** ./node_modules/geotiff/dist-module/compression/basedecoder.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BaseDecoder)
/* harmony export */ });
/* harmony import */ var _predictor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../predictor.js */ "./node_modules/geotiff/dist-module/predictor.js");


class BaseDecoder {
  async decode(fileDirectory, buffer) {
    const decoded = await this.decodeBlock(buffer);
    const predictor = fileDirectory.Predictor || 1;
    if (predictor !== 1) {
      const isTiled = !fileDirectory.StripOffsets;
      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;
      const tileHeight = isTiled ? fileDirectory.TileLength : (
        fileDirectory.RowsPerStrip || fileDirectory.ImageLength
      );
      return (0,_predictor_js__WEBPACK_IMPORTED_MODULE_0__.applyPredictor)(
        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,
        fileDirectory.PlanarConfiguration,
      );
    }
    return decoded;
  }
}


/***/ }),

/***/ "./node_modules/geotiff/dist-module/compression/packbits.js":
/*!******************************************************************!*\
  !*** ./node_modules/geotiff/dist-module/compression/packbits.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PackbitsDecoder)
/* harmony export */ });
/* harmony import */ var _basedecoder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basedecoder.js */ "./node_modules/geotiff/dist-module/compression/basedecoder.js");


class PackbitsDecoder extends _basedecoder_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  decodeBlock(buffer) {
    const dataView = new DataView(buffer);
    const out = [];

    for (let i = 0; i < buffer.byteLength; ++i) {
      let header = dataView.getInt8(i);
      if (header < 0) {
        const next = dataView.getUint8(i + 1);
        header = -header;
        for (let j = 0; j <= header; ++j) {
          out.push(next);
        }
        i += 1;
      } else {
        for (let j = 0; j <= header; ++j) {
          out.push(dataView.getUint8(i + j + 1));
        }
        i += header + 1;
      }
    }
    return new Uint8Array(out).buffer;
  }
}


/***/ }),

/***/ "./node_modules/geotiff/dist-module/predictor.js":
/*!*******************************************************!*\
  !*** ./node_modules/geotiff/dist-module/predictor.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "applyPredictor": () => (/* binding */ applyPredictor)
/* harmony export */ });
function decodeRowAcc(row, stride) {
  let length = row.length - stride;
  let offset = 0;
  do {
    for (let i = stride; i > 0; i--) {
      row[offset + stride] += row[offset];
      offset++;
    }

    length -= stride;
  } while (length > 0);
}

function decodeRowFloatingPoint(row, stride, bytesPerSample) {
  let index = 0;
  let count = row.length;
  const wc = count / bytesPerSample;

  while (count > stride) {
    for (let i = stride; i > 0; --i) {
      row[index + stride] += row[index];
      ++index;
    }
    count -= stride;
  }

  const copy = row.slice();
  for (let i = 0; i < wc; ++i) {
    for (let b = 0; b < bytesPerSample; ++b) {
      row[(bytesPerSample * i) + b] = copy[((bytesPerSample - b - 1) * wc) + i];
    }
  }
}

function applyPredictor(block, predictor, width, height, bitsPerSample,
  planarConfiguration) {
  if (!predictor || predictor === 1) {
    return block;
  }

  for (let i = 0; i < bitsPerSample.length; ++i) {
    if (bitsPerSample[i] % 8 !== 0) {
      throw new Error('When decoding with predictor, only multiple of 8 bits are supported.');
    }
    if (bitsPerSample[i] !== bitsPerSample[0]) {
      throw new Error('When decoding with predictor, all samples must have the same size.');
    }
  }

  const bytesPerSample = bitsPerSample[0] / 8;
  const stride = planarConfiguration === 2 ? 1 : bitsPerSample.length;

  for (let i = 0; i < height; ++i) {
    // Last strip will be truncated if height % stripHeight != 0
    if (i * stride * width * bytesPerSample >= block.byteLength) {
      break;
    }
    let row;
    if (predictor === 2) { // horizontal prediction
      switch (bitsPerSample[0]) {
        case 8:
          row = new Uint8Array(
            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,
          );
          break;
        case 16:
          row = new Uint16Array(
            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 2,
          );
          break;
        case 32:
          row = new Uint32Array(
            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 4,
          );
          break;
        default:
          throw new Error(`Predictor 2 not allowed with ${bitsPerSample[0]} bits per sample.`);
      }
      decodeRowAcc(row, stride, bytesPerSample);
    } else if (predictor === 3) { // horizontal floating point
      row = new Uint8Array(
        block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,
      );
      decodeRowFloatingPoint(row, stride, bytesPerSample);
    }
  }
  return block;
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2dlb3RpZmZfZGlzdC1tb2R1bGVfY29tcHJlc3Npb25fcGFja2JpdHNfanMuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQWlEOztBQUVsQztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNkRBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUNuQjJDOztBQUU1Qiw4QkFBOEIsdURBQVc7QUFDeEQ7QUFDQTtBQUNBOztBQUVBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsYUFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1Isd0JBQXdCLGFBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLE9BQU87QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCLE9BQU87QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixRQUFRO0FBQzFCLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsMEJBQTBCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELGtCQUFrQjtBQUM1RTtBQUNBO0FBQ0EsTUFBTSw0QkFBNEI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hcHNidW5kbGUvLi9ub2RlX21vZHVsZXMvZ2VvdGlmZi9kaXN0LW1vZHVsZS9jb21wcmVzc2lvbi9iYXNlZGVjb2Rlci5qcyIsIndlYnBhY2s6Ly9tYXBzYnVuZGxlLy4vbm9kZV9tb2R1bGVzL2dlb3RpZmYvZGlzdC1tb2R1bGUvY29tcHJlc3Npb24vcGFja2JpdHMuanMiLCJ3ZWJwYWNrOi8vbWFwc2J1bmRsZS8uL25vZGVfbW9kdWxlcy9nZW90aWZmL2Rpc3QtbW9kdWxlL3ByZWRpY3Rvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcHBseVByZWRpY3RvciB9IGZyb20gJy4uL3ByZWRpY3Rvci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VEZWNvZGVyIHtcbiAgYXN5bmMgZGVjb2RlKGZpbGVEaXJlY3RvcnksIGJ1ZmZlcikge1xuICAgIGNvbnN0IGRlY29kZWQgPSBhd2FpdCB0aGlzLmRlY29kZUJsb2NrKGJ1ZmZlcik7XG4gICAgY29uc3QgcHJlZGljdG9yID0gZmlsZURpcmVjdG9yeS5QcmVkaWN0b3IgfHwgMTtcbiAgICBpZiAocHJlZGljdG9yICE9PSAxKSB7XG4gICAgICBjb25zdCBpc1RpbGVkID0gIWZpbGVEaXJlY3RvcnkuU3RyaXBPZmZzZXRzO1xuICAgICAgY29uc3QgdGlsZVdpZHRoID0gaXNUaWxlZCA/IGZpbGVEaXJlY3RvcnkuVGlsZVdpZHRoIDogZmlsZURpcmVjdG9yeS5JbWFnZVdpZHRoO1xuICAgICAgY29uc3QgdGlsZUhlaWdodCA9IGlzVGlsZWQgPyBmaWxlRGlyZWN0b3J5LlRpbGVMZW5ndGggOiAoXG4gICAgICAgIGZpbGVEaXJlY3RvcnkuUm93c1BlclN0cmlwIHx8IGZpbGVEaXJlY3RvcnkuSW1hZ2VMZW5ndGhcbiAgICAgICk7XG4gICAgICByZXR1cm4gYXBwbHlQcmVkaWN0b3IoXG4gICAgICAgIGRlY29kZWQsIHByZWRpY3RvciwgdGlsZVdpZHRoLCB0aWxlSGVpZ2h0LCBmaWxlRGlyZWN0b3J5LkJpdHNQZXJTYW1wbGUsXG4gICAgICAgIGZpbGVEaXJlY3RvcnkuUGxhbmFyQ29uZmlndXJhdGlvbixcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGVkO1xuICB9XG59XG4iLCJpbXBvcnQgQmFzZURlY29kZXIgZnJvbSAnLi9iYXNlZGVjb2Rlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhY2tiaXRzRGVjb2RlciBleHRlbmRzIEJhc2VEZWNvZGVyIHtcbiAgZGVjb2RlQmxvY2soYnVmZmVyKSB7XG4gICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICBjb25zdCBvdXQgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyLmJ5dGVMZW5ndGg7ICsraSkge1xuICAgICAgbGV0IGhlYWRlciA9IGRhdGFWaWV3LmdldEludDgoaSk7XG4gICAgICBpZiAoaGVhZGVyIDwgMCkge1xuICAgICAgICBjb25zdCBuZXh0ID0gZGF0YVZpZXcuZ2V0VWludDgoaSArIDEpO1xuICAgICAgICBoZWFkZXIgPSAtaGVhZGVyO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8PSBoZWFkZXI7ICsraikge1xuICAgICAgICAgIG91dC5wdXNoKG5leHQpO1xuICAgICAgICB9XG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IGhlYWRlcjsgKytqKSB7XG4gICAgICAgICAgb3V0LnB1c2goZGF0YVZpZXcuZ2V0VWludDgoaSArIGogKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgaSArPSBoZWFkZXIgKyAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkob3V0KS5idWZmZXI7XG4gIH1cbn1cbiIsImZ1bmN0aW9uIGRlY29kZVJvd0FjYyhyb3csIHN0cmlkZSkge1xuICBsZXQgbGVuZ3RoID0gcm93Lmxlbmd0aCAtIHN0cmlkZTtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGRvIHtcbiAgICBmb3IgKGxldCBpID0gc3RyaWRlOyBpID4gMDsgaS0tKSB7XG4gICAgICByb3dbb2Zmc2V0ICsgc3RyaWRlXSArPSByb3dbb2Zmc2V0XTtcbiAgICAgIG9mZnNldCsrO1xuICAgIH1cblxuICAgIGxlbmd0aCAtPSBzdHJpZGU7XG4gIH0gd2hpbGUgKGxlbmd0aCA+IDApO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVSb3dGbG9hdGluZ1BvaW50KHJvdywgc3RyaWRlLCBieXRlc1BlclNhbXBsZSkge1xuICBsZXQgaW5kZXggPSAwO1xuICBsZXQgY291bnQgPSByb3cubGVuZ3RoO1xuICBjb25zdCB3YyA9IGNvdW50IC8gYnl0ZXNQZXJTYW1wbGU7XG5cbiAgd2hpbGUgKGNvdW50ID4gc3RyaWRlKSB7XG4gICAgZm9yIChsZXQgaSA9IHN0cmlkZTsgaSA+IDA7IC0taSkge1xuICAgICAgcm93W2luZGV4ICsgc3RyaWRlXSArPSByb3dbaW5kZXhdO1xuICAgICAgKytpbmRleDtcbiAgICB9XG4gICAgY291bnQgLT0gc3RyaWRlO1xuICB9XG5cbiAgY29uc3QgY29weSA9IHJvdy5zbGljZSgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHdjOyArK2kpIHtcbiAgICBmb3IgKGxldCBiID0gMDsgYiA8IGJ5dGVzUGVyU2FtcGxlOyArK2IpIHtcbiAgICAgIHJvd1soYnl0ZXNQZXJTYW1wbGUgKiBpKSArIGJdID0gY29weVsoKGJ5dGVzUGVyU2FtcGxlIC0gYiAtIDEpICogd2MpICsgaV07XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVByZWRpY3RvcihibG9jaywgcHJlZGljdG9yLCB3aWR0aCwgaGVpZ2h0LCBiaXRzUGVyU2FtcGxlLFxuICBwbGFuYXJDb25maWd1cmF0aW9uKSB7XG4gIGlmICghcHJlZGljdG9yIHx8IHByZWRpY3RvciA9PT0gMSkge1xuICAgIHJldHVybiBibG9jaztcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYml0c1BlclNhbXBsZS5sZW5ndGg7ICsraSkge1xuICAgIGlmIChiaXRzUGVyU2FtcGxlW2ldICUgOCAhPT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXaGVuIGRlY29kaW5nIHdpdGggcHJlZGljdG9yLCBvbmx5IG11bHRpcGxlIG9mIDggYml0cyBhcmUgc3VwcG9ydGVkLicpO1xuICAgIH1cbiAgICBpZiAoYml0c1BlclNhbXBsZVtpXSAhPT0gYml0c1BlclNhbXBsZVswXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXaGVuIGRlY29kaW5nIHdpdGggcHJlZGljdG9yLCBhbGwgc2FtcGxlcyBtdXN0IGhhdmUgdGhlIHNhbWUgc2l6ZS4nKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBieXRlc1BlclNhbXBsZSA9IGJpdHNQZXJTYW1wbGVbMF0gLyA4O1xuICBjb25zdCBzdHJpZGUgPSBwbGFuYXJDb25maWd1cmF0aW9uID09PSAyID8gMSA6IGJpdHNQZXJTYW1wbGUubGVuZ3RoO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaGVpZ2h0OyArK2kpIHtcbiAgICAvLyBMYXN0IHN0cmlwIHdpbGwgYmUgdHJ1bmNhdGVkIGlmIGhlaWdodCAlIHN0cmlwSGVpZ2h0ICE9IDBcbiAgICBpZiAoaSAqIHN0cmlkZSAqIHdpZHRoICogYnl0ZXNQZXJTYW1wbGUgPj0gYmxvY2suYnl0ZUxlbmd0aCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGxldCByb3c7XG4gICAgaWYgKHByZWRpY3RvciA9PT0gMikgeyAvLyBob3Jpem9udGFsIHByZWRpY3Rpb25cbiAgICAgIHN3aXRjaCAoYml0c1BlclNhbXBsZVswXSkge1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgcm93ID0gbmV3IFVpbnQ4QXJyYXkoXG4gICAgICAgICAgICBibG9jaywgaSAqIHN0cmlkZSAqIHdpZHRoICogYnl0ZXNQZXJTYW1wbGUsIHN0cmlkZSAqIHdpZHRoICogYnl0ZXNQZXJTYW1wbGUsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICByb3cgPSBuZXcgVWludDE2QXJyYXkoXG4gICAgICAgICAgICBibG9jaywgaSAqIHN0cmlkZSAqIHdpZHRoICogYnl0ZXNQZXJTYW1wbGUsIHN0cmlkZSAqIHdpZHRoICogYnl0ZXNQZXJTYW1wbGUgLyAyLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgcm93ID0gbmV3IFVpbnQzMkFycmF5KFxuICAgICAgICAgICAgYmxvY2ssIGkgKiBzdHJpZGUgKiB3aWR0aCAqIGJ5dGVzUGVyU2FtcGxlLCBzdHJpZGUgKiB3aWR0aCAqIGJ5dGVzUGVyU2FtcGxlIC8gNCxcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJlZGljdG9yIDIgbm90IGFsbG93ZWQgd2l0aCAke2JpdHNQZXJTYW1wbGVbMF19IGJpdHMgcGVyIHNhbXBsZS5gKTtcbiAgICAgIH1cbiAgICAgIGRlY29kZVJvd0FjYyhyb3csIHN0cmlkZSwgYnl0ZXNQZXJTYW1wbGUpO1xuICAgIH0gZWxzZSBpZiAocHJlZGljdG9yID09PSAzKSB7IC8vIGhvcml6b250YWwgZmxvYXRpbmcgcG9pbnRcbiAgICAgIHJvdyA9IG5ldyBVaW50OEFycmF5KFxuICAgICAgICBibG9jaywgaSAqIHN0cmlkZSAqIHdpZHRoICogYnl0ZXNQZXJTYW1wbGUsIHN0cmlkZSAqIHdpZHRoICogYnl0ZXNQZXJTYW1wbGUsXG4gICAgICApO1xuICAgICAgZGVjb2RlUm93RmxvYXRpbmdQb2ludChyb3csIHN0cmlkZSwgYnl0ZXNQZXJTYW1wbGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmxvY2s7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=