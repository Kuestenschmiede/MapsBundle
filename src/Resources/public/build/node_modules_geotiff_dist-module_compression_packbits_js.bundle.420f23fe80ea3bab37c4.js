"use strict";(self.webpackChunkmapsbundle=self.webpackChunkmapsbundle||[]).push([["node_modules_geotiff_dist-module_compression_packbits_js"],{"./node_modules/geotiff/dist-module/compression/basedecoder.js":(e,t,o)=>{function r(e,t){let o=e.length-t,r=0;do{for(let o=t;o>0;o--)e[r+t]+=e[r],r++;o-=t}while(o>0)}function s(e,t,o){let r=0,s=e.length;const n=s/o;for(;s>t;){for(let o=t;o>0;--o)e[r+t]+=e[r],++r;s-=t}const i=e.slice();for(let t=0;t<n;++t)for(let r=0;r<o;++r)e[o*t+r]=i[(o-r-1)*n+t]}o.d(t,{Z:()=>n});class n{async decode(e,t){const o=await this.decodeBlock(t),n=e.Predictor||1;if(1!==n){const t=!e.StripOffsets;return function(e,t,o,n,i,l){if(!t||1===t)return e;for(let e=0;e<i.length;++e){if(i[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(i[e]!==i[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const d=i[0]/8,a=2===l?1:i.length;for(let l=0;l<n&&!(l*a*o*d>=e.byteLength);++l){let n;if(2===t){switch(i[0]){case 8:n=new Uint8Array(e,l*a*o*d,a*o*d);break;case 16:n=new Uint16Array(e,l*a*o*d,a*o*d/2);break;case 32:n=new Uint32Array(e,l*a*o*d,a*o*d/4);break;default:throw new Error(`Predictor 2 not allowed with ${i[0]} bits per sample.`)}r(n,a)}else 3===t&&(n=new Uint8Array(e,l*a*o*d,a*o*d),s(n,a,d))}return e}(o,n,t?e.TileWidth:e.ImageWidth,t?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return o}}},"./node_modules/geotiff/dist-module/compression/packbits.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>s});var r=o("./node_modules/geotiff/dist-module/compression/basedecoder.js");class s extends r.Z{decodeBlock(e){const t=new DataView(e),o=[];for(let r=0;r<e.byteLength;++r){let e=t.getInt8(r);if(e<0){const s=t.getUint8(r+1);e=-e;for(let t=0;t<=e;++t)o.push(s);r+=1}else{for(let s=0;s<=e;++s)o.push(t.getUint8(r+s+1));r+=e+1}}return new Uint8Array(o).buffer}}}}]);