"use strict";(self.webpackChunkmapsbundle=self.webpackChunkmapsbundle||[]).push([["node_modules_geotiff_dist-module_compression_raw_js"],{"./node_modules/geotiff/dist-module/compression/basedecoder.js":(e,t,r)=>{function o(e,t){let r=e.length-t,o=0;do{for(let r=t;r>0;r--)e[o+t]+=e[o],o++;r-=t}while(r>0)}function s(e,t,r){let o=0,s=e.length;const n=s/r;for(;s>t;){for(let r=t;r>0;--r)e[o+t]+=e[o],++o;s-=t}const i=e.slice();for(let t=0;t<n;++t)for(let o=0;o<r;++o)e[r*t+o]=i[(r-o-1)*n+t]}r.d(t,{Z:()=>n});class n{async decode(e,t){const r=await this.decodeBlock(t),n=e.Predictor||1;if(1!==n){const t=!e.StripOffsets;return function(e,t,r,n,i,l){if(!t||1===t)return e;for(let e=0;e<i.length;++e){if(i[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(i[e]!==i[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const d=i[0]/8,a=2===l?1:i.length;for(let l=0;l<n&&!(l*a*r*d>=e.byteLength);++l){let n;if(2===t){switch(i[0]){case 8:n=new Uint8Array(e,l*a*r*d,a*r*d);break;case 16:n=new Uint16Array(e,l*a*r*d,a*r*d/2);break;case 32:n=new Uint32Array(e,l*a*r*d,a*r*d/4);break;default:throw new Error(`Predictor 2 not allowed with ${i[0]} bits per sample.`)}o(n,a)}else 3===t&&(n=new Uint8Array(e,l*a*r*d,a*r*d),s(n,a,d))}return e}(r,n,t?e.TileWidth:e.ImageWidth,t?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return r}}},"./node_modules/geotiff/dist-module/compression/raw.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var o=r("./node_modules/geotiff/dist-module/compression/basedecoder.js");class s extends o.Z{decodeBlock(e){return e}}}}]);